2
00:00:00,067 --> 00:00:03,003 line:-1
♪ Mellow instrumental hip-hop ♪


3
00:00:03,003 --> 00:00:10,077 size:2% position:90% align:right
♪


4
00:00:10,077 --> 00:00:11,845 line:-1
Sarina Wu: Hello!
My name is Sarina,


5
00:00:11.845 --> 00:00:14.882 line:-1 position:50%
and I'm a Software Engineer
on the RealityKit Tools team.


6
00:00:14.882 --> 00:00:17.851 line:-1 position:50%
Harjas Monga: And I am Harjas,
a Profiling Tools Engineer.


7
00:00:17,851 --> 00:00:19,653 line:-1
Sarina: Today, Harjas
and I will be introducing


8
00:00:19,653 --> 00:00:22,089 line:-1
the RealityKit Trace
template in Instruments.


9
00:00:22.089 --> 00:00:23.957 line:-1 position:50%
We'll show you how this template
can help you optimize


10
00:00:23.957 --> 00:00:26.460 line:-1 position:50%
the performance
of your spatial experiences.


11
00:00:26.460 --> 00:00:28.362 line:-1 position:50%
Performance is essential
to the user experience


12
00:00:28.362 --> 00:00:30.163 line:-1 position:50%
in spatial computing.


13
00:00:30.163 --> 00:00:32.299 line:-1 position:50%
To learn how to optimize
spatial experiences,


14
00:00:32.299 --> 00:00:33.934 line:-1 position:50%
we will briefly cover
how rendering works


15
00:00:33,934 --> 00:00:35,469 line:-1
on this platform,


16
00:00:35.469 --> 00:00:38.038 line:-1 position:50%
show you how to profile using
the RealityKit Trace template


17
00:00:38,038 --> 00:00:39,306 line:-1
in Instruments,


18
00:00:39.306 --> 00:00:41.008 line:-1 position:50%
and briefly cover
the other great tools


19
00:00:41.008 --> 00:00:43.677 line:-1 position:50%
available to optimize
your content.


20
00:00:43,677 --> 00:00:46,046 line:-1
This platform has unique
performance constraints.


21
00:00:46,046 --> 00:00:47,915 line:-1
To understand them,
you first need to understand


22
00:00:47.915 --> 00:00:49.349 line:-1 position:50%
how rendering works.


23
00:00:49,349 --> 00:00:52,853 line:-1
Rendering includes
your app process,


24
00:00:52.853 --> 00:00:54.855 line:-1 position:50%
the render server,


25
00:00:54,855 --> 00:00:56,623 line:-1
and the compositor.


26
00:00:56.623 --> 00:00:58.425 line:-1 position:50%
How your app interacts
with these components


27
00:00:58.425 --> 00:01:01.428 line:-1 position:50%
will depend on the types
of experiences you create.


28
00:01:01,428 --> 00:01:03,797 line:-1
Let's take a look at the types
of experiences you can create


29
00:01:03,797 --> 00:01:07,501 line:-1
for your spatial apps
and how they are rendered.


30
00:01:07,501 --> 00:01:10,170 line:-1
Apps on the platform can enter
either the Shared Space


31
00:01:10.170 --> 00:01:11.705 line:-1 position:50%
or a Full Space.


32
00:01:11.705 --> 00:01:13.440 line:-1 position:50%
These have different
performance implications


33
00:01:13,440 --> 00:01:16,710 line:-1
to consider based
on how they render.


34
00:01:16.710 --> 00:01:18.612 line:-1 position:50%
When multiple apps
run side by side,


35
00:01:18,612 --> 00:01:20,981 line:-1
they are all rendered
in the same space,


36
00:01:20,981 --> 00:01:23,784 line:-1
which is one of the reasons
we call it the Shared Space.


37
00:01:23,784 --> 00:01:25,652 line:-1
This means that the performance
of your app


38
00:01:25.652 --> 00:01:28.555 line:-1 position:50%
can be affected by the work that
the render server is doing


39
00:01:28.555 --> 00:01:30.624 line:-1 position:50%
to render the other apps.


40
00:01:30,624 --> 00:01:32,726 line:-1
Then the render server works
with the compositor


41
00:01:32,726 --> 00:01:36,396 line:-1
to generate the final frames.


42
00:01:36.396 --> 00:01:37.931 line:-1 position:50%
When your app
enters a Full Space,


43
00:01:37.931 --> 00:01:40.367 line:-1 position:50%
all other visible apps
are hidden.


44
00:01:40.367 --> 00:01:42.302 line:-1 position:50%
This means that
the performance of your app


45
00:01:42,302 --> 00:01:44,371 line:-1
is no longer affected
by the rendering work


46
00:01:44.371 --> 00:01:46.506 line:-1 position:50%
for the apps
that are now hidden.


47
00:01:46,506 --> 00:01:48,842 position:50%
To learn more about
how to enter a Full Space,


48
00:01:48,842 --> 00:01:52,879 position:50%
check out the session "Go
beyond the window with SwiftUI."


49
00:01:52,879 --> 00:01:55,515 line:-1
Based on what was just covered,
we have two recommended ways


50
00:01:55.515 --> 00:01:57.217 line:-1 position:50%
to profile your app.


51
00:01:57,217 --> 00:01:59,286 line:-1
Whenever you are investigating
performance issues


52
00:01:59.286 --> 00:02:01.588 line:-1 position:50%
or analyzing
system power impact,


53
00:02:01,588 --> 00:02:03,457 line:-1
you should profile your app
in isolation


54
00:02:03.457 --> 00:02:06.727 line:-1 position:50%
to understand your app's impact
on system performance.


55
00:02:06.727 --> 00:02:09.429 line:-1 position:50%
When you expect your app
to work alongside other apps,


56
00:02:09,429 --> 00:02:12,132 line:-1
you should profile your app
with those other apps.


57
00:02:12.132 --> 00:02:13.467 line:-1 position:50%
This is important to understand


58
00:02:13,467 --> 00:02:16,603 line:-1
how the user would
experience your app.


59
00:02:16,603 --> 00:02:18,305 line:-1
Let's profile a spatial app
to show you


60
00:02:18,305 --> 00:02:21,041 line:-1
how you can optimize your app's
performance in isolation


61
00:02:21,041 --> 00:02:23,810 line:-1
using the RealityKit
Trace template.


62
00:02:23.810 --> 00:02:25.245 line:-1 position:50%
We've been working
on Hello World,


63
00:02:25.245 --> 00:02:28.548 line:-1 position:50%
and we want to make sure that
there are no performance issues.


64
00:02:28.548 --> 00:02:30.150 line:-1 position:50%
Sarina: This is
the Start screen of the app,


65
00:02:30,150 --> 00:02:32,285 line:-1
which is a SwiftUI View.


66
00:02:32,285 --> 00:02:34,855 line:-1
This view has
an Objects in Orbit button.


67
00:02:34,855 --> 00:02:36,556 line:-1
We can tap on that button
to learn more


68
00:02:36.556 --> 00:02:38.658 line:-1 position:50%
about objects orbiting Earth.


69
00:02:38,658 --> 00:02:40,794 line:-1
The button opens a new view
that lists examples


70
00:02:40,794 --> 00:02:43,397 line:-1
of different objects
that are orbiting Earth.


71
00:02:43.397 --> 00:02:45.699 line:-1 position:50%
This view has 3D models
of these objects,


72
00:02:45.699 --> 00:02:48.301 line:-1 position:50%
including a satellite,


73
00:02:48,301 --> 00:02:50,871 line:-1
the Moon,


74
00:02:50,871 --> 00:02:54,474 line:-1
and a telescope.


75
00:02:54.474 --> 00:02:57.210 line:-1 position:50%
In this view, there is also
a View Orbits button.


76
00:02:57.210 --> 00:02:59.246 line:-1 position:50%
We can explore this
by tapping the button,


77
00:02:59.246 --> 00:03:01.748 line:-1 position:50%
which will open an immersive
experience showing Earth


78
00:03:01.748 --> 00:03:05.385 line:-1 position:50%
and a satellite
orbiting around it.


79
00:03:05.385 --> 00:03:07.687 line:-1 position:50%
We've used detailed assets
for these models,


80
00:03:07,687 --> 00:03:09,389 line:-1
and I suspect that they're
affecting the performance


81
00:03:09,389 --> 00:03:11,224 line:-1
of this app.


82
00:03:11,224 --> 00:03:12,459 line:-1
In the immersive experience,


83
00:03:12.459 --> 00:03:14.261 line:-1 position:50%
we can see the path
of the satellite animate


84
00:03:14.261 --> 00:03:17.364 line:-1 position:50%
as it orbits Earth.


85
00:03:17,364 --> 00:03:20,600 line:-1
We can even scale the Earth up
to see it in more detail.


86
00:03:20.600 --> 00:03:22.536 line:-1 position:50%
This interaction
is incredibly choppy,


87
00:03:22.536 --> 00:03:25.305 line:-1 position:50%
so I think there's
a performance issue here.


88
00:03:25.305 --> 00:03:26.907 line:-1 position:50%
Harjas and I profiled
that experience


89
00:03:26,907 --> 00:03:29,209 line:-1
using the RealityKit
Trace template.


90
00:03:29.209 --> 00:03:30.811 line:-1 position:50%
Harjas, could you
walk us through it?


91
00:03:30,811 --> 00:03:32,612 line:-1
Harjas: Of course,
let's walk through


92
00:03:32.612 --> 00:03:35.615 line:-1 position:50%
all the features available
in RealityKit Trace.


93
00:03:35.615 --> 00:03:38.118 line:-1 position:50%
RealityKit Trace is available
as a new template


94
00:03:38.118 --> 00:03:40.287 line:-1 position:50%
in Instruments 15.


95
00:03:40,287 --> 00:03:44,324 line:-1
It can be used to profile both
a real device and a simulator.


96
00:03:44.324 --> 00:03:46.993 line:-1 position:50%
To get the most accurate
and actionable information,


97
00:03:46.993 --> 00:03:49.596 line:-1 position:50%
you should profile
a real device.


98
00:03:49,596 --> 00:03:51,698 line:-1
When profiling
against the simulator


99
00:03:51,698 --> 00:03:54,334 line:-1
not all the timing
information will be accurate


100
00:03:54.334 --> 00:03:56.269 line:-1 position:50%
because of the hardware
and software differences


101
00:03:56.269 --> 00:03:58.238 line:-1 position:50%
between your Mac and on-device.


102
00:03:58.238 --> 00:04:00.173 line:-1 position:50%
But you could still use it
for quick iteration


103
00:04:00,173 --> 00:04:02,375 line:-1
and improving
some of the statistics


104
00:04:02.375 --> 00:04:04.845 line:-1 position:50%
that are not based on time.


105
00:04:04,845 --> 00:04:08,615 line:-1
The RealityKit Trace template
contains several instruments.


106
00:04:08,615 --> 00:04:10,383 line:-1
The first instrument
you will want to look at


107
00:04:10.383 --> 00:04:13.153 line:-1 position:50%
is the RealityKit Frames
instrument.


108
00:04:13.153 --> 00:04:14.855 line:-1 position:50%
This instrument
tracks each frame


109
00:04:14.855 --> 00:04:18.692 line:-1 position:50%
being rendered by the device.


110
00:04:18.692 --> 00:04:20.594 line:-1 position:50%
You can zoom in
on these frames to check


111
00:04:20.594 --> 00:04:23.230 line:-1 position:50%
how long each frame
took to render.


112
00:04:23.230 --> 00:04:25.565 line:-1 position:50%
With this, you can check
how long each stage


113
00:04:25,565 --> 00:04:27,033 line:-1
of the frame took to render.


114
00:04:27.033 --> 00:04:29.503 line:-1 position:50%
This gives you a high-level idea
of what portion


115
00:04:29.503 --> 00:04:33.039 line:-1 position:50%
of the render pipeline could be
causing performance problems.


116
00:04:33.039 --> 00:04:35.709 line:-1 position:50%
In order to achieve
a smooth user experience,


117
00:04:35,709 --> 00:04:40,113 line:-1
your application should be able
to achieve 90 frames per second.


118
00:04:40,113 --> 00:04:43,650 line:-1
However, the OS may not
always be targeting 90 fps.


119
00:04:43,650 --> 00:04:46,419 line:-1
It will render at the frame rate
most appropriate for the content


120
00:04:46.419 --> 00:04:49.890 line:-1 position:50%
being displayed and the
environment the device is in.


121
00:04:49,890 --> 00:04:51,791 line:-1
Because the frame rate
can change,


122
00:04:51.791 --> 00:04:53.627 line:-1 position:50%
every frame has a deadline
in which it has


123
00:04:53,627 --> 00:04:55,529 line:-1
to complete rendering
so that the device


124
00:04:55.529 --> 00:04:59.766 line:-1 position:50%
can hit whatever the current
target frame rate is.


125
00:04:59.766 --> 00:05:02.369 line:-1 position:50%
The frames are classified
into three groups:


126
00:05:02,369 --> 00:05:05,272 line:-1
frames that are completing
well within their deadline,


127
00:05:05,272 --> 00:05:08,775 line:-1
frames that are just barely
finishing within their deadline,


128
00:05:08.775 --> 00:05:10.911 line:-1 position:50%
and frames than run
past their deadline


129
00:05:10,911 --> 00:05:12,779 line:-1
and result in frame drops.


130
00:05:12,779 --> 00:05:15,115 line:-1
These classifications
are color coded


131
00:05:15,115 --> 00:05:17,651 line:-1
green, orange, and red,
respectively.


132
00:05:17.651 --> 00:05:19.886 line:-1 position:50%
Frames that are running
past the deadline


133
00:05:19,886 --> 00:05:23,456 line:-1
will negatively impact
the user experience.


134
00:05:23.456 --> 00:05:26.226 line:-1 position:50%
If you zoom out and check
the frames from a high level,


135
00:05:26.226 --> 00:05:28.495 line:-1 position:50%
the color coding allows you
to quickly find


136
00:05:28.495 --> 00:05:30.297 line:-1 position:50%
the problematic parts
of the trace.


137
00:05:30.297 --> 00:05:34.100 line:-1 position:50%
So, you can narrow down
any performance investigations


138
00:05:34.100 --> 00:05:37.938 line:-1 position:50%
to the areas where there are
the most frame drops.


139
00:05:37.938 --> 00:05:40.407 line:-1 position:50%
In addition to
the individual frames,


140
00:05:40.407 --> 00:05:43.843 line:-1 position:50%
the instrument also visualizes
the average amount of time


141
00:05:43.843 --> 00:05:49.616 line:-1 position:50%
the system spent on CPU or GPU
work to render each frame.


142
00:05:49.616 --> 00:05:51.251 line:-1 position:50%
The next instrument
you will want to check


143
00:05:51.251 --> 00:05:53.687 line:-1 position:50%
is the RealityKit Metrics
instrument.


144
00:05:53.687 --> 00:05:55.388 line:-1 position:50%
At a top level,
the instrument draws


145
00:05:55,388 --> 00:05:57,524 line:-1
all the bottlenecks
that it detected.


146
00:05:57,524 --> 00:05:59,726 line:-1
These bottlenecks
are generated by looking at


147
00:05:59,726 --> 00:06:03,897 line:-1
comprehensive timing information
from the entire render pipeline.


148
00:06:03.897 --> 00:06:06.766 line:-1 position:50%
Prioritize the bottlenecks
that occur during the same time


149
00:06:06.766 --> 00:06:10.036 line:-1 position:50%
that frames exceed
their deadline.


150
00:06:10,036 --> 00:06:12,138 line:-1
In the detail view below,
you will find


151
00:06:12,138 --> 00:06:14,574 line:-1
that these RealityKit
bottlenecks


152
00:06:14.574 --> 00:06:18.111 line:-1 position:50%
are summarized
by severity and type.


153
00:06:18,111 --> 00:06:21,047 line:-1
You can dig in further to see
exactly what kind of bottleneck


154
00:06:21.047 --> 00:06:23.516 line:-1 position:50%
the instrument found
and how much it affected


155
00:06:23.516 --> 00:06:26.353 line:-1 position:50%
your overall performance.


156
00:06:26.353 --> 00:06:29.022 line:-1 position:50%
In the extended detail view,
the instrument provides


157
00:06:29.022 --> 00:06:31.358 line:-1 position:50%
recommendations
on how to diagnose


158
00:06:31.358 --> 00:06:33.793 line:-1 position:50%
these bottlenecks further
and what steps you can take


159
00:06:33.793 --> 00:06:36.363 line:-1 position:50%
to mitigate them.


160
00:06:36,363 --> 00:06:38,898 line:-1
By expanding
the RealityKit Metrics track,


161
00:06:38,898 --> 00:06:41,268 line:-1
you will be presented
with several types of metrics


162
00:06:41,268 --> 00:06:44,838 line:-1
from different components
of the render pipeline.


163
00:06:44,838 --> 00:06:47,007 line:-1
These statistics can help
you understand


164
00:06:47.007 --> 00:06:49.976 line:-1 position:50%
the full complexity of the scene
your app is presenting.


165
00:06:49.976 --> 00:06:52.712 line:-1 position:50%
Some of the key metrics will
have associated thresholds


166
00:06:52,712 --> 00:06:57,317 line:-1
to help inform you on reasonable
expectations for those metrics.


167
00:06:57.317 --> 00:06:59.286 line:-1 position:50%
Use the metrics
to help guide you further


168
00:06:59.286 --> 00:07:01.921 line:-1 position:50%
in diagnosing a bottleneck
or why a frame


169
00:07:01.921 --> 00:07:05.292 line:-1 position:50%
is not hitting its deadline.


170
00:07:05,292 --> 00:07:07,093 line:-1
RealityKit Metrics
will visualize


171
00:07:07.093 --> 00:07:09.729 line:-1 position:50%
how much time is being
spent in each frame


172
00:07:09,729 --> 00:07:12,532 line:-1
to run the application's
RealityKit systems.


173
00:07:12,532 --> 00:07:14,768 line:-1
This includes all
the built-in systems


174
00:07:14.768 --> 00:07:18.672 line:-1 position:50%
and all the custom systems
your application may implement.


175
00:07:18,672 --> 00:07:21,775 line:-1
This information is best
combined with Time Profiler


176
00:07:21.775 --> 00:07:26.046 line:-1 position:50%
so you can optimize
your RealityKit system code.


177
00:07:26.046 --> 00:07:28.648 line:-1 position:50%
Lastly, review
the System Power Impact lane


178
00:07:28.648 --> 00:07:31.384 line:-1 position:50%
shown in RealityKit Metrics
to understand


179
00:07:31.384 --> 00:07:33.420 line:-1 position:50%
the power envelope
your application needs


180
00:07:33.420 --> 00:07:35.622 line:-1 position:50%
to work within
to provide a great


181
00:07:35.622 --> 00:07:38.525 line:-1 position:50%
and consistent user experience.


182
00:07:38,525 --> 00:07:40,727 line:-1
Now let's take a look
at some traces we took


183
00:07:40,727 --> 00:07:43,296 line:-1
while we were stepping
through the world experience.


184
00:07:43.296 --> 00:07:45.432 line:-1 position:50%
The first scene in the app
was the Start screen,


185
00:07:45.432 --> 00:07:48.735 line:-1 position:50%
which is implemented in SwiftUI.


186
00:07:48,735 --> 00:07:51,004 line:-1
In the frames instrument,
there are quite a few


187
00:07:51,004 --> 00:07:53,173 line:-1
dropped frames
throughout this trace.


188
00:07:53,173 --> 00:07:55,075 line:-1
These dropped frames
may not seem significant,


189
00:07:55.075 --> 00:07:58.378 line:-1 position:50%
but they can really damage
the user experience.


190
00:07:58.378 --> 00:08:00.480 line:-1 position:50%
I can use Option-drag to zoom in


191
00:08:00,480 --> 00:08:04,584 line:-1
on one of the more
problematic areas.


192
00:08:04,584 --> 00:08:09,456 line:-1
And by adjusting the time range,
I can check what bottlenecks


193
00:08:09.456 --> 00:08:11.991 line:-1 position:50%
the RealityKit Metrics
instrument found


194
00:08:11,991 --> 00:08:15,662 line:-1
during these
long-running frames.


195
00:08:15,662 --> 00:08:18,164 line:-1
The Instrument found
that the largest bottleneck


196
00:08:18.164 --> 00:08:21.468 line:-1 position:50%
in this time was
Core Animation Encoding.


197
00:08:21,468 --> 00:08:24,571 line:-1
So I'm going to check
the Core Animation statistics,


198
00:08:24.571 --> 00:08:27.807 line:-1 position:50%
which can be found by clicking
on the disclosure triangle


199
00:08:27,807 --> 00:08:31,010 line:-1
next to RealityKit Metrics
Instrument


200
00:08:31.010 --> 00:08:35.115 line:-1 position:50%
and selecting the track
labeled Core Animation.


201
00:08:35,115 --> 00:08:37,550 line:-1
These Core Animation metrics
can help inform us


202
00:08:37.550 --> 00:08:40.854 line:-1 position:50%
on what might have caused
these frame drops.


203
00:08:40,854 --> 00:08:42,389 line:-1
When investigating
these metrics,


204
00:08:42.389 --> 00:08:43.723 line:-1 position:50%
you will notice
that some of them


205
00:08:43.723 --> 00:08:47.060 line:-1 position:50%
have context of how severe
the metric is.


206
00:08:47,060 --> 00:08:50,563 line:-1
In the timeline, this is
reflected in the color coding.


207
00:08:50,563 --> 00:08:53,133 line:-1
This is to guide you on what
are reasonable thresholds


208
00:08:53.133 --> 00:08:55.201 line:-1 position:50%
for these key metrics.


209
00:08:55.201 --> 00:08:57.103 line:-1 position:50%
Based on the timeline
visualization,


210
00:08:57.103 --> 00:08:58.872 line:-1 position:50%
it is clear that the application


211
00:08:58.872 --> 00:09:01.040 line:-1 position:50%
is exceeding
the recommended threshold


212
00:09:01.040 --> 00:09:03.510 line:-1 position:50%
for the number
of offscreen prepares.


213
00:09:03.510 --> 00:09:06.379 line:-1 position:50%
The summary at the bottom
shows that the average number


214
00:09:06,379 --> 00:09:10,717 line:-1
of offscreen prepares
here are 180,


215
00:09:10,717 --> 00:09:13,686 line:-1
which is quite a high average.


216
00:09:13.686 --> 00:09:15.989 line:-1 position:50%
When considering
the Core Animation statistics,


217
00:09:15.989 --> 00:09:18.358 line:-1 position:50%
there are three types of work
you want to keep in mind.


218
00:09:18.358 --> 00:09:20.760 line:-1 position:50%
Firstly, transparency
and blur effects


219
00:09:20.760 --> 00:09:23.563 line:-1 position:50%
are very expensive operations
for the system.


220
00:09:23.563 --> 00:09:25.265 line:-1 position:50%
Use these effects
when they deliver


221
00:09:25,265 --> 00:09:29,302 line:-1
most impact to the user,
otherwise use them sparingly.


222
00:09:29.302 --> 00:09:33.039 line:-1 position:50%
The number of render passes is
determined by how many layers


223
00:09:33.039 --> 00:09:35.375 line:-1 position:50%
Core Animation
has to render individually


224
00:09:35.375 --> 00:09:37.143 line:-1 position:50%
for the entire image.


225
00:09:37.143 --> 00:09:40.213 line:-1 position:50%
And finally,
there are offscreen passes.


226
00:09:40.213 --> 00:09:42.916 line:-1 position:50%
So as the name implies,
an offscreen pass


227
00:09:42,916 --> 00:09:45,318 line:-1
is a render pass that
is rendered offscreen


228
00:09:45,318 --> 00:09:47,587 line:-1
and not to the display.


229
00:09:47.587 --> 00:09:49.989 line:-1 position:50%
An offscreen pass requires
the rendering pass


230
00:09:49,989 --> 00:09:52,759 line:-1
to pause what it's
currently doing


231
00:09:52.759 --> 00:09:56.496 line:-1 position:50%
and do some work that won't be
shown to the user.


232
00:09:56,496 --> 00:09:58,698 line:-1
However, the output
of the offscreen pass


233
00:09:58.698 --> 00:10:02.535 line:-1 position:50%
is needed to continue
the regular rendering pass.


234
00:10:02,535 --> 00:10:04,637 line:-1
Offscreen passes are
particularly impactful


235
00:10:04,637 --> 00:10:06,873 line:-1
for spatial apps.


236
00:10:06.873 --> 00:10:10.109 line:-1 position:50%
Unlike other app platforms,
this platform continuously


237
00:10:10.109 --> 00:10:13.513 line:-1 position:50%
renders spatial apps
because every single frame


238
00:10:13.513 --> 00:10:16.216 line:-1 position:50%
needs to account
for environment factors,


239
00:10:16,216 --> 00:10:19,052 line:-1
such as the user's
head movements.


240
00:10:19.052 --> 00:10:22.555 line:-1 position:50%
Therefore, your static UI
needs to be efficient enough


241
00:10:22.555 --> 00:10:26.092 line:-1 position:50%
that it can be rendered at
the system's target frame rate.


242
00:10:26,092 --> 00:10:27,494 line:-1
There are four
main types of work


243
00:10:27.494 --> 00:10:30.096 line:-1 position:50%
that can cause
an offscreen pass:


244
00:10:30.096 --> 00:10:31.598 line:-1 position:50%
shadows,


245
00:10:31.598 --> 00:10:32.866 line:-1 position:50%
masking,


246
00:10:32,866 --> 00:10:34,234 line:-1
rounded rectangles,


247
00:10:34.234 --> 00:10:35.835 line:-1 position:50%
and visual effects.


248
00:10:35,835 --> 00:10:37,804 position:50%
To learn more about
offscreen passes,


249
00:10:37,804 --> 00:10:38,805 position:50%
watch our tech talk


250
00:10:38,805 --> 00:10:43,710 line:0
on "Demystify and eliminate
hitches in the render phase."


251
00:10:43,710 --> 00:10:45,378 line:-1
Since there were a lot
of offscreen passes,


252
00:10:45.378 --> 00:10:47.814 line:-1 position:50%
I am going to check
the SwiftUI code for this view


253
00:10:47.814 --> 00:10:50.016 line:-1 position:50%
to find what could
have caused them.


254
00:10:50,016 --> 00:10:52,252 line:-1
In the SwiftUI code,
this view is not doing


255
00:10:52,252 --> 00:10:54,220 line:-1
any masking or visual effects.


256
00:10:54.220 --> 00:10:57.023 line:-1 position:50%
But there are instances
of shadows being applied.


257
00:10:57,023 --> 00:10:59,759 line:-1
For example,
in the SwiftUI View item,


258
00:10:59.759 --> 00:11:02.128 line:-1 position:50%
shadows are being applied
to several buttons.


259
00:11:02,128 --> 00:11:04,864 line:-1
Shadows are a particularly
expensive operation,


260
00:11:04.864 --> 00:11:07.333 line:-1 position:50%
especially when combined
with transparency.


261
00:11:07.333 --> 00:11:09.402 line:-1 position:50%
While shadows
are a useful UI idiom,


262
00:11:09.402 --> 00:11:10.837 line:-1 position:50%
for spatial apps,
you should use them


263
00:11:10.837 --> 00:11:13.706 line:-1 position:50%
when they deliver a significant
effect to the user.


264
00:11:13,706 --> 00:11:15,241 line:-1
I'm going to disable
these shadows


265
00:11:15,241 --> 00:11:18,278 line:-1
and take look at a new trace.


266
00:11:18.278 --> 00:11:19.979 line:-1 position:50%
With the shadows disabled,


267
00:11:19,979 --> 00:11:22,148 line:-1
in the RealityKit
Frames Instrument,


268
00:11:22.148 --> 00:11:25.785 line:-1 position:50%
there are few frame issues
and RealityKit Metrics reports


269
00:11:25.785 --> 00:11:30.790 line:-1 position:50%
that offscreen passes
have reduced by four times.


270
00:11:30,790 --> 00:11:33,159 line:-1
Now, the next scene that we saw
in the World app


271
00:11:33,159 --> 00:11:34,928 line:-1
was the objects in orbit view.


272
00:11:34.928 --> 00:11:36.829 line:-1 position:50%
I am going to open up
a trace from that scene


273
00:11:36,829 --> 00:11:41,167 line:-1
to see if there is anything
that can be optimized.


274
00:11:41,167 --> 00:11:43,036 line:-1
In the Frames Instrument,


275
00:11:43,036 --> 00:11:45,605 line:-1
there are a scattering
of dropped frames


276
00:11:45.605 --> 00:11:48.408 line:-1 position:50%
throughout the trace
with lots of bottlenecks.


277
00:11:48.408 --> 00:11:51.044 line:-1 position:50%
The detail view
for RealityKit Metrics


278
00:11:51,044 --> 00:11:53,713 line:-1
provides a summary
of those bottlenecks.


279
00:11:55,815 --> 00:11:57,684 line:-1
In the summary,
most of these bottlenecks


280
00:11:57.684 --> 00:12:00.186 line:-1 position:50%
are related to GPU Work Stalls.


281
00:12:00.186 --> 00:12:03.189 line:-1 position:50%
Because the bottleneck type
reported most frequently


282
00:12:03.189 --> 00:12:04.824 line:-1 position:50%
are GPU stalls,


283
00:12:04,824 --> 00:12:08,428 line:-1
I am again going to expand
RealityKit Metrics.


284
00:12:08.428 --> 00:12:12.665 line:-1 position:50%
But this time, I'll investigate
using the 3D Render track.


285
00:12:14,968 --> 00:12:16,970 line:-1
I'm going to select
the area of the trace


286
00:12:16.970 --> 00:12:21.007 line:-1 position:50%
that has a high number
of frame drops.


287
00:12:21.007 --> 00:12:22.342 line:-1 position:50%
In this time selection,


288
00:12:22,342 --> 00:12:26,579 line:-1
the 3D Render metrics
reports that the triangle


289
00:12:26.579 --> 00:12:28.781 line:-1 position:50%
and vertex counts
are far exceeding


290
00:12:28,781 --> 00:12:31,718 line:-1
the recommended thresholds.


291
00:12:31.718 --> 00:12:33.620 line:-1 position:50%
Next, I am going to highlight
the area of the trace


292
00:12:33.620 --> 00:12:36.155 line:-1 position:50%
where there aren't nearly
as many frame drops.


293
00:12:39.192 --> 00:12:40.960 line:-1 position:50%
And according
to the rendering metrics,


294
00:12:40,960 --> 00:12:43,096 line:-1
the triangle and vertex counts


295
00:12:43.096 --> 00:12:46.099 line:-1 position:50%
are within the recommended
thresholds.


296
00:12:46,099 --> 00:12:48,935 line:-1
This means you should really
be evaluating the number


297
00:12:48,935 --> 00:12:52,905 line:-1
and quality of the assets
the app is using in the scene.


298
00:12:52,905 --> 00:12:56,809 line:-1
When optimizing asset rendering,
first check the triangles,


299
00:12:56.809 --> 00:12:59.912 line:-1 position:50%
vertices, and draw calls
from the 3D Rendering group


300
00:12:59.912 --> 00:13:01.781 line:-1 position:50%
in RealityKit Metrics.


301
00:13:01,781 --> 00:13:04,951 line:-1
To optimize these metrics,
use simple shape meshes


302
00:13:04,951 --> 00:13:06,252 line:-1
when possible.


303
00:13:06.252 --> 00:13:09.255 line:-1 position:50%
Take advantage of instancing
when utilizing assets


304
00:13:09.255 --> 00:13:11.291 line:-1 position:50%
with the same mesh.


305
00:13:11,291 --> 00:13:14,027 line:-1
Check the complexity of assets
using the statistics


306
00:13:14.027 --> 00:13:17.230 line:-1 position:50%
in Reality Composer Pro,
which is a new developer tool


307
00:13:17.230 --> 00:13:22.035 line:-1 position:50%
that allows you to assemble,
edit, and preview 3D content.


308
00:13:22.035 --> 00:13:24.704 line:-1 position:50%
That content could later
be accessed through code


309
00:13:24,704 --> 00:13:27,440 line:-1
directly in your Xcode project.


310
00:13:27,440 --> 00:13:30,743 position:50%
To learn more about this tool
and how to create great assets,


311
00:13:30,743 --> 00:13:34,814 position:50%
check out the session
"Meet Reality Composer Pro."


312
00:13:34.814 --> 00:13:37.617 line:-1 position:50%
I went ahead and swapped out
the assets I was using


313
00:13:37,617 --> 00:13:39,686 line:-1
with those that used
fewer polygons


314
00:13:39.686 --> 00:13:41.554 line:-1 position:50%
and captured a new trace.


315
00:13:41.554 --> 00:13:43.956 line:-1 position:50%
In this trace,
the Frames Instrument reports


316
00:13:43.956 --> 00:13:47.226 line:-1 position:50%
that all the frames
are hitting their deadlines.


317
00:13:47.226 --> 00:13:50.396 line:-1 position:50%
And if I check the 3D rendering
statistics again,


318
00:13:52.598 --> 00:13:55.234 line:-1 position:50%
it reports that the triangle
and vertex counts


319
00:13:55.234 --> 00:13:57.103 line:-1 position:50%
are reduced substantially.


320
00:13:57.103 --> 00:13:59.872 line:-1 position:50%
While these assets
did use fewer polygons,


321
00:13:59,872 --> 00:14:02,909 line:-1
there was no loss in quality
of the experience.


322
00:14:02,909 --> 00:14:04,977 line:-1
The next trace is for
when we were interacting


323
00:14:04.977 --> 00:14:06.546 line:-1 position:50%
with the Earth model.


324
00:14:06,546 --> 00:14:08,648 line:-1
During this scene,
resizing the globe


325
00:14:08,648 --> 00:14:10,950 line:-1
was actually quite jittery.


326
00:14:10,950 --> 00:14:14,620 line:-1
RealityKit Metrics reports that
the System Power Impact lane


327
00:14:14.620 --> 00:14:18.391 line:-1 position:50%
was very high for
a substantial amount of time.


328
00:14:18,391 --> 00:14:21,094 line:-1
This is indicating that
some part of your application


329
00:14:21.094 --> 00:14:23.763 line:-1 position:50%
is being very inefficient
and the user experience


330
00:14:23,763 --> 00:14:25,364 line:-1
could be impacted.


331
00:14:25.364 --> 00:14:27.734 line:-1 position:50%
You should target for
your application to work well


332
00:14:27.734 --> 00:14:30.403 line:-1 position:50%
while keeping the device's
system power impact


333
00:14:30,403 --> 00:14:33,406 line:-1
in the nominal state
for as much time as possible.


334
00:14:33.406 --> 00:14:35.942 line:-1 position:50%
When profiling to reduce
system power impact,


335
00:14:35,942 --> 00:14:39,412 line:-1
always profile with
your application in isolation


336
00:14:39.412 --> 00:14:42.548 line:-1 position:50%
to ensure you get the most
actionable information.


337
00:14:42.548 --> 00:14:46.285 line:-1 position:50%
You can lower the system power
impact using several approaches.


338
00:14:46,285 --> 00:14:48,788 line:-1
First, make sure
that the statistics


339
00:14:48.788 --> 00:14:51.924 line:-1 position:50%
from RealityKit Metrics
are within expectations.


340
00:14:51.924 --> 00:14:53.960 line:-1 position:50%
If these are exceeding
expectations,


341
00:14:53,960 --> 00:14:56,996 line:-1
the device could be operating
at higher power states


342
00:14:56.996 --> 00:15:00.833 line:-1 position:50%
for long stretches of time
to deliver a smooth experience.


343
00:15:00.833 --> 00:15:04.337 line:-1 position:50%
Next, check what work
the CPU and GPU are doing.


344
00:15:04,337 --> 00:15:09,408 line:-1
For the CPU, check if Time
Profiler reports high CPU usage


345
00:15:09,408 --> 00:15:11,944 line:-1
during your high-power
draw regions.


346
00:15:11,944 --> 00:15:15,248 line:-1
And if it does,
optimize your CPU-bound code


347
00:15:15.248 --> 00:15:17.049 line:-1 position:50%
using Time Profiler.


348
00:15:17.049 --> 00:15:20.720 line:-1 position:50%
For the GPU,
we have performance states.


349
00:15:20.720 --> 00:15:22.889 line:-1 position:50%
When the GPU is
in the maximum stage,


350
00:15:22.889 --> 00:15:25.825 line:-1 position:50%
it draws a considerable
amount of power.


351
00:15:25.825 --> 00:15:28.694 line:-1 position:50%
In that case, we should use
the Metal System Trace template


352
00:15:28,694 --> 00:15:33,833 line:-1
in Instruments to see what work
is being done on the GPU.


353
00:15:33.833 --> 00:15:37.804 line:-1 position:50%
That way, we can understand
what could be optimized.


354
00:15:37.804 --> 00:15:40.573 line:-1 position:50%
Going back to the trace,


355
00:15:40.573 --> 00:15:43.476 line:-1 position:50%
Time Profiler tells us
that the CPU usage


356
00:15:43,476 --> 00:15:46,145 line:-1
was averaging 100 percent
in this region,


357
00:15:46.145 --> 00:15:48.447 line:-1 position:50%
and the GPU performance states


358
00:15:48.447 --> 00:15:52.218 line:-1 position:50%
were minimum
during most of this time.


359
00:15:52,218 --> 00:15:57,123 line:-1
Using Time Profiler, I can check
what caused the high CPU usage.


360
00:15:57,123 --> 00:16:00,326 line:-1
The heaviest stack trace
is in the extended detail view.


361
00:16:00,326 --> 00:16:03,729 line:-1
This is a very useful feature
of the Time Profiler,


362
00:16:03,729 --> 00:16:06,966 line:-1
as it allows you to quickly find
the most expensive parts


363
00:16:06.966 --> 00:16:08.768 line:-1 position:50%
of your code in the call tree.


364
00:16:08.768 --> 00:16:10.102 line:-1 position:50%
Looking at these frames,


365
00:16:10.102 --> 00:16:15.808 line:-1 position:50%
it appears that Entity.makeModel
is using a lot of CPU time.


366
00:16:15,808 --> 00:16:20,746 line:-1
The next frame down is calling
Entity.generateCollisionShapes.


367
00:16:20.746 --> 00:16:24.217 line:-1 position:50%
Therefore, the performance issue
appears to being caused


368
00:16:24,217 --> 00:16:28,087 line:-1
by constantly generating models
and collision shapes,


369
00:16:28.087 --> 00:16:30.590 line:-1 position:50%
which is an expensive operation.


370
00:16:30,590 --> 00:16:34,560 line:-1
I'm going to open Xcode to see
what I can do about this.


371
00:16:34.560 --> 00:16:37.864 line:-1 position:50%
This is the Entity.makeModel
function call


372
00:16:37.864 --> 00:16:42.535 line:-1 position:50%
that the call tree showed
was taking a lot of CPU time.


373
00:16:42.535 --> 00:16:49.175 line:-1 position:50%
This is getting invoked
within the makeGlobe function.


374
00:16:49.175 --> 00:16:51.510 line:-1 position:50%
I can Control-click
on the makeGlobe function


375
00:16:51.510 --> 00:16:54.080 line:-1 position:50%
to see who is invoking it.


376
00:16:54,080 --> 00:16:58,150 line:-1
It's getting invoked from
the Orbit SwiftUI view body.


377
00:16:58,150 --> 00:17:00,987 line:-1
This is antipattern
that should be avoided


378
00:17:00.987 --> 00:17:05.424 line:-1 position:50%
because the view body needs
to be computed very quickly.


379
00:17:05,424 --> 00:17:06,893 line:-1
You should avoid
doing model loading


380
00:17:06,893 --> 00:17:09,028 line:-1
or any other
expensive operations


381
00:17:09,028 --> 00:17:11,364 line:-1
in the body
of your SwiftUI views


382
00:17:11,364 --> 00:17:14,400 line:-1
because any time the state
of the view changes,


383
00:17:14,400 --> 00:17:17,937 line:-1
all those expensive operations
need to be recomputed.


384
00:17:17,937 --> 00:17:20,406 line:-1
So, what I am going to do
is remove this call


385
00:17:20.406 --> 00:17:23.142 line:-1 position:50%
from the view body.


386
00:17:23.142 --> 00:17:25.978 line:-1 position:50%
Next, in the ViewModel,
I will add a reusable version


387
00:17:25,978 --> 00:17:29,649 line:-1
of the Earth entity.


388
00:17:29,649 --> 00:17:32,952 line:-1
And finally, I am going to use
that reusable Earth entity


389
00:17:32.952 --> 00:17:36.455 line:-1 position:50%
in the Orbit View.


390
00:17:36.455 --> 00:17:39.058 line:-1 position:50%
Now, when the view body
is recomputed,


391
00:17:39,058 --> 00:17:43,763 line:-1
the app is not wasting time
reloading the same model.


392
00:17:43.763 --> 00:17:46.032 line:-1 position:50%
Looking at the trace
after our fix,


393
00:17:46,032 --> 00:17:50,136 line:-1
the power impact is brought
back down to the nominal state.


394
00:17:50.136 --> 00:17:53.572 line:-1 position:50%
And Time Profiler reports
that the CPU usage


395
00:17:53,572 --> 00:17:56,309 line:-1
has dropped from
100 percent to 10 percent.


396
00:17:56.309 --> 00:17:58.077 line:-1 position:50%
After all these optimizations,


397
00:17:58.077 --> 00:17:59.812 line:-1 position:50%
there are few
reported bottlenecks,


398
00:17:59.812 --> 00:18:02.114 line:-1 position:50%
almost every frame
is hitting its deadline,


399
00:18:02,114 --> 00:18:04,350 line:-1
and power is
within expectations.


400
00:18:04.350 --> 00:18:06.886 line:-1 position:50%
Now, the World app
is a well-optimized app


401
00:18:06.886 --> 00:18:09.622 line:-1 position:50%
for this platform.


402
00:18:09.622 --> 00:18:12.792 line:-1 position:50%
Now that we've reduced
the number of offscreen passes,


403
00:18:12.792 --> 00:18:16.162 line:-1 position:50%
replaced the high-polygon assets
with reasonable ones,


404
00:18:16,162 --> 00:18:18,497 line:-1
and lowered CPU and power usage,


405
00:18:18,497 --> 00:18:23,302 line:-1
we're going to step through the
optimized version of this app.


406
00:18:23.302 --> 00:18:25.871 line:-1 position:50%
The start screen looks great,
and since the shadows


407
00:18:25,871 --> 00:18:27,907 line:-1
weren't adding much
to the user experience,


408
00:18:27,907 --> 00:18:30,209 line:-1
this was a good optimization.


409
00:18:30,209 --> 00:18:33,612 line:-1
Next, let's open up
the Objects in Orbit.


410
00:18:33.612 --> 00:18:36.349 line:-1 position:50%
These models look great,
even though we are using assets


411
00:18:36.349 --> 00:18:38.017 line:-1 position:50%
with fewer polygons.


412
00:18:38.017 --> 00:18:41.587 line:-1 position:50%
So that extra detail was
just wasting resources.


413
00:18:41.587 --> 00:18:43.990 line:-1 position:50%
And finally, we're going to
open up the Earth model again


414
00:18:43,990 --> 00:18:45,992 line:-1
and try resizing.


415
00:18:47.560 --> 00:18:53.766 line:-1 position:50%
Now this interaction
is as smooth as butter.


416
00:18:53,766 --> 00:18:57,336 line:-1
That was a brief overview
of how to use RealityKit Trace


417
00:18:57.336 --> 00:18:59.705 line:-1 position:50%
to optimize your apps
for this new platform.


418
00:18:59,705 --> 00:19:03,142 line:-1
Hey, Sarina, what other tools
are available for developers?


419
00:19:03.142 --> 00:19:04.543 line:-1 position:50%
Sarina: There are
several tools available


420
00:19:04.543 --> 00:19:07.480 line:-1 position:50%
to help you optimize your apps
for spatial computing.


421
00:19:07.480 --> 00:19:09.315 line:-1 position:50%
For optimizing SwiftUI content,


422
00:19:09.315 --> 00:19:10.750 line:-1 position:50%
there are domain-specific
instruments


423
00:19:10.750 --> 00:19:13.219 line:-1 position:50%
in the Instruments app
for analyzing SwiftUI,


424
00:19:13.219 --> 00:19:15.388 line:-1 position:50%
Core Animation, and hangs.


425
00:19:15,388 --> 00:19:17,590 line:0
You can learn more about the
Hangs instrument in the session


426
00:19:17,590 --> 00:19:20,259 position:50%
"Analyze hangs
with Instruments."


427
00:19:20.259 --> 00:19:21.861 line:-1 position:50%
There are also
several tools available


428
00:19:21,861 --> 00:19:24,764 line:-1
to optimize your 3D
asset-based content.


429
00:19:24.764 --> 00:19:27.600 line:-1 position:50%
The Time Profiler Instrument
can help you find areas


430
00:19:27,600 --> 00:19:29,335 line:-1
where your app
is taking the most time,


431
00:19:29,335 --> 00:19:32,538 line:-1
such as when a large amount
of time is spent loading assets.


432
00:19:32,538 --> 00:19:33,973 line:-1
The RealityKit Metrics
Instrument


433
00:19:33,973 --> 00:19:36,509 line:-1
can help you diagnose when
scenes have too many assets


434
00:19:36.509 --> 00:19:38.477 line:-1 position:50%
or assets that are too complex.


435
00:19:38,477 --> 00:19:40,980 line:-1
Finally, you can also check
the complexity of your assets


436
00:19:40,980 --> 00:19:44,383 line:-1
as you're assembling a scene
using Reality Composer Pro.


437
00:19:44,383 --> 00:19:46,552 line:0
To learn more about
Reality Composer Pro,


438
00:19:46,552 --> 00:19:49,889 position:50%
watch the session
"Meet Reality Composer Pro."


439
00:19:49.889 --> 00:19:51.424 line:-1 position:50%
If you are using Metal
in your app,


440
00:19:51.424 --> 00:19:53.993 line:-1 position:50%
the most useful tool will be
the Metal System Trace template


441
00:19:53.993 --> 00:19:55.261 line:-1 position:50%
in Instruments.


442
00:19:55.261 --> 00:19:58.130 line:-1 position:50%
This template has key metrics,
such as the GPU timeline,


443
00:19:58.130 --> 00:20:01.067 line:-1 position:50%
GPU counters,
and GPU performance state.


444
00:20:01,067 --> 00:20:03,469 line:0
To learn more about
this template and other tools


445
00:20:03,469 --> 00:20:05,838 position:50%
for profiling Metal content,
check out the session


446
00:20:05,838 --> 00:20:07,706 line:0
"Discover Metal debugging,
profiling,


447
00:20:07,706 --> 00:20:10,142 position:50%
and asset creation tools."


448
00:20:10,142 --> 00:20:13,479 line:-1
To recap, performance
is essential for this platform.


449
00:20:13.479 --> 00:20:15.047 line:-1 position:50%
Apps need to be well optimized


450
00:20:15,047 --> 00:20:17,883 line:-1
to deliver the best possible
user experience.


451
00:20:17.883 --> 00:20:19.785 line:-1 position:50%
You can use
the RealityKit Trace template


452
00:20:19,785 --> 00:20:22,254 line:-1
to find performance bottlenecks
in your app.


453
00:20:22,254 --> 00:20:24,457 line:-1
Profiling proactively
with other instruments


454
00:20:24.457 --> 00:20:26.792 line:-1 position:50%
and checking your content
in Reality Composer Pro


455
00:20:26,792 --> 00:20:29,895 line:-1
can also help you find
and resolve performance issues.


456
00:20:29,895 --> 00:20:32,598 line:-1
To learn more about how to use
the RealityKit Trace template


457
00:20:32,598 --> 00:20:34,133 line:-1
to optimize your apps,


458
00:20:34,133 --> 00:20:36,802 line:-1
please check out
the developer documentation.


459
00:20:36,802 --> 00:20:38,637 line:0
And to get a better
understanding of performance


460
00:20:38,637 --> 00:20:40,573 position:50%
for this platform,
watch the session


461
00:20:40,573 --> 00:20:42,374 position:50%
"Optimize app power
and performance


462
00:20:42,374 --> 00:20:44,276 position:50%
for spatial computing."


463
00:20:44.276 --> 00:20:46.979 line:-1 position:50%
Enjoy optimizing
your spatial computing apps,


464
00:20:46,979 --> 00:20:48,547 line:-1
whatever the trace may be.


465
00:20:48.547 --> 00:20:49.915 line:-1 position:50%
Harjas: Thank you for watching.


466
00:20:49,915 --> 00:20:53,052 line:0 size:2% position:90%
♪

