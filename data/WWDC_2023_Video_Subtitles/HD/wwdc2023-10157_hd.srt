2
00:00:01.034 --> 00:00:07.040
♪ ♪


3
00:00:10.010 --> 00:00:11.845
Person: Hello, and welcome to


4
00:00:11.912 --> 00:00:14.715
Wind your way through advanced animations
in SwiftUI.


5
00:00:14.781 --> 00:00:17.951
I’m Tim, a member of the SwiftUI team.


6
00:00:18.018 --> 00:00:22.089
SwiftUI comes with a powerful set of
animation tools that make your app shine,


7
00:00:22.155 --> 00:00:25.993
with animations that are interruptible,
physics-based for believable motion,


8
00:00:26.059 --> 00:00:29.296
and deeply integrated
throughout the framework.


9
00:00:29.363 --> 00:00:31.999
Today we’re going to talk
about some exciting new tools


10
00:00:32.065 --> 00:00:35.736
that let you take animation
in your app to the next level.


11
00:00:35.802 --> 00:00:38.138
Before we begin,
let’s do a quick review


12
00:00:38.205 --> 00:00:41.975
of the animation tools
that you already know in SwiftUI.


13
00:00:42.042 --> 00:00:44.044
You might have seen this app
that allows you to vote


14
00:00:44.111 --> 00:00:46.947
for your favorite kind of pet
in other sessions.


15
00:00:47.014 --> 00:00:49.383
To simplify this demo,
I went ahead and removed


16
00:00:49.449 --> 00:00:53.787
all of the other options,
because cats are clearly the best choice.


17
00:00:53.854 --> 00:00:58.325
Adding animation to your app is as easy
as using "withAnimation" or adding


18
00:00:58.392 --> 00:01:02.596
an "animation" modifier, which gives
you great behavior out of the box.


19
00:01:02.663 --> 00:01:06.767
After the state of your application
changes, SwiftUI applies animations


20
00:01:06.834 --> 00:01:10.904
that interpolate from
the previous state to the new state.


21
00:01:10.971 --> 00:01:15.776
But with animation, as with life,
sometimes the most rewarding experiences


22
00:01:15.843 --> 00:01:20.013
are found when you aren’t so focused on
where you came from or where you’re going.


23
00:01:20.080 --> 00:01:21.949
Sometimes you have
to get off of the beaten path


24
00:01:22.015 --> 00:01:25.219
and focus on the journey itself
to make something special.


25
00:01:25.285 --> 00:01:29.823
And some animations don’t simply animate
from a previous state into a new state.


26
00:01:29.890 --> 00:01:32.125
Today, I’ll talk about
some powerful new tools


27
00:01:32.192 --> 00:01:36.363
for building complex,
multistep animations.


28
00:01:36.430 --> 00:01:38.398
Rather than animating between two states,


29
00:01:38.465 --> 00:01:42.603
these animations can define
multiple steps that happen in sequence.


30
00:01:42.669 --> 00:01:45.973
And they are especially great
in two situations:


31
00:01:46.039 --> 00:01:50.978
repeating animations, that loop
continuously while a view is visible...


32
00:01:51.044 --> 00:01:56.149
and event-driven animations, such as
a view that pulses when an event occurs.


33
00:01:56.216 --> 00:01:59.486
In this talk, I’m going to introduce
a new family of APIs


34
00:01:59.553 --> 00:02:02.789
that makes animations like these
even easier to build.


35
00:02:02.856 --> 00:02:05.526
I’ll start by introducing you
to animation phases,


36
00:02:05.592 --> 00:02:09.062
which let SwiftUI automatically advance
through a set of pre-planned states


37
00:02:09.129 --> 00:02:11.465
that make up your animation.


38
00:02:11.532 --> 00:02:16.170
Next, I’ll demonstrate how to take
animations even further with keyframes.


39
00:02:16.236 --> 00:02:18.872
And finally, I’ll show
some advanced tips and tricks


40
00:02:18.939 --> 00:02:21.742
to get the most out of this API.


41
00:02:21.808 --> 00:02:25.512
I think we’re ready to go.
Let’s jump right in.


42
00:02:25.579 --> 00:02:29.049
When I’m not writing Swift,
I like to get out trail running.


43
00:02:29.116 --> 00:02:31.018
Trail races can be very long.


44
00:02:31.084 --> 00:02:34.922
Ultramarathons can take a whole day,
or even multiple days to finish,


45
00:02:34.988 --> 00:02:37.457
so I’ve been building an app
to plan for upcoming events,


46
00:02:37.524 --> 00:02:41.328
and to help me remember
important details during a run.


47
00:02:41.395 --> 00:02:44.064
Nutrition is super important
when you’re on the trail.


48
00:02:44.131 --> 00:02:49.536
Unfortunately, it can be easy to forget to
eat late in a race as exhaustion sets in.


49
00:02:49.603 --> 00:02:53.273
I’ve added a feature to my app
that reminds me to eat at the right times.


50
00:02:53.340 --> 00:02:56.009
Here, the reminder at the bottom
of the screen is letting me know


51
00:02:56.076 --> 00:02:58.045
that I’m overdue for a meal.


52
00:02:58.111 --> 00:03:00.447
But there’s a problem.


53
00:03:00.514 --> 00:03:02.816
Later in a race, I can get so tired


54
00:03:02.883 --> 00:03:05.452
that I could miss a subtle indicator
like this.


55
00:03:05.519 --> 00:03:07.688
I really don’t want
to accidentally skip a meal,


56
00:03:07.754 --> 00:03:11.758
so I’ll add some motion
to make this reminder stand out.


57
00:03:11.825 --> 00:03:13.861
Let’s focus on this one view.


58
00:03:13.927 --> 00:03:18.465
We want to give it an animated
highlight effect to make it extra visible.


59
00:03:18.532 --> 00:03:23.470
To make this view animate, we will apply
the ".phaseAnimator" modifier.


60
00:03:23.537 --> 00:03:27.341
When you use the phase animator modifier,
you provide a sequence of states


61
00:03:27.407 --> 00:03:31.044
that define the individual steps
in a multipart animation.


62
00:03:31.111 --> 00:03:34.948
SwiftUI then animates
between these states automatically.


63
00:03:35.015 --> 00:03:37.618
In this case, we’ll just be
animating between two states:


64
00:03:37.684 --> 00:03:42.289
highlighted, and not highlighted,
so we can simply use boolean values.


65
00:03:42.356 --> 00:03:45.259
Next, we’ll apply some modifiers
to change the appearance of the view


66
00:03:45.325 --> 00:03:47.394
depending on the current phase.


67
00:03:47.461 --> 00:03:49.663
We’ll start with an opacity modifier:


68
00:03:49.730 --> 00:03:51.765
we’ll make the view fully opaque
when highlighted,


69
00:03:51.832 --> 00:03:54.468
and 50% transparent otherwise.


70
00:03:54.535 --> 00:03:57.171
And right away, the view starts animating.


71
00:03:57.237 --> 00:04:01.875
Let’s talk about what SwiftUI
is doing on your behalf.


72
00:04:01.942 --> 00:04:05.846
In our view, we provided two phases
to the phase animator modifier:


73
00:04:05.913 --> 00:04:08.081
false, and true.


74
00:04:08.148 --> 00:04:11.018
When the view first appears,
the first phase is active,


75
00:04:11.084 --> 00:04:14.488
causing the view to be 50% transparent.


76
00:04:14.555 --> 00:04:17.558
SwiftUI then immediately begins
an animated transition


77
00:04:17.624 --> 00:04:21.361
to the next phase,
where the view is fully opaque.


78
00:04:21.428 --> 00:04:25.399
Then when that animation is finished,
SwiftUI advances again.


79
00:04:25.465 --> 00:04:28.969
We only have two phases,
so we loop around to the beginning.


80
00:04:29.036 --> 00:04:33.307
This causes our animation
to cycle between the two states.


81
00:04:33.373 --> 00:04:37.110
Of course, you can also define animations
that include more than two phases,


82
00:04:37.177 --> 00:04:39.279
and any number
of additional view modifiers,


83
00:04:39.346 --> 00:04:42.983
which I'll demonstrate later on.


84
00:04:43.050 --> 00:04:46.620
Now while the view is animating,
the effect is really subtle.


85
00:04:46.687 --> 00:04:51.124
Instead of changing the opacity,
let’s try changing the foreground style.


86
00:04:51.191 --> 00:04:52.626
We’ll use red when highlighted,


87
00:04:52.693 --> 00:04:56.563
and otherwise fall back
to the primary foreground style.


88
00:04:56.630 --> 00:05:01.301
And that’s much more visible.
The animations are a bit abrupt, though.


89
00:05:01.368 --> 00:05:04.671
By default,
SwiftUI uses a spring animation.


90
00:05:04.738 --> 00:05:07.541
And while springs are great
for handling dynamic state changes,


91
00:05:07.608 --> 00:05:11.812
in this case we want a smoother,
more consistent animation.


92
00:05:11.879 --> 00:05:15.482
We can change the animation
by adding a trailing "animation" closure.


93
00:05:15.549 --> 00:05:18.352
The phase that is being animated to
is passed in,


94
00:05:18.418 --> 00:05:21.722
in case we want to use a different
animation for each phase.


95
00:05:21.788 --> 00:05:25.592
But in this case, I always want to use
the same ease in out animation


96
00:05:25.659 --> 00:05:28.195
with a custom duration,
to slow things down.


97
00:05:28.262 --> 00:05:30.931
Now, you wouldn’t typically
use an animation


98
00:05:30.998 --> 00:05:34.134
with a duration of a full second
for an interactive state change


99
00:05:34.201 --> 00:05:37.604
because you wouldn’t want to make
people wait for an animation to finish.


100
00:05:37.671 --> 00:05:39.940
But in this case,
we are building an ambient effect,


101
00:05:40.007 --> 00:05:42.209
so it’s ok for things
to move a bit slower,


102
00:05:42.276 --> 00:05:45.078
just like my pace if I miss that meal.


103
00:05:45.145 --> 00:05:48.215
Now that we’ve solved the urgent problem
of mid-race nutrition,


104
00:05:48.282 --> 00:05:51.318
let’s look at one more way
to use animation phases:


105
00:05:51.385 --> 00:05:54.087
animations that are triggered by events.


106
00:05:54.154 --> 00:05:56.023
I’ve been working on my app for a while,


107
00:05:56.089 --> 00:05:59.326
and I’ve added the ability to see
which races my friends have run.


108
00:05:59.393 --> 00:06:01.795
The emoji show reactions left by others.


109
00:06:01.862 --> 00:06:05.866
Every runner sometimes asks themselves:
why do I do this?


110
00:06:05.933 --> 00:06:08.569
Why did I sign up to run so many miles?


111
00:06:08.635 --> 00:06:09.937
And the least that our app can do


112
00:06:10.003 --> 00:06:12.005
is to feed the need
for external validation


113
00:06:12.072 --> 00:06:15.175
by adding some excitement
when someone else likes a race.


114
00:06:15.242 --> 00:06:20.514
We’ll add an animation that plays
every time someone adds a reaction.


115
00:06:20.581 --> 00:06:24.351
The first thing that we will do is define
the phases of our animation.


116
00:06:24.418 --> 00:06:26.820
Unlike in the previous example
that simply alternated


117
00:06:26.887 --> 00:06:30.324
between two states,
we want a more complex animation.


118
00:06:30.390 --> 00:06:34.995
An enum is a great way to define
a list of steps for the animation.


119
00:06:35.062 --> 00:06:38.232
We’ve added three cases:
a case for the initial appearance,


120
00:06:38.298 --> 00:06:42.569
then cases to move the view up,
and scale up the view.


121
00:06:42.636 --> 00:06:44.071
To simplify our view body,


122
00:06:44.137 --> 00:06:46.573
we will add computed properties
to this enum


123
00:06:46.640 --> 00:06:49.343
that define the different effects
that we will apply.


124
00:06:49.409 --> 00:06:52.112
I want the view to jump up
during the animation,


125
00:06:52.179 --> 00:06:56.149
so I’ve added
a computed vertical offset property.


126
00:06:56.216 --> 00:07:00.587
I switch over the enum
to return the right offset for each case.


127
00:07:00.654 --> 00:07:04.124
Likewise, I’ve added
two additional computed properties


128
00:07:04.191 --> 00:07:06.960
to determine the view’s scale
and foreground style.


129
00:07:07.027 --> 00:07:10.030
I won’t show the implementations here,
but they also use a switch statement,


130
00:07:10.097 --> 00:07:13.367
just like the vertical offset property.


131
00:07:13.433 --> 00:07:17.704
Now, let’s get back to our view
and add the animation.


132
00:07:17.771 --> 00:07:19.940
We add the phaseAnimator modifier,


133
00:07:20.007 --> 00:07:22.509
but this time,
we give it a "trigger" value.


134
00:07:22.576 --> 00:07:25.379
When we give the phase animator modifier
a trigger value,


135
00:07:25.445 --> 00:07:28.048
it observes the value
that you specify for changes.


136
00:07:28.115 --> 00:07:29.550
And when a change occurs,


137
00:07:29.616 --> 00:07:32.953
it begins animating through the phases
that you specify.


138
00:07:33.020 --> 00:07:35.923
Using the computed properties
that we defined on the phase type,


139
00:07:35.989 --> 00:07:37.991
we apply modifiers to the view.


140
00:07:38.058 --> 00:07:40.327
And this animation
technically does the right thing,


141
00:07:40.394 --> 00:07:41.595
but it doesn’t feel great.


142
00:07:41.662 --> 00:07:43.730
It’s a bit sluggish.


143
00:07:43.797 --> 00:07:46.333
We’ll customize the animation
for each transition


144
00:07:46.400 --> 00:07:47.801
to get the effect that we want,


145
00:07:47.868 --> 00:07:50.637
including a couple
of different spring animations.


146
00:07:50.704 --> 00:07:52.573
And this looks much better!


147
00:07:52.639 --> 00:07:56.877
But what if we want to take
this animation even further?


148
00:07:56.944 --> 00:07:59.746
When someone has finished 50 or 100 miles
on the trail,


149
00:07:59.813 --> 00:08:02.616
we want to give them an animation
that leaves no doubt in their mind


150
00:08:02.683 --> 00:08:08.322
that all of those miles were worth it when
they receive some well-deserved kudos.


151
00:08:08.388 --> 00:08:13.327
When you need even more control,
there’s another powerful tool: keyframes.


152
00:08:13.393 --> 00:08:16.263
Next, I’ll show you how to
use keyframes to define complex,


153
00:08:16.330 --> 00:08:21.335
coordinated animations with
complete control over timing and movement.


154
00:08:21.401 --> 00:08:23.637
First, let’s talk about
how keyframes are different


155
00:08:23.704 --> 00:08:26.473
from the phases that we have used so far.


156
00:08:26.540 --> 00:08:30.644
Phases define discrete states that are
provided to your view one at a time.


157
00:08:30.711 --> 00:08:33.013
And SwiftUI animates between those states,


158
00:08:33.080 --> 00:08:36.450
using the same animation types
that you already know,


159
00:08:36.517 --> 00:08:41.121
and this works really well for animations
that can be modeled as discrete states.


160
00:08:41.188 --> 00:08:43.123
When a state transition occurs,


161
00:08:43.190 --> 00:08:46.126
all of the properties are animated
at the same time.


162
00:08:46.193 --> 00:08:50.831
And then, when that animation is finished,
SwiftUI animates to the next state.


163
00:08:50.898 --> 00:08:54.434
And this continues across
all of the phases of the animation.


164
00:08:54.501 --> 00:08:57.571
But what if we want to animate
each property independently?


165
00:08:57.638 --> 00:09:00.240
That’s where keyframes come in.


166
00:09:00.307 --> 00:09:04.178
Keyframes let you define values
at specific times within an animation.


167
00:09:04.244 --> 00:09:08.415
To demonstrate, I’ll animate this view,
starting with a rotation effect.


168
00:09:08.482 --> 00:09:14.421
The dots here indicate keyframes: angles
to use at each point during the animation.


169
00:09:14.488 --> 00:09:16.056
When the animation plays back,


170
00:09:16.123 --> 00:09:19.226
SwiftUI interpolates values
in between these keyframes,


171
00:09:19.293 --> 00:09:23.096
which we can then use to apply modifiers
to the view.


172
00:09:23.163 --> 00:09:27.034
And keyframes allow you to independently
animate multiple effects at the same time


173
00:09:27.100 --> 00:09:31.605
by defining separate tracks,
each with their own unique timing.


174
00:09:31.672 --> 00:09:33.941
This is really powerful,
because you can use keyframes


175
00:09:34.007 --> 00:09:36.610
to drive any modifier in SwiftUI.


176
00:09:36.677 --> 00:09:39.746
In this example, we are using keyframes
to drive several other tracks,


177
00:09:39.813 --> 00:09:43.750
including vertical stretch,
scale, and translation.


178
00:09:43.817 --> 00:09:47.788
Let’s get back to our view
and see what this looks like in code.


179
00:09:47.855 --> 00:09:50.958
I already have an idea of the animation
that I want to build,


180
00:09:51.024 --> 00:09:55.429
so my first step is to define the
properties that will drive the animation.


181
00:09:55.495 --> 00:09:57.731
To do this, I’ll create a new struct


182
00:09:57.798 --> 00:10:02.402
containing all of the different properties
that will be independently animated.


183
00:10:02.469 --> 00:10:06.540
Keyframes can animate any value
conforming to the "Animatable" protocol.


184
00:10:06.607 --> 00:10:08.742
Notice that several properties
use "Double",


185
00:10:08.809 --> 00:10:11.378
which now conforms to "Animatable."


186
00:10:11.445 --> 00:10:13.747
Unlike phases,
in which you model separate,


187
00:10:13.814 --> 00:10:16.917
discrete states,
keyframes generate interpolated values


188
00:10:16.984 --> 00:10:19.119
of the type that you specify.


189
00:10:19.186 --> 00:10:22.556
While an animation is in progress,
SwiftUI will provide you with a value


190
00:10:22.623 --> 00:10:27.194
of this type on every frame
so that you can update the view.


191
00:10:27.261 --> 00:10:30.931
Next, we add
the keyframeAnimator modifier.


192
00:10:30.998 --> 00:10:34.401
This modifier is similar to
the phase animator that we used earlier,


193
00:10:34.468 --> 00:10:37.404
but accepts keyframes.


194
00:10:37.471 --> 00:10:42.075
Notice that we provide an instance
of our struct to use as the initial value.


195
00:10:42.142 --> 00:10:47.014
The keyframes that we define
will apply animations onto this value.


196
00:10:47.080 --> 00:10:52.219
Next, we’ll apply modifiers to our view
for each of the properties on the struct.


197
00:10:52.286 --> 00:10:55.789
And finally,
we’ll start defining keyframes.


198
00:10:55.856 --> 00:10:58.725
As I mentioned, keyframes let you
build sophisticated animations


199
00:10:58.792 --> 00:11:01.295
with different keyframes
for different properties.


200
00:11:01.361 --> 00:11:05.199
To make this possible,
keyframes are organized into tracks.


201
00:11:05.265 --> 00:11:08.735
Each track controls a different property
of the type that you are animating,


202
00:11:08.802 --> 00:11:12.840
which is specified by the key path
that you provide when creating the track.


203
00:11:12.906 --> 00:11:16.977
Here, we are adding keyframes
for the scale property.


204
00:11:17.044 --> 00:11:18.745
We first add a linear keyframe,


205
00:11:18.812 --> 00:11:23.050
repeating the initial scale value
and holding it for 0.36 seconds.


206
00:11:23.116 --> 00:11:26.520
And if you’re wondering
how I settled on 0.36,


207
00:11:26.587 --> 00:11:28.856
I found that duration
by trying out different values


208
00:11:28.922 --> 00:11:30.891
to change the feel of the animation,


209
00:11:30.958 --> 00:11:33.227
and that’s an important point
about keyframes.


210
00:11:33.293 --> 00:11:37.197
Making an animation that suits your app
can take some experimentation.


211
00:11:37.264 --> 00:11:41.702
Previews in Xcode can be a great way
to fine-tune your animations.


212
00:11:41.768 --> 00:11:44.204
Next, we add a "SpringKeyframe."


213
00:11:44.271 --> 00:11:48.008
This uses a spring function
to pull the value toward the target.


214
00:11:48.075 --> 00:11:50.043
And we’ve specified a duration.


215
00:11:50.110 --> 00:11:53.714
For a spring keyframe with a set duration,
this means that the spring function


216
00:11:53.780 --> 00:11:56.316
will only animate the value
for that duration.


217
00:11:56.383 --> 00:12:00.254
After that, interpolation will begin
to the next keyframe.


218
00:12:00.320 --> 00:12:06.360
Finally, I’ll add another spring keyframe
that animates the scale back to 1.0.


219
00:12:06.426 --> 00:12:10.364
The different kinds of keyframes control
how values are interpolated.


220
00:12:10.430 --> 00:12:14.034
Alrighty, we’ve seen
LinearKeyframe and SpringKeyframe.


221
00:12:14.101 --> 00:12:17.638
There are actually four different types
of keyframes.


222
00:12:17.704 --> 00:12:20.073
I’ll explain how they are different:


223
00:12:20.140 --> 00:12:25.846
LinearKeyframe interpolates linearly in
vector space from the previous keyframe.


224
00:12:25.913 --> 00:12:30.050
SpringKeyframe, as its name suggests,
uses a spring function to interpolate


225
00:12:30.117 --> 00:12:33.921
to the target value
from the previous keyframe.


226
00:12:33.987 --> 00:12:39.026
CubicKeyframe uses a cubic Bézier curve
to interpolate between keyframes.


227
00:12:39.092 --> 00:12:41.728
If you combine multiple
cubic keyframes in sequence,


228
00:12:41.795 --> 00:12:46.266
the resulting curve is equivalent
to a Catmull-Rom spline.


229
00:12:46.333 --> 00:12:52.306
And finally, MoveKeyframe immediately
jumps to a value without interpolation.


230
00:12:52.372 --> 00:12:56.310
Each kind of keyframe supports
customization to give you full control,


231
00:12:56.376 --> 00:12:59.746
and you can mix and match different kinds
of keyframes within an animation.


232
00:12:59.813 --> 00:13:02.249
SwiftUI maintains velocity
between keyframes


233
00:13:02.316 --> 00:13:06.720
to make sure
your animation remains continuous.


234
00:13:06.787 --> 00:13:11.992
Coming back to our view,
we’re ready to add the next track.


235
00:13:12.059 --> 00:13:14.127
Here, we’ve used linear
and spring keyframes


236
00:13:14.194 --> 00:13:16.997
to animate the vertical translation.


237
00:13:17.064 --> 00:13:20.934
Right before the view jumps up,
it pulls back in anticipation.


238
00:13:21.001 --> 00:13:22.769
We have modeled that
with a spring keyframe


239
00:13:22.836 --> 00:13:25.973
that pulls the view down briefly
before it moves up.


240
00:13:26.039 --> 00:13:29.510
This is looking good, but we still have
two more properties to animate:


241
00:13:29.576 --> 00:13:32.913
vertical stretch, and rotation.


242
00:13:32.980 --> 00:13:37.885
We’ll start with vertical stretch,
and for this, we will use cubic keyframes.


243
00:13:37.951 --> 00:13:40.754
Again, this can take some trial and error
to get right,


244
00:13:40.821 --> 00:13:42.756
but don’t hesitate to experiment
with different ways


245
00:13:42.823 --> 00:13:45.826
to model animations using keyframes.


246
00:13:45.893 --> 00:13:50.197
The squash and stretch really
gives this animation a lot more energy.


247
00:13:50.264 --> 00:13:53.534
Finally,
we’ll animate the rotation as well.


248
00:13:53.600 --> 00:13:55.769
And this is looking great.


249
00:13:55.836 --> 00:13:57.971
And those curves that we saw earlier?


250
00:13:58.038 --> 00:14:01.275
Those are a visualization
of the animation that we just built.


251
00:14:01.341 --> 00:14:04.578
You can add additional tracks
to apply any SwiftUI modifier.


252
00:14:04.645 --> 00:14:07.614
I’ve had a lot of fun
exploring different combinations.


253
00:14:07.681 --> 00:14:11.185
let’s take a moment to review
the model of keyframes.


254
00:14:11.251 --> 00:14:13.520
Keyframes are predefined animations.


255
00:14:13.587 --> 00:14:16.890
That means that they are not a replacement
for normal SwiftUI animations


256
00:14:16.957 --> 00:14:19.693
in situations where
the UI should be fluid and interactive.


257
00:14:19.760 --> 00:14:24.031
Instead, think of keyframes
like video clips that can be played.


258
00:14:24.097 --> 00:14:27.367
They give you a ton of control,
but there’s a tradeoff.


259
00:14:27.434 --> 00:14:30.470
Because you specify exactly
how an animation should progress,


260
00:14:30.537 --> 00:14:34.575
keyframe animations can’t gracefully
retarget the way that springs can,


261
00:14:34.641 --> 00:14:38.879
so it’s generally best to avoid
changing keyframes mid-animation.


262
00:14:38.946 --> 00:14:41.348
Keyframes animate a value
of the type that you define,


263
00:14:41.415 --> 00:14:44.418
which you then use
to apply modifiers to the view.


264
00:14:44.484 --> 00:14:47.454
You can use a single keyframe track
to drive a single modifier,


265
00:14:47.521 --> 00:14:49.356
or a combination of different modifiers.


266
00:14:49.423 --> 00:14:51.725
It’s up to you.


267
00:14:51.792 --> 00:14:55.095
And because the animation happens
in terms of the value that you define,


268
00:14:55.162 --> 00:14:57.164
updates happen on every frame,


269
00:14:57.231 --> 00:14:59.766
so you should avoid performing
any expensive operations


270
00:14:59.833 --> 00:15:03.670
while applying a keyframe animation
to the view.


271
00:15:03.737 --> 00:15:07.908
Finally, I’ll demonstrate how
how you can do even more with keyframes.


272
00:15:07.975 --> 00:15:12.279
My app includes a race map,
showing the route that each leg takes.


273
00:15:12.346 --> 00:15:14.715
I want to add an animation
that automatically zooms in


274
00:15:14.781 --> 00:15:16.583
and follows the course.


275
00:15:16.650 --> 00:15:22.356
Thankfully, MapKit now allows me
to use keyframes to move the camera.


276
00:15:22.422 --> 00:15:25.125
Here, I’m using a "Map" view
to show the course.


277
00:15:25.192 --> 00:15:26.660
My view already has a route,


278
00:15:26.727 --> 00:15:31.398
which is a model that contains all of
the coordinates along one leg of the race.


279
00:15:31.465 --> 00:15:33.734
To build our tour,
we’ll add a state property


280
00:15:33.800 --> 00:15:36.036
and a button to change it.


281
00:15:36.103 --> 00:15:40.908
Finally, we use the new
"mapCameraKeyframeAnimator" modifier.


282
00:15:40.974 --> 00:15:43.677
We give it the trigger value,
then add keyframes,


283
00:15:43.744 --> 00:15:47.581
just like we used for the heart icon
in the previous example.


284
00:15:47.648 --> 00:15:52.119
Every time the trigger value changes,
maps will use these keyframes to animate.


285
00:15:52.186 --> 00:15:54.855
The final value of the keyframes
determines the camera value


286
00:15:54.922 --> 00:15:57.858
that is used at the end of the animation.


287
00:15:57.925 --> 00:16:02.229
Finally, we hit the button,
and the tour starts.


288
00:16:02.296 --> 00:16:04.464
If the user performs
a gesture while animating,


289
00:16:04.531 --> 00:16:09.069
the animation will be removed and the user
will have full control over the camera.


290
00:16:09.136 --> 00:16:11.371
By independently animating
the center coordinate,


291
00:16:11.438 --> 00:16:15.242
heading, and distance, we’re able
to smoothly animate along this course


292
00:16:15.309 --> 00:16:19.379
then zoom back out for a bird’s-eye view.


293
00:16:19.446 --> 00:16:23.851
Finally, I’d like to demonstrate
how keyframes can be manually evaluated


294
00:16:23.917 --> 00:16:26.887
to drive any kind of effect
that you can think of.


295
00:16:26.954 --> 00:16:29.590
We’ve seen
the "keyframeAnimator" modifier.


296
00:16:29.656 --> 00:16:33.193
Outside of the modifier,
you can use the "KeyframeTimeline" type


297
00:16:33.260 --> 00:16:35.696
to capture a set of keyframes and tracks.


298
00:16:35.762 --> 00:16:38.498
You initialize this type
with an initial value,


299
00:16:38.565 --> 00:16:40.868
and the keyframe tracks
that define your animation,


300
00:16:40.934 --> 00:16:43.837
just like with the view modifier.


301
00:16:43.904 --> 00:16:47.407
KeyframeTimeline provides API
that gives you the duration,


302
00:16:47.474 --> 00:16:50.777
which is equal
to the duration of the longest track.


303
00:16:50.844 --> 00:16:55.015
And you can calculate values for any time
within the range of the animation.


304
00:16:55.082 --> 00:16:58.418
This makes it easy to visualize
keyframes with Swift Charts,


305
00:16:58.485 --> 00:17:02.890
which I used for the curve visualizations
that I showed earlier.


306
00:17:02.956 --> 00:17:06.460
This also means that you can use
keyframe-defined curves however you want,


307
00:17:06.527 --> 00:17:09.830
or to creatively combine keyframes
with other APIs,


308
00:17:09.897 --> 00:17:13.467
for example, with a geometry proxy
to scrub keyframe-driven effects


309
00:17:13.534 --> 00:17:15.035
using scroll position,


310
00:17:15.102 --> 00:17:19.106
or with a "TimelineView"
to update based on time.


311
00:17:19.173 --> 00:17:20.874
And if you’re not sure
when you would use this,


312
00:17:20.941 --> 00:17:23.343
that’s ok, it’s an advanced tool,


313
00:17:23.410 --> 00:17:26.446
and most developers will want
to stick to the view modifier.


314
00:17:26.513 --> 00:17:28.715
But it’s here as a building block,
and I’m excited to see


315
00:17:28.782 --> 00:17:33.020
what creative ways you find
to integrate it into your app.


316
00:17:33.086 --> 00:17:34.955
That completes our journey.


317
00:17:35.022 --> 00:17:38.525
I hope you’re excited
to use this new family of API.


318
00:17:38.592 --> 00:17:42.229
Remember:
use phases for chained animations.


319
00:17:42.296 --> 00:17:45.499
They use all of the existing
animation types that you already know,


320
00:17:45.566 --> 00:17:48.535
so you can get up and running quickly.


321
00:17:48.602 --> 00:17:53.373
Use keyframes for more complex animations
where you need complete control.


322
00:17:53.440 --> 00:17:56.376
And finally: have fun exploring.


323
00:17:56.443 --> 00:17:58.312
The world of animation is exciting,


324
00:17:58.378 --> 00:18:02.616
and I hope these new tools lead you,
and your app, somewhere new.


325
00:18:02.683 --> 00:18:03.984
Thanks!


326
00:18:04.051 --> 00:18:06.053
♪ ♪

