2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.010 --> 00:00:12.179 line:-1
Hemant: Hi, I am Hemant,


4
00:00:12.212 --> 00:00:15.249 line:-2
a Commerce Developer Advocate
for the App Store.


5
00:00:15.282 --> 00:00:19.152 line:-2
I'm excited to discuss
App Store's tools to help you test


6
00:00:19.186 --> 00:00:22.155 line:-2
and validate
your in-app purchase experience.


7
00:00:22.189 --> 00:00:25.259 line:-2
I'll cover benefits
for each of these tools


8
00:00:25.292 --> 00:00:27.327 line:-1
and when it's best to use which.


9
00:00:27.361 --> 00:00:30.464 line:-2
I will also cover
all the great new features


10
00:00:30.497 --> 00:00:33.967 line:-2
we are introducing this year
for testing in-app purchases.


11
00:00:34.001 --> 00:00:35.736 line:-1
So let's get started.


12
00:00:35,769 --> 00:00:40,474
App Store offers three tools
to help you test in-app purchases.


13
00:00:40,507 --> 00:00:43,310
There is StoreKit Testing in Xcode,


14
00:00:43,343 --> 00:00:46,780
where you can test in-app purchases
locally,


15
00:00:46,813 --> 00:00:50,517
and then there's sandbox,
which uses products you have set up


16
00:00:50,551 --> 00:00:56,023
in App Store Connect, and TestFlight
for performing end-to-end beta testing


17
00:00:56,056 --> 00:00:58,458
and to gather feedback from testers.


18
00:00:58.492 --> 00:01:01.995 line:-2
These tools are available
to help you build,


19
00:01:02.029 --> 00:01:06.600 line:-2
test, and optimize
your app's in-app purchase experience.


20
00:01:06.633 --> 00:01:10.637 line:-2
I'll briefly describe each of these tools
to help you determine


21
00:01:10.671 --> 00:01:13.740 line:-2
the appropriate tool
for your in-app purchase testing.


22
00:01:15,008 --> 00:01:19,346
Starting with StoreKit Testing in Xcode.


23
00:01:19.379 --> 00:01:24.351 line:-2
We introduced StoreKit Testing in Xcode
at WWDC20.


24
00:01:24.384 --> 00:01:27.221 line:-1
It enables you to test in-app purchases


25
00:01:27.254 --> 00:01:30.290 line:-2
without setting up your products
in App Store Connect.


26
00:01:30.324 --> 00:01:33.560 line:-2
You can test your in-app purchases
fully offline,


27
00:01:33.594 --> 00:01:36.396 line:-1
without requiring a server.


28
00:01:36.430 --> 00:01:41.368 line:-2
It provides you with the ability to create
and manage your in-app purchases


29
00:01:41.401 --> 00:01:43.904 line:-1
in the StoreKit configuration file.


30
00:01:43.937 --> 00:01:48.709 line:-2
So you can test your code changes
locally and in real-time.


31
00:01:48.742 --> 00:01:51.111 line:-1
As you began your StoreKit integration,


32
00:01:51.144 --> 00:01:53.547 line:-2
you can test
your in-app purchase experience


33
00:01:53.580 --> 00:01:56.383 line:-1
using simulator or a device.


34
00:01:56.416 --> 00:02:00.521 line:-2
You can build automations
to continuously test your in-app purchases


35
00:02:00.554 --> 00:02:04.958 line:-2
by using a dedicated
StoreKitTest framework.


36
00:02:04.992 --> 00:02:08.962 line:-2
In addition, you can sync
your in-app purchase products


37
00:02:08.996 --> 00:02:12.132 line:-1
from App Store Connect to Xcode.


38
00:02:12.165 --> 00:02:18.105 line:-2
This alleviates the need to set up
a StoreKit configuration file manually.


39
00:02:18.138 --> 00:02:22.776 line:-2
And you have ability to test
advanced subscription use cases,


40
00:02:22.809 --> 00:02:27.080 line:-2
such as offer code redemptions,
price increase sheet,


41
00:02:27.114 --> 00:02:31.285 line:-2
and subscriptions entering
and exiting billing retry,


42
00:02:31.318 --> 00:02:35.689 line:-2
all locally
without having any dependency on a server.


43
00:02:35.722 --> 00:02:39.993 line:-2
And one unique capability is
the flexible subscription renewal rates,


44
00:02:40.027 --> 00:02:45.365 line:-2
where you have option
to choose a rate that fits your needs,


45
00:02:45.399 --> 00:02:48.635 line:-1
from real-time to every two seconds.


46
00:02:48.669 --> 00:02:53.173 line:-2
And now we have new options available
with Xcode 15,


47
00:02:53.207 --> 00:02:56.844 line:-2
giving you a set of renewal rates
that are static


48
00:02:56.877 --> 00:02:59.947 line:-2
and independent
of the subscription duration.


49
00:02:59.980 --> 00:03:03.283 line:-1
So a monthly product or annual product


50
00:03:03.317 --> 00:03:06.153 line:-1
would renew at that same rate.


51
00:03:06.186 --> 00:03:10.257 line:-2
You can simulate StoreKit errors
that your app may encounter,


52
00:03:10.290 --> 00:03:14.428 line:-2
which will help you build
error handling into your app,


53
00:03:14.461 --> 00:03:19.800 line:-2
errors such as if a product
is not available for sale


54
00:03:19.833 --> 00:03:22.970 line:-1
or if a user cancels the purchase.


55
00:03:23.003 --> 00:03:26.473 line:-2
And now, if you are running
multiple instances of your app,


56
00:03:26.507 --> 00:03:31.245 line:-2
the transaction manager will display
transactions for each app instance,


57
00:03:31.278 --> 00:03:35.115 line:-1
allowing you to test on multiple devices.


58
00:03:35.148 --> 00:03:41.021 line:-2
Transaction manager has added the ability
to buy in-app purchases directly,


59
00:03:41.054 --> 00:03:42.723 line:-1
all without opening your app,


60
00:03:42.756 --> 00:03:48.028 line:-2
so you can test how your app handles
external transactions.


61
00:03:48.061 --> 00:03:52.866 line:-2
These new capabilities are available
with Xcode 15.


62
00:03:52,900 --> 00:03:57,971
For more details,
please see WWDC23 session


63
00:03:58,005 --> 00:04:03,277
"What's new in StoreKit 2
and StoreKit Testing in Xcode."


64
00:04:03,310 --> 00:04:07,714
Now, let's take a look
at App Store sandbox.


65
00:04:07.748 --> 00:04:11.318 line:-2
The App Store sandbox enables you
to test and validate


66
00:04:11.351 --> 00:04:14.054 line:-2
your end-to-end
in-app purchase implementation


67
00:04:14.087 --> 00:04:16.490 line:-1
on both client and server.


68
00:04:16.523 --> 00:04:18.659 line:-1
This is important when building


69
00:04:18.692 --> 00:04:21.728 line:-2
and qualifying
your complete app experience


70
00:04:21.762 --> 00:04:26.366 line:-2
and ensuring you are successfully
delivering content to your users.


71
00:04:26.400 --> 00:04:31.271 line:-2
To test in-app purchases in sandbox,
your developer account needs to have


72
00:04:31.305 --> 00:04:33.807 line:-1
a paid application agreement.


73
00:04:33.841 --> 00:04:37.411 line:-1
You can test the app and in-app purchases


74
00:04:37.444 --> 00:04:41.648 line:-2
on a registered device
with your developer account.


75
00:04:41.682 --> 00:04:45.719 line:-2
To make a purchase in sandbox,
you'll first need to create


76
00:04:45.752 --> 00:04:49.790 line:-2
a sandbox Apple ID
in the Users and Access section


77
00:04:49.823 --> 00:04:51.959 line:-1
of App Store Connect.


78
00:04:51.992 --> 00:04:57.664 line:-2
To run your app on an iOS device
running iOS 16 or greater,


79
00:04:57.698 --> 00:05:02.269 line:-2
you will need to enable developer mode
in Privacy Settings.


80
00:05:02.302 --> 00:05:07.140 line:-2
The installed app is intended to be used
for development and testing.


81
00:05:08.575 --> 00:05:13.947 line:-2
Sandbox helps you validate your logic
to handle production-like scenarios


82
00:05:13.981 --> 00:05:18.652 line:-2
such as purchases, restores,
and subscription offer


83
00:05:18.685 --> 00:05:22.856 line:-2
and provides you confidence
to launch your app in production.


84
00:05:22.890 --> 00:05:26.593 line:-2
To test your app in sandbox,
you need a device,


85
00:05:26.627 --> 00:05:29.730 line:-2
and you can distribute your app
using two options,


86
00:05:29.763 --> 00:05:33.600 line:-2
such as you can tether
your device to your Mac


87
00:05:33.634 --> 00:05:36.436 line:-1
and download the app on the device


88
00:05:36.470 --> 00:05:39.573 line:-1
or using either of the distribution method


89
00:05:39.606 --> 00:05:42.376 line:-1
like Release Testing,


90
00:05:42.409 --> 00:05:48.148 line:-2
Debugging, and Custom
to generate an IPA file.


91
00:05:48.182 --> 00:05:52.653 line:-2
These methods help you deliver the app
for testing purposes


92
00:05:52.686 --> 00:05:57.324 line:-2
to your teams
without a need to provide source code.


93
00:05:57.357 --> 00:05:59.593 line:-1
We have been listening to your feedback


94
00:05:59.626 --> 00:06:02.829 line:-2
and we understand
sandbox is important to you


95
00:06:02.863 --> 00:06:05.232 line:-1
for testing the customer experience.


96
00:06:05.265 --> 00:06:09.102 line:-2
We continue to improve sandbox
and add new testing features,


97
00:06:09.136 --> 00:06:11.872 line:-1
and this year, we added support


98
00:06:11.905 --> 00:06:15.976 line:-2
to simulate scenarios
around involuntary churn


99
00:06:16.009 --> 00:06:18.979 line:-2
such as subscription billing
problem messaging


100
00:06:19.012 --> 00:06:20.981 line:-1
and billing grace period.


101
00:06:21.014 --> 00:06:23.750 line:-1
Later this year, we are releasing support


102
00:06:23.784 --> 00:06:27.321 line:-2
for testing Family Sharing
in-app purchases,


103
00:06:27.354 --> 00:06:33.093 line:-2
and we have added new options
to the iOS sandbox Account Settings page.


104
00:06:33.126 --> 00:06:36.964 line:-2
Let's deep-dive
into all of these features.


105
00:06:36.997 --> 00:06:42.336 line:-2
Billing problem message simulation
is available to you in sandbox,


106
00:06:42.369 --> 00:06:47.407 line:-2
and later this year, it will be presented
to customers in production


107
00:06:47.441 --> 00:06:49.710 line:-1
when they enter billing retry.


108
00:06:49.743 --> 00:06:54.648 line:-2
Billing problem messaging helps customers
to resolve the payment issue


109
00:06:54.681 --> 00:06:57.651 line:-2
without leaving your app
and stay subscribed


110
00:06:57.684 --> 00:06:59.720 line:-1
to your content and service.


111
00:06:59.753 --> 00:07:03.624 line:-2
The billing problem sheet uses
StoreKit 2 message API


112
00:07:03.657 --> 00:07:06.093 line:-1
with reason billingIssue.


113
00:07:06.126 --> 00:07:09.429 line:-2
The StoreKit message API
is displayed by default


114
00:07:09.463 --> 00:07:13.567 line:-2
when the customer launches your app
or brings it to the foreground.


115
00:07:13.600 --> 00:07:16.603 line:-2
Your can choose to defer
or suppress the message


116
00:07:16.637 --> 00:07:20.040 line:-2
by implementing a message listener
in views,


117
00:07:20.073 --> 00:07:24.978 line:-2
where a billing problem sheet presentation
might confuse the customer.


118
00:07:25.012 --> 00:07:29.550 line:-2
You can simulate the message API reason
billingIssue in sandbox


119
00:07:29.583 --> 00:07:33.754 line:-2
to test how your app handles
the message presentation.


120
00:07:33,787 --> 00:07:37,658
To learn more about implementing
StoreKit 2 Message API,


121
00:07:37,691 --> 00:07:43,430
please see WWDC22 session
"What's new with in-app purchase."


122
00:07:43.463 --> 00:07:49.436 line:-2
Now, let's review the steps for simulating
a billing problem message in sandbox.


123
00:07:49.469 --> 00:07:53.941 line:-2
To test billing problem message,
your sandbox Apple ID needs to be


124
00:07:53.974 --> 00:07:59.479 line:-2
subscribed to an auto-renewable
subscription with status active.


125
00:07:59.513 --> 00:08:03.016 line:-2
Then you can simulate billing issue
by navigating


126
00:08:03.050 --> 00:08:08.555 line:-2
to your sandbox account settings page
on device in App Store settings


127
00:08:08.589 --> 00:08:13.927 line:-2
and disable the switch
"Allow Purchases & Renewals."


128
00:08:13.961 --> 00:08:19.099 line:-2
Disabling the switch will simulate
billing issue for the Sandbox Apple ID,


129
00:08:19.132 --> 00:08:23.537 line:-2
and the existing auto-renewable
subscriptions will fail to renew


130
00:08:23.570 --> 00:08:26.673 line:-2
as per the configured
subscription renewal rate


131
00:08:26.707 --> 00:08:29.309 line:-1
and will go into billing retry state.


132
00:08:29.343 --> 00:08:32.012 line:-1
And when you navigate back to your app,


133
00:08:32.045 --> 00:08:34.648 line:-2
App Store will send
the billingIssue message


134
00:08:34.681 --> 00:08:38.585 line:-1
once the subscription fails to renew,


135
00:08:38.619 --> 00:08:41.755 line:-2
and the billing problem message
will appear.


136
00:08:41,788 --> 00:08:44,858
When you tap the Continue button,


137
00:08:44,892 --> 00:08:48,262
it will open the iOS sandbox
Account Settings page,


138
00:08:48.295 --> 00:08:53.734 line:-2
and you can now toggle ON
the "Allow Purchases & Renewals" switch


139
00:08:53.767 --> 00:08:56.503 line:-1
to successfully renew the subscription.


140
00:08:56.537 --> 00:08:59.039 line:-1
Once the subscription renews successfully,


141
00:08:59.072 --> 00:09:01.942 line:-2
you will no longer get
the billing problem message.


142
00:09:01.975 --> 00:09:06.213 line:-2
This helps you simulate a customer
recovering from billing issue


143
00:09:06.246 --> 00:09:12.085 line:-2
without leaving your app when they update
their payment method for their Apple ID.


144
00:09:12.119 --> 00:09:16.990 line:-2
Enabling grace period allows customers
to retain full access


145
00:09:17.024 --> 00:09:19.826 line:-1
to your app's paid content and service


146
00:09:19.860 --> 00:09:22.729 line:-2
while Apple attempts
to collect the payment.


147
00:09:22.763 --> 00:09:26.066 line:-1
This also helps you as a developer


148
00:09:26.099 --> 00:09:29.870 line:-2
to avoid interruption
to your paid days of service


149
00:09:29.903 --> 00:09:34.408 line:-2
if an auto-renewable subscription
is recovered within the grace period.


150
00:09:34.441 --> 00:09:38.879 line:-2
To enable and simulate
billing grace period in sandbox,


151
00:09:38.912 --> 00:09:43.083 line:-2
navigate to your App Subscriptions section
in App Store Connect.


152
00:09:43.116 --> 00:09:48.255 line:-2
In the Billing Grace Period section,
click "Set Up Billing Grace Period."


153
00:09:48.288 --> 00:09:53.193 line:-2
This will open a dialog,
which will allow you to configure


154
00:09:53.227 --> 00:09:55.996 line:-1
billing grace period for your app.


155
00:09:56.029 --> 00:10:00.434 line:-2
You can than select
from available grace period durations.


156
00:10:00.467 --> 00:10:04.538 line:-2
Remember, these durations apply
to production only,


157
00:10:04.571 --> 00:10:08.575 line:-2
so when testing in sandbox,
the duration of billing retry


158
00:10:08.609 --> 00:10:11.144 line:-1
and billing grace period are pre-set


159
00:10:11.178 --> 00:10:14.581 line:-2
according to your sandbox account's
renewal rate.


160
00:10:14.615 --> 00:10:17.951 line:-2
You can also select
the eligible subscriber


161
00:10:17.985 --> 00:10:21.755 line:-2
for billing grace period
and select the environment.


162
00:10:21.788 --> 00:10:25.259 line:-2
You can choose to enable it
first in sandbox


163
00:10:25.292 --> 00:10:30.564 line:-2
or choose to enable
in both sandbox and production,


164
00:10:30.597 --> 00:10:32.633 line:-1
then click Confirm.


165
00:10:32.666 --> 00:10:36.436 line:-2
You'll see your selection visible
in App Store Connect.


166
00:10:36.470 --> 00:10:40.207 line:-1
And now let's discuss Family Sharing.


167
00:10:40.240 --> 00:10:44.811 line:-2
Family Sharing is a powerful tool
that makes it easy for customers


168
00:10:44.845 --> 00:10:48.782 line:-2
to share their digital purchases
with their family members.


169
00:10:48.815 --> 00:10:52.486 line:-2
Enabling Family Sharing
for your auto-renewable subscriptions


170
00:10:52.519 --> 00:10:57.291 line:-2
and non-consumable products
can help you attract new customers,


171
00:10:57.324 --> 00:11:01.328 line:-2
increase user engagement,
and improve retention.


172
00:11:01.361 --> 00:11:04.298 line:-2
We wanted to provide you
with an ability to test


173
00:11:04.331 --> 00:11:07.134 line:-2
Family Sharing in-app purchases
in sandbox.


174
00:11:08.168 --> 00:11:10.704 line:-1
To test Family Sharing in sandbox,


175
00:11:10.737 --> 00:11:13.941 line:-2
you will need to log in
to App Store Connect


176
00:11:13.974 --> 00:11:17.611 line:-2
and navigate to the subscription
or non-consumable products


177
00:11:17.644 --> 00:11:20.614 line:-2
for which you need to enable
Family Sharing.


178
00:11:20.647 --> 00:11:24.484 line:-2
Then you will need to organize
sandbox Family Sharing Members


179
00:11:24.518 --> 00:11:26.286 line:-1
in App Store Connect.


180
00:11:26.320 --> 00:11:30.190 line:-2
And lastly, make a purchase
with your sandbox Apple ID


181
00:11:30.224 --> 00:11:32.759 line:-1
which is enabled for Family Sharing.


182
00:11:32.793 --> 00:11:35.362 line:-1
Let's walk through the testing details.


183
00:11:35.395 --> 00:11:38.332 line:-2
Once you have enabled
your in-app purchase product


184
00:11:38.365 --> 00:11:39.833 line:-1
to be family-sharable,


185
00:11:39.867 --> 00:11:43.437 line:-2
you can now navigate
to "User and Access" section


186
00:11:43.470 --> 00:11:45.539 line:-1
of App Store Connect,


187
00:11:45.572 --> 00:11:50.244 line:-2
and there, you will see a new section
labelled "Family Sharing."


188
00:11:50.277 --> 00:11:54.948 line:-2
In that section, you will be able
to organize and view


189
00:11:54.982 --> 00:11:58.986 line:-2
your sandbox family members
for a storefront.


190
00:11:59.019 --> 00:12:04.625 line:-2
Let's illustrate what the in-app purchase
experience looks like in sandbox.


191
00:12:04.658 --> 00:12:08.128 line:-1
Here, you initiate a purchase on device,


192
00:12:08.161 --> 00:12:11.698 line:-2
just like any other
normal sandbox purchase.


193
00:12:11,732 --> 00:12:13,967
As Family Sharing is enabled,


194
00:12:14,001 --> 00:12:17,638
transactions will be created
for each family member.


195
00:12:17,671 --> 00:12:22,776
Your app will now see
these new transactions upon launch


196
00:12:22,809 --> 00:12:25,746
or in real-time from StoreKit.


197
00:12:25.779 --> 00:12:28.815 line:-1
At this point, you can test your app logic


198
00:12:28.849 --> 00:12:34.054 line:-2
to make sure it validates
and entitles service for the transaction.


199
00:12:34.087 --> 00:12:37.691 line:-2
Additionally, you can also simulate
a family member


200
00:12:37.724 --> 00:12:39.860 line:-1
losing access to the service.


201
00:12:39.893 --> 00:12:43.230 line:-1
For that, on iOS sandbox Account Settings,


202
00:12:43.263 --> 00:12:45.899 line:-1
tap Family Sharing.


203
00:12:45.933 --> 00:12:51.405 line:-2
This will present you a view
of all the family members in sandbox,


204
00:12:51.438 --> 00:12:55.475 line:-1
and you can choose to stop Family Sharing.


205
00:12:55.509 --> 00:12:59.546 line:-2
The Family Sharing in sandbox
will allow you to verify


206
00:12:59.580 --> 00:13:02.816 line:-1
and validate use cases such as:


207
00:13:02.850 --> 00:13:05.352 line:-1
merchandising family-sharable products


208
00:13:05.385 --> 00:13:09.723 line:-2
using isFamilySharable property
of StoreKit.


209
00:13:09.756 --> 00:13:14.761 line:-2
Validate your app logic
to entitle service to a family member,


210
00:13:14.795 --> 00:13:18.131 line:-1
for a new or existing purchase.


211
00:13:18.165 --> 00:13:22.836 line:-2
Each family member can turn off sharing,
enabling you to


212
00:13:22.870 --> 00:13:28.141 line:-2
test when family members lose access
to a previously shared purchase.


213
00:13:28.175 --> 00:13:31.979 line:-2
For a scenario
when a purchaser stops Family Sharing,


214
00:13:32.012 --> 00:13:35.949 line:-2
you will be able to validate
revoking access to services


215
00:13:35.983 --> 00:13:41.555 line:-2
by using revocationDate
available in JWSTransactions.


216
00:13:41.588 --> 00:13:45.392 line:-2
And lastly, you will receive
App Store Server Notifications


217
00:13:45.425 --> 00:13:47.561 line:-1
for family members.


218
00:13:47,594 --> 00:13:50,264
To learn more
about implementing Family Sharing,


219
00:13:50,297 --> 00:13:55,302
please see Tech Talk session "Explore
Family Sharing for in-app purchases."


220
00:13:55.335 --> 00:14:01.375 line:-2
Later this year, we are adding options
to iOS sandbox Account Settings.


221
00:14:01.408 --> 00:14:05.145 line:-2
The iOS sandbox Account Settings
is available


222
00:14:05.179 --> 00:14:10.017 line:-2
once you have made an initial
in-app purchase in your sandbox app.


223
00:14:10.050 --> 00:14:14.788 line:-2
Your signed-in sandbox account
is visible in App Store settings.


224
00:14:14.821 --> 00:14:19.293 line:-2
Scroll down this page
to view your Sandbox Apple ID.


225
00:14:19.326 --> 00:14:23.230 line:-1
When you tap on Sandbox Apple ID,


226
00:14:23.263 --> 00:14:25.199 line:-1
a dialog appears.


227
00:14:25.232 --> 00:14:28.068 line:-1
Tap the Manage button,


228
00:14:28.101 --> 00:14:31.371 line:-2
and you'll navigate
to your sandbox Account Settings.


229
00:14:31.405 --> 00:14:36.743 line:-2
Later this year, you'll see three options,
which were earlier available


230
00:14:36.777 --> 00:14:40.280 line:-2
in App Store Connect
and are now available to you


231
00:14:40.314 --> 00:14:42.716 line:-1
on-device for testing.


232
00:14:42.749 --> 00:14:46.753 line:-2
Now through the Account Settings page,
you'll be to adjust


233
00:14:46.787 --> 00:14:49.056 line:-1
subscription renewal rate,


234
00:14:49,089 --> 00:14:53,927
test interrupted purchases,
and clear purchase history.


235
00:14:53.961 --> 00:14:57.698 line:-2
When you tap on Renewal Rate,
you can adjust


236
00:14:57.731 --> 00:15:01.401 line:-2
the subscription renewal rate
for your sandbox account.


237
00:15:01,435 --> 00:15:07,007
And you'll also be able to clear
purchase history of the sandbox Apple ID,


238
00:15:07,040 --> 00:15:12,679
to refresh your sandbox Apple ID
and re-test your use cases.


239
00:15:12,713 --> 00:15:15,649
Lastly, let's take a look at TestFlight.


240
00:15:15.682 --> 00:15:20.854 line:-2
TestFlight helps you to test
your app's end-to-end experience,


241
00:15:20.888 --> 00:15:26.326 line:-2
distribute your apps, and gather feedback
from a wider tester audience.


242
00:15:26.360 --> 00:15:30.531 line:-2
This helps you to validate and improve
your app experience


243
00:15:30.564 --> 00:15:33.066 line:-1
before releasing it on the App Store.


244
00:15:34.334 --> 00:15:39.173 line:-2
TestFlight allows you to distribute
your app across all Apple platforms.


245
00:15:39.206 --> 00:15:42.976 line:-2
You can add both internal
and external testers,


246
00:15:43.010 --> 00:15:48.515 line:-2
create multiple groups of testers,
and add different builds to each group


247
00:15:48.549 --> 00:15:53.020 line:-2
depending on the features
you want each group to test.


248
00:15:53.053 --> 00:15:57.658 line:-2
Testers can allow latest builds
to be installed automatically,


249
00:15:57.691 --> 00:16:02.563 line:-2
and each build remains available
for 90 days after upload.


250
00:16:02,596 --> 00:16:06,300
For more information,
please watch the Tech Talks session


251
00:16:06,333 --> 00:16:08,235
"Get started with TestFlight."


252
00:16:08,268 --> 00:16:12,239
When testing in-app purchases,
testers need to download


253
00:16:12.272 --> 00:16:15.976 line:-1
your app builds using the TestFlight app.


254
00:16:16.009 --> 00:16:20.247 line:-2
When buying an in-app purchase
for an app downloaded through TestFlight,


255
00:16:20.280 --> 00:16:23.083 line:-1
it uses your Apple ID, which is signed in


256
00:16:23.116 --> 00:16:27.688 line:-2
to Media & Purchases settings
of the device.


257
00:16:27.721 --> 00:16:31.024 line:-2
Similar to sandbox,
you won't be charged for testing


258
00:16:31.058 --> 00:16:35.696 line:-2
in-app purchases for an app
downloaded through TestFlight.


259
00:16:35.729 --> 00:16:39.566 line:-2
For testing auto-renewable subscriptions,
the renewal rates


260
00:16:39.600 --> 00:16:45.305 line:-2
in TestFlight are equivalent
to default renewal rate of sandbox.


261
00:16:45.339 --> 00:16:49.643 line:-2
And if your app has implemented
showManageSubscription API


262
00:16:49.676 --> 00:16:52.880 line:-1
of the StoreKit, it gives you the ability


263
00:16:52.913 --> 00:16:58.185 line:-2
to test subscription cancellation
or change subscription.


264
00:16:58.218 --> 00:17:03.824 line:-2
This year, we are making it easier
to manage testers in TestFlight.


265
00:17:03.857 --> 00:17:08.762 line:-2
You can filter by tester data
like status, sessions,


266
00:17:08.795 --> 00:17:14.101 line:-2
and bulk select group of testers
to add or remove from a group.


267
00:17:14.134 --> 00:17:17.171 line:-2
And to streamline
your TestFlight app distribution,


268
00:17:17.204 --> 00:17:23.510 line:-2
a new method is added for you
to distribute the build, Internal Only.


269
00:17:23.544 --> 00:17:27.881 line:-2
Using this method ensures
the build can be available


270
00:17:27.915 --> 00:17:30.817 line:-2
to internal testers
and cannot be submitted


271
00:17:30.851 --> 00:17:32.853 line:-1
for the App Store review.


272
00:17:32,886 --> 00:17:37,824
To learn more, please see session
"What's new in App Store Connect"


273
00:17:37,858 --> 00:17:42,095
and "Simplify distribution
in Xcode and Xcode Cloud."


274
00:17:42.129 --> 00:17:45.032 line:-2
Now that I have reviewed
the tools available


275
00:17:45.065 --> 00:17:47.234 line:-1
for testing in-app purchases,


276
00:17:47.267 --> 00:17:50.437 line:-2
it's important for you to know
that these tools have


277
00:17:50.470 --> 00:17:55.509 line:-2
their own benefits and differences
but also have a lot in common,


278
00:17:55,542 --> 00:17:59,813
such as they support testing
all in-app purchase types,


279
00:17:59,847 --> 00:18:03,317
and the subscriptions renew
at an accelerated rate.


280
00:18:03,350 --> 00:18:08,422
However, some of these tools may be ideal
for specific feature implementations


281
00:18:08,455 --> 00:18:10,190
or use cases.


282
00:18:10,224 --> 00:18:12,025
For example,


283
00:18:12,059 --> 00:18:16,129
subscription offer code redemption
and price increase sheet


284
00:18:16,163 --> 00:18:20,033
can be tested using StoreKit Testing
in Xcode.


285
00:18:20,067 --> 00:18:23,704
Billing retry and grace period
can be tested


286
00:18:23,737 --> 00:18:28,675
using both StoreKit Testing in Xcode
and sandbox.


287
00:18:28,709 --> 00:18:31,879
To validate
your server side implementation,


288
00:18:31,912 --> 00:18:37,017
both sandbox and TestFlight support
App Store Server Notifications


289
00:18:37,050 --> 00:18:39,019
and App Store Server API,


290
00:18:39,052 --> 00:18:42,289
while TestFlight provides you
with a streamlined process


291
00:18:42,322 --> 00:18:46,460
to receive feedback
from internal and external testers


292
00:18:46,493 --> 00:18:49,930
about your app's performance
and overall experience.


293
00:18:49.963 --> 00:18:53.667 line:-2
Consider leveraging these tools
for testing in-app purchases


294
00:18:53.700 --> 00:18:58.605 line:-2
depending upon your use cases,
feature implementation,


295
00:18:58.639 --> 00:19:01.775 line:-1
and your organization's team structure.


296
00:19:01.808 --> 00:19:06.013 line:-2
We have covered a lot today,
and I hope this session helped you


297
00:19:06.046 --> 00:19:11.051 line:-2
better understand all the available tools
for you to test in-app purchases.


298
00:19:11.084 --> 00:19:14.821 line:-2
To learn more,
please see available documentation


299
00:19:14.855 --> 00:19:17.691 line:-1
on developer.apple.com.


300
00:19:17.724 --> 00:19:21.195 line:-2
And we would love to hear your feedback
on how we can improve


301
00:19:21.228 --> 00:19:23.997 line:-1
your in-app purchase testing experience.


302
00:19:24.031 --> 00:19:27.434 line:-2
Please let us know
through Feedback Assistant.


303
00:19:27.467 --> 00:19:29.970 line:-2
Thank you for taking time
to watch this session.

