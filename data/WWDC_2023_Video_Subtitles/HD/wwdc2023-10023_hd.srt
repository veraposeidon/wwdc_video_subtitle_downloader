2
00:00:00,100 --> 00:00:04,304 line:-1
♪ Mellow instrumental hip-hop ♪


3
00:00:04,304 --> 00:00:10,978 size:2% align:right position:90%
♪


4
00:00:10,978 --> 00:00:12,546 line:-1
Hello and welcome.


5
00:00:12,546 --> 00:00:13,747 line:-1
My name is Sirisha,


6
00:00:13,747 --> 00:00:16,350 line:-1
and I'm an engineer
on the HealthKit team.


7
00:00:16.350 --> 00:00:19.553 line:-1 position:50%
Today, there are hundreds
of health and fitness apps


8
00:00:19.553 --> 00:00:23.757 line:-1 position:50%
in the App Store that help users
get healthy and stay healthy.


9
00:00:23,757 --> 00:00:25,225 line:-1
And for them all,


10
00:00:25.225 --> 00:00:28.061 line:-1 position:50%
HealthKit provides a centralized
encrypted database,


11
00:00:28,061 --> 00:00:31,265 line:-1
so your amazing apps can show
your users a cohesive view


12
00:00:31.265 --> 00:00:33.166 line:-1 position:50%
of their health data.


13
00:00:33,166 --> 00:00:36,403 line:-1
Now, the Workout APIs
are some of the most powerful


14
00:00:36,403 --> 00:00:39,273 line:-1
that HealthKit provides,
and I love them.


15
00:00:39,273 --> 00:00:42,542 line:-1
For today's video, I've created
a sample cycling app


16
00:00:42,542 --> 00:00:46,813 line:-1
for Apple Watch to track
my cycling workouts.


17
00:00:46.813 --> 00:00:49.616 line:-1 position:50%
And for easier access, I would
love to mount my iPhone


18
00:00:49.616 --> 00:00:53.153 line:-1 position:50%
on the handlebars to use
as a cycling computer.


19
00:00:53,153 --> 00:00:55,322 line:-1
That way, I can get
a quick and easy view


20
00:00:55,322 --> 00:00:58,191 line:-1
of the live metrics displayed
on my Apple Watch


21
00:00:58,191 --> 00:01:01,495 line:-1
without having to take my hands
off the handlebars.


22
00:01:01.495 --> 00:01:03.664 line:-1 position:50%
HealthKit is introducing
new Workout APIs


23
00:01:03.664 --> 00:01:06.333 line:-1 position:50%
to control and mirror
active workout sessions


24
00:01:06.333 --> 00:01:09.836 line:-1 position:50%
between Apple Watch and iPhone.


25
00:01:09.836 --> 00:01:11.939 line:-1 position:50%
Updating support
for cycling workouts


26
00:01:11.939 --> 00:01:13.607 line:-1 position:50%
with the addition
of new data types


27
00:01:13.607 --> 00:01:17.444 line:-1 position:50%
for tracking cycling speed,
power, cadence,


28
00:01:17,444 --> 00:01:20,480 line:-1
and functional threshold power,
or FTP.


29
00:01:20.480 --> 00:01:22.149 line:-1 position:50%
And if that wasn't enough,


30
00:01:22.149 --> 00:01:26.620 line:-1 position:50%
HealthKit along with
the Health app is now on iPad.


31
00:01:26.620 --> 00:01:30.590 line:-1 position:50%
Now, your customers signed into
their iCloud account on iPad


32
00:01:30.590 --> 00:01:32.960 line:-1 position:50%
will see their health data
synced through HealthKit


33
00:01:32,960 --> 00:01:34,394 line:-1
to their iPad.


34
00:01:34,394 --> 00:01:35,862 line:-1
Just imagine the richer health


35
00:01:35.862 --> 00:01:39.800 line:-1 position:50%
and post-workout experience
you can provide.


36
00:01:39,800 --> 00:01:43,103 line:-1
Today, I'll use my sample app
to demonstrate


37
00:01:43.103 --> 00:01:46.073 line:-1 position:50%
how to mirror a workout
running on Apple Watch


38
00:01:46,073 --> 00:01:48,175 line:-1
with a paired iPhone.


39
00:01:48,175 --> 00:01:50,277 line:-1
Then, I'll add some code
to show you


40
00:01:50,277 --> 00:01:52,179 line:-1
how to collect
new cycling metrics


41
00:01:52.179 --> 00:01:54.548 line:-1 position:50%
and sync them across devices.


42
00:01:54,548 --> 00:01:57,818 line:-1
And I'll wrap up with
the authorization details


43
00:01:57.818 --> 00:02:01.388 line:-1 position:50%
required to display
workouts on iPad.


44
00:02:01,388 --> 00:02:05,258 line:-1
So let's check out how
Apple Watch, iPhone, and iPad


45
00:02:05.258 --> 00:02:10.030 line:-1 position:50%
can work together to provide
a great workout experience.


46
00:02:10.030 --> 00:02:13.233 line:-1 position:50%
In my example, I'm running
the workout on Apple Watch.


47
00:02:13,233 --> 00:02:16,036 line:-1
I'm using a workout session
as a centralized object


48
00:02:16,036 --> 00:02:20,807 line:-1
to manage its life cycle,
starting, pausing, and stopping.


49
00:02:20,807 --> 00:02:23,477 line:0
If you're not already familiar
with workout sessions,


50
00:02:23,477 --> 00:02:25,512 position:50%
you might want to watch
previous talks,


51
00:02:25,512 --> 00:02:27,314 position:50%
"New ways
'to work with Workouts,"


52
00:02:27,314 --> 00:02:30,884 position:50%
and "Build a workout app
for Apple Watch."


53
00:02:30.884 --> 00:02:33.954 line:-1 position:50%
Now, for me to control
the workout from my iPhone,


54
00:02:33.954 --> 00:02:35.689 line:-1 position:50%
I need to get
this workout session


55
00:02:35.689 --> 00:02:38.625 line:-1 position:50%
from my Apple Watch
to my iPhone.


56
00:02:38.625 --> 00:02:40.761 line:-1 position:50%
And to do so,
I'll use HealthKit's


57
00:02:40.761 --> 00:02:43.930 line:-1 position:50%
new mirrored session APIs.


58
00:02:43.930 --> 00:02:46.366 line:-1 position:50%
When a mirrored session
starts on my Apple Watch,


59
00:02:46,366 --> 00:02:48,602 line:-1
if my iPhone app is not running,


60
00:02:48,602 --> 00:02:50,404 line:-1
it will be launched
in the background


61
00:02:50,404 --> 00:02:52,806 line:-1
and handed over
the workout session.


62
00:02:52.806 --> 00:02:56.610 line:-1 position:50%
To receive the session,
my iPhone app needs to be ready.


63
00:02:56.610 --> 00:02:59.012 line:-1 position:50%
So, first I'll set up a handler


64
00:02:59.012 --> 00:03:02.516 line:-1 position:50%
in the iPhone app launch
sequence using the HealthStore.


65
00:03:02.516 --> 00:03:04.684 line:-1 position:50%
That way, it will be ready
to receive the session


66
00:03:04,684 --> 00:03:07,287 line:-1
from my Apple Watch.


67
00:03:07.287 --> 00:03:09.556 line:-1 position:50%
Every time my iPhone app
is launched


68
00:03:09,556 --> 00:03:11,625 line:-1
in the foreground
or the background,


69
00:03:11.625 --> 00:03:14.061 line:-1 position:50%
I'll implement
the mirroring start handler


70
00:03:14,061 --> 00:03:16,530 line:-1
in order to receive
the active workout session


71
00:03:16.530 --> 00:03:19.232 line:-1 position:50%
passed from my Apple Watch.


72
00:03:19,232 --> 00:03:21,835 line:-1
Next, I'll create
a workout configuration


73
00:03:21,835 --> 00:03:25,272 line:-1
with an activity type
of cycling.


74
00:03:25.272 --> 00:03:28.975 line:-1 position:50%
Then I'll call the existing
Start Watch App API


75
00:03:28,975 --> 00:03:33,146 line:-1
in my iPhone app to launch
the app on my paired Apple Watch


76
00:03:33.146 --> 00:03:36.616 line:-1 position:50%
and pass the workout
configuration.


77
00:03:36,616 --> 00:03:39,252 line:-1
When I receive the configuration
from my iPhone,


78
00:03:39.252 --> 00:03:42.756 line:-1 position:50%
I can create a workout
session in my Apple Watch app.


79
00:03:42,756 --> 00:03:44,391 line:-1
The workout session
on my Apple Watch


80
00:03:44,391 --> 00:03:46,226 line:-1
is called the primary session.


81
00:03:46.226 --> 00:03:47.794 line:-1 position:50%
And the workout session
on my iPhone


82
00:03:47,794 --> 00:03:51,198 line:-1
is called the mirrored session.


83
00:03:51,198 --> 00:03:52,799 line:-1
So here's how it looks.


84
00:03:52,799 --> 00:03:55,135 line:-1
When I start a workout
in my iPhone app,


85
00:03:55,135 --> 00:03:57,804 line:-1
my app on my Apple Watch
gets launched


86
00:03:57,804 --> 00:04:00,540 line:-1
with the configuration
sent from my iPhone.


87
00:04:00,540 --> 00:04:02,542 line:-1
So far, so good.


88
00:04:02.542 --> 00:04:05.479 line:-1 position:50%
Now the thing that makes
this API so convenient


89
00:04:05.479 --> 00:04:07.848 line:-1 position:50%
is that HealthKit
takes care of keeping


90
00:04:07.848 --> 00:04:11.585 line:-1 position:50%
both the primary and the
mirrored session states in sync.


91
00:04:11,585 --> 00:04:13,954 line:-1
For example, when the primary
session is paused


92
00:04:13,954 --> 00:04:15,589 line:-1
on my Apple Watch,


93
00:04:15,589 --> 00:04:19,759 line:-1
the mirrored session
on my iPhone is paused as well.


94
00:04:19,759 --> 00:04:22,929 line:-1
In addition to getting a copy
of the active workout session


95
00:04:22.929 --> 00:04:26.199 line:-1 position:50%
to my iPhone, HealthKit also
provides a new API


96
00:04:26,199 --> 00:04:31,071 line:-1
to exchange relevant workout
data between both devices,


97
00:04:31.071 --> 00:04:34.941 line:-1 position:50%
and provides the ability
to begin and end activities


98
00:04:34,941 --> 00:04:37,410 line:-1
as well as generate events.


99
00:04:37,410 --> 00:04:40,547 line:-1
OK, now that I have
my primary session ready


100
00:04:40.547 --> 00:04:43.016 line:-1 position:50%
and my iPhone ready
to receive the handler,


101
00:04:43.016 --> 00:04:45.318 line:-1 position:50%
I'll start mirroring
from my Apple Watch


102
00:04:45,318 --> 00:04:48,555 line:-1
by calling
startMirroringToCompanionDevice


103
00:04:48,555 --> 00:04:52,092 line:-1
and start the primary session.


104
00:04:52,092 --> 00:04:54,794 line:-1
Once I call startMirroring
on Apple Watch,


105
00:04:54.794 --> 00:04:58.431 line:-1 position:50%
HealthKit launches my companion
iPhone app in the background,


106
00:04:58,431 --> 00:05:01,434 line:-1
gives my app 10 seconds
to start a live activity


107
00:05:01,434 --> 00:05:04,905 line:-1
and call a handler
to start mirroring.


108
00:05:04,905 --> 00:05:07,908 line:-1
Great, so we have started
the session on the Apple Watch


109
00:05:07.908 --> 00:05:10.243 line:-1 position:50%
and got the copy on iPhone.


110
00:05:10.243 --> 00:05:12.913 line:-1 position:50%
Now, let me show you
how the session state


111
00:05:12.913 --> 00:05:15.916 line:-1 position:50%
is communicated
between the devices.


112
00:05:15.916 --> 00:05:18.919 line:-1 position:50%
In my example app,
I want to show my users


113
00:05:18.919 --> 00:05:20.620 line:-1 position:50%
the state of
the workout session,


114
00:05:20,620 --> 00:05:24,224 line:-1
like whether the session
is running, paused, et cetera.


115
00:05:24.224 --> 00:05:27.360 line:-1 position:50%
So I'll set up the session
delegate on Apple Watch


116
00:05:27.360 --> 00:05:30.964 line:-1 position:50%
and iPhone to monitor
the session state updates


117
00:05:30.964 --> 00:05:33.400 line:-1 position:50%
and the events generated.


118
00:05:33,400 --> 00:05:36,269 line:-1
Keep in mind that it is
important to keep a reference


119
00:05:36,269 --> 00:05:41,041 line:-1
to the retrieved mirrored
session on the iPhone app.


120
00:05:41.041 --> 00:05:43.543 line:-1 position:50%
Calling startActivity
on my Apple Watch


121
00:05:43,543 --> 00:05:45,278 line:-1
starts the primary session


122
00:05:45,278 --> 00:05:47,847 line:-1
and changes the session
state to running.


123
00:05:47,847 --> 00:05:50,984 line:-1
This state update is delivered
to my Apple Watch app


124
00:05:50,984 --> 00:05:54,321 line:-1
since it's set as session
delegate of the primary session.


125
00:05:54.321 --> 00:05:57.257 line:-1 position:50%
My app on my iPhone
also gets the state update


126
00:05:57,257 --> 00:05:59,626 line:-1
through the mirrored
session delegate.


127
00:05:59,626 --> 00:06:02,696 line:-1
It's that easy to bring an
active workout session to iPhone


128
00:06:02.696 --> 00:06:05.732 line:-1 position:50%
and monitor the changes
on a session.


129
00:06:05.732 --> 00:06:07.500 line:-1 position:50%
So here's what it looks like.


130
00:06:07.500 --> 00:06:10.170 line:-1 position:50%
When a workout session
is started on my Apple Watch,


131
00:06:10,170 --> 00:06:13,039 line:-1
the pause button on my iPhone
and my Apple Watch


132
00:06:13,039 --> 00:06:18,278 line:-1
is activated to indicate that
the workout session is running.


133
00:06:18.278 --> 00:06:20.113 line:-1 position:50%
In addition to syncing
session states


134
00:06:20,113 --> 00:06:22,315 line:-1
between the primary
and the mirrored session,


135
00:06:22.315 --> 00:06:27.520 line:-1 position:50%
I can also generate and send
events like pause and resume.


136
00:06:27,520 --> 00:06:30,724 line:-1
When I pause the workout
session on my Apple Watch,


137
00:06:30.724 --> 00:06:32.459 line:-1 position:50%
both my Apple Watch app


138
00:06:32.459 --> 00:06:34.427 line:-1 position:50%
and the mirrored session
on my iPhone


139
00:06:34,427 --> 00:06:36,663 line:-1
get notified about
the pause event


140
00:06:36.663 --> 00:06:39.699 line:-1 position:50%
through their session delegate.


141
00:06:39.699 --> 00:06:41.668 line:-1 position:50%
And that looks like this.


142
00:06:41,668 --> 00:06:43,870 line:-1
When I pause a workout
session on my Apple Watch,


143
00:06:43,870 --> 00:06:47,974 line:-1
the resume button on both
my devices becomes active.


144
00:06:47.974 --> 00:06:50.543 line:-1 position:50%
Now that I have a workout
session on my iPhone,


145
00:06:50,543 --> 00:06:54,014 line:-1
I can control the workout
from iPhone as well.


146
00:06:54,014 --> 00:06:56,449 line:-1
When I resume the mirrored
session on my iPhone,


147
00:06:56,449 --> 00:06:59,019 line:-1
the primary session delegate
on my Apple Watch


148
00:06:59.019 --> 00:07:01.054 line:-1 position:50%
gets notified about
the state change


149
00:07:01.054 --> 00:07:04.991 line:-1 position:50%
and the mirrored session
delegate gets a resume event.


150
00:07:04.991 --> 00:07:07.827 line:-1 position:50%
Next, I would like to show
you how to take advantage


151
00:07:07,827 --> 00:07:09,663 line:-1
of the new cycling features


152
00:07:09,663 --> 00:07:11,865 line:-1
HealthKit is introducing
this year,


153
00:07:11.865 --> 00:07:17.437 line:-1 position:50%
including new data types such as
cycling speed, power, cadence;


154
00:07:17.437 --> 00:07:20.774 line:-1 position:50%
a new ability to directly
connect to Bluetooth devices


155
00:07:20,774 --> 00:07:23,143 line:-1
designed to provide
these data types,


156
00:07:23.143 --> 00:07:26.513 line:-1 position:50%
similar to how a heart rate
monitor collects and writes


157
00:07:26,513 --> 00:07:29,349 line:-1
heart rate data
to the health database;


158
00:07:29,349 --> 00:07:32,419 line:-1
and finally, the ability
for HealthKit on Apple Watch


159
00:07:32,419 --> 00:07:35,221 line:-1
to automatically
calculate and save FTP


160
00:07:35,221 --> 00:07:39,726 line:-1
based on the data collected
from these Bluetooth devices.


161
00:07:39.726 --> 00:07:43.296 line:-1 position:50%
My bike has a power meter
that collects power and cadence,


162
00:07:43.296 --> 00:07:45.565 line:-1 position:50%
which I paired
with my Apple Watch.


163
00:07:45,565 --> 00:07:48,368 line:-1
The sensor writes the data
to my Apple Watch,


164
00:07:48.368 --> 00:07:51.037 line:-1 position:50%
and I would like to extend
my app to send that data


165
00:07:51,037 --> 00:07:54,140 line:-1
to my iPhone
for display as I ride.


166
00:07:54.140 --> 00:07:57.043 line:-1 position:50%
To do this, I'll first start
collecting cycling metrics


167
00:07:57,043 --> 00:08:01,147 line:-1
using the recommended workout builder API beginCollection.


168
00:08:01,147 --> 00:08:02,882 line:-1
And then I'll send the data


169
00:08:02.882 --> 00:08:07.053 line:-1 position:50%
using the sendData(toRemoteWorkoutSession) API.


170
00:08:07.053 --> 00:08:10.056 line:-1 position:50%
To send the cycling metrics,
I'll package the speed,


171
00:08:10,056 --> 00:08:13,393 line:-1
cadence, and power data received
from Bluetooth sensors


172
00:08:13.393 --> 00:08:15.495 line:-1 position:50%
on my Apple Watch and call


173
00:08:15.495 --> 00:08:19.199 line:-1 position:50%
sendData(toRemoteWorkoutSession)
on the primary session.


174
00:08:19,199 --> 00:08:22,369 line:-1
As a result, the mirrored
session delegate on my iPhone


175
00:08:22.369 --> 00:08:25.538 line:-1 position:50%
will receive the
didReceiveDataFromRemoteDevice


176
00:08:25.538 --> 00:08:27.774 line:-1 position:50%
call with the package data,


177
00:08:27,774 --> 00:08:31,344 line:-1
which I can unpack
and display on my iPhone.


178
00:08:31,344 --> 00:08:34,481 line:-1
Here is how it looks like
with my example app


179
00:08:34,481 --> 00:08:36,850 line:-1
sending cycling metrics
from my Apple Watch


180
00:08:36,850 --> 00:08:40,220 line:-1
and how they are displayed
in my iPhone app.


181
00:08:40,220 --> 00:08:42,522 line:-1
Using
sendData(toRemoteWorkoutSession)


182
00:08:42.522 --> 00:08:45.325 line:-1 position:50%
I can also send data
in the opposite direction


183
00:08:45,325 --> 00:08:48,261 line:-1
from my iPhone
to my Apple Watch.


184
00:08:48,261 --> 00:08:51,765 line:-1
In my example, I want
to keep track of my water intake


185
00:08:51.765 --> 00:08:54.901 line:-1 position:50%
during a workout
so I can analyze it afterwards


186
00:08:54.901 --> 00:08:57.437 line:-1 position:50%
in the hopes of creating
a better hydration plan


187
00:08:57.437 --> 00:08:59.272 line:-1 position:50%
for my next ride.


188
00:08:59.272 --> 00:09:01.341 line:-1 position:50%
To do this,
I'll package and send


189
00:09:01,341 --> 00:09:04,144 line:-1
the amount of water I consume
on the mirrored session


190
00:09:04,144 --> 00:09:06,880 line:-1
from my iPhone to Apple Watch.


191
00:09:06,880 --> 00:09:09,182 line:0
The primary session's delegate
method


192
00:09:09,182 --> 00:09:13,753 position:50%
didReceiveDataFromRemoteDevice
is called with the packaged data


193
00:09:13,753 --> 00:09:18,191 position:50%
which I'll unpack
and save on my Apple Watch.


194
00:09:18.191 --> 00:09:21.060 line:-1 position:50%
So here's how it looks
in my example app.


195
00:09:21,060 --> 00:09:24,697 line:-1
When I tap the button to count
each ounce of water I take,


196
00:09:24.697 --> 00:09:26.466 line:-1 position:50%
it sends it to my Apple Watch,


197
00:09:26.466 --> 00:09:30.003 line:-1 position:50%
where it displays the total
amount of water consumed.


198
00:09:30,003 --> 00:09:32,839 line:-1
Now I can stop mirroring
the session anytime


199
00:09:32,839 --> 00:09:34,808 line:-1
during the workout by calling


200
00:09:34,808 --> 00:09:37,877 line:-1
stopMirroringToCompanionDevice
API.


201
00:09:37,877 --> 00:09:40,046 line:-1
Calling this method
will stop sending data


202
00:09:40,046 --> 00:09:42,649 line:-1
to the companion device
and the mirrored session's


203
00:09:42,649 --> 00:09:46,319 line:-1
didDisconnectFromRemoteDevice
WithError delegate method


204
00:09:46,319 --> 00:09:48,021 line:-1
will be called.


205
00:09:48,021 --> 00:09:50,757 position:50%
And when I'm done cycling,
I'll end the primary session


206
00:09:50,757 --> 00:09:54,194 position:50%
and save it on the Apple Watch
by finishing the builder.


207
00:09:54,194 --> 00:09:56,663 line:-1
After saving the workout sample
on Apple Watch,


208
00:09:56,663 --> 00:09:59,098 line:-1
it syncs to my other devices,
and I can now show


209
00:09:59,098 --> 00:10:02,168 line:-1
the post-workout summary
with more detailed charts


210
00:10:02,168 --> 00:10:04,537 line:-1
and visualizations.


211
00:10:04,537 --> 00:10:08,141 line:-1
Great! My next step is to
present the post-workout summary


212
00:10:08,141 --> 00:10:11,044 line:-1
in my app running on my iPad.


213
00:10:11,044 --> 00:10:13,913 line:-1
Since the workout
I just saved on Apple Watch


214
00:10:13,913 --> 00:10:16,082 line:-1
automatically syncs to iPad,


215
00:10:16.082 --> 00:10:18.117 line:-1 position:50%
I only need to make
a few changes


216
00:10:18,117 --> 00:10:20,353 line:-1
to visualize my workout data.


217
00:10:20,353 --> 00:10:22,655 line:-1
Like any app
accessing HealthKit data,


218
00:10:22,655 --> 00:10:27,660 line:-1
my app on iPad will will first
need to get user authorization.


219
00:10:27.660 --> 00:10:29.496 line:-1 position:50%
When an app requests
authorization,


220
00:10:29,496 --> 00:10:32,999 line:-1
the authorization sheet
is shown if needed.


221
00:10:32.999 --> 00:10:36.369 line:-1 position:50%
On iPad, your app might
have multiple window scenes,


222
00:10:36,369 --> 00:10:39,672 line:-1
so it's important to ensure
that the authorization sheet


223
00:10:39,672 --> 00:10:42,942 line:-1
is shown over
the appropriate scene.


224
00:10:42.942 --> 00:10:44.511 line:-1 position:50%
To do this in my app,


225
00:10:44.511 --> 00:10:48.381 line:-1 position:50%
I'll first import
HealthKitUI framework.


226
00:10:48.381 --> 00:10:51.985 line:-1 position:50%
I'll specify the data types
I'm interested in reading,


227
00:10:51,985 --> 00:10:56,589 line:-1
specifically active energy,
cycling speed, power, cadence,


228
00:10:56.589 --> 00:10:59.726 line:-1 position:50%
heart rate, and workout samples.


229
00:10:59,726 --> 00:11:02,695 line:0
Then, since I built
a SwiftUI app,


230
00:11:02,695 --> 00:11:05,565 position:50%
I'll use the new
healthDataAccessRequest


231
00:11:05,565 --> 00:11:09,135 position:50%
view modifier from
the HealthKitUI framework


232
00:11:09,135 --> 00:11:11,804 line:0
and pass the data types
I want to share and read,


233
00:11:11,804 --> 00:11:13,773 line:0
as well as a trigger.


234
00:11:13,773 --> 00:11:15,408 position:50%
Setting the trigger to true


235
00:11:15,408 --> 00:11:19,112 position:50%
will present the authorization
sheet in my app.


236
00:11:19,112 --> 00:11:21,180 line:0
For a UIKit app,
you would set the


237
00:11:21,180 --> 00:11:25,285 line:0
healthStores.authorizationView
ControllerPresenter property,


238
00:11:25,285 --> 00:11:26,986 line:0
and then request authorization


239
00:11:26,986 --> 00:11:29,889 line:0
with the types to share
and read.


240
00:11:29,889 --> 00:11:32,392 line:-1
Now, with the authorization
taken care of,


241
00:11:32,392 --> 00:11:35,595 line:-1
let's check out
my workout on iPad.


242
00:11:35,595 --> 00:11:36,863 line:-1
Amazing!


243
00:11:36.863 --> 00:11:38.932 line:-1 position:50%
Now I can access my workout data


244
00:11:38.932 --> 00:11:41.534 line:-1 position:50%
and take advantage
of the iPad's screen size


245
00:11:41.534 --> 00:11:44.737 line:-1 position:50%
to create a richer experience
for my app.


246
00:11:44,737 --> 00:11:46,573 line:-1
Isn't it super easy?


247
00:11:46.573 --> 00:11:49.943 line:-1 position:50%
Now you can start and control
a workout from your iPhone,


248
00:11:49.943 --> 00:11:53.112 line:-1 position:50%
collect and sync rich cycling
data from your Apple Watch,


249
00:11:53,112 --> 00:11:56,783 line:-1
and finally, view the workout
details on your iPad.


250
00:11:56,783 --> 00:11:59,285 line:0
To wrap up,
be sure to update your app


251
00:11:59,285 --> 00:12:01,621 line:0
to support authorization
on iPad.


252
00:12:01,621 --> 00:12:03,957 position:50%
If your Fitness app
involves cycling,


253
00:12:03,957 --> 00:12:06,693 line:0
you can add support
for new data types.


254
00:12:06,693 --> 00:12:10,196 line:0
If you build workout apps
on iPhone and Apple Watch,


255
00:12:10,196 --> 00:12:12,732 position:50%
check out the new
mirrored session APIs


256
00:12:12,732 --> 00:12:15,001 line:0
to start mirroring data
and controlling state


257
00:12:15,001 --> 00:12:17,103 line:0
between both devices.


258
00:12:17,103 --> 00:12:21,174 line:0
If your app needs it, use sync
identifiers and version numbers


259
00:12:21,174 --> 00:12:22,842 line:0
to keep the data consistent


260
00:12:22,842 --> 00:12:25,578 line:0
across your server
and users' devices.


261
00:12:25,578 --> 00:12:28,281 line:0
And finally,
give us your feedback.


262
00:12:28,281 --> 00:12:30,516 line:-1
We want to support
the features you need


263
00:12:30.516 --> 00:12:33.953 line:-1 position:50%
to keep building those amazing
apps to keep the world healthy.


264
00:12:33.953 --> 00:12:35.655 line:-1 position:50%
Thank you for watching.


265
00:12:35,655 --> 00:12:39,158 align:right line:0 position:90%
♪

