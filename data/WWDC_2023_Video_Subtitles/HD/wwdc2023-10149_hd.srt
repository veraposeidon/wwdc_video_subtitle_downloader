2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:10.010 --> 00:00:12.446 line:-1 align:center
Philippe: Hi, my name is Philippe.


4
00:00:12.479 --> 00:00:17.050 line:-2 align:center
I am really pleased to present a magical
new feature in Swift:


5
00:00:17,084 --> 00:00:18,952 line:-1
Observation.


6
00:00:18,986 --> 00:00:23,657 line:-2
This feature lets you define your models
using standard Swift syntax


7
00:00:23.690 --> 00:00:28.495 line:-2 align:center
and use those types to have UI
respond to changes to that model.


8
00:00:28.529 --> 00:00:33.133 line:-2 align:center
This makes developing with SwiftUI
seamless and intuitive.


9
00:00:33.166 --> 00:00:36.436 line:-1 align:center
Today we will be covering a few topics:


10
00:00:36,470 --> 00:00:39,806 line:-1
An overview of what Observation is,


11
00:00:39,840 --> 00:00:45,312 line:-2
a set of handy rules on when to use
the property wrappers from SwiftUI,


12
00:00:45.345 --> 00:00:51.118 line:-2 align:center
then we'll cover a few of
the more advanced usages of observable.


13
00:00:51,151 --> 00:00:55,889 line:-2
And we'll wrap up with some examples
on how to update code


14
00:00:55,923 --> 00:01:00,694 line:-2
from using ObservableObject
to the new @Observable macro.


15
00:01:02,262 --> 00:01:07,401 line:-2
Observation is a new Swift feature
for tracking changes to properties.


16
00:01:07,434 --> 00:01:09,336 line:-1
It works with normal Swift types


17
00:01:09,369 --> 00:01:13,006 line:-1
and transforms them with magic of macros.


18
00:01:13.040 --> 00:01:15.609 line:-1 align:center
We often write data model types,


19
00:01:15.642 --> 00:01:17.644 line:-1 align:center
and they have a number of properties


20
00:01:17.678 --> 00:01:21.815 line:-2 align:center
that eventually,
we'll want to use in SwiftUI.


21
00:01:21,849 --> 00:01:26,753 line:-2
What if I told you adding @Observable
is all you need


22
00:01:26.787 --> 00:01:31.191 line:-2 align:center
to make UI respond to changes
in your data models?


23
00:01:31.225 --> 00:01:37.297 line:-2 align:center
New in Swift 5.9 you can
make models simpler than ever.


24
00:01:37,331 --> 00:01:40,334 line:-1
This uses the new macro system in Swift.


25
00:01:40,367 --> 00:01:45,672 line:-2
The "@Observable" tells the Swift compiler
to transform your code


26
00:01:45.706 --> 00:01:51.845 line:-2 align:center
from what you wrote to an expanded form
that makes the type able to be observed.


27
00:01:51.879 --> 00:01:56.149 line:-2 align:center
You can use observable types
to power your SwiftUI views.


28
00:01:56.183 --> 00:02:01.588 line:-2 align:center
And the amazing part is that they don't
need any sort of property wrapper to work.


29
00:02:01.622 --> 00:02:05.292 line:-2 align:center
I have some tasty samples
from our donut food truck app,


30
00:02:05.325 --> 00:02:07.594 line:-1 align:center
so let's dive right in.


31
00:02:07.628 --> 00:02:11.198 line:-1 align:center
Here we have a simple view showing donuts.


32
00:02:11.231 --> 00:02:16.003 line:-2 align:center
SwiftUI knows that the model
accesses specific properties


33
00:02:16.036 --> 00:02:18.205 line:-1 align:center
when executing the body call.


34
00:02:18.238 --> 00:02:21.775 line:-2 align:center
In this case it can detect
that the property 'donuts'


35
00:02:21,808 --> 00:02:26,180 line:-2
is accessed when executing
the body of the donut menu view.


36
00:02:26.213 --> 00:02:30.417 line:-2 align:center
When body is executed,
SwiftUI tracks all access


37
00:02:30,450 --> 00:02:33,654 line:-2
to properties used
from 'Observable' types.


38
00:02:33.687 --> 00:02:37.991 line:-2 align:center
It then takes that tracking information
and uses it to determine


39
00:02:38.025 --> 00:02:42.696 line:-2 align:center
when the next change to any of those
properties on those specific instances


40
00:02:42.729 --> 00:02:44.731 line:-1 align:center
will change.


41
00:02:44,765 --> 00:02:49,937 line:-2
Here, if we change the donuts array
by clicking the add donut button,


42
00:02:49.970 --> 00:02:52.873 line:-1 align:center
it will invalidate the donut menu view


43
00:02:52.906 --> 00:02:56.009 line:-1 align:center
and the UI is updated accordingly.


44
00:02:56,043 --> 00:02:59,413 line:-2
What's neat, is that if,
say an order is added,


45
00:02:59,446 --> 00:03:01,815 line:-1
the view won't be invalidated


46
00:03:01,849 --> 00:03:04,918 line:-2
because that property
isn't part of the tracked properties


47
00:03:04.952 --> 00:03:08.388 line:-2 align:center
it determined
when executing the body of the view.


48
00:03:08.422 --> 00:03:12.359 line:-2 align:center
Let's next cover what happens
when you use a computed property.


49
00:03:12,392 --> 00:03:16,597 line:-2
Adding in a computed property
follows those same rules as before.


50
00:03:16.630 --> 00:03:22.236 line:-2 align:center
When a property that is used changes,
the UI updates.


51
00:03:22.269 --> 00:03:26.306 line:-2 align:center
In the newly added content,
the model's orderCount is called,


52
00:03:26.340 --> 00:03:29.543 line:-1 align:center
which that accesses the orders property.


53
00:03:29,576 --> 00:03:34,114 line:-2
So that means, in this example
if the orders change,


54
00:03:34,147 --> 00:03:35,782 line:-1
that text will be updated


55
00:03:35,816 --> 00:03:41,221 line:-2
because the orderCount
accesses the order's property.


56
00:03:41.255 --> 00:03:45.192 line:-2 align:center
Using the "@Observable" macro
expands your types


57
00:03:45,225 --> 00:03:47,861 line:-1
so they can support Observation.


58
00:03:47.895 --> 00:03:51.899 line:-2 align:center
This lets SwiftUI track access
to those properties


59
00:03:51,932 --> 00:03:56,904 line:-2
and observe when the next property
will change out of that Observation.


60
00:03:56.937 --> 00:04:01.041 line:-2 align:center
Tracking things like that
let your UI only recalculate


61
00:04:01.074 --> 00:04:05.812 line:-2 align:center
the body of views
when those specific properties change,


62
00:04:05,846 --> 00:04:10,651 line:-2
which we've seen some really fantastic
performance improvements from that.


63
00:04:10,684 --> 00:04:13,053 align:center
If you wanna dive deep into macros,


64
00:04:13,086 --> 00:04:16,290 align:center
make sure to check out the
"Write Swift macros"


65
00:04:16,323 --> 00:04:19,293 line:0
and "Expand on Swift macros" sessions.


66
00:04:19,326 --> 00:04:24,998 line:-2
With Observable, the property wrappers
for SwiftUI are even easier than ever.


67
00:04:25,032 --> 00:04:30,070 line:-2
State, environment, and bindable
are the three primary property wrappers


68
00:04:30.103 --> 00:04:32.072 line:-1 align:center
for working with SwiftUI.


69
00:04:32,105 --> 00:04:35,609 line:-2
We've already covered the case
where you don't need any property wrappers


70
00:04:35.642 --> 00:04:38.912 line:-2 align:center
to interface with observable types
with SwiftUI,


71
00:04:38.946 --> 00:04:42.182 line:-2 align:center
but let's dive into the cases
where you do.


72
00:04:42.216 --> 00:04:44.818 line:-1 align:center
Starting off with @State.


73
00:04:44.852 --> 00:04:48.689 line:-2 align:center
When the view needs to have its own state
stored in a model,


74
00:04:48.722 --> 00:04:51.458 line:-1 align:center
use the @State property.


75
00:04:51.491 --> 00:04:58.432 line:-2 align:center
Here we have the observable model object
Donut being used in a sheet presentation.


76
00:04:58,465 --> 00:05:02,102 line:-2
When the sheet is presented,
the donutToAdd state variable


77
00:05:02.135 --> 00:05:05.739 line:-2 align:center
is used to bind values
to the editable fields.


78
00:05:05.772 --> 00:05:10.177 line:-2 align:center
The "donutToAdd" property
is managed by the lifetime of the view


79
00:05:10,210 --> 00:05:11,879 line:-1
it's contained in.


80
00:05:11.912 --> 00:05:14.915 line:-1 align:center
Next up, @Environment.


81
00:05:14,948 --> 00:05:20,420 line:-2
Environment lets values be propagated
as globally accessible values.


82
00:05:20.454 --> 00:05:24.391 line:-1 align:center
This lets things be shared in many places.


83
00:05:24.424 --> 00:05:27.828 line:-1 align:center
Observable types work fantastically here


84
00:05:27.861 --> 00:05:33.400 line:-2 align:center
since the updates created by them
are based upon access.


85
00:05:33,433 --> 00:05:36,703 line:-2
When invoking the body of
the food truck menu view,


86
00:05:36.737 --> 00:05:41.008 line:-2 align:center
the property userName
of the account object is accessed.


87
00:05:41,041 --> 00:05:45,345 line:-2
So when the userName will change,
the menu view updates.


88
00:05:45,379 --> 00:05:50,050 line:-2
The newest of the family of
property wrappers is '@Bindable'.


89
00:05:50,083 --> 00:05:53,954 line:-2
The bindable property wrapper
is really lightweight.


90
00:05:53,987 --> 00:05:58,725 line:-2
All it does is allow bindings
to be created from that type.


91
00:05:58.759 --> 00:06:04.531 line:-2 align:center
Getting binding out of a bindable
wrapped property is really easy.


92
00:06:04,565 --> 00:06:09,269 line:-2
Just use the $ syntax
to get the binding to that property.


93
00:06:09.303 --> 00:06:13.640 line:-2 align:center
Most often, this will be bindings
to observable types.


94
00:06:13.674 --> 00:06:18.579 line:-2 align:center
For the donut view, we have
the name being displayed with Text.


95
00:06:18.612 --> 00:06:22.783 line:-2 align:center
But in reality, we want to be able
to edit that name.


96
00:06:22.816 --> 00:06:26.920 line:-2 align:center
So instead of a Text,
we can use a TextField.


97
00:06:26,954 --> 00:06:29,790 line:-1
That TextField takes a binding.


98
00:06:29.823 --> 00:06:34.361 line:-2 align:center
It reads from the binding
to populate the value of the TextField,


99
00:06:34,394 --> 00:06:39,199 line:-2
but it also writes back to the binding
when the user changes the value.


100
00:06:39.233 --> 00:06:41.835 line:-1 align:center
To make bindings to the donut,


101
00:06:41.869 --> 00:06:45.906 line:-2 align:center
all we need to do is use
the '@Bindable' property wrapper


102
00:06:45,939 --> 00:06:47,374 line:-1
on the donut property.


103
00:06:47.407 --> 00:06:52.579 line:-2 align:center
The property wrapper annotation allows us
to use the '$donut.name' syntax


104
00:06:52,613 --> 00:06:55,482 line:-1
and creates a binding when used.


105
00:06:55,516 --> 00:06:59,052 line:-2
To wrap up the wrappers,
there are only three questions


106
00:06:59.086 --> 00:07:03.790 line:-2 align:center
you need to answer for using
observable models in SwiftUI.


107
00:07:03,824 --> 00:07:07,661 line:-2
Does this model
need to be state of the view itself?


108
00:07:07,694 --> 00:07:10,764 line:-1
If so, use '@State'.


109
00:07:10.797 --> 00:07:15.769 line:-2 align:center
Does this model need to be part of
the global environment of the application?


110
00:07:15,802 --> 00:07:19,373 line:-1
If so, use '@Environment'.


111
00:07:19.406 --> 00:07:22.743 line:-1 align:center
Does this model just need bindings?


112
00:07:22.776 --> 00:07:26.446 line:-1 align:center
If so, use the new '@Bindable'.


113
00:07:26.480 --> 00:07:29.616 line:-2 align:center
And if none of these questions
have the answer as yes,


114
00:07:29,650 --> 00:07:32,619 line:-2
just use the model
as a property of your view.


115
00:07:32,653 --> 00:07:37,191 line:-2
So far, we've covered properties
that start off in your model as stored.


116
00:07:37.224 --> 00:07:40.394 line:-1 align:center
Observable can do a lot more.


117
00:07:40.427 --> 00:07:44.731 line:-2 align:center
Because SwiftUI tracks access
to fields per instance,


118
00:07:44,765 --> 00:07:49,436 line:-2
it means that you can use arrays,
optionals, or for that matter,


119
00:07:49.469 --> 00:07:53.640 line:-2 align:center
any type that contains
your observable models.


120
00:07:53.674 --> 00:07:57.644 line:-2 align:center
The donut list view has
an array of donut models.


121
00:07:57.678 --> 00:08:01.481 line:-1 align:center
Each model itself is '@Observable'.


122
00:08:01.515 --> 00:08:05.018 line:-2 align:center
When any of the names
of those donuts change,


123
00:08:05,052 --> 00:08:10,324 line:-2
SwiftUI detects the access to that
property on that specific instance


124
00:08:10.357 --> 00:08:14.761 line:-2 align:center
and tracks it to know
when to invalidate the view.


125
00:08:14,795 --> 00:08:20,067 line:-2
So here, when the donut name
is changed via the randomize button,


126
00:08:20,100 --> 00:08:23,136 line:-1
the view updates accordingly.


127
00:08:23.170 --> 00:08:27.374 line:-2 align:center
This lets you build your models
how you want.


128
00:08:27.407 --> 00:08:30.077 line:-2 align:center
You can have arrays of models
being observed,


129
00:08:30.110 --> 00:08:35.349 line:-2 align:center
or even model types
that contain other observable model types.


130
00:08:35.382 --> 00:08:38.719 line:-1 align:center
The general rule is for Observable,


131
00:08:38,752 --> 00:08:42,189 line:-1
if a property that is used changes,


132
00:08:42,222 --> 00:08:44,491 line:-1
the view will update.


133
00:08:44.525 --> 00:08:48.896 line:-2 align:center
There is a case
where that rule does not fully apply.


134
00:08:48.929 --> 00:08:54.601 line:-2 align:center
If a computed property does not have
any stored property it is comprised with,


135
00:08:54.635 --> 00:09:00.040 line:-2 align:center
then two extra steps need to be taken
to make it work with Observation.


136
00:09:00,073 --> 00:09:04,311 line:-2
This only needs to be done
when the property that would be observed


137
00:09:04,344 --> 00:09:06,813 line:-2
is not changed
via some sort of composition


138
00:09:06,847 --> 00:09:09,516 line:-2
of stored properties
in the observable type.


139
00:09:09.550 --> 00:09:14.021 line:-2 align:center
In this case, all that needs to be done
is tell Observation


140
00:09:14,054 --> 00:09:18,525 line:-2
when the property is accessed
and when the property changes.


141
00:09:18.559 --> 00:09:23.063 line:-2 align:center
This is how Observation synthesizes
access to properties normally,


142
00:09:23,096 --> 00:09:27,634 line:-2
except here we've rewritten
those custom access points manually


143
00:09:27,668 --> 00:09:33,140 line:-2
so that the non-observable location
can be read and store the name.


144
00:09:33,173 --> 00:09:37,578 line:-2
Most of the time, these type
of manual cases are not needed,


145
00:09:37.611 --> 00:09:41.315 line:-2 align:center
because most of the time,
properties of the models in question


146
00:09:41.348 --> 00:09:44.451 line:-1 align:center
are composed from other stored properties.


147
00:09:44,484 --> 00:09:50,290 line:-2
But in the rare cases where
you need that advanced capability,


148
00:09:50.324 --> 00:09:55.028 line:-2 align:center
Observation is flexible enough
but easy enough to do on your own.


149
00:09:55.062 --> 00:09:59.366 line:-2 align:center
SwiftUI can identify changes
in composition


150
00:09:59,399 --> 00:10:04,438 line:-2
since it tracks observable types
by access to those properties.


151
00:10:04,471 --> 00:10:10,110 line:-2
This means that if a computed property
is composed from other stored properties,


152
00:10:10,143 --> 00:10:13,547 line:-1
then the Observation will just work.


153
00:10:13,580 --> 00:10:17,351 line:-2
However, in the few cases
where that's not true,


154
00:10:17.384 --> 00:10:19.953 line:-1 align:center
you can use Observation directly


155
00:10:19.987 --> 00:10:25.425 line:-2 align:center
to manually add those calls
to flag access and mutation.


156
00:10:25,459 --> 00:10:28,495 line:-1
Previously in the Food Truck app,


157
00:10:28,529 --> 00:10:32,499 line:-2
we used ObservableObject to achieve some
of the same things


158
00:10:32.533 --> 00:10:35.435 line:-1 align:center
we did with the new @Observable macro.


159
00:10:35.469 --> 00:10:38.505 line:-2 align:center
If you have an app
that uses SwiftUI today,


160
00:10:38,539 --> 00:10:42,242 line:-1
you might be in a very similar situation.


161
00:10:42,276 --> 00:10:45,012 line:-2
The Observable macro
can simplify your code


162
00:10:45.045 --> 00:10:50.083 line:-2 align:center
and chances are, you might see
a decent performance boost too.


163
00:10:50.117 --> 00:10:53.253 line:-2 align:center
Before the change,
the FoodTruckModel type


164
00:10:53.287 --> 00:10:55.889 line:-1 align:center
had an ObservableObject conformance,


165
00:10:55.923 --> 00:10:58.392 line:-2 align:center
and it had a number of properties
that were marked


166
00:10:58.425 --> 00:11:01.662 line:-1 align:center
with the @Published property wrapper.


167
00:11:01.695 --> 00:11:06.500 line:-2 align:center
Changing over to
the @Observable macro was pretty easy.


168
00:11:06,533 --> 00:11:10,971 line:-2
All we needed to do is remove
the conformance to ObservableObject,


169
00:11:11,004 --> 00:11:12,606 line:-1
remove the '@Published',


170
00:11:12,639 --> 00:11:16,410 line:-1
and mark it with the '@Observable' macro.


171
00:11:16.443 --> 00:11:20.747 line:-2 align:center
When it comes to the views,
there were a number of '@ObservedObject'


172
00:11:20,781 --> 00:11:23,650 line:-2
and '@EnvironmentObject'
property wrappers.


173
00:11:23.684 --> 00:11:27.621 line:-2 align:center
In all cases
of the '@ObservedObject' wrappers,


174
00:11:27.654 --> 00:11:31.458 line:-2 align:center
either disappeared
or needed just the bindings


175
00:11:31,491 --> 00:11:34,862 line:-1
and changed to the new '@Bindable'.


176
00:11:34,895 --> 00:11:40,767 line:-2
The '@EnvironmentObject' wrappers
got transformed into just '@Environment'.


177
00:11:40.801 --> 00:11:45.305 line:-2 align:center
Changing from ObservableObject
to the new '@Observable' macro


178
00:11:45.339 --> 00:11:48.442 line:-1 align:center
was mostly just deleting annotations.


179
00:11:48,475 --> 00:11:52,679 line:-2
Or simplifying them down
to the three primary property wrappers;


180
00:11:52,713 --> 00:11:57,251 line:-1
@State, @Environment, and @Bindable.


181
00:11:57,284 --> 00:12:00,487 line:-2
Which makes writing new features
easier to reason about


182
00:12:00,521 --> 00:12:04,958 line:-2
since there are fewer options
that need to be considered.


183
00:12:04.992 --> 00:12:09.129 line:-2 align:center
Observation has
just the right level of magic.


184
00:12:09,162 --> 00:12:11,632 line:-1
It lets you get started easily


185
00:12:11.665 --> 00:12:14.902 line:-2 align:center
and lets you work
with your data models directly


186
00:12:14,935 --> 00:12:17,838 line:-1
by using the @Observable macro.


187
00:12:17,871 --> 00:12:21,441 line:-2
When you need,
it lets you write the manual versions


188
00:12:21,475 --> 00:12:24,111 line:-1
for advanced use cases.


189
00:12:24.144 --> 00:12:30.117 line:-2 align:center
For new development, using Observable
is the easiest way to get started.


190
00:12:30,150 --> 00:12:35,389 line:-2
And for existing applications,
using Observable can simplify your models


191
00:12:35,422 --> 00:12:38,959 line:-2
and improve performance
when adding new features.


192
00:12:38,992 --> 00:12:41,361 line:-1
I encourage you to try it out


193
00:12:41,395 --> 00:12:44,198 line:-1
and harness that magic yourself.


194
00:12:44.231 --> 00:12:47.234 line:-1 align:center
♪ ♪

