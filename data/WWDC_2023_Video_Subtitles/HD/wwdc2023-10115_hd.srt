2
00:00:00,334 --> 00:00:06,340 line:-1
♪ ♪


3
00:00:10,010 --> 00:00:13,881 line:-2
Will: Hello and welcome
to "Design with SwiftUI."


4
00:00:13,914 --> 00:00:17,918 line:-2
My name is Will,
and I'm a designer on the Apple Maps team.


5
00:00:17.951 --> 00:00:21.455 line:-2 align:center
Later, I'll be joined
by my colleague Philip, and together,


6
00:00:21,488 --> 00:00:25,025 line:-2
we're going discuss some
of the unique benefits and applications


7
00:00:25.058 --> 00:00:28.128 line:-1 align:center
we've found from using SwiftUI.


8
00:00:28.161 --> 00:00:31.098 line:-2 align:center
We will speak
from our perspective as designers


9
00:00:31,131 --> 00:00:36,403 line:-2
and share personal insights about how
SwiftUI has enhanced our design process.


10
00:00:36.436 --> 00:00:39.773 line:-2 align:center
We will also provide
real examples from our work


11
00:00:39,806 --> 00:00:44,511 line:-2
on the newly redesigned Maps app
in watchOS 10.


12
00:00:44,545 --> 00:00:48,348 line:-2
On the Maps Design team,
we're huge fans of SwiftUI.


13
00:00:48,382 --> 00:00:51,018 line:-1
It's helped us validate design concepts,


14
00:00:51,051 --> 00:00:55,022 line:-2
provided us with unique capabilities
that no other tool offers,


15
00:00:55.055 --> 00:00:58.525 line:-2 align:center
and given us a better understanding
of how interfaces


16
00:00:58,559 --> 00:01:01,628 line:-1
are constructed and brought to life.


17
00:01:01,662 --> 00:01:03,764 line:-1
For this year's watchOS app,


18
00:01:03.797 --> 00:01:08.869 line:-2 align:center
we developed all our designs in SwiftUI,
right on device.


19
00:01:08,902 --> 00:01:13,774 line:-2
This gave us control over every detail,
from spacing and typestyles


20
00:01:13.807 --> 00:01:16.910 line:-1 align:center
to animations and interactions.


21
00:01:16,944 --> 00:01:22,282 line:-2 align:center
In today's session, we'd like to share
how SwiftUI impacted this design work.


22
00:01:22.316 --> 00:01:25.819 line:-2 align:center
Along the way,
we'll cover how SwiftUI can be a powerful


23
00:01:25.853 --> 00:01:28.355 line:-1 align:center
yet approachable tool for designers,


24
00:01:28,388 --> 00:01:31,925 line:-2
how it helps you think
through the details of your concepts,


25
00:01:31,959 --> 00:01:34,228 line:-1
design rich interactions,


26
00:01:34,261 --> 00:01:36,697 line:-1
accurately test your ideas,


27
00:01:36,730 --> 00:01:40,300 line:-2
and effectively present
your work to others.


28
00:01:40,334 --> 00:01:46,139 line:-2
Let's begin by understanding
how SwiftUI functions as a design tool.


29
00:01:46.173 --> 00:01:49.910 line:-2 align:center
While SwiftUI is a powerful framework
for building applications,


30
00:01:49.943 --> 00:01:53.447 line:-2 align:center
it's also a uniquely powerful tool
for designers,


31
00:01:53,480 --> 00:01:58,418 line:-2
enabling us to create interfaces
with higher levels of speed and precision.


32
00:01:58.452 --> 00:02:02.789 line:-2 align:center
Many people with no programming
background, just like myself,


33
00:02:02,823 --> 00:02:05,359 line:-1
find that they are able to learn SwiftUI


34
00:02:05.392 --> 00:02:09.129 line:-2 align:center
and design productively
in a short period of time.


35
00:02:09.162 --> 00:02:12.065 line:-2 align:center
That's because SwiftUI
is built on the idea


36
00:02:12.099 --> 00:02:17.171 line:-2 align:center
that common things should be easy
and complex things should be possible.


37
00:02:17.204 --> 00:02:23.177 line:-2 align:center
In practice, this means you don't need to
spend time recreating common UI elements.


38
00:02:23.210 --> 00:02:26.780 line:-2 align:center
And at the same time,
you won't feel limited when it's time


39
00:02:26,813 --> 00:02:29,216 line:-1
to create something brand-new.


40
00:02:29.249 --> 00:02:31.785 line:-2 align:center
Here's another way
we like to think about this concept.


41
00:02:31,818 --> 00:02:35,122 line:-2
Some tools are really good
at making things easy.


42
00:02:35,155 --> 00:02:37,424 line:-1
They lower the floor.


43
00:02:37,457 --> 00:02:39,593 line:-1
A microwave is a good example.


44
00:02:39.626 --> 00:02:43.297 line:-2 align:center
Most everyone can use one,
and it's great for lots of simple things.


45
00:02:43,330 --> 00:02:48,402 line:-2
However, if I need to make a fancy dinner,
a microwave isn't the right tool.


46
00:02:48,435 --> 00:02:51,238 line:-1
Other tools are focused on being powerful.


47
00:02:51,271 --> 00:02:56,643 line:-2
They raise the ceiling and enable you
to make things that are complex and rich.


48
00:02:56,677 --> 00:03:00,514 line:-2
A good example of this
is an industrial espresso machine.


49
00:03:00.547 --> 00:03:03.750 line:-2 align:center
While these machines enable you
to make incredible drinks,


50
00:03:03.784 --> 00:03:06.787 line:-2 align:center
they can be unapproachable,
hard to learn,


51
00:03:06,820 --> 00:03:11,825 line:-2
and difficult for doing something simple,
like making a basic cup of coffee.


52
00:03:11,859 --> 00:03:15,829 line:-2
SwiftUI strikes the balance
between these two types of tools.


53
00:03:15,863 --> 00:03:18,265 line:-1
It lowers the floor for simple tasks


54
00:03:18.298 --> 00:03:23.103 line:-2 align:center
and raises the ceiling
for creating new and novel things.


55
00:03:23,136 --> 00:03:27,140 line:-2
When writing SwiftUI,
you use a tool called Xcode.


56
00:03:27,174 --> 00:03:31,278 line:-2
In recent years, Xcode has
become even more useful for designers,


57
00:03:31.311 --> 00:03:36.283 line:-2 align:center
thanks to the addition of a visual canvas
that allows you to view and interact


58
00:03:36.316 --> 00:03:38.352 line:-1 align:center
with your designs in real time.


59
00:03:38.385 --> 00:03:43.257 line:-2 align:center
Here I am, changing a simple line
of text by adjusting the font size,


60
00:03:43,290 --> 00:03:46,627 line:-1
weight, string, and color.


61
00:03:46.660 --> 00:03:51.832 line:-2 align:center
Each time I make one of these changes,
it updates immediately on the canvas.


62
00:03:53.367 --> 00:03:55.169 line:-1 align:center
Equally helpful for designers


63
00:03:55.202 --> 00:03:58.539 line:-2 align:center
is the declarative way
that SwiftUI is written.


64
00:03:58,572 --> 00:04:02,643 line:-2
This language model builds
on intuition that many of us already have


65
00:04:02.676 --> 00:04:05.312 line:-1 align:center
for how interfaces are put together.


66
00:04:05.345 --> 00:04:09.783 line:-2 align:center
When writing SwiftUI,
you just declare what you want to create.


67
00:04:09,816 --> 00:04:14,188 line:-2
For common elements like a button,
we'll just write Button.


68
00:04:14,221 --> 00:04:17,324 line:-1
And for an image, we'll just write Image.


69
00:04:18,225 --> 00:04:22,262 line:-2
When it comes to styling these elements,
it's just as straightforward.


70
00:04:22.296 --> 00:04:25.933 line:-2 align:center
SwiftUI provides you with Modifiers
to change the appearance of things


71
00:04:25.966 --> 00:04:29.169 line:-2 align:center
just as you would
in any other design tool.


72
00:04:29.203 --> 00:04:33.507 line:-2 align:center
This could be adding effects
like drop shadows or borders,


73
00:04:33.540 --> 00:04:36.443 line:-2 align:center
changing format of text
though unique fonts,


74
00:04:36.476 --> 00:04:39.079 line:-1 align:center
or manipulating the layout of elements


75
00:04:39,112 --> 00:04:43,483 line:-2
by changing properties
like aspect ratios or paddings.


76
00:04:43.517 --> 00:04:47.454 line:-2 align:center
SwiftUI also provides easy access
to system controls,


77
00:04:47,487 --> 00:04:50,457 line:-1
like color pickers,


78
00:04:50,490 --> 00:04:53,460 line:-1
and behaviors, like push transitions.


79
00:04:55.529 --> 00:04:57.798 line:-2 align:center
These are built directly
into the framework,


80
00:04:57.831 --> 00:05:02.169 line:-2 align:center
giving you native functionality
right out of the box.


81
00:05:02.202 --> 00:05:06.073 line:-2 align:center
If you're using SwiftUI,
it also means you now have access


82
00:05:06,106 --> 00:05:09,142 line:-2
to the unique capabilities
of Apple hardware.


83
00:05:09,176 --> 00:05:11,645 line:-2
With a bit of work,
you can take advantage of things


84
00:05:11.678 --> 00:05:16.517 line:-2 align:center
like haptic feedback,
audio feeds, cameras, gestures,


85
00:05:16.550 --> 00:05:19.820 line:-1 align:center
and sensors like accelerometers.


86
00:05:19,853 --> 00:05:22,756 line:-2
You can also take advantage
of all the work


87
00:05:22.789 --> 00:05:25.926 line:-2 align:center
that's gone into the dozens
of Apple Frameworks .


88
00:05:25.959 --> 00:05:29.963 line:-2 align:center
That means, you can design
with dynamic maps using MapKit,


89
00:05:29.997 --> 00:05:33.166 line:-2 align:center
pull in live weather information
from WeatherKit,


90
00:05:33,200 --> 00:05:38,472 line:-2
or render objects
in augmented reality using RealityKit.


91
00:05:38.505 --> 00:05:41.675 line:-2 align:center
All of this can happens
across Apple platforms


92
00:05:41,708 --> 00:05:47,648 line:-2
because SwiftUI works with iPhone,
as well as iPad, Apple Watch, and Mac.


93
00:05:47,681 --> 00:05:50,484 line:-2
In most cases,
you can even share code too


94
00:05:50,517 --> 00:05:55,322 line:-2
and take of advantage of how
system elements adapt on their own.


95
00:05:55.355 --> 00:05:58.859 line:-2 align:center
Now that we've discussed SwiftUI
through the lens of a design tool.


96
00:05:58,892 --> 00:06:03,397 line:-2
Let's get specific about how
it helps you actually design better,


97
00:06:03.430 --> 00:06:07.601 line:-2 align:center
starting first with getting
the details of your designs right.


98
00:06:07.634 --> 00:06:10.404 line:-1 align:center
Modern interfaces are dynamic.


99
00:06:10.437 --> 00:06:13.674 line:-2 align:center
The products that we build
contain complex flows


100
00:06:13.707 --> 00:06:15.909 line:-1 align:center
and highly interactive elements.


101
00:06:15,943 --> 00:06:20,914 line:-2
As a result, there's so many
important decisions that we need to make.


102
00:06:20.948 --> 00:06:25.319 line:-2 align:center
SwiftUI helps by quickly surfacing
all of those important details


103
00:06:25.352 --> 00:06:27.354 line:-1 align:center
that need your attention,


104
00:06:27.387 --> 00:06:30.691 line:-2 align:center
for example,
how an image should look when it's loading


105
00:06:30.724 --> 00:06:33.427 line:-1 align:center
or how a button appears when it's pressed.


106
00:06:33.460 --> 00:06:34.895 line:-1 align:center
These are the types of things


107
00:06:34.928 --> 00:06:37.431 line:-1 align:center
that make a product feel complete.


108
00:06:37,464 --> 00:06:38,665 line:-1
They're easily hidden


109
00:06:38.699 --> 00:06:39.967 line:-1 align:center
in static design tools


110
00:06:40,000 --> 00:06:41,702 line:-1
but are quickly surfaced when working


111
00:06:41.735 --> 00:06:44.037 line:-1 align:center
in a dynamic tool like SwiftUI.


112
00:06:44.972 --> 00:06:49.676 line:-2 align:center
That's because SwiftUI makes it easy
to build your designs on device.


113
00:06:49,710 --> 00:06:53,747 line:-2
In doing this, you gain a more complete
understanding of what you're making.


114
00:06:53.780 --> 00:06:56.383 line:-1 align:center
Separate parts now interact together,


115
00:06:56.416 --> 00:06:59.686 line:-2 align:center
and you can begin to evaluate
the experience as a whole.


116
00:06:59.720 --> 00:07:03.123 line:-2 align:center
This process quickly reveals
what's working in your design


117
00:07:03,156 --> 00:07:06,260 line:-1
and what still needs attention or polish.


118
00:07:06,293 --> 00:07:09,263 line:-2
On Maps, we've found this
to be tremendously helpful.


119
00:07:09,963 --> 00:07:13,967 line:-2
When we first began designing
this year's watchOS App,


120
00:07:14.001 --> 00:07:15.802 line:-1 align:center
we thought it would be great to create


121
00:07:15.836 --> 00:07:19.139 line:-2 align:center
a more map-centric experience
for people's wrists.


122
00:07:19.173 --> 00:07:23.911 line:-2 align:center
To begin testing what that felt like,
we put a simple map view onto a watch.


123
00:07:23,944 --> 00:07:28,215 line:-2
Because we were testing on device,
we immediately discovered an issue:


124
00:07:28,248 --> 00:07:33,220 line:-2
The speed at which the Digital Crown
zoomed into the map was much too fast.


125
00:07:34,888 --> 00:07:39,560 line:-2
To improve this experience, we tested
multiple values in our SwiftUI prototype,


126
00:07:39,593 --> 00:07:42,296 line:-2
adjusting the sensitivity
of the Digital Crown


127
00:07:42.329 --> 00:07:45.465 line:-2 align:center
until we found a zoom speed
that felt natural.


128
00:07:45,499 --> 00:07:47,568 line:-1
Once we improved the zoom speed,


129
00:07:47,601 --> 00:07:49,837 line:-1
we started adding to the map,


130
00:07:49.870 --> 00:07:54.241 line:-2 align:center
first adding points of interest,
then UI controls,


131
00:07:54.274 --> 00:07:57.444 line:-2 align:center
and finally,
to better contextualize the map,


132
00:07:57,477 --> 00:08:00,514 line:-2
a walking radius
around your current location,


133
00:08:00.547 --> 00:08:02.516 line:-1 align:center
helping show what's around you


134
00:08:02.549 --> 00:08:05.552 line:-2 align:center
and roughly how long
it'd take to walk there.


135
00:08:05.586 --> 00:08:09.890 line:-2 align:center
We took this work back on device,
adding to our SwiftUI prototype.


136
00:08:09.923 --> 00:08:12.526 line:-2 align:center
This surfaced new things
that needed our attention,


137
00:08:12.559 --> 00:08:15.996 line:-2 align:center
like the interaction
of the walking radius.


138
00:08:16.029 --> 00:08:19.933 line:-2 align:center
Specifically, we felt like
the walking time could use more detail


139
00:08:19.967 --> 00:08:22.636 line:-1 align:center
as the Digital Crown was scrolled.


140
00:08:22.669 --> 00:08:26.139 line:-2 align:center
To explore what that could look like,
we prototyped several different options.


141
00:08:26,173 --> 00:08:29,009 line:-1
Our favorite was this ticker animation,


142
00:08:29,042 --> 00:08:32,546 line:-2
which we developed
as a separate SwiftUI prototype.


143
00:08:34.381 --> 00:08:37.651 line:-2 align:center
We took these separate prototypes
and integrated them together.


144
00:08:37,684 --> 00:08:40,454 line:-2
This led to even more questions
and surprised us


145
00:08:40,487 --> 00:08:45,893 line:-2
in just how much complexity was hidden
in such a seemingly simple design.


146
00:08:45,926 --> 00:08:50,063 line:-2
All of these details were initially opaque
when we began designing.


147
00:08:50.097 --> 00:08:54.001 line:-2 align:center
But the moment we started
making prototypes, they were obvious.


148
00:08:55.068 --> 00:08:58.338 line:-1 align:center
SwiftUI is built for modern interfaces.


149
00:08:58,372 --> 00:09:01,408 line:-2
It helps us
address specific design details


150
00:09:01.441 --> 00:09:04.845 line:-2 align:center
and experience how everything
works together as a whole.


151
00:09:04,878 --> 00:09:09,349 line:-2
Next, Philip will discuss one
of our favorite topics: interactions.


152
00:09:10,184 --> 00:09:14,321 line:-2
Philip: SwiftUI is a powerful tool
for designing interactions,


153
00:09:14.354 --> 00:09:19.359 line:-2 align:center
with first-class support for gestures,
transitions, and animations.


154
00:09:19.393 --> 00:09:25.032 line:-2 align:center
Everything feels native because you're
working in a truly native environment.


155
00:09:25,933 --> 00:09:29,770 line:-2
What designer doesn't like
a great looking animation?


156
00:09:29.803 --> 00:09:32.439 line:-1 align:center
Animations in SwiftUI are performant,


157
00:09:32,472 --> 00:09:35,709 line:-1
easy to use, and fully interruptible.


158
00:09:35,742 --> 00:09:39,112 line:-2
This is helpful
because interactions give you a sense


159
00:09:39.146 --> 00:09:43.517 line:-2 align:center
of how your designs feel,
not just how they look.


160
00:09:44.451 --> 00:09:47.020 line:-1 align:center
Often, interactions involve gestures,


161
00:09:47.054 --> 00:09:50.290 line:-1 align:center
like dragging, scrolling, or tapping.


162
00:09:50.324 --> 00:09:52.693 line:-1 align:center
But there are other input sources,


163
00:09:52.726 --> 00:09:56.063 line:-2 align:center
like hardware sensors,
you can use for interactions.


164
00:09:57,030 --> 00:09:58,765 line:-1
On the new Maps home screen,


165
00:09:58.799 --> 00:10:02.402 line:-2 align:center
when you tap the location button,
it activates a compass.


166
00:10:02,436 --> 00:10:04,805 line:-2
As you move around,
the compass displays


167
00:10:04.838 --> 00:10:07.574 line:-2 align:center
the cardinal direction
you're currently facing.


168
00:10:09.543 --> 00:10:12.813 line:-2 align:center
In order to get a sense
of how this interaction would feel,


169
00:10:12,846 --> 00:10:17,351 line:-2
we created a SwiftUI prototype
with a magnified compass


170
00:10:17,384 --> 00:10:22,022 line:-2
to test out transitions using
the watch's internal sensors.


171
00:10:23.290 --> 00:10:27.494 line:-2 align:center
It only took a few hours
to get this prototype working.


172
00:10:27,528 --> 00:10:31,231 line:-2
SwiftUI made it easy
to use the watch's real sensors,


173
00:10:31.265 --> 00:10:36.403 line:-2 align:center
which made the compass accurate and helped
us refine this small interaction.


174
00:10:37,271 --> 00:10:41,308 line:-2
Another interaction we wanted to create
was related to the search experience.


175
00:10:42.142 --> 00:10:45.445 line:-2 align:center
If you're searching for a location,
like a restaurant,


176
00:10:45.479 --> 00:10:49.483 line:-2 align:center
this new split screen shows a map
and list of results.


177
00:10:49,516 --> 00:10:52,719 line:-2
This design required
a unique scroll interaction


178
00:10:52.753 --> 00:10:56.223 line:-2 align:center
that would have been difficult
to achieve in other tools.


179
00:10:57,291 --> 00:11:02,462 line:-2
Here's the SwiftUI prototype we made
to get a feel for this interaction.


180
00:11:02.496 --> 00:11:05.365 line:-2 align:center
Our goal was to make it
immediately responsive


181
00:11:05.399 --> 00:11:08.302 line:-1 align:center
without being too sensitive.


182
00:11:08.335 --> 00:11:11.839 line:-2 align:center
The platter responds
to slow movements of the Crown,


183
00:11:11.872 --> 00:11:13.740 line:-1 align:center
and once a threshold is hit,


184
00:11:13.774 --> 00:11:16.710 line:-2 align:center
a new platter quickly transitions
into place,


185
00:11:16,743 --> 00:11:19,079 line:-1
along with a haptic response.


186
00:11:20.147 --> 00:11:23.884 line:-2 align:center
Fast movements, on the other hand,
use a tighter spring animation.


187
00:11:23,917 --> 00:11:26,653 line:-1
This helps the interaction feel snappy.


188
00:11:26,687 --> 00:11:29,823 line:-2
These adjustments create
an experience that feels right


189
00:11:29.857 --> 00:11:33.060 line:-2 align:center
when scrolling
at both slow and fast speeds.


190
00:11:33,994 --> 00:11:39,766 line:-2
SwiftUI provides a great out of the box
experience for many interactions.


191
00:11:39,800 --> 00:11:43,904 line:-2
And when you want something custom,
it's a highly capable tool,


192
00:11:43.937 --> 00:11:49.009 line:-2 align:center
giving you the power to fine-tune things
until they feel just right.


193
00:11:49.910 --> 00:11:53.847 line:-2 align:center
Design isn't just about how something
looks or feels though.


194
00:11:53,881 --> 00:11:56,416 line:-1
It's also about how it works.


195
00:11:56.450 --> 00:11:59.820 line:-2 align:center
One thing that's easy
to overlook in the design process


196
00:11:59.853 --> 00:12:03.490 line:-2 align:center
is testing your ideas
in realistic scenarios.


197
00:12:03.524 --> 00:12:08.595 line:-2 align:center
I know for myself, I can get carried away
designing for ideal scenarios,


198
00:12:08,629 --> 00:12:11,465 line:-1
using nice photos and short labels,


199
00:12:11.498 --> 00:12:16.403 line:-2 align:center
and in general, making sure my design
looks the best it possibly can.


200
00:12:17.337 --> 00:12:20.107 line:-1 align:center
However, as design work progresses,


201
00:12:20,140 --> 00:12:23,544 line:-2
it's important for me to find out
where my designs break,


202
00:12:23,577 --> 00:12:27,314 line:-2
testing them in the real world
to see how they hold up.


203
00:12:28.182 --> 00:12:32.352 line:-2 align:center
SwiftUI makes it easy to design
and evaluate your work


204
00:12:32.386 --> 00:12:35.055 line:-1 align:center
in realistic scenarios.


205
00:12:35.088 --> 00:12:38.091 line:-1 align:center
On Maps, we think about this a lot,


206
00:12:38.125 --> 00:12:43.864 line:-2 align:center
as people use our product in the outdoors
in a wide range of conditions.


207
00:12:43,897 --> 00:12:49,903 line:-2
SwiftUI enables us to take our designs
on the go and test them in real time.


208
00:12:51.104 --> 00:12:56.577 line:-2 align:center
For example, we pay attention to how glare
and sunlight impacts the readability


209
00:12:56.610 --> 00:12:58.812 line:-1 align:center
of the cartography and interface.


210
00:12:58,846 --> 00:13:02,983 line:-2
This often leads us
to adjust contrast levels across the app


211
00:13:03.016 --> 00:13:06.019 line:-1 align:center
to provide a more legible experience.


212
00:13:07.888 --> 00:13:12.860 line:-2 align:center
Another practice we find helpful
is to use real data in our designs.


213
00:13:12.893 --> 00:13:16.830 line:-2 align:center
In Maps, we consider the different types
of terrain and routes


214
00:13:16.864 --> 00:13:19.299 line:-2 align:center
people will encounter
when using our product.


215
00:13:19.333 --> 00:13:21.869 line:-2 align:center
If you're biking or walking
with the Watch app,


216
00:13:21,902 --> 00:13:26,540 line:-2
the new elevation graph gives an overview
of the elevation range for your route


217
00:13:26.573 --> 00:13:29.610 line:-1 align:center
and your progress in real time.


218
00:13:29.643 --> 00:13:32.379 line:-1 align:center
When we built this chart in SwiftUI,


219
00:13:32.412 --> 00:13:37.618 line:-2 align:center
we were able to import real data
from different types of routes.


220
00:13:37,651 --> 00:13:40,954 line:-2
For hilly routes,
like those found in San Francisco,


221
00:13:40.988 --> 00:13:44.591 line:-1 align:center
the chart worked just as we expected.


222
00:13:44,625 --> 00:13:48,161 line:-1
However, when we use data for flat routes,


223
00:13:48.195 --> 00:13:50.998 line:-2 align:center
like those you might encounter
in New York City,


224
00:13:51,031 --> 00:13:54,935 line:-2
we found that it looked much more extreme
than it actually was,


225
00:13:54,968 --> 00:13:57,404 line:-1
as if you were hiking a mountain.


226
00:13:57.437 --> 00:14:01.942 line:-2 align:center
We realized we needed to revisit the chart
so that it accurately reflected


227
00:14:01.975 --> 00:14:05.812 line:-2 align:center
a diversity of routes
and elevation profiles.


228
00:14:05.846 --> 00:14:09.516 line:-2 align:center
In this case, we needed
to adjust the scale of the Y-axis


229
00:14:09,550 --> 00:14:13,120 line:-2
so that flat routes appeared
more like you'd expect.


230
00:14:14.188 --> 00:14:19.993 line:-2 align:center
One more practice we often use is creating
one-off design tools using SwiftUI.


231
00:14:23,897 --> 00:14:26,767 line:-2
For the new walking radius
that Will shared earlier,


232
00:14:26.800 --> 00:14:30.704 line:-2 align:center
we needed a design
that rendered properly over the map,


233
00:14:30.737 --> 00:14:33.440 line:-1 align:center
which is a very dynamic surface.


234
00:14:33.473 --> 00:14:35.609 line:-1 align:center
We created this mini design tool


235
00:14:35,642 --> 00:14:40,714 line:-2
to better understand how the radius would
look over different map environments.


236
00:14:40,747 --> 00:14:42,916 line:-1
Here I am exploring styles


237
00:14:42.950 --> 00:14:47.421 line:-2 align:center
by changing things like line width,
opacity values, and blend modes.


238
00:14:48.422 --> 00:14:52.025 line:-2 align:center
Small parameterized tools
like this one allow us to scrub


239
00:14:52.059 --> 00:14:55.729 line:-2 align:center
through way more variations
than we'd be able to do efficiently


240
00:14:55.762 --> 00:14:57.631 line:-1 align:center
in a static design tool.


241
00:14:57,664 --> 00:15:01,768 line:-2
They're easy to build in SwiftUI
and can help answer specific questions


242
00:15:01,802 --> 00:15:03,770 line:-1
or solve complex problems.


243
00:15:04,838 --> 00:15:08,709 line:-2
SwiftUI helps you design
in real-world scenarios


244
00:15:08.742 --> 00:15:12.246 line:-2 align:center
with diverse data sets
and a holistic understanding


245
00:15:12,279 --> 00:15:14,414 line:-1
of different environments.


246
00:15:14,448 --> 00:15:18,118 line:-2
By testing your designs,
you're able to better account


247
00:15:18.151 --> 00:15:22.556 line:-2 align:center
for how they will perform
in people's day-to-day lives.


248
00:15:22,589 --> 00:15:26,293 line:-2
Another way to test ideas
is to share them with others.


249
00:15:26.326 --> 00:15:30.664 line:-2 align:center
SwiftUI is a great tool
for presenting your work.


250
00:15:30.697 --> 00:15:33.467 line:-2 align:center
There are many great ways
to share designs,


251
00:15:33.500 --> 00:15:39.239 line:-2 align:center
but on device demos are uniquely effective
at bringing your ideas to life.


252
00:15:40.407 --> 00:15:44.511 line:-2 align:center
When people can hold a demo
of your work in their hands,


253
00:15:44.545 --> 00:15:47.047 line:-1 align:center
designs explain themselves.


254
00:15:47,080 --> 00:15:50,350 line:-2
This helps build consensus
and can save everyone


255
00:15:50.384 --> 00:15:52.553 line:-1 align:center
the hassle of more meetings.


256
00:15:53,420 --> 00:15:54,855 line:-1
For our work this year,


257
00:15:54,888 --> 00:15:58,792 line:-2
we prioritized building demos
and brought them to design reviews


258
00:15:58.825 --> 00:16:01.461 line:-1 align:center
as often as we could.


259
00:16:01.495 --> 00:16:07.267 line:-2 align:center
In these reviews, we put multiple demos
into a single SwiftUI app.


260
00:16:07.301 --> 00:16:09.770 line:-1 align:center
This included ones we shared earlier,


261
00:16:09.803 --> 00:16:12.906 line:-2 align:center
like the walking radius
and search results,


262
00:16:12,940 --> 00:16:17,444 line:-2
and many others, like the cards
that appear with business information.


263
00:16:17.477 --> 00:16:19.947 line:-2 align:center
Everyone was excited
to play with the demos


264
00:16:19,980 --> 00:16:22,649 line:-1
and provide feedback about the experience.


265
00:16:22,683 --> 00:16:26,019 line:-2
Instead of spending time
explaining the designs,


266
00:16:26,053 --> 00:16:29,623 line:-2
we were able to spend more
of our time evaluating them.


267
00:16:30,757 --> 00:16:34,995 line:-2
The demos you build with SwiftUI
can de-risk a project


268
00:16:35.028 --> 00:16:39.867 line:-2 align:center
and prevent confusion,
both for yourself and for your team.


269
00:16:39.900 --> 00:16:42.903 line:-2 align:center
At the end of the day,
no slide deck in the world


270
00:16:42,936 --> 00:16:46,573 line:-1
can compare with one spectacular demo.


271
00:16:47,407 --> 00:16:51,144 line:-2
These are some of the benefits
we've discovered using SwiftUI.


272
00:16:51.178 --> 00:16:55.482 line:-2 align:center
We encourage you to think
of SwiftUI as a design tool,


273
00:16:55,516 --> 00:16:59,353 line:-2
one that helps you surface
important design decisions,


274
00:16:59,386 --> 00:17:02,155 line:-1
enables you to design how things feel,


275
00:17:02.189 --> 00:17:04.725 line:-1 align:center
get realistic about how they all work,


276
00:17:04.758 --> 00:17:08.629 line:-2 align:center
and share your designs with others
using on device demos.


277
00:17:08,662 --> 00:17:14,635 line:-2
It was these benefits that helped us
design the new Maps app in watchOS 10.


278
00:17:16.003 --> 00:17:20.240 line:-2 align:center
The tools we use for our creative work
have a tremendous impact


279
00:17:20.274 --> 00:17:22.142 line:-1 align:center
on the end experience.


280
00:17:22.176 --> 00:17:26.547 line:-2 align:center
By using SwiftUI in your design process,
we think you'll find that it leads


281
00:17:26,580 --> 00:17:31,618 line:-2
to a more considered, complete,
and well-crafted final product.


282
00:17:31,652 --> 00:17:35,522 line:-2
There is also one more amazing benefit
of using SwiftUI


283
00:17:35,556 --> 00:17:37,891 line:-1
that we haven't spoken about yet.


284
00:17:37,925 --> 00:17:42,596 line:-2
When you use SwiftUI,
you're not just creating a prototype.


285
00:17:42,629 --> 00:17:44,698 line:-1
You're making an app.


286
00:17:44,731 --> 00:17:49,603 line:-2
And that means,
you can ship what you design.


287
00:17:49.636 --> 00:17:55.108 line:-2 align:center
The app that you're creating
can be more than just a design artifact.


288
00:17:55,142 --> 00:17:59,012 line:-2
Because you're working with the same
materials an engineer uses,


289
00:17:59.046 --> 00:18:03.784 line:-2 align:center
you can build and submit apps to
the App Store and share them with others.


290
00:18:04,751 --> 00:18:09,022 line:-2
We hope you enjoyed learning
how we've used SwiftUI


291
00:18:09.056 --> 00:18:11.592 line:-1 align:center
as designers on the Maps team.


292
00:18:11,625 --> 00:18:14,528 line:-2
If you're interested
in learning more about SwiftUI,


293
00:18:14.561 --> 00:18:17.965 line:-2 align:center
there's a lot of resources
for you to discover.


294
00:18:17,998 --> 00:18:21,301 line:-4
We'd encourage watching
"Introduction to SwiftUI"


295
00:18:21.335 --> 00:18:23.203 line:-3 align:center
if you're just getting started.


296
00:18:24,805 --> 00:18:26,473 line:-1
Thank you for joining today.


297
00:18:26,507 --> 00:18:29,910 align:center
♪ ♪

