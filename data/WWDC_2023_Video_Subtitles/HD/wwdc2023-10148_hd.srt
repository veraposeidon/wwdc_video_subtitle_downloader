2
00:00:00.067 --> 00:00:04.071 line:-1 position:50%
â™ª Mellow instrumental hip-hop â™ª


3
00:00:04,071 --> 00:00:10,377 line:0 position:90% size:2%
â™ª


4
00:00:10.377 --> 00:00:12.613 line:-1 position:50%
Curt Clifton: Hello and thanks
for joining us.


5
00:00:12.613 --> 00:00:16.149 line:-1 position:50%
I'm Curt and I'm an engineer
on the SwiftUI team.


6
00:00:16.149 --> 00:00:17.084 line:-1 position:50%
Jeff Robertson: And I'm Jeff.


7
00:00:17.084 --> 00:00:19.253 line:-1 position:50%
I'm also an engineer
on the SwiftUI team.


8
00:00:19.253 --> 00:00:23.590 line:-1 position:50%
We're happy to have the chance
to share what's new in SwiftUI.


9
00:00:23.590 --> 00:00:26.927 line:-1 position:50%
Curt: You can now use SwiftUI
in even more places,


10
00:00:26.927 --> 00:00:29.997 line:-1 position:50%
including a brand-new platform!


11
00:00:29.997 --> 00:00:34.067 line:-1 position:50%
New data flow types dramatically
simplify modeling your domain,


12
00:00:34.067 --> 00:00:36.937 line:-1 position:50%
providing more power
than ever before.


13
00:00:36.937 --> 00:00:39.373 line:-1 position:50%
The Inspector,
plus Table improvements,


14
00:00:39.373 --> 00:00:42.576 line:-1 position:50%
provide great ways
to display your data.


15
00:00:42.576 --> 00:00:45.178 line:-1 position:50%
The team amped up
our animation APIs,


16
00:00:45.178 --> 00:00:48.181 line:-1 position:50%
letting you create even more
beautiful experiences


17
00:00:48.181 --> 00:00:50.684 line:-1 position:50%
for the people using your apps.


18
00:00:50.684 --> 00:00:53.120 line:-1 position:50%
Across the framework,
we've enhanced your ability


19
00:00:53.120 --> 00:00:55.055 line:-1 position:50%
to provide great interactions,


20
00:00:55.055 --> 00:00:57.391 line:-1 position:50%
with powerful scroll view
improvements,


21
00:00:57.391 --> 00:00:59.960 line:-1 position:50%
refinements to Focus
and keyboard input,


22
00:00:59.960 --> 00:01:04.631 line:-1 position:50%
and deeper customization of
controls like buttons and menus.


23
00:01:04.631 --> 00:01:07.534 line:-1 position:50%
I'm excited to tell you
about some great new places


24
00:01:07.534 --> 00:01:10.570 line:-1 position:50%
to use SwiftUI.


25
00:01:10.570 --> 00:01:12.839 line:-1 position:50%
From the headset and watchOS 10


26
00:01:12.839 --> 00:01:15.475 line:-1 position:50%
to new widgets
and cross-framework integration,


27
00:01:15.475 --> 00:01:18.312 line:-1 position:50%
SwiftUI can help you
create experiences


28
00:01:18.312 --> 00:01:22.182 line:-1 position:50%
that delight the people
who use your apps.


29
00:01:22.182 --> 00:01:26.086 line:-1 position:50%
Spatial computing brings SwiftUI
into a bold new future


30
00:01:26.086 --> 00:01:29.723 line:-1 position:50%
with all-new 3D capabilities
like volumes;


31
00:01:29.723 --> 00:01:32.526 line:-1 position:50%
rich experiences
with immersive spaces;


32
00:01:32.526 --> 00:01:35.128 line:-1 position:50%
new 3D gestures,
effects, and layout;


33
00:01:35.128 --> 00:01:38.565 line:-1 position:50%
and deep integration
with RealityKit.


34
00:01:38.565 --> 00:01:41.902 line:-1 position:50%
From core pieces like the
Home View in Control Center


35
00:01:41.902 --> 00:01:44.571 line:-1 position:50%
to familiar apps like TV,


36
00:01:44.571 --> 00:01:45.706 line:-1 position:50%
Safari,


37
00:01:45.706 --> 00:01:47.140 line:-1 position:50%
and Freeform;


38
00:01:47.140 --> 00:01:51.278 line:-1 position:50%
to all-new environments like
immersive rehearsals in Keynote;


39
00:01:51.278 --> 00:01:55.816 line:-1 position:50%
SwiftUI is at the heart
of these user experiences.


40
00:01:55,816 --> 00:01:58,185 position:50%
On this new platform,
construct windows


41
00:01:58,185 --> 00:02:01,355 position:50%
using familiar scene types
like WindowGroup.


42
00:02:01,355 --> 00:02:04,024 position:50%
WindowGroup scenes
render as 2D windows,


43
00:02:04,024 --> 00:02:08,662 position:50%
with delightful
depth-sensitive 3D controls.


44
00:02:08.662 --> 00:02:12.532 line:-1 position:50%
Within a window, choose one
of the usual SwiftUI containers,


45
00:02:12.532 --> 00:02:17.504 line:-1 position:50%
like NavigationSplitView
or TabView.


46
00:02:17.504 --> 00:02:20.073 line:-1 position:50%
Within these containers,
you can use all


47
00:02:20.073 --> 00:02:24.845 line:-1 position:50%
the usual SwiftUI controls just
like on the other platforms.


48
00:02:24,845 --> 00:02:26,446 position:50%
For even more depth,


49
00:02:26,446 --> 00:02:29,583 position:50%
apply the volumetric style
to your scene.


50
00:02:29,583 --> 00:02:31,952 position:50%
Volumes display
3D experiences --


51
00:02:31,952 --> 00:02:34,054 position:50%
like board games
or architectural models --


52
00:02:34,054 --> 00:02:35,989 position:50%
in a bounded space.


53
00:02:35,989 --> 00:02:38,425 position:50%
They display
alongside other apps.


54
00:02:38,425 --> 00:02:41,294 position:50%
People can use your content
while they jot down thoughts


55
00:02:41,294 --> 00:02:44,698 position:50%
in Notes or update slides
in Keynote.


56
00:02:44.698 --> 00:02:49.936 line:-1 position:50%
Fill a volume with
a static model using Model3D.


57
00:02:49.936 --> 00:02:53.473 line:-1 position:50%
For dynamic, interactive models
with lighting effects and more,


58
00:02:53.473 --> 00:02:56.109 line:-1 position:50%
use the new RealityView.


59
00:02:56.109 --> 00:03:00.981 line:-1 position:50%
To go truly all in, add
ImmersiveSpaces to your app.


60
00:03:00,981 --> 00:03:04,818 position:50%
The new ImmersiveSpace scene
type lets you define immersive,


61
00:03:04,818 --> 00:03:07,120 position:50%
spatial experiences,
whether embedded


62
00:03:07,120 --> 00:03:09,756 position:50%
in your surroundings
or with full immersion.


63
00:03:09,756 --> 00:03:12,225 position:50%
The system whisks
other apps away


64
00:03:12,225 --> 00:03:15,829 position:50%
letting people dive into
the world you've created.


65
00:03:15.829 --> 00:03:19.132 line:-1 position:50%
Use an ImmersiveSpace
with the mixed immersion style


66
00:03:19.132 --> 00:03:21.468 line:-1 position:50%
to connect your app
to the real world,


67
00:03:21.468 --> 00:03:24.504 line:-1 position:50%
combining your content
with people's surroundings.


68
00:03:24.504 --> 00:03:27.307 line:-1 position:50%
Anchor elements of your app
to tables and surfaces,


69
00:03:27.307 --> 00:03:29.676 line:-1 position:50%
and augment and enrich
the real world


70
00:03:29.676 --> 00:03:32.279 line:-1 position:50%
with virtual objects
and effects.


71
00:03:32.279 --> 00:03:37.184 line:-1 position:50%
Go further with
the full immersion style.


72
00:03:37.184 --> 00:03:40.320 line:-1 position:50%
Your app takes
complete control.


73
00:03:40.320 --> 00:03:42.489 line:-1 position:50%
Build these connected
and immersive experiences


74
00:03:42.489 --> 00:03:45.492 line:-1 position:50%
using the same Model3D
and RealityView


75
00:03:45.492 --> 00:03:47.828 line:-1 position:50%
that work in volumes.


76
00:03:47.828 --> 00:03:49.629 line:-1 position:50%
SwiftUI on this new platform


77
00:03:49.629 --> 00:03:52.566 line:-1 position:50%
lets you create
magical experiences.


78
00:03:52,566 --> 00:03:55,402 position:50%
Watch "Meet SwiftUI
for spatial computing"


79
00:03:55,402 --> 00:03:59,739 position:50%
to continue exploring
this great combination.


80
00:03:59.739 --> 00:04:03.210 line:-1 position:50%
SwiftUI is at home building
a room-filling experience,


81
00:04:03.210 --> 00:04:05.045 line:-1 position:50%
but it can also
build experiences


82
00:04:05.045 --> 00:04:08.582 line:-1 position:50%
for Apple's most
portable displays.


83
00:04:08.582 --> 00:04:11.818 line:-1 position:50%
watchOS 10 delivers
a redesigned user experience


84
00:04:11.818 --> 00:04:14.254 line:-1 position:50%
that surfaces
timely information,


85
00:04:14.254 --> 00:04:16.957 line:-1 position:50%
conveys focused content
at a glance,


86
00:04:16.957 --> 00:04:20.660 line:-1 position:50%
and celebrates the shape
and fidelity of the display.


87
00:04:20.660 --> 00:04:24.030 line:-1 position:50%
We've updated apps across
the platform to take advantage


88
00:04:24.030 --> 00:04:27.767 line:-1 position:50%
of this beautiful full-screen
color and imagery.


89
00:04:27,767 --> 00:04:31,838 position:50%
At the root of these designs are
several existing SwiftUI views,


90
00:04:31,838 --> 00:04:34,875 position:50%
newly empowered
for watchOS 10.


91
00:04:34,875 --> 00:04:37,744 position:50%
NavigationSplitView
and NavigationStack


92
00:04:37,744 --> 00:04:40,447 position:50%
get beautiful new transitions.


93
00:04:40,447 --> 00:04:43,250 position:50%
TabView gets a new
vertical paging style


94
00:04:43,250 --> 00:04:45,952 position:50%
driven by the Digital Crown.


95
00:04:45.952 --> 00:04:48.755 line:-1 position:50%
SwiftUI introduces
some new API to help you


96
00:04:48.755 --> 00:04:53.026 line:-1 position:50%
bring this full-color flair
to your Apple Watch apps too.


97
00:04:53.026 --> 00:04:55.595 line:-1 position:50%
The new containerBackground
modifier


98
00:04:55.595 --> 00:04:58.231 line:-1 position:50%
lets you configure
these subtle background washes


99
00:04:58.231 --> 00:05:01.134 line:-1 position:50%
that animate when you push
and pop content.


100
00:05:01.134 --> 00:05:03.703 line:-1 position:50%
You can also configure
backgrounds for tab views


101
00:05:03.703 --> 00:05:05.872 line:-1 position:50%
on watchOS.


102
00:05:05.872 --> 00:05:09.042 line:-1 position:50%
And new multiplatform
toolbar placements --


103
00:05:09.042 --> 00:05:11.444 line:-1 position:50%
topBarLeading
and topBarTrailing,


104
00:05:11.444 --> 00:05:13.346 line:-1 position:50%
along with the
existing bottomBar --


105
00:05:13.346 --> 00:05:16.349 line:-1 position:50%
let you perfectly place
these small detail views


106
00:05:16.349 --> 00:05:19.085 line:-1 position:50%
in your Apple Watch apps.


107
00:05:19.085 --> 00:05:21.221 line:-1 position:50%
Besides these new additions,
we're pleased


108
00:05:21.221 --> 00:05:25.325 line:-1 position:50%
to bring some existing API
to watchOS for the first time,


109
00:05:25.325 --> 00:05:30.664 line:-1 position:50%
including DatePicker
and selection in Lists.


110
00:05:30.664 --> 00:05:33.400 line:-1 position:50%
Now is a great time to polish
your Apple Watch apps


111
00:05:33.400 --> 00:05:35.602 line:-1 position:50%
with these new capabilities.


112
00:05:35.602 --> 00:05:37.938 line:-1 position:50%
And if you don't have
an Apple Watch app yet,


113
00:05:37.938 --> 00:05:40.173 line:-1 position:50%
it's a great time to begin.


114
00:05:40,173 --> 00:05:43,009 position:50%
Learn how design and engineering
come together to create


115
00:05:43,009 --> 00:05:47,514 position:50%
these experiences in "Design
and build apps for watchOS 10."


116
00:05:47,514 --> 00:05:50,116 position:50%
Then apply these ideas
to your work


117
00:05:50,116 --> 00:05:54,421 position:50%
with "Update your app
for watchOS 10."


118
00:05:54.421 --> 00:05:57.791 line:-1 position:50%
Widgets for the Smart Stack
on watchOS 10 let the people


119
00:05:57.791 --> 00:06:01.661 line:-1 position:50%
using your app see
their information on the go.


120
00:06:01.661 --> 00:06:05.465 line:-1 position:50%
SwiftUI is core to widgets
wherever they appear,


121
00:06:05.465 --> 00:06:08.068 line:-1 position:50%
like these other new places.


122
00:06:08.068 --> 00:06:11.071 line:-1 position:50%
Widgets on the Lock Screen
on iPadOS 17


123
00:06:11.071 --> 00:06:15.475 line:-1 position:50%
are a great complement
to widgets on the Home Screen.


124
00:06:15.475 --> 00:06:19.412 line:-1 position:50%
Big, bold widgets shine on
the iPhone Always-On display


125
00:06:19.412 --> 00:06:21.815 line:-1 position:50%
with Standby Mode.


126
00:06:21.815 --> 00:06:24.451 line:-1 position:50%
And desktop widgets
on macOS Sonoma


127
00:06:24.451 --> 00:06:27.687 line:-1 position:50%
keep people up to date
during their day-to-day.


128
00:06:27.687 --> 00:06:29.756 line:-1 position:50%
Widgets have found
their way to new places,


129
00:06:29.756 --> 00:06:32.158 line:-1 position:50%
and the team has also
taught them another trick.


130
00:06:32.158 --> 00:06:33.960 line:-1 position:50%
I'm thrilled to share
that widgets


131
00:06:33.960 --> 00:06:37.330 line:-1 position:50%
now support
interactive controls.


132
00:06:37.330 --> 00:06:40.333 line:-1 position:50%
Toggle and Button in Widgets
can now activate code


133
00:06:40.333 --> 00:06:44.337 line:-1 position:50%
defined in your own app bundle
using App Intents.


134
00:06:44.337 --> 00:06:46.106 line:-1 position:50%
And you can animate
your widgets


135
00:06:46.106 --> 00:06:50.644 line:-1 position:50%
using SwiftUI transition
and animation modifiers.


136
00:06:50,644 --> 00:06:53,913 position:50%
To get started with these great
new capabilities, check out


137
00:06:53,913 --> 00:06:58,818 position:50%
"Bring widgets to new places"
and "Bring widgets to life."


138
00:06:58.818 --> 00:07:02.455 line:-1 position:50%
To develop and refine your new
interactive animated widgets,


139
00:07:02.455 --> 00:07:05.725 line:-1 position:50%
you'll love the power
of Xcode Previews.


140
00:07:05.725 --> 00:07:08.795 line:-1 position:50%
Previews leverage macros
in Swift 5.9


141
00:07:08.795 --> 00:07:12.032 line:-1 position:50%
to provide
an elegant new syntax.


142
00:07:12.032 --> 00:07:16.236 line:-1 position:50%
Declare and configure a Preview,
add a widget type,


143
00:07:16.236 --> 00:07:19.205 line:-1 position:50%
and define a timeline
for testing.


144
00:07:19.205 --> 00:07:21.975 line:-1 position:50%
Xcode Previews shows
the current widget state


145
00:07:21.975 --> 00:07:26.179 line:-1 position:50%
and a timeline that lets you see
the animations between states.


146
00:07:26.179 --> 00:07:29.349 line:-1 position:50%
Of course, the new previews work
with regular SwiftUI views


147
00:07:29.349 --> 00:07:31.618 line:-1 position:50%
and apps as well.


148
00:07:31.618 --> 00:07:34.287 line:-1 position:50%
And you can now interact
with previews of Mac apps


149
00:07:34.287 --> 00:07:38.091 line:-1 position:50%
right inside Xcode.


150
00:07:38,091 --> 00:07:39,259 position:50%
Check out the talk


151
00:07:39,259 --> 00:07:41,961 position:50%
"Build programmatic UI
with Xcode Previews"


152
00:07:41,961 --> 00:07:44,831 position:50%
to learn how to leverage these
terrific new tools


153
00:07:44,831 --> 00:07:48,468 position:50%
to accelerate your app
and widget development.


154
00:07:48,468 --> 00:07:51,037 position:50%
Besides the macros
that power previews,


155
00:07:51,037 --> 00:07:55,308 position:50%
Swift 5.9 also brings a host
of other improvements.


156
00:07:55,308 --> 00:07:57,811 position:50%
Get an overview of all
that's fresh in Swift


157
00:07:57,811 --> 00:08:02,015 position:50%
by queueing up
"What's new in Swift."


158
00:08:02.015 --> 00:08:04.551 line:-1 position:50%
Another way SwiftUI
comes to new places


159
00:08:04.551 --> 00:08:07.153 line:-1 position:50%
is through SwiftUI-specific
extensions


160
00:08:07.153 --> 00:08:09.689 line:-1 position:50%
to other Apple frameworks.


161
00:08:09.689 --> 00:08:12.592 line:-1 position:50%
Several frameworks bring
new or improved support,


162
00:08:12.592 --> 00:08:14.060 line:-1 position:50%
and I'd like to highlight a few


163
00:08:14.060 --> 00:08:17.097 line:-1 position:50%
that I think are
particularly exciting.


164
00:08:17.097 --> 00:08:19.899 line:-1 position:50%
MapKit delivers a massive update
that gives you


165
00:08:19.899 --> 00:08:22.469 line:-1 position:50%
the power of Apple's marvelous
mapping framework


166
00:08:22.469 --> 00:08:24.871 line:-1 position:50%
right in your SwiftUI code.


167
00:08:24.871 --> 00:08:29.642 line:-1 position:50%
Simply import SwiftUI and MapKit
to use these great features.


168
00:08:29.642 --> 00:08:31.344 line:-1 position:50%
Put a map in your view.


169
00:08:31.344 --> 00:08:35.281 line:-1 position:50%
Add custom markers, polylines,
and the user's location.


170
00:08:35.281 --> 00:08:38.184 line:-1 position:50%
Configure
the available controls.


171
00:08:38,184 --> 00:08:40,053 position:50%
To learn all about
adding amazing maps


172
00:08:40,053 --> 00:08:41,888 position:50%
to your SwiftUI app,


173
00:08:41,888 --> 00:08:45,959 position:50%
check out the talk
"Meet MapKit for SwiftUI."


174
00:08:45.959 --> 00:08:48.928 line:-1 position:50%
In its sophomore season,
Swift Charts brings a slew


175
00:08:48.928 --> 00:08:53.266 line:-1 position:50%
of great improvements,
including scrolling charts,


176
00:08:53.266 --> 00:08:56.202 line:-1 position:50%
built-in support for selection,


177
00:08:56.202 --> 00:08:58.838 line:-1 position:50%
and something I know
folks have been hungry for:


178
00:08:58.838 --> 00:09:03.009 line:-1 position:50%
donut and pie charts
with the new SectorMark.


179
00:09:03,009 --> 00:09:05,779 position:50%
To dig into these new features,
check out the talk


180
00:09:05,779 --> 00:09:10,417 position:50%
"Explore pie charts and
interactivity in Swift Charts."


181
00:09:10.417 --> 00:09:12.185 line:-1 position:50%
For building
experiences that attract


182
00:09:12.185 --> 00:09:15.722 line:-1 position:50%
and retain loyal customers,
you'll love the ease and power


183
00:09:15.722 --> 00:09:19.459 line:-1 position:50%
of the new in-app purchase
and subscription stores.


184
00:09:19.459 --> 00:09:21.694 line:-1 position:50%
Present a
subscription store view


185
00:09:21.694 --> 00:09:24.230 line:-1 position:50%
with your custom
marketing content.


186
00:09:24.230 --> 00:09:25.999 line:-1 position:50%
Configure a full-bleed
background


187
00:09:25.999 --> 00:09:27.634 line:-1 position:50%
to match your branding


188
00:09:27.634 --> 00:09:31.571 line:-1 position:50%
and choose from
a variety of control options.


189
00:09:31,571 --> 00:09:34,174 position:50%
Watch "Meet StoreKit
for SwiftUI"


190
00:09:34,174 --> 00:09:38,044 position:50%
to power up your in-app
marketing game.


191
00:09:38.044 --> 00:09:41.448 line:-1 position:50%
From new platforms and widgets,
to cross-framework integration


192
00:09:41.448 --> 00:09:45.218 line:-1 position:50%
and the beauty of watchOS,
SwiftUI continues to push


193
00:09:45.218 --> 00:09:48.188 line:-1 position:50%
the Apple developer
experience forward.


194
00:09:48.188 --> 00:09:50.089 line:-1 position:50%
It's exciting to see
all the new places


195
00:09:50.089 --> 00:09:52.025 line:-1 position:50%
to use SwiftUI, Jeff.


196
00:09:52.025 --> 00:09:52.992 line:-1 position:50%
Jeff: Certainly!


197
00:09:52.992 --> 00:09:55.261 line:-1 position:50%
And we also have a lot
of great improvements


198
00:09:55.261 --> 00:09:57.831 line:-1 position:50%
that work across
all our platforms.


199
00:09:57.831 --> 00:09:59.432 line:-1 position:50%
Curt: Indeed!


200
00:09:59.432 --> 00:10:01.668 line:-1 position:50%
Jeff: We should work on an app
that uses these improvements.


201
00:10:01.668 --> 00:10:02.769 line:-1 position:50%
Curt: Oh, agreed!


202
00:10:02.769 --> 00:10:05.438 line:-1 position:50%
Have you thought any more
about my idea?


203
00:10:05.438 --> 00:10:07.340 line:-1 position:50%
Jeff: The one about dogs?
Curt: Yeah!


204
00:10:07.340 --> 00:10:11.444 line:-1 position:50%
It's like bird-watching
but for dogs!


205
00:10:11.444 --> 00:10:14.247 line:-1 position:50%
Jeff: Do you really think people
want a dog-watching app?


206
00:10:14.247 --> 00:10:18.618 line:-1 position:50%
Curt: Oh, certainly! The pitch
deck practically writes itself.


207
00:10:18.618 --> 00:10:20.687 line:-1 position:50%
Jeff: With our million-dollar
idea in place,


208
00:10:20.687 --> 00:10:23.022 line:-1 position:50%
it's time to start
building out our app.


209
00:10:23.022 --> 00:10:26.359 line:-1 position:50%
Since every great app begins
with a great data model,


210
00:10:26.359 --> 00:10:29.462 line:-1 position:50%
let's start by looking at
the pack of great new features


211
00:10:29.462 --> 00:10:32.599 line:-1 position:50%
SwiftUI has for working
with our app's data.


212
00:10:32.599 --> 00:10:35.502 line:-1 position:50%
One of my favorite things
about SwiftUI is how it lets me


213
00:10:35.502 --> 00:10:39.172 line:-1 position:50%
define my UI as a function
of my app's state.


214
00:10:39.172 --> 00:10:41.107 line:-1 position:50%
I'm happy to share
the biggest upgrade


215
00:10:41.107 --> 00:10:44.177 line:-1 position:50%
to how you define your model
types with SwiftUI:


216
00:10:44.177 --> 00:10:46.346 line:-1 position:50%
the new Observable macro.


217
00:10:46.346 --> 00:10:49.782 line:-1 position:50%
Observable models let you use
familiar SwiftUI patterns


218
00:10:49.782 --> 00:10:51.084 line:-1 position:50%
for data flow,


219
00:10:51.084 --> 00:10:55.455 line:-1 position:50%
while also making your code
more concise and performant.


220
00:10:55.455 --> 00:10:58.157 line:-1 position:50%
Here's the model class
I've set up to store data


221
00:10:58.157 --> 00:11:01.461 line:-1 position:50%
representing dogs I've met
while out and about.


222
00:11:01.461 --> 00:11:05.598 line:-1 position:50%
To make this type an Observable,
I'll add the macro to my type.


223
00:11:05.598 --> 00:11:07.300 line:-1 position:50%
That's all I need to do.


224
00:11:07.300 --> 00:11:08.768 line:-1 position:50%
Unlike ObservableObject,


225
00:11:08.768 --> 00:11:12.405 line:-1 position:50%
there's no need to mark
properties as Published.


226
00:11:12.405 --> 00:11:14.440 line:-1 position:50%
Observable models
easily integrate


227
00:11:14.440 --> 00:11:18.077 line:-1 position:50%
into the existing SwiftUI
mechanisms for data flow.


228
00:11:18.077 --> 00:11:21.114 line:-1 position:50%
Let's use my DogCard view
as an example.


229
00:11:21.114 --> 00:11:23.316 line:-1 position:50%
When using an Observable
in your View,


230
00:11:23.316 --> 00:11:26.686 line:-1 position:50%
SwiftUI will automatically
establish dependencies


231
00:11:26.686 --> 00:11:28.621 line:-1 position:50%
on properties you read.


232
00:11:28.621 --> 00:11:31.524 line:-1 position:50%
There's also no need to use a
property wrapper when reading,


233
00:11:31.524 --> 00:11:34.594 line:-1 position:50%
so your view code is cleaner.


234
00:11:34.594 --> 00:11:37.096 line:-1 position:50%
And this view is reading
the isFavorite property,


235
00:11:37.096 --> 00:11:40.233 line:-1 position:50%
so when that changes,
it will get reevaluated.


236
00:11:40.233 --> 00:11:43.903 line:-1 position:50%
Invalidation only happens
for properties which are read,


237
00:11:43.903 --> 00:11:46.573 line:-1 position:50%
so you can pass your model
through intermediate views


238
00:11:46.573 --> 00:11:50.743 line:-1 position:50%
without triggering
any unnecessary updates.


239
00:11:50.743 --> 00:11:54.213 line:-1 position:50%
SwiftUI includes several tools
for defining your state


240
00:11:54.213 --> 00:11:56.482 line:-1 position:50%
and its relationship
to your views,


241
00:11:56.482 --> 00:12:01.087 line:-1 position:50%
several of which are designed
for use with ObservableObject.


242
00:12:01.087 --> 00:12:04.958 line:-1 position:50%
When using Observable,
this is becomes even simpler


243
00:12:04.958 --> 00:12:07.360 line:-1 position:50%
since it's designed
to work directly


244
00:12:07.360 --> 00:12:11.631 line:-1 position:50%
with the State and Environment
dynamic properties.


245
00:12:11.631 --> 00:12:14.233 line:-1 position:50%
In addition to modeling
read-only values,


246
00:12:14.233 --> 00:12:18.538 line:-1 position:50%
Observables are also a natural
fit to represent mutable state,


247
00:12:18.538 --> 00:12:21.841 line:-1 position:50%
like on this form
for a new dog sighting.


248
00:12:21.841 --> 00:12:25.111 line:-1 position:50%
The model is defined using
the State dynamic property,


249
00:12:25.111 --> 00:12:28.648 line:-1 position:50%
and I'm passing bindings to its
properties to the form elements


250
00:12:28.648 --> 00:12:32.251 line:-1 position:50%
responsible for editing
that property.


251
00:12:32.251 --> 00:12:35.321 line:-1 position:50%
Lastly, Observable types
integrate seamlessly


252
00:12:35.321 --> 00:12:37.056 line:-1 position:50%
into the environment.


253
00:12:37.056 --> 00:12:39.058 line:-1 position:50%
Since views throughout
our app want a way


254
00:12:39.058 --> 00:12:42.261 line:-1 position:50%
to fetch the current user,
I've added it to the environment


255
00:12:42.261 --> 00:12:44.430 line:-1 position:50%
of my root view.


256
00:12:44.430 --> 00:12:46.899 line:-1 position:50%
The user profile view
then reads the value


257
00:12:46.899 --> 00:12:49.736 line:-1 position:50%
using the Environment
dynamic property.


258
00:12:49.736 --> 00:12:52.238 line:-1 position:50%
I'm using the type
as the environment key here,


259
00:12:52.238 --> 00:12:54.941 line:-1 position:50%
but custom keys
are also supported.


260
00:12:54,941 --> 00:12:58,378 position:50%
Be sure to catch "Discover
Observation with SwiftUI"


261
00:12:58,378 --> 00:13:00,780 position:50%
to learn more on how you can
take advantage


262
00:13:00,780 --> 00:13:02,682 position:50%
of this powerful new tool.


263
00:13:02.682 --> 00:13:06.285 line:-1 position:50%
I love how Observable lets me
write clear and concise code.


264
00:13:06.285 --> 00:13:08.454 line:-1 position:50%
It's given me a great start
to my app,


265
00:13:08.454 --> 00:13:10.590 line:-1 position:50%
but I'd really like
to make sure any changes


266
00:13:10.590 --> 00:13:13.826 line:-1 position:50%
to my data model are persisted,
so that I never lose track


267
00:13:13.826 --> 00:13:16.062 line:-1 position:50%
of all my favorite pups.


268
00:13:16.062 --> 00:13:19.065 line:-1 position:50%
SwiftData is an all-new
framework for data modeling


269
00:13:19.065 --> 00:13:20.233 line:-1 position:50%
and management.


270
00:13:20.233 --> 00:13:24.203 line:-1 position:50%
It's fast and scalable
and works great with SwiftUI.


271
00:13:24.203 --> 00:13:27.774 line:-1 position:50%
SwiftData models are represented
entirely by their code,


272
00:13:27.774 --> 00:13:31.177 line:-1 position:50%
making them a natural fit
for any SwiftUI app.


273
00:13:31.177 --> 00:13:33.613 line:-1 position:50%
To set up my Dog model type
for SwiftData,


274
00:13:33.613 --> 00:13:37.216 line:-1 position:50%
I'll switch from using
Observable to the Model macro.


275
00:13:37.216 --> 00:13:39.686 line:-1 position:50%
This is the only change
I need to make.


276
00:13:39.686 --> 00:13:42.622 line:-1 position:50%
In addition to the persistence
provided by SwiftData,


277
00:13:42.622 --> 00:13:46.125 line:-1 position:50%
models also receive all the
benefits of using Observable.


278
00:13:46.125 --> 00:13:48.261 line:-1 position:50%
It's really powerful.


279
00:13:48.261 --> 00:13:50.430 line:-1 position:50%
Our dog-watching app's
main screen


280
00:13:50.430 --> 00:13:54.033 line:-1 position:50%
shows a scrolling stack
of recently met doggos.


281
00:13:54.033 --> 00:13:56.102 line:-1 position:50%
Let's take a walk
through the changes needed


282
00:13:56.102 --> 00:13:58.571 line:-1 position:50%
to use SwiftData here.


283
00:13:58.571 --> 00:14:00.606 line:-1 position:50%
First, I'll add
a model container


284
00:14:00.606 --> 00:14:04.444 line:-1 position:50%
to my app's definition
and provide it my model type.


285
00:14:04.444 --> 00:14:07.880 line:-1 position:50%
Then, in my view code,
I'll switch my array of dogs


286
00:14:07.880 --> 00:14:11.150 line:-1 position:50%
to use the new
Query dynamic property.


287
00:14:11.150 --> 00:14:14.687 line:-1 position:50%
Using Query will tell SwiftData
to fetch the model values


288
00:14:14.687 --> 00:14:16.656 line:-1 position:50%
from the underlying database.


289
00:14:16.656 --> 00:14:19.692 line:-1 position:50%
When the data changes,
like when I spot a new dog,


290
00:14:19.692 --> 00:14:22.061 line:-1 position:50%
my view will be invalidated.


291
00:14:22.061 --> 00:14:25.064 line:-1 position:50%
Query is incredibly efficient
for large data sets


292
00:14:25.064 --> 00:14:28.534 line:-1 position:50%
and allows for customization
in how the data is returned,


293
00:14:28.534 --> 00:14:29.969 line:-1 position:50%
such as changing
the sort order


294
00:14:29.969 --> 00:14:32.071 line:-1 position:50%
to use the date
I spotted the dog,


295
00:14:32.071 --> 00:14:35.541 line:-1 position:50%
which makes for a better
experience in the app.


296
00:14:35.541 --> 00:14:38.945 line:-1 position:50%
SwiftData also works great
for storing a document's data


297
00:14:38.945 --> 00:14:40.980 line:-1 position:50%
on macOS and iOS.


298
00:14:40.980 --> 00:14:43.349 line:-1 position:50%
I decided I wanted a quick way
to prototype


299
00:14:43.349 --> 00:14:46.719 line:-1 position:50%
some dog tag visual treatments
for our app,


300
00:14:46.719 --> 00:14:48.721 line:-1 position:50%
so I built this little
document-based app


301
00:14:48.721 --> 00:14:52.091 line:-1 position:50%
for collaborating with Curt
and our designers.


302
00:14:52.091 --> 00:14:53.860 line:-1 position:50%
Document-based apps
can take advantage


303
00:14:53.860 --> 00:14:56.262 line:-1 position:50%
of all the functionality
of SwiftData


304
00:14:56.262 --> 00:14:58.397 line:-1 position:50%
using a new initializer.


305
00:14:58.397 --> 00:15:01.367 line:-1 position:50%
SwiftUI will then use SwiftData
for the underlying storage


306
00:15:01.367 --> 00:15:04.237 line:-1 position:50%
of each document,
as well as automatically set up


307
00:15:04.237 --> 00:15:06.239 line:-1 position:50%
a model container.


308
00:15:06,239 --> 00:15:08,674 position:50%
To learn more about SwiftData
and how it integrates


309
00:15:08,674 --> 00:15:12,612 position:50%
with SwiftUI,
please watch "Meet SwiftData"


310
00:15:12,612 --> 00:15:14,981 position:50%
and "Build an app
with SwiftData."


311
00:15:14.981 --> 00:15:17.183 line:-1 position:50%
In addition
to SwiftData support,


312
00:15:17.183 --> 00:15:19.118 line:-1 position:50%
DocumentGroup
also gains a number


313
00:15:19.118 --> 00:15:25.324 line:-1 position:50%
of new platform affordances when
running on iOS 17 or iPadOS 17,


314
00:15:25.324 --> 00:15:28.828 line:-1 position:50%
such as automatic sharing
and document renaming support,


315
00:15:28.828 --> 00:15:32.932 line:-1 position:50%
as well as undo controls
in the toolbar.


316
00:15:32.932 --> 00:15:36.669 line:-1 position:50%
Inspector is a new modifier
for displaying details


317
00:15:36.669 --> 00:15:39.505 line:-1 position:50%
about the current
selection or context.


318
00:15:39.505 --> 00:15:43.042 line:-1 position:50%
It's presented as a distinct
section in your interface.


319
00:15:43.042 --> 00:15:44.177 line:-1 position:50%
On macOS,


320
00:15:44.177 --> 00:15:47.046 line:-1 position:50%
Inspector presents
as a trailing sidebar.


321
00:15:47.046 --> 00:15:50.817 line:-1 position:50%
as well as on iPadOS
in a regular size class.


322
00:15:50.817 --> 00:15:55.421 line:-1 position:50%
In compact size classes, it will
present itself as a sheet.


323
00:15:55,421 --> 00:15:57,957 position:50%
To uncover all the details
on Inspector,


324
00:15:57,957 --> 00:16:02,662 position:50%
watch "Inspectors in SwiftUI:
discover the details."


325
00:16:02.662 --> 00:16:06.465 line:-1 position:50%
Dialogs have been given several
new customization APIs


326
00:16:06.465 --> 00:16:09.802 line:-1 position:50%
in iOS 17 and macOS Sonoma.


327
00:16:09.802 --> 00:16:11.437 line:-1 position:50%
I'm using some
of the new modifiers


328
00:16:11.437 --> 00:16:15.208 line:-1 position:50%
to give my image export dialog
some useful information,


329
00:16:15.208 --> 00:16:18.744 line:-1 position:50%
like adjusting
the confirmation button's label.


330
00:16:18.744 --> 00:16:21.547 line:-1 position:50%
An increased severity
helps draw attention


331
00:16:21.547 --> 00:16:23.783 line:-1 position:50%
to important
confirmation dialogs,


332
00:16:23.783 --> 00:16:27.220 line:-1 position:50%
and including a suppression
toggle indicates a preference


333
00:16:27.220 --> 00:16:29.589 line:-1 position:50%
that the dialog should
not present itself


334
00:16:29.589 --> 00:16:32.124 line:-1 position:50%
for subsequent interactions.


335
00:16:32.124 --> 00:16:34.994 line:-1 position:50%
Lastly, adding a HelpLink
can be a guide


336
00:16:34.994 --> 00:16:38.764 line:-1 position:50%
to further information about
the purpose of the dialog.


337
00:16:38.764 --> 00:16:41.934 line:-1 position:50%
Lists and tables are
a key part of most apps,


338
00:16:41.934 --> 00:16:44.503 line:-1 position:50%
and SwiftUI has brought
some new features and APIs


339
00:16:44.503 --> 00:16:49.742 line:-1 position:50%
for fine-tuning them in iOS 17
and macOS Sonoma.


340
00:16:49.742 --> 00:16:52.144 line:-1 position:50%
Tables support customization
of their column ordering


341
00:16:52.144 --> 00:16:53.646 line:-1 position:50%
and visibility.


342
00:16:53.646 --> 00:16:56.349 line:-1 position:50%
When coupled with the
SceneStorage dynamic property,


343
00:16:56.349 --> 00:16:58.384 line:-1 position:50%
these preferences
can be persisted


344
00:16:58.384 --> 00:17:00.953 line:-1 position:50%
across runs of your app.


345
00:17:00.953 --> 00:17:02.722 line:-1 position:50%
You provide the table
with a value


346
00:17:02.722 --> 00:17:05.024 line:-1 position:50%
representing
the customization state


347
00:17:05.024 --> 00:17:09.128 line:-1 position:50%
and give each column
a unique stable identifier.


348
00:17:09.128 --> 00:17:12.899 line:-1 position:50%
Tables now also have all the
power of OutlineGroup built in.


349
00:17:12.899 --> 00:17:15.368 line:-1 position:50%
This is great for large data
sets that lend themselves


350
00:17:15.368 --> 00:17:18.504 line:-1 position:50%
to a hierarchical structure,
like this one which groups


351
00:17:18.504 --> 00:17:22.241 line:-1 position:50%
some of my favorite dogs
with their proud parents.


352
00:17:22.241 --> 00:17:24.610 line:-1 position:50%
Simply use the new
DisclosureTableRow


353
00:17:24.610 --> 00:17:27.647 line:-1 position:50%
to represent rows
that contain other rows,


354
00:17:27.647 --> 00:17:30.917 line:-1 position:50%
and build the rest of your table
as you would normally.


355
00:17:30.917 --> 00:17:33.286 line:-1 position:50%
Sections within a list
or table have gained support


356
00:17:33.286 --> 00:17:35.588 line:-1 position:50%
for programmatic expansion.


357
00:17:35.588 --> 00:17:37.423 line:-1 position:50%
I've used it here
in my app's sidebar


358
00:17:37.423 --> 00:17:41.227 line:-1 position:50%
to show the location section
as collapsed initially,


359
00:17:41.227 --> 00:17:44.563 line:-1 position:50%
but while still allowing
for expansion.


360
00:17:44.563 --> 00:17:47.266 line:-1 position:50%
The new initializer takes
a binding to a value


361
00:17:47.266 --> 00:17:50.069 line:-1 position:50%
which reflects
the current expansion state


362
00:17:50.069 --> 00:17:51.904 line:-1 position:50%
of the section.


363
00:17:51.904 --> 00:17:54.140 line:-1 position:50%
For smaller data sets,


364
00:17:54.140 --> 00:17:57.376 line:-1 position:50%
tables have also gained a few
new styling affordances,


365
00:17:57.376 --> 00:18:01.447 line:-1 position:50%
such as how row backgrounds and
column headers are displayed.


366
00:18:01.447 --> 00:18:06.018 line:-1 position:50%
And lastly, custom controls like
my star rating will also benefit


367
00:18:06.018 --> 00:18:09.555 line:-1 position:50%
from the new background
prominence environment property.


368
00:18:09.555 --> 00:18:11.657 line:-1 position:50%
Using a less prominent
foreground style


369
00:18:11.657 --> 00:18:14.627 line:-1 position:50%
when the background is prominent
lets my custom control


370
00:18:14.627 --> 00:18:16.862 line:-1 position:50%
feel right at home in a list.


371
00:18:16.862 --> 00:18:20.132 line:-1 position:50%
In addition to these and other
APIs that let you fine-tune


372
00:18:20.132 --> 00:18:22.468 line:-1 position:50%
the look and feel
of lists and tables,


373
00:18:22.468 --> 00:18:25.271 line:-1 position:50%
we've also made big improvements
to the performance,


374
00:18:25.271 --> 00:18:28.708 line:-1 position:50%
particularly when dealing
with large data sets.


375
00:18:28,708 --> 00:18:31,310 position:50%
To learn more about this
and the ways you can optimize


376
00:18:31,310 --> 00:18:33,112 position:50%
your own SwiftUI views,


377
00:18:33,112 --> 00:18:37,016 position:50%
check out
"Demystify SwiftUI performance."


378
00:18:37.016 --> 00:18:39.652 line:-1 position:50%
From Observable
to SwiftData to Inspector


379
00:18:39.652 --> 00:18:42.922 line:-1 position:50%
and table customizations,
working with data in your apps


380
00:18:42.922 --> 00:18:45.691 line:-1 position:50%
feels like a whole
new experience.


381
00:18:45.691 --> 00:18:47.593 line:-1 position:50%
Curt: With the data model
and tables


382
00:18:47.593 --> 00:18:49.261 line:-1 position:50%
that Jeff has put together,


383
00:18:49.261 --> 00:18:52.365 line:-1 position:50%
we have the bones
of a great app.


384
00:18:52.365 --> 00:18:54.700 line:-1 position:50%
I'd like to add some pizazz
using the extraordinary


385
00:18:54.700 --> 00:18:57.470 line:-1 position:50%
new animation APIs.


386
00:18:57.470 --> 00:18:59.939 line:-1 position:50%
I think it would be great
to have an Apple TV app


387
00:18:59.939 --> 00:19:02.475 line:-1 position:50%
for viewing a gallery
of dog photos.


388
00:19:02.475 --> 00:19:04.143 line:-1 position:50%
Here's an animation
I've been working on


389
00:19:04.143 --> 00:19:07.346 line:-1 position:50%
for choosing the current viewer.


390
00:19:07.346 --> 00:19:11.117 line:-1 position:50%
I built this with the new
Keyframe Animator API.


391
00:19:11.117 --> 00:19:13.986 line:-1 position:50%
Keyframe animators let me
animate multiple properties


392
00:19:13.986 --> 00:19:15.354 line:-1 position:50%
in parallel.


393
00:19:15.354 --> 00:19:16.789 line:-1 position:50%
I give the animator


394
00:19:16.789 --> 00:19:20.993 line:-1 position:50%
a value containing
animatable properties


395
00:19:20.993 --> 00:19:23.262 line:-1 position:50%
and a piece of equatable state.


396
00:19:23.262 --> 00:19:26.465 line:-1 position:50%
Changes to the state
trigger my animation.


397
00:19:26.465 --> 00:19:28.734 line:-1 position:50%
In the first closure,
I build a view,


398
00:19:28.734 --> 00:19:31.537 line:-1 position:50%
modified by
my animatable properties,


399
00:19:31.537 --> 00:19:34.106 line:-1 position:50%
like the vertical offset
of my logo.


400
00:19:34.106 --> 00:19:35.341 line:-1 position:50%
In the second closure,


401
00:19:35.341 --> 00:19:38.677 line:-1 position:50%
I define how these properties
change over time.


402
00:19:38.677 --> 00:19:41.781 line:-1 position:50%
For example, the first track
defines the animation


403
00:19:41.781 --> 00:19:44.350 line:-1 position:50%
of my verticalTranslation
property.


404
00:19:44.350 --> 00:19:47.953 line:-1 position:50%
I pull my logo down 30 points
over the first quarter second


405
00:19:47.953 --> 00:19:50.156 line:-1 position:50%
using a spring animation.


406
00:19:50.156 --> 00:19:54.827 line:-1 position:50%
Then I make my Beagle leap
and land using a cubic curve.


407
00:19:54,827 --> 00:19:59,598 position:50%
Finally, I bring this dog home
with a natural spring animation.


408
00:19:59,598 --> 00:20:03,035 position:50%
I define additional tracks for
my other animated properties.


409
00:20:03,035 --> 00:20:08,340 position:50%
All these tracks run in parallel
to create this cool animation.


410
00:20:08,340 --> 00:20:11,677 position:50%
To learn how to leverage
keyframe animators in your apps,


411
00:20:11,677 --> 00:20:16,816 position:50%
check out "Wind your way through
advanced animations in SwiftUI."


412
00:20:16.816 --> 00:20:18.851 line:-1 position:50%
I've also been working
on an Apple Watch app


413
00:20:18.851 --> 00:20:21.687 line:-1 position:50%
to record dog sightings
when I'm out on a run.


414
00:20:21.687 --> 00:20:24.390 line:-1 position:50%
It's pretty simple so far,
just our happy icon


415
00:20:24.390 --> 00:20:26.792 line:-1 position:50%
and a button
to register a sighting.


416
00:20:26.792 --> 00:20:29.895 line:-1 position:50%
I'd like to animate this icon
when I tap the button.


417
00:20:29.895 --> 00:20:33.432 line:-1 position:50%
This is a good place
for a phase animator.


418
00:20:33.432 --> 00:20:36.469 line:-1 position:50%
A phase animator is simpler
than a keyframe animator.


419
00:20:36.469 --> 00:20:38.170 line:-1 position:50%
Instead of parallel tracks,


420
00:20:38.170 --> 00:20:41.240 line:-1 position:50%
it steps through a single
sequence of phases.


421
00:20:41.240 --> 00:20:43.375 line:-1 position:50%
This lets me start one animation


422
00:20:43.375 --> 00:20:46.112 line:-1 position:50%
when the previous
animation finishes.


423
00:20:46.112 --> 00:20:48.881 line:-1 position:50%
I give the animator a sequence
of phases and tell it


424
00:20:48.881 --> 00:20:52.685 line:-1 position:50%
to run my animation whenever
my sightingCount changes.


425
00:20:52.685 --> 00:20:56.589 line:-1 position:50%
Then in this first closure,
I set the rotation and scale


426
00:20:56.589 --> 00:20:59.792 line:-1 position:50%
of my happy dog
based on the current phase.


427
00:20:59.792 --> 00:21:03.596 line:-1 position:50%
The second closure tells SwiftUI
how to animate


428
00:21:03.596 --> 00:21:05.131 line:-1 position:50%
into each phase.


429
00:21:05.131 --> 00:21:07.867 line:-1 position:50%
I'm using some of the cool
new spring animations here.


430
00:21:07.867 --> 00:21:10.336 line:-1 position:50%
I just love these names.


431
00:21:10.336 --> 00:21:14.273 line:-1 position:50%
Who doesn't want a snappy
or bouncy animation?


432
00:21:14.273 --> 00:21:15.941 line:-1 position:50%
And for my grow phase,


433
00:21:15.941 --> 00:21:18.644 line:-1 position:50%
I'm using an entirely
custom spring.


434
00:21:18.644 --> 00:21:20.746 line:-1 position:50%
Springs now take
a duration and bounce,


435
00:21:20.746 --> 00:21:23.082 line:-1 position:50%
making them easier to describe.


436
00:21:23.082 --> 00:21:25.384 line:-1 position:50%
You can use all
these new springs


437
00:21:25.384 --> 00:21:28.521 line:-1 position:50%
everywhere that takes
a SwiftUI animation.


438
00:21:28.521 --> 00:21:31.056 line:-1 position:50%
Spring animations
have a nice, natural feel.


439
00:21:31.056 --> 00:21:34.026 line:-1 position:50%
They match the velocity
of any previous animation


440
00:21:34.026 --> 00:21:37.930 line:-1 position:50%
and settle to their final value
with realistic friction.


441
00:21:37.930 --> 00:21:39.732 line:-1 position:50%
They're now
the default animation


442
00:21:39.732 --> 00:21:44.670 line:-1 position:50%
for apps built on or after
iOS 17 and aligned releases.


443
00:21:44.670 --> 00:21:46.605 line:-1 position:50%
I'm pleased with
my animation now,


444
00:21:46.605 --> 00:21:48.340 line:-1 position:50%
but when I'm out on a run,
it would be great


445
00:21:48.340 --> 00:21:50.943 line:-1 position:50%
to also get some
haptic feedback.


446
00:21:50.943 --> 00:21:53.579 line:-1 position:50%
Haptic feedback provides
a tactile response,


447
00:21:53.579 --> 00:21:54.947 line:-1 position:50%
such as a tap,


448
00:21:54.947 --> 00:21:58.484 line:-1 position:50%
to draw attention and reinforce
actions and events.


449
00:21:58.484 --> 00:22:00.819 line:-1 position:50%
I think a tap on the wrist would
give me more confidence


450
00:22:00.819 --> 00:22:03.022 line:-1 position:50%
that I didn't miss a dog.


451
00:22:03.022 --> 00:22:07.626 line:-1 position:50%
Haptic feedback is easy with
the new sensory feedback API.


452
00:22:07.626 --> 00:22:09.261 line:-1 position:50%
To play haptic feedback,


453
00:22:09.261 --> 00:22:12.264 line:-1 position:50%
I just attach
the sensoryFeedback modifier,


454
00:22:12.264 --> 00:22:16.702 line:-1 position:50%
specify what sort of feedback I
want and when it should happen.


455
00:22:16.702 --> 00:22:19.805 line:-1 position:50%
The sensoryFeedback modifier
works on all platforms


456
00:22:19.805 --> 00:22:21.874 line:-1 position:50%
that support haptic feedback.


457
00:22:21,874 --> 00:22:24,610 position:50%
Different platforms support
different kinds of feedback,


458
00:22:24,610 --> 00:22:26,779 position:50%
so check out
the Human Interface Guidelines


459
00:22:26,779 --> 00:22:30,783 position:50%
to learn what sorts of feedback
will be best in your apps.


460
00:22:30.783 --> 00:22:32.551 line:-1 position:50%
I've also been working
on an animation


461
00:22:32.551 --> 00:22:37.122 line:-1 position:50%
for the welcome screen, using
the new visual effects modifier.


462
00:22:37.122 --> 00:22:38.991 line:-1 position:50%
The visual effects modifier
lets me


463
00:22:38.991 --> 00:22:42.228 line:-1 position:50%
update these dog photos
based on their position.


464
00:22:42.228 --> 00:22:45.397 line:-1 position:50%
And I don't need
a GeometryReader to do it.


465
00:22:45.397 --> 00:22:47.833 line:-1 position:50%
I've got a little simulation
that moves a focal point


466
00:22:47.833 --> 00:22:49.735 line:-1 position:50%
around the screen.


467
00:22:49.735 --> 00:22:53.706 line:-1 position:50%
This red dot shows
what I mean by focal point.


468
00:22:53.706 --> 00:22:56.475 line:-1 position:50%
I associate a coordinate space
with this grid


469
00:22:56.475 --> 00:22:58.744 line:-1 position:50%
that shows all the dogs.


470
00:22:58.744 --> 00:23:03.115 line:-1 position:50%
Then inside my DogCircle view,
I add a visual effect.


471
00:23:03.115 --> 00:23:07.519 line:-1 position:50%
The closure gets my content
to modify and a geometry proxy.


472
00:23:07.519 --> 00:23:10.055 line:-1 position:50%
I'm passing the geometry proxy
to a helper method


473
00:23:10.055 --> 00:23:11.957 line:-1 position:50%
to compute the scale.


474
00:23:11.957 --> 00:23:16.061 line:-1 position:50%
I can use the geometry proxy
to get the size of my grid view


475
00:23:16.061 --> 00:23:21.100 line:-1 position:50%
and the frame of a single dog
circle relative to my grid view.


476
00:23:21.100 --> 00:23:23.402 line:-1 position:50%
That lets me compute
how far any dog is


477
00:23:23.402 --> 00:23:25.371 line:-1 position:50%
from the focal point
of the simulation,


478
00:23:25.371 --> 00:23:28.540 line:-1 position:50%
so I can scale up
the focused doggos.


479
00:23:28.540 --> 00:23:30.743 line:-1 position:50%
With visual effects,
I can do all of this


480
00:23:30.743 --> 00:23:33.612 line:-1 position:50%
without using a GeometryReader.


481
00:23:33.612 --> 00:23:36.782 line:-1 position:50%
And it automatically adapts
to different sizes.


482
00:23:38.617 --> 00:23:41.020 line:-1 position:50%
I'd like to share
one more example.


483
00:23:41.020 --> 00:23:42.288 line:-1 position:50%
I've been playing
with a feature


484
00:23:42.288 --> 00:23:46.358 line:-1 position:50%
to send good-dog messages to
the people of the dogs I've met.


485
00:23:46.358 --> 00:23:48.527 line:-1 position:50%
I thought it would be fun
to style the dog's name


486
00:23:48.527 --> 00:23:51.463 line:-1 position:50%
to make it stand out.


487
00:23:51.463 --> 00:23:54.433 line:-1 position:50%
This is easy now that
I can interpolate text


488
00:23:54.433 --> 00:23:58.470 line:-1 position:50%
with a foreground style
right inside another text view.


489
00:23:58,470 --> 00:23:59,905 position:50%
And check it out!


490
00:23:59,905 --> 00:24:04,076 position:50%
I can adjust the styling
using these sliders.


491
00:24:04,076 --> 00:24:06,545 position:50%
Now how does that work?


492
00:24:06,545 --> 00:24:08,447 position:50%
Here's how I'm
defining the style.


493
00:24:08,447 --> 00:24:10,916 position:50%
I'm passing my stripeSpacing
and angle,


494
00:24:10,916 --> 00:24:13,686 position:50%
along with a color
from my asset catalog,


495
00:24:13,686 --> 00:24:17,056 position:50%
to a custom Metal shader.


496
00:24:17.056 --> 00:24:19.558 line:-1 position:50%
Using SwiftUI's
new ShaderLibrary,


497
00:24:19.558 --> 00:24:21.627 line:-1 position:50%
I can turn
Metal shader functions


498
00:24:21.627 --> 00:24:24.830 line:-1 position:50%
directly into SwiftUI
shape styles,


499
00:24:24.830 --> 00:24:28.767 line:-1 position:50%
like this one that renders
the stripes in Furdinand's name.


500
00:24:31.170 --> 00:24:33.739 line:-1 position:50%
If you'd like to take Metal
shaders out for a spin,


501
00:24:33.739 --> 00:24:36.308 line:-1 position:50%
just add a new Metal file
to your project


502
00:24:36.308 --> 00:24:41.046 line:-1 position:50%
and call your shader function
using ShaderLibrary in SwiftUI.


503
00:24:41.046 --> 00:24:42.548 line:-1 position:50%
There's another thing
in this example


504
00:24:42.548 --> 00:24:44.750 line:-1 position:50%
that I want to point out.


505
00:24:44,750 --> 00:24:48,420 position:50%
Notice when I hit the end
of the tracks on the sliders,


506
00:24:48,420 --> 00:24:51,357 position:50%
the symbol gives
this satisfying bounce.


507
00:24:51,357 --> 00:24:55,294 position:50%
That effect is built in
to Slider on macOS and iOS.


508
00:24:55,294 --> 00:24:57,863 position:50%
You can also add it
to your own symbols


509
00:24:57,863 --> 00:25:01,266 position:50%
with the new symbol
effect modifier.


510
00:25:01.266 --> 00:25:04.636 line:-1 position:50%
Just apply this modifier
to animate an SF Symbol,


511
00:25:04.636 --> 00:25:07.039 line:-1 position:50%
or all the symbols
in a view hierarchy.


512
00:25:07.039 --> 00:25:09.675 line:-1 position:50%
Symbols support
a variety of effects,


513
00:25:09.675 --> 00:25:15.581 line:-1 position:50%
including continuous animations
with pulse and variable color.


514
00:25:15,581 --> 00:25:18,050 position:50%
State changes with scale,


515
00:25:18,050 --> 00:25:20,085 position:50%
appear and disappear,


516
00:25:20,085 --> 00:25:22,154 position:50%
and replace,


517
00:25:22,154 --> 00:25:25,524 position:50%
and event notifications
with bounce.


518
00:25:25,524 --> 00:25:27,926 position:50%
Watch
"Animate symbols in your app"


519
00:25:27,926 --> 00:25:30,763 position:50%
to learn about the best
people-pleasing practices


520
00:25:30,763 --> 00:25:33,432 position:50%
for using symbol effects.


521
00:25:33.432 --> 00:25:35.200 line:-1 position:50%
Before leaving this example,


522
00:25:35.200 --> 00:25:37.970 line:-1 position:50%
I want to point out
one last feature.


523
00:25:37.970 --> 00:25:40.572 line:-1 position:50%
Notice the units
on the text here.


524
00:25:40.572 --> 00:25:43.876 line:-1 position:50%
In the past I might have used
small caps for this effect,


525
00:25:43.876 --> 00:25:45.878 line:-1 position:50%
but now I can get
this appearance


526
00:25:45.878 --> 00:25:51.016 line:-1 position:50%
by applying the new
textScale modifier to my units.


527
00:25:51.016 --> 00:25:53.619 line:-1 position:50%
If Jeff and I bring our app
to the Chinese market,


528
00:25:53.619 --> 00:25:55.554 line:-1 position:50%
the units will be
sized correctly,


529
00:25:55.554 --> 00:25:58.056 line:-1 position:50%
even though the concept
of small caps


530
00:25:58.056 --> 00:26:01.693 line:-1 position:50%
isn't part of the typography
in Chinese.


531
00:26:01.693 --> 00:26:03.762 line:-1 position:50%
We have another tool
to help apps work great


532
00:26:03.762 --> 00:26:05.264 line:-1 position:50%
in multiple locales.


533
00:26:05.264 --> 00:26:09.568 line:-1 position:50%
Some languages, like Thai,
use taller letter forms.


534
00:26:09.568 --> 00:26:11.904 line:-1 position:50%
When text from one
of these languages


535
00:26:11.904 --> 00:26:14.840 line:-1 position:50%
is embedded in text
localized in a language


536
00:26:14.840 --> 00:26:18.710 line:-1 position:50%
with shorter letter forms,
like English,


537
00:26:18.710 --> 00:26:22.147 line:-1 position:50%
the taller text can
be crowded or clipped.


538
00:26:22.147 --> 00:26:24.216 line:-1 position:50%
When we know that
this might be an issue --


539
00:26:24.216 --> 00:26:28.854 line:-1 position:50%
for example, if our dog names
were globally crowd-sourced --


540
00:26:28.854 --> 00:26:32.124 line:-1 position:50%
we can apply the
typesettingLanguage modifier.


541
00:26:32.124 --> 00:26:37.830 line:-1 position:50%
This lets SwiftUI know that
the text might need more space.


542
00:26:37.830 --> 00:26:40.933 line:-1 position:50%
I'm having so much fun
using these new APIs,


543
00:26:40.933 --> 00:26:43.569 line:-1 position:50%
but it's important to tastefully
choose animations


544
00:26:43.569 --> 00:26:46.271 line:-1 position:50%
to avoid overwhelming people.


545
00:26:46,271 --> 00:26:49,708 position:50%
To learn about the fundamentals
of animation in SwiftUI,


546
00:26:49,708 --> 00:26:52,978 position:50%
check out
"Explore SwiftUI animation."


547
00:26:52,978 --> 00:26:56,648 position:50%
Then in "Animate with springs,"
Jacob will help you build


548
00:26:56,648 --> 00:27:01,253 position:50%
animations that feel at home
on everyone's devices.


549
00:27:01.253 --> 00:27:05.357 line:-1 position:50%
The breadth of new animation
APIs in SwiftUI is amazing.


550
00:27:05.357 --> 00:27:07.326 line:-1 position:50%
I've only scratched
the surface here.


551
00:27:07.326 --> 00:27:09.194 line:-1 position:50%
There's even more to discover,


552
00:27:09.194 --> 00:27:11.163 line:-1 position:50%
from animation
completion handlers


553
00:27:11.163 --> 00:27:14.166 line:-1 position:50%
to building entirely
custom animations.


554
00:27:14.166 --> 00:27:18.003 line:-1 position:50%
I hope you enjoy these APIs
as much as I do.


555
00:27:18.003 --> 00:27:21.039 line:-1 position:50%
Jeff: I love how all these new
animations and effects


556
00:27:21.039 --> 00:27:23.041 line:-1 position:50%
really bring our app to life.


557
00:27:23.041 --> 00:27:26.478 line:-1 position:50%
Now, let's take a look at some
of the new interaction APIs


558
00:27:26.478 --> 00:27:28.814 line:-1 position:50%
for the final touches.


559
00:27:28.814 --> 00:27:32.451 line:-1 position:50%
Interactions are at the heart
of any great app experience,


560
00:27:32.451 --> 00:27:35.187 line:-1 position:50%
and these are just a few
of the updated APIs


561
00:27:35.187 --> 00:27:38.891 line:-1 position:50%
coming to iOS 17
and aligned releases.


562
00:27:38.891 --> 00:27:42.160 line:-1 position:50%
My screen of recently met dogs
could use a little extra flair


563
00:27:42.160 --> 00:27:45.097 line:-1 position:50%
to give it that final bit
of polish.


564
00:27:45.097 --> 00:27:47.900 line:-1 position:50%
I'd like to add some
visual effects to my dog cards


565
00:27:47.900 --> 00:27:50.669 line:-1 position:50%
as they transition in and out
of the visible area


566
00:27:50.669 --> 00:27:53.372 line:-1 position:50%
of my scroll view.


567
00:27:53.372 --> 00:27:56.041 line:-1 position:50%
The scroll transition modifier
is very similar


568
00:27:56.041 --> 00:27:58.577 line:-1 position:50%
to the visual effect modifier
Curt used earlier


569
00:27:58.577 --> 00:28:00.479 line:-1 position:50%
for the welcome screen.


570
00:28:00.479 --> 00:28:04.783 line:-1 position:50%
It lets you apply effects
to items in your scroll view.


571
00:28:04.783 --> 00:28:07.219 line:-1 position:50%
Using the scale
and opacity effects


572
00:28:07.219 --> 00:28:09.955 line:-1 position:50%
gave me just that little bit
of polish I wanted,


573
00:28:09.955 --> 00:28:13.692 line:-1 position:50%
with only a few
extra lines of code.


574
00:28:13.692 --> 00:28:15.661 line:-1 position:50%
I'd also like to add
a side-scrolling list


575
00:28:15.661 --> 00:28:18.330 line:-1 position:50%
of my favorite dog parks
to this screen.


576
00:28:18.330 --> 00:28:22.267 line:-1 position:50%
SwiftUI has added some great
features to let me build this.


577
00:28:22.267 --> 00:28:24.469 line:-1 position:50%
Above my vertical stack of dogs,


578
00:28:24.469 --> 00:28:27.839 line:-1 position:50%
I'll drop in a horizontal stack
for the park cards.


579
00:28:27.839 --> 00:28:28.907 line:-1 position:50%
I'm using the new


580
00:28:28.907 --> 00:28:31.310 line:-1 position:50%
containerRelativeFrame
modifier


581
00:28:31.310 --> 00:28:35.747 line:-1 position:50%
to size these park cards
relative to the visible size


582
00:28:35.747 --> 00:28:38.150 line:-1 position:50%
of the horizontal scroll view.


583
00:28:38.150 --> 00:28:40.485 line:-1 position:50%
The count specifies
how many chunks


584
00:28:40.485 --> 00:28:42.721 line:-1 position:50%
to divide the screen into.


585
00:28:42.721 --> 00:28:47.426 line:-1 position:50%
The span says how many of those
chunks each view should take.


586
00:28:47.426 --> 00:28:48.927 line:-1 position:50%
This is pretty great,


587
00:28:48.927 --> 00:28:52.431 line:-1 position:50%
but I'd like my park cards
to snap into place.


588
00:28:52.431 --> 00:28:56.068 line:-1 position:50%
The new scrollTargetLayout
modifier makes that easy.


589
00:28:56.068 --> 00:28:59.004 line:-1 position:50%
I'll add it to the LazyHStack
and modify the scroll view


590
00:28:59.004 --> 00:29:03.342 line:-1 position:50%
to align to views
in the targeted layout.


591
00:29:03.342 --> 00:29:06.511 line:-1 position:50%
In addition to view alignment,
scroll views can also be defined


592
00:29:06.511 --> 00:29:08.480 line:-1 position:50%
to use a paging behavior.


593
00:29:08.480 --> 00:29:10.749 line:-1 position:50%
And for a truly
custom experience,


594
00:29:10.749 --> 00:29:12.217 line:-1 position:50%
you can define your own behavior


595
00:29:12.217 --> 00:29:15.821 line:-1 position:50%
using the scrollTargetBehavior
protocol.


596
00:29:15.821 --> 00:29:18.323 line:-1 position:50%
I also thought my mutts
would deserve a little accolade


597
00:29:18.323 --> 00:29:20.892 line:-1 position:50%
when they're at the top
of the scroll view.


598
00:29:20.892 --> 00:29:23.762 line:-1 position:50%
The new scrollPosition
modifier takes a binding


599
00:29:23.762 --> 00:29:28.066 line:-1 position:50%
to the topmost item's ID,
and it's updated as I scroll.


600
00:29:28.066 --> 00:29:31.336 line:-1 position:50%
This way,
I always know who's top dog.


601
00:29:31,336 --> 00:29:34,606 position:50%
To learn more about all these
and the other great improvements


602
00:29:34,606 --> 00:29:35,807 position:50%
to Scroll View,


603
00:29:35,807 --> 00:29:39,811 position:50%
be sure to watch
"Beyond scroll views."


604
00:29:39.811 --> 00:29:44.282 line:-1 position:50%
Image now supports rendering
content with high dynamic range.


605
00:29:44.282 --> 00:29:47.285 line:-1 position:50%
By applying the
allowedDynamicRange modifier,


606
00:29:47.285 --> 00:29:50.355 line:-1 position:50%
the beautiful images
in our app's gallery screen


607
00:29:50.355 --> 00:29:53.291 line:-1 position:50%
can be shown
with their full fidelity.


608
00:29:53.291 --> 00:29:55.127 line:-1 position:50%
It's best to use this
sparingly, though,


609
00:29:55.127 --> 00:29:58.664 line:-1 position:50%
and usually when
the image stands alone.


610
00:29:58.664 --> 00:30:00.599 line:-1 position:50%
Apps written with SwiftUI
work great


611
00:30:00.599 --> 00:30:03.402 line:-1 position:50%
with accessibility features
out of the box,


612
00:30:03.402 --> 00:30:05.070 line:-1 position:50%
but you can make them
even better


613
00:30:05.070 --> 00:30:07.105 line:-1 position:50%
with some of the new
accessibility APIs


614
00:30:07.105 --> 00:30:09.041 line:-1 position:50%
we're introducing.


615
00:30:09.041 --> 00:30:10.575 line:-1 position:50%
The adventurous dog
in this photo


616
00:30:10.575 --> 00:30:13.045 line:-1 position:50%
is a bit too far away to see,
so I've applied


617
00:30:13.045 --> 00:30:17.182 line:-1 position:50%
a magnification gesture
to allow zooming in.


618
00:30:17.182 --> 00:30:18.450 line:-1 position:50%
I'm also going to add the new


619
00:30:18.450 --> 00:30:21.987 line:-1 position:50%
accessibilityZoomAction
modifier to my view.


620
00:30:21.987 --> 00:30:25.290 line:-1 position:50%
This allows assistive
technologies like VoiceOver


621
00:30:25.290 --> 00:30:29.761 line:-1 position:50%
to access the same functionality
without using the gesture.


622
00:30:29.761 --> 00:30:31.296 line:-1 position:50%
I'll just update the zoom level


623
00:30:31.296 --> 00:30:33.465 line:-1 position:50%
depending on
the action's direction,


624
00:30:33.465 --> 00:30:36.902 line:-1 position:50%
and I can see what mischief
she's been up to now.


625
00:30:36.902 --> 00:30:40.172 line:-1 position:50%
VoiceOver: Zooming image view.
Image.


626
00:30:40,172 --> 00:30:41,973 position:50%
Jeff: To learn more
about all the new


627
00:30:41,973 --> 00:30:45,243 position:50%
accessibility functionality
across Apple's platforms,


628
00:30:45,243 --> 00:30:46,745 position:50%
be sure to check out


629
00:30:46,745 --> 00:30:50,916 position:50%
"Build accessible apps
with SwiftUI and UIKit."


630
00:30:50.916 --> 00:30:53.819 line:-1 position:50%
Color now supports
using static member syntax


631
00:30:53.819 --> 00:30:58.223 line:-1 position:50%
to look up custom colors defined
in your app's asset catalog.


632
00:30:58.223 --> 00:31:00.726 line:-1 position:50%
This gives compile-time safety
when using them,


633
00:31:00.726 --> 00:31:04.162 line:-1 position:50%
so you'll never
lose time to a typo.


634
00:31:04.162 --> 00:31:06.498 line:-1 position:50%
For the document app
I showed earlier,


635
00:31:06.498 --> 00:31:09.101 line:-1 position:50%
I've added a menu containing
several useful actions


636
00:31:09.101 --> 00:31:10.869 line:-1 position:50%
to the toolbar.


637
00:31:10.869 --> 00:31:13.705 line:-1 position:50%
The top section of the menu
is a ControlGroup


638
00:31:13.705 --> 00:31:16.508 line:-1 position:50%
with the new compactMenu style,


639
00:31:16.508 --> 00:31:21.613 line:-1 position:50%
which shows its items
as icons in a horizontal stack.


640
00:31:21.613 --> 00:31:24.549 line:-1 position:50%
The tag color selector
is defined as a picker


641
00:31:24.549 --> 00:31:26.918 line:-1 position:50%
with the new palette style.


642
00:31:26.918 --> 00:31:29.788 line:-1 position:50%
Using this style in concert
with symbol images


643
00:31:29.788 --> 00:31:32.657 line:-1 position:50%
gives a great visual
representation in menus,


644
00:31:32.657 --> 00:31:35.694 line:-1 position:50%
especially one like this
where I can use the label's tint


645
00:31:35.694 --> 00:31:37.696 line:-1 position:50%
to differentiate them.


646
00:31:37.696 --> 00:31:40.766 line:-1 position:50%
Lastly, the
paletteSelectionEffect modifier


647
00:31:40.766 --> 00:31:44.102 line:-1 position:50%
lets me use a symbol variant
to represent the selected item


648
00:31:44.102 --> 00:31:45.704 line:-1 position:50%
in the picker.


649
00:31:45.704 --> 00:31:47.439 line:-1 position:50%
With my menu in place,


650
00:31:47.439 --> 00:31:50.242 line:-1 position:50%
Buddy's dog tag can
now be his favorite color,


651
00:31:50.242 --> 00:31:52.911 line:-1 position:50%
tennis-ball yellow.


652
00:31:52.911 --> 00:31:54.679 line:-1 position:50%
Bordered buttons can now
be defined


653
00:31:54.679 --> 00:31:56.281 line:-1 position:50%
with new built-in shapes,


654
00:31:56.281 --> 00:31:59.017 line:-1 position:50%
such as circle
and rounded rectangle.


655
00:31:59.017 --> 00:32:04.289 line:-1 position:50%
These new border shape styles
work on iOS, watchOS, and macOS.


656
00:32:04.289 --> 00:32:08.193 line:-1 position:50%
Buttons on macOS and iOS
can now react to drag actions,


657
00:32:08.193 --> 00:32:11.930 line:-1 position:50%
like this button in my editor
that opens a popover.


658
00:32:11.930 --> 00:32:14.432 line:-1 position:50%
The new springLoadingBehavior
modifier


659
00:32:14.432 --> 00:32:17.102 line:-1 position:50%
indicates that a button
should trigger its action


660
00:32:17.102 --> 00:32:23.074 line:-1 position:50%
when a drag pauses over it, or
when force-clicking it on macOS.


661
00:32:23.074 --> 00:32:25.343 line:-1 position:50%
Buttons on tvOS
can make great use


662
00:32:25.343 --> 00:32:27.879 line:-1 position:50%
of the new highlight
hover effect.


663
00:32:27.879 --> 00:32:30.215 line:-1 position:50%
I've used it
on our gallery images


664
00:32:30.215 --> 00:32:32.184 line:-1 position:50%
and applied it just
to the image portion


665
00:32:32.184 --> 00:32:34.553 line:-1 position:50%
of my button's label,
to create an effect


666
00:32:34.553 --> 00:32:37.455 line:-1 position:50%
which feels right at home
on the platform.


667
00:32:37.455 --> 00:32:39.624 line:-1 position:50%
These buttons also use
the borderless style,


668
00:32:39.624 --> 00:32:42.828 line:-1 position:50%
which is now available on tvOS.


669
00:32:42.828 --> 00:32:45.697 line:-1 position:50%
Hardware keyboards are great
for providing an accelerant


670
00:32:45.697 --> 00:32:49.067 line:-1 position:50%
for common interactions
in your app.


671
00:32:49.067 --> 00:32:52.504 line:-1 position:50%
Focusable views on platforms
with hardware keyboard support


672
00:32:52.504 --> 00:32:54.706 line:-1 position:50%
can use
the onKeyPress modifier


673
00:32:54.706 --> 00:32:57.843 line:-1 position:50%
to directly react
to any keyboard input.


674
00:32:57.843 --> 00:33:00.545 line:-1 position:50%
The modifier takes a set of keys
to match against


675
00:33:00.545 --> 00:33:03.481 line:-1 position:50%
and an action to perform
for the event.


676
00:33:03,481 --> 00:33:06,384 position:50%
To get your fill
of focus-related recipes,


677
00:33:06,384 --> 00:33:10,488 position:50%
be sure to watch "The SwiftUI
cookbook for focus."


678
00:33:10.488 --> 00:33:12.524 line:-1 position:50%
From the scroll transitions
and behaviors,


679
00:33:12.524 --> 00:33:14.993 line:-1 position:50%
to button styles
and focus interactions,


680
00:33:14.993 --> 00:33:17.195 line:-1 position:50%
these new APIs
can help you build apps


681
00:33:17.195 --> 00:33:21.766 line:-1 position:50%
with rich functionality
and outstanding style.


682
00:33:21.766 --> 00:33:24.736 line:-1 position:50%
Curt: I think we've made
great progress on our app!


683
00:33:24.736 --> 00:33:26.037 line:-1 position:50%
Jeff: It's certainly something.


684
00:33:26.037 --> 00:33:28.506 line:-1 position:50%
Curt: It was fun
using all these new APIs.


685
00:33:28.506 --> 00:33:30.208 line:-1 position:50%
Jeff: That much is true.


686
00:33:30.208 --> 00:33:32.444 line:-1 position:50%
Curt: It's an exciting time
for SwiftUI.


687
00:33:32.444 --> 00:33:34.546 line:-1 position:50%
There's a brand-new platform!


688
00:33:34.546 --> 00:33:36.615 line:-1 position:50%
Jeff: And the elegance
of Observable and SwiftData


689
00:33:36.615 --> 00:33:38.783 line:-1 position:50%
work so well with SwiftUI.


690
00:33:38.783 --> 00:33:41.953 line:-1 position:50%
Curt: The animation improvements
are amazing.


691
00:33:41.953 --> 00:33:43.955 line:-1 position:50%
Jeff: And don't forget
scroll views!


692
00:33:43.955 --> 00:33:45.457 line:-1 position:50%
Curt: It's always
a thrill to see


693
00:33:45.457 --> 00:33:47.525 line:-1 position:50%
what our amazing
developer community


694
00:33:47.525 --> 00:33:49.928 line:-1 position:50%
can do with these new APIs.


695
00:33:49.928 --> 00:33:51.396 line:-1 position:50%
Jeff: Thanks for watching,
everyone.


696
00:33:51.396 --> 00:33:52.797 line:-1 position:50%
Say hi to your dog for me!


697
00:33:52.797 --> 00:33:55.066 line:-1 position:50%
Curt: Keep doing great work!


698
00:33:55,066 --> 00:33:58,370 line:0 position:90% size:2%
â™ª

