2
00:00:00.334 --> 00:00:07.341 line:-1 align:center
♪ ♪


3
00:00:10.010 --> 00:00:12.346 line:-2 align:center
Rasmus: Hi, I'm Rasmus.
I'm an engineer


4
00:00:12.379 --> 00:00:16.149 line:-2 align:center
on the Camera Algorithms team
working with Computational Video.


5
00:00:16.183 --> 00:00:18.619 line:-1 align:center
I'm already excited about Cinematic mode.


6
00:00:18,652 --> 00:00:21,788 line:-2
And now I'm even more excited
about showing


7
00:00:21,822 --> 00:00:24,525 line:-2
how you can integrate
the magic of Cinematic mode


8
00:00:24.558 --> 00:00:29.496 line:-2 align:center
in your very own app
using the new Cinematic API.


9
00:00:29.530 --> 00:00:32.499 line:-2 align:center
In this presentation,
I'll walk through the necessary steps


10
00:00:32,533 --> 00:00:37,671 line:-2
using the new API to build a sample app
which does playback and edit,


11
00:00:37,704 --> 00:00:41,675 line:-2
realizing the awesome capabilities
of Cinematic mode.


12
00:00:41,708 --> 00:00:44,444 line:-2
But before I start talking
about integration,


13
00:00:44,478 --> 00:00:47,414 line:-2
let me first show you
what Cinematic mode is,


14
00:00:47.447 --> 00:00:50.984 line:-2 align:center
how you can capture it,
and what you can do with it post-capture.


15
00:00:51.018 --> 00:00:53.954 line:-1 align:center
We introduced Cinematic mode in iPhone 13,


16
00:00:53.987 --> 00:00:57.191 line:-2 align:center
and it really is a tiny film crew
right in your pocket.


17
00:00:57.224 --> 00:00:59.660 line:-1 align:center
It brings you a camera


18
00:00:59.693 --> 00:01:04.231 line:-2 align:center
with beautiful shallow depth of field
and natural focus falloff,


19
00:01:04,264 --> 00:01:08,635 line:-2
a director, who directs the attention
and narrative by changing the focus,


20
00:01:08.669 --> 00:01:12.506 line:-2 align:center
and a focus puller,
who anticipates keyframes ahead of time


21
00:01:12,539 --> 00:01:16,143 line:-2
and creates smooth transitions
between focus points.


22
00:01:16,176 --> 00:01:17,845 line:-1
So how do you capture Cinematic mode?


23
00:01:17.878 --> 00:01:20.347 line:-1 align:center
It's captured right in the Camera app


24
00:01:20.380 --> 00:01:23.884 line:-2 align:center
on any device
in the iPhone 13 & 14 lineup,


25
00:01:23.917 --> 00:01:27.387 line:-2 align:center
and it gives you a rendering preview
as you record.


26
00:01:27,421 --> 00:01:29,590 line:-1
This makes it super accessible,


27
00:01:29,623 --> 00:01:32,459 line:-1
whether you're an aspiring indie filmmaker


28
00:01:32.492 --> 00:01:36.697 line:-2 align:center
or just like to add a magic touch
to your camping trip videos.


29
00:01:36.730 --> 00:01:39.466 line:-2 align:center
And while I did dream
of becoming a filmmaker,


30
00:01:39,499 --> 00:01:42,803 line:-2
I do love to capture Cinematic mode
of my own family.


31
00:01:42.836 --> 00:01:44.838 line:-1 align:center
But the magic doesn't stop here.


32
00:01:44.872 --> 00:01:47.541 line:-2 align:center
There's more to Cinematic mode
than meets the eye.


33
00:01:47.574 --> 00:01:52.412 line:-2 align:center
It allows you to make some pretty amazing
nondestructive edits post-capture.


34
00:01:52,446 --> 00:01:56,183 line:-2
You can change the aperture,
and thereby the amount of bokeh.


35
00:01:56,216 --> 00:01:58,886 line:-2
And you can redirect
the focus and narrative


36
00:01:58.919 --> 00:02:01.388 line:-1 align:center
using alternative detections.


37
00:02:01.421 --> 00:02:04.658 line:-2 align:center
This shows the post-capture editing
in Photos,


38
00:02:04,691 --> 00:02:10,197 line:-2
but editing can also be done in apps
like iMovie, Final Cut Pro, and Motion.


39
00:02:10.230 --> 00:02:14.134 line:-2 align:center
And now with the introduction
of the Cinematic API,


40
00:02:14.168 --> 00:02:17.905 line:-2 align:center
you can use Cinematic mode videos
for playback and edit


41
00:02:17,938 --> 00:02:20,507 line:-1
in your own amazing app.


42
00:02:20,541 --> 00:02:25,145 line:-2
The Cinematic API is widely available
on new macOS Sonoma,


43
00:02:25,179 --> 00:02:29,716 line:-1
iOS 17, iPadOS 17, and tvOS 17.


44
00:02:29.750 --> 00:02:31.852 line:-1 align:center
So this is really exciting.


45
00:02:31,885 --> 00:02:34,254 line:-1
First I'll start with some fundamentals


46
00:02:34,288 --> 00:02:37,925 line:-2
about the special Cinematic mode assets
and dataflow.


47
00:02:37,958 --> 00:02:42,563 line:-2
Then I will go through the specific steps
to get and play a Cinematic mode asset


48
00:02:42,596 --> 00:02:46,900 line:-2
with simple playback adjustments,
like changing the aperture.


49
00:02:46,934 --> 00:02:52,272 line:-2
And then how to do nondestructive edits
driving the focus in Cinematic mode


50
00:02:52.306 --> 00:02:56.243 line:-2 align:center
and how to save and load
these edit changes.


51
00:02:56.276 --> 00:02:59.046 line:-2 align:center
I will go through some of the new
Cinematic API calls


52
00:02:59,079 --> 00:03:04,351 line:-2
and also provide a sample code app
which can be used as a detailed reference.


53
00:03:04.384 --> 00:03:07.120 line:-2 align:center
But as promised,
let me start by explaining


54
00:03:07,154 --> 00:03:09,456 line:-1
some fundamentals about Cinematic mode.


55
00:03:09.489 --> 00:03:12.793 line:-2 align:center
Cinematic mode actually consists
of two files


56
00:03:12.826 --> 00:03:14.995 line:-1 align:center
and a dataflow from one to the other.


57
00:03:15,028 --> 00:03:17,764 line:-1
First there’s the rendered asset.


58
00:03:17,798 --> 00:03:21,201 line:-2
This is a baked file
with the Cinematic mode effect applied,


59
00:03:21,235 --> 00:03:26,073 line:-2
and it can be exported, shared,
and played as a regular QuickTime movie.


60
00:03:26.106 --> 00:03:29.009 line:-2 align:center
And then there’s the special
Cinematic mode asset,


61
00:03:29,042 --> 00:03:33,146 line:-2
which has all the information needed
to create the rendered asset.


62
00:03:33.180 --> 00:03:36.884 line:-2 align:center
It allows you to do nondestructive
post-capture edits,


63
00:03:36,917 --> 00:03:40,954 line:-2
such as change the aperture
and refocus to your narrative.


64
00:03:40.988 --> 00:03:43.624 line:-2 align:center
Let’s start by taking a look
at the rendered asset,


65
00:03:43,657 --> 00:03:47,094 line:-2
and break down a shot
with a little Cinematography 101.


66
00:03:48.729 --> 00:03:53.133 line:-2 align:center
Opening shot: we enter what’s clearly
an important game of street handball,


67
00:03:53,166 --> 00:03:56,803 line:-2
and by focusing on the main subject,
we really feel the tension


68
00:03:56,837 --> 00:03:59,640 line:-1
as he gets ready to make a big play.


69
00:03:59,673 --> 00:04:02,543 line:-2
He checks his team player.
He’s also ready.


70
00:04:02,576 --> 00:04:06,813 line:-2
Racking focus to him emphasizes
just how ready he is.


71
00:04:06.847 --> 00:04:09.149 line:-1 align:center
We rack focus back to our main subject.


72
00:04:09,183 --> 00:04:12,719 line:-2
This is it; you could cut
through the tension with a knife.


73
00:04:14.021 --> 00:04:16.823 line:-1 align:center
He makes the play and totally ruins it,


74
00:04:16.857 --> 00:04:19.092 line:-1 align:center
setting up some comic relief.


75
00:04:19,126 --> 00:04:22,162 line:-2
Now let’s change the narrative
to be about the team player


76
00:04:22.196 --> 00:04:26.466 line:-2 align:center
by focusing on him early in the shot,
and instead of going back and forth,


77
00:04:26,500 --> 00:04:28,402 line:-1
we keep him in focus.


78
00:04:28.435 --> 00:04:29.937 line:-1 align:center
I’ll be the voice of his thoughts.


79
00:04:29,970 --> 00:04:33,674 line:-2
“I love you, buddy,
but you always take forever."


80
00:04:33,707 --> 00:04:38,045 line:-2
"Yes, I’m ready,
but I have low expectations."


81
00:04:38.078 --> 00:04:40.214 line:-1 align:center
"What a waste of time. Bravo.”


82
00:04:40,247 --> 00:04:45,118 line:-2
So this was shot on iPhone 13, showcasing
the cinematography tools for storytelling


83
00:04:45,152 --> 00:04:47,020 line:-1
provided by Cinematic mode.


84
00:04:47.054 --> 00:04:51.525 line:-2 align:center
And to produce this rendered asset,
there’s the special Cinematic mode asset.


85
00:04:51.558 --> 00:04:54.494 line:-2 align:center
To support nondestructive
post-capture edits,


86
00:04:54.528 --> 00:04:58.065 line:-2 align:center
a Cinematic mode asset actually has
multiple tracks.


87
00:04:58.098 --> 00:04:59.700 line:-1 align:center
First is the video track,


88
00:04:59,733 --> 00:05:03,770 line:-2
which is the original QuickTime movie
as captured.


89
00:05:03.804 --> 00:05:08.942 line:-2 align:center
It can be HDR/SDR,
1080p at 30 frames per second,


90
00:05:08.976 --> 00:05:14.915 line:-2 align:center
and on iPhone 14, even 4K
at 24, 25, and 30 frames per second.


91
00:05:14,948 --> 00:05:17,551 line:-2
This track can be played
as a regular video,


92
00:05:17,584 --> 00:05:19,720 line:-2
but it lacks the aesthetics
and storytelling


93
00:05:19.753 --> 00:05:21.388 line:-1 align:center
compared to the rendered asset.


94
00:05:21,421 --> 00:05:24,024 line:-1
There’s no suspense and no comic relief,


95
00:05:24,057 --> 00:05:28,462 line:-2
and we're just watching
some people play a game in the back alley.


96
00:05:28.495 --> 00:05:30.831 line:-1 align:center
The second track contains disparity,


97
00:05:30,864 --> 00:05:35,068 line:-2
which is the pixel shift seen from two
cameras looking at the same scene.


98
00:05:35,102 --> 00:05:38,839 line:-2
Close objects are more shifted
than objects further away.


99
00:05:38,872 --> 00:05:42,242 line:-2
You can test this yourself
closing one eye and then the other,


100
00:05:42.276 --> 00:05:45.145 line:-2 align:center
and see how objects shift
at different distances.


101
00:05:45,179 --> 00:05:50,250 line:-2
Disparity is used for focus
and rendering the shallow depth of field.


102
00:05:50,284 --> 00:05:54,988 line:-2
The disparity map is at a lower resolution
than the video track.


103
00:05:55,022 --> 00:05:56,857 line:-1
The track, shown as a colorization,


104
00:05:56,890 --> 00:05:59,993 line:-2
contains relative
and not absolute disparity,


105
00:06:00.027 --> 00:06:05.566 line:-2 align:center
which means it can only be used relative
to other samples in the same map,


106
00:06:05.599 --> 00:06:08.769 line:-2 align:center
such as rendering relative
to a focus disparity


107
00:06:08.802 --> 00:06:13.106 line:-2 align:center
or transitioning
between two focus disparities.


108
00:06:13,140 --> 00:06:16,910 line:0
For insights about relative disparity
and great depth puns,


109
00:06:16,944 --> 00:06:22,382 line:0
I highly recommend WWDC17,
"Capturing Depth in iPhone Photography."


110
00:06:22,416 --> 00:06:27,087 line:-2
The third track contains important
metadata for rendering and editing.


111
00:06:27.120 --> 00:06:29.957 line:-1 align:center
The track consists of two things.


112
00:06:29.990 --> 00:06:32.759 line:-1 align:center
First, the rendering attributes,


113
00:06:32,793 --> 00:06:36,797 line:-2
which hold focus disparity
and aperture as an f-number.


114
00:06:36,830 --> 00:06:38,699 line:-1
These drive the rendering.


115
00:06:38.732 --> 00:06:43.337 line:-2 align:center
The focus, shown as an overlay,
is decided by the Cinematic engine,


116
00:06:43,370 --> 00:06:46,940 line:-1
while the aperture is chosen by the user.


117
00:06:46,974 --> 00:06:49,042 line:-1
And then there’s the Cinematic script,


118
00:06:49,076 --> 00:06:51,879 line:-2
which holds all the automatic
scene detections.


119
00:06:52,913 --> 00:06:56,283 line:0
This scene shows face, head and torso,


120
00:06:56,316 --> 00:07:02,356 line:0
which are grouped by an ID linking them
together over time when possible.


121
00:07:02.389 --> 00:07:08.595 line:-2 align:center
The script also holds the focus decisions,
deciding which detection to keep in focus.


122
00:07:08,629 --> 00:07:13,267 line:-2
The focus decisions can be changed
post-capture to follow other detections


123
00:07:13.300 --> 00:07:16.937 line:-2 align:center
and thereby changing
the narrative and rendering.


124
00:07:16.970 --> 00:07:19.873 line:-2 align:center
This is the dataflow
from the Cinematic mode asset


125
00:07:19.907 --> 00:07:21.542 line:-1 align:center
to the rendered asset.


126
00:07:21,575 --> 00:07:25,846 line:-2
As just covered, the Cinematic mode asset
holds all the information needed


127
00:07:25.879 --> 00:07:30.150 line:-2 align:center
for rendering and post-capture focus
and aperture changes.


128
00:07:30.184 --> 00:07:34.555 line:-2 align:center
Following is the optional editing,
where changes are nondestructive


129
00:07:34,588 --> 00:07:37,524 line:-2
and can always be reverted
back to the original.


130
00:07:37.558 --> 00:07:39.793 line:-1 align:center
If no editing is done,


131
00:07:39.826 --> 00:07:44.031 line:-2 align:center
the Cinematic engine controls
the focus disparity automatically,


132
00:07:44,064 --> 00:07:49,136 line:-2
and the aperture set by the user
at capture time remains unchanged.


133
00:07:49.169 --> 00:07:51.538 line:-1 align:center
With a focus disparity and aperture,


134
00:07:51.572 --> 00:07:54.208 line:-2 align:center
the rendering applies
the shallow depth of field


135
00:07:54,241 --> 00:07:57,978 line:-2
with accurate focus falloff
using the disparity map.


136
00:07:58,011 --> 00:08:01,515 line:-2
And finally, we get the rendered asset
with the effect applied,


137
00:08:01.548 --> 00:08:05.319 line:-2 align:center
which is a regular,
shareable QuickTime movie.


138
00:08:05.352 --> 00:08:07.754 line:-2 align:center
With a better understanding
of Cinematic mode,


139
00:08:07.788 --> 00:08:10.657 line:-2 align:center
it’s time to start building
the playback app.


140
00:08:10,691 --> 00:08:14,061 line:-2
But first we need to get hold
of a Cinematic mode asset,


141
00:08:14,094 --> 00:08:16,096 line:-1
so let’s look at the code to get it.


142
00:08:16.129 --> 00:08:20.501 line:-2 align:center
It’s quite easy to pick a Cinematic mode
asset from Photos library.


143
00:08:21,468 --> 00:08:25,305 line:0
Just use a Photos picker
and filter for Cinematic videos.


144
00:08:25,339 --> 00:08:29,943 line:0
The picker will get a local identifier
for the selected file.


145
00:08:29.977 --> 00:08:32.546 line:-1 align:center
As a non-code related side note,


146
00:08:32.579 --> 00:08:34.982 line:-2 align:center
if you don’t already have
a Cinematic mode asset,


147
00:08:35.015 --> 00:08:37.818 line:-2 align:center
it can be AirDropped
between different user devices


148
00:08:37.851 --> 00:08:39.686 line:-1 align:center
with the All Photos Data option


149
00:08:39,720 --> 00:08:43,223 line:-2
to include both the rendered asset
and the Cinematic mode asset.


150
00:08:43.257 --> 00:08:44.992 line:-1 align:center
Let’s get back to coding.


151
00:08:45,025 --> 00:08:50,564 align:center
Using the asset identifier from the pick,
I can now fetch a photos asset


152
00:08:50,597 --> 00:08:55,002 align:center
with information about the Cinematic mode
asset before I request it.


153
00:08:55,035 --> 00:08:59,239 line:0
I need to make sure to set request options
to get the original version


154
00:08:59,273 --> 00:09:04,077 align:center
and allow for network access
in case the asset is on iCloud,


155
00:09:04,111 --> 00:09:09,550 align:center
and then finally request
the Cinematic mode asset as an AVAsset.


156
00:09:09,583 --> 00:09:10,884 line:-1
And now to the exciting part.


157
00:09:10.918 --> 00:09:12.786 line:-1 align:center
We have gotten the Cinematic mode asset.


158
00:09:12.819 --> 00:09:14.121 line:-1 align:center
Let’s integrate playback.


159
00:09:14,154 --> 00:09:16,323 line:-1
A rendered asset can be played back


160
00:09:16,356 --> 00:09:20,794 line:-2
using AVPlayer and AVPlayerItem
as a regular movie,


161
00:09:20,827 --> 00:09:24,731 line:-2
and so can the movie track
inside the Cinematic mode asset.


162
00:09:24.765 --> 00:09:28.435 line:-2 align:center
But to realize the potential
of Cinematic mode assets,


163
00:09:28.468 --> 00:09:31.071 line:-1 align:center
we need to add a custom video compositor,


164
00:09:31.104 --> 00:09:34.107 line:-2 align:center
which can handle multiple tracks,
user changes,


165
00:09:34,141 --> 00:09:38,846 line:-2
and finally, call the Cinematic renderer
to compose the output.


166
00:09:38,879 --> 00:09:43,517 line:-2
This custom compositor can also be used
for thumbnails and offline export,


167
00:09:43.550 --> 00:09:49.656 line:-2 align:center
but let’s focus on using it for playback
and editing of Cinematic mode assets.


168
00:09:49,690 --> 00:09:53,594 align:center
I will only go into details specific
to the Cinematic API,


169
00:09:53,627 --> 00:09:58,866 align:center
so for additional insights on custom
video compositor classes and HDR,


170
00:09:58,899 --> 00:10:05,639 line:0
I recommend WWDC20, "Edit and Play Back
HDR Video with AVFoundation."


171
00:10:05,672 --> 00:10:08,475 align:center
Let’s start using the Cinematic API.


172
00:10:08.509 --> 00:10:12.012 line:-1 align:center
The Cinematic API uses the prefix CN,


173
00:10:12,045 --> 00:10:15,349 line:-2
so you might be able to spot
the three API calls needed


174
00:10:15.382 --> 00:10:20.120 line:-2 align:center
to set up the rendering session which
will render the shallow depth of field.


175
00:10:20.153 --> 00:10:24.458 line:-2 align:center
The first call gets the rendering
attributes from the Cinematic asset.


176
00:10:24,491 --> 00:10:28,295 line:-2
The second sets up a rendering session
with these attributes.


177
00:10:28.328 --> 00:10:30.564 line:-1 align:center
The rendering session uses the GPU,


178
00:10:30.597 --> 00:10:34.535 line:-2 align:center
so I need to provide
a metal command queue.


179
00:10:34,568 --> 00:10:38,305 line:0
And the last call sets
the rendering quality to export.


180
00:10:38,338 --> 00:10:41,341 line:0
Quality can be set to different enums
like preview and export


181
00:10:41,375 --> 00:10:44,711 line:0
depending on your performance
and quality constraints.


182
00:10:44,745 --> 00:10:48,916 line:-2
In these and following code snippets,
I have removed good practice error checks,


183
00:10:48,949 --> 00:10:53,887 line:-2
like guard let else error,
just to focus on the core code.


184
00:10:53.921 --> 00:10:57.457 line:-1 align:center
The custom compositor needs a composition,


185
00:10:57,491 --> 00:11:01,828 line:-2
which includes the Cinematic asset info
needed to render the output.


186
00:11:01.862 --> 00:11:06.066 line:-2 align:center
In a typical case, you would need
multiple steps to add the multiple tracks,


187
00:11:06,099 --> 00:11:10,537 line:-2
but fortunately, we provide an easy way
to do this in just one step.


188
00:11:10,571 --> 00:11:12,706 line:-1
You can add all the tracks,


189
00:11:12.739 --> 00:11:16.043 line:-2 align:center
from the asset info to the composition,
directly.


190
00:11:16,076 --> 00:11:20,781 line:-2
The Cinematic composition info
is just like the Cinematic asset info,


191
00:11:20.814 --> 00:11:23.483 line:-1 align:center
but points to composition tracks.


192
00:11:23,517 --> 00:11:27,955 line:-2
Then I get the Cinematic script
from the Cinematic asset.


193
00:11:27.988 --> 00:11:32.025 line:-2 align:center
The Cinematic script holds
all the detections and focus decisions.


194
00:11:32.059 --> 00:11:35.062 line:-2 align:center
And I will go into more detail
about this later.


195
00:11:35,095 --> 00:11:39,633 line:-2
For the custom compositor, I set up
instruction with rendering session,


196
00:11:39,666 --> 00:11:42,769 line:-2
composition with asset tracks,
Cinematic script,


197
00:11:42,803 --> 00:11:45,138 line:-1
and aperture as an f-number.


198
00:11:45.172 --> 00:11:49.943 line:-2 align:center
This custom instruction describes how
to compose the rendered Cinematic content.


199
00:11:51,078 --> 00:11:53,981 align:center
To play the video,
I’ll need a video composition,


200
00:11:54,014 --> 00:11:58,619 align:center
to which I’ll add track IDs
from the Cinematic composition,


201
00:11:58,652 --> 00:12:01,021 align:center
add a sample custom compositor,


202
00:12:01,054 --> 00:12:04,324 line:0
which is where the renderer is called
to compose the effect,


203
00:12:04,358 --> 00:12:06,760 align:center
and add the composition instruction.


204
00:12:06,793 --> 00:12:10,864 line:-2
Let’s take a closer look at what goes on
in the custom compositor.


205
00:12:10.898 --> 00:12:14.034 line:-2 align:center
There are a few key things specific
to the Cinematic API


206
00:12:14,067 --> 00:12:17,671 line:-2
inside the startRequest function
in the custom compositor.


207
00:12:17,704 --> 00:12:21,942 line:0
Using the track IDs
from the Cinematic composition,


208
00:12:21,975 --> 00:12:25,279 align:center
I get the source buffers
for the current frame


209
00:12:25,312 --> 00:12:31,251 align:center
from the original video track,
the disparity track, the metadata track,


210
00:12:31,285 --> 00:12:34,922 align:center
and finally I create a buffer
for the rendered output.


211
00:12:34,955 --> 00:12:38,525 align:center
These buffers allow us
to make edits and new renders.


212
00:12:38,559 --> 00:12:42,362 line:0
From the metadata buffer,
I can get the rendering frame attributes,


213
00:12:42,396 --> 00:12:44,631 line:0
which drive the rendering.


214
00:12:44,665 --> 00:12:46,733 line:0
The metadata is an opaque structure,


215
00:12:46,767 --> 00:12:52,172 align:center
so I’ll use CNRenderingSession
and get the frame attributes directly.


216
00:12:52,206 --> 00:12:56,476 line:0
With the frame attributes,
I can now make optional playback changes,


217
00:12:56,510 --> 00:13:00,480 line:0
in this case by changing the aperture
f-number according to the instruction,


218
00:13:00,514 --> 00:13:04,284 align:center
which holds aperture changes
from a UI element.


219
00:13:04.318 --> 00:13:07.187 line:-2 align:center
Focus disparity can be changed
in a similar fashion,


220
00:13:07,221 --> 00:13:11,758 line:-2
but I’ll get back to making scene-driven
changes using detections later.


221
00:13:11,792 --> 00:13:15,762 line:-2
At this point, we're really,
really close to achieve playback.


222
00:13:15,796 --> 00:13:19,199 line:-2
I just need to get a command buffer
on the rendering command queue,


223
00:13:19,233 --> 00:13:23,804 line:-2
such that the composed output can be
rendered on the GPU.


224
00:13:23,837 --> 00:13:27,541 line:-2
Encode the rendering
using the updated frame attributes


225
00:13:27,574 --> 00:13:30,410 line:-1
and the image and disparity buffers.


226
00:13:30.444 --> 00:13:33.380 line:-2 align:center
Add a completion handler
for the output buffer,


227
00:13:33.413 --> 00:13:36.550 line:-2 align:center
which will be passed
to the video composition.


228
00:13:36,583 --> 00:13:38,886 line:-1
And finally commit the command buffer.


229
00:13:38,919 --> 00:13:42,256 line:-2
Now let’s try out playback
in the sample app.


230
00:13:42.289 --> 00:13:45.893 line:-2 align:center
I can now select a Cinematic mode asset
from Photos library.


231
00:13:47.895 --> 00:13:51.798 line:-2 align:center
And when I play back the asset,
the effect is applied in real time.


232
00:13:53.800 --> 00:13:58.372 line:-2 align:center
I can scrub back and forth
and make changes to aperture,


233
00:13:58,405 --> 00:14:00,474 line:-1
which changes the amount of bokeh.


234
00:14:04.478 --> 00:14:06.513 line:-1 align:center
Stopping down minimizes the effect.


235
00:14:09.516 --> 00:14:11.852 line:-1 align:center
Opening up increases it.


236
00:14:11,885 --> 00:14:13,287 line:-1
Maybe this is too much.


237
00:14:15.289 --> 00:14:16.623 line:-1 align:center
I think this looks good.


238
00:14:17,624 --> 00:14:19,159 line:-1
The app is already pretty cool,


239
00:14:19,193 --> 00:14:22,229 line:-2
but it will get even cooler
in the upcoming edit section.


240
00:14:22,262 --> 00:14:23,997 line:-1
And to remind you, as a reference,


241
00:14:24,031 --> 00:14:27,201 line:-2
code for each part is available
in the sample app.


242
00:14:27,234 --> 00:14:32,072 line:-2
I will now move on to extend the playback
app and custom video compositor


243
00:14:32.105 --> 00:14:34.775 line:-2 align:center
to do more advanced
and nondestructive edits


244
00:14:34,808 --> 00:14:38,345 line:-2
by changing the Cinematic script
and thereby the focus.


245
00:14:38,378 --> 00:14:43,050 line:-2
But let’s revisit the Photos app
editing environment for Cinematic mode


246
00:14:43.083 --> 00:14:45.419 line:-1 align:center
and look specifically at the focus,


247
00:14:45.452 --> 00:14:48.255 line:-2 align:center
which is automatically driven
during capture


248
00:14:48,288 --> 00:14:53,594 line:-2
by detecting objects
and deciding where and on what to focus.


249
00:14:53,627 --> 00:14:57,531 line:-2
These detections and decisions
are all in the Cinematic script,


250
00:14:57,564 --> 00:15:00,634 line:-2
and the script can be changed
to your narrative.


251
00:15:00,667 --> 00:15:04,004 line:-2
The focus detection is shown
as a yellow square,


252
00:15:04,037 --> 00:15:09,209 line:-2
and below the timeline, we have keyframes
and focus decision changes.


253
00:15:09.243 --> 00:15:11.078 line:-1 align:center
To better understand how this works,


254
00:15:11,111 --> 00:15:15,115 line:-2
let’s break down the Cinematic script
structure with a simple example.


255
00:15:15,148 --> 00:15:20,587 align:center
Let’s start with just two Cinematic script
frames in a short sequence.


256
00:15:20,621 --> 00:15:23,724 line:0
Each hold all detections
for a given point in time,


257
00:15:23,757 --> 00:15:26,793 align:center
and in this case just two detections.


258
00:15:26,827 --> 00:15:30,430 align:center
The detections are tracked over time
with a group ID,


259
00:15:30,464 --> 00:15:34,067 align:center
which groups face, head,
and torso together.


260
00:15:34,101 --> 00:15:38,672 align:center
In addition, cats, dogs,
and balls are detected and tracked,


261
00:15:38,705 --> 00:15:43,010 line:0
but here we just have the face
of Actor 1 and Actor 2.


262
00:15:43,043 --> 00:15:47,748 line:0
An automatic base decision puts focus
on Actor 1 in the first frame,


263
00:15:47,781 --> 00:15:52,286 align:center
and focus will follow this track
until a new decision.


264
00:15:52,319 --> 00:15:54,888 line:0
Even after Actor 3 enters the scene


265
00:15:54,922 --> 00:15:58,025 align:center
and introduces a new face
and detection track,


266
00:15:58,058 --> 00:16:01,962 align:center
the focus remains on Actor 1.


267
00:16:01,995 --> 00:16:09,002 line:0
In frame 5, an automatic keyframe event
changes the decision and focus to Actor 2.


268
00:16:09,036 --> 00:16:13,040 align:center
And after just four frames,
Actor 3 does a disheartened exit


269
00:16:13,073 --> 00:16:16,877 line:0
without ever getting
the focused attention she deserves.


270
00:16:16,910 --> 00:16:21,915 align:center
Focus remains on Actor 2
for the rest of the sequence.


271
00:16:21,949 --> 00:16:25,919 line:-2
These automatic base decisions are decided
on a range of parameters


272
00:16:25.953 --> 00:16:32.059 line:-2 align:center
like who faces the camera, who looks away,
who’s closer, and what’s interesting.


273
00:16:32.092 --> 00:16:34.728 line:-2 align:center
And while we do our best
to create a good narrative,


274
00:16:34.761 --> 00:16:36.230 line:-1 align:center
you might have another one.


275
00:16:36,263 --> 00:16:39,933 line:-2
Luckily, decisions can be changed,
and actually in two ways.


276
00:16:39,967 --> 00:16:44,037 line:-2
The first one is to add
a weak user decision.


277
00:16:44,071 --> 00:16:48,075 align:center
This brings Actor 3 into focus
as she enters the scene.


278
00:16:48,108 --> 00:16:51,345 line:0
However, a weak decision
only follows a track


279
00:16:51,378 --> 00:16:55,883 line:0
until the next base or user decision,
which happens in frame 5,


280
00:16:55,916 --> 00:17:01,588 align:center
where a base decision changes focus
to Actor 2 for the remaining frames.


281
00:17:01,622 --> 00:17:04,491 line:0
So if we wanted focus to stay on Actor 3,


282
00:17:04,525 --> 00:17:07,661 align:center
we could add another weak decision
in frame 5,


283
00:17:07,694 --> 00:17:09,596 line:0
or we could use something stronger.


284
00:17:09.630 --> 00:17:11.298 line:-1 align:center
Yes, you might have guessed it,


285
00:17:11,331 --> 00:17:13,333 line:-1
a strong user decision.


286
00:17:13,367 --> 00:17:16,170 line:-2
A strong decision will keep focus
on a subject


287
00:17:16.203 --> 00:17:19.439 line:-2 align:center
until the next user decision
to focus elsewhere


288
00:17:19,473 --> 00:17:22,209 line:-1
or the end of the detection track.


289
00:17:22,242 --> 00:17:25,546 line:0
Adding a strong decision
brings Actor 3 into focus


290
00:17:25,579 --> 00:17:28,882 line:0
and overrides the following base decision.


291
00:17:28,916 --> 00:17:32,152 align:center
After the detection track of Actor 3 ends,


292
00:17:32,186 --> 00:17:35,222 align:center
the focus falls back to the base decision,


293
00:17:35,255 --> 00:17:38,559 line:0
which is to focus on Actor 2.


294
00:17:38,592 --> 00:17:41,128 line:-1
The decision hierarchy works as follows:


295
00:17:41,161 --> 00:17:44,264 line:-1
user decisions on top of base decisions,


296
00:17:44.298 --> 00:17:46.733 line:-1 align:center
user decisions apply when possible,


297
00:17:46.767 --> 00:17:49.169 line:-1 align:center
base decisions fill the gaps.


298
00:17:49,203 --> 00:17:54,474 line:-2
So as done in this example, a user
can change just parts of the script.


299
00:17:54,508 --> 00:17:59,746 line:-2
And while both decisions revert to a base
decision when a detection track ends,


300
00:17:59,780 --> 00:18:04,418 line:-2
a strong decision holds it’s focus track
as long as possible.


301
00:18:04,451 --> 00:18:06,320 line:-1
Before moving to change the script,


302
00:18:06,353 --> 00:18:09,756 line:-2
let’s get a script frame
and draw the detection boxes.


303
00:18:09.790 --> 00:18:15.229 line:-2 align:center
First I need to grab the frame time
from the video composition request,


304
00:18:15,262 --> 00:18:20,000 line:-2
and then get the Cinematic script frame
for that current point in time.


305
00:18:20,033 --> 00:18:24,771 line:-2
This script frame holds all detections,
including the focus detection.


306
00:18:24,805 --> 00:18:28,208 line:-1
Now it’s easy to draw the detection boxes.


307
00:18:28,242 --> 00:18:31,478 line:0
By iterating all the detections
in a script,


308
00:18:31,512 --> 00:18:35,883 align:center
I can get each detection rectangle
and draw it to a texture


309
00:18:35,916 --> 00:18:39,553 align:center
attached to a renderEncoder
using a draw command.


310
00:18:39,586 --> 00:18:42,923 line:0
In this example,
the detections are drawn in white.


311
00:18:42,956 --> 00:18:46,426 line:0
And to emphasize
what’s currently the focusDetection,


312
00:18:46,460 --> 00:18:48,729 align:center
let’s draw that in another color.


313
00:18:48,762 --> 00:18:53,433 line:0
I get the focus detection directly
from the Cinematic script frame,


314
00:18:53,467 --> 00:18:56,803 align:center
get its corresponding rectangle,
and to make it stand out,


315
00:18:56,837 --> 00:19:00,974 line:0
I draw the focus rectangle in yellow.


316
00:19:01.008 --> 00:19:04.945 line:-2 align:center
Let’s try the playback app
with the added detection overlay.


317
00:19:04.978 --> 00:19:09.216 line:-2 align:center
I can now enable the new detection overlay
to draw the detections.


318
00:19:10.784 --> 00:19:14.388 line:-2 align:center
This scene shows face, head,
and torso in white


319
00:19:14.421 --> 00:19:17.157 line:-1 align:center
and the focus detection in yellow.


320
00:19:17.191 --> 00:19:22.062 line:-2 align:center
You can customize the overlay to only show
a specific subset of detections


321
00:19:22.095 --> 00:19:24.364 line:-1 align:center
if that makes sense for your app.


322
00:19:24.398 --> 00:19:28.168 line:-2 align:center
When I start playback,
notice how the focus and rendering follows


323
00:19:28,202 --> 00:19:30,904 line:-2
the yellow focus detections
through the movie


324
00:19:30,938 --> 00:19:34,808 line:-2
while alternative detections
just show in white.


325
00:19:34.842 --> 00:19:38.579 line:-2 align:center
Let me show you how to use
these alternative detections


326
00:19:38,612 --> 00:19:39,780 line:-1
to change the focus.


327
00:19:40,747 --> 00:19:43,050 align:center
Once we know
how to draw the detection boxes,


328
00:19:43,083 --> 00:19:47,588 line:0
actually changing the script
with a UI tapping point is very similar.


329
00:19:47,621 --> 00:19:50,657 line:0
Again I’ll iterate over all detections,


330
00:19:50,691 --> 00:19:53,694 line:0
and if the tapping point is inside
a detection,


331
00:19:53,727 --> 00:19:59,533 line:0
I’ll get it’s corresponding detectionID
and create a new decision.


332
00:19:59,566 --> 00:20:02,703 line:0
The decision strength can be set
in the UI.


333
00:20:02,736 --> 00:20:07,674 line:0
In the sample app, weak is set with
a single tap and strong with a double tap,


334
00:20:07,708 --> 00:20:10,177 align:center
but the UI is really up to you.


335
00:20:11,311 --> 00:20:15,315 align:center
Then finally I add this new user decision
to the Cinematic script,


336
00:20:15,349 --> 00:20:18,018 line:0
and the script has changed.


337
00:20:18,051 --> 00:20:21,622 line:-2
So let me talk about
how the updated script drives the focus.


338
00:20:21,655 --> 00:20:25,726 line:-2
Let’s consider this a normal clip length
and look at three decisions


339
00:20:25.759 --> 00:20:28.996 line:-2 align:center
and their corresponding
focus detection tracks.


340
00:20:29,029 --> 00:20:34,801 line:0
Let’s arrange the focus tracks according
to time and distance in a 2D plot.


341
00:20:34,835 --> 00:20:38,238 line:0
Because the Cinematic engine knows
the whole updated script,


342
00:20:38,272 --> 00:20:42,709 line:0
it can make smooth focus transitions
ahead of time.


343
00:20:42,743 --> 00:20:45,145 align:center
It looks something like this,


344
00:20:45,179 --> 00:20:47,347 line:0
where a focus rack starts ahead of time


345
00:20:47,381 --> 00:20:50,951 line:0
to reach focus
at the beginning of each keyframe.


346
00:20:50.984 --> 00:20:53.787 line:-2 align:center
It’s pretty magical,
and it works like a focus puller,


347
00:20:53.820 --> 00:20:59.359 line:-2 align:center
who can direct attention and rack focus
ahead of time by knowing the set markers.


348
00:21:00,394 --> 00:21:02,696 line:-1
The racked focus disparity can be accessed


349
00:21:02,729 --> 00:21:07,434 line:-2
directly from a frame
in the updated Cinematic script.


350
00:21:07.467 --> 00:21:10.704 line:-2 align:center
I have already shown
how to extract a script frame,


351
00:21:10.737 --> 00:21:14.007 line:-2 align:center
and changing the frame attributes
for focus is similar


352
00:21:14,041 --> 00:21:16,310 line:-1
to changing the aperture.


353
00:21:16.343 --> 00:21:19.246 line:-2 align:center
Once I have a script frame
from the updated script,


354
00:21:19,279 --> 00:21:23,617 line:-2
I can update the frame attributes
for focus disparity directly.


355
00:21:23.650 --> 00:21:26.353 line:-2 align:center
This will pass focus
with smooth transitions


356
00:21:26,386 --> 00:21:29,556 line:-2
according to the updated script
to the renderer.


357
00:21:29,590 --> 00:21:34,361 line:-2
Let’s try out tapping to change the script
and focus in the sample app.


358
00:21:34,394 --> 00:21:38,098 line:-1
Going from playback mode to edit,


359
00:21:38,131 --> 00:21:41,435 line:-1
I can now update the Cinematic script.


360
00:21:41,468 --> 00:21:44,872 line:-2
I can change focus decisions
by either single-tapping


361
00:21:44.905 --> 00:21:48.475 line:-2 align:center
to get a weak decision,
shown as a yellow dashed box,


362
00:21:48.509 --> 00:21:53.747 line:-2 align:center
or by double-tapping to get
a strong decision and a solid yellow box.


363
00:21:53,780 --> 00:21:57,851 line:-2
You can see how the focus and rendering
changes according to my user input


364
00:21:57,885 --> 00:22:00,821 line:-1
when I tab on different players.


365
00:22:00,854 --> 00:22:02,923 line:-1
I think this is super cool.


366
00:22:02,956 --> 00:22:05,425 line:-1
Scrub, scrub.


367
00:22:05.459 --> 00:22:08.262 line:-1 align:center
Tap, tap, tap.


368
00:22:08,295 --> 00:22:10,631 line:-1
Change the aperture.


369
00:22:10,664 --> 00:22:13,734 line:-1
Scrub, tap, tap, double-tap.


370
00:22:15.469 --> 00:22:19.306 line:-2 align:center
And now that I have completed editing,
how can I save these edit changes?


371
00:22:19,339 --> 00:22:22,576 line:-2
The script changes can be saved
in a separate data file,


372
00:22:22.609 --> 00:22:27.347 line:-2 align:center
and saving the changes separately means
the original remains unchanged.


373
00:22:27.381 --> 00:22:30.951 line:-2 align:center
And changes can always be reverted
back to the original.


374
00:22:30.984 --> 00:22:34.888 line:-1 align:center
So I get the script changes,


375
00:22:34.922 --> 00:22:38.559 line:-2 align:center
get the changes
as a compact binary representation,


376
00:22:38,592 --> 00:22:41,562 line:-1
and write the changes to a data file.


377
00:22:41,595 --> 00:22:45,199 line:-2
The Cinematic API handles
the data representation.


378
00:22:45.232 --> 00:22:48.268 line:-2 align:center
And you will need to store this data
in your app


379
00:22:48,302 --> 00:22:50,737 line:-1
so it can be reloaded to your needs.


380
00:22:50,771 --> 00:22:56,076 line:-2
Loading script changes is done
in three equally easy steps.


381
00:22:56.109 --> 00:23:00.681 line:-2 align:center
I get the binary data from the data file,
unpack the script changes,


382
00:23:00.714 --> 00:23:04.418 line:-2 align:center
and reload the changes
into the Cinematic script.


383
00:23:04.451 --> 00:23:08.989 line:-2 align:center
Changes can also be loaded simultaneously
with the original script.


384
00:23:09.022 --> 00:23:11.325 line:-1 align:center
So that’s how we can edit and render


385
00:23:11.358 --> 00:23:14.261 line:-2 align:center
and save and load
the Cinematic script changes.


386
00:23:14.294 --> 00:23:18.432 line:-2 align:center
As mentioned earlier,
the custom video compositor can be used


387
00:23:18.465 --> 00:23:21.401 line:-1 align:center
to export rendered videos.


388
00:23:21,435 --> 00:23:25,906 line:-2
And these can be rendered
right back into Photos library.


389
00:23:25.939 --> 00:23:29.643 line:-2 align:center
This is covered in detail
in the sample code.


390
00:23:29.676 --> 00:23:34.081 line:-2 align:center
The API also includes a tracker,
CNObjectTracker,


391
00:23:34,114 --> 00:23:38,018 line:-2
which can be used
for objects without automatic detections.


392
00:23:38,051 --> 00:23:42,155 line:-2
The sample code covers
how the tracker can be engaged


393
00:23:42.189 --> 00:23:45.792 line:-2 align:center
by tapping
on an object without a detection.


394
00:23:45,826 --> 00:23:48,128 line:-2
And the tracker will provide
a detection track


395
00:23:48.161 --> 00:23:50.898 line:-1 align:center
and can be added to the script.


396
00:23:50,931 --> 00:23:53,400 line:-2
And now to some more advanced
possibilities.


397
00:23:53.433 --> 00:23:57.404 line:-2 align:center
You can also add custom tracking
by providing your own tracker


398
00:23:57,437 --> 00:24:01,441 line:-2
and add your own custom detection track
to the script.


399
00:24:01,475 --> 00:24:05,846 line:-2
And you can make custom changes
to the rendering attributes per frame,


400
00:24:05.879 --> 00:24:10.150 line:-2 align:center
allowing for custom transitions
and aperture changes.


401
00:24:10.184 --> 00:24:12.686 line:-2 align:center
I’m personally super excited
about what you can all do


402
00:24:12.719 --> 00:24:15.155 line:-1 align:center
with Cinematic mode and the new API.


403
00:24:15.189 --> 00:24:18.659 line:-2 align:center
And whether it’s a simple app
or a complex editor,


404
00:24:18,692 --> 00:24:22,062 line:-2
I’m sure you can come up
with ideas we haven’t even thought of.


405
00:24:22.095 --> 00:24:25.432 line:-2 align:center
This was an introduction
to the new Cinematic API,


406
00:24:25.465 --> 00:24:28.936 line:-2 align:center
which allows you to integrate
Cinematic mode video assets


407
00:24:28,969 --> 00:24:32,306 line:-1
for playback with playback adjustments,


408
00:24:32.339 --> 00:24:34.274 line:-1 align:center
change the Cinematic script and focus


409
00:24:34.308 --> 00:24:37.411 line:-2 align:center
to make nondestructive edits
and new renders,


410
00:24:37.444 --> 00:24:39.947 line:-1 align:center
and save and load these script changes.


411
00:24:39.980 --> 00:24:42.950 line:-2 align:center
Please check out this and more
in the included sample app.


412
00:24:42.983 --> 00:24:46.086 line:-2 align:center
Thank you for your focus,
and happy coding.


413
00:24:46,119 --> 00:24:47,955 line:-1
♪ ♪

