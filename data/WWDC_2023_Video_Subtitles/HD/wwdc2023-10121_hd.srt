2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.444 --> 00:00:11.879 line:-1
Jen: Hello, I'm Jen Simmons,


4
00:00:11.912 --> 00:00:14.515 line:-2
a Safari and WebKit
Evangelist here at Apple.


5
00:00:14.548 --> 00:00:16.817 line:-1
It's been a fantastic year for WebKit.


6
00:00:16.850 --> 00:00:20.420 line:-2
We've already shipped more than 140
new web technologies


7
00:00:20.454 --> 00:00:23.924 line:-2
in multiple releases of Safari
throughout this year,


8
00:00:23.957 --> 00:00:28.228 line:-2
and we have several dozen more
new web technologies coming this fall.


9
00:00:28.262 --> 00:00:31.198 line:-2
There's so much,
there's no way we can cover it all,


10
00:00:31.231 --> 00:00:35.102 line:-1
so we decided to focus on CSS.


11
00:00:35.135 --> 00:00:41.141 line:-2
In this session, we'll take a look at some
of the most exciting new features in CSS,


12
00:00:41.175 --> 00:00:45.045 line:-2
including brand-new possibilities
with layout,


13
00:00:45.078 --> 00:00:47.614 line:-1
a whole generation of color tools


14
00:00:47.648 --> 00:00:51.752 line:-2
that make full use
of today's amazing displays,


15
00:00:51.785 --> 00:00:56.723 line:-2
productive ways to solve tricky problems
with new pseudo-classes,


16
00:00:56.757 --> 00:01:01.762 line:-2
and CSS that lets you take your typography
to the next level.


17
00:01:01.795 --> 00:01:04.598 line:-2
I'm going to share things
that have already shipped,


18
00:01:04.631 --> 00:01:07.701 line:-1
things that will ship in Safari 17,


19
00:01:07.734 --> 00:01:10.838 line:-2
and things we're working on
for the future.


20
00:01:10.871 --> 00:01:15.309 line:-2
To see the future today,
download Safari Technology Preview.


21
00:01:15.342 --> 00:01:18.879 line:-1
It's there you'll find Masonry Layout.


22
00:01:18.912 --> 00:01:22.149 line:-2
For years, this has been
a popular layout pattern on the web.


23
00:01:22.182 --> 00:01:25.252 line:-2
It's a great way to pack
content of different sizes.


24
00:01:25.285 --> 00:01:29.122 line:-2
You can accomplish a layout with
this shape by using CSS Multicolumn,


25
00:01:29.156 --> 00:01:34.394 line:-2
if it's OK that the content order
starts in the first column,


26
00:01:34.428 --> 00:01:36.630 line:-1
flows down below the viewport,


27
00:01:36.663 --> 00:01:39.766 line:-2
goes back up to the top the second column,
flows down it,


28
00:01:39.800 --> 00:01:43.237 line:-1
then on to the third column, and so on.


29
00:01:43.270 --> 00:01:45.339 line:-1
If this works for your project, great.


30
00:01:45.372 --> 00:01:49.510 line:-2
CSS Multicolumn is a layout mechanism
that's been in browsers for decades.


31
00:01:49.543 --> 00:01:52.746 line:-1
But often this doesn't work.


32
00:01:52.779 --> 00:01:56.884 line:-2
Instead, designers want their content
to flow across the page,


33
00:01:56.917 --> 00:02:02.656 line:-2
placing each item in whichever column
puts it as close to the top as possible.


34
00:02:02.689 --> 00:02:06.026 line:-2
Which is especially needed when
more content gets loaded at the bottom


35
00:02:06.059 --> 00:02:08.061 line:-1
as the user scrolls.


36
00:02:08.095 --> 00:02:11.999 line:-2
So websites have had to use JavaScript
to accomplish this.


37
00:02:12.032 --> 00:02:17.838 line:-2
But JavaScript is slower at layout
than CSS, and it's more fragile.


38
00:02:17.871 --> 00:02:19.540 line:-1
It's harder to code.


39
00:02:19.573 --> 00:02:23.210 line:-1
Layout really belongs in CSS.


40
00:02:23.243 --> 00:02:27.581 line:-2
A proposal for creating Masonry as part
of CSS Grid was started several years ago


41
00:02:27.614 --> 00:02:31.418 line:-2
and implemented in Firefox
as an experiment behind a flag.


42
00:02:31.451 --> 00:02:34.688 line:-2
We believe in this idea
and we'd like to see it come to the web,


43
00:02:34.721 --> 00:02:38.125 line:-2
so now it's in Safari Technology Preview--
on by default--


44
00:02:38.158 --> 00:02:40.761 line:-2
where you can try it out,
tell us what you think,


45
00:02:40.794 --> 00:02:43.030 line:-1
and help us move it forward.


46
00:02:43.063 --> 00:02:44.565 line:-1
Here's an example.


47
00:02:44.598 --> 00:02:49.303 line:-2
I created this typical Masonry layout
with very little CSS.


48
00:02:49.336 --> 00:02:52.239 line:-1
display: grid gets us started,


49
00:02:52.272 --> 00:02:55.275 line:-2
and grid-template-columns gives us
flexible columns


50
00:02:55.309 --> 00:03:00.013 line:-2
that automatically increase in number
when more space is available.


51
00:03:00.047 --> 00:03:05.385 line:-2
Then grid-template-rows: masonry
packs items into a Masonry pattern


52
00:03:05.419 --> 00:03:09.189 line:-2
in the row direction
with just one line of code.


53
00:03:09.223 --> 00:03:12.860 line:-2
Making this part of CSS Grid gives us
tremendous flexibility.


54
00:03:12.893 --> 00:03:15.629 line:-1
You can define Masonry in one dimension,


55
00:03:15.662 --> 00:03:20.067 line:-2
and use the power of Grid to do
anything you want in the other dimension,


56
00:03:20.100 --> 00:03:24.104 line:-2
like making the columns different sizes
with fr units,


57
00:03:24.137 --> 00:03:26.740 line:-1
or making the first column fixed-width,


58
00:03:26.773 --> 00:03:29.343 line:-2
while the middle is flexible
using an fr unit,


59
00:03:29.376 --> 00:03:33.180 line:-2
and the third is made flexible
with a minmax value.


60
00:03:33.213 --> 00:03:37.050 line:-2
Combining Masonry with Grid makes for
a far more powerful mechanism


61
00:03:37.084 --> 00:03:39.620 line:-1
than the popular JavaScript library.


62
00:03:39.653 --> 00:03:41.922 line:-1
This is all still a work in progress.


63
00:03:41.955 --> 00:03:44.391 line:-2
More discussion is needed
in the CSS Working Group,


64
00:03:44.424 --> 00:03:48.462 line:-2
where browser makers and others
come together to agree on a path forward,


65
00:03:48.495 --> 00:03:51.865 line:-2
including work to make sure
that it's fully accessible.


66
00:03:51.899 --> 00:03:55.269 line:-2
We look forward to shipping
Masonry in Safari once it's ready.


67
00:03:55.302 --> 00:03:58.205 line:-2
What is ready
to be shipped in browsers today?


68
00:03:58,238 --> 00:03:59,740
Margin trim.


69
00:03:59,773 --> 00:04:02,442
The new margin-trim property makes it easy


70
00:04:02,476 --> 00:04:06,813
to remove margins from elements
that push up against their container.


71
00:04:06,847 --> 00:04:08,348
Let me explain.


72
00:04:08.382 --> 00:04:12.152 line:-2
Imagine we have a headline
and three paragraphs.


73
00:04:12.186 --> 00:04:16.657 line:-2
They all have top and bottom margins,
which provide space between them,


74
00:04:16.690 --> 00:04:20.594 line:-2
as well as space above and below
the whole group.


75
00:04:20.627 --> 00:04:23.630 line:-2
There's also padding
applied to the container,


76
00:04:23.664 --> 00:04:26.934 line:-1
the article element with a class of card.


77
00:04:26.967 --> 00:04:31.104 line:-2
The margin above the headline
and the top padding on the container


78
00:04:31.138 --> 00:04:34.341 line:-2
get added together to determine
how much space there is


79
00:04:34.374 --> 00:04:38.478 line:-2
between the top edge of the box
and that first line of text.


80
00:04:38,512 --> 00:04:40,180
Same on the bottom.


81
00:04:40,214 --> 00:04:42,783
The margin below the last paragraph


82
00:04:42,816 --> 00:04:46,453
gets added to the bottom padding
on the container,


83
00:04:46,486 --> 00:04:50,657
which probably adds up
to more whitespace than intended.


84
00:04:50,691 --> 00:04:55,596
What we want instead is to only have
the padding on the top and bottom


85
00:04:55.629 --> 00:04:58.198 line:-1
and to not have any margins involved.


86
00:04:58.232 --> 00:05:01.668 line:-2
This will give us more uniform space
around the box.


87
00:05:01.702 --> 00:05:04.338 line:-2
What we need is a way to eliminate
any margins


88
00:05:04.371 --> 00:05:06.907 line:-1
that push up against the container.


89
00:05:06.940 --> 00:05:09.076 line:-1
You've probably attempted to handle this


90
00:05:09.109 --> 00:05:12.112 line:-2
by manually removing the top margin
from the headline


91
00:05:12.145 --> 00:05:15.048 line:-2
and the bottom margin
from the last paragraph


92
00:05:15.082 --> 00:05:18.018 line:-1
and, well, hoping for the best.


93
00:05:18.051 --> 00:05:20.454 line:-1
But then unexpected content shows up.


94
00:05:20.487 --> 00:05:24.258 line:-2
Maybe another instance starts with an h3,
and no one wrote that code,


95
00:05:24.291 --> 00:05:29.096 line:-2
or somebody sticks an h2 in the middle
and it's missing its top margin.


96
00:05:29.129 --> 00:05:31.899 line:-1
Margin trim gives us a better solution.


97
00:05:31.932 --> 00:05:34.935 line:-2
Instead, you can ask
for exactly what you want


98
00:05:34.968 --> 00:05:39.139 line:-2
by applying margin-trim: block
to the container.


99
00:05:39.173 --> 00:05:43.177 line:-2
We've added support for margin-trim
in Safari 16.4.


100
00:05:43.210 --> 00:05:47.848 line:-2
You can also use margin-trim: inline
to trim margins in the inline direction.


101
00:05:47.881 --> 00:05:49.483 line:-1
That's margin trim.


102
00:05:49.516 --> 00:05:53.387 line:-2
It simply solves a common need
in a more robust manner.


103
00:05:53.420 --> 00:05:56.456 line:-2
CSS for layout has really matured
over the last six years


104
00:05:56.490 --> 00:06:00.360 line:-2
since the advent of CSS Grid
in March of 2017.


105
00:06:00.394 --> 00:06:04.898 line:-2
Today's layouts are a radical improvement
over what we did a decade ago.


106
00:06:04.932 --> 00:06:09.803 line:-2
In the same timespan,
there's been another radical leap forward


107
00:06:09.837 --> 00:06:14.041 line:-2
that's gone a bit unnoticed
by web designers and developers:


108
00:06:14.074 --> 00:06:16.310 line:-1
a leap in color.


109
00:06:16.343 --> 00:06:20.414 line:-2
The world is full of color,
especially outside.


110
00:06:20.447 --> 00:06:25.686 line:-2
The dynamic range, the saturation,
all the nuances and possibilities.


111
00:06:25,719 --> 00:06:29,089
Imagine this diagram represents
every color


112
00:06:29,122 --> 00:06:32,159
the human eye might possibly see.


113
00:06:32,192 --> 00:06:37,431
A line around a subset of these colors
shows what can be represented in sRGB,


114
00:06:37,464 --> 00:06:39,633
the default color gamut on the web,


115
00:06:39.666 --> 00:06:41.935 line:-1
which has served us well.


116
00:06:41.969 --> 00:06:44.605 line:-2
It's certainly better
than what we used the '90s,


117
00:06:44.638 --> 00:06:48.208 line:-2
but it'd be great to move
past the limitations of sRGB


118
00:06:48.242 --> 00:06:51.011 line:-1
and convey more of the visual spectrum.


119
00:06:51,845 --> 00:06:54,548
P3 color does just that.


120
00:06:54,581 --> 00:06:57,284
Apple started supporting
wide gamut Display P3


121
00:06:57,317 --> 00:07:00,387
on our hardware and software
over seven years ago,


122
00:07:00,420 --> 00:07:03,724
first on iMac in late 2015, then iPad,


123
00:07:03,757 --> 00:07:06,860
and iPhone, beginning with iPhone 7.


124
00:07:06,894 --> 00:07:09,730
The P3 color gamut is capable
of displaying


125
00:07:09,763 --> 00:07:13,367
50% more colors than sRGB.


126
00:07:13.400 --> 00:07:15.802 line:-2
The displays on modern devices
are stunning.


127
00:07:15.836 --> 00:07:21.308 line:-2
These all support wide gamut P3 with
brighter colors and deeper saturation.


128
00:07:21.341 --> 00:07:25.979 line:-2
And it's long past time for web design
to take full advantage.


129
00:07:26.013 --> 00:07:30.083 line:-2
There's a media query in CSS
for testing color gamut support,


130
00:07:30.117 --> 00:07:33.720 line:-2
when you need a way
to conditionally specify CSS,


131
00:07:33.754 --> 00:07:37.791 line:-2
depending on what the user's hardware
and software can do.


132
00:07:37.824 --> 00:07:42.396 line:-2
We shipped support for
the Color Gamut Media Query back in 2016,


133
00:07:42.429 --> 00:07:44.865 line:-1
in Safari 10.0.


134
00:07:44.898 --> 00:07:47.234 line:-1
When it comes to picking a color,


135
00:07:47.267 --> 00:07:50.370 line:-1
there are, of course, many ways to do it;


136
00:07:50.404 --> 00:07:52.973 line:-1
named colors, hexadecimal values,


137
00:07:53,006 --> 00:07:57,110
the RGB function,
which thinks in red, green and blue.


138
00:07:57,144 --> 00:08:00,681
HSL, for hue, saturation, and lightness,


139
00:08:00,714 --> 00:08:05,519
and HWB, with its hue, whiteness,
and blackness.


140
00:08:05,552 --> 00:08:10,390
All of these ways of modeling color are
capable of creating the same result.


141
00:08:10.424 --> 00:08:14.561 line:-2
All of these models are limited
to the sRGB color gamut.


142
00:08:14.595 --> 00:08:19.533 line:-2
It's impossible to represent the colors
that only exist in P3


143
00:08:19.566 --> 00:08:21.902 line:-1
if you use these color models.


144
00:08:21.935 --> 00:08:26.340 line:-2
Because of that, there are
four new ones now defined in CSS.


145
00:08:26.373 --> 00:08:30.844 line:-1
LCH, OKLCH, LAB, and OKLAB.


146
00:08:30.878 --> 00:08:34.982 line:-2
These models can represent colors
in any gamut, including Display P3,


147
00:08:35.015 --> 00:08:38.952 line:-2
or any other color gamut that might
come to the web in the future.


148
00:08:38.986 --> 00:08:41.722 line:-1
They're defined with three values each.


149
00:08:41.755 --> 00:08:46.059 line:-1
In all four, the "L" represents Lightness


150
00:08:46.093 --> 00:08:49.796 line:-2
LCH and OKLCH also take values
for Chroma,


151
00:08:49.830 --> 00:08:52.466 line:-1
or how intense that color is,


152
00:08:52.499 --> 00:08:57.738 line:-2
and for Hue,
or where on the color spectrum it lies.


153
00:08:57,771 --> 00:09:01,675
LAB and OKLAB declare a value
along an A axis--


154
00:09:01,708 --> 00:09:07,247
or where the color is along an axis
that runs from green to red--


155
00:09:07,281 --> 00:09:12,653
and a B axis--or how blue to yellow is it.


156
00:09:12.686 --> 00:09:16.823 line:-2
You can create colors
with LCH, OKLCH, LAB, and OKLAB


157
00:09:16.857 --> 00:09:19.693 line:-1
by using new functions for each.


158
00:09:19.726 --> 00:09:24.698 line:-2
If a browser has added support for P3,
then these functions can represent colors


159
00:09:24.731 --> 00:09:29.736 line:-2
that only exist in P3
as well as those within sRGB.


160
00:09:29,770 --> 00:09:34,508
We shipped support for these functions
in Safari 15.0 and 15.4.


161
00:09:34,541 --> 00:09:37,611
Chrome, Edge, and Firefox are
adding support this year,


162
00:09:37,644 --> 00:09:40,714
thanks to the Interop 2023 project.


163
00:09:40,747 --> 00:09:44,084
You can also define a color
with the color() function


164
00:09:44,117 --> 00:09:47,955
and specify which color gamut to use.


165
00:09:47,988 --> 00:09:51,658
The color function takes values
in red, green, and blue,


166
00:09:51,692 --> 00:09:54,194
plus alpha, after a slash.


167
00:09:54,228 --> 00:09:58,532
But what which color 100% green creates,
for example,


168
00:09:58,565 --> 00:10:01,235
depends on the color gamut.


169
00:10:01,268 --> 00:10:04,738
We first shipped the ability
to create P3 colors in CSS


170
00:10:04,771 --> 00:10:10,177
through the use of this color function
in Safari 10.1, over six years ago.


171
00:10:10.210 --> 00:10:13.313 line:-2
With the advent of these color gamuts
and color models,


172
00:10:13.347 --> 00:10:18.051 line:-2
the CSS Working Group defined additional
tools that make use of their power.


173
00:10:18.085 --> 00:10:20.454 line:-2
Their web standards are
finally mature enough


174
00:10:20.487 --> 00:10:23.690 line:-1
for us to ship these tools this year.


175
00:10:23.724 --> 00:10:28.095 line:-2
Have you ever wanted to define a color
in CSS, while referring to another color?


176
00:10:28.128 --> 00:10:32.199 line:-2
It's been possible to do similar things
in preprocessors for a while.


177
00:10:32,232 --> 00:10:36,336
Now, relative color syntax lets you do
just that.


178
00:10:36,370 --> 00:10:38,605
Just like many ways to define a color,


179
00:10:38,639 --> 00:10:42,276
you start with one of the color functions.


180
00:10:42,309 --> 00:10:45,345
This determines which color model
is used to do


181
00:10:45,379 --> 00:10:50,184
the mathematical calculations involved
in creating the new color.


182
00:10:50,217 --> 00:10:54,988
Next, state which existing color
you want to start from.


183
00:10:55,022 --> 00:10:59,993
Then take the channels from the function
and manipulate them.


184
00:11:00,027 --> 00:11:04,665
In the first example,
the R, G, and B channels are left alone,


185
00:11:04,698 --> 00:11:11,705
while / 0.7 tells the browser
to give this color an opacity of 70%.


186
00:11:11,738 --> 00:11:17,744
In the second example in LAB, I've told
the browser to calculate L divided by 2,


187
00:11:17,778 --> 00:11:21,748
which cuts the lightness in half
and makes the color darker,


188
00:11:21,782 --> 00:11:25,619
while leaving the A and B channels alone.


189
00:11:25,652 --> 00:11:31,258
And in the third example, in OKLCH,
I'll leave the L and H channels alone,


190
00:11:31,291 --> 00:11:34,795
while cutting the C, the chroma,
by one third,


191
00:11:34,828 --> 00:11:37,764
which drains the intensity
out of the color.


192
00:11:37.798 --> 00:11:43.036 line:-2
Relative Color Syntax makes it quick work
to define an entire palette of colors,


193
00:11:43.070 --> 00:11:45.506 line:-1
handy when creating a design system.


194
00:11:46,540 --> 00:11:50,944
The new color models also improve
how we can define gradients.


195
00:11:50.978 --> 00:11:55.549 line:-2
Here's a simple linear gradient
that goes from white to blue.


196
00:11:55.582 --> 00:11:58.485 line:-2
For years, these kinds of gradients were
always calculated


197
00:11:58.519 --> 00:12:01.188 line:-1
using the sRGB color space.


198
00:12:01.221 --> 00:12:04.892 line:-2
Now, starting in Safari 16.2,
we can explicitly state


199
00:12:04.925 --> 00:12:09.596 line:-2
that we want the gradient to be calculated
in sRGB, if that's what we want.


200
00:12:09.630 --> 00:12:12.366 line:-1
Or we can change the color space.


201
00:12:12.399 --> 00:12:15.369 line:-1
sRGB-linear is similar to sRGB,


202
00:12:15.402 --> 00:12:21.175 line:-2
but smooths the transitions between colors
in a more linear fashion.


203
00:12:21.208 --> 00:12:26.713 line:-2
But you might notice that both of these
transition through purple tones.


204
00:12:26.747 --> 00:12:28.415 line:-1
If we switch to OKLAB,


205
00:12:28.448 --> 00:12:31.785 line:-2
the colors calculated in the middle
are far more blue,


206
00:12:31.818 --> 00:12:34.621 line:-1
and perhaps that's what we'd prefer.


207
00:12:34.655 --> 00:12:39.526 line:-2
LCH happens to create similar results,
although not identical.


208
00:12:39,560 --> 00:12:44,698
OKLCH transitions through
a spectrum of yellow, green, and teal.


209
00:12:44,731 --> 00:12:48,101
LAB happens to be far more purple.


210
00:12:48,135 --> 00:12:53,106
or we can use HSL or HWB
if we like these results.


211
00:12:53,140 --> 00:12:57,845
It really depends on the project
and the design effect we want.


212
00:12:57,878 --> 00:13:02,649
None of these are right or wrong.
None of them is the best.


213
00:13:02,683 --> 00:13:03,984
It depends.


214
00:13:04.017 --> 00:13:06.820 line:-2
There are a lot of new options
for defining gradients.


215
00:13:06.854 --> 00:13:09.823 line:-1
Switching color spaces has a huge impact.


216
00:13:09.857 --> 00:13:12.359 line:-2
This also goes for animating
changes in color.


217
00:13:12.392 --> 00:13:15.596 line:-2
The color space affects the interpolation
of what happens in between.


218
00:13:16,230 --> 00:13:19,499
The same impact applies
when mixing colors together.


219
00:13:19,533 --> 00:13:23,437
Yeah, you can now mix colors in CSS.


220
00:13:23.470 --> 00:13:27.708 line:-2
Starting in Safari 16.2,
there's a new color-mix function.


221
00:13:27.741 --> 00:13:29.877 line:-1
You list two colors to mix


222
00:13:29.910 --> 00:13:32.446 line:-1
and specify which color space to use,


223
00:13:32.479 --> 00:13:35.649 line:-1
and the browser mixes them together.


224
00:13:35.682 --> 00:13:40.387 line:-2
You might recognize this purplish-blue
from the middle of the gradient.


225
00:13:40.420 --> 00:13:43.924 line:-2
We can instead switch to any of
the other color spaces that we looked at


226
00:13:43.957 --> 00:13:45.659 line:-1
for using with gradients.


227
00:13:45.692 --> 00:13:50.163 line:-1
These all create different results.


228
00:13:50.197 --> 00:13:53.333 line:-1
By default, color mix makes the new color


229
00:13:53.367 --> 00:13:57.237 line:-2
from 50% of one color
and 50% of the other.


230
00:13:57.271 --> 00:14:03.310 line:-2
But you can change it to be
any ratio you would like, 80/20, or 30/70.


231
00:14:03.343 --> 00:14:06.847 line:-2
You can also set the two numbers
to be less than 100% total,


232
00:14:06.880 --> 00:14:09.683 line:-1
which makes the color translucent.


233
00:14:09.716 --> 00:14:14.321 line:-2
Here, I've set white to 30%
and blue to 30%,


234
00:14:14.354 --> 00:14:18.525 line:-2
giving the resulting color
an opacity of 60%.


235
00:14:18,559 --> 00:14:20,928
You can even use the currentcolor keyword


236
00:14:20,961 --> 00:14:24,264
to mix the current text color with
whatever you'd like.


237
00:14:24,298 --> 00:14:28,836
In this case, I'm mixing a dark green
link color with 40% white


238
00:14:28,869 --> 00:14:32,105
to create a lighter green
to use with the hover color.


239
00:14:32.139 --> 00:14:34.274 line:-1
There's a lot here.


240
00:14:34.308 --> 00:14:38.645 line:-2
The P3 color gamut,
new color models and functions,


241
00:14:38.679 --> 00:14:42.983 line:-2
the ability to change color spaces
for gradients and animations,


242
00:14:43.016 --> 00:14:47.955 line:-2
new ways to define colors by altering
the channels of an existing color


243
00:14:47.988 --> 00:14:49.456 line:-1
or through mixing--


244
00:14:49.489 --> 00:14:51.859 line:-2
there's a lot of potential here
when it comes to


245
00:14:51.892 --> 00:14:55.195 line:-2
leveraging color in our designs
for the web.


246
00:14:55.229 --> 00:14:58.832 line:-2
One last thing to know
about support for P3 color.


247
00:14:58,866 --> 00:15:04,638
Not only does the browser need to support
certain features in CSS or JavaScript


248
00:15:04,671 --> 00:15:06,540
that make use of P3 color,


249
00:15:06,573 --> 00:15:10,677
and of course, the user's operating system
and display need to support it,


250
00:15:10,711 --> 00:15:15,816
but also the browser needs to support
rendering in P3


251
00:15:15,849 --> 00:15:18,685
for each particular part of the web page,


252
00:15:18,719 --> 00:15:21,255
in different portions of the DOM.


253
00:15:21.288 --> 00:15:24.424 line:-2
You'll want to check into
the details for each browser


254
00:15:24.458 --> 00:15:27.594 line:-1
before assuming that it works universally.


255
00:15:27.628 --> 00:15:31.131 line:-1
Let me give you an update on P3 in Safari.


256
00:15:31.164 --> 00:15:36.503 line:-2
We shipped support for images in P3
seven years ago in Safari 10.0.


257
00:15:36.537 --> 00:15:42.442 line:-2
In Safari 10.1, we added overall support
for P3 for most of the web page.


258
00:15:42.476 --> 00:15:46.513 line:-2
In Safari 15.2, we added support
inside the Canvas element.


259
00:15:46.547 --> 00:15:51.385 line:-2
And in Safari 16.4, we added support for
P3 in WebGL Canvas


260
00:15:51.418 --> 00:15:55.055 line:-2
through the use of
drawingBufferColorSpace.


261
00:15:55.088 --> 00:16:00.694 line:-2
As for developer tools, in Safari 13.1,
we shipped a color picker in Web Inspector


262
00:16:00.727 --> 00:16:04.932 line:-2
that makes it easy to find colors
that are only available in P3,


263
00:16:04.965 --> 00:16:09.136 line:-2
or to convert a color from
one color model to another.


264
00:16:09.169 --> 00:16:15.475 line:-2
And in Safari 15.2, we added support for
P3 to the Web Inspector graphics tab.


265
00:16:15.509 --> 00:16:17.778 line:-2
We still have a little bit more work
to do.


266
00:16:17.811 --> 00:16:21.348 line:-2
First, to extend support
inside WebGL Canvas


267
00:16:21.381 --> 00:16:25.052 line:-1
to include the use of unpackColorSpace.


268
00:16:25.085 --> 00:16:28.922 line:-2
And to add support for P3 in SVG filters,
which we've not done yet,


269
00:16:28.956 --> 00:16:31.992 line:-2
because there's still ongoing debate
about the web standard.


270
00:16:32.025 --> 00:16:34.461 line:-1
For now, if you apply an SVG Filter,


271
00:16:34.494 --> 00:16:38.098 line:-2
colors will be flattened into sRGB&nbsp;in
every browser.


272
00:16:38.131 --> 00:16:41.902 line:-2
It's truly an exciting time
to rethink color on the web,


273
00:16:41.935 --> 00:16:46.874 line:-2
especially since so many of these features
will finally be available across browsers.


274
00:16:46.907 --> 00:16:51.345 line:-2
Advancements in CSS not only change
what's possible to design,


275
00:16:51.378 --> 00:16:54.348 line:-2
but they also make it easier
to code those designs.


276
00:16:55,349 --> 00:16:58,585
The :user-valid and :user-invalid
pseudo-classes


277
00:16:58,619 --> 00:17:00,554
provide a way to style forms


278
00:17:00,587 --> 00:17:05,225
depending on whether or not
a user has correctly filled out a field.


279
00:17:05.259 --> 00:17:09.863 line:-2
For years, the :valid and :invalid
pseudo-classes seemed like


280
00:17:09.897 --> 00:17:11.632 line:-1
they'd be really helpful.


281
00:17:11.665 --> 00:17:15.569 line:-2
I want to style this form field to alert
a user when they've made a mistake.


282
00:17:15.602 --> 00:17:20.874 line:-2
So I'll try the :invalid pseudo-class
to select an invalid input.


283
00:17:20.908 --> 00:17:24.611 line:-2
With :has input:invalid,
I'll target the label.


284
00:17:24.645 --> 00:17:27.514 line:-2
And with a ::before pseudo-element,
I'll insert an "x",


285
00:17:27.548 --> 00:17:31.685 line:-2
so communication
doesn't depend on color alone.


286
00:17:31.718 --> 00:17:33.153 line:-1
Let's look at the result.


287
00:17:33.187 --> 00:17:35.789 line:-1
When someone starts to--


288
00:17:35.822 --> 00:17:38.058 line:-1
yeah, that's not great.


289
00:17:38.091 --> 00:17:42.262 line:-2
As soon as a user starts to type,
the browser marks it invalid


290
00:17:42.296 --> 00:17:45.566 line:-2
because it's not yet
a valid email address.


291
00:17:45.599 --> 00:17:47.768 line:-1
Because :invalid marks input wrong


292
00:17:47.801 --> 00:17:50.938 line:-2
before users even have a chance
to get it right,


293
00:17:50.971 --> 00:17:54.408 line:-2
developers have been using JavaScript
for this instead.


294
00:17:54.441 --> 00:17:57.678 line:-2
user-valid and
user-invalid fix this problem.


295
00:17:57.711 --> 00:18:00.781 line:-2
They use a more complex algorithm
to determine


296
00:18:00.814 --> 00:18:04.985 line:-2
when a form field is considered valid
or invalid.


297
00:18:05.018 --> 00:18:07.888 line:-1
We shipped it in Safari 16.5.


298
00:18:07.921 --> 00:18:10.791 line:-1
Now we can see the improved result.


299
00:18:10.824 --> 00:18:13.994 line:-2
No red warning
if they've if they've got it right.


300
00:18:14.027 --> 00:18:17.197 line:-2
And if someone does
fill out the field incorrectly,


301
00:18:17.231 --> 00:18:19.666 line:-2
the red warnings appear
after they've left the field,


302
00:18:19.700 --> 00:18:22.870 line:-2
when we want to warn them
to go back and fix it.


303
00:18:22.903 --> 00:18:26.707 line:-2
As you can see,
:user-invalid is especially powerful


304
00:18:26.740 --> 00:18:28.275 line:-1
when it's combined with :has().


305
00:18:29,409 --> 00:18:32,312
In fact, this year we increased
the power of :has()


306
00:18:32,346 --> 00:18:36,116
by making it work with
even more pseudo-classes.


307
00:18:36.149 --> 00:18:39.453 line:-2
:has(:lang()) makes it possible to style
anything on the page


308
00:18:39.486 --> 00:18:43.156 line:-2
depending on the presence of
a particular language.


309
00:18:43.190 --> 00:18:46.093 line:-2
And :has() support for media
pseudo-classes provide


310
00:18:46.126 --> 00:18:50.931 line:-2
conditional styling depending on
the states of audio and video playback.


311
00:18:51,632 --> 00:18:57,738
The :dir pseudo-class&nbsp;fills in a gap when
it comes to supporting language direction.


312
00:18:57,771 --> 00:18:59,973
Depending on the language being typeset,


313
00:19:00,007 --> 00:19:05,345
text can flow from left to right,
or from right to left.


314
00:19:05,379 --> 00:19:09,316
This is often abbreviated LTR and RTL.


315
00:19:09,349 --> 00:19:13,353
These days,
CSS has more and more logical properties,


316
00:19:13,387 --> 00:19:18,759
which allow you to refer to
the start and end of the text flow,


317
00:19:18,792 --> 00:19:20,727
instead of left or right.


318
00:19:20.761 --> 00:19:25.399 line:-2
For instance, use margin-inline-start
and margin-inline-end,


319
00:19:25.432 --> 00:19:27.267 line:-1
instead of margin-left and margin-right,


320
00:19:27.301 --> 00:19:31.238 line:-2
to easily write CSS
that works for every language.


321
00:19:31.271 --> 00:19:35.709 line:-2
But not everything in your design can
be handled using logical properties.


322
00:19:35.742 --> 00:19:40.013 line:-2
This is where the new
direction pseudo-class can be helpful.


323
00:19:40.047 --> 00:19:45.452 line:-2
Here, I have an icon I'd like to transform
depending on the direction of text.


324
00:19:45.485 --> 00:19:50.057 line:-2
When the header has a direction of LTR,
I'll rotate the SVG one way,


325
00:19:50.090 --> 00:19:54.228 line:-2
and when the header is RTL,
I'll rotate it the other way.


326
00:19:54.261 --> 00:19:57.598 line:-2
This is a far simpler technique
than what was used in the past


327
00:19:57.631 --> 00:20:01.401 line:-1
to support multiple language direction.


328
00:20:01.435 --> 00:20:04.471 line:-2
:user-valid and invalid,
additions to :has(),


329
00:20:04.505 --> 00:20:09.776 line:-2
and the :dir pseudo-class all make it
easier to write robust and succinct code.


330
00:20:09.810 --> 00:20:13.514 line:-2
This year also brings several features
that make it possible


331
00:20:13.547 --> 00:20:18.218 line:-2
to refine the details in your typography
to absolute perfection.


332
00:20:18,986 --> 00:20:22,723
Let's start with a look at
the new line-height units.


333
00:20:22,756 --> 00:20:28,128
In CSS, we have many different kinds of
units we can use to define a length.


334
00:20:28,161 --> 00:20:33,867
Some units are relative to
the viewport size, like svh and lvh,


335
00:20:33,901 --> 00:20:39,806
or relative to a container's size,
like cqb and cqi.


336
00:20:39.840 --> 00:20:43.477 line:-2
Other units are relative to sizes
in typography.


337
00:20:43.510 --> 00:20:46.547 line:-1
One ex equals the x-height of the font.


338
00:20:46.580 --> 00:20:50.617 line:-2
One ch, for character,
matches the inline size


339
00:20:50.651 --> 00:20:53.487 line:-1
of the zero character in a font.


340
00:20:53.520 --> 00:20:58.592 line:-2
And one ic is the inline size of
an ideographic character


341
00:20:58.625 --> 00:21:00.894 line:-1
in CJK scripts--


342
00:21:00.928 --> 00:21:04.398 line:-2
inline size being width in
a horizontal writing mode


343
00:21:04.431 --> 00:21:07.935 line:-1
or height in a vertical writing mode.


344
00:21:07.968 --> 00:21:11.505 line:-2
These units have been supported
in browsers for a while.


345
00:21:11.538 --> 00:21:17.144 line:-2
Well, there's a new unit that's also
relative to a size in your typography:


346
00:21:17.177 --> 00:21:22.583 line:-2
the lh unit,&nbsp;for line height,
and rlh for root line height.


347
00:21:22,616 --> 00:21:25,352
These units let us connect
anything in our layout


348
00:21:25,385 --> 00:21:28,822
to the amount of space between lines.


349
00:21:28,856 --> 00:21:35,462
For example, I set line-height to 1.4
on the root HTML element.


350
00:21:35,495 --> 00:21:41,602
Then I put a padding of 2rlh on
the section element, this white card.


351
00:21:41,635 --> 00:21:48,442
Then I set headline and paragraph margins
in the block direction to 1rlh.


352
00:21:48,475 --> 00:21:52,679
Now there's exactly as much space
between the lines of text


353
00:21:52,713 --> 00:21:56,316
as if there were text there
instead of space.


354
00:21:56,350 --> 00:22:00,754
That sets up what's known in typography
as vertical rhythm.


355
00:22:00.787 --> 00:22:05.392 line:-2
Line height units don't prevent situations
that can disrupt vertical rhythm,


356
00:22:05.425 --> 00:22:08.762 line:-2
but they do bring
an incredibly simple tool to the web


357
00:22:08.795 --> 00:22:13.500 line:-2
that gets us much closer to unlocking this
long-standing typographical tradition,


358
00:22:13.534 --> 00:22:16.570 line:-2
letting us create an intimate connection
between type


359
00:22:16.603 --> 00:22:18.472 line:-1
and the whitespace around the type.


360
00:22:19,273 --> 00:22:22,609
There are many challenges in polishing
digital typography on the web


361
00:22:22,643 --> 00:22:25,312
to the high standards of
traditional typesetting.


362
00:22:25,345 --> 00:22:29,049
One of these has to do with font sizing.


363
00:22:29.082 --> 00:22:32.052 line:-2
If you're a web designer,
it's likely you're carefully choosing


364
00:22:32.085 --> 00:22:34.288 line:-1
your font families and font sizes.


365
00:22:34.321 --> 00:22:37.391 line:-1
But the font you want might not download


366
00:22:37.424 --> 00:22:40.761 line:-2
or it might not be available on
the user's operating system.


367
00:22:40.794 --> 00:22:45.732 line:-2
That why it's best practice to declare
a stack of fonts in font-family


368
00:22:45.766 --> 00:22:48.902 line:-1
to provide a fallback plan to the browser.


369
00:22:48.936 --> 00:22:54.208 line:-2
The first font that's found
is the one that gets used.


370
00:22:54.241 --> 00:22:59.513 line:-2
Similarly, how big a font appears visually
at a specific size


371
00:22:59.546 --> 00:23:03.083 line:-2
is not something
a web developer can control.


372
00:23:03.116 --> 00:23:08.422 line:-2
Here is SF Hello on the left,
and Baskerville on the right.


373
00:23:08.455 --> 00:23:11.058 line:-2
They're typeset to be
exactly the same size,


374
00:23:11.091 --> 00:23:13.727 line:-1
but SF Hello looks much larger


375
00:23:13.760 --> 00:23:17.798 line:-2
because it fills more space
inside its line box.


376
00:23:17.831 --> 00:23:20.634 line:-1
It has a larger x-height.


377
00:23:20.667 --> 00:23:23.604 line:-2
This difference is caused by
choices that were made


378
00:23:23.637 --> 00:23:25.973 line:-1
when the font files were created.


379
00:23:26.006 --> 00:23:28.976 line:-2
Here, I've got an example
where I'm typesetting an article


380
00:23:29.009 --> 00:23:32.880 line:-1
with font-size: 1.4rem,


381
00:23:32.913 --> 00:23:38.652 line:-2
and I'm defining a simple font stack
for any code that's inside that article.


382
00:23:38,685 --> 00:23:42,122
You can see how the code looks smaller
than the paragraph text.


383
00:23:42,155 --> 00:23:45,859
It's especially noticeable
if you compare the Fs.


384
00:23:45,893 --> 00:23:47,995
If the code falls back to monospace,


385
00:23:48,028 --> 00:23:51,765
then it looks bigger than
the paragraph text.


386
00:23:51,798 --> 00:23:58,172
We can try to compensate by adjusting
the font-size for code to be 120% of


387
00:23:58,205 --> 00:23:59,940
the article font-size,


388
00:23:59,973 --> 00:24:04,111
which might even out the sizes
when Courier is used,


389
00:24:04,144 --> 00:24:07,247
but if the browser falls back
to monospace,


390
00:24:07,281 --> 00:24:11,051
then the code ends up even bigger
than the paragraph text.


391
00:24:11.084 --> 00:24:14.588 line:-2
What we need is a way to tell the browser,
"Please just make these two fonts


392
00:24:14.621 --> 00:24:17.691 line:-2
look like they're the same size,"
and let it figure out how.


393
00:24:17.724 --> 00:24:20.260 line:-1
That's exactly what font-size-adjust does.


394
00:24:20.294 --> 00:24:24.565 line:-2
It adjusts how big a font looks
to create visual consistency.


395
00:24:25,399 --> 00:24:30,270
I've added one line of CSS--
font-size-adjust: 0.47--


396
00:24:30,304 --> 00:24:34,408
and now my typeset code is visually
consistent with the paragraph text,


397
00:24:34,441 --> 00:24:37,044
even for both fonts in the stack.


398
00:24:37.077 --> 00:24:41.748 line:-1
But why 0.47? What does this number mean?


399
00:24:42.583 --> 00:24:45.519 line:-2
For any Latin font
you might use on the web,


400
00:24:45.552 --> 00:24:49.590 line:-2
there's a ratio between
the font's size and its x-height.


401
00:24:49.623 --> 00:24:54.728 line:-2
It's a bit arbitrary what that ratio is,
but usually it's around 50%.


402
00:24:54,761 --> 00:24:58,732
By applying font-size-adjust: 0.47
to the article element,


403
00:24:58,765 --> 00:25:03,470
I'm actually telling the browser to resize
every font inside the article--


404
00:25:03,504 --> 00:25:07,474
paragraph font, code font,
no matter which font is used


405
00:25:07,508 --> 00:25:08,809
from either stack--


406
00:25:08,842 --> 00:25:14,581
so the x-height of each is always
47% of the specified font-size.


407
00:25:14,615 --> 00:25:20,454
I picked 0.47 because it's what made
Iowan Old Style look the same as it does


408
00:25:20,487 --> 00:25:23,290
without font-size-adjust applied.


409
00:25:23,323 --> 00:25:26,026
We shipped support for
these basic capabilities


410
00:25:26,059 --> 00:25:30,264
of font-size-adjust in Safari 16.4.


411
00:25:30,297 --> 00:25:35,369
In Safari 17, we're adding support for
more advanced capabilities.


412
00:25:35.402 --> 00:25:40.674 line:-2
Wouldn't it be better if you didn't have
to track down a magic number like 0.47


413
00:25:40.707 --> 00:25:44.378 line:-2
to try and make every font
match your main font?


414
00:25:44.411 --> 00:25:50.617 line:-2
The from-font value lets you tell
the browser to just figure it all out.


415
00:25:50.651 --> 00:25:54.588 line:-2
Also in Safari 17, we're adding support
for the two-value syntax,


416
00:25:54.621 --> 00:25:59.960 line:-2
which lets you specify which metric should
be used when creating size consistency.


417
00:25:59.993 --> 00:26:05.632 line:-2
By default, it's ex-height,
but you can instead use cap-height,


418
00:26:05.666 --> 00:26:11.071 line:-1
ch-width, ic-width, or ic-height.


419
00:26:11.104 --> 00:26:15.409 line:-2
Safari 17 also adds support for
the size-adjust descriptor,


420
00:26:15.442 --> 00:26:17.644 line:-2
which lets you make
a similar kind of adjustment


421
00:26:17.678 --> 00:26:21.048 line:-2
when you set-up a font with
a @font-face rule.


422
00:26:21.081 --> 00:26:22.983 line:-1
That's font-size-adjust.


423
00:26:23.016 --> 00:26:25.419 line:-2
It let's you have a bit more control
over something that


424
00:26:25.452 --> 00:26:29.189 line:-2
cannot easily be controlled
with font-size alone.


425
00:26:29.223 --> 00:26:31.491 line:-1
But even with new line height units,


426
00:26:31.525 --> 00:26:34.895 line:-2
and the ability to adjust
the visual size of your type,


427
00:26:34.928 --> 00:26:39.933 line:-2
there are still things that can create
wonky unevenness in your line box sizing.


428
00:26:39.967 --> 00:26:42.269 line:-2
We are working on
a few solutions to this problem.


429
00:26:42,970 --> 00:26:45,706
Text-box trim is one of them.


430
00:26:45,739 --> 00:26:49,042
In some ways, text-box-trim
is similar to margin-trim.


431
00:26:49,076 --> 00:26:52,779
They both let you trim away
unwanted white space,


432
00:26:52,813 --> 00:26:56,149
but in this case, on a text box.


433
00:26:56.183 --> 00:26:59.786 line:-2
Have you ever struggled to get something
to line up vertically on the web?


434
00:26:59.820 --> 00:27:03.524 line:-1
This name is not vertically centered.


435
00:27:03.557 --> 00:27:06.827 line:-2
Maybe it's clearer if I draw a line
through the middle.


436
00:27:06.860 --> 00:27:10.130 line:-1
The text is visually lower than center.


437
00:27:10.163 --> 00:27:13.033 line:-1
This happens all the time on the web.


438
00:27:13.066 --> 00:27:15.469 line:-1
But why?


439
00:27:15.502 --> 00:27:19.506 line:-2
Well, actually the text box is
vertically centered.


440
00:27:19.540 --> 00:27:24.511 line:-2
But the glyphs are sitting lower down
inside of this box.


441
00:27:24.545 --> 00:27:29.850 line:-2
There's extra space above and below
the letters that's reserved by the font.


442
00:27:29.883 --> 00:27:32.619 line:-2
The amount of extra space above and below
is not the same


443
00:27:32.653 --> 00:27:35.956 line:-2
because the font doesn't need
as much below as it does above


444
00:27:35.989 --> 00:27:39.193 line:-2
and that's throwing off
vertical centering.


445
00:27:39.226 --> 00:27:42.196 line:-1
This extra space is incredibly important.


446
00:27:42.229 --> 00:27:46.066 line:-2
It reserved for accent marks,
vowel marks, and much more.


447
00:27:46.099 --> 00:27:49.369 line:-2
But it can throw off
typographic layout on the web.


448
00:27:49.403 --> 00:27:52.339 line:-2
Text-box-trim gives us a way to
trim away this extra space


449
00:27:52.372 --> 00:27:58.212 line:-2
for the purposes of layout while still
showing the entirety of all the glyphs.


450
00:27:58.245 --> 00:28:00.547 line:-2
This doesn't just help with
vertical centering.


451
00:28:00.581 --> 00:28:04.918 line:-2
Here's an example where the extra space
reserved for the font above the cap height


452
00:28:04.952 --> 00:28:08.822 line:-2
makes it impossible to easily get the top
of the headline


453
00:28:08.856 --> 00:28:11.825 line:-1
to line up with the top of the image.


454
00:28:11.859 --> 00:28:17.064 line:-2
By trimming away the extra space,
lining things up becomes easy.


455
00:28:17.097 --> 00:28:19.600 line:-1
This is all a work in progress.


456
00:28:19.633 --> 00:28:23.937 line:-2
The property name already changed from
leading-trim to text-box-trim.


457
00:28:23.971 --> 00:28:27.641 line:-1
As of Safari Technology Preview 171,


458
00:28:27.674 --> 00:28:30.711 line:-2
the code you see on the screen
is how it works,


459
00:28:30.744 --> 00:28:33.881 line:-2
but don't get too attached to
these details.


460
00:28:33.914 --> 00:28:36.083 line:-1
We expect it to keep changing.


461
00:28:36.116 --> 00:28:38.318 line:-1
Perhaps it will become like this.


462
00:28:38.352 --> 00:28:42.656 line:-2
Do try it out in Safari Technology Preview
and let us know what you think.


463
00:28:42.689 --> 00:28:45.926 line:-2
Early feedback from web designers
and developers like you is


464
00:28:45.959 --> 00:28:48.795 line:-1
how CSS becomes the best it can be.


465
00:28:49,963 --> 00:28:53,667
Meanwhile, here's something that has
great support across browsers


466
00:28:53,700 --> 00:28:58,138
and will soon come to Safari 17,
Counter styles.


467
00:28:58.172 --> 00:29:02.442 line:-2
You're probably very familiar with
ordered lists in HTML,


468
00:29:02.476 --> 00:29:07.481 line:-2
where using the <ol> element
automatically numbers a list of items.


469
00:29:07,514 --> 00:29:12,786
CSS provides an easy mechanism for
changing which numbering system is used.


470
00:29:12,819 --> 00:29:16,523
Here I'm applying list-style: devanagari.


471
00:29:16.557 --> 00:29:19.993 line:-2
There are dozens of different
predefined numbering systems


472
00:29:20.027 --> 00:29:23.463 line:-1
that can be applied with one line of CSS,


473
00:29:23.497 --> 00:29:26.433 line:-1
covering many languages around the world.


474
00:29:26.466 --> 00:29:28.635 line:-1
But not all.


475
00:29:28.669 --> 00:29:30.671 line:-1
What about Serbo-croatian?


476
00:29:30.704 --> 00:29:33.173 line:-2
If I specify
list-style: upper-serbo-croatian,


477
00:29:33.207 --> 00:29:35.976 line:-2
I just get the default
western Arabic numbers.


478
00:29:36.009 --> 00:29:38.545 line:-1
This is where Counter Styles come in.


479
00:29:38.579 --> 00:29:42.850 line:-2
I can define a numbering system,
similar to how the browser does it.


480
00:29:42.883 --> 00:29:47.087 line:-2
@counter-style,
then the name I want to give it,


481
00:29:47.120 --> 00:29:49.590 line:-1
then I define the qualities of the style.


482
00:29:49.623 --> 00:29:55.762 line:-2
In this case, setting system to
alphabetic, and listing the symbols.


483
00:29:55.796 --> 00:29:59.566 line:-2
The W3C Internationalization Working Group
has published


484
00:29:59.600 --> 00:30:02.603 line:-1
a document of Ready-made Counter Styles


485
00:30:02.636 --> 00:30:05.606 line:-2
that cover hundreds of cultures
around the world.


486
00:30:05.639 --> 00:30:08.909 line:-2
We've increased the number of languages
supported by WebKit,


487
00:30:08.942 --> 00:30:11.411 line:-2
and opened a discussion at
the CSS Working Group about


488
00:30:11.445 --> 00:30:15.115 line:-2
having all browsers ship support
for all of these.


489
00:30:15.148 --> 00:30:19.253 line:-2
But until that happens, you can copy
code snippets from this document


490
00:30:19.286 --> 00:30:22.089 line:-1
and paste them into your code.


491
00:30:22.122 --> 00:30:26.360 line:-2
You can also style list counters to be
something entirely custom.


492
00:30:26.393 --> 00:30:32.466 line:-2
I've styled this list to count items
in binary, with a minimum of four digits.


493
00:30:32.499 --> 00:30:36.537 line:-2
And this one to cycle
a set of emoji over and over.


494
00:30:36.570 --> 00:30:41.608 line:-2
CSS Counters can also be used to number
other content on the page, besides lists.


495
00:30:41.642 --> 00:30:46.480 line:-2
Like headlines that begin each section
in a long document.


496
00:30:46.513 --> 00:30:47.581 line:-1
Here's an example.


497
00:30:47.614 --> 00:30:52.753 line:-2
I've got three H2 headlines,
with just words for each headline.


498
00:30:52.786 --> 00:30:56.123 line:-2
In CSS, I create a counter
by declaring counter-reset.


499
00:30:56.156 --> 00:31:01.195 line:-2
I've named it "numbering" and I've set it
to start counting after zero.


500
00:31:01.228 --> 00:31:04.231 line:-1
Then, using a :before pseudo-element,


501
00:31:04.264 --> 00:31:09.803 line:-2
I tell the browser to increment the
counter and to display it in the content.


502
00:31:09.837 --> 00:31:14.942 line:-2
By default, counters use western Arabic
numbers--1, 2, 3--


503
00:31:14.975 --> 00:31:16.543 line:-1
but we can change that.


504
00:31:16.577 --> 00:31:20.747 line:-2
Just like before, I can style the counter
to be anything I want.


505
00:31:20.781 --> 00:31:23.851 line:-1
That's how to create and style counters.


506
00:31:23.884 --> 00:31:26.186 line:-2
But that's not everything
we're doing this year


507
00:31:26.220 --> 00:31:29.423 line:-2
to help you take your typography
to the next level.


508
00:31:29.456 --> 00:31:33.827 line:-2
In fact, there's a lot more CSS
coming this year.


509
00:31:33,861 --> 00:31:38,232
In Safari 16.2, we also shipped support
for last baseline alignment


510
00:31:38,265 --> 00:31:40,334
for Grid and Flexbox,


511
00:31:40,367 --> 00:31:43,937
plus several functions inside
font-variant-alternates


512
00:31:43,971 --> 00:31:48,342
and @font-feature-values to
further support Open Type features.


513
00:31:48,375 --> 00:31:53,614
Safari 16.4 also added support for
the Media Queries range syntax


514
00:31:53,647 --> 00:31:55,249
and boolean logic,


515
00:31:55,282 --> 00:31:58,185
@property, and much more.


516
00:31:58.218 --> 00:32:03.190 line:-2
Safari 16.5 also added support for
CSS Nesting.


517
00:32:03,223 --> 00:32:05,826
And in Safari 17, we're also adding


518
00:32:05,859 --> 00:32:09,329
feature detection of font tech
and font formats,


519
00:32:09,363 --> 00:32:11,398
contain-intrinsic-size,


520
00:32:11,431 --> 00:32:14,434
text-transform: full-width
and full-size-kana


521
00:32:14,468 --> 00:32:16,637
and a lot more.


522
00:32:16.670 --> 00:32:20.974 line:-2
We want to say a huge thank you
to everyone who files issues,


523
00:32:21.008 --> 00:32:23.911 line:-2
pings us on social media,
or writes blog posts


524
00:32:23.944 --> 00:32:28.715 line:-2
to let us know which web technology
you needed implemented or improved most.


525
00:32:28.749 --> 00:32:33.420 line:-2
We are listening,
and your input does have impact.


526
00:32:33.453 --> 00:32:35.956 line:-1
Please let us know what else you need.


527
00:32:35.989 --> 00:32:39.026 line:-2
You can file bug reports and
feature requests for web technology


528
00:32:39.059 --> 00:32:43.897 line:-2
at bugs.webkit.org‚
the issue tracker for WebKit.


529
00:32:43.931 --> 00:32:49.837 line:-2
Issues about the interface of Safari or
anything about iOS, iPadOS, and macOS,


530
00:32:49.870 --> 00:32:54.208 line:-1
file those at feedbackassistant.apple.com.


531
00:32:54.241 --> 00:32:59.713 line:-2
Make sure you have the latest information
about what is supported in Safari.


532
00:32:59.746 --> 00:33:02.749 line:-2
We often hear from developers
asking us to implement something


533
00:33:02.783 --> 00:33:05.419 line:-1
that has actually already shipped.


534
00:33:05.452 --> 00:33:08.922 line:-1
Caniuse is a fantastic resource for this.


535
00:33:08.956 --> 00:33:11.992 line:-2
You can also keep up with the latest news
on webkit.org,


536
00:33:12.025 --> 00:33:16.496 line:-2
where you'll find in-depth articles
about each release of Safari,


537
00:33:16.530 --> 00:33:19.399 line:-2
the release notes for
Safari Technology Preview,


538
00:33:19.433 --> 00:33:23.770 line:-2
extensive documentation on
Web Inspector, and more.


539
00:33:23.804 --> 00:33:27.407 line:-2
Download Safari Technology Preview to
keep up with what's coming in the future.


540
00:33:27.441 --> 00:33:30.110 line:-1
It's updated about every two weeks,


541
00:33:30.143 --> 00:33:33.947 line:-2
so it's got the very latest additions
to WebKit.


542
00:33:33.981 --> 00:33:37.217 line:-2
Safari Technology Preview also has
all the new features


543
00:33:37.251 --> 00:33:41.121 line:-2
that are ready to be previewed
on by default.


544
00:33:41.154 --> 00:33:46.793 line:-2
Or you can turn features on and off in the
new Feature Flags pane in Safari Settings,


545
00:33:46.827 --> 00:33:49.363 line:-1
starting in Safari 17,


546
00:33:49.396 --> 00:33:53.901 line:-2
which you can get to from the completely
redesigned Develop Menu,


547
00:33:53.934 --> 00:33:57.738 line:-2
with its quick access for connecting
Web Inspector on your Mac


548
00:33:57.771 --> 00:34:02.142 line:-2
to websites and web apps on
your iPhone, iPad, or other devices,


549
00:34:02.176 --> 00:34:04.611 line:-1
including wirelessly,


550
00:34:04.645 --> 00:34:08.148 line:-1
or test on devices you don't have in hand,


551
00:34:08.182 --> 00:34:10.450 line:-1
by downloading free device simulators,


552
00:34:10.484 --> 00:34:13.453 line:-2
and jumping into them
from the Develop Menu,


553
00:34:13.487 --> 00:34:17.224 line:-2
or from the redesigned
Responsive Web Design Mode.


554
00:34:17,257 --> 00:34:22,296
Watch "Rediscover Safari
developer features" at WWDC23


555
00:34:22,329 --> 00:34:24,164
to learn about it all.


556
00:34:24,198 --> 00:34:26,533
Web apps are coming to Mac.


557
00:34:26,567 --> 00:34:29,603
Plus we've packed the year full of
improvements to web apps


558
00:34:29,636 --> 00:34:31,905
on iPhone and iPad.


559
00:34:31,939 --> 00:34:34,341
"What's new in web apps" covers it all.


560
00:34:34,374 --> 00:34:39,580
And learn about new image formats coming
to Safari and WebKit, including JPEG XL,


561
00:34:39,613 --> 00:34:43,450
and all about the new
Managed Media Source API


562
00:34:43,483 --> 00:34:46,220
in "Explore media formats for the web."


563
00:34:46.253 --> 00:34:50.224 line:-2
We are thrilled about just how much
new web technology is shipping


564
00:34:50.257 --> 00:34:53.460 line:-2
in WebKit and Safari this year and we hope
you are too.


565
00:34:53.493 --> 00:34:56.930 line:-2
And we can't wait to see
what you make with it all.


566
00:34:56.964 --> 00:34:58.665 line:-1
Thanks for watching.

