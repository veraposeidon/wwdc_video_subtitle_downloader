2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.410 --> 00:00:11.912 line:-1
Richard: Hello, I'm Richard.


4
00:00:11.945 --> 00:00:14.581 line:-2
Today, I'm thrilled to talk to you
about some exciting new features


5
00:00:14.615 --> 00:00:15.782 line:-1
in Swift Charts:


6
00:00:15.816 --> 00:00:19.486 line:-1
Pie charts, selection, and scrolling.


7
00:00:19.520 --> 00:00:21.855 line:-1
Let's start with pie charts.


8
00:00:21.889 --> 00:00:25.492 line:-2
Swift Charts provides composable
and customizable building blocks


9
00:00:25.526 --> 00:00:28.996 line:-2
for you to create
all kinds of data visualizations.


10
00:00:29.029 --> 00:00:33.667 line:-2
Today, new to the family of Swift Charts
are the delicious, beautiful pie charts.


11
00:00:33.700 --> 00:00:37.771 line:-2
Pie charts show how a total value
is made up by various categories,


12
00:00:37.804 --> 00:00:39.873 line:-1
via simple, familiar shapes.


13
00:00:39.907 --> 00:00:43.510 line:-2
For example, here's a chart
visualizing the pancake sales data


14
00:00:43.544 --> 00:00:46.413 line:-1
for my friends' food truck.


15
00:00:46.446 --> 00:00:49.483 line:-2
Pie charts do not have axes,
and they are great


16
00:00:49.516 --> 00:00:53.187 line:-2
for casual settings
where precision&nbsp;is not critical.


17
00:00:53.220 --> 00:00:56.723 line:-2
With broad understanding
of how wedges make up a full circle,


18
00:00:56.757 --> 00:01:01.094 line:-2
they are intuitive for visualizing
part-to-whole relationships.


19
00:01:01.128 --> 00:01:03.330 line:-2
One important reason
people like pie charts


20
00:01:03.363 --> 00:01:06.466 line:-2
is because of their round,
approachable shapes.


21
00:01:06.500 --> 00:01:10.838 line:-2
You can create a pie chart
using the mark-based composition syntax


22
00:01:10.871 --> 00:01:13.140 line:-1
that you are already familiar with.


23
00:01:13.173 --> 00:01:17.144 line:-1
Introducing a new mark type, SectorMark.


24
00:01:17.177 --> 00:01:20.380 line:-2
A SectorMark represents
a slice in the pie.


25
00:01:20.414 --> 00:01:23.150 line:-1
It's positioned in polar space.


26
00:01:23.183 --> 00:01:27.855 line:-2
Not this polar,
but the polar coordinate system.


27
00:01:27.888 --> 00:01:32.392 line:-2
The size of a sector is proportional
to the value that it represents.


28
00:01:32.426 --> 00:01:35.762 line:-2
Along the radius,
you can customize the look of a sector.


29
00:01:35.796 --> 00:01:41.168 line:-2
If I increase the inner radius,
the pie chart becomes a donut chart.


30
00:01:41.201 --> 00:01:45.939 line:-2
With SectorMark, you can easily build
all kinds of pie charts and donut charts.


31
00:01:45.973 --> 00:01:47.975 line:-1
Let me show you an example.


32
00:01:48.008 --> 00:01:51.378 line:-2
Our friends' international
pancake food truck business


33
00:01:51.411 --> 00:01:54.615 line:-2
saw a big, revitalizing growth
in their daily sales


34
00:01:54.648 --> 00:01:58.919 line:-2
throughout the last year,
selling six styles of pancakes.


35
00:01:58.952 --> 00:02:03.891 line:-2
This summer, I took on another challenge
to help them improve their sales app.


36
00:02:05.158 --> 00:02:09.229 line:-2
I start with a chart visualizing
the best-selling styles of pancakes.


37
00:02:09.263 --> 00:02:13.800 line:-2
For that, the app currently has
a simple stacked bar chart.


38
00:02:13.834 --> 00:02:18.972 line:-2
It's got a BarMark, with sales being
stacked along the X dimension.


39
00:02:19.006 --> 00:02:22.342 line:-2
As it's categorical data,
the category is reflected


40
00:02:22.376 --> 00:02:26.113 line:-2
as the foreground style
of each stacked bar.


41
00:02:26.146 --> 00:02:30.184 line:-2
This chart gets the job done,
but let's turn it into a pie chart


42
00:02:30.217 --> 00:02:33.086 line:-2
to take advantage of the available space
on the screen


43
00:02:33.120 --> 00:02:35.956 line:-1
and make the data stand out.


44
00:02:35.989 --> 00:02:40.160 line:-2
All I need to do is to switch out
BarMark and argument x


45
00:02:40.194 --> 00:02:44.998 line:-1
for SectorMark and angle.


46
00:02:45.032 --> 00:02:47.034 line:-1
It is that simple!


47
00:02:48.802 --> 00:02:53.340 line:-2
With SectorMark, I use angle
to represent the sales quantity.


48
00:02:53.373 --> 00:02:55.843 line:-2
The angle values you provide
for a pie chart


49
00:02:55.876 --> 00:02:58.912 line:-2
are automatically normalized
to a full circle.


50
00:02:58.946 --> 00:03:03.684 line:-2
I can also apply
some style customizations.


51
00:03:03.717 --> 00:03:08.789 line:-2
angularInset can be set on a sector
to create a gap between sectors.


52
00:03:08.822 --> 00:03:12.726 line:-2
Here, I set the angular inset for sectors
to 1.5 points,


53
00:03:12.759 --> 00:03:17.731 line:-2
so the gap between two sectors
is double the inset, 3 points wide.


54
00:03:17.764 --> 00:03:22.936 line:-2
I also set a corner radius
which gives me a nicely rounded pie crust.


55
00:03:22.970 --> 00:03:27.441 line:-2
That&nbsp;already looks stunning
with just a few lines of code.


56
00:03:27.474 --> 00:03:31.812 line:-2
To try a different look,
let's turn this chart into a donut chart.


57
00:03:33.013 --> 00:03:37.417 line:-2
I set the inner radius to be a ratio
of the full radius of the pie.


58
00:03:37.451 --> 00:03:40.354 line:-2
To me, the golden ratio
looks just about right,


59
00:03:40.387 --> 00:03:43.490 line:-2
but you might like a different thickness
for your donut.


60
00:03:43.524 --> 00:03:47.227 line:-2
Of all the sold pancakes,
we have a clear winner, cachapa,


61
00:03:47.261 --> 00:03:49.963 line:-2
that's currently displayed
above the chart.


62
00:03:49.997 --> 00:03:52.533 line:-2
But because donut charts
are hollow in the center,


63
00:03:52.566 --> 00:03:55.936 line:-2
I want to move the text
to the center of the chart.


64
00:03:55.969 --> 00:03:58.705 line:-1
I put the text in a chartBackground.


65
00:03:58.739 --> 00:04:02.109 line:-2
I use some position calculations
to make sure the text is centered


66
00:04:02.142 --> 00:04:04.144 line:-1
in the donut hole.


67
00:04:05.812 --> 00:04:09.082 line:-1
Now that's a nifty-looking donut chart.


68
00:04:09.116 --> 00:04:12.519 line:-1
So that's pie charts and donut charts.


69
00:04:12.553 --> 00:04:15.789 line:-2
They are a great way to make
an impression with your data,


70
00:04:15.822 --> 00:04:18.992 line:-2
and they are absolutely stunning
on a big screen.


71
00:04:19.026 --> 00:04:22.596 line:-2
Next, I'd like to dive deep
into some chart interactivity features,


72
00:04:22.629 --> 00:04:24.831 line:-1
starting with selection.


73
00:04:24.865 --> 00:04:26.934 line:-1
By enabling interactivity in your charts,


74
00:04:26.967 --> 00:04:30.504 line:-2
you are progressively disclosing
additional details.


75
00:04:30.537 --> 00:04:34.041 line:-2
Interactivity encourages people
to explore data naturally


76
00:04:34.074 --> 00:04:37.211 line:-2
using various forms of input,
such as touch.


77
00:04:38.212 --> 00:04:41.782 line:-2
Selection is a direct way
for you to communicate with a chart,


78
00:04:41.815 --> 00:04:44.384 line:-2
and Apple-designed charts,
like the heart rate chart,


79
00:04:44.418 --> 00:04:46.753 line:-1
are perfect examples of that.


80
00:04:46.787 --> 00:04:49.289 line:-1
By selecting a point along an axis,


81
00:04:49.323 --> 00:04:52.793 line:-2
the chart will reveal
additional information.


82
00:04:52.826 --> 00:04:55.829 line:-2
Let's bring this idea
over to the pancake sales app.


83
00:04:57.431 --> 00:04:59.933 line:-2
One chart in the app visualizes
the average sales


84
00:04:59.967 --> 00:05:02.469 line:-1
of each day of the week in two cities.


85
00:05:03.604 --> 00:05:08.141 line:-2
I'll enable value selection on this chart
to reveal the detailed sales numbers


86
00:05:08.175 --> 00:05:12.846 line:-2
via a popover that shows the number
of pancakes sold on the selected day.


87
00:05:14.515 --> 00:05:18.752 line:-2
This is how the chart is defined.
Each city has a data series.


88
00:05:18.785 --> 00:05:23.457 line:-2
Each element in the series has
a day of the week and a sales count.


89
00:05:23.490 --> 00:05:26.894 line:-1
The lines are then styled by city name.


90
00:05:26.927 --> 00:05:29.963 line:-2
You may be already familiar
with the chartOverlay modifier,


91
00:05:29.997 --> 00:05:34.201 line:-2
which allows you to overlay
a SwiftUI view to capture gestures.


92
00:05:34,234 --> 00:05:39,139
But in iOS 17, I can use
the new chartXSelection modifier.


93
00:05:39,173 --> 00:05:42,075
It handles
all the gesture recognition for me


94
00:05:42,109 --> 00:05:44,778
and stores the selected value
to a binding.


95
00:05:47.014 --> 00:05:51.385 line:-2
The selection modifier gives me
the raw date value along the X axis,


96
00:05:51.418 --> 00:05:54.421 line:-2
so I define a computed property
to match it to a data point


97
00:05:54.454 --> 00:05:56.957 line:-1
in my line chart.


98
00:05:56.990 --> 00:06:00.994 line:-2
Let's extend the chart to display
a popover when a value is selected.


99
00:06:03.330 --> 00:06:05.465 line:-1
When a value is selected,


100
00:06:05.499 --> 00:06:09.369 line:-2
I add a vertical rule mark
as a selection indicator.


101
00:06:09.403 --> 00:06:12.606 line:-2
I set its Z index to be lower
than the default 0 value


102
00:06:12.639 --> 00:06:16.743 line:-2
to make sure the rule mark
stays behind the line marks.


103
00:06:16.777 --> 00:06:20.647 line:-2
Now let's make a popover
on top of the selection indicator.


104
00:06:20.681 --> 00:06:24.985 line:-2
I can do this as an annotation
using a custom SwiftUI view.


105
00:06:25.018 --> 00:06:27.588 line:-2
Annotations are usually positioned
within the chart,


106
00:06:27.621 --> 00:06:32.159 line:-2
but in this case, the popover extends
beyond the bounds of the chart.


107
00:06:32.192 --> 00:06:35.696 line:-2
This is where I need
an overflow resolution for annotations.


108
00:06:37.698 --> 00:06:40.367 line:-1
On the X axis, I make it fit to the chart


109
00:06:40.400 --> 00:06:44.905 line:-2
such that the popover never moves
past the horizontal bounds of the chart.


110
00:06:44.938 --> 00:06:48.075 line:-2
On the Y axis,
I disable overflow resolution


111
00:06:48.108 --> 00:06:51.111 line:-2
so that the annotation can be
just above the chart.


112
00:06:53.013 --> 00:06:55.916 line:-2
With a selection&nbsp;binding
and a rule mark with annotation,


113
00:06:55.949 --> 00:06:59.786 line:-1
I now have an interactive line chart.


114
00:06:59.820 --> 00:07:02.656 line:-2
Swift Charts supports selection
on macOS too,


115
00:07:02.689 --> 00:07:05.859 line:-2
where hover gesture is the default
for value selection.


116
00:07:07.628 --> 00:07:09.730 line:-1
Besides single value selection,


117
00:07:09.763 --> 00:07:14.568 line:-2
a variant of this chart selection modifier
allows you to select a range.


118
00:07:14.601 --> 00:07:18.505 line:-2
On iOS, the default is
a two-finger tap gesture,


119
00:07:18.539 --> 00:07:21.775 line:-1
and on macOS, it's a drag gesture.


120
00:07:21.808 --> 00:07:26.213 line:-2
Swift Charts also allows you to provide
a custom gesture for selection,


121
00:07:26.246 --> 00:07:30.584 line:-2
with ChartProxy helping you select a value
based on gesture locations.


122
00:07:32.786 --> 00:07:35.155 line:-1
Beyond charts in X and Y coordinates,


123
00:07:35.189 --> 00:07:39.493 line:-2
chart value selection works seamlessly
with pie charts and donut charts.


124
00:07:39.526 --> 00:07:42.196 line:-2
Tapping and highlighting sectors
is a lot of fun.


125
00:07:43.397 --> 00:07:45.999 line:-2
So selection was all about
revealing additional information


126
00:07:46.033 --> 00:07:47.568 line:-1
in your chart.


127
00:07:47.601 --> 00:07:51.839 line:-2
Another important part of interactivity
is about navigating the data.


128
00:07:51.872 --> 00:07:53.807 line:-1
Let's talk about scrolling.


129
00:07:54.875 --> 00:08:00.280 line:-2
I want to create a chart that visualizes
daily pancake sales for a whole year.


130
00:08:00.314 --> 00:08:04.218 line:-2
Fitting all 365 days on a screen
would be unrealistic,


131
00:08:04.251 --> 00:08:06.053 line:-1
so it has to be scrollable.


132
00:08:06.086 --> 00:08:10.824 line:-2
To enable scrolling, I simply call
the chartScrollableAxes modifier.


133
00:08:10.858 --> 00:08:14.161 line:-2
With chartXVisibleDomain,
I set a visible window


134
00:08:14.194 --> 00:08:17.197 line:-1
of 30 days as a time interval.


135
00:08:17.231 --> 00:08:21.235 line:-2
To be able to display the total pancake
sales in the current visible domain,


136
00:08:21.268 --> 00:08:26.540 line:-2
I use chartScrollPosition
to store the current date to a binding.


137
00:08:26.573 --> 00:08:30.344 line:-1
Now I can&nbsp;just take my finger and scroll.


138
00:08:31.945 --> 00:08:33.780 line:-1
Not only can I scroll the plot,


139
00:08:33.814 --> 00:08:38.218 line:-2
the axis content scrolls with it,
and it's buttery smooth.


140
00:08:38.252 --> 00:08:41.555 line:-2
Scrolling can be customized
in a few different ways.


141
00:08:41.588 --> 00:08:45.592 line:-2
For example, I'd like scrolling
to always snap to a date unit.


142
00:08:45.626 --> 00:08:48.996 line:-1
This brings us to scroll behaviors.


143
00:08:49.029 --> 00:08:53.267 line:-2
ScrollTargetBehavior is a new addition
to SwiftUI and Swift Charts


144
00:08:53.300 --> 00:08:56.970 line:-2
that allows you to align
the scroll view content with values.


145
00:08:58.539 --> 00:09:00.607 line:-1
For the snapping behavior that I wanted,


146
00:09:00.641 --> 00:09:04.211 line:-1
I set it to match the first hour of a day.


147
00:09:04.244 --> 00:09:07.548 line:-2
majorAlignment customizes it
one step further


148
00:09:07.581 --> 00:09:10.384 line:-1
by defining the swiping behavior.


149
00:09:10.417 --> 00:09:12.653 line:-2
Here, I set it
to the first day of a month,


150
00:09:12.686 --> 00:09:15.622 line:-2
so that when I page through a chart
by swiping,


151
00:09:15.656 --> 00:09:18.258 line:-2
I'll always land
on the first of each month.


152
00:09:19,626 --> 00:09:22,963
Scrollable charts are built on top
of some of the latest enhancements


153
00:09:22,996 --> 00:09:25,332
to scroll views in SwiftUI.


154
00:09:25,365 --> 00:09:29,670
For more information,
be sure to check out Beyond Scroll Views.


155
00:09:29.703 --> 00:09:33.040 line:-2
Swift Charts provides you
with endless possibilities


156
00:09:33.073 --> 00:09:34.842 line:-1
to visualize data.


157
00:09:34.875 --> 00:09:37.411 line:-1
Beyond charts in and X and Y coordinates,


158
00:09:37.444 --> 00:09:40.047 line:-2
pie charts are now part
of the family of APIs


159
00:09:40.080 --> 00:09:43.016 line:-1
to create Apple-designed charts.


160
00:09:43.050 --> 00:09:46.086 line:-2
Pie charts are simple
yet powerful visualizations.


161
00:09:46.119 --> 00:09:50.257 line:-2
They work the best when representing
part-to-whole data relationships.


162
00:09:50.290 --> 00:09:53.160 line:-2
Interactivity features
like selection and scrolling


163
00:09:53.193 --> 00:09:56.830 line:-2
enable a whole new dimension
in your data visualizations,


164
00:09:56.864 --> 00:10:00.701 line:-2
putting your user at the driver's seat
as they explore data.


165
00:10:00.734 --> 00:10:04.238 line:-1
Enjoy baking pie and donut charts.


166
00:10:04.271 --> 00:10:11.278 line:-1
♪ ♪

