2
00:00:00,334 --> 00:00:06,340 line:-1
♪ ♪


3
00:00:10.010 --> 00:00:11.178 line:-1 align:center
Ian: Hi, everyone.


4
00:00:11.211 --> 00:00:14.448 line:-2 align:center
I'm Ian, and I'm an engineer
on the App Store server team.


5
00:00:14,481 --> 00:00:20,053 line:-2
Today I'll share some exciting updates
about our server APIs for in-app purchase,


6
00:00:20,087 --> 00:00:23,857 line:-2
including new features
and important updates.


7
00:00:23,891 --> 00:00:27,494 line:-2
If you're not familiar,
we offer two primary APIs


8
00:00:27,528 --> 00:00:32,165 line:-2
that help you get the most
out of in-app purchases on your server.


9
00:00:32,199 --> 00:00:35,869 line:-1
The first is the App Store Server API.


10
00:00:35,903 --> 00:00:40,274 line:-2
You call the App Store Server API
on-demand from your server,


11
00:00:40,307 --> 00:00:42,643 line:-1
and it returns all the data you need


12
00:00:42.676 --> 00:00:47.548 line:-2 align:center
to effectively manage in-app purchases
made in your apps.


13
00:00:47.581 --> 00:00:52.119 line:-2 align:center
The API offers a variety
of powerful endpoints for retrieving


14
00:00:52.152 --> 00:00:55.222 line:-1 align:center
and even modifying in-app purchase data.


15
00:00:57.124 --> 00:01:02.696 line:-2 align:center
The other major API we offer
is App Store Server Notifications V2.


16
00:01:03,897 --> 00:01:07,067 line:-1
With App Store Server Notifications V2,


17
00:01:07,100 --> 00:01:09,937 line:-2
the App Store server
proactively sends updates


18
00:01:09,970 --> 00:01:14,508 line:-2
to your server
about in-app purchases made in your app.


19
00:01:14,541 --> 00:01:17,044 line:-2
That means
you can get minute-by-minute updates


20
00:01:17,077 --> 00:01:20,914 line:-2
without needing
to poll the App Store Server API.


21
00:01:22.549 --> 00:01:25.953 line:-2 align:center
Notifications cover
a comprehensive set of events,


22
00:01:25.986 --> 00:01:31.992 line:-2 align:center
including subscription renewals,
expirations, refunds, and much more.


23
00:01:33,093 --> 00:01:37,798 line:-2
These events allow you to track
the full lifecycle of in-app purchases,


24
00:01:37.831 --> 00:01:42.002 line:-2 align:center
so you can better understand
and respond to user behavior.


25
00:01:43,103 --> 00:01:47,508 line:-2
The App Store Server API
and App Store Server Notifications V2


26
00:01:47,541 --> 00:01:50,410 line:-1
share a lot of great features.


27
00:01:50.444 --> 00:01:54.882 line:-2 align:center
They both provide transaction data
in a familiar JSON format,


28
00:01:54,915 --> 00:02:00,220 line:-2
and the data is signed, so you can be
confident it came from Apple.


29
00:02:00.254 --> 00:02:05.225 line:-2 align:center
You can also use both APIs
to support your apps that use StoreKit 2


30
00:02:05.259 --> 00:02:08.662 line:-1 align:center
or the original StoreKit API.


31
00:02:08,695 --> 00:02:11,198 align:center
And we actively support these APIs


32
00:02:11,231 --> 00:02:14,301 line:1
with new features based on your feedback.


33
00:02:15.602 --> 00:02:17.504 line:-1 align:center
Today I’m happy to announce


34
00:02:17,538 --> 00:02:19,840 line:-1
the latest collection of updates coming


35
00:02:19,873 --> 00:02:21,742 line:-1
to the App Store Server API


36
00:02:21,775 --> 00:02:25,145 line:-1
and App Store Server Notifications V2.


37
00:02:26.980 --> 00:02:28.649 line:-1 align:center
We have so many new features,


38
00:02:28,682 --> 00:02:30,484 line:-1
I only have time to cover a few


39
00:02:30,517 --> 00:02:32,119 line:-1
in today's session.


40
00:02:32.152 --> 00:02:33.754 line:-1 align:center
Please check out our developer


41
00:02:33,787 --> 00:02:35,923 line:-1
documentation for the full details


42
00:02:35,956 --> 00:02:38,592 line:-1
of all these new features.


43
00:02:38.625 --> 00:02:41.295 line:-1 align:center
Now let's dive into this great selection


44
00:02:41.328 --> 00:02:43.830 line:-1 align:center
of App Store server updates.


45
00:02:43,864 --> 00:02:46,867 line:-1
I'll share today's updates in three parts.


46
00:02:46,900 --> 00:02:50,838 line:-2
First, I'll detail some new features
that make working with transactions


47
00:02:50.871 --> 00:02:53.240 line:-1 align:center
on your server easier.


48
00:02:53.273 --> 00:02:57.277 line:-2 align:center
Next, I'll cover enhancements
to App Store Server Notifications


49
00:02:57.311 --> 00:03:02.716 line:-2 align:center
that will help you reliably determine
the status of your users' subscriptions.


50
00:03:02.749 --> 00:03:05.352 line:-2 align:center
And finally,
I'll provide important updates


51
00:03:05.385 --> 00:03:09.056 line:-1 align:center
about migrating away from our older APIs.


52
00:03:09.089 --> 00:03:12.326 line:-1 align:center
Let's get started with transactions.


53
00:03:12,359 --> 00:03:16,997 line:-2
Transactions are a core data object
for in-app purchase.


54
00:03:17.030 --> 00:03:19.800 line:-2 align:center
They represent
an in-app purchase on a device


55
00:03:19.833 --> 00:03:23.370 line:-2 align:center
and contain important information
about that purchase,


56
00:03:23.403 --> 00:03:26.974 line:-1 align:center
such as the product identifier, the type,


57
00:03:27,007 --> 00:03:30,110 line:-1
the purchase date, and much more.


58
00:03:31,745 --> 00:03:34,281 line:-2
The App Store Server
represents a transaction


59
00:03:34,314 --> 00:03:38,418 line:-1
through a JSON object signed with JWS.


60
00:03:38.452 --> 00:03:42.155 line:-2 align:center
This is a secure,
standardized format that you'll see


61
00:03:42,189 --> 00:03:47,661 line:-2
across the App Store Server API
and App Store Server Notifications V2.


62
00:03:48,962 --> 00:03:52,499 line:-2
The primary way
to retrieve these signed transactions


63
00:03:52,533 --> 00:03:57,838 line:-2
is using the Get Transaction History
endpoint of the App Store Server API.


64
00:03:59,406 --> 00:04:02,476 line:-2
This endpoint returns
the full transaction history


65
00:04:02,509 --> 00:04:06,580 line:-2
for a given user of your app,
so you can use it to keep up-to-date


66
00:04:06.613 --> 00:04:11.151 line:-2 align:center
with all of a user's purchases,
from past to present.


67
00:04:11,185 --> 00:04:12,920 line:-1
But sometimes, your server


68
00:04:12,953 --> 00:04:15,422 line:-1
is already aware of a transaction,


69
00:04:15.455 --> 00:04:17.457 line:-1 align:center
for example, due to a call made


70
00:04:17.491 --> 00:04:19.860 line:-1 align:center
from your app to your server.


71
00:04:19.893 --> 00:04:21.562 line:-1 align:center
Server-side, you may want


72
00:04:21,595 --> 00:04:23,964 line:-1
to further validate that transaction


73
00:04:23.997 --> 00:04:25.566 line:-1 align:center
and ensure you have the most


74
00:04:25,599 --> 00:04:28,135 line:-1
up-to-date information for it.


75
00:04:29.336 --> 00:04:32.172 line:-1 align:center
Previously, this use case required calling


76
00:04:32,206 --> 00:04:33,841 line:-1
Get Transaction History


77
00:04:33.874 --> 00:04:35.509 line:-1 align:center
and sifting through the response


78
00:04:35.542 --> 00:04:38.011 line:-1 align:center
for the matching transaction.


79
00:04:38,045 --> 00:04:40,514 line:-1
Once found, you could refresh your record


80
00:04:40,547 --> 00:04:42,349 line:-1
of the transaction with the data


81
00:04:42.382 --> 00:04:43.550 line:-1 align:center
in the response.


82
00:04:44,551 --> 00:04:46,720 line:-1
This process might feel tedious,


83
00:04:46,753 --> 00:04:51,592 line:-2
particularly if your user's transaction
history spans multiple pages,


84
00:04:51,625 --> 00:04:54,761 line:-1
requiring multiple calls to the endpoint.


85
00:04:54,795 --> 00:04:59,299 line:-2
And it also doesn't work if you're looking
for a finished consumable transaction,


86
00:04:59,333 --> 00:05:03,904 line:-2
as those don't appear
in the Get Transaction History response.


87
00:05:03,937 --> 00:05:08,275 line:-2
This use case simply demands
a more specific solution.


88
00:05:09.443 --> 00:05:12.346 line:-2 align:center
That's why today,
we're introducing a new endpoint


89
00:05:12,379 --> 00:05:15,449 line:-1
that will directly address this use case.


90
00:05:15,482 --> 00:05:18,619 line:-2
With the new
Get Transaction Info endpoint,


91
00:05:18.652 --> 00:05:23.390 line:-2 align:center
you can request the signed transaction
information for a single purchase,


92
00:05:23,423 --> 00:05:26,927 line:-2
and all you need
to provide is a transactionId.


93
00:05:28.529 --> 00:05:32.332 line:-2 align:center
All transactionIds are supported,
no matter the product type


94
00:05:32,366 --> 00:05:34,935 line:-1
or the finished status of the transaction


95
00:05:34.968 --> 00:05:36.904 line:-1 align:center
on the user's device.


96
00:05:36,937 --> 00:05:38,939 line:-1
That's right, you can even fetch


97
00:05:38.972 --> 00:05:41.909 line:-1 align:center
finished consumables from this endpoint.


98
00:05:43,243 --> 00:05:46,847 line:-2
Let's take a quick look
at how the new endpoint works.


99
00:05:47.714 --> 00:05:52.286 line:-2 align:center
You'll send a GET request to
this new endpoint on the App Store server,


100
00:05:52.319 --> 00:05:55.956 line:-2 align:center
including the transactionId
as a path parameter.


101
00:05:57.157 --> 00:06:02.029 line:-2 align:center
You'll receive a response containing
a signedTransactionInfo string.


102
00:06:03,463 --> 00:06:08,302 line:-2
By decoding the signedTransactionInfo,
you can view the transaction information


103
00:06:08,335 --> 00:06:11,505 line:-1
for the ID you provided in the request.


104
00:06:13,307 --> 00:06:14,474 line:-1
And that's it.


105
00:06:14,508 --> 00:06:17,644 line:-2
The new Get Transaction Info
endpoint is quite simple,


106
00:06:17.678 --> 00:06:22.349 line:-2 align:center
but makes for greater flexibility when
working with transactions on your server.


107
00:06:22,382 --> 00:06:26,453 line:-2
I think you'll find it useful
for a variety of use cases.


108
00:06:26.486 --> 00:06:31.325 line:-2 align:center
Now, let's take that theme of flexibility
and extend it even further.


109
00:06:32,626 --> 00:06:37,631 line:-2
You might be familiar with these popular
endpoints of the App Store Server API.


110
00:06:38,732 --> 00:06:42,336 line:-2
Each of these endpoints require
an originalTransactionId


111
00:06:42,369 --> 00:06:44,438 line:-1
as a path parameter.


112
00:06:44.471 --> 00:06:50.344 line:-2 align:center
This id indicates to the server which user
you're requesting or sending data for.


113
00:06:51,545 --> 00:06:55,682 line:-2
But you might not always have
an originalTransactionId handy.


114
00:06:55,716 --> 00:06:59,119 line:-1
What if all you have is a transactionId?


115
00:06:59.152 --> 00:07:02.723 line:-2 align:center
You could send it to the new
Get Transaction Info endpoint


116
00:07:02,756 --> 00:07:05,859 line:-2
in order to retrieve
the originalTransactionId,


117
00:07:05,893 --> 00:07:09,162 line:-2
but why call one endpoint
just to call another?


118
00:07:09.196 --> 00:07:14.801 line:-2 align:center
Instead, starting today, you can call
these endpoints with any transactionId.


119
00:07:16,103 --> 00:07:21,241 line:-2
Just provide the ID in the path
of your request, just as you did before.


120
00:07:21,275 --> 00:07:24,411 line:-2
We hope this greater flexibility
will make it easier than ever


121
00:07:24,444 --> 00:07:28,515 line:-2
to call these core endpoints
of the App Store Server API.


122
00:07:28,549 --> 00:07:30,551 line:-2
And if you're
already calling these endpoints


123
00:07:30.584 --> 00:07:32.886 line:-1 align:center
with originalTransactionIds,


124
00:07:32,920 --> 00:07:36,690 line:-2
don't worry,
they will continue to work as well.


125
00:07:36.723 --> 00:07:41.995 line:-2 align:center
Now let's switch over to updates
coming to App Store Server Notifications.


126
00:07:42.029 --> 00:07:45.165 line:-2 align:center
If your app offers
auto-renewable subscriptions,


127
00:07:45,199 --> 00:07:48,936 line:-2
it's important for you to keep track
of the status of those subscriptions


128
00:07:48,969 --> 00:07:51,505 line:-1
and how it changes over time.


129
00:07:52,472 --> 00:07:57,077 line:-2
Here you can see the five
possible statuses of a subscription.


130
00:07:57,110 --> 00:08:00,147 line:-1
With App Store Server Notifications V2,


131
00:08:00.180 --> 00:08:02.316 line:-1 align:center
you receive prompt notifications


132
00:08:02,349 --> 00:08:05,552 line:-2
for events that lead
to changes in this status,


133
00:08:05.586 --> 00:08:08.388 line:-2 align:center
so you can quickly enable
and disable content


134
00:08:08,422 --> 00:08:12,826 line:-2
at the appropriate time
and maintain a smooth user experience.


135
00:08:13,861 --> 00:08:17,397 line:-2
Let's take a look at how notifications
can inform your knowledge


136
00:08:17,431 --> 00:08:19,600 line:-1
of a subscription's status.


137
00:08:19.633 --> 00:08:22.202 line:-1 align:center
Many notification events directly indicate


138
00:08:22,236 --> 00:08:24,104 line:-1
the status of the subscription


139
00:08:24,137 --> 00:08:27,241 line:-1
through their type and subtype.


140
00:08:27.274 --> 00:08:29.510 line:-1 align:center
Take for example this SUBSCRIBED


141
00:08:29,543 --> 00:08:32,880 line:-1
notification with subtype INITIAL_BUY.


142
00:08:34.314 --> 00:08:36.149 line:-1 align:center
This notification indicates


143
00:08:36.183 --> 00:08:38.218 line:-1 align:center
a new subscription to your product,


144
00:08:38,252 --> 00:08:40,220 line:-1
so you know the subscription's status


145
00:08:40,254 --> 00:08:42,022 line:-1
is Active.


146
00:08:43,390 --> 00:08:45,158 line:-1
Here's an even simpler example,


147
00:08:45,192 --> 00:08:48,262 line:-1
where the notification type is EXPIRED.


148
00:08:49.363 --> 00:08:51.598 line:-1 align:center
This clearly indicates that the status


149
00:08:51,632 --> 00:08:53,433 line:-1
of the associated subscription


150
00:08:53.467 --> 00:08:55.402 line:-1 align:center
is now Expired.


151
00:08:57.204 --> 00:08:58.805 line:-1 align:center
But for some notifications,


152
00:08:58,839 --> 00:09:00,174 line:-1
the subscription status


153
00:09:00,207 --> 00:09:02,409 line:-1
may not be so clear.


154
00:09:02,442 --> 00:09:06,213 line:-1
Take for example this REFUND notification.


155
00:09:06,246 --> 00:09:08,115 line:-1
This notification type is sent


156
00:09:08.148 --> 00:09:09.750 line:-1 align:center
when a refund is granted


157
00:09:09,783 --> 00:09:13,187 line:-1
for an in-app purchase made in your app.


158
00:09:13,220 --> 00:09:15,489 line:-1
Checking the signedTransactionInfo


159
00:09:15.522 --> 00:09:17.357 line:-1 align:center
of this notification will tell us


160
00:09:17.391 --> 00:09:19.793 line:-1 align:center
what purchase was refunded.


161
00:09:21.728 --> 00:09:23.564 line:-1 align:center
In this case, we see the refund


162
00:09:23,597 --> 00:09:25,966 line:-1
was for an auto-renewable subscription,


163
00:09:25,999 --> 00:09:27,868 line:-1
so we'd like to update our record


164
00:09:27,901 --> 00:09:30,204 line:-1
of the subscription's status.


165
00:09:31,705 --> 00:09:33,473 line:-1
It might be tempting to assume


166
00:09:33.507 --> 00:09:36.043 line:-1 align:center
the status is now "Revoked,"


167
00:09:36,076 --> 00:09:38,712 line:-1
but that's not necessarily the case.


168
00:09:38.745 --> 00:09:42.082 line:-2 align:center
If there's a more recent
subscription renewal purchase


169
00:09:42,115 --> 00:09:44,885 line:-1
with the same originalTransactionId,


170
00:09:44.918 --> 00:09:49.056 line:-2 align:center
the status
of the subscription could still be Active.


171
00:09:49.089 --> 00:09:52.025 line:-2 align:center
If that's the case,
you should not disable access


172
00:09:52,059 --> 00:09:54,061 line:-1
to the subscription content.


173
00:09:56,396 --> 00:09:58,432 line:-1
In this situation, the status


174
00:09:58.465 --> 00:10:01.268 line:-1 align:center
of the subscription is simply unclear,


175
00:10:01.301 --> 00:10:03.570 line:-1 align:center
and the data in the notification alone


176
00:10:03,604 --> 00:10:06,306 line:-1
is not enough to update it.


177
00:10:06.340 --> 00:10:08.141 line:-1 align:center
This is not ideal.


178
00:10:08,175 --> 00:10:12,145 line:-2
When you receive an App Store
server notification for a subscription,


179
00:10:12,179 --> 00:10:16,550 line:-2
we want it to clearly indicate
the latest status of the subscription,


180
00:10:16.583 --> 00:10:21.188 line:-2 align:center
so you can keep this important
information up-to-date on your server.


181
00:10:22.189 --> 00:10:25.659 line:-2 align:center
That's why today,
we're introducing a new status field


182
00:10:25.692 --> 00:10:30.564 line:-2 align:center
to the data object
of App Store Server Notifications V2.


183
00:10:30.597 --> 00:10:33.734 line:-2 align:center
This field is a simple integer
that indicates one


184
00:10:33.767 --> 00:10:38.105 line:-2 align:center
of the five core states
of a subscription I detailed earlier.


185
00:10:40,007 --> 00:10:43,911 line:-2
This new field will be included
in every notification we send


186
00:10:43,944 --> 00:10:46,046 line:-1
for auto-renewable subscriptions.


187
00:10:46,747 --> 00:10:48,549 line:1
Now you can get the status


188
00:10:48,582 --> 00:10:50,651 line:1
of a subscription without having to call


189
00:10:50,684 --> 00:10:53,320 line:1
the Get All Subscription Statuses endpoint


190
00:10:53,353 --> 00:10:55,856 line:1
of the App Store Server API.


191
00:10:55,889 --> 00:11:00,694 line:-2
Let's see how this new field improves
the scenario I described earlier.


192
00:11:00,727 --> 00:11:03,964 line:-1
Now when you receive a REFUND notification


193
00:11:03.997 --> 00:11:05.866 line:-1 align:center
for a subscription,


194
00:11:05.899 --> 00:11:07.968 line:-1 align:center
you can simply check the status field


195
00:11:08,001 --> 00:11:09,536 line:-1
to understand the status


196
00:11:09.570 --> 00:11:11.205 line:-1 align:center
of the subscription.


197
00:11:12.372 --> 00:11:14.474 line:-1 align:center
In this case it's 1, so you know


198
00:11:14,508 --> 00:11:17,544 line:-1
the associated subscription is Active.


199
00:11:18,979 --> 00:11:22,349 line:-2
The new status field makes
App Store Server Notifications


200
00:11:22.382 --> 00:11:24.251 line:-1 align:center
more useful than ever,


201
00:11:24.284 --> 00:11:28.689 line:-2 align:center
so useful, that you'll want
to ensure you don't miss a single one.


202
00:11:28,722 --> 00:11:32,993 line:-2
But if your server experiences an outage,
the App Store server may not be able


203
00:11:33.026 --> 00:11:35.963 line:-1 align:center
to reach it to send a notification.


204
00:11:36.997 --> 00:11:40.701 line:-2 align:center
That's why we offer
the Get Notification History endpoint


205
00:11:40,734 --> 00:11:42,970 line:-1
of the App Store Server API.


206
00:11:44,605 --> 00:11:48,442 line:-2
This endpoint allows you to request
up to the last six months


207
00:11:48,475 --> 00:11:53,580 line:-2
of version 2 notifications the App Store
server generated for your app.


208
00:11:55,382 --> 00:11:58,085 line:-2
That way when your server
has a known outage,


209
00:11:58,118 --> 00:12:00,654 align:center
you can call this endpoint
for the outage period


210
00:12:00,687 --> 00:12:04,258 line:0
and retrieve any notifications
your server missed.


211
00:12:05,259 --> 00:12:06,693 line:-1
For some use cases though,


212
00:12:06,727 --> 00:12:09,696 line:-2
this process
might not feel very efficient.


213
00:12:09,730 --> 00:12:14,501 line:-2
Occasionally, your server may miss
a notification even outside of an outage,


214
00:12:14,535 --> 00:12:18,272 line:-2
for example,
due to transient network issues.


215
00:12:18.305 --> 00:12:21.475 line:-2 align:center
In this situation,
you might not have a clear time period


216
00:12:21.508 --> 00:12:25.579 line:-2 align:center
to query the endpoint with,
leaving you to sift through pages


217
00:12:25,612 --> 00:12:29,716 line:-2
of notifications that your server
has largely already received.


218
00:12:30,484 --> 00:12:34,688 line:-2
To address this use case,
we're introducing a new request field


219
00:12:34.721 --> 00:12:38.792 line:-2 align:center
to Get Notification History
called "onlyFailures".


220
00:12:39,993 --> 00:12:44,231 line:-2
This optional field will limit
the notifications returned to only those


221
00:12:44,264 --> 00:12:47,234 line:-1
that have failed to reach your server.


222
00:12:47,267 --> 00:12:50,003 line:-2
The response
will even contain notifications


223
00:12:50,037 --> 00:12:52,840 line:-1
that are currently in the retry process.


224
00:12:54.541 --> 00:12:59.346 line:-2 align:center
Now you can recover from outages
and occasional network issues much faster,


225
00:12:59.379 --> 00:13:04.852 line:-2 align:center
as you only need to parse notifications
that your server hasn't already seen.


226
00:13:04.885 --> 00:13:08.222 line:-2 align:center
Let's take a look
at how this new field works.


227
00:13:08,255 --> 00:13:12,359 line:-2
You send a request
to the Get Notification History endpoint,


228
00:13:12,392 --> 00:13:17,297 line:-2
and you include the new field,
onlyFailures, in the request body.


229
00:13:18,532 --> 00:13:20,501 line:-1
Here's the response.


230
00:13:21.902 --> 00:13:26.974 line:-2 align:center
Each entry in the notificationHistory
array represents a notification,


231
00:13:27.007 --> 00:13:31.211 line:-2 align:center
and since you included the new
onlyFailures field in your request,


232
00:13:31.245 --> 00:13:35.382 line:-2 align:center
every notification listed here
has failed to reach your server.


233
00:13:36,350 --> 00:13:40,287 line:-2
Let's zoom in
to a single notification entry.


234
00:13:41,688 --> 00:13:44,358 line:-1
Here we have the signedPayload.


235
00:13:44,391 --> 00:13:48,362 line:-2
We can decode this string
to view the contents of the notification,


236
00:13:48,395 --> 00:13:51,598 line:-2
just as it was
originally sent to your server.


237
00:13:53.233 --> 00:13:57.371 line:-2 align:center
Taking a look at the sendAttempts array
for this notification,


238
00:13:57,404 --> 00:14:01,041 line:-2
we can now see the result
of each send attempt.


239
00:14:01,074 --> 00:14:04,211 line:-1
This array may contain up to six entries,


240
00:14:04,244 --> 00:14:08,916 line:-2
with one for the initial send attempt,
and up to five for retries.


241
00:14:10,817 --> 00:14:14,922 line:-2
Here we see only two entries,
and both have failed,


242
00:14:14.955 --> 00:14:19.126 line:-2 align:center
so the notification must
still be in the retry process.


243
00:14:19,159 --> 00:14:24,031 line:-2
If a later retry is successful,
this notification will no longer appear


244
00:14:24.064 --> 00:14:28.569 line:-2 align:center
for subsequent requests
that include the onlyFailures field.


245
00:14:29,536 --> 00:14:32,406 line:-2
So that's how
the new onlyFailures field works.


246
00:14:32,439 --> 00:14:37,110 line:-2
I think you'll find that it makes
Get Notification History even more useful.


247
00:14:38.111 --> 00:14:43.650 line:-2 align:center
Finally, an important update
about migrating away from our older APIs.


248
00:14:44,585 --> 00:14:48,222 line:-2
If your app has offered
in-app purchases for some time,


249
00:14:48.255 --> 00:14:52.092 line:-2 align:center
you're likely familiar
with the verifyReceipt API.


250
00:14:53.126 --> 00:14:58.365 line:-2 align:center
In 2021, we released
the App Store Server API as the new way


251
00:14:58,398 --> 00:15:01,869 line:-2
to get in-app purchase data
from the App Store Server.


252
00:15:01.902 --> 00:15:04.805 line:-1 align:center
Let's compare these two APIs.


253
00:15:06,773 --> 00:15:10,978 line:-2
With verifyReceipt,
you can verify and decode the receipts


254
00:15:11.011 --> 00:15:15.482 line:-2 align:center
you receive from clients running
the original version of StoreKit.


255
00:15:15,516 --> 00:15:19,419 line:-2
With the App Store Server API,
you can fetch all the same data


256
00:15:19.453 --> 00:15:23.891 line:-2 align:center
you find in receipts and more
using these three endpoints.


257
00:15:23,924 --> 00:15:27,594 line:-2
And the App Store Server API
also provides a variety


258
00:15:27,628 --> 00:15:30,664 line:0
of additional endpoints
that offer useful data


259
00:15:30,697 --> 00:15:32,232 align:center
and powerful functionality


260
00:15:32,266 --> 00:15:34,535 line:0
you won't find anywhere else.


261
00:15:36.203 --> 00:15:39.139 line:-1 align:center
Shifting to our notification APIs,


262
00:15:39,173 --> 00:15:43,944 line:-2
we still support the older
App Store Server Notifications V1.


263
00:15:45,579 --> 00:15:50,884 line:-2
But in 2021, we introduced
App Store Server Notifications V2.


264
00:15:50.918 --> 00:15:53.787 line:-1 align:center
Now let's compare these APIs.


265
00:15:54,888 --> 00:15:59,459 line:-2
App Store Server Notifications
V1 and V2 both offer


266
00:15:59.493 --> 00:16:04.031 line:-2 align:center
real-time in-app purchase events
sent directly to your server.


267
00:16:04.064 --> 00:16:06.333 line:-1 align:center
But V2 offers greater clarity


268
00:16:06.366 --> 00:16:10.370 line:-2 align:center
by defining events
using both a type and subtype.


269
00:16:10,404 --> 00:16:13,240 line:-1
And the differences don't stop there.


270
00:16:13.273 --> 00:16:17.544 line:-2 align:center
V2 also offers notifications
for additional events,


271
00:16:17.578 --> 00:16:20.681 line:-2 align:center
the ability
to request a test notification,


272
00:16:20,714 --> 00:16:23,116 line:-1
access to notification history,


273
00:16:23,150 --> 00:16:25,419 line:-1
and the brand-new status field


274
00:16:25.452 --> 00:16:28.889 line:-2 align:center
for tracking the state
of your users' subscriptions.


275
00:16:29.990 --> 00:16:35.128 line:-2 align:center
By adopting the App Store Server API
and App Store Server Notifications V2,


276
00:16:35.162 --> 00:16:38.932 line:-2 align:center
you'll unlock a wide array
of new features for securely


277
00:16:38,966 --> 00:16:42,970 line:-2
and efficiently managing
in-app purchase data on your server.


278
00:16:43.003 --> 00:16:48.175 line:-2 align:center
Ultimately, that means a better in-app
purchase experience for your customers.


279
00:16:49.109 --> 00:16:51.945 line:-2 align:center
That's why today,
we're announcing the deprecation


280
00:16:51,979 --> 00:16:56,450 line:-2
of verifyReceipt
and App Store Server Notifications V1.


281
00:16:56,483 --> 00:17:00,254 line:-2
Starting today,
these APIs are considered deprecated


282
00:17:00.287 --> 00:17:03.390 line:-2 align:center
and will no longer
receive feature updates.


283
00:17:04,491 --> 00:17:06,527 line:-1
Start planning your migration now


284
00:17:06,560 --> 00:17:10,197 line:-2
to enjoy all the benefits
of the newer APIs.


285
00:17:11,632 --> 00:17:15,169 line:-1
Migration requires just a few short steps.


286
00:17:16.170 --> 00:17:20.307 line:-2 align:center
To migrate from verifyReceipt
to the App Store Server API,


287
00:17:20.340 --> 00:17:24.745 line:-2 align:center
you'll first need to sign a JWT
to represent your app,


288
00:17:24.778 --> 00:17:29.149 line:-2 align:center
which is a simple process
outlined in our documentation.


289
00:17:29.183 --> 00:17:32.085 line:-2 align:center
Whenever you call
the App Store Server API,


290
00:17:32,119 --> 00:17:35,422 line:-1
you'll provide this JWT as a header.


291
00:17:35,455 --> 00:17:39,193 line:-2
It will prove that you own
the requested app data.


292
00:17:40,794 --> 00:17:45,732 line:-2
Next, you'll need to save a transactionId
for each of your users.


293
00:17:45,766 --> 00:17:49,102 line:-2
You'll provide this transactionId
as a path parameter


294
00:17:49.136 --> 00:17:51.305 line:-1 align:center
whenever you call core endpoints,


295
00:17:51.338 --> 00:17:56.009 line:-2 align:center
like Get Transaction History
and Get All Subscription Statuses.


296
00:17:56,043 --> 00:17:58,645 line:-1
Any transactionId will work.


297
00:17:58,679 --> 00:18:02,850 line:-2
If you maintain a database
you likely already have one saved.


298
00:18:02.883 --> 00:18:07.621 line:-2 align:center
Otherwise, you can extract one
from a receipt for each of your users.


299
00:18:08,922 --> 00:18:10,123 line:-1
And that's it.


300
00:18:10.157 --> 00:18:14.561 line:-2 align:center
You'll then have access to all the same
data you used to get from verifyReceipt


301
00:18:14,595 --> 00:18:16,496 line:-1
and so much more.


302
00:18:18.098 --> 00:18:21.502 line:-2 align:center
Migration
from App Store Server Notifications V1


303
00:18:21.535 --> 00:18:25.472 line:-1 align:center
to V2 is even simpler.


304
00:18:25,506 --> 00:18:28,041 line:-1
First, prepare your server to parse


305
00:18:28,075 --> 00:18:30,711 line:-1
the new V2 format.


306
00:18:30,744 --> 00:18:32,045 line:-1
If you're already using


307
00:18:32,079 --> 00:18:33,780 line:-1
the App Store Server API,


308
00:18:33.814 --> 00:18:35.916 line:-1 align:center
this step should be straightforward,


309
00:18:35,949 --> 00:18:39,419 line:-1
as App Store Server Notifications V2 uses


310
00:18:39.453 --> 00:18:42.956 line:-1 align:center
the same JWS transaction format.


311
00:18:44,358 --> 00:18:46,059 line:-1
Once your server is ready,


312
00:18:46,093 --> 00:18:48,061 line:-1
visit App Store Connect to change


313
00:18:48,095 --> 00:18:52,599 line:-2
your preference
from V1 to V2 notifications.


314
00:18:52.633 --> 00:18:54.501 line:-1 align:center
To test your implementation,


315
00:18:54,535 --> 00:18:56,637 line:-1
you can start by receiving version 2


316
00:18:56,670 --> 00:18:59,606 line:-1
notifications in sandbox only.


317
00:19:01,375 --> 00:19:02,943 line:-1
After switching your preference,


318
00:19:02,976 --> 00:19:04,912 line:-1
the App Store server will start sending


319
00:19:04,945 --> 00:19:08,415 line:-1
new notifications in the V2 format.


320
00:19:08,448 --> 00:19:10,651 line:-1
If you have any V1 notifications


321
00:19:10,684 --> 00:19:12,186 line:-1
in the retry process,


322
00:19:12,219 --> 00:19:14,021 line:-1
you may continue to receive them


323
00:19:14,054 --> 00:19:15,923 line:-1
for up to three days.


324
00:19:17.024 --> 00:19:22.429 line:-2 align:center
For more assistance with migration,
we have additional resources available.


325
00:19:22,462 --> 00:19:26,967 line:-2
The App Store Server API
and App Store Server Notifications V2


326
00:19:27.000 --> 00:19:29.670 line:-1 align:center
are available in the sandbox environment,


327
00:19:29.703 --> 00:19:34.474 line:-2 align:center
so you can test your implementation
before rolling it out to production.


328
00:19:35.475 --> 00:19:39.313 line:-2 align:center
And this week, we are releasing
the App Store Server Library,


329
00:19:39.346 --> 00:19:43.784 line:-2 align:center
a new open-source library
for calling the App Store Server API


330
00:19:43,817 --> 00:19:47,988 line:-2
and parsing
App Store Server Notifications V2.


331
00:19:48,021 --> 00:19:53,994 line:-2
It can help you easily call our endpoints,
verify the signed data you receive,


332
00:19:54,027 --> 00:19:59,566 line:-2
and even extract transactionIds
from receipts to make migration easier.


333
00:20:01.468 --> 00:20:03.437 line:-1 align:center
I hope you'll check out its dedicated


334
00:20:03,470 --> 00:20:06,607 line:-1
session at WWDC this year titled


335
00:20:06,640 --> 00:20:09,409 line:-1
"Meet the App Store Server Library."


336
00:20:09,443 --> 00:20:11,478 line:1
And for more tips on how to migrate,


337
00:20:11,512 --> 00:20:14,982 line:1
see the WWDC22 session titled,


338
00:20:15,015 --> 00:20:17,518 line:1
"Explore in-app purchase integration


339
00:20:17,551 --> 00:20:19,486 align:center
and migration".


340
00:20:20.521 --> 00:20:24.491 line:-2 align:center
That concludes our App Store Server
updates for this session.


341
00:20:24,525 --> 00:20:28,195 line:-2
I hope you'll utilize the great new
capabilities we announced today,


342
00:20:28.228 --> 00:20:31.164 line:-2 align:center
and check out our documentation
for even more features


343
00:20:31.198 --> 00:20:33.367 line:-1 align:center
we didn't have time to review.


344
00:20:34,468 --> 00:20:38,338 line:-2
Every feature is available now
in both sandbox and production,


345
00:20:38,372 --> 00:20:40,374 line:-1
so you can first test in sandbox,


346
00:20:40.407 --> 00:20:43.944 line:-2 align:center
then roll out to your production server
whenever you're ready.


347
00:20:45,145 --> 00:20:47,114 line:-1
And we'd love to hear from you.


348
00:20:47,147 --> 00:20:50,250 line:-2
If you have feature requests
for the App Store server,


349
00:20:50,284 --> 00:20:54,621 line:-2
please let us know
through Apple’s Feedback Assistant.


350
00:20:54,655 --> 00:20:57,424 line:-1
Thanks for joining me at WWDC23!


351
00:20:57,457 --> 00:21:02,763 align:center
♪ ♪

