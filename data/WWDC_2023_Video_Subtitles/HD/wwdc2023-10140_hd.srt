2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.010 --> 00:00:12.846 line:-1
Ricky: Hello, I'm Ricky, and welcome


4
00:00:12.880 --> 00:00:16.750 line:-2
to "What's new in StoreKit 2
and StoreKit Testing in Xcode."


5
00:00:16.783 --> 00:00:19.019 line:-2
In this session,
I'll talk about the new features


6
00:00:19.052 --> 00:00:20.888 line:-1
we're bringing to StoreKit this year,


7
00:00:20.921 --> 00:00:24.958 line:-2
as well as the enhancements
to the testing experience in Xcode.


8
00:00:24.992 --> 00:00:28.896 line:-2
StoreKit 2 was first introduced
at WWDC in 2021,


9
00:00:28.929 --> 00:00:32.499 line:-2
with new and more flexible APIs
using Swift.


10
00:00:32.533 --> 00:00:34.268 line:-1
This year, I am excited to show you


11
00:00:34.301 --> 00:00:37.237 line:-2
the new features
that make StoreKit 2 even better.


12
00:00:37.271 --> 00:00:41.308 line:-2
First, I will review
the new StoreKit framework features,


13
00:00:41.341 --> 00:00:45.946 line:-2
then, I'll share some updates
for building SwiftUI apps using StoreKit,


14
00:00:45.979 --> 00:00:50.050 line:-2
and finally, I will cover
what's new in StoreKit Testing in Xcode.


15
00:00:50.083 --> 00:00:53.153 line:-1
I am excited to introduce a new Swift API


16
00:00:53.187 --> 00:00:58.358 line:-2
for managing promoted in-app purchases,
available starting in iOS 16.4.


17
00:00:58.392 --> 00:01:00.727 line:-2
Promoted in-app purchases is
a feature that allows you


18
00:01:00.761 --> 00:01:03.964 line:-2
to merchandise your products
on your App Store product page,


19
00:01:03.997 --> 00:01:06.466 line:-1
each with a dedicated promotional image.


20
00:01:06.500 --> 00:01:09.002 line:-2
Promoting your in-app purchases
is a great way


21
00:01:09.036 --> 00:01:10.938 line:-1
to increase your product's visibility,


22
00:01:10.971 --> 00:01:14.174 line:-2
and you can easily set up
promoted purchases in App Store Connect.


23
00:01:14.208 --> 00:01:17.644 line:-2
To learn more about configuring
promoted in-app purchases,


24
00:01:17,678 --> 00:01:20,881
check out
"What's new in App Store Connect."


25
00:01:20,914 --> 00:01:23,884
Since promoted in-app purchases
are listed on the App Store,


26
00:01:23,917 --> 00:01:25,953
when a customer buys a promoted product,


27
00:01:25,986 --> 00:01:29,556
their interaction starts here
by tapping the purchase button.


28
00:01:29,590 --> 00:01:32,826
Then, the App Store sends
the purchase data to your app


29
00:01:32,860 --> 00:01:37,497
where you can listen for this information
and prompt them to complete the purchase.


30
00:01:37.531 --> 00:01:41.101 line:-2
To listen for promoted purchases,
use the Swift async sequence


31
00:01:41.134 --> 00:01:44.404 line:-2
which receives a new purchase intent
every time a customer initiates


32
00:01:44.438 --> 00:01:47.541 line:-2
the purchase for a promoted product
in the App Store.


33
00:01:47.574 --> 00:01:50.511 line:-2
First, create a listener
to receive purchase intents


34
00:01:50.544 --> 00:01:54.414 line:-1
using PurchaseIntent.intents.


35
00:01:54.448 --> 00:01:56.683 line:-2
Every time
the sequence receives a new object,


36
00:01:56.717 --> 00:02:01.121 line:-2
it contains the StoreKit Product
associated with the purchase.


37
00:02:01.154 --> 00:02:04.124 line:-2
You can prompt your customers
to purchase these products as usual


38
00:02:04.157 --> 00:02:07.628 line:-2
by calling purchase(),
which displays the familiar payment sheet


39
00:02:07.661 --> 00:02:10.597 line:-2
and allows them
to complete the interaction there.


40
00:02:10.631 --> 00:02:12.866 line:-2
If your app isn't ready
to complete a purchase,


41
00:02:12.900 --> 00:02:16.303 line:-2
you can also save the intent locally
and defer it.


42
00:02:16.336 --> 00:02:18.338 line:-1
You can always process it later.


43
00:02:20.541 --> 00:02:22.976 line:-2
Another feature
of promoting in-app purchases


44
00:02:23.010 --> 00:02:25.979 line:-2
is being able to customize
how your products are displayed locally


45
00:02:26.013 --> 00:02:27.848 line:-1
on the current device.


46
00:02:27.881 --> 00:02:30.984 line:-2
For example,
if a customer buys one of these products,


47
00:02:31.018 --> 00:02:35.789 line:-2
you can hide it, so the App Store doesn't
show it again when they browse or search.


48
00:02:35.822 --> 00:02:39.193 line:-2
You can also change the product order,
or the subset of products featured,


49
00:02:39.226 --> 00:02:41.228 line:-1
based on a current state in your app,


50
00:02:41.261 --> 00:02:44.298 line:-2
for example, a level advancement
in a game.


51
00:02:45.132 --> 00:02:47.601 line:-2
To cover all of these cases,
I am excited to show you


52
00:02:47.634 --> 00:02:50.771 line:-2
some new Swift APIs that you can use
to customize the order


53
00:02:50.804 --> 00:02:54.174 line:-2
and the visibility
of your promoted in-app purchases.


54
00:02:54.208 --> 00:02:56.176 line:-1
Let's see a quick demonstration.


55
00:02:56.977 --> 00:03:00.047 line:-2
After importing StoreKit,
you can check the current promotion order


56
00:03:00.080 --> 00:03:04.117 line:-1
with Product.PromotionInfo.currentOrder.


57
00:03:04.151 --> 00:03:06.620 line:-2
This returns a sequence
of PromotionInfo objects,


58
00:03:06.653 --> 00:03:09.089 line:-1
in the order that is currently set.


59
00:03:09.122 --> 00:03:11.859 line:-2
If this list is empty,
it means there are no local overrides


60
00:03:11.892 --> 00:03:14.428 line:-2
set for this device,
and the products people see


61
00:03:14.461 --> 00:03:18.465 line:-2
in the App Store are in the same order
that you configured in App Store Connect.


62
00:03:18.498 --> 00:03:20.934 line:-2
Each object in this sequence
contains information


63
00:03:20.968 --> 00:03:24.104 line:-1
regarding a promoted product in your app.


64
00:03:24.137 --> 00:03:26.907 line:-2
To set a custom order of promotions,
you can use the


65
00:03:26.940 --> 00:03:30.377 line:-2
Product.PromotionInfo.updateProductOrder
API


66
00:03:30.410 --> 00:03:32.279 line:-1
and pass a list of product identifiers


67
00:03:32.312 --> 00:03:35.983 line:-2
in the order you want them to appear
in the App Store for this device.


68
00:03:36.016 --> 00:03:40.187 line:-2
You can also hide and show products
without having to set a whole new order.


69
00:03:40.220 --> 00:03:42.589 line:-2
This can be done by changing
the visibility property


70
00:03:42.623 --> 00:03:44.758 line:-1
associated with promoted in-app purchases.


71
00:03:45,459 --> 00:03:50,998
The visibility state can be
visible, hidden, or default,


72
00:03:51,031 --> 00:03:53,500
which follows the settings
you configure in App Store Connect


73
00:03:53,534 --> 00:03:58,405
and applies to all devices that don't have
a local override set by your app.


74
00:03:58,438 --> 00:04:00,440
Let's see how we can change this in code.


75
00:04:01.575 --> 00:04:05.078 line:-2
The visibility value can be changed
in a couple of different ways.


76
00:04:05.112 --> 00:04:06.346 line:-1
Your app can call


77
00:04:06.380 --> 00:04:10.284 line:-2
the Product.PromotionInfo.
updateProductVisibility API


78
00:04:10.317 --> 00:04:14.254 line:-2
and change the value for a single product
by passing both the new visibility state


79
00:04:14.288 --> 00:04:17.457 line:-2
and the identifier
of that in-app purchase.


80
00:04:17.491 --> 00:04:20.594 line:-2
Alternatively,
you can also change the visibility value


81
00:04:20.627 --> 00:04:24.631 line:-2
by setting a member property
on each PromotionInfo object.


82
00:04:24.665 --> 00:04:29.903 line:-2
Then, to save the changes, call update()
on that same object you just modified.


83
00:04:29.937 --> 00:04:33.507 line:-2
And that is everything you need
to start using promoted in-app purchases


84
00:04:33.540 --> 00:04:35.843 line:-1
with StoreKit 2.


85
00:04:35.876 --> 00:04:38.745 line:-2
Now, I would like to show you
some of the enhancements we made


86
00:04:38.779 --> 00:04:41.081 line:-1
to the core data model in StoreKit 2.


87
00:04:42,749 --> 00:04:45,385
These models are useful
for managing your in-app purchases


88
00:04:45,419 --> 00:04:48,789
and related information,
for example, the purchase date


89
00:04:48,822 --> 00:04:51,058
and the subscription status.


90
00:04:51,091 --> 00:04:53,694
Let's dive into the new fields
we're adding to the Transaction


91
00:04:53,727 --> 00:04:58,232
and RenewalInfo data models, which bring
great improvements many of you requested.


92
00:05:00.100 --> 00:05:03.136 line:-2
The first new field is storefront,
and it appears


93
00:05:03.170 --> 00:05:07.274 line:-2
in the Transaction model
along with storefrontCountryCode.


94
00:05:07.307 --> 00:05:09.476 line:-1
The next new field is called reason.


95
00:05:09.510 --> 00:05:11.912 line:-2
It tells you whether a customer initiated
a purchase,


96
00:05:11.945 --> 00:05:16.049 line:-2
or if the transaction is
an automatic subscription renewal.


97
00:05:16.083 --> 00:05:19.553 line:-2
In the RenewalInfo model
under Product.SubscriptionInfo,


98
00:05:19.586 --> 00:05:22.723 line:-2
there is a new member
called nextRenewalDate.


99
00:05:22.756 --> 00:05:26.460 line:-2
This tells you when this
subscription renewal will be processed.


100
00:05:26,493 --> 00:05:30,697
All of these new fields are available
for apps you build with Xcode 15,


101
00:05:30,731 --> 00:05:33,567
and although initially released
with iOS 17,


102
00:05:33,600 --> 00:05:37,237
most of them also work retroactively
with prior versions of iOS as well


103
00:05:37,271 --> 00:05:39,573
when you are using StoreKit 2.


104
00:05:39.606 --> 00:05:42.142 line:-2
Next, I'd like to talk
about StoreKit Messages


105
00:05:42.176 --> 00:05:44.244 line:-2
and the great new feature we just added.


106
00:05:44.278 --> 00:05:48.882 line:-3
We introduced the Message API
last year at WWDC 2022


107
00:05:48.916 --> 00:05:52.386 line:-3
as a way for the App Store to notify
your customers of important information.


108
00:05:52.419 --> 00:05:56.590 line:-2
Messages have a Reason value
that tells you the purpose of the message.


109
00:05:56.623 --> 00:06:00.160 line:-2
Your app can choose
whether to defer or suppress messages.


110
00:06:00.194 --> 00:06:02.796 line:-3
For example,
you may want to defer a message


111
00:06:02.829 --> 00:06:06.500 line:-3
if displaying it would interrupt
your customers during an interaction flow.


112
00:06:06.533 --> 00:06:10.037 line:-3
Otherwise, StoreKit displays
any active messages automatically


113
00:06:10.070 --> 00:06:12.039 line:-2
when your app launches.


114
00:06:12.072 --> 00:06:15.943 line:-2
This year, we added a new message reason
called billingIssue.


115
00:06:15.976 --> 00:06:19.713 line:-2
This message is available
starting in iOS 16.4.


116
00:06:19.746 --> 00:06:22.850 line:-2
The App Store sends this message
when a subscription fails to renew


117
00:06:22.883 --> 00:06:24.618 line:-1
because of a billing problem.


118
00:06:24.651 --> 00:06:26.587 line:-1
StoreKit displays a Billing Problem sheet,


119
00:06:26.620 --> 00:06:30.123 line:-2
and customers can resolve the issue
without leaving your app.


120
00:06:30.157 --> 00:06:33.927 line:-2
This new property is already enabled
in sandbox to give you time to test it.


121
00:06:33.961 --> 00:06:37.130 line:-2
Please check back on the Apple Developer
website later this year


122
00:06:37.164 --> 00:06:40.467 line:-2
for updates on when this will be enabled
for all customers.


123
00:06:40.501 --> 00:06:42.803 line:-2
When the App Store fails
to renew a subscription,


124
00:06:42.836 --> 00:06:46.139 line:-2
the subscription goes
into a Billing Retry state.


125
00:06:46.173 --> 00:06:48.709 line:-2
To learn about how to test
this feature in sandbox,


126
00:06:48.742 --> 00:06:53.347 line:-3
please refer to the WWDC session
on testing in-app purchases.


127
00:06:53.380 --> 00:06:56.850 line:-2
Now, let's review
some security related updates.


128
00:06:56,884 --> 00:07:00,254
In order to keep StoreKit up-to-date
with modern security practices,


129
00:07:00,287 --> 00:07:02,523
we're migrating
our receipt signing certificate


130
00:07:02,556 --> 00:07:07,828
from using SHA-1 to SHA-256
for the "original StoreKit" receipt.


131
00:07:07,861 --> 00:07:11,265
Modern versions of cryptographic
libraries, like OpenSSL,


132
00:07:11,298 --> 00:07:16,436
already support SHA-256, but if your app
performs on-device receipt validation,


133
00:07:16,470 --> 00:07:20,407
it is important you verify that it handles
the new certificate properly.


134
00:07:20.440 --> 00:07:25.245 line:-2
The new SHA-256 signing certificate
will be used to sign receipts in sandbox


135
00:07:25.279 --> 00:07:28.182 line:-2
starting on June 20th,
and you will be able to test


136
00:07:28.215 --> 00:07:33.420 line:-2
on devices running iOS 16.6
and macOS 13.5 or later.


137
00:07:33.453 --> 00:07:36.323 line:-2
After August 14th,
the new certificate will be used


138
00:07:36.356 --> 00:07:38.926 line:-2
to sign receipts for all new apps
and app updates


139
00:07:38,959 --> 00:07:40,527
submitted to the App Store.


140
00:07:40,561 --> 00:07:45,032
For more details on this timeline,
you can check the Apple Developer website.


141
00:07:45.065 --> 00:07:48.569 line:-2
If your app uses StoreKit 2,
you don't need to do anything.


142
00:07:48.602 --> 00:07:51.071 line:-2
StoreKit 2's Signed Transaction,
Renewal Info,


143
00:07:51.104 --> 00:07:54.942 line:-2
and App Transaction
already use SHA-256 today.


144
00:07:54.975 --> 00:07:58.345 line:-2
And if you use App Store server APIs
to do receipt validation,


145
00:07:58.378 --> 00:08:00.447 line:-1
you also don't need to make any changes,


146
00:08:00.480 --> 00:08:03.083 line:-2
since we handle
the new format automatically.


147
00:08:03.116 --> 00:08:07.187 line:-2
Next, I am excited to show you
a whole new set of features for StoreKit


148
00:08:07.221 --> 00:08:10.190 line:-2
that make it very easy and quick
to merchandise in-app purchases


149
00:08:10.224 --> 00:08:12.326 line:-1
in your app, using SwiftUI.


150
00:08:12.359 --> 00:08:16.129 line:-2
There are new APIs to create
SwiftUI views for single in-app purchases,


151
00:08:16.163 --> 00:08:20.067 line:-2
whole stores of products, and even some
custom ones specific to subscriptions.


152
00:08:20.100 --> 00:08:24.905 line:-2
These function like normal SwiftUI views
and require minimal code to implement,


153
00:08:24.938 --> 00:08:28.742 line:-2
allowing you to get up and running
with your app as quick as possible.


154
00:08:28.775 --> 00:08:31.211 line:-1
Let's take a look at these new views.


155
00:08:31.245 --> 00:08:34.781 line:-2
With this product view, you can represent
a single in-app purchase,


156
00:08:34.815 --> 00:08:37.584 line:-2
complete with its localized title,
description,


157
00:08:37.618 --> 00:08:40.220 line:-1
and even the optional promotional image.


158
00:08:40.254 --> 00:08:44.191 line:-2
You can create it by passing
product identifier to ProductView.


159
00:08:44.224 --> 00:08:46.894 line:-2
And there is no need to load
the StoreKit product either.


160
00:08:46.927 --> 00:08:48.896 line:-1
You can just use the productID string.


161
00:08:48.929 --> 00:08:51.765 line:-2
StoreKit and SwiftUI will
take care of the rest.


162
00:08:51.798 --> 00:08:54.601 line:-2
There is also a new view to display
a whole collection of products,


163
00:08:54.635 --> 00:08:56.737 line:-1
like a store right in your app.


164
00:08:56.770 --> 00:08:59.239 line:-2
Instead of passing
a single product identifier,


165
00:08:59.273 --> 00:09:03.210 line:-2
you can use a collection of productIDs
in combination with StoreView


166
00:09:03.243 --> 00:09:05.412 line:-2
to create a list
of products to merchandise,


167
00:09:05.445 --> 00:09:09.483 line:-2
which you can then further customize
using SwiftUI components.


168
00:09:09.516 --> 00:09:12.653 line:-2
The StoreView is a great way
to get your app or game started


169
00:09:12.686 --> 00:09:15.122 line:-2
and support in-app purchases,
since it requires


170
00:09:15.155 --> 00:09:18.692 line:-2
only a few lines of code to set up,
like shown here.


171
00:09:18.725 --> 00:09:21.328 line:-2
Last but not least,
there is also a new view


172
00:09:21.361 --> 00:09:25.432 line:-2
to merchandise subscriptions with
all of their available levels of service.


173
00:09:25.465 --> 00:09:29.102 line:-2
Use SubscriptionStoreView
to quickly create a custom page


174
00:09:29.136 --> 00:09:31.438 line:-1
for a subscription group, like this one.


175
00:09:31.471 --> 00:09:35.042 line:-2
All you need is the subscriptionGroupID,
which you can normally find


176
00:09:35.075 --> 00:09:37.311 line:-2
in App Store Connect,
but it's now also available


177
00:09:37.344 --> 00:09:40.781 line:-2
in the StoreKit configuration,
right in Xcode.


178
00:09:40.814 --> 00:09:43.817 line:-2
There are many possible customizations
that can be easily added


179
00:09:43.851 --> 00:09:45.485 line:-1
to any of these new view types.


180
00:09:45.519 --> 00:09:48.388 line:-2
For example,
check out how changing a few lines of code


181
00:09:48.422 --> 00:09:50.991 line:-2
to create a custom background
can significantly alter


182
00:09:51.024 --> 00:09:53.527 line:-1
the look of this SubscriptionStoreView.


183
00:09:53.560 --> 00:09:56.663 line:-2
To go along with these new
subscription changes, we’re also adding


184
00:09:56.697 --> 00:09:59.967 line:-2
an additional manage subscription sheet
to provide a new experience


185
00:10:00.000 --> 00:10:04.004 line:-2
to how people can interact and choose
their subscription in a StoreKit app.


186
00:10:04.037 --> 00:10:05.506 line:-1
Let's take a look at it.


187
00:10:06.940 --> 00:10:10.344 line:-2
Here, you can see the familiar flow
to manage subscriptions,


188
00:10:10.377 --> 00:10:13.580 line:-2
which shows the customer a sheet
with their current active tiers


189
00:10:13.614 --> 00:10:15.816 line:-2
and provides the option
to tap into each one


190
00:10:15.849 --> 00:10:19.453 line:-2
to see a list of the other ones available
in that subscription group.


191
00:10:19.486 --> 00:10:22.823 line:-2
To make this process faster
and provide more customization,


192
00:10:22.856 --> 00:10:25.325 line:-2
there is now another view
that allows you to skip a step


193
00:10:25.359 --> 00:10:28.929 line:-2
and jump right into the subscription group
you would like to show.


194
00:10:28.962 --> 00:10:31.832 line:-2
You can pick the relevant
subscription group in your app's context,


195
00:10:31.865 --> 00:10:35.836 line:-2
if you have more than one, for example,
and show what other levels of service


196
00:10:35.869 --> 00:10:38.205 line:-2
are available
for your customers to choose.


197
00:10:38.238 --> 00:10:41.475 line:-2
This sheet can be used
with the same API as the regular one:


198
00:10:41.508 --> 00:10:43.777 line:-1
.manageSubscriptionsSheet.


199
00:10:43.810 --> 00:10:47.781 line:-2
This time, additionally pass
the subscriptionGroupID parameter.


200
00:10:48.549 --> 00:10:51.852 line:-2
There is so much more to show you
on the topic of creating SwiftUI apps


201
00:10:51.885 --> 00:10:54.788 line:-2
with StoreKit,
with lots of other views and customization


202
00:10:54.821 --> 00:10:58.058 line:-2
you can apply to make it fit
your app's aesthetic.


203
00:10:58.091 --> 00:10:59.660 line:-1
If you would like to learn more,


204
00:10:59.693 --> 00:11:03.463 line:-3
Greg will tell you about it
in "Meet StoreKit for SwiftUI."


205
00:11:03.497 --> 00:11:07.034 line:-2
After looking at the new features
for in-app purchases in StoreKit,


206
00:11:07.067 --> 00:11:10.070 line:-2
let's see how we can test them
using the new tools in StoreKit Testing


207
00:11:10.103 --> 00:11:12.840 line:-1
in Xcode, starting with Xcode 15.


208
00:11:12,873 --> 00:11:16,743
With StoreKit Testing in Xcode
you can ensure your app using StoreKit


209
00:11:16,777 --> 00:11:19,680
provides a great experience
from the time you start building it,


210
00:11:19,713 --> 00:11:22,616
even before you set anything up
in App Store Connect.


211
00:11:22,649 --> 00:11:26,954
This allows you to test, manage,
edit, and even create actions


212
00:11:26,987 --> 00:11:30,190
related to StoreKit
while testing on your Mac,


213
00:11:30,224 --> 00:11:33,827
and it is supported on both
the simulators and devices.


214
00:11:33.861 --> 00:11:37.231 line:-2
Starting off with the transaction manager,
there is new functionality


215
00:11:37.264 --> 00:11:39.466 line:-1
for debugging and testing your apps.


216
00:11:39.499 --> 00:11:42.236 line:-1
It now organizes all of your testing apps.


217
00:11:42.269 --> 00:11:45.205 line:-2
In the navigator, you can see
all the current connected devices


218
00:11:45.239 --> 00:11:48.375 line:-2
and simulators that have
your current StoreKit apps installed


219
00:11:48.408 --> 00:11:51.144 line:-2
using a StoreKit configuration
for testing.


220
00:11:51.178 --> 00:11:53.881 line:-2
This allows you to test
on multiple devices at the same time


221
00:11:53.914 --> 00:11:56.617 line:-2
much more easily and quickly,
and you are not required


222
00:11:56.650 --> 00:12:00.254 line:-2
to run your app
to see a history of purchases.


223
00:12:00.287 --> 00:12:02.489 line:-2
Let's jump in
and see what that looks like.


224
00:12:02.523 --> 00:12:06.226 line:-2
I have both an iPhone connected to my Mac
and a simulator running.


225
00:12:06.260 --> 00:12:10.097 line:-2
And I'm using the new
in-development game, Backyard Birds.


226
00:12:10.130 --> 00:12:14.468 line:-2
When you open Xcode, no matter if you have
a project opened or not,


227
00:12:14.501 --> 00:12:19.940 line:-2
you can go to Debug, StoreKit,
Manage Transactions,


228
00:12:19.973 --> 00:12:22.276 line:-2
and be presented
with the transaction manager view


229
00:12:22.309 --> 00:12:25.245 line:-1
you’re already familiar with.


230
00:12:25.279 --> 00:12:29.683 line:-2
In the navigator, you can see all
the current devices connected to your Mac.


231
00:12:29.716 --> 00:12:33.687 line:-2
In my case, this is the physical iPhone
and the simulator.


232
00:12:33.720 --> 00:12:36.557 line:-2
Notice how they both have
a few apps showing in this list,


233
00:12:36.590 --> 00:12:38.225 line:-1
including Backyard Birds.


234
00:12:38.258 --> 00:12:40.661 line:-2
These are all apps using
StoreKit Testing in Xcode


235
00:12:40.694 --> 00:12:43.697 line:-2
that you can inspect
outside of a debug session.


236
00:12:43.730 --> 00:12:46.366 line:-2
Clicking on an app
on either of these devices,


237
00:12:46.400 --> 00:12:49.670 line:-2
you can see a list
of StoreKit transactions for that app,


238
00:12:49.703 --> 00:12:51.939 line:-2
and with the details sidebar
we showed you last year,


239
00:12:51.972 --> 00:12:55.209 line:-1
you can inspect each one individually.


240
00:12:55.242 --> 00:12:58.445 line:-2
This also works if I open
the Xcode project for Backyard Birds


241
00:12:58.478 --> 00:13:00.280 line:-1
and run it on the simulator, for example.


242
00:13:01.648 --> 00:13:05.085 line:-2
In this case, I can also see
which app is actively being debugged


243
00:13:05.118 --> 00:13:08.922 line:-2
because it will have
this small indicator next to the app name.


244
00:13:08.956 --> 00:13:12.392 line:-2
This is not all that's new
with the transaction manager.


245
00:13:12.426 --> 00:13:15.863 line:-2
I am excited to show you that you now have
the ability to make in-app purchases


246
00:13:15.896 --> 00:13:19.499 line:-2
for your app
right from your Mac using Xcode.


247
00:13:19.533 --> 00:13:21.735 line:-1
Plus, when creating a new purchase,


248
00:13:21.768 --> 00:13:24.371 line:-2
you can also customize
various purchase parameters,


249
00:13:24.404 --> 00:13:26.707 line:-2
such as the quantity
for a consumable product,


250
00:13:26.740 --> 00:13:29.176 line:-2
or you can pick offer codes
for your subscriptions.


251
00:13:30.277 --> 00:13:33.714 line:-2
Let's see how this works in practice
using Backyard Birds.


252
00:13:33.747 --> 00:13:36.717 line:-2
You first need to select
the app you want to test.


253
00:13:36.750 --> 00:13:39.319 line:-2
Then, click the plus button
on the left of the filter bar


254
00:13:39.353 --> 00:13:41.955 line:-1
to create a new purchase.


255
00:13:41.989 --> 00:13:45.225 line:-2
The pop-up I am presented with lists
all of the available in-app purchases


256
00:13:45.259 --> 00:13:46.460 line:-1
for this app.


257
00:13:46.493 --> 00:13:50.497 line:-2
These are the same products we configured
in the StoreKit configuration.


258
00:13:50.531 --> 00:13:52.633 line:-1
I am going to purchase a consumable first,


259
00:13:52.666 --> 00:13:55.335 line:-2
so I can select
Nutrition Pellet and click Next.


260
00:13:58.472 --> 00:14:01.975 line:-2
Now, I have the opportunity
to configure this new purchase,


261
00:14:02.009 --> 00:14:05.579 line:-2
but the default options are also valid
if I wanted to skip ahead.


262
00:14:05.612 --> 00:14:07.648 line:-1
I am satisfied with these settings,


263
00:14:07.681 --> 00:14:10.984 line:-2
so let's click Done to complete
the purchase using these parameters.


264
00:14:13.353 --> 00:14:15.622 line:-2
Although the app is not running
in the simulator,


265
00:14:15.656 --> 00:14:18.325 line:-2
StoreKit received and processed
the new purchase.


266
00:14:18.358 --> 00:14:22.563 line:-2
If I look at the transaction list,
there is now a new item at the top.


267
00:14:22.596 --> 00:14:27.434 line:-2
Clicking on it, I can inspect the details
for this new transaction.


268
00:14:27.467 --> 00:14:31.305 line:-2
Subscriptions are different, however,
so let's make another purchase.


269
00:14:31.338 --> 00:14:34.975 line:-2
I am going to again click on
the plus button to create a new purchase,


270
00:14:35.008 --> 00:14:36.310 line:-1
and this time, I will search


271
00:14:36.343 --> 00:14:40.013 line:-2
for the name of a subscription
in this app,


272
00:14:40.047 --> 00:14:43.283 line:-2
then, pick the one I am looking for,
and click next.


273
00:14:45.118 --> 00:14:47.988 line:-2
The options to configure the purchase
have now changed,


274
00:14:48.021 --> 00:14:50.858 line:-2
because this is a different type
of in-app purchase.


275
00:14:50.891 --> 00:14:54.995 line:-2
Some are the same, like the purchase date,
but there's also some new ones,


276
00:14:55.028 --> 00:14:56.997 line:-1
so let's go over what they do.


277
00:14:57.030 --> 00:15:00.000 line:-2
The default properties are
also valid here, by the way.


278
00:15:01.268 --> 00:15:03.971 line:-2
I have the option to pick an offer code
for this subscription,


279
00:15:04.004 --> 00:15:07.040 line:-2
if it has any set up
in the StoreKit configuration.


280
00:15:07.074 --> 00:15:09.610 line:-2
Customers have to type in
offer codes and promotions,


281
00:15:09.643 --> 00:15:12.746 line:-2
but to make testing easier,
we provide a list of available offers


282
00:15:12.779 --> 00:15:15.249 line:-1
for this productID.


283
00:15:15.282 --> 00:15:17.818 line:-2
I would like to change
the purchase date in this case


284
00:15:17.851 --> 00:15:20.087 line:-1
and set it to exactly one year ago,


285
00:15:20.120 --> 00:15:22.189 line:-2
as if I had first subscribed
to this service


286
00:15:22.222 --> 00:15:25.325 line:-1
during last year's WWDC.


287
00:15:25.359 --> 00:15:28.729 line:-2
Next, I can choose if this subscription
should renew automatically


288
00:15:28.762 --> 00:15:32.432 line:-2
or only remain subscribed
for exactly one subscription period,


289
00:15:32.466 --> 00:15:35.602 line:-2
which, in the case of this product,
would be one month.


290
00:15:35.636 --> 00:15:38.038 line:-2
I would like to keep
automatic renewals enabled


291
00:15:38.071 --> 00:15:40.674 line:-2
so I can test how my app handles
active subscriptions


292
00:15:40.707 --> 00:15:43.443 line:-1
before I even start using it.


293
00:15:43.477 --> 00:15:45.946 line:-1
Let's click Done to complete the purchase


294
00:15:45.979 --> 00:15:48.982 line:-2
and look at the results
by filtering the transaction list.


295
00:15:53.453 --> 00:15:57.724 line:-2
As expected, I have one renewal
for each month since last year.


296
00:15:57.758 --> 00:15:59.826 line:-2
These are all currently marked
as unfinished,


297
00:15:59.860 --> 00:16:03.530 line:-2
because the app wasn’t running
and didn’t get a chance to receive them,


298
00:16:03.564 --> 00:16:05.399 line:-1
so I am going to run it in the simulator


299
00:16:05.432 --> 00:16:08.602 line:-2
and see that I now have access
to the Backyard Birds Pass.


300
00:16:13.207 --> 00:16:16.376 line:-2
The new features in the transaction
manager work with all devices


301
00:16:16.410 --> 00:16:20.047 line:-2
and platforms that already support
StoreKit Testing in Xcode,


302
00:16:20.080 --> 00:16:23.884 line:-1
beginning with iOS 17 and macOS 14.


303
00:16:23.917 --> 00:16:25.986 line:-2
And they are also supported
on other platforms,


304
00:16:26.019 --> 00:16:30.791 line:-1
including iPadOS, watchOS, and tvOS.


305
00:16:30.824 --> 00:16:33.460 line:-2
If you are running an older version
of the operating system,


306
00:16:33.493 --> 00:16:35.095 line:-1
nothing changes for you:


307
00:16:35.128 --> 00:16:37.097 line:-2
the transaction manager is
still compatible


308
00:16:37.130 --> 00:16:41.468 line:-2
with all the same features as before
when using an active debug session.


309
00:16:41.502 --> 00:16:44.104 line:-2
Next, I would like to introduce
a new feature


310
00:16:44.137 --> 00:16:47.541 line:-2
in the StoreKit configuration
that allows for more in-depth testing


311
00:16:47.574 --> 00:16:51.245 line:-2
of how your StoreKit app behaves
in different scenarios.


312
00:16:51.278 --> 00:16:53.881 line:-2
To demonstrate this,
I am going to open the Xcode project


313
00:16:53.914 --> 00:16:56.817 line:-2
for Backyard Birds
and go to the StoreKit configuration.


314
00:16:59.419 --> 00:17:02.289 line:-2
There is now a new item
above the configured in-app purchases


315
00:17:02.322 --> 00:17:05.459 line:-1
called Configuration Settings.


316
00:17:05.492 --> 00:17:08.562 line:-2
This is a new menu we added
to provide configurable options


317
00:17:08.595 --> 00:17:10.731 line:-1
for your app's test environment,


318
00:17:10.764 --> 00:17:12.933 line:-2
some that you might already be
familiar with,


319
00:17:12.966 --> 00:17:16.203 line:-1
and some new ones starting with Xcode 15.


320
00:17:16.236 --> 00:17:20.073 line:-2
This first and the second sections
cover all the existing options,


321
00:17:20.107 --> 00:17:22.843 line:-2
like the default storefront
and the locale your app should use


322
00:17:22.876 --> 00:17:24.945 line:-1
for pricing and availability,


323
00:17:24.978 --> 00:17:27.915 line:-2
and others such as the speed
of subscription renewals


324
00:17:27.948 --> 00:17:31.518 line:-2
or the ability to force ask to buy,
for example.


325
00:17:31.552 --> 00:17:34.721 line:-2
In prior versions of Xcode,
you can find these in the Editor menu


326
00:17:34.755 --> 00:17:36.823 line:-2
when your StoreKit configuration
is opened,


327
00:17:36.857 --> 00:17:40.594 line:-2
and they are still there
and can be used interchangeably.


328
00:17:41.395 --> 00:17:44.031 line:-2
While we are talking
about StoreKit Testing options,


329
00:17:44.064 --> 00:17:48.635 line:-2
there are new subscription renewal rates
we added this year in iOS 16.4.


330
00:17:48.669 --> 00:17:51.605 line:-2
These are designed to change
the subscription expiration


331
00:17:51.638 --> 00:17:54.241 line:-2
on a per-renewal basis,
helping you generate


332
00:17:54.274 --> 00:17:58.312 line:-2
consistent renewals quicker
than the subscription's actual duration.


333
00:17:58.345 --> 00:18:01.148 line:-2
This is really helpful
for quick and reliable testing


334
00:18:01.181 --> 00:18:04.384 line:-2
of the long-term state
of your subscription.


335
00:18:04.418 --> 00:18:08.322 line:-2
You can find these new configurable rates
in both the Editor menu


336
00:18:08.355 --> 00:18:12.626 line:-2
and in the StoreKit configuration settings
in Xcode 15.


337
00:18:12.659 --> 00:18:16.063 line:-2
The third section
in the StoreKit configuration settings


338
00:18:16.096 --> 00:18:19.633 line:-2
covers options you can use
to simulate StoreKit errors in your app,


339
00:18:19.666 --> 00:18:22.503 line:-2
which was a highly requested feature
by many of you.


340
00:18:22.536 --> 00:18:25.072 line:-2
It expands
on the Fail Transactions submenu


341
00:18:25.105 --> 00:18:27.074 line:-1
that used to be in the Editor menu,


342
00:18:27.107 --> 00:18:31.078 line:-2
and it brings support
for more StoreKit APIs and error types.


343
00:18:31.111 --> 00:18:35.449 line:-2
Each option represents a StoreKit 2 API
your app might be using


344
00:18:35.482 --> 00:18:37.951 line:-2
and allows you to pick an error
that API should throw


345
00:18:37.985 --> 00:18:40.587 line:-1
every time when it's called by your app.


346
00:18:40.621 --> 00:18:43.123 line:-2
Numerous APIs are supported
by this feature.


347
00:18:43.156 --> 00:18:46.293 line:-2
You can test product loading issues,
purchase failures,


348
00:18:46.326 --> 00:18:48.929 line:-2
receipt and transaction
verification problems,


349
00:18:48.962 --> 00:18:51.331 line:-1
refund requests, and so many more.


350
00:18:51.365 --> 00:18:53.700 line:-2
Let's see what this looks like
in practice.


351
00:18:54.701 --> 00:18:57.971 line:-2
I have the Xcode project
for Backyard Birds opened on the left


352
00:18:58.005 --> 00:19:00.941 line:-2
and the app running
in the simulator on the right.


353
00:19:00.974 --> 00:19:04.878 line:-2
In the StoreKit configuration, I can
enable purchase errors using the checkbox


354
00:19:04.912 --> 00:19:07.514 line:-1
next to the Purchase API name


355
00:19:07.548 --> 00:19:09.550 line:-1
and choose the error it should throw.


356
00:19:12.152 --> 00:19:14.321 line:-2
I would like to test
how the app handles purchases


357
00:19:14.354 --> 00:19:18.192 line:-2
when the customer changes storefronts,
so I will pick Product Unavailable.


358
00:19:21.595 --> 00:19:25.432 line:-2
This file automatically saves on edit,
and it also syncs to your device


359
00:19:25.465 --> 00:19:28.235 line:-2
when the app is running,
so you can test the change immediately


360
00:19:28.268 --> 00:19:30.604 line:-1
without needing to re-run your app.


361
00:19:30.637 --> 00:19:32.906 line:-2
Let's try to purchase a product
and see what happens.


362
00:19:37.277 --> 00:19:38.712 line:-1
[pings]


363
00:19:40.948 --> 00:19:42.850 line:-1
As expected, it fails.


364
00:19:42.883 --> 00:19:44.585 line:-1
It tells me I cannot purchase this product


365
00:19:44.618 --> 00:19:46.887 line:-2
and I should contact the developer
for more information.


366
00:19:48.856 --> 00:19:50.390 line:-1
Let's now disable purchase errors


367
00:19:50.424 --> 00:19:54.094 line:-2
and try this again to ensure
it completes successfully this time.


368
00:19:59.733 --> 00:20:02.402 line:-1
[pings]


369
00:20:02.436 --> 00:20:04.938 line:-2
With these steps,
I have now effectively tested


370
00:20:04.972 --> 00:20:07.107 line:-2
that this app's code can handle
these kinds of errors


371
00:20:07.140 --> 00:20:11.178 line:-2
when making a purchase,
if they should ever occur.


372
00:20:11.211 --> 00:20:14.381 line:-2
This method can be applied
to any of the APIs and error options


373
00:20:14.414 --> 00:20:17.918 line:-2
in the StoreKit configuration settings
to cover multiple scenarios


374
00:20:17.951 --> 00:20:19.987 line:-1
and ensure your app is robust.


375
00:20:20.020 --> 00:20:21.955 line:-1
These errors are all part of StoreKit,


376
00:20:21.989 --> 00:20:23.924 line:-2
and you might have encountered them
already.


377
00:20:23.957 --> 00:20:28.495 line:-2
Each one of them represents
a clear case of a failure in your app.


378
00:20:28.529 --> 00:20:32.666 line:-2
And that is all the new features
for StoreKit Testing in Xcode.


379
00:20:32.699 --> 00:20:35.869 line:-2
Today, I showed how to inspect
and manage transactions


380
00:20:35.903 --> 00:20:39.373 line:-2
on multiple devices
outside of a debug session,


381
00:20:39.406 --> 00:20:41.742 line:-2
how to purchase products
from the transaction manager


382
00:20:41.775 --> 00:20:45.312 line:-2
to test how your app handles
existing purchases,


383
00:20:45.345 --> 00:20:49.483 line:-2
and how to simulate StoreKit errors
to cover many possible failure scenarios.


384
00:20:51.185 --> 00:20:54.454 line:-2
All of these new features in Xcode
are also available in code


385
00:20:54.488 --> 00:20:58.458 line:-2
using the StoreKit Test framework
to write unit tests for your app,


386
00:20:58.492 --> 00:21:02.529 line:-2
so you can write automation
that performs all the same tasks.


387
00:21:02.563 --> 00:21:05.732 line:-2
Let's have a look at the new APIs
to create off-device purchases


388
00:21:05.766 --> 00:21:08.802 line:-2
and set simulated errors
in an XCTest session.


389
00:21:09.670 --> 00:21:14.107 line:-2
To create new in-app purchases,
there is a new Swift API in StoreKitTest


390
00:21:14.141 --> 00:21:17.311 line:-2
that works the same way
as the StoreKit purchase(_:) API,


391
00:21:17.344 --> 00:21:19.813 line:-1
with the same purchase options as well.


392
00:21:19.847 --> 00:21:23.116 line:-2
To support the new purchase features,
like changing the purchase date,


393
00:21:23.150 --> 00:21:26.620 line:-2
we also added new purchase options
only for testing.


394
00:21:26.653 --> 00:21:28.856 line:-1
Let's look at an example.


395
00:21:28.889 --> 00:21:31.091 line:-1
After setting up an SKTestSession,


396
00:21:31.124 --> 00:21:34.795 line:-2
I am making an off-device purchase
for a subscription


397
00:21:34.828 --> 00:21:38.131 line:-2
and overriding the purchase date
to a year ago from today.


398
00:21:38.165 --> 00:21:41.201 line:-2
This is the same purchase I made
in the transaction manager,


399
00:21:41.235 --> 00:21:44.505 line:-2
and it behaves exactly the same way,
allowing you to create


400
00:21:44.538 --> 00:21:47.908 line:-2
repeatable results
and automate the testing for your app.


401
00:21:47.941 --> 00:21:50.344 line:-2
There are also some new APIs
in StoreKitTest


402
00:21:50.377 --> 00:21:53.680 line:-2
for simulating StoreKit errors
in an SKTestSession,


403
00:21:53.714 --> 00:21:55.849 line:-2
and they work the same way
as the simulated errors


404
00:21:55.883 --> 00:21:58.385 line:-1
in the StoreKit configuration settings.


405
00:21:58.418 --> 00:22:00.053 line:-1
After creating your test session,


406
00:22:00.087 --> 00:22:04.491 line:-2
you can call setSimulatedError
with the error type you would like to test


407
00:22:04.525 --> 00:22:07.427 line:-2
and the StoreKit API
it should be simulated for.


408
00:22:07.461 --> 00:22:09.763 line:-1
In this example, I am choosing to simulate


409
00:22:09.796 --> 00:22:12.699 line:-1
a network error for the loadProducts API.


410
00:22:12.733 --> 00:22:15.235 line:-2
Any time I call the loadProducts API
in this test,


411
00:22:15.269 --> 00:22:17.404 line:-1
it will always throw the same error.


412
00:22:17,437 --> 00:22:20,641
To disable the simulated failure,
use the same setter API


413
00:22:20,674 --> 00:22:23,744
and pass nil in place of the error type.


414
00:22:23.777 --> 00:22:27.948 line:-2
Lastly, there are also APIs
for the new subscription renewal rates.


415
00:22:27.981 --> 00:22:30.450 line:-2
These can be accessed the same way
as the existing ones,


416
00:22:30.484 --> 00:22:33.654 line:-2
via a member in SKTestSession
called timeRate.


417
00:22:33.687 --> 00:22:36.723 line:-2
In this example test
to make a subscription purchase,


418
00:22:36.757 --> 00:22:40.227 line:-2
I added an extra line of code
to set a faster renewal rate


419
00:22:40.260 --> 00:22:42.996 line:-1
and generate multiple renewals quickly.


420
00:22:43.030 --> 00:22:47.034 line:-2
A lot of new StoreKit and StoreKit Testing
in Xcode features were covered today.


421
00:22:47.067 --> 00:22:51.138 line:-2
In StoreKit, there are new APIs
to support promoting in-app purchases,


422
00:22:51.171 --> 00:22:54.575 line:-2
the data model for Transaction
and RenewalInfo got some enhancements


423
00:22:54.608 --> 00:22:57.377 line:-2
to give you more valuable information
on hand,


424
00:22:57.411 --> 00:22:59.880 line:-2
and there is a new message type
you can listen for


425
00:22:59.913 --> 00:23:01.748 line:-1
to handle billing issues.


426
00:23:01.782 --> 00:23:04.518 line:-2
The new StoreKit views in SwiftUI
are a wonderful tool


427
00:23:04.551 --> 00:23:07.788 line:-2
to quickly build apps
that support product merchandising,


428
00:23:07.821 --> 00:23:11.491 line:-2
and they don't require any extra code
to work across all devices.


429
00:23:11.525 --> 00:23:14.862 line:-2
And finally, you can validate
all the StoreKit features in your app


430
00:23:14.895 --> 00:23:18.332 line:-2
using great tools
provided with StoreKit Testing in Xcode.


431
00:23:18.365 --> 00:23:20.834 line:-2
StoreKit 2 is packed
with many great features


432
00:23:20.868 --> 00:23:23.904 line:-2
that allow you to build awesome apps
and grow your business.


433
00:23:23.937 --> 00:23:26.940 line:-2
We have added many tools
that take full advantage of Swift,


434
00:23:26.974 --> 00:23:29.910 line:-2
and with new APIs that are simple
but powerful,


435
00:23:29.943 --> 00:23:31.645 line:-1
you have the opportunity to focus more


436
00:23:31.678 --> 00:23:34.748 line:-2
on the experience you're building
for your customers.


437
00:23:34.781 --> 00:23:37.918 line:-2
Any app that want to merchandise
products and subscriptions


438
00:23:37.951 --> 00:23:40.320 line:-1
can now be built using StoreKit 2.


439
00:23:40.354 --> 00:23:44.591 line:-2
If you aren't using StoreKit 2 yet,
give it a try, and if you are,


440
00:23:44.625 --> 00:23:47.794 line:-2
let us know what you think
of the new features I showed you today.


441
00:23:47.828 --> 00:23:50.330 line:-2
Use the new in-app purchase
merchandising views


442
00:23:50.364 --> 00:23:53.367 line:-2
in your existing app
to further customize the experience,


443
00:23:53.400 --> 00:23:56.937 line:-2
or create a new one
using exclusively these new APIs.


444
00:23:56.970 --> 00:24:00.607 line:-2
And with StoreKit Testing in Xcode,
you can put your code to the test


445
00:24:00.641 --> 00:24:03.310 line:-2
and ensure everything works well
and as expected


446
00:24:03.343 --> 00:24:07.548 line:-2
to provide your customers with the best
experience under all conditions.


447
00:24:07,581 --> 00:24:10,217
For more information
about other StoreKit features,


448
00:24:10,250 --> 00:24:12,686
check out these sessions linked below.


449
00:24:12.719 --> 00:24:15.989 line:-2
We look forward to seeing what you create
using StoreKit 2.


450
00:24:16.023 --> 00:24:17.457 line:-1
Thank you for watching.

