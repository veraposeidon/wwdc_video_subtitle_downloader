2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
♪ ♪


3
00:00:10,010 --> 00:00:13,213 line:-2
David: Hi, and welcome to
"What's new in Wallet and Apple Pay."


4
00:00:13.247 --> 00:00:15.582 line:-2 align:center
My name is David.
Jon: And I'm Jon.


5
00:00:15,616 --> 00:00:17,918 line:-2
David: Today,
we'll talk through all the new features


6
00:00:17.951 --> 00:00:19.887 line:-2 align:center
and enhancements
we're introducing this year


7
00:00:19,920 --> 00:00:22,456 line:-2
to the Wallet
and Apple Pay experience.


8
00:00:22,489 --> 00:00:26,894 line:-2
Wallet and Apple Pay encompasses a wide
range of features and functionality,


9
00:00:26,927 --> 00:00:31,899 line:-2
barcode passes,
transit cards, car keys, and more.


10
00:00:31,932 --> 00:00:34,535 line:-2
These are all important parts
of our ecosystem,


11
00:00:34,568 --> 00:00:37,504 line:-1
but today's focus will be on three areas:


12
00:00:37,538 --> 00:00:41,642 line:-1
Payments, Order Tracking, and Identity.


13
00:00:41.675 --> 00:00:43.677 line:-1 align:center
Let's start with Payments.


14
00:00:44,711 --> 00:00:48,248 line:-2
We'll first talk about Apple Pay Later
and how you can integrate


15
00:00:48,282 --> 00:00:51,618 line:-2
merchandising support
for it within your platform.


16
00:00:51.652 --> 00:00:55.422 line:-2 align:center
We'll talk about some enhancements
to preauthorized payments


17
00:00:55,455 --> 00:00:57,524 line:-1
and then walk through a brand-new API


18
00:00:57,558 --> 00:01:01,261 line:-2
to support transferring funds
with Apple Pay.


19
00:01:01,295 --> 00:01:03,797 line:-2
Apple Pay Later
was introduced earlier this year


20
00:01:03.830 --> 00:01:05.999 line:-1 align:center
to customers in the United States


21
00:01:06,033 --> 00:01:10,237 line:-2
and allows users to split purchases
into four separate payments.


22
00:01:10.270 --> 00:01:13.640 line:-2 align:center
Users can then conveniently track
and manage these purchases


23
00:01:13,674 --> 00:01:15,309 line:-1
within Wallet.


24
00:01:15.342 --> 00:01:18.612 line:-2 align:center
While Apple Pay Later
does not require any integration,


25
00:01:18,645 --> 00:01:22,916 line:-2
we're introducing a new API that provides
a dedicated merchandising view


26
00:01:22.950 --> 00:01:25.719 line:-1 align:center
for inclusion within your UI.


27
00:01:25.752 --> 00:01:28.455 line:-2 align:center
Using this view indicates support
for Apple Pay Later,


28
00:01:28,488 --> 00:01:32,192 line:-2
and details
the experience a customer can expect.


29
00:01:32.226 --> 00:01:35.028 line:-2 align:center
You'll have the ability
to customize the style of the view


30
00:01:35,062 --> 00:01:38,732 line:-2
to better suit it
for the context it's displayed in.


31
00:01:38,765 --> 00:01:41,034 line:-2
When a user
selects this view to learn more,


32
00:01:41.068 --> 00:01:45.205 line:-2 align:center
you have a choice of how
Apple Pay Later is explained.


33
00:01:45.239 --> 00:01:49.610 line:-2 align:center
And this view will be available to
developers for both apps and on the web.


34
00:01:50,777 --> 00:01:54,348 line:-2
The merchandising view can be rendered
in four different display styles,


35
00:01:54,381 --> 00:01:56,016 line:-1
depending on context:


36
00:01:57,084 --> 00:01:59,686 line:-2
The standard style,
which briefly describes how


37
00:01:59.720 --> 00:02:04.791 line:-2 align:center
Apple Pay Later can be used to split
a purchase into multiple repayments.


38
00:02:04,825 --> 00:02:09,363 line:-2
A badge style,
indicating support in a concise way.


39
00:02:09.396 --> 00:02:11.965 line:-2 align:center
A checkout style,
designed to be placed alongside


40
00:02:11.999 --> 00:02:14.768 line:-2 align:center
other payment options
in your checkout flow.


41
00:02:14,801 --> 00:02:18,906 align:center
And a price style, for use
alongside the total purchase price.


42
00:02:18,939 --> 00:02:21,041 line:-1
When a user interacts with this view,


43
00:02:21,074 --> 00:02:23,410 line:-2
they will be presented
with more information.


44
00:02:23,443 --> 00:02:28,482 line:-2
As a merchant, you have the ability
to choose between two different actions.


45
00:02:28.515 --> 00:02:32.252 line:-2 align:center
The "Learn More" action will present
an overview of Apple Pay Later


46
00:02:32,286 --> 00:02:34,688 line:-2
and explains the experience
a user would go through


47
00:02:34.721 --> 00:02:37.457 line:-1 align:center
if they select it as a payment method.


48
00:02:37.491 --> 00:02:42.062 line:-2 align:center
The "Calculator" action will still present
an explanation of Apple Pay Later,


49
00:02:42.095 --> 00:02:46.567 line:-2 align:center
but with a focus on the repayment
schedule the user would need to follow.


50
00:02:46,600 --> 00:02:49,803 line:-2
Let's take a look at incorporating
this view within your app.


51
00:02:50,904 --> 00:02:52,573 line:-1
Firstly, you'll want to check


52
00:02:52.606 --> 00:02:53.807 line:-1 align:center
whether the user is eligible


53
00:02:53,841 --> 00:02:56,310 line:-1
to use Apple Pay Later.


54
00:02:56,343 --> 00:02:57,878 line:-1
You can use the validate function


55
00:02:57.911 --> 00:03:01.381 line:-1 align:center
within PKPayLaterUtilities to do this.


56
00:03:01,415 --> 00:03:02,683 line:-1
You'll need to provide the amount


57
00:03:02,716 --> 00:03:03,917 line:-1
for the transaction,


58
00:03:03,951 --> 00:03:06,353 line:-1
as well as the locale required.


59
00:03:06,386 --> 00:03:07,955 line:-1
Once you've determined whether the user


60
00:03:07,988 --> 00:03:10,023 line:-1
is eligible to use Apple Pay Later,


61
00:03:10,057 --> 00:03:12,860 line:-1
you instantiate a PKPayLaterView,


62
00:03:12.893 --> 00:03:14.595 line:-1 align:center
with the same details provided


63
00:03:14,628 --> 00:03:16,797 line:-1
for the eligibility check.


64
00:03:16.830 --> 00:03:18.498 line:-1 align:center
If you wish to customize the style


65
00:03:18.532 --> 00:03:19.900 line:-1 align:center
and action of the view,


66
00:03:19.933 --> 00:03:21.435 line:-1 align:center
you can do so by changing


67
00:03:21,468 --> 00:03:23,370 line:-1
their respective properties.


68
00:03:24,238 --> 00:03:26,807 line:-1
We also provide a convenient SwiftUI view,


69
00:03:26,840 --> 00:03:29,643 line:-2
that allows you
to express Apple Pay Later acceptance


70
00:03:29.676 --> 00:03:32.079 line:-1 align:center
within your SwiftUI apps.


71
00:03:32,112 --> 00:03:35,415 line:-2
To use it,
you instantiate a PayLaterView,


72
00:03:35,449 --> 00:03:38,385 line:-2
and provide it
with the same information as before.


73
00:03:38,418 --> 00:03:40,988 line:-1
To customize the display style and action,


74
00:03:41,021 --> 00:03:43,757 line:-2
use the appropriate
view modifiers to do so.


75
00:03:43,790 --> 00:03:46,326 line:-1
And it's as simple as that.


76
00:03:46,360 --> 00:03:48,929 line:-2
If you want to support
the merchandising view on the web,


77
00:03:48,962 --> 00:03:51,865 line:-2
there are a few setup steps
you will need to perform first.


78
00:03:53,100 --> 00:03:54,701 line:1
The API for displaying the view


79
00:03:54,735 --> 00:03:56,436 line:1
is provided within the existing


80
00:03:56,470 --> 00:03:58,572 align:center
Apple Pay JavaScript SDK,


81
00:03:58,605 --> 00:04:00,040 align:center
but there are some new attributes


82
00:04:00,073 --> 00:04:02,843 line:1
you may need to set when including it.


83
00:04:02,876 --> 00:04:03,977 line:1
It's important to set


84
00:04:04,011 --> 00:04:05,512 align:center
the crossorigin attribute


85
00:04:05,546 --> 00:04:07,014 line:1
if you're required to support


86
00:04:07,047 --> 00:04:10,450 align:center
Cross Origin Resource sharing requests.


87
00:04:10,484 --> 00:04:12,519 align:center
Use the async attribute


88
00:04:12,553 --> 00:04:13,687 line:1
to ensure the script loads


89
00:04:13,720 --> 00:04:15,389 line:1
and executes independently


90
00:04:15,422 --> 00:04:17,991 align:center
from your page's loading progress.


91
00:04:18,025 --> 00:04:20,727 align:center
And lastly, a JWT is required


92
00:04:20,761 --> 00:04:23,163 line:1
to authenticate requests to the API.


93
00:04:23,197 --> 00:04:24,765 line:1
This token can be generated


94
00:04:24,798 --> 00:04:27,668 line:1
on the Apple Developer portal.


95
00:04:27.701 --> 00:04:31.104 line:-2 align:center
Using the JavaScript SDK
couldn't be simpler.


96
00:04:31,138 --> 00:04:35,342 line:-2
Use the apple-pay-merchandising
element to represent the view.


97
00:04:35.375 --> 00:04:41.348 line:-2 align:center
The amount, country code, currency code,
and locale are required fields.


98
00:04:42.115 --> 00:04:45.185 line:-2 align:center
Just like the native API,
you can also customize other aspects


99
00:04:45,219 --> 00:04:47,287 line:-1
of the view as required.


100
00:04:47.321 --> 00:04:49.389 line:-1 align:center
Here are some best practices to follow


101
00:04:49,423 --> 00:04:53,427 line:-2
if you're incorporating
the Apple Pay Later merchandising view.


102
00:04:53.460 --> 00:04:57.097 line:-2 align:center
For apps, an entitlement
is required to use this view.


103
00:04:57.130 --> 00:05:00.467 line:-2 align:center
This can be obtained
on the Apple Developer portal.


104
00:05:00,501 --> 00:05:03,537 line:-2
For websites,
remember to register your domains


105
00:05:03,570 --> 00:05:07,541 line:-2
and obtain a JWT
for use when including the SDK.


106
00:05:07,574 --> 00:05:11,211 line:-2
This can also be done
on the Apple Developer portal.


107
00:05:11.245 --> 00:05:15.582 line:-2 align:center
Where possible, try to import
the SDK within the head element.


108
00:05:15,616 --> 00:05:17,918 line:-2
This will allow it
to run as soon as possible,


109
00:05:17.951 --> 00:05:22.256 line:-2 align:center
so the merchandising view is ready
for when your page has fully loaded.


110
00:05:22,289 --> 00:05:25,025 line:-2
The size of the view can be
customized for your needs,


111
00:05:25,058 --> 00:05:28,695 line:-2
but ensure that you follow
the sizing requirements.


112
00:05:28.729 --> 00:05:33.066 line:-2 align:center
And lastly, if your website
has a restrictive content security policy,


113
00:05:33,100 --> 00:05:34,902 line:-1
follow the recommended guidelines


114
00:05:34.935 --> 00:05:38.805 line:-2 align:center
to ensure the SDK can
be loaded across domains.


115
00:05:38,839 --> 00:05:41,141 line:-1
And that's a look at Apple Pay Later.


116
00:05:41,175 --> 00:05:44,845 line:-2
Next up, we'll talk
about preauthorized payments.


117
00:05:44,878 --> 00:05:49,049 line:-2
In iOS 16,
we introduced preauthorized payments.


118
00:05:49,082 --> 00:05:52,986 line:-2
Users are able to view and manage payments
they've preauthorized in Wallet,


119
00:05:53.020 --> 00:05:57.124 line:-2 align:center
and merchants are able to charge
the user according to the agreed terms.


120
00:05:57,157 --> 00:06:00,027 line:-2
We initially provided support
for recurring payments


121
00:06:00,060 --> 00:06:02,262 line:-1
and automatic reload payments.


122
00:06:02.296 --> 00:06:04.898 line:-1 align:center
We now also support deferred payments.


123
00:06:04,932 --> 00:06:08,502 line:-2
All three preauthorized payment types
are available for use in apps,


124
00:06:08.535 --> 00:06:10.871 line:-1 align:center
as well as on the web.


125
00:06:10,904 --> 00:06:13,507 line:-2
Deferred payments allow you
to charge either a fixed


126
00:06:13.540 --> 00:06:17.044 line:-2 align:center
or variable amount
at a particular date in the future.


127
00:06:17.077 --> 00:06:19.413 line:-2 align:center
If you have
a free cancellation cut off date,


128
00:06:19,446 --> 00:06:22,716 line:-2
you can specify this as part
of the request as well.


129
00:06:22.749 --> 00:06:25.686 line:-2 align:center
Examples where deferred payments
may be suitable include


130
00:06:25,719 --> 00:06:28,188 line:-2
when a customer
is booking a hotel reservation


131
00:06:28,222 --> 00:06:30,824 line:-1
or when they are pre-ordering an item.


132
00:06:31,992 --> 00:06:35,662 line:-2
Preauthorized payments take advantage
of Apple Pay merchant tokens.


133
00:06:36,997 --> 00:06:41,301 line:-2
They are tied to a user's Apple ID,
rather than an individual device.


134
00:06:41,335 --> 00:06:44,705 line:-2
This means for example,
if a user were to upgrade their device,


135
00:06:44,738 --> 00:06:47,374 line:-1
the token would still be valid for use.


136
00:06:47,407 --> 00:06:51,545 line:-2
Because of this, you will still be able
to use the token to charge their account,


137
00:06:51,578 --> 00:06:55,382 line:-2
making receiving payments
at a later date more reliable.


138
00:06:55,415 --> 00:06:59,887 line:-2
When performing a preauthorized payment,
merchant tokens are automatically issued


139
00:06:59,920 --> 00:07:02,489 line:-2
if the customer's payment card
supports them.


140
00:07:02.523 --> 00:07:05.425 line:-2 align:center
If the payment card doesn't
support merchant tokens,


141
00:07:05,459 --> 00:07:07,528 line:-1
the transaction will still go through


142
00:07:07,561 --> 00:07:09,796 line:-2
but will use
the traditional Apple Pay token


143
00:07:09,830 --> 00:07:12,666 line:-3
that is tied to an individual device.


144
00:07:12,699 --> 00:07:15,235 line:-4
To learn more
about Apple Pay merchant tokens,


145
00:07:15,269 --> 00:07:19,106 line:-4
check out last year's
What's new in Wallet and Apple Pay.


146
00:07:19.139 --> 00:07:21.842 line:-2 align:center
So let's take a look
at how to incorporate deferred payments


147
00:07:21.875 --> 00:07:24.178 line:-1 align:center
within your app.


148
00:07:24.211 --> 00:07:27.881 line:-2 align:center
First, we create
a PKDeferredPaymentSummaryItem,


149
00:07:27,915 --> 00:07:32,252 line:-2
which outlines a description of the charge
and the amount that will be taken.


150
00:07:32,286 --> 00:07:35,422 line:-2
You also set the date
for when the payment will be taken.


151
00:07:36,190 --> 00:07:39,560 line:0
Next, we create
a PKDeferredPaymentRequest.


152
00:07:39,593 --> 00:07:42,296 line:0
We provide it
with the summary item we just created,


153
00:07:42,329 --> 00:07:46,433 align:center
along with other information
regarding the management of the payment.


154
00:07:46,466 --> 00:07:49,903 line:-2
If we have a billing agreement
we need to display to the user,


155
00:07:49,937 --> 00:07:53,907 line:-2
this can also be set
on the deferred payment request.


156
00:07:53.941 --> 00:07:56.710 line:-2 align:center
Once we have
the request created and configured,


157
00:07:56.743 --> 00:07:59.746 line:-2 align:center
we can then attach it
to our PKPaymentRequest.


158
00:08:00,681 --> 00:08:04,351 line:0
For the payment summary items
on our request, we create another


159
00:08:04,384 --> 00:08:09,256 line:0
PKDeferredPaymentSummaryItem
with the same amount and date as before.


160
00:08:09,289 --> 00:08:13,193 align:center
But this time with a label
representing the name of the merchant.


161
00:08:13,227 --> 00:08:16,930 line:0
We set this on the request,
and we're ready to present for payment.


162
00:08:17,998 --> 00:08:19,766 align:center
As can be seen in this example,


163
00:08:19,800 --> 00:08:23,437 align:center
the Apple Pay payment sheet will present
the deferred payment to the user


164
00:08:23,470 --> 00:08:28,809 align:center
with information on the billing agreement
and when they can expect to be charged.


165
00:08:28.842 --> 00:08:31.512 line:-2 align:center
Now, there are
some important considerations to make


166
00:08:31,545 --> 00:08:34,047 line:-1
if you specify a free cancellation date.


167
00:08:35,082 --> 00:08:37,351 align:center
When you provide a free cancellation date,


168
00:08:37,384 --> 00:08:39,386 line:1
you are stating that any cancellations


169
00:08:39,419 --> 00:08:41,522 align:center
before that point in time will be done


170
00:08:41,555 --> 00:08:43,590 line:1
with no charge to the user.


171
00:08:43,624 --> 00:08:46,293 line:1
Because of this, both the date and time


172
00:08:46,326 --> 00:08:49,129 line:1
are important pieces of information.


173
00:08:49,162 --> 00:08:51,398 line:1
You need to explicitly state the time zone


174
00:08:51,431 --> 00:08:53,767 line:1
the cancellation policy applies in.


175
00:08:53,800 --> 00:08:55,569 align:center
We have provided a separate property


176
00:08:55,602 --> 00:08:56,770 align:center
to support this.


177
00:08:56,803 --> 00:08:58,105 align:center
In the example below,


178
00:08:58,138 --> 00:08:59,740 align:center
we have specified that the time zone


179
00:08:59,773 --> 00:09:02,142 align:center
is Pacific Standard Time.


180
00:09:02,176 --> 00:09:03,477 line:1
This is important


181
00:09:03,510 --> 00:09:04,912 line:1
because your customer's time zone


182
00:09:04,945 --> 00:09:06,813 align:center
might not match the cancellation policy's


183
00:09:06,847 --> 00:09:07,915 line:1
time zone.


184
00:09:07.948 --> 00:09:11.051 line:-2 align:center
For example, when someone
is based in the United Kingdom,


185
00:09:11,084 --> 00:09:14,254 line:-1
booking a hotel in the United States.


186
00:09:14.288 --> 00:09:17.991 line:-2 align:center
When working with deferred payments,
here are some best practices to follow.


187
00:09:19.293 --> 00:09:23.463 line:-2 align:center
As mentioned previously, if you need
to describe a free cancellation policy,


188
00:09:23.497 --> 00:09:27.434 line:-2 align:center
carefully consider the date,
time, and time zone provided


189
00:09:27,467 --> 00:09:30,270 line:-1
to the deferred payment request.


190
00:09:30.304 --> 00:09:33.740 line:-2 align:center
Remember to include the deferred payment
within your summary items,


191
00:09:33,774 --> 00:09:36,577 line:-2
and ensure you set
the appropriate merchant name.


192
00:09:36,610 --> 00:09:39,646 line:-1
This is not done for you automatically.


193
00:09:39,680 --> 00:09:44,351 line:-2
When providing a billing agreement,
remember to keep it short.


194
00:09:44,384 --> 00:09:48,956 line:-2
The billing agreement text should only act
as a summary of key facts to consider


195
00:09:48,989 --> 00:09:53,594 line:-2
and should not replace any normal billing
or legal agreements in place.


196
00:09:53.627 --> 00:09:58.699 line:-2 align:center
Lastly, specify a token notification URL,
so you can be kept up to date


197
00:09:58.732 --> 00:10:01.702 line:-2 align:center
with lifecycle events
of the Apple Pay merchant token


198
00:10:01.735 --> 00:10:03.804 line:-1 align:center
if one has been issued.


199
00:10:03.837 --> 00:10:05.772 line:-1 align:center
And that's deferred payments.


200
00:10:05,806 --> 00:10:10,544 line:-2
Next, let's take a look at a brand-new way
to transfer funds with Apple Pay.


201
00:10:10,577 --> 00:10:13,413 line:-2
Traditionally with Apple Pay,
the payment sheet has always


202
00:10:13.447 --> 00:10:16.683 line:-2 align:center
been available for users
to add funds to an account.


203
00:10:16,717 --> 00:10:20,854 align:center line:-2
New in iOS 17, we're introducing
Transfer Funds with Apple Pay.


204
00:10:22,122 --> 00:10:25,792 line:-2 position:49%
This offers the ability for users
to transfer from an account


205
00:10:25,826 --> 00:10:30,297 position:49% line:-2
to a card in their Wallet, completing
the lifecycle for money movement.


206
00:10:30,330 --> 00:10:34,568 line:-2
This uses the same secure and private
Apple Pay infrastructure as payments,


207
00:10:34,601 --> 00:10:38,138 line:-2 align:center
meaning customers will already
be very familiar with the process.


208
00:10:38.172 --> 00:10:40.874 line:-2 align:center
An example
where transferring funds makes sense


209
00:10:40.908 --> 00:10:44.144 line:-2 align:center
would be allowing a customer
to withdraw funds from a bank account


210
00:10:44,178 --> 00:10:46,780 line:-1
or a stored value account.


211
00:10:46,813 --> 00:10:48,916 line:-1
To support Transfer Funds with Apple Pay,


212
00:10:48.949 --> 00:10:53.420 line:-2 align:center
we have created a new request type
that focuses on just the information


213
00:10:53,453 --> 00:10:55,956 line:-1
required for a funds transfer.


214
00:10:55,989 --> 00:10:58,659 line:-2
To use it,
you simply define an amount you wish


215
00:10:58,692 --> 00:11:01,495 line:-2
to be transferred
to a user's payment card.


216
00:11:01,528 --> 00:11:04,064 line:-2
If you require the contact details
of the recipient,


217
00:11:04,097 --> 00:11:06,800 line:-1
you are also able to request these.


218
00:11:06.834 --> 00:11:09.469 line:-1 align:center
If you've used PKPaymentRequest before,


219
00:11:09.503 --> 00:11:12.573 line:-2 align:center
this new API will feel
very familiar to you.


220
00:11:12.606 --> 00:11:14.541 line:-2 align:center
Because Transfer Funds
with Apple Pay works


221
00:11:14.575 --> 00:11:18.645 line:-2 align:center
on the same infrastructure as payments,
you will need to register as a merchant


222
00:11:18.679 --> 00:11:20.747 line:-1 align:center
within the Apple Developer portal.


223
00:11:21.448 --> 00:11:23.784 line:-4 align:center
To learn more
on how to register as a merchant


224
00:11:23.817 --> 00:11:25.853 line:-3 align:center
and get set up to use Apple Pay,


225
00:11:25,886 --> 00:11:30,724 line:-4
check out our "Implement Apple Pay
and order management" Tech Talk.


226
00:11:30,757 --> 00:11:34,528 line:-2
To give you an illustration of how
Transfer Funds with Apple Pay works,


227
00:11:34.561 --> 00:11:36.930 line:-1 align:center
let's take a look at an example.


228
00:11:36.964 --> 00:11:42.302 line:-2 align:center
Say we have a customer, Andrew, who wishes
to withdraw money from their account.


229
00:11:42.336 --> 00:11:44.438 line:-1 align:center
Using Transfer Funds with Apple Pay,


230
00:11:44,471 --> 00:11:47,307 line:-2
they would trigger a transfer
from within your app.


231
00:11:47,341 --> 00:11:51,445 line:-2
Your app then creates a request,
outlining the amount to be transferred.


232
00:11:51.478 --> 00:11:54.314 line:-2 align:center
Andrew will then be presented
with the Apple Pay sheet


233
00:11:54.348 --> 00:11:56.016 line:-1 align:center
detailing the transfer,


234
00:11:56,049 --> 00:11:59,486 line:-2
allowing them to select the card
they with to receive funds to.


235
00:11:59.520 --> 00:12:02.523 line:-2 align:center
Once Andrew
securely authenticates the transfer,


236
00:12:02,556 --> 00:12:06,026 line:-2
an encrypted payload is generated
and returned to your app,


237
00:12:06,059 --> 00:12:09,096 line:-2
ready for processing
with your payment provider.


238
00:12:09,129 --> 00:12:11,098 line:-1
Once the transfer has been processed,


239
00:12:11,131 --> 00:12:13,800 line:-2
your app will then return
the result to Apple Pay.


240
00:12:13,834 --> 00:12:16,737 line:-1
If the transfer is successful, that's it.


241
00:12:16,770 --> 00:12:20,374 line:-2
If an error has occurred,
Andrew would be informed and may be able


242
00:12:20,407 --> 00:12:23,577 line:-2
to take corrective action
to fix the issue.


243
00:12:23,610 --> 00:12:26,680 line:-2
Now that we've seen an overview
of how a funds transfer works,


244
00:12:26,713 --> 00:12:30,284 line:-2
lets take a look at how
to implement it within your app.


245
00:12:30,317 --> 00:12:35,722 line:-2
We first need to determine which networks
and card capabilities we wish to support.


246
00:12:35.756 --> 00:12:39.393 line:-2 align:center
Next, we'll check to see
whether the user has an eligible card


247
00:12:39.426 --> 00:12:41.428 line:-1 align:center
to initiate a funds transfer.


248
00:12:41.461 --> 00:12:45.032 line:-2 align:center
This is done through
PKPaymentAuthorizationController.


249
00:12:45,065 --> 00:12:47,568 line:-1
Using the supportsDisbursements method,


250
00:12:47,601 --> 00:12:51,305 line:-2
we provide the networks
and card capabilities defined earlier.


251
00:12:51,338 --> 00:12:56,009 line:-2
You can use the result of this check to
adjust your user interface as appropriate.


252
00:12:56,043 --> 00:12:57,978 line:-1
Now that we've checked for eligibility,


253
00:12:58,011 --> 00:13:00,881 line:-2
we can start
building our transfer request.


254
00:13:00.914 --> 00:13:05.052 line:-2 align:center
Similar to payment requests, the amounts
are defined through summary items.


255
00:13:05.085 --> 00:13:08.755 line:-2 align:center
In this case,
we create two different summary items.


256
00:13:08.789 --> 00:13:12.292 line:-1 align:center
The first is a PKPaymentSummaryItem.


257
00:13:12.326 --> 00:13:15.596 line:-2 align:center
This represents the amount
being withdrawn from the user's account.


258
00:13:15,629 --> 00:13:18,665 line:-2
It's important to note that the label
associated with the item,


259
00:13:18.699 --> 00:13:21.134 line:-1 align:center
should be the name of your business.


260
00:13:21.168 --> 00:13:24.037 line:-2 align:center
The second item is a new type
of summary item,


261
00:13:24.071 --> 00:13:26.707 line:-1 align:center
a PKDisbursementSummaryItem.


262
00:13:26,740 --> 00:13:29,743 line:-2
You must include one of these,
and it should always represent


263
00:13:29,776 --> 00:13:33,080 line:-2
the final amount received
onto the recipient's payment card,


264
00:13:33,113 --> 00:13:36,550 line:-1
net of any fees, charges, or adjustments.


265
00:13:36,583 --> 00:13:39,419 line:-2
Whereas for payments,
we have PKPaymentRequest,


266
00:13:39.453 --> 00:13:42.723 line:-2 align:center
we have a new request type
for Transfer Funds with Apple Pay,


267
00:13:42,756 --> 00:13:45,626 line:-1
PKDisbursementRequest.


268
00:13:45.659 --> 00:13:48.328 line:-2 align:center
In order to construct
a PKDisbursementRequest,


269
00:13:48,362 --> 00:13:50,964 line:-1
you need to specify certain details.


270
00:13:50.998 --> 00:13:54.268 line:-2 align:center
It requires the merchant identifier
you set when registering


271
00:13:54.301 --> 00:13:57.437 line:-2 align:center
for Apple Pay,
the currency of the transaction,


272
00:13:57.471 --> 00:14:00.507 line:-2 align:center
the region of your business,
as well as the networks


273
00:14:00,541 --> 00:14:03,043 line:-1
and capabilities defined earlier.


274
00:14:03,076 --> 00:14:06,914 line:-2
You also provide
the summary items you just created.


275
00:14:06.947 --> 00:14:10.050 line:-2 align:center
If you require the contact details
of the transfer recipient,


276
00:14:10.083 --> 00:14:12.686 line:-1 align:center
you can request those here as well.


277
00:14:12,719 --> 00:14:15,589 line:-2
You can also limit
which regions the recipient's payment card


278
00:14:15,622 --> 00:14:17,157 line:-1
has been issued in.


279
00:14:17,991 --> 00:14:21,828 line:0
Once the request has been built,
we can now present it to the user.


280
00:14:21,862 --> 00:14:23,997 align:center
We do this by initializing an instance


281
00:14:24,031 --> 00:14:28,669 line:0
of PKPaymentAuthorizationController
with our disbursement request.


282
00:14:28,702 --> 00:14:32,439 align:center
We set ourselves as a delegate,
and then present.


283
00:14:33,407 --> 00:14:36,343 align:center
As can be seen here,
the user is presented with the option


284
00:14:36,376 --> 00:14:39,213 line:0
to select the payment card
they wish to receive the transfer to


285
00:14:39,246 --> 00:14:42,416 line:0
and the amount
they will receive to that card.


286
00:14:42.449 --> 00:14:46.320 line:-2 align:center
Now, once the user securely authorizes
the transfer to take place,


287
00:14:46.353 --> 00:14:49.089 line:-2 align:center
there are some delegate callbacks
that will need to be implemented


288
00:14:49,122 --> 00:14:51,592 line:-1
to process the transfer.


289
00:14:51,625 --> 00:14:53,994 line:-2
There are only two delegate methods
that are required


290
00:14:54,027 --> 00:14:58,165 line:-2
to be implemented to handle
Transfer Funds with Apple Pay.


291
00:14:58,198 --> 00:15:02,269 line:-2
The first is
paymentAuthorizationControllerDidFinish.


292
00:15:02.302 --> 00:15:05.706 line:-2 align:center
This will be called
when the sheet is ready to dismiss.


293
00:15:05.739 --> 00:15:09.443 line:-2 align:center
The responsibility is
on the calling app to dismiss it.


294
00:15:09,476 --> 00:15:14,081 line:-2
You can also use this method
to change your own app's UI accordingly.


295
00:15:14.114 --> 00:15:18.085 line:-2 align:center
Secondly, is the didAuthorizePayment
delegate method.


296
00:15:18.118 --> 00:15:21.955 line:-2 align:center
Because Transfer Funds with Apple Pay
uses the same infrastructure as payments,


297
00:15:21.989 --> 00:15:26.894 line:-2 align:center
you'll receive the same type
of PKPayment object to use for processing.


298
00:15:26,927 --> 00:15:30,197 line:-2
Here we've abstracted the processing
of the token away


299
00:15:30,230 --> 00:15:33,367 line:-1
into our own processFundsTransfer method.


300
00:15:33,400 --> 00:15:35,569 line:-1
Depending on the result of processing,


301
00:15:35,602 --> 00:15:39,039 line:0
you would either return a success
or failure.


302
00:15:40,174 --> 00:15:41,775 line:1
If during the processing stage


303
00:15:41,808 --> 00:15:43,377 line:1
there are errors encountered,


304
00:15:43,410 --> 00:15:44,478 line:1
we have provided a set


305
00:15:44,511 --> 00:15:46,880 line:1
of convenience methods to represent these.


306
00:15:46,914 --> 00:15:48,282 line:1
You can use


307
00:15:48,315 --> 00:15:49,750 line:1
disbursementContactInvalidError


308
00:15:49,783 --> 00:15:51,318 align:center
for when there are issues relating


309
00:15:51,351 --> 00:15:54,154 align:center
to the contact information provided.


310
00:15:54,188 --> 00:15:56,290 align:center
If your payment processor determines


311
00:15:56,323 --> 00:15:58,225 line:1
that the user's payment card is unable


312
00:15:58,258 --> 00:16:00,761 line:1
to accept fund transfers, you can use


313
00:16:00,794 --> 00:16:03,697 align:center
disbursementCardUnsupportedError.


314
00:16:03,730 --> 00:16:07,701 line:-2
Some financial institutions
support instant funds transfers,


315
00:16:07,734 --> 00:16:10,470 line:-2
where funds can be sent
to the recipient more quickly.


316
00:16:10.504 --> 00:16:14.741 line:-2 align:center
These can also be represented
with Transfer Funds with Apple Pay.


317
00:16:14.775 --> 00:16:18.212 line:-2 align:center
Depending on the service,
these instant transfers can sometimes


318
00:16:18.245 --> 00:16:21.849 line:-2 align:center
include fees,
which can also be represented.


319
00:16:21,882 --> 00:16:26,753 line:-2
Typically, a user will be given a choice
of transfer speed within your app.


320
00:16:26.787 --> 00:16:29.323 line:-2 align:center
When a user chooses
to transfer funds instantly,


321
00:16:29,356 --> 00:16:32,960 line:-2
provide the capability
to require support for them.


322
00:16:32,993 --> 00:16:36,196 line:-2
When doing so,
the user's choice of cards will be limited


323
00:16:36.230 --> 00:16:39.766 line:-2 align:center
to those that are known
to support instant transfers.


324
00:16:40.868 --> 00:16:43.136 line:-2 align:center
And this is what an instant transfer
would look like.


325
00:16:44,438 --> 00:16:47,941 align:center
The sheet looks very similar to before,
but now we highlight the fact


326
00:16:47,975 --> 00:16:52,312 line:0
the transfer is instant, as well
as any fee the user will be paying.


327
00:16:52,346 --> 00:16:56,717 line:0
The transfer amount has also been
adjusted to take into account the fee.


328
00:16:56,750 --> 00:17:01,221 line:-2
Let's see how to make the previous
transfer request an instant one.


329
00:17:01,255 --> 00:17:06,627 line:-2
Firstly, we add instantFundsOut,
to our list of supported capabilities.


330
00:17:06,660 --> 00:17:09,563 line:-2
We can then check
within supportsDisbursements


331
00:17:09.596 --> 00:17:13.367 line:-2 align:center
whether the user has any cards
that support instant transfers.


332
00:17:13,400 --> 00:17:18,505 line:-2
You can then adjust your transfer method
options and user interface accordingly.


333
00:17:18.539 --> 00:17:21.375 line:-2 align:center
As for summary items,
we have a dedicated item


334
00:17:21.408 --> 00:17:26.980 line:-2 align:center
to represent instant transfer fees,
PKInstantFundsOutFeeSummaryItem.


335
00:17:27.014 --> 00:17:30.184 line:-2 align:center
With this item, you specify
the amount that will be charged


336
00:17:30.217 --> 00:17:33.420 line:-2 align:center
for the purposes
of performing an instant transfer.


337
00:17:33,453 --> 00:17:37,991 line:-2
Even if you don't charge a fee,
this summary item is still required.


338
00:17:38,025 --> 00:17:41,595 line:-2
In this case,
you would set an amount of zero.


339
00:17:41.628 --> 00:17:44.164 line:-2 align:center
Because in this example,
we are charging a fee,


340
00:17:44,198 --> 00:17:47,034 line:-2
we need to update
the disbursement amount accordingly.


341
00:17:47,067 --> 00:17:50,370 line:-1
This won't be done automatically for you.


342
00:17:50,404 --> 00:17:55,075 line:-2
Creating the PKDisbursementRequest
isn't too different from before.


343
00:17:55,108 --> 00:17:58,212 line:-2
The only difference is
to ensure you provide the capabilities


344
00:17:58,245 --> 00:18:01,081 line:-1
and summary items defined earlier.


345
00:18:01,114 --> 00:18:04,685 line:-2
And that's all that's required
to represent an instant transfer.


346
00:18:04.718 --> 00:18:06.954 line:-2 align:center
Here are some best practices
to keep in mind


347
00:18:06,987 --> 00:18:09,389 line:-2
when implementing
Transfer Funds with Apple Pay.


348
00:18:10,457 --> 00:18:15,562 line:-2
Note that Transfer Funds with Apple Pay
is only available for iOS and iPadOS,


349
00:18:15.596 --> 00:18:19.233 line:-2 align:center
and is unavailable
for use on macOS or the web.


350
00:18:19,266 --> 00:18:22,903 line:-2
If an error were to occur
during the processing of a funds transfer,


351
00:18:22,936 --> 00:18:25,539 line:-2
use one
of the dedicated disbursement errors


352
00:18:25,572 --> 00:18:29,076 line:-2
in order to communicate this
to the user effectively.


353
00:18:29,109 --> 00:18:32,312 line:-2
It's important to note
that the first summary item should


354
00:18:32.346 --> 00:18:36.617 line:-2 align:center
represent the amount that will
be withdrawn from the user's account.


355
00:18:36,650 --> 00:18:40,821 line:-2
The label of the first summary item
should match that of your business.


356
00:18:40,854 --> 00:18:44,892 line:-2
And the last summary item must represent
the amount that will be received


357
00:18:44,925 --> 00:18:49,963 line:-2
by the user's payment card,
net of any fees, charges, or adjustments.


358
00:18:49,997 --> 00:18:53,267 line:-2
And that's everything
we have today regarding payments.


359
00:18:53.300 --> 00:18:57.604 line:-2 align:center
To change tracks a little bit,
let's talk about Order Tracking.


360
00:18:57.638 --> 00:19:00.240 line:-1 align:center
Order Tracking was introduced in iOS 16


361
00:19:00,274 --> 00:19:04,411 line:-2
as a way for users to track orders
placed with participating merchants.


362
00:19:04,444 --> 00:19:06,747 line:-2
The response
from users has been fantastic,


363
00:19:06.780 --> 00:19:10.817 line:-2 align:center
and we have been hard at work
making Order Tracking even better.


364
00:19:10,851 --> 00:19:14,521 line:-2
We'll talk about how we've improved
integration within the operating system


365
00:19:14,555 --> 00:19:17,524 line:-2
to better represent
and communicate orders.


366
00:19:17,558 --> 00:19:20,961 line:-2
We'll then go through some enhancements
we've made to Order Tracking.


367
00:19:20,994 --> 00:19:26,066 line:-2
And lastly, we are introducing
new ways to add Orders to Wallet.


368
00:19:26.099 --> 00:19:29.536 line:-2 align:center
In iOS 16.4,
we added support for sharing orders


369
00:19:29,570 --> 00:19:33,140 line:-2
through Messages,
providing an inline preview of the order,


370
00:19:33,173 --> 00:19:37,177 line:-2
and the ability for the recipient
to track it within Wallet.


371
00:19:37.211 --> 00:19:39.880 line:-2 align:center
We also introduced
an Order Tracking widget,


372
00:19:39,913 --> 00:19:43,317 line:-2
where users can keep a track
of orders at a glance.


373
00:19:43.350 --> 00:19:45.819 line:-2 align:center
Users can already benefit
from these new features


374
00:19:45,853 --> 00:19:48,455 line:-1
without any additional work needed.


375
00:19:48,488 --> 00:19:51,959 line:0
We are continuing
with system integration in iOS 17


376
00:19:51,992 --> 00:19:53,894 line:0
with support for Maps.


377
00:19:53,927 --> 00:19:58,298 align:center
If a user is tracking an order with
a specified pick up time and location,


378
00:19:58,332 --> 00:20:02,536 align:center
Maps will proactively suggest it
through Siri Suggestions.


379
00:20:02.569 --> 00:20:05.072 line:-2 align:center
Now let's take a look at some
of the enhancements we've made


380
00:20:05,105 --> 00:20:08,008 line:-1
to Order Tracking in iOS 17.


381
00:20:08.041 --> 00:20:11.512 line:-2 align:center
To better support courier
and food delivery use cases,


382
00:20:11.545 --> 00:20:14.481 line:-2 align:center
you can now indicate the type
of shipping being used.


383
00:20:14.515 --> 00:20:16.817 line:-1 align:center
Through the new shippingType property,


384
00:20:16.850 --> 00:20:20.354 line:-2 align:center
you can declare whether an order
is being shipped or delivered.


385
00:20:21,822 --> 00:20:24,825 line:-2
We now have better support
for associated applications,


386
00:20:24,858 --> 00:20:27,361 line:-1
including enterprise apps.


387
00:20:27,394 --> 00:20:30,564 line:-2
By declaring your associated application identifiers,


388
00:20:30,597 --> 00:20:33,200 line:-2
you can improve the management
of order notifications


389
00:20:33,233 --> 00:20:36,236 line:-1
between your app and Order Tracking.


390
00:20:36,270 --> 00:20:39,640 line:-2
In addition, we support
custom product page identifiers,


391
00:20:39,673 --> 00:20:42,409 line:-2
enabling a deep-link
to your App Store product page


392
00:20:42.442 --> 00:20:44.745 line:-1 align:center
most relevant for Wallet traffic.


393
00:20:45,646 --> 00:20:50,117 line:-2
Lastly, we are introducing new ways
to represent payment information.


394
00:20:50.150 --> 00:20:54.154 line:-2 align:center
Order packages now support an array
of transactions associated with it,


395
00:20:54.188 --> 00:20:56.456 line:-2 align:center
with each having
its own detailed information,


396
00:20:56,490 --> 00:20:59,426 line:-1
such as payment method and amount.


397
00:20:59.459 --> 00:21:02.129 line:-2 align:center
You can also attach receipt files
to transactions,


398
00:21:02.162 --> 00:21:04.865 line:-1 align:center
so your customer has a record of payment.


399
00:21:04,898 --> 00:21:10,337 line:-2
This receipt file can either be a PDF
or an image such as JPEG or PNG.


400
00:21:10.370 --> 00:21:13.473 line:-2 align:center
Keep in mind that order packages
are limited in size,


401
00:21:13,507 --> 00:21:17,411 line:-2
so be considerate for the size
of the receipt files you include.


402
00:21:17.444 --> 00:21:20.781 line:-2 align:center
You can now also describe
whether a transaction is for a purchase


403
00:21:20.814 --> 00:21:22.816 line:-1 align:center
or a refund.


404
00:21:22.850 --> 00:21:27.855 line:-2 align:center
With iOS 17, adding Orders
into Wallet has never been simpler.


405
00:21:27.888 --> 00:21:30.290 line:-2 align:center
You can now attach
order packages to emails,


406
00:21:30.324 --> 00:21:32.759 line:-1 align:center
such as the order confirmation email.


407
00:21:32,793 --> 00:21:37,331 line:-2
The user will then be able to add
the order to Wallet right then and there.


408
00:21:37,364 --> 00:21:41,235 line:-2
In addition, you can also
add a “Track with Apple Wallet” button


409
00:21:41.268 --> 00:21:44.137 line:-1 align:center
within your apps and websites.


410
00:21:44,171 --> 00:21:46,707 line:-2
Let's take a look
at the new Order Tracking API


411
00:21:46.740 --> 00:21:50.310 line:-1 align:center
that supports adding orders to Wallet.


412
00:21:50.344 --> 00:21:56.216 line:-2 align:center
This API is included within two new
frameworks, FinanceKit and FinanceKitUI.


413
00:21:56,250 --> 00:21:59,486 line:-2
These two Swift exclusive frameworks
will allow developers


414
00:21:59.520 --> 00:22:02.656 line:-1 align:center
to handle order data within Wallet.


415
00:22:02.689 --> 00:22:07.127 line:-2 align:center
Access to order information is achieved
through a shared instance of FinanceStore,


416
00:22:07,160 --> 00:22:11,932 line:-2
providing a central resource
for handling order tracking queries.


417
00:22:11,965 --> 00:22:15,769 line:-2
With this API, you will be able to check
for the existence of an order,


418
00:22:15.802 --> 00:22:18.939 line:-2 align:center
as well as a way
to add or update an order.


419
00:22:18.972 --> 00:22:22.776 line:-2 align:center
Let's take a look
at how you check for an existing order.


420
00:22:22.809 --> 00:22:26.747 line:-2 align:center
You first query the FinanceStore
to check whether it contains an order


421
00:22:26,780 --> 00:22:30,150 line:-1
with a fully qualified order identifier.


422
00:22:30,184 --> 00:22:32,586 line:0
You will then receive one
of two responses,


423
00:22:32,619 --> 00:22:35,689 line:0
either it exists,
or it has not been found.


424
00:22:35,722 --> 00:22:38,425 align:center
You can then respond in your app
as appropriate.


425
00:22:38,458 --> 00:22:40,494 line:0
It's as simple as that.


426
00:22:40,527 --> 00:22:44,665 line:-2
If you want to add or update an order,
you can do this in one of two ways.


427
00:22:44,698 --> 00:22:48,735 line:-2
We'll first show
how you use FinanceKit to do this.


428
00:22:48.769 --> 00:22:52.639 line:-2 align:center
You will first need a Data serialization
of the signed order package


429
00:22:52,673 --> 00:22:54,508 line:-1
you wish to add to Wallet.


430
00:22:54.541 --> 00:22:58.045 line:-2 align:center
You then provide this
to FinanceStore's save order method.


431
00:22:58,078 --> 00:23:00,747 line:-2
When you do this,
a screen is presented to the user


432
00:23:00,781 --> 00:23:05,385 line:-2
to verify the order's contents and whether
they wish to track it within Wallet.


433
00:23:05.419 --> 00:23:08.555 line:-2 align:center
Once a user has either confirmed
or denied the request,


434
00:23:08,589 --> 00:23:10,824 line:-2
you will receive
the result asynchronously,


435
00:23:10,858 --> 00:23:13,026 align:center
and it can take three forms.


436
00:23:13,060 --> 00:23:15,229 align:center
Either they've added the order to Wallet,


437
00:23:15,262 --> 00:23:20,267 line:0
they cancelled the request,
or a newer order already exists.


438
00:23:20.300 --> 00:23:24.738 line:-2 align:center
If your app is written with SwiftUI,
you can use FinanceKitUI.


439
00:23:24.771 --> 00:23:28.041 line:-2 align:center
This provides a dedicated
"Track with Apple Wallet" button


440
00:23:28.075 --> 00:23:32.212 line:-2 align:center
and allows you to process
the result of adding the order.


441
00:23:32.246 --> 00:23:36.016 line:-2 align:center
Like with FinanceKit,
you will first need a serialized instance


442
00:23:36.049 --> 00:23:38.485 line:-1 align:center
of your signed order package.


443
00:23:38.519 --> 00:23:42.689 line:-2 align:center
You then include
AddOrderToWalletButton within your view.


444
00:23:42,723 --> 00:23:44,324 line:-1
When a user selects this button,


445
00:23:44,358 --> 00:23:48,262 line:-2
they will be offered the ability
to add the order to their Wallet.


446
00:23:48.295 --> 00:23:53.500 line:-2 align:center
You are then able to respond to the three
results states, just like before.


447
00:23:53.534 --> 00:23:57.171 line:-2 align:center
For merchants who want to support
customers tracking an order on the web,


448
00:23:57.204 --> 00:24:00.741 line:-2 align:center
we offer a version of this button
in the JavaScript SDK.


449
00:24:00,774 --> 00:24:03,710 line:-2
To use this,
you insert an apple-wallet-button


450
00:24:03,744 --> 00:24:06,313 line:-1
and configure it using attributes.


451
00:24:06,346 --> 00:24:09,983 line:-2
The type of button should
be set to track-order.


452
00:24:10,017 --> 00:24:13,887 line:-2
When using this button,
it's important to set the onClick callback


453
00:24:13.921 --> 00:24:18.225 line:-2 align:center
to point to the location of
the signed order package you wish to add.


454
00:24:18,258 --> 00:24:20,861 line:-2
And that's what we have for you
today on Order Tracking.


455
00:24:20,894 --> 00:24:25,199 line:-2
We can't wait for you to adopt
these new APIs in your apps and services.


456
00:24:25,232 --> 00:24:28,202 line:-2
And now
for something completely different,


457
00:24:28.235 --> 00:24:31.705 line:-2 align:center
we have some exciting updates
to share regarding Identity,


458
00:24:31.738 --> 00:24:34.908 line:-1 align:center
and for that, I'll hand over to Jon.


459
00:24:34.942 --> 00:24:37.044 line:-2 align:center
Jon: Thanks, David.
Hello again.


460
00:24:37.077 --> 00:24:40.747 line:-2 align:center
I'm Jon, an engineer
on the Apple Pay and Wallet team.


461
00:24:40,781 --> 00:24:43,951 line:-2
I'm so excited to talk
about the new functionality


462
00:24:43,984 --> 00:24:47,855 line:-1
we've added for Identity in iOS 17.


463
00:24:47,888 --> 00:24:52,159 line:-2
We introduced IDs
in Wallet back in iOS 15.4,


464
00:24:52.192 --> 00:24:56.697 line:-2 align:center
enabling users in supported U.S. states
to add their driver's license


465
00:24:56,730 --> 00:24:59,700 line:0
or state ID to Wallet.


466
00:24:59,733 --> 00:25:03,470 align:center
Last year,
we introduced Verify with Wallet.


467
00:25:03,504 --> 00:25:06,974 line:0
With this API,
businesses can streamline their onboarding


468
00:25:07,007 --> 00:25:10,511 align:center
and account verification flows
by requesting information


469
00:25:10,544 --> 00:25:13,947 line:0
from a user's ID stored in Apple Wallet.


470
00:25:13,981 --> 00:25:19,887 line:-2
This year, in iOS 17, we're introducing
Tap to Present ID on iPhone.


471
00:25:21.054 --> 00:25:26.326 line:-2 align:center
With this API, your apps
can seamlessly and securely verify IDs


472
00:25:26.360 --> 00:25:31.231 line:-2 align:center
in Wallet or other mobile
driver's licenses using just your iPhone.


473
00:25:31,265 --> 00:25:35,235 line:-2
This builds on top
of the Tap to Pay on iPhone API,


474
00:25:35,269 --> 00:25:40,007 line:-2
which we added to the ProximityReader
framework in iOS 15.4.


475
00:25:40,040 --> 00:25:45,012 line:-2
Tap to Pay on iPhone provides a secure,
private, and easy way


476
00:25:45.045 --> 00:25:47.848 line:-2 align:center
to accept contactless payments
without the need


477
00:25:47.881 --> 00:25:51.218 line:-2 align:center
for additional hardware
or payment terminals.


478
00:25:51,251 --> 00:25:55,923 line:-2
Now, let's take a look
at Tap to Present ID in action.


479
00:25:55.956 --> 00:25:58.792 line:-1 align:center
Suppose I work for Spaceship Rentals


480
00:25:58.825 --> 00:26:01.962 line:-2 align:center
and that David would like
to rent a spaceship from us.


481
00:26:01.995 --> 00:26:04.932 line:-2 align:center
He needs to be
at least 21 years old to do this,


482
00:26:04.965 --> 00:26:10.704 line:-2 align:center
so I'm going to perform an age
verification using Tap to Present ID.


483
00:26:10,737 --> 00:26:14,641 line:-2
First, the Spaceship Rentals app
invokes Tap to Present ID.


484
00:26:15.943 --> 00:26:20.681 line:-2 align:center
My iPhone will show the business' name,
logo, and the type of request


485
00:26:20.714 --> 00:26:24.651 line:-2 align:center
being performed,
in this case, proof of age.


486
00:26:24.685 --> 00:26:28.789 line:-2 align:center
I'll now invite David
to hold his iPhone near mine.


487
00:26:29.756 --> 00:26:30.924 line:-1 align:center
[phone chimes]


488
00:26:31,758 --> 00:26:32,826 line:-1
[phone chimes]


489
00:26:32,860 --> 00:26:36,563 line:0
David: My iPhone now displays
a consent sheet that I can review.


490
00:26:36,597 --> 00:26:39,700 align:center
I can see that I'm presenting
my ID to Spaceship Rentals,


491
00:26:39,733 --> 00:26:43,737 line:0
and they are requesting my ID photo
and whether I'm over 21.


492
00:26:43,770 --> 00:26:45,839 line:-1
I'm willing to present this information,


493
00:26:45,873 --> 00:26:48,942 line:-2
so I'll double click
and confirm with Face ID.


494
00:26:49,643 --> 00:26:50,844 line:-1
[phone clicks]


495
00:26:51,512 --> 00:26:52,446 line:-1
[phone clicks]


496
00:26:52,479 --> 00:26:56,517 line:-2
Jon: My iPhone now shows
the information David presented.


497
00:26:56,550 --> 00:27:01,355 line:-2
I see that he matches his ID photo
and that he's over 21.


498
00:27:01.388 --> 00:27:04.124 line:-1 align:center
So now he's ready for takeoff.


499
00:27:05,259 --> 00:27:10,864 line:-2
I've just successfully verified David's ID
using the Tap to Present ID API.


500
00:27:10.898 --> 00:27:15.769 line:-2 align:center
This experience offered some key benefits
compared to checking a physical ID.


501
00:27:16.870 --> 00:27:20.807 line:-2 align:center
First, the ID information
itself is verified.


502
00:27:20.841 --> 00:27:24.378 line:-2 align:center
Unlike physical IDs,
which are susceptible to tampering,


503
00:27:24,411 --> 00:27:27,614 line:-2
mobile driver's licenses
are cryptographically signed


504
00:27:27,648 --> 00:27:29,249 line:-1
by the issuing authority,


505
00:27:29,283 --> 00:27:34,688 line:-2
and iOS verifies the signature,
so you can trust the response.


506
00:27:34.721 --> 00:27:38.392 line:-2 align:center
Second, the experience
was wireless and secure.


507
00:27:38,425 --> 00:27:42,229 line:-2
At no point did David need
to hand over his iPhone to me


508
00:27:42,262 --> 00:27:43,764 line:-1
or even unlock it,


509
00:27:43.797 --> 00:27:48.135 line:-2 align:center
and the data was sent securely
using NFC and Bluetooth.


510
00:27:49.036 --> 00:27:53.273 line:-2 align:center
Finally, this is a more private way
to verify an ID.


511
00:27:53.307 --> 00:27:57.711 line:-2 align:center
David only needed to share the information
necessary to verify his age,


512
00:27:57,744 --> 00:28:01,348 line:-2
unlike with a physical ID,
where everything is shared.


513
00:28:01,381 --> 00:28:06,420 line:-2
Let's talk about the types of requests
you can perform with this API.


514
00:28:06,453 --> 00:28:08,789 line:-1
We just demoed the display request.


515
00:28:08.822 --> 00:28:13.093 line:-2 align:center
This is suitable for when you need
to verify a person's name or age.


516
00:28:13,126 --> 00:28:15,596 line:-1
The result is shown in the system UI,


517
00:28:15.629 --> 00:28:19.333 line:-2 align:center
and no ID information
is returned to your app.


518
00:28:20,300 --> 00:28:23,470 line:-1
The API also supports data requests.


519
00:28:23.504 --> 00:28:25.439 line:-1 align:center
These can request a wider set


520
00:28:25.472 --> 00:28:26.874 line:-1 align:center
of document elements,


521
00:28:26,907 --> 00:28:29,309 line:-1
such as address, date of birth,


522
00:28:29.343 --> 00:28:31.245 line:-1 align:center
and driving privileges,


523
00:28:31,278 --> 00:28:33,680 line:-1
and the result is returned to your app


524
00:28:33.714 --> 00:28:35.516 line:-1 align:center
to process.


525
00:28:35,549 --> 00:28:37,317 line:-1
To perform data requests,


526
00:28:37,351 --> 00:28:38,819 line:-1
your app will need


527
00:28:38,852 --> 00:28:40,087 line:-1
an additional entitlement.


528
00:28:40.120 --> 00:28:41.522 line:-1 align:center
Check the documentation


529
00:28:41,555 --> 00:28:43,223 line:-1
for more information.


530
00:28:44,925 --> 00:28:48,295 line:-2
Now, let's have a look
at how to implement this in code,


531
00:28:48.328 --> 00:28:51.198 line:-1 align:center
starting with a display request.


532
00:28:52.199 --> 00:28:57.037 line:-2 align:center
First, use the isSupported class property
on MobileDocumentReader


533
00:28:57,070 --> 00:29:01,275 line:-2
to check whether the current device
supports this API.


534
00:29:01,308 --> 00:29:06,880 line:-2
If it does, instantiate a reader object
and call its prepare method.


535
00:29:07.614 --> 00:29:11.585 line:-2 align:center
This will return
a MobileDocumentReaderSession object.


536
00:29:11.618 --> 00:29:14.955 line:-2 align:center
Next,
create a driver's license display request


537
00:29:14.988 --> 00:29:17.858 line:-1 align:center
with the elements you want to verify.


538
00:29:17,891 --> 00:29:21,461 line:-2
Here, I'm verifying whether
the holder of the driver's license


539
00:29:21,495 --> 00:29:24,064 line:-1
is at least 21 years old.


540
00:29:24,097 --> 00:29:29,403 line:-2
Then call requestDocument on the session,
passing in the request.


541
00:29:29,436 --> 00:29:33,574 line:-2
The reader UI will then be shown,
first prompting the ID holder


542
00:29:33,607 --> 00:29:38,245 line:-2
to present their device, and then
displaying the result of the request.


543
00:29:39,313 --> 00:29:42,316 line:-2
Keep in mind,
as this is a display request,


544
00:29:42.349 --> 00:29:46.086 line:-2 align:center
nothing is returned
from the requestDocument method.


545
00:29:46,119 --> 00:29:48,121 line:-1
And with just a few lines of code,


546
00:29:48,155 --> 00:29:51,959 line:-2
you've added mobile document
reading capability to your app.


547
00:29:52,759 --> 00:29:55,829 line:-2
By default,
the name and logo of your brand


548
00:29:55,863 --> 00:30:00,901 line:-2
isn't displayed on either
the reader iPhone or ID holder's device.


549
00:30:00,934 --> 00:30:04,238 line:-2
However, if you wish
to display your brand information


550
00:30:04.271 --> 00:30:06.840 line:-1 align:center
during a document request, you can.


551
00:30:06.874 --> 00:30:09.676 line:-2 align:center
This can be configured
through Apple Business Register


552
00:30:09.710 --> 00:30:12.613 line:-1 align:center
and with a few more lines of code.


553
00:30:12,646 --> 00:30:16,083 line:-2
To show your brand information
during document requests,


554
00:30:16,116 --> 00:30:20,621 line:-2
you'll need to pass in a reader token
when preparing your device.


555
00:30:20,654 --> 00:30:24,892 line:-2
You'll need
to create this token on your server.


556
00:30:24.925 --> 00:30:27.728 line:-1 align:center
A reader token is a JWT,


557
00:30:27.761 --> 00:30:30.197 line:-1 align:center
signed with a key pair you've configured


558
00:30:30,230 --> 00:30:32,666 line:-1
through Apple Business Register.


559
00:30:32,699 --> 00:30:35,602 line:-1
Your server will create the reader token


560
00:30:35.636 --> 00:30:38.205 line:-1 align:center
with your brand ID, key ID,


561
00:30:38,238 --> 00:30:40,908 line:-1
and a reader instance identifier.


562
00:30:40,941 --> 00:30:46,113 line:-2
The brand and key IDs can be obtained
through Apple Business Register


563
00:30:46.146 --> 00:30:50.417 line:-2 align:center
and are the same
across all instances of your app.


564
00:30:50,450 --> 00:30:54,688 line:-2
Your app will provide the reader
instance identifier to your server.


565
00:30:55.589 --> 00:30:59.726 line:-2 align:center
Back in the code, your app
will fetch the reader instance identifier


566
00:30:59,760 --> 00:31:03,130 line:-2
from MobileDocumentReader's
configuration object


567
00:31:03.163 --> 00:31:08.035 line:-2 align:center
and send it to your server
in exchange for a reader token.


568
00:31:08.068 --> 00:31:13.373 line:-2 align:center
Pass this token into the prepare method
to obtain a reader session.


569
00:31:13,407 --> 00:31:19,179 line:-2
Then create a request
and call requestDocument just as before.


570
00:31:19,213 --> 00:31:22,649 line:-2
And now your brand's name and logo
will be displayed


571
00:31:22.683 --> 00:31:26.787 line:-2 align:center
on both the reader iPhone
and ID holder's device.


572
00:31:26,820 --> 00:31:28,989 line:-1
And that covers the display request.


573
00:31:29.022 --> 00:31:33.360 line:-2 align:center
So far, we've looked at how
to prepare a session, request a document,


574
00:31:33,393 --> 00:31:37,631 line:-2
and how to use a reader token
to show your branding information.


575
00:31:37,664 --> 00:31:41,635 line:-2
Now let's look at how
to perform a data request.


576
00:31:41.668 --> 00:31:45.239 line:-2 align:center
These requests support a wider range
of document elements,


577
00:31:45,272 --> 00:31:48,475 line:-2
and the API returns the result
to your app,


578
00:31:48.509 --> 00:31:50.811 line:-1 align:center
instead of just displaying it.


579
00:31:51.879 --> 00:31:55.983 line:-2 align:center
To use this request type,
you'll first need to prepare your device


580
00:31:56.016 --> 00:31:59.386 line:-1 align:center
with a reader token, just like before.


581
00:31:59,419 --> 00:32:02,890 line:-2
Then create
a driver's license data request,


582
00:32:02.923 --> 00:32:06.193 line:-2 align:center
specifying the document elements
to be requested


583
00:32:06,226 --> 00:32:10,063 line:-2
and whether
you intend to retain the information.


584
00:32:11,064 --> 00:32:14,334 line:-2
Calling requestDocument
will show the reader UI


585
00:32:14,368 --> 00:32:16,436 line:-1
just like with the display request,


586
00:32:16,470 --> 00:32:21,775 line:-2
but once the read has completed,
the UI is automatically dismissed.


587
00:32:21.808 --> 00:32:26.914 line:-2 align:center
The response is then returned
to your app to process.


588
00:32:26,947 --> 00:32:29,550 line:-1
And that's Tap to Present ID on iPhone,


589
00:32:29,583 --> 00:32:33,420 line:-2
an exciting new API we've added
to the ProximityReader framework.


590
00:32:33.453 --> 00:32:36.190 line:-1 align:center
And now, back over to David.


591
00:32:36,223 --> 00:32:39,660 line:-2
David: Thanks Jon!
So what have we learned today?


592
00:32:39,693 --> 00:32:41,995 line:-2
We've taken a look
at enhancements to payments


593
00:32:42.029 --> 00:32:45.866 line:-2 align:center
with support for Apple Pay Later
and new use cases.


594
00:32:45.899 --> 00:32:49.002 line:-2 align:center
Order Tracking's new APIs allow you
to add Orders to Wallet


595
00:32:49,036 --> 00:32:51,371 line:-1
from within your apps and services,


596
00:32:51.405 --> 00:32:54.608 line:-2 align:center
and there's a new way
to verify mobile driver's licenses


597
00:32:54.641 --> 00:32:57.744 line:-1 align:center
with Tap to Present ID on iPhone.


598
00:32:57.778 --> 00:32:59.947 line:-1 align:center
To wrap up, if you're a business,


599
00:32:59.980 --> 00:33:02.683 line:-2 align:center
consider enrolling
on Apple Business Register.


600
00:33:02,716 --> 00:33:06,720 line:-2
This will help enrich the Wallet and
Apple Pay experience for your customers.


601
00:33:06.753 --> 00:33:08.956 line:-1 align:center
You can visit the Apple Developer forums,


602
00:33:08.989 --> 00:33:12.326 line:-2 align:center
where you can ask questions
and get help all year round.


603
00:33:12,359 --> 00:33:16,096 line:-2
And lastly, if you have any feedback,
we'd love to hear from you.


604
00:33:16,129 --> 00:33:19,066 line:-2
You can do this
by using Feedback Assistant.


605
00:33:19.099 --> 00:33:22.469 line:-2 align:center
And that's it.
We hope you've enjoyed this session.


606
00:33:22.503 --> 00:33:23.904 line:-1 align:center
both: Thanks for watching.


607
00:33:23,937 --> 00:33:27,474 line:0
♪ ♪

