2
00:00:00.334 --> 00:00:07.341 line:-1
â™ª â™ª


3
00:00:10.010 --> 00:00:11.078 line:-1
Razvan: Hello!


4
00:00:11.111 --> 00:00:14.915 line:-2
I'm Razvan, an engineer
on the WebKit Developer Experience team,


5
00:00:14.948 --> 00:00:17.618 line:-2
and I'm here to tell you
about some of the new features


6
00:00:17.651 --> 00:00:21.188 line:-2
and improvements we've made
to Web Inspector this year.


7
00:00:21.221 --> 00:00:26.660 line:-2
Web Inspector is part of Safari on macOS,
and it provides a powerful set of tools


8
00:00:26.693 --> 00:00:29.830 line:-2
that allow you to inspect
all the resources and activities


9
00:00:29.863 --> 00:00:34.835 line:-2
of a website, web app,
web extension, or home screen web app.


10
00:00:34.868 --> 00:00:38.038 line:-2
I'm excited to show you
some of the new features and improvements


11
00:00:38.071 --> 00:00:42.943 line:-2
we've added since last year,
like new typography inspection tools,


12
00:00:42.976 --> 00:00:45.546 line:-1
a way to emulate user preferences,


13
00:00:45.579 --> 00:00:49.917 line:-2
new badges for elements with
event listeners and scroll containers,


14
00:00:49.950 --> 00:00:52.719 line:-2
and we've improved
the JavaScript debugging experience


15
00:00:52.753 --> 00:00:55.489 line:-1
with enhancements to breakpoints.


16
00:00:55.522 --> 00:00:59.126 line:-2
If you haven't used Web Inspector before,
you'll have to enable it.


17
00:00:59.159 --> 00:01:04.398 line:-2
Open the Settings window of Safari
and switch to the Advanced tab.


18
00:01:04.431 --> 00:01:09.102 line:-2
At the bottom, you'll find the setting
to "Show features for web developers."


19
00:01:09.136 --> 00:01:12.206 line:-1
Click the checkbox to enable this.


20
00:01:12.239 --> 00:01:16.510 line:-2
The Develop menu
is now available in the menu bar.


21
00:01:16.543 --> 00:01:22.416 line:-2
You can open Web Inspector using
the menu item called Show Web Inspector


22
00:01:22.449 --> 00:01:27.321 line:-2
or by pressing the keyboard shortcut
Option+Command+I on any web page.


23
00:01:28,889 --> 00:01:31,058
This year, we've made many improvements


24
00:01:31,091 --> 00:01:33,694
to all of the developer features
in Safari,


25
00:01:33,727 --> 00:01:38,098
including a streamlined way to pair
and inspect web content on devices,


26
00:01:38,131 --> 00:01:41,301
a quick way to open
a web page in a Simulator,


27
00:01:41,335 --> 00:01:45,506
a refreshed Responsive Design Mode,
and many others.


28
00:01:45,539 --> 00:01:50,377
To learn more, watch this session titled
"Rediscover Safari developer features"


29
00:01:50,410 --> 00:01:52,613
from this year's WWDC.


30
00:01:52.646 --> 00:01:54.481 line:-1
Now that Web Inspector is enabled,


31
00:01:54.515 --> 00:01:58.051 line:-2
let's start by looking at the new tools
for typography inspection.


32
00:01:58,752 --> 00:02:02,222
Web developers use custom fonts
to create beautiful content


33
00:02:02,256 --> 00:02:06,159
with type that is both legible
and makes it stand out.


34
00:02:06,193 --> 00:02:10,831
But getting typography on the web
just right is not always easy.


35
00:02:10.864 --> 00:02:14.201 line:-2
First, the right font file
needs to be loaded.


36
00:02:14.234 --> 00:02:17.404 line:-2
It must be in a format
supported by the browser


37
00:02:17.437 --> 00:02:19.540 line:-1
and with the right features.


38
00:02:19.573 --> 00:02:22.142 line:-2
And it should include the right glyphs
for the characters


39
00:02:22.176 --> 00:02:25.746 line:-2
of the written language
it's going to represent.


40
00:02:25.779 --> 00:02:28.215 line:-1
Then, there are many CSS properties


41
00:02:28.248 --> 00:02:31.385 line:-2
that influence the way
a font renders on screen.


42
00:02:31.418 --> 00:02:34.054 line:-2
And most of them are inheritable
through the cascade,


43
00:02:34.087 --> 00:02:36.456 line:-1
sometimes leading to confusion,


44
00:02:36.490 --> 00:02:39.660 line:-1
like, "Which font face was actually used?"


45
00:02:39.693 --> 00:02:43.697 line:-2
Or "Why is this bold?"
Or "Is this style really italic?"


46
00:02:44.865 --> 00:02:49.236 line:-2
Web Inspector can help with a host
of typography inspection tools.


47
00:02:49.269 --> 00:02:53.841 line:-2
You can find them in the Details sidebar
of the Elements tab, in the Font panel.


48
00:02:55.475 --> 00:03:00.414 line:-2
It shows properties and capabilities
of the font used on the selected element,


49
00:03:00.447 --> 00:03:03.984 line:-1
such as the name of the primary font used.


50
00:03:04.017 --> 00:03:09.623 line:-2
You can reference this to quickly check
if the font you expected was indeed used.


51
00:03:09.656 --> 00:03:13.393 line:-2
Keep in mind that this only identifies
the primary font.


52
00:03:13.427 --> 00:03:15.696 line:-1
If the selected node includes characters


53
00:03:15.729 --> 00:03:18.332 line:-2
for which the primary font
does not have glyphs,


54
00:03:18.365 --> 00:03:22.169 line:-1
a fallback font will be used for those.


55
00:03:22.202 --> 00:03:26.673 line:-2
Next, the Font panel shows
a summary of the basic font properties,


56
00:03:26.707 --> 00:03:31.812 line:-2
like font size, style,
weight, and stretch.


57
00:03:33.347 --> 00:03:36.717 line:-2
There's also a section that shows
the supported font feature properties


58
00:03:36.750 --> 00:03:38.552 line:-1
and their used values.


59
00:03:38.585 --> 00:03:43.190 line:-2
These toggle special aspects
of a typeface such as ligatures,


60
00:03:43.223 --> 00:03:46.627 line:-2
small caps
instead of lowercase characters,


61
00:03:46.660 --> 00:03:49.763 line:-1
special numeric styles, and many others,


62
00:03:49.796 --> 00:03:53.300 line:-1
depending on what the font supports.


63
00:03:53.333 --> 00:03:56.069 line:-2
New this year,
the Font panel shows warnings


64
00:03:56.103 --> 00:03:59.339 line:-1
for synthetic bold or oblique styles.


65
00:03:59.373 --> 00:04:03.544 line:-2
What's a synthetic style?
Let's take italic as an example.


66
00:04:04.545 --> 00:04:08.448 line:-2
Italic styles are often supplied
in their own font files,


67
00:04:08.482 --> 00:04:11.785 line:-2
separate from the ones
for the regular upright styles.


68
00:04:11.818 --> 00:04:14.054 line:-1
When a suitable italic style is missing,


69
00:04:14.087 --> 00:04:18.225 line:-2
WebKit generates
an artificial representation for that.


70
00:04:18.258 --> 00:04:21.929 line:-2
It runs an algorithm
over the regular upright font style


71
00:04:21.962 --> 00:04:26.400 line:-2
and skews the individual glyphs
to produce an oblique style.


72
00:04:26.433 --> 00:04:29.036 line:-1
This is called a synthetic oblique.


73
00:04:30.671 --> 00:04:34.942 line:-2
Font designers pay a lot of attention
when crafting italic styles.


74
00:04:34.975 --> 00:04:38.545 line:-2
Often, these aren't slanted versions
of the upright style,


75
00:04:38.579 --> 00:04:40.480 line:-1
but instead they're cursive,


76
00:04:40.514 --> 00:04:44.818 line:-2
specially designed
to convey a particular aesthetic.


77
00:04:44.852 --> 00:04:47.621 line:-2
Something similar happens
for synthetic bold,


78
00:04:47.654 --> 00:04:51.191 line:-2
where the stroke of the glyphs
is made artificially thicker.


79
00:04:51.225 --> 00:04:54.695 line:-2
Keep in mind
that not all fonts support this.


80
00:04:54.728 --> 00:05:00.501 line:-2
Web Inspector now displays a warning
when a synthetic bold or oblique is used.


81
00:05:00.534 --> 00:05:03.837 line:-2
It shows up
next to the synthesized weight or style


82
00:05:03.871 --> 00:05:07.241 line:-2
in the basic properties section
of the Font panel.


83
00:05:07.274 --> 00:05:09.343 line:-1
This warning can be a hint


84
00:05:09.376 --> 00:05:12.546 line:-2
that the expected font file
was not loaded.


85
00:05:12.579 --> 00:05:16.650 line:-2
But sometimes, it may be
that the font file just doesn't support


86
00:05:16.683 --> 00:05:19.219 line:-1
the exact values you asked for.


87
00:05:19.253 --> 00:05:22.389 line:-1
That's where variable fonts can help.


88
00:05:22.422 --> 00:05:24.791 line:-1
What's a variable font?


89
00:05:24.825 --> 00:05:27.494 line:-2
Put simply,
it's a font format that can include,


90
00:05:27.528 --> 00:05:30.898 line:-2
in a single file,
all the information needed to generate


91
00:05:30.931 --> 00:05:33.400 line:-1
multiple style variations for a font,


92
00:05:33.433 --> 00:05:36.803 line:-1
such as weight, width, slant, and others.


93
00:05:38.138 --> 00:05:39.873 line:-1
And for each supported style,


94
00:05:39.907 --> 00:05:42.476 line:-2
variable fonts provide
a spectrum of values


95
00:05:42.509 --> 00:05:46.446 line:-2
compared to just a few discrete values
in static font files.


96
00:05:46.480 --> 00:05:50.717 line:-2
This gives you a lot more flexibility
to choose the exact style


97
00:05:50.751 --> 00:05:53.787 line:-1
that's right for your content.


98
00:05:53.820 --> 00:05:56.523 line:-1
Variable fonts are even more capable.


99
00:05:56.557 --> 00:06:00.794 line:-2
A font designer can make almost
every aspect of a font configurable,


100
00:06:00.827 --> 00:06:04.464 line:-2
from the thickness of the stroke,
the curves of the glyphs,


101
00:06:04.498 --> 00:06:08.335 line:-2
the width of the characters,
and many others.


102
00:06:08.368 --> 00:06:12.372 line:-1
The possibilities really are vast.


103
00:06:12.406 --> 00:06:15.142 line:-2
All aspects of a variable font
that can be configured


104
00:06:15.175 --> 00:06:18.145 line:-1
are expressed as variation axes.


105
00:06:18.178 --> 00:06:20.547 line:-2
To know which are available,
you'd either have to read


106
00:06:20.581 --> 00:06:22.216 line:-1
the font's documentation


107
00:06:22.249 --> 00:06:25.619 line:-2
or use a special tool
that reveals this information.


108
00:06:26.687 --> 00:06:28.589 line:-1
Web Inspector can help here.


109
00:06:28.622 --> 00:06:32.159 line:-2
When you inspect an element
that uses a variable font,


110
00:06:32.192 --> 00:06:37.264 line:-2
the Font panel shows you a list
of the supported variation axes.


111
00:06:37.297 --> 00:06:40.634 line:-1
For each, it shows its axis tag--


112
00:06:40.667 --> 00:06:44.004 line:-1
a four-character identifier--


113
00:06:44.037 --> 00:06:48.075 line:-1
an optional axis label,


114
00:06:48.108 --> 00:06:52.379 line:-1
the supported minimum and maximum values,


115
00:06:52.412 --> 00:06:54.147 line:-1
as well as the current value,


116
00:06:54.181 --> 00:06:57.918 line:-2
or the default value
if one is not specified in CSS.


117
00:06:59.720 --> 00:07:02.523 line:-1
This year, we added interactive controls


118
00:07:02.556 --> 00:07:04.591 line:-1
to edit the values of variation axes


119
00:07:04.625 --> 00:07:07.694 line:-2
and see the results
live on the inspected page.


120
00:07:08.529 --> 00:07:12.933 line:-2
This gives you a great way to tweak
the font styles until they're just right.


121
00:07:12.966 --> 00:07:15.402 line:-1
Let me show you.


122
00:07:15.435 --> 00:07:19.006 line:-2
Here's a web page I'm building
for a travel photography blog.


123
00:07:19.039 --> 00:07:21.375 line:-1
I have the layout just as I want,


124
00:07:21.408 --> 00:07:24.478 line:-2
with a photo gallery
and navigation by labels,


125
00:07:24.511 --> 00:07:27.848 line:-2
but I'm still not sure
about the look of the title.


126
00:07:27.881 --> 00:07:30.884 line:-2
I'll right-click
to inspect the heading element.


127
00:07:34.054 --> 00:07:37.724 line:-2
In the Font panel, I can see
this is using a variable font.


128
00:07:39.293 --> 00:07:43.263 line:-2
I can tell because I have these controls
for the available variation axes


129
00:07:43.297 --> 00:07:45.966 line:-1
that I can play around with.


130
00:07:45.999 --> 00:07:50.938 line:-2
For example,
I can drag the slider for the Weight axis.


131
00:07:50.971 --> 00:07:55.976 line:-2
This immediately changes the font weight
of the title live on the inspected page.


132
00:07:58.946 --> 00:08:02.149 line:-2
Notice how the corresponding
CSS font weight property is written


133
00:08:02.182 --> 00:08:05.185 line:-1
to the Styles panel.


134
00:08:05.219 --> 00:08:08.322 line:-2
A static font would have
just a few font faces for weight


135
00:08:08.355 --> 00:08:10.057 line:-1
in increments of 100.


136
00:08:10.090 --> 00:08:12.926 line:-2
But with a variable font,
I can chose any value


137
00:08:12.960 --> 00:08:15.529 line:-1
within the range of the variation axis.


138
00:08:15.562 --> 00:08:18.265 line:-2
Let's also try the variation axis
for Width


139
00:08:18.298 --> 00:08:21.301 line:-1
to see how this looks wider or narrower.


140
00:08:24.037 --> 00:08:27.841 line:-2
I can also type
in the axis value input field


141
00:08:27.875 --> 00:08:30.711 line:-2
or I can hold the ArrowUp
or ArrowDown keys


142
00:08:30.744 --> 00:08:33.413 line:-1
to change the value in precise increments.


143
00:08:35.415 --> 00:08:38.418 line:-1
I like this slightly condensed version.


144
00:08:38.452 --> 00:08:43.123 line:-2
I'd like it a bit bolder,
but I want it to keep this width.


145
00:08:43.156 --> 00:08:46.527 line:-2
This variable font also provides
a custom variation axis


146
00:08:46.560 --> 00:08:48.762 line:-1
to change the Grade of the font.


147
00:08:48.795 --> 00:08:50.831 line:-1
When I drag the slider for this,


148
00:08:50.864 --> 00:08:53.700 line:-2
notice that the individual characters
get thicker in-place


149
00:08:53.734 --> 00:08:57.504 line:-2
without shifting position like they did
when I changed the Weight axis.


150
00:08:59.873 --> 00:09:02.042 line:-1
This looks nice.


151
00:09:02.075 --> 00:09:04.344 line:-2
To integrate these changes
back into my project,


152
00:09:04.378 --> 00:09:08.115 line:-2
I can copy the new CSS properties
from the Styles panel


153
00:09:08.148 --> 00:09:10.651 line:-1
or from the Changes panel.


154
00:09:13.086 --> 00:09:16.456 line:-2
We've seen how to inspect typography
and how to tweak font styles


155
00:09:16.490 --> 00:09:18.091 line:-1
with variable fonts.


156
00:09:18.125 --> 00:09:21.261 line:-2
Now, let's move on
to another new feature in Web Inspector


157
00:09:21.295 --> 00:09:23.830 line:-2
that allows you to
emulateÂ user preferences


158
00:09:23.864 --> 00:09:26.166 line:-2
so you can make sure
the content you're building


159
00:09:26.200 --> 00:09:28.635 line:-1
adapts to user needs.


160
00:09:28.669 --> 00:09:31.872 line:-2
All Apple products offer
a variety of settings that allow people


161
00:09:31.905 --> 00:09:36.243 line:-2
to configure their devices to adapt
to their needs and preferences,


162
00:09:36.276 --> 00:09:40.247 line:-2
like the Accessibility settings on macOS
which control things


163
00:09:40.280 --> 00:09:45.819 line:-2
like the built-in screen reader,
VoiceOver, or Display preferences,


164
00:09:45.853 --> 00:09:49.156 line:-2
which control reduced motion,
increased color contrast,


165
00:09:49.189 --> 00:09:52.025 line:-1
color filters, and many more.


166
00:09:52.059 --> 00:09:56.230 line:-2
One of the most popular things people do
on their devices is to browse the web.


167
00:09:56.263 --> 00:09:58.866 line:-2
So it makes sense
to build websites and web apps


168
00:09:58.899 --> 00:10:01.735 line:-1
that strive to welcome everyone.


169
00:10:01.768 --> 00:10:04.505 line:-2
To do that,
you sometimes need to experience the web


170
00:10:04.538 --> 00:10:08.408 line:-2
the same way other people do
when they set user preferences.


171
00:10:09.409 --> 00:10:13.113 line:-2
To test your website with, say,
the preference for reduced motion,


172
00:10:13.146 --> 00:10:17.684 line:-2
you could go to the Accessibility Settings
on macOS and set it there.


173
00:10:17.718 --> 00:10:23.023 line:-2
But that will influence the entire system,
not just Safari and your website.


174
00:10:23.056 --> 00:10:26.527 line:-2
What you often want is to set it
just for the page you're testing.


175
00:10:28.195 --> 00:10:30.697 line:-2
To help you with that,
we've introduced a new tool


176
00:10:30.731 --> 00:10:35.135 line:-2
in Web Inspector
to emulate user preferences.


177
00:10:35.169 --> 00:10:37.070 line:-1
Click the new icon in the Elements tab


178
00:10:37.104 --> 00:10:40.407 line:-2
to reveal the User Preference Overrides
popover.


179
00:10:40.440 --> 00:10:44.344 line:-2
Here, you'll find a set of toggles
to override user preferences


180
00:10:44.378 --> 00:10:48.682 line:-2
just for the inspected page
while Web Inspector is open.


181
00:10:48.715 --> 00:10:52.186 line:-2
These preferences map
to CSS media features


182
00:10:52.219 --> 00:10:57.524 line:-2
which you can use to adapt the style
and behavior of your web page.


183
00:10:57.558 --> 00:11:00.027 line:-2
For example,
the preference for color scheme


184
00:11:00.060 --> 00:11:04.398 line:-2
maps to the prefers-color-scheme
media feature in CSS.


185
00:11:04.431 --> 00:11:06.567 line:-1
Here's how to use it:


186
00:11:06.600 --> 00:11:11.171 line:-2
you can set an element's styles
for the default light color scheme.


187
00:11:11.205 --> 00:11:14.141 line:-2
Then, use the prefers-color-scheme
media feature


188
00:11:14.174 --> 00:11:16.710 line:-2
to check
if a dark color scheme is preferred


189
00:11:16.743 --> 00:11:19.880 line:-1
and update the styles.


190
00:11:19.913 --> 00:11:24.451 line:-2
Check how the page adapts by using
the User Preference Overrides popover.


191
00:11:24.484 --> 00:11:29.423 line:-2
In the Appearance section, override
the color scheme preference to Dark.


192
00:11:29.456 --> 00:11:34.461 line:-2
The icon changes color
to indicate an override is applied.


193
00:11:34.494 --> 00:11:37.231 line:-2
The styles for the dark color scheme
will be applied


194
00:11:37.264 --> 00:11:41.802 line:-2
while the override is active
and Web Inspector is open.


195
00:11:41.835 --> 00:11:45.572 line:-2
This control for color scheme
used to be a standalone button.


196
00:11:45.606 --> 00:11:50.177 line:-2
It now joins the other controls
for preference overrides in the popover.


197
00:11:51.645 --> 00:11:54.548 line:-2
Next, I'm going to show you
how to override the preference


198
00:11:54.581 --> 00:11:56.383 line:-1
for reduced motion.


199
00:11:56.416 --> 00:12:00.220 line:-2
This next section displays
an animation with a lot of motion.


200
00:12:00.254 --> 00:12:02.890 line:-2
If you are sensitive to this,
you may want to skip


201
00:12:02.923 --> 00:12:05.526 line:-1
the next three minutes of this video.


202
00:12:05.559 --> 00:12:08.562 line:-1
Back on my page, these animations that run


203
00:12:08.595 --> 00:12:13.066 line:-2
when I click on a photo to enlarge it
are perhaps a bit too much.


204
00:12:14.334 --> 00:12:18.172 line:-2
Some people can get disoriented by
animations with quick and sudden motion,


205
00:12:18.205 --> 00:12:20.974 line:-2
particularly when it happens
on the z-axis.


206
00:12:21.008 --> 00:12:25.179 line:-2
It can cause discomfort,
like nausea or headaches.


207
00:12:25.212 --> 00:12:28.982 line:-2
This is definitely not
a welcoming experience for them.


208
00:12:29.016 --> 00:12:32.352 line:-2
People can set the preference
for reduced motion on their devices


209
00:12:32.386 --> 00:12:35.656 line:-2
to signal that they want
websites and web apps to adapt.


210
00:12:35.689 --> 00:12:38.292 line:-1
Us web developers should respect that.


211
00:12:38.325 --> 00:12:43.430 line:-2
This is where the prefers-reduced-motion
CSS media feature is useful.


212
00:12:43.463 --> 00:12:46.967 line:-2
If the animation is just for decoration,
you can remove it.


213
00:12:47.000 --> 00:12:52.506 line:-2
But remember, some animations are useful
to convey meaning in an interface.


214
00:12:52.539 --> 00:12:55.742 line:-1
Removing them can affect usability.


215
00:12:55.776 --> 00:12:59.246 line:-2
A slower and more subtle fade animation
may still work well


216
00:12:59.279 --> 00:13:03.083 line:-2
to communicate change
and also satisfy people's needs.


217
00:13:03.116 --> 00:13:05.886 line:-1
Let's try that change on my web page.


218
00:13:05.919 --> 00:13:09.489 line:-1
First, I'll inspect the photo


219
00:13:09,523 --> 00:13:13,393
and select the figure element
in the Elements tab of Web Inspector.


220
00:13:14,628 --> 00:13:20,167
This reveals all its matching CSS rules
in the Styles panel.


221
00:13:20,200 --> 00:13:24,905
Here's the CSS property that sets
the animation with a lot of motion.


222
00:13:24,938 --> 00:13:27,708
It runs for everyone now.


223
00:13:27,741 --> 00:13:31,044
Next, I'll click on the source code
location of this CSS rule


224
00:13:31,078 --> 00:13:33,747
to jump to where it's defined
in the stylesheet.


225
00:13:36,483 --> 00:13:40,354
This opens the Sources panel
and puts me right next to that CSS Rule


226
00:13:40,387 --> 00:13:43,924
which has the animation I want to change.


227
00:13:43,957 --> 00:13:48,529
I'll uncomment this block of code
I prepared earlier.


228
00:13:48,562 --> 00:13:52,799
It's guarded by a prefers-reduced-motion
CSS media feature.


229
00:13:52,833 --> 00:13:57,938
Here, I change the animation to a fade,
instead of the one that zooms the photo,


230
00:13:57,971 --> 00:14:01,542
and I also increase the animation duration
so it doesn't feel as sudden.


231
00:14:02,809 --> 00:14:06,813
Now I'll click again on an image
on the page to see how that looks.


232
00:14:08.649 --> 00:14:12.152 line:-1
Oh! It still runs the same animation.


233
00:14:12.186 --> 00:14:14.821 line:-2
That's happening
because I defined the new animation


234
00:14:14.855 --> 00:14:18.292 line:-2
guarded by the prefers-reduced-motion
media feature.


235
00:14:18.325 --> 00:14:22.362 line:-2
But the page still respects the default
system value for this preference,


236
00:14:22.396 --> 00:14:23.931 line:-1
which is set to Off.


237
00:14:23,964 --> 00:14:26,233
Let's adjust that.


238
00:14:26,266 --> 00:14:28,569
I'll click back to the Elements tab.


239
00:14:28,602 --> 00:14:31,939
Here, I'll open
the User Preference Overrides popover.


240
00:14:34,341 --> 00:14:37,444
In the Accessibility section,
I'll open the popup menu


241
00:14:37,477 --> 00:14:40,447
to override the user preference
for "Reduce motion."


242
00:14:41,882 --> 00:14:46,153
I'll change it from the default value
on my system and set it to On.


243
00:14:48.956 --> 00:14:51.658 line:-2
Now, I'll click again
on a photo on my page.


244
00:14:53.126 --> 00:14:57.197 line:-2
And look.
The photo now slowly fades into view.


245
00:14:57.231 --> 00:14:59.700 line:-1
No more disorienting movement.


246
00:14:59.733 --> 00:15:04.805 line:-2
This is a better experience
for those who prefer reduced motion.


247
00:15:04.838 --> 00:15:09.543 line:-2
I'll remember to integrate these changes
back into my project.


248
00:15:09.576 --> 00:15:13.113 line:-2
The last item
in the User Preference Overrides popover,


249
00:15:13.146 --> 00:15:18.852 line:-2
"Increase contrast," maps to the
prefers-contrast CSS media feature.


250
00:15:18.886 --> 00:15:20.787 line:-1
Ideally, you want to build content


251
00:15:20.821 --> 00:15:24.157 line:-2
that has a high level of color contrast
for everyone.


252
00:15:24.191 --> 00:15:27.494 line:-2
But if your design system constrains you,
use this media feature


253
00:15:27.528 --> 00:15:32.566 line:-2
to adapt your styles for people
who benefit from increased contrast.


254
00:15:32.599 --> 00:15:36.937 line:-2
Then, check that the styles
on the inspected page adapt accordingly.


255
00:15:36.970 --> 00:15:40.974 line:-2
Override the preference
for "Increase contrast" to On.


256
00:15:41.008 --> 00:15:43.577 line:-2
We hope you use these features
to build content


257
00:15:43.610 --> 00:15:46.280 line:-1
that even more people can enjoy using.


258
00:15:46.313 --> 00:15:49.049 line:-2
Next, I want to tell you
about the new element badges


259
00:15:49.082 --> 00:15:52.219 line:-1
in the Elements tab of Web Inspector.


260
00:15:52.252 --> 00:15:56.423 line:-2
In the node tree view of the Elements tab,
you can already see badges


261
00:15:56.456 --> 00:16:00.894 line:-2
next to elements that act
as CSS Flex or CSS Grid containers.


262
00:16:00.928 --> 00:16:04.565 line:-2
Element badges provide a quick way
to identify at a glance


263
00:16:04.598 --> 00:16:06.667 line:-1
nodes of particular interest.


264
00:16:06.700 --> 00:16:11.905 line:-2
In this case, nodes that create
a CSS Grid or Flex layout context.


265
00:16:12.739 --> 00:16:15.442 line:-2
You can click on the grid
and flex element badges


266
00:16:15.475 --> 00:16:19.313 line:-2
to toggle the specialized page overlay
for that node.


267
00:16:19.346 --> 00:16:24.117 line:-2
The highlight color of the badge
matches the color of the page overlay.


268
00:16:24.151 --> 00:16:28.989 line:-2
The CSS Grid and Flexbox page overlays
show guides that reveal the lines,


269
00:16:29.022 --> 00:16:33.093 line:-2
gaps, and the available space
which determine the layout.


270
00:16:33,126 --> 00:16:36,530
To learn more about how to debug
CSS Grid and Flexbox layout


271
00:16:36,563 --> 00:16:41,802
with page overlays,
watch these sessions from previous years.


272
00:16:41.835 --> 00:16:46.607 line:-2
One of the trickiest CSS layout issues
to debug is unwanted scroll,


273
00:16:46.640 --> 00:16:48.775 line:-1
like a container that scrolls horizontally


274
00:16:48.809 --> 00:16:53.280 line:-2
because the content inside it
doesn't fit the available width.


275
00:16:53.313 --> 00:16:56.517 line:-2
This type of issue can lurk undetected
for a long time


276
00:16:56.550 --> 00:17:00.320 line:-2
when scroll bars are not visible
by default.


277
00:17:00.354 --> 00:17:04.424 line:-2
To help you identify unwanted scroll,
we've added a new element badge


278
00:17:04.458 --> 00:17:06.860 line:-1
that shows up next to scroll containers.


279
00:17:06.894 --> 00:17:09.863 line:-2
It provides a quick visual hint
in the node tree


280
00:17:09.897 --> 00:17:12.266 line:-2
when an element's content
overflows its bounds


281
00:17:12.299 --> 00:17:14.601 line:-1
and a scroll bar is applied.


282
00:17:14.635 --> 00:17:18.338 line:-2
Let's look at a common example
of unwanted scroll and how to fix it.


283
00:17:18.372 --> 00:17:22.209 line:-2
Back on my page, I see these labels
at the top of the photo gallery


284
00:17:22.242 --> 00:17:26.580 line:-2
appear be nicely laid out
to use all available horizontal space.


285
00:17:26.613 --> 00:17:28.215 line:-1
But when I try to swipe,


286
00:17:28.248 --> 00:17:32.286 line:-2
I notice there's a short horizontal scroll
in this container.


287
00:17:32.319 --> 00:17:35.389 line:-1
This is something I don't want.


288
00:17:35.422 --> 00:17:39.660 line:-1
And the last label is slightly cut off.


289
00:17:39.693 --> 00:17:43.630 line:-2
It gets even worse
when I resize the window.


290
00:17:43.664 --> 00:17:47.100 line:-2
In the node tree in the Elements tab,
I notice there's a "scroll" badge


291
00:17:47.134 --> 00:17:49.169 line:-1
next to the container for the labels.


292
00:17:49.203 --> 00:17:52.005 line:-2
I'll click this element to reveal
its matching CSS Rules


293
00:17:52.039 --> 00:17:54.975 line:-1
in the Styles panel.


294
00:17:55.008 --> 00:17:58.445 line:-1
This Flexbox container looks right.


295
00:17:58.478 --> 00:18:01.481 line:-2
How about its flex items,
the labels themselves?


296
00:18:05.452 --> 00:18:10.924 line:-2
This overly precise value for
the minimum-width property looks strange.


297
00:18:10.958 --> 00:18:14.628 line:-2
It was probably my naÃ¯ve attempt
to tell the browser exactly what to do


298
00:18:14.661 --> 00:18:18.899 line:-2
instead of telling the browser what I want
and letting it do the math.


299
00:18:20.167 --> 00:18:24.571 line:-2
To fix this, I'll comment out
this minimum-width declaration.


300
00:18:24.605 --> 00:18:28.609 line:-2
Now, each label takes up
as much space as it needs.


301
00:18:28.642 --> 00:18:31.945 line:-1
But there's a lot of unused space left.


302
00:18:31.979 --> 00:18:36.083 line:-2
To fix this, I'll add a flex property
with a value of 1.


303
00:18:37.651 --> 00:18:40.754 line:-2
This distributes the unused space
to each of the labels


304
00:18:40.787 --> 00:18:42.756 line:-1
so they fill up the container.


305
00:18:42.789 --> 00:18:46.026 line:-2
And there's no more
unwanted horizontal scroll,


306
00:18:46.059 --> 00:18:48.428 line:-2
as confirmed
by the now missing "Scroll" badge


307
00:18:48.462 --> 00:18:51.765 line:-1
next to the container in the node tree.


308
00:18:51.798 --> 00:18:55.135 line:-2
Next, I'd like to tell you
about the new Event badge.


309
00:18:55.169 --> 00:18:58.472 line:-2
It appears next to elements
which have JavaScript event listeners


310
00:18:58.505 --> 00:19:00.374 line:-1
attached to them.


311
00:19:00.407 --> 00:19:04.478 line:-2
It works both for built-in events,
like pointer or UI events,


312
00:19:04.511 --> 00:19:09.116 line:-2
as well as custom JavaScript events
that you dispatch in your code.


313
00:19:09.149 --> 00:19:13.453 line:-2
Look for elements with the Event badge
next to them in the node tree


314
00:19:13.487 --> 00:19:15.522 line:-1
and click on the badge to show a popover


315
00:19:15.556 --> 00:19:19.226 line:-2
with all the event listeners
attached to that element.


316
00:19:19.259 --> 00:19:22.829 line:-2
Here, you can get an overview
for each event listener:


317
00:19:22.863 --> 00:19:24.531 line:-1
the event type,


318
00:19:24.565 --> 00:19:27.467 line:-2
the name of the JavaScript function
which handles the event,


319
00:19:27.501 --> 00:19:31.772 line:-2
and the location in the source code
where that function is defined.


320
00:19:31.805 --> 00:19:34.708 line:-2
The various configuration options
for the event listener,


321
00:19:34.741 --> 00:19:36.543 line:-2
like whether it bubbles
through the DOM tree


322
00:19:36.577 --> 00:19:40.581 line:-2
or if it's automatically removed
after running just once.


323
00:19:40.614 --> 00:19:43.250 line:-2
Then, there's the option
to disable the event listener


324
00:19:43.283 --> 00:19:46.620 line:-2
so you can debug your code
without it running.


325
00:19:46.653 --> 00:19:51.325 line:-2
Or if you want to debug it step-by-step,
you can set an event breakpoint for it.


326
00:19:51.358 --> 00:19:56.663 line:-2
This will pause JavaScript execution
next time the handler is invoked.


327
00:19:56.697 --> 00:19:59.766 line:-2
This is a good time to talk
about the improvements we've made


328
00:19:59.800 --> 00:20:02.536 line:-2
to the debugging experience
with breakpoints.


329
00:20:02.569 --> 00:20:05.239 line:-2
When debugging JavaScript,
you may be used to adding


330
00:20:05.272 --> 00:20:07.941 line:-1
console.log() statements to your code.


331
00:20:07.975 --> 00:20:11.178 line:-2
Breakpoints, on the other hand,
are a powerful way to debug


332
00:20:11.211 --> 00:20:13.280 line:-1
by pausing and stepping through JavaScript


333
00:20:13.313 --> 00:20:16.049 line:-2
without having to make changes
to your source.


334
00:20:17.251 --> 00:20:20.687 line:-2
If you haven't used breakpoints before,
the easiest way to start


335
00:20:20.721 --> 00:20:23.423 line:-2
is by clicking on a line number
on a script file


336
00:20:23.457 --> 00:20:26.293 line:-1
in the gutter of the Sources tab.


337
00:20:26.326 --> 00:20:30.397 line:-2
This sets a JavaScript breakpoint
on that line of the script.


338
00:20:30.430 --> 00:20:32.299 line:-1
Next time that line is about to run,


339
00:20:32.332 --> 00:20:37.604 line:-2
Web Inspector will instead pause
JavaScript execution at that point.


340
00:20:37.638 --> 00:20:41.041 line:-2
While paused,
you can observe the call stack,


341
00:20:41.074 --> 00:20:44.945 line:-2
inspect the state
of objects and variables in scope,


342
00:20:44,978 --> 00:20:47,648
and even make changes to them
through the Console.


343
00:20:49.616 --> 00:20:53.453 line:-2
You can resume JavaScript execution,
or you can step through the code


344
00:20:53.487 --> 00:20:58.225 line:-2
one expression at a time,
using the stepping controls at the top.


345
00:20:58.258 --> 00:21:00.727 line:-2
You can configure a breakpoint
by right clicking on it


346
00:21:00.761 --> 00:21:03.530 line:-1
and selecting Edit Breakpoint.


347
00:21:03.564 --> 00:21:07.768 line:-2
Here, there are many options you can set
to control when the breakpoint is hit


348
00:21:07.801 --> 00:21:09.570 line:-1
and even run actions when it does.


349
00:21:11.271 --> 00:21:13.340 line:-1
Let's look at a few of them.


350
00:21:13.373 --> 00:21:17.578 line:-2
You can control when a breakpoint is hit
by setting a condition for it.


351
00:21:17.611 --> 00:21:20.280 line:-2
This evaluates as JavaScript
in the same scope


352
00:21:20.314 --> 00:21:22.182 line:-1
where your breakpoint is set.


353
00:21:22.216 --> 00:21:26.019 line:-2
When the condition is true,
the breakpoint will hit.


354
00:21:26.053 --> 00:21:30.591 line:-2
Sometimes, you may find it easier to skip
the breakpoint for a number of times.


355
00:21:30.624 --> 00:21:32.426 line:-1
For example, while inside a loop


356
00:21:32.459 --> 00:21:36.263 line:-2
where you're not interested in stopping
for the first few iterations.


357
00:21:36.296 --> 00:21:40.834 line:-2
Here, you can set the number of times
to ignore the breakpoint.


358
00:21:40.868 --> 00:21:43.604 line:-2
You can also run actions
when a breakpoint is hit,


359
00:21:43.637 --> 00:21:46.206 line:-1
like evaluating a piece of JavaScript.


360
00:21:46.240 --> 00:21:49.676 line:-2
This runs in the same scope
where the breakpoint is set.


361
00:21:49.710 --> 00:21:54.381 line:-2
You can use this to modify the state
of your script before continuing.


362
00:21:54.414 --> 00:21:58.018 line:-2
You can also log messages to the console
with expressions that have access


363
00:21:58.051 --> 00:22:02.556 line:-2
to the state of variables and objects
at the moment when JavaScript was paused.


364
00:22:02.589 --> 00:22:06.326 line:-2
This is similar to adding
a console.log() statement to your code,


365
00:22:06.360 --> 00:22:09.930 line:-1
but without having to modify your source.


366
00:22:09,963 --> 00:22:12,666
Instead of logging variables
and objects to the console,


367
00:22:12,699 --> 00:22:15,536
you can also use
the Probe Expression action.


368
00:22:15,569 --> 00:22:18,472
This allows you to inspect
the state of the given expression


369
00:22:18,505 --> 00:22:22,409
in the details sidebar panel
of the Sources tab.


370
00:22:22,442 --> 00:22:24,778
Of course, these actions are very useful,


371
00:22:24,811 --> 00:22:28,182
but sometimes you just want to run them
without actually stopping


372
00:22:28,215 --> 00:22:31,418
at the breakpoint
and having to resume manually.


373
00:22:31,451 --> 00:22:34,788
In those cases,
use the option to automatically continue


374
00:22:34,821 --> 00:22:37,191
after evaluating expressions.


375
00:22:37,224 --> 00:22:42,496
This option makes the Log messages action
behave like a console.log() statement:


376
00:22:42,529 --> 00:22:44,998
it logs, but it doesn't pause.


377
00:22:45,032 --> 00:22:48,635
Likewise, you can evaluate
some JavaScript at the breakpoint location


378
00:22:48,669 --> 00:22:53,373
and continue as if it were
already in your source code.


379
00:22:53.407 --> 00:22:56.677 line:-2
There are many other types
of breakpoints you can set.


380
00:22:56.710 --> 00:22:58.812 line:-2
Click the Plus button
in the Breakpoints section


381
00:22:58.846 --> 00:23:01.548 line:-2
to show a list
of all the breakpoints you can set,


382
00:23:01.582 --> 00:23:04.518 line:-1
such as URL Breakpoints that trigger


383
00:23:04.551 --> 00:23:06.687 line:-1
when a network request is about to be made


384
00:23:06.720 --> 00:23:11.258 line:-2
via methods like fetch()
or XMLHTTPRequest,


385
00:23:11.291 --> 00:23:16.296 line:-2
event breakpoints like the one we saw
earlier from the Event badge for "click,"


386
00:23:16.330 --> 00:23:19.766 line:-2
breakpoints that trigger when micro tasks,
animation frames,


387
00:23:19.800 --> 00:23:22.703 line:-1
timeouts, or intervals are handled,


388
00:23:22.736 --> 00:23:25.806 line:-2
and new this year,
we've added Symbolic breakpoints


389
00:23:25.839 --> 00:23:29.810 line:-2
to pause before
a function is about to be invoked.


390
00:23:29.843 --> 00:23:32.412 line:-1
Symbolic breakpoints are helpful


391
00:23:32.446 --> 00:23:35.415 line:-2
to debug calls
to built-in JavaScript functions


392
00:23:35.449 --> 00:23:38.318 line:-2
or to pause in multiple functions
with the same name.


393
00:23:38.352 --> 00:23:43.690 line:-2
When adding a Symbolic breakpoint, you can
be as specific or as generic as you want.


394
00:23:43.724 --> 00:23:48.061 line:-2
Either match the function name exactly,
including case sensitivity,


395
00:23:48.095 --> 00:23:51.765 line:-2
or use a regular expression
if you want to break at multiple functions


396
00:23:51.798 --> 00:23:53.400 line:-1
that match the pattern,


397
00:23:53.433 --> 00:23:56.904 line:-2
or if you don't quite remember
the complete function name.


398
00:23:56.937 --> 00:24:02.276 line:-2
Let's see how Symbolic breakpoints
help debug a problem I have in my code.


399
00:24:02.309 --> 00:24:05.379 line:-2
Each photo on my page has
a share button that lets me share


400
00:24:05.412 --> 00:24:07.414 line:-1
a link to it with friends.


401
00:24:07.447 --> 00:24:10.017 line:-2
But I've received a bug report
that the URL they get


402
00:24:10.050 --> 00:24:12.386 line:-1
doesn't point to the photo page.


403
00:24:12.419 --> 00:24:15.055 line:-1
Let's investigate.


404
00:24:15.088 --> 00:24:19.826 line:-2
It's been a while since I worked on this,
and I don't quite remember how it's built.


405
00:24:19.860 --> 00:24:21.828 line:-1
There are multiple ways to debug this,


406
00:24:21.862 --> 00:24:24.431 line:-2
but I'm going to try
a Symbolic breakpoint.


407
00:24:24,464 --> 00:24:28,836
I'll switch to the Sources tab


408
00:24:28,869 --> 00:24:31,572
and click to add
a new Symbolic breakpoint.


409
00:24:33,373 --> 00:24:36,343
Whatever code runs on my end,
it has to eventually call


410
00:24:36,376 --> 00:24:40,914
the navigator.share() browser API
which shows the system popover.


411
00:24:40,948 --> 00:24:45,552
Let's set a breakpoint
before the share() function is invoked.


412
00:24:45,586 --> 00:24:49,790
I'll click away
to set my Symbolic breakpoint.


413
00:24:49,823 --> 00:24:54,361
And now I'll click the share button
on a photo on my page.


414
00:24:54,394 --> 00:25:00,033
And look, Web Inspector has paused
before navigator.share() is invoked.


415
00:25:00,067 --> 00:25:04,638
I'll hover over the data object
passed to this method.


416
00:25:04,671 --> 00:25:07,841
Here, I can see
the contents of the object.


417
00:25:07,875 --> 00:25:12,646
It seems the value for the URL key
that gets shared is indeed wrong.


418
00:25:12,679 --> 00:25:15,782
Where does this come from?


419
00:25:15,816 --> 00:25:17,951
In the Call Stack section
of the Sources tab,


420
00:25:17,985 --> 00:25:21,555
I can see the chain of functions
that were called to get to this point.


421
00:25:21,588 --> 00:25:24,725
Looks like the click event handler
was called before.


422
00:25:24,758 --> 00:25:29,463
I'll select its entry in the Call Stack
to jump to that function.


423
00:25:29,496 --> 00:25:32,533
Here, I can see the code
that builds the data object


424
00:25:32,566 --> 00:25:35,068
which gets passed
to the sharePhoto() function.


425
00:25:35,102 --> 00:25:40,674
And by the look of the code comment here,
I meant to implement this, but I forgot.


426
00:25:40,707 --> 00:25:42,342
Let's fix that now.


427
00:25:42,376 --> 00:25:46,113
I'll click to set a breakpoint
on this line.


428
00:25:46,146 --> 00:25:49,316
Then, I'll right-click
and select Edit Breakpoint.


429
00:25:51,752 --> 00:25:53,453
I don't need to set a condition,


430
00:25:53,487 --> 00:25:57,925
but I'll configure it
to run a JavaScript action.


431
00:25:57,958 --> 00:26:00,961
Inside the expression field,
I'll modify the data object


432
00:26:00,994 --> 00:26:05,332
to fix the url property before it gets
passed along to the share function.


433
00:26:09,036 --> 00:26:12,206
I don't need this breakpoint to stop here,
so I'll click the option


434
00:26:12,239 --> 00:26:17,411
to automatically continue
after evaluating this expression.


435
00:26:17,444 --> 00:26:22,516
Next, I'll click the button
to resume JavaScript execution.


436
00:26:22,549 --> 00:26:24,618
Now, when I click the share button,


437
00:26:24,651 --> 00:26:27,955
the Symbolic breakpoint I set earlier
is reached again.


438
00:26:27,988 --> 00:26:32,125
But now the data object it gets
has the right URL value.


439
00:26:32,159 --> 00:26:34,494
The JavaScript action
from the other breakpoint


440
00:26:34,528 --> 00:26:39,166
modified the value and sent it along
to this function without pausing.


441
00:26:39,199 --> 00:26:43,871
This confirms that the change I made there
does indeed fix the issue.


442
00:26:43.904 --> 00:26:47.241 line:-2
This was just one example
of the many great debugging workflows


443
00:26:47.274 --> 00:26:48.742 line:-1
enabled by breakpoints.


444
00:26:48.775 --> 00:26:50.944 line:-2
There are so many more,
and I encourage you


445
00:26:50.978 --> 00:26:54.414 line:-1
to try them out in your projects.


446
00:26:54.448 --> 00:26:58.151 line:-2
We've covered a lot in this session,
from the new typography inspection tools,


447
00:26:58.185 --> 00:27:01.822 line:-2
to overriding user preferences,
using the new element badges,


448
00:27:01.855 --> 00:27:04.892 line:-1
and we looked at breakpoint enhancements.


449
00:27:04.925 --> 00:27:07.294 line:-1
And that's just scratching the surface.


450
00:27:07.327 --> 00:27:09.630 line:-2
There are many other new features
and improvements


451
00:27:09.663 --> 00:27:11.031 line:-1
in Web Inspector this year


452
00:27:11.064 --> 00:27:13.800 line:-2
that we didn't have time to cover
in this session.


453
00:27:14,635 --> 00:27:17,738
And there's so much more
that Web Inspector can do.


454
00:27:17,771 --> 00:27:21,642
If you want to learn more about these
and the many other features you can use,


455
00:27:21,675 --> 00:27:26,847
go to webkit.org to find
in-depth blog posts and documentation.


456
00:27:26,880 --> 00:27:28,882
We'd also like to hear from you.


457
00:27:28,916 --> 00:27:31,185
If you encounter an issue or have ideas


458
00:27:31,218 --> 00:27:34,121
for how we can improve Web Inspector,
please let us know


459
00:27:34,154 --> 00:27:39,660
by filing an issue on WebKit's bug tracker
for the Inspector product.


460
00:27:39,693 --> 00:27:43,564
I'd also like to encourage you
to download Safari Technology Preview.


461
00:27:43,597 --> 00:27:46,700
It is released every few weeks
and contains the latest tools


462
00:27:46,733 --> 00:27:50,637
and technology in WebKit,
as well as bug fixes and improvements,


463
00:27:50,671 --> 00:27:53,407
before these reach
the next version of Safari.


464
00:27:54,341 --> 00:27:57,411
Before I go,
if you want to learn more about what's new


465
00:27:57,444 --> 00:28:01,181
for developers in Safari this year,
check out these great sessions:


466
00:28:01,215 --> 00:28:05,686
"Rediscover Safari developer features"
and "What's new in CSS."


467
00:28:05.719 --> 00:28:08.088 line:-1
Thanks for watching.

