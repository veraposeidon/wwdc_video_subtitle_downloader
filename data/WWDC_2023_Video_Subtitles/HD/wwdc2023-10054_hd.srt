2
00:00:00,334 --> 00:00:06,340 line:-1
♪ ♪


3
00:00:10,010 --> 00:00:12,613 line:-1
Aasim: Hello, I'm Aasim Kandrikar,


4
00:00:12.646 --> 00:00:15.048 line:-2 align:center
and later,
I'll be joined by Raleigh Ledet.


5
00:00:15.082 --> 00:00:17.618 line:-1 align:center
We are both Engineers on the AppKit team.


6
00:00:17.651 --> 00:00:22.422 line:-2 align:center
In this video, we are going to talk about
"What's New in AppKit" in macOS Sonoma.


7
00:00:23.156 --> 00:00:25.325 line:-1 align:center
We'll be covering a broad range of topics,


8
00:00:25.359 --> 00:00:30.898 line:-2 align:center
starting with new features
and API enhancements to AppKit Controls,


9
00:00:30.931 --> 00:00:36.303 line:-2 align:center
improvements to menus powered
by a brand-new implementation,


10
00:00:36,336 --> 00:00:41,842 line:-2
changes to how app activation
works on macOS,


11
00:00:41,875 --> 00:00:47,881 line:-2
graphics refinements
and new features for images and symbols,


12
00:00:47,915 --> 00:00:51,018 line:-2
a new text input experience
and improvements to text layout


13
00:00:51.051 --> 00:00:54.421 line:-1 align:center
in non-English languages,


14
00:00:54.454 --> 00:00:57.824 line:-2 align:center
and improvements
to working in Swift and SwiftUI.


15
00:01:00.127 --> 00:01:03.063 line:-2 align:center
macOS Sonoma includes
some exciting new features


16
00:01:03,096 --> 00:01:06,533 line:-1
and API refinements to AppKit controls.


17
00:01:06,567 --> 00:01:11,205 line:-2
NSTableView and NSOutlineView provide
a lot of functionality out of the box,


18
00:01:11.238 --> 00:01:15.475 line:-2 align:center
making it a critical element
in designing great Mac apps using AppKit.


19
00:01:16,476 --> 00:01:21,782 line:-2
In macOS Sonoma, there is new API
to present column customization menus.


20
00:01:21.815 --> 00:01:26.720 line:-2 align:center
The menu allows users to toggle
visibility of columns in your table.


21
00:01:26.753 --> 00:01:29.923 line:-2 align:center
Previously, this would have required
a custom implementation


22
00:01:29,957 --> 00:01:32,326 line:-1
to create and present this menu,


23
00:01:32,359 --> 00:01:36,530 line:-2
but now you can add this
in as little as three lines of code.


24
00:01:36,563 --> 00:01:41,001 line:-2
Adopt the new delegate method
tableView userCanChangeVisibilityOf.


25
00:01:41.034 --> 00:01:45.606 line:-2 align:center
Specify which columns the user can hide,
and AppKit will handle the rest,


26
00:01:45.639 --> 00:01:50.511 line:-2 align:center
including localizing the menu and
restoring hidden column state on relaunch.


27
00:01:52,479 --> 00:01:57,150 line:-2
The Progress type from Foundation
represents work your application performs.


28
00:01:57,184 --> 00:02:01,088 line:-2
You may be using this in your apps
to represent a download in progress


29
00:02:01,121 --> 00:02:03,824 line:-1
or images that are being processed.


30
00:02:03,857 --> 00:02:06,827 line:-2
In macOS Sonoma,
you can now use the Progress type


31
00:02:06.860 --> 00:02:10.097 line:-2 align:center
from Foundation
with NSProgressIndicator.


32
00:02:10,130 --> 00:02:13,534 line:-2
Assign the progress
to the new observedProgress property


33
00:02:13,567 --> 00:02:16,803 line:-2
and progress indicator
will automatically update its value


34
00:02:16.837 --> 00:02:20.541 line:-2 align:center
as the progress changes,
even on background threads.


35
00:02:21,675 --> 00:02:24,912 line:-2
The Button bezel style API
has been updated,


36
00:02:24.945 --> 00:02:28.916 line:-2 align:center
starting with a brand-new bezel style,
automatic.


37
00:02:28,949 --> 00:02:32,152 line:-2
This bezel style will adapt
to the most appropriate style


38
00:02:32,186 --> 00:02:37,391 line:-2
depending on the contents of the button
and where it is in the view hierarchy.


39
00:02:37,424 --> 00:02:40,093 line:-2
For example,
when the button is in a window,


40
00:02:40.127 --> 00:02:42.696 line:-1 align:center
it will pick the push button style.


41
00:02:42,729 --> 00:02:46,934 line:-2
When the button is placed in a toolbar,
it will pick the toolbar style.


42
00:02:46,967 --> 00:02:48,769 line:0
For tall content, the button will pick


43
00:02:48,802 --> 00:02:51,338 line:0
the flexible push button style.


44
00:02:51,371 --> 00:02:53,273 line:0
The automatic bezel style is now


45
00:02:53,307 --> 00:02:54,575 line:0
the default bezel style


46
00:02:54,608 --> 00:02:56,977 line:0
for all button initializers.


47
00:02:59,179 --> 00:03:01,582 align:center
The existing bezel style names
have been updated


48
00:03:01,615 --> 00:03:04,051 line:0
from descriptions on their appearance


49
00:03:04,084 --> 00:03:07,421 line:0
to modern names
based on their semantic usage.


50
00:03:07,454 --> 00:03:10,123 line:0
For example, the formerly named
"Recessed" button


51
00:03:10,157 --> 00:03:12,192 align:center
is now "Accessory Bar" button,


52
00:03:12,226 --> 00:03:15,095 line:0
indicating that this bezel style
is most commonly used


53
00:03:15,128 --> 00:03:17,130 line:0
in Accessory Bars.


54
00:03:17,164 --> 00:03:20,234 align:center
Discouraged bezel styles
are now deprecated.


55
00:03:20,267 --> 00:03:23,270 align:center
The deprecations now refer
to alternative bezel styles


56
00:03:23,303 --> 00:03:25,839 line:0
with clear semantic usage.


57
00:03:25,873 --> 00:03:29,710 align:center
We've introduced a brand-new
split view type, inspectors.


58
00:03:29.743 --> 00:03:34.214 line:-2 align:center
Inspectors are a trailing split view item
that displays contextual information


59
00:03:34.248 --> 00:03:37.417 line:-2 align:center
about content that is currently selected
in a document.


60
00:03:38,719 --> 00:03:41,755 line:-2
Similar to sidebars,
inspectors use the full height


61
00:03:41,788 --> 00:03:45,492 line:-2
of the window when
the full size content view mask is set.


62
00:03:45.526 --> 00:03:49.730 line:-2 align:center
The new inspectors
back deploy to macOS Big Sur.


63
00:03:49,763 --> 00:03:53,000 line:-2
Adding an inspector
to your app is straightforward.


64
00:03:53,033 --> 00:03:55,869 line:-1
First, create a new split view item


65
00:03:55.903 --> 00:03:59.907 line:-2 align:center
using the new
inspectorWithViewController initializer.


66
00:03:59,940 --> 00:04:05,646 line:-2
Then, add the new splitViewItem
to your existing split view controller.


67
00:04:05,679 --> 00:04:07,948 line:-1
Next, update your toolbar delegate


68
00:04:07.981 --> 00:04:09.816 line:-1 align:center
to include the new toggle inspector


69
00:04:09.850 --> 00:04:11.518 line:-1 align:center
toolbar item.


70
00:04:11,552 --> 00:04:12,619 line:-1
You generally want


71
00:04:12,653 --> 00:04:13,820 line:-1
the toggle inspector item


72
00:04:13,854 --> 00:04:15,722 line:-1
to be placed over the inspector


73
00:04:15,756 --> 00:04:18,091 line:-1
on the trailing edge of the window.


74
00:04:18,125 --> 00:04:19,359 line:-1
To do so,


75
00:04:19.393 --> 00:04:21.895 line:-1 align:center
add the new inspector tracking separator


76
00:04:21.929 --> 00:04:23.197 line:-1 align:center
and a flexible space


77
00:04:23.230 --> 00:04:25.399 line:-1 align:center
before your toggle inspector item.


78
00:04:26,633 --> 00:04:29,436 line:-2
We've brought
some improvements to NSPopover.


79
00:04:29,469 --> 00:04:34,074 line:-2
First, we've added support
for anchoring popovers from toolbar items.


80
00:04:34,107 --> 00:04:37,544 line:-2
We've also added a way
to support full size popover content,


81
00:04:37.578 --> 00:04:40.380 line:-2 align:center
so your views
fill the entire popover bounds.


82
00:04:41,081 --> 00:04:43,483 line:-1
I'll start with toolbar anchoring.


83
00:04:43.517 --> 00:04:45.252 line:-2 align:center
There is a new method to present
your popover relative to a toolbar item.


84
00:04:48,088 --> 00:04:50,591 line:-2
When the toolbar item
is in the overflow menu,


85
00:04:50,624 --> 00:04:54,728 line:-2
the popover gracefully appears
anchored to the overflow chevron.


86
00:04:56.730 --> 00:05:01.702 line:-2 align:center
Next, popover content can now extend
into the popover chevron.


87
00:05:01.735 --> 00:05:04.905 line:-2 align:center
If you had a popover
with a colored background header view,


88
00:05:04,938 --> 00:05:06,907 line:-1
it might have looked something like this.


89
00:05:06.940 --> 00:05:09.843 line:-2 align:center
Notice that the color
in the header background doesn't extend


90
00:05:09,877 --> 00:05:11,912 line:-1
into the popover chevron.


91
00:05:11,945 --> 00:05:15,215 line:-2
To extend popover content
into the chevron area,


92
00:05:15,249 --> 00:05:19,219 line:-2
set the new hasFullSizeContent property
to true.


93
00:05:19,253 --> 00:05:22,356 line:-2
Use the safe area rect
to layout content that shouldn't be


94
00:05:22.389 --> 00:05:24.791 line:-1 align:center
obscured inside the popover.


95
00:05:26,059 --> 00:05:31,265 line:-2
And now I'll pass it over to Raleigh
to talk about exciting changes to Menus.


96
00:05:31,298 --> 00:05:32,466 line:-1
Raleigh: Thanks Aasim.


97
00:05:32.499 --> 00:05:35.536 line:-2 align:center
Menus have been re-written
to fully use Cocoa.


98
00:05:35.569 --> 00:05:40.107 line:-2 align:center
This reduces AppKit's carbon footprint
by significantly reducing memory


99
00:05:40.140 --> 00:05:41.675 line:-1 align:center
and CPU usage.


100
00:05:41.708 --> 00:05:44.178 line:-1 align:center
It also enables new features.


101
00:05:45.212 --> 00:05:48.415 line:-2 align:center
Specifically,
I'm going to cover section headers,


102
00:05:48.448 --> 00:05:52.119 line:-2 align:center
palette menus,
new selection behaviors, and badges.


103
00:05:52,152 --> 00:05:54,588 line:-1
These features open up new opportunities


104
00:05:54,621 --> 00:05:58,125 line:-2
and will reduce the amount
of code you need to write.


105
00:05:59.326 --> 00:06:02.362 line:-2 align:center
Section headers are a new addition
that aid in conveying groups


106
00:06:02.396 --> 00:06:06.099 line:-2 align:center
in your menu and can be created
with a single line of code.


107
00:06:06,133 --> 00:06:10,170 line:-2
Use the new class function,
sectionHeader(title:) to create one,


108
00:06:10,204 --> 00:06:12,973 line:-2
and add it to a menu,
like any other menu item.


109
00:06:13.006 --> 00:06:16.109 line:-2 align:center
In this example,
three menu sections are created,


110
00:06:16.143 --> 00:06:19.246 line:-1 align:center
each with a section header and two items.


111
00:06:20,714 --> 00:06:24,751 line:-2
Palette menus are an exciting new feature
allowing you to build menus


112
00:06:24,785 --> 00:06:27,421 line:-2
where the items are laid out
in a horizontal series.


113
00:06:27,454 --> 00:06:30,190 line:-1
For example, this simple color picker.


114
00:06:31,291 --> 00:06:33,627 line:1
You can turn any menu into a palette menu


115
00:06:33,660 --> 00:06:35,596 align:center
by setting the menu's presentationStyle


116
00:06:35,629 --> 00:06:37,564 line:1
to .palette.


117
00:06:37,598 --> 00:06:40,734 align:center
For each menu item, set its image.


118
00:06:40,767 --> 00:06:42,135 align:center
For template images,


119
00:06:42,169 --> 00:06:43,537 line:1
AppKit will automatically add


120
00:06:43,570 --> 00:06:46,440 align:center
the appropriate selection tint.


121
00:06:46,473 --> 00:06:48,242 align:center
Alternatively, you can set


122
00:06:48,275 --> 00:06:50,711 align:center
the offStateImage and the onStateImage.


123
00:06:50,744 --> 00:06:52,312 line:1
The onStateImage is used


124
00:06:52,346 --> 00:06:54,014 line:1
to indicate selection.


125
00:06:55,349 --> 00:06:57,017 align:center
There are a couple of selection modes


126
00:06:57,050 --> 00:06:58,685 line:-1
you can choose from.


127
00:06:58,719 --> 00:07:02,389 line:-2
.selectAny toggles the state
of individual menu items,


128
00:07:02.422 --> 00:07:05.859 line:-2 align:center
but will not change the state
of the other items in the group.


129
00:07:05,893 --> 00:07:09,530 line:-2
.selectOne will set
the selected menu item's state to on


130
00:07:09,563 --> 00:07:13,667 line:-2
while setting the other members
of the group's state to off.


131
00:07:13.700 --> 00:07:17.604 line:-2 align:center
You can also get or set
which items are in the on state


132
00:07:17,638 --> 00:07:20,174 line:-1
via the selectedItems property.


133
00:07:20,207 --> 00:07:25,112 line:-2
Note: selectionMode and selectedItems
work by organizing menu items


134
00:07:25.145 --> 00:07:28.849 line:-2 align:center
that have the same target/action pair
into a logical group.


135
00:07:28,882 --> 00:07:33,620 line:-2
When manually creating palette menu items,
give each item the same target/action pair


136
00:07:33.654 --> 00:07:37.391 line:-2 align:center
to take advantage of the new selectionMode
and selectedItems behavior.


137
00:07:37.424 --> 00:07:42.196 line:-2 align:center
And here's a tip: This technique
is not limited to palette menus.


138
00:07:42,229 --> 00:07:45,599 line:-2
It also works for menu items that have
the same target/action pair


139
00:07:45.632 --> 00:07:48.101 line:-1 align:center
in regular menus.


140
00:07:48,135 --> 00:07:51,004 line:-2
NSMenu also provides
a convenience function


141
00:07:51,038 --> 00:07:53,807 line:-1
to create common palette menus.


142
00:07:53,841 --> 00:07:55,642 line:-1
The colors array determines the number


143
00:07:55.676 --> 00:07:58.612 line:-1 align:center
of palette items and their tint.


144
00:07:58,645 --> 00:08:00,781 line:-1
Titles are used for accessibility,


145
00:08:00.814 --> 00:08:02.983 line:-1 align:center
so make sure you add them.


146
00:08:03.016 --> 00:08:05.619 line:-1 align:center
The optional template parameter specifies


147
00:08:05.652 --> 00:08:07.754 line:-1 align:center
which template image to use for tinting.


148
00:08:07.788 --> 00:08:08.789 line:-1 align:center
For example,


149
00:08:08.822 --> 00:08:10.991 line:-1 align:center
the flag symbol image used here.


150
00:08:12.459 --> 00:08:14.394 line:-1 align:center
If you don't specify a template,


151
00:08:14,428 --> 00:08:15,829 line:-1
then AppKit will default


152
00:08:15,863 --> 00:08:17,464 line:-1
to filled circles.


153
00:08:18,265 --> 00:08:19,466 line:-1
There is also


154
00:08:19,499 --> 00:08:21,335 line:-1
an optional closure parameter.


155
00:08:21.368 --> 00:08:23.604 line:-1 align:center
This closure is called any time the user


156
00:08:23.637 --> 00:08:26.173 line:-1 align:center
toggles a menu item in the palette.


157
00:08:26.206 --> 00:08:28.876 line:-1 align:center
Menu is passed to the closure.


158
00:08:28.909 --> 00:08:30.811 line:-1 align:center
From it, you can get an array


159
00:08:30.844 --> 00:08:32.613 line:-1 align:center
of the menu items in the on state


160
00:08:32,646 --> 00:08:34,848 line:-1
with the selectedItems property.


161
00:08:35,849 --> 00:08:37,684 line:-1
Menu items can now be badged


162
00:08:37.718 --> 00:08:39.386 line:-1 align:center
in a variety of ways.


163
00:08:39.419 --> 00:08:42.723 line:-2 align:center
You can use a simple string
or just a count.


164
00:08:44,024 --> 00:08:46,994 line:-2
There are also
three specialized count badges:


165
00:08:47,027 --> 00:08:50,764 line:-1
Newitems, alerts, and updates.


166
00:08:50,797 --> 00:08:52,699 line:-1
When you use one of these badges,


167
00:08:52.733 --> 00:08:55.802 line:-2 align:center
AppKit will automatically
add the appropriate text.


168
00:08:55,836 --> 00:08:59,273 line:-2
Further, AppKit will properly
localize the text as well.


169
00:08:59.306 --> 00:09:01.875 line:-1 align:center
In this example, Japanese.


170
00:09:01,909 --> 00:09:04,511 line:-2
Notice, though,
that you are still responsible


171
00:09:04.545 --> 00:09:09.249 line:-2 align:center
for localizing the menu item itself
and the generic string badge variant.


172
00:09:10.417 --> 00:09:12.886 line:-2 align:center
That's the completely new
menu implementation:


173
00:09:12.920 --> 00:09:17.658 line:-2 align:center
improved performance,
badges, palettes, and section headers.


174
00:09:19,493 --> 00:09:23,530 line:-2
In macOS Sonoma, we have introduced
Cooperative App Activation.


175
00:09:23,564 --> 00:09:27,701 line:-2
Cooperative app activation
reduces unexpected application switches,


176
00:09:27.734 --> 00:09:31.438 line:-2 align:center
for example, an app switch
while you are in the middle of typing.


177
00:09:33.507 --> 00:09:36.543 line:-2 align:center
There are two parts
to cooperative app activation.


178
00:09:36,577 --> 00:09:40,681 line:-2
Activate is now a request,
as opposed to a command.


179
00:09:40.714 --> 00:09:43.984 line:-2 align:center
The system considers the broader context
of what the user is doing


180
00:09:44,017 --> 00:09:47,621 line:-2
to decide
if the activate request is appropriate.


181
00:09:47,654 --> 00:09:51,892 line:-2
The new yield API allows
an application to influence the context


182
00:09:51.925 --> 00:09:54.428 line:-1 align:center
of a future activation request.


183
00:09:55.529 --> 00:09:57.331 line:-1 align:center
Now that activate is a request,


184
00:09:57,364 --> 00:10:01,468 line:-2
the ignoringOtherApps parameter
and option are ignored.


185
00:10:01,502 --> 00:10:03,470 line:-1
As such, in macOS Sonoma,


186
00:10:03,504 --> 00:10:05,839 line:-1
the activate(ignoringOtherApps:) function


187
00:10:05.873 --> 00:10:10.811 line:-2 align:center
and the activateIgnoringOtherApps option
are both deprecated.


188
00:10:10,844 --> 00:10:13,313 line:0
Replace them with the new activate APIs


189
00:10:13,347 --> 00:10:16,817 align:center
for NSApplication
and NSRunningApplication.


190
00:10:17.818 --> 00:10:22.122 line:-2 align:center
Only the active application
can influence the activate context.


191
00:10:22,155 --> 00:10:25,959 line:-2
It does so by yielding
to an explicit target application


192
00:10:25,993 --> 00:10:28,962 line:-2
before the target application
is activated.


193
00:10:28,996 --> 00:10:32,466 line:-2
Then, when the target application
requests activation,


194
00:10:32,499 --> 00:10:37,571 line:-2
the system will use the yield as part
of the context when making its decision.


195
00:10:37,604 --> 00:10:41,208 line:-2
If the request is honored,
the active app will deactivate,


196
00:10:41.241 --> 00:10:43.310 line:-1 align:center
and the target app will activate.


197
00:10:43,343 --> 00:10:47,181 line:-1
Otherwise, the active app remains active.


198
00:10:47,214 --> 00:10:53,020 line:-2
NSWorkspace automatically handles this
for you when opening URLs or applications.


199
00:10:54,054 --> 00:10:57,991 line:-2
In other cases, to manually hand
activation to another application,


200
00:10:58,025 --> 00:11:03,263 line:-2
yieldActivation to the target
NSRunningApplication or bundle identifier.


201
00:11:04.498 --> 00:11:06.767 line:-1 align:center
The system will use the yield context


202
00:11:06,800 --> 00:11:09,236 line:-2
when the target app
requests activation itself


203
00:11:09,269 --> 00:11:12,372 line:-1
or is otherwise activated on its behalf.


204
00:11:12,406 --> 00:11:16,143 line:-2
That's the new cooperative
app activation behavior.


205
00:11:16,176 --> 00:11:19,546 line:-2
We've also made some significant changes
and added new API


206
00:11:19.580 --> 00:11:22.683 line:-1 align:center
to graphics and drawing in macOS Sonoma.


207
00:11:23,483 --> 00:11:28,755 line:-2
You can now create CGPaths
from NSBezierPaths and vice versa.


208
00:11:28.789 --> 00:11:34.394 line:-2 align:center
NSBezierPath gains a new init(cgPath:)
initializer and a cgPath property.


209
00:11:34,428 --> 00:11:37,731 line:-2
Initing with, setting,
or getting the cgPath


210
00:11:37.764 --> 00:11:40.734 line:-1 align:center
always results in a copy of the path.


211
00:11:40.767 --> 00:11:44.872 line:-2 align:center
Further mutations of the NSBezierPath
are not reflected in the original


212
00:11:44.905 --> 00:11:47.241 line:-1 align:center
or copy CGPath instances.


213
00:11:47.274 --> 00:11:50.410 line:-1 align:center
That is, they are not toll-free bridged.


214
00:11:50.444 --> 00:11:54.848 line:-2 align:center
This addition makes using
NSBezierPath with CGPath API,


215
00:11:54.882 --> 00:11:59.786 line:-2 align:center
such as the path property on a CAShapeLayer,
a single line of code.


216
00:12:00,721 --> 00:12:04,291 line:-4
You can now create
a CADisplayLink object on macOS.


217
00:12:04.324 --> 00:12:08.829 line:-4 align:center
This is the same CADisplayLink
that you may be familiar with from iOS.


218
00:12:08.862 --> 00:12:13.333 line:-4 align:center
For those not familiar with CADisplayLink,
it is a timer object that allows your app


219
00:12:13,367 --> 00:12:17,938 line:-4
to synchronize its drawing
to the refresh rate of the display.


220
00:12:17,971 --> 00:12:22,609 line:-4
A directly initialized display link object
is synchronized with the main display,


221
00:12:22,643 --> 00:12:25,846 line:-4
but macOS is not limited
to a single display.


222
00:12:25,879 --> 00:12:31,451 line:-4
Therefore, on macOS you can get a display
link object directly from an NSView,


223
00:12:31.485 --> 00:12:34.254 line:-3 align:center
NSWindow or NSScreen


224
00:12:34.288 --> 00:12:37.925 line:-4 align:center
with their new
displayLink(target:selector:) functions.


225
00:12:37,958 --> 00:12:41,595 line:-4
The best approach
is to get a CADisplayLink object


226
00:12:41.628 --> 00:12:47.100 line:-4 align:center
directly from the most specific
applicable element, usually a view.


227
00:12:47,134 --> 00:12:50,671 line:-4
This is because,
when created from a view or window,


228
00:12:50.704 --> 00:12:55.042 line:-4 align:center
the CADisplayLink will automatically track
whatever the display or view


229
00:12:55,075 --> 00:12:57,945 line:-4
the window is on
as it moves around the desktop,


230
00:12:57.978 --> 00:13:01.415 line:-4 align:center
including suspending itself
when not on a display.


231
00:13:02.683 --> 00:13:05.953 line:-2 align:center
In this view subclass,
when startAnimating is called,


232
00:13:05.986 --> 00:13:08.956 line:-2 align:center
with two lines of code,
it creates a DisplayLink object


233
00:13:08.989 --> 00:13:11.358 line:-1 align:center
to call its stepAnimation function,


234
00:13:11,391 --> 00:13:14,828 line:-2
synchronized to whatever display
the view is on,


235
00:13:14,862 --> 00:13:19,633 line:-2
and adds the displayLink
to the main runloop for the common modes.


236
00:13:21,134 --> 00:13:24,037 line:-2
When the animation is complete,
it calls invalidate


237
00:13:24.071 --> 00:13:28.475 line:-2 align:center
to stop the display link and remove it
from all registered runloop modes.


238
00:13:29.776 --> 00:13:32.913 line:-1 align:center
NSColor now offers five new system colors


239
00:13:32.946 --> 00:13:35.148 line:-1 align:center
for filling background shapes.


240
00:13:35,182 --> 00:13:37,217 line:-1
The fill colors provide varying level


241
00:13:37,251 --> 00:13:40,120 line:-1
of emphasis for shapes of various sizes.


242
00:13:40,153 --> 00:13:41,855 line:-1
Smaller shapes on the scale


243
00:13:41.889 --> 00:13:43.724 line:-1 align:center
of a slider track or a progress bar


244
00:13:43.757 --> 00:13:46.293 line:-1 align:center
background use a higher level of emphasis


245
00:13:46,326 --> 00:13:48,795 line:-1
to stand out, such as system fill


246
00:13:48,829 --> 00:13:50,731 line:-1
or secondary system fill.


247
00:13:50,764 --> 00:13:52,599 line:-1
Larger shapes, like group boxes


248
00:13:52.633 --> 00:13:54.334 line:-1 align:center
and font backgrounds prefer


249
00:13:54,368 --> 00:13:56,303 line:-1
a more subtle level of emphasis,


250
00:13:56.336 --> 00:13:59.439 line:-1 align:center
such as quaternary or quinary system fill.


251
00:13:59,473 --> 00:14:02,543 line:-2
These fill colors are dynamic,
so they automatically adapt


252
00:14:02,576 --> 00:14:05,045 line:-1
to different appearances,


253
00:14:05,078 --> 00:14:08,849 align:center
including Increased Contrast
and Dark Mode.


254
00:14:08,882 --> 00:14:10,884 align:center
If you're building custom UI elements,


255
00:14:10,918 --> 00:14:13,187 align:center
these new fill colors are a convenient way


256
00:14:13,220 --> 00:14:17,024 align:center
to fit in with the system design
and support accessibility.


257
00:14:18.292 --> 00:14:21.995 line:-2 align:center
NSViews clip their drawing contents
to their bounds.


258
00:14:22,029 --> 00:14:25,632 line:-2
That sometimes leads to drawing
not displaying the way you want,


259
00:14:25.666 --> 00:14:29.269 line:-2 align:center
like the bottom of this Hindi glyph
in a FreeForm alert window.


260
00:14:31,471 --> 00:14:35,442 line:-2
Common places this can occur
is with font rendering,


261
00:14:35,475 --> 00:14:38,745 line:-1
shadows, or other sub-view accents,


262
00:14:38.779 --> 00:14:42.716 line:-2 align:center
like a badge
or a flame on that "hot" item for sale.


263
00:14:42,749 --> 00:14:44,651 line:-1
There are ways to solve this.


264
00:14:44.685 --> 00:14:49.323 line:-2 align:center
For example, embed the combined views
as siblings in a larger view.


265
00:14:49,356 --> 00:14:52,626 line:-2
However,
each technique has its own drawbacks.


266
00:14:52.659 --> 00:14:58.198 line:-2 align:center
In this case, combining the enclosing view
with a button in a simple horizontal stack


267
00:14:58.232 --> 00:15:01.535 line:-2 align:center
doesn't line up the base lines
of the text by default.


268
00:15:01,568 --> 00:15:04,238 line:-1
And now you have another problem to solve.


269
00:15:05.772 --> 00:15:07.875 line:-1 align:center
There is a better way.


270
00:15:07.908 --> 00:15:11.745 line:-2 align:center
When linked on macOS Sonoma,
most NSViews no longer clip


271
00:15:11.778 --> 00:15:13.714 line:-1 align:center
to their bounds by default.


272
00:15:15,182 --> 00:15:18,252 line:-2
Hit testing remains unchanged
and is determined


273
00:15:18,285 --> 00:15:20,187 line:-1
by the geometry of the view.


274
00:15:20.220 --> 00:15:23.724 line:-2 align:center
Of course, you can
override hitTest to change this.


275
00:15:23,757 --> 00:15:26,293 line:-2
Now that a view may draw
outside of its bounds,


276
00:15:26.326 --> 00:15:30.664 line:-2 align:center
its calculated visibleRect
may also extend past its bounds.


277
00:15:30.697 --> 00:15:35.435 line:-2 align:center
Review any code that uses visibleRect
and adjust accordingly.


278
00:15:35,469 --> 00:15:39,540 line:-2
This also impacts the dirtyRect
parameter of the draw function.


279
00:15:39.573 --> 00:15:44.678 line:-2 align:center
Specifically, the dirtyRect
is not constrained by a view's bounds.


280
00:15:45.479 --> 00:15:48.916 line:-2 align:center
AppKit reserves the right
to pass a dirtyRect that is larger


281
00:15:48,949 --> 00:15:50,517 line:-1
than the view's bounds.


282
00:15:50,551 --> 00:15:54,188 line:-2
AppKit also reserves the right
to subdivide drawing


283
00:15:54.221 --> 00:15:56.757 line:-1 align:center
into as many rectangles as it needs.


284
00:15:56.790 --> 00:15:59.126 line:-2 align:center
What this means for you
is that you should use


285
00:15:59.159 --> 00:16:03.497 line:-2 align:center
the dirtyRect to decide what to draw,
not where to draw.


286
00:16:05.032 --> 00:16:09.203 line:-2 align:center
This is an example of unexpected
drawing results that may occur.


287
00:16:09.236 --> 00:16:13.674 line:-2 align:center
This draw override fills the passed in
dirtyRect with a background color,


288
00:16:13,707 --> 00:16:16,910 line:-2
causing the fill to spill
outside the view's bounds,


289
00:16:16,944 --> 00:16:19,847 line:-1
covering other UI in the window.


290
00:16:19,880 --> 00:16:23,383 line:-2
The view isn't using
the dirtyRect to draw the frame.


291
00:16:24,585 --> 00:16:28,121 line:-2
Likewise,
its background fill should precisely fill


292
00:16:28.155 --> 00:16:31.859 line:-2 align:center
what your design requires,
no more, no less.


293
00:16:33.694 --> 00:16:36.663 line:-2 align:center
Drawing outside the dirtyRect
is always safe.


294
00:16:36,697 --> 00:16:39,967 line:-2
The performance benefits
of the dirtyRect occur when used


295
00:16:40.000 --> 00:16:44.738 line:-2 align:center
to decide which parts of your data
you can avoid drawing in this pass.


296
00:16:44,771 --> 00:16:50,043 line:-2
Perhaps calculating the stroke paths of
my name in this fancy style is expensive.


297
00:16:50,077 --> 00:16:53,080 align:center
If the dirtyRect is just
this little corner,


298
00:16:53,113 --> 00:16:55,349 line:0
it won't intersect with the text frame,


299
00:16:55,382 --> 00:16:58,785 align:center
so the view can avoid
those expensive calculations.


300
00:16:58,819 --> 00:17:02,623 align:center
Drawing the background
and the frame are still required,


301
00:17:02,656 --> 00:17:06,059 align:center
but, filling the entire bounds
and drawing the entire frame


302
00:17:06,093 --> 00:17:09,329 align:center
in this pass won't affect
the other already drawn portions


303
00:17:09,363 --> 00:17:13,233 align:center
of the view because AppKit clips
the drawing to the dirtyRect.


304
00:17:14,768 --> 00:17:17,204 line:-1
The new NSView .clipsToBounds property


305
00:17:17.237 --> 00:17:21.441 line:-2 align:center
is available
all the way back to OS X Mavericks 10.9.


306
00:17:21,475 --> 00:17:26,747 line:-2
But note, on older OSes turning off
.clipsToBounds may have some rough edges.


307
00:17:26,780 --> 00:17:28,248 line:-1
Test accordingly.


308
00:17:28,282 --> 00:17:33,153 line:-2
Most views will behave just fine
with both clipping on and off.


309
00:17:33,187 --> 00:17:36,990 line:-2
Some container views
make their own explicit decisions.


310
00:17:37,024 --> 00:17:40,894 line:-2
NSClipView,
true to its name, behaves this way.


311
00:17:40,928 --> 00:17:43,497 line:-2
There may be specific instances
where you disagree


312
00:17:43,530 --> 00:17:47,835 line:-2
with a view's default clipping behavior
and need to selectively change it.


313
00:17:48.735 --> 00:17:52.372 line:-2 align:center
Consider on a case-by-case basis
which of your own views


314
00:17:52,406 --> 00:17:55,175 line:-1
require an explicit clipsToBounds value.


315
00:17:55.209 --> 00:17:59.713 line:-2 align:center
The right choice is the one
that realizes your vision for your app.


316
00:17:59,746 --> 00:18:03,183 line:-1
Now back to Aasim to talk about images.


317
00:18:03,217 --> 00:18:04,818 line:-1
Aasim: Thanks Raleigh.


318
00:18:04,852 --> 00:18:08,388 line:-2
Symbols are an essential part
of designing your apps.


319
00:18:08,422 --> 00:18:12,259 line:-2
In macOS Sonoma,
symbols gain brand-new functionality,


320
00:18:12,292 --> 00:18:13,794 line:-1
symbol effects.


321
00:18:13.827 --> 00:18:15.062 line:-1 align:center
With symbol effects,


322
00:18:15,095 --> 00:18:18,899 line:-2
your symbols
can now have effects like bounce,


323
00:18:18.932 --> 00:18:21.668 line:-1 align:center
replacement transitions,


324
00:18:21,702 --> 00:18:23,937 line:-1
and pulse animations.


325
00:18:25.239 --> 00:18:28.275 line:-2 align:center
Symbol effects are great way
to emphasize an action


326
00:18:28.308 --> 00:18:32.379 line:-2 align:center
that has occurred
or state change in your apps.


327
00:18:32,412 --> 00:18:35,449 line:-1
Adding a symbol effect is simple.


328
00:18:35.482 --> 00:18:40.120 line:-2 align:center
First, set the imageView's image property
to a symbol image.


329
00:18:40,153 --> 00:18:42,356 line:-1
Then, when you want the effect,


330
00:18:42,389 --> 00:18:46,527 line:-2
simply call addSymbolEffect
to the image view.


331
00:18:46.560 --> 00:18:51.064 line:-2 align:center
Note that this will only work if
your NSImageView uses a symbol image.


332
00:18:52.866 --> 00:18:55.536 line:-3 align:center
For more info on using symbol effects,


333
00:18:55,569 --> 00:18:59,072 line:-4
check out
the "Animate symbols in your app" video.


334
00:18:59.106 --> 00:19:00.707 line:-1 align:center
In macOS Ventura,


335
00:19:00,741 --> 00:19:02,843 line:-1
we introduced support for SF Symbols


336
00:19:02,876 --> 00:19:04,111 line:-1
to automatically adapt


337
00:19:04,144 --> 00:19:06,647 line:-1
to the user's current locale.


338
00:19:06,680 --> 00:19:08,615 line:-1
Now in macOS Sonoma,


339
00:19:08.649 --> 00:19:10.884 line:-1 align:center
your asset catalog images and symbols


340
00:19:10,918 --> 00:19:13,387 line:-1
get that same ability.


341
00:19:13,420 --> 00:19:15,923 line:-1
Like SF Symbols in macOS Ventura,


342
00:19:15.956 --> 00:19:19.193 line:-1 align:center
they follow the system locale by default.


343
00:19:19,226 --> 00:19:21,028 line:-1
Use the image locale method


344
00:19:21,061 --> 00:19:24,831 line:-1
to obtain an image with a fixed locale.


345
00:19:24,865 --> 00:19:30,571 line:-2
Next, I'll talk about High Dynamic Range
content, or HDR for short.


346
00:19:30,604 --> 00:19:35,742 line:-2
HDR content can express light levels
far beyond standard content.


347
00:19:35,776 --> 00:19:39,980 line:-2
macOS has supported extended
dynamic range for several releases,


348
00:19:40,013 --> 00:19:44,318 line:-2
allowing you to take full advantage
of displays such as the Liquid Retina XDR


349
00:19:44.351 --> 00:19:48.322 line:-1 align:center
in Macbook Pros and the Pro Display XDR.


350
00:19:48,355 --> 00:19:50,924 line:-1
macOS Sonoma makes it easier than ever


351
00:19:50.958 --> 00:19:53.393 line:-1 align:center
to display HDR content in your apps


352
00:19:53.427 --> 00:19:56.930 line:-2 align:center
with NSImageView
gaining support for HDR content.


353
00:19:56,964 --> 00:20:00,901 line:-2
Images containing HDR content
will now be displayed in HDR


354
00:20:00.934 --> 00:20:04.037 line:-2 align:center
on Extended Dynamic Range
capable hardware.


355
00:20:04.071 --> 00:20:07.307 line:-2 align:center
To display HDR content
in standard dynamic range,


356
00:20:07,341 --> 00:20:11,411 line:-2
use the preferredImageDynamicRange
property to override.


357
00:20:12,713 --> 00:20:15,082 line:-1
For more info on adopting this API,


358
00:20:15,115 --> 00:20:19,086 line:-4
check out the "Support HDR images
in your apps" video.


359
00:20:19,119 --> 00:20:20,954 line:-1
Starting in Xcode 15,


360
00:20:20,988 --> 00:20:23,290 line:-1
images and colors in your Asset Catalog


361
00:20:23,323 --> 00:20:25,459 line:-1
are automatically reflected into your code


362
00:20:25,492 --> 00:20:28,462 line:-2
as static properties
on NSImage and NSColor.


363
00:20:28.495 --> 00:20:31.932 line:-2 align:center
This allows you to use clean dot notation
to access the image


364
00:20:31.965 --> 00:20:34.568 line:-1 align:center
instead of initializing it with a string.


365
00:20:34,601 --> 00:20:37,104 line:-2
The images are non-optional,
so you can also remove


366
00:20:37.137 --> 00:20:40.073 line:-1 align:center
any force unwrapping or guard checks.


367
00:20:40.107 --> 00:20:42.376 line:-1 align:center
If you modify the Asset Catalog to remove


368
00:20:42.409 --> 00:20:43.644 line:-1 align:center
or rename an image,


369
00:20:43,677 --> 00:20:47,481 line:-2
the compiler will catch any mismatch
with your code and produce an error


370
00:20:47.514 --> 00:20:48.949 line:-1 align:center
when building your apps,


371
00:20:48,982 --> 00:20:50,851 line:-1
which allows you to fix it immediately,


372
00:20:50.884 --> 00:20:53.987 line:-1 align:center
instead of catching it later at runtime.


373
00:20:54.021 --> 00:20:58.258 line:-2 align:center
macOS Sonoma introduces significant
changes to the typing experience


374
00:20:58,292 --> 00:21:01,528 line:-2
and improvements to text layout
in non-English languages.


375
00:21:02.763 --> 00:21:05.899 line:-2 align:center
It starts
with a brand-new insertion indicator


376
00:21:05.933 --> 00:21:08.335 line:-1 align:center
that adapts to the current accent color,


377
00:21:08,368 --> 00:21:11,505 line:-2
and leaves a trailing glow
as you dictate text.


378
00:21:15.175 --> 00:21:17.644 line:-1 align:center
Next, there is now a cursor accessory


379
00:21:17.678 --> 00:21:21.415 line:-2 align:center
below the insertion indicator
that displays key information,


380
00:21:21,448 --> 00:21:25,319 line:-2
like input mode,
dictation state, and caps lock state.


381
00:21:25,352 --> 00:21:29,323 line:-2
The accessory tracks the current insertion
position and will be pinned to the bottom


382
00:21:29,356 --> 00:21:33,227 line:-2
of the document if the insertion
position is outside the visible view.


383
00:21:36.096 --> 00:21:40.334 line:-2 align:center
Apps using standard AppKit text views
will get this automatically.


384
00:21:40.367 --> 00:21:45.038 line:-2 align:center
If you have a custom text view,
we have new API that you can adopt.


385
00:21:45,072 --> 00:21:48,208 line:-2
You can replace your custom
text insertion indicator drawing


386
00:21:48,242 --> 00:21:51,378 line:-1
with the NSTextInsertionIndicator view.


387
00:21:51,411 --> 00:21:54,548 line:-2
Add this view as a subview
on your custom text view,


388
00:21:54,581 --> 00:21:56,850 line:-2
and you will get
the new insertion indicator


389
00:21:56,884 --> 00:21:59,253 line:-1
that is consistent across the OS.


390
00:21:59,286 --> 00:22:01,755 line:-2
Note that you will be
in charge of updating the frame


391
00:22:01.788 --> 00:22:05.292 line:-2 align:center
of the insertion indicator
and whether it is visible.


392
00:22:05.325 --> 00:22:08.295 line:-2 align:center
Update the displayMode property
to hidden when your text view


393
00:22:08.328 --> 00:22:11.899 line:-2 align:center
resigns first responder
to hide the indicator.


394
00:22:11.932 --> 00:22:15.435 line:-2 align:center
MacOS Sonoma features
several improvements to text layout


395
00:22:15.469 --> 00:22:17.671 line:-1 align:center
for non-English languages.


396
00:22:17.704 --> 00:22:20.073 line:-2 align:center
An important highlight
is the changes we've made


397
00:22:20,107 --> 00:22:24,244 line:-2
for wrapping and hyphenation,
as some languages require different rules


398
00:22:24,278 --> 00:22:27,681 line:-2
for line breaking,
depending on the text context.


399
00:22:27.714 --> 00:22:30.751 line:-2 align:center
For example,
in traditional typesetting for Korean,


400
00:22:30,784 --> 00:22:33,620 line:-2
body text may have a line break
in the middle of a word,


401
00:22:33.654 --> 00:22:37.124 line:-2 align:center
but title text will only wrap
at word boundaries.


402
00:22:37,157 --> 00:22:39,126 line:-2
Breaking within words in titles


403
00:22:39.159 --> 00:22:41.395 line:-2 align:center
can feel jarring in Korean.


404
00:22:41.428 --> 00:22:43.063 line:-2 align:center
In this sheet from Maps,


405
00:22:43,096 --> 00:22:44,631 line:-2
the Korean word for “time”


406
00:22:44.665 --> 00:22:46.800 line:-2 align:center
is split between two lines.


407
00:22:46.834 --> 00:22:50.037 line:-3 align:center
macOS Sonoma
will now perform different line breaking


408
00:22:50,070 --> 00:22:52,539 line:-2
depending on the text style font used.


409
00:22:52.573 --> 00:22:55.309 line:-2 align:center
In Korean, title and Headline text styles


410
00:22:55.342 --> 00:22:58.445 line:-3 align:center
like in this sheet will not wrap
at word boundaries.


411
00:22:58.478 --> 00:23:02.983 line:-3 align:center
While the body text style may have
a line break within words if appropriate.


412
00:23:03.016 --> 00:23:04.952 line:-2 align:center
Here is another example.


413
00:23:04.985 --> 00:23:10.190 line:-2 align:center
In narrow layouts, some German words
can be longer than an entire line width,


414
00:23:10.224 --> 00:23:14.461 line:-2 align:center
which can cause individual characters
to spill over into the next line.


415
00:23:14.494 --> 00:23:16.663 line:-1 align:center
This wrapping isn't ideal.


416
00:23:16.697 --> 00:23:19.633 line:-2 align:center
It looks unbalanced,
and there's a component of the word--


417
00:23:19,666 --> 00:23:23,170 line:-2
which is called a morpheme--
that's being split across lines.


418
00:23:23,203 --> 00:23:26,206 line:-2
In macOS Sonoma,
if you have a title text field


419
00:23:26,240 --> 00:23:29,810 line:-2
with hyphenation disabled,
macOS will automatically hyphenate


420
00:23:29,843 --> 00:23:33,747 line:-2
the text at a morpheme boundary
instead of character wrapping.


421
00:23:33,780 --> 00:23:37,951 line:-2
The resulting layout is more
balanced and easier to read.


422
00:23:37,985 --> 00:23:42,923 line:-2
This is a great time
to adopt text styles in your app.


423
00:23:42,956 --> 00:23:44,391 line:-1
In macOS Sonoma,


424
00:23:44.424 --> 00:23:47.928 line:-2 align:center
AppKit has been updated to make it easier
to adopt Swift-first features


425
00:23:47,961 --> 00:23:51,231 line:-1
like Swift concurrency and transferable.


426
00:23:51,265 --> 00:23:55,002 line:-2
SwiftUI has also been updated
to allow you to use SwiftUI views


427
00:23:55.035 --> 00:23:58.138 line:-2 align:center
and modifiers in more places
in your AppKit app.


428
00:23:59,806 --> 00:24:04,244 line:-2
The majority of AppKit classes
are restricted to the main thread.


429
00:24:04,278 --> 00:24:07,681 line:-2
Under Swift concurrency,
these classes are marked as main actor


430
00:24:07,714 --> 00:24:10,717 line:-1
to generate appropriate compiler errors.


431
00:24:10.751 --> 00:24:15.355 line:-2 align:center
However, there are certain classes
in AppKit such as NSColor and NSShadow


432
00:24:15.389 --> 00:24:18.825 line:-2 align:center
that can be safely accessed
outside the main thread.


433
00:24:18.859 --> 00:24:22.763 line:-2 align:center
In macOS Sonoma, these classes
conform to the Sendable protocol,


434
00:24:22.796 --> 00:24:27.334 line:-2 align:center
which indicates that they can be freely
transferred across actor boundaries.


435
00:24:28.769 --> 00:24:32.105 line:-2 align:center
Transferable is a Swift protocol
to describe how objects can be


436
00:24:32,139 --> 00:24:34,741 line:-1
serialized and deserialized.


437
00:24:34.775 --> 00:24:39.246 line:-2 align:center
This powers features like
Drag and Drop and Sharing in SwiftUI.


438
00:24:39.279 --> 00:24:43.951 line:-2 align:center
In macOS Sonoma NSImage,
NSColor, and NSSound conform


439
00:24:43,984 --> 00:24:46,453 line:-1
to the Transferable protocol.


440
00:24:46.486 --> 00:24:50.023 line:-2 align:center
This makes it easier for AppKit apps
to adopt features like Drag and Drop


441
00:24:50,057 --> 00:24:52,492 line:-1
or Sharing in SwiftUI Views.


442
00:24:53.727 --> 00:24:57.831 line:-2 align:center
In macOS Ventura 13.3,
we introduced a new property wrapper


443
00:24:57,865 --> 00:25:00,901 line:-1
for NSViewController, ViewLoading.


444
00:25:00.934 --> 00:25:04.738 line:-2 align:center
Use ViewLoading on properties
that are initialized in loadView.


445
00:25:04.771 --> 00:25:07.241 line:-2 align:center
If these properties
were previously optional,


446
00:25:07.274 --> 00:25:11.011 line:-2 align:center
you can remove the optionality
and any related checks.


447
00:25:11.044 --> 00:25:14.348 line:-2 align:center
The view controller will make sure
that the property is initialized


448
00:25:14.381 --> 00:25:16.750 line:-1 align:center
by calling loadViewIfNeeded.


449
00:25:16,783 --> 00:25:19,253 line:-1
A similar property wrapper, WindowLoading,


450
00:25:19,286 --> 00:25:23,223 line:-2
is also available for properties
on NSWindowController.


451
00:25:23.257 --> 00:25:24.525 line:-1 align:center
With Xcode 15,


452
00:25:24.558 --> 00:25:27.461 line:-4 align:center
you can now use Previews
to display your AppKit views


453
00:25:27.494 --> 00:25:29.596 line:-3 align:center
and view controllers.


454
00:25:29.630 --> 00:25:35.269 line:-4 align:center
Use the new Preview macro, provide a name,
and return your view or view controller.


455
00:25:35,302 --> 00:25:39,373 line:-4
The preview will stay up to date
as you make changes to your code.


456
00:25:39,406 --> 00:25:44,545 line:-4
Check out the “Build programmatic UI
with Xcode Previews” video for more info.


457
00:25:47.414 --> 00:25:50.851 line:-2 align:center
NSHostingView and NSHostingController
are a great way


458
00:25:50.884 --> 00:25:54.154 line:-2 align:center
to incrementally adopt SwiftUI
into your AppKit app.


459
00:25:54.188 --> 00:25:57.324 line:-2 align:center
In macOS Sonoma,
there are some new features that allow you


460
00:25:57.357 --> 00:25:59.993 line:-1 align:center
to adopt SwiftUI in more places.


461
00:26:00.027 --> 00:26:03.163 line:-2 align:center
SwiftUI modifiers
like toolbar and navigation title


462
00:26:03,197 --> 00:26:05,632 line:-1
now work on NSWindows.


463
00:26:05.666 --> 00:26:08.402 line:-2 align:center
If the hostingView
is the contentView of the window,


464
00:26:08.435 --> 00:26:12.072 line:-2 align:center
SwiftUI will automatically bridge
all available scene modifiers


465
00:26:12.105 --> 00:26:13.507 line:-1 align:center
to your NSWindow.


466
00:26:13.540 --> 00:26:16.910 line:-2 align:center
For more control,
there is a new property on NSHostingView


467
00:26:16,944 --> 00:26:19,980 line:-2
and NSHostingController,
sceneBridgingOptions.


468
00:26:20,013 --> 00:26:23,717 line:-2
Using this, you can explicitly state
which properties should be bridged


469
00:26:23.750 --> 00:26:26.520 line:-1 align:center
from your SwiftUI view to the NSWindow.


470
00:26:27.554 --> 00:26:31.525 line:-2 align:center
That's just some of the new features
for AppKit in macOS Sonoma.


471
00:26:31.558 --> 00:26:32.893 line:-1 align:center
What's next?


472
00:26:32.926 --> 00:26:37.397 line:-2 align:center
First, compile your apps using
the macOS Sonoma SDK and audit it


473
00:26:37,431 --> 00:26:40,901 line:-2
to ensure that the changes
to clipping and activation don't cause


474
00:26:40,934 --> 00:26:42,836 line:-1
any unwanted side effects.


475
00:26:42.870 --> 00:26:47.140 line:-2 align:center
Next, adopt the new controls API,
like the new full-height inspector


476
00:26:47.174 --> 00:26:50.143 line:-2 align:center
and the new table column
customization API.


477
00:26:50,177 --> 00:26:52,513 line:-2
Update your app's design
to take advantage


478
00:26:52.546 --> 00:26:54.982 line:-1 align:center
of symbol effects in macOS Sonoma.


479
00:26:55,015 --> 00:26:58,051 line:-2
And finally, use the new
Swift focused AppKit additions,


480
00:26:58,085 --> 00:27:01,088 line:-2
like Transferable
and improvements to NSHostingView,


481
00:27:01,121 --> 00:27:04,191 line:-2
to adopt SwiftUI
in more places in your app.


482
00:27:05.959 --> 00:27:07.461 line:-1 align:center
Thanks so much for watching.


483
00:27:07,494 --> 00:27:10,931 line:-2
We hope you enjoy all
the new features of macOS Sonoma!


484
00:27:10,964 --> 00:27:14,635 align:center
♪ ♪

