2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
â™ª â™ª


3
00:00:10.010 --> 00:00:13.614 line:-2 align:center
Adam: Welcome, I'm Adam,
an engineer for VisionKit.


4
00:00:13.647 --> 00:00:17.284 line:-2 align:center
It is my pleasure to spend time
with you today to talk about new features


5
00:00:17,317 --> 00:00:20,521 line:-2
and API the team
has been working on for this year.


6
00:00:20.554 --> 00:00:24.691 line:-2 align:center
To recap, last year Live Text support
was added in VisionKit,


7
00:00:24,725 --> 00:00:28,228 line:-2
enabling interactions such as
text selection, translation,


8
00:00:28,262 --> 00:00:31,765 line:-2
QR support,
and more for images in your apps.


9
00:00:31,798 --> 00:00:35,235 line:-2
VisionKit also introduced
the DataScannerViewController,


10
00:00:35.269 --> 00:00:39.339 line:-2 align:center
The Data scanner uses a live camera feed
provide a simple and full featured way


11
00:00:39,373 --> 00:00:41,642 line:-1
to capture specific text types,


12
00:00:41,675 --> 00:00:44,878 line:-2
as well as many variants
of machine readable codes.


13
00:00:44,912 --> 00:00:50,851 line:-2
Information on those APIs are included
in these WWDC22 sessions.


14
00:00:50,884 --> 00:00:53,520 line:-2
The response from developers
has been amazing,


15
00:00:53,554 --> 00:00:56,356 line:-2
and this year I'm happy to announce
VisionKit is adding support


16
00:00:56,390 --> 00:01:00,227 line:-2
for both Subject Lifting
and Visual Look Up.


17
00:01:00,260 --> 00:01:03,463 line:-2
There's also new Live Text API
for text selection,


18
00:01:03.497 --> 00:01:05.933 line:-1 align:center
expanded platform support for Catalyst,


19
00:01:05,966 --> 00:01:08,969 line:-2
and context menu integration
for native macOS apps.


20
00:01:09,970 --> 00:01:13,040 line:-2
And now I'm going to get started
with Subject Lifting.


21
00:01:13,073 --> 00:01:14,708 line:-1
With a simple long press


22
00:01:14,741 --> 00:01:17,644 line:-2
on the subject of an image,
it lifts it from its surroundings


23
00:01:17.678 --> 00:01:20.747 line:-2 align:center
and becomes highlighted
with this beautiful animated glow,


24
00:01:20.781 --> 00:01:23.217 line:-2 align:center
and then I am presented
with several options to share it,


25
00:01:23,250 --> 00:01:26,053 line:-1
or invoke Visual Look Up.


26
00:01:26,086 --> 00:01:29,356 line:-2
New for iOS 17, you can now use
any lifted subject


27
00:01:29.389 --> 00:01:33.460 line:-2 align:center
to create a sticker, with fun effects such
as shiny, puffy, and more


28
00:01:33,493 --> 00:01:35,963 line:-1
to share with your friends and family.


29
00:01:35.996 --> 00:01:40.634 line:-2 align:center
Now the good news is, integrating
Subject Lifting is very simple.


30
00:01:40,667 --> 00:01:44,137 line:-2
In fact, there is a good chance
you are already finished.


31
00:01:44,171 --> 00:01:47,074 line:-2
Here is the same code snippet
from the last year's video


32
00:01:47,107 --> 00:01:50,244 line:-2
where I analyze an image
and set it on the interaction.


33
00:01:50,277 --> 00:01:54,181 line:-2
But now, it supports Subject Lifting,
without any code changed.


34
00:01:54,214 --> 00:01:56,283 line:-1
Let's explore further.


35
00:01:56,316 --> 00:02:00,354 line:-2
Notice that I'm not passing anything
special into the analyzer configuration.


36
00:02:00.387 --> 00:02:03.690 line:-2 align:center
This is because in order to preserve
power and performance,


37
00:02:03,724 --> 00:02:07,361 line:-2
Subject Lifting analysis is handled
separately by the interaction


38
00:02:07,394 --> 00:02:10,364 line:-1
after the initial analysis is complete.


39
00:02:10.397 --> 00:02:14.868 line:-2 align:center
For iOS this process occurs after
it's been on screen for a few seconds,


40
00:02:14.902 --> 00:02:18.705 line:-2 align:center
and for macOS it will occur
the first time the menu appears.


41
00:02:18,739 --> 00:02:20,274 line:-2
This means you don't need to handle
the case


42
00:02:20.307 --> 00:02:22.843 line:-1 align:center
of the user swiping though many photos.


43
00:02:22,876 --> 00:02:25,145 line:-1
The interaction will handle this for you.


44
00:02:25.179 --> 00:02:29.249 line:-2 align:center
All you need to do is ensure you have
an appropriate interaction type set--


45
00:02:29,283 --> 00:02:30,651 line:-1
in this case, automatic--


46
00:02:30,684 --> 00:02:33,787 line:-2
and the rest is handled
by the interaction.


47
00:02:33,820 --> 00:02:36,990 line:-2
Let's examine Subject Lifting compatible
interaction types


48
00:02:37,024 --> 00:02:38,492 line:-1
a bit closer.


49
00:02:38,525 --> 00:02:41,795 line:-2
Automatic gives the default
out of the box experience,


50
00:02:41.828 --> 00:02:45.966 line:-2 align:center
combining text interaction,
Subject Lifting, and more.


51
00:02:45.999 --> 00:02:50.337 line:-2 align:center
If you only want Subject Lifting,
and not text selection or data detectors,


52
00:02:50,370 --> 00:02:53,540 line:-2
you can set the interaction type to
.imageSegmentation,


53
00:02:53,574 --> 00:02:56,076 line:-1
or combine it with other types.


54
00:02:56.109 --> 00:03:00.113 line:-2 align:center
And finally, if Subject Lifting
just does not make sense for your app,


55
00:03:00,147 --> 00:03:03,750 line:-2
but you want the previous
automatic behavior from iOS 16,


56
00:03:03,784 --> 00:03:07,654 line:-2
no problem, you can use a new type,
.automaticTextOnly.


57
00:03:07,688 --> 00:03:10,891 line:-2
This provides features such as
text selection and data detectors,


58
00:03:10.924 --> 00:03:13.026 line:-1 align:center
but not Subject Lifting.


59
00:03:13.060 --> 00:03:16.830 line:-2 align:center
We have a detailed session
specifically on Subject Lifting available


60
00:03:16.864 --> 00:03:20.734 line:-2 align:center
if you would like to learn advanced topics
about this amazing new technology


61
00:03:20,767 --> 00:03:23,604 line:-1
in both VisionKit, and Vision.


62
00:03:23,637 --> 00:03:27,975 line:-2
This year VisionKit also supports
Visual Look Up.


63
00:03:28,008 --> 00:03:31,612 line:-2
Visual Look Up allows users to
easily identify and learn about pets,


64
00:03:31,645 --> 00:03:34,982 line:-1
nature, landmarks, art, and media.


65
00:03:35.015 --> 00:03:38.886 line:-2 align:center
And In iOS 17, Visual Look Up
will support additional domains,


66
00:03:38.919 --> 00:03:42.356 line:-2 align:center
including food, products,
and signs and symbols.


67
00:03:42,389 --> 00:03:46,894 line:-2
Now, finally, it's easy to look up what
those symbols on your laundry tags mean.


68
00:03:46,927 --> 00:03:49,596 line:-1
I mean, that's pretty cool if you ask me.


69
00:03:49,630 --> 00:03:52,199 line:-2
Visual Look Up availability
is based on language,


70
00:03:52.232 --> 00:03:55.502 line:-1 align:center
and is available for these languages.


71
00:03:55.536 --> 00:03:59.640 line:-2 align:center
Let's take a quick peek under the hood,
and explore how Visual Look Up works.


72
00:03:59.673 --> 00:04:02.209 line:-1 align:center
It's actually a two-part process.


73
00:04:02,242 --> 00:04:07,047 line:-2
Initial processing is accomplished
entirely on device at analysis time.


74
00:04:07.080 --> 00:04:10.851 line:-2 align:center
If the .visualLookUp type is present
in the analyzer configuration,


75
00:04:10.884 --> 00:04:13.987 line:-2 align:center
Visual Look Up will locate
the bounding box of the results,


76
00:04:14.021 --> 00:04:15.689 line:-1 align:center
and their top level domain.


77
00:04:15,722 --> 00:04:18,926 line:-2
For example, if it's a cat, book,
or plant.


78
00:04:18.959 --> 00:04:22.296 line:-2 align:center
This step also includes
feature extraction.


79
00:04:22.329 --> 00:04:24.932 line:-2 align:center
Once the user requests
to look up an object,


80
00:04:24.965 --> 00:04:28.168 line:-2 align:center
then, and only then,
are the domain and image embeddings


81
00:04:28,202 --> 00:04:32,940 line:-2
from feature extraction sent to the server
for additional processing.


82
00:04:32.973 --> 00:04:35.042 line:-1 align:center
Now you know how Visual Look Up works,


83
00:04:35,075 --> 00:04:36,910 line:-1
let's quickly explore how to use it,


84
00:04:36,944 --> 00:04:40,013 line:-2
and what actions you need to take
to add it to your app.


85
00:04:40.047 --> 00:04:43.050 line:-2 align:center
Visual Look Up can be invoked
in two different ways.


86
00:04:43,083 --> 00:04:45,986 line:-2
The first is in conjunction
with Subject Lifting,


87
00:04:46.019 --> 00:04:48.689 line:-2 align:center
if the current lifted subject
contains one,


88
00:04:48,722 --> 00:04:51,625 line:-2
and only one,
correlated Visual Look Up result,


89
00:04:51.658 --> 00:04:53.994 line:-2 align:center
the Look Up option will be offered
in the menu,


90
00:04:54,027 --> 00:04:57,397 line:-2
and selecting it will show
the full Look Up result.


91
00:04:57.431 --> 00:05:00.434 line:-2 align:center
VisionKit handles this interaction
for you automatically.


92
00:05:00.467 --> 00:05:02.503 line:-1 align:center
As an adopter all you need to do


93
00:05:02.536 --> 00:05:07.875 line:-2 align:center
is have .visualLookUp added to your
analyzer configuration at analysis time.


94
00:05:07.908 --> 00:05:10.244 line:-2 align:center
Second,
there is a modal interaction available


95
00:05:10.277 --> 00:05:14.114 line:-2 align:center
where badges are placed over each
of the visual search results.


96
00:05:14,147 --> 00:05:18,452 line:-2
Notice how the badges move to
the corner if they leave the viewport,


97
00:05:18.485 --> 00:05:22.089 line:-2 align:center
Users can tap on these badges
to show the Look Up result.


98
00:05:22.122 --> 00:05:25.959 line:-2 align:center
This is the same interaction as clicking
on the info button in the Photos app,


99
00:05:25.993 --> 00:05:28.962 line:-1 align:center
or Quick Look, for example.


100
00:05:28.996 --> 00:05:31.465 line:-2 align:center
This mode is invoked by setting
.visualLookUp


101
00:05:31.498 --> 00:05:34.601 line:-2 align:center
as the preferredInteractionType
on your interaction.


102
00:05:34,635 --> 00:05:36,570 line:-2
Please note:
this type will have precedence


103
00:05:36.603 --> 00:05:38.839 line:-1 align:center
over the other interaction types.


104
00:05:38,872 --> 00:05:41,808 line:-2
For example,
you cannot select text or data detectors


105
00:05:41,842 --> 00:05:44,811 line:-2
at the same time
that the visualLookup Mode is set.


106
00:05:44.845 --> 00:05:48.115 line:-2 align:center
As such, this is normally used
in conjunction with a button,


107
00:05:48.148 --> 00:05:52.186 line:-2 align:center
or some other bespoke way
to get in and out of this mode.


108
00:05:52,219 --> 00:05:54,888 line:-2
For example,
Quick Look uses the info button


109
00:05:54.922 --> 00:05:57.057 line:-1 align:center
to enter Visual Look Up mode.


110
00:05:57,090 --> 00:06:01,728 line:-2
Now let's shift gears and discuss
new API and features for the Data Scanner


111
00:06:01,762 --> 00:06:03,363 line:-1
as well as Live Text.


112
00:06:03.397 --> 00:06:06.834 line:-2 align:center
Introduced In iOS 16,
the DataScannerViewController


113
00:06:06.867 --> 00:06:09.636 line:-2 align:center
was designed to be the easiest way
to use OCR


114
00:06:09.670 --> 00:06:11.805 line:-1 align:center
with a live camera viewfinder.


115
00:06:11.839 --> 00:06:18.312 line:-2 align:center
In iOS 17, it's been enhanced with optical
flow tracking as well as currency support.


116
00:06:18.345 --> 00:06:23.717 line:-2 align:center
Optical flow tracking can enhance text
tracking for live-camera experiences.


117
00:06:23.750 --> 00:06:25.953 line:-1 align:center
Here is what we have in iOS 16.


118
00:06:25.986 --> 00:06:30.524 line:-2 align:center
I'm scanning for text
with highFrameRateTracking enabled.


119
00:06:30.557 --> 00:06:33.327 line:-2 align:center
And this what you'll get
with optical flow tracking.


120
00:06:33,360 --> 00:06:37,698 line:-2
Now the highlights feel much more stable
and grounded than before.


121
00:06:37,731 --> 00:06:39,833 line:-1
Optical flow tracking comes for free


122
00:06:39.867 --> 00:06:42.402 line:-2 align:center
whenever you use the
DataScannerViewController,


123
00:06:42,436 --> 00:06:45,105 line:-2
however, it is only available
when recognizing text,


124
00:06:45,138 --> 00:06:47,841 line:-1
and not machine readable codes.


125
00:06:47,875 --> 00:06:53,480 line:-2
And you're also required to scan for text
without a specific text content type set.


126
00:06:53,514 --> 00:06:57,718 line:-2
And finally, once again, ensure
high frame-rate tracking is enabled.


127
00:06:57,751 --> 00:06:59,953 line:-1
Which is, conveniently, the default.


128
00:07:01,288 --> 00:07:03,056 line:-1
No matter how you configure it,


129
00:07:03,090 --> 00:07:05,526 line:-2
the data scanner provides
great text tracking;


130
00:07:05.559 --> 00:07:07.995 line:-2 align:center
but if your use case
allows for this configuration,


131
00:07:08.028 --> 00:07:11.398 line:-2 align:center
the new optical flow tracking
can enhance it even further.


132
00:07:12,266 --> 00:07:15,035 line:-1
Next, the data scanner has a new option


133
00:07:15,068 --> 00:07:18,906 line:-2
allowing users to find and interact
with monetary values.


134
00:07:18.939 --> 00:07:21.141 line:-1 align:center
It's incredibly simple to enable.


135
00:07:21.175 --> 00:07:25.546 line:-2 align:center
Just set the text content type to currency
when specifying text recognition


136
00:07:25,579 --> 00:07:27,848 line:-1
in the data scanner's initializer,


137
00:07:27.881 --> 00:07:30.851 line:-2 align:center
just as you would other content types
like email addresses


138
00:07:30,884 --> 00:07:32,586 line:-1
or telephone numbers.


139
00:07:32.619 --> 00:07:37.925 line:-2 align:center
Now I'm going to explore this new type
in more detail with a quick example.


140
00:07:37,958 --> 00:07:41,228 line:-2
When the data scanner recognizes
currency in text,


141
00:07:41,261 --> 00:07:44,631 line:-2
It contains both
a bounds and a transcript.


142
00:07:44,665 --> 00:07:49,336 line:-2
The transcript has both
the currency symbol and the amount.


143
00:07:49.369 --> 00:07:52.239 line:-2 align:center
Here's an example where I find
the total of all the values


144
00:07:52,272 --> 00:07:54,341 line:-1
on something like a receipt.


145
00:07:54,374 --> 00:07:57,477 line:-2
First, I get the currency symbol
using the current locale.


146
00:07:58,745 --> 00:08:02,482 line:-2
While awaiting the data scanner's results
in the recognizedItems stream,


147
00:08:02,516 --> 00:08:04,718 line:-2
I can loop through each of
the recognized items


148
00:08:04,751 --> 00:08:07,354 line:-1
and grab its transcript.


149
00:08:07.387 --> 00:08:10.991 line:-2 align:center
If the transcript contains
the currency symbol I'm interested in,


150
00:08:11,024 --> 00:08:13,727 line:-1
I'll go ahead and update the total value.


151
00:08:13,760 --> 00:08:16,830 line:-2
And just like that,
now you'll have the sum of all values.


152
00:08:16,864 --> 00:08:20,400 line:-2
This is just a simple example,
but this can very powerful,


153
00:08:20,434 --> 00:08:23,203 line:-2
I'm excited to see
what you can build with this.


154
00:08:23.237 --> 00:08:26.673 line:-2 align:center
And now I'm going to talk about
enhancements to Live Text.


155
00:08:27.774 --> 00:08:31.678 line:-2 align:center
First off,
Live Text is coming to more regions


156
00:08:31,712 --> 00:08:36,316 line:-2
by expanding our supported languages
to include Thai and Vietnamese.


157
00:08:36.350 --> 00:08:38.085 line:-1 align:center
Live Text includes enhancements


158
00:08:38,118 --> 00:08:40,888 line:-2
for document structure detection
as well this year.


159
00:08:40,921 --> 00:08:43,857 line:-2
Document structure detection?
What does that even mean?


160
00:08:43.891 --> 00:08:45.626 line:-1 align:center
Well, as an example,


161
00:08:45.659 --> 00:08:49.630 line:-2 align:center
in iOS 16
Live Text supported list detection.


162
00:08:49.663 --> 00:08:54.668 line:-2 align:center
This allows you to easily copy and paste
a list into an app that understands lists,


163
00:08:54,701 --> 00:08:57,838 line:-2
such as Notes, and the list formatting
will be maintained.


164
00:08:57.871 --> 00:09:01.875 line:-2 align:center
Live Text handles several list styles,
such as numbers or bullets.


165
00:09:01,909 --> 00:09:05,546 line:-2
And now, Live Text is offering
the same support for Tables,


166
00:09:05.579 --> 00:09:09.016 line:-2 align:center
making it far easier
to get structured table data from an image


167
00:09:09.049 --> 00:09:12.219 line:-1 align:center
into applications like Notes or Numbers.


168
00:09:12,252 --> 00:09:16,089 line:-2
Now I can select, copy, and paste
this table into Numbers,


169
00:09:16,123 --> 00:09:18,492 line:-1
and the structure is maintained.


170
00:09:18.525 --> 00:09:22.062 line:-2 align:center
Notice how it merges cells automatically
if necessary.


171
00:09:22.095 --> 00:09:24.898 line:-2 align:center
And just like that,
I'm now just a few clicks away


172
00:09:24.932 --> 00:09:27.935 line:-2 align:center
from visualizing this information
in a graph.


173
00:09:27,968 --> 00:09:29,436 line:-1
Nice.


174
00:09:29.469 --> 00:09:31.238 line:-1 align:center
And that's not all.


175
00:09:31.271 --> 00:09:35.075 line:-2 align:center
We are also adding
Context Aware Data Detectors in Live Text.


176
00:09:35.108 --> 00:09:38.645 line:-2 align:center
For this feature, data detectors
and their visual relationships


177
00:09:38,679 --> 00:09:41,682 line:-1
are used when adding contacts.


178
00:09:41,715 --> 00:09:45,085 line:-2
Notice how when I add this contact
from an email address,


179
00:09:45,118 --> 00:09:49,523 line:-2
additional information from surrounding
data detectors are now included,


180
00:09:49.556 --> 00:09:53.160 line:-2 align:center
allowing me to easily add
all this information at once.


181
00:09:53.193 --> 00:09:57.698 line:-2 align:center
Adding a contact from a business card
or flyer has never been easier.


182
00:09:57,731 --> 00:10:01,235 line:-2
In addition to these great features
you are also getting for free,


183
00:10:01,268 --> 00:10:04,705 line:-2
VisionKit also has some new APIs
specifically for text.


184
00:10:04,738 --> 00:10:08,509 line:-2
Last year,
you could get the entire text contents


185
00:10:08,542 --> 00:10:12,379 line:-2
by accessing the transcript property
on the image analysis.


186
00:10:12,412 --> 00:10:15,182 line:-2
Based on your feedback,
you now have full access


187
00:10:15.215 --> 00:10:17.618 line:-2 align:center
to plain and attributed text,
selected ranges,


188
00:10:17,651 --> 00:10:20,320 line:-1
and easy access to selected text.


189
00:10:20,354 --> 00:10:22,823 line:-2
There is also a new delegate method
so you can be aware


190
00:10:22.856 --> 00:10:27.694 line:-2 align:center
when the text selection changes
and update your UI as appropriate.


191
00:10:27,728 --> 00:10:31,632 line:-2
It is now easy to add features
that rely on what the user has selected.


192
00:10:31.665 --> 00:10:34.601 line:-1 align:center
For example, using the menu builder API,


193
00:10:34,635 --> 00:10:35,836 line:-1
you could insert a menu item


194
00:10:35,869 --> 00:10:38,906 line:-2
that creates a reminder
based on the current text selection.


195
00:10:38.939 --> 00:10:42.776 line:-2 align:center
Start in the view controller that owns
your image analysis interaction.


196
00:10:42,809 --> 00:10:45,612 line:-1
First grab the selected text,


197
00:10:45.646 --> 00:10:47.514 line:-1 align:center
and ensure it isn't empty.


198
00:10:47.548 --> 00:10:51.051 line:-2 align:center
Then create a command
that calls our handler when chosen,


199
00:10:51.084 --> 00:10:54.454 line:-2 align:center
Now create a menu object
that holds the command.


200
00:10:54.488 --> 00:10:59.326 line:-2 align:center
And finally, insert that menu as a sibling
after the share menu option.


201
00:10:59,359 --> 00:11:00,861 line:-1
Now you have a custom menu


202
00:11:00,894 --> 00:11:04,798 line:-2
alongside system items
like copy and share.


203
00:11:04,831 --> 00:11:08,335 line:-2
Now I'm going to talk about
our expanded platform support.


204
00:11:08.368 --> 00:11:10.537 line:-1 align:center
And this year, it's all about the Mac.


205
00:11:10.571 --> 00:11:13.507 line:-2 align:center
We are rolling out Catalyst support
to easily bring Live Text


206
00:11:13.540 --> 00:11:16.410 line:-1 align:center
from your iOS apps over to the Mac.


207
00:11:16,443 --> 00:11:20,881 line:-2
And if you're new to the native macOS API
and the ImageAnalysisOverlayView,


208
00:11:20,914 --> 00:11:23,750 line:-2
stay tuned, because I'm going to go over
some specifics,


209
00:11:23,784 --> 00:11:26,119 line:-1
as well as some tips on adopting them.


210
00:11:26.153 --> 00:11:29.456 line:-2 align:center
Finally, I am going to talk about
a new system for menus,


211
00:11:29.489 --> 00:11:34.394 line:-2 align:center
offering simple and seamless integration
of VisionKit into your contextual menus.


212
00:11:34.428 --> 00:11:37.297 line:-1 align:center
Catalyst adoption is very straightforward.


213
00:11:37.331 --> 00:11:38.799 line:-1 align:center
It should be a simple recompile


214
00:11:38,832 --> 00:11:42,069 line:-2
to get the image analysis interaction
working in Catalyst.


215
00:11:42.102 --> 00:11:45.873 line:-2 align:center
We support, Live Text,
Subject Lifting and Visual Look Up,


216
00:11:45,906 --> 00:11:48,809 line:-2
but unfortunately QR code support
is unavailable


217
00:11:48,842 --> 00:11:53,580 line:-2
in either the Catalyst environment
or native macOS API for VisionKit.


218
00:11:53,614 --> 00:11:55,649 line:-1
However, I wanted to let you know


219
00:11:55,682 --> 00:11:58,018 line:-1
that if you have a shared implementation,


220
00:11:58.051 --> 00:12:01.922 line:-2 align:center
leaving the .machineReadableCodes in
your analyzer configuration for Catalyst


221
00:12:01,955 --> 00:12:04,992 line:-2
is perfectly safe,
and just becomes a no-op.


222
00:12:05,025 --> 00:12:07,828 line:0
Also, please note
that QR detection support


223
00:12:07,861 --> 00:12:09,796 line:0
is available in the Vision Framework


224
00:12:09,830 --> 00:12:12,866 align:center
if you need this functionality on the Mac.


225
00:12:14.601 --> 00:12:18.539 line:-2 align:center
Now I'm gong to transition
to the native macOS API.


226
00:12:18,572 --> 00:12:21,842 line:-2
As with iOS, there are two major classes
you need to be aware of


227
00:12:21,875 --> 00:12:23,577 line:-1
when adopting VisionKit:


228
00:12:23,610 --> 00:12:27,214 line:-2
the ImageAnalyzer
and the ImageAnalysisOverlayView.


229
00:12:27,247 --> 00:12:29,149 line:-1
First, the easy part.


230
00:12:29,183 --> 00:12:34,254 line:-2
The Image Analyzer and analysis process
for the Mac is identical to iOS.


231
00:12:34.288 --> 00:12:36.890 line:-2 align:center
With the exception of machine readable
codes being a no-op,


232
00:12:36.924 --> 00:12:38.592 line:-1 align:center
as I mentioned earlier,


233
00:12:38.625 --> 00:12:41.762 line:-2 align:center
everything is the same
and is used in the same way.


234
00:12:41.795 --> 00:12:45.465 line:-2 align:center
The main difference between
the iOS ImageAnalysisInteraction,


235
00:12:45.499 --> 00:12:48.468 line:-1 align:center
and macOS's ImageAnalysisOverlayView


236
00:12:48,502 --> 00:12:51,805 line:-2
is how the interaction
is added to your application.


237
00:12:51,839 --> 00:12:57,044 line:-2
For iOS, the ImageAnalysisInteraction is
a UIInteraction that is added to a view,


238
00:12:57,077 --> 00:13:00,180 line:-2
already existing
in your apps view hierarchy.


239
00:13:00.214 --> 00:13:03.016 line:-2 align:center
But UIInteraction does not exist
on the Mac.


240
00:13:03.050 --> 00:13:05.085 line:-1 align:center
So what do you do?


241
00:13:05.118 --> 00:13:07.654 line:-1 align:center
In this case, as the name suggests,


242
00:13:07.688 --> 00:13:11.592 line:-2 align:center
the image analysis overlay view
is a subclass of NSView.


243
00:13:11.625 --> 00:13:17.698 line:-2 align:center
I simply need to add the overlay view in
my view hierarchy above my image content.


244
00:13:17,731 --> 00:13:20,434 line:-1
I can add it, for example, here.


245
00:13:20.467 --> 00:13:21.869 line:-1 align:center
Or even here.


246
00:13:21.902 --> 00:13:26.874 line:-2 align:center
But the simplest way is to add it
as a sub view of my content view.


247
00:13:26.907 --> 00:13:28.876 line:-1 align:center
Any way you choose is perfectly fine,


248
00:13:28,909 --> 00:13:31,545 line:-2
but I've found adding it as a subView
is generally simpler,


249
00:13:31.578 --> 00:13:35.415 line:-2 align:center
and easier to manage as you don't have to
handle repositioning the overlay view


250
00:13:35,449 --> 00:13:38,952 line:-1
when the contents view position changes.


251
00:13:38.986 --> 00:13:41.855 line:-2 align:center
And now you know how
and where to add it to your app,


252
00:13:41,889 --> 00:13:44,057 line:-1
Let's talk rectangles.


253
00:13:44,091 --> 00:13:47,594 line:-2
Since the OverlayView doesn't host
or render your content,


254
00:13:47.628 --> 00:13:51.932 line:-2 align:center
it needs to know exactly where the
content exists in relation to its bounds.


255
00:13:51,965 --> 00:13:54,134 line:-1
This is described by the contentsRect,


256
00:13:54,168 --> 00:13:58,172 line:-2
which is in unit coordinate space
with the origin at the top left.


257
00:13:58,205 --> 00:14:00,307 line:-1
Wow, that was a mouthful.


258
00:14:00,340 --> 00:14:02,943 line:-1
A quick example should help clarify this.


259
00:14:02,976 --> 00:14:05,979 line:-2
Since the overlay view is placed
directly over the imageView,


260
00:14:06.013 --> 00:14:07.781 line:-1 align:center
they have same bounds.


261
00:14:07.814 --> 00:14:10.350 line:-1 align:center
I'll show the bounds with this rectangle.


262
00:14:10.384 --> 00:14:13.053 line:-2 align:center
And I'll also add
its matching contents rect.


263
00:14:13.086 --> 00:14:16.190 line:-2 align:center
Easiest case is if
the content matches the bounds.


264
00:14:16,223 --> 00:14:19,092 line:-1
Here it's simply the unit rectangle.


265
00:14:19,126 --> 00:14:21,061 line:-1
Now, here is an aspect fit.


266
00:14:21.094 --> 00:14:24.965 line:-2 align:center
Notice this portion of the imageView
now has no content underneath it.


267
00:14:24.998 --> 00:14:27.835 line:-1 align:center
And is reflected in the contents rect.


268
00:14:27.868 --> 00:14:29.870 line:-1 align:center
And here is an aspect fill.


269
00:14:29,903 --> 00:14:33,373 line:-2
This portion of the image
is no longer visible to the user,


270
00:14:33.407 --> 00:14:36.844 line:-2 align:center
Notice how the contents rect
changes here.


271
00:14:36.877 --> 00:14:38.645 line:-1 align:center
Now, some good news.


272
00:14:38.679 --> 00:14:40.647 line:-1 align:center
Just as with UIImageView on iOS,


273
00:14:40,681 --> 00:14:42,549 line:-1
if you are using NSImageView,


274
00:14:42,583 --> 00:14:46,386 line:-2
you can simply set the trackingImageView property on the overlay view,


275
00:14:46.420 --> 00:14:50.157 line:-2 align:center
and it will calculate
all of this for you automatically.


276
00:14:50,190 --> 00:14:53,460 line:-2
If you are not using NSImageView,
no worries.


277
00:14:53,493 --> 00:14:56,897 line:-2
You can provide the contents rect
by implementing the delegate method


278
00:14:56,930 --> 00:14:59,266 line:-1
contentsRect(for overlayView:)


279
00:14:59,299 --> 00:15:02,970 line:-2
The overlay view will ask for this
during layout when its bounds change.


280
00:15:03.003 --> 00:15:05.372 line:-2 align:center
However, you can manually request
this be updated


281
00:15:05,405 --> 00:15:10,444 line:-2
by calling setContentsRectNeedsUpdate
on the overlayView.


282
00:15:10,477 --> 00:15:13,347 line:-2
All righty,
let's move on to contextual menus.


283
00:15:13.380 --> 00:15:15.015 line:-1 align:center
As I'm sure you are all aware,


284
00:15:15,048 --> 00:15:18,085 line:-2
contextual menus are a huge part
of the Mac experience.


285
00:15:18.118 --> 00:15:21.054 line:-2 align:center
Now Its now easy to add
VisionKit provided functionality


286
00:15:21,088 --> 00:15:24,658 line:-2
directly into your menus,
for features such as Live Text,


287
00:15:24,691 --> 00:15:27,261 line:-1
Look Up, and Subject Lifting, and more.


288
00:15:27,294 --> 00:15:29,997 line:-1
One question you may have is, why?


289
00:15:30.030 --> 00:15:32.232 line:-1 align:center
Let's examine the macOS Photos app.


290
00:15:32.266 --> 00:15:35.736 line:-2 align:center
If I were to right click
on the text for this iconic road sign,


291
00:15:35.769 --> 00:15:39.106 line:-2 align:center
I would just be presented
with only the VisionKit text menu.


292
00:15:39.139 --> 00:15:42.442 line:-2 align:center
If it were not over text,
I would be offered the app menu instead,


293
00:15:42,476 --> 00:15:44,611 line:-1
without any text items.


294
00:15:44,645 --> 00:15:46,480 line:-1
This is not ideal.


295
00:15:46.513 --> 00:15:50.984 line:-2 align:center
Now in macOS Sonoma,
items can be combined into the same menu.


296
00:15:51.018 --> 00:15:54.221 line:-2 align:center
You can easily get to both text
and image functionality,


297
00:15:54.254 --> 00:15:56.823 line:-2 align:center
no matter where the menu event
was initiated.


298
00:15:56,857 --> 00:15:59,193 line:-2
This is a far better experience
for the user,


299
00:15:59,226 --> 00:16:01,161 line:-1
and is simple to implement.


300
00:16:01.195 --> 00:16:04.865 line:-2 align:center
Let's explore how this can be accomplished
in your own app.


301
00:16:04.898 --> 00:16:07.000 line:-2 align:center
You now have a new delegate method
available,


302
00:16:07,034 --> 00:16:09,937 line:-1
overlayview:updatedmenu:forevent:atpoint.


303
00:16:09.970 --> 00:16:12.239 line:-2 align:center
The arguments include
the event that triggered the menu,


304
00:16:12,272 --> 00:16:15,442 line:-2
and the point in the overlay view
bounds coordinate space,


305
00:16:15.475 --> 00:16:18.011 line:-1 align:center
so you can create any menus you need.


306
00:16:18,045 --> 00:16:22,883 line:-2
From there, you simply need to return
the menu that you would like to display.


307
00:16:22,916 --> 00:16:25,853 line:-2
The default implementation
returns the VisionKit menu.


308
00:16:25.886 --> 00:16:28.789 line:-2 align:center
However, you may wish to add
your own items to that menu,


309
00:16:28.822 --> 00:16:31.592 line:-2 align:center
or take items from that menu
and add it to yours.


310
00:16:32,693 --> 00:16:35,929 line:-2
VisionKit menu items
are identified by tags,


311
00:16:35,963 --> 00:16:38,832 line:-2
and there is a struct available
that contains these tags.


312
00:16:38,866 --> 00:16:41,401 line:-2
We have several items available
for copying and sharing


313
00:16:41.435 --> 00:16:44.538 line:-2 align:center
the image and subjects,
and one for Look Up.


314
00:16:44.571 --> 00:16:48.141 line:-2 align:center
We also have a special item you can use
to find the suggested index


315
00:16:48,175 --> 00:16:50,577 line:-2
to add items
to the VisionKit provided menu,


316
00:16:50,611 --> 00:16:52,145 line:-1
but more on that later.


317
00:16:52.179 --> 00:16:55.282 line:-2 align:center
Here are some examples
of how this is used.


318
00:16:55.315 --> 00:16:58.685 line:-2 align:center
If I had an existing menu
and all I were interested in was adding


319
00:16:58.719 --> 00:17:02.456 line:-2 align:center
the copySubject item,
it could be easily added like this.


320
00:17:02.489 --> 00:17:04.992 line:-1 align:center
First, get your apps menu.


321
00:17:05,025 --> 00:17:06,960 line:-1
Then get the item you are interested in.


322
00:17:06,994 --> 00:17:09,229 line:-1
In this case, copySubject.


323
00:17:09,263 --> 00:17:11,265 line:-1
And insert it in your menu.


324
00:17:11.298 --> 00:17:14.034 line:-2 align:center
Now, it's important to remember
that Items will only be available


325
00:17:14,067 --> 00:17:15,602 line:-1
if they are actually valid.


326
00:17:15.636 --> 00:17:19.473 line:-2 align:center
For example, if there's no
subject interaction capable type present,


327
00:17:19,506 --> 00:17:22,176 line:-2
the copySubject item
will not be in the menu.


328
00:17:22,209 --> 00:17:24,912 line:-1
Also, for system provided text items,


329
00:17:24,945 --> 00:17:26,446 line:-1
they are included if applicable,


330
00:17:26,480 --> 00:17:29,850 line:-1
but not all are identifiable by tag.


331
00:17:29,883 --> 00:17:32,986 line:-2
You can even customize these items
however you would wish.


332
00:17:33.020 --> 00:17:37.291 line:-2 align:center
For example, I've changed the item
from copy image to copy photo.


333
00:17:37,324 --> 00:17:39,526 line:-2
And worry not
about changing these properties.


334
00:17:39,560 --> 00:17:41,261 line:-1
These items are re-created each time


335
00:17:41,295 --> 00:17:44,097 line:-2
and you can change them
however you'd like.


336
00:17:44.131 --> 00:17:47.334 line:-2 align:center
Now that I've covered adding items
to your existing menu,


337
00:17:47,367 --> 00:17:51,438 line:-2
I'm going to explore an example
of how to add items to the VisionKit menu.


338
00:17:51,471 --> 00:17:54,107 line:-2
As mentioned earlier,
the overlayView will provide an item


339
00:17:54.141 --> 00:17:56.376 line:-1 align:center
with a tag at the recommended index


340
00:17:56.410 --> 00:17:59.713 line:-2 align:center
to insert your items
called recommendedAppItems.


341
00:17:59,746 --> 00:18:05,185 line:-2
You simply ask for the index of this item
and insert your items at that index.


342
00:18:05,219 --> 00:18:08,488 line:-2
Using this index is optional
and not required.


343
00:18:08.522 --> 00:18:11.992 line:-2 align:center
However, it is a good way
to keep things consistent for your users.


344
00:18:13,126 --> 00:18:16,530 line:-2
You will notice that some of these
menu items have special properties.


345
00:18:16,563 --> 00:18:20,534 line:-2
For example, when the subject related
menu item are highlighted,


346
00:18:20.567 --> 00:18:23.203 line:-1 align:center
the area surrounding my cat KiKi here dims


347
00:18:23,237 --> 00:18:25,172 line:-1
and the glow animation begins,


348
00:18:25.205 --> 00:18:29.710 line:-2 align:center
indicating the subject to the user
before it is copied or shared.


349
00:18:29.743 --> 00:18:33.647 line:-2 align:center
VisionKit uses the menu appearing
as a trigger to begin subject analysis,


350
00:18:33,680 --> 00:18:35,616 line:-1
if it hasn't began already.


351
00:18:35,649 --> 00:18:38,752 line:-1
This is all handled for you automatically.


352
00:18:38,785 --> 00:18:40,754 line:-1
In order to provide these features,


353
00:18:40.787 --> 00:18:42.489 line:-1 align:center
VisionKit will set itself as a delegate


354
00:18:42,523 --> 00:18:46,260 line:-2
for any menu you return
from the update menu method.


355
00:18:46,293 --> 00:18:50,163 line:-2
If you were previously relying
on these NSMenuDelegate callbacks,


356
00:18:50.197 --> 00:18:52.900 line:-2 align:center
VisionKit now provides
its own Delegate callbacks


357
00:18:52,933 --> 00:18:56,403 line:-2
allowing you to retain functionality
with your menu items


358
00:18:56,436 --> 00:18:58,839 line:-1
if you were using that previously.


359
00:18:58.872 --> 00:19:00.507 line:-1 align:center
And here's a quick tip.


360
00:19:00.541 --> 00:19:02.109 line:-1 align:center
If you are in this situation,


361
00:19:02,142 --> 00:19:04,511 line:-2
depending on where
the menu was initiated from,


362
00:19:04.545 --> 00:19:06.880 line:-1 align:center
it may not come from VisionKit.


363
00:19:06.914 --> 00:19:10.751 line:-2 align:center
So you'll likely want to keep
your existing implementation around.


364
00:19:10,784 --> 00:19:13,887 line:-2
Generally, the simplest way
to keep this all in sync


365
00:19:13,921 --> 00:19:16,323 line:-2
is to have your OverlayViewDelegate
implementation


366
00:19:16.356 --> 00:19:19.026 line:-2 align:center
call your matching
NSMenuDelegate implementation,


367
00:19:19,059 --> 00:19:21,328 line:-1
adjusting as necessary.


368
00:19:21.361 --> 00:19:23.530 line:-2 align:center
Of course,
ensure this makes sense for your app,


369
00:19:23.564 --> 00:19:26.233 line:-2 align:center
but in general,
this usually does the trick.


370
00:19:26.266 --> 00:19:29.603 line:-2 align:center
And that's a quick overview
of what's new in VisionKit.


371
00:19:29.636 --> 00:19:33.273 line:-2 align:center
It has been my pleasure to spend time
with you today discussing Subject Lifting


372
00:19:33,307 --> 00:19:34,741 line:-1
and Visual Look Up,


373
00:19:34.775 --> 00:19:38.579 line:-2 align:center
as well as of our new macOS APIs
and related information.


374
00:19:38.612 --> 00:19:41.615 line:-2 align:center
I'm looking forward to hear
how you use these new capabilities


375
00:19:41.648 --> 00:19:43.984 line:-1 align:center
to delight and surprise your customers.


376
00:19:44,017 --> 00:19:47,621 line:-2
And seriously, as always,
please have fun!


377
00:19:48.021 --> 00:19:49.223 line:-1 align:center
Thank you!

