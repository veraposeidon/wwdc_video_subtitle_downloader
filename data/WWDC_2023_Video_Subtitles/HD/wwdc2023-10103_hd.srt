2
00:00:00,334 --> 00:00:03,303 line:-1
[dreamy upbeat music]


3
00:00:03,337 --> 00:00:09,977 line:-1
♪ ♪


4
00:00:11,111 --> 00:00:12,179 line:-1
Roman Efimov: Hello, everyone.


5
00:00:12,212 --> 00:00:16,283 line:-2
My name is Roman Efimov,
and I’m an Engineer on the Shortcuts team.


6
00:00:16.316 --> 00:00:21.188 line:-2 align:center
Today, I'll be covering some exciting new
features and enhancements in App Intents,


7
00:00:21,221 --> 00:00:23,891 line:-1
helping you create even better apps.


8
00:00:23.924 --> 00:00:26.260 line:-1 align:center
First, I'm going to start with widgets.


9
00:00:26.293 --> 00:00:29.630 line:-2 align:center
As you know, widgets have become
an increasingly important part


10
00:00:29,663 --> 00:00:31,899 line:-1
of the iOS user experience.


11
00:00:31,932 --> 00:00:35,802 line:-2
And now, App Intents and widgets
work seamlessly together


12
00:00:35.836 --> 00:00:40.974 line:-2 align:center
to provide new experiences
through interactivity and configuration.


13
00:00:41,008 --> 00:00:44,311 line:-2
Next, I'll move on to
the improvements in developer experience


14
00:00:44.344 --> 00:00:45.879 line:-1 align:center
that we made this year.


15
00:00:45.913 --> 00:00:49.716 line:-2 align:center
I will cover some quality improvements,
such as framework support,


16
00:00:49.750 --> 00:00:53.654 line:-2 align:center
as well as some recent enhancements
to static extraction.


17
00:00:53,687 --> 00:00:56,089 line:-1
And finally, I’ll dive into updates to


18
00:00:56.123 --> 00:00:59.526 line:-2 align:center
the Shortcuts app integration
with App Intents.


19
00:00:59,560 --> 00:01:01,361 line:-1
We have a pretty packed agenda,


20
00:01:01.395 --> 00:01:05.732 line:-2 align:center
so let’s get started with a couple of
exciting updates to widgets.


21
00:01:05,766 --> 00:01:09,770 line:-2
First, let's talk about
widget configuration.


22
00:01:09,803 --> 00:01:12,239 line:-1
When you create a configurable widget,


23
00:01:12,272 --> 00:01:16,176 line:-2
you can specify the options you want
the person to be able to select


24
00:01:16,210 --> 00:01:19,279 line:-1
on the backside of the widget.


25
00:01:19,313 --> 00:01:22,716 line:-1
These options are called parameters,


26
00:01:22,749 --> 00:01:26,186 line:-2
and you can define them using
the same system that you use


27
00:01:26,220 --> 00:01:31,124 line:-2
to add support for Siri and Shortcuts
to your app: Intents.


28
00:01:31.158 --> 00:01:36.063 line:-2 align:center
The configuration UI of a widget
displays an ordered list of parameters


29
00:01:36,096 --> 00:01:39,266 line:-2
that are included in
the corresponding Intent.


30
00:01:39.299 --> 00:01:41.502 line:-1 align:center
Each parameter added to the Intent


31
00:01:41,535 --> 00:01:46,507 line:-2
is presented as a row in
the widget configuration interface.


32
00:01:46,540 --> 00:01:50,110 line:-2
In the past, you had to declare
your Intents in Xcode


33
00:01:50,143 --> 00:01:53,213 line:-1
using an Intent Definition File.


34
00:01:53,247 --> 00:01:56,917 line:-2
Now in iOS 17,
we have made it even simpler


35
00:01:56.950 --> 00:01:59.720 line:-2 align:center
to define the schema of
your widget's configuration


36
00:01:59,753 --> 00:02:02,823 line:-2
using App Intents
right in your Widget extension code.


37
00:02:04,892 --> 00:02:10,230 line:-2
To do that, first, you will need to start
using the AppIntentConfiguration


38
00:02:10,264 --> 00:02:14,268 line:-2
WidgetConfiguration type
instead of the IntentConfiguration


39
00:02:14,301 --> 00:02:17,905 line:-2
that you may have used previously
to configure your widget.


40
00:02:17,938 --> 00:02:24,077 align:center
Next, define a new type that conforms
to the WidgetConfigurationIntent protocol.


41
00:02:24,111 --> 00:02:28,782 align:center
WidgetConfigurationIntent is
a sub-protocol of App Intent,


42
00:02:28,815 --> 00:02:33,320 line:0
and you can conform to it directly in
your Widget Extension code.


43
00:02:33,353 --> 00:02:36,490 align:center
I've been working on a widget
for my bus schedule app


44
00:02:36.523 --> 00:02:41.929 line:-2 align:center
that displays the time and route of the
next scheduled bus for a particular stop.


45
00:02:41,962 --> 00:02:45,832 line:-2
This would allow people to quickly check
when the next bus is arriving


46
00:02:45,866 --> 00:02:48,535 line:-1
without having to open the full app.


47
00:02:48,569 --> 00:02:53,340 line:-2
I will be using App Intents to provide
the configuration Intent for my widget.


48
00:02:53.373 --> 00:02:56.243 line:-2 align:center
To let users configure
my Next Bus widget,


49
00:02:56.276 --> 00:02:58.445 line:-1 align:center
I'm going to start by defining a struct


50
00:02:58,478 --> 00:03:02,282 line:-2
that conforms to the
WidgetConfigurationIntent protocol


51
00:03:02.316 --> 00:03:05.619 line:-1 align:center
and includes the following parameters:


52
00:03:05,652 --> 00:03:12,259 line:-2
a Bus Stop, chosen from the list of saved
stops or by searching for a new stop,


53
00:03:12.292 --> 00:03:14.862 line:-1 align:center
a specific bus Route,


54
00:03:14.895 --> 00:03:18.432 line:-2 align:center
and a Direction of travel
for the selected route.


55
00:03:18,465 --> 00:03:23,036 line:-2
Once I finish defining the parameters
required to configure my widget,


56
00:03:23,070 --> 00:03:28,609 line:-2
I'll need to provide dynamic options
for each of the parameter types.


57
00:03:28,642 --> 00:03:32,112 line:-2
In the past,
providing dynamic options for a parameter


58
00:03:32,145 --> 00:03:35,215 line:-2
required creating
a separate Intents extension.


59
00:03:35,249 --> 00:03:39,720 line:-2
With App Intents, I can implement queries
and dynamic option providers


60
00:03:39.753 --> 00:03:42.155 line:-1 align:center
directly within my widget extension,


61
00:03:42.189 --> 00:03:45.325 line:-2 align:center
leading to a cleaner
and more efficient project.


62
00:03:45,359 --> 00:03:48,629 line:0
To learn more about
dynamic options providers and queries,


63
00:03:48,662 --> 00:03:52,833 align:center
I would suggest checking out
the “Dive into App Intents” video.


64
00:03:52.866 --> 00:03:55.602 line:-2 align:center
Now, let's talk about migrating
your existing widgets


65
00:03:55,636 --> 00:03:57,905 line:-1
from SiriKit to App Intents.


66
00:03:57,938 --> 00:04:02,242 line:-2
Migrating your existing widget
configuration to App Intents is easy.


67
00:04:02,276 --> 00:04:06,280 line:-2
In fact, it can be done with
a single click in Xcode.


68
00:04:06,313 --> 00:04:09,850 line:-2
Migrating your widget lets you support
both the latest OS version,


69
00:04:09,883 --> 00:04:15,689 line:-2
and previous versions before you were able
to convert your Widget to App Intents.


70
00:04:15,722 --> 00:04:18,859 line:-2
Existing configured widgets can
continue working.


71
00:04:18,892 --> 00:04:22,229 line:-2
Once you no longer need to support
previous OS versions,


72
00:04:22,262 --> 00:04:25,299 line:-2
you can remove your SiriKit Intent
definition file.


73
00:04:25.332 --> 00:04:29.837 line:-2 align:center
To migrate, navigate to
your SiriKit widget configuration Intent


74
00:04:29,870 --> 00:04:32,706 line:-1
within your Intent definition file


75
00:04:32.739 --> 00:04:36.043 line:-2 align:center
and click
the Convert to App Intent button.


76
00:04:36.076 --> 00:04:38.645 line:-1 align:center
Xcode will produce App Intents code


77
00:04:38.679 --> 00:04:42.749 line:-2 align:center
that is equivalent to
your old Intent definition.


78
00:04:42,783 --> 00:04:45,886 line:-2
You will need to ensure that
the schema stays the same,


79
00:04:45,919 --> 00:04:49,489 line:-2
meaning that all App Intent
parameter names and types


80
00:04:49.523 --> 00:04:53.227 line:-2 align:center
should match what you had
in your Intent definition.


81
00:04:53,260 --> 00:04:56,363 line:0
Feel free to add new parameters
to your App Intent.


82
00:04:56,396 --> 00:05:01,902 line:0
You can add an optional parameter or even
a required one that has a default value.


83
00:05:01,935 --> 00:05:05,572 align:center
Existing widgets,
created before the parameter was added,


84
00:05:05,606 --> 00:05:08,175 line:0
will pick up an empty value
for that parameter


85
00:05:08,208 --> 00:05:10,978 align:center
or a default value if you've provided one.


86
00:05:11,011 --> 00:05:14,715 line:-2
If you do plan to support
people on previous iOS versions


87
00:05:14,748 --> 00:05:16,884 line:-1
and let them use that new parameter,


88
00:05:16,917 --> 00:05:20,220 line:-2
then you will need to maintain
your SiriKit Intent definition file


89
00:05:20,254 --> 00:05:22,890 line:-2
and add that new parameter in there,
as well.


90
00:05:22,923 --> 00:05:25,459 line:-1
Whenever a customer updates your app,


91
00:05:25,492 --> 00:05:28,128 line:-2
their widget
will get automatically migrated.


92
00:05:28,161 --> 00:05:31,331 line:-2
It is crucial to test that
the migration goes smoothly,


93
00:05:31,365 --> 00:05:35,068 line:-2
as your app will only have
one opportunity to do so.


94
00:05:35,102 --> 00:05:38,105 align:center
To learn more about migration,
I encourage you to watch


95
00:05:38,138 --> 00:05:41,441 align:center
the “Migrate custom Intents
to App Intents” video.


96
00:05:41.475 --> 00:05:44.978 line:-1 align:center
Moving on to interactivity in widgets.


97
00:05:45.012 --> 00:05:48.282 line:-2 align:center
Widgets can now react to
button taps and toggles,


98
00:05:48.315 --> 00:05:50.984 line:-2 align:center
allowing people to adjust settings,
play media,


99
00:05:51,018 --> 00:05:54,855 line:-2
or access any other
important functionality from your app


100
00:05:54,888 --> 00:05:57,891 line:-1
right from their homescreen.


101
00:05:57.925 --> 00:06:02.863 line:-2 align:center
In my Next Bus widget, I would like to
make the time buttons tappable.


102
00:06:02,896 --> 00:06:07,134 line:-2
When people tap one of these buttons,
I want to set an alarm in my app,


103
00:06:07.167 --> 00:06:09.503 line:-2 align:center
ensuring that they know
exactly when to leave,


104
00:06:09.536 --> 00:06:11.772 line:-1 align:center
so they don't miss their bus!


105
00:06:11,805 --> 00:06:13,941 line:-1
How can I do that?


106
00:06:13,974 --> 00:06:18,278 line:-2
SwiftUI Buttons and Toggles have been
updated to support App Intents,


107
00:06:18.312 --> 00:06:21.949 line:-2 align:center
making it easy to add
interactivity to widgets.


108
00:06:21.982 --> 00:06:27.087 line:-2 align:center
If you implemented an App Intent before,
you should be instantly familiar with it.


109
00:06:27.120 --> 00:06:32.659 line:-2 align:center
First, I would need to define a struct
that conforms to the App Intent protocol.


110
00:06:32.693 --> 00:06:37.497 line:-2 align:center
Then, annotate any key properties with
the Parameter property wrapper


111
00:06:37,531 --> 00:06:40,534 line:-2
to let the system know
I need the associated information


112
00:06:40.567 --> 00:06:43.136 line:-1 align:center
to perform the action.


113
00:06:43,170 --> 00:06:46,039 line:-2
After that, I need to implement
the perform method


114
00:06:46,073 --> 00:06:48,642 line:-1
that would actually execute the action.


115
00:06:48,675 --> 00:06:50,878 line:-1
Finally, in my Widget view,


116
00:06:50,911 --> 00:06:56,783 line:-2
I simply associate my SetAlarm
App Intent with a Button.


117
00:06:56,817 --> 00:07:01,154 line:-2
SwiftUI integration with App Intents is
not only available for interactive widgets


118
00:07:01.188 --> 00:07:04.858 line:-1 align:center
but also for regular SwiftUI apps.


119
00:07:04.892 --> 00:07:07.794 line:-2 align:center
By consolidating the code
into App Intents,


120
00:07:07.828 --> 00:07:12.266 line:-2 align:center
you can reduce redundancy and ensure
consistent behavior across your app.


121
00:07:12,299 --> 00:07:15,636 line:-2
Since App Intents serve both
as a configuration


122
00:07:15,669 --> 00:07:17,971 line:-1
and as providers of interactive actions,


123
00:07:18,005 --> 00:07:21,475 line:-2
it is quite easy to reuse
the Intent code for Shortcuts.


124
00:07:21.508 --> 00:07:25.612 line:-2 align:center
For example, my ShowNextBus
widget configuration Intent


125
00:07:25,646 --> 00:07:30,484 line:-2
can be used as both a widget configuration
and a Shortcuts action


126
00:07:30.517 --> 00:07:34.955 line:-2 align:center
that can provide me with
up-to-date information when I need it.


127
00:07:34,988 --> 00:07:39,359 line:-2
In addition, the App Intent I used
to add interactivity to my widget


128
00:07:39.393 --> 00:07:41.929 line:-1 align:center
also serves as a great Shortcuts action,


129
00:07:41.962 --> 00:07:46.733 line:-2 align:center
allowing people to set the alarm
for their preferred bus arrival time.


130
00:07:46,767 --> 00:07:49,136 align:center
To learn more about Widget Interactivity,


131
00:07:49,169 --> 00:07:52,472 align:center
check out “Bring your widget to life”.


132
00:07:52,506 --> 00:07:54,608 line:-2
Let’s move on
to several advanced techniques


133
00:07:54.641 --> 00:07:59.479 line:-2 align:center
that can enhance the functionality and
design of your Widget configuration.


134
00:07:59,513 --> 00:08:04,218 line:-2
First, let’s talk about enhancements to
Dynamic options and queries.


135
00:08:04,251 --> 00:08:08,956 line:-2
Dynamic options is an interface
for providing the available values


136
00:08:08,989 --> 00:08:11,592 line:-1
for a parameter of your App Intent,


137
00:08:11.625 --> 00:08:15.662 line:-2 align:center
and it can be implemented by conforming to
DynamicOptionsProvider


138
00:08:15,696 --> 00:08:19,399 line:-1
or EntityQuery family of protocols.


139
00:08:19,433 --> 00:08:24,271 line:-2
In some cases, you may want to
show options that are only available


140
00:08:24,304 --> 00:08:29,042 line:-2
when a certain condition based on
the value of another parameter is met.


141
00:08:29,076 --> 00:08:32,079 line:-1
For example, in my widget configuration,


142
00:08:32,112 --> 00:08:36,149 line:-2
I want to display only the route options
that are available


143
00:08:36.183 --> 00:08:39.286 line:-1 align:center
based on the Bus Stop parameter.


144
00:08:39,319 --> 00:08:46,260 line:-2
To do that, I can use a new API in iOS 17
called IntentParameterDependency.


145
00:08:46.293 --> 00:08:50.831 line:-2 align:center
It is a property wrapper that lets you
access parameters from your Intents,


146
00:08:50,864 --> 00:08:54,668 line:-1
within a DynamicOptionsProvider or Query.


147
00:08:54,701 --> 00:08:57,604 line:-2
You can read these parameters
and use them to create


148
00:08:57,638 --> 00:09:01,041 line:-1
more dynamic and context-aware options.


149
00:09:01,074 --> 00:09:04,845 line:-2
In my example,
I return the available bus routes


150
00:09:04,878 --> 00:09:07,948 line:-1
filtered by the user's selected bus stop.


151
00:09:07.981 --> 00:09:11.385 line:-2 align:center
IntentParameterDependency works in
all environments,


152
00:09:11,418 --> 00:09:15,589 line:-2
such as Widgets, Shortcuts,
and Focus Filters.


153
00:09:15.622 --> 00:09:18.859 line:-2 align:center
In my example,
I have a struct called BusRouteQuery


154
00:09:18.892 --> 00:09:22.196 line:-1 align:center
that conforms to the EntityQuery protocol.


155
00:09:22.229 --> 00:09:26.934 line:-2 align:center
This struct has a property called
ShowNextBus, which is wrapped with


156
00:09:26,967 --> 00:09:29,970 line:-2
the IntentParameterDependency
property wrapper.


157
00:09:30.003 --> 00:09:33.640 line:-2 align:center
This means that the Bus Route query
has a dependency


158
00:09:33.674 --> 00:09:39.313 line:-2 align:center
on the showNextBus App Intent,
specifically on the bus stop parameter.


159
00:09:39.346 --> 00:09:42.115 line:-1 align:center
Notice the suggestedEntities method.


160
00:09:42,149 --> 00:09:45,519 line:-2
It returns an array of
suggested Route objects.


161
00:09:45,552 --> 00:09:50,591 line:-2
It first checks if the showNextBus
Intent property is non-nil.


162
00:09:50.624 --> 00:09:53.560 line:-1 align:center
If so, it filters the available routes


163
00:09:53,594 --> 00:09:59,233 line:-2
so that the person will only see routes
that match their specified bus stop.


164
00:09:59.266 --> 00:10:03.971 line:-2 align:center
IntentParameterDependency can
also depend on multiple parameters.


165
00:10:04.004 --> 00:10:07.074 line:-2 align:center
For example, in my direction query,
I want to rely on


166
00:10:07,107 --> 00:10:12,346 line:-2
both the bus stop and route parameters
to provide the direction options.


167
00:10:12,379 --> 00:10:16,517 line:-2
You can also depend on multiple
App Intents within the same query


168
00:10:16,550 --> 00:10:18,785 line:-1
or dynamic options provider.


169
00:10:18.819 --> 00:10:22.289 line:-2 align:center
My direction query reads parameters
from two Intents:


170
00:10:22.322 --> 00:10:26.026 line:-1 align:center
ShowNextBus and ShowFavoriteRoute.


171
00:10:26,059 --> 00:10:28,962 line:-2
The IntentParameterDependency
property wrapper is used to


172
00:10:28,996 --> 00:10:31,732 line:-1
specify the dependencies on the busStop


173
00:10:31,765 --> 00:10:35,469 line:-2
and route parameters
for ShowNextBus Intent,


174
00:10:35.502 --> 00:10:39.806 line:-2 align:center
and the route parameter for
ShowFavoriteRoute Intent.


175
00:10:39,840 --> 00:10:42,743 line:-2
The route computed property
returns the value from


176
00:10:42,776 --> 00:10:48,782 line:-2
either showNextBus or showFavoriteRoute,
depending on which one is available.


177
00:10:50,584 --> 00:10:54,521 line:-2
Widget Configurations
often have array parameters.


178
00:10:54,555 --> 00:10:57,057 line:-1
For instance, my Favorite Routes widget


179
00:10:57.090 --> 00:11:00.394 line:-2 align:center
can display the bus schedules for
a person's favorite routes.


180
00:11:00.427 --> 00:11:02.996 line:-1 align:center
However, due to limited screen space,


181
00:11:03,030 --> 00:11:06,533 line:-2
a person should be able to select
only up to three routes.


182
00:11:06.567 --> 00:11:09.069 line:-1 align:center
So how can I declare that?


183
00:11:09.102 --> 00:11:15.275 line:-2 align:center
New in iOS 17, you can now declare
the size when defining an Array parameter.


184
00:11:15.309 --> 00:11:20.714 line:-2 align:center
The size here can also accept a mapping
from the widget family to the array size


185
00:11:20,747 --> 00:11:25,452 line:-2
since sometimes larger widgets can
accommodate more items than smaller ones.


186
00:11:25,485 --> 00:11:28,555 line:-2
Once I have defined
my Widget Configuration App Intent


187
00:11:28,589 --> 00:11:30,357 line:-1
and its parameters,


188
00:11:30,390 --> 00:11:35,295 line:-2
I might want to define which of these
parameters are shown to the user and when.


189
00:11:35,329 --> 00:11:38,165 line:-2
ParameterSummary defines
the visual representation


190
00:11:38,198 --> 00:11:40,467 line:-1
of an App Intent’s parameters.


191
00:11:40,501 --> 00:11:44,071 line:-2
It powers the appearance of
your App Intent in the Shortcuts editor,


192
00:11:44.104 --> 00:11:47.908 line:-2 align:center
Focus Filters,
and now in Widget Configuration.


193
00:11:47,941 --> 00:11:51,979 line:-2
You can use parameter summaries
to define which parameters are shown


194
00:11:52.012 --> 00:11:54.448 line:-1 align:center
and in what conditions.


195
00:11:54.481 --> 00:11:59.686 line:-2 align:center
For Widgets, the UI will first show
the parameters in the Summary sentence


196
00:11:59.720 --> 00:12:03.857 line:-2 align:center
and then any additional parameters
listed in the closure.


197
00:12:03.891 --> 00:12:06.527 line:-2 align:center
Here, the sentence contains
the routes parameter,


198
00:12:06,560 --> 00:12:09,897 line:-1
and the closure has includeWeatherInfo,


199
00:12:09.930 --> 00:12:13.267 line:-2 align:center
so they're displayed in that order
in the configuration UI.


200
00:12:13.300 --> 00:12:18.438 line:-2 align:center
New in iOS 17, you can now use
the When statement with the widget family,


201
00:12:18,472 --> 00:12:22,609 line:-2
allowing your widget configuration
to change based on widget size.


202
00:12:22.643 --> 00:12:26.847 line:-2 align:center
For example, I want to display the toggle
that shows weather information


203
00:12:26,880 --> 00:12:32,319 line:-2
only in large widgets, while other sizes
will not have this capability.


204
00:12:32.352 --> 00:12:35.322 line:-1 align:center
So I add the includeWeatherInfo parameter


205
00:12:35,355 --> 00:12:39,059 line:-2
to the Parameter Summary,
only for large widgets.


206
00:12:39,092 --> 00:12:45,232 line:-2
Otherwise, for small widgets, I won't
add it, so the parameter is hidden.


207
00:12:45,265 --> 00:12:49,036 line:-2
Now that I've implemented configuration
for my widget using App Intents,


208
00:12:49.069 --> 00:12:52.706 line:-2 align:center
how do I determine what happens
when the person taps on it?


209
00:12:52,739 --> 00:12:57,744 line:-2
The person is taken to my app
whenever they tap anywhere in my widget.


210
00:12:57.778 --> 00:13:00.981 line:-2 align:center
I would like to take them directly to
the screen that shows information


211
00:13:01,014 --> 00:13:06,019 line:-2
about the specific route that they
selected in their widget configuration.


212
00:13:06.053 --> 00:13:09.423 line:-2 align:center
When a person taps your widget
and your app is launched,


213
00:13:09,456 --> 00:13:11,925 line:-2
you can get the associated
configuration Intent


214
00:13:11,959 --> 00:13:17,030 line:-2
by calling the widgetConfigurationIntent
method on the user activity.


215
00:13:17.064 --> 00:13:22.202 line:-2 align:center
Once you have the App Intent, you can use
it to update your app's UI accordingly.


216
00:13:22,236 --> 00:13:26,006 line:-2
Here, I extract the content from
my Configuration Intent


217
00:13:26.039 --> 00:13:29.910 line:-2 align:center
and use it to navigate my app
to the specific bus stop view


218
00:13:29.943 --> 00:13:32.279 line:-1 align:center
for the corresponding stop and route.


219
00:13:32.312 --> 00:13:34.348 line:-2 align:center
When you build a widget,
you'll want to make sure


220
00:13:34,381 --> 00:13:38,519 line:-2
people see it at just the right time
in their Smart Stacks.


221
00:13:38.552 --> 00:13:42.623 line:-2 align:center
To do that, you can use
the new RelevantContext APIs


222
00:13:42,656 --> 00:13:46,493 line:-1
for Widget suggestions on iOS and watchOS.


223
00:13:46,527 --> 00:13:49,963 line:-2
Drawing inspiration from
the previous INInteraction,


224
00:13:49.997 --> 00:13:53.901 line:-2 align:center
INDailyRoutine,
and INRelevantShortcut APIs,


225
00:13:53.934 --> 00:13:58.405 line:-2 align:center
we have designed the new
RelevantIntentManager and RelevantIntent,


226
00:13:58,438 --> 00:14:03,710 line:-2
to be more Swift-friendly and
work seamlessly with App Intents.


227
00:14:03.744 --> 00:14:08.649 line:-2 align:center
Imagine a sports app that wants to
surface its widget during games.


228
00:14:08,682 --> 00:14:11,285 line:-1
With the new RelevantContext API,


229
00:14:11.318 --> 00:14:14.354 line:-2 align:center
you can specify this Intent
and its relevant date range.


230
00:14:14,388 --> 00:14:16,590 line:-2
By providing
this relevant date information,


231
00:14:16,623 --> 00:14:21,161 line:-2
the sports app widget will automatically
be suggested within the Smart Stack,


232
00:14:21,195 --> 00:14:24,665 line:-2
ensuring that people have easy access
to the game information


233
00:14:24,698 --> 00:14:26,500 line:-1
when it's most important.


234
00:14:27,501 --> 00:14:32,472 line:0
Relevance APIs are also great for
surfacing your watch complications.


235
00:14:32,506 --> 00:14:35,576 line:0
To learn more about
the watchOS side of relevance,


236
00:14:35,609 --> 00:14:39,413 align:center
check out "Build widgets for
the Smart Stack on Apple Watch."


237
00:14:40,113 --> 00:14:41,882 line:-1
Now that we've covered Widgets,


238
00:14:41,915 --> 00:14:44,351 line:-2
let’s dive into
the developer experience improvements


239
00:14:44.384 --> 00:14:47.821 line:-1 align:center
that we’ve made in iOS 17 and Xcode 15.


240
00:14:47,855 --> 00:14:50,290 line:-1
We’ll start with Framework Support.


241
00:14:50,324 --> 00:14:53,827 line:-2
If your app requires the ability
to perform App Intents


242
00:14:53.861 --> 00:14:58.031 line:-2 align:center
from both the main app
and an App Intents extension,


243
00:14:58.065 --> 00:15:02.369 line:-2 align:center
you currently need to compile
your App Intent code into both targets.


244
00:15:02,402 --> 00:15:06,106 line:-2
Unfortunately,
this approach leads to code duplication,


245
00:15:06,139 --> 00:15:08,208 line:-1
which can introduce maintenance issues


246
00:15:08,242 --> 00:15:12,045 line:-2
and increase the likelihood of errors
or inconsistencies.


247
00:15:12,079 --> 00:15:14,281 line:-1
This also bloats the binary size,


248
00:15:14.314 --> 00:15:17.751 line:-2 align:center
which can negatively impact
the app's performance


249
00:15:17,784 --> 00:15:20,320 line:-1
and download times for people.


250
00:15:20.354 --> 00:15:23.290 line:-1 align:center
In iOS 17 and Xcode 15,


251
00:15:23,323 --> 00:15:26,560 line:-2
frameworks can now expose
App Intents directly,


252
00:15:26.593 --> 00:15:29.162 line:-2 align:center
so there's no more need to
compile your code twice.


253
00:15:29,196 --> 00:15:32,165 line:-1
You can now use the AppIntentsPackage APIs


254
00:15:32,199 --> 00:15:35,636 line:-2
to recursively import dependencies
in your app.


255
00:15:35.669 --> 00:15:39.439 line:-2 align:center
By conforming types to
the AppIntentsPackage protocol,


256
00:15:39.473 --> 00:15:45.345 line:-2 align:center
both your app and frameworks can
re-export metadata from other frameworks.


257
00:15:45,379 --> 00:15:48,148 line:-2
I'm going to use framework support
to simplify


258
00:15:48,182 --> 00:15:50,918 line:-1
the implementation of my Bus Schedule app.


259
00:15:50,951 --> 00:15:53,754 line:-2
I have a framework called
BusScheduleIntents


260
00:15:53.787 --> 00:15:58.325 line:-2 align:center
that provides various App Intents
for viewing bus schedules.


261
00:15:58.358 --> 00:16:03.730 line:-2 align:center
It makes itself available for re-exporting
without any dependencies.


262
00:16:03,764 --> 00:16:07,234 line:-2
I have another framework
called BusScheduleUI


263
00:16:07.267 --> 00:16:11.805 line:-2 align:center
that provides custom interface elements
for the Bus Schedule app.


264
00:16:11.839 --> 00:16:17.845 line:-2 align:center
This framework depends on and re-exports
the BusScheduleIntents framework.


265
00:16:17,878 --> 00:16:23,517 line:-2
Finally, I import the BusScheduleUI
framework from my Bus Schedule app.


266
00:16:23,550 --> 00:16:26,119 line:-1
Since the AppIntentsPackage is a protocol,


267
00:16:26,153 --> 00:16:29,723 line:-2
I can make my SwiftUI App struct
conform to it.


268
00:16:29,756 --> 00:16:33,327 line:-2
The Bus Schedule app only needs to mention
its direct dependency


269
00:16:33.360 --> 00:16:35.796 line:-1 align:center
on the BusScheduleUI framework.


270
00:16:35,829 --> 00:16:39,466 line:-2
I can now create a SwiftUI button
within my Bus Schedule app


271
00:16:39.499 --> 00:16:44.771 line:-2 align:center
that displays my favorite bus route
by performing the ShowSchedule App Intent.


272
00:16:44,805 --> 00:16:49,710 line:-2
The same App Intent, ShowSchedule,
is also available to Shortcuts users,


273
00:16:49,743 --> 00:16:52,479 line:-2
which means that
they can create custom Shortcuts


274
00:16:52,513 --> 00:16:58,719 line:-2
to quickly access their favorite bus route
schedules without even opening the app.


275
00:16:58,752 --> 00:17:01,688 line:-1
Moving your App Intents into Frameworks


276
00:17:01,722 --> 00:17:05,359 line:-2
helps make your codebase simpler
and more streamlined.


277
00:17:05.392 --> 00:17:08.362 line:-2 align:center
The new framework support is
especially great


278
00:17:08,395 --> 00:17:10,797 line:-1
when building Widgets with App Intents,


279
00:17:10,831 --> 00:17:13,534 line:-2
since you might need to access
the same Intents


280
00:17:13.567 --> 00:17:17.471 line:-2 align:center
from both your app,
and your Widget extension.


281
00:17:17,504 --> 00:17:21,642 line:-2
One more tip on keeping
your App Intents code more modular:


282
00:17:21,675 --> 00:17:24,011 line:-2
you can now create
an AppShortcutsProvider


283
00:17:24,044 --> 00:17:27,814 line:-2
and define App Shortcuts in
your App Intents extensions.


284
00:17:27,848 --> 00:17:30,751 line:-2
Previously, you had to define
your App Shortcuts


285
00:17:30,784 --> 00:17:33,320 line:-1
entirely in your main app bundle.


286
00:17:33.353 --> 00:17:36.757 line:-2 align:center
This would mean that your app is
always launched in the background


287
00:17:36,790 --> 00:17:38,892 line:-1
when an App Shortcut is run.


288
00:17:38,926 --> 00:17:43,096 line:-2
Now you can define your App Shortcuts
in an App Intents extension.


289
00:17:43,130 --> 00:17:48,268 line:-2
This is great for performance because you
can optimize your App Intents extension


290
00:17:48,302 --> 00:17:51,605 line:-2
to come up faster than
your entire main app


291
00:17:51.638 --> 00:17:55.676 line:-2 align:center
and avoid bringing up UI, analytics,
or other non-critical code.


292
00:17:55,709 --> 00:17:59,546 line:-2
All these features rely on
static metadata extraction enhancements


293
00:17:59.580 --> 00:18:01.882 line:-1 align:center
that we've made in Xcode 15.


294
00:18:01,915 --> 00:18:04,218 line:-2
So let's talk about how
App Intents content


295
00:18:04,251 --> 00:18:08,222 line:-2
is statically extracted
while your code is built.


296
00:18:08.255 --> 00:18:12.860 line:-2 align:center
The Swift compiler outputs information
about the types available in your code,


297
00:18:12,893 --> 00:18:16,230 line:-2
as well as type-level
and some value-level information


298
00:18:16,263 --> 00:18:19,333 line:-1
from your App Intents implementations.


299
00:18:19,366 --> 00:18:22,069 align:center
Another tool then parses this information


300
00:18:22,102 --> 00:18:27,274 line:0
to generate a Metadata.appIntents
directory in your built product,


301
00:18:27,307 --> 00:18:30,644 align:center
which contains files describing
your App Intents, parameters,


302
00:18:30,677 --> 00:18:33,247 align:center
entities, queries, and more.


303
00:18:33,280 --> 00:18:38,418 line:-2
In Xcode 15, the static extraction process
has been significantly improved.


304
00:18:38.452 --> 00:18:44.625 line:-2 align:center
It is now faster, more reliable,
and works in more cases than ever before.


305
00:18:44,658 --> 00:18:47,361 line:-1
When building your apps with Xcode 15,


306
00:18:47.394 --> 00:18:51.698 line:-2 align:center
if Xcode is unable to statically extract
something it expects,


307
00:18:51.732 --> 00:18:56.637 line:-2 align:center
you will now see error messages
directly in the Xcode editor,


308
00:18:56.670 --> 00:19:02.342 line:-2 align:center
along with line numbers, so you know
where to go and fix the problem.


309
00:19:02.376 --> 00:19:04.811 line:-2 align:center
Before we talk about
Shortcuts integration,


310
00:19:04,845 --> 00:19:09,082 line:-2
there are two more great abilities
we've added to App Intents this year


311
00:19:09,116 --> 00:19:11,218 line:-1
which are worth mentioning.


312
00:19:11.251 --> 00:19:16.190 line:-2 align:center
First up, is the ability to continue
the execution of an Intent in your app,


313
00:19:16.223 --> 00:19:19.893 line:-2 align:center
even if that Intent was previously
running in the background.


314
00:19:19,927 --> 00:19:23,897 line:-2
We call this the
ForegroundContinuableIntent protocol.


315
00:19:23,931 --> 00:19:27,534 line:-2
For example, if my App Intent
that fetches the next bus


316
00:19:27.568 --> 00:19:33.440 line:-2 align:center
fails to retrieve the bus schedule due to
invalid parameters or connectivity issues,


317
00:19:33,473 --> 00:19:37,544 line:-2
I could ask the person to continue in
the app to resolve the issue.


318
00:19:37.578 --> 00:19:40.447 line:-1 align:center
To do that, first, I conform my App Intent


319
00:19:40,480 --> 00:19:43,650 line:-2
to the ForegroundContinuableIntent
protocol.


320
00:19:43,684 --> 00:19:47,688 line:-2
The ForegroundContinuableIntent protocol
is designed for Intents that


321
00:19:47.721 --> 00:19:50.657 line:-2 align:center
initially start their work
in the background


322
00:19:50,691 --> 00:19:54,862 line:-2
but may need to request continuation
in the foreground.


323
00:19:54.895 --> 00:19:58.966 line:-2 align:center
Next, I call the
needsToContinueInForegroundError method,


324
00:19:58.999 --> 00:20:00.801 line:-1 align:center
which returns an error to me.


325
00:20:00,834 --> 00:20:04,872 line:-2
When I throw that error, the system stops
performing the App Intent


326
00:20:04,905 --> 00:20:08,208 line:-2
and asks the user to continue execution
in the foreground.


327
00:20:08,242 --> 00:20:11,111 line:-2
I can also provide
an optional continuation closure


328
00:20:11.144 --> 00:20:13.647 line:-1 align:center
that will be executed on the main thread


329
00:20:13,680 --> 00:20:18,285 line:-2
to update my app's state
after it comes into the foreground.


330
00:20:18.318 --> 00:20:23.423 line:-2 align:center
Here, I'm using this closure
to navigate my app to an error screen.


331
00:20:23,457 --> 00:20:28,862 line:-2
Use needsToContinueInForegroundError
when you want to stop the Intent execution


332
00:20:28.896 --> 00:20:33.233 line:-2 align:center
and require action to continue,
like in the previous example.


333
00:20:33.267 --> 00:20:38.038 line:-2 align:center
We have another API you can use if you
want to continue executing the App Intent,


334
00:20:38.071 --> 00:20:41.175 line:-1 align:center
instead of stopping it entirely.


335
00:20:41.208 --> 00:20:45.712 line:-2 align:center
For that case, call
the requestToContinueInForeground method.


336
00:20:45.746 --> 00:20:48.248 line:-2 align:center
I might use this when
the bus app detects that


337
00:20:48,282 --> 00:20:51,251 line:-1
a bus route is having a maintenance issue,


338
00:20:51.285 --> 00:20:56.123 line:-2 align:center
and I want to present a custom UI in
my app to choose an alternate route.


339
00:20:56,156 --> 00:20:58,659 line:-1
Once the person has chosen the route,


340
00:20:58,692 --> 00:21:05,699 line:-2
I can return that updated route from my
app and continue the App Intent execution.


341
00:21:05,732 --> 00:21:08,669 line:-1
This time, instead of throwing an error,


342
00:21:08.702 --> 00:21:12.673 line:-2 align:center
I'm simply calling a method
with try and await.


343
00:21:12,706 --> 00:21:18,812 line:-2
The closure passed in can return a value,
which I can get back within my perform.


344
00:21:18.846 --> 00:21:21.748 line:-2 align:center
That allows me to continue executing
the App Intent


345
00:21:21,782 --> 00:21:24,918 line:-1
after getting input from the user.


346
00:21:24,952 --> 00:21:28,388 line:-2
Here, I take the alternate route
the user has chosen


347
00:21:28.422 --> 00:21:32.259 line:-2 align:center
and return a snippet
showing the next bus for that route.


348
00:21:32.993 --> 00:21:35.362 line:-1 align:center
In summary, use the throwing method


349
00:21:35.395 --> 00:21:39.099 line:-2 align:center
when you want to completely stop
the execution of App Intent.


350
00:21:39,132 --> 00:21:42,503 line:-2
Otherwise, if you want to get a result
from the person


351
00:21:42,536 --> 00:21:45,038 line:-2
and use it to complete
the App Intent's perform,


352
00:21:45,072 --> 00:21:49,343 line:-2
use requestToContinueInForeground
and await its result.


353
00:21:50,544 --> 00:21:54,448 line:-2
This year, we've also added support
for Apple Pay to App Intents.


354
00:21:54.481 --> 00:21:57.084 line:-2 align:center
You can now initiate
an Apple Pay transaction


355
00:21:57.117 --> 00:22:00.320 line:-1 align:center
directly within your perform method.


356
00:22:00,354 --> 00:22:03,423 line:-1
Using Apple Pay in your perform is simple.


357
00:22:03,457 --> 00:22:06,693 line:-2
I'm going to create
a PKPaymentRequest instance


358
00:22:06.727 --> 00:22:10.764 line:-2 align:center
and configure it
with the necessary information.


359
00:22:10.797 --> 00:22:14.201 line:-2 align:center
Next, I use
PKPaymentAuthorizationController


360
00:22:14.234 --> 00:22:19.273 line:-2 align:center
to present the Apple Pay payment sheet
and handle authorization.


361
00:22:19,306 --> 00:22:23,177 line:-2
A guard statement checks if
the controller is presented successfully.


362
00:22:23.210 --> 00:22:27.915 line:-2 align:center
If not, I return a dialog with
"Unable to process payment."


363
00:22:27,948 --> 00:22:31,685 line:-2
Otherwise,
the payment is processed successfully.


364
00:22:31.718 --> 00:22:35.122 line:-2 align:center
Finally, let's dig into
a couple of updates to integration


365
00:22:35.155 --> 00:22:37.224 line:-1 align:center
between App Intents and the Shortcuts app.


366
00:22:37,257 --> 00:22:40,627 line:-2
Let's start with all the different places
in the system


367
00:22:40,661 --> 00:22:42,863 line:-1
where App Intents is integrated.


368
00:22:42,896 --> 00:22:45,899 line:-2
App Intents is a modern way
to build Shortcuts actions,


369
00:22:45.933 --> 00:22:48.936 line:-2 align:center
and App Shortcuts make it easier
to discover and use


370
00:22:48.969 --> 00:22:53.140 line:-2 align:center
your app's functionality with Siri
and the Shortcuts app.


371
00:22:53.173 --> 00:22:55.876 line:-2 align:center
There's also integration
with Focus Filters


372
00:22:55.909 --> 00:22:59.012 line:-2 align:center
and the Action button
on Apple Watch Ultra.


373
00:22:59,046 --> 00:23:03,884 line:-2
In iOS 17, App Intents have become
even more widely accessible


374
00:23:03.917 --> 00:23:07.087 line:-2 align:center
thanks to the integration with
Interactive Live Activities,


375
00:23:07,120 --> 00:23:11,558 line:-2
Widget Configuration and Interactivity,
and SwiftUI.


376
00:23:11.592 --> 00:23:13.293 line:-1 align:center
App Shortcuts have grown too,


377
00:23:13,327 --> 00:23:17,164 line:-2
to include support for
Spotlight Top Hits and Automations.


378
00:23:17,197 --> 00:23:20,701 line:-2
All these integrations mean that
the same App Intents code


379
00:23:20.734 --> 00:23:23.837 line:-1 align:center
can be reused in lots of different ways.


380
00:23:23,871 --> 00:23:28,075 line:-2
Since App Intents are now deeply
integrated into key system components,


381
00:23:28,108 --> 00:23:30,277 line:-1
it's very important to ensure that


382
00:23:30.310 --> 00:23:34.248 line:-2 align:center
the App Intents you create
are being good citizens.


383
00:23:34,281 --> 00:23:37,384 line:-2
Providing a good parameter summary is
crucial to ensure that


384
00:23:37,417 --> 00:23:42,956 line:-2
your App Intents look great
when they are surfaced across the system.


385
00:23:42,990 --> 00:23:47,528 line:-2
Write your parameter summaries
so that they read like a sentence,


386
00:23:47.561 --> 00:23:50.964 line:-2 align:center
with optional parameters
tucked beneath the fold.


387
00:23:50.998 --> 00:23:54.601 line:-2 align:center
The system will then determine
the optimal visual representation


388
00:23:54.635 --> 00:23:57.804 line:-2 align:center
for your parameter summary
based on the context.


389
00:23:57,838 --> 00:24:01,375 line:-2
While it's desirable for your App Intents
to work well everywhere,


390
00:24:01,408 --> 00:24:04,278 line:-2
there might be cases where
you need to make App Intents


391
00:24:04.311 --> 00:24:08.048 line:-2 align:center
for use within your app
or in an interactive widget,


392
00:24:08.081 --> 00:24:11.485 line:-2 align:center
and you want to hide them from
other parts of the system.


393
00:24:11,518 --> 00:24:16,089 line:-2
For example, when an App Intent invokes
a local function in your app


394
00:24:16,123 --> 00:24:18,992 line:-2
that would not make
a useful Shortcut action.


395
00:24:19,026 --> 00:24:22,629 line:-2
In that case, you can set
the isDiscoverable property


396
00:24:22,663 --> 00:24:24,798 line:-1
on your App Intent to false.


397
00:24:24,831 --> 00:24:27,935 line:-2
I am going to add a refresh button
to my Next Bus widget


398
00:24:27.968 --> 00:24:31.038 line:-2 align:center
that will retrieve the latest data
from the server.


399
00:24:31.071 --> 00:24:35.909 line:-2 align:center
While it serves a purpose in my widget,
it doesn't make a useful Shortcuts action.


400
00:24:35,943 --> 00:24:40,414 line:-2
Since I only want this App Intent
to be used from my interactive widget,


401
00:24:40,447 --> 00:24:43,617 line:-1
I will set isDiscoverable to false for it.


402
00:24:43,650 --> 00:24:46,653 line:-2
Note that App Intents marked as
undiscoverable


403
00:24:46,687 --> 00:24:49,022 line:-2
cannot participate
in App Shortcuts either.


404
00:24:49,056 --> 00:24:51,725 line:-2
The Intents in my app perform
pretty quickly,


405
00:24:51,758 --> 00:24:53,994 line:-1
but not all Intents do.


406
00:24:54,027 --> 00:24:56,096 line:-1
This year, we introduced a new way for you


407
00:24:56.129 --> 00:24:59.967 line:-2 align:center
to provide progress for
long-running Intents.


408
00:25:00,000 --> 00:25:03,003 line:-2
To report progress,
simply make your App Intents


409
00:25:03,036 --> 00:25:06,273 line:-2
conform to
the ProgressReportingIntent protocol.


410
00:25:06.306 --> 00:25:10.911 line:-2 align:center
Inside the perform() method, you can
access the provided progress object.


411
00:25:10.944 --> 00:25:14.081 line:-2 align:center
Update the progress by
setting the totalUnitCount


412
00:25:14,114 --> 00:25:19,753 line:-2
and incrementing the completedUnitCount
as your Intent execution advances.


413
00:25:19,786 --> 00:25:22,155 line:-2
The Shortcuts app will now
automatically display


414
00:25:22,189 --> 00:25:24,625 line:-1
the progress of your App Intent execution.


415
00:25:24,658 --> 00:25:26,193 line:-1
Implementing progress reporting is


416
00:25:26,226 --> 00:25:28,795 line:-2
particularly important for
long-running Intents.


417
00:25:28.829 --> 00:25:31.765 line:-2 align:center
It is really valuable for people to have
that feedback,


418
00:25:31,798 --> 00:25:34,701 line:-2
so they know the perform of the Intent
is moving forward,


419
00:25:34,735 --> 00:25:37,571 line:-1
and when it might complete.


420
00:25:37.604 --> 00:25:42.910 line:-2 align:center
This year, we've also improved how
your app can integrate with Find actions.


421
00:25:42.943 --> 00:25:46.647 line:-2 align:center
Shortcuts users love being able
to find content within your app


422
00:25:46.680 --> 00:25:50.551 line:-2 align:center
by specific criteria,
with actions like Find Notes.


423
00:25:50.584 --> 00:25:54.955 line:-2 align:center
The outputs of these actions can be
sent on to other Shortcuts actions,


424
00:25:54.988 --> 00:25:58.926 line:-2 align:center
like sending an email,
enabling lots of powerful workflows.


425
00:25:58,959 --> 00:26:03,697 line:-2
In iOS 16, you could automatically
get a Find action for your app


426
00:26:03,730 --> 00:26:06,900 line:-1
by implementing an EntityPropertyQuery,


427
00:26:06.934 --> 00:26:10.904 line:-2 align:center
declaring the criteria you want users
to be able to specify.


428
00:26:10,938 --> 00:26:14,107 line:-2
Starting with iOS 17,
you can now also use


429
00:26:14.141 --> 00:26:17.311 line:-2 align:center
the EnumerableEntityQuery protocol
instead.


430
00:26:17,344 --> 00:26:20,981 line:-1
It's really simple and easy to adopt.


431
00:26:21,014 --> 00:26:25,085 line:-2
Implementing EnumerableEntityQuery
is as simple as returning


432
00:26:25,118 --> 00:26:30,157 line:-2
all the possible values for your entity
in the allEntities() method.


433
00:26:30,190 --> 00:26:32,993 line:-2
Shortcuts and App Intents
take it from there,


434
00:26:33.026 --> 00:26:36.330 line:-1 align:center
automatically generating find actions.


435
00:26:36,363 --> 00:26:39,433 line:-2
The difference between
EnumerableEntityQuery


436
00:26:39.466 --> 00:26:41.935 line:-1 align:center
and EntityPropertyQuery


437
00:26:41.969 --> 00:26:47.541 line:-2 align:center
is that with EntityPropertyQuery,
we send you, the developer, the criteria,


438
00:26:47,574 --> 00:26:50,644 line:-2
and you run the search
on behalf of the user.


439
00:26:50.677 --> 00:26:54.348 line:-2 align:center
That means you will often return
a limited set of results.


440
00:26:54,381 --> 00:26:56,984 line:-1
With EnumerableEntityQuery,


441
00:26:57,017 --> 00:27:00,020 line:-2
you give the framework
all the possible entities,


442
00:27:00,053 --> 00:27:02,256 line:-1
and Shortcuts does the filtering.


443
00:27:02.289 --> 00:27:04.658 line:-1 align:center
Because it returns all the entities,


444
00:27:04,691 --> 00:27:07,828 line:-2
EnumerableEntityQuery is
really simple to use,


445
00:27:07.861 --> 00:27:11.365 line:-2 align:center
but it's also optimized for
a small number of entities.


446
00:27:11.398 --> 00:27:14.868 line:-2 align:center
It works well for cases,
such as Safari's Tab Groups,


447
00:27:14,902 --> 00:27:17,704 line:-2
but is not suitable for
a large number of entities,


448
00:27:17,738 --> 00:27:20,240 line:-1
which would be typical for the Notes app.


449
00:27:20,274 --> 00:27:24,878 line:-2
It is also not suitable for very large
entities that take up a lot of memory.


450
00:27:24,912 --> 00:27:31,051 line:-2
In this case, use EntityPropertyQuery
so you can run the search on your end,


451
00:27:31.084 --> 00:27:34.688 line:-2 align:center
instead of returning
all the possible entities at once.


452
00:27:34,721 --> 00:27:38,392 line:-2
Lastly, I want to tell you about
some updates to IntentDescription.


453
00:27:38,425 --> 00:27:41,562 line:-2
This is the type you use to fill out
the Shortcuts UI


454
00:27:41,595 --> 00:27:47,434 line:-2
people see when tapping the details button
to get more information on your action.


455
00:27:47,467 --> 00:27:52,906 line:-2
IntentDescription includes description
text, category name, and search keywords.


456
00:27:52,940 --> 00:27:56,577 line:-2
In iOS 17 the Intent Description type
has been updated


457
00:27:56.610 --> 00:27:59.880 line:-2 align:center
with a new property
called resultValueName,


458
00:27:59,913 --> 00:28:04,518 line:-2
so you can provide a more descriptive name
for the output of your action.


459
00:28:04.551 --> 00:28:09.189 line:-2 align:center
Here, "Add Reminder" provides
a resultValueName of "New Reminder"


460
00:28:09.223 --> 00:28:13.327 line:-2 align:center
for the reminder that it has created
and returned.


461
00:28:13,360 --> 00:28:17,698 line:-2
When the "Add Reminder" action here
is connected to the Show Result Action,


462
00:28:17.731 --> 00:28:22.202 line:-2 align:center
the parameter in the Show Result action
shows that name: "New Reminder."


463
00:28:22,236 --> 00:28:27,174 line:-2
To provide a resultValueName, just use
the new initializer on IntentDescription.


464
00:28:27.207 --> 00:28:31.845 line:-2 align:center
Starting with iOS 17, you can also include
an Intent description


465
00:28:31.879 --> 00:28:34.681 line:-1 align:center
for your Find actions that are generated


466
00:28:34,715 --> 00:28:40,554 line:-2
using the EntityPropertyQuery or
EnumerableEntityQuery protocols.


467
00:28:40.587 --> 00:28:44.691 line:-2 align:center
To do this, simply adopt
the findIntentDescription property


468
00:28:44.725 --> 00:28:46.727 line:-1 align:center
within your query types.


469
00:28:46,760 --> 00:28:49,997 line:-2
If you categorize your actions
with categoryName,


470
00:28:50.030 --> 00:28:52.666 line:-2 align:center
this will let you display
the generated Find actions


471
00:28:52.699 --> 00:28:57.638 line:-2 align:center
under your desired category in
the list of actions supported by your app.


472
00:28:57,671 --> 00:29:01,375 line:0
To summarize, App Intents
are a great way to expose functionality


473
00:29:01,408 --> 00:29:05,345 align:center
of your app to the system
and to your users.


474
00:29:05,379 --> 00:29:08,148 line:0
To learn even more about how
you can turn your App Intents


475
00:29:08,182 --> 00:29:11,685 line:0
into App Shortcuts
so people can use them right away,


476
00:29:11,718 --> 00:29:15,989 align:center
I suggest you check out the "Spotlight
your app with App Shortcuts" session.


477
00:29:16,023 --> 00:29:20,527 line:0
This year, App Intents enable you to build
configurable, interactive widgets


478
00:29:20,561 --> 00:29:21,862 line:0
and live activities,


479
00:29:21,895 --> 00:29:24,598 line:0
and provide an even smoother
developer experience,


480
00:29:24,631 --> 00:29:28,635 line:0
with deeper integration
into the Shortcuts app.


481
00:29:28.669 --> 00:29:31.572 line:-2 align:center
I'm truly excited to see
how your apps can leverage


482
00:29:31,605 --> 00:29:34,808 line:-2
the new App Intents technologies
to surprise and delight.


483
00:29:34,842 --> 00:29:35,976 line:-1
Thanks for joining me.


484
00:29:36,009 --> 00:29:39,012 align:center
[upbeat dreamy music]

