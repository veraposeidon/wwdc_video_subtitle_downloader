2
00:00:00.067 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:03,003 --> 00:00:10,477 position:90% line:0 align:right
♪


4
00:00:10.477 --> 00:00:11.712 line:-1 position:50%
Hi there!


5
00:00:11.712 --> 00:00:13.714 line:-1 position:50%
I'm Michael from
Privacy Engineering,


6
00:00:13.714 --> 00:00:17.851 line:-1 position:50%
and welcome
to "What's new in privacy."


7
00:00:17,851 --> 00:00:22,956 line:-1
At Apple, we believe privacy
is a fundamental human right.


8
00:00:22.956 --> 00:00:27.861 line:-1 position:50%
To respect and protect it is all
of our shared responsibility.


9
00:00:27,861 --> 00:00:31,298 line:-1
For this reason, privacy
is a central component


10
00:00:31,298 --> 00:00:36,603 line:-1
to how we approach designing new
and improved features at Apple.


11
00:00:36,603 --> 00:00:40,340 line:-1
Many products and services
have become a central mainstay


12
00:00:40,340 --> 00:00:43,577 line:-1
in all our lives,
and so you have become


13
00:00:43.577 --> 00:00:46.880 line:-1 position:50%
a vital partner
in protecting people.


14
00:00:46.880 --> 00:00:50.350 line:-1 position:50%
Providing a great privacy
experience in your app,


15
00:00:50,350 --> 00:00:52,953 line:-1
where people
understand and control


16
00:00:52,953 --> 00:00:56,456 line:-1
what data is being accessed
and for what purpose,


17
00:00:56.456 --> 00:00:57.991 line:-1 position:50%
helps them trust your app,


18
00:00:57.991 --> 00:01:01.528 line:-1 position:50%
especially in sensitive parts
of their lives.


19
00:01:01,528 --> 00:01:04,665 line:-1
The privacy pillars
are a great guide for you


20
00:01:04.665 --> 00:01:07.401 line:-1 position:50%
when building privacy
into your app.


21
00:01:07,401 --> 00:01:09,636 line:-1
You might have heard us
talk about them before,


22
00:01:09.636 --> 00:01:12.940 line:-1 position:50%
as these are four central ideas
we use at Apple


23
00:01:12.940 --> 00:01:17.277 line:-1 position:50%
to think about the privacy
of our products and services.


24
00:01:17.277 --> 00:01:20.314 line:-1 position:50%
The first pillar
is data minimization:


25
00:01:20,314 --> 00:01:23,483 line:-1
use only the data needed
to build a feature.


26
00:01:23.483 --> 00:01:26.353 line:-1 position:50%
This applies throughout
your app's architecture,


27
00:01:26,353 --> 00:01:28,722 line:-1
from the amount
of data features accessed,


28
00:01:28.722 --> 00:01:31.291 line:-1 position:50%
to data shared
with application servers,


29
00:01:31.291 --> 00:01:34.494 line:-1 position:50%
to data that might be shared
with third parties.


30
00:01:34.494 --> 00:01:39.266 line:-1 position:50%
Second is on-device processing:
tap into the power of the device


31
00:01:39,266 --> 00:01:41,969 line:-1
to process data locally
and avoid sharing it


32
00:01:41,969 --> 00:01:43,971 line:-1
with any servers.


33
00:01:43,971 --> 00:01:48,308 line:-1
Third, transparency and control
is about making sure


34
00:01:48,308 --> 00:01:53,647 line:-1
people understand
the what, why, when, and where


35
00:01:53.647 --> 00:01:56.416 line:-1 position:50%
of data access and processing,
and to give them


36
00:01:56,416 --> 00:02:00,120 line:-1
adequate controls
before that happens.


37
00:02:00,120 --> 00:02:03,757 line:-1
And also, enable them
to change their mind later.


38
00:02:03.757 --> 00:02:07.227 line:-1 position:50%
The last pillar
is security protections:


39
00:02:07.227 --> 00:02:09.696 line:-1 position:50%
apply strong
technical mitigations


40
00:02:09.696 --> 00:02:13.700 line:-1 position:50%
to enforce the other pillars,
such as end-to-end encryption.


41
00:02:13,700 --> 00:02:17,671 line:-1
To help you implement
the privacy pillars in your app,


42
00:02:17,671 --> 00:02:21,308 line:-1
I will tell you about new tools
with privacy-centric design


43
00:02:21.308 --> 00:02:24.911 line:-1 position:50%
that you can adopt,
give the latest updates


44
00:02:24.911 --> 00:02:28.148 line:-1 position:50%
on important platform changes
for privacy,


45
00:02:28,148 --> 00:02:32,219 line:-1
and finally, I will talk about
how the spatial input model


46
00:02:32,219 --> 00:02:37,157 line:-1
on Apple's newest platform
was designed to protect privacy.


47
00:02:37.157 --> 00:02:40.193 line:-1 position:50%
I will start with new
privacy-enhancing technologies


48
00:02:40,193 --> 00:02:43,697 line:-1
coming to Apple's platforms
that make it easier for you


49
00:02:43,697 --> 00:02:47,334 line:-1
to build great apps
with great privacy.


50
00:02:47,334 --> 00:02:50,404 line:-1
This includes a set of new APIs
that allow your app


51
00:02:50.404 --> 00:02:53.273 line:-1 position:50%
to obtain access
to content seamlessly,


52
00:02:53.273 --> 00:02:57.144 line:-1 position:50%
while giving users fine-grain
control over sharing,


53
00:02:57,144 --> 00:03:00,781 line:-1
as well as new APIs to better
protect communication


54
00:03:00.781 --> 00:03:03.717 line:-1 position:50%
with servers and people.


55
00:03:03.717 --> 00:03:06.820 line:-1 position:50%
I will begin with improvements
to the Photos picker,


56
00:03:06,820 --> 00:03:11,458 line:-1
designed to provide
low-friction access to photos.


57
00:03:11.458 --> 00:03:15.429 line:-1 position:50%
Over the years, our photo
libraries have grown massively


58
00:03:15,429 --> 00:03:19,199 line:-1
as more and more of our precious
moments are captured there,


59
00:03:19,199 --> 00:03:21,635 line:-1
starting with embarrassing
childhood photos,


60
00:03:21.635 --> 00:03:24.204 line:-1 position:50%
to the last hiking trip.


61
00:03:24.204 --> 00:03:26.606 line:-1 position:50%
For this reason,
a fundamental way


62
00:03:26,606 --> 00:03:29,843 line:-1
to build up trust in your app
is to empower people


63
00:03:29.843 --> 00:03:33.113 line:-1 position:50%
to make fine-grain decisions
about which data they share


64
00:03:33.113 --> 00:03:36.083 line:-1 position:50%
with your app
and when they share it.


65
00:03:36,083 --> 00:03:37,984 line:-1
So if someone wants
to use your app


66
00:03:37,984 --> 00:03:41,121 line:-1
to share the most scenic photos
from their last trip,


67
00:03:41.121 --> 00:03:46.093 line:-1 position:50%
they can do so without granting
your app access to all photos.


68
00:03:46,093 --> 00:03:49,563 line:-1
This is what the Photos picker
allows you to do.


69
00:03:49.563 --> 00:03:53.800 line:-1 position:50%
This API gives your app access
to selected photos or videos,


70
00:03:53,800 --> 00:03:58,738 line:-1
without requiring permission to
access the entire photo library.


71
00:03:58.738 --> 00:04:03.777 line:-1 position:50%
And in iOS 17 and macOS Sonoma,
you can fully embed the picker


72
00:04:03,777 --> 00:04:08,815 line:-1
into your app for a completely
seamless experience.


73
00:04:08,815 --> 00:04:12,018 line:-1
Even though the photos look
like they are part of your app,


74
00:04:12,018 --> 00:04:16,323 line:-1
they are rendered by the system
and only shared when selected,


75
00:04:16,323 --> 00:04:20,260 line:-1
so the user's photos always
remain in their control.


76
00:04:20.260 --> 00:04:22.496 line:-1 position:50%
With the new
customization options,


77
00:04:22,496 --> 00:04:25,265 line:-1
you can choose whether you want
to show the picker


78
00:04:25.265 --> 00:04:28.535 line:-1 position:50%
without any chrome, like this,


79
00:04:28,535 --> 00:04:31,204 line:-1
or as a minimal,
single row of photos


80
00:04:31,204 --> 00:04:34,174 line:-1
that can be scrolled
horizontally,


81
00:04:34.174 --> 00:04:36.643 line:-1 position:50%
or as an inline version
of the full picker,


82
00:04:36,643 --> 00:04:39,679 line:-1
with a new Options menu,
providing controls


83
00:04:39,679 --> 00:04:42,716 line:-1
about sharing photo metadata,
such as captions


84
00:04:42,716 --> 00:04:45,252 line:-1
or location information.


85
00:04:45.252 --> 00:04:49.723 line:-1 position:50%
The Photos picker is a great
and fast way to obtain photos,


86
00:04:49.723 --> 00:04:52.325 line:-1 position:50%
as you don't need to worry
about obtaining permission


87
00:04:52,325 --> 00:04:54,895 line:-1
for accessing
the entire library,


88
00:04:54.895 --> 00:04:58.498 line:-1 position:50%
or designing and implementing
a photo-picking flow.


89
00:04:58,498 --> 00:05:02,469 line:-1
Consider adopting the picker
to individually access photos


90
00:05:02,469 --> 00:05:05,372 line:-1
instead of requesting
full access.


91
00:05:05,372 --> 00:05:09,442 line:0
For an in-depth explanation of
the picker's new capabilities,


92
00:05:09,442 --> 00:05:13,713 position:50%
watch the video "Embed
the Photos picker in your app."


93
00:05:13.713 --> 00:05:15.549 line:-1 position:50%
And in case you are
developing an app


94
00:05:15.549 --> 00:05:17.617 line:-1 position:50%
that has a strong requirement


95
00:05:17.617 --> 00:05:20.086 line:-1 position:50%
for accessing
the full photo library,


96
00:05:20,086 --> 00:05:23,523 line:-1
iOS 17 has a redesigned
permission dialog


97
00:05:23.523 --> 00:05:25.492 line:-1 position:50%
that includes
the number of photos


98
00:05:25.492 --> 00:05:28.161 line:-1 position:50%
and a sample
of what will be shared.


99
00:05:28.161 --> 00:05:30.163 line:-1 position:50%
This helps people
make the decision


100
00:05:30,163 --> 00:05:34,134 line:-1
that is right for them
about what to share.


101
00:05:34,134 --> 00:05:37,003 line:-1
Because the preferences
might change over time,


102
00:05:37.003 --> 00:05:40.173 line:-1 position:50%
the system also
periodically reminds people


103
00:05:40,173 --> 00:05:45,078 line:-1
if your app has full access
to the photo library.


104
00:05:45,078 --> 00:05:48,081 line:-1
Next up is
the Screen Capture picker,


105
00:05:48.081 --> 00:05:51.685 line:-1 position:50%
a new API in ScreenCaptureKit
for macOS


106
00:05:51.685 --> 00:05:54.921 line:-1 position:50%
that enables people to share
only the windows or screen


107
00:05:54,921 --> 00:05:57,457 line:-1
your app needs
when screen sharing,


108
00:05:57,457 --> 00:06:00,760 line:-1
while providing
a better experience.


109
00:06:00.760 --> 00:06:04.531 line:-1 position:50%
Prior to macOS Sonoma, when
a user wants to screen share


110
00:06:04,531 --> 00:06:07,801 line:-1
their presentation
in a virtual video conference,


111
00:06:07.801 --> 00:06:10.370 line:-1 position:50%
they need to grant
the conferencing app permission


112
00:06:10,370 --> 00:06:13,673 line:-1
to record the full screen
via the Settings app,


113
00:06:13,673 --> 00:06:18,311 line:-1
resulting in a poor experience
and risk of oversharing.


114
00:06:18.311 --> 00:06:21.748 line:-1 position:50%
With the new
SCContentSharingPicker API,


115
00:06:21,748 --> 00:06:25,485 line:-1
macOS Sonoma shows
a window picker on your behalf


116
00:06:25,485 --> 00:06:29,789 line:-1
where people can pick the screen
content that they want to share.


117
00:06:29,789 --> 00:06:33,593 line:-1
macOS makes sure to only share
the selected windows or screen


118
00:06:33,593 --> 00:06:35,895 line:-1
as soon as they are picked.


119
00:06:35.895 --> 00:06:39.699 line:-1 position:50%
Because of the explicit action
to record the screen,


120
00:06:39,699 --> 00:06:42,535 line:-1
your app is permitted
to record selected content


121
00:06:42,535 --> 00:06:46,006 line:-1
for the duration of
the screen capture session.


122
00:06:46.006 --> 00:06:48.708 line:-1 position:50%
This means
your app is not required


123
00:06:48.708 --> 00:06:52.045 line:-1 position:50%
to obtain separate permission
to capture the screen


124
00:06:52.045 --> 00:06:54.314 line:-1 position:50%
or build its own
screen content picker --


125
00:06:54.314 --> 00:06:59.719 line:-1 position:50%
this is all handled
by SCContentSharingPicker.


126
00:06:59.719 --> 00:07:02.389 line:-1 position:50%
To make sure that people
are always aware,


127
00:07:02.389 --> 00:07:07.227 line:-1 position:50%
macOS Sonoma also includes a
new screen sharing menu bar item


128
00:07:07.227 --> 00:07:11.231 line:-1 position:50%
serving as a reminder that your
app is recording the screen.


129
00:07:11.231 --> 00:07:14.167 line:-1 position:50%
Keep this in mind and only
record screen content


130
00:07:14.167 --> 00:07:17.203 line:-1 position:50%
when it is expected.


131
00:07:17.203 --> 00:07:20.707 line:-1 position:50%
When clicked, the menu expands
to provide a preview


132
00:07:20.707 --> 00:07:22.709 line:-1 position:50%
of the shared content.


133
00:07:22.709 --> 00:07:26.279 line:-1 position:50%
This also allows quickly adding
or removing screen content


134
00:07:26.279 --> 00:07:30.417 line:-1 position:50%
to the capture session
or ending it altogether.


135
00:07:30,417 --> 00:07:33,320 line:-1
SCContentSharingPicker
also provides options


136
00:07:33.320 --> 00:07:36.022 line:-1 position:50%
for customization
in order to adjust it


137
00:07:36.022 --> 00:07:37.524 line:-1 position:50%
based on your app's needs,


138
00:07:37,524 --> 00:07:41,394 line:-1
such as preferred selection
modes or applications.


139
00:07:41,394 --> 00:07:42,896 position:50%
For more details,


140
00:07:42,896 --> 00:07:46,599 position:50%
watch "What's new
in ScreenCaptureKit."


141
00:07:46.599 --> 00:07:49.436 line:-1 position:50%
Calendar is another area
that now enables


142
00:07:49.436 --> 00:07:51.938 line:-1 position:50%
seamless experiences
in your app,


143
00:07:51.938 --> 00:07:56.476 line:-1 position:50%
especially for apps that
only create new events.


144
00:07:56.476 --> 00:07:58.912 line:-1 position:50%
The calendar provides
a detailed view


145
00:07:58.912 --> 00:08:01.981 line:-1 position:50%
into people's lives,
such as doctor appointments


146
00:08:01,981 --> 00:08:04,584 line:-1
or flight information,
which is why people


147
00:08:04,584 --> 00:08:10,056 line:-1
may be surprised or even say no
when your app asks for access.


148
00:08:10.056 --> 00:08:11.958 line:-1 position:50%
For apps that are only
seeking access


149
00:08:11,958 --> 00:08:15,295 line:-1
to write calendar events,
this can result in a failure


150
00:08:15.295 --> 00:08:19.466 line:-1 position:50%
to add events, frustration,
and maybe even people


151
00:08:19.466 --> 00:08:23.303 line:-1 position:50%
missing a concert or
a good friend's birthday party.


152
00:08:23.303 --> 00:08:26.706 line:-1 position:50%
In order to avoid this issue,
there are two important changes


153
00:08:26,706 --> 00:08:30,577 line:-1
to Apple's platforms
for Calendar access.


154
00:08:30.577 --> 00:08:34.481 line:-1 position:50%
First, if your app only creates
new calendar events,


155
00:08:34.481 --> 00:08:37.016 line:-1 position:50%
I have great news for you:


156
00:08:37.016 --> 00:08:41.688 line:-1 position:50%
with EventKitUI, your app
does not need any permission.


157
00:08:41,688 --> 00:08:43,690 line:-1
This is made possible
by rendering


158
00:08:43.690 --> 00:08:46.993 line:-1 position:50%
EventKitUI view controllers
outside of your app,


159
00:08:46.993 --> 00:08:51.898 line:-1 position:50%
without any changes
to the APIs or functionality.


160
00:08:51.898 --> 00:08:56.569 line:-1 position:50%
Second, if you prefer to provide
your own UI for creating events,


161
00:08:56,569 --> 00:08:59,572 line:-1
there is a new add-only
calendar permission,


162
00:08:59.572 --> 00:09:01.141 line:-1 position:50%
allowing your app to add events


163
00:09:01,141 --> 00:09:05,245 line:-1
without access to other events
on the calendar.


164
00:09:05,245 --> 00:09:08,615 line:-1
This is another great way
to integrate your app's events


165
00:09:08.615 --> 00:09:11.618 line:-1 position:50%
into the user's day,
without them having to worry


166
00:09:11,618 --> 00:09:13,720 line:-1
whether your app might be
fetching content


167
00:09:13.720 --> 00:09:16.156 line:-1 position:50%
of their calendar.


168
00:09:16,156 --> 00:09:20,160 line:-1
And, should your app need
full Calendar access later,


169
00:09:20.160 --> 00:09:22.695 line:-1 position:50%
you can ask once to upgrade.


170
00:09:22.695 --> 00:09:26.833 line:-1 position:50%
It is best to make this request
when linked to user intent.


171
00:09:26.833 --> 00:09:28.968 line:-1 position:50%
When asked
at an unexpected time


172
00:09:28,968 --> 00:09:32,238 line:-1
or for an unexpected reason,
it might be rejected


173
00:09:32.238 --> 00:09:35.975 line:-1 position:50%
and can degrade
the experience in your app.


174
00:09:35,975 --> 00:09:39,012 line:-1
Help people understand
why the access is needed,


175
00:09:39,012 --> 00:09:41,948 line:-1
by defining a meaningful
purpose string.


176
00:09:41.948 --> 00:09:45.151 line:-1 position:50%
In order to provide the benefits
of write-only access


177
00:09:45,151 --> 00:09:46,653 line:-1
to all apps,


178
00:09:46.653 --> 00:09:50.056 line:-1 position:50%
there are two important things
to remember.


179
00:09:50,056 --> 00:09:53,359 line:-1
If your app has been granted
Calendar access previously,


180
00:09:53,359 --> 00:09:57,497 line:-1
it defaults to write-only
permission on upgrade to iOS 17


181
00:09:57.497 --> 00:10:00.099 line:-1 position:50%
or macOS Sonoma.


182
00:10:00,099 --> 00:10:03,770 line:-1
Similarly, if you are linking
against an older version


183
00:10:03.770 --> 00:10:07.507 line:-1 position:50%
of EventKit and your app asks
for Calendar access,


184
00:10:07.507 --> 00:10:10.877 line:-1 position:50%
the system only prompts
for write-only access.


185
00:10:10,877 --> 00:10:13,179 line:-1
In this case,
when your app attempts


186
00:10:13,179 --> 00:10:16,416 line:-1
to fetch Calendar events,
the system automatically asks


187
00:10:16,416 --> 00:10:20,286 line:-1
to upgrade your app
to full access.


188
00:10:20,286 --> 00:10:23,289 line:0
For more information about
how to integrate EventKit


189
00:10:23,289 --> 00:10:26,025 line:0
and EventKitUI into your app,


190
00:10:26,025 --> 00:10:30,196 line:0
watch "Discover Calendar
and EventKit."


191
00:10:30,196 --> 00:10:34,300 line:-1
Next is the new
Oblivious HTTP API,


192
00:10:34,300 --> 00:10:38,137 line:-1
which helps you to hide client
IP addresses from your servers


193
00:10:38.137 --> 00:10:41.040 line:-1 position:50%
and potentially sensitive
app usage patterns


194
00:10:41.040 --> 00:10:44.477 line:-1 position:50%
from network operators.


195
00:10:44,477 --> 00:10:48,081 line:-1
Knowing when and which apps
people use on a daily basis


196
00:10:48,081 --> 00:10:51,618 line:-1
can provide deep insight
into their lives.


197
00:10:51.618 --> 00:10:54.721 line:-1 position:50%
Because cellular and Wi-Fi
network operators


198
00:10:54.721 --> 00:10:58.424 line:-1 position:50%
can observe what servers
someone connects to,


199
00:10:58.424 --> 00:11:02.896 line:-1 position:50%
they can observe their personal
app usage and life patterns.


200
00:11:02,896 --> 00:11:06,132 line:-1
And some network operators
may be interested


201
00:11:06.132 --> 00:11:11.204 line:-1 position:50%
in using their position to learn
about how people use your app.


202
00:11:11.204 --> 00:11:13.506 line:-1 position:50%
This could be especially
sensitive to them,


203
00:11:13,506 --> 00:11:18,645 line:-1
such as dating apps or apps
for specific health conditions.


204
00:11:18,645 --> 00:11:21,281 line:-1
IP addresses are
an essential element


205
00:11:21.281 --> 00:11:23.249 line:-1 position:50%
for communication
on the internet;


206
00:11:23.249 --> 00:11:26.419 line:-1 position:50%
however, the IP address
can be abused


207
00:11:26.419 --> 00:11:30.757 line:-1 position:50%
to determine someone's
location or their identity.


208
00:11:30.757 --> 00:11:33.526 line:-1 position:50%
Exposure to IP addresses
can result


209
00:11:33,526 --> 00:11:36,262 line:-1
in additional challenges for you
if you want


210
00:11:36.262 --> 00:11:38.598 line:-1 position:50%
to implement features
with anonymity guarantees


211
00:11:38.598 --> 00:11:43.336 line:-1 position:50%
in your app,
such as client analytics.


212
00:11:43.336 --> 00:11:47.607 line:-1 position:50%
Apple platforms now
support Oblivious HTTP,


213
00:11:47,607 --> 00:11:51,945 line:-1
or OHTTP for short,
in order to help you


214
00:11:51.945 --> 00:11:54.981 line:-1 position:50%
protect people's app usage
and IP address


215
00:11:54.981 --> 00:11:58.885 line:-1 position:50%
by separating
the who from what.


216
00:11:58,885 --> 00:12:02,188 line:-1
OHTTP is a standardized
internet protocol


217
00:12:02,188 --> 00:12:04,457 line:-1
that is designed
to be lightweight,


218
00:12:04,457 --> 00:12:07,560 line:-1
proxying encrypted messages
at the application layer


219
00:12:07,560 --> 00:12:12,632 line:-1
to allow for fast transactional
server interactions.


220
00:12:12,632 --> 00:12:16,469 line:-1
With OHTTP, the network
operator can only observe


221
00:12:16,469 --> 00:12:19,138 line:-1
a connection
to the relay provider,


222
00:12:19,138 --> 00:12:22,275 line:-1
instead of your
application server.


223
00:12:22.275 --> 00:12:25.612 line:-1 position:50%
The cornerstone of
this architecture is the relay,


224
00:12:25.612 --> 00:12:27.547 line:-1 position:50%
which knows the client's
IP address


225
00:12:27.547 --> 00:12:29.582 line:-1 position:50%
and the destination server name,


226
00:12:29,582 --> 00:12:32,852 line:-1
but none of
the encrypted content.


227
00:12:32.852 --> 00:12:35.822 line:-1 position:50%
It is assumed that the relay
always sees connections


228
00:12:35.822 --> 00:12:39.626 line:-1 position:50%
to your application server, so
the only meaningful information


229
00:12:39.626 --> 00:12:44.063 line:-1 position:50%
the relay gains
is the client IP.


230
00:12:44,063 --> 00:12:46,699 line:-1
The final connection
to your application server


231
00:12:46.699 --> 00:12:49.035 line:-1 position:50%
is made by the relay.


232
00:12:49,035 --> 00:12:51,571 line:-1
When the relay is operated
by a third party,


233
00:12:51,571 --> 00:12:55,975 line:-1
no single party has full
visibility of the source IP,


234
00:12:55.975 --> 00:13:00.380 line:-1 position:50%
destination IP, and the content.


235
00:13:00.380 --> 00:13:03.683 line:-1 position:50%
This also enables you
to add technical guarantees


236
00:13:03.683 --> 00:13:06.719 line:-1 position:50%
to features where
you don't want to be able


237
00:13:06,719 --> 00:13:12,892 line:-1
to identify or track users,
such as anonymous analytics.


238
00:13:12,892 --> 00:13:16,329 line:-1
With OHTTP support,
you have the chance to build


239
00:13:16.329 --> 00:13:18.931 line:-1 position:50%
stronger internet
privacy protections


240
00:13:18.931 --> 00:13:21.968 line:-1 position:50%
that impact people meaningfully.


241
00:13:21,968 --> 00:13:24,003 line:-1
Services like
iCloud Private Relay


242
00:13:24,003 --> 00:13:26,372 line:-1
already make use of OHTTP


243
00:13:26.372 --> 00:13:30.743 line:-1 position:50%
for its great performance
and strong privacy protections.


244
00:13:30,743 --> 00:13:37,083 line:-1
For example, Private Relay uses
it to protect all DNS queries.


245
00:13:37,083 --> 00:13:40,520 line:0
To learn more about
how you can adopt OHTTP,


246
00:13:40,520 --> 00:13:44,824 position:50%
watch the network relay video.


247
00:13:44,824 --> 00:13:48,928 line:-1
Adopting OHTTP also means
you will need to think about


248
00:13:48,928 --> 00:13:53,366 line:-1
how to replace IP addresses
in your system architecture --


249
00:13:53,366 --> 00:13:56,969 line:-1
for example, to perform
real-user detection.


250
00:13:56,969 --> 00:14:00,873 line:0
Refer to "Replace CAPTCHAs
with Private Access Tokens"


251
00:14:00,873 --> 00:14:06,646 line:0
from WWDC22 to learn how
to replace IP reputation systems


252
00:14:06,646 --> 00:14:09,849 position:50%
with a privacy-preserving
alternative.


253
00:14:09,849 --> 00:14:13,352 line:0
Encrypting DNS queries
is another essential part


254
00:14:13,352 --> 00:14:16,055 line:0
of protecting app usage
from networks.


255
00:14:16,055 --> 00:14:22,829 position:50%
To learn how, watch "Enable
Encrypted DNS" from WWDC20.


256
00:14:22,829 --> 00:14:25,765 line:-1
The last new tool
is Communication Safety


257
00:14:25,765 --> 00:14:28,801 line:-1
and the new Sensitive
Content Analysis framework,


258
00:14:28,801 --> 00:14:31,370 line:-1
which utilizes
on-device processing


259
00:14:31.370 --> 00:14:34.373 line:-1 position:50%
to help you protect children
in your app.


260
00:14:34,373 --> 00:14:36,976 line:-1
Apple platforms
and the apps you build


261
00:14:36,976 --> 00:14:40,513 line:-1
have become an important part
of many families,


262
00:14:40.513 --> 00:14:42.815 line:-1 position:50%
as children use our products
and services


263
00:14:42,815 --> 00:14:45,651 line:-1
to explore the digital world
and communicate


264
00:14:45.651 --> 00:14:48.121 line:-1 position:50%
with family and friends.


265
00:14:48.121 --> 00:14:52.225 line:-1 position:50%
Communication Safety helps
families to keep children safe,


266
00:14:52.225 --> 00:14:55.495 line:-1 position:50%
by warning children
and providing helpful resources


267
00:14:55.495 --> 00:14:58.664 line:-1 position:50%
if they receive or attempt
to share photos


268
00:14:58.664 --> 00:15:01.234 line:-1 position:50%
that likely contain nudity.


269
00:15:01,234 --> 00:15:04,637 line:-1
And it is important that
these protections are applied


270
00:15:04,637 --> 00:15:08,708 line:-1
throughout Apple's platforms,
as well as in your app.


271
00:15:08,708 --> 00:15:11,310 line:-1
To this end,
Communication Safety


272
00:15:11.310 --> 00:15:15.248 line:-1 position:50%
expands beyond Messages
to also detect sensitive content


273
00:15:15.248 --> 00:15:17.183 line:-1 position:50%
when sharing via AirDrop,


274
00:15:17.183 --> 00:15:19.619 line:-1 position:50%
when leaving a message
on FaceTime,


275
00:15:19.619 --> 00:15:22.755 line:-1 position:50%
when sharing contact posters
in the Phone app,


276
00:15:22,755 --> 00:15:25,091 line:-1
and in the Photos picker.


277
00:15:25,091 --> 00:15:28,194 line:-1
We also make these features
available to everyone,


278
00:15:28,194 --> 00:15:34,233 line:-1
no matter their age,
with Sensitive Content Warning.


279
00:15:34.233 --> 00:15:38.171 line:-1 position:50%
And now, with the new Sensitive
Content Analysis framework,


280
00:15:38.171 --> 00:15:42.141 line:-1 position:50%
you can detect sensitive
content in your app too.


281
00:15:42.141 --> 00:15:44.877 line:-1 position:50%
It taps into the same
on-device technology


282
00:15:44.877 --> 00:15:47.079 line:-1 position:50%
with system-provided ML models,


283
00:15:47,079 --> 00:15:51,717 line:-1
so you don't have to share
any content with any servers.


284
00:15:51.717 --> 00:15:54.687 line:-1 position:50%
And with this framework,
this is possible for you


285
00:15:54,687 --> 00:15:56,856 line:-1
without having to deal
with the complexity


286
00:15:56.856 --> 00:16:01.761 line:-1 position:50%
of training large ML models
and packing them into your app.


287
00:16:01.761 --> 00:16:03.963 line:-1 position:50%
Integration into your app
is possible


288
00:16:03,963 --> 00:16:06,499 line:-1
with just a few lines of code.


289
00:16:06,499 --> 00:16:07,700 line:-1
To get started,


290
00:16:07.700 --> 00:16:11.637 line:-1 position:50%
create an instance
of SCSensitivityAnalyzer.


291
00:16:11.637 --> 00:16:14.006 line:-1 position:50%
You can check
the analysisPolicy attribute


292
00:16:14.006 --> 00:16:16.509 line:-1 position:50%
to decide whether
analysis is needed,


293
00:16:16,509 --> 00:16:18,911 line:-1
and what kind of intervention
should be shown


294
00:16:18,911 --> 00:16:22,782 line:-1
if the image or video
contains nudity.


295
00:16:22,782 --> 00:16:26,552 line:-1
Then, call the analyzeImage
method with the URL


296
00:16:26,552 --> 00:16:31,591 line:-1
of the photo, or the CGImage,
that you want to analyze.


297
00:16:31,591 --> 00:16:35,862 line:-1
For analyzing a video, call the
videoAnalysis method instead.


298
00:16:35,862 --> 00:16:38,998 line:-1
This returns a handler,
so you can track progress


299
00:16:38.998 --> 00:16:42.268 line:-1 position:50%
and cancel the analysis
if needed.


300
00:16:42.268 --> 00:16:45.738 line:-1 position:50%
To obtain the analysis result,
call hasSensitiveContent


301
00:16:45.738 --> 00:16:47.940 line:-1 position:50%
on the handler.


302
00:16:47.940 --> 00:16:51.077 line:-1 position:50%
If isSensitive is true,
the image or video


303
00:16:51,077 --> 00:16:53,779 line:-1
likely contains nudity.


304
00:16:53.779 --> 00:16:57.950 line:-1 position:50%
In this case, your app should
provide its own intervention --


305
00:16:57,950 --> 00:17:01,187 line:-1
which can consist of blurring
or otherwise obfuscating


306
00:17:01,187 --> 00:17:02,588 line:-1
the image or video --


307
00:17:02.588 --> 00:17:06.092 line:-1 position:50%
and an option
to view the content.


308
00:17:06.092 --> 00:17:10.429 line:-1 position:50%
Also, check the analysis policy
to tailor the intervention


309
00:17:10,429 --> 00:17:12,899 line:-1
depending on whether
Communication Safety


310
00:17:12.899 --> 00:17:16.068 line:-1 position:50%
or Sensitive Content Warning
is enabled.


311
00:17:16,068 --> 00:17:18,504 line:0
You can find more detailed
design guidelines


312
00:17:18,504 --> 00:17:23,342 position:50%
for interventions in the
Apple Developer documentation.


313
00:17:23,342 --> 00:17:27,179 line:-1
Those are the new APIs to adopt
to offer great privacy


314
00:17:27.179 --> 00:17:28.614 line:-1 position:50%
in your app.


315
00:17:28.614 --> 00:17:31.918 line:-1 position:50%
In addition to that,
there are a few privacy changes


316
00:17:31.918 --> 00:17:36.188 line:-1 position:50%
to existing features
on Apple platforms.


317
00:17:36.188 --> 00:17:40.626 line:-1 position:50%
This includes new ways you can
protect data in your app


318
00:17:40.626 --> 00:17:43.596 line:-1 position:50%
as well as privacy improvements
for Safari


319
00:17:43,596 --> 00:17:46,399 line:-1
and Safari app extensions.


320
00:17:46.399 --> 00:17:49.569 line:-1 position:50%
First, our new privacy
protections for macOS,


321
00:17:49,569 --> 00:17:52,138 line:-1
designed to help you
protect data in your app


322
00:17:52.138 --> 00:17:55.041 line:-1 position:50%
from other apps
on the same device.


323
00:17:55.041 --> 00:17:58.444 line:-1 position:50%
Locations on disk like
the Desktop, Documents,


324
00:17:58.444 --> 00:18:02.315 line:-1 position:50%
and Downloads folder have
a system-managed permission.


325
00:18:02.315 --> 00:18:04.617 line:-1 position:50%
This ensures
people are in control


326
00:18:04.617 --> 00:18:08.287 line:-1 position:50%
over when apps have access
to their private data.


327
00:18:08.287 --> 00:18:10.790 line:-1 position:50%
This model works well
for files that people


328
00:18:10,790 --> 00:18:14,226 line:-1
directly interact with,
like a project presentation


329
00:18:14.226 --> 00:18:17.396 line:-1 position:50%
or a spreadsheet with a budget.


330
00:18:17,396 --> 00:18:19,932 line:-1
Some applications might
store private data


331
00:18:19.932 --> 00:18:22.868 line:-1 position:50%
in different locations,
such as a messaging app


332
00:18:22,868 --> 00:18:25,905 line:-1
that has a database of sent
and received messages,


333
00:18:25,905 --> 00:18:29,375 line:-1
or a notes app
with vacation plans.


334
00:18:29,375 --> 00:18:31,911 line:-1
These files are often
stored in locations


335
00:18:31.911 --> 00:18:35.548 line:-1 position:50%
like the Library folder,
or for App Sandboxed apps,


336
00:18:35.548 --> 00:18:38.551 line:-1 position:50%
the app's data container.


337
00:18:38,551 --> 00:18:42,021 line:-1
macOS Sonoma gives users
additional control


338
00:18:42,021 --> 00:18:44,457 line:-1
over who can access their data.


339
00:18:44.457 --> 00:18:48.661 line:-1 position:50%
Specifically, macOS ensures
that they give permission


340
00:18:48.661 --> 00:18:52.632 line:-1 position:50%
before an app can access data
in an application data container


341
00:18:52,632 --> 00:18:55,134 line:-1
from a different developer.


342
00:18:55.134 --> 00:18:59.038 line:-1 position:50%
This can impact your application
in two ways.


343
00:18:59,038 --> 00:19:02,274 position:50%
First, if your application
stores data


344
00:19:02,274 --> 00:19:05,044 position:50%
outside of system-managed
data stores,


345
00:19:05,044 --> 00:19:07,913 position:50%
adopt App Sandbox
in order to extend


346
00:19:07,913 --> 00:19:11,717 position:50%
this new protection
to data of your users.


347
00:19:11,717 --> 00:19:16,722 position:50%
Then, all files created
by your app will be protected.


348
00:19:16,722 --> 00:19:19,558 position:50%
Apps that are already
using App Sandbox


349
00:19:19,558 --> 00:19:23,663 position:50%
get this new protection
automatically.


350
00:19:23.663 --> 00:19:27.266 line:-1 position:50%
Second, if your app
accesses data from other apps,


351
00:19:27,266 --> 00:19:30,736 line:-1
there are a few ways
that you can ask for permission.


352
00:19:30,736 --> 00:19:33,039 line:-1
Without any changes
on your side,


353
00:19:33,039 --> 00:19:35,841 line:-1
macOS Sonoma will ask
for permission


354
00:19:35,841 --> 00:19:40,312 line:-1
when your app accesses a file
in another app's data container.


355
00:19:40,312 --> 00:19:44,216 line:-1
The permission is valid for as
long as your app remains open,


356
00:19:44.216 --> 00:19:48.154 line:-1 position:50%
and once the app is quit,
the permission resets.


357
00:19:48,154 --> 00:19:50,756 line:-1
You should only attempt
to read other apps' files


358
00:19:50.756 --> 00:19:52.892 line:-1 position:50%
when it is expected.


359
00:19:52,892 --> 00:19:55,227 line:-1
If the timing of the prompt
is surprising,


360
00:19:55.227 --> 00:19:59.865 line:-1 position:50%
or the purpose is unclear, your
app's access might be denied.


361
00:19:59.865 --> 00:20:02.368 line:-1 position:50%
A meaningful purpose string
will help people


362
00:20:02.368 --> 00:20:06.839 line:-1 position:50%
understand why your app
is requesting access.


363
00:20:06,839 --> 00:20:10,710 line:-1
There are a few alternative ways
you can get explicit permission


364
00:20:10.710 --> 00:20:13.279 line:-1 position:50%
to access files from other apps.


365
00:20:13.279 --> 00:20:16.716 line:-1 position:50%
For seamless access
to individual files and folders,


366
00:20:16.716 --> 00:20:19.251 line:-1 position:50%
use NSOpenPanel.


367
00:20:19.251 --> 00:20:23.055 line:-1 position:50%
This shows the macOS file picker
outside of your process,


368
00:20:23,055 --> 00:20:26,258 line:-1
and your app can read or write
selected resources


369
00:20:26,258 --> 00:20:29,428 line:-1
once the user confirms
the selection.


370
00:20:29.428 --> 00:20:33.132 line:-1 position:50%
NSOpenPanel also allows you
to specify the path


371
00:20:33,132 --> 00:20:35,101 line:-1
that is shown by default
in the picker


372
00:20:35,101 --> 00:20:38,637 line:-1
to make the selection
even easier.


373
00:20:38,637 --> 00:20:41,640 line:-1
For backup utilities
or disk-management tools


374
00:20:41.640 --> 00:20:44.510 line:-1 position:50%
that have already been granted
Full Disk Access,


375
00:20:44,510 --> 00:20:47,746 line:-1
no additional prompt will be
shown at time of access,


376
00:20:47.746 --> 00:20:51.117 line:-1 position:50%
since people have already chosen
to allow these apps


377
00:20:51,117 --> 00:20:54,286 line:-1
access to all files.


378
00:20:54,286 --> 00:20:57,790 line:-1
In addition, all apps signed
with your Team ID


379
00:20:57.790 --> 00:21:01.293 line:-1 position:50%
can access data in your other
app's containers by default,


380
00:21:01.293 --> 00:21:03.429 line:-1 position:50%
without a permission prompt.


381
00:21:03.429 --> 00:21:06.532 line:-1 position:50%
So if you release a new app
that imports data


382
00:21:06.532 --> 00:21:08.667 line:-1 position:50%
from a previous version
of your app,


383
00:21:08.667 --> 00:21:10.936 line:-1 position:50%
this will work seamlessly.


384
00:21:10.936 --> 00:21:13.739 line:-1 position:50%
However, there may be instances


385
00:21:13.739 --> 00:21:17.576 line:-1 position:50%
where you want to define
a more restrictive policy.


386
00:21:17.576 --> 00:21:20.646 line:-1 position:50%
For example, if you build
a code interpreter


387
00:21:20,646 --> 00:21:24,250 line:-1
such as an editor,
browser, or a shell,


388
00:21:24,250 --> 00:21:27,119 line:-1
you might want macOS
to ask for permission


389
00:21:27.119 --> 00:21:29.855 line:-1 position:50%
when this app accesses data
from a messaging app


390
00:21:29,855 --> 00:21:32,191 line:-1
that you also developed.


391
00:21:32,191 --> 00:21:37,296 line:-1
To do so, you can specify
an NSDataAccessSecurityPolicy


392
00:21:37,296 --> 00:21:40,132 line:-1
in your app's Info.plist,
to replace


393
00:21:40.132 --> 00:21:45.304 line:-1 position:50%
the default same-team policy
with an explicit AllowList.


394
00:21:45,304 --> 00:21:47,640 line:-1
When specified,
listed processes


395
00:21:47.640 --> 00:21:50.276 line:-1 position:50%
and installer packages
are permitted to access


396
00:21:50,276 --> 00:21:53,646 line:-1
your app's data
without additional consent


397
00:21:53.646 --> 00:21:57.650 line:-1 position:50%
while other apps
require permission.


398
00:21:57.650 --> 00:22:01.287 line:-1 position:50%
Advanced Data Protection
is another opportunity for you


399
00:22:01.287 --> 00:22:04.390 line:-1 position:50%
to protect data of your users.


400
00:22:04.390 --> 00:22:07.860 line:-1 position:50%
Advanced Data Protection
was added in 2022,


401
00:22:07.860 --> 00:22:11.497 line:-1 position:50%
providing a way for people
to enable end-to-end encryption


402
00:22:11.497 --> 00:22:15.234 line:-1 position:50%
for the vast majority
of their data stored in iCloud.


403
00:22:15.234 --> 00:22:18.470 line:-1 position:50%
By adopting CloudKit,
you can end-to-end encrypt data


404
00:22:18.470 --> 00:22:20.573 line:-1 position:50%
stored in CloudKit by your app


405
00:22:20,573 --> 00:22:24,176 line:-1
whenever someone enables
Advanced Data Protection.


406
00:22:24.176 --> 00:22:28.314 line:-1 position:50%
And this is possible without any
changes required on your end,


407
00:22:28,314 --> 00:22:30,549 line:-1
in order to manage
encryption keys,


408
00:22:30.549 --> 00:22:32.418 line:-1 position:50%
encryption operations,


409
00:22:32.418 --> 00:22:36.021 line:-1 position:50%
or complex and risky
recovery flows.


410
00:22:36,021 --> 00:22:38,190 line:-1
To extend the great
privacy benefits


411
00:22:38.190 --> 00:22:41.093 line:-1 position:50%
of Advanced Data Protection
to your users,


412
00:22:41.093 --> 00:22:45.130 line:-1 position:50%
you only need to follow
a few steps.


413
00:22:45,130 --> 00:22:48,667 line:-1
First, make sure to use
encrypted data types


414
00:22:48.667 --> 00:22:52.037 line:-1 position:50%
for all fields
in your CloudKit schema.


415
00:22:52,037 --> 00:22:55,207 line:-1
This includes
CKAsset fields by default,


416
00:22:55.207 --> 00:22:57.376 line:-1 position:50%
and for most data types
in CloudKit,


417
00:22:57.376 --> 00:23:02.348 line:-1 position:50%
there is an encrypted variant,
such as EncryptedString.


418
00:23:02,348 --> 00:23:06,085 line:-1
Then, you can use
the encryptedValues API,


419
00:23:06,085 --> 00:23:10,155 line:-1
to retrieve or store data
on your CloudKit records.


420
00:23:10.155 --> 00:23:13.959 line:-1 position:50%
All encryption and decryption
operations are abstracted away


421
00:23:13.959 --> 00:23:18.364 line:-1 position:50%
by this API
for your convenience.


422
00:23:18,364 --> 00:23:22,101 line:-1
As a result, your app's data
receives the full benefit


423
00:23:22,101 --> 00:23:24,937 line:-1
of security breach
and privacy protection


424
00:23:24.937 --> 00:23:27.673 line:-1 position:50%
that is available
from Advanced Data Protection,


425
00:23:27,673 --> 00:23:30,643 line:-1
whenever someone
enables this feature.


426
00:23:30,643 --> 00:23:34,313 line:0
For an explanation of how you
can adopt CloudKit in your app,


427
00:23:34,313 --> 00:23:36,282 position:50%
including code samples,


428
00:23:36,282 --> 00:23:41,253 line:0
watch "What's New in CloudKit"
from WWDC21.


429
00:23:41.253 --> 00:23:44.957 line:-1 position:50%
Next up are new fingerprinting
and tracking protections


430
00:23:44.957 --> 00:23:48.160 line:-1 position:50%
in Safari Private Browsing mode.


431
00:23:48.160 --> 00:23:52.431 line:-1 position:50%
Safari is designed
with privacy at its core.


432
00:23:52.431 --> 00:23:55.701 line:-1 position:50%
Private Browsing Mode enables
additional privacy protections


433
00:23:55,701 --> 00:23:56,936 line:-1
in Safari,


434
00:23:56,936 --> 00:23:59,905 line:-1
such as making sure
that when a tab is closed,


435
00:23:59.905 --> 00:24:02.641 line:-1 position:50%
Safari doesn't remember
the pages you visited,


436
00:24:02,641 --> 00:24:06,378 line:-1
search history,
or AutoFill information.


437
00:24:06.378 --> 00:24:08.947 line:-1 position:50%
Private Browsing mode
in Safari 17


438
00:24:08,947 --> 00:24:12,084 line:-1
adds advanced tracking
and fingerprinting protection,


439
00:24:12,084 --> 00:24:14,286 line:-1
which includes
two new protections


440
00:24:14,286 --> 00:24:17,990 line:-1
for preventing tracking
across websites.


441
00:24:17.990 --> 00:24:20.859 line:-1 position:50%
First, Safari prevents
known tracking


442
00:24:20,859 --> 00:24:24,396 line:-1
and fingerprinting resources
from being loaded.


443
00:24:24,396 --> 00:24:28,367 line:-1
If you are a website developer,
make sure to test your website's


444
00:24:28.367 --> 00:24:31.870 line:-1 position:50%
functionality in
Private Browsing mode:


445
00:24:31,870 --> 00:24:35,607 line:-1
focus testing on login flows,
cross-site navigation


446
00:24:35,607 --> 00:24:38,577 line:-1
from your website,
and use of browser APIs


447
00:24:38.577 --> 00:24:42.848 line:-1 position:50%
related to screen, audio,
and graphics.


448
00:24:42.848 --> 00:24:45.184 line:-1 position:50%
You can reload without
advanced tracking


449
00:24:45,184 --> 00:24:48,287 line:-1
and fingerprinting protections,
to confirm if a change


450
00:24:48.287 --> 00:24:52.758 line:-1 position:50%
in behavior of your website
is due to the new protections.


451
00:24:52.758 --> 00:24:56.662 line:-1 position:50%
Do this by right-clicking
on the reload button on macOS,


452
00:24:56.662 --> 00:24:59.431 line:-1 position:50%
via the page settings
button on iOS,


453
00:24:59.431 --> 00:25:03.202 line:-1 position:50%
or by testing in Safari
in normal browsing mode.


454
00:25:03.202 --> 00:25:05.237 line:-1 position:50%
You can also open
the Web Inspector


455
00:25:05.237 --> 00:25:09.575 line:-1 position:50%
to examine any output
to the JavaScript console.


456
00:25:09,575 --> 00:25:12,111 position:50%
Network requests that
were blocked as a result


457
00:25:12,111 --> 00:25:15,547 line:0
of contacting known trackers
show up as a message


458
00:25:15,547 --> 00:25:20,719 line:0
beginning with "Blocked
connection to known tracker."


459
00:25:20.719 --> 00:25:24.189 line:-1 position:50%
Another common method
for cross-website tracking


460
00:25:24.189 --> 00:25:27.393 line:-1 position:50%
are unique identifiers
embedded into URLs,


461
00:25:27,393 --> 00:25:30,095 line:-1
for example,
in query parameters.


462
00:25:30,095 --> 00:25:33,732 line:-1
To give people control over
where they can be tracked,


463
00:25:33.732 --> 00:25:37.736 line:-1 position:50%
another new protection is
removal of tracking parameters


464
00:25:37.736 --> 00:25:42.207 line:-1 position:50%
as part of browser navigation,
and when copying a link.


465
00:25:42,207 --> 00:25:44,443 line:-1
When a tracking parameter
is detected,


466
00:25:44.443 --> 00:25:47.913 line:-1 position:50%
Safari strips the identifying
components of the URL,


467
00:25:47,913 --> 00:25:52,251 line:-1
while leaving
nonidentifiable parts intact.


468
00:25:52,251 --> 00:25:55,721 line:-1
Remember that ad attribution
can be done


469
00:25:55,721 --> 00:25:59,925 line:-1
without identifying individuals
across websites.


470
00:25:59.925 --> 00:26:02.494 line:-1 position:50%
For example,
Private Click Measurement


471
00:26:02.494 --> 00:26:04.930 line:-1 position:50%
is a privacy-preserving
alternative


472
00:26:04,930 --> 00:26:09,001 line:-1
to tracking parameters
for advertising attribution.


473
00:26:09.001 --> 00:26:13.105 line:-1 position:50%
And it is now also available
in Private Browsing mode


474
00:26:13.105 --> 00:26:17.443 line:-1 position:50%
for direct-response advertising,
where no data is written to disk


475
00:26:17.443 --> 00:26:21.447 line:-1 position:50%
and attribution is limited
to a single browsing context,


476
00:26:21,447 --> 00:26:23,749 line:-1
based on a single tab.


477
00:26:23.749 --> 00:26:26.585 line:-1 position:50%
This follows Safari's
existing strict model


478
00:26:26.585 --> 00:26:29.521 line:-1 position:50%
of ephemeral browsing
and separation of tabs


479
00:26:29,521 --> 00:26:31,690 line:-1
in Private Browsing.


480
00:26:31,690 --> 00:26:34,326 line:0
For more information,
check out the video


481
00:26:34,326 --> 00:26:40,532 position:50%
"Meet privacy-preserving
ad attribution" from WWDC21.


482
00:26:40.532 --> 00:26:43.635 line:-1 position:50%
The last platform change
is the new permission model


483
00:26:43.635 --> 00:26:47.306 line:-1 position:50%
for app extensions in Safari.


484
00:26:47.306 --> 00:26:49.842 line:-1 position:50%
With Safari 17,
the permission model


485
00:26:49.842 --> 00:26:52.444 line:-1 position:50%
Apple pioneered
for web extensions


486
00:26:52.444 --> 00:26:56.081 line:-1 position:50%
is coming
to app extensions as well.


487
00:26:56.081 --> 00:27:00.152 line:-1 position:50%
This means that people are able
to choose which webpages


488
00:27:00.152 --> 00:27:05.390 line:-1 position:50%
your extension is able
to access on a per-site basis.


489
00:27:05,390 --> 00:27:06,925 line:-1
We're also
giving them control


490
00:27:06,925 --> 00:27:11,330 line:-1
over which extensions can run
in Private Browsing mode.


491
00:27:11,330 --> 00:27:14,399 position:50%
To learn more about
these changes to extensions


492
00:27:14,399 --> 00:27:17,169 line:0
and how permissions
for your extensions


493
00:27:17,169 --> 00:27:20,038 position:50%
can be granted per-site,
you can watch the video


494
00:27:20,038 --> 00:27:23,342 line:0
"What's new
in Safari extensions."


495
00:27:23,342 --> 00:27:26,812 line:-1
The privacy principles behind
new tools for developers


496
00:27:26.812 --> 00:27:30.816 line:-1 position:50%
and our platform changes extend
across all of the features


497
00:27:30,816 --> 00:27:33,886 line:-1
we build at Apple,
including the input model


498
00:27:33.886 --> 00:27:37.456 line:-1 position:50%
on our new
spatial computing platform.


499
00:27:37.456 --> 00:27:41.126 line:-1 position:50%
The system is really
simple to use:


500
00:27:41,126 --> 00:27:42,995 line:-1
just look around,


501
00:27:42.995 --> 00:27:45.063 line:-1 position:50%
decide what you want
to interact with,


502
00:27:45.063 --> 00:27:48.800 line:-1 position:50%
and tap.


503
00:27:48,800 --> 00:27:51,370 line:-1
There are no new permissions,


504
00:27:51,370 --> 00:27:54,540 line:-1
no extra work
for every app developer,


505
00:27:54.540 --> 00:27:58.944 line:-1 position:50%
and no worrying about apps
tracking where you look.


506
00:27:58.944 --> 00:28:03.248 line:-1 position:50%
The results are a great new
product with great privacy.


507
00:28:03,248 --> 00:28:05,651 line:-1
Let's go through the privacy
engineering approach


508
00:28:05.651 --> 00:28:09.354 line:-1 position:50%
to the development
of eye and hand control.


509
00:28:09.354 --> 00:28:11.690 line:-1 position:50%
First, there are
high-level goals


510
00:28:11,690 --> 00:28:14,693 line:-1
the input model
needs to achieve.


511
00:28:14.693 --> 00:28:17.863 line:-1 position:50%
The input experience
should be fast and fluid,


512
00:28:17,863 --> 00:28:22,501 line:-1
enabling natural interaction
with UI elements.


513
00:28:22,501 --> 00:28:24,369 line:-1
It should give
real-time feedback


514
00:28:24.369 --> 00:28:28.540 line:-1 position:50%
about what people are looking at
in order to provide confidence


515
00:28:28,540 --> 00:28:33,445 line:-1
in interacting with UI elements
of all kinds and sizes.


516
00:28:33.445 --> 00:28:37.115 line:-1 position:50%
In addition, existing iPhone
and iPad applications


517
00:28:37.115 --> 00:28:39.985 line:-1 position:50%
should work out of the box.


518
00:28:39,985 --> 00:28:43,789 line:-1
And last, it should not
require new app permissions


519
00:28:43.789 --> 00:28:47.859 line:-1 position:50%
just for apps to receive
basic inputs.


520
00:28:47,859 --> 00:28:51,730 line:-1
Next are the privacy goals
for the input model.


521
00:28:51,730 --> 00:28:54,199 line:-1
To prevent apps
from learning sensitive details


522
00:28:54,199 --> 00:28:57,603 line:-1
about your eyes,
including medical conditions,


523
00:28:57.603 --> 00:29:01.039 line:-1 position:50%
only relevant system components
should be able to access


524
00:29:01,039 --> 00:29:03,308 line:-1
the eye cameras.


525
00:29:03,308 --> 00:29:07,479 line:-1
To enable permissionless access,
apps should be able to work


526
00:29:07,479 --> 00:29:12,384 line:-1
without learning details about
people's eyes or hands.


527
00:29:12.384 --> 00:29:15.721 line:-1 position:50%
And what people look at can
reveal what they're thinking,


528
00:29:15.721 --> 00:29:19.558 line:-1 position:50%
so it is important that apps
work without learning


529
00:29:19.558 --> 00:29:24.329 line:-1 position:50%
what people look at and only
learn what they interact with.


530
00:29:24.329 --> 00:29:26.498 line:-1 position:50%
Let's go over the system
Apple engineered


531
00:29:26,498 --> 00:29:29,868 line:-1
to achieve all of these goals.


532
00:29:29,868 --> 00:29:32,004 line:-1
The internal and external
camera data


533
00:29:32.004 --> 00:29:34.806 line:-1 position:50%
that measures eyes and hands
for the input system


534
00:29:34,806 --> 00:29:38,710 line:-1
is processed in
an isolated system process.


535
00:29:38,710 --> 00:29:41,546 line:-1
This delivers a measurement
of where the eyes and hands


536
00:29:41,546 --> 00:29:45,384 line:-1
are located to the eye and pinch
detection systems,


537
00:29:45,384 --> 00:29:48,253 line:-1
and abstracts away
complex camera processing


538
00:29:48,253 --> 00:29:53,292 line:-1
from all other system
components, including your app.


539
00:29:53.292 --> 00:29:55.761 line:-1 position:50%
The hover feedback
system combines


540
00:29:55,761 --> 00:29:58,563 line:-1
what is shown onscreen
with the eye position


541
00:29:58,563 --> 00:30:02,000 line:-1
to determine what the user
is looking at.


542
00:30:02.000 --> 00:30:04.369 line:-1 position:50%
If they are looking
at a UI element,


543
00:30:04,369 --> 00:30:09,174 line:-1
the system adds a highlighting
layer as it is rendered.


544
00:30:09.174 --> 00:30:11.176 line:-1 position:50%
This is done by
the rendering engine


545
00:30:11.176 --> 00:30:13.979 line:-1 position:50%
outside of the app's process
and only visible


546
00:30:13,979 --> 00:30:16,148 line:-1
to the person using the device,


547
00:30:16,148 --> 00:30:18,917 line:-1
so they understand
what they are looking at


548
00:30:18,917 --> 00:30:23,288 line:-1
without revealing
any information to apps.


549
00:30:23.288 --> 00:30:26.591 line:-1 position:50%
And as soon as
a pinch gesture is detected,


550
00:30:26,591 --> 00:30:28,894 line:-1
the system delivers
a normal tap event


551
00:30:28,894 --> 00:30:32,531 line:-1
for the highlighted
UI element to your app.


552
00:30:32,531 --> 00:30:34,533 line:-1
With this system architecture,


553
00:30:34,533 --> 00:30:38,470 line:-1
the complexity of translating
camera data into input events


554
00:30:38.470 --> 00:30:41.139 line:-1 position:50%
is handled
by the operating system.


555
00:30:41.139 --> 00:30:43.575 line:-1 position:50%
This means,
no changes are required


556
00:30:43.575 --> 00:30:47.112 line:-1 position:50%
to receive inputs
on this new platform.


557
00:30:47,112 --> 00:30:49,648 line:-1
In addition to the default
system behavior,


558
00:30:49,648 --> 00:30:53,518 line:-1
UIKit, SwiftUI, and RealityKit
make it easy


559
00:30:53,518 --> 00:30:56,722 line:-1
to tune these effects
to match your app's design,


560
00:30:56.722 --> 00:30:58.824 line:-1 position:50%
with the same
privacy protections


561
00:30:58,824 --> 00:31:01,660 line:-1
as system-provided UI elements.


562
00:31:01.660 --> 00:31:04.629 line:-1 position:50%
You can change the type, shape,


563
00:31:04.629 --> 00:31:07.966 line:-1 position:50%
and what elements
the hover effects apply to.


564
00:31:07,966 --> 00:31:10,602 line:0
To learn more about
how to adopt,


565
00:31:10,602 --> 00:31:14,639 position:50%
watch "Meet SwiftUI for
spatial computing" as well as


566
00:31:14,639 --> 00:31:18,577 position:50%
"Elevate your windowed app
for spatial computing."


567
00:31:18.577 --> 00:31:21.613 line:-1 position:50%
This spatial input model
is made possible


568
00:31:21,613 --> 00:31:25,383 line:-1
by implementing
the privacy pillars.


569
00:31:25.383 --> 00:31:27.786 line:-1 position:50%
The system minimizes
the amount of data


570
00:31:27.786 --> 00:31:31.056 line:-1 position:50%
each component of the system
needs access to.


571
00:31:31.056 --> 00:31:35.293 line:-1 position:50%
All of the processing
takes place on the device.


572
00:31:35,293 --> 00:31:39,030 line:-1
People have control, since only
intentional interactions


573
00:31:39,030 --> 00:31:41,233 line:-1
are shared with apps.


574
00:31:41,233 --> 00:31:45,137 line:-1
And where you look is protected
using process isolation


575
00:31:45.137 --> 00:31:48.573 line:-1 position:50%
enforced by the operating
system's kernel.


576
00:31:48.573 --> 00:31:51.309 line:-1 position:50%
By making privacy
a core design goal,


577
00:31:51.309 --> 00:31:54.913 line:-1 position:50%
it is possible to deliver
both great features


578
00:31:54.913 --> 00:31:57.749 line:-1 position:50%
and great privacy.


579
00:31:57.749 --> 00:32:00.585 line:-1 position:50%
We hope that learning about
the new privacy changes


580
00:32:00,585 --> 00:32:04,055 line:-1
across Apple platforms
has helped inspire you


581
00:32:04,055 --> 00:32:07,159 line:-1
as they make it easier for you
to build trust


582
00:32:07,159 --> 00:32:09,461 line:-1
through great privacy;


583
00:32:09.461 --> 00:32:11.930 line:-1 position:50%
minimize data accessed
by your app


584
00:32:11,930 --> 00:32:17,135 line:-1
with content-picking APIs
providing seamless user control;


585
00:32:17,135 --> 00:32:19,738 line:-1
protect children
in your app by adopting


586
00:32:19.738 --> 00:32:22.474 line:-1 position:50%
the Sensitive Content Analysis
framework


587
00:32:22.474 --> 00:32:25.010 line:-1 position:50%
with on-device processing.


588
00:32:25,010 --> 00:32:27,946 line:-1
And for protecting
user data in your app,


589
00:32:27.946 --> 00:32:32.517 line:-1 position:50%
adopt security protections
such App Sandbox on macOS,


590
00:32:32.517 --> 00:32:36.721 line:-1 position:50%
and make sure to encrypt data
in CloudKit.


591
00:32:36,721 --> 00:32:38,590 line:-1
Thank you for watching
this video.


592
00:32:38,590 --> 00:32:41,426 line:-1
We can't wait to see
what you build.


593
00:32:41,426 --> 00:32:44,496 line:0 align:right position:90%
♪

