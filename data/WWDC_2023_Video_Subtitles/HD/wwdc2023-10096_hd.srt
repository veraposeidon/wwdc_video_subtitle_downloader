2
00:00:00,267 --> 00:00:04,438 line:-1
♪ Mellow instrumental hip-hop ♪


3
00:00:04,438 --> 00:00:10,344 line:0 size:2% align:right
♪


4
00:00:10,344 --> 00:00:11,645 line:-1
Hi! I am Tricia Gray,


5
00:00:11.645 --> 00:00:14.548 line:-1 position:50%
and I work on
the RealityKit Tools team.


6
00:00:14,548 --> 00:00:17,351 line:-1
Welcome to "Build great games
for spatial computing."


7
00:00:17,351 --> 00:00:19,253 line:-1
I am really excited
to talk to you today


8
00:00:19.253 --> 00:00:22.189 line:-1 position:50%
about making games
for this new device.


9
00:00:22.189 --> 00:00:23.824 line:-1 position:50%
Spatial computing
makes all sorts


10
00:00:23,824 --> 00:00:26,260 line:-1
of new game types possible.


11
00:00:26,260 --> 00:00:30,597 line:-1
It has unique rendering, audio,
and input characteristics.


12
00:00:30.597 --> 00:00:33.634 line:-1 position:50%
You have several choices when
it comes to which frameworks


13
00:00:33.634 --> 00:00:36.737 line:-1 position:50%
and tools you can use
to build games on it,


14
00:00:36.737 --> 00:00:39.172 line:-1 position:50%
and that includes RealityKit.


15
00:00:39,172 --> 00:00:41,942 line:-1
But first, I'll give you an idea
of what types of games


16
00:00:41,942 --> 00:00:45,545 line:-1
are possible
on this new platform.


17
00:00:45.545 --> 00:00:48.949 line:-1 position:50%
This is a standalone
spatial computing device.


18
00:00:48,949 --> 00:00:52,419 line:-1
It has high-resolution screens,
a wide field of view,


19
00:00:52.419 --> 00:00:54.521 line:-1 position:50%
and a great refresh rate.


20
00:00:54,521 --> 00:00:57,157 line:-1
The Spatial Audio is amazing.


21
00:00:57.157 --> 00:00:59.927 line:-1 position:50%
And there's LiDAR that tracks
both hand movements


22
00:00:59.927 --> 00:01:02.696 line:-1 position:50%
and the shape of the room
around the player.


23
00:01:02.696 --> 00:01:06.033 line:-1 position:50%
And players can stay connected
to their surroundings


24
00:01:06.033 --> 00:01:09.136 line:-1 position:50%
using the device's
high-quality passthrough.


25
00:01:09,136 --> 00:01:11,605 line:-1
This has exciting possibilities
and lets you create


26
00:01:11.605 --> 00:01:14.641 line:-1 position:50%
a wide variety
of different game types.


27
00:01:14.641 --> 00:01:17.678 line:-1 position:50%
You can build games that span
a spectrum of immersion,


28
00:01:17.678 --> 00:01:19.613 line:-1 position:50%
all depending on how much
of the player's attention


29
00:01:19.613 --> 00:01:22.115 line:-1 position:50%
you want to capture.


30
00:01:22,115 --> 00:01:24,818 position:50%
All apps and games
start in the Shared Space.


31
00:01:24,818 --> 00:01:27,888 line:0
This means that your game
can live in space together


32
00:01:27,888 --> 00:01:32,259 line:0
with other games and apps
and the player's surroundings.


33
00:01:32,259 --> 00:01:34,628 position:50%
There might be a virtual
chessboard on the player's


34
00:01:34,628 --> 00:01:38,031 line:0
actual desktop representing
an active game of chess,


35
00:01:38,031 --> 00:01:40,300 position:50%
or a virtual pet
sitting on the floor.


36
00:01:40,300 --> 00:01:41,768 position:50%
All of these apps live together,


37
00:01:41,768 --> 00:01:45,138 line:0
and the player can interact
with whichever one they want.


38
00:01:45,138 --> 00:01:46,673 position:50%
You can put all attention
on your game


39
00:01:46,673 --> 00:01:48,709 line:0
when you move into Full Space.


40
00:01:48,709 --> 00:01:51,044 line:0
This closes all other
windows and volumes,


41
00:01:51,044 --> 00:01:53,680 position:50%
focusing the experience
on your content,


42
00:01:53,680 --> 00:01:56,216 position:50%
while still keeping the player
connected to their surroundings


43
00:01:56,216 --> 00:01:57,985 line:0
through passthrough.


44
00:01:57,985 --> 00:01:59,953 line:0
This might be suitable
for an action game --


45
00:01:59,953 --> 00:02:01,521 position:50%
something you're
actively playing


46
00:02:01,521 --> 00:02:03,857 position:50%
but that still interacts
with the real world.


47
00:02:03,857 --> 00:02:05,792 position:50%
You can have spaceships coming
through a hole in the wall,


48
00:02:05,792 --> 00:02:08,028 position:50%
for example.


49
00:02:08,028 --> 00:02:10,564 line:0
A fully immersive experience
is when the game


50
00:02:10,564 --> 00:02:13,233 line:0
takes over the whole view.


51
00:02:13,233 --> 00:02:15,435 position:50%
Instead of your room,
there's an environment


52
00:02:15,435 --> 00:02:18,271 line:0
and you can no longer see
the real world.


53
00:02:18.271 --> 00:02:21.675 line:-1 position:50%
Of course, you can also make
traditional 2D games.


54
00:02:21,675 --> 00:02:23,543 line:-1
They run in a virtual window,
and the player


55
00:02:23.543 --> 00:02:26.780 line:-1 position:50%
can make that window
as big or as small as they want.


56
00:02:26.780 --> 00:02:29.149 line:-1 position:50%
It doesn't even have to be
a vertical window,


57
00:02:29.149 --> 00:02:31.818 line:-1 position:50%
it could be a flat surface
laying on the ground.


58
00:02:31.818 --> 00:02:34.321 line:-1 position:50%
They could hang it on the wall
or put it on a desk,


59
00:02:34.321 --> 00:02:36.390 line:-1 position:50%
or have it as the largest screen
they've ever had


60
00:02:36,390 --> 00:02:38,592 line:-1
right in front of their face.


61
00:02:38.592 --> 00:02:42.329 line:-1 position:50%
Players can interact with your
game just as they would on iOS,


62
00:02:42,329 --> 00:02:43,797 line:-1
but instead of touching
the screen,


63
00:02:43.797 --> 00:02:46.333 line:-1 position:50%
they'll look at an object
and tap their fingers together


64
00:02:46,333 --> 00:02:47,501 line:-1
to select it.


65
00:02:47,501 --> 00:02:49,636 line:-1
You can also connect
a Bluetooth controller


66
00:02:49,636 --> 00:02:52,239 line:-1
or a keyboard,
just as you can on iOS,


67
00:02:52.239 --> 00:02:55.142 line:-1 position:50%
and the passthrough is helpful
here because you can look down


68
00:02:55,142 --> 00:02:57,778 line:-1
and see the controller
you are using.


69
00:02:57,778 --> 00:02:59,913 line:-1
You can also spice up a 2D game


70
00:02:59,913 --> 00:03:03,250 line:-1
by adding
some 3D elements to it.


71
00:03:03,250 --> 00:03:05,886 line:-1
For example,
your window has real depth,


72
00:03:05.886 --> 00:03:08.588 line:-1 position:50%
so you can render your objects
in separate layers


73
00:03:08,588 --> 00:03:11,258 line:-1
and get a real parallax effect.


74
00:03:11,258 --> 00:03:13,760 line:-1
You can also have elements
that come out of the plane,


75
00:03:13.760 --> 00:03:15.962 line:-1 position:50%
such as smoke or sparks.


76
00:03:15.962 --> 00:03:20.267 line:-1 position:50%
Or you can add support
for custom hand gestures.


77
00:03:20.267 --> 00:03:23.470 line:-1 position:50%
With all these options,
you have a lot to think about.


78
00:03:23.470 --> 00:03:25.038 line:-1 position:50%
As you design your game,
think about


79
00:03:25.038 --> 00:03:27.874 line:-1 position:50%
how you can take advantage
of these new opportunities


80
00:03:27,874 --> 00:03:29,743 line:-1
for gameplay experiences,


81
00:03:29.743 --> 00:03:32.279 line:-1 position:50%
from having a giant
high-resolution screen


82
00:03:32,279 --> 00:03:33,914 line:-1
to having something personal


83
00:03:33,914 --> 00:03:36,149 line:-1
that you can play
in your own room.


84
00:03:36.149 --> 00:03:38.452 line:-1 position:50%
Your game can appear
on the player's desk.


85
00:03:38.452 --> 00:03:39.953 line:-1 position:50%
They can place it on the wall.


86
00:03:39,953 --> 00:03:43,256 line:-1
Something can fly out
and land in the player's hands.


87
00:03:43,256 --> 00:03:45,325 line:-1
You can make use
of the real world around them


88
00:03:45,325 --> 00:03:49,296 line:-1
or transport them into
an entirely different place.


89
00:03:49.296 --> 00:03:52.499 line:-1 position:50%
Rendering, audio, and input
work differently on this device


90
00:03:52,499 --> 00:03:55,635 line:-1
than you might be used to
on other platforms.


91
00:03:55,635 --> 00:03:57,304 line:-1
When you're running
in a Shared Space,


92
00:03:57.304 --> 00:03:59.673 line:-1 position:50%
the content from your game
is drawn together


93
00:03:59.673 --> 00:04:04.144 line:-1 position:50%
with content from other apps,
system UI, and passthrough.


94
00:04:04.144 --> 00:04:05.579 line:-1 position:50%
Since the rendering is shared,


95
00:04:05,579 --> 00:04:08,582 line:-1
the frameworks ensure that
all apps are good citizens


96
00:04:08.582 --> 00:04:12.152 line:-1 position:50%
and their rendering doesn't
interfere with other apps.


97
00:04:12,152 --> 00:04:14,254 line:-1
In this mode,
you can use surface shaders


98
00:04:14,254 --> 00:04:18,558 line:-1
and geometry shaders
through MaterialX.


99
00:04:18.558 --> 00:04:20.961 line:-1 position:50%
Rendering on xrOS
works a little differently


100
00:04:20.961 --> 00:04:22.629 line:-1 position:50%
than you are used to.


101
00:04:22,629 --> 00:04:24,698 line:-1
Instead of rendering
every pixel,


102
00:04:24.698 --> 00:04:26.366 line:-1 position:50%
you describe
what should be rendered --


103
00:04:26.366 --> 00:04:28.935 line:-1 position:50%
all the models,
textures, and shaders --


104
00:04:28.935 --> 00:04:33.073 line:-1 position:50%
and then the device renders it
automatically for each eye.


105
00:04:33.073 --> 00:04:36.610 line:-1 position:50%
Another benefit of the platform
rendering for your game is that


106
00:04:36,610 --> 00:04:41,414 line:-1
it can apply dynamic foveation
to increase the resolution.


107
00:04:41.414 --> 00:04:44.417 line:-1 position:50%
Dynamic foveation is
a technique where the renderer


108
00:04:44.417 --> 00:04:47.187 line:-1 position:50%
uses higher resolution
at the part of the display


109
00:04:47,187 --> 00:04:49,823 line:-1
where the player's eyes
are looking.


110
00:04:49,823 --> 00:04:52,459 line:-1
This means you get crisper
resolution in those spots


111
00:04:52.459 --> 00:04:55.395 line:-1 position:50%
without paying the cost
of rendering the whole scene,


112
00:04:55.395 --> 00:04:59.032 line:-1 position:50%
all without having to do
any of the hard work.


113
00:04:59,032 --> 00:05:02,435 line:-1
By default, RealityKit renders
your objects in such a way


114
00:05:02.435 --> 00:05:04.337 line:-1 position:50%
that they blend in realistically


115
00:05:04.337 --> 00:05:07.507 line:-1 position:50%
with the real-world objects
around them.


116
00:05:07.507 --> 00:05:09.676 line:-1 position:50%
RealityKit will sample
the actual lighting


117
00:05:09.676 --> 00:05:11.811 line:-1 position:50%
in the player's room
and apply that same lighting


118
00:05:11.811 --> 00:05:14.614 line:-1 position:50%
to the objects you render.


119
00:05:14,614 --> 00:05:16,449 line:-1
For materials,
RealityKit uses


120
00:05:16,449 --> 00:05:19,586 line:-1
a physically based lighting
model with typical parameters


121
00:05:19.586 --> 00:05:23.056 line:-1 position:50%
such as roughness,
specular, and metallic.


122
00:05:23,056 --> 00:05:24,724 line:-1
This, together with
the sampled lighting,


123
00:05:24,724 --> 00:05:27,694 line:-1
gives you a realistic look.


124
00:05:27.694 --> 00:05:29.496 line:-1 position:50%
But you can choose
where you want to be


125
00:05:29,496 --> 00:05:33,133 line:-1
on the scale
from realistic to fantastical.


126
00:05:33.133 --> 00:05:35.635 line:-1 position:50%
Instead of using
the built-in PBR shader,


127
00:05:35,635 --> 00:05:38,905 line:-1
you can create customized
shader content using MaterialX


128
00:05:38.905 --> 00:05:41.808 line:-1 position:50%
and edit the shader graph
in Reality Composer Pro


129
00:05:41.808 --> 00:05:44.377 line:-1 position:50%
or other graphic packages.


130
00:05:44,377 --> 00:05:46,947 line:-1
You can also assign
custom IBLs to your object


131
00:05:46.947 --> 00:05:49.816 line:-1 position:50%
for custom lighting effects.


132
00:05:49.816 --> 00:05:51.551 line:-1 position:50%
Another consideration
is that there are


133
00:05:51.551 --> 00:05:55.388 line:-1 position:50%
some systemwide effects that
get applied to rendered content.


134
00:05:55,388 --> 00:05:57,857 line:-1
The purpose of this is to make
your game work better


135
00:05:57,857 --> 00:06:00,760 line:-1
with other apps
and protect the player.


136
00:06:00,760 --> 00:06:03,597 line:-1
Depth mitigation makes your
content slightly transparent


137
00:06:03.597 --> 00:06:06.967 line:-1 position:50%
when it's hidden behind objects
in a player's surroundings.


138
00:06:06,967 --> 00:06:07,968 line:-1
This gets rid of the feeling


139
00:06:07,968 --> 00:06:10,704 line:-1
that objects are floating
in the room.


140
00:06:10.704 --> 00:06:13.139 line:-1 position:50%
Near-field vignetting
fades your content


141
00:06:13,139 --> 00:06:15,208 line:-1
when the player
gets too close to it.


142
00:06:15,208 --> 00:06:17,377 line:-1
This prevents issues
with your content


143
00:06:17.377 --> 00:06:20.080 line:-1 position:50%
clipping against the near plane.


144
00:06:20.080 --> 00:06:22.082 line:-1 position:50%
Breakthrough allows someone
who is approaching you


145
00:06:22.082 --> 00:06:24.084 line:-1 position:50%
to break through
the rendered view,


146
00:06:24.084 --> 00:06:27.354 line:-1 position:50%
so they don't run into you
without you noticing.


147
00:06:27.354 --> 00:06:30.190 line:-1 position:50%
Finally, grounding shadows
are added to rendered objects


148
00:06:30.190 --> 00:06:32.292 line:-1 position:50%
when they are placed
near real-world objects


149
00:06:32,292 --> 00:06:35,862 line:-1
to make them feel
more integrated into the scene.


150
00:06:35.862 --> 00:06:39.266 line:-1 position:50%
Fully immersive rendering works
similar to shared rendering,


151
00:06:39.266 --> 00:06:41.401 line:-1 position:50%
but in this case,
instead of sharing the screen


152
00:06:41.401 --> 00:06:43.270 line:-1 position:50%
with passthrough and other apps,


153
00:06:43,270 --> 00:06:45,438 line:-1
your app
is the only thing visible.


154
00:06:45,438 --> 00:06:47,507 line:-1
In this mode,
you render an environment


155
00:06:47,507 --> 00:06:51,077 line:-1
that replaces the real-world
view around the player.


156
00:06:51.077 --> 00:06:53.213 line:-1 position:50%
Rendering in this mode
works similar to rendering


157
00:06:53,213 --> 00:06:54,648 line:-1
in the shared mode.


158
00:06:54.648 --> 00:06:57.784 line:-1 position:50%
You still describe the scene
and the device renders it.


159
00:06:57.784 --> 00:06:59.953 line:-1 position:50%
But since you control
everything the player sees,


160
00:06:59,953 --> 00:07:01,655 line:-1
you have more freedom.


161
00:07:01.655 --> 00:07:02.989 line:-1 position:50%
For example,
you don't have to use


162
00:07:02.989 --> 00:07:05.759 line:-1 position:50%
the same lighting environment
as the room the player is in.


163
00:07:05,759 --> 00:07:09,629 line:-1
You can make the world as bright
or as dark as you want.


164
00:07:09.629 --> 00:07:12.432 line:-1 position:50%
The strength of the device
lies in the shared mode,


165
00:07:12.432 --> 00:07:14.134 line:-1 position:50%
but the fully immersive
experience is there


166
00:07:14.134 --> 00:07:17.937 line:-1 position:50%
when you want to transport
the player to a different place.


167
00:07:17.937 --> 00:07:19.873 line:-1 position:50%
If you'd like to write
your own engine,


168
00:07:19.873 --> 00:07:22.742 line:-1 position:50%
the CompositorServices API
gives you access


169
00:07:22,742 --> 00:07:25,211 line:-1
to Metal rendering on xrOS.


170
00:07:25.211 --> 00:07:28.181 line:-1 position:50%
You can combine it with ARKit,
which adds world tracking


171
00:07:28,181 --> 00:07:32,118 line:-1
and hand tracking to create
a fully immersive experience.


172
00:07:32.118 --> 00:07:34.521 line:-1 position:50%
In this mode, you have
full access to the screen


173
00:07:34.521 --> 00:07:37.490 line:-1 position:50%
and render the scene
for each eye.


174
00:07:37,490 --> 00:07:41,594 line:-1
You can use fully custom Metal
shaders and post processors.


175
00:07:41,594 --> 00:07:44,998 line:-1
This enables you to completely
replace real-world content


176
00:07:44,998 --> 00:07:47,067 line:-1
with your own virtual content.


177
00:07:47.067 --> 00:07:49.669 line:-1 position:50%
Passthrough and other apps
are hidden.


178
00:07:49,669 --> 00:07:51,137 position:50%
For more information on this,
check out


179
00:07:51,137 --> 00:07:54,874 position:50%
"Discover Metal
for immersive apps."


180
00:07:54.874 --> 00:07:57.277 line:-1 position:50%
Audio can be immersive too.


181
00:07:57,277 --> 00:08:00,547 line:-1
xrOS uses Spatial Audio
to bring objects to life


182
00:08:00,547 --> 00:08:03,083 line:-1
in the player's space,
automatically matching


183
00:08:03,083 --> 00:08:05,752 line:-1
the reverb and the real room
acoustics.


184
00:08:05.752 --> 00:08:09.656 line:-1 position:50%
If you play audio using
standard iOS audio APIs


185
00:08:09.656 --> 00:08:12.192 line:-1 position:50%
such as AVAudioEngine,


186
00:08:12.192 --> 00:08:16.196 line:-1 position:50%
the audio will be positioned
relative to the app window.


187
00:08:16,196 --> 00:08:18,932 line:-1
If you want sound to come from
different objects in the scene


188
00:08:18,932 --> 00:08:20,934 line:-1
in the player's space,
you should play the audio


189
00:08:20.934 --> 00:08:26.439 line:-1 position:50%
through RealityKit on
specific entities in your scene.


190
00:08:26.439 --> 00:08:29.142 line:-1 position:50%
You also have the option
of doing your own audio


191
00:08:29.142 --> 00:08:32.178 line:-1 position:50%
using any Apple or external API.


192
00:08:32.178 --> 00:08:34.347 line:-1 position:50%
If you want the audio
to be head tracked,


193
00:08:34,347 --> 00:08:39,753 line:-1
you need to use ARKit to get
the player's head position.


194
00:08:39,753 --> 00:08:41,888 line:-1
In addition
to graphics and audio,


195
00:08:41.888 --> 00:08:45.492 line:-1 position:50%
interaction is another key part
of an immersive experience.


196
00:08:45,492 --> 00:08:47,427 line:-1
After all,
every game needs input,


197
00:08:47,427 --> 00:08:49,362 line:-1
and this platform
offers multiple ways


198
00:08:49.362 --> 00:08:52.298 line:-1 position:50%
to interact with the device.


199
00:08:52.298 --> 00:08:55.101 line:-1 position:50%
You can get input events
on the objects in your scene


200
00:08:55,101 --> 00:08:58,738 line:-1
through SwiftUI as well as
other standard system gestures


201
00:08:58,738 --> 00:09:01,341 line:-1
such as dragging and magnifying.


202
00:09:01.341 --> 00:09:03.977 line:-1 position:50%
This is based on
the physics collision.


203
00:09:03,977 --> 00:09:05,979 line:-1
To make the gestures
work on your objects,


204
00:09:05.979 --> 00:09:08.014 line:-1 position:50%
they need to have both
a CollisionComponent,


205
00:09:08,014 --> 00:09:09,883 line:-1
which provides
the collision shape,


206
00:09:09.883 --> 00:09:11.851 line:-1 position:50%
as well as an
InputTargetComponent,


207
00:09:11,851 --> 00:09:14,454 line:-1
which marks them
as interactable.


208
00:09:14,454 --> 00:09:17,457 line:-1
Spatial input can feel
pretty magical for players,


209
00:09:17.457 --> 00:09:19.626 line:-1 position:50%
but you have other options
for game input too.


210
00:09:19,626 --> 00:09:21,861 line:-1
Even game controllers!


211
00:09:21,861 --> 00:09:24,631 line:-1
While system Look & Tap
gestures feel natural,


212
00:09:24.631 --> 00:09:27.167 line:-1 position:50%
you only have one set of eyes
to look with


213
00:09:27.167 --> 00:09:30.236 line:-1 position:50%
and only two hands
that can tap, pinch, or grab.


214
00:09:30,236 --> 00:09:33,006 line:-1
Some games
need more points of input.


215
00:09:33,006 --> 00:09:36,843 line:-1
One possibility is to use
a standard Bluetooth controller.


216
00:09:36.843 --> 00:09:40.146 line:-1 position:50%
xrOS supports trackpads,
mice, and keyboards,


217
00:09:40,146 --> 00:09:43,383 line:-1
as well as Bluetooth-based
game controllers.


218
00:09:43,383 --> 00:09:46,119 line:-1
This can be a good option
for traditional games.


219
00:09:46,119 --> 00:09:49,923 line:-1
And xrOS also allows
for more unconventional input,


220
00:09:49,923 --> 00:09:53,393 line:-1
such as using your own body
as a controller.


221
00:09:53.393 --> 00:09:55.795 line:-1 position:50%
You can use hand tracking
to let the player grab


222
00:09:55.795 --> 00:09:58.531 line:-1 position:50%
virtual objects
or implement custom gestures,


223
00:09:58.531 --> 00:10:01.968 line:-1 position:50%
such as pointing at an object
or karate chopping them.


224
00:10:01.968 --> 00:10:04.304 line:-1 position:50%
You access hand tracking
through ARKit,


225
00:10:04.304 --> 00:10:06.906 line:-1 position:50%
and the device will ask
the player for permission,


226
00:10:06,906 --> 00:10:09,576 line:-1
same as when an app
wants to use your location


227
00:10:09,576 --> 00:10:11,711 line:-1
or microphone.


228
00:10:11,711 --> 00:10:12,979 line:-1
There are some things
to consider


229
00:10:12.979 --> 00:10:14.747 line:-1 position:50%
when designing this input.


230
00:10:14,747 --> 00:10:18,818 line:-1
Hands can only be tracked when
they are visible to the camera.


231
00:10:18.818 --> 00:10:21.821 line:-1 position:50%
Really fast hand movements
can be hard to track.


232
00:10:21,821 --> 00:10:23,957 line:-1
Take that into account.


233
00:10:23,957 --> 00:10:25,792 line:-1
When you are working
in a Full Space,


234
00:10:25.792 --> 00:10:28.328 line:-1 position:50%
you can request
scene understanding.


235
00:10:28.328 --> 00:10:30.363 line:-1 position:50%
Scene understanding
provides a virtual mesh


236
00:10:30.363 --> 00:10:32.832 line:-1 position:50%
representing the room
around the player.


237
00:10:32,832 --> 00:10:34,601 line:-1
It can also do plane detection


238
00:10:34.601 --> 00:10:37.370 line:-1 position:50%
to find horizontal
and vertical surfaces.


239
00:10:37,370 --> 00:10:39,739 line:-1
You can also get the materials
of those surfaces,


240
00:10:39.739 --> 00:10:41.608 line:-1 position:50%
whether it's carpet or wood.


241
00:10:41.608 --> 00:10:42.876 line:-1 position:50%
This lets you use
the room itself


242
00:10:42.876 --> 00:10:45.578 line:-1 position:50%
as part of the input
to your game.


243
00:10:45.578 --> 00:10:47.080 line:-1 position:50%
Just as with hand tracking,


244
00:10:47.080 --> 00:10:50.049 line:-1 position:50%
this requires permission
from the player.


245
00:10:50.049 --> 00:10:51.551 line:-1 position:50%
With all the input options,


246
00:10:51,551 --> 00:10:54,754 line:-1
you have to figure out
what is right for your game.


247
00:10:54.754 --> 00:10:56.589 line:-1 position:50%
Using the player's body
for direct input


248
00:10:56.589 --> 00:10:58.858 line:-1 position:50%
is a great way of engaging them.


249
00:10:58.858 --> 00:11:00.927 line:-1 position:50%
But holding your hands up
and doing gestures


250
00:11:00,927 --> 00:11:03,963 line:-1
is also something
that can get tiring over time.


251
00:11:03.963 --> 00:11:06.733 line:-1 position:50%
If your game will be played
for long stretches of time


252
00:11:06,733 --> 00:11:09,135 line:-1
or require a lot
of quick actions,


253
00:11:09,135 --> 00:11:13,473 line:-1
think about how you can make use
of indirect gestures and gaze.


254
00:11:13,473 --> 00:11:15,408 line:-1
That way players
can rest their hands


255
00:11:15.408 --> 00:11:16.843 line:-1 position:50%
comfortably on their lap,


256
00:11:16.843 --> 00:11:19.946 line:-1 position:50%
and Look & Tap
instead of moving their hands.


257
00:11:19,946 --> 00:11:22,949 line:-1
The device is meant to be
something you use every day,


258
00:11:22,949 --> 00:11:25,418 line:-1
so comfort is important.


259
00:11:25,418 --> 00:11:27,720 line:-1
And if it makes sense,
you can also go


260
00:11:27.720 --> 00:11:30.456 line:-1 position:50%
to a more traditional
game controller.


261
00:11:30,456 --> 00:11:33,393 line:-1
This platform supports all
the multiplayer and networking


262
00:11:33.393 --> 00:11:37.597 line:-1 position:50%
capabilities you are familiar
with from other platforms.


263
00:11:37,597 --> 00:11:40,867 line:-1
Web-based networking, low-level
socket-based networking,


264
00:11:40.867 --> 00:11:45.471 line:-1 position:50%
and Multipeer Connectivity
are all available to you.


265
00:11:45,471 --> 00:11:48,274 line:-1
SharePlay also makes it easy
for the player to socialize


266
00:11:48.274 --> 00:11:51.044 line:-1 position:50%
in a more intimate way.


267
00:11:51.044 --> 00:11:53.246 line:-1 position:50%
You can even build games
using networking


268
00:11:53.246 --> 00:11:56.583 line:-1 position:50%
that allows some players
to play on iPhones or iPads


269
00:11:56.583 --> 00:11:59.018 line:-1 position:50%
and still connect
to this great device.


270
00:11:59,018 --> 00:12:01,321 line:-1
Imagine a dominos game
with your friend


271
00:12:01,321 --> 00:12:04,290 line:-1
that has an iPad,
and they have a 2D experience


272
00:12:04,290 --> 00:12:08,761 line:-1
while you have a rich,
immersive 3D experience.


273
00:12:08,761 --> 00:12:10,763 line:-1
Now that you know
a little bit more about this


274
00:12:10,763 --> 00:12:12,198 line:-1
as a gaming device,


275
00:12:12.198 --> 00:12:15.335 line:-1 position:50%
here are the frameworks
you can use to create games.


276
00:12:15,335 --> 00:12:18,004 line:-1
Depending on whether
you want to make a 2D game,


277
00:12:18.004 --> 00:12:21.140 line:-1 position:50%
a game that lives in Volume,
or a fully immersive game,


278
00:12:21,140 --> 00:12:23,476 line:-1
there are different options
available to you,


279
00:12:23.476 --> 00:12:26.346 line:-1 position:50%
such as using RealityKit,
our immersive framework,


280
00:12:26,346 --> 00:12:28,314 line:-1
or writing something directly
on top of Metal,


281
00:12:28,314 --> 00:12:30,583 line:-1
or even using Unity.


282
00:12:30.583 --> 00:12:33.386 line:-1 position:50%
If you have already made
a game for iPhone or iPad,


283
00:12:33,386 --> 00:12:36,456 line:-1
in most cases, your game will
automatically run on the device


284
00:12:36.456 --> 00:12:39.959 line:-1 position:50%
in a virtual window,
using Look & Tap to interact.


285
00:12:39,959 --> 00:12:43,596 line:-1
Note that this applies
to compatible 3D games too.


286
00:12:43,596 --> 00:12:46,466 line:-1
They will run in a flat window
on the device.


287
00:12:46.466 --> 00:12:48.434 line:-1 position:50%
If you want your game
to be stereoscopic,


288
00:12:48.434 --> 00:12:52.071 line:-1 position:50%
you must use
the spatial computing APIs.


289
00:12:52.071 --> 00:12:54.574 line:-1 position:50%
Being able to run
compatible games is great,


290
00:12:54.574 --> 00:12:57.276 line:-1 position:50%
but if you want to take full
advantage of the device,


291
00:12:57,276 --> 00:12:58,978 line:-1
build your game to target it.


292
00:12:58.978 --> 00:13:00.847 line:-1 position:50%
That way you can use gestures
for input,


293
00:13:00.847 --> 00:13:06.386 line:-1 position:50%
or add 2.5D elements such as
perspective or volumetric smoke.


294
00:13:06,386 --> 00:13:08,788 line:-1
You can build 2D games
for the device


295
00:13:08.788 --> 00:13:13.026 line:-1 position:50%
using a 2D framework
such as SwiftUI or SpriteKit.


296
00:13:13.026 --> 00:13:15.995 line:-1 position:50%
You can use Unity
to build games for xrOS.


297
00:13:15,995 --> 00:13:18,631 line:-1
This is a great option if you
already have a Unity game


298
00:13:18.631 --> 00:13:22.201 line:-1 position:50%
that you want to port,
or if you are a Unity developer.


299
00:13:22,201 --> 00:13:25,438 line:0
If you want to learn more about
using Unity, go to the sessions


300
00:13:25,438 --> 00:13:28,741 position:50%
"Bring your Unity VR app
to a fully immersive space"


301
00:13:28,741 --> 00:13:32,645 line:0
or "Create immersive
Unity apps."


302
00:13:32,645 --> 00:13:34,347 line:-1
Finally,
there is RealityKit,


303
00:13:34,347 --> 00:13:36,683 line:-1
Apple's real-time
rendering framework


304
00:13:36,683 --> 00:13:39,686 line:-1
for building immersive
spatial experiences.


305
00:13:39.686 --> 00:13:41.454 line:-1 position:50%
The API has
a lot of new features


306
00:13:41.454 --> 00:13:46.726 line:-1 position:50%
to make it a great way
of creating 3D games for xrOS.


307
00:13:46.726 --> 00:13:48.828 line:-1 position:50%
RealityKit supports
all the features you need


308
00:13:48,828 --> 00:13:50,863 line:-1
to make great games.


309
00:13:50,863 --> 00:13:54,067 line:-1
There is an entity component
system for custom behaviors,


310
00:13:54.067 --> 00:13:56.469 line:-1 position:50%
and an extensibility
along with physics,


311
00:13:56,469 --> 00:13:59,906 line:-1
animation, particles,
and audio support.


312
00:13:59.906 --> 00:14:01.974 line:-1 position:50%
On the rendering side,
RealityKit supports


313
00:14:01.974 --> 00:14:05.712 line:-1 position:50%
both USD models
as well as custom meshes.


314
00:14:05,712 --> 00:14:07,447 line:-1
For grounding your objects
in the world,


315
00:14:07.447 --> 00:14:10.516 line:-1 position:50%
there are MaterialX
and IBL lighting.


316
00:14:10,516 --> 00:14:13,386 line:-1
Attachments, a new feature
which allows you to connect


317
00:14:13,386 --> 00:14:17,390 line:-1
rich SwiftUI directly
to your RealityKit objects.


318
00:14:17,390 --> 00:14:20,660 line:-1
Using SwiftUI, you can mix
passthrough and rendered content


319
00:14:20.660 --> 00:14:25.198 line:-1 position:50%
in various ways using features
such as Windows, Volumes,


320
00:14:25.198 --> 00:14:28.701 line:-1 position:50%
Spaces, Anchors,
and Portals.


321
00:14:28,701 --> 00:14:30,937 line:-1
You can use system gestures
for input,


322
00:14:30,937 --> 00:14:33,206 line:-1
or you can use ARKit
to access hand tracking


323
00:14:33,206 --> 00:14:35,675 line:-1
and scene understanding.


324
00:14:35,675 --> 00:14:38,478 position:50%
To start building your game
for xrOS,


325
00:14:38,478 --> 00:14:42,982 position:50%
you create a new Xcode project
from the xrOS template.


326
00:14:42,982 --> 00:14:47,320 line:0
This gives you a SwiftUI window
with a RealityView inside of it.


327
00:14:47,320 --> 00:14:49,956 position:50%
The RealityView
in the SwiftUI hierarchy


328
00:14:49,956 --> 00:14:53,493 line:0
holds the 3D rendering
and simulation for your game.


329
00:14:53,493 --> 00:14:55,294 line:0
If you're not familiar
with SwiftUI yet,


330
00:14:55,294 --> 00:14:58,498 position:50%
it is worth it to learn
a little bit about it.


331
00:14:58.498 --> 00:15:02.068 line:-1 position:50%
By default, your 3D content
appears in a volumetric box


332
00:15:02.068 --> 00:15:03.770 line:-1 position:50%
formed by the window.


333
00:15:03,770 --> 00:15:05,571 line:-1
Your content is confined
to that window


334
00:15:05.571 --> 00:15:08.341 line:-1 position:50%
and will follow along
as it moves.


335
00:15:08.341 --> 00:15:10.977 line:-1 position:50%
RealityKit is a Swift API.


336
00:15:10.977 --> 00:15:13.279 line:-1 position:50%
Swift can be a great language
for building games,


337
00:15:13.279 --> 00:15:15.782 line:-1 position:50%
but if you want to use
another language, you can.


338
00:15:15,782 --> 00:15:17,917 line:-1
You just create a bridge
between that language


339
00:15:17.917 --> 00:15:19.952 line:-1 position:50%
and the Swift API.


340
00:15:19,952 --> 00:15:21,888 position:50%
Xcode comes with a Simulator.


341
00:15:21,888 --> 00:15:24,490 line:0
You can start developing
your games right away


342
00:15:24,490 --> 00:15:26,025 line:0
without having a device.


343
00:15:26,025 --> 00:15:29,796 position:50%
Of course, testing it
on a real device is always best.


344
00:15:29.796 --> 00:15:32.031 line:-1 position:50%
Your 3D content will by default


345
00:15:32,031 --> 00:15:34,801 line:-1
be displayed
in a SwiftUI window.


346
00:15:34,801 --> 00:15:36,536 line:-1
One of the first things
you will want to do


347
00:15:36,536 --> 00:15:39,338 line:-1
as a game developer
is to break out of that window


348
00:15:39,338 --> 00:15:42,275 line:-1
and draw content
in the player's surroundings.


349
00:15:42.275 --> 00:15:45.077 line:-1 position:50%
You have some different options
for doing that.


350
00:15:45.077 --> 00:15:46.979 line:-1 position:50%
You can use a volume.


351
00:15:46,979 --> 00:15:50,583 line:-1
Volumes are similar to windows,
with one important difference.


352
00:15:50.583 --> 00:15:53.252 line:-1 position:50%
With windows,
the player controls the size.


353
00:15:53.252 --> 00:15:55.655 line:-1 position:50%
They can drag the corner
and make it as big


354
00:15:55,655 --> 00:15:59,125 line:-1
or as small as they like,
and your content has to adapt.


355
00:15:59,125 --> 00:16:01,327 line:-1
If the window is too small
for your content,


356
00:16:01.327 --> 00:16:03.796 line:-1 position:50%
your content will be clipped.


357
00:16:03,796 --> 00:16:06,032 line:-1
With Volumes,
it's the other way around.


358
00:16:06.032 --> 00:16:07.300 line:-1 position:50%
With Volumes, you say,


359
00:16:07.300 --> 00:16:11.904 line:-1 position:50%
"I want the box to be this big,
this high, and this deep."


360
00:16:11,904 --> 00:16:13,506 line:-1
The player can
still put that box


361
00:16:13.506 --> 00:16:15.374 line:-1 position:50%
wherever they want
in the world,


362
00:16:15.374 --> 00:16:18.277 line:-1 position:50%
but the box will always
be the same size.


363
00:16:18,277 --> 00:16:20,346 line:-1
So you can make sure
that the box is big enough


364
00:16:20.346 --> 00:16:22.481 line:-1 position:50%
to fit your entire experience,


365
00:16:22,481 --> 00:16:26,385 line:-1
and you can be sure
that the content doesn't clip.


366
00:16:26.385 --> 00:16:30.523 line:-1 position:50%
If you don't want to use a box
at all, you can use a space.


367
00:16:30,523 --> 00:16:33,292 line:-1
This allows you to render
content all around the player


368
00:16:33,292 --> 00:16:35,228 line:-1
in the real world.


369
00:16:35.228 --> 00:16:38.965 line:-1 position:50%
For example, you can surround
the player with buzzing bees.


370
00:16:38,965 --> 00:16:40,499 line:-1
There are different
kinds of spaces


371
00:16:40,499 --> 00:16:43,002 line:-1
corresponding
to the different game types.


372
00:16:43,002 --> 00:16:46,205 line:-1
You can use a Shared Space
to run together with other apps,


373
00:16:46,205 --> 00:16:47,640 line:-1
or a Full Space
if you want your game


374
00:16:47.640 --> 00:16:50.243 line:-1 position:50%
to be the only thing running.


375
00:16:50.243 --> 00:16:52.645 line:-1 position:50%
Anchors let you anchor
your scene to an object


376
00:16:52.645 --> 00:16:56.482 line:-1 position:50%
in the real world and
follow it around as it moves.


377
00:16:56,482 --> 00:16:59,552 line:-1
You can use a horizontal
or a vertical surface anchor


378
00:16:59.552 --> 00:17:02.622 line:-1 position:50%
to anchor the entity
to a desk or a wall.


379
00:17:02,622 --> 00:17:05,491 line:-1
There are also hand anchors
that let you anchor content


380
00:17:05,491 --> 00:17:08,461 line:-1
to the player's hands.


381
00:17:08.461 --> 00:17:11.397 line:-1 position:50%
Portals allow you to punch
a hole in the player's reality


382
00:17:11.397 --> 00:17:13.866 line:-1 position:50%
to create your own
fantastic reality.


383
00:17:13,866 --> 00:17:16,135 line:-1
You can anchor a portal
to a real wall


384
00:17:16,135 --> 00:17:18,371 line:-1
and have that portal
cut a hole in the wall


385
00:17:18,371 --> 00:17:21,874 line:-1
that lets you peek into a
rendered world inside the hole.


386
00:17:21.874 --> 00:17:24.543 line:-1 position:50%
You can render whatever you want
inside that portal,


387
00:17:24.543 --> 00:17:25.811 line:-1 position:50%
and the objects
inside the portal


388
00:17:25.811 --> 00:17:30.016 line:-1 position:50%
can emerge
into the real world too.


389
00:17:30,016 --> 00:17:33,452 line:-1
RealityKit can load and render
USD files.


390
00:17:33.452 --> 00:17:36.689 line:-1 position:50%
One of the easiest ways to get
started with volumetric content


391
00:17:36.689 --> 00:17:39.792 line:-1 position:50%
is to assemble scenes
out of premade objects,


392
00:17:39,792 --> 00:17:42,562 line:-1
but for that, you need
some kind of visual tool.


393
00:17:42.562 --> 00:17:46.465 line:-1 position:50%
Reality Composer Pro is a tool
that comes bundled with Xcode.


394
00:17:46.465 --> 00:17:48.200 line:-1 position:50%
It lets you load USD models


395
00:17:48,200 --> 00:17:51,304 line:-1
and preview how they will look
on the device.


396
00:17:51.304 --> 00:17:54.507 line:-1 position:50%
When you build your project
with Reality Composer Pro,


397
00:17:54.507 --> 00:17:58.978 line:-1 position:50%
your assets are automatically
optimized for use on the device.


398
00:17:58,978 --> 00:18:01,080 line:0
You can learn more about
Reality Composer Pro


399
00:18:01,080 --> 00:18:03,449 line:0
in these sessions.


400
00:18:03,449 --> 00:18:05,251 line:0
I hope this session
was a helpful


401
00:18:05,251 --> 00:18:08,354 line:0
game-development roadmap
for spatial computing.


402
00:18:08,354 --> 00:18:09,889 position:50%
Be sure to take a deeper dive


403
00:18:09,889 --> 00:18:12,491 line:0
in the multiple framework
sessions available.


404
00:18:12,491 --> 00:18:14,360 line:-1
This is a great platform
to socialize


405
00:18:14.360 --> 00:18:15.795 line:-1 position:50%
and play games with others.


406
00:18:15,795 --> 00:18:18,631 line:-1
I can't wait to see
what you develop for it.


407
00:18:18,631 --> 00:18:22,668 line:0 position:90% size:2%
♪

