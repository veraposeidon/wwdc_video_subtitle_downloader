2
00:00:00,334 --> 00:00:06,340 line:-1
♪ ♪


3
00:00:10,344 --> 00:00:14,481 line:-2
Tu: Hi, my name is Tu Nguyen,
and I'm an engineer on the Workout team.


4
00:00:14,515 --> 00:00:17,918 line:-2
I'm here today with my colleague Abhiraj,
and we'll walk you through how


5
00:00:17,951 --> 00:00:20,387 line:-1
to build custom workouts for Apple Watch.


6
00:00:21,288 --> 00:00:24,858 line:-2
In watchOS 9, we introduced
new workout types in the Workout app


7
00:00:24,892 --> 00:00:29,096 line:-2
for users to create and customize
their ideal workout experience:


8
00:00:29,963 --> 00:00:34,101 line:-2
Goal based workouts where users can
perform a workout with a singular goal,


9
00:00:34,134 --> 00:00:37,371 line:-1
such as distance, energy, or time.


10
00:00:37,404 --> 00:00:42,109 line:-2
Pacer workouts that puts the focus
on pace or speed front and center.


11
00:00:42,943 --> 00:00:46,747 line:-2
Swim-bike-run workouts
for triathletes to seamlessly transition


12
00:00:46,780 --> 00:00:49,550 line:-1
between swim, bike, and run activities.


13
00:00:50,484 --> 00:00:53,854 line:-2
And custom workouts,
structured steps with a combination


14
00:00:53,887 --> 00:00:56,023 line:-1
of custom goals and alerts.


15
00:00:56,757 --> 00:01:01,295 line:-2
So in iOS 17 and watchOS 10,
we're bringing all of these workout types


16
00:01:01,328 --> 00:01:04,598 line:-1
into a new framework called WorkoutKit.


17
00:01:06,733 --> 00:01:09,336 line:-1
WorkoutKit is a brand-new Swift framework.


18
00:01:09,369 --> 00:01:13,073 line:-2
It allows you to create and customize
all of the different workout types


19
00:01:13,106 --> 00:01:16,610 line:-2
that a user can create in the Workout app
within your own apps.


20
00:01:16,643 --> 00:01:19,079 line:-2
It is also the bridge
to help you bring these workouts


21
00:01:19,112 --> 00:01:22,282 line:-1
into the Workout app for users to perform.


22
00:01:22,316 --> 00:01:24,718 line:-1
WorkoutKit provides preview UI


23
00:01:24,751 --> 00:01:27,554 line:-2
and the ability
to sync scheduled workouts.


24
00:01:28,522 --> 00:01:31,024 line:0
We're bringing these four workout types
to WorkoutKit,


25
00:01:31,058 --> 00:01:34,862 line:0
and today we're going to be focusing
on custom workouts.


26
00:01:35,629 --> 00:01:39,499 line:-2
In this session, we'll be
going over building a custom workout,


27
00:01:39,533 --> 00:01:41,535 line:-1
previewing for export,


28
00:01:41,568 --> 00:01:44,371 line:-1
and how to schedule workouts.


29
00:01:44,404 --> 00:01:46,740 line:-2
Let's first jump
into building a custom workout.


30
00:01:47,641 --> 00:01:50,077 line:-1
Custom workouts are a great way for users


31
00:01:50,110 --> 00:01:52,379 line:-2
to focus their workout
in a structured manner.


32
00:01:52,412 --> 00:01:54,481 line:-1
They contain a series of distinct steps


33
00:01:54,515 --> 00:01:57,150 line:-2
that guides the user
through their workout.


34
00:01:57,184 --> 00:02:00,954 line:-2
When looking at a custom workout,
there are three distinct stages.


35
00:02:00,988 --> 00:02:03,557 line:-2
First, we have a step
at the beginning of the workout.


36
00:02:03,590 --> 00:02:05,359 line:-1
This is the warmup step.


37
00:02:05,392 --> 00:02:08,495 line:-2
Next, we have an ordered collection
of repeatable blocks,


38
00:02:08,529 --> 00:02:10,931 line:-2
which contain
their own combination of steps.


39
00:02:10,964 --> 00:02:14,401 line:-2
These blocks represent
the majority of the workout.


40
00:02:14,434 --> 00:02:16,937 line:-2
And finally,
a step at the end of the workout


41
00:02:16,970 --> 00:02:19,773 line:-1
that we refer to as the cooldown step.


42
00:02:19,806 --> 00:02:23,911 line:-2
Now, whether it's a warmup, cooldown,
or step within a repeatable block,


43
00:02:23,944 --> 00:02:27,748 line:-2
every step contains
two important attributes.


44
00:02:27,781 --> 00:02:31,151 line:-1
First, every step contains a single goal.


45
00:02:31,185 --> 00:02:34,855 line:-2
Goals define the progression
of steps within a custom workout.


46
00:02:34,888 --> 00:02:36,356 line:-1
When a goal is complete,


47
00:02:36,390 --> 00:02:38,992 line:-2
the custom workout
moves on to the next step.


48
00:02:40,260 --> 00:02:44,898 line:-5
A step within a custom workout can have
a time or distance goal, if applicable.


49
00:02:44,932 --> 00:02:46,567 line:-4
You can also set an open goal,


50
00:02:46,600 --> 00:02:49,870 line:-5
which requires the user
to manually progress through the step.


51
00:02:50,904 --> 00:02:54,408 line:-2
And secondly,
every step can contain a single alert.


52
00:02:54,441 --> 00:02:57,044 line:-2
Alerts inform the user
of a particular metric


53
00:02:57,077 --> 00:02:59,413 line:-1
that indicates their current performance.


54
00:02:59,446 --> 00:03:02,583 line:-2
For example, the user may want
to be alerted when their heartrate


55
00:03:02,616 --> 00:03:04,852 line:-1
is elevated past a certain threshold.


56
00:03:06,186 --> 00:03:11,792 line:0
And we're bringing support for pace,
cadence, power, and heartrate alerts.


57
00:03:13,026 --> 00:03:15,062 line:-1
Now that we know what makes up a step,


58
00:03:15,095 --> 00:03:17,197 line:-1
let's take a closer look at blocks.


59
00:03:18,432 --> 00:03:23,070 line:1
Blocks contain steps distinguished
as work steps or recovery steps.


60
00:03:23,103 --> 00:03:26,006 line:1
The steps within a block
contain their own goal and alert,


61
00:03:26,039 --> 00:03:27,407 line:1
as you saw before,


62
00:03:27,441 --> 00:03:32,045 line:1
and you can have any number of steps
in any order within your block.


63
00:03:32,079 --> 00:03:34,381 line:1
Blocks can also be repeatable.


64
00:03:34,414 --> 00:03:38,485 line:1
You can specify the number of iterations
that you want your block to be repeated.


65
00:03:39,253 --> 00:03:42,756 line:-2
Now let's see how this translates
into the in-workout experience


66
00:03:42,789 --> 00:03:44,758 line:-1
on Apple Watch.


67
00:03:44,791 --> 00:03:49,363 line:-2
First, we see that the user's current step
is a work step within the block.


68
00:03:49,396 --> 00:03:51,498 line:-1
Since this step has a distance goal,


69
00:03:51,532 --> 00:03:55,636 line:-2
we see the current goal progress
with 0.2 miles remaining.


70
00:03:55,669 --> 00:03:57,905 line:-2
This step also has an alert
for current power,


71
00:03:57,938 --> 00:03:59,540 line:-1
which we display at the bottom.


72
00:03:59,573 --> 00:04:01,808 line:-2
If you don't happen
to specify an alert for this step,


73
00:04:01,842 --> 00:04:03,977 line:-2
we'll display
the user's current heartrate.


74
00:04:05,112 --> 00:04:09,049 line:-2
And finally, we also give a preview
that the next step is a recovery step


75
00:04:09,082 --> 00:04:11,218 line:-1
with a time based goal.


76
00:04:11,251 --> 00:04:15,789 line:-2
With steps and blocks, you are able
to construct a complete custom workout.


77
00:04:17,090 --> 00:04:20,727 line:-2
Again, at the very beginning,
we have a warmup step,


78
00:04:20,761 --> 00:04:25,065 line:-2
then a series of repeatable blocks
containing work and recovery steps,


79
00:04:25,098 --> 00:04:28,001 line:-2
where we spend the majority
of our time in the workout,


80
00:04:28,035 --> 00:04:30,971 line:-1
and finally, a cooldown step at the end.


81
00:04:31,839 --> 00:04:34,208 line:-2
Now I'll hand it over
to my colleague Abhiraj


82
00:04:34,241 --> 00:04:37,678 line:-2
to show you how to build
your own custom workout with WorkoutKit.


83
00:04:38,612 --> 00:04:42,683 line:-2
Abhiraj: Hi I'm Abhiraj.
I'm an engineer on the Workout team.


84
00:04:42,716 --> 00:04:45,419 line:-2
As Tu mentioned,
with WorkoutKit you can create workouts


85
00:04:45,452 --> 00:04:49,723 line:-2
for goal, pacer, swim-bike-run,
and custom workouts.


86
00:04:49,756 --> 00:04:53,760 line:-2
Let's take an example
of a custom outdoor cycling workout.


87
00:04:53,794 --> 00:04:56,196 line:-1
We will have four steps for this workout:


88
00:04:56,230 --> 00:04:59,533 line:-2
Warmup,
two repeating blocks of work and recovery,


89
00:04:59,566 --> 00:05:02,302 line:-1
and cooldown to end the workout.


90
00:05:02,336 --> 00:05:05,405 line:-2
For our warmup step,
we'll use an open goal.


91
00:05:05,439 --> 00:05:08,041 line:-2
For our first block,
we'll have a work step


92
00:05:08,075 --> 00:05:10,344 line:-1
with a distance goal and pace alert


93
00:05:10,377 --> 00:05:13,714 line:-2
and a recovery step
with a distance goal and heart rate alert.


94
00:05:13,747 --> 00:05:16,717 line:-1
This block will have four iterations.


95
00:05:16,750 --> 00:05:21,588 line:-2
For our second block, we'll have a work
step with a time goal and power alert


96
00:05:21,622 --> 00:05:25,259 line:-2
and a recovery step
with a time goal and heart rate alert.


97
00:05:25,292 --> 00:05:29,429 line:-2
Finally, our cooldown step
will have a time-based goal


98
00:05:29,463 --> 00:05:32,666 line:-2
Let's see how
we can represent this in code.


99
00:05:32,699 --> 00:05:35,302 line:-1
Let's start with our warmup step.


100
00:05:35,335 --> 00:05:37,738 line:-1
First, we import WorkoutKit.


101
00:05:37,771 --> 00:05:41,808 line:-2
As we mentioned before, our warmup step
has an open goal with no alert.


102
00:05:41,842 --> 00:05:45,679 line:-2
So in this case, we'll create it
with the default initializer.


103
00:05:45,712 --> 00:05:49,082 line:-2
Let's move on
to the first block of this workout.


104
00:05:49,116 --> 00:05:51,451 line:-1
In this first block, we'll have two steps.


105
00:05:51,485 --> 00:05:55,722 line:-2
The first step is a work step
with a distance goal and pace alert.


106
00:05:57,291 --> 00:05:59,960 line:-2
We'll need to import HealthKit here
since we're leveraging


107
00:05:59,993 --> 00:06:04,464 line:-2
HKQuantity and HKUnit
to represent our goals and alerts.


108
00:06:04,498 --> 00:06:08,168 line:-2
We'll now set up
a 2-mile goal using WorkoutGoal.


109
00:06:08,202 --> 00:06:13,340 line:-2
We also add a pace alert to this step,
aiming for a pace of 10 miles per hour.


110
00:06:13,373 --> 00:06:17,644 line:-2
Let's first create HKQuantity
of pace value with 10 miles per hour.


111
00:06:17,678 --> 00:06:20,914 line:-2
We'll use WorkoutAlert
for creating this alert.


112
00:06:20,948 --> 00:06:24,251 line:-2
To create WorkoutAlert,
we'll need WorkoutAlertTargetType,


113
00:06:24,284 --> 00:06:27,221 line:-2
in this case,
target with 10 miles per hour,


114
00:06:27,254 --> 00:06:31,258 line:-2
and a WorkoutAlertType,
in this case, current pace.


115
00:06:31,291 --> 00:06:34,828 line:-2
And now we can create
our pace WorkoutAlert.


116
00:06:34,862 --> 00:06:38,565 line:-2
Now, to create our work step,
we'll use BlockStep of type work


117
00:06:38,599 --> 00:06:40,968 line:-1
with twoMileGoal and paceAlert.


118
00:06:42,803 --> 00:06:46,540 line:-2
The 2nd step
of this block is a recovery step.


119
00:06:46,573 --> 00:06:51,912 line:-2
We'll create a 1/2 mile goal for recovery
with a heart rate zone 1 alert.


120
00:06:52,946 --> 00:06:56,316 line:-2
Then we can create
our recovery BlockStep of type rest.


121
00:06:57,150 --> 00:07:02,155 line:-2
Now, we can create our block with the work
and recovery steps we just defined.


122
00:07:02,189 --> 00:07:07,461 line:-2
To do this, we use IntervalBlock with
an array of steps and iterations set to 4.


123
00:07:08,529 --> 00:07:11,932 line:-2
And with that,
our first block is complete.


124
00:07:11,965 --> 00:07:14,868 line:-1
Now lets move on to our second block.


125
00:07:14,902 --> 00:07:17,504 position:49% line:-1
In this block, we also have two steps.


126
00:07:17,538 --> 00:07:21,375 position:49% line:-2
The first step is a work step
with a time goal and power alert.


127
00:07:22,342 --> 00:07:24,845 line:-1
We set up a two-minute goal.


128
00:07:24,878 --> 00:07:25,979 position:49% line:-1
For this work block,


129
00:07:26,013 --> 00:07:31,218 position:49% line:-2
lets create power range alert
with a range of 250 to 275 watts.


130
00:07:31,251 --> 00:07:34,588 line:-2
We create our WorkoutTargetType
of type range


131
00:07:34,621 --> 00:07:36,823 line:-1
and create WorkoutAlert.


132
00:07:36,857 --> 00:07:41,495 line:0
Finally, creating BlockStep using
the goal and alert that we just created.


133
00:07:42,896 --> 00:07:45,899 line:-2
The second step
of this block is a recovery step.


134
00:07:45,933 --> 00:07:51,038 line:-2
We create a 30 second goal
with a heart rate zone 1 alert.


135
00:07:51,071 --> 00:07:53,707 line:-1
Then we can create our recovery step.


136
00:07:54,908 --> 00:07:58,879 line:-2
Now we can create our second block
with the work and recovery steps


137
00:07:58,912 --> 00:08:02,783 line:-1
we just defined with iterations set to 2.


138
00:08:03,851 --> 00:08:06,653 line:-2
Finally,
let's move on to our cooldown step.


139
00:08:06,687 --> 00:08:09,189 line:-2
We wanted our cooldown step
to have a time-based goal,


140
00:08:09,223 --> 00:08:10,891 line:-1
so let's create that here.


141
00:08:12,459 --> 00:08:15,329 line:-1
We create WorkoutGoal of type time


142
00:08:15,362 --> 00:08:19,566 line:-2
and use that to create CooldownStep
with goal set to fiveMinuteGoal.


143
00:08:20,501 --> 00:08:22,336 line:-1
Now let's put it all together.


144
00:08:23,470 --> 00:08:26,073 line:-1
Using everything we've built so far,


145
00:08:26,106 --> 00:08:30,777 line:-1
warmup step, block1, block2,


146
00:08:30,811 --> 00:08:33,280 line:-1
and cooldown step, we can create


147
00:08:33,313 --> 00:08:35,749 line:-1
our custom workout composition.


148
00:08:35,782 --> 00:08:40,287 line:-2
We set the activity type to cycling
and location to be outdoor.


149
00:08:40,320 --> 00:08:43,524 line:-2
LocationType parameter
of CustomWorkoutComposition's initializer


150
00:08:43,557 --> 00:08:46,660 line:-2
is optional,
and by default, it's set to outdoor.


151
00:08:47,561 --> 00:08:51,498 line:0
Lets combine all this and create
our custom workout named "My Workout."


152
00:08:53,033 --> 00:08:55,235 line:-2
You might also
be wondering why initializer


153
00:08:55,269 --> 00:08:58,572 line:-2
of CustomWorkoutComposition
is preceded by a try.


154
00:08:58,605 --> 00:09:01,375 line:-2
That's because we're
validating the composition.


155
00:09:01,408 --> 00:09:05,245 line:-2
Let's discuss the importance
of validating workout compositions.


156
00:09:05,279 --> 00:09:07,981 line:-2
Validations ensure
a coherent workout structure


157
00:09:08,015 --> 00:09:11,251 line:-2
and prevents any issues
during workout runtime.


158
00:09:11,285 --> 00:09:13,921 line:-2
For instance,
distance goals should not be used


159
00:09:13,954 --> 00:09:16,623 line:-2
for non-distance based
workout compositions.


160
00:09:16,657 --> 00:09:18,926 line:-2
Similarly,
pace alerts should not be applied


161
00:09:18,959 --> 00:09:23,030 line:-2
to workouts that do not support pace,
such as elliptical.


162
00:09:23,063 --> 00:09:25,465 line:-2
To help with this,
we have a series of validations


163
00:09:25,499 --> 00:09:27,734 line:-2
that are performed
when certain properties are set,


164
00:09:27,768 --> 00:09:32,372 line:-2
example, workout activity type,
or when running through certain API.


165
00:09:33,574 --> 00:09:37,578 line:-2
We have also created WorkoutComposition
wrapper to perform additional operations.


166
00:09:37,611 --> 00:09:42,149 line:0
For example, we have also created APIs
to import and export workout composition


167
00:09:42,182 --> 00:09:45,452 line:0
to a file which can be shared
across devices.


168
00:09:45,485 --> 00:09:49,523 line:0
Use dataRepresentation
to export in JSON or binary.


169
00:09:49,556 --> 00:09:52,359 line:0
We recommend exporting
your compositions in binary format


170
00:09:52,392 --> 00:09:54,661 line:0
for its much smaller size.


171
00:09:55,562 --> 00:09:58,165 line:-1
And now I'll hand it over back to Tu


172
00:09:58,198 --> 00:10:00,634 line:-2
to talk about how you
can preview compositions.


173
00:10:01,568 --> 00:10:03,003 line:-1
Tu: Thanks a lot, Abhiraj.


174
00:10:03,036 --> 00:10:05,672 line:-2
It's great to see
how we can leverage these APIs


175
00:10:05,706 --> 00:10:08,342 line:-1
to build fully custom workouts.


176
00:10:08,375 --> 00:10:12,613 line:-2
Now let's take a look at what we can do
once we have workout compositions.


177
00:10:13,480 --> 00:10:15,949 line:-2
With a workout composition,
there are a few different things


178
00:10:15,983 --> 00:10:18,285 line:-1
you can do with them in WorkoutKit.


179
00:10:18,318 --> 00:10:20,888 line:-1
First, as Abhiraj mentioned earlier,


180
00:10:20,921 --> 00:10:23,490 line:-1
you can export the composition to a file


181
00:10:23,524 --> 00:10:27,027 line:-2
with a .workout extension
for sharing and distribution.


182
00:10:27,060 --> 00:10:31,231 line:-2
Remember that validation automatically
happens when calling certain API,


183
00:10:31,265 --> 00:10:34,501 line:-2
and exporting a composition
is one such example.


184
00:10:35,502 --> 00:10:37,971 line:-2
We also have API
for you to present a preview


185
00:10:38,005 --> 00:10:40,741 line:-2
of the contents
of your composition to the user.


186
00:10:40,774 --> 00:10:44,178 line:-2
Now, this has different behavior
on iOS and watchOS.


187
00:10:45,312 --> 00:10:48,882 line:-2
On iOS, when you call the preview API
on your composition,


188
00:10:48,916 --> 00:10:52,286 line:-2
an out of process UI
will be presented on top of your app


189
00:10:52,319 --> 00:10:56,089 line:-2
and display the entire contents
of your workout composition.


190
00:10:56,123 --> 00:10:59,359 line:-2
In this example,
we have a custom workout composition.


191
00:11:00,194 --> 00:11:02,963 line:-2
The title is prominently displayed
at the top,


192
00:11:02,996 --> 00:11:07,201 line:0
the list of steps and blocks,
including the goals and alerts,


193
00:11:07,234 --> 00:11:09,536 line:0
and an option for users
to save the workout


194
00:11:09,570 --> 00:11:12,940 line:0
directly into the Workout app
on their Apple Watch.


195
00:11:12,973 --> 00:11:15,509 line:0
Now, if we turn to watchOS,


196
00:11:15,542 --> 00:11:18,579 line:-2
calling the preview API
will launch the Workout app


197
00:11:18,612 --> 00:11:21,215 line:-2
with the contents
of the workout composition.


198
00:11:21,248 --> 00:11:27,020 line:-2
From here, the user is able to immediately
start the workout or save it for later.


199
00:11:28,288 --> 00:11:32,593 line:-2
Again, I'll hand it off to Abhiraj to show
you these preview options with WorkoutKit.


200
00:11:33,393 --> 00:11:37,764 line:-2
Abhiraj: Now that we have a great workout,
let's get it saved by the user.


201
00:11:37,798 --> 00:11:40,801 line:-2
As we discussed earlier,
we can use WorkoutComposition


202
00:11:40,834 --> 00:11:45,739 line:-2
to perform additional operations
on the workout, such as validations.


203
00:11:45,772 --> 00:11:49,676 line:-2
With the WorkoutComposition,
we can present a preview to the user.


204
00:11:49,710 --> 00:11:54,681 line:-2
The preview API is optimized for iOS
and watchOS to provide a convenient way


205
00:11:54,715 --> 00:11:57,784 line:-2
for users to preview,
save, or start workouts.


206
00:11:57,818 --> 00:12:00,254 line:-2
So lets take the cycling workout
that we created earlier


207
00:12:00,287 --> 00:12:02,556 line:-1
and wrap it in a WorkoutComposition.


208
00:12:04,258 --> 00:12:07,261 line:-2
You can use any workout type
that Tu mentioned earlier


209
00:12:07,294 --> 00:12:09,162 line:-1
with a WorkoutComposition.


210
00:12:09,196 --> 00:12:12,132 line:-2
Now lets present the preview
using the presentPreview function


211
00:12:12,165 --> 00:12:13,767 line:-1
on workoutComposition.


212
00:12:15,802 --> 00:12:18,939 line:-2
We use a task block here
because this API is designed


213
00:12:18,972 --> 00:12:21,742 line:-2
to work with Swift's
modern concurrency features.


214
00:12:22,643 --> 00:12:23,777 line:-1
As mentioned before,


215
00:12:23,810 --> 00:12:26,446 line:-2
presentPreview will display
the workout preview differently


216
00:12:26,480 --> 00:12:28,982 line:-1
depending on the platform it's running on.


217
00:12:29,016 --> 00:12:31,518 line:-1
Let's see how this works.


218
00:12:31,552 --> 00:12:36,056 line:-2
On iOS, the function presents
a remote view on top of your app.


219
00:12:36,089 --> 00:12:39,226 line:-2
It shows the workout
and an option for the user to save it


220
00:12:39,259 --> 00:12:42,262 line:-2
directly to the Workout app
on the Apple Watch.


221
00:12:42,296 --> 00:12:46,066 line:0
The "Add to Watch" button will update
the Workout app with new workout.


222
00:12:46,900 --> 00:12:50,270 line:-2
The preview function
behaves differently on Apple Watch.


223
00:12:50,304 --> 00:12:52,906 line:-2
Rather than presenting a sheet
over your app,


224
00:12:52,940 --> 00:12:56,476 line:-2
calling the preview function
on watchOS will launch the Workout app


225
00:12:56,510 --> 00:12:58,912 line:-1
with a preview of the workout.


226
00:12:58,946 --> 00:13:02,516 line:-2
And now I'll hand it back to Tu
to talk about scheduling workouts.


227
00:13:02,549 --> 00:13:04,051 line:-1
Tu: Thanks, Abhiraj.


228
00:13:04,084 --> 00:13:06,220 line:-1
Those preview options are really helpful


229
00:13:06,253 --> 00:13:08,755 line:-2
to get a single workout composition
in front of the user


230
00:13:08,789 --> 00:13:11,024 line:-1
for a quick interaction.


231
00:13:11,058 --> 00:13:13,861 line:-2
But what if you have a collection
of workouts for the user to perform


232
00:13:13,894 --> 00:13:15,429 line:-1
over a period of time?


233
00:13:15,462 --> 00:13:20,734 line:-2
For example, let's say you have some
cycling scheduled for your user today,


234
00:13:20,767 --> 00:13:23,337 line:-1
and later in the week, hiking,


235
00:13:23,370 --> 00:13:27,841 line:-2
a few days after that, golfing,
maybe some scheduled rest,


236
00:13:27,875 --> 00:13:30,010 line:0
before some more cycling.


237
00:13:30,043 --> 00:13:32,479 line:-2
You could use
the composition and preview APIs


238
00:13:32,513 --> 00:13:34,815 line:-2
to save workouts
directly into the Workout app,


239
00:13:34,848 --> 00:13:38,018 line:-2
but now the user is responsible
for managing all of these workouts


240
00:13:38,051 --> 00:13:39,953 line:-2
and remembering
when they need to complete them.


241
00:13:39,987 --> 00:13:41,822 line:-1
It's not very scalable.


242
00:13:41,855 --> 00:13:44,791 line:-2
To simplify this whole process,
as part of WorkoutKit,


243
00:13:44,825 --> 00:13:48,829 line:-2
your app can schedule workouts
directly into the Workout app.


244
00:13:48,862 --> 00:13:50,397 line:-1
Let's see what that looks like.


245
00:13:51,198 --> 00:13:52,666 line:-1
When you schedule workouts,


246
00:13:52,699 --> 00:13:57,070 line:-2
your app will have a dedicated space
at the top of the Workout app.


247
00:13:57,104 --> 00:14:02,309 line:-2
This dedicated space will be styled
with your app's icon and name


248
00:14:02,342 --> 00:14:05,112 line:-2
and a preview
of the next workout for the day.


249
00:14:05,145 --> 00:14:09,149 line:-2
Tapping here will immediately start
the displayed scheduled workout.


250
00:14:10,184 --> 00:14:12,686 line:-2
Tapping the ellipsis
will show more details,


251
00:14:12,719 --> 00:14:16,290 line:-2
including upcoming scheduled workouts
that you synced over.


252
00:14:17,357 --> 00:14:20,093 line:-2
Scheduling workouts
requires the user's permission,


253
00:14:20,127 --> 00:14:22,296 line:-1
and syncing is handled locally.


254
00:14:22,329 --> 00:14:26,033 line:-2
The user is able to see workouts
scheduled in the next seven days


255
00:14:26,066 --> 00:14:28,268 line:-1
and the previous seven days.


256
00:14:28,302 --> 00:14:31,238 line:-1
You can sync up to 15 workouts at a time,


257
00:14:31,271 --> 00:14:35,576 line:-2
and you can query for scheduled workouts
that the user has completed from your app.


258
00:14:36,643 --> 00:14:38,412 line:-1
When querying scheduled workouts,


259
00:14:38,445 --> 00:14:41,014 line:-2
they only contain
the composition you created,


260
00:14:41,048 --> 00:14:45,352 line:-2
the scheduled date, and whether or not
the workout was completed by the user.


261
00:14:45,385 --> 00:14:47,654 line:-1
They do not contain any health data.


262
00:14:47,688 --> 00:14:51,124 line:-2
So if you want actual health statistics
from a completed workout,


263
00:14:51,158 --> 00:14:53,227 line:-1
refer to the HealthKit APIs.


264
00:14:54,161 --> 00:14:55,762 line:-1
And as part of WorkoutKit,


265
00:14:55,796 --> 00:15:00,467 line:-2
we're providing an extension on HKWorkout
to retrieve a workout composition,


266
00:15:00,501 --> 00:15:02,569 line:-1
if it's available.


267
00:15:02,603 --> 00:15:04,671 line:-1
Now I'll hand it over to Abhiraj


268
00:15:04,705 --> 00:15:07,407 line:-2
to show you how
to schedule workouts using WorkoutKit.


269
00:15:08,141 --> 00:15:09,309 line:-1
Abhiraj: Thanks, Tu.


270
00:15:09,343 --> 00:15:11,512 line:-2
For apps
to schedule workouts for the user,


271
00:15:11,545 --> 00:15:14,948 line:-2
we are providing a set of APIs
to support syncing workout compositions


272
00:15:14,982 --> 00:15:18,485 line:-2
to Apple Watch
for use within the Workout app.


273
00:15:18,519 --> 00:15:22,623 line:-2
Let's actually build an app that takes
advantage of the WorkoutKit APIs.


274
00:15:22,656 --> 00:15:25,692 line:-2
We'll need to associate scheduled dates
with workout compositions,


275
00:15:25,726 --> 00:15:27,227 line:-1
and then sync them.


276
00:15:27,261 --> 00:15:29,563 line:-1
Let me show you how to do it.


277
00:15:29,596 --> 00:15:32,065 line:-2
I've started building an app
that has placeholders


278
00:15:32,099 --> 00:15:34,735 line:-1
to interact with WorkoutKit APIs.


279
00:15:34,768 --> 00:15:38,705 line:-2
Let's see how I can leverage WorkoutKit
to make this functional.


280
00:15:38,739 --> 00:15:41,074 line:-2
Before we can start syncing workouts
to the Workout app,


281
00:15:41,108 --> 00:15:43,777 line:-1
we need to get permission from the user.


282
00:15:43,810 --> 00:15:46,380 line:-2
You can call authorizationState
on WorkoutPlan


283
00:15:46,413 --> 00:15:49,316 line:-1
to check your app's current permissions.


284
00:15:49,349 --> 00:15:51,285 line:-2
Since we haven't requested
permission yet,


285
00:15:51,318 --> 00:15:53,620 line:-1
we can request authorization from the user


286
00:15:53,654 --> 00:15:56,423 line:-2
by calling requestAuthorization
on WorkoutPlan.


287
00:15:57,858 --> 00:16:00,727 line:-2
I'm going to tap
the "Request Authorization" button.


288
00:16:02,996 --> 00:16:04,565 line:-1
When calling requestAuthorization(),


289
00:16:04,598 --> 00:16:08,235 line:-2
a user is prompted
with an alert to opt into syncing.


290
00:16:08,268 --> 00:16:12,272 line:-2
Users can also change this setting
in Workout settings from the Watch app


291
00:16:12,306 --> 00:16:15,008 line:-1
on iOS and the Settings app on watchOS.


292
00:16:16,176 --> 00:16:17,878 line:-1
Now that we have authorized our app,


293
00:16:17,911 --> 00:16:22,216 line:-2
we'll get our current workout plan
from the Workout app on Apple Watch.


294
00:16:22,249 --> 00:16:25,686 line:-2
You can query WorkoutPlan
using WorkoutPlan.current.


295
00:16:27,087 --> 00:16:29,289 line:-1
WorkoutPlan is our interface to store


296
00:16:29,323 --> 00:16:32,192 line:-2
and modify scheduled workouts
from our app.


297
00:16:33,093 --> 00:16:36,096 line:-2
I'm going to tap
the "Get Workout Plan" button.


298
00:16:38,131 --> 00:16:43,237 line:-2
As we have not scheduled any workouts yet,
the plan has no scheduled workouts.


299
00:16:44,271 --> 00:16:47,140 line:-2
Next, let's create
and schedule some workouts.


300
00:16:47,174 --> 00:16:51,411 line:-2
I'm thinking I want to go for golf today
and cycling later this week.


301
00:16:51,445 --> 00:16:55,182 line:-2
So lets create that schedule
with some new workout compositions.


302
00:16:56,216 --> 00:16:59,353 line:-2
ScheduledWorkoutComposition object
contains a workout composition,


303
00:16:59,386 --> 00:17:02,256 line:-1
scheduled date, and a completion state.


304
00:17:02,289 --> 00:17:04,725 line:-2
I have assigned today
for the golfing scheduledDate


305
00:17:04,758 --> 00:17:07,928 line:-2
and cycling scheduledDate
for the day after tomorrow.


306
00:17:09,162 --> 00:17:10,964 line:-1
Let's see how that looks in my app.


307
00:17:11,932 --> 00:17:14,935 line:-2
As you can see,
I have a golf workout scheduled for today


308
00:17:14,968 --> 00:17:17,838 line:-2
and a cycling workout coming up
in a couple of days.


309
00:17:18,639 --> 00:17:22,509 line:-2
Now that we have created our schedule,
let's sync it to the Workout app.


310
00:17:23,377 --> 00:17:26,813 line:0
Using the current workout plan,
we'll append these new scheduled workouts


311
00:17:26,847 --> 00:17:29,616 line:-1
to the scheduledCompositions array.


312
00:17:29,650 --> 00:17:31,952 line:-2
Finally, to add these workouts
to the Workout app,


313
00:17:31,985 --> 00:17:34,354 line:-1
we call workoutPlan.save().


314
00:17:35,522 --> 00:17:38,125 line:-1
Let's see how this works in action.


315
00:17:40,661 --> 00:17:43,463 line:-2
Great.
Now these workouts are synced.


316
00:17:44,298 --> 00:17:46,533 line:-2
As Tu mentioned,
when you schedule a workout,


317
00:17:46,567 --> 00:17:50,103 line:-2
your app will have a dedicated space
at the top of the Workout app.


318
00:17:50,137 --> 00:17:52,940 line:-1
Let's dig in to see what it looks like.


319
00:17:52,973 --> 00:17:54,541 line:-1
Let's open the Workout app.


320
00:17:56,643 --> 00:18:00,514 line:-2
As you can see,
my app's icon and name is present.


321
00:18:00,547 --> 00:18:02,649 line:-2
Since I have
a golf workout scheduled today,


322
00:18:02,683 --> 00:18:05,252 line:-1
tapping here will start the workout.


323
00:18:05,285 --> 00:18:09,089 line:-2
I can tap the ellipsis
to see my upcoming schedule.


324
00:18:10,023 --> 00:18:14,194 line:-2
On the first screen, I see all
of my workouts scheduled for today.


325
00:18:14,228 --> 00:18:17,331 line:-2
If l tap "View More,"
I'll be able to see workouts


326
00:18:17,364 --> 00:18:21,201 line:-2
that are scheduled for the next
seven days and the previous seven days.


327
00:18:21,235 --> 00:18:23,837 line:-1
Here I see both today's golf workout


328
00:18:23,871 --> 00:18:27,007 line:-2
and my upcoming cycling workout
that I synced earlier.


329
00:18:28,008 --> 00:18:31,044 line:-2
Now you have an understanding
of how scheduled workouts are presented


330
00:18:31,078 --> 00:18:35,015 line:-2
and how your app can have
a dedicated space inside the Workout app.


331
00:18:35,048 --> 00:18:37,784 line:-2
As you know,
I've got a round of golf planned today.


332
00:18:37,818 --> 00:18:39,920 line:-1
My tee time is soon.


333
00:18:41,088 --> 00:18:43,724 line:-1
So if you don't mind, I'll be right back.


334
00:18:47,761 --> 00:18:48,896 line:-1
I'm back.


335
00:18:48,929 --> 00:18:52,633 line:-2
I had a great round of golf
and shot 72 on the back nine.


336
00:18:52,666 --> 00:18:55,269 line:-2
When the user completes
a scheduled workout in the Workout app,


337
00:18:55,302 --> 00:18:57,471 line:-1
the completion state will be updated.


338
00:18:57,504 --> 00:19:00,174 line:-2
You can query WorkoutPlan
using WorkoutPlan.current


339
00:19:00,207 --> 00:19:02,843 line:-2
to determine
which workouts were completed.


340
00:19:02,876 --> 00:19:05,279 line:-2
If a workout was marked
as completed in your app,


341
00:19:05,312 --> 00:19:07,181 line:-1
you should update the completion state


342
00:19:07,214 --> 00:19:10,651 line:-2
to make sure the user has
the most recent information everywhere.


343
00:19:10,684 --> 00:19:12,352 line:-1
Let's get back to our code.


344
00:19:13,420 --> 00:19:17,925 line:0
In our sample app, we can check
if scheduledComposition is completed.


345
00:19:17,958 --> 00:19:20,394 line:-1
If it is, we are marking it as complete.


346
00:19:21,328 --> 00:19:23,230 line:-1
Let's see this in action.


347
00:19:24,932 --> 00:19:28,635 line:-2
It's a great practice
to keep your app in sync with Workout app.


348
00:19:29,536 --> 00:19:33,941 line:-2
Now you have a basic understanding of how
to implement the Workout schedule APIs,


349
00:19:33,974 --> 00:19:37,778 line:-2
from requesting authorization
to syncing compositions to Workout app.


350
00:19:37,811 --> 00:19:39,913 line:-1
With that, I will hand it back to Tu.


351
00:19:39,947 --> 00:19:43,483 line:-2
Tu: Thanks, Abhiraj, and nice
to see you improving your golf game.


352
00:19:43,517 --> 00:19:46,453 line:-2
So let's wrap up
with some best practices to keep in mind


353
00:19:46,486 --> 00:19:49,356 line:-2
as you're adopting WorkoutKit
in your apps.


354
00:19:50,691 --> 00:19:53,894 line:-2
Consider which composition type
best fits the workout experience


355
00:19:53,927 --> 00:19:56,129 line:-1
that you want to display to the user.


356
00:19:56,163 --> 00:19:59,600 line:-2
We saw that custom workouts
are a very useful composition type,


357
00:19:59,633 --> 00:20:03,470 line:-2
especially when a workout requires
different levels of effort and attention


358
00:20:03,504 --> 00:20:05,772 line:-1
with custom goals and alerts.


359
00:20:05,806 --> 00:20:09,343 line:-2
However, swimming isn't supported
with custom workouts.


360
00:20:09,376 --> 00:20:12,412 line:-2
You would need
to use a goal composition instead.


361
00:20:12,446 --> 00:20:16,049 line:-2
Also, alerts are only available
with custom workouts.


362
00:20:16,083 --> 00:20:18,519 line:-2
If you don't need to specify
your own alerts for something simple


363
00:20:18,552 --> 00:20:19,987 line:-1
like a 30-minute run,


364
00:20:20,020 --> 00:20:23,090 line:-2
consider using a goal
or pacer composition instead.


365
00:20:23,991 --> 00:20:27,528 line:-2
Be sure to handle validation
of your workout compositions.


366
00:20:27,561 --> 00:20:31,498 line:-2
We provide very granular validation errors
to help you pinpoint the source


367
00:20:31,532 --> 00:20:34,201 line:-1
of any incompatibility or error.


368
00:20:34,234 --> 00:20:38,172 line:-2
As a reminder,
not all activity types support distance.


369
00:20:38,205 --> 00:20:41,808 line:-2
Consider using a time
or an open goal instead.


370
00:20:41,842 --> 00:20:46,180 line:-2
And not all activity types will support
certain alerts in a custom workout.


371
00:20:46,213 --> 00:20:49,616 line:-2
Consider an alternative,
such as a heartrate zone alert.


372
00:20:50,918 --> 00:20:53,387 line:-1
Keep your scheduled workouts up to date.


373
00:20:53,420 --> 00:20:56,423 line:-2
Take advantage of any foreground
or background runtime


374
00:20:56,456 --> 00:20:58,792 line:-1
your app may have to do so.


375
00:20:58,825 --> 00:21:01,662 line:-1
And finally, please send us your feedback.


376
00:21:01,695 --> 00:21:03,564 line:-1
Try out the API.


377
00:21:03,597 --> 00:21:08,335 line:-4
All of the sample code you saw today
is available on developer.apple.com.


378
00:21:08,368 --> 00:21:10,904 line:-4
Also, don't forget
to check out the HealthKit session


379
00:21:10,938 --> 00:21:13,073 line:-3
on synchronizing workout sessions.


380
00:21:13,106 --> 00:21:14,541 line:-1
Thanks for watching.


381
00:21:14,575 --> 00:21:18,011 line:0
♪ ♪

