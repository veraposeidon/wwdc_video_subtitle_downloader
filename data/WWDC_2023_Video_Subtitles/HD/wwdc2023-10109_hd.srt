2
00:00:00.033 --> 00:00:04.037 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:04,037 --> 00:00:10,177 line:0 position:90% size:2%
♪


4
00:00:10.177 --> 00:00:11.979 line:-1 position:50%
Hello, and welcome to


5
00:00:11.979 --> 00:00:14.047 line:-1 position:50%
"Meet SwiftUI
for spatial computing."


6
00:00:14.047 --> 00:00:17.050 line:-1 position:50%
I'm Andrew, an engineer
on the SwiftUI team.


7
00:00:17.050 --> 00:00:19.686 line:-1 position:50%
We're so excited
about spatial computing.


8
00:00:19.686 --> 00:00:21.588 line:-1 position:50%
It opens up a world
of new possibilities


9
00:00:21.588 --> 00:00:24.191 line:-1 position:50%
for building groundbreaking
applications.


10
00:00:24.191 --> 00:00:26.293 line:-1 position:50%
In this talk, I'll walk you
through what you need to know


11
00:00:26.293 --> 00:00:28.362 line:-1 position:50%
to build your own great apps
for the platform


12
00:00:28.362 --> 00:00:30.364 line:-1 position:50%
and the powerful new features
in SwiftUI


13
00:00:30.364 --> 00:00:32.900 line:-1 position:50%
that make it all possible.


14
00:00:32.900 --> 00:00:35.235 line:-1 position:50%
When you build an app
for spatial computing,


15
00:00:35.235 --> 00:00:38.238 line:-1 position:50%
the best way to build it
is using SwiftUI.


16
00:00:38.238 --> 00:00:40.707 line:-1 position:50%
We're bringing SwiftUI
into a bold new future,


17
00:00:40.707 --> 00:00:43.577 line:-1 position:50%
with all-new 3D capabilities
like volumes,


18
00:00:43.577 --> 00:00:45.946 line:-1 position:50%
immersive experiences
with Full Space,


19
00:00:45.946 --> 00:00:48.715 line:-1 position:50%
new 3D gestures,
effects, and layout,


20
00:00:48.715 --> 00:00:50.417 line:-1 position:50%
deep integration
with RealityKit,


21
00:00:50.417 --> 00:00:52.352 line:-1 position:50%
and so much more.


22
00:00:52.352 --> 00:00:56.156 line:-1 position:50%
These new capabilities
only exist in SwiftUI.


23
00:00:56.156 --> 00:00:58.558 line:-1 position:50%
If you have existing code
for your apps,


24
00:00:58.558 --> 00:01:00.861 line:-1 position:50%
much of it will still work
on the platform.


25
00:01:00.861 --> 00:01:02.262 line:-1 position:50%
For all new code,


26
00:01:02.262 --> 00:01:06.199 line:-1 position:50%
the best way to write it
is with SwiftUI.


27
00:01:06.199 --> 00:01:09.169 line:-1 position:50%
We believe so deeply in SwiftUI
that we built the system


28
00:01:09.169 --> 00:01:12.239 line:-1 position:50%
from the ground up
using SwiftUI.


29
00:01:12.239 --> 00:01:15.509 line:-1 position:50%
From core building blocks
of an app like Buttons, Toggles,


30
00:01:15.509 --> 00:01:17.811 line:-1 position:50%
and TabViews,
to core elements


31
00:01:17.811 --> 00:01:20.747 line:-1 position:50%
like the Home View
and Control Center,


32
00:01:20.747 --> 00:01:27.087 line:-1 position:50%
to familiar apps
like TV and Safari,


33
00:01:27.087 --> 00:01:32.926 line:-1 position:50%
to all-new experiences
like 3D boards in Freeform


34
00:01:32.926 --> 00:01:36.029 line:-1 position:50%
and immersive rehearsals
in Keynote,


35
00:01:36.029 --> 00:01:42.002 line:-1 position:50%
SwiftUI powers all of these
things and so much more.


36
00:01:42.002 --> 00:01:45.072 line:-1 position:50%
With SwiftUI, you describe
your app's user interface,


37
00:01:45.072 --> 00:01:48.041 line:-1 position:50%
leaving the system to choose
intelligent defaults for you


38
00:01:48.041 --> 00:01:49.810 line:-1 position:50%
so you can learn
these concepts once


39
00:01:49.810 --> 00:01:51.845 line:-1 position:50%
and apply them anywhere.


40
00:01:51.845 --> 00:01:55.515 line:-1 position:50%
This is even more useful
with an entirely new platform.


41
00:01:55.515 --> 00:01:58.685 line:-1 position:50%
Your existing SwiftUI knowledge
transfers over seamlessly


42
00:01:58.685 --> 00:02:02.489 line:-1 position:50%
to an entirely new
look and feel.


43
00:02:02.489 --> 00:02:04.358 line:-1 position:50%
Consider a button.


44
00:02:04.358 --> 00:02:06.460 line:-1 position:50%
Buttons on the system
have a lot in common with


45
00:02:06.460 --> 00:02:09.529 line:-1 position:50%
the buttons you already know
and love from other platforms.


46
00:02:09.529 --> 00:02:11.932 line:-1 position:50%
For example, like on macOS,


47
00:02:11.932 --> 00:02:15.869 line:-1 position:50%
buttons on this platform
use a bordered style by default.


48
00:02:15.869 --> 00:02:17.871 line:-1 position:50%
But buttons also have
some key differences


49
00:02:17.871 --> 00:02:20.273 line:-1 position:50%
to adapt to the idioms
of the platform.


50
00:02:20.273 --> 00:02:23.577 line:-1 position:50%
Let's zoom in to our simulator
and take a closer look.


51
00:02:23.577 --> 00:02:27.814 line:-1 position:50%
Bordered buttons like these use
a vibrant material background.


52
00:02:27.814 --> 00:02:31.118 line:-1 position:50%
And all buttons gain rich hover
effects that react to your eyes,


53
00:02:31.118 --> 00:02:33.987 line:-1 position:50%
hands, and to pointer input.


54
00:02:33.987 --> 00:02:35.589 line:-1 position:50%
They can also scale down


55
00:02:35.589 --> 00:02:38.859 line:-1 position:50%
and provide audio feedback
when pressed.


56
00:02:38.859 --> 00:02:41.294 line:-1 position:50%
And with buttons in places
like navigation bars,


57
00:02:41.294 --> 00:02:43.263 line:-1 position:50%
they can automatically
display a tooltip


58
00:02:43.263 --> 00:02:47.434 line:-1 position:50%
with your button's label
when people look at them.


59
00:02:47.434 --> 00:02:48.835 line:-1 position:50%
Or consider TabView,


60
00:02:48.835 --> 00:02:50.504 line:-1 position:50%
which hangs off the side
of your app,


61
00:02:50.504 --> 00:02:52.239 line:-1 position:50%
providing quick
and easy navigation


62
00:02:52.239 --> 00:02:54.608 line:-1 position:50%
without interfering
with your app's content.


63
00:02:54.608 --> 00:02:57.144 line:-1 position:50%
And TabView expands
to display more detail,


64
00:02:57.144 --> 00:03:00.814 line:-1 position:50%
like each tab's labels,
just by looking at it.


65
00:03:00.814 --> 00:03:03.316 line:-1 position:50%
TabView is a prime example
of how SwiftUI


66
00:03:03.316 --> 00:03:05.719 line:-1 position:50%
can take advantage of what makes
the platform unique,


67
00:03:05.719 --> 00:03:09.423 line:-1 position:50%
like having your app's interface
react to where you're looking.


68
00:03:09.423 --> 00:03:11.291 line:-1 position:50%
We've applied this same
thoughtful design


69
00:03:11.291 --> 00:03:13.460 line:-1 position:50%
to all of the core
building blocks of an app,


70
00:03:13.460 --> 00:03:15.462 line:-1 position:50%
from navigation
and presentations


71
00:03:15.462 --> 00:03:17.864 line:-1 position:50%
to controls and interactions.


72
00:03:17.864 --> 00:03:19.966 line:-1 position:50%
We provide these
intelligent platform defaults


73
00:03:19.966 --> 00:03:22.536 line:-1 position:50%
so your app can fit right in
from the start,


74
00:03:22.536 --> 00:03:25.872 line:-1 position:50%
allowing you to focus
on what makes your app great.


75
00:03:25.872 --> 00:03:27.407 line:-1 position:50%
But we didn't stop there.


76
00:03:27.407 --> 00:03:30.677 line:-1 position:50%
SwiftUI also includes
a whole suite of brand-new APIs


77
00:03:30.677 --> 00:03:33.346 line:-1 position:50%
purpose-built
for a 3D environment.


78
00:03:33.346 --> 00:03:37.417 line:-1 position:50%
And those APIs
start with scenes.


79
00:03:37.417 --> 00:03:40.654 line:-1 position:50%
Recall that an app in SwiftUI
is made up of scenes,


80
00:03:40.654 --> 00:03:43.657 line:-1 position:50%
and scenes
are made up of views.


81
00:03:43.657 --> 00:03:46.193 line:-1 position:50%
Scenes form the top-level entry
points to your app,


82
00:03:46.193 --> 00:03:49.629 line:-1 position:50%
like WindowGroup for displaying
one or more windows.


83
00:03:49.629 --> 00:03:51.932 line:-1 position:50%
With spatial computing,
there are three kinds of scenes


84
00:03:51.932 --> 00:03:58.271 line:-1 position:50%
that make up an app: windows,
volumes, and Full Spaces.


85
00:03:58,271 --> 00:04:00,140 position:50%
Windows are great
for building traditional


86
00:04:00,140 --> 00:04:01,975 position:50%
and familiar interfaces,


87
00:04:01,975 --> 00:04:05,445 position:50%
ranging from rich and complete
apps like Safari or Freeform,


88
00:04:05,445 --> 00:04:07,280 position:50%
to menus that serve
as an entry point


89
00:04:07,280 --> 00:04:10,951 position:50%
to more immersive
experiences like Mindfulness.


90
00:04:10,951 --> 00:04:12,953 position:50%
Volumes are a new
3D window style


91
00:04:12,953 --> 00:04:15,555 position:50%
purpose-built for displaying
objects or experiences


92
00:04:15,555 --> 00:04:17,057 position:50%
in a bounded space.


93
00:04:17,057 --> 00:04:19,659 position:50%
Volumes can also be displayed
alongside other apps,


94
00:04:19,659 --> 00:04:20,927 position:50%
making them a great tool


95
00:04:20,927 --> 00:04:23,296 position:50%
for building lightweight
3D experiences,


96
00:04:23,296 --> 00:04:25,265 position:50%
from previewing 3D models
with Quick Look


97
00:04:25,265 --> 00:04:28,235 position:50%
to playing board games
over FaceTime with your friends.


98
00:04:28,235 --> 00:04:31,171 position:50%
Finally, we have Full Spaces,
a brand-new way


99
00:04:31,171 --> 00:04:33,340 position:50%
to build rich, immersive apps.


100
00:04:33,340 --> 00:04:35,842 position:50%
Full spaces give your app
complete control,


101
00:04:35,842 --> 00:04:37,844 position:50%
hiding windows from
other apps and allowing you


102
00:04:37,844 --> 00:04:40,147 position:50%
to place your content anywhere.


103
00:04:40,147 --> 00:04:42,282 position:50%
Full spaces can augment
the real world


104
00:04:42,282 --> 00:04:44,718 position:50%
while keeping people grounded
in their surroundings,


105
00:04:44,718 --> 00:04:48,155 position:50%
or they can fully immerse people
in incredible new experiences.


106
00:04:48,155 --> 00:04:50,457 position:50%
From realistic rehearsals
in Keynote to thrilling


107
00:04:50,457 --> 00:04:52,092 position:50%
new kinds of games,


108
00:04:52,092 --> 00:04:55,362 position:50%
Full spaces unlock
a world of new possibilities.


109
00:04:55,362 --> 00:04:57,697 position:50%
And these scene types are
designed to be used together.


110
00:04:57,697 --> 00:05:00,233 position:50%
Each one is purpose-built
for different use cases,


111
00:05:00,233 --> 00:05:01,501 position:50%
and you can mix and match them


112
00:05:01,501 --> 00:05:04,271 position:50%
in whatever way makes sense
for your app.


113
00:05:04,271 --> 00:05:06,473 position:50%
You can present a volume
from a window,


114
00:05:06,473 --> 00:05:08,208 position:50%
like to show a lightweight
3D preview


115
00:05:08,208 --> 00:05:09,910 position:50%
of an architectural model.


116
00:05:09,910 --> 00:05:12,145 position:50%
Or you could present
a Full Space from a volume


117
00:05:12,145 --> 00:05:14,748 position:50%
to completely immerse people
in that model.


118
00:05:14,748 --> 00:05:17,083 position:50%
You can also use multiple scenes
of the same type,


119
00:05:17,083 --> 00:05:20,253 position:50%
which is a great way to organize
your app into separate pieces


120
00:05:20,253 --> 00:05:23,523 position:50%
that people can open
and close independently.


121
00:05:23,523 --> 00:05:26,526 position:50%
Let's dig a little deeper
into each of these scene types,


122
00:05:26,526 --> 00:05:28,962 position:50%
starting with windows.


123
00:05:28.962 --> 00:05:31.464 line:-1 position:50%
I'm a big fan of astronomy,
and I've been working on an app


124
00:05:31.464 --> 00:05:32.933 line:-1 position:50%
with some of
my fellow stargazers


125
00:05:32.933 --> 00:05:36.169 line:-1 position:50%
to help others learn more about
the Earth and solar system.


126
00:05:36.169 --> 00:05:38.104 line:-1 position:50%
Now, they've already gotten
a great start on this app,


127
00:05:38.104 --> 00:05:39.773 line:-1 position:50%
building out this gorgeous
introductory page


128
00:05:39.773 --> 00:05:41.007 line:-1 position:50%
in a window.


129
00:05:41.007 --> 00:05:43.743 line:-1 position:50%
But I have big plans
to go further.


130
00:05:43.743 --> 00:05:44.611 line:-1 position:50%
To show our window,


131
00:05:44.611 --> 00:05:46.446 line:-1 position:50%
I'm using the same
WindowGroup API


132
00:05:46.446 --> 00:05:48.615 line:-1 position:50%
that works on
all other platforms


133
00:05:48.615 --> 00:05:49.783 line:-1 position:50%
By using WindowGroup,


134
00:05:49.783 --> 00:05:52.385 line:-1 position:50%
I also automatically support
creating multiple windows,


135
00:05:52.385 --> 00:05:55.155 line:-1 position:50%
just like on macOS or iPadOS.


136
00:05:55.155 --> 00:05:57.791 line:-1 position:50%
Now, I've been really keen
to add a new feature to the app:


137
00:05:57.791 --> 00:06:00.093 line:-1 position:50%
a library to collect
all kinds of fun facts


138
00:06:00.093 --> 00:06:02.295 line:-1 position:50%
about our solar system
and universe


139
00:06:02.295 --> 00:06:05.899 line:-1 position:50%
so my fellow space students
can keep on learning.


140
00:06:05.899 --> 00:06:07.334 line:-1 position:50%
But I've been stuck
trying to figure out


141
00:06:07.334 --> 00:06:09.769 line:-1 position:50%
where in the app
to put this feature.


142
00:06:09.769 --> 00:06:11.238 line:-1 position:50%
To help answer that question,


143
00:06:11.238 --> 00:06:12.872 line:-1 position:50%
let's break down
the structure of a window


144
00:06:12.872 --> 00:06:15.308 line:-1 position:50%
into its building blocks.


145
00:06:15.308 --> 00:06:18.211 line:-1 position:50%
Windows on the system start with
a beautiful glass background,


146
00:06:18.211 --> 00:06:20.380 line:-1 position:50%
keeping people grounded
by letting your surroundings


147
00:06:20.380 --> 00:06:24.150 line:-1 position:50%
show through while keeping
your app's contents easy to see.


148
00:06:24.150 --> 00:06:27.187 line:-1 position:50%
Within my window, I can use
the same navigation containers


149
00:06:27.187 --> 00:06:29.623 line:-1 position:50%
that I'm already familiar with
on other platforms.


150
00:06:29.623 --> 00:06:32.325 line:-1 position:50%
For example, I can use a TabView
to organize my app


151
00:06:32.325 --> 00:06:34.261 line:-1 position:50%
into several
top-level components


152
00:06:34.261 --> 00:06:37.130 line:-1 position:50%
displayed on the leading edge
of my window.


153
00:06:37.130 --> 00:06:39.699 line:-1 position:50%
I can also use navigation stacks
and split views


154
00:06:39.699 --> 00:06:41.368 line:-1 position:50%
to help organize
my app's hierarchy


155
00:06:41.368 --> 00:06:43.003 line:-1 position:50%
and display rich information,


156
00:06:43.003 --> 00:06:46.473 line:-1 position:50%
following a similar structure
as iPadOS.


157
00:06:46.473 --> 00:06:49.509 line:-1 position:50%
Lists are another powerful tool
for organizing information


158
00:06:49.509 --> 00:06:52.445 line:-1 position:50%
with a beautiful new style
that fits right in.


159
00:06:52.445 --> 00:06:54.748 line:-1 position:50%
And of course, I can add
interactivity to my app


160
00:06:54.748 --> 00:06:58.885 line:-1 position:50%
using built-in controls like
buttons, toggles, and pickers.


161
00:06:58.885 --> 00:07:00.120 line:-1 position:50%
Now, I think this Library view


162
00:07:00.120 --> 00:07:02.222 line:-1 position:50%
would be a great use
of a TabView,


163
00:07:02.222 --> 00:07:04.324 line:-1 position:50%
which is perfect for making
the top-level entry points


164
00:07:04.324 --> 00:07:06.726 line:-1 position:50%
to my app
accessible at all times


165
00:07:06.726 --> 00:07:10.163 line:-1 position:50%
so deeper knowledge
is always just a tap away.


166
00:07:10.163 --> 00:07:13.066 line:-1 position:50%
To do that, I'll wrap my content
in a TabView,


167
00:07:13.066 --> 00:07:17.504 line:-1 position:50%
and provide a tabItem
with a label for each tab.


168
00:07:17.504 --> 00:07:20.707 line:-1 position:50%
Looks great!


169
00:07:20.707 --> 00:07:22.876 line:-1 position:50%
TabView has a unique appearance,


170
00:07:22.876 --> 00:07:24.944 line:-1 position:50%
hanging off the edge
of my window.


171
00:07:24.944 --> 00:07:26.946 line:-1 position:50%
TabView is a great example
of a new concept


172
00:07:26.946 --> 00:07:29.883 line:-1 position:50%
we've added to SwiftUI:
ornaments.


173
00:07:29.883 --> 00:07:31.885 line:-1 position:50%
Ornaments allow you
to place accessory views


174
00:07:31.885 --> 00:07:33.486 line:-1 position:50%
relative to your app's window,


175
00:07:33.486 --> 00:07:36.589 line:-1 position:50%
and they can even extend
outside the window's bounds.


176
00:07:36.589 --> 00:07:38.725 line:-1 position:50%
These are great for displaying
additional controls


177
00:07:38.725 --> 00:07:40.560 line:-1 position:50%
that don't belong
in the window itself


178
00:07:40.560 --> 00:07:43.330 line:-1 position:50%
and can avoid interfering
with your app's content.


179
00:07:43.330 --> 00:07:44.998 line:-1 position:50%
And we can even create
our own ornaments


180
00:07:44.998 --> 00:07:49.269 line:-1 position:50%
using the new ornament modifier.


181
00:07:49.269 --> 00:07:51.037 line:-1 position:50%
Let's take a look at
the Library detail view


182
00:07:51.037 --> 00:07:53.473 line:-1 position:50%
I've been working on.


183
00:07:53.473 --> 00:07:55.175 line:-1 position:50%
I've already gotten started
on this page,


184
00:07:55.175 --> 00:07:58.044 line:-1 position:50%
broken up into a few sections:
some summary text,


185
00:07:58.044 --> 00:07:59.579 line:-1 position:50%
a grid of interesting stats,


186
00:07:59.579 --> 00:08:02.282 line:-1 position:50%
and a horizontally scrolling
list of fun facts.


187
00:08:02.282 --> 00:08:04.684 line:-1 position:50%
But these sections
are missing something.


188
00:08:04.684 --> 00:08:06.753 line:-1 position:50%
To figure out what,
let's take a closer look


189
00:08:06.753 --> 00:08:09.789 line:-1 position:50%
at our app's materials.


190
00:08:09.789 --> 00:08:11.791 line:-1 position:50%
Windows by default are grounded
in a beautiful,


191
00:08:11.791 --> 00:08:13.560 line:-1 position:50%
new glass background.


192
00:08:13.560 --> 00:08:16.396 line:-1 position:50%
Glass is designed to compose
with new, vibrant materials


193
00:08:16.396 --> 00:08:19.399 line:-1 position:50%
that help provide
a visual hierarchy for your app.


194
00:08:19.399 --> 00:08:21.534 line:-1 position:50%
Glass adapts automatically
to the environment


195
00:08:21.534 --> 00:08:24.637 line:-1 position:50%
to keep content legible
no matter where it's used,


196
00:08:24.637 --> 00:08:28.041 line:-1 position:50%
allowing your app
to look great in any setting.


197
00:08:28.041 --> 00:08:29.476 line:-1 position:50%
This means that
on this platform,


198
00:08:29.476 --> 00:08:32.011 line:-1 position:50%
there is no dark or light
appearance for your app.


199
00:08:32.011 --> 00:08:34.848 line:-1 position:50%
Materials do
the hard work for you.


200
00:08:34.848 --> 00:08:36.516 line:-1 position:50%
Let's see how
we can use materials


201
00:08:36.516 --> 00:08:39.619 line:-1 position:50%
to make my Library tab
fit in and improve legibility,


202
00:08:39.619 --> 00:08:42.255 line:-1 position:50%
starting with the stats grid.


203
00:08:42.255 --> 00:08:44.324 line:-1 position:50%
My stats grid section
is currently just made up


204
00:08:44.324 --> 00:08:48.461 line:-1 position:50%
of a VStack with a title
and the grid itself.


205
00:08:48.461 --> 00:08:50.330 line:-1 position:50%
Let's try giving it
a material background


206
00:08:50.330 --> 00:08:53.166 line:-1 position:50%
and make this card really pop.


207
00:08:53.166 --> 00:08:55.769 line:-1 position:50%
To do that, I've used
the regular material,


208
00:08:55.769 --> 00:08:57.270 line:-1 position:50%
which adds a vibrant,
darker background


209
00:08:57.270 --> 00:08:59.806 line:-1 position:50%
on top of our window's glass
that grounds the shape


210
00:08:59.806 --> 00:09:03.209 line:-1 position:50%
of my card and improves
legibility for the detail text.


211
00:09:03.209 --> 00:09:05.745 line:-1 position:50%
I've used a rounded rect shape
and added some padding


212
00:09:05.745 --> 00:09:07.981 line:-1 position:50%
to make the card
feel just right.


213
00:09:07.981 --> 00:09:11.284 line:-1 position:50%
I'll apply the same treatment
to our fun fact cards as well.


214
00:09:11.284 --> 00:09:14.053 line:-1 position:50%
That's looking much better!


215
00:09:14.053 --> 00:09:17.157 line:-1 position:50%
Next, let's turn
to our fun fact cards


216
00:09:17.157 --> 00:09:20.427 line:-1 position:50%
and zoom in for a closer look.


217
00:09:20.427 --> 00:09:22.862 line:-1 position:50%
This card is built as a button
that can show more details


218
00:09:22.862 --> 00:09:24.531 line:-1 position:50%
about the fact when I press it.


219
00:09:24.531 --> 00:09:26.399 line:-1 position:50%
I've also used
a custom button style


220
00:09:26.399 --> 00:09:28.935 line:-1 position:50%
that provides that nice
material background.


221
00:09:28.935 --> 00:09:31.237 line:-1 position:50%
The button's contents
are composed of a title,


222
00:09:31.237 --> 00:09:33.406 line:-1 position:50%
detail body, and a footnote
inviting people


223
00:09:33.406 --> 00:09:35.742 line:-1 position:50%
to tap to learn more.


224
00:09:35.742 --> 00:09:39.679 line:-1 position:50%
The "Learn more" text is looking
a little too heavy, though.


225
00:09:39.679 --> 00:09:42.182 line:-1 position:50%
To fix that, I'll use
the secondary foreground style


226
00:09:42.182 --> 00:09:44.617 line:-1 position:50%
for my text.


227
00:09:44.617 --> 00:09:46.219 line:-1 position:50%
Notice that this secondary style


228
00:09:46.219 --> 00:09:48.688 line:-1 position:50%
automatically adapts within
our background material


229
00:09:48.688 --> 00:09:51.090 line:-1 position:50%
to use a beautiful
new vibrant treatment,


230
00:09:51.090 --> 00:09:53.126 line:-1 position:50%
giving greater visual weight
to my content


231
00:09:53.126 --> 00:09:55.995 line:-1 position:50%
while still keeping
that secondary text legible.


232
00:09:55.995 --> 00:09:57.430 line:-1 position:50%
These hierarchical shape styles


233
00:09:57.430 --> 00:09:59.966 line:-1 position:50%
are great for expressing
relative visual weight,


234
00:09:59.966 --> 00:10:02.402 line:-1 position:50%
letting SwiftUI take care
of automatically adapting


235
00:10:02.402 --> 00:10:05.505 line:-1 position:50%
the specific materials
to use based on context.


236
00:10:05.505 --> 00:10:08.575 line:-1 position:50%
Use them and the other rich
shape style and material APIs


237
00:10:08.575 --> 00:10:11.177 line:-1 position:50%
in your apps to create
gorgeous interfaces


238
00:10:11.177 --> 00:10:15.415 line:-1 position:50%
that look great in any context
and on any platform.


239
00:10:15.415 --> 00:10:18.218 line:-1 position:50%
Next, let's turn to interaction.


240
00:10:18.218 --> 00:10:19.486 line:-1 position:50%
With spatial computing,


241
00:10:19.486 --> 00:10:22.489 line:-1 position:50%
there are brand-new ways
to interact with apps.


242
00:10:22.489 --> 00:10:24.090 line:-1 position:50%
The most common form
of interaction


243
00:10:24.090 --> 00:10:25.692 line:-1 position:50%
is to simply look at an element


244
00:10:25.692 --> 00:10:28.795 line:-1 position:50%
and use an indirect
pinch gesture to perform a tap.


245
00:10:28.795 --> 00:10:32.031 line:-1 position:50%
You can also directly interact
with apps using your hands


246
00:10:32.031 --> 00:10:34.501 line:-1 position:50%
just by reaching out
and touching them.


247
00:10:34.501 --> 00:10:36.903 line:-1 position:50%
And with a connected trackpad
or a hand gesture,


248
00:10:36.903 --> 00:10:40.106 line:-1 position:50%
you can use a pointer
for the most precise input.


249
00:10:40.106 --> 00:10:43.243 line:-1 position:50%
The system also works with
a connected hardware keyboard,


250
00:10:43.243 --> 00:10:45.645 line:-1 position:50%
with support for
keyboard shortcuts, Focus,


251
00:10:45.645 --> 00:10:49.415 line:-1 position:50%
and key modifiers to supercharge
productivity in your apps.


252
00:10:49.415 --> 00:10:51.718 line:-1 position:50%
Finally, the system supports
the same great


253
00:10:51.718 --> 00:10:54.220 line:-1 position:50%
accessibility technologies that
you're already familiar with


254
00:10:54.220 --> 00:10:58.391 line:-1 position:50%
from other platforms, like
VoiceOver and Switch Control.


255
00:10:58.391 --> 00:11:00.627 line:-1 position:50%
The best part
is that SwiftUI controls


256
00:11:00.627 --> 00:11:02.896 line:-1 position:50%
are built to be accessible
out of the box,


257
00:11:02.896 --> 00:11:05.298 line:-1 position:50%
doing much of the heavy lifting
for you,


258
00:11:05.298 --> 00:11:07.667 line:-1 position:50%
which allows everyone to get
the same great experience


259
00:11:07.667 --> 00:11:10.370 line:-1 position:50%
when using your apps.


260
00:11:10.370 --> 00:11:12.138 line:-1 position:50%
The gestures you're
already familiar with


261
00:11:12.138 --> 00:11:14.107 line:-1 position:50%
in SwiftUI work great,


262
00:11:14.107 --> 00:11:17.010 line:-1 position:50%
adapting automatically
to each form of interaction,


263
00:11:17.010 --> 00:11:19.512 line:-1 position:50%
like TapGesture and DragGesture.


264
00:11:19.512 --> 00:11:21.881 line:-1 position:50%
And we've added some brand-new
gestures to enable


265
00:11:21.881 --> 00:11:24.784 line:-1 position:50%
all-new kinds of rich
3D interactions


266
00:11:24.784 --> 00:11:28.621 line:-1 position:50%
like RotateGesture3D to rotate
a view in all three dimensions,


267
00:11:28.621 --> 00:11:31.658 line:-1 position:50%
using two hands
or a connected trackpad.


268
00:11:31.658 --> 00:11:34.360 line:-1 position:50%
And of course, all of the same
accessibility APIs


269
00:11:34.360 --> 00:11:37.564 line:-1 position:50%
and technologies from other
platforms work great too,


270
00:11:37.564 --> 00:11:41.734 line:-1 position:50%
from VoiceOver and rotors to
Dynamic Type and Invert Colors.


271
00:11:41.734 --> 00:11:42.735 line:-1 position:50%
And many of these features


272
00:11:42.735 --> 00:11:45.371 line:-1 position:50%
have been reimagined
for the platform.


273
00:11:45.371 --> 00:11:47.473 line:-1 position:50%
Like Dwell Control,
which allows people to use


274
00:11:47.473 --> 00:11:51.544 line:-1 position:50%
and navigate your apps
using only their eyes.


275
00:11:51.544 --> 00:11:53.413 line:-1 position:50%
To learn more about these
great features


276
00:11:53.413 --> 00:11:55.648 line:-1 position:50%
and how to make your app
accessible to everyone,


277
00:11:55,648 --> 00:12:00,219 position:50%
check out "Create accessible
spatial experiences."


278
00:12:00.219 --> 00:12:02.589 line:-1 position:50%
A critical tool to making
interaction feel easy


279
00:12:02.589 --> 00:12:06.225 line:-1 position:50%
and intuitive with spatial
computing are hover effects.


280
00:12:06.225 --> 00:12:09.128 line:-1 position:50%
For example, simply by looking
at an interactive view,


281
00:12:09.128 --> 00:12:12.198 line:-1 position:50%
the system shows a subtle
highlight effect over the view


282
00:12:12.198 --> 00:12:14.567 line:-1 position:50%
to provide feedback
that you can interact with it.


283
00:12:14.567 --> 00:12:16.069 line:-1 position:50%
These effects
adapt automatically


284
00:12:16.069 --> 00:12:18.271 line:-1 position:50%
to each form of input,
giving people confidence


285
00:12:18.271 --> 00:12:20.540 line:-1 position:50%
in what they're
interacting with.


286
00:12:20.540 --> 00:12:22.408 line:-1 position:50%
Hover effects are useful
not only to provide


287
00:12:22.408 --> 00:12:25.945 line:-1 position:50%
responsive feedback, but also
to assist with targeting.


288
00:12:25.945 --> 00:12:28.514 line:-1 position:50%
And hover effects are
the only way to make your app


289
00:12:28.514 --> 00:12:30.617 line:-1 position:50%
react to exactly where
people are looking.


290
00:12:30.617 --> 00:12:33.052 line:-1 position:50%
These effects are applied
outside of your app's process


291
00:12:33.052 --> 00:12:35.388 line:-1 position:50%
to respect people's privacy.


292
00:12:35.388 --> 00:12:37.824 line:-1 position:50%
Hover effects are added
automatically to most controls,


293
00:12:37.824 --> 00:12:41.594 line:-1 position:50%
like buttons, toggles,
text fields, and more.


294
00:12:41.594 --> 00:12:44.297 line:-1 position:50%
If you use the built-in styles
provided by SwiftUI,


295
00:12:44.297 --> 00:12:46.866 line:-1 position:50%
you'll get these effects
in your app automatically.


296
00:12:46.866 --> 00:12:49.102 line:-1 position:50%
If you're using
a custom control or style,


297
00:12:49.102 --> 00:12:51.771 line:-1 position:50%
make sure to add hover effects
to make them feel responsive


298
00:12:51.771 --> 00:12:54.007 line:-1 position:50%
and easy to use.


299
00:12:54.007 --> 00:12:56.709 line:-1 position:50%
Let's return to those fun fact
cards I've added to my app


300
00:12:56.709 --> 00:12:59.545 line:-1 position:50%
and check out how they work
with hover effects.


301
00:12:59.545 --> 00:13:03.116 line:-1 position:50%
Those cards are looking great,
but there's one big problem.


302
00:13:03.116 --> 00:13:05.151 line:-1 position:50%
Because I'm using
a custom ButtonStyle,


303
00:13:05.151 --> 00:13:08.087 line:-1 position:50%
I'm now in charge of providing
my own hover effect.


304
00:13:08.087 --> 00:13:10.156 line:-1 position:50%
Without one, there's no feedback
that these cards


305
00:13:10.156 --> 00:13:12.125 line:-1 position:50%
are actually interactive.


306
00:13:12.125 --> 00:13:15.495 line:-1 position:50%
The good news is
that's super easy to fix.


307
00:13:15.495 --> 00:13:17.764 line:-1 position:50%
My ButtonStyle currently
just adds some padding


308
00:13:17.764 --> 00:13:21.100 line:-1 position:50%
and a custom material background
to the button's label.


309
00:13:21.100 --> 00:13:22.902 line:-1 position:50%
To fix that missing
hover feedback,


310
00:13:22.902 --> 00:13:26.305 line:-1 position:50%
I'll add the hoverEffect
modifier to my ButtonStyle.


311
00:13:26.305 --> 00:13:27.940 line:-1 position:50%
This selects
an automatic effect for me


312
00:13:27.940 --> 00:13:30.143 line:-1 position:50%
that is appropriate
for the context.


313
00:13:30.143 --> 00:13:32.345 line:-1 position:50%
In this case,
that'll be the highlight effect.


314
00:13:32.345 --> 00:13:34.614 line:-1 position:50%
Let's take a closer look.


315
00:13:34.614 --> 00:13:36.215 line:-1 position:50%
When I look at
these card buttons,


316
00:13:36.215 --> 00:13:38.317 line:-1 position:50%
I now get a nice,
subtle highlight effect


317
00:13:38.317 --> 00:13:41.320 line:-1 position:50%
that makes it clear
that they're interactive.


318
00:13:41.320 --> 00:13:43.289 line:-1 position:50%
The effect even automatically
matches the shape


319
00:13:43.289 --> 00:13:44.757 line:-1 position:50%
of my button's background,


320
00:13:44.757 --> 00:13:48.661 line:-1 position:50%
ensuring that nobody misses
a chance to learn a fun fact.


321
00:13:48.661 --> 00:13:49.696 line:-1 position:50%
There's a lot more to cover


322
00:13:49.696 --> 00:13:51.798 line:-1 position:50%
about building
great windowed apps.


323
00:13:51,798 --> 00:13:53,299 position:50%
To go further, check out


324
00:13:53,299 --> 00:13:55,968 position:50%
"Elevate your windowed app
for spatial computing,"


325
00:13:55,968 --> 00:13:58,504 position:50%
where you'll walk through
updating a multiplatform app,


326
00:13:58,504 --> 00:14:00,173 position:50%
learn how to add ornaments,


327
00:14:00,173 --> 00:14:04,210 position:50%
dive deeper on hover effects,
materials, and more.


328
00:14:04.210 --> 00:14:07.980 line:-1 position:50%
Next let's take our app to
the next dimension with volumes.


329
00:14:07.980 --> 00:14:10.416 line:-1 position:50%
I want to help my fellow
outer space observers


330
00:14:10.416 --> 00:14:13.319 line:-1 position:50%
gain a new perspective
on the planet that we call home.


331
00:14:13.319 --> 00:14:16.889 line:-1 position:50%
And a volume is perfect
for doing just that.


332
00:14:16.889 --> 00:14:18.391 line:-1 position:50%
To add a volume to my app,


333
00:14:18.391 --> 00:14:20.326 line:-1 position:50%
I'll use the same
WindowGroup scene


334
00:14:20.326 --> 00:14:22.061 line:-1 position:50%
that I used for my main window,


335
00:14:22.061 --> 00:14:25.465 line:-1 position:50%
and simply specify
a volumetric window style.


336
00:14:25.465 --> 00:14:28.034 line:-1 position:50%
I can also provide a default
3D size for the window


337
00:14:28.034 --> 00:14:29.635 line:-1 position:50%
so it can fit our content.


338
00:14:29.635 --> 00:14:32.905 line:-1 position:50%
Let's check out
our volume in the simulator.


339
00:14:32.905 --> 00:14:34.540 line:-1 position:50%
Within my volume's content,


340
00:14:34.540 --> 00:14:37.710 line:-1 position:50%
I'm using the new Model3D API
from RealityKit


341
00:14:37.710 --> 00:14:40.947 line:-1 position:50%
to display the 3D Earth model
our designer has put together.


342
00:14:40.947 --> 00:14:43.316 line:-1 position:50%
And with Model3D,
it's really just that easy


343
00:14:43.316 --> 00:14:45.752 line:-1 position:50%
to add 3D content to my app.


344
00:14:45.752 --> 00:14:47.787 line:-1 position:50%
A Model3D is similar
to an Image,


345
00:14:47.787 --> 00:14:51.491 line:-1 position:50%
making it easy to load and
display beautiful 3D content.


346
00:14:51.491 --> 00:14:55.027 line:-1 position:50%
Unlike an Image, a Model3D
always loads asynchronously,


347
00:14:55.027 --> 00:14:58.831 line:-1 position:50%
as 3D content can take time
to load and be ready to display.


348
00:14:58.831 --> 00:15:00.767 line:-1 position:50%
Similar to the AsyncImage view,


349
00:15:00.767 --> 00:15:03.536 line:-1 position:50%
Model3D can automatically
display a placeholder view


350
00:15:03.536 --> 00:15:05.571 line:-1 position:50%
while we wait
for the content to load.


351
00:15:05.571 --> 00:15:06.906 line:-1 position:50%
Or I can take full control


352
00:15:06.906 --> 00:15:10.109 line:-1 position:50%
and display my own
placeholder instead.


353
00:15:10.109 --> 00:15:11.778 line:-1 position:50%
It's worth taking a moment
to notice here


354
00:15:11.778 --> 00:15:15.148 line:-1 position:50%
that Model3D is just another
SwiftUI View.


355
00:15:15.148 --> 00:15:18.351 line:-1 position:50%
Bringing 3D into your SwiftUI
app builds on the same concepts


356
00:15:18.351 --> 00:15:20.086 line:-1 position:50%
you're already familiar with


357
00:15:20.086 --> 00:15:22.555 line:-1 position:50%
with natural extensions
to the layout system,


358
00:15:22.555 --> 00:15:25.691 line:-1 position:50%
visual effects,
gestures, and more.


359
00:15:25.691 --> 00:15:28.461 line:-1 position:50%
Let's build on this example
so we can understand how.


360
00:15:28.461 --> 00:15:31.464 line:-1 position:50%
I want to add some controls
to help bring the Earth to life.


361
00:15:31.464 --> 00:15:33.666 line:-1 position:50%
I've already built out
my control panel UI,


362
00:15:33.666 --> 00:15:36.335 line:-1 position:50%
and I'd like to place it
in front of my Earth model.


363
00:15:36.335 --> 00:15:39.505 line:-1 position:50%
To do that, I can simply use
a ZStack layout.


364
00:15:39.505 --> 00:15:41.674 line:-1 position:50%
Layouts like ZStack
are automatically aware


365
00:15:41.674 --> 00:15:43.242 line:-1 position:50%
of the depth
of your content,


366
00:15:43.242 --> 00:15:45.611 line:-1 position:50%
just as they are
with width and height.


367
00:15:45.611 --> 00:15:47.246 line:-1 position:50%
And Model3D by default is sized


368
00:15:47.246 --> 00:15:49.682 line:-1 position:50%
to fit its content
in all three dimensions,


369
00:15:49.682 --> 00:15:52.051 line:-1 position:50%
just like an image is in 2D.


370
00:15:52.051 --> 00:15:54.120 line:-1 position:50%
In fact, the entire layout
system is aware


371
00:15:54.120 --> 00:15:56.556 line:-1 position:50%
of your content's depth
and its available space


372
00:15:56.556 --> 00:15:58.491 line:-1 position:50%
and adjusts
your layouts accordingly.


373
00:15:58.491 --> 00:16:01.260 line:-1 position:50%
And there are even new modifiers
to control how depth behaves


374
00:16:01.260 --> 00:16:03.229 line:-1 position:50%
with layout in your apps,


375
00:16:03.229 --> 00:16:05.965 line:-1 position:50%
like the new padding3D
modifier to add spacing


376
00:16:05.965 --> 00:16:09.335 line:-1 position:50%
between your SwiftUI views
along their front or back faces,


377
00:16:09.335 --> 00:16:11.337 line:-1 position:50%
which we can use here
to give our controls


378
00:16:11.337 --> 00:16:13.472 line:-1 position:50%
some room to breathe.


379
00:16:13.472 --> 00:16:15.241 line:-1 position:50%
Remember that volumes
are designed to be viewed


380
00:16:15.241 --> 00:16:16.642 line:-1 position:50%
from any angle,


381
00:16:16.642 --> 00:16:18.644 line:-1 position:50%
so it's important to think
about how your app's content


382
00:16:18.644 --> 00:16:21.814 line:-1 position:50%
is arranged
in all three dimensions.


383
00:16:21.814 --> 00:16:24.851 line:-1 position:50%
Finally, to make my controls
look great and feel grounded,


384
00:16:24.851 --> 00:16:28.020 line:-1 position:50%
I'll make sure to use the new
glassBackgroundEffect modifier,


385
00:16:28.020 --> 00:16:29.989 line:-1 position:50%
giving it the same beautiful
glass treatment we had


386
00:16:29.989 --> 00:16:33.025 line:-1 position:50%
in our standard window before.


387
00:16:33.025 --> 00:16:36.829 line:-1 position:50%
Now these controls
are looking ready to rock.


388
00:16:36.829 --> 00:16:39.966 line:-1 position:50%
Another thing I'd love to add
to our 3D globe is an easy way


389
00:16:39.966 --> 00:16:42.134 line:-1 position:50%
to spin the globe
to a random place,


390
00:16:42.134 --> 00:16:45.771 line:-1 position:50%
which is my favorite way to plan
my next vacation destination.


391
00:16:45.771 --> 00:16:49.542 line:-1 position:50%
To do that, I'll add a 3D
rotation effect to my Model3D,


392
00:16:49.542 --> 00:16:52.545 line:-1 position:50%
in this case about the y-axis.


393
00:16:52.545 --> 00:16:56.749 line:-1 position:50%
And I'll use a state variable
to track the rotation to use.


394
00:16:56.749 --> 00:16:59.318 line:-1 position:50%
Then I'll add a tap gesture
and when it fires,


395
00:16:59.318 --> 00:17:01.554 line:-1 position:50%
I'll change the rotation
by some random amount


396
00:17:01.554 --> 00:17:04.023 line:-1 position:50%
with a new
bouncy spring animation.


397
00:17:04.023 --> 00:17:05.892 line:-1 position:50%
Let's give this a spin.


398
00:17:05.892 --> 00:17:08.294 line:-1 position:50%
Ah yes,
the western hemisphere.


399
00:17:08.294 --> 00:17:11.297 line:-1 position:50%
That really narrows down
my summer plans!


400
00:17:11.297 --> 00:17:12.598 line:-1 position:50%
Notice that the rotation effect


401
00:17:12.598 --> 00:17:15.268 line:-1 position:50%
we just applied
to our globe is truly 3D.


402
00:17:15.268 --> 00:17:16.969 line:-1 position:50%
We've upgraded these
geometry effects


403
00:17:16.969 --> 00:17:20.273 line:-1 position:50%
you already know how to use
with new 3D capabilities,


404
00:17:20.273 --> 00:17:24.377 line:-1 position:50%
including scales, offsets,
and custom 3D transforms.


405
00:17:24.377 --> 00:17:27.046 line:-1 position:50%
Now this is already a great way
to check out the globe,


406
00:17:27.046 --> 00:17:29.382 line:-1 position:50%
but I think we can make it
even better.


407
00:17:29.382 --> 00:17:31.484 line:-1 position:50%
To do that,
I'll use RealityView,


408
00:17:31.484 --> 00:17:34.487 line:-1 position:50%
a new SwiftUI View
that provides easy access


409
00:17:34.487 --> 00:17:36.789 line:-1 position:50%
to the full power of RealityKit.


410
00:17:36.789 --> 00:17:38.858 line:-1 position:50%
With RealityView,
I provide a closure


411
00:17:38.858 --> 00:17:41.427 line:-1 position:50%
to load and make
my RealityKit content.


412
00:17:41.427 --> 00:17:42.895 line:-1 position:50%
To display my Earth model,


413
00:17:42.895 --> 00:17:46.599 line:-1 position:50%
I'll create a ModelEntity
and await until it loads.


414
00:17:46.599 --> 00:17:47.800 line:-1 position:50%
And once it finishes loading,


415
00:17:47.800 --> 00:17:50.770 line:-1 position:50%
I'll add it to my RealityView's
content to display it.


416
00:17:50.770 --> 00:17:52.405 line:-1 position:50%
Notice that I can use
async-await


417
00:17:52.405 --> 00:17:54.640 line:-1 position:50%
directly in my
RealityView's closure.


418
00:17:54.640 --> 00:17:56.976 line:-1 position:50%
Just like with Model3D,
it will automatically display


419
00:17:56.976 --> 00:18:00.313 line:-1 position:50%
a placeholder until
my content has loaded.


420
00:18:00.313 --> 00:18:02.114 line:-1 position:50%
Now that I've loaded
my Earth entity,


421
00:18:02.114 --> 00:18:05.151 line:-1 position:50%
I have access to the rich
library of RealityKit APIs


422
00:18:05.151 --> 00:18:07.620 line:-1 position:50%
to make my content really shine.


423
00:18:07.620 --> 00:18:09.855 line:-1 position:50%
In this case, I want to add
some lighting to the Earth


424
00:18:09.855 --> 00:18:13.326 line:-1 position:50%
to give it
a sunnier disposition.


425
00:18:13.326 --> 00:18:15.361 line:-1 position:50%
I've already written some
RealityKit code


426
00:18:15.361 --> 00:18:17.396 line:-1 position:50%
to add my special
image-based lighting,


427
00:18:17.396 --> 00:18:19.565 line:-1 position:50%
so I'll call that here.


428
00:18:19.565 --> 00:18:22.501 line:-1 position:50%
Now that is looking delightful!


429
00:18:22.501 --> 00:18:25.271 line:-1 position:50%
There's so much more
to cover with RealityView.


430
00:18:25.271 --> 00:18:27.273 line:-1 position:50%
With RealityView,
it's never been easier


431
00:18:27.273 --> 00:18:29.208 line:-1 position:50%
to blend the worlds
of user interfaces


432
00:18:29.208 --> 00:18:31.544 line:-1 position:50%
and rich 3D experiences.


433
00:18:31.544 --> 00:18:34.847 line:-1 position:50%
RealityKit allows you to add
all kinds of rich behaviors


434
00:18:34.847 --> 00:18:36.415 line:-1 position:50%
like custom materials
and shaders,


435
00:18:36.415 --> 00:18:40.019 line:-1 position:50%
physics and complex animations,
and so much more.


436
00:18:40,019 --> 00:18:42,621 position:50%
To learn more about RealityView
and RealityKit,


437
00:18:42,621 --> 00:18:45,391 position:50%
we've prepared several talks
that go much deeper.


438
00:18:45,391 --> 00:18:48,260 position:50%
Check out "Build spatial
experiences with RealityKit"


439
00:18:48,260 --> 00:18:50,563 position:50%
when you're ready dive in.


440
00:18:50.563 --> 00:18:53.833 line:-1 position:50%
For now, let's focus on two
cool features of RealityView:


441
00:18:53.833 --> 00:18:56.402 line:-1 position:50%
gestures and attachments.


442
00:18:56.402 --> 00:18:59.839 line:-1 position:50%
With RealityView, SwiftUI
gestures work automatically,


443
00:18:59.839 --> 00:19:03.642 line:-1 position:50%
making it easier than ever to
bring your 3D content to life.


444
00:19:03.642 --> 00:19:06.112 line:-1 position:50%
I want to build on
the tap gesture we added before


445
00:19:06.112 --> 00:19:07.947 line:-1 position:50%
to also place a marker
on the globe


446
00:19:07.947 --> 00:19:09.181 line:-1 position:50%
based on where I tapped


447
00:19:09.181 --> 00:19:11.951 line:-1 position:50%
so I know exactly
where to travel to next.


448
00:19:11.951 --> 00:19:14.453 line:-1 position:50%
To do that,
I'll use a SpatialTapGesture,


449
00:19:14.453 --> 00:19:18.324 line:-1 position:50%
which now gives me
the full 3D location of the tap.


450
00:19:18.324 --> 00:19:21.394 line:-1 position:50%
To help me identify where
in the Earth's entity I tapped,


451
00:19:21.394 --> 00:19:23.596 line:-1 position:50%
I'll use the new
targetedToAnyEntity


452
00:19:23.596 --> 00:19:25.064 line:-1 position:50%
gesture modifier.


453
00:19:25.064 --> 00:19:26.966 line:-1 position:50%
This provides me
with the context I need,


454
00:19:26.966 --> 00:19:28.434 line:-1 position:50%
like the entity I tapped on


455
00:19:28.434 --> 00:19:30.836 line:-1 position:50%
and the location relative
to that entity,


456
00:19:30.836 --> 00:19:34.540 line:-1 position:50%
which I'll use to look up
the location for my pin.


457
00:19:34.540 --> 00:19:36.275 line:-1 position:50%
To display the pin on my globe,


458
00:19:36.275 --> 00:19:39.645 line:-1 position:50%
I can use RealityView
attachments.


459
00:19:39.645 --> 00:19:42.982 line:-1 position:50%
Attachments are great for mixing
custom SwiftUI views together


460
00:19:42.982 --> 00:19:45.084 line:-1 position:50%
inline with RealityKit entities.


461
00:19:45.084 --> 00:19:46.619 line:-1 position:50%
I can add other SwiftUI views


462
00:19:46.619 --> 00:19:49.889 line:-1 position:50%
directly within my RealityView's
attachments closure,


463
00:19:49.889 --> 00:19:52.725 line:-1 position:50%
making them available to place
as RealityKit entities


464
00:19:52.725 --> 00:19:54.894 line:-1 position:50%
anywhere in my RealityView.


465
00:19:54.894 --> 00:19:57.496 line:-1 position:50%
I'll add a pin attachment here
and give it a tag


466
00:19:57.496 --> 00:19:59.198 line:-1 position:50%
that I can use to identify it.


467
00:19:59.198 --> 00:20:00.499 line:-1 position:50%
Then in my update closure,


468
00:20:00.499 --> 00:20:02.601 line:-1 position:50%
I'll look up the entity
for my attachment


469
00:20:02.601 --> 00:20:05.604 line:-1 position:50%
and add it to my RealityView's
content to display it.


470
00:20:05.604 --> 00:20:09.475 line:-1 position:50%
And then I'll place that entity
to match the tap location.


471
00:20:09.475 --> 00:20:12.011 line:-1 position:50%
Let's give this another spin!


472
00:20:12.011 --> 00:20:14.914 line:-1 position:50%
Looks like I'd better
get packing!


473
00:20:14,914 --> 00:20:16,749 position:50%
We're so excited
about the possibilities


474
00:20:16,749 --> 00:20:18,851 position:50%
for building amazing
volumetric apps


475
00:20:18,851 --> 00:20:20,686 position:50%
that we've prepared
an entire talk


476
00:20:20,686 --> 00:20:24,323 position:50%
to help you take your SwiftUI
apps to the next dimension,


477
00:20:24,323 --> 00:20:26,292 position:50%
where you'll learn more
on using SwiftUI


478
00:20:26,292 --> 00:20:29,662 position:50%
together with RealityKit,
building rich 3D interactions,


479
00:20:29,662 --> 00:20:33,899 position:50%
adding depth to your layouts,
and more.


480
00:20:33.899 --> 00:20:36.202 line:-1 position:50%
Finally, let's take this app
beyond the window


481
00:20:36.202 --> 00:20:39.071 line:-1 position:50%
with Full Spaces,
a brand-new way to build rich,


482
00:20:39.071 --> 00:20:42.108 line:-1 position:50%
immersive 3D experiences
using SwiftUI.


483
00:20:42.108 --> 00:20:45.144 line:-1 position:50%
With a Full Space,
you take full control.


484
00:20:45.144 --> 00:20:47.313 line:-1 position:50%
You can place content
anywhere in the environment


485
00:20:47.313 --> 00:20:50.483 line:-1 position:50%
to augment people's surroundings
in creative new ways.


486
00:20:50.483 --> 00:20:53.285 line:-1 position:50%
Or you can fully immerse people
by hiding their surroundings


487
00:20:53.285 --> 00:20:55.955 line:-1 position:50%
to create stunning
new experiences.


488
00:20:55.955 --> 00:20:59.959 line:-1 position:50%
Let's dive into space and bring
our solar system to life.


489
00:20:59.959 --> 00:21:02.728 line:-1 position:50%
I've already gotten a head start
on this page in our main window,


490
00:21:02.728 --> 00:21:04.296 line:-1 position:50%
inviting our armchair astronauts


491
00:21:04.296 --> 00:21:06.098 line:-1 position:50%
to view outer space
for themselves.


492
00:21:06.098 --> 00:21:07.633 line:-1 position:50%
Now I just need
to create my space


493
00:21:07.633 --> 00:21:10.469 line:-1 position:50%
and wire up this
button for liftoff.


494
00:21:10.469 --> 00:21:12.037 line:-1 position:50%
To add a Full Space
to my app,


495
00:21:12.037 --> 00:21:14.373 line:-1 position:50%
I'll simply add a new
ImmersiveSpace scene


496
00:21:14.373 --> 00:21:16.408 line:-1 position:50%
as I did with my WindowGroups.


497
00:21:16.408 --> 00:21:18.410 line:-1 position:50%
Within its body,
I'll provide a root view


498
00:21:18.410 --> 00:21:20.079 line:-1 position:50%
for my space's content.


499
00:21:20.079 --> 00:21:22.148 line:-1 position:50%
I'll also provide an ID
for my space


500
00:21:22.148 --> 00:21:25.684 line:-1 position:50%
so I can programmatically
open it from our main window.


501
00:21:25.684 --> 00:21:27.453 line:-1 position:50%
To open this space,
I'll use the new


502
00:21:27.453 --> 00:21:30.890 line:-1 position:50%
openImmersiveSpace
environment action.


503
00:21:30.890 --> 00:21:32.958 line:-1 position:50%
Within my button,
I'll call that action


504
00:21:32.958 --> 00:21:35.594 line:-1 position:50%
and pass in the ID
for our space.


505
00:21:35.594 --> 00:21:38.297 line:-1 position:50%
And just like that...


506
00:21:38.297 --> 00:21:42.568 line:-1 position:50%
...we have liftoff!


507
00:21:42.568 --> 00:21:44.270 line:-1 position:50%
This is a great start.


508
00:21:44.270 --> 00:21:45.838 line:-1 position:50%
I can get up close to the Earth


509
00:21:45.838 --> 00:21:48.107 line:-1 position:50%
in a way that I never could
before,


510
00:21:48.107 --> 00:21:50.576 line:-1 position:50%
letting me really appreciate
all the rich detail,


511
00:21:50.576 --> 00:21:52.745 line:-1 position:50%
like those realistic clouds.


512
00:21:52.745 --> 00:21:55.114 line:-1 position:50%
But there's something
missing here.


513
00:21:55.114 --> 00:21:58.117 line:-1 position:50%
I want to feel truly immersed
in this space.


514
00:21:58.117 --> 00:22:00.986 line:-1 position:50%
To do that, I'll use
a powerful tool of spaces:


515
00:22:00.986 --> 00:22:03.889 line:-1 position:50%
immersion styles.


516
00:22:03.889 --> 00:22:07.059 line:-1 position:50%
A Full Space can come in one
of several immersion styles,


517
00:22:07.059 --> 00:22:10.229 line:-1 position:50%
and you can transition between
these styles on the fly.


518
00:22:10,229 --> 00:22:12,264 position:50%
With mixed immersion,
your space's content


519
00:22:12,264 --> 00:22:13,999 position:50%
coexists with the real world,


520
00:22:13,999 --> 00:22:16,535 position:50%
which makes it great
for lightweight experiences


521
00:22:16,535 --> 00:22:19,104 position:50%
and augmenting
people's surroundings.


522
00:22:19,104 --> 00:22:20,539 position:50%
With full immersion,


523
00:22:20,539 --> 00:22:22,474 position:50%
your app can become
fully immersive


524
00:22:22,474 --> 00:22:24,009 position:50%
and hide people's surroundings,


525
00:22:24,009 --> 00:22:27,079 position:50%
transporting them
into stunning new worlds.


526
00:22:27,079 --> 00:22:29,448 position:50%
And progressive immersion
is a great middle ground


527
00:22:29,448 --> 00:22:31,617 position:50%
for experiences that
keep people grounded


528
00:22:31,617 --> 00:22:33,686 position:50%
in the real world
in their periphery.


529
00:22:33,686 --> 00:22:35,020 position:50%
With progressive immersion,


530
00:22:35,020 --> 00:22:37,523 position:50%
people can also use
the Digital Crown on the device


531
00:22:37,523 --> 00:22:40,793 position:50%
to dial in exactly how much
immersion feels right to them.


532
00:22:40,793 --> 00:22:43,596 position:50%
Now I think a fully immersive
space would be the perfect fit


533
00:22:43,596 --> 00:22:47,132 position:50%
for my app to make
it truly feel out of this world.


534
00:22:47.132 --> 00:22:50.236 line:-1 position:50%
To do that, I'll return
to my ImmersiveSpace scene


535
00:22:50.236 --> 00:22:52.905 line:-1 position:50%
and add in the new
immersionStyle modifier


536
00:22:52.905 --> 00:22:55.140 line:-1 position:50%
with the full immersion style.


537
00:22:55.140 --> 00:22:57.710 line:-1 position:50%
Here I provide both a list
of supported styles


538
00:22:57.710 --> 00:22:59.211 line:-1 position:50%
and a current selection,


539
00:22:59.211 --> 00:23:02.047 line:-1 position:50%
allowing me
to change the style on the fly.


540
00:23:02.047 --> 00:23:04.650 line:-1 position:50%
When I use full immersion,
the system completely hides


541
00:23:04.650 --> 00:23:06.652 line:-1 position:50%
people's real-world
surroundings.


542
00:23:06.652 --> 00:23:08.520 line:-1 position:50%
So I need to provide
a virtual environment


543
00:23:08.520 --> 00:23:11.357 line:-1 position:50%
in which to immerse
the people using my app.


544
00:23:11.357 --> 00:23:13.592 line:-1 position:50%
And of course,
what better environment to use


545
00:23:13.592 --> 00:23:15.694 line:-1 position:50%
than outer space itself?


546
00:23:15.694 --> 00:23:17.663 line:-1 position:50%
We'll reach for the stars
with our environment


547
00:23:17.663 --> 00:23:20.799 line:-1 position:50%
by creating a new RealityView
to display our star field.


548
00:23:20.799 --> 00:23:22.668 line:-1 position:50%
Within our RealityView's
make closure,


549
00:23:22.668 --> 00:23:25.404 line:-1 position:50%
I'll load our star field entity,
and when it's ready,


550
00:23:25.404 --> 00:23:28.274 line:-1 position:50%
I'll add it to
the RealityView's content.


551
00:23:28.274 --> 00:23:29.541 line:-1 position:50%
Then I'll add
the Starfield view


552
00:23:29.541 --> 00:23:33.712 line:-1 position:50%
to our solar system's body
alongside our Earth and Sun.


553
00:23:33.712 --> 00:23:36.315 line:-1 position:50%
Let's zoom in for a closer look.


554
00:23:39.852 --> 00:23:44.456 line:-1 position:50%
Now this is making me feel
truly starstruck.


555
00:23:51.063 --> 00:23:52.898 line:-1 position:50%
To take my space
to the next level,


556
00:23:52.898 --> 00:23:54.800 line:-1 position:50%
I can use ARKit.


557
00:23:54.800 --> 00:23:57.136 line:-1 position:50%
ARKit is a powerful
framework deeply integrated


558
00:23:57.136 --> 00:23:59.138 line:-1 position:50%
with the system,
providing access


559
00:23:59.138 --> 00:24:00.706 line:-1 position:50%
to rich real-time understanding


560
00:24:00.706 --> 00:24:02.941 line:-1 position:50%
of people's real-world
surroundings,


561
00:24:02.941 --> 00:24:05.711 line:-1 position:50%
with APIs like world tracking
and scene understanding


562
00:24:05.711 --> 00:24:09.048 line:-1 position:50%
that allow you to place content
on real-world surfaces.


563
00:24:09.048 --> 00:24:11.183 line:-1 position:50%
And hand tracking,
an incredible new tool


564
00:24:11.183 --> 00:24:13.452 line:-1 position:50%
that you can use to build
custom hand gestures,


565
00:24:13.452 --> 00:24:15.754 line:-1 position:50%
interact with your
content using realistic physics,


566
00:24:15.754 --> 00:24:17.356 line:-1 position:50%
and so much more.


567
00:24:17.356 --> 00:24:20.359 line:-1 position:50%
To learn more about how you can
use ARKit in your spaces,


568
00:24:20.359 --> 00:24:23.662 line:-1 position:50%
check out "Meet ARKit
for spatial computing."


569
00:24:23.662 --> 00:24:25.531 line:-1 position:50%
Now I'm so excited
about the possibilities


570
00:24:25.531 --> 00:24:27.966 line:-1 position:50%
that ARKit unlocks with my app
that I wanted to give you


571
00:24:27.966 --> 00:24:31.570 line:-1 position:50%
a sneak peek of one more feature
that I've been working on.


572
00:24:31.570 --> 00:24:34.173 line:-1 position:50%
By integrating ARKit
into my space,


573
00:24:34.173 --> 00:24:36.375 line:-1 position:50%
I was able to implement
a new hand gesture


574
00:24:36.375 --> 00:24:39.178 line:-1 position:50%
to summon the Earth.


575
00:24:39.178 --> 00:24:43.682 line:-1 position:50%
So you can hold the world
in the palm of your hand.


576
00:24:44.183 --> 00:24:46.185 line:-1 position:50%
We're just scratching
the surface of what you can do


577
00:24:46.185 --> 00:24:47.720 line:-1 position:50%
with Full Spaces.


578
00:24:47.720 --> 00:24:51.223 line:-1 position:50%
And we've prepared another talk
for you to launch into space.


579
00:24:51,223 --> 00:24:53,592 position:50%
Check out "Go beyond
the window with SwiftUI"


580
00:24:53,592 --> 00:24:56,295 position:50%
to dive deeper on
the fundamentals of spaces


581
00:24:56,295 --> 00:24:58,364 position:50%
and learn about advanced
tools like adding effects


582
00:24:58,364 --> 00:25:00,933 position:50%
to your surroundings,
displaying virtual hands,


583
00:25:00,933 --> 00:25:04,737 position:50%
integrating with SharePlay,
and more.


584
00:25:04,737 --> 00:25:06,138 position:50%
And if you need full control


585
00:25:06,138 --> 00:25:08,774 position:50%
over rendering the content
in your space,


586
00:25:08,774 --> 00:25:10,576 position:50%
you can do that too using Metal


587
00:25:10,576 --> 00:25:13,112 position:50%
and the new CompositorServices
framework.


588
00:25:13,112 --> 00:25:17,916 position:50%
Check out "Discover Metal for
immersive apps" to learn more.


589
00:25:17.916 --> 00:25:20.619 line:-1 position:50%
We can't wait to check out
all the amazing new apps


590
00:25:20.619 --> 00:25:23.021 line:-1 position:50%
you're going to build
using SwiftUI.


591
00:25:23.021 --> 00:25:24.456 line:-1 position:50%
From beautiful windows


592
00:25:24.456 --> 00:25:26.692 line:-1 position:50%
to an entirely new dimension
with volumes,


593
00:25:26.692 --> 00:25:29.895 line:-1 position:50%
to incredible immersive
experiences with Full Space,


594
00:25:29.895 --> 00:25:32.798 line:-1 position:50%
a world of new possibilities
await you.


595
00:25:32,798 --> 00:25:34,266 position:50%
If you're ready to dive deeper,


596
00:25:34,266 --> 00:25:36,935 position:50%
we've got even more great talks
for you to check out,


597
00:25:36,935 --> 00:25:38,837 position:50%
like
"Principles of Spatial Design,"


598
00:25:38,837 --> 00:25:41,006 position:50%
where you can learn more
about how to design your app


599
00:25:41,006 --> 00:25:42,541 position:50%
to really shine.


600
00:25:42,541 --> 00:25:43,976 position:50%
And if you have existing
UIKit code


601
00:25:43,976 --> 00:25:45,344 position:50%
you want to bring
to the platform,


602
00:25:45,344 --> 00:25:48,447 position:50%
check out "Meet UIKit
for spatial computing."


603
00:25:48.447 --> 00:25:52.117 line:-1 position:50%
Thanks for watching, and have
a blast with spatial computing!


604
00:25:52,117 --> 00:25:56,054 line:0 position:90% size:2%
♪

