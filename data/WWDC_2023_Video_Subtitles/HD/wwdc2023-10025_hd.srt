2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
♪ ♪


3
00:00:10,010 --> 00:00:12,012 line:-1
Artem: Hi, my name is Artem.


4
00:00:12,045 --> 00:00:15,082 line:-2
I’m an engineer
on the Apple Push Notifications team.


5
00:00:15.115 --> 00:00:18.318 line:-2 align:center
I'm excited to introduce you
to Push Notifications Console.


6
00:00:18,352 --> 00:00:21,221 line:-2
It is a brand-new tool
which combines a few features


7
00:00:21,255 --> 00:00:25,325 line:-2
that will help you integrate
push notifications into your app.


8
00:00:25,359 --> 00:00:28,128 line:-2
I’ll start by sending some
notifications from the console,


9
00:00:28.161 --> 00:00:31.231 line:-2 align:center
which can be helpful
for end to end testing.


10
00:00:31.265 --> 00:00:36.670 line:-2 align:center
Next, I’ll use the delivery log feature
to analyze some common problems.


11
00:00:36,703 --> 00:00:39,973 line:-2
And finally, I’ll introduce you
to some additional tools


12
00:00:40,007 --> 00:00:43,744 line:-2
that you can leverage to work
with authentication and device tokens.


13
00:00:43.777 --> 00:00:47.748 line:-2 align:center
To begin, I’m going to cover
some Push Notifications basics.


14
00:00:47.781 --> 00:00:51.818 line:-2 align:center
Push notifications are short messages
that are sent to a user's device


15
00:00:51,852 --> 00:00:54,221 line:-1
from an application or website.


16
00:00:54.254 --> 00:00:59.092 line:-2 align:center
They are an incredibly powerful tool
to expand the capabilities of your app.


17
00:00:59.126 --> 00:01:01.228 line:-2 align:center
There are millions
of push notifications delivered


18
00:01:01.261 --> 00:01:05.032 line:-2 align:center
to Apple devices each second,
enriching user experience.


19
00:01:05.065 --> 00:01:08.535 line:-2 align:center
These notifications are delivered
in real time and are designed


20
00:01:08,569 --> 00:01:12,539 line:-2
to provide users with timely
and relevant information.


21
00:01:12,573 --> 00:01:15,475 line:-2
This allows for a more dynamic
experience when it comes


22
00:01:15.509 --> 00:01:18.512 line:-1 align:center
to updating your application.


23
00:01:18.545 --> 00:01:21.315 line:-2 align:center
Push notifications can help
to increase user engagement,


24
00:01:21,348 --> 00:01:25,686 line:-2
and allow them to always stay
up-to-date with your app.


25
00:01:25.719 --> 00:01:29.423 line:-1 align:center
Here’s a brief overview of how it works.


26
00:01:29,456 --> 00:01:33,293 line:-2
The backend that enables the delivery
of push notifications is called


27
00:01:33,327 --> 00:01:38,532 line:-2
Apple Push Notification service,
or APNs for short.


28
00:01:38,565 --> 00:01:41,802 line:-2
The story of a notification begins
when you prompt the user


29
00:01:41,835 --> 00:01:44,404 line:-1
to allow notifications from your app.


30
00:01:44,438 --> 00:01:46,273 line:-1
If the user agrees,


31
00:01:46.306 --> 00:01:51.378 line:-2 align:center
a Device Token is generated
by APNs and then sent to the device.


32
00:01:51,411 --> 00:01:56,350 line:-2
That token uniquely identifies
your app on that particular device.


33
00:01:57,317 --> 00:02:00,721 line:-2
Usually the token is then forwarded
to your application server


34
00:02:00,754 --> 00:02:03,857 line:-1
which stores it for future use.


35
00:02:03.891 --> 00:02:06.627 line:-2 align:center
When the server wants
to send a push notification,


36
00:02:06,660 --> 00:02:10,931 line:-2
it uses the stored device token
to address the notification through APNs.


37
00:02:12,366 --> 00:02:15,002 line:-2
APNs then delivers
the notification to the app


38
00:02:15.035 --> 00:02:18.472 line:-2 align:center
on the device
with the corresponding token.


39
00:02:18.505 --> 00:02:21.675 line:-2 align:center
Note that device tokens can change,
so it's essential to keep them


40
00:02:21,708 --> 00:02:26,446 line:-2
up-to-date on the server side
for accurate and reliable delivery.


41
00:02:26.480 --> 00:02:29.149 line:-2 align:center
The Push Notifications console
is a brand-new tool


42
00:02:29.183 --> 00:02:33.153 line:-2 align:center
that provides a variety of instruments
for interacting with APNs.


43
00:02:33,187 --> 00:02:36,924 line:-2
If you're developing an app
and adding push notifications to it,


44
00:02:36.957 --> 00:02:40.494 line:-2 align:center
you might want to have
a quick way of testing it end-to-end.


45
00:02:40,527 --> 00:02:43,830 line:-2
That’s where
the send feature comes in handy.


46
00:02:43,864 --> 00:02:46,200 line:-1
I’m developing the Backyard Birds app.


47
00:02:46,233 --> 00:02:48,535 line:-2
It's now spring,
and some birds are returning


48
00:02:48.569 --> 00:02:52.539 line:-2 align:center
from their wintering grounds,
so I want to let users know about that.


49
00:02:52.573 --> 00:02:55.943 line:-1 align:center
I’m going to create a new notification.


50
00:02:55,976 --> 00:02:58,078 line:-1
Give it a name,


51
00:02:58,111 --> 00:03:01,515 line:-2
provide the device token
of the app on the phone,


52
00:03:01,548 --> 00:03:04,484 line:-1
and then fill some payload attributes.


53
00:03:04,518 --> 00:03:07,154 line:-2
I’ll use the name
of the app for the title.


54
00:03:09.957 --> 00:03:12.960 line:-1 align:center
The subtitle will say “Important Update.”


55
00:03:15,762 --> 00:03:19,566 line:-2
And the body will be
the “Robins are back” message.


56
00:03:22.236 --> 00:03:25.105 line:-2 align:center
Now that it's ready,
I’m going to click send.


57
00:03:30,210 --> 00:03:34,314 line:-2
When a device receives a push,
it displays a notification.


58
00:03:35,949 --> 00:03:39,386 line:-2
The history of the notifications
sent from this page is preserved


59
00:03:39.419 --> 00:03:42.723 line:-2 align:center
for your convenience
in the sidebar on the left.


60
00:03:42,756 --> 00:03:46,927 line:-2
I want to reuse the last notification,
but slightly change the message.


61
00:03:46,960 --> 00:03:51,732 line:-2
I’m going to copy the message that was
just sent and create a new notification.


62
00:03:53,100 --> 00:03:55,602 line:-1
Here, give it a name.


63
00:03:57.271 --> 00:03:59.706 line:-1 align:center
And then toggle this switch


64
00:03:59,740 --> 00:04:03,477 line:-2
which allows me to enter
the payload in raw JSON format.


65
00:04:04.444 --> 00:04:07.881 line:-2 align:center
I’m going to insert the payload
I just copied and only change


66
00:04:07.915 --> 00:04:09.950 line:-1 align:center
the message to a different one.


67
00:04:18,091 --> 00:04:22,529 line:-2
Supply the same Device token,
and then send it.


68
00:04:25,232 --> 00:04:28,101 line:-2
And the device
receives an updated notification.


69
00:04:30,804 --> 00:04:33,774 line:-2
The Console allows you
to test many types of notifications


70
00:04:33.807 --> 00:04:35.809 line:-1 align:center
and different attributes.


71
00:04:35.843 --> 00:04:38.478 line:-1 align:center
You can specify the environment...


72
00:04:39,713 --> 00:04:41,849 line:-1
Try different push types...


73
00:04:44,084 --> 00:04:47,087 line:-1
Set the exact expiration...


74
00:04:49.456 --> 00:04:51.859 line:-1 align:center
Try different priorities...


75
00:04:53,861 --> 00:04:56,563 line:-1
And send any type of payload.


76
00:05:00,434 --> 00:05:03,704 line:-2
Next up,
I’ll cover the Delivery Log feature.


77
00:05:03,737 --> 00:05:07,875 line:-2
Sometimes there are situations where
a notification you send is not received,


78
00:05:07,908 --> 00:05:11,245 line:-2
leaving you uncertain
about what happened to it.


79
00:05:11,278 --> 00:05:14,915 line:-2
Using this tool might
help you analyze such cases.


80
00:05:14,948 --> 00:05:17,784 line:-2
As a notification travels
through the APNs stack


81
00:05:17,818 --> 00:05:21,221 line:-2
the events that reflect
its delivery process are recorded.


82
00:05:21,255 --> 00:05:23,023 line:-1
And now you can retrieve that information,


83
00:05:23,056 --> 00:05:27,327 line:-2
using the new header that APNs
returns when the notification is sent.


84
00:05:27.361 --> 00:05:29.363 line:-1 align:center
Here’s how it works.


85
00:05:29,396 --> 00:05:33,066 line:-2
The device can emulate a situation
where a notification is not received


86
00:05:33.100 --> 00:05:35.602 line:-1 align:center
by enabling Low Power mode.


87
00:05:36,737 --> 00:05:41,074 line:-2
Then, I go to the Send tab
and resend one of the notifications.


88
00:05:46.346 --> 00:05:49.416 line:-1 align:center
I’ll give it a name,


89
00:05:49,449 --> 00:05:52,186 line:-1
paste the payload,


90
00:05:52,219 --> 00:05:54,488 line:-1
supply the device token,


91
00:05:54,521 --> 00:05:58,358 line:-2
and set the expiration date
sometime into the future.


92
00:06:02,062 --> 00:06:04,164 line:-1
But this time, after clicking “send”


93
00:06:04,198 --> 00:06:06,934 line:-2
the notification
will not show up on the device.


94
00:06:08.001 --> 00:06:11.371 line:-2 align:center
To find out what happened,
I’m going to copy the new type of ID


95
00:06:11.405 --> 00:06:16.243 line:-2 align:center
that APNs returns in HTTP response,
“apns-unique-id”.


96
00:06:19,379 --> 00:06:23,350 line:-2
After switching to the “Delivery Log” tab,
I'm presented with a search field


97
00:06:23.383 --> 00:06:27.254 line:-1 align:center
where I can put the ID I just copied.


98
00:06:27.287 --> 00:06:30.657 line:-2 align:center
Once I run the search,
I can see the history of the notification


99
00:06:30.691 --> 00:06:34.194 line:-1 align:center
as it traveled through the APNs stack.


100
00:06:34,228 --> 00:06:38,465 line:-2
Here the last event is
"stored for device power considerations,"


101
00:06:38.498 --> 00:06:41.902 line:-2 align:center
which explains
why the message was not delivered.


102
00:06:41,935 --> 00:06:44,438 line:-2
In this case,
the phone was in Low Power Mode,


103
00:06:44,471 --> 00:06:48,775 line:-2
so it deferred receiving
some notifications to conserve battery.


104
00:06:50.277 --> 00:06:54.114 line:-2 align:center
When Low Power mode is disabled,
the notification is received


105
00:06:54,147 --> 00:06:56,350 line:-1
and displayed on the device.


106
00:07:00.587 --> 00:07:03.557 line:-2 align:center
After it's delivered,
the corresponding update can also


107
00:07:03.590 --> 00:07:05.025 line:-1 align:center
be seen in the delivery log.


108
00:07:07.160 --> 00:07:10.797 line:-2 align:center
With this tool, you can analyze
a variety of situations.


109
00:07:10,831 --> 00:07:14,701 line:-2
Each history event not only
describes what happened, but also why


110
00:07:14,735 --> 00:07:16,904 line:-1
in corresponding tooltips.


111
00:07:17.838 --> 00:07:23.110 line:-2 align:center
For example, a notification can go
to APNs storage if the device is offline


112
00:07:23,143 --> 00:07:27,481 line:-2
or can be discarded if the app
was removed from the device.


113
00:07:27,514 --> 00:07:31,618 line:-2
You’ll find more examples
when you start working with the tool.


114
00:07:31.652 --> 00:07:34.221 line:-2 align:center
This feature is available
for notifications sent


115
00:07:34.254 --> 00:07:37.191 line:-1 align:center
through regular APNs API as well.


116
00:07:37,224 --> 00:07:41,161 line:-2
You need to record “apns-unique-id”
from APNs response to be able


117
00:07:41,195 --> 00:07:43,363 line:-1
to query this information.


118
00:07:43,397 --> 00:07:45,866 line:-2
And for the notifications
sent from the Console,


119
00:07:45.899 --> 00:07:48.635 line:-2 align:center
there’s no need
to switch to the “delivery log” tab,


120
00:07:48,669 --> 00:07:51,772 line:-2
the same information is available
on the Send page itself.


121
00:07:54,107 --> 00:07:57,611 line:-2
As you integrate your app with APNs,
you’ll work with different types


122
00:07:57,644 --> 00:08:01,481 line:-2
of tokens used for authentication
and sending notifications,


123
00:08:01,515 --> 00:08:03,016 line:-1
and the console also provides


124
00:08:03.050 --> 00:08:06.186 line:-2 align:center
a variety of handy tools
to help you work with them.


125
00:08:07.955 --> 00:08:10.324 line:-1 align:center
Let’s cover authentication first.


126
00:08:10,357 --> 00:08:13,594 line:-2
There are two types
of authentication with APNs:


127
00:08:13,627 --> 00:08:16,463 line:-1
Certificate-based and token-based.


128
00:08:18,232 --> 00:08:21,735 line:-2
Certificate-based authentication relies
on SSL certificates


129
00:08:21,768 --> 00:08:26,740 line:-2
to establish a trusted connection
between your server and APNs.


130
00:08:26,773 --> 00:08:30,210 line:-2
You need to create and manage
certificates for each app and environment


131
00:08:30.244 --> 00:08:33.180 line:-1 align:center
within the Apple Developer portal.


132
00:08:33.213 --> 00:08:38.352 line:-2 align:center
Keep in mind that certificates expire
and need to be renewed periodically.


133
00:08:40.787 --> 00:08:42.756 line:-1 align:center
Token-based authentication uses


134
00:08:42,789 --> 00:08:45,993 line:-2
JSON Web Tokens for secure
and efficient authentication


135
00:08:46,026 --> 00:08:49,463 line:-1
between your provider server and APNs.


136
00:08:49,496 --> 00:08:51,365 line:-1
It requires generating a token


137
00:08:51.398 --> 00:08:55.602 line:-2 align:center
signed with a private key associated
with your Apple Developer account.


138
00:08:55,636 --> 00:08:59,673 line:-2
Private keys don't expire
like certificates.


139
00:08:59.706 --> 00:09:01.708 line:-1 align:center
As part of Push Notifications Console,


140
00:09:01,742 --> 00:09:05,879 line:-2
there's now a tool that can generate
an authentication token for you.


141
00:09:05,913 --> 00:09:08,382 line:-2
All you need
to do is supply a private key,


142
00:09:08,415 --> 00:09:11,285 line:-1
obtained from the developer portal...


143
00:09:13.820 --> 00:09:16.623 line:-1 align:center
And associated key ID.


144
00:09:16.657 --> 00:09:20.994 line:-2 align:center
After supplying these pieces,
a new token will be generated.


145
00:09:21,028 --> 00:09:25,465 line:-2
You can then use it to authenticate
your requests against APNs.


146
00:09:25,499 --> 00:09:29,970 line:-2
Keep in mind that the validity period
of these tokens can not exceed one hour,


147
00:09:30.003 --> 00:09:32.673 line:-1 align:center
so they need to be rotated periodically.


148
00:09:32,706 --> 00:09:36,343 line:-2
And when you generate a token,
your key is not uploaded anywhere.


149
00:09:36,376 --> 00:09:38,178 line:-1
It is only used in your browser,


150
00:09:38,212 --> 00:09:40,814 line:-1
so your private information is preserved.


151
00:09:40,848 --> 00:09:44,284 line:-2
If you already have a token,
but think it might not be working,


152
00:09:44,318 --> 00:09:48,555 line:-2
you can leverage another tool,
authentication token validator.


153
00:09:48.589 --> 00:09:51.992 line:-2 align:center
I’m going to take
the token I just generated,


154
00:09:52,025 --> 00:09:54,795 line:-2
and then paste it
into the validation tool.


155
00:09:56,763 --> 00:10:01,335 line:-2
Here, I get back the validation result,
which will either confirm that the token


156
00:10:01.368 --> 00:10:06.273 line:-2 align:center
is valid, like in this case,
or provide you the reason why it’s not.


157
00:10:06,306 --> 00:10:10,577 line:-2
For example,
when I supply a token I used a while ago,


158
00:10:10,611 --> 00:10:15,482 line:-2
the validation result is telling me
that the “issued at” claim is too old,


159
00:10:15,516 --> 00:10:19,653 line:-2
which effectively means
that the token has expired.


160
00:10:19,686 --> 00:10:22,823 line:-2
And lastly,
there’s the Device Token validator.


161
00:10:22.856 --> 00:10:25.526 line:-2 align:center
As you remember,
these tokens are used to specify


162
00:10:25,559 --> 00:10:29,196 line:-2
the recipient
when you send a notification.


163
00:10:29.229 --> 00:10:33.033 line:-2 align:center
They are tied to a concrete
environment and push type.


164
00:10:33,066 --> 00:10:36,436 line:-2
When you enter a token,
you will get a response that will tell you


165
00:10:36.470 --> 00:10:40.474 line:-2 align:center
which environment and push type
the token is valid for, if any.


166
00:10:40,507 --> 00:10:43,410 line:-2
For example,
when I supply the token that was used


167
00:10:43.443 --> 00:10:46.146 line:-2 align:center
used in the demonstration before,
we can see that it is valid


168
00:10:46.180 --> 00:10:50.684 line:-2 align:center
for Alert & Background push types
and Development environment.


169
00:10:50,717 --> 00:10:53,954 line:-2
Hopefully you’ll enjoy using
these features and find it easier


170
00:10:53,987 --> 00:10:56,423 line:-2
to integrate Push Notifications
into your app,


171
00:10:56.456 --> 00:10:59.393 line:-2 align:center
providing people
with new exciting functionality.


172
00:10:59,426 --> 00:11:01,328 line:-1
Get started today.


173
00:11:01.361 --> 00:11:04.865 line:-2 align:center
Send push notifications
to test integration end-to-end.


174
00:11:04.898 --> 00:11:09.503 line:-2 align:center
Examine delivery logs and get better
insight into the delivery process.


175
00:11:09,536 --> 00:11:14,107 line:-2
Validate your tokens and generate
new ones, all from the console.


176
00:11:14,141 --> 00:11:18,045 line:-2
For more information on implementing
push notifications on the client,


177
00:11:18,078 --> 00:11:23,417 line:-3
check out “The Push Notifications primer”
video from WWDC20.


178
00:11:23.450 --> 00:11:25.219 line:-1 align:center
Thanks for watching.


179
00:11:25,252 --> 00:11:28,956 line:0
♪ ♪

