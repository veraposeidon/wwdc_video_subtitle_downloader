2
00:00:00.100 --> 00:00:03.704 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:03,704 --> 00:00:10,410 align:right line:0 size:2%
♪


4
00:00:10.410 --> 00:00:12.646 line:-1 position:50%
Hello. I'm John,
and I'm an engineer


5
00:00:12.646 --> 00:00:14.581 line:-1 position:50%
on the RealityKit team.


6
00:00:14,581 --> 00:00:16,650 line:-1
Today, I'm delighted
to introduce you


7
00:00:16.650 --> 00:00:20.888 line:-1 position:50%
to the new RealityKit for
creating spatial experiences.


8
00:00:20.888 --> 00:00:24.324 line:-1 position:50%
RealityKit is a framework
for realistically rendering,


9
00:00:24.324 --> 00:00:27.961 line:-1 position:50%
animating, and simulating
3D models and effects.


10
00:00:27,961 --> 00:00:30,530 line:-1
We introduced RealityKit in 2019


11
00:00:30.530 --> 00:00:33.767 line:-1 position:50%
and have added a lot
of new features since then.


12
00:00:33,767 --> 00:00:35,502 line:-1
If you've already
used RealityKit


13
00:00:35.502 --> 00:00:37.738 line:-1 position:50%
for building apps
on other devices,


14
00:00:37,738 --> 00:00:40,307 line:-1
you'll find that
there's a lot in common.


15
00:00:40,307 --> 00:00:43,877 line:-1
With RealityKit, you can
augment your app's 2D windows


16
00:00:43.877 --> 00:00:47.581 line:-1 position:50%
with 3D content, bring 3D
content front and center


17
00:00:47.581 --> 00:00:51.451 line:-1 position:50%
in a separate window, or bring
yourself and your environment


18
00:00:51.451 --> 00:00:54.187 line:-1 position:50%
into an immersive experience.


19
00:00:54.187 --> 00:00:58.058 line:-1 position:50%
RealityKit is a core 3D
framework on Apple platforms.


20
00:00:58.058 --> 00:01:02.296 line:-1 position:50%
And especially on xrOS,
it offers a lot of features.


21
00:01:02.296 --> 00:01:05.799 line:-1 position:50%
In this presentation,
I'll focus on some key features,


22
00:01:05.799 --> 00:01:09.136 line:-1 position:50%
like entities, components,
and RealityView,


23
00:01:09,136 --> 00:01:11,371 line:-1
which will introduce you
to RealityKit


24
00:01:11.371 --> 00:01:13.073 line:-1 position:50%
and show you how to use it.


25
00:01:13.073 --> 00:01:16.176 line:-1 position:50%
I'll also mention sessions
that cover other concepts


26
00:01:16.176 --> 00:01:18.445 line:-1 position:50%
or go into more detail.


27
00:01:18.445 --> 00:01:20.047 line:-1 position:50%
Let's get started.


28
00:01:20.047 --> 00:01:22.849 line:-1 position:50%
I'll use the Hello World
experience to explain


29
00:01:22,849 --> 00:01:25,085 line:-1
the concepts
in this presentation.


30
00:01:25,085 --> 00:01:27,054 line:-1
But before I get
to those concepts,


31
00:01:27,054 --> 00:01:29,222 line:-1
let me take you through
the three different modules


32
00:01:29,222 --> 00:01:32,392 line:-1
that are a part
of this experience.


33
00:01:32,392 --> 00:01:34,728 line:-1
The first module, Planet Earth,


34
00:01:34,728 --> 00:01:36,997 line:-1
presents a 3D globe
in its own window


35
00:01:36.997 --> 00:01:40.267 line:-1 position:50%
that you can interact
with from any angle.


36
00:01:40.267 --> 00:01:42.936 line:-1 position:50%
The second module,
Objects in Orbit,


37
00:01:42.936 --> 00:01:45.739 line:-1 position:50%
immerses you in a model
of the Earth, the Moon,


38
00:01:45.739 --> 00:01:48.508 line:-1 position:50%
and a satellite,
demonstrating animations,


39
00:01:48.508 --> 00:01:50.978 line:-1 position:50%
Spatial Audio,
and custom behaviors,


40
00:01:50.978 --> 00:01:53.580 line:-1 position:50%
like the trace
which follows the satellite.


41
00:01:53,580 --> 00:01:56,083 line:-1
The third module,
the Solar System,


42
00:01:56.083 --> 00:01:58.485 line:-1 position:50%
contains a fully immersive
experience,


43
00:01:58.485 --> 00:02:02.022 line:-1 position:50%
which you can learn more about
in other sessions.


44
00:02:02,022 --> 00:02:04,658 line:-1
I'm going to show you
how to build the 3D elements


45
00:02:04.658 --> 00:02:08.829 line:-1 position:50%
of this Hello World experience
using SwiftUI, RealityKit,


46
00:02:08.829 --> 00:02:11.064 line:-1 position:50%
and Reality Composer Pro.


47
00:02:11,064 --> 00:02:12,733 line:-1
Let's dive in.


48
00:02:12,733 --> 00:02:16,036 line:-1
I'll get started by talking
about how you can use RealityKit


49
00:02:16,036 --> 00:02:18,305 line:-1
together with SwiftUI
to bring your app


50
00:02:18.305 --> 00:02:20.407 line:-1 position:50%
into the next dimension.


51
00:02:20,407 --> 00:02:23,744 line:-1
Next, I'll examine the building
blocks of RealityKit,


52
00:02:23,744 --> 00:02:26,179 line:-1
entities like the Earth model
and the components


53
00:02:26,179 --> 00:02:28,849 line:-1
which implement its behaviors.


54
00:02:28.849 --> 00:02:31.151 line:-1 position:50%
You'll learn about the features
of RealityView,


55
00:02:31.151 --> 00:02:35.188 line:-1 position:50%
which is a new SwiftUI view
for 3D models and effects.


56
00:02:35,188 --> 00:02:37,824 line:-1
Then I'll explain
how you can handle input


57
00:02:37,824 --> 00:02:42,429 line:-1
and bring your app to life with
animation and Spatial Audio.


58
00:02:42.429 --> 00:02:45.065 line:-1 position:50%
Finally, I'll talk about
unlocking the potential


59
00:02:45.065 --> 00:02:49.336 line:-1 position:50%
of RealityKit with custom
components and systems.


60
00:02:49.336 --> 00:02:51.905 line:-1 position:50%
Let's begin by exploring
how RealityKit


61
00:02:51.905 --> 00:02:54.374 line:-1 position:50%
and SwiftUI work together.


62
00:02:54,374 --> 00:02:57,277 line:-1
SwiftUI is how you define
your views and windows,


63
00:02:57.277 --> 00:03:01.381 line:-1 position:50%
and RealityKit
lets you add 3D elements.


64
00:03:01,381 --> 00:03:05,185 line:-1
For example, the World app
uses SwiftUI to display


65
00:03:05.185 --> 00:03:09.089 line:-1 position:50%
a standard 2D window
with a few buttons.


66
00:03:09.089 --> 00:03:11.391 line:-1 position:50%
Tapping the Planet Earth button
on the left


67
00:03:11.391 --> 00:03:13.260 line:-1 position:50%
navigates to a detail view,


68
00:03:13,260 --> 00:03:16,596 line:-1
which shows a 2D illustration
of the Earth.


69
00:03:16,596 --> 00:03:21,201 line:-1
But what if I want to replace
that 2D image with a 3D globe?


70
00:03:21.201 --> 00:03:24.037 line:-1 position:50%
Adding 3D content
to a 2D window is easy


71
00:03:24.037 --> 00:03:27.207 line:-1 position:50%
using the model 3D view
in RealityKit.


72
00:03:27,207 --> 00:03:29,209 line:-1
Let's go over the code.


73
00:03:29.209 --> 00:03:33.980 line:-1 position:50%
Here's the SwiftUI view,
which displays that globe image.


74
00:03:33.980 --> 00:03:38.718 line:-1 position:50%
I'll change it to display a 3D
globe by importing RealityKit


75
00:03:38,718 --> 00:03:42,289 line:-1
and changing the image
to a model 3D view,


76
00:03:42.289 --> 00:03:47.260 line:-1 position:50%
referencing a USD file
in my project called Globe.


77
00:03:47,260 --> 00:03:50,630 line:-1
We can customize the loaded
model before displaying it


78
00:03:50,630 --> 00:03:52,833 line:-1
by adding two pieces of code:


79
00:03:52,833 --> 00:03:56,103 line:-1
a content closure for the model
that is returned


80
00:03:56,103 --> 00:03:59,573 line:-1
and a placeholder view builder
to specify a view


81
00:03:59.573 --> 00:04:03.210 line:-1 position:50%
that's displayed
while the model is loading.


82
00:04:03.210 --> 00:04:04.744 line:-1 position:50%
In the content closure,


83
00:04:04.744 --> 00:04:08.482 line:-1 position:50%
I'll add resizable
and scaledToFit modifiers


84
00:04:08.482 --> 00:04:11.184 line:-1 position:50%
to make sure that the model fits
into the available space


85
00:04:11.184 --> 00:04:13.286 line:-1 position:50%
in my UI.


86
00:04:13,286 --> 00:04:17,057 line:-1
And because Model 3D
loads its model asynchronously,


87
00:04:17,057 --> 00:04:19,025 line:-1
there is a placeholder
view builder,


88
00:04:19,025 --> 00:04:20,961 line:-1
which you can use
to customize the view


89
00:04:20.961 --> 00:04:23.597 line:-1 position:50%
that's displayed
during the loading process.


90
00:04:23.597 --> 00:04:26.533 line:-1 position:50%
In this case, I'm just using
the built-in ProgressView


91
00:04:26,533 --> 00:04:28,335 line:-1
to display a spinner.


92
00:04:28.335 --> 00:04:31.438 line:-1 position:50%
Finally, I need to add
the globe 3D model as a resource


93
00:04:31.438 --> 00:04:34.508 line:-1 position:50%
to the app or Swift package.


94
00:04:46.453 --> 00:04:49.523 line:-1 position:50%
And now the model appears
in line in the app


95
00:04:49.523 --> 00:04:51.892 line:-1 position:50%
with the same appearance
that it has in Quick Look


96
00:04:51.892 --> 00:04:54.628 line:-1 position:50%
or Reality Composer Pro.


97
00:04:54.628 --> 00:04:57.464 line:-1 position:50%
Placing 3D content
in a 2D window is great,


98
00:04:57.464 --> 00:05:01.101 line:-1 position:50%
but I want my 3D model
to be front and center.


99
00:05:01.101 --> 00:05:02.435 line:-1 position:50%
To accomplish that,


100
00:05:02.435 --> 00:05:05.272 line:-1 position:50%
I'm going to put the globe
in a separate window.


101
00:05:05,272 --> 00:05:07,240 line:-1
I'll add a button
to the app's detail view


102
00:05:07.240 --> 00:05:09.576 line:-1 position:50%
to open that new window.


103
00:05:09,576 --> 00:05:11,578 line:-1
And instead of
using a regular window,


104
00:05:11.578 --> 00:05:14.981 line:-1 position:50%
which displays its contents
against a 2D background,


105
00:05:14.981 --> 00:05:16.683 line:-1 position:50%
I'll use a new window style


106
00:05:16,683 --> 00:05:19,386 line:-1
which places its contents
in a volume.


107
00:05:19,386 --> 00:05:21,788 line:-1
This is called
a volumetric window,


108
00:05:21.788 --> 00:05:25.058 line:-1 position:50%
and it's great
for viewing 3D content.


109
00:05:25,058 --> 00:05:26,760 line:0
Unlike a 2D window,


110
00:05:26,760 --> 00:05:30,197 position:50%
a volumetric window is meant
to be used from any angle,


111
00:05:30,197 --> 00:05:32,699 line:0
so it's ideal for 3D models.


112
00:05:32.699 --> 00:05:35.569 line:-1 position:50%
A volumetric window
also keeps a fixed size


113
00:05:35.569 --> 00:05:37.437 line:-1 position:50%
that is true to life.


114
00:05:37,437 --> 00:05:39,439 line:-1
You can scale a model
in a volumetric window


115
00:05:39,439 --> 00:05:41,107 line:-1
to be one meter across,


116
00:05:41,107 --> 00:05:44,644 line:-1
and it will always be displayed
at exactly that size.


117
00:05:44.644 --> 00:05:48.515 line:-1 position:50%
I think that's a great fit
for the globe in Hello World.


118
00:05:48,515 --> 00:05:51,885 line:-1
Let's go through the process
of adding a volumetric window.


119
00:05:51,885 --> 00:05:55,155 line:-1
First, I'll add a window group
to my app.


120
00:05:55,155 --> 00:05:57,958 line:-1
Window groups act as a template
that an app can use


121
00:05:57,958 --> 00:06:00,126 line:-1
to open new windows.


122
00:06:00,126 --> 00:06:03,196 line:-1
I'll give the new window
an identifier to distinguish it


123
00:06:03.196 --> 00:06:05.565 line:-1 position:50%
from this app's main window.


124
00:06:05.565 --> 00:06:08.668 line:-1 position:50%
Next, I'll add a windowStyle
volumetric modifier


125
00:06:08.668 --> 00:06:10.437 line:-1 position:50%
to the window group.


126
00:06:10,437 --> 00:06:13,206 line:-1
I'll also add
a defaultSize modifier


127
00:06:13,206 --> 00:06:16,276 line:-1
to give this window
a size in meters.


128
00:06:16.276 --> 00:06:19.779 line:-1 position:50%
Finally, I'll add a button
to the detail view.


129
00:06:19,779 --> 00:06:22,949 line:-1
To make the button open
the window I've just added,


130
00:06:22,949 --> 00:06:24,884 line:-1
I'll add a property
that gives me access


131
00:06:24.884 --> 00:06:29.089 line:-1 position:50%
to the open window action
from the SwiftUI environment.


132
00:06:35.228 --> 00:06:38.331 line:-1 position:50%
Then I'll call that action
from my button.


133
00:06:42,335 --> 00:06:45,505 line:-1
Let's run this app
in the simulator.


134
00:06:45,505 --> 00:06:47,741 line:0
When I press
the View Globe button,


135
00:06:47,741 --> 00:06:51,878 line:0
a volumetric window appears.


136
00:06:51,878 --> 00:06:54,581 position:50%
Now I can interact with
the globe from multiple angles,


137
00:06:54,581 --> 00:06:56,883 position:50%
not just the front.


138
00:06:59,886 --> 00:07:02,589 line:-1
But sometimes, the key
to unlocking the experience


139
00:07:02.589 --> 00:07:05.592 line:-1 position:50%
you want to create is immersion.


140
00:07:05,592 --> 00:07:08,628 position:50%
In the Objects in Orbit module
of the World app,


141
00:07:08,628 --> 00:07:11,264 line:0
you're immersed in an animated
model of the Earth


142
00:07:11,264 --> 00:07:14,734 position:50%
and its satellites
that demonstrates their orbits.


143
00:07:14,734 --> 00:07:18,171 line:-1
This uses an immersive space,
a new scene type


144
00:07:18,171 --> 00:07:22,409 line:-1
which allows your app to place
3D elements anywhere in space.


145
00:07:22.409 --> 00:07:24.144 line:-1 position:50%
When you open
an Immersive Space,


146
00:07:24.144 --> 00:07:26.746 line:-1 position:50%
your app can go beyond
the bounds of a window


147
00:07:26,746 --> 00:07:30,283 line:-1
and provide
a magical experience.


148
00:07:30,283 --> 00:07:31,651 line:-1
Adding an Immersive Space


149
00:07:31.651 --> 00:07:34.321 line:-1 position:50%
is similar to adding
a window group.


150
00:07:34,321 --> 00:07:37,257 line:-1
It's a new scene
in the body of my app.


151
00:07:37,257 --> 00:07:39,426 line:-1
Here I'm using RealityView,


152
00:07:39.426 --> 00:07:43.263 line:-1 position:50%
which will give me more control
over the scene than Model 3D.


153
00:07:43.263 --> 00:07:46.999 line:-1 position:50%
I'll go over RealityView
in more detail in a few minutes.


154
00:07:46.999 --> 00:07:53.173 line:-1 position:50%
Like before, I'll add a button
to the app's detail view.


155
00:07:53.173 --> 00:07:57.344 line:-1 position:50%
I'll get the openImmersiveSpace
action from the environment


156
00:07:57,344 --> 00:08:01,147 line:-1
and call it with the identifier
of the scene I've defined.


157
00:08:06.052 --> 00:08:09.789 line:-1 position:50%
Note that the openImmersiveSpace
action is asynchronous.


158
00:08:09.789 --> 00:08:14.260 line:-1 position:50%
It completes once the space
has finished opening.


159
00:08:14,260 --> 00:08:16,429 line:0
When I press
the View Orbits button,


160
00:08:16,429 --> 00:08:19,966 position:50%
an Immersive Space appears.


161
00:08:19,966 --> 00:08:21,401 position:50%
This is already stunning,


162
00:08:21,401 --> 00:08:23,136 line:0
but you can make
it more engaging


163
00:08:23,136 --> 00:08:25,472 line:0
by adding interactivity,
animation,


164
00:08:25,472 --> 00:08:28,274 line:0
and audio with RealityKit.


165
00:08:28,274 --> 00:08:31,611 position:50%
Whether you're working with 2D
windows containing 3D content,


166
00:08:31,611 --> 00:08:35,281 position:50%
or volumetric windows
that emphasize your 3D models,


167
00:08:35,281 --> 00:08:37,917 line:0
I encourage you to check
out these SwiftUI sessions


168
00:08:37,917 --> 00:08:39,652 line:0
if you haven't already.


169
00:08:39,652 --> 00:08:42,822 position:50%
The "Meet SwiftUI for spatial
computing" session


170
00:08:42,822 --> 00:08:46,860 position:50%
is an overview of what's new
with SwiftUI on this platform.


171
00:08:46,860 --> 00:08:50,196 position:50%
The "Take SwiftUI to the next
dimension" session


172
00:08:50,196 --> 00:08:55,602 position:50%
demonstrates how to get the most
out of 3D content in a window.


173
00:08:55,602 --> 00:08:58,905 line:-1
There are also multiple styles
of immersion.


174
00:08:58,905 --> 00:09:01,307 line:-1
The solar system module
of Hello World


175
00:09:01.307 --> 00:09:04.978 line:-1 position:50%
uses a fully immersive space
that hides passthrough


176
00:09:04,978 --> 00:09:07,514 line:-1
and displays its own backdrop.


177
00:09:07,514 --> 00:09:10,517 line:0
The "Go beyond the window
with SwiftUI" session


178
00:09:10,517 --> 00:09:14,421 line:0
goes into detail about
all styles of Immersive Spaces.


179
00:09:14,421 --> 00:09:15,755 line:0
If you're thinking
about creating


180
00:09:15,755 --> 00:09:19,826 position:50%
an immersive experience,
I highly recommend this talk.


181
00:09:19,826 --> 00:09:22,295 line:-1
You've encountered two ways
to use RealityKit


182
00:09:22,295 --> 00:09:23,997 line:-1
in your SwiftUI views,


183
00:09:23,997 --> 00:09:28,034 line:-1
the easy-to-use Model 3D
and RealityView.


184
00:09:28.034 --> 00:09:30.804 line:-1 position:50%
RealityView is what I'll use
for the rest of this session


185
00:09:30.804 --> 00:09:33.606 line:-1 position:50%
because it allows you
to compose your 3D content


186
00:09:33.606 --> 00:09:36.142 line:-1 position:50%
using RealityKit entities.


187
00:09:36,142 --> 00:09:39,112 line:-1
So what is a RealityKit entity?


188
00:09:39,112 --> 00:09:41,281 line:-1
An entity is a container object.


189
00:09:41,281 --> 00:09:43,516 line:-1
If you create
an empty entity from code,


190
00:09:43,516 --> 00:09:44,884 line:-1
it won't do anything.


191
00:09:44.884 --> 00:09:47.454 line:-1 position:50%
To make an entity render
or give a behavior,


192
00:09:47.454 --> 00:09:49.856 line:-1 position:50%
it must have components.


193
00:09:49,856 --> 00:09:54,627 line:-1
Each component enables some
specific behavior for an entity.


194
00:09:54.627 --> 00:09:57.030 line:-1 position:50%
Here are some examples.


195
00:09:57.030 --> 00:10:01.234 line:-1 position:50%
The Earth entity in this app is
implemented with two components:


196
00:10:01,234 --> 00:10:04,904 line:-1
a model component, which gives
the entity a mesh and materials,


197
00:10:04.904 --> 00:10:06.539 line:-1 position:50%
and a transform component,


198
00:10:06,539 --> 00:10:09,943 line:-1
which places
the entity in 3D space.


199
00:10:09,943 --> 00:10:13,546 line:-1
The same is true
of the satellite entity.


200
00:10:13.546 --> 00:10:15.515 line:-1 position:50%
The model component
renders a mesh


201
00:10:15,515 --> 00:10:18,184 line:-1
and applies materials to it.


202
00:10:18.184 --> 00:10:19.953 line:-1 position:50%
These Earth and satellite models


203
00:10:19,953 --> 00:10:22,889 line:-1
were created in a digital
content creation tool,


204
00:10:22,889 --> 00:10:27,760 line:-1
exported to a USDZ file,
and loaded into RealityKit.


205
00:10:27,760 --> 00:10:30,063 line:-1
These meshes have
a physically-based material


206
00:10:30,063 --> 00:10:33,700 line:-1
applied to them to give them
their final appearance.


207
00:10:33,700 --> 00:10:37,203 line:-1
A material uses a set
of textures and shaders


208
00:10:37,203 --> 00:10:41,441 line:-1
to describe how the surface
of a mesh responds to light.


209
00:10:41,441 --> 00:10:42,976 position:50%
To learn more about materials,


210
00:10:42,976 --> 00:10:45,445 line:0
I recommend watching
Niels' session,


211
00:10:45,445 --> 00:10:49,148 line:0
"Explore materials
in Reality Composer Pro."


212
00:10:49.148 --> 00:10:50.717 line:-1 position:50%
In addition to a model,


213
00:10:50.717 --> 00:10:53.486 line:-1 position:50%
these entities have
a transform component.


214
00:10:53.486 --> 00:10:57.690 line:-1 position:50%
The transform component
places an entity in 3D space.


215
00:10:57.690 --> 00:11:00.727 line:-1 position:50%
You can control an entity's
position, orientation,


216
00:11:00.727 --> 00:11:04.898 line:-1 position:50%
and scale by setting properties
on its transform component,


217
00:11:04,898 --> 00:11:08,067 line:-1
as well as by setting
the entity's parent.


218
00:11:08.067 --> 00:11:12.906 line:-1 position:50%
RealityKit uses the same 3D
coordinate conventions as ARKit


219
00:11:12,906 --> 00:11:15,208 line:-1
and many other 3D engines.


220
00:11:15.208 --> 00:11:18.244 line:-1 position:50%
The origin is at the center
of the RealityView.


221
00:11:18.244 --> 00:11:22.549 line:-1 position:50%
The y-axis points upward,
the z-axis points towards you,


222
00:11:22,549 --> 00:11:25,485 line:-1
and the x-axis
points to your right.


223
00:11:25.485 --> 00:11:28.488 line:-1 position:50%
One unit is one meter.


224
00:11:28,488 --> 00:11:30,857 position:50%
Note that these conventions
are different


225
00:11:30,857 --> 00:11:33,059 position:50%
from SwiftUI's conventions.


226
00:11:33,059 --> 00:11:36,329 position:50%
There are functions on
RealityView's content instance


227
00:11:36,329 --> 00:11:38,665 line:0
that make it easy
to convert back and forth


228
00:11:38,665 --> 00:11:42,669 line:0
between the RealityKit
and SwiftUI coordinate spaces.


229
00:11:42,669 --> 00:11:44,804 line:-1
Every entity has a transform,


230
00:11:44.804 --> 00:11:47.307 line:-1 position:50%
but not every entity
has a model.


231
00:11:47.307 --> 00:11:51.544 line:-1 position:50%
Sometimes an entity is assembled
out of multiple child entities,


232
00:11:51.544 --> 00:11:54.047 line:-1 position:50%
each with their own set
of components.


233
00:11:54,047 --> 00:11:56,349 line:-1
This gives you more
programmatic control.


234
00:11:56,349 --> 00:11:59,519 line:-1
For example, you could play
individual animations


235
00:11:59.519 --> 00:12:03.089 line:-1 position:50%
on the transforms
of child entities.


236
00:12:03.089 --> 00:12:05.358 line:-1 position:50%
RealityKit contains
a variety of components


237
00:12:05,358 --> 00:12:07,594 line:-1
depending on what
you want to do.


238
00:12:07.594 --> 00:12:10.563 line:-1 position:50%
I'll talk about some
specific components today,


239
00:12:10,563 --> 00:12:13,132 line:-1
collision, input target,
and hover effect


240
00:12:13.132 --> 00:12:14.834 line:-1 position:50%
just to name a few.


241
00:12:14,834 --> 00:12:19,138 line:-1
I'll also demonstrate how
to create your own components.


242
00:12:19.138 --> 00:12:20.873 line:-1 position:50%
Now that we've got a sense
of how entities


243
00:12:20,873 --> 00:12:23,977 line:-1
and components work,
let's use RealityView


244
00:12:23.977 --> 00:12:27.146 line:-1 position:50%
to place those entities
in your app.


245
00:12:27,146 --> 00:12:29,082 line:-1
RealityView is a SwiftUI view


246
00:12:29.082 --> 00:12:31.551 line:-1 position:50%
that contains
any number of entities.


247
00:12:31.551 --> 00:12:34.020 line:-1 position:50%
Entities need to be
added to a RealityView


248
00:12:34.020 --> 00:12:37.590 line:-1 position:50%
in order to be rendered,
animated, and simulated.


249
00:12:37.590 --> 00:12:40.793 line:-1 position:50%
So, how does a RealityView work?


250
00:12:40.793 --> 00:12:43.563 line:-1 position:50%
RealityView provides
a content instance


251
00:12:43,563 --> 00:12:46,399 line:-1
which lets you add entities
to the view.


252
00:12:46.399 --> 00:12:48.001 line:-1 position:50%
This is an easy way
to get started


253
00:12:48.001 --> 00:12:49.836 line:-1 position:50%
if you have already
loaded an entity


254
00:12:49.836 --> 00:12:53.439 line:-1 position:50%
or if you want to create
an entity programmatically.


255
00:12:53,439 --> 00:12:55,808 line:-1
But this closure
is asynchronous,


256
00:12:55.808 --> 00:12:58.177 line:-1 position:50%
so it's simple to load
an entity from a file


257
00:12:58.177 --> 00:13:00.613 line:-1 position:50%
and display it in your view.


258
00:13:00,613 --> 00:13:04,751 line:-1
Here I asynchronously load
an Earth model from a USD file


259
00:13:04,751 --> 00:13:06,986 line:-1
and add it
to the content instance


260
00:13:06.986 --> 00:13:10.056 line:-1 position:50%
once the load has completed.


261
00:13:10.056 --> 00:13:12.291 line:-1 position:50%
You can also load
more than one model


262
00:13:12.291 --> 00:13:15.128 line:-1 position:50%
and place both of them
in your RealityView.


263
00:13:15,128 --> 00:13:17,330 line:-1
Instead of being laid out
next to each other,


264
00:13:17,330 --> 00:13:20,166 line:-1
these models will
coincide in space.


265
00:13:20.166 --> 00:13:21.601 line:-1 position:50%
If that's not what you want,


266
00:13:21,601 --> 00:13:24,971 line:-1
you can change the position of
the entities added to the view.


267
00:13:24,971 --> 00:13:27,540 line:-1
This example positions
the moon entity


268
00:13:27,540 --> 00:13:30,043 line:-1
half a meter to the right.


269
00:13:30,043 --> 00:13:32,011 line:-1
Once you've set up
your RealityView,


270
00:13:32.011 --> 00:13:35.348 line:-1 position:50%
you may want to connect state
in your app to properties


271
00:13:35,348 --> 00:13:38,284 line:-1
stored on
RealityKit components.


272
00:13:38,284 --> 00:13:40,687 line:-1
RealityView lets you express
the connections


273
00:13:40.687 --> 00:13:43.856 line:-1 position:50%
between SwiftUI managed state
and the entities


274
00:13:43.856 --> 00:13:47.126 line:-1 position:50%
in a RealityView
with an update closure.


275
00:13:47,126 --> 00:13:50,430 line:-1
This makes it easy to drive
the behavior of 3D models


276
00:13:50,430 --> 00:13:54,100 line:-1
with a source of truth
from your app's data model.


277
00:13:54.100 --> 00:13:57.737 line:-1 position:50%
This view loads a model
and applies a rotation


278
00:13:57,737 --> 00:14:00,873 line:-1
controlled by whoever
uses the view.


279
00:14:00.873 --> 00:14:04.310 line:-1 position:50%
Note that the code
in the update section only runs


280
00:14:04,310 --> 00:14:07,880 line:-1
when the values
that it depends on change.


281
00:14:07.880 --> 00:14:10.616 line:-1 position:50%
If you're building a UI
with a combination of 2D


282
00:14:10.616 --> 00:14:13.586 line:-1 position:50%
and 3D elements,
you'll sometimes need to convert


283
00:14:13.586 --> 00:14:16.622 line:-1 position:50%
coordinates between
views and entities.


284
00:14:16.622 --> 00:14:19.459 line:-1 position:50%
RealityView provides coordinate
conversion functions


285
00:14:19,459 --> 00:14:22,061 line:-1
between SwiftUI
view coordinate spaces


286
00:14:22,061 --> 00:14:25,398 line:-1
and RealityKit entity
coordinate spaces.


287
00:14:25,398 --> 00:14:28,067 line:-1
The RealityView's
content instance


288
00:14:28.067 --> 00:14:31.370 line:-1 position:50%
provides a convert function
that converts points,


289
00:14:31.370 --> 00:14:35.408 line:-1 position:50%
bounding boxes, and transforms
from a SwiftUI coordinate space


290
00:14:35,408 --> 00:14:39,479 line:-1
to an entity's local space
or vice versa.


291
00:14:39,479 --> 00:14:43,950 line:-1
Here, I get the minimum length
of any of the view's dimensions


292
00:14:43,950 --> 00:14:48,721 line:-1
and scale the loaded entity
to fit in the available space.


293
00:14:48.721 --> 00:14:51.190 line:-1 position:50%
RealityView also provides
a mechanism


294
00:14:51.190 --> 00:14:53.926 line:-1 position:50%
for subscribing to events
published by entities


295
00:14:53.926 --> 00:14:56.229 line:-1 position:50%
and components.


296
00:14:56.229 --> 00:14:58.664 line:-1 position:50%
In this example,
I play an animation


297
00:14:58.664 --> 00:15:02.869 line:-1 position:50%
authored in the loaded USD file
after the load completes.


298
00:15:02.869 --> 00:15:06.405 line:-1 position:50%
The content instance
has a subscribe to: function,


299
00:15:06,405 --> 00:15:08,708 line:-1
which adds an event handler.


300
00:15:08,708 --> 00:15:12,845 line:-1
This example runs some code
when an animation completes.


301
00:15:12.845 --> 00:15:14.580 line:-1 position:50%
There are RealityKit
events published


302
00:15:14,580 --> 00:15:19,285 line:-1
for all kinds of things, from
animation to physics to audio.


303
00:15:19.285 --> 00:15:23.256 line:-1 position:50%
You can also attach
SwiftUI views to entities.


304
00:15:23,256 --> 00:15:26,192 line:-1
The attachments feature
of RealityView makes it easy


305
00:15:26.192 --> 00:15:29.796 line:-1 position:50%
to position views in 3D space.


306
00:15:29,796 --> 00:15:31,330 line:0
Check out Yujin’s session,


307
00:15:31,330 --> 00:15:34,367 position:50%
"Enhance your spatial
computing app with RealityKit,"


308
00:15:34,367 --> 00:15:36,969 line:0
to learn more.


309
00:15:36,969 --> 00:15:39,305 line:-1
There's a lot you can do
with RealityView.


310
00:15:39,305 --> 00:15:41,574 line:-1
But let's get back
to our celestial bodies


311
00:15:41,574 --> 00:15:43,342 line:-1
and bring them to life.


312
00:15:43.342 --> 00:15:46.345 line:-1 position:50%
First, I'll show you how to add
a drag gesture


313
00:15:46,345 --> 00:15:49,282 line:-1
so that you can reposition
the Earth entity.


314
00:15:49,282 --> 00:15:52,985 line:-1
And then I'll explain animations
and Spatial Audio.


315
00:15:52,985 --> 00:15:56,756 line:-1
Here's an example RealityView
containing three entities.


316
00:15:56.756 --> 00:15:58.858 line:-1 position:50%
You can add a gesture
to a RealityView,


317
00:15:58,858 --> 00:16:00,860 line:-1
like any other SwiftUI view,


318
00:16:00,860 --> 00:16:04,630 line:-1
and it will hit test against
entities in that view.


319
00:16:04.630 --> 00:16:07.300 line:-1 position:50%
To receive input,
the entity must have both


320
00:16:07.300 --> 00:16:10.903 line:-1 position:50%
an input target component
and a collision component.


321
00:16:10,903 --> 00:16:13,806 line:-1
When a touch event is handled
by RealityView,


322
00:16:13,806 --> 00:16:17,143 line:-1
it will ignore any entities
that don't have both collision


323
00:16:17,143 --> 00:16:19,245 line:-1
and an input target.


324
00:16:19,245 --> 00:16:21,814 line:-1
Only this last entity
has both components,


325
00:16:21.814 --> 00:16:24.183 line:-1 position:50%
so gestures added
to this RealityView


326
00:16:24.183 --> 00:16:29.222 line:-1 position:50%
will only react to input
directed at this entity.


327
00:16:29.222 --> 00:16:31.424 line:-1 position:50%
To make the Earth
entity draggable,


328
00:16:31.424 --> 00:16:33.426 line:-1 position:50%
I'll give it an input target
component


329
00:16:33.426 --> 00:16:36.429 line:-1 position:50%
and a collision component,
and add a drag gesture


330
00:16:36.429 --> 00:16:38.598 line:-1 position:50%
to the RealityView.


331
00:16:38,598 --> 00:16:43,069 line:-1
To add the components,
I'll use Reality Composer Pro.


332
00:16:43.069 --> 00:16:45.838 line:-1 position:50%
Reality Composer Pro
is a new developer tool


333
00:16:45.838 --> 00:16:49.909 line:-1 position:50%
that lets you compose, edit,
and preview 3D content.


334
00:16:49.909 --> 00:16:53.746 line:-1 position:50%
I'll just use it to add
a few components to an entity.


335
00:16:53,746 --> 00:16:56,916 line:0
To learn more about what you can
do with Reality Composer Pro,


336
00:16:56,916 --> 00:17:01,287 line:0
check out Eric's session,
"Meet Reality Composer Pro."


337
00:17:01,287 --> 00:17:05,691 line:-1
The World app already has
a World Assets package set up


338
00:17:05.691 --> 00:17:09.295 line:-1 position:50%
containing the USD files
that this experience uses.


339
00:17:09,295 --> 00:17:12,965 line:-1
I'll open that package
in Reality Composer Pro.


340
00:17:20,973 --> 00:17:23,976 line:-1
The Earth model
is in a USDZ archive,


341
00:17:23.976 --> 00:17:27.680 line:-1 position:50%
which is self-contained
and not meant to be modified.


342
00:17:27,680 --> 00:17:31,984 line:-1
Instead of modifying that asset,
I'll create a new USD scene file


343
00:17:31.984 --> 00:17:34.887 line:-1 position:50%
and reference
the Earth asset.


344
00:17:34.887 --> 00:17:39.425 line:-1 position:50%
USD files can reference other
USDs and modify them in place


345
00:17:39,425 --> 00:17:42,528 line:-1
without actually changing
the referenced file.


346
00:17:42,528 --> 00:17:44,864 line:-1
Nondestructive editing like this
is really handy


347
00:17:44.864 --> 00:17:47.300 line:-1 position:50%
when you need to make small
changes to a USD file


348
00:17:47,300 --> 00:17:50,503 line:-1
that someone else is working on.


349
00:17:50,503 --> 00:17:54,106 line:-1
I'll create a new scene
named DraggableGlobe


350
00:17:54.106 --> 00:17:57.343 line:-1 position:50%
and drag in the globe file
to create a reference to it.


351
00:18:02,315 --> 00:18:04,850 line:-1
Now I can add components to it.


352
00:18:04,850 --> 00:18:06,852 line:-1
I'll add an input
target component


353
00:18:06.852 --> 00:18:11.991 line:-1 position:50%
and also a collision component.


354
00:18:11.991 --> 00:18:14.493 line:-1 position:50%
The default shape
for the collision component


355
00:18:14.493 --> 00:18:15.962 line:-1 position:50%
is a cube.


356
00:18:15.962 --> 00:18:21.500 line:-1 position:50%
I'll change it to a sphere
so it better matches the model.


357
00:18:21,500 --> 00:18:23,602 position:50%
It's important for
the collision shape to be


358
00:18:23,602 --> 00:18:26,505 line:0
a reasonable approximation
of the visual model.


359
00:18:26,505 --> 00:18:27,673 position:50%
The closer the match,


360
00:18:27,673 --> 00:18:31,410 position:50%
the more intuitive interactions
with the model will be.


361
00:18:31.410 --> 00:18:34.513 line:-1 position:50%
I want to be able to move
the Earth model around,


362
00:18:34.513 --> 00:18:37.550 line:-1 position:50%
so I'll add a drag gesture
to the RealityView.


363
00:18:37.550 --> 00:18:40.286 line:-1 position:50%
A standard SwiftUI
drag gesture will work,


364
00:18:40.286 --> 00:18:43.923 line:-1 position:50%
but I can enable the gesture
to manipulate specific entities


365
00:18:43.923 --> 00:18:45.758 line:-1 position:50%
rather than the entire view


366
00:18:45.758 --> 00:18:50.629 line:-1 position:50%
by adding a targetedToEntity
modifier on the gesture.


367
00:18:50.629 --> 00:18:52.264 line:-1 position:50%
When the gesture's value
changes,


368
00:18:52,264 --> 00:18:55,001 line:-1
I'll change the entity's
position to match.


369
00:18:55,001 --> 00:18:56,969 line:-1
There's one
critical detail though.


370
00:18:56.969 --> 00:19:00.773 line:-1 position:50%
The gesture's value is in
SwiftUI's coordinate space,


371
00:19:00,773 --> 00:19:03,809 line:-1
so I have to convert it to
RealityKit's coordinate space


372
00:19:03.809 --> 00:19:06.812 line:-1 position:50%
in order to change
the entity's position.


373
00:19:06,812 --> 00:19:08,781 line:-1
All the pieces are now in place.


374
00:19:08,781 --> 00:19:11,150 line:-1
So in the Objects in Orbit
module,


375
00:19:11.150 --> 00:19:15.187 line:-1 position:50%
I can now pinch and drag
to move the Earth around.


376
00:19:15,187 --> 00:19:18,124 line:-1
Great, our app
is now interactive.


377
00:19:18.124 --> 00:19:19.725 line:-1 position:50%
But I'd like my Earth entity


378
00:19:19.725 --> 00:19:22.061 line:-1 position:50%
to indicate
that it's interactive.


379
00:19:22.061 --> 00:19:25.197 line:-1 position:50%
There's a RealityKit component
we can use for this,


380
00:19:25,197 --> 00:19:27,700 line:-1
the HoverEffectComponent.


381
00:19:27.700 --> 00:19:30.636 line:-1 position:50%
Hover effects provided
by SwiftUI and RealityKit


382
00:19:30.636 --> 00:19:33.005 line:-1 position:50%
are the only way
to make your app react


383
00:19:33,005 --> 00:19:34,840 line:-1
to where you're looking.


384
00:19:34,840 --> 00:19:38,511 line:-1
This effect is applied outside
of your app's process


385
00:19:38,511 --> 00:19:41,213 line:-1
in a privacy-preserving manner.


386
00:19:41.213 --> 00:19:43.983 line:-1 position:50%
I'll add a hover effect
component to the Earth entity


387
00:19:43.983 --> 00:19:46.819 line:-1 position:50%
when it's added
to the RealityView.


388
00:19:46,819 --> 00:19:50,656 position:50%
Now, the Earth model lights up
when the pointer is over it


389
00:19:50,656 --> 00:19:54,193 position:50%
to indicate that I am able
to interact with it.


390
00:19:54.193 --> 00:19:56.729 line:-1 position:50%
Next, let's move on
to animations.


391
00:19:56,729 --> 00:19:59,965 line:-1
RealityKit has a number
of built-in animation types,


392
00:19:59,965 --> 00:20:02,268 line:-1
such as from-to-by animations,


393
00:20:02.268 --> 00:20:06.338 line:-1 position:50%
which animate a property from an
initial value to a final value,


394
00:20:06.338 --> 00:20:08.941 line:-1 position:50%
orbit animations that cause
an entity to revolve


395
00:20:08,941 --> 00:20:12,878 line:-1
around its parent,
and time-sampled animations


396
00:20:12,878 --> 00:20:16,949 line:-1
that progress frame by frame
through a series of values.


397
00:20:16,949 --> 00:20:20,252 line:-1
I'll set up an orbit animation
on the Moon.


398
00:20:20,252 --> 00:20:23,622 line:-1
The Moon will take 30 seconds
to complete a full orbit


399
00:20:23.622 --> 00:20:27.359 line:-1 position:50%
and the orbital axis
will be the y-axis.


400
00:20:27,359 --> 00:20:29,562 line:-1
And I'll make sure
that the orbit starts


401
00:20:29,562 --> 00:20:32,465 line:-1
from the Moon's
current position.


402
00:20:32.465 --> 00:20:35.935 line:-1 position:50%
Once I've defined the properties
of this orbit animation,


403
00:20:35,935 --> 00:20:38,270 line:-1
I'll generate
an animation resource for it


404
00:20:38,270 --> 00:20:42,575 line:-1
and play that animation
on the Moon entity.


405
00:20:42,575 --> 00:20:46,212 line:0
And now the Moon orbits
the Earth.


406
00:20:46,212 --> 00:20:48,380 position:50%
To me,
this is the magical moment.


407
00:20:48,380 --> 00:20:51,851 line:0
With an animation in place,
the scene feels alive.


408
00:20:51,851 --> 00:20:55,554 position:50%
But while animation helps bring
your 3D content to life,


409
00:20:55,554 --> 00:21:00,292 line:0
Spatial Audio makes your model
feel like it's really there.


410
00:21:00,292 --> 00:21:02,962 line:-1
There are three types
of audio in RealityKit:


411
00:21:02,962 --> 00:21:05,831 line:-1
spatial, ambient, and channel.


412
00:21:05.831 --> 00:21:08.734 line:-1 position:50%
Let's look at each one of them
in more detail.


413
00:21:08.734 --> 00:21:11.437 line:-1 position:50%
RealityKit sounds are spatial
by default,


414
00:21:11.437 --> 00:21:13.739 line:-1 position:50%
so audio sources sound
like they actually exist


415
00:21:13.739 --> 00:21:16.008 line:-1 position:50%
in your surroundings.


416
00:21:16.008 --> 00:21:19.812 line:-1 position:50%
Spatial Audio Component lets you
customize how your objects


417
00:21:19,812 --> 00:21:23,816 line:-1
emit sound into your space to
make them even more realistic


418
00:21:23.816 --> 00:21:26.485 line:-1 position:50%
or more artistic.


419
00:21:26.485 --> 00:21:29.922 line:-1 position:50%
Use directivity to emit sounds
in all directions


420
00:21:29.922 --> 00:21:34.160 line:-1 position:50%
or project sound
in a specific direction.


421
00:21:34.160 --> 00:21:37.530 line:-1 position:50%
Ambient Audio Component
is great for multichannel files,


422
00:21:37,530 --> 00:21:40,099 line:-1
which capture the sound
of an environment.


423
00:21:40.099 --> 00:21:43.602 line:-1 position:50%
No additional reverb
is added to ambient sources.


424
00:21:43,602 --> 00:21:49,041 line:-1
Each channel of the ambience is
played from a fixed direction.


425
00:21:49.041 --> 00:21:51.410 line:-1 position:50%
And finally,
Channel Audio Component


426
00:21:51,410 --> 00:21:54,380 line:-1
sends the audio files channels
directly to the speakers


427
00:21:54.380 --> 00:21:56.715 line:-1 position:50%
without any spatial effects.


428
00:21:56.715 --> 00:21:58.384 line:-1 position:50%
This is ideal
for background music


429
00:21:58,384 --> 00:22:01,720 line:-1
which is not connected
to any visual element.


430
00:22:01.720 --> 00:22:04.990 line:-1 position:50%
You can add audio to your scene
in Reality Composer Pro


431
00:22:04.990 --> 00:22:07.459 line:-1 position:50%
and interface
with it using RealityKit.


432
00:22:07.459 --> 00:22:10.196 line:-1 position:50%
Or you can hook up audio
in code.


433
00:22:10,196 --> 00:22:11,997 line:-1
Let's take a look.


434
00:22:11,997 --> 00:22:16,068 line:-1
I'll add a bit of looping audio
to an orbiting satellite.


435
00:22:16.068 --> 00:22:19.638 line:-1 position:50%
First, I'll add a Spatial Audio
Component to an empty entity


436
00:22:19.638 --> 00:22:22.041 line:-1 position:50%
that will act as
the audio source.


437
00:22:22.041 --> 00:22:26.045 line:-1 position:50%
A directivity of 0.75 creates
a tight beam of sound


438
00:22:26.045 --> 00:22:28.314 line:-1 position:50%
in a particular direction.


439
00:22:28,314 --> 00:22:32,418 line:-1
I'll rotate that audio source
entity around its y-axis


440
00:22:32.418 --> 00:22:36.488 line:-1 position:50%
so that the audio is projected
in the direction I want.


441
00:22:36.488 --> 00:22:39.925 line:-1 position:50%
I'll then load a looping
audio clip from a resource


442
00:22:39,925 --> 00:22:44,897 line:-1
and play it on the audioSource
entity by calling playAudio.


443
00:22:44.897 --> 00:22:46.398 line:-1 position:50%
Let's see this in action.


444
00:22:46,398 --> 00:22:48,968 line:-1
[DISTANT BEEPING]


445
00:22:48.968 --> 00:22:51.203 line:-1 position:50%
Since the Spatial Audio source
is configured


446
00:22:51,203 --> 00:22:53,205 line:-1
with a tightly
focused directivity,


447
00:22:53.205 --> 00:22:55.908 line:-1 position:50%
the audio can be heard
clearly on my side of the Earth,


448
00:22:55,908 --> 00:23:00,412 line:-1
but it is quieter when the
satellite is on the other side.


449
00:23:00.412 --> 00:23:04.383 line:-1 position:50%
That was input, animation,
and audio.


450
00:23:04.383 --> 00:23:07.920 line:-1 position:50%
You can build more functionality
in RealityKit by combining


451
00:23:07.920 --> 00:23:11.056 line:-1 position:50%
its existing functionality
in different ways.


452
00:23:11,056 --> 00:23:14,426 line:-1
There are two primary tools
you can use for this purpose,


453
00:23:14.426 --> 00:23:18.564 line:-1 position:50%
defining your own components
and defining your own systems.


454
00:23:18.564 --> 00:23:21.834 line:-1 position:50%
A component contains the data
controlling one aspect


455
00:23:21,834 --> 00:23:24,069 line:-1
of a 3D experience.


456
00:23:24.069 --> 00:23:26.672 line:-1 position:50%
Components are grouped
into entities.


457
00:23:26.672 --> 00:23:29.174 line:-1 position:50%
Without components,
an entity does nothing.


458
00:23:29.174 --> 00:23:31.510 line:-1 position:50%
Each component supplies
a single element


459
00:23:31.510 --> 00:23:33.812 line:-1 position:50%
of an entity's implementation.


460
00:23:33,812 --> 00:23:35,648 line:-1
You've learned that
a transform component


461
00:23:35,648 --> 00:23:38,450 line:-1
positions an entity
and that a model component


462
00:23:38.450 --> 00:23:40.352 line:-1 position:50%
renders a 3D model.


463
00:23:40,352 --> 00:23:42,788 line:-1
In addition to the
predefined components


464
00:23:42,788 --> 00:23:44,323 line:-1
that RealityKit provides,


465
00:23:44,323 --> 00:23:46,725 line:-1
you can define
your own components.


466
00:23:46.725 --> 00:23:48.961 line:-1 position:50%
Here's an example custom
component


467
00:23:48,961 --> 00:23:51,096 line:-1
that contains a traceMesh object


468
00:23:51,096 --> 00:23:53,732 line:-1
that my coworker
Paul has created.


469
00:23:53.732 --> 00:23:55.734 line:-1 position:50%
The trace component type


470
00:23:55.734 --> 00:23:58.070 line:-1 position:50%
conforms to the component
protocol,


471
00:23:58,070 --> 00:24:00,139 line:-1
so you can get
and set this component


472
00:24:00,139 --> 00:24:03,008 line:-1
on any entity at runtime.


473
00:24:03,008 --> 00:24:05,544 line:-1
You can also adopt
a data-driven workflow


474
00:24:05,544 --> 00:24:08,514 line:-1
by defining a component
in a Swift package


475
00:24:08.514 --> 00:24:12.051 line:-1 position:50%
and conforming it
to the Codable protocol.


476
00:24:12,051 --> 00:24:13,986 line:-1
Codable components will appear


477
00:24:13.986 --> 00:24:16.722 line:-1 position:50%
in the Reality Composer Pro
interface


478
00:24:16.722 --> 00:24:20.926 line:-1 position:50%
and can be directly added
to entities at design time.


479
00:24:20,926 --> 00:24:24,196 position:50%
You can learn more about
custom components in the talk


480
00:24:24,196 --> 00:24:28,133 position:50%
"Work with Reality Composer
Pro content in Xcode."


481
00:24:28.133 --> 00:24:31.070 line:-1 position:50%
I already went through
entities earlier in this talk,


482
00:24:31.070 --> 00:24:32.971 line:-1 position:50%
and I just covered components.


483
00:24:32,971 --> 00:24:35,908 line:-1
Next, let's talk about systems.


484
00:24:35.908 --> 00:24:40.746 line:-1 position:50%
Systems contain code that act
on entities and components.


485
00:24:40,746 --> 00:24:45,751 position:50%
Taken together, entities,
components, and systems, or ECS,


486
00:24:45,751 --> 00:24:48,187 position:50%
are a tool for modeling
the appearance


487
00:24:48,187 --> 00:24:51,757 position:50%
and behavior
of your 3D experience.


488
00:24:51.757 --> 00:24:53.792 line:-1 position:50%
Systems are a way
to structure the code


489
00:24:53,792 --> 00:24:56,395 line:-1
that implement
your app's behaviors.


490
00:24:56,395 --> 00:24:59,331 line:-1
Code in a system
runs at a regular interval,


491
00:24:59,331 --> 00:25:02,768 line:-1
acting upon your component's
current state.


492
00:25:02.768 --> 00:25:06.939 line:-1 position:50%
For example, this
TraceSystem updates a line mesh


493
00:25:06,939 --> 00:25:09,108 line:-1
that's traced behind
the satellite entity


494
00:25:09.108 --> 00:25:10.943 line:-1 position:50%
as it orbits the earth.


495
00:25:10,943 --> 00:25:13,812 line:-1
Each update, it adds
the entity's current position


496
00:25:13,812 --> 00:25:15,547 line:-1
to the trace.


497
00:25:15.547 --> 00:25:17.182 line:-1 position:50%
Once a system is registered,


498
00:25:17.182 --> 00:25:19.885 line:-1 position:50%
it automatically applies
everywhere in your app


499
00:25:19,885 --> 00:25:22,121 line:-1
that you use RealityKit.


500
00:25:22.121 --> 00:25:25.958 line:-1 position:50%
Registering the trace system
in my app's initializer


501
00:25:25.958 --> 00:25:29.461 line:-1 position:50%
causes it to update
for all relevant entities.


502
00:25:29.461 --> 00:25:34.333 line:-1 position:50%
But what entities are relevant,
and when does the system update?


503
00:25:34.333 --> 00:25:38.437 line:-1 position:50%
This system only wants to update
entities with a trace component,


504
00:25:38.437 --> 00:25:42.441 line:-1 position:50%
so I create an entity query
that filters to entities


505
00:25:42,441 --> 00:25:44,843 line:-1
which have a trace component.


506
00:25:44,843 --> 00:25:47,045 line:-1
In the update function,
the system passes in


507
00:25:47.045 --> 00:25:49.915 line:-1 position:50%
the entity query
and also specifies


508
00:25:49.915 --> 00:25:53.152 line:-1 position:50%
that it wants to update entities
when rendering.


509
00:25:53.152 --> 00:25:56.388 line:-1 position:50%
The rendering condition means
that this system will update


510
00:25:56,388 --> 00:26:00,392 line:-1
at an appropriate rate
for smooth animations.


511
00:26:00.392 --> 00:26:02.761 line:-1 position:50%
Here's the trace system
in action,


512
00:26:02.761 --> 00:26:05.564 line:-1 position:50%
adding the entity's position
to the line mesh


513
00:26:05.564 --> 00:26:09.468 line:-1 position:50%
in order to produce
a fluid custom animation.


514
00:26:09.468 --> 00:26:11.937 line:-1 position:50%
Systems are a really effective
way to implement


515
00:26:11.937 --> 00:26:15.140 line:-1 position:50%
a variety of effects
and behaviors.


516
00:26:15.140 --> 00:26:17.709 line:-1 position:50%
RealityKit has a lot of features
that make it easy


517
00:26:17,709 --> 00:26:19,778 line:-1
to build 3D apps.


518
00:26:19.778 --> 00:26:23.549 line:-1 position:50%
You can use RealityKit and
RealityView to add 3D elements


519
00:26:23,549 --> 00:26:28,153 line:-1
to views, windows, and immersive
spaces defined with SwiftUI.


520
00:26:28,153 --> 00:26:32,524 line:-1
You can load USD files, handle
gestures, and play animation


521
00:26:32.524 --> 00:26:35.861 line:-1 position:50%
and Spatial Audio,
all using RealityKit.


522
00:26:35.861 --> 00:26:38.697 line:-1 position:50%
RealityKit provides many
predefined components,


523
00:26:38.697 --> 00:26:41.700 line:-1 position:50%
but you can also define custom
components and systems


524
00:26:41,700 --> 00:26:45,003 line:-1
for your app's specific needs.


525
00:26:45.003 --> 00:26:47.339 line:-1 position:50%
With that, I've covered
the concepts you need


526
00:26:47,339 --> 00:26:50,209 line:-1
to get started with RealityKit.


527
00:26:50,209 --> 00:26:51,243 line:0
Yujin’s session,


528
00:26:51,243 --> 00:26:53,979 position:50%
"Enhance Your spatial computing
app with RealityKit"


529
00:26:53,979 --> 00:26:56,582 position:50%
will take you through
more features of RealityKit,


530
00:26:56,582 --> 00:27:00,752 line:0
like portals, particle emitters,
attachments, and more.


531
00:27:00,752 --> 00:27:02,054 position:50%
And Amanda's session


532
00:27:02,054 --> 00:27:05,491 position:50%
"Work with Reality Composer Pro
content in Xcode"


533
00:27:05,491 --> 00:27:08,293 position:50%
takes you through the process
of building an immersive app


534
00:27:08,293 --> 00:27:11,029 position:50%
using Reality Composer Pro,
RealityKit,


535
00:27:11,029 --> 00:27:14,466 position:50%
Xcode previews,
and the simulator.


536
00:27:14,466 --> 00:27:16,869 line:-1
There are a lot of exciting
features in RealityKit


537
00:27:16,869 --> 00:27:18,370 line:-1
that you can use in your app.


538
00:27:18.370 --> 00:27:21.006 line:-1 position:50%
I'm really excited to see
the wonderful experiences


539
00:27:21,006 --> 00:27:23,141 line:-1
you'll create.


540
00:27:23,141 --> 00:27:24,776 line:-1
Thanks for watching.


541
00:27:24,776 --> 00:27:28,113 align:right size:2% line:0
♪

