2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.010 --> 00:00:13.180 line:-2
Jared: Hello, and welcome
to "What's new in Background Assets."


4
00:00:13.213 --> 00:00:16.216 line:-2
My name is Jared,
and I'm a software engineer here at Apple.


5
00:00:16.250 --> 00:00:17.918 line:-2
I'm really looking forward
to sharing with you


6
00:00:17.951 --> 00:00:20.988 line:-2
everything that's new this year
with Background Assets.


7
00:00:21.021 --> 00:00:23.757 line:-3
Now, our team has changed a few things
over the last year.


8
00:00:23.790 --> 00:00:25.993 line:-3
However, I'd encourage you to check out
my prior session


9
00:00:26.026 --> 00:00:27.928 line:-2
where Background Assets was introduced.


10
00:00:27.961 --> 00:00:29.863 line:-3
There's a lot of detailed information
in there


11
00:00:29.897 --> 00:00:31.632 line:-2
that this new session builds upon.


12
00:00:31.665 --> 00:00:35.102 line:-2
In this session, I'll start by giving you
an overview of Background Assets


13
00:00:35.135 --> 00:00:37.971 line:-1
and why you should adopt it into your app.


14
00:00:38.005 --> 00:00:40.674 line:-2
Then, I'll discuss what's new
this year in Background Assets,


15
00:00:40.707 --> 00:00:42.943 line:-2
which includes an entirely new feature
that our team has been


16
00:00:42.976 --> 00:00:45.379 line:-1
really excited to share with you.


17
00:00:45.412 --> 00:00:48.582 line:-2
I'll then walk you through a sample
implementation of Background Assets


18
00:00:48.615 --> 00:00:51.552 line:-2
that you can even download yourself,
and I'll show you how adopting


19
00:00:51.585 --> 00:00:55.856 line:-2
this technology can significantly improve
the user experience of your app.


20
00:00:55.889 --> 00:00:58.158 line:-2
I'll then give you some guidance
on debugging your app extension


21
00:00:58.192 --> 00:01:00.394 line:-1
and simulating its entry points.


22
00:01:00.427 --> 00:01:04.031 line:-2
Okay! Let's go over a quick recap
of Background Assets.


23
00:01:05.465 --> 00:01:08.836 line:-2
One of the primary goals behind
Background Assets is to prevent waiting.


24
00:01:08.869 --> 00:01:11.538 line:-2
The last thing a user wants to experience
is to launch your app


25
00:01:11.572 --> 00:01:14.908 line:-2
and have to wait
for a large download to complete.


26
00:01:14.942 --> 00:01:17.110 line:-2
Background Assets solves this problem
through a combination


27
00:01:17.144 --> 00:01:20.147 line:-2
of its framework
and an associated app extension.


28
00:01:20.180 --> 00:01:23.217 line:-2
This new technology was introduced
in iOS 16.1


29
00:01:23.250 --> 00:01:26.720 line:-2
alongside the initial release
of macOS Ventura.


30
00:01:26.753 --> 00:01:29.623 line:-2
It supports the ability to download
additional content for your app


31
00:01:29.656 --> 00:01:33.360 line:-2
using your CDN provider
or a server you manage.


32
00:01:33.393 --> 00:01:37.531 line:-2
For instance, this content may be fetched
during an initial app install,


33
00:01:37.564 --> 00:01:40.534 line:-2
when the app updates,
or periodically in the background


34
00:01:40.567 --> 00:01:42.936 line:-1
when the user isn't using your app.


35
00:01:42.970 --> 00:01:45.672 line:-2
Through the paired app extension,
you are able to write code


36
00:01:45.706 --> 00:01:50.043 line:-2
that runs when the app is not
actively being used by the user.


37
00:01:50.077 --> 00:01:54.748 line:-2
This technology is currently supported
on macOS, iOS, and iPadOS,


38
00:01:54.781 --> 00:01:58.318 line:-2
so it's already available
on your favorite platforms.


39
00:01:58.352 --> 00:02:00.654 line:-2
One of best parts
about using Background Assets


40
00:02:00.687 --> 00:02:02.656 line:-2
is that the extension has
the ability to run


41
00:02:02.689 --> 00:02:04.858 line:-1
before the user has launched your app.


42
00:02:04.892 --> 00:02:06.894 line:-2
This provides a way
to start fetching assets


43
00:02:06.927 --> 00:02:09.930 line:-2
the moment your app is installed
through the App Store.


44
00:02:09.963 --> 00:02:13.634 line:-2
The extension may also be launched by
the system periodically in the background.


45
00:02:13.667 --> 00:02:16.803 line:-2
This is to ensure that any new
or updated assets are present


46
00:02:16.837 --> 00:02:19.506 line:-1
when your app is launched by the user.


47
00:02:19.540 --> 00:02:23.210 line:-2
The extension is also used to service
downloads when the app is not running.


48
00:02:23.243 --> 00:02:25.979 line:-2
For instance,
when a file finishes downloading,


49
00:02:26.013 --> 00:02:28.649 line:-2
the extension will be launched
so that it can move the file


50
00:02:28.682 --> 00:02:30.918 line:-1
to its final destination.


51
00:02:30.951 --> 00:02:34.521 line:-2
Something to keep in mind is that
the extension's runtime is limited.


52
00:02:34.555 --> 00:02:38.458 line:-2
This is to ensure that the user's device
is optimized for power and performance.


53
00:02:38.492 --> 00:02:41.161 line:-2
I'll go into more details
about this shortly.


54
00:02:41.195 --> 00:02:44.131 line:-2
It's also important to know
that the app extension you develop


55
00:02:44.164 --> 00:02:47.534 line:-2
to use with Background Assets is
placed into a specialized sandbox.


56
00:02:47.568 --> 00:02:50.137 line:-2
This is to ensure that the extension
is only being used


57
00:02:50.170 --> 00:02:52.439 line:-1
to manage content via Background Assets.


58
00:02:52.472 --> 00:02:56.109 line:-2
If you find that a capability or API
is not available within the sandbox,


59
00:02:56.143 --> 00:02:58.979 line:-2
please reach out to us
through Feedback Assistant.


60
00:02:59.012 --> 00:03:01.481 line:-2
I mentioned earlier
that your app extension is invoked


61
00:03:01.515 --> 00:03:03.283 line:-1
during three system events:


62
00:03:03.317 --> 00:03:06.954 line:-2
app install, app update,
and periodically in the background.


63
00:03:06.987 --> 00:03:09.423 line:-2
Let's take a look
at how this lifecycle is managed.


64
00:03:10.691 --> 00:03:14.094 line:-2
The lifecycle of your extension
begins when the App Store installs


65
00:03:14.127 --> 00:03:17.197 line:-1
or updates your app on the device.


66
00:03:17.231 --> 00:03:19.533 line:-2
The Background Assets system service
is then notified


67
00:03:19.566 --> 00:03:22.603 line:-1
and prevents the app from launching.


68
00:03:22.636 --> 00:03:24.505 line:-1
The system then inspects your app bundle


69
00:03:24.538 --> 00:03:28.375 line:-2
and reads its Info.plist
for the BAManifestURL key.


70
00:03:28.408 --> 00:03:31.778 line:-2
The system will begin downloading
the manifest referenced by that key


71
00:03:31.812 --> 00:03:36.116 line:-2
and report progress of the download
back to the App Store.


72
00:03:36,149 --> 00:03:39,520
Once your manifest has been downloaded,
the system then wakes your extension


73
00:03:39,553 --> 00:03:44,558
by issuing a content request
for the given install or update event.


74
00:03:44,591 --> 00:03:48,395
The content request includes a path
to the downloaded manifest.


75
00:03:48,428 --> 00:03:51,265
Your extension should use the manifest
to determine the URLs,


76
00:03:51,298 --> 00:03:55,769
file sizes, and what assets
to schedule for download.


77
00:03:55,802 --> 00:03:59,106
Then once your extension has determined
what assets need to be downloaded,


78
00:03:59,139 --> 00:04:02,809
it will return those downloads
as a set of BADownloads.


79
00:04:02,843 --> 00:04:06,146
The system then pauses your app extension,
or sometimes terminates it,


80
00:04:06,180 --> 00:04:09,483
to save power and performance
on the device.


81
00:04:09.516 --> 00:04:12.486 line:-2
The downloads will then begin
and your extension will be notified


82
00:04:12.519 --> 00:04:14.087 line:-1
shortly after their completion.


83
00:04:16,089 --> 00:04:19,826
The periodic content request is
nearly identical to the app install event,


84
00:04:19,860 --> 00:04:22,429
with the only key difference being
that your device determines


85
00:04:22,462 --> 00:04:23,964
when the event will occur.


86
00:04:23.997 --> 00:04:28.535 line:-2
The device makes this decision based on
how the user has been using their device.


87
00:04:28.569 --> 00:04:32.172 line:-2
Key factors such as Low Power Mode,
Background App Refresh,


88
00:04:32.206 --> 00:04:35.576 line:-2
or how frequently your app has
been launched are all considered.


89
00:04:35.609 --> 00:04:38.111 line:-2
Now, let's dive a little deeper
and look at the factors


90
00:04:38.145 --> 00:04:40.781 line:-2
that contribute to when
your extension runs periodically.


91
00:04:42.316 --> 00:04:46.320 line:-2
We care a lot about a device's
overall performance and power usage,


92
00:04:46.353 --> 00:04:48.622 line:-2
which is why Background Assets
has limitations


93
00:04:48.655 --> 00:04:50.524 line:-1
placed on the extension's runtime.


94
00:04:50.557 --> 00:04:54.194 line:-2
This includes an enforcement
on your extension's memory usage.


95
00:04:54.228 --> 00:04:56.864 line:-2
If your extension exceeds
a few megabytes of memory,


96
00:04:56.897 --> 00:04:59.333 line:-1
it may be terminated by the system.


97
00:04:59.366 --> 00:05:01.268 line:-1
So you may want to consider memory mapping


98
00:05:01.301 --> 00:05:03.770 line:-2
any large files
that your extension needs to read,


99
00:05:03.804 --> 00:05:06.607 line:-2
as memory-mapped data
backed by the device's storage


100
00:05:06.640 --> 00:05:09.009 line:-1
does not count against this limitation.


101
00:05:10.511 --> 00:05:13.780 line:-2
When an app is initially installed,
it is provided with a default allotment


102
00:05:13.814 --> 00:05:15.849 line:-1
of a few minutes of runtime per day.


103
00:05:15.883 --> 00:05:17.317 line:-1
While this may not sound like much,


104
00:05:17.351 --> 00:05:21.355 line:-2
with a properly designed extension,
this can go a long way.


105
00:05:21.388 --> 00:05:24.224 line:-2
The runtime also changes
based on app usage.


106
00:05:24.258 --> 00:05:26.226 line:-2
If an app hasn't been launched
in some time,


107
00:05:26.260 --> 00:05:29.329 line:-2
the system may start throttling
launches of the extension.


108
00:05:29.363 --> 00:05:33.834 line:-2
For instance, a rarely used app may see
its runtime more heavily restricted,


109
00:05:33.867 --> 00:05:36.937 line:-2
whereas a commonly used app
may be given additional runtime.


110
00:05:38.639 --> 00:05:41.608 line:-2
The BADownloaderExtension protocol
defines functions that are used


111
00:05:41.642 --> 00:05:44.144 line:-1
as entry points into your app extension.


112
00:05:44.178 --> 00:05:47.247 line:-2
The runtime starts being counted
when a function is invoked by the system


113
00:05:47.281 --> 00:05:50.617 line:-2
and stops being counted
when that function exits scope.


114
00:05:50.651 --> 00:05:52.352 line:-1
Once your function exits scope


115
00:05:52.386 --> 00:05:54.521 line:-2
or your extension's runtime
has been exhausted,


116
00:05:54.555 --> 00:05:57.391 line:-2
the system may suspend
or terminate the extension.


117
00:05:57.424 --> 00:05:58.992 line:-1
I'll provide an example in a moment.


118
00:06:00.227 --> 00:06:01.728 line:-1
However, there is one exception


119
00:06:01.762 --> 00:06:04.431 line:-2
to function scope controlling
the runtime of your extension.


120
00:06:04.464 --> 00:06:07.501 line:-2
If an asynchronous
exclusive control API is invoked,


121
00:06:07.534 --> 00:06:10.137 line:-2
your extension will be kept running
up until the point


122
00:06:10.170 --> 00:06:13.273 line:-2
that its completion handler
is invoked and returned.


123
00:06:13.307 --> 00:06:15.442 line:-2
There are a couple of ways
that the extension's runtime


124
00:06:15.475 --> 00:06:17.811 line:-1
may be controlled by the user.


125
00:06:17,845 --> 00:06:20,781
For instance,
if the device is in Low Power Mode


126
00:06:20,814 --> 00:06:23,884
or has Background App Refresh disabled,
whether that's globally


127
00:06:23,917 --> 00:06:27,988
or for your specific app,
then your extension will never run.


128
00:06:28.021 --> 00:06:31.291 line:-2
Previously, I mentioned
how extension runtime is determined


129
00:06:31.325 --> 00:06:32.759 line:-1
based on function scope.


130
00:06:32.793 --> 00:06:36.129 line:-2
Let's have a look at an example
to better understand how that works.


131
00:06:37.231 --> 00:06:39.199 line:-2
This code represents
the extension's interface


132
00:06:39.233 --> 00:06:42.035 line:-1
that services your background downloads.


133
00:06:42.069 --> 00:06:44.905 line:-2
The BADownloaderExtension protocol
defines the functions


134
00:06:44.938 --> 00:06:47.741 line:-2
that the system will invoke
into your extension.


135
00:06:47.774 --> 00:06:52.813 line:-2
Now let's add one of the required
functions to conform to this protocol.


136
00:06:52.846 --> 00:06:56.149 line:-2
The "downloads for request" function
is one of the primary entry points


137
00:06:56.183 --> 00:06:57.751 line:-1
into the extension.


138
00:06:57.784 --> 00:07:00.420 line:-2
Its BAContentRequest defines
if it's being invoked


139
00:07:00.454 --> 00:07:02.823 line:-1
during an app install, app update,


140
00:07:02.856 --> 00:07:05.325 line:-2
or as a part of a periodic check
in the background.


141
00:07:05.359 --> 00:07:08.662 line:-2
The manifestURL argument
provides a path to a local file


142
00:07:08.695 --> 00:07:11.565 line:-2
that was downloaded
before the extension was invoked.


143
00:07:11.598 --> 00:07:15.068 line:-2
The manifest file is commonly used
to compare what is currently downloaded


144
00:07:15.102 --> 00:07:19.206 line:-2
versus what downloads might be available
on the server.


145
00:07:19.239 --> 00:07:21.375 line:-2
The function definition's
return type requires


146
00:07:21.408 --> 00:07:24.645 line:-2
a set of download objects
that conform to the BADownload type.


147
00:07:24.678 --> 00:07:26.880 line:-2
This means that answering
this function's request


148
00:07:26.914 --> 00:07:30.250 line:-2
requires you to synchronously return
any content needing to be downloaded


149
00:07:30.284 --> 00:07:32.920 line:-1
before the function exits scope.


150
00:07:32.953 --> 00:07:35.622 line:-2
However, in this contrived example,
let's say that you invoke


151
00:07:35.656 --> 00:07:37.891 line:-1
a function called parseManifest.


152
00:07:37.925 --> 00:07:39.660 line:-2
This function reads
the downloaded manifest


153
00:07:39.693 --> 00:07:42.963 line:-2
and then returns the BADownload objects
needing to be downloaded.


154
00:07:44,731 --> 00:07:48,402
However, let's say that the parseManifest
function is poorly implemented


155
00:07:48,435 --> 00:07:51,638
and takes 30 minutes to parse
and construct the downloads.


156
00:07:51.672 --> 00:07:55.108 line:-2
This will end up exceeding
the extension's runtime significantly,


157
00:07:55.142 --> 00:07:57.344 line:-1
and the extension will be terminated.


158
00:07:57.377 --> 00:08:00.314 line:-2
It's important to remember
that the extension's runtime is calculated


159
00:08:00.347 --> 00:08:03.317 line:-2
from the moment the "downloads
for request" function is called,


160
00:08:03.350 --> 00:08:07.221 line:-2
up until the point
it exits scope and returns.


161
00:08:07.254 --> 00:08:09.456 line:-2
Let's take a look
at another problematic example.


162
00:08:11.625 --> 00:08:15.462 line:-2
Whenever any of the BADownloaderExtension
protocol functions exit scope,


163
00:08:15.495 --> 00:08:18.699 line:-2
the extension may become suspended
and then terminated.


164
00:08:18.732 --> 00:08:22.469 line:-2
You'll notice that the protocol does not
define any of its functions as mutating,


165
00:08:22.503 --> 00:08:24.638 line:-1
and there's a good reason for this.


166
00:08:24.671 --> 00:08:26.273 line:-1
When your extension is terminated,


167
00:08:26.306 --> 00:08:30.511 line:-2
any instance variables
or in-memory state will not be saved.


168
00:08:30.544 --> 00:08:32.779 line:-2
If your extension needs to maintain
any state,


169
00:08:32.813 --> 00:08:35.516 line:-1
you should serialize that state to disk.


170
00:08:35.549 --> 00:08:38.185 line:-1
Next, let's talk about the API you'll use


171
00:08:38.218 --> 00:08:41.321 line:-2
from both the extension and app
to manage downloads.


172
00:08:42.289 --> 00:08:44.958 line:-2
The download manager
within the framework is the primary way


173
00:08:44.992 --> 00:08:47.761 line:-2
to communicate with
the Background Assets system service.


174
00:08:47.794 --> 00:08:51.532 line:-2
The manager is a singleton object
that can be used throughout your app.


175
00:08:51.565 --> 00:08:54.001 line:-2
Using the manager, you can schedule
downloads of your assets


176
00:08:54.034 --> 00:08:55.536 line:-1
in the background and promote


177
00:08:55.569 --> 00:08:58.372 line:-2
already scheduled downloads
to the foreground.


178
00:08:58.405 --> 00:09:00.741 line:-2
From the download manager,
you can also manage downloads


179
00:09:00.774 --> 00:09:03.877 line:-2
that are currently in-flight,
which I mentioned earlier could have been


180
00:09:03.911 --> 00:09:07.614 line:-2
scheduled by the extension
before your app was ever launched.


181
00:09:07.648 --> 00:09:09.816 line:-2
There's also a synchronization mechanism
that you may use


182
00:09:09.850 --> 00:09:12.686 line:-2
to ensure that both your app
and its associated extension


183
00:09:12.719 --> 00:09:16.590 line:-2
are not performing similar operations
at the same time.


184
00:09:16.623 --> 00:09:18.859 line:-2
The last thing I'd like to bring up
about the download manager


185
00:09:18.892 --> 00:09:22.095 line:-2
is that it has a delegate
for receiving callbacks about downloads,


186
00:09:22.129 --> 00:09:25.199 line:-2
similar to
the BADownloaderExtension protocol.


187
00:09:25.232 --> 00:09:27.801 line:-2
If you register a delegate
on BADownloadManager,


188
00:09:27.835 --> 00:09:31.338 line:-2
then it will receive those callbacks
instead of your extension.


189
00:09:31.371 --> 00:09:33.407 line:-2
This is useful
as it provides your app a way


190
00:09:33.440 --> 00:09:36.443 line:-2
to manage its downloads
while it is running.


191
00:09:36.476 --> 00:09:39.346 line:-2
Now that you've had a quick refresher
about how to manage downloads,


192
00:09:39.379 --> 00:09:41.181 line:-2
let's talk about
how you should manage those files


193
00:09:41.215 --> 00:09:43.450 line:-1
once they're already on the user's device.


194
00:09:44.918 --> 00:09:48.488 line:-2
Any files you download with
Background Assets are marked purgeable,


195
00:09:48.522 --> 00:09:52.159 line:-2
which means that the system may
remove them under critical circumstances.


196
00:09:52.192 --> 00:09:55.896 line:-2
Think a system security update
or if a user needs to capture a video


197
00:09:55.929 --> 00:09:57.531 line:-1
of their child's first step.


198
00:09:58.866 --> 00:10:01.635 line:-2
However, if you modify
or expand a downloaded asset,


199
00:10:01.668 --> 00:10:03.537 line:-2
then those files are not tracked
by the system


200
00:10:03.570 --> 00:10:05.405 line:-1
and therefore are not purgeable.


201
00:10:05.439 --> 00:10:07.875 line:-2
You should think carefully
about how you modify assets


202
00:10:07.908 --> 00:10:10.477 line:-1
or extract data out of them.


203
00:10:10.511 --> 00:10:12.713 line:-2
If you incorrectly manage
your downloaded assets,


204
00:10:12.746 --> 00:10:15.616 line:-2
you could increase the size
of a user's backup of their device


205
00:10:15.649 --> 00:10:19.319 line:-2
or prevent a critical security update
from being downloaded.


206
00:10:19.353 --> 00:10:21.722 line:-2
Therefore, you should try to store
your downloaded assets


207
00:10:21.755 --> 00:10:23.390 line:-1
in your caches directory.


208
00:10:23.423 --> 00:10:25.492 line:-2
That way, the system knows
that it can purge them


209
00:10:25.526 --> 00:10:28.262 line:-1
when it is critical to do so.


210
00:10:28.295 --> 00:10:30.964 line:-2
Now that you have a full recap
of how all of this works,


211
00:10:30.998 --> 00:10:34.001 line:-2
let's take a look at what's new this year
with Background Assets.


212
00:10:35.235 --> 00:10:38.105 line:-2
Earlier this year,
we introduced essential downloads,


213
00:10:38.138 --> 00:10:43.010 line:-2
which provides a way to fetch content
while your app is installing or updating.


214
00:10:43.043 --> 00:10:45.479 line:-2
This means that your downloads
are completely integrated


215
00:10:45.512 --> 00:10:49.783 line:-2
into the iOS Home Screen,
macOS Launchpad, and the App Store.


216
00:10:49.816 --> 00:10:53.053 line:-2
To the end user,
the download of your assets appear to them


217
00:10:53.086 --> 00:10:57.391 line:-2
as if the app is currently still being
downloaded from the App Store.


218
00:10:57.424 --> 00:11:00.794 line:-2
This also means that while
your essential downloads are in-flight,


219
00:11:00.827 --> 00:11:02.996 line:-1
your app cannot be launched by the user.


220
00:11:03.030 --> 00:11:06.466 line:-2
All the user can do is
cancel or pause installation.


221
00:11:06.500 --> 00:11:10.604 line:-2
Since pauses are supported,
your server should support HTTP ranges


222
00:11:10.637 --> 00:11:13.307 line:-1
so that resumes are possible.


223
00:11:13.340 --> 00:11:15.843 line:-2
Since essential downloads occur
during app install,


224
00:11:15.876 --> 00:11:18.579 line:-2
they take priority
over any non-essential downloads.


225
00:11:18.612 --> 00:11:21.348 line:-1
Let's take a look.


226
00:11:21.381 --> 00:11:25.719 line:-2
It all begins when your app is requested
from the App Store or TestFlight.


227
00:11:25.752 --> 00:11:29.122 line:-2
If the app's Info.plist
contains essential asset keys,


228
00:11:29.156 --> 00:11:33.460 line:-2
then progress is set up on the device
and we go through this flow.


229
00:11:33.493 --> 00:11:35.762 line:-2
Once your app has been
downloaded and installed,


230
00:11:35.796 --> 00:11:39.266 line:-2
the system wakes your extension
by issuing a request for content,


231
00:11:39.299 --> 00:11:42.369 line:-2
which includes whether the request is
for an app install,


232
00:11:42.402 --> 00:11:45.405 line:-1
app update, or for a periodic fetch.


233
00:11:45.439 --> 00:11:47.941 line:-2
During this time,
an authentication challenge may be sent


234
00:11:47.975 --> 00:11:50.911 line:-2
in order for the manifest
to be downloaded.


235
00:11:50.944 --> 00:11:53.547 line:-2
Your extension will then vend back
a combination of essential


236
00:11:53.580 --> 00:11:55.415 line:-1
and non-essential downloads.


237
00:11:55.449 --> 00:11:57.951 line:-2
As a side note,
it's important that your extension


238
00:11:57.985 --> 00:12:00.621 line:-2
vends the downloads back quickly,
as your app's download progress


239
00:12:00.654 --> 00:12:03.524 line:-2
will appear frozen to the user
until this function returns.


240
00:12:04.791 --> 00:12:06.927 line:-2
The moment
the extension provides the downloads,


241
00:12:06.960 --> 00:12:10.397 line:-2
any downloads that were marked
as essential will immediately begin.


242
00:12:10.430 --> 00:12:13.500 line:-2
Your extension may also receive
an additional authentication challenge


243
00:12:13.534 --> 00:12:16.036 line:-1
during this time.


244
00:12:16.069 --> 00:12:18.405 line:-2
Once all of your essential downloads
have finished,


245
00:12:18.438 --> 00:12:20.007 line:-1
the system will terminate your extension


246
00:12:20.040 --> 00:12:23.377 line:-2
and the app will become launchable
by the user.


247
00:12:23.410 --> 00:12:25.512 line:-2
The extension will then receive
a batch of successful


248
00:12:25.546 --> 00:12:27.714 line:-1
and potentially failed downloads.


249
00:12:27.748 --> 00:12:30.551 line:-2
If there are any failed downloads
you can re-enqueue them


250
00:12:30.584 --> 00:12:34.488 line:-1
as nonessential using BADownloadManager.


251
00:12:34.521 --> 00:12:37.057 line:-2
As your extension is receiving
completion messages


252
00:12:37.090 --> 00:12:38.525 line:-1
for essential downloads,


253
00:12:38.559 --> 00:12:42.329 line:-2
the system will immediately start
downloading the nonessential assets.


254
00:12:42.362 --> 00:12:45.165 line:-2
The nonessential downloads
will then be sent to the extension


255
00:12:45.199 --> 00:12:47.801 line:-1
as they finish downloading.


256
00:12:47.835 --> 00:12:50.504 line:-2
Now let's take a look
at how essential downloads integrate


257
00:12:50.537 --> 00:12:55.042 line:-2
into the App Store installation progress
on the iOS Home Screen.


258
00:12:55.075 --> 00:12:57.845 line:-2
A percentage of the progress indicator
is broken down


259
00:12:57.878 --> 00:13:00.714 line:-2
into the time it takes
to download your base app,


260
00:13:00.747 --> 00:13:03.383 line:-1
plus the amount of time to do the install,


261
00:13:03.417 --> 00:13:07.554 line:-2
followed by the amount of time necessary
to download your essential assets.


262
00:13:07.588 --> 00:13:12.292 line:-2
The new BAEssentialDownloadAllowance key
defined in your app's Info.plist


263
00:13:12.326 --> 00:13:15.529 line:-2
is used to set up
the initial overall progress indicator.


264
00:13:15.562 --> 00:13:18.699 line:-2
Then once contentForRequest
is invoked into your extension


265
00:13:18.732 --> 00:13:20.834 line:-1
and your extension returns downloads,


266
00:13:20.868 --> 00:13:24.071 line:-2
the file size of each essential download
is added together


267
00:13:24.104 --> 00:13:27.407 line:-2
to determine how much
is actually being downloaded.


268
00:13:27.441 --> 00:13:30.410 line:-2
If the amount that you schedule
for download is significantly less


269
00:13:30.444 --> 00:13:32.246 line:-1
than the essential download allowance,


270
00:13:32.279 --> 00:13:35.182 line:-2
then the progress indicator may move
rather quickly.


271
00:13:35.215 --> 00:13:37.251 line:-2
You should aim to get
your essential download allowance


272
00:13:37.284 --> 00:13:39.419 line:-1
close to what is actually being downloaded


273
00:13:39.453 --> 00:13:42.389 line:-1
to ensure smooth progress for the user.


274
00:13:42.422 --> 00:13:45.325 line:-2
It's important to keep in mind
that everything we've discussed


275
00:13:45.359 --> 00:13:47.294 line:-1
can be disabled by the user.


276
00:13:47.327 --> 00:13:48.829 line:-1
In the App Store settings pane,


277
00:13:48.862 --> 00:13:51.798 line:-2
there is a section
for disabling in-app content.


278
00:13:51.832 --> 00:13:54.568 line:-2
While this doesn't disable
Background Assets in its entirety,


279
00:13:54.601 --> 00:13:57.471 line:-2
it does prevent essential assets
from downloading


280
00:13:57.504 --> 00:13:59.072 line:-1
and the ability for the extension to run


281
00:13:59.106 --> 00:14:01.642 line:-2
before the app has been launched
by the user.


282
00:14:01.675 --> 00:14:04.378 line:-2
So it's important to think
of essential assets as just that:


283
00:14:04.411 --> 00:14:07.814 line:-2
essential but not a requirement
for your app to launch.


284
00:14:07.848 --> 00:14:10.551 line:-2
Therefore, its important
for your app to handle flows


285
00:14:10.584 --> 00:14:13.053 line:-2
where essential assets are not
already on the device


286
00:14:13.086 --> 00:14:14.988 line:-1
when your app is launched.


287
00:14:15.022 --> 00:14:17.457 line:-2
The ability to use essential assets
was actually introduced


288
00:14:17.491 --> 00:14:22.496 line:-2
earlier in the spring as part of iOS 16.4
and macOS Ventura 13.3.


289
00:14:22.529 --> 00:14:25.098 line:-2
The new APIs are quite minimal
and should be easily added


290
00:14:25.132 --> 00:14:26.700 line:-1
into your existing extension.


291
00:14:28.602 --> 00:14:31.271 line:-2
The first API that was created
to support essential downloads


292
00:14:31.305 --> 00:14:35.175 line:-2
was actually a new initializer
on BAURLDownload.


293
00:14:35.209 --> 00:14:39.112 line:-2
There are two new arguments we've added
specifically to support this feature.


294
00:14:39.146 --> 00:14:41.682 line:-2
The essential argument,
as its name implies,


295
00:14:41.715 --> 00:14:44.785 line:-2
specifies if the download should be
marked as essential,


296
00:14:44.818 --> 00:14:47.554 line:-2
where essential means contributing
to the app's overall download


297
00:14:47.588 --> 00:14:49.623 line:-1
and installation progress.


298
00:14:49.656 --> 00:14:53.660 line:-2
The file size argument is the size
of the assets that will be downloaded.


299
00:14:53.694 --> 00:14:57.598 line:-2
The file size must be accurate
when creating essential downloads.


300
00:14:57.631 --> 00:15:00.567 line:-2
The system needs this information
so that the app install progress


301
00:15:00.601 --> 00:15:03.370 line:-2
on the user's device
is displayed properly.


302
00:15:03.403 --> 00:15:05.372 line:-2
If the file
that Background Assets downloads


303
00:15:05.405 --> 00:15:07.708 line:-2
does not match the file size
provided here,


304
00:15:07.741 --> 00:15:11.879 line:-2
then the download will fail
if the download is marked as essential.


305
00:15:11.912 --> 00:15:14.448 line:-2
If your extension does not know
the size of the file,


306
00:15:14.481 --> 00:15:17.684 line:-2
then the file size should be included
in the BAManifestURL


307
00:15:17.718 --> 00:15:21.355 line:-2
that is provided to the extension
before the extension is launched.


308
00:15:22.756 --> 00:15:26.059 line:-2
Another API that was introduced
provides an easy one-liner


309
00:15:26.093 --> 00:15:29.329 line:-2
for creating a nonessential
representation of a download.


310
00:15:29.363 --> 00:15:31.565 line:-2
Since essential downloads
can only be enqueued


311
00:15:31.598 --> 00:15:36.870 line:-2
in the contentForRequest function,
this API can be useful in many cases.


312
00:15:36.904 --> 00:15:40.674 line:-2
For example, let's say fetching
an essential download failed,


313
00:15:40.707 --> 00:15:42.409 line:-1
perhaps because of a networking issue


314
00:15:42.442 --> 00:15:45.412 line:-2
or the file was
simply temporarily unavailable.


315
00:15:45.445 --> 00:15:47.414 line:-2
Well, in the background download
failed function


316
00:15:47.447 --> 00:15:49.917 line:-2
within your extension,
you can easily create


317
00:15:49.950 --> 00:15:53.854 line:-2
a nonessential representation
of that download and re-enqueue it.


318
00:15:53.887 --> 00:15:55.689 line:-2
The download will then begin
in the background


319
00:15:55.722 --> 00:16:00.093 line:-2
and your extension or app
will be notified when it is completed.


320
00:16:00.127 --> 00:16:01.828 line:-2
Now let's take a look
at some of the required keys


321
00:16:01.862 --> 00:16:04.364 line:-2
that need to be present
in your app's Info.plist.


322
00:16:06.033 --> 00:16:09.136 line:-2
In last year's session,
I went over each of these keys in detail.


323
00:16:09.169 --> 00:16:13.440 line:-2
If you'd like a more in-depth explanation,
I'd encourage you to check out that talk.


324
00:16:13.473 --> 00:16:16.009 line:-2
It's important to keep in mind
that these keys are required


325
00:16:16.043 --> 00:16:18.345 line:-2
not only to use
the Background Assets framework,


326
00:16:18.378 --> 00:16:23.350 line:-2
but are also necessary in order
to submit your app to the App Store.


327
00:16:23.383 --> 00:16:25.385 line:-2
There are two new keys this year
that are required


328
00:16:25.419 --> 00:16:27.354 line:-1
to support essential assets:


329
00:16:27.387 --> 00:16:31.725 line:-2
BAEssentialDownloadAllowance
and BAEssentialMaxInstallSize.


330
00:16:31.758 --> 00:16:34.561 line:-2
The essential download allowance
is represented in bytes


331
00:16:34.595 --> 00:16:36.864 line:-2
and defines an upper bound
on how large the sum


332
00:16:36.897 --> 00:16:40.400 line:-2
of all of your essential assets
will take to download.


333
00:16:40.434 --> 00:16:42.970 line:-2
It's important to try to get this number
as close as possible


334
00:16:43.003 --> 00:16:45.305 line:-2
to the size of the essential assets
you enqueue


335
00:16:45.339 --> 00:16:49.076 line:-2
so that download progress is smooth
for the user when they install your app.


336
00:16:49.109 --> 00:16:51.778 line:-2
The other new key,
BAEssentialMaxInstallSize,


337
00:16:51.812 --> 00:16:56.316 line:-2
represents the maximum size of those
assets extracted onto the user's device.


338
00:16:56.350 --> 00:16:58.886 line:-2
This number appears on the App Store
as a way to tell users


339
00:16:58.919 --> 00:17:03.423 line:-2
how much storage your app will use after
the essential assets have been installed.


340
00:17:03.457 --> 00:17:07.160 line:-2
That pretty much sums up the new APIs
we've added for essential assets.


341
00:17:07.194 --> 00:17:09.596 line:-2
As you just saw,
adding essential assets support


342
00:17:09.630 --> 00:17:12.132 line:-2
to your existing app can be done
with minimal code changes.


343
00:17:12.165 --> 00:17:13.934 line:-1
It's really just that easy.


344
00:17:13.967 --> 00:17:15.169 line:-1
Now for the fun part.


345
00:17:15.202 --> 00:17:17.271 line:-2
Let's take a look at how you can extend
an existing app


346
00:17:17.304 --> 00:17:20.574 line:-2
that uses URLSession
into using Background Assets.


347
00:17:20.607 --> 00:17:24.511 line:-2
The app I'll be showing you today
downloads WWDC Sessions,


348
00:17:24.545 --> 00:17:28.515 line:-2
just like this one, and stores them
on your device for offline viewing.


349
00:17:28.549 --> 00:17:32.886 line:-2
Currently, the app has to be launched
before the videos will download.


350
00:17:32.920 --> 00:17:35.722 line:-2
By adopting Background Assets,
we can eliminate this wait time


351
00:17:35.756 --> 00:17:39.092 line:-2
by having the videos already downloaded
before the app is launched.


352
00:17:39.126 --> 00:17:41.094 line:-1
Let's have a look.


353
00:17:41,128 --> 00:17:43,197
Here's the app
we'll be building upon today.


354
00:17:45.132 --> 00:17:46.900 line:-2
You'll notice
that the moment it is launched,


355
00:17:46.934 --> 00:17:49.570 line:-1
sessions immediately begin downloading.


356
00:17:49.603 --> 00:17:52.105 line:-2
The way this app currently works
is that a manifest downloads


357
00:17:52.139 --> 00:17:56.109 line:-2
from a server,
which contains a list of WWDC sessions.


358
00:17:56.143 --> 00:17:59.346 line:-2
After the manifest is fetched,
the sessions start downloading


359
00:17:59.379 --> 00:18:02.783 line:-1
and then become viewable once tapped.


360
00:18:02.816 --> 00:18:05.719 line:-2
Let's take a look at what's necessary
to adopt Background Assets


361
00:18:05.752 --> 00:18:07.654 line:-1
into this project.


362
00:18:07.688 --> 00:18:10.057 line:-2
Before you begin to use
the Background Assets API,


363
00:18:10.090 --> 00:18:14.328 line:-2
the first thing to add are the initial
Info.plist keys that I discussed earlier.


364
00:18:14.361 --> 00:18:18.532 line:-2
These key are required to be present
in your app bundle's Info.plist file.


365
00:18:18.565 --> 00:18:21.535 line:-2
The next thing you'll need to do is add
a background download extension


366
00:18:21.568 --> 00:18:23.403 line:-1
and embed it into your app.


367
00:18:23.437 --> 00:18:25.772 line:-2
You'll want to make sure
that your extension's bundle identifier


368
00:18:25.806 --> 00:18:28.675 line:-2
is prefixed
with your app's bundle identifier.


369
00:18:28.709 --> 00:18:31.645 line:-2
You'll also want to ensure
that both your app and its extension


370
00:18:31.678 --> 00:18:33.413 line:-1
are in a common app group,


371
00:18:33.447 --> 00:18:38.051 line:-2
as the app group is how your extension
shares downloaded assets with your app.


372
00:18:38.085 --> 00:18:40.153 line:-2
The last thing you'll want to ensure
is that both your app


373
00:18:40.187 --> 00:18:43.390 line:-2
and its extension
are signed with your team identifier.


374
00:18:43.423 --> 00:18:47.160 line:-2
With those steps out of the way,
you can begin to adopt Background Assets.


375
00:18:48.595 --> 00:18:52.399 line:-2
Here in front of you is the Xcode project
for the app you just saw.


376
00:18:52.432 --> 00:18:54.902 line:-2
I've already went
and created the download extension


377
00:18:54.935 --> 00:18:57.137 line:-1
and embedded it into the app.


378
00:18:57.171 --> 00:19:00.240 line:-2
I've also added
the required Info.plist keys.


379
00:19:00.274 --> 00:19:02.276 line:-1
With all of that out of the way,


380
00:19:02.309 --> 00:19:04.978 line:-2
let's begin by navigating
to the SessionManager.


381
00:19:07.214 --> 00:19:10.050 line:-2
The SessionManager in this project
currently uses URLSession


382
00:19:10.083 --> 00:19:12.519 line:-1
to fetch the latest downloads.


383
00:19:12.553 --> 00:19:15.255 line:-1
URLSession is a fantastic API.


384
00:19:15.289 --> 00:19:18.325 line:-2
We'll continue to use it within the app
to fetch the manifest.


385
00:19:18.358 --> 00:19:20.994 line:-2
However, we'll migrate
to using Background Assets


386
00:19:21.028 --> 00:19:22.896 line:-1
to fetch the actual sessions.


387
00:19:22.930 --> 00:19:25.532 line:-2
This is so that the app can take advantage
of promoting any assets


388
00:19:25.566 --> 00:19:28.569 line:-2
scheduled in the background
by the extension we're about to create


389
00:19:28.602 --> 00:19:31.205 line:-2
to the foreground
when the app is launched.


390
00:19:31.238 --> 00:19:34.208 line:-2
To begin, we'll starting by importing
the Background Assets framework module.


391
00:19:38.679 --> 00:19:42.216 line:-2
I'll then scroll down and remove
the variables associated with URLSession


392
00:19:42.249 --> 00:19:44.952 line:-1
as they are no longer needed.


393
00:19:44.985 --> 00:19:49.122 line:-2
Now I'll navigate
to the "start download" method.


394
00:19:49.156 --> 00:19:52.192 line:-2
As you can see, the existing code
was tracking sessions to download


395
00:19:52.226 --> 00:19:54.461 line:-1
by the URLSession download task.


396
00:19:54.494 --> 00:19:58.599 line:-2
This won't be necessary anymore,
so let's remove it.


397
00:19:58.632 --> 00:20:00.968 line:-2
Here's where things begin
to get interesting.


398
00:20:01.001 --> 00:20:03.337 line:-2
When you work with Background Assets,
its important to think about


399
00:20:03.370 --> 00:20:06.840 line:-2
your extension and app
possibly running at the same time.


400
00:20:06.874 --> 00:20:09.109 line:-2
To coordinate this
in a near effortless way,


401
00:20:09.142 --> 00:20:12.179 line:-2
you'll need to use withExclusiveControl
to guarantee


402
00:20:12.212 --> 00:20:16.850 line:-2
that any work that needs mutual exclusion
with the other process can do so.


403
00:20:16.884 --> 00:20:18.886 line:-1
Let's add that in now.


404
00:20:21.088 --> 00:20:24.825 line:-2
As you can tell,
this API is asynchronous and escaping.


405
00:20:24.858 --> 00:20:27.494 line:-2
Any work scheduled inside the closure
is guaranteed to run


406
00:20:27.528 --> 00:20:32.032 line:-2
independently from the extension
if the extension also uses this API.


407
00:20:32.065 --> 00:20:36.203 line:-2
We'll implement the extension in a moment,
but for now, let's focus on the app.


408
00:20:36.236 --> 00:20:38.972 line:-2
Since we know we're running
in a mutually exclusive context,


409
00:20:39.006 --> 00:20:42.409 line:-2
let's ask the download manager if there
are currently any downloads in-flight.


410
00:20:43.777 --> 00:20:45.679 line:-2
There's no reason
to reschedule a download


411
00:20:45.712 --> 00:20:47.614 line:-1
if the extension has already scheduled it.


412
00:20:47.648 --> 00:20:51.185 line:-2
However, one thing we can do is,
if we find an existing download,


413
00:20:51.218 --> 00:20:53.287 line:-1
we can promote it to the foreground.


414
00:20:55.956 --> 00:20:58.759 line:-2
Promoting a download to the foreground
can significantly decrease


415
00:20:58.792 --> 00:21:01.161 line:-2
the time it takes
for a download to finish.


416
00:21:01.195 --> 00:21:04.064 line:-2
Since the user is currently using the app,
it's a great opportunity


417
00:21:04.097 --> 00:21:06.166 line:-2
to fetch the download
as quickly as possible.


418
00:21:06.200 --> 00:21:07.868 line:-1
The user might want to view it.


419
00:21:07.901 --> 00:21:11.071 line:-2
If the download does not already exist,
we'll create it.


420
00:21:12,706 --> 00:21:15,542
Then, regardless of if
we just created the download


421
00:21:15,576 --> 00:21:19,880
or if the extension did, we'll go ahead
and start it in the foreground.


422
00:21:19,913 --> 00:21:22,082
Promoting a download
from the background to the foreground


423
00:21:22,115 --> 00:21:24,117
does not cause the download to restart,


424
00:21:24,151 --> 00:21:27,688
it is simply resumed
from where it left off in that transition.


425
00:21:27,721 --> 00:21:30,824
The next thing on the list is to implement
the BADownloadManagerDelegate,


426
00:21:30.858 --> 00:21:34.161 line:-2
but before I do that,
I'll delete the old URLSessionDelegate.


427
00:21:39.600 --> 00:21:41.101 line:-1
Now that the old delegate is gone,


428
00:21:41.134 --> 00:21:44.104 line:-2
let's create
the Background Assets delegate.


429
00:21:45.806 --> 00:21:48.275 line:-2
Since the session manager is
now conforming to the delegate,


430
00:21:48.308 --> 00:21:51.612 line:-2
it's important that it's wired up
to actually receive those messages.


431
00:21:51.645 --> 00:21:54.147 line:-2
So I'll go up to the initializer
and wire that up now.


432
00:21:57.551 --> 00:22:00.687 line:-2
Since BADownloadManager connects
directly to the system scheduler,


433
00:22:00.721 --> 00:22:02.322 line:-1
it's a singleton object.


434
00:22:02.356 --> 00:22:04.558 line:-2
Having this delegate
attached to the download manager


435
00:22:04.591 --> 00:22:07.628 line:-2
will cause your app to receive messages
over the extension


436
00:22:07.661 --> 00:22:09.696 line:-1
if your app is currently running.


437
00:22:09.730 --> 00:22:12.399 line:-2
Now let's head back to the functions
we need to implement.


438
00:22:15.269 --> 00:22:17.571 line:-2
For this app,
there are three specific functions


439
00:22:17.604 --> 00:22:20.474 line:-2
on the delegate protocol
that we'll be implementing.


440
00:22:20.507 --> 00:22:24.178 line:-2
The first is for progress handling.
Let's implement that now.


441
00:22:28.448 --> 00:22:31.051 line:-2
Before we start
blindly updating progress in the UI,


442
00:22:31.084 --> 00:22:33.820 line:-2
we'll make sure that the download
we're receiving progress messages for


443
00:22:33.854 --> 00:22:36.723 line:-2
is something that the manifest
is currently tracking.


444
00:22:36.757 --> 00:22:40.060 line:-2
If a download is being tracked,
we'll call updateDownloadProgress,


445
00:22:40.093 --> 00:22:41.595 line:-1
which is a helper function within the app


446
00:22:41.628 --> 00:22:44.831 line:-2
that sends the progress
directly over to SwiftUI.


447
00:22:44.865 --> 00:22:48.035 line:-2
Next, I'll implement what happens
when a download finishes.


448
00:22:50.737 --> 00:22:53.340 line:-2
It starts pretty much the same way,
which is to make sure


449
00:22:53.373 --> 00:22:55.843 line:-2
it's handling only downloads
that are expected.


450
00:22:55.876 --> 00:23:00.080 line:-2
Then replaceItemAt is used to move
the object from the temporary location


451
00:23:00.113 --> 00:23:04.284 line:-2
that Background Assets has given us
to its final location.


452
00:23:04.318 --> 00:23:06.520 line:-2
It's important to use
move operations here,


453
00:23:06.553 --> 00:23:08.722 line:-2
as the system will track
and purge the file


454
00:23:08.755 --> 00:23:10.757 line:-1
if the device becomes low on space.


455
00:23:10.791 --> 00:23:12.960 line:-2
So you should make sure
that your app always checks


456
00:23:12.993 --> 00:23:17.297 line:-2
to see if any files are missing
and refetches it if it so needs to.


457
00:23:17,331 --> 00:23:19,333
The last thing that happens here is,
a Task is spawned


458
00:23:19,366 --> 00:23:22,336
against the MainActor,
the state is marked as downloaded,


459
00:23:22,369 --> 00:23:25,839
and the app begins fetching
the session's thumbnail.


460
00:23:25.873 --> 00:23:28.775 line:-2
Now, I'd like to say
that all downloads will succeed.


461
00:23:28.809 --> 00:23:31.478 line:-2
However, the unfortunate truth is
that they can fail,


462
00:23:31.512 --> 00:23:34.348 line:-2
whether that's because the server
no longer has that resource


463
00:23:34.381 --> 00:23:36.149 line:-1
or there's a network issue.


464
00:23:36.183 --> 00:23:39.553 line:-2
Background Assets does retry and wait
for network connectivity problems,


465
00:23:39.586 --> 00:23:41.288 line:-1
but after a certain point in time,


466
00:23:41.321 --> 00:23:43.991 line:-2
you have to know
that the file is not on its way.


467
00:23:44.024 --> 00:23:46.426 line:-2
Another thing to keep in mind is
that downloads that are promoted


468
00:23:46.460 --> 00:23:48.662 line:-2
to the foreground will fail
almost instantly


469
00:23:48.695 --> 00:23:50.831 line:-1
if there is a network connectivity issue.


470
00:23:50.864 --> 00:23:52.900 line:-2
There's not much our app needs to do
when a download fails.


471
00:23:52.933 --> 00:23:55.402 line:-1
It could present UI or reschedule it,


472
00:23:55.435 --> 00:23:59.206 line:-2
but for this example,
let's log that there was a problem.


473
00:24:05.913 --> 00:24:07.948 line:-2
Since the delegate
is now fully implemented,


474
00:24:07.981 --> 00:24:10.551 line:-2
let's relaunch the app
and see how it looks.


475
00:24:14.388 --> 00:24:16.456 line:-1
Well, to no surprise, it looks identical,


476
00:24:16.490 --> 00:24:19.593 line:-2
and that's what
we really wanted to see here.


477
00:24:19.626 --> 00:24:23.130 line:-2
Adding Background Assets in place
of URLSession is quite effortless.


478
00:24:23.163 --> 00:24:26.366 line:-2
The next thing I'll show you is
how to implement the app extension


479
00:24:26.400 --> 00:24:28.669 line:-1
for handling background downloading.


480
00:24:28.702 --> 00:24:31.505 line:-2
Adding this app extension is how
you can leverage Background Assets


481
00:24:31.538 --> 00:24:34.908 line:-2
to fetch your content
before your app is installed or updated


482
00:24:34.942 --> 00:24:38.512 line:-2
and is what provides the support
for enqueuing essential assets.


483
00:24:38.545 --> 00:24:41.014 line:-2
In essence,
the extension is what is responsible


484
00:24:41.048 --> 00:24:43.584 line:-2
for scheduling downloads
while your app is not running.


485
00:24:43.617 --> 00:24:46.220 line:-1
Let's have a look.


486
00:24:46.253 --> 00:24:48.188 line:-2
Here we are
in the background download handler,


487
00:24:48.222 --> 00:24:50.290 line:-2
which receives messages
within your extension


488
00:24:50.324 --> 00:24:52.259 line:-1
related to Background Assets.


489
00:24:52.292 --> 00:24:54.862 line:-2
From the extension,
the first thing I'll do is create a logger


490
00:24:54.895 --> 00:24:58.398 line:-2
so that we can see from Console.app
when our extension is running.


491
00:25:00.501 --> 00:25:02.903 line:-2
Next, I'll implement
the contentForRequest function


492
00:25:02.936 --> 00:25:05.606 line:-2
that's part
of the BADownloaderExtension protocol.


493
00:25:07.908 --> 00:25:10.377 line:-2
The first thing this extension will do
is parse the manifest


494
00:25:10.410 --> 00:25:13.413 line:-2
that was predownloaded
before the extension was launched.


495
00:25:13.447 --> 00:25:16.116 line:-2
If the manifest that was downloaded
is somehow invalid,


496
00:25:16.149 --> 00:25:20.387 line:-2
the extension will be configured
to enqueue no downloads.


497
00:25:20.420 --> 00:25:23.056 line:-2
Once the extension knows
that the manifest is valid,


498
00:25:23.090 --> 00:25:25.759 line:-1
it is atomically saved into the app group.


499
00:25:25.792 --> 00:25:27.895 line:-1
This is so that the app and the extension


500
00:25:27.928 --> 00:25:32.099 line:-2
have the latest version of the manifest
locally that they can reference later.


501
00:25:32.132 --> 00:25:33.901 line:-1
Since this save is done atomically,


502
00:25:33.934 --> 00:25:37.271 line:-2
using withExclusiveControl
is not necessary.


503
00:25:37.304 --> 00:25:39.806 line:-2
The extension will then create
a mutable set of download objects


504
00:25:39.840 --> 00:25:43.277 line:-2
that the extension will return
to the system to be scheduled.


505
00:25:43.310 --> 00:25:46.346 line:-2
As discussed earlier,
essential downloads are only supported


506
00:25:46.380 --> 00:25:49.383 line:-1
during app installation or app update.


507
00:25:49.416 --> 00:25:52.486 line:-2
I'll then iterate through the manifest
for all sessions that are remote,


508
00:25:52.519 --> 00:25:56.290 line:-2
which in this context means
that they aren't downloaded.


509
00:25:56.323 --> 00:25:58.859 line:-1
A BAURLDownload object is then created


510
00:25:58.892 --> 00:26:01.228 line:-2
for every download
that needs to be scheduled.


511
00:26:01.261 --> 00:26:05.098 line:-2
The download is given a unique identifier,
a URLRequest,


512
00:26:05.132 --> 00:26:08.268 line:-2
an annotation for if the download
should be fetched as essential,


513
00:26:08.302 --> 00:26:12.439 line:-2
its file size, the app group
the asset will be downloaded into,


514
00:26:12.472 --> 00:26:14.608 line:-2
and a relative priority
to control which downloads


515
00:26:14.641 --> 00:26:17.110 line:-1
the scheduler should start first.


516
00:26:17.144 --> 00:26:20.881 line:-2
One important thing to keep in mind
is that any downloads marked as essential


517
00:26:20.914 --> 00:26:25.619 line:-2
must have an accurate file size,
or the download will marked as a failure.


518
00:26:25.652 --> 00:26:28.622 line:-2
This is to support smooth progress
on the iOS Home Screen,


519
00:26:28.655 --> 00:26:31.291 line:-1
macOS Launchpad, and the App Store.


520
00:26:31.325 --> 00:26:33.627 line:-2
Now that we have support
for enqueuing downloads,


521
00:26:33.660 --> 00:26:36.363 line:-2
let's take a look
at handling successful downloads.


522
00:26:37.264 --> 00:26:39.900 line:-2
The extension processes downloads
if the app is not running


523
00:26:39.933 --> 00:26:43.337 line:-2
or if the app doesn't have a delegate
assigned to BADownloadManager.


524
00:26:43.370 --> 00:26:45.539 line:-2
The first thing I'll implement
in the download finished handler


525
00:26:45.572 --> 00:26:50.143 line:-2
will be asynchronously acquiring
exclusive control.


526
00:26:50.177 --> 00:26:52.679 line:-2
Since acquiring exclusive control
is asynchronous,


527
00:26:52.713 --> 00:26:56.617 line:-2
we need to hang on to the temporary file
the extension just vended us.


528
00:26:56.650 --> 00:26:59.620 line:-2
As you can see,
I'm accomplishing this by moving the file


529
00:26:59.653 --> 00:27:03.590 line:-2
into a temporary location
that will outlive this function's scope.


530
00:27:03.624 --> 00:27:06.894 line:-2
I'll also add a Swift defer
to ensure that the ephemeral file


531
00:27:06.927 --> 00:27:09.763 line:-2
that the extension downloads
is always cleaned up.


532
00:27:09.796 --> 00:27:11.732 line:-2
Although the system will
delete the file for you,


533
00:27:11.765 --> 00:27:15.002 line:-1
it's best practice to manage it yourself.


534
00:27:15.035 --> 00:27:16.904 line:-2
I'll then load the manifest
from the app group


535
00:27:16.937 --> 00:27:19.439 line:-1
and verify its validity.


536
00:27:19.473 --> 00:27:22.042 line:-2
The extension will then check
to make sure the downloaded identifier


537
00:27:22.075 --> 00:27:27.047 line:-2
being processed matches a session
that is expected in the manifest.


538
00:27:27.080 --> 00:27:30.551 line:-2
Then the extension will move that file
from its ephemeral location


539
00:27:30.584 --> 00:27:34.855 line:-2
to its final destination
inside the app group.


540
00:27:34.888 --> 00:27:37.591 line:-2
A LocalSession is then constructed
to quickly validate


541
00:27:37.624 --> 00:27:41.228 line:-2
that the session is downloaded
into its appropriate location.


542
00:27:41.261 --> 00:27:44.264 line:-2
The last thing to handle
are failed downloads.


543
00:27:46.400 --> 00:27:48.735 line:-2
An important thing
that is commonly forgotten


544
00:27:48.769 --> 00:27:51.438 line:-2
is that if a BAManifestURL
fails to download,


545
00:27:51.471 --> 00:27:53.674 line:-2
the extension is actually notified
about it.


546
00:27:53.707 --> 00:27:55.876 line:-1
Its type inherits from BAURLDownload.


547
00:27:55.909 --> 00:27:58.478 line:-2
However, that's not
its exact internal type.


548
00:27:58.512 --> 00:28:01.448 line:-2
Therefore, the extension filters
to ensure its only dealing


549
00:28:01.481 --> 00:28:04.751 line:-1
with BAURLDownload objects.


550
00:28:04.785 --> 00:28:07.321 line:-2
Since essential assets download
in the foreground,


551
00:28:07.354 --> 00:28:09.623 line:-2
they only wait a few seconds
for network connectivity


552
00:28:09.656 --> 00:28:12.793 line:-2
since those downloads impact
app installation progress.


553
00:28:12.826 --> 00:28:14.995 line:-2
Therefore,
it can be a good idea to re-enqueue


554
00:28:15.028 --> 00:28:19.032 line:-2
essential downloads as nonessential
if they happen to fail.


555
00:28:19.066 --> 00:28:21.168 line:-2
One way you can easily convert
an essential download


556
00:28:21.201 --> 00:28:25.305 line:-2
into being nonessential is to use
the new removingEssential() function.


557
00:28:25.339 --> 00:28:28.242 line:-2
That function returns
a nonessential copy.


558
00:28:28.275 --> 00:28:30.310 line:-2
You then vend that copy
to BADownloadManager's


559
00:28:30.344 --> 00:28:31.979 line:-1
scheduleDownload function.


560
00:28:32.012 --> 00:28:35.949 line:-2
The system will then fetch the download
at an opportune time.


561
00:28:35.983 --> 00:28:39.453 line:-2
Now that our app and its extension
have fully adopted Background Assets,


562
00:28:39.486 --> 00:28:40.921 line:-1
let's add some UI that indicates


563
00:28:40.954 --> 00:28:43.690 line:-2
that a specific session was downloaded
as essential.


564
00:28:45.592 --> 00:28:49.196 line:-2
Remember, essential means
that app installation and app update


565
00:28:49.229 --> 00:28:52.466 line:-2
prohibit app launch
until the assets are fully downloaded.


566
00:28:52.499 --> 00:28:55.602 line:-2
However, since the app being blocked
from launching only occurs


567
00:28:55.636 --> 00:28:58.572 line:-2
during an install from the App Store
or TestFlight,


568
00:28:58.605 --> 00:29:02.576 line:-2
having an indicator present
is a good way to visibly recognize this.


569
00:29:02.609 --> 00:29:06.446 line:-2
This indicator will be implemented
in SwiftUI within the VideoSelector view.


570
00:29:08.682 --> 00:29:10.951 line:-2
If the session is marked as essential
in the manifest,


571
00:29:10.984 --> 00:29:13.554 line:-2
a green circle is drawn
in the navigation view.


572
00:29:13.587 --> 00:29:16.123 line:-1
And that's all there is to it.


573
00:29:16.156 --> 00:29:19.560 line:-2
Now that you've seen just how easy it is
to implement Background Assets,


574
00:29:19.593 --> 00:29:21.195 line:-2
let's take a look
at debugging the extension


575
00:29:21.228 --> 00:29:23.397 line:-1
and simulating its entry points.


576
00:29:23.430 --> 00:29:25.632 line:-2
As I discussed earlier,
the extension launches


577
00:29:25.666 --> 00:29:29.870 line:-2
during an app install, app update,
or periodically in the background.


578
00:29:29.903 --> 00:29:32.105 line:-2
Since app installation is controlled
by the App Store


579
00:29:32.139 --> 00:29:34.274 line:-2
and periodic events are controlled
by the device,


580
00:29:34.308 --> 00:29:37.578 line:-2
you'll need a way to force your extension
to launch in order to debug it.


581
00:29:38.912 --> 00:29:42.516 line:-2
Fortunately, our team has created
a tool that ships with Xcode,


582
00:29:42.549 --> 00:29:46.787 line:-2
which can be used to launch the extension
and simulate its entry points.


583
00:29:46.820 --> 00:29:49.156 line:-2
The tool is accessible from Terminal
and can be launched


584
00:29:49.189 --> 00:29:52.226 line:-1
by entering xcrun backgroundassets-debug.


585
00:29:52.259 --> 00:29:56.263 line:-2
There is also help information
and a man page that goes along with it.


586
00:29:56.296 --> 00:29:59.700 line:-2
When using backgroundassets-debug,
you pass in a simulate argument


587
00:29:59.733 --> 00:30:03.670 line:-2
that provides the ability to trigger
different types of BAContentRequests.


588
00:30:03.704 --> 00:30:06.874 line:-2
When any of these simulation messages
are sent to the device,


589
00:30:06.907 --> 00:30:11.211 line:-2
your extension's runtime is reset
to help ease your debugging.


590
00:30:11.245 --> 00:30:13.547 line:-2
backgroundassets-debug
provides numerous features,


591
00:30:13.580 --> 00:30:16.483 line:-1
including support for multiple devices.


592
00:30:16.517 --> 00:30:18.852 line:-2
As long as the device is paired
with your Mac,


593
00:30:18.886 --> 00:30:21.121 line:-1
it can be used to simulate your extension.


594
00:30:21.154 --> 00:30:23.891 line:-2
These commands may be sent
over Bluetooth or Wi-Fi


595
00:30:23.924 --> 00:30:28.328 line:-2
so that your device doesn't have to be
tethered to your Mac via USB.


596
00:30:28,362 --> 00:30:31,965
Lastly, Developer Mode must be
turned on in order for the device


597
00:30:31,999 --> 00:30:35,402
to honor simulation events
triggered by backgroundassets-debug.


598
00:30:35,435 --> 00:30:38,605
This can be easily enabled
from the Privacy & Security section


599
00:30:38,639 --> 00:30:41,041
within your device's Settings app.


600
00:30:41.074 --> 00:30:44.278 line:-2
Now let's take a look at using
the backgroundassets-debug tool


601
00:30:44.311 --> 00:30:47.681 line:-1
with the demo app we just built.


602
00:30:47.714 --> 00:30:49.183 line:-1
Here we are in Terminal.


603
00:30:49.216 --> 00:30:50.817 line:-1
Since Xcode is installed on this Mac,


604
00:30:50.851 --> 00:30:53.887 line:-2
I'll go ahead and list
the connected devices.


605
00:30:53.921 --> 00:30:56.456 line:-2
You'll see that there is currently
only one connected device,


606
00:30:56.490 --> 00:30:58.659 line:-1
and that happens to be my iPhone.


607
00:30:58.692 --> 00:31:03.230 line:-2
You'll want to copy the device's UUID
that you are choosing to simulate against.


608
00:31:03.263 --> 00:31:07.100 line:-2
In the arguments provided,
you see that the device's UUID is present


609
00:31:07.134 --> 00:31:09.203 line:-1
along with the app's bundle identifier.


610
00:31:09.236 --> 00:31:11.738 line:-2
I'll be invoking the tool
using the simulate argument


611
00:31:11.772 --> 00:31:13.941 line:-1
mixed with the app-install argument.


612
00:31:13.974 --> 00:31:15.642 line:-1
This will cause the app extension to wake


613
00:31:15.676 --> 00:31:19.546 line:-2
as if it's being awoken
during an initial app-install event.


614
00:31:19.580 --> 00:31:21.348 line:-2
Now that I've pressed enter,
the tool tells you


615
00:31:21.381 --> 00:31:24.551 line:-2
that the app-install event
has been sent to the device.


616
00:31:24.585 --> 00:31:27.788 line:-2
Let's launch the app
and see what it looks like.


617
00:31:30.257 --> 00:31:33.727 line:-2
As you can see, all of the session videos
have been enqueued for download.


618
00:31:33.760 --> 00:31:36.697 line:-2
Some of them, as I'm speaking,
have already finished downloading.


619
00:31:36.730 --> 00:31:39.499 line:-1
And that's Background Assets in action.


620
00:31:39.533 --> 00:31:41.735 line:-2
If you're like me,
you've probably already started thinking


621
00:31:41.768 --> 00:31:45.405 line:-2
about the many potential ways
to reduce waiting in your apps.


622
00:31:45.439 --> 00:31:47.875 line:-2
Now that I showed you
how to debug your app extension,


623
00:31:47.908 --> 00:31:50.177 line:-2
let's take a look
at some important things to remember.


624
00:31:51.612 --> 00:31:53.947 line:-1
Essential assets download with the app


625
00:31:53.981 --> 00:31:56.350 line:-2
and contribute
to app installation progress.


626
00:31:56.383 --> 00:31:59.419 line:-2
Therefore, these types of assets
are only schedulable


627
00:31:59.453 --> 00:32:04.157 line:-2
during a BAContentRequest install
or update event within the extension.


628
00:32:04.191 --> 00:32:07.261 line:-2
If any essential downloads
that were enqueued by the extension fail,


629
00:32:07.294 --> 00:32:10.197 line:-2
the app will
eventually still become launchable.


630
00:32:10.230 --> 00:32:13.767 line:-2
You must ensure that you re-enqueue
your essential downloads as nonessential


631
00:32:13.800 --> 00:32:16.103 line:-2
either within the extension
or on first app launch


632
00:32:16.136 --> 00:32:18.639 line:-1
if you require those assets.


633
00:32:18.672 --> 00:32:21.041 line:-2
Any downloads not marked as essential
are downloaded


634
00:32:21.074 --> 00:32:26.280 line:-2
after the app is installed or updated
and receive background download priority.


635
00:32:26.313 --> 00:32:27.781 line:-1
It's also important to remember


636
00:32:27.814 --> 00:32:30.717 line:-2
that the extension is limited
by its memory usage.


637
00:32:30.751 --> 00:32:33.587 line:-2
So make sure to debug your extension
to ensure that the code you write


638
00:32:33.620 --> 00:32:35.889 line:-1
is well below the memory threshold.


639
00:32:35.923 --> 00:32:39.426 line:-2
If your extension uses excessive memory,
you will notice that it will crash


640
00:32:39.459 --> 00:32:41.728 line:-1
with a memory exception while debugging.


641
00:32:41.762 --> 00:32:43.997 line:-2
If the extension crashes
during an app install


642
00:32:44.031 --> 00:32:46.099 line:-1
or app update content request,


643
00:32:46.133 --> 00:32:49.036 line:-2
then the app will become
immediately launchable.


644
00:32:49.069 --> 00:32:51.872 line:-2
And finally,
remember to make your app a good citizen


645
00:32:51.905 --> 00:32:54.741 line:-2
by managing the assets
it downloads appropriately.


646
00:32:54.775 --> 00:32:57.044 line:-2
One way to manage those assets
is by placing them


647
00:32:57.077 --> 00:32:59.513 line:-1
into your app's caches directory.


648
00:32:59.546 --> 00:33:01.949 line:-2
So that's what we have this year
for Background Assets.


649
00:33:01.982 --> 00:33:04.017 line:-2
If there's anything
you should take away from this session,


650
00:33:04.051 --> 00:33:06.920 line:-1
it's to eliminate waiting in your apps.


651
00:33:06.954 --> 00:33:10.224 line:-2
One way you can eliminate waiting
is by adopting Background Assets


652
00:33:10.257 --> 00:33:12.726 line:-2
and using
the new essential assets feature.


653
00:33:12.759 --> 00:33:16.496 line:-2
Make sure to utilize TestFlight before
submitting the app to the App Store.


654
00:33:16.530 --> 00:33:19.132 line:-2
By using TestFlight,
you'll be able to see what it looks like


655
00:33:19.166 --> 00:33:22.002 line:-2
when your essential assets download
with your app.


656
00:33:22.035 --> 00:33:24.505 line:-2
If at any point you find yourself
with questions,


657
00:33:24.538 --> 00:33:26.440 line:-2
please check out
the developer documentation


658
00:33:26.473 --> 00:33:29.843 line:-2
and feel free to reach out
on the Apple Developer Forums.


659
00:33:29.877 --> 00:33:32.746 line:-2
I'd also like to encourage you
to utilize Feedback Assistant.


660
00:33:32.779 --> 00:33:35.015 line:-2
Our team is constantly improving
Background Assets,


661
00:33:35.048 --> 00:33:38.485 line:-2
and we're looking forward
to having you adopt it into your app.


662
00:33:38,519 --> 00:33:41,355
Oh, and if you haven't already,
I'd recommend checking out


663
00:33:41,388 --> 00:33:44,124
my prior session where
Background Assets was introduced.


664
00:33:44,157 --> 00:33:47,194
There's a lot
of additional information in there.


665
00:33:47.227 --> 00:33:49.096 line:-2
And with that,
thanks for joining me today.


666
00:33:49.129 --> 00:33:51.765 line:-2
On behalf of everyone at Apple,
thanks for watching.

