2
00:00:00,334 --> 00:00:06,340 line:-1
♪ ♪


3
00:00:10.511 --> 00:00:12.279 line:-1 align:center
Adam: Hi, I'm Adam.


4
00:00:12.312 --> 00:00:15.949 line:-2 align:center
In this video, I'll be covering
how your app can help people


5
00:00:15,983 --> 00:00:18,685 line:-2
manage their time
with Calendar and EventKit.


6
00:00:18,719 --> 00:00:22,890 line:-2
First, I'll go over some ways
that apps can integrate with Calendar


7
00:00:22.923 --> 00:00:26.193 line:-2 align:center
and give an overview
of the frameworks involved.


8
00:00:26,226 --> 00:00:29,463 line:-2
Then I'll walk
through some specific examples of how


9
00:00:29.496 --> 00:00:32.499 line:-2 align:center
to use these frameworks
to implement common features,


10
00:00:32,533 --> 00:00:36,603 line:-2
like adding events,
fetching events with full access,


11
00:00:36,637 --> 00:00:39,806 line:-2
and implementing
a virtual conference extension.


12
00:00:41,175 --> 00:00:44,044 line:-2
People rely on their calendar
to keep track of their time


13
00:00:44,077 --> 00:00:48,415 line:-2
and plan for their future,
but Calendar is more than just one app.


14
00:00:48.448 --> 00:00:52.519 line:-2 align:center
There are different roles that apps
can fill when integrating with Calendar,


15
00:00:52,553 --> 00:00:55,389 line:-2
and when put together,
these different roles provide


16
00:00:55.422 --> 00:00:58.292 line:-1 align:center
for a richer Calendar experience.


17
00:00:58.325 --> 00:01:04.198 line:-2 align:center
Some apps support making reservations,
buying tickets, or arranging meetups.


18
00:01:04,231 --> 00:01:07,100 line:-1
They take part by adding events.


19
00:01:07.134 --> 00:01:10.237 line:-2 align:center
Some apps participate
by displaying events,


20
00:01:10,270 --> 00:01:13,807 line:-2
maybe for a custom
calendar widget or a planner.


21
00:01:15.609 --> 00:01:18.712 line:-1 align:center
Other apps contribute in both directions.


22
00:01:18.745 --> 00:01:23.517 line:-2 align:center
They help people manage their schedule
by viewing and editing events.


23
00:01:24,885 --> 00:01:29,223 line:-2
Apps that support voice
or video calls can also take part.


24
00:01:29,256 --> 00:01:32,593 line:-2
A virtual conference extension
not only improves the experience


25
00:01:32,626 --> 00:01:33,961 line:-1
in the Calendar app,


26
00:01:33.994 --> 00:01:37.764 line:-2 align:center
but it also provides a shortcut
back into your app.


27
00:01:39,366 --> 00:01:44,404 line:-3
All of these fit together to provide
a cohesive experience for managing time.


28
00:01:44,438 --> 00:01:47,474 line:-3
Later, I'll walk
through some specific examples


29
00:01:47,508 --> 00:01:50,010 line:-2
to get started in each of these areas.


30
00:01:51.812 --> 00:01:53.881 line:-2 align:center
There are two frameworks
that you can use


31
00:01:53.914 --> 00:01:56.416 line:-1 align:center
to integrate with Calendar.


32
00:01:56,450 --> 00:02:00,854 line:-2
The EventKit framework is used
to work directly with calendar data.


33
00:02:00.888 --> 00:02:04.691 line:-2 align:center
EventKitUI is an iOS
and Mac Catalyst framework


34
00:02:04,725 --> 00:02:09,830 line:-2
that provides view controllers
for showing calendar UI in your app.


35
00:02:09,863 --> 00:02:12,099 line:-1
Let's take a closer look at each...


36
00:02:13,834 --> 00:02:16,670 line:0
Starting with some
of the basic types in EventKit.


37
00:02:17,771 --> 00:02:22,376 align:center
The EKEventStore is the main point
of contact for your calendar data.


38
00:02:22,409 --> 00:02:27,447 align:center
You use an event store to request
access and to fetch or save.


39
00:02:27,481 --> 00:02:31,084 align:center
You should only have one of these
for your application.


40
00:02:31,118 --> 00:02:34,955 align:center
The EKEvent class
represents a specific event,


41
00:02:34,988 --> 00:02:38,258 align:center
and it has properties like title,
start date,


42
00:02:38,292 --> 00:02:40,961 line:0
end date, and location.


43
00:02:40,994 --> 00:02:43,397 align:center
Each event belongs to a calendar,


44
00:02:43,430 --> 00:02:46,567 align:center
which is represented
by the EKCalendar class.


45
00:02:46,600 --> 00:02:48,735 line:0
Calendars have a title and color,


46
00:02:48,769 --> 00:02:52,005 line:0
which can be useful
for coloring the events.


47
00:02:52,039 --> 00:02:56,210 align:center
Finally, each calendar account
is represented by an EKSource,


48
00:02:56,243 --> 00:02:58,779 line:0
which is a collection of calendars.


49
00:02:58,812 --> 00:03:02,783 line:0
Sources are useful for grouping calendars
in your UI.


50
00:03:04.017 --> 00:03:08.555 line:-2 align:center
EventKit is a foundational framework
for interacting with calendar data.


51
00:03:08,589 --> 00:03:14,328 line:-2
EventKitUI is built on top of EventKit
to provide some useful built-in views.


52
00:03:15,262 --> 00:03:16,930 line:-1
There are three view controllers


53
00:03:16,964 --> 00:03:19,766 line:-1
provided by EventKitUI.


54
00:03:19.800 --> 00:03:22.035 line:-1 align:center
The EKEventEditViewController


55
00:03:22,069 --> 00:03:24,338 line:-1
shows an event editor.


56
00:03:24.371 --> 00:03:26.507 line:-1 align:center
Use this to add a new event


57
00:03:26.540 --> 00:03:29.276 line:-1 align:center
or make changes to an existing event.


58
00:03:30.210 --> 00:03:32.112 line:-1 align:center
The EKEventViewController


59
00:03:32,145 --> 00:03:34,214 line:-1
shows event details.


60
00:03:34,248 --> 00:03:36,750 line:-1
Use this to show information in your app


61
00:03:36,783 --> 00:03:39,319 line:-1
about an existing event.


62
00:03:39,353 --> 00:03:41,655 line:-1
And the EKCalendarChooser shows


63
00:03:41,688 --> 00:03:43,690 line:-1
a calendar list and supports either


64
00:03:43.724 --> 00:03:46.960 line:-1 align:center
single selection or multiple selection.


65
00:03:46.994 --> 00:03:49.329 line:-1 align:center
Use this to let people choose


66
00:03:49,363 --> 00:03:50,797 line:-1
a calendar to add an event to


67
00:03:50,831 --> 00:03:52,232 line:-1
or choose which calendars


68
00:03:52,266 --> 00:03:54,201 line:-1
should be visible in your app.


69
00:03:55,369 --> 00:03:58,405 line:-2
Calendars are private,
so the system prevents apps


70
00:03:58,438 --> 00:04:02,309 line:-2
from reading or writing Calendar events
without permission.


71
00:04:02.342 --> 00:04:06.547 line:-2 align:center
There are three levels of access
that an app can have for Calendar:


72
00:04:06,580 --> 00:04:12,019 line:-2
No access,
write-only access, or full access.


73
00:04:12.052 --> 00:04:16.657 line:-2 align:center
Apps with no calendar access
can add events using EventKitUI


74
00:04:16,690 --> 00:04:19,293 line:-1
or Siri Event Suggestions.


75
00:04:19,326 --> 00:04:24,531 line:-2
Apps with write-only access
can add events directly using EventKit.


76
00:04:25.365 --> 00:04:30.404 line:-2 align:center
And apps with full access
can fetch or modify existing events,


77
00:04:30.437 --> 00:04:34.808 line:-2 align:center
access existing calendars,
and create new calendars.


78
00:04:36,543 --> 00:04:39,246 line:-2
One of the most common ways
to integrate with Calendar


79
00:04:39,279 --> 00:04:41,448 line:-1
is to add new events.


80
00:04:42.349 --> 00:04:46.186 line:-2 align:center
Events can be added
to the calendar in a few different ways.


81
00:04:46,220 --> 00:04:51,758 line:-2
Use EventKitUI or Siri Event Suggestions
to add one event at a time.


82
00:04:51,792 --> 00:04:55,195 line:-1
Or, to save events directly, use EventKit.


83
00:04:56.029 --> 00:04:58.665 line:-2 align:center
The simplest way
to add an event to the calendar


84
00:04:58.699 --> 00:05:02.169 line:-1 align:center
is to let EventKitUI do most of the work.


85
00:05:02,202 --> 00:05:05,939 line:-2
Present an EKEventEditViewController
to show an editor


86
00:05:05,973 --> 00:05:08,575 line:-1
with the event details filled out.


87
00:05:08.609 --> 00:05:12.479 line:-2 align:center
This gives people a chance
to choose a calendar or make other changes


88
00:05:12,513 --> 00:05:15,816 line:-1
before deciding whether to save the event.


89
00:05:15,849 --> 00:05:19,853 line:-2
In iOS 17,
this UI runs in a separate process,


90
00:05:19.887 --> 00:05:23.357 line:-2 align:center
which means you don't need
to request Calendar access.


91
00:05:25,592 --> 00:05:29,663 line:-2
Adding an event with EventKitUI
is a four-step process.


92
00:05:29,696 --> 00:05:32,399 line:-1
First, create an event store.


93
00:05:32,432 --> 00:05:36,570 line:-2
Next,
create an event and fill in the details.


94
00:05:36,603 --> 00:05:41,108 line:-2
Then create a view controller
configured to edit the event.


95
00:05:41,141 --> 00:05:44,278 line:-1
And finally, present the view controller.


96
00:05:45,145 --> 00:05:46,880 line:-1
Let's walk through this in more detail


97
00:05:46.914 --> 00:05:48.749 line:-1 align:center
with some code.


98
00:05:48,782 --> 00:05:52,052 line:-1
Start by creating an eventStore.


99
00:05:52,085 --> 00:05:56,256 line:-2
Next,
create an event and fill in the details.


100
00:05:56.290 --> 00:06:00.260 line:-2 align:center
The details you set here
will be used in the editor UI.


101
00:06:00.294 --> 00:06:04.798 line:-2 align:center
Once the editor is presented,
people will have a chance to make changes,


102
00:06:04.831 --> 00:06:08.302 line:-2 align:center
but ideally, they can just tap
the add button to confirm,


103
00:06:08,335 --> 00:06:12,005 line:-2
so filling in the right details
saves them time.


104
00:06:12.840 --> 00:06:15.075 line:-1 align:center
Every event needs a title.


105
00:06:15,108 --> 00:06:19,413 line:-2
The title is used in many places
including widgets and notifications,


106
00:06:19,446 --> 00:06:21,281 line:-1
so keep it simple.


107
00:06:22,316 --> 00:06:26,420 line:-2
The most important properties
are the start and end date.


108
00:06:26.453 --> 00:06:29.623 line:-2 align:center
Use date components
to make the start date.


109
00:06:30,757 --> 00:06:32,759 line:-1
Once you have the start date,


110
00:06:32,793 --> 00:06:36,096 line:-2
calculate the end date
by adding the duration.


111
00:06:36,129 --> 00:06:40,300 line:-2
Use Foundation's Calendar
and DateComponents types for date math,


112
00:06:40,334 --> 00:06:44,705 line:-2
or else, you'll hit surprising results
around Daylight Saving Time.


113
00:06:44.738 --> 00:06:48.375 line:-2 align:center
Here the sample adds
two hours to our start date.


114
00:06:49,476 --> 00:06:52,446 line:-2
If the event takes place
in a specific time zone,


115
00:06:52.479 --> 00:06:54.648 line:-1 align:center
then be sure to set that as well.


116
00:06:54,681 --> 00:06:58,619 line:-2
The default time zone
will be the current system time zone.


117
00:06:59.686 --> 00:07:03.957 line:-2 align:center
Set a location to let people know
where the event takes place.


118
00:07:03,991 --> 00:07:07,194 line:-2
Including a full address
or using a MapKit handle


119
00:07:07,227 --> 00:07:11,765 line:-2
will enable features like Maps suggestions
and Time to Leave alerts.


120
00:07:12.533 --> 00:07:16.637 line:-2 align:center position:49%
Finally, add some notes
to provide some extra detail.


121
00:07:17.671 --> 00:07:19.473 line:-1 align:center
Once you've set the event properties,


122
00:07:19,506 --> 00:07:23,710 line:-2
the next step is to create
the EKEventEditViewController.


123
00:07:23,744 --> 00:07:26,880 line:-2
Assign the event
and event store properties.


124
00:07:27,748 --> 00:07:31,618 line:-2
In the editor, people can
either add the event or cancel.


125
00:07:31,652 --> 00:07:34,054 line:-2
If you want to know
whether they added the event,


126
00:07:34.087 --> 00:07:35.756 line:-1 align:center
then use the delegate property


127
00:07:35.789 --> 00:07:39.860 line:-2 align:center
and implement
the EKEventEditViewDelegate protocol.


128
00:07:40.994 --> 00:07:43.530 line:-1 align:center
Finally, present the editor.


129
00:07:43,564 --> 00:07:47,501 line:-2
At this point,
the event isn't in the calendar yet.


130
00:07:47.534 --> 00:07:50.337 line:-1 align:center
Tapping the Add button will save it,


131
00:07:50,370 --> 00:07:55,342 line:-2
while tapping on cancel will dismiss
the editor without saving anything.


132
00:07:56,210 --> 00:08:00,113 line:-4
For a more complete example
of adding events with EventKitUI,


133
00:08:00,147 --> 00:08:02,249 line:-3
check out the "DropInLessons" target


134
00:08:02.282 --> 00:08:06.587 line:-4 align:center
in the "Accessing Calendar using
EventKit and EventKitUI" sample code.


135
00:08:07.521 --> 00:08:11.458 line:-4 align:center
Another way to add events to the calendar
is to use Siri Event Suggestions


136
00:08:11,491 --> 00:08:14,194 line:-1
for reservations made in your app.


137
00:08:14.228 --> 00:08:18.498 line:-2 align:center
The Siri Event Suggestions API
is part of the Intents Framework.


138
00:08:18,532 --> 00:08:21,368 line:-2
It doesn't require prompting
for Calendar access,


139
00:08:21.401 --> 00:08:24.404 line:-1 align:center
and it doesn't show any UI in your app.


140
00:08:24.438 --> 00:08:29.543 line:-2 align:center
Instead, these events will appear
in the Calendar inbox like an invitation.


141
00:08:29,576 --> 00:08:33,313 line:-2
They can then be either added
to a calendar or ignored.


142
00:08:34.982 --> 00:08:40.287 line:-2 align:center
Siri Event Suggestions support
reservations for restaurants or hotels,


143
00:08:40.320 --> 00:08:43.323 line:-2 align:center
travel bookings
like flights or rental cars,


144
00:08:43.357 --> 00:08:47.227 line:-2 align:center
and ticketed events
like concerts or sporting events.


145
00:08:47,261 --> 00:08:50,264 line:-2
If the reservation
is later canceled or modified,


146
00:08:50,297 --> 00:08:52,633 line:-1
the events can be updated.


147
00:08:53.967 --> 00:08:58.672 line:-2 align:center
Using the Siri Event Suggestions API
is a four-step process.


148
00:08:58.705 --> 00:09:02.042 line:-1 align:center
First, create an INReservation.


149
00:09:02.075 --> 00:09:06.980 line:-2 align:center
Then, wrap the reservation
in an intent and response.


150
00:09:07,014 --> 00:09:10,350 line:-1
Next, create an INInteraction.


151
00:09:10,384 --> 00:09:14,388 align:center
Finally,
donate the interaction to the system.


152
00:09:14,421 --> 00:09:16,490 line:0
Let's dive into some sample code.


153
00:09:17,457 --> 00:09:22,996 line:-2
A reservation requires a unique reference
that the system will use to identify it.


154
00:09:23.030 --> 00:09:27.267 line:-2 align:center
Create that reference by making
an instance of INSpeakableString


155
00:09:27,301 --> 00:09:31,972 line:-2
with a unique vocabulary identifier
and a spoken phrase.


156
00:09:32,005 --> 00:09:36,543 line:-2
The phrase can be used to refer
to this reservation when talking to Siri.


157
00:09:37,945 --> 00:09:43,884 line:-2
Use INDateComponentsRange to set the start
and end time for the reservation.


158
00:09:45.285 --> 00:09:49.690 line:-2 align:center
Give the event a location
using the CLPlacemark type.


159
00:09:51.058 --> 00:09:54.461 line:-2 align:center
Then, put that all together
by creating an instance of one


160
00:09:54,494 --> 00:09:57,631 line:-1
of the subclasses of INReservation.


161
00:09:57.664 --> 00:10:03.103 line:-2 align:center
For a restaurant reservation,
use INRestaurantReservation.


162
00:10:03,136 --> 00:10:07,074 line:-2
This initializer has a few
more optional arguments that aren't shown,


163
00:10:07,107 --> 00:10:10,744 line:-2
and each subclass
has its own specific options.


164
00:10:10,777 --> 00:10:13,847 line:0
Check out the documentation to learn more.


165
00:10:15,282 --> 00:10:16,884 align:center
The next step is to create


166
00:10:16.917 --> 00:10:22.022 line:-2 align:center
an INGetReservationDetailsIntent
with the reservation reference.


167
00:10:22.990 --> 00:10:27.661 line:-2 align:center
Then create
an INGetReservationDetailsIntentResponse


168
00:10:27,694 --> 00:10:30,030 line:-1
with the reservation object.


169
00:10:31,231 --> 00:10:36,436 line:-2
Next, create an INInteraction
with the intent and response.


170
00:10:37,504 --> 00:10:41,642 line:-2
Finally, invoke
the interaction's donate method.


171
00:10:43,677 --> 00:10:46,914 line:-2
This example only scratches
the surface of what can be done


172
00:10:46.947 --> 00:10:49.082 line:-1 align:center
with Siri Event Suggestions.


173
00:10:49,116 --> 00:10:52,419 line:-4
For more information
about creating Siri Event Suggestions,


174
00:10:52.452 --> 00:10:58.091 line:-4 align:center
check out the "Broaden your reach with
Siri Event Suggestions" video from WWDC20.


175
00:10:59,026 --> 00:11:02,930 line:-2
EventKitUI or Siri Event Suggestions
provide the best experience


176
00:11:02.963 --> 00:11:04.498 line:-1 align:center
for adding events.


177
00:11:04,531 --> 00:11:10,404 line:-2
Use write-only access only if your app
needs to show a custom editing UI,


178
00:11:10.437 --> 00:11:13.140 line:-1 align:center
add multiple events at the same time,


179
00:11:13.173 --> 00:11:16.810 line:-2 align:center
or add events to the calendar
without user interaction.


180
00:11:17.945 --> 00:11:20.147 line:-1 align:center
To request write-only access,


181
00:11:20.180 --> 00:11:24.585 line:-2 align:center
include the NSCalendarsWriteOnlyAccess
UsageDescription key


182
00:11:24,618 --> 00:11:29,289 line:-2
in your Info.plist to explain
why your app needs access.


183
00:11:29,323 --> 00:11:32,326 line:-2
This string will be shown
in the request prompt.


184
00:11:32.359 --> 00:11:35.362 line:-2 align:center
Here is the prompt
for our sample application:


185
00:11:35.395 --> 00:11:38.966 line:-2 align:center
"Save repeating lessons
to a calendar that you choose."


186
00:11:39,967 --> 00:11:43,437 line:-2
Write-only access
also has some limitations.


187
00:11:43,470 --> 00:11:47,474 line:-2
For one,
people may choose not to allow access.


188
00:11:47,508 --> 00:11:52,446 line:-2
If access is granted, then the app
still cannot read any existing events


189
00:11:52,479 --> 00:11:57,017 line:-2
from the calendar,
including events added by the same app.


190
00:11:57,050 --> 00:12:02,155 line:-2
The app also can't read the calendar list
or create new calendars.


191
00:12:02.189 --> 00:12:06.727 line:-2 align:center
Write-only access is new
in iOS 17 and macOS Sonoma.


192
00:12:06,760 --> 00:12:10,063 line:-4
To learn more
about how this affects existing apps,


193
00:12:10.097 --> 00:12:13.267 line:-4 align:center
check out
the "What's new in Privacy" video.


194
00:12:16.136 --> 00:12:19.339 line:-2 align:center
Adding a new event
with write-only access will look similar


195
00:12:19.373 --> 00:12:22.042 line:-1 align:center
to adding a new event using EventKitUI.


196
00:12:22,075 --> 00:12:25,612 line:-2
It starts out the same:
Create an event store.


197
00:12:25.646 --> 00:12:29.149 line:-1 align:center
Then request write-only access.


198
00:12:29,183 --> 00:12:30,918 line:-1
If access was granted,


199
00:12:30,951 --> 00:12:34,321 line:-2
create a new event
and fill in the details.


200
00:12:34.354 --> 00:12:36.823 line:-1 align:center
Lastly, save the event.


201
00:12:37,758 --> 00:12:39,860 line:-1
Let's check that out in more detail.


202
00:12:40,827 --> 00:12:43,931 line:-1
Start by creating an event store.


203
00:12:43,964 --> 00:12:49,736 line:-2
Then, request write-only access by calling
the requestWriteOnlyAccessToEvents method.


204
00:12:50,470 --> 00:12:54,341 line:-2
The return value indicates
whether access was granted.


205
00:12:54,374 --> 00:12:58,779 line:-2
People can choose to deny access,
so be sure to handle that gracefully.


206
00:12:59.680 --> 00:13:03.684 line:-2 align:center
Access requests are most likely
to be approved when people understand


207
00:13:03,717 --> 00:13:07,354 line:-2
why your app needs access,
so you should request access


208
00:13:07,387 --> 00:13:11,091 line:-2
when someone has first interacted
with a feature that requires it.


209
00:13:11,925 --> 00:13:15,896 align:center
Next,
create an event and fill in the details.


210
00:13:15,929 --> 00:13:18,398 line:0
There's another important difference here.


211
00:13:18,432 --> 00:13:20,300 line:0
When using EventKitUI,


212
00:13:20,334 --> 00:13:23,437 line:0
the details you fill in
will show up in an editor,


213
00:13:23,470 --> 00:13:27,374 line:0
and anything not filled in
gets a default value.


214
00:13:27,407 --> 00:13:30,344 line:-2
When saving an event directly
with EventKit,


215
00:13:30,377 --> 00:13:32,546 line:-1
nothing will be filled in for you.


216
00:13:32,579 --> 00:13:35,849 line:-1
What you set is what will be saved.


217
00:13:35,883 --> 00:13:38,719 line:-2
There are some properties
that must be filled in,


218
00:13:38,752 --> 00:13:40,254 line:-1
or the save will fail.


219
00:13:41.288 --> 00:13:44.625 line:-1 align:center
One required property is the calendar.


220
00:13:44.658 --> 00:13:48.095 line:-2 align:center
Use the event store's
defaultCalendarForNewEvents property


221
00:13:48,128 --> 00:13:51,698 line:-2
to use the calendar
configured as the default in settings.


222
00:13:52,933 --> 00:13:58,672 line:-2
The other required properties are title,
start date, and end date.


223
00:13:58.705 --> 00:14:00.474 line:-1 align:center
Everything else is optional,


224
00:14:00,507 --> 00:14:03,210 line:-2
but it's good to fill out
as much as possible.


225
00:14:05,045 --> 00:14:06,914 line:-1
Once the details are filled in,


226
00:14:06.947 --> 00:14:10.951 line:-2 align:center
save the event using
the event store's save method.


227
00:14:12,352 --> 00:14:15,656 line:-4
To see a full example
of adding events with EventKit,


228
00:14:15.689 --> 00:14:17.724 line:-3 align:center
check out the "RepeatingLessons" target


229
00:14:17,758 --> 00:14:22,462 line:-4
in the "Accessing Calendar using
EventKit and EventKitUI" sample project.


230
00:14:23.630 --> 00:14:27.868 line:-2 align:center
Apps that want to add events
to the calendar should use EventKitUI,


231
00:14:27,901 --> 00:14:31,672 line:-2
Siri Event Suggestions,
or write-only access.


232
00:14:31,705 --> 00:14:35,042 line:-2
For the very few apps
that need to read calendar data,


233
00:14:35.075 --> 00:14:37.277 line:-1 align:center
there is full access.


234
00:14:38.645 --> 00:14:44.184 line:-2 align:center
Only request full access if your app has
a core feature that requires displaying,


235
00:14:44,218 --> 00:14:47,888 line:-1
updating, or removing existing events.


236
00:14:48,789 --> 00:14:50,657 line:-1
To request full access,


237
00:14:50.691 --> 00:14:54.828 line:-2 align:center
include the NSCalendars
FullAccessUsageDescription key


238
00:14:54,862 --> 00:14:57,030 line:-3
in your Info.plist.


239
00:14:57,064 --> 00:14:59,833 line:-4
This string will be shown
in the request prompt.


240
00:15:00,667 --> 00:15:04,738 line:-4
Calendars contains sensitive information,
and the prompt for full access


241
00:15:04,771 --> 00:15:07,774 line:-3
describes how much data is included.


242
00:15:07.808 --> 00:15:12.346 line:-4 align:center
It takes a lot of trust for people
to allow an app to read their calendar.


243
00:15:12.379 --> 00:15:17.084 line:-4 align:center
If people don't yet trust your app,
then the request may be denied.


244
00:15:17,117 --> 00:15:19,920 line:-2
Only request full access
if it is essential


245
00:15:19.953 --> 00:15:21.989 line:-1 align:center
to the core experience of your app,


246
00:15:22.022 --> 00:15:26.760 line:-2 align:center
and only request at a time
when it is clear why the access is needed.


247
00:15:28,829 --> 00:15:32,032 line:-2
If your app does need full access
for a core feature,


248
00:15:32.065 --> 00:15:34.735 line:-2 align:center
then it will probably need
to fetch events.


249
00:15:34.768 --> 00:15:38.438 line:-1 align:center
To do this, first create an event store.


250
00:15:38,472 --> 00:15:41,575 line:-1
Next, request full access.


251
00:15:41,608 --> 00:15:44,077 line:-1
Then, create a predicate.


252
00:15:44.111 --> 00:15:47.347 line:-2 align:center
And finally,
fetch the events from the event store.


253
00:15:48.115 --> 00:15:50.751 line:-1 align:center
Let's check out the code for that.


254
00:15:50.784 --> 00:15:55.088 line:-2 align:center
As with our other examples,
start by creating an event store.


255
00:15:55.122 --> 00:15:57.291 line:-1 align:center
Apps should only have one event store,


256
00:15:57,324 --> 00:15:59,793 line:-1
so be sure to reuse this.


257
00:15:59,826 --> 00:16:05,232 line:-2
Next, request full access by calling
the requestFullAccessToEvents method.


258
00:16:05,999 --> 00:16:10,337 line:-2
This will show a prompt and return
whether the access was allowed.


259
00:16:10.370 --> 00:16:13.140 line:-2 align:center
Full access prompts
will be denied more often,


260
00:16:13,173 --> 00:16:15,576 line:-1
so be sure to handle that.


261
00:16:15,609 --> 00:16:18,312 line:-2
Once you have full access,
create a predicate


262
00:16:18.345 --> 00:16:22.015 line:-2 align:center
by calling the event store's
predicateForEvents method.


263
00:16:22,049 --> 00:16:25,219 line:-2
The predicate describes
which events you want to fetch


264
00:16:25.252 --> 00:16:28.622 line:-2 align:center
with a date range
and an optional list of calendars.


265
00:16:28,655 --> 00:16:32,192 line:-2
This code uses a range
for the current month.


266
00:16:32.226 --> 00:16:36.396 line:-2 align:center
Use the shortest range possible
for the best performance.


267
00:16:36.430 --> 00:16:38.532 line:-1 align:center
If the calendars argument is left nil,


268
00:16:38,565 --> 00:16:41,535 line:-2
the results will include events
from all calendars.


269
00:16:42,369 --> 00:16:45,606 align:center
Finally, fetch the events
by passing the predicate


270
00:16:45,639 --> 00:16:48,108 align:center
to the event store's
events(matching:) method,


271
00:16:48,141 --> 00:16:51,612 align:center
which returns an array
of matching events.


272
00:16:51,645 --> 00:16:54,648 align:center
The events in this array
are not necessarily ordered,


273
00:16:54,681 --> 00:16:57,484 line:0
so sort the results if needed.


274
00:16:57,518 --> 00:17:00,988 align:center
If you want to play around
with a full example of fetching events,


275
00:17:01.021 --> 00:17:03.223 line:-3 align:center
then check out the "MonthlyEvents" target


276
00:17:03.257 --> 00:17:08.061 line:-4 align:center
in the "Accessing Calendar using
EventKit and EventKitUI" sample project.


277
00:17:10,163 --> 00:17:14,768 line:-2
To support releases earlier
than iOS 17 and macOS Sonoma,


278
00:17:14,801 --> 00:17:17,938 line:-1
perform a runtime availability check.


279
00:17:17,971 --> 00:17:23,977 line:-2
Call the new requestAccess methods
on iOS 17 and macOS Sonoma and beyond.


280
00:17:24.678 --> 00:17:29.149 line:-2 align:center
On earlier OSes,
call the legacy requestAccess method.


281
00:17:30,884 --> 00:17:36,857 line:-2
Additional usage strings are required
prior to iOS 17 or macOS Sonoma.


282
00:17:36.890 --> 00:17:42.896 line:-2 align:center
Include the NSCalendarsUsageDescription
key for requesting calendar access.


283
00:17:42,930 --> 00:17:46,300 line:-2
Apps that use EventKitUI
also need to include


284
00:17:46,333 --> 00:17:49,136 line:-1
the NSContactsUsageDescription key


285
00:17:49.169 --> 00:17:53.740 line:-2 align:center
because EventKitUI
will request contacts access for the app.


286
00:17:54,741 --> 00:17:57,711 line:-2
If an app is missing these strings
when requesting access,


287
00:17:57,744 --> 00:17:59,513 line:-1
then it will crash.


288
00:18:01.114 --> 00:18:05.786 line:-2 align:center
So far we've covered a few ways
to add events and how to fetch events,


289
00:18:05.819 --> 00:18:10.657 line:-2 align:center
but working with events is not
the only way to integrate with Calendar.


290
00:18:10,691 --> 00:18:13,794 line:-2
If your app supports
voice or video calls,


291
00:18:13.827 --> 00:18:15.963 line:-1 align:center
use a virtual conference extension


292
00:18:15,996 --> 00:18:19,566 line:-2
to let people add your calls
directly to their events.


293
00:18:19,600 --> 00:18:22,503 line:-2
There are two ways
that these extensions are used.


294
00:18:23,403 --> 00:18:25,839 line:-1
When adding a location to an event,


295
00:18:25.873 --> 00:18:30.377 line:-2 align:center
custom virtual conference options
will appear in the location picker.


296
00:18:30.410 --> 00:18:33.313 line:-2 align:center
This example has the options
provided by the FaceTime


297
00:18:33.347 --> 00:18:36.650 line:-1 align:center
and Skype virtual conference extensions.


298
00:18:36.683 --> 00:18:40.888 line:-2 align:center
Tapping on one of these will add
that virtual conference to the event.


299
00:18:41.822 --> 00:18:45.959 line:-2 align:center
An event that has a virtual conference
will show a custom join option


300
00:18:45.993 --> 00:18:47.728 line:-1 align:center
in the event details.


301
00:18:48,662 --> 00:18:53,100 line:-2
Making a virtual conference extension
takes just a few steps.


302
00:18:53,133 --> 00:18:58,205 line:-2
First, create a new Virtual Conference
Extension target in Xcode.


303
00:18:58.238 --> 00:19:03.177 line:-2 align:center
Then, there are two methods
in the extension protocol to implement.


304
00:19:03,210 --> 00:19:08,115 line:-2
Implement fetchAvailableRoomTypes
to provide your available room types,


305
00:19:08,148 --> 00:19:10,951 line:-1
and then implement fetchVirtualConference


306
00:19:10.984 --> 00:19:15.255 line:-2 align:center
to provide a virtual conference object
for a selected room type.


307
00:19:16,023 --> 00:19:17,491 line:-1
Let's walk through an example.


308
00:19:18,492 --> 00:19:23,530 line:-2
First, create a Virtual Conference
extension target in Xcode.


309
00:19:23.564 --> 00:19:28.836 line:-2 align:center
The new target will have a stubbed
subclass of EKVirtualConferenceProvider.


310
00:19:29.803 --> 00:19:34.174 line:-2 align:center
The first method to override
is fetchAvailableRoomTypes.


311
00:19:34.208 --> 00:19:37.244 line:-2 align:center
The room types are shown
in the location picker.


312
00:19:39,646 --> 00:19:42,249 line:-1
Choose a title for each room type.


313
00:19:42.282 --> 00:19:46.253 line:-2 align:center
This will be shown
in the UI next to your app icon.


314
00:19:47,754 --> 00:19:51,792 line:-2
Also choose a unique identifier
for each room type.


315
00:19:51,825 --> 00:19:54,595 line:-2
The identifier is used
to let your extension know


316
00:19:54,628 --> 00:19:56,697 line:-1
which room type was chosen.


317
00:19:58,565 --> 00:20:02,669 line:-2
Create an instance
of EKVirtualConferenceRoomTypeDescriptor


318
00:20:02,703 --> 00:20:05,772 line:-1
using the title and identifier.


319
00:20:05,806 --> 00:20:10,777 line:-2
If your app supports multiple room types,
then make an instance for each one.


320
00:20:11,745 --> 00:20:15,148 line:-2
Finally,
return an array of your room types.


321
00:20:16,383 --> 00:20:20,521 line:-2
The next method to implement
is fetchVirtualConference.


322
00:20:20,554 --> 00:20:24,358 line:-2
This is called when one
of the room types is selected.


323
00:20:24.391 --> 00:20:28.562 line:-2 align:center
The identifier argument tells you
which room was selected.


324
00:20:29,997 --> 00:20:33,901 line:-2
Virtual conferences have one
or more URL descriptors,


325
00:20:33,934 --> 00:20:36,570 line:-1
which tell Calendar how to join.


326
00:20:37.271 --> 00:20:40.474 line:-1 align:center
Create an EKVirtualConferenceURLDescriptor


327
00:20:40,507 --> 00:20:44,211 line:-2
with the URL to open
and an optional title.


328
00:20:45.412 --> 00:20:47.915 line:-1 align:center
Use Universal Links for your URL


329
00:20:47,948 --> 00:20:50,784 line:-1
to allow your app to be opened directly.


330
00:20:51,585 --> 00:20:55,956 line:-2
The title helps to distinguish
between multiple join options.


331
00:20:55.989 --> 00:20:59.760 line:-2 align:center
Here it's not needed
because there's only one way to join.


332
00:21:01,028 --> 00:21:05,199 line:-2
Provide any additional information
in a details string.


333
00:21:05,232 --> 00:21:08,836 line:0
This text will be included
in a special virtual conference section


334
00:21:08,869 --> 00:21:11,138 line:0
of the event details UI.


335
00:21:12,172 --> 00:21:14,374 align:center
Finally, put all of this together


336
00:21:14.408 --> 00:21:19.079 line:-2 align:center
to create and return
an EKVirtualConferenceDescriptor.


337
00:21:19,112 --> 00:21:23,550 line:-2
The title here helps distinguish
between multiple room types.


338
00:21:23.584 --> 00:21:28.155 line:-2 align:center
This example only has one room type,
so the title is left nil.


339
00:21:30,090 --> 00:21:31,992 line:-1
With just these two methods,


340
00:21:32.025 --> 00:21:35.062 line:-2 align:center
your app will appear
in the Calendar app's location picker


341
00:21:35.095 --> 00:21:37.631 line:-1 align:center
as an option for virtual conferences.


342
00:21:38.632 --> 00:21:40.567 line:-2 align:center
Now that we've covered
a few different ways


343
00:21:40.601 --> 00:21:45.138 line:-2 align:center
of integrating with Calendar,
think about how your app can contribute.


344
00:21:45,172 --> 00:21:51,178 line:-2
Use EventKitUI or Siri Event Suggestions
to add events without requesting access.


345
00:21:51.211 --> 00:21:55.816 line:-2 align:center
If you do need to request access,
request the minimum access needed,


346
00:21:55,849 --> 00:21:58,452 line:-1
and only when it's needed.


347
00:21:58.485 --> 00:22:00.787 line:-1 align:center
And if you have a voice or video call app,


348
00:22:00,821 --> 00:22:04,057 line:-2
then implement
a virtual conference extension.


349
00:22:04.091 --> 00:22:07.594 line:-2 align:center
I can't wait to see how your app
integrates with Calendar.


350
00:22:07.628 --> 00:22:09.196 line:-1 align:center
Thanks for watching.


351
00:22:09,229 --> 00:22:12,833 line:0
♪ ♪

