2
00:00:00,334 --> 00:00:06,340 line:-1
♪ ♪


3
00:00:10,010 --> 00:00:12,045 line:-1 position:49%
Dave: Hi, I'm Dave Wendland,


4
00:00:12,079 --> 00:00:15,315 line:-2
a developer advocate
for our App Store Commerce team.


5
00:00:15,349 --> 00:00:19,586 line:-2 position:49%
My colleague Alex and I will discuss
the new App Store Server Library


6
00:00:19.620 --> 00:00:22.656 line:-2 position:49% align:center
and how its set of functions
will enable your server


7
00:00:22,689 --> 00:00:25,192 line:-1 align:center
to utilize an array of capabilities


8
00:00:25,225 --> 00:00:29,129 line:-2 align:center
from generating a JWT
for the App Store Server API


9
00:00:29,162 --> 00:00:33,867 line:-2 position:49%
to migrating away from the verifyReceipt
endpoint for purchase validation.


10
00:00:34,768 --> 00:00:35,903 align:center line:1
When we look back,


11
00:00:35,936 --> 00:00:40,641 align:center
the App Store launched in 2008
when apps were either free or paid.


12
00:00:40,674 --> 00:00:44,711 line:1
Soon, we added in-app purchases,
and ever since then,


13
00:00:44,745 --> 00:00:49,917 line:1
the developer community has grown
in size and complexity across the globe.


14
00:00:49,950 --> 00:00:54,087 align:center
The App Store continues to roll out
updates for developers and customers


15
00:00:54,121 --> 00:00:58,025 align:center
to support the global
and dynamic mobile app ecosystem.


16
00:00:59.193 --> 00:01:03.697 line:-2 align:center
In 2021,
we released the next era of StoreKit tools


17
00:01:03.730 --> 00:01:07.734 line:-2 align:center
with the revamped StoreKit Framework,
App Store Server API,


18
00:01:07,768 --> 00:01:10,771 line:-1
and App Store Server Notifications v2.


19
00:01:10.804 --> 00:01:16.777 line:-2 align:center
With more updates in 2022
and again this year at WWDC 2023.


20
00:01:16,810 --> 00:01:18,779 line:-1
These tools provide transactions


21
00:01:18,812 --> 00:01:22,115 line:-1
and status in a signed JWS format.


22
00:01:22,149 --> 00:01:25,552 line:-2
And they are designed
to provide developers robust information,


23
00:01:25,586 --> 00:01:28,322 line:-1
client side and server side.


24
00:01:29,223 --> 00:01:33,093 line:-2
This set of APIs inspired
the App Store Server Library.


25
00:01:33,126 --> 00:01:37,231 line:-2
We are proud to share that this
library provides a set of functions,


26
00:01:37.264 --> 00:01:40.767 line:-2 align:center
which will make it easier
for our developer community to adopt


27
00:01:40.801 --> 00:01:46.306 line:-2 align:center
and integrate the latest APIs
available today and in the future.


28
00:01:46,340 --> 00:01:49,176 line:-2
The library beta launch
supports four languages:


29
00:01:49.209 --> 00:01:53.146 line:-1 align:center
Swift, Java, Node, and Python,


30
00:01:53.180 --> 00:01:55.516 line:-2 align:center
giving you the flexibility
to choose the language


31
00:01:55.549 --> 00:01:58.919 line:-2 align:center
that best supports
your backend and expertise.


32
00:01:59,720 --> 00:02:01,088 line:-1
The App Store server library


33
00:02:01,121 --> 00:02:03,557 line:-1
for each language is available on GitHub,


34
00:02:03.590 --> 00:02:05.392 line:-1 align:center
and we look forward to your feedback


35
00:02:05,425 --> 00:02:07,361 line:-1
and contributions.


36
00:02:07.394 --> 00:02:09.796 line:-2 align:center
I've broken down
what the library has to offer


37
00:02:09.830 --> 00:02:13.200 line:-1 align:center
into four key capabilities.


38
00:02:13,233 --> 00:02:18,238 line:-2
The first and most robust capability
is with the App Store Server API.


39
00:02:18.272 --> 00:02:21.275 line:-1 align:center
By streamlining the JWT creation,


40
00:02:21,308 --> 00:02:23,744 line:-2
you can use any
of the dozen different endpoints


41
00:02:23.777 --> 00:02:25.779 line:-1 align:center
the App Store Server API offers.


42
00:02:26,780 --> 00:02:32,219 line:-2
Next is a core capability
to verify JWS signed data,


43
00:02:32.252 --> 00:02:35.889 line:-2 align:center
so you can ensure your transactions
and server notifications


44
00:02:35.923 --> 00:02:38.659 line:-1 align:center
have been generated and signed by Apple.


45
00:02:39,526 --> 00:02:43,530 line:-2
Next is the extract
receipt transaction utility.


46
00:02:43.564 --> 00:02:48.402 line:-2 align:center
This simple tool extracts a transaction
identifier from an app receipt.


47
00:02:48.435 --> 00:02:52.639 line:-2 align:center
Doing this can alleviate your need
to use the verifyReceipt endpoint


48
00:02:52,673 --> 00:02:56,276 line:-2
and enable you to migrate
to the App Store Server API


49
00:02:56,310 --> 00:03:00,013 line:-2
for your purchase validation
and additional capabilities.


50
00:03:00.047 --> 00:03:05.018 line:-2 align:center
This provides a clear path to support
your current and legacy app versions.


51
00:03:05.853 --> 00:03:11.191 line:-2 align:center
Lastly, is the utility to generate
subscription promotional offer signatures.


52
00:03:11.225 --> 00:03:15.462 line:-2 align:center
This utility does the heavy lifting
of signing and generating your offers


53
00:03:15.495 --> 00:03:18.632 line:-1 align:center
using your in-app purchase private key.


54
00:03:18.665 --> 00:03:22.069 line:-2 align:center
If you are not familiar
with the subscription promotional offers,


55
00:03:22,102 --> 00:03:27,641 line:1
learn more in our session titled
"Subscription Offers Best Practices."


56
00:03:27.674 --> 00:03:31.845 line:-2 align:center
Now lets deep dive into three
of those core library functions.


57
00:03:31.879 --> 00:03:35.582 line:-2 align:center
App Store Server API,
signed data verification,


58
00:03:35.616 --> 00:03:38.852 line:-1 align:center
and moving to the App Store Server API.


59
00:03:38,886 --> 00:03:41,688 line:-2
Let's get started
with the App Store Server API.


60
00:03:42,823 --> 00:03:48,161 line:-2
The foundation to the Server API
is the Get Transaction History endpoint.


61
00:03:48.195 --> 00:03:52.799 line:-2 align:center
By simply using a transaction ID,
this API provides a customer's


62
00:03:52,833 --> 00:03:56,036 line:-2
complete in-app purchase
transaction history.


63
00:03:56.069 --> 00:03:59.940 line:-2 align:center
And it has even more capabilities
beyond this endpoint.


64
00:03:59,973 --> 00:04:02,209 line:-1
This API has a dozen endpoints,


65
00:04:02.242 --> 00:04:05.312 line:-2 align:center
all of which require a form
of authentication,


66
00:04:05,345 --> 00:04:07,514 line:-1
a JSON Web Token.


67
00:04:07,548 --> 00:04:10,884 line:-1
Generating your JWT is a critical step,


68
00:04:10,918 --> 00:04:12,819 line:-2
and if you aren't familiar
with this process,


69
00:04:12.853 --> 00:04:15.322 line:-1 align:center
that is where the library comes in.


70
00:04:15,355 --> 00:04:19,126 line:-2
Over to Alex to demonstrate
getting the library setup for use


71
00:04:19,159 --> 00:04:21,295 line:-1
with the App Store Server API.


72
00:04:22,162 --> 00:04:25,966 line:-2
Alex: Hello, I'm Alex Baker,
an App Store Server Engineer.


73
00:04:25.999 --> 00:04:29.303 line:-2 align:center
I'll demonstrate how to get started
with the App Store Server Library


74
00:04:29.336 --> 00:04:32.573 line:-2 align:center
and how you can use it
to call the App Store Server API.


75
00:04:32.606 --> 00:04:35.909 line:-2 align:center
This demo will walk through collecting
the necessary pieces of information


76
00:04:35,943 --> 00:04:38,312 line:-1
to configure the App Store Server Library,


77
00:04:38.345 --> 00:04:42.883 line:-2 align:center
then show an example of creating
an API client and calling the API.


78
00:04:42,916 --> 00:04:45,752 align:center
I am starting in App Store Connect
to get information I'll need


79
00:04:45,786 --> 00:04:49,056 align:center
to use the App Store Server API
with the library.


80
00:04:49,089 --> 00:04:51,325 line:0
Go to the Users and Access module...


81
00:04:54.261 --> 00:04:57.998 line:-2 align:center
Then the Keys tab,
then the In-App Purchase option.


82
00:04:59,433 --> 00:05:01,702 line:-2
There are a few pieces
of useful information here.


83
00:05:01.735 --> 00:05:04.404 line:-1 align:center
First, the issuer ID.


84
00:05:04.438 --> 00:05:07.841 line:-2 align:center
Next,
I am going to generate a new private key.


85
00:05:07,875 --> 00:05:12,346 line:-1
I'll give it a name, then click Generate.


86
00:05:12.379 --> 00:05:15.382 line:-2 align:center
Generating the key
provides two pieces of information:


87
00:05:15,415 --> 00:05:19,520 line:-2
The key ID and the option
to download the private key.


88
00:05:19,553 --> 00:05:22,356 line:-1
Downloading is only possible once.


89
00:05:22,389 --> 00:05:25,058 line:-2
Switching to the Apple Public Key
infrastructure website,


90
00:05:25,092 --> 00:05:28,962 line:-2
focus on the Apple Root Certificates
section in the upper left.


91
00:05:28,996 --> 00:05:31,331 line:-1
Download the root certificates.


92
00:05:34.434 --> 00:05:38.539 line:-2 align:center
Here is a simple Java project
using the Gradle build system.


93
00:05:38.572 --> 00:05:43.043 line:-2 align:center
First, add a dependency
on the App Store Server Library.


94
00:05:44,411 --> 00:05:46,947 line:-1
Moving to the ExampleApp class,


95
00:05:46,980 --> 00:05:50,050 line:-2
here are the pieces
of information I obtained earlier,


96
00:05:50.083 --> 00:05:53.620 line:-2 align:center
the issuerId,
the keyId, and the private key.


97
00:05:53,654 --> 00:05:57,457 line:-2
Additionally,
store the bundleId of the app--


98
00:05:59,059 --> 00:06:02,062 line:-2
in this demonstration,
I am using sandbox--


99
00:06:02.095 --> 00:06:04.498 line:-1 align:center
and store the appropriate enum value.


100
00:06:05,599 --> 00:06:10,604 line:-2
Using these pieces of information,
instantiate an AppStoreServerAPIClient.


101
00:06:10,637 --> 00:06:14,541 line:-2
With this client, call the Request
a Test Notification endpoint,


102
00:06:14,575 --> 00:06:17,878 line:-2
which requests the App Store server
send a notification with type TEST


103
00:06:17.911 --> 00:06:21.081 line:-2 align:center
to the URL you configured
in App Store Connect.


104
00:06:21,114 --> 00:06:24,384 line:-1
Last, print the testNotificationToken.


105
00:06:24.418 --> 00:06:28.255 line:-2 align:center
Running this, we will see
the testNotificationToken printed,


106
00:06:28.288 --> 00:06:31.425 line:-1 align:center
and, as expected, we see this token.


107
00:06:35.495 --> 00:06:38.031 line:-2 align:center
This demonstrated how
to use the App Store Server library


108
00:06:38.065 --> 00:06:40.634 line:-1 align:center
to simplify using the App Store Server API


109
00:06:40.667 --> 00:06:42.903 line:-2 align:center
and the information you need
from App Store Connect.


110
00:06:42,936 --> 00:06:44,638 line:-1
Now back to Dave.


111
00:06:44,671 --> 00:06:45,906 line:-1
Dave: Thank you, Alex.


112
00:06:45,939 --> 00:06:49,910 line:-2
That demo really illustrates
how quickly this library gets you set up


113
00:06:49,943 --> 00:06:54,281 line:-2
and generating a JWT
for use with the Server API.


114
00:06:54.314 --> 00:06:56.583 line:-1 align:center
This library will have a meaningful impact


115
00:06:56.617 --> 00:07:01.455 line:-2 align:center
in reducing your implementation timelines
when adopting our APIs.


116
00:07:02.389 --> 00:07:04.658 line:-2 align:center
While using the library
is helpful and simple,


117
00:07:04.691 --> 00:07:06.093 line:-1 align:center
there is nothing more critical


118
00:07:06,126 --> 00:07:09,897 line:-2
than storing
your in-app purchase private key securely.


119
00:07:09,930 --> 00:07:12,399 line:-2
And if you ever think
your key has been compromised,


120
00:07:12,432 --> 00:07:16,336 line:-2
generate a new key
in App Store Connect anytime.


121
00:07:16.370 --> 00:07:19.106 line:-2 align:center
As you begin your development,
we do recommend starting


122
00:07:19.139 --> 00:07:22.342 line:-2 align:center
with sandbox
and TestFlight transactions.


123
00:07:22,376 --> 00:07:24,878 line:-1
And lastly, be sure to check regularly


124
00:07:24.912 --> 00:07:29.082 line:-2 align:center
for updated Apple root
certificate authorities.


125
00:07:29,116 --> 00:07:31,952 line:-2
Now lets discuss
why signed data verification


126
00:07:31.985 --> 00:07:36.190 line:-2 align:center
is a foundational action
to your business with in-app purchases.


127
00:07:36,223 --> 00:07:40,961 line:-2
First let's discuss what signed
data contains and why it is important.


128
00:07:40.994 --> 00:07:44.431 line:-2 align:center
StoreKit Signed data means
it was generated and signed


129
00:07:44.464 --> 00:07:48.101 line:-2 align:center
by the App Store
in a JSON Web Signature format


130
00:07:48.135 --> 00:07:52.172 line:-2 align:center
and contains data about the app purchases,
in-app purchases,


131
00:07:52.206 --> 00:07:56.176 line:-2 align:center
customer events,
and customer subscription status.


132
00:07:56.210 --> 00:07:58.445 line:-1 align:center
The two most common signed data payloads


133
00:07:58,478 --> 00:08:00,480 line:-1
are the JWS Transaction


134
00:08:00.514 --> 00:08:03.550 line:-1 align:center
and JWS Renewal Info.


135
00:08:03.584 --> 00:08:05.919 line:-1 align:center
Then the appTransaction contains details


136
00:08:05,953 --> 00:08:08,322 line:-1
on the app version originally purchased


137
00:08:08.355 --> 00:08:10.224 line:-1 align:center
and the version currently installed


138
00:08:10,257 --> 00:08:11,892 line:-1
on device.


139
00:08:11,925 --> 00:08:12,960 line:-1
And then we have


140
00:08:12.993 --> 00:08:15.495 line:-1 align:center
the App Store Server Notifications V2,


141
00:08:15.529 --> 00:08:18.332 line:-1 align:center
the notification itself is signed data


142
00:08:18.365 --> 00:08:20.033 line:-1 align:center
and additionally may contain


143
00:08:20,067 --> 00:08:24,104 line:-1
a JWS Transaction and JWS Renewal Info.


144
00:08:25,339 --> 00:08:26,673 line:-1
And as a reminder,


145
00:08:26.707 --> 00:08:29.643 line:-1 align:center
you will only find this JWS signed data


146
00:08:29.676 --> 00:08:32.579 line:-1 align:center
in StoreKit 2 on iOS 15 and later


147
00:08:32.613 --> 00:08:34.515 line:-1 align:center
and in the App Store Server API


148
00:08:34,548 --> 00:08:37,451 line:-1
and App Store Server Notifications v2.


149
00:08:38,719 --> 00:08:40,787 line:-1
It's recommended that you verify


150
00:08:40.821 --> 00:08:43.390 line:-1 align:center
the JWS signed data after any


151
00:08:43,423 --> 00:08:45,125 line:-1
of the following events:


152
00:08:45,158 --> 00:08:48,996 align:center
When delivering or unlocking content
on device


153
00:08:49,029 --> 00:08:51,532 align:center
or when your server
has received signed data,


154
00:08:51,565 --> 00:08:54,635 line:0
whether that be from your own app,
another server,


155
00:08:54,668 --> 00:08:57,137 align:center
or App Store server notifications.


156
00:08:57,171 --> 00:09:01,708 line:0
And lastly, when you receive a response
from the App Store server API.


157
00:09:01,742 --> 00:09:06,113 line:-2
Here's Alex to demo
how to verify JWS signed data


158
00:09:06.146 --> 00:09:08.916 line:-1 align:center
and how the library handles this for you.


159
00:09:09,950 --> 00:09:12,586 line:-2
Alex: In this section,
I'll show how to verify signed data


160
00:09:12.619 --> 00:09:13.720 line:-1 align:center
from the App Store.


161
00:09:13,754 --> 00:09:16,990 line:-2
I'll describe the verification process
you would need to perform.


162
00:09:17,024 --> 00:09:19,359 line:-2
Then, we'll walk through how
the App Store Server Library's


163
00:09:19.393 --> 00:09:24.231 line:-2 align:center
SignedDataVerifier class
can perform this process for you.


164
00:09:24.264 --> 00:09:27.634 line:-2 align:center
I would like to stress that using tools
like the App Store Server Library


165
00:09:27.668 --> 00:09:31.104 line:-2 align:center
is highly advisable when you are
not familiar with the RFCs and protocols


166
00:09:31,138 --> 00:09:34,174 line:-2
behind the operations
I am about to describe.


167
00:09:34.208 --> 00:09:36.376 line:-2 align:center
Here is some signed data
from the App Store.


168
00:09:36.410 --> 00:09:38.712 line:-2 align:center
It looks like
there is a lot going on here.


169
00:09:38.745 --> 00:09:42.015 line:-2 align:center
Color coding reveals
there are three sections.


170
00:09:42,049 --> 00:09:43,951 line:-1
Each section is separated by a period


171
00:09:43.984 --> 00:09:46.753 line:-1 align:center
and is Base64 URL encoded.


172
00:09:46.787 --> 00:09:49.356 line:-2 align:center
The first and largest section
is the header.


173
00:09:49,389 --> 00:09:52,226 line:-2
Once decoded,
the header is a JSON structure


174
00:09:52,259 --> 00:09:55,329 line:-2
with fields defined
by the JWS specification.


175
00:09:55.362 --> 00:09:58.732 line:-2 align:center
In this case,
our header only has two fields:


176
00:09:58,765 --> 00:10:03,003 line:-2
First, the algorithm,
which is always ES256.


177
00:10:03,036 --> 00:10:05,572 line:-1
Next a field called x5c.


178
00:10:05,606 --> 00:10:07,941 line:-2
This is an array of certificates
that are used to calculate


179
00:10:07.975 --> 00:10:11.178 line:-2 align:center
the expected public key
that signed the JWS.


180
00:10:11,211 --> 00:10:14,615 line:-2
Let's review the certificate
chain construction process.


181
00:10:14.648 --> 00:10:17.551 line:-2 align:center
The first certificate
in the array is the leaf certificate.


182
00:10:17,584 --> 00:10:21,355 line:-2
This certificate's public key
signed the JWS.


183
00:10:21,388 --> 00:10:23,357 line:-1
To verify this certificate is from Apple,


184
00:10:23.390 --> 00:10:26.527 line:-2 align:center
construct a chain of trust
back to a known trusted source,


185
00:10:26.560 --> 00:10:29.530 line:-2 align:center
in this case,
an Apple root certificate authority.


186
00:10:30,364 --> 00:10:31,665 line:-1
The next certificate in the array


187
00:10:31.698 --> 00:10:36.170 line:-2 align:center
is the Apple Worldwide Developer Relations
intermediate certificate authority.


188
00:10:36,203 --> 00:10:38,205 line:-2
Think of this
as a more specialized version


189
00:10:38,238 --> 00:10:42,242 line:-2
of the Apple Root Certificate Authority
focused on developers.


190
00:10:42,276 --> 00:10:45,546 line:-2
The last certificate in the chain
is an Apple root certificate authority


191
00:10:45,579 --> 00:10:49,016 line:-2
so that we understand which Apple
authority originated this chain.


192
00:10:49.049 --> 00:10:52.653 line:-2 align:center
Reminder, it is important to verify
the certificate exactly matches


193
00:10:52.686 --> 00:10:54.988 line:-1 align:center
a root certificate we previously obtained


194
00:10:55,022 --> 00:10:57,357 line:-2
from Apple's
Public Key Infrastructure website.


195
00:10:58,325 --> 00:10:59,593 line:0
The first step is to verify


196
00:10:59,626 --> 00:11:00,928 align:center
that each certificate is signed


197
00:11:00,961 --> 00:11:03,230 align:center
by the previous certificate in the chain.


198
00:11:03,263 --> 00:11:04,431 line:0
Then perform additional


199
00:11:04,464 --> 00:11:05,632 line:0
verification steps,


200
00:11:05,666 --> 00:11:07,067 align:center
like making sure each certificate has


201
00:11:07,100 --> 00:11:10,938 line:0
valid dates, is properly formatted, etc.


202
00:11:10,971 --> 00:11:13,073 align:center
Next, validate that these certificates


203
00:11:13,106 --> 00:11:14,675 line:0
are from Apple and that their purpose


204
00:11:14,708 --> 00:11:16,276 align:center
is to sign App Store data,


205
00:11:16,310 --> 00:11:17,978 line:0
as opposed to an unrelated use case,


206
00:11:18,011 --> 00:11:19,112 align:center
which would not be valid


207
00:11:19,146 --> 00:11:20,814 line:0
to sign App Store data.


208
00:11:21,682 --> 00:11:23,150 align:center
To verify the leaf certificate,


209
00:11:23,183 --> 00:11:24,685 line:0
confirm its purpose by checking


210
00:11:24,718 --> 00:11:26,587 align:center
the presence of the object identifier,


211
00:11:26,620 --> 00:11:30,123 line:0
or OID, for Mac App Store Receipt Signing.


212
00:11:30,157 --> 00:11:31,692 align:center
For the intermediate certificate,


213
00:11:31,725 --> 00:11:33,560 align:center
check that the intermediate authority OID


214
00:11:33,594 --> 00:11:36,697 line:0
for Apple Worldwide Developer Relations.


215
00:11:36,730 --> 00:11:39,099 align:center
Last, as stated before,


216
00:11:39,132 --> 00:11:41,001 align:center
make sure the root certificate authority


217
00:11:41,034 --> 00:11:42,836 line:0
is one of the certificates you stored


218
00:11:42,870 --> 00:11:45,606 line:0
as an Apple Root Certificate Authority.


219
00:11:45,639 --> 00:11:47,407 line:0
Now let's actually decode


220
00:11:47,441 --> 00:11:49,209 line:0
a leaf certificate and observe how


221
00:11:49,243 --> 00:11:51,144 line:0
to check these values.


222
00:11:52,212 --> 00:11:55,949 line:-1
Here is the X.509 v3 extensions section


223
00:11:55.983 --> 00:12:00.654 line:-2 align:center
of a certificate as produced
by the OpenSSL x509 command.


224
00:12:01,722 --> 00:12:05,192 line:0
At the bottom is the OID listed
on the previous slide,


225
00:12:05,225 --> 00:12:09,029 align:center
indicating the certificate's purpose
is App Store receipt signing.


226
00:12:09,062 --> 00:12:13,133 line:0
However, there are some additional fields
that are important to check.


227
00:12:14,268 --> 00:12:16,970 line:-2
Here we see
the authority information access section,


228
00:12:17,004 --> 00:12:20,140 line:-2
which provides information
about the issuer and, importantly,


229
00:12:20.174 --> 00:12:23.810 line:-2 align:center
provides information for checking
if the certificate was revoked.


230
00:12:23,844 --> 00:12:27,414 line:-2
Using the Online Certificate
Status Protocol, or OCSP.


231
00:12:27,447 --> 00:12:29,516 line:-1
check if a certificate has been revoked


232
00:12:29.550 --> 00:12:31.919 line:-2 align:center
before proceeding
with the verification process.


233
00:12:31.952 --> 00:12:37.391 line:-2 align:center
The process and cryptographic procedures
for doing so are defined in RFC 6960.


234
00:12:38.959 --> 00:12:40.827 line:-1 align:center
After verifying the certificate chain,


235
00:12:40.861 --> 00:12:44.865 line:-2 align:center
check the JWS is signed
by the leaf certificate's public key.


236
00:12:44.898 --> 00:12:48.335 line:-1 align:center
Take the leaf certificate from before,


237
00:12:48,368 --> 00:12:51,672 line:-2
extract the public key
of the leaf certificate,


238
00:12:51,705 --> 00:12:53,907 line:-1
take the key and original JWS,


239
00:12:53,941 --> 00:12:58,011 line:-2
and pass them
to a JWS signature verification function.


240
00:12:58,045 --> 00:13:00,447 line:-2
The verification function checks
that the data is signed


241
00:13:00,480 --> 00:13:03,817 line:-1
by the public key and decodes the payload.


242
00:13:03,851 --> 00:13:05,452 line:-1
The process is almost complete,


243
00:13:05.485 --> 00:13:07.921 line:-2 align:center
but there is
one additional verification step.


244
00:13:08,856 --> 00:13:12,459 line:-2
Here is a decoded
App Store Server TEST Notification.


245
00:13:12.492 --> 00:13:15.696 line:-2 align:center
The previous steps verified
the data came from the App Store.


246
00:13:15.729 --> 00:13:18.432 line:-2 align:center
However, also check
that the notification is targeted


247
00:13:18.465 --> 00:13:21.335 line:-2 align:center
at your correct application
and environment.


248
00:13:22.970 --> 00:13:26.640 line:-2 align:center
Check the appAppleId and bundleId
to confirm the notification


249
00:13:26,673 --> 00:13:29,543 line:-1
is targeted for your correct application.


250
00:13:29.576 --> 00:13:32.479 line:-2 align:center
Check the environment
matches the expected environment.


251
00:13:33.714 --> 00:13:36.216 line:-2 align:center
Just like the other steps
in the verification process,


252
00:13:36.250 --> 00:13:40.587 line:-2 align:center
the App Store Server library also checks
these when it performs the verification.


253
00:13:41.889 --> 00:13:45.125 line:-2 align:center
That completes the process
to verify signed data from the App Store.


254
00:13:45,158 --> 00:13:48,662 line:-2
Next, I'll expand my project from earlier
to verify signed data


255
00:13:48,695 --> 00:13:52,833 line:-2
using the SignedDataVerifier class
included in the App Store Server Library.


256
00:13:52,866 --> 00:13:56,470 line:-2
The SignedDataVerifier class performs
the verification steps previously covered.


257
00:13:57.604 --> 00:14:00.407 line:-2 align:center
In this demo, I'll get the test
notification that I requested earlier,


258
00:14:00,440 --> 00:14:03,510 line:-2
and then validate
and decode the signed notification.


259
00:14:03.544 --> 00:14:06.046 line:-2 align:center
There is a small delay
between requesting the test notification


260
00:14:06.079 --> 00:14:08.749 line:-2 align:center
and the notification
being received on my server.


261
00:14:08,782 --> 00:14:12,186 line:-1
Therefore, add a five-second delay.


262
00:14:12,219 --> 00:14:15,689 line:0
Next, call
the Get Test Notification Status endpoint


263
00:14:15,722 --> 00:14:19,026 line:0
using the testNotificationToken
obtained earlier.


264
00:14:19,059 --> 00:14:23,564 line:0
Last, print the first few characters
of the notification to confirm success.


265
00:14:23.597 --> 00:14:26.767 line:-2 align:center
The Get Test Notification Status
endpoint returns the result


266
00:14:26,800 --> 00:14:30,571 line:-2
of the send attempt,
as well as the notification payload.


267
00:14:30,604 --> 00:14:33,473 line:-2
The beginning of that payload
is what we should see.


268
00:14:37,711 --> 00:14:41,215 line:-2
As expected, I see the first few
characters of the notification.


269
00:14:41,248 --> 00:14:44,484 line:-2
Moving on,
creating a signed data verifier.


270
00:14:44,518 --> 00:14:47,120 line:0
This requires three pieces of information,


271
00:14:47,154 --> 00:14:49,890 line:0
starting with the list
of Apple Root certificate authorities.


272
00:14:52,626 --> 00:14:56,964 line:0
The certificates I downloaded earlier
are now in the resources folder.


273
00:14:56.997 --> 00:14:59.666 line:-1 align:center
Import the root certificates into a Set.


274
00:15:00.601 --> 00:15:04.605 line:-2 align:center
Since I am using sandbox,
I don't require an app Apple ID.


275
00:15:04.638 --> 00:15:08.208 line:-1 align:center
Pass null instead in sandbox.


276
00:15:08,242 --> 00:15:11,812 align:center
Last,
whether to perform revocation checking.


277
00:15:11,845 --> 00:15:13,981 line:0
Because the notification
was just received,


278
00:15:14,014 --> 00:15:16,583 line:0
onlineChecks should be true.


279
00:15:16,617 --> 00:15:18,886 align:center
For notifications
received months or years ago,


280
00:15:18,919 --> 00:15:22,856 align:center
this should be false
because the certificates may have expired.


281
00:15:22,890 --> 00:15:26,026 align:center
Pass these fields
into a new SignedDataVerifier.


282
00:15:26,059 --> 00:15:29,696 line:-2
Then, pass in the notification
received earlier,


283
00:15:29,730 --> 00:15:32,933 align:center
print the result,
and then run the program.


284
00:15:37,271 --> 00:15:39,706 line:-2
Once the program is complete,
the program will display


285
00:15:39,740 --> 00:15:41,808 line:-1
a verified and decoded notification.


286
00:15:41,842 --> 00:15:44,244 line:-2
Since this is a test notification,
this will have a type


287
00:15:44,278 --> 00:15:47,347 line:-2
of TEST and the app's bundle identifier
in the payload,


288
00:15:47,381 --> 00:15:49,516 line:0
along with a few other fields.


289
00:15:51,451 --> 00:15:55,289 line:0
As expected,
I see a decoded notification of type TEST.


290
00:15:56.690 --> 00:16:00.794 line:-2 align:center
I expanded on our previous demo to
demonstrate the SignedDataVerifier object.


291
00:16:00,827 --> 00:16:03,664 line:-1
Here’s Dave to review some best practices.


292
00:16:03.697 --> 00:16:06.834 line:-2 align:center
Dave: Wow, that really illustrates
all the steps required


293
00:16:06.867 --> 00:16:08.869 line:-1 align:center
to verifying signed data


294
00:16:08,902 --> 00:16:11,872 line:-2
and how the library can handle
that complexity for you,


295
00:16:11,905 --> 00:16:15,209 line:-2
so be sure
to utilize the SignedDataVerifier


296
00:16:15.242 --> 00:16:17.945 line:-1 align:center
for your server-side validation.


297
00:16:17,978 --> 00:16:20,681 line:-2
An important reminder:
when you verify data,


298
00:16:20,714 --> 00:16:23,984 line:-2
you still need to confirm
the app and product identifiers


299
00:16:24.017 --> 00:16:27.087 line:-2 align:center
to ensure you are granting
or revoking purchases


300
00:16:27,120 --> 00:16:29,723 line:-1
for the correct app or service.


301
00:16:29.756 --> 00:16:33.827 line:-2 align:center
Lastly, as certificates expire
and can be revoked,


302
00:16:33,861 --> 00:16:35,996 line:-1
don't hardcode any certificates,


303
00:16:36,029 --> 00:16:40,467 line:-2
client side or server side,
and always validate that they are active.


304
00:16:40,501 --> 00:16:44,404 line:-2
Now we'll review
another App Store server utility to assist


305
00:16:44,438 --> 00:16:47,407 line:-2
with moving
your server-side app receipt validation


306
00:16:47.441 --> 00:16:52.546 line:-2 align:center
off the verifyReceipt endpoint
and over to the App Store Server API.


307
00:16:52.579 --> 00:16:55.282 line:-2 align:center
The App Store Server library
offers a utility


308
00:16:55.315 --> 00:17:00.954 line:-2 align:center
to help specifically with this migration
and ensures no app is left behind.


309
00:17:01,755 --> 00:17:04,458 line:-2
When considering moving
to the App Store Server API,


310
00:17:04,491 --> 00:17:07,961 line:-2
there are many reasons
to prioritize this work in your roadmap.


311
00:17:07,995 --> 00:17:12,165 line:-2
The API supports purchase validation
and contains additional endpoints


312
00:17:12,199 --> 00:17:14,935 line:-1
useful for customer support, appeasement,


313
00:17:14,968 --> 00:17:18,472 line:-2
and testing App Store
Server Notifications V2.


314
00:17:18.505 --> 00:17:22.009 line:-2 align:center
As we continue to make updates
and release new properties,


315
00:17:22.042 --> 00:17:25.579 line:-2 align:center
these will be released
only with the JWS signed data,


316
00:17:25,612 --> 00:17:29,216 line:-2
which is supported by StoreKit 2,
App Store Server API,


317
00:17:29.249 --> 00:17:31.919 line:-1 align:center
and App Store Server Notifications V2.


318
00:17:32.886 --> 00:17:36.590 line:-2 align:center
An additional benefit,
the only data you need to record,


319
00:17:36,623 --> 00:17:40,260 line:-2
is an original transaction ID
or transaction ID.


320
00:17:40,294 --> 00:17:45,899 line:-2
You no longer need to save base64
encoded receipts in your account system.


321
00:17:45.933 --> 00:17:49.236 line:-2 align:center
And with our continued investment
in the latest APIs,


322
00:17:49,269 --> 00:17:53,807 line:-2
we have announced that verifyReceipt
endpoint is now deprecated.


323
00:17:53,841 --> 00:17:58,745 line:-4
To learn more, check out the session
"What's new in App Store server APIs"


324
00:17:58,779 --> 00:18:01,715 line:-3
for a detailed update and guidance.


325
00:18:01,748 --> 00:18:04,351 line:-2
Now here's Alex
to share how the App Store server library


326
00:18:04,384 --> 00:18:06,153 line:-1
will assist in your migration.


327
00:18:06,186 --> 00:18:07,521 line:-1
Alex?


328
00:18:07.554 --> 00:18:08.889 line:-1 align:center
Alex: Thanks, Dave.


329
00:18:08,922 --> 00:18:12,426 line:-2
Now let's walk
through a flow diagram for App Receipts.


330
00:18:12.459 --> 00:18:15.028 line:-2 align:center
While StoreKit 2
and the App Store Server API


331
00:18:15,062 --> 00:18:16,663 line:-1
are great tools to use,


332
00:18:16,697 --> 00:18:19,099 line:-2
it is important
to support clients on older devices


333
00:18:19,132 --> 00:18:21,602 line:-1
or users that have not updated recently,


334
00:18:21,635 --> 00:18:25,105 line:-2
and for which only App Receipts
may be provided to your server.


335
00:18:25,138 --> 00:18:27,808 line:-2
I'll show how these devices
were supported previously,


336
00:18:27.841 --> 00:18:30.377 line:-2 align:center
and then how you can continue
to support these clients


337
00:18:30.410 --> 00:18:32.546 line:-1 align:center
following verifyReceipt's deprecation.


338
00:18:34,181 --> 00:18:38,085 line:-2
First, the device sends
a receipt to your server.


339
00:18:38.118 --> 00:18:40.654 line:-2 align:center
In the old model,
your server passes this receipt


340
00:18:40,687 --> 00:18:42,523 line:-1
to verifyReceipt,


341
00:18:42,556 --> 00:18:45,092 line:-1
and then receives the decoded receipt.


342
00:18:46.093 --> 00:18:49.129 line:-2 align:center
The response contains
an originalTransactionId,


343
00:18:49,162 --> 00:18:51,932 line:-2
which is passed
to the Get Transaction History endpoint


344
00:18:51.965 --> 00:18:54.134 line:-1 align:center
in the App Store Server API.


345
00:18:55,002 --> 00:18:56,470 line:-1
The App Store Server returns


346
00:18:56.503 --> 00:18:57.771 line:-1 align:center
signed transactions you use


347
00:18:57,804 --> 00:18:59,907 line:-1
to provide service to the customer.


348
00:19:00,874 --> 00:19:02,709 line:-1
Now that verifyReceipt is deprecated,


349
00:19:02,743 --> 00:19:05,212 line:-1
let's replace this section.


350
00:19:05,245 --> 00:19:07,748 align:center
The receipt utility
in the App Store Server Library


351
00:19:07,781 --> 00:19:10,551 line:0
directly extracts a transaction ID
from a receipt.


352
00:19:10,584 --> 00:19:13,353 align:center
You pass the transaction ID
to the App Store Server API,


353
00:19:13,387 --> 00:19:16,657 line:0
removing the need to make two round trips.


354
00:19:16,690 --> 00:19:19,960 align:center
After this,
store the revision from the endpoint.


355
00:19:19,993 --> 00:19:23,931 align:center
This removes the need
to re-parse the entire history each time.


356
00:19:24,965 --> 00:19:26,900 align:center
Because the value extracted
from the app receipt


357
00:19:26,934 --> 00:19:30,070 line:0
may or may not be
an original transaction ID,


358
00:19:30,103 --> 00:19:32,673 line:0
we are excited to announce
that many of our endpoints,


359
00:19:32,706 --> 00:19:35,375 line:0
including the Get Transaction History
endpoint,


360
00:19:35,409 --> 00:19:37,978 align:center
now support any transaction ID
as a parameter,


361
00:19:38,011 --> 00:19:40,647 line:0
not just an original transaction ID.


362
00:19:41,481 --> 00:19:44,918 line:-2
Now I'll demonstrate
extracting transaction IDs for use


363
00:19:44.952 --> 00:19:49.623 line:-2 align:center
with the Get Transaction History endpoint
using the App Store Server Library.


364
00:19:49.656 --> 00:19:52.993 line:-2 align:center
Here I will take an app receipt,
extract a transaction ID,


365
00:19:53,026 --> 00:19:56,163 line:-2
and call the Get Transaction History
endpoint using the ID.


366
00:19:56.196 --> 00:19:58.031 line:-1 align:center
First, the App Receipt.


367
00:19:58,065 --> 00:20:03,704 line:-2
You can get an App Receipt from a device
or an App Store Server Notification V1.


368
00:20:03,737 --> 00:20:05,706 line:-1
I have one here already.


369
00:20:05,739 --> 00:20:09,343 line:0
Next, create an instance
of the ReceiptUtility class.


370
00:20:09,376 --> 00:20:11,245 align:center
To extract the transaction ID,


371
00:20:11,278 --> 00:20:15,449 align:center
call the extract transaction ID
from app receipt method.


372
00:20:15,482 --> 00:20:17,684 line:-2
Not all receipts
will have a transaction ID.


373
00:20:17.718 --> 00:20:20.754 line:-2 align:center
It is possible
the user doesn't have any purchases.


374
00:20:20.787 --> 00:20:23.457 line:-1 align:center
Therefore, add a null check.


375
00:20:24,658 --> 00:20:27,094 line:-2
To provide some more depth
to this problem,


376
00:20:27,127 --> 00:20:30,564 line:-2
imagine we want to get information
about the most recent consumables


377
00:20:30,597 --> 00:20:34,635 align:center
for this user
and exclude revoked consumables.


378
00:20:34,668 --> 00:20:38,238 line:0
Create a Transaction History
Request object,


379
00:20:38,272 --> 00:20:42,142 align:center
specify that only wanted are products
of type CONSUMABLE


380
00:20:42,176 --> 00:20:44,578 line:0
to exclude revoked transactions


381
00:20:44,611 --> 00:20:48,048 line:0
and that the data should be returned
in descending order.


382
00:20:49,283 --> 00:20:52,920 line:0
We need two helper objects,
a response variable,


383
00:20:52,953 --> 00:20:55,622 line:-1
and a list of transactions.


384
00:20:55,656 --> 00:20:57,991 line:-2
A do while loop pages
through the responses


385
00:20:58,025 --> 00:21:00,360 line:-1
from the transaction history endpoint.


386
00:21:00.394 --> 00:21:03.397 line:-2 align:center
If this isn't the first request,
fetch the revision token


387
00:21:03.430 --> 00:21:06.934 line:-2 align:center
from the previous response
to keep paging through the data.


388
00:21:06,967 --> 00:21:11,471 align:center
Then, call the Get Transaction History
endpoint with the transaction ID


389
00:21:11,505 --> 00:21:16,076 align:center
from the app receipt, the request object,
and the revision.


390
00:21:16,109 --> 00:21:21,348 align:center
Finally, add all the transactions
from the response to the transaction list.


391
00:21:21,381 --> 00:21:26,353 line:-2
Repeat this process until the hasMore
field is false in the response.


392
00:21:27.187 --> 00:21:30.224 line:-2 align:center
Print out the transactions
to see the result.


393
00:21:36.830 --> 00:21:41.101 line:-2 align:center
Here I see a list
of transactions returned from the API.


394
00:21:41.134 --> 00:21:43.637 line:-2 align:center
The could be decoded
using the SignedDataVerifier


395
00:21:43,670 --> 00:21:45,239 line:-1
from the previous demo.


396
00:21:46,273 --> 00:21:48,242 line:-1
Thanks for joining our final demonstration


397
00:21:48,275 --> 00:21:51,778 line:-2
that showed how you can use App Receipts
with the App Store Server API.


398
00:21:51,812 --> 00:21:53,914 line:-1
Back to Dave to wrap us up.


399
00:21:53.947 --> 00:21:56.850 line:-2 align:center
Dave: I'm really excited
about the new App Store Server library,


400
00:21:56,884 --> 00:22:00,687 line:-2
and I see these capabilities
easing your adoption of our APIs


401
00:22:00.721 --> 00:22:04.258 line:-2 align:center
and transitioning
to the App Store Server API.


402
00:22:04,291 --> 00:22:06,894 line:-2
Here's a screenshot
of the App Store Server API


403
00:22:06,927 --> 00:22:09,196 line:-1
Java repository on Github.


404
00:22:09.229 --> 00:22:12.165 line:-2 align:center
On this page,
you can find links to our documentation,


405
00:22:12,199 --> 00:22:16,670 line:-2
submit pull requests, and find examples
of how to use the library.


406
00:22:17.638 --> 00:22:20.774 line:-2 align:center
You can download
the App Store Server library BETA soon


407
00:22:20.807 --> 00:22:24.645 line:-2 align:center
and start planning your adoption
of the App Store Server API.


408
00:22:24,678 --> 00:22:27,548 line:-2
We look forward
to your feedback and feature requests.


409
00:22:27,581 --> 00:22:31,218 line:-2
Please contact us
at Feedback Assistant and on Github.


410
00:22:31.251 --> 00:22:32.853 line:-1 align:center
Thank you.


411
00:22:32,886 --> 00:22:36,456 line:0
♪ ♪

