2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:10,544 --> 00:00:15,048 line:-2
Dima: Hello, and welcome
to "What's new in UIKit in iOS 17”.


4
00:00:15.082 --> 00:00:19.520 line:-2 align:center
I'm Dima, an engineering manager
on the UIKit team.


5
00:00:19,553 --> 00:00:22,890 line:-2
UIKit, the powerful framework
behind your applications,


6
00:00:22.923 --> 00:00:28.295 line:-2 align:center
has been upgraded
to support new features for iOS 17.


7
00:00:28.328 --> 00:00:31.465 line:-2 align:center
In this video,
I will guide you through:


8
00:00:31,498 --> 00:00:35,469 line:-2
New key features
and core architectural improvements,


9
00:00:35,502 --> 00:00:39,039 line:-2
advances in building interfaces
for all users


10
00:00:39,072 --> 00:00:41,909 line:-1
irrespective of the language setting,


11
00:00:41.942 --> 00:00:45.145 line:-1 align:center
improvements for iPadOS apps,


12
00:00:45.179 --> 00:00:49.183 line:-2 align:center
as well as numerous general enhancements
included in the release.


13
00:00:50,951 --> 00:00:55,255 line:-2
We've introduced
major architectural enhancements to UIKit,


14
00:00:55,289 --> 00:00:58,225 line:-2
making it easier
to create powerful applications,


15
00:00:58.258 --> 00:01:03.564 line:-2 align:center
as well as dramatically improving
integration with SwiftUI.


16
00:01:03,597 --> 00:01:07,734 line:-2
I am going to guide you
through 5 key new features.


17
00:01:07,768 --> 00:01:11,071 line:-1
I'll go over the Xcode previews support,


18
00:01:11.104 --> 00:01:13.707 line:-1 align:center
view controller life cycle updates,


19
00:01:13.740 --> 00:01:16.343 line:-1 align:center
advances in the trait system,


20
00:01:16.376 --> 00:01:18.645 line:-1 align:center
animated symbol images,


21
00:01:18,679 --> 00:01:22,749 line:-2
and a new API
to represent empty state in your apps.


22
00:01:23.951 --> 00:01:26.019 line:-1 align:center
First, a big change.


23
00:01:26,053 --> 00:01:30,224 line:-2
You can use Xcode previews
directly with UIKit.


24
00:01:30.257 --> 00:01:32.659 line:-1 align:center
To take advantage of this feature,


25
00:01:32,693 --> 00:01:36,430 line:-2
use the Preview macro
to specify the name of the preview


26
00:01:36,463 --> 00:01:38,665 line:-1
and return a view controller.


27
00:01:38,699 --> 00:01:41,034 line:-2
I can set any properties
on the view controller


28
00:01:41,068 --> 00:01:44,505 line:-2
just to configure
and populate the preview with data.


29
00:01:46,240 --> 00:01:48,742 line:-1
You can also preview UIViews directly,


30
00:01:48.775 --> 00:01:51.345 line:-1 align:center
no view controller necessary.


31
00:01:51,378 --> 00:01:54,381 line:-1
Previews help you visualize UI components


32
00:01:54,414 --> 00:01:58,986 line:-2
and give immediate feedback
as you iterate on your code.


33
00:01:59,019 --> 00:02:01,255 line:-1
And once your app has been created,


34
00:02:01,288 --> 00:02:03,524 line:-1
Xcode Previews enable testing


35
00:02:03.557 --> 00:02:07.060 line:-2 align:center
across an array
of configurations and settings.


36
00:02:07,094 --> 00:02:10,230 line:-2
Next, I'd like to cover
an important improvement


37
00:02:10,264 --> 00:02:14,701 line:-2
to the view controller lifecycle
during appearance transitions,


38
00:02:14.735 --> 00:02:17.237 line:-2 align:center
such as when you present
a view controller,


39
00:02:17,271 --> 00:02:20,474 line:-1
or push or pop in a navigation controller.


40
00:02:20,507 --> 00:02:25,412 line:-2
There's a new view controller callback
named viewIsAppearing,


41
00:02:25,445 --> 00:02:27,748 line:-1
which is called after viewWillAppear


42
00:02:27.781 --> 00:02:30.951 line:-1 align:center
but before viewDidAppear.


43
00:02:30.984 --> 00:02:37.391 line:-2 align:center
viewIsAppearing is the best place
to do things each time the view appears.


44
00:02:37.424 --> 00:02:41.028 line:-2 align:center
When it is called,
both the view controller and the view


45
00:02:41,061 --> 00:02:43,430 line:-1
have an up-to-date trait collection.


46
00:02:43.463 --> 00:02:46.667 line:-2 align:center
Additionally,
the view has been added to the hierarchy


47
00:02:46.700 --> 00:02:50.003 line:-1 align:center
and has been laid out by its superview.


48
00:02:50,037 --> 00:02:54,241 line:-2
This makes viewIsAppearing
an ideal callback to run code


49
00:02:54,274 --> 00:02:56,777 line:-2
that depends on the view's
initial geometry,


50
00:02:56,810 --> 00:02:59,479 line:-1
including its size.


51
00:02:59,513 --> 00:03:05,619 line:-2
Lastly, this new viewIsAppearing method
back-deploys all the way to iOS 13,


52
00:03:05,652 --> 00:03:10,891 line:-2
so you can take advantage of it even if
your app runs on older versions of iOS.


53
00:03:12,459 --> 00:03:17,130 line:-2
Here is an illustration of how the new
viewIsAppearing callback


54
00:03:17,164 --> 00:03:19,399 line:-1
fits in with some other key events


55
00:03:19.433 --> 00:03:23.403 line:-2 align:center
during a typical view controller
appearance transition.


56
00:03:23.437 --> 00:03:25.539 line:-1 align:center
I'd like to point out a few things.


57
00:03:27,007 --> 00:03:32,613 line:-2
First, note how viewWillAppear gets called
before the view is added to the hierarchy,


58
00:03:32.646 --> 00:03:34.948 line:-1 align:center
and before layout begins.


59
00:03:34.982 --> 00:03:38.252 line:-2 align:center
This is why it's too early
to use the trait collection,


60
00:03:38.285 --> 00:03:42.656 line:-2 align:center
or to do anything that depends on
the view's size or other geometry.


61
00:03:43,857 --> 00:03:50,197 line:0
Next, notice how viewDidAppear is called
in a separate CATransaction at the end,


62
00:03:50,230 --> 00:03:53,233 line:0
after any animations take place.


63
00:03:53,267 --> 00:03:57,704 line:0
This means any changes you make
in viewDidAppear don't become visible


64
00:03:57,738 --> 00:03:59,673 line:0
until the transition completes,


65
00:03:59,706 --> 00:04:04,978 line:0
so it is too late to make changes
you want visible during the transition.


66
00:04:05,012 --> 00:04:10,184 line:0
On the other hand, viewIsAppearing
is called within the same transaction


67
00:04:10,217 --> 00:04:12,786 line:0
as viewWillAppear.


68
00:04:12,819 --> 00:04:16,523 line:-2
This means any changes you make
in either of those callbacks


69
00:04:16.557 --> 00:04:19.359 line:-2 align:center
become visible to the user
at the same time,


70
00:04:19,393 --> 00:04:22,496 line:-2
right from the very first frame
of the transition.


71
00:04:24.097 --> 00:04:27.100 line:-2 align:center
Finally,
though their timing may be similar,


72
00:04:27,134 --> 00:04:30,103 line:-2
there's a key difference
between viewIsAppearing


73
00:04:30,137 --> 00:04:34,041 line:-2
and layout callbacks
like viewWillLayoutSubviews.


74
00:04:35,108 --> 00:04:39,780 line:-2
Layout callbacks are made
whenever the view runs layoutSubviews,


75
00:04:39.813 --> 00:04:42.916 line:-2 align:center
which can happen multiple times
during the transition,


76
00:04:42,950 --> 00:04:46,186 line:-2
or any time later on
while the view is visible.


77
00:04:48.121 --> 00:04:53.260 line:-2 align:center
But viewIsAppearing is only called once
during the appearance transition,


78
00:04:53,293 --> 00:04:58,098 line:-2
and it still gets called
even if the view doesn't need layout.


79
00:04:58.131 --> 00:05:01.068 line:-2 align:center
This is why I like to think
of viewIsAppearing


80
00:05:01,101 --> 00:05:03,136 line:-1
as the Goldilocks callback:


81
00:05:03,170 --> 00:05:07,107 line:-2
it's not called too early,
or too late, or too often.


82
00:05:07,140 --> 00:05:09,576 line:-1
It is just right.


83
00:05:09.610 --> 00:05:15.082 line:-2 align:center
The trait system in UIKit
has been upgraded in iOS 17.


84
00:05:15.115 --> 00:05:18.852 line:-2 align:center
Traits automatically propagate data
through your app's hierarchy.


85
00:05:18,886 --> 00:05:21,989 line:-2
UITraitCollection contains
many system traits,


86
00:05:22,022 --> 00:05:24,291 line:-1
such as user interface style,


87
00:05:24,324 --> 00:05:26,960 line:-1
horizontal and vertical size classes,


88
00:05:26.994 --> 00:05:29.296 line:-1 align:center
and preferred content size category.


89
00:05:31.231 --> 00:05:37.104 line:-2 align:center
Now you can define custom traits
to add your own data to UITraitCollection.


90
00:05:37.137 --> 00:05:40.240 line:-2 align:center
This is an entirely new way
for you to propagate data


91
00:05:40.274 --> 00:05:42.843 line:-2 align:center
to the views and view controllers
in your app.


92
00:05:44.311 --> 00:05:47.414 line:-1 align:center
We've also added new trait override APIs


93
00:05:47,447 --> 00:05:51,718 line:-2
to easily modify trait values
on any view or view controller.


94
00:05:53.353 --> 00:05:57.391 line:-2 align:center
You can also adopt more flexible APIs
to receive callbacks


95
00:05:57,424 --> 00:05:59,226 line:-1
when traits change value,


96
00:05:59,259 --> 00:06:03,664 line:-2
instead of needing to override
traitCollectionDidChange in a subclass.


97
00:06:05,165 --> 00:06:08,135 line:-2
Finally, you can bridge
custom UIKit traits


98
00:06:08.168 --> 00:06:10.637 line:-1 align:center
with custom SwiftUI environment keys


99
00:06:10,671 --> 00:06:15,509 line:-2
to seamlessly pass data between UIKit
and SwiftUI components in your app.


100
00:06:17,010 --> 00:06:19,847 line:0
To learn all about these
exciting new enhancements,


101
00:06:19,880 --> 00:06:23,650 line:0
check out the video
"Unleash the UIKit trait system".


102
00:06:26,587 --> 00:06:31,091 line:-2
Across all our platforms,
SF symbols enable a consistent look


103
00:06:31,124 --> 00:06:36,496 line:-2
for toolbar icons,
navigation bars, and other UI elements.


104
00:06:36.530 --> 00:06:39.733 line:-2 align:center
They are designed to automatically align
with text labels


105
00:06:39,766 --> 00:06:42,402 line:-1
and can be easily customized for weight,


106
00:06:42,436 --> 00:06:46,507 line:-2
scale, and appearance
to match your app's design.


107
00:06:46,540 --> 00:06:50,811 line:-1
In iOS 17, UIKit supports animated symbols


108
00:06:50,844 --> 00:06:54,147 line:-1
with the new symbol effects API.


109
00:06:54.181 --> 00:06:59.186 line:-2 align:center
These effects can be applied to
any symbol image, even custom ones.


110
00:07:00,654 --> 00:07:07,528 line:-2
To apply symbol effects, use the new
addSymbolEffect() method on UIImageView.


111
00:07:07,561 --> 00:07:09,563 line:-1
Here, I add a bounce effect,


112
00:07:09,596 --> 00:07:14,134 line:-2
which causes the symbol
to bounce a single time.


113
00:07:14.168 --> 00:07:17.838 line:-1 align:center
Now I'll add a variable color effect.


114
00:07:17.871 --> 00:07:24.311 line:-2 align:center
Unlike bounce, the variable color effect
animates indefinitely when added.


115
00:07:24,344 --> 00:07:29,149 line:-2
Use the removeSymbolEffect() method
to end the effect.


116
00:07:29.183 --> 00:07:32.853 line:-2 align:center
Finally, I can use the new
setSymbolImage() method


117
00:07:32.886 --> 00:07:36.156 line:-2 align:center
to perform a transition effect
across symbols.


118
00:07:39,193 --> 00:07:43,530 line:-2
There's a lot more to symbol effects
than the three features I went over.


119
00:07:43,564 --> 00:07:49,136 line:0
Check out the video "Animate symbols
in your app" to learn more.


120
00:07:49,169 --> 00:07:55,209 line:-2
Next, we've added a new API
to make it easy to represent empty states.


121
00:07:55.242 --> 00:07:59.813 line:-2 align:center
Empty states are moments in your app
where there is no content to display.


122
00:08:05.118 --> 00:08:08.121 line:-2 align:center
They typically occur
upon the first launch of your app,


123
00:08:08,155 --> 00:08:10,490 line:-1
as no content has been created.


124
00:08:10,524 --> 00:08:13,193 line:-2
They also arise when your app
can't display content


125
00:08:13,227 --> 00:08:17,130 line:-2
due to a limitation,
such as a lack of Internet connection.


126
00:08:17.164 --> 00:08:23.003 line:-2 align:center
UIContentUnavailableConfiguration is a
composable description of an empty state,


127
00:08:23,036 --> 00:08:25,606 line:-2
and can be provided with
placeholder content,


128
00:08:25,639 --> 00:08:29,009 line:-1
such an image or text.


129
00:08:29.042 --> 00:08:35.115 line:-2 align:center
In this example, I inform that there
are no favorite translations to display.


130
00:08:35,148 --> 00:08:37,217 line:-1
To represent this empty state,


131
00:08:37.251 --> 00:08:40.554 line:-2 align:center
I set the configuration
as the view controller's


132
00:08:40,587 --> 00:08:43,790 line:-1
contentUnavailableConfiguration.


133
00:08:43.824 --> 00:08:46.426 line:-1 align:center
In addition to the .empty() configuration,


134
00:08:46,460 --> 00:08:48,896 line:-1
UIKit offers the .loading() configuration


135
00:08:48,929 --> 00:08:52,900 line:-2
to represent content
that is being prepared.


136
00:08:52,933 --> 00:08:57,471 line:-2
What's more, you can leverage
the UIHostingConfiguration API


137
00:08:57,504 --> 00:09:02,476 line:-2
to represent your app's empty state
with a SwiftUI view.


138
00:09:02.509 --> 00:09:06.813 line:-2 align:center
This works just like using
UIHostingConfiguration with cells.


139
00:09:08,982 --> 00:09:10,784 line:-1
The best place to update


140
00:09:10.817 --> 00:09:13.921 line:-2 align:center
your view controller's
content unavailable configuration


141
00:09:13,954 --> 00:09:15,689 line:-1
is inside the new method,


142
00:09:15,722 --> 00:09:19,393 line:-2
updateContentUnavailableConfiguration
(using: state).


143
00:09:20.594 --> 00:09:23.830 line:-2 align:center
This example
uses the .search configuration


144
00:09:23.864 --> 00:09:28.702 line:-2 align:center
which has been designed for queries
that return no results.


145
00:09:28.735 --> 00:09:33.106 line:-2 align:center
The configuration provides
localized primary and secondary text,


146
00:09:33,140 --> 00:09:36,977 line:-2
with the query interpolated
from the nearby search controller.


147
00:09:38,979 --> 00:09:43,150 line:-2
Whenever the availability of content
in your view controller changes,


148
00:09:43,183 --> 00:09:49,890 line:-2
call setNeedsUpdateContentUnavailable
Configuration to request an update.


149
00:09:49.923 --> 00:09:54.761 line:-2 align:center
Across all Apple platforms,
it is essential to deliver a consistent,


150
00:09:54.795 --> 00:09:56.530 line:-1 align:center
high-quality experience,


151
00:09:56.563 --> 00:09:59.166 line:-1 align:center
irrespective of the language setting.


152
00:09:59,199 --> 00:10:02,536 line:-2
To facilitate that,
we've made significant advancements


153
00:10:02.569 --> 00:10:05.372 line:-1 align:center
in the area of fonts and text rendering.


154
00:10:07,207 --> 00:10:11,578 line:-2
In this section I will tell you about
the dynamic line-height adjustments


155
00:10:11.612 --> 00:10:17.284 line:-2 align:center
that help prevent clipping and collision
of text in certain fonts and languages.


156
00:10:17.317 --> 00:10:21.922 line:-2 align:center
You'll also learn about the improved
line-breaking and hyphenation rules,


157
00:10:21.955 --> 00:10:27.361 line:-2 align:center
as well as the new API
to request images based on the locale.


158
00:10:27,394 --> 00:10:30,931 line:-2
First, a closer look
at fonts and their metrics.


159
00:10:32,132 --> 00:10:35,736 line:-2
Font metrics are defined
using several terms.


160
00:10:35.769 --> 00:10:39.373 line:-1 align:center
The baseline represents an imaginary line


161
00:10:39,406 --> 00:10:42,643 line:-1
upon which letters or words rest.


162
00:10:42.676 --> 00:10:46.747 line:-2 align:center
The line-height refers to
the space between these baselines.


163
00:10:46.780 --> 00:10:51.985 line:-2 align:center
And, the x-height is a line
that sits atop lowercase letters.


164
00:10:53,453 --> 00:10:59,226 line:-2
Some fonts have ascenders and descenders
that extend beyond these lines.


165
00:10:59,259 --> 00:11:03,864 line:-2
Ascenders are the parts of a font
that extend above the x-height.


166
00:11:03.897 --> 00:11:08.702 line:-2 align:center
Descenders, on the other hand,
hang below the baseline.


167
00:11:08.735 --> 00:11:12.439 line:-2 align:center
For some languages
like Arabic, Hindi, and Thai,


168
00:11:12.472 --> 00:11:19.012 line:-2 align:center
these elements require significantly more
vertical space than Latin letters,


169
00:11:19,046 --> 00:11:22,616 line:-2
leading to possible collisions
or clipping issues.


170
00:11:22.649 --> 00:11:27.621 line:-2 align:center
To prevent the overlapping of ascenders
and descenders in all languages,


171
00:11:27.654 --> 00:11:32.559 line:-2 align:center
we introduced a dynamic line-height
adjustment feature.


172
00:11:32.593 --> 00:11:36.630 line:-2 align:center
This ensures that text elements,
such as UILabels,


173
00:11:36,663 --> 00:11:38,699 line:-1
automatically adjust their line-heights


174
00:11:38.732 --> 00:11:42.336 line:-2 align:center
and vertical dimensions
for optimal readability.


175
00:11:42,369 --> 00:11:46,373 line:-2
We also made substantial enhancements
to line-breaking behavior


176
00:11:46.406 --> 00:11:50.611 line:-2 align:center
for languages such as Chinese,
German, Japanese, and Korean.


177
00:11:51,945 --> 00:11:54,648 line:-1
These improvements apply different rules


178
00:11:54,681 --> 00:11:57,718 line:-2
based on what kind of text style
you're using.


179
00:11:59.286 --> 00:12:01.522 line:-2 align:center
This will work automatically
in most cases,


180
00:12:01.555 --> 00:12:03.891 line:-1 align:center
as long as you adopt text styles,


181
00:12:03,924 --> 00:12:06,860 line:-2
but for more information
about best practices


182
00:12:06.894 --> 00:12:10.163 line:-2 align:center
and how to make sure your app works
with all languages,


183
00:12:10,197 --> 00:12:15,102 line:0
check out "What's new with Text
and Text Interactions."


184
00:12:15.135 --> 00:12:18.472 line:-2 align:center
In certain situations,
a significant portion of the UI


185
00:12:18,505 --> 00:12:23,143 line:-2
may be displayed in a language that
differs from the user's selected language.


186
00:12:23,177 --> 00:12:26,380 line:-2
For example,
when the content comes from the web.


187
00:12:26,413 --> 00:12:30,317 line:-2
In these cases, you can use
the new typesetting language trait


188
00:12:30.350 --> 00:12:33.320 line:-1 align:center
to indicate the interface's language,


189
00:12:33,353 --> 00:12:38,091 line:-2
which will help adjust line-height
and hyphenation rules accordingly.


190
00:12:38,125 --> 00:12:43,730 line:-2
UIKit now supports accessing
specific localized variants of images.


191
00:12:43,764 --> 00:12:47,134 line:-2
For example,
the character.textbox SF Symbol


192
00:12:47,167 --> 00:12:50,137 line:-1
has eight different locale-based variants.


193
00:12:51,605 --> 00:12:53,807 line:-1
By default, UIKit pulls the variant


194
00:12:53,841 --> 00:12:56,743 line:-2
matching the current language setting
on the device.


195
00:12:56,777 --> 00:13:00,113 line:-2
So if the current language
is U.S. English,


196
00:13:00,147 --> 00:13:02,783 line:-1
then the Latin variant is displayed.


197
00:13:04.818 --> 00:13:08.989 line:-2 align:center
On iOS 17,
apps can request specific variants


198
00:13:09,022 --> 00:13:13,327 line:-2
by providing a Locale
in the image's configuration.


199
00:13:13.360 --> 00:13:16.263 line:-2 align:center
Here, I look up the Japanese version
of the symbol


200
00:13:16.296 --> 00:13:20.767 line:-2 align:center
by providing a configuration
with a Japanese locale.


201
00:13:20.801 --> 00:13:24.938 line:-2 align:center
With all of these changes
to text rendering and locale support,


202
00:13:24,972 --> 00:13:28,442 line:-2
your apps can feel closer to home
for everyone.


203
00:13:29.643 --> 00:13:34.014 line:-2 align:center
Now, I'll take you through improvements
for building apps for iPad.


204
00:13:35,215 --> 00:13:38,819 line:-1
I'll cover improvements in 5 areas:


205
00:13:38.852 --> 00:13:41.421 line:-1 align:center
a new window dragging interaction,


206
00:13:41,455 --> 00:13:45,225 line:-2
enhanced sidebar behavior
in Stage Manager,


207
00:13:45.259 --> 00:13:47.661 line:-1 align:center
keyboard scrolling support,


208
00:13:47,694 --> 00:13:51,098 line:-2
advancements in building
document-centric apps,


209
00:13:51,131 --> 00:13:54,835 line:-2
and the new Apple Pencil features
and APIs.


210
00:13:56,937 --> 00:14:01,141 line:-2
In iOS 17, we've updated
the window dragging functionality


211
00:14:01.175 --> 00:14:06.280 line:-2 align:center
in Stage Manager by expanding the area
in which the drag gesture can begin.


212
00:14:07.714 --> 00:14:11.518 line:-2 align:center
Now, dragging anywhere
inside of a UINavigationBar


213
00:14:11.552 --> 00:14:14.721 line:-1 align:center
will start moving a window.


214
00:14:14,755 --> 00:14:18,525 line:-2
This gesture plays well with
other gesture recognizers


215
00:14:18,559 --> 00:14:20,561 line:-1
that might be present in your app,


216
00:14:20.594 --> 00:14:23.864 line:-1 align:center
such as pan or swipe gestures.


217
00:14:23,897 --> 00:14:28,602 line:-2
If you're not using a UINavigationBar
as part of the UI in your app,


218
00:14:28,635 --> 00:14:32,272 line:-1
you can adopt UIWindowSceneDragInteraction


219
00:14:32.306 --> 00:14:34.575 line:-1 align:center
and add it to any view.


220
00:14:34,608 --> 00:14:39,580 line:-2
You can also set up gesture relationships
with other pan gestures in your app


221
00:14:39.613 --> 00:14:42.549 line:-1 align:center
to make sure there aren't any conflicts.


222
00:14:42.583 --> 00:14:46.887 line:-2 align:center
This also works with Mac Catalyst
right out of the box.


223
00:14:46,920 --> 00:14:52,059 line:-2
Column-style UISplitViewControllers
have gained graceful new resizing behavior


224
00:14:52,092 --> 00:14:54,328 line:-1
in Stage Manager.


225
00:14:54,361 --> 00:14:57,731 line:-2
Sidebars are automatically hidden
when necessary,


226
00:14:57,764 --> 00:15:02,569 line:-2
and they'll remain hidden
until specifically requested to be shown.


227
00:15:02,603 --> 00:15:05,639 line:-2
When sidebars are requested
at narrower widths,


228
00:15:05,672 --> 00:15:10,878 line:-2
UISplitViewController uses overlay
or displace behavior as necessary.


229
00:15:12,346 --> 00:15:17,317 line:-2
An overlaid sidebar persists
as the window resizes larger.


230
00:15:17,351 --> 00:15:20,487 line:-2
When dismissed and recalled
at the larger width,


231
00:15:20.521 --> 00:15:23.257 line:-1 align:center
it will come back tiled.


232
00:15:23,290 --> 00:15:28,996 line:-2
Triple-column split view controllers,
such as in Mail, behave similarly.


233
00:15:29,029 --> 00:15:32,299 line:-2
This new behavior happens
with UISplitViewControllers


234
00:15:32,332 --> 00:15:36,470 line:-2
created with the double-column
or triple-column style.


235
00:15:36,503 --> 00:15:42,576 line:-2
To summarize: the automatic behavior
tiles the columns whenever possible,


236
00:15:42.609 --> 00:15:47.347 line:-2 align:center
hides sidebars as necessary
when width is decreased,


237
00:15:47,381 --> 00:15:51,151 line:-2
overlays or displaces
the secondary column with the sidebar


238
00:15:51,185 --> 00:15:56,223 line:-2
if there's not enough room to tile
when the sidebar button is tapped,


239
00:15:56.256 --> 00:15:59.459 line:-2 align:center
and you can override the behavior
in your application


240
00:15:59,493 --> 00:16:04,431 line:-2
using preferredDisplayMode
and preferredSplitBehavior.


241
00:16:04.464 --> 00:16:10.370 line:-2 align:center
In iPadOS 17 we've improved the support
for document-centric apps.


242
00:16:10.404 --> 00:16:13.907 line:-2 align:center
UIKit offers
a new UIDocumentViewController


243
00:16:13,941 --> 00:16:18,378 line:-2
that serves as the base class
of your content view controller.


244
00:16:18,412 --> 00:16:21,148 line:-1
It ensures a system default experience


245
00:16:21,181 --> 00:16:24,718 line:-2
and offers many features
without additional adoption,


246
00:16:24.751 --> 00:16:27.654 line:-2 align:center
such as automatically configuring
the title menu,


247
00:16:27,688 --> 00:16:32,726 line:-2
sharing, drag and drop,
key commands, and more.


248
00:16:32.759 --> 00:16:39.066 line:-2 align:center
Additionally, UIDocument now conforms
to UINavigationItemRenameDelegate


249
00:16:39.099 --> 00:16:41.869 line:-1 align:center
and offers a full renaming experience


250
00:16:41.902 --> 00:16:47.040 line:-2 align:center
when set as the rename delegate
of the view controller's navigation item.


251
00:16:47,074 --> 00:16:50,377 line:0
To learn more about these
and other new features


252
00:16:50,410 --> 00:16:53,080 align:center
for apps focused on document management,


253
00:16:53,113 --> 00:16:56,984 line:-2
check out
'Build better document-based apps'.


254
00:16:57.017 --> 00:17:00.888 line:-2 align:center
Apple Pencil adds an extra facet
to iPadOS apps


255
00:17:00.921 --> 00:17:03.490 line:-1 align:center
and there are a lot of new APIs as well.


256
00:17:05,058 --> 00:17:08,495 line:-1
With the new iPad Pro and iOS 16.4,


257
00:17:08.529 --> 00:17:11.965 line:-1 align:center
we introduced hover with Apple Pencil.


258
00:17:11,999 --> 00:17:17,704 line:-2
To capture hover from the pencil
you can use UIHoverGestureRecognizer.


259
00:17:17.738 --> 00:17:21.909 line:-2 align:center
The z offset reflects the normalized
hover distance from the screen,


260
00:17:21,942 --> 00:17:24,444 line:-1
ranging from 0 to 1.


261
00:17:24,478 --> 00:17:28,015 line:-2
You can also capture the altitude
and azimuth of the pencil


262
00:17:28.048 --> 00:17:31.485 line:-2 align:center
while in hover range
to accurately render the preview


263
00:17:31,518 --> 00:17:34,188 line:-2
of what your brush stroke
might look like on screen.


264
00:17:35.989 --> 00:17:39.593 line:-2 align:center
With pencil hover,
you can also hover across the home screen,


265
00:17:39,626 --> 00:17:42,863 line:-1
and toolbar icons in apps.


266
00:17:42.896 --> 00:17:45.532 line:-1 align:center
If you're using UIPointerInteraction,


267
00:17:45,566 --> 00:17:48,368 line:-1
no additional adoption is required.


268
00:17:48.402 --> 00:17:51.405 line:-2 align:center
However, it's worth noting,
the visual interactions


269
00:17:51.438 --> 00:17:53.974 line:-1 align:center
when using mouse or trackpad input


270
00:17:54,007 --> 00:17:57,811 line:-2
versus Apple Pencil input
are slightly different.


271
00:17:57,845 --> 00:18:01,048 line:0
For example,
pointer styles such as the system pointer


272
00:18:01,081 --> 00:18:03,884 line:0
aren't visible while using Apple Pencil.


273
00:18:05,319 --> 00:18:09,122 line:0
Make sure to try out
pencil hover with your app.


274
00:18:10,190 --> 00:18:15,128 line:0
In iOS
17, PencilKit becomes even more expressive


275
00:18:15,162 --> 00:18:17,831 line:0
and introduces new inks.


276
00:18:17,865 --> 00:18:20,968 line:0
The monoline pen is great for detail,


277
00:18:21,001 --> 00:18:24,338 align:center
giving you a consistent sized width.


278
00:18:24,371 --> 00:18:26,974 line:0
The fountain pen mimics calligraphy,


279
00:18:27,007 --> 00:18:31,044 line:0
with thick downstrokes and thin upstrokes.


280
00:18:31,078 --> 00:18:33,747 line:0
Watercolor allows for beautiful strokes


281
00:18:33,780 --> 00:18:35,649 line:0
and expressivity.


282
00:18:35,682 --> 00:18:39,219 line:0
And crayon is a fun addition.


283
00:18:39.253 --> 00:18:43.657 line:-2 align:center
With the new inks,
keep backward compatibility in mind.


284
00:18:43,690 --> 00:18:48,996 line:-2
Previous versions of iOS cannot load
the PKDrawings that contain the new inks.


285
00:18:50,264 --> 00:18:54,434 line:-2
A new content version property
on data model types like PKDrawing,


286
00:18:54,468 --> 00:18:58,572 line:-2
PKStroke, and others indicates
which PencilKit version


287
00:18:58.605 --> 00:19:01.208 line:-1 align:center
is required to load the object.


288
00:19:01,241 --> 00:19:05,979 line:-2
A content version of 1 denotes inks
that shipped in iOS 14


289
00:19:06,013 --> 00:19:09,416 line:-1
and 2 is for the new inks in iOS 17.


290
00:19:11.451 --> 00:19:13.587 line:-1 align:center
To provide a good user experience,


291
00:19:13.620 --> 00:19:17.224 line:-1 align:center
use this API to detect incompatibility


292
00:19:17,257 --> 00:19:21,428 line:-2
and provide a message
or render a fallback image.


293
00:19:21,461 --> 00:19:24,865 line:-2
When maintaining backwards compatibility
isn't possible,


294
00:19:24,898 --> 00:19:28,936 line:-2
use the new
maximumSupportedContentVersion API


295
00:19:28.969 --> 00:19:32.973 line:-2 align:center
to limit which features are available
via the canvas and toolpicker.


296
00:19:34.675 --> 00:19:38.378 line:-2 align:center
To make iPads even more powerful
when paired with a hardware keyboard


297
00:19:38,412 --> 00:19:44,084 line:-2
like Magic Keyboard, we have added support
for keyboard scrolling.


298
00:19:44,117 --> 00:19:46,286 line:-1
New in iOS 17,


299
00:19:46,320 --> 00:19:49,356 line:-2
UIScrollViews can be scrolled
using Page Up,


300
00:19:49.389 --> 00:19:54.027 line:-2 align:center
Page Down,
Home, and End keys, if available.


301
00:19:54.061 --> 00:19:58.232 line:-2 align:center
You can override this behavior
using a new API on UIScrollView,


302
00:19:58,265 --> 00:20:01,969 line:-1
allowsKeyboardScrolling.


303
00:20:02,002 --> 00:20:05,105 line:-2
Lastly, I'm going to guide you
through general enhancements


304
00:20:05,138 --> 00:20:07,474 line:-1
we've made in multiple areas of UIKit.


305
00:20:09,276 --> 00:20:12,613 line:-2
I'll tell you all about
8 general enhancements:


306
00:20:12,646 --> 00:20:14,414 line:-1
collection view improvements,


307
00:20:14.448 --> 00:20:17.017 line:-1 align:center
new spring animation parameters,


308
00:20:17,050 --> 00:20:20,320 line:-1
text interactions, and more.


309
00:20:23,090 --> 00:20:27,127 line:-2
I'll start with collection views
which have been greatly optimized,


310
00:20:27.160 --> 00:20:31.732 line:-2 align:center
with many performance improvements
in iOS 17.


311
00:20:31.765 --> 00:20:36.870 line:-2 align:center
These graphs show how much faster
collection view is in iOS 17


312
00:20:36,904 --> 00:20:40,307 line:-2
when performing operations
with a large number of items.


313
00:20:42.109 --> 00:20:46.113 line:-1 align:center
iOS 17 is nearly twice as fast as iOS 16


314
00:20:46,146 --> 00:20:48,649 line:-2
to invert the sort order
of a collection view


315
00:20:48,682 --> 00:20:51,451 line:-1
containing ten thousand items,


316
00:20:51.485 --> 00:20:53.453 line:-1 align:center
and it's almost three times as fast


317
00:20:53,487 --> 00:20:57,724 line:-2
to perform an update
that deletes half those items.


318
00:20:57,758 --> 00:21:01,562 line:-2
What's more, when you perform updates
without animations,


319
00:21:01.595 --> 00:21:05.666 line:-2 align:center
collection view performance
is improved even further.


320
00:21:05,699 --> 00:21:09,169 line:-2
Whether you're applying snapshots
to diffable data source,


321
00:21:09.203 --> 00:21:11.772 line:-1 align:center
or manually performing batch updates,


322
00:21:11.805 --> 00:21:16.443 line:-2 align:center
collection view is faster across the board
in iOS 17.


323
00:21:16.476 --> 00:21:19.580 line:-2 align:center
These improvements make your app
feel more responsive


324
00:21:19.613 --> 00:21:23.116 line:-1 align:center
and result in fewer hitches in your apps.


325
00:21:23.150 --> 00:21:27.554 line:-2 align:center
Now, I'll talk about a powerful
new feature in Compositional Layout,


326
00:21:27.588 --> 00:21:32.793 line:-2 align:center
by first starting with an example
of a fairly typical layout.


327
00:21:32.826 --> 00:21:36.230 line:-1 align:center
Here is the brand new Health app on iPad,


328
00:21:36.263 --> 00:21:42.069 line:-2 align:center
where the favorites section is using a
compositional layout with rows of 2 items,


329
00:21:42,102 --> 00:21:47,941 line:-2
all self sizing using
NSCollectionLayoutDimension.estimated.


330
00:21:47,975 --> 00:21:51,111 line:-2
Notice how the medications cell
has a height


331
00:21:51,144 --> 00:21:54,548 line:-2
that doesn't match that
of the cell next to it.


332
00:21:54,581 --> 00:21:58,852 line:-2
This would look much better if the items
in this row had the same height.


333
00:22:00,787 --> 00:22:06,593 line:-2
In iOS 17, Compositional Layout
gets a brand new layout dimension:


334
00:22:06,627 --> 00:22:08,962 line:-1
uniformAcrossSiblings.


335
00:22:10.697 --> 00:22:14.735 line:-2 align:center
This new feature allows self-sizing items
in your layout


336
00:22:14,768 --> 00:22:20,040 line:-2
to receive a consistent size
based on the size of the largest item.


337
00:22:20,073 --> 00:22:22,342 line:-1
When you need this kind of layout,


338
00:22:22.376 --> 00:22:28.348 line:-2 align:center
simply replace your estimated dimensions
with uniformAcrossSiblings.


339
00:22:28.382 --> 00:22:30.751 line:-1 align:center
Keep in mind, when you use this feature,


340
00:22:30,784 --> 00:22:33,954 line:-2
it requires all sibling items
to be created and sized


341
00:22:33.987 --> 00:22:36.757 line:-1 align:center
to determine the size of the largest item;


342
00:22:36,790 --> 00:22:41,161 line:-2
so avoid using it when you have
large numbers of items in a group.


343
00:22:42,963 --> 00:22:45,866 line:-1
Back to this example of the Health app.


344
00:22:45,899 --> 00:22:50,537 line:-2
There are two items in this group
with different item heights.


345
00:22:50.571 --> 00:22:55.709 line:-2 align:center
We updated all the items in this layout
to use uniformAcrossSiblings,


346
00:22:55,742 --> 00:23:00,347 line:-2
so the Medications cell grows to match
the height of the Sound Levels cell,


347
00:23:00,380 --> 00:23:02,950 line:-1
getting the layout we want.


348
00:23:02.983 --> 00:23:05.118 line:-1 align:center
Next, for spring animations,


349
00:23:05,152 --> 00:23:08,488 line:-2
we've been refining a new way
to specify parameters


350
00:23:08,522 --> 00:23:11,959 line:-2
that is easier to understand and
to work with.


351
00:23:13,060 --> 00:23:17,264 line:-2
It uses just 2 parameters:
duration and bounce.


352
00:23:19.266 --> 00:23:23.737 line:-2 align:center
The duration defines how long until you
perceive the spring animation to settle,


353
00:23:23.770 --> 00:23:27.407 line:-2 align:center
not how long the animation takes
to fully complete,


354
00:23:27,441 --> 00:23:30,777 line:-1
and it is independent of bounce.


355
00:23:30,811 --> 00:23:35,382 line:-2
And increasing the bounce from zero
adds bounce to the animation,


356
00:23:35.415 --> 00:23:38.151 line:-2 align:center
without changing
how long the animation feels.


357
00:23:40.621 --> 00:23:45.626 line:-2 align:center
We've added a new method on UIView
that takes these spring parameters.


358
00:23:45,659 --> 00:23:47,494 line:-1
And all of them are optional,


359
00:23:47,528 --> 00:23:50,430 line:-1
so now you can even write just "animate"


360
00:23:50,464 --> 00:23:53,867 line:-2
and get a spring animation
that matches the system default.


361
00:23:55,169 --> 00:23:58,906 line:-3
Watch the “Animate with Springs” talk
for more insight


362
00:23:58,939 --> 00:24:01,441 line:-2
into this new way of describing springs.


363
00:24:03,243 --> 00:24:09,216 line:-2
Next, I'll cover new features and APIs
for interacting with text.


364
00:24:09,249 --> 00:24:12,219 line:-2
We've made some significant improvements
to the text cursor


365
00:24:12.252 --> 00:24:15.355 line:-1 align:center
and text selection UI in iOS 17,


366
00:24:15,389 --> 00:24:19,293 line:-2
including a new redesigned
selection loupe.


367
00:24:19,326 --> 00:24:22,329 line:-1
Developers who have custom text views,


368
00:24:22,362 --> 00:24:24,431 line:-1
for example word processors,


369
00:24:24.464 --> 00:24:28.068 line:-2 align:center
can now use the system-provided views
for selection UI


370
00:24:28,101 --> 00:24:31,038 line:-1
without adopting all of UITextInteraction.


371
00:24:33,040 --> 00:24:37,211 line:-2
Text item interactions in text views
are now more customizable


372
00:24:37,244 --> 00:24:40,848 line:-1
through new APIs on UITextViewDelegate,


373
00:24:40.881 --> 00:24:44.852 line:-2 align:center
making it possible to modify
the primary action or menu


374
00:24:44.885 --> 00:24:48.322 line:-2 align:center
for text items like
links or text attachments.


375
00:24:50.157 --> 00:24:53.660 line:-2 align:center
Moreover, you can also tag
custom ranges of the content


376
00:24:53,694 --> 00:24:55,829 line:-1
to enable interactions on them,


377
00:24:55.863 --> 00:25:00.234 line:-2 align:center
making it easier to add actions or menus
to text that are not links.


378
00:25:01,401 --> 00:25:04,204 line:-2
To learn more about
the text cursor improvements


379
00:25:04,238 --> 00:25:06,874 line:-1
and the text item actions and menus,


380
00:25:06,907 --> 00:25:11,612 line:0
watch "What's new with text
and text interactions."


381
00:25:11.645 --> 00:25:16.717 line:-2 align:center
Now I am going to provide an update
on a well-established element of iOS:


382
00:25:16,750 --> 00:25:19,253 line:-1
the status bar.


383
00:25:19,286 --> 00:25:24,825 line:-2
The status bar styling on iOS
is controlled by the application under it,


384
00:25:24.858 --> 00:25:28.662 line:-2 align:center
with a default style that switches
based on the app or view controller


385
00:25:28.695 --> 00:25:31.932 line:-1 align:center
being in dark or light mode.


386
00:25:31.965 --> 00:25:36.703 line:-2 align:center
There are cases with user content that can
be tricky to get right to ensure contrast.


387
00:25:37,838 --> 00:25:43,544 line:-2
The default style here is dark because
the app is using a light user interface.


388
00:25:43,577 --> 00:25:46,079 line:-1
But some of the user content is dark.


389
00:25:48,148 --> 00:25:52,352 line:-2
Now, in iOS 17,
the default style continuously adjusts


390
00:25:52,386 --> 00:25:53,887 line:-1
to the content of the app


391
00:25:53,921 --> 00:25:57,257 line:-2
and automatically changes
between dark and light styles


392
00:25:57,291 --> 00:26:00,060 line:-1
in order to maintain contrast.


393
00:26:00,093 --> 00:26:04,565 line:-2
It even allows the status bar
to spilt styles when needed.


394
00:26:06.700 --> 00:26:10.337 line:-2 align:center
Since apps no longer need to specify
dark and light explicitly


395
00:26:10.370 --> 00:26:12.172 line:-1 align:center
for all of these cases,


396
00:26:12.206 --> 00:26:15.175 line:-2 align:center
there are opportunities
to remove customization code


397
00:26:15,209 --> 00:26:18,612 line:-1
and make use of the default style.


398
00:26:18,645 --> 00:26:22,749 line:-2
Drag and drop
is getting more powerful in iOS 17.


399
00:26:22.783 --> 00:26:27.821 line:-2 align:center
Supported files and content can now
be dropped onto icons on the Home screen


400
00:26:27.855 --> 00:26:31.625 line:-2 align:center
and opened directly
in the respective apps.


401
00:26:31.658 --> 00:26:35.062 line:-2 align:center
This will work automatically today
for many document-based apps


402
00:26:35,095 --> 00:26:37,764 line:-1
without any changes.


403
00:26:37.798 --> 00:26:40.801 line:-1 align:center
The system uses CFBundleDocumentTypes


404
00:26:40,834 --> 00:26:43,604 line:-1
as defined in your app's Info.plist file


405
00:26:43.637 --> 00:26:46.874 line:-2 align:center
to determine if the dropped file
is supported.


406
00:26:46,907 --> 00:26:51,445 line:-2
On drop, the files are opened
using the existing scene delegate methods,


407
00:26:51.478 --> 00:26:54.414 line:-1 align:center
just like any other URL.


408
00:26:54,448 --> 00:26:58,051 line:-2
Simply make sure your app defines
its supported document types


409
00:26:58.085 --> 00:27:00.354 line:-1 align:center
to opt into this feature.


410
00:27:00.387 --> 00:27:04.224 line:-1 align:center
UIKit adds support for ISO HDR Images,


411
00:27:04,258 --> 00:27:08,228 line:-2
allowing you to easily display
these images with UIImageView,


412
00:27:08,262 --> 00:27:11,899 line:-2
and to manipulate them
with UIGraphicsImageRenderer.


413
00:27:13.700 --> 00:27:17.437 line:-2 align:center
Additionally, the new UIImageReader
gives you more control


414
00:27:17,471 --> 00:27:19,173 line:-1
when loading images,


415
00:27:19,206 --> 00:27:22,409 line:-2
including converting
some HDR image formats,


416
00:27:22,442 --> 00:27:27,014 line:-2
such as those
from the Camera Roll to ISO HDR.


417
00:27:27.047 --> 00:27:32.686 line:-3 align:center
For more information check out the session
"Support HDR images in your app."


418
00:27:36.023 --> 00:27:42.629 line:-2 align:center
UIPageControl has gained new features
to represent fractional page progress.


419
00:27:42.663 --> 00:27:47.334 line:-2 align:center
Today, page controls are commonly used
in apps to display slideshow content


420
00:27:47,367 --> 00:27:50,103 line:-1
that automatically page on a set duration,


421
00:27:50,137 --> 00:27:52,673 line:-1
or along video content.


422
00:27:52,706 --> 00:27:55,843 line:-2
With the new progress
and timer progress API,


423
00:27:55.876 --> 00:28:00.447 line:-2 align:center
you can now represent the fractional
page progress in the active indicator


424
00:28:00.480 --> 00:28:04.151 line:-2 align:center
to provide better context
on when the page will change.


425
00:28:04.184 --> 00:28:07.120 line:-2 align:center
To set up
a fractional progress page control,


426
00:28:07,154 --> 00:28:12,025 line:-2
simply set the new progress property
on UIPageControl with a progress object.


427
00:28:13.327 --> 00:28:16.864 line:-2 align:center
UIPageControlTimerProgress
has a built-in timer


428
00:28:16,897 --> 00:28:20,100 line:-2
to make it easy
to configure each page's duration.


429
00:28:21.635 --> 00:28:26.240 line:-2 align:center
UIPageControl will automatically change
its page when the timer duration is met.


430
00:28:28,475 --> 00:28:32,613 line:-2
For pages that need to follow
video players or external timers,


431
00:28:32,646 --> 00:28:34,848 line:-1
which have their own source of truth,


432
00:28:34.882 --> 00:28:38.385 line:-1 align:center
use the base UIPageControlProgress type


433
00:28:38.418 --> 00:28:42.856 line:-2 align:center
to manually update the currentProgress
value as the content progresses.


434
00:28:42,890 --> 00:28:48,095 line:-2
iOS 17 and macOS
Sonoma introduce Palette Menus.


435
00:28:49,429 --> 00:28:51,632 line:-1
Palettes are a row of menu elements


436
00:28:51,665 --> 00:28:55,802 line:-2
generally used
for choosing from a collection of items.


437
00:28:55,836 --> 00:29:00,207 line:-2
This style of control can be found
in the Books app on iOS,


438
00:29:00.240 --> 00:29:03.443 line:-1 align:center
or in Mail and Finder on the Mac.


439
00:29:03,477 --> 00:29:07,481 line:-2
Now it's available as
a first class control in UIKit.


440
00:29:07,514 --> 00:29:09,917 line:-1
To turn any menu into a palette,


441
00:29:09,950 --> 00:29:13,687 line:0
just add .displayAsPalette
to its options like this.


442
00:29:15,055 --> 00:29:18,125 line:1
Since elements in a palette
are relatively small,


443
00:29:18,158 --> 00:29:20,561 align:center
selection isn't indicated
with a checkmark,


444
00:29:20,594 --> 00:29:23,564 align:center
as it is in regular menu elements.


445
00:29:23,597 --> 00:29:27,267 align:center
Instead, UIKit will choose
the appropriate selection indicator


446
00:29:27,301 --> 00:29:29,603 line:1
based on the provided image.


447
00:29:29,636 --> 00:29:33,073 line:1
If all elements in a palette
use monochromatic SF Symbols


448
00:29:33,106 --> 00:29:35,075 line:1
or template images,


449
00:29:35,108 --> 00:29:38,812 line:1
the selected element is tinted
with the app's tint color.


450
00:29:38,846 --> 00:29:42,382 align:center
If the elements
have multi-colored SF symbols,


451
00:29:42,416 --> 00:29:46,687 line:1
a tint-colored stroke is drawn
around the selected one.


452
00:29:46,720 --> 00:29:49,890 line:1
If you're using entirely custom images
for your menu elements,


453
00:29:49,923 --> 00:29:53,393 line:1
or if you'd like to override
the built in behavior


454
00:29:53,427 --> 00:29:56,296 align:center
by providing your own selection indicator,


455
00:29:56,330 --> 00:30:01,668 align:center
you may use the new selectedImage property
on the UIMenuLeaf protocol.


456
00:30:01,702 --> 00:30:07,074 align:center
In this example, the selectedImage is
being set in the UIAction's initializer.


457
00:30:08,141 --> 00:30:14,748 line:-2
UIKit's menu APIs are available on iOS,
iPadOS, and Mac Catalyst,


458
00:30:14,781 --> 00:30:19,520 line:-2
allowing you to build complex menus
with the same familiar API.


459
00:30:19,553 --> 00:30:22,456 line:-1
And starting with tvOS 17,


460
00:30:22,489 --> 00:30:26,226 line:-2
all of the same APIs are available
on Apple TV


461
00:30:26.260 --> 00:30:30.564 line:-2 align:center
with a brand new appearance
and native tvOS behaviors.


462
00:30:30.597 --> 00:30:33.667 line:-1 align:center
Wow! We've covered a lot of ground.


463
00:30:33.700 --> 00:30:36.937 line:-2 align:center
UIKit has certainly acquired
an array of features,


464
00:30:36,970 --> 00:30:40,040 line:-1
enhancing its capabilities even further.


465
00:30:41.308 --> 00:30:43.277 line:-1 align:center
What's Next?


466
00:30:43.310 --> 00:30:47.414 line:-1 align:center
Compile your app using the iOS 17 SDK.


467
00:30:47,447 --> 00:30:51,885 line:-2
Incorporate the new UIKit features
and take advantage of Xcode previews


468
00:30:51,919 --> 00:30:54,054 line:-1
in your projects.


469
00:30:54,087 --> 00:30:58,525 line:-2
And ensure that your UIs are flexible
to accommodate varying text metrics


470
00:30:58,559 --> 00:31:01,395 line:-1
in non-Latin languages.


471
00:31:01,428 --> 00:31:05,699 line:-2
I hope you enjoyed
the brief overview of these topics.


472
00:31:05.732 --> 00:31:09.803 line:-2 align:center
For a more in depth look,
check out the related videos.


473
00:31:09,837 --> 00:31:11,271 line:-1
Thank you.


474
00:31:11.305 --> 00:31:14.308 line:-1 align:center
♪ ♪

