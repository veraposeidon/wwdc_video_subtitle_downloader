2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:10.477 --> 00:00:11.945 line:-1 align:center
Hello, and welcome.


4
00:00:11.979 --> 00:00:15.048 line:-1 align:center
I'm Varun Subramanian, an Engineer in GPU,


5
00:00:15.082 --> 00:00:17.985 line:-2 align:center
Graphics, and Display Software group
at Apple.


6
00:00:18.986 --> 00:00:22.055 line:-2 align:center
This session is the second part
of a 3-part series


7
00:00:22.089 --> 00:00:24.691 line:-1 align:center
on bringing your high-end games to Mac.


8
00:00:24,725 --> 00:00:29,663 line:0
The first session, covers how you can
evaluate your game and "make a game plan".


9
00:00:29.696 --> 00:00:34.067 line:-2 align:center
This session focuses on your shaders
and how to improve their flexibility


10
00:00:34.101 --> 00:00:36.904 line:-2 align:center
and speed
with some of the new Metal compiler tools,


11
00:00:36.937 --> 00:00:41.708 line:-2 align:center
including new ways to convert your shaders
to Metal intermediate representation


12
00:00:41,742 --> 00:00:46,146 line:-2
and how to avoid on-device compilation
by finalizing GPU binaries


13
00:00:46,180 --> 00:00:48,749 line:-1
during your games' build time.


14
00:00:48,782 --> 00:00:51,685 line:-2
The Metal compiler toolchain
helps you compile the shaders


15
00:00:51.718 --> 00:00:55.155 line:-2 align:center
that power your game
and Metal now makes that easier than ever.


16
00:00:56,223 --> 00:00:59,126 line:-2
Creating the Metal IR on device
is suboptimal


17
00:00:59.159 --> 00:01:01.195 line:-1 align:center
because it adds compilation overhead


18
00:01:01.228 --> 00:01:04.398 line:-2 align:center
before the GPU can do the work
you need it to do.


19
00:01:04,431 --> 00:01:08,068 line:-2
Metal provides you with tools necessary
to generate Metal IR


20
00:01:08.101 --> 00:01:11.004 line:-2 align:center
from your Metal Shading Language
ahead of time.


21
00:01:11.038 --> 00:01:15.008 line:-2 align:center
That Metal IR is stored
as a part of a Metal library.


22
00:01:15,042 --> 00:01:17,578 line:-2
You should always aim to generate
your Metal libraries


23
00:01:17.611 --> 00:01:20.380 line:-2 align:center
using the Metal compiler toolchain
ahead of time.


24
00:01:22.049 --> 00:01:25.652 line:-2 align:center
However, when coming from another API
and shading language,


25
00:01:25.686 --> 00:01:27.788 line:-1 align:center
you need a way to get them to Metal.


26
00:01:27,821 --> 00:01:32,392 line:-2
If you are a new comer to the Mac,
you now have Metal Shader Converter.


27
00:01:32,426 --> 00:01:34,795 line:-1
This simplifies your shader pipelines


28
00:01:34,828 --> 00:01:39,366 line:-2
and allows you to package the generated
Metal libraries directly in your bundle,


29
00:01:39.399 --> 00:01:43.003 line:-1 align:center
avoiding on-device generation of Metal IR.


30
00:01:43.036 --> 00:01:47.274 line:-2 align:center
The Metal libraries generated are the same
as those generated from the Metal compiler


31
00:01:47,307 --> 00:01:51,979 line:-2
allowing your converted shaders
to natively integrate with the Metal API.


32
00:01:52.012 --> 00:01:56.116 line:-2 align:center
Use the new tool to convert
your existing shaders to Metal libraries


33
00:01:56.149 --> 00:01:58.752 line:-1 align:center
that you then ship with your game.


34
00:01:58.785 --> 00:02:01.688 line:-2 align:center
Metal Shader Converter
provides a robust feature set


35
00:02:01.722 --> 00:02:05.792 line:-2 align:center
to improve the experience
of converting your shaders to Metal.


36
00:02:05,826 --> 00:02:09,129 line:-1
It consumes DXIL to produce Metal IR.


37
00:02:09.162 --> 00:02:11.999 line:-2 align:center
You use it alongside
the open source DXC compiler tool


38
00:02:12.032 --> 00:02:14.801 line:-1 align:center
to build an end-to-end shader pipeline.


39
00:02:14.835 --> 00:02:18.238 line:-2 align:center
Converting from DXIL to Metal IR
is very fast


40
00:02:18.272 --> 00:02:22.743 line:-2 align:center
because Metal shader converter performs
the conversion at the binary level.


41
00:02:22.776 --> 00:02:26.713 line:-2 align:center
As a result you will have reduced
shader asset build times.


42
00:02:26.747 --> 00:02:31.018 line:-2 align:center
It also enables you to leverage
advanced features of Apple GPUs.


43
00:02:31,051 --> 00:02:35,455 line:-2
You can do this because of the rich
feature set of Metal shader converter,


44
00:02:35.489 --> 00:02:38.425 line:-2 align:center
which supports all the traditional
and modern shader stages


45
00:02:38,458 --> 00:02:41,328 line:-1
of your existing DXIL shaders.


46
00:02:41.361 --> 00:02:43.297 line:-1 align:center
Using Metal shader converter,


47
00:02:43,330 --> 00:02:46,767 line:-2
you can convert your shaders
for the traditional graphics pipeline


48
00:02:46.800 --> 00:02:51.238 line:-2 align:center
including tessellation
and geometry shaders to Metal libraries.


49
00:02:51,271 --> 00:02:55,275 line:-2
It also supports compute shaders,
as well as more recently introduced


50
00:02:55,309 --> 00:03:00,614 line:-2
ray tracing stages and shaders
and amplification and mesh shaders.


51
00:03:00,647 --> 00:03:04,451 line:-2
Now, I'll walk you through
how to use the Metal shader converter.


52
00:03:06.019 --> 00:03:10.891 line:-2 align:center
There are two scenarios where you may want
to convert your shaders via command line.


53
00:03:10,924 --> 00:03:14,127 line:-2
Using the command line tool
via terminal is a good mechanism


54
00:03:14,161 --> 00:03:16,563 line:-1
to convert one shader at a time.


55
00:03:16.597 --> 00:03:18.332 line:-1 align:center
If you have multiple shaders,


56
00:03:18,365 --> 00:03:21,468 line:-2
you can create a shell script
that calls Metal shader converter


57
00:03:21,502 --> 00:03:24,972 line:-2
to transform multiple shaders
for you automatically.


58
00:03:25,005 --> 00:03:29,443 line:-2
Converting your shader using
the command line tool is very easy.


59
00:03:29.476 --> 00:03:32.412 line:-1 align:center
After you set up DXC and shader converter,


60
00:03:32,446 --> 00:03:36,216 line:-2
start by compiling
your HLSL shader to DXIL.


61
00:03:36,250 --> 00:03:39,486 line:-2
DXC requires you to specify
the entry point to compile,


62
00:03:39.520 --> 00:03:42.489 line:-1 align:center
the type of shader, and the output file.


63
00:03:42.523 --> 00:03:46.627 line:-2 align:center
Next, call shader converter
on the DXIL file just created


64
00:03:46,660 --> 00:03:49,930 line:-2
and specify the output
Metal library to create.


65
00:03:49,963 --> 00:03:53,267 line:-2
By default,
shader converter generates a Metal library


66
00:03:53,300 --> 00:03:55,335 line:-1
for the latest version of macOS,


67
00:03:55,369 --> 00:03:58,872 line:-2
as well as JSON file
with useful reflection data.


68
00:03:58,906 --> 00:04:02,009 line:-2
At runtime, you pass this Metal library
to the Metal device


69
00:04:02.042 --> 00:04:05.212 line:-2 align:center
to load it
and build pipeline state objects.


70
00:04:05,245 --> 00:04:08,448 line:-2
There are two other scenarios
where the command line interface


71
00:04:08,482 --> 00:04:11,818 line:-2
may not be the best choice
for your workflow.


72
00:04:11,852 --> 00:04:14,755 line:-2
Some game engines have custom
asset build programs


73
00:04:14,788 --> 00:04:18,959 line:-2
that compile and package shaders
into game-specific formats.


74
00:04:18.992 --> 00:04:22.863 line:-2 align:center
Also, in some situations,
as you bootstrap your game for Metal,


75
00:04:22,896 --> 00:04:26,633 line:-2
you may also want to see how well
your shaders are working on the platform


76
00:04:26.667 --> 00:04:30.037 line:-2 align:center
before you fully turn them
into Metal libraries ahead of time.


77
00:04:30.070 --> 00:04:31.905 line:-1 align:center
For these last two cases,


78
00:04:31,939 --> 00:04:35,809 line:-2
you need a way to better integrate
Metal shader converter into your workflow.


79
00:04:36.777 --> 00:04:41.215 line:-2 align:center
To accomplish this, use the Metal
shader converter dynamic library.


80
00:04:41,248 --> 00:04:44,518 line:-2
It exposes all the same functionality
as the CLI tool


81
00:04:44.551 --> 00:04:47.020 line:-1 align:center
to help you generate Metal libraries.


82
00:04:47,054 --> 00:04:50,657 line:-2
The library offers a pure C interface
and just like the CLI,


83
00:04:50.691 --> 00:04:53.493 line:-1 align:center
it is available on both macOS and Windows,


84
00:04:53.527 --> 00:04:57.197 line:-2 align:center
so it's easy to integrate
into your existing workflows.


85
00:04:57,231 --> 00:05:00,100 line:-2
After you've converted your shaders
to Metal IR,


86
00:05:00,133 --> 00:05:01,969 line:-1
to integrate them into your game


87
00:05:02,002 --> 00:05:05,138 line:-2
you create pipeline states
and bind resources to them.


88
00:05:06,707 --> 00:05:09,476 line:-2
In your shaders,
you typically define resources


89
00:05:09,510 --> 00:05:13,680 line:-2
as global variables and assign
"register" declarations to them.


90
00:05:13,714 --> 00:05:18,118 line:-2
From the API side, your game either
binds resources directly to these slots,


91
00:05:18.151 --> 00:05:22.556 line:-2 align:center
or defines an explicit memory layout
via "root signatures".


92
00:05:22.589 --> 00:05:25.559 line:-2 align:center
Shader converter can help you
bring this model over,


93
00:05:25.592 --> 00:05:28.662 line:-2 align:center
because Metal
has a very flexible binding model.


94
00:05:28,695 --> 00:05:32,799 line:-2
The tool lays out these resources
into Argument buffers.


95
00:05:32,833 --> 00:05:35,636 line:-2
In this model,
you bind one argument buffer


96
00:05:35.669 --> 00:05:39.740 line:-2 align:center
directly to your pipeline
and reference your resources through it.


97
00:05:39,773 --> 00:05:42,409 line:-2
There are two layout modes
for this "top level" Argument buffer


98
00:05:42.442 --> 00:05:45.245 line:-2 align:center
that you can choose from,
to best suit your game.


99
00:05:46.547 --> 00:05:49.483 line:-2 align:center
The simplest layout you can create
is an automatic one,


100
00:05:49,516 --> 00:05:53,587 line:-2
where shader converter places
your resources one after the other.


101
00:05:53.620 --> 00:05:56.456 line:-2 align:center
Once you create a pipeline state
containing your shader,


102
00:05:56.490 --> 00:05:58.325 line:-1 align:center
you bind a single argument buffer,


103
00:05:58.358 --> 00:06:02.229 line:-2 align:center
and through it
you reference all your resources.


104
00:06:02.262 --> 00:06:06.533 line:-2 align:center
Alternatively, shader converter supports
explicitly defining a layout


105
00:06:06.567 --> 00:06:08.869 line:-1 align:center
that matches your root signature.


106
00:06:08.902 --> 00:06:13.407 line:-2 align:center
Use this mode when your game needs
to specify separate textures and samplers


107
00:06:13,440 --> 00:06:18,278 line:-2
into their own resource tables
or if your game uses bindless resources.


108
00:06:18.312 --> 00:06:21.114 line:-2 align:center
You may also embed raw buffers
and 32-bit constants


109
00:06:21,148 --> 00:06:23,650 line:-2
directly into the top-level
argument buffer,


110
00:06:23,684 --> 00:06:25,853 line:-1
shown as 0's and 1's in this diagram.


111
00:06:27,254 --> 00:06:29,556 line:-1
Now, the top-level Argument Buffer


112
00:06:29,590 --> 00:06:32,559 line:-2
is a resource shared
between the CPU and the GPU,


113
00:06:32,593 --> 00:06:34,294 line:-1
so as you write into it,


114
00:06:34.328 --> 00:06:36.697 line:-2 align:center
you need to coordinate access
to its memory


115
00:06:36.730 --> 00:06:40.367 line:-2 align:center
to avoid a race condition
that may cause visual corruption.


116
00:06:40,400 --> 00:06:44,671 line:-2
You don't need to serialize CPU
and GPU work to avoid this race condition.


117
00:06:44,705 --> 00:06:48,075 line:-2
One way to avoid this
is to use a bump allocator.


118
00:06:48,108 --> 00:06:49,843 line:-1
This can be a large Metal buffer


119
00:06:49,877 --> 00:06:53,547 line:-2
from which you sub-allocate
different resources each frame.


120
00:06:53,580 --> 00:06:56,617 line:-2
You then shadow the backing buffer
for each frame in flight


121
00:06:56,650 --> 00:06:58,218 line:-1
that your game handles.


122
00:06:58,252 --> 00:07:03,023 line:-2
For more details on bump allocator
implementation, check out our sample code.


123
00:07:03,056 --> 00:07:05,692 align:center
For best Argument
buffer management practices,


124
00:07:05,726 --> 00:07:09,930 align:center
check out the bindless session
from last year and Metal documentation.


125
00:07:09.963 --> 00:07:13.667 line:-2 align:center
The binding model is not the only place
where Metal shader converter


126
00:07:13.700 --> 00:07:16.270 line:-2 align:center
can help you
bring your shaders to the Mac.


127
00:07:16,303 --> 00:07:19,139 line:-2
Mapping certain shader stages
can be challenging


128
00:07:19.173 --> 00:07:21.742 line:-1 align:center
due to differences in graphics APIs.


129
00:07:21,775 --> 00:07:23,944 line:-1
For example, you may have pipelines


130
00:07:23.977 --> 00:07:27.481 line:-2 align:center
that leverage traditional geometry
and tessellation stages.


131
00:07:27,514 --> 00:07:30,284 line:-2
Metal is a modern API,
and it offers features


132
00:07:30.317 --> 00:07:32.986 line:-1 align:center
such as viewport ID and amplification


133
00:07:33,020 --> 00:07:37,925 line:-2
that makes older, less efficient stages
from other graphics APIs unnecessary.


134
00:07:39,259 --> 00:07:43,297 line:-2
However, when your game relies
on these pipelines for traditional effects


135
00:07:43,330 --> 00:07:47,100 line:-2
that enhance some surfaces,
like the grass rendered in this image,


136
00:07:47.134 --> 00:07:49.870 line:-1 align:center
converting them by hand is costly.


137
00:07:49,903 --> 00:07:53,307 line:-2
Metal shader converter helps you
bring these pipelines to Metal,


138
00:07:53,340 --> 00:07:55,042 line:-1
by mapping them to Mesh Shaders,


139
00:07:55.075 --> 00:07:57.978 line:-2 align:center
a modern and more efficient
graphics API construct.


140
00:07:58,979 --> 00:08:01,815 line:-2
The tool does the heavy lifting
to bring these complex pipelines


141
00:08:01,849 --> 00:08:03,350 line:-1
over to Metal easily,


142
00:08:03,383 --> 00:08:07,421 line:-2
by mapping each stage
to a Metal IR representation.


143
00:08:07,454 --> 00:08:12,392 line:-2
This includes the tessellator, which is
traditionally a fixed function operation.


144
00:08:12,426 --> 00:08:16,296 line:0
To support this workflow,
this year Metal adds the capability


145
00:08:16,330 --> 00:08:21,935 line:0
of linking visible functions to the
"object and mesh" stages of Mesh shaders.


146
00:08:21,969 --> 00:08:24,037 line:-1
After you've compiled your shaders,


147
00:08:24.071 --> 00:08:27.374 line:-2 align:center
you use them to build
a "Metal Mesh RenderPipeline Descriptor"


148
00:08:27.407 --> 00:08:30.978 line:-2 align:center
and compile it into
a "Metal Render Pipeline state".


149
00:08:31.011 --> 00:08:34.081 line:-2 align:center
When Metal receives the request
to build this pipeline state,


150
00:08:34,114 --> 00:08:36,817 align:center
it compiles and links all the Metal IR,


151
00:08:36,850 --> 00:08:39,553 line:0
baking all functions into
a single pipeline,


152
00:08:39,586 --> 00:08:41,722 align:center
completely avoiding function call overhead


153
00:08:41,755 --> 00:08:44,892 align:center
and maximizing performance during runtime.


154
00:08:44.925 --> 00:08:47.661 line:-2 align:center
Notice the power and flexibility
of Metal visible functions


155
00:08:47.694 --> 00:08:50.097 line:-2 align:center
that allows you to build this elaborate
render pipeline


156
00:08:50,130 --> 00:08:54,101 line:-2
containing these shading stages
with their supplemental functions.


157
00:08:54.134 --> 00:08:56.870 line:-2 align:center
While building these mesh pipelines
is straightforward,


158
00:08:56.904 --> 00:09:00.140 line:-2 align:center
every pipeline has to follow
a series of steps in precise order.


159
00:09:01.575 --> 00:09:05.612 line:-2 align:center
The shader converter runtime
helps you build these complex pipelines.


160
00:09:05.646 --> 00:09:09.349 line:-2 align:center
It even emulates draw calls
by dispatching mesh shading work.


161
00:09:09,383 --> 00:09:14,054 line:-2
For more information, please consult
the Metal Shader Converter documentation.


162
00:09:14,087 --> 00:09:17,824 line:-2
Now that your shaders are on Metal
and you are running your pipeline states,


163
00:09:17,858 --> 00:09:21,962 line:-2
here are some tips to help you get
great performance and visual correctness.


164
00:09:23,030 --> 00:09:27,835 line:-2
Shaders compiled with shader converter
reference Metal resources indirectly.


165
00:09:27.868 --> 00:09:32.239 line:-2 align:center
To flag resource residency to Metal,
you would call "useResource".


166
00:09:32,272 --> 00:09:37,344 line:-2
However, useResource is an expensive call
when used in excess.


167
00:09:37,377 --> 00:09:41,815 line:-2
Use the plural useResources
to provide several resources at once,


168
00:09:41.849 --> 00:09:45.886 line:-2 align:center
or consider using Metal heaps
via useHeap to flag residency


169
00:09:45.919 --> 00:09:48.689 line:-1 align:center
of several resources in a single call.


170
00:09:48,722 --> 00:09:52,693 line:-2
The pipeline objects are cached when
Metal compiles them for the first time,


171
00:09:52,726 --> 00:09:57,297 line:-2
automatically reducing compilation-based
hitching on subsequent runs of your game.


172
00:09:57,331 --> 00:10:00,200 line:-1
Binary archives can also help you here.


173
00:10:00.234 --> 00:10:03.604 line:-2 align:center
To get more out of the GPU
and customize the Metal IR


174
00:10:03.637 --> 00:10:07.808 line:-2 align:center
for higher performance,
shader converter provides you options.


175
00:10:07.841 --> 00:10:12.112 line:-2 align:center
There are customizations on compatibility,
GPU family,


176
00:10:12,145 --> 00:10:17,451 line:-2
vertex fetch behavior,
entry point naming, reflection, and more.


177
00:10:17,484 --> 00:10:19,920 line:-2
Here's one
additional optimization opportunity.


178
00:10:21.054 --> 00:10:24.658 line:-2 align:center
I mentioned earlier that shader converter
joins the Metal compiler


179
00:10:24,691 --> 00:10:27,294 line:-2
as another mechanism to produce
"Metal Libraries"


180
00:10:27.327 --> 00:10:29.630 line:-1 align:center
from your existing shader IR.


181
00:10:29,663 --> 00:10:34,334 line:-2
Metal uses these
to feed various graphics pipeline stages.


182
00:10:34.368 --> 00:10:36.403 line:-1 align:center
Since everything is Metal IR,


183
00:10:36,436 --> 00:10:40,140 line:-2
you can mix and match "Metal Libraries"
coming from Metal shader converter


184
00:10:40,174 --> 00:10:44,611 line:-2
and from the Metal Compiler in a single
app and even in a single pipeline.


185
00:10:44.645 --> 00:10:48.148 line:-2 align:center
Metal shading language also enables you
to access unique features


186
00:10:48.182 --> 00:10:50.250 line:-1 align:center
like programmable blending.


187
00:10:50,284 --> 00:10:54,555 line:-2
Use this approach to make the most
out of Apple's GPUs.


188
00:10:54,588 --> 00:10:57,457 line:-2
You can even take advantage
of unique shading functionality


189
00:10:57.491 --> 00:10:59.459 line:-1 align:center
such as tile shading.


190
00:10:59.493 --> 00:11:03.964 line:-2 align:center
This grants you tremendous flexibility
in how you bring your game to Metal.


191
00:11:03.997 --> 00:11:08.402 line:-2 align:center
Performance is important but visual
correctness of your game is paramount.


192
00:11:08,435 --> 00:11:12,706 line:-2
HLSL allows seamlessly treating textures
as arrays of one element.


193
00:11:13,807 --> 00:11:16,743 line:-2
To bring over shaders
that rely on this behavior,


194
00:11:16.777 --> 00:11:19.179 line:-1 align:center
create your textures as texture arrays,


195
00:11:19,213 --> 00:11:22,583 line:-2
or create "texture array views"
on your textures.


196
00:11:22,616 --> 00:11:24,685 line:-2
If you are using
"MetalKit Texture Loader",


197
00:11:24.718 --> 00:11:28.422 line:-2 align:center
it can also help you load files
as texture arrays.


198
00:11:28,455 --> 00:11:31,558 line:-2
To set up your sampler objects
and read from these textures,


199
00:11:31,592 --> 00:11:33,660 line:-1
make sure to let Metal know in advance


200
00:11:33,694 --> 00:11:38,131 line:-2
that you intend to reference samplers
in argument buffers by using the property


201
00:11:38.165 --> 00:11:42.102 line:-2 align:center
supportsArgumentBuffers
in the MTL Sampler Descriptor.


202
00:11:42.135 --> 00:11:45.739 line:-2 align:center
Now that you are familiar with Integrating
shader converter in your workflows,


203
00:11:45,772 --> 00:11:48,308 line:-1
here's how to get it.


204
00:11:48.342 --> 00:11:52.646 line:-2 align:center
You can download Metal shader converter
from developer.apple.com.


205
00:11:52.679 --> 00:11:54.081 line:-1 align:center
If you are working on your Mac,


206
00:11:54,114 --> 00:11:57,050 line:-2
get the Metal shader converter
for Mac package.


207
00:11:57.084 --> 00:11:58.819 line:-1 align:center
If you are working on Windows,


208
00:11:58.852 --> 00:12:02.055 line:-2 align:center
it is part of the Metal Developer Tools
for Windows package.


209
00:12:02.089 --> 00:12:04.791 line:-2 align:center
The beta version of the tool
is available now.


210
00:12:04,825 --> 00:12:07,528 line:-2
Both packages
contain Metal shader converter,


211
00:12:07.561 --> 00:12:09.696 line:-1 align:center
in standalone and library form,


212
00:12:09,730 --> 00:12:12,766 line:-1
as well as the runtime companion header.


213
00:12:12,799 --> 00:12:17,604 line:-2
Full documentation as well as
a Metal C++ code sample are available now.


214
00:12:17,638 --> 00:12:21,608 line:-2
Use the sample code to explore geometry
and tessellation emulation,


215
00:12:21,642 --> 00:12:25,112 line:-1
instanced drawing, and compute shaders.


216
00:12:25.145 --> 00:12:29.049 line:-2 align:center
Converting your shaders to Metal libraries
that you ship with your game


217
00:12:29,082 --> 00:12:32,686 line:-2
helps you avoid generating those libraries
at game run-time.


218
00:12:32.719 --> 00:12:36.490 line:-2 align:center
There is one additional optimization
you may be able to perform,


219
00:12:36,523 --> 00:12:40,861 line:-2
which is to compile your GPU binaries
ahead of time as well.


220
00:12:40.894 --> 00:12:43.430 line:-2 align:center
When you build your game,
you compile your shaders


221
00:12:43.463 --> 00:12:47.901 line:-2 align:center
into Metal libraries which still need to
be finalized into GPU binaries.


222
00:12:47.935 --> 00:12:50.070 line:-1 align:center
Usually your game does this at launch,


223
00:12:50,103 --> 00:12:53,106 line:-1
resulting in longer loading screens.


224
00:12:53,140 --> 00:12:56,476 line:-2
If you defer finalizing
GPU binaries at runtime,


225
00:12:56.510 --> 00:13:01.815 line:-2 align:center
it may result in frame drops as
the game compiles new pipelines on demand.


226
00:13:01,849 --> 00:13:05,586 line:-2
The Metal GPU Binary compiler
can help you solve this


227
00:13:05,619 --> 00:13:10,390 line:-2
by allowing you to generate
your shader binaries at game build time.


228
00:13:10,424 --> 00:13:13,794 line:-2
By removing the need to generate
shader binaries during gameplay,


229
00:13:13,827 --> 00:13:16,463 line:-2
your players benefit
from reduced app load time


230
00:13:16,496 --> 00:13:19,032 line:-2
without incurring
in additional GPU hitches.


231
00:13:20,667 --> 00:13:22,569 line:-1
To take advantage of this,


232
00:13:22.603 --> 00:13:26.440 line:-2 align:center
you can add another step to your workflow
to finalize your Metal libraries


233
00:13:26.473 --> 00:13:29.743 line:-1 align:center
into Metal binary archives at build time.


234
00:13:29,776 --> 00:13:33,780 align:center
On device GPU Binary compilation
happens when you create a pipeline state


235
00:13:33,814 --> 00:13:35,582 line:0
from a descriptor.


236
00:13:35,616 --> 00:13:39,586 line:0
This descriptor not only references
functions from a Metal library,


237
00:13:39,620 --> 00:13:42,656 align:center
but it also provides other critical
information to Metal


238
00:13:42,689 --> 00:13:45,492 line:0
such as the color format
of its render attachments


239
00:13:45,526 --> 00:13:47,895 line:0
and the vertex layout descriptor.


240
00:13:47,928 --> 00:13:54,101 line:0
The GPU binaries are generated
just-in-time as part of the PSO creation.


241
00:13:54,134 --> 00:13:58,805 line:-2
Binary archives allow you to take control
of when that compilation occurs.


242
00:13:58.839 --> 00:14:01.975 line:-2 align:center
In order to produce
GPU binaries ahead of time,


243
00:14:02,009 --> 00:14:04,178 line:-2
you provide both
your existing Metal Library


244
00:14:04.211 --> 00:14:08.815 line:-2 align:center
as well as a pipeline configuration script
referencing those libraries.


245
00:14:08,849 --> 00:14:11,785 align:center
You then provide both of them to metal-tt,


246
00:14:11,818 --> 00:14:15,556 align:center
producing a binary archive
with GPU binaries.


247
00:14:15.589 --> 00:14:18.926 line:-2 align:center
To develop the pipeline script,
you produce a JSON script


248
00:14:18,959 --> 00:14:22,496 line:-2
with pipeline configurations
similar to the Metal API.


249
00:14:22.529 --> 00:14:26.099 line:-2 align:center
This Metal code generates
a render pipeline descriptor


250
00:14:26.133 --> 00:14:29.670 line:-2 align:center
and alongside is its JSON
equivalent representation.


251
00:14:29,703 --> 00:14:32,973 line:-2
For your pipeline script,
add the Metal library path


252
00:14:33.006 --> 00:14:36.143 line:-2 align:center
as well as its fragment
and vertex function names.


253
00:14:36.176 --> 00:14:39.780 line:-2 align:center
You also specify
any other pipeline state configuration.


254
00:14:39.813 --> 00:14:43.584 line:-2 align:center
That's it, you now have
a Metal script that you can use.


255
00:14:43,617 --> 00:14:46,220 line:-2
You can find additional info
about the JSON schema


256
00:14:46,253 --> 00:14:48,922 line:-1
in Metal's developer documentation.


257
00:14:48,956 --> 00:14:51,391 line:-2
Your ahead-of-time
shader compilation workflow


258
00:14:51,425 --> 00:14:53,827 line:-2
may not be geared to generate
pipeline script files.


259
00:14:53.861 --> 00:14:57.331 line:-2 align:center
For these cases, there's
an alternative way to produce them.


260
00:14:58.298 --> 00:15:02.135 line:-2 align:center
You can record Metal binary archives
while running your game on device.


261
00:15:02.169 --> 00:15:06.073 line:-2 align:center
These archives include
the corresponding pipeline scripts.


262
00:15:06,106 --> 00:15:10,577 line:-2
If you harvest these archives from device,
you can then use "metal-source"


263
00:15:10.611 --> 00:15:13.347 line:-2 align:center
to extract
their embedded pipeline scripts.


264
00:15:13,380 --> 00:15:17,484 line:-2
You then update the paths to your Metal
libraries in the extracted scripts.


265
00:15:17,518 --> 00:15:18,919 line:0
For more information,


266
00:15:18,952 --> 00:15:22,689 line:0
please refer to our talks
on how you can "Build GPU binaries"


267
00:15:22,723 --> 00:15:26,260 line:0
as well as "Discover compilation
workflows".


268
00:15:26,293 --> 00:15:29,496 line:-2
Because GPU binaries are tailored
to each GPU,


269
00:15:29,530 --> 00:15:32,533 line:-2
"metal-tt" produces different versions
of the binaries


270
00:15:32.566 --> 00:15:36.470 line:-2 align:center
for you to distribute to your players,
based on their device.


271
00:15:36.503 --> 00:15:39.439 line:-1 align:center
Metal-tt helps you manage this complexity


272
00:15:39.473 --> 00:15:42.142 line:-2 align:center
by encapsulating
all the different GPU binaries


273
00:15:42,176 --> 00:15:44,678 line:-1
neatly into Metal binary archives.


274
00:15:44,711 --> 00:15:47,948 line:-2
This way,
when your app loads that binary archive,


275
00:15:47,981 --> 00:15:51,985 line:-2
Metal automatically picks
the appropriate binary for your players.


276
00:15:52.019 --> 00:15:56.890 line:-2 align:center
You can also encapsulate multiple sets
of binaries into a single binary archive.


277
00:15:58.492 --> 00:16:01.628 line:-2 align:center
Now that you are able to produce
binary archives ahead of time,


278
00:16:01.662 --> 00:16:04.665 line:-1 align:center
here are some best practices.


279
00:16:04,698 --> 00:16:08,202 line:-2
When your players run a Metal app
with pre-compiled GPU Binaries,


280
00:16:08.235 --> 00:16:12.606 line:-2 align:center
Metal searches the packaged binary archive
for the necessary GPU binary.


281
00:16:12,639 --> 00:16:14,942 line:-1
If Metal finds no match in the archive,


282
00:16:14.975 --> 00:16:18.278 line:-2 align:center
it automatically falls back
to on-device compilation.


283
00:16:18,312 --> 00:16:22,749 line:-2
Your app will still look correct, but this
may delay your submissions to the GPU.


284
00:16:22,783 --> 00:16:25,986 line:-2
You can test if your binary archives
contain the pipelines you expect,


285
00:16:26,019 --> 00:16:30,424 line:-2
using the option
"FailOnBinaryArchiveMiss".


286
00:16:30,457 --> 00:16:34,428 line:-2
You can easily specify
the FailOnBinaryArchiveMiss option


287
00:16:34.461 --> 00:16:36.797 line:-2 align:center
when creating
a Metal pipeline state object.


288
00:16:36,830 --> 00:16:40,534 line:-2
In case of a binary archive miss,
when you have this option set,


289
00:16:40.567 --> 00:16:45.005 line:-2 align:center
Metal skips the on-device compilation
and returns a nil pipeline state.


290
00:16:45,038 --> 00:16:48,842 line:-2
Once your binary archives are ready
with support for all target devices,


291
00:16:48.876 --> 00:16:51.111 line:-1 align:center
you're ready for deployment.


292
00:16:51,144 --> 00:16:54,147 line:-2
Not all of your players
may be on the latest OS.


293
00:16:54.181 --> 00:16:57.017 line:-2 align:center
To ensure all users
benefit from binary archives,


294
00:16:57.050 --> 00:17:03.357 line:-2 align:center
generate an archive for each major
OS version and store it into your app.


295
00:17:03.390 --> 00:17:07.861 line:-2 align:center
To accomplish this, check the OS version
of your player's device


296
00:17:07.895 --> 00:17:10.264 line:-1 align:center
and select the appropriate binary archive


297
00:17:10,297 --> 00:17:13,767 line:-2
to associate
with your Pipeline Descriptors.


298
00:17:13,800 --> 00:17:16,270 line:-1
When your players update their OS,


299
00:17:16,303 --> 00:17:18,939 line:-2
their binary archives may require
recompilation


300
00:17:18,972 --> 00:17:22,843 line:-2
for forward compatibility,
but Metal has you covered.


301
00:17:22,876 --> 00:17:25,846 line:-2
Metal identifies
the unpackaged binary archives


302
00:17:25,879 --> 00:17:28,015 line:-1
in app bundle on your player's device


303
00:17:28.048 --> 00:17:30.317 line:-2 align:center
and upgrades them automatically
in the background


304
00:17:30,350 --> 00:17:33,554 line:-1
after an OS update or game install.


305
00:17:33,587 --> 00:17:37,224 line:-2
In summary, "metal" compiler
and "metal-shaderconverter"


306
00:17:37,257 --> 00:17:40,694 line:-2
are your go-to tools,
to produce Metal libraries ahead of time


307
00:17:40.727 --> 00:17:42.963 line:-1 align:center
that you can then ship with your game.


308
00:17:42.996 --> 00:17:46.066 line:-2 align:center
Use the "metal compiler"
when compiling MSL source,


309
00:17:46.099 --> 00:17:50.103 line:-2 align:center
and "metal-shaderconverter"
when your shaders are in HLSL.


310
00:17:50,137 --> 00:17:54,842 line:-2
metal-tt enables you to finalize
Metal libraries into GPU binaries,


311
00:17:54.875 --> 00:17:58.712 line:-2 align:center
tailored to the various GPUs
in the Metal ecosystem.


312
00:17:58.745 --> 00:18:02.349 line:-2 align:center
Finally, metal-source helps you
harvest pipeline scripts


313
00:18:02,382 --> 00:18:04,985 line:-1
from your existing MacOS games.


314
00:18:05,018 --> 00:18:07,521 line:-1
The vast majority of these tools,


315
00:18:07.554 --> 00:18:10.724 line:-2 align:center
as well as the rest
of the GPU binary compiler toolchain,


316
00:18:10.757 --> 00:18:13.727 line:-1 align:center
now support Windows, in addition to macOS,


317
00:18:13,760 --> 00:18:18,098 line:-2
making it easier than ever to integrate
them into your existing workflows.


318
00:18:18.131 --> 00:18:21.602 line:-2 align:center
To wrap up:
Metal Shader Converter is a new tool


319
00:18:21.635 --> 00:18:25.239 line:-2 align:center
to help you bring your shaders that were
developed in another shading language


320
00:18:25,272 --> 00:18:26,673 line:-1
to Metal.


321
00:18:26,707 --> 00:18:29,543 line:-1
The GPU binary compiler and its toolchain,


322
00:18:29,576 --> 00:18:31,478 line:-1
which is now available on Windows,


323
00:18:31.512 --> 00:18:35.082 line:-2 align:center
can finalize your Metal libraries
into GPU binaries.


324
00:18:35.115 --> 00:18:38.051 line:-2 align:center
With these tools,
you now have everything you need


325
00:18:38.085 --> 00:18:40.287 line:-1 align:center
to bring your shaders to Metal.


326
00:18:40.320 --> 00:18:42.689 line:-1 align:center
There's still more to share with you.


327
00:18:42,723 --> 00:18:46,994 line:0
Part 3 of the series focuses on
optimizing a high-end Metal application.


328
00:18:47,027 --> 00:18:48,795 line:0
Be sure to check it out.


329
00:18:48.829 --> 00:18:50.497 line:-1 align:center
Thanks for watching.


330
00:18:50.531 --> 00:18:53.534 line:-1 align:center
♪ ♪

