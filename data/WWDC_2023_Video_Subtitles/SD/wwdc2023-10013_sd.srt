2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
[light music]


3
00:00:10.010 --> 00:00:12.613 line:-1 align:center
Welcome to Meet StoreKit for SwiftUI.


4
00:00:12,679 --> 00:00:15,082 line:-2
I'm Greg, an engineer
on the StoreKit team.


5
00:00:15.148 --> 00:00:18.185 line:-2 align:center
Let's talk about merchandising
in-app purchases.


6
00:00:19,052 --> 00:00:20,554 line:-5
Merchandising in-app purchase


7
00:00:20.621 --> 00:00:23.223 line:-2 align:center
is all about presenting
your product offerings


8
00:00:23.290 --> 00:00:25.959 line:-2 align:center
and providing a way for customers
to complete the purchase.


9
00:00:27,794 --> 00:00:31,398 line:-2
Merchandising starts with getting
data about the product you're selling


10
00:00:31.465 --> 00:00:33.267 line:-1 align:center
and getting the status of your customer.


11
00:00:34.201 --> 00:00:38.405 line:-2 align:center
For example, does the customer
already own my non-consumable product?


12
00:00:38.472 --> 00:00:40.574 line:-1 align:center
Are they subscribed to my subscription?


13
00:00:41.575 --> 00:00:43.644 line:-2 align:center
You combine this data to build
an interface


14
00:00:43.710 --> 00:00:45.679 line:-1 align:center
to market the product to customers


15
00:00:45,746 --> 00:00:48,849 line:-2
and provide interactions
to purchase the product.


16
00:00:48.916 --> 00:00:50.250 line:-1 align:center
This little red rectangle


17
00:00:50.317 --> 00:00:53.754 line:-2 align:center
underrepresents all the hard work
that goes into building your interface.


18
00:00:54.755 --> 00:00:57.391 line:-2 align:center
There are actually many aspects
to building your interface,


19
00:00:57,457 --> 00:00:59,793 line:-2
requiring skills from a variety
of disciplines.


20
00:01:00,694 --> 00:01:03,897 line:-2
Then, your customer chooses
to purchase your product.


21
00:01:03,964 --> 00:01:07,067 line:-4
Your app needs to respond
by using the purchase API


22
00:01:07,134 --> 00:01:09,970 line:-4
and then updating its interface
as a result of the purchase.


23
00:01:10,904 --> 00:01:13,207 line:-2
If you've ever added in-app purchase
to an app,


24
00:01:13,273 --> 00:01:15,475 line:-2
you know getting merchandising right
is critical.


25
00:01:16,376 --> 00:01:18,979 line:-2
Wouldn't it be nice if we could abstract
all these steps


26
00:01:19.046 --> 00:01:21.515 line:-1 align:center
into a simple, yet powerful, view?


27
00:01:22.449 --> 00:01:24.818 line:-2 align:center
This view could handle
all common functionality


28
00:01:24.885 --> 00:01:26.186 line:-1 align:center
and take parameters


29
00:01:26.253 --> 00:01:29.623 line:-2 align:center
which allow you to configure the bits
that make your app, your app.


30
00:01:30,591 --> 00:01:33,861 line:-2
Well, I'm excited to introduce
a powerful new set of APIs


31
00:01:33,927 --> 00:01:36,496 line:-2
from StoreKit
for building merchandising UI.


32
00:01:37.464 --> 00:01:41.635 line:-2 align:center
In Xcode 15, StoreKit now provides
a collection of SwiftUI views,


33
00:01:41.702 --> 00:01:44.338 line:-2 align:center
which help you build
declarative in-app purchase UI.


34
00:01:44.972 --> 00:01:48.008 line:-2 align:center
You just declare what you want
the merchandising experience to be,


35
00:01:48.075 --> 00:01:51.445 line:-2 align:center
and the system puts your declarations
into action behind the scenes.


36
00:01:52,980 --> 00:01:56,083 line:-2
The StoreView, ProductView,
and SubscriptionStoreView


37
00:01:56,149 --> 00:02:00,988 line:-2
are new views to get you up and running
merchandising faster than ever.


38
00:02:01,054 --> 00:02:04,057 line:-2
These views abstract over the data flow
from the App Store


39
00:02:04,124 --> 00:02:07,928 line:-2
and display system-provided UI
to represent your in-app purchases.


40
00:02:08,762 --> 00:02:12,866 line:-2
You can even use SwiftUI APIs
you're already familiar with


41
00:02:12,933 --> 00:02:15,169 line:-2
to customize how these views integrate
with your app.


42
00:02:16.203 --> 00:02:19.840 line:-2 align:center
Just like SwiftUI, these new views are
supported on all platforms,


43
00:02:19,907 --> 00:02:22,976 line:-2
so merchandising in-app purchase
will be easier than ever


44
00:02:23.043 --> 00:02:27.181 line:-2 align:center
on iPhone, iPad,
Mac, Apple Watch, and Apple TV.


45
00:02:29,249 --> 00:02:31,151 line:-1
A flock of feathered friends approached me


46
00:02:31.218 --> 00:02:33.353 line:-2 align:center
and asked if I can help them add
in-app purchases


47
00:02:33.420 --> 00:02:35.455 line:-1 align:center
to their new game called Backyard Birds.


48
00:02:36.523 --> 00:02:38.258 line:-1 align:center
With these new views from StoreKit,


49
00:02:38.325 --> 00:02:39.993 line:-1 align:center
of course I said, "No problem at all."


50
00:02:41.195 --> 00:02:42.462 line:-1 align:center
Join me as we deliver


51
00:02:42.529 --> 00:02:44.264 line:-1 align:center
an excellent in-app purchase experience


52
00:02:44.331 --> 00:02:45.165 line:-1 align:center
in Backyard Birds.


53
00:02:45.732 --> 00:02:47.501 line:-1 align:center
Feel free to download the sample project


54
00:02:47,568 --> 00:02:48,635 line:-1
to work through this with me.


55
00:02:49.269 --> 00:02:53.073 line:-2 align:center
We'll use Xcode Previews
to rapidly iterate on our SwiftUI views.


56
00:02:54,141 --> 00:02:55,709 line:-1
Because we have so much to cover,


57
00:02:55.776 --> 00:02:58.412 line:-2 align:center
I've already set up
a StoreKit configuration file.


58
00:02:59,012 --> 00:03:01,748 line:-2
This contains metadata
about our in-app purchases,


59
00:03:01,815 --> 00:03:04,585 line:-2
which is necessary to use Xcode Previews
with StoreKit.


60
00:03:05,586 --> 00:03:08,689 align:center
We have some great sessions
to help you get started in your own app,


61
00:03:08,755 --> 00:03:11,558 line:0
such as, "What's new in StoreKit Testing"


62
00:03:11,625 --> 00:03:15,195 align:center
and "Introducing StoreKit Testing
in Xcode."


63
00:03:15,262 --> 00:03:16,597 line:0
Let's get right into Xcode.


64
00:03:17,197 --> 00:03:19,867 line:-2
In Backyard Birds, we want to sell
premium bird food


65
00:03:19.933 --> 00:03:21.735 line:-1 align:center
like this nutrition pellet.


66
00:03:21.802 --> 00:03:24.371 line:-2 align:center
After purchasing the food,
we can leave it in our backyard


67
00:03:24.438 --> 00:03:26.440 line:-1 align:center
to attract more hungry bird visitors.


68
00:03:26.807 --> 00:03:29.610 line:-2 align:center
Let's jump into the code to see
how we can leverage StoreKit


69
00:03:29,676 --> 00:03:30,978 line:-1
to merchandise these products.


70
00:03:33.647 --> 00:03:36.917 line:-2 align:center
To get started, we'll create a view
called BirdFoodShop


71
00:03:36,984 --> 00:03:38,285 line:-1
to merchandise our bird food.


72
00:03:39.286 --> 00:03:42.189 line:-2 align:center
I already created a file
to implement this view.


73
00:03:42,856 --> 00:03:44,391 line:-1
To use StoreKit to build our view,


74
00:03:44.458 --> 00:03:48.095 line:-2 align:center
we need to import both StoreKit
and SwiftUI at the top of the file.


75
00:03:50,631 --> 00:03:54,234 line:-2
Next, I'll declare a query here to get
our bird food data model,


76
00:03:54,301 --> 00:03:56,403 line:-2
which will help us
build out our store.


77
00:03:59.673 --> 00:04:01.241 line:-1 align:center
I'm adding a StoreView to the app


78
00:04:01,308 --> 00:04:05,245 line:-2
because it's the quickest way to get
the merchandising view up and running.


79
00:04:05,312 --> 00:04:07,781 line:-2
We need to provide it a collection
of product identifiers


80
00:04:07,848 --> 00:04:09,983 line:-1
from our StoreKit configuration file,


81
00:04:10.050 --> 00:04:12.119 line:-1 align:center
which we can get from the birdFood model.


82
00:04:18.292 --> 00:04:21.762 line:-2 align:center
After this declaration, now we have
a functioning merchandising view.


83
00:04:22,496 --> 00:04:25,732 line:-2
StoreKit loads all the product identifiers
from the App Store


84
00:04:25.799 --> 00:04:28.535 line:-1 align:center
and presents them in UI for us to view.


85
00:04:28,602 --> 00:04:31,038 line:-2
The display names, descriptions,
and prices


86
00:04:31.104 --> 00:04:33.106 line:-1 align:center
all come directly from the App Store,


87
00:04:33.173 --> 00:04:35.409 line:-2 align:center
which uses what you've set up
in App Store Connect


88
00:04:35.475 --> 00:04:37.711 line:-1 align:center
or your StoreKit configuration file.


89
00:04:37.778 --> 00:04:41.548 line:-2 align:center
StoreKit even handles
more subtle, but important, considerations


90
00:04:41.615 --> 00:04:45.786 line:-2 align:center
like caching the data until it expires
or the system is under memory pressure


91
00:04:45.853 --> 00:04:49.122 line:-2 align:center
and checking whether in-app purchase
is disabled in Screen Time.


92
00:04:49.990 --> 00:04:53.227 line:-2 align:center
Earlier, the bird designers sent
decorative icons


93
00:04:53,293 --> 00:04:54,695 line:-1
for each bird food product.


94
00:04:54.761 --> 00:04:56.797 line:-1 align:center
We can add these icons to the Store View


95
00:04:56.864 --> 00:04:58.866 line:-1 align:center
just by adding a trailing view builder,


96
00:04:58,932 --> 00:05:01,969 line:-2
and passing in a SwiftUI view
representing our icons.


97
00:05:04,071 --> 00:05:07,574 line:-2
The view builder takes a Product value
as a parameter,


98
00:05:07,641 --> 00:05:10,511 line:-2
which we can use
to determine an icon to use.


99
00:05:10,577 --> 00:05:13,447 line:-2
I created a helper view that takes
a product ID


100
00:05:13.514 --> 00:05:16.683 line:-2 align:center
and looks up the right icon
from our asset catalog.


101
00:05:20,787 --> 00:05:23,857 line:-2
Once I place this in here,
you can see the preview updates


102
00:05:23.924 --> 00:05:26.760 line:-2 align:center
to show the icons
for each of our products.


103
00:05:26.827 --> 00:05:29.363 line:-2 align:center
The Store View helps us get up and running
with ease


104
00:05:29.429 --> 00:05:31.932 line:-2 align:center
by turning our product identifiers
and icons


105
00:05:31,999 --> 00:05:34,268 line:-1
into a functional and well designed store.


106
00:05:35,169 --> 00:05:37,004 line:-1
A powerful feature of the Store View is,


107
00:05:37,070 --> 00:05:39,940 line:-2
our products automatically adjust
to different platforms,


108
00:05:40.007 --> 00:05:43.844 line:-2 align:center
so we already have a shop that looks great
on iPad, Mac, and Apple Watch.


109
00:05:43,911 --> 00:05:46,914 line:-2
Let's change our target in Xcode
to Apple Watch to preview our shop.


110
00:05:57.591 --> 00:05:58.692 line:-1 align:center
Looks great!


111
00:05:58.759 --> 00:06:01.695 line:-2 align:center
I think we're ready to sell some bird food
on Apple Watch as well.


112
00:06:03.063 --> 00:06:05.032 line:-2 align:center
It's common to want to organize
your products


113
00:06:05.098 --> 00:06:06.667 line:-1 align:center
in a way that's unique to your offering.


114
00:06:07.835 --> 00:06:10.504 line:-2 align:center
Our team of bird designers have been hard
at work


115
00:06:10,571 --> 00:06:13,507 line:-2
creating a composition to showcase
the bird food.


116
00:06:13.574 --> 00:06:17.177 line:-2 align:center
This composition displays
the best value prominently


117
00:06:17,244 --> 00:06:19,713 line:-2
and organizes the other products
into shelves.


118
00:06:20.848 --> 00:06:22.783 line:-2 align:center
This is different
from the list style layout


119
00:06:22.850 --> 00:06:24.384 line:-1 align:center
we can achieve with StoreView,


120
00:06:24,451 --> 00:06:26,353 line:-1
but StoreKit has us covered here as well.


121
00:06:28,088 --> 00:06:31,758 line:-2
For more detailed layouts, we can utilize
the new ProductView.


122
00:06:31.825 --> 00:06:34.695 line:-2 align:center
In fact, the StoreView
we were just looking at


123
00:06:34.761 --> 00:06:37.364 line:-2 align:center
uses the same ProductView
to create its rows.


124
00:06:38,065 --> 00:06:42,002 line:-2
Let's start by declaring a container
for our new store.


125
00:06:46.540 --> 00:06:48.909 line:-2 align:center
I want to showcase
this box of nutrition pellets


126
00:06:48,976 --> 00:06:53,013 line:-2
prominently above the other products,
because it's our best value.


127
00:06:53.080 --> 00:06:55.315 line:-1 align:center
To do this, I'll declare a ProductView


128
00:06:55.382 --> 00:06:58.051 line:-2 align:center
by providing the ID
for the nutrition pellet box.


129
00:07:04.091 --> 00:07:07.294 line:-2 align:center
Just like with the StoreView,
we can add a decorative icon


130
00:07:07.361 --> 00:07:08.795 line:-1 align:center
by adding a trailing closure.


131
00:07:09.496 --> 00:07:11.665 line:-2 align:center
I'll reuse our helper view
from before.


132
00:07:16,270 --> 00:07:19,439 line:-2
Next, let's add a section below
for the other food items.


133
00:07:20,174 --> 00:07:23,377 line:-2
I'll start by placing a background behind
the best value...


134
00:07:26.513 --> 00:07:29.516 line:-2 align:center
Then a header along with
another helper view I made


135
00:07:29,583 --> 00:07:31,285 line:-1
to lay out our bird food in shelves.


136
00:07:37.224 --> 00:07:39.193 line:-1 align:center
Inside this shelf helper view,


137
00:07:39.259 --> 00:07:42.229 line:-2 align:center
we can declare a ProductView
for each bird food product,


138
00:07:42,296 --> 00:07:44,097 line:-1
along with our decorative icon.


139
00:07:50.170 --> 00:07:52.806 line:-2 align:center
There's one last thing we need to tie
this whole shop together.


140
00:07:52,873 --> 00:07:55,309 line:-2
We really want to display this box
of nutrition pellets


141
00:07:55.375 --> 00:07:57.010 line:-1 align:center
prominently to customers,


142
00:07:57,077 --> 00:08:00,247 line:-2
but the bird designers think
what we have now could look better.


143
00:08:00,314 --> 00:08:04,184 line:-2
To appease the birds, we can use
the new productViewStyle API


144
00:08:04.251 --> 00:08:06.720 line:-1 align:center
to set the style for our hero product.


145
00:08:06,787 --> 00:08:09,223 line:-2
I'll choose the large style
to really make this stand out.


146
00:08:16.997 --> 00:08:21.368 line:-2 align:center
In just a few minutes, we built
a specialized shop just for our bird food


147
00:08:21,435 --> 00:08:23,837 line:-1
using the new ProductView in StoreKit.


148
00:08:24.938 --> 00:08:28.775 line:-2 align:center
The large ProductView style helps us
display our best value prominently


149
00:08:28.842 --> 00:08:30.577 line:-1 align:center
by just adding one view modifier.


150
00:08:31,745 --> 00:08:34,781 line:-2
There are three standard styles
to choose from to fit your needs.


151
00:08:35,749 --> 00:08:39,686 line:-2
Compact helps display more products
in a smaller space,


152
00:08:39,753 --> 00:08:44,091 line:-2
our bird food shelves automatically use
the Regular style,


153
00:08:44,157 --> 00:08:48,362 line:-2
and of course, the Large style is great
for prominent presentations.


154
00:08:49,696 --> 00:08:52,566 line:-2
Since the StoreView is composed
of ProductView instances,


155
00:08:52,633 --> 00:08:55,169 line:-2
you can use
the same productViewStyle modifier


156
00:08:55.235 --> 00:08:57.104 line:-1 align:center
to change the style of the StoreView.


157
00:08:58.939 --> 00:09:01.074 line:-1 align:center
You can even create custom styles


158
00:09:01,141 --> 00:09:03,644 line:-2
and use them with ProductView
and StoreView.


159
00:09:03.710 --> 00:09:06.480 line:-2 align:center
Stick around, and I'll show you how
later in the session.


160
00:09:07,614 --> 00:09:11,051 line:-2
We've built a great way to offer
consumable bird food in-app purchases


161
00:09:11.118 --> 00:09:12.186 line:-1 align:center
using ProductView.


162
00:09:13,086 --> 00:09:15,689 line:-2
The business birds think we haven't gone
far enough,


163
00:09:15.756 --> 00:09:18.158 line:-2 align:center
and they've tasked me
with offering a subscription


164
00:09:18.225 --> 00:09:21.728 line:-2 align:center
called Backyard Birds Pass
for the most avid birdwatchers.


165
00:09:22.563 --> 00:09:26.834 line:-2 align:center
While we can build subscription UI
using ProductView or StoreView,


166
00:09:26.900 --> 00:09:31.338 line:-2 align:center
the new SubscriptionStoreView
is built specifically for subscriptions.


167
00:09:31.405 --> 00:09:34.274 line:-2 align:center
Let's return to Xcode
and build this together.


168
00:09:34.341 --> 00:09:37.177 line:-2 align:center
To get started,
in our StoreKit configuration,


169
00:09:37.244 --> 00:09:40.414 line:-2 align:center
I've created this "Backyard Birds Pass"
subscription group


170
00:09:40.480 --> 00:09:42.416 line:-1 align:center
which offers three levels of service.


171
00:09:44.084 --> 00:09:47.387 line:-2 align:center
Take note of this group ID.
We'll need this in a moment.


172
00:09:48.856 --> 00:09:52.092 line:-2 align:center
Earlier, I made a new file
for our pass shop,


173
00:09:52.159 --> 00:09:55.095 line:-2 align:center
so let's dive right in
to the SubscriptionStoreView.


174
00:09:56,163 --> 00:09:59,233 line:-2
The fastest way to get up and running
with the SubscriptionStoreView


175
00:09:59.299 --> 00:10:00.767 line:-1 align:center
is by providing the group ID


176
00:10:00.834 --> 00:10:04.738 line:-2 align:center
from our StoreKit configuration file
or App Store Connect.


177
00:10:04.805 --> 00:10:07.307 line:-2 align:center
I already added the group ID
to our environment,


178
00:10:07.374 --> 00:10:11.645 line:-2 align:center
so we can just declare
an environment property to access it,


179
00:10:11,712 --> 00:10:15,549 line:-2
and then declare a SubscriptionStoreView
by providing the group ID.


180
00:10:21.655 --> 00:10:23.957 line:-2 align:center
Just like the StoreView
and the ProductView,


181
00:10:24,024 --> 00:10:27,094 line:-2
the SubscriptionStoreView manages
the data flow for us


182
00:10:27.160 --> 00:10:30.130 line:-2 align:center
and lays out a view
with the different plan options.


183
00:10:30.197 --> 00:10:33.100 line:-2 align:center
It also checks
for existing subscriber status


184
00:10:33.166 --> 00:10:37.204 line:-2 align:center
and whether the customer is eligible
for an introductory offer.


185
00:10:37.271 --> 00:10:39.139 line:-1 align:center
While this automatic look is great,


186
00:10:39.206 --> 00:10:42.176 line:-2 align:center
there are some powerful new APIs
we can use to make this fit


187
00:10:42.242 --> 00:10:44.611 line:-1 align:center
the look and feel of Backyard Birds.


188
00:10:44,678 --> 00:10:48,382 line:-2
For example, we can replace
the marketing content in the header


189
00:10:48,448 --> 00:10:50,651 line:-1
with any SwiftUI view.


190
00:10:50.717 --> 00:10:54.154 line:-2 align:center
I built a marketing content view earlier,
so I'll just drop this in here.


191
00:10:57.624 --> 00:11:00.827 line:-2 align:center
We can also add a container background
to the Subscription Store


192
00:11:00,894 --> 00:11:02,396 line:-1
to make things more visually interesting.


193
00:11:03,230 --> 00:11:06,633 line:-2
We can use the new SwiftUI containerBackground API.


194
00:11:10.337 --> 00:11:12.372 line:-1 align:center
Notice how I'm choosing to place this


195
00:11:12,439 --> 00:11:14,842 line:-2
in the full height
of the Subscription Store


196
00:11:14,908 --> 00:11:17,110 line:-2
and then declaring a view
I created earlier


197
00:11:17.177 --> 00:11:19.379 line:-1 align:center
with a sky gradient and some clouds.


198
00:11:20,247 --> 00:11:23,717 line:-2
To tie everything together, we can use
some other APIs


199
00:11:23,784 --> 00:11:26,253 line:-1
for styling the Subscription Store.


200
00:11:26.320 --> 00:11:29.690 line:-2 align:center
By default, the Subscription Store adds
a material layer


201
00:11:29,756 --> 00:11:32,726 line:-2
between the subscription controls
and a full-height background.


202
00:11:35.062 --> 00:11:37.331 line:-1 align:center
We can use the background style modifier


203
00:11:37.397 --> 00:11:40.467 line:-2 align:center
to make the background
behind the subscription controls clear.


204
00:11:45,606 --> 00:11:48,575 line:-1
Now, I'll use subscriptionStoreButtonLabel


205
00:11:48.642 --> 00:11:51.345 line:-2 align:center
to choose a multi-line layout
for our subscribe button.


206
00:11:55,215 --> 00:11:56,783 line:-1
Notice how the subscribe button


207
00:11:56.850 --> 00:11:59.620 line:-2 align:center
now contains both the price
and "Try it Free."


208
00:12:01.021 --> 00:12:04.625 line:-2 align:center
Next, I'll add
subscriptionStorePickerItemBackground


209
00:12:04.691 --> 00:12:07.694 line:-2 align:center
to declare a material effect
for our subscription options.


210
00:12:12,966 --> 00:12:17,137 line:-2
Here, we can see the sky gradient shine
through the subscription plan options.


211
00:12:20.007 --> 00:12:22.976 line:-2 align:center
Finally, because our subscription
has offer codes,


212
00:12:23,043 --> 00:12:25,212 line:-1
I'll use the new storeButton modifier


213
00:12:25.279 --> 00:12:27.848 line:-2 align:center
to declare the Redeem Code button
as visible.


214
00:12:32,819 --> 00:12:35,455 line:-2
With just this one view modifier,
we have a button


215
00:12:35,522 --> 00:12:38,625 align:center
for customers to open the offer code
redemption sheet.


216
00:12:40.027 --> 00:12:44.331 line:-2 align:center
Now, our subscription view matches
the feel of the rest of Backyard Birds.


217
00:12:45,299 --> 00:12:48,302 line:-2
While these new views significantly reduce
the effort required


218
00:12:48.368 --> 00:12:50.237 line:-1 align:center
to add in-app purchase to an app,


219
00:12:50,304 --> 00:12:53,307 line:-2
there are a couple important pieces
we're missing.


220
00:12:54.274 --> 00:12:57.344 line:-2 align:center
First, we must add logic
to actually unlock the content


221
00:12:57.411 --> 00:12:58.579 line:-1 align:center
after a purchase is made.


222
00:12:59.913 --> 00:13:03.116 line:-2 align:center
Second, we need to check if someone
is already subscribed


223
00:13:03.183 --> 00:13:06.386 line:-2 align:center
and then hide any controls
that present the SubscriptionStoreView.


224
00:13:07.621 --> 00:13:11.925 line:-2 align:center
StoreKit views handle customers who are
already subscribed automatically,


225
00:13:11.992 --> 00:13:16.129 line:-2 align:center
but in many cases, the best experience
is choosing not to present


226
00:13:16,196 --> 00:13:18,699 line:-2
any merchandising UI
to existing customers.


227
00:13:20,300 --> 00:13:22,302 line:-1
StoreKit has some brand new APIs


228
00:13:22.369 --> 00:13:24.938 line:-2 align:center
to make implementing
these important capabilities


229
00:13:25,005 --> 00:13:28,175 line:-2
just as easy and fun as selling
your content.


230
00:13:28.242 --> 00:13:30.043 line:-2 align:center
Before you get started
with these APIs,


231
00:13:30.110 --> 00:13:32.846 line:-2 align:center
you'll want to have already implemented
your business logic,


232
00:13:32.913 --> 00:13:34.815 line:-2 align:center
or at least have some scaffolding
in place.


233
00:13:35.682 --> 00:13:38.385 line:-2 align:center
Ensure you're handling
updated transactions,


234
00:13:38,452 --> 00:13:40,220 line:-1
cooperating with your server,


235
00:13:40,287 --> 00:13:42,222 line:-1
tracking consumable entitlements,


236
00:13:42.289 --> 00:13:45.592 line:-2 align:center
and creating a data model that's suitable
for your UI code,


237
00:13:45.659 --> 00:13:47.694 line:-1 align:center
among other things.


238
00:13:47,761 --> 00:13:50,163 line:-4
I recommend checking out "Meet StoreKit 2"


239
00:13:50,230 --> 00:13:52,332 line:-4
and "What's new in App Store server APIs"


240
00:13:52,399 --> 00:13:55,068 line:-4
to learn more about implementing
your business logic.


241
00:13:56.470 --> 00:13:59.439 line:-4 align:center
I already went ahead and implemented
our bird business logic


242
00:13:59,506 --> 00:14:01,608 line:-4
into an actor called BirdBrain.


243
00:14:01,675 --> 00:14:03,210 line:-4
You'll see me referencing this soon.


244
00:14:04.745 --> 00:14:06.947 line:-2 align:center
Let's get started
with giving bird watchers


245
00:14:07.014 --> 00:14:09.650 line:-2 align:center
access to the consumable bird food
they purchase.


246
00:14:10,584 --> 00:14:13,820 line:-2
Handling purchases that come from any
of the StoreKit views is simple.


247
00:14:13.887 --> 00:14:17.491 line:-2 align:center
You just modify a view
with onInAppPurchaseCompletion


248
00:14:17,558 --> 00:14:21,128 line:-2
and provide a function to call whenever
a purchase completes.


249
00:14:21.195 --> 00:14:23.497 line:-2 align:center
You can modify any view
with this method,


250
00:14:23.564 --> 00:14:26.266 line:-2 align:center
and it will be called
whenever a descendant StoreKit view


251
00:14:26.333 --> 00:14:27.801 line:-1 align:center
finishes a purchase.


252
00:14:27.868 --> 00:14:30.204 line:-2 align:center
Let's add this modifier
to our BirdFoodShop.


253
00:14:39.146 --> 00:14:42.049 line:-2 align:center
The modifier gives us the product
which was purchased


254
00:14:42,115 --> 00:14:44,051 line:-1
and the result of the purchase,


255
00:14:44,117 --> 00:14:46,420 line:-1
whether it was successful or not.


256
00:14:46.486 --> 00:14:49.289 line:-2 align:center
Let's implement this to send
any successful results


257
00:14:49.356 --> 00:14:51.425 line:-1 align:center
to the BirdBrain actor for processing.


258
00:14:55,863 --> 00:14:59,499 line:-2
By adding this modifier, we're now
unlocking the consumable bird food


259
00:14:59.566 --> 00:15:01.335 line:-1 align:center
that people purchase.


260
00:15:01,401 --> 00:15:03,103 line:-1
Let's give this a try in the simulator.


261
00:15:05,138 --> 00:15:08,909 line:-2
I'll choose a backyard
and tap the supplies.


262
00:15:10.310 --> 00:15:12.479 line:-2 align:center
Then, I'll purchase
some nutrition pellets.


263
00:15:19,853 --> 00:15:23,590 line:-2
After the sheet dismisses, you'll notice
we now have five nutrition pellets


264
00:15:23.657 --> 00:15:25.025 line:-1 align:center
in our supplies inventory.


265
00:15:26,426 --> 00:15:29,129 line:-1
Now, we can place a nutrition pellet


266
00:15:29,196 --> 00:15:32,466 line:-2
and sit back as our pellet brings
all the hungry birds to the yard.


267
00:15:34,635 --> 00:15:37,004 line:-1
In addition to onInAppPurchaseCompletion,


268
00:15:37.070 --> 00:15:39.573 line:-2 align:center
there are a few other related
view modifiers


269
00:15:39.640 --> 00:15:41.909 line:-2 align:center
you can use to handle events
from StoreKit views.


270
00:15:43,477 --> 00:15:45,612 line:-1
You can use onInAppPurchaseStart


271
00:15:45.679 --> 00:15:48.115 line:-2 align:center
to handle when someone triggers
a purchase button,


272
00:15:48,182 --> 00:15:50,651 line:-1
but before the purchase begins.


273
00:15:50,717 --> 00:15:53,387 line:-2
This is useful if you want to update
some UI components


274
00:15:53,453 --> 00:15:56,924 line:-2
while the purchase is running,
like dimming controls.


275
00:15:56.990 --> 00:16:00.394 line:-2 align:center
The function you provide here receives
the product that will be purchased


276
00:16:00.460 --> 00:16:01.461 line:-1 align:center
as a parameter.


277
00:16:02.930 --> 00:16:05.799 line:-2 align:center
When using these modifiers,
it's important to know


278
00:16:05,866 --> 00:16:09,570 line:-2
that they will handle events
from any descendant ProductView,


279
00:16:09,636 --> 00:16:12,306 line:-2
StoreView, or SubscriptionStoreView
instances.


280
00:16:13.040 --> 00:16:15.943 line:-2 align:center
If you add multiple modifiers,
all of your actions will run


281
00:16:16,009 --> 00:16:17,878 line:-1
for each event.


282
00:16:17.945 --> 00:16:21.815 line:-2 align:center
Keep in mind, using these modifiers
is entirely optional.


283
00:16:21,882 --> 00:16:25,018 line:-2
By default, successful transactions
from StoreKit views


284
00:16:25.085 --> 00:16:28.088 line:-2 align:center
will emit from
the Transaction.updates sequence,


285
00:16:28.155 --> 00:16:31.024 line:-2 align:center
but you have the option
to add onInAppPurchaseCompletion


286
00:16:31,091 --> 00:16:32,693 line:-1
to handle the result directly.


287
00:16:33,694 --> 00:16:36,063 line:-1
You can pass nil to any of these modifiers


288
00:16:36.129 --> 00:16:37.698 line:-1 align:center
to revert to the default behavior.


289
00:16:38,765 --> 00:16:43,470 line:-2
Now, let's talk about handling
Backyard Birds Pass subscriptions.


290
00:16:43.537 --> 00:16:45.539 line:-1 align:center
In addition to the new view APIs,


291
00:16:45,606 --> 00:16:47,508 line:-1
StoreKit has new view modifiers


292
00:16:47.574 --> 00:16:50.010 line:-2 align:center
for declaring data dependencies
in SwiftUI.


293
00:16:50.077 --> 00:16:53.247 line:-2 align:center
First, I'll cover
the subscriptionStatusTask,


294
00:16:53,313 --> 00:16:56,350 line:-2
which we can use
to make unlocking our pass a breeze.


295
00:16:56.416 --> 00:16:59.086 line:-2 align:center
In any view that depends
on our subscription,


296
00:16:59,152 --> 00:17:02,456 line:-2
we can add
the subscriptionStatusTask modifier.


297
00:17:02.523 --> 00:17:04.491 line:-1 align:center
Let's start with the Backyard Grid,


298
00:17:04.558 --> 00:17:08.128 line:-2 align:center
because this is where we show the button
to open the subscription offer sheet.


299
00:17:14.201 --> 00:17:16.370 line:-1 align:center
The subscriptionStatusTask modifier


300
00:17:16,436 --> 00:17:19,106 line:-2
takes the group ID of the subscription
we depend on.


301
00:17:20,374 --> 00:17:22,643 line:-2
This is the same group ID
we used earlier


302
00:17:22,709 --> 00:17:25,679 line:-2
when we declared
the SubscriptionStoreView.


303
00:17:25.746 --> 00:17:28.348 line:-1 align:center
Now, whenever the Backyard Grid appears,


304
00:17:28,415 --> 00:17:31,485 line:-2
a background task
will load the subscription status


305
00:17:31,552 --> 00:17:34,521 line:-2
and then call the function we provide
once the task completes.


306
00:17:36.456 --> 00:17:38.825 line:-1 align:center
The best practice for using this API


307
00:17:38,892 --> 00:17:42,062 line:-2
is to just pass the statuses
to our business logic,


308
00:17:42,129 --> 00:17:43,897 line:-1
in our case, the BirdBrain actor,


309
00:17:43,964 --> 00:17:46,166 line:-1
and then have the actor process the data


310
00:17:46,233 --> 00:17:47,501 line:-1
and return a model type


311
00:17:47.568 --> 00:17:49.970 line:-2 align:center
that is easier to work with
in our UI code.


312
00:17:55,642 --> 00:17:57,277 line:-1
I made this Pass status enum,


313
00:17:57.344 --> 00:17:59.680 line:-2 align:center
so I'll just make a state property
to assign this to.


314
00:18:07.354 --> 00:18:10.991 line:-2 align:center
Then, we can choose to only show
the subscription offer card


315
00:18:11.058 --> 00:18:13.293 line:-1 align:center
if someone is not currently subscribed.


316
00:18:18.365 --> 00:18:21.502 line:-2 align:center
With these quick additions,
we'll now only show the offer card


317
00:18:21.568 --> 00:18:23.637 line:-2 align:center
to bird watchers
who aren't yet subscribed.


318
00:18:23.704 --> 00:18:26.573 line:-2 align:center
StoreKit will call our function
when the status changes,


319
00:18:26,640 --> 00:18:30,043 line:-2
so our view will always reflect
the most up to date information.


320
00:18:31,044 --> 00:18:33,180 line:-2
We can use this same pattern
throughout the app


321
00:18:33.247 --> 00:18:35.682 line:-1 align:center
to unlock Backyard Birds Pass content,


322
00:18:35.749 --> 00:18:39.019 line:-2 align:center
and we can use
the onInAppPurchaseCompletion modifier


323
00:18:39,086 --> 00:18:41,989 line:-2
to automatically dismiss
the Pass Shop sheet


324
00:18:42.055 --> 00:18:44.091 line:-1 align:center
after a successful subscription.


325
00:18:44.157 --> 00:18:46.026 line:-1 align:center
I already completed this part earlier,


326
00:18:46.093 --> 00:18:48.462 line:-2 align:center
so let's run the app
in the iPhone simulator


327
00:18:48.529 --> 00:18:50.063 line:-1 align:center
and give this whole thing a test.


328
00:18:55,769 --> 00:18:58,539 align:center
I'll just tap Check It Out


329
00:18:58,605 --> 00:19:00,007 line:0
and press Try it Free.


330
00:19:02,376 --> 00:19:07,748 line:0
The payment sheet appears,
and I can tap Subscribe,


331
00:19:07,814 --> 00:19:08,649 align:center
then dismiss the alert.


332
00:19:09,883 --> 00:19:12,819 line:-2
Watch how the offer sheet
automatically dismisses,


333
00:19:12.886 --> 00:19:14.521 line:-1 align:center
and the offer card is hidden too.


334
00:19:15,155 --> 00:19:17,391 line:-2
That's because
the subscription status task


335
00:19:17.457 --> 00:19:20.360 line:-2 align:center
calls our function again
each time the status changes,


336
00:19:20,427 --> 00:19:23,664 line:-2
so we can be sure our app's UI
is always up to date.


337
00:19:25,199 --> 00:19:28,602 line:-2
While we're on the topic,
if your app offers non-consumables


338
00:19:28.669 --> 00:19:30.437 line:-1 align:center
or non-renewing subscriptions,


339
00:19:30.504 --> 00:19:33.841 line:-2 align:center
there's a new API to make
checking entitlements as easy


340
00:19:33,907 --> 00:19:35,909 line:-1
as the subscriptionStatusTask.


341
00:19:35.976 --> 00:19:38.946 line:-2 align:center
You can use
the currentEntitlementTask modifier


342
00:19:39,012 --> 00:19:41,982 line:-2
to declare a view as dependent
on the current entitlement


343
00:19:42.049 --> 00:19:43.550 line:-1 align:center
for a product ID,


344
00:19:43.617 --> 00:19:46.787 line:-2 align:center
and the system will asynchronously load
the current entitlement


345
00:19:46.854 --> 00:19:49.022 line:-2 align:center
and call your function
with the current entitlement


346
00:19:49.089 --> 00:19:50.257 line:-1 align:center
whenever it changes.


347
00:19:51.258 --> 00:19:54.394 line:-2 align:center
The functions you provide to both
the subscriptionStatusTask


348
00:19:54.461 --> 00:19:56.163 line:-1 align:center
and currentEntitlementTask


349
00:19:56,230 --> 00:19:59,233 line:-2
take an entitlement task state
as a parameter.


350
00:19:59,299 --> 00:20:02,402 line:-2
That way, you can choose
to granularly handle the case


351
00:20:02.469 --> 00:20:04.505 line:-1 align:center
when the entitlement is still loading,


352
00:20:04,571 --> 00:20:06,106 line:-1
if it fails to load,


353
00:20:06.173 --> 00:20:08.642 line:-2 align:center
and when the entitlement loaded
successfully.


354
00:20:09,510 --> 00:20:11,445 line:-1
I covered how these new StoreKit views


355
00:20:11.512 --> 00:20:14.615 line:-2 align:center
help streamline in-app purchase
integration in Backyard Birds.


356
00:20:15,516 --> 00:20:17,684 line:-1
Now, I want to go a little deeper


357
00:20:17.751 --> 00:20:20.754 line:-2 align:center
and show how you can take these views
a step further


358
00:20:20,821 --> 00:20:23,724 line:-2
with all the new StoreKit APIs
for SwiftUI.


359
00:20:25.058 --> 00:20:26.994 line:-1 align:center
First, we'll look at more options


360
00:20:27.060 --> 00:20:29.796 line:-2 align:center
for setting icons for ProductView
and StoreView.


361
00:20:30,664 --> 00:20:33,934 line:-2
Then, I'll go into detail
about styling the Product View.


362
00:20:34,868 --> 00:20:38,505 line:-2
After that, I'll cover how to add buttons
with common functionality


363
00:20:38,572 --> 00:20:41,341 line:-2
to the StoreView
and SubscriptionStoreView.


364
00:20:41,408 --> 00:20:44,111 line:-1
Finally, I'll go into the various new APIs


365
00:20:44.178 --> 00:20:46.647 line:-2 align:center
you can use to make
the Subscription Store View


366
00:20:46.713 --> 00:20:48.415 line:-1 align:center
fit your brand's look and feel.


367
00:20:49.283 --> 00:20:50.918 line:-1 align:center
Let's get into decorative icons.


368
00:20:51,451 --> 00:20:54,621 line:-2
When you provide an icon,
the standard Product View styles


369
00:20:54,688 --> 00:20:58,192 line:-2
all show a placeholder icon
while the product is loading,


370
00:20:58,258 --> 00:20:59,626 line:-1
like what you can see on the left.


371
00:21:00,460 --> 00:21:03,030 line:-2
Sometimes the automatic icon
doesn't exactly fit


372
00:21:03.096 --> 00:21:05.532 line:-1 align:center
what you expect the actual icon to be.


373
00:21:05,599 --> 00:21:09,269 line:-2
For example, on iPhone,
the automatic placeholder is a square,


374
00:21:09,336 --> 00:21:11,738 line:-2
but we use circle icons
for Bird Food products.


375
00:21:13,407 --> 00:21:15,209 line:-1
You can easily improve this appearance


376
00:21:15.275 --> 00:21:18.412 line:-2 align:center
by adding a second trailing closure
to your ProductView


377
00:21:18,478 --> 00:21:20,614 line:-2
with the icon you want
to use for your placeholder.


378
00:21:21,582 --> 00:21:24,151 line:-2
In this case, I just provided
a circle for the placeholder.


379
00:21:25,385 --> 00:21:28,455 line:-2
If you set an App Store promotion image
in App Store Connect,


380
00:21:28.522 --> 00:21:31.091 line:-2 align:center
you can have the ProductView
use that same image


381
00:21:31,158 --> 00:21:33,627 line:-1
instead of a SwiftUI view.


382
00:21:33.694 --> 00:21:36.630 line:-2 align:center
Just set the prefersPromotionalIcon
parameter to true.


383
00:21:38,832 --> 00:21:41,268 line:-2
You can still provide a SwiftUI view
as a fallback,


384
00:21:41.335 --> 00:21:44.805 line:-2 align:center
but this view is ignored as long
as the product has a promotional icon.


385
00:21:45.873 --> 00:21:50.177 line:-5 align:center
Check out "What's new in StoreKit 2
and StoreKit Testing in Xcode"


386
00:21:50,244 --> 00:21:54,915 line:-5
and "What's new in App Store Connect"
to learn how to set up a promotional icon.


387
00:21:56,817 --> 00:22:00,287 line:-2
Even if you don't want to use
a promotional icon from the App Store,


388
00:22:00.354 --> 00:22:03.357 line:-2 align:center
you can still use the cool in-app purchase
icon treatment


389
00:22:03,423 --> 00:22:05,526 line:-1
for your icons declared in SwiftUI.


390
00:22:06.660 --> 00:22:09.696 line:-2 align:center
Just add this modifier to the view
you provide for the icon


391
00:22:09,763 --> 00:22:11,798 line:-1
to get this border added to your view.


392
00:22:12.332 --> 00:22:15.369 line:-2 align:center
That's all about icons
in the Product View.


393
00:22:15,435 --> 00:22:18,172 line:-1
Keep in mind, there's corresponding API


394
00:22:18.238 --> 00:22:21.175 line:-2 align:center
to do all of the same things
with Store View icons, too.


395
00:22:22,376 --> 00:22:24,978 line:-2
Now, let's talk about styling
the Product View.


396
00:22:26.280 --> 00:22:30.184 line:-2 align:center
Earlier in the session, I mentioned you
can make custom Product View styles,


397
00:22:30.250 --> 00:22:32.586 line:-2 align:center
and it's finally time
for me to show you how.


398
00:22:33,954 --> 00:22:37,591 line:-2
The Product View's appearance,
layout behavior, and interactions


399
00:22:37.658 --> 00:22:40.527 line:-1 align:center
are entirely defined by the style it uses.


400
00:22:40.594 --> 00:22:43.864 line:-2 align:center
So, if you can't find a standard style
that fits what you're going for,


401
00:22:43.931 --> 00:22:46.733 line:-2 align:center
you can always create
your own custom Product View style.


402
00:22:48.068 --> 00:22:50.904 line:-2 align:center
The first case we'll look at involves
creating custom styles


403
00:22:50,971 --> 00:22:52,873 line:-1
composed of the standard styles


404
00:22:52.940 --> 00:22:54.708 line:-2 align:center
so you aren't starting
entirely from scratch.


405
00:22:55,509 --> 00:22:57,845 line:-2
For example,
what if you want the Product View


406
00:22:57,911 --> 00:22:59,346 line:-1
to show a progress spinner


407
00:22:59.413 --> 00:23:02.316 line:-2 align:center
instead of the standard placeholder
appearance while loading?


408
00:23:03.617 --> 00:23:06.119 line:-1 align:center
The first step for creating a custom style


409
00:23:06.186 --> 00:23:09.523 line:-2 align:center
is to create a type that conforms
to the ProductViewStyle protocol.


410
00:23:10.991 --> 00:23:13.393 line:-2 align:center
The only requirement for implementing
the protocol


411
00:23:13,460 --> 00:23:15,095 line:-1
is this makeBody method.


412
00:23:15.896 --> 00:23:18.799 line:-2 align:center
The configuration value passed
to your makeBody method


413
00:23:18.866 --> 00:23:22.236 line:-2 align:center
has all of the properties you need
to declare an excellent Product View.


414
00:23:23,170 --> 00:23:25,539 line:-1
For example, it has a state enumeration


415
00:23:25.606 --> 00:23:28.208 line:-2 align:center
which covers the different states
of loading the product.


416
00:23:29.076 --> 00:23:30.777 line:-1 align:center
To customize the loading appearance,


417
00:23:30.844 --> 00:23:33.480 line:-2 align:center
we just have to declare a ProgressView
for the loading state.


418
00:23:34,581 --> 00:23:37,918 line:-2
Then, we can fallback
to the standard ProductView behavior


419
00:23:37.985 --> 00:23:39.219 line:-1 align:center
for any other states


420
00:23:39.286 --> 00:23:42.289 line:-2 align:center
by simply passing the configuration
to a ProductView instance.


421
00:23:44.725 --> 00:23:48.795 line:-2 align:center
You apply custom styles the same way
you do standard styles,


422
00:23:48,862 --> 00:23:51,465 line:-2
by passing it to
the productViewStyle modifier.


423
00:23:52.599 --> 00:23:57.204 line:-2 align:center
Of course, you don't need to compose
your custom style with a standard style.


424
00:23:58,405 --> 00:24:00,007 line:-1
You can always define your style


425
00:24:00.073 --> 00:24:03.644 line:-1 align:center
using other views in the makeBody method.


426
00:24:03,710 --> 00:24:07,314 line:-2
When the task state is success,
you can access the Product value


427
00:24:07.381 --> 00:24:09.016 line:-1 align:center
the view is representing.


428
00:24:09.082 --> 00:24:12.252 line:-2 align:center
This is the same Product value
you're already used to working with


429
00:24:12.319 --> 00:24:14.087 line:-1 align:center
if your app uses StoreKit 2.


430
00:24:14,988 --> 00:24:18,458 line:-2
You can use all of the properties
of the Product to create your view.


431
00:24:19.626 --> 00:24:23.297 line:-2 align:center
The configuration also allows you
to access the decorative icon.


432
00:24:24.698 --> 00:24:26.466 line:-1 align:center
When you're adding the purchase button,


433
00:24:26.533 --> 00:24:30.103 line:-2 align:center
make sure to use the purchase method
on the configuration value,


434
00:24:30,170 --> 00:24:31,638 line:-1
not the product value.


435
00:24:32,506 --> 00:24:34,741 line:-1
Using the method on the configuration


436
00:24:34.808 --> 00:24:36.743 line:-1 align:center
will add default purchase options


437
00:24:36,810 --> 00:24:39,012 line:-2
to make sure
the payment confirmation sheet


438
00:24:39.079 --> 00:24:41.415 line:-2 align:center
displays in proximity
to your Product View,


439
00:24:41,481 --> 00:24:46,019 line:-2
and also triggers the reactive modifiers
like onInAppPurchaseCompletion.


440
00:24:47,154 --> 00:24:50,791 line:-2
Remember: when your custom style is built
from scratch,


441
00:24:50,858 --> 00:24:54,061 line:-2
the appearance and behavior
of Product Views using this style


442
00:24:54.127 --> 00:24:56.830 line:-2 align:center
will match that of the views you composed
to build the style.


443
00:24:57,898 --> 00:25:00,400 line:-2
Creating custom styles is a great way
to leverage


444
00:25:00.467 --> 00:25:02.836 line:-2 align:center
all the infrastructure
for the Product View,


445
00:25:02,903 --> 00:25:04,738 line:-1
such as App Store data flow,


446
00:25:04,805 --> 00:25:08,208 line:-2
while being free to declare
any appearance and behavior you want.


447
00:25:10,110 --> 00:25:13,180 line:-2
While loading, the UI we built
for the Bird Food Shop


448
00:25:13,247 --> 00:25:15,616 line:-1
shows placeholder shapes for each product.


449
00:25:15.682 --> 00:25:18.452 line:-2 align:center
But what if we want an appearance
like this loading spinner on the right?


450
00:25:19.720 --> 00:25:22.523 line:-2 align:center
The solution to this problem
is to lift up state.


451
00:25:22.589 --> 00:25:24.358 line:-1 align:center
Let me explain what I mean here.


452
00:25:25,826 --> 00:25:27,995 line:-1
This diagram represents the hierarchy


453
00:25:28.061 --> 00:25:30.497 line:-1 align:center
of the BirdFoodShop we built earlier.


454
00:25:30,564 --> 00:25:34,168 line:-2
The BirdFoodShop
has several ProductView descendants.


455
00:25:34,234 --> 00:25:37,037 align:center
When you initialize a ProductView
with a product ID,


456
00:25:37,104 --> 00:25:39,907 align:center
each view internally keeps state
of the product


457
00:25:39,973 --> 00:25:42,776 align:center
since the loading operation
is asynchronous.


458
00:25:42,843 --> 00:25:45,345 line:0
If you want to create an effect
where the parent BirdFoodShop


459
00:25:45,412 --> 00:25:47,714 align:center
shows a different appearance
while the products are loading,


460
00:25:47,781 --> 00:25:51,885 align:center
you'll need to lift your state up
into the parent BirdFoodShop.


461
00:25:51,952 --> 00:25:55,455 align:center
Once the parent BirdFoodShop is managing
the state of the products,


462
00:25:55,522 --> 00:25:58,492 align:center
it's free to change its appearance
while the data is loading,


463
00:25:58,559 --> 00:26:00,727 line:0
and then create ProductView instances


464
00:26:00,794 --> 00:26:03,697 align:center
using the pre-loaded product values
instead of their IDs.


465
00:26:04.531 --> 00:26:08.235 line:-2 align:center
We've only covered creating Product Views
by product ID so far,


466
00:26:08.302 --> 00:26:10.871 line:-2 align:center
but it's important to know
you can pass a Product value


467
00:26:10.938 --> 00:26:14.041 line:-2 align:center
that you've already loaded
to a ProductView.


468
00:26:14,107 --> 00:26:16,443 line:-2
This causes the Product View
to skip loading


469
00:26:16.510 --> 00:26:18.846 line:-2 align:center
and just lay out
the merchandising view directly.


470
00:26:19,947 --> 00:26:22,049 line:-1
You might be thinking: that's all cool,


471
00:26:22.115 --> 00:26:23.116 line:-1 align:center
but in order to do that,


472
00:26:23,183 --> 00:26:26,553 line:-2
now I have to write my own product request
and caching logic.


473
00:26:27,654 --> 00:26:29,223 line:-1
Well, you'll be happy to know


474
00:26:29.289 --> 00:26:31.825 line:-2 align:center
we're exposing the insides
of the StoreKit views


475
00:26:31.892 --> 00:26:33.193 line:-1 align:center
as a view modifier,


476
00:26:33.260 --> 00:26:38.065 line:-2 align:center
so you can declare any view as dependent
on the metadata for a product ID.


477
00:26:38.131 --> 00:26:40.601 line:-2 align:center
StoreKit will handle loading
the products for you,


478
00:26:40,667 --> 00:26:42,903 line:-1
caching them, and keeping them up to date.


479
00:26:43.737 --> 00:26:48.075 line:-2 align:center
To do this, you just use
the new storeProductsTask modifier.


480
00:26:48,141 --> 00:26:51,512 line:-2
Similar to the subscriptionStatusTask
we covered earlier,


481
00:26:51,578 --> 00:26:54,948 line:-2
you pass a collection of product IDs
for the view to depend on.


482
00:26:56.016 --> 00:27:00.687 line:-2 align:center
Then, you get a state value you can use
to handle the states of the async task.


483
00:27:00.754 --> 00:27:02.656 line:-1 align:center
This should all feel pretty familiar


484
00:27:02.723 --> 00:27:06.593 line:-2 align:center
after we just looked at a custom
ProductViewStyle implementation.


485
00:27:07,895 --> 00:27:10,297 line:-2
From here, we can show
our loading view on loading….


486
00:27:12.366 --> 00:27:15.836 line:-2 align:center
Use the new ContentUnavailableView
if the products aren't available…


487
00:27:17.504 --> 00:27:21.742 line:-2 align:center
Or just show our BirdFoodShop directly
with the preloaded Product values.


488
00:27:21.808 --> 00:27:22.743 line:-1 align:center
It's that easy.


489
00:27:23.911 --> 00:27:27.681 line:-2 align:center
Speaking of easy, there are
several useful common actions to include


490
00:27:27,748 --> 00:27:30,150 line:-1
with in-app purchase merchandising UI.


491
00:27:30,217 --> 00:27:32,186 line:-1
The StoreView and SubscriptionStoreView


492
00:27:32.252 --> 00:27:34.688 line:-2 align:center
make it really easy to add
auxiliary buttons


493
00:27:34,755 --> 00:27:36,056 line:-1
for these common actions.


494
00:27:37.558 --> 00:27:39.259 line:-1 align:center
When I talk about auxiliary buttons,


495
00:27:39.326 --> 00:27:41.195 line:-1 align:center
I mean buttons that perform actions


496
00:27:41,261 --> 00:27:43,964 line:-2
which support the main purpose
of the view.


497
00:27:44.031 --> 00:27:48.402 line:-4 align:center
For example, this Cancellation button
and Redeem Code button


498
00:27:48,468 --> 00:27:51,505 line:-4
are both auxiliary
to subscribing to the pass.


499
00:27:53.473 --> 00:27:56.009 line:-2 align:center
We already looked at adding
the Redeem Code button


500
00:27:56,076 --> 00:27:57,945 line:-1
using the storeButton modifier


501
00:27:58.011 --> 00:27:59.947 line:-1 align:center
when we first built this sheet.


502
00:28:00.013 --> 00:28:02.249 line:-2 align:center
Let's take a closer look
at this view modifier.


503
00:28:03.450 --> 00:28:07.588 line:-2 align:center
There are a few values you can pass
for each of the two parameters here.


504
00:28:07.654 --> 00:28:11.091 line:-2 align:center
The first parameter enables you
to choose the visibility.


505
00:28:11.158 --> 00:28:13.594 line:-1 align:center
Automatic is the default for all buttons,


506
00:28:13,660 --> 00:28:16,797 line:-2
which causes StoreKit to choose
whether to make the button visible


507
00:28:16.864 --> 00:28:18.065 line:-1 align:center
depending on the context.


508
00:28:18.966 --> 00:28:22.569 line:-2 align:center
You can also choose to make a button
explicitly visible or hidden.


509
00:28:23.804 --> 00:28:26.773 line:-2 align:center
The next parameter allows you to choose
the button kind


510
00:28:26.840 --> 00:28:28.575 line:-1 align:center
you want to configure the visibility for.


511
00:28:29,576 --> 00:28:32,513 line:-2
The cancellation button shows
a platform-appropriate button


512
00:28:32.579 --> 00:28:34.014 line:-1 align:center
to dismiss the view.


513
00:28:34.081 --> 00:28:37.384 line:-2 align:center
This button works for both the StoreView
and the SubscriptionStoreView.


514
00:28:38.452 --> 00:28:41.221 line:-2 align:center
The automatic behavior
for the cancellation button


515
00:28:41.288 --> 00:28:43.223 line:-1 align:center
is to show whenever the view is presented.


516
00:28:44,324 --> 00:28:48,028 line:-2
On the right, the Subscription Store View
is presented as a sheet


517
00:28:48.095 --> 00:28:52.266 line:-2 align:center
so it shows the cancellation button
in the top right automatically.


518
00:28:52.332 --> 00:28:55.669 line:-2 align:center
On the left, the view
isn't presented as a sheet,


519
00:28:55.736 --> 00:28:57.271 line:-1 align:center
so there's no cancellation button.


520
00:28:58.238 --> 00:29:01.141 line:-2 align:center
Of course, you could choose to override
this behavior


521
00:29:01.208 --> 00:29:03.810 line:-2 align:center
and hide the cancellation button
when presented.


522
00:29:04.778 --> 00:29:07.014 line:-1 align:center
Keep in mind, you only want to do this


523
00:29:07.080 --> 00:29:09.183 line:-2 align:center
when you're replacing
the cancellation button


524
00:29:09,249 --> 00:29:11,251 line:-1
with your own cancellation button.


525
00:29:11.318 --> 00:29:14.588 line:-2 align:center
It's good practice to always accompany
your merchandising UI


526
00:29:14,655 --> 00:29:17,457 line:-2
with a clear button
to dismiss the presentation.


527
00:29:19.193 --> 00:29:21.128 line:-1 align:center
Just like the cancellation button,


528
00:29:21.195 --> 00:29:23.430 line:-2 align:center
both the Store View
and Subscription Store View


529
00:29:23.497 --> 00:29:25.732 line:-1 align:center
can show a Restore Purchases button.


530
00:29:26,767 --> 00:29:30,270 line:-4
By default, the Restore Purchases button
is always hidden,


531
00:29:30,337 --> 00:29:33,006 line:-4
but you can choose to show it
in your merchandising UI


532
00:29:33.073 --> 00:29:34.808 line:-3 align:center
with the storeButton modifier.


533
00:29:35.976 --> 00:29:39.313 line:-2 align:center
The next three button kinds are only
for the SubscriptionStoreView.


534
00:29:40.447 --> 00:29:42.583 line:-2 align:center
We've already talked
about the redeemCode button.


535
00:29:43.517 --> 00:29:45.853 line:-1 align:center
The next button kind is a signIn button.


536
00:29:45,919 --> 00:29:50,123 line:-2
If your subscription service allows people
to subscribe outside of the App Store,


537
00:29:50.190 --> 00:29:52.359 line:-1 align:center
it's a good idea to show a sign in button


538
00:29:52.426 --> 00:29:55.796 line:-2 align:center
in case an existing subscriber
needs to access their subscription.


539
00:29:56.663 --> 00:29:59.466 line:-2 align:center
An important thing to know
for the sign in button is,


540
00:29:59.533 --> 00:30:01.201 line:-1 align:center
you must declare a sign in action


541
00:30:01.268 --> 00:30:05.072 line:-4 align:center
using the new
subscriptionStoreSignInAction modifier.


542
00:30:05.138 --> 00:30:06.940 line:-3 align:center
If you set a sign in action,


543
00:30:07.007 --> 00:30:09.610 line:-4 align:center
the sign in button will be visible
automatically.


544
00:30:11,078 --> 00:30:13,747 line:-4
The sign in button simply calls
the function you declare


545
00:30:13,814 --> 00:30:16,149 line:-3
with subscriptionStoreSignInAction,


546
00:30:16,216 --> 00:30:18,852 line:-4
so you can use this as a signal
to run your sign in flow.


547
00:30:20,420 --> 00:30:23,257 line:-2
The final button kind to review
is policies.


548
00:30:23.323 --> 00:30:27.227 line:-2 align:center
You might want to show links
to the terms of service and privacy policy


549
00:30:27,294 --> 00:30:29,329 line:-1
along with your subscription offer,


550
00:30:29,396 --> 00:30:32,099 line:-2
and the SubscriptionStoreView
makes this really easy.


551
00:30:33,433 --> 00:30:36,370 line:-2
Typically the policy buttons are hidden
by default.


552
00:30:36.436 --> 00:30:39.506 line:-2 align:center
If you make them visible
with the storeButton modifier,


553
00:30:39.573 --> 00:30:41.608 line:-2 align:center
they'll display
above the subscribe controls


554
00:30:41.675 --> 00:30:43.844 line:-1 align:center
on iOS and Mac.


555
00:30:43.911 --> 00:30:46.880 line:-2 align:center
Since these buttons display
above your container background,


556
00:30:46,947 --> 00:30:50,784 line:-2
the default style may not be legible
against your background.


557
00:30:50.851 --> 00:30:55.422 line:-2 align:center
Use subscriptionStorePolicyForegroundStyle
to set a shape style


558
00:30:55,489 --> 00:30:57,191 line:-1
to use for the policy buttons


559
00:30:57,257 --> 00:30:59,126 line:-1
that is legible against your background.


560
00:31:00.594 --> 00:31:04.231 line:-2 align:center
Configuring auxiliary buttons
with the storeButton modifier


561
00:31:04,298 --> 00:31:07,601 line:-2
helps add powerful functionality
to your merchandising UI


562
00:31:07.668 --> 00:31:10.070 line:-2 align:center
with just a few
straightforward declarations.


563
00:31:11,004 --> 00:31:15,042 line:-2
Earlier in the session, we configured
the style of the Subscription Store View


564
00:31:15,108 --> 00:31:17,511 line:-2
to match the look and feel
of Backyard Birds.


565
00:31:18.178 --> 00:31:20.948 line:-2 align:center
Now, I want to look
at these style APIs closer.


566
00:31:21.982 --> 00:31:25.118 line:-2 align:center
First, let's look at choosing
a control style.


567
00:31:25.185 --> 00:31:28.856 line:-2 align:center
Automatically, the SubscriptionStoreView
chooses a control style


568
00:31:28,922 --> 00:31:31,325 line:-2
based on the kind of subscription
you're merchandising.


569
00:31:33,327 --> 00:31:36,897 line:-2
You can use the new
subscriptionStoreControlStyle modifier


570
00:31:36,964 --> 00:31:40,434 line:-2
to choose the style of controls to use
for your subscription plans.


571
00:31:40,501 --> 00:31:43,470 line:-6
For example, you can choose
a button per plan


572
00:31:43.537 --> 00:31:45.038 line:-5 align:center
instead of the automatic picker.


573
00:31:46.773 --> 00:31:49.042 line:-2 align:center
Let's talk about the different styles
of controls.


574
00:31:50.711 --> 00:31:52.446 line:-1 align:center
If you don't specify the style,


575
00:31:52,513 --> 00:31:55,349 line:-2
the Subscription Store View picks
a control automatically.


576
00:31:56,149 --> 00:31:58,318 line:-1
On iPhone, this is the picker control


577
00:31:58.385 --> 00:32:00.521 line:-2 align:center
for subscriptions
with multiple plan options.


578
00:32:01,555 --> 00:32:04,224 line:-2
You can also explicitly choose
the picker control.


579
00:32:05.459 --> 00:32:08.662 line:-2 align:center
On iOS and Mac, there's
a prominent picker control,


580
00:32:08.729 --> 00:32:12.065 line:-2 align:center
which displays the subscription
plan options more prominently


581
00:32:12,132 --> 00:32:14,134 line:-1
with a shadow and selection ring.


582
00:32:15.736 --> 00:32:19.473 line:-2 align:center
Last, you can choose to show a button
for each subscription plan


583
00:32:19.540 --> 00:32:21.074 line:-1 align:center
instead of the picker control.


584
00:32:22.242 --> 00:32:24.211 line:-1 align:center
On the topic of subscribe buttons,


585
00:32:24.278 --> 00:32:27.314 line:-2 align:center
there's a new API you can use
to customize the button labels.


586
00:32:28.815 --> 00:32:32.186 line:-5 align:center
By default, the SubscriptionStoreView
shows a subscribe button


587
00:32:32.252 --> 00:32:34.188 line:-4 align:center
that contains an action phrase


588
00:32:34,254 --> 00:32:37,357 line:-5
and the pricing information
as a caption above the button.


589
00:32:38.659 --> 00:32:41.662 line:-4 align:center
You can add
the subscriptionStoreButtonLabel modifier


590
00:32:41.728 --> 00:32:43.997 line:-3 align:center
to change the button label to multiline,


591
00:32:44,064 --> 00:32:47,901 line:-4
which causes the pricing text
to be contained within the button label,


592
00:32:47,968 --> 00:32:49,469 line:-3
instead of as a separate caption.


593
00:32:50,838 --> 00:32:53,440 line:-5
In addition to customizing the layout
of the button label,


594
00:32:53.507 --> 00:32:55.342 line:-4 align:center
you can also customize the content.


595
00:32:56,343 --> 00:32:59,112 line:-5
For example, you could choose
to show the display name


596
00:32:59.179 --> 00:33:01.982 line:-5 align:center
of the selected subscription
instead of an action phrase.


597
00:33:03.417 --> 00:33:06.153 line:-4 align:center
You can even compose
a button label value


598
00:33:06.220 --> 00:33:08.488 line:-3 align:center
with both the layout and the content


599
00:33:08.555 --> 00:33:10.891 line:-4 align:center
by chaining the components together,
like this.


600
00:33:12.392 --> 00:33:15.562 line:-4 align:center
Since the button controls are composed
of the same subscribe buttons


601
00:33:15,629 --> 00:33:17,064 line:-3
as the picker controls,


602
00:33:17,130 --> 00:33:20,200 line:-4
you can use the same modifier
to customize these buttons too.


603
00:33:21,702 --> 00:33:24,972 line:-4
For example, you can choose to only show
the price in the label.


604
00:33:25,038 --> 00:33:27,941 line:-4
This is useful when your plans
are all the same service,


605
00:33:28.008 --> 00:33:29.376 line:-3 align:center
but with different price points.


606
00:33:30,978 --> 00:33:33,347 line:-2
Different subscription plans use
the display name


607
00:33:33,413 --> 00:33:35,716 line:-2
and the description
you set up in App Store Connect


608
00:33:35.782 --> 00:33:38.018 line:-1 align:center
to build the controls.


609
00:33:38.085 --> 00:33:40.120 line:-1 align:center
To make these controls more interesting,


610
00:33:40,187 --> 00:33:43,423 line:-2
you can choose to add a decorative view
for each different plan.


611
00:33:44.658 --> 00:33:46.226 line:-1 align:center
To add the decorative view,


612
00:33:46.293 --> 00:33:50.631 line:-2 align:center
just add the subscriptionStoreControlIcon
modifier to the Subscription Store.


613
00:33:51.899 --> 00:33:53.534 line:-1 align:center
The modifier takes a view builder.


614
00:33:54.568 --> 00:33:57.237 line:-2 align:center
It provides the view builder
with both a Product value


615
00:33:57,304 --> 00:34:00,607 line:-1
and a SubscriptionInfo value.


616
00:34:00,674 --> 00:34:04,545 line:-2
Using these parameters, you can provide
a different view for each plan.


617
00:34:06.647 --> 00:34:09.550 line:-2 align:center
These icons also work when you use
the button control style


618
00:34:09.616 --> 00:34:10.884 line:-1 align:center
for your subscription plans.


619
00:34:11,518 --> 00:34:13,153 line:-1
Now, let's look a little closer


620
00:34:13,220 --> 00:34:16,256 line:-2
at adding background content
to the Subscription Store View.


621
00:34:16.924 --> 00:34:18.592 line:-1 align:center
To recap from earlier,


622
00:34:18,659 --> 00:34:22,029 line:-2
you can add a container background
to the Subscription Store


623
00:34:22.095 --> 00:34:25.699 line:-2 align:center
by modifying your marketing content
with the containerBackground modifier.


624
00:34:26.767 --> 00:34:31.004 line:-2 align:center
In this case, we're providing a gradient
of our accent color for the background


625
00:34:31,071 --> 00:34:33,340 line:-2
and choosing to place it
in the Subscription Store.


626
00:34:34.741 --> 00:34:37.411 line:-4 align:center
You can learn more
about the new containerBackground API


627
00:34:37.477 --> 00:34:39.813 line:-3 align:center
in the session "What's new in SwiftUI."


628
00:34:41.481 --> 00:34:43.817 line:-2 align:center
There are a few different
background placements you can use


629
00:34:43.884 --> 00:34:44.952 line:-1 align:center
for the Subscription Store.


630
00:34:45.986 --> 00:34:48.055 line:-2 align:center
If you use
the Subscription Store placement,


631
00:34:48.121 --> 00:34:50.791 line:-2 align:center
it will choose an automatic placement
based on the context.


632
00:34:51.959 --> 00:34:56.430 line:-2 align:center
On iOS and Mac, you can explicitly specify
you want your background to be placed


633
00:34:56,496 --> 00:34:58,131 line:-1
in the Header of the Subscription Store.


634
00:34:58,699 --> 00:35:01,001 line:-2
This placement
is behind your marketing content.


635
00:35:02,069 --> 00:35:03,904 line:-1
There's also a Full Height placement,


636
00:35:03,971 --> 00:35:05,239 line:-1
which places the background


637
00:35:05.305 --> 00:35:07.674 line:-2 align:center
behind the full height
of the Subscription Store View.


638
00:35:09.009 --> 00:35:10.544 line:-1 align:center
Earlier in the session,


639
00:35:10,611 --> 00:35:14,481 line:-2
we discussed how to use an API
like the subscription status task


640
00:35:14,548 --> 00:35:18,185 line:-2
to avoid presenting
our Get Backyard Birds Pass sheet.


641
00:35:18.252 --> 00:35:22.589 line:-2 align:center
However, there is a case when we may want
to show a Subscription Store View


642
00:35:22,656 --> 00:35:24,458 line:-1
to existing subscribers,


643
00:35:24.525 --> 00:35:26.960 line:-2 align:center
and that's when
we want to encourage subscribers


644
00:35:27,027 --> 00:35:28,695 line:-1
to upgrade to the premium plan.


645
00:35:29,963 --> 00:35:33,066 line:-2
When we detect a subscriber is currently
subscribed to a plan


646
00:35:33,133 --> 00:35:35,536 line:-2
with a lower level of service
than premium,


647
00:35:35,602 --> 00:35:36,970 line:-3
we can present an upgrade sheet


648
00:35:37.037 --> 00:35:41.275 line:-4 align:center
by passing upgrade
as the visibleRelationships parameter.


649
00:35:41.341 --> 00:35:44.778 line:-4 align:center
This could be any combination
of subscription relationships we want,


650
00:35:44,845 --> 00:35:47,848 line:-4
and it only has effects
when someone is currently subscribed.


651
00:35:48.982 --> 00:35:51.752 line:-1 align:center
Then, to make the offer more effective,


652
00:35:51.818 --> 00:35:54.688 line:-2 align:center
we can provide a different view
for the marketing content


653
00:35:54,755 --> 00:35:57,958 line:-2
to explain the benefits
of the premium plan.


654
00:35:58.025 --> 00:36:00.327 line:-1 align:center
You can use the subscriptionStatusTask


655
00:36:00,394 --> 00:36:02,829 line:-2
to keep track of a subscriber's level
of service,


656
00:36:02.896 --> 00:36:06.800 line:-2 align:center
and then use this information to know
which offering to present to a customer.


657
00:36:07,968 --> 00:36:09,837 line:-1
That's everything I have to cover today.


658
00:36:10,637 --> 00:36:13,140 line:-5
When you start adding in-app purchase
to your apps,


659
00:36:13.207 --> 00:36:15.442 line:-5 align:center
declare a StoreView to get
up and running quickly.


660
00:36:16,510 --> 00:36:20,447 line:0
If you desire a more customized layout,
give ProductView a try.


661
00:36:20,514 --> 00:36:24,251 align:center
For your subscriptions, you can declare
a SubscriptionStoreView


662
00:36:24,318 --> 00:36:26,453 line:0
to build compelling offers.


663
00:36:26,520 --> 00:36:29,022 align:center
And when you're ready to take things
to the next level,


664
00:36:29,089 --> 00:36:31,725 line:0
try out the new view modifiers
and other APIs


665
00:36:31,792 --> 00:36:33,694 line:0
to really make this your own.


666
00:36:34,761 --> 00:36:36,897 align:center
If you can't get enough StoreKit
and SwiftUI,


667
00:36:36,964 --> 00:36:38,265 line:0
check out the sessions;


668
00:36:38,332 --> 00:36:41,802 align:center
"What's new in StoreKit 2
and StoreKit Testing in Xcode"


669
00:36:41,869 --> 00:36:44,438 align:center
and "What's new in SwiftUI" next.


670
00:36:46.039 --> 00:36:50.377 line:-2 align:center
Thanks for joining me today to learn
about the new StoreKit APIs for SwiftUI.


671
00:36:50.444 --> 00:36:51.979 line:-1 align:center
Happy coding!


672
00:36:52.045 --> 00:36:54.181 line:-1 align:center
[light music]

