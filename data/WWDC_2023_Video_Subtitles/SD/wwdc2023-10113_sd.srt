2
00:00:00,033 --> 00:00:04,004 line:-1
♪ Mellow instrumental hip-hop ♪


3
00:00:04.004 --> 00:00:10.177 line:-1 size:2% align:right position:90%
♪


4
00:00:10,177 --> 00:00:13,914 line:-1
Hi, my name is Mark,
and I'm a SwiftUI engineer.


5
00:00:13.914 --> 00:00:17.117 line:-1 position:50%
I'm pleased to invite you
on a journey out of the plane


6
00:00:17,117 --> 00:00:20,487 line:-1
and into space using SwiftUI.


7
00:00:20,487 --> 00:00:23,390 position:50%
To demonstrate how SwiftUI
works in a new dimension,


8
00:00:23,390 --> 00:00:26,860 line:0
and to show how SwiftUI
and RealityKit work together


9
00:00:26,860 --> 00:00:29,897 line:0
in the system to enable
incredible experiences,


10
00:00:29,897 --> 00:00:32,366 position:50%
we'll talk about
a handful of the APIs


11
00:00:32,366 --> 00:00:35,669 line:0
powering a sample app
we've built called World.


12
00:00:35,669 --> 00:00:37,938 line:-1
World demonstrates several
different forms


13
00:00:37,938 --> 00:00:40,207 line:-1
applications can take
on the system,


14
00:00:40.207 --> 00:00:44.578 line:-1 position:50%
from the familiar window
to the new volume,


15
00:00:44.578 --> 00:00:48.949 line:-1 position:50%
allowing for bounded
3D experiences to full space,


16
00:00:48,949 --> 00:00:53,086 line:-1
which allows for the display
of unbounded virtual content.


17
00:00:53,086 --> 00:00:55,622 position:50%
While most of the APIs
we'll discuss in this talk


18
00:00:55,622 --> 00:00:57,991 position:50%
work whether you're adding
just a dash of 3D


19
00:00:57,991 --> 00:01:01,395 line:0
in your primarily 2D window app,
or creating


20
00:01:01,395 --> 00:01:05,599 line:0
an immersive 3D experience
leveraging full space,


21
00:01:05,599 --> 00:01:08,268 line:0
we'll focus on using Volumes
as a container


22
00:01:08,268 --> 00:01:12,205 position:50%
since they provide a great way
to explore the realm of 3D


23
00:01:12,205 --> 00:01:15,242 line:0
using SwiftUI in your app.


24
00:01:15,242 --> 00:01:18,345 position:50%
To learn more about the other
containers for SwiftUI content,


25
00:01:18,345 --> 00:01:19,947 line:0
please refer to the


26
00:01:19,947 --> 00:01:23,150 line:0
"Elevate your windowed app
for spatial computing" talk


27
00:01:23,150 --> 00:01:26,887 position:50%
and the "Go beyond the window
with SwiftUI" talk.


28
00:01:26,887 --> 00:01:29,756 line:-1
Once we cover
the basics of volumes,


29
00:01:29,756 --> 00:01:33,427 line:-1
we'll discuss how you can
create and position 3D content


30
00:01:33,427 --> 00:01:36,163 line:-1
with volumetric views
and layout,


31
00:01:36.163 --> 00:01:40.534 line:-1 position:50%
how to integrate SwiftUI views
into the new RealityView,


32
00:01:40,534 --> 00:01:42,836 line:-1
and finally how to bring
everything together


33
00:01:42,836 --> 00:01:45,906 line:-1
with 3D gestures.


34
00:01:45,906 --> 00:01:48,375 line:-1
But before we get
too ahead of ourselves,


35
00:01:48.375 --> 00:01:51.645 line:-1 position:50%
let's talk about what volumes
are and how they can help us


36
00:01:51,645 --> 00:01:56,283 line:-1
take our first step
into the realm of 3D.


37
00:01:56,283 --> 00:02:00,220 line:-1
World uses volumes
to emphasize its 3D content.


38
00:02:00,220 --> 00:02:03,056 line:-1
This scene has
no main glass window.


39
00:02:03.056 --> 00:02:07.260 line:-1 position:50%
Instead it places its 3D content
directly into the scene


40
00:02:07,260 --> 00:02:09,763 line:-1
with a panel
of controls in front.


41
00:02:09.763 --> 00:02:14.267 line:-1 position:50%
But the 3D content
is the star of the show here.


42
00:02:14.267 --> 00:02:17.437 line:-1 position:50%
Volumes provide you
with a fixed scale container.


43
00:02:17.437 --> 00:02:20.674 line:-1 position:50%
Unlike windows that dynamically
scale based on the distance


44
00:02:20.674 --> 00:02:23.944 line:-1 position:50%
they're placed from you,
volumes maintain the same size


45
00:02:23,944 --> 00:02:26,713 line:-1
at any distance.


46
00:02:26,713 --> 00:02:29,583 line:0
Volumes are horizontally aligned
and support viewing


47
00:02:29,583 --> 00:02:33,286 position:50%
from any angle.


48
00:02:33,286 --> 00:02:36,923 line:0
Volumes are a great way to
display 3D content in your app


49
00:02:36,923 --> 00:02:39,493 line:0
without taking over
the entire space,


50
00:02:39,493 --> 00:02:43,296 position:50%
and creating one
is incredibly simple.


51
00:02:43,296 --> 00:02:46,433 line:-1
All you have to do is use
the new volumetric window style


52
00:02:46.433 --> 00:02:49.336 line:-1 position:50%
when creating a new scene,
such as a window group,


53
00:02:49,336 --> 00:02:52,739 line:-1
and you'll get all
these features automatically.


54
00:02:52,739 --> 00:02:54,808 line:-1
Now that we have
our volume set up,


55
00:02:54.808 --> 00:02:57.577 line:-1 position:50%
let's get some content
inside it.


56
00:02:57,577 --> 00:03:01,114 line:-1
To help us do that,
RealityKit offers a new API


57
00:03:01,114 --> 00:03:04,651 line:-1
called Model3D, a SwiftUI view
that makes it simple


58
00:03:04,651 --> 00:03:08,488 line:-1
to load rich 3D assets,
such as USDZs,


59
00:03:08,488 --> 00:03:10,991 line:-1
while providing phases
to handle different parts


60
00:03:10,991 --> 00:03:14,628 line:-1
of the asset loading lifecycle.


61
00:03:14,628 --> 00:03:18,165 line:0
Think of Model3D as
a counterpart to AsyncImage.


62
00:03:18,165 --> 00:03:21,334 line:0
It handles all the work
of loading complex geometry


63
00:03:21,334 --> 00:03:24,471 line:0
while keeping your app
running smoothly.


64
00:03:24,471 --> 00:03:26,873 line:-1
Let's use Model3D to show
one of the other models


65
00:03:26.873 --> 00:03:30.744 line:-1 position:50%
from the World app, the moon.


66
00:03:30.744 --> 00:03:34.314 line:-1 position:50%
Now, I've already added
a moon USDZ file to my project,


67
00:03:34,314 --> 00:03:38,218 line:-1
and I can just pass that name
to the Model3D initializer.


68
00:03:38,218 --> 00:03:42,389 line:-1
Now we can handle
the phase of the model.


69
00:03:42.389 --> 00:03:44.858 line:-1 position:50%
Now, this isn't a phase
of the moon.


70
00:03:44.858 --> 00:03:47.994 line:-1 position:50%
It actually indicates
the loading status of the asset,


71
00:03:47,994 --> 00:03:52,332 line:-1
and it has a couple different
states we can switch over.


72
00:03:52,332 --> 00:03:55,368 line:-1
Before the model has loaded,
I can show some text


73
00:03:55.368 --> 00:03:58.105 line:-1 position:50%
or another piece of UI
indicating to the user


74
00:03:58.105 --> 00:04:00.440 line:-1 position:50%
the content isn't ready yet.


75
00:04:00.440 --> 00:04:05.078 line:-1 position:50%
I'll use a progress view here.


76
00:04:05,078 --> 00:04:09,149 line:-1
If the model failed to load,
I can show an error message


77
00:04:09,149 --> 00:04:14,821 line:-1
using the localized description
from the error.


78
00:04:14.821 --> 00:04:19.292 line:-1 position:50%
And if the model succeeds,
I can use it in my UI.


79
00:04:22,963 --> 00:04:26,766 line:-1
Similar to images, I need to use
the resizable modifier


80
00:04:26,766 --> 00:04:29,903 line:-1
to tell the layout system
that the model can be resized


81
00:04:29,903 --> 00:04:32,272 line:-1
according to
its available space.


82
00:04:32,272 --> 00:04:35,008 line:-1
And I want the model to fit
within its available space,


83
00:04:35,008 --> 00:04:41,681 line:-1
so I'll use
the scaledToFit modifier.


84
00:04:41.681 --> 00:04:45.485 line:-1 position:50%
Now I have a moon that loads
asynchronously in my app.


85
00:04:45.485 --> 00:04:46.853 line:-1 position:50%
Let's keep building
on this example


86
00:04:46,853 --> 00:04:49,823 line:-1
to explore more
3D functionality in SwiftUI.


87
00:04:49.823 --> 00:04:51.892 line:-1 position:50%
Let's inspect some
of the other models


88
00:04:51,892 --> 00:04:54,094 line:-1
that make an appearance
in the World app.


89
00:04:54.094 --> 00:04:57.864 line:-1 position:50%
I want to show all of them
at once in a sort of display.


90
00:04:57.864 --> 00:05:00.367 line:-1 position:50%
We can repurpose
the MoonView we just wrote


91
00:05:00,367 --> 00:05:03,737 line:-1
to handle displaying
any USDZ file.


92
00:05:03.737 --> 00:05:07.741 line:-1 position:50%
Let's just rename it.


93
00:05:07,741 --> 00:05:11,611 line:-1
And pass in the name
of a USDZ file to load.


94
00:05:11,611 --> 00:05:14,681 line:-1
Now I can replace the hardcoded
Moon string.


95
00:05:14.681 --> 00:05:19.819 line:-1 position:50%
Now let's make a data structure
to represent a celestial object.


96
00:05:19,819 --> 00:05:23,490 line:-1
I'll give each one
a name and a size.


97
00:05:23,490 --> 00:05:26,259 line:-1
I'll list out a few different
objects that I have


98
00:05:26.259 --> 00:05:30.030 line:-1 position:50%
in my project:
the Earth, Moon, and sun.


99
00:05:30,030 --> 00:05:35,735 line:-1
Now I can display each object
in an HStack with a ForEach.


100
00:05:35,735 --> 00:05:39,439 line:-1
For each object, I can use
the new CelestialObjectView


101
00:05:39,439 --> 00:05:43,310 line:-1
we just created
using the object's name.


102
00:05:43.310 --> 00:05:45.312 line:-1 position:50%
Let's vary the sizing
of each model


103
00:05:45,312 --> 00:05:49,082 line:-1
using a frame modifier
using the object size.


104
00:05:53.687 --> 00:05:55.589 line:-1 position:50%
Our models look great
from the front,


105
00:05:55,589 --> 00:05:58,225 line:-1
but remember we're in 3D.


106
00:05:58,225 --> 00:06:00,760 line:-1
A change of perspective
reveals that our objects


107
00:06:00.760 --> 00:06:03.797 line:-1 position:50%
are back face aligned,
as if their bounding boxes


108
00:06:03.797 --> 00:06:07.033 line:-1 position:50%
were flush against a plane
behind all three of them.


109
00:06:07.033 --> 00:06:11.004 line:-1 position:50%
This is the default alignment
for 3D content in SwiftUI.


110
00:06:11,004 --> 00:06:13,506 line:-1
If we want to change that,
we can specify


111
00:06:13,506 --> 00:06:18,778 line:-1
the depth alignment to use in
a frame depth modifier like so.


112
00:06:18.778 --> 00:06:21.581 line:-1 position:50%
I can pass the object's size
to use for the depth


113
00:06:21.581 --> 00:06:25.018 line:-1 position:50%
and specify that I want
the models front faces aligned


114
00:06:25,018 --> 00:06:27,854 line:-1
instead of the back.


115
00:06:27,854 --> 00:06:34,227 line:-1
Now the views all have their
front faces aligned instead.


116
00:06:34.227 --> 00:06:36.696 line:-1 position:50%
Now I want to give
each object a label.


117
00:06:36.696 --> 00:06:41.067 line:-1 position:50%
I can do that by giving
each Model3D an overlay.


118
00:06:41.067 --> 00:06:47.540 line:-1 position:50%
Inside I'll make a text label
with a glass background effect


119
00:06:47.540 --> 00:06:50.677 line:-1 position:50%
to make sure
it's always readable.


120
00:06:50.677 --> 00:06:53.546 line:-1 position:50%
I'll also make these labels
are aligned to the bottom


121
00:06:53.546 --> 00:07:00.453 line:-1 position:50%
of the model,
so I don't block the content.


122
00:07:00.453 --> 00:07:04.391 line:-1 position:50%
The display looks great so far,
but it feels a bit static.


123
00:07:04.391 --> 00:07:07.093 line:-1 position:50%
Finally, let's explore some
of SwiftUI's new additions


124
00:07:07,093 --> 00:07:09,462 line:-1
to geometry effects.


125
00:07:09.462 --> 00:07:14.000 line:-1 position:50%
I can use a TimelineView
to animate a change in time.


126
00:07:17,370 --> 00:07:19,205 line:-1
Now I'll give our views
some spin


127
00:07:19.205 --> 00:07:22.175 line:-1 position:50%
using the new Rotation3DEffect.


128
00:07:22.175 --> 00:07:24.210 line:-1 position:50%
I'll make one
and give it an angle


129
00:07:24,210 --> 00:07:27,881 line:-1
based on the current date
with a scale factor.


130
00:07:31,651 --> 00:07:36,756 line:-1
And I'll have the objects
spin around the y-axis.


131
00:07:36,756 --> 00:07:40,126 line:-1
And just like that,
we've got our objects spinning.


132
00:07:40.126 --> 00:07:43.496 line:-1 position:50%
Model3D is great for loading
and displaying simple assets


133
00:07:43.496 --> 00:07:45.198 line:-1 position:50%
in your view hierarchy.


134
00:07:45.198 --> 00:07:49.202 line:-1 position:50%
But for more involved 3D models,
scenes, or experiences,


135
00:07:49,202 --> 00:07:51,638 line:-1
RealityView is SwiftUI's
entry point


136
00:07:51,638 --> 00:07:56,176 line:-1
to unleash the power
of RealityKit in your app.


137
00:07:56,176 --> 00:07:59,012 line:0
And indeed, the World app
uses RealityView


138
00:07:59,012 --> 00:08:01,815 line:0
to break down its more
complex visualizations


139
00:08:01,815 --> 00:08:05,552 position:50%
using the RealityKit
Entity-Component system.


140
00:08:05,552 --> 00:08:08,254 line:0
This allows for rendering
the individual models,


141
00:08:08,254 --> 00:08:10,790 position:50%
as well as advanced
rendering effects


142
00:08:10,790 --> 00:08:14,461 line:0
like lighting and orbit paths.


143
00:08:14.461 --> 00:08:17.931 line:-1 position:50%
Thanks to the new RealityView,
SwiftUI and RealityKit


144
00:08:17.931 --> 00:08:20.166 line:-1 position:50%
go hand in hand on the platform.


145
00:08:20,166 --> 00:08:22,369 position:50%
For more information
about RealityView


146
00:08:22,369 --> 00:08:24,604 position:50%
and more new
RealityKit features,


147
00:08:24,604 --> 00:08:28,074 position:50%
please see "Build spatial
experiences with RealityKit"


148
00:08:28,074 --> 00:08:31,678 line:0
and "Enhance your spatial
computing app with RealityKit."


149
00:08:31.678 --> 00:08:33.913 line:-1 position:50%
For now, let's talk about
how you can make the most


150
00:08:33.913 --> 00:08:36.549 line:-1 position:50%
of SwiftUI within
your RealityView


151
00:08:36.549 --> 00:08:39.352 line:-1 position:50%
using the new
attachments API.


152
00:08:39,352 --> 00:08:42,756 line:-1
Attachments allow you
to pair a tagged SwiftUI view


153
00:08:42.756 --> 00:08:46.559 line:-1 position:50%
with an entity that you can use
inside your RealityView.


154
00:08:46.559 --> 00:08:49.262 line:-1 position:50%
Attachments are great
for adding annotations


155
00:08:49.262 --> 00:08:53.400 line:-1 position:50%
or editing affordances
relative to specific entities.


156
00:08:56,469 --> 00:08:59,305 line:-1
If you've used
the Canvas API in SwiftUI,


157
00:08:59.305 --> 00:09:02.042 line:-1 position:50%
attachments will
probably feel familiar.


158
00:09:02.042 --> 00:09:03.810 line:-1 position:50%
The key difference
with attachments


159
00:09:03,810 --> 00:09:07,747 line:-1
is that they are live views,
not just snapshots.


160
00:09:07.747 --> 00:09:10.450 line:-1 position:50%
This means they can respond
to state changes,


161
00:09:10.450 --> 00:09:13.620 line:-1 position:50%
run animations,
and handle gestures.


162
00:09:13.620 --> 00:09:15.989 line:-1 position:50%
Let's explore attachments
inside the World app


163
00:09:15,989 --> 00:09:17,991 line:-1
by adding on some
extra functionality


164
00:09:17,991 --> 00:09:19,759 line:-1
that will let me place
some markers


165
00:09:19.759 --> 00:09:22.896 line:-1 position:50%
tracking my favorite places
around the world.


166
00:09:22,896 --> 00:09:25,131 line:-1
In the Earth view,
I've created some state


167
00:09:25,131 --> 00:09:28,268 line:-1
tracking an array of some
of my favorite places,


168
00:09:28,268 --> 00:09:31,871 line:-1
each with a name and location.


169
00:09:31.871 --> 00:09:36.976 line:-1 position:50%
For each place, I can create
some text with its name.


170
00:09:36,976 --> 00:09:39,345 line:-1
And I can give it
a glass background effect


171
00:09:39.345 --> 00:09:41.648 line:-1 position:50%
so that it's always legible.


172
00:09:41,648 --> 00:09:44,083 line:-1
And now I'll give it a tag
so that I can reference it later


173
00:09:44,083 --> 00:09:47,353 line:-1
in my RealityView.


174
00:09:47,353 --> 00:09:50,056 line:-1
This tag can be
any hashable value,


175
00:09:50.056 --> 00:09:55.762 line:-1 position:50%
but I'll use a unique identifier
I've added for each place.


176
00:09:55.762 --> 00:09:59.165 line:-1 position:50%
Now I can look up an entity
hosting each attachment view


177
00:09:59,165 --> 00:10:01,267 line:-1
using the tag I specified.


178
00:10:01,267 --> 00:10:13,980 line:-1
[KEYSTROKES]


179
00:10:13.980 --> 00:10:20.320 line:-1 position:50%
I can add this entity
to my RealityView content.


180
00:10:20,320 --> 00:10:23,923 line:-1
And then I can use the lookAt
function to position and orient


181
00:10:23,923 --> 00:10:26,392 line:-1
the label along the surface
of the globe.


182
00:10:26.392 --> 00:10:36.703 line:-1 position:50%
[KEYSTROKES]


183
00:10:36.703 --> 00:10:39.873 line:-1 position:50%
We have a couple interesting
places pinpointed now.


184
00:10:39,873 --> 00:10:43,576 line:-1
But let's not get too attached
to this app quite yet.


185
00:10:43,576 --> 00:10:45,478 line:-1
I have some more ideas
for how we can take it


186
00:10:45.478 --> 00:10:47.647 line:-1 position:50%
to the next level.


187
00:10:47,647 --> 00:10:50,583 line:-1
So, now we know how
to position 3D content


188
00:10:50.583 --> 00:10:53.520 line:-1 position:50%
and make the most of SwiftUI
inside of RealityView


189
00:10:53.520 --> 00:10:55.355 line:-1 position:50%
using attachments.


190
00:10:55,355 --> 00:10:59,058 line:-1
Now let's talk about how to
interact with all this content.


191
00:10:59.058 --> 00:11:02.028 line:-1 position:50%
The platform brings the gestures
you're already familiar with


192
00:11:02.028 --> 00:11:05.698 line:-1 position:50%
into the third dimension
with support for hands and eyes,


193
00:11:05.698 --> 00:11:07.834 line:-1 position:50%
as well as new
trackpad mechanics.


194
00:11:07.834 --> 00:11:11.271 line:-1 position:50%
Let's use these new capabilities
to extend our progress


195
00:11:11,271 --> 00:11:12,872 line:-1
on the World app.


196
00:11:12,872 --> 00:11:14,607 line:0
We have
a pretty good thing going


197
00:11:14,607 --> 00:11:16,809 line:0
with our "Favorite Places"
extension.


198
00:11:16,809 --> 00:11:18,878 line:0
However I don't think
I'm satisfied


199
00:11:18,878 --> 00:11:21,514 position:50%
with the number of places
we have mapped out.


200
00:11:21,514 --> 00:11:23,349 line:0
Let's make a way
to add some more


201
00:11:23,349 --> 00:11:26,152 line:0
using a tap gesture
on the globe.


202
00:11:26,152 --> 00:11:28,655 line:-1
Before we jump into that though,
let's talk about


203
00:11:28.655 --> 00:11:32.759 line:-1 position:50%
how to configure
an entity for input.


204
00:11:32,759 --> 00:11:36,462 line:-1
Let's say we're configuring our
RealityView with our content.


205
00:11:36,462 --> 00:11:41,067 line:-1
Here I've already added
a model of the Earth.


206
00:11:41,067 --> 00:11:44,203 line:-1
An entity hierarchy needs
an InputTargetComponent


207
00:11:44.203 --> 00:11:47.473 line:-1 position:50%
to receive input
inside RealityView.


208
00:11:47.473 --> 00:11:49.776 line:-1 position:50%
If the component
is added to an entity,


209
00:11:49,776 --> 00:11:53,012 line:-1
all that entity's descendants
can also receive input


210
00:11:53,012 --> 00:11:56,616 line:-1
unless otherwise specified.


211
00:11:56.616 --> 00:11:59.118 line:-1 position:50%
In RealityKit,
CollisionComponent is used


212
00:11:59,118 --> 00:12:03,323 line:-1
for defining the shape of
an entity's interactive region.


213
00:12:03.323 --> 00:12:06.292 line:-1 position:50%
Let's use a sphere for the Earth
model so that we can get


214
00:12:06,292 --> 00:12:09,729 line:-1
an accurate interaction point
on its surface.


215
00:12:09.729 --> 00:12:12.365 line:-1 position:50%
This is all we need
to allow for our entity


216
00:12:12,365 --> 00:12:15,969 line:-1
to handle SwiftUI gestures
inside RealityView.


217
00:12:15.969 --> 00:12:18.671 line:-1 position:50%
At this point, I can add
a SpatialTapGesture


218
00:12:18,671 --> 00:12:21,174 line:-1
to my RealityView.


219
00:12:23.209 --> 00:12:25.011 line:-1 position:50%
But to make it even easier


220
00:12:25,011 --> 00:12:28,381 line:-1
to use SwiftUI gestures
with your RealityKit content,


221
00:12:28,381 --> 00:12:32,251 line:-1
we've added a new gesture
modifier called targetedToEntity


222
00:12:32,251 --> 00:12:35,888 line:-1
that I can use to target
my earthEntity specifically.


223
00:12:35,888 --> 00:12:41,194 line:-1
[KEYSTROKES]


224
00:12:41.194 --> 00:12:43.830 line:-1 position:50%
If the tap doesn't occur
on this entity


225
00:12:43.830 --> 00:12:46.933 line:-1 position:50%
or one of its descendants,
the gesture will fail.


226
00:12:46.933 --> 00:12:48.868 line:-1 position:50%
Now let's handle
the gesture value.


227
00:12:48.868 --> 00:12:52.171 line:-1 position:50%
[KEYSTROKES]


228
00:12:52.171 --> 00:12:55.575 line:-1 position:50%
SpatialTapGesture has
a new location3D property,


229
00:12:55,575 --> 00:12:58,077 line:-1
allowing us to get
an accurate tap point


230
00:12:58.077 --> 00:12:59.512 line:-1 position:50%
on the surface of the globe.


231
00:12:59,512 --> 00:13:05,084 line:0
[KEYSTROKES]


232
00:13:05,084 --> 00:13:07,620 position:50%
The 3D location
is in the RealityView's


233
00:13:07,620 --> 00:13:11,924 line:0
local SwiftUI coordinate space
in points, not meters.


234
00:13:11,924 --> 00:13:14,227 line:0
To figure out where we want
to place our new label,


235
00:13:14,227 --> 00:13:16,162 line:0
we'll need to convert
the location


236
00:13:16,162 --> 00:13:19,732 line:0
into the RealityView's scene.


237
00:13:19,732 --> 00:13:22,568 position:50%
The targetedToEntity modifier
makes this super easy


238
00:13:22,568 --> 00:13:25,238 line:0
by adding on some coordinate
space conversion helpers


239
00:13:25,238 --> 00:13:27,407 line:0
to the gesture's value itself.


240
00:13:27.407 --> 00:13:30.576 line:-1 position:50%
We can use that to convert
from SwiftUI local space


241
00:13:30,576 --> 00:13:33,346 line:-1
to the scene's coordinate space.


242
00:13:33.346 --> 00:13:36.382 line:-1 position:50%
Finally, I can add the data
for the new place


243
00:13:36,382 --> 00:13:38,317 line:-1
using the location
we just calculated.


244
00:13:38,317 --> 00:13:49,228 position:50%
[KEYSTROKES]


245
00:13:49,228 --> 00:13:52,432 line:0
I'll also scale up the location
just a tad so that the labels


246
00:13:52,432 --> 00:13:56,102 line:0
float slightly above
the Earth's surface.


247
00:13:59,439 --> 00:14:02,141 line:0
We now have a way to add more
favorite places to the globe


248
00:14:02,141 --> 00:14:04,777 position:50%
with just a tap.


249
00:14:04,777 --> 00:14:09,182 position:50%
But now we have a problem:
we need to discover more places!


250
00:14:09,182 --> 00:14:11,884 line:-1
To do that, let's launch
a satellite that can help us


251
00:14:11,884 --> 00:14:14,921 line:-1
pick out more exciting spots
around the world.


252
00:14:14,921 --> 00:14:17,890 line:-1
One way to add a satellite model
to our globe would be


253
00:14:17,890 --> 00:14:20,827 line:-1
to load a model
using RealityKit,


254
00:14:20,827 --> 00:14:23,996 line:-1
but let's use some of the other
techniques we've learned about.


255
00:14:23,996 --> 00:14:29,068 line:0
I can add a Model3D
as an attachment.


256
00:14:29,068 --> 00:14:32,038 line:0
Specifying a frame makes
resizing the satellite model


257
00:14:32,038 --> 00:14:37,777 position:50%
to a reasonable size super easy.


258
00:14:37,777 --> 00:14:40,246 line:0
I'll also give my model a tag
so I can reference it


259
00:14:40,246 --> 00:14:45,151 position:50%
in my RealityView.


260
00:14:45.151 --> 00:14:47.887 line:-1 position:50%
Just like with the labels,
I need to add my model


261
00:14:47,887 --> 00:14:53,292 line:-1
to my RealityView.


262
00:14:53.292 --> 00:14:56.796 line:-1 position:50%
Now, let's define a gesture
that returns a 3D transform


263
00:14:56.796 --> 00:14:59.298 line:-1 position:50%
that will let us define scale,
rotation,


264
00:14:59,298 --> 00:15:01,567 line:-1
and positioning
of our satellite.


265
00:15:01,567 --> 00:15:08,941 line:-1
[KEYSTROKES]


266
00:15:08.941 --> 00:15:13.212 line:-1 position:50%
I'll start with dragging
using a DragGesture.


267
00:15:13,212 --> 00:15:19,418 line:-1
To convert from a drag gesture
to a transform, I'll use a map.


268
00:15:19.418 --> 00:15:21.220 line:-1 position:50%
DragGesture has
several new properties


269
00:15:21.220 --> 00:15:24.090 line:-1 position:50%
to handle manipulation in 3D.


270
00:15:24.090 --> 00:15:27.593 line:-1 position:50%
We can use the DragGesture's
new translation3D property


271
00:15:27,593 --> 00:15:30,463 line:-1
to get how much the drag
has moved since it started.


272
00:15:30.463 --> 00:15:35.034 line:-1 position:50%
[KEYSTROKES]


273
00:15:35.034 --> 00:15:38.838 line:-1 position:50%
Now I'll create the transform.


274
00:15:38,838 --> 00:15:41,507 position:50%
I can pass in the translation
to the initializer


275
00:15:41,507 --> 00:15:44,710 line:0
and return it from the map.


276
00:15:44,710 --> 00:15:46,412 line:-1
Now I can use
our manipulation gesture


277
00:15:46.412 --> 00:15:52.718 line:-1 position:50%
that we just wrote
to transform my satellite.


278
00:15:52,718 --> 00:15:54,821 line:0
I'm going to use
the updating modifier


279
00:15:54,821 --> 00:15:57,156 line:0
to track when
the gesture is active.


280
00:15:57,156 --> 00:16:09,235 line:0
[KEYSTROKES]


281
00:16:09,235 --> 00:16:12,038 position:50%
I can use this state
to shrink down all our labels


282
00:16:12,038 --> 00:16:13,673 line:0
during the interaction
so that they don't


283
00:16:13,673 --> 00:16:15,675 line:0
block our view of the Earth.


284
00:16:15,675 --> 00:16:17,343 line:-1
It's important to use
updating to track


285
00:16:17.343 --> 00:16:19.745 line:-1 position:50%
any transient gesture state
I have


286
00:16:19.745 --> 00:16:22.181 line:-1 position:50%
because it guarantees
that my gesture state


287
00:16:22,181 --> 00:16:25,351 line:-1
will automatically be reset
if the gesture fails.


288
00:16:25,351 --> 00:16:27,954 position:50%
When my gesture value changes,
I can set the state's


289
00:16:27,954 --> 00:16:31,257 position:50%
new transform
and then use offset modifiers


290
00:16:31,257 --> 00:16:33,392 position:50%
to position the satellite model.


291
00:16:33,392 --> 00:16:35,962 position:50%
I'll also animate changes
to the transform


292
00:16:35,962 --> 00:16:37,463 line:0
using a spring animation,


293
00:16:37,463 --> 00:16:39,098 position:50%
so that when we let go
of the satellite,


294
00:16:39,098 --> 00:16:41,667 line:0
it animates
back to its original place.


295
00:16:41,667 --> 00:16:47,473 position:50%
[KEYSTROKES]


296
00:16:47,473 --> 00:16:49,609 position:50%
Now we can drag
the satellite around.


297
00:16:49,609 --> 00:16:52,011 line:0
This is a great start,
but we need to see this thing


298
00:16:52,011 --> 00:16:53,679 line:0
in more detail.


299
00:16:53,679 --> 00:16:55,248 line:-1
Now that we have
everything hooked up,


300
00:16:55,248 --> 00:16:57,583 line:-1
let's add on
some scaling action.


301
00:16:57,583 --> 00:17:00,753 line:0
For this I add a MagnifyGesture
that recognizes


302
00:17:00,753 --> 00:17:05,191 line:0
simultaneously with the drag.


303
00:17:05,191 --> 00:17:09,128 line:-1
[KEYSTROKES]


304
00:17:09,128 --> 00:17:11,797 line:-1
I'll also add the new
RotateGesture3D,


305
00:17:11.797 --> 00:17:16.602 line:-1 position:50%
which can measure unconstrained
3D rotation of the user's hands.


306
00:17:19.906 --> 00:17:22.174 line:-1 position:50%
I'll plug in these new values
to our transform,


307
00:17:22,174 --> 00:17:25,311 line:-1
and finally I need to update
the rotation and scale


308
00:17:25,311 --> 00:17:26,779 line:-1
of the entity.


309
00:17:26,779 --> 00:17:42,995 line:-1
[KEYSTROKES]


310
00:17:42,995 --> 00:17:47,433 line:-1
I'll use the rotation3DEffect
and scaleEffect for this.


311
00:17:47,433 --> 00:17:53,539 line:0
[KEYSTROKES]


312
00:17:53,539 --> 00:17:54,874 line:0
And there we have it!


313
00:17:54,874 --> 00:17:59,478 position:50%
We can now freely drag, scale,
and rotate our satellite entity.


314
00:17:59,478 --> 00:18:02,515 line:0
Our satellite looks like
it's ready for voyage.


315
00:18:02.515 --> 00:18:05.418 line:-1 position:50%
The gestures we've added work
with all the input devices


316
00:18:05,418 --> 00:18:06,919 line:-1
and modes you'd expect,


317
00:18:06.919 --> 00:18:09.388 line:-1 position:50%
including direct interaction
with hands,


318
00:18:09.388 --> 00:18:14.193 line:-1 position:50%
indirect pinch, trackpad,
and accessibility features.


319
00:18:14,193 --> 00:18:16,362 line:-1
Using familiar SwiftUI gestures,


320
00:18:16.362 --> 00:18:19.765 line:-1 position:50%
along with the new
targetedToEntity modifier,


321
00:18:19.765 --> 00:18:21.567 line:-1 position:50%
you can quickly
build interactions


322
00:18:21.567 --> 00:18:24.303 line:-1 position:50%
within intricate
entity hierarchies.


323
00:18:24,303 --> 00:18:27,540 line:-1
We're now ready to explore
the planet with our satellite,


324
00:18:27,540 --> 00:18:29,742 line:-1
but now it's time
for you to explore


325
00:18:29.742 --> 00:18:33.679 line:-1 position:50%
SwiftUI's new 3D capabilities
in your apps.


326
00:18:33,679 --> 00:18:37,149 line:-1
New scene types like volumes
and full spaces allow you


327
00:18:37,149 --> 00:18:41,487 line:-1
to consider what an application
can be in all new ways.


328
00:18:41,487 --> 00:18:44,624 line:-1
The powerful layout and
rendering systems in SwiftUI


329
00:18:44.624 --> 00:18:48.361 line:-1 position:50%
have been extended to make
SwiftUI not only a powerful way


330
00:18:48.361 --> 00:18:52.865 line:-1 position:50%
to build apps on iOS, macOS,
tvOS, and watchOS,


331
00:18:52,865 --> 00:18:55,935 line:-1
but on this all-new platform
as well.


332
00:18:55,935 --> 00:18:59,939 line:-1
The new attachments API opens up
incredible new opportunities


333
00:18:59,939 --> 00:19:03,809 line:-1
to integrate SwiftUI views
into 3D scenes.


334
00:19:03,809 --> 00:19:06,445 line:-1
And finally we've explored
how to put the stories


335
00:19:06,445 --> 00:19:09,582 line:-1
you tell people right
into the palms of their hands,


336
00:19:09,582 --> 00:19:13,252 line:-1
using familiar and powerful
gestures in SwiftUI.


337
00:19:13.252 --> 00:19:15.321 line:-1 position:50%
Thanks to SwiftUI
and RealityKit,


338
00:19:15,321 --> 00:19:17,623 line:-1
you have an exciting
journey ahead


339
00:19:17,623 --> 00:19:19,659 line:-1
beyond the bounds
of the 2D plane.


340
00:19:19.659 --> 00:19:21.694 line:-1 position:50%
And we're only getting started.


341
00:19:21.694 --> 00:19:23.362 line:-1 position:50%
Welcome to the platform!


342
00:19:23,362 --> 00:19:27,033 size:2% line:0 position:90%
♪

