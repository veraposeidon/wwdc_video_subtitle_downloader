2
00:00:00,300 --> 00:00:04,171 line:-1
♪ Mellow instrumental hip-hop ♪


3
00:00:04,171 --> 00:00:09,977 align:right size:2% line:0
♪


4
00:00:09.977 --> 00:00:11.778 line:-1 position:50%
Shilpa Chirackel:
Hello, my name is Shilpa.


5
00:00:11,778 --> 00:00:12,880 line:-1
Ryan Golbeck: And I'm Ryan.


6
00:00:12.880 --> 00:00:14.348 line:-1 position:50%
Shilpa: Today, we're very
excited to show you


7
00:00:14,348 --> 00:00:17,150 line:-1
everything we've been working on
in Xcode 15.


8
00:00:17.150 --> 00:00:19.887 line:-1 position:50%
Ryan: Xcode is the center
of your development experience.


9
00:00:19,887 --> 00:00:21,588 line:-1
In Xcode, we pull together
all aspects


10
00:00:21,588 --> 00:00:24,091 line:-1
of your development workflow
into one place,


11
00:00:24,091 --> 00:00:25,993 line:-1
making it easy and fun
to build apps


12
00:00:25,993 --> 00:00:28,462 line:-1
while keeping you focused
in a single tool.


13
00:00:28,462 --> 00:00:30,063 line:-1
Today we will touch on
many of the improvements


14
00:00:30,063 --> 00:00:33,100 line:-1
this year with Xcode 15,
starting with editing,


15
00:00:33.100 --> 00:00:35.602 line:-1 position:50%
navigating, and sharing,
through to testing,


16
00:00:35.602 --> 00:00:38.105 line:-1 position:50%
debugging, and distributing
your app.


17
00:00:38.105 --> 00:00:40.240 line:-1 position:50%
Shilpa: Before showing you
what's new in Xcode,


18
00:00:40,240 --> 00:00:41,642 line:-1
we need to download it.


19
00:00:41,642 --> 00:00:44,544 line:-1
And the best way to get
the released versions of Xcode


20
00:00:44,544 --> 00:00:46,113 line:-1
is from the Mac App Store.


21
00:00:46,113 --> 00:00:48,949 line:-1
This guarantees you will always
use the newest version


22
00:00:48.949 --> 00:00:51.018 line:-1 position:50%
of the tools
and can take advantage


23
00:00:51,018 --> 00:00:52,719 line:-1
of the latest features.


24
00:00:52,719 --> 00:00:55,489 line:-1
Last year, we made it easier
to get started


25
00:00:55,489 --> 00:00:59,092 line:-1
by making the watch and TV
simulator optional downloads.


26
00:00:59,092 --> 00:01:01,128 line:-1
This year,
we're going even further


27
00:01:01,128 --> 00:01:03,430 line:-1
by making all simulators
downloadable,


28
00:01:03,430 --> 00:01:07,367 line:-1
including iOS and Apple's
new spatial computing platform,


29
00:01:07,367 --> 00:01:11,038 line:-1
allowing you to configure
Xcode to match your needs.


30
00:01:11.038 --> 00:01:13.707 line:-1 position:50%
Now, when you get Xcode,
it will be smaller,


31
00:01:13.707 --> 00:01:15.342 line:-1 position:50%
making it easier to write code


32
00:01:15.342 --> 00:01:17.778 line:-1 position:50%
even before you get
all the simulators.


33
00:01:17,778 --> 00:01:20,314 line:-1
Alternatively, if you need
to download Xcode


34
00:01:20.314 --> 00:01:23.250 line:-1 position:50%
from the Developer website,
such as the latest beta,


35
00:01:23,250 --> 00:01:26,687 line:-1
you can choose up front
which simulators to include.


36
00:01:26.687 --> 00:01:29.222 line:-1 position:50%
Now that we've got Xcode,
let's jump right in


37
00:01:29.222 --> 00:01:31.725 line:-1 position:50%
and see what's new
in the source editor.


38
00:01:31,725 --> 00:01:34,428 line:-1
Code completion helps you get
to the code you want


39
00:01:34.428 --> 00:01:36.797 line:-1 position:50%
faster and with fewer mistakes.


40
00:01:36,797 --> 00:01:39,466 line:-1
In Xcode 15,
it gets a whole lot smarter.


41
00:01:39,466 --> 00:01:40,734 line:-1
Let's take a look.


42
00:01:40,734 --> 00:01:44,071 line:-1
Completions take advantage
of new sources of information.


43
00:01:44,071 --> 00:01:46,206 line:-1
Here I have Backyard Birds.


44
00:01:46.206 --> 00:01:49.376 line:-1 position:50%
I'll start by creating
a new file


45
00:01:49.376 --> 00:01:52.846 line:-1 position:50%
and name it PlantSummaryRow.


46
00:01:52,846 --> 00:01:57,517 line:-1
I'll add the required
import statements.


47
00:01:57.517 --> 00:02:00.854 line:-1 position:50%
Now when I create a new struct,
completion suggests


48
00:02:00,854 --> 00:02:02,756 line:-1
PlantSummaryRow
for the type name,


49
00:02:02.756 --> 00:02:07.527 line:-1 position:50%
and that's because that's
the name of the file I created.


50
00:02:07.527 --> 00:02:09.830 line:-1 position:50%
Let me finish
implementing this file.


51
00:02:15.435 --> 00:02:17.371 line:-1 position:50%
I'm done with
the implementation.


52
00:02:17.371 --> 00:02:20.640 line:-1 position:50%
The way some completions
are presented has improved too.


53
00:02:20,640 --> 00:02:23,043 line:-1
When you're calling a function
that has default arguments,


54
00:02:23.043 --> 00:02:26.613 line:-1 position:50%
it can be challenging to get
exactly the parameters you want.


55
00:02:26.613 --> 00:02:28.548 line:-1 position:50%
You can see all possible
permutations


56
00:02:28,548 --> 00:02:32,052 line:-1
of default arguments to help you
pick the one you want.


57
00:02:32,052 --> 00:02:34,921 line:-1
I'll add a frame modifier
to this VStack


58
00:02:34,921 --> 00:02:37,824 line:-1
and press the right arrow
on the keyboard.


59
00:02:37.824 --> 00:02:43.263 line:-1 position:50%
I'll select the one I need,
in this case width.


60
00:02:43,263 --> 00:02:45,966 line:-1
And completions now have
more context awareness,


61
00:02:45.966 --> 00:02:47.768 line:-1 position:50%
giving you even
better suggestions


62
00:02:47.768 --> 00:02:49.269 line:-1 position:50%
for the code you're writing.


63
00:02:49,269 --> 00:02:50,871 line:-1
Coming back to the VStack,


64
00:02:50,871 --> 00:02:53,607 line:-1
when I type a dot
to add a modifier,


65
00:02:53.607 --> 00:02:56.176 line:-1 position:50%
padding is the top suggestion
because Xcode knows


66
00:02:56,176 --> 00:03:01,381 line:-1
it's one of the most frequently
used modifiers for this view.


67
00:03:01.381 --> 00:03:04.684 line:-1 position:50%
But when I add
a modifier to a Text,


68
00:03:04,684 --> 00:03:08,422 line:-1
I get font
as the top suggestion.


69
00:03:08,422 --> 00:03:12,092 line:-1
These editor suggestions also
consider the surrounding code.


70
00:03:12,092 --> 00:03:14,227 line:-1
I already changed
the font on this text.


71
00:03:14.227 --> 00:03:16.663 line:-1 position:50%
When I want to add
another modifier,


72
00:03:16.663 --> 00:03:19.733 line:-1 position:50%
the top suggestion is bold,


73
00:03:19,733 --> 00:03:22,035 line:-1
as I wouldn't want to use
the same modifier twice


74
00:03:22,035 --> 00:03:23,937 line:-1
when working on text.


75
00:03:23.937 --> 00:03:25.505 line:-1 position:50%
Here's another example.


76
00:03:25.505 --> 00:03:28.208 line:-1 position:50%
In this file,
I'm using CLLocation to find


77
00:03:28,208 --> 00:03:29,543 line:-1
where my birds are.


78
00:03:29,543 --> 00:03:34,648 line:-1
As I already typed in latitude,
now it will suggest longitude,


79
00:03:34.648 --> 00:03:38.218 line:-1 position:50%
as these two properies
are commonly paired together.


80
00:03:38,218 --> 00:03:40,921 line:-1
All this means you'll have
better top suggestions,


81
00:03:40.921 --> 00:03:43.857 line:-1 position:50%
leading you to type
safer code faster.


82
00:03:43,857 --> 00:03:46,560 line:-1
Hey Ryan, I heard that we're
bringing the power completions


83
00:03:46,560 --> 00:03:47,961 line:-1
to asset catalogs too.


84
00:03:47,961 --> 00:03:49,162 line:-1
Can you tell me some more?


85
00:03:49,162 --> 00:03:50,363 line:-1
Ryan: Sure, Shilpa.


86
00:03:50,363 --> 00:03:53,200 line:-1
Color and image assets
are now backed by Swift symbols.


87
00:03:53.200 --> 00:03:55.535 line:-1 position:50%
This means that they can now
be code completed.


88
00:03:55.535 --> 00:03:58.839 line:-1 position:50%
In my asset catalog, I have
some custom colors and images.


89
00:03:58,839 --> 00:04:01,775 line:-1
Xcode 15 automatically generates
symbols for each of them,


90
00:04:01,775 --> 00:04:03,376 line:-1
and I can reference these
in my code


91
00:04:03,376 --> 00:04:05,212 line:-1
instead of using string names.


92
00:04:05,212 --> 00:04:10,417 line:-1
If I change the name
of this image to MultipleClouds


93
00:04:10.417 --> 00:04:14.488 line:-1 position:50%
and build my project,


94
00:04:14,488 --> 00:04:18,625 line:-1
I get an issue in another file
where we use this asset.


95
00:04:18.625 --> 00:04:23.330 line:-1 position:50%
And I can correct it using
CodeComplete.


96
00:04:23,330 --> 00:04:25,031 line:-1
These symbols give me
type safety,


97
00:04:25.031 --> 00:04:27.334 line:-1 position:50%
so I don't have to worry about
mysteriously missing colors


98
00:04:27,334 --> 00:04:29,202 line:-1
or images at runtime.


99
00:04:29.202 --> 00:04:32.205 line:-1 position:50%
And Xcode 15 brings the power
and flexibility of catalogs


100
00:04:32,205 --> 00:04:34,574 line:-1
to your localization
experience too.


101
00:04:34,574 --> 00:04:36,576 line:-1
String catalogs pull together
your localizations


102
00:04:36.576 --> 00:04:37.978 line:-1 position:50%
into a single place,


103
00:04:37,978 --> 00:04:41,348 line:-1
giving you a centralized way
to review and update them.


104
00:04:41,348 --> 00:04:44,017 line:-1
To get started, you can convert
a project to use string catalogs


105
00:04:44.017 --> 00:04:47.220 line:-1 position:50%
by selecting Edit > Convert
to string catalog.


106
00:04:47.220 --> 00:04:49.256 line:-1 position:50%
This brings up a sheet showing
all of the storyboards,


107
00:04:49,256 --> 00:04:51,324 line:-1
.strings, and .stringsdict files


108
00:04:51.324 --> 00:04:53.693 line:-1 position:50%
that can be migrated.


109
00:04:53.693 --> 00:04:55.795 line:-1 position:50%
And once migrated,
all of your translations


110
00:04:55.795 --> 00:04:59.199 line:-1 position:50%
are organized
into a single editor.


111
00:04:59.199 --> 00:05:00.333 line:-1 position:50%
In the sidebar on the left,


112
00:05:00,333 --> 00:05:01,868 line:-1
you can review
the translation progress


113
00:05:01.868 --> 00:05:05.071 line:-1 position:50%
for each of the languages
that you support.


114
00:05:05.071 --> 00:05:07.007 line:-1 position:50%
And keeping up to date is easy.


115
00:05:07,007 --> 00:05:08,775 line:-1
All of the strings are pulled
directly from source


116
00:05:08.775 --> 00:05:10.577 line:-1 position:50%
each time you build.


117
00:05:10,577 --> 00:05:12,345 line:-1
When new strings
are added or removed,


118
00:05:12,345 --> 00:05:15,115 line:-1
the editor annotates
the affected languages


119
00:05:15,115 --> 00:05:18,818 line:-1
and badges the relevant strings.


120
00:05:18,818 --> 00:05:20,220 line:0
Get started migrating today


121
00:05:20,220 --> 00:05:23,356 position:50%
by heading over to the session
"Discover String Catalogs."


122
00:05:23,356 --> 00:05:26,159 line:-1
Shilpa, what's new in Xcode
for documentation this year?


123
00:05:26.159 --> 00:05:27.327 line:-1 position:50%
Shilpa: A lot.


124
00:05:27,327 --> 00:05:30,764 line:-1
Clear, concise code is made
even better with documentation.


125
00:05:30,764 --> 00:05:33,166 line:-1
Whether you're explaining
something to your future self


126
00:05:33.166 --> 00:05:35.368 line:-1 position:50%
or one of the consumers
of your API,


127
00:05:35,368 --> 00:05:38,405 line:-1
writing great documentation
is key.


128
00:05:38,405 --> 00:05:41,441 line:-1
And great documentation
deserves great presentation.


129
00:05:41.441 --> 00:05:44.678 line:-1 position:50%
Xcode 15 has beautiful
new styling and spacing,


130
00:05:44.678 --> 00:05:47.147 line:-1 position:50%
making documentation
easier to read.


131
00:05:47.147 --> 00:05:49.583 line:-1 position:50%
But the biggest improvement
is a new assistant


132
00:05:49.583 --> 00:05:52.619 line:-1 position:50%
that shows a real-time preview
of your documentation.


133
00:05:52,619 --> 00:05:55,522 line:-1
While crafting documentation,
I can display the assistant


134
00:05:55,522 --> 00:05:59,593 line:-1
by choosing Editor > Assistant >


135
00:05:59.593 --> 00:06:04.598 line:-1 position:50%
and then Documentation Preview
in the jump bar.


136
00:06:04,598 --> 00:06:06,566 line:-1
As I type in the source editor,


137
00:06:06.566 --> 00:06:08.802 line:-1 position:50%
the preview is updated
in real time.


138
00:06:08,802 --> 00:06:11,271 line:-1
This will show me exactly
how my docs will look


139
00:06:11,271 --> 00:06:13,907 line:-1
in a fully built
documentation archive.


140
00:06:13,907 --> 00:06:15,675 line:-1
I'll add a code example to show


141
00:06:15.675 --> 00:06:17.744 line:-1 position:50%
how it could be used
in practice.


142
00:06:17.744 --> 00:06:21.948 line:-1 position:50%
I'll begin by writing
"Use this initializer


143
00:06:21.948 --> 00:06:28.121 line:-1 position:50%
to display an image
of a given bird."


144
00:06:28,121 --> 00:06:33,260 line:-1
Then I'll paste in
my code example.


145
00:06:33.260 --> 00:06:36.162 line:-1 position:50%
Since this example involves UI,
I'll add a screenshot


146
00:06:36,162 --> 00:06:39,866 line:-1
of what the resulting view
would look like.


147
00:06:39.866 --> 00:06:42.168 line:-1 position:50%
I can reference the image
named BirdIcon


148
00:06:42,168 --> 00:06:45,472 line:-1
because I included it
in my documentation catalog.


149
00:06:45,472 --> 00:06:47,907 line:-1
The new documentation preview
is a huge help


150
00:06:47,907 --> 00:06:51,745 line:-1
to make sure your docs are
presented exactly how you want.


151
00:06:51,745 --> 00:06:53,813 line:0
If you're passionate about
writing documentation,


152
00:06:53,813 --> 00:06:55,682 line:0
like I am, watch the session


153
00:06:55,682 --> 00:06:59,853 position:50%
"Create rich documentation
with Swift-DocC" to learn more.


154
00:06:59,853 --> 00:07:02,022 line:-1
Just as important
as documentation


155
00:07:02.022 --> 00:07:05.125 line:-1 position:50%
is that your code should be
concise and understandable.


156
00:07:05.125 --> 00:07:08.395 line:-1 position:50%
New in Swift this year is
a powerful new language feature,


157
00:07:08.395 --> 00:07:09.562 line:-1 position:50%
Swift macros.


158
00:07:09,562 --> 00:07:11,965 line:-1
Macros makes
for more expressive APIs


159
00:07:11,965 --> 00:07:14,100 line:-1
and helps eliminate
repeated code.


160
00:07:14.100 --> 00:07:16.703 line:-1 position:50%
And Xcode's integration
gives you complete visibility


161
00:07:16.703 --> 00:07:20.040 line:-1 position:50%
into macros, allowing you
to treat macro-generated code


162
00:07:20,040 --> 00:07:22,542 line:-1
like all other code in your app.


163
00:07:22,542 --> 00:07:25,679 line:-1
Macros are part of the Swift
packages in the SDK.


164
00:07:25.679 --> 00:07:28.148 line:-1 position:50%
Now we're utilizing
the power of macros


165
00:07:28.148 --> 00:07:30.350 line:-1 position:50%
in a number of Apple's
own frameworks,


166
00:07:30,350 --> 00:07:33,853 line:-1
like Swift standard library,
foundation,


167
00:07:33,853 --> 00:07:36,623 line:-1
and the new
Swift data framework.


168
00:07:36,623 --> 00:07:39,893 line:-1
I can also create my own macro
package to share with others.


169
00:07:39,893 --> 00:07:42,796 line:-1
To create a package,
I'm going to use quick actions,


170
00:07:42,796 --> 00:07:44,864 line:-1
a new feature
that lets me access


171
00:07:44.864 --> 00:07:51.571 line:-1 position:50%
all of Xcode's menu options just
by pressing Command-Shift-A.


172
00:07:51.571 --> 00:07:54.240 line:-1 position:50%
The new macro package
will come with great examples


173
00:07:54,240 --> 00:07:56,376 line:-1
to get me started.


174
00:07:56,376 --> 00:07:59,212 line:-1
I've already created
a macro package, EnumHelper.


175
00:07:59.212 --> 00:08:03.750 line:-1 position:50%
Inside EnumHelper, I implemented
CaseDetection as a macro.


176
00:08:03.750 --> 00:08:07.487 line:-1 position:50%
The beauty of macros is that
they generate normal Swift code.


177
00:08:07.487 --> 00:08:10.757 line:-1 position:50%
It wraps up and neatly tucks
away the code they provide.


178
00:08:10,757 --> 00:08:12,692 line:-1
But when you want to see
what a macro is doing


179
00:08:12.692 --> 00:08:15.628 line:-1 position:50%
or when you want to debug
in macro-generated code,


180
00:08:15,628 --> 00:08:17,931 line:-1
you can expand the macro
right in line


181
00:08:17,931 --> 00:08:21,234 line:-1
with the help
from quick actions.


182
00:08:21,234 --> 00:08:24,003 line:-1
You can even set a breakpoint
on the code inside a macro


183
00:08:24,003 --> 00:08:26,573 line:-1
if you need to debug it.


184
00:08:26,573 --> 00:08:29,142 line:0
Watch the session
"Expand on Swift macros"


185
00:08:29,142 --> 00:08:33,213 line:0
to gain a deeper technical
understanding of Swift macros.


186
00:08:33,213 --> 00:08:34,614 line:0
Equipped with this
new knowledge,


187
00:08:34,614 --> 00:08:37,550 position:50%
you can code along to write
a few macros from scratch


188
00:08:37,550 --> 00:08:40,186 position:50%
in the session
"Write Swift macros."


189
00:08:40.186 --> 00:08:42.021 line:-1 position:50%
Let's explore
another area of Xcode


190
00:08:42.021 --> 00:08:44.824 line:-1 position:50%
that's taking advantage
of macros, previews.


191
00:08:44,824 --> 00:08:47,127 line:-1
With the help of macros,
the new Previews API


192
00:08:47,127 --> 00:08:49,229 line:-1
is simple and easy to remember.


193
00:08:49.229 --> 00:08:52.365 line:-1 position:50%
I'll add a preview
by typing #Preview.


194
00:08:52.365 --> 00:08:56.970 line:-1 position:50%
I want to preview
the account screen.


195
00:08:56.970 --> 00:08:59.038 line:-1 position:50%
App detail column
has various states,


196
00:08:59,038 --> 00:09:02,108 line:-1
which I can show
by creating another preview.


197
00:09:02,108 --> 00:09:05,712 line:0
I'm able to see
both of these scenarios.


198
00:09:05,712 --> 00:09:07,981 line:0
But now I have
two previews in UI.


199
00:09:07,981 --> 00:09:12,519 position:50%
To tell them apart, I'll add
a title, "Placeholder View".


200
00:09:15.722 --> 00:09:17.824 line:-1 position:50%
But wait, there are
more improvements.


201
00:09:17.824 --> 00:09:21.161 line:-1 position:50%
We're bringing previews
to UIKit and AppKit.


202
00:09:21.161 --> 00:09:23.396 line:-1 position:50%
So even in my older
Food Truck app,


203
00:09:23.396 --> 00:09:26.065 line:-1 position:50%
I can add a preview
for my UIViewController


204
00:09:26.065 --> 00:09:29.836 line:-1 position:50%
and iterate as quickly
as I have in SwiftUI.


205
00:09:29.836 --> 00:09:32.872 line:-1 position:50%
Now let's look at developing
widgets with previews.


206
00:09:32.872 --> 00:09:35.508 line:-1 position:50%
The API also introduces
new workflows


207
00:09:35,508 --> 00:09:38,111 line:-1
for building time-based widgets.


208
00:09:41,281 --> 00:09:44,884 line:-1
The canvas has a new area
that shows all of the entries.


209
00:09:44,884 --> 00:09:46,519 line:-1
And as I navigate through them,


210
00:09:46,519 --> 00:09:50,089 line:-1
I can see how the widget's
transitions animate.


211
00:09:50,089 --> 00:09:51,291 line:0
Check out the session


212
00:09:51,291 --> 00:09:54,027 line:0
"Build programmatic UI
with Xcode Previews"


213
00:09:54,027 --> 00:09:56,296 position:50%
to learn how to adopt
the new and exciting


214
00:09:56,296 --> 00:09:58,364 position:50%
preview features
in your project.


215
00:09:58,364 --> 00:10:00,099 line:-1
I'll hand it back to Ryan
to talk about


216
00:10:00.099 --> 00:10:01.634 line:-1 position:50%
the improvements in navigation.


217
00:10:01,634 --> 00:10:03,169 line:-1
Ryan: Thanks, Shilpa.


218
00:10:03,169 --> 00:10:05,605 line:-1
As your project grows,
it becomes more complex,


219
00:10:05,605 --> 00:10:07,507 line:-1
making it difficult
to keep track of landmarks


220
00:10:07,507 --> 00:10:09,609 line:-1
that you want to reference
during a task.


221
00:10:09,609 --> 00:10:13,346 line:-1
To help, Xcode 15 introduces
the bookmarks navigator.


222
00:10:13,346 --> 00:10:14,848 line:-1
I'll open it by clicking
right next to


223
00:10:14.848 --> 00:10:17.450 line:-1 position:50%
the source control navigator.


224
00:10:17,450 --> 00:10:19,352 line:-1
I've been adding bookmarks
to places in my code


225
00:10:19,352 --> 00:10:21,154 line:-1
that I need to add
documentation.


226
00:10:21.154 --> 00:10:24.023 line:-1 position:50%
I want to add another one in
this file, and it's easy to do.


227
00:10:24.023 --> 00:10:27.026 line:-1 position:50%
I'll just right-click on this
location and select Bookmark.


228
00:10:28.495 --> 00:10:29.929 line:-1 position:50%
The bookmark shows up
in the navigator


229
00:10:29,929 --> 00:10:31,965 line:-1
with a preview of its location,


230
00:10:31.965 --> 00:10:34.367 line:-1 position:50%
but I can change this display
if I want by clicking it


231
00:10:34.367 --> 00:10:36.636 line:-1 position:50%
and entering
a different description.


232
00:10:36.636 --> 00:10:39.138 line:-1 position:50%
Xcode annotates a line of code
with my description,


233
00:10:39,138 --> 00:10:42,075 line:-1
making it easy to see and
remember what I want it to do.


234
00:10:42.075 --> 00:10:43.977 line:-1 position:50%
My list of bookmarks
is starting to grow,


235
00:10:43,977 --> 00:10:45,945 line:-1
but I can manage them
by sorting and grouping them


236
00:10:45.945 --> 00:10:47.247 line:-1 position:50%
however I like.


237
00:10:47,247 --> 00:10:48,515 line:-1
I want to group all of my


238
00:10:48,515 --> 00:10:51,351 line:-1
documentation-related
bookmarks together.


239
00:10:51,351 --> 00:10:54,554 line:-1
I'll select the ones
I'm interested in,


240
00:10:54,554 --> 00:10:56,789 line:-1
and with a secondary click,
open the context menu


241
00:10:56,789 --> 00:11:00,093 line:-1
to select
New Group From Selection.


242
00:11:00,093 --> 00:11:01,594 line:-1
This creates a new group
that I'll call


243
00:11:01,594 --> 00:11:04,664 line:-1
Places to Add Documentation.


244
00:11:04.664 --> 00:11:06.699 line:-1 position:50%
Bookmarks are great reminders
in my code,


245
00:11:06,699 --> 00:11:09,135 line:-1
but they can also be used
as to-do lists.


246
00:11:09.135 --> 00:11:12.171 line:-1 position:50%
I can mark one as complete
by clicking to its left.


247
00:11:12,171 --> 00:11:14,173 line:-1
Or I can delete it altogether
by selecting


248
00:11:14.173 --> 00:11:18.077 line:-1 position:50%
Delete Bookmark
in the context menu.


249
00:11:18.077 --> 00:11:21.314 line:-1 position:50%
This removes the bookmark
annotation in the editor.


250
00:11:21,314 --> 00:11:24,183 line:-1
Lines of code aren't the only
thing I can bookmark, though.


251
00:11:24.183 --> 00:11:27.687 line:-1 position:50%
Bookmarks are also a great way
to keep track of Find queries.


252
00:11:27,687 --> 00:11:30,056 line:-1
Before Xcode 15,
I've added to-dos in my code,


253
00:11:30,056 --> 00:11:31,324 line:-1
but they are hard to find,


254
00:11:31,324 --> 00:11:34,427 line:-1
so I've already bookmarked
a query to find all of them.


255
00:11:37,630 --> 00:11:39,799 line:-1
But I can bookmark
any Find query.


256
00:11:39,799 --> 00:11:41,868 line:-1
I want to keep a handy
list of all the view modifiers


257
00:11:41,868 --> 00:11:43,069 line:-1
in my code.


258
00:11:43.069 --> 00:11:44.704 line:-1 position:50%
I'll use the new
Conforming Types query


259
00:11:44,704 --> 00:11:48,207 line:-1
to find all conformances
to the viewModifier protocol.


260
00:11:53.212 --> 00:11:56.082 line:-1 position:50%
Then, I can bookmark this query
by right-clicking in the results


261
00:11:56.082 --> 00:12:00.453 line:-1 position:50%
and selecting
Bookmark Find "viewModifier".


262
00:12:00.453 --> 00:12:04.057 line:-1 position:50%
My query is available
in the bookmark navigator.


263
00:12:04,057 --> 00:12:05,825 line:-1
If the results of my query
ever change,


264
00:12:05.825 --> 00:12:08.695 line:-1 position:50%
I can refresh the list with just
one click on the refresh button


265
00:12:08,695 --> 00:12:11,364 line:-1
next to the bookmark.


266
00:12:11,364 --> 00:12:13,566 line:-1
Xcode 15's new bookmark
navigator keeps track


267
00:12:13.566 --> 00:12:15.268 line:-1 position:50%
of your work
so you don't have to,


268
00:12:15,268 --> 00:12:17,537 line:-1
keeping your focus
on the task at hand.


269
00:12:17,537 --> 00:12:18,905 line:-1
Another important
part of development


270
00:12:18,905 --> 00:12:20,406 line:-1
is sharing your work.


271
00:12:20.406 --> 00:12:21.708 line:-1 position:50%
Bringing your changes together,


272
00:12:21,708 --> 00:12:23,209 line:-1
especially when
crafting a commit


273
00:12:23,209 --> 00:12:24,510 line:-1
to share with your colleagues,


274
00:12:24,510 --> 00:12:28,648 line:-1
can be as important
as the changes themselves.


275
00:12:28,648 --> 00:12:30,984 line:-1
Xcode 15 introduces
a new changes navigator


276
00:12:30.984 --> 00:12:32.185 line:-1 position:50%
and commit editor,


277
00:12:32.185 --> 00:12:36.022 line:-1 position:50%
which together are a great way
to review all of your changes.


278
00:12:36.022 --> 00:12:38.758 line:-1 position:50%
I've been working on adding
documentation to my project.


279
00:12:38.758 --> 00:12:42.829 line:-1 position:50%
I can review these changes
in the source control navigator.


280
00:12:42.829 --> 00:12:44.430 line:-1 position:50%
The first thing you'll notice
is an improved


281
00:12:44,430 --> 00:12:47,734 line:-1
reporting and presentation
of each file's status.


282
00:12:47,734 --> 00:12:49,302 line:-1
My stage modifications show up


283
00:12:49,302 --> 00:12:52,372 line:-1
as an icon
next to the file name.


284
00:12:52.372 --> 00:12:54.040 line:-1 position:50%
I want to start reviewing
these changes,


285
00:12:54,040 --> 00:12:55,842 line:-1
so I'll click on
the uncommitted changes item


286
00:12:55,842 --> 00:12:57,477 line:-1
to bring up the commit editor.


287
00:12:57.477 --> 00:12:59.245 line:-1 position:50%
I can now review
all of my modifications


288
00:12:59,245 --> 00:13:04,217 line:-1
in a single scrolling view.


289
00:13:04.217 --> 00:13:05.785 line:-1 position:50%
Each section shows
just enough context


290
00:13:05,785 --> 00:13:07,286 line:-1
to understand
the surrounding code.


291
00:13:07.286 --> 00:13:08.521 line:-1 position:50%
And If I want to see more,


292
00:13:08,521 --> 00:13:12,392 line:-1
I can use the drag handle
to expose more of the file.


293
00:13:12.392 --> 00:13:14.727 line:-1 position:50%
Each change is also presented
in a source editor,


294
00:13:14,727 --> 00:13:16,696 line:-1
giving me access
to the annotations and controls


295
00:13:16,696 --> 00:13:18,665 line:-1
that I'm used to.


296
00:13:18,665 --> 00:13:20,500 line:-1
During my review,
I notice that there's an issue


297
00:13:20,500 --> 00:13:22,535 line:-1
in the BirdsNavigationStack
file.


298
00:13:22.535 --> 00:13:24.671 line:-1 position:50%
It looks like I made a typo
in my documentation,


299
00:13:24,671 --> 00:13:29,375 line:-1
but I can fix this
without leaving the view.


300
00:13:29,375 --> 00:13:32,412 line:-1
Xcode processes my change
and removes the issue.


301
00:13:32.412 --> 00:13:34.847 line:-1 position:50%
My edit is also immediately
indicated as unstaged


302
00:13:34,847 --> 00:13:38,551 line:-1
in the changes bar.


303
00:13:38,551 --> 00:13:41,554 line:-1
[no audio]


304
00:13:41,554 --> 00:13:44,023 line:-1
The status indicator highlights
that the BirdsNavigationStack


305
00:13:44.023 --> 00:13:48.061 line:-1 position:50%
now has both staged
and unstaged changes.


306
00:13:48,061 --> 00:13:50,029 line:-1
I want to include my fix
in the next commit,


307
00:13:50.029 --> 00:13:52.465 line:-1 position:50%
so I'll stage it by clicking
the changes bar next to the fix


308
00:13:52,465 --> 00:13:56,069 line:-1
and selecting Stage Change.


309
00:13:56,069 --> 00:13:58,337 line:-1
I also notice I've accidentally
staged a log statement


310
00:13:58,337 --> 00:14:00,473 line:-1
that I was using for debugging.


311
00:14:00.473 --> 00:14:03.643 line:-1 position:50%
I'll use the changes bar
again to unstage this change.


312
00:14:03,643 --> 00:14:05,611 line:-1
These staging controls
are easy to use


313
00:14:05.611 --> 00:14:08.381 line:-1 position:50%
and they're integrated
throughout Xcode.


314
00:14:08,381 --> 00:14:09,982 line:-1
I'm ready to check in
my changes.


315
00:14:09.982 --> 00:14:11.150 line:-1 position:50%
I'll start by adding
a description


316
00:14:11,150 --> 00:14:16,689 line:-1
in the commit message box,


317
00:14:16,689 --> 00:14:21,027 line:-1
and then clicking
the Commit button.


318
00:14:21,027 --> 00:14:23,196 line:-1
Xcode creates my commit
and opens it immediately


319
00:14:23.196 --> 00:14:26.065 line:-1 position:50%
in the commit viewer,
summarizing what was included.


320
00:14:26,065 --> 00:14:28,468 line:-1
[no audio]


321
00:14:28,468 --> 00:14:29,669 line:-1
[no audio]


322
00:14:29,669 --> 00:14:32,672 line:-1
[no audio]


323
00:14:32.672 --> 00:14:35.508 line:-1 position:50%
And lastly, I can share
my commit with my teammates.


324
00:14:35,508 --> 00:14:38,544 line:-1
I'll click on the status
indicator next to my commit,


325
00:14:38,544 --> 00:14:44,550 line:-1
select Push,
and follow the prompts.


326
00:14:44.550 --> 00:14:46.552 line:-1 position:50%
These source control features
are a great improvement


327
00:14:46,552 --> 00:14:48,688 line:-1
to keep you focused in Xcode 15.


328
00:14:48.688 --> 00:14:50.423 line:-1 position:50%
But hey, Shilpa, I think
we have some new features


329
00:14:50,423 --> 00:14:51,591 line:-1
that help with testing too.


330
00:14:51.591 --> 00:14:53.025 line:-1 position:50%
Can you tell us about those?


331
00:14:53,025 --> 00:14:55,828 line:-1
Shilpa: Sure, Ryan, testing
is an important part of shipping


332
00:14:55,828 --> 00:14:57,196 line:-1
a high-quality app.


333
00:14:57.196 --> 00:14:59.265 line:-1 position:50%
It allows you to catch
regressions quickly


334
00:14:59.265 --> 00:15:02.502 line:-1 position:50%
and maintain your app's quality
as it grows in complexity.


335
00:15:02.502 --> 00:15:05.037 line:-1 position:50%
Testing gets some
big improvements this year,


336
00:15:05,037 --> 00:15:07,273 line:-1
starting with an updated
test navigator,


337
00:15:07,273 --> 00:15:10,676 line:-1
rewritten from the ground up
in Swift to be more efficient.


338
00:15:10.676 --> 00:15:13.646 line:-1 position:50%
When running or reporting
your test results in real time,


339
00:15:13.646 --> 00:15:16.282 line:-1 position:50%
Xcode is now 45 percent faster.


340
00:15:16.282 --> 00:15:19.485 line:-1 position:50%
The test navigator is organized
around your test plan,


341
00:15:19,485 --> 00:15:22,922 line:-1
making it easier to find
the test you care about.


342
00:15:22.922 --> 00:15:26.492 line:-1 position:50%
You can also use filters to find
tests based on any result type,


343
00:15:26.492 --> 00:15:28.694 line:-1 position:50%
such as expected failure.


344
00:15:28,694 --> 00:15:31,631 line:-1
Once you run your test
in Xcode or Xcode Cloud,


345
00:15:31,631 --> 00:15:34,167 line:-1
the test reports help you
explore the results,


346
00:15:34,167 --> 00:15:36,936 line:-1
showing you where to focus next.


347
00:15:36.936 --> 00:15:40.106 line:-1 position:50%
It starts with a high-level
summary of the entire test run.


348
00:15:40,106 --> 00:15:41,774 line:-1
This includes Insights,


349
00:15:41.774 --> 00:15:44.577 line:-1 position:50%
a pattern-based analysis
of the results.


350
00:15:44,577 --> 00:15:45,845 position:50%
Within the Test section,


351
00:15:45,845 --> 00:15:47,980 line:0
you can understand
how the test performed.


352
00:15:47,980 --> 00:15:50,750 line:0
It's easy to figure out how many
tests passed and failed


353
00:15:50,750 --> 00:15:54,287 line:0
across different devices
and configurations.


354
00:15:54,287 --> 00:15:56,989 line:-1
Insights analyze test results
to identify


355
00:15:56,989 --> 00:15:59,559 line:-1
potentially related failures
that might have been difficult


356
00:15:59,559 --> 00:16:00,893 line:-1
to see before.


357
00:16:00.893 --> 00:16:04.363 line:-1 position:50%
It also alerts us to test runs
that may cause the entire suite


358
00:16:04,363 --> 00:16:06,966 line:-1
to take longer
to return results.


359
00:16:09,001 --> 00:16:11,204 line:-1
The second insight
sticks out to me.


360
00:16:11.204 --> 00:16:14.073 line:-1 position:50%
The test failed while attempting
to tap the Account button.


361
00:16:14,073 --> 00:16:16,742 line:-1
I want to investigate
this further.


362
00:16:16,742 --> 00:16:19,679 line:-1
From the overview,
I can navigate to the test list,


363
00:16:19,679 --> 00:16:21,614 line:-1
which shows
all of the test runs,


364
00:16:21.614 --> 00:16:24.450 line:-1 position:50%
with filters for result type,
run destination,


365
00:16:24,450 --> 00:16:26,252 line:-1
and test plan configuration.


366
00:16:26.252 --> 00:16:28.654 line:-1 position:50%
I see the test failed to tap
the Account button


367
00:16:28,654 --> 00:16:31,557 line:-1
across multiple languages
with the same error message.


368
00:16:31,557 --> 00:16:34,360 line:-1
To learn more, I can look
at the individual class


369
00:16:34.360 --> 00:16:37.697 line:-1 position:50%
or navigate to a new dedicated
Test Details view


370
00:16:37,697 --> 00:16:40,166 line:-1
for individual test methods.


371
00:16:40,166 --> 00:16:43,102 line:-1
The Test Details view contains
tabs for different ways


372
00:16:43,102 --> 00:16:46,439 line:-1
of exploring the results data,
including a breakdown


373
00:16:46,439 --> 00:16:51,577 line:-1
of all runs and a dedicated
performance metrics tab.


374
00:16:51,577 --> 00:16:54,480 line:-1
Debugging UI test failures
is more fun than ever


375
00:16:54,480 --> 00:16:56,415 line:-1
with the new
automation explorer.


376
00:16:56.415 --> 00:16:58.284 line:-1 position:50%
The explorer is interactive,


377
00:16:58.284 --> 00:17:00.019 line:-1 position:50%
so you can watch
your test playback


378
00:17:00,019 --> 00:17:02,121 line:-1
or can scrub through
the timeline.


379
00:17:02.121 --> 00:17:04.724 line:-1 position:50%
Touch or mouse events
are overlaid on the video.


380
00:17:04,724 --> 00:17:05,858 line:0
At the point of failure,


381
00:17:05,858 --> 00:17:08,594 line:0
like when my test failed
to tap the Account button,


382
00:17:08,594 --> 00:17:10,997 position:50%
I can inspect the UI hierarchy
of my app.


383
00:17:10,997 --> 00:17:15,368 line:0
This will make fixing UI test
failures a whole lot easier.


384
00:17:15,368 --> 00:17:17,336 line:0
For an in-depth study,
watch the session


385
00:17:17,336 --> 00:17:19,906 line:0
"Fix failures faster
with Xcode test reports"


386
00:17:19,906 --> 00:17:21,040 line:0
to learn more.


387
00:17:21.040 --> 00:17:23.943 line:-1 position:50%
Now back to Ryan
so we can talk about debugging.


388
00:17:23,943 --> 00:17:25,945 line:-1
Ryan: Testing and debugging
go hand in hand.


389
00:17:25.945 --> 00:17:28.314 line:-1 position:50%
They are both about crafting
a high-quality app.


390
00:17:28,314 --> 00:17:30,550 line:-1
And debugging also gets some
great improvements this year,


391
00:17:30,550 --> 00:17:33,352 line:-1
starting with OSLog integration
into Xcode.


392
00:17:33,352 --> 00:17:36,923 line:-1
OSLog is a great tool for
capturing runtime information.


393
00:17:36,923 --> 00:17:39,425 line:-1
It provides a structured and
customizable logging mechanism


394
00:17:39,425 --> 00:17:41,761 line:-1
that keeps your log output
organized.


395
00:17:41,761 --> 00:17:43,195 line:-1
And Xcode 15's console


396
00:17:43,195 --> 00:17:45,598 line:-1
introduces full support
for OSLog,


397
00:17:45,598 --> 00:17:48,701 line:-1
including the ability to perform
complex filtering on log data,


398
00:17:48.701 --> 00:17:52.371 line:-1 position:50%
like subsystem category
and severity.


399
00:17:52,371 --> 00:17:54,840 position:50%
The presentation of the logs
is cleaner than ever.


400
00:17:54,840 --> 00:17:56,442 position:50%
The focus is on
your log content,


401
00:17:56,442 --> 00:17:59,879 line:0
with extra data
neatly hidden away.


402
00:17:59,879 --> 00:18:02,949 line:0
The background color of each log
entry indicates its severity,


403
00:18:02,949 --> 00:18:05,384 line:0
making it easy to scan
long streams of log output


404
00:18:05,384 --> 00:18:08,220 line:0
for critical messages.


405
00:18:08,220 --> 00:18:10,389 line:0
And while the metadata fields
are hidden by default,


406
00:18:10,389 --> 00:18:12,091 line:0
they're just a couple
of clicks away.


407
00:18:12,091 --> 00:18:15,761 line:0
You can choose just
the fields you want to see.


408
00:18:15,761 --> 00:18:17,663 line:0
And when you're looking
for something specific,


409
00:18:17,663 --> 00:18:19,899 line:0
the filter field lets you narrow
your search.


410
00:18:19,899 --> 00:18:24,103 position:50%
You can filter on the metadata
or on the full text of the log.


411
00:18:24,103 --> 00:18:25,438 line:0
And a feature
that I really like,


412
00:18:25,438 --> 00:18:26,739 line:0
you can jump from a log entry


413
00:18:26,739 --> 00:18:30,376 line:0
directly back to the line
of code that created it.


414
00:18:30,376 --> 00:18:32,745 line:0
We do a deep dive into these
logging features in the session


415
00:18:32,745 --> 00:18:35,781 position:50%
"Debug with structured logging".


416
00:18:35.781 --> 00:18:38.384 line:-1 position:50%
Lastly, let's talk
about distribution.


417
00:18:38.384 --> 00:18:41.053 line:-1 position:50%
Distribution is about getting
your app out into the world,


418
00:18:41,053 --> 00:18:43,089 line:-1
to your teammates,
to your beta testers,


419
00:18:43,089 --> 00:18:44,824 line:-1
and to your users.


420
00:18:44,824 --> 00:18:46,258 line:-1
And Xcode 15 has
some improvements


421
00:18:46.258 --> 00:18:48.995 line:-1 position:50%
to make this process
easier and safer.


422
00:18:48.995 --> 00:18:51.330 line:-1 position:50%
Let's start with Xcode Cloud.


423
00:18:51.330 --> 00:18:54.233 line:-1 position:50%
Xcode Cloud is a great way
to distribute your app.


424
00:18:54,233 --> 00:18:56,902 line:-1
It manages things like build
versioning, app signing,


425
00:18:56,902 --> 00:19:00,406 line:-1
and the distribution profile
for you automatically.


426
00:19:00,406 --> 00:19:03,509 line:-1
This year, Xcode Cloud handles
two more details for you.


427
00:19:03,509 --> 00:19:06,612 line:-1
First, TestFlight test details.


428
00:19:06.612 --> 00:19:08.881 line:-1 position:50%
Xcode Cloud adds support
for including test notes


429
00:19:08.881 --> 00:19:11.050 line:-1 position:50%
right alongside
your source code.


430
00:19:11.050 --> 00:19:12.351 line:-1 position:50%
These will be
automatically attached


431
00:19:12.351 --> 00:19:14.320 line:-1 position:50%
to the TestFlight build
for distribution,


432
00:19:14.320 --> 00:19:15.888 line:-1 position:50%
and so the notes will
appear to your testers


433
00:19:15.888 --> 00:19:18.257 line:-1 position:50%
right alongside your app.


434
00:19:18.257 --> 00:19:20.326 line:-1 position:50%
And secondly,
Xcode Cloud now supports


435
00:19:20,326 --> 00:19:22,595 line:-1
notarization for your Mac apps.


436
00:19:22,595 --> 00:19:24,697 line:-1
All you need to do is add
the notarization post action


437
00:19:24.697 --> 00:19:28.367 line:-1 position:50%
in your workflow, and Xcode
Cloud will do the rest.


438
00:19:28.367 --> 00:19:29.602 line:-1 position:50%
When your build is complete,


439
00:19:29,602 --> 00:19:32,004 line:-1
your app will be automatically
notarized and stapled,


440
00:19:32.004 --> 00:19:34.540 line:-1 position:50%
and be ready to download.


441
00:19:34.540 --> 00:19:36.976 line:-1 position:50%
Notarizing your app
is vital for your users.


442
00:19:36,976 --> 00:19:39,478 line:-1
It lets them know that your app
hasn't been tampered with.


443
00:19:39,478 --> 00:19:41,747 line:-1
But it's just as important that
you can trust the integrity


444
00:19:41.747 --> 00:19:45.284 line:-1 position:50%
of the SDKs and frameworks
that you depend on.


445
00:19:45,284 --> 00:19:47,553 line:-1
To provide this assurance,
Xcode introduces


446
00:19:47,553 --> 00:19:50,589 line:-1
signature verification
for XCFrameworks.


447
00:19:50.589 --> 00:19:52.992 line:-1 position:50%
Authors can digitally sign the
contents of their frameworks,


448
00:19:52,992 --> 00:19:56,495 line:-1
and you can verify these
signatures right in Xcode.


449
00:19:56,495 --> 00:19:59,398 line:-1
The framework inspector
has a new signature slice.


450
00:19:59,398 --> 00:20:01,300 line:-1
It tells you exactly
who produced and signed


451
00:20:01,300 --> 00:20:02,768 line:-1
the framework.


452
00:20:02,768 --> 00:20:04,937 line:-1
And Xcode will
remember this identity.


453
00:20:04.937 --> 00:20:07.139 line:-1 position:50%
So if it ever changes
when updating the framework,


454
00:20:07,139 --> 00:20:09,208 line:-1
you get a clear warning
about the problem,


455
00:20:09.208 --> 00:20:12.945 line:-1 position:50%
but there's more to it
than that.


456
00:20:12.945 --> 00:20:14.780 line:-1 position:50%
Authors can now include
a privacy manifest


457
00:20:14.780 --> 00:20:16.649 line:-1 position:50%
in their framework.


458
00:20:16,649 --> 00:20:18,684 line:-1
This manifest details exactly
how the framework


459
00:20:18.684 --> 00:20:21.353 line:-1 position:50%
uses and protects
sensitive data.


460
00:20:21.353 --> 00:20:23.856 line:-1 position:50%
Since the privacy manifest
is bundled with the framework,


461
00:20:23,856 --> 00:20:25,825 line:-1
it is also part of
the signed package,


462
00:20:25.825 --> 00:20:27.193 line:-1 position:50%
and you can trust
that its contents


463
00:20:27,193 --> 00:20:29,161 line:-1
came directly from the author.


464
00:20:29.161 --> 00:20:31.197 line:-1 position:50%
I can use Xcode to summarize
all of the manifests


465
00:20:31,197 --> 00:20:34,767 line:-1
into a complete privacy report
for my app.


466
00:20:34,767 --> 00:20:36,902 line:-1
Here's a report
that I've generated.


467
00:20:36.902 --> 00:20:38.370 line:-1 position:50%
This report is designed
to make it easy


468
00:20:38,370 --> 00:20:41,407 line:-1
to fill in the privacy nutrition
label in App Store Connect,


469
00:20:41,407 --> 00:20:44,877 line:-1
making sure I provide accurate
information to my users.


470
00:20:44,877 --> 00:20:47,313 line:-1
And Apple is working with
privacy-impacting SDKs


471
00:20:47.313 --> 00:20:49.081 line:-1 position:50%
to ensure that all of
your critical dependencies


472
00:20:49.081 --> 00:20:52.418 line:-1 position:50%
provide this valuable
information.


473
00:20:52,418 --> 00:20:54,887 line:0
We cover these topics in a lot
more depth in the sessions


474
00:20:54,887 --> 00:20:57,456 position:50%
"Verify app dependencies
with digital signatures"


475
00:20:57,456 --> 00:21:00,192 position:50%
and "Get started with
privacy manifests".


476
00:21:00.192 --> 00:21:01.894 line:-1 position:50%
Privacy manifests
are a great tool


477
00:21:01.894 --> 00:21:04.096 line:-1 position:50%
when distributing
your app to your users.


478
00:21:04,096 --> 00:21:07,066 line:-1
When you're working on a bug fix
or a new feature branch,


479
00:21:07.066 --> 00:21:09.101 line:-1 position:50%
you want to distribute
your app to your teammates


480
00:21:09.101 --> 00:21:10.936 line:-1 position:50%
and only your teammates.


481
00:21:10,936 --> 00:21:12,471 line:-1
So Xcode 15 now supports


482
00:21:12.471 --> 00:21:15.508 line:-1 position:50%
the TestFlight internal
testing distribution option.


483
00:21:15.508 --> 00:21:18.744 line:-1 position:50%
TestFlight internal builds
are available to your team only,


484
00:21:18.744 --> 00:21:21.747 line:-1 position:50%
so you can never accidentally
release them to customers.


485
00:21:21,747 --> 00:21:23,215 line:-1
They're easy to create.


486
00:21:23,215 --> 00:21:25,251 line:-1
Just select the "TestFlight
internal testing" option


487
00:21:25,251 --> 00:21:28,354 line:-1
when distributing your app
through App Store Connect.


488
00:21:30.556 --> 00:21:32.758 line:-1 position:50%
But it's actually
even easier than this.


489
00:21:32,758 --> 00:21:35,461 line:-1
Xcode now bundles a set of the
most common distribution methods


490
00:21:35.461 --> 00:21:37.129 line:-1 position:50%
and recommended settings.


491
00:21:37,129 --> 00:21:39,198 line:-1
Step one, select any
of these new options,


492
00:21:39,198 --> 00:21:40,999 line:-1
including
TestFlight internal only.


493
00:21:40.999 --> 00:21:43.602 line:-1 position:50%
Step two, click Distribute
and you're done.


494
00:21:43,602 --> 00:21:46,338 line:-1
There is no step three.


495
00:21:46,338 --> 00:21:48,274 line:-1
And if you're distributing
through App Store Connect,


496
00:21:48,274 --> 00:21:50,276 line:-1
you will also now get
desktop notifications


497
00:21:50.276 --> 00:21:52.111 line:-1 position:50%
about your build status.


498
00:21:52.111 --> 00:21:53.579 line:-1 position:50%
So when your app
is ready to test,


499
00:21:53,579 --> 00:21:55,581 line:-1
you'll be notified right away.


500
00:21:55,581 --> 00:21:57,149 line:-1
These updates make it easy
to iterate


501
00:21:57.149 --> 00:21:58.784 line:-1 position:50%
and distribute your app quickly,


502
00:21:58,784 --> 00:22:00,452 line:-1
which makes working closely
with your teammates,


503
00:22:00.452 --> 00:22:03.556 line:-1 position:50%
testers, and users
smooth and fast.


504
00:22:03,556 --> 00:22:06,125 line:0
Start exploring these features
by having a look at the session


505
00:22:06,125 --> 00:22:09,795 line:0
"Simplify distribution with
Xcode and Xcode Cloud".


506
00:22:09,795 --> 00:22:12,831 line:-1
Well, that was a quick overview
of what's new in Xcode 15.


507
00:22:12.831 --> 00:22:14.833 line:-1 position:50%
It is easier to get,
faster to use,


508
00:22:14,833 --> 00:22:16,168 line:-1
and has a ton of improvements


509
00:22:16,168 --> 00:22:19,405 line:-1
to make your development
more focused, smooth, and fun.


510
00:22:19,405 --> 00:22:21,006 line:-1
Shilpa: Go download Xcode 15


511
00:22:21,006 --> 00:22:23,542 line:-1
so you can start trying out
these cool new features.


512
00:22:23,542 --> 00:22:25,344 line:-1
Thanks for watching.


513
00:22:25,344 --> 00:22:28,781 size:2% line:0 align:right
♪

