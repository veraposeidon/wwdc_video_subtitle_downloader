2
00:00:00.000 --> 00:00:03.904 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:03,904 --> 00:00:10,143 line:0 position:90% size:2%
♪


4
00:00:10.143 --> 00:00:11.879 line:-1 position:50%
Raffael Hannemann:
Hello, and welcome to


5
00:00:11.879 --> 00:00:14.615 line:-1 position:50%
Go Beyond the Window
with SwiftUI.


6
00:00:14.615 --> 00:00:17.384 line:-1 position:50%
I'm Raffa,
and I'm an engineer at Apple,


7
00:00:17.384 --> 00:00:20.020 line:-1 position:50%
and I'm later joined
by my colleague Mark.


8
00:00:20.020 --> 00:00:23.590 line:-1 position:50%
Today, we're going to show you
how easy it is to leverage


9
00:00:23.590 --> 00:00:28.228 line:-1 position:50%
the full power of xrOS to create
truly immersive experiences


10
00:00:28.228 --> 00:00:31.999 line:-1 position:50%
with the tools and frameworks
you already know.


11
00:00:33.133 --> 00:00:36.069 line:-1 position:50%
You may already be familiar
with augmented reality


12
00:00:36.069 --> 00:00:39.740 line:-1 position:50%
from developing AR apps for iOS.


13
00:00:39.740 --> 00:00:41.208 line:-1 position:50%
In the past few years,


14
00:00:41.208 --> 00:00:44.711 line:-1 position:50%
we've introduced and extended a
number of tools and frameworks,


15
00:00:44.711 --> 00:00:50.017 line:-1 position:50%
including ARKit and RealityKit,
for creating rich AR apps


16
00:00:50.017 --> 00:00:52.853 line:-1 position:50%
for iPhone and iPad.


17
00:00:52.853 --> 00:00:56.623 line:-1 position:50%
These apps allow you to blur
the line between the real world


18
00:00:56.623 --> 00:01:00.327 line:-1 position:50%
and your imagination by
augmenting the user surroundings


19
00:01:00.327 --> 00:01:05.132 line:-1 position:50%
with interactive user interfaces
and virtual objects.


20
00:01:05.132 --> 00:01:07.834 line:-1 position:50%
This year,
with the launch of xrOS,


21
00:01:07.834 --> 00:01:11.905 line:-1 position:50%
we are bringing AR
to a whole new level,


22
00:01:11.905 --> 00:01:15.575 line:-1 position:50%
starting with
immersive experiences.


23
00:01:15.575 --> 00:01:19.446 line:-1 position:50%
In these experiences,
your application displays UI,


24
00:01:19.446 --> 00:01:22.449 line:-1 position:50%
including windows and
three-dimensional content


25
00:01:22.449 --> 00:01:24.518 line:-1 position:50%
anywhere around you.


26
00:01:24.518 --> 00:01:26.586 line:-1 position:50%
The surroundings remain visible


27
00:01:26.586 --> 00:01:29.756 line:-1 position:50%
and, in fact, even become
part of the experience.


28
00:01:29.756 --> 00:01:33.460 line:-1 position:50%
You can anchor elements
of your app to surfaces


29
00:01:33.460 --> 00:01:35.595 line:-1 position:50%
and augment and enrich
the real world


30
00:01:35.595 --> 00:01:39.166 line:-1 position:50%
with virtual objects
and effects.


31
00:01:39.166 --> 00:01:42.402 line:-1 position:50%
And then there are fully
immersive experiences,


32
00:01:42.402 --> 00:01:46.740 line:-1 position:50%
which go one step further
and cover your entire space.


33
00:01:46.740 --> 00:01:49.943 line:-1 position:50%
Your app takes complete control
over what you see.


34
00:01:49.943 --> 00:01:53.380 line:-1 position:50%
Think about all the
possibilities this will unlock.


35
00:01:53.380 --> 00:01:56.516 line:-1 position:50%
And the best of all,
all of this is possible


36
00:01:56.516 --> 00:01:59.586 line:-1 position:50%
with the tools, frameworks,
and patterns


37
00:01:59.586 --> 00:02:01.855 line:-1 position:50%
that you are already
familiar with.


38
00:02:01.855 --> 00:02:06.193 line:-1 position:50%
And at the core of this
is SwiftUI's Immersive Space.


39
00:02:06.193 --> 00:02:08.428 line:-1 position:50%
Let's get started.


40
00:02:08,428 --> 00:02:11,398 position:50%
In the other sessions,
you've learned that this year,


41
00:02:11,398 --> 00:02:14,835 position:50%
we are adding the third
dimension to SwiftUI.


42
00:02:14,835 --> 00:02:19,172 position:50%
You can present windows
and volumes on xrOS


43
00:02:19,172 --> 00:02:22,609 position:50%
and display three-dimensional
user interface elements


44
00:02:22,609 --> 00:02:27,714 position:50%
with the easy-to-use
declarative patterns of SwiftUI.


45
00:02:27.714 --> 00:02:31.785 line:-1 position:50%
Both windows and volumes
let you display content


46
00:02:31.785 --> 00:02:33.720 line:-1 position:50%
within their bounds.


47
00:02:33.720 --> 00:02:38.091 line:-1 position:50%
So what if you want to make
the most of the infinite space


48
00:02:38.091 --> 00:02:43.897 line:-1 position:50%
that xrOS offers and create
a truly immersive experience?


49
00:02:43.897 --> 00:02:47.868 line:-1 position:50%
You may want to place your items
beyond the window's bounds


50
00:02:47.868 --> 00:02:51.471 line:-1 position:50%
all around your head and be
right in the middle of it.


51
00:02:51.471 --> 00:02:55.575 line:-1 position:50%
And this is what
we've designed Space for.


52
00:02:55.575 --> 00:03:00.180 line:-1 position:50%
Next to windows and volumes,
spaces are a kind of container


53
00:03:00.180 --> 00:03:04.584 line:-1 position:50%
to present your
user interface on xrOS.


54
00:03:04.584 --> 00:03:07.287 line:-1 position:50%
In this session,
we'll focus on Spaces


55
00:03:07.287 --> 00:03:10.690 line:-1 position:50%
and how you can use them
to create immersive experiences.


56
00:03:10.690 --> 00:03:12.959 line:-1 position:50%
Let's first get started
with Space


57
00:03:12.959 --> 00:03:16.463 line:-1 position:50%
and learn how to display
your content.


58
00:03:16.463 --> 00:03:19.533 line:-1 position:50%
Mark will then show you
how you manage your Space,


59
00:03:19.533 --> 00:03:21.835 line:-1 position:50%
launch directly into a Space,


60
00:03:21.835 --> 00:03:23.837 line:-1 position:50%
and explain
all the customizations


61
00:03:23.837 --> 00:03:26.506 line:-1 position:50%
that Spaces allow.


62
00:03:26.506 --> 00:03:30.043 line:-1 position:50%
So let's get started
and check out some code.


63
00:03:30.043 --> 00:03:33.513 line:-1 position:50%
I am really excited
about space exploration.


64
00:03:33.513 --> 00:03:36.283 line:-1 position:50%
To continue the World app
that we've been working on


65
00:03:36.283 --> 00:03:37.651 line:-1 position:50%
in the other sessions,


66
00:03:37.651 --> 00:03:40.253 line:-1 position:50%
we're going to extend
the app step-by-step


67
00:03:40.253 --> 00:03:44.791 line:-1 position:50%
with a space that lets us
explore our solar system.


68
00:03:44.791 --> 00:03:49.696 line:-1 position:50%
Spaces are a new scene type in
SwiftUI called Immersive Space.


69
00:03:49.696 --> 00:03:52.165 line:-1 position:50%
As you would do
with other scene types,


70
00:03:52.165 --> 00:03:54.568 line:-1 position:50%
you define an Immersive Space
in your app


71
00:03:54.568 --> 00:03:58.572 line:-1 position:50%
and can then open
and dismiss it at any time.


72
00:03:58.572 --> 00:03:59.973 line:-1 position:50%
You can make your whole app


73
00:03:59.973 --> 00:04:02.209 line:-1 position:50%
consist of only one single
Space,


74
00:04:02.209 --> 00:04:04.711 line:-1 position:50%
but you can also extend
your existing app


75
00:04:04.711 --> 00:04:06.947 line:-1 position:50%
by adding one or more Spaces


76
00:04:06.947 --> 00:04:09.816 line:-1 position:50%
next to your windows
and volumes.


77
00:04:09.816 --> 00:04:12.252 line:-1 position:50%
Your app can have one Space
open at the time.


78
00:04:12.252 --> 00:04:14.121 line:-1 position:50%
Before opening another Space,


79
00:04:14.121 --> 00:04:17.757 line:-1 position:50%
you first dismiss
the current one.


80
00:04:17.757 --> 00:04:20.627 line:-1 position:50%
And again, similarly
to other scene types,


81
00:04:20.627 --> 00:04:24.798 line:-1 position:50%
you place your view hierarchy
in the body of the scene.


82
00:04:24.798 --> 00:04:28.034 line:-1 position:50%
By placing our SolarSystem
in the ImmersiveSpace,


83
00:04:28.034 --> 00:04:32.139 line:-1 position:50%
it will be rendered without
any clipping boundaries.


84
00:04:32.139 --> 00:04:36.276 line:-1 position:50%
Let's just take a moment
and point out how easy this is.


85
00:04:36.276 --> 00:04:38.044 line:-1 position:50%
With just these three lines,


86
00:04:38.044 --> 00:04:40.113 line:-1 position:50%
we've brought
our solar system view


87
00:04:40.113 --> 00:04:44.684 line:-1 position:50%
into a rich,
immersive experience.


88
00:04:44.684 --> 00:04:46.853 line:-1 position:50%
Let's dive into the details.


89
00:04:46.853 --> 00:04:50.357 line:-1 position:50%
Having a Space open enables
a couple of special behaviors


90
00:04:50.357 --> 00:04:54.794 line:-1 position:50%
that make this scene stand out
from the other scene types.


91
00:04:54.794 --> 00:04:57.664 line:-1 position:50%
When multiple apps
are running side by side,


92
00:04:57.664 --> 00:05:00.467 line:-1 position:50%
they are all displayed
together in the same space,


93
00:05:00.467 --> 00:05:04.604 line:-1 position:50%
which is why we are calling
this the shared space.


94
00:05:04.604 --> 00:05:07.574 line:-1 position:50%
Once your app displays
an Immersive Space scene,


95
00:05:07.574 --> 00:05:11.378 line:-1 position:50%
your app enters
what we call a Full Space.


96
00:05:11.378 --> 00:05:15.048 line:-1 position:50%
Your app will then be the
only one visible to the user.


97
00:05:15.048 --> 00:05:17.417 line:-1 position:50%
All other applications
will go away


98
00:05:17.417 --> 00:05:19.986 line:-1 position:50%
to make room
for your content to appear


99
00:05:19.986 --> 00:05:22.656 line:-1 position:50%
without any distractions.


100
00:05:22.656 --> 00:05:25.158 line:-1 position:50%
Later, once you dismiss
your space,


101
00:05:25.158 --> 00:05:27.761 line:-1 position:50%
the other apps will reappear.


102
00:05:27.761 --> 00:05:29.930 line:-1 position:50%
Since Immersive Space
is a scene,


103
00:05:29.930 --> 00:05:33.533 line:-1 position:50%
it implicitly defines
its own coordinate system.


104
00:05:33.533 --> 00:05:35.869 line:-1 position:50%
So everything that
you place in a Space


105
00:05:35.869 --> 00:05:40.774 line:-1 position:50%
is positioned relatively
to the space's own origin.


106
00:05:40.774 --> 00:05:43.643 line:-1 position:50%
And the origin of a Space
is below the user,


107
00:05:43.643 --> 00:05:48.215 line:-1 position:50%
close to the user's feet
when the Space is first opened.


108
00:05:48.215 --> 00:05:50.350 line:-1 position:50%
So now you know the basics.


109
00:05:50.350 --> 00:05:51.384 line:-1 position:50%
Let's move on


110
00:05:51.384 --> 00:05:54.788 line:-1 position:50%
and talk about how you display
the content of your Space.


111
00:05:54.788 --> 00:05:57.390 line:-1 position:50%
ImmersiveSpace is a scene type,


112
00:05:57.390 --> 00:06:01.027 line:-1 position:50%
so you place your
view hierarchy right in it.


113
00:06:01.027 --> 00:06:03.697 line:-1 position:50%
An ImmersiveSpace
can take any Swift UI view,


114
00:06:03.697 --> 00:06:06.199 line:-1 position:50%
and while it doesn't have
any clipping bounds,


115
00:06:06.199 --> 00:06:08.602 line:-1 position:50%
a Space still lays out
its content


116
00:06:08.602 --> 00:06:11.037 line:-1 position:50%
within its layout bounds.


117
00:06:11.037 --> 00:06:13.240 line:-1 position:50%
Anything you place
in the Space


118
00:06:13.240 --> 00:06:18.612 line:-1 position:50%
uses the same layout system that
you are already familiar with.


119
00:06:18.612 --> 00:06:21.982 line:-1 position:50%
But since the origin of your
Space is near the user's feet,


120
00:06:21.982 --> 00:06:25.652 line:-1 position:50%
you probably don't just want
to put your content down there.


121
00:06:25.652 --> 00:06:29.122 line:-1 position:50%
Let's talk about RealityView.


122
00:06:29.122 --> 00:06:34.294 line:-1 position:50%
If you want to make the most of
SwiftUI, ARKit, and RealityKit,


123
00:06:34.294 --> 00:06:37.197 line:-1 position:50%
we encourage you
to use ImmersiveSpace


124
00:06:37.197 --> 00:06:38.965 line:-1 position:50%
together with
the powerful features


125
00:06:38.965 --> 00:06:41.601 line:-1 position:50%
of the new RealityView.


126
00:06:41.601 --> 00:06:44.771 line:-1 position:50%
ImmersiveSpace and RealityView
go hand-in-hand,


127
00:06:44.771 --> 00:06:47.140 line:-1 position:50%
and were specifically
designed together


128
00:06:47.140 --> 00:06:49.276 line:-1 position:50%
to provide all the features
you need


129
00:06:49.276 --> 00:06:53.580 line:-1 position:50%
for building great
immersive experiences.


130
00:06:53.580 --> 00:06:56.950 line:-1 position:50%
For example, RealityView
comes with built-in support


131
00:06:56.950 --> 00:06:59.085 line:-1 position:50%
for asynchronous
loading of assets,


132
00:06:59.085 --> 00:07:05.425 line:-1 position:50%
as shown here, for loading
and displaying a star field.


133
00:07:05.425 --> 00:07:07.260 line:-1 position:50%
But next to
asynchronous loading,


134
00:07:07.260 --> 00:07:10.130 line:-1 position:50%
putting a RealityView
in an Immersive Space scene


135
00:07:10.130 --> 00:07:11.998 line:-1 position:50%
allows a lot more.


136
00:07:11.998 --> 00:07:16.303 line:-1 position:50%
Place elements within your
RealityView on ARKit anchors.


137
00:07:16.303 --> 00:07:20.173 line:-1 position:50%
And since your app gains access
to hands and head-pose data,


138
00:07:20.173 --> 00:07:21.708 line:-1 position:50%
while a Space is open,


139
00:07:21.708 --> 00:07:24.577 line:-1 position:50%
you can use that data
to position your entities


140
00:07:24.577 --> 00:07:26.513 line:-1 position:50%
within a RealityView.


141
00:07:26.513 --> 00:07:29.749 line:-1 position:50%
Mark will show you
something cool later.


142
00:07:29.749 --> 00:07:32.118 line:-1 position:50%
A note about coordinate Spaces.


143
00:07:32.118 --> 00:07:36.323 line:-1 position:50%
RealityView uses RealityKit
for displaying its content.


144
00:07:36.323 --> 00:07:39.693 line:-1 position:50%
So when positioning entities
within a RealityView,


145
00:07:39.693 --> 00:07:42.329 line:-1 position:50%
keep in mind that the coordinate
Space orientation


146
00:07:42.329 --> 00:07:45.832 line:-1 position:50%
is different than
in SwiftUI's layout system.


147
00:07:45.832 --> 00:07:49.169 line:-1 position:50%
In SwiftUI,
the y-axis points downwards


148
00:07:49.169 --> 00:07:52.672 line:-1 position:50%
and the z-axis
points towards you.


149
00:07:52.672 --> 00:07:55.208 line:-1 position:50%
This applies to windows,
volumes,


150
00:07:55.208 --> 00:07:58.111 line:-1 position:50%
and to Immersive Spaces,


151
00:07:58.111 --> 00:08:04.517 line:-1 position:50%
whereas in RealityKit,
the y-axis points upwards.


152
00:08:04.517 --> 00:08:07.454 line:-1 position:50%
There is a lot to cover
about RealityView.


153
00:08:07,454 --> 00:08:11,391 position:50%
Make sure you add "Build spatial
experiences with RealityKit"


154
00:08:11,391 --> 00:08:14,527 position:50%
to your watchlist
for all the details.


155
00:08:14.527 --> 00:08:17.397 line:-1 position:50%
Now let's write some code.


156
00:08:17.397 --> 00:08:19.199 line:-1 position:50%
We're going to use the WorldApp,


157
00:08:19.199 --> 00:08:21.234 line:-1 position:50%
or at least
a simplified version of it,


158
00:08:21.234 --> 00:08:25.338 line:-1 position:50%
and add an immersive
solar system to it step by step.


159
00:08:25.338 --> 00:08:28.575 line:-1 position:50%
We start by defining
an ImmersiveSpace.


160
00:08:28.575 --> 00:08:30.377 line:-1 position:50%
Similarly to WindowGroup,


161
00:08:30.377 --> 00:08:34.647 line:-1 position:50%
you can assign an identifier,
a value type, or both.


162
00:08:34.647 --> 00:08:38.385 line:-1 position:50%
In this case, we assign
the solar identifier.


163
00:08:38.385 --> 00:08:42.756 line:-1 position:50%
We will use this identifier
later to open the Space.


164
00:08:42.756 --> 00:08:47.260 line:-1 position:50%
We then place a SolarSystem view
into the Space.


165
00:08:47.260 --> 00:08:50.730 line:-1 position:50%
Let's also define a simple
standard window for our app,


166
00:08:50.730 --> 00:08:53.099 line:-1 position:50%
which we want to show up
when the app launches


167
00:08:53.099 --> 00:08:56.536 line:-1 position:50%
with a control to view
our solar system.


168
00:08:56.536 --> 00:09:00.507 line:-1 position:50%
This is similar
to what the World app does.


169
00:09:00.507 --> 00:09:04.677 line:-1 position:50%
So we define a new launch window
using a WindowGroup,


170
00:09:04.677 --> 00:09:06.479 line:-1 position:50%
and we add some information


171
00:09:06.479 --> 00:09:10.884 line:-1 position:50%
together with a control that
will allow us to open our Space.


172
00:09:10.884 --> 00:09:13.019 line:-1 position:50%
That control is just a button.


173
00:09:13.019 --> 00:09:14.053 line:-1 position:50%
When clicking it,


174
00:09:14.053 --> 00:09:18.291 line:-1 position:50%
we want to change its title
and open our Space.


175
00:09:18.291 --> 00:09:20.226 line:-1 position:50%
For controlling windows,


176
00:09:20.226 --> 00:09:22.395 line:-1 position:50%
SwiftUI provides the openWindow


177
00:09:22.395 --> 00:09:25.432 line:-1 position:50%
and dismissWindow
environment actions.


178
00:09:25.432 --> 00:09:26.800 line:-1 position:50%
And for Immersive Space,


179
00:09:26.800 --> 00:09:29.669 line:-1 position:50%
we are adding the new
openImmersiveSpace


180
00:09:29.669 --> 00:09:33.907 line:-1 position:50%
and dismissImmersiveSpace
actions.


181
00:09:33.907 --> 00:09:40.013 line:-1 position:50%
We obtain the two actions
from the environment.


182
00:09:40.013 --> 00:09:46.186 line:-1 position:50%
We can then use these actions
when the button is invoked.


183
00:09:46.186 --> 00:09:47.687 line:-1 position:50%
When opening the Space,


184
00:09:47.687 --> 00:09:51.858 line:-1 position:50%
we pass in the identifier
we defined earlier.


185
00:09:51.858 --> 00:09:54.394 line:-1 position:50%
Since only one Space
can be open at a time,


186
00:09:54.394 --> 00:09:59.132 line:-1 position:50%
the dismissImmersiveSpace action
doesn't need any argument.


187
00:09:59.132 --> 00:10:01.668 line:-1 position:50%
The system animates
your Space in and out


188
00:10:01.668 --> 00:10:03.903 line:-1 position:50%
with a certain duration.


189
00:10:03.903 --> 00:10:06.105 line:-1 position:50%
These environment actions
are async


190
00:10:06.105 --> 00:10:11.811 line:-1 position:50%
so that you can react to the
completion of the animation.


191
00:10:11.811 --> 00:10:14.547 line:-1 position:50%
Opening an Immersive Space
may fail,


192
00:10:14.547 --> 00:10:17.784 line:-1 position:50%
and openImmersiveSpace
will tell you via its result


193
00:10:17.784 --> 00:10:20.920 line:-1 position:50%
whether the call failed
or succeeded.


194
00:10:20.920 --> 00:10:25.191 line:-1 position:50%
Make sure to have
proper error handling.


195
00:10:25.191 --> 00:10:28.461 line:-1 position:50%
Coming back to our app that
we defined at the beginning,


196
00:10:28.461 --> 00:10:32.732 line:-1 position:50%
we can now just add
our LaunchWindow right here.


197
00:10:32.732 --> 00:10:35.335 line:-1 position:50%
Notice the order
of our two scenes.


198
00:10:35.335 --> 00:10:38.204 line:-1 position:50%
The LaunchWindow is the first
in our list of scenes,


199
00:10:38.204 --> 00:10:40.707 line:-1 position:50%
so SwiftUI will display
the launch window


200
00:10:40.707 --> 00:10:43.042 line:-1 position:50%
when the app starts.


201
00:10:43.042 --> 00:10:45.512 line:-1 position:50%
The Immersive Space
won't be visible at launch,


202
00:10:45.512 --> 00:10:49.382 line:-1 position:50%
but will only show up once
the user clicks on our button.


203
00:10:49.382 --> 00:10:53.152 line:-1 position:50%
Let's run this on the simulator.


204
00:10:53.152 --> 00:10:56.489 line:-1 position:50%
When our app launches,
we get to see the launch window.


205
00:10:56.489 --> 00:10:58.691 line:-1 position:50%
And then with just a click
on our button,


206
00:10:58.691 --> 00:11:03.696 line:-1 position:50%
the solar system appears
right in our living room.


207
00:11:07.600 --> 00:11:09.702 line:-1 position:50%
So now we've defined
a multiscene app


208
00:11:09.702 --> 00:11:11.371 line:-1 position:50%
consisting of a standard window


209
00:11:11.371 --> 00:11:15.074 line:-1 position:50%
and a Space displaying
our solar system.


210
00:11:15.074 --> 00:11:18.044 line:-1 position:50%
You've seen the models
used in the World app.


211
00:11:18.044 --> 00:11:19.712 line:-1 position:50%
When building
your immersive app,


212
00:11:19.712 --> 00:11:22.649 line:-1 position:50%
you're surely going to want
to display some 3D assets


213
00:11:22.649 --> 00:11:25.485 line:-1 position:50%
with a lot of detail
in your Space.


214
00:11:25.485 --> 00:11:27.453 line:-1 position:50%
Keep in mind that
it may take some time


215
00:11:27.453 --> 00:11:29.622 line:-1 position:50%
for your assets
to be fully loaded


216
00:11:29.622 --> 00:11:33.159 line:-1 position:50%
and ready to be rendered
by your app.


217
00:11:33.159 --> 00:11:35.128 line:-1 position:50%
For the best user experience,


218
00:11:35.128 --> 00:11:40.233 line:-1 position:50%
make sure to leverage the new
Model3D and RealityView APIs,


219
00:11:40.233 --> 00:11:45.438 line:-1 position:50%
which load your 3D assets
asynchronously.


220
00:11:45.438 --> 00:11:47.273 line:-1 position:50%
In this code here,
we display a text


221
00:11:47.273 --> 00:11:49.208 line:-1 position:50%
while the model is still loading


222
00:11:49.208 --> 00:11:52.745 line:-1 position:50%
and an error in case
something went wrong.


223
00:11:52.745 --> 00:11:56.082 line:-1 position:50%
And now, Mark is going to tell
you how to manage your Space


224
00:11:56.082 --> 00:12:00.219 line:-1 position:50%
and even better,
how to launch into Space.


225
00:12:00.219 --> 00:12:01.521 line:-1 position:50%
Mark Ma: Thanks, Raffa.


226
00:12:01.521 --> 00:12:04.223 line:-1 position:50%
As we just demonstrated,
it was incredibly easy


227
00:12:04.223 --> 00:12:06.559 line:-1 position:50%
to integrate Immersive Spaces
into our World app


228
00:12:06.559 --> 00:12:09.495 line:-1 position:50%
with just a couple lines
of code.


229
00:12:09.495 --> 00:12:12.065 line:-1 position:50%
Transforming your app
into an immersive experience


230
00:12:12.065 --> 00:12:14.701 line:-1 position:50%
also involves managing
your Space alongside the system


231
00:12:14.701 --> 00:12:17.370 line:-1 position:50%
with scene phases,
coordinate convergence


232
00:12:17.370 --> 00:12:19.572 line:-1 position:50%
between your Space
and other scenes,


233
00:12:19.572 --> 00:12:22.008 line:-1 position:50%
and presenting it
with different styles.


234
00:12:22.008 --> 00:12:24.143 line:-1 position:50%
Similar to other
SwiftUI scene types,


235
00:12:24.143 --> 00:12:26.145 line:-1 position:50%
Immersive Space supports
the same scene phases


236
00:12:26.145 --> 00:12:28.147 line:-1 position:50%
which are handled by the system.


237
00:12:28.147 --> 00:12:29.916 line:-1 position:50%
This also means
your Space is always


238
00:12:29.916 --> 00:12:32.185 line:-1 position:50%
in one of SwiftUI's
scene phases.


239
00:12:32.185 --> 00:12:35.388 line:-1 position:50%
By opening the Space,
it moves it to the active phase.


240
00:12:35.388 --> 00:12:37.223 line:-1 position:50%
And at any point in time,
it may change it


241
00:12:37.223 --> 00:12:39.025 line:-1 position:50%
to the inactive phase.


242
00:12:39.025 --> 00:12:42.195 line:-1 position:50%
For example, if we step out
of the system-defined boundary


243
00:12:42.195 --> 00:12:44.764 line:-1 position:50%
or a system alert shows,
your Space and windows


244
00:12:44.764 --> 00:12:48.501 line:-1 position:50%
are hidden temporarily, moving
them to the inactive phase.


245
00:12:48.501 --> 00:12:50.670 line:-1 position:50%
Once the user re-enters
the experience,


246
00:12:50.670 --> 00:12:53.006 line:-1 position:50%
your Space and windows
will be made visible,


247
00:12:53.006 --> 00:12:56.142 line:-1 position:50%
updating their scene phase
to be active again.


248
00:12:56.142 --> 00:12:59.245 line:-1 position:50%
For our World app, we can add
a few quick lines of code


249
00:12:59.245 --> 00:13:01.814 line:-1 position:50%
to handle the
inactive scene phase.


250
00:13:01.814 --> 00:13:03.850 line:-1 position:50%
Let's scale down
our Earth model to half size


251
00:13:03.850 --> 00:13:07.220 line:-1 position:50%
to help indicate that the state
of the Space has changed.


252
00:13:07.220 --> 00:13:09.055 line:-1 position:50%
Let's also make sure that
we handle the active phase


253
00:13:09.055 --> 00:13:11.357 line:-1 position:50%
to restore the contents.


254
00:13:11.357 --> 00:13:13.893 line:-1 position:50%
And keep in mind, the Space
can be dismissed at any time


255
00:13:13.893 --> 00:13:16.629 line:-1 position:50%
by using hardware
or software means.


256
00:13:16.629 --> 00:13:19.832 line:-1 position:50%
So let's check this out
in the Simulator.


257
00:13:19.832 --> 00:13:21.267 line:-1 position:50%
We'll open up our Space


258
00:13:21.267 --> 00:13:24.704 line:-1 position:50%
and demonstrate how our app
handles the inactive phase.


259
00:13:24.704 --> 00:13:25.738 line:-1 position:50%
For example,


260
00:13:25.738 --> 00:13:30.143 line:-1 position:50%
this might be triggered
when an alert shows up.


261
00:13:30.143 --> 00:13:31.310 line:-1 position:50%
When the alert pops up,


262
00:13:31.310 --> 00:13:33.212 line:-1 position:50%
note that the Space content
changed in scale


263
00:13:33.212 --> 00:13:35.915 line:-1 position:50%
as a result of our
previous sample code.


264
00:13:35.915 --> 00:13:39.052 line:-1 position:50%
And when we dismissed the alert,
the Space scaled back,


265
00:13:39.052 --> 00:13:41.888 line:-1 position:50%
reacting to
the now active phase.


266
00:13:41.888 --> 00:13:44.557 line:-1 position:50%
SwiftUI makes handling
and animating these transitions


267
00:13:44.557 --> 00:13:48.227 line:-1 position:50%
really easy and convenient.


268
00:13:48.227 --> 00:13:50.963 line:-1 position:50%
Another great way to manage your
Space is by integrating content


269
00:13:50.963 --> 00:13:53.866 line:-1 position:50%
from your other windows
with your Space.


270
00:13:53.866 --> 00:13:56.135 line:-1 position:50%
For example, if you want
to reposition the earth model


271
00:13:56.135 --> 00:13:58.404 line:-1 position:50%
next to the main window,


272
00:13:58.404 --> 00:13:59.939 line:-1 position:50%
we'll need to know
the position of the window


273
00:13:59.939 --> 00:14:03.176 line:-1 position:50%
in our Immersive Space
coordinate system,


274
00:14:03.176 --> 00:14:07.547 line:-1 position:50%
but both objects define
their own coordinate systems.


275
00:14:07.547 --> 00:14:10.183 line:-1 position:50%
So to help resolve this,
SwiftUI provides


276
00:14:10.183 --> 00:14:15.455 line:-1 position:50%
a new coordinate Space
named Immersive Space.


277
00:14:15.455 --> 00:14:18.925 line:-1 position:50%
And that represents a coordinate
system of an Immersive Space.


278
00:14:18.925 --> 00:14:20.359 line:-1 position:50%
To access this
coordinate system,


279
00:14:20.359 --> 00:14:24.330 line:-1 position:50%
we encapsulate the window inside
a geometry reader to 3D context.


280
00:14:24.330 --> 00:14:25.898 line:-1 position:50%
Then by using the existing API


281
00:14:25.898 --> 00:14:28.568 line:-1 position:50%
that takes in a coordinate
space, like transform,


282
00:14:28.568 --> 00:14:30.336 line:-1 position:50%
and passing in the
Immersive Space type,


283
00:14:30.336 --> 00:14:34.073 line:-1 position:50%
we can get the proxy.transform
in the new coordinate system.


284
00:14:34.073 --> 00:14:35.174 line:-1 position:50%
Using this transform,


285
00:14:35.174 --> 00:14:37.543 line:-1 position:50%
we'll update the Earth's
position on tap.


286
00:14:37.543 --> 00:14:40.213 line:-1 position:50%
Let's run this on the simulator.


287
00:14:40.213 --> 00:14:42.548 line:-1 position:50%
We'll reopen our Space
so we'll have our earth


288
00:14:42.548 --> 00:14:44.817 line:-1 position:50%
and the main window visible.


289
00:14:44.817 --> 00:14:46.052 line:-1 position:50%
We've slightly shifted
the window


290
00:14:46.052 --> 00:14:49.322 line:-1 position:50%
and we want to reposition earth
right in front of it.


291
00:14:49.322 --> 00:14:50.623 line:-1 position:50%
Now when the earth
gets tapped,


292
00:14:50.623 --> 00:14:53.793 line:-1 position:50%
it'll get positioned
to where we expected.


293
00:14:53.793 --> 00:14:54.861 line:-1 position:50%
And with coordinate conversions,


294
00:14:54.861 --> 00:14:57.697 line:-1 position:50%
it's that easy to position our
content exactly where we want it


295
00:14:57.697 --> 00:15:01.901 line:-1 position:50%
and move assets between
the Space and the window.


296
00:15:01,901 --> 00:15:03,402 position:50%
Other times to
use coordinate conversions


297
00:15:03,402 --> 00:15:05,638 position:50%
would include Immersive Spaces
in SharePlay,


298
00:15:05,638 --> 00:15:07,640 position:50%
where we can manage
our content's  position


299
00:15:07,640 --> 00:15:10,343 position:50%
across not only
a private Immersive Space,


300
00:15:10,343 --> 00:15:13,780 position:50%
but also a group
Immersive Space.


301
00:15:13,780 --> 00:15:17,049 position:50%
If your app supports SharePlay
and group Immersive Spaces,


302
00:15:17,049 --> 00:15:19,252 position:50%
when other participants join,


303
00:15:19,252 --> 00:15:21,387 position:50%
the system may move
the origin of the space


304
00:15:21,387 --> 00:15:24,857 position:50%
to a shared location
defined by spatial templates.


305
00:15:24,857 --> 00:15:27,193 position:50%
For more information,
please check out the session,


306
00:15:27,193 --> 00:15:31,197 position:50%
"Build spatial SharePlay
experiences."


307
00:15:31.197 --> 00:15:33.566 line:-1 position:50%
Our World app
now handles scene phases


308
00:15:33.566 --> 00:15:36.469 line:-1 position:50%
and can combine content
from other windows,


309
00:15:36.469 --> 00:15:38.571 line:-1 position:50%
but we still have yet to use
the full capabilities


310
00:15:38.571 --> 00:15:40.273 line:-1 position:50%
that Space offers.


311
00:15:40.273 --> 00:15:41.941 line:-1 position:50%
We'll explore
immersion styles next


312
00:15:41.941 --> 00:15:44.911 line:-1 position:50%
to have them become
even more amazing.


313
00:15:44.911 --> 00:15:47.146 line:-1 position:50%
Immersion styles offers
different presentations


314
00:15:47.146 --> 00:15:50.650 line:-1 position:50%
of how your space content can
take over your surroundings.


315
00:15:50.650 --> 00:15:53.152 line:-1 position:50%
You can present your content
alongside a mixed style,


316
00:15:53.152 --> 00:15:55.154 line:-1 position:50%
a progressive style
online in front of you,


317
00:15:55.154 --> 00:15:58.324 line:-1 position:50%
or a full style that surrounds
you in all directions.


318
00:15:58.324 --> 00:16:02.261 line:-1 position:50%
Let's update our app to take
advantage of all these styles.


319
00:16:02.261 --> 00:16:03.396 line:-1 position:50%
Let's reopen our app again


320
00:16:03.396 --> 00:16:06.799 line:-1 position:50%
and go back to where we defined
an Immersive Space.


321
00:16:06.799 --> 00:16:08.734 line:-1 position:50%
Right now, the space presents
the solar system


322
00:16:08.734 --> 00:16:12.738 line:-1 position:50%
in a mixed immersion style,
which is the default one.


323
00:16:12.738 --> 00:16:16.375 line:-1 position:50%
It's easy to change the style
and also have it be dynamic.


324
00:16:16.375 --> 00:16:18.277 line:-1 position:50%
First, let's add
a new state variable


325
00:16:18.277 --> 00:16:21.113 line:-1 position:50%
of type ImmersionStyle
and assign a default value


326
00:16:21.113 --> 00:16:23.549 line:-1 position:50%
we want the Space to begin with.


327
00:16:23.549 --> 00:16:26.485 line:-1 position:50%
Let's keep the mixed style here.


328
00:16:26.485 --> 00:16:28.788 line:-1 position:50%
We then use the immersionStyle
scene modifier


329
00:16:28.788 --> 00:16:32.425 line:-1 position:50%
and define the list of styles
we want our Space to support.


330
00:16:32.425 --> 00:16:34.727 line:-1 position:50%
In order to have a reference
to the current style,


331
00:16:34.727 --> 00:16:38.731 line:-1 position:50%
we pass in our state variable
as a binding.


332
00:16:38.731 --> 00:16:40.833 line:-1 position:50%
If we pass the binding
to our solar system,


333
00:16:40.833 --> 00:16:42.468 line:-1 position:50%
we can also read
the current style


334
00:16:42.468 --> 00:16:46.772 line:-1 position:50%
and control it to transition
to any of the map styles.


335
00:16:46.772 --> 00:16:49.876 line:-1 position:50%
In this sample, we'll transition
on a magnification gesture


336
00:16:49.876 --> 00:16:52.044 line:-1 position:50%
so that as we scale up
the solar system,


337
00:16:52.044 --> 00:16:54.447 line:-1 position:50%
we'll go to a different style.


338
00:16:54.447 --> 00:16:57.416 line:-1 position:50%
So far, we've been running
our World app on the simulator


339
00:16:57.416 --> 00:16:58.851 line:-1 position:50%
to show you how easy it was


340
00:16:58.851 --> 00:17:01.287 line:-1 position:50%
to bring an
Immersive Space into it.


341
00:17:01.287 --> 00:17:02.855 line:-1 position:50%
But to get a really great sense


342
00:17:02.855 --> 00:17:05.157 line:-1 position:50%
of how these styles work
with our surroundings,


343
00:17:05.157 --> 00:17:07.860 line:-1 position:50%
let's run our experience
on a device.


344
00:17:07.860 --> 00:17:09.962 line:-1 position:50%
And later, we'll show you
even more customizations


345
00:17:09.962 --> 00:17:14.767 line:-1 position:50%
that really enhance
your on-device experience.


346
00:17:14.767 --> 00:17:16.869 line:-1 position:50%
You open the Space
in the default style,


347
00:17:16.869 --> 00:17:19.138 line:-1 position:50%
which results in the
mixed immersion style.


348
00:17:19.138 --> 00:17:20.940 line:-1 position:50%
This style is great,
but you might want


349
00:17:20.940 --> 00:17:22.708 line:-1 position:50%
to become a bit more
immersed in the content


350
00:17:22.708 --> 00:17:25.077 line:-1 position:50%
and maybe see some stars.


351
00:17:25.077 --> 00:17:27.380 line:-1 position:50%
So you can perform
the magnification gesture.


352
00:17:27.380 --> 00:17:28.814 line:-1 position:50%
And as the content grows bigger,


353
00:17:28.814 --> 00:17:32.985 line:-1 position:50%
eventually the Space transitions
into the progressive style.


354
00:17:32.985 --> 00:17:35.054 line:-1 position:50%
This style is the bridge between
a passthrough


355
00:17:35.054 --> 00:17:37.423 line:-1 position:50%
and fully immersive experience.


356
00:17:37.423 --> 00:17:39.292 line:-1 position:50%
It allows you to see the
Immersive Space content


357
00:17:39.292 --> 00:17:41.127 line:-1 position:50%
within the portal
that's in front of you,


358
00:17:41.127 --> 00:17:43.796 line:-1 position:50%
along with your surroundings.


359
00:17:43.796 --> 00:17:45.498 line:-1 position:50%
This style feels
pretty immersive,


360
00:17:45.498 --> 00:17:48.634 line:-1 position:50%
but also lets you be aware
of what surrounds you.


361
00:17:48.634 --> 00:17:50.937 line:-1 position:50%
This also means you can chat
with people nearby,


362
00:17:50.937 --> 00:17:52.838 line:-1 position:50%
know where to sit
to be comfortable,


363
00:17:52.838 --> 00:17:55.775 line:-1 position:50%
and even interact
with the surroundings.


364
00:17:55.775 --> 00:17:58.711 line:-1 position:50%
And once you're comfortable,
by turning the Digital Crown,


365
00:17:58.711 --> 00:18:01.948 line:-1 position:50%
you increase the immersion
of the style.


366
00:18:01.948 --> 00:18:03.249 line:-1 position:50%
Isn't that really cool?


367
00:18:03.249 --> 00:18:06.052 line:-1 position:50%
Now you're floating like
an astronaut in the galaxy.


368
00:18:06.052 --> 00:18:08.187 line:-1 position:50%
And if you want to see more
of your surroundings again,


369
00:18:08.187 --> 00:18:11.791 line:-1 position:50%
just turn the Digital Crown back
to decrease the immersion.


370
00:18:11.791 --> 00:18:14.660 line:-1 position:50%
This lets you quickly and easily
be in control


371
00:18:14.660 --> 00:18:16.028 line:-1 position:50%
of how immersive
the content will be


372
00:18:16.028 --> 00:18:18.597 line:-1 position:50%
within the progressive style.


373
00:18:18.597 --> 00:18:21.767 line:-1 position:50%
But perhaps you like to be
in full immersion all the time.


374
00:18:21.767 --> 00:18:23.903 line:-1 position:50%
This is great for experiences
that surround you


375
00:18:23.903 --> 00:18:27.606 line:-1 position:50%
or instantly transport you
to a whole different world.


376
00:18:27.606 --> 00:18:29.475 line:-1 position:50%
So far, you've learned
how easy it is


377
00:18:29.475 --> 00:18:32.611 line:-1 position:50%
to transition to different
styles based on gestures.


378
00:18:32.611 --> 00:18:34.780 line:-1 position:50%
Going to full immersion
is no different,


379
00:18:34.780 --> 00:18:36.983 line:-1 position:50%
and you'll experience that
as you scale up the Earth again


380
00:18:36.983 --> 00:18:41.287 line:-1 position:50%
to update the style binding.


381
00:18:41.287 --> 00:18:43.356 line:-1 position:50%
Notice how easy
and seemless it was


382
00:18:43.356 --> 00:18:46.559 line:-1 position:50%
to transition between
the different styles.


383
00:18:46.559 --> 00:18:48.928 line:-1 position:50%
Now the Space has
become fully immersive.


384
00:18:48.928 --> 00:18:53.699 line:-1 position:50%
And with SwiftUI, it only took
a couple lines of code.


385
00:18:53.699 --> 00:18:55.434 line:-1 position:50%
And by pressing
the Digital Crown,


386
00:18:55.434 --> 00:18:57.803 line:-1 position:50%
you can go back to passthrough
whenever you're ready


387
00:18:57.803 --> 00:19:00.006 line:-1 position:50%
to leave the experience.


388
00:19:05.344 --> 00:19:06.812 line:-1 position:50%
We've just demonstrated
different ways


389
00:19:06.812 --> 00:19:09.749 line:-1 position:50%
to manage your Space by reacting
to scene phase changes


390
00:19:09.749 --> 00:19:11.617 line:-1 position:50%
and controlling the style.


391
00:19:11.617 --> 00:19:13.386 line:-1 position:50%
Now let's add some
final enhancements


392
00:19:13.386 --> 00:19:17.289 line:-1 position:50%
to take our Space
to the next level.


393
00:19:17.289 --> 00:19:19.725 line:-1 position:50%
The spatial computing
capabilities on the device


394
00:19:19.725 --> 00:19:21.660 line:-1 position:50%
allows for your Space
to be easily enhanced


395
00:19:21.660 --> 00:19:24.764 line:-1 position:50%
to make it feel
even more exciting.


396
00:19:24.764 --> 00:19:26.432 line:-1 position:50%
So let's go over
a couple options,


397
00:19:26.432 --> 00:19:28.801 line:-1 position:50%
like launching
directly into a Space,


398
00:19:28.801 --> 00:19:30.736 line:-1 position:50%
adding effects
to the surroundings,


399
00:19:30.736 --> 00:19:33.672 line:-1 position:50%
and virtual hands.


400
00:19:33.672 --> 00:19:35.908 line:-1 position:50%
So far, our app allows us
to open a Space


401
00:19:35.908 --> 00:19:37.943 line:-1 position:50%
with a click of a button.


402
00:19:37.943 --> 00:19:39.979 line:-1 position:50%
But what if you want to launch
an immersive experience


403
00:19:39.979 --> 00:19:41.414 line:-1 position:50%
right when your app starts,


404
00:19:41.414 --> 00:19:44.917 line:-1 position:50%
like if you have
a fully immersive game?


405
00:19:44.917 --> 00:19:47.486 line:-1 position:50%
In order to launch directly
into an Immersive Space,


406
00:19:47.486 --> 00:19:50.823 line:-1 position:50%
you'll need to configure
the scene manifest for your app.


407
00:19:50.823 --> 00:19:53.059 line:-1 position:50%
Just set the ImmersiveSpace
application role


408
00:19:53.059 --> 00:19:55.428 line:-1 position:50%
and the immersion style.


409
00:19:55.428 --> 00:19:57.296 line:-1 position:50%
Attach your Space content
as you normally would,


410
00:19:57.296 --> 00:19:59.598 line:-1 position:50%
and it'll open right away.


411
00:19:59.598 --> 00:20:01.467 line:-1 position:50%
You can also have your app
go back to a window


412
00:20:01.467 --> 00:20:05.704 line:-1 position:50%
if the user chooses
to dismiss the Space.


413
00:20:05.704 --> 00:20:08.741 line:-1 position:50%
Next, the surrounding effects
preferences allows me


414
00:20:08.741 --> 00:20:10.910 line:-1 position:50%
to dim the passthrough
to have the Space content


415
00:20:10.910 --> 00:20:12.912 line:-1 position:50%
be in focus even more.


416
00:20:12.912 --> 00:20:14.580 line:-1 position:50%
We'd like to have our
surroundings be dimmed


417
00:20:14.580 --> 00:20:17.917 line:-1 position:50%
when the Space transitions
to the progressive style.


418
00:20:17.917 --> 00:20:19.452 line:-1 position:50%
We set the
preferredSurroundingEffects


419
00:20:19.452 --> 00:20:22.588 line:-1 position:50%
modifier to be dark, so when
the solar system appears,


420
00:20:22.588 --> 00:20:26.325 line:-1 position:50%
our surroundings will
automatically be dimmed.


421
00:20:26.325 --> 00:20:29.862 line:-1 position:50%
The upperLimbVisibility modifier
allows us to hide our hands


422
00:20:29.862 --> 00:20:31.897 line:-1 position:50%
while in a Space
that's fully immersive


423
00:20:31.897 --> 00:20:34.800 line:-1 position:50%
since no passthrough
is available.


424
00:20:34.800 --> 00:20:37.002 line:-1 position:50%
For our world experience,
we'll simply set our preference


425
00:20:37.002 --> 00:20:39.705 line:-1 position:50%
to be false when we open
our Space.


426
00:20:39.705 --> 00:20:40.806 line:-1 position:50%
And just like that,


427
00:20:40.806 --> 00:20:44.844 line:-1 position:50%
we can change the
upperLimbVisibility preference.


428
00:20:44.844 --> 00:20:47.513 line:-1 position:50%
Hiding your hands while
in the full emergence style


429
00:20:47.513 --> 00:20:49.648 line:-1 position:50%
means we can show
virtual hands instead,


430
00:20:49.648 --> 00:20:53.452 line:-1 position:50%
and we'll show some space gloves
in our World app.


431
00:20:53.452 --> 00:20:57.389 line:-1 position:50%
Let's start by creating
a new view called SpaceGloves.


432
00:20:57.389 --> 00:20:58.991 line:-1 position:50%
Next, we'll add a RealityView


433
00:20:58.991 --> 00:21:03.028 line:-1 position:50%
so we can have our gloves
render in our Space.


434
00:21:03.028 --> 00:21:05.197 line:-1 position:50%
Then we'll create a root entity
in our RealityView


435
00:21:05.197 --> 00:21:08.934 line:-1 position:50%
to add entities to
so they can also be rendered.


436
00:21:08.934 --> 00:21:10.736 line:-1 position:50%
Then we'll load
an asset onto an entity


437
00:21:10.736 --> 00:21:14.473 line:-1 position:50%
and add it as a child
of our root.


438
00:21:14.473 --> 00:21:16.075 line:-1 position:50%
To correctly place the entities,


439
00:21:16.075 --> 00:21:20.012 line:-1 position:50%
we'll need to use ARKit
and its hand tracking API,


440
00:21:20.012 --> 00:21:24.984 line:-1 position:50%
and we'll also need to start the
hand tracking system as well.


441
00:21:24.984 --> 00:21:26.018 line:-1 position:50%
Our next step is making sure


442
00:21:26.018 --> 00:21:29.121 line:-1 position:50%
the assets correctly
anchor to our hands.


443
00:21:29.121 --> 00:21:32.791 line:-1 position:50%
We'll need to check for
hand tracking anchor updates.


444
00:21:32.791 --> 00:21:37.930 line:-1 position:50%
And next,
checking for the hand chirality.


445
00:21:37.930 --> 00:21:39.665 line:-1 position:50%
We'll then make sure
the hand asset's transform


446
00:21:39.665 --> 00:21:43.068 line:-1 position:50%
is the same as the anchors.


447
00:21:43.068 --> 00:21:45.638 line:-1 position:50%
In this example, we also
made sure our assets


448
00:21:45.638 --> 00:21:49.108 line:-1 position:50%
have the same joint names
as the one ARKit provides.


449
00:21:49.108 --> 00:21:52.378 line:-1 position:50%
This way, we can map the anchor
skeleton joint names correctly


450
00:21:52.378 --> 00:21:53.913 line:-1 position:50%
and the glove entity
will automatically


451
00:21:53.913 --> 00:21:57.016 line:-1 position:50%
be anchored for us.


452
00:21:57.016 --> 00:22:00.486 line:-1 position:50%
So let's go back to where
our Space is defined


453
00:22:00.486 --> 00:22:03.255 line:-1 position:50%
and make sure to include
the SpaceGloves view.


454
00:22:03.255 --> 00:22:05.691 line:-1 position:50%
That's all we need
for virtual hands.


455
00:22:05.691 --> 00:22:08.594 line:-1 position:50%
For more ARKit customization
and in-depth details,


456
00:22:08,594 --> 00:22:12,464 position:50%
check out the "Evolve your ARKit
app for spatial experiences."


457
00:22:12,464 --> 00:22:17,503 position:50%
Now let's try these
customizations out on device.


458
00:22:17.503 --> 00:22:19.271 line:-1 position:50%
The World experience
starts again,


459
00:22:19.271 --> 00:22:23.075 line:-1 position:50%
and the Space will reopen
in the default immersion style.


460
00:22:23.075 --> 00:22:25.177 line:-1 position:50%
By using the magnify
gesture on the earth,


461
00:22:25.177 --> 00:22:29.648 line:-1 position:50%
the app will transition
into the progressive style.


462
00:22:29.648 --> 00:22:30.783 line:-1 position:50%
When the Space opens,


463
00:22:30.783 --> 00:22:34.720 line:-1 position:50%
the code will modify
the surroundings to be dark.


464
00:22:34.720 --> 00:22:36.622 line:-1 position:50%
You made yourself feel
even more immersed


465
00:22:36.622 --> 00:22:38.958 line:-1 position:50%
by utilizing the
Surrounding Effects API


466
00:22:38.958 --> 00:22:41.126 line:-1 position:50%
to dim the passthrough.


467
00:22:41.126 --> 00:22:42.361 line:-1 position:50%
It was easy to apply


468
00:22:42.361 --> 00:22:45.998 line:-1 position:50%
and it's a great way
to focus on the experience.


469
00:22:45.998 --> 00:22:47.499 line:-1 position:50%
This is pretty immersive
right now,


470
00:22:47.499 --> 00:22:48.867 line:-1 position:50%
but you can take it
a step further


471
00:22:48.867 --> 00:22:51.203 line:-1 position:50%
with our next customization.


472
00:22:51.203 --> 00:22:53.505 line:-1 position:50%
As our previous
code demonstrated,


473
00:22:53.505 --> 00:22:55.507 line:-1 position:50%
when you transition
to full immersion,


474
00:22:55.507 --> 00:22:56.976 line:-1 position:50%
your hands will disappear


475
00:22:56.976 --> 00:22:59.111 line:-1 position:50%
and the virtual space gloves
will appear


476
00:22:59.111 --> 00:23:03.315 line:-1 position:50%
where your hands would be
thanks to hand tracking.


477
00:23:03.315 --> 00:23:07.219 line:-1 position:50%
By using RealityView with ARKit
and enabling hand tracking,


478
00:23:07.219 --> 00:23:10.022 line:-1 position:50%
you were able to launch into
space like a virtual astronaut,


479
00:23:10.022 --> 00:23:12.358 line:-1 position:50%
and it feels really awesome.


480
00:23:15.761 --> 00:23:18.897 line:-1 position:50%
With just a couple enhancements
and customizations,


481
00:23:18.897 --> 00:23:20.366 line:-1 position:50%
we were able
to turn our World app


482
00:23:20.366 --> 00:23:22.401 line:-1 position:50%
into a fully immersive
experience


483
00:23:22.401 --> 00:23:24.603 line:-1 position:50%
that took us beyond
the Shared Space.


484
00:23:24.603 --> 00:23:28.307 line:-1 position:50%
And now it's up to you to use
the new Immersive Space API


485
00:23:28.307 --> 00:23:30.376 line:-1 position:50%
to create experiences
effortlessly,


486
00:23:30.376 --> 00:23:32.311 line:-1 position:50%
show them off
with different styles,


487
00:23:32.311 --> 00:23:35.781 line:-1 position:50%
and be creative with
the possible customizations.


488
00:23:35.781 --> 00:23:38.584 line:-1 position:50%
It's a powerful and easy to use
API that gives you


489
00:23:38.584 --> 00:23:41.553 line:-1 position:50%
all the tools necessary
to transform your surroundings


490
00:23:41.553 --> 00:23:44.089 line:-1 position:50%
and create new and immersive
experiences.


491
00:23:44.089 --> 00:23:46.358 line:-1 position:50%
Thank you for joining us.


492
00:23:46,358 --> 00:23:50,362 line:0 position:90% size:2%
♪

