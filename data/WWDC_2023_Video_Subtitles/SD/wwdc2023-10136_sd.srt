2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.010 --> 00:00:11.745 line:-1
Christopher: Hello and welcome!


4
00:00:11.778 --> 00:00:13.747 line:-2
My name is Christopher,
and I am a software engineer


5
00:00:13.780 --> 00:00:15.616 line:-1
on the ScreenCaptureKit team.


6
00:00:15.649 --> 00:00:17.584 line:-2
I'll be joined by my colleague
Natalie Lindsay,


7
00:00:17.618 --> 00:00:20.354 line:-2
and together we'll introduce new features
that are going to enhance


8
00:00:20.387 --> 00:00:22.956 line:-2
screen capture capabilities
in your applications.


9
00:00:24.124 --> 00:00:27.127 line:-2
ScreenCaptureKit was introduced
in macOS 12.3


10
00:00:27.160 --> 00:00:31.398 line:-2
to help you create your application's
screen sharing experience.


11
00:00:31.431 --> 00:00:34.568 line:-2
ScreenCaptureKit provides APIs that will
let you customize the content


12
00:00:34.601 --> 00:00:39.606 line:-2
you want to share, with controls that fit
your application's needs,


13
00:00:39.640 --> 00:00:43.110 line:-2
all of which can be applied
dynamically to your streams.


14
00:00:43.143 --> 00:00:46.780 line:-2
The framework delivers high quality
content with a focus on performance


15
00:00:46.813 --> 00:00:50.484 line:-2
that goes up to the native resolution
and frame rate of your display,


16
00:00:50.517 --> 00:00:54.121 line:-2
all while having privacy in mind
with global safeguards.


17
00:00:54.154 --> 00:00:57.224 line:-2
This year, ScreenCaptureKit provides
several developer APIs


18
00:00:57.257 --> 00:00:59.960 line:-1
that integrate with new macOS features.


19
00:00:59.993 --> 00:01:01.962 line:-2
Presenter Overlay is a feature
that allows people


20
00:01:01.995 --> 00:01:04.932 line:-2
to make their screen shares
and presentations more personal


21
00:01:04.965 --> 00:01:08.235 line:-2
by embedding themselves
into the captured content.


22
00:01:08.268 --> 00:01:10.804 line:-2
With the new screen sharing picker,
you'll be able to integrate


23
00:01:10.838 --> 00:01:14.908 line:-2
a system-wide experience for
what you capture in your screen share.


24
00:01:14.942 --> 00:01:17.845 line:-2
Finally, screen capture isn't just for
live streams,


25
00:01:17.878 --> 00:01:20.714 line:-2
and this year, there's a brand-new API
that allows you to capture


26
00:01:20.747 --> 00:01:24.885 line:-2
high definition screenshots
of any content you choose.


27
00:01:24.918 --> 00:01:28.288 line:-2
People interact with each other every day,
all across the world.


28
00:01:28.322 --> 00:01:30.757 line:-2
These interactions are where
we share our thoughts and ideas


29
00:01:30.791 --> 00:01:32.459 line:-1
and solve important issues.


30
00:01:32.492 --> 00:01:35.329 line:-1
They are both professional and personal.


31
00:01:35.362 --> 00:01:37.231 line:-2
To this end,
your apps can work seamlessly with


32
00:01:37.264 --> 00:01:40.167 line:-2
a new video effect
called Presenter Overlay.


33
00:01:40.200 --> 00:01:43.403 line:-2
When sharing content, Presenter Overlay
elevates the presenter's presence


34
00:01:43.437 --> 00:01:46.240 line:-2
by including the presenter
on top of the shared content,


35
00:01:46.273 --> 00:01:50.010 line:-2
adding a personal touch
for more productive remote calls.


36
00:01:50.043 --> 00:01:52.513 line:-2
Small overlay places
the presenter in a movable window,


37
00:01:52.546 --> 00:01:55.415 line:-1
thanks to advanced segmentation algorithm,


38
00:01:55.449 --> 00:01:58.185 line:-2
while large overlay separates
the presenter's face and body


39
00:01:58.218 --> 00:01:59.419 line:-1
from the background


40
00:01:59.453 --> 00:02:03.090 line:-2
and then layers the screen content
between them for a more immersive effect.


41
00:02:03.123 --> 00:02:08.295 line:-2
Presenter Overlay is available with every
application that uses ScreenCaptureKit.


42
00:02:08.328 --> 00:02:11.031 line:-1
For every SCStream that is created,


43
00:02:11.064 --> 00:02:14.468 line:-2
ScreenCaptureKit will notify
the screen sharing picker,


44
00:02:14,501 --> 00:02:17,237
and a live preview with controls
for the stream will be displayed


45
00:02:17,271 --> 00:02:21,108
in a new Video menu bar item.


46
00:02:21.141 --> 00:02:24.778 line:-2
The Video menu bar will show every
application that has an active stream,


47
00:02:24.811 --> 00:02:29.082 line:-2
and will show a live preview of the
streams associated with any application.


48
00:02:29.116 --> 00:02:32.019 line:-2
From this menu bar, one will be able
to control the stream content by presenting


49
00:02:32.052 --> 00:02:36.523 line:-2
the stream-wide screen sharing picker.


50
00:02:36.557 --> 00:02:39.026 line:-2
This is also where
Presenter Overlay is enabled,


51
00:02:39.059 --> 00:02:43.330 line:-2
embedding the camera frame
into the content stream.


52
00:02:43.363 --> 00:02:45.799 line:-2
And one can also use this
to control the stream,


53
00:02:45.832 --> 00:02:49.102 line:-1
like replacing or ending the screen share.


54
00:02:49.136 --> 00:02:53.307 line:-2
There are other useful features here for
customizing camera and microphone effects.


55
00:02:55.409 --> 00:02:58.212 line:-2
Every application that uses
ScreenCaptureKit and camera together


56
00:02:58.245 --> 00:03:01.915 line:-2
will automatically have
these features working.


57
00:03:01.949 --> 00:03:04.451 line:-2
Currently, a stream has content frames
sent to its process


58
00:03:04.484 --> 00:03:06.787 line:-1
from ScreenCaptureKit.


59
00:03:06.820 --> 00:03:10.591 line:-2
Now, when an application starts using
the camera during an active stream,


60
00:03:10.624 --> 00:03:15.229 line:-2
Presenter Overlay is made available
in the video menu item.


61
00:03:15.262 --> 00:03:17.731 line:-2
Once enabled,
ScreenCaptureKit will take the camera


62
00:03:17.764 --> 00:03:19.700 line:-2
and apply the rendering
to the selected stream


63
00:03:19.733 --> 00:03:22.336 line:-1
that your application is already running.


64
00:03:22.369 --> 00:03:26.840 line:-2
You will get the composited frames
automatically from the active stream.


65
00:03:26.874 --> 00:03:30.711 line:-2
So what if I wanted to know explicitly
when Presenter Overlay has been applied?


66
00:03:31.912 --> 00:03:35.816 line:-2
Let's start with creating a new stream
and adding self as delegate.


67
00:03:35.849 --> 00:03:39.052 line:-2
Then you'll implement the new
delegate callback on SCStream,


68
00:03:39.086 --> 00:03:42.155 line:-1
outputEffectDidStart.


69
00:03:42.189 --> 00:03:46.927 line:-2
This is how you'll be notified
when Presenter Overlay has been applied.


70
00:03:46.960 --> 00:03:51.398 line:-2
When notified, you want to check
if the effect's started or stopped.


71
00:03:51.431 --> 00:03:54.902 line:-2
Presenter Overlay is
a new macOS system feature,


72
00:03:54.935 --> 00:03:57.604 line:-2
and there are some considerations
your application might want to take


73
00:03:57.638 --> 00:03:59.339 line:-1
when an overlay is applied.


74
00:04:00.474 --> 00:04:02.409 line:-1
When Presenter Overlay is turned on,


75
00:04:02.442 --> 00:04:06.380 line:-2
the AVCaptureSession will not send
the typical live camera stream.


76
00:04:06.413 --> 00:04:10.951 line:-2
That is because your camera
will be used directly in the overlay.


77
00:04:10.984 --> 00:04:13.320 line:-2
This would be a great time to update
the application UI


78
00:04:13.353 --> 00:04:15.189 line:-1
to account for this change.


79
00:04:15.222 --> 00:04:16.857 line:-2
For example,
video conferencing applications


80
00:04:16.890 --> 00:04:20.093 line:-2
might want to adjust your audio
and video synchronization


81
00:04:20.127 --> 00:04:23.263 line:-2
to account for the shared content
being mixed with the camera.


82
00:04:23.297 --> 00:04:28.435 line:-2
You may also want to hide the presenter's
camera tile for a more optimized look.


83
00:04:28.468 --> 00:04:30.904 line:-2
Presenter Overlay is
a camera and video feature,


84
00:04:30.938 --> 00:04:34.741 line:-2
so your application should optimize
for higher frame rates.


85
00:04:35.742 --> 00:04:38.679 line:-2
In addition to Presenter Overlay,
you can also take advantage


86
00:04:38.712 --> 00:04:40.747 line:-1
of a new systemwide screen sharing picker,


87
00:04:40.781 --> 00:04:43.450 line:-2
that allows your application to fully
integrate with several features


88
00:04:43.483 --> 00:04:47.254 line:-2
centered around how people will
pick the content they wish to share.


89
00:04:47.287 --> 00:04:51.458 line:-2
These are the general constructs
that you use to create a stream.


90
00:04:51.491 --> 00:04:53.827 line:-1
Currently, you call into SCSharableContent


91
00:04:53.861 --> 00:04:57.764 line:-2
to get all of the available
screen content that you could share.


92
00:04:57.798 --> 00:05:00.834 line:-2
You'll use that
to create an SCContentFilter.


93
00:05:00.868 --> 00:05:05.472 line:-2
The SCContentFilter is what you'll use
to determine what you're going to capture.


94
00:05:05.506 --> 00:05:07.975 line:-2
Currently, you build that
from SCSharableContent


95
00:05:08.008 --> 00:05:13.046 line:-2
but, new this year, you'll be able to get
a content filter through the picker.


96
00:05:13.080 --> 00:05:16.450 line:-2
There are two ways the picker
will generate SCContentFilters.


97
00:05:16.483 --> 00:05:20.654 line:-2
First, the desired content can be
shared through the system picker.


98
00:05:20.687 --> 00:05:25.225 line:-2
Secondly, the content can be selected
right from the window that's open.


99
00:05:25.259 --> 00:05:30.230 line:-2
In both cases, the system shares
an SCContentFilter with your application.


100
00:05:30.264 --> 00:05:34.034 line:-2
But how do you get the new
content filters into your application?


101
00:05:34.067 --> 00:05:38.405 line:-2
By using the new API,
SCContentSharingPicker.


102
00:05:38.438 --> 00:05:40.874 line:-2
SCContentSharingPicker acts
as the interface between


103
00:05:40.908 --> 00:05:42.943 line:-1
your application and the OS,


104
00:05:42.976 --> 00:05:45.145 line:-2
providing delegate callbacks
to your application


105
00:05:45.179 --> 00:05:47.648 line:-2
with new stream requests,
new content filters,


106
00:05:47.681 --> 00:05:51.785 line:-2
and updates to current streams
and content filters.


107
00:05:51.818 --> 00:05:55.122 line:-2
SCContentSharingPicker has a built-in
system level content picker


108
00:05:55.155 --> 00:06:00.661 line:-2
that enables one to pick content based on
windows, apps, or even displays.


109
00:06:00.694 --> 00:06:02.629 line:-2
Whether one initiates
the selection of content


110
00:06:02.663 --> 00:06:04.631 line:-1
through a button in your application,


111
00:06:04.665 --> 00:06:07.701 line:-2
the new Video menu bar,
or directly from a window,


112
00:06:07.734 --> 00:06:10.737 line:-2
your application can take advantage
of SCContentSharingPicker


113
00:06:10.771 --> 00:06:16.777 line:-2
to add, remove, or replace the active
selection for any of your ongoing streams.


114
00:06:16.810 --> 00:06:18.879 line:-2
It also has a built-in
stream request callback


115
00:06:18.912 --> 00:06:24.017 line:-2
that allows your application to know
when a new stream is being requested.


116
00:06:24.051 --> 00:06:27.020 line:-2
And finally,
it comes with per-stream customization,


117
00:06:27.054 --> 00:06:31.792 line:-2
where you can define how the system
experience is applied to each stream.


118
00:06:31.825 --> 00:06:34.328 line:-2
The constructs for getting the filter
for an SCStream


119
00:06:34.361 --> 00:06:36.964 line:-1
now goes from using SCSharableContent


120
00:06:36.997 --> 00:06:38.899 line:-1
to using the system picker interface


121
00:06:38.932 --> 00:06:41.201 line:-1
with the SCContentSharingPicker singleton


122
00:06:41.235 --> 00:06:44.538 line:-1
to pass back SCContentFilter.


123
00:06:44.571 --> 00:06:47.274 line:-2
Let me show you how easy it is
for your application to take advantage


124
00:06:47.307 --> 00:06:50.711 line:-1
of this new screen sharing picker.


125
00:06:50.744 --> 00:06:53.914 line:-2
You'll start with the shared instance
for SCContentSharingPicker


126
00:06:53.947 --> 00:06:58.752 line:-2
and add self as an observer so you can
get all the appropriate class callbacks.


127
00:06:58.785 --> 00:07:03.323 line:-2
In order for the system to recognize
my picker instance, set it as active.


128
00:07:03.357 --> 00:07:06.093 line:-2
Once active,
the system will know about your picker,


129
00:07:06.126 --> 00:07:08.562 line:-2
and your application will be included
in the System UI


130
00:07:08.595 --> 00:07:11.398 line:-2
and people will be able
to interact with it.


131
00:07:11.431 --> 00:07:14.034 line:-2
You want to make a stream where
people are allowed to choose windows


132
00:07:14.067 --> 00:07:17.738 line:-2
through the picker, so you'll call
the singleton method picker.present


133
00:07:17.771 --> 00:07:21.875 line:-2
and pass in nil and a style of picker
you want to present.


134
00:07:21,909 --> 00:07:24,978
Once people press your UI button,
the picker will be presented,


135
00:07:25,012 --> 00:07:28,749
allowing them to choose
the windows they wish to capture.


136
00:07:28,782 --> 00:07:30,551
After that content has been selected,


137
00:07:30,584 --> 00:07:34,188
you will be notified via the observer
callback of a new filter.


138
00:07:34.221 --> 00:07:36.490 line:-2
And you are now free
to either create a new stream


139
00:07:36.523 --> 00:07:40.294 line:-2
or update an existing stream
using this filter.


140
00:07:40.327 --> 00:07:43.297 line:-2
The remaining observer callbacks are
equally important.


141
00:07:43.330 --> 00:07:47.134 line:-2
Set up the picker again
by making it active and presenting it.


142
00:07:47.167 --> 00:07:51.638 line:-2
You'll also want to know if the picker
failed when you asked to present it.


143
00:07:51.672 --> 00:07:54.441 line:-2
If it did fail,
you'll want to post a notification


144
00:07:54.474 --> 00:07:57.377 line:-1
in your application to notify people.


145
00:07:57,411 --> 00:07:59,913
Also,
if the picker was presented but canceled,


146
00:07:59,947 --> 00:08:01,615
meaning no content was picked,


147
00:08:01,648 --> 00:08:04,484
you want to make sure you set the state
for your stream accordingly.


148
00:08:06.353 --> 00:08:09.890 line:-2
SCContentSharingPicker also comes
with methods that allow you to customize


149
00:08:09.923 --> 00:08:13.560 line:-2
how the system is going to behave
on a per-stream level.


150
00:08:13.594 --> 00:08:18.699 line:-2
The SCContentSharingPickerConfiguration
allows for several customizations.


151
00:08:18.732 --> 00:08:21.869 line:-2
AllowedPickingModes tells the system
which of the picking modes are allowed


152
00:08:21.902 --> 00:08:27.674 line:-2
between windows, applications,
and display selection for content filters.


153
00:08:27.708 --> 00:08:31.612 line:-2
It also allows for the explicit
declaration of excludedWindowIDs


154
00:08:31.645 --> 00:08:35.582 line:-2
and bundleIDs that are not allowed
to be picked by the system experience.


155
00:08:35.616 --> 00:08:37.918 line:-2
If you have a stream
that you don't want people to change,


156
00:08:37.951 --> 00:08:42.823 line:-2
SCContentSharingPickerConfiguration has
a property that can enforce that feature.


157
00:08:42.856 --> 00:08:45.492 line:-2
First, you'll get
a shared picker instance.


158
00:08:45.526 --> 00:08:49.696 line:-2
Start with adding self as the observer
and setting the picker active.


159
00:08:49.730 --> 00:08:52.566 line:-2
Now, set up the appropriate
configuration settings.


160
00:08:52.599 --> 00:08:55.169 line:-2
For this stream,
perhaps you want to exclude


161
00:08:55.202 --> 00:08:59.439 line:-2
a selection of two specific applications
and don't want to allow repicking.


162
00:08:59.473 --> 00:09:03.377 line:-2
Once the configuration is set up,
call set configuration on the picker,


163
00:09:03.410 --> 00:09:06.246 line:-2
passing in the configuration
and applicative stream.


164
00:09:07,581 --> 00:09:11,919
Now the picker will know exactly
how to behave for a given stream.


165
00:09:11,952 --> 00:09:14,955
Also note that each stream could have
different picker configuration


166
00:09:14,988 --> 00:09:18,025
to best suit the application's needs.


167
00:09:19.092 --> 00:09:24.264 line:-2
To recap, all ScreenCaptureKit streams are
now integrated into the macOS experience,


168
00:09:24.298 --> 00:09:28.802 line:-2
allowing any application to take advantage
of new features like Presenter Overlay.


169
00:09:28.836 --> 00:09:31.405 line:-2
And I introduced you
to SCContentSharingPicker,


170
00:09:31.438 --> 00:09:36.376 line:-2
the new API for integrating your
application into the new system picker UI.


171
00:09:36.410 --> 00:09:39.613 line:-2
But screen capturing in your application
isn't just about live streams,


172
00:09:39.646 --> 00:09:41.782 line:-2
so I'd like to pass it off
to my colleague, Natalie,


173
00:09:41.815 --> 00:09:44.251 line:-2
to talk more about
this new screenshot API.


174
00:09:44.284 --> 00:09:45.786 line:-1
Natalie: Thanks, Christopher.


175
00:09:45.819 --> 00:09:48.288 line:-2
This year,
there's a new API in ScreenCaptureKit


176
00:09:48.322 --> 00:09:52.092 line:-2
designed to make it easy for you to grab
a still image right off your screen.


177
00:09:52.125 --> 00:09:54.595 line:-1
The new screenshot API brings the benefits


178
00:09:54.628 --> 00:09:57.564 line:-2
of ScreenCaptureKit streaming
to screenshots.


179
00:09:57.598 --> 00:10:00.934 line:-2
Features like advanced filtering
by app or window,


180
00:10:00.968 --> 00:10:03.570 line:-1
multiple pixel formats and color spaces,


181
00:10:03.604 --> 00:10:07.941 line:-2
and other options like cursor visibility
are available to you.


182
00:10:07.975 --> 00:10:12.379 line:-2
Now you'll be able to efficiently grab an
image of the exact screen content you want


183
00:10:12.412 --> 00:10:15.382 line:-2
using familiar
ScreenCaptureKit constructs.


184
00:10:16.483 --> 00:10:19.253 line:-1
The new API is asynchronous.


185
00:10:19.286 --> 00:10:21.555 line:-2
For your output image,
you can choose between


186
00:10:21.588 --> 00:10:25.092 line:-1
a CMSampleBuffer or a CGImage format.


187
00:10:25.125 --> 00:10:29.162 line:-2
The CMSampleBuffer option has
additional pixel formats available,


188
00:10:29.196 --> 00:10:32.332 line:-2
which is great if you're interested
in specific formats.


189
00:10:32.366 --> 00:10:34.535 line:-1
If you already use CGImage in your code,


190
00:10:34.568 --> 00:10:38.238 line:-2
then using this format will be easier
to integrate.


191
00:10:38.272 --> 00:10:40.707 line:-1
In either format, your screenshot will use


192
00:10:40.741 --> 00:10:45.245 line:-2
almost all of the same configuration
options as ScreenCaptureKit streaming


193
00:10:45.279 --> 00:10:49.082 line:-1
and will follow a similar setup flow.


194
00:10:49.116 --> 00:10:52.653 line:-1
If you're using CGWindowListCreateImage,


195
00:10:52.686 --> 00:10:57.090 line:-2
there are a couple things that will make
the transition to ScreenCaptureKit easier.


196
00:10:57.124 --> 00:11:01.795 line:-2
All the window image options that you have
available for the CGWindowList API


197
00:11:01.828 --> 00:11:04.831 line:-2
can be found inside
the SCStreamConfiguration class


198
00:11:04.865 --> 00:11:06.934 line:-1
in ScreenCaptureKit.


199
00:11:06.967 --> 00:11:11.638 line:-2
The window list options, like getting
all windows above a certain window ID,


200
00:11:11.672 --> 00:11:14.975 line:-1
are provided inside SCShareableContent.


201
00:11:15.008 --> 00:11:18.178 line:-2
And if you're used to working
with CGImage output,


202
00:11:18.212 --> 00:11:21.615 line:-2
the new screenshot API provides a CGImage
output format


203
00:11:21.648 --> 00:11:25.652 line:-2
that's easy to integrate
into your existing code.


204
00:11:25,686 --> 00:11:30,257
Taking a screenshot follows a similar flow
to ScreenCaptureKit streaming,


205
00:11:30,290 --> 00:11:35,829
but in place of creating an SCStream,
you'll call the screenshot API.


206
00:11:35,863 --> 00:11:38,599
To start, just like for creating a stream,


207
00:11:38,632 --> 00:11:41,635
use SCShareableContent to get
your desired content


208
00:11:41,668 --> 00:11:44,304
and create your SCContentFilter.


209
00:11:44,338 --> 00:11:47,474
Don't forget to set up
your SCStreamConfiguration


210
00:11:47,508 --> 00:11:50,777
with all the options you want
for your screenshot.


211
00:11:50,811 --> 00:11:54,248
Once you have the content filter
and stream configuration,


212
00:11:54,281 --> 00:11:57,918
call the screenshot API and pass them in.


213
00:11:57,951 --> 00:12:01,889
The API is a class method
on the SCScreenshotManager class,


214
00:12:01,922 --> 00:12:05,058
so you won't need to create
an SCScreenshotManager object


215
00:12:05,092 --> 00:12:07,327
to take a screenshot.


216
00:12:07,361 --> 00:12:10,898
When the screenshot image is ready,
it'll be returned to you asynchronously


217
00:12:10,931 --> 00:12:14,501
in whichever format you chose.


218
00:12:14,535 --> 00:12:18,438
You can also use the new system picker
to create your content filter,


219
00:12:18,472 --> 00:12:20,807
and then use that
to call the screenshot API.


220
00:12:20.841 --> 00:12:24.178 line:-2
This would be a great way to allow people
to pick the content they want


221
00:12:24.211 --> 00:12:26.980 line:-1
in an intuitive way.


222
00:12:27.014 --> 00:12:28.649 line:-1
When it's time to take the screenshot,


223
00:12:28.682 --> 00:12:32.686 line:-2
there are two versions of the API to
choose from, depending on what you need:


224
00:12:32.719 --> 00:12:37.858 line:-2
one for the CMSampleBuffer output type
and one for the CGImage output type.


225
00:12:37.891 --> 00:12:40.060 line:-2
Other than that,
the two versions work the same way


226
00:12:40.093 --> 00:12:44.498 line:-2
and will return your screenshot
asynchronously.


227
00:12:44.531 --> 00:12:47.968 line:-2
Here's a code example
of how you can use the screenshot API.


228
00:12:48.001 --> 00:12:53.140 line:-2
Start by setting up your SCContentFilter
and SCStreamConfiguration.


229
00:12:53.173 --> 00:12:55.742 line:-2
Once you have those ready,
you can call the screenshot API,


230
00:12:55.776 --> 00:12:59.580 line:-2
wait for it to return,
and you'll get your screenshot.


231
00:12:59.613 --> 00:13:02.349 line:-2
And that's everything that's new
in ScreenCaptureKit.


232
00:13:02.382 --> 00:13:08.288 line:-2
To recap, there's a new API to create
SCContentFilters that uses system level UI


233
00:13:08.322 --> 00:13:11.124 line:-2
to create a fully integrated
screen sharing experience


234
00:13:11.158 --> 00:13:13.093 line:-1
with your application.


235
00:13:13.126 --> 00:13:15.229 line:-1
A New Presenter Overlay video effect


236
00:13:15.262 --> 00:13:18.365 line:-2
offers a more dynamic
screen sharing experience,


237
00:13:18.398 --> 00:13:21.668 line:-2
and a new screenshot API allows you
to grab one-off screen captures


238
00:13:21.702 --> 00:13:24.204 line:-1
with the power of ScreenCaptureKit.


239
00:13:24,238 --> 00:13:26,773
For more information
about ScreenCaptureKit,


240
00:13:26,807 --> 00:13:29,109
be sure to check out the sessions
from last year,


241
00:13:29,142 --> 00:13:32,646
"Meet ScreenCaptureKit" and
"Take ScreenCaptureKit to the next level."


242
00:13:33.680 --> 00:13:36.250 line:-1
Thanks for watching.

