2
00:00:01.001 --> 00:00:07.007 line:-1 align:center
♪ ♪


3
00:00:10.010 --> 00:00:11.812 line:-1 align:center
Jeff: Howdy, I’m Jeff.


4
00:00:11,879 --> 00:00:14,648 line:-2
I’m an engineer on the MapKit team
and I’m excited to introduce you


5
00:00:14,715 --> 00:00:16,450 line:-1
to MapKit for SwiftUI.


6
00:00:16,517 --> 00:00:20,120 line:-2
With our greatly expanded SwiftUI API,
it’s easier than ever


7
00:00:20,187 --> 00:00:23,857 line:-2
to integrate Maps into your apps
across all platforms.


8
00:00:23.924 --> 00:00:26.426 line:-2 align:center
We think you’re going to love
using MapKit for SwiftUI


9
00:00:26,493 --> 00:00:30,097 line:-2
to create powerful mapping experiences
for your users.


10
00:00:30.163 --> 00:00:31.431 line:-1 align:center
To show you how easy it is,


11
00:00:31,498 --> 00:00:34,768 line:-2
I’ll build a fully functional trip planner
from scratch.


12
00:00:34.835 --> 00:00:38.138 line:-2 align:center
I’ll walk you through every step and we’ll
be done before the end of this session.


13
00:00:38,205 --> 00:00:41,108 line:-2
My family is heading back home
to New England this weekend,


14
00:00:41,175 --> 00:00:44,645 line:-2
and we’ll spend Saturday
exploring the beautiful city of Boston.


15
00:00:44.711 --> 00:00:47.014 line:-2 align:center
We’ll walk through the city
in the morning and see the sights,


16
00:00:47.080 --> 00:00:49.383 line:-2 align:center
we’ll have lunch
in the historic North End,


17
00:00:49,449 --> 00:00:51,385 line:-1
and probably grab a cannoli for dessert.


18
00:00:51,451 --> 00:00:53,420 line:-1
The weather is looking perfect, too,


19
00:00:53.487 --> 00:00:55.155 line:-2 align:center
so we’ll head out to the beach
in the afternoon


20
00:00:55.222 --> 00:00:57.257 line:-1 align:center
and feel the sand between our toes.


21
00:00:57.324 --> 00:00:59.660 line:-1 align:center
It’s gonna be a lot of fun.


22
00:00:59.726 --> 00:01:02.196 line:-1 align:center
I’ll build an app to help us plan the day.


23
00:01:02.262 --> 00:01:06.233 line:-2 align:center
I’ll use annotations
to mark places on the map.


24
00:01:06.300 --> 00:01:08.669 line:-2 align:center
I’ll enable selection so that
I can tap on each marker


25
00:01:08,735 --> 00:01:11,538 line:-1
to learn more about that place.


26
00:01:11.605 --> 00:01:16.410 line:-2 align:center
I’ll integrate Look Around to explore
some places we might want to visit.


27
00:01:16,476 --> 00:01:20,681 line:-2
I’ll add an overlay that shows
a driving route to the beach.


28
00:01:20.747 --> 00:01:24.852 line:-2 align:center
I’ll use the map to display
different locations and regions.


29
00:01:24,918 --> 00:01:28,989 line:-2
I’ll add another dimension to the map
by enabling realistic elevation.


30
00:01:29,056 --> 00:01:33,293 line:-2
I’ll show you how to display satellite
and flyover imagery as well.


31
00:01:33.360 --> 00:01:36.597 line:-2 align:center
I’ll add some controls to the map,
including a user location button,


32
00:01:36,663 --> 00:01:38,732 line:-1
so that I can figure out where I am.


33
00:01:38,799 --> 00:01:42,503 line:-2
We have a lot to cover.
Let’s get right into it!


34
00:01:42,569 --> 00:01:46,173 line:-2
I’ll start with a brand-new
SwiftUI project.


35
00:01:46,240 --> 00:01:49,176 line:-1
I’ll be using MapKit.


36
00:01:49,243 --> 00:01:54,047 line:-1
And I’ll add a Map.


37
00:01:54,114 --> 00:01:55,249 line:-1
Nice!


38
00:01:55,315 --> 00:02:01,655 line:-2
I have an interactive map
with just one line of code!


39
00:02:01,722 --> 00:02:03,924 line:-2
My family will start the day
by driving into the city


40
00:02:03.991 --> 00:02:06.159 line:-1 align:center
and parking so we can walk around.


41
00:02:06,226 --> 00:02:07,728 line:-2
I’ve heard it said
that there’s a particular place


42
00:02:07,794 --> 00:02:09,396 line:-2
you should "pahk" your "cah"
near Boston,


43
00:02:09,463 --> 00:02:12,766 line:-2
but I like the parking garage
right underneath the Common.


44
00:02:12,833 --> 00:02:15,702 line:-2
Boston Common is a beautiful park
right in the middle of everything,


45
00:02:15,769 --> 00:02:19,273 line:-2
and it’ll make a fantastic starting point
for our walking tour.


46
00:02:19,339 --> 00:02:21,742 line:-2
The first thing I’ll do is
add some content to the map


47
00:02:21.808 --> 00:02:23.510 line:-1 align:center
to mark the parking garage.


48
00:02:23,577 --> 00:02:28,015 line:-2
I’ll mark the spot right above the ramps
that vehicles use to access the garage,


49
00:02:28.081 --> 00:02:31.385 line:-2 align:center
near the elevator we’ll ride up
to start walking.


50
00:02:31.451 --> 00:02:34.488 line:-2 align:center
You’ll learn about using Marker
and Annotation to display content


51
00:02:34.555 --> 00:02:37.491 line:-1 align:center
at a specific coordinate on the map.


52
00:02:37,558 --> 00:02:41,161 line:-1
So, let’s park the car and start walking!


53
00:02:41.228 --> 00:02:46.466 line:-2 align:center
I’ll use a MapContentBuilder closure
to add a marker to the map.


54
00:02:46.533 --> 00:02:47.968 line:-1 align:center
Cool!


55
00:02:48,035 --> 00:02:49,703 line:-1
If you’re familiar with SwiftUI,


56
00:02:49.770 --> 00:02:54.474 line:-2 align:center
adding a Marker to the map
feels a lot like adding a View to a List.


57
00:02:54.541 --> 00:02:56.977 line:-2 align:center
Check out how the map has
automatically framed our content


58
00:02:57.044 --> 00:02:59.813 line:-1 align:center
by zooming in to show the Marker.


59
00:02:59,880 --> 00:03:01,415 line:-1
So what’s a Marker?


60
00:03:01.481 --> 00:03:03.383 line:-2 align:center
Are there other types of content
that I can present


61
00:03:03.450 --> 00:03:06.053 line:-1 align:center
using the content builder?


62
00:03:06.119 --> 00:03:10.390 line:-2 align:center
Markers are used to display content
at a specific coordinate on the map.


63
00:03:10,457 --> 00:03:12,926 line:-2
The balloon shape
might look familiar to you.


64
00:03:12.993 --> 00:03:16.463 line:-2 align:center
You’ll find Markers used in the Maps app
and across the platform,


65
00:03:16.530 --> 00:03:20.634 line:-2 align:center
including in a wide variety of apps
you can find on the App Store.


66
00:03:20.701 --> 00:03:25.339 line:-2 align:center
Like Marker, Annotation is used to
display content at a specific coordinate.


67
00:03:25.405 --> 00:03:31.111 line:-2 align:center
Instead of Marker’s balloon,
Annotation displays a SwiftUI View.


68
00:03:31,178 --> 00:03:35,082 line:-2
The content builder can be used
to present overlay content as well.


69
00:03:35.148 --> 00:03:37.317 line:-1 align:center
You’ll learn more about these a bit later.


70
00:03:37.384 --> 00:03:39.086 line:-1 align:center
For now, all you really need to know


71
00:03:39.152 --> 00:03:41.154 line:-2 align:center
is that you can use
the content builder closure


72
00:03:41.221 --> 00:03:43.891 line:-1 align:center
to add all kinds of content to the map.


73
00:03:43,957 --> 00:03:47,194 line:-2
I want to display a custom SwiftUI view
for the parking spot,


74
00:03:47,261 --> 00:03:50,330 line:-1
so I’ll use an Annotation to mark it.


75
00:03:50,397 --> 00:03:54,701 line:-2
Here, I’m using ZStack to compose
some shapes and an image.


76
00:03:54.768 --> 00:03:57.004 line:-2 align:center
This SwiftUI view
will be displayed on the map


77
00:03:57.070 --> 00:03:59.673 line:-1 align:center
centered right on the parking coordinate.


78
00:03:59.740 --> 00:04:03.043 line:-2 align:center
If you’d like your view to be positioned
above the coordinate instead,


79
00:04:03.110 --> 00:04:05.445 line:-1 align:center
you can use Annotation’s anchor parameter.


80
00:04:05.512 --> 00:04:09.183 line:-2 align:center
Specifying an anchor value of “bottom”
will position the bottom of your view


81
00:04:09.249 --> 00:04:11.785 line:-1 align:center
right on the annotation’s coordinate.


82
00:04:11,852 --> 00:04:12,920 line:-1
All right!


83
00:04:12,986 --> 00:04:15,522 line:-2
The app marks where
we’ll start our walking tour.


84
00:04:15,589 --> 00:04:20,494 line:-2
I’ve used a MapContentBuilder
to display annotation content on the map.


85
00:04:20.561 --> 00:04:24.731 line:-2 align:center
Next, I’d like this app to convey a sense
of place as I’m looking at the map.


86
00:04:24.798 --> 00:04:29.603 line:-2 align:center
I’ll use mapStyle to achieve that
by enabling realistic terrain elevation.


87
00:04:29.670 --> 00:04:31.004 line:-1 align:center
You’ll learn how to use mapStyle


88
00:04:31.071 --> 00:04:34.341 line:-2 align:center
to display satellite
or flyover imagery as well.


89
00:04:36.610 --> 00:04:41.615 line:-2 align:center
You can set a style
using the mapStyle modifier.


90
00:04:43,083 --> 00:04:44,918 line:-1
This is the standard map style.


91
00:04:44.985 --> 00:04:50.924 line:-2 align:center
By default, it offers a flat presentation
much like a physical paper map.


92
00:04:50,991 --> 00:04:56,997 line:-1
[no audio]


93
00:05:02,369 --> 00:05:04,605 line:-2
It looks like there’s a bridge
across the lagoon,


94
00:05:04.671 --> 00:05:06.940 line:-2 align:center
so you can walk
from one side to the other.


95
00:05:07,007 --> 00:05:10,544 line:-2
This flat map really leaves something
to the imagination, though.


96
00:05:10.611 --> 00:05:12.613 line:-1 align:center
I’ll enable realistic elevated terrain


97
00:05:12.679 --> 00:05:16.617 line:-2 align:center
to give the map another dimension
to work with.


98
00:05:16,683 --> 00:05:22,689 line:-1
[no audio]


99
00:05:29,696 --> 00:05:33,233 line:-2
Enabling realistic elevation
really brings the map to life.


100
00:05:33.300 --> 00:05:35.969 line:-2 align:center
Looking at the lagoon now,
I can imagine taking a ride


101
00:05:36,036 --> 00:05:38,605 line:-2
on one of the swan boats
that cruise around in the summer


102
00:05:38.672 --> 00:05:41.842 line:-2 align:center
and picture the boat
passing under the bridge.


103
00:05:41.909 --> 00:05:44.344 line:-2 align:center
Using the imagery map style
is another great way


104
00:05:44,411 --> 00:05:46,813 line:-1
to offer your users a sense of place.


105
00:05:46.880 --> 00:05:48.749 line:-1 align:center
The imagery map style displays a map


106
00:05:48.815 --> 00:05:51.985 line:-2 align:center
rendered using satellite
or flyover imagery.


107
00:05:52.052 --> 00:05:56.890 line:-2 align:center
The Hybrid map style combines imagery
with roads and labels.


108
00:05:56.957 --> 00:06:01.128 line:-2 align:center
To recap, I’ve enabled realistic elevation
using the standard mapStyle


109
00:06:01,195 --> 00:06:04,932 line:-2
and I’ve shown you how to use
some other map styles as well.


110
00:06:04,998 --> 00:06:09,203 line:-2
Next, I’d like the app to help us search
for the places we want to visit.


111
00:06:09.269 --> 00:06:11.371 line:-2 align:center
Our kids will be with us
walking around Boston,


112
00:06:11.438 --> 00:06:14.441 line:-2 align:center
and I want our morning
to be fun for them, too.


113
00:06:14.508 --> 00:06:17.244 line:-2 align:center
The grown-ups
can appreciate seeing some history


114
00:06:17.311 --> 00:06:21.481 line:-2 align:center
while the kids can appreciate swings
and slides and monkey bars!


115
00:06:21,548 --> 00:06:23,483 line:-2
I’ll add a button
to search for playgrounds,


116
00:06:23.550 --> 00:06:26.253 line:-1 align:center
and a button to search for beaches, too.


117
00:06:26,320 --> 00:06:30,157 line:-2
The app will add a Marker
for each search result.


118
00:06:30,224 --> 00:06:32,159 line:-2
You’ll learn
a little bit more about Markers


119
00:06:32.226 --> 00:06:35.062 line:-2 align:center
and you’ll also learn how
to show your own UI above the map


120
00:06:35.128 --> 00:06:38.866 line:-2 align:center
without getting in the way
of the search results.


121
00:06:38,932 --> 00:06:42,269 line:-2
Earlier today,
I made a little BeantownButtons View.


122
00:06:42,336 --> 00:06:45,472 line:-2
Tapping a button calls a search function
with a simple query,


123
00:06:45,539 --> 00:06:48,442 line:-1
either playground or beach.


124
00:06:48,509 --> 00:06:51,311 line:-2
The search function uses
MKLocalSearch to find places


125
00:06:51,378 --> 00:06:56,250 line:-2
near the Boston Common parking garage,
and writes the results using a binding.


126
00:06:58,085 --> 00:07:00,687 line:-1
Back in the app’s main ContentView,


127
00:07:00.754 --> 00:07:04.958 line:-2 align:center
I’ll add State to keep track
of the search results.


128
00:07:05,025 --> 00:07:07,661 line:-2
When the BeantownButtons UI
performs a search,


129
00:07:07,728 --> 00:07:12,266 line:-2
it will write the results back
to this state using a binding.


130
00:07:12,332 --> 00:07:17,538 line:-1
[no audio]


131
00:07:17.604 --> 00:07:21.375 line:-2 align:center
I’ll add the buttons above the map
at the bottom of the screen.


132
00:07:21.441 --> 00:07:25.145 line:-2 align:center
Using safeAreaInset will make
sure the app’s UI doesn’t obscure


133
00:07:25.212 --> 00:07:28.549 line:-2 align:center
any of the content I’m adding
or any system-provided controls


134
00:07:28.615 --> 00:07:33.854 line:-2 align:center
that can appear on the map, such
as the Apple Maps logo and Legal link.


135
00:07:33,921 --> 00:07:40,928 line:-2
Next, I’ll use the content builder
to add search result Markers.


136
00:07:40.994 --> 00:07:46.466 line:-2 align:center
I'm using ForEach to add a marker
for each search result.


137
00:07:50.037 --> 00:07:54.007 line:-2 align:center
I’ll try these buttons out.
Let’s find some playgrounds.


138
00:07:54.074 --> 00:07:55.976 line:-2 align:center
Look!
Playgrounds!


139
00:07:56.043 --> 00:07:58.478 line:-2 align:center
The map has automatically framed them
by zooming out


140
00:07:58,545 --> 00:08:00,881 line:-1
so that all of them are visible.


141
00:08:00.948 --> 00:08:03.951 line:-1 align:center
How ‘bout some beaches?


142
00:08:04.017 --> 00:08:07.754 line:-2 align:center
The search results are MKMapItems,
which is the type MapKit APIs


143
00:08:07,821 --> 00:08:12,025 line:-2
like MKLocalSearch use
to represent places.


144
00:08:12.092 --> 00:08:15.395 line:-2 align:center
Here,
I’m using Marker’s map item initializer.


145
00:08:15.462 --> 00:08:19.066 line:-2 align:center
Markers created this way use
the map item’s name for their title


146
00:08:19,132 --> 00:08:22,336 line:-2
and use information from the map item
to show an icon and tint color


147
00:08:22.402 --> 00:08:24.438 line:-1 align:center
that represent the place.


148
00:08:24.505 --> 00:08:28.942 line:-2 align:center
Most of these search results show
as light blue beach umbrella markers.


149
00:08:29,009 --> 00:08:30,410 line:-1
When you’re working with map items,


150
00:08:30.477 --> 00:08:34.681 line:-2 align:center
Marker’s automatic content
and style support is very convenient.


151
00:08:34.748 --> 00:08:36.683 line:-2 align:center
Even if you aren’t using map items,
though,


152
00:08:36.750 --> 00:08:39.753 line:-2 align:center
you still have control over
the Marker’s presentation.


153
00:08:39.820 --> 00:08:44.324 line:-2 align:center
By default, Marker shows a map pin icon
in its balloon, like you see here.


154
00:08:44,391 --> 00:08:48,529 line:-2
You can provide your own icon
using an Image asset or a system image.


155
00:08:48,595 --> 00:08:52,699 line:-2
You can also show up to three letters
of text using monogram.


156
00:08:52,766 --> 00:08:57,704 line:-2
You can change the Marker’s color
using the tint modifier.


157
00:08:57,771 --> 00:09:01,942 line:-2
To recap, I’ve used safeAreaInset
to display some buttons above the map


158
00:09:02.009 --> 00:09:05.913 line:-2 align:center
while making sure they don’t
obscure the search result markers.


159
00:09:05,979 --> 00:09:10,217 line:-2
Next, I’m going to put the app in control
of what’s displayed by the map.


160
00:09:10,284 --> 00:09:12,152 line:-1
I’ve been adding content to the map.


161
00:09:12.219 --> 00:09:16.557 line:-2 align:center
Each time I have, the map has
automatically framed my content for me.


162
00:09:16.623 --> 00:09:20.527 line:-2 align:center
I’ll show you how to enable
this convenient behavior when you need it.


163
00:09:20,594 --> 00:09:23,163 line:-2
I’ll also show you how to display
something else entirely,


164
00:09:23,230 --> 00:09:26,867 line:-2
like the Boston area’s
North Shore coastline.


165
00:09:26,934 --> 00:09:32,940 line:-1
Right now, we’re looking at beaches.


166
00:09:35.542 --> 00:09:39.980 line:-2 align:center
If I pan away
and search for playgrounds...


167
00:09:40,047 --> 00:09:42,549 line:-2
the map no longer
automatically displays the results


168
00:09:42.616 --> 00:09:45.586 line:-1 align:center
near our Boston Common parking spot.


169
00:09:45.652 --> 00:09:49.189 line:-2 align:center
To display the search results after
the user has interacted with the map,


170
00:09:49.256 --> 00:09:52.359 line:-2 align:center
I’ll need to re-set
the Map’s camera position state


171
00:09:52.426 --> 00:09:55.796 line:-1 align:center
so that the map will frame the markers...


172
00:09:57.664 --> 00:10:02.269 line:-1 align:center
so, I’ll add state to track the position.


173
00:10:02.336 --> 00:10:04.471 line:-1 align:center
I’ll use the default automatic position


174
00:10:04,538 --> 00:10:10,544 line:-2
that frames the content
we’ve added to the map.


175
00:10:13,881 --> 00:10:19,820 line:-2
And I’ll pass the binding
to Map’s initializer.


176
00:10:19.887 --> 00:10:25.893 line:-1 align:center
[no audio]


177
00:10:29.162 --> 00:10:35.302 line:-2 align:center
I’ll use an onChange modifier to find out
when the search results are updated.


178
00:10:35.369 --> 00:10:36.403 line:-1 align:center
When they are,


179
00:10:36,470 --> 00:10:41,475 line:-2
I’ll simply set the camera position back
to automatic to make sure they’re visible.


180
00:10:44.778 --> 00:10:46.079 line:-1 align:center
Let’s give it a try.


181
00:10:46,146 --> 00:10:51,451 line:-2
I’ll search for beaches,
see the results...


182
00:10:51.518 --> 00:10:55.522 line:-2 align:center
and then pan away before
searching for playgrounds.


183
00:10:57,824 --> 00:10:58,759 line:-1
Cool!


184
00:10:58,825 --> 00:11:01,528 line:-2
Now when I perform a search,
the results are all displayed


185
00:11:01,595 --> 00:11:04,565 line:-2
even if I had panned
all the way to Rhode Island.


186
00:11:04,631 --> 00:11:08,569 line:-2
There’s another thing I’d like to do
using this position state.


187
00:11:08,635 --> 00:11:10,337 line:-1
After a fun morning in Boston,


188
00:11:10.404 --> 00:11:14.508 line:-2 align:center
my family will be driving North
to spend the afternoon at the beach.


189
00:11:14,575 --> 00:11:17,644 line:-2
I’d like the app to make it easy
to see the North shore coastline


190
00:11:17,711 --> 00:11:20,948 line:-2
so we can get a feel
for where we’ll be going.


191
00:11:21,014 --> 00:11:25,018 line:-1
I’ll use the position state to do that.


192
00:11:27,888 --> 00:11:34,862 line:-2
I’ll add coordinate regions for the city
and for the North Shore.


193
00:11:34.928 --> 00:11:37.064 line:-2 align:center
I’ll switch over
to the BeantownButtons UI


194
00:11:37,130 --> 00:11:42,135 line:-2
and I’ll add a binding
for our position state.


195
00:11:44.938 --> 00:11:49.943 line:-2 align:center
I’ll add a couple of buttons, each setting
the camera position to a region.


196
00:11:51,645 --> 00:11:55,716 line:-2
When I press the City button,
the Map will show Boston.


197
00:11:55.782 --> 00:11:57.217 line:-1 align:center
When I press the Waves button,


198
00:11:57.284 --> 00:12:00.220 line:-2 align:center
the map will show
the north shore coastline.


199
00:12:03.023 --> 00:12:08.962 line:-2 align:center
I’ll switch back to ContentView and pass
a position binding to the buttons UI.


200
00:12:09.029 --> 00:12:15.035 line:-1 align:center
[no audio]


201
00:12:17.171 --> 00:12:23.110 line:-1 align:center
[no audio]


202
00:12:23.177 --> 00:12:25.946 line:-1 align:center
Let’s give it a try!


203
00:12:26.013 --> 00:12:27.347 line:-1 align:center
When I tapped the “waves” button,


204
00:12:27,414 --> 00:12:32,553 line:-2
the map’s position was updated
to show the north shore coastline region.


205
00:12:32,619 --> 00:12:39,126 line:-2
When I tap the “city” button,
it’s updated to show Boston.


206
00:12:39,193 --> 00:12:43,764 line:-2
Behind the scenes, what the Map shows
is ultimately controlled by a MapCamera.


207
00:12:43.830 --> 00:12:47.134 line:-2 align:center
The camera looks at a coordinate
on the ground from a certain distance


208
00:12:47,201 --> 00:12:51,205 line:-2
and the orientation of the camera
determines what is visible in the map.


209
00:12:51,271 --> 00:12:55,075 line:-2
The app I’m building has not had
to create or configure the camera itself.


210
00:12:55.142 --> 00:13:00.347 line:-2 align:center
Instead, it simply specifies what
should be in view using MapCameraPosition.


211
00:13:00,414 --> 00:13:03,016 line:-1
MapKit takes care of the camera for me.


212
00:13:03,083 --> 00:13:07,821 line:-2
The app uses an automatic camera position
to frame content, such as search results.


213
00:13:07,888 --> 00:13:11,925 line:-2
It uses a region position to show Boston
and the North Shore.


214
00:13:11.992 --> 00:13:15.629 line:-2 align:center
You can specify a camera position
to frame other things, as well.


215
00:13:15.696 --> 00:13:20.367 line:-2 align:center
Rect position is used to show an area,
just like how we’ve used region.


216
00:13:20,434 --> 00:13:25,005 line:-2
It simply uses a map rect to represent
that area, instead of a coordinate region.


217
00:13:25,072 --> 00:13:31,078 line:-2
Let’s take a closer look at item, camera,
and user location camera positions.


218
00:13:31.912 --> 00:13:35.582 line:-2 align:center
Using MKMapItem,
you can show a particular place.


219
00:13:35.649 --> 00:13:37.885 line:-1 align:center
This works for all kinds of map items.


220
00:13:37.951 --> 00:13:40.254 line:-1 align:center
If your map item represents Cape Cod Bay,


221
00:13:40,320 --> 00:13:43,957 line:-2
MapKit will automatically zoom out
so that it fits.


222
00:13:44,024 --> 00:13:46,460 line:-2
If you’re trying to show a certain park
in the North End,


223
00:13:46,527 --> 00:13:48,428 line:-2
the camera will zoom in
to show the surroundings


224
00:13:48.495 --> 00:13:51.932 line:-1 align:center
and deliver a sense of place.


225
00:13:51.999 --> 00:13:56.236 line:-2 align:center
You can also simply supply a MapCamera,
configured exactly the way you want it.


226
00:13:56.303 --> 00:14:01.175 line:-2 align:center
Using a MapCamera with a pitch angle is
a great way to deliver a 3D perspective.


227
00:14:01,241 --> 00:14:04,178 line:-2
Or, perhaps you’d like the camera
to follow the user’s location


228
00:14:04,244 --> 00:14:07,147 line:-2
as they’re walking
along the Charles River.


229
00:14:07.214 --> 00:14:09.449 line:-2 align:center
You can supply a fallback position
that will be used


230
00:14:09,516 --> 00:14:11,752 line:-1
when the user’s location is not known,


231
00:14:11.818 --> 00:14:14.655 line:-2 align:center
such as when location authorization
has not been granted


232
00:14:14.721 --> 00:14:18.358 line:-2 align:center
or while the device is trying
to get a location fix.


233
00:14:18.425 --> 00:14:20.794 line:-2 align:center
If you provide a binding
to your camera position state,


234
00:14:20,861 --> 00:14:24,565 line:-2
MapKit will update it
when the camera position changes.


235
00:14:24,631 --> 00:14:30,737 line:-2
Here is a user location camera position.
The followsUserLocation property is true.


236
00:14:30.804 --> 00:14:36.043 line:-2 align:center
If the user pans away, the camera is
no longer following the user’s location.


237
00:14:36.109 --> 00:14:37.644 line:-1 align:center
When the user interacts with the map,


238
00:14:37,711 --> 00:14:41,748 line:-2
the camera position state
is positionedByUser.


239
00:14:41.815 --> 00:14:45.452 line:-2 align:center
If the app sets the camera position
state back to userLocation,


240
00:14:45.519 --> 00:14:47.821 line:-1 align:center
the camera follows the user’s location.


241
00:14:47.888 --> 00:14:53.327 line:-2 align:center
When your app sets the camera position
state, it is not positionedByUser.


242
00:14:53.393 --> 00:14:55.863 line:-2 align:center
The user can position the camera
by interacting with the map


243
00:14:55.929 --> 00:14:59.533 line:-2 align:center
no matter which type of camera position
you specify.


244
00:14:59.600 --> 00:15:03.270 line:-2 align:center
All right! The app is now in control
of what’s in view on the map.


245
00:15:03.337 --> 00:15:06.874 line:-2 align:center
I’ve used the automatic camera position
to ensure the search results are visible


246
00:15:06.940 --> 00:15:09.910 line:-2 align:center
even after the user
has interacted with the map.


247
00:15:09,977 --> 00:15:14,481 line:-2
I’ve used the region camera position
to display Boston and the North Shore.


248
00:15:14.548 --> 00:15:17.551 line:-2 align:center
Next up, instead of only
searching near Boston Common,


249
00:15:17.618 --> 00:15:20.153 line:-2 align:center
I’d like to pan the map to an area
I’m interested in visiting


250
00:15:20.220 --> 00:15:22.322 line:-1 align:center
and search there instead.


251
00:15:22.389 --> 00:15:26.493 line:-2 align:center
I’ll show you how to get the visible
region when the camera changes.


252
00:15:26,560 --> 00:15:31,365 line:-2
I’ll add state to track the region
that’s visible in the map.


253
00:15:31.431 --> 00:15:35.202 line:-2 align:center
I’ll add an onMapCameraChange modifier,
where I’ll grab the visible region


254
00:15:35,269 --> 00:15:38,972 line:-2
from the update context
and stash it in my own state.


255
00:15:39,039 --> 00:15:41,775 line:-2
By default, the closure supplied
to onMapCameraChange


256
00:15:41.842 --> 00:15:45.212 line:-2 align:center
will be called when the user
has finished interacting with the map.


257
00:15:45,279 --> 00:15:48,615 line:-2
To have the closure called while
the user is interacting with the map,


258
00:15:48.682 --> 00:15:53.687 line:-2 align:center
you can request continuous updates
by passing a frequency parameter.


259
00:15:53,754 --> 00:15:56,623 line:-2
In addition to the region property
that I’m using here,


260
00:15:56.690 --> 00:15:59.826 line:-2 align:center
the context also has a property
for the visible map rect


261
00:15:59,893 --> 00:16:02,496 line:-1
and one for the map camera itself.


262
00:16:02,563 --> 00:16:06,500 line:-2
Depending on my needs,
I could use those as well.


263
00:16:06.567 --> 00:16:07.968 line:-1 align:center
I’ll update BeantownButtons


264
00:16:08.035 --> 00:16:13.207 line:-2 align:center
so that it will search within the region
that’s visible to the user.


265
00:16:13.273 --> 00:16:16.076 line:-2 align:center
I’ll add the visibleRegion
to the buttons.


266
00:16:20.080 --> 00:16:24.017 line:-1 align:center
And I’ll use it in the search request.


267
00:16:24,084 --> 00:16:30,090 line:-2
In ContentView, I’ll pass
the visibleRegion to the buttons UI.


268
00:16:35.095 --> 00:16:40.300 line:-1 align:center
Let’s search for North Shore beaches!


269
00:16:40,367 --> 00:16:44,104 line:-2
There’s the North Shore.
Show me some beaches!


270
00:16:44.171 --> 00:16:50.177 line:-2 align:center
Sweet!
How about Rhode Island?


271
00:16:53.046 --> 00:16:56.350 line:-2 align:center
Cool! Now I can search for beaches
in Rhode Island, too!


272
00:16:56.416 --> 00:16:59.253 line:-1 align:center
I’ve enabled this using onMapCameraChange,


273
00:16:59,319 --> 00:17:03,323 line:-2
which informs us when there’s
been a change in what’s visible.


274
00:17:03.390 --> 00:17:05.526 line:-2 align:center
Next, I’d like the app
to make it a little easier


275
00:17:05.592 --> 00:17:07.694 line:-1 align:center
to pick which beach we’ll be going to.


276
00:17:07.761 --> 00:17:09.763 line:-1 align:center
There sure are a lot to choose from.


277
00:17:09,830 --> 00:17:13,700 line:-2
To get started, I’ll add support
for selecting a search result.


278
00:17:13.767 --> 00:17:17.437 line:-2 align:center
Right now, if I tap on a search
result marker, nothing will happen.


279
00:17:17,504 --> 00:17:22,442 line:-2
There is no selection state,
so the markers are not selectable.


280
00:17:22.509 --> 00:17:28.515 line:-1 align:center
[no audio]


281
00:17:33,387 --> 00:17:39,393 line:-2
To enable selection, I’ll just
add a selection binding to our Map.


282
00:17:44,164 --> 00:17:49,169 line:-2
Now let’s see what happens
when I tap on a result.


283
00:17:51.972 --> 00:17:57.311 line:-2 align:center
The balloon animates
to show that it’s selected!


284
00:17:57.377 --> 00:17:59.580 line:-1 align:center
I’m using MKMapItem as the selection type,


285
00:17:59.646 --> 00:18:05.586 line:-2 align:center
so each marker that represents
a map item is now selectable.


286
00:18:05,652 --> 00:18:08,322 line:-2
The Parking Spot annotation
doesn’t represent a map item,


287
00:18:08,388 --> 00:18:12,159 line:-1
so it is not selectable.


288
00:18:12.226 --> 00:18:14.862 line:-2 align:center
If you want to support selection
for Markers and Annotations


289
00:18:14.928 --> 00:18:19.233 line:-2 align:center
that don’t necessarily have the same type
of identity, you can simply tag them.


290
00:18:19,299 --> 00:18:24,371 line:-2
This works the same way it does when
managing selection with Picker and List.


291
00:18:24,438 --> 00:18:27,007 line:-1
Here, the selectedTag state is an Int.


292
00:18:27.074 --> 00:18:28.842 line:-1 align:center
Each marker is tagged with an Int,


293
00:18:28.909 --> 00:18:31.945 line:-2 align:center
so the binding enables selection
for both of them.


294
00:18:32,012 --> 00:18:33,647 line:-1
When using tag to enable selection,


295
00:18:33,714 --> 00:18:37,718 line:-2
you can use any type conforming
to hashable for your selection state.


296
00:18:37,784 --> 00:18:41,321 line:-2
To recap, I’ve added
an MKMapItem selection binding to Map,


297
00:18:41,388 --> 00:18:43,790 line:-2
enabling selection
for the search result markers.


298
00:18:43.857 --> 00:18:46.793 line:-2 align:center
Next, the app should display
some additional information


299
00:18:46,860 --> 00:18:48,996 line:-1
about the selected search result.


300
00:18:49,062 --> 00:18:52,399 line:-2
I’ll add a look around preview
to offer a sneak peek at the beach,


301
00:18:52.466 --> 00:18:55.369 line:-2 align:center
and I’ll add the name of the beach
and the drive time as well.


302
00:18:55,435 --> 00:18:59,006 line:-2
Earlier today, when I was
writing the BeantownButtons View,


303
00:18:59,072 --> 00:19:02,276 line:-2
I also wrote a little
ItemInfoView that shows...


304
00:19:02.342 --> 00:19:06.713 line:-1 align:center
a title, the estimated travel time,


305
00:19:06.780 --> 00:19:09.349 line:-1 align:center
and a Look Around Preview.


306
00:19:09.416 --> 00:19:13.053 line:-2 align:center
The Look Around Preview will show me
what the selected beach looks like.


307
00:19:13,120 --> 00:19:15,889 line:-1
The Preview displays a Look Around Scene.


308
00:19:15.956 --> 00:19:20.561 line:-2 align:center
You can get the scene for a given map item
using MKLookAroundSceneRequest.


309
00:19:20.627 --> 00:19:23.430 line:-2 align:center
The scene will be fetched
when the view is displayed,


310
00:19:23,497 --> 00:19:27,434 line:-2
and again any time
the selected search result changes.


311
00:19:27,501 --> 00:19:31,238 line:-2
Finally, there’s a property that formats
an MKRoute’s expected travel time


312
00:19:31,305 --> 00:19:34,708 line:-2
for display, using
DateComponentsFormatter.


313
00:19:34,775 --> 00:19:40,113 line:-2
I’ll switch back to ContentView
and add this ItemInfoView.


314
00:19:40,180 --> 00:19:41,148 line:-1
First things first:


315
00:19:41,215 --> 00:19:45,219 line:-2
I’ll get a route from the parking garage
to the selected search result.


316
00:19:45.285 --> 00:19:51.091 line:-1 align:center
I’ll add state to keep track of a route...


317
00:19:51,158 --> 00:19:56,163 line:-2
and I’ll add a function
that uses MKDirections to get one...


318
00:19:56,230 --> 00:19:57,297 line:-1
and set the state.


319
00:20:03,904 --> 00:20:05,672 line:-1
I’ll add another onChange modifier


320
00:20:05.739 --> 00:20:10.677 line:-2 align:center
to call the function
when the selection changes.


321
00:20:10.744 --> 00:20:17.751 line:-1 align:center
[no audio]


322
00:20:22.990 --> 00:20:28.996 line:-2 align:center
The app will show our item info view
when it has a selected search result.


323
00:20:32.900 --> 00:20:35.769 line:-2 align:center
While I’m at it, I’ll hide
the Marker titles for the search results


324
00:20:35.836 --> 00:20:38.672 line:-2 align:center
to clean up the appearance
of the map just a bit.


325
00:20:38.739 --> 00:20:43.644 line:-2 align:center
The ItemInfoView will display the name
of the selected place instead.


326
00:20:43.710 --> 00:20:49.716 line:-2 align:center
Okay!
Let’s see what we got.


327
00:20:54.521 --> 00:21:00.527 line:-2 align:center
Ya know, I heard there was
a playground near this one…


328
00:21:01.862 --> 00:21:05.866 line:-1 align:center
It looks pretty nice.


329
00:21:07,801 --> 00:21:13,740 line:-1
I wonder what’s over this way?


330
00:21:13.807 --> 00:21:19.813 line:-1 align:center
[no audio]


331
00:21:23,016 --> 00:21:25,786 line:-2
Nice!
A beach with a playground, right there?


332
00:21:25,853 --> 00:21:30,424 line:-2
For our family,
that’s gonna be pretty tough to beat.


333
00:21:30.490 --> 00:21:32.359 line:-2 align:center
It’s about half an hour
from Boston Common.


334
00:21:32.426 --> 00:21:34.528 line:-1 align:center
Seems like a great spot.


335
00:21:34,595 --> 00:21:37,030 line:-1
To recap, I’ve added a look around preview


336
00:21:37.097 --> 00:21:39.766 line:-2 align:center
that will be displayed
when a marker is selected.


337
00:21:39.833 --> 00:21:42.469 line:-2 align:center
Along with the estimated travel time
from MKRoute,


338
00:21:42.536 --> 00:21:45.672 line:-1 align:center
this will really help us pick a beach.


339
00:21:45.739 --> 00:21:48.876 line:-2 align:center
Next, since we already have a route
to show the travel time,


340
00:21:48,942 --> 00:21:51,411 line:-2
we should totally use it
to display the driving route


341
00:21:51,478 --> 00:21:54,815 line:-2
from Boston Common
to the selected search result.


342
00:21:54.882 --> 00:21:57.784 line:-2 align:center
I’ll add a MapPolyline overlay
to show the route,


343
00:21:57.851 --> 00:22:02.856 line:-2 align:center
and I’ll show you some other types
of overlay content you can add as well.


344
00:22:02,923 --> 00:22:05,526 line:-2
When a route is available,
I’ll add a MapPolyline,


345
00:22:05,592 --> 00:22:09,596 line:-1
and stroke it with blue.


346
00:22:09.663 --> 00:22:15.669 line:-1 align:center
Let’s see it on the map.


347
00:22:17,204 --> 00:22:23,210 line:-1
[no audio]


348
00:22:29,483 --> 00:22:31,985 line:-1
Looks like a pretty nice drive!


349
00:22:32.052 --> 00:22:35.989 line:-2 align:center
It was pretty easy to use MapPolyline
with MKRoute.


350
00:22:36.056 --> 00:22:40.861 line:-2 align:center
You can also use MapPolyline
to show your own location data.


351
00:22:40,928 --> 00:22:43,564 line:-2
You can use StrokeStyle to deliver
some pretty fancy stuff,


352
00:22:43,630 --> 00:22:46,733 line:-1
such as dashes and a gradient.


353
00:22:46,800 --> 00:22:48,769 line:-1
If you’re looking to highlight an area,


354
00:22:48,836 --> 00:22:52,206 line:-2
you’ll want to use MapPolygon
or MapCircle.


355
00:22:52.272 --> 00:22:57.377 line:-2 align:center
Here are two polygons
that mark a couple of parks.


356
00:22:57,444 --> 00:22:59,947 line:-2
Here are two circles
marking the same parks.


357
00:23:00.013 --> 00:23:03.851 line:-2 align:center
You’ll notice that an overlay level
is specified for each circle.


358
00:23:03,917 --> 00:23:08,021 line:-2
The pink circle is using
the default overlay level of above roads,


359
00:23:08,088 --> 00:23:10,924 line:-2
which puts the map’s labels
above the circle.


360
00:23:10.991 --> 00:23:14.628 line:-1 align:center
The cyan circle is using above labels.


361
00:23:14,695 --> 00:23:16,997 line:-1
The app is really taking shape.


362
00:23:17,064 --> 00:23:19,933 line:-2
I’ve added a MapPolyline
to show the driving route to the beach,


363
00:23:20,000 --> 00:23:24,037 line:-2
and I’ve shown you a couple of other
overlay types that you can use as well.


364
00:23:24,104 --> 00:23:28,709 line:-2
Next up, I want the app to make
it really easy to figure out where I am.


365
00:23:28,775 --> 00:23:31,612 line:-2
When we get to Boston and
start walking around, it’s possible,


366
00:23:31.678 --> 00:23:35.249 line:-2 align:center
maybe even likely,
that we’ll get just a little bit lost.


367
00:23:35,315 --> 00:23:39,086 line:-2
I’ll add UserAnnotation as content
to show where I am,


368
00:23:39,152 --> 00:23:42,523 line:-2
and I’ll add a MapUserLocationButton
to find myself.


369
00:23:42,589 --> 00:23:44,825 line:-2
You’ll learn about several other types
of map controls


370
00:23:44.892 --> 00:23:47.394 line:-1 align:center
that are available to use as well.


371
00:23:47,461 --> 00:23:49,029 line:-1
So when I’m trying to find myself,


372
00:23:49.096 --> 00:23:53.634 line:-2 align:center
I usually start by looking
for the little blue dot on the map.


373
00:23:53,700 --> 00:23:55,903 line:-2
I’ve added UserAnnotation
to my map content,


374
00:23:55.969 --> 00:24:00.574 line:-1 align:center
so now my location appears on the map.


375
00:24:00,641 --> 00:24:06,580 line:-1
Where am I?


376
00:24:06,647 --> 00:24:11,952 line:-1
[no audio]


377
00:24:12.019 --> 00:24:14.388 line:-1 align:center
There I am!


378
00:24:14.454 --> 00:24:16.223 line:-1 align:center
It looks like I’m really quite far away


379
00:24:16.290 --> 00:24:20.294 line:-2 align:center
from those playgrounds and beaches
we’ve been checking out.


380
00:24:25,065 --> 00:24:30,304 line:-2
I sure had to zoom out and pan a lot
to get over to Apple Park.


381
00:24:30.370 --> 00:24:36.376 line:-2 align:center
MapUserLocationButton
will sure make that easier.


382
00:24:40,547 --> 00:24:45,252 line:-2
Now, I can tap the button
to display my location.


383
00:24:45.319 --> 00:24:51.425 line:-2 align:center
The map camera will follow me
as I move around.


384
00:24:51.491 --> 00:24:57.497 line:-2 align:center
I’ve also added a MapCompass
and a MapScaleView.


385
00:25:04,071 --> 00:25:08,141 line:-2
The default mapControls configuration
shows a compass when the map is rotated,


386
00:25:08,208 --> 00:25:12,012 line:-2
and a scale indicator while
the user is zooming in or out.


387
00:25:12,079 --> 00:25:14,615 line:-2
I want these default controls
in this app too,


388
00:25:14.681 --> 00:25:19.586 line:-2 align:center
so I’ve specified them in addition
to the user location button.


389
00:25:19.653 --> 00:25:22.723 line:-2 align:center
I’ve added all of these
using the mapControls modifier,


390
00:25:22.789 --> 00:25:27.261 line:-2 align:center
so the map will automatically display them
in their default locations.


391
00:25:27,327 --> 00:25:29,429 line:-2
This includes map controls
on all platforms,


392
00:25:29,496 --> 00:25:35,102 line:-2
including the MapZoomStepper and
MapPitchSlider that you’ll find on macOS.


393
00:25:35.169 --> 00:25:37.871 line:-2 align:center
If you’d prefer
to position these controls yourself,


394
00:25:37.938 --> 00:25:40.174 line:-1 align:center
you can present them in your own UI.


395
00:25:40,240 --> 00:25:42,042 line:-1
The Map controls are simply views,


396
00:25:42.109 --> 00:25:44.745 line:-2 align:center
so instead of using
the mapControls modifier,


397
00:25:44,811 --> 00:25:48,415 line:-2
you can just add them
as you would any other view.


398
00:25:48,482 --> 00:25:51,218 line:-2
When you do this,
you will need to use the mapScope modifier


399
00:25:51,285 --> 00:25:54,855 line:-2
to associate your controls
with a particular Map scope.


400
00:25:54,922 --> 00:25:57,658 line:-2
We’re almost
at the end of our presentation,


401
00:25:57.724 --> 00:26:00.794 line:-2 align:center
so let’s summarize
what we've learned today.


402
00:26:00.861 --> 00:26:03.764 line:-2 align:center
MapKit for SwiftUI
is an incredibly powerful,


403
00:26:03.830 --> 00:26:07.701 line:-2 align:center
easy-to-use API
to integrate Maps into your app.


404
00:26:07,768 --> 00:26:09,903 line:-1
It allows you to use Markers,


405
00:26:09.970 --> 00:26:14.141 line:-2 align:center
Annotations, and Overlays
to show your content on a map.


406
00:26:14,208 --> 00:26:18,712 line:-2
Map Camera and Map Controls
allow you to tailor the map to your needs.


407
00:26:18.779 --> 00:26:23.417 line:-2 align:center
Finally, MapStyle and Look Around
give your users a real sense of place.


408
00:26:23.483 --> 00:26:26.453 line:-2 align:center
These are just some of the features
of MapKit for SwiftUI,


409
00:26:26.520 --> 00:26:30.290 line:-2 align:center
so make sure to check out
the Developer Documentation to learn more.


410
00:26:30.357 --> 00:26:36.363 line:-2 align:center
And of course, because this is SwiftUI,
your map will look great on all platforms!


411
00:26:36.430 --> 00:26:38.699 line:-1 align:center
A few final thoughts as we wrap up.


412
00:26:38,765 --> 00:26:43,937 line:-2
We’ve extended our Apple Maps Server APIs
to support Autocomplete and Directions.


413
00:26:44,004 --> 00:26:46,406 line:-2
To learn more
about how to use our Server APIs,


414
00:26:46.473 --> 00:26:51.278 line:-2 align:center
check out last year’s dub-dub session
“Meet Apple Maps Server APIs.”


415
00:26:51.345 --> 00:26:53.580 line:-2 align:center
As always,
we’d love to hear your feedback!


416
00:26:53.647 --> 00:26:57.284 line:-2 align:center
Please use the Feedback Assistant
to let us hear your thoughts.


417
00:26:57.351 --> 00:26:58.652 line:-1 align:center
Last, but not least,


418
00:26:58,719 --> 00:27:02,322 line:-2
I encourage you to check out
the new features in SwiftUI this year.


419
00:27:02.389 --> 00:27:06.059 line:-2 align:center
Animation plans are a great way
to add animations to your map!


420
00:27:06.126 --> 00:27:08.996 line:-1 align:center
Check them out in the session below.


421
00:27:09.062 --> 00:27:11.298 line:-2 align:center
That’s it!
Thanks so much for watching!


422
00:27:11.365 --> 00:27:14.301 line:-1 align:center
I’ll see ya at the beach!


423
00:27:14.368 --> 00:27:16.370 line:-1 align:center
♪ ♪

