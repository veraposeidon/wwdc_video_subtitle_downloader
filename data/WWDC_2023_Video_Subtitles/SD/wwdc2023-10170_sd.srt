2
00:00:01,001 --> 00:00:07,007 line:-1
â™ª â™ª


3
00:00:10.744 --> 00:00:12.513 line:-1 align:center
Evan: Hi, my name is Evan.


4
00:00:12,579 --> 00:00:15,382 line:-2
Today, we are going beyond
the basics of structured concurrency,


5
00:00:15,449 --> 00:00:20,521 line:-2
exploring how structured tasks
can simplify realizing useful behaviors.


6
00:00:20.587 --> 00:00:24.591 line:-2 align:center
Before we get started, if you're new
or want to review structured concurrency,


7
00:00:39,606 --> 00:00:44,077 line:-2
priority propagation,
and useful task-local value behaviors.


8
00:00:44,144 --> 00:00:46,180 line:-2
Then we will cover some patterns
with task groups


9
00:00:46,246 --> 00:00:48,715 line:-1
to help manage resource usage.


10
00:00:48.782 --> 00:00:51.618 line:-2 align:center
Finally, we'll look at how all
of these come together


11
00:00:51,685 --> 00:00:56,723 line:-2
to facilitate profiling and tracing tasks
in a server environment.


12
00:00:56,790 --> 00:01:00,527 line:-2
Structured concurrency enables
you to reason about concurrent code


13
00:01:00,594 --> 00:01:04,698 line:-2
using well-defined points where execution
branches off and runs concurrently,


14
00:01:04,765 --> 00:01:07,234 line:-2
and where results
from that execution rejoin,


15
00:01:07,301 --> 00:01:11,004 line:-2
similar to how "if"-blocks and "for"-loops
define how control-flow behaves


16
00:01:11,071 --> 00:01:13,207 line:-1
in synchronous code.


17
00:01:13.273 --> 00:01:16.476 line:-2 align:center
Concurrent execution is triggered
when you use an "async let",


18
00:01:16,543 --> 00:01:20,113 line:-2
a task group,
or create a task or detached task.


19
00:01:20,180 --> 00:01:23,517 line:-2
Results rejoin the current execution
at a suspension point,


20
00:01:23.584 --> 00:01:26.119 line:-1 align:center
indicated by an "await".


21
00:01:26,186 --> 00:01:28,488 line:-1
Not all tasks are structured.


22
00:01:28,555 --> 00:01:32,759 line:-2
Structured tasks are created
using "async let" and task groups,


23
00:01:32.826 --> 00:01:37.231 line:-2 align:center
while unstructured tasks are created
using Task and Task.detached.


24
00:01:37.297 --> 00:01:40.567 line:-2 align:center
Structured tasks live to the end
of the scope where they are declared,


25
00:01:40,634 --> 00:01:43,437 line:-2
like local variables,
and are automatically cancelled


26
00:01:43,504 --> 00:01:44,905 line:-1
when they go out of scope,


27
00:01:44,972 --> 00:01:48,308 line:-2
making it clear
how long the task will live.


28
00:01:48.375 --> 00:01:51.345 line:-2 align:center
Whenever possible,
prefer structured Tasks.


29
00:01:51,411 --> 00:01:53,914 line:-2
The benefits of structured concurrency
discussed later


30
00:01:53,981 --> 00:01:57,651 line:-1
do not always apply to unstructured tasks.


31
00:01:57.718 --> 00:02:02.122 line:-2 align:center
Before we dive into the code,
let's come up with a concrete example.


32
00:02:02,189 --> 00:02:05,893 line:-2
Suppose we have a kitchen
with multiple chefs preparing soup.


33
00:02:05.959 --> 00:02:08.762 line:-2 align:center
Soup preparation consists
of multiple steps.


34
00:02:08.829 --> 00:02:11.365 line:-2 align:center
The chefs have to cut ingredients,
marinate chicken,


35
00:02:11,431 --> 00:02:16,003 line:-2
bring the broth to a boil, and finally,
cook the soup before it is ready to serve.


36
00:02:16.069 --> 00:02:18.172 line:-1 align:center
Some tasks can be performed in parallel,


37
00:02:35.689 --> 00:02:39.326 line:-2 align:center
While this expresses which tasks
can run concurrently and which cannot,


38
00:02:39,393 --> 00:02:43,397 line:-2
this is not the recommended way
to use concurrency in Swift.


39
00:02:43.463 --> 00:02:47.301 line:-2 align:center
Here is the same function expressed
using structured concurrency.


40
00:02:47.367 --> 00:02:50.637 line:-2 align:center
Since we have a known number
of child tasks to create,


41
00:02:50.704 --> 00:02:54.408 line:-2 align:center
we can use
the convenient "async let" syntax.


42
00:02:54,474 --> 00:02:58,579 line:-2
These tasks form a structured relationship
with their parent task.


43
00:02:58,645 --> 00:03:01,248 line:-2
We will talk about
why this is important shortly.


44
00:03:01,315 --> 00:03:04,284 line:-2
makeSoup calls a number
of asynchronous functions.


45
00:03:04.351 --> 00:03:07.588 line:-2 align:center
One of them is "chopIngredients",
which takes a list of ingredients


46
00:03:07.654 --> 00:03:11.625 line:-2 align:center
and uses a task group
to chop all of them concurrently.


47
00:03:11,692 --> 00:03:16,230 line:-2
Now that we are familiar with makeSoup,
let's take a look at the task hierarchy.


48
00:03:16,296 --> 00:03:19,166 line:-2
Child tasks are indicated
by the colored boxes,


49
00:03:19.233 --> 00:03:22.803 line:-2 align:center
while the arrows point
from parent task to child task.


50
00:03:22.870 --> 00:03:26.273 line:-2 align:center
makeSoup has three child tasks
for chopping ingredients,


51
00:03:26.340 --> 00:03:29.276 line:-1 align:center
marinating chicken, and boiling broth.


52
00:03:29,343 --> 00:03:34,515 line:-2
chopIngredients uses a task group to
create a child task for each ingredient.


53
00:03:34,581 --> 00:03:38,919 line:-2
If we have three ingredients,
it too will create three children.


54
00:03:38,986 --> 00:03:43,490 line:-2
This parent-child hierarchy forms a tree,
the task tree.


55
00:03:43,557 --> 00:03:45,626 line:-1
Now that we've introduced the task tree,


56
00:03:45,692 --> 00:03:48,629 line:-2
let's start identifying
how that benefits our code.


57
00:03:48,695 --> 00:03:52,499 line:-2
Task cancellation is used to signal
that the app no longer needs the result


58
00:03:52,566 --> 00:03:56,436 line:-2
of a task and the task should stop
and either return a partial result


59
00:03:56,503 --> 00:03:57,938 line:-1
or throw an error.


60
00:03:58,005 --> 00:04:02,576 line:-2
In our soup example, we may want to stop
making a soup order if that customer left,


61
00:04:02.643 --> 00:04:07.948 line:-2 align:center
decided they wanted to order
something else, or it's closing time.


62
00:04:21.962 --> 00:04:26.600 line:-2 align:center
Unstructured tasks are cancelled
explicitly with the "cancel" function.


63
00:04:26,667 --> 00:04:32,105 line:-2
Cancelling the parent task results
in the cancellation of all child tasks.


64
00:04:32,172 --> 00:04:36,476 line:-2
Cancellation is cooperative,
so child tasks aren't immediately stopped.


65
00:04:36,543 --> 00:04:40,314 line:-2
It simply sets
the "isCancelled" flag on that task.


66
00:04:40,380 --> 00:04:43,817 line:-2
Actually acting on the cancellation
is done in your code.


67
00:04:43,884 --> 00:04:45,552 line:-1
Cancellation is a race.


68
00:04:45.619 --> 00:04:48.188 line:-1 align:center
If the task is cancelled before our check,


69
00:04:48,255 --> 00:04:51,558 line:-2
"makeSoup" throws
a "SoupCancellationError".


70
00:04:51,625 --> 00:04:54,661 line:-2
If the task is cancelled
after the guard executes,


71
00:04:54.728 --> 00:04:58.398 line:-2 align:center
the program will carry on
preparing the soup.


72
00:04:58.465 --> 00:05:00.367 line:-2 align:center
If we are going to throw
a cancellation error


73
00:05:00,434 --> 00:05:04,705 line:-2
instead of returning a partial result,
we can call "Task.checkCancellation",


74
00:05:04,771 --> 00:05:08,342 line:-2
which throws a "CancellationError"
if the task was cancelled.


75
00:05:08.408 --> 00:05:11.178 line:-2 align:center
It's important to check
the task cancellation status


76
00:05:11.245 --> 00:05:13.080 line:-1 align:center
before starting any expensive work


77
00:05:13.146 --> 00:05:15.883 line:-2 align:center
to verify that the result
is still necessary.


78
00:05:15.949 --> 00:05:19.186 line:-2 align:center
Cancellation checking is synchronous,
so any function,


79
00:05:19,253 --> 00:05:22,823 line:-2
asynchronous or synchronous,
that should react to cancellation


80
00:05:22.890 --> 00:05:27.528 line:-2 align:center
should check the task cancellation status
before continuing.


81
00:05:27,594 --> 00:05:30,163 line:-2
Polling for cancellation
with "isCancelled"


82
00:05:30,230 --> 00:05:33,367 line:-2
or "checkCancellation" is useful
when the task is running,


83
00:05:33.433 --> 00:05:36.203 line:-2 align:center
but there are times when
you may need to respond to cancellation


84
00:05:36,270 --> 00:05:39,406 line:-2
while the task is suspended
and no code is running,


85
00:05:39,473 --> 00:05:42,743 line:-1
like when implementing an AsyncSequence.


86
00:05:42,809 --> 00:05:47,447 line:-2
This is where
"withTaskCancellationHandler" is useful.


87
00:05:47,514 --> 00:05:49,983 line:-1
Let's introduce a shift function.


88
00:05:50.050 --> 00:05:52.152 line:-2 align:center
The cook should make soups
as orders come in


89
00:05:52.219 --> 00:05:58.258 line:-2 align:center
until the end of their shift,
signaled by a task cancellation.


90
00:05:58.325 --> 00:06:00.427 line:-1 align:center
In one cancellation scenario,


91
00:06:00,494 --> 00:06:04,298 line:-2
the asynchronous for-loop
gets a new order before it is cancelled.


92
00:06:04.364 --> 00:06:06.466 line:-2 align:center
The "makeSoup" function
handles the cancellation


93
00:06:23.183 --> 00:06:26.453 line:-2 align:center
Instead, we have to use
the cancellation handler


94
00:06:26,520 --> 00:06:31,425 line:-2
to detect the cancellation event and
break out of the asynchronous for-loop.


95
00:06:31.491 --> 00:06:35.095 line:-2 align:center
The orders are produced
from an AsyncSequence.


96
00:06:35.162 --> 00:06:38.432 line:-2 align:center
AsyncSequences
are driven by an AsyncIterator,


97
00:06:38,498 --> 00:06:42,536 line:-2
which defines
an asynchronous "next" function.


98
00:06:42,603 --> 00:06:44,238 line:-1
Like with synchronous iterators,


99
00:06:44.304 --> 00:06:48.141 line:-2 align:center
the "next" function
returns the next element in the sequence,


100
00:06:48,208 --> 00:06:52,713 line:-2
or nil to indicate
that we are at the end of the sequence.


101
00:06:52,779 --> 00:06:55,983 line:-2
Many AsyncSequences are
implemented with a state machine,


102
00:06:56,049 --> 00:06:59,186 line:-1
which we use to stop the running sequence.


103
00:06:59.253 --> 00:07:02.256 line:-2 align:center
In our example here,
when "isRunning" is true,


104
00:07:02.322 --> 00:07:05.259 line:-2 align:center
the sequence
should continue emitting orders.


105
00:07:05,325 --> 00:07:06,793 line:-1
Once the task is cancelled,


106
00:07:06.860 --> 00:07:10.430 line:-2 align:center
we need to indicate that the sequence
is done and should shut down.


107
00:07:10.497 --> 00:07:13.734 line:-2 align:center
We do this by synchronously
calling the "cancel" function


108
00:07:13.800 --> 00:07:16.103 line:-1 align:center
on our sequence state machine.


109
00:07:16,170 --> 00:07:20,274 line:-2
Note that because the cancellation handler
runs immediately,


110
00:07:20,340 --> 00:07:24,745 line:-2
the state machine is shared mutable state
between the cancellation handler


111
00:07:24,811 --> 00:07:28,282 line:-2
and main body,
which can run concurrently.


112
00:07:28.348 --> 00:07:30.884 line:-1 align:center
We'll need to protect our state machine.


113
00:07:30.951 --> 00:07:34.488 line:-2 align:center
While actors are great
for protecting encapsulated state,


114
00:07:34.555 --> 00:07:38.158 line:-2 align:center
we want to modify and read individual
properties on our state machine,


115
00:07:38,225 --> 00:07:41,461 line:-2
so actors aren't
quite the right tool for this.


116
00:07:41.528 --> 00:07:46.066 line:-2 align:center
Furthermore, we can't guarantee the order
that operations run on an actor,


117
00:07:46.133 --> 00:07:49.303 line:-2 align:center
so we can't ensure that our cancellation
will run first.


118
00:07:49,369 --> 00:07:51,572 line:-1
We'll need something else.


119
00:07:51,638 --> 00:07:55,175 line:-2
I've decided to use atomics
from the Swift Atomics package,


120
00:07:55.242 --> 00:07:58.445 line:-2 align:center
but we could use a dispatch queue
or locks.


121
00:07:58.512 --> 00:08:01.448 line:-2 align:center
These mechanisms allow us
to synchronize the shared state,


122
00:08:14.761 --> 00:08:18.498 line:-2 align:center
Instead of having to worry about
a cancellation token and synchronization,


123
00:08:18,565 --> 00:08:21,535 line:-2
we let the Swift runtime
handle it for us safely.


124
00:08:21.602 --> 00:08:25.372 line:-2 align:center
Remember, cancellation does not
stop a task from running,


125
00:08:25.439 --> 00:08:28.542 line:-2 align:center
it only signals to the task
that it has been cancelled


126
00:08:28,609 --> 00:08:31,144 line:-2
and should stop running
as soon a possible.


127
00:08:31,211 --> 00:08:35,682 line:-2
It is up to your code
to check for cancellation.


128
00:08:35.749 --> 00:08:38.719 line:-2 align:center
Next, let's consider
how the structured task tree


129
00:08:38,785 --> 00:08:42,656 line:-2
helps propagate priority
and avoid priority inversions.


130
00:08:42.723 --> 00:08:45.959 line:-2 align:center
First, what is priority,
and why do we care?


131
00:08:46,026 --> 00:08:51,098 line:-2
Priority is your way to communicate
to the system how urgent a given task is.


132
00:08:51,164 --> 00:08:53,734 line:-2
Certain tasks,
like responding to a button press,


133
00:08:53,800 --> 00:08:57,504 line:-2
need to run immediately
or the app will appear frozen.


134
00:08:57.571 --> 00:09:01.141 line:-2 align:center
Meanwhile, other tasks,
like prefetching content from a server,


135
00:09:01,208 --> 00:09:04,344 line:-2
can run in the background
without anyone noticing.


136
00:09:04,411 --> 00:09:08,015 line:-1
Second, what is a priority inversion?


137
00:09:08,081 --> 00:09:11,418 line:-2
A priority inversion happens
when a high-priority task is waiting


138
00:09:11.485 --> 00:09:15.088 line:-1 align:center
on the result of a lower-priority task.


139
00:09:15.155 --> 00:09:19.326 line:-2 align:center
By default, child tasks inherit
their priority from their parent,


140
00:09:19,393 --> 00:09:23,597 line:-2
so assuming that makeSoup is running
in a task at medium priority,


141
00:09:23,664 --> 00:09:28,535 line:-2
all child tasks
will also run at medium priority.


142
00:09:28,602 --> 00:09:33,006 line:-2
Let's say a VIP guest who comes
to our restaurant looking for soup.


143
00:09:33.073 --> 00:09:37.477 line:-2 align:center
We give their soup a higher priority
to ensure we get a good review.


144
00:09:37,544 --> 00:09:42,216 line:-2
When they await their soup, the priority
of all child tasks is escalated,


145
00:09:42,282 --> 00:09:46,687 line:-2
ensuring that no high-priority task
is waiting on a lower-priority task,


146
00:09:46,753 --> 00:09:49,990 line:-1
avoiding the priority inversion.


147
00:09:50,057 --> 00:09:53,093 line:-2
Awaiting a result from a task
with a higher priority


148
00:09:53.160 --> 00:09:57.631 line:-2 align:center
escalates the priority
of all child tasks in the task tree.


149
00:21:17,678 --> 00:21:20,380 line:-2
The span name is presented
in the tracing UI.


150
00:21:20.447 --> 00:21:22.583 line:-2 align:center
You'll want to keep them
short and descriptive


151
00:21:22.649 --> 00:21:27.888 line:-2 align:center
so that you can easily find information
about a specific span without clutter.

