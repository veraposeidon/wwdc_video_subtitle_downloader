2
00:00:00.033 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:03.003 --> 00:00:10.010 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


4
00:00:10.577 --> 00:00:12.079 line:-1 position:50%
Howdy!
Welcome to


5
00:00:12,079 --> 00:00:15,482 line:-1
"Enhance your iPad and iPhone
apps for the Shared Space."


6
00:00:15,482 --> 00:00:16,683 line:-1
My name is John Marc.


7
00:00:16.683 --> 00:00:20.120 line:-1 position:50%
I'm a platform compatibility
engineer.


8
00:00:20,120 --> 00:00:24,491 line:-1
Most iPad and iPhone apps
run great without any changes,


9
00:00:24,491 --> 00:00:27,394 line:-1
taking advantage of the hard
work you've already done


10
00:00:27,394 --> 00:00:31,665 line:-1
and making it work
on Apple's latest platform.


11
00:00:31,665 --> 00:00:33,300 line:0
If you're just getting started,


12
00:00:33,300 --> 00:00:37,104 position:50%
watch "Run your iPad and iPhone
apps in the Shared Space"


13
00:00:37,104 --> 00:00:40,707 line:0
first to learn about
the system's built-in behaviors,


14
00:00:40,707 --> 00:00:44,678 line:0
functional differences,
and testing setup.


15
00:00:44.678 --> 00:00:46.880 line:-1 position:50%
In this video, I'll go over
how to enhance


16
00:00:46,880 --> 00:00:50,117 line:-1
your iPad or iPhone app
from a great app


17
00:00:50.117 --> 00:00:52.753 line:-1 position:50%
to one that feels at home
on this new platform.


18
00:00:52.753 --> 00:00:56.390 line:-1 position:50%
I'll review the new interaction,
visual-appearance changes,


19
00:00:56.390 --> 00:00:58.926 line:-1 position:50%
and media recording
and playback functionality


20
00:00:58.926 --> 00:01:01.395 line:-1 position:50%
your app should expect.


21
00:01:01,395 --> 00:01:05,132 line:-1
Interaction on this platform
is fun and feels familiar.


22
00:01:05.132 --> 00:01:10.170 line:-1 position:50%
One of the key components is
the new natural input technique.


23
00:01:10,170 --> 00:01:12,506 line:-1
Tap allows people
to look at a button,


24
00:01:12,506 --> 00:01:15,442 line:-1
then tap their fingers together
to interact.


25
00:01:15,442 --> 00:01:17,978 line:-1
People can tap to toggle, tap,


26
00:01:17.978 --> 00:01:22.849 line:-1 position:50%
hold and swipe to interact
with a slider, or tap a button.


27
00:01:24.818 --> 00:01:27.721 line:-1 position:50%
Direct touch requires
reaching out to the app


28
00:01:27,721 --> 00:01:31,625 line:-1
and touching the button
in the space with one finger.


29
00:01:31,625 --> 00:01:33,493 line:-1
Regardless
of interaction method,


30
00:01:33,493 --> 00:01:35,996 line:-1
the button provides
continuous visual feedback


31
00:01:35.996 --> 00:01:40.300 line:-1 position:50%
to help with
interaction accuracy.


32
00:01:40,300 --> 00:01:42,436 line:0
In this video,
the cursor represents


33
00:01:42,436 --> 00:01:44,204 line:0
where a person is looking.


34
00:01:44,204 --> 00:01:46,873 line:0
When looking at a button,
a highlight hover effect tints


35
00:01:46,873 --> 00:01:50,978 line:0
the control's color to help
understand where focus is.


36
00:01:50,978 --> 00:01:52,946 line:0
Notice that
each item highlights


37
00:01:52,946 --> 00:01:55,115 line:0
while looking through this list.


38
00:01:55,115 --> 00:01:59,086 position:50%
That highlight follows focus
to the left, or right


39
00:01:59,086 --> 00:02:02,389 line:0
so it's clear what's happening.


40
00:02:02.389 --> 00:02:04.558 line:-1 position:50%
Hover effects exist on controls


41
00:02:04,558 --> 00:02:07,294 line:-1
to inform
where people are looking.


42
00:02:07.294 --> 00:02:11.331 line:-1 position:50%
Controls that are inactive
do not get hover effects.


43
00:02:11,331 --> 00:02:15,268 line:-1
System controls take care of
all these hover effects for you.


44
00:02:15,268 --> 00:02:17,437 line:-1
If you're only using
the standard controls,


45
00:02:17,437 --> 00:02:20,707 line:-1
you're ready to rock and roll
without any changes here.


46
00:02:20,707 --> 00:02:22,609 line:-1
If you're building
custom controls,


47
00:02:22,609 --> 00:02:26,980 line:-1
your hover effects
may need some tuning.


48
00:02:26.980 --> 00:02:28.515 line:-1 position:50%
Here's an example of an app


49
00:02:28.515 --> 00:02:31.251 line:-1 position:50%
with a card-based interface
on iPad.


50
00:02:31,251 --> 00:02:37,124 line:-1
Each card contains a photo,
title, date, and menu button.


51
00:02:37,124 --> 00:02:40,227 line:-1
Here is that same app
running in Simulator.


52
00:02:40.227 --> 00:02:42.529 line:-1 position:50%
Because the menu button
is a system control,


53
00:02:42.529 --> 00:02:44.898 line:-1 position:50%
it's already working
as expected.


54
00:02:44.898 --> 00:02:48.902 line:-1 position:50%
However, each card is a simple
VStack with a .onTap modifier,


55
00:02:48,902 --> 00:02:51,872 line:-1
so it does not receive
hover effects.


56
00:02:51.872 --> 00:02:54.007 line:-1 position:50%
That entire card
is a tap target,


57
00:02:54,007 --> 00:02:56,143 line:-1
so it needs hover effects
to inform people


58
00:02:56,143 --> 00:02:58,545 line:-1
it has an available interaction.


59
00:02:58,545 --> 00:03:02,082 line:-1
Let's focus on
one of those cards to fix it.


60
00:03:02.082 --> 00:03:03.717 line:-1 position:50%
System controls, like Button,


61
00:03:03,717 --> 00:03:05,919 line:-1
receive hover effects
automatically,


62
00:03:05,919 --> 00:03:10,090 line:-1
so the button used as a menu
here already has a hover effect.


63
00:03:10,090 --> 00:03:12,959 line:-1
However, in this example,
people click the entire card


64
00:03:12.959 --> 00:03:16.229 line:-1 position:50%
to view more detail.


65
00:03:16.229 --> 00:03:18.632 line:-1 position:50%
By adding .hoverEffect
onto the VStack,


66
00:03:18.632 --> 00:03:20.233 line:-1 position:50%
the entire card
becomes available


67
00:03:20,233 --> 00:03:25,205 line:-1
for interaction update and
informs people it's tappable.


68
00:03:25.205 --> 00:03:28.208 line:-1 position:50%
Many custom video players
have optimized hit targets


69
00:03:28.208 --> 00:03:30.043 line:-1 position:50%
so people don't have to be
quite so precise


70
00:03:30,043 --> 00:03:32,245 line:-1
to interact with them.


71
00:03:32.245 --> 00:03:35.582 line:-1 position:50%
In this example of a custom
video player on iPad,


72
00:03:35.582 --> 00:03:37.851 line:-1 position:50%
the tap targets
are significantly larger


73
00:03:37,851 --> 00:03:40,053 line:-1
than the symbols
on the skip forward


74
00:03:40,053 --> 00:03:42,489 line:-1
and skip backward buttons.


75
00:03:42,489 --> 00:03:45,559 line:-1
The bordered boxes here
show the size of the tap targets


76
00:03:45,559 --> 00:03:49,496 line:-1
where people can interact.


77
00:03:49,496 --> 00:03:51,798 line:-1
On Simulator now,
hover effects


78
00:03:51.798 --> 00:03:54.701 line:-1 position:50%
highlight those tap targets,
which shows a tappable region


79
00:03:54.701 --> 00:03:56.703 line:-1 position:50%
over the entire area.


80
00:03:56.703 --> 00:03:58.405 line:-1 position:50%
That same example
in the Shared Space


81
00:03:58,405 --> 00:04:02,676 line:-1
now shows the hidden attributes
with hover effects.


82
00:04:02.676 --> 00:04:05.412 line:-1 position:50%
This change of appearance
is exposing the truth


83
00:04:05.412 --> 00:04:07.581 line:-1 position:50%
but does not feel correct.


84
00:04:09,483 --> 00:04:12,152 line:0
If we zoom into our example,
to keep the existing


85
00:04:12,152 --> 00:04:14,988 line:0
tapping behavior
with reduced appearance,


86
00:04:14,988 --> 00:04:18,825 position:50%
add a custom shape
to the .contentShape modifiers.


87
00:04:18,825 --> 00:04:22,896 position:50%
By using a custom shape, apps
can provide an origin and size


88
00:04:22,896 --> 00:04:25,665 line:0
to the .contentShape modifiers,
which will be smaller


89
00:04:25,665 --> 00:04:29,569 line:0
than the tappable region.


90
00:04:29,569 --> 00:04:32,506 line:0
In this video, people
looking directly at the button


91
00:04:32,506 --> 00:04:34,174 line:0
will see a hover effect.


92
00:04:34,174 --> 00:04:37,544 position:50%
And with this change, tapping
outside the hover effect bounds


93
00:04:37,544 --> 00:04:43,250 position:50%
will match expectations from
iPad and iPhone experiences.


94
00:04:43.250 --> 00:04:45.886 line:-1 position:50%
Back on the simulator
with the full example.


95
00:04:45.886 --> 00:04:48.221 line:-1 position:50%
Now with this custom shape,
the hover effect


96
00:04:48.221 --> 00:04:50.056 line:-1 position:50%
appears on just the buttons


97
00:04:50.056 --> 00:04:52.159 line:-1 position:50%
but allows tapping
outside of them.


98
00:04:52.159 --> 00:04:54.828 line:-1 position:50%
Excellent!


99
00:04:54,828 --> 00:04:59,232 line:-1
In most cases, hover effects
on system controls work great;


100
00:04:59.232 --> 00:05:01.401 line:-1 position:50%
however, the ability
to customize hover effects


101
00:05:01.401 --> 00:05:03.537 line:-1 position:50%
is powerful.


102
00:05:03.537 --> 00:05:06.806 line:-1 position:50%
With the new hover effect API,
apps can create hover effects


103
00:05:06,806 --> 00:05:09,509 line:-1
for custom buttons,
custom shapes,


104
00:05:09.509 --> 00:05:12.179 line:-1 position:50%
or even opt out
of a control if necessary.


105
00:05:12,179 --> 00:05:14,848 line:-1
Let's inspect how to do that.


106
00:05:14,848 --> 00:05:17,484 line:-1
.buttonStyle is a great way
to consistently apply


107
00:05:17,484 --> 00:05:20,887 line:-1
a custom style
to all buttons in apps.


108
00:05:20.887 --> 00:05:25.058 line:-1 position:50%
When applying custom styling,
it turns off hover effects.


109
00:05:25,058 --> 00:05:28,628 line:-1
To reenable hover effects on
a custom .buttonStyle button,


110
00:05:28.628 --> 00:05:32.132 line:-1 position:50%
add the .hoverEffect() modifier
to app elements.


111
00:05:32,132 --> 00:05:37,504 line:-1
Here is my simple button
with a custom button style.


112
00:05:37,504 --> 00:05:39,406 line:-1
Looking at the custom
button style,


113
00:05:39,406 --> 00:05:42,342 line:-1
here, we need to add
the .hoverEffect modifier


114
00:05:42,342 --> 00:05:46,813 line:-1
to add hover effects to
the button with custom styling.


115
00:05:46,813 --> 00:05:49,849 line:-1
Many apps have fun
and custom interfaces.


116
00:05:49.849 --> 00:05:52.419 line:-1 position:50%
In this example
of a beekeeping app,


117
00:05:52,419 --> 00:05:55,322 line:-1
buttons are honeycombs,
where each honeycomb cell


118
00:05:55,322 --> 00:05:58,992 line:-1
is its own tap target.


119
00:05:58.992 --> 00:06:02.028 line:-1 position:50%
Apps implementing custom shape
buttons will need to inform


120
00:06:02.028 --> 00:06:05.765 line:-1 position:50%
the system how to render
their hover effects.


121
00:06:05.765 --> 00:06:09.502 line:-1 position:50%
Frame width here is larger than
the area the shape occupies,


122
00:06:09.502 --> 00:06:11.938 line:-1 position:50%
so the default
system-provided hover effect


123
00:06:11.938 --> 00:06:17.277 line:-1 position:50%
covers the entire button frame,
unbounded to shape.


124
00:06:17.277 --> 00:06:20.547 line:-1 position:50%
By passing a custom shape
to the .contentShape modifier,


125
00:06:20.547 --> 00:06:24.751 line:-1 position:50%
hover effects will trim
to the button's bounds.


126
00:06:24.751 --> 00:06:26.786 line:-1 position:50%
Let's add that here.


127
00:06:26,786 --> 00:06:28,888 line:-1
Now it is perfect,
because when people look


128
00:06:28,888 --> 00:06:31,591 line:-1
at individual buttons,
the hover effect is trimmed


129
00:06:31,591 --> 00:06:34,928 line:-1
to the geometry
of the button's shape.


130
00:06:34,928 --> 00:06:37,831 line:-1
System controls that
are disabled due to app state


131
00:06:37,831 --> 00:06:40,300 line:-1
automatically do not get
hover effects.


132
00:06:40,300 --> 00:06:43,603 line:-1
If apps want to de-emphasize
specific interface elements,


133
00:06:43,603 --> 00:06:46,606 line:-1
they can opt out
individual items.


134
00:06:46.606 --> 00:06:48.775 line:-1 position:50%
People expect hover effects
to be apparent


135
00:06:48,775 --> 00:06:50,577 line:-1
and consistent
across the system,


136
00:06:50,577 --> 00:06:53,480 line:-1
so they should be
turned off sparingly.


137
00:06:53.480 --> 00:06:57.083 line:-1 position:50%
The system accepts a maximum
of two simultaneous inputs


138
00:06:57.083 --> 00:07:00.153 line:-1 position:50%
since each hand
is a distinct touch.


139
00:07:00,153 --> 00:07:03,123 line:-1
Custom gesture recognizers
are also supported,


140
00:07:03.123 --> 00:07:05.392 line:-1 position:50%
but you may need to update them
to run smoothly


141
00:07:05,392 --> 00:07:08,962 line:-1
with the natural input
expectations.


142
00:07:08,962 --> 00:07:12,799 line:-1
Games, or other apps that need
rapid or simultaneous input,


143
00:07:12.799 --> 00:07:15.402 line:-1 position:50%
need to support
game controllers.


144
00:07:15.402 --> 00:07:18.104 line:-1 position:50%
iPad and iPhone apps have long
been able to indicate support


145
00:07:18,104 --> 00:07:19,673 line:-1
for game controllers.


146
00:07:19,673 --> 00:07:20,807 line:-1
On this platform,


147
00:07:20.807 --> 00:07:25.679 line:-1 position:50%
it's even more critical
for additional input methods.


148
00:07:25,679 --> 00:07:29,082 position:50%
By including GCSupports
ControllerUserInteraction


149
00:07:29,082 --> 00:07:32,585 line:0
in the Info.plist and adding
Game controller capability,


150
00:07:32,585 --> 00:07:35,922 position:50%
it adds a badge
to the app's product page.


151
00:07:35,922 --> 00:07:38,625 line:0
This improves communication
with people using App Store


152
00:07:38,625 --> 00:07:41,127 position:50%
to find games,
and makes the availability


153
00:07:41,127 --> 00:07:46,032 line:0
of game controllers even more
evident across all platforms.


154
00:07:46,032 --> 00:07:48,101 line:0
For information
about game controllers


155
00:07:48,101 --> 00:07:50,437 line:0
and games on App Store,
watch the videos


156
00:07:50,437 --> 00:07:52,372 position:50%
"Advancements in
Game Controllers"


157
00:07:52,372 --> 00:07:55,809 line:0
and "Build great games
for spatial computing."


158
00:07:55.809 --> 00:07:58.378 line:-1 position:50%
iPad and iPhone apps
running on this platform


159
00:07:58.378 --> 00:08:01.281 line:-1 position:50%
match their iPad
light-mode appearance.


160
00:08:01.281 --> 00:08:03.683 line:-1 position:50%
In most cases, that looks great.


161
00:08:03,683 --> 00:08:06,119 line:-1
If you're using
system standard controls,


162
00:08:06.119 --> 00:08:07.854 line:-1 position:50%
layouts, and colors,


163
00:08:07,854 --> 00:08:10,957 line:-1
there's no new work
for you here.


164
00:08:10.957 --> 00:08:14.794 line:-1 position:50%
The system optimizes rendering,
using dynamic content scaling


165
00:08:14.794 --> 00:08:17.797 line:-1 position:50%
so all images and text
are always sharp


166
00:08:17.797 --> 00:08:20.900 line:-1 position:50%
at any angle,
from any distance.


167
00:08:20,900 --> 00:08:26,106 line:-1
To provide the best experience,
use vector-based content.


168
00:08:26.106 --> 00:08:29.175 line:-1 position:50%
Prompts on iPad and iPhone
are presented modally,


169
00:08:29.175 --> 00:08:32.645 line:-1 position:50%
so the prompt must be interacted
with before continuing.


170
00:08:32.645 --> 00:08:37.016 line:-1 position:50%
On this new platform,
prompts do not present modally.


171
00:08:37,016 --> 00:08:39,652 line:-1
Prompts such as asking
for location permission,


172
00:08:39,652 --> 00:08:41,855 line:-1
Sign in with Apple, or OAuth,


173
00:08:41,855 --> 00:08:45,024 line:-1
do not require handling
before continuing.


174
00:08:45,024 --> 00:08:47,027 line:-1
These interfaces
create their own chrome


175
00:08:47.027 --> 00:08:49.429 line:-1 position:50%
and windowed experience.


176
00:08:49.429 --> 00:08:52.665 line:-1 position:50%
Apps should be aware and handle
cases where they get the prompt,


177
00:08:52.665 --> 00:08:57.704 line:-1 position:50%
but may not get immediate
cancelled or success call backs.


178
00:08:57.704 --> 00:09:00.740 line:-1 position:50%
People capturing, sharing,
and posting content


179
00:09:00.740 --> 00:09:03.410 line:-1 position:50%
is a great way
to express themselves.


180
00:09:03,410 --> 00:09:05,378 line:-1
On this platform,
there are some differences


181
00:09:05,378 --> 00:09:07,580 line:-1
apps should be aware of.


182
00:09:07.580 --> 00:09:11.384 line:-1 position:50%
There are multiple external
and internal facing cameras.


183
00:09:11,384 --> 00:09:15,488 line:-1
However, many of these cameras
are not available for app use.


184
00:09:15,488 --> 00:09:18,391 line:-1
It is critical to use
discovery sessions to detect


185
00:09:18,391 --> 00:09:23,029 line:-1
which cameras and microphones
are available for use.


186
00:09:23.029 --> 00:09:26.166 line:-1 position:50%
To ensure apps have
an excellent capture experience,


187
00:09:26,166 --> 00:09:28,668 line:-1
use AVCaptureDevice
discovery session


188
00:09:28.668 --> 00:09:31.538 line:-1 position:50%
to confirm
hardware availability.


189
00:09:31.538 --> 00:09:34.140 line:-1 position:50%
Additionally,
similar to other platforms,


190
00:09:34.140 --> 00:09:38.044 line:-1 position:50%
requesting permission
before use is required.


191
00:09:38.044 --> 00:09:40.980 line:-1 position:50%
Lastly, generalize your
authorization prompt string


192
00:09:40.980 --> 00:09:42.715 line:-1 position:50%
to inform people of use,


193
00:09:42,715 --> 00:09:46,686 line:-1
without mentioning specific
hardware or software versions.


194
00:09:48.755 --> 00:09:51.624 line:-1 position:50%
When apps request camera
and microphone availability,


195
00:09:51,624 --> 00:09:55,662 line:-1
expect different values to be
returned than iPad and iPhone.


196
00:09:55,662 --> 00:09:57,997 line:-1
When querying microphone,
apps will receive


197
00:09:57.997 --> 00:10:00.900 line:-1 position:50%
a single .front
location microphone.


198
00:10:00.900 --> 00:10:04.304 line:-1 position:50%
When querying camera,
apps will find two cameras.


199
00:10:04,304 --> 00:10:06,873 line:-1
The .back camera returns
a black camera frame


200
00:10:06.873 --> 00:10:09.209 line:-1 position:50%
with a no camera glyph.


201
00:10:09.209 --> 00:10:11.611 line:-1 position:50%
This is a nonfunctional camera
to support apps


202
00:10:11,611 --> 00:10:14,848 line:-1
that assume back camera
availability.


203
00:10:14,848 --> 00:10:16,449 line:-1
When querying for front camera,


204
00:10:16.449 --> 00:10:19.552 line:-1 position:50%
apps find
a single composite camera.


205
00:10:19.552 --> 00:10:22.822 line:-1 position:50%
If no spatial persona
is found on a device,


206
00:10:22,822 --> 00:10:28,094 line:-1
then no camera frames
will return to apps.


207
00:10:28,094 --> 00:10:30,196 line:-1
AVRoutePickerView
and Picture in Picture


208
00:10:30.196 --> 00:10:32.432 line:-1 position:50%
are unavailable
on this platform,


209
00:10:32,432 --> 00:10:36,035 line:-1
which has been reflected
in system-provided players.


210
00:10:36,035 --> 00:10:38,571 line:-1
Apps that implement
custom players need to check


211
00:10:38,571 --> 00:10:42,342 line:-1
both availabilities before
showing these controls.


212
00:10:42,342 --> 00:10:45,311 line:-1
Lastly, this platform locks
once removed.


213
00:10:45,311 --> 00:10:46,946 line:-1
Apps that utilize
background audio


214
00:10:46,946 --> 00:10:48,481 line:-1
should consider
this difference,


215
00:10:48,481 --> 00:10:50,250 line:-1
as they will no longer
get this background mode


216
00:10:50,250 --> 00:10:55,388 line:-1
when the device is locked,
and will be fully suspended.


217
00:10:55.388 --> 00:10:58.424 line:-1 position:50%
Apps that import media should
consider alternative sources


218
00:10:58.424 --> 00:11:01.327 line:-1 position:50%
when capture hardware
isn't available.


219
00:11:01.327 --> 00:11:03.897 line:-1 position:50%
Options such as iCloud
or content pickers,


220
00:11:03.897 --> 00:11:09.202 line:-1 position:50%
like document or photo picker,
are excellent alternatives.


221
00:11:09,202 --> 00:11:11,304 line:-1
Additionally,
apps that use VisionKit's


222
00:11:11.304 --> 00:11:15.041 line:-1 position:50%
VNDocumentCameraViewController
will automatically capture


223
00:11:15,041 --> 00:11:18,678 line:-1
with Continuity Camera
on a nearby device.


224
00:11:18,678 --> 00:11:21,681 line:-1
These alternatives bring
even more media-import options


225
00:11:21.681 --> 00:11:25.718 line:-1 position:50%
to existing iPad
and iPhone apps.


226
00:11:25.718 --> 00:11:29.088 line:-1 position:50%
iPad and iPhone apps
run great on this new platform.


227
00:11:29,088 --> 00:11:30,523 line:-1
Make sure hover effects
are added


228
00:11:30.523 --> 00:11:32.759 line:-1 position:50%
to all your interactive
controls.


229
00:11:32.759 --> 00:11:35.762 line:-1 position:50%
For games, add controller
support to ensure players


230
00:11:35,762 --> 00:11:38,765 line:-1
continue to have
a great experience.


231
00:11:38,765 --> 00:11:40,533 line:-1
Finally, review your assumptions


232
00:11:40,533 --> 00:11:42,569 line:-1
about camera
and microphone presence


233
00:11:42,569 --> 00:11:46,940 line:-1
by checking for availability
before use.


234
00:11:46,940 --> 00:11:49,976 line:-1
Now you know how to optimize
iPad and iPhone apps


235
00:11:49,976 --> 00:11:51,878 line:-1
for this new platform.


236
00:11:51,878 --> 00:11:55,815 line:-1
I'm looking forward to using
your apps in the shared space.


237
00:11:55,815 --> 00:12:00,286 size:2% align:right position:90%
♪

