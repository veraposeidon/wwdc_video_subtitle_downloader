2
00:00:00.067 --> 00:00:04.004 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:04,004 --> 00:00:10,010 size:2% line:0 align:right
♪


4
00:00:10,010 --> 00:00:10,844 line:-1
Hello!


5
00:00:10,844 --> 00:00:14,348 line:-1
I'm Ivan, and I'm an engineer
on the RealityKit team.


6
00:00:14,348 --> 00:00:15,549 line:-1
Welcome to my session,


7
00:00:15,549 --> 00:00:19,219 line:-1
"Explore rendering
for spatial computing."


8
00:00:19,219 --> 00:00:22,522 line:-1
RealityKit is a framework
for rendering, animating,


9
00:00:22,522 --> 00:00:24,892 line:-1
and simulating 3D models.


10
00:00:24.892 --> 00:00:27.261 line:-1 position:50%
One of the strongest suits
of RealityKit


11
00:00:27.261 --> 00:00:31.365 line:-1 position:50%
is applying realistic rendering
for your content.


12
00:00:31.365 --> 00:00:34.234 line:-1 position:50%
In order to help you make the
most of the rendering abilities


13
00:00:34,234 --> 00:00:37,971 line:-1
of RealityKit and enhance
the look of your content,


14
00:00:37,971 --> 00:00:41,708 line:-1
I wanted to share some rendering
considerations to keep in mind


15
00:00:41,708 --> 00:00:45,712 line:-1
while developing your app
for spatial computing.


16
00:00:45,712 --> 00:00:49,750 line:-1
We'll start with lighting and
shadows for your 3D content.


17
00:00:49,750 --> 00:00:53,720 line:-1
Then we'll learn what's new
with RealityKit materials.


18
00:00:53.720 --> 00:00:56.924 line:-1 position:50%
Next, I will introduce
rasterization rate maps


19
00:00:56,924 --> 00:00:59,960 line:-1
which greatly improves
system performance.


20
00:00:59,960 --> 00:01:03,430 line:-1
I will share recommendations
on how to adjust your content


21
00:01:03.430 --> 00:01:06.566 line:-1 position:50%
to make it work well
with this optimization.


22
00:01:06.566 --> 00:01:08.635 line:-1 position:50%
Finally, I will introduce
a technique


23
00:01:08,635 --> 00:01:10,837 line:-1
called dynamic content scaling,


24
00:01:10.837 --> 00:01:14.408 line:-1 position:50%
which ensures that the UI
is always sharp.


25
00:01:14,408 --> 00:01:17,577 line:-1
Let's start with lighting
and shadows.


26
00:01:17,577 --> 00:01:20,981 line:-1
If you are familiar with
RealityKit on iOS and macOS,


27
00:01:20.981 --> 00:01:22.716 line:-1 position:50%
you will find that most
of that knowledge


28
00:01:22.716 --> 00:01:26.920 line:-1 position:50%
also applies to building
spatial experiences.


29
00:01:26,920 --> 00:01:29,656 line:-1
We introduced image-based
lighting in RealityKit


30
00:01:29,656 --> 00:01:32,993 line:-1
to make your content
look realistic.


31
00:01:32.993 --> 00:01:36.229 line:-1 position:50%
Image-based lighting, or IBL,
uses textures,


32
00:01:36.229 --> 00:01:41.234 line:-1 position:50%
like the one on the right to
produce realistic reflections.


33
00:01:41,234 --> 00:01:44,404 line:-1
Shadows help us understand
how objects are positioned


34
00:01:44.404 --> 00:01:47.140 line:-1 position:50%
with respect to each other.


35
00:01:47,140 --> 00:01:49,009 line:-1
Before we look at
the new features,


36
00:01:49.009 --> 00:01:51.011 line:-1 position:50%
let's quickly go over
the components


37
00:01:51.011 --> 00:01:54.481 line:-1 position:50%
of image-based lighting.


38
00:01:54.481 --> 00:01:58.151 line:-1 position:50%
There are two main
components to an IBL:


39
00:01:58,151 --> 00:02:01,755 line:-1
an Environment probe texture
that is provided by ARKit


40
00:02:01,755 --> 00:02:04,825 line:-1
and is specific to the
physical space in the room


41
00:02:04.825 --> 00:02:10.630 line:-1 position:50%
and the system IBL texture
which is packaged with the OS.


42
00:02:10,630 --> 00:02:13,667 line:-1
The system IBL texture
adds extra highlights


43
00:02:13,667 --> 00:02:17,637 line:-1
to ensure that your content
looks great in any environment.


44
00:02:17,637 --> 00:02:19,539 position:50%
The two components
are added together


45
00:02:19,539 --> 00:02:23,043 position:50%
to produce
the combined IBL texture.


46
00:02:23,043 --> 00:02:24,978 line:0
If you have
an active environment,


47
00:02:24,978 --> 00:02:29,549 line:0
it would also have an effect
on the combined IBL texture.


48
00:02:29.549 --> 00:02:32.652 line:-1 position:50%
This year RealityKit adds
ability to override


49
00:02:32.652 --> 00:02:36.690 line:-1 position:50%
the system IBL texture
in order to customize lighting.


50
00:02:36,690 --> 00:02:40,127 line:-1
Let's take a look at an example.


51
00:02:40.127 --> 00:02:42.262 line:-1 position:50%
This is the "Hello World"
experience


52
00:02:42.262 --> 00:02:45.699 line:-1 position:50%
that offers a view
of the solar system.


53
00:02:45.699 --> 00:02:50.137 line:-1 position:50%
By default RealityKit would
light it using the system IBL.


54
00:02:50.137 --> 00:02:52.639 line:-1 position:50%
However, if you assign
a new IBL


55
00:02:52,639 --> 00:02:55,409 line:-1
to the new image-based
light component,


56
00:02:55.409 --> 00:02:58.812 line:-1 position:50%
it would replace the system IBL
and light those objects


57
00:02:58,812 --> 00:03:02,249 line:-1
using the surrounding
immersive environment.


58
00:03:02,249 --> 00:03:05,552 line:-1
Let me show you how that's done.


59
00:03:05,552 --> 00:03:08,221 line:-1
Here we first load
our 3D content.


60
00:03:08.221 --> 00:03:11.658 line:-1 position:50%
In this case,
it's the satellite model.


61
00:03:11,658 --> 00:03:15,529 line:-1
Then we load an environment
resource called Sunlight.


62
00:03:15.529 --> 00:03:21.301 line:-1 position:50%
It contains an image of the Sun
and stars surrounding the Earth.


63
00:03:21,301 --> 00:03:24,337 line:-1
We need both the model
and the environment resource


64
00:03:24.337 --> 00:03:26.706 line:-1 position:50%
to set up IBL,
so let's make sure


65
00:03:26.706 --> 00:03:30.744 line:-1 position:50%
both loading operations
have finished.


66
00:03:30.744 --> 00:03:33.947 line:-1 position:50%
Next, we add the
ImageBasedLightComponent.


67
00:03:33.947 --> 00:03:38.985 line:-1 position:50%
It references the Environment
resource that we've just loaded.


68
00:03:38,985 --> 00:03:42,422 line:-1
Finally we add
ImageBasedLightReceiverComponent


69
00:03:42.422 --> 00:03:44.724 line:-1 position:50%
to the satellite entity.


70
00:03:44.724 --> 00:03:46.660 line:-1 position:50%
You can add
these receiver components


71
00:03:46.660 --> 00:03:49.463 line:-1 position:50%
even to other entities
in order to light them


72
00:03:49,463 --> 00:03:51,798 line:-1
using the same IBL.


73
00:03:51.798 --> 00:03:54.334 line:-1 position:50%
And that's how easy it is
to customize lighting


74
00:03:54.334 --> 00:03:56.937 line:-1 position:50%
in RealityKit.


75
00:03:56,937 --> 00:03:59,272 line:-1
Next, let's take a look
at how to add shadows


76
00:03:59,272 --> 00:04:01,842 line:-1
to your application.


77
00:04:01,842 --> 00:04:05,612 position:50%
Let's consider a simple example
where you place a 3D object


78
00:04:05,612 --> 00:04:09,716 position:50%
like this vase on top
of a floating plane.


79
00:04:09,716 --> 00:04:13,120 position:50%
Without any shadows turned on,
it might be hard to understand


80
00:04:13,120 --> 00:04:16,356 position:50%
the relative position
of the vase and the plane.


81
00:04:16,356 --> 00:04:20,393 line:0
But by simply adding
RealityKit's grounding shadow,


82
00:04:20,393 --> 00:04:22,929 line:0
it becomes a lot clearer
that the vase


83
00:04:22,929 --> 00:04:25,499 line:0
is above the center
of the plane.


84
00:04:25,499 --> 00:04:28,768 line:0
Let's see how
to do this in code.


85
00:04:28,768 --> 00:04:31,004 line:-1
We start by loading
the vase model.


86
00:04:31,004 --> 00:04:34,941 line:-1
Here, flower_tulip
is the name of our 3D model


87
00:04:34,941 --> 00:04:36,843 line:-1
in our project.


88
00:04:36,843 --> 00:04:40,080 line:-1
Next, we add the grounding
shadow component.


89
00:04:40,080 --> 00:04:43,817 line:-1
Make sure to set
castsShadow flag set to true.


90
00:04:43,817 --> 00:04:45,051 line:-1
And that's it!


91
00:04:45.051 --> 00:04:48.121 line:-1 position:50%
The vase entity will now
cast grounding shadows.


92
00:04:48.121 --> 00:04:49.956 line:-1 position:50%
Simple, isn't it?


93
00:04:49,956 --> 00:04:53,160 line:-1
Grounding shadows appear
on top of 3D models


94
00:04:53.160 --> 00:04:56.930 line:-1 position:50%
as well as objects
in the physical environment.


95
00:04:56.930 --> 00:04:59.933 line:-1 position:50%
Using a custom IBL
for lighting your scene


96
00:04:59.933 --> 00:05:02.869 line:-1 position:50%
and including grounding shadows
can make your content


97
00:05:02.869 --> 00:05:05.872 line:-1 position:50%
look a lot better,
but you could also directly work


98
00:05:05,872 --> 00:05:10,110 line:-1
on the look of your objects
by tweaking materials.


99
00:05:10.110 --> 00:05:13.079 line:-1 position:50%
Most of the RealityKit materials
that are available


100
00:05:13.079 --> 00:05:17.417 line:-1 position:50%
on macOS and iOS
can also be used on xrOS.


101
00:05:17,417 --> 00:05:20,020 line:-1
Let's quickly review them.


102
00:05:20.020 --> 00:05:24.491 line:-1 position:50%
The most commonly used material
is PhysicallyBasedMaterial.


103
00:05:24,491 --> 00:05:27,093 line:-1
PhysicallyBasedMaterial
in RealityKit


104
00:05:27.093 --> 00:05:30.764 line:-1 position:50%
reacts to lighting and can be
used to represent a variety


105
00:05:30.764 --> 00:05:35.902 line:-1 position:50%
of real-world materials,
such as plastics or metals.


106
00:05:35.902 --> 00:05:38.305 line:-1 position:50%
SimpleMaterial
also reacts to lighting,


107
00:05:38.305 --> 00:05:41.575 line:-1 position:50%
but uses a smaller subset
of parameters.


108
00:05:41.575 --> 00:05:45.345 line:-1 position:50%
It is especially good
for quick experiments.


109
00:05:45,345 --> 00:05:48,081 line:-1
UnlitMaterial doesn't
react to lighting.


110
00:05:48.081 --> 00:05:50.684 line:-1 position:50%
In other words,
it maintains a constant look


111
00:05:50.684 --> 00:05:54.521 line:-1 position:50%
under changing
lighting conditions.


112
00:05:54,521 --> 00:05:57,824 line:-1
VideoMaterial is a variation
of unlit material


113
00:05:57.824 --> 00:06:03.263 line:-1 position:50%
that can map a movie file
onto the surface of an entity.


114
00:06:03.263 --> 00:06:06.633 line:-1 position:50%
In addition to these materials,
RealityKit introduces


115
00:06:06.633 --> 00:06:10.770 line:-1 position:50%
a new type of material
called ShaderGraphMaterial.


116
00:06:10.770 --> 00:06:13.373 line:-1 position:50%
You can author the new
ShaderGraphMaterial


117
00:06:13.373 --> 00:06:19.045 line:-1 position:50%
in Reality Composer Pro or
load it from a MaterialX file.


118
00:06:19,045 --> 00:06:21,514 line:0
You can learn more about
ShaderGraphMaterial


119
00:06:21,514 --> 00:06:22,616 line:0
in the session


120
00:06:22,616 --> 00:06:27,053 position:50%
"Explore Materials
in Reality Composer Pro."


121
00:06:27,053 --> 00:06:29,889 line:-1
The color output
of all of these materials


122
00:06:29,889 --> 00:06:34,361 line:-1
goes through a special step
called tone mapping.


123
00:06:34.361 --> 00:06:37.497 line:-1 position:50%
Tone mapping is a transformation
that RealityKit applies


124
00:06:37,497 --> 00:06:42,135 line:-1
by default to the color output
of a material.


125
00:06:42.135 --> 00:06:44.471 line:-1 position:50%
It enables more natural
perceived colors


126
00:06:44,471 --> 00:06:47,407 line:-1
using a variety of techniques.


127
00:06:47.407 --> 00:06:50.810 line:-1 position:50%
One such technique is remapping
values above one


128
00:06:50,810 --> 00:06:52,979 line:-1
into the visible range.


129
00:06:52,979 --> 00:06:57,050 line:-1
Let me demonstrate this
with an example.


130
00:06:57,050 --> 00:07:01,721 line:0
Here's a 3D render of a TV
with tone mapping disabled.


131
00:07:01,721 --> 00:07:06,459 line:0
I assigned a texture with very
bright values to the display.


132
00:07:06,459 --> 00:07:09,696 line:0
Now, if I enable tone mapping,
you can see more details


133
00:07:09,696 --> 00:07:11,665 position:50%
in the bright regions,


134
00:07:11,665 --> 00:07:14,567 position:50%
like these flower petals.


135
00:07:14,567 --> 00:07:16,803 line:-1
Tone mapping works great
in general


136
00:07:16.803 --> 00:07:20.640 line:-1 position:50%
and renders beautiful visuals;
but for some use cases,


137
00:07:20.640 --> 00:07:24.177 line:-1 position:50%
you may want to display
the exact colors of the object,


138
00:07:24,177 --> 00:07:27,147 line:-1
for which you will have
to opt out of tone mapping.


139
00:07:27,147 --> 00:07:30,150 line:-1
Let's look at an example.


140
00:07:30,150 --> 00:07:33,253 line:-1
Here's a simple application
that shows a traffic light


141
00:07:33.253 --> 00:07:37.724 line:-1 position:50%
and three buttons with labels
"Stop," "Wait," and "Go."


142
00:07:37,724 --> 00:07:40,527 line:-1
The traffic light itself
is a 3D model,


143
00:07:40.527 --> 00:07:44.230 line:-1 position:50%
and the three buttons
were added using SwiftUI.


144
00:07:44.230 --> 00:07:47.667 line:-1 position:50%
In order to precisely match
the color of the lamp


145
00:07:47.667 --> 00:07:50.904 line:-1 position:50%
to the color of the button,
we could use an unlit material


146
00:07:50.904 --> 00:07:53.406 line:-1 position:50%
for the lamps,
since unlit materials


147
00:07:53.406 --> 00:07:56.076 line:-1 position:50%
maintain the same
constant look of the object,


148
00:07:56,076 --> 00:07:59,079 line:-1
independent
of the lighting conditions.


149
00:07:59,079 --> 00:08:02,082 line:-1
However, the output of
unlit material is still affected


150
00:08:02.082 --> 00:08:04.751 line:-1 position:50%
by tone mapping
which is on by default


151
00:08:04,751 --> 00:08:07,654 line:-1
for all of RealityKit materials.


152
00:08:07.654 --> 00:08:11.391 line:-1 position:50%
So, even if the same color is
assigned to the SwiftUI button


153
00:08:11.391 --> 00:08:14.127 line:-1 position:50%
and the material of the lamp,
they may appear


154
00:08:14.127 --> 00:08:16.996 line:-1 position:50%
slightly different
from each other.


155
00:08:16.996 --> 00:08:20.433 line:-1 position:50%
The screenshot you see was
taken with tone mapping enabled;


156
00:08:20.433 --> 00:08:21.968 line:-1 position:50%
let me show you
what it looks like


157
00:08:21,968 --> 00:08:26,339 line:-1
when tone mapping is disabled
for the lamp material.


158
00:08:26,339 --> 00:08:29,509 line:-1
You will notice that the colors
of lamps and buttons


159
00:08:29,509 --> 00:08:31,244 line:-1
accurately match.


160
00:08:31,244 --> 00:08:35,815 line:-1
Let's toggle tone mapping for
lamp material one more time.


161
00:08:35,815 --> 00:08:38,852 line:-1
This is with
tone mapping enabled


162
00:08:38.852 --> 00:08:42.021 line:-1 position:50%
and this is with
tone mapping disabled.


163
00:08:42.021 --> 00:08:43.757 line:-1 position:50%
Let's take a look
at the code sample


164
00:08:43.757 --> 00:08:48.461 line:-1 position:50%
that shows how tone mapping
can be toggled in code.


165
00:08:48,461 --> 00:08:51,798 line:-1
We start by loading
the traffic light model.


166
00:08:51.798 --> 00:08:55.735 line:-1 position:50%
Here, traffic_light
is the name of our 3D model


167
00:08:55,735 --> 00:08:57,904 line:-1
in our project.


168
00:08:57.904 --> 00:09:01.608 line:-1 position:50%
Next, we find the entity
named red_light.


169
00:09:01,608 --> 00:09:06,179 line:-1
This entity corresponds to the
top lamp of the traffic light.


170
00:09:06.179 --> 00:09:10.650 line:-1 position:50%
Once we have the entity,
we access its model component.


171
00:09:10,650 --> 00:09:13,987 line:-1
Next, we create
a new unlit material.


172
00:09:13.987 --> 00:09:18.591 line:-1 position:50%
We pass both our desired color
and a new Boolean parameter


173
00:09:18.591 --> 00:09:21.761 line:-1 position:50%
called applyPostProcessToneMap.


174
00:09:21,761 --> 00:09:25,465 line:-1
This Boolean parameter is set
to false in order to disable


175
00:09:25,465 --> 00:09:30,336 line:-1
tone mapping transformation
for this material.


176
00:09:30.336 --> 00:09:34.107 line:-1 position:50%
Finally, we replace material
on the model component


177
00:09:34,107 --> 00:09:37,710 line:-1
and assign the model component
back to the entity.


178
00:09:37,710 --> 00:09:40,847 line:-1
This is done for each
of the three lamps.


179
00:09:40,847 --> 00:09:44,184 line:-1
Now the color of button
and color of lamps


180
00:09:44,184 --> 00:09:46,586 line:-1
should match closely.


181
00:09:46.586 --> 00:09:49.789 line:-1 position:50%
applyPostProcessToneMap flag
is useful in cases


182
00:09:49,789 --> 00:09:52,392 line:-1
when you want to show
an exact representation


183
00:09:52.392 --> 00:09:54.928 line:-1 position:50%
of the colors in your scene.


184
00:09:54.928 --> 00:09:57.263 line:-1 position:50%
This can come in handy
when using RealityKit


185
00:09:57,263 --> 00:10:01,267 line:-1
to build something like a menu
or a heads-up display.


186
00:10:01.267 --> 00:10:04.737 line:-1 position:50%
This new property is also
exposed in the material editor


187
00:10:04.737 --> 00:10:08.241 line:-1 position:50%
of Reality Composer Pro.


188
00:10:08.241 --> 00:10:11.444 line:-1 position:50%
Now, let's take a look at
some quality considerations.


189
00:10:11.444 --> 00:10:13.746 line:-1 position:50%
We'll start with
the rasterization rate maps


190
00:10:13,746 --> 00:10:16,950 line:-1
for spatial computing.


191
00:10:16,950 --> 00:10:20,386 line:-1
The displays used in the headset
have a high resolution,


192
00:10:20,386 --> 00:10:22,856 line:-1
and the OS needs
to update these displays


193
00:10:22,856 --> 00:10:24,491 line:-1
many times a second.


194
00:10:24,491 --> 00:10:27,093 line:-1
Let me explain this
with a visual.


195
00:10:27.093 --> 00:10:29.963 line:-1 position:50%
As you may know already,
the headset has the ability


196
00:10:29,963 --> 00:10:34,133 line:-1
to detect exactly where
a person's eyes are looking.


197
00:10:34.133 --> 00:10:36.503 line:-1 position:50%
Here's a simulated scenario
where a person


198
00:10:36,503 --> 00:10:41,341 line:-1
moves their eyes to the right
and then back to the center.


199
00:10:41,341 --> 00:10:43,676 line:-1
The yellow circle
represents the center point


200
00:10:43,676 --> 00:10:46,045 line:-1
of the person's focus.


201
00:10:46,045 --> 00:10:48,314 line:-1
The area that is
surrounding that point


202
00:10:48,314 --> 00:10:52,619 line:-1
is highlighted with a glow,
and the periphery is darkened.


203
00:10:52,619 --> 00:10:56,256 line:-1
Rasterization rate map makes it
so that fewer calculations


204
00:10:56.256 --> 00:10:59.425 line:-1 position:50%
are performed in the areas
that are darkened.


205
00:10:59,425 --> 00:11:01,694 line:-1
You can see that
at any given moment


206
00:11:01,694 --> 00:11:06,432 line:-1
the highlighted region is small
in comparison to the periphery.


207
00:11:06.432 --> 00:11:09.302 line:-1 position:50%
This allows the system
to achieve significant memory


208
00:11:09,302 --> 00:11:12,205 line:-1
and performance savings.


209
00:11:12,205 --> 00:11:13,339 line:-1
In RealityKit,


210
00:11:13,339 --> 00:11:17,243 line:-1
this optimization is
automatically enabled for you.


211
00:11:17.243 --> 00:11:19.979 line:-1 position:50%
While it greatly improves
the system performance,


212
00:11:19.979 --> 00:11:23.116 line:-1 position:50%
in some situations you may have
to adjust your content


213
00:11:23,116 --> 00:11:27,020 line:-1
to make it work well
with this optimization at play.


214
00:11:27,020 --> 00:11:30,323 line:0
For example,
here's a palm leaf asset,


215
00:11:30,323 --> 00:11:32,425 position:50%
When placed in the center
of the screen,


216
00:11:32,425 --> 00:11:35,795 line:0
it looks sharp and detailed.


217
00:11:35,795 --> 00:11:38,197 position:50%
But when I move
the object to the left


218
00:11:38,197 --> 00:11:41,000 line:0
and apply the eye movement
simulation again,


219
00:11:41,000 --> 00:11:44,404 position:50%
you can observe flickering
on the palm leaf.


220
00:11:44,404 --> 00:11:46,372 position:50%
The flickering
is especially strong


221
00:11:46,372 --> 00:11:49,442 position:50%
when the yellow circle
representing the eye direction


222
00:11:49,442 --> 00:11:52,645 line:0
is close to the right edge
of the screen.


223
00:11:52,645 --> 00:11:55,715 line:0
The flickering happens because
the rasterization rate map


224
00:11:55,715 --> 00:11:58,051 line:0
enables higher detail
around the point


225
00:11:58,051 --> 00:12:00,987 position:50%
where the person is looking,
and the pixels


226
00:12:00,987 --> 00:12:04,223 line:0
around the palm leaf
are rendered at a lower detail


227
00:12:04,223 --> 00:12:06,993 line:0
as the eyes move away from it.


228
00:12:06,993 --> 00:12:08,595 line:-1
Now, you can reduce
the flickering


229
00:12:08.595 --> 00:12:12.098 line:-1 position:50%
by simply adjusting a few
parameters of your content.


230
00:12:12.098 --> 00:12:14.801 line:-1 position:50%
Let's take a look at this.


231
00:12:14,801 --> 00:12:18,171 position:50%
Here's a representation
of the same palm leaf asset


232
00:12:18,171 --> 00:12:21,240 position:50%
with a red wireframe
overlay on top.


233
00:12:21,240 --> 00:12:24,711 line:0
You can see that there are
a lot of small triangles here.


234
00:12:24,711 --> 00:12:27,046 position:50%
These small triangles were
the reason of flickering


235
00:12:27,046 --> 00:12:28,681 line:0
in the periphery.


236
00:12:28,681 --> 00:12:31,150 line:0
We can reduce the flickering
by simply making


237
00:12:31,150 --> 00:12:35,722 position:50%
the triangles larger
and storing the fine details


238
00:12:35,722 --> 00:12:38,691 position:50%
in an opacity texture.


239
00:12:38,691 --> 00:12:43,096 line:-1
Here's how the simulation looks
after adjusting the asset.


240
00:12:43.096 --> 00:12:45.732 line:-1 position:50%
This 3D model looks
better after adjustment,


241
00:12:45.732 --> 00:12:48.501 line:-1 position:50%
because RealityKit
automatically generates


242
00:12:48,501 --> 00:12:51,137 line:-1
lower-resolution versions
of the opacity map


243
00:12:51,137 --> 00:12:53,840 line:-1
when the asset is loaded.


244
00:12:53,840 --> 00:12:56,242 line:-1
Those lower-resolution versions
of the texture


245
00:12:56.242 --> 00:12:59.879 line:-1 position:50%
are called mipmaps and
automatically used by the GPU


246
00:12:59,879 --> 00:13:03,850 line:-1
to improve the look
in the lower-detail region.


247
00:13:03,850 --> 00:13:06,452 line:0
For more details
on rasterization rate maps,


248
00:13:06,452 --> 00:13:08,421 position:50%
please refer to the article


249
00:13:08,421 --> 00:13:12,925 line:0
"Rendering at Different
Rasterization Rates."


250
00:13:12,925 --> 00:13:15,328 line:-1
Similar to rasterization
rate maps,


251
00:13:15,328 --> 00:13:18,998 line:-1
there is another technique
called "dynamic content scaling"


252
00:13:18,998 --> 00:13:21,334 line:-1
that automatically improves
the look of content


253
00:13:21,334 --> 00:13:23,603 line:-1
that was authored using SwiftUI.


254
00:13:23.603 --> 00:13:26.572 line:-1 position:50%
Let's take a look.


255
00:13:26.572 --> 00:13:30.043 line:-1 position:50%
Here's an application
that displays a list of months


256
00:13:30,043 --> 00:13:31,978 line:-1
arranged in a grid.


257
00:13:31,978 --> 00:13:36,416 line:-1
Each month is represented
with a text label.


258
00:13:36,416 --> 00:13:39,185 line:-1
When the eyes look
at the month of June,


259
00:13:39.185 --> 00:13:41.754 line:-1 position:50%
the system rasterizes
the text in that area


260
00:13:41,754 --> 00:13:44,757 line:-1
at the highest level of detail.


261
00:13:44.757 --> 00:13:47.660 line:-1 position:50%
The area marked in blue
surrounding "June"


262
00:13:47.660 --> 00:13:50.997 line:-1 position:50%
will be rasterized at a slightly
reduced level of detail,


263
00:13:50,997 --> 00:13:55,068 line:-1
but still maintains
a high quality overall.


264
00:13:55,068 --> 00:13:57,136 line:-1
The area marked in purple,
however,


265
00:13:57,136 --> 00:14:00,173 line:-1
is rasterized at a much
lower level of detail


266
00:14:00,173 --> 00:14:03,209 line:-1
since human vision system
perceives fewer details


267
00:14:03,209 --> 00:14:07,346 line:-1
in the periphery and it wouldn't
be as noticeable.


268
00:14:07,346 --> 00:14:11,284 line:-1
This kind of rasterization
at variable levels of detail


269
00:14:11.284 --> 00:14:13.686 line:-1 position:50%
based on what the eyes
are looking at


270
00:14:13.686 --> 00:14:17.123 line:-1 position:50%
is called
"dynamic content scaling."


271
00:14:17.123 --> 00:14:20.159 line:-1 position:50%
The system relies
on dynamic content scaling


272
00:14:20,159 --> 00:14:22,795 line:-1
to draw UI content
at the right scale


273
00:14:22,795 --> 00:14:27,166 line:-1
and ensures that
it's always sharp.


274
00:14:27,166 --> 00:14:30,002 line:-1
Dynamic content scaling
affects the relative size


275
00:14:30,002 --> 00:14:32,872 line:-1
in memory
for the rasterized content.


276
00:14:32.872 --> 00:14:35.875 line:-1 position:50%
In other words,
our text labels are scaled


277
00:14:35.875 --> 00:14:39.212 line:-1 position:50%
to different sizes depending
on how close they are


278
00:14:39,212 --> 00:14:42,582 line:-1
to the point where
the eyes are looking at.


279
00:14:42.582 --> 00:14:46.185 line:-1 position:50%
For example, you can see that
the label that says "June"


280
00:14:46.185 --> 00:14:47.553 line:-1 position:50%
is the largest --


281
00:14:47,553 --> 00:14:51,090 line:-1
it has the most resolution
and detail.


282
00:14:51.090 --> 00:14:53.559 line:-1 position:50%
Then there is a group
of eight months --


283
00:14:53.559 --> 00:14:55.928 line:-1 position:50%
January, February,
March, and so on


284
00:14:55.928 --> 00:14:58.698 line:-1 position:50%
that have slightly less detail.


285
00:14:58.698 --> 00:15:01.100 line:-1 position:50%
Finally, there is a group
of three months --


286
00:15:01.100 --> 00:15:03.970 line:-1 position:50%
April, August, December --
that are farthest away


287
00:15:03.970 --> 00:15:06.372 line:-1 position:50%
from eye look-at direction.


288
00:15:06,372 --> 00:15:09,275 line:-1
That last group would be
represented with smaller images


289
00:15:09,275 --> 00:15:11,043 line:-1
in memory.


290
00:15:11,043 --> 00:15:16,082 line:-1
Now, let's understand how to
enable dynamic content scaling.


291
00:15:16,082 --> 00:15:18,785 line:-1
If you are using
UIKit and SwiftUI,


292
00:15:18,785 --> 00:15:21,053 line:-1
your application
will automatically benefit


293
00:15:21,053 --> 00:15:23,289 line:-1
from this technique.


294
00:15:23,289 --> 00:15:25,758 line:-1
If you are relying on
the Core Animation framework


295
00:15:25.758 --> 00:15:28.327 line:-1 position:50%
to build your UI,
there is a new API


296
00:15:28.327 --> 00:15:30.830 line:-1 position:50%
to enable dynamic
content scaling.


297
00:15:30,830 --> 00:15:34,200 line:-1
Let's take a look at this API.


298
00:15:34,200 --> 00:15:36,903 line:-1
Dynamic content scaling
can be enabled by setting


299
00:15:36,903 --> 00:15:40,907 line:-1
the property of CALayer
wantsDynamicContentScaling


300
00:15:40.907 --> 00:15:42.875 line:-1 position:50%
to true.


301
00:15:42.875 --> 00:15:45.511 line:-1 position:50%
Note that this technique
relies on rasterizing


302
00:15:45,511 --> 00:15:48,614 line:-1
at higher resolutions,
so it is not recommended


303
00:15:48,614 --> 00:15:52,885 line:-1
to use with primarily
bitmap-based content.


304
00:15:52.885 --> 00:15:55.388 line:-1 position:50%
You can find the full list
of recommendations


305
00:15:55,388 --> 00:16:01,460 line:-1
regarding dynamic content
scaling on developer.apple.com.


306
00:16:01,460 --> 00:16:04,430 line:-1
Let me summarize
everything we've learned.


307
00:16:04.430 --> 00:16:08.301 line:-1 position:50%
We started by looking at how
to add image-based lights


308
00:16:08,301 --> 00:16:12,271 line:-1
and grounding shadows
to RealityKit applications.


309
00:16:12.271 --> 00:16:14.707 line:-1 position:50%
Then we reviewed materials
that are available


310
00:16:14,707 --> 00:16:16,742 line:-1
for spatial experiences,


311
00:16:16.742 --> 00:16:19.445 line:-1 position:50%
including the new
ShaderGraphMaterial.


312
00:16:19.445 --> 00:16:22.281 line:-1 position:50%
And we've also learned how
to control tone mapping


313
00:16:22,281 --> 00:16:24,951 line:-1
for unlit material.


314
00:16:24,951 --> 00:16:27,553 line:-1
Next we learned how
rasterization rate maps


315
00:16:27.553 --> 00:16:31.524 line:-1 position:50%
are used for spatial computing,
including an example


316
00:16:31.524 --> 00:16:36.529 line:-1 position:50%
how to adjust 3D model to reduce
flickering in the periphery.


317
00:16:36,529 --> 00:16:39,599 line:-1
Finally, we learned how
dynamic content scaling works


318
00:16:39.599 --> 00:16:43.703 line:-1 position:50%
on the system
and how you can make use of it.


319
00:16:43.703 --> 00:16:46.405 line:-1 position:50%
We're very excited
about this year's release


320
00:16:46,405 --> 00:16:49,408 line:-1
and can't wait to see the
beautiful spatial experiences


321
00:16:49.408 --> 00:16:51.143 line:-1 position:50%
you build on xrOS.


322
00:16:51.143 --> 00:16:51.978 line:-1 position:50%
Thank you.


323
00:16:51,978 --> 00:16:55,648 align:right line:0 position:90%
♪

