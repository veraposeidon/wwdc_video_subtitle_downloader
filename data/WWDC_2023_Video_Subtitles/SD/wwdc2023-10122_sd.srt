2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
♪ ♪


3
00:00:10.677 --> 00:00:14.381 line:-2 align:center
Jean-Yves: Welcome to
"Explore media formats for the web."


4
00:00:14.414 --> 00:00:17.017 line:-1 align:center
I'm Jean-Yves Avenard, a WebKit engineer,


5
00:00:17.050 --> 00:00:20.821 line:-2 align:center
and today I will go over media formats
supported in Safari,


6
00:00:20,854 --> 00:00:23,390 line:-1
focusing on images and video,


7
00:00:23,423 --> 00:00:28,395 line:-2
and introduce you to some new technologies
we made available in Safari 17.


8
00:00:28.428 --> 00:00:31.532 line:-2 align:center
We are adding support
for some new image formats,


9
00:00:31.565 --> 00:00:34.601 line:-2 align:center
and I'm going to help you choose
the right one for your site


10
00:00:34.635 --> 00:00:38.572 line:-2 align:center
after a little presentation
on the most commonly found ones.


11
00:00:38.605 --> 00:00:42.809 line:-2 align:center
Then I'll guide you on optimizing MSE
with a brand-new technology


12
00:00:42.843 --> 00:00:45.879 line:-1 align:center
we've implemented in Safari 17.


13
00:00:45,913 --> 00:00:50,617 line:-2
Finally I will present how you
can add AirPlay support to your videos


14
00:00:50,651 --> 00:00:52,920 line:-1
using Media Source Extension


15
00:00:53.887 --> 00:00:57.691 line:-2 align:center
Over the years, three formats
have been the most widely used.


16
00:00:57,724 --> 00:01:02,229 line:-2
They are supported by all browsers
and are easily created and deployed,


17
00:01:02,262 --> 00:01:05,999 line:-2
but technology has made
tremendous progress over the last decade,


18
00:01:06,033 --> 00:01:09,069 line:-1
and new great formats are now available.


19
00:01:09.102 --> 00:01:13.173 line:-2 align:center
The incumbent formats are GIF,
JPEG, and PNG.


20
00:01:13.207 --> 00:01:15.776 line:-1 align:center
Let's look at them in more details.


21
00:01:16.643 --> 00:01:20.948 line:-2 align:center
GIF, or as we properly say
in my country of birth, "jeef,"


22
00:01:20,981 --> 00:01:26,320 line:-2
a format introduced 36 years ago
that is best suited for simple animations,


23
00:01:26,353 --> 00:01:28,622 line:-1
memes, and social media content.


24
00:01:28.655 --> 00:01:33.894 line:-2 align:center
It does not support a full color palette
being limited to 8 bits color at a time.


25
00:01:33.927 --> 00:01:37.531 line:-2 align:center
Since it's a lossless format,
file sizes can be quite large,


26
00:01:37.564 --> 00:01:40.767 line:-2 align:center
making it less suitable
for larger animations.


27
00:01:41,702 --> 00:01:45,439 line:-2
Then we have JPEG,
introduced over 30 years ago.


28
00:01:45.472 --> 00:01:47.774 line:-1 align:center
A great feature is progressive loading,


29
00:01:47,808 --> 00:01:51,178 line:-2
where you can see some
of the image before it's fully loaded,


30
00:01:51.211 --> 00:01:56.250 line:-2 align:center
particularly convenient at a time where
network speeds weren't particularly fast.


31
00:01:56.283 --> 00:01:59.319 line:-2 align:center
It is best suited
for photographs and other images


32
00:01:59.353 --> 00:02:01.522 line:-1 align:center
with a lot of color and details.


33
00:02:01.555 --> 00:02:02.789 line:-1 align:center
It's a lossy format.


34
00:02:02,823 --> 00:02:06,894 line:-2
That means that some image data
is lost during the compression process.


35
00:02:06,927 --> 00:02:12,199 line:-2
The compression also allowed for smaller
file sizes and faster loading times.


36
00:02:12.232 --> 00:02:17.905 line:-2 align:center
With GIF having so many limitations,
PNG was created 26 years ago.


37
00:02:17.938 --> 00:02:21.041 line:-2 align:center
PNG supports transparency,
which makes them useful


38
00:02:21.074 --> 00:02:23.977 line:-2 align:center
for overlaying images
on top of each other.


39
00:02:24.011 --> 00:02:27.814 line:-2 align:center
It's great for images
with large areas of solid color,


40
00:02:27,848 --> 00:02:29,816 line:-1
or sharp text such as logos,


41
00:02:29,850 --> 00:02:33,453 line:-2
or illustrations like
the WebKit Javascript's squirrel fish.


42
00:02:33.487 --> 00:02:36.690 line:-2 align:center
It's lossless and doesn't compress
as well as JPEG,


43
00:02:36.723 --> 00:02:40.894 line:-2 align:center
so it's not very suitable
for big images with lots of color.


44
00:02:40.928 --> 00:02:44.765 line:-2 align:center
Like GIF, it was designed to replace,
it supports animations,


45
00:02:44.798 --> 00:02:47.734 line:-1 align:center
though I've rarely seen those in the wild.


46
00:02:49,136 --> 00:02:52,773 line:-2
By using these formats,
you can reach all your users,


47
00:02:52,806 --> 00:02:55,709 line:-2
regardless
of what web browser they are using.


48
00:02:56,543 --> 00:03:01,081 line:-2
Safari 17 supports
an additional four extra modern formats,


49
00:03:01.114 --> 00:03:04.451 line:-2 align:center
which you will want
to use in addition to the legacy ones,


50
00:03:04.484 --> 00:03:06.987 line:-1 align:center
and that I think makes the most sense.


51
00:03:07.020 --> 00:03:10.557 line:-2 align:center
While they are great
and pretty much all interchangeable,


52
00:03:10,591 --> 00:03:14,661 line:-2
they each have their key
advantages over the others.


53
00:03:14,695 --> 00:03:19,099 line:-2
WebP was added to Safari 14
and macOS Big Sur.


54
00:03:19,132 --> 00:03:23,403 line:-2
This is a modern image format
that uses advanced compression algorithms


55
00:03:23,437 --> 00:03:28,308 line:-2
to achieve smaller file sizes
without sacrificing image quality.


56
00:03:29,176 --> 00:03:33,280 line:-2
WebP files are typically smaller
than those earlier image formats,


57
00:03:33.313 --> 00:03:37.518 line:-2 align:center
which can help improve
website performance and loading times.


58
00:03:37.551 --> 00:03:41.088 line:-2 align:center
WebP lets you do animations
with video-like quality,


59
00:03:41,121 --> 00:03:44,258 line:-2
and so use it
where it's a bad idea to use GIF


60
00:03:44,291 --> 00:03:47,160 line:-1
due to their size or lack of colors.


61
00:03:47,895 --> 00:03:52,432 line:-2
One exciting addition to
Safari 17 is JPEG-XL,


62
00:03:52.466 --> 00:03:54.568 line:-1 align:center
a new image format that's designed


63
00:03:54,601 --> 00:03:57,704 line:-2
to offer high compression rates
and image quality.


64
00:03:58,639 --> 00:04:03,777 line:-2
JPEG-XL uses a new compression algorithm
called "Modular Entropy Coding"


65
00:04:03.810 --> 00:04:08.549 line:-2 align:center
that allows for greater flexibility
in adjusting the compression ratio.


66
00:04:09,316 --> 00:04:13,720 line:0
It is well suited for images that
may be served over slow connections,


67
00:04:13,754 --> 00:04:19,393 align:center
like JPEG, so users can see something
before the whole image is fully loaded.


68
00:04:19,426 --> 00:04:23,463 align:center
A key feature of JPEG-XL is
that you can losslessly convert,


69
00:04:23,497 --> 00:04:29,203 align:center
that is, not occur any data loss going
from your existing JPEG files to JPEG-XL,


70
00:04:29,236 --> 00:04:34,441 line:0
all while significantly reducing
their size by up to 60%.


71
00:04:34,474 --> 00:04:36,276 line:0
It's a relatively new format,


72
00:04:36,310 --> 00:04:41,548 line:0
and so may not be widely supported
by all devices and browsers.


73
00:04:41,582 --> 00:04:46,720 line:-2
AVIF is another modern image format
that uses the AV1 video codec


74
00:04:46,753 --> 00:04:51,825 line:-2
to achieve high compression rates
without sacrificing image quality.


75
00:04:51,859 --> 00:04:56,964 line:-2
Widely supported across all browsers,
it is well suited for live photos


76
00:04:56,997 --> 00:05:00,267 line:-1
and supports up to 12 bits color depth.


77
00:05:00.300 --> 00:05:04.838 line:-2 align:center
It also has the broadest support,
and you should include it as fallback.


78
00:05:04,872 --> 00:05:09,309 line:-2
AVIF can be
up to ten times smaller than JPEG.


79
00:05:09.343 --> 00:05:15.415 line:-2 align:center
In Safari 17, we added support for HEIC,
also known as HEIF.


80
00:05:15,449 --> 00:05:20,220 line:-2
It's an image format that uses the HEVC
video codec compression algorithm


81
00:05:20,254 --> 00:05:22,623 line:-1
to achieve small file sizes.


82
00:05:22,656 --> 00:05:25,859 line:-2
But since it's not widely supported
on other platforms,


83
00:05:25.893 --> 00:05:29.997 line:-2 align:center
you will probably only want
to use it as an alternative format.


84
00:05:30.030 --> 00:05:34.868 line:-2 align:center
This is the format used
by iPhones and iPad to save photos,


85
00:05:34,902 --> 00:05:40,140 line:-2
so you can directly handle photo uploaded
from your iPhone with no conversion.


86
00:05:40.174 --> 00:05:45.078 line:-2 align:center
If you intend to display images
using a WKWebView inside your app,


87
00:05:45.112 --> 00:05:49.082 line:-2 align:center
this is the format you should be using,
as it's hardware accelerated


88
00:05:49.116 --> 00:05:51.885 line:-2 align:center
and can be rendered quickly
and efficiently.


89
00:05:53,020 --> 00:05:58,525 line:-2
One of the key advantages of JPEG-XL,
AVIF and HEIC, however,


90
00:05:58,559 --> 00:06:02,796 line:-2
is that they support
both wide color gamut and HDR.


91
00:06:02.829 --> 00:06:06.533 line:-2 align:center
Supporting billions of colors,
the large color gamut


92
00:06:06.567 --> 00:06:11.572 line:-2 align:center
allows more colors to be preserved
on file and represented on screen.


93
00:06:12.739 --> 00:06:16.577 line:-2 align:center
HDR let you better define
how dark the darks can be,


94
00:06:16,610 --> 00:06:21,281 line:-2
and how bright the brightness can be,
and how much light can be taken in.


95
00:06:21,315 --> 00:06:25,018 line:-2
Together, you get more vibrancy
to outdoor landscapes,


96
00:06:25,052 --> 00:06:28,021 line:-2
or very bright scenes
with lots of contrasts,


97
00:06:28.055 --> 00:06:32.793 line:-2 align:center
or have perfect rendering
of those beautiful, complex skin tones.


98
00:06:34.127 --> 00:06:36.864 line:-2 align:center
As you want your website
to continue supporting


99
00:06:36.897 --> 00:06:39.166 line:-1 align:center
all widely deployed web browsers,


100
00:06:39.199 --> 00:06:44.872 line:-2 align:center
you will likely still need to provide GIF,
JPEG, and PNG for the years to come.


101
00:06:45,939 --> 00:06:51,245 line:0
However, by offering these extra formats,
you can make your site quicker to load


102
00:06:51,278 --> 00:06:55,082 align:center
and using less bandwidth,
while still being compatible.


103
00:06:55,115 --> 00:06:57,684 align:center
You really don't need to choose.


104
00:06:57,718 --> 00:06:59,553 line:0
Let me show you how.


105
00:06:59.586 --> 00:07:03.590 line:-2 align:center
Declaring an image element
with a JPEG-XL image means


106
00:07:03,624 --> 00:07:08,629 line:-2
older browsers and browsers that
don't support it will get a broken image.


107
00:07:09.630 --> 00:07:14.601 line:-2 align:center
The picture element in HTML allows you
to specify alternative sources,


108
00:07:14.635 --> 00:07:18.972 line:-2 align:center
allowing the browser
to choose a format that it supports.


109
00:07:19.006 --> 00:07:22.442 line:-2 align:center
You can even provide
multiple alternative sources,


110
00:07:22.476 --> 00:07:26.346 line:-2 align:center
prioritizing the format
that gives the best performance.


111
00:07:26.380 --> 00:07:31.185 line:-2 align:center
The browser will look over the list
of available format from top to bottom.


112
00:07:31.218 --> 00:07:35.455 line:-2 align:center
So here,
it will use HEIC first if supported.


113
00:07:35.489 --> 00:07:39.893 line:-2 align:center
If no matches are found
or if decoding failed along the way,


114
00:07:39.927 --> 00:07:43.564 line:-2 align:center
the URL of the image element's
source is selected.


115
00:07:43,597 --> 00:07:46,867 line:-2
That's how easy it is
to provide the right format for people


116
00:07:46.900 --> 00:07:48.869 line:-1 align:center
regardless of device support


117
00:07:48.902 --> 00:07:52.039 line:-2 align:center
without the need for looking
at the User-Agent string


118
00:07:52.072 --> 00:07:55.008 line:-2 align:center
or worry about the browser
the user will use.


119
00:07:55,042 --> 00:07:59,146 line:-2
You don't need to choose.
Let the browser do it for you.


120
00:07:59,179 --> 00:08:02,783 line:-2
Now that we know
the modern image formats we can use


121
00:08:02.816 --> 00:08:06.386 line:-2 align:center
and when to use them,
let's take a look at video,


122
00:08:06,420 --> 00:08:10,824 line:-2
and specifically,
let's dive into adaptive streaming video.


123
00:08:10,858 --> 00:08:15,796 line:-2
The evolution of video presentation
on websites has been a fascinating one,


124
00:08:15,829 --> 00:08:19,433 line:-2
and it has come a long way
since the early days of the web.


125
00:08:19.466 --> 00:08:22.202 line:-2 align:center
Here are some
of the key milestones in the evolution


126
00:08:22.236 --> 00:08:25.372 line:-1 align:center
of video presentation on websites.


127
00:08:25.405 --> 00:08:28.709 line:-2 align:center
In the early days of the web,
video was not commonly used


128
00:08:28.742 --> 00:08:31.311 line:-1 align:center
on websites due to technical limitations.


129
00:08:31.345 --> 00:08:35.549 line:-2 align:center
Websites were primarily made up
of text and static images.


130
00:08:35.582 --> 00:08:39.786 line:-2 align:center
In the early 2000s,
browser plugins like Flash and QuickTime


131
00:08:39,820 --> 00:08:43,323 line:-2
emerged as a popular way
to add video to websites.


132
00:08:43,357 --> 00:08:47,127 line:-1
And in 2010, HTML5 was introduced,


133
00:08:47.160 --> 00:08:49.463 line:-1 align:center
which made it possible to embed video


134
00:08:49,496 --> 00:08:53,066 line:-2
directly into webpages
without the need for those plugins.


135
00:08:53,100 --> 00:08:56,336 line:-2
This made it easier
to add video to websites,


136
00:08:56,370 --> 00:08:59,139 line:-2
and also allowed
for greater flexibility and control


137
00:08:59.173 --> 00:09:02.276 line:-2 align:center
over how video content
was displayed and played.


138
00:09:02,309 --> 00:09:05,579 line:-2
And WebKit was
at the forefront of this revolution.


139
00:09:05,612 --> 00:09:09,750 line:-2
With the rise of mobile devices,
it became increasingly important


140
00:09:09.783 --> 00:09:14.154 line:-2 align:center
for websites to be able to display
video content on smaller screens.


141
00:09:14,188 --> 00:09:17,591 line:-2
This led to the development
of new techniques to allow websites


142
00:09:17,624 --> 00:09:21,395 line:-2
to adapt to different screen sizes
and orientations.


143
00:09:21,428 --> 00:09:25,866 line:-2
HTTP Live Streaming
was introduced by Apple in 2009.


144
00:09:25,899 --> 00:09:31,004 line:-2
One of the key features of HLS is its
support for adaptive bitrate streaming,


145
00:09:31.038 --> 00:09:34.775 line:-2 align:center
which allows for the delivery
of the best possible video quality


146
00:09:34.808 --> 00:09:40.314 line:-2 align:center
based on the user's internet
connection speed and device capabilities.


147
00:09:40,347 --> 00:09:42,850 line:0
Adaptive streaming in HLS


148
00:09:42,883 --> 00:09:44,985 align:center
works by dividing the video content


149
00:09:45,018 --> 00:09:47,187 line:0
into small chunks or segments,


150
00:09:47,221 --> 00:09:50,357 line:0
typically between two and ten seconds
in length.


151
00:09:50,390 --> 00:09:53,260 align:center
Each segment is encoded
at multiple bitrates,


152
00:09:53,293 --> 00:09:57,097 align:center
and these different bitrate versions
are made available to the client


153
00:09:57,130 --> 00:10:02,936 align:center
via a manifest file in the form
of an M3U8 multi-variant playlist.


154
00:10:02.970 --> 00:10:07.207 line:-2 align:center
HLS does a brilliant job
at selecting the best suitable variant.


155
00:10:07.241 --> 00:10:11.645 line:-2 align:center
It's very simple to use and is
the best solution for the end users.


156
00:10:11.678 --> 00:10:16.817 line:-2 align:center
Unfortunately, on desktop,
not all browsers included support for HLS,


157
00:10:16.850 --> 00:10:19.520 line:-1 align:center
and even today, only Safari supports it.


158
00:10:19.553 --> 00:10:23.090 line:-2 align:center
Web developers wanted
more control and more flexibility,


159
00:10:23.123 --> 00:10:25.993 line:-2 align:center
such as the selection
and transfer of media data,


160
00:10:26,026 --> 00:10:30,030 line:-2
or the ability
to play DRMed content on desktop.


161
00:10:30,063 --> 00:10:32,466 line:-1
And so in 2013,


162
00:10:32.499 --> 00:10:36.370 line:-2 align:center
the Media Source Extension
was published by the W3C body.


163
00:10:36.403 --> 00:10:40.941 line:-2 align:center
Safari 8 along with other browsers
quickly added support for it


164
00:10:40,974 --> 00:10:45,512 line:-2
Media Source Extension, or MSE,
is a low-level toolkit that allows


165
00:10:45.546 --> 00:10:49.349 line:-2 align:center
for adaptive streaming
by giving the webpage more control


166
00:10:49.383 --> 00:10:53.720 line:-2 align:center
and responsibilities
for managing buffering and resolution.


167
00:10:53,754 --> 00:10:57,691 line:-2
Overall, MSE has been a game changer
for web developers.


168
00:10:57.724 --> 00:11:01.428 line:-2 align:center
It has enabled the development
of high-quality streaming experiences


169
00:11:01.461 --> 00:11:05.365 line:-2 align:center
on the web and is now
the most used web video technology.


170
00:11:05,399 --> 00:11:07,234 line:-1
MSE has some drawbacks.


171
00:11:07,267 --> 00:11:10,437 line:-2
It isn't particularly good
at managing of buffer levels,


172
00:11:10.470 --> 00:11:15.008 line:-2 align:center
the timing and amount of network access,
and media variant selection.


173
00:11:15.042 --> 00:11:20.380 line:-2 align:center
These inefficiencies have largely been
immaterial on relatively powerful devices


174
00:11:20.414 --> 00:11:23.016 line:-1 align:center
like modern general purpose computers.


175
00:11:23.050 --> 00:11:27.821 line:-2 align:center
Power usage on mobile devices was much
higher than with the HLS native player,


176
00:11:27.855 --> 00:11:32.392 line:-2 align:center
and so MSE was never made available
on iPhones because we couldn't achieve


177
00:11:32.426 --> 00:11:35.262 line:-1 align:center
with MSE the required battery savings.


178
00:11:35,295 --> 00:11:38,999 line:-2
All our testing of various sites
proved that enabling MSE


179
00:11:39,032 --> 00:11:41,869 line:-2
would have lead
to a regression in battery life.


180
00:11:42.936 --> 00:11:45.606 line:-1 align:center
On devices with narrower capabilities


181
00:11:45.639 --> 00:11:48.275 line:-2 align:center
or where the connectivity
is spotty at best,


182
00:11:48.308 --> 00:11:51.111 line:-2 align:center
it can also be difficult
to achieve the same quality


183
00:11:51.144 --> 00:11:55.282 line:-2 align:center
of playback with the MediaSource API
than is possible with HLS.


184
00:11:56.650 --> 00:12:00.854 line:-2 align:center
One of the reason for this is
that MSE transferred most control


185
00:12:00,888 --> 00:12:04,191 line:-2
over the streaming of media data
from the User Agent


186
00:12:04.224 --> 00:12:06.760 line:-1 align:center
to the application running in the page.


187
00:12:07.728 --> 00:12:11.365 line:-2 align:center
This transfer of control
added points of inefficiencies,


188
00:12:11,398 --> 00:12:14,201 line:-2
the page does not have
the same level of knowledge


189
00:12:14.234 --> 00:12:16.503 line:-1 align:center
or even goals as the User Agent,


190
00:12:16,537 --> 00:12:19,840 line:-2
like they may seek
the cheapest networking connection path,


191
00:12:19,873 --> 00:12:23,777 line:-2
and this typically led
to much higher power usage.


192
00:12:23.810 --> 00:12:26.980 line:-2 align:center
And this year,
we wanted to address those drawbacks,


193
00:12:27.014 --> 00:12:28.815 line:-1 align:center
and we worked hard to find a way


194
00:12:28.849 --> 00:12:34.121 line:-2 align:center
to combine the flexibility provided by MSE
with the efficiency of HLS.


195
00:12:34,154 --> 00:12:37,291 line:-2
And so I am super pleased
to introduce this new technology


196
00:12:37.324 --> 00:12:42.696 line:-2 align:center
that combines the best of MSE
with the elements that makes HLS awesome,


197
00:12:42.729 --> 00:12:45.599 line:-1 align:center
the Managed Media Source API.


198
00:12:45.632 --> 00:12:50.103 line:-2 align:center
A "managed" MediaSource is one
where more control over the MediaSource


199
00:12:50.137 --> 00:12:54.608 line:-2 align:center
and its associated objects
has been given over to the browser.


200
00:12:54,641 --> 00:12:58,111 line:-2
It makes it easier
for media website authors to support


201
00:12:58.145 --> 00:13:02.182 line:-2 align:center
streaming media playback
on constrained capability devices,


202
00:13:02,216 --> 00:13:05,619 line:-2
all while allowing User Agents
to react to changes


203
00:13:05.652 --> 00:13:09.089 line:-2 align:center
in available memory
and networking capabilities.


204
00:13:09.122 --> 00:13:12.860 line:-2 align:center
Let’s go over some
of the differences over the old MSE.


205
00:13:12.893 --> 00:13:16.797 line:-2 align:center
Managed Media Source can reduce
power usage by telling the webpage


206
00:13:16.830 --> 00:13:19.733 line:-2 align:center
when it's a good time
to buffer more media data.


207
00:13:19.766 --> 00:13:23.103 line:-2 align:center
When not buffering,
it allows the cellular modem to go


208
00:13:23.136 --> 00:13:26.073 line:-2 align:center
into a low power state
for longer periods of time,


209
00:13:26.106 --> 00:13:28.141 line:-1 align:center
increasing battery life.


210
00:13:29.042 --> 00:13:31.879 line:-2 align:center
When the system gets
into a low memory state,


211
00:13:31,912 --> 00:13:34,982 line:-2
Managed Media Source
will intelligently clear out unused


212
00:13:35,015 --> 00:13:39,086 line:-2
or abandoned buffered memory,
making pages more efficient.


213
00:13:40.020 --> 00:13:44.091 line:-2 align:center
Because Managed Media Source tracks
when buffering should start and stop,


214
00:13:44.124 --> 00:13:47.628 line:-2 align:center
the page's job of detecting
low buffer and full buffer states


215
00:13:47.661 --> 00:13:49.162 line:-1 align:center
becomes much easier.


216
00:13:49,196 --> 00:13:51,331 line:-1
The browser does it for you.


217
00:13:52,766 --> 00:13:54,835 line:-1
With these improvements in place,


218
00:13:54,868 --> 00:13:58,505 line:-2
Safari can send media requests
over the 5G modem.


219
00:13:58,539 --> 00:14:02,109 line:-2
This allows your site
to use the blazingly fast 5G network


220
00:14:02.142 --> 00:14:04.778 line:-1 align:center
to load media data incredibly quickly,


221
00:14:04,811 --> 00:14:07,915 line:-2
while having a minimum impact
on power use.


222
00:14:07,948 --> 00:14:09,983 line:-1
And if you need to play a live show,


223
00:14:10.017 --> 00:14:12.853 line:-2 align:center
Managed Media Source
will automatically detect it


224
00:14:12.886 --> 00:14:18.325 line:-2 align:center
and switch to LTE or 4G, where available,
to extend your battery life.


225
00:14:18.358 --> 00:14:20.494 line:-1 align:center
You are still in the driver seat.


226
00:14:20.527 --> 00:14:23.931 line:-2 align:center
You are still in control
on which resolution to fetch,


227
00:14:23.964 --> 00:14:26.733 line:-2 align:center
how you download each segment
and from where.


228
00:14:26,767 --> 00:14:29,703 line:-2
Managed Media Source only
provides hints and gives you


229
00:14:29.736 --> 00:14:32.773 line:-1 align:center
a more efficient version of MSE.


230
00:14:32.806 --> 00:14:37.444 line:-2 align:center
By using ManagedMediaSource,
you will save bandwidth and battery life,


231
00:14:37.477 --> 00:14:40.380 line:-2 align:center
allowing your user
to watch your video for longer,


232
00:14:40.414 --> 00:14:44.218 line:-2 align:center
not only on their iPhones,
but also their iPads and Macs.


233
00:14:44,251 --> 00:14:49,656 line:-2
Let me show you how easy it is migrate
from MSE to Managed Media Source.


234
00:14:49.690 --> 00:14:53.360 line:-2 align:center
Transitioning your video player
from MSE to Managed Media Source


235
00:14:53.393 --> 00:14:57.631 line:-1 align:center
is easy and only requires a few steps.


236
00:14:57.664 --> 00:15:02.102 line:-2 align:center
Here, I will open a very simple HTML page
I had used multiple times


237
00:15:02,135 --> 00:15:05,706 line:-1
in the past to test MSE development.


238
00:15:05.739 --> 00:15:11.545 line:-2 align:center
It creates a video element and loads
12 seconds of data, and then plays it.


239
00:15:11.578 --> 00:15:13.847 line:-1 align:center
All the logic actually occurs


240
00:15:13.881 --> 00:15:17.751 line:-2 align:center
in a utility file mediasource.js
that is included.


241
00:15:17.784 --> 00:15:22.322 line:-2 align:center
Let's look at it, and in particular,
the method runWithMSE.


242
00:15:22,356 --> 00:15:26,360 line:-2
RunwithMSE waits for the page to load,
create a video element,


243
00:15:26,393 --> 00:15:31,665 line:-2
and attach it to a MediaSource object,
and append it to our HTML's body.


244
00:15:31.698 --> 00:15:35.435 line:-2 align:center
First, you need ensure
that Managed Media Source is available.


245
00:15:35,469 --> 00:15:38,038 line:-2
This is easily done
by checking the document


246
00:15:38,071 --> 00:15:43,777 line:-2
that ManagedMediaSource object is defined,
and if not, fall back to using MSE.


247
00:15:43.810 --> 00:15:48.682 line:-2 align:center
Then replace any call to MediaSource
by ManagedMediaSource itself.


248
00:15:48,715 --> 00:15:54,421 line:-2
Another way, and in my opinion easier,
is to override MediaSource itself like so:


249
00:15:55,055 --> 00:15:59,927 line:-2
You define a method getMediaSource()
and set a MediaSource shim.


250
00:16:05,799 --> 00:16:08,836 line:-2
And now, whenever you are
referring to MediaSource,


251
00:16:08.869 --> 00:16:12.372 line:-2 align:center
you will actually be using
ManagedMediaSource instead.


252
00:16:12.406 --> 00:16:17.644 line:-2 align:center
Managed Media Source should always be
your first choice over the older MSE.


253
00:16:17.678 --> 00:16:21.281 line:-1 align:center
Now, back to my HTML page.


254
00:16:22.850 --> 00:16:26.687 line:-2 align:center
After creating SourceBuffer,
now ManagedSourceBuffer,


255
00:16:26,720 --> 00:16:28,822 line:-1
you add two event handlers.


256
00:16:28,856 --> 00:16:34,094 line:-2
Startstreaming will notify the player
when it should start fetching new content


257
00:16:34,127 --> 00:16:37,097 line:-1
and add it to the managed sourceBuffer.


258
00:16:38,365 --> 00:16:42,769 line:-2
And one to handle the "endstreaming"
event to tell when the player needs


259
00:16:42.803 --> 00:16:44.872 line:-1 align:center
to stop fetching new data.


260
00:16:44,905 --> 00:16:47,875 line:-2
The user-agent now has determined
that it has enough data,


261
00:16:47.908 --> 00:16:50.978 line:-1 align:center
and it can now enter low power mode.


262
00:16:51.011 --> 00:16:52.579 line:-1 align:center
For this demonstration,


263
00:16:52,613 --> 00:16:56,583 line:-2
the endstreaming event handler
is just a placeholder.


264
00:16:56,617 --> 00:17:00,654 line:-2
Unlike with MSE,
your sourceBuffer may evict content


265
00:17:00.687 --> 00:17:03.957 line:-2 align:center
at any time,
and not just when appending data.


266
00:17:03.991 --> 00:17:07.861 line:-2 align:center
With MSE it was never a good idea
to assume your buffered range


267
00:17:07.895 --> 00:17:12.933 line:-2 align:center
only increased when appending new data,
which would have caused playback to stall


268
00:17:12,966 --> 00:17:16,803 line:-2
and the MSE specification
encouraged you to regularly check.


269
00:17:16,837 --> 00:17:21,074 line:0
So you also need to add an event handler
for the bufferedchange event


270
00:17:21,108 --> 00:17:24,745 align:center
where you will need
to check which data was evicted.


271
00:17:29,683 --> 00:17:32,886 line:-2
If you follow the guidance
of the Managed Media Source events


272
00:17:32,920 --> 00:17:36,557 line:-2
and only append data
when the element asks you to do so,


273
00:17:36,590 --> 00:17:40,027 line:-2
you will get access to 5G speed
on iPhone and iPad,


274
00:17:40,060 --> 00:17:43,130 line:-2
giving your users access
to higher resolutions,


275
00:17:43.163 --> 00:17:47.100 line:-2 align:center
shorter rebuffering time,
and best possible battery life.


276
00:17:47,134 --> 00:17:50,003 line:-2
You are now ready
to handle adaptive streaming


277
00:17:50.037 --> 00:17:54.141 line:-2 align:center
using the new ManagedMediaSource
available in Safari 17.


278
00:17:54,174 --> 00:17:57,845 line:-2
Though if all you care about
are Apple devices,


279
00:17:57,878 --> 00:18:01,515 line:-2
using HLS instead
will likely make more sense.


280
00:18:01.548 --> 00:18:05.252 line:-2 align:center
There's one more thing your users
will want to continue doing:


281
00:18:05.285 --> 00:18:08.522 line:-2 align:center
The ability to AirPlay
to their favorite TVs.


282
00:18:08,555 --> 00:18:11,625 line:-2
One of the great benefit
of using native HLS


283
00:18:11.658 --> 00:18:14.628 line:-1 align:center
was the automatic support for AirPlay.


284
00:18:14.661 --> 00:18:18.732 line:-2 align:center
With AirPlay, while sitting on your couch,
you can move the video


285
00:18:18,765 --> 00:18:21,835 line:-2
from your phone
to your big AirPlay device.


286
00:18:21.869 --> 00:18:26.473 line:-2 align:center
Airplay requires a URL that you can send,
which doesn't exist in MSE,


287
00:18:26.507 --> 00:18:30.677 line:-2 align:center
and this created a problem
we also wanted to resolve.


288
00:18:30.711 --> 00:18:33.547 line:-2 align:center
In the choosing
the right image format earlier,


289
00:18:33,580 --> 00:18:38,218 line:-2
I showed you with the picture element
how you could add alternative sources.


290
00:18:38.252 --> 00:18:41.321 line:-2 align:center
The video element
offers the same mechanism.


291
00:18:41.355 --> 00:18:44.291 line:-2 align:center
Simply add
your HTTP Live Streaming playlist


292
00:18:44.324 --> 00:18:46.960 line:-1 align:center
to a child source element for the video,


293
00:18:46.994 --> 00:18:51.198 line:-2 align:center
and when the user AirPlays your content,
Safari will switch away


294
00:18:51,231 --> 00:18:54,368 line:-2
from your Managed Media Source
and play the HLS stream


295
00:18:54.401 --> 00:18:55.836 line:-1 align:center
on the AirPlay device.


296
00:18:55,869 --> 00:19:00,374 line:-2
Safari will automatically add an AirPlay
icon to the video player controls


297
00:19:00.407 --> 00:19:02.976 line:-1 align:center
and let the user AirPlay the video.


298
00:19:03.010 --> 00:19:08.949 line:-2 align:center
If this all sounded too complicated,
you can use frameworks, such as HLS.js,


299
00:19:08,982 --> 00:19:13,086 line:-2
that will support Managed Media Source
automatically when available


300
00:19:13.120 --> 00:19:16.089 line:-1 align:center
and will do all the hard work for you.


301
00:19:16.123 --> 00:19:20.060 line:-2 align:center
Making use of HLS.js
for handling your video is fairly easy


302
00:19:20.093 --> 00:19:25.999 line:-2 align:center
and usable on all web browsers,
even those not natively supporting HLS.


303
00:19:26,033 --> 00:19:31,939 line:-2
First, you will need to create a video
element in your HTML file like usual.


304
00:19:31,972 --> 00:19:36,143 line:-2
We first check if HLS
is natively supported by the browser.


305
00:19:36.176 --> 00:19:41.682 line:-2 align:center
If it is, we can directly set the video
source attribute to the manifest URL.


306
00:19:41.715 --> 00:19:46.220 line:-2 align:center
If not, we check if HLS.js can run,
and if so,


307
00:19:46,253 --> 00:19:49,289 line:-2
create a new instance
of the HLS.js library


308
00:19:49,323 --> 00:19:52,926 line:-2
and attach it to the video element
with ID "my-video."


309
00:19:52.960 --> 00:19:57.898 line:-2 align:center
We then load the HLS playlist file,
in this case, my-video.m3u8.


310
00:19:57,931 --> 00:19:59,166 line:-1
That's it.


311
00:19:59.199 --> 00:20:03.804 line:-2 align:center
With these steps, you should be able
to play HLS videos on most browsers.


312
00:20:05.305 --> 00:20:09.376 line:-2 align:center
When designing Managed MSE,
we wanted to make sure that nothing


313
00:20:09.409 --> 00:20:13.514 line:-2 align:center
was left out by accident and that users
continue to get the same level


314
00:20:13.547 --> 00:20:15.916 line:-1 align:center
of features as they did in the past.


315
00:20:15.949 --> 00:20:19.853 line:-2 align:center
So to activate Managed MSE
on Mac, iPad, and iPhone,


316
00:20:19.887 --> 00:20:23.824 line:-2 align:center
your player must provide
an AirPlay source alternative.


317
00:20:23.857 --> 00:20:27.261 line:-2 align:center
You can still have access
to Managed MSE without it,


318
00:20:27.294 --> 00:20:31.698 line:-2 align:center
but you must explicitly disable AirPlay
by calling disableRemotePlayback


319
00:20:31.732 --> 00:20:35.202 line:-2 align:center
on your media element
from the Remote Playback API.


320
00:20:35.235 --> 00:20:36.503 line:-1 align:center
And that's it.


321
00:20:36,537 --> 00:20:41,008 line:-2
Managed MSE supports all the same
great technology we added last year,


322
00:20:41,041 --> 00:20:44,611 line:-2
such as SharePlay,
spatialized audio, or HDR.


323
00:20:44,645 --> 00:20:47,915 line:-1
Managed MSE is available in Safari 17


324
00:20:47.948 --> 00:20:52.953 line:-2 align:center
on macOS and iPad OS
and behind an experimental flag on iPhone.


325
00:20:52.986 --> 00:20:56.924 line:-2 align:center
We are so excited for this
to finally be coming to iPhone.


326
00:20:56.957 --> 00:21:02.162 line:-2 align:center
I hope you'll try the new image formats
and experiment with Managed Media Source.


327
00:21:02,196 --> 00:21:05,999 line:-2
Please make sure
to test your site with Safari.


328
00:21:06.033 --> 00:21:09.837 line:-2 align:center
Also, we release
Safari Technology Preview fortnightly,


329
00:21:09.870 --> 00:21:12.606 line:-1 align:center
where you can test the latest new features


330
00:21:12.639 --> 00:21:17.544 line:-2 align:center
as they come available
and before it reaches end users.


331
00:21:17.578 --> 00:21:20.180 line:-1 align:center
Like all actively developed programs,


332
00:21:20.214 --> 00:21:23.083 line:-2 align:center
glitches and bugs happen
from time to time,


333
00:21:23,116 --> 00:21:26,253 line:-2
and we would be immensely grateful
if you reported those


334
00:21:26.286 --> 00:21:29.957 line:-2 align:center
to bugs.webkit.org
should you encounter them.


335
00:21:29,990 --> 00:21:32,826 line:-2
You can also submit
comments or suggestions.


336
00:21:32.860 --> 00:21:34.761 line:-4 align:center
We are always listening.


337
00:21:34,795 --> 00:21:40,033 line:-5
You can learn about new CSS features
in Safari in "What's new in CSS."


338
00:21:40.067 --> 00:21:43.170 line:-5 align:center
And check out
"Rediscover Safari developer features"


339
00:21:43,203 --> 00:21:48,075 line:-5
to learn about turning on feature flags
to try out Managed Media Source.


340
00:21:48.108 --> 00:21:50.143 line:-1 align:center
Thank you for watching.


341
00:21:50,177 --> 00:21:54,314 align:center
♪ ♪

