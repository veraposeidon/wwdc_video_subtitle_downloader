2
00:00:01.001 --> 00:00:08.008 line:-1 align:center
♪ ♪


3
00:00:10.010 --> 00:00:13.180 line:-1 align:center
Georgi: Hello and welcome!


4
00:00:13.247 --> 00:00:16.650 line:-2 align:center
I’m Georgi Rakidov,
Software Engineer in GPU,


5
00:00:16,717 --> 00:00:19,052 line:-1
Graphics, and Display Software.


6
00:00:19,119 --> 00:00:22,155 line:-2
This session is the third
of a three-part series


7
00:00:22,222 --> 00:00:24,558 line:-1
that helps you bring your game to Mac.


8
00:00:24,625 --> 00:00:28,795 line:-2
The first session covers how
you can use the new Game Porting Toolkit


9
00:00:28.862 --> 00:00:31.865 line:-2 align:center
to run your umodified Windows game
on the Mac


10
00:00:31.932 --> 00:00:35.769 line:-2 align:center
to evaluate your graphics, audio,
and display features


11
00:00:35.836 --> 00:00:39.540 line:-2 align:center
the second session shows how much
development time you can save


12
00:00:39.606 --> 00:00:43.310 line:-2 align:center
by compiling your existing HLSL shaders
to Metal


13
00:00:43.377 --> 00:00:47.214 line:-1 align:center
using the new Metal Shader Converter tool.


14
00:00:47,281 --> 00:00:51,385 line:-2
This session completes the process
of bringing your game to Mac


15
00:00:51.451 --> 00:00:55.856 line:-2 align:center
by giving you detailed insights about
how to port your renderer to Metal


16
00:00:55,923 --> 00:00:59,359 line:-2
and get great performance
out of Apple Silicon.


17
00:00:59,426 --> 00:01:04,198 line:-2
As you port your renderer to Metal,
you’ll notice your engine requires mapping


18
00:01:04,264 --> 00:01:08,669 line:-2
the concepts from other platform graphics
APIs to Metal.


19
00:01:08.735 --> 00:01:14.174 line:-2 align:center
To help you with that, this session covers
four topics, with Metal best practices,


20
00:01:14,241 --> 00:01:18,212 line:-2
so you can leverage the
powerful architecture of Apple GPUs.


21
00:01:18,278 --> 00:01:22,249 line:-2
Each game is responsible
for making GPU resources,


22
00:01:22,316 --> 00:01:26,720 line:-2
including textures and data buffers,
available to the GPU,


23
00:01:26,787 --> 00:01:30,557 line:-2
and configuring how your shaders
can access them.


24
00:01:30,624 --> 00:01:34,394 line:-2
Your game can leverage
the powerful graphics architecture


25
00:01:34.461 --> 00:01:40.434 line:-2 align:center
of Apple processors by optimizing
how it submits commands to the GPU.


26
00:01:40.501 --> 00:01:46.840 line:-2 align:center
Games typically implement modern rendering
techniques by using indirect rendering.


27
00:01:46.907 --> 00:01:50.777 line:-2 align:center
MetalFX helps games save time
for each frame


28
00:01:50.844 --> 00:01:55.082 line:-2 align:center
by rendering to a lower resolution
and then upscaling with MetalFX


29
00:01:55,148 --> 00:01:57,417 line:-1
to the final resolution.


30
00:01:57,484 --> 00:02:01,522 line:-2
When it comes to managing resources,
each engine has to decide


31
00:02:01.588 --> 00:02:07.227 line:-2 align:center
how the GPU accesses each texture,
data buffer, and so on.


32
00:02:07.294 --> 00:02:09.663 line:-1 align:center
On Metal, it's important to think about


33
00:02:09,730 --> 00:02:13,767 line:-2
providing shaders access to resources
with bindings,


34
00:02:13.834 --> 00:02:18.272 line:-2 align:center
and Making resources resident
into GPU-accessible memory


35
00:02:18.338 --> 00:02:21.575 line:-1 align:center
and keeping access to them synchronized.


36
00:02:21,642 --> 00:02:24,778 line:-1
Resource bindings and shaders go together.


37
00:02:24,845 --> 00:02:29,950 line:-2
Start by translating your existing shaders
with the Metal Shader Converter,


38
00:02:30.017 --> 00:02:31.752 line:-1 align:center
which is a new tool this year,


39
00:02:31,818 --> 00:02:36,023 line:-2
that can save you a lot of time
porting your shaders to Metal.


40
00:02:36,089 --> 00:02:39,126 line:-2
You can learn more from the
"Compile your Shaders" session


41
00:02:39.193 --> 00:02:40.661 line:-1 align:center
in this series.


42
00:02:40.727 --> 00:02:45.832 line:-2 align:center
Metal Shader Converter gives
you two binding models to choose from.


43
00:02:45.899 --> 00:02:48.769 line:-2 align:center
With "Automatic layout,"
the converter generates


44
00:02:48.836 --> 00:02:51.638 line:-1 align:center
the binding information automatically,


45
00:02:51,705 --> 00:02:55,475 line:-2
or you can pass binding information
to Metal Shader Converter


46
00:02:55.542 --> 00:02:57.277 line:-1 align:center
with "Explicit Layout."


47
00:02:57.344 --> 00:03:01.081 line:-2 align:center
Explicit layout is very flexible
and can be helpful


48
00:03:01.148 --> 00:03:06.253 line:-2 align:center
when you need to implement binding models
from other platforms.


49
00:03:06.320 --> 00:03:11.525 line:-2 align:center
For example, some API designs
use a shader root signature,


50
00:03:11,592 --> 00:03:14,928 line:-2
and here is a typical one
with four entries:


51
00:03:14.995 --> 00:03:19.700 line:-2 align:center
a descriptor table
that points to a series of textures,


52
00:03:19,766 --> 00:03:24,571 line:-2
a buffer root parameter,
a 32-bit constant,


53
00:03:24.638 --> 00:03:30.611 line:-2 align:center
and another descriptor table
that points to a series of samplers.


54
00:03:30,677 --> 00:03:34,214 line:-1
Each descriptor table is a resource array


55
00:03:34,281 --> 00:03:36,817 line:-2
that contains elements
of the same type,


56
00:03:36,884 --> 00:03:42,022 line:-2
such as all textures, all samplers,
or all buffers.


57
00:03:42,089 --> 00:03:47,928 line:-2
Metal's argument buffers are more flexible
in that elements can be of multiple types.


58
00:03:47,995 --> 00:03:50,931 line:-2
But if your engine expects
a homogenous array,


59
00:03:50.998 --> 00:03:54.334 line:-2 align:center
you can easily encode them
with an argument buffer.


60
00:03:54,401 --> 00:03:59,840 line:-2
This example encodes the equivalent
of a texture descriptor table.


61
00:03:59.907 --> 00:04:05.846 line:-2 align:center
It starts by allocating a Metal buffer
that serves as a texture descriptor table


62
00:04:05,913 --> 00:04:10,684 line:-2
by storing the Metal resource ID
for each texture.


63
00:04:10.751 --> 00:04:12.819 line:-1 align:center
As it creates each texture,


64
00:04:12,886 --> 00:04:19,026 line:-2
the code stores its resourceID
directly into the table.


65
00:04:19.092 --> 00:04:23.430 line:-2 align:center
The nice part is
you can run code like this up front


66
00:04:23,497 --> 00:04:25,933 line:-1
and outside of your rendering loop!


67
00:04:25,999 --> 00:04:32,639 line:-2
The process for encoding a sampler
descriptor table is almost the same.


68
00:04:32.706 --> 00:04:37.878 line:-2 align:center
Just like with textures,
the code starts by creating a Metal buffer


69
00:04:37.945 --> 00:04:41.415 line:-2 align:center
that serves
as the sampler descriptor table.


70
00:04:41,481 --> 00:04:44,818 line:-2
As the code configures
each sampler's descriptor,


71
00:04:44.885 --> 00:04:49.256 line:-2 align:center
it sets the supportArgumentBuffers
property to yes.


72
00:04:49,323 --> 00:04:53,026 line:-2
After the code creates the sampler
with the descriptor,


73
00:04:53.093 --> 00:04:57.831 line:-2 align:center
it saves the sampler's resourceID
in the table.


74
00:04:57,898 --> 00:05:00,667 line:-1
You can also use an argument buffer


75
00:05:00.734 --> 00:05:04.771 line:-2 align:center
to represent the top-level
root signature itself.


76
00:05:04.838 --> 00:05:09.643 line:-2 align:center
This example defines
a structure for the root signature


77
00:05:09,710 --> 00:05:15,549 line:-2
and creates a Metal buffer
that can store one instance of it.


78
00:05:15,616 --> 00:05:19,820 line:-2
The code assigns each field
of the structure's fields


79
00:05:19,887 --> 00:05:21,555 line:-1
with appropriate values,


80
00:05:21,622 --> 00:05:26,059 line:-2
including GPU addresses
for the texture and sampler tables.


81
00:05:26.126 --> 00:05:29.563 line:-2 align:center
That’s all it takes
to convert a root signature.


82
00:05:29.630 --> 00:05:33.300 line:-2 align:center
Argument buffers
are super-efficient in Metal 3!


83
00:05:33,367 --> 00:05:38,005 line:-2
Now you can just bind the top-level
argument buffer to a shader.


84
00:05:38,071 --> 00:05:43,143 line:-2
This part is done in the render loop,
but you can create the descriptor tables


85
00:05:43.210 --> 00:05:48.215 line:-2 align:center
and root structure beforehand
outside the render loop.


86
00:05:48.282 --> 00:05:51.985 line:-2 align:center
Metal 3 argument buffers
provide a flexible,


87
00:05:52,052 --> 00:05:55,422 line:-2
performant way
to translate other binding models,


88
00:05:55.489 --> 00:06:00.027 line:-2 align:center
including root signatures
and descriptor tables.


89
00:06:00,093 --> 00:06:04,364 line:-2
Resources need to be resident
during the execution of a given pass


90
00:06:04.431 --> 00:06:08.769 line:-2 align:center
or render stage in order
for shaders to access them.


91
00:06:08.836 --> 00:06:11.905 line:-2 align:center
And if a resource
is shared between passes,


92
00:06:11.972 --> 00:06:16.310 line:-2 align:center
the order of execution of those passes
has to be synchronized.


93
00:06:16,376 --> 00:06:20,347 line:-2
The usage of bindless resources
with Metal argument buffers


94
00:06:20,414 --> 00:06:25,052 line:-2
requires explicit residency management
on all GPU architectures,


95
00:06:25.118 --> 00:06:30.157 line:-2 align:center
and Metal provides efficient ways
to control residency.


96
00:06:30.224 --> 00:06:35.195 line:-2 align:center
The recommendation is to group
all read-only resources in big heaps.


97
00:06:35,262 --> 00:06:39,366 line:-2
That way, you can just call useHeap
once per encoder


98
00:06:39.433 --> 00:06:42.803 line:-2 align:center
and all your read-only resources
will be made resident


99
00:06:42,870 --> 00:06:46,306 line:-2
for the duration of that pass
or render stage,


100
00:06:46,373 --> 00:06:50,244 line:-1
ready to be accessed by the shaders.


101
00:06:50.310 --> 00:06:52.112 line:-1 align:center
This is how you can do it.


102
00:06:52.179 --> 00:06:57.918 line:-2 align:center
Create a heap with the necessary size
to allocate all your read-only resources,


103
00:06:57,985 --> 00:07:02,890 line:-2
then allocate each resource
out of this heap.


104
00:07:02.956 --> 00:07:09.630 line:-2 align:center
And at render time, just call useHeap
to make all these resources resident.


105
00:07:09.696 --> 00:07:13.634 line:-2 align:center
For writable resources,
the story is a bit different.


106
00:07:13.700 --> 00:07:19.039 line:-2 align:center
Consider allocating writable resources
individually and calling useResource


107
00:07:19,106 --> 00:07:21,642 line:-1
with the right usage flags.


108
00:07:21,708 --> 00:07:25,579 line:-2
In this case, Metal will handle
synchronization for you


109
00:07:25,646 --> 00:07:27,915 line:-1
and optimize for performance.


110
00:07:27.981 --> 00:07:29.950 line:-1 align:center
This will help you avoid the burden


111
00:07:30.017 --> 00:07:34.988 line:-2 align:center
to manually synchronize resources
across Metal encoders.


112
00:07:35,055 --> 00:07:36,490 line:-1
Similar to before,


113
00:07:36.557 --> 00:07:42.162 line:-2 align:center
you start by allocating the resources,
this time not backed by a heap.


114
00:07:42,229 --> 00:07:47,334 line:-2
Then, only for the encoders
that are going to access these resources,


115
00:07:47,401 --> 00:07:51,038 line:-2
call useResource
with the right usage flags.


116
00:07:51.104 --> 00:07:52.406 line:-1 align:center
In this example,


117
00:07:52.472 --> 00:07:58.979 line:-2 align:center
the encoder is writing to the texture
and reading from the buffer.


118
00:07:59,046 --> 00:08:02,549 line:-1
Here is a table with this recommendation.


119
00:08:02,616 --> 00:08:06,019 line:-1
Both, read-only and writable resources,


120
00:08:06,086 --> 00:08:09,656 line:-2
are accessed
from a top-level argument buffer.


121
00:08:09.723 --> 00:08:14.661 line:-2 align:center
In the ideal case,
set just once per encoder.


122
00:08:14.728 --> 00:08:21.368 line:-2 align:center
Read-only resources, grouped in heaps,
hazard tracking mode set to Untracked.


123
00:08:21.435 --> 00:08:24.905 line:-2 align:center
To make all resources
in the heap resident,


124
00:08:24.972 --> 00:08:28.542 line:-1 align:center
call useHeap once per encoder.


125
00:08:28,609 --> 00:08:32,312 line:-2
Writable resources,
allocated individually,


126
00:08:32,379 --> 00:08:35,582 line:-2
leave hazard tracking
and synchronization to Metal.


127
00:08:35,649 --> 00:08:41,622 line:-2
And for each resource call,
useResource once per encoder.


128
00:08:41,688 --> 00:08:43,657 line:-1
This is an efficient approach!


129
00:08:43.724 --> 00:08:47.594 line:-2 align:center
It implements a bindless model
with low CPU overhead,


130
00:08:47.661 --> 00:08:52.499 line:-2 align:center
and the Application doesn't have to worry
about hazard tracking and synchronization,


131
00:08:52,566 --> 00:08:57,804 line:-2
complicated tasks that require
serious effort, and development time.


132
00:08:57.871 --> 00:09:02.442 line:-2 align:center
For more details in bindless,
residency, and synchronization,


133
00:09:02,509 --> 00:09:07,614 line:-2
refer to the session
“Go bindless with Metal 3.”


134
00:09:07,681 --> 00:09:10,284 line:-2
Once you have resource bindings,
residency,


135
00:09:10,350 --> 00:09:13,253 line:-2
and synchronization
implemented in the code,


136
00:09:13.320 --> 00:09:15.189 line:-1 align:center
to render anything on screen,


137
00:09:15,255 --> 00:09:18,425 line:-2
the engine will have to send commands
to the renderer.


138
00:09:18.492 --> 00:09:24.064 line:-2 align:center
The Apple Processor has many features
to optimize command execution.


139
00:09:24.131 --> 00:09:28.669 line:-2 align:center
The GPU is a Tile-Based Deferred Renderer,
or TBDR,


140
00:09:28,735 --> 00:09:31,171 line:-1
with a unified memory architecture


141
00:09:31,238 --> 00:09:34,775 line:-2
where the CPU and the GPU
are sharing system memory.


142
00:09:34.842 --> 00:09:40.480 line:-2 align:center
Also, the GPU has a fast, on-chip memory
called Tile Memory.


143
00:09:40,547 --> 00:09:45,052 line:-2
To leverage this architecture,
Metal has a notion of passes,


144
00:09:45.118 --> 00:09:48.188 line:-2 align:center
and your goal is to group
rendering commands into passes


145
00:09:48,255 --> 00:09:51,558 line:-1
and properly configure those passes.


146
00:09:51,625 --> 00:09:58,098 line:-2
For a deeper dive into TBDR architecture,
please refer to the related presentations


147
00:09:58,165 --> 00:10:01,001 line:-2
“Bring your Metal app
to Apple Silicon Macs”


148
00:10:01,068 --> 00:10:05,539 line:-1
and "Harness AppleGPUs with Metal."


149
00:10:05.606 --> 00:10:11.411 line:-2 align:center
Other APIs can have a continuous stream
mixing GPU commands of different types,


150
00:10:11.478 --> 00:10:16.149 line:-1 align:center
and your engine might assume this.


151
00:10:16.216 --> 00:10:21.154 line:-2 align:center
Translating commands to Metal,
you first create a command buffer.


152
00:10:21.221 --> 00:10:26.627 line:-2 align:center
Then, depending on the type of commands,
Graphics, Compute, or Blit,


153
00:10:26.693 --> 00:10:28.795 line:-1 align:center
you group them into passes.


154
00:10:28.862 --> 00:10:32.566 line:-2 align:center
You write the commands for each pass
into the command buffer


155
00:10:32.633 --> 00:10:35.636 line:-1 align:center
using a command encoder.


156
00:10:35.702 --> 00:10:36.904 line:-1 align:center
At the end,


157
00:10:36.970 --> 00:10:41.108 line:-2 align:center
when all the commands are encoded,
submit the command buffer


158
00:10:41.175 --> 00:10:46.046 line:-2 align:center
to the command queue
for execution by the GPU.


159
00:10:46,113 --> 00:10:49,316 line:-2
Your engine can consider
four best practices


160
00:10:49.383 --> 00:10:53.086 line:-2 align:center
to efficiently translate
rendering commands to Metal.


161
00:10:53.153 --> 00:10:57.691 line:-2 align:center
Start by batching copies up front
before rendering starts,


162
00:10:57,758 --> 00:11:00,460 line:-1
group commands of the same type,


163
00:11:00,527 --> 00:11:04,498 line:-2
and avoid having empty encoders
to clear render targets.


164
00:11:04,565 --> 00:11:08,669 line:-2
And finally,
optimize your Metal Load and Store actions


165
00:11:08.735 --> 00:11:11.338 line:-1 align:center
to minimize memory bandwidth.


166
00:11:11.405 --> 00:11:16.543 line:-2 align:center
These best practices are easy to explain
by using an example.


167
00:11:16.610 --> 00:11:18.679 line:-1 align:center
Say you have the following sequence:


168
00:11:18.745 --> 00:11:25.319 line:-2 align:center
a render target clear, a draw, a copy,
a dispatch, and another draw.


169
00:11:25.385 --> 00:11:28.455 line:-2 align:center
In particular,
look at all the memory traffic


170
00:11:28.522 --> 00:11:32.593 line:-2 align:center
between system and tile memory
generated in this sequence.


171
00:11:32,659 --> 00:11:34,761 line:-1
This is not ideal!


172
00:11:34,828 --> 00:11:40,133 line:-2
The copy in the middle of the stream
copies uniform data for subsequent draws,


173
00:11:40.200 --> 00:11:42.503 line:-1 align:center
in this case, Draw 1.


174
00:11:42.569 --> 00:11:47.140 line:-2 align:center
The recommendation is, if possible,
to move and batch these copies


175
00:11:47,207 --> 00:11:53,013 line:-2
before rendering to avoid
interrupting the rendering pass.


176
00:11:53,080 --> 00:11:56,183 line:-2
After the change,
the copy is now first,


177
00:11:56.250 --> 00:12:01.522 line:-2 align:center
then the clear, draw 0,
dispatch, and draw 1.


178
00:12:01.588 --> 00:12:06.793 line:-2 align:center
If there is no dependency between
the two draw calls and the dispatch,


179
00:12:06,860 --> 00:12:08,762 line:-1
you should reorder them


180
00:12:08,829 --> 00:12:13,333 line:-2
so you can batch draws
and dispatches together.


181
00:12:13,400 --> 00:12:19,573 line:-2
In this example, after switching the order
of the draw and the dispatch calls,


182
00:12:19.640 --> 00:12:23.343 line:-2 align:center
you now have two render passes
after each other.


183
00:12:23,410 --> 00:12:28,415 line:-2
This scenario is perfect for merging them
into a single render pass


184
00:12:28,482 --> 00:12:31,351 line:-1
if they share the same render targets,


185
00:12:31.418 --> 00:12:35.789 line:-1 align:center
saving significant memory bandwidth.


186
00:12:35.856 --> 00:12:40.394 line:-2 align:center
That way, you remove
some unnecessary memory traffic,


187
00:12:40.460 --> 00:12:44.498 line:-2 align:center
as data doesn't need to go
from tile memory to system memory


188
00:12:44,565 --> 00:12:48,502 line:-1
and back between the two draws.


189
00:12:48,569 --> 00:12:52,806 line:-2
This is already better,
but could be optimized further.


190
00:12:52,873 --> 00:12:57,077 line:-2
The clear is an empty encoder,
with only one purpose:


191
00:12:57,144 --> 00:13:01,048 line:-2
to clear the render targets
used by the next draws.


192
00:13:01,114 --> 00:13:04,852 line:-2
In Metal, there is a very efficient way
to do this.


193
00:13:04.918 --> 00:13:07.254 line:-1 align:center
Just use LoadActionClear


194
00:13:07,321 --> 00:13:12,826 line:-2
for the first render pass
that uses the render targets.


195
00:13:12.893 --> 00:13:17.431 line:-2 align:center
This is much better,
but there is one more recommendation


196
00:13:17,497 --> 00:13:21,068 line:-1
You can optimize load and store actions.


197
00:13:21.134 --> 00:13:23.904 line:-2 align:center
You only have to store
in the system memory


198
00:13:23.971 --> 00:13:29.276 line:-2 align:center
the content of the render targets
that will be used in the next passes.


199
00:13:29,343 --> 00:13:33,013 line:-1
From this example, assume after draw 1,


200
00:13:33.080 --> 00:13:36.817 line:-1 align:center
only the first render target will be used.


201
00:13:36,884 --> 00:13:39,786 line:-1
All other render targets are intermediate


202
00:13:39.853 --> 00:13:43.757 line:-2 align:center
and the content doesn’t need
to be preserved.


203
00:13:43.824 --> 00:13:49.429 line:-2 align:center
Metal allows control of the store action
for each render target.


204
00:13:49,496 --> 00:13:50,631 line:-1
In this case,


205
00:13:50.697 --> 00:13:54.801 line:-2 align:center
you can use StoreActionStore
for the first render target


206
00:13:54.868 --> 00:13:58.438 line:-2 align:center
and StoreActionDontCare
for the other ones.


207
00:13:58,505 --> 00:14:02,309 line:-2
And that's it!
This is the initial commands sequence.


208
00:14:02,376 --> 00:14:08,248 line:-2
There are five round trips between
tile memory and system memory.


209
00:14:08,315 --> 00:14:10,584 line:-2
And this is how
the commands sequence looks


210
00:14:10,651 --> 00:14:13,053 line:-1
after a few easy optimizations.


211
00:14:13.120 --> 00:14:17.391 line:-2 align:center
Only one final flush from tile memory
to system memory.


212
00:14:17.457 --> 00:14:21.261 line:-1 align:center
The memory bandwidth is greatly reduced!


213
00:14:21,328 --> 00:14:25,632 line:-2
And that has been achieved
by moving copies before rendering,


214
00:14:25.699 --> 00:14:28.569 line:-1 align:center
grouping commands of the same type,


215
00:14:28,635 --> 00:14:32,339 line:-2
avoid clearing render targets
with empty encoders,


216
00:14:32,406 --> 00:14:36,143 line:-1
and optimizing load and store actions.


217
00:14:36.210 --> 00:14:39.913 line:-2 align:center
The GPU tools
can help you identify these issues.


218
00:14:39.980 --> 00:14:45.419 line:-2 align:center
Metal Debugger in Xcode automatically
finds optimization opportunities,


219
00:14:45.485 --> 00:14:48.822 line:-2 align:center
so you can get the best performance
in your game.


220
00:14:48.889 --> 00:14:54.728 line:-2 align:center
It allows you to inspect and understand
the dependencies of your Metal passes,


221
00:14:54,795 --> 00:15:00,467 line:-2
and comes with a full-featured suite
of debugging and profiling tools.


222
00:15:00.534 --> 00:15:06.106 line:-2 align:center
It's easy to use Metal Debugger to
identify the issues that were mentioned.


223
00:15:06,173 --> 00:15:12,980 line:-2
When I capture a Metal workload,
Metal Debugger shows the Summary viewer.


224
00:15:13,046 --> 00:15:17,818 line:-2
The Insights section at the bottom
shows me optimization opportunities


225
00:15:17.885 --> 00:15:20.187 line:-1 align:center
that come grouped into four categories:


226
00:15:20.254 --> 00:15:27.261 line:-2 align:center
Memory, Bandwidth, Performance,
and API Usage.


227
00:15:27,327 --> 00:15:33,033 line:-2
There are two bandwidth insights
I’d like to highlight in this workload.


228
00:15:33.100 --> 00:15:36.503 line:-1 align:center
The first one is for unused resources.


229
00:15:36,570 --> 00:15:40,807 line:-2
When I select an Insight,
I can find a summary


230
00:15:40,874 --> 00:15:45,012 line:-2
and some actionable advice to address it
in the right panel.


231
00:15:45.078 --> 00:15:50.951 line:-2 align:center
The GBuffer pass is storing
more attachments than it needs to.


232
00:15:51,018 --> 00:15:56,690 line:-2
In this case, the GBuffer pass loads
the albedo/alpha texture


233
00:15:56,757 --> 00:15:58,659 line:-1
and stores it.


234
00:15:58,725 --> 00:16:04,131 line:-2
However, since the albedo texture
isn’t used later in this frame,


235
00:16:04.198 --> 00:16:11.104 line:-2 align:center
the store is redundant, so we can fix this
by setting the store action to DontCare.


236
00:16:11,171 --> 00:16:14,241 line:-1
Let’s check the next Insight.


237
00:16:14,308 --> 00:16:18,078 line:-2
Combining render passes can help
with reducing bandwidth,


238
00:16:18,145 --> 00:16:22,883 line:-2
and here, the insight suggests
that I can combine GBuffer


239
00:16:22.950 --> 00:16:27.421 line:-1 align:center
and Forward passes into a single pass.


240
00:16:27,487 --> 00:16:32,226 line:-2
I can also learn more about
what these passes are reading and writing


241
00:16:32,292 --> 00:16:35,729 line:-2
by clicking the Reveal in Dependencies
button on the right


242
00:16:35.796 --> 00:16:40.734 line:-2 align:center
to find this render pass
in the Dependencies viewer.


243
00:16:40.801 --> 00:16:45.772 line:-2 align:center
The Dependencies viewer is a great tool
to inspect dependencies between passes!


244
00:16:45.839 --> 00:16:50.644 line:-2 align:center
Here, I can see at a glance
the load and store actions,


245
00:16:50,711 --> 00:16:54,081 line:-2
shown above and below
the render attachments.


246
00:16:54,147 --> 00:16:57,918 line:-2
All the attachments in this pass
have store action store,


247
00:16:57.985 --> 00:17:03.023 line:-2 align:center
but only the color 0 and the depth
attachment are used in the future pass.


248
00:17:03.090 --> 00:17:07.694 line:-1 align:center
The previous insight revealed this.


249
00:17:07.761 --> 00:17:10.898 line:-2 align:center
Zoom out a little,
and the data edges are shown


250
00:17:10,964 --> 00:17:16,336 line:-2
flowing from the GBuffer pass
to the Forward pass.


251
00:17:16,403 --> 00:17:18,438 line:-1
As the insight indicated,


252
00:17:18,505 --> 00:17:23,210 line:-2
the GBuffer and Forward passes
can be merged to save bandwidth,


253
00:17:23,277 --> 00:17:27,481 line:-2
as they’re storing and loading
from the same attachments.


254
00:17:27,548 --> 00:17:33,520 line:-2
Merging these two passes will
save bandwidth and improve performance.


255
00:17:33,587 --> 00:17:37,457 line:-2
That was just one example of
how you can use Metal Debugger


256
00:17:37.524 --> 00:17:41.061 line:-2 align:center
to find optimization opportunities
in your game.


257
00:17:41.128 --> 00:17:46.033 line:-2 align:center
To learn more about Metal Debugger,
please check out the related sessions


258
00:17:46.099 --> 00:17:49.703 line:-2 align:center
“Gain insights into your Metal app
with Xcode 12”


259
00:17:49.770 --> 00:17:55.909 line:-2 align:center
and "Discover Metal debugging, profiling,
and asset creation tools."


260
00:17:55,976 --> 00:17:59,346 line:-2
Indirect rendering
is an important functionality


261
00:17:59,413 --> 00:18:03,517 line:-2
that high-end games use to
implement advanced rendering techniques.


262
00:18:03.584 --> 00:18:07.588 line:-2 align:center
This topic will review
how ExecuteIndirect works


263
00:18:07,654 --> 00:18:10,691 line:-2
and how to translate
this particular command to Metal.


264
00:18:10.757 --> 00:18:12.860 line:-1 align:center
With indirect rendering,


265
00:18:12.926 --> 00:18:15.929 line:-2 align:center
instead of encoding
multiple draw commands,


266
00:18:15,996 --> 00:18:19,967 line:-2
their arguments are stored
in a regular buffer in memory


267
00:18:20.033 --> 00:18:24.872 line:-2 align:center
and only one ExecuteIndirect command
is encoded referencing the buffer


268
00:18:24,938 --> 00:18:28,809 line:-2
and specifying how many draw calls
the GPU has to execute


269
00:18:28,876 --> 00:18:33,480 line:-2
by fetching arguments for each one of them
from the buffer.


270
00:18:33.547 --> 00:18:37.251 line:-2 align:center
The main idea of this approach is
to be able to populate content


271
00:18:37.317 --> 00:18:40.554 line:-2 align:center
of the indirect buffer
by a compute shader


272
00:18:40,621 --> 00:18:47,361 line:-2
scheduled for execution before
the ExecuteIndirect command.


273
00:18:47.427 --> 00:18:48.495 line:-1 align:center
This way,


274
00:18:48.562 --> 00:18:53.467 line:-2 align:center
the GPU prepares work for itself
and decides what to render.


275
00:18:53.534 --> 00:18:57.137 line:-2 align:center
Execution of commands
with indirect arguments is


276
00:18:57,204 --> 00:19:00,574 line:-2
a key feature
to implement advanced techniques


277
00:19:00,641 --> 00:19:03,844 line:-1
such as a GPU-driven rendering loop.


278
00:19:03,911 --> 00:19:07,781 line:-2
There are two ways
to translate this command to Metal,


279
00:19:07.848 --> 00:19:14.221 line:-2 align:center
by using Draw Indirect and
Metal Indirect Command Buffers, or ICBs.


280
00:19:14,288 --> 00:19:18,725 line:-2
In Metal, the renderer has
to translate each ExecuteIndirect


281
00:19:18,792 --> 00:19:23,230 line:-2
to a series
of API calls to DrawIndirect.


282
00:19:23.297 --> 00:19:25.933 line:-1 align:center
Each one references the buffer


283
00:19:25,999 --> 00:19:30,270 line:-2
and provides an offset
for the draw arguments.


284
00:19:30.337 --> 00:19:32.172 line:-1 align:center
Here is the code.


285
00:19:32,239 --> 00:19:37,911 line:-2
Look through the maximum number of draw
calls this ExecuteIndirect might have.


286
00:19:37,978 --> 00:19:40,981 line:-1
For each one, encode a separate draw


287
00:19:41.048 --> 00:19:46.553 line:-2 align:center
specifying the indirect arguments buffer
and offset in that buffer.


288
00:19:46,620 --> 00:19:48,355 line:-1
At the end of iteration,


289
00:19:48.422 --> 00:19:53.861 line:-2 align:center
move the offset to point
to the next set of indirect arguments.


290
00:19:53.927 --> 00:19:59.199 line:-2 align:center
This approach is very easy to implement
and will work in almost all situations.


291
00:19:59.266 --> 00:20:02.803 line:-2 align:center
However, if you have scenes
with thousands of draw calls


292
00:20:02.870 --> 00:20:07.007 line:-2 align:center
and performance in your game
is limited by the CPU encoding time,


293
00:20:07.074 --> 00:20:11.111 line:-2 align:center
you should consider
Indirect Command Buffers in Metal.


294
00:20:11.178 --> 00:20:17.251 line:-2 align:center
ICBs are a superset of buffers
with indirect draw arguments.


295
00:20:17,317 --> 00:20:21,788 line:0
In addition to draw arguments,
you can also set buffer bindings


296
00:20:21,855 --> 00:20:26,927 align:center
and render Pipeline State Objects
from the GPU.


297
00:20:26,994 --> 00:20:31,632 align:center
To schedule commands from an ICB
for execution on the GPU,


298
00:20:31,698 --> 00:20:37,204 align:center
you have to encode
executeCommandsInBuffer command.


299
00:20:37,271 --> 00:20:40,274 line:-1
Usually with ExecuteIndirect,


300
00:20:40,340 --> 00:20:44,645 line:-2
all draw calls
share the same Pipeline State Object.


301
00:20:44.711 --> 00:20:47.481 line:-1 align:center
And each time the PSO changes,


302
00:20:47,548 --> 00:20:52,152 line:-2
you have to encode
a new ExecuteIndirect command.


303
00:20:52.219 --> 00:20:58.192 line:-2 align:center
If you are using ICBs, it is not required
to split the indirect execution commands


304
00:20:58.258 --> 00:21:00.827 line:-1 align:center
by state changes that often.


305
00:21:00.894 --> 00:21:06.567 line:-2 align:center
All PSOs and buffer bindings
could be set from the ICB,


306
00:21:06,633 --> 00:21:09,102 line:-1
so you don’t have to encode them.


307
00:21:09,169 --> 00:21:11,505 line:-1
Depending on the structure of the scene,


308
00:21:11.572 --> 00:21:15.375 line:-2 align:center
this might significantly
reduce the encoding time.


309
00:21:15.442 --> 00:21:19.680 line:-2 align:center
To leverage ICBs, it’s not necessary
to modify existing shaders


310
00:21:19.746 --> 00:21:23.951 line:-1 align:center
that populate indirect arguments.


311
00:21:24.017 --> 00:21:27.354 line:-2 align:center
You can share the same shaders
with other platforms


312
00:21:27.421 --> 00:21:31.058 line:-2 align:center
and compile them
with the Metal Shader Converter


313
00:21:31,124 --> 00:21:36,563 line:-2
then translate draw arguments to ICBs
by adding a small compute kernel


314
00:21:36.630 --> 00:21:42.369 line:-2 align:center
after indirect argument generation
and before the indirect rendering pass.


315
00:21:42.436 --> 00:21:48.408 line:-2 align:center
To encode the ICB in your compute kernel,
write it in the Metal Shading Language.


316
00:21:48,475 --> 00:21:50,277 line:-1
As input to the shader,


317
00:21:50.344 --> 00:21:55.315 line:-2 align:center
there is a pointer to the indirect
arguments you want to translate.


318
00:21:55.382 --> 00:21:59.086 line:-1 align:center
Next, check if the arguments are valid,


319
00:21:59,152 --> 00:22:02,723 line:-2
and only then
will you encode the command.


320
00:22:02,789 --> 00:22:07,594 line:-2
In the encodeCommand function,
set the render pipeline state,


321
00:22:07,661 --> 00:22:11,231 line:-1
buffer bindings, and the draw call.


322
00:22:11.298 --> 00:22:15.035 line:-2 align:center
This translates the draw arguments
to a render command


323
00:22:15,102 --> 00:22:18,305 line:-1
in the indirect command buffer.


324
00:22:18.372 --> 00:22:22.376 line:-2 align:center
And that’s how to translate
Indirect rendering to Metal.


325
00:22:22.442 --> 00:22:25.679 line:-2 align:center
You can use a series
of draw indirect commands


326
00:22:25.746 --> 00:22:28.782 line:-1 align:center
or Metal Indirect command buffers.


327
00:22:28.849 --> 00:22:32.386 line:-2 align:center
If you want to learn how
to use indirect rendering


328
00:22:32,452 --> 00:22:35,389 line:-2
to implement
advanced rendering techniques,


329
00:22:35,455 --> 00:22:39,393 line:-2
check out the “Modern Rendering
with Metal” Sample Code.


330
00:22:39,459 --> 00:22:45,299 line:-2
Once your game is producing correct images
by binding resources to its pipelines


331
00:22:45,365 --> 00:22:48,836 line:-2
and properly encoding commands
into command buffers,


332
00:22:48,902 --> 00:22:54,341 line:-2
you can leverage upscaling to get more
performance out of your players' devices.


333
00:22:54,408 --> 00:22:59,146 line:-2
Upscaling via MetalFX
helps games save time for each frame


334
00:22:59,213 --> 00:23:01,949 line:-1
by reducing the amount of GPU work.


335
00:23:02.015 --> 00:23:06.920 line:-2 align:center
MetalFX is a turnkey solution
to implement your upscaling pipeline.


336
00:23:06.987 --> 00:23:12.059 line:-2 align:center
It works by scaling
a lower resolution image


337
00:23:12,125 --> 00:23:17,197 line:-2
up to the target output resolution
in less time than it takes


338
00:23:17.264 --> 00:23:22.469 line:-2 align:center
to render at the output resolution
directly.


339
00:23:22.536 --> 00:23:26.540 line:-2 align:center
MetalFX was introduced
last year for the Mac,


340
00:23:26,607 --> 00:23:30,344 line:-1
and it offers high performance upscaling!


341
00:23:30,410 --> 00:23:34,681 line:-1
MetalFX supports two upscaling algorithms,


342
00:23:34,748 --> 00:23:37,618 line:-1
"Spatial" for the best performance


343
00:23:37,684 --> 00:23:41,154 line:-2
and "Temporal" for quality
approaching native rendering


344
00:23:41.221 --> 00:23:44.758 line:-1 align:center
on the output resolution.


345
00:23:44.825 --> 00:23:50.130 line:-2 align:center
Integrating MetalFX in the engine
will improve the player's experience


346
00:23:50,197 --> 00:23:55,202 line:-2
by rendering in higher resolutions
with better performance.


347
00:23:55.269 --> 00:23:59.573 line:-2 align:center
New features this year include
support for iOS,


348
00:23:59.640 --> 00:24:04.344 line:-2 align:center
up to 3X upscaling,
and support in Metal-cpp.


349
00:24:07,447 --> 00:24:11,652 line:-2
If your engine already supports
an existing upscaling solution


350
00:24:11.718 --> 00:24:17.891 line:-2 align:center
on other platforms, MetalFX integration
won’t require much coding


351
00:24:17.958 --> 00:24:21.862 line:-1 align:center
and modification on the engine side.


352
00:24:21.929 --> 00:24:27.167 line:-2 align:center
To support MetalFX,
you need upscaling support in the engine.


353
00:24:27.234 --> 00:24:32.005 line:-2 align:center
Another requirement is the renderer
to manually control the level of detail


354
00:24:32.072 --> 00:24:37.144 line:-1 align:center
for texture sampling in materials shaders.


355
00:24:37.211 --> 00:24:42.783 line:-2 align:center
Temporal upscaling requires
jitter sequence and motion vectors.


356
00:24:42.850 --> 00:24:44.751 line:-1 align:center
You probably already have those


357
00:24:44,818 --> 00:24:48,822 line:-2
if your engine supports
temporal anti-aliasing.


358
00:24:48.889 --> 00:24:54.761 line:-2 align:center
MetalFX’s temporal upscaling can take
rendering’s exposure into account,


359
00:24:54.828 --> 00:24:56.663 line:-1 align:center
and you have two options.


360
00:24:56.730 --> 00:25:02.569 line:-2 align:center
If your renderer supports a 1 by 1
exposure texture, then use that.


361
00:25:02.636 --> 00:25:06.507 line:-2 align:center
Otherwise, you can enable
the autoexposure feature


362
00:25:06,573 --> 00:25:09,476 line:-1
and see if it improves the quality.


363
00:25:09.543 --> 00:25:12.846 line:-2 align:center
Don’t forget to reset the history
on camera cuts


364
00:25:12.913 --> 00:25:17.117 line:-1 align:center
and extreme camera movements.


365
00:25:17,184 --> 00:25:22,122 line:-2
For more details on how to integrate
MetalFX in your applications,


366
00:25:22,189 --> 00:25:24,224 line:-1
refer to the Documentation


367
00:25:24.291 --> 00:25:29.329 line:-2 align:center
and “Boost performance
with MetalFX upscaling” from last year.


368
00:25:29.396 --> 00:25:32.799 line:-1 align:center
Metal gives some powerful options


369
00:25:32,866 --> 00:25:36,370 line:-2
to make the most
of your app's rendering time.


370
00:25:36,436 --> 00:25:41,175 line:-2
You can manage resources
and bind them as efficiently as possible.


371
00:25:41.241 --> 00:25:43.944 line:-1 align:center
Based on how your shaders access them,


372
00:25:44.011 --> 00:25:48.549 line:-2 align:center
ensure the passes that share resources
run in the right order,


373
00:25:48.615 --> 00:25:53.554 line:-2 align:center
and make resources resident
and available for the GPU.


374
00:25:53,620 --> 00:25:59,226 line:-2
Your app can leverage the full potential
of Apple’s powerful graphics architecture


375
00:25:59,293 --> 00:26:03,263 line:-2
by locating and applying
optimization opportunities


376
00:26:03,330 --> 00:26:09,736 line:-2
with Metal Debugger in Xcode
and optimizing your command submission.


377
00:26:09.803 --> 00:26:15.742 line:-2 align:center
Let the GPU decide for itself what work
to do by implementing indirect rendering,


378
00:26:15.809 --> 00:26:20.180 line:-2 align:center
which can be the key for many
modern rendering techniques.


379
00:26:20.247 --> 00:26:24.685 line:-2 align:center
Up your rendering game
by upscaling your renderings with MetalFX,


380
00:26:24,751 --> 00:26:28,755 line:-2
which can save your app valuable time
in the render loop.


381
00:26:28.822 --> 00:26:31.658 line:-1 align:center
For more rendering tips and guidelines,


382
00:26:31.725 --> 00:26:35.629 line:-2 align:center
check out "Optimize Metal Performance
for Apple silicon Macs."


383
00:26:35.696 --> 00:26:38.165 line:-1 align:center
Thank you for watching!


384
00:26:38.232 --> 00:26:40.234 line:-1 align:center
♪ ♪

