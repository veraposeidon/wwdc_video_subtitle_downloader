2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.544 --> 00:00:12.279 line:-1
Bhavya: Hi, my name is Bhavya,


4
00:00:12.312 --> 00:00:14.982 line:-2
and I'm an engineer
on the Accessibility team.


5
00:00:15.015 --> 00:00:17.217 line:-1
In today's session, we're going to focus


6
00:00:17.251 --> 00:00:20.454 line:-2
on how to perform accessibility audits
in your app.


7
00:00:20.487 --> 00:00:25.993 line:-2
First, we'll cover how easy it is
to perform automated accessibility audits


8
00:00:26.026 --> 00:00:28.262 line:-1
in your UI tests.


9
00:00:28.295 --> 00:00:31.532 line:-2
And then we'll discuss
how to expose elements


10
00:00:31.565 --> 00:00:34.801 line:-2
in a way that gives us
a great testing experience


11
00:00:34.835 --> 00:00:39.573 line:-2
and a great accessibility experience
at the same time.


12
00:00:39.606 --> 00:00:43.010 line:-1
Let's start with accessibility audits.


13
00:00:43.043 --> 00:00:47.147 line:-2
Testing is a fundamental component
in the app development process.


14
00:00:47.181 --> 00:00:53.187 line:-2
By writing tests, we're able to catch
and fix bugs before we ship code.


15
00:00:53.220 --> 00:00:56.757 line:-2
It's how we ensure
the quality of the product.


16
00:00:56.790 --> 00:01:01.094 line:-2
And an accessible product
is a high-quality product.


17
00:01:01.128 --> 00:01:05.165 line:-2
Approximately one in seven people
worldwide have a disability


18
00:01:05.199 --> 00:01:09.937 line:-2
that affects the way they interact
with the world and their devices.


19
00:01:09.970 --> 00:01:12.105 line:-1
People use tools like VoiceOver


20
00:01:12.139 --> 00:01:16.009 line:-2
to interact with your apps
in the way that's best for them.


21
00:01:16.043 --> 00:01:18.879 line:-1
Delivering a high-quality product means


22
00:01:18.912 --> 00:01:22.316 line:-2
delivering an application
that's accessible for everyone


23
00:01:22.349 --> 00:01:26.086 line:-2
so they can have the highest-quality
experience with your app.


24
00:01:26.119 --> 00:01:30.157 line:-2
I know from personal experience
how accessibility can be


25
00:01:30.190 --> 00:01:32.993 line:-1
a deep and complex subject.


26
00:01:33.026 --> 00:01:37.464 line:-2
Let's explore how accessibility audits
can make this a simple task.


27
00:01:38.365 --> 00:01:42.936 line:-2
Xcode ships with a tool
called the Accessibility Inspector.


28
00:01:42.970 --> 00:01:47.374 line:-2
This tool provides
an easy way to find, diagnose,


29
00:01:47.407 --> 00:01:50.978 line:-2
and fix accessibility issues
within your app.


30
00:01:51.011 --> 00:01:54.414 line:-2
One of the powerful ways
in which I can leverage this tool


31
00:01:54.448 --> 00:01:57.317 line:-1
is by performing audits on my app.


32
00:01:57.351 --> 00:02:00.787 line:-2
The Inspector can audit
individual views in your app


33
00:02:00.821 --> 00:02:03.624 line:-1
for common accessibility issues.


34
00:02:04.625 --> 00:02:08.061 line:-1
This is my sample app. It has two tabs.


35
00:02:08.095 --> 00:02:11.565 line:-2
The first tab provides me
with motivational quotes,


36
00:02:11.598 --> 00:02:16.436 line:-2
and the second lets me write down
my thoughts for self-reflection.


37
00:02:16.470 --> 00:02:22.476 line:-2
In the quote tab, I have a text view
which displays the quote.


38
00:02:22.509 --> 00:02:26.513 line:-2
And this text view is placed
on top of a background image.


39
00:02:26,547 --> 00:02:31,585
There's also a New Quote button
which refreshes the quote.


40
00:02:31.618 --> 00:02:36.957 line:-2
I can launch the Accessibility Inspector
and perform an audit of my app.


41
00:02:36.990 --> 00:02:40.027 line:-2
The Inspector checks
for all kinds of issues,


42
00:02:40.060 --> 00:02:42.930 line:-2
like providing
sufficient element descriptions


43
00:02:42.963 --> 00:02:45.666 line:-1
and ensuring proper contrast.


44
00:02:45.699 --> 00:02:48.635 line:-2
And the issues it finds are
displayed in a table


45
00:02:48.669 --> 00:02:52.272 line:-2
with detailed descriptions
about each issue.


46
00:02:52.306 --> 00:02:57.311 line:-2
Accessibility audits are powerful,
and now they are automatable.


47
00:02:57.344 --> 00:03:01.348 line:-2
You are now able to perform audits
in your UI tests.


48
00:03:01.381 --> 00:03:06.353 line:-2
Calling performAccessibilityAudit
on your XCUIApplication


49
00:03:06.386 --> 00:03:09.556 line:-2
will audit the current view
for accessibility issues


50
00:03:09.590 --> 00:03:11.892 line:-1
just as the Inspector does.


51
00:03:11.925 --> 00:03:15.429 line:-2
There's no need for assertions:
if any issues are found,


52
00:03:15.462 --> 00:03:17.965 line:-1
your test automatically fails.


53
00:03:17.998 --> 00:03:21.268 line:-2
Let's dive into a quick demo
to see this in action.


54
00:03:22.669 --> 00:03:25.439 line:-1
I've opened my demo app in Xcode.


55
00:03:25.472 --> 00:03:30.477 line:-2
It's written in Swift
and utilizes standard UIKit views.


56
00:03:30.511 --> 00:03:33.013 line:-1
I've already written a few passing tests


57
00:03:33.046 --> 00:03:37.084 line:-2
which verify that the elements
on the screen exist.


58
00:03:37.117 --> 00:03:41.622 line:-1
For example, testQuoteTabView verifies


59
00:03:41.655 --> 00:03:46.994 line:-2
that the image view and the text view
exist in the quote tab.


60
00:03:47.027 --> 00:03:52.766 line:-2
One thing to note is that these tests
also help us test accessibility.


61
00:03:52.799 --> 00:03:58.238 line:-2
In order for XCTest to find these views,
they must be accessibility elements.


62
00:03:58.272 --> 00:04:01.942 line:-2
That means if your UI tests
can find the elements,


63
00:04:01.975 --> 00:04:04.711 line:-1
so can our assistive technologies.


64
00:04:04.745 --> 00:04:08.315 line:-2
It's great that I get a little bit
of accessibility testing this way,


65
00:04:08.348 --> 00:04:11.451 line:-1
but I want to add some audits to my tests


66
00:04:11.485 --> 00:04:14.421 line:-2
to make sure I'm catching
all kinds of issues.


67
00:04:14,454 --> 00:04:20,627
I'll create another test called
testAccessibilityQuoteTabView.


68
00:04:20,661 --> 00:04:25,232
I'll do some setup to launch my app
and navigate to the Quote tab.


69
00:04:29,136 --> 00:04:32,906
And finally, I'll call
performAccessibilityAudit


70
00:04:32,940 --> 00:04:34,608
on the application.


71
00:04:38,445 --> 00:04:42,783
The audit can report multiple issues,
so to allow my test


72
00:04:42,816 --> 00:04:46,019
to continue reporting issues
after the first failure,


73
00:04:46,053 --> 00:04:49,556
I'll set continueAfterFailure to true.


74
00:04:53,927 --> 00:04:55,128
That's it.


75
00:04:55,162 --> 00:04:57,998
Let's run the test
by clicking on the test diamond.


76
00:05:02,269 --> 00:05:04,304
Seems like my test failed.


77
00:05:04,338 --> 00:05:08,842
The issues are reported in-line
within the Xcode source editor.


78
00:05:08,876 --> 00:05:12,513
My audit caught two issues:


79
00:05:12,546 --> 00:05:14,648
Element has no description,


80
00:05:14,681 --> 00:05:17,417
and the label is not human-readable.


81
00:05:17,451 --> 00:05:20,988
Let's figure out
what the problematic elements are.


82
00:05:21.021 --> 00:05:23.690 line:-1
I can dig deeper into these two issues


83
00:05:23.724 --> 00:05:28.929 line:-1
by going to the Report navigator,


84
00:05:28.962 --> 00:05:33.066 line:-1
clicking on Tests,


85
00:05:33.100 --> 00:05:38.038 line:-2
and then clicking on the disclosure
triangle next to my test.


86
00:05:38.071 --> 00:05:43.076 line:-2
This view shows a detailed breakdown
of the test run and the issues.


87
00:05:43.110 --> 00:05:46.346 line:-2
For the first issue,
"element has no description,"


88
00:05:46.380 --> 00:05:49.283 line:-1
I can double-click the element screenshot


89
00:05:49.316 --> 00:05:53.086 line:-2
which shows me that the image view
has no description.


90
00:05:53.120 --> 00:05:57.457 line:-2
I can do so similarly
for the second issue,


91
00:05:57.491 --> 00:06:02.863 line:-2
which shows me that the label
on the text view is not human-readable.


92
00:06:02.896 --> 00:06:07.668 line:-2
Let's take a moment to discuss how
to handle the issues my audit just found.


93
00:06:07.701 --> 00:06:11.405 line:-2
It's important to explore
each issue individually and fix it,


94
00:06:11.438 --> 00:06:15.542 line:-2
as they will lead to real interaction
or navigation issues


95
00:06:15.576 --> 00:06:19.713 line:-2
for users of your app
who rely on assistive technologies.


96
00:06:19.746 --> 00:06:23.217 line:-2
It's also important to acknowledge
that you may run into issues


97
00:06:23.250 --> 00:06:25.686 line:-1
which should be filtered out and ignored.


98
00:06:25.719 --> 00:06:30.090 line:-2
Perhaps the issue is a false positive
or expected behavior.


99
00:06:30.123 --> 00:06:35.062 line:-2
Accessibility audits makes it easy
to ignore these kinds of issues.


100
00:06:35.095 --> 00:06:39.266 line:-2
We'll touch on an example
for ignoring issues later in the talk.


101
00:06:39,299 --> 00:06:42,436
To learn more about best practices
in accessibility,


102
00:06:42,469 --> 00:06:45,239
please check out our 2018 talk titled


103
00:06:45,272 --> 00:06:48,709
"Deliver an Exceptional
Accessibility Experience."


104
00:06:48.742 --> 00:06:52.045 line:-2
Let's investigate the first issue
my audit found:


105
00:06:52.079 --> 00:06:56.884 line:-2
the accessibility label on the text view
is not human-readable.


106
00:06:56.917 --> 00:06:59.820 line:-2
If I inspect the text view
in the Storyboard,


107
00:06:59.853 --> 00:07:02.623 line:-2
I can see that the accessibility label
has been set


108
00:07:02.656 --> 00:07:06.260 line:-1
to QUOTE_TEXTVIEW.


109
00:07:06.293 --> 00:07:09.663 line:-2
Users who rely on assistive technologies
like VoiceOver


110
00:07:09.696 --> 00:07:12.399 line:-1
will first hear the accessibility label,


111
00:07:12.432 --> 00:07:16.170 line:-2
and then the accessibility value,
like this.


112
00:07:16.203 --> 00:07:17.871 line:-1
VoiceOver: QUOTE_TEXTVIEW,


113
00:07:17.905 --> 00:07:20.874 line:-2
"Live one day at a time
and make it a masterpiece."


114
00:07:20.908 --> 00:07:23.810 line:-2
Bhavya: The label doesn't sound great,
and ideally,


115
00:07:23.844 --> 00:07:28.182 line:-2
VoiceOver should skip it
and speak just the quote itself.


116
00:07:28.215 --> 00:07:32.853 line:-2
I can delete the accessibility label,
but then my UI tests will break,


117
00:07:32.886 --> 00:07:36.857 line:-2
because they depend on this label
to identify the text view.


118
00:07:36.890 --> 00:07:41.728 line:-2
Ideally, this string should be set
as the accessibility identifier.


119
00:07:41.762 --> 00:07:46.834 line:-2
The accessibility identifier allows you
to uniquely identify an element


120
00:07:46.867 --> 00:07:52.406 line:-2
when writing UI tests without affecting
the accessibility or UI experience.


121
00:07:52.439 --> 00:07:55.209 line:-1
I'll head over to my Storyboard.


122
00:07:57.811 --> 00:08:02.449 line:-1
I'll select my text view,


123
00:08:02.482 --> 00:08:07.821 line:-1
cut this string from the label,


124
00:08:07.855 --> 00:08:10.023 line:-1
and paste it into the identifier.


125
00:08:13.227 --> 00:08:18.098 line:-2
The other issue my audit found was
that the image view has no description.


126
00:08:18.131 --> 00:08:21.535 line:-2
Typically, it's important
that images are accessible


127
00:08:21.568 --> 00:08:24.638 line:-1
with descriptive but succinct labels.


128
00:08:24.671 --> 00:08:29.576 line:-2
However, in my app, this is
a background image which is decorative.


129
00:08:29.610 --> 00:08:31.912 line:-1
It isn't a part of the main content


130
00:08:31.945 --> 00:08:35.415 line:-2
and doesn't add additional meaning
to the quote itself.


131
00:08:35.449 --> 00:08:40.454 line:-2
Ideally, technologies like VoiceOver
should skip this image view.


132
00:08:40.487 --> 00:08:44.658 line:-2
I can achieve this behavior
by overriding accessibility elements


133
00:08:44.691 --> 00:08:46.994 line:-1
on the view controller's view.


134
00:08:47.027 --> 00:08:51.798 line:-2
By setting it to just the quote text view
and the New Quote button,


135
00:08:51.832 --> 00:08:55.602 line:-2
VoiceOver will no longer land
on the image view.


136
00:08:55.636 --> 00:08:58.906 line:-1
Let's head over to Xcode and do that now.


137
00:08:58.939 --> 00:09:04.211 line:-2
I'll go to my view controller file
and set accessibilityElements.


138
00:09:10.851 --> 00:09:11.919 line:-1
Awesome.


139
00:09:11.952 --> 00:09:16.056 line:-1
Let's go back to my audit


140
00:09:16.089 --> 00:09:19.259 line:-2
and run my test case
to see if I fixed all the issues.


141
00:09:25.299 --> 00:09:28.368 line:-1
Sweet. My audit is now passing.


142
00:09:28.402 --> 00:09:31.538 line:-2
You'll notice
one of my UI tests is now failing,


143
00:09:31.572 --> 00:09:33.373 line:-1
but we'll come back to that later.


144
00:09:34.274 --> 00:09:36.476 line:-1
When adding accessibility audits,


145
00:09:36.510 --> 00:09:40.013 line:-2
you may run into issues
which need to be filtered.


146
00:09:40.047 --> 00:09:43.350 line:-2
As an example,
let's say my audit found an issue


147
00:09:43.383 --> 00:09:47.287 line:-2
with the contrast being too low
on a specific label.


148
00:09:47.321 --> 00:09:51.191 line:-2
After investigating,
the contrast turns out to be just fine,


149
00:09:51.225 --> 00:09:54.127 line:-2
and the issue seems to be
a false positive.


150
00:09:54.161 --> 00:09:57.397 line:-1
Let's explore how I can ignore this issue.


151
00:09:57.431 --> 00:10:02.769 line:-2
The performAccessibilityAudit function
takes in additional parameters.


152
00:10:02.803 --> 00:10:06.507 line:-2
The first parameter allows me
to specify an option set


153
00:10:06.540 --> 00:10:09.877 line:-2
of the categories of audits
that I want to run.


154
00:10:09.910 --> 00:10:13.780 line:-2
These are categories
like dynamic type and contrast,


155
00:10:13.814 --> 00:10:16.316 line:-2
the same categories
that you're already familiar with


156
00:10:16.350 --> 00:10:19.319 line:-1
in the Accessibility Inspector.


157
00:10:19.353 --> 00:10:21.522 line:-1
In this example, I'm choosing to audit


158
00:10:21.555 --> 00:10:25.492 line:-1
for only dynamic type and contrast issues.


159
00:10:25.526 --> 00:10:29.563 line:-2
The second parameter allows me
to specify a closure.


160
00:10:29.596 --> 00:10:33.467 line:-2
This closure is called
on all the issues found by the audit


161
00:10:33.500 --> 00:10:37.938 line:-2
and lets me choose which issues to ignore
and which issues to report.


162
00:10:37.971 --> 00:10:42.676 line:-2
I'll start by defining a variable
called shouldIgnore to false.


163
00:10:42.709 --> 00:10:46.880 line:-1
By default, issues should not be ignored.


164
00:10:46.914 --> 00:10:49.616 line:-2
Let's say I'd like to ignore
a contrast issue


165
00:10:49.650 --> 00:10:52.519 line:-1
on an element with the label "My Label."


166
00:10:54.121 --> 00:10:57.991 line:-2
I can get the XCUIElement
associated with the issue


167
00:10:58.025 --> 00:11:00.360 line:-1
using issue.element.


168
00:11:00.394 --> 00:11:04.031 line:-1
If this element has the label "My Label"


169
00:11:04.064 --> 00:11:08.435 line:-1
and the type of issue is a contrast issue,


170
00:11:08.468 --> 00:11:13.774 line:-2
then I know I've got the right issue,
so I'll set shouldIgnore to true.


171
00:11:13.807 --> 00:11:18.278 line:-2
Setting it to true indicates
that I'd like the issue to be ignored.


172
00:11:18.312 --> 00:11:21.682 line:-1
At the end, I'll return shouldIgnore.


173
00:11:21.715 --> 00:11:26.220 line:-2
If the conditions above aren't met,
then shouldIgnore will be false,


174
00:11:26.253 --> 00:11:29.389 line:-2
indicating the issue should be reported
as a failure.


175
00:11:29.423 --> 00:11:31.191 line:-1
And that's it.


176
00:11:31.225 --> 00:11:35.462 line:-2
You can extend this example
and customize the criteria for ignoring


177
00:11:35.495 --> 00:11:38.799 line:-2
by using other properties,
like the element type


178
00:11:38.832 --> 00:11:42.302 line:-1
or the identifier, and so on.


179
00:11:42.336 --> 00:11:46.340 line:-2
As you begin to write accessibility audits
for your own apps,


180
00:11:46.373 --> 00:11:50.277 line:-2
it's helpful to keep in mind
the following considerations.


181
00:11:50.310 --> 00:11:53.614 line:-2
An audit is limited
to the elements on the screen.


182
00:11:53.647 --> 00:11:57.084 line:-2
That means in order to provide
complete coverage,


183
00:11:57.117 --> 00:11:59.520 line:-1
you should add accessibility audit tests


184
00:11:59.553 --> 00:12:03.223 line:-2
for all the different views
your app may show.


185
00:12:03.257 --> 00:12:06.727 line:-2
In the case of my sample app,
I should add another test


186
00:12:06.760 --> 00:12:10.197 line:-2
which navigates to the second tab
and runs an audit.


187
00:12:10.230 --> 00:12:14.368 line:-2
A quick way to immediately add audits
for multiple tests


188
00:12:14.401 --> 00:12:18.071 line:-2
is to override
and perform the audit in teardown.


189
00:12:18.105 --> 00:12:21.942 line:-2
You could define variables
in the scope of the class.


190
00:12:21.975 --> 00:12:24.578 line:-2
This way, tests can override
these variables


191
00:12:24.611 --> 00:12:26.947 line:-1
to opt in or out of the audit


192
00:12:26.980 --> 00:12:31.852 line:-2
and to allow the tests to customize
the closure for ignoring issues.


193
00:12:31.885 --> 00:12:37.291 line:-2
Test plans are an excellent way to group
audit-specific tests in your project.


194
00:12:37.324 --> 00:12:41.361 line:-2
They allow you to selectively enable
test targets, cases,


195
00:12:41.395 --> 00:12:44.064 line:-1
or individual methods in the test plan.


196
00:12:44.097 --> 00:12:49.303 line:-2
And finally, audits shouldn't substitute
real testing with assistive technologies.


197
00:12:49.336 --> 00:12:53.640 line:-2
Ultimately, testing your app by turning on
technologies like VoiceOver


198
00:12:53.674 --> 00:12:59.279 line:-2
or Dynamic Type is the best way
to ensure a high-quality experience.


199
00:12:59.313 --> 00:13:04.418 line:-2
You can achieve
great accessibility and great testing


200
00:13:04.451 --> 00:13:07.287 line:-1
without having to compromise on either.


201
00:13:07.321 --> 00:13:10.991 line:-2
Automation elements allow you
to expose elements


202
00:13:11.024 --> 00:13:13.994 line:-1
specifically for the purpose of automation


203
00:13:14.027 --> 00:13:17.764 line:-2
without affecting the accessibility
of those elements.


204
00:13:17.798 --> 00:13:22.035 line:-2
Now, in UIKit,
you'll be able to leverage this API


205
00:13:22.069 --> 00:13:26.340 line:-2
to expose exactly the elements you need
for automation,


206
00:13:26.373 --> 00:13:29.276 line:-2
while still being able to customize
the accessibility


207
00:13:29.309 --> 00:13:31.645 line:-1
for these elements at the same time.


208
00:13:31.678 --> 00:13:36.016 line:-2
You may remember from earlier
that as I fixed the issues from my audit,


209
00:13:36.049 --> 00:13:39.353 line:-1
I also broke one of my UI tests.


210
00:13:39.386 --> 00:13:42.956 line:-2
The image view doesn't seem
to be available anymore.


211
00:13:42.990 --> 00:13:45.225 line:-1
It's missing in my UI test


212
00:13:45.259 --> 00:13:48.529 line:-2
because it's also missing
in accessibility.


213
00:13:48.562 --> 00:13:51.098 line:-1
Because this image view was decorative,


214
00:13:51.131 --> 00:13:55.235 line:-2
I overrode accessibility elements
to exclude it from accessibility.


215
00:13:55.269 --> 00:14:01.375 line:-2
However, by doing so, I also caused it
to become excluded from my UI test.


216
00:14:01.408 --> 00:14:05.579 line:-2
Let's explore how automation elements
can help me expose my image view


217
00:14:05.612 --> 00:14:07.514 line:-1
to my UI test.


218
00:14:07.548 --> 00:14:10.717 line:-2
I'll go to the view controller file
in Xcode.


219
00:14:13.220 --> 00:14:16.924 line:-2
And I'll set automationElements
on the view controller's view


220
00:14:16.957 --> 00:14:20.227 line:-1
to the image view.


221
00:14:20.260 --> 00:14:23.764 line:-2
Keep in mind that when overriding
automationElements,


222
00:14:23.797 --> 00:14:29.269 line:-2
you need to specify all the elements
which need to be exposed to automation.


223
00:14:31.371 --> 00:14:37.477 line:-2
That means I also need to add
the text view and the button to my list.


224
00:14:37.511 --> 00:14:42.316 line:-2
When overriding automation elements,
you are overriding the existing elements


225
00:14:42.349 --> 00:14:45.819 line:-1
that are already exposed to automation.


226
00:14:45.853 --> 00:14:48.856 line:-2
Let's try running our test case
to see if it's passing again.


227
00:14:50.991 --> 00:14:53.994 line:-1
[no audio]


228
00:15:00.701 --> 00:15:01.702 line:-1
Awesome.


229
00:15:01.735 --> 00:15:05.672 line:-2
We were able to write
some great UI and accessibility tests


230
00:15:05.706 --> 00:15:08.375 line:-1
and fix some accessibility issues too.


231
00:15:08.408 --> 00:15:11.645 line:-1
Accessibility audits are a fantastic way


232
00:15:11.678 --> 00:15:17.317 line:-2
to add easy, automated
accessibility testing for your app.


233
00:15:17.351 --> 00:15:20.053 line:-1
Fixing the issues identified by the audits


234
00:15:20.087 --> 00:15:23.857 line:-1
helps ensure everyone can enjoy your app.


235
00:15:23.891 --> 00:15:27.995 line:-2
Create great accessibility
and automation experiences


236
00:15:28.028 --> 00:15:30.597 line:-1
without having to pick one over the other.


237
00:15:30.631 --> 00:15:34.301 line:-2
Automation elements allows you
to expose elements


238
00:15:34.334 --> 00:15:36.637 line:-1
specifically for your UI tests


239
00:15:36.670 --> 00:15:39.640 line:-2
without impacting
the accessibility experience.


240
00:15:39.673 --> 00:15:42.876 line:-1
I encourage you to go to your UI tests


241
00:15:42.910 --> 00:15:46.380 line:-2
and add a quick call
to performAccessibilityAudit.


242
00:15:46.413 --> 00:15:47.681 line:-1
Thank you.

