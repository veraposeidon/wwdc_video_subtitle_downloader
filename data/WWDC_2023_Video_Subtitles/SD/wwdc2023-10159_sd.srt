2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:10.477 --> 00:00:14.515 line:-2 align:center
Harry: Hi, I'm Harry,
an engineer on the SwiftUI team.


4
00:00:14.548 --> 00:00:17.117 line:-2 align:center
Welcome to Beyond Scroll Views
where I'll talk about


5
00:00:17,150 --> 00:00:21,121 line:-2
some new improvements to scroll views
in SwiftUI.


6
00:00:21,154 --> 00:00:24,358 line:-2
The things our devices want to do
can rarely be contained


7
00:00:24,391 --> 00:00:27,060 line:-1
within their fixed screen sizes.


8
00:00:27.094 --> 00:00:30.998 line:-2 align:center
One way they handle this complexity
is by introducing scrolling.


9
00:00:31.031 --> 00:00:34.768 line:-2 align:center
This allows them to show us everything
that won't fit on screen.


10
00:00:34.801 --> 00:00:37.404 line:-1 align:center
SwiftUI offers a few different components


11
00:00:37,437 --> 00:00:40,174 line:-2
that let you integrate scrolling
into your own apps.


12
00:00:40.207 --> 00:00:43.110 line:-2 align:center
Today, I'll be talking about
one of those components.


13
00:00:43.143 --> 00:00:44.912 line:-1 align:center
ScrollView.


14
00:00:44.945 --> 00:00:49.383 line:-2 align:center
A ScrollView is a building block
that lets your content scroll.


15
00:00:49.416 --> 00:00:52.386 line:-2 align:center
Scroll views have axes
that defines the directions


16
00:00:52.419 --> 00:00:54.588 line:-1 align:center
in which they're scrollable.


17
00:00:54,621 --> 00:00:56,690 line:-1
Scroll views have content.


18
00:00:56.723 --> 00:00:59.893 line:-2 align:center
When that content exceeds
the size of the ScrollView,


19
00:00:59.927 --> 00:01:02.029 line:-1 align:center
some of that content will be clipped,


20
00:01:02.062 --> 00:01:05.632 line:-2 align:center
and people will need to scroll
to reveal it.


21
00:01:05.666 --> 00:01:09.469 line:-2 align:center
Scroll views ensure that the content
is placed within the safe area


22
00:01:09.503 --> 00:01:14.408 line:-2 align:center
by resolving the safe area
into margins outsetting its content.


23
00:01:14,441 --> 00:01:18,345 line:-2
A ScrollView evaluates its content
eagerly by default.


24
00:01:18.378 --> 00:01:21.682 line:-2 align:center
You can change this behavior
by using a lazy stack.


25
00:01:23.116 --> 00:01:26.119 line:-2 align:center
The exact position of where
the ScrollView is scrolled


26
00:01:26.153 --> 00:01:29.623 line:-2 align:center
within the content
is called the content offset.


27
00:01:29.656 --> 00:01:32.426 line:-2 align:center
SwiftUI has offered
the ScrollViewReader API


28
00:01:32.459 --> 00:01:34.862 line:-1 align:center
as a way to control the content offset.


29
00:01:34.895 --> 00:01:37.731 line:-2 align:center
This year,
SwiftUI is introducing more ways


30
00:01:37.764 --> 00:01:42.503 line:-2 align:center
to both influence and react to the content
offset managed by a ScrollView.


31
00:01:42,536 --> 00:01:46,573 line:-2
In this talk, I'll start by discussing
ways to influence a ScrollView's margins


32
00:01:46,607 --> 00:01:48,942 line:-1
and how they relate to safe areas.


33
00:01:48.976 --> 00:01:51.945 line:-2 align:center
I'll then talk about managing
a ScrollView's content offset


34
00:01:51,979 --> 00:01:54,948 line:-2
through scroll targets
and scroll positions.


35
00:01:54.982 --> 00:01:57.985 line:-2 align:center
Finally, I'll show off how you can add
some real flair to your apps


36
00:01:58.018 --> 00:02:00.454 line:-1 align:center
with scroll transitions.


37
00:02:00.487 --> 00:02:02.856 line:-1 align:center
Ever since I started making my Colors app,


38
00:02:02.890 --> 00:02:07.294 line:-2 align:center
my users have really liked showing me
some of their favorite color combinations.


39
00:02:07.327 --> 00:02:09.429 line:-2 align:center
I'd like to feature
some of these combinations


40
00:02:09.463 --> 00:02:12.232 line:-1 align:center
so that other people can enjoy them.


41
00:02:12.266 --> 00:02:16.503 line:-2 align:center
To do this, I've been working on adding
a gallery feature to my Colors app.


42
00:02:16.537 --> 00:02:19.640 line:-2 align:center
I've already made some progress
implementing my gallery.


43
00:02:19.673 --> 00:02:22.309 line:-2 align:center
Throughout this talk
I'll be polishing both the header


44
00:02:22.342 --> 00:02:25.812 line:-2 align:center
and content
of the featured section of my gallery.


45
00:02:27.447 --> 00:02:31.718 line:-2 align:center
In my gallery, I have a horizontal
ScrollView wrapping a lazy stack.


46
00:02:31.752 --> 00:02:35.756 line:-2 align:center
I'll first make this view look a bit nicer
with some margins.


47
00:02:35,789 --> 00:02:39,193 line:-2
Your first instinct might be
to add some padding to a ScrollView,


48
00:02:39.226 --> 00:02:41.795 line:-1 align:center
and this will inset a ScrollView,


49
00:02:41,828 --> 00:02:46,400 line:-2
but notice that now its content is clipped
when scrolling.


50
00:02:46.433 --> 00:02:48.969 line:-2 align:center
Instead of insetting
the ScrollView itself,


51
00:02:49,002 --> 00:02:53,207 line:-2
I'd like to extend the content margins
of the ScrollView.


52
00:02:53,240 --> 00:02:56,543 line:-2
I can do that
with the new safe area padding modifier.


53
00:02:56.577 --> 00:02:59.179 line:-2 align:center
This behaves like
the normal padding modifier,


54
00:02:59,213 --> 00:03:03,584 line:-2
but instead of padding the content,
it adds the padding to the safe area.


55
00:03:03.617 --> 00:03:08.889 line:-2 align:center
Now my ScrollView expands the whole width,
which lets the next item peek out.


56
00:03:08,922 --> 00:03:12,693 line:-2
Before I go further,
I'd talk a little about safe areas


57
00:03:12.726 --> 00:03:15.229 line:-1 align:center
in relation to ScrollView’s.


58
00:03:15,262 --> 00:03:19,333 line:-2
Safe areas most commonly come
from the device your app is running on.


59
00:03:19.366 --> 00:03:22.236 line:-2 align:center
The can also come from APIs
like the safe area padding


60
00:03:22,269 --> 00:03:24,872 line:-1
or safe area inset modifier.


61
00:03:24.905 --> 00:03:30.344 line:-2 align:center
A ScrollView resolves the safe area into
the margins it applies to its content.


62
00:03:30.377 --> 00:03:33.714 line:-2 align:center
This includes content
you are responsible for,


63
00:03:33.747 --> 00:03:37.551 line:-2 align:center
but also additional content that the
ScrollView is responsible for


64
00:03:37,584 --> 00:03:39,152 line:-1
like scroll indicators.


65
00:03:39,186 --> 00:03:42,823 line:-2
This means it's not possible
to configure different insets


66
00:03:42.856 --> 00:03:46.493 line:-2 align:center
for different kinds of content
by modifying the safe area.


67
00:03:48.228 --> 00:03:53.600 line:-2 align:center
If you want to apply different insets,
you can use the new contentMargins API.


68
00:03:53,634 --> 00:03:57,604 line:-2
This API allows you to inset the content
of the ScrollView separately


69
00:03:57,638 --> 00:03:59,206 line:-1
from the scroll indicators.


70
00:03:59,239 --> 00:04:03,577 line:-2
Or inset the indicators
separately from the content.


71
00:04:03.610 --> 00:04:07.447 line:-2 align:center
Going back to my gallery,
I'll update my safe area padding modifier


72
00:04:07.481 --> 00:04:10.250 line:-1 align:center
to use the content margin API.


73
00:04:10.284 --> 00:04:12.853 line:-2 align:center
Now that my views
have a bit of margins applied,


74
00:04:12,886 --> 00:04:16,190 line:-2
one of the things I'd like to do
is control what content offset


75
00:04:16.223 --> 00:04:19.393 line:-2 align:center
the ScrollView will scroll to
once someone lifts their finger.


76
00:04:20.894 --> 00:04:24.565 line:-2 align:center
By default, a ScrollView uses a standard
deceleration rate


77
00:04:24.598 --> 00:04:27.100 line:-1 align:center
along with the velocity of the scroll


78
00:04:27,134 --> 00:04:31,171 line:-2
to calculate the target content offset
the scroll should end at.


79
00:04:31,205 --> 00:04:34,308 line:-2
It does not take into account
things like the size of the ScrollView


80
00:04:34.341 --> 00:04:36.243 line:-1 align:center
or its content.


81
00:04:36,276 --> 00:04:38,779 line:-1
But sometimes those things matter.


82
00:04:38,812 --> 00:04:41,949 line:-2
New in SwiftUI, you can change
how a ScrollView calculates


83
00:04:41.982 --> 00:04:46.954 line:-2 align:center
this target content offset
with the scrollTargetBehavior modifier.


84
00:04:46.987 --> 00:04:52.559 line:-2 align:center
This modifier takes a type conforming
to the scrollTargetBehavior protocol.


85
00:04:52.593 --> 00:04:56.096 line:-1 align:center
Here I've specified the paging behavior.


86
00:04:56.129 --> 00:04:59.299 line:-2 align:center
Now my ScrollView swipes
one page at a time.


87
00:04:59,333 --> 00:05:01,235 line:-1
The paging behavior is special.


88
00:05:01.268 --> 00:05:03.270 line:-1 align:center
It has a custom deceleration rate


89
00:05:03.303 --> 00:05:05.005 line:-1 align:center
and chooses where to scroll


90
00:05:05,038 --> 00:05:08,642 line:-2
based on the containing size
of the ScrollView itself.


91
00:05:08,675 --> 00:05:12,045 line:-2
This works well for iOS,
but becomes a little bit much


92
00:05:12,079 --> 00:05:14,815 line:-1
on the larger screens of iPadOS.


93
00:05:14,848 --> 00:05:17,818 line:-2
Instead of aligning to the containing size
of the ScrollView,


94
00:05:17.851 --> 00:05:20.621 line:-1 align:center
I'd like to align to individual views.


95
00:05:21,822 --> 00:05:25,158 line:-2
The view aligned behavior aligns
the ScrollView to views,


96
00:05:25.192 --> 00:05:29.830 line:-2 align:center
so the ScrollView needs to know which
views it should consider for alignment.


97
00:05:29,863 --> 00:05:32,132 line:-1
These views are called scroll targets,


98
00:05:32,165 --> 00:05:34,067 line:-1
and there's a new family of modifiers


99
00:05:34.101 --> 00:05:38.739 line:-2 align:center
that let me specify
which views are scroll targets.


100
00:05:38,772 --> 00:05:41,742 line:-2
Here I'll use the scroll target
layout modifier


101
00:05:41.775 --> 00:05:46.513 line:-2 align:center
to have each hero view in the lazy stack
be considered a scroll target.


102
00:05:46.547 --> 00:05:49.650 line:-2 align:center
You can also mark individual views
as targets


103
00:05:49.683 --> 00:05:52.186 line:-1 align:center
using the scroll target modifier.


104
00:05:52.219 --> 00:05:53.921 line:-1 align:center
But when using lazy stacks,


105
00:05:53,954 --> 00:05:57,858 line:-2
it's important to use
the scroll target layout modifier.


106
00:05:57.891 --> 00:06:01.862 line:-2 align:center
Views outside the visible region
have not yet been created.


107
00:06:01.895 --> 00:06:05.465 line:-2 align:center
The layout knows about which views
it will create, though,


108
00:06:05,499 --> 00:06:08,302 line:-2
so it can make sure
the ScrollView scrolls to the right place.


109
00:06:10.370 --> 00:06:14.341 line:-2 align:center
Now my ScrollView is looking
a lot better on iPad.


110
00:06:14.374 --> 00:06:16.043 line:-1 align:center
The paging and view aligned behaviors


111
00:06:16,076 --> 00:06:19,346 line:-2
are built off of the new
ScrollTargetBehavior protocol.


112
00:06:19.379 --> 00:06:22.649 line:-2 align:center
While SwiftUI provides these
common behaviors for you,


113
00:06:22.683 --> 00:06:25.686 line:-2 align:center
it also allows you to conform
your own types to this protocol


114
00:06:25,719 --> 00:06:27,921 line:-1
and implement your own custom behavior,


115
00:06:27.955 --> 00:06:31.491 line:-2 align:center
much like you would adopt the previously
introduced layout protocol.


116
00:06:32,392 --> 00:06:35,262 line:-2
Conform your own types
to the ScrollTargetBehavior


117
00:06:35.295 --> 00:06:39.867 line:-2 align:center
by implementing the one
required method: updateTarget.


118
00:06:39,900 --> 00:06:43,470 line:-2
SwiftUI calls this method when
calculating where a scroll should end,


119
00:06:43,504 --> 00:06:48,542 line:-2
but also in other contexts
like when the ScrollView changes size.


120
00:06:48.575 --> 00:06:50.744 line:-1 align:center
Customizing the behavior is easy.


121
00:06:50.777 --> 00:06:54.381 line:-2 align:center
Here if the target is close to the top
of the ScrollView,


122
00:06:54.414 --> 00:06:56.450 line:-1 align:center
and the scroll was flicked up,


123
00:06:56,483 --> 00:06:59,753 line:-2
I'll prefer to scroll to the exact top
of the ScrollView


124
00:06:59.786 --> 00:07:02.389 line:-1 align:center
by modifying the provided target.


125
00:07:02.422 --> 00:07:06.193 line:-2 align:center
This will result in the ScrollView
choosing a different content offset


126
00:07:06.226 --> 00:07:08.562 line:-1 align:center
to be the end point of the scroll.


127
00:07:08.595 --> 00:07:10.964 line:-2 align:center
And that's all it takes to insert
my own custom code


128
00:07:10.998 --> 00:07:13.901 line:-2 align:center
for influencing
where a ScrollView chooses to scroll.


129
00:07:15,169 --> 00:07:16,904 line:-1
Let's go back to my gallery view.


130
00:07:16,937 --> 00:07:18,906 line:-1
I'd like to talk about layout.


131
00:07:18.939 --> 00:07:21.074 line:-1 align:center
Notice that my hero view is sized


132
00:07:21,108 --> 00:07:24,244 line:-2
in relation to the overall width
of the device.


133
00:07:24.278 --> 00:07:25.646 line:-1 align:center
And if we look at iPad,


134
00:07:25.679 --> 00:07:29.049 line:-2 align:center
two views fit
evenly within the device's width.


135
00:07:29.082 --> 00:07:33.487 line:-2 align:center
Previously you would've had to use
a GeometryReader to accomplish this,


136
00:07:33.520 --> 00:07:35.989 line:-2 align:center
but this year SwiftUI makes this
much easier


137
00:07:36,023 --> 00:07:39,193 line:-2
with a new API called
the containerRelativeFrame modifier.


138
00:07:40.861 --> 00:07:44.431 line:-2 align:center
I'll show you
how my hero view uses this API.


139
00:07:44.464 --> 00:07:48.001 line:-2 align:center
I'll start with a stack of color views,
along with a frame modifier


140
00:07:48,035 --> 00:07:51,104 line:-1
specifying a fixed height.


141
00:07:51.138 --> 00:07:54.842 line:-2 align:center
I'll add the containerRelativeFrame
modifier to my view.


142
00:07:54,875 --> 00:07:57,344 line:-1
Here I specify the horizontal axis,


143
00:07:57.377 --> 00:08:01.348 line:-2 align:center
which lets the view just take on
the width of its container.


144
00:08:01,381 --> 00:08:04,751 line:-2
In my case the container will be
the surrounding ScrollView,


145
00:08:04.785 --> 00:08:07.888 line:-2 align:center
but it might also be the nearest column
of a navigation split view,


146
00:08:07,921 --> 00:08:09,690 line:-1
or the window of your app.


147
00:08:10.524 --> 00:08:12.326 line:-1 align:center
When the width of my container changes,


148
00:08:12.359 --> 00:08:15.395 line:-1 align:center
the size of my views automatically update.


149
00:08:15.429 --> 00:08:18.932 line:-2 align:center
I can create a grid-like layout
of these views by providing a count


150
00:08:18.966 --> 00:08:21.301 line:-1 align:center
and spacing.


151
00:08:21.335 --> 00:08:25.339 line:-2 align:center
I can conditionalize the count
based on the horizontal sizeClass


152
00:08:25.372 --> 00:08:28.942 line:-2 align:center
to have two columns on iPad
and one column on phone.


153
00:08:28.976 --> 00:08:32.579 line:-2 align:center
What's even better is that I can
remove the OS conditionals


154
00:08:32,613 --> 00:08:35,282 line:-2
as the horizontal sizeClass
environment property


155
00:08:35.315 --> 00:08:38.752 line:-1 align:center
is now available on all platforms.


156
00:08:38,785 --> 00:08:41,655 line:-2
Finally,
I'll use the aspectRatio modifier


157
00:08:41.688 --> 00:08:44.291 line:-1 align:center
to have a height relative to the width,


158
00:08:44.324 --> 00:08:48.295 line:-1 align:center
instead of hardcoding a fixed height.


159
00:08:48.328 --> 00:08:51.732 line:-2 align:center
So I've gotten the layout
and scroll behavior of my gallery done.


160
00:08:51,765 --> 00:08:54,635 line:-2
There's some more changes
I'd like to make.


161
00:08:54,668 --> 00:08:57,604 line:-2
One thing you'll notice
are the scroll indicators.


162
00:08:57.638 --> 00:08:59.206 line:-1 align:center
I'd like to remove those.


163
00:09:00,674 --> 00:09:04,978 line:-2
I can use the existing
scrollIndicators API to accomplish this.


164
00:09:05.012 --> 00:09:08.148 line:-2 align:center
This looks great
when swiping my finger on an iPad,


165
00:09:08.182 --> 00:09:10.551 line:-1 align:center
but I often use my gallery on a Mac.


166
00:09:10.584 --> 00:09:15.189 line:-2 align:center
And on a Mac, I might not be able to
easily perform a horizontal swipe gesture


167
00:09:15.222 --> 00:09:18.992 line:-2 align:center
like when using a mouse
or other input devices.


168
00:09:19.026 --> 00:09:20.661 line:-1 align:center
And when I connect a mouse,


169
00:09:20.694 --> 00:09:22.296 line:-1 align:center
the indicators are visible,


170
00:09:22,329 --> 00:09:25,199 line:-1
even though I've requested they be hidden.


171
00:09:25,232 --> 00:09:29,903 line:-2
Using a mouse can make scrolling difficult
or impossible without scroll indicators.


172
00:09:29,937 --> 00:09:34,141 line:-2
For this reason, the default behavior
of the scrollIndicators modifier


173
00:09:34.174 --> 00:09:37.711 line:-2 align:center
is to hide the indicators
when using more flexible input devices,


174
00:09:37.744 --> 00:09:40.981 line:-2 align:center
like trackpads,
but to allow the indicators to show


175
00:09:41.014 --> 00:09:43.283 line:-1 align:center
when a mouse is connected.


176
00:09:43.317 --> 00:09:47.020 line:-2 align:center
You can provide a value of never
to the scrollIndicators modifier


177
00:09:47.054 --> 00:09:50.624 line:-2 align:center
to always hide the indicators
regardless of input device.


178
00:09:50,657 --> 00:09:54,094 line:-2
But my app still needs to support people
who use a mouse.


179
00:09:54.127 --> 00:09:58.699 line:-2 align:center
So I'll need to provide an alternative
means to scroll my gallery for them.


180
00:09:58.732 --> 00:10:00.400 line:-1 align:center
Instead of scroll indicators,


181
00:10:00,434 --> 00:10:03,103 line:-2
I'll render some views
that allow users to scroll


182
00:10:03.136 --> 00:10:07.140 line:-2 align:center
to the previous or next views
with a click.


183
00:10:07.174 --> 00:10:11.178 line:-2 align:center
To start building that,
let's clean my ScrollView up a bit.


184
00:10:11,211 --> 00:10:14,681 line:-2
I'll move my ScrollView into a VStack
with my header view.


185
00:10:15.749 --> 00:10:17.918 line:-1 align:center
Now I'll focus on the header view.


186
00:10:19.319 --> 00:10:22.422 line:-2 align:center
I'll add some custom paddle views
into the header view.


187
00:10:22.456 --> 00:10:24.391 line:-1 align:center
In past versions of SwiftUI,


188
00:10:24,424 --> 00:10:26,660 line:-2
I would have reached
for a ScrollViewReader


189
00:10:26.693 --> 00:10:30.430 line:-2 align:center
to pass to my paddles
and scroll to the appropriate view.


190
00:10:30.464 --> 00:10:34.067 line:-2 align:center
New in SwiftUI, though,
is the scrollPosition modifier.


191
00:10:34.101 --> 00:10:38.939 line:-2 align:center
This modifier associates a binding
to a state wrapping an identifier.


192
00:10:38,972 --> 00:10:41,608 line:-2
I'll pass that
to my scrollPosition modifier


193
00:10:41.642 --> 00:10:45.812 line:-2 align:center
which the ScrollView will read from
and to my header view.


194
00:10:45,846 --> 00:10:47,681 line:-1
In the paddles of my header view,


195
00:10:47.714 --> 00:10:51.285 line:-2 align:center
I can write to the binding
like any other piece of state.


196
00:10:51.318 --> 00:10:52.920 line:-1 align:center
When the binding is written to,


197
00:10:52.953 --> 00:10:56.190 line:-2 align:center
the ScrollView will scroll
to the view with that ID.


198
00:10:56.223 --> 00:10:59.493 line:-2 align:center
Just like the view aligned
ScrollTargetBehavior,


199
00:10:59.526 --> 00:11:04.097 line:-2 align:center
the scroll position modifier
uses the scroll target layout modifier


200
00:11:04.131 --> 00:11:08.202 line:-2 align:center
to know which views to consider
for querying their identity values.


201
00:11:09,770 --> 00:11:13,040 line:-2
The scroll position modifier
also allows me to know the identity


202
00:11:13.073 --> 00:11:15.576 line:-1 align:center
of the view currently scrolled.


203
00:11:15,609 --> 00:11:18,712 line:-2
So I can add to my header view
some text that shows the value


204
00:11:18,745 --> 00:11:22,649 line:-1
of the hero image currently scrolled.


205
00:11:22,683 --> 00:11:25,118 line:-2
When the most leading view
in my ScrollView changes,


206
00:11:25.152 --> 00:11:27.521 line:-1 align:center
the binding automatically updates.


207
00:11:27.554 --> 00:11:30.257 line:-2 align:center
Now my mouse users
can scroll through my gallery.


208
00:11:30.290 --> 00:11:33.760 line:-2 align:center
There's one last bit of polish
I'd like to add to this view.


209
00:11:33.794 --> 00:11:37.130 line:-2 align:center
Just like its useful to know
which view is currently scrolled,


210
00:11:37,164 --> 00:11:39,800 line:-1
sometimes I want to visually alter a view


211
00:11:39,833 --> 00:11:43,070 line:-2
based on where it is
within the ScrollView.


212
00:11:43.103 --> 00:11:48.876 line:-2 align:center
There's new API called ScrollTransitions
in SwiftUI that make this really easy.


213
00:11:48,909 --> 00:11:52,079 line:-2
A ScrollTransition is a lot like
a normal transition.


214
00:11:52,112 --> 00:11:54,982 line:-2
A transition describes the changes
a view should undergo


215
00:11:55.015 --> 00:11:58.585 line:-1 align:center
when its appearing or disappearing.


216
00:11:58.619 --> 00:12:01.321 line:-2 align:center
When a view has appeared,
it's in its identity phase


217
00:12:01.355 --> 00:12:04.958 line:-1 align:center
where no customizations should be applied.


218
00:12:04.992 --> 00:12:09.162 line:-2 align:center
A ScrollTransition describes
a similar set of changes as a transition


219
00:12:09,196 --> 00:12:13,667 line:-2
but instead applies those as a view enters
the visible region of a ScrollView


220
00:12:13.700 --> 00:12:16.103 line:-1 align:center
and then leaves the visible region.


221
00:12:17,571 --> 00:12:21,141 line:-2
By default, when the view is
in the center of the visible region,


222
00:12:21,175 --> 00:12:24,511 line:-2
it's in the identity phase
of the ScrollTransition.


223
00:12:24,545 --> 00:12:27,814 line:-2
Let's look at this
in the context of my hero view.


224
00:12:27,848 --> 00:12:31,485 line:-2
I'll clean this up a bit
to focus on ScrollTransitions.


225
00:12:33.320 --> 00:12:35.789 line:-2 align:center
As a view gets near the edges
of the ScrollView,


226
00:12:35.822 --> 00:12:38.725 line:-1 align:center
I'd like it to scale down a bit in size.


227
00:12:38,759 --> 00:12:42,196 line:-2
I'll start by adding
the scrollTransition modifier.


228
00:12:42.229 --> 00:12:45.132 line:-1 align:center
This API takes content and a phase


229
00:12:45,165 --> 00:12:50,470 line:-2
and allows you to specify visual changes
to the content based on the phase.


230
00:12:50.504 --> 00:12:52.973 line:-1 align:center
Here I'll specify a decrease in scale


231
00:12:53.006 --> 00:12:55.909 line:-2 align:center
when the view
is not in its identity phase.


232
00:12:57.477 --> 00:12:59.813 line:-1 align:center
That looks great!


233
00:12:59,847 --> 00:13:04,017 line:-2
ScrollTransitions work with
a new protocol called VisualEffect.


234
00:13:04,051 --> 00:13:07,855 line:-2
This protocol provides a set of
customizations for view content


235
00:13:07.888 --> 00:13:10.123 line:-2 align:center
that are safe to use as functions
of layout


236
00:13:10.157 --> 00:13:12.593 line:-1 align:center
like the content offset of a ScrollView.


237
00:13:12.626 --> 00:13:15.729 line:-1 align:center
Many of them might look familiar to you.


238
00:13:15,762 --> 00:13:17,998 line:-1
You already know about the scaleEffect.


239
00:13:18.031 --> 00:13:20.400 line:-1 align:center
You can also customize the rotation,


240
00:13:20.434 --> 00:13:24.304 line:-2 align:center
or the offset
much like you would with view modifiers.


241
00:13:24.338 --> 00:13:30.077 line:-2 align:center
However, not all view modifiers can be
safely used inside of a scrollTransition.


242
00:13:30.110 --> 00:13:34.982 line:-2 align:center
For example, customizing the font
is not supported and will not build.


243
00:13:35,015 --> 00:13:38,585 line:-2
Anything that will change the overall
content size of the ScrollView


244
00:13:38.619 --> 00:13:42.289 line:-2 align:center
cannot be used
within a scrollTransition modifier.


245
00:13:42,322 --> 00:13:45,893 line:-2
Wow, we've covered a lot
so let's do a quick review.


246
00:13:47,261 --> 00:13:51,031 line:-2
We talked about the differences
between safe areas and contentMargins


247
00:13:51,064 --> 00:13:53,767 line:-1
and their relationship to ScrollViews.


248
00:13:53,800 --> 00:13:58,172 line:-2
I showed you how you can use the paging
and view aligned scrollTargetBehaviors


249
00:13:58.205 --> 00:14:00.574 line:-1 align:center
to influence how a ScrollView behaves


250
00:14:00,607 --> 00:14:02,509 line:-2
and how you can write
your own conformances


251
00:14:02.543 --> 00:14:05.812 line:-1 align:center
to the scrollTargetBehavior protocol.


252
00:14:05,846 --> 00:14:08,982 line:-2
You learned about how much easier it is
to create layouts


253
00:14:09.016 --> 00:14:14.021 line:-2 align:center
relative to their container using
the containerRelativeFrame modifier.


254
00:14:14.054 --> 00:14:17.891 line:-2 align:center
I hooked into the state of a ScrollView
using the scrollPosition modifier,


255
00:14:17.925 --> 00:14:20.260 line:-2 align:center
allowing me to both
programmatically scroll


256
00:14:20.294 --> 00:14:24.231 line:-2 align:center
and be informed
of which view is currently scrolled.


257
00:14:24,264 --> 00:14:26,366 line:-1
And finally, I created visual effects


258
00:14:26.400 --> 00:14:28.902 line:-2 align:center
based on the content offset
of my ScrollView


259
00:14:28.936 --> 00:14:31.572 line:-1 align:center
with the scrollTransition API.


260
00:14:31.605 --> 00:14:34.808 line:-2 align:center
I hope you've enjoyed learning
about these improvements to ScrollViews.


261
00:14:34.842 --> 00:14:37.477 line:-1 align:center
Thanks, and have a great WWDC.


262
00:14:37,511 --> 00:14:41,515 line:-1
♪ ♪

