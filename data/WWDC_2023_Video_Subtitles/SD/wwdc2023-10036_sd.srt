2
00:00:00.334 --> 00:00:07.341 line:-1
♪ ♪


3
00:00:10.444 --> 00:00:11.478 line:-1
Allison: Hello, everyone.


4
00:00:11.512 --> 00:00:14.915 line:-2
My name is Allison,
and I am an accessibility engineer.


5
00:00:14.948 --> 00:00:18.552 line:-2
Today we are going to be talking
about some of the exciting new ways


6
00:00:18.585 --> 00:00:21.722 line:-1
you can make your app more accessible.


7
00:00:21.755 --> 00:00:26.760 line:-2
At Apple, accessibility is an essential
piece of everything that we build


8
00:00:26.793 --> 00:00:30.898 line:-2
because we believe
everyone deserves access to technology.


9
00:00:30.931 --> 00:00:36.036 line:-2
We want it to be extremely easy
for you to make your apps accessible.


10
00:00:36.069 --> 00:00:39.806 line:-2
Over the past year, we have been working
on a number of enhancements


11
00:00:39.840 --> 00:00:43.877 line:-2
to ensure that everyone has
the best possible experience in your app.


12
00:00:43.911 --> 00:00:46.647 line:-1
In this session, we will explore API


13
00:00:46.680 --> 00:00:50.651 line:-2
that lets people interact with your app
in new, exciting ways.


14
00:00:50.684 --> 00:00:54.555 line:-2
Next, we will discuss how to improve
the accessibility visuals


15
00:00:54.588 --> 00:00:57.591 line:-1
for your content in your SwiftUI app.


16
00:00:57.624 --> 00:01:01.428 line:-2
Finally, we will learn a better way
to keep your accessibility attributes


17
00:01:01.461 --> 00:01:03.797 line:-1
up-to-date in UIKit.


18
00:01:03.830 --> 00:01:06.834 line:-2
Let's start by talking about
accessibility enhancements.


19
00:01:06.867 --> 00:01:09.870 line:-2
I have been working
on a photo editing app.


20
00:01:09.903 --> 00:01:12.439 line:-2
My app lets me add
cool image modifications


21
00:01:12.472 --> 00:01:15.108 line:-1
to photos from my library or camera.


22
00:01:15,142 --> 00:01:19,246
I can apply different filters,
change the photo tint color,


23
00:01:19,279 --> 00:01:21,982
or create custom sounds
to pair with my images


24
00:01:22,015 --> 00:01:24,451
using the piano keyboard in my app.


25
00:01:24.484 --> 00:01:27.454 line:-2
Let's discuss a few
accessibility enhancements


26
00:01:27.487 --> 00:01:29.723 line:-1
that we can integrate into the app.


27
00:01:29.756 --> 00:01:32.092 line:-1
In the filter page of my photo app,


28
00:01:32.125 --> 00:01:35.596 line:-2
there is a custom button
that has an on and off state.


29
00:01:36,997 --> 00:01:41,935
The "Filter" switch button lets us
toggle on and off the image filter.


30
00:01:41,969 --> 00:01:45,205
The system does not know
the correct accessibility hint


31
00:01:45,239 --> 00:01:49,576
and title for this custom UI,
and we want to make sure that we provide


32
00:01:49,610 --> 00:01:54,281
an accessibility experience
that matches that of other system toggles.


33
00:01:54.314 --> 00:01:59.586 line:-2
This is where the new accessibility trait,
isToggle, helps out.


34
00:01:59.620 --> 00:02:02.656 line:-2
We have a struct
representing the filter button.


35
00:02:02.689 --> 00:02:04.424 line:-1
In the body of the struct,


36
00:02:04.458 --> 00:02:08.595 line:-2
we create a button
that toggles the filter when pressed.


37
00:02:08.629 --> 00:02:13.100 line:-2
The button's color updates
based on the filter state variable.


38
00:02:13.133 --> 00:02:16.069 line:-2
We will add the isToggle trait
to the filter button


39
00:02:16.103 --> 00:02:19.206 line:-1
in the accessibilityAddTraits modifier.


40
00:02:19.239 --> 00:02:22.910 line:-2
isToggle provides the proper
accessibility hint


41
00:02:22.943 --> 00:02:24.978 line:-1
and "switch button" description.


42
00:02:25.012 --> 00:02:27.347 line:-1
VoiceOver: Filter, switch button.


43
00:02:27.381 --> 00:02:29.283 line:-1
Double-tap to toggle setting.


44
00:02:32.319 --> 00:02:35.656 line:-2
Allison: The new toggle trait
is also available in UIKit.


45
00:02:35.689 --> 00:02:40.294 line:-2
In the viewDidLoad method,
we set up the button view.


46
00:02:40.327 --> 00:02:44.164 line:-2
Then, we set the accessibilityTraits
property on the button


47
00:02:44.198 --> 00:02:48.035 line:-1
to contain .toggleButton.


48
00:02:48.068 --> 00:02:51.572 line:-2
In the photo filter app,
I want to add a new announcement


49
00:02:51.605 --> 00:02:54.107 line:-1
to the photos navigation bar button


50
00:02:54.141 --> 00:02:57.511 line:-2
to let people know
the photos view is loading.


51
00:02:57.544 --> 00:03:02.916 line:-2
Accessibility Notifications are
a new API that can help us do this.


52
00:03:02.950 --> 00:03:08.155 line:-2
Accessibility notifications provide
a unified, multi-platform way


53
00:03:08.188 --> 00:03:11.325 line:-2
to create announcements
to convey information


54
00:03:11.358 --> 00:03:14.928 line:-2
to someone using
an assistive technology in your app.


55
00:03:14.962 --> 00:03:19.166 line:-2
Accessibility notifications can be
created for apps running SwiftUI,


56
00:03:19.199 --> 00:03:22.069 line:-1
UIKit, and AppKit.


57
00:03:22.102 --> 00:03:26.073 line:-2
With AccessibilityNotification,
you can send announcement,


58
00:03:26.106 --> 00:03:30.410 line:-2
layout change, screen change,
and page scroll notifications


59
00:03:30.444 --> 00:03:32.579 line:-1
in a way that is native to Swift.


60
00:03:32.613 --> 00:03:35.482 line:-2
When the photos tool bar button
is pressed,


61
00:03:35.516 --> 00:03:37.317 line:-1
I want to post an announcement.


62
00:03:37.351 --> 00:03:39.820 line:-1
VoiceOver: Photos, button.


63
00:03:39.853 --> 00:03:43.257 line:-1
Photos. Loading photos view.


64
00:03:43.290 --> 00:03:47.794 line:-2
Allison: We can post the announcement
in the action for the toolbar button.


65
00:03:47.828 --> 00:03:53.000 line:-2
To create the announcement, we can use
AccessibilityNotification.Announcement


66
00:03:53.033 --> 00:03:57.571 line:-2
with "Loading Photos View"
as the string parameter.


67
00:03:57.604 --> 00:04:01.141 line:-2
In the app,
I also want to create three announcements


68
00:04:01.175 --> 00:04:04.578 line:-2
when the camera navigation
bar button is pressed.


69
00:04:04.611 --> 00:04:07.281 line:-1
The first announcement, "Opening Camera,"


70
00:04:07.314 --> 00:04:11.718 line:-2
and third announcement,
"Camera Active," are the most important.


71
00:04:11.752 --> 00:04:15.656 line:-2
Let's look at VoiceOver's current
speech pattern for the announcements.


72
00:04:15.689 --> 00:04:18.425 line:-2
Notice how the second announcement,
"Camera Loading,"


73
00:04:18.458 --> 00:04:20.727 line:-1
interrupts "Opening Camera".


74
00:04:20.761 --> 00:04:24.298 line:-1
VoiceOver: Camera, button.


75
00:04:24.331 --> 00:04:26.934 line:-1
Done. Open--camera--camera active.


76
00:04:26.967 --> 00:04:29.369 line:-1
Allison: Now, in SwiftUI and UIKit,


77
00:04:29.403 --> 00:04:32.005 line:-2
you can also set
an announcement's priority,


78
00:04:32.039 --> 00:04:35.576 line:-2
which lets you set the importance
of an announcement queued to be spoken


79
00:04:35.609 --> 00:04:37.778 line:-1
by assistive technologies.


80
00:04:37.811 --> 00:04:41.448 line:-2
This gives you more control over
which announcements people need to hear,


81
00:04:41.481 --> 00:04:44.751 line:-2
versus announcements that can be ignored
if not spoken in time.


82
00:04:44,785 --> 00:04:48,088
You can specify
the importance of this information


83
00:04:48,121 --> 00:04:50,791
using one of three
announcement priorities:


84
00:04:50,824 --> 00:04:53,694
high, default, and low.


85
00:04:53,727 --> 00:04:57,164
High priority announcements
can interrupt other speech


86
00:04:57,197 --> 00:04:59,967
and cannot be interrupted once started.


87
00:05:00,000 --> 00:05:03,637
Default priority announcements
can interrupt existing speech


88
00:05:03,670 --> 00:05:07,307
but are interruptible if a new
speech utterance is started.


89
00:05:07,341 --> 00:05:10,110
Low priority announcements are queued
and spoken


90
00:05:10,143 --> 00:05:12,412
when other speech utterances
have completed,


91
00:05:12,446 --> 00:05:14,882
if no new announcements have started.


92
00:05:14.915 --> 00:05:18.051 line:-2
In the photos app,
we can use announcement priority


93
00:05:18.085 --> 00:05:20.420 line:-1
to fix the interrupting strings.


94
00:05:20.454 --> 00:05:23.991 line:-2
We have three announcements
made from attributed strings.


95
00:05:24.024 --> 00:05:26.760 line:-2
In SwiftUI, we will set the priority
on the


96
00:05:26.793 --> 00:05:31.198 line:-2
accessibilitySpeechAnnouncementPriority
string property.


97
00:05:31.231 --> 00:05:33.867 line:-1
Our second announcement, "Camera Loading,"


98
00:05:33.901 --> 00:05:38.105 line:-2
is the least important,
so we give it a low priority.


99
00:05:38.138 --> 00:05:42.309 line:-2
The last announcement, "Camera Active,"
is the most important,


100
00:05:42.342 --> 00:05:45.812 line:-1
so we want it to have a high priority.


101
00:05:45.846 --> 00:05:50.918 line:-2
Next, we will pass the attributed strings
to the AccessibilityNotification.


102
00:05:50.951 --> 00:05:54.188 line:-2
First, we will dispatch
the default priority announcement,


103
00:05:54.221 --> 00:05:57.157 line:-2
then the low priority,
then the high priority.


104
00:05:57.191 --> 00:06:00.727 line:-2
Now note how the low priority announcement
does not interrupt


105
00:06:00.761 --> 00:06:04.164 line:-2
the default priority announcement,
while the high priority announcement


106
00:06:04.198 --> 00:06:07.234 line:-2
does interrupt
the default and low announcements.


107
00:06:07.267 --> 00:06:10.537 line:-1
VoiceOver: Camera, button.


108
00:06:10.571 --> 00:06:13.307 line:-1
Done. Opening camera--camera active.


109
00:06:13.340 --> 00:06:16.076 line:-2
Allison: We can achieve
the same announcement order in UIKit.


110
00:06:16.109 --> 00:06:21.949 line:-2
We set the announcement priorities
as NSAttributedString key value pairs.


111
00:06:21.982 --> 00:06:23.317 line:-1
We use the key


112
00:06:23.350 --> 00:06:27.054 line:-2
UIAccessibilitySpeechAttribute
AnnouncementPriority


113
00:06:27.087 --> 00:06:31.158 line:-2
and set the value
to the proper UIAccessibilityPriority.


114
00:06:31.191 --> 00:06:35.629 line:-2
Then we pass the attributes
to the attributed string initializer.


115
00:06:35.662 --> 00:06:37.731 line:-1
Back in the app, there is an image view


116
00:06:37.764 --> 00:06:41.802 line:-2
that people can physically touch
or pinch to zoom in and out.


117
00:06:41.835 --> 00:06:44.104 line:-1
With an assistive technology turned on,


118
00:06:44.137 --> 00:06:48.442 line:-2
this physical touch or pinch gesture
can be hard to accomplish.


119
00:06:48.475 --> 00:06:52.913 line:-2
Now, with the accessibility zoom action,
people can zoom in and out


120
00:06:52.946 --> 00:06:55.949 line:-2
on UI elements
when assistive technologies are enabled.


121
00:06:55.983 --> 00:06:58.418 line:-1
We will add the zoom action on the image.


122
00:06:58.452 --> 00:07:03.056 line:-2
The image is in the body
of the ZoomingImageView struct.


123
00:07:03.090 --> 00:07:07.794 line:-2
We first add
the accessibilityZoomAction modifier.


124
00:07:07.828 --> 00:07:10.831 line:-2
Then, based on the direction
of the zoom action,


125
00:07:10.864 --> 00:07:13.000 line:-1
we will zoom the content in or out


126
00:07:13.033 --> 00:07:16.670 line:-2
and post an accessibility notification
announcement.


127
00:07:16.703 --> 00:07:20.941 line:-2
Now let's explore VoiceOver's
zoom capabilities with these changes.


128
00:07:20.974 --> 00:07:22.943 line:-1
VoiceOver: Zooming image view, image.


129
00:07:22.976 --> 00:07:24.545 line:-1
Zoom.


130
00:07:24.578 --> 00:07:27.181 line:-1
2x zoom. 3x zoom.


131
00:07:27.214 --> 00:07:30.150 line:-1
4x zoom. 3x zoom.


132
00:07:30.184 --> 00:07:33.453 line:-2
Allison: We can also add
the zoom trait and action in UIKit.


133
00:07:33.487 --> 00:07:37.524 line:-2
We will first create a zoom view
which will contain the image view.


134
00:07:37.558 --> 00:07:39.893 line:-1
Next, we will add the supportsZoom trait


135
00:07:39.927 --> 00:07:43.463 line:-2
to the zoom view
alongside the image trait.


136
00:07:43.497 --> 00:07:46.934 line:-2
We then implement
accessibilityZoomInAtPoint


137
00:07:46.967 --> 00:07:51.305 line:-2
and accessibilityZoomOutAtPoint,
each of which return a boolean


138
00:07:51.338 --> 00:07:54.641 line:-1
to indicate zooming success or failure.


139
00:07:54.675 --> 00:07:58.111 line:-2
In each of these methods,
we update the zoom scale


140
00:07:58.145 --> 00:08:01.348 line:-2
and post an announcement
to indicate the zoom change.


141
00:08:01.381 --> 00:08:05.619 line:-2
In our image filter app,
we can also create a short sound


142
00:08:05.652 --> 00:08:09.089 line:-2
to add to the image
by playing the small piano keys.


143
00:08:09.122 --> 00:08:13.026 line:-2
People can create custom tones
for the image using the keys.


144
00:08:13.060 --> 00:08:17.598 line:-1
[piano notes play]


145
00:08:17.631 --> 00:08:20.834 line:-2
Let's examine the current
VoiceOver experience with these sounds


146
00:08:20.868 --> 00:08:22.569 line:-1
as I try to create a tone.


147
00:08:23.237 --> 00:08:26.240 line:-1
[VoiceOver reading, piano keys playing]


148
00:08:36.316 --> 00:08:41.088 line:-2
VoiceOver speaks the key label
and plays the VoiceOver activation sound


149
00:08:41.121 --> 00:08:44.024 line:-1
every time the element is touched,


150
00:08:44.057 --> 00:08:48.462 line:-2
which makes it difficult
to quickly press the keys in succession.


151
00:08:48.495 --> 00:08:53.467 line:-2
Typically, VoiceOver provides
a safe exploration experience,


152
00:08:53.500 --> 00:08:57.004 line:-2
but sometimes, people need
to directly interact with your app


153
00:08:57.037 --> 00:08:58.872 line:-1
to use it properly.


154
00:08:58.906 --> 00:09:00.908 line:-1
For our app, it would be much better


155
00:09:00.941 --> 00:09:03.577 line:-2
if people could directly touch
the piano keys


156
00:09:03.610 --> 00:09:05.846 line:-1
without extra speech and sounds.


157
00:09:05.879 --> 00:09:09.683 line:-2
This is a great time to adopt
the direct touch trait,


158
00:09:09.716 --> 00:09:13.921 line:-2
named allowsDirectInteraction,
on our view.


159
00:09:13.954 --> 00:09:17.724 line:-2
Accessibility direct touch areas
will let you specify


160
00:09:17.758 --> 00:09:21.028 line:-2
a region of the screen
where VoiceOver gestures pass


161
00:09:21.061 --> 00:09:23.297 line:-1
directly through to the app.


162
00:09:23.330 --> 00:09:26.767 line:-2
In the default state,
VoiceOver both speaks


163
00:09:26.800 --> 00:09:30.537 line:-2
and activates the content
of the direct touch element.


164
00:09:30.571 --> 00:09:34.308 line:-2
For our app, though, it would be great
if VoiceOver would be silent


165
00:09:34.341 --> 00:09:38.312 line:-2
when someone touches a piano key
so they can immediately hear the tone


166
00:09:38.345 --> 00:09:42.049 line:-2
without having to activate
the piano key element first.


167
00:09:42.082 --> 00:09:45.586 line:-2
In addition
to the allowsDirectInteraction trait,


168
00:09:45.619 --> 00:09:50.123 line:-2
there are now two new direct
touch options that will be supported.


169
00:09:50.157 --> 00:09:54.895 line:-2
First, you can specify silentOnTouch
to ensure VoiceOver is silent


170
00:09:54.928 --> 00:09:57.164 line:-1
when touching the direct touch area,


171
00:09:57.197 --> 00:10:00.834 line:-2
so that your app can make
its own audio feedback.


172
00:10:00.868 --> 00:10:04.705 line:-1
Second, you can specify requiresActivation


173
00:10:04.738 --> 00:10:07.608 line:-2
to make the direct touch area
require VoiceOver


174
00:10:07.641 --> 00:10:11.912 line:-2
to activate the element
before touch passthrough happens.


175
00:10:11.945 --> 00:10:15.415 line:-2
This is the code snippet
for the KeyboardKeyView.


176
00:10:15.449 --> 00:10:19.586 line:-2
Each key is a rectangle
that plays a specified sound.


177
00:10:19.620 --> 00:10:23.757 line:-2
To fix the issue with VoiceOver
speaking over the tone every time,


178
00:10:23.790 --> 00:10:29.263 line:-2
we have set the direct touch option
for the button to silent on touch.


179
00:10:29.296 --> 00:10:33.600 line:-2
Now, the correct tone plays
once VoiceOver reaches the key button


180
00:10:33.634 --> 00:10:37.838 line:-2
without interference
from VoiceOver's speech.


181
00:10:37.871 --> 00:10:43.210 line:-1
[keys playing]


182
00:10:43.243 --> 00:10:47.247 line:-2
We can also add
the new direct touch options in UIKit.


183
00:10:47.281 --> 00:10:51.318 line:-2
We can create the key button
as a UIButton.


184
00:10:51.351 --> 00:10:54.421 line:-2
Next, we will add
the allowsDirectInteraction


185
00:10:54.454 --> 00:10:56.523 line:-1
accessibility trait.


186
00:10:56.557 --> 00:10:58.592 line:-1
This trait is required when setting


187
00:10:58.625 --> 00:11:02.196 line:-2
accessibility direct touch options
in UIKit.


188
00:11:02.229 --> 00:11:05.465 line:-2
Finally, we will add
the silentOnTouch option


189
00:11:05.499 --> 00:11:08.235 line:-1
for accessibilityDirectTouchOptions.


190
00:11:08.268 --> 00:11:12.706 line:-2
With the accessibility toggle trait,
announcement priority, zoom trait,


191
00:11:12.739 --> 00:11:15.576 line:-2
and direct touch options,
you have more control


192
00:11:15.609 --> 00:11:20.147 line:-2
over the ways assistive technologies
interact with your SwiftUI and UIKit apps.


193
00:11:20.180 --> 00:11:26.253 line:-2
Next, let's talk about the accessibility
content Shape kind in SwiftUI.


194
00:11:26.286 --> 00:11:29.556 line:-2
This kind sets
an accessibility element's path


195
00:11:29.590 --> 00:11:34.061 line:-2
and controls the appearance
of accessibility elements on the screen.


196
00:11:34.094 --> 00:11:37.097 line:-2
Previously,
the interaction content shape kind


197
00:11:37.130 --> 00:11:40.734 line:-2
changed the accessibility shape
and hit testing shape.


198
00:11:40.767 --> 00:11:43.537 line:-2
Now there is an accessibility
content shape kind


199
00:11:43.570 --> 00:11:45.806 line:-2
which will not impact
the hit testing shape


200
00:11:45.839 --> 00:11:49.142 line:-2
and only impact the shape
of accessibility content.


201
00:11:49.176 --> 00:11:52.646 line:-2
When an element needs a custom shape,
such as a circle,


202
00:11:52.679 --> 00:11:58.185 line:-2
the computed accessibility cursor visuals
may obstruct other items on the screen.


203
00:11:58,218 --> 00:12:02,456
In this example,
the accessibility path is a square,


204
00:12:02,489 --> 00:12:05,626
which does not match
the red circular content.


205
00:12:05.659 --> 00:12:10.063 line:-2
When the Accessibility Content Shape kind
is applied to a view,


206
00:12:10.097 --> 00:12:13.066 line:-2
it will update the underlying
accessibility geometry


207
00:12:13.100 --> 00:12:16.503 line:-2
for the element
with the shape provided by the modifier.


208
00:12:16.537 --> 00:12:19.273 line:-2
This lets you quickly update
an element's path


209
00:12:19.306 --> 00:12:22.543 line:-1
with an existing SwiftUI Shape.


210
00:12:22.576 --> 00:12:26.213 line:-2
I have created the circle button
using a circle image.


211
00:12:26.246 --> 00:12:29.483 line:-2
We can set the frame
and the accessibility label


212
00:12:29.516 --> 00:12:32.586 line:-1
to match the color, red.


213
00:12:32.619 --> 00:12:36.790 line:-2
Finally, we can add
the content shape modifier to my view


214
00:12:36.823 --> 00:12:39.893 line:-2
with the accessibility type
and Circle as the shape.


215
00:12:41,361 --> 00:12:44,698
Now the accessibility path
correctly matches


216
00:12:44,731 --> 00:12:47,601
the circular shape
of the red color button.


217
00:12:47.634 --> 00:12:52.372 line:-2
Finally, let's discuss an addition
coming to UIKit accessibility,


218
00:12:52.406 --> 00:12:55.108 line:-1
block based attribute setters.


219
00:12:55.142 --> 00:12:58.545 line:-2
In the photo editing app,
I want the accessibility value


220
00:12:58.579 --> 00:13:03.383 line:-2
for the image view to represent whether
the photo is filtered or not filtered.


221
00:13:03.417 --> 00:13:05.586 line:-1
Now there is an easy way


222
00:13:05.619 --> 00:13:08.755 line:-2
to keep the underlying
accessibility attributes


223
00:13:08.789 --> 00:13:13.093 line:-2
for my views always in line
with the presented UI.


224
00:13:13.126 --> 00:13:17.297 line:-2
I can do this
with accessibility block based setters.


225
00:13:17.331 --> 00:13:22.870 line:-2
The new accessibility block API lets you
provide a closure that is evaluated


226
00:13:22.903 --> 00:13:28.408 line:-2
whenever the attribute is needed
rather than storing the value directly.


227
00:13:28.442 --> 00:13:32.546 line:-2
The closure is re-evaluated
every time a view is referenced


228
00:13:32.579 --> 00:13:36.083 line:-1
or accessed by an assistive technology.


229
00:13:36.116 --> 00:13:38.185 line:-1
We can simplify things with a closure,


230
00:13:38.218 --> 00:13:41.688 line:-2
created in the viewDidLoad method
for my view controller.


231
00:13:41.722 --> 00:13:46.260 line:-2
We set the accessibilityValueBlock
property on the zoomView


232
00:13:46.293 --> 00:13:51.164 line:-2
to keep the value updated based on
whether or not the image is filtered.


233
00:13:51.198 --> 00:13:54.168 line:-2
The closure must return
the correct type for this attribute,


234
00:13:54.201 --> 00:13:56.270 line:-1
which is an optional String.


235
00:13:56.303 --> 00:13:58.739 line:-2
Notice that we are using
a weak reference to self


236
00:13:58.772 --> 00:14:00.707 line:-1
to avoid a retain cycle.


237
00:14:00.741 --> 00:14:03.844 line:-2
Blocks are great to add
at the beginning of a class life cycle,


238
00:14:03.877 --> 00:14:09.149 line:-2
to start up a class with the proper
accessibility attribute information.


239
00:14:09.183 --> 00:14:13.487 line:-2
Now accessibility attributes
are much easier to maintain.


240
00:14:13.520 --> 00:14:18.192 line:-2
Every time someone moves
the VoiceOver cursor to a new element,


241
00:14:18.225 --> 00:14:21.428 line:-2
VoiceOver first looks for attributes
set with a closure


242
00:14:21.461 --> 00:14:23.597 line:-1
and re-evaluates the closure.


243
00:14:23.630 --> 00:14:26.633 line:-1
[VoiceOver reading]


244
00:14:35.409 --> 00:14:37.344 line:-1
When you are building custom UI,


245
00:14:37.377 --> 00:14:40.948 line:-2
consider integrating accessibility traits
like toggle


246
00:14:40.981 --> 00:14:45.919 line:-2
and features like direct touch interaction
to increase usability for everyone.


247
00:14:47.354 --> 00:14:52.092 line:-2
Second, think about your views
with custom shapes in SwiftUI.


248
00:14:52.125 --> 00:14:54.995 line:-2
If the accessibility shapes
do not match the UI,


249
00:14:55.028 --> 00:14:59.433 line:-2
consider introducing
a custom accessibility shape.


250
00:14:59.466 --> 00:15:02.102 line:-1
And finally, I encourage you to evaluate


251
00:15:02.135 --> 00:15:04.638 line:-2
how you are setting
your accessibility attributes


252
00:15:04.671 --> 00:15:08.509 line:-2
and identify if block based setters
make more sense in your app.


253
00:15:08.542 --> 00:15:12.546 line:-2
At Apple, we believe
accessibility is a human right.


254
00:15:12.579 --> 00:15:14.515 line:-1
With your help, we can create technology


255
00:15:14.548 --> 00:15:18.018 line:-2
that enhances and empowers
everyone's lives.


256
00:15:18.051 --> 00:15:22.756 line:-2
These new API additions are a great way
to increase the usability of your app


257
00:15:22.789 --> 00:15:25.792 line:-2
for people who rely
on assistive technologies,


258
00:15:25.826 --> 00:15:30.197 line:-2
and I encourage you to use all of them
to build amazing, accessible apps.


259
00:15:30.230 --> 00:15:31.732 line:-1
Thanks for watching.

