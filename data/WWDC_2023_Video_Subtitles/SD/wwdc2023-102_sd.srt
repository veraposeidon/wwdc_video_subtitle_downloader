2
00:00:00,334 --> 00:00:10,344 line:-1
♪ ♪


3
00:00:17,351 --> 00:00:22,356 line:-1
♪ ♪


4
00:00:23,457 --> 00:00:26,627 line:-2
Darin Adler: Welcome to
Platforms State of the Union 2023!


5
00:00:26,660 --> 00:00:29,496 line:0
We're excited to share more
about how you can take advantage


6
00:00:29,530 --> 00:00:31,999 line:0
of what's coming in our new releases.


7
00:00:32,032 --> 00:00:34,868 line:0
Like interactive widgets
on iOS and iPadOS,


8
00:00:34,902 --> 00:00:37,704 line:-2
which give you more ways
to surface your apps across the system,


9
00:00:37,738 --> 00:00:40,107 line:-1
a new widget experience on macOS,


10
00:00:40,140 --> 00:00:42,809 line:-1
the beautiful design of watchOS 10,


11
00:00:42,843 --> 00:00:44,945 line:-1
Continuity Camera on tvOS,


12
00:00:44,978 --> 00:00:49,316 line:-2
and, of course,
an entirely new platform with visionOS.


13
00:00:49,349 --> 00:00:52,853 line:-2
Platforms State of the Union is a chance
to learn about some of the most exciting,


14
00:00:52,886 --> 00:00:56,723 line:-2
impactful, and important developments
from this year's releases.


15
00:00:56,757 --> 00:01:00,260 line:-2
And what we have for you
delivers on all those fronts.


16
00:01:00,294 --> 00:01:02,629 line:-2
Before we dive in,
I want to talk for a moment


17
00:01:02,663 --> 00:01:06,099 line:-2
about what makes a great platform
and great apps.


18
00:01:06,133 --> 00:01:09,870 line:-2
A great platform is more than a collection
of frameworks and technologies.


19
00:01:09,903 --> 00:01:14,174 line:-2
It's key ingredients that come together
to make something truly special.


20
00:01:14,208 --> 00:01:17,277 line:-2
It's the combination of a language,
frameworks,


21
00:01:17,311 --> 00:01:21,114 line:-2
tools, and services created
to work seamlessly together,


22
00:01:21,148 --> 00:01:25,452 line:-2
so the most natural way
to write your code is also the best.


23
00:01:25,485 --> 00:01:28,655 line:-2
A rich set of APIs to help you
create amazing experiences


24
00:01:28,689 --> 00:01:30,390 line:-1
that deeply integrate with the system,


25
00:01:30,424 --> 00:01:32,326 line:-1
whether your app is open or not.


26
00:01:32,359 --> 00:01:34,728 line:-2
Thoughtful ways for you
to safely take advantage


27
00:01:34,761 --> 00:01:38,298 line:-2
of cutting-edge hardware technologies
across a wide range of products.


28
00:01:38,332 --> 00:01:42,102 line:-2
And finally, a great platform evolves
to meet new challenges


29
00:01:42,135 --> 00:01:44,905 line:-2
so you're able to meet the needs of users
right when they emerge.


30
00:01:44,938 --> 00:01:48,942 line:-2
The more than 300 frameworks
on our platforms are building blocks,


31
00:01:48,976 --> 00:01:51,512 line:-2
enabling you to get right to
what's innovative, creative,


32
00:01:51,545 --> 00:01:53,480 line:-1
and different about your app.


33
00:01:53,514 --> 00:01:55,716 line:-2
They go further than just
saving you some time


34
00:01:55,749 --> 00:01:57,551 line:-1
or helping you add a specific feature.


35
00:01:57,584 --> 00:02:00,020 line:-2
When you use these platform foundations
with purpose,


36
00:02:00,053 --> 00:02:03,524 line:-2
your app fits in beautifully
and extends the system itself.


37
00:02:03,557 --> 00:02:06,126 line:-1
And that's the path to a great app.


38
00:02:06,159 --> 00:02:08,595 line:-2
A great app elevates the right information
to the user


39
00:02:08,629 --> 00:02:10,597 line:-1
at the right time in the right place.


40
00:02:10,631 --> 00:02:14,101 line:-2
That place could be the Share Sheet,
right on the Lock Screen,


41
00:02:14,134 --> 00:02:17,371 line:-2
Spotlight, Siri,
or any number of other places.


42
00:02:17,404 --> 00:02:21,575 line:-2
A great app takes advantage of hardware
like a new sensor or a powerful chip


43
00:02:21,608 --> 00:02:25,612 line:-2
with help from frameworks that put
those capabilities at your fingertips.


44
00:02:25,646 --> 00:02:28,649 line:-2
And a great app does things
that are so important to get right,


45
00:02:28,682 --> 00:02:32,920 line:-2
like creating safe, accessible products
that respect a user's privacy.


46
00:02:32,953 --> 00:02:36,723 line:-2
Our platforms and your apps come together
to deliver all of this


47
00:02:36,757 --> 00:02:40,327 line:-2
with the consistency and reliability
that people value and expect.


48
00:02:40,360 --> 00:02:42,629 line:-1
And this is a big deal.


49
00:02:42,663 --> 00:02:46,300 line:-2
We're incredibly passionate
about great platforms and great apps.


50
00:02:46,333 --> 00:02:48,268 line:-1
Users can tell the difference they make.


51
00:02:48,302 --> 00:02:51,972 line:-2
The shared foundations of iOS,
iPadOS, macOS,


52
00:02:52,005 --> 00:02:56,844 line:-2
tvOS, watchOS, and now visionOS
form a cohesive ecosystem


53
00:02:56,877 --> 00:02:59,379 line:-2
that allow you to deliver your apps
across the full range


54
00:02:59,413 --> 00:03:01,915 line:-1
of Apple platforms and products.


55
00:03:01,949 --> 00:03:04,785 line:-1
Your apps are key to this ecosystem.


56
00:03:04,818 --> 00:03:07,387 line:-2
They empower people
as they go about their day


57
00:03:07,421 --> 00:03:12,759 line:-2
with easy-to-use experiences that move
seamlessly from one device to another.


58
00:03:12,793 --> 00:03:16,396 line:-2
At Apple, we often talk about building
the things we want to use ourselves


59
00:03:16,430 --> 00:03:19,833 line:-2
and it couldn't be more true
than with our approach to our platforms.


60
00:03:19,867 --> 00:03:21,535 line:-1
Because we're developers too!


61
00:03:21,568 --> 00:03:25,172 line:-2
We use the same language, tools,
and frameworks here at Apple.


62
00:03:26,139 --> 00:03:28,242 line:-1
So today, we have a lot to cover.


63
00:03:28,275 --> 00:03:31,478 line:-2
We'll start with the latest developments
in Swift and SwiftUI,


64
00:03:31,512 --> 00:03:33,547 line:-2
and how you can use them
across all of our platforms


65
00:03:33,580 --> 00:03:36,183 line:-1
to create amazing experiences.


66
00:03:36,216 --> 00:03:38,519 line:-2
We'll talk about how you can
leverage hardware features,


67
00:03:38,552 --> 00:03:43,257 line:-2
and also how you can prioritize values
in the experiences you build.


68
00:03:43,290 --> 00:03:44,892 line:-2
And we'll walk you through
the improvements


69
00:03:44,925 --> 00:03:47,861 line:-2
to the powerful tools
we all use every day.


70
00:03:47,895 --> 00:03:49,596 line:-1
Finally, we'll take a deep dive


71
00:03:49,630 --> 00:03:53,000 line:-2
into the technologies
of our latest platform, visionOS,


72
00:03:53,033 --> 00:03:55,469 line:-2
and show you how you can build
the next generation of apps


73
00:03:55,502 --> 00:03:57,504 line:-1
for Apple Vision Pro.


74
00:03:57,538 --> 00:04:00,207 line:-2
To kick things off,
I'll turn it over to Holly


75
00:04:00,240 --> 00:04:02,075 line:-1
to talk about what's new in Swift.


76
00:04:03,944 --> 00:04:10,484 line:0
Holly Borla: The foundation for so many of
the APIs that you use every day is Swift.


77
00:04:10,517 --> 00:04:13,053 line:-1
It's fast, modern, and safe,


78
00:04:13,086 --> 00:04:15,155 line:-1
guiding you toward code that's efficient,


79
00:04:15,189 --> 00:04:17,991 line:-1
expressive, and correct.


80
00:04:18,025 --> 00:04:23,063 line:-2
APIs allow you to take advantage
of libraries and platform features,


81
00:04:23,096 --> 00:04:27,034 line:-2
and create experiences
that are unique to your app.


82
00:04:27,067 --> 00:04:30,003 line:-1
But some APIs can be hard to use,


83
00:04:30,037 --> 00:04:34,508 line:-2
requiring you to write a lot
of boilerplate code just to get started.


84
00:04:34,541 --> 00:04:38,245 line:-2
That's why Swift is unlocking
a new kind of API


85
00:04:38,278 --> 00:04:41,515 line:-2
that's easier to use
and easier to get right


86
00:04:41,548 --> 00:04:44,952 line:-1
with the introduction of macros.


87
00:04:44,985 --> 00:04:47,821 line:-1
And these macros are done the Swift way.


88
00:04:47,855 --> 00:04:52,392 line:-2
A macro is an annotation
that uses the structure of your code


89
00:04:52,426 --> 00:04:55,896 line:-2
to generate new code
that's built with your project.


90
00:04:55,929 --> 00:04:59,867 line:-2
Macros can either be attached
as attributes to your code,


91
00:04:59,900 --> 00:05:03,437 line:-2
or they can be freestanding,
spelled with the hash sign.


92
00:05:03,470 --> 00:05:07,307 line:-2
Macros make APIs feel
like they're part of the language,


93
00:05:07,341 --> 00:05:12,980 line:-2
and there are so many ways to start
using a new API with just an annotation.


94
00:05:13,013 --> 00:05:15,449 line:-1
Macros come to life in Xcode,


95
00:05:15,482 --> 00:05:19,052 line:-2
where the generated code
feels like it's part of your project.


96
00:05:19,086 --> 00:05:20,787 line:-1
Let me show you.


97
00:05:20,821 --> 00:05:25,158 line:-2
I created a URL macro
that checks for valid URL strings.


98
00:05:25,192 --> 00:05:27,928 line:-2
Because macros
generate regular Swift code,


99
00:05:27,961 --> 00:05:33,100 line:-2
I can use the "Expand Macro" feature
in Xcode to see exactly what they do.


100
00:05:33,133 --> 00:05:35,169 line:-1
This macro looks really simple.


101
00:05:35,202 --> 00:05:39,273 line:-2
It calls the URL initializer
and force-unwraps the result.


102
00:05:39,306 --> 00:05:41,909 line:-1
But the URL macro does more than that.


103
00:05:41,942 --> 00:05:46,313 line:-2
It checks that the string is a valid URL
at compile-time.


104
00:05:46,346 --> 00:05:49,616 line:-2
For example,
URLs can't have spaces,


105
00:05:49,650 --> 00:05:53,587 line:-2
so if I add one,
the macro provides a custom error message


106
00:05:53,620 --> 00:05:58,058 line:-2
and a fix-it to automatically remove
the space from the string.


107
00:05:58,091 --> 00:06:01,228 line:-2
This moves what would have been an error
when my app is running,


108
00:06:01,261 --> 00:06:06,533 line:-2
into feedback while I'm writing my code,
so I can fix mistakes right away.


109
00:06:06,567 --> 00:06:09,503 line:-2
All macros have the ability
to provide custom feedback


110
00:06:09,536 --> 00:06:11,939 line:-1
to help you write correct code.


111
00:06:11,972 --> 00:06:14,508 line:-1
Attached macros go even further,


112
00:06:14,541 --> 00:06:18,679 line:-2
because they can add new functionality
to code you already wrote.


113
00:06:18,712 --> 00:06:22,015 line:-2
Let's take a look
at what attached macros can do.


114
00:06:22,049 --> 00:06:26,019 line:-2
I have a function called fetchContent
that performs asynchronous work,


115
00:06:26,053 --> 00:06:27,988 line:-1
and uses completion handlers,


116
00:06:28,021 --> 00:06:30,557 line:-1
but I want to use async/await.


117
00:06:30,591 --> 00:06:33,827 line:-2
Instead of implementing
another fetchContent function,


118
00:06:33,861 --> 00:06:36,730 line:-1
I can attach the AddAsync macro.


119
00:06:36,763 --> 00:06:37,898 line:-1
And that's it!


120
00:06:37,931 --> 00:06:40,200 line:-2
Now, instead of passing in
a completion handler


121
00:06:40,234 --> 00:06:44,471 line:-2
when I call fetchContent,
I can simply await the result.


122
00:06:44,505 --> 00:06:46,440 line:-1
Just like any other API,


123
00:06:46,473 --> 00:06:50,210 line:-2
I can use quick-help on the macro
to see its documentation.


124
00:06:50,244 --> 00:06:53,313 line:-2
But if I want to understand
how this works under the hood,


125
00:06:53,347 --> 00:06:56,316 line:-1
I can set a breakpoint, run my code,


126
00:06:56,350 --> 00:06:58,285 line:-1
step into the async function,


127
00:06:58,318 --> 00:07:02,222 line:-2
and Xcode will expand the macro
right in my source editor.


128
00:07:03,290 --> 00:07:06,727 line:-2
This is really cool,
because there are no secrets.


129
00:07:06,760 --> 00:07:09,663 line:-2
Stepping into an expanded macro
while debugging


130
00:07:09,696 --> 00:07:12,332 line:-1
is a natural way to peek behind the scenes


131
00:07:12,366 --> 00:07:16,236 line:-2
and help me understand
what's happening in my code.


132
00:07:16,270 --> 00:07:18,405 line:-1
You can write your own macros,


133
00:07:18,438 --> 00:07:22,543 line:-2
so you can extend the language in ways
that were previously only possible


134
00:07:22,576 --> 00:07:25,712 line:-2
by implementing features
in the Swift compiler.


135
00:07:25,746 --> 00:07:28,482 line:-1
Because Swift is developed in open source,


136
00:07:28,515 --> 00:07:30,517 line:-1
developers are already using macros


137
00:07:30,551 --> 00:07:33,954 line:-2
to build some of the most commonly
requested language features,


138
00:07:33,987 --> 00:07:38,125 line:-2
including automatically generating
rich descriptions of assertion failures,


139
00:07:38,158 --> 00:07:41,662 line:-2
providing customizable
default protocol conformances,


140
00:07:41,695 --> 00:07:43,997 line:-1
and the list continues to grow.


141
00:07:44,031 --> 00:07:48,902 line:-2
You'll also see macros used
throughout many of this year's new APIs.


142
00:07:48,936 --> 00:07:51,839 line:-2
You can benefit
from community-authored macros,


143
00:07:51,872 --> 00:07:55,642 line:-2
or share your own macros with others,
through Swift packages.


144
00:07:56,977 --> 00:07:59,213 line:-1
Language advancements, like macros,


145
00:07:59,246 --> 00:08:03,250 line:-2
enable Swift to be adopted
in more projects than ever before.


146
00:08:04,051 --> 00:08:08,355 line:-2
Let's talk about all of your code
that isn't written in Swift.


147
00:08:08,388 --> 00:08:12,793 line:-2
Since its inception, Swift has provided
bi-directional interoperability


148
00:08:12,826 --> 00:08:14,995 line:-1
with C and Objective-C.


149
00:08:15,028 --> 00:08:20,234 line:-2
You can introduce Swift into your projects
a single file or module at a time,


150
00:08:20,267 --> 00:08:23,737 line:-2
without having to rewrite
entire codebases.


151
00:08:23,770 --> 00:08:28,876 line:-2
Swift is extending that interoperability
to C++.


152
00:08:28,909 --> 00:08:34,147 line:-2
Swift-C++ interoperability allows you to
use both languages in the same project


153
00:08:34,181 --> 00:08:36,850 line:-1
without an intermediate bridging layer.


154
00:08:36,884 --> 00:08:39,453 line:-1
You can share your classes, functions,


155
00:08:39,486 --> 00:08:42,556 line:-2
and even template specializations
like vector


156
00:08:42,589 --> 00:08:46,660 line:-2
across both languages
by setting a compiler flag.


157
00:08:46,693 --> 00:08:51,465 line:-2
Using C++ from Swift will eliminate
many sources of undefined behavior


158
00:08:51,498 --> 00:08:52,733 line:-1
in your code,


159
00:08:52,766 --> 00:08:56,103 line:-2
such as using variables
before they're initialized.


160
00:08:56,136 --> 00:08:58,105 line:-1
And bridging is efficient:


161
00:08:58,138 --> 00:09:01,675 line:-2
calls are made natively
between your Swift and C++ code,


162
00:09:01,708 --> 00:09:03,844 line:-1
with minimal overhead.


163
00:09:03,877 --> 00:09:08,448 line:-2
Swift-C++ interoperability
is already in use in open source,


164
00:09:08,482 --> 00:09:13,687 line:-2
helping to transition the Swift compiler
itself from C++ to Swift,


165
00:09:13,720 --> 00:09:18,258 line:-2
and I am so excited to use Swift
to implement Swift.


166
00:09:18,292 --> 00:09:22,029 line:-2
Swift's fundamental goals
of safe and expressive code


167
00:09:22,062 --> 00:09:25,199 line:-2
are ingrained in the libraries
that are built with it.


168
00:09:25,232 --> 00:09:28,869 line:-2
And nowhere is that more apparent
than with SwiftUI.


169
00:09:28,902 --> 00:09:30,737 line:-1
Here's Josh to tell you more.


170
00:09:30,771 --> 00:09:33,507 line:0
Josh Shaffer: The best way
to build modern user interfaces


171
00:09:33,540 --> 00:09:37,711 line:0
across all Apple platforms
is with SwiftUI.


172
00:09:37,744 --> 00:09:41,248 line:-2
SwiftUI lets you write better apps
with less code


173
00:09:41,281 --> 00:09:44,151 line:-2
so you can focus on
what's unique to your app.


174
00:09:44,184 --> 00:09:48,288 line:-2
It also maximizes your ability
to reuse interface code.


175
00:09:48,322 --> 00:09:53,727 line:-2
The healthy habits app Streaks
by Crunchy Bagel is a great example.


176
00:09:53,760 --> 00:09:58,098 line:-2
They first started using SwiftUI
when building widgets for iOS.


177
00:09:58,131 --> 00:10:01,068 line:-2
Then they shared that code
with their watchOS app,


178
00:10:01,101 --> 00:10:04,204 line:-2
and augmented it
with beautiful animations.


179
00:10:04,238 --> 00:10:06,707 line:-2
And now,
they've incorporated the same code


180
00:10:06,740 --> 00:10:09,710 line:-1
back into their original iOS app.


181
00:10:09,743 --> 00:10:14,147 line:-2
Incremental adoption enabled them
to share UI code at their own pace,


182
00:10:14,181 --> 00:10:18,485 line:-2
and see benefits from SwiftUI
in their existing apps.


183
00:10:18,519 --> 00:10:21,288 line:-1
SwiftUI is also incredibly capable,


184
00:10:21,321 --> 00:10:23,624 line:-1
helping to power sophisticated interfaces


185
00:10:23,657 --> 00:10:28,362 line:-2
in apps like the new Logic Pro
and Final Cut Pro for iPad.


186
00:10:28,395 --> 00:10:30,697 line:-1
Adopting SwiftUI in your apps


187
00:10:30,731 --> 00:10:35,068 line:-2
prepares you to build
the next generation of user interfaces.


188
00:10:35,102 --> 00:10:38,772 line:-2
And what you can build with SwiftUI
continues to expand.


189
00:10:38,805 --> 00:10:42,309 line:-2
As always, its new capabilities
in this year's releases


190
00:10:42,342 --> 00:10:46,880 line:-2
focus on areas of high impact
and top developer requests,


191
00:10:46,914 --> 00:10:51,118 line:-2
like new support for Pie Charts
and selection in Swift Charts,


192
00:10:51,151 --> 00:10:53,287 line:-1
a brand new inspector API,


193
00:10:53,320 --> 00:10:58,492 line:-2
expanded MapKit support,
including Overlays, Look Around, and more.


194
00:10:58,525 --> 00:11:01,929 line:-2
These improvements cover
a wide range of functionality,


195
00:11:01,962 --> 00:11:05,933 line:-2
but many of them are focused
on improving animations.


196
00:11:05,966 --> 00:11:07,434 line:-1
This is a key area,


197
00:11:07,467 --> 00:11:11,338 line:-2
because well-designed animations
make your interface easy to use.


198
00:11:11,371 --> 00:11:12,973 line:-1
They can provide feedback


199
00:11:13,006 --> 00:11:15,342 line:-2
so your users know
that something is happening.


200
00:11:15,375 --> 00:11:19,379 line:-2
Or they can confirm that a task
has completed successfully.


201
00:11:19,413 --> 00:11:23,283 line:-2
And that's why SwiftUI has had
advanced features like reversible,


202
00:11:23,317 --> 00:11:27,654 line:-2
interruptible, and cancelable animations
from the beginning.


203
00:11:27,688 --> 00:11:31,792 line:-2
This year,
SwiftUI is taking animations even further.


204
00:11:31,825 --> 00:11:34,161 line:-1
It starts with the way that they move.


205
00:11:34,194 --> 00:11:37,731 line:-2
Animations are often triggered
by a user's gesture.


206
00:11:37,764 --> 00:11:41,768 line:-2
So now, SwiftUI can automatically transfer
the velocity of your gesture


207
00:11:41,802 --> 00:11:43,437 line:-1
into your animation,


208
00:11:43,470 --> 00:11:46,006 line:-1
providing a smooth transition.


209
00:11:46,039 --> 00:11:49,476 line:-2
And animations now default
to a spring-based motion


210
00:11:49,510 --> 00:11:52,713 line:-2
that can be configured
with just two simple parameters:


211
00:11:52,746 --> 00:11:55,115 line:-1
duration and bounce.


212
00:11:55,148 --> 00:12:00,554 line:-2
SwiftUI can also take advantage
of new animated effects in SF Symbols,


213
00:12:00,587 --> 00:12:03,957 line:-2
bringing the iconography
in your apps to life.


214
00:12:03,991 --> 00:12:07,427 line:-2
Finally, when you need to build
multi-part animations,


215
00:12:07,461 --> 00:12:10,831 line:-2
SwiftUI has a new API
called AnimationPhase


216
00:12:10,864 --> 00:12:13,300 line:-2
that helps you build
sophisticated animations


217
00:12:13,333 --> 00:12:15,235 line:-1
with just a few lines of code.


218
00:12:15,269 --> 00:12:19,740 line:-2
I've created a sample app to illustrate
new APIs like AnimationPhase,


219
00:12:19,773 --> 00:12:23,410 line:-2
inspired by the beautiful landscape
of Apple Park.


220
00:12:23,443 --> 00:12:27,714 line:-2
It provides a calming experience
where users can create outdoor spaces


221
00:12:27,748 --> 00:12:30,851 line:-2
and provide food and drink
for visiting birds.


222
00:12:30,884 --> 00:12:32,953 line:-1
To make sure that I never miss a new bird,


223
00:12:32,986 --> 00:12:35,856 line:-2
I've added a reminder
to the top of the list.


224
00:12:35,889 --> 00:12:39,726 line:-2
Let's switch over to a preview
focused on just that view.


225
00:12:39,760 --> 00:12:43,931 line:-2
I really want to make this SF Symbol
stand out by adding some animation.


226
00:12:43,964 --> 00:12:46,834 line:-2
First, I'll add an enum
to define the different states


227
00:12:46,867 --> 00:12:48,936 line:-1
in a custom animation.


228
00:12:48,969 --> 00:12:52,039 line:-2
Next, I'll wrap my view
in a 'PhaseAnimator'.


229
00:12:52,072 --> 00:12:56,543 line:-2
This is a new view that automatically
animates between a set of states.


230
00:12:56,577 --> 00:12:59,246 line:-2
And finally,
I'll scale and rotate the icon


231
00:12:59,279 --> 00:13:02,249 line:-1
in the '.highlighted' animation phase.


232
00:13:02,282 --> 00:13:03,617 line:-1
This is looking good,


233
00:13:03,650 --> 00:13:06,620 line:-2
but I think it would look even better
if the background animated


234
00:13:06,653 --> 00:13:08,021 line:-1
along with the icon,


235
00:13:08,055 --> 00:13:10,557 line:-1
so I'll add a couple more modifiers.


236
00:13:12,960 --> 00:13:15,462 line:-1
Now, for even more advanced animations,


237
00:13:15,495 --> 00:13:19,399 line:-2
this year SwiftUI adds full support
for keyframing.


238
00:13:19,433 --> 00:13:22,169 line:-2
This powerful API
lets me animate anything,


239
00:13:22,202 --> 00:13:26,406 line:-2
including the properties
of the new SwiftUI-based MapKit API.


240
00:13:26,440 --> 00:13:29,676 line:-2
Keyframes let you define the values
of multiple properties


241
00:13:29,710 --> 00:13:32,479 line:-1
at specific times within an animation,


242
00:13:32,513 --> 00:13:36,283 line:-2
and then let SwiftUI interpolate
the intermediate values.


243
00:13:36,316 --> 00:13:39,286 line:-2
Here, I've used keyframes
to animate the map camera


244
00:13:39,319 --> 00:13:42,122 line:-1
visiting different landmarks in Cupertino.


245
00:13:42,155 --> 00:13:45,692 line:-2
Because keyframes let you define
the motion for different properties,


246
00:13:45,726 --> 00:13:48,962 line:-2
we're able to independently animate
the pitch, heading,


247
00:13:48,996 --> 00:13:52,799 line:-2
and position of the camera
to achieve this smooth, continuous motion


248
00:13:52,833 --> 00:13:56,303 line:-1
across Cupertino, and over to Apple Park.


249
00:13:56,336 --> 00:13:59,373 line:-2
Crafting the feel of your app
using animations in SwiftUI


250
00:13:59,406 --> 00:14:01,642 line:-1
has never been easier.


251
00:14:01,675 --> 00:14:04,178 line:-1
Next, let's talk about data flow.


252
00:14:04,211 --> 00:14:06,613 line:-1
When building an app with SwiftUI,


253
00:14:06,647 --> 00:14:09,550 line:-2
you have a few choices
to bring data into your views.


254
00:14:09,583 --> 00:14:14,154 line:-2
SwiftUI offers a set of property wrappers
for managing data local to your view


255
00:14:14,188 --> 00:14:16,523 line:-1
and for referencing data owned elsewhere.


256
00:14:16,557 --> 00:14:18,892 line:-1
This year data flow is getting simpler,


257
00:14:18,926 --> 00:14:22,396 line:-2
letting you focus on
just State and Environment.


258
00:14:22,429 --> 00:14:26,533 line:-2
You may have written code like this
when exposing your model to SwiftUI,


259
00:14:26,567 --> 00:14:28,502 line:-1
conforming to ObservableObject


260
00:14:28,535 --> 00:14:32,206 line:-2
and adding the Published property wrapper
to each property.


261
00:14:32,239 --> 00:14:35,609 line:-2
Swift's new Macro support
makes this much simpler,


262
00:14:35,642 --> 00:14:38,912 line:-2
with a new Observable macro
taking its place.


263
00:14:38,946 --> 00:14:42,749 line:-2
Just annotate a class with @Observable,
and you're done.


264
00:14:42,783 --> 00:14:46,820 line:-2
All publicly visible properties
are published automatically.


265
00:14:46,854 --> 00:14:49,590 line:-2
And when using an Observable
in your SwiftUI views,


266
00:14:49,623 --> 00:14:53,060 line:-2
there's no need to use a property wrapper
to trigger view updates.


267
00:14:53,093 --> 00:14:55,896 line:-2
You just reference
your variables directly.


268
00:14:55,929 --> 00:14:57,297 line:-1
You'll write less code,


269
00:14:57,331 --> 00:15:00,667 line:-2
and get fast and correct behavior
by default.


270
00:15:00,701 --> 00:15:04,905 line:-2
Observable lets SwiftUI track access
at a per-field level,


271
00:15:04,938 --> 00:15:07,140 line:-1
so your view's body is only re-evaluated


272
00:15:07,174 --> 00:15:10,577 line:-2
when the specific properties
used by your view change.


273
00:15:10,611 --> 00:15:13,247 line:-2
If you modify a field
not used by your view,


274
00:15:13,280 --> 00:15:15,749 line:-1
no invalidation will happen at all.


275
00:15:15,782 --> 00:15:18,418 line:-2
So now when you connect your model
to your views,


276
00:15:18,452 --> 00:15:20,287 line:-1
just like with the rest of SwiftUI,


277
00:15:20,320 --> 00:15:23,991 line:-2
the most natural code to write
is also the correct code to write.


278
00:15:24,024 --> 00:15:29,630 line:-2
SwiftUI was the start of a new generation
of frameworks designed for Swift.


279
00:15:29,663 --> 00:15:34,268 line:-2
But the benefits of a Swift-native
framework don't stop with your UI code.


280
00:15:34,301 --> 00:15:37,638 line:-2
Core Data has long provided tools
for data management,


281
00:15:37,671 --> 00:15:41,074 line:-2
but its design was born
of the era of Objective-C,


282
00:15:41,108 --> 00:15:45,179 line:-2
and it doesn't take full advantage
of everything that Swift has to offer.


283
00:15:45,212 --> 00:15:47,915 line:-2
Many of you have been asking
for a Swift-native solution


284
00:15:47,948 --> 00:15:51,018 line:-2
to data management,
designed with first-class support


285
00:15:51,051 --> 00:15:53,320 line:-1
for all of Swift's features.


286
00:15:53,353 --> 00:15:57,024 line:-1
Let me introduce you to SwiftData.


287
00:15:57,057 --> 00:16:00,594 line:-2
SwiftData is a framework
for data modeling and management.


288
00:16:00,627 --> 00:16:03,997 line:-2
It's built on top of Core Data's
proven persistence layer,


289
00:16:04,031 --> 00:16:08,969 line:-2
but with an API completely redesigned
and reimagined for Swift.


290
00:16:09,002 --> 00:16:12,172 line:-1
Like SwiftUI, it focuses entirely on code,


291
00:16:12,206 --> 00:16:14,575 line:-1
with no external file formats.


292
00:16:14,608 --> 00:16:19,780 line:-2
Instead it uses Swift's new macro system
to offer a streamlined API.


293
00:16:19,813 --> 00:16:23,417 line:-2
If you were defining a model in Swift,
you might write code like this,


294
00:16:23,450 --> 00:16:25,419 line:-1
using regular Swift types.


295
00:16:25,452 --> 00:16:27,120 line:-1
To manage this with Core Data,


296
00:16:27,154 --> 00:16:32,226 line:-2
you'd then need to redefine the same model
using the model editor built into Xcode.


297
00:16:32,259 --> 00:16:35,028 line:-2
But with SwiftData,
you just annotate your class


298
00:16:35,062 --> 00:16:36,997 line:-1
with the @Model macro.


299
00:16:37,030 --> 00:16:40,467 line:-2
This single line of code
packs a lot of functionality,


300
00:16:40,501 --> 00:16:43,103 line:-1
like automatically enabling persistence,


301
00:16:43,136 --> 00:16:44,471 line:-1
iCloud synchronization,


302
00:16:44,505 --> 00:16:47,241 line:-1
undo and redo, and more.


303
00:16:47,274 --> 00:16:49,576 line:-2
You can then refine
these automatic behaviors


304
00:16:49,610 --> 00:16:52,346 line:-2
by annotating properties
with additional attributes,


305
00:16:52,379 --> 00:16:56,350 line:-2
like indicating the value
must be unique across all instances.


306
00:16:56,383 --> 00:17:00,687 line:-2
And SwiftData uses the Codable protocol
to understand structs and enums,


307
00:17:00,721 --> 00:17:04,057 line:-2
so you can model your data
with the tools that you already know.


308
00:17:04,091 --> 00:17:07,694 line:-2
These types are fully modeled
in the underlying data store,


309
00:17:07,728 --> 00:17:10,731 line:-2
enabling you to perform
fast and efficient queries,


310
00:17:10,764 --> 00:17:13,100 line:-1
even on complex structured data.


311
00:17:13,133 --> 00:17:18,138 line:-2
And of course, it's simple
to integrate SwiftData with SwiftUI.


312
00:17:18,172 --> 00:17:21,775 line:-2
Now, we started to build our demo app
using the new Observable macro


313
00:17:21,808 --> 00:17:23,844 line:-1
to drive SwiftUI view updates.


314
00:17:23,877 --> 00:17:26,980 line:-2
So my interface updates
as I see new birds,


315
00:17:27,014 --> 00:17:29,583 line:-1
but my edits aren't saved across runs.


316
00:17:29,616 --> 00:17:34,755 line:-2
By importing SwiftData, I'll be able to
add support for persistence really easily.


317
00:17:34,788 --> 00:17:38,559 line:-2
I'll just replace the two
Observable macros on my existing classes


318
00:17:38,592 --> 00:17:42,362 line:-2
with SwiftData's Model macro,
and my model's ready.


319
00:17:42,396 --> 00:17:44,598 line:-1
At the root of my app, I'll add a modifier


320
00:17:44,631 --> 00:17:47,034 line:-1
to set up the SwiftData container.


321
00:17:47,067 --> 00:17:48,936 line:-1
And when I create a new backyard,


322
00:17:48,969 --> 00:17:52,973 line:-2
I'll insert it into the model context
so that it gets persisted.


323
00:17:53,006 --> 00:17:57,144 line:-2
And finally, I'll hook up my BackyardList
view to the persisted data.


324
00:17:57,177 --> 00:18:01,114 line:-2
That's really easy to do
with the new @Query property wrapper.


325
00:18:01,148 --> 00:18:03,183 line:-1
Because we're now loading saved data,


326
00:18:03,217 --> 00:18:07,120 line:-2
I can remove the default sample data
that I used when I was prototyping.


327
00:18:07,154 --> 00:18:11,625 line:-2
Before we test it out, let's also update
a widget that I've been working on.


328
00:18:11,658 --> 00:18:15,329 line:-2
I'll just set up the container
and query the same way.


329
00:18:15,362 --> 00:18:17,598 line:-1
With the app's shared container enabled,


330
00:18:17,631 --> 00:18:20,801 line:-2
SwiftData automatically makes
my data directly accessible


331
00:18:20,834 --> 00:18:23,604 line:-1
by the widget using the same API.


332
00:18:23,637 --> 00:18:25,973 line:-1
Backyards are now persisted by SwiftData,


333
00:18:26,006 --> 00:18:28,675 line:-1
and delivered to the view by @Query.


334
00:18:28,709 --> 00:18:32,012 line:-2
Before we started, I filled the database
with some initial data,


335
00:18:32,045 --> 00:18:34,348 line:-1
so you can already see some bird visitors.


336
00:18:34,381 --> 00:18:36,683 line:-1
And if I add a new backyard object,


337
00:18:36,717 --> 00:18:41,054 line:-2
when I return to the list
it will appear with no additional work.


338
00:18:41,088 --> 00:18:44,091 line:-2
And SwiftData provides more
than just persistence,


339
00:18:44,124 --> 00:18:46,760 line:-2
including things like support
for undo and redo,


340
00:18:46,793 --> 00:18:49,763 line:-1
which just works automatically.


341
00:18:49,796 --> 00:18:54,468 line:-2
And as you can see, my widget is already
showing the backyard that we just created.


342
00:18:54,501 --> 00:18:59,573 line:-2
And that's a look at how easy it is
to save and restore data using SwiftData.


343
00:18:59,606 --> 00:19:02,676 line:-1
SwiftUI and SwiftData work hand-in-hand


344
00:19:02,709 --> 00:19:05,412 line:-2
to help you
build engaging and powerful apps.


345
00:19:05,445 --> 00:19:10,317 line:-2
They form a foundation of a new approach
to development enabled by Swift


346
00:19:10,350 --> 00:19:12,886 line:-2
that helps you spend less time
on boilerplate,


347
00:19:12,920 --> 00:19:15,522 line:-1
and more time building your ideas.


348
00:19:15,556 --> 00:19:18,926 line:-2
Next, Jonathan is going to show you
how to apply these technologies


349
00:19:18,959 --> 00:19:22,262 line:-2
to elevate your app in new ways
across the system.


350
00:19:22,930 --> 00:19:27,301 line:0
Jonathan Thomassian: I'm really excited to
tell you about four new app experiences.


351
00:19:27,334 --> 00:19:30,103 line:-2
With WidgetKit,
you can surface your content


352
00:19:30,137 --> 00:19:32,873 line:-1
in many places across the system.


353
00:19:32,906 --> 00:19:36,977 line:-2
With App Intents, your app's functionality
is integrated into the system


354
00:19:37,010 --> 00:19:38,812 line:-1
even more seamlessly.


355
00:19:38,846 --> 00:19:43,784 line:-2
With TipKit, you can surface
beautiful tips directly in your app.


356
00:19:43,817 --> 00:19:47,821 line:-2
And with AirDrop, you can make it
even more convenient for your users


357
00:19:47,855 --> 00:19:50,157 line:-1
to share content with those nearby.


358
00:19:50,190 --> 00:19:52,826 line:-1
Let's start with WidgetKit.


359
00:19:52,860 --> 00:19:55,829 line:-2
Widgets elevate important information
from your apps,


360
00:19:55,863 --> 00:19:59,066 line:-2
making your app experience
more glanceable and available


361
00:19:59,099 --> 00:20:01,869 line:-1
to your users as they go about their day.


362
00:20:01,902 --> 00:20:03,437 line:-1
Widgets started on the Home Screen,


363
00:20:03,470 --> 00:20:05,506 line:-1
but now they're in many more places


364
00:20:05,539 --> 00:20:10,210 line:-2
to bring your experiences to users
right where and when they need them.


365
00:20:10,244 --> 00:20:14,381 line:-2
And this year,
widgets are becoming even more powerful.


366
00:20:14,414 --> 00:20:18,318 line:-2
Once you rebuild for iOS 17,
with just a few simple changes,


367
00:20:18,352 --> 00:20:22,556 line:-2
your existing widgets will look gorgeous
in StandBy on iPhone.


368
00:20:22,589 --> 00:20:25,292 line:-2
They'll appear scaled up
and drawn out to the edges,


369
00:20:25,325 --> 00:20:29,496 line:-2
with the backgrounds removed,
so they look stunning side by side.


370
00:20:29,530 --> 00:20:32,533 line:-2
They'll also be available
on the Lock Screen on iPad,


371
00:20:32,566 --> 00:20:35,969 line:-2
again drawn to their edges
and with their backgrounds removed.


372
00:20:36,003 --> 00:20:38,572 line:-2
Here, they'll have a uniform
visual appearance


373
00:20:38,605 --> 00:20:41,475 line:-2
so they blend perfectly
with the Lock Screen.


374
00:20:41,508 --> 00:20:45,846 line:-2
And on macOS Sonoma they'll be available
on the Desktop in full color,


375
00:20:45,879 --> 00:20:49,583 line:-2
and then recede into the background
when a window has focus.


376
00:20:49,616 --> 00:20:54,788 line:-2
And you can now make your widgets more
useful with new support for interactivity.


377
00:20:54,821 --> 00:20:58,825 line:-2
Simple actions that can be accomplished
with a tap, like checking off a reminder,


378
00:20:58,859 --> 00:21:01,495 line:-2
can now be handled
directly from your widget.


379
00:21:01,528 --> 00:21:03,864 line:-2
All of these new widget updates
were enabled


380
00:21:03,897 --> 00:21:06,200 line:-1
by their SwiftUI-based architecture.


381
00:21:06,233 --> 00:21:09,736 line:-2
Your widget's code is run asynchronously
to generate content,


382
00:21:09,770 --> 00:21:13,040 line:-2
and the SwiftUI views it builds
are then saved to an archive.


383
00:21:13,073 --> 00:21:17,077 line:-2
Later, when the widget needs to be drawn,
the archive can be loaded,


384
00:21:17,110 --> 00:21:21,882 line:-2
rendered in the background, and then
displayed as part of the system UI.


385
00:21:21,915 --> 00:21:24,852 line:-2
When a user taps a button,
its extension is run again


386
00:21:24,885 --> 00:21:27,888 line:-1
to handle the action and update the UI.


387
00:21:27,921 --> 00:21:30,457 line:-2
This architecture also enables
iPhone widgets


388
00:21:30,490 --> 00:21:32,993 line:-1
to be seamlessly displayed on your Mac.


389
00:21:33,026 --> 00:21:35,162 line:-1
Thanks to the magic of Continuity,


390
00:21:35,195 --> 00:21:38,065 line:-2
the widget archive can be sent
across the network to your Mac,


391
00:21:38,098 --> 00:21:42,236 line:-2
and user interactions can be sent back
to be handled on iPhone.


392
00:21:42,269 --> 00:21:45,606 line:-2
Getting your existing widgets ready
couldn't be easier.


393
00:21:45,639 --> 00:21:47,674 line:-1
Just identify your widget's background


394
00:21:47,708 --> 00:21:51,512 line:-2
and update its padding to use the default
provided by WidgetKit.


395
00:21:51,545 --> 00:21:55,315 line:-2
SwiftUI's stack-based layouts
let the system adapt your widget's color


396
00:21:55,349 --> 00:21:57,918 line:-1
and spacing based on context.


397
00:21:57,951 --> 00:22:01,889 line:-2
Interactivity is also easy to adopt
by adding SwiftUI Buttons


398
00:22:01,922 --> 00:22:03,891 line:-1
or Toggles to your widget.


399
00:22:03,924 --> 00:22:06,793 line:-2
New support for triggering an App Intent
from these controls


400
00:22:06,827 --> 00:22:08,996 line:-1
launches your extension on demand.


401
00:22:09,029 --> 00:22:11,131 line:-1
When your widget's content updates,


402
00:22:11,164 --> 00:22:13,267 line:-1
the system triggers a transition animation


403
00:22:13,300 --> 00:22:16,470 line:-2
that works just like
a Magic Move in Keynote.


404
00:22:16,503 --> 00:22:19,173 line:-2
Moved elements slide
to their new locations,


405
00:22:19,206 --> 00:22:23,076 line:-2
and added or removed elements
fade and blur softly in and out.


406
00:22:23,110 --> 00:22:26,180 line:-2
You can use standard SwiftUI
transition APIs


407
00:22:26,213 --> 00:22:29,850 line:-2
to further customize
and get exactly the effects you want.


408
00:22:29,883 --> 00:22:32,819 line:-2
Let's take a look at how easy it is
to include these new features


409
00:22:32,853 --> 00:22:35,189 line:-1
in an existing widget.


410
00:22:35,222 --> 00:22:39,393 line:-2
Our sample app has a widget that tracks
notable events in our backyard.


411
00:22:39,426 --> 00:22:42,696 line:-2
The first thing I need to do
is identify its background.


412
00:22:42,729 --> 00:22:44,898 line:-2
Here's our widget view
and we can see our background


413
00:22:44,932 --> 00:22:47,267 line:-1
is right here in the ZStack.


414
00:22:47,301 --> 00:22:51,972 line:-2
All I need to do is move it into the new
container background view modifier.


415
00:22:52,005 --> 00:22:55,676 line:-2
And starting in iOS 17,
widget padding is provided for me,


416
00:22:55,709 --> 00:22:58,812 line:-2
so I'll go ahead and remove the padding
I was adding before.


417
00:22:58,846 --> 00:23:00,814 line:-1
Now, thanks to Swift Macros,


418
00:23:00,848 --> 00:23:04,918 line:-2
I can see my entire widget timeline
directly in Xcode previews.


419
00:23:04,952 --> 00:23:08,956 line:-2
Here, at the bottom of the preview canvas,
are all of my timeline entries.


420
00:23:08,989 --> 00:23:13,594 line:-2
And clicking through them shows how
my widget will animate when it updates.


421
00:23:13,627 --> 00:23:16,263 line:-2
This transition is great,
but let's see if we can do something


422
00:23:16,296 --> 00:23:19,166 line:-2
that feels a bit more
like a bird arriving.


423
00:23:19,199 --> 00:23:23,704 line:-2
Just like in my app, I can make use
of standard SwiftUI transitions.


424
00:23:24,771 --> 00:23:28,909 line:-2
Here in the editor, I'll add
a transition modifier to my BirdView.


425
00:23:28,942 --> 00:23:31,912 line:-1
Let's try a leading edge push.


426
00:23:31,945 --> 00:23:34,147 line:-1
That looks great.


427
00:23:34,181 --> 00:23:36,850 line:-2
The updated preview canvas
also makes it easy to see


428
00:23:36,884 --> 00:23:38,886 line:-1
how my widget looks in different contexts,


429
00:23:38,919 --> 00:23:42,623 line:-2
like the new iPad Lock Screen
or StandBy on iPhone.


430
00:23:42,656 --> 00:23:44,525 line:-1
Let's look at StandBy.


431
00:23:44,558 --> 00:23:47,628 line:-2
When the background is removed,
I want my bird to stand out.


432
00:23:47,661 --> 00:23:51,798 line:-2
And its feet are a bit lost here,
so let's add a birdbath.


433
00:23:51,832 --> 00:23:55,736 line:-2
SwiftUI provides a new
showsWidgetContainerBackground variable


434
00:23:55,769 --> 00:23:59,473 line:-2
that lets me customize how my widget looks
when the background is removed.


435
00:24:00,541 --> 00:24:02,376 line:-1
Nice!


436
00:24:02,409 --> 00:24:06,547 line:-2
Many of you have asked for the ability
to interact with your app from your widget


437
00:24:06,580 --> 00:24:08,949 line:-1
and now, you can.


438
00:24:08,982 --> 00:24:12,186 line:-2
Let's add a button
to refill my bird's water.


439
00:24:12,219 --> 00:24:14,621 line:-2
I've already defined an App Intent
for this action,


440
00:24:14,655 --> 00:24:19,226 line:-2
so all I have to do is associate it
with a button in my widget.


441
00:24:19,259 --> 00:24:20,928 line:-1
Let's try it out in the simulator.


442
00:24:22,429 --> 00:24:25,599 line:-2
And just like that,
I've refilled my bird's water.


443
00:24:25,632 --> 00:24:27,935 line:-1
And that's WidgetKit.


444
00:24:27,968 --> 00:24:30,437 line:-2
It's never been easier
to surface your content


445
00:24:30,470 --> 00:24:32,940 line:-1
in so many places across the system.


446
00:24:32,973 --> 00:24:36,043 line:-2
We're excited about all the ways
you can use interactivity


447
00:24:36,076 --> 00:24:39,413 line:-2
and animated transitions
to enhance your widgets.


448
00:24:39,446 --> 00:24:43,450 line:-2
Now, App Intents are about more
than just interactivity in widgets.


449
00:24:43,483 --> 00:24:46,553 line:-2
They elevate your app's functionality
across the system,


450
00:24:46,587 --> 00:24:50,090 line:-1
in Spotlight, Shortcuts, and Siri.


451
00:24:50,123 --> 00:24:52,993 line:-2
Now, when you wrap your intent
in an App Shortcut,


452
00:24:53,026 --> 00:24:56,230 line:-2
it will appear right next to your app icon
in Spotlight results,


453
00:24:56,263 --> 00:24:59,233 line:-2
with a richer,
more interactive presentation.


454
00:24:59,266 --> 00:25:01,935 line:-1
You just need to provide a few things.


455
00:25:01,969 --> 00:25:05,439 line:-2
In your App Shortcut,
a short title and an image or symbol.


456
00:25:05,472 --> 00:25:06,907 line:-1
And in your app's Info.plist,


457
00:25:06,940 --> 00:25:09,877 line:-2
a background color that's complementary
to your app icon.


458
00:25:09,910 --> 00:25:13,580 line:-2
And your app shortcuts will be surfaced
in the updated Shortcuts app,


459
00:25:13,614 --> 00:25:16,149 line:-2
where users can set them up
to run automatically,


460
00:25:16,183 --> 00:25:20,187 line:-2
add them to their Home Screen,
or use them to create their own shortcuts.


461
00:25:20,220 --> 00:25:22,756 line:-1
Siri has gotten even better too.


462
00:25:22,789 --> 00:25:26,727 line:-2
Users have more natural language
flexibility to invoke a shortcut.


463
00:25:26,760 --> 00:25:28,795 line:-1
With WidgetKit and App Intents,


464
00:25:28,829 --> 00:25:32,866 line:-2
users can access features of your app
in whole new ways.


465
00:25:32,900 --> 00:25:36,904 line:-2
Next, let's talk about feature discovery
in your app.


466
00:25:36,937 --> 00:25:39,640 line:-2
Every year,
we developers spend time building features


467
00:25:39,673 --> 00:25:41,441 line:-1
that we think users will love,


468
00:25:41,475 --> 00:25:43,977 line:-2
but sometimes the users
who would benefit most


469
00:25:44,011 --> 00:25:45,779 line:-1
don't know the feature exists!


470
00:25:45,812 --> 00:25:48,315 line:-2
A new framework called TipKit
helps address this


471
00:25:48,348 --> 00:25:53,187 line:-2
by intelligently educating users about
the right features at the right time.


472
00:25:53,220 --> 00:25:56,423 line:-2
TipKit includes templates to match
what users are accustomed to seeing


473
00:25:56,456 --> 00:25:58,926 line:-2
in system apps,
and are easily customizable


474
00:25:58,959 --> 00:26:01,828 line:-1
to match the look and feel of your app.


475
00:26:01,862 --> 00:26:04,398 line:-1
The power of TipKit is its turnkey nature.


476
00:26:04,431 --> 00:26:08,268 line:-2
Simply customize a template
and add targeting to educate users


477
00:26:08,302 --> 00:26:11,305 line:-2
on functionality
related to their current context.


478
00:26:11,338 --> 00:26:14,708 line:-2
You can also manage the overall frequency
to avoid showing tips


479
00:26:14,741 --> 00:26:16,276 line:-1
users have already seen,


480
00:26:16,310 --> 00:26:18,912 line:-1
even if they saw them on another device.


481
00:26:18,946 --> 00:26:23,016 line:-2
Lastly, we have a fun new way
to help users share content from your app


482
00:26:23,050 --> 00:26:24,618 line:-1
with AirDrop.


483
00:26:24,651 --> 00:26:28,222 line:-2
On iOS 17,
your users can skip the share sheet


484
00:26:28,255 --> 00:26:31,725 line:-2
and quickly send content
to another device nearby.


485
00:26:31,758 --> 00:26:33,927 line:-1
You can use ShareLink in SwiftUI,


486
00:26:33,961 --> 00:26:38,799 line:-2
or adopt activityItemsConfiguration
on your app's UIKit view controller.


487
00:26:38,832 --> 00:26:42,503 line:-2
And system-provided ViewControllers
like ShareSheet and QuickLook


488
00:26:42,536 --> 00:26:44,938 line:-1
already work by default.


489
00:26:44,972 --> 00:26:48,375 line:-2
WidgetKit, App Intents,
TipKit, and AirDrop


490
00:26:48,408 --> 00:26:53,080 line:-2
will help you build experiences that make
your app's content available to your users


491
00:26:53,113 --> 00:26:55,549 line:-1
in the right place and at the right time.


492
00:26:55,582 --> 00:27:00,354 line:-2
We're looking forward to seeing how you'll
use these to take your apps even further.


493
00:27:00,387 --> 00:27:03,390 line:-1
And now, back to Darin.


494
00:27:03,423 --> 00:27:06,894 line:-2
Darin: Our platforms are built to give you
access to the unique hardware capabilities


495
00:27:06,927 --> 00:27:09,396 line:-1
of our products right out of the gate.


496
00:27:09,429 --> 00:27:12,466 line:-2
Whether you're tapping into
a Neural Engine to process a photograph


497
00:27:12,499 --> 00:27:15,469 line:-2
or using an accelerometer
to measure sleep movements,


498
00:27:15,502 --> 00:27:17,037 line:-1
our APIs give you the ability


499
00:27:17,070 --> 00:27:20,574 line:-2
to harness the power
of hardware technologies with ease.


500
00:27:20,607 --> 00:27:22,776 line:-2
Next,
we'll look at this year's improvements


501
00:27:22,809 --> 00:27:26,613 line:-2
for Gaming, Cameras, Displays,
and Apple Watch.


502
00:27:26,647 --> 00:27:29,583 line:-2
Here's Brandon to tell us
how this all plays out.


503
00:27:29,616 --> 00:27:32,286 line:0
Brandon Corey: The blazing performance,
long battery life,


504
00:27:32,319 --> 00:27:34,821 line:0
and stunning graphics
of Apple silicon Macs


505
00:27:34,855 --> 00:27:38,759 line:-2
make them the perfect platform
for running high-end games.


506
00:27:38,792 --> 00:27:43,197 line:-2
And now, Game Mode in macOS Sonoma
makes gaming on Mac even better.


507
00:27:43,230 --> 00:27:45,766 line:-1
With Macs more popular than ever before,


508
00:27:45,799 --> 00:27:49,803 line:-2
there's never been a better time to bring
your games to millions of new players.


509
00:27:49,837 --> 00:27:53,807 line:-2
If you're a developer who builds games
for Windows or gaming consoles,


510
00:27:53,841 --> 00:27:57,077 line:-2
you'll find it is now easier than ever
to bring your games to Mac


511
00:27:57,110 --> 00:27:59,813 line:-1
by using the new Game Porting Toolkit,


512
00:27:59,847 --> 00:28:04,184 line:-2
which significantly accelerates your
development using three simple steps.


513
00:28:04,218 --> 00:28:08,822 line:-2
First, you can evaluate just how well your
existing Windows game could run on Mac


514
00:28:08,856 --> 00:28:11,825 line:-1
using the provided emulation environment.


515
00:28:11,859 --> 00:28:15,028 line:-2
This lets you analyze your game's
potential performance immediately,


516
00:28:15,062 --> 00:28:17,631 line:-1
eliminating months of upfront work.


517
00:28:17,664 --> 00:28:21,001 line:-2
In the second step,
you'll convert and compile your shaders.


518
00:28:21,034 --> 00:28:24,605 line:0
The Game Porting Toolkit includes
a new Metal Shader Converter,


519
00:28:24,638 --> 00:28:26,440 line:-1
which you can use to automatically convert


520
00:28:26,473 --> 00:28:30,177 line:-2
all of your existing HLSL GPU shaders
to Metal,


521
00:28:30,210 --> 00:28:34,147 line:-2
including all of your game's
advanced shading pipelines like geometry,


522
00:28:34,181 --> 00:28:37,751 line:-2
tessellation, mesh,
and ray tracing stages.


523
00:28:37,784 --> 00:28:40,787 line:-2
You can use this tool while
you're building your game in Xcode,


524
00:28:40,821 --> 00:28:44,625 line:-2
or in a custom Windows-based toolchain
for shader compilation.


525
00:28:44,658 --> 00:28:46,326 line:-1
Which brings us to step three:


526
00:28:46,360 --> 00:28:49,630 line:-2
converting your graphics code
and optimizing your game.


527
00:28:49,663 --> 00:28:53,000 line:-2
Metal provides all of the advanced
graphics and compute features


528
00:28:53,033 --> 00:28:54,835 line:-1
used by modern high-end games,


529
00:28:54,868 --> 00:28:58,872 line:-2
which makes converting your graphics code
incredibly straightforward.


530
00:28:58,906 --> 00:29:01,608 line:-2
And the powerful graphics performance
and debugging tools


531
00:29:01,642 --> 00:29:03,510 line:-1
integrated right into Xcode


532
00:29:03,544 --> 00:29:07,047 line:-2
give you all the guidance you need
to fully optimize your game.


533
00:29:07,080 --> 00:29:09,750 line:-2
We can't wait to see you
make use of these tools


534
00:29:09,783 --> 00:29:12,953 line:-2
to take advantage of the incredible
performance of Apple silicon,


535
00:29:12,986 --> 00:29:17,758 line:-2
and powerful graphics, display, audio,
input, and gaming technologies,


536
00:29:17,791 --> 00:29:22,396 line:-2
to bring your games to Mac
dramatically faster than ever before.


537
00:29:22,429 --> 00:29:24,264 line:-1
Speaking of faster performance,


538
00:29:24,298 --> 00:29:26,800 line:-1
we also have news to share about Camera.


539
00:29:26,834 --> 00:29:29,469 line:-2
Apple continues to push
mobile photography forward


540
00:29:29,503 --> 00:29:32,573 line:-2
and expand APIs
that let you do incredible things


541
00:29:32,606 --> 00:29:34,708 line:-1
with the world's most popular camera.


542
00:29:34,741 --> 00:29:39,580 line:0
AVCapture is used by over a third
of iOS apps across all categories:


543
00:29:39,613 --> 00:29:44,218 line:-2
from creativity to productivity,
social media, and even health,


544
00:29:44,251 --> 00:29:47,287 line:-2
and it's getting some powerful
performance improvements this year.


545
00:29:47,321 --> 00:29:50,324 line:-2
With Zero Shutter Lag,
you capture the exact moment


546
00:29:50,357 --> 00:29:52,626 line:-1
when the shutter is pressed.


547
00:29:52,659 --> 00:29:56,663 line:-2
With overlapping captures, the camera
will dynamically adjust image quality


548
00:29:56,697 --> 00:29:58,732 line:-1
when the shutter is pressed rapidly.


549
00:29:58,765 --> 00:30:02,870 line:-2
And with deferred processing,
high-quality images including Deep Fusion


550
00:30:02,903 --> 00:30:05,138 line:-1
can be processed in the background.


551
00:30:05,172 --> 00:30:07,074 line:-2
These improvements will make
shot-to-shot time


552
00:30:07,107 --> 00:30:12,246 line:0
up to three time faster between shutter
presses in your iOS or iPadOS app,


553
00:30:12,279 --> 00:30:14,948 line:-1
even while capturing high-quality images.


554
00:30:14,982 --> 00:30:17,551 line:-2
And later this year,
you'll also be able to use


555
00:30:17,584 --> 00:30:21,321 line:-2
the volume and up and down buttons
to trigger the camera shutter.


556
00:30:21,355 --> 00:30:24,525 line:-2
There is also big news
on displaying photos in your apps.


557
00:30:24,558 --> 00:30:28,795 line:-2
In recent years HDR-capable displays
have become widely available,


558
00:30:28,829 --> 00:30:31,765 line:-1
including on iPhone, iPad, and Mac.


559
00:30:31,798 --> 00:30:36,069 line:0
HDR photography takes advantage
by capturing additional dynamic range


560
00:30:36,103 --> 00:30:39,806 line:0
to display bright highlights
and dark shadows with more fidelity


561
00:30:39,840 --> 00:30:41,875 line:0
and realism than ever before,


562
00:30:41,909 --> 00:30:44,778 line:0
just like you experienced
the scene in real life.


563
00:30:44,811 --> 00:30:48,682 line:-2
Apple has been the leader in bringing
HDR photography to the mainstream,


564
00:30:48,715 --> 00:30:53,253 line:-2
with trillions of HDR photos captured
on iPhone 12 and later.


565
00:30:53,287 --> 00:30:57,257 line:-2
To do this, the Camera app
intelligently analyzes the scene


566
00:30:57,291 --> 00:31:01,595 line:-2
and stores additional highlight
and shadow data at capture time.


567
00:31:01,628 --> 00:31:04,398 line:-2
But while there are industry standards
for HDR video,


568
00:31:04,431 --> 00:31:07,868 line:-2
there has been no standard
for storing and displaying HDR photos,


569
00:31:07,901 --> 00:31:09,970 line:-2
which has made them
difficult to work with.


570
00:31:10,003 --> 00:31:13,073 line:-1
But that's all changing this year.


571
00:31:13,106 --> 00:31:16,877 line:-2
Apple has driven an industry-wide effort
resulting in a specification


572
00:31:16,910 --> 00:31:19,713 line:-1
for encoding and displaying HDR photos,


573
00:31:19,746 --> 00:31:23,851 line:-2
recently ratified by
the International Standards Organization.


574
00:31:23,884 --> 00:31:28,689 line:-2
It's now available as an API in iOS,
iPadOS, and macOS,


575
00:31:28,722 --> 00:31:31,325 line:-2
so that you can display compatible photos
in your apps


576
00:31:31,358 --> 00:31:33,760 line:-1
with just a couple of lines of code.


577
00:31:33,794 --> 00:31:36,630 line:-2
This is great news for all apps
that display images,


578
00:31:36,663 --> 00:31:38,165 line:-1
and not just for photos.


579
00:31:38,198 --> 00:31:43,637 line:-2
Generative content apps can use it to make
images pop with extra dynamic range.


580
00:31:43,670 --> 00:31:46,473 line:-2
So now a complete HDR workflow
will be possible:


581
00:31:46,507 --> 00:31:49,877 line:-1
from capture to edit to sharing,


582
00:31:49,910 --> 00:31:53,080 line:-2
and everyone will be able to enjoy
its full HDR glory,


583
00:31:53,113 --> 00:31:56,049 line:-1
just like the photographer experienced it.


584
00:31:56,083 --> 00:31:58,085 line:-1
Next, let's talk about video.


585
00:31:58,118 --> 00:32:01,054 line:-2
We all spend a lot of time
with our cameras on these days,


586
00:32:01,088 --> 00:32:04,758 line:-2
whether for video conferencing
or in creative apps.


587
00:32:04,791 --> 00:32:07,594 line:-2
We've continued to invest
in video lighting and effects,


588
00:32:07,628 --> 00:32:11,665 line:-2
like these new reactions,
gestures, and presenter overlay effects.


589
00:32:11,698 --> 00:32:13,500 line:-2
They're built into the camera feed
you receive,


590
00:32:13,534 --> 00:32:16,036 line:-1
so they'll just work in your app.


591
00:32:16,069 --> 00:32:18,438 line:-2
Your app can observe
when these effects are invoked


592
00:32:18,472 --> 00:32:20,440 line:-1
and you can perform additional actions,


593
00:32:20,474 --> 00:32:24,444 line:-2
like promoting that user's tile
so everyone can see that they reacted.


594
00:32:24,478 --> 00:32:26,013 line:-1
If you have a video conferencing app,


595
00:32:26,046 --> 00:32:28,315 line:-2
there are a number of improvements
to screen sharing


596
00:32:28,348 --> 00:32:31,185 line:-2
and camera functionality
in ScreenCaptureKit.


597
00:32:31,218 --> 00:32:35,622 line:-2
The new ScreenCaptureKit picker makes it
simpler for users to start screen sharing,


598
00:32:35,656 --> 00:32:38,192 line:-1
in a more private and secure way.


599
00:32:38,225 --> 00:32:41,662 line:-2
The picker also makes it simple
for your app to capture multiple windows


600
00:32:41,695 --> 00:32:44,631 line:-1
or even multiple apps all at once.


601
00:32:44,665 --> 00:32:47,734 line:-2
Your users can start sharing
right from the app they're in


602
00:32:47,768 --> 00:32:49,703 line:-2
and they'll appreciate
that they see a preview


603
00:32:49,736 --> 00:32:54,007 line:-2
of what's being shared
in the new Video Effects menu.


604
00:32:54,041 --> 00:32:57,544 line:-2
Another benefit of ScreenCaptureKit
is higher resolution content


605
00:32:57,578 --> 00:33:01,148 line:-2
for better-looking screen shares
when sharing a single window.


606
00:33:01,181 --> 00:33:04,017 line:-2
We've also brought
external camera support to iPad.


607
00:33:04,051 --> 00:33:08,155 line:-2
Any USB camera can now be connected
and used within your iPad app.


608
00:33:08,188 --> 00:33:10,991 line:-2
And we are thrilled to add camera
and microphone capabilities


609
00:33:11,024 --> 00:33:14,928 line:-2
to an entirely new platform:
tvOS.


610
00:33:14,962 --> 00:33:17,331 line:-1
With Continuity Camera on tvOS,


611
00:33:17,364 --> 00:33:20,000 line:-2
you can take advantage of iPhone
and even iPad


612
00:33:20,033 --> 00:33:24,371 line:-2
to integrate video and audio
in tvOS apps for the first time.


613
00:33:24,404 --> 00:33:26,039 line:-1
And with the living room as your stage,


614
00:33:26,073 --> 00:33:29,676 line:-2
there's so much potential
to do amazing things with your apps.


615
00:33:29,710 --> 00:33:32,513 line:-2
For example,
conferencing apps can use Center Stage,


616
00:33:32,546 --> 00:33:36,550 line:-2
which makes group video calls more dynamic
on the biggest screen in the home.


617
00:33:36,583 --> 00:33:40,287 line:-2
Games can incorporate camera
and audio feeds directly into the action.


618
00:33:40,320 --> 00:33:42,656 line:-2
And creative apps
can stream or record video,


619
00:33:42,689 --> 00:33:45,492 line:-2
while applying Portrait mode
and other fun effects.


620
00:33:45,526 --> 00:33:47,895 line:-1
If you already have an app on Apple TV,


621
00:33:47,928 --> 00:33:50,831 line:-2
you can make the experience
even more connected and social


622
00:33:50,864 --> 00:33:54,268 line:-2
by leveraging frameworks
you're likely already familiar with.


623
00:33:54,301 --> 00:33:57,104 line:-2
And for those that want to take advantage
of Continuity Camera


624
00:33:57,137 --> 00:33:59,273 line:-1
but haven't yet developed for tvOS,


625
00:33:59,306 --> 00:34:01,808 line:-2
it's super easy to get started
with SwiftUI.


626
00:34:01,842 --> 00:34:04,244 line:-1
Let me show you how it works.


627
00:34:04,278 --> 00:34:07,381 line:-1
So here's my example iPad app, PartyCam,


628
00:34:07,414 --> 00:34:09,650 line:-1
that takes selfies with fun filters.


629
00:34:09,683 --> 00:34:12,786 line:-2
First, we'll add Apple TV
as a destination.


630
00:34:14,421 --> 00:34:19,026 line:-2
Next, we need to add the picker so
the user knows which phone to choose from.


631
00:34:19,059 --> 00:34:21,061 line:-2
Then we'll add the code
to present the picker.


632
00:34:21,094 --> 00:34:22,796 line:-1
And then we run.


633
00:34:22,829 --> 00:34:26,533 line:-2
And now, I just pick up the remote
and snap a photo.


634
00:34:26,567 --> 00:34:28,502 line:-1
Hey, it's Susan and Serenity!


635
00:34:31,405 --> 00:34:33,240 line:-1
Awesome!


636
00:34:33,273 --> 00:34:36,476 line:-2
We can't wait to see how you make
the living room even more entertaining.


637
00:34:36,510 --> 00:34:40,647 line:-2
Now, over to Lori
with what's new on watchOS.


638
00:34:40,681 --> 00:34:42,482 line:0
Lori Hylan-Cho:
As our first wearable device,


639
00:34:42,516 --> 00:34:45,185 line:0
Apple Watch opened up new possibilities
for developers


640
00:34:45,219 --> 00:34:47,087 line:0
to bring timely notifications,


641
00:34:47,120 --> 00:34:48,488 line:-1
health and fitness insights,


642
00:34:48,522 --> 00:34:51,558 line:-2
and handy app experiences
to people's wrists.


643
00:34:51,592 --> 00:34:54,595 line:-2
This year, watchOS 10 is getting
a huge design refresh


644
00:34:54,628 --> 00:34:57,297 line:-2
that takes advantage
of the larger, brighter displays,


645
00:34:57,331 --> 00:35:00,868 line:-2
and more capable, connected hardware
of modern Apple Watch models.


646
00:35:00,901 --> 00:35:03,804 line:-2
SwiftUI is at the very heart
of this redesign.


647
00:35:03,837 --> 00:35:07,541 line:-2
We employed it across the system
to update virtually every app


648
00:35:07,574 --> 00:35:10,611 line:-1
to be more dynamic, more colorful,


649
00:35:10,644 --> 00:35:12,312 line:-1
and more glanceable.


650
00:35:12,346 --> 00:35:14,147 line:-1
Let me show you a few examples.


651
00:35:14,181 --> 00:35:17,351 line:-2
There's a renewed focus on pagination
in watchOS 10,


652
00:35:17,384 --> 00:35:20,621 line:-2
and Vertical TabViews
allow for variable page sizes,


653
00:35:20,654 --> 00:35:23,223 line:-2
making better use of the crown
for scrolling within apps


654
00:35:23,257 --> 00:35:27,261 line:-2
without sacrificing space
for all your valuable content.


655
00:35:27,294 --> 00:35:30,230 line:-2
The new containerBackground modifier
lets you use color,


656
00:35:30,264 --> 00:35:32,432 line:-1
with gradient fills for readability,


657
00:35:32,466 --> 00:35:35,068 line:-2
to help users understand where they are
within your app


658
00:35:35,102 --> 00:35:37,137 line:-1
or make data more glanceable.


659
00:35:37,171 --> 00:35:39,173 line:-1
For app designs that fill the screen,


660
00:35:39,206 --> 00:35:42,242 line:-2
new ToolbarItem placements
make better use of the corners


661
00:35:42,276 --> 00:35:45,979 line:-2
and allow the time to automatically shift
to the center if necessary.


662
00:35:46,013 --> 00:35:49,583 line:-2
And for layouts with a strong source
list/detail view association,


663
00:35:49,616 --> 00:35:52,853 line:-2
NavigationSplitView is more compelling
than ever on Apple Watch


664
00:35:52,886 --> 00:35:55,989 line:-2
using the same code
you'd use on other platforms.


665
00:35:56,023 --> 00:35:58,625 line:-2
And the pivot in and out
of the detail view on Apple Watch


666
00:35:58,659 --> 00:36:02,095 line:-2
even uses SwiftUI's
new interactive spring animation.


667
00:36:02,129 --> 00:36:05,132 line:-2
This animation is composed of
12 separate tracks


668
00:36:05,165 --> 00:36:09,069 line:-2
for an animation plan that animates
both the size and position of the views,


669
00:36:09,102 --> 00:36:12,105 line:-2
driven by the velocity
of the user's finger.


670
00:36:12,139 --> 00:36:15,008 line:-2
And of course, all the major
UI components have been updated


671
00:36:15,042 --> 00:36:17,911 line:-2
with material treatments
to be legible on any background,


672
00:36:17,945 --> 00:36:20,547 line:-2
and they size automatically
for the hardware.


673
00:36:20,581 --> 00:36:23,217 line:-2
If you've already adopted SwiftUI
in your app,


674
00:36:23,250 --> 00:36:28,155 line:-2
you'll get these updates automatically
when you build with the watchOS 10 SDK.


675
00:36:28,188 --> 00:36:30,624 line:-2
Let me show you what I mean
with the Backyard Birds app


676
00:36:30,657 --> 00:36:33,493 line:-1
that I originally designed for watchOS 9.


677
00:36:33,527 --> 00:36:36,563 line:-2
It's a list/detail app
built using a NavigationStack,


678
00:36:36,597 --> 00:36:38,232 line:-1
and even without any code changes,


679
00:36:38,265 --> 00:36:41,502 line:-2
it already works well
when recompiled with watchOS 10.


680
00:36:41,535 --> 00:36:45,405 line:-2
The views automatically adjust to
accommodate the new navigation bar height,


681
00:36:45,439 --> 00:36:49,943 line:-2
and the large title shrinks and animates
to a position under the time as I scroll.


682
00:36:49,977 --> 00:36:54,648 line:-2
Now let's make some edits to make the app
feel even more at home on watchOS 10.


683
00:36:54,681 --> 00:36:58,585 line:-2
I'd like to see the current status of
my primary yard whenever I launch the app,


684
00:36:58,619 --> 00:37:01,421 line:-2
rather than always having to choose it
from the list.


685
00:37:01,455 --> 00:37:04,358 line:-2
NavigationSplitView
is designed specifically for apps


686
00:37:04,391 --> 00:37:06,827 line:-2
with a strong source list/detail
relationship,


687
00:37:06,860 --> 00:37:11,098 line:-2
so I'll swap out my NavigationStack
for a NavigationSplitView.


688
00:37:11,131 --> 00:37:14,168 line:-2
I'll remove the navigation title
from the Source List,


689
00:37:14,201 --> 00:37:16,470 line:-2
since it's no longer
the entry point for the app,


690
00:37:16,503 --> 00:37:20,240 line:-2
and indicate the detail view
that should open by default.


691
00:37:20,274 --> 00:37:23,177 line:-2
The source list is now tucked away
behind the detail view,


692
00:37:23,210 --> 00:37:24,878 line:-1
and I'm focused on the details.


693
00:37:24,912 --> 00:37:27,080 line:-1
But my detail view's pretty long.


694
00:37:27,114 --> 00:37:29,783 line:-2
It's a scrolling List
with three clear sections,


695
00:37:29,816 --> 00:37:33,487 line:-2
so I'll break up the content by converting
the List to a vertical TabView


696
00:37:33,520 --> 00:37:36,590 line:-1
with a separate page for each section.


697
00:37:36,623 --> 00:37:39,526 line:-2
Each of these pages will be
the height of the screen by default


698
00:37:39,560 --> 00:37:42,296 line:-2
and because that final section contained
a ForEach loop,


699
00:37:42,329 --> 00:37:44,565 line:-1
each bird's getting its own page.


700
00:37:44,598 --> 00:37:48,035 line:-2
I'd rather have a list of all the birds
on a single tab that scrolls


701
00:37:48,068 --> 00:37:50,070 line:-1
if it exceeds the height of the screen,


702
00:37:50,103 --> 00:37:52,539 line:-1
so I'll change this ForEach to a List,


703
00:37:52,573 --> 00:37:54,908 line:-1
which will make it a scrollable view.


704
00:37:54,942 --> 00:37:58,412 line:-2
Next I'd like to add some color
to differentiate between the tabs,


705
00:37:58,445 --> 00:38:01,815 line:-2
so I'll add a .containerBackground
modifier to each tab.


706
00:38:01,849 --> 00:38:04,351 line:-2
And to quickly spot when food
or water are running low,


707
00:38:04,384 --> 00:38:06,753 line:-2
I'll make
the Sustenance background dynamic.


708
00:38:06,787 --> 00:38:11,358 line:-2
It'll be green, yellow, or red
based on the supply levels.


709
00:38:11,391 --> 00:38:13,393 line:-1
Looking at the changes in Live Previews,


710
00:38:13,427 --> 00:38:16,597 line:-2
you can see how the background color
gives a sense of place within the app


711
00:38:16,630 --> 00:38:20,100 line:-2
and makes it easier to spot
when I need to refill food or water.


712
00:38:20,133 --> 00:38:23,504 line:-2
The final tab lets content scroll
beyond the bounds of the screen,


713
00:38:23,537 --> 00:38:25,706 line:-2
and I can still reach
the list of backyards


714
00:38:25,739 --> 00:38:27,808 line:-1
by tapping the Source List button.


715
00:38:27,841 --> 00:38:32,246 line:-2
It took just a few changes
to make my app fit right in on watchOS 10.


716
00:38:32,279 --> 00:38:34,348 line:-1
SwiftUI made our lives easier


717
00:38:34,381 --> 00:38:37,251 line:-2
as we worked to make every app
on the system look amazing,


718
00:38:37,284 --> 00:38:40,053 line:-2
and as we just saw,
it'll make updating your apps


719
00:38:40,087 --> 00:38:42,656 line:-1
for these new design paradigms easy too.


720
00:38:42,689 --> 00:38:46,660 line:-2
If you haven't moved to SwiftUI
in your app yet, now is the time.


721
00:38:46,693 --> 00:38:49,763 line:-2
In addition to these
SwiftUI-based app updates,


722
00:38:49,796 --> 00:38:52,366 line:-2
watchOS 10 also has a brand new
system space


723
00:38:52,399 --> 00:38:55,936 line:-2
where AppIntents relevance helps
your widgets move up the Smart Stack


724
00:38:55,969 --> 00:38:57,538 line:-1
at just the right time.


725
00:38:57,571 --> 00:39:00,007 line:-2
And you can use the same
.containerBackground modifier


726
00:39:00,040 --> 00:39:02,609 line:-2
mentioned earlier
to make those widgets really shine


727
00:39:02,643 --> 00:39:05,145 line:-1
with beautiful custom backgrounds.


728
00:39:05,179 --> 00:39:07,080 line:-1
For those of you building workout apps,


729
00:39:07,114 --> 00:39:10,317 line:-2
you can help your users take advantage
of the fitness tracking capabilities


730
00:39:10,350 --> 00:39:13,086 line:-2
of Apple Watch
with the new Custom Workout API,


731
00:39:13,120 --> 00:39:16,290 line:-2
which lets you share fitness plans
from your app,


732
00:39:16,323 --> 00:39:20,861 line:-2
and a new CoreMotion API that will enable
higher-fidelity capture of motion


733
00:39:20,894 --> 00:39:23,997 line:-2
and accelerometer data
to help improve swing analysis


734
00:39:24,031 --> 00:39:25,966 line:-1
for sports like golf and tennis.


735
00:39:25,999 --> 00:39:28,502 line:-2
And because we know how creative
you all can be,


736
00:39:28,535 --> 00:39:31,405 line:-2
this data is available
when running any kind of workout.


737
00:39:31,438 --> 00:39:34,608 line:-2
We can't wait to see what kinds
of experiences you'll build with it.


738
00:39:34,641 --> 00:39:38,612 line:-2
And that's a glimpse of some of the
big changes coming to watchOS this year.


739
00:39:38,645 --> 00:39:40,681 line:-1
And now, back to Darin.


740
00:39:41,548 --> 00:39:44,184 line:-2
Darin: A platform is also about
the people who use it,


741
00:39:44,218 --> 00:39:47,487 line:-2
and the values that are built into it
from the ground up.


742
00:39:47,521 --> 00:39:50,157 line:-2
These core values mean a lot
to us at Apple,


743
00:39:50,190 --> 00:39:52,626 line:-1
and we know they mean a lot to you too.


744
00:39:52,659 --> 00:39:55,329 line:-2
Together we can make your app
adapt to people's needs


745
00:39:55,362 --> 00:39:56,964 line:-1
so anyone can use it


746
00:39:56,997 --> 00:40:01,001 line:-2
and create apps that show respect
for each user's need to protect themselves


747
00:40:01,034 --> 00:40:03,270 line:-1
and protect their data.


748
00:40:03,303 --> 00:40:05,172 line:-1
Starting with what our platforms provide


749
00:40:05,205 --> 00:40:07,875 line:-2
can make this important work
easier for you.


750
00:40:07,908 --> 00:40:11,044 line:-1
To tell you more, here's Chris.


751
00:40:11,078 --> 00:40:14,882 line:0
Chris: We believe that everyone
should be able to use our devices


752
00:40:14,915 --> 00:40:16,450 line:0
to do what they love.


753
00:40:16,483 --> 00:40:21,488 line:0
That's why making our products accessible
is a core value at Apple.


754
00:40:21,522 --> 00:40:23,457 line:-2
According to
the World Health Organization,


755
00:40:23,490 --> 00:40:27,728 line:0
there are over one billion people
around the world with disabilities.


756
00:40:27,761 --> 00:40:32,232 line:-2
Building accessible technology means
giving more people the best tools


757
00:40:32,266 --> 00:40:36,570 line:-2
to create, learn, stay connected,
and live on their terms.


758
00:40:36,603 --> 00:40:39,706 line:-2
That's why Apple products
have accessibility features


759
00:40:39,740 --> 00:40:41,775 line:-1
available out of the box for users


760
00:40:41,808 --> 00:40:43,477 line:-1
who are blind or low vision,


761
00:40:43,510 --> 00:40:45,045 line:-1
Deaf or hard of hearing,


762
00:40:45,078 --> 00:40:47,548 line:-1
non-speaking or at risk of speech loss,


763
00:40:47,581 --> 00:40:49,616 line:-1
those with physical or motor disabilities,


764
00:40:49,650 --> 00:40:52,686 line:-1
and those with cognitive disabilities.


765
00:40:52,719 --> 00:40:56,690 line:-2
Our frameworks come with built-in support
for these accessibility features,


766
00:40:56,723 --> 00:40:59,826 line:-2
along with tools and APIs
to help you ensure


767
00:40:59,860 --> 00:41:03,030 line:-1
that your apps are accessible to everyone.


768
00:41:03,063 --> 00:41:07,467 line:-2
Often, accessibility comes down to taking
small steps that have a big impact.


769
00:41:07,501 --> 00:41:10,337 line:-2
As an example,
last year we added the ability


770
00:41:10,370 --> 00:41:13,874 line:-2
to detect and describe doors
in the Magnifier app,


771
00:41:13,907 --> 00:41:17,444 line:-2
helping people independently navigate
their environment.


772
00:41:17,477 --> 00:41:19,780 line:-1
This year, we're expanding our support


773
00:41:19,813 --> 00:41:24,084 line:-2
for users who are sensitive to animations
and flashing lights.


774
00:41:24,117 --> 00:41:26,887 line:-1
These users often face a difficult choice


775
00:41:26,920 --> 00:41:29,389 line:-2
between avoiding
potentially risky content,


776
00:41:29,423 --> 00:41:32,326 line:-2
such as movies that begin
with a flashing lights warning,


777
00:41:32,359 --> 00:41:34,962 line:-2
or consuming it
without enough information,


778
00:41:34,995 --> 00:41:39,066 line:-2
which can mean exposing themselves
to health risks, like seizures.


779
00:41:39,099 --> 00:41:42,436 line:-2
Our frameworks now include APIs
for two features


780
00:41:42,469 --> 00:41:47,140 line:-2
that can make content in your apps
more accessible to these users.


781
00:41:47,174 --> 00:41:50,511 line:-2
The first feature
is Pause Animated Images,


782
00:41:50,544 --> 00:41:53,347 line:-2
which will stop the motion
in animated GIFs


783
00:41:53,380 --> 00:41:55,816 line:-1
in Safari, Messages, and more.


784
00:41:55,849 --> 00:41:59,152 line:-2
And it's easy
for you to add it to your app.


785
00:41:59,186 --> 00:42:04,057 line:-2
Suppose you are animating a sequence
of images with TimelineView in SwiftUI.


786
00:42:04,091 --> 00:42:07,227 line:-2
You can use a new environment property
to understand


787
00:42:07,261 --> 00:42:10,297 line:-2
if the user prefers to pause
animated images,


788
00:42:10,330 --> 00:42:14,401 line:-2
and if they do, replace animated images
with a static image


789
00:42:14,434 --> 00:42:16,436 line:-1
to respect their choice.


790
00:42:16,470 --> 00:42:19,239 line:-1
The second feature is Dim Flashing Lights,


791
00:42:19,273 --> 00:42:22,209 line:-2
which automatically darkens
the display of video


792
00:42:22,242 --> 00:42:24,711 line:-2
during sequences
of bright, flashing lights.


793
00:42:25,712 --> 00:42:29,483 line:0
There's a new phase
in AVFoundation's video rendering pipeline


794
00:42:29,516 --> 00:42:32,686 line:0
to identify and dim flashing elements.


795
00:42:32,719 --> 00:42:36,190 line:-2
If you use AVFoundation
to play media in your app,


796
00:42:36,223 --> 00:42:38,692 line:-2
there's no extra work
to support this feature.


797
00:42:38,725 --> 00:42:41,828 line:-2
However, if your app uses
a custom media player,


798
00:42:41,862 --> 00:42:46,099 line:-2
you can use a new API to identify
video content with flashing lights,


799
00:42:46,133 --> 00:42:48,168 line:-1
and automatically darken it.


800
00:42:48,202 --> 00:42:50,437 line:-1
We've even open-sourced the algorithm,


801
00:42:50,470 --> 00:42:53,207 line:-2
so you can understand the science
behind this feature.


802
00:42:53,240 --> 00:42:57,277 line:-2
Our commitment to building accessibility
into each product and framework


803
00:42:57,311 --> 00:43:00,848 line:-1
extends to our newest platform: visionOS.


804
00:43:00,881 --> 00:43:03,650 line:-2
Because we believe
the world's best technology


805
00:43:03,684 --> 00:43:05,652 line:-1
should adapt to everyone's needs,


806
00:43:05,686 --> 00:43:09,189 line:-2
visionOS comes with dozens
of accessibility features


807
00:43:09,223 --> 00:43:12,993 line:-2
built into its foundation
from the very start.


808
00:43:13,026 --> 00:43:16,864 line:-2
And you, as a developer,
will play a critical role


809
00:43:16,897 --> 00:43:20,634 line:-2
by making your visionOS apps
accessible for everyone,


810
00:43:20,667 --> 00:43:26,540 line:-2
using the same tools and APIs
that you use on iPadOS and iOS today.


811
00:43:26,573 --> 00:43:28,475 line:-1
We are thrilled to work with you


812
00:43:28,509 --> 00:43:31,512 line:-2
to bring spatial computing
to diverse sets of users,


813
00:43:31,545 --> 00:43:35,015 line:-2
and you'll hear more about accessibility
on Vision Pro in a bit.


814
00:43:35,048 --> 00:43:38,986 line:-1
Now, over to Katie to talk about privacy.


815
00:43:39,019 --> 00:43:43,457 line:0
Katie Skinner: At Apple, we believe
privacy is a fundamental human right.


816
00:43:43,490 --> 00:43:46,860 line:-2
We hear from our users
how much they care about it,


817
00:43:46,894 --> 00:43:51,732 line:-2
and we're here to help you deliver
great privacy along with your features.


818
00:43:51,765 --> 00:43:57,171 line:-2
Over the years we've built many ways
to help you build privacy into your apps.


819
00:43:57,204 --> 00:43:59,239 line:-1
This year we're making it even easier


820
00:43:59,273 --> 00:44:02,142 line:-2
for you to offer
robust privacy experiences


821
00:44:02,176 --> 00:44:04,778 line:-1
to your users in a number of areas,


822
00:44:04,811 --> 00:44:07,714 line:-2
starting with improvements
to privacy prompts.


823
00:44:07,748 --> 00:44:10,584 line:-1
Let's start with Calendar permissions.


824
00:44:10,617 --> 00:44:14,922 line:-2
We know that in many cases, your apps
don't need read access to Calendar–


825
00:44:14,955 --> 00:44:17,558 line:-1
they just need to write new events.


826
00:44:17,591 --> 00:44:22,296 line:-2
For these cases,
we've created a new add-only permission.


827
00:44:22,329 --> 00:44:25,232 line:-2
This will help you
get the access that you need,


828
00:44:25,265 --> 00:44:29,236 line:-2
and the user will get a prompt
that makes sense to them.


829
00:44:29,269 --> 00:44:32,339 line:-1
And in Photos, we've offered two choices


830
00:44:32,372 --> 00:44:35,242 line:-1
for users to provide photos to your app;


831
00:44:35,275 --> 00:44:37,544 line:-1
they can select which photos to share,


832
00:44:37,578 --> 00:44:40,781 line:-2
or they can provide access
to their full library.


833
00:44:40,814 --> 00:44:42,916 line:-1
We wanted to make it even easier


834
00:44:42,950 --> 00:44:46,220 line:-2
to help users select photos
to share with your app,


835
00:44:46,253 --> 00:44:50,691 line:-2
so you get exactly what you need
and users share only what they intend.


836
00:44:50,724 --> 00:44:54,862 line:0
So we're adding a new photo picker
that you can embed into your app,


837
00:44:54,895 --> 00:44:59,967 line:0
so users can easily select photos to share
from inside your experience.


838
00:45:00,000 --> 00:45:02,569 line:0
Next, app privacy.


839
00:45:02,603 --> 00:45:06,573 line:-2
It's important to help users understand
how you protect their data,


840
00:45:06,607 --> 00:45:09,676 line:-2
so we've built features
to help you do just that.


841
00:45:09,710 --> 00:45:13,447 line:-2
For example, Privacy Nutrition Labels
help users understand


842
00:45:13,480 --> 00:45:16,917 line:-1
what data you collect and how you use it.


843
00:45:16,950 --> 00:45:20,487 line:-2
Many of you include third-party SDKs
in your apps,


844
00:45:20,521 --> 00:45:22,656 line:-1
which can offer great functionality.


845
00:45:22,689 --> 00:45:26,627 line:-2
But including them can make it harder
to get your labels right,


846
00:45:26,660 --> 00:45:30,564 line:-2
because you might not understand
how they handle user data.


847
00:45:30,597 --> 00:45:35,702 line:-2
And they can introduce security challenges
to your software supply chain.


848
00:45:35,736 --> 00:45:39,506 line:-2
So this year,
we're introducing two updates.


849
00:45:39,540 --> 00:45:44,144 line:-2
First, to help you understand
how third-party SDKs use data,


850
00:45:44,178 --> 00:45:46,847 line:-1
we've introduced privacy manifests.


851
00:45:46,880 --> 00:45:49,783 line:-2
These are files that outline
the privacy practices


852
00:45:49,816 --> 00:45:53,287 line:-2
of the third-party code in your app,
in a standard format.


853
00:45:53,320 --> 00:45:55,822 line:-1
When you prepare to distribute your app,


854
00:45:55,856 --> 00:46:00,093 line:-2
Xcode will combine all the manifests
across all the third-party SDKs


855
00:46:00,127 --> 00:46:03,430 line:-2
you're using into a single,
easy-to-use report.


856
00:46:03,463 --> 00:46:07,334 line:-2
With one summary report
for all of your third-party SDKs,


857
00:46:07,367 --> 00:46:11,805 line:-2
it has never been easier to create
accurate labels in App Store Connect.


858
00:46:11,839 --> 00:46:16,743 line:-2
We also want to help you improve the
integrity of your software supply chain.


859
00:46:16,777 --> 00:46:20,914 line:-2
When using third-party SDKs, it can be
hard to know the code you've downloaded


860
00:46:20,948 --> 00:46:23,617 line:-1
was written by the developer you expect.


861
00:46:23,650 --> 00:46:29,423 line:-2
To address that, we're introducing
signatures for third-party SDKs.


862
00:46:29,456 --> 00:46:33,660 line:-2
Now when you adopt a new version
of a third-party SDK in your app,


863
00:46:33,694 --> 00:46:37,030 line:-2
Xcode will validate that it was signed
by the same developer,


864
00:46:37,064 --> 00:46:39,600 line:-1
to give you more peace of mind.


865
00:46:39,633 --> 00:46:43,370 line:-2
With privacy manifests
and signatures for third-party SDKs,


866
00:46:43,403 --> 00:46:46,607 line:-2
we're making it even easier
for you to protect users


867
00:46:46,640 --> 00:46:50,444 line:-2
and help them understand
how their data will be used.


868
00:46:50,477 --> 00:46:53,480 line:0
And finally, Communication Safety,


869
00:46:53,514 --> 00:46:58,685 line:0
which uses privacy-preserving technology
to protect children on our platforms.


870
00:46:58,719 --> 00:47:02,689 line:-2
Our platforms and the apps you build
play an important role


871
00:47:02,723 --> 00:47:05,559 line:-2
in the lives of many families
across the world,


872
00:47:05,592 --> 00:47:08,061 line:-1
especially in how they communicate.


873
00:47:08,095 --> 00:47:13,300 line:-2
In iOS 15 we introduced the
Communication Safety feature in Messages


874
00:47:13,333 --> 00:47:17,171 line:-2
to offer more protections
for children using Apple devices.


875
00:47:17,204 --> 00:47:20,807 line:-2
Many of you build apps
where users share content


876
00:47:20,841 --> 00:47:24,077 line:-2
and also want to protect children
in vulnerable situations.


877
00:47:24,111 --> 00:47:28,582 line:-2
We know that training and implementing
a model to classify unsafe content


878
00:47:28,615 --> 00:47:32,886 line:-2
can be a difficult problem to solve
and a lot of work to undertake.


879
00:47:32,920 --> 00:47:36,590 line:-2
And so we're bringing Communication Safety
to the entire platform


880
00:47:36,623 --> 00:47:40,294 line:-2
with the Sensitive Content Analysis
framework.


881
00:47:40,327 --> 00:47:41,962 line:-1
With just a few lines of code,


882
00:47:41,995 --> 00:47:46,266 line:-2
the framework helps you detect images
and videos that contain nudity,


883
00:47:46,300 --> 00:47:48,869 line:-1
and this happens entirely on-device.


884
00:47:48,902 --> 00:47:52,439 line:-2
So you can build positive experiences
in your app


885
00:47:52,472 --> 00:47:55,242 line:-2
for children who have
Communication Safety enabled.


886
00:47:55,275 --> 00:47:59,613 line:-2
The Sensitive Content Analysis framework
uses the same technology


887
00:47:59,646 --> 00:48:02,416 line:-1
that underpins Communication Safety.


888
00:48:02,449 --> 00:48:06,153 line:-2
The framework protects users' privacy
by processing images


889
00:48:06,186 --> 00:48:08,789 line:-1
and videos entirely on-device.


890
00:48:08,822 --> 00:48:13,894 line:-2
In addition, we wanted to give everyone
the ability to blur sensitive content


891
00:48:13,927 --> 00:48:16,597 line:-1
with Sensitive Content Warning.


892
00:48:16,630 --> 00:48:20,033 line:-2
The sensitive content analysis framework
will let you know


893
00:48:20,067 --> 00:48:24,671 line:-2
if a user has enabled Communication Safety
or Sensitive Content Warning,


894
00:48:24,705 --> 00:48:29,810 line:-2
so you can tailor your app experiences
based on which feature is enabled.


895
00:48:29,843 --> 00:48:32,579 line:-2
These new features
make it easier than ever


896
00:48:32,613 --> 00:48:35,983 line:-2
to offer privacy and peace of mind
to your users.


897
00:48:36,016 --> 00:48:40,220 line:-2
Next, Chris will tell us
what's new in the App Store.


898
00:48:40,254 --> 00:48:41,722 line:0
Chris Markiewicz:
There is a trusted place


899
00:48:41,755 --> 00:48:44,758 line:0
for users to discover apps
that meet our high standards


900
00:48:44,791 --> 00:48:47,728 line:0
for safety, privacy, and performance,


901
00:48:47,761 --> 00:48:49,363 line:-1
and that's the App Store.


902
00:48:49,396 --> 00:48:53,433 line:-2
The App Store empowers you
to scale your app distribution worldwide


903
00:48:53,467 --> 00:48:57,471 line:-2
using a variety of business models,
like in-app purchase.


904
00:48:57,504 --> 00:49:01,375 line:-2
StoreKit is foundational
for safe and trusted in-app purchase.


905
00:49:01,408 --> 00:49:06,413 line:-2
We provide a robust data model
to connect your products to your app's UI.


906
00:49:06,446 --> 00:49:08,248 line:-1
If you offer in-app purchase,


907
00:49:08,282 --> 00:49:10,918 line:-2
you know the importance
of presenting key details,


908
00:49:10,951 --> 00:49:13,320 line:-1
like price and subscription duration,


909
00:49:13,353 --> 00:49:15,856 line:-1
so users can make an informed purchase.


910
00:49:15,889 --> 00:49:19,159 line:-2
And we know many developers struggle
to get this right.


911
00:49:19,193 --> 00:49:22,629 line:-2
This year, we're taking StoreKit further
with a new collection of views


912
00:49:22,663 --> 00:49:25,999 line:-2
to power your app's merchandising UI
across all platforms,


913
00:49:26,033 --> 00:49:29,803 line:-2
using the best practices
from the Human Interface Guidelines.


914
00:49:29,837 --> 00:49:32,906 line:-1
Using the declarative syntax of SwiftUI,


915
00:49:32,940 --> 00:49:35,242 line:-2
you can craft
your merchandising experience


916
00:49:35,275 --> 00:49:37,744 line:-1
and StoreKit takes care of the rest.


917
00:49:37,778 --> 00:49:39,413 line:-1
Let's view some examples.


918
00:49:39,446 --> 00:49:42,449 line:-2
The ProductView enables you
to display your products


919
00:49:42,482 --> 00:49:45,185 line:-2
using data you defined
in App Store Connect.


920
00:49:45,219 --> 00:49:49,356 line:-2
You can easily customize it
to match the look and feel of your app.


921
00:49:49,389 --> 00:49:53,727 line:-2
The SubscriptionStoreView is
a purpose-built view for subscriptions.


922
00:49:53,760 --> 00:49:55,629 line:-1
With as little as one line of code,


923
00:49:55,662 --> 00:49:58,298 line:-1
the description, price, and duration


924
00:49:58,332 --> 00:50:01,969 line:-2
for each level of service
are clearly presented to the user.


925
00:50:02,002 --> 00:50:04,271 line:-1
These views aren't just for iPhone.


926
00:50:04,304 --> 00:50:07,274 line:-2
The same code creates a view to match
the platform experience


927
00:50:07,307 --> 00:50:09,109 line:-1
across all Apple devices.


928
00:50:09,142 --> 00:50:13,714 line:-2
And it even scales to fit
the compact display of Apple Watch.


929
00:50:13,747 --> 00:50:17,985 line:-2
And of course, they were created with
accessibility and localization in mind


930
00:50:18,018 --> 00:50:19,620 line:-1
for all users.


931
00:50:19,653 --> 00:50:23,357 line:-2
Integrating the SubscriptionStoreView
into my app is super easy.


932
00:50:23,390 --> 00:50:26,927 line:-2
Let's work on the Backyard Birds Pass
subscription offering.


933
00:50:26,960 --> 00:50:31,131 line:-2
I'll go into Xcode to add some
declarations to my SubscriptionStoreView


934
00:50:31,164 --> 00:50:34,234 line:-2
to match the look and feel
of Backyard Birds.


935
00:50:34,268 --> 00:50:37,271 line:-2
I'll customize the marketing content
with a view,


936
00:50:37,304 --> 00:50:39,339 line:-1
add a container background,


937
00:50:39,373 --> 00:50:42,075 line:-2
and change the style
of the subscription options.


938
00:50:43,944 --> 00:50:47,981 line:-2
Now we have something that looks great
and matches the app's branding.


939
00:50:48,015 --> 00:50:50,284 line:-2
Let's also take a quick look
at the simulator


940
00:50:50,317 --> 00:50:53,887 line:-2
where I can get the same full experience
that my users would.


941
00:50:53,921 --> 00:50:56,757 line:-1
Here I can select an offer,


942
00:50:56,790 --> 00:50:58,292 line:-1
click Subscribe,


943
00:50:58,325 --> 00:51:00,994 line:-1
and complete the purchase.


944
00:51:01,028 --> 00:51:03,997 line:-2
That's all it takes to build
a customized purchase experience


945
00:51:04,031 --> 00:51:08,135 line:-2
to show users all the information
they need to make an informed decision.


946
00:51:08,168 --> 00:51:11,839 line:-2
We also know how hard it can be
to customize the offers you present,


947
00:51:11,872 --> 00:51:16,443 line:-2
based on the user's purchase history
or subscription status.


948
00:51:16,476 --> 00:51:18,478 line:-1
That's why the SubscriptionStoreView


949
00:51:18,512 --> 00:51:21,381 line:-2
will automatically determine
user eligibility


950
00:51:21,415 --> 00:51:23,450 line:-1
and display the right offer.


951
00:51:23,483 --> 00:51:27,754 line:-2
The new StoreKit views are the best way
to merchandise your in-app purchases.


952
00:51:27,788 --> 00:51:30,557 line:-2
Another important aspect
of growing your business


953
00:51:30,591 --> 00:51:34,695 line:-2
is understanding how advertising
helps users discover your app.


954
00:51:34,728 --> 00:51:39,199 line:-2
That's why SKAdNetwork helps ad networks
measure how successfully


955
00:51:39,233 --> 00:51:41,735 line:-1
ad campaigns drive downloads of your app,


956
00:51:41,768 --> 00:51:44,771 line:-1
all while preserving user privacy.


957
00:51:44,805 --> 00:51:48,041 line:-2
In addition to measuring downloads,
we know it's important to understand


958
00:51:48,075 --> 00:51:51,144 line:-2
how advertising can bring users
back into your app.


959
00:51:51,178 --> 00:51:54,515 line:-2
SKAdNetwork 5 will support
measuring re-engagement.


960
00:51:54,548 --> 00:51:57,885 line:-2
In addition to measuring conversions
after a user downloads your app,


961
00:51:57,918 --> 00:52:00,053 line:-1
you'll also be able to measure conversions


962
00:52:00,087 --> 00:52:03,590 line:-2
after a user opens your app
by tapping on an ad.


963
00:52:03,624 --> 00:52:07,928 line:-2
Version 5 will be available
in an iOS release coming later this year.


964
00:52:07,961 --> 00:52:11,431 line:-2
Our new features for in-app purchase
and SKAdNetwork


965
00:52:11,465 --> 00:52:15,469 line:-2
will help you grow your business
responsibly while respecting user privacy,


966
00:52:15,502 --> 00:52:18,639 line:-2
giving users transparency
and peace of mind.


967
00:52:18,672 --> 00:52:20,674 line:-1
Now, back to Darin.


968
00:52:20,707 --> 00:52:23,110 line:-2
Darin: Like our programming language
and frameworks,


969
00:52:23,143 --> 00:52:25,245 line:-1
our tools were made for each other.


970
00:52:25,279 --> 00:52:29,283 line:-2
Xcode brings together everything you need
to develop, test, and distribute apps


971
00:52:29,316 --> 00:52:31,552 line:-1
across all our platforms.


972
00:52:31,585 --> 00:52:34,788 line:-2
TestFlight and Xcode Cloud
make the experience seamless,


973
00:52:34,821 --> 00:52:38,325 line:-2
from your first line of code
to the first download in the App Store.


974
00:52:38,358 --> 00:52:42,930 line:-2
Now Ken will take us through a look
at the latest developments.


975
00:52:42,963 --> 00:52:44,331 line:0
Ken Orr: For all Apple platforms,


976
00:52:44,364 --> 00:52:47,434 line:0
one tool is at the center
of your developer experience,


977
00:52:47,467 --> 00:52:50,237 line:0
helping you build all your great apps:


978
00:52:50,270 --> 00:52:51,605 line:-1
Xcode.


979
00:52:51,638 --> 00:52:53,473 line:-1
It brings together powerful features,


980
00:52:53,507 --> 00:52:57,377 line:-2
like an editor that blends crafting code
and designing user interfaces


981
00:52:57,411 --> 00:53:00,447 line:-2
with interactive previews
and live animations,


982
00:53:00,480 --> 00:53:03,383 line:-2
and built-in source control for making,
reviewing,


983
00:53:03,417 --> 00:53:06,220 line:-1
and sharing changes with your team.


984
00:53:06,253 --> 00:53:11,525 line:-2
Debugging, profiling, and testing tools
to help you evaluate and refine your app,


985
00:53:11,558 --> 00:53:14,027 line:-1
all of it is connected in Xcode Cloud,


986
00:53:14,061 --> 00:53:16,363 line:-2
a continuous integration
and delivery service


987
00:53:16,396 --> 00:53:21,034 line:-2
that simplifies distribution
to TestFlight and the App Store.


988
00:53:21,068 --> 00:53:25,005 line:-1
For Xcode 15, there are some big updates.


989
00:53:25,038 --> 00:53:29,610 line:-2
Let's start where you spend
most of your time: the source editor.


990
00:53:29,643 --> 00:53:34,948 line:-2
Code completion helps you get the code
you want faster and with fewer mistakes.


991
00:53:34,982 --> 00:53:38,719 line:-2
With Xcode 15, you'll start
with the most relevant completions


992
00:53:38,752 --> 00:53:42,523 line:-2
with the editor using the surrounding code
for prioritization.


993
00:53:42,556 --> 00:53:44,358 line:-2
Whether that's
the most appropriate modifier


994
00:53:44,391 --> 00:53:46,560 line:-1
for a specific view you're using


995
00:53:46,593 --> 00:53:50,931 line:-2
or when you're chaining modifiers
as you customize a view.


996
00:53:50,964 --> 00:53:55,202 line:-2
And Xcode will automatically generate
symbols for your asset catalog resources,


997
00:53:55,235 --> 00:53:57,337 line:-2
which means they show up
in code completion


998
00:53:57,371 --> 00:53:59,840 line:-1
and are easy to use in your code.


999
00:53:59,873 --> 00:54:02,309 line:-2
This gives you type safety
and peace of mind


1000
00:54:02,342 --> 00:54:04,978 line:-1
that your assets are available at runtime.


1001
00:54:05,012 --> 00:54:09,082 line:-2
A great place to use those assets
is in your SwiftUI views.


1002
00:54:09,116 --> 00:54:12,619 line:-2
Xcode's previews are a seamless way
to iterate on your UI,


1003
00:54:12,653 --> 00:54:14,254 line:-1
with nearly instant feedback


1004
00:54:14,288 --> 00:54:17,858 line:-2
as you design
right alongside your app's code.


1005
00:54:17,891 --> 00:54:23,730 line:-2
In Xcode 15, previews are easier to use
and available in even more places.


1006
00:54:23,764 --> 00:54:28,569 line:-2
It starts with a new syntax,
built using Swift Macros,


1007
00:54:28,602 --> 00:54:32,172 line:-2
that is simple to write
and easy to remember.


1008
00:54:32,206 --> 00:54:35,909 line:-2
Working with different platforms
and devices is now easier.


1009
00:54:35,943 --> 00:54:38,011 line:-1
You can choose them right in the canvas


1010
00:54:38,045 --> 00:54:41,448 line:-2
to make sure
your views look great everywhere.


1011
00:54:41,481 --> 00:54:45,752 line:-2
And you can now use Previews
across all UI frameworks!


1012
00:54:45,786 --> 00:54:49,389 line:-2
Wherever you're using SwiftUI,
UIKIt, or AppKit,


1013
00:54:49,423 --> 00:54:52,226 line:-2
you can iterate on your UI
with a consistent experience


1014
00:54:52,259 --> 00:54:54,661 line:-1
from anywhere in your code.


1015
00:54:54,695 --> 00:54:58,098 line:-2
Now, to keep pace with quickly making
and previewing changes,


1016
00:54:58,131 --> 00:55:02,503 line:-2
Xcode streamlines how you review
and commit those changes.


1017
00:55:02,536 --> 00:55:05,606 line:-2
Many of you use git staging
in your workflows,


1018
00:55:05,639 --> 00:55:08,842 line:-2
and now,
it's integrated directly into Xcode!


1019
00:55:08,876 --> 00:55:13,013 line:-2
You can stage or un-stage any change
with just a click,


1020
00:55:13,046 --> 00:55:17,117 line:-2
crafting your next commit
without leaving your code.


1021
00:55:17,150 --> 00:55:18,452 line:-1
From the Source Control navigator,


1022
00:55:18,485 --> 00:55:21,522 line:-2
you can review all your changes
in a single view,


1023
00:55:21,555 --> 00:55:25,192 line:-2
helping you put the finishing touches
on your commit.


1024
00:55:25,225 --> 00:55:27,594 line:-1
And Xcode shows un-pushed commits too,


1025
00:55:27,628 --> 00:55:32,032 line:-2
so you can perfectly time getting all your
commits together into a pull request.


1026
00:55:32,065 --> 00:55:34,168 line:-1
Let's talk about testing.


1027
00:55:34,201 --> 00:55:37,738 line:-2
It's an essential part
of creating a high-quality app.


1028
00:55:37,771 --> 00:55:41,241 line:-2
As your code grows
across many platforms, devices,


1029
00:55:41,275 --> 00:55:43,677 line:-1
languages, and user features,


1030
00:55:43,710 --> 00:55:47,047 line:-2
navigating your test results
and knowing where to focus–


1031
00:55:47,080 --> 00:55:48,315 line:-1
that can be challenging.


1032
00:55:48,348 --> 00:55:52,653 line:-2
Xcode 15 includes a complete redesign
of the test report,


1033
00:55:52,686 --> 00:55:58,358 line:-2
giving you new tools to better understand
your results and take action.


1034
00:55:58,392 --> 00:56:01,828 line:-2
And it starts with
a beautiful results overview.


1035
00:56:01,862 --> 00:56:05,332 line:-2
It shows me Top Insights
including common failure patterns,


1036
00:56:05,365 --> 00:56:07,701 line:-2
like those
with the same assertion message.


1037
00:56:07,734 --> 00:56:11,905 line:-2
I also get a comprehensive summary
of how my tests ran across configurations,


1038
00:56:11,939 --> 00:56:13,841 line:-1
like device and language,


1039
00:56:13,874 --> 00:56:16,109 line:-1
and that helps me spot patterns.


1040
00:56:16,143 --> 00:56:20,080 line:-2
And there's a heat map
to quickly show me where to focus.


1041
00:56:20,113 --> 00:56:22,783 line:-2
Now, I've been working on a feature
in the Backyard Birds app.


1042
00:56:22,816 --> 00:56:26,720 line:-2
And looking at my latest test run,
I see I've got some issues.


1043
00:56:26,753 --> 00:56:29,056 line:-1
I'll start by clicking on this insight.


1044
00:56:29,089 --> 00:56:32,459 line:-2
It looks like a tap gesture
is failing across my new test.


1045
00:56:32,492 --> 00:56:34,795 line:-1
I'll click this test that failed,


1046
00:56:34,828 --> 00:56:37,698 line:-2
which gives me a detailed view
of the test activities


1047
00:56:37,731 --> 00:56:38,832 line:-1
here on the left,


1048
00:56:38,866 --> 00:56:43,170 line:-2
along with a full recording
of the app's UI over on the right.


1049
00:56:43,203 --> 00:56:46,440 line:-1
I can select a specific activity.


1050
00:56:46,473 --> 00:56:50,544 line:-2
Or I can use the new timeline
to jump to any moment.


1051
00:56:50,577 --> 00:56:52,546 line:-1
I can see marks for interesting points,


1052
00:56:52,579 --> 00:56:55,082 line:-2
like when the test scrolled
this view here,


1053
00:56:55,115 --> 00:56:58,385 line:-2
or over here
where it tapped the search field.


1054
00:56:58,418 --> 00:57:02,990 line:-2
And this is a full video recording
that gives me much more detail,


1055
00:57:03,023 --> 00:57:07,160 line:-2
showing me exactly what happened
before the test failed.


1056
00:57:07,194 --> 00:57:09,196 line:-1
I'll play it to see what happened.


1057
00:57:10,230 --> 00:57:14,468 line:-2
Here, the test is selecting some food
to feed the bird.


1058
00:57:14,501 --> 00:57:17,471 line:-1
The bird starts flying around,


1059
00:57:17,504 --> 00:57:20,374 line:-2
and then it disappears
before my action is complete,


1060
00:57:20,407 --> 00:57:22,309 line:-1
which is what caused my test to fail.


1061
00:57:22,342 --> 00:57:25,812 line:-2
This new test detail with a timeline
and video recording


1062
00:57:25,846 --> 00:57:28,882 line:-2
makes reviewing tests for animations,
gestures,


1063
00:57:28,916 --> 00:57:32,853 line:-1
and other UI experiences so much faster.


1064
00:57:32,886 --> 00:57:35,122 line:-1
And when I need more than video,


1065
00:57:35,155 --> 00:57:37,791 line:-1
I can also see accessibility frames,


1066
00:57:37,824 --> 00:57:41,628 line:-1
giving me even more insight into my views.


1067
00:57:41,662 --> 00:57:46,066 line:-2
All combined, the new report experience
gives you deep insights,


1068
00:57:46,099 --> 00:57:48,902 line:-1
finer details, and more interaction


1069
00:57:48,936 --> 00:57:51,238 line:-1
to get the most out of your testing.


1070
00:57:51,271 --> 00:57:54,608 line:-2
And it works seamlessly in Xcode
and Xcode Cloud.


1071
00:57:54,641 --> 00:57:58,412 line:0
Xcode Cloud is a continuous integration
and delivery service


1072
00:57:58,445 --> 00:58:00,948 line:0
that helps you build, test,


1073
00:58:00,981 --> 00:58:03,851 line:-2
and share your app
across all Apple platforms.


1074
00:58:03,884 --> 00:58:06,386 line:-1
It's deeply integrated into Xcode,


1075
00:58:06,420 --> 00:58:10,624 line:-2
saving you time
by keeping you focused in one place.


1076
00:58:10,657 --> 00:58:14,761 line:-2
It leverages Apple's cloud infrastructure
to offload your builds, tests,


1077
00:58:14,795 --> 00:58:17,397 line:-1
and even code signing for distribution.


1078
00:58:17,431 --> 00:58:21,268 line:-2
It connects with Apple services
like TestFlight and App Store Connect.


1079
00:58:21,301 --> 00:58:23,470 line:-1
And it's built with advanced security


1080
00:58:23,504 --> 00:58:26,406 line:-1
to protect you and your projects.


1081
00:58:26,440 --> 00:58:30,344 line:-2
Last year, we made Xcode Cloud available
to every member


1082
00:58:30,377 --> 00:58:32,346 line:-1
of the Apple Developer Program.


1083
00:58:32,379 --> 00:58:37,284 line:-2
Tens of thousands of teams onboarded
their projects directly from Xcode


1084
00:58:37,317 --> 00:58:39,586 line:-1
and the feedback has been great!


1085
00:58:39,620 --> 00:58:44,258 line:-2
And we continue
to make Xcode Cloud even better.


1086
00:58:44,291 --> 00:58:47,027 line:-1
We really care about performance.


1087
00:58:47,060 --> 00:58:50,197 line:0
Since last year,
we've made significant investments


1088
00:58:50,230 --> 00:58:53,333 line:0
so you can do even more
with your compute time.


1089
00:58:53,367 --> 00:58:57,271 line:-2
We've also added
your most important requests.


1090
00:58:57,304 --> 00:59:01,375 line:-2
When distributing to TestFlight,
you can now create and share tester notes,


1091
00:59:01,408 --> 00:59:06,613 line:-2
helping keep all your users up to date
on your latest improvements.


1092
00:59:06,647 --> 00:59:10,217 line:-2
Xcode Cloud also supports
macOS notarization


1093
00:59:10,250 --> 00:59:12,686 line:-1
when distributing with DeveloperID,


1094
00:59:12,719 --> 00:59:15,989 line:-2
so you can automatically check your app
for malicious components


1095
00:59:16,023 --> 00:59:18,725 line:-1
before sharing it with your users.


1096
00:59:18,759 --> 00:59:21,762 line:-2
With just a few minutes
to set up your workflows,


1097
00:59:21,795 --> 00:59:24,565 line:-2
you can take advantage
of hours of compute time


1098
00:59:24,598 --> 00:59:27,935 line:-1
to build, test, and deploy your apps.


1099
00:59:27,968 --> 00:59:30,838 line:-2
We are excited
about the future of Xcode Cloud,


1100
00:59:30,871 --> 00:59:35,542 line:-2
as we continue to make it faster,
safer, and more flexible.


1101
00:59:35,576 --> 00:59:38,412 line:-2
Over the last year,
we've optimized the compiler


1102
00:59:38,445 --> 00:59:41,014 line:-2
for the multi-core architecture
of Apple silicon


1103
00:59:41,048 --> 00:59:44,885 line:-2
to make all of your builds faster
and more scalable.


1104
00:59:44,918 --> 00:59:48,188 line:-2
The linker has been redesigned
from the ground up,


1105
00:59:48,222 --> 00:59:51,091 line:-2
bringing massive improvements
in link speed.


1106
00:59:51,124 --> 00:59:54,628 line:0
Linking is up to five times faster!


1107
00:59:54,661 --> 00:59:59,099 line:0
The new linker also reduces
the size of debug binaries by up to 30%.


1108
00:59:59,132 --> 01:00:01,235 line:-2
And for apps
that embed a lot of frameworks,


1109
01:00:01,268 --> 01:00:02,769 line:-1
there's a new framework type


1110
01:00:02,803 --> 01:00:05,606 line:-2
that delivers faster builds
during development


1111
01:00:05,639 --> 01:00:09,743 line:-2
and reduced app size
and faster launch time for production.


1112
01:00:09,776 --> 01:00:15,048 line:-2
Finally, we continue to make Xcode faster
and easier to just get started.


1113
01:00:15,082 --> 01:00:18,886 line:-2
On the Mac App Store,
Xcode is now 50% smaller,


1114
01:00:18,919 --> 01:00:21,788 line:-2
and all simulators
are downloadable on demand.


1115
01:00:21,822 --> 01:00:23,790 line:-1
That means you can get started quickly


1116
01:00:23,824 --> 01:00:27,561 line:-2
and install the platforms you need
at just the right time.


1117
01:00:27,594 --> 01:00:30,097 line:-1
And now, back to Darin.


1118
01:00:30,130 --> 01:00:32,366 line:-2
Darin: Our singular approach
of building a language,


1119
01:00:32,399 --> 01:00:35,702 line:-2
frameworks, tools, and services
that all work together


1120
01:00:35,736 --> 01:00:38,906 line:-2
truly comes to life
when we introduce a new platform.


1121
01:00:38,939 --> 01:00:42,543 line:-2
The use of shared foundations
help make the platform seem familiar


1122
01:00:42,576 --> 01:00:45,546 line:-2
while ensuring
its individual strengths shine.


1123
01:00:45,579 --> 01:00:48,115 line:-2
visionOS takes advantage
of the investments we've been making


1124
01:00:48,148 --> 01:00:50,150 line:-1
in our platforms for many years


1125
01:00:50,184 --> 01:00:52,519 line:-2
and showcases the benefits
of this approach.


1126
01:00:52,553 --> 01:00:54,955 line:-1
Here's Mike to tell you all about it.


1127
01:00:56,823 --> 01:00:58,659 line:0
Mike Rockwell:
The launch of Apple Vision Pro


1128
01:00:58,692 --> 01:01:02,663 line:0
marks the beginning of a journey together
in spatial computing.


1129
01:01:02,696 --> 01:01:06,934 line:-2
You can now push beyond what
you previously understood to be possible


1130
01:01:06,967 --> 01:01:09,736 line:-2
and reimagine what it means
to be connected,


1131
01:01:09,770 --> 01:01:12,139 line:-1
productive, and entertained.


1132
01:01:12,172 --> 01:01:15,542 line:-2
Vision Pro has many
groundbreaking technologies.


1133
01:01:15,576 --> 01:01:19,680 line:-2
Your apps will make use of new elements
to interact with the user's space


1134
01:01:19,713 --> 01:01:22,049 line:-1
and blend seamlessly with their room.


1135
01:01:22,082 --> 01:01:26,820 line:-2
This is all possible using powerful
technologies you already know:


1136
01:01:26,854 --> 01:01:32,559 line:-2
SwiftUI, RealityKit, and ARKit–
now extended for visionOS.


1137
01:01:32,593 --> 01:01:36,730 line:-2
With this solid foundation
and an updated set of developer tools,


1138
01:01:36,763 --> 01:01:38,332 line:-1
you're going to feel right at home


1139
01:01:38,365 --> 01:01:43,604 line:-2
creating an entirely new universe of apps
for Apple Vision Pro.


1140
01:01:43,637 --> 01:01:48,308 line:-2
Today we're going to cover everything
you need to get started with visionOS,


1141
01:01:48,342 --> 01:01:50,177 line:-1
from the fundamental building blocks


1142
01:01:50,210 --> 01:01:53,247 line:-2
to critical frameworks, tools,
and technologies.


1143
01:01:53,280 --> 01:01:57,684 line:-2
You'll learn about the activities and
programs we are launching to support you


1144
01:01:57,718 --> 01:02:00,921 line:-2
as you bring your apps to life
on Vision Pro;


1145
01:02:00,954 --> 01:02:04,758 line:-2
apps that take advantage of
the infinite canvas of Vision Pro,


1146
01:02:04,791 --> 01:02:08,562 line:-2
or that turn a room
into an immersive media environment.


1147
01:02:08,595 --> 01:02:11,164 line:-1
So let's roll our sleeves up.


1148
01:02:11,198 --> 01:02:16,570 line:-2
Vision Pro allows you to rethink
what is possible for your app experience.


1149
01:02:16,603 --> 01:02:18,906 line:-2
Regardless of the kind of app
you're building,


1150
01:02:18,939 --> 01:02:22,543 line:-2
you need to understand
how it will exist in 3D,


1151
01:02:22,576 --> 01:02:24,178 line:-1
in your user's space.


1152
01:02:24,211 --> 01:02:28,448 line:-2
This will inform the decisions you make
as a developer.


1153
01:02:28,482 --> 01:02:30,984 line:-2
That understanding will help you
take advantage


1154
01:02:31,018 --> 01:02:33,220 line:-1
of the capabilities of Vision Pro,


1155
01:02:33,253 --> 01:02:35,622 line:-1
bringing focus and immersion to your apps


1156
01:02:35,656 --> 01:02:39,293 line:-2
in ways that, until now,
were just not possible.


1157
01:02:39,326 --> 01:02:43,564 line:-2
By default,
apps launch into the Shared Space.


1158
01:02:43,597 --> 01:02:46,767 line:-2
The Shared Space is where
apps exist side by side,


1159
01:02:46,800 --> 01:02:50,170 line:-1
much like multiple apps on a Mac desktop.


1160
01:02:50,204 --> 01:02:55,008 line:-2
The user has full agency to reposition
apps wherever they would like.


1161
01:02:55,042 --> 01:02:59,046 line:-2
Let's talk about the elements
you can use inside a space,


1162
01:02:59,079 --> 01:03:01,815 line:-1
starting with the familiar window.


1163
01:03:01,849 --> 01:03:05,519 line:-2
On visionOS,
your app can open one or more windows,


1164
01:03:05,552 --> 01:03:09,089 line:-2
which are SwiftUI scenes
and behave just as you would expect,


1165
01:03:09,122 --> 01:03:11,859 line:-1
as planes in space.


1166
01:03:11,892 --> 01:03:14,261 line:-2
They can contain
traditional views and controls,


1167
01:03:14,294 --> 01:03:18,265 line:-2
and they even support 3D objects
and RealityViews,


1168
01:03:18,298 --> 01:03:22,603 line:-2
allowing 3D content
to sit alongside 2D content.


1169
01:03:22,636 --> 01:03:26,940 line:-2
Additionally, your app can create
three-dimensional volumes,


1170
01:03:26,974 --> 01:03:29,209 line:-1
which are also SwiftUI scenes,


1171
01:03:29,243 --> 01:03:33,547 line:-2
and showcase 3D objects,
like a game board or a globe.


1172
01:03:33,580 --> 01:03:37,751 line:-2
Volumes can be moved around this space
and viewed from all angles.


1173
01:03:37,784 --> 01:03:42,556 line:-2
In some cases, you may want more control
over the level of immersion in your app–


1174
01:03:42,589 --> 01:03:46,760 line:-2
maybe for the user to watch a video,
play a game, or rehearse a presentation.


1175
01:03:46,793 --> 01:03:51,231 line:-2
You can do this by opening
a dedicated Full Space,


1176
01:03:51,265 --> 01:03:55,235 line:-2
in which only your apps, windows,
volumes, and 3D objects appear


1177
01:03:55,269 --> 01:03:57,504 line:-1
across the user's view.


1178
01:03:57,538 --> 01:04:01,008 line:-2
So those are the foundational elements
of spatial computing:


1179
01:04:01,041 --> 01:04:04,511 line:-1
windows, volumes, and spaces.


1180
01:04:04,545 --> 01:04:07,247 line:-2
They give you a flexible toolset
to build apps


1181
01:04:07,281 --> 01:04:09,783 line:-1
that can span the continuum of immersion.


1182
01:04:09,816 --> 01:04:13,320 line:-2
Now, to tell you more
about how to get started building apps,


1183
01:04:13,353 --> 01:04:14,821 line:-1
here's Geoff.


1184
01:04:14,855 --> 01:04:18,091 line:0
Geoff Stahl: Vision Pro supports
several different kinds of apps.


1185
01:04:18,125 --> 01:04:21,028 line:-2
Existing iPad
and iPhone apps are supported,


1186
01:04:21,061 --> 01:04:23,964 line:-1
each as a single scalable 2D window


1187
01:04:23,997 --> 01:04:25,999 line:-1
with their original look and feel.


1188
01:04:26,033 --> 01:04:29,036 line:-2
But that's only the beginning
of what's possible.


1189
01:04:29,069 --> 01:04:33,907 line:-2
At its core,
visionOS is similar to iPadOS and iOS,


1190
01:04:33,941 --> 01:04:37,511 line:-2
and includes many
of the same foundational frameworks.


1191
01:04:37,544 --> 01:04:41,882 line:-2
You use SwiftUI and UIKit
to build your user interface,


1192
01:04:41,915 --> 01:04:47,187 line:-2
RealityKit to present 3D content,
animations, and visual effects,


1193
01:04:47,221 --> 01:04:51,458 line:-2
and ARKit to understand the space
around the user.


1194
01:04:51,491 --> 01:04:54,461 line:-1
These are all part of the visionOS SDK.


1195
01:04:54,494 --> 01:04:58,432 line:-2
So what does it take
to bring your app to Vision Pro?


1196
01:04:58,465 --> 01:05:00,834 line:-1
First, in Xcode,


1197
01:05:00,868 --> 01:05:03,670 line:-2
add the visionOS destination
to your project.


1198
01:05:03,704 --> 01:05:05,672 line:-1
Now, when you rebuild,


1199
01:05:05,706 --> 01:05:08,976 line:-2
your app automatically gets
some really cool improvements.


1200
01:05:11,144 --> 01:05:13,847 line:-1
Materials with the visionOS look and feel,


1201
01:05:13,881 --> 01:05:18,685 line:-2
fully-resizable windows with spacing tuned
for eyes and hands input,


1202
01:05:18,719 --> 01:05:22,589 line:-2
and access to highlighting adjustments
for your custom controls.


1203
01:05:22,623 --> 01:05:26,159 line:-2
Then, you can add visionOS-specific code
to expand your app


1204
01:05:26,193 --> 01:05:29,630 line:0
into a collection of windows,
volumes, or spaces.


1205
01:05:29,663 --> 01:05:31,832 line:0
From here, you can begin to take advantage


1206
01:05:31,865 --> 01:05:37,771 line:-2
of the extended capabilities of SwiftUI,
RealityKit, and ARKit.


1207
01:05:37,804 --> 01:05:40,140 line:-1
Here's Enrica to tell you how.


1208
01:05:40,174 --> 01:05:42,609 line:0
Enrica Casucci: On visionOS,
many of our frameworks


1209
01:05:42,643 --> 01:05:46,713 line:0
have been extended
to support spatial experiences.


1210
01:05:46,747 --> 01:05:49,850 line:-1
With SwiftUI, you can now add depth


1211
01:05:49,883 --> 01:05:53,020 line:-1
or add a 3D object inside a window.


1212
01:05:53,053 --> 01:05:58,792 line:-2
On iOS and MacOS, a ZStack
is typically used for layering views.


1213
01:05:58,825 --> 01:06:02,930 line:-2
visionOS goes further,
and you can separate them with depth.


1214
01:06:02,963 --> 01:06:07,134 line:-2
This gives your two-dimensional apps
a three-dimensional feel.


1215
01:06:07,167 --> 01:06:11,672 line:-2
You can add subtle changes in depth
to your UI elements


1216
01:06:11,705 --> 01:06:14,975 line:-1
by using the new z-offset view modifier.


1217
01:06:15,008 --> 01:06:20,781 line:-2
A higher offset value presents the view
in front of views with lower values.


1218
01:06:20,814 --> 01:06:24,184 line:-1
And you can use this to show emphasis


1219
01:06:24,218 --> 01:06:26,520 line:-1
or to indicate a change in modality,


1220
01:06:26,553 --> 01:06:30,190 line:-2
for example
when showing details for a selection.


1221
01:06:30,224 --> 01:06:32,226 line:-1
And with additional view modifiers,


1222
01:06:32,259 --> 01:06:36,463 line:-2
you can have more control
over width, height, and depth.


1223
01:06:36,496 --> 01:06:41,268 line:-2
On Vision Pro, even gestures
are aware of the additional space.


1224
01:06:41,301 --> 01:06:44,972 line:-2
We are all used to dragging objects
around the screen.


1225
01:06:45,005 --> 01:06:52,012 line:-2
Now, people will be able to move or rotate
objects anywhere in their physical space.


1226
01:06:52,045 --> 01:06:55,549 line:-1
You can also create a volume with SwiftUI.


1227
01:06:55,582 --> 01:06:58,619 line:-1
It can exist alongside your app windows,


1228
01:06:58,652 --> 01:07:01,321 line:-1
and when running in the Shared Space,


1229
01:07:01,355 --> 01:07:05,325 line:-1
sits side by side with other apps.


1230
01:07:05,359 --> 01:07:10,330 line:-2
And SwiftUI windows and volumes
can also be inside a Full Space,


1231
01:07:10,364 --> 01:07:14,301 line:-2
where you can place 3D objects
and SwiftUI elements


1232
01:07:14,334 --> 01:07:16,603 line:-1
anywhere in the user's room.


1233
01:07:16,637 --> 01:07:22,910 line:-2
Not only can SwiftUI quickly and easily
bring your apps onto visionOS,


1234
01:07:22,943 --> 01:07:27,281 line:-2
it can also render
fully immersive experiences.


1235
01:07:27,314 --> 01:07:30,184 line:-2
And SwiftUI now renders
through RealityKit,


1236
01:07:30,217 --> 01:07:35,355 line:-2
so you can easily mix
SwiftUI and RealityKit APIs.


1237
01:07:35,389 --> 01:07:38,926 line:-2
You can utilize UI enhancements
like ornaments,


1238
01:07:38,959 --> 01:07:42,496 line:-1
materials, and hover effects.


1239
01:07:42,529 --> 01:07:48,335 line:-2
Ornaments allow you to affix UI components
to the edges of your windows and volumes.


1240
01:07:48,368 --> 01:07:51,939 line:-2
They're great for things like toolbars
and menus.


1241
01:07:51,972 --> 01:07:57,511 line:-2
Hover effects highlight UI elements
in response to where a user looks.


1242
01:07:57,544 --> 01:08:01,248 line:-2
While system controls
automatically get these effects,


1243
01:08:01,281 --> 01:08:07,588 line:-2
you have options to decide whether your
custom control shows a highlight or glow.


1244
01:08:07,621 --> 01:08:11,792 line:-2
And materials adapt to the world
around your user.


1245
01:08:11,825 --> 01:08:15,495 line:-2
Dynamic blurs and vibrancy
make your app readable,


1246
01:08:15,529 --> 01:08:17,998 line:-1
no matter the conditions.


1247
01:08:18,031 --> 01:08:20,567 line:-1
Just like on our other platforms,


1248
01:08:20,601 --> 01:08:26,006 line:-2
we recommend you use SwiftUI
to build your visionOS apps.


1249
01:08:26,039 --> 01:08:31,478 line:-2
Your existing apps built with UIKit
can also be recompiled for visionOS,


1250
01:08:31,512 --> 01:08:35,983 line:-2
and will get access to ornaments,
hover effects, materials,


1251
01:08:36,016 --> 01:08:38,552 line:-1
and the native look and feel.


1252
01:08:38,585 --> 01:08:42,389 line:-2
SwiftUI is just one of the frameworks
you'll use


1253
01:08:42,422 --> 01:08:45,959 line:-1
to build spatial experiences on visionOS.


1254
01:08:45,993 --> 01:08:48,695 line:-1
Edwin will walk you through a few more


1255
01:08:48,729 --> 01:08:51,465 line:-1
that will help you on your journey.


1256
01:08:51,498 --> 01:08:53,133 line:0
Edwin Iskandar:
When you're ready to extend your apps


1257
01:08:53,166 --> 01:08:57,471 line:0
with full scenes of dynamic 3D models,
animations, and visual effects,


1258
01:08:57,504 --> 01:08:59,039 line:-1
you'll want to use RealityKit–


1259
01:08:59,072 --> 01:09:01,875 line:-2
Apple's 3D rendering engine
built from the ground up


1260
01:09:01,909 --> 01:09:04,211 line:-1
for rendering spatial experiences.


1261
01:09:04,244 --> 01:09:07,814 line:-2
We introduced RealityKit and SwiftUI
together in 2019


1262
01:09:07,848 --> 01:09:09,516 line:-1
as independent frameworks.


1263
01:09:09,550 --> 01:09:12,419 line:-2
On Apple Vision Pro,
they are deeply integrated


1264
01:09:12,452 --> 01:09:16,223 line:-2
so you can build sharp, responsive,
and volumetric interfaces.


1265
01:09:16,256 --> 01:09:19,593 line:-2
3D content can bind to SwiftUI views
and states,


1266
01:09:19,626 --> 01:09:23,897 line:-2
seamlessly coupling 2D
and 3D visual elements together.


1267
01:09:23,931 --> 01:09:27,201 line:-2
RealityKit automatically adjusts
to physical lighting conditions


1268
01:09:27,234 --> 01:09:31,872 line:-2
and grounds the experience in reality
by casting shadows on floors and tables.


1269
01:09:31,905 --> 01:09:35,075 line:-2
This makes your app look like
it belongs in the room.


1270
01:09:36,210 --> 01:09:39,012 line:-2
RealityKit also has significant
new capabilities,


1271
01:09:39,046 --> 01:09:42,182 line:-2
including the ability to create portals
into 3D scenes–


1272
01:09:42,216 --> 01:09:44,551 line:-1
like the dinosaur we saw in the Keynote–


1273
01:09:44,585 --> 01:09:47,888 line:-2
to render incredibly sharp text,
so you can read comfortably,


1274
01:09:47,921 --> 01:09:52,759 line:-2
and a customizable material system
to create stunning visual effects.


1275
01:09:52,793 --> 01:09:55,395 line:-2
Additionally,
rendering is even more efficient


1276
01:09:55,429 --> 01:10:00,100 line:-2
on Apple Vision Pro by using a technique
called Dynamic foveation.


1277
01:10:00,133 --> 01:10:03,003 line:-2
RealityKit leverages eye tracking
to selectively render


1278
01:10:03,036 --> 01:10:06,373 line:-2
regions the user is focusing on
at very high fidelity,


1279
01:10:06,406 --> 01:10:09,309 line:-2
reducing the rendering cost
of content in the periphery,


1280
01:10:09,343 --> 01:10:13,680 line:-2
and enabling your apps to maximize
the processing power of the device.


1281
01:10:13,714 --> 01:10:17,951 line:-2
RealityKit renders your 3D models
with stunning photorealistic results


1282
01:10:17,985 --> 01:10:20,320 line:-2
by allowing you to specify
its physical properties,


1283
01:10:20,354 --> 01:10:23,023 line:-1
such as how reflective or metallic it is.


1284
01:10:23,056 --> 01:10:25,759 line:-2
By default,
RealityKit renders virtual content


1285
01:10:25,792 --> 01:10:30,163 line:-2
so its lighting is connected to the
lighting conditions of the physical room.


1286
01:10:30,197 --> 01:10:32,699 line:-2
If you want to customize
or even extend the realism


1287
01:10:32,733 --> 01:10:34,801 line:-1
based on your creative intent,


1288
01:10:34,835 --> 01:10:37,938 line:-2
you can provide
an image based lighting asset, or IBL,


1289
01:10:37,971 --> 01:10:40,641 line:-1
to individualize the look.


1290
01:10:40,674 --> 01:10:44,978 line:-2
For authoring your materials,
RealityKit has adopted MaterialX,


1291
01:10:45,012 --> 01:10:48,515 line:-2
an open standard for specifying surface
and geometry shaders


1292
01:10:48,549 --> 01:10:53,153 line:-2
used by leading film, visual effects,
entertainment, and gaming companies.


1293
01:10:53,187 --> 01:10:55,756 line:-1
The broad support for MaterialX


1294
01:10:55,789 --> 01:10:58,292 line:-2
across a variety
of industry leading creation tools


1295
01:10:58,325 --> 01:11:00,527 line:-1
makes it much easier to write shaders.


1296
01:11:00,561 --> 01:11:04,364 line:0
MaterialX lets you design
and rapidly iterate on the look


1297
01:11:04,398 --> 01:11:06,099 line:0
of individual materials,


1298
01:11:06,133 --> 01:11:09,002 line:0
by allowing you to define
its shading properties.


1299
01:11:09,036 --> 01:11:11,672 line:-2
There are repositories of materials
you can choose from,


1300
01:11:11,705 --> 01:11:14,107 line:-1
and helpful tools like Houdini and Maya


1301
01:11:14,141 --> 01:11:17,411 line:-2
that can be used
to author your own custom shaders.


1302
01:11:18,345 --> 01:11:22,516 line:-2
RealityKit provides a new SwiftUI view
called RealityView.


1303
01:11:22,549 --> 01:11:26,153 line:-2
RealityView can be used
within windows, volumes, and spaces,


1304
01:11:26,186 --> 01:11:28,655 line:-2
letting you place 3D content
anywhere you want


1305
01:11:28,689 --> 01:11:30,924 line:-1
within the scenes that you control.


1306
01:11:30,958 --> 01:11:32,593 line:-1
It also supports Attachments,


1307
01:11:32,626 --> 01:11:36,630 line:-2
which allow you to embed 2D SwiftUI views
with your 3D content.


1308
01:11:36,663 --> 01:11:39,032 line:-1
Alongside SwiftUI and RealityKit,


1309
01:11:39,066 --> 01:11:40,834 line:-1
a third powerful framework enables you


1310
01:11:40,868 --> 01:11:45,572 line:-2
to take full advantage
of the user's surroundings: ARKit.


1311
01:11:45,606 --> 01:11:48,108 line:-2
ARKit understands the space
around the user,


1312
01:11:48,141 --> 01:11:50,844 line:-2
allowing app content to interact
with the room,


1313
01:11:50,878 --> 01:11:55,916 line:-2
whether it's a ball bouncing off the floor
or water splashing on the wall.


1314
01:11:55,949 --> 01:11:59,119 line:-2
ARKit hosts the real-time algorithms
on visionOS


1315
01:11:59,152 --> 01:12:02,222 line:-2
that power a host
of core system capabilities.


1316
01:12:02,256 --> 01:12:04,291 line:-1
These algorithms are always running,


1317
01:12:04,324 --> 01:12:08,128 line:-2
which means your apps automatically
benefit from ARKit in the Shared Space,


1318
01:12:08,161 --> 01:12:10,330 line:-1
no matter how they are built.


1319
01:12:10,364 --> 01:12:13,233 line:-2
Persistence and world mapping
are handled by the system.


1320
01:12:13,267 --> 01:12:15,602 line:-2
Segmentation, matting,
and environment lighting


1321
01:12:15,636 --> 01:12:19,039 line:-2
are automatically applied
to the entire space.


1322
01:12:19,072 --> 01:12:20,407 line:-1
And with the user's permission,


1323
01:12:20,440 --> 01:12:25,612 line:-2
ARKit features can be made directly
available to your Full Space apps.


1324
01:12:25,646 --> 01:12:29,349 line:-2
Inside a Full Space, your apps
can interact realistically with the room


1325
01:12:29,383 --> 01:12:32,286 line:-1
by leveraging ARKit's Plane Estimation,


1326
01:12:32,319 --> 01:12:34,788 line:-2
Scene Reconstruction,
Image Anchoring,


1327
01:12:34,821 --> 01:12:36,290 line:-1
and World Tracking,


1328
01:12:36,323 --> 01:12:40,160 line:-2
which uses the same Anchor concepts
as ARKit on iOS.


1329
01:12:40,194 --> 01:12:44,998 line:-2
This makes migrating
your existing ARKit app to visionOS easy.


1330
01:12:45,032 --> 01:12:47,868 line:-1
And on visionOS, you now also get access


1331
01:12:47,901 --> 01:12:50,370 line:-1
to Skeletal Hand Tracking.


1332
01:12:50,404 --> 01:12:53,974 line:-2
You can use hand tracking to create
custom gestures for your app experience


1333
01:12:54,007 --> 01:12:57,811 line:-2
or even augment the user's hands
with digital information.


1334
01:12:57,845 --> 01:13:00,781 line:-2
ARKit provides positioning
and orientation of joints


1335
01:13:00,814 --> 01:13:04,785 line:-2
in the same skeletal model
introduced on iOS.


1336
01:13:04,818 --> 01:13:09,723 line:-2
With the integrated approach
across SwiftUI, RealityKit, and ARKit,


1337
01:13:09,756 --> 01:13:11,425 line:-2
you can leverage
the learning and investment


1338
01:13:11,458 --> 01:13:14,895 line:-2
you've already put into Apple platforms
over the years.


1339
01:13:14,928 --> 01:13:19,533 line:-2
And that includes efforts you have put
into making your apps accessible.


1340
01:13:20,801 --> 01:13:22,336 line:-1
This is especially meaningful


1341
01:13:22,369 --> 01:13:26,640 line:-2
because spatial computing opens up
great new opportunities for accessibility.


1342
01:13:26,673 --> 01:13:30,978 line:-2
On Apple Vision Pro,
users with physical and motor disabilities


1343
01:13:31,011 --> 01:13:33,947 line:-2
can interact with their device
entirely with their eyes,


1344
01:13:33,981 --> 01:13:37,084 line:-1
or their voice, or a combination of both.


1345
01:13:37,117 --> 01:13:41,054 line:-2
Users can also select with their
index finger, their wrist, or their head


1346
01:13:41,088 --> 01:13:44,291 line:-2
as an alternative pointer
for navigating Vision Pro.


1347
01:13:44,324 --> 01:13:47,060 line:-2
You'll make your apps accessible
on visionOS


1348
01:13:47,094 --> 01:13:50,497 line:-2
with the same techniques you've used
for years on our other platforms.


1349
01:13:50,531 --> 01:13:54,334 line:-2
Accessibility Inspector analyzes
and reports accessibility issues


1350
01:13:54,368 --> 01:13:55,903 line:-1
in your visionOS apps,


1351
01:13:55,936 --> 01:13:59,139 line:-2
and gives you suggestions
on how to make them more accessible.


1352
01:13:59,173 --> 01:14:02,543 line:-2
And with the accessibility support
built into our frameworks,


1353
01:14:02,576 --> 01:14:04,545 line:-1
it's easy to bring your visionOS apps


1354
01:14:04,578 --> 01:14:07,581 line:-2
and experiences
to users with disabilities.


1355
01:14:07,614 --> 01:14:10,984 line:-2
For example, you can help VoiceOver
describe objects in your apps


1356
01:14:11,018 --> 01:14:13,654 line:-1
to users who are blind or have low vision


1357
01:14:13,687 --> 01:14:16,456 line:-2
by adding labels and descriptions
that convey information,


1358
01:14:16,490 --> 01:14:18,392 line:-1
like an object's physical appearance.


1359
01:14:18,425 --> 01:14:20,360 line:-1
You can also incorporate user preferences


1360
01:14:20,394 --> 01:14:23,130 line:-2
to make your apps more accessible
by design,


1361
01:14:23,163 --> 01:14:26,834 line:-2
such as Dynamic Type
for larger text sizes,


1362
01:14:26,867 --> 01:14:29,536 line:-2
Reduced Transparency
for better legibility,


1363
01:14:29,570 --> 01:14:32,072 line:-1
and alternatives to head locked content.


1364
01:14:32,105 --> 01:14:35,209 line:-2
By making use
of these familiar APIs and tools,


1365
01:14:35,242 --> 01:14:39,012 line:-2
your apps will play a huge role
in making spatial computing accessible


1366
01:14:39,046 --> 01:14:41,248 line:-1
to users around the world.


1367
01:14:41,281 --> 01:14:43,951 line:-2
So that's an introduction
to the powerful frameworks you can use


1368
01:14:43,984 --> 01:14:46,253 line:-1
to build amazing visionOS apps.


1369
01:14:46,286 --> 01:14:50,157 line:-2
Now here's Thessa to talk about
all the tools available to you.


1370
01:14:50,190 --> 01:14:52,793 line:0
Thessa Buscar-Alegria:
As you start building apps for Vision Pro,


1371
01:14:52,826 --> 01:14:55,662 line:0
you'll recognize more
than just the frameworks.


1372
01:14:55,696 --> 01:15:00,234 line:-2
Our developer tools have also been updated
to support visionOS.


1373
01:15:00,267 --> 01:15:02,302 line:-1
Just like for all our other platforms,


1374
01:15:02,336 --> 01:15:06,673 line:-2
Xcode is at the center of your development
experience for Vision Pro.


1375
01:15:06,707 --> 01:15:10,978 line:-2
You can add a visionOS destination
to your existing projects,


1376
01:15:11,011 --> 01:15:13,881 line:-1
or you can build an entirely new app


1377
01:15:13,914 --> 01:15:17,651 line:-2
dedicated to the unique capabilities
of this platform.


1378
01:15:17,684 --> 01:15:21,855 line:-2
The first step in building your app
is getting the look right


1379
01:15:21,889 --> 01:15:24,791 line:-1
across both 2D and 3D content.


1380
01:15:24,825 --> 01:15:30,197 line:-2
Xcode Previews lets you rapidly iterate
on appearance without leaving the editor.


1381
01:15:30,230 --> 01:15:32,966 line:-2
When it's time to start testing
your entire app,


1382
01:15:33,000 --> 01:15:34,735 line:-1
you can move to the simulator,


1383
01:15:34,768 --> 01:15:39,006 line:-2
which provides a powerful environment
to run and debug your app.


1384
01:15:39,039 --> 01:15:42,242 line:-2
You can move and look around the scene
using a keyboard,


1385
01:15:42,276 --> 01:15:45,579 line:-1
trackpad, or a compatible game controller.


1386
01:15:45,612 --> 01:15:50,217 line:-2
And you can interact with your app
by simulating the system gestures.


1387
01:15:50,250 --> 01:15:53,854 line:-2
The simulator also provides
three different simulated scenes


1388
01:15:53,887 --> 01:15:56,290 line:-1
with day and nighttime lighting conditions


1389
01:15:56,323 --> 01:15:58,559 line:-1
to help you visualize your app.


1390
01:15:58,592 --> 01:16:00,894 line:-2
When it comes to developing
with your Vision Pro,


1391
01:16:00,928 --> 01:16:04,998 line:-2
you'll be building and running your app
on the device to make sure it's working.


1392
01:16:05,032 --> 01:16:08,468 line:-2
I'm super excited
to share this additional feature


1393
01:16:08,502 --> 01:16:10,804 line:-1
that will change the way you work.


1394
01:16:10,838 --> 01:16:12,873 line:-1
Mac Virtual Display lets you bring


1395
01:16:12,906 --> 01:16:16,543 line:-2
a high-fidelity 4K virtual monitor
of your Mac


1396
01:16:16,577 --> 01:16:20,347 line:-2
right into your Vision Pro
just by looking at it.


1397
01:16:20,380 --> 01:16:22,983 line:-2
You can use the full capabilities
of your Mac


1398
01:16:23,016 --> 01:16:26,320 line:-2
from within your device,
and that includes Xcode.


1399
01:16:26,353 --> 01:16:31,358 line:-2
This is an incredible
end-to-end development experience:


1400
01:16:31,391 --> 01:16:34,261 line:-1
coding, testing, and debugging your app


1401
01:16:34,294 --> 01:16:37,297 line:-1
on your Vision Pro the entire time,


1402
01:16:37,331 --> 01:16:40,901 line:-2
without any interruptions
or loss of context.


1403
01:16:40,934 --> 01:16:43,770 line:-2
Sometimes,
you need to dig into the details


1404
01:16:43,804 --> 01:16:46,607 line:-2
of how your app's content
relates to the real world.


1405
01:16:46,640 --> 01:16:49,009 line:-2
When your app interacts
with the user's room,


1406
01:16:49,042 --> 01:16:51,211 line:-1
it can present unique challenges,


1407
01:16:51,245 --> 01:16:54,615 line:-2
such as 3D content
visually clipping through walls.


1408
01:16:54,648 --> 01:16:57,885 line:-2
Xcode features
practical debug visualizations


1409
01:16:57,918 --> 01:17:00,454 line:-2
to help you explore collisions,
occlusions,


1410
01:17:00,487 --> 01:17:04,558 line:-2
and scene understanding
as it relates to your 3D content.


1411
01:17:04,591 --> 01:17:09,196 line:-2
These visualizations work both
in the simulator and on Vision Pro.


1412
01:17:09,229 --> 01:17:11,431 line:-1
As you evolve your visionOS apps,


1413
01:17:11,465 --> 01:17:13,233 line:-1
they will become more spatial,


1414
01:17:13,267 --> 01:17:15,802 line:-2
breaking outside the boundaries
of flat windows


1415
01:17:15,836 --> 01:17:19,806 line:-2
and bringing 3D experiences to users
unlike ever before.


1416
01:17:19,840 --> 01:17:23,477 line:-2
Doing this right
requires a new visual tool.


1417
01:17:23,510 --> 01:17:27,481 line:0
That's why we made Reality Composer Pro.


1418
01:17:27,514 --> 01:17:30,551 line:-1
Reality Composer Pro is an application


1419
01:17:30,584 --> 01:17:35,622 line:-2
that lets you preview and prepare
3D content for your visionOS apps.


1420
01:17:35,656 --> 01:17:41,895 line:-2
You can import and organize assets such as
3D models, animations, images, and sounds.


1421
01:17:41,929 --> 01:17:45,098 line:-2
It integrates tightly
with the Xcode build process


1422
01:17:45,132 --> 01:17:48,769 line:-2
to optimize your assets
for use on Vision Pro.


1423
01:17:48,802 --> 01:17:51,605 line:-2
You can easily send your content
to Vision Pro


1424
01:17:51,638 --> 01:17:54,308 line:-1
to preview, size, and rotate it.


1425
01:17:54,341 --> 01:17:56,910 line:-1
Push new changes at any time,


1426
01:17:56,944 --> 01:18:01,014 line:-2
and see how your content looks
before ever typing a line of code.


1427
01:18:01,048 --> 01:18:03,817 line:-1
Here's Jason to give you a tour.


1428
01:18:03,851 --> 01:18:06,086 line:-2
Jason Cahill: I've been working
on one of our sample projects


1429
01:18:06,119 --> 01:18:08,388 line:0
that takes you through the Solar System.


1430
01:18:08,422 --> 01:18:13,227 line:0
I want to make sure
my 3D content looks great Vision Pro,


1431
01:18:13,260 --> 01:18:17,998 line:-2
and I'm going to use Reality Composer Pro
to update it now.


1432
01:18:18,031 --> 01:18:21,635 line:-2
I'll start by importing
the satellite model and images


1433
01:18:21,668 --> 01:18:24,304 line:-1
that I made in my 3D modeling application.


1434
01:18:24,338 --> 01:18:29,142 line:-2
This model has a lot of details,
but presently no materials.


1435
01:18:29,176 --> 01:18:32,679 line:-2
I'll create a custom material
in Reality Composer Pro,


1436
01:18:32,713 --> 01:18:37,251 line:-2
and then I'll jump to the Shader Graph
where we can customize it.


1437
01:18:37,284 --> 01:18:39,987 line:-2
It's easy and fun
to add some simple images


1438
01:18:40,020 --> 01:18:43,390 line:-2
and function nodes
to change the look of an object,


1439
01:18:43,423 --> 01:18:45,626 line:-1
all without needing to get into code.


1440
01:18:45,659 --> 01:18:48,662 line:-2
You can try things
and see the results instantly,


1441
01:18:48,695 --> 01:18:53,100 line:-2
and you'll never get compiler errors
from having to hand-type shaders.


1442
01:18:53,133 --> 01:18:55,869 line:-1
I'll repeat this for the other nodes too.


1443
01:18:55,903 --> 01:19:01,041 line:-2
At any time, I can preview my work
right on my Vision Pro.


1444
01:19:01,074 --> 01:19:03,644 line:-1
I can scale it,


1445
01:19:03,677 --> 01:19:05,445 line:-1
move it,


1446
01:19:05,479 --> 01:19:10,017 line:-2
or rotate it, and make sure
it looks and feels how I want.


1447
01:19:10,951 --> 01:19:12,786 line:-1
I like these changes.


1448
01:19:12,819 --> 01:19:15,289 line:-1
And then jump back into Xcode,


1449
01:19:15,322 --> 01:19:17,991 line:-2
where my changes have been reflected
in my project


1450
01:19:18,025 --> 01:19:22,529 line:-2
and are ready for use in Xcode Previews,
or the Simulator.


1451
01:19:22,563 --> 01:19:27,167 line:-2
Just like that, ready for me
to load in code and use in my app!


1452
01:19:27,201 --> 01:19:29,102 line:-1
With Reality Composer Pro,


1453
01:19:29,136 --> 01:19:31,705 line:-1
your visionOS development process


1454
01:19:31,738 --> 01:19:35,976 line:-2
has a powerful new tool
that works side by side with Xcode,


1455
01:19:36,009 --> 01:19:39,079 line:-1
making previewing and preparing 3D content


1456
01:19:39,112 --> 01:19:42,382 line:-1
as easy as building and running your code.


1457
01:19:42,416 --> 01:19:44,551 line:-2
Thessa:
When you're ready to beta test your app,


1458
01:19:44,585 --> 01:19:48,222 line:0
TestFlight will be available to use
on Vision Pro from the start.


1459
01:19:48,255 --> 01:19:50,357 line:-1
Submit new builds to TestFlight


1460
01:19:50,390 --> 01:19:53,327 line:-2
just as you would expect
through App Store Connect,


1461
01:19:53,360 --> 01:19:55,829 line:-1
Xcode, or Xcode Cloud,


1462
01:19:55,863 --> 01:19:59,600 line:-2
and testers can install them
and provide valuable feedback


1463
01:19:59,633 --> 01:20:01,869 line:-1
right from the native TestFlight app.


1464
01:20:01,902 --> 01:20:04,071 line:-1
They can also access beta builds


1465
01:20:04,104 --> 01:20:07,774 line:-2
of your compatible iPad and iPhone apps
on Vision Pro.


1466
01:20:07,808 --> 01:20:12,312 line:-2
With this family of development tools
and services, from Xcode to TestFlight,


1467
01:20:12,346 --> 01:20:14,481 line:-1
and now Reality Composer Pro,


1468
01:20:14,515 --> 01:20:19,553 line:-2
you'll be well on your way
to making amazing apps for Vision Pro.


1469
01:20:19,586 --> 01:20:22,122 line:-1
And now, back to Mike.


1470
01:20:22,155 --> 01:20:26,693 line:-2
Mike: Many of you have invested years
building 3D apps and games with Unity.


1471
01:20:26,727 --> 01:20:29,663 line:-2
To make it easy to bring your apps
to Vision Pro,


1472
01:20:29,696 --> 01:20:32,466 line:-2
Apple and Unity
have been deeply collaborating


1473
01:20:32,499 --> 01:20:36,537 line:-2
to layer Unity's real-time engine
on top of RealityKit


1474
01:20:36,570 --> 01:20:40,607 line:-2
and enable their development tools
to target visionOS.


1475
01:20:40,641 --> 01:20:46,513 line:-2
This means that Unity-created apps
can coexist with other visionOS apps


1476
01:20:46,547 --> 01:20:48,215 line:-1
in the Shared Space,


1477
01:20:48,248 --> 01:20:52,286 line:-2
and take full advantage of
the unique benefits of Apple Vision Pro.


1478
01:20:52,319 --> 01:20:55,956 line:-2
To tell you more,
I'd like to introduce Ralph from Unity.


1479
01:20:55,989 --> 01:20:57,291 line:-1
Ralph Hauwert: Thank you, Mike.


1480
01:20:57,324 --> 01:21:00,194 line:0
It's been truly exciting
to collaborate with Apple


1481
01:21:00,227 --> 01:21:03,130 line:0
on our deep integration for visionOS.


1482
01:21:03,163 --> 01:21:06,166 line:0
Now, you can use Unity's robust
and familiar authoring tools


1483
01:21:06,200 --> 01:21:09,169 line:-1
to create new visionOS games and apps.


1484
01:21:09,203 --> 01:21:13,607 line:-2
And you can bring your existing
Unity-created projects to Vision Pro


1485
01:21:13,640 --> 01:21:17,578 line:-2
to reimagine your experiences
for this new platform.


1486
01:21:17,611 --> 01:21:21,114 line:-2
Your apps get access
to all the benefits of visionOS,


1487
01:21:21,148 --> 01:21:25,219 line:-2
such as high-resolution pass-through
and Dynamic Foveated Rendering,


1488
01:21:25,252 --> 01:21:30,490 line:-2
in addition to familiar Unity features
like AR Foundation.


1489
01:21:30,524 --> 01:21:34,795 line:-2
And with this deep integration
between Unity and visionOS,


1490
01:21:34,828 --> 01:21:39,499 line:-2
your apps can even appear
alongside other apps in the Shared Space.


1491
01:21:39,533 --> 01:21:43,303 line:-2
By combining Unity's authoring
and simulation capabilities


1492
01:21:43,337 --> 01:21:46,206 line:-1
with RealityKit's managed app rendering,


1493
01:21:46,240 --> 01:21:50,944 line:-2
content created with Unity
looks and feels at home on visionOS.


1494
01:21:50,978 --> 01:21:54,915 line:-2
With Unity, you'll be able
to get started quickly with our community,


1495
01:21:54,948 --> 01:21:58,018 line:-1
our tutorials, and templates.


1496
01:21:58,051 --> 01:22:00,454 line:-2
We believe
that Apple Vision Pro has launched


1497
01:22:00,487 --> 01:22:02,856 line:-1
the new frontier of spatial computing,


1498
01:22:02,890 --> 01:22:06,293 line:-2
and we are really excited
to see the brand new apps and games


1499
01:22:06,326 --> 01:22:08,262 line:-1
that you will create.


1500
01:22:08,295 --> 01:22:09,830 line:-1
Mike: Thank you so much, Ralph.


1501
01:22:09,863 --> 01:22:12,466 line:-1
It's been amazing working with you.


1502
01:22:12,499 --> 01:22:15,302 line:-2
There are a few more
fundamental features of visionOS


1503
01:22:15,335 --> 01:22:18,138 line:-2
that you should know
when you're planning your next steps.


1504
01:22:18,172 --> 01:22:21,308 line:-1
Here's Jeff to give you all the details.


1505
01:22:21,341 --> 01:22:23,744 line:0
Jeff Norris: The frameworks you use
to create apps for Vision Pro


1506
01:22:23,777 --> 01:22:25,712 line:0
were designed with two goals in mind:


1507
01:22:25,746 --> 01:22:28,081 line:0
to enable you to leverage
the platform's powerful hardware


1508
01:22:28,115 --> 01:22:31,818 line:-2
and software with minimal effort,
and to preserve user privacy.


1509
01:22:31,852 --> 01:22:34,588 line:-2
You can see these principles at work
throughout the system,


1510
01:22:34,621 --> 01:22:36,557 line:-2
from the way apps blend in
with their surroundings


1511
01:22:36,590 --> 01:22:38,559 line:-1
to the natural user interactions


1512
01:22:38,592 --> 01:22:41,361 line:-2
to the new possibilities
for collaboration.


1513
01:22:41,395 --> 01:22:44,731 line:-2
visionOS builds a 3D model
of the user's surroundings


1514
01:22:44,765 --> 01:22:47,201 line:-1
to enable realistic lighting and shadows.


1515
01:22:47,234 --> 01:22:50,637 line:-2
As a result, apps can naturally blend in
with the world around them


1516
01:22:50,671 --> 01:22:53,040 line:-1
without needing access to camera data.


1517
01:22:53,073 --> 01:22:55,742 line:-1
visionOS uses the same 3D model


1518
01:22:55,776 --> 01:22:59,313 line:-2
to enable the next generation
of spatial audio for your apps.


1519
01:22:59,346 --> 01:23:02,749 line:-2
In the real world, sound reverberates
through and around a space,


1520
01:23:02,783 --> 01:23:06,653 line:-2
bouncing off walls and furniture
before arriving at a person's ears.


1521
01:23:06,687 --> 01:23:09,756 line:-2
Your app's virtual sounds
should behave the same way.


1522
01:23:09,790 --> 01:23:13,961 line:-2
This requires a sophisticated
understanding of the user's surroundings.


1523
01:23:13,994 --> 01:23:16,730 line:-1
The PHASE spatial audio engine in visionOS


1524
01:23:16,763 --> 01:23:19,766 line:-2
fuses acoustic sensing
with 3D scene understanding


1525
01:23:19,800 --> 01:23:24,071 line:-2
to create a detailed model
of the sonic characteristics of the space.


1526
01:23:24,104 --> 01:23:27,407 line:-2
As sound sources and the user
move around the environment,


1527
01:23:27,441 --> 01:23:31,011 line:-2
PHASE updates its audio ray traced
simulation in real time.


1528
01:23:31,044 --> 01:23:35,015 line:-2
This model combines with Apple's
Personalized Spatial Audio technology


1529
01:23:35,048 --> 01:23:37,451 line:-2
to tailor the experience
to each individual


1530
01:23:37,484 --> 01:23:40,087 line:-1
and their surroundings, automatically.


1531
01:23:40,120 --> 01:23:43,223 line:-2
All of this incredible complexity
is managed for you,


1532
01:23:43,257 --> 01:23:46,960 line:-2
and you don't need access to any details
of the user's physical space.


1533
01:23:46,994 --> 01:23:50,497 line:-2
Using RealityKit, you simply decide
where you want sounds to come from,


1534
01:23:50,531 --> 01:23:53,700 line:-2
and visionOS naturally mixes them
into the real world.


1535
01:23:53,734 --> 01:23:58,105 line:-2
Just like the algorithms that power
realistic lighting and audio in your apps,


1536
01:23:58,138 --> 01:24:03,710 line:-2
user input on visionOS works automatically
and is private by design.


1537
01:24:03,744 --> 01:24:06,880 line:-2
Hover effects render automatically
for any UI elements


1538
01:24:06,914 --> 01:24:09,783 line:-1
built using SwiftUI or RealityKit.


1539
01:24:09,816 --> 01:24:13,820 line:-2
If a user looks a button,
it highlights before they tap on it.


1540
01:24:13,854 --> 01:24:16,857 line:-2
And just like a click of a mouse,
or a tap on an iPhone,


1541
01:24:16,890 --> 01:24:20,727 line:-2
your app is notified of a selection
when a user taps their fingers.


1542
01:24:20,761 --> 01:24:22,796 line:-2
The user gets the visual feedback
they need,


1543
01:24:22,829 --> 01:24:25,132 line:-2
and you receive
the interactions you expect


1544
01:24:25,165 --> 01:24:27,701 line:-2
without needing to know
where the user looks before they tap.


1545
01:24:28,802 --> 01:24:33,106 line:-2
Sharing and collaboration are a central
part of the Vision Pro experience.


1546
01:24:33,140 --> 01:24:35,075 line:-1
Just like on macOS,


1547
01:24:35,108 --> 01:24:39,313 line:-2
Vision Pro users can share any app window
with others on a FaceTime call.


1548
01:24:39,346 --> 01:24:43,784 line:-2
And with SharePlay, next-generation
shared experiences become possible.


1549
01:24:43,817 --> 01:24:46,920 line:-2
When your app adopts SharePlay
with the GroupActivities API,


1550
01:24:46,954 --> 01:24:49,523 line:-2
the sharing control over each window
adds an option


1551
01:24:49,556 --> 01:24:52,092 line:-2
that launches your app for everyone
on the call.


1552
01:24:52,125 --> 01:24:55,162 line:-2
This allows them to participate
in a truly shared experience,


1553
01:24:55,195 --> 01:24:57,197 line:-1
together, in real time.


1554
01:24:57,231 --> 01:24:59,867 line:-2
You decide how your app
can be used collaboratively,


1555
01:24:59,900 --> 01:25:02,903 line:-2
just as you have for SharePlay
on our other platforms.


1556
01:25:02,936 --> 01:25:05,506 line:-1
A Vision Pro user on a FaceTime call


1557
01:25:05,539 --> 01:25:08,342 line:-2
appears to other participants
as a Persona–


1558
01:25:08,375 --> 01:25:12,479 line:-2
a natural representation created
with advanced machine learning techniques,


1559
01:25:12,513 --> 01:25:15,382 line:-2
that dynamically matches
their facial and hand movements.


1560
01:25:15,415 --> 01:25:20,420 line:-2
Personas appear to other Vision Pro users
with three-dimensional volume and depth.


1561
01:25:20,454 --> 01:25:23,624 line:-2
But we want to take FaceTime
to the next level on Vision Pro


1562
01:25:23,657 --> 01:25:28,028 line:-2
and empower users anywhere to interact
like they are actually in a room together.


1563
01:25:28,061 --> 01:25:30,430 line:-2
This experience
is still in its early form,


1564
01:25:30,464 --> 01:25:34,234 line:-2
and we're excited to share it
with you here for the first time.


1565
01:25:34,268 --> 01:25:39,640 line:-2
Spatial Personas allow Vision Pro users
to break out of the familiar FaceTime tile


1566
01:25:39,673 --> 01:25:43,744 line:-2
and feel more present, like they are
gathered in the same physical space.


1567
01:25:43,777 --> 01:25:49,616 line:-2
visionOS ensures that users and apps have
a shared and consistent spatial context.


1568
01:25:49,650 --> 01:25:52,886 line:-2
Your apps can take advantage
of this new context with SharePlay.


1569
01:25:52,920 --> 01:25:56,290 line:-2
Now, beyond just synchronizing changes
in your app between users,


1570
01:25:56,323 --> 01:25:58,926 line:-2
you can respond
to a user's physical actions,


1571
01:25:58,959 --> 01:26:01,228 line:-2
so that standing together
at a Freeform board


1572
01:26:01,261 --> 01:26:04,731 line:-2
or moving pieces in a tabletop game
feels natural.


1573
01:26:04,765 --> 01:26:08,135 line:-2
We want your apps to be a part
of this incredible new experience,


1574
01:26:08,168 --> 01:26:11,338 line:-2
and your feedback will be important
as it continues to develop.


1575
01:26:11,371 --> 01:26:14,241 line:-2
That's why we're making
a developer preview of Spatial Personas


1576
01:26:14,274 --> 01:26:16,109 line:-1
available to you later this year.


1577
01:26:16,143 --> 01:26:19,980 line:-2
These are just a few more examples
of the rich, extensive technologies


1578
01:26:20,013 --> 01:26:22,616 line:-1
you can take advantage of on visionOS.


1579
01:26:22,649 --> 01:26:25,586 line:-2
Now, here's Linda
to talk about where you'll go from here.


1580
01:26:26,620 --> 01:26:27,921 line:0
Linda Dong:
Now that you've been introduced


1581
01:26:27,955 --> 01:26:32,226 line:0
to Apple Vision Pro and visionOS,
what's next?


1582
01:26:32,259 --> 01:26:34,628 line:-1
Your development journey starts today.


1583
01:26:34,661 --> 01:26:37,931 line:-2
We encourage you to dive in
and learn as much as you can


1584
01:26:37,965 --> 01:26:42,402 line:-2
as you begin designing, developing,
and testing for Vision Pro.


1585
01:26:42,436 --> 01:26:47,307 line:-2
The visionOS SDK,
along with an updated Xcode and Simulator,


1586
01:26:47,341 --> 01:26:51,478 line:-2
and Reality Composer Pro,
will be available later this month,


1587
01:26:51,512 --> 01:26:53,981 line:-1
so you can start working on your ideas.


1588
01:26:54,014 --> 01:26:57,784 line:-2
You'll also have access
to extensive technical documentation,


1589
01:26:57,818 --> 01:26:59,553 line:-1
new design kits and tools,


1590
01:26:59,586 --> 01:27:04,157 line:-2
and an updated Human Interface Guidelines
for visionOS.


1591
01:27:04,191 --> 01:27:06,493 line:-1
In addition to the Vision Pro Simulator,


1592
01:27:06,527 --> 01:27:10,931 line:-2
we also have options for you to see
how your app works on Vision Pro.


1593
01:27:10,964 --> 01:27:15,102 line:-2
This summer we're launching
the Apple Vision Pro Developer Labs,


1594
01:27:15,135 --> 01:27:18,005 line:-2
where you can test your app
on Vision Pro hardware.


1595
01:27:18,038 --> 01:27:19,706 line:-1
You'll have hands-on support


1596
01:27:19,740 --> 01:27:22,342 line:-1
and an ability to preview your experience


1597
01:27:22,376 --> 01:27:25,279 line:-2
before Vision Pro is released
to customers.


1598
01:27:25,312 --> 01:27:28,916 line:-2
These labs will be located in
several locations around the world,


1599
01:27:28,949 --> 01:27:32,486 line:-2
including our Developer Center
here in Cupertino.


1600
01:27:32,519 --> 01:27:34,154 line:-1
And no matter where you are,


1601
01:27:34,188 --> 01:27:35,789 line:-1
you'll be able to submit a request


1602
01:27:35,822 --> 01:27:39,826 line:-2
for us to evaluate your app's
compatibility with Vision Pro.


1603
01:27:39,860 --> 01:27:43,096 line:-2
We'll install your app
and share any issues we may find.


1604
01:27:44,298 --> 01:27:47,201 line:-2
To get further updates
on these exciting opportunities,


1605
01:27:47,234 --> 01:27:49,403 line:-1
visit the Developer Website.


1606
01:27:49,436 --> 01:27:53,874 line:-2
And of course, Vision Pro will launch
with a brand new App Store,


1607
01:27:53,907 --> 01:27:57,878 line:-2
so people can discover and download
the incredible apps you create.


1608
01:27:57,911 --> 01:28:00,914 line:-2
We invite you to share your ideas
for this platform


1609
01:28:00,948 --> 01:28:03,984 line:-2
and we'll continue to support you
as you bring them to life!


1610
01:28:04,017 --> 01:28:06,086 line:-1
Now, back to Darin.


1611
01:28:06,119 --> 01:28:07,654 line:-1
Darin: What an exciting year!


1612
01:28:07,688 --> 01:28:09,957 line:-1
An incredible opportunity with visionOS,


1613
01:28:09,990 --> 01:28:12,559 line:-2
so many thoughtful additions
to each platform,


1614
01:28:12,593 --> 01:28:15,529 line:-2
like more places to surface your app
with WidgetKit,


1615
01:28:15,562 --> 01:28:17,631 line:-1
an expansion of Continuity Camera,


1616
01:28:17,664 --> 01:28:19,867 line:-1
and a new design for watchOS.


1617
01:28:19,900 --> 01:28:23,537 line:-2
Plus major enhancements to Swift
with Macros and Swift Data,


1618
01:28:23,570 --> 01:28:26,974 line:-1
and a big upgrade to Xcode Previews.


1619
01:28:27,007 --> 01:28:29,643 line:-2
This year's developments across languages,
frameworks,


1620
01:28:29,676 --> 01:28:32,713 line:-2
tools, and services
represent our deep commitment


1621
01:28:32,746 --> 01:28:34,581 line:-1
to helping you create unique experiences


1622
01:28:34,615 --> 01:28:37,751 line:-2
for billions of devices
across our platforms.


1623
01:28:37,784 --> 01:28:40,721 line:-2
These platforms span an increasingly
diverse range of products


1624
01:28:40,754 --> 01:28:43,524 line:-2
with a level of consistency
and integration


1625
01:28:43,557 --> 01:28:47,227 line:-2
that make a difference to you
as a developer and to users.


1626
01:28:47,261 --> 01:28:50,931 line:-2
We successfully scratched the surface
of what's new in our platforms.


1627
01:28:50,964 --> 01:28:55,502 line:-2
But to go further,
we have 175 in-depth video sessions–


1628
01:28:55,536 --> 01:28:57,538 line:-1
40 for visionOS alone–


1629
01:28:57,571 --> 01:29:00,741 line:-2
along with over 200 labs
staffed by Apple experts


1630
01:29:00,774 --> 01:29:03,877 line:-2
to answer your burning questions
as you build great apps.


1631
01:29:03,911 --> 01:29:07,181 line:-2
There's never been a better time
to be an Apple developer,


1632
01:29:07,214 --> 01:29:11,652 line:-2
and I have no doubt what you create
will astound and delight your users.


1633
01:29:11,685 --> 01:29:14,588 line:-1
Have a fantastic WWDC!


1634
01:29:14,621 --> 01:29:24,631 line:-1
♪ ♪


1635
01:29:26,867 --> 01:29:33,841 line:-1
♪ ♪

