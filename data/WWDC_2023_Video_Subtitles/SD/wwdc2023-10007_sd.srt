2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:10,577 --> 00:00:14,581 line:-2
Scott: Hi, I'm Scott Mionis
from the Virtualization Team,


4
00:00:14.615 --> 00:00:19.186 line:-2 align:center
and today we'll cover how features
in macOS Sonoma


5
00:00:19.219 --> 00:00:23.757 line:-2 align:center
enable you to create seamless
experiences with Virtualization.


6
00:00:23.790 --> 00:00:26.360 line:-2 align:center
Virtualization framework
lets you configure,


7
00:00:26,393 --> 00:00:29,096 line:-1
manage, and run virtual machines.


8
00:00:29.129 --> 00:00:32.766 line:-2 align:center
In macOS Sonoma,
virtual Macs and Linux virtual machines


9
00:00:32,799 --> 00:00:35,068 line:-1
are more powerful than ever.


10
00:00:35.102 --> 00:00:38.071 line:-2 align:center
They're easier to use,
and with new configuration options,


11
00:00:38.105 --> 00:00:41.074 line:-1 align:center
they are highly customizable.


12
00:00:41,108 --> 00:00:45,245 line:-2
There are a bunch of features
that make this possible.


13
00:00:45,279 --> 00:00:48,615 line:-2
In this session,
let's explore a few key items


14
00:00:48,649 --> 00:00:51,485 line:-2
and how to leverage them
in your applications.


15
00:00:51,518 --> 00:00:58,158 line:-2
First, new workflows in virtual machines
and improvements to the user experience.


16
00:00:58,192 --> 00:01:02,529 line:-2
Next, new storage
and keyboard configuration options.


17
00:01:02,563 --> 00:01:08,402 line:-2
And last, how Rosetta 2 is making x86_64
applications run even faster


18
00:01:08.435 --> 00:01:10.671 line:-1 align:center
in Linux virtual machines.


19
00:01:10,704 --> 00:01:15,776 line:-2
Let's dive into some of the new ways
to work with virtual machines.


20
00:01:15.809 --> 00:01:19.112 line:-1 align:center
We will go over two powerful new features.


21
00:01:19.146 --> 00:01:21.748 line:-1 align:center
First is the resizable display.


22
00:01:21,782 --> 00:01:24,151 line:-1
A new display option for virtual machines


23
00:01:24,184 --> 00:01:28,288 line:-2
that resizes at runtime
to fill the window.


24
00:01:28.322 --> 00:01:31.859 line:-2 align:center
And next,
saving and restoring a virtual machine.


25
00:01:31.892 --> 00:01:35.596 line:-2 align:center
A mechanism for serializing
a running virtual machine to disk


26
00:01:35.629 --> 00:01:38.031 line:-1 align:center
so it can be resumed later.


27
00:01:38,065 --> 00:01:41,535 line:-1
Let's start with the resizable display.


28
00:01:41.568 --> 00:01:46.273 line:-2 align:center
Screen size is a big part
of working on a virtual Mac.


29
00:01:46.306 --> 00:01:48.008 line:-1 align:center
With a resizable display,


30
00:01:48.041 --> 00:01:53.380 line:-2 align:center
the virtual machine dynamically adjusts
the screen resolution to fill the window,


31
00:01:53.413 --> 00:01:57.017 line:-2 align:center
making the most efficient
use of your space.


32
00:01:57,050 --> 00:01:58,752 line:-1
Let's put this into code.


33
00:02:00,087 --> 00:02:03,891 line:-2
To use the resizable display
in your own application,


34
00:02:03,924 --> 00:02:07,995 line:-1
First, initialize a VZVirtualMachineView.


35
00:02:09.630 --> 00:02:13.367 line:-2 align:center
To make the display resizable,
set the new


36
00:02:13.400 --> 00:02:17.704 line:-2 align:center
"automaticallyReconfiguresDisplay"
property to true.


37
00:02:17.738 --> 00:02:19.106 line:-1 align:center
And that's it!


38
00:02:19,139 --> 00:02:23,110 line:-2
Resizing the VZVirtualMachineView
will now automatically


39
00:02:23,143 --> 00:02:26,747 line:-2
tell the virtual machine
to adjust its display size.


40
00:02:26,780 --> 00:02:29,783 line:-2
And if you prefer
to keep the display fixed,


41
00:02:29,816 --> 00:02:33,020 line:-2
this property
can remain its default value.


42
00:02:33,053 --> 00:02:38,091 line:-2
Next, let's discuss saving,
and restoring a virtual machine.


43
00:02:38,125 --> 00:02:42,529 line:-2
Stopping a virtual machine
means powering off the VM.


44
00:02:42.563 --> 00:02:46.667 line:-2 align:center
Starting a virtual machine
means doing a cold boot.


45
00:02:46.700 --> 00:02:48.268 line:-1 align:center
But when working on a Mac,


46
00:02:48.302 --> 00:02:52.406 line:-2 align:center
most applications save your progress
as you work.


47
00:02:52.439 --> 00:02:55.042 line:-1 align:center
The same should hold for virtual machines.


48
00:02:56.643 --> 00:02:59.246 line:-1 align:center
Let's say I'm running a virtual machine,


49
00:02:59.279 --> 00:03:02.950 line:-2 align:center
And I want to close it
without losing my progress.


50
00:03:02.983 --> 00:03:05.919 line:-1 align:center
I can save my virtual machine to a file


51
00:03:05,953 --> 00:03:09,022 line:-1
and resume running it later.


52
00:03:09.056 --> 00:03:13.293 line:-1 align:center
Or, let's say I want to back up my work.


53
00:03:13,327 --> 00:03:17,197 line:-2
I can save my virtual machine
at any point,


54
00:03:17.231 --> 00:03:23.136 line:-2 align:center
making sure to clone external resources
like disk and auxiliary storage.


55
00:03:23,170 --> 00:03:26,139 line:-1
And if I want to jump back in time,


56
00:03:26.173 --> 00:03:28.509 line:-1 align:center
I can rewind the virtual machine,


57
00:03:28,542 --> 00:03:31,144 line:-1
right back to my previous state.


58
00:03:31.178 --> 00:03:33.881 line:-1 align:center
So much is possible with this feature.


59
00:03:33,914 --> 00:03:37,017 line:-1
So now let's put it into action.


60
00:03:37.050 --> 00:03:39.052 line:-1 align:center
I'm running macOS Sonoma,


61
00:03:39.086 --> 00:03:43.156 line:-2 align:center
and on my desktop is a virtual Mac,
also running macOS Sonoma,


62
00:03:43.190 --> 00:03:46.326 line:-1 align:center
in the Virtualization sample application.


63
00:03:46.360 --> 00:03:50.330 line:-2 align:center
And I'm doing some research for
my next exciting trip to the Apple Store.


64
00:03:50.364 --> 00:03:52.266 line:-1 align:center
Of course, I have Maps open,


65
00:03:52.299 --> 00:03:57.104 line:-2 align:center
and I'm browsing the Apple website
for more information on AirPods.


66
00:03:57,137 --> 00:04:01,842 line:-2
Now, I want to take a break
without turning off the virtual machine.


67
00:04:01.875 --> 00:04:05.679 line:-2 align:center
So I save my virtual machine
as I quit the application.


68
00:04:07,481 --> 00:04:10,817 line:-2
Later on,
I relaunch the application,


69
00:04:10.851 --> 00:04:14.588 line:-2 align:center
and my virtual machine resumes running
right where I left off,


70
00:04:14,621 --> 00:04:17,291 line:-1
with all my tabs open.


71
00:04:17.324 --> 00:04:21.061 line:-2 align:center
Let's explore how to build this
into your own application.


72
00:04:22,262 --> 00:04:26,733 line:-2
Before saving the virtual machine,
pause the virtual machine.


73
00:04:26.767 --> 00:04:32.840 line:-2 align:center
This puts the virtual machine into
a stable state, with execution suspended.


74
00:04:32,873 --> 00:04:37,211 line:-1
Then, invoke the new saveMachineState API,


75
00:04:37,244 --> 00:04:40,647 line:-2
which writes a file
to the URL you specify,


76
00:04:40,681 --> 00:04:44,751 line:-2
containing all of the runtime state
of the virtual machine.


77
00:04:44.785 --> 00:04:48.255 line:-2 align:center
Everything you need
to keep running it later.


78
00:04:48,288 --> 00:04:53,727 line:-2
External resources, like disk images,
should be copied separately.


79
00:04:53,760 --> 00:04:57,898 line:-2
Now that we've saved
the virtual machine, let's restore it.


80
00:04:59,700 --> 00:05:02,503 line:-2
To restore the state
of the virtual machine,


81
00:05:02,536 --> 00:05:07,841 line:-2
start by creating a new VZVirtualMachine
from the same configuration.


82
00:05:08,876 --> 00:05:11,512 line:-2
Instead of starting
the virtual machine directly,


83
00:05:11.545 --> 00:05:15.015 line:-1 align:center
which cold-boots the virtual machine,


84
00:05:15.048 --> 00:05:19.119 line:-1 align:center
invoke the new restoreMachineState API,


85
00:05:19.152 --> 00:05:23.857 line:-2 align:center
passing in the URL of the file
that was saved earlier.


86
00:05:23,891 --> 00:05:29,429 line:-2
And now, the virtual machine is
in exactly the same state as before.


87
00:05:30.497 --> 00:05:34.268 line:-2 align:center
You can resume running it
right where it left off.


88
00:05:34.301 --> 00:05:37.571 line:-2 align:center
When restoring a virtual machine
from a previous save,


89
00:05:37,604 --> 00:05:41,508 line:-1
there are a few things to keep in mind.


90
00:05:41,542 --> 00:05:46,246 line:-2
First, a save file contains
a virtual machine's data.


91
00:05:46,280 --> 00:05:48,949 line:-1
It needs to be protected.


92
00:05:48,982 --> 00:05:51,685 line:-1
These files are hardware encrypted


93
00:05:51,718 --> 00:05:55,255 line:-2
to provide
the strongest possible guarantees.


94
00:05:55.289 --> 00:05:59.660 line:-2 align:center
No other Mac or user account
can read another's save file,


95
00:05:59,693 --> 00:06:02,930 line:-1
or restore the virtual machine.


96
00:06:02,963 --> 00:06:06,433 line:-1
Also, files saved today are versioned,


97
00:06:06,466 --> 00:06:10,337 line:-2
so new capabilities can be added
in the future.


98
00:06:10,370 --> 00:06:15,342 line:-2
If the file format changes,
and a save file cannot be restored,


99
00:06:15,375 --> 00:06:21,748 line:-2
the framework will return specific error
codes so your application can handle it.


100
00:06:21,782 --> 00:06:26,553 line:-2
When this happens, discard the file,
reboot the virtual machine,


101
00:06:26,587 --> 00:06:28,222 line:-1
and you're back on track.


102
00:06:28,255 --> 00:06:33,460 line:-2
Next, let's explore some of the new ways
to build a virtual machine.


103
00:06:33,493 --> 00:06:36,196 line:-1
First is Network block device.


104
00:06:36,230 --> 00:06:39,466 line:-2
This allows a storage device
to be attached to a virtual machine


105
00:06:39,499 --> 00:06:41,835 line:-1
from over the network.


106
00:06:41.869 --> 00:06:45.572 line:-2 align:center
Next is support
for NVMe controller devices,


107
00:06:45,606 --> 00:06:49,209 line:-1
an alternative to the virtio block device.


108
00:06:49.243 --> 00:06:51.545 line:-1 align:center
And finally, the Mac keyboard,


109
00:06:51,578 --> 00:06:54,748 line:-2
which makes working
in a virtual Mac more intuitive


110
00:06:54.781 --> 00:06:57.885 line:-2 align:center
by mapping Apple-specific keys,
like the Globe key,


111
00:06:57,918 --> 00:07:00,721 line:-1
directly through to the virtual machine.


112
00:07:00,754 --> 00:07:04,291 line:-2
Let's start,
with Network block device.


113
00:07:04.324 --> 00:07:09.630 line:-2 align:center
In Virtualization framework,
storage is typically served locally,


114
00:07:09,663 --> 00:07:13,934 line:-2
reading and writing
a disk image on the same Mac.


115
00:07:13,967 --> 00:07:16,069 line:-1
But in macOS Sonoma,


116
00:07:16,103 --> 00:07:21,175 line:-2
Virtualization framework can serve storage
remotely from a server.


117
00:07:21,208 --> 00:07:25,445 line:-2
The protocol that allows this
is Network block device,


118
00:07:25,479 --> 00:07:27,781 line:-1
or NBD.


119
00:07:27,814 --> 00:07:30,851 line:-1
Let's dive into how it works.


120
00:07:30,884 --> 00:07:37,558 line:-2
Virtualization framework implements
the client side of the NBD protocol.


121
00:07:37,591 --> 00:07:40,561 line:-1
When a virtual machine accesses the disk,


122
00:07:40,594 --> 00:07:43,664 line:-1
the request is forwarded to an NBD Server


123
00:07:43.697 --> 00:07:47.935 line:-1 align:center
that adheres to the same specification.


124
00:07:47,968 --> 00:07:51,338 line:-1
After doing whatever I/O it needs,


125
00:07:51.371 --> 00:07:55.776 line:-1 align:center
the NBD server responds with data.


126
00:07:55,809 --> 00:08:00,180 line:-2
This is extremely flexible
for two reasons.


127
00:08:00,214 --> 00:08:05,319 line:-2
First, the storage can now reside
anywhere;


128
00:08:05.352 --> 00:08:07.788 line:-1 align:center
on the same Mac,


129
00:08:07.821 --> 00:08:11.725 line:-1 align:center
or on a remote server over the network.


130
00:08:11.758 --> 00:08:16.797 line:-2 align:center
And second, since the storage is managed
by your own server,


131
00:08:16,830 --> 00:08:20,267 line:-2
you can implement
whatever custom I/O you need,


132
00:08:20,300 --> 00:08:22,970 line:-1
whether that be custom image formats,


133
00:08:23,003 --> 00:08:25,339 line:-1
or even physical drives.


134
00:08:25.372 --> 00:08:29.910 line:-2 align:center
All of this completely transparently
to the virtual machine.


135
00:08:29.943 --> 00:08:32.379 line:-1 align:center
Let's look at how to set this up.


136
00:08:32,412 --> 00:08:35,282 line:-1
In Virtualization framework API,


137
00:08:35,315 --> 00:08:38,752 line:-2
there are two parts
to initializing a storage device.


138
00:08:40,087 --> 00:08:43,023 line:-1
First you choose a device type.


139
00:08:43,056 --> 00:08:47,461 line:-2
This defines the interface
that is presented to the virtual machine.


140
00:08:47,494 --> 00:08:50,264 line:-1
And then you choose an attachment,


141
00:08:50,297 --> 00:08:55,035 line:-2
This selects how the data is
actually represented on your Mac.


142
00:08:55,068 --> 00:08:59,239 line:-2
In virtual machines,
you can mix and match.


143
00:08:59.273 --> 00:09:02.676 line:-2 align:center
Virtualization framework
supports virtual devices


144
00:09:02.709 --> 00:09:05.479 line:-1 align:center
such as the virtio block device


145
00:09:05,512 --> 00:09:09,383 line:-1
and the USB mass storage device.


146
00:09:09,416 --> 00:09:11,218 line:-1
And with any of these devices,


147
00:09:11,251 --> 00:09:14,988 line:-2
you can use attachments
such as the disk image attachment,


148
00:09:15,022 --> 00:09:18,025 line:-2
which reads and writes data
on a disk image,


149
00:09:18.058 --> 00:09:21.028 line:-2 align:center
or the new,
Network Block Device attachment,


150
00:09:21,061 --> 00:09:25,165 line:-2
which reads and writes data
on an NBD server.


151
00:09:25,199 --> 00:09:29,136 line:-1
Let's set up this NBD attachment in code.


152
00:09:29.169 --> 00:09:33.507 line:-2 align:center
To use this in your application,
first specify a URL


153
00:09:33.540 --> 00:09:36.476 line:-1 align:center
that points to the NBD server.


154
00:09:36.510 --> 00:09:42.950 line:-2 align:center
This is a special URL that identifies
a specific disk on a specific server.


155
00:09:42,983 --> 00:09:48,355 line:-2
Then initialize the new NBD storage
attachment with this URL.


156
00:09:48,388 --> 00:09:52,759 line:-2
Finally, initialize a storage device
with this attachment.


157
00:09:52.793 --> 00:09:56.930 line:-1 align:center
This example uses the virtio block device.


158
00:09:56,964 --> 00:10:02,035 line:-2
For most use cases, this is likely
to be the most performant option.


159
00:10:02,069 --> 00:10:05,005 line:-2
Since storage is being served
over the network,


160
00:10:05.038 --> 00:10:08.775 line:-1 align:center
the connection can be lost at any time.


161
00:10:08.809 --> 00:10:11.645 line:-2 align:center
You may want to take action
when this happens,


162
00:10:11.678 --> 00:10:16.049 line:-2 align:center
to pause the virtual machine,
or re-establish the connection.


163
00:10:17.384 --> 00:10:22.489 line:-2 align:center
If this is the case,
you can attach a custom delegate class,


164
00:10:22,523 --> 00:10:26,426 line:-2
which will be notified when the state
of the connection changes,


165
00:10:26,460 --> 00:10:29,496 line:-1
so you can run whatever code you need.


166
00:10:29,530 --> 00:10:32,933 line:-2
Adding to Virtualization framework's
storage options


167
00:10:32,966 --> 00:10:37,271 line:-2
is Non-Volatile Memory express,
or NVMe.


168
00:10:37,304 --> 00:10:42,376 line:-2
NVMe is a standardized technology
enabled in many Linux kernels,


169
00:10:42.409 --> 00:10:44.778 line:-1 align:center
and its applications are more specific,


170
00:10:44.811 --> 00:10:48.549 line:-2 align:center
so let's start with why
you might want to use it.


171
00:10:48,582 --> 00:10:50,851 line:-1
For a vast majority of use-cases,


172
00:10:50,884 --> 00:10:55,389 line:-2
the paravirtualized interface
provided by virtio block storage


173
00:10:55,422 --> 00:10:58,992 line:-1
is the easiest and fastest to use.


174
00:10:59.026 --> 00:11:03.430 line:-2 align:center
This is certainly the case
for virtual Macs.


175
00:11:03.463 --> 00:11:06.333 line:-1 align:center
But some Linux virtual machines


176
00:11:06.366 --> 00:11:09.369 line:-1 align:center
don't have virtio drivers.


177
00:11:09,403 --> 00:11:14,408 line:-2
These may be kernels that are not built
to run in virtual environments.


178
00:11:14,441 --> 00:11:17,077 line:-1
What these kernels often do have


179
00:11:17,110 --> 00:11:21,114 line:-1
are drivers for NVMe controller devices.


180
00:11:21,148 --> 00:11:23,050 line:-1
In macOS Sonoma,


181
00:11:23,083 --> 00:11:28,689 line:-2
NVMe controller devices are emulated
by Virtualization framework,


182
00:11:28.722 --> 00:11:33.927 line:-2 align:center
allowing more operating systems
to be run in virtual machines.


183
00:11:33,961 --> 00:11:35,929 line:-1
To configure NVMe,


184
00:11:35.963 --> 00:11:40.234 line:-2 align:center
use the new device type
when building your virtual machine.


185
00:11:40,267 --> 00:11:43,403 line:-1
NVMe is for Linux virtual machines only,


186
00:11:43,437 --> 00:11:47,574 line:-1
and, of course, also supports NBD.


187
00:11:47,608 --> 00:11:49,576 line:-1
And now, with the Mac keyboard,


188
00:11:49,610 --> 00:11:53,413 line:-2
Apple-specific keypresses are captured
by a virtual Mac.


189
00:11:53,447 --> 00:11:57,551 line:-2
Meaning you can use the Globe key
for features like language switching,


190
00:11:57,584 --> 00:12:00,921 line:-1
or even emoting in a virtual Mac.


191
00:12:00.954 --> 00:12:04.458 line:-1 align:center
Now let's talk about Rosetta 2.


192
00:12:04,491 --> 00:12:06,894 line:-1
Rosetta 2, in a Linux virtual machine,


193
00:12:06,927 --> 00:12:10,531 line:-1
is the same technology used on macOS,


194
00:12:10,564 --> 00:12:13,333 line:-2
And in macOS Sonoma,
performance improvements mean


195
00:12:13,367 --> 00:12:17,871 line:-2
Rosetta 2 runs even faster
in a virtual Linux environment.


196
00:12:17.905 --> 00:12:20.207 line:-1 align:center
Let's dive into how this is possible.


197
00:12:21,475 --> 00:12:25,746 align:center
Rosetta 2 translates
executable pages on-demand,


198
00:12:25,779 --> 00:12:29,249 line:0
which allows it to launch the executable
much faster


199
00:12:29,283 --> 00:12:35,656 align:center
than if it had to wait to translate
the entire x86_64 application.


200
00:12:35,689 --> 00:12:39,059 line:0
But this also means that while
the application is running,


201
00:12:39,092 --> 00:12:42,462 line:0
Rosetta 2 must stop execution periodically


202
00:12:42,496 --> 00:12:45,566 line:0
to translate new regions of code.


203
00:12:45,599 --> 00:12:48,869 line:0
This overhead is likely to be
the most noticeable


204
00:12:48,902 --> 00:12:52,072 line:0
when the application
has just started running,


205
00:12:52,105 --> 00:12:56,877 align:center
as code needs to be translated
for the very first time.


206
00:12:56,910 --> 00:12:59,947 align:center
But if I launched another application


207
00:12:59,980 --> 00:13:04,484 align:center
that linked against the same libraries
or ran the same executables,


208
00:13:04,518 --> 00:13:08,055 line:0
Rosetta 2 has to do
all that work over again,


209
00:13:08,088 --> 00:13:11,892 line:0
even though that code
has already been translated.


210
00:13:11,925 --> 00:13:15,529 line:0
This problem can be solved with caching.


211
00:13:15,562 --> 00:13:19,600 line:0
Whenever a library
or executable binary is translated,


212
00:13:19,633 --> 00:13:23,637 line:0
Rosetta 2 saves the result
in a cache on disk


213
00:13:23,670 --> 00:13:27,674 align:center
and shares that
with any other application that needs it,


214
00:13:27,708 --> 00:13:32,012 line:0
avoiding unnecessary
retranslation overhead.


215
00:13:32.045 --> 00:13:33.747 line:-1 align:center
In macOS Sonoma,


216
00:13:33,780 --> 00:13:38,085 line:-2
Virtualization framework brings this
optimization to Linux virtual machines


217
00:13:38,118 --> 00:13:41,388 line:-1
with a new runtime daemon.


218
00:13:41,421 --> 00:13:45,993 line:-2
There are two steps you will need to take,
to set this up.


219
00:13:46,026 --> 00:13:49,897 line:-2
First, there is a new API
to configure the communication channel


220
00:13:49,930 --> 00:13:54,234 line:-2
between the Rosetta 2 runtime
and the new caching daemon.


221
00:13:54.268 --> 00:13:58.205 line:-2 align:center
And then, you'll need to launch the daemon
in the virtual machine.


222
00:13:58,238 --> 00:14:02,809 line:-1
The Rosetta 2 runtime and the new daemon


223
00:14:02,843 --> 00:14:06,880 line:-2
will now run alongside each other
in the virtual machine.


224
00:14:06.914 --> 00:14:10.584 line:-2 align:center
The two programs communicate
with Virtualization framework


225
00:14:10.617 --> 00:14:12.853 line:-1 align:center
to establish a connection.


226
00:14:12,886 --> 00:14:17,157 line:-2
Dynamic linker requests, among others,
will be forwarded to the daemon,


227
00:14:17,191 --> 00:14:18,859 line:-1
which manages the cache,


228
00:14:18.892 --> 00:14:22.829 line:-2 align:center
and the Rosetta 2 runtime
will fetch pre-translated binaries


229
00:14:22.863 --> 00:14:25.065 line:-1 align:center
directly from the daemon,


230
00:14:25,098 --> 00:14:28,135 line:-1
eliminating the retranslation overhead.


231
00:14:28.168 --> 00:14:31.605 line:-2 align:center
You'll see the biggest impact
on exec-heavy tasks


232
00:14:31,638 --> 00:14:34,575 line:-1
like compilation or package installation.


233
00:14:34,608 --> 00:14:38,612 line:-2
Virtualization framework allows you
to bring so many great options


234
00:14:38.645 --> 00:14:40.747 line:-1 align:center
to your applications.


235
00:14:40,781 --> 00:14:44,518 line:-1
Let's talk about ways to get started.


236
00:14:44,551 --> 00:14:46,954 line:-1
Consider using the resizable display


237
00:14:46,987 --> 00:14:51,358 line:-2
for both virtual Macs
and Linux virtual machines.


238
00:14:51,391 --> 00:14:57,497 line:-2
It significantly improves the user
experience with a single line of code.


239
00:14:57,531 --> 00:15:01,268 line:-2
The Mac keyboard is specifically designed
to work seamlessly


240
00:15:01.301 --> 00:15:04.171 line:-1 align:center
with the newest virtual Macs,


241
00:15:04,204 --> 00:15:06,840 line:-1
Configuring virtual Macs with this device


242
00:15:06,874 --> 00:15:11,645 line:-2
is an easy way
to boost the user experience.


243
00:15:11.678 --> 00:15:14.014 line:-2 align:center
A few of these features
are building blocks


244
00:15:14,047 --> 00:15:17,451 line:-2
that you can use
to build powerful experiences.


245
00:15:17,484 --> 00:15:21,321 line:-2
The ability to save a virtual machine
is one example.


246
00:15:21.355 --> 00:15:24.892 line:-2 align:center
Start investigating how rewinding
or saving progress


247
00:15:24,925 --> 00:15:27,661 line:-1
fits into your application.


248
00:15:27,694 --> 00:15:32,799 line:-2
And the flexibility offered by NBD
is incredible.


249
00:15:32,833 --> 00:15:35,736 line:-1
NBD can unlock a lot of possibilities


250
00:15:35,769 --> 00:15:39,139 line:-1
for applications needing custom IO.


251
00:15:39,173 --> 00:15:46,213 line:-2
This is just the beginning of what
virtual machines can do in macOS Sonoma.


252
00:15:46.246 --> 00:15:47.381 line:-1 align:center
Thank you.


253
00:15:47,414 --> 00:15:51,018 line:-2
The Virtualization team
can't wait to see what you build.


254
00:15:51.051 --> 00:15:54.054 line:-1 align:center
♪ ♪

