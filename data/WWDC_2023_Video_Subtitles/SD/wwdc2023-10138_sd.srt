2
00:00:01.001 --> 00:00:08.008
♪ ♪


3
00:00:10.043 --> 00:00:14.982
Jennifer: Hi, I’m Jennifer Patton,
a designer on the Apple Design Team.


4
00:00:15.048 --> 00:00:16.450
Matthew: And I’m Matthew Koonce,


5
00:00:16.517 --> 00:00:20.854
the engineering manager
of the SwiftUI team for watchOS.


6
00:00:20.921 --> 00:00:23.490
Jennifer: For the tenth major release
of watchOS,


7
00:00:23.557 --> 00:00:28.529
we have redesigned the user interface
to surface timely information,


8
00:00:28.595 --> 00:00:31.765
communicate focused content at a glance,


9
00:00:31.832 --> 00:00:35.102
celebrate the shape and fidelity of the
display


10
00:00:35.169 --> 00:00:37.504
with full screen color and imagery,


11
00:00:37.571 --> 00:00:41.441
and make navigation consistent
and predictable.


12
00:00:41.508 --> 00:00:44.011
Matthew: And we've also evolved our APIs.


13
00:00:44.077 --> 00:00:47.981
SwiftUI is at the very heart
of watchOS 10.


14
00:00:48.048 --> 00:00:50.784
In this session, we'd like
to walk you through the details


15
00:00:50.851 --> 00:00:53.187
of the watchOS 10 redesign.


16
00:00:53.253 --> 00:00:56.857
We’ll start with some key
design principles.


17
00:00:56.924 --> 00:01:03.130
Then, we’ll look at some new ways
to structure navigation in your app.


18
00:01:03.197 --> 00:01:06.800
After that, we’ll talk about
the evolution of our layout system,


19
00:01:06.867 --> 00:01:11.471
and some updated APIs
that help make use of every pixel.


20
00:01:11.538 --> 00:01:14.374
And lastly, we’ll see how color
and materials


21
00:01:14.441 --> 00:01:16.543
can bring a whole new dimension to apps.


22
00:01:16.610 --> 00:01:17.878
Sound like a plan?


23
00:01:17.945 --> 00:01:20.647
Jennifer: Yeah!
Let's get right into it.


24
00:01:20.714 --> 00:01:23.851
Let’s start with some Design Principles.


25
00:01:23.917 --> 00:01:27.721
The first thing you’ll want to think about
when designing for Apple Watch is


26
00:01:27.788 --> 00:01:31.391
“What is the most relevant information
or experience


27
00:01:31.458 --> 00:01:35.128
my app can offer to people in the moment?”


28
00:01:35.195 --> 00:01:37.698
Let’s look at the Weather app
as an example.


29
00:01:37.764 --> 00:01:40.601
Because Apple Watch
is a timekeeping device


30
00:01:40.667 --> 00:01:44.104
best suited for quick
and focused interactions,


31
00:01:44.171 --> 00:01:48.976
the first thing you’ll see when opening
the app is your local weather for today.


32
00:01:49.042 --> 00:01:51.778
With a simple rotation
of the digital crown,


33
00:01:51.845 --> 00:01:54.882
you’ll get local weather
for the rest of the day,


34
00:01:54.948 --> 00:01:57.251
and then for the rest of the week.


35
00:01:57.317 --> 00:02:01.788
And if I’m looking for the weather
in New York, for example,


36
00:02:01.855 --> 00:02:08.328
my list of cities is just a single tap
away from any of these detail views.


37
00:02:08.395 --> 00:02:13.367
Weather achieves what I like to think of
as an “Apple Watch Moment.”


38
00:02:13.433 --> 00:02:15.502
When you’re designing your app,


39
00:02:15.569 --> 00:02:19.406
try to narrow the focus of the experience
to just what’s relevant


40
00:02:19.473 --> 00:02:23.544
at the time the wearer raises their wrist.


41
00:02:23.610 --> 00:02:28.782
Watch experiences should be
highly specialized for brief interactions.


42
00:02:28.849 --> 00:02:31.652
If you had ten seconds
of someone’s attention,


43
00:02:31.718 --> 00:02:34.955
which information would you surface?


44
00:02:35.022 --> 00:02:41.828
On iPhone, News is a multi-tab,
multi-level app rich with content.


45
00:02:41.895 --> 00:02:47.701
And on Apple Watch,
News is focused on five top stories.


46
00:02:47.768 --> 00:02:54.575
The content is stacked vertically in
the feed and expands inline when tapped.


47
00:02:54.641 --> 00:02:56.810
Brief interactions are one of the things


48
00:02:56.877 --> 00:03:00.080
that I love about designing
for Apple Watch.


49
00:03:00.147 --> 00:03:03.283
When you only get a few seconds
of people's attention,


50
00:03:03.350 --> 00:03:05.185
you need to be concise,


51
00:03:05.252 --> 00:03:10.390
like how News focuses the experience
on just today's headlines.


52
00:03:10.457 --> 00:03:13.994
And Heart Rate displays finite data first,


53
00:03:14.061 --> 00:03:20.334
so it can devote most of the view
to a full screen animation.


54
00:03:20.400 --> 00:03:25.939
And Activity simplifies a broad experience
into single focused views.


55
00:03:26.006 --> 00:03:31.912
So when designing your app,
keep it brief and keep it focused.


56
00:03:31.979 --> 00:03:35.449
When we announced Apple Watch in 2014,


57
00:03:35.516 --> 00:03:40.854
we also introduced the Digital Crown
as being a unique and precise input device


58
00:03:40.921 --> 00:03:45.626
that could be used
without obscuring the display.


59
00:03:45.692 --> 00:03:49.096
In watchOS 10,
we are emphasizing the Digital Crown


60
00:03:49.162 --> 00:03:54.501
as the way you get to and navigate
through apps, to scroll,


61
00:03:54.568 --> 00:03:59.373
paginate, and make precise adjustments.


62
00:03:59.439 --> 00:04:02.242
While interactions
should be anchored to the crown,


63
00:04:02.309 --> 00:04:05.245
they should also always
be backed up by touch.


64
00:04:05.312 --> 00:04:10.551
You can use the design goal
of tying interactions to the digital crown


65
00:04:10.617 --> 00:04:16.323
to shape your app’s navigation structure
and experience.


66
00:04:16.390 --> 00:04:20.761
When designing for watchOS,
consider the journey people will take


67
00:04:20.827 --> 00:04:24.198
from the moment they raise their wrist.


68
00:04:24.264 --> 00:04:28.802
A great new feature in watchOS 10
is the Smart Stack.


69
00:04:28.869 --> 00:04:30.971
With a turn of the digital crown,


70
00:04:31.038 --> 00:04:37.444
glanceable widgets spring onto the screen
in an intelligently ordered stack.


71
00:04:37.511 --> 00:04:41.381
When you design your app,
you can begin by thinking about


72
00:04:41.448 --> 00:04:45.919
which information would make
the best Smart Stack widget


73
00:04:45.986 --> 00:04:52.526
and then design around those relevant and
timely experiences to architect your app.


74
00:04:52.593 --> 00:04:57.397
And definitely check out design widgets
for the Smart Stack on Apple Watch


75
00:04:57.464 --> 00:04:59.967
by my colleague, Ed.


76
00:05:00.033 --> 00:05:03.370
Once you have narrowed the focus
of your watch app


77
00:05:03.437 --> 00:05:08.509
to bite-sized pieces of information
that are relevant in the present moment,


78
00:05:08.575 --> 00:05:11.712
your next step will be
to stitch those moments together


79
00:05:11.778 --> 00:05:15.249
into an easily navigable structure.


80
00:05:15.315 --> 00:05:17.384
Matthew and his team
have been hard at work


81
00:05:17.451 --> 00:05:20.988
developing some incredible new APIs
for you to use.


82
00:05:21.054 --> 00:05:22.356
Take it away, Matthew.


83
00:05:22.422 --> 00:05:23.824
Matthew: Thanks, Jenn.


84
00:05:23.891 --> 00:05:27.928
Let’s take a look at how navigation
within apps has been updated with SwiftUI.


85
00:05:27.995 --> 00:05:31.365
First, we’ll look at NavigationSplitView,


86
00:05:31.431 --> 00:05:35.202
which provides
detailed content at a glance.


87
00:05:35.269 --> 00:05:37.237
Then, some updates to TabView


88
00:05:37.304 --> 00:05:40.941
that allow you to tie more interactions
to the Digital Crown.


89
00:05:41.008 --> 00:05:44.044
These both sit alongside
the NavigationStack


90
00:05:44.111 --> 00:05:47.281
as our core navigation paradigms.


91
00:05:47.347 --> 00:05:51.318
Picking the right way to structure
your app is a fundamental decision,


92
00:05:51.385 --> 00:05:53.520
and each has its strengths.


93
00:05:53.587 --> 00:05:56.924
Let’s start with NavigationSplitView.


94
00:05:56.990 --> 00:05:59.960
The concept of NavigationSplitView
on watchOS


95
00:06:00.027 --> 00:06:05.699
is borrowed from a two column layout,
like you have in Weather on iPadOS.


96
00:06:05.766 --> 00:06:10.237
On watchOS, the source list
and detail view are separated


97
00:06:10.304 --> 00:06:11.905
and then recombined,


98
00:06:11.972 --> 00:06:15.042
with the source list
tucked just beneath the detail view.


99
00:06:15.108 --> 00:06:18.011
Now that source list
is just a tap away.


100
00:06:18.078 --> 00:06:23.283
Jennifer: Navigation Split View is a
perfect option if you have a source list,


101
00:06:23.350 --> 00:06:28.822
like a list of cities in Weather
or a list of stocks


102
00:06:28.889 --> 00:06:33.327
and detailed views
of the items in that source list.


103
00:06:33.393 --> 00:06:38.165
Land people directly in the detail view
when they launch your app.


104
00:06:38.232 --> 00:06:42.836
Use location, recency, frequency,
or some other indication


105
00:06:42.903 --> 00:06:48.342
of user intent to inform
which detail to surface first.


106
00:06:48.408 --> 00:06:52.012
Strive to make your detail view
so unmistakable at a glance


107
00:06:52.079 --> 00:06:53.780
that it doesn’t need a title.


108
00:06:53.847 --> 00:06:56.950
Matthew: One really slick feature
of Navigation Split View that we built


109
00:06:57.017 --> 00:07:00.420
right into SwiftUI is the transition
between the detail view


110
00:07:00.487 --> 00:07:02.422
and the source list.


111
00:07:02.489 --> 00:07:08.462
You can, of course, tap the list icon,
or even better, interact with your finger.


112
00:07:08.529 --> 00:07:11.532
Jennifer: And the source list
is an excellent tool


113
00:07:11.598 --> 00:07:13.667
for showing comparative data.


114
00:07:13.734 --> 00:07:19.106
It’s 10:09 a.m. in Cupertino
and it’s 7:09 p.m. in Budapest.


115
00:07:19.173 --> 00:07:24.044
There is no need to title the source list
and no need for a close button


116
00:07:24.111 --> 00:07:26.146
or navigation controls.


117
00:07:26.213 --> 00:07:29.816
This allows the source list
to use a shorter navigation bar,


118
00:07:29.883 --> 00:07:35.255
showing more comparative data
on screen at a glance.


119
00:07:35.322 --> 00:07:38.258
Matthew: The API for NavigationSplitView
is the same on watchOS


120
00:07:38.325 --> 00:07:40.494
as it as on other platforms.


121
00:07:40.561 --> 00:07:45.332
You can set up a source list
and initialize it with a selection.


122
00:07:45.399 --> 00:07:47.835
Always initialize the selection to a value


123
00:07:47.901 --> 00:07:53.207
so SwiftUI can automatically launch
to the detail view.


124
00:07:53.273 --> 00:07:57.945
Next, let’s talk about TabView, which has
received some really fantastic updates


125
00:07:58.011 --> 00:08:02.983
and is my new favorite way
to navigate apps on my Apple Watch.


126
00:08:03.050 --> 00:08:06.887
Tab view can scroll between views,
and new in watchOS 10,


127
00:08:06.954 --> 00:08:10.958
a single tab can expand
and resize as needed.


128
00:08:11.024 --> 00:08:14.228
Jennifer: Aside from allowing content
to expand in-line,


129
00:08:14.294 --> 00:08:19.132
this also allows a design
that fits on a single screen by default


130
00:08:19.199 --> 00:08:23.270
to support localized text
and large type if needed.


131
00:08:23.337 --> 00:08:28.108
Matthew: Let’s take a closer look
at how we’re using TabView in Activity.


132
00:08:28.175 --> 00:08:32.179
Activity has a tab
for each of the ring detail views,


133
00:08:32.246 --> 00:08:36.116
and it’s using
the new “vertical page” style.


134
00:08:36.183 --> 00:08:41.288
Activity also features this
new blur transition between each tab.


135
00:08:41.355 --> 00:08:44.458
Combine this transition
with the container background modifier


136
00:08:44.525 --> 00:08:48.328
for a seamless blend between views.


137
00:08:48.395 --> 00:08:53.634
The last page in Activity is a scrolling
list of recently completed exercises.


138
00:08:53.700 --> 00:08:58.805
Adding that list is as easy
as, well, adding a list!


139
00:08:58.872 --> 00:09:02.276
TabView will automatically detect
any scrolling content,


140
00:09:02.342 --> 00:09:05.746
and will expand to accommodate it.


141
00:09:05.812 --> 00:09:09.416
So that’s how we can quickly build
a layout similar to Activity,


142
00:09:09.483 --> 00:09:12.452
but TabView has one more trick
up its sleeve.


143
00:09:12.519 --> 00:09:15.189
Jenn: Have you noticed
the cool animation that occurs


144
00:09:15.255 --> 00:09:17.758
when you scroll to the move tab?


145
00:09:17.824 --> 00:09:23.063
Watch the Activity Rings
as they scale up into the top left corner.


146
00:09:23.130 --> 00:09:27.801
This achieves our design goal of
tying interactions to the digital crown,


147
00:09:27.868 --> 00:09:32.806
while also keeping
the Activity Rings permanently in view.


148
00:09:32.873 --> 00:09:35.375
Matthew: Now you may be wondering,
“Can I do that, too?”


149
00:09:35.442 --> 00:09:37.911
And the answer is, you can!
Let’s take a look.


150
00:09:37.978 --> 00:09:41.348
In watchOS 10,
you can now drive animations


151
00:09:41.415 --> 00:09:44.785
based on the selection value
of the TabView.


152
00:09:44.852 --> 00:09:51.258
One really neat trick is to hook this up
to a matched geometry effect.


153
00:09:51.325 --> 00:09:55.762
The Activity Rings appear in both
the TabView and in the toolbar.


154
00:09:55.829 --> 00:09:58.765
By adding the matched geometry effect
to each of these two views,


155
00:09:58.832 --> 00:10:04.571
SwiftUI will automatically animate
from one position to another.


156
00:10:04.638 --> 00:10:08.909
Jennifer: Navigation Split View
and Tab View are really capable,


157
00:10:08.976 --> 00:10:12.412
but they’re not necessarily right
for every app.


158
00:10:12.479 --> 00:10:16.450
If your app can’t do what it needs to do
by pivoting between a detail


159
00:10:16.517 --> 00:10:21.321
and source list,
or in a few vertically paginated tabs,


160
00:10:21.388 --> 00:10:25.225
consider using a NavigationStack.


161
00:10:25.292 --> 00:10:27.194
Matthew: Yep, that’s totally right.


162
00:10:27.261 --> 00:10:32.900
We’re using NavigationStack in many apps
like Workout, Calendar, and Music.


163
00:10:32.966 --> 00:10:36.737
We’ve even refreshed
the navigation push animation!


164
00:10:36.803 --> 00:10:41.441
It now highlights
and moves the view you selected.


165
00:10:41.508 --> 00:10:45.779
Jennifer: The NavigationStack is still
the clearest way to lead people


166
00:10:45.846 --> 00:10:50.984
into and back out of a hierarchy of views.


167
00:10:51.051 --> 00:10:53.020
Use a large title on the first view,


168
00:10:53.086 --> 00:10:56.757
but not on any of the subviews
where a back button is present.


169
00:10:56.823 --> 00:10:58.692
When designing your app,


170
00:10:58.759 --> 00:11:02.996
choose a navigation structure that
accomplishes your “Apple Watch Moment”


171
00:11:03.063 --> 00:11:06.133
in as few interactions as possible.


172
00:11:06.200 --> 00:11:09.903
Matthew:
So that’s navigation on watchOS 10.


173
00:11:09.970 --> 00:11:13.707
NavigationSplitView, TabView,
and NavigationStack


174
00:11:13.774 --> 00:11:17.644
make the experience consistent
and predictable across all apps.


175
00:11:17.711 --> 00:11:21.748
Jennifer: Now that you have chosen the
best navigation structure for your app,


176
00:11:21.815 --> 00:11:26.386
let’s talk about the resources
you can use to build each view.


177
00:11:26.453 --> 00:11:30.157
As the Apple Watch display and hardware
have evolved,


178
00:11:30.224 --> 00:11:35.462
the display has gotten consistently
larger and more rounded.


179
00:11:35.529 --> 00:11:39.399
While designing for an increasingly
rounded display over the years,


180
00:11:39.466 --> 00:11:43.704
we have developed a flexible
grid system that defines the size


181
00:11:43.770 --> 00:11:48.442
and placement of controls, labels,
and content.


182
00:11:48.509 --> 00:11:55.015
To accommodate different types of content,
we designed three foundational layouts.


183
00:11:55.082 --> 00:11:58.452
Dial-based Views,


184
00:11:58.519 --> 00:12:01.488
Infographic Views,


185
00:12:01.555 --> 00:12:05.058
and Lists.


186
00:12:05.125 --> 00:12:09.062
All of these layouts are designed
to adapt automatically


187
00:12:09.129 --> 00:12:13.967
to the different Apple Watch sizes
supported by watchOS 10.


188
00:12:14.034 --> 00:12:19.306
Dial-based views are great for dense
information delivered at a glance.


189
00:12:19.373 --> 00:12:23.477
The use of full screen color and imagery,
like weather conditions,


190
00:12:23.544 --> 00:12:26.747
can help to add additional context.


191
00:12:26.813 --> 00:12:31.385
Dials also allow you to add up
to four different corner controls


192
00:12:31.451 --> 00:12:34.121
without obscuring content.


193
00:12:34.188 --> 00:12:38.458
The infographic view
is ideal for charts, graphs,


194
00:12:38.525 --> 00:12:44.898
and other data visualizations that are
paired with a block of text and metrics.


195
00:12:44.965 --> 00:12:48.569
And Lists makes it easy
to scroll through content


196
00:12:48.635 --> 00:12:52.639
and find exactly what you need.


197
00:12:52.706 --> 00:12:57.945
The grids are based on the shape
of the active display area.


198
00:12:58.011 --> 00:13:00.547
We start with the curvature
of the display,


199
00:13:00.614 --> 00:13:04.885
and use that to mathematically inform
the sizing and position


200
00:13:04.952 --> 00:13:07.321
of the elements in the view.


201
00:13:07.387 --> 00:13:12.392
These layout grids are available
in the Apple Design Resources.


202
00:13:12.459 --> 00:13:16.363
I hope you’ll find them useful
in designing your app.


203
00:13:16.430 --> 00:13:19.499
Matthew: The layout grids
created by Jenn and the Design team


204
00:13:19.566 --> 00:13:22.202
form the foundations of watchOS 10,


205
00:13:22.269 --> 00:13:25.939
and they provide
the underpinnings of many of our APIs.


206
00:13:26.006 --> 00:13:30.511
For example, use scene padding to get
the insets you need to build a dial view.


207
00:13:30.577 --> 00:13:34.314
Or use the new “top bar trailing”
placement to add a button


208
00:13:34.381 --> 00:13:38.018
to the toolbar at the top right
of the screen.


209
00:13:38.085 --> 00:13:39.653
When you use this placement,


210
00:13:39.720 --> 00:13:43.624
the time moves out of the way
and centers on screen.


211
00:13:43.690 --> 00:13:47.861
The now playing view really makes
use of the updated toolbar


212
00:13:47.928 --> 00:13:50.030
In addition to using
the “top bar leading”


213
00:13:50.097 --> 00:13:54.234
and “trailing” placements,
Now Playing adds its control buttons


214
00:13:54.301 --> 00:13:56.069
to the bottom bar.


215
00:13:56.136 --> 00:13:58.005
SwiftUI is using the same layout grids


216
00:13:58.071 --> 00:14:02.176
that Jenn just described
to align these buttons.


217
00:14:02.242 --> 00:14:05.779
No need to add any additional padding.


218
00:14:05.846 --> 00:14:08.815
Also in the bottom bar
is the pause button.


219
00:14:08.882 --> 00:14:12.052
You can use the control size modifier
to make this button larger


220
00:14:12.119 --> 00:14:13.921
and more prominent.


221
00:14:13.987 --> 00:14:17.357
It’s never been easier
to build a Now Playing screen!


222
00:14:17.424 --> 00:14:20.027
These toolbar placements
unlock new opportunities


223
00:14:20.093 --> 00:14:24.898
for focused interactions by allowing
more controls on screen at a time.


224
00:14:24.965 --> 00:14:28.535
Jennifer: We developed the layout
grids to utilize every pixel


225
00:14:28.602 --> 00:14:33.507
and make the experience
of using Apple Watch more consistent


226
00:14:33.574 --> 00:14:36.143
and predictable across apps.


227
00:14:36.210 --> 00:14:41.348
I also hope they’ll inspire you to
design great apps for many years to come.


228
00:14:41.415 --> 00:14:45.719
Matthew: Next, let’s talk about how color
and a full suite of materials,


229
00:14:45.786 --> 00:14:50.224
give the people a sense of place
inside the hierarchy of views.


230
00:14:50.290 --> 00:14:52.726
Jennifer: One of our design goals
for watchOS 10


231
00:14:52.793 --> 00:14:56.597
is to emphasize the shape
and fidelity of the display


232
00:14:56.663 --> 00:14:59.766
with full screen color and images.


233
00:14:59.833 --> 00:15:05.539
To that end, we added four vibrant
full-screen background materials


234
00:15:05.606 --> 00:15:09.776
that affect background content
at different blur levels,


235
00:15:09.843 --> 00:15:13.780
like Ultra Thin, Thin,


236
00:15:13.847 --> 00:15:17.618
Regular, and Thick.


237
00:15:17.684 --> 00:15:20.954
Matthew: And you can use
the same SwiftUI APIs on watchOS


238
00:15:21.021 --> 00:15:23.657
as you might already do
on other platforms.


239
00:15:23.724 --> 00:15:26.860
Jennifer: We also added
a full screen background gradient


240
00:15:26.927 --> 00:15:30.397
that you can tint
with your own accent colors.


241
00:15:30.464 --> 00:15:34.935
In Activity,
we use the accent colors for Move,


242
00:15:35.002 --> 00:15:41.575
Exercise, and Stand
to differentiate three consecutive tabs


243
00:15:41.642 --> 00:15:45.479
that have similar layouts at a glance.


244
00:15:45.546 --> 00:15:49.716
Another great use of full screen color
is to set tone,


245
00:15:49.783 --> 00:15:54.655
like this calming blue background
in Sleep.


246
00:15:54.721 --> 00:15:58.091
You can use color to convey information
at a glance,


247
00:15:58.158 --> 00:16:04.598
like in World Clock where we use
solar gradients to show the time of day.


248
00:16:04.665 --> 00:16:08.702
You can also use full screen color
to convey a state change.


249
00:16:08.769 --> 00:16:13.407
In Timers, the background is black
when the timer is counting down,


250
00:16:13.473 --> 00:16:18.312
and then, bright orange
declares that my egg timer is done.


251
00:16:18.378 --> 00:16:22.616
To make sure foreground elements
look great over all of these backgrounds,


252
00:16:22.683 --> 00:16:27.354
we added vibrant fill materials
to controls and platter cells,


253
00:16:27.421 --> 00:16:32.593
and vibrant text labels,
in Primary, Secondary, Tertiary,


254
00:16:32.659 --> 00:16:35.028
and Quaternary prominence levels


255
00:16:35.095 --> 00:16:40.234
for creating information hierarchy
in typography.


256
00:16:40.300 --> 00:16:44.304
We also added vibrant versions
of all the system colors


257
00:16:44.371 --> 00:16:48.509
that ensure legibility
over full screen backgrounds.


258
00:16:48.575 --> 00:16:53.280
Matthew: It’s so cool to have all of
those new materials available on watchOS!


259
00:16:53.347 --> 00:16:55.015
So how does it come together in an app?


260
00:16:55.082 --> 00:16:58.085
Let’s use the Noise app as an example.


261
00:16:58.151 --> 00:17:01.388
We’ll start with the full screen
background gradient.


262
00:17:01.455 --> 00:17:06.159
This comes from the “container background”
modifier, which is new in watchOS 10.


263
00:17:06.226 --> 00:17:10.163
Noise passes the color green
with a gradient applied.


264
00:17:10.230 --> 00:17:14.001
The unfilled bars of the chart
and the X-axis labels,


265
00:17:14.067 --> 00:17:16.970
are using the secondary foreground style.


266
00:17:17.037 --> 00:17:19.373
The secondary style
provides some vibrancy


267
00:17:19.439 --> 00:17:22.709
and allows the background color
to come through.


268
00:17:22.776 --> 00:17:25.112
The filled bars
and the rest of the text labels


269
00:17:25.179 --> 00:17:27.014
are using the primary style.


270
00:17:27.080 --> 00:17:29.316
With that, the view is complete!


271
00:17:29.383 --> 00:17:33.487
When you update your app for watchOS 10,
you’ll notice a few other changes.


272
00:17:33.554 --> 00:17:38.559
Presentations throughout the system
now use a full screen thin material.


273
00:17:38.625 --> 00:17:42.062
This give the wearer additional context
about where they are in the app.


274
00:17:42.129 --> 00:17:45.832
You can see a hint of green
just beneath this view.


275
00:17:45.899 --> 00:17:50.170
In fact, all of SwiftUI’s controls,
labels, and List content


276
00:17:50.237 --> 00:17:55.776
have been updated to look amazing
when placed over a material background.


277
00:17:55.843 --> 00:18:01.882
Jennifer: And the navigation bar
has a beautiful new variable blur.


278
00:18:01.949 --> 00:18:03.917
This provides a gentle transition


279
00:18:03.984 --> 00:18:08.255
as content scrolls
underneath the navigation items.


280
00:18:08.322 --> 00:18:10.157
That was a lot to cover!


281
00:18:10.224 --> 00:18:16.230
We walked through our design principles,
entirely new ways to navigate in apps,


282
00:18:16.296 --> 00:18:21.902
brand-new layouts,
and how to use color and materials.


283
00:18:21.969 --> 00:18:27.975
watchOS 10 is a major leap forward
for the design of Apple Watch apps.


284
00:18:28.041 --> 00:18:31.512
Matthew: And we have so much more
to talk about with all of the changes!


285
00:18:31.578 --> 00:18:35.916
Jennifer: Check out “Meet watchOS 10”
for an overview of everything that is new,


286
00:18:35.983 --> 00:18:40.254
as well as “Design Widgets
for the Smart Stack on Apple Watch”


287
00:18:40.320 --> 00:18:43.657
to learn how to design beautiful widgets.


288
00:18:43.724 --> 00:18:46.093
Matthew:
If you already have a watchOS app,


289
00:18:46.159 --> 00:18:49.129
“Update your app for watchOS 10”
is for you!


290
00:18:49.196 --> 00:18:51.265
We’ll walk through
updating an existing app


291
00:18:51.331 --> 00:18:54.434
with all the SwiftUI APIs we showed here.


292
00:18:54.501 --> 00:18:56.770
watchOS 10 was only possible


293
00:18:56.837 --> 00:19:00.307
because of deep collaboration
between design and engineering.


294
00:19:00.374 --> 00:19:02.109
And this is just the start!


295
00:19:02.176 --> 00:19:03.577
Jennifer: That’s so true.


296
00:19:03.644 --> 00:19:07.247
watchOS has
never been a more vibrant platform,


297
00:19:07.314 --> 00:19:13.153
and there’s never been a better time
to design and build your Apple Watch app.


298
00:19:13.220 --> 00:19:15.222
♪ ♪

