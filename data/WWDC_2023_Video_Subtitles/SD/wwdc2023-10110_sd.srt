2
00:00:00.033 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental hip-hop ♪


3
00:00:03,003 --> 00:00:09,943 line:0 position:90% size:2%
♪


4
00:00:09.943 --> 00:00:10.944 line:-1 position:50%
Hello!


5
00:00:10.944 --> 00:00:13.146 line:-1 position:50%
I'm Harlan,
and I work on SwiftUI.


6
00:00:13.146 --> 00:00:15.782 line:-1 position:50%
I'm thrilled to help you
make your windowed app


7
00:00:15.782 --> 00:00:19.519 line:-1 position:50%
truly spectacular
on this new spatial platform.


8
00:00:19.519 --> 00:00:21.822 line:-1 position:50%
With spatial computing,
your apps exist


9
00:00:21.822 --> 00:00:23.857 line:-1 position:50%
within your physical
surroundings,


10
00:00:23.857 --> 00:00:25.392 line:-1 position:50%
which enables whole new classes


11
00:00:25.392 --> 00:00:28.161 line:-1 position:50%
of stunning three-dimensional
experiences.


12
00:00:30.297 --> 00:00:32.432 line:-1 position:50%
And as with every
Apple platform,


13
00:00:32.432 --> 00:00:35.836 line:-1 position:50%
the best way to build
an app is with SwiftUI.


14
00:00:35.836 --> 00:00:39.373 line:-1 position:50%
SwiftUI has added a suite
of APIs and behaviors


15
00:00:39.373 --> 00:00:40.807 line:-1 position:50%
that take advantage
of everything


16
00:00:40.807 --> 00:00:43.143 line:-1 position:50%
this new platform has to offer.


17
00:00:43,143 --> 00:00:44,511 position:50%
If you haven't already,


18
00:00:44,511 --> 00:00:46,914 position:50%
watch "Meet SwiftUI
for spatial computing"


19
00:00:46,914 --> 00:00:48,615 position:50%
for an overview
of all the new ways


20
00:00:48,615 --> 00:00:51,952 position:50%
you can use SwiftUI
on this device.


21
00:00:51.952 --> 00:00:55.789 line:-1 position:50%
I'll be focusing on SwiftUI but
if you're working with UIKit,


22
00:00:55.789 --> 00:00:58.558 line:-1 position:50%
there's a lot you can
take advantage of too.


23
00:00:58,558 --> 00:01:01,161 position:50%
Check out "Meet UIKit
for spatial computing"


24
00:01:01,161 --> 00:01:06,033 position:50%
to learn how to make the best
UIKit experience possible.


25
00:01:06,033 --> 00:01:08,568 position:50%
If you have an existing
iPhone or iPad app


26
00:01:08,568 --> 00:01:12,072 position:50%
and you'd prefer to retain
your iOS experience, check out


27
00:01:12,072 --> 00:01:15,742 position:50%
"Run your iPad and iPhone apps
in the Shared Space."


28
00:01:15.742 --> 00:01:18.445 line:-1 position:50%
Whether you're bringing an app
from another Apple platform


29
00:01:18.445 --> 00:01:22.249 line:-1 position:50%
or making something brand-new,
SwiftUI is the best way


30
00:01:22.249 --> 00:01:25.819 line:-1 position:50%
to make your app feel at home
wherever it runs.


31
00:01:25.819 --> 00:01:29.556 line:-1 position:50%
In this session, we'll update
a SwiftUI app for this platform.


32
00:01:29.556 --> 00:01:32.025 line:-1 position:50%
We'll begin by exploring
how the built-in controls


33
00:01:32.025 --> 00:01:36.196 line:-1 position:50%
automatically adapt themselves
for legibility and interaction;


34
00:01:36.196 --> 00:01:39.199 line:-1 position:50%
we'll talk about how to ensure
your custom views and controls


35
00:01:39.199 --> 00:01:42.169 line:-1 position:50%
take advantage of the new
visuals and input techniques


36
00:01:42.169 --> 00:01:43.904 line:-1 position:50%
on this device;


37
00:01:43.904 --> 00:01:45.806 line:-1 position:50%
and we'll adopt
some brand-new features


38
00:01:45.806 --> 00:01:49.576 line:-1 position:50%
that are only possible
with this device.


39
00:01:49.576 --> 00:01:51.778 line:-1 position:50%
This platform was built
from the ground up


40
00:01:51.778 --> 00:01:53.714 line:-1 position:50%
with SwiftUI in mind.


41
00:01:53.714 --> 00:01:55.615 line:-1 position:50%
In fact, most of the system
applications


42
00:01:55.615 --> 00:01:57.818 line:-1 position:50%
are written with SwiftUI,


43
00:01:57.818 --> 00:01:59.386 line:-1 position:50%
like Keynote,


44
00:01:59.386 --> 00:02:00.721 line:-1 position:50%
Freeform,


45
00:02:00.721 --> 00:02:02.089 line:-1 position:50%
and TV,


46
00:02:02.089 --> 00:02:04.391 line:-1 position:50%
which all bring
their familiar interfaces


47
00:02:04.391 --> 00:02:06.760 line:-1 position:50%
right into your surroundings.


48
00:02:06.760 --> 00:02:08.528 line:-1 position:50%
Even though these apps
look similar


49
00:02:08.528 --> 00:02:11.631 line:-1 position:50%
to their iPad counterparts,
they take full advantage


50
00:02:11.631 --> 00:02:13.967 line:-1 position:50%
of the new design language
and interaction methods


51
00:02:13.967 --> 00:02:15.669 line:-1 position:50%
on this platform.


52
00:02:15.669 --> 00:02:18.071 line:-1 position:50%
Let's explore how you can do
the same with your apps


53
00:02:18.071 --> 00:02:20.774 line:-1 position:50%
by updating
an iPad app together.


54
00:02:20.774 --> 00:02:24.277 line:-1 position:50%
This is Backyard Birds, and it's
like a virtual birdwatching app,


55
00:02:24.277 --> 00:02:26.513 line:-1 position:50%
where you can feed
and record all the birds


56
00:02:26.513 --> 00:02:28.682 line:-1 position:50%
that visit your yard.


57
00:02:28.682 --> 00:02:31.852 line:-1 position:50%
As a Swift developer,
I love birds.


58
00:02:31.852 --> 00:02:34.021 line:-1 position:50%
This is my kind of app.


59
00:02:34.021 --> 00:02:36.590 line:-1 position:50%
Backyard Birds
is written in SwiftUI.


60
00:02:36.590 --> 00:02:39.760 line:-1 position:50%
It's a great example
of a multiplatform SwiftUI app.


61
00:02:39.760 --> 00:02:44.364 line:-1 position:50%
It supports iPhone, iPad,
Mac, and Apple Watch.


62
00:02:44.364 --> 00:02:47.334 line:-1 position:50%
I'd like to add one more
platform to that list.


63
00:02:47.334 --> 00:02:51.571 line:-1 position:50%
Let's make Backyard Birds
really sing in the Shared Space.


64
00:02:51.571 --> 00:02:54.608 line:-1 position:50%
First, make sure your app
supports this new platform


65
00:02:54.608 --> 00:02:57.978 line:-1 position:50%
by adding it in the Supported
Platforms menu in Xcode.


66
00:03:00.680 --> 00:03:02.649 line:-1 position:50%
This will add a new
run destination,


67
00:03:02.649 --> 00:03:06.053 line:-1 position:50%
so let's choose that and run
our app in the simulator.


68
00:03:08.055 --> 00:03:11.191 line:-1 position:50%
Here in the simulator,
when I move my cursor around,


69
00:03:11.191 --> 00:03:15.695 line:-1 position:50%
the app responds as if I was
looking around with my eyes.


70
00:03:15.695 --> 00:03:18.432 line:-1 position:50%
When we run Backyard Birds,
we immediately find


71
00:03:18.432 --> 00:03:21.368 line:-1 position:50%
that it has the same
basic layout as on iPad,


72
00:03:21.368 --> 00:03:23.970 line:-1 position:50%
but some things
appear a little different.


73
00:03:23.970 --> 00:03:26.706 line:-1 position:50%
The first difference
I notice is that the app


74
00:03:26.706 --> 00:03:29.476 line:-1 position:50%
now has a glass background.


75
00:03:29.476 --> 00:03:33.346 line:-1 position:50%
Glass is a standard background
provided to windows by default.


76
00:03:33.346 --> 00:03:35.882 line:-1 position:50%
It adjusts its contrast
and color balance


77
00:03:35.882 --> 00:03:39.653 line:-1 position:50%
based on lighting conditions and
the colors of objects behind it.


78
00:03:39.653 --> 00:03:42.823 line:-1 position:50%
Because of that, this platform
does not make a distinction


79
00:03:42.823 --> 00:03:45.358 line:-1 position:50%
between light
and dark appearances.


80
00:03:45.358 --> 00:03:48.095 line:-1 position:50%
Glass automatically ensures
your app stays legible


81
00:03:48.095 --> 00:03:50.163 line:-1 position:50%
no matter where you're using it.


82
00:03:50.163 --> 00:03:52.833 line:-1 position:50%
Let's explore Backyard Birds
some more.


83
00:03:52.833 --> 00:03:56.103 line:-1 position:50%
Backyard Birds has a navigation
split view at the top level,


84
00:03:56.103 --> 00:03:57.604 line:-1 position:50%
which provides this sidebar


85
00:03:57.604 --> 00:04:00.240 line:-1 position:50%
for switching between
top-level views.


86
00:04:00.240 --> 00:04:03.176 line:-1 position:50%
The sidebar automatically
darkens its background on top


87
00:04:03.176 --> 00:04:07.247 line:-1 position:50%
of glass to visually separate
itself from the detail view.


88
00:04:07.247 --> 00:04:09.549 line:-1 position:50%
When I hover the cursor
over these list rows,


89
00:04:09.549 --> 00:04:11.751 line:-1 position:50%
they highlight subtly.


90
00:04:11.751 --> 00:04:14.387 line:-1 position:50%
I can tap on these rows
to switch between views,


91
00:04:14.387 --> 00:04:16.957 line:-1 position:50%
just like on iPad.


92
00:04:16.957 --> 00:04:20.293 line:-1 position:50%
On the right side of the split
view is a navigation stack.


93
00:04:20.293 --> 00:04:22.295 line:-1 position:50%
When I tap on one
of the backyards,


94
00:04:22.295 --> 00:04:24.998 line:-1 position:50%
it navigates
to its details view.


95
00:04:24.998 --> 00:04:27.634 line:-1 position:50%
From here I can see
how much seed and water


96
00:04:27.634 --> 00:04:30.303 line:-1 position:50%
is left for the birds
in this yard.


97
00:04:30.303 --> 00:04:32.405 line:-1 position:50%
I can scroll down to see
a list of all the birds


98
00:04:32.405 --> 00:04:34.975 line:-1 position:50%
that have recently visited.


99
00:04:34.975 --> 00:04:37.410 line:-1 position:50%
The navigation bar has
these circular buttons


100
00:04:37.410 --> 00:04:40.413 line:-1 position:50%
that also highlight
when I look at them.


101
00:04:40.413 --> 00:04:42.048 line:-1 position:50%
When I press
the Favorite button,


102
00:04:42.048 --> 00:04:46.486 line:-1 position:50%
it scales down and then
toggles the favorited state.


103
00:04:46.486 --> 00:04:49.356 line:-1 position:50%
These are just a few of
the things that SwiftUI has done


104
00:04:49.356 --> 00:04:52.392 line:-1 position:50%
to enhance every app
for the Shared Space.


105
00:04:52.392 --> 00:04:54.728 line:-1 position:50%
Now that we've taken a stroll
around Backyard Birds


106
00:04:54.728 --> 00:04:56.830 line:-1 position:50%
and found some of the new,
automatic behaviors


107
00:04:56.830 --> 00:04:58.765 line:-1 position:50%
that the built-in
controls offer,


108
00:04:58.765 --> 00:05:01.234 line:-1 position:50%
let's investigate how we can
make our custom views


109
00:05:01.234 --> 00:05:03.303 line:-1 position:50%
and controls feel at home.


110
00:05:03.303 --> 00:05:05.205 line:-1 position:50%
I spotted something subtle
while we toured


111
00:05:05.205 --> 00:05:07.140 line:-1 position:50%
the Backyards list.


112
00:05:07.140 --> 00:05:09.209 line:-1 position:50%
If I get really close
to the app,


113
00:05:09.209 --> 00:05:11.378 line:-1 position:50%
the bird and plants
remain crisp,


114
00:05:11.378 --> 00:05:13.813 line:-1 position:50%
but the fountain
becomes a little blurry.


115
00:05:13.813 --> 00:05:17.584 line:-1 position:50%
I suspect the fountain is being
drawn at a fixed resolution.


116
00:05:17.584 --> 00:05:21.188 line:-1 position:50%
Apps on this device are placed
in your physical surroundings.


117
00:05:21.188 --> 00:05:23.590 line:-1 position:50%
And unlike other platforms,
there's no screen


118
00:05:23.590 --> 00:05:26.259 line:-1 position:50%
with physical pixels
that defines the quality


119
00:05:26.259 --> 00:05:29.129 line:-1 position:50%
at which your content can draw.


120
00:05:29.129 --> 00:05:31.498 line:-1 position:50%
Apps could be
positioned anywhere.


121
00:05:31.498 --> 00:05:33.800 line:-1 position:50%
They might be pushed
far away from you,


122
00:05:33.800 --> 00:05:38.338 line:-1 position:50%
or brought right up close,
or even viewed at an angle.


123
00:05:38.338 --> 00:05:40.473 line:-1 position:50%
The system ensures
that apps look great


124
00:05:40.473 --> 00:05:44.811 line:-1 position:50%
in all these situations by
scaling content dynamically.


125
00:05:44.811 --> 00:05:48.248 line:-1 position:50%
For the system to do that,
you must provide vector assets


126
00:05:48.248 --> 00:05:52.152 line:-1 position:50%
because bitmaps cannot be
scaled without reducing quality.


127
00:05:52.152 --> 00:05:55.055 line:-1 position:50%
Text and SF Symbols
are already vectors,


128
00:05:55.055 --> 00:05:57.591 line:-1 position:50%
but if you're using
custom icons or graphics,


129
00:05:57.591 --> 00:06:01.394 line:-1 position:50%
use vectors to take advantage
of dynamic content scaling.


130
00:06:01.394 --> 00:06:04.864 line:-1 position:50%
Let's check if that fountain
is a bitmap image.


131
00:06:04.864 --> 00:06:06.999 line:-1 position:50%
Ah, if I look at
the scales option,


132
00:06:06.999 --> 00:06:10.003 line:-1 position:50%
it's specified in
individual scales.


133
00:06:10.003 --> 00:06:13.240 line:-1 position:50%
Thankfully, I have a vector
for this asset already,


134
00:06:13.240 --> 00:06:15.709 line:-1 position:50%
so I'll switch it
to a single scale,


135
00:06:15.709 --> 00:06:22.349 line:-1 position:50%
remove the existing assets,
and replace it with my vector.


136
00:06:22.349 --> 00:06:24.684 line:-1 position:50%
Then I'll check
the Preserve Vector Data box,


137
00:06:24.684 --> 00:06:28.321 line:-1 position:50%
which allows the contents
to scale to any size.


138
00:06:28.321 --> 00:06:32.025 line:-1 position:50%
This setting is supported
on all Apple platforms.


139
00:06:32.025 --> 00:06:33.326 line:-1 position:50%
That's better.


140
00:06:33.326 --> 00:06:36.830 line:-1 position:50%
Now the fountain is sharp,
and if I move closer


141
00:06:36.830 --> 00:06:40.967 line:-1 position:50%
or further away,
it stays at high quality.


142
00:06:40.967 --> 00:06:43.603 line:-1 position:50%
Let's poke around
some of the other tabs.


143
00:06:43.603 --> 00:06:46.740 line:-1 position:50%
The Plants tab shows
a grid of all the plants,


144
00:06:46.740 --> 00:06:48.441 line:-1 position:50%
and these circles
behind the plants


145
00:06:48.441 --> 00:06:51.945 line:-1 position:50%
look bright and out of place.


146
00:06:51.945 --> 00:06:54.914 line:-1 position:50%
If we inspect the code,
we find our answer:


147
00:06:54.914 --> 00:06:58.385 line:-1 position:50%
the background is a solid color.


148
00:06:58.385 --> 00:07:02.022 line:-1 position:50%
Solid colors like this one have
a fixed contrast against glass


149
00:07:02.022 --> 00:07:05.025 line:-1 position:50%
and can't adjust
to your surroundings.


150
00:07:05.025 --> 00:07:07.560 line:-1 position:50%
There's a check here to use
a slightly darker color


151
00:07:07.560 --> 00:07:11.264 line:-1 position:50%
in Dark Mode, which is
a common practice on iOS.


152
00:07:11.264 --> 00:07:14.100 line:-1 position:50%
This platform reports
its color scheme as dark,


153
00:07:14.100 --> 00:07:16.870 line:-1 position:50%
so this is the color
we see behind the plants.


154
00:07:16.870 --> 00:07:19.439 line:-1 position:50%
But remember, this platform
doesn't distinguish


155
00:07:19.439 --> 00:07:22.008 line:-1 position:50%
between light and dark
color schemes.


156
00:07:22.008 --> 00:07:25.512 line:-1 position:50%
Instead, the best way to make
sure your content is legible,


157
00:07:25.512 --> 00:07:27.781 line:-1 position:50%
regardless of what's coming
through glass,


158
00:07:27.781 --> 00:07:30.383 line:-1 position:50%
is to adopt vibrancy.


159
00:07:30.383 --> 00:07:32.819 line:-1 position:50%
Vibrant materials introduce
additional contrast


160
00:07:32.819 --> 00:07:36.423 line:-1 position:50%
and brightness to ensure
that content on top of glass


161
00:07:36.423 --> 00:07:40.126 line:-1 position:50%
remains legible no matter
what's shining through.


162
00:07:40.126 --> 00:07:42.429 line:-1 position:50%
All of the built-in controls
and containers


163
00:07:42.429 --> 00:07:44.931 line:-1 position:50%
use these vibrant materials
by default,


164
00:07:44.931 --> 00:07:46.866 line:-1 position:50%
so if you're using
standard controls,


165
00:07:46.866 --> 00:07:49.402 line:-1 position:50%
there's no extra work
for you here.


166
00:07:49.402 --> 00:07:52.238 line:-1 position:50%
SwiftUI's semantic styles
automatically adopt


167
00:07:52.238 --> 00:07:54.841 line:-1 position:50%
an appropriate appearance
on each platform.


168
00:07:54.841 --> 00:07:55.975 line:-1 position:50%
On this device,


169
00:07:55.975 --> 00:07:59.012 line:-1 position:50%
they look vibrant
when placed on top of glass.


170
00:07:59.012 --> 00:08:01.981 line:-1 position:50%
If you're building your own
custom views or containers,


171
00:08:01.981 --> 00:08:04.851 line:-1 position:50%
use these semantic styles
to make your content legible


172
00:08:04.851 --> 00:08:09.222 line:-1 position:50%
no matter how glass adapts
to your surroundings.


173
00:08:09.222 --> 00:08:12.792 line:-1 position:50%
Let's change these plant icons
to use a semantic fill color


174
00:08:12.792 --> 00:08:15.628 line:-1 position:50%
rather than a solid color.


175
00:08:15.628 --> 00:08:17.731 line:-1 position:50%
Since we're using
semantic materials,


176
00:08:17.731 --> 00:08:21.501 line:-1 position:50%
we can remove the color
scheme check altogether.


177
00:08:21.501 --> 00:08:26.606 line:-1 position:50%
Now the code is simpler and
more correct on all platforms.


178
00:08:26.606 --> 00:08:29.442 line:-1 position:50%
Wow, these icons
are much better.


179
00:08:29.442 --> 00:08:31.711 line:-1 position:50%
They pop beautifully
against the glass


180
00:08:31.711 --> 00:08:34.948 line:-1 position:50%
in every lighting condition.


181
00:08:34.948 --> 00:08:37.150 line:-1 position:50%
Now that we've spent some time
improving the visuals


182
00:08:37.150 --> 00:08:38.351 line:-1 position:50%
in the app,


183
00:08:38.351 --> 00:08:40.553 line:-1 position:50%
let's make sure all
the interactive components


184
00:08:40.553 --> 00:08:43.990 line:-1 position:50%
are clear and easy to target.


185
00:08:43.990 --> 00:08:46.793 line:-1 position:50%
As you learned in "Meet SwiftUI
for spatial computing,"


186
00:08:46.793 --> 00:08:50.196 line:-1 position:50%
there are four ways you can
interact with your apps.


187
00:08:50.196 --> 00:08:53.566 line:-1 position:50%
The most common interaction
is an indirect pinch gesture,


188
00:08:53.566 --> 00:08:56.102 line:-1 position:50%
where you look at a control
and pinch your fingers together


189
00:08:56.102 --> 00:08:58.204 line:-1 position:50%
to perform a tap.


190
00:08:58.204 --> 00:09:01.408 line:-1 position:50%
If an app is close to you, you
can directly interact with it


191
00:09:01.408 --> 00:09:04.411 line:-1 position:50%
just by reaching out
and touching it.


192
00:09:04.411 --> 00:09:06.980 line:-1 position:50%
If you've paired a trackpad,
you can use it as a pointer


193
00:09:06.980 --> 00:09:09.048 line:-1 position:50%
for precise input.


194
00:09:09.048 --> 00:09:11.418 line:-1 position:50%
And the world-class
accessibility technologies


195
00:09:11.418 --> 00:09:14.187 line:-1 position:50%
that you're already familiar
with on Apple platforms


196
00:09:14.187 --> 00:09:16.456 line:-1 position:50%
are also available
on this device.


197
00:09:16.456 --> 00:09:19.125 line:-1 position:50%
Tools like VoiceOver and
Switch Control enable everyone


198
00:09:19.125 --> 00:09:23.263 line:-1 position:50%
to have the same great
experience using your apps.


199
00:09:23.263 --> 00:09:25.565 line:-1 position:50%
On this platform,
interactable content


200
00:09:25.565 --> 00:09:28.201 line:-1 position:50%
is highlighted
using hover effects.


201
00:09:28,201 --> 00:09:30,403 position:50%
For example,
when you look at a control


202
00:09:30,403 --> 00:09:33,540 position:50%
like a button or a list,
a subtle highlight effect


203
00:09:33,540 --> 00:09:35,608 position:50%
over the view's bounds
makes it clear


204
00:09:35,608 --> 00:09:38,011 position:50%
that you can interact with it.


205
00:09:38.011 --> 00:09:40.413 line:-1 position:50%
These hover effects are crucial
to making your app


206
00:09:40.413 --> 00:09:42.215 line:-1 position:50%
feel responsive.


207
00:09:42.215 --> 00:09:44.851 line:-1 position:50%
They give people confidence
that the view they're looking at


208
00:09:44.851 --> 00:09:49.189 line:-1 position:50%
or reaching for is the view
that they'll interact with.


209
00:09:49.189 --> 00:09:50.957 line:-1 position:50%
Hover effects are
added automatically


210
00:09:50.957 --> 00:09:52.826 line:-1 position:50%
to all system controls.


211
00:09:52.826 --> 00:09:55.962 line:-1 position:50%
If you use the built-in controls
provided by SwiftUI,


212
00:09:55.962 --> 00:09:59.365 line:-1 position:50%
you'll get these effects
in your app for free.


213
00:09:59.365 --> 00:10:01.501 line:-1 position:50%
I noticed a missing hover
effect on the Birds tab


214
00:10:01.501 --> 00:10:02.936 line:-1 position:50%
of our app.


215
00:10:02.936 --> 00:10:06.139 line:-1 position:50%
I can tap on one of these birds,
but there's no visual indication


216
00:10:06.139 --> 00:10:09.642 line:-1 position:50%
that I can do that
because there's no hover effect.


217
00:10:09.642 --> 00:10:12.579 line:-1 position:50%
Whenever you make a control that
responds to gestures like taps,


218
00:10:12.579 --> 00:10:16.182 line:-1 position:50%
it should probably
have a hover effect.


219
00:10:16.182 --> 00:10:19.719 line:-1 position:50%
You can add one using
the hoverEffect() modifier.


220
00:10:19.719 --> 00:10:21.821 line:-1 position:50%
By default, the hover effect
is a highlight,


221
00:10:21.821 --> 00:10:26.092 line:-1 position:50%
meaning it will brighten
when you look at the control.


222
00:10:26.092 --> 00:10:27.327 line:-1 position:50%
With our new hover effect,


223
00:10:27.327 --> 00:10:30.630 line:-1 position:50%
it's clear that I can interact
with these controls,


224
00:10:30.630 --> 00:10:33.366 line:-1 position:50%
but the hover effect
has these sharp corners,


225
00:10:33.366 --> 00:10:36.503 line:-1 position:50%
and I think they'd look
a little better rounded.


226
00:10:36,503 --> 00:10:37,971 position:50%
I can provide a custom shape


227
00:10:37,971 --> 00:10:40,306 position:50%
using the contentShape()
modifier,


228
00:10:40,306 --> 00:10:43,142 position:50%
with hoverEffect as the kind.


229
00:10:43,142 --> 00:10:45,945 position:50%
The hoverEffect() modifier
reads this content shape


230
00:10:45,945 --> 00:10:48,681 position:50%
out of the view
that it modifies.


231
00:10:53.386 --> 00:10:55.655 line:-1 position:50%
There, that feels much better.


232
00:10:55.655 --> 00:10:58.391 line:-1 position:50%
The hover effect is clear
and has a bit of padding


233
00:10:58.391 --> 00:11:00.760 line:-1 position:50%
and nice rounded corners.


234
00:11:00.760 --> 00:11:04.030 line:-1 position:50%
However, I think there's
more that we can do.


235
00:11:04.030 --> 00:11:06.699 line:-1 position:50%
In SwiftUI, if a control
performs an action


236
00:11:06.699 --> 00:11:09.836 line:-1 position:50%
in response to a tap,
it's likely that the control


237
00:11:09.836 --> 00:11:12.405 line:-1 position:50%
should just be a button.


238
00:11:12,405 --> 00:11:15,074 position:50%
Let's change the bird view
to a button.


239
00:11:18,778 --> 00:11:21,214 position:50%
Buttons are bordered
by default on this platform,


240
00:11:21,214 --> 00:11:23,283 position:50%
but I don't want these buttons
to have a background


241
00:11:23,283 --> 00:11:25,418 position:50%
when I'm not looking at them.


242
00:11:25,418 --> 00:11:27,487 position:50%
I'll make this a plain button,
so it gets


243
00:11:27,487 --> 00:11:33,626 position:50%
a standard hover effect but no
background or internal padding.


244
00:11:33.626 --> 00:11:34.727 line:-1 position:50%
Perfect!


245
00:11:34.727 --> 00:11:36.763 line:-1 position:50%
These buttons have
a standard hover effect,


246
00:11:36.763 --> 00:11:39.699 line:-1 position:50%
and they scale down
when they're tapped.


247
00:11:39.699 --> 00:11:43.036 line:-1 position:50%
Hover effects were built
to preserve privacy.


248
00:11:43.036 --> 00:11:45.104 line:-1 position:50%
These effects are performed
by the system


249
00:11:45.104 --> 00:11:47.140 line:-1 position:50%
outside of your app's process.


250
00:11:47.140 --> 00:11:50.076 line:-1 position:50%
System hover effects are
the only way to make your app


251
00:11:50.076 --> 00:11:52.445 line:-1 position:50%
react to where
people are looking.


252
00:11:52.445 --> 00:11:55.548 line:-1 position:50%
Your app is only told when
someone pinches their fingers,


253
00:11:55.548 --> 00:11:58.418 line:-1 position:50%
directly touches your app,
or hovers their finger


254
00:11:58.418 --> 00:12:01.020 line:-1 position:50%
or pointer over your controls.


255
00:12:01.020 --> 00:12:03.556 line:-1 position:50%
After all these changes,
I'd say Backyard Birds


256
00:12:03.556 --> 00:12:05.224 line:-1 position:50%
is looking pretty good.


257
00:12:05.224 --> 00:12:07.727 line:-1 position:50%
But by making some small
changes to our layout


258
00:12:07.727 --> 00:12:10.563 line:-1 position:50%
and adopting some features
unique to this platform,


259
00:12:10.563 --> 00:12:13.066 line:-1 position:50%
we can really take to the skies.


260
00:12:13.066 --> 00:12:15.969 line:-1 position:50%
Let's talk about some
of the top-level layout.


261
00:12:15.969 --> 00:12:18.671 line:-1 position:50%
On iPad, when a window's
horizontal size class


262
00:12:18.671 --> 00:12:19.872 line:-1 position:50%
is regular,


263
00:12:19.872 --> 00:12:22.275 line:-1 position:50%
a sidebar is preferred
over a tab view


264
00:12:22.275 --> 00:12:25.144 line:-1 position:50%
because it makes better use
of the increased width.


265
00:12:25.144 --> 00:12:28.047 line:-1 position:50%
On this device, however,
your windows are not tied


266
00:12:28.047 --> 00:12:31.150 line:-1 position:50%
to the size of a screen,
and controls are not required


267
00:12:31.150 --> 00:12:33.386 line:-1 position:50%
to live inside your window.


268
00:12:33.386 --> 00:12:38.124 line:-1 position:50%
Consider using a tab view to
switch between top-level views.


269
00:12:38.124 --> 00:12:41.194 line:-1 position:50%
When using a tab view,
the tab bar is attached


270
00:12:41.194 --> 00:12:45.732 line:-1 position:50%
to the left side of your app,
like the one here in Photos.


271
00:12:45.732 --> 00:12:47.600 line:-1 position:50%
When you look at
one of the icons,


272
00:12:47.600 --> 00:12:51.904 line:-1 position:50%
it automatically expands
to show each tab's label.


273
00:12:51.904 --> 00:12:55.174 line:-1 position:50%
Let's go ahead and switch
from a navigation split view


274
00:12:55.174 --> 00:12:56.843 line:-1 position:50%
to a tab view.


275
00:12:56.843 --> 00:13:00.546 line:-1 position:50%
[KEYSTROKES]


276
00:13:00.546 --> 00:13:03.383 line:-1 position:50%
I'll make a view
for each screen in the app...


277
00:13:03.383 --> 00:13:08.254 line:-1 position:50%
[KEYSTROKES]


278
00:13:11.357 --> 00:13:14.527 line:-1 position:50%
...and give it a tab item
with a title and icon.


279
00:13:14.527 --> 00:13:16.529 line:-1 position:50%
[KEYSTROKES]


280
00:13:17.797 --> 00:13:18.798 line:-1 position:50%
Nice!


281
00:13:18.798 --> 00:13:20.133 line:-1 position:50%
The tab bar is collapsed


282
00:13:20.133 --> 00:13:22.201 line:-1 position:50%
when you're not
interacting with it,


283
00:13:22.201 --> 00:13:26.139 line:-1 position:50%
and the app now has much
more room for its content.


284
00:13:26.139 --> 00:13:28.908 line:-1 position:50%
Notice how the tab bar
sits outside of the window


285
00:13:28.908 --> 00:13:31.110 line:-1 position:50%
instead of within it.


286
00:13:31.110 --> 00:13:34.247 line:-1 position:50%
This kind of attachment
is called an ornament.


287
00:13:34.247 --> 00:13:36.382 line:-1 position:50%
Ornaments are positioned
outside the boundaries


288
00:13:36.382 --> 00:13:39.052 line:-1 position:50%
at the edges of your windows
and are a great place


289
00:13:39.052 --> 00:13:40.753 line:-1 position:50%
to put additional controls
that you want


290
00:13:40.753 --> 00:13:43.756 line:-1 position:50%
alongside your main content.


291
00:13:43.756 --> 00:13:46.726 line:-1 position:50%
In addition to the tab bar,
Photos has a toolbar


292
00:13:46.726 --> 00:13:48.828 line:-1 position:50%
at the bottom that lets you
control the time ranges


293
00:13:48.828 --> 00:13:51.731 line:-1 position:50%
shown in your library.


294
00:13:51.731 --> 00:13:53.900 line:-1 position:50%
These kinds of ornaments
are so common,


295
00:13:53.900 --> 00:13:56.969 line:-1 position:50%
you can add one automatically
with the .toolbar modifier


296
00:13:56.969 --> 00:13:59.906 line:-1 position:50%
using the bottomOrnament
placement.


297
00:13:59.906 --> 00:14:02.775 line:-1 position:50%
Toolbar ornaments provide
a glass capsule background


298
00:14:02.775 --> 00:14:04.711 line:-1 position:50%
automatically.


299
00:14:04.711 --> 00:14:08.081 line:-1 position:50%
I have an idea for an ornament
to add to Backyard Birds.


300
00:14:08.081 --> 00:14:10.249 line:-1 position:50%
I try to keep an eye on how
much water and seed


301
00:14:10.249 --> 00:14:12.251 line:-1 position:50%
I've left out,
but if I'm running low,


302
00:14:12.251 --> 00:14:15.788 line:-1 position:50%
I'd like to be told that
a feeder needs a refill.


303
00:14:15.788 --> 00:14:17.757 line:-1 position:50%
You can build this kind
of custom ornament


304
00:14:17.757 --> 00:14:20.393 line:-1 position:50%
using the ornament() modifier.


305
00:14:20.393 --> 00:14:23.629 line:-1 position:50%
The attachmentAnchor
determines where in your app


306
00:14:23.629 --> 00:14:25.565 line:-1 position:50%
the ornament will be attached.


307
00:14:25.565 --> 00:14:28.668 line:-1 position:50%
I could put my notification
on any edge of my app window,


308
00:14:28.668 --> 00:14:31.738 line:-1 position:50%
but I want to align it
to the bottom.


309
00:14:31.738 --> 00:14:34.440 line:-1 position:50%
The contentAlignment
parameter lets you choose


310
00:14:34.440 --> 00:14:38.745 line:-1 position:50%
what part of your ornament is
aligned to the attachmentAnchor.


311
00:14:38.745 --> 00:14:40.880 line:-1 position:50%
I'd like to put the center
of my ornament


312
00:14:40.880 --> 00:14:43.716 line:-1 position:50%
at the bottom of my app.


313
00:14:43.716 --> 00:14:45.852 line:-1 position:50%
Because you have more control
over the contents


314
00:14:45.852 --> 00:14:48.621 line:-1 position:50%
of a custom ornament,
SwiftUI does not give them


315
00:14:48.621 --> 00:14:50.957 line:-1 position:50%
a glass background by default.


316
00:14:50.957 --> 00:14:52.759 line:-1 position:50%
If you do want one,
you can use


317
00:14:52.759 --> 00:14:54.694 line:-1 position:50%
the .glassBackgroundEffect()
modifier


318
00:14:54.694 --> 00:14:57.396 line:-1 position:50%
on the ornament's contents.


319
00:14:57.396 --> 00:14:59.665 line:-1 position:50%
Now when there's not
enough water or seeds


320
00:14:59.665 --> 00:15:02.001 line:-1 position:50%
in any of my yards,
I'll get this message


321
00:15:02.001 --> 00:15:04.203 line:-1 position:50%
at the bottom of my app,
and I can tap on it


322
00:15:04.203 --> 00:15:06.339 line:-1 position:50%
to navigate to that yard.


323
00:15:06.339 --> 00:15:07.540 line:-1 position:50%
I love it!


324
00:15:07.540 --> 00:15:10.309 line:-1 position:50%
Because SwiftUI automatically
adapts to the platform


325
00:15:10.309 --> 00:15:11.444 line:-1 position:50%
it's running on,


326
00:15:11.444 --> 00:15:13.212 line:-1 position:50%
it was simple to make
Backyard Birds


327
00:15:13.212 --> 00:15:16.082 line:-1 position:50%
feel at home
in the Shared Space.


328
00:15:16.082 --> 00:15:18.951 line:-1 position:50%
You can follow
the same steps in your apps.


329
00:15:18.951 --> 00:15:21.721 line:-1 position:50%
Add hover effects
to interactive controls,


330
00:15:21.721 --> 00:15:24.891 line:-1 position:50%
use vector assets
and vibrancy for legibility,


331
00:15:24.891 --> 00:15:28.060 line:-1 position:50%
and make ornaments
for auxiliary controls.


332
00:15:28.060 --> 00:15:30.096 line:-1 position:50%
There's still so much more
that you can explore


333
00:15:30.096 --> 00:15:32.365 line:-1 position:50%
that's only possible
on this platform,


334
00:15:32.365 --> 00:15:35.468 line:-1 position:50%
like volumes for 3D content
and Immersive Spaces


335
00:15:35.468 --> 00:15:37.603 line:-1 position:50%
for spatial experiences.


336
00:15:37,603 --> 00:15:40,439 position:50%
Check out "Take SwiftUI
to the next dimension"


337
00:15:40,439 --> 00:15:42,942 position:50%
and "Go beyond the window
with SwiftUI"


338
00:15:42,942 --> 00:15:46,345 position:50%
to learn how to expand your app
beyond its window.


339
00:15:46.345 --> 00:15:48.981 line:-1 position:50%
Thanks and happy coding!


340
00:15:48,981 --> 00:15:52,251 line:0 position:90% size:2%
♪

