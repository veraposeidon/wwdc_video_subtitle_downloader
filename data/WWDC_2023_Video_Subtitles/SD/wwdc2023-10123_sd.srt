2
00:00:00.334 --> 00:00:07.341 line:-1 align:center
♪ ♪


3
00:00:10.010 --> 00:00:12.946 line:-2 align:center
Aiswariya: Hello and welcome.
My name is Aiswariya,


4
00:00:12.980 --> 00:00:18.252 line:-2 align:center
and I'm very excited to talk to you
about bringing your game to the Mac.


5
00:00:18,285 --> 00:00:21,054 line:-2
This session is the first
in a three-part series


6
00:00:21.088 --> 00:00:24.491 line:-2 align:center
about how to bring
your high-end game to Mac.


7
00:00:24,525 --> 00:00:26,426 line:0
In the second and third sessions,


8
00:00:26,460 --> 00:00:30,998 line:0
my colleagues will focus on tools
and techniques for compiling your shaders


9
00:00:31,031 --> 00:00:34,568 align:center
and best practices when rendering natively
with Metal.


10
00:00:34.601 --> 00:00:38.972 line:-2 align:center
You have everything you need
to deliver an amazing gaming experience


11
00:00:39,006 --> 00:00:43,477 line:-2
with Apple Silicon Mac’s
advanced graphics, fantastic performance,


12
00:00:43,510 --> 00:00:48,048 line:-2
immersive audio, stunning displays,
and feature-rich software.


13
00:00:48.081 --> 00:00:50.951 line:-1 align:center
With Macs more popular than ever before,


14
00:00:50.984 --> 00:00:55.556 line:-2 align:center
there’s never been a better time to bring
your games to millions of new players.


15
00:00:55,589 --> 00:00:59,393 line:0
Porting your Windows game to the Mac
is now faster than ever.


16
00:00:59,426 --> 00:01:04,131 align:center
This year, the new Game Porting Toolkit
provides an emulation environment


17
00:01:04,164 --> 00:01:07,701 align:center
to run your existing,
unmodified Windows game,


18
00:01:07,734 --> 00:01:11,705 align:center
and you can use it to quickly understand
the graphics feature usage


19
00:01:11,738 --> 00:01:15,342 line:0
and performance potential of your game
when running on a Mac.


20
00:01:15.375 --> 00:01:21.215 line:-2 align:center
It doesn't take months to get a sense
of how your game looks, sounds, and plays.


21
00:01:21.248 --> 00:01:23.750 line:-1 align:center
You see your game’s potential right away.


22
00:01:24.685 --> 00:01:29.590 line:-2 align:center
Porting your Windows game to a whole new
platform typically involves many steps


23
00:01:29.623 --> 00:01:32.259 line:-2 align:center
before you even see
your first scene running,


24
00:01:32,292 --> 00:01:34,995 line:-1
including recompiling your source code;


25
00:01:35.028 --> 00:01:38.365 line:-2 align:center
converting thousands of custom shaders
from HLSL;


26
00:01:38,398 --> 00:01:41,068 line:-1
re-implementing your graphics subsystem;


27
00:01:41,101 --> 00:01:46,240 line:-2
and converting your use of audio,
input, display, and HDR rendering–


28
00:01:46.273 --> 00:01:49.743 line:-2 align:center
all before you can even see
your first scene running natively–


29
00:01:49.776 --> 00:01:55.516 line:-2 align:center
and then finally debugging and optimizing
for performance before you release it.


30
00:01:55,549 --> 00:01:57,851 line:-1
With the help of the Game Porting Toolkit,


31
00:01:57,885 --> 00:02:03,524 line:-2
you can now see your game's first scene
running on the platform much earlier.


32
00:02:03,557 --> 00:02:07,661 align:center
The Game Porting Toolkit includes
a new Metal Shader Converter,


33
00:02:07,694 --> 00:02:10,163 align:center
which you can use to automatically convert


34
00:02:10,197 --> 00:02:14,835 line:0
all of your existing HLSL GPU shaders
to Metal.


35
00:02:14.868 --> 00:02:16.770 line:-1 align:center
With the Metal Shader Converter,


36
00:02:16.803 --> 00:02:22.109 line:-2 align:center
bringing your shaders and graphics
to Mac takes a lot less time too.


37
00:02:22.142 --> 00:02:24.711 line:-2 align:center
You can ship sooner
and still have more time


38
00:02:24.745 --> 00:02:29.816 line:-2 align:center
to take advantage of the unique features
of Mac and Apple silicon.


39
00:02:29,850 --> 00:02:33,187 line:-2
Seeing your game running right away
can even help you


40
00:02:33.220 --> 00:02:38.091 line:-2 align:center
when you use a cross-platform engine
to take care of most of your porting.


41
00:02:38.125 --> 00:02:42.930 line:-2 align:center
You can see your game's potential ahead
of porting any platform-specific code


42
00:02:42,963 --> 00:02:47,501 line:-2
or plug-ins that your Windows game added
over the cross-platform engine.


43
00:02:47,534 --> 00:02:51,805 line:-2
Porting your game to the Mac starts
with evaluating your game,


44
00:02:51.839 --> 00:02:55.776 line:-2 align:center
followed by compiling your shaders,
rendering with Metal,


45
00:02:55.809 --> 00:03:01.949 line:-2 align:center
converting your game’s use of input,
audio, and display and HDR rendering.


46
00:03:01,982 --> 00:03:04,351 line:-2
The first step is to use
the Game Porting Toolkit


47
00:03:04,384 --> 00:03:06,687 line:-1
to evaluate your game.


48
00:03:06,720 --> 00:03:10,757 align:center
The environment
of the Game Porting Toolkit translates


49
00:03:10,791 --> 00:03:14,962 line:0
your game’s Intel instructions
and its use of Windows APIs


50
00:03:14,995 --> 00:03:18,398 line:0
for keyboard, mouse, and controller input;


51
00:03:18,432 --> 00:03:20,033 line:0
for audio playback;


52
00:03:20,067 --> 00:03:22,603 line:0
for networking and file system use;


53
00:03:22,636 --> 00:03:24,638 align:center
and of course, for graphics.


54
00:03:24,671 --> 00:03:30,077 align:center
All modern graphics features, such as
GPU-driven pipelines and SIMD operations,


55
00:03:30,110 --> 00:03:33,914 line:0
and even older features,
such as tessellation and geometry shaders,


56
00:03:33,947 --> 00:03:35,182 align:center
are translated.


57
00:03:35.215 --> 00:03:37.751 line:-1 align:center
Take a look at this in action.


58
00:03:37.784 --> 00:03:42.122 line:-2 align:center
Here’s how a developer like Bloober
might use the Game Porting Toolkit


59
00:03:42,155 --> 00:03:46,026 line:-2
to examine their Windows DirectX 12 build
of "The Medium."


60
00:03:46.059 --> 00:03:51.031 line:-2 align:center
"The Medium" is a recent game developed
and published by Bloober.


61
00:03:51,064 --> 00:03:54,902 line:-2
Their native Apple Silicon
and Metal release is an amazing,


62
00:03:54.935 --> 00:03:57.137 line:-1 align:center
beautiful, super fun game to play.


63
00:03:57.171 --> 00:03:59.773 line:-1 align:center
It’s also just a little bit scary,


64
00:03:59,806 --> 00:04:04,678 line:-2
delivering a highly immersive graphics
and audio experience for the player.


65
00:04:04.711 --> 00:04:07.247 line:-1 align:center
After installing the tool kit,


66
00:04:07,281 --> 00:04:10,617 line:-2
they copy a Windows build of "The Medium"
to their Mac


67
00:04:10.651 --> 00:04:13.153 line:-1 align:center
and launch it from a terminal.


68
00:04:13,187 --> 00:04:17,124 line:-2
As it launches in the Game Porting
Toolkit’s translation environment,


69
00:04:17,157 --> 00:04:21,395 line:-2
logging and debug information appears
in the terminal.


70
00:04:21.428 --> 00:04:23.997 line:-2 align:center
When you launch your game,
this logging may include


71
00:04:24,031 --> 00:04:26,366 line:-1
potential issues for you to address,


72
00:04:26,400 --> 00:04:29,937 line:-2
but things look clear here
for Bloober’s developers.


73
00:04:29.970 --> 00:04:33.006 line:-2 align:center
Take a look
in the Game Porting Toolkit documentation


74
00:04:33,040 --> 00:04:37,611 line:-2
to find details on what you might find
in the logging for your game.


75
00:04:37.644 --> 00:04:41.014 line:-2 align:center
Here the developer sees
that the gaming is running well


76
00:04:41,048 --> 00:04:43,550 line:-1
with all of its graphics features enabled,


77
00:04:43.584 --> 00:04:45.686 line:-1 align:center
and it's working as expected.


78
00:04:45,719 --> 00:04:48,422 line:-2
They’ll notice that features
like transparency,


79
00:04:48.455 --> 00:04:51.825 line:-2 align:center
reflection, geometry shaders,
tessellation,


80
00:04:51.859 --> 00:04:55.863 line:-2 align:center
and their unique and moody
global illumination approach to lighting


81
00:04:55.896 --> 00:05:01.068 line:-2 align:center
have all been translated into Metal 3
and look crisp and pixel-perfect.


82
00:05:01.101 --> 00:05:05.839 line:-2 align:center
The next step is to play for a little bit
to get a sense of baseline performance.


83
00:05:05,873 --> 00:05:09,543 align:center
It’s worth noting that the baseline
performance you will observe


84
00:05:09,576 --> 00:05:14,281 align:center
running your Windows game includes all
the overhead of the Game Porting Toolkit


85
00:05:14,314 --> 00:05:17,718 line:0
as well as API
and instruction set translation.


86
00:05:18,785 --> 00:05:22,856 line:-2
In Bloober’s case, the Windows version
is of course not making use


87
00:05:22,890 --> 00:05:27,461 line:-2
of performance-enhancing features
like MetalFX upscaling.


88
00:05:27,494 --> 00:05:31,131 line:-2
When a non-native game runs
through these layers of translation,


89
00:05:31.164 --> 00:05:34.868 line:-2 align:center
its performance
and power efficiency may be affected.


90
00:05:36.403 --> 00:05:39.907 line:-2 align:center
Bringing your game natively to the Mac
will increase its performance


91
00:05:39,940 --> 00:05:43,777 line:-2
and allow you to take advantage
of many advanced features


92
00:05:43.810 --> 00:05:48.682 line:-2 align:center
of Apple silicon and Mac hardware,
including features like MetalFX


93
00:05:48.715 --> 00:05:53.687 line:-2 align:center
and extended dynamic range features
of Apple’s built-in displays.


94
00:05:53.720 --> 00:05:57.024 line:-2 align:center
A great workflow
for evaluating a game is to play it


95
00:05:57.057 --> 00:05:59.526 line:-1 align:center
with the Metal Performance HUD enabled


96
00:05:59,560 --> 00:06:05,432 line:-2
and to look for specific spots
that might warrant a deeper look.


97
00:06:05,465 --> 00:06:10,070 line:-2
The developers found a spot where the HUD
is showing occasional dropped frames


98
00:06:10.103 --> 00:06:13.073 line:-1 align:center
as well as much lower average frame rate.


99
00:06:13.106 --> 00:06:17.578 line:-2 align:center
They are then able to use Instruments
to capture a Metal System Trace.


100
00:06:17.611 --> 00:06:21.648 line:-2 align:center
This is a great way to investigate
performance issues.


101
00:06:21,682 --> 00:06:24,318 line:-2
The Metal Performance HUD
has been enhanced


102
00:06:24.351 --> 00:06:27.921 line:-2 align:center
when you are running
in the Game Porting Toolkit.


103
00:06:27.955 --> 00:06:31.258 line:-2 align:center
The standard portion
of the HUD is still at the top.


104
00:06:31,291 --> 00:06:35,896 line:-2
It shows information about the GPU
and resolution being rendered,


105
00:06:35.929 --> 00:06:39.399 line:-2 align:center
the instantaneous frame rate,
present-to-present interval,


106
00:06:39.433 --> 00:06:43.904 line:-2 align:center
and an approximation
of the amount of GPU time being used.


107
00:06:43,937 --> 00:06:47,574 line:-2
It highlights high and low values
of these statistics,


108
00:06:47,608 --> 00:06:53,080 line:-2
shows memory usage, and provides
a graph of the last few seconds of data.


109
00:06:53,113 --> 00:06:58,619 align:center
Below, the HUD now shows deeper details
about instruction set translation


110
00:06:58,652 --> 00:07:02,155 align:center
and which Direct3D API version
is being used,


111
00:07:02,189 --> 00:07:04,725 align:center
how many render encoders are in use,


112
00:07:04,758 --> 00:07:07,961 align:center
how many command buffers
and dispatches are happening,


113
00:07:07,995 --> 00:07:10,631 line:0
and how many of each type of features,


114
00:07:10,664 --> 00:07:13,634 align:center
such as geometry shaders
and tessellation shaders,


115
00:07:13,667 --> 00:07:15,769 align:center
are being used each frame.


116
00:07:15,802 --> 00:07:20,107 line:0
Additionally, resource copies
and clears are captured.


117
00:07:20.140 --> 00:07:22.876 line:-2 align:center
Here they open the trace file
in Instruments


118
00:07:22.910 --> 00:07:26.647 line:-2 align:center
and then browse to quickly find
where we see frame drops.


119
00:07:26.680 --> 00:07:32.853 line:-2 align:center
Here it is, an area where the GPU timeline
has huge gaps and little utilization


120
00:07:32.886 --> 00:07:36.690 line:-2 align:center
and there were several frames
where no work was scheduled at all.


121
00:07:36.723 --> 00:07:40.194 line:-2 align:center
After studying this,
it looks very likely to be caused


122
00:07:40.227 --> 00:07:46.233 line:-2 align:center
by the overhead of instruction translation
or differences caused by API translation.


123
00:07:46.266 --> 00:07:48.836 line:-2 align:center
These are just the kinds of problems
that will go away


124
00:07:48.869 --> 00:07:51.905 line:-1 align:center
when you bring your game to Mac natively.


125
00:07:51.939 --> 00:07:56.810 line:-2 align:center
You can be sure your game will have better
performance and run more efficiently.


126
00:07:56,844 --> 00:08:00,881 line:-2
Additionally, using best practices
for rendering in Metal


127
00:08:00.914 --> 00:08:06.220 line:-2 align:center
and adopting MetalFX upscaling will boost
your game’s performance even further.


128
00:08:06,253 --> 00:08:09,790 line:-2
Here is "The Medium’s" native version
running side by side


129
00:08:09,823 --> 00:08:15,362 line:-2
with the translated version, making more
optimal use of Metal 3 and Apple Silicon


130
00:08:15.395 --> 00:08:18.765 line:-2 align:center
for a dramatic improvement
in frame rate in this scene.


131
00:08:18.799 --> 00:08:22.069 line:-2 align:center
To get started
using the Game Porting Toolkit,


132
00:08:22,102 --> 00:08:25,072 line:-1
just head to developer.apple.com.


133
00:08:25,105 --> 00:08:27,608 line:-2
You’ll find a package
containing instructions


134
00:08:27,641 --> 00:08:32,980 line:-2
for building and configuring the tool kit
so you can begin evaluating your game.


135
00:08:33.013 --> 00:08:36.149 line:-2 align:center
You can provide your feedback,
questions, and suggestions


136
00:08:36.183 --> 00:08:39.553 line:-2 align:center
about the Game Porting Toolkit
and bringing your game to Mac


137
00:08:39.586 --> 00:08:42.556 line:-1 align:center
using Feedback Assistant.


138
00:08:42,589 --> 00:08:46,293 line:-2
Now that you’ve evaluated
your graphics features and performance


139
00:08:46.326 --> 00:08:48.629 line:-1 align:center
by running your existing Windows game,


140
00:08:48,662 --> 00:08:51,198 line:-2
take that knowledge
to port your shader pipeline.


141
00:08:52,266 --> 00:08:54,701 line:-1
You can use Metal Shader Converter tool


142
00:08:54.735 --> 00:08:58.071 line:-2 align:center
to convert all your game’s
advanced shading pipelines,


143
00:08:58,105 --> 00:09:02,609 line:-2
including geometry, tessellation,
mesh, and ray tracing stages.


144
00:09:02,643 --> 00:09:07,681 line:0
Compiling your shaders is a deep topic
on its own, so when you’re ready,


145
00:09:07,714 --> 00:09:11,185 line:0
watch the second talk in this series,
“Compile Your Shaders.”


146
00:09:11,218 --> 00:09:14,588 line:-2
It’s time to take a look
at rendering with Metal.


147
00:09:15.656 --> 00:09:19.993 line:-2 align:center
Metal 3 provides all of the advanced
graphics and compute features,


148
00:09:20.027 --> 00:09:23.230 line:-1 align:center
including MetalFX, fast resource loading,


149
00:09:23.263 --> 00:09:26.934 line:-2 align:center
offline compilation, mesh shaders,
and ray tracing,


150
00:09:26.967 --> 00:09:29.203 line:-1 align:center
used by modern high-end games,


151
00:09:29,236 --> 00:09:33,440 line:-2
which makes converting your graphics code
incredibly straightforward.


152
00:09:33,473 --> 00:09:37,010 line:0
The third session in the series,
“Render with Metal,”


153
00:09:37,044 --> 00:09:39,580 align:center
is about how to port your renderer
to Metal


154
00:09:39,613 --> 00:09:42,416 line:0
and get great performance
out of Apple Silicon.


155
00:09:42,449 --> 00:09:47,821 line:-2
You evaluated your game’s basic input
features through the Game Porting Toolkit.


156
00:09:47,855 --> 00:09:49,990 line:-1
Now it's time to port it natively


157
00:09:50.023 --> 00:09:54.328 line:-2 align:center
and take advantage of advanced features
like rumble and haptics.


158
00:09:55.295 --> 00:10:00.300 line:-2 align:center
Your Windows game is either already built
over a cross-platform game engine


159
00:10:00,334 --> 00:10:03,337 line:-1
and making use of common input plug-ins,


160
00:10:03,370 --> 00:10:09,676 line:-2
or it’s making direct use of low-level
Windows APIs like XInput and GameInput,


161
00:10:09.710 --> 00:10:14.014 line:-2 align:center
or it may bundle a custom SDK
for game peripherals.


162
00:10:14,047 --> 00:10:18,051 align:center
On Apple platforms, the Game Controller
framework provides your game


163
00:10:18,085 --> 00:10:20,687 align:center
with thread-safe and low latency support


164
00:10:20,721 --> 00:10:23,957 line:0
for game input across a wide variety
of peripherals,


165
00:10:23,991 --> 00:10:29,530 align:center
such as game pads, keyboards, mice,
racing wheels, and arcade sticks.


166
00:10:29.563 --> 00:10:34.568 line:-2 align:center
You also have access to additional
capabilities of game controllers,


167
00:10:34.601 --> 00:10:37.771 line:-1 align:center
including haptics and motion.


168
00:10:37.804 --> 00:10:42.209 line:-2 align:center
Apple platforms provides
system-level user preferences support


169
00:10:42,242 --> 00:10:46,313 line:-2
for per-app input remapping,
as well as automatic support


170
00:10:46.346 --> 00:10:49.349 line:-2 align:center
for screenshots,
capturing video recordings,


171
00:10:49.383 --> 00:10:54.188 line:-2 align:center
and 15-second highlights of gameplay
right from a controller in any game.


172
00:10:54,221 --> 00:10:58,025 line:0
It is easy to port
your game’s input logic.


173
00:10:58,058 --> 00:11:01,061 line:0
When you’re ready to learn more,
these two prior talks,


174
00:11:01,094 --> 00:11:04,064 align:center
“Tap into Virtual and Physical
Game Controllers”


175
00:11:04,097 --> 00:11:06,266 align:center
and “Advancements in Game Controllers,”


176
00:11:06,300 --> 00:11:10,003 align:center
are great places
to find details and sample code.


177
00:11:10.037 --> 00:11:14.875 line:-2 align:center
Audio is another key part
of a captivating game experience.


178
00:11:14,908 --> 00:11:18,946 line:-2
Bringing your existing game’s
audio workflow and features natively


179
00:11:18,979 --> 00:11:21,215 line:-1
to the Mac is quite straightforward.


180
00:11:21.248 --> 00:11:24.384 line:-2 align:center
Apple devices have state-of-the-art
built-in speakers


181
00:11:24,418 --> 00:11:26,753 line:-1
that your players can hear loud and clear


182
00:11:26,787 --> 00:11:29,857 line:-2
because there are no loud fans
drowning them out.


183
00:11:29.890 --> 00:11:33.794 line:-2 align:center
There are also many excellent wired
and wireless audio peripherals


184
00:11:33,827 --> 00:11:40,000 line:-2
compatible with Apple devices
which support low latency spatial audio.


185
00:11:40,033 --> 00:11:45,639 line:-2
Your existing game likely already uses
cross-platform audio middleware solutions


186
00:11:45.672 --> 00:11:48.842 line:-1 align:center
like Wwise, Unity, and FMOD.


187
00:11:48.876 --> 00:11:55.716 line:-2 align:center
These middleware products generally
abstract system audio APIs and frameworks.


188
00:11:55,749 --> 00:12:00,521 line:-2
On Windows, you may be using
middleware layers over lower-level APIs


189
00:12:00.554 --> 00:12:04.191 line:-1 align:center
like DirectSound, XAudio2, and WASAPI.


190
00:12:04.224 --> 00:12:08.395 line:-2 align:center
Those same middleware products exist
on Apple platforms.


191
00:12:08,428 --> 00:12:13,534 line:-2
These make use of a rich set of high
and low-level Apple audio frameworks


192
00:12:13,567 --> 00:12:18,705 line:-2
including Spatial Mixer Audio Unit,
PHASE, and AVAudioEngine.


193
00:12:18.739 --> 00:12:23.377 line:-2 align:center
Great news: you’ll find that all these
middleware products are well supported


194
00:12:23,410 --> 00:12:25,746 line:-1
with native Apple Silicon SDKs.


195
00:12:25,779 --> 00:12:28,348 line:-2
There is little or nothing
you will need to do.


196
00:12:28.382 --> 00:12:31.385 line:-2 align:center
But if you’re not using middleware,
of course you can use


197
00:12:31,418 --> 00:12:35,222 line:-2
the platform-provided audio frameworks
and APIs directly,


198
00:12:35.255 --> 00:12:37.024 line:-1 align:center
just like the middleware does.


199
00:12:37.057 --> 00:12:40.894 line:-2 align:center
In particular, to achieve
great spatial audio at this level,


200
00:12:40,928 --> 00:12:44,631 line:-2
check out the PHASE documentation
as well as the sample code


201
00:12:44.665 --> 00:12:51.004 line:-2 align:center
which demonstrates creating spatial audio
from a 12-channel, 7.1.4 PCM data


202
00:12:51.038 --> 00:12:53.574 line:-1 align:center
using AUSpatialMixer.


203
00:12:53,607 --> 00:12:58,011 align:center
These previous talks about CoreAudio,
AudioUnits, and PHASE


204
00:12:58,045 --> 00:13:02,583 line:0
are also great sessions to learn
about using low-level system frameworks


205
00:13:02,616 --> 00:13:06,153 align:center
if your game is not based
on audio middleware.


206
00:13:06.186 --> 00:13:09.923 line:-2 align:center
Apple’s displays are an integral part
of providing your players


207
00:13:09,957 --> 00:13:13,193 line:-2
with a stunning and immersive
gaming experience.


208
00:13:13,227 --> 00:13:17,764 line:-2
With the Game Porting Toolkit, you can see
your game's rendering code running


209
00:13:17,798 --> 00:13:20,267 line:-1
over the basic standard dynamic range


210
00:13:20.300 --> 00:13:23.904 line:-2 align:center
and frame pacing APIs
of its translated environment.


211
00:13:23,937 --> 00:13:29,776 line:-2
On Windows, your game might be making use
of color management and tone mapping APIs


212
00:13:29.810 --> 00:13:35.349 line:-2 align:center
to achieve high dynamic range, such as
AdvancedColorInfo color space APIs.


213
00:13:35,382 --> 00:13:41,088 line:-2
And you might be using the timing
and feedback available in IDXGISwapChain


214
00:13:41.121 --> 00:13:44.157 line:-1 align:center
to pace your SDR and HDR content.


215
00:13:44,191 --> 00:13:48,362 line:-2
CAMetalLayer’s extended dynamic range
support gives you access


216
00:13:48,395 --> 00:13:51,064 line:-1
to even more advanced display features.


217
00:13:51.098 --> 00:13:54.735 line:-2 align:center
You can easily move your HDR
and tone mapping logic,


218
00:13:54.768 --> 00:13:58.739 line:-2 align:center
whether it’s based on floating-point
or 10-bit integer range,


219
00:13:58.772 --> 00:14:02.176 line:-1 align:center
or HDR10 or PQ10 shaders.


220
00:14:02.209 --> 00:14:06.213 line:-2 align:center
The CAMetalDisplayLink API gives you
fine-grained control


221
00:14:06.246 --> 00:14:10.017 line:-2 align:center
to achieve lowest input
and display latency for your game.


222
00:14:10,050 --> 00:14:14,721 align:center
Check out these talks about adding
EDR support to your Metal rendering.


223
00:14:14,755 --> 00:14:19,826 line:0
“Explore EDR on iOS” is a great talk
which recaps the pixel formats


224
00:14:19,860 --> 00:14:24,932 align:center
and Metal APIs to use which are consistent
between macOS and iOS.


225
00:14:24,965 --> 00:14:30,070 align:center
The “Explore HDR Rendering with EDR”
presentation offers a great foundation


226
00:14:30,103 --> 00:14:36,577 line:0
for understanding how to make most
of EDR APIs and capabilities.


227
00:14:36,610 --> 00:14:40,614 align:center
Apple Silicon Mac platforms have
all the software and hardware features


228
00:14:40,647 --> 00:14:43,383 align:center
you need to bring your game to the Mac.


229
00:14:43,417 --> 00:14:46,820 align:center
With the Game Porting Toolkit
and Metal Shader Converter,


230
00:14:46,854 --> 00:14:49,656 align:center
bringing your game to the Mac
is easier than ever.


231
00:14:49,690 --> 00:14:53,560 line:-2
Be sure to keep going with part two,
“Compile Your Shaders,”


232
00:14:53.594 --> 00:14:55.729 line:-1 align:center
and part three, “Render with Metal.”


233
00:14:55.762 --> 00:14:58.498 line:-2 align:center
I can’t wait to play your games
on the Mac.


234
00:14:58,532 --> 00:15:00,634 line:-1
♪ ♪

