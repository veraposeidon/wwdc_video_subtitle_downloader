2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:10.711 --> 00:00:12.646 line:-1 align:center
Jacob: Hi, I'm Jacob.


4
00:00:12.679 --> 00:00:15.716 line:-2 align:center
The UIs we build
continue to grow more dynamic,


5
00:00:15,749 --> 00:00:18,118 line:-1
with change and motion everywhere.


6
00:00:18.151 --> 00:00:19.586 line:-1 align:center
People love this.


7
00:00:19.620 --> 00:00:21.855 line:-1 align:center
It makes an interface feel more alive,


8
00:00:21,889 --> 00:00:24,458 line:-2
makes it easier
to understand what's happening,


9
00:00:24.491 --> 00:00:27.794 line:-2 align:center
and it just brings a sense of enjoyment
to interacting with a UI.


10
00:00:29,062 --> 00:00:33,233 line:-2
And there's a lot that comes together
to make these dynamic interactions.


11
00:00:33,267 --> 00:00:37,371 line:-2
There are transitions,
where we move from one scene to another.


12
00:00:37,404 --> 00:00:41,708 line:-2
And there are gestures, where we're
directly interacting with the device.


13
00:00:41.742 --> 00:00:43.977 line:-1 align:center
And finally, there are animations,


14
00:00:44,011 --> 00:00:46,180 line:-1
where an on screen object moves,


15
00:00:46.213 --> 00:00:48.949 line:-1 align:center
grows, or changes visual properties.


16
00:00:48,982 --> 00:00:53,820 line:-2
These all work together
and help to make a fluid, interactive UI.


17
00:00:53.854 --> 00:00:58.926 line:-2 align:center
Today, we're going to dive deep
into building great animations.


18
00:00:58.959 --> 00:01:01.495 line:-2 align:center
Differences between animations
can be subtle,


19
00:01:01,528 --> 00:01:05,165 line:-2
but when an animation is just right,
your users can feel it.


20
00:01:05,199 --> 00:01:08,602 line:-2
So I want to share with you how
to make the animations in your app


21
00:01:08.635 --> 00:01:11.371 line:-1 align:center
feel elegant and natural.


22
00:01:11.405 --> 00:01:14.107 line:-2 align:center
And we're going to do that
focusing on just one tool


23
00:01:14,141 --> 00:01:17,177 line:-2
that's powerful, versatile,
and even fun:


24
00:01:17,211 --> 00:01:19,346 line:-1
springs!


25
00:01:19,379 --> 00:01:23,550 line:-2
We'll start by discussing why springs
are a good fit for animations.


26
00:01:23,584 --> 00:01:27,254 line:-2
Then we'll go into some of the details
of how springs work.


27
00:01:27,287 --> 00:01:31,658 line:-2
And finally, we'll talk about
how to use springs in our apps.


28
00:01:31.692 --> 00:01:34.228 line:-1 align:center
So why are springs useful for animations?


29
00:01:34,261 --> 00:01:38,699 line:-2
To answer that, we need to step back
and discuss what makes a great animation.


30
00:01:39,366 --> 00:01:42,636 line:-2
Let's examine a context
where we have a few animations:


31
00:01:42.669 --> 00:01:44.538 line:-1 align:center
a simple toggle.


32
00:01:44,571 --> 00:01:46,306 line:-1
Let's focus in on this toggle.


33
00:01:48,208 --> 00:01:50,878 line:-1
We use animations for several reasons,


34
00:01:50,911 --> 00:01:55,482 line:-2
but one of the most important is that
they give us a better sense of continuity.


35
00:01:55,516 --> 00:01:59,853 line:-2
If an object starts in one place,
and then suddenly appears somewhere else,


36
00:01:59.887 --> 00:02:03.857 line:-2 align:center
it feels jarring,
and can sometimes be confusing.


37
00:02:03.891 --> 00:02:06.827 line:-2 align:center
It feels much more natural
if we see the object move


38
00:02:06.860 --> 00:02:08.662 line:-1 align:center
from one place to the next.


39
00:02:12.633 --> 00:02:14.668 line:-1 align:center
But it's not just about the position.


40
00:02:14,701 --> 00:02:19,139 line:-2
If an object's velocity suddenly changes,
that also feels unnatural.


41
00:02:19.173 --> 00:02:23.010 line:-2 align:center
For example here, the knob in the toggle
is starting and ending


42
00:02:23,043 --> 00:02:26,780 line:-2
with a jump in velocity,
and it doesn't feel right.


43
00:02:26.813 --> 00:02:29.349 line:-2 align:center
So one goal we have
is to make our animations


44
00:02:29,383 --> 00:02:32,819 line:-1
have continuous position and velocity.


45
00:02:32,853 --> 00:02:37,357 line:-2
Let's look at a few animation types
and see how they do with that requirement.


46
00:02:37.391 --> 00:02:41.261 line:-2 align:center
And while our toggle is a useful example
of a complete animation,


47
00:02:41,295 --> 00:02:44,164 line:-2
I want to focus in
on just the motion of the knob,


48
00:02:44.198 --> 00:02:47.701 line:-2 align:center
so it's easier to see what's happening
in just a single animation.


49
00:02:48.569 --> 00:02:51.605 line:-1 align:center
Let's start by looking at Ease in and out.


50
00:02:51,638 --> 00:02:54,074 line:-1
This is a type of Bezier curve animation,


51
00:02:54.107 --> 00:02:57.044 line:-2 align:center
which means that its motion is defined
by a combination


52
00:02:57.077 --> 00:02:59.947 line:-1 align:center
of a curve and a duration.


53
00:02:59.980 --> 00:03:01.782 line:-1 align:center
Looking at the motion of this object,


54
00:03:01.815 --> 00:03:04.551 line:-2 align:center
it doesn't feel like
there are any sudden jumps.


55
00:03:04.585 --> 00:03:06.253 line:-1 align:center
To make sure this is the case,


56
00:03:06.286 --> 00:03:09.723 line:-2 align:center
we can also examine a chart
of the motion in this animation.


57
00:03:11.758 --> 00:03:14.027 line:-2 align:center
We're going to look
at several of these charts,


58
00:03:14,061 --> 00:03:16,630 line:-1
so let's discuss what it's showing.


59
00:03:16,663 --> 00:03:19,299 line:-1
The horizontal axis represents time,


60
00:03:19,333 --> 00:03:23,203 line:-2
the bottom line shows the initial position
of the animation,


61
00:03:23,237 --> 00:03:26,607 line:-2
and the top line
shows the target position.


62
00:03:26.640 --> 00:03:29.042 line:-1 align:center
And as we play the animation on repeat,


63
00:03:29,076 --> 00:03:32,279 line:-2
we'll repeatedly progress
through this curve.


64
00:03:32,312 --> 00:03:35,616 line:-1
Now let's start the animation again.


65
00:03:35,649 --> 00:03:39,152 line:-2
Notice how the curve in the chart
doesn't have any jumps,


66
00:03:39,186 --> 00:03:42,055 line:-2
that means that its position
is continuous.


67
00:03:42.089 --> 00:03:45.726 line:-2 align:center
And if we update our chart
to show the velocity as well,


68
00:03:45.759 --> 00:03:49.429 line:-2 align:center
we can confirm that the velocity
doesn't have any jumps either--


69
00:03:49.463 --> 00:03:51.865 line:-1 align:center
so the velocity is continuous as well.


70
00:03:53,467 --> 00:03:56,537 line:-2
If we look at the motion
of a linear animation instead,


71
00:03:56.570 --> 00:03:58.906 line:-2 align:center
there's a sharp corner
and a jump in velocity


72
00:03:58.939 --> 00:04:02.409 line:-1 align:center
as the animation starts and ends.


73
00:04:02,442 --> 00:04:06,580 line:-2
Linear animations can be useful
as a specialized tool in some places,


74
00:04:06.613 --> 00:04:08.682 line:-1 align:center
like a repeating spinning indicator,


75
00:04:08.715 --> 00:04:11.818 line:-2 align:center
but otherwise you should be cautious
about using them,


76
00:04:11,852 --> 00:04:13,453 line:-1
especially for movement,


77
00:04:13.487 --> 00:04:17.424 line:-2 align:center
where it has this non-physical behavior
that generally feels out of place.


78
00:04:19.493 --> 00:04:23.397 line:-2 align:center
Next, let's check the continuity
of a spring animation.


79
00:04:23,430 --> 00:04:28,402 line:-2
Just like we want, this has continuous
position and velocity as well.


80
00:04:28.435 --> 00:04:33.507 line:-2 align:center
So far, ease in and out and
spring animations are our best options,


81
00:04:33.540 --> 00:04:36.643 line:-2 align:center
but we've only been looking at cases
where the animations start


82
00:04:36,677 --> 00:04:38,812 line:-1
from a resting position.


83
00:04:38.846 --> 00:04:44.017 line:-2 align:center
Let's examine what happens if we use
a gesture together with an animation.


84
00:04:44.051 --> 00:04:47.087 line:-2 align:center
Let's take our movable knob
over to an iPad,


85
00:04:47.120 --> 00:04:48.989 line:-1 align:center
where we'll drag it with our finger.


86
00:04:51.325 --> 00:04:55.796 line:-2 align:center
We can drop it on either
of these two positions.


87
00:04:55.829 --> 00:04:58.899 line:-2 align:center
But we could also end the gesture
somewhere in between


88
00:04:58,932 --> 00:05:01,301 line:-1
and throw our knob towards one side.


89
00:05:03.804 --> 00:05:07.307 line:-2 align:center
With an ease in and out animation,
it does animate to the end,


90
00:05:07,341 --> 00:05:10,377 line:-2
but its motion jerks to a halt
as the gesture ends.


91
00:05:15.516 --> 00:05:18.819 line:-2 align:center
This type of animation
is just a prespecified curve,


92
00:05:18,852 --> 00:05:22,189 line:-2
so there's no way
to represent an initial velocity.


93
00:05:22.222 --> 00:05:24.758 line:-2 align:center
This gets even worse
if we also allow our knob


94
00:05:24,791 --> 00:05:27,227 line:-2
to be dragged to any position
in 2 dimensions.


95
00:05:32,900 --> 00:05:36,537 line:-2
Let's try this again,
but with a spring animation.


96
00:05:36.570 --> 00:05:39.439 line:-2 align:center
A spring can start
with any initial velocity,


97
00:05:39.473 --> 00:05:42.142 line:-2 align:center
so we get a natural feeling
where our animation picks up


98
00:05:42.176 --> 00:05:44.178 line:-1 align:center
right where the gesture ends.


99
00:05:48.415 --> 00:05:51.151 line:-2 align:center
And this also works great
for two dimensional drags.


100
00:05:57,391 --> 00:06:00,260 line:-2
SwiftUI will now automatically
track velocities


101
00:06:00.294 --> 00:06:02.763 line:-1 align:center
any time a gesture is changing properties,


102
00:06:02.796 --> 00:06:05.933 line:-2 align:center
so you can get this behavior
without any extra work.


103
00:06:05.966 --> 00:06:10.337 line:-2 align:center
So springs are the only type of animation
that maintains continuity


104
00:06:10.370 --> 00:06:15.275 line:-2 align:center
both for static cases
and cases with an initial velocity.


105
00:06:15.309 --> 00:06:19.079 line:-2 align:center
The next benefit of springs we can examine
is the shape of their motion.


106
00:06:20.547 --> 00:06:22.482 line:-1 align:center
When you hear the motion of a spring,


107
00:06:22,516 --> 00:06:24,751 line:-2
you might be thinking
of something like this.


108
00:06:28.355 --> 00:06:32.125 line:-2 align:center
But a spring animation
doesn't only mean a bouncy animation.


109
00:06:32,159 --> 00:06:34,595 line:-1
It's true that springs can have bounce,


110
00:06:34,628 --> 00:06:36,363 line:-1
and that can be a great tool,


111
00:06:36.396 --> 00:06:39.333 line:-2 align:center
but that's not the main reason
we use springs.


112
00:06:39,366 --> 00:06:41,368 line:-2
Later on,
we'll look at when it makes sense


113
00:06:41,401 --> 00:06:42,803 line:-1
to use a spring with bounce,


114
00:06:42,836 --> 00:06:46,139 line:-1
but springs with no bounce are great too!


115
00:06:46,173 --> 00:06:51,545 line:-2
These types of non-bouncy springs
are used in animations all over iOS.


116
00:06:51.578 --> 00:06:53.447 line:-1 align:center
So if it's not just about bounce,


117
00:06:53,480 --> 00:06:56,483 line:-2
what is so good
about the motion of a spring?


118
00:06:56.517 --> 00:06:59.419 line:-2 align:center
Let's look again
at our simple spring animation,


119
00:06:59,453 --> 00:07:02,556 line:-2
and pay attention
to how the animation ends.


120
00:07:02,589 --> 00:07:05,859 line:-2
It very slowly and gradually
comes to rest.


121
00:07:05,893 --> 00:07:09,496 line:-2
There's no single point
when the object is abruptly done.


122
00:07:09.530 --> 00:07:11.798 line:-2 align:center
This feels much more like
what we'd expect to see


123
00:07:11,832 --> 00:07:15,435 line:-2
if this was an object
that was moving and stopping.


124
00:07:15.469 --> 00:07:18.972 line:-2 align:center
And there's a reason this version
feels more natural to us.


125
00:07:19.006 --> 00:07:23.377 line:-2 align:center
A spring animation is based on the
behavior of an object attached to a spring


126
00:07:23.410 --> 00:07:26.113 line:-2 align:center
in the physical world,
so it feels more natural


127
00:07:26,146 --> 00:07:29,750 line:-2
and believable to our eyes
when we see it move.


128
00:07:29.783 --> 00:07:33.053 line:-2 align:center
Now you may have heard that different
properties animating with springs


129
00:07:33,086 --> 00:07:36,256 line:-2
can finish at different times,
which is true.


130
00:07:36,290 --> 00:07:40,027 line:-2
If you're used to timing curve animations,
this may feel strange.


131
00:07:40.060 --> 00:07:43.964 line:-2 align:center
Don't we want all animations
to start and stop at the same time?


132
00:07:43.997 --> 00:07:45.566 line:-1 align:center
The answer is no!


133
00:07:45.599 --> 00:07:48.268 line:-2 align:center
We want our animations
to feel like the motion of objects


134
00:07:48,302 --> 00:07:50,704 line:-1
in the physical world that we're used to.


135
00:07:50.737 --> 00:07:54.141 line:-2 align:center
And generally,
these start and stop at their own time


136
00:07:54.174 --> 00:07:56.443 line:-1 align:center
as they're slowed down by friction,


137
00:07:56.476 --> 00:07:59.913 line:-2 align:center
so these times
usually don't line up perfectly.


138
00:07:59,947 --> 00:08:05,519 line:-2
In fact, it's sometimes useful to go even
further for multi-property animations.


139
00:08:05.552 --> 00:08:09.256 line:-2 align:center
Here's an animation
of an app launching on iOS.


140
00:08:09.289 --> 00:08:13.327 line:-2 align:center
At first glance, it may seem
like just a single uniform animation,


141
00:08:13.360 --> 00:08:15.629 line:-1 align:center
but if we slow down the animation,


142
00:08:15,662 --> 00:08:17,497 line:-1
you can see how different springs,


143
00:08:17.531 --> 00:08:21.268 line:-2 align:center
different start times,
and different end times come together


144
00:08:21.301 --> 00:08:24.438 line:-2 align:center
to form an incredible
and naturally feeling animation.


145
00:08:26,340 --> 00:08:30,077 line:-2
So now that we know why springs
are such a great tool for animations,


146
00:08:30.110 --> 00:08:31.845 line:-1 align:center
let's examine springs more closely


147
00:08:31.879 --> 00:08:35.849 line:-2 align:center
to understand how they work
and how best to use them.


148
00:08:35.883 --> 00:08:37.518 line:-1 align:center
When we use a spring animation,


149
00:08:37.551 --> 00:08:41.655 line:-2 align:center
we're modeling it with the motion
of an object attached to a spring.


150
00:08:41.688 --> 00:08:46.159 line:-2 align:center
If we go back to physics,
this motion is defined by 3 properties:


151
00:08:46,193 --> 00:08:47,694 line:-1
the object's mass,


152
00:08:47,728 --> 00:08:49,263 line:-1
the spring's stiffness,


153
00:08:49,296 --> 00:08:51,031 line:-1
and the damping of the system,


154
00:08:51,064 --> 00:08:54,168 line:-2
which is a measure of how much friction
is applied to the object


155
00:08:54.201 --> 00:08:56.403 line:-1 align:center
by its surroundings.


156
00:08:56.436 --> 00:08:59.239 line:-2 align:center
Then we use the initial position
of the animation


157
00:08:59.273 --> 00:09:01.742 line:-1 align:center
as the initial position of the object,


158
00:09:01.775 --> 00:09:03.877 line:-1 align:center
and the target position of the animation


159
00:09:03,911 --> 00:09:06,446 line:-2
to define the resting position
of the spring,


160
00:09:06.480 --> 00:09:09.850 line:-1 align:center
where the object will get pulled towards.


161
00:09:09,883 --> 00:09:14,721 line:-2
Then we can release the object
to start the animation.


162
00:09:14,755 --> 00:09:17,624 line:-2
The properties we use
to define the spring system


163
00:09:17.658 --> 00:09:19.860 line:-1 align:center
determine the type of motion that occurs,


164
00:09:19.893 --> 00:09:23.096 line:-2 align:center
and changing them
changes the resulting animation.


165
00:09:24,898 --> 00:09:26,700 line:-1
So when creating a spring animation,


166
00:09:26.733 --> 00:09:30.771 line:-2 align:center
you could use these same properties
of mass, stiffness, and damping


167
00:09:30,804 --> 00:09:33,841 line:-1
to configure what kind of spring to use.


168
00:09:33.874 --> 00:09:36.944 line:-2 align:center
But while these are a natural way
to model a physical system,


169
00:09:36,977 --> 00:09:40,614 line:-2
they're not very intuitive
for defining a spring animation.


170
00:09:40.647 --> 00:09:44.318 line:-2 align:center
There isn't a real object with mass
or a spring with stiffness here,


171
00:09:44,351 --> 00:09:48,622 line:-2
and making up these values
to change the curve is not easy to do.


172
00:09:48,655 --> 00:09:51,658 line:-2
So we've been refining a new way
to configure springs


173
00:09:51,692 --> 00:09:54,494 line:-2
that's easier to understand
and to work with.


174
00:09:54,528 --> 00:09:59,066 line:-2
It uses just 2 parameters:
duration and bounce.


175
00:09:59.099 --> 00:10:00.701 line:-1 align:center
These do what you'd expect,


176
00:10:00.734 --> 00:10:03.904 line:-2 align:center
increasing the duration
makes the animation take longer.


177
00:10:03.937 --> 00:10:07.908 line:-2 align:center
And increasing the bounce
adds bounce to the animation.


178
00:10:07.941 --> 00:10:09.977 line:-1 align:center
And we're adopting these universally


179
00:10:10,010 --> 00:10:13,213 line:-2
across Apple's design
and engineering efforts.


180
00:10:13,247 --> 00:10:16,416 line:-2
So all of our frameworks
that support springs will use them.


181
00:10:18.018 --> 00:10:19.720 line:-1 align:center
As you play with these spring parameters,


182
00:10:19.753 --> 00:10:22.956 line:-2 align:center
you can see different types of shapes
in the curves.


183
00:10:22,990 --> 00:10:25,392 align:center
When bounce is greater than 0,


184
00:10:25,425 --> 00:10:29,162 align:center
we get a bouncy spring
that overshoots its target.


185
00:10:29,196 --> 00:10:31,932 line:0
When bounce is 0,
we get this smooth curve


186
00:10:31,965 --> 00:10:35,969 align:center
with a long tail
gradually going towards its target.


187
00:10:36,003 --> 00:10:38,438 align:center
And there's one other type of spring too.


188
00:10:38,472 --> 00:10:41,775 align:center
This one isn't as common,
but with a negative bounce value,


189
00:10:41,808 --> 00:10:46,180 line:0
you can get a spring that also has a long
tail gradually approaching its target,


190
00:10:46,213 --> 00:10:50,083 align:center
but that's a little flatter than
what you get with a bounce of 0.


191
00:10:50.117 --> 00:10:53.220 line:-2 align:center
In the physics of springs,
these are called underdamped,


192
00:10:53.253 --> 00:10:55.923 line:-1 align:center
critically damped, and overdamped springs.


193
00:10:55.956 --> 00:11:00.427 line:-2 align:center
But I like to think of them
as bouncy, smooth, and flattened.


194
00:11:00,460 --> 00:11:01,795 align:center
And as you may have noticed,


195
00:11:01,828 --> 00:11:04,264 line:0
these bounce values are percents,


196
00:11:04,298 --> 00:11:08,368 align:center
so bouncy springs have bounce values
up to 100%


197
00:11:08,402 --> 00:11:13,974 align:center
and flattened springs have bounce values
between 0 and -100%


198
00:11:14.007 --> 00:11:17.811 line:-2 align:center
Now I want to dig into these springs
a bit more.


199
00:11:17.845 --> 00:11:20.647 line:-2 align:center
Springs can sometimes seem
a little intimidating,


200
00:11:20.681 --> 00:11:23.383 line:-2 align:center
and their motion
can seem hard to understand.


201
00:11:23,417 --> 00:11:25,118 line:-1
But if we break down what's happening,


202
00:11:25.152 --> 00:11:28.789 line:-2 align:center
it's actually just several simple things
combining together.


203
00:11:28.822 --> 00:11:32.559 line:-2 align:center
For me, being able to understand
the math that's behind these curves


204
00:11:32.593 --> 00:11:35.028 line:-1 align:center
helps make springs feel more approachable,


205
00:11:35.062 --> 00:11:37.664 line:-1 align:center
so I want to share that with you as well.


206
00:11:37.698 --> 00:11:40.100 line:-2 align:center
But if math just makes your head spin,
don't worry,


207
00:11:40,133 --> 00:11:41,902 line:-1
it's completely optional.


208
00:11:41.935 --> 00:11:44.071 line:-1 align:center
We implement all of this math for you.


209
00:11:45,172 --> 00:11:47,741 align:center
So let's start with a bouncy curve.


210
00:11:47,774 --> 00:11:50,544 align:center
You may notice
that the overshooting of this spring


211
00:11:50,577 --> 00:11:55,315 align:center
oscillates like a more complicated
kind of sine or cosine wave.


212
00:11:55,349 --> 00:12:00,220 line:0
And if we take the bounce of this spring
up to its maximum value of 100%,


213
00:12:00,254 --> 00:12:03,590 align:center
you can see that it's now
exactly the behavior of a cosine wave,


214
00:12:03,624 --> 00:12:05,626 align:center
just oscillating back and forth.


215
00:12:07,094 --> 00:12:10,163 align:center
The physical interpretation of this
is that it's a spring


216
00:12:10,197 --> 00:12:11,965 align:center
that has no friction acting on it,


217
00:12:11,999 --> 00:12:14,801 align:center
so it oscillates forever
without slowing down,


218
00:12:14,835 --> 00:12:18,238 align:center
and never actually reaches
its target position.


219
00:12:18,272 --> 00:12:21,408 line:0
As you'd expect,
the math for this is pretty simple:


220
00:12:21,441 --> 00:12:23,210 line:0
it's just a cosine curve,


221
00:12:23,243 --> 00:12:26,280 line:0
and the time is divided by the duration.


222
00:12:26,313 --> 00:12:29,383 align:center
So for this bounce value,
the duration corresponds exactly


223
00:12:29,416 --> 00:12:32,286 align:center
to the period of the curve.


224
00:12:32,319 --> 00:12:35,255 line:0
As we decrease bounce,
that's physically equivalent


225
00:12:35,289 --> 00:12:37,958 line:0
to adding friction
or damping to the spring,


226
00:12:37,991 --> 00:12:40,761 line:0
which slows it down as it goes.


227
00:12:40,794 --> 00:12:43,096 line:0
And we still have those oscillations.


228
00:12:43,130 --> 00:12:46,567 align:center
In fact, the cosine curve from before
is still there,


229
00:12:46,600 --> 00:12:51,004 align:center
which is more clear
if we draw it overlaid on top.


230
00:12:51,038 --> 00:12:53,106 line:0
This is the same equation as before,


231
00:12:53,140 --> 00:12:57,144 align:center
just with different constants
and shifted horizontally a bit.


232
00:12:57.177 --> 00:13:00.147 line:-2 align:center
So this explains
the bounciness in the curve,


233
00:13:00.180 --> 00:13:02.616 line:-2 align:center
but clearly
we need something else as well.


234
00:13:03,283 --> 00:13:05,986 align:center
In the original curve,
the size of the oscillations


235
00:13:06,019 --> 00:13:09,456 align:center
is getting smaller,
or decaying, over time.


236
00:13:09,489 --> 00:13:11,792 align:center
And that's the piece that's missing.


237
00:13:11,825 --> 00:13:15,229 align:center
This additional curve
is an exponential decay curve.


238
00:13:15,262 --> 00:13:17,564 line:0
And it's the last piece of our motion,


239
00:13:17,598 --> 00:13:21,201 align:center
the part that gives us
the gradual feeling of coming to rest.


240
00:13:22,769 --> 00:13:25,739 align:center
So what seemed like a complicated curve
is just the product


241
00:13:25,772 --> 00:13:27,641 align:center
of these two components,


242
00:13:27,674 --> 00:13:30,644 align:center
which is called a damped cosine
or sine wave.


243
00:13:30,677 --> 00:13:34,081 align:center
That's pretty satisfying,
but if you look closely at the chart,


244
00:13:34,114 --> 00:13:36,884 line:0
there's one thing that might seem
a little strange:


245
00:13:36,917 --> 00:13:41,188 line:0
why does our cosine curve
now have this dip at the beginning?


246
00:13:41,221 --> 00:13:43,757 line:0
This is related to something
we discussed earlier:


247
00:13:43,790 --> 00:13:45,592 line:0
preserving velocity.


248
00:13:45,626 --> 00:13:49,830 align:center
Remember that for this base case,
we need to preserve a velocity of 0


249
00:13:49,863 --> 00:13:51,832 align:center
at the beginning.


250
00:13:51,865 --> 00:13:57,971 align:center
So the velocity of the product of our two
component curves should be flat around 0.


251
00:13:58,005 --> 00:14:02,476 align:center
But notice that our decay curve
starts with an upward-pointing slope.


252
00:14:02,509 --> 00:14:05,045 align:center
If we started off the cosine curve flat,


253
00:14:05,078 --> 00:14:08,382 align:center
then our initial velocity
would point upwards too.


254
00:14:08,415 --> 00:14:11,952 align:center
So our cosine curve has to start off
pointing downwards


255
00:14:11,985 --> 00:14:16,657 align:center
to cancel out with the decay
and give us our flat start.


256
00:14:16,690 --> 00:14:20,227 align:center
And this is how springs
are able to match any initial velocity


257
00:14:20,260 --> 00:14:23,730 align:center
by using different shifts and scales
in our cosine curve


258
00:14:23,764 --> 00:14:25,666 line:0
to give us the right start.


259
00:14:27,901 --> 00:14:30,938 line:-2
This initial velocity can come from
the velocity of a gesture


260
00:14:30.971 --> 00:14:35.976 line:-2 align:center
as it ends and hands off to an animation,
as we discussed earlier.


261
00:14:36,009 --> 00:14:39,313 line:-2
And there's another place
where this initial velocity can come from.


262
00:14:39.346 --> 00:14:42.316 line:-1 align:center
Let's examine it on an iPad.


263
00:14:42,349 --> 00:14:44,885 line:-1
Here, we can tap to move our knob,


264
00:14:44.918 --> 00:14:48.388 line:-2 align:center
and show a fainter image of the knob
at its target position.


265
00:14:48.422 --> 00:14:53.627 line:-2 align:center
We'll also use a slower spring so it's
easier to keep track of what's happening.


266
00:14:53.660 --> 00:14:56.363 line:-2 align:center
Sometimes, while an animation
hasn't yet finished,


267
00:14:56,396 --> 00:15:00,534 line:-2
a new animation begins
that changes to a new target value.


268
00:15:00,567 --> 00:15:04,137 line:-2
When that happens, a spring animation
uses the velocity it had


269
00:15:04,171 --> 00:15:06,740 line:-2
when it was retargeted
as the initial velocity


270
00:15:06.773 --> 00:15:10.410 line:-2 align:center
towards its new destination
and this same velocity preservation


271
00:15:10.444 --> 00:15:13.914 line:-2 align:center
makes these kind of interruptions
feel smooth and natural.


272
00:15:18,418 --> 00:15:22,322 line:-2
So that's how velocity preservation
and bouncy springs work.


273
00:15:22.356 --> 00:15:24.925 line:-1 align:center
Now if we decrease our bounce,


274
00:15:24.958 --> 00:15:28.128 line:-2 align:center
the oscillations get farther
and farther apart,


275
00:15:28.161 --> 00:15:30.397 line:-1 align:center
until when bounce gets all the way to 0,


276
00:15:30.430 --> 00:15:32.733 line:-1 align:center
the oscillations are completely gone


277
00:15:32,766 --> 00:15:35,502 line:-2
and we just have a straight line
going down and away


278
00:15:35,536 --> 00:15:38,438 line:-1
that's getting multiplied by our decay.


279
00:15:38,472 --> 00:15:41,074 line:-1
So these equations are even simpler.


280
00:15:41,108 --> 00:15:43,610 line:0
We just need the basic equation of a line,


281
00:15:43,644 --> 00:15:46,813 line:0
and then we multiply that
by the same exponential,


282
00:15:46,847 --> 00:15:49,316 align:center
giving us our resulting curve.


283
00:15:51,051 --> 00:15:54,154 line:0
Flattened curves,
which are springs with negative bounce,


284
00:15:54,188 --> 00:15:57,858 align:center
work very similarly,
but using two exponential functions


285
00:15:57,891 --> 00:16:00,827 line:0
added together instead of a line.


286
00:16:00,861 --> 00:16:02,963 line:0
This type of spring is less common,


287
00:16:02,996 --> 00:16:06,133 line:0
but the fact that it's represented
by just exponential decay


288
00:16:06,166 --> 00:16:08,702 line:0
makes it useful
for modeling decaying velocity,


289
00:16:08,735 --> 00:16:10,537 align:center
like what happens in a scroll view.


290
00:16:12.239 --> 00:16:15.275 line:-2 align:center
One thing you might wonder
when using springs for animations is:


291
00:16:15,309 --> 00:16:19,146 line:-2
How long does it take until
a spring animation actually finishes?


292
00:16:19,179 --> 00:16:22,049 line:-2
As we've seen,
that question is a bit subtle.


293
00:16:22.082 --> 00:16:24.051 line:-1 align:center
The exponential decay of the spring


294
00:16:24.084 --> 00:16:26.353 line:-2 align:center
means that technically
it keeps moving forever,


295
00:16:26.386 --> 00:16:29.356 line:-1 align:center
just with smaller and smaller movement.


296
00:16:29,389 --> 00:16:32,259 line:-2
Of course, we don't want our spring
animation to keep going forever,


297
00:16:32.292 --> 00:16:35.028 line:-2 align:center
so we do need to choose a time
to remove it,


298
00:16:35.062 --> 00:16:38.832 line:-2 align:center
when it no longer contributes
any noticeable change to the UI.


299
00:16:39,399 --> 00:16:43,270 align:center
That amount of time until a spring
animation is finished enough to remove


300
00:16:43,303 --> 00:16:45,739 align:center
is called the settling duration.


301
00:16:45,772 --> 00:16:48,976 line:0
This settling duration is different
from the duration parameter


302
00:16:49,009 --> 00:16:51,645 align:center
for configuring a spring.


303
00:16:51,678 --> 00:16:54,748 align:center
The settling duration depends
on many different factors,


304
00:16:54,781 --> 00:16:56,984 line:0
so can be a bit unpredictable,


305
00:16:57,017 --> 00:16:59,953 line:0
but the duration parameter
is a perceptual duration


306
00:16:59,987 --> 00:17:03,257 line:0
that is chosen to be predictable
and not move around,


307
00:17:03,290 --> 00:17:07,060 align:center
even as the other parameters
of a spring change.


308
00:17:07,094 --> 00:17:09,029 line:-1
Because of its unpredictable nature,


309
00:17:09,062 --> 00:17:13,333 line:-2
you shouldn't wait for the settling
duration for user-facing changes.


310
00:17:13.367 --> 00:17:16.770 line:-2 align:center
If you want to make a UI change
when a spring is mostly done,


311
00:17:16,803 --> 00:17:19,806 line:-2
you can use the new
completion handler support in SwiftUI,


312
00:17:19,840 --> 00:17:24,411 line:-2
which uses a perceptual duration
instead of a settling duration.


313
00:17:24,444 --> 00:17:26,847 line:-2
Now that we know
all about how springs work,


314
00:17:26,880 --> 00:17:29,583 line:-1
let's discuss using them in our code.


315
00:17:29.616 --> 00:17:32.486 line:-2 align:center
Because springs are such
a great tool for animations,


316
00:17:32.519 --> 00:17:36.056 line:-2 align:center
we now use them
as the default animation in SwiftUI,


317
00:17:36,089 --> 00:17:40,761 line:-2
so all you need to do is call
withAnimation to start with a spring.


318
00:17:40.794 --> 00:17:45.232 line:-2 align:center
We've also made it easier
to explicitly use springs for animations.


319
00:17:45.265 --> 00:17:47.734 line:-1 align:center
We've built in a few spring presets


320
00:17:47,768 --> 00:17:51,271 line:-2
based on spring values
that are used in iOS.


321
00:17:51.305 --> 00:17:53.874 line:-2 align:center
If you're not sure
what spring parameters to use,


322
00:17:53,907 --> 00:17:56,643 line:-2
these are a great way
to get something that feels good.


323
00:17:58,111 --> 00:18:01,048 line:-2
You can use these in code
by directly using the preset


324
00:18:01,081 --> 00:18:03,083 line:-1
when you need an animation.


325
00:18:03,116 --> 00:18:06,653 line:-2
But an important part of using
a spring animation is tuning it


326
00:18:06.687 --> 00:18:08.822 line:-1 align:center
for the exact context you need,


327
00:18:08.856 --> 00:18:13.594 line:-2 align:center
so these presets can also be used
as tunable starting points.


328
00:18:13.627 --> 00:18:18.031 line:-2 align:center
You can take a preset and specify
that its duration should be different,


329
00:18:18,065 --> 00:18:20,868 line:-1
Or give it a little more or less bounce


330
00:18:20.901 --> 00:18:25.339 line:-2 align:center
by specifying a relative amount
of extra bounce to add.


331
00:18:25,372 --> 00:18:30,644 line:-2
These presets are a great way to get
started introducing springs into your app.


332
00:18:30.677 --> 00:18:32.179 line:-1 align:center
But if you want to go further,


333
00:18:32,212 --> 00:18:37,017 line:-2
you can also make a completely
custom spring with the .spring animation.


334
00:18:37.050 --> 00:18:39.887 line:-1 align:center
This lets you fully specify the duration


335
00:18:39.920 --> 00:18:42.422 line:-1 align:center
and the bounce of the spring.


336
00:18:42,456 --> 00:18:47,995 line:-2
And these bounce values have
a range from -1.0 to 1.0.


337
00:18:48,028 --> 00:18:51,532 line:-2
You can also use these same parameters
to create spring animations


338
00:18:51,565 --> 00:18:53,767 line:-1
in UIKit and Core Animation.


339
00:18:56.103 --> 00:19:00.274 line:-2 align:center
There's another new spring tool you can
use if you want to go even further.


340
00:19:00,307 --> 00:19:02,743 line:-1
We've added a Spring model type to SwiftUI


341
00:19:02.776 --> 00:19:07.181 line:-2 align:center
that lets you create a representation
of a spring, including its parameters.


342
00:19:07,214 --> 00:19:09,616 line:-2
This lets you programmatically
convert parameters


343
00:19:09,650 --> 00:19:12,653 line:-2
between the different ways
to specify them.


344
00:19:12.686 --> 00:19:17.191 line:-2 align:center
You can also create a spring model
with a set of parameters, like mass,


345
00:19:17.224 --> 00:19:19.259 line:-1 align:center
stiffness, and damping,


346
00:19:19,293 --> 00:19:22,829 line:-2
and then use it
as a spring animation directly.


347
00:19:22.863 --> 00:19:25.232 line:-2 align:center
But if you really want to do
a conversion yourself,


348
00:19:25,265 --> 00:19:29,970 line:-2
here are the three equations to convert
from bounce and duration values to mass,


349
00:19:30.003 --> 00:19:32.906 line:-1 align:center
stiffness, and damping.


350
00:19:32.940 --> 00:19:34.842 line:-1 align:center
In addition to converting parameters,


351
00:19:34,875 --> 00:19:38,946 line:-2
you can use spring models to build
your own advanced spring behaviors.


352
00:19:38,979 --> 00:19:42,816 line:-2
You can call methods on the spring
to get the built in spring evaluation math


353
00:19:42.850 --> 00:19:44.751 line:-1 align:center
for yourself.


354
00:19:44.785 --> 00:19:49.056 line:-2 align:center
For example, you can call value
to get the position of the spring.


355
00:19:49.089 --> 00:19:50.757 line:-1 align:center
You just pass in a target,


356
00:19:50,791 --> 00:19:53,260 line:-2
which is what the spring
is moving towards,


357
00:19:53,293 --> 00:19:56,897 line:-1
and the time you want to evaluate it at.


358
00:19:56.930 --> 00:20:00.334 line:-2 align:center
You can also use the same inputs
on a velocity method


359
00:20:00.367 --> 00:20:04.004 line:-2 align:center
to evaluate the spring's velocity over
time.


360
00:20:04.037 --> 00:20:06.874 line:-2 align:center
This lets you easily use springs
in your own code,


361
00:20:06,907 --> 00:20:08,976 line:-1
which can be useful for simulations,


362
00:20:09.009 --> 00:20:13.347 line:-2 align:center
or to get values for charts,
like the ones in this session.


363
00:20:13.380 --> 00:20:17.150 line:-2 align:center
You can even use this
to build your own custom animations.


364
00:20:17.184 --> 00:20:21.588 line:-2 align:center
Just call into the spring model,
and you can modify the inputs or outputs


365
00:20:21.622 --> 00:20:25.025 line:-2 align:center
to apply customization
to a spring animation.


366
00:20:25,058 --> 00:20:28,495 align:center
Check out Explore SwiftUI animation
to learn the details


367
00:20:28,529 --> 00:20:32,032 align:center
of making a custom animation.


368
00:20:32,065 --> 00:20:33,667 line:0
One last thing I want to discuss


369
00:20:33.700 --> 00:20:37.905 line:-2 align:center
is how to choose parameters
to use for your springs.


370
00:20:37,938 --> 00:20:40,707 line:-2
To choose a value that works great
for your animation,


371
00:20:40.741 --> 00:20:44.178 line:-2 align:center
it's generally best to start
by finding a duration value


372
00:20:44,211 --> 00:20:46,680 line:-1
that gives a pacing that you like.


373
00:20:46,713 --> 00:20:50,784 line:-2
Once you've decided that, you can start
adjusting the amount of bounce


374
00:20:50,817 --> 00:20:55,255 line:-2
to choose what kind of character and
feeling you want this animation to have.


375
00:20:55.289 --> 00:20:59.059 line:-2 align:center
You'll find that different bounce values
feel qualitatively different.


376
00:20:59,092 --> 00:21:03,163 line:-2
A bounce of 0 feels like
a smooth, gradual change.


377
00:21:03,197 --> 00:21:07,734 line:-2
A small bounce, like around 15%,
doesn't feel very bouncy yet,


378
00:21:07,768 --> 00:21:11,071 line:-2
but the long tail
feels a little more brisk.


379
00:21:11,104 --> 00:21:13,841 line:-1
And for larger bounce values like 30%,


380
00:21:13.874 --> 00:21:17.611 line:-2 align:center
you do start to feel
some noticeable bounciness.


381
00:21:17,644 --> 00:21:22,282 line:-2
If you go even further, you can get
a pretty extreme amount of bounciness.


382
00:21:22.316 --> 00:21:26.854 line:-2 align:center
But you should be cautious
about using values higher than around 0.4,


383
00:21:26,887 --> 00:21:30,791 line:-2
since they may feel too exaggerated
for a UI element.


384
00:21:30.824 --> 00:21:33.861 line:-2 align:center
So which bounce value
should you actually use?


385
00:21:33,894 --> 00:21:37,297 line:-2
When you're not sure,
use a spring with bounce 0,


386
00:21:37.331 --> 00:21:40.834 line:-2 align:center
which is also what you get
if you don't specify the bounce.


387
00:21:40.868 --> 00:21:45.339 line:-2 align:center
This gives you a great general
purpose spring that's the most versatile.


388
00:21:45,372 --> 00:21:48,942 line:-2
Then if you want your animation
to feel a little more playful,


389
00:21:48.976 --> 00:21:51.745 line:-1 align:center
you can start to add some bounce.


390
00:21:51,778 --> 00:21:55,582 line:-2
Bounce can also make sense when you want
an animation to feel more physical,


391
00:21:55,616 --> 00:21:58,986 line:-2
like if it's going to be used
at the end of a gesture.


392
00:21:59.019 --> 00:22:02.089 line:-2 align:center
And one thing you should keep in mind
is consistency.


393
00:22:02,122 --> 00:22:04,491 line:-2
Think about what kind of character
your app has.


394
00:22:04.525 --> 00:22:07.160 line:-1 align:center
Is it serious or playful?


395
00:22:07,194 --> 00:22:10,497 line:-1
Should it feel relaxed or fast-paced?


396
00:22:10,531 --> 00:22:13,600 line:-2
That can help you choose
spring values that feel consistent


397
00:22:13.634 --> 00:22:16.370 line:-1 align:center
with the feeling of the UI around them.


398
00:22:16,403 --> 00:22:20,040 line:-2
So that's a quick tour
of using springs for animations.


399
00:22:20.073 --> 00:22:24.545 line:-2 align:center
Remember that a spring doesn't need
to bounce to make a great animation.


400
00:22:24,578 --> 00:22:29,183 line:-2
There's also a new set of spring presets
that are great starting points,


401
00:22:29,216 --> 00:22:33,754 line:-2
but you can use duration and bounce
to customize when you need to go further.


402
00:22:33.787 --> 00:22:37.090 line:-2 align:center
And most importantly,
after seeing all the unique advantages


403
00:22:37.124 --> 00:22:38.258 line:-1 align:center
that springs have,


404
00:22:38.292 --> 00:22:40.761 line:-2 align:center
I hope you're excited
to use spring animations


405
00:22:40,794 --> 00:22:44,097 line:-2
to make your app feel fluid
and a joy to use.


406
00:22:44.131 --> 00:22:45.299 line:-1 align:center
Thank you.


407
00:22:45,332 --> 00:22:48,335 line:-1
♪ ♪

