2
00:00:00,033 --> 00:00:03,670 line:-1
♪ Mellow instrumental hip-hop ♪


3
00:00:03,670 --> 00:00:10,644 size:2% align:right line:0
♪


4
00:00:10.644 --> 00:00:12.980 line:-1 position:50%
Hello, my name is Yujin,


5
00:00:12,980 --> 00:00:15,883 line:-1
and I'm an engineer
on the RealityKit team.


6
00:00:15.883 --> 00:00:19.052 line:-1 position:50%
Today, I'm going to show you
new features in RealityKit


7
00:00:19.052 --> 00:00:24.157 line:-1 position:50%
that you can use to enhance
your spatial computing apps.


8
00:00:24.157 --> 00:00:27.628 line:-1 position:50%
Since the time we released
RealityKit in 2019,


9
00:00:27.628 --> 00:00:29.897 line:-1 position:50%
We've seen apps
use its rich feature set


10
00:00:29.897 --> 00:00:32.833 line:-1 position:50%
to create some
amazing experiences.


11
00:00:32.833 --> 00:00:36.937 line:-1 position:50%
Now spatial computing adds even
more features to RealityKit,


12
00:00:36.937 --> 00:00:40.574 line:-1 position:50%
like portals, particle emitters,
RealityView attachments,


13
00:00:40.574 --> 00:00:42.643 line:-1 position:50%
and many more.


14
00:00:42,643 --> 00:00:43,810 line:0
In the session titled


15
00:00:43,810 --> 00:00:46,580 line:0
"Build spatial experiences
with RealityKit,"


16
00:00:46,580 --> 00:00:50,050 line:0
we learned about the basic
building blocks of RealityKit:


17
00:00:50,050 --> 00:00:52,719 line:0
entities, which are
container objects;


18
00:00:52,719 --> 00:00:56,857 position:50%
components, which define
specific behavior on entities;


19
00:00:56,857 --> 00:01:00,961 position:50%
and systems, which act on
both entities and components


20
00:01:00,961 --> 00:01:03,030 position:50%
to add functionality.


21
00:01:03,030 --> 00:01:04,998 line:0
We covered
the RealityView API,


22
00:01:04,998 --> 00:01:09,002 line:0
which acts as a bridge between
SwiftUI and RealityKit.


23
00:01:09,002 --> 00:01:12,673 line:0
We also showed you how to add
interaction, animations,


24
00:01:12,673 --> 00:01:15,676 line:0
and Spatial Audio
to your RealityKit scene.


25
00:01:15,676 --> 00:01:17,344 line:0
If you haven't
watched it already,


26
00:01:17,344 --> 00:01:21,148 line:0
I highly recommend
that you check out that session.


27
00:01:21.148 --> 00:01:24.484 line:-1 position:50%
In this session, we will cover
new features in RealityKit


28
00:01:24.484 --> 00:01:25.652 line:-1 position:50%
that will help make your app


29
00:01:25,652 --> 00:01:29,690 line:-1
even more engaging
and immersive.


30
00:01:29,690 --> 00:01:33,193 line:-1
First, we will learn how
to embed SwiftUI views


31
00:01:33,193 --> 00:01:34,895 line:-1
into our RealityKit content


32
00:01:34.895 --> 00:01:38.165 line:-1 position:50%
using attachments
in RealityView.


33
00:01:38.165 --> 00:01:41.001 line:-1 position:50%
Next, we will look at
how to add video playback


34
00:01:41.001 --> 00:01:43.737 line:-1 position:50%
within our RealityKit scene.


35
00:01:43,737 --> 00:01:46,139 line:-1
Then we will learn
how to use portals


36
00:01:46,139 --> 00:01:49,743 line:-1
to open a window
to an alternate world.


37
00:01:49.743 --> 00:01:52.879 line:-1 position:50%
We'll go through how to use
the Particle Emitters API


38
00:01:52.879 --> 00:01:56.316 line:-1 position:50%
to enhance your scene
with visual effects.


39
00:01:56.316 --> 00:01:59.720 line:-1 position:50%
Finally, we'll learn how to use
anchors in RealityKit


40
00:01:59.720 --> 00:02:03.323 line:-1 position:50%
to attach 3D content
to real-world locations,


41
00:02:03,323 --> 00:02:05,125 line:-1
such as a wall.


42
00:02:05,125 --> 00:02:08,895 line:-1
Let's get started
with RealityView attachments.


43
00:02:08,895 --> 00:02:12,265 line:-1
Attachments are a useful way
to embed SwiftUI content


44
00:02:12,265 --> 00:02:14,267 line:-1
into your RealityKit scene.


45
00:02:14.267 --> 00:02:17.070 line:-1 position:50%
In this example app,
I've used attachments


46
00:02:17.070 --> 00:02:19.239 line:-1 position:50%
to put text labels
beneath the models


47
00:02:19.239 --> 00:02:21.641 line:-1 position:50%
of the earth and moon.


48
00:02:21.641 --> 00:02:24.811 line:-1 position:50%
I've also attached a view
that explains how the moon


49
00:02:24.811 --> 00:02:27.314 line:-1 position:50%
affects tides on our ocean.


50
00:02:27,314 --> 00:02:30,484 line:-1
Let's see how to make this
in code.


51
00:02:30.484 --> 00:02:33.453 line:-1 position:50%
Inside of my app,
I'm using a RealityView


52
00:02:33,453 --> 00:02:35,822 line:-1
to render my earth model.


53
00:02:35,822 --> 00:02:40,360 line:-1
A RealityView is a view that
lets us add RealityKit entities.


54
00:02:40.360 --> 00:02:42.829 line:-1 position:50%
Entities need to be added
to a RealityView


55
00:02:42.829 --> 00:02:46.967 line:-1 position:50%
in order to be rendered,
animated, and simulated.


56
00:02:46,967 --> 00:02:49,703 line:-1
Here we simply
load an entity for the earth


57
00:02:49.703 --> 00:02:52.572 line:-1 position:50%
and add it
to the RealityView's content.


58
00:02:52,572 --> 00:02:56,076 line:-1
Let's now change our RealityView
to use attachments.


59
00:02:56.076 --> 00:02:59.913 line:-1 position:50%
Attachments are views that can
be placed at specific locations


60
00:02:59.913 --> 00:03:02.682 line:-1 position:50%
relative to your
RealityKit content.


61
00:03:02.682 --> 00:03:05.986 line:-1 position:50%
There are two parts
to setting up attachments.


62
00:03:05,986 --> 00:03:08,321 line:-1
First, there's the added
parameter


63
00:03:08,321 --> 00:03:11,425 line:-1
in the make closure
of our RealityView.


64
00:03:11,425 --> 00:03:13,927 line:-1
Second, there's an attachments
view builder


65
00:03:13.927 --> 00:03:16.463 line:-1 position:50%
that is added
to our RealityView.


66
00:03:16.463 --> 00:03:19.733 line:-1 position:50%
Let's cover the attachments
view builder first.


67
00:03:19.733 --> 00:03:22.269 line:-1 position:50%
Here you can provide
SwiftUI views


68
00:03:22.269 --> 00:03:25.705 line:-1 position:50%
that you want to add
to your RealityKit content.


69
00:03:25.705 --> 00:03:30.610 line:-1 position:50%
In this example, I've added
a text view to label the Earth.


70
00:03:30.610 --> 00:03:33.780 line:-1 position:50%
We'll also add a tag modifier
to the view


71
00:03:33.780 --> 00:03:36.983 line:-1 position:50%
so that we can later identify it
when our view gets delivered


72
00:03:36,983 --> 00:03:39,653 line:-1
to the make closure
as an entity.


73
00:03:39.653 --> 00:03:42.422 line:-1 position:50%
This tag can be
any hashable value.


74
00:03:42,422 --> 00:03:46,159 line:-1
Here I've used the string
earth_label.


75
00:03:46.159 --> 00:03:48.628 line:-1 position:50%
In the make closure
of our RealityView,


76
00:03:48.628 --> 00:03:51.264 line:-1 position:50%
the attachments
parameter contains our views


77
00:03:51,264 --> 00:03:54,501 line:-1
that are now represented
as entities.


78
00:03:54.501 --> 00:03:58.672 line:-1 position:50%
To get our view in entity form,
we call entity(for:)


79
00:03:58,672 --> 00:04:01,441 line:-1
on our attachments
and pass in the same tag


80
00:04:01,441 --> 00:04:05,545 line:-1
that we provided in the view
builder, earth_label.


81
00:04:05.545 --> 00:04:09.049 line:-1 position:50%
The result that we get
is a view attachment entity,


82
00:04:09.049 --> 00:04:11.184 line:-1 position:50%
which we can add
to our RealityKit content,


83
00:04:11.184 --> 00:04:13.920 line:-1 position:50%
just like any other entity.


84
00:04:13.920 --> 00:04:16.323 line:-1 position:50%
To make the label appear
beneath the earth,


85
00:04:16.323 --> 00:04:19.693 line:-1 position:50%
we'll add the attachment
as a child of our earth entity


86
00:04:19.693 --> 00:04:23.096 line:-1 position:50%
and position it slightly below.


87
00:04:23.096 --> 00:04:26.199 line:-1 position:50%
We can now repeat this process
for all the other attachments


88
00:04:26.199 --> 00:04:29.836 line:-1 position:50%
we want to add
using a different tag for each.


89
00:04:29,836 --> 00:04:32,405 line:-1
Let's take a look in Xcode.


90
00:04:32,405 --> 00:04:37,511 line:-1
In my sample app, I'll add three
attachments to my RealityView.


91
00:04:37.511 --> 00:04:40.780 line:-1 position:50%
First, I'll add a label
below the earth.


92
00:04:40.780 --> 00:04:44.451 line:-1 position:50%
I'll also do the same
for the moon.


93
00:04:44,451 --> 00:04:46,586 line:0
Finally, I'll add
a short paragraph


94
00:04:46,586 --> 00:04:50,123 line:0
explaining the role of
the moon's orbit on the tides.


95
00:04:50,123 --> 00:04:53,260 line:-1
I've styled this using
a glassBackgroundEffect


96
00:04:53,260 --> 00:04:55,295 line:-1
in SwiftUI.


97
00:04:55,295 --> 00:04:57,764 line:-1
In the make closure
of the RealityView,


98
00:04:57.764 --> 00:05:01.301 line:-1 position:50%
I'll add the corresponding
entities to my content.


99
00:05:01.301 --> 00:05:03.837 line:-1 position:50%
First, I'll add
the earthAttachment


100
00:05:03,837 --> 00:05:06,006 line:-1
below the earth.


101
00:05:06,006 --> 00:05:08,742 line:-1
I'll do the same for the moon.


102
00:05:08,742 --> 00:05:11,178 line:-1
Finally, I'll place
the tides explainer


103
00:05:11.178 --> 00:05:14.614 line:-1 position:50%
to the left
of my container entity.


104
00:05:14.614 --> 00:05:16.816 line:-1 position:50%
I'll build and run my app,


105
00:05:16.816 --> 00:05:19.252 line:-1 position:50%
and we'll see the attachments
that I've created


106
00:05:19.252 --> 00:05:23.857 line:-1 position:50%
displayed next to my models.


107
00:05:23,857 --> 00:05:27,160 line:-1
Let's recap the data flow
for attachments.


108
00:05:27,160 --> 00:05:30,430 line:-1
Attachments start off in
the attachments view builder


109
00:05:30,430 --> 00:05:32,098 line:-1
in our RealityView.


110
00:05:32.098 --> 00:05:34.601 line:-1 position:50%
Here, we can provide
SwiftUI views


111
00:05:34,601 --> 00:05:37,804 line:-1
that we want to add
to our RealityKit scene.


112
00:05:37,804 --> 00:05:40,407 line:-1
In the make closure
of our RealityView,


113
00:05:40,407 --> 00:05:43,143 line:-1
we get the attachments back
as entities,


114
00:05:43.143 --> 00:05:46.980 line:-1 position:50%
which we can then
add to our scene.


115
00:05:46.980 --> 00:05:50.884 line:-1 position:50%
We can also update the entities
inside of the update closure.


116
00:05:50.884 --> 00:05:53.520 line:-1 position:50%
This closure is called
when there are changes


117
00:05:53.520 --> 00:05:56.489 line:-1 position:50%
to our SwiftUI view state.


118
00:05:56.489 --> 00:06:00.093 line:-1 position:50%
You can use this to respond
to dynamically changing content


119
00:06:00.093 --> 00:06:02.229 line:-1 position:50%
in your RealityView.


120
00:06:02,229 --> 00:06:04,831 line:0
For a more detailed usage
of attachments,


121
00:06:04,831 --> 00:06:06,266 line:0
check out the session


122
00:06:06,266 --> 00:06:10,670 position:50%
"Work with Reality Composer Pro
content in Xcode."


123
00:06:10,670 --> 00:06:13,406 line:-1
RealityView attachments
are a useful way


124
00:06:13.406 --> 00:06:17.844 line:-1 position:50%
of adding text content in
other UI elements to a scene.


125
00:06:17,844 --> 00:06:21,047 line:-1
Additionally, we can also
add a video to our app


126
00:06:21,047 --> 00:06:22,816 line:-1
to make it more engaging.


127
00:06:22,816 --> 00:06:27,320 line:-1
To do this, let's use
VideoPlayerComponent.


128
00:06:27,320 --> 00:06:31,291 line:-1
Video player component is a new
component type in RealityKit


129
00:06:31.291 --> 00:06:36.229 line:-1 position:50%
that is used for embedding video
content inside of a 3D scene.


130
00:06:36.229 --> 00:06:40.367 line:-1 position:50%
As a reminder, components
define specific behavior


131
00:06:40.367 --> 00:06:43.103 line:-1 position:50%
that you can attach to entities.


132
00:06:43,103 --> 00:06:46,039 line:-1
To play a video using
VideoPlayerComponent,


133
00:06:46.039 --> 00:06:50.310 line:-1 position:50%
we'll first load a video file
from our resources bundle.


134
00:06:50,310 --> 00:06:54,681 line:-1
Then we'll use that to create
an AVPlayer instance.


135
00:06:54,681 --> 00:06:59,352 line:-1
With it, we can now create
a VideoPlayerComponent.


136
00:06:59,352 --> 00:07:01,488 line:-1
When you attach
a VideoPlayerComponent


137
00:07:01.488 --> 00:07:04.224 line:-1 position:50%
to an entity,
a rectangular mesh


138
00:07:04.224 --> 00:07:06.860 line:-1 position:50%
that matches the aspect ratio
of the video


139
00:07:06,860 --> 00:07:09,562 line:-1
is automatically
generated for you.


140
00:07:09.562 --> 00:07:13.533 line:-1 position:50%
This behavior is analogous
to existing video player APIs,


141
00:07:13.533 --> 00:07:16.102 line:-1 position:50%
such as VideoPlayer
in SwiftUI


142
00:07:16.102 --> 00:07:19.739 line:-1 position:50%
and AVPlayerLayer
in Core Animation.


143
00:07:19,739 --> 00:07:23,243 line:-1
However, since RealityKit
is a 3D framework,


144
00:07:23.243 --> 00:07:26.880 line:-1 position:50%
your video will be represented
as an entity with a mesh


145
00:07:26.880 --> 00:07:31.051 line:-1 position:50%
so that you can move
and position it in 3D space.


146
00:07:31.051 --> 00:07:34.454 line:-1 position:50%
All video formats that are
supported by AV Foundation


147
00:07:34,454 --> 00:07:37,057 line:-1
will work with
VideoPlayerComponent,


148
00:07:37,057 --> 00:07:43,763 line:-1
including 2D video formats
and 3D video using MV-HEVC.


149
00:07:43.763 --> 00:07:46.866 line:-1 position:50%
Finally, VideoPlayerComponent
will automatically


150
00:07:46.866 --> 00:07:51.705 line:-1 position:50%
display captions that are
provided through the AVPlayer.


151
00:07:51,705 --> 00:07:55,208 position:50%
To learn more about how to
create your own video content,


152
00:07:55,208 --> 00:07:59,079 line:0
including 3D videos,
check out the session entitled


153
00:07:59,079 --> 00:08:03,516 line:0
"Deliver video content
for spatial experiences."


154
00:08:03.516 --> 00:08:05.785 line:-1 position:50%
To add video
to my RealityKit scene,


155
00:08:05,785 --> 00:08:08,788 line:-1
we'll first create
an AVPlayerItem


156
00:08:08.788 --> 00:08:12.492 line:-1 position:50%
using the URL
to my video asset.


157
00:08:12,492 --> 00:08:15,261 line:-1
We'll then create an AVPlayer.


158
00:08:15,261 --> 00:08:18,898 line:-1
On the entity, we'll add
a VideoPlayerComponent


159
00:08:18.898 --> 00:08:23.036 line:-1 position:50%
initialized with the AVPlayer
that we just created.


160
00:08:23,036 --> 00:08:26,239 line:-1
VideoPlayerComponent will
automatically generate a mesh


161
00:08:26,239 --> 00:08:30,110 line:-1
that is sized based on
the aspect ratio of my video.


162
00:08:30.110 --> 00:08:33.179 line:-1 position:50%
Because RealityKit works
in real-world units,


163
00:08:33.179 --> 00:08:37.016 line:-1 position:50%
by default, the video
will be one meter in height.


164
00:08:37.016 --> 00:08:39.219 line:-1 position:50%
To make the video
a different size,


165
00:08:39.219 --> 00:08:41.821 line:-1 position:50%
we can scale the entity.


166
00:08:41.821 --> 00:08:45.792 line:-1 position:50%
In my case, I'd like the video
to be 40 centimeters tall,


167
00:08:45,792 --> 00:08:50,063 line:-1
so we'll multiply the
entity scale by 0.4.


168
00:08:50.063 --> 00:08:52.932 line:-1 position:50%
Finally, we're ready
to play the video.


169
00:08:52.932 --> 00:08:55.869 line:-1 position:50%
We'll set the current item
to our AVPlayerItem,


170
00:08:55,869 --> 00:08:59,472 line:-1
and then call play
on the AVPlayer.


171
00:08:59,472 --> 00:09:03,309 line:-1
Let's rebuild and run our app
with this code.


172
00:09:03.309 --> 00:09:05.645 line:-1 position:50%
I've added a Learn More button
to our app,


173
00:09:05,645 --> 00:09:08,715 line:-1
which will add the video entity
to our scene.


174
00:09:08.715 --> 00:09:11.384 line:-1 position:50%
On button click,
I'll fade in the video


175
00:09:11.384 --> 00:09:15.755 line:-1 position:50%
using an opacity component
and a fromToByAnimation.


176
00:09:15,755 --> 00:09:18,725 line:-1
For our video content,
I've prepared a short clip


177
00:09:18.725 --> 00:09:21.895 line:-1 position:50%
that explains the role of
the Moon's gravitational force


178
00:09:21.895 --> 00:09:24.097 line:-1 position:50%
on the Earth's rising tides.


179
00:09:24.097 --> 00:09:25.064 line:-1 position:50%
Let's take a look.


180
00:09:25.064 --> 00:09:28.535 line:-1 position:50%
>> The moon orbits our planet.


181
00:09:28,535 --> 00:09:33,273 line:-1
Its gravitational pull exerts
a powerful force on our oceans,


182
00:09:33.273 --> 00:09:36.476 line:-1 position:50%
causing it to bulge
ever so slightly


183
00:09:36,476 --> 00:09:38,912 line:-1
towards the lunar sphere. <


184
00:09:38,912 --> 00:09:42,015 line:-1
VideoPlayerComponent respects
the systemwide preferences


185
00:09:42.015 --> 00:09:43.383 line:-1 position:50%
for captions.


186
00:09:43.383 --> 00:09:45.585 line:-1 position:50%
Let's turn them on
in the Settings app


187
00:09:45.585 --> 00:09:49.456 line:-1 position:50%
under the Accessibility section.


188
00:09:49,456 --> 00:09:54,727 line:-1
>> And so it is, that twice
a day, in a never-ending cycle,


189
00:09:54,727 --> 00:10:00,967 line:-1
the tides rise and fall, driven
by this unceasing interplay


190
00:10:00.967 --> 00:10:04.437 line:-1 position:50%
of earth and moon. <


191
00:10:04,437 --> 00:10:08,441 position:50%
VideoPlayerComponent also
supports passthrough tinting.


192
00:10:08,441 --> 00:10:11,377 line:0
When this feature is enabled,
your passthrough content


193
00:10:11,377 --> 00:10:14,481 line:0
is adjusted to match colors
in the video.


194
00:10:14,481 --> 00:10:17,550 line:0
This is the same treatment that
is used when watching movies


195
00:10:17,550 --> 00:10:21,454 line:0
and TV shows inside
of the TV app on this platform.


196
00:10:21,454 --> 00:10:23,890 position:50%
To use passthrough tinting,
you can set


197
00:10:23,890 --> 00:10:28,661 line:0
the isPassthroughTintingEnabled
property to true.


198
00:10:28,661 --> 00:10:32,532 line:-1
You can also subscribe to
VideoPlayerEvents to be notified


199
00:10:32.532 --> 00:10:35.535 line:-1 position:50%
when properties on
a VideoPlayerComponent change,


200
00:10:35.535 --> 00:10:39.806 line:-1 position:50%
such as the content type,
viewing mode, and video size.


201
00:10:39,806 --> 00:10:43,510 line:0
To subscribe to events, you can
call the subscribe function


202
00:10:43,510 --> 00:10:45,445 line:0
on your RealityViews content


203
00:10:45,445 --> 00:10:48,481 position:50%
and specify the event type
and entity.


204
00:10:48,481 --> 00:10:53,853 position:50%
You can respond to events inside
of the event handler closure.


205
00:10:53.853 --> 00:10:58.091 line:-1 position:50%
VideoPlayerComponent is a great
addition to our 3D scene.


206
00:10:58,091 --> 00:11:02,262 line:-1
So far, our app features a model
of the earth and moon,


207
00:11:02,262 --> 00:11:03,796 line:-1
but I'd like to present it


208
00:11:03.796 --> 00:11:06.900 line:-1 position:50%
against a backdrop
of outer space.


209
00:11:06,900 --> 00:11:10,036 line:-1
I think it would be pretty
cool if we can make ourselves


210
00:11:10.036 --> 00:11:11.971 line:-1 position:50%
a magic window in the room


211
00:11:11,971 --> 00:11:15,441 line:-1
that reveals the moon's orbit
in outer space.


212
00:11:15.441 --> 00:11:19.979 line:-1 position:50%
We can do this using
a portal to render our scene.


213
00:11:19.979 --> 00:11:23.249 line:-1 position:50%
A portal creates an opening
to a different world


214
00:11:23.249 --> 00:11:26.252 line:-1 position:50%
that is visible
through a mesh surface.


215
00:11:26.252 --> 00:11:29.455 line:-1 position:50%
Entities inside of this world
use separate lighting


216
00:11:29,455 --> 00:11:32,659 line:-1
and are masked
by the portal's geometry.


217
00:11:32.659 --> 00:11:35.495 line:-1 position:50%
This example demonstrates
three distinct features


218
00:11:35.495 --> 00:11:36.863 line:-1 position:50%
in RealityKit.


219
00:11:36.863 --> 00:11:41.267 line:-1 position:50%
First, a portal is used to
render the scene in outer space.


220
00:11:41.267 --> 00:11:43.202 line:-1 position:50%
Then a particle effect is used


221
00:11:43.202 --> 00:11:45.605 line:-1 position:50%
to decorate the rim
of the portal.


222
00:11:45,605 --> 00:11:48,675 line:-1
Finally, anchoring is used
to place the portal


223
00:11:48,675 --> 00:11:50,710 line:-1
on the wall of our room.


224
00:11:50.710 --> 00:11:53.146 line:-1 position:50%
Let's start with portals.


225
00:11:53,146 --> 00:11:56,916 line:-1
To make a portal,
we must first create a world.


226
00:11:56.916 --> 00:11:59.586 line:-1 position:50%
To do this,
we add an entity in our scene


227
00:11:59.586 --> 00:12:02.188 line:-1 position:50%
that has a World component.


228
00:12:02,188 --> 00:12:04,591 line:-1
This component marks
its entity tree


229
00:12:04.591 --> 00:12:06.926 line:-1 position:50%
as belonging
to a different world.


230
00:12:06,926 --> 00:12:09,529 line:-1
Entities in a world
are only visible


231
00:12:09,529 --> 00:12:11,497 line:-1
through a portal surface.


232
00:12:11.497 --> 00:12:13.132 line:-1 position:50%
To add content to our world,


233
00:12:13.132 --> 00:12:17.570 line:-1 position:50%
we can attach entities
as children of the world entity.


234
00:12:17,570 --> 00:12:22,141 line:0
Here, we'll add models
for the sky, earth, and moon,


235
00:12:22,141 --> 00:12:24,143 line:0
as well as an ImageBasedLight


236
00:12:24,143 --> 00:12:27,413 position:50%
to define the lighting
inside of the world.


237
00:12:27,413 --> 00:12:29,949 position:50%
All descendants of the world
entity will appear


238
00:12:29,949 --> 00:12:33,086 position:50%
only inside of this world.


239
00:12:33,086 --> 00:12:35,221 position:50%
Next, we'll make a portal.


240
00:12:35,221 --> 00:12:38,891 line:0
To do this, we add an entity
with a model component.


241
00:12:38,891 --> 00:12:41,294 line:0
The model component
contains two properties,


242
00:12:41,294 --> 00:12:43,630 position:50%
a mesh and a material.


243
00:12:43,630 --> 00:12:46,332 line:0
For the mesh,
we'll generate a circular plane


244
00:12:46,332 --> 00:12:49,102 position:50%
to act as the surface
of the portal.


245
00:12:49,102 --> 00:12:52,472 line:0
For the material, we'll assign
a new portal material


246
00:12:52,472 --> 00:12:55,875 position:50%
in order to make the mesh
appear as a portal.


247
00:12:55,875 --> 00:12:57,677 position:50%
To connect the portal
with our world,


248
00:12:57,677 --> 00:13:00,546 position:50%
we'll add a portal component
to the entity


249
00:13:00,546 --> 00:13:03,883 position:50%
and set its target property
to the world entity.


250
00:13:03,883 --> 00:13:06,519 position:50%
This allows the portal
to act as a mask


251
00:13:06,519 --> 00:13:11,758 line:0
to reveal the content
inside of our world.


252
00:13:11.758 --> 00:13:14.394 line:-1 position:50%
Let's see how this looks
in code.


253
00:13:14,394 --> 00:13:15,595 line:-1
In our RealityView,


254
00:13:15.595 --> 00:13:17.697 line:-1 position:50%
I've added calls
to two functions


255
00:13:17,697 --> 00:13:21,901 line:-1
that will implement
makeWorld and makePortal.


256
00:13:21,901 --> 00:13:25,705 line:-1
In our makeWorld function,
we'll create a world entity


257
00:13:25,705 --> 00:13:28,775 line:-1
and populate it
with the portal's contents.


258
00:13:28.775 --> 00:13:31.878 line:-1 position:50%
In the makePortal function,
we'll create a portal


259
00:13:31,878 --> 00:13:35,014 line:-1
and link it to the world
that we just created.


260
00:13:35,014 --> 00:13:37,483 line:-1
Finally, we'll add
both of these entities


261
00:13:37,483 --> 00:13:39,686 line:-1
to our RealityView's content.


262
00:13:39,686 --> 00:13:43,089 line:-1
Let's dive into
each of these functions.


263
00:13:43.089 --> 00:13:45.058 line:-1 position:50%
Inside of the makeWorld
function,


264
00:13:45,058 --> 00:13:50,129 line:-1
we create an entity
and attach a WorldComponent.


265
00:13:50,129 --> 00:13:52,398 line:-1
Next, we load
an EnvironmentResource


266
00:13:52.398 --> 00:13:55.368 line:-1 position:50%
to use as our ImageBasedLight.


267
00:13:55.368 --> 00:13:56.903 line:-1 position:50%
We'll apply this to the world


268
00:13:56.903 --> 00:13:59.172 line:-1 position:50%
using the ImageBasedLight
component


269
00:13:59.172 --> 00:14:02.208 line:-1 position:50%
and ImageBasedLight
ReceiverComponent.


270
00:14:02,208 --> 00:14:05,244 position:50%
To learn more about image-based
lighting in RealityKit,


271
00:14:05,244 --> 00:14:06,679 line:0
check out the session


272
00:14:06,679 --> 00:14:11,250 position:50%
"Explore rendering
for spatial computing."


273
00:14:11,250 --> 00:14:14,487 line:-1
Next, we'll populate the world
with our contents.


274
00:14:14,487 --> 00:14:17,557 line:-1
I'll load models for the earth,
moon, and sky,


275
00:14:17.557 --> 00:14:20.293 line:-1 position:50%
and add them
to the world as children.


276
00:14:20.293 --> 00:14:23.096 line:-1 position:50%
Because these entities
are children of the world,


277
00:14:23,096 --> 00:14:26,699 line:-1
they will only be visible
through the portal.


278
00:14:26,699 --> 00:14:29,569 line:-1
Let's move on to
the makePortal function.


279
00:14:29,569 --> 00:14:32,605 line:-1
To make a portal,
we first need a mesh.


280
00:14:32.605 --> 00:14:36.709 line:-1 position:50%
We'll create one by making a
model component for the entity.


281
00:14:36,709 --> 00:14:38,211 line:-1
To make our portal circular,


282
00:14:38,211 --> 00:14:41,080 line:-1
we'll generate a plane
with equal dimensions


283
00:14:41.080 --> 00:14:44.383 line:-1 position:50%
and a corner radius
that is half the size.


284
00:14:44.383 --> 00:14:46.252 line:-1 position:50%
I'll also create
a PortalMaterial


285
00:14:46.252 --> 00:14:49.889 line:-1 position:50%
to use as a material
for the ModelComponent.


286
00:14:49,889 --> 00:14:53,126 line:-1
Finally, we'll also attach
a portal component


287
00:14:53.126 --> 00:14:55.461 line:-1 position:50%
that is initialized
with the world entity


288
00:14:55,461 --> 00:14:57,196 line:-1
that we created earlier.


289
00:14:57,196 --> 00:14:59,332 line:-1
This links the portal
with the world


290
00:14:59.332 --> 00:15:04.837 line:-1 position:50%
so that we can see the world's
contents through the mesh.


291
00:15:04.837 --> 00:15:07.473 line:-1 position:50%
Next, let's decorate
the rim of the portal


292
00:15:07,473 --> 00:15:09,108 line:-1
with a particle effect.


293
00:15:09.108 --> 00:15:12.245 line:-1 position:50%
To do this, we can use
the ParticleEmitterComponent


294
00:15:12.245 --> 00:15:14.480 line:-1 position:50%
provided in RealityKit.


295
00:15:14.480 --> 00:15:16.482 line:-1 position:50%
Particle emitters
can be used to represent


296
00:15:16.482 --> 00:15:18.985 line:-1 position:50%
many different visual effects
in RealityKit,


297
00:15:18,985 --> 00:15:24,590 line:-1
such as sparks, snow,
and impact effects.


298
00:15:24.590 --> 00:15:28.494 line:-1 position:50%
Particle emitters can be created
either via Reality Composer Pro


299
00:15:28.494 --> 00:15:31.230 line:-1 position:50%
or at runtime using RealityKit


300
00:15:31,230 --> 00:15:33,866 line:-1
through
the ParticleEmitterComponent


301
00:15:33,866 --> 00:15:36,269 line:-1
Here, I've prepared
a particle asset


302
00:15:36.269 --> 00:15:38.771 line:-1 position:50%
using Reality Composer Pro.


303
00:15:38.771 --> 00:15:42.708 line:-1 position:50%
We can use this to decorate the
portal that we created earlier.


304
00:15:42,708 --> 00:15:45,111 line:-1
Let's load this into our scene
and modify


305
00:15:45.111 --> 00:15:49.782 line:-1 position:50%
the particle properties
at runtime using RealityKit.


306
00:15:49.782 --> 00:15:51.784 line:-1 position:50%
To update the particles
over time,


307
00:15:51.784 --> 00:15:54.020 line:-1 position:50%
I've created a custom system


308
00:15:54.020 --> 00:15:56.856 line:-1 position:50%
called
ParticleTransitionSystem.


309
00:15:56.856 --> 00:15:59.192 line:-1 position:50%
Here, we'll use an EntityQuery


310
00:15:59,192 --> 00:16:03,529 line:-1
to find entities that have
a ParticleEmitterComponent.


311
00:16:03,529 --> 00:16:06,933 line:-1
Inside of the system update,
we'll perform our query


312
00:16:06.933 --> 00:16:10.236 line:-1 position:50%
and iterate
over the resulting entities.


313
00:16:10,236 --> 00:16:13,940 line:-1
On each entity, we'll call
the function updateParticles,


314
00:16:13,940 --> 00:16:16,375 line:-1
which we will implement next.


315
00:16:16,375 --> 00:16:19,278 position:50%
To learn more about
custom systems in RealityKit,


316
00:16:19,278 --> 00:16:20,746 line:0
check out the session


317
00:16:20,746 --> 00:16:25,318 position:50%
"Build spatial experiences
with RealityKit."


318
00:16:25,318 --> 00:16:27,854 line:-1
Inside of our
updateParticles function,


319
00:16:27.854 --> 00:16:30.323 line:-1 position:50%
we'll first get the
ParticleEmitterComponent


320
00:16:30.323 --> 00:16:32.291 line:-1 position:50%
from the entity.


321
00:16:32,291 --> 00:16:35,528 line:-1
The ParticleEmitterComponent
contains many properties


322
00:16:35.528 --> 00:16:39.599 line:-1 position:50%
that control various aspects
of particle look and behavior.


323
00:16:39.599 --> 00:16:43.035 line:-1 position:50%
Here, we'll set the lifeSpan
and vortexStrength properties


324
00:16:43.035 --> 00:16:45.004 line:-1 position:50%
based on the entity's scale,


325
00:16:45,004 --> 00:16:47,573 line:-1
so that as the entity
grows in size,


326
00:16:47,573 --> 00:16:51,811 line:-1
the particles start spinning
faster around the portal.


327
00:16:51,811 --> 00:16:53,646 line:-1
Finally, let's apply our changes


328
00:16:53.646 --> 00:16:56.482 line:-1 position:50%
by assigning the component
back to the entity.


329
00:16:56,482 --> 00:16:58,618 line:-1
And we are set.


330
00:16:58,618 --> 00:17:00,653 line:0
To learn about all
the different properties


331
00:17:00,653 --> 00:17:03,155 position:50%
on particle emitters,
check out the session


332
00:17:03,155 --> 00:17:06,559 line:0
"Meet Reality Composer Pro."


333
00:17:06,559 --> 00:17:10,263 line:-1
We're almost done adding
the final touch to our app.


334
00:17:10.263 --> 00:17:14.400 line:-1 position:50%
To finish, let's attach our
portal to the wall in our room.


335
00:17:14.400 --> 00:17:19.171 line:-1 position:50%
To do this, we can use anchors
in RealityKit.


336
00:17:19.171 --> 00:17:23.309 line:-1 position:50%
Anchors can be used to place
content on walls, floors,


337
00:17:23.309 --> 00:17:27.113 line:-1 position:50%
or locations relative
to your head or hand.


338
00:17:27.113 --> 00:17:30.149 line:-1 position:50%
Anchors in RealityKit
support two tracking modes,


339
00:17:30.149 --> 00:17:32.685 line:-1 position:50%
.continuous and .once.


340
00:17:32,685 --> 00:17:34,921 line:-1
When using the
continuous tracking mode,


341
00:17:34.921 --> 00:17:38.157 line:-1 position:50%
the anchor entity moves along
with the anchor over time,


342
00:17:38.157 --> 00:17:40.293 line:-1 position:50%
such as when your head moves.


343
00:17:40.293 --> 00:17:42.261 line:-1 position:50%
When using
the once tracking mode,


344
00:17:42,261 --> 00:17:47,366 line:-1
the anchor entity will not move
after being positioned once.


345
00:17:47,366 --> 00:17:49,902 line:-1
To listen to when an entity
becomes anchored,


346
00:17:49,902 --> 00:17:53,205 line:-1
you can subscribe to the
AnchoredStateChanged event


347
00:17:53.205 --> 00:17:54.874 line:-1 position:50%
in RealityKit.


348
00:17:54,874 --> 00:17:58,010 line:-1
Note that while you can use
anchors to parent entities


349
00:17:58.010 --> 00:17:59.879 line:-1 position:50%
to place 3D content,


350
00:17:59.879 --> 00:18:02.581 line:-1 position:50%
explicit transforms
of the anchors themselves


351
00:18:02,581 --> 00:18:06,686 line:-1
are not visible to the app
to preserve user privacy.


352
00:18:06.686 --> 00:18:08.854 line:-1 position:50%
To get access to anchor
transforms,


353
00:18:08.854 --> 00:18:11.057 line:-1 position:50%
you will need to use ARKit.


354
00:18:11,057 --> 00:18:14,060 line:0
For more information on this,
check out the session,


355
00:18:14,060 --> 00:18:18,230 position:50%
"Meet ARKit
for spatial computing."


356
00:18:18.230 --> 00:18:21.667 line:-1 position:50%
To use anchors in our app,
we first need to modify our app


357
00:18:21.667 --> 00:18:23.736 line:-1 position:50%
to use an immersive space.


358
00:18:23.736 --> 00:18:26.772 line:-1 position:50%
An immersive space
is a special type of container


359
00:18:26.772 --> 00:18:30.609 line:-1 position:50%
that allows your app to render
content outside of the window.


360
00:18:30,609 --> 00:18:33,112 line:-1
To do this,
we can add an ImmersiveSpace


361
00:18:33.112 --> 00:18:35.147 line:-1 position:50%
to our SwiftUI scene.


362
00:18:35,147 --> 00:18:38,117 line:-1
We'll also add
an .immersionStyle modifier


363
00:18:38.117 --> 00:18:40.019 line:-1 position:50%
and set it to mixed.


364
00:18:40.019 --> 00:18:43.289 line:-1 position:50%
Inside of the ImmersiveSpace,
we can use a RealityView


365
00:18:43,289 --> 00:18:46,392 line:-1
to place content
that will be anchored.


366
00:18:46,392 --> 00:18:49,729 line:0
To learn more about Immersive
Spaces, check out the session


367
00:18:49,729 --> 00:18:53,499 line:0
"Go beyond the window
with SwiftUI."


368
00:18:53.499 --> 00:18:56.702 line:-1 position:50%
Inside of our RealityView,
we can use an anchor entity


369
00:18:56.702 --> 00:18:59.171 line:-1 position:50%
as a container for our portal.


370
00:18:59.171 --> 00:19:01.107 line:-1 position:50%
We initialize an anchor entity


371
00:19:01.107 --> 00:19:03.709 line:-1 position:50%
with a specification
of the type of surface


372
00:19:03,709 --> 00:19:06,479 line:-1
that we would like
to anchor our content on.


373
00:19:06,479 --> 00:19:09,482 line:-1
In our case, we are looking
for a vertical wall


374
00:19:09,482 --> 00:19:13,219 line:-1
with a minimum size
of one meter by one meter.


375
00:19:13.219 --> 00:19:16.422 line:-1 position:50%
When an anchor is found
that matches the specification,


376
00:19:16.422 --> 00:19:20.993 line:-1 position:50%
RealityKit will automatically
attach our content to the wall.


377
00:19:20.993 --> 00:19:22.962 line:-1 position:50%
And we are finally done.


378
00:19:22,962 --> 00:19:25,164 line:-1
When we run our app,
we get a portal


379
00:19:25,164 --> 00:19:28,834 line:-1
that is attached to the wall.


380
00:19:28.834 --> 00:19:32.805 line:-1 position:50%
From portals and particles
to anchors and attachments,


381
00:19:32.805 --> 00:19:34.874 line:-1 position:50%
RealityKit provides
many features


382
00:19:34.874 --> 00:19:37.676 line:-1 position:50%
that let you build
immersive experiences.


383
00:19:37.676 --> 00:19:41.680 line:-1 position:50%
Let's summarize everything that
we went over in this session.


384
00:19:41,680 --> 00:19:45,217 line:-1
Attachments in RealityView
let you embed SwiftUI content


385
00:19:45,217 --> 00:19:47,686 line:-1
inside of your entity hierarchy
so that you can


386
00:19:47.686 --> 00:19:51.357 line:-1 position:50%
place UI elements
alongside 3D elements.


387
00:19:51,357 --> 00:19:55,828 line:-1
VideoPlayerComponent, portals,
and particle effects let you add


388
00:19:55,828 --> 00:20:00,466 line:-1
dynamic elements to enhance
your scene in RealityKit.


389
00:20:00.466 --> 00:20:03.302 line:-1 position:50%
Finally, anchors let you
attach 3D content


390
00:20:03.302 --> 00:20:08.474 line:-1 position:50%
to real-world surfaces
such as your floor or wall.


391
00:20:08,474 --> 00:20:11,777 line:0
The session "Build spatial
experiences with RealityKit"


392
00:20:11,777 --> 00:20:15,481 line:0
goes over key concepts
like entities, components,


393
00:20:15,481 --> 00:20:17,316 position:50%
and RealityView.


394
00:20:17,316 --> 00:20:21,153 line:0
The session "Work with Reality
Composer Pro content in Xcode"


395
00:20:21,153 --> 00:20:24,023 position:50%
takes you through the process
of building an immersive app


396
00:20:24,023 --> 00:20:28,294 line:0
using Reality Composer Pro
together with RealityKit.


397
00:20:28.294 --> 00:20:30.663 line:-1 position:50%
I can't wait to see
all the things you'll create


398
00:20:30,663 --> 00:20:32,832 line:-1
using these new features
in RealityKit.


399
00:20:32,832 --> 00:20:34,266 line:-1
Thank you for watching.


400
00:20:34,266 --> 00:20:37,870 align:right size:2% position:90%
♪

