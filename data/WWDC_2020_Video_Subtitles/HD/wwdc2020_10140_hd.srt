1
00:00:03,904 --> 00:00:07,040 line:-1
Hello, and welcome to WWDC.


2
00:00:08,375 --> 00:00:10,978 line:0
Hello, and welcome to WWDC.


3
00:00:11,044 --> 00:00:14,515 line:0
My name is Lucas, and I'm an engineer
on the Caffè Macs team at Apple.


4
00:00:14,982 --> 00:00:17,885 line:-2
In this session, I'll talk about how
we've considered location


5
00:00:17,951 --> 00:00:19,720 line:-1
at a micro and macro level


6
00:00:19,786 --> 00:00:23,290 line:-2
to provide a great Caffè Macs
app experience to our employees.


7
00:00:23,924 --> 00:00:28,228 line:-2
I'll talk primarily about the employee
experience before social distancing


8
00:00:28,295 --> 00:00:31,698 line:-2
and share a few places where
we're already working on new features


9
00:00:31,765 --> 00:00:33,367 line:-1
around safety considerations.


10
00:00:33,433 --> 00:00:35,636 line:-2
Whether you're working on
your own Caffè app,


11
00:00:35,702 --> 00:00:37,471 line:-1
an app for your corporate facility,


12
00:00:37,538 --> 00:00:40,107 line:-2
or an enterprise app
used by employees around the world,


13
00:00:40,174 --> 00:00:43,844 line:-2
these considerations should help you
deliver a great app experience.


14
00:00:43,911 --> 00:00:47,648 line:-2
First, I'll give you a quick inside view
of Caffè Macs Apple Park.


15
00:00:48,215 --> 00:00:50,217 line:-2
By understanding
the Caffè Macs experience,


16
00:00:50,284 --> 00:00:53,153 line:-2
you'll see why location was so important
for the app we built.


17
00:00:53,687 --> 00:00:54,688 line:-1
Second,


18
00:00:54,755 --> 00:00:58,458 line:-2
we'll discuss how user preferences let
our users control their app experience,


19
00:00:58,525 --> 00:01:00,694 line:-1
even before calling location services.


20
00:01:01,161 --> 00:01:04,498 line:0
Next, we'll talk about delivering
on-site, in-app experiences


21
00:01:04,565 --> 00:01:06,033 line:0
using location services.


22
00:01:06,500 --> 00:01:10,404 line:0
And finally, we'll briefly dive
into the world of internationalization.


23
00:01:10,470 --> 00:01:12,840 line:-1
Let's begin with an overview of Caffè Macs


24
00:01:12,906 --> 00:01:15,275 line:-2
and the employee experience
we wanna provide.


25
00:01:15,342 --> 00:01:18,812 line:-2
Caffè Macs is Apple Park's
unofficial town square.


26
00:01:18,879 --> 00:01:21,081 line:-2
It's a gathering place
where everyone in the company


27
00:01:21,148 --> 00:01:22,983 line:-1
comes to meet, chat and share a meal.


28
00:01:23,483 --> 00:01:26,119 line:-2
Whether you're looking for a lunch,
a snack or a coffee,


29
00:01:26,186 --> 00:01:29,323 line:-2
Caffè Macs is the perfect place
for some healthy, delicious food.


30
00:01:29,389 --> 00:01:33,760 line:-2
Our mission is to provide great food
and service to our employees.


31
00:01:34,461 --> 00:01:37,931 line:-2
To do so, we offer employees
an in-house enterprise app,


32
00:01:37,998 --> 00:01:41,368 line:-2
where you can browse the menu,
order meals and pay using Apple Pay.


33
00:01:41,869 --> 00:01:46,173 line:-2
We also have a kiosk app on iPad,
which allows guests to place orders.


34
00:01:46,240 --> 00:01:48,675 line:-2
That order is then sent
to our third application,


35
00:01:48,742 --> 00:01:50,010 line:-1
the Kitchen Display System,


36
00:01:50,077 --> 00:01:51,979 line:-1
which is used in the kitchen, on an iPad.


37
00:01:52,613 --> 00:01:55,716 line:-2
Once the order is received,
the chefs will begin preparing your food.


38
00:01:56,917 --> 00:01:59,319 line:-2
And when it's ready,
they'll use the Kitchen Display System


39
00:01:59,386 --> 00:02:02,256 line:-2
to notify the user
that their food is ready to be picked up.


40
00:02:03,690 --> 00:02:07,694 line:-2
Preferences and location services
in the Caffè Macs app are critical


41
00:02:07,761 --> 00:02:12,099 line:-2
in order to deliver a great made-to-order
food experience for our employees.


42
00:02:12,165 --> 00:02:15,769 line:-2
Okay, so that's a brief overview
of the cafeteria experience.


43
00:02:17,070 --> 00:02:19,806 line:-2
Now let's look into
our location-based app experience.


44
00:02:19,873 --> 00:02:21,074 line:-1
In the Caffè Macs app,


45
00:02:21,141 --> 00:02:23,677 line:-2
we've allowed employees
to select their default location.


46
00:02:24,311 --> 00:02:27,447 line:-2
We use this preference in order to
quickly show the menu for a Caffè.


47
00:02:27,514 --> 00:02:31,051 line:-2
Notice my current Default Location
preference is set to "Closest to Me."


48
00:02:31,552 --> 00:02:33,654 line:-1
The selection will use my location


49
00:02:33,720 --> 00:02:35,789 line:-2
in order to show
the appropriate Caffè menu.


50
00:02:36,523 --> 00:02:38,292 line:-1
When I select a specific Caffè,


51
00:02:38,358 --> 00:02:41,295 line:-2
the app defaults
to showing the menu for that location.


52
00:02:42,362 --> 00:02:45,766 line:-2
This allows the user to control
their location-based experience,


53
00:02:45,832 --> 00:02:50,037 line:-2
where they wanna preempt or deny
permission for location services.


54
00:02:50,571 --> 00:02:53,640 line:-2
During app launch,
we check the user's Caffè preference.


55
00:02:54,341 --> 00:02:57,344 line:-2
We allow users to select
either "Closest to Me,"


56
00:02:57,411 --> 00:03:01,014 line:-2
which will use location services
to determine which Caffè to show the user


57
00:03:01,081 --> 00:03:02,349 line:-1
when they launch the app,


58
00:03:02,816 --> 00:03:04,685 line:-1
or a specific Caffè,


59
00:03:04,751 --> 00:03:07,221 line:-2
which will show the user
the Caffè of their choice.


60
00:03:07,721 --> 00:03:10,591 line:-2
These options give users control
over which menu they see.


61
00:03:10,657 --> 00:03:14,661 line:-2
This is great for one of the recent
updates we've made to the Caffè Macs app,


62
00:03:15,095 --> 00:03:19,499 line:-2
which allows users to quickly choose
a pickup window at their selected Caffè,


63
00:03:19,867 --> 00:03:22,135 line:-1
ensuring proper social distancing.


64
00:03:22,202 --> 00:03:23,971 line:-1
You can then store the preference


65
00:03:24,037 --> 00:03:27,207 line:-2
and use it to determine
the app's default state at start-up.


66
00:03:28,008 --> 00:03:32,145 line:-2
A simple approach is to store the user's
selection using Foundation's UserDefaults,


67
00:03:32,212 --> 00:03:35,782 line:-2
where you store key-value pairs
persistently across launches of your app.


68
00:03:36,183 --> 00:03:39,853 line:-2
UserDefaults is a great place to store
these types of small preference values


69
00:03:39,920 --> 00:03:41,054 line:-1
for your app use.


70
00:03:41,121 --> 00:03:42,523 line:-1
As we just saw,


71
00:03:42,589 --> 00:03:46,059 line:-2
allowing users to select their
default location is a great first step.


72
00:03:46,126 --> 00:03:48,228 line:-1
Next, let's take things one step further


73
00:03:48,295 --> 00:03:51,899 line:-2
and talk about how we deliver on-site
experiences using location services.


74
00:03:51,965 --> 00:03:54,501 line:-2
One of the challenges we have
with the Caffè Macs app


75
00:03:54,568 --> 00:03:57,804 line:-2
is to show the correct menu,
based on where the user is standing.


76
00:03:58,805 --> 00:04:01,909 line:-2
There's one main Caffè on campus
and a coffee station nearby,


77
00:04:02,543 --> 00:04:06,079 line:-2
and at any given time,
a person can be near both locations.


78
00:04:06,146 --> 00:04:09,983 line:-2
You may experience the same challenge
when building an app for your facilities,


79
00:04:10,050 --> 00:04:12,853 line:-2
where multiple points of interest
are close together.


80
00:04:12,920 --> 00:04:16,156 line:-2
For our app, we wanna ensure
our users are placing orders


81
00:04:16,223 --> 00:04:17,891 line:-1
at the location they are expecting.


82
00:04:18,291 --> 00:04:21,894 line:-2
To achieve this, we can use Core Location
and the iBeacon protocol.


83
00:04:22,429 --> 00:04:24,398 line:-1
In order to use Core Location in your app,


84
00:04:24,464 --> 00:04:28,068 line:-2
you'll have to request authorization
for these services from your user.


85
00:04:28,135 --> 00:04:30,737 line:-1
At Apple, we care deeply about privacy.


86
00:04:30,804 --> 00:04:33,473 line:-2
Employees choose whether or not
to grant permission


87
00:04:33,540 --> 00:04:36,376 line:-2
to enterprise apps
that use location services.


88
00:04:37,010 --> 00:04:41,048 line:-2
It's important to only request access
to the data that your app needs


89
00:04:41,114 --> 00:04:43,784 line:-1
and explain to the user why you need it.


90
00:04:44,551 --> 00:04:47,521 line:-2
To go deeper on ensuring privacy
when using location,


91
00:04:47,588 --> 00:04:49,990 line:-1
please watch this year's related session.


92
00:04:50,057 --> 00:04:53,393 line:-2
There are two types of authorization
your app can request:


93
00:04:53,460 --> 00:04:55,462 line:-1
"When in Use" and "Always."


94
00:04:56,163 --> 00:04:57,898 line:-1
With the "When in Use" authorization,


95
00:04:57,965 --> 00:05:01,201 line:-2
your app will receive location events
while in the foreground,


96
00:05:01,768 --> 00:05:04,872 line:-2
and by enabling
the background location usage indicator,


97
00:05:04,938 --> 00:05:07,741 line:-2
the app may continue to access location
in the background.


98
00:05:07,808 --> 00:05:09,877 line:-1
The "Always" authorization would allow us


99
00:05:09,943 --> 00:05:12,212 line:-2
to access the user location
in the background,


100
00:05:12,279 --> 00:05:15,015 line:-2
without starting in the foreground
and without the indicator.


101
00:05:15,516 --> 00:05:17,651 line:-2
But this is unnecessary
for the Caffè Macs app.


102
00:05:17,718 --> 00:05:22,089 line:-2
The Caffè Macs app requests "When in Use"
preference for location services,


103
00:05:22,155 --> 00:05:24,424 line:-2
which is all we need
for our location experience.


104
00:05:24,491 --> 00:05:26,827 line:-1
For more about requesting authorization,


105
00:05:26,894 --> 00:05:29,496 line:-2
including the new
approximate authorization request,


106
00:05:29,563 --> 00:05:31,965 line:-1
please watch this Core Location session.


107
00:05:32,032 --> 00:05:34,134 line:-1
Keep in mind that asking for authorization


108
00:05:34,201 --> 00:05:36,236 line:-2
doesn't guarantee
your app will receive it.


109
00:05:36,303 --> 00:05:39,606 line:-2
Your app should gracefully handle the case
where authorization is denied,


110
00:05:40,073 --> 00:05:43,644 line:-2
where the user chooses to grant your app less access
than you requested,


111
00:05:43,710 --> 00:05:46,613 line:-2
or where the user grants your app
temporary access


112
00:05:46,680 --> 00:05:48,215 line:-1
with the "Allow Once" option.


113
00:05:48,849 --> 00:05:52,519 line:-2
To prepare our app for calling
"Request When in Use" authorization,


114
00:05:52,586 --> 00:05:56,190 line:-2
we add the NSLocationWhenInUseUsageDescription
key,


115
00:05:56,256 --> 00:05:59,259 line:-2
with purpose string,
to our app's Info.plist file.


116
00:06:00,194 --> 00:06:04,131 line:-2
The system displays our purpose string
and the authorization request dialogue.


117
00:06:04,198 --> 00:06:06,266 line:-1
Before requesting authorization,


118
00:06:06,333 --> 00:06:08,735 line:-2
add the required keys
to your Info.plist file.


119
00:06:09,703 --> 00:06:13,974 line:-2
If a required key isn't present,
authorization requests fail immediately.


120
00:06:15,409 --> 00:06:20,480 line:-2
Additionally, request authorization only
when your user needs location services


121
00:06:20,547 --> 00:06:22,216 line:-1
to perform a task in your app.


122
00:06:23,217 --> 00:06:26,954 line:-2
If it's not clear to your user why
your app is requesting location services,


123
00:06:27,020 --> 00:06:28,822 line:-1
the user may deny your request.


124
00:06:31,124 --> 00:06:35,429 line:-2
When you request authorization, or when
your app's authorization status changes,


125
00:06:35,495 --> 00:06:38,265 line:-2
you use the locationManager,
didChangeAuthorization method


126
00:06:38,332 --> 00:06:40,868 line:-2
of your delegate object
to process the changes.


127
00:06:41,869 --> 00:06:44,972 line:-2
The availability of location services
may change at any time.


128
00:06:45,038 --> 00:06:48,509 line:-2
The user can disable location services
in the system settings,


129
00:06:48,575 --> 00:06:51,245 line:-2
either for your app specifically,
or for all apps.


130
00:06:51,945 --> 00:06:54,615 line:-2
If your app is running, either
in the foreground or in the background,


131
00:06:54,681 --> 00:06:56,617 line:-1
when the availability status changes,


132
00:06:56,683 --> 00:07:00,153 line:-2
the system calls locationManager,
didChangeAuthorization method


133
00:07:00,220 --> 00:07:01,955 line:-1
to notify you of the changes.


134
00:07:03,190 --> 00:07:07,127 line:-2
Location services require hardware
that may not be present on every device.


135
00:07:07,928 --> 00:07:10,831 line:-2
Before relying on
a specific location service,


136
00:07:10,898 --> 00:07:12,766 line:-1
check if the device supports the service


137
00:07:12,833 --> 00:07:15,802 line:-2
by calling the methods
of the CLLocationManager object.


138
00:07:16,403 --> 00:07:19,206 line:-2
If location services are not available
on the device,


139
00:07:19,273 --> 00:07:22,676 line:-2
you can fall back on the default
user preference that we discussed earlier.


140
00:07:23,644 --> 00:07:25,479 line:-1
Once your app has received authorization


141
00:07:25,546 --> 00:07:27,614 line:-2
and you've determined
the device supports it,


142
00:07:27,681 --> 00:07:29,516 line:-1
your app is ready to use location.


143
00:07:29,583 --> 00:07:32,986 line:-2
We can use Core Location
in order to arrange for beacon signals.


144
00:07:33,854 --> 00:07:36,290 line:-1
A beacon is a device that emits a signal


145
00:07:36,356 --> 00:07:39,459 line:-2
which can be detected by the system
and passed to your app.


146
00:07:39,526 --> 00:07:42,596 line:-2
Those signals can identify
that the user is within a Caffè.


147
00:07:43,030 --> 00:07:45,933 line:-2
And once we detect
a specific beacon signal,


148
00:07:45,999 --> 00:07:48,268 line:-1
we can then show the menu for that Caffè.


149
00:07:49,002 --> 00:07:52,573 line:-2
Only the previously mentioned
location authorization is required


150
00:07:52,639 --> 00:07:54,708 line:-1
in order to use iBeacon protocol.


151
00:07:56,510 --> 00:07:58,278 line:-1
When deploying your beacon hardware,


152
00:07:58,345 --> 00:08:02,282 line:-2
you must program each beacon
with an appropriate proximity UUID,


153
00:08:02,349 --> 00:08:04,084 line:-1
major value and minor value.


154
00:08:05,352 --> 00:08:08,388 line:-2
The values identify
each of your beacons uniquely


155
00:08:08,455 --> 00:08:11,725 line:-2
and make it possible for your app
to differentiate between them later.


156
00:08:12,960 --> 00:08:17,197 line:-2
This also helps you establish hierarchy,
where applicable in your use case,


157
00:08:17,598 --> 00:08:20,334 line:-2
for example, so that you can match
the Caffè level,


158
00:08:20,400 --> 00:08:22,069 line:-1
or a specific food station.


159
00:08:24,338 --> 00:08:27,708 line:-2
Beacons make location-based products
and services available to users


160
00:08:27,774 --> 00:08:30,377 line:-2
by broadcasting these unique values
to your device.


161
00:08:32,111 --> 00:08:36,015 line:-2
Adding beacon support to your app involves
detecting beacons in two different stages.


162
00:08:36,549 --> 00:08:39,953 line:-2
One: Use region monitoring
to detect the presence of a beacon.


163
00:08:40,386 --> 00:08:44,758 line:-2
And two: Use beacon ranging to determine
the proximity to a detected beacon.


164
00:08:45,359 --> 00:08:46,827 line:-1
You can find out more about this


165
00:08:46,894 --> 00:08:50,464 line:-2
by watching the 2019
"What's New in Core Location" session.


166
00:08:50,531 --> 00:08:54,601 line:-2
Here's how you can use region monitoring
to alert your app when a beacon is nearby.


167
00:08:55,569 --> 00:09:00,040 line:-2
To monitor for beacons, create
a CLBeaconIdentityConstraint object


168
00:09:00,107 --> 00:09:01,942 line:-1
with your proximity UUID.


169
00:09:02,576 --> 00:09:05,579 line:-2
Next, instantiate
a CLBeaconRegion object


170
00:09:06,713 --> 00:09:09,550 line:-2
and register it
with the startMonitoring for method


171
00:09:09,616 --> 00:09:11,718 line:-1
of your CLLocationManager object.


172
00:09:12,252 --> 00:09:15,088 line:-2
The beaconRegion contains
the proximity UUID,


173
00:09:15,155 --> 00:09:18,559 line:-2
major value and minor value,
of the beacons that you wanna detect.


174
00:09:19,426 --> 00:09:23,163 line:-2
Only beacons with matching values
trigger a call to your delegate object.


175
00:09:23,997 --> 00:09:25,566 line:-1
Prior to calling this method,


176
00:09:25,632 --> 00:09:28,735 line:-2
you must have created
a CLLocationManager object


177
00:09:28,802 --> 00:09:30,204 line:-1
and assigned a delegate to it.


178
00:09:31,672 --> 00:09:33,373 line:-1
When a matching beacon is detected,


179
00:09:33,440 --> 00:09:36,143 line:-2
the CLLocationManager object
notifies its delegate


180
00:09:36,210 --> 00:09:39,746 line:-2
by calling the LocationManager,
didEnterRegion method.


181
00:09:41,281 --> 00:09:44,551 line:-2
Similarly, when a detected beacon
moves out of range,


182
00:09:44,618 --> 00:09:48,121 line:-2
the locationManager calls the
LocationManager, didExitRegion method.


183
00:09:49,990 --> 00:09:53,961 line:-2
Next, you can check if ranging is
available on the hardware running your app


184
00:09:54,027 --> 00:09:58,065 line:-2
by calling isRangingAvailable
type method on CLLocationManager.


185
00:10:00,234 --> 00:10:03,070 line:-2
Start ranging
only if the device supports the service.


186
00:10:03,604 --> 00:10:05,873 line:-1
Also, you can optionally store the beacon


187
00:10:05,939 --> 00:10:08,375 line:-2
so that the ranging
can be stopped on demand.


188
00:10:09,042 --> 00:10:11,044 line:-2
You can use the major
and minor values here


189
00:10:11,111 --> 00:10:13,514 line:-2
in order to distinguish amongst
your unique beacons.


190
00:10:13,981 --> 00:10:18,051 line:-2
If multiple beacons use the same UUID,
major and minor values,


191
00:10:18,118 --> 00:10:19,686 line:-1
the array of beacons delivered


192
00:10:19,753 --> 00:10:22,556 line:-2
to the LocationManager,
didRangeBeacons in method


193
00:10:22,623 --> 00:10:26,760 line:-2
might be differentiated only by
the proximity and accuracy values.


194
00:10:26,827 --> 00:10:30,163 line:-2
We've seen how ranging for beacon signals
is a great resource


195
00:10:30,230 --> 00:10:32,299 line:-2
for creating tailored,
on-site experiences,


196
00:10:33,100 --> 00:10:37,871 line:-2
and these location services make our apps
more contextual to the user's environment.


197
00:10:37,938 --> 00:10:40,440 line:-2
Let's talk about how to adapt
your app's behavior


198
00:10:40,507 --> 00:10:42,309 line:-1
to location on a global scale.


199
00:10:42,376 --> 00:10:44,945 line:-2
At Apple, we have employees
around the world.


200
00:10:45,012 --> 00:10:47,214 line:-2
We want our apps
to provide a great experience,


201
00:10:47,281 --> 00:10:48,882 line:-1
no matter where they're used.


202
00:10:49,516 --> 00:10:53,120 line:-2
There are a number of internationalization
topics you should consider


203
00:10:53,187 --> 00:10:55,055 line:-1
for your global enterprise apps.


204
00:10:55,122 --> 00:10:58,825 line:-2
For user-visible representation
of dates and times,


205
00:10:58,892 --> 00:11:02,162 line:-2
DateFormatter provides
a variety of localized presets


206
00:11:02,229 --> 00:11:03,764 line:-1
and configuration options.


207
00:11:05,065 --> 00:11:09,870 line:-2
Instances of DateFormatter create
string representations of date objects


208
00:11:09,937 --> 00:11:13,240 line:-2
and convert textual representation
of dates and times


209
00:11:13,307 --> 00:11:14,708 line:-1
into date objects.


210
00:11:15,742 --> 00:11:18,478 line:-1
For instance, users in different regions


211
00:11:18,545 --> 00:11:21,548 line:-2
might expect to see dates and times
formatted in a specific way.


212
00:11:22,049 --> 00:11:25,652 line:-2
In the new pickup window feature
we've added for social distancing,


213
00:11:25,719 --> 00:11:29,723 line:-2
we'll need to have the correct
localized time presented to the user


214
00:11:29,790 --> 00:11:32,292 line:-2
for them to select from,
no matter where they are.


215
00:11:32,359 --> 00:11:34,595 line:-2
This is how you can create
a DateFormatter instance.


216
00:11:34,661 --> 00:11:38,131 line:-2
The Foundation framework also provides
a NumberFormatter class.


217
00:11:38,632 --> 00:11:40,234 line:-1
Instances of NumberFormatter


218
00:11:40,300 --> 00:11:43,770 line:-2
can configure the textual representation
of NSNumber objects


219
00:11:43,837 --> 00:11:47,374 line:-2
and convert textual representation
of numeric values


220
00:11:47,441 --> 00:11:48,742 line:-1
into NSNumber objects.


221
00:11:49,443 --> 00:11:53,480 line:-2
Note that NumberFormatter only formats,
it doesn't provide currency conversions.


222
00:11:54,848 --> 00:11:56,517 line:-1
You can format currency amounts


223
00:11:56,583 --> 00:11:59,553 line:-2
using the predefined
currency number format style,


224
00:11:59,620 --> 00:12:02,689 line:-2
which is used by the NumberFormatter's
numberStyle property.


225
00:12:02,756 --> 00:12:08,195 line:-2
By observing both the device's locale
and the ISO 4217 currency code,


226
00:12:08,262 --> 00:12:11,198 line:-2
you can format the amounts
using a NumberFormatter instance.


227
00:12:12,399 --> 00:12:13,767 line:-1
Here in the kiosk application,


228
00:12:13,834 --> 00:12:16,570 line:-2
we use a NumberFormatter
on an order summary screen,


229
00:12:16,637 --> 00:12:20,374 line:-2
which is a fantastic resource for
formatting the total in the user's locale.


230
00:12:20,440 --> 00:12:23,810 line:-2
But notice how the image is displaying
the total in Uruguayan pesos.


231
00:12:23,877 --> 00:12:27,181 line:-2
Just behind the modal, you'll notice
that the Caffè is Parmer Lane 5,


232
00:12:27,247 --> 00:12:28,415 line:-1
which is in Texas.


233
00:12:28,849 --> 00:12:30,851 line:-2
In order to format
the amount appropriately,


234
00:12:30,918 --> 00:12:33,520 line:-2
we'll need to set the currency code
to American dollars.


235
00:12:34,121 --> 00:12:37,090 line:-2
After setting the format style
to the predefined currency style,


236
00:12:37,558 --> 00:12:38,559 line:-1
you'll also want to set


237
00:12:38,625 --> 00:12:41,128 line:-2
your NumberFormatter's locale
and currency code.


238
00:12:41,195 --> 00:12:43,297 line:-1
A currency code is a three-letter code


239
00:12:43,363 --> 00:12:47,801 line:-2
that is, in most cases, composed of
a country's two-character Internet code


240
00:12:47,868 --> 00:12:51,238 line:-2
plus an extra character
to denote the currency unit.


241
00:12:51,305 --> 00:12:55,075 line:-2
For example, the currency code
for the Canadian dollar is CAD.


242
00:12:55,142 --> 00:12:57,110 line:-2
The NumberFormatter locale
instance property


243
00:12:57,177 --> 00:13:00,881 line:-2
determines the default values
for many formatter attributes,


244
00:13:00,948 --> 00:13:03,617 line:-2
such as the currency code
and the decimal separator.


245
00:13:03,684 --> 00:13:05,986 line:-1
By setting the currency code and locale,


246
00:13:06,053 --> 00:13:10,023 line:-2
we can display prices according to
the user and business preferences.


247
00:13:10,090 --> 00:13:11,825 line:-1
You can find out more about this


248
00:13:11,892 --> 00:13:14,461 line:-2
by watching this year's session
on formatters.


249
00:13:14,962 --> 00:13:17,030 line:-2
In order to provide
a great user experience,


250
00:13:17,097 --> 00:13:21,335 line:-2
our enterprise app should be localized to
your user's preferred reading language.


251
00:13:21,401 --> 00:13:25,806 line:-2
For user interface files, Xcode generates
a file with a .strings extension


252
00:13:25,873 --> 00:13:29,810 line:-2
that contains placeholders for the text
that localizers translate later.


253
00:13:30,811 --> 00:13:34,381 line:0
Learn more about how to best localize
your app by watching these sessions.


254
00:13:34,982 --> 00:13:36,950 line:-1
By looking at the Caffè Macs app,


255
00:13:37,017 --> 00:13:38,986 line:-2
we reviewed how user preferences
can be used


256
00:13:39,052 --> 00:13:41,321 line:-1
to deliver a default location experience.


257
00:13:41,388 --> 00:13:43,390 line:-1
Location services take it one step further


258
00:13:43,457 --> 00:13:45,893 line:-2
by delivering location-based
products and services.


259
00:13:46,760 --> 00:13:50,264 line:-2
Internationalization ensures your app
offers a great experience


260
00:13:50,330 --> 00:13:51,632 line:-1
all around the world.


261
00:13:52,599 --> 00:13:56,703 line:-2
Incorporating location, both at a micro
and macro level, in the Caffè Macs app


262
00:13:56,770 --> 00:13:59,806 line:-2
has allowed us to deliver
a great experience for employees at Apple.


263
00:14:00,407 --> 00:14:03,944 line:-2
We're looking forward to seeing how you
apply these learnings to your own apps,


264
00:14:04,011 --> 00:14:05,846 line:-1
and we can't wait to see what you build.


265
00:14:05,913 --> 00:14:07,047 line:-1
Thanks.

