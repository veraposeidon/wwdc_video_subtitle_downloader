1
00:00:03,804 --> 00:00:06,507 line:-1
Hello and welcome to WWDC.


2
00:00:07,841 --> 00:00:09,409 line:0
My name is Roger Pantos,


3
00:00:09,476 --> 00:00:14,781 line:0
and today I'd like to talk to you
about Blocking Preload Hints in HLS.


4
00:00:14,848 --> 00:00:18,252 line:-2
So first, what are Blocking Preload Hints,
and what are they good for?


5
00:00:18,318 --> 00:00:19,987 line:-1
To understand preload hinting,


6
00:00:20,053 --> 00:00:23,156 line:-2
it helps to understand a similar feature
of Low-Latency HLS,


7
00:00:23,223 --> 00:00:25,058 line:-1
which is Blocking Playlist Reload.


8
00:00:25,125 --> 00:00:28,996 line:0
We actually have an entire other talk
about Blocking Playlist Reload.


9
00:00:29,062 --> 00:00:33,534 line:0
But the basic idea is that the client
can ask the server


10
00:00:33,600 --> 00:00:36,770 line:0
for the next version of the playlist
in advance.


11
00:00:37,437 --> 00:00:39,706 line:0
The server will then
hold onto that request


12
00:00:39,773 --> 00:00:43,443 line:0
and unblock its response
when that playlist updates.


13
00:00:43,844 --> 00:00:47,147 line:0
That allows the client
to receive the update immediately.


14
00:00:48,048 --> 00:00:49,783 line:0
Preload hinting is similar,


15
00:00:49,850 --> 00:00:52,553 line:0
except it's for loading
the partial segments themselves.


16
00:00:53,153 --> 00:00:58,458 line:0
The idea is to make the request in advance
to lower the eventual response time.


17
00:00:58,525 --> 00:01:02,196 line:-2
The benefit of preload hinting
is that it gets the media flowing


18
00:01:02,262 --> 00:01:05,265 line:-2
to the client from the server
as soon as it's available.


19
00:01:05,632 --> 00:01:08,468 line:-1
And that eliminates that round-trip bubble


20
00:01:08,535 --> 00:01:11,772 line:-2
between seeing a new segment
appear in the playlist update


21
00:01:11,839 --> 00:01:14,641 line:-2
and then having to go back
and ask the server for it.


22
00:01:15,175 --> 00:01:19,446 line:-2
It's also effective
for driving HTTP cache fill,


23
00:01:19,513 --> 00:01:22,216 line:-1
because it eliminates another round trip,


24
00:01:22,282 --> 00:01:24,818 line:-2
this time between the cache
and the origin.


25
00:01:24,885 --> 00:01:27,988 line:-1
That is a significant win for global CDNs,


26
00:01:28,422 --> 00:01:31,191 line:-2
because the round trip there
between the edge and the origin


27
00:01:31,258 --> 00:01:33,827 line:-1
can easily exceed 100 milliseconds.


28
00:01:33,894 --> 00:01:38,165 line:-2
So let's take a look at how it works
in Low-Latency HLS.


29
00:01:38,632 --> 00:01:43,170 line:-2
In Low-Latency HLS, every playlist
must carry a Preload Hint tag


30
00:01:43,237 --> 00:01:45,539 line:-2
that has the URL
of the next Partial Segment


31
00:01:45,606 --> 00:01:47,407 line:-1
that the packager expects to appear.


32
00:01:48,175 --> 00:01:49,877 line:-1
When the client gets that playlist,


33
00:01:49,943 --> 00:01:53,580 line:-2
it will turn around
and ask for that hinted URL.


34
00:01:53,647 --> 00:01:58,252 line:-2
The server then holds onto that request
until that Partial Segment is available


35
00:01:58,318 --> 00:02:00,354 line:-1
and then sends it to the client.


36
00:02:01,088 --> 00:02:06,393 line:-2
Now, normally the client also has
a Blocking Playlist Reload pending request


37
00:02:06,460 --> 00:02:07,895 line:-1
at the same time,


38
00:02:07,961 --> 00:02:11,398 line:-2
which will unblock at about the same time
as the hint request.


39
00:02:12,032 --> 00:02:15,402 line:-2
So the client will generally
see them both arrive at the same time.


40
00:02:15,869 --> 00:02:19,907 line:0
Preload hints are also used
to signal upcoming MAP tags


41
00:02:19,973 --> 00:02:23,510 line:-2
so that the client can get a jump
on content transitions,


42
00:02:23,577 --> 00:02:25,445 line:-1
such as at AD boundaries.


43
00:02:26,413 --> 00:02:29,583 line:-2
So to recap,
here is the request flow for hinting.


44
00:02:30,484 --> 00:02:35,389 line:-2
Here we have an HLS client on the left
and a server on the right.


45
00:02:35,956 --> 00:02:40,727 line:-2
First, the client issues a Blocking
Playlist Reload request for the next part.


46
00:02:41,161 --> 00:02:42,996 line:-1
That blocks on the server,


47
00:02:43,063 --> 00:02:46,400 line:-2
and the client issues a request
for the hinted partial segment,


48
00:02:46,466 --> 00:02:50,237 line:-2
which also blocks because
that partial segment isn't there yet.


49
00:02:50,304 --> 00:02:54,842 line:-2
Eventually the server will finish encoding
and packaging the partial segment,


50
00:02:55,475 --> 00:02:58,312 line:-2
and it will unblock the response
for the hint request.


51
00:02:58,378 --> 00:03:03,383 line:-2
At the same time, it will add
the new Partial Segment to the playlist


52
00:03:03,450 --> 00:03:05,853 line:-1
and unblock the playlist update as well.


53
00:03:05,919 --> 00:03:07,788 line:-1
So that's the request flow.


54
00:03:07,855 --> 00:03:11,124 line:-2
Let's take a look at how it looks
in the playlist syntax.


55
00:03:12,259 --> 00:03:15,996 line:-2
Here we have a Low-Latency playlist
with one-second parts.


56
00:03:16,797 --> 00:03:21,969 line:-2
That last part at the bottom in green
is called "part1.1.m4s."


57
00:03:22,803 --> 00:03:25,839 line:-1
Beneath that, there is a Preload Hint tag


58
00:03:25,906 --> 00:03:30,410 line:-2
saying that the next part the client
can try to load is "part1.2."


59
00:03:30,878 --> 00:03:34,114 line:-2
And so that's the mechanism
for the client issuing a preload hint.


60
00:03:34,982 --> 00:03:39,453 line:-2
Now, in this case,
every Partial Segment has its own URL.


61
00:03:39,520 --> 00:03:45,425 line:-2
But a Partial Segment can alternately be
a byte-range of a larger resource.


62
00:03:45,492 --> 00:03:47,828 line:-2
And so how does preload hinting
work for those?


63
00:03:48,762 --> 00:03:53,300 line:-2
The Preload Hint tag can optionally
include the start of the byte-range


64
00:03:53,367 --> 00:03:55,536 line:-1
and the length of the Partial Segment.


65
00:03:55,602 --> 00:03:58,939 line:-2
The length is omitted if we don't know
it when the hint is published.


66
00:03:59,006 --> 00:04:01,441 line:-1
So one way that can look is like this,


67
00:04:02,309 --> 00:04:07,681 line:-2
where we're hinting the range
from zero to 4,044 of segment 23.


68
00:04:08,348 --> 00:04:13,187 line:-2
But you can alternately hint the client
to load more than one Partial Segment


69
00:04:13,253 --> 00:04:14,721 line:-1
in a single request.


70
00:04:14,788 --> 00:04:17,891 line:-2
You can do that with an open-ended
preload hint like this one.


71
00:04:17,958 --> 00:04:22,229 line:-2
And this is actually a good excuse
to talk about CMAF Chunks.


72
00:04:22,296 --> 00:04:26,667 line:-2
Chunks are essentially what CMAF calls
fMP4 Fragments


73
00:04:26,733 --> 00:04:28,735 line:-1
that can be transferred individually.


74
00:04:29,636 --> 00:04:34,408 line:-2
Where byte-ranges come into play is that
one way to deliver Partial Segments


75
00:04:34,474 --> 00:04:37,544 line:-2
is to progressively append them
to their parent segments


76
00:04:37,611 --> 00:04:41,114 line:-2
and have the client make one request
for the parent segment URL


77
00:04:41,181 --> 00:04:44,718 line:-2
to get every Partial Segment
as it becomes available.


78
00:04:46,119 --> 00:04:49,957 line:-2
Doing it this way does require you
to use Chunk Transfer Encoding


79
00:04:50,023 --> 00:04:51,892 line:-1
between the server and the client.


80
00:04:51,959 --> 00:04:54,461 line:-1
And the caveat here is that many CDNs


81
00:04:54,528 --> 00:04:58,966 line:-2
don't actually support Chunk Transfer
Encoding for live content delivery.


82
00:04:59,032 --> 00:05:01,502 line:-1
But if you have a CDN that does,


83
00:05:01,568 --> 00:05:04,771 line:-2
then the benefit you get
is that you can use the same media


84
00:05:04,838 --> 00:05:07,808 line:-2
that you're serving to
your Low-Latency HLS clients


85
00:05:07,875 --> 00:05:10,644 line:-1
to serve the Latency Dash as well.


86
00:05:11,178 --> 00:05:12,479 line:-1
Let's see how that works.


87
00:05:12,546 --> 00:05:16,517 line:-2
First,
every resource URL is a Parent Segment.


88
00:05:17,050 --> 00:05:21,154 line:-2
The Parent Segment is going to be made up
of multiple CMAF Chunks.


89
00:05:22,055 --> 00:05:27,094 line:-2
Then, for Low-Latency HLS, each Chunk
would be mapped to a Partial Segment.


90
00:05:27,160 --> 00:05:31,632 line:-2
They get specified with
a Parent Segment URL and a byte-range.


91
00:05:32,032 --> 00:05:35,269 line:-2
Here's how a Partial Segment
might be declared in a Playlist


92
00:05:35,335 --> 00:05:38,739 line:-1
as a Part tag with a URL and a byte-range.


93
00:05:40,073 --> 00:05:44,611 line:-2
So that's how CMAF Chunks show up
as Partial Segments in a playlist.


94
00:05:44,678 --> 00:05:46,713 line:-1
Now, how does preload hinting work?


95
00:05:47,381 --> 00:05:49,349 line:-1
The Preload Hint tag in this case


96
00:05:49,416 --> 00:05:52,419 line:-2
will just contain the URL
of the parent segment.


97
00:05:53,053 --> 00:05:55,722 line:-1
And that Preload Hint tag will get updated


98
00:05:55,789 --> 00:05:58,625 line:-2
every time the server moves
to a new parent segment.


99
00:06:00,194 --> 00:06:03,363 line:-2
Every time it finishes appending
a new CMAF Chunk,


100
00:06:03,430 --> 00:06:07,601 line:-2
it will update the byte-range
start attribute of the Preload Hint tag


101
00:06:07,668 --> 00:06:09,570 line:-1
to point to the end of the new Chunk.


102
00:06:09,636 --> 00:06:11,004 line:-1
Because remember,


103
00:06:11,071 --> 00:06:14,842 line:-2
this tag's hinting the next
Partial Segment here, not the current one.


104
00:06:15,442 --> 00:06:17,778 line:-1
And we leave off the byte-range length


105
00:06:17,845 --> 00:06:20,280 line:-2
because at this point
we don't actually have it.


106
00:06:21,215 --> 00:06:22,216 line:-1
At that point,


107
00:06:22,282 --> 00:06:25,953 line:-2
every time the client sees a new
Preload Hint URL appear in the playlist,


108
00:06:26,019 --> 00:06:28,322 line:-1
it will issue a GET request for it.


109
00:06:28,388 --> 00:06:31,491 line:0
And every time a new Chunk
finishes being appended,


110
00:06:31,558 --> 00:06:35,929 line:0
the server will send that byte-range
to the client via Chunk Transfer Encoding


111
00:06:35,996 --> 00:06:41,268 line:0
and the client will harvest every Partial
Segment out of that single HTTP request.


112
00:06:41,668 --> 00:06:43,136 line:-1
Let's look at an example.


113
00:06:44,071 --> 00:06:47,608 line:-2
Here we have a playlist
with one-second parts.


114
00:06:47,674 --> 00:06:51,578 line:-2
You can see that the Partial Segments
above segment zero


115
00:06:51,645 --> 00:06:55,082 line:-2
are actually expressed in byte-ranges
of segment zero


116
00:06:55,148 --> 00:06:58,585 line:-2
and that the Preload Hint tag
at the bottom


117
00:06:58,652 --> 00:07:01,989 line:-2
tells the client to start loading
segment 1 at offset zero.


118
00:07:03,257 --> 00:07:04,691 line:-1
One second later,


119
00:07:04,758 --> 00:07:07,594 line:-2
the playlist gets updated,
and now there's a new Partial Segment.


120
00:07:07,661 --> 00:07:11,865 line:-2
And sure enough, it's declared
as the first 3,000 bytes of segment 1.


121
00:07:12,900 --> 00:07:16,837 line:-2
In addition, the Preload Hint tag
has been updated to say


122
00:07:16,904 --> 00:07:20,440 line:-2
that the next Partial Segment
will start at offset 3,000.


123
00:07:21,008 --> 00:07:22,976 line:-1
So one second after that,


124
00:07:23,810 --> 00:07:25,579 line:-1
the playlist updates again.


125
00:07:25,646 --> 00:07:30,717 line:-2
And now there is a second part, specified
as a new byte-rate range of segment 1,


126
00:07:30,784 --> 00:07:34,421 line:-2
and the Hint says that the next part
will start at offset 8,000.


127
00:07:34,888 --> 00:07:38,992 line:-2
And so we repeat this pattern.
We hint a part and then we add it.


128
00:07:39,560 --> 00:07:41,461 line:-1
So that's how preload hinting works.


129
00:07:42,162 --> 00:07:45,499 line:-2
But before we finish talking about it,
there are a few more things to know.


130
00:07:45,999 --> 00:07:50,170 line:-2
First, it is legal
for a server to change its plan


131
00:07:50,237 --> 00:07:53,273 line:-1
after it publishes a Preload Hint tag,


132
00:07:53,340 --> 00:07:55,309 line:-1
and the most common reason for this


133
00:07:55,375 --> 00:07:59,213 line:-2
is when an operator decides that they
actually want to return early from an ad,


134
00:07:59,279 --> 00:08:01,682 line:-1
so they change their mind halfway through.


135
00:08:01,748 --> 00:08:04,651 line:-2
In that case,
the next time the playlist updates,


136
00:08:04,718 --> 00:08:07,554 line:-2
the client will notice
that the previously hinted URL


137
00:08:07,621 --> 00:08:09,423 line:-1
no longer appears in the playlist,


138
00:08:09,489 --> 00:08:11,992 line:-2
and so it will cancel
its pending hint request


139
00:08:12,059 --> 00:08:15,095 line:-2
and switch to loading
whatever it finds in the playlist now.


140
00:08:15,462 --> 00:08:19,600 line:-2
The other thing to know is that
hint requests for prerecorded content,


141
00:08:19,666 --> 00:08:23,470 line:-2
such as ads, can be served right away
without blocking.


142
00:08:23,537 --> 00:08:25,606 line:-1
So that's in contrast to live content,


143
00:08:25,672 --> 00:08:28,242 line:-2
where you have to wait
for the entire thing to be encoded


144
00:08:28,308 --> 00:08:30,143 line:-1
before you can put it on the server.


145
00:08:30,210 --> 00:08:32,913 line:0
We've got a separate session
that goes into more detail


146
00:08:32,980 --> 00:08:35,482 line:0
around serving ads for Low-Latency HLS.


147
00:08:35,982 --> 00:08:39,219 line:-2
But for right now, let's wrap up
our discussion of preload hinting.


148
00:08:39,785 --> 00:08:41,087 line:-1
So in summary,


149
00:08:41,154 --> 00:08:45,058 line:-2
preload hinting is where clients ask
for the next Partial Segment in advance,


150
00:08:45,125 --> 00:08:48,929 line:-2
and that gets the part
flowing to the client as soon as possible.


151
00:08:48,996 --> 00:08:52,065 line:-2
A server can either hint
an entire resource


152
00:08:52,132 --> 00:08:53,967 line:-1
or individual byte-ranges,


153
00:08:54,034 --> 00:08:59,339 line:-2
and that enables Chunk Transfer delivery
of CMAF segments and interoperability


154
00:08:59,406 --> 00:09:01,408 line:-1
with Low-Latency DASH.


155
00:09:01,475 --> 00:09:06,246 line:-2
Preload hinting is an important part of
optimizing the entire delivery pipeline,


156
00:09:06,313 --> 00:09:09,550 line:-2
which is why they are required
by Low-Latency HLS.


157
00:09:09,950 --> 00:09:13,820 line:-2
I hope this gives you a good idea of
what preload hinting is and how it works,


158
00:09:13,887 --> 00:09:17,257 line:-2
and that it helps you to deploy
Low-Latency HLS.


159
00:09:17,324 --> 00:09:18,392 line:-1
Thank you very much.

