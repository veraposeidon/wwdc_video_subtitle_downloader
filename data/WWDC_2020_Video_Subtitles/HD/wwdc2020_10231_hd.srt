1
00:00:03,670 --> 00:00:06,673 line:-1
Hello, and welcome to WWDC.


2
00:00:08,809 --> 00:00:12,246 line:0
Hello and welcome to this year's WWDC.


3
00:00:12,312 --> 00:00:14,348 line:0
My name is Roger Pantos,


4
00:00:14,414 --> 00:00:19,319 line:0
and I'm going to tell you about
HLS Blocking Playlist Reload.


5
00:00:19,953 --> 00:00:22,823 line:-2
To start with,
what is Blocking Playlist Reload?


6
00:00:23,490 --> 00:00:26,493 line:-1
Well, a fundamental aspect of HLS


7
00:00:26,560 --> 00:00:30,063 line:-2
is that clients are discovering
new segments constantly


8
00:00:30,130 --> 00:00:32,266 line:-1
by reloading the Playlist.


9
00:00:32,332 --> 00:00:36,270 line:-2
The original approach was just to
reload the same Playlist URL


10
00:00:36,336 --> 00:00:38,038 line:-1
every Target Duration.


11
00:00:38,105 --> 00:00:42,609 line:-2
Now, that's nice and simple,
but it doesn't work well with Low-Latency.


12
00:00:42,676 --> 00:00:45,445 line:-2
Because if a client
just misses a Playlist update,


13
00:00:45,512 --> 00:00:49,183 line:-2
it'll take another Target Duration
before it finally notices it.


14
00:00:50,050 --> 00:00:52,419 line:-1
And so, for Low-Latency HLS


15
00:00:52,486 --> 00:00:56,056 line:-2
we introduced the notion
of Delivery Directives,


16
00:00:56,123 --> 00:00:58,392 line:-2
which are a way for the client
to ask the server


17
00:00:58,458 --> 00:01:00,794 line:-1
to perform some kind of service for it


18
00:01:00,861 --> 00:01:04,063 line:-2
by adding query parameters
to its get requests.


19
00:01:04,131 --> 00:01:06,300 line:-1
For Blocking Playlist Reload,


20
00:01:06,366 --> 00:01:09,870 line:-2
clients can use a Delivery Directive
to tell the server,


21
00:01:09,937 --> 00:01:14,174 line:-2
hold on to this Playlist request
until the Playlist you see


22
00:01:14,241 --> 00:01:17,044 line:-2
contains a segment
that I haven't seen yet.


23
00:01:18,579 --> 00:01:21,215 line:0
Once that Playlist updates
with that segment,


24
00:01:21,281 --> 00:01:24,618 line:0
the server will unblock
and send it to the client.


25
00:01:24,685 --> 00:01:27,120 line:0
So let's take a look
at how that works in detail.


26
00:01:27,821 --> 00:01:31,091 line:-2
First of all,
Blocking Playlist Reloads are optional,


27
00:01:31,158 --> 00:01:34,461 line:-2
so the server needs to indicate
that it supports them.


28
00:01:34,962 --> 00:01:38,699 line:-2
And it does that by adding
a CAN-BLOCK-RELOAD attribute


29
00:01:38,765 --> 00:01:40,801 line:-1
to its server control tag.


30
00:01:40,868 --> 00:01:44,605 line:-2
Next, a client will load a Playlist
for the first time.


31
00:01:44,671 --> 00:01:46,773 line:-1
It doesn't supply any query parameters


32
00:01:46,840 --> 00:01:50,577 line:-2
because at this point it just wants
whatever's current on the server.


33
00:01:51,879 --> 00:01:54,748 line:-2
As soon as it gets the Playlist,
it will immediately turn around


34
00:01:54,815 --> 00:01:56,483 line:-1
and issue a reload request.


35
00:01:56,550 --> 00:02:00,921 line:-2
And now it will use
the HLS_msn Delivery Directive


36
00:02:00,988 --> 00:02:04,825 line:-2
to specify the first new segment
that it hasn't seen yet.


37
00:02:04,892 --> 00:02:06,927 line:-1
And if it's a Low-Latency Playlist,


38
00:02:06,994 --> 00:02:11,698 line:-2
then it will also specify the next
Partial Segment that it expects to see.


39
00:02:12,966 --> 00:02:15,302 line:-2
The server will then
hold on to that request


40
00:02:15,369 --> 00:02:17,905 line:-1
until it has a Playlist that's new enough.


41
00:02:17,971 --> 00:02:19,973 line:-1
Now let's see how that looks graphically.


42
00:02:20,574 --> 00:02:24,511 line:-2
Here we have an HLS client to the left
and a server to the right.


43
00:02:24,578 --> 00:02:29,183 line:-2
The client asks for a Playlist that
contains Partial Segment 2, for example.


44
00:02:29,249 --> 00:02:33,487 line:-2
The server doesn't have
Partial Segment 2 yet, so it blocks.


45
00:02:33,554 --> 00:02:35,889 line:-1
Eventually Partial Segment 2 will appear


46
00:02:35,956 --> 00:02:37,858 line:-2
and will get added
to the Playlist.


47
00:02:37,925 --> 00:02:40,827 line:0
Now the server can unblock
the client request


48
00:02:40,894 --> 00:02:43,897 line:0
and send it the updated Playlist
as the response.


49
00:02:43,964 --> 00:02:46,333 line:-1
Let's take a look at an actual example.


50
00:02:46,400 --> 00:02:49,636 line:-2
We'll start with a regular Playlist,
not a Low-Latency one.


51
00:02:50,571 --> 00:02:53,974 line:-1
Here is a regular live HLS Playlist.


52
00:02:54,041 --> 00:02:57,444 line:-2
The first thing to notice
is that the server is advertising


53
00:02:57,511 --> 00:03:02,149 line:-2
that it supports Blocking Playlist Reload
in its server control tag.


54
00:03:02,216 --> 00:03:05,252 line:-1
Next, the Media Sequence Number is 19,


55
00:03:05,319 --> 00:03:09,256 line:-2
and that refers to the first segment
in the Playlist, which here is Segment A.


56
00:03:10,123 --> 00:03:14,595 line:-2
Now, if you count four segments down,
all the way to the bottom to Segment E,


57
00:03:14,661 --> 00:03:18,365 line:-2
you'll see that it has
a Media Sequence Number of 23,


58
00:03:18,432 --> 00:03:23,604 line:-2
and that means that the next time
a Playlist is updated with a new segment,


59
00:03:23,670 --> 00:03:26,874 line:-2
that new segment
will be Media Sequence Number 24.


60
00:03:26,940 --> 00:03:28,642 line:-1
So to ask for that update,


61
00:03:28,709 --> 00:03:34,748 line:-2
the client will use
the HLS_msn=24 Delivery Directive.


62
00:03:34,815 --> 00:03:37,651 line:-2
When it receives this request,
the server will block


63
00:03:37,718 --> 00:03:40,320 line:-1
until the Playlist is updated,


64
00:03:40,387 --> 00:03:44,224 line:-2
and then it will return
the newer version of the Playlist.


65
00:03:44,291 --> 00:03:46,994 line:0
And at the end, it now contains Segment F,


66
00:03:47,060 --> 00:03:50,364 line:0
also known as Media Sequence Number 24.


67
00:03:50,998 --> 00:03:53,166 line:-2
So that's the flow
of Blocking Playlist Reload


68
00:03:53,233 --> 00:03:54,568 line:-1
for regular segments.


69
00:03:54,635 --> 00:03:57,371 line:-2
Now let's see what happens
for Low-Latency.


70
00:03:58,038 --> 00:04:01,041 line:-2
In this example, we'll see
how the client asks for the next Playlist


71
00:04:01,108 --> 00:04:03,443 line:-1
when it contains partial segments as well.


72
00:04:03,977 --> 00:04:07,247 line:-2
So, here we have
a live Low-Latency Playlist.


73
00:04:07,314 --> 00:04:10,384 line:-2
You can see that the segments
have a Target Duration of six seconds,


74
00:04:10,450 --> 00:04:14,922 line:-2
while the partial segments have
a part Target Duration of two seconds.


75
00:04:14,988 --> 00:04:18,759 line:-2
At the end of the Playlist
are the first two parts of Segment 7--


76
00:04:18,825 --> 00:04:20,961 line:-1
part zero and part 1.


77
00:04:21,028 --> 00:04:26,400 line:0
Given that the last thing in this Playlist
right now is Media Sequence 7 part 1,


78
00:04:26,466 --> 00:04:29,136 line:0
to get the next Playlist
the client will need to ask


79
00:04:29,203 --> 00:04:31,405 line:0
for Media Sequence 7 part 2.


80
00:04:31,471 --> 00:04:33,941 line:0
And so that request looks like this:


81
00:04:35,008 --> 00:04:38,612 line:-2
The server will hold on to it
until the Playlist updates again


82
00:04:38,679 --> 00:04:41,215 line:-1
and then send back this response.


83
00:04:41,281 --> 00:04:44,017 line:0
And now we can see
that there's a new partial segment


84
00:04:44,084 --> 00:04:46,920 line:0
which has Media Sequence Number 7 part 2.


85
00:04:46,987 --> 00:04:48,789 line:-1
Now, you may be wondering,


86
00:04:48,856 --> 00:04:51,024 line:-2
if the client is always asking
for the next part


87
00:04:51,091 --> 00:04:52,926 line:-1
of the current media sequence number,


88
00:04:52,993 --> 00:04:55,162 line:-1
what happens at the end of the segment?


89
00:04:55,229 --> 00:04:57,064 line:-2
Well, let's go back
to our earlier Playlist.


90
00:04:57,631 --> 00:05:02,836 line:0
Here the next Playlist request
will be for Segment 7 part 3.


91
00:05:02,903 --> 00:05:06,106 line:-2
Now, the server will translate
any request for a part


92
00:05:06,173 --> 00:05:09,209 line:-2
that goes beyond the end
of the parent segment


93
00:05:09,276 --> 00:05:13,013 line:-2
into a request for part zero
of the segment that follows it.


94
00:05:13,080 --> 00:05:17,885 line:0
So in this case the server will block
until it returns this Playlist,


95
00:05:17,951 --> 00:05:22,689 line:0
where it now contains
part zero of segment 8 at the end.


96
00:05:22,756 --> 00:05:26,560 line:-2
There are a few other exceptional cases to
know about for Blocking Playlist Reload.


97
00:05:27,361 --> 00:05:31,265 line:-2
First, the Media Sequence Number
and part Delivery Directives


98
00:05:31,331 --> 00:05:33,267 line:-1
only apply for live Playlists.


99
00:05:33,333 --> 00:05:36,436 line:-2
That means they're ignored
if a Playlist has an ENDLIST tag.


100
00:05:36,503 --> 00:05:39,606 line:-2
Next, if a client asks
for a particular Playlist update


101
00:05:39,673 --> 00:05:41,408 line:-1
and the server already has it,


102
00:05:41,475 --> 00:05:43,977 line:-1
it returns the latest Playlist right away.


103
00:05:44,044 --> 00:05:47,981 line:-2
That's also true even if the Playlist is
newer than what the client has asked for,


104
00:05:48,048 --> 00:05:50,851 line:-2
if it's advanced ahead
by a couple of Partial Segments.


105
00:05:50,918 --> 00:05:53,820 line:-2
And in fact,
to take it to the greatest extreme,


106
00:05:53,887 --> 00:05:55,589 line:-1
if the segment the client asks for


107
00:05:55,656 --> 00:05:58,125 line:-2
has already rolled out
of the Playlist completely,


108
00:05:58,192 --> 00:06:01,962 line:-2
the server will still unblock immediately
and return the current Playlist.


109
00:06:02,029 --> 00:06:05,799 line:-2
The rule is that the origin always returns
to the current version of the Playlist


110
00:06:05,866 --> 00:06:07,868 line:-1
as long as it's new enough.


111
00:06:07,935 --> 00:06:11,672 line:-2
Finally, if the server has to wait
too long for the Playlist to update--


112
00:06:11,738 --> 00:06:13,740 line:-2
if it has to wait
more than three Target Durations--


113
00:06:13,807 --> 00:06:15,442 line:-1
it will return an error.


114
00:06:15,509 --> 00:06:17,678 line:-2
Now, that should only happen
if there's a serious problem


115
00:06:17,744 --> 00:06:19,012 line:-1
with the back-end production.


116
00:06:19,780 --> 00:06:21,882 line:-1
Another interesting area to talk about


117
00:06:21,949 --> 00:06:27,487 line:-2
is how Blocking Playlist Reload
interacts with CDNs and other HTTP caches.


118
00:06:27,554 --> 00:06:30,490 line:-2
The good news here
is that Blocking Playlist Reload


119
00:06:30,557 --> 00:06:34,494 line:-2
actually works a lot better with caches
even than traditional live HLS.


120
00:06:34,561 --> 00:06:37,931 line:-2
A big reason for that
is having a unique URL


121
00:06:37,998 --> 00:06:40,133 line:-1
for each individual Playlist update


122
00:06:40,200 --> 00:06:43,604 line:-2
allows each request
to be cached independently.


123
00:06:43,670 --> 00:06:48,108 line:-2
So the update request and response
for MSN 23, for example,


124
00:06:48,175 --> 00:06:49,843 line:-1
can live in the same cache


125
00:06:49,910 --> 00:06:53,413 line:-2
alongside the request and response
for MSN 24.


126
00:06:53,981 --> 00:06:56,783 line:-2
Now, this has a couple
of useful consequences.


127
00:06:56,850 --> 00:07:00,821 line:-2
First, a new request will effectively
bust through the cache


128
00:07:00,888 --> 00:07:03,824 line:-2
because it will present
a combination of query parameters


129
00:07:03,891 --> 00:07:05,626 line:-1
that the cache has never seen before,


130
00:07:05,692 --> 00:07:09,396 line:-2
so the cache knows to send the request
right along to the origin.


131
00:07:09,463 --> 00:07:14,668 line:-2
Second, each response has
a longer useful lifetime in the cache


132
00:07:14,735 --> 00:07:16,770 line:-2
because it doesn't have to
compete with itself.


133
00:07:16,837 --> 00:07:19,673 line:-2
You no longer have to expire
every Playlist response


134
00:07:19,740 --> 00:07:21,241 line:-1
in a half-Target Duration,


135
00:07:21,308 --> 00:07:24,278 line:-2
the way you do
with regular live HLS Playlists.


136
00:07:24,344 --> 00:07:27,981 line:-2
And in fact, we recommend
a lifetime of six Target Durations


137
00:07:28,048 --> 00:07:31,084 line:-1
for successful Playlist responses.


138
00:07:31,151 --> 00:07:34,421 line:-2
The other thing worth saying
is that with Blocking Playlist Reload


139
00:07:34,488 --> 00:07:36,290 line:-1
and other Delivery Directives,


140
00:07:36,356 --> 00:07:40,394 line:-2
you have to configure your CDN
to coalesce duplicate edge requests


141
00:07:40,460 --> 00:07:42,796 line:-1
into a single request to the origin,


142
00:07:42,863 --> 00:07:45,098 line:-1
because when you have an active origin


143
00:07:45,165 --> 00:07:48,702 line:-2
you'll want to do everything you can
to help reduce its load.


144
00:07:48,769 --> 00:07:51,939 line:-1
So, to summarize Blocking Playlist Reload,


145
00:07:52,005 --> 00:07:54,241 line:-1
it's a new mechanism in HLS


146
00:07:54,308 --> 00:07:56,543 line:-2
that allows clients
to discover new segments


147
00:07:56,610 --> 00:07:59,413 line:-2
as soon as they become available
on the server.


148
00:08:00,047 --> 00:08:05,152 line:-2
Clients request them by using
the msn and part Delivery Directives.


149
00:08:06,153 --> 00:08:09,389 line:-2
Blocking Playlist Reload
works better with CDNs,


150
00:08:09,456 --> 00:08:12,926 line:-2
both in a positive sense
of enabling more caching


151
00:08:12,993 --> 00:08:16,530 line:-2
and also in the negative sense
of explicitly busting that cache


152
00:08:16,597 --> 00:08:18,198 line:-1
for new requests.


153
00:08:18,265 --> 00:08:21,768 line:-2
This helps out
with regular live HLS streams


154
00:08:21,835 --> 00:08:24,972 line:0
and it's required for Low-Latency streams.


155
00:08:25,038 --> 00:08:28,041 line:0
We encourage you to adopt
Blocking Playlist Reload


156
00:08:28,108 --> 00:08:31,211 line:0
to improve the delivery of HLS
to your users.


157
00:08:31,278 --> 00:08:32,346 line:0
Thank you very much.

