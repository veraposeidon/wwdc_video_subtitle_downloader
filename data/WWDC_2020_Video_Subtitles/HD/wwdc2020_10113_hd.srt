1
00:00:03,804 --> 00:00:06,440 line:-1
Hello and welcome to WWDC.


2
00:00:08,809 --> 00:00:10,911 line:0
Hello. My name is Paresh Sawant


3
00:00:10,978 --> 00:00:15,282 line:0
and I'm going to talk about the new
Local Push Connectivity API in iOS 14.


4
00:00:15,349 --> 00:00:18,952 line:-2
Push notifications are great
for keeping your app users informed


5
00:00:19,019 --> 00:00:20,888 line:-1
with timely and relevant content.


6
00:00:20,954 --> 00:00:21,955 line:-1
However,


7
00:00:22,022 --> 00:00:25,759 line:-2
delivery of push notification relies
on Apple's push notification service,


8
00:00:25,826 --> 00:00:29,296 line:-2
which is only available
when devices have an Internet connection.


9
00:00:29,730 --> 00:00:31,632 line:-1
We received feedback from some of you


10
00:00:31,698 --> 00:00:34,835 line:-2
that the ability to receive messages
from your application server


11
00:00:34,902 --> 00:00:37,337 line:-2
is a critical part
of your app's functionality


12
00:00:37,404 --> 00:00:40,674 line:-2
and must continue to work
even when there is no Internet connection.


13
00:00:41,074 --> 00:00:43,310 line:-1
To meet this requirement for your apps,


14
00:00:43,377 --> 00:00:46,213 line:-1
we have added a new API in iOS 14


15
00:00:46,280 --> 00:00:49,316 line:-2
that allows you to create
your own push connectivity service


16
00:00:49,383 --> 00:00:51,251 line:-1
that works on Wi-Fi networks.


17
00:00:51,318 --> 00:00:54,621 line:-2
I will start out
with a recap of Apple push notifications,


18
00:00:54,688 --> 00:00:58,158 line:-2
then I will talk about how to build
a custom push notification service


19
00:00:58,225 --> 00:00:59,560 line:-1
using the new API.


20
00:01:00,093 --> 00:01:03,130 line:-2
Later, I will demo this new feature
using the sample app,


21
00:01:03,197 --> 00:01:06,366 line:-2
and then I will head over to the details
of using the new API.


22
00:01:06,433 --> 00:01:08,202 line:-1
So, let's get started.


23
00:01:09,002 --> 00:01:12,472 line:-2
I'm sure many of you
are familiar with push notifications.


24
00:01:12,539 --> 00:01:16,910 line:-2
Many apps use push notifications
for news alerts, sports updates,


25
00:01:16,977 --> 00:01:20,113 line:-2
instant messaging,
receiving VoIP calls and many more.


26
00:01:20,180 --> 00:01:22,049 line:-1
Let's review how it works.


27
00:01:22,115 --> 00:01:25,219 line:-2
Your provider server
sends a push notification request


28
00:01:25,285 --> 00:01:29,223 line:-2
to the Apple Push Notification service,
also known as APNs.


29
00:01:29,289 --> 00:01:34,061 line:-2
APNs conveys corresponding notification
payloads to each targeted device.


30
00:01:34,127 --> 00:01:35,829 line:-1
On receipt of a notification,


31
00:01:35,896 --> 00:01:39,299 line:-2
the system delivers the payload
to the appropriate app on the device.


32
00:01:40,067 --> 00:01:41,802 line:-1
Depending on the notification type,


33
00:01:41,869 --> 00:01:45,339 line:-2
your app uses either PushKit
or the UserNotifications framework


34
00:01:45,405 --> 00:01:46,807 line:-1
to receive the payload.


35
00:01:46,874 --> 00:01:49,943 line:-2
APNs is the centerpiece
of the push notification feature.


36
00:01:50,444 --> 00:01:53,480 line:-2
Push notifications
is the right solution for your apps


37
00:01:53,547 --> 00:01:57,251 line:-2
when used on networks that have
APNs connectivity or the Internet.


38
00:01:57,317 --> 00:01:58,452 line:-1
It's very optimal


39
00:01:58,519 --> 00:02:02,422 line:-2
since it implements a single connection
between the device and the APNs


40
00:02:02,489 --> 00:02:05,592 line:-2
to deliver the notifications to all apps
on the device.


41
00:02:06,059 --> 00:02:09,763 line:-2
Push notification offers
the desired user experience in your apps,


42
00:02:09,830 --> 00:02:13,300 line:-2
and most importantly,
it is very energy efficient.


43
00:02:13,367 --> 00:02:16,270 line:-2
So, developers should prefer
either PushKit


44
00:02:16,336 --> 00:02:17,971 line:-1
or the UserNotifications framework


45
00:02:18,038 --> 00:02:20,707 line:-2
to handle notifications originated
from their servers.


46
00:02:20,774 --> 00:02:21,808 line:-1
However,


47
00:02:21,875 --> 00:02:26,880 line:-2
if your app is used in network
environments where APNs cannot be reached,


48
00:02:26,947 --> 00:02:29,283 line:-2
the app cannot receive
these notifications.


49
00:02:29,850 --> 00:02:30,851 line:-1
For example,


50
00:02:30,918 --> 00:02:34,755 line:-2
places like cruise ships,
airlines, camping sites or hospitals


51
00:02:34,821 --> 00:02:37,925 line:-1
may have limited or no APNs connectivity.


52
00:02:37,991 --> 00:02:42,329 line:-2
The push notifications feature of your app
can get impaired in such conditions.


53
00:02:42,396 --> 00:02:44,831 line:-2
Push notifications play
a very important role


54
00:02:44,898 --> 00:02:47,201 line:-1
in providing users with timely information


55
00:02:47,267 --> 00:02:50,671 line:-2
and give them the ability
to take appropriate actions in response.


56
00:02:50,737 --> 00:02:54,341 line:-2
So, it's very important
to keep push notifications functional


57
00:02:54,408 --> 00:02:58,579 line:-2
even in constrained network environments
when it matters most to the users.


58
00:02:58,645 --> 00:03:02,516 line:-2
Local Push Connectivity is a solution
that is designed to solve this problem.


59
00:03:02,583 --> 00:03:06,687 line:-2
And we have added
the Local Push Connectivity API in iOS 14.


60
00:03:06,753 --> 00:03:10,390 line:-2
This is new member
in the NetworkExtension family of APIs.


61
00:03:10,457 --> 00:03:11,792 line:-1
Let's see how it works.


62
00:03:12,593 --> 00:03:15,796 line:-2
With the help of this new API,
you can build an app extension


63
00:03:15,863 --> 00:03:20,133 line:-2
that can directly communicate with your
provider server on a local Wi-Fi network.


64
00:03:20,200 --> 00:03:23,937 line:-2
Since there is no APNs,
you need to define your own protocol


65
00:03:24,004 --> 00:03:28,242 line:-2
between the provider server and the app
extension to deliver the notifications.


66
00:03:28,308 --> 00:03:31,178 line:-1
Your app must specify the Wi-Fi networks


67
00:03:31,245 --> 00:03:35,516 line:-2
where you wish to enable Local
Push Connectivity for your app users.


68
00:03:35,582 --> 00:03:37,251 line:-1
The system starts the app extension


69
00:03:37,317 --> 00:03:40,053 line:-2
when the device joins
the specified Wi-Fi networks.


70
00:03:40,120 --> 00:03:43,690 line:-2
The app extension is responsible
for maintaining a network connection


71
00:03:43,757 --> 00:03:46,693 line:-2
with the provider server
and receiving the notifications.


72
00:03:46,760 --> 00:03:49,229 line:-2
The app extension continues to run
in the background


73
00:03:49,296 --> 00:03:53,433 line:-2
as long as the device is associated
to the specified Wi-Fi networks.


74
00:03:53,500 --> 00:03:55,302 line:-1
The system stops the app extension


75
00:03:55,369 --> 00:03:58,739 line:-2
when the device loses connection
to the specified Wi-Fi networks.


76
00:03:58,805 --> 00:04:02,676 line:-2
Now, since we know about
the new Local Push Connectivity API,


77
00:04:02,743 --> 00:04:05,946 line:-2
and also we reviewed
the standard push notifications,


78
00:04:06,013 --> 00:04:07,381 line:-1
I would like to talk about


79
00:04:07,447 --> 00:04:10,984 line:-2
general guidelines on selecting
the right API for your apps.


80
00:04:11,051 --> 00:04:14,821 line:-2
You should prefer either PushKit
or the UserNotifications framework


81
00:04:14,888 --> 00:04:17,324 line:-2
for your general
push notifications requirements.


82
00:04:18,091 --> 00:04:20,427 line:-2
The Local Push Connectivity API
is designed


83
00:04:20,494 --> 00:04:23,597 line:-2
for a small set
of very specific use cases.


84
00:04:23,664 --> 00:04:27,634 line:-2
The use cases are mainly defined
by limitations in network environments


85
00:04:27,701 --> 00:04:30,204 line:-2
and users' requirements
in those environments.


86
00:04:30,838 --> 00:04:33,140 line:-2
Local Push Connectivity
can be the right solution


87
00:04:33,207 --> 00:04:35,909 line:-2
in scenarios
where notifications are essential


88
00:04:35,976 --> 00:04:38,512 line:-1
and network environments have constraints.


89
00:04:38,579 --> 00:04:42,749 line:-2
To implement the specific use cases
using the Local Push Connectivity API,


90
00:04:42,816 --> 00:04:45,285 line:-2
you will need to request
the new entitlement.


91
00:04:45,719 --> 00:04:49,256 line:-2
Let's now see how these two mechanisms
look in comparison with each other.


92
00:04:50,224 --> 00:04:53,393 line:-2
New Local Push Connectivity is all about
direct communication


93
00:04:53,460 --> 00:04:56,063 line:-2
between your provider server
and your app extension


94
00:04:56,129 --> 00:04:59,800 line:-2
using your protocol
on your specified Wi-Fi networks.


95
00:04:59,867 --> 00:05:02,169 line:-1
It's completely in your control.


96
00:05:02,236 --> 00:05:06,673 line:-2
Now let's understand how the app extension
handles different types of notifications.


97
00:05:07,608 --> 00:05:09,843 line:-1
On receiving user-facing notifications,


98
00:05:09,910 --> 00:05:14,481 line:-2
your app extension uses local
notifications to get the user's attention.


99
00:05:15,048 --> 00:05:17,851 line:-2
App extension code
uses the UserNotifications framework


100
00:05:17,918 --> 00:05:20,387 line:-2
to create and schedule
local notifications.


101
00:05:20,454 --> 00:05:24,491 line:-2
It can display an alert,
play a sound or badge your app's icon.


102
00:05:24,558 --> 00:05:28,028 line:-2
For example, on receiving
the notification for a text message,


103
00:05:28,095 --> 00:05:31,565 line:-2
the user can be notified using a banner
rolling from the top of the screen


104
00:05:31,632 --> 00:05:32,733 line:-1
as shown here.


105
00:05:33,333 --> 00:05:36,837 line:-2
The app extension should always use
user local notifications


106
00:05:36,904 --> 00:05:38,438 line:-1
for user-facing notifications.


107
00:05:39,573 --> 00:05:42,976 line:-2
Now let's see how the app extension
can handle a VoIP notification.


108
00:05:43,610 --> 00:05:45,412 line:-1
This notification conveys information


109
00:05:45,479 --> 00:05:48,081 line:-2
about an incoming VoIP call
for your app user.


110
00:05:49,516 --> 00:05:51,485 line:-1
On receiving a VoIP notification,


111
00:05:51,552 --> 00:05:54,188 line:-2
the app extension uses
the NEAppPushProvider class


112
00:05:54,254 --> 00:05:56,190 line:-1
to report the incoming call to the system.


113
00:05:56,924 --> 00:06:00,794 line:-2
In response to that, system wakes
your containing app if it's not running


114
00:06:00,861 --> 00:06:02,996 line:-1
and delivers the call info to it.


115
00:06:03,063 --> 00:06:06,767 line:-2
The containing app uses CallKit framework
to display the incoming call UI


116
00:06:06,834 --> 00:06:07,935 line:-1
as shown here.


117
00:06:08,535 --> 00:06:13,207 line:-2
I will talk about how to handle VoIP
notifications in your app in detail later.


118
00:06:13,273 --> 00:06:15,909 line:-1
Now let's see this working in a demo app.


119
00:06:15,976 --> 00:06:18,712 line:-2
Cruise ships have
limited or no Internet connectivity,


120
00:06:18,779 --> 00:06:21,281 line:-1
or sometimes they offer paid data plans.


121
00:06:21,348 --> 00:06:24,985 line:-2
The cruise ship company in the demo
has developed an app named SimplePush


122
00:06:25,052 --> 00:06:27,321 line:-2
which is using
the new Local Push Connectivity API


123
00:06:27,387 --> 00:06:29,857 line:-2
to provide text messaging
and VoIP services.


124
00:06:29,923 --> 00:06:33,994 line:-2
They want friends and families on board
to stay in touch using this app.


125
00:06:34,595 --> 00:06:37,397 line:-1
Jane and John are users of this app.


126
00:06:37,464 --> 00:06:40,968 line:-2
In the demo, they communicate
with each other using the SimplePush app


127
00:06:41,034 --> 00:06:44,171 line:-2
while their devices don't have
an Internet connection.


128
00:06:48,675 --> 00:06:51,979 line:-2
This is Jane's device,
and this is John's device.


129
00:06:52,045 --> 00:06:56,049 line:-2
Let's take a look at the settings
in the SimplePush app on Jane's device.


130
00:06:58,552 --> 00:07:01,588 line:-2
The settings consist
of provider server's host name


131
00:07:02,289 --> 00:07:06,260 line:-2
and the SSID of the Wi-Fi network
where Local Push Connectivity is enabled.


132
00:07:11,064 --> 00:07:12,466 line:-1
As you can see here,


133
00:07:12,533 --> 00:07:15,502 line:-2
Jane's device is connected
to Cruise Ship Wi-Fi.


134
00:07:21,041 --> 00:07:22,543 line:-1
These are Jane's contacts.


135
00:07:23,343 --> 00:07:25,846 line:-2
I will have Jane
send a text message to John


136
00:07:25,913 --> 00:07:28,448 line:-2
that will show a notification
on John's device.


137
00:07:29,016 --> 00:07:31,852 line:-2
So let's go ahead
and select John from the contacts


138
00:07:31,919 --> 00:07:33,253 line:-1
and tap the Text button.


139
00:07:34,721 --> 00:07:37,858 line:-1
I will type in, "Hello, John"...


140
00:07:41,562 --> 00:07:43,530 line:-2
-and tap the Send button.
-[phone chimes]


141
00:07:43,597 --> 00:07:45,999 line:-2
And the notification appeared
on John's device.


142
00:07:46,066 --> 00:07:50,204 line:-2
John taps the notification to open
the text message in the SimplePush app.


143
00:07:56,777 --> 00:07:58,846 line:-1
Now Jane makes a voice call to John...


144
00:07:59,913 --> 00:08:03,217 line:-2
and that shows the incoming call UI
on John's device.


145
00:08:03,717 --> 00:08:05,185 line:-1
John answers the call...


146
00:08:08,522 --> 00:08:10,858 line:-2
and you can see here
the call is in progress.


147
00:08:14,194 --> 00:08:15,696 line:-1
Now John hangs up the call.


148
00:08:18,532 --> 00:08:20,767 line:-2
So that was a brief demo
of the SimplePush app


149
00:08:20,834 --> 00:08:24,338 line:-2
that uses the new
Local Push Connectivity API in iOS 14.


150
00:08:25,005 --> 00:08:28,575 line:-2
The new Local Push Connectivity API
comprises two classes--


151
00:08:28,642 --> 00:08:31,879 line:-1
NEAppPushManager and NEAppPushProvider.


152
00:08:31,945 --> 00:08:35,082 line:-2
NEAppPushManager class
is used by the containing app,


153
00:08:35,148 --> 00:08:39,785 line:-2
and app extension code implements
a subclass of NEAppPushProvider class.


154
00:08:41,889 --> 00:08:44,191 line:-1
Your app extension and the containing app


155
00:08:44,258 --> 00:08:47,895 line:-2
both need to have the NEAppPushProvider
entitlement to use this API.


156
00:08:48,662 --> 00:08:52,199 line:-2
The containing app uses an instance
of the NEAppPushManager class


157
00:08:52,266 --> 00:08:55,869 line:-2
to create a configuration
which mainly consists of Wi-Fi networks


158
00:08:55,936 --> 00:08:58,639 line:-2
where Local Push Connectivity
is expected to work.


159
00:08:58,705 --> 00:09:02,843 line:-2
You can load, save and remove
a configuration using this class.


160
00:09:02,910 --> 00:09:04,778 line:-1
If you are implementing a VoIP app,


161
00:09:04,845 --> 00:09:08,448 line:-2
the NEAppPushManager class is also used
to set a delegate


162
00:09:08,515 --> 00:09:10,350 line:-1
to handle the incoming VoIP calls.


163
00:09:10,417 --> 00:09:15,189 line:-2
Your app extension implements
a subclass of the NEAppPushProvider class.


164
00:09:15,255 --> 00:09:17,758 line:-2
This class defines
life-cycle management methods


165
00:09:17,824 --> 00:09:20,260 line:-2
that you need to override
in your subclass.


166
00:09:20,327 --> 00:09:25,265 line:-2
The methods are called by the system when
the app extension is started and stopped.


167
00:09:25,332 --> 00:09:29,570 line:-2
The app extension is started when the
device joins the specified Wi-Fi networks.


168
00:09:29,636 --> 00:09:31,805 line:-1
The system stops the app extension


169
00:09:31,872 --> 00:09:35,175 line:-2
when the device loses the connection
with the specified Wi-Fi networks.


170
00:09:35,242 --> 00:09:37,010 line:-1
The app extension establishes


171
00:09:37,077 --> 00:09:39,980 line:-2
a network connection
with its provider server on start


172
00:09:40,047 --> 00:09:42,382 line:-1
and tears down the connection on stop.


173
00:09:42,449 --> 00:09:44,484 line:-1
On receiving a VoIP notification,


174
00:09:44,551 --> 00:09:48,622 line:-2
the app extension uses this class
to report the incoming call to the system.


175
00:09:48,689 --> 00:09:49,990 line:-1
In response to that,


176
00:09:50,057 --> 00:09:53,293 line:-2
the system wakes the containing app
and delivers the call info to it.


177
00:09:53,927 --> 00:09:57,798 line:-2
Now let's take a look at how your app uses
the NEAppPushManager class


178
00:09:57,865 --> 00:09:59,299 line:-1
to create a configuration.


179
00:09:59,967 --> 00:10:02,369 line:-2
You need to import
the NetworkExtension module


180
00:10:02,436 --> 00:10:04,805 line:-1
to use the Local Push Connectivity API.


181
00:10:05,806 --> 00:10:09,576 line:-2
Creating a configuration
for your app push provider is very simple.


182
00:10:11,144 --> 00:10:14,448 line:-2
You need to create an instance
of the NEAppPushManager class


183
00:10:14,515 --> 00:10:17,050 line:-1
and use that to set these properties.


184
00:10:17,117 --> 00:10:21,255 line:-2
matchSSIDs specifies an area of SSIDs
of the Wi-Fi networks


185
00:10:21,321 --> 00:10:23,991 line:-2
where you wish to enable
Local Push Connectivity.


186
00:10:26,293 --> 00:10:30,364 line:-2
providerBundleIdentifier is the
bundle identifier of your app extension.


187
00:10:30,430 --> 00:10:34,268 line:-2
This setting allows the system to run
the appropriate app extension when needed.


188
00:10:35,636 --> 00:10:38,972 line:-2
providerConfiguration is a dictionary
that specifies configuration data


189
00:10:39,039 --> 00:10:40,407 line:-1
for your app extension.


190
00:10:42,342 --> 00:10:45,012 line:-2
And finally, you need to set isEnabled
to "true"


191
00:10:45,078 --> 00:10:48,582 line:-2
in order to enable Local Push Connectivity
using this configuration.


192
00:10:51,451 --> 00:10:53,520 line:-2
After you have
all the settings configured,


193
00:10:53,587 --> 00:10:56,623 line:-2
call saveToPreferences method
to process the configuration.


194
00:10:57,191 --> 00:11:00,294 line:-2
If the configuration is saved successfully
and it is enabled,


195
00:11:00,360 --> 00:11:03,730 line:-2
the system enables Local Push Connectivity
using this configuration.


196
00:11:04,531 --> 00:11:08,702 line:-2
The app extension implements
a subclass of the NEAppPushProvider class


197
00:11:08,769 --> 00:11:10,737 line:-1
and overrides the required methods.


198
00:11:11,972 --> 00:11:14,041 line:-2
The system calls
startwithcompletionHandler


199
00:11:14,107 --> 00:11:15,876 line:-1
to start the app extension.


200
00:11:15,943 --> 00:11:19,980 line:-2
The app extension establishes a network
connection with its server in this method.


201
00:11:20,914 --> 00:11:24,685 line:-2
The system calls stopwithreason
when the app extension is stopped.


202
00:11:24,751 --> 00:11:27,988 line:-2
The app extension tears down
the server connection in this method.


203
00:11:28,822 --> 00:11:30,858 line:0
Upon receiving a VoIP notification,


204
00:11:30,924 --> 00:11:33,560 line:0
the app extension calls
reportIncomingCall


205
00:11:33,627 --> 00:11:36,396 line:0
to report the incoming VoIP call
to the system.


206
00:11:36,463 --> 00:11:40,701 line:0
In response to that, the system wakes
the containing app if it's not running


207
00:11:40,767 --> 00:11:42,469 line:0
and delivers the call info to it.


208
00:11:42,536 --> 00:11:45,973 line:-2
As we saw in the last slide,
the app extension is responsible


209
00:11:46,039 --> 00:11:48,542 line:-2
for reporting incoming VoIP calls
to the system,


210
00:11:48,609 --> 00:11:51,278 line:-2
and in response,
the system launches the app.


211
00:11:52,212 --> 00:11:55,249 line:-2
The containing app must implement
an app delegate object


212
00:11:55,315 --> 00:11:58,018 line:-2
conforming to
UIApplicationDelegate protocol


213
00:11:58,085 --> 00:12:00,521 line:-2
in order to know
when an app process is launched.


214
00:12:01,255 --> 00:12:04,591 line:-2
On app launch,
you must call loadAllFromPreferences


215
00:12:04,658 --> 00:12:06,660 line:-1
to load all the saved configurations


216
00:12:06,727 --> 00:12:10,964 line:-2
and set the NEAppPushDelegate object
for each NEAppPushManager instance


217
00:12:11,031 --> 00:12:12,165 line:-1
as shown here.


218
00:12:14,268 --> 00:12:17,471 line:0
The system delivers the user info
dictionary to the containing app


219
00:12:17,538 --> 00:12:18,539 line:0
by calling the


220
00:12:18,605 --> 00:12:21,708 line:0
didReceiveIncomingCallWithUserInfo
delegate method


221
00:12:21,775 --> 00:12:25,979 line:0
for the appropriate NEAppPushManager
instance on the app's main queue.


222
00:12:26,046 --> 00:12:27,548 line:0
On receiving the user info,


223
00:12:27,614 --> 00:12:30,517 line:0
the app must report
the incoming call to CallKit


224
00:12:30,584 --> 00:12:34,421 line:0
using the appropriate CallKit API
and let it display the call UI.


225
00:12:34,488 --> 00:12:36,723 line:-1
Please see the CallKit API documentation


226
00:12:36,790 --> 00:12:39,560 line:-2
for the details
on reporting incoming calls,


227
00:12:39,626 --> 00:12:43,764 line:-2
and also refer to the SimplePush
sample app code for more details.


228
00:12:44,198 --> 00:12:46,667 line:-2
Please note,
in order to receive incoming call info,


229
00:12:46,733 --> 00:12:51,405 line:-2
your containing app must have
the Voice over IP background mode enabled


230
00:12:51,471 --> 00:12:55,142 line:-2
in the Xcode project capabilities pane
as shown here.


231
00:12:55,809 --> 00:12:58,912 line:-2
Now you know the details
of the new Local Push Connectivity API


232
00:12:58,979 --> 00:13:00,647 line:-1
introduced in iOS 14,


233
00:13:00,714 --> 00:13:04,751 line:-2
let's talk about the next steps you should
take to use notifications in your app.


234
00:13:05,786 --> 00:13:09,122 line:-2
You should prefer either PushKit
or the UserNotifications framework


235
00:13:09,189 --> 00:13:12,192 line:-2
for most general push notifications
requirements in your app.


236
00:13:13,327 --> 00:13:16,763 line:-2
You should use Local Push Connectivity
only in network conditions


237
00:13:16,830 --> 00:13:19,600 line:-1
where APNs connectivity is not available


238
00:13:19,666 --> 00:13:22,903 line:-2
and notifications are essential
for your app users.


239
00:13:24,204 --> 00:13:28,809 line:-2
If you determine Local Push Connectivity
is the right solution for your app users,


240
00:13:28,876 --> 00:13:32,980 line:-2
remember that you must request
the NEAppPushProvider entitlement


241
00:13:33,046 --> 00:13:35,349 line:-2
in order to use
the Local Push Connectivity API.


242
00:13:35,883 --> 00:13:37,150 line:-1
Thanks for watching.

