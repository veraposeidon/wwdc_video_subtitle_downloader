1
00:00:00,133 --> 00:00:01,902 line:-1
[chimes]


2
00:00:03,836 --> 00:00:06,740 line:-1
Hello and welcome to WWDC.


3
00:00:07,908 --> 00:00:11,678 line:0
Hi. My name is James,
and together with my colleague Luming,


4
00:00:11,745 --> 00:00:15,215 line:0
I'm here to take you on a journey
of discovery in exploring App Clips.


5
00:00:16,350 --> 00:00:21,054 line:-2
In today's session, you'll be introduced
to App Clips, an exciting new technology


6
00:00:21,121 --> 00:00:23,724 line:-2
which will help more people
connect with your app.


7
00:00:24,157 --> 00:00:26,126 line:-1
We'll go over some example App Clips


8
00:00:26,193 --> 00:00:28,729 line:-2
to help you envision
what experiences to create.


9
00:00:29,897 --> 00:00:33,133 line:-2
We'll cover the basics of creating
an App Clip using Xcode.


10
00:00:33,734 --> 00:00:37,271 line:-2
And wrap up with a technology overview
to help you go from here.


11
00:00:39,039 --> 00:00:41,441 line:-2
Before we start designing or building
an App Clip,


12
00:00:41,508 --> 00:00:44,511 line:-2
it's important to understand
what an App Clip is.


13
00:00:45,179 --> 00:00:48,315 line:-2
And to do that,
I want to introduce three concepts to you.


14
00:00:49,049 --> 00:00:50,284 line:-1
The first is your app.


15
00:00:50,651 --> 00:00:53,754 line:0
This is important
because App Clips are an additive feature,


16
00:00:53,820 --> 00:00:56,857 line:0
and you'll need an app
before you can get started with App Clips.


17
00:00:58,458 --> 00:01:01,428 line:0
Next is what we're calling
App Clip Experiences.


18
00:01:01,495 --> 00:01:04,765 line:-1
These are URLs that when opened on iOS 14


19
00:01:04,831 --> 00:01:07,534 line:-2
are handled by an App Clip
instead of a web browser.


20
00:01:08,969 --> 00:01:12,372 line:0
And finally,
we need to talk about the App Clip itself.


21
00:01:12,806 --> 00:01:16,476 line:-2
This is what enables people
to use your native App experiences


22
00:01:16,543 --> 00:01:18,512 line:-1
without ever needing to install your app.


23
00:01:19,479 --> 00:01:22,416 line:-2
Let's cover these two new concepts
in more detail now...


24
00:01:23,417 --> 00:01:25,185 line:-1
starting with experiences.


25
00:01:26,086 --> 00:01:27,788 line:-1
These experiences form the basis


26
00:01:27,855 --> 00:01:30,791 line:-2
for how people will discover
and launch App Clips,


27
00:01:30,858 --> 00:01:33,827 line:-2
and you can think of them
as new entry points into your app.


28
00:01:35,062 --> 00:01:39,533 line:-2
Under the covers, we're using URLs
to identify these experiences.


29
00:01:39,600 --> 00:01:42,603 line:-2
And if you've adopted
Universal Links previously,


30
00:01:42,669 --> 00:01:46,106 line:-2
you should find the process for
handling App Clip URLs very similar.


31
00:01:46,807 --> 00:01:50,077 line:-2
A key difference is that
App Clip URLs are not defined


32
00:01:50,143 --> 00:01:52,746 line:-1
by your Apple-App-Site-Associations file


33
00:01:52,813 --> 00:01:54,815 line:-2
but are registered
using App Store Connect.


34
00:01:56,216 --> 00:01:57,484 line:0
For everything you need to know


35
00:01:57,551 --> 00:02:00,254 line:0
about creating
and customizing these experiences


36
00:02:00,320 --> 00:02:03,624 line:0
be sure to check out the session,
"Configure and Link Your App Clips."


37
00:02:05,492 --> 00:02:07,794 line:-2
Once you've registered
an App Clip experience


38
00:02:07,861 --> 00:02:12,633 line:-2
and your App Clip is live in store, it'll
be surfaced anytime that URL is opened.


39
00:02:13,400 --> 00:02:18,105 line:-2
From QR codes to NFC tags,
links in Safari and Messages,


40
00:02:18,172 --> 00:02:20,073 line:-1
to business details and Maps.


41
00:02:20,140 --> 00:02:22,242 line:-1
No matter how someone uses their device,


42
00:02:22,309 --> 00:02:25,212 line:-2
we'll make sure that your App Clip
is given the spotlight.


43
00:02:25,846 --> 00:02:27,848 line:-1
And the best way to discover App Clips


44
00:02:27,915 --> 00:02:32,119 line:-2
will be with a new Apple designed
App Clip code, coming later this year.


45
00:02:32,953 --> 00:02:36,089 line:-2
When you see one, you'll know
there's an App Clip waiting for you.


46
00:02:36,156 --> 00:02:39,560 line:-2
App Clip codes combine the ease of NFC
and visual codes,


47
00:02:39,626 --> 00:02:41,495 line:-1
so you can tap them or scan them


48
00:02:41,562 --> 00:02:44,464 line:-2
and always know
that you'll get a great user experience.


49
00:02:45,098 --> 00:02:47,134 line:-1
Next, let's talk about App Clips.


50
00:02:47,968 --> 00:02:50,370 line:-2
As developers,
I'm sure some of you are very curious


51
00:02:50,437 --> 00:02:53,140 line:-2
about how we're gonna
just run part of your apps on demand.


52
00:02:53,574 --> 00:02:55,209 line:-1
Well, there's no magic.


53
00:02:55,275 --> 00:02:59,279 line:-2
An App Clip requires you to create
a second application target in Xcode.


54
00:02:59,813 --> 00:03:04,351 line:-2
This App Clip target will then contain
all the necessary code and assets


55
00:03:04,418 --> 00:03:06,386 line:-1
to handle your App Clip Experiences.


56
00:03:07,888 --> 00:03:10,490 line:-2
While an App Clip target is built
much like an app,


57
00:03:10,557 --> 00:03:13,293 line:-2
it still requires
a corresponding application,


58
00:03:13,861 --> 00:03:16,897 line:-2
which it will then be built
and submitted for review alongside.


59
00:03:17,564 --> 00:03:21,535 line:-2
You cannot upload an App Clip or its app
independently of one another.


60
00:03:23,303 --> 00:03:26,874 line:0
Once your app and its App Clip
are live in the App Store,


61
00:03:26,940 --> 00:03:28,442 line:0
they become mutually exclusive.


62
00:03:29,176 --> 00:03:30,477 line:-1
Your App Clip is downloaded


63
00:03:30,544 --> 00:03:32,946 line:-2
if someone encounters
your App Clip experience


64
00:03:33,013 --> 00:03:35,182 line:-1
but doesn't have your app installed.


65
00:03:35,249 --> 00:03:37,050 line:-1
Otherwise, your app is preferred.


66
00:03:37,851 --> 00:03:41,221 line:-2
This is important to remember,
because when someone installs your app,


67
00:03:41,288 --> 00:03:44,024 line:-2
they will expect those experiences
to continue working.


68
00:03:45,459 --> 00:03:46,460 line:0
And last,


69
00:03:46,527 --> 00:03:50,864 line:0
because App Clips are focused on providing
fast and in-the-moment experiences,


70
00:03:50,931 --> 00:03:52,833 line:0
you should make them as small as possible


71
00:03:52,900 --> 00:03:55,369 line:0
so that they download
and launch instantly.


72
00:03:56,570 --> 00:03:59,506 line:-2
Your App Clip must be less than
ten megabytes after thinning.


73
00:04:00,274 --> 00:04:02,943 line:-2
And you wanna strike a balance
of including enough assets


74
00:04:03,010 --> 00:04:05,445 line:-1
to be immediately usable after launch


75
00:04:05,512 --> 00:04:08,515 line:-2
and download other data
only as needed by the user.


76
00:04:09,149 --> 00:04:11,051 line:-1
I've talked a lot about experiences,


77
00:04:11,118 --> 00:04:13,253 line:-2
and I think it's time
to show some examples.


78
00:04:14,288 --> 00:04:16,023 line:-1
Let's consider this flowchart


79
00:04:16,089 --> 00:04:19,125 line:-2
where we have boxes
representing screens in an app


80
00:04:19,192 --> 00:04:21,628 line:-2
and lines showing how
the user moves between them.


81
00:04:22,763 --> 00:04:25,232 line:-2
This maps to how
a lot of apps are structured.


82
00:04:25,299 --> 00:04:27,901 line:-2
On the left,
we start with some high-level choices,


83
00:04:27,968 --> 00:04:30,170 line:-1
such as a Start Page or a Tab bar.


84
00:04:30,237 --> 00:04:31,672 line:-1
And as we move to the right,


85
00:04:31,738 --> 00:04:34,408 line:-2
we drill in through
navigation stacks towards some goal.


86
00:04:35,142 --> 00:04:37,077 line:-1
Hierarchies like this are great


87
00:04:37,144 --> 00:04:39,913 line:-2
because they help people navigate
complex applications.


88
00:04:40,581 --> 00:04:42,916 line:-2
But when designing experiences
for App Clips,


89
00:04:42,983 --> 00:04:45,686 line:-2
I want to challenge you
to radically rethink this flow.


90
00:04:46,587 --> 00:04:49,323 line:-2
Start by only including
the pieces of your app


91
00:04:49,389 --> 00:04:51,425 line:-1
that play to the strengths of App Clips.


92
00:04:52,793 --> 00:04:56,296 line:-2
App Clips are encountered in context
and at the moment someone needs them.


93
00:04:57,097 --> 00:04:59,466 line:-2
When thinking about
what helps users in the moment,


94
00:04:59,533 --> 00:05:01,768 line:-2
staple app features
like directory listings


95
00:05:01,835 --> 00:05:04,404 line:-2
or profile screens
may no longer make sense.


96
00:05:06,173 --> 00:05:10,544 line:-2
Next, consider how the URLs you use
for your App Clip Experiences


97
00:05:10,611 --> 00:05:12,713 line:-1
can be deep links into these flows.


98
00:05:13,747 --> 00:05:16,683 line:-2
App Clips should generally
omit top-level navigation elements,


99
00:05:16,750 --> 00:05:17,751 line:-1
like Tab bars.


100
00:05:18,752 --> 00:05:23,090 line:-2
Instead, use separate URLs
for any distinct experiences.


101
00:05:24,424 --> 00:05:26,727 line:-1
For example, you may want one experience


102
00:05:26,793 --> 00:05:29,796 line:-2
for when someone orders a product
that will be shipped to them,


103
00:05:29,863 --> 00:05:31,999 line:-1
versus if they're at an in-store checkout.


104
00:05:32,566 --> 00:05:35,636 line:-2
And if your business has
multiple physical locations,


105
00:05:35,702 --> 00:05:39,173 line:-2
you should use a URL
that identifies the store they're at.


106
00:05:39,740 --> 00:05:41,808 line:-1
This lets you skip showing a store-chooser


107
00:05:41,875 --> 00:05:44,077 line:-2
and go straight to the content
they care about.


108
00:05:45,913 --> 00:05:47,748 line:-1
At the end, what you want to have


109
00:05:47,814 --> 00:05:51,251 line:-2
are focused user flows
that guide someone to their goal.


110
00:05:52,152 --> 00:05:54,855 line:-2
This isn't to say that
an App Clip can only do one thing.


111
00:05:55,455 --> 00:05:58,692 line:-2
Quite to the contrary, a well-designed
App Clip can do many things.


112
00:05:58,759 --> 00:06:02,196 line:-1
However, it focuses on one at a time.


113
00:06:02,262 --> 00:06:03,931 line:-1
But that's enough theory.


114
00:06:03,997 --> 00:06:07,367 line:-2
For a demo of putting this all together,
I'd like to welcome Luming


115
00:06:07,434 --> 00:06:10,337 line:-2
to explain how to get started
with App Clips in Xcode.


116
00:06:12,606 --> 00:06:16,343 line:-2
Thanks, James, for your great introduction
on exploring App Clips.


117
00:06:16,410 --> 00:06:19,346 line:-2
I'm Luming,
an engineer from the App Clips team.


118
00:06:19,413 --> 00:06:22,649 line:-2
Today, I'll be demoing how to create
an App Clip from your app.


119
00:06:24,718 --> 00:06:27,020 line:-1
So here I am in my app Fruta.


120
00:06:27,421 --> 00:06:30,924 line:-2
Fruta lets you browse
an entire menu of delicious smoothies,


121
00:06:30,991 --> 00:06:34,394 line:-2
place orders,
keep track of your favorite smoothies,


122
00:06:34,461 --> 00:06:37,331 line:-2
get reward points,
and explore smoothie recipes.


123
00:06:37,931 --> 00:06:41,034 line:-2
While all these functionalities
are great for the full app,


124
00:06:41,101 --> 00:06:42,936 line:-1
we really want to focus on providing


125
00:06:43,003 --> 00:06:45,706 line:-2
a streamline ordering experience
for our App Clip.


126
00:06:45,772 --> 00:06:49,276 line:-2
So that is basically
all the functionalities in the Menu tab.


127
00:06:50,577 --> 00:06:52,379 line:-1
So let's create an App Clip.


128
00:06:53,580 --> 00:06:57,518 line:-2
I've opened the smoothies Xcode project,
and I'll create a new target.


129
00:06:58,485 --> 00:07:01,688 line:-2
I'll choose to create
a new App Clip target and click Next.


130
00:07:02,222 --> 00:07:03,590 line:-1
I'll call it Fruta Clip.


131
00:07:04,124 --> 00:07:06,860 line:-2
And it's automatically embedded
in our full application.


132
00:07:07,794 --> 00:07:11,131 line:-2
You'll notice that Xcode has automatically
populated the name


133
00:07:11,198 --> 00:07:13,867 line:-2
and the bundle identifier
for our App Clip as well.


134
00:07:15,035 --> 00:07:16,670 line:-1
Let's run the Clip on device.


135
00:07:20,274 --> 00:07:23,243 line:-2
Momentarily, the App Clip
should build and run.


136
00:07:24,011 --> 00:07:25,846 line:-1
Our App Clip has built and run.


137
00:07:25,913 --> 00:07:29,516 line:-2
Of course, the App Clip is
just an empty boilerplate right now.


138
00:07:29,883 --> 00:07:32,286 line:-1
So, "Hello, world!" Here we are.


139
00:07:33,353 --> 00:07:35,956 line:-2
Let's add some code
and resources to the App Clip.


140
00:07:37,858 --> 00:07:41,094 line:-2
Since the Fruta app has a dependency,
Nutrition Facts,


141
00:07:41,161 --> 00:07:43,363 line:-2
I'll need to add that
to our App Clip as well.


142
00:07:44,131 --> 00:07:48,001 line:-2
I'll go to the App Clip target
and choose to add a new dependency.


143
00:07:48,068 --> 00:07:50,737 line:-2
I'll choose to add
the Nutrition Facts dependency.


144
00:07:52,005 --> 00:07:54,274 line:-1
Next, let's create an asset catalog


145
00:07:54,341 --> 00:07:57,311 line:-2
to share assets
between the full app and the App Clip.


146
00:07:58,512 --> 00:08:00,614 line:-1
I'll choose to create a new file.


147
00:08:01,014 --> 00:08:03,584 line:-2
Then I'll choose to create
a new asset catalog


148
00:08:03,650 --> 00:08:05,719 line:-1
and name it Shared Assets.


149
00:08:08,488 --> 00:08:11,358 line:-2
I'll add it
to the Fruta Clip target membership.


150
00:08:11,992 --> 00:08:15,596 line:-2
Now, let's view these two asset catalogs
side by side.


151
00:08:17,197 --> 00:08:20,567 line:-2
Because we need the app icon
in both the app and the App Clip,


152
00:08:20,634 --> 00:08:23,437 line:-2
I'll drag the app icon
from the asset catalog


153
00:08:23,504 --> 00:08:25,005 line:-1
to the Shared Asset catalog.


154
00:08:25,706 --> 00:08:30,210 line:-2
The same applies for colors,
ingredient and smoothie.


155
00:08:30,277 --> 00:08:32,111 line:-1
So I'll drag all of them over as well.


156
00:08:32,913 --> 00:08:36,450 line:-2
Since our App Clip won't include recipes,
I'll leave it as is.


157
00:08:38,385 --> 00:08:41,087 line:-1
Most of my code is organized into groups.


158
00:08:41,154 --> 00:08:42,756 line:-1
So let's go through every group


159
00:08:42,823 --> 00:08:46,393 line:-2
and only add the Swift source files
we need to the App Clip target.


160
00:08:47,861 --> 00:08:51,798 line:-2
Model we definitely need,
so I'll go to the target membership


161
00:08:51,865 --> 00:08:53,600 line:-1
and tick the App Clip checkbox.


162
00:08:54,801 --> 00:08:58,639 line:-2
Store is for unlocking additional recipes,
so we can leave it out.


163
00:08:59,406 --> 00:09:03,343 line:-2
Orders, we definitely need it
in our App Clip, so I'll tick it as well.


164
00:09:04,244 --> 00:09:06,446 line:-2
But since our App Clip
doesn't need a tab bar


165
00:09:06,513 --> 00:09:10,150 line:-2
and focuses on ordering smoothie
just from the first tab,


166
00:09:10,217 --> 00:09:12,252 line:-1
which is the Main Menu of the full app,


167
00:09:12,319 --> 00:09:14,488 line:-1
we can let go of the navigation code.


168
00:09:15,055 --> 00:09:18,158 line:-2
Smoothies. We definitely need them,
so I'll check it.


169
00:09:19,560 --> 00:09:21,895 line:-1
Recipes we can leave out.


170
00:09:22,229 --> 00:09:24,431 line:-1
Ingredients. That's a must.


171
00:09:24,498 --> 00:09:27,467 line:-1
And so is Components and Styles.


172
00:09:28,268 --> 00:09:31,004 line:-2
I'll also include
the VisualEffectView wrapper


173
00:09:31,071 --> 00:09:33,307 line:-1
and check the Fruta Clip checkbox.


174
00:09:34,007 --> 00:09:36,310 line:-2
I think that's all
the code we need in the Clip.


175
00:09:36,376 --> 00:09:37,411 line:-1
Let's build it.


176
00:09:38,378 --> 00:09:40,948 line:-1
Huh. It looks like there's a build error.


177
00:09:41,381 --> 00:09:42,382 line:-1
Why is that?


178
00:09:43,283 --> 00:09:47,721 line:-2
Well, it turns out because
OrderPlacedView.swift references Store,


179
00:09:47,788 --> 00:09:50,924 line:-2
which we have excluded from the App Clip
in the previous step,


180
00:09:50,991 --> 00:09:52,526 line:-1
our App Clip won't build.


181
00:09:53,026 --> 00:09:56,063 line:-2
We need to conditionally compile out
the references to Store


182
00:09:56,129 --> 00:09:58,198 line:-1
in OrderPlacedView.swift.


183
00:09:58,932 --> 00:10:01,768 line:-2
I'll go back
to the App Clip target's build settings.


184
00:10:02,903 --> 00:10:07,841 line:-2
There, I'll find the Swift Compiler -
Custom Flags section,


185
00:10:07,908 --> 00:10:11,845 line:-2
and I'll define a new custom condition,
APPCLIP, in all caps,


186
00:10:11,912 --> 00:10:15,449 line:-2
for both the debug scheme
as well as the release scheme.


187
00:10:18,785 --> 00:10:21,989 line:-2
Now, we can come back
to OrderPlacedView.swift


188
00:10:22,055 --> 00:10:24,958 line:-2
and conditionally
compile out references to Store.


189
00:10:30,664 --> 00:10:34,001 line:-2
Finally, we need to bring up
Smoothie Menu in our App Clip.


190
00:10:35,202 --> 00:10:38,038 line:-1
In our App Clip's FrutaClip.swift file,


191
00:10:38,105 --> 00:10:42,042 line:-2
I'll instantiate a new Fruta model
as its data store object.


192
00:10:43,877 --> 00:10:47,247 line:-2
And pass it to the ContentView
as its environment variable.


193
00:10:49,983 --> 00:10:51,785 line:-1
In the body of ContentView


194
00:10:52,519 --> 00:10:55,455 line:-2
I'll remove the default placeholder,
"Hello, world!"


195
00:10:55,522 --> 00:10:57,224 line:-1
and create a new NavigationView.


196
00:10:59,526 --> 00:11:02,763 line:-2
In the NavigationView,
I'll include a SmoothieMenu.


197
00:11:07,234 --> 00:11:09,036 line:-1
Then we can build and run.


198
00:11:13,974 --> 00:11:16,376 line:-1
<i>Voilà.</i> We got our App Clip running.


199
00:11:16,443 --> 00:11:18,645 line:-1
The Clip looks and works great.


200
00:11:18,712 --> 00:11:20,447 line:-1
I can browse the smoothie menu...


201
00:11:22,015 --> 00:11:24,284 line:-1
find my favorite and place an order.


202
00:11:33,026 --> 00:11:36,630 line:-2
It looks like my smoothie's ready.
Time to enjoy my smoothie.


203
00:11:37,397 --> 00:11:38,665 line:-1
Back to you, James.


204
00:11:40,334 --> 00:11:42,069 line:-1
Thanks, Luming. That was awesome.


205
00:11:42,135 --> 00:11:45,572 line:-2
And I really like how that demo captures
just how simple it can be


206
00:11:45,639 --> 00:11:49,510 line:-2
to share code and assets
using existing Xcode features.


207
00:11:50,511 --> 00:11:53,580 line:-2
Shared asset catalogs
and source files are also great


208
00:11:53,647 --> 00:11:57,351 line:-2
if you're developing for multiple
platforms like Apple Watch and macOS.


209
00:11:57,918 --> 00:12:00,187 line:-2
And it highlights another theme
I want to touch on.


210
00:12:00,787 --> 00:12:03,490 line:-2
And that is how we've reused
existing technologies


211
00:12:03,557 --> 00:12:05,792 line:-1
to make building App Clips a breeze.


212
00:12:07,461 --> 00:12:10,364 line:-2
App Clips are built
using the same UI frameworks as apps.


213
00:12:10,864 --> 00:12:15,435 line:-2
This includes support for either UIKit
or the new SwiftUI app lifecycle.


214
00:12:16,603 --> 00:12:20,674 line:-2
When launched, your App Clip or app
will receive an NSUserActivity.


215
00:12:21,542 --> 00:12:24,678 line:-2
And if your App Clip
supports multiple App Clip Experiences,


216
00:12:24,745 --> 00:12:27,681 line:-2
you'll use the web page URL
on this activity


217
00:12:27,748 --> 00:12:30,117 line:-1
to know which experience you're handling.


218
00:12:30,184 --> 00:12:33,754 line:-2
This should feel very familiar if your app
already handles Universal Links.


219
00:12:35,622 --> 00:12:37,191 line:-1
And unlike extensions,


220
00:12:37,257 --> 00:12:41,428 line:-2
an App Clip is able to use
any API in the iOS SDK.


221
00:12:41,495 --> 00:12:45,265 line:-2
This makes sharing code between
your app and your App Clip so easy.


222
00:12:46,200 --> 00:12:51,004 line:-2
However, from your App Clip,
access to sensitive user data is limited.


223
00:12:51,805 --> 00:12:54,241 line:-2
But there's nothing special
you need to do here.


224
00:12:54,308 --> 00:12:57,377 line:-2
Just be sure to check for access to data
before you request it.


225
00:12:58,579 --> 00:13:02,716 line:-2
As an example, you can share source code
that uses the HealthKit framework.


226
00:13:02,783 --> 00:13:06,153 line:-2
But be prepared for
HKHealthStore isHealthDataAvailable


227
00:13:06,220 --> 00:13:09,156 line:-2
to always return false
when running in your App Clip.


228
00:13:10,290 --> 00:13:13,894 line:-2
And because of this,
you won't find any isAppClip API.


229
00:13:13,961 --> 00:13:16,930 line:-2
Just follow the best practices
for the frameworks you use.


230
00:13:19,099 --> 00:13:23,003 line:-2
To help you build
a frictionless experience from tap to tap,


231
00:13:23,070 --> 00:13:25,973 line:-2
we've added
a new location confirmation API.


232
00:13:26,874 --> 00:13:30,577 line:-2
Instead of prompting
for the full access to someone's location,


233
00:13:30,644 --> 00:13:34,848 line:-2
which they may not feel comfortable giving
to an App Clip they've just encountered,


234
00:13:34,915 --> 00:13:37,784 line:-2
use this API to confirm they're where
you think they are


235
00:13:37,851 --> 00:13:39,453 line:-1
while respecting their privacy.


236
00:13:40,821 --> 00:13:43,590 line:-2
To learn how to adopt this
and other great tips,


237
00:13:43,657 --> 00:13:46,827 line:0
be sure to check out
the "Streamline Your App Clip" session.


238
00:13:47,361 --> 00:13:50,230 line:-2
Finally, to continue
that seamless experience,


239
00:13:50,297 --> 00:13:54,368 line:-2
we're providing API that allows you
to migrate data from your App Clip


240
00:13:54,434 --> 00:13:56,637 line:-1
if someone installs its corresponding app.


241
00:13:57,371 --> 00:13:59,640 line:-2
This is done
using a shared data container,


242
00:13:59,706 --> 00:14:01,909 line:-1
and I'll talk about it more in a bit.


243
00:14:03,143 --> 00:14:06,146 line:-2
Developing an App Clip
should feel instantly familiar


244
00:14:06,213 --> 00:14:08,015 line:-1
and just like working on an app.


245
00:14:08,482 --> 00:14:10,651 line:-1
However, when developing an App Clip,


246
00:14:10,717 --> 00:14:13,954 line:-2
there are some special considerations
to keep in mind.


247
00:14:14,621 --> 00:14:17,558 line:-2
To start, App Clips aren't something
people need to manage.


248
00:14:18,158 --> 00:14:19,927 line:-1
An App Clip is run when needed,


249
00:14:19,993 --> 00:14:24,064 line:-2
but if it is never used again,
iOS will delete the App Clip and its data.


250
00:14:24,731 --> 00:14:27,734 line:-2
Additionally, App Clips are not included
in iOS backups.


251
00:14:29,837 --> 00:14:34,041 line:-2
With App Clips, we want users to feel safe
running app code on demand.


252
00:14:34,107 --> 00:14:38,212 line:-2
As such, we're putting an even
higher focus on the privacy of App Clips


253
00:14:38,278 --> 00:14:42,482 line:-2
and outright restricting access to some
sensitive data such as health and fitness.


254
00:14:43,851 --> 00:14:46,854 line:-2
If your corresponding app
makes use of these types of data,


255
00:14:46,920 --> 00:14:50,023 line:-2
you can encourage people to install it
for even more functionality.


256
00:14:51,425 --> 00:14:54,394 line:-2
An App Clip is focused
on providing App Clip Experiences,


257
00:14:54,461 --> 00:14:56,430 line:-2
and it cannot be launched
for other reasons.


258
00:14:57,064 --> 00:15:00,367 line:0
Because of this, it cannot register
for custom URL schemes,


259
00:15:00,434 --> 00:15:02,870 line:0
document types or Universal Links.


260
00:15:03,570 --> 00:15:07,341 line:0
This is very important if you're using
a custom URL scheme as a callback


261
00:15:07,407 --> 00:15:09,109 line:0
for a federated sign-in service.


262
00:15:09,743 --> 00:15:13,247 line:0
In this case, you should instead use
ASWebAuthenticationSession,


263
00:15:13,313 --> 00:15:16,850 line:0
which does not require you to register
the URL schemes you use for callbacks.


264
00:15:18,185 --> 00:15:19,453 line:0
And as you may have guessed,


265
00:15:19,520 --> 00:15:22,422 line:0
this also means that App Clips
cannot include bundled extensions,


266
00:15:22,489 --> 00:15:23,690 line:0
like content blockers.


267
00:15:24,691 --> 00:15:27,294 line:-2
Now that you know
some of the similarities and differences


268
00:15:27,361 --> 00:15:28,795 line:-1
between apps and App Clips,


269
00:15:28,862 --> 00:15:32,199 line:-2
I wanna cover how these two interact
on a single device.


270
00:15:33,267 --> 00:15:37,404 line:-2
Say, for example, someone finds a QR code
for an App Clip and scans it.


271
00:15:38,605 --> 00:15:42,075 line:0
Because there is no app installed
to handle the experience,


272
00:15:42,142 --> 00:15:47,381 line:0
iOS will automatically locate, download
and launch an App Clip for the user.


273
00:15:48,448 --> 00:15:51,818 line:0
The App Clip gets to run while in use,
and then the user moves on.


274
00:15:53,253 --> 00:15:57,024 line:0
After a period of time,
if the App Clip has not been revisited,


275
00:15:57,090 --> 00:16:01,261 line:0
iOS will delete the App Clip,
its data container and its Keychain data.


276
00:16:02,329 --> 00:16:04,731 line:0
If the user encounters
the experience again,


277
00:16:04,798 --> 00:16:07,401 line:0
the entire process repeats,
just as before.


278
00:16:08,035 --> 00:16:10,070 line:-1
This illustrates an important point.


279
00:16:10,137 --> 00:16:12,639 line:-2
While App Clips can store data
on the device,


280
00:16:12,706 --> 00:16:14,942 line:-1
treat it more like a temporary cache,


281
00:16:15,008 --> 00:16:17,377 line:-2
because it may be deleted
at the system's discretion.


282
00:16:18,879 --> 00:16:21,582 line:0
Now let's rewind and consider what happens


283
00:16:21,648 --> 00:16:25,085 line:0
when someone repeatedly uses
the same App Clip experience.


284
00:16:25,919 --> 00:16:29,256 line:-2
Perhaps this is an ordering App Clip
at their favorite coffee shop,


285
00:16:29,323 --> 00:16:30,858 line:0
and they visit it every day.


286
00:16:32,559 --> 00:16:36,296 line:0
In this case, the App Clip's lifetime
will be extended,


287
00:16:36,363 --> 00:16:37,731 line:0
and it may never be cleaned up


288
00:16:37,798 --> 00:16:40,300 line:0
because iOS notices
that it's used frequently.


289
00:16:41,335 --> 00:16:44,271 line:0
So, if the App Clip caches the last order,


290
00:16:44,338 --> 00:16:47,808 line:0
it could show this as a recommendation
to speed up ordering next time.


291
00:16:48,742 --> 00:16:51,478 line:-2
Of course, if someone loves
your App Clip that much,


292
00:16:51,545 --> 00:16:53,847 line:-1
they'll probably want to install your app.


293
00:16:53,914 --> 00:16:58,385 line:-2
When they do this, iOS will automatically
migrate authorizations for camera,


294
00:16:58,452 --> 00:17:00,487 line:-1
microphone and Bluetooth access.


295
00:17:01,288 --> 00:17:03,590 line:0
If your App Clip also has data to migrate,


296
00:17:03,657 --> 00:17:06,960 line:0
you can do so using a new type
of group data container,


297
00:17:07,027 --> 00:17:08,662 line:0
which is automatically made available


298
00:17:08,729 --> 00:17:11,164 line:0
to both your App Clip
and your corresponding app.


299
00:17:12,098 --> 00:17:16,203 line:0
For this to work, your App Clip should
store data that you want to migrate


300
00:17:16,270 --> 00:17:17,938 line:0
in this shared data container,


301
00:17:18,005 --> 00:17:20,273 line:0
rather than
the App Clip's standard container.


302
00:17:21,375 --> 00:17:23,443 line:0
If the user then installs your app,


303
00:17:23,510 --> 00:17:27,013 line:0
iOS will still delete the App Clip
and its data just like before.


304
00:17:27,513 --> 00:17:29,483 line:0
But this group container will stick around


305
00:17:29,550 --> 00:17:33,287 line:0
until your app has a chance
to copy the data out before going away.


306
00:17:34,488 --> 00:17:35,956 line:-1
A great App Clip is built


307
00:17:36,023 --> 00:17:39,393 line:-2
using the same best practices
and technologies as a great app.


308
00:17:40,327 --> 00:17:43,030 line:-2
That includes supporting Apple Pay
for payments,


309
00:17:43,096 --> 00:17:45,299 line:-2
which allows people
to quickly make purchases


310
00:17:45,365 --> 00:17:47,301 line:-1
without fumbling for their credit cards.


311
00:17:47,901 --> 00:17:51,638 line:-2
Notifications to alert someone
when their smoothie is available


312
00:17:51,705 --> 00:17:54,007 line:-1
or their parking meter is about to expire.


313
00:17:55,142 --> 00:17:57,711 line:-1
SwiftUI is a great fit for App Clips


314
00:17:57,778 --> 00:18:01,048 line:-2
because of its focus
on small and reusable components,


315
00:18:01,114 --> 00:18:04,518 line:-2
which can easily be shared
between an app and its App Clip target.


316
00:18:06,153 --> 00:18:08,255 line:-1
And new this year is SKOverlay...


317
00:18:09,356 --> 00:18:12,926 line:-2
or if you're using SwiftUI,
the App Store overlay modifier.


318
00:18:13,527 --> 00:18:16,763 line:-2
This API is the best way
to lead people to your full app


319
00:18:16,830 --> 00:18:19,499 line:-2
after they've had a great experience
using your App Clip.


320
00:18:20,100 --> 00:18:23,470 line:0
You can learn more about it by watching
"What's New in In-App Purchase"


321
00:18:23,537 --> 00:18:25,539 line:0
from WWDC 20.


322
00:18:26,173 --> 00:18:30,544 line:-2
Last, if your App Clip would benefit
from associating users with an account,


323
00:18:30,611 --> 00:18:33,046 line:-1
say, to keep reward points on a purchase,


324
00:18:33,547 --> 00:18:37,317 line:-2
you should use ASAuthorizationController
from authentication services.


325
00:18:38,085 --> 00:18:41,522 line:-2
ASAuthorizationController allows users
to easily sign in


326
00:18:41,588 --> 00:18:43,657 line:-1
to their existing password-based accounts


327
00:18:44,157 --> 00:18:46,660 line:-2
or create a new account
using Sign in with Apple.


328
00:18:47,361 --> 00:18:52,132 line:0
For more information, check out "What's
New in Authentication" from WWDC 19.


329
00:18:53,233 --> 00:18:57,137 line:-2
In summary, App Clips represent
a new type of user experience.


330
00:18:57,871 --> 00:19:00,541 line:-1
These experiences can be invoked on demand


331
00:19:00,607 --> 00:19:03,076 line:-2
without someone
even having your app installed


332
00:19:03,143 --> 00:19:05,212 line:-1
via a dedicated App Clip binary.


333
00:19:05,946 --> 00:19:08,649 line:-2
However, once your application
is installed,


334
00:19:08,715 --> 00:19:11,418 line:-2
it will take over
and also handle these experiences.


335
00:19:13,220 --> 00:19:17,324 line:-2
These App Clip binaries are built
using the same technologies as apps,


336
00:19:17,391 --> 00:19:21,328 line:-2
so you can transfer knowledge from writing
apps directly to writing App Clips.


337
00:19:22,229 --> 00:19:25,866 line:-2
And App Clip Experiences
are streamlined and linear,


338
00:19:25,933 --> 00:19:27,935 line:-1
focused on achieving a specific task.


339
00:19:28,535 --> 00:19:32,306 line:-2
Features such as reward programs
should be presented as optional steps


340
00:19:32,372 --> 00:19:34,408 line:-1
after someone has completed their goal.


341
00:19:35,209 --> 00:19:38,045 line:-2
Thanks so much for watching
and have a great WWDC.


342
00:19:38,812 --> 00:19:40,647 line:-1
[chimes]

