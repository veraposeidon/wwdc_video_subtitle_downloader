1
00:00:03,770 --> 00:00:06,907 line:-1
Hello and welcome to WWDC.


2
00:00:08,542 --> 00:00:11,845 line:0
Hi. I'm Kevin,
and I work on Xcode Previews.


3
00:00:12,212 --> 00:00:15,482 line:-2
Xcode Previews
helps you write SwiftUI code,


4
00:00:15,549 --> 00:00:18,285 line:-2
edit your views
in multiple configurations at once,


5
00:00:18,886 --> 00:00:20,988 line:-1
and quickly test all of your changes.


6
00:00:21,722 --> 00:00:24,324 line:-1
But previews benefit your app as a whole.


7
00:00:24,992 --> 00:00:28,095 line:-2
By structuring your app
to make it more previewable,


8
00:00:28,161 --> 00:00:32,698 line:-2
you make your app more understandable,
more testable and more maintainable.


9
00:00:32,766 --> 00:00:35,102 line:-2
In this video,
I want to show you four ways


10
00:00:35,169 --> 00:00:38,105 line:-2
you can structure your app
to get the most out of Previews.


11
00:00:38,505 --> 00:00:42,242 line:-2
First, we'll look at how
to preview multiple files at once,


12
00:00:42,309 --> 00:00:44,811 line:-2
so that you can edit views
in the larger context.


13
00:00:45,979 --> 00:00:49,149 line:-2
Secondly, we'll look at the relationship
between previews


14
00:00:49,216 --> 00:00:51,552 line:-1
and the SwiftUI app life cycle,


15
00:00:51,919 --> 00:00:55,022 line:-2
so that you can get both
great performance for your previews


16
00:00:55,088 --> 00:00:58,091 line:-2
while also defining
explicit data dependencies.


17
00:00:58,959 --> 00:01:03,797 line:-2
Third, speaking of data, we'll look at
where to define sample data,


18
00:01:03,864 --> 00:01:07,768 line:-2
so that you can have a comprehensive set
of examples during development


19
00:01:07,835 --> 00:01:10,571 line:-2
without affecting
the size of your deployed app.


20
00:01:11,205 --> 00:01:14,241 line:-2
And finally,
we'll look at a handful of techniques


21
00:01:14,308 --> 00:01:17,144 line:-2
for making your views themselves
more previewable.


22
00:01:17,845 --> 00:01:21,081 line:-2
We have a lot to cover in this video,
so let's dive in.


23
00:01:21,415 --> 00:01:24,585 line:-2
I'll be using the same app
for all the demos in this video.


24
00:01:24,651 --> 00:01:27,621 line:-2
It's an app for creating collages
of the photos I've taken.


25
00:01:27,688 --> 00:01:31,425 line:-1
You can create a collage, pick a layout,


26
00:01:32,125 --> 00:01:34,928 line:-1
pick some photos, add your friends,


27
00:01:34,995 --> 00:01:38,665 line:-2
and, like every great photo app,
even add some effects.


28
00:01:39,433 --> 00:01:43,470 line:-2
So first, let's look at how to preview
multiple files at once.


29
00:01:45,239 --> 00:01:50,177 line:-2
We'll start in the view for the thumbnail
for picking a layout for our collage.


30
00:01:50,244 --> 00:01:54,548 line:-2
I have this gray rectangle here, and it
looks great on this white background.


31
00:01:55,082 --> 00:01:57,484 line:-1
But how does it look in context?


32
00:01:58,252 --> 00:02:01,588 line:-2
For that, I'll switch over to the selector
for picking the layout.


33
00:02:02,456 --> 00:02:04,024 line:-1
Now I have two previews here.


34
00:02:04,091 --> 00:02:07,261 line:-2
One is showing the selector
on a white background,


35
00:02:07,728 --> 00:02:10,264 line:-2
and the second is showing it
on top of an image.


36
00:02:10,330 --> 00:02:15,102 line:-2
This is meant to show what it looks like
when the user pinches-to-zoom the collage


37
00:02:15,169 --> 00:02:17,638 line:-2
and content slides underneath
that selector.


38
00:02:18,272 --> 00:02:19,273 line:-1
As you can see,


39
00:02:19,339 --> 00:02:22,709 line:-2
that thumbnail kind of disappears
when there's content behind it.


40
00:02:22,776 --> 00:02:25,479 line:-2
So I want to make that color
stick out a bit more.


41
00:02:25,913 --> 00:02:30,751 line:-2
But as I edit that color, I don't want to
lose the context of where I'm using it.


42
00:02:31,985 --> 00:02:34,288 line:-2
I can accomplish this
by pinning the preview


43
00:02:34,788 --> 00:02:37,057 line:-1
by clicking this button in the bottom bar.


44
00:02:37,124 --> 00:02:40,827 line:-2
Now, when I switch back
to my Layout Thumbnail view,


45
00:02:40,894 --> 00:02:44,431 line:-2
Xcode is showing me both the previews
for the view that I just pinned


46
00:02:44,498 --> 00:02:46,900 line:-2
and the previews
from the file you're working in.


47
00:02:46,967 --> 00:02:51,138 line:-2
And Xcode adds dividers to show
where each set of previews comes from.


48
00:02:52,039 --> 00:02:55,809 line:-2
And now I can edit this color.
So let's change this to 70%.


49
00:02:55,876 --> 00:02:59,580 line:-2
It looks a little better,
but 80% looks even better.


50
00:03:00,380 --> 00:03:02,382 line:-1
But how does this look in Dark Mode?


51
00:03:02,916 --> 00:03:05,652 line:-2
I'll duplicate the preview
by clicking the "plus" button.


52
00:03:06,687 --> 00:03:08,288 line:-1
I'll select the preview,


53
00:03:09,122 --> 00:03:10,524 line:-1
open the inspector,


54
00:03:11,425 --> 00:03:13,126 line:-1
pick a dark appearance...


55
00:03:14,628 --> 00:03:18,665 line:-2
And now when I see this preview,
that gray looks a little out of place.


56
00:03:18,732 --> 00:03:21,502 line:-2
I'd like to customize this gray
for Dark Mode.


57
00:03:21,869 --> 00:03:26,039 line:-2
The recommended way to do this
is to use an asset in the Asset catalog.


58
00:03:27,975 --> 00:03:29,543 line:-1
So I'm gonna select my color.


59
00:03:29,977 --> 00:03:33,113 line:-2
And I've already set up a color,
so I'm gonna open the library,


60
00:03:33,947 --> 00:03:37,184 line:-2
go to my colors,
and pick our grid placeholder.


61
00:03:38,085 --> 00:03:42,189 line:-2
Now, nothing's changed because I haven't
customized this color yet for Dark Mode.


62
00:03:42,256 --> 00:03:43,857 line:-1
So let's go do that.


63
00:03:43,924 --> 00:03:47,127 line:-2
But when I do that,
I want to be able to edit that color,


64
00:03:47,194 --> 00:03:50,497 line:-2
again, in the context of
where I'm using it in this thumbnail.


65
00:03:51,231 --> 00:03:55,002 line:-2
So I'm gonna unpin the previews
from our layout selector


66
00:03:55,369 --> 00:03:58,438 line:-2
and re-pin the previews
for our layout thumbnail.


67
00:03:59,406 --> 00:04:02,276 line:-2
Let's go into the Asset catalog
to edit this color.


68
00:04:02,809 --> 00:04:04,211 line:-1
Here you can see that gray.


69
00:04:04,278 --> 00:04:08,382 line:-2
I'll select it, and using the inspector,
add a customization for Dark Mode.


70
00:04:09,550 --> 00:04:14,154 line:-2
You can select that customization.
I'm gonna change this to 20%.


71
00:04:15,789 --> 00:04:17,491 line:-1
Now I'll save the Asset catalog.


72
00:04:18,492 --> 00:04:19,892 line:-1
Resume the preview.


73
00:04:19,959 --> 00:04:21,762 line:-1
Xcode will rebuild the app


74
00:04:22,262 --> 00:04:25,299 line:-2
and show me what this new color looks like
in context.


75
00:04:26,033 --> 00:04:27,234 line:-1
And that looks great.


76
00:04:28,468 --> 00:04:30,938 line:-2
I want to show you
one other use-case for pinning,


77
00:04:31,004 --> 00:04:33,340 line:-2
which is by bringing in
additional previews


78
00:04:33,407 --> 00:04:36,343 line:-2
that you might not need
during the entire time you're developing.


79
00:04:38,011 --> 00:04:40,547 line:-2
Using the navigator,
I'm gonna navigate over


80
00:04:41,114 --> 00:04:43,884 line:-2
to another set of previews
in this extra previews file.


81
00:04:44,852 --> 00:04:49,256 line:-2
This is showing me several different
previews for our accessibility layouts.


82
00:04:49,890 --> 00:04:51,491 line:-1
They all look the same right now


83
00:04:51,558 --> 00:04:54,261 line:-2
because I actually haven't
customized my view yet


84
00:04:54,328 --> 00:04:56,797 line:-2
to react to
the different accessibility sizes.


85
00:04:57,731 --> 00:04:59,299 line:-1
So let's unpin the preview


86
00:05:00,000 --> 00:05:02,769 line:-2
and pin these different
accessibility previews.


87
00:05:03,637 --> 00:05:05,706 line:-1
Then I can switch back to my thumbnail.


88
00:05:08,275 --> 00:05:12,579 line:-2
And now I can scale the size
and the spacing of this thumbnail


89
00:05:12,646 --> 00:05:14,915 line:-1
based on the size category.


90
00:05:15,616 --> 00:05:18,151 line:-2
I've passed the size category in
through the environment,


91
00:05:18,719 --> 00:05:22,289 line:-2
and I've added an extension
to the content size category


92
00:05:22,356 --> 00:05:24,625 line:-2
to provide a scale
that's appropriate for my app.


93
00:05:25,826 --> 00:05:29,963 line:-2
I can use that scale
by selecting each place I need to use it


94
00:05:30,764 --> 00:05:33,567 line:-2
and multiplying
by the size category scale.


95
00:05:33,634 --> 00:05:37,671 line:-2
And now it looks great across
all these different size categories.


96
00:05:37,738 --> 00:05:41,208 line:-2
And just like you would expect,
I can continue to edit my preview


97
00:05:41,275 --> 00:05:44,578 line:-2
and see what these changes look like
across all those different sizes.


98
00:05:47,281 --> 00:05:50,384 line:-2
So that's three ways that we can
leverage previewing pinning,


99
00:05:50,450 --> 00:05:52,953 line:-2
whether it's making edits
within a larger context,


100
00:05:53,520 --> 00:05:55,856 line:-1
being able to edit non-Swift files,


101
00:05:56,523 --> 00:05:59,092 line:-2
or being able to pull in
additional previews


102
00:05:59,159 --> 00:06:00,961 line:-1
that you need for a particular task.


103
00:06:01,595 --> 00:06:03,330 line:-1
Next, we'll look at the relationship


104
00:06:03,397 --> 00:06:06,700 line:-2
between previews
and the SwiftUI app life cycle,


105
00:06:06,767 --> 00:06:10,404 line:-2
which was introduced
in iOS 14 and iPadOS 14.


106
00:06:11,338 --> 00:06:14,675 line:-2
All of our apps do
some kind of initialization at startup.


107
00:06:15,242 --> 00:06:18,078 line:-2
This might be
loading a document from disk,


108
00:06:18,145 --> 00:06:21,181 line:-2
connecting with CloudKit,
or communicating with various devices.


109
00:06:21,882 --> 00:06:25,886 line:-2
Whatever it is, the point is
that often this work is expensive.


110
00:06:26,653 --> 00:06:28,155 line:-1
What's great about previews


111
00:06:28,222 --> 00:06:32,025 line:-2
is that we can edit small and leaf views
in our project


112
00:06:32,092 --> 00:06:34,461 line:-2
and jump right to them
right in the canvas.


113
00:06:35,329 --> 00:06:39,700 line:-2
For these previews, we want to avoid
doing that expensive initialization work.


114
00:06:40,901 --> 00:06:43,036 line:-1
Now, it's important to think about this


115
00:06:43,103 --> 00:06:46,773 line:-2
in terms of defining
explicit dependencies for our data.


116
00:06:46,840 --> 00:06:50,277 line:-2
It's not so much about doing work
for previews or not for previews.


117
00:06:50,844 --> 00:06:53,413 line:-2
It's about defining
when you want that work to happen.


118
00:06:54,515 --> 00:06:59,019 line:-2
SwiftUI app life cycle gives us
just the tool to define this dependency.


119
00:06:59,586 --> 00:07:01,455 line:-1
Let's take a look at how it works.


120
00:07:02,756 --> 00:07:04,858 line:-1
Here's the definition of my app type.


121
00:07:05,726 --> 00:07:08,795 line:-2
And here as a property,
I've defined my network model.


122
00:07:08,862 --> 00:07:11,765 line:-2
So every time my app gets created,
it'll create my model.


123
00:07:12,633 --> 00:07:16,703 line:-2
Let's take a look at what my app is doing
when I'm running under previews.


124
00:07:16,770 --> 00:07:19,873 line:-2
And to do this, I'm gonna attach
a debugger to our preview.


125
00:07:20,307 --> 00:07:22,843 line:-2
I can do that by pressing
and holding the "play" button


126
00:07:22,910 --> 00:07:24,378 line:-1
and picking Debug Preview.


127
00:07:25,913 --> 00:07:28,348 line:-2
I can attach a debugger
to any of my previews,


128
00:07:28,415 --> 00:07:30,884 line:-2
and it's really great
'cause I can do two things:


129
00:07:30,951 --> 00:07:34,254 line:-2
One, if I have any breakpoints set,
I can hit those breakpoints


130
00:07:34,321 --> 00:07:37,324 line:-2
and debug why my preview
isn't showing what I expect.


131
00:07:38,258 --> 00:07:41,695 line:-2
Or, in the case of this demo,
I'm gonna give you an example


132
00:07:41,762 --> 00:07:45,165 line:-2
of how using the debug gauges
will help you see what your app is doing.


133
00:07:45,599 --> 00:07:47,301 line:-1
When I open the debug gauges,


134
00:07:47,868 --> 00:07:51,738 line:-2
I can see that my app
is doing a lot of work on startup,


135
00:07:51,805 --> 00:07:55,676 line:-2
both on the CPU, and the network
is pulling down a lot of data.


136
00:07:56,109 --> 00:07:58,378 line:-2
This is because I'm initializing
that data model.


137
00:07:59,680 --> 00:08:03,150 line:-2
For the preview that I'm looking at,
I don't need to do that work.


138
00:08:03,217 --> 00:08:07,688 line:-2
So I'm gonna take advantage of
SwiftUI's StateObject property wrapper.


139
00:08:09,156 --> 00:08:10,591 line:-1
Let's pause our preview.


140
00:08:11,625 --> 00:08:15,062 line:-2
And let's add @StateObject
to our property.


141
00:08:16,296 --> 00:08:19,867 line:-2
This will tell SwiftUI
to only initialize our data model


142
00:08:19,933 --> 00:08:21,668 line:-1
when the app is first created,


143
00:08:21,735 --> 00:08:25,539 line:-2
and it allows SwiftUI to react
to any changes in our data model.


144
00:08:26,073 --> 00:08:28,041 line:-1
Also, for previews,


145
00:08:28,108 --> 00:08:31,545 line:-2
models that are created
using StateObject are not initialized.


146
00:08:31,979 --> 00:08:34,081 line:-1
And this give us a great opportunity


147
00:08:34,147 --> 00:08:36,616 line:-2
to do work
only when we need to run our app.


148
00:08:38,217 --> 00:08:40,921 line:0
So now, let's resume our preview.


149
00:08:42,256 --> 00:08:44,024 line:-1
Let's start debugging again.


150
00:08:45,726 --> 00:08:48,161 line:-2
And let's take a look
at where our CPU is now.


151
00:08:49,129 --> 00:08:50,531 line:-1
That looks much better.


152
00:08:50,597 --> 00:08:54,501 line:-2
We're doing no unnecessary work
on the CPU or on the network.


153
00:08:55,702 --> 00:08:58,105 line:-1
So that's an example of using StateObject


154
00:08:58,172 --> 00:09:00,607 line:-2
to only initialize our data
when we actually need it.


155
00:09:01,141 --> 00:09:03,043 line:0
To learn more about StateObject,


156
00:09:03,110 --> 00:09:06,046 line:0
check out the video
"App Essentials in SwiftUI."


157
00:09:06,747 --> 00:09:11,618 line:-2
If we're not initializing our data models
as part of our StateObjects,


158
00:09:11,685 --> 00:09:13,887 line:-1
how do we get data into our previews?


159
00:09:13,954 --> 00:09:16,123 line:-1
We'll look at this in two parts.


160
00:09:16,190 --> 00:09:20,427 line:-2
First, let's look at where to define
sample data for our previews.


161
00:09:22,329 --> 00:09:24,598 line:-1
Our collage editor is a photo app.


162
00:09:25,098 --> 00:09:28,068 line:-2
So during development,
I want to have a lot of examples


163
00:09:28,135 --> 00:09:31,371 line:-2
to make sure that my effects
and my layouts are working properly.


164
00:09:32,506 --> 00:09:34,842 line:-1
So I've defined an Asset catalog


165
00:09:35,776 --> 00:09:39,947 line:-2
and added a bunch of images to it
that I can reference in my previews.


166
00:09:40,781 --> 00:09:44,618 line:-2
But I don't want to ship
all of these images in my final app.


167
00:09:45,485 --> 00:09:50,090 line:-2
So I can take advantage of Xcode's
development assets for my target.


168
00:09:51,325 --> 00:09:54,094 line:-2
So let's switch over
to our project editor,


169
00:09:54,728 --> 00:09:58,198 line:0
scroll to the bottom, and you'll see
a section here called Development Assets.


170
00:09:59,266 --> 00:10:02,135 line:-2
A development asset is a path
to a file or folder,


171
00:10:02,703 --> 00:10:07,107 line:-2
and Xcode will only include those paths
in the development version of your app.


172
00:10:08,242 --> 00:10:11,345 line:-2
If you're creating a SwiftUI app
form an Xcode template,


173
00:10:11,879 --> 00:10:15,616 line:0
the app comes pre-configured
with a development asset path for you.


174
00:10:16,149 --> 00:10:17,484 line:0
That's this one right here.


175
00:10:18,051 --> 00:10:20,220 line:0
But you can also easily add your own,


176
00:10:20,921 --> 00:10:22,222 line:0
like I've done here,


177
00:10:22,289 --> 00:10:24,658 line:-2
and you can also add them
to additional targets.


178
00:10:25,192 --> 00:10:27,761 line:-2
So I'll switch over
to my Mosaic Kit framework,


179
00:10:28,629 --> 00:10:31,465 line:-2
click the "plus" button,
type in "preview content,"


180
00:10:31,832 --> 00:10:33,934 line:-1
and find that additional preview content


181
00:10:34,001 --> 00:10:36,770 line:-2
to only include
for the development version of my app.


182
00:10:37,871 --> 00:10:39,706 line:-1
What's great about Development Assets


183
00:10:39,773 --> 00:10:44,077 line:-2
is they apply not only to files
like Asset catalogs, but also to code.


184
00:10:44,578 --> 00:10:48,415 line:-2
Let's look at what's inside that preview
content folder that we just added.


185
00:10:50,150 --> 00:10:53,954 line:-2
By using the navigator, we can
look inside and see two Swift files.


186
00:10:54,021 --> 00:10:57,291 line:-2
These Swift files contain code
that I only need for development


187
00:10:57,357 --> 00:10:59,259 line:-1
and debugging and testing my app,


188
00:10:59,326 --> 00:11:02,596 line:-2
and I don't want to include these
when my app is actually deployed.


189
00:11:02,663 --> 00:11:04,765 line:-1
So that demo was mainly about defining


190
00:11:04,831 --> 00:11:08,669 line:-2
where to define our preview assets
and resources and code.


191
00:11:09,236 --> 00:11:12,773 line:-2
But how about actually
feeding that data into our previews?


192
00:11:12,840 --> 00:11:16,210 line:-2
Well, for this, we're gonna make
our views themselves previewable.


193
00:11:16,276 --> 00:11:18,545 line:-2
And this is really
where we're gonna see the payoff


194
00:11:18,612 --> 00:11:21,148 line:-2
in structuring our app
to make it more previewable.


195
00:11:22,449 --> 00:11:24,384 line:-1
I want to start with a big idea.


196
00:11:25,018 --> 00:11:27,621 line:-2
What makes our apps unique
is the user experience.


197
00:11:28,322 --> 00:11:32,159 line:-2
But behind our unique user experience
is a unique data model.


198
00:11:32,526 --> 00:11:34,661 line:-1
I call this a rich data type.


199
00:11:35,195 --> 00:11:37,731 line:-2
It could be something from Core Data
or from CloudKit


200
00:11:37,798 --> 00:11:39,499 line:-1
or something custom that we've built.


201
00:11:40,033 --> 00:11:41,401 line:-1
But at the end of the day,


202
00:11:41,468 --> 00:11:45,038 line:-2
our users are gonna interact
with our apps using simple data types.


203
00:11:45,105 --> 00:11:48,709 line:-2
This might a be a string in a text field
or a Boolean in a Toggle.


204
00:11:49,543 --> 00:11:51,979 line:-1
And in between is all of our views.


205
00:11:52,446 --> 00:11:56,450 line:0
And those translate the rich data type
into the simple data type.


206
00:11:57,150 --> 00:12:01,255 line:-2
The question is, where in our view
hierarchy should we do this translation?


207
00:12:02,222 --> 00:12:06,560 line:-2
Now, as a general rule of thumb,
the sooner that we do this translation


208
00:12:06,627 --> 00:12:09,396 line:-2
from our rich type
into our simpler data types,


209
00:12:09,863 --> 00:12:14,201 line:-2
the more reusable, testable,
and previewable our app is gonna be.


210
00:12:14,701 --> 00:12:19,773 line:-2
The big incentive here is that we want to
make it easy for us to add previews


211
00:12:20,240 --> 00:12:25,045 line:-2
so that we can test our app in all of
the configurations so they all look great.


212
00:12:26,113 --> 00:12:29,349 line:-2
We'll look at four examples
of how to structure our views


213
00:12:29,416 --> 00:12:31,285 line:-1
to make them more previewable.


214
00:12:31,351 --> 00:12:36,223 line:-2
First, we'll look at at an example
of passing immutable, simple data types


215
00:12:36,290 --> 00:12:39,226 line:-2
into a view
that doesn't need to change the values.


216
00:12:39,293 --> 00:12:42,763 line:-2
Secondly, we'll look at an example
of using SwiftUI bindings


217
00:12:43,297 --> 00:12:46,567 line:-2
to pass simple data types into a view,
an inspector,


218
00:12:46,633 --> 00:12:48,602 line:-1
that does need to change those values.


219
00:12:49,236 --> 00:12:51,405 line:0
Third, we'll use generics


220
00:12:51,471 --> 00:12:55,142 line:0
so that we can pass an abstraction
of our data into a view


221
00:12:55,209 --> 00:12:57,744 line:0
so that we can pass that on
to other views.


222
00:12:58,545 --> 00:13:01,949 line:0
And finally, we'll look at an example
a little different from the others


223
00:13:02,015 --> 00:13:05,219 line:0
and use the environment
to pass inputs into our view.


224
00:13:05,619 --> 00:13:08,488 line:-2
So first,
let's look at an example of passing


225
00:13:08,555 --> 00:13:13,827 line:-2
immutable, simple data types into our cell
for adding a collaborator for our collage.


226
00:13:14,895 --> 00:13:18,098 line:-2
We'll start by looking at the data model
behind our collaborator.


227
00:13:18,165 --> 00:13:22,069 line:-2
It has some simple types, like this color
and last contribution date,


228
00:13:22,135 --> 00:13:25,906 line:-2
but most of the model
is backed by the CKUserIdentity.


229
00:13:26,673 --> 00:13:28,675 line:-1
So now, let's go look at the cell.


230
00:13:32,412 --> 00:13:35,816 line:-2
Our cell takes a collaborator
as an input as an observed object.


231
00:13:36,350 --> 00:13:37,784 line:-1
So, let's create a preview.


232
00:13:40,287 --> 00:13:43,156 line:-2
I'll create the cell,
and then need to create a collaborator.


233
00:13:44,024 --> 00:13:47,461 line:-2
When I get to the point
of filling in the CKUserIdentity,


234
00:13:47,528 --> 00:13:51,532 line:-2
I know that I need to create
a fetch operation on our CK database.


235
00:13:52,032 --> 00:13:54,535 line:-1
But our data model for CloudKit


236
00:13:54,601 --> 00:13:57,504 line:-2
was exactly what we turned off
in one of the previous demos.


237
00:13:57,871 --> 00:14:00,407 line:-2
For this view,
I don't actually need the full model.


238
00:14:00,941 --> 00:14:03,510 line:-1
So let's look at another way to do this.


239
00:14:03,577 --> 00:14:06,046 line:-1
This brings up a really important idea,


240
00:14:06,113 --> 00:14:09,883 line:-2
which is to look at the UI that
you're building, and look at your model,


241
00:14:09,950 --> 00:14:12,319 line:-1
and identify the minimum amount of data


242
00:14:12,386 --> 00:14:15,022 line:-2
that you need to pass through your model
into the view.


243
00:14:16,190 --> 00:14:18,959 line:-2
So let's look at another example
of our CollaboratorCell.


244
00:14:21,862 --> 00:14:25,032 line:-1
In this cell, we're passing the name,


245
00:14:25,098 --> 00:14:29,469 line:-2
the image, and the connection status
as individual simple inputs.


246
00:14:30,337 --> 00:14:33,774 line:0
So now, creating a preview for this
is really easy.


247
00:14:34,441 --> 00:14:36,343 line:0
So, we'll create a CollaboratorCell...


248
00:14:37,110 --> 00:14:39,880 line:0
And this is gonna take that name--
we'll say Jane Doe--


249
00:14:41,181 --> 00:14:43,750 line:0
an image-- for now
we'll just pass an empty image--


250
00:14:44,685 --> 00:14:46,220 line:0
and the status.


251
00:14:47,120 --> 00:14:48,989 line:0
And we'll start with Jane on-line.


252
00:14:49,456 --> 00:14:52,326 line:-2
And just like that,
I have a preview for that cell.


253
00:14:52,392 --> 00:14:56,763 line:-2
What's great is it's really easy to create
multiple configurations of this cell.


254
00:14:57,631 --> 00:14:59,900 line:-2
So I'm gonna duplicate this preview
a few times.


255
00:15:02,035 --> 00:15:04,171 line:0
And one of these, I'll make Jane off-line.


256
00:15:05,239 --> 00:15:06,840 line:0
And we'll give her an image.


257
00:15:07,307 --> 00:15:10,210 line:-2
So, open up our Asset Catalog
and pick an image.


258
00:15:11,278 --> 00:15:15,382 line:-2
And we'll also make sure the text is gonna
properly resize as it gets larger.


259
00:15:16,216 --> 00:15:19,419 line:-2
So we'll give her
a really long middle name.


260
00:15:20,621 --> 00:15:24,224 line:-2
And that's just how easy it is to create
multiple configurations


261
00:15:24,291 --> 00:15:26,593 line:-1
with these simple data types as inputs.


262
00:15:27,461 --> 00:15:30,063 line:-2
But sometimes we can make
our data types too simple.


263
00:15:30,664 --> 00:15:35,002 line:-2
This can happen when we want the system
to format a value


264
00:15:35,068 --> 00:15:38,238 line:-2
based on the locale
that your user is using in the app.


265
00:15:38,906 --> 00:15:42,042 line:-2
For example, with a date, or in this case,
with a name.


266
00:15:42,676 --> 00:15:46,346 line:-2
So instead of passing a string in
for our name,


267
00:15:46,413 --> 00:15:49,516 line:-1
we're gonna pass in PersonNameComponents.


268
00:15:50,784 --> 00:15:54,555 line:-2
And now we can tell SwiftUI
to format the text for this name


269
00:15:54,621 --> 00:15:56,290 line:-1
at exactly the right time.


270
00:15:56,356 --> 00:15:59,026 line:-1
This is as easy as defining a formatter...


271
00:16:00,928 --> 00:16:03,797 line:-2
and then passing that formatter
into our text.


272
00:16:05,165 --> 00:16:09,269 line:-2
Finally, let's update our previews to
create name components instead of strings.


273
00:16:10,938 --> 00:16:14,174 line:-2
So I'll select each instance
of my static string...


274
00:16:15,776 --> 00:16:18,946 line:-2
and replace it with a call
to create the PersonNameComponents.


275
00:16:19,680 --> 00:16:22,983 line:-2
Now, I can refresh my preview,
and you can see how easy it is


276
00:16:23,050 --> 00:16:25,285 line:-2
to create one of these
PersonNameComponents


277
00:16:25,352 --> 00:16:28,288 line:-2
and still give me
all the configuration that I need.


278
00:16:29,623 --> 00:16:32,559 line:0
Now we can also add in that example
with the middle name.


279
00:16:32,626 --> 00:16:36,296 line:0
So we'll say "Really Long Middle."


280
00:16:37,831 --> 00:16:40,534 line:-2
And just like that,
all my previews look great,


281
00:16:40,601 --> 00:16:42,970 line:-2
and I can see
all these different configurations.


282
00:16:43,537 --> 00:16:46,640 line:-2
So when you can,
you wanna make the inputs to your views


283
00:16:46,707 --> 00:16:48,542 line:-1
simple, immutable data types.


284
00:16:48,976 --> 00:16:52,012 line:-2
But sometimes our viewers
need to actually change values.


285
00:16:52,579 --> 00:16:56,483 line:-2
So, second, let's look at an example
of using SwiftUI bindings


286
00:16:56,550 --> 00:16:59,520 line:-2
to pass in a simple data type
that our viewer can change.


287
00:17:01,221 --> 00:17:02,923 line:-1
So in this inspector,


288
00:17:02,990 --> 00:17:06,660 line:-2
I'm passing in the slot data
for an image as an observed object.


289
00:17:07,194 --> 00:17:10,497 line:-2
A slot just represents
one of the photos on our collage.


290
00:17:10,564 --> 00:17:13,700 line:-2
Let's take a look
at that ImageSlot data type.


291
00:17:15,135 --> 00:17:18,305 line:-2
Now, this has some simple types,
but really,


292
00:17:18,372 --> 00:17:22,142 line:-2
the core of this
is a backing ClockKit record.


293
00:17:22,209 --> 00:17:26,213 line:-2
As we saw from our previous examples,
in order for me to create a record,


294
00:17:26,280 --> 00:17:30,083 line:-2
I'm gonna need to have that
full ClockKit data model all pulled in.


295
00:17:30,751 --> 00:17:33,353 line:-2
I wanna make it really easy
to create previews,


296
00:17:33,420 --> 00:17:37,157 line:-2
so I'm gonna apply that same idea
that I did in the previous demo.


297
00:17:37,224 --> 00:17:39,993 line:-2
I'm gonna look at the UI
and pick out just the pieces


298
00:17:40,060 --> 00:17:42,396 line:-1
that my UI actually needs to edit.


299
00:17:43,564 --> 00:17:46,266 line:-2
So let's switch
to a different version of our inspector.


300
00:17:47,734 --> 00:17:50,838 line:-2
And in this case, we're passing
a binding in for our SlotEffects.


301
00:17:50,904 --> 00:17:52,339 line:-1
This is a really simple type


302
00:17:52,406 --> 00:17:55,475 line:-2
that just has some floating-point values
for each of our different filters.


303
00:17:55,976 --> 00:17:58,278 line:-1
It's really easy to create previews.


304
00:17:59,546 --> 00:18:03,283 line:-2
So I'm gonna create an inspector
and pass in some effects.


305
00:18:03,350 --> 00:18:05,953 line:-2
And you can see here
I'm using a constant binding,


306
00:18:06,019 --> 00:18:09,590 line:-2
which just means that in this view,
the binding can't be changed.


307
00:18:09,656 --> 00:18:11,491 line:-1
But that's actually what we want to test.


308
00:18:11,558 --> 00:18:15,362 line:-2
So let's add an example where we can
actually change the value of this binding.


309
00:18:15,429 --> 00:18:19,433 line:-2
To do that for previews,
I'm gonna introduce an intermediate view


310
00:18:19,499 --> 00:18:23,136 line:-2
that will store some state
that I can pass as a binding into my view.


311
00:18:25,839 --> 00:18:27,307 line:-1
So let's define my view...


312
00:18:28,342 --> 00:18:30,177 line:-1
and let's define a new preview


313
00:18:30,978 --> 00:18:33,714 line:-2
that creates that new view
and passes in some effects.


314
00:18:34,314 --> 00:18:35,949 line:-1
Those effects are stored as state,


315
00:18:36,016 --> 00:18:38,352 line:-2
and our inspector passes them in
as a binding.


316
00:18:40,354 --> 00:18:42,222 line:0
And now, when we resume our preview,


317
00:18:42,956 --> 00:18:44,525 line:0
we can take this preview live...


318
00:18:45,659 --> 00:18:49,096 line:-2
and we can interact with it
right here in the canvas.


319
00:18:49,897 --> 00:18:52,366 line:-2
There's one more piece of UI
I want to add here,


320
00:18:52,432 --> 00:18:55,335 line:-2
which is a button that allows me
to replace the photo.


321
00:18:56,036 --> 00:18:59,873 line:-2
I could pass in the whole image slot
data type into this view


322
00:18:59,940 --> 00:19:02,042 line:-1
and do all the replacement logic here,


323
00:19:02,109 --> 00:19:05,479 line:-2
but really,
I want clients to decide how to do that.


324
00:19:05,546 --> 00:19:07,881 line:-1
So instead, I'm gonna pass in a closure


325
00:19:07,948 --> 00:19:10,184 line:-2
that will get called
when the button is pressed.


326
00:19:13,053 --> 00:19:16,723 line:-2
So I'm gonna add a closure as an input,
and let's add that button.


327
00:19:18,458 --> 00:19:22,596 line:-2
This is just a simple button that calls
that replacePhotoHandler.


328
00:19:22,663 --> 00:19:26,834 line:-2
And now let's go update our previews
to provide a value for this callback.


329
00:19:29,770 --> 00:19:32,706 line:-2
For the first one,
I'll just pass an empty closure.


330
00:19:32,773 --> 00:19:36,410 line:-2
But for the second one, I wanna make sure
that button is actually working.


331
00:19:37,211 --> 00:19:41,949 line:-2
So for that, I'm actually gonna have
my callback just change our effects,


332
00:19:42,015 --> 00:19:43,951 line:-1
so I can see that it's working.


333
00:19:44,885 --> 00:19:46,920 line:-1
And now, when we resume the preview...


334
00:19:49,890 --> 00:19:53,093 line:-2
As we click our button,
you can see that saturation is going down.


335
00:19:54,127 --> 00:19:56,930 line:-2
But what's great about previews
is that I can interact with it


336
00:19:56,997 --> 00:19:59,233 line:-1
not only right here on the canvas,


337
00:19:59,299 --> 00:20:03,537 line:-2
but I can interact with it in multiple
places by using on-device previews.


338
00:20:03,937 --> 00:20:06,306 line:-1
So I have an iPhone XR here in Dark Mode,


339
00:20:06,373 --> 00:20:09,443 line:-2
and I want to put that same preview
on that device as well.


340
00:20:09,977 --> 00:20:11,378 line:-1
I'll click the "device" button,


341
00:20:12,212 --> 00:20:13,514 line:-1
click my iPhone XR...


342
00:20:15,249 --> 00:20:18,852 line:-2
and Xcode will now mirror this preview
onto a device.


343
00:20:20,053 --> 00:20:22,789 line:-2
And just like before,
I can fully interact with it


344
00:20:22,856 --> 00:20:24,525 line:-1
right here on the device.


345
00:20:25,592 --> 00:20:30,130 line:-1
Now, in Xcode 12 and iOS 14 and iPadOS 14,


346
00:20:30,197 --> 00:20:32,833 line:-2
there's a new experience
for on-device previews.


347
00:20:32,900 --> 00:20:34,067 line:-1
As you make changes,


348
00:20:34,134 --> 00:20:36,870 line:-2
they're seamlessly reflected
on to your devices.


349
00:20:37,638 --> 00:20:41,842 line:-2
You'll notice that the first time
you use on-device previews with Xcode 12


350
00:20:41,909 --> 00:20:44,811 line:-2
that an icon appears on your Home Screen
called Xcode Previews.


351
00:20:45,546 --> 00:20:47,247 line:-1
By tapping this icon,


352
00:20:47,314 --> 00:20:49,883 line:-2
you can get back to the last preview
you were looking at


353
00:20:49,950 --> 00:20:53,253 line:-2
even if your phone is disconnected
from Xcode.


354
00:20:53,687 --> 00:20:57,124 line:-2
This makes it great
for being able to make some changes,


355
00:20:57,191 --> 00:21:00,060 line:-2
put them in a preview,
and go show your colleagues.


356
00:21:00,127 --> 00:21:02,429 line:-1
So that's a quick look at using bindings.


357
00:21:02,496 --> 00:21:05,232 line:-2
So we can keep using
simple data types for our inputs


358
00:21:05,299 --> 00:21:07,534 line:-2
while also allowing our views
to mutate them.


359
00:21:08,335 --> 00:21:10,804 line:-2
But there are cases
when we need to pass richer data types


360
00:21:10,871 --> 00:21:13,273 line:-1
from one view to another.


361
00:21:13,340 --> 00:21:17,311 line:0
So third,
let's look at an example of using generics


362
00:21:17,377 --> 00:21:21,181 line:0
to pass data
into the main editor for our collage.


363
00:21:21,715 --> 00:21:25,786 line:-2
So let me switch over first to show
what the model for our collage looks like.


364
00:21:27,187 --> 00:21:28,755 line:-1
Like the other types that we have,


365
00:21:28,822 --> 00:21:31,825 line:-2
it's backed
by this CloudKit CKShare record.


366
00:21:31,892 --> 00:21:34,194 line:-2
Now, as with the other examples
that we've seen,


367
00:21:34,261 --> 00:21:35,963 line:-1
I'm gonna need that full data model


368
00:21:36,029 --> 00:21:39,066 line:-2
in order to create
one of these collage model objects


369
00:21:39,132 --> 00:21:41,235 line:-1
and pass it into a preview.


370
00:21:41,301 --> 00:21:43,971 line:-2
We could use the approach
we used in our previous demo,


371
00:21:44,037 --> 00:21:46,340 line:-1
and use bindings to pass in the data.


372
00:21:46,406 --> 00:21:47,674 line:-1
Let's try that.


373
00:21:49,042 --> 00:21:51,612 line:-2
so I'll switch over
to the Editor for our collage.


374
00:21:52,613 --> 00:21:56,550 line:-2
And here you can see it's taking
a binding in for the name and the layout,


375
00:21:56,617 --> 00:21:59,286 line:-2
which are simple types,
and for the slot data.


376
00:21:59,853 --> 00:22:01,388 line:-1
So let's create a preview.


377
00:22:04,525 --> 00:22:07,995 line:-2
I'm gonna provide a name
using a constant binding for now,


378
00:22:08,061 --> 00:22:10,130 line:-1
and the layout using a constant binding.


379
00:22:10,864 --> 00:22:12,432 line:-1
But when I get to the slot data,


380
00:22:12,499 --> 00:22:16,703 line:-2
I noticed that the slot data
is still using that rich data type


381
00:22:16,770 --> 00:22:19,306 line:-1
that we used in a previous demo.


382
00:22:19,373 --> 00:22:24,344 line:-2
This is gonna make it difficult for me to
pass in data for each one of my previews.


383
00:22:24,411 --> 00:22:26,680 line:-1
So even though I'm using bindings,


384
00:22:26,747 --> 00:22:29,416 line:-2
I still can't pass in the data
that I actually need.


385
00:22:30,317 --> 00:22:34,154 line:-2
Let's step back and use that same approach
we've been using for our other demos,


386
00:22:34,221 --> 00:22:36,056 line:-1
to think about the UI that we're building


387
00:22:36,123 --> 00:22:39,459 line:-2
and the minimum amount of data
that we need from our model


388
00:22:39,526 --> 00:22:41,128 line:-1
to create that UI.


389
00:22:41,695 --> 00:22:44,898 line:-2
And in this example,
we're gonna define a protocol


390
00:22:44,965 --> 00:22:47,935 line:-2
to create an abstraction
of exactly what we need.


391
00:22:50,604 --> 00:22:55,442 line:-2
So let's look at this abstraction,
which is called a CollageProtocol.


392
00:22:55,809 --> 00:22:58,946 line:-2
This defines everything
that a collage needs to have


393
00:22:59,012 --> 00:23:01,081 line:-1
in order to be editable by our UI.


394
00:23:01,915 --> 00:23:05,819 line:-2
I have a name, a layout,
and some slot data,


395
00:23:05,886 --> 00:23:09,122 line:-1
but that slot data is also an abstraction.


396
00:23:09,823 --> 00:23:14,061 line:-2
Each slot in our collage
must have an imagePublisher.


397
00:23:14,127 --> 00:23:18,365 line:-2
It's a publisher because that data could
be asynchronously provided from the cloud,


398
00:23:18,432 --> 00:23:20,968 line:-1
already on disk or in an error state.


399
00:23:21,768 --> 00:23:23,937 line:-1
And it's also providing those effects.


400
00:23:25,172 --> 00:23:27,941 line:-1
Now that we have this collage protocol,


401
00:23:28,008 --> 00:23:32,546 line:-2
we can define a Design Time version
of our model that's really easy to create.


402
00:23:33,547 --> 00:23:36,550 line:-2
So I've done that
over here in the preview content


403
00:23:37,284 --> 00:23:38,986 line:-1
for our framework.


404
00:23:40,020 --> 00:23:44,725 line:-2
You can see that this Design Time collage
has a name and a layout and some slots,


405
00:23:44,791 --> 00:23:46,860 line:-1
and that's using this DesignTimeSlot.


406
00:23:47,761 --> 00:23:50,864 line:-2
The DesignTimeSlot
has a publisher and some effects.


407
00:23:51,365 --> 00:23:54,501 line:-2
So now let's go look
at a version of our editor


408
00:23:54,568 --> 00:23:57,604 line:-2
that allows passing in
this Design Time version of our model.


409
00:24:01,241 --> 00:24:03,243 line:-1
So I'll switch over to the editor here.


410
00:24:03,310 --> 00:24:06,947 line:-2
And this collage editor is generic
over two things.


411
00:24:07,014 --> 00:24:10,417 line:-1
First, it's generic over the collage type,


412
00:24:10,484 --> 00:24:13,587 line:-2
which conforms to that collage protocol
that we just saw.


413
00:24:13,654 --> 00:24:16,723 line:-1
It's also generic over an ImagePickerType.


414
00:24:16,790 --> 00:24:20,861 line:-2
This allows me to define
a simpler UI for Design Time


415
00:24:20,928 --> 00:24:24,464 line:-1
to allow picking a photo for that collage


416
00:24:24,531 --> 00:24:28,502 line:-2
instead of having to go to the full photo
library every time I want to test it.


417
00:24:29,937 --> 00:24:34,341 line:-2
So now you'll see how easy it is
to create previews for our collage editor.


418
00:24:36,710 --> 00:24:39,646 line:-2
So just call our collage editor.
That's gonna take two inputs.


419
00:24:40,247 --> 00:24:41,715 line:-1
First, our collage.


420
00:24:42,850 --> 00:24:44,551 line:-1
Do a Design Time collage.


421
00:24:45,085 --> 00:24:47,487 line:-2
And this, as we saw,
takes a couple inputs.


422
00:24:47,554 --> 00:24:50,858 line:-2
It takes a name,
which we'll just call "My Collage."


423
00:24:50,924 --> 00:24:54,228 line:-1
Takes a layout. We'll start with twoByTwo.


424
00:24:54,294 --> 00:24:55,929 line:-1
And it takes some slot data.


425
00:24:55,996 --> 00:24:58,832 line:-2
For now,
we'll just pass in some empty data.


426
00:25:00,200 --> 00:25:03,036 line:-2
It also takes a closure
for making this photo picker.


427
00:25:03,103 --> 00:25:05,739 line:-2
I've created a Design Time version
of this photo picker


428
00:25:05,806 --> 00:25:07,441 line:-1
that just draws on images


429
00:25:07,508 --> 00:25:10,544 line:-2
from that previews asset catalog
that we saw earlier.


430
00:25:13,113 --> 00:25:17,451 line:-2
And just like that,
I have a preview for my collage editor,


431
00:25:17,518 --> 00:25:19,953 line:-1
and it's completely functional.


432
00:25:20,020 --> 00:25:24,057 line:-2
But it's using
that Design Time simpler data model.


433
00:25:25,225 --> 00:25:28,629 line:-2
And, because it's a view,
I can also add view-specific modifiers.


434
00:25:29,196 --> 00:25:31,198 line:-1
So let's give it a bit of padding.


435
00:25:32,633 --> 00:25:37,371 line:-2
And now I can test this collage editor
right here in the canvas.


436
00:25:38,238 --> 00:25:39,773 line:-1
By clicking the "play" button...


437
00:25:41,074 --> 00:25:44,711 line:-2
I can double-tap on a slot
and pick a photo


438
00:25:44,778 --> 00:25:47,214 line:-1
or maybe pick a different layout.


439
00:25:48,215 --> 00:25:53,487 line:-2
Also, I can pass in examples
of our Design Time slot data.


440
00:25:54,621 --> 00:25:56,924 line:-2
So I can pick an address--
The address is--


441
00:25:56,990 --> 00:25:59,593 line:-1
Think of it like a row in a column.


442
00:25:59,660 --> 00:26:03,363 line:-2
And then I can pass in an example
of our DesignTimeImageSlot.


443
00:26:03,430 --> 00:26:06,400 line:-2
This is just taking one of the images
from our asset catalog


444
00:26:06,466 --> 00:26:08,168 line:-1
and passing in some empty effects.


445
00:26:09,203 --> 00:26:12,706 line:-2
And I can see what it looks like
if it's in the second column


446
00:26:12,773 --> 00:26:17,044 line:-2
or in the second row
or maybe a different image,


447
00:26:17,110 --> 00:26:19,346 line:-1
or I can even pass in some effects.


448
00:26:19,413 --> 00:26:23,584 line:-2
So I want to see
what the saturation looks like at 50%.


449
00:26:25,485 --> 00:26:29,223 line:-2
This looks great on iPhone,
but how does it look on iPad?


450
00:26:29,923 --> 00:26:33,794 line:-2
Like the last example, we're also
gonna put this preview on-device.


451
00:26:34,695 --> 00:26:38,198 line:-2
I can select the On Device button
and select "My iPad."


452
00:26:38,732 --> 00:26:42,236 line:-2
And this'll let me see
what this collage editor looks like


453
00:26:42,669 --> 00:26:44,371 line:-1
on an iPad in landscape.


454
00:26:45,138 --> 00:26:48,442 line:-2
Just like the version in my canvas,
this is fully interactive.


455
00:26:48,942 --> 00:26:51,478 line:-1
I double-tap, pick a photo,


456
00:26:51,545 --> 00:26:54,948 line:-2
and I can even open the inspector
and add some effects.


457
00:26:56,083 --> 00:27:00,087 line:-2
I was able to test all the functionality
for this collage editor


458
00:27:00,153 --> 00:27:03,423 line:-2
without ever creating
my CloudKit-backed data model


459
00:27:03,490 --> 00:27:06,527 line:-2
and just using
the Design Time version of my data model.


460
00:27:07,561 --> 00:27:11,265 line:0
Fourth, let's look at an example
that's a little different from the others.


461
00:27:11,331 --> 00:27:12,332 line:0
When you can,


462
00:27:12,399 --> 00:27:15,869 line:0
you should define explicit
data dependencies between your views


463
00:27:15,936 --> 00:27:17,638 line:0
by defining inputs on them.


464
00:27:18,305 --> 00:27:22,776 line:-2
But sometimes it's convenient
to pass data through the environment.


465
00:27:23,343 --> 00:27:27,014 line:-2
Let's look at the relationship
between previews and the environment


466
00:27:27,080 --> 00:27:29,249 line:-1
by adding some previews for the view


467
00:27:29,316 --> 00:27:32,152 line:-2
that shows the status
of syncing with our cloud.


468
00:27:34,521 --> 00:27:37,291 line:-1
So let's switch over to our CloudSyncView.


469
00:27:38,959 --> 00:27:42,963 line:-2
Our CloudSyncStatusView takes
the CloudSyncStatus as an input


470
00:27:43,030 --> 00:27:44,498 line:-1
as an EnvironmentObject.


471
00:27:45,165 --> 00:27:47,601 line:-2
In SwiftUI,
when you have an EnvironmentObject,


472
00:27:47,668 --> 00:27:51,805 line:-2
you need to provide a value
for that object higher in the hierarchy.


473
00:27:52,206 --> 00:27:53,941 line:-1
When you're creating previews


474
00:27:54,007 --> 00:27:56,944 line:-2
for these views that take
EnvironmentObjects as inputs,


475
00:27:57,010 --> 00:28:00,047 line:-2
you also need to provide a value
for each preview.


476
00:28:00,113 --> 00:28:01,448 line:-1
Let's see how that works.


477
00:28:03,150 --> 00:28:06,153 line:-1
So I'll create a CloudSyncStatusView...


478
00:28:08,055 --> 00:28:12,192 line:-2
and then attach
the EnvironmentObject modifier.


479
00:28:14,795 --> 00:28:16,430 line:-1
I'll create a CloudSyncStatus,


480
00:28:16,496 --> 00:28:20,467 line:-2
and there's a preview of what my view
looks like when our cloud is on-line.


481
00:28:21,235 --> 00:28:22,970 line:-1
But just like with our other examples,


482
00:28:23,036 --> 00:28:25,439 line:-2
it's so easy to add
multiple configurations


483
00:28:25,506 --> 00:28:27,040 line:-1
when you're using environment.


484
00:28:27,841 --> 00:28:29,409 line:0
So I'll duplicate my preview...


485
00:28:30,711 --> 00:28:33,180 line:0
and this time, I'm gonna pass in


486
00:28:33,247 --> 00:28:36,917 line:0
what happens when our cloud is off-line.


487
00:28:38,919 --> 00:28:42,723 line:-2
So there's my icon
for the cloud being off-line.


488
00:28:42,789 --> 00:28:44,424 line:-1
Let's duplicate it again,


489
00:28:44,491 --> 00:28:48,762 line:-2
and let's make sure we can correctly show
the time of when it last synced.


490
00:28:49,530 --> 00:28:51,465 line:0
So we do lastSync,


491
00:28:51,532 --> 00:28:55,302 line:0
and let's try "a few hours ago."


492
00:28:57,271 --> 00:29:00,174 line:0
Finally, to make sure
that we're covering all of our bases,


493
00:29:01,275 --> 00:29:05,212 line:0
let's look at when the cloud is on-line
and having just recently synced.


494
00:29:07,381 --> 00:29:09,750 line:-2
So there's an example
of using the environment


495
00:29:09,816 --> 00:29:13,654 line:-2
to pass inputs to our views,
and just like with other explicit inputs,


496
00:29:13,720 --> 00:29:17,724 line:-2
it's really easy to create
multiple configurations of our previews


497
00:29:17,791 --> 00:29:19,726 line:-1
when we're using these simpler types.


498
00:29:20,894 --> 00:29:21,929 line:-1
For our last example,


499
00:29:21,995 --> 00:29:25,566 line:-2
I want to bring together all the things
we've been seeing in this video.


500
00:29:26,066 --> 00:29:30,037 line:-2
So let's switch over
to the root view of our app.


501
00:29:31,905 --> 00:29:36,577 line:-2
This root view, like our collage editor,
is generic over two things:


502
00:29:36,643 --> 00:29:39,780 line:-2
first, the CollageType,
which is that CollageProtocol,


503
00:29:39,847 --> 00:29:41,582 line:-1
and the ImagePickerType.


504
00:29:42,516 --> 00:29:45,552 line:-1
I've defined an intermediate view


505
00:29:45,619 --> 00:29:49,089 line:-2
that has some state
which is storing our collages


506
00:29:49,156 --> 00:29:51,892 line:-2
which are the Design Time collages
that we made earlier.


507
00:29:53,360 --> 00:29:58,365 line:-2
Then it's creating one of those root views
and passing the collages in as a binding.


508
00:29:59,066 --> 00:30:02,236 line:-2
There's also an action callback
when the "plus" button is pressed


509
00:30:02,302 --> 00:30:05,405 line:-2
that allows me to create
one of these Design Time collages,


510
00:30:05,472 --> 00:30:08,675 line:-2
and because it's so easy to create
one of the Design Time collages,


511
00:30:08,742 --> 00:30:10,511 line:-1
this closure is simple to fill in.


512
00:30:11,578 --> 00:30:15,082 line:-2
And finally, it's passing in
the DesignTimePhotoPicker.


513
00:30:16,083 --> 00:30:17,651 line:-1
When I actually use my preview,


514
00:30:17,718 --> 00:30:21,288 line:-2
then I'm attaching an EnvironmentObject
with our CloudSyncStatus.


515
00:30:22,422 --> 00:30:26,827 line:-2
And now, I have a fully functional version
of my application


516
00:30:26,894 --> 00:30:28,662 line:-1
right here in the canvas.


517
00:30:29,329 --> 00:30:30,898 line:-1
I click the "play" button.


518
00:30:30,964 --> 00:30:33,667 line:-2
I can click the "plus" button
to add a new collage,


519
00:30:33,734 --> 00:30:36,937 line:-2
go in, pick a different layout,
maybe pick a photo.


520
00:30:38,005 --> 00:30:42,476 line:-2
I can go back,
and I can delete it by swiping to delete.


521
00:30:43,577 --> 00:30:46,747 line:-2
And I can also make changes live
to this view.


522
00:30:47,281 --> 00:30:48,982 line:-1
So let's pin the preview,


523
00:30:49,616 --> 00:30:52,853 line:-2
and I'd like to make the thumbnail
a little bit bigger here.


524
00:30:53,820 --> 00:30:57,824 line:-2
So to do that,
I'm gonna switch over to our Collage List


525
00:30:59,092 --> 00:31:01,495 line:-2
to the collage label
that shows the thumbnail


526
00:31:01,562 --> 00:31:03,096 line:-1
for our collage and the title.


527
00:31:03,997 --> 00:31:08,335 line:-2
Now I can go into this value
and change it to something a bit bigger.


528
00:31:08,402 --> 00:31:12,472 line:-2
Okay, maybe that was a little too big.
Let's go back to 30. That looks great.


529
00:31:13,607 --> 00:31:16,710 line:-1
Now finally, this looks great in iPhone,


530
00:31:16,777 --> 00:31:21,081 line:-2
but how does it look in an iPhone
in dark appearance or on the iPad?


531
00:31:21,481 --> 00:31:25,219 line:-2
So we can see
multiple on-device previews at once.


532
00:31:25,919 --> 00:31:28,055 line:-2
I'm gonna click
my on-device preview button


533
00:31:28,121 --> 00:31:31,992 line:-2
and select both devices,
my iPhone and my iPad.


534
00:31:33,193 --> 00:31:37,731 line:-2
And now Xcode is putting
fully functional versions of my app


535
00:31:37,798 --> 00:31:39,433 line:-1
on all of these devices.


536
00:31:39,499 --> 00:31:43,070 line:-2
In the canvas, I could, you know, again,
add and swipe to delete.


537
00:31:43,804 --> 00:31:46,373 line:-2
On my iPhone,
I could go into the portraits here


538
00:31:46,440 --> 00:31:48,075 line:-1
and maybe pick a different layout.


539
00:31:48,141 --> 00:31:50,377 line:-1
Oh, that looks a lot better. Go back.


540
00:31:50,444 --> 00:31:52,446 line:-1
On my iPad, I can select a collage,


541
00:31:53,046 --> 00:31:54,181 line:-1
pick a photo,


542
00:31:54,815 --> 00:31:56,350 line:-1
and open up the effects...


543
00:31:58,585 --> 00:32:02,155 line:-2
and test all of that functionality
without ever running my app.


544
00:32:02,789 --> 00:32:04,925 line:-1
And what's great is when I make edits,


545
00:32:04,992 --> 00:32:08,295 line:-2
it reflects on all these devices
at the same time.


546
00:32:08,896 --> 00:32:10,364 line:-1
So I'll select that 30.


547
00:32:11,198 --> 00:32:12,933 line:-1
I'll change it to a 90.


548
00:32:13,000 --> 00:32:16,003 line:-2
And now I can really make sure
that I see that thumbnail.


549
00:32:16,537 --> 00:32:19,806 line:-2
I hope you can see
just how powerful previews can be


550
00:32:19,873 --> 00:32:22,376 line:-2
when you're defining abstractions
for your data


551
00:32:22,442 --> 00:32:25,212 line:-2
and using multiple previews
and multiple contexts


552
00:32:25,279 --> 00:32:29,082 line:-2
to test all of your configurations
without ever running your app.


553
00:32:30,384 --> 00:32:32,219 line:-1
So there's four examples


554
00:32:32,286 --> 00:32:35,923 line:-2
of how to structure your views
to make them more previewable.


555
00:32:36,890 --> 00:32:39,193 line:-1
Now, we've seen a lot in this video.


556
00:32:39,693 --> 00:32:43,730 line:-2
First, we looked at how to preview
multiple files at once


557
00:32:43,797 --> 00:32:46,767 line:-2
so that you could edit a view
in the larger context.


558
00:32:47,434 --> 00:32:50,971 line:-2
Secondly, we looked at
the relationship between previews


559
00:32:51,038 --> 00:32:53,574 line:-1
and the SwiftUI app life cycle


560
00:32:53,640 --> 00:32:57,044 line:-2
and using StateObject
to only initialize data when you need it.


561
00:32:57,945 --> 00:33:01,148 line:-2
Third,
we looked at where to define sample data


562
00:33:01,215 --> 00:33:03,584 line:-2
and how to keep it out
of our release product


563
00:33:03,650 --> 00:33:05,686 line:-1
by using development assets.


564
00:33:05,752 --> 00:33:08,121 line:-1
And finally, we looked at four ways


565
00:33:08,188 --> 00:33:11,558 line:-2
that you can make your views themselves
more previewable.


566
00:33:12,960 --> 00:33:15,696 line:-1
I want to leave you with one big idea.


567
00:33:16,730 --> 00:33:21,401 line:-2
The investments to make your app more
previewable benefit your app as a whole.


568
00:33:21,468 --> 00:33:25,739 line:-2
I hope you saw from this video that
a previewable app is more understandable,


569
00:33:25,806 --> 00:33:28,575 line:-2
more testable,
and a more maintainable app.


570
00:33:29,376 --> 00:33:31,645 line:-1
So let's go build some great apps.


571
00:33:32,012 --> 00:33:33,213 line:-1
Thank you.

