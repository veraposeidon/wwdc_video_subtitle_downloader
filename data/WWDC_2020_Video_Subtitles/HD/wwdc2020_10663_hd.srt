1
00:00:03,770 --> 00:00:06,440 line:-1
Hello and welcome to WWDC.


2
00:00:09,476 --> 00:00:11,078 line:0
Hello, I'm Jon Davis,


3
00:00:11,144 --> 00:00:14,314 line:0
Web Technologies Evangelist
for the Safari and WebKit teams.


4
00:00:14,781 --> 00:00:16,383 line:-1
I'm so excited to get to tell you


5
00:00:16,450 --> 00:00:18,619 line:-2
about all of the new features
and improvements


6
00:00:18,685 --> 00:00:20,420 line:-1
for web developers this year.


7
00:00:21,088 --> 00:00:24,324 line:-2
If you develop websites,
web apps saved to the Home Screen


8
00:00:24,391 --> 00:00:26,293 line:-1
or web content used in apps,


9
00:00:26,360 --> 00:00:28,595 line:-2
and want to learn
about all of the latest technologies


10
00:00:28,662 --> 00:00:32,098 line:-2
available in Safari and WebKit,
this session is for you.


11
00:00:32,165 --> 00:00:33,967 line:-1
In this session, I'll give you a tour


12
00:00:34,034 --> 00:00:36,436 line:-2
of the new features
and enhancements in WebKit


13
00:00:36,503 --> 00:00:39,773 line:-1
and shipping in Safari 13.1 for macOS,


14
00:00:39,840 --> 00:00:43,377 line:-1
Safari on iOS and iPadOS 13.4


15
00:00:43,443 --> 00:00:48,415 line:-2
and coming to Safari 14
on macOS, iOS and iPadOS.


16
00:00:49,016 --> 00:00:52,419 line:-2
But first, there's some really great news
I wanna share up front.


17
00:00:52,486 --> 00:00:54,054 line:-1
We made a really big effort this year


18
00:00:54,121 --> 00:00:56,890 line:-2
to improve Safari's interoperability
with other browsers.


19
00:00:57,391 --> 00:01:00,594 line:-2
One way to measure that
is web platform tests.


20
00:01:01,461 --> 00:01:05,699 line:-2
It's a set of tests used by browser makers
to ensure interoperability


21
00:01:05,766 --> 00:01:09,269 line:-2
so your web content operates
the way you expect across browsers.


22
00:01:09,970 --> 00:01:11,705 line:-1
So I'm pleased to announce


23
00:01:11,772 --> 00:01:14,608 line:-2
improved interoperability
for service workers,


24
00:01:15,209 --> 00:01:17,778 line:-1
XHR and Fetch, pointer events,


25
00:01:18,245 --> 00:01:23,984 line:-1
CSS, SVG, WebAssembly and many more areas.


26
00:01:24,051 --> 00:01:29,356 line:-2
Safari passes 140,000
new interoperability test cases this year,


27
00:01:29,423 --> 00:01:32,492 line:-2
and you can look forward
to continued progress in this area.


28
00:01:32,559 --> 00:01:34,862 line:-2
But there's so much more
to talk about this year.


29
00:01:35,896 --> 00:01:39,466 line:-2
In this session, I'm going to go
over performance improvements,


30
00:01:39,533 --> 00:01:43,070 line:-1
lots of new web API, CSS updates,


31
00:01:43,737 --> 00:01:46,907 line:-2
media enhancements,
including some great image updates,


32
00:01:47,541 --> 00:01:49,576 line:-1
new JavaScript features


33
00:01:49,643 --> 00:01:53,180 line:-2
and finally, new platform
integration capabilities.


34
00:01:54,281 --> 00:01:59,186 line:-2
So let's get started with performance,
and specifically browsing performance.


35
00:02:00,621 --> 00:02:04,525 line:-2
Page load performance is foundational
to our browsing experience feeling fast,


36
00:02:04,591 --> 00:02:08,996 line:-2
and I'm pleased to report
Safari 14 is 13% faster


37
00:02:09,062 --> 00:02:11,565 line:-1
clicking a link to an unvisited site,


38
00:02:11,632 --> 00:02:16,236 line:-2
and up to 42% faster clicking a link
for a recently visited web page.


39
00:02:17,538 --> 00:02:20,240 line:-2
Typing a URL
into the Search and Address bar


40
00:02:20,307 --> 00:02:23,710 line:-2
for a recently visited web page
is 52% faster.


41
00:02:24,378 --> 00:02:28,115 line:-2
We improved instant back
by caching up to 34% more pages.


42
00:02:29,149 --> 00:02:33,086 line:-2
PDFs show the first page
60 times faster while downloading.


43
00:02:33,887 --> 00:02:35,822 line:-1
And outside of page load performance,


44
00:02:35,889 --> 00:02:37,591 line:-1
closing unresponsive tabs


45
00:02:37,658 --> 00:02:41,795 line:-2
is down from three-and-a-half seconds
to just 50 milliseconds.


46
00:02:42,396 --> 00:02:45,199 line:-2
All of these improvements
help users and developers


47
00:02:45,265 --> 00:02:47,768 line:-2
have a faster browsing experience
in Safari.


48
00:02:49,369 --> 00:02:52,372 line:-2
And there's performance improvements
for developers too.


49
00:02:52,439 --> 00:02:55,142 line:-2
CPU usage while scrolling
is three times less.


50
00:02:55,209 --> 00:02:58,345 line:-2
It's buttery smooth
with zero dropped frames.


51
00:02:58,412 --> 00:03:01,548 line:-2
IndexedDB operations
are up to ten times faster.


52
00:03:02,416 --> 00:03:06,119 line:-2
Reduced overhead makes for-of loops
up to five times faster,


53
00:03:06,186 --> 00:03:07,721 line:-1
based on microbenchmarks.


54
00:03:08,355 --> 00:03:10,290 line:-1
Promises are twice as fast


55
00:03:10,357 --> 00:03:13,493 line:-2
in the JetStream 2 benchmark's
async-fs test,


56
00:03:14,194 --> 00:03:18,565 line:-2
and optimized JavaScript delete operations
are up to 12 times faster.


57
00:03:19,132 --> 00:03:22,236 line:-1
Safari and WebKit are faster than ever.


58
00:03:23,270 --> 00:03:26,106 line:-2
But now, I'm going to show you
the new web API


59
00:03:26,173 --> 00:03:28,909 line:-1
added in WebKit and available in Safari.


60
00:03:30,177 --> 00:03:32,913 line:-1
First up is the Web Animations API.


61
00:03:32,980 --> 00:03:36,283 line:-1
It's long-awaited and new in Safari 13.1.


62
00:03:37,017 --> 00:03:38,952 line:-1
It's an API available in JavaScript


63
00:03:39,019 --> 00:03:41,421 line:-2
to directly create
and control the playback


64
00:03:41,488 --> 00:03:43,891 line:-1
of CSS animations and transitions.


65
00:03:44,591 --> 00:03:47,761 line:-2
You no longer need to manipulate
element properties.


66
00:03:48,762 --> 00:03:51,131 line:-2
And you can query
the animations on the page,


67
00:03:51,965 --> 00:03:56,036 line:-2
seek directly to a specific time
in the animation playback cycle


68
00:03:56,103 --> 00:03:58,939 line:-2
or even change the speed
and direction of playback.


69
00:04:00,140 --> 00:04:02,376 line:-2
So I've been experimenting
with a loading animation


70
00:04:02,442 --> 00:04:04,745 line:-1
of the WebKit logo for an internal website


71
00:04:04,811 --> 00:04:07,447 line:-2
where my colleagues enjoy
discussing their pets.


72
00:04:07,514 --> 00:04:10,450 line:-2
And after it's animated in,
the compass needle spins


73
00:04:10,517 --> 00:04:12,252 line:-1
and it's a really fun element.


74
00:04:12,319 --> 00:04:14,454 line:-2
So I'd like to let folks
interact with it a bit


75
00:04:14,521 --> 00:04:17,757 line:-2
by clicking on the logo
to give the needle another spin.


76
00:04:17,824 --> 00:04:20,761 line:-2
And with the Web Animations API
it's really easy.


77
00:04:22,696 --> 00:04:27,100 line:-2
So in the logo's click handler,
we use the element.animate method.


78
00:04:27,801 --> 00:04:30,170 line:-1
It takes a KeyframeEffect parameter


79
00:04:30,237 --> 00:04:33,740 line:-2
that allows us to set up
the keyframes for the animation,


80
00:04:34,441 --> 00:04:37,377 line:-2
a nice easing function
so the needle starts spinning quickly


81
00:04:37,444 --> 00:04:38,645 line:-1
with a softer ending,


82
00:04:39,379 --> 00:04:41,748 line:-2
and then a reasonable duration
in milliseconds.


83
00:04:43,016 --> 00:04:44,017 line:-1
And here it is.


84
00:04:45,552 --> 00:04:48,255 line:-2
And clicking the logo
keeps the needle spinning.


85
00:04:49,556 --> 00:04:51,325 line:-1
That's more fun than I thought it'd be.


86
00:04:52,392 --> 00:04:56,563 line:-2
And Web Inspector's Graphics tab
now shows you the animation instances...


87
00:04:57,397 --> 00:05:00,634 line:-2
including the animations created
each time I click the logo.


88
00:05:01,568 --> 00:05:03,871 line:-1
It also visualizes the easing curves.


89
00:05:03,937 --> 00:05:07,074 line:-2
And to help with timing, it gives you
a perspective of the animation delay


90
00:05:07,140 --> 00:05:09,076 line:-1
compared to its duration.


91
00:05:09,142 --> 00:05:11,712 line:0
There are lots of updates
to Web Inspector you can learn about


92
00:05:11,778 --> 00:05:13,747 line:0
in the "What's New
in Web Inspector" session


93
00:05:13,814 --> 00:05:15,449 line:0
available in your Developer app.


94
00:05:16,183 --> 00:05:18,752 line:-1
So that's the Web Animations API.


95
00:05:18,819 --> 00:05:20,521 line:-1
JavaScript control of animations


96
00:05:20,587 --> 00:05:22,456 line:-1
with all of the power and efficiency


97
00:05:22,523 --> 00:05:24,925 line:-1
of CSS animations and transitions.


98
00:05:25,759 --> 00:05:28,161 line:-1
Next in our tour is ResizeObserver.


99
00:05:28,228 --> 00:05:32,499 line:-2
It's newly available with the release
of Safari 13.1 earlier this year.


100
00:05:33,133 --> 00:05:36,803 line:-2
It's a JavaScript API
that reports element size changes.


101
00:05:37,538 --> 00:05:39,173 line:-1
It allows elements to respond


102
00:05:39,239 --> 00:05:42,743 line:-2
to the size changes of other elements,
not just the viewport.


103
00:05:42,809 --> 00:05:44,711 line:-1
With ResizeObserver, your content


104
00:05:44,778 --> 00:05:47,247 line:-2
can react to elements
that change their size


105
00:05:47,915 --> 00:05:51,418 line:-2
both when the viewport changes,
like when the window gets resized,


106
00:05:51,485 --> 00:05:54,621 line:-2
but more importantly,
when other changes to size occur,


107
00:05:54,688 --> 00:05:59,293 line:-2
like changing the display property
or when new child elements are appended.


108
00:06:00,561 --> 00:06:03,430 line:-2
My colleagues on the WebKit team
love discussing their pets,


109
00:06:03,497 --> 00:06:06,033 line:-2
so I've been maintaining
an internal website


110
00:06:06,099 --> 00:06:08,168 line:-2
where they can share pictures
and comment on them.


111
00:06:09,269 --> 00:06:11,305 line:-1
And, of course, it uses responsive design


112
00:06:11,371 --> 00:06:14,808 line:-2
so that when you resize the window
and things start to get a little cramped,


113
00:06:14,875 --> 00:06:18,679 line:-2
the controls shrink to just show
the icon and save space.


114
00:06:19,947 --> 00:06:22,282 line:-2
But some folks said
they wanted a flexible editor


115
00:06:22,349 --> 00:06:24,818 line:-2
because they like having
the extra space while commenting,


116
00:06:24,885 --> 00:06:27,487 line:-2
and you can see
it resizes well for the window,


117
00:06:27,554 --> 00:06:29,990 line:-2
but it doesn't work
when resizing the editor.


118
00:06:30,557 --> 00:06:32,459 line:-1
This hasn't been easily achieved before,


119
00:06:32,526 --> 00:06:34,862 line:-2
but ResizeObserver
is a great tool for this


120
00:06:34,928 --> 00:06:39,666 line:-2
because it can detect when the size
of the container changes and react.


121
00:06:40,434 --> 00:06:42,336 line:-1
Let me show you what I've been working on.


122
00:06:43,770 --> 00:06:46,373 line:-2
So to address this,
I'll create a new ResizeObserver


123
00:06:46,440 --> 00:06:49,243 line:-2
in the site's JavaScript that detects
when the container's width


124
00:06:49,943 --> 00:06:54,014 line:-2
goes below a certain size,
then toggle a CSS class on the container.


125
00:06:54,081 --> 00:06:56,750 line:-2
The style rules for our formatting buttons
can pick that up


126
00:06:56,817 --> 00:06:59,253 line:-1
and hide the label to use less space


127
00:06:59,319 --> 00:07:01,955 line:-2
and collapse the size of the buttons
so they always fit.


128
00:07:03,056 --> 00:07:05,559 line:-2
To get it working,
I just pass the container element


129
00:07:05,626 --> 00:07:09,096 line:-2
to the Observer method
of my newly constructed ResizeObserver.


130
00:07:09,863 --> 00:07:10,864 line:-1
Let's check it out.


131
00:07:12,499 --> 00:07:14,935 line:-2
With the code in place,
resizing the editor


132
00:07:15,002 --> 00:07:16,737 line:-1
causes the buttons to hide the labels


133
00:07:16,803 --> 00:07:18,572 line:-1
and resize the way you'd expect.


134
00:07:19,773 --> 00:07:21,341 line:-1
That's ResizeObserver.


135
00:07:21,408 --> 00:07:22,442 line:-1
If you wanna learn more,


136
00:07:22,509 --> 00:07:25,512 line:-2
there's a blog post
on the WebKit blog with more details.


137
00:07:25,579 --> 00:07:28,916 line:-2
Now, another feature I need to get working
on the WebKittens website


138
00:07:28,982 --> 00:07:32,219 line:-2
is the Paste button,
and I've got just the thing,


139
00:07:32,286 --> 00:07:34,755 line:-1
the Async Clipboard API.


140
00:07:34,821 --> 00:07:38,458 line:-2
It's also new this year
and available in Safari 13.1.


141
00:07:39,326 --> 00:07:41,228 line:-2
You can read data
from the system clipboard


142
00:07:41,295 --> 00:07:44,865 line:-2
for paste operations or write data
to the clipboard for copying.


143
00:07:45,465 --> 00:07:47,701 line:-2
It's asynchronous,
to avoid blocking the page


144
00:07:47,768 --> 00:07:49,469 line:-1
while you're accessing the clipboard.


145
00:07:50,637 --> 00:07:52,272 line:-1
And there's no need to fake a selection


146
00:07:52,339 --> 00:07:54,975 line:-2
or have element focus
to copy data into it.


147
00:07:55,475 --> 00:08:00,614 line:-2
It supports multiple items and item types
like images and rich formatted text,


148
00:08:00,681 --> 00:08:04,351 line:-1
but needs a secure context over HTTPS


149
00:08:04,418 --> 00:08:07,221 line:-2
and calls must be invoked
in response to user interaction.


150
00:08:08,555 --> 00:08:10,924 line:-2
Now, if you're working
with just plain text,


151
00:08:10,991 --> 00:08:13,560 line:-2
it has shortcut methods
to make it even easier.


152
00:08:14,595 --> 00:08:19,399 line:-2
Copying plain text is as easy
as using the clipboard.writeText method


153
00:08:19,466 --> 00:08:20,901 line:-1
to write a string of text.


154
00:08:22,102 --> 00:08:25,906 line:-2
And pasting plain text uses
the clipboard.readText method.


155
00:08:26,707 --> 00:08:28,275 line:-1
But for the WebKittens website,


156
00:08:28,342 --> 00:08:31,745 line:-2
the team wants
rich HTML-formatted text when pasting.


157
00:08:33,547 --> 00:08:35,048 line:-1
Inside the click handler,


158
00:08:35,115 --> 00:08:37,918 line:-2
the clipboard.read method
is called asynchronously


159
00:08:37,985 --> 00:08:40,687 line:-1
to get an array of clipboardItems back.


160
00:08:41,822 --> 00:08:45,325 line:-2
The clipboardItems are iterated
to find the HTML data.


161
00:08:46,827 --> 00:08:49,363 line:-1
The data gets returned as a blob object.


162
00:08:50,764 --> 00:08:53,700 line:-2
Then, FileReader is used
to get the HTML data back,


163
00:08:53,767 --> 00:08:56,703 line:-2
which is collected
and appended to the editor.


164
00:08:58,539 --> 00:09:01,308 line:-2
I copied a comment
from another post earlier to test with,


165
00:09:01,375 --> 00:09:05,012 line:-2
so I'll click the Paste button
and post it.


166
00:09:05,946 --> 00:09:09,917 line:-2
And there you have it, a functional
Paste button that handles rich text.


167
00:09:10,617 --> 00:09:15,022 line:-2
The Async Clipboard API is powerful
and this just scratched the surface.


168
00:09:15,455 --> 00:09:18,125 line:-2
You can learn more about it
on the WebKit blog.


169
00:09:19,726 --> 00:09:24,364 line:-2
Now, if you're a developer of a library
or framework, this next news is for you.


170
00:09:25,365 --> 00:09:29,736 line:-2
Safari 13.1 now supports
the EventTarget constructor.


171
00:09:29,803 --> 00:09:33,240 line:-2
EventTarget is used by objects
that can receive events.


172
00:09:33,307 --> 00:09:36,210 line:-2
For example, DOM elements
extend EventTarget,


173
00:09:36,276 --> 00:09:38,445 line:-1
but now your own objects can too,


174
00:09:38,512 --> 00:09:40,681 line:-1
without all the extra element behaviors.


175
00:09:41,515 --> 00:09:44,551 line:-2
Library authors can use
native event functionality


176
00:09:44,618 --> 00:09:46,653 line:-1
to create their own object interface


177
00:09:46,720 --> 00:09:50,224 line:-2
for dispatching custom events
for non-DOM objects.


178
00:09:50,824 --> 00:09:52,926 line:-2
While we're talking
about library developers,


179
00:09:52,993 --> 00:09:55,128 line:-1
a lot of libraries are simply providing


180
00:09:55,195 --> 00:09:58,098 line:-2
a custom component
for web authors to implement,


181
00:09:58,165 --> 00:10:00,901 line:-2
so that leads us to an update
on web components.


182
00:10:02,302 --> 00:10:05,806 line:-2
We've had support for web components
in Safari for a long while now


183
00:10:05,873 --> 00:10:08,342 line:-2
and they keep becoming
more and more powerful.


184
00:10:08,408 --> 00:10:12,412 line:-2
It's actually another feature I took
advantage of on the WebKittens website.


185
00:10:13,580 --> 00:10:16,984 line:-2
Everything from the posts to the comments
and even the formatting buttons


186
00:10:17,050 --> 00:10:19,219 line:-1
are implemented as web components.


187
00:10:19,286 --> 00:10:23,257 line:-2
But for a simple example, let's look
specifically at the formatting buttons.


188
00:10:25,626 --> 00:10:27,294 line:-1
Some simple template markup is used


189
00:10:27,361 --> 00:10:29,630 line:-2
to set up the component
as a custom element.


190
00:10:30,464 --> 00:10:34,334 line:-2
The id attribute is used to reference
this template in JavaScript.


191
00:10:35,769 --> 00:10:38,939 line:-2
Then, in JavaScript,
it's registered as a custom element.


192
00:10:39,640 --> 00:10:44,178 line:-2
The id attribute value is repurposed
to serve as the custom element hook.


193
00:10:44,978 --> 00:10:48,615 line:-2
Our custom element class
extends a generic HTMLElement


194
00:10:48,682 --> 00:10:51,351 line:-2
and in the constructor,
clones the template content


195
00:10:51,418 --> 00:10:54,955 line:-2
to modify the template fragment
with our text label and icon.


196
00:10:56,356 --> 00:10:58,425 line:-1
It then appends our modified DOM fragment


197
00:10:58,492 --> 00:11:00,627 line:-1
to the shadowRoot of the custom element.


198
00:11:02,162 --> 00:11:04,498 line:-2
Then, the page markup
can create those elements


199
00:11:04,565 --> 00:11:07,968 line:-2
using the custom element's
registered name as the tag name.


200
00:11:09,937 --> 00:11:11,939 line:-2
Each of the format buttons
can be customized


201
00:11:12,005 --> 00:11:14,942 line:-1
for bold, italic, underline and so on.


202
00:11:15,709 --> 00:11:17,444 line:-1
Now, as a component author,


203
00:11:17,511 --> 00:11:21,148 line:-2
you provide a generic component
that can get used in many ways,


204
00:11:21,215 --> 00:11:23,116 line:-2
so you wanna give the page author
some control


205
00:11:23,183 --> 00:11:24,985 line:-1
over how these elements are styled.


206
00:11:25,752 --> 00:11:27,888 line:-1
In this case, as a component author,


207
00:11:27,955 --> 00:11:30,924 line:-2
we don't know what kind of button
each one will end up being.


208
00:11:32,125 --> 00:11:35,229 line:-2
In the example,
component styling handles the layout


209
00:11:35,295 --> 00:11:38,265 line:-2
of a larger text icon
to the left of the button label,


210
00:11:38,332 --> 00:11:42,569 line:-2
but in order to give the bold button's
"B" icon a bold style,


211
00:11:42,636 --> 00:11:44,738 line:-1
and an italic style for the "I" icon,


212
00:11:44,805 --> 00:11:47,608 line:-2
the page author, who knows
what kind of button they're implementing,


213
00:11:47,674 --> 00:11:50,377 line:-2
needs to be able to customize
that part of the component.


214
00:11:51,845 --> 00:11:56,016 line:-2
With Safari 13.1
released this spring they can,


215
00:11:56,083 --> 00:11:58,218 line:-1
using CSS Shadow Parts.


216
00:11:58,285 --> 00:12:01,255 line:-2
It allows web component authors
to specifically expose


217
00:12:01,321 --> 00:12:03,657 line:-2
parts of their components
to content authors


218
00:12:03,724 --> 00:12:05,425 line:-1
to style with their own CSS.


219
00:12:06,059 --> 00:12:07,060 line:-1
You don't need to know


220
00:12:07,127 --> 00:12:10,230 line:-2
all of the underlying markup structure
of the component to style it.


221
00:12:10,797 --> 00:12:12,466 line:-1
Just the parts of the component


222
00:12:12,533 --> 00:12:15,035 line:-2
the author exposed
through the part attribute.


223
00:12:16,904 --> 00:12:18,672 line:-1
Component layout is protected


224
00:12:18,739 --> 00:12:21,408 line:-2
and content authors
can customize the components


225
00:12:21,475 --> 00:12:24,845 line:-2
to fit the use case or better match
the style of their website.


226
00:12:25,646 --> 00:12:27,247 line:-1
Looking back at our example,


227
00:12:27,714 --> 00:12:29,716 line:-1
this was the original template markup.


228
00:12:31,118 --> 00:12:34,488 line:-2
By adding the part attribute
to the elements inside the component,


229
00:12:34,555 --> 00:12:37,057 line:-1
they're now exposed to the page's CSS.


230
00:12:38,559 --> 00:12:40,827 line:-2
Now, the page author
that's implementing the buttons


231
00:12:40,894 --> 00:12:45,132 line:-2
can use the part pseudo-element selector
and easily decorate the buttons


232
00:12:45,199 --> 00:12:47,568 line:-2
to provide an extra visual hint
about their function.


233
00:12:48,802 --> 00:12:51,572 line:-1
So this turns into this.


234
00:12:52,439 --> 00:12:55,342 line:-2
And that's CSS Shadow Parts
for web components.


235
00:12:56,210 --> 00:12:57,611 line:-1
Speaking of visual hints,


236
00:12:58,245 --> 00:13:00,647 line:-2
WebKit added support
for another visual hint.


237
00:13:01,849 --> 00:13:04,718 line:-1
The HTML enterkeyhint attribute.


238
00:13:04,785 --> 00:13:08,822 line:-2
It's supported on Safari,
on iOS 13.4 and iPadOS.


239
00:13:09,957 --> 00:13:11,959 line:-1
It allows you to declare an action label


240
00:13:12,025 --> 00:13:15,195 line:-2
for the Enter key on virtual keyboards
of a touchscreen device.


241
00:13:16,763 --> 00:13:18,765 line:-2
You can set the label
to give your users a hint


242
00:13:18,832 --> 00:13:21,001 line:-1
about what action the Enter key will take.


243
00:13:21,068 --> 00:13:25,305 line:-2
Instead of just Enter, it could be
Done, or Go, or Send, for example.


244
00:13:26,039 --> 00:13:30,210 line:-2
Before I wrap up the new web API,
there's one more API to mention...


245
00:13:31,178 --> 00:13:33,113 line:-1
the Web Authentication API.


246
00:13:33,547 --> 00:13:37,117 line:-2
It supports logging into websites
beyond usernames and passwords


247
00:13:37,184 --> 00:13:41,622 line:-2
and it was introduced in Safari 13
and Safari on iOS 13.3


248
00:13:41,688 --> 00:13:44,024 line:-1
with support for hardware security keys.


249
00:13:45,492 --> 00:13:47,160 line:-1
And with the latest Safari,


250
00:13:47,227 --> 00:13:50,297 line:-2
WebKit has added support
for Touch ID and Face ID


251
00:13:50,364 --> 00:13:54,101 line:-1
in Safari on macOS, iOS and iPadOS.


252
00:13:55,002 --> 00:13:57,304 line:0
You can learn all
about the security and convenience


253
00:13:57,371 --> 00:13:59,106 line:0
of implementing it for your users


254
00:13:59,173 --> 00:14:02,276 line:0
by watching the "Face ID
and Touch ID on the Web" session


255
00:14:02,342 --> 00:14:03,610 line:0
in the Developer app.


256
00:14:05,012 --> 00:14:08,115 line:-2
And that's a look at the new Web API
in Safari this year.


257
00:14:08,182 --> 00:14:10,884 line:-1
Web Animations, ResizeObserver,


258
00:14:10,951 --> 00:14:14,288 line:-2
the Async Clipboard API,
the EventTarget constructor,


259
00:14:14,354 --> 00:14:17,824 line:-1
CSS Shadow Parts, HTML enterkeyhint


260
00:14:17,891 --> 00:14:19,593 line:-1
and Web Authentication.


261
00:14:19,660 --> 00:14:22,462 line:-2
I can't wait to see what you do
with these new capabilities.


262
00:14:23,163 --> 00:14:24,431 line:-1
But we're not done yet.


263
00:14:25,499 --> 00:14:27,868 line:-2
Let's take a look
at several CSS improvements


264
00:14:27,935 --> 00:14:30,470 line:-2
that give content authors
more fine-grained control


265
00:14:30,537 --> 00:14:31,872 line:-1
over styles and layout.


266
00:14:32,906 --> 00:14:36,410 line:-2
This year, WebKit added support
for system font families.


267
00:14:37,144 --> 00:14:40,581 line:-2
They work in WebKit
across all of Apple's platforms.


268
00:14:40,647 --> 00:14:43,350 line:-2
They each map
to a system-appropriate font.


269
00:14:45,018 --> 00:14:49,189 line:-2
The system-ui font family
is a generic alias for ui-sans-serif


270
00:14:49,256 --> 00:14:52,059 line:-2
and on the system
it maps to San Francisco...


271
00:14:53,560 --> 00:14:56,563 line:-1
ui-serif uses the New York font family...


272
00:14:58,298 --> 00:15:00,934 line:-1
ui-monospace uses SF Mono...


273
00:15:02,336 --> 00:15:05,372 line:-1
and ui-rounded uses SF Rounded.


274
00:15:07,608 --> 00:15:09,610 line:-1
They're useful when developing a web app


275
00:15:09,676 --> 00:15:12,412 line:-2
that you wanna make feel
more familiar to the system.


276
00:15:12,479 --> 00:15:14,615 line:-2
And the different font families
allow you to create


277
00:15:14,681 --> 00:15:19,052 line:-2
an easily identifiable difference
between content and user interface,


278
00:15:19,119 --> 00:15:21,288 line:-1
such as on the WebKittens website.


279
00:15:23,223 --> 00:15:25,859 line:-1
It uses ui-serif for the content areas...


280
00:15:26,760 --> 00:15:30,163 line:-2
and ui-sans-serif for the user interface
when adding a comment.


281
00:15:30,697 --> 00:15:33,901 line:-2
So beautiful new font families
for your web apps.


282
00:15:34,902 --> 00:15:37,771 line:-2
Another CSS feature
that can help your content layout


283
00:15:37,838 --> 00:15:40,007 line:-1
is support for "line-break: anywhere."


284
00:15:40,674 --> 00:15:44,878 line:-2
It breaks to a new line at any opportunity
before the content overflows.


285
00:15:45,445 --> 00:15:46,780 line:-1
This can be particularly helpful


286
00:15:46,847 --> 00:15:49,383 line:-2
with long words that can overflow
narrow containers,


287
00:15:49,449 --> 00:15:51,852 line:-1
especially technical jargon, like code,


288
00:15:51,919 --> 00:15:55,222 line:-2
where hyphenation might change
the intended meaning of the word.


289
00:15:56,957 --> 00:16:00,227 line:-2
And it can protect your content
from unexpected layout issues.


290
00:16:00,861 --> 00:16:02,229 line:-1
The simplest way to understand it


291
00:16:02,296 --> 00:16:04,965 line:-2
is to see the behavior
of the default line-break rule.


292
00:16:06,366 --> 00:16:11,004 line:-2
WebKit uses a default line-break heuristic
that's based on language-specific rules,


293
00:16:11,071 --> 00:16:14,141 line:-2
while taking into account
other CSS that might apply.


294
00:16:15,642 --> 00:16:17,544 line:-1
With roman-based written languages,


295
00:16:17,611 --> 00:16:20,514 line:-2
the line-break heuristic
hyphenates the text when it can,


296
00:16:20,581 --> 00:16:22,983 line:-2
but take a look at the first word
on this page


297
00:16:23,050 --> 00:16:25,686 line:-2
from the Web Inspector
Command Line API Reference.


298
00:16:26,820 --> 00:16:30,090 line:-2
The long queryInstances syntax
doesn't break at all.


299
00:16:30,157 --> 00:16:34,161 line:-2
It's breaking right before the long word,
making a blank line after the bullet.


300
00:16:34,728 --> 00:16:38,765 line:-2
Then, it still overflows the container
and the viewport.


301
00:16:38,832 --> 00:16:41,969 line:-2
"Line-break: anywhere"
makes it possible to fix this.


302
00:16:43,403 --> 00:16:47,174 line:-2
With "line-break: anywhere," it breaks up
the character just before the overflow,


303
00:16:47,241 --> 00:16:49,576 line:-2
making it possible
to see all of the content


304
00:16:49,643 --> 00:16:51,345 line:-1
without breaking the layout.


305
00:16:51,411 --> 00:16:53,814 line:-1
Now it's possible to see the entire line.


306
00:16:55,215 --> 00:16:58,252 line:-1
Next up is another powerful CSS tool.


307
00:16:58,819 --> 00:17:00,721 line:-1
The "is" pseudo-selector.


308
00:17:00,787 --> 00:17:03,190 line:-1
It's newly supported in Safari 14.


309
00:17:04,090 --> 00:17:05,692 line:-1
It matches a list of selectors


310
00:17:05,759 --> 00:17:07,493 line:-1
just like the "matches" pseudo-selector.


311
00:17:07,560 --> 00:17:11,632 line:-2
In fact, "is" aliases
our "matches" pseudo-selector behavior


312
00:17:11,698 --> 00:17:13,534 line:-1
that's been part of Safari for years.


313
00:17:14,367 --> 00:17:19,039 line:-2
The matching element gets the specificity
of the most specific selector.


314
00:17:20,174 --> 00:17:23,443 line:-2
It's really useful
for avoiding repetitive selectors.


315
00:17:23,510 --> 00:17:24,645 line:-1
Here's an example.


316
00:17:25,811 --> 00:17:29,283 line:-2
Here, a 3em top margin
is added to all of the headings.


317
00:17:30,217 --> 00:17:32,486 line:-1
Then, this rule removes the top margin


318
00:17:32,553 --> 00:17:36,223 line:-2
when a heading is immediately followed
by a heading of the next level down.


319
00:17:37,057 --> 00:17:40,594 line:-2
But, of course, if this is used
in a content management system,


320
00:17:40,661 --> 00:17:42,596 line:-2
page authors may not adhere
to strict rules


321
00:17:42,663 --> 00:17:44,865 line:-1
of an h1 followed by an h2.


322
00:17:44,932 --> 00:17:48,001 line:-2
They're not technically prevented
from using an h1 followed by an h3,


323
00:17:48,068 --> 00:17:51,071 line:-2
so this isn't enough
to cover all of those cases.


324
00:17:51,572 --> 00:17:54,775 line:-2
To do that, you'd need
a really repetitive selector.


325
00:17:55,442 --> 00:17:56,443 line:-1
Like this.


326
00:17:56,844 --> 00:17:58,145 line:-1
That's pretty awful-looking.


327
00:17:58,712 --> 00:18:01,281 line:-2
But with "is," we can simplify
writing all of that out.


328
00:18:01,982 --> 00:18:04,918 line:-1
And it becomes this. That's so much nicer.


329
00:18:06,286 --> 00:18:07,521 line:-1
To go along with "is,"


330
00:18:07,588 --> 00:18:10,390 line:-2
WebKit also supports
the "where" pseudo-selector.


331
00:18:11,959 --> 00:18:15,462 line:-2
It works the same way as "is"
in that it matches a list of selectors,


332
00:18:15,529 --> 00:18:18,565 line:-2
but the big difference
is that the CSS specificity


333
00:18:18,632 --> 00:18:21,101 line:-1
of any matching element is always zero.


334
00:18:21,835 --> 00:18:24,671 line:-2
So it can act as
a kind of specificity reset.


335
00:18:26,173 --> 00:18:29,910 line:-2
Here's another example,
and I'll start by comparing "is" first.


336
00:18:32,312 --> 00:18:36,617 line:-2
Looking at this example, the "is"
selects an intro class, pullquote


337
00:18:36,683 --> 00:18:38,285 line:-1
or element with a hero id


338
00:18:38,352 --> 00:18:41,188 line:-2
and styles the paragraph tag
that immediately follows it


339
00:18:41,255 --> 00:18:44,291 line:-2
to use uppercase text
and give it an eye-grabbing look.


340
00:18:45,192 --> 00:18:48,929 line:-2
Later in the styles, the page author
is trying to specifically override


341
00:18:48,996 --> 00:18:52,266 line:-2
the heading levels two through six
followed by a paragraph


342
00:18:52,332 --> 00:18:54,101 line:-1
to use normal text.


343
00:18:54,168 --> 00:18:56,236 line:-2
Seems like they only want this
to work for paragraphs


344
00:18:56,303 --> 00:18:57,771 line:-1
following level one headings.


345
00:18:58,539 --> 00:19:01,575 line:-2
But using "is" means
that it won't work as expected.


346
00:19:02,409 --> 00:19:05,145 line:-2
This is where
the "where" pseudo-selector comes in.


347
00:19:06,780 --> 00:19:09,183 line:-1
Using "where" instead makes this possible.


348
00:19:09,249 --> 00:19:11,451 line:-1
Now, the elements matched by "where"


349
00:19:11,518 --> 00:19:14,488 line:-1
are reset to a specificity level of zero,


350
00:19:14,555 --> 00:19:18,292 line:-2
making the follow-up rules
able to override as expected.


351
00:19:19,193 --> 00:19:22,262 line:-1
From CSS, we move on to media.


352
00:19:23,630 --> 00:19:26,934 line:-2
But included in media is a fair number
of image updates as well.


353
00:19:27,000 --> 00:19:31,505 line:-2
And I'm pleased to announce support
for an entirely new image format...


354
00:19:32,206 --> 00:19:33,507 line:-1
WebP images.


355
00:19:34,741 --> 00:19:37,144 line:-1
WebP is an open-source image format


356
00:19:37,211 --> 00:19:41,348 line:-2
that provides smaller file sizes
and lots of advanced bells and whistles.


357
00:19:41,882 --> 00:19:44,685 line:-2
It supports a lossy format
comparable to JPEG


358
00:19:44,751 --> 00:19:47,287 line:-1
and a lossless format like PNG.


359
00:19:47,354 --> 00:19:51,158 line:-2
It even supports transparency
and animation across both.


360
00:19:52,926 --> 00:19:55,195 line:0
In your markup,
you can use the picture element


361
00:19:55,262 --> 00:19:57,831 line:0
to add WebP images with a fallback.


362
00:19:57,898 --> 00:20:01,101 line:0
And on the server side,
you can look at the Accept header.


363
00:20:01,869 --> 00:20:04,872 line:0
But a big reason web developers
are excited for this format


364
00:20:04,938 --> 00:20:06,440 line:0
is the file size savings.


365
00:20:08,308 --> 00:20:13,113 line:0
This sample JPEG
encoded at 80% quality is 5.1 megabytes,


366
00:20:13,780 --> 00:20:17,150 line:0
but the WebP lossy encoding
at the same quality settings


367
00:20:17,217 --> 00:20:19,753 line:0
gives us a 41% file savings


368
00:20:19,820 --> 00:20:22,956 line:0
with visual quality
that's nearly the same as a JPEG.


369
00:20:24,892 --> 00:20:29,429 line:0
This high resolution PNG
weighs in at 817 kilobytes,


370
00:20:29,496 --> 00:20:32,633 line:0
but the lossless WebP encoding
preserves the transparency


371
00:20:32,699 --> 00:20:34,635 line:0
and saves us 33%.


372
00:20:35,269 --> 00:20:40,374 line:0
WebP image support is available
in Safari 14 and Safari for iOS 14.


373
00:20:42,209 --> 00:20:43,577 line:0
While we're talking about images,


374
00:20:43,644 --> 00:20:46,813 line:0
there are a couple of new
default image behaviors in WebKit.


375
00:20:47,414 --> 00:20:50,984 line:0
The first is a change that will improve
the way your web pages load.


376
00:20:52,786 --> 00:20:54,955 line:-2
We've all seen what happens
when we load a web page


377
00:20:55,022 --> 00:20:58,492 line:-2
where the images load in
and cause the layout to jump around.


378
00:20:59,092 --> 00:21:01,395 line:-2
I'm going to show you
how easy it is to fix this


379
00:21:01,461 --> 00:21:05,999 line:-2
with WebKit's new behavior for calculating
the default image aspect ratio.


380
00:21:06,466 --> 00:21:10,404 line:-1
In Safari 13.1 and in Safari on iOS 13.4,


381
00:21:10,470 --> 00:21:13,140 line:-2
WebKit now calculates
the image aspect ratio


382
00:21:13,207 --> 00:21:16,243 line:-2
from an image tag's
width and height attributes.


383
00:21:16,310 --> 00:21:18,478 line:-1
All you have to do is make sure to add


384
00:21:18,545 --> 00:21:20,848 line:-2
the width and height attributes
to your image tags.


385
00:21:22,082 --> 00:21:24,618 line:-2
Let's see what happens
when the attributes are added.


386
00:21:26,687 --> 00:21:28,322 line:-1
There's no jumping around at all.


387
00:21:28,388 --> 00:21:31,525 line:-2
The space is reserved for the image
and it just loads right in.


388
00:21:32,226 --> 00:21:33,227 line:-1
Beautiful.


389
00:21:34,094 --> 00:21:37,497 line:-2
The other new default behavior
is for image orientation.


390
00:21:38,999 --> 00:21:42,669 line:-2
We've supported respecting
EXIF image orientation on iOS


391
00:21:42,736 --> 00:21:43,770 line:-1
for a long time.


392
00:21:44,438 --> 00:21:47,908 line:-2
This update aligns
our support on iOS and macOS


393
00:21:47,975 --> 00:21:51,311 line:0
through the standard
image-orientation: from-image value.


394
00:21:51,979 --> 00:21:53,981 line:0
The from-image value tells Safari


395
00:21:54,047 --> 00:21:55,883 line:0
to respect the image-orientation flag


396
00:21:55,949 --> 00:21:58,652 line:0
encoded into images
that support EXIF data.


397
00:22:00,087 --> 00:22:04,091 line:0
This JPEG image is encoded
with an EXIF orientation flag of six,


398
00:22:04,157 --> 00:22:07,728 line:0
meaning the camera was rotated
90 degrees counterclockwise.


399
00:22:08,795 --> 00:22:11,064 line:0
And now you can override this default


400
00:22:11,131 --> 00:22:14,034 line:0
by setting image-orientation value
to "none,"


401
00:22:14,868 --> 00:22:18,705 line:0
to display the image directly as encoded,
without rotation correction.


402
00:22:20,207 --> 00:22:22,843 line:0
From images, we move on to video.


403
00:22:24,311 --> 00:22:27,047 line:-2
With system support
for High Dynamic Range videos


404
00:22:27,114 --> 00:22:30,250 line:-1
and web content with Safari 14 on macOS.


405
00:22:31,385 --> 00:22:35,289 line:-2
You can use media queries to detect
High Dynamic Range display support.


406
00:22:36,056 --> 00:22:38,091 line:-1
In CSS, you can query support


407
00:22:38,158 --> 00:22:40,661 line:-1
with "dynamic-range: high" like this.


408
00:22:41,628 --> 00:22:45,299 line:-2
Or you can use the window's
matchMedia method in JavaScript


409
00:22:45,365 --> 00:22:47,434 line:-2
so you can deliver
progressively enhanced content


410
00:22:47,501 --> 00:22:49,703 line:-1
to users with HDR displays.


411
00:22:51,004 --> 00:22:52,739 line:-1
Continuing with video updates,


412
00:22:52,806 --> 00:22:56,510 line:-2
WebKit has added support
for the Remote Playback API.


413
00:22:57,411 --> 00:23:00,113 line:-2
We've always had an API
for doing AirPlay before,


414
00:23:00,180 --> 00:23:03,450 line:-2
but the Remote Playback API
is a standards-based way


415
00:23:03,517 --> 00:23:06,420 line:-2
of adding remote playback
of audio or video


416
00:23:06,486 --> 00:23:08,455 line:-1
to your custom web-based media player


417
00:23:08,522 --> 00:23:11,925 line:-2
and sending it to a variety
of other remote playback devices,


418
00:23:11,992 --> 00:23:17,264 line:-2
like connected TVs, audio-only speakers
and any AirPlay-capable devices.


419
00:23:18,966 --> 00:23:22,736 line:-2
To use it, you'll set up a custom button
on your video player controls


420
00:23:22,803 --> 00:23:24,972 line:-1
and in response to user interaction,


421
00:23:25,038 --> 00:23:27,808 line:-2
call the videoElement's
remote.prompt method.


422
00:23:28,375 --> 00:23:31,178 line:-2
Then, you can handle
updating remote playback state


423
00:23:31,245 --> 00:23:32,513 line:-1
in your callback handler.


424
00:23:32,579 --> 00:23:33,881 line:-1
It's really that easy.


425
00:23:35,549 --> 00:23:38,852 line:-2
Then, on your device,
users can tap on the control


426
00:23:38,919 --> 00:23:42,155 line:-2
to get a menu of available
remote playback devices.


427
00:23:42,923 --> 00:23:45,993 line:-2
When selected,
the video is sent to that device.


428
00:23:46,860 --> 00:23:50,597 line:-2
Supporting the Remote Playback API
gives your users the flexibility


429
00:23:50,664 --> 00:23:53,300 line:-1
to enjoy media on all of their devices.


430
00:23:53,834 --> 00:23:56,303 line:-2
And another way to help users
enjoy your media


431
00:23:56,370 --> 00:23:58,071 line:-1
is the picture-in-picture API.


432
00:23:59,640 --> 00:24:02,042 line:-2
Adding a picture-in-picture control
to your web player


433
00:24:02,109 --> 00:24:04,978 line:-2
allows users to play videos
in a pop-out window


434
00:24:05,045 --> 00:24:07,014 line:-1
while they continue doing other tasks.


435
00:24:07,748 --> 00:24:08,882 line:-1
Like remote playback,


436
00:24:08,949 --> 00:24:11,451 line:-2
WebKit has supported
picture-in-picture for a while,


437
00:24:11,518 --> 00:24:14,688 line:-2
but the standards-based
picture-in-picture API is now available


438
00:24:14,755 --> 00:24:18,659 line:-1
and it works across iOS, iPadOS and macOS.


439
00:24:20,627 --> 00:24:25,065 line:-2
Similar to using the Remote Playback API,
you setup a custom control element


440
00:24:25,132 --> 00:24:28,535 line:-2
and call the videoElement's
requestPictureInPicture method


441
00:24:28,602 --> 00:24:31,505 line:-2
in response to user interaction.
That's it.


442
00:24:33,373 --> 00:24:38,278 line:-2
Then your users can enjoy videos
in picture-in-picture mode on their device


443
00:24:38,345 --> 00:24:39,847 line:-1
while doing other tasks.


444
00:24:41,815 --> 00:24:43,517 line:-1
In other news related to video,


445
00:24:43,584 --> 00:24:47,955 line:-2
Safari 14 includes support
for timed metadata in HLS.


446
00:24:49,957 --> 00:24:52,292 line:-1
It's new in Safari 14.


447
00:24:52,359 --> 00:24:55,162 line:-2
And this is metadata synchronized
to the media time stamps


448
00:24:55,229 --> 00:24:56,663 line:-1
in the video stream.


449
00:24:56,730 --> 00:25:00,200 line:-2
It can be used to provide
program information like episode details


450
00:25:00,267 --> 00:25:03,303 line:-2
or live sports data
like inning boundaries or scores.


451
00:25:03,937 --> 00:25:05,572 line:-1
There are two approaches supported.


452
00:25:07,074 --> 00:25:12,045 line:-2
The HLS #EXT-X-DATERANGE tag
is available in the DataCue


453
00:25:12,112 --> 00:25:15,849 line:-2
and carries the metadata
to the HLS Media Playlists themselves.


454
00:25:16,717 --> 00:25:20,654 line:-2
The advantages of using these tags
is their immediacy and scope.


455
00:25:21,855 --> 00:25:23,790 line:-1
All metadata in Media Playlists


456
00:25:23,857 --> 00:25:26,393 line:-2
is available to the video player
as soon as it's loaded.


457
00:25:26,460 --> 00:25:29,329 line:-2
It doesn't require waiting
for the specific segment to load


458
00:25:29,396 --> 00:25:31,331 line:-1
or for the playhead to pass over it.


459
00:25:33,934 --> 00:25:38,005 line:-2
And event message boxes
are now available in fragmented MP4s.


460
00:25:38,071 --> 00:25:41,508 line:-2
These are compatible with ID3 storage
and other formats,


461
00:25:41,575 --> 00:25:43,744 line:-1
like MPEG-2 transport streams,


462
00:25:43,810 --> 00:25:47,147 line:-2
to carry the same metadata
in fragmented MP4 containers.


463
00:25:48,048 --> 00:25:52,553 line:-2
This is especially important
for codecs like HEVC and Dolby Atmos,


464
00:25:52,619 --> 00:25:56,690 line:-2
which Apple platforms only recognize
inside fragmented MP4s.


465
00:25:58,992 --> 00:26:00,861 line:-1
The last update is an enhancement


466
00:26:00,928 --> 00:26:04,598 line:-2
for developers of video sites
that provide subtitles and captioning.


467
00:26:06,667 --> 00:26:08,502 line:-1
This is a short, but sweet update.


468
00:26:08,569 --> 00:26:10,604 line:-1
It's an enhancement to TextTrackCue


469
00:26:10,671 --> 00:26:13,273 line:-2
that allows you to use
your own captions format,


470
00:26:13,340 --> 00:26:15,475 line:-1
but use native caption rendering.


471
00:26:16,944 --> 00:26:19,479 line:-2
Developers can use
existing caption formats


472
00:26:19,546 --> 00:26:21,315 line:-1
without needing to convert them all.


473
00:26:23,417 --> 00:26:26,820 line:-2
And because the user agent is responsible
for displaying the captions,


474
00:26:26,887 --> 00:26:29,623 line:-2
they get first-class
accessibility treatment.


475
00:26:29,690 --> 00:26:32,759 line:-2
Plus, they render in both full-screen
and picture-in-picture


476
00:26:32,826 --> 00:26:34,428 line:-1
without any extra work.


477
00:26:35,662 --> 00:26:39,299 line:-2
Those are our media updates,
with support for WebP images,


478
00:26:39,366 --> 00:26:43,136 line:-2
new defaults for image aspect ratio
and orientation,


479
00:26:43,203 --> 00:26:47,074 line:-1
Mac HDR video, timed metadata in HLS,


480
00:26:47,140 --> 00:26:49,710 line:-2
Remote Playback
and picture-in-picture APIs


481
00:26:49,776 --> 00:26:52,346 line:-2
with natively rendered
subtitles and captions.


482
00:26:52,746 --> 00:26:55,782 line:-1
Now it's time for new JavaScript features.


483
00:26:56,984 --> 00:26:58,218 line:-1
Starting with BigInt.


484
00:26:58,886 --> 00:27:01,188 line:-1
BigInts are a new data type in JavaScript.


485
00:27:01,989 --> 00:27:04,191 line:-2
They're integers
that are arbitrarily large


486
00:27:04,258 --> 00:27:08,295 line:-2
and most commonly used in cryptography,
but are useful wherever you need numbers


487
00:27:08,362 --> 00:27:11,064 line:-2
larger than the MAX_SAFE_INTEGER
in JavaScript.


488
00:27:11,131 --> 00:27:13,133 line:-2
But there are a few things
to keep in mind.


489
00:27:14,535 --> 00:27:17,337 line:-2
You can't use number operations
or mix operations


490
00:27:17,404 --> 00:27:19,640 line:-1
with the regular number data type.


491
00:27:19,706 --> 00:27:21,675 line:-1
You also can't use JSON.stringify


492
00:27:21,742 --> 00:27:25,345 line:-2
to serialize a BigInt
for backwards compatibility reasons.


493
00:27:25,412 --> 00:27:28,148 line:-2
You'll need to build your own
serialization functionality


494
00:27:28,215 --> 00:27:31,785 line:-2
to ensure the decoding process
matches your serialization format.


495
00:27:33,654 --> 00:27:36,390 line:-2
And be aware
that when using the division operator,


496
00:27:36,456 --> 00:27:38,892 line:-1
BigInts will drop any decimal values.


497
00:27:39,826 --> 00:27:43,030 line:-1
That's BigInt available in Safari 14.


498
00:27:43,997 --> 00:27:47,100 line:-2
But WebKit also supports
some powerful new operators


499
00:27:47,167 --> 00:27:49,837 line:-1
to help with null or undefined values.


500
00:27:52,372 --> 00:27:53,907 line:-1
The nullish coalescing operator


501
00:27:53,974 --> 00:27:57,845 line:-2
works like other logical operators,
but it checks for existence.


502
00:27:58,846 --> 00:28:00,681 line:-1
Let's look at a quick example.


503
00:28:02,649 --> 00:28:05,018 line:-2
So I have a Person class
where the constructor takes


504
00:28:05,085 --> 00:28:07,788 line:-1
a firstName, lastName and age argument.


505
00:28:08,522 --> 00:28:10,958 line:-2
The nullish coalescing operator
is used to check


506
00:28:11,024 --> 00:28:13,594 line:-1
if an argument's value is provided.


507
00:28:13,660 --> 00:28:14,962 line:-1
If it's null or undefined,


508
00:28:15,028 --> 00:28:18,465 line:-2
the result of the right-hand side
of the operator is used instead.


509
00:28:20,501 --> 00:28:21,969 line:-1
Here, without any arguments,


510
00:28:22,035 --> 00:28:25,506 line:-2
the right-hand side defaults,
as I like to think of them, are used.


511
00:28:27,274 --> 00:28:29,943 line:-2
But passing Boolean values,
regardless of what they are,


512
00:28:30,010 --> 00:28:31,945 line:-1
pass the existence check


513
00:28:32,012 --> 00:28:34,281 line:-2
and are set as the properties
on the Person object.


514
00:28:36,316 --> 00:28:40,087 line:-2
Passing a filled in string
or empty string, or even zero for the age


515
00:28:40,153 --> 00:28:43,524 line:-2
still evaluates to set the fields
to the passed-in arguments.


516
00:28:45,125 --> 00:28:48,362 line:-2
And finally, passing the full data
sets the properties.


517
00:28:48,428 --> 00:28:50,230 line:-1
And that's nullish coalescing.


518
00:28:51,331 --> 00:28:53,333 line:-1
Building on nullish coalescing,


519
00:28:53,400 --> 00:28:56,170 line:-2
and also new this year,
is optional chaining.


520
00:28:57,638 --> 00:28:59,206 line:-1
It's a new JavaScript syntax


521
00:28:59,273 --> 00:29:02,209 line:-2
that gives you a shortcut
for property access.


522
00:29:02,276 --> 00:29:05,012 line:-2
And it even works
for indexes and methods too.


523
00:29:06,180 --> 00:29:07,781 line:-1
Take a look at this example.


524
00:29:09,850 --> 00:29:13,954 line:-2
Here, we add a name property to include
both the first and last name.


525
00:29:15,355 --> 00:29:18,325 line:-2
And when a Person is registered,
we want to see the first name.


526
00:29:19,593 --> 00:29:21,895 line:-2
This is how you might typically
add some guards


527
00:29:21,962 --> 00:29:24,298 line:-2
to make sure you can access
the firstName property.


528
00:29:26,166 --> 00:29:29,236 line:-2
Passing no arguments to the Person
when calling "register"


529
00:29:29,303 --> 00:29:31,071 line:-1
gives us an undefined result.


530
00:29:33,073 --> 00:29:35,742 line:-2
And passing strings
for the firstName and lastName


531
00:29:35,809 --> 00:29:38,212 line:-1
gives us the expected firstName.


532
00:29:38,278 --> 00:29:41,515 line:-2
But with optional chaining,
we can replace this approach


533
00:29:41,582 --> 00:29:45,018 line:-2
with new syntax that uses
the optional chaining operator.


534
00:29:45,652 --> 00:29:47,754 line:-1
And it works in the exact same way.


535
00:29:48,455 --> 00:29:50,724 line:-1
It also works with indexes,


536
00:29:50,791 --> 00:29:54,628 line:-2
like checking for the first entry
in an array of a person's children.


537
00:29:55,829 --> 00:29:58,966 line:-2
Using optional chaining here
avoids the TypeError


538
00:29:59,032 --> 00:30:01,134 line:-1
and it even works for methods.


539
00:30:02,269 --> 00:30:05,672 line:-2
Trying to call an undeclared method
triggers an error,


540
00:30:05,739 --> 00:30:09,042 line:-2
but with optional chaining
you can avoid the error.


541
00:30:09,810 --> 00:30:11,345 line:-1
So that's optional chaining.


542
00:30:12,880 --> 00:30:14,615 line:-1
Sticking with the operators theme,


543
00:30:14,681 --> 00:30:18,485 line:-2
there are even more
newly available operators in Safari 14.


544
00:30:20,254 --> 00:30:22,322 line:-1
Logical assignment operators.


545
00:30:22,389 --> 00:30:24,091 line:-1
And they come in three flavors.


546
00:30:24,558 --> 00:30:26,560 line:-1
Logical and assignment,


547
00:30:26,627 --> 00:30:28,295 line:-1
logical or assignment...


548
00:30:29,229 --> 00:30:31,265 line:-1
plus a nullish assignment operator.


549
00:30:32,833 --> 00:30:34,801 line:-1
Logical assignment operators are nice


550
00:30:34,868 --> 00:30:38,105 line:-2
in that they only evaluate
the left-hand side expression once.


551
00:30:38,639 --> 00:30:42,176 line:-2
And it isn't as destructive
in that it doesn't always reassign.


552
00:30:43,310 --> 00:30:46,914 line:-2
Take this example
using the nullish coalescing operator


553
00:30:46,980 --> 00:30:49,349 line:-1
where it always reassigns innerHTML.


554
00:30:51,385 --> 00:30:53,153 line:-1
With a nullish assignment operator,


555
00:30:53,220 --> 00:30:57,824 line:-2
it only destructively assigns innerHTML
if it is null or undefined.


556
00:30:59,259 --> 00:31:01,795 line:-2
Switching gears
back to objects for a moment,


557
00:31:01,862 --> 00:31:06,233 line:-2
WebKit in Safari 14 includes support
for public class fields.


558
00:31:07,601 --> 00:31:09,503 line:-1
Public class fields are a new syntax


559
00:31:09,570 --> 00:31:12,472 line:-2
to declare member properties
that are part of the object,


560
00:31:12,539 --> 00:31:14,975 line:-2
regardless of them being set up
in the constructor.


561
00:31:16,109 --> 00:31:19,847 line:-2
Looking at the Person example earlier,
they could be set up like this.


562
00:31:22,249 --> 00:31:24,751 line:-2
Now, children, for example,
will still be available


563
00:31:24,818 --> 00:31:27,054 line:-1
when a new Person object is created,


564
00:31:27,120 --> 00:31:29,256 line:-2
even though it isn't set
in the constructor.


565
00:31:30,224 --> 00:31:33,493 line:-2
By not having it in the constructor,
you can focus on the logic


566
00:31:33,560 --> 00:31:35,829 line:-1
instead of worrying if variables are set


567
00:31:35,896 --> 00:31:38,932 line:-2
as public class fields
are guaranteed to always be added.


568
00:31:39,867 --> 00:31:44,071 line:-2
And a final utility in JavaScript
to look at is String replaceAll.


569
00:31:47,875 --> 00:31:49,776 line:-1
Finally, String replaceAll


570
00:31:49,843 --> 00:31:53,547 line:-2
is new in Safari 13.1
and it does what it promises,


571
00:31:53,614 --> 00:31:56,216 line:-1
replacing all instances of a string.


572
00:31:56,817 --> 00:31:59,086 line:-1
Previously, the String replace method


573
00:31:59,152 --> 00:32:01,655 line:-2
would only replace
the first occurrence of the string.


574
00:32:02,222 --> 00:32:04,825 line:-2
You'd have to iterate
over the words in the string


575
00:32:04,892 --> 00:32:07,060 line:-1
or use a global regular expression.


576
00:32:08,695 --> 00:32:12,633 line:-2
With replaceAll, you can replace
all the instances of the string.


577
00:32:13,800 --> 00:32:16,003 line:-2
And those are the powerful
new JavaScript features


578
00:32:16,069 --> 00:32:17,771 line:-1
available in Safari this year.


579
00:32:17,838 --> 00:32:21,875 line:-2
BigInt, nullish coalescing,
optional chaining,


580
00:32:21,942 --> 00:32:23,844 line:-1
logical assignment operators,


581
00:32:23,911 --> 00:32:26,847 line:-1
public class fields and String replaceAll.


582
00:32:28,916 --> 00:32:30,517 line:-1
That's our JavaScript updates.


583
00:32:31,985 --> 00:32:33,654 line:-1
And finally, I'm going to share


584
00:32:33,720 --> 00:32:37,324 line:-2
a few exciting platform integration
capabilities new this year.


585
00:32:38,192 --> 00:32:41,461 line:-1
First up is AR Quick Look on iOS.


586
00:32:41,528 --> 00:32:43,664 line:-1
These are experiences launched from Safari


587
00:32:43,730 --> 00:32:46,567 line:-2
that can be customized
with web technologies.


588
00:32:46,633 --> 00:32:48,802 line:-1
And new with iOS 13.3,


589
00:32:48,869 --> 00:32:52,906 line:-2
these experiences can include
a banner for users to buy products.


590
00:32:52,973 --> 00:32:55,409 line:-2
You can customize
individual elements of the banner


591
00:32:55,475 --> 00:32:57,978 line:-1
or provide a completely custom banner


592
00:32:58,045 --> 00:32:59,613 line:-1
with a simple HTML page.


593
00:33:01,582 --> 00:33:03,217 line:0
To learn more, I encourage you


594
00:33:03,283 --> 00:33:06,353 line:0
to check out the "Shop Online
with AR Quick Look" session


595
00:33:06,420 --> 00:33:07,688 line:0
in the Developer app.


596
00:33:08,388 --> 00:33:11,692 line:0
Another platform technology
in Safari updated this year


597
00:33:11,758 --> 00:33:12,860 line:0
is Apple Pay.


598
00:33:14,728 --> 00:33:16,897 line:-1
Apple Pay on the web has been updated


599
00:33:16,964 --> 00:33:19,867 line:-2
to add new button types
with custom rounded corners


600
00:33:19,933 --> 00:33:22,870 line:-2
and the ability to request
redacted billing details.


601
00:33:24,671 --> 00:33:26,773 line:-2
This is great for merchants
that calculate tax


602
00:33:26,840 --> 00:33:30,410 line:-2
based on a customer's location,
but have no use for the shipping address.


603
00:33:30,477 --> 00:33:31,512 line:0
To learn more,


604
00:33:31,578 --> 00:33:34,181 line:0
see the "What's New
in Wallet and Apple Pay" session


605
00:33:34,248 --> 00:33:35,549 line:0
in the Developer app.


606
00:33:35,949 --> 00:33:39,419 line:-2
Finally, another experience
new this year is App Clips.


607
00:33:40,254 --> 00:33:43,857 line:-2
It gives users a focused, fast
and frictionless experience


608
00:33:43,924 --> 00:33:47,094 line:-2
without waiting for downloading
and installing an entire app.


609
00:33:47,160 --> 00:33:51,765 line:-2
On your website, you can let users know
that an App Clip interaction is available


610
00:33:51,832 --> 00:33:55,936 line:-2
by adding the apple-itunes meta tag
to your website's HTML


611
00:33:56,436 --> 00:33:58,639 line:-1
and include your AppStoreID


612
00:33:58,705 --> 00:34:01,508 line:-1
and the new app-clip-bundle-id parameter


613
00:34:01,575 --> 00:34:03,377 line:-1
to add a banner to your website.


614
00:34:05,379 --> 00:34:07,114 line:0
You can learn more about App Clips


615
00:34:07,181 --> 00:34:09,248 line:0
by watching
the "Explore App Clips" session


616
00:34:09,315 --> 00:34:10,484 line:0
in the Developer app.


617
00:34:11,952 --> 00:34:13,887 line:-1
That wraps up our platform integration


618
00:34:13,954 --> 00:34:16,290 line:-1
with customizable AR Quick Look,


619
00:34:16,356 --> 00:34:20,092 line:-2
Apple Pay updates
and the all-new App Clips experience.


620
00:34:21,728 --> 00:34:25,199 line:-2
And it also wraps up our tour
of the new features and improvements


621
00:34:25,264 --> 00:34:26,632 line:-1
of Safari and WebKit.


622
00:34:27,935 --> 00:34:30,137 line:-2
There's a whole lot new
in Safari this year


623
00:34:30,204 --> 00:34:31,672 line:-1
powered by changes in WebKit


624
00:34:31,737 --> 00:34:33,774 line:-2
and I encourage you
to try these features out


625
00:34:33,841 --> 00:34:35,141 line:-1
and share your feedback.


626
00:34:35,708 --> 00:34:37,878 line:-1
Now is the perfect time to test it.


627
00:34:37,945 --> 00:34:41,415 line:-2
And we'd love to hear how it goes,
especially if you run into bugs.


628
00:34:42,416 --> 00:34:44,918 line:-1
For Web API, CSS or JavaScript bugs,


629
00:34:44,985 --> 00:34:47,120 line:-2
you can file issues
on the WebKit bug tracker


630
00:34:47,187 --> 00:34:48,956 line:-1
at bugs.webkit.org.


631
00:34:49,790 --> 00:34:52,793 line:-1
For Safari bugs or issues specific to iOS,


632
00:34:52,860 --> 00:34:56,396 line:-2
Home Screen web apps
or Apple platform integration features,


633
00:34:56,463 --> 00:34:57,965 line:-1
you can use Feedback Assistant.


634
00:35:00,801 --> 00:35:03,370 line:-2
If you wanna stay on the leading edge
of what's coming,


635
00:35:03,437 --> 00:35:06,740 line:-2
you should download and use
Safari Technology Preview.


636
00:35:06,807 --> 00:35:10,777 line:-2
It's a separate version of Safari
that works right alongside of Safari


637
00:35:10,844 --> 00:35:12,279 line:-1
and it's shipped every two weeks


638
00:35:12,346 --> 00:35:15,015 line:-2
with a sneak peek of new
and experimental features,


639
00:35:15,082 --> 00:35:17,351 line:-1
as well as new Web Inspector tools.


640
00:35:17,417 --> 00:35:19,486 line:-1
So as a web developer, you can be using


641
00:35:19,553 --> 00:35:21,855 line:-2
the latest developer tools
every two weeks.


642
00:35:23,290 --> 00:35:24,591 line:-1
You can also stay informed


643
00:35:24,658 --> 00:35:27,861 line:-2
by keeping tabs
on the WebKit website at webkit.org.


644
00:35:27,928 --> 00:35:31,698 line:-2
It features blog posts,
Safari Technology Preview release notes


645
00:35:31,765 --> 00:35:33,800 line:-2
and a fantastic library
of reference guides


646
00:35:33,867 --> 00:35:35,269 line:-1
for using Web Inspector.


647
00:35:36,737 --> 00:35:39,573 line:-2
You can also follow WebKit on Twitter
for new announcements


648
00:35:39,640 --> 00:35:40,741 line:-1
about the WebKit project


649
00:35:40,807 --> 00:35:42,910 line:-2
along with tips and tricks
for Web Inspector.


650
00:35:43,610 --> 00:35:45,345 line:-2
And check out the links
related to this session,


651
00:35:45,412 --> 00:35:47,781 line:-1
including "Safari Web Extensions,"


652
00:35:47,848 --> 00:35:51,018 line:-2
"What's New in Web Inspector"
and more web technologies.


653
00:35:52,352 --> 00:35:55,289 line:-1
Thanks for joining me, and enjoy WWDC.

