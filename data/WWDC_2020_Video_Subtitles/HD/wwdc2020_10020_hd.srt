1
00:00:03.770 --> 00:00:06.740
Hello, and welcome to WWDC.


2
00:00:08.041 --> 00:00:09.309
Hi, everyone.


3
00:00:09.376 --> 00:00:13.514
My name is Drew Haas, and I'm an engineer
on the accessibility team.


4
00:00:13.580 --> 00:00:17.985
Today, I'm going to talk about how
you can make your app visually accessible.


5
00:00:18.785 --> 00:00:21.522
When you think about visual accessibility,


6
00:00:21.588 --> 00:00:25.692
you might think about VoiceOver,
the built-in screen reader on iOS.


7
00:00:25.993 --> 00:00:29.863
And you'd be right, because VoiceOver
speaks the items on-screen.


8
00:00:30.430 --> 00:00:33.433
It also allows you to navigate
and interact with your device


9
00:00:33.500 --> 00:00:35.602
without you needing to look at it.


10
00:00:35.669 --> 00:00:38.605
But there's so much more
to visual accessibility.


11
00:00:39.606 --> 00:00:43.277
Vision loss is best described
as a broad continuum.


12
00:00:43.343 --> 00:00:47.381
That's because people experience
a wide range of visual impairment.


13
00:00:47.781 --> 00:00:51.285
Some people have full sight,
partial sight or low sight,


14
00:00:51.351 --> 00:00:53.120
and some have no sight at all.


15
00:00:53.554 --> 00:00:56.657
And there's a lot in between,
like color blindness,


16
00:00:56.723 --> 00:00:59.993
light sensitivity,
motion sensitivity and more.


17
00:01:00.060 --> 00:01:03.630
Since each person's experience
with vision loss is unique,


18
00:01:03.697 --> 00:01:07.134
iOS offers a range
of visual accessibility settings


19
00:01:07.201 --> 00:01:09.536
so that everyone can get the most
out of their device


20
00:01:09.603 --> 00:01:11.371
in a way that works best for them.


21
00:01:11.438 --> 00:01:15.008
Today, I'll talk about
some of the great ways that your app


22
00:01:15.075 --> 00:01:18.846
can provide a visual experience
that is inclusive to everyone.


23
00:01:19.546 --> 00:01:22.983
First, I'll talk about the use of color
and shapes in your app,


24
00:01:23.050 --> 00:01:26.553
which are a great way for you to add
a personal touch, like branding.


25
00:01:27.187 --> 00:01:30.691
Next, I want to break down what it means
for text to be readable.


26
00:01:31.191 --> 00:01:34.461
You can leverage different text attributes
and layout changes in your app


27
00:01:34.528 --> 00:01:37.030
to make sure everyone has
a great reading experience.


28
00:01:37.097 --> 00:01:39.733
And last, in accessibility settings,


29
00:01:39.800 --> 00:01:42.035
users can customize
their display preferences,


30
00:01:42.102 --> 00:01:44.271
which may alter
the appearance of your app.


31
00:01:44.338 --> 00:01:46.573
I'll make sure you know
just what to look out for


32
00:01:46.640 --> 00:01:49.142
as you make your app visually accessible.


33
00:01:49.209 --> 00:01:52.346
When designing an app,
sometimes you may ask yourself,


34
00:01:52.880 --> 00:01:55.582
"How can I make
this particular UI element stand out?"


35
00:01:56.183 --> 00:01:59.620
Using color is often a great way
to create emphasis,


36
00:01:59.686 --> 00:02:02.155
but we don't want to rely on color alone.


37
00:02:02.222 --> 00:02:05.993
That's because for people
that are color-blind or have low vision,


38
00:02:06.059 --> 00:02:08.829
using color only to create emphasis
can get lost.


39
00:02:08.895 --> 00:02:12.199
There are extra steps you can take
to achieve good design,


40
00:02:12.266 --> 00:02:13.901
and I'll give you a hint:


41
00:02:13.967 --> 00:02:15.202
It's shapes.


42
00:02:15.269 --> 00:02:18.405
I'm searching for a new game to play
in Apple Arcade.


43
00:02:19.006 --> 00:02:21.074
Sneaky Sasquatch looks like fun.


44
00:02:21.608 --> 00:02:24.611
In the App Store,
buttons use the color system blue,


45
00:02:24.678 --> 00:02:27.014
and some use shapes
to help them stand out...


46
00:02:28.048 --> 00:02:29.850
like the "start playing" button,


47
00:02:29.917 --> 00:02:32.819
which is using color,
and it has a shape around it.


48
00:02:33.487 --> 00:02:34.988
This really helps it stand out,


49
00:02:35.055 --> 00:02:37.958
and lets a viewer know
it's not just a standard label.


50
00:02:38.492 --> 00:02:42.429
The extra visualization
captures my attention and draws me in,


51
00:02:42.496 --> 00:02:44.665
but I'll have to save this game for later.


52
00:02:44.731 --> 00:02:47.000
Let's talk about another example.


53
00:02:47.434 --> 00:02:51.438
Although tab bars only use color
by default to indicate the active tab,


54
00:02:52.072 --> 00:02:55.342
you can enable
the Button Shapes accessibility setting


55
00:02:55.409 --> 00:02:57.411
to get additional visualizations.


56
00:02:57.477 --> 00:03:00.013
If you want your buttons
to really stand out


57
00:03:00.080 --> 00:03:02.082
while the button shapes setting
is enabled,


58
00:03:02.149 --> 00:03:06.053
we're bringing new API to iOS 14
to help you accomplish this.


59
00:03:06.787 --> 00:03:09.823
If you can't fit button shapes
in your default design,


60
00:03:09.890 --> 00:03:13.594
you should provide an alternate appearance
for people with this setting enabled.


61
00:03:14.261 --> 00:03:18.765
To check this setting, you can call
button-Shapes-Enabled on UIAccessibility,


62
00:03:18.832 --> 00:03:22.669
or you can observe the button-Shapes-
Enabled-Status-Did-Change-Notification


63
00:03:22.736 --> 00:03:25.572
to run some code on the fly
when this setting is changed.


64
00:03:26.073 --> 00:03:30.878
Last year in iOS 13, we added new API
for Differentiate without Color,


65
00:03:30.944 --> 00:03:35.115
and this is a great way
to extend these ideas beyond just buttons.


66
00:03:35.182 --> 00:03:36.783
You should apply this design practice


67
00:03:36.850 --> 00:03:40.754
to things like status icons,
text with distinguishing colors,


68
00:03:40.821 --> 00:03:44.558
or anything else that relies
on color alone to convey meaning.


69
00:03:44.925 --> 00:03:48.562
If you aren't sure where to start,
try using SF Symbols.


70
00:03:49.496 --> 00:03:54.067
We provide over 1,500 consistent,
highly configurable symbols


71
00:03:54.134 --> 00:03:55.869
you can use in your app.


72
00:03:55.936 --> 00:03:58.105
There are so many to choose from,


73
00:03:58.172 --> 00:04:00.841
but if you don't find something
that fits perfectly,


74
00:04:00.908 --> 00:04:05.078
you can create your own by expanding on
icons provided by SF Symbols.


75
00:04:05.145 --> 00:04:06.146
Fun, right?


76
00:04:07.648 --> 00:04:12.719
SF Symbols are really powerful because
they look great at any weight and scale.


77
00:04:13.253 --> 00:04:16.023
This means
not only are you getting great symbolism,


78
00:04:16.089 --> 00:04:19.993
but you can configure the symbol
to scale with text size and style.


79
00:04:20.060 --> 00:04:23.430
Let's dive in to some of my own UI,
where I'm just getting started


80
00:04:23.497 --> 00:04:26.567
designing the visual experience
with color and shapes.


81
00:04:27.000 --> 00:04:30.204
I'm working on
a constellation tracking app, Starstruck.


82
00:04:31.004 --> 00:04:33.574
Early stages of development
are the best time


83
00:04:33.640 --> 00:04:37.377
to start thinking about
visual accessibility accommodations,


84
00:04:37.444 --> 00:04:39.713
but it's really never too late to dig in.


85
00:04:39.780 --> 00:04:42.382
I have a list of zodiac constellations,


86
00:04:42.449 --> 00:04:46.053
and I'm distinguishing between them
by choosing a custom color for each.


87
00:04:46.620 --> 00:04:49.957
If you're color-blind,
these might not stand out like I'd intend.


88
00:04:50.457 --> 00:04:53.026
Since I'm already working toward
making these stand out,


89
00:04:53.093 --> 00:04:58.765
I don't want to stop at using just color,
so I designed symbols to use in my app,


90
00:04:58.832 --> 00:05:02.469
giving each constellation
a distinct visual experience


91
00:05:02.536 --> 00:05:04.638
by using color and shapes.


92
00:05:05.072 --> 00:05:10.043
This way, more people get to have a fun
viewing experience when they use my app.


93
00:05:11.178 --> 00:05:15.148
I'm also using bold text optionally
to improve readability here,


94
00:05:15.215 --> 00:05:16.950
and I'll touch more on that later.


95
00:05:17.684 --> 00:05:19.987
When we do use color in our apps,


96
00:05:20.053 --> 00:05:24.892
it's important to keep in mind that color
contrast plays a huge role in readability,


97
00:05:24.958 --> 00:05:28.762
and it can be the difference between
someone being able to see an element


98
00:05:28.829 --> 00:05:30.831
or having it completely blend in.


99
00:05:31.465 --> 00:05:35.903
The Increase Contrast accessibility
setting makes elements stand out


100
00:05:35.969 --> 00:05:39.072
by updating colors
to high-contrast appearances.


101
00:05:39.139 --> 00:05:41.708
iOS offers a range of system colors


102
00:05:41.775 --> 00:05:44.978
that automatically adapt to settings
like Increase Contrast.


103
00:05:45.612 --> 00:05:49.249
If you're not using system colors,
you'll need to be aware of this setting


104
00:05:49.316 --> 00:05:51.952
to improve the visual experience
in your app.


105
00:05:52.352 --> 00:05:53.687
As a general rule,


106
00:05:53.754 --> 00:05:57.624
colors should get darker in Light Mode
and lighter in Dark Mode.


107
00:05:57.691 --> 00:06:00.994
I know that might sound confusing,
so here's an example.


108
00:06:01.628 --> 00:06:06.466
In default contrast, my zodiac symbols
are using colors I designed them with,


109
00:06:06.533 --> 00:06:11.705
but when Increase Contrast is turned on,
I need something a little bit darker here.


110
00:06:11.772 --> 00:06:15.309
Now, I want you to keep an eye
on the symbols in each cell


111
00:06:15.375 --> 00:06:17.845
as I enable Increase Contrast in settings.


112
00:06:18.478 --> 00:06:19.479
Ready?


113
00:06:20.113 --> 00:06:21.114
Okay.


114
00:06:21.181 --> 00:06:25.252
I know that might have looked subtle,
but this is a really big deal.


115
00:06:25.319 --> 00:06:29.790
For some people, having this boost
in contrast can make a huge difference.


116
00:06:29.857 --> 00:06:33.460
If you are using custom colors
and symbols like this in your app,


117
00:06:33.527 --> 00:06:35.229
you'll need update the tint color


118
00:06:35.295 --> 00:06:38.966
or provide alternate assets
for high-contrast appearances.


119
00:06:40.300 --> 00:06:42.135
In my project's asset catalog,


120
00:06:42.202 --> 00:06:44.404
I can configure the appearance
of my symbol


121
00:06:44.471 --> 00:06:47.107
by making changes
in the Attributes Inspector.


122
00:06:47.641 --> 00:06:51.678
Under Appearances,
you can check the High Contrast box


123
00:06:51.745 --> 00:06:54.214
to provide alternate versions
of your symbols.


124
00:06:55.349 --> 00:06:59.086
The High Contrast appearance will be used
when Increase Contrast is on.


125
00:06:59.753 --> 00:07:05.025
The Accessibility Inspector in Xcode has
a super-handy Color Contrast Calculator.


126
00:07:05.692 --> 00:07:09.730
You can use this tool to calculate
the contrast between any two colors.


127
00:07:10.197 --> 00:07:14.001
Here, I'm calculating the contrast
between my white symbol,


128
00:07:14.067 --> 00:07:18.005
which is in the foreground, against
my custom purple color in the background.


129
00:07:18.672 --> 00:07:21.375
This gives me a ratio of 4.5-to-1,


130
00:07:21.441 --> 00:07:24.745
which is generally the lowest acceptable
ratio for most cases.


131
00:07:25.546 --> 00:07:27.681
And here's my symbol's
high-contrast appearance.


132
00:07:28.182 --> 00:07:31.985
I'm darkening the background color
to really make that symbol pop,


133
00:07:32.052 --> 00:07:35.322
and my ratio is way better, at 7.5-to-1.


134
00:07:36.690 --> 00:07:41.128
All right. Now that I've provided
all of these variations, the work is done.


135
00:07:41.195 --> 00:07:45.933
iOS will automatically switch between them
based on anyone's display preference.


136
00:07:46.767 --> 00:07:50.170
And a shout-out to Smart Invert Colors,
which, like Dark Mode,


137
00:07:50.237 --> 00:07:52.539
darkens bright white UI elements.


138
00:07:53.106 --> 00:07:57.177
The difference is that Smart Invert
Colors generally has higher contrast,


139
00:07:57.244 --> 00:08:00.514
so people with light sensitivity
may prefer to use it.


140
00:08:00.581 --> 00:08:03.851
And whereas Dark Mode support
in your apps is recommended,


141
00:08:03.917 --> 00:08:08.889
Smart Invert Colors is a system setting
that asserts an inverted UI over any app.


142
00:08:08.956 --> 00:08:10.624
So it's great to keep in mind,


143
00:08:10.691 --> 00:08:14.361
someone using your app
might prefer to use Smart Invert Colors.


144
00:08:15.195 --> 00:08:18.932
You should specially flag certain views
in your app so they don't get inverted,


145
00:08:18.999 --> 00:08:22.035
like photos, videos and app icons.


146
00:08:23.136 --> 00:08:26.673
You can do that by setting
accessibility-Ignores-Invert-Colors


147
00:08:26.740 --> 00:08:28.575
on any UIView subclass.


148
00:08:30.410 --> 00:08:32.613
So when designing with color and shapes,


149
00:08:32.679 --> 00:08:36.283
you should take a variety of approaches
to create visual emphasis.


150
00:08:36.917 --> 00:08:40.020
Doing this adds a lot of character
to your app-- Hello, branding--


151
00:08:40.486 --> 00:08:43.557
while also making sure that
the rich visual experience in your app


152
00:08:43.624 --> 00:08:44.625
is inclusive.


153
00:08:45.092 --> 00:08:48.028
And be sure to observe
and respect people's preferences


154
00:08:48.095 --> 00:08:50.497
if your default design
is not accommodating.


155
00:08:51.532 --> 00:08:54.368
Next,
I want to talk about text readability.


156
00:08:56.003 --> 00:08:59.873
iOS provides support for changing
the size of text on your device.


157
00:09:00.641 --> 00:09:05.345
Smaller text can provide a higher content
density by fitting more words on-screen,


158
00:09:05.913 --> 00:09:08.415
and large text can make things easy
on the eyes.


159
00:09:09.316 --> 00:09:12.052
Some people, however,
rely on larger text sizes


160
00:09:12.119 --> 00:09:14.388
in order to read the content
on their device.


161
00:09:15.556 --> 00:09:19.960
When designing your app, keep text size,
weight, and layout in mind


162
00:09:20.027 --> 00:09:21.895
for clarity and readability.


163
00:09:22.396 --> 00:09:26.600
My biggest tip is to think about these
early on in the design process.


164
00:09:27.134 --> 00:09:29.736
This is a great way to ensure
your app looks good,


165
00:09:29.803 --> 00:09:31.905
not only for every content size,


166
00:09:31.972 --> 00:09:35.509
but also across many devices
with different display sizes.


167
00:09:36.143 --> 00:09:38.412
So design with large text in mind.


168
00:09:38.812 --> 00:09:42.516
You should avoid truncating text
as the content size increases


169
00:09:42.983 --> 00:09:45.252
so that the user doesn't miss out
on anything.


170
00:09:45.652 --> 00:09:49.990
Instead, wrap labels and use
all of the available display width.


171
00:09:51.358 --> 00:09:53.727
Remember those symbols
I talked about earlier?


172
00:09:53.794 --> 00:09:55.896
Well, those also should scale with text.


173
00:09:57.097 --> 00:10:00.601
You can override the function
trait-Collection-Did-Change,


174
00:10:00.667 --> 00:10:04.204
which gets called when display traits
are adjusted on the device.


175
00:10:05.038 --> 00:10:09.676
And UITraitCollection lets you get the
device's preferred content size category.


176
00:10:10.310 --> 00:10:13.247
And, yes,
you can use a comparison operator


177
00:10:13.313 --> 00:10:15.349
to perform comparisons on this enum.


178
00:10:15.415 --> 00:10:17.451
It's my favorite thing ever.


179
00:10:17.851 --> 00:10:20.921
In Starstruck,
when the user changes their text size,


180
00:10:20.988 --> 00:10:23.824
I want to calculate
whether it's a default font size


181
00:10:23.891 --> 00:10:26.460
or a large accessibility font size.


182
00:10:26.960 --> 00:10:31.965
For default font sizes, my stack views
containing the cell's symbol and label


183
00:10:32.032 --> 00:10:35.068
are set to the horizontal axis
with center alignment.


184
00:10:36.036 --> 00:10:38.272
When an accessibility font size
is enabled,


185
00:10:38.338 --> 00:10:40.908
I'm flipping the axis
and choosing leading alignment.


186
00:10:41.408 --> 00:10:45.045
This lets my label take advantage
of the full width of the display


187
00:10:45.112 --> 00:10:47.381
instead of sharing some of it
with the symbol.


188
00:10:48.148 --> 00:10:51.785
I'm also always setting this label's
line count to zero instead of one,


189
00:10:52.186 --> 00:10:55.622
so that if it were longer,
it would wrap for as long as it needs.


190
00:10:56.890 --> 00:10:59.626
Remember how I mentioned
that I'm using bold text optionally


191
00:10:59.693 --> 00:11:01.161
to improve readability?


192
00:11:01.762 --> 00:11:04.565
Using Bold Text
not only lets labels stand out


193
00:11:04.631 --> 00:11:06.500
when they're up against symbols,


194
00:11:06.567 --> 00:11:10.037
but also lets them stand out
when they're with other text as well.


195
00:11:10.103 --> 00:11:13.607
Did I mention Starstruck
lets users geek out about star stats?


196
00:11:13.974 --> 00:11:16.310
Here, I'm using bold text optionally


197
00:11:16.376 --> 00:11:20.147
to create visual distinction
between the title and detail label.


198
00:11:21.114 --> 00:11:23.784
Creating emphasis
with bold text is awesome.


199
00:11:23.851 --> 00:11:25.819
In fact, system-provided font styles


200
00:11:25.886 --> 00:11:28.188
lets you really change up
your text weight,


201
00:11:28.255 --> 00:11:31.758
which means we handle the heavy lifting,
and you don't need to lift a finger.


202
00:11:33.093 --> 00:11:36.597
The Bold Text accessibility setting
is for people that need this emphasis


203
00:11:36.663 --> 00:11:38.232
on all text in the system.


204
00:11:39.366 --> 00:11:42.870
Sometimes thin and even default
font styles are hard to read.


205
00:11:43.570 --> 00:11:46.773
If you aren't using system font styles
for text labels in your app,


206
00:11:46.840 --> 00:11:49.843
then it may not respond well
to the Bold Text setting.


207
00:11:49.910 --> 00:11:53.080
You can check the setting
by calling is-Bold-Text-Enabled


208
00:11:53.146 --> 00:11:57.150
on UIAccessibility and make updates
to your text styles manually.


209
00:11:58.051 --> 00:12:01.054
Last, I want to talk about
a few other display preferences


210
00:12:01.121 --> 00:12:03.223
which may alter
the appearance of your app.


211
00:12:04.725 --> 00:12:08.962
In my app, I've set up a parallax effect
on my constellation view controller.


212
00:12:09.796 --> 00:12:12.533
A parallax effect is a UIMotionEffect


213
00:12:12.599 --> 00:12:17.204
that helps me create a perception
of depth between stars in the foreground


214
00:12:17.271 --> 00:12:19.940
and the vastness of the universe
in the background.


215
00:12:20.607 --> 00:12:22.509
As I gently move my device,


216
00:12:22.576 --> 00:12:25.679
the stars in the foreground shift
against the artwork in the back.


217
00:12:26.780 --> 00:12:29.283
Another example of parallax
you might be familiar with


218
00:12:29.349 --> 00:12:30.584
is on the Home Screen.


219
00:12:30.651 --> 00:12:33.854
These effects are a lot of fun
to use and experience,


220
00:12:33.921 --> 00:12:36.223
but for some people,
this can be disorienting


221
00:12:36.290 --> 00:12:37.758
and cause motion sickness.


222
00:12:38.292 --> 00:12:41.328
There is a collection
of display accommodation settings


223
00:12:41.395 --> 00:12:44.131
that people can enable
if they're sensitive to motion.


224
00:12:44.831 --> 00:12:46.867
While these display settings are on,


225
00:12:46.934 --> 00:12:50.137
the user will expect adjustments
to motion on their device,


226
00:12:50.204 --> 00:12:55.275
like suppressing small idle animations,
parallax or other motion effects,


227
00:12:55.342 --> 00:12:58.979
auto-playing videos or GIFs,
and even slide transitions.


228
00:12:59.413 --> 00:13:03.283
We love using effects like this
to bring the software experience to life,


229
00:13:03.350 --> 00:13:05.886
but it's also our duty
to listen and respect the setting


230
00:13:05.953 --> 00:13:07.788
for users that have it enabled.


231
00:13:08.188 --> 00:13:11.558
If you are using dramatic
or frequent animations in your app,


232
00:13:12.125 --> 00:13:16.096
check is-Reduce-Motion-Enabled
on UIAccessibility before performing them.


233
00:13:17.097 --> 00:13:21.168
And you should observe the reduce-Motion-
Status-Did-Change-Notification


234
00:13:21.235 --> 00:13:24.638
to make adjustments if the setting changes
while your app is open.


235
00:13:25.739 --> 00:13:28.675
I want to tell you a little more about
the Reduce Motion setting


236
00:13:28.742 --> 00:13:30.577
Prefer Cross-Fade Transitions.


237
00:13:31.478 --> 00:13:33.981
As I move through
these navigation controllers,


238
00:13:34.047 --> 00:13:36.950
push segues are performed
with sliding animations.


239
00:13:37.684 --> 00:13:41.321
The next view controller slides into place
to cover the previous one.


240
00:13:42.256 --> 00:13:45.359
When the Prefer Cross-Fade Transition
setting is on,


241
00:13:45.425 --> 00:13:48.729
we replace the sliding transitions
for something a little more subtle.


242
00:13:49.329 --> 00:13:50.731
And now you can too.


243
00:13:50.797 --> 00:13:56.303
In iOS 14, we are introducing new API for
the Prefer Cross-Fade Transition setting.


244
00:13:57.137 --> 00:14:00.874
If you're already using UIKits,
UINavigationController,


245
00:14:00.941 --> 00:14:02.743
this work already comes for free.


246
00:14:03.377 --> 00:14:06.813
But if you've implemented
custom slide transitions in your app,


247
00:14:06.880 --> 00:14:08.148
this API is for you.


248
00:14:09.049 --> 00:14:11.885
You can check if you need to cross-fade
your transitions


249
00:14:11.952 --> 00:14:15.923
by calling prefers-Cross-Fade-Transitions
on UIAccessibility


250
00:14:15.989 --> 00:14:18.125
or observing the notification.


251
00:14:18.659 --> 00:14:20.694
Last is the Reduced Transparency setting,


252
00:14:20.761 --> 00:14:24.598
which sets blur effects
to become completely opaque.


253
00:14:24.665 --> 00:14:27.301
One big benefit of this
is text readability,


254
00:14:27.367 --> 00:14:30.571
because a blurry background
might have varying levels of contrast,


255
00:14:30.637 --> 00:14:32.406
making things hard to read.


256
00:14:32.840 --> 00:14:35.475
While my users are geeking out
about star stats,


257
00:14:35.542 --> 00:14:38.712
I added a visual effect
to blur some artwork in the background.


258
00:14:39.346 --> 00:14:43.383
This helps me create an experience
that is immersive and feels unique,


259
00:14:43.450 --> 00:14:45.352
but this isn't suitable for everyone.


260
00:14:45.686 --> 00:14:49.456
Some blur effects can cause the background
to have varying levels of contrast.


261
00:14:49.523 --> 00:14:52.893
When up against text, some readers
will have a hard time seeing this.


262
00:14:53.293 --> 00:14:55.062
Or it can make them feel dizzy.


263
00:14:55.395 --> 00:14:59.933
So when Reduced Transparency is on,
system blur effects and vibrancy effects


264
00:15:00.000 --> 00:15:02.836
are adjusted to become
a single solid color.


265
00:15:02.903 --> 00:15:05.672
For some,
this makes it much easier to read.


266
00:15:06.473 --> 00:15:10.043
If you're not using system visual effects
for blurs or vibrancy,


267
00:15:10.277 --> 00:15:13.280
UIAccessibility also provides API
free to use


268
00:15:13.347 --> 00:15:16.083
to check the display preference
for Reduced Transparency.


269
00:15:16.750 --> 00:15:18.919
By accommodating these display settings,


270
00:15:18.986 --> 00:15:22.356
you can be sure your app looks great
on anyone's device.


271
00:15:23.190 --> 00:15:24.791
All of this is so important


272
00:15:24.858 --> 00:15:28.195
because being able to use an app
that is inclusive and accommodating


273
00:15:28.262 --> 00:15:30.797
is, simply put,
empowering for our customers.


274
00:15:31.532 --> 00:15:33.567
Thank you for all of your work


275
00:15:33.634 --> 00:15:36.203
in making your app accessible
for everyone.


276
00:15:36.270 --> 00:15:40.073
Now, I'm inviting you
to go in accessibility settings,


277
00:15:40.140 --> 00:15:42.576
find some of the settings
I talked about today


278
00:15:42.643 --> 00:15:46.113
and turn them on,
so you can see what your app looks like.


279
00:15:46.180 --> 00:15:49.049
You'll be surprised
by what already looks great,


280
00:15:49.116 --> 00:15:50.817
and this will be the perfect place


281
00:15:50.884 --> 00:15:53.387
to start figuring out
what you can work on next.


282
00:15:54.188 --> 00:15:55.789
Thanks, everyone.

