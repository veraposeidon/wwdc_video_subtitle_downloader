1
00:00:03,804 --> 00:00:06,807 line:-1
Hello and welcome to WWDC.


2
00:00:08,141 --> 00:00:11,078 line:0
Welcome to "App Essentials in SwiftUI."


3
00:00:11,144 --> 00:00:13,814 line:0
My name is Matt Ricketson,
and I work on SwiftUI.


4
00:00:13,881 --> 00:00:16,116 line:0
Later on,
I'll be joined by my colleague Jeff.


5
00:00:16,683 --> 00:00:19,820 line:-1
Last year we introduced SwiftUI,


6
00:00:19,887 --> 00:00:23,257 line:-2
a powerful new way
to build great user interfaces


7
00:00:23,323 --> 00:00:25,058 line:-1
on all of Apple's platforms.


8
00:00:25,125 --> 00:00:28,328 line:-1
We build user interfaces using views,


9
00:00:28,395 --> 00:00:32,533 line:-2
and SwiftUI provides a suite of APIs
for modifying views


10
00:00:32,598 --> 00:00:34,601 line:-1
and composing them together.


11
00:00:35,602 --> 00:00:37,771 line:-1
This year, we're extending the framework


12
00:00:37,838 --> 00:00:41,108 line:-2
with new APIs for declaring
scenes and apps,


13
00:00:41,175 --> 00:00:44,878 line:-2
a big expansion to what you can build
using SwiftUI.


14
00:00:45,546 --> 00:00:48,849 line:-2
The bottom line
is that you can now build an entire app


15
00:00:48,916 --> 00:00:51,084 line:-1
with just SwiftUI.


16
00:00:51,718 --> 00:00:54,655 line:-2
In this session,
we're going to introduce these new APIs


17
00:00:54,721 --> 00:00:58,158 line:-2
and explain how views,
scenes and apps work together.


18
00:00:59,326 --> 00:01:03,263 line:-2
Next, we'll go in-depth
on SwiftUI's scene architecture


19
00:01:03,330 --> 00:01:07,201 line:-2
and show how you can customize
the scenes in your app.


20
00:01:07,267 --> 00:01:09,203 line:-1
And finally, we'll give a quick overview


21
00:01:09,269 --> 00:01:12,206 line:-2
of the different APIs available
for customizing your apps


22
00:01:12,272 --> 00:01:14,241 line:-1
and where you can go to learn more.


23
00:01:15,142 --> 00:01:17,845 line:-2
For now,
let's start by talking about views,


24
00:01:17,911 --> 00:01:21,849 line:-2
which you will already be familiar with
if you've used SwiftUI before.


25
00:01:22,449 --> 00:01:23,617 line:-1
Views are important


26
00:01:23,684 --> 00:01:27,354 line:-2
because each view
defines a piece of your UI.


27
00:01:27,421 --> 00:01:31,124 line:-2
When you look at an app,
everything you see is a view.


28
00:01:31,959 --> 00:01:35,195 line:-2
Individual images
and pieces of text are views.


29
00:01:35,996 --> 00:01:39,433 line:-2
The containers holding them
are also views.


30
00:01:39,499 --> 00:01:42,636 line:-1
In fact, every pixel you see on screen


31
00:01:42,703 --> 00:01:45,072 line:-1
is in some way defined by a view.


32
00:01:46,073 --> 00:01:48,842 line:-1
But not all views belong to the same app,


33
00:01:48,909 --> 00:01:53,046 line:-2
since apps do not have complete control
over the entire screen.


34
00:01:53,780 --> 00:01:57,784 line:-2
Instead, the platform controls
how apps are presented,


35
00:01:57,851 --> 00:02:00,988 line:-2
showing pieces of apps
in distinct regions.


36
00:02:02,256 --> 00:02:06,260 line:-2
In SwiftUI, we refer to these
distinct regions as "scenes."


37
00:02:07,361 --> 00:02:11,798 line:-2
A window is the most common way
that a scene's content is shown on screen.


38
00:02:11,865 --> 00:02:14,635 line:-1
Some platforms, like iPadOS,


39
00:02:14,701 --> 00:02:17,237 line:-1
can show multiple windows side-by-side.


40
00:02:17,971 --> 00:02:23,143 line:-2
Other platforms,
such as iOS, watchOS and tvOS,


41
00:02:23,210 --> 00:02:27,147 line:-2
prefer to show only a single
full-screen window for each app.


42
00:02:27,981 --> 00:02:29,683 line:-1
macOS is another great example


43
00:02:29,750 --> 00:02:33,187 line:-2
of how scene content
can appear in different ways.


44
00:02:33,253 --> 00:02:36,423 line:-2
In this case, we see a collection
of related windows,


45
00:02:36,490 --> 00:02:40,527 line:-2
where each window is a manifestation
of a different scene's content.


46
00:02:42,663 --> 00:02:45,599 line:-2
macOS also allows you
to gather up related windows


47
00:02:45,666 --> 00:02:47,601 line:-1
into a single, tabbed window.


48
00:02:47,668 --> 00:02:51,905 line:-2
In this case, our scenes are represented
as individual tabs instead.


49
00:02:53,407 --> 00:02:56,877 line:-2
This shared window
is also represented by its own scene,


50
00:02:56,944 --> 00:03:01,481 line:-2
serving as a container for
the child scenes associated with each tab.


51
00:03:02,349 --> 00:03:06,486 line:-2
These collections of scenes
make up the entire content of an app.


52
00:03:06,954 --> 00:03:10,023 line:-1
Together, apps, scenes and views


53
00:03:10,090 --> 00:03:12,693 line:-1
form a unified hierarchy of ownership.


54
00:03:14,895 --> 00:03:16,296 line:-1
As we mentioned earlier,


55
00:03:16,363 --> 00:03:18,665 line:-1
views serve as the basic building blocks,


56
00:03:18,732 --> 00:03:21,368 line:-1
rendering everything you see on screen,


57
00:03:21,435 --> 00:03:25,439 line:-2
and can be composed together
to form more complex user interfaces.


58
00:03:26,707 --> 00:03:29,476 line:-1
Views form the content of scenes,


59
00:03:29,543 --> 00:03:32,779 line:-2
allowing them to be independently
displayed by the platform.


60
00:03:33,914 --> 00:03:36,917 line:-2
Like views, those scenes
can also be composed together


61
00:03:36,984 --> 00:03:38,952 line:-1
to form more complex scenes,


62
00:03:39,019 --> 00:03:41,722 line:-2
like in our tabbed-window example
that we saw earlier.


63
00:03:42,723 --> 00:03:46,493 line:-2
And finally, all these scenes
form the content of your app.


64
00:03:48,829 --> 00:03:52,699 line:-2
Now that we understand how apps,
scenes and views work together,


65
00:03:52,766 --> 00:03:55,435 line:-2
let's look at how this plays out
in your SwiftUI code.


66
00:03:57,271 --> 00:03:59,506 line:-1
Here we see a basic app I wrote in SwiftUI


67
00:03:59,573 --> 00:04:03,310 line:-2
to help me keep track of the books
I'm reading in my book club.


68
00:04:03,377 --> 00:04:07,381 line:-2
As you can see, apps in SwiftUI
have a concise declaration,


69
00:04:07,447 --> 00:04:09,316 line:-1
meaning basic apps like this


70
00:04:09,383 --> 00:04:12,186 line:-2
can fit into only a handful
of lines of code.


71
00:04:12,819 --> 00:04:14,655 line:-1
Without that extra boilerplate,


72
00:04:14,721 --> 00:04:18,392 line:-2
you can focus immediately
on the code that's unique to your app.


73
00:04:19,692 --> 00:04:22,930 line:-2
In this case, we've defined
the actual interface of our app


74
00:04:22,996 --> 00:04:25,499 line:-1
using a view called ReadingListViewer.


75
00:04:26,967 --> 00:04:29,670 line:-2
ReadingListViewer
is a custom view I built separately


76
00:04:29,736 --> 00:04:32,105 line:-1
that allows me to browse my reading list.


77
00:04:33,373 --> 00:04:37,377 line:-2
Our ReadingListViewer is contained
within a scene called WindowGroup.


78
00:04:38,645 --> 00:04:41,081 line:-1
The WindowGroup scene manages the window


79
00:04:41,148 --> 00:04:43,784 line:-2
that our ReadingListViewer
will render into.


80
00:04:44,952 --> 00:04:46,920 line:-1
It can also create additional windows,


81
00:04:46,987 --> 00:04:48,856 line:-1
or new tabs within the same window,


82
00:04:48,922 --> 00:04:51,124 line:-1
on platforms that support those features.


83
00:04:52,092 --> 00:04:56,096 line:-2
Jeff will explain how WindowGroup works
in much more detail later in the talk.


84
00:04:57,164 --> 00:04:59,933 line:-2
Our WindowGroup scene
is contained within an app,


85
00:05:00,000 --> 00:05:04,004 line:-2
represented by a custom struct
conforming to the App protocol.


86
00:05:05,539 --> 00:05:07,774 line:-2
You'll notice
that the structure of the code


87
00:05:07,841 --> 00:05:11,111 line:-2
matches the hierarchy of ownership
we saw earlier--


88
00:05:11,178 --> 00:05:15,282 line:-2
the app contains the scenes,
and the scenes contain views.


89
00:05:16,517 --> 00:05:18,986 line:-2
You might also notice
that our app declaration


90
00:05:19,052 --> 00:05:21,955 line:-2
looks similar
to a custom-view declaration.


91
00:05:22,756 --> 00:05:27,261 line:-2
For example, both views and apps
are able to declare data dependencies.


92
00:05:27,995 --> 00:05:32,733 line:-2
Here, our ReadingListViewer
observes a ReadingListStore object.


93
00:05:34,134 --> 00:05:37,638 line:-2
Our app also depends
on a ReadingListStore object,


94
00:05:37,704 --> 00:05:40,274 line:-2
but declares itself
as the owner of that object


95
00:05:40,340 --> 00:05:42,643 line:-1
using the StateObject property wrapper,


96
00:05:42,709 --> 00:05:45,579 line:-2
which is a new feature
in SwiftUI this year.


97
00:05:46,747 --> 00:05:50,184 line:-2
Both views and apps
also declare a "body" property,


98
00:05:50,250 --> 00:05:52,419 line:-1
defining their user-interface content.


99
00:05:53,754 --> 00:05:57,157 line:-2
We talked earlier about how views
are composed of other views,


100
00:05:57,224 --> 00:05:59,893 line:-1
which is why a view's body returns a view.


101
00:06:00,661 --> 00:06:03,463 line:-1
An app, however, is built using scenes,


102
00:06:03,530 --> 00:06:06,333 line:-2
and so its body property
returns a scene instead.


103
00:06:08,168 --> 00:06:13,106 line:-2
Finally, you probably noticed
the @main attribute decorating our app.


104
00:06:13,173 --> 00:06:16,009 line:-1
This is a new attribute in Swift 5.3


105
00:06:16,076 --> 00:06:18,946 line:-2
that allows a type
to serve as the entry point


106
00:06:19,012 --> 00:06:21,014 line:-1
of our program's execution.


107
00:06:22,149 --> 00:06:26,153 line:-2
Normally, a Swift program would require
a main.swift file to execute.


108
00:06:27,087 --> 00:06:28,555 line:-1
With the @main attribute,


109
00:06:28,622 --> 00:06:32,159 line:-2
we can delegate that responsibility
to our app struct instead,


110
00:06:32,226 --> 00:06:35,662 line:-2
which automatically performs
all the necessary setup on launch


111
00:06:35,729 --> 00:06:37,731 line:-1
to get our app to appear on screen.


112
00:06:39,867 --> 00:06:42,870 line:-2
Now that we've reviewed the code,
let's take a step back.


113
00:06:44,638 --> 00:06:49,343 line:-2
What we see here is a complete declaration
for a basic app in SwiftUI,


114
00:06:49,409 --> 00:06:52,513 line:-2
fitting into only a handful
of lines of code.


115
00:06:53,480 --> 00:06:55,616 line:-1
But don't let this deceive you.


116
00:06:55,682 --> 00:06:58,552 line:-2
There is a ton of automatic,
intelligent behavior


117
00:06:58,619 --> 00:07:00,888 line:-1
packed into this simple declaration.


118
00:07:02,089 --> 00:07:04,424 line:-1
To really understand how this app works,


119
00:07:04,491 --> 00:07:07,127 line:-2
we need to talk more
about that WindowGroup scene,


120
00:07:07,194 --> 00:07:09,696 line:-1
which manages our user interface.


121
00:07:09,763 --> 00:07:12,599 line:-2
And for that,
I'm going to hand things over to Jeff.


122
00:07:12,666 --> 00:07:15,235 line:-1
Thanks, Matt. Hi, everyone.


123
00:07:16,270 --> 00:07:17,871 line:-1
First, I'd like to show you


124
00:07:17,938 --> 00:07:21,141 line:-2
some of the concepts
that Matt outlined in practice,


125
00:07:21,208 --> 00:07:22,709 line:-1
with a short demo,


126
00:07:22,776 --> 00:07:25,779 line:-2
and then I'll discuss
some of the finer points of WindowGroup.


127
00:07:28,115 --> 00:07:31,285 line:-2
I'm a pretty avid reader,
so I've been working on a little app


128
00:07:31,351 --> 00:07:34,621 line:-2
to track my progress in all of the books
I'm currently reading.


129
00:07:35,322 --> 00:07:39,860 line:-2
As you can see, my app launches
with an initial window on iPadOS


130
00:07:39,927 --> 00:07:42,162 line:-1
using the view I've specified as content.


131
00:07:42,863 --> 00:07:44,865 line:-2
Looks like I'm in the middle
of quite a few books,


132
00:07:44,932 --> 00:07:47,935 line:-2
so let's open some new windows
so I can check my progress.


133
00:07:48,802 --> 00:07:51,338 line:-1
If I open App Exposé,


134
00:07:51,405 --> 00:07:53,340 line:-1
I can easily create a new one here


135
00:07:53,407 --> 00:07:55,776 line:-1
and navigate to a different book.


136
00:07:55,843 --> 00:07:58,879 line:-2
WindowGroup provides
this functionality for my app


137
00:07:58,946 --> 00:08:00,581 line:-1
automatically on iPadOS.


138
00:08:01,515 --> 00:08:03,517 line:-1
You'll notice that each of my windows


139
00:08:03,584 --> 00:08:06,520 line:-2
is reflecting a different state
in the interface.


140
00:08:06,587 --> 00:08:09,556 line:-2
The selected book
is different in each one,


141
00:08:09,623 --> 00:08:13,360 line:-2
and changing it in one
does not affect the others.


142
00:08:13,427 --> 00:08:16,930 line:-1
This is a key aspect to scenes in SwiftUI.


143
00:08:17,531 --> 00:08:21,502 line:-2
An app can provide a shared model
for each scene to use,


144
00:08:21,568 --> 00:08:25,839 line:-2
but the state of the views in those scenes
will be independent.


145
00:08:25,906 --> 00:08:28,909 line:-2
I'd also like to point out something
in the App Switcher.


146
00:08:29,443 --> 00:08:32,546 line:-2
Each of my windows
is showing the name of my app,


147
00:08:32,613 --> 00:08:35,349 line:-1
as well as the name of the selected book.


148
00:08:35,414 --> 00:08:40,020 line:-2
This is done via a new view modifier
that we've introduced this year,


149
00:08:40,087 --> 00:08:42,155 line:-1
"navigation title,"


150
00:08:42,222 --> 00:08:46,059 line:-2
which on iOS can be used to populate
the title in the navigation bar


151
00:08:46,126 --> 00:08:47,828 line:-1
and the App Switcher.


152
00:08:47,895 --> 00:08:50,497 line:-1
This is one example of a view modifier


153
00:08:50,564 --> 00:08:53,200 line:-2
which can affect the state
of its parent scene.


154
00:08:55,402 --> 00:08:59,139 line:-2
On the Mac, it's very common for apps
to support multiple windows.


155
00:08:59,206 --> 00:09:01,475 line:-1
By using WindowGroup in your app,


156
00:09:01,542 --> 00:09:05,612 line:-2
SwiftUI will provide a menu item
in the file menu,


157
00:09:05,679 --> 00:09:08,682 line:-2
which supports creating
new scene instances.


158
00:09:10,651 --> 00:09:13,187 line:-1
This item can also be invoked


159
00:09:13,253 --> 00:09:16,490 line:-2
via the standard
Command-N keyboard shortcut.


160
00:09:17,925 --> 00:09:21,528 line:-2
You'll notice how navigation title
applies here on macOS.


161
00:09:22,462 --> 00:09:26,300 line:-2
The book title is being displayed
in the window's title-bar area.


162
00:09:28,035 --> 00:09:30,370 line:-1
It also will be used in the windows menu.


163
00:09:32,439 --> 00:09:36,109 line:-2
Providing a good title here
is important for the users


164
00:09:36,176 --> 00:09:40,314 line:-2
since, in addition to giving them more
context for what they're interacting with,


165
00:09:40,380 --> 00:09:43,851 line:-2
it also helps them select
their desired window


166
00:09:43,917 --> 00:09:45,886 line:-1
from the list of open ones.


167
00:09:46,486 --> 00:09:48,922 line:-1
Besides supporting multiple windows,


168
00:09:48,989 --> 00:09:52,159 line:-2
macOS also supports
grouping its windows together.


169
00:09:53,093 --> 00:09:54,528 line:-1
Via the window menu,


170
00:09:54,595 --> 00:09:58,832 line:-2
I can merge my open windows
into a single, tabbed interface...


171
00:10:02,035 --> 00:10:05,372 line:-2
with each tab being represented
by a separate scene.


172
00:10:06,707 --> 00:10:10,077 line:-2
Again, I didn't have to write any code
for this functionality.


173
00:10:10,143 --> 00:10:12,746 line:-1
SwiftUI provides this automatically.


174
00:10:13,814 --> 00:10:16,750 line:-2
Now that you've seen
some of the practical implications


175
00:10:16,817 --> 00:10:19,386 line:-2
of using the WindowGroup scene
in your app,


176
00:10:19,453 --> 00:10:21,588 line:-1
let's go over a few more details.


177
00:10:22,189 --> 00:10:24,992 line:-1
To recap what I showed you just now,


178
00:10:25,058 --> 00:10:26,527 line:-1
WindowGroup is a scene


179
00:10:26,593 --> 00:10:30,364 line:-2
which lets you express
the primary interface of your app.


180
00:10:32,132 --> 00:10:34,401 line:-2
The view that you provide to it
will be used


181
00:10:34,468 --> 00:10:36,603 line:-1
as the definition of that interface.


182
00:10:38,138 --> 00:10:41,675 line:-2
And this works on all of our platforms
in the expected way.


183
00:10:42,442 --> 00:10:45,579 line:-1
For example, on iOS and watchOS,


184
00:10:45,646 --> 00:10:47,214 line:-1
your view will be presented


185
00:10:47,281 --> 00:10:51,251 line:-2
in a window which occupies
the entire screen of the device.


186
00:10:51,952 --> 00:10:53,253 line:-1
While on macOS,


187
00:10:53,320 --> 00:10:56,356 line:-2
this window will be sized
according to your view's definition.


188
00:10:57,291 --> 00:10:58,659 line:-1
The life cycle of scenes


189
00:10:58,725 --> 00:11:01,361 line:-2
are managed by the platform
they are running on.


190
00:11:02,362 --> 00:11:04,765 line:-1
Using macOS as an example,


191
00:11:05,532 --> 00:11:08,869 line:-2
when the platform needs to create
a window for your app,


192
00:11:08,936 --> 00:11:12,472 line:-2
WindowGroup will instantiate
a new child scene


193
00:11:12,539 --> 00:11:16,109 line:-2
which by default will display its content
within a window.


194
00:11:18,512 --> 00:11:21,448 line:-2
On platforms which support
multiple windows,


195
00:11:21,515 --> 00:11:24,017 line:-1
such as macOS and iPadOS,


196
00:11:24,084 --> 00:11:26,920 line:-2
WindowGroup can instantiate
multiple children.


197
00:11:28,555 --> 00:11:31,491 line:-2
This can happen
in response to user actions


198
00:11:31,558 --> 00:11:35,262 line:-2
such as clicking a menu item
or invoking a multitasking gesture.


199
00:11:37,097 --> 00:11:41,768 line:-2
While each scene shares
the definition of its user interface,


200
00:11:41,835 --> 00:11:44,371 line:0
the views which make up this definition


201
00:11:44,438 --> 00:11:47,074 line:0
all have their own independent state.


202
00:11:48,609 --> 00:11:52,446 line:0
And this means that changing
the view state in one window


203
00:11:52,513 --> 00:11:54,515 line:0
does not affect the state of the others.


204
00:11:56,683 --> 00:11:59,520 line:-2
This functionality
lets you provide a template


205
00:11:59,586 --> 00:12:01,788 line:-1
to be used for your interface,


206
00:12:01,855 --> 00:12:04,791 line:-2
while letting your users
customize this interface


207
00:12:04,858 --> 00:12:06,860 line:-1
through the state you provide.


208
00:12:08,562 --> 00:12:12,666 line:-2
Since the platform is in charge
of the life cycle of scenes,


209
00:12:12,733 --> 00:12:15,802 line:-2
we've introduced
a new property wrapper this year


210
00:12:15,869 --> 00:12:19,339 line:-2
to help you manage restoration
of your view state.


211
00:12:20,307 --> 00:12:24,444 line:-2
The SceneStorage property wrapper
can be used to persist your view state.


212
00:12:26,246 --> 00:12:30,417 line:-2
It takes a unique key
which identifies the state to be stored.


213
00:12:31,251 --> 00:12:34,788 line:-2
This state will then be
automatically saved and restored


214
00:12:34,855 --> 00:12:37,291 line:-1
at the appropriate times by SwiftUI.


215
00:12:39,293 --> 00:12:42,196 line:-2
Now that I've shown you
more about how scenes


216
00:12:42,262 --> 00:12:44,765 line:-1
and specifically WindowGroup work,


217
00:12:44,831 --> 00:12:46,967 line:-1
I'd like to hand things back to Matt


218
00:12:47,034 --> 00:12:51,572 line:-2
who will give you some more info about
how you can customize your apps further.


219
00:12:51,638 --> 00:12:52,940 line:-1
Thanks, Jeff.


220
00:12:53,006 --> 00:12:54,908 line:-1
Before we finish up, I'd like to show you


221
00:12:54,975 --> 00:12:58,712 line:-2
just a few other new app-related features
available this year.


222
00:12:59,947 --> 00:13:02,683 line:-2
The BookClub app we saw earlier
was a data-driven app


223
00:13:02,749 --> 00:13:05,185 line:-1
backed by a shared data model.


224
00:13:05,252 --> 00:13:07,187 line:-1
But there are other kinds of apps as well,


225
00:13:07,254 --> 00:13:08,922 line:-1
such as document-based apps,


226
00:13:08,989 --> 00:13:11,325 line:-1
like we see here with the ShapeEdit app.


227
00:13:12,492 --> 00:13:15,329 line:-2
New this year
is the DocumentGroup scene type,


228
00:13:15,395 --> 00:13:18,432 line:-2
which automatically manages
opening, editing


229
00:13:18,498 --> 00:13:20,767 line:-1
and saving document-based scenes.


230
00:13:21,835 --> 00:13:23,337 line:0
To learn more, you should check out


231
00:13:23,403 --> 00:13:27,140 line:0
this year's "Build Document-Based Apps
in SwiftUI" talk.


232
00:13:28,942 --> 00:13:30,744 line:-1
Now, going back to our BookClub example,


233
00:13:30,811 --> 00:13:34,214 line:-2
a common feature of macOS apps
is a preferences window.


234
00:13:35,415 --> 00:13:38,018 line:-2
This year we're exposing
the new "settings" scene type,


235
00:13:38,085 --> 00:13:39,953 line:-1
available on macOS,


236
00:13:40,020 --> 00:13:43,524 line:-2
which automatically sets up
the standard preferences window.


237
00:13:44,224 --> 00:13:47,561 line:-2
The settings scene will automatically
set up the preferences command


238
00:13:47,628 --> 00:13:48,795 line:-1
in the app menu


239
00:13:48,862 --> 00:13:51,865 line:-2
and also give the window
the correct style treatment.


240
00:13:53,500 --> 00:13:55,135 line:-1
Speaking of menu commands,


241
00:13:55,202 --> 00:13:57,104 line:-1
SwiftUI is also providing an API


242
00:13:57,171 --> 00:14:00,107 line:-2
for you to add custom commands
to your scenes


243
00:14:00,174 --> 00:14:02,276 line:-1
using the new "commands" modifier.


244
00:14:03,610 --> 00:14:05,946 line:-2
BookCommands is a custom type
that I've defined.


245
00:14:06,013 --> 00:14:07,514 line:-1
Let's take a quick look.


246
00:14:08,549 --> 00:14:11,451 line:-1
The commands API is powerful and flexible,


247
00:14:11,518 --> 00:14:14,755 line:-2
using the same declarative,
state-driven programming model


248
00:14:14,821 --> 00:14:17,658 line:-1
we use in views, scenes and apps.


249
00:14:18,592 --> 00:14:21,695 line:-2
You can encapsulate commands
in custom types,


250
00:14:21,762 --> 00:14:24,198 line:-1
target actions based on user focus,


251
00:14:24,264 --> 00:14:27,568 line:-2
similar to the responder chain
in AppKit or UIKit,


252
00:14:27,634 --> 00:14:31,038 line:-2
and use normal views
to build the commands themselves.


253
00:14:31,672 --> 00:14:33,006 line:-1
Check out our reference documentation


254
00:14:33,073 --> 00:14:36,310 line:-2
for more information
about working with commands.


255
00:14:36,810 --> 00:14:39,413 line:-2
That was just a peek
at the new app-related APIs


256
00:14:39,479 --> 00:14:41,481 line:-1
available in SwiftUI this year.


257
00:14:42,249 --> 00:14:45,252 line:0
I'd recommend also checking out
these other SwiftUI talks,


258
00:14:45,319 --> 00:14:48,322 line:0
which will help you with building
the content of your apps.


259
00:14:49,489 --> 00:14:52,526 line:0
"Data Essentials in SwiftUI"
will build your knowledge


260
00:14:52,593 --> 00:14:56,430 line:0
of how to properly pass data
between your apps, scenes and views.


261
00:14:57,197 --> 00:14:59,099 line:0
And "What's New in Swift" will show you


262
00:14:59,166 --> 00:15:01,235 line:0
the latest improvements in the language


263
00:15:01,301 --> 00:15:03,537 line:0
that can improve all of your SwiftUI code.


264
00:15:05,339 --> 00:15:09,543 line:-2
We really look forward to seeing
all the great SwiftUI apps you build,


265
00:15:09,610 --> 00:15:12,846 line:-2
and we hope you share
your creations with us on the forums.


266
00:15:12,913 --> 00:15:16,884 line:-2
We love all your feedback
and can't wait to see what you build next.


267
00:15:17,518 --> 00:15:20,120 line:-1
Thanks and have a great WWDC.

