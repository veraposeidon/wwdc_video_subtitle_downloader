1
00:00:04,104 --> 00:00:06,473 line:-1
Hello and welcome to WWDC.


2
00:00:09,276 --> 00:00:13,080 line:0
Hello, everyone. My name is Abhi,
and I'm a software engineer here at Apple.


3
00:00:13,413 --> 00:00:14,848 line:0
Thanks for joining our session.


4
00:00:15,315 --> 00:00:18,986 line:-2
Today, we'll take a look at USD
as it's used around the world,


5
00:00:19,052 --> 00:00:24,124 line:-2
new workflows enabled by Reality
Composer's new USD export functionality,


6
00:00:24,191 --> 00:00:26,460 line:-1
and then take a peek behind the curtains


7
00:00:26,527 --> 00:00:30,130 line:-2
at the new AR USD schemas
helping make these workflows possible.


8
00:00:31,298 --> 00:00:34,902 line:-2
Last year, we introduced
Reality Composer for macOS and iOS,


9
00:00:34,968 --> 00:00:37,838 line:-2
with the goal of making
interactive AR content creation


10
00:00:37,905 --> 00:00:39,640 line:-1
intuitive and easy for developers.


11
00:00:40,107 --> 00:00:43,377 line:-2
Reality Composer allows you to import
your own USDZ content


12
00:00:43,443 --> 00:00:47,848 line:-2
or get started with a great built-in
library of static and procedural assets


13
00:00:47,915 --> 00:00:52,386 line:-2
and bring them to life with interactions,
physics, anchoring, and more.


14
00:00:52,986 --> 00:00:55,522 line:-2
This year, we've made it even easier
to bring content


15
00:00:55,589 --> 00:01:00,360 line:-2
from a Digital Content Creation tool,
or a DCC, into Reality Composer


16
00:01:00,861 --> 00:01:02,996 line:-2
with the introduction
of Reality Converter.


17
00:01:03,997 --> 00:01:09,136 line:-2
We've also added support to export content
from Reality Composer as a USDZ,


18
00:01:09,203 --> 00:01:13,407 line:-2
which enables new workflows between
Reality Composer and a variety of DCCs.


19
00:01:14,474 --> 00:01:17,544 line:-2
To make this possible,
we've worked in collaboration with Pixar


20
00:01:17,611 --> 00:01:21,014 line:-1
to develop new preliminary AR USD schemas,


21
00:01:21,081 --> 00:01:23,884 line:-2
which we'll take a look at in-depth
later in this session.


22
00:01:24,885 --> 00:01:26,954 line:-1
For those unfamiliar with USDZ,


23
00:01:27,020 --> 00:01:30,891 line:-2
USDZ is the compact,
single-file distribution format for USD.


24
00:01:31,692 --> 00:01:33,093 line:-1
It is optimized for sharing


25
00:01:33,160 --> 00:01:37,431 line:-2
and is deeply integrated into iOS,
macOS and tvOS


26
00:01:37,497 --> 00:01:41,101 line:-2
in applications like Messages, Files,
Safari and more.


27
00:01:42,169 --> 00:01:45,772 line:0
If you're interested to learn more
about USDZ as a distribution format,


28
00:01:45,839 --> 00:01:49,176 line:0
including more about
its underlying technology, USD,


29
00:01:49,243 --> 00:01:53,046 line:0
and relevant concepts such as schemas,
composition,


30
00:01:53,113 --> 00:01:56,116 line:0
the stage, prims, and properties,


31
00:01:56,183 --> 00:01:58,385 line:0
we encourage you
to check out last year's session,


32
00:01:58,452 --> 00:02:00,988 line:0
"Working with USD,"
in the "related talks" section.


33
00:02:02,256 --> 00:02:04,791 line:-2
Over even just the last year,
we've seen an exciting growth


34
00:02:04,858 --> 00:02:07,861 line:-2
in the adoption of USD
and the USDZ file format.


35
00:02:08,461 --> 00:02:13,667 line:-2
USD is being used everywhere,
from films to gaming to AR to DCCs.


36
00:02:14,201 --> 00:02:18,405 line:-2
A few examples include Pixar,
which uses USD for its films,


37
00:02:18,472 --> 00:02:23,210 line:-2
and Maya, Houdini, Unity, Unreal Engine,
and Adobe Aero,


38
00:02:23,277 --> 00:02:27,814 line:-2
which support USD interchange,
either as export or import or both.


39
00:02:28,749 --> 00:02:30,083 line:-1
So, why USD?


40
00:02:30,417 --> 00:02:33,353 line:-2
Let's take a high-level look
at other formats out there today.


41
00:02:34,621 --> 00:02:37,024 line:0
The most basic format is .obj,


42
00:02:37,090 --> 00:02:39,293 line:0
which essentially contains
a single 3D model.


43
00:02:39,826 --> 00:02:42,829 line:0
It has limited material support
and no support for animations.


44
00:02:43,964 --> 00:02:46,700 line:0
Then there's a large group
of more modern file formats.


45
00:02:46,767 --> 00:02:50,370 line:0
They usually support multiple models
that can be laid out in a scene graph


46
00:02:50,437 --> 00:02:53,173 line:0
and usually support
material definitions and animations.


47
00:02:54,908 --> 00:02:56,910 line:0
USD supports all of this,


48
00:02:56,977 --> 00:02:59,246 line:0
and is additionally designed
to be scalable.


49
00:02:59,313 --> 00:03:01,982 line:0
Pixar developed USD for use in its films.


50
00:03:02,583 --> 00:03:04,985 line:0
USD also allows for collaboration,


51
00:03:05,052 --> 00:03:07,521 line:0
allowing for many artists
to work on a single scene


52
00:03:07,588 --> 00:03:09,356 line:0
without getting in each other's way.


53
00:03:10,991 --> 00:03:13,527 line:0
USDZ is the archive package


54
00:03:13,594 --> 00:03:16,930 line:0
and inherits most of these features
and is optimized for sharing.


55
00:03:18,332 --> 00:03:20,467 line:-1
Next, we'll take a look at new workflows


56
00:03:20,534 --> 00:03:24,338 line:-2
enabled by Reality Composer's
new USDZ export functionality


57
00:03:24,671 --> 00:03:26,607 line:-1
and then take a peek behind the curtains


58
00:03:26,673 --> 00:03:29,877 line:-2
at the new AR USD schemas
that make this possible.


59
00:03:30,577 --> 00:03:32,913 line:-1
When Reality Composer launched last year,


60
00:03:32,980 --> 00:03:36,717 line:-2
it supported the import of USDZ content
and the export to Reality File.


61
00:03:39,019 --> 00:03:41,221 line:0
This year,
we've expanded the artist workflow


62
00:03:41,288 --> 00:03:43,357 line:0
with the introduction
of Reality Converter,


63
00:03:43,423 --> 00:03:47,427 line:0
which makes it easy to convert content
from DCCs to USDZ


64
00:03:47,494 --> 00:03:49,429 line:0
for import and use in Reality Composer.


65
00:03:51,431 --> 00:03:53,500 line:0
New this year as well
is the ability to export


66
00:03:53,567 --> 00:03:55,969 line:0
content created in Reality Composer
to USDZ.


67
00:03:56,436 --> 00:04:00,908 line:0
This enables not only new artist workflows
between Reality Composer and DCCs,


68
00:04:00,974 --> 00:04:03,777 line:0
but creates an ecosystem
of content creation tools


69
00:04:03,844 --> 00:04:06,180 line:0
all speaking the same language: USD.


70
00:04:08,182 --> 00:04:12,386 line:0
So, for example, we can start
by creating custom content in a DCC


71
00:04:12,452 --> 00:04:15,522 line:0
and use Reality Converter
to convert it to a USDZ


72
00:04:15,589 --> 00:04:17,391 line:0
and import it into Reality Composer.


73
00:04:18,858 --> 00:04:22,129 line:-1
Or we could import a USDZ we found online


74
00:04:22,196 --> 00:04:25,532 line:-2
or exported from another application
directly into Reality Composer.


75
00:04:26,667 --> 00:04:27,668 line:-1
And the third option


76
00:04:27,734 --> 00:04:31,872 line:-2
is we can start with any of the great
built-in content inside the asset library.


77
00:04:33,140 --> 00:04:36,210 line:-2
Next, we can add functionality
specific to Reality Composer,


78
00:04:36,276 --> 00:04:39,479 line:-2
such as interactions or physics
to bring our content to life


79
00:04:39,546 --> 00:04:41,682 line:-2
and anchoring
to help place it in the world.


80
00:04:42,950 --> 00:04:47,354 line:0
We can then export our creation
as a Reality File or as a USDZ.


81
00:04:48,789 --> 00:04:51,391 line:-2
Last year,
with the export of only Reality Files,


82
00:04:51,458 --> 00:04:53,927 line:-2
we would have been able to
share our content online


83
00:04:53,994 --> 00:04:56,330 line:-2
with family and friends,
view it in AR Quick Look


84
00:04:56,396 --> 00:04:57,998 line:-1
or use it in an application.


85
00:04:58,065 --> 00:05:00,868 line:-2
However, this is where
our content creation story would've ended.


86
00:05:00,934 --> 00:05:02,503 line:-1
This year, the journey continues.


87
00:05:02,569 --> 00:05:03,904 line:-1
We can take our USDZ


88
00:05:03,971 --> 00:05:07,641 line:-2
and continue making edits in any DCC
that supports the USDZ file format.


89
00:05:08,375 --> 00:05:11,178 line:-2
For example,
we could scatter our content in Houdini,


90
00:05:11,245 --> 00:05:16,183 line:-2
export it, pick it up in Maya,
make a few more edits, export it again,


91
00:05:16,250 --> 00:05:19,653 line:-2
and bring it back into Reality Composer
to make a few final additions.


92
00:05:21,455 --> 00:05:23,457 line:-1
We've designed the new AR USD schemas,


93
00:05:23,524 --> 00:05:26,193 line:-2
which we'll take a closer look at
later in this session,


94
00:05:26,260 --> 00:05:30,197 line:-2
so that they are compatible with DCCs
and viewers that haven't yet adopted them,


95
00:05:30,264 --> 00:05:32,466 line:-2
allowing you to make edits
without losing information


96
00:05:32,533 --> 00:05:34,668 line:-2
and view content
as accurately as possible.


97
00:05:36,270 --> 00:05:38,372 line:-2
So let's take a look
at an artist workflow.


98
00:05:40,007 --> 00:05:41,475 line:-1
So here I'm in Reality Composer,


99
00:05:41,542 --> 00:05:45,812 line:-2
and I've brought in some USDZ assets
from a variety of different sources.


100
00:05:46,413 --> 00:05:49,950 line:-2
For example,
here we have a plane and a toy car


101
00:05:50,017 --> 00:05:52,553 line:-2
from the AR Quick Look gallery
available online.


102
00:05:53,687 --> 00:05:56,957 line:-2
I've also worked with artists
to create some really nice assets,


103
00:05:57,024 --> 00:05:59,426 line:-2
including this sun asset
and this cloud asset.


104
00:06:01,828 --> 00:06:04,097 line:-2
And finally,
I've also worked with our artist


105
00:06:04,164 --> 00:06:08,035 line:-2
to create a nice wooden flag asset that
fits well with the rest of our content.


106
00:06:08,702 --> 00:06:10,971 line:-2
We've already brought it
through Reality Composer


107
00:06:11,038 --> 00:06:12,840 line:-1
and added a few behaviors.


108
00:06:12,906 --> 00:06:14,508 line:-1
So when I tap on this flag,


109
00:06:14,575 --> 00:06:19,246 line:-2
we'll see that it performs a behavior
and then displays some additional content.


110
00:06:20,113 --> 00:06:23,517 line:-2
So let's go ahead and preview that.
Again, this is a single USD.


111
00:06:23,984 --> 00:06:27,588 line:-2
So we'll see our content move
and additional content show up.


112
00:06:34,595 --> 00:06:35,929 line:-1
That looks pretty awesome.


113
00:06:36,296 --> 00:06:40,033 line:-2
So what I want to do in this demo now
is take all of my USDZ assets,


114
00:06:40,100 --> 00:06:44,638 line:-2
export them, bring them into Houdini,
and make them race against each other


115
00:06:44,705 --> 00:06:47,641 line:-2
with the beat of some music
that I made in GarageBand.


116
00:06:47,708 --> 00:06:50,844 line:-2
So the first thing we'll want to do
is export this content to USDZ,


117
00:06:51,311 --> 00:06:54,348 line:-2
and we can do that
by first going into our preferences...


118
00:06:55,516 --> 00:06:58,118 line:-1
and selecting "enable USDZ export."


119
00:06:59,987 --> 00:07:03,790 line:-2
Now when we go to export our content,
we'll see two different options.


120
00:07:03,857 --> 00:07:05,459 line:-1
We'll see the USDZ option


121
00:07:05,526 --> 00:07:08,128 line:-2
and our existing
Reality File export option.


122
00:07:08,595 --> 00:07:10,264 line:-1
Let's go ahead and export to USDZ.


123
00:07:10,831 --> 00:07:12,966 line:-2
And I've already done this
and brought it into Houdini,


124
00:07:13,033 --> 00:07:14,935 line:-1
so let's jump over to our prebaked scene.


125
00:07:17,738 --> 00:07:20,741 line:-2
So here we have our USDZ assets
in Houdini now.


126
00:07:20,807 --> 00:07:24,211 line:-2
We can see our toy car and our toy plane,
and I've worked with my artist


127
00:07:24,278 --> 00:07:26,680 line:-2
to position them
to create this racing scene.


128
00:07:26,747 --> 00:07:31,752 line:-2
So we can see we've instanced some of our
road assets and placed them along,


129
00:07:31,818 --> 00:07:33,754 line:-1
and we've also animated all of our content


130
00:07:33,820 --> 00:07:36,623 line:-2
to some additional music
that I made in GarageBand before.


131
00:07:36,690 --> 00:07:40,827 line:-2
We can see the full setup of our scene
right here in the Houdini editor,


132
00:07:40,894 --> 00:07:43,497 line:-2
and we can also get a preview
of our content right here.


133
00:07:43,931 --> 00:07:46,900 line:-2
So we'll see in our scene
I've also placed our flag asset.


134
00:07:47,434 --> 00:07:49,903 line:-2
Houdini doesn't yet
understand the behavior schema,


135
00:07:49,970 --> 00:07:53,574 line:-2
so we won't actually see our flag animate
and additional content show up.


136
00:07:53,640 --> 00:07:56,276 line:-2
However, it's still an asset,
so we can still place it.


137
00:07:56,677 --> 00:07:58,378 line:-1
When I go to export my content,


138
00:07:58,445 --> 00:08:00,948 line:-2
these behaviors are still
inside of the USD,


139
00:08:01,014 --> 00:08:03,116 line:-2
so when we bring it back
into Reality Composer


140
00:08:03,183 --> 00:08:07,588 line:-2
or another RealityKit-based application,
we should see our behaviors show up again.


141
00:08:09,022 --> 00:08:10,424 line:-1
So this is looking pretty good,


142
00:08:10,490 --> 00:08:12,826 line:-2
and what I want to do next
is export my content


143
00:08:12,893 --> 00:08:14,761 line:-2
so I can bring it back
into Reality Composer


144
00:08:14,828 --> 00:08:18,799 line:-2
and add a few final behaviors
like a play animation and some audio.


145
00:08:19,766 --> 00:08:22,402 line:-2
So, let's go ahead and export
our content from Houdini.


146
00:08:22,469 --> 00:08:24,972 line:-2
And I've already done that
and brought it into Reality Composer,


147
00:08:25,038 --> 00:08:26,974 line:-1
so let's jump over to our final scene.


148
00:08:28,108 --> 00:08:31,745 line:-2
So here in Reality Composer,
we have our baked asset from Houdini.


149
00:08:31,812 --> 00:08:34,982 line:-2
We can see it comes in
as one big asset together.


150
00:08:35,048 --> 00:08:39,253 line:-2
So we have our instance road,
our toy car and our toy plane


151
00:08:39,318 --> 00:08:41,188 line:-1
and some instance clouds as well.


152
00:08:41,822 --> 00:08:43,823 line:-1
And we'll notice that it has a behavior.


153
00:08:43,890 --> 00:08:47,127 line:0
I've already gone ahead
and set up a couple of behaviors here.


154
00:08:47,194 --> 00:08:52,232 line:0
Specifically, a Tap Trigger,
a USDZ Animation and a Play Music action.


155
00:08:52,966 --> 00:08:55,669 line:0
The USDZ Animation targets our baked scene


156
00:08:55,736 --> 00:08:58,172 line:0
and will play that animation
that we built in Houdini,


157
00:08:58,238 --> 00:09:01,508 line:0
which moves the plane and the car
to the beat of some music.


158
00:09:02,709 --> 00:09:04,645 line:0
So let's go ahead and preview our scene.


159
00:09:06,480 --> 00:09:10,851 line:-2
We can see that when I tap on the flag,
our original behavior comes through.


160
00:09:10,918 --> 00:09:14,655 line:-2
It's gone all the way through Houdini
and now comes back in Reality Composer.


161
00:09:15,923 --> 00:09:16,990 line:-1
And now...


162
00:09:17,057 --> 00:09:18,125 line:-1
[lively music plays]


163
00:09:18,192 --> 00:09:21,028 line:-2
...we'll see that our content animates,
and we hear some audio.


164
00:09:28,402 --> 00:09:29,703 line:0
That looks pretty sweet.


165
00:09:29,770 --> 00:09:32,406 line:0
I think I'm ready to export this now
as USDZ


166
00:09:32,472 --> 00:09:34,675 line:-2
and bring it into my RealityKit
application


167
00:09:34,741 --> 00:09:36,376 line:-1
and publish it to the App Store.


168
00:09:36,443 --> 00:09:39,746 line:-2
So we've seen how we can start
with some content in Reality Composer


169
00:09:39,813 --> 00:09:41,882 line:-2
that we've brought in
from various different sources,


170
00:09:41,949 --> 00:09:45,052 line:-2
including the AR Quick Look Gallery
and other DCCs.


171
00:09:45,118 --> 00:09:46,486 line:-1
And we saw how, for example,


172
00:09:46,553 --> 00:09:51,058 line:-2
the flag asset kept the behaviors
that we imbued from Reality Composer


173
00:09:51,124 --> 00:09:53,794 line:-2
through a full import, export,
and import flow


174
00:09:53,861 --> 00:09:57,865 line:-2
between Reality Composer, Houdini,
and again, Reality Composer.


175
00:09:59,233 --> 00:10:03,036 line:-2
So that's a look at the new workflows
and USD-based content creation ecosystem


176
00:10:03,103 --> 00:10:07,074 line:-2
enabled by Reality Composer's
new USDZ export functionality.


177
00:10:07,674 --> 00:10:10,043 line:-2
Next, let's take a closer look
behind the scenes


178
00:10:10,110 --> 00:10:11,912 line:-1
at the new AR USD schemas


179
00:10:11,979 --> 00:10:15,616 line:-2
making the export of Reality Composer
content to USDZ possible.


180
00:10:17,551 --> 00:10:21,355 line:-2
Reality Composer enables you to create
many different kinds of experiences


181
00:10:21,421 --> 00:10:27,561 line:-2
with features like scenes, AR anchoring,
interactions, physics, 3D text,


182
00:10:27,628 --> 00:10:28,996 line:-1
spatial audio, and more.


183
00:10:30,631 --> 00:10:32,332 line:-1
We've worked in collaboration with Pixar


184
00:10:32,399 --> 00:10:35,969 line:-2
to create new preliminary schemas
and structures for all of this


185
00:10:36,036 --> 00:10:39,439 line:-2
to enable the export
of Reality Composer content to USDZ.


186
00:10:40,140 --> 00:10:43,644 line:-2
As a reminder,
schemas are USD's extension mechanism,


187
00:10:43,710 --> 00:10:46,346 line:-2
allowing you to specify new types
in the Library.


188
00:10:46,747 --> 00:10:49,850 line:-2
In this section, we want to give you
an overview of these new schemas


189
00:10:49,917 --> 00:10:51,952 line:-2
so you can gain an intuition
of their design


190
00:10:52,019 --> 00:10:54,655 line:-2
to adopt into your own content
or editor applications.


191
00:10:55,055 --> 00:10:58,125 line:-2
We encourage you to also check out
our in-depth documentation


192
00:10:58,192 --> 00:11:01,528 line:-2
available on the Developer site
for more information and examples.


193
00:11:02,262 --> 00:11:03,697 line:-1
So let's start with scenes.


194
00:11:03,764 --> 00:11:06,733 line:-2
Scenes are a fundamental part
of Reality Composer.


195
00:11:06,800 --> 00:11:09,036 line:-1
A single scene can contain multiple models


196
00:11:09,102 --> 00:11:13,540 line:-2
and specify scene-wide properties,
such as gravity, ground plane materials


197
00:11:13,607 --> 00:11:16,510 line:-2
and where in the world
our content would like to be anchored.


198
00:11:17,911 --> 00:11:21,315 line:-2
You can create multiple scenes
in a single Reality Composer project


199
00:11:21,381 --> 00:11:23,817 line:-2
and load each individually
in an application


200
00:11:23,884 --> 00:11:26,353 line:-2
or stitch them together
with the change scene action


201
00:11:26,420 --> 00:11:28,589 line:-1
to create a larger overall experience.


202
00:11:30,057 --> 00:11:34,862 line:-2
The scene structure in USD defines
multiple scenes in a single USD file,


203
00:11:34,928 --> 00:11:37,164 line:-1
with scenes being targetable by behaviors.


204
00:11:37,798 --> 00:11:41,668 line:-2
You can also load a scene by name
in a RealityKit-based application


205
00:11:41,735 --> 00:11:43,704 line:-1
just like you can for a Reality File.


206
00:11:45,706 --> 00:11:48,141 line:-2
Let's take a look at the scene structure
in a USD.


207
00:11:48,208 --> 00:11:51,378 line:-2
Here we're taking a look
at the plain-text version of USD,


208
00:11:51,445 --> 00:11:53,981 line:-1
known as a USDA, for readability.


209
00:11:54,848 --> 00:11:57,451 line:-2
Scenes are structured
under a scene library,


210
00:11:57,518 --> 00:12:03,056 line:-2
which is specified using a new type
of "kind" metadata called sceneLibrary,


211
00:12:03,123 --> 00:12:04,124 line:-1
on the root prim.


212
00:12:05,659 --> 00:12:09,630 line:-2
Each Xformable prim under this root prim
is considered a scene,


213
00:12:09,696 --> 00:12:14,701 line:-2
and it can contain its own tree of prims
defining meshes, materials, behaviors,


214
00:12:14,768 --> 00:12:17,971 line:-2
anchoring, and more,
just like in a single-scene USD.


215
00:12:18,772 --> 00:12:22,309 line:-2
Scenes can be marked active
by using the "def" specifier


216
00:12:22,376 --> 00:12:24,811 line:-2
and inactive
by using the "over" specifier.


217
00:12:25,312 --> 00:12:29,716 line:-2
This also allows DCCs and viewers that
haven't yet adopted the scene structure


218
00:12:29,783 --> 00:12:31,985 line:-2
to still be able to view
all active scenes.


219
00:12:33,020 --> 00:12:36,623 line:-2
So if we want to swap
the "def" and "over" for our scenes,


220
00:12:36,690 --> 00:12:38,926 line:-2
we'll now see the sphere
instead of the cube.


221
00:12:40,661 --> 00:12:43,297 line:-2
In addition,
each scene can be given a readable name.


222
00:12:43,697 --> 00:12:45,999 line:-2
This name can be used
to load a particular scene


223
00:12:46,066 --> 00:12:49,436 line:-2
from the USDZ
in a RealityKit-based application,


224
00:12:49,503 --> 00:12:51,305 line:-1
just like you would for a Reality File.


225
00:12:51,371 --> 00:12:54,541 line:-2
Note that RealityKit, AR Quick Look,
and Reality Composer


226
00:12:54,608 --> 00:12:57,411 line:-2
only support a single active scene
in a scene library


227
00:12:57,477 --> 00:12:59,479 line:-1
and don't yet support nested scenes.


228
00:12:59,746 --> 00:13:01,682 line:-1
Next, let's take a look at anchoring.


229
00:13:01,748 --> 00:13:05,619 line:-2
Anchoring helps specify where content
should anchor in the real world.


230
00:13:06,386 --> 00:13:09,223 line:-2
For example, one scene can anchor
to a horizontal plane,


231
00:13:09,289 --> 00:13:11,091 line:-1
like a table or a floor,


232
00:13:11,158 --> 00:13:14,494 line:-2
and another scene can anchor to and follow
an image or a face.


233
00:13:15,362 --> 00:13:17,798 line:-2
The AR anchoring schema
is an applied schema


234
00:13:17,865 --> 00:13:21,468 line:-2
that supports specifying
the horizontal plane, vertical plane,


235
00:13:21,535 --> 00:13:23,303 line:-1
image, and face anchoring types.


236
00:13:23,570 --> 00:13:27,508 line:-2
Note that ARObject and GeoLocation anchors
aren't yet supported in USD.


237
00:13:29,243 --> 00:13:32,346 line:-2
Let's take a look at how to add
anchoring information to a USD.


238
00:13:32,746 --> 00:13:35,249 line:-1
Here we have a basic cube in our USD.


239
00:13:35,816 --> 00:13:38,519 line:-2
We want to anchor this cube
to an image in the real world.


240
00:13:38,585 --> 00:13:41,855 line:-2
We can do this by first applying
the anchoring schema to the prim...


241
00:13:43,056 --> 00:13:45,125 line:-1
and then specifying the anchoring type.


242
00:13:45,192 --> 00:13:47,728 line:-2
In this case, because we're aligning
our content to an image,


243
00:13:47,794 --> 00:13:49,129 line:-1
we use the "image" type,


244
00:13:49,930 --> 00:13:52,599 line:-2
and then specify
our related image reference prim.


245
00:13:54,501 --> 00:13:57,905 line:-2
The image reference prim
contains a reference to the image,


246
00:13:57,971 --> 00:14:02,309 line:-2
which can be a JPG or a PNG,
as outlined in the USDZ specification,


247
00:14:03,177 --> 00:14:04,945 line:-1
and then define its physical width.


248
00:14:05,012 --> 00:14:09,316 line:-2
This property is defined in centimeters
to avoid unit changes due to composition


249
00:14:09,383 --> 00:14:12,486 line:-2
or edits made by a DCC
that hasn't yet adopted the schema.


250
00:14:13,020 --> 00:14:14,922 line:-1
Next, let's take a look at behaviors.


251
00:14:14,988 --> 00:14:19,059 line:-2
Behaviors in Reality Composer allow you
to easily bring your 3D content to life.


252
00:14:20,360 --> 00:14:23,363 line:-2
A behavior in Reality Composer
contains a single trigger


253
00:14:23,430 --> 00:14:25,199 line:-1
that can target multiple objects,


254
00:14:25,265 --> 00:14:28,235 line:-2
such as a tap, collision,
or proximity event,


255
00:14:28,302 --> 00:14:31,672 line:-2
and can contain one or more actions
targeting multiple objects,


256
00:14:31,738 --> 00:14:34,808 line:-2
such as Emphasize, Play Audio,
and Add Force.


257
00:14:35,175 --> 00:14:38,312 line:-2
Here, we have an example of a tap trigger
with a bounce action.


258
00:14:40,480 --> 00:14:43,250 line:-2
The behavior schema follows
this same structure,


259
00:14:43,317 --> 00:14:45,118 line:-1
but also pulls back the curtain


260
00:14:45,185 --> 00:14:48,856 line:-2
and allows for more complex nesting
and composition of triggers and actions.


261
00:14:50,123 --> 00:14:52,759 line:-2
The schema defines
only three new prim types:


262
00:14:52,826 --> 00:14:55,128 line:-1
a behavior, a trigger, and an action.


263
00:14:55,729 --> 00:14:58,498 line:-2
Specific triggers and actions are defined
with data schemas


264
00:14:58,565 --> 00:15:00,701 line:-1
similar to UsdPreviewSurface,


265
00:15:00,767 --> 00:15:03,804 line:-2
which allows the behavior schema
to be much more flexible


266
00:15:03,871 --> 00:15:07,040 line:-2
beyond the initial triggers and actions
we've added support for this year.


267
00:15:08,242 --> 00:15:10,110 line:-1
Let's add a behavior to our scene.


268
00:15:10,177 --> 00:15:15,148 line:-2
Here, we've defined a single behavior
defining a tap trigger and a bounce action


269
00:15:15,215 --> 00:15:17,317 line:-2
as seen in the video
in the previous slide.


270
00:15:18,819 --> 00:15:22,089 line:-2
The behavior contains an array
of trigger relationships


271
00:15:22,155 --> 00:15:24,291 line:-1
and another array of action relationships.


272
00:15:25,859 --> 00:15:27,861 line:-2
Nested in the behavior,
we've defined a trigger,


273
00:15:27,928 --> 00:15:29,196 line:-1
which is our tap trigger.


274
00:15:30,063 --> 00:15:31,899 line:-2
The trigger defines itself
as a tap trigger


275
00:15:31,965 --> 00:15:33,634 line:-1
using the "info:id" property...


276
00:15:35,269 --> 00:15:37,504 line:-2
and the objects that are observed
for tap events


277
00:15:37,571 --> 00:15:38,839 line:-1
which invoke this trigger.


278
00:15:39,306 --> 00:15:43,177 line:-2
In this case, our tap trigger targets
our cube prim from the previous examples.


279
00:15:45,479 --> 00:15:47,247 line:-1
We also have a nested action


280
00:15:47,314 --> 00:15:50,250 line:-2
and have related our behaviors trigger
and action properties


281
00:15:50,317 --> 00:15:51,585 line:-1
to their object paths.


282
00:15:52,386 --> 00:15:54,388 line:-2
The action defines itself
as a bounce action


283
00:15:54,454 --> 00:15:57,391 line:-2
using the info:id property
and motionType properties.


284
00:15:57,891 --> 00:16:01,528 line:-2
The motionType property is defined
as a property in the emphasize actions


285
00:16:01,595 --> 00:16:03,197 line:-1
in the behavior's data schema,


286
00:16:03,497 --> 00:16:07,301 line:-2
and the bounce action's target is defined
with the affectedObjects property,


287
00:16:07,367 --> 00:16:08,769 line:-1
which, again, is our cube.


288
00:16:10,237 --> 00:16:11,505 line:-1
Together with the trigger,


289
00:16:11,572 --> 00:16:14,675 line:-2
we've defined a behavior
that bounces the cube when it is tapped.


290
00:16:17,377 --> 00:16:19,012 line:-1
In the previous example,


291
00:16:19,079 --> 00:16:21,982 line:-2
we only had one trigger and one action
for this behavior,


292
00:16:22,049 --> 00:16:25,886 line:-2
but multiple triggers and multiple actions
can be related to these properties.


293
00:16:26,320 --> 00:16:28,055 line:-1
When multiple triggers are defined,


294
00:16:28,121 --> 00:16:31,225 line:-2
the satisfaction of any of them
will invoke the related actions.


295
00:16:32,192 --> 00:16:35,229 line:-2
When multiple actions are defined,
they each run serially,


296
00:16:35,295 --> 00:16:36,630 line:-1
one after the other.


297
00:16:36,697 --> 00:16:40,467 line:-2
We have also encoded the concept of
group actions in our action data schema,


298
00:16:40,534 --> 00:16:44,071 line:-2
which allows for serial
or parallel execution of related actions.


299
00:16:45,839 --> 00:16:48,775 line:-2
Also, behaviors are automatically loaded
as part of the scene.


300
00:16:49,376 --> 00:16:51,945 line:-2
If behaviors are defined
in a multi-scene USD,


301
00:16:52,012 --> 00:16:54,281 line:-2
they will be scoped to the scene
in which they're defined.


302
00:16:54,348 --> 00:16:56,550 line:-1
In this example, we have three behaviors


303
00:16:56,617 --> 00:16:59,119 line:-2
which are all loaded
as part of the "My Cube Scene."


304
00:17:01,655 --> 00:17:03,790 line:-1
Next, let's take a look at physics.


305
00:17:03,857 --> 00:17:05,092 line:-1
Physics in Reality Composer


306
00:17:05,157 --> 00:17:08,194 line:-2
helps make your AR content
feel at home in the real world.


307
00:17:08,996 --> 00:17:12,266 line:-2
In Reality Composer, you can define
the physical properties of an object,


308
00:17:12,332 --> 00:17:15,702 line:-2
such as its physics material,
like rubber, plastic or wood,


309
00:17:16,203 --> 00:17:18,839 line:-2
its collision shape,
such as a box or a sphere,


310
00:17:19,705 --> 00:17:20,707 line:-1
and motion type,


311
00:17:21,175 --> 00:17:23,310 line:-1
as well as scene-level physical properties


312
00:17:23,377 --> 00:17:25,444 line:-2
like the ground plane material
and gravity.


313
00:17:25,846 --> 00:17:29,116 line:-2
The physics schema allows you
to set up a physics rigid body simulation.


314
00:17:29,650 --> 00:17:32,186 line:-2
It does this with schemas
for the physics material,


315
00:17:32,753 --> 00:17:36,857 line:-2
colliders, rigid bodies and forces,
specifically gravity.


316
00:17:38,792 --> 00:17:41,595 line:-2
Here we have a wooden ball
that we want to make participate


317
00:17:41,662 --> 00:17:44,431 line:-2
in the physics simulation
as a dynamic object.


318
00:17:45,766 --> 00:17:48,669 line:-2
To achieve that,
we're applying the collider API


319
00:17:48,735 --> 00:17:50,771 line:-1
and the rigid body API to our prim.


320
00:17:51,905 --> 00:17:54,341 line:-2
We're using the prim's own geometry
in this case


321
00:17:54,408 --> 00:17:56,310 line:-1
to define its convex collider shape.


322
00:17:56,810 --> 00:17:58,946 line:-1
This property comes from the collider API.


323
00:17:59,446 --> 00:18:02,249 line:-2
We're then giving our wooden ball
a mass of ten kilograms.


324
00:18:02,316 --> 00:18:06,253 line:-2
This property uses kilograms to avoid
unintended scaling due to composition,


325
00:18:06,320 --> 00:18:07,821 line:-1
similar to the anchoring API.


326
00:18:08,856 --> 00:18:12,025 line:-2
Next, we can apply a wood physics material
to our wooden ball.


327
00:18:12,526 --> 00:18:14,394 line:-1
Here we're defining a wooden material.


328
00:18:15,162 --> 00:18:17,564 line:-2
The physics material schema
is an applied schema,


329
00:18:17,631 --> 00:18:20,334 line:-2
so we first apply it
to our wood material prim.


330
00:18:20,400 --> 00:18:22,102 line:-1
We've opted for an applied schema


331
00:18:22,169 --> 00:18:25,506 line:-2
so that these properties can be applied
to an existing material in the scene


332
00:18:25,572 --> 00:18:27,674 line:-1
without having to create a brand-new prim


333
00:18:28,375 --> 00:18:30,911 line:-2
and then define various properties
about the material,


334
00:18:30,978 --> 00:18:33,146 line:-1
such as its restitution and its friction.


335
00:18:33,747 --> 00:18:36,316 line:-2
We can then apply the material
to our wooden sphere.


336
00:18:37,284 --> 00:18:39,887 line:-2
Next, let's make sure
our content doesn't fall into infinity


337
00:18:39,953 --> 00:18:42,289 line:-2
by adding a ground plane collider
to our scene.


338
00:18:42,356 --> 00:18:45,192 line:-2
We can do this
by specifying an infinite collider plane


339
00:18:45,659 --> 00:18:47,895 line:-2
and then marking it
as the scene ground plane.


340
00:18:48,629 --> 00:18:50,130 line:-1
For maximum compatibility,


341
00:18:50,197 --> 00:18:53,033 line:-2
we're putting this into
the custom data dictionary for the prim


342
00:18:53,100 --> 00:18:55,068 line:-1
so that older versions of USD


343
00:18:55,135 --> 00:18:57,838 line:-2
that do not have this registered
can still open the file.


344
00:18:59,106 --> 00:19:01,608 line:-2
We can then specify the plane's position
and normal...


345
00:19:03,177 --> 00:19:05,245 line:-2
and we can also apply a material
to our plane.


346
00:19:05,312 --> 00:19:08,081 line:-2
In this case, let's reuse
our wood material from earlier.


347
00:19:08,148 --> 00:19:10,384 line:-2
Let's take a look at the scene
we've just created.


348
00:19:11,418 --> 00:19:13,787 line:-2
Finally,
let's define the gravity in our scene.


349
00:19:14,188 --> 00:19:16,723 line:-2
For fun,
let's put our wooden ball on the moon.


350
00:19:17,257 --> 00:19:18,392 line:-1
We can do this simply


351
00:19:18,458 --> 00:19:21,628 line:-2
by creating a prim in our scene
with a gravitational force type.


352
00:19:21,695 --> 00:19:25,199 line:-2
We recommend that there
only be one gravitational force per scene.


353
00:19:25,265 --> 00:19:29,269 line:-2
We can define the gravitational force
in stage units per second using a vector.


354
00:19:29,636 --> 00:19:31,905 line:-2
Together we have a scene
that looks like this.


355
00:19:35,342 --> 00:19:37,244 line:-1
Next, let's take a look at audio.


356
00:19:37,311 --> 00:19:39,646 line:-1
[whinnies]


357
00:19:39,713 --> 00:19:42,115 line:-2
Audio in Reality Composer is driven
by behaviors,


358
00:19:42,182 --> 00:19:44,017 line:-1
specifically the Play Audio action.


359
00:19:44,618 --> 00:19:47,020 line:-2
This allows audio to be played
at the start of a scene


360
00:19:47,087 --> 00:19:49,723 line:-2
or after a supported event,
such as the tap of an object.


361
00:19:50,190 --> 00:19:53,126 line:-2
The audio schema, which is distinct
from the behavior schema,


362
00:19:53,193 --> 00:19:56,063 line:-2
allows for the embedding of audio content
in a USD.


363
00:19:56,129 --> 00:19:57,598 line:-1
Audio specified in this way


364
00:19:57,664 --> 00:20:01,001 line:-2
will be played back
alongside the stage's animation track


365
00:20:01,068 --> 00:20:03,136 line:-2
and can be configured
with various playback options,


366
00:20:03,203 --> 00:20:05,906 line:-2
such as aural mode,
playback offset and volume.


367
00:20:06,373 --> 00:20:10,043 line:-2
When a USD containing the audio schema
is brought into Reality Composer,


368
00:20:10,110 --> 00:20:12,779 line:-2
its audio will play
alongside the USD's animation.


369
00:20:13,380 --> 00:20:16,383 line:-2
This can be invoked
with the "USDZ Animation" action,


370
00:20:16,450 --> 00:20:18,519 line:-1
which now supports audio controls as well.


371
00:20:20,187 --> 00:20:21,455 line:-1
If you're working with an editor


372
00:20:21,522 --> 00:20:23,957 line:-2
that doesn't yet support
the spatial audio schema,


373
00:20:24,024 --> 00:20:27,394 line:-2
you can use the USDZ Python tool,
available on the Developer website,


374
00:20:27,461 --> 00:20:28,829 line:-1
to add it to your USD.


375
00:20:29,663 --> 00:20:32,266 line:-2
Let's take a look at the audio schema
in the USD.


376
00:20:32,332 --> 00:20:35,302 line:-2
Here we have a model
that specifies audio to be played back


377
00:20:35,369 --> 00:20:37,237 line:-1
alongside the animation in a USD.


378
00:20:37,304 --> 00:20:40,807 line:-2
First, we're defining a brand-new
prim type named "SpatialAudio."


379
00:20:41,642 --> 00:20:45,112 line:-2
We specify the audio file itself
using the filePath property.


380
00:20:45,979 --> 00:20:47,781 line:-1
We can also specify the auralMode,


381
00:20:47,848 --> 00:20:49,950 line:-2
which is how the audio
will be played back.


382
00:20:50,017 --> 00:20:52,986 line:-2
Spatial audio will emit audio
from a specific transform,


383
00:20:53,053 --> 00:20:56,623 line:-2
and non-spatial audio will play the audio
without taking transform into account.


384
00:20:57,424 --> 00:21:01,061 line:-2
In addition, you can set the start time
and media offset of your content,


385
00:21:01,128 --> 00:21:03,363 line:-2
which will begin your audio clip
at a specific point


386
00:21:03,430 --> 00:21:05,332 line:-1
and after a specific time respectively.


387
00:21:06,567 --> 00:21:10,437 line:-2
Since the spatial audio prim inherits
from the xformable prim schema,


388
00:21:10,504 --> 00:21:11,872 line:-1
it can be placed in space.


389
00:21:11,939 --> 00:21:14,875 line:-2
By default, it will inherit
the transform of its parent.


390
00:21:14,942 --> 00:21:17,110 line:-2
However,
we can set our own local transform


391
00:21:17,177 --> 00:21:20,013 line:-2
to offset our audio
to play it from a specific location.


392
00:21:20,080 --> 00:21:23,217 line:-2
In this case, we want to play
our horse neigh from the horse's mouth.


393
00:21:25,118 --> 00:21:27,054 line:-1
Next, let's take a look at 3D text.


394
00:21:27,588 --> 00:21:31,859 line:-2
3D text in Reality Composer allows for the
addition of readable content in the scene.


395
00:21:32,292 --> 00:21:35,562 line:-2
Text can be configured
with a variety system fonts and weights


396
00:21:35,629 --> 00:21:38,699 line:-2
and additional options
such as alignment, depth,


397
00:21:38,765 --> 00:21:40,968 line:-1
bounding volume, wrap mode, and more.


398
00:21:41,802 --> 00:21:45,205 line:-2
The 3D text schema defines
all of these properties an IsA schema.


399
00:21:46,240 --> 00:21:48,575 line:-2
Let's take a look at the text schema
in a USD.


400
00:21:49,676 --> 00:21:53,480 line:-2
Here we're defining 3D text
with a content "#WWDC"...


401
00:21:54,982 --> 00:21:57,684 line:-2
with the font Helvetica
and a fallback font of Arial.


402
00:21:59,353 --> 00:22:03,090 line:-2
If we chose a different main font,
our system will use that if it has it.


403
00:22:04,992 --> 00:22:08,962 line:-2
We can also define additional properties,
such as the wrap mode and alignments.


404
00:22:09,630 --> 00:22:12,566 line:-2
Finally, let's take a look
at the new metadata options.


405
00:22:13,433 --> 00:22:16,870 line:-2
These options allow
for the specification of a playback mode,


406
00:22:16,937 --> 00:22:19,540 line:-2
whether the animation
and audio automatically plays


407
00:22:19,606 --> 00:22:21,041 line:-1
or is paused upon load,


408
00:22:21,608 --> 00:22:23,610 line:-1
and scene understanding metadata


409
00:22:23,677 --> 00:22:27,447 line:-2
that specifies if a scene's content
interacts with the real world,


410
00:22:27,514 --> 00:22:29,983 line:-2
as generated
by the new scene understanding feature


411
00:22:30,050 --> 00:22:34,121 line:-2
in RealityKit and ARKit
on the new iPad Pro with LiDAR scanner.


412
00:22:35,589 --> 00:22:39,526 line:-2
This allows objects to not only fall
on content in your scene


413
00:22:39,593 --> 00:22:42,596 line:-2
but also interact with real-world objects
in your environment.


414
00:22:45,132 --> 00:22:47,835 line:-2
Let's take a look
at the new playback metadata in a USD.


415
00:22:48,335 --> 00:22:50,304 line:-1
Here we have a USD with an animation


416
00:22:50,370 --> 00:22:53,574 line:-2
and are specifying that it should loop
and not start automatically.


417
00:22:54,007 --> 00:22:56,643 line:-2
This is a hint to a viewer
that it should display a play button,


418
00:22:56,710 --> 00:22:58,645 line:-1
so the user can initiate the animation.


419
00:22:59,079 --> 00:23:02,649 line:-2
Auto-play is also disabled for all content
coming out of Reality Composer,


420
00:23:02,716 --> 00:23:05,018 line:-2
so they can be driven explicitly
by behaviors.


421
00:23:07,054 --> 00:23:10,724 line:-2
Next, let's take a look at the new
scene understanding metadata in USD.


422
00:23:10,791 --> 00:23:14,261 line:-2
Here we have a USD with some objects that
have physics properties applied to them.


423
00:23:14,728 --> 00:23:17,898 line:-2
In our scene, we're specifying
that all content in the scene


424
00:23:17,965 --> 00:23:19,433 line:-1
will interact with the environment


425
00:23:19,499 --> 00:23:22,569 line:-2
as generated by the scene understanding
capability in RealityKit.


426
00:23:28,108 --> 00:23:31,378 line:-2
As next steps, we encourage you
to check out the schemas in depth


427
00:23:31,445 --> 00:23:34,147 line:-2
through new documentation available
on the Developer website,


428
00:23:34,214 --> 00:23:37,951 line:-2
send us feedback through Feedback
Assistant or the Developer Forums,


429
00:23:38,385 --> 00:23:40,821 line:-2
check out Reality Converter
in the related talks,


430
00:23:40,888 --> 00:23:43,590 line:-2
and finally,
begin adopting the new AR USD schemas


431
00:23:43,657 --> 00:23:45,692 line:-1
in your content and editor applications.


432
00:23:46,493 --> 00:23:51,265 line:-2
So that's an overview of the new workflows
in USD-based DCC ecosystem


433
00:23:51,331 --> 00:23:56,470 line:-2
enabled by USD export in Reality Composer
and the new AR USD schemas.


434
00:23:57,371 --> 00:24:00,274 line:-2
We've seen how we can start
with content in Reality Composer,


435
00:24:00,340 --> 00:24:03,443 line:-2
bring it to life with interactions,
physics and anchoring,


436
00:24:03,510 --> 00:24:06,113 line:-1
export it, modify it in a DCC


437
00:24:06,180 --> 00:24:08,949 line:-2
and re-import it
into Reality Composer or a DCC,


438
00:24:09,316 --> 00:24:11,285 line:-1
continuing the content creation story


439
00:24:11,351 --> 00:24:13,921 line:-2
and creating an ecosystem
of content creation tools


440
00:24:13,987 --> 00:24:16,423 line:-1
that all speak the common language of USD.


441
00:24:17,758 --> 00:24:21,495 line:-2
We've also taken a closer look
at the new AR USD schemas,


442
00:24:21,562 --> 00:24:24,064 line:-2
making USDZ export
in Reality Composer possible.


443
00:24:25,566 --> 00:24:27,434 line:-1
With this new functionality and schemas,


444
00:24:27,501 --> 00:24:30,838 line:-2
we're excited to see what amazing
creations you will continue to create.


445
00:24:30,904 --> 00:24:32,840 line:-2
Thank you,
and enjoy the rest of your WWDC.

