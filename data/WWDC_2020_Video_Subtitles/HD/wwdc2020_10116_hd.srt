1
00:00:03,703 --> 00:00:06,840 line:-1
Hello, and welcome to WWDC.


2
00:00:08,742 --> 00:00:11,111 line:0
Hello, I'm Alex Walczak,
and today I'll be showing you


3
00:00:11,178 --> 00:00:13,146 line:0
how adding Custom Rotors to VoiceOver


4
00:00:13,213 --> 00:00:15,983 line:0
can make your apps more accessible
for all users.


5
00:00:16,517 --> 00:00:20,053 line:-2
VoiceOver is Apple's screen reader that
lets you interact with any Apple device


6
00:00:20,120 --> 00:00:21,855 line:-1
even if you can't see the screen.


7
00:00:21,922 --> 00:00:25,392 line:-2
You use VoiceOver by touching the screen
to hear what's under your finger


8
00:00:25,459 --> 00:00:28,595 line:-2
and then perform simple gestures
to navigate the user interface.


9
00:00:29,796 --> 00:00:33,233 line:-2
People who aren't looking at the screen
rely on the rotor for many tasks,


10
00:00:33,300 --> 00:00:35,335 line:-1
a couple of which I will show you today.


11
00:00:36,069 --> 00:00:39,139 line:-2
By twisting two fingers on the screen,
as if rotating a dial,


12
00:00:39,206 --> 00:00:42,509 line:-2
the power of the rotor becomes enabled
at your fingertips.


13
00:00:43,544 --> 00:00:47,047 line:-2
A swipe down now moves you
to the next rotor item on the screen


14
00:00:47,114 --> 00:00:49,783 line:-2
and a swipe up moves you
to the previous item.


15
00:00:50,484 --> 00:00:54,054 line:-2
By adding custom rotors to your app
that respond to simple flick gestures,


16
00:00:54,121 --> 00:00:56,990 line:-2
you can transform
how a user experiences your app.


17
00:00:57,057 --> 00:01:00,360 line:-2
Navigating complex interfaces
becomes so much easier


18
00:01:00,427 --> 00:01:04,665 line:-2
and finding related elements in your app
is as simple as a flick up or down.


19
00:01:05,465 --> 00:01:08,001 line:-2
So to show you that,
we'll look at a couple examples,


20
00:01:08,068 --> 00:01:12,239 line:-2
beginning with how custom rotors make
navigating a complex interface easier.


21
00:01:12,940 --> 00:01:16,610 line:-2
But first, I'd like to show you
the VoiceOver experience in my app


22
00:01:16,677 --> 00:01:18,312 line:-1
without any custom rotors.


23
00:01:19,079 --> 00:01:21,348 line:-2
I'm developing an app that shows
your location on the map


24
00:01:21,415 --> 00:01:23,450 line:-1
and Apple Stores and parks around you.


25
00:01:23,517 --> 00:01:27,688 line:-2
I'll turn on VoiceOver so we can see
how it traverses the views of the app,


26
00:01:27,754 --> 00:01:29,022 line:-1
from top to bottom,


27
00:01:29,089 --> 00:01:31,725 line:-2
following the layout direction
of the user interface.


28
00:01:31,792 --> 00:01:34,127 line:-2
[VoiceOver] <i>Apple, Bay Street.</i>
<i>San Francisco Bay.</i>


29
00:01:34,194 --> 00:01:36,330 line:-1
<i>Bay Bridge. Alcatraz Island.</i>


30
00:01:38,999 --> 00:01:42,503 line:-2
This grid represents how people
might experience my app through VoiceOver


31
00:01:42,569 --> 00:01:44,071 line:-1
without any custom rotors.


32
00:01:44,705 --> 00:01:46,139 line:-1
Just as in the demo,


33
00:01:46,206 --> 00:01:51,178 line:-2
let's see how VoiceOver cursor moves
not only between Apple Stores and parks,


34
00:01:51,245 --> 00:01:54,348 line:-2
but also between bridges
and other points of interest.


35
00:01:55,549 --> 00:01:57,184 line:-1
Notice how someone using VoiceOver


36
00:01:57,251 --> 00:02:00,954 line:-2
has to move sequentially through
the items from all categories


37
00:02:01,021 --> 00:02:02,689 line:-1
while someone looking at the screen


38
00:02:02,756 --> 00:02:06,827 line:-2
will use an icon and its color
to focus on items from a single category.


39
00:02:07,528 --> 00:02:10,264 line:-2
How could we enable VoiceOver users
to experience my app


40
00:02:10,330 --> 00:02:11,932 line:-1
the same as anybody else?


41
00:02:12,432 --> 00:02:16,136 line:-2
What we could start by doing is
figuring out which items in the interface


42
00:02:16,203 --> 00:02:18,105 line:-1
draw our attention visually.


43
00:02:18,172 --> 00:02:22,075 line:-2
So in the case of my app, that would be
the markers for Apple Stores and parks.


44
00:02:24,278 --> 00:02:27,381 line:-2
Next, we can group these items
by category,


45
00:02:27,447 --> 00:02:31,485 line:-2
and then create custom rotors to explore
items just within their categories.


46
00:02:32,519 --> 00:02:33,554 line:-1
So let's do that.


47
00:02:34,588 --> 00:02:38,992 line:-2
We'll implement a rotor for Apple Stores
and another rotor for parks.


48
00:02:40,127 --> 00:02:44,231 line:-2
When we do that, we can sort the items
of each rotor by distance from the user.


49
00:02:45,732 --> 00:02:49,236 line:-2
and include the distance in the
accessibility information of each item.


50
00:02:50,170 --> 00:02:53,207 line:-2
This way, somebody using the rotor
to interact with the UI


51
00:02:53,273 --> 00:02:55,576 line:-2
can quickly scan
the closest Apple Stores...


52
00:02:59,680 --> 00:03:01,682 line:-1
and scan the closest parks...


53
00:03:05,686 --> 00:03:07,988 line:-1
just as how somebody looking at the screen


54
00:03:08,055 --> 00:03:11,024 line:-2
might focus on the locations
closest to their position.


55
00:03:12,559 --> 00:03:15,796 line:-2
Let's see how these two rotors operate
once they're implemented.


56
00:03:16,763 --> 00:03:19,199 line:-2
First, we look at
the finished Apple Stores rotor.


57
00:03:19,733 --> 00:03:20,968 line:-1
[VoiceOver] <i>Apple Stores.</i>


58
00:03:21,902 --> 00:03:24,738 line:-1
<i>Apple, Chestnut Street, 0.9 miles.</i>


59
00:03:24,805 --> 00:03:27,241 line:-1
<i>Apple, Union Square, 1.8 miles.</i>


60
00:03:27,307 --> 00:03:29,843 line:-1
<i>Apple, Stonestown, 4.6 miles.</i>


61
00:03:30,310 --> 00:03:32,412 line:-1
[Alex] And now, we see the Parks rotor.


62
00:03:32,479 --> 00:03:33,480 line:-1
[VoiceOver] <i>Parks.</i>


63
00:03:35,115 --> 00:03:37,551 line:-1
<i>Alamo Square, 0.8 miles.</i>


64
00:03:37,618 --> 00:03:40,220 line:-1
<i>Corona Heights Park, 1.5 miles.</i>


65
00:03:40,287 --> 00:03:42,422 line:-1
<i>Hippie Hill, 1.5 miles.</i>


66
00:03:43,156 --> 00:03:44,224 line:-1
In both examples,


67
00:03:44,291 --> 00:03:47,928 line:-2
as the user moves through
the sorted locations in each custom rotor,


68
00:03:47,995 --> 00:03:50,364 line:-2
they can quickly determine
which locations,


69
00:03:50,430 --> 00:03:53,166 line:-2
either Apple Stores or parks,
they are closest to.


70
00:03:54,034 --> 00:03:56,036 line:-2
This shows that
custom rotors make it possible


71
00:03:56,103 --> 00:03:59,173 line:-2
to deliver a similar experience
for all users


72
00:03:59,239 --> 00:04:02,743 line:-2
especially in navigating
complex interfaces like this map.


73
00:04:03,710 --> 00:04:05,846 line:-1
How can we add these rotors to the app?


74
00:04:05,913 --> 00:04:07,915 line:-2
Well, when VoiceOver lands
on the 'map view',


75
00:04:07,981 --> 00:04:09,149 line:-1
it looks for any custom rotors


76
00:04:09,216 --> 00:04:12,085 line:-2
in the view's
accessibilityCustomRotors property.


77
00:04:13,620 --> 00:04:17,423 line:-2
My app needs two rotors,
one for Apple Stores and one for parks,


78
00:04:17,491 --> 00:04:20,427 line:-2
so we'll be setting this property equal to
two custom rotors.


79
00:04:21,827 --> 00:04:25,199 line:-2
And since each rotor filters
the same map annotations,


80
00:04:25,265 --> 00:04:28,635 line:-2
we only need to implement one method
to make both rotors.


81
00:04:30,304 --> 00:04:31,605 line:-1
Let's start building this method


82
00:04:31,672 --> 00:04:34,541 line:-2
which returns
a new UIAccessibilityCustomRotor


83
00:04:34,608 --> 00:04:36,276 line:-1
for one type of point of interest.


84
00:04:37,211 --> 00:04:40,814 line:-2
A custom rotor is implemented
with minimal extra work by the developer,


85
00:04:40,881 --> 00:04:42,216 line:-1
thanks to a block syntax.


86
00:04:42,883 --> 00:04:47,054 line:-2
After initializing a UIAccessibilityCustomRotor with a localized name,


87
00:04:47,120 --> 00:04:49,389 line:-2
we'll perform some basic logic
in the closure,


88
00:04:49,456 --> 00:04:52,559 line:-2
and return a UIAccessibilityCustomRotor
Item Result


89
00:04:52,626 --> 00:04:55,863 line:-2
representing the next point of interest
VoiceOver will land on.


90
00:04:57,164 --> 00:05:00,300 line:-2
You can extract the current rotor item
from the block argument


91
00:05:00,367 --> 00:05:03,737 line:-2
and prepare a list of possible items
the user can move to.


92
00:05:04,838 --> 00:05:06,707 line:-1
The property 'searchDirection'


93
00:05:06,773 --> 00:05:09,643 line:-2
tells you whether the user flipped up
to go to the previous item


94
00:05:09,710 --> 00:05:11,278 line:-1
or down to go to the next item.


95
00:05:12,179 --> 00:05:15,182 line:-2
This information can be used to decrement
or increment the index


96
00:05:15,249 --> 00:05:16,884 line:-1
in the list of possible items.


97
00:05:18,452 --> 00:05:21,288 line:0
Return nil to tell the user
they're at the first or last item


98
00:05:21,355 --> 00:05:24,191 line:0
and VoiceOver will remain focused
on that point of interest.


99
00:05:24,691 --> 00:05:29,229 line:0
Otherwise, finish by returning a new
UIAccessibilityCustomRotorItemResult


100
00:05:29,296 --> 00:05:32,232 line:0
with the previous or next item
as the target element.


101
00:05:32,799 --> 00:05:35,169 line:-2
I've described a number of steps here,
but as a developer,


102
00:05:35,235 --> 00:05:36,503 line:-1
remember that all you need to do


103
00:05:36,570 --> 00:05:39,239 line:-2
to take advantage of
the custom rotor API in your app


104
00:05:39,306 --> 00:05:42,643 line:-2
is implement this closure
and add your new custom rotor


105
00:05:42,709 --> 00:05:45,746 line:-2
to your view's list of
accessibility Custom Rotors.


106
00:05:45,812 --> 00:05:47,881 line:-1
Custom rotors can have a huge impact


107
00:05:47,948 --> 00:05:50,951 line:-2
on how somebody will interact with
groups of elements in your app.


108
00:05:51,018 --> 00:05:54,688 line:-2
But they aren't the only way to improve
the accessibility of complex interfaces.


109
00:05:54,755 --> 00:05:55,822 line:0
To learn another way,


110
00:05:55,889 --> 00:05:59,259 line:0
check out this talk on how
custom actions can enhance interactions


111
00:05:59,326 --> 00:06:01,962 line:0
with individual elements in your app.


112
00:06:02,029 --> 00:06:05,299 line:-2
We've already seen that custom rotors
can be used to find related elements


113
00:06:05,365 --> 00:06:07,034 line:-1
like stores and parks on a map.


114
00:06:07,534 --> 00:06:12,206 line:-2
Now let's learn how a custom rotor can be
used on a different kind of content: text.


115
00:06:13,707 --> 00:06:16,410 line:-2
My app pulls up a brochure
when you tap on a location,


116
00:06:16,476 --> 00:06:19,379 line:-2
and since I'm planning a picnic
at Golden Gate Park,


117
00:06:19,446 --> 00:06:20,881 line:-1
I've pulled up its brochure.


118
00:06:21,882 --> 00:06:23,450 line:-1
Wow, so many things to do.


119
00:06:23,517 --> 00:06:27,020 line:-2
Let's use the built-in Lines rotor
which automatically appears for text,


120
00:06:27,087 --> 00:06:29,389 line:-1
to navigate this brochure line by line.


121
00:06:30,457 --> 00:06:31,592 line:-1
[VoiceOver] <i>Lines.</i>


122
00:06:31,658 --> 00:06:33,627 line:-1
<i>Golden Gate Park. Plan your visit.</i>


123
00:06:33,694 --> 00:06:36,630 line:-2
<i>Dutch Windmill. Visit in March</i>
<i>to see the tulips in full bloom.</i>


124
00:06:36,697 --> 00:06:39,299 line:-2
<i>This towering landmark</i>
<i>stands on the park's eastern edge.</i>


125
00:06:39,366 --> 00:06:41,902 line:-2
<i>East Meadow.</i>
<i>Picnic area closed for maintenance.</i>


126
00:06:41,969 --> 00:06:44,605 line:-2
<i>A great place for families with pets</i>
<i>to have a picnic.</i>


127
00:06:45,072 --> 00:06:47,608 line:-2
Great. We were able to hear
some of the content


128
00:06:47,674 --> 00:06:50,844 line:-2
but look how long it took us
to get to that first alert.


129
00:06:51,612 --> 00:06:54,314 line:-2
We had to hear all the preceding content
just to find out


130
00:06:54,381 --> 00:06:58,418 line:-2
that I should definitely not be choosing
East Meadow as my picnic spot.


131
00:06:58,485 --> 00:07:01,889 line:-2
Not to mention, there are
a couple more alerts we haven't gotten to,


132
00:07:01,955 --> 00:07:04,424 line:-2
so we won't know
if we've listened to all the alerts


133
00:07:04,491 --> 00:07:07,828 line:-2
if we don't carefully listen
to every line in this brochure, right?


134
00:07:08,495 --> 00:07:09,763 line:-1
Wait, actually,


135
00:07:09,830 --> 00:07:12,933 line:-2
we can implement a custom rotor
to take us through just the alerts


136
00:07:13,000 --> 00:07:15,035 line:-1
so we can hear this critical information


137
00:07:15,102 --> 00:07:19,106 line:-2
as fast as anyone looking at the screen
will notice the alert icons.


138
00:07:19,406 --> 00:07:22,409 line:-2
So let's see
what a rotor for 'alerts' will look like.


139
00:07:22,476 --> 00:07:23,477 line:-1
[VoiceOver] <i>Alerts.</i>


140
00:07:24,411 --> 00:07:27,047 line:-2
<i>East Meadow.</i>
<i>Picnic area closed for maintenance.</i>


141
00:07:27,114 --> 00:07:29,483 line:-2
<i>Oak Woodlands Trail.</i>
<i>Muddy trail conditions.</i>


142
00:07:29,550 --> 00:07:32,119 line:-2
<i>Ocean Beach.</i>
<i>Expect dense fog and high winds.</i>


143
00:07:32,753 --> 00:07:36,623 line:-2
Great. As expected, the 'alerts' rotor
only moves among the alerts


144
00:07:36,690 --> 00:07:39,927 line:-2
so we can plan our trip to the park
so much more efficiently.


145
00:07:41,028 --> 00:07:44,031 line:-2
Our text view only has one custom rotor,
for alerts.


146
00:07:44,565 --> 00:07:46,166 line:-1
So in our implementation,


147
00:07:46,233 --> 00:07:49,269 line:-2
this time the textView's
accessibilityCustomRotors property


148
00:07:49,336 --> 00:07:51,605 line:-1
will just contain a single rotor.


149
00:07:51,672 --> 00:07:55,776 line:-2
As before, we'll implement a method
that also returns a new rotor,


150
00:07:55,843 --> 00:07:59,580 line:-2
but instead of passing in a location type,
such as a store or park,


151
00:07:59,646 --> 00:08:03,016 line:-2
we'll pass in the type of text attribute
we wish to put in the rotor.


152
00:08:04,051 --> 00:08:06,420 line:-2
In this case,
that's the 'alerts' attribute.


153
00:08:07,321 --> 00:08:10,991 line:-2
As we expect, this method
has a similar syntax to the maps example.


154
00:08:11,058 --> 00:08:14,995 line:-2
So again, we initialize a UIAccessibilityCustomRotor with a localized name


155
00:08:15,629 --> 00:08:19,099 line:-2
and implement the closure that returns
the item VoiceOver will move to.


156
00:08:20,434 --> 00:08:23,337 line:-2
We can find all the alerts
in the textView's attributed Text


157
00:08:23,403 --> 00:08:26,340 line:-2
because they are all marked
with a custom 'alerts' attribute.


158
00:08:27,040 --> 00:08:29,676 line:-2
Given the range of the current rotor item
in our text,


159
00:08:29,743 --> 00:08:33,113 line:-2
our goal then is to find the range
of the previous or next alert


160
00:08:33,179 --> 00:08:35,682 line:-2
depending on the direction
the user wants to go in.


161
00:08:36,049 --> 00:08:37,717 line:0
And here, we are doing just that:


162
00:08:38,085 --> 00:08:41,989 line:0
determining the range of the text we'll be
searching for our custom alert attribute


163
00:08:42,054 --> 00:08:45,092 line:0
and the direction that we will search it
based on the user's gesture.


164
00:08:46,093 --> 00:08:48,695 line:0
When a match for an alert is found,
we know we can stop,


165
00:08:48,762 --> 00:08:53,000 line:0
at which point we return a new
UIAccessibilityCustomRotorItemResult,


166
00:08:53,066 --> 00:08:55,369 line:0
passing in the new targetRange
of our attribute.


167
00:08:56,270 --> 00:08:58,172 line:0
Otherwise, we pass in a nil targetRange


168
00:08:58,238 --> 00:09:01,308 line:0
to indicate that we are
either at the first or last rotor item.


169
00:09:01,375 --> 00:09:05,612 line:-2
But we must be careful here to ensure
that targetRange is a UITextRange,


170
00:09:05,679 --> 00:09:08,849 line:-2
and that targetElement conforms
to the UITextInput protocol.


171
00:09:09,550 --> 00:09:13,120 line:-2
This is quite a bit of information
to absorb but when we take a step back,


172
00:09:13,187 --> 00:09:15,856 line:-2
we can see that
implementing a custom rotor in our app


173
00:09:15,923 --> 00:09:20,294 line:-2
comes down to returning the previous
or next CustomRotorItemResult


174
00:09:20,360 --> 00:09:22,529 line:-2
from the block used
to initialize the rotor.


175
00:09:24,665 --> 00:09:28,869 line:-2
Accessibility custom rotors allow us
to filter information from your app


176
00:09:28,936 --> 00:09:31,738 line:-1
and focus only on particular categories.


177
00:09:31,805 --> 00:09:36,109 line:-2
Earlier we saw how custom rotors improve
a complex map-based app,


178
00:09:36,176 --> 00:09:38,979 line:-2
and now we have just seen
how custom rotors can enhance


179
00:09:39,046 --> 00:09:42,516 line:-2
how a user interacts
with text-based content as well.


180
00:09:43,116 --> 00:09:47,054 line:0
To go deeper on learning how to further
improve the accessibility of text content,


181
00:09:47,120 --> 00:09:50,657 line:0
view this session on
creating an accessible reading experience.


182
00:09:51,959 --> 00:09:54,394 line:0
And now that you've learned
quite a bit about VoiceOver,


183
00:09:54,461 --> 00:09:57,197 line:0
including two ways
you can make custom rotors,


184
00:09:57,264 --> 00:10:00,834 line:0
I encourage you to use your knowledge
and audit your apps for accessibility.


185
00:10:00,901 --> 00:10:02,736 line:0
And for more details on that,


186
00:10:02,803 --> 00:10:05,806 line:0
have a look at the past session
on app testing with VoiceOver.


187
00:10:06,473 --> 00:10:07,941 line:-1
To conclude,


188
00:10:08,008 --> 00:10:12,145 line:-2
here's what I hope you will do to improve
VoiceOver efficiency in your app.


189
00:10:12,713 --> 00:10:17,017 line:-2
First, identify the most
visually complex areas of your interface.


190
00:10:17,618 --> 00:10:21,355 line:-2
Turn on VoiceOver and determine
if you could reach that content


191
00:10:21,421 --> 00:10:24,024 line:-1
as easily as when VoiceOver is off.


192
00:10:24,091 --> 00:10:26,693 line:-1
If not, this is as good of an experience


193
00:10:26,760 --> 00:10:29,229 line:-2
as somebody
who is not looking at the screen will get.


194
00:10:29,830 --> 00:10:32,499 line:-2
So consider adding custom rotors
where they can help.


195
00:10:33,600 --> 00:10:36,904 line:-2
After all, you put in a lot of time
designing your app for people,


196
00:10:36,970 --> 00:10:39,606 line:-2
so make sure
that it works well for everyone.


197
00:10:39,673 --> 00:10:43,177 line:-1
Thanks, and have a great WWDC 2020.

