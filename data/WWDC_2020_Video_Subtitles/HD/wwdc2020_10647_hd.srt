1
00:00:03,836 --> 00:00:06,473 line:-1
Hello and welcome to WWDC.


2
00:00:08,208 --> 00:00:09,243 line:0
Hello, everyone!


3
00:00:09,309 --> 00:00:13,313 line:0
Thank you for watching our presentation
on "Becoming a Simulator Expert."


4
00:00:13,380 --> 00:00:17,851 line:0
I'm Ryan Bowring, an engineer on the
Devices and Simulators team here at Apple.


5
00:00:18,285 --> 00:00:21,822 line:-2
Today, we are going to talk about
how the Simulator can help you


6
00:00:21,889 --> 00:00:25,592 line:-2
turbocharge your developer experience
and create great apps.


7
00:00:25,993 --> 00:00:29,062 line:-2
So let's start with a brief overview
before we dive in.


8
00:00:29,129 --> 00:00:31,732 line:-2
Just what is Simulator,
and what can it do?


9
00:00:32,533 --> 00:00:34,835 line:-1
Well, Simulator lets you test your apps


10
00:00:34,902 --> 00:00:40,741 line:-2
for iOS, iPadOS, tvOS, and watchOS
on your Mac.


11
00:00:40,807 --> 00:00:42,976 line:-1
No physical device required.


12
00:00:43,043 --> 00:00:45,179 line:-1
You can prototype your apps faster


13
00:00:45,245 --> 00:00:48,482 line:-2
and test them on multiple kinds
of simulated devices.


14
00:00:48,549 --> 00:00:51,585 line:-2
And it exposes
lots of device functionality.


15
00:00:51,652 --> 00:00:56,256 line:-2
Now, Simulator is built right into Xcode,
and it starts automatically


16
00:00:56,323 --> 00:00:59,860 line:-2
when you run or test your app
without a physical device.


17
00:00:59,927 --> 00:01:03,297 line:-2
So many of you have probably seen
the Simulator before.


18
00:01:03,363 --> 00:01:06,366 line:-2
And you can run the Simulator
as a stand-alone tool


19
00:01:06,433 --> 00:01:10,370 line:-2
and make use of its powerful features
to help you out on your developer journey.


20
00:01:11,238 --> 00:01:13,140 line:-1
Here we have two Simulators booted:


21
00:01:13,540 --> 00:01:19,112 line:-2
an iPhone 11 and an 11-inch iPad Pro,
both running iOS 14.


22
00:01:19,913 --> 00:01:22,749 line:-2
In the title,
you can see both the device name


23
00:01:22,816 --> 00:01:25,452 line:-2
and the version of the OS
that it's running.


24
00:01:25,519 --> 00:01:27,487 line:-1
And the toolbar buttons let you access


25
00:01:27,554 --> 00:01:30,157 line:-2
some of the most widely used features
of our platforms.


26
00:01:31,058 --> 00:01:32,593 line:-1
Let's start with screenshots.


27
00:01:32,659 --> 00:01:35,963 line:-2
In Xcode 12, we've significantly
improved the experience


28
00:01:36,029 --> 00:01:38,298 line:-1
of taking screenshots in Simulator.


29
00:01:38,365 --> 00:01:40,434 line:-2
Click on the screenshot button
in the toolbar


30
00:01:40,501 --> 00:01:43,504 line:-2
and an image of the device
will fly out to the side here.


31
00:01:43,570 --> 00:01:45,906 line:0
By Control-clicking
on the screenshot thumbnail,


32
00:01:45,973 --> 00:01:48,909 line:0
you can save it
to one of several different locations,


33
00:01:48,976 --> 00:01:52,713 line:0
copy it to the clipboard,
or open it in various different apps.


34
00:01:54,081 --> 00:01:57,017 line:-2
You can drag it onto other apps
to insert it.


35
00:01:57,084 --> 00:01:59,520 line:-2
And by clicking
on the screenshot button repeatedly,


36
00:01:59,586 --> 00:02:02,689 line:-2
you can take multiple screenshots,
one after another.


37
00:02:03,056 --> 00:02:06,994 line:-2
It's a great way to take screenshots
for your apps' App Store page.


38
00:02:07,060 --> 00:02:08,961 line:-1
If you don't interact with the screenshot,


39
00:02:09,029 --> 00:02:11,598 line:-2
then it will be saved
to the desktop by default.


40
00:02:12,566 --> 00:02:16,837 line:-2
You can also drag files onto the Simulator
to cause certain events to happen,


41
00:02:16,904 --> 00:02:19,640 line:-2
such as adding an image
to the photo library,


42
00:02:19,706 --> 00:02:22,776 line:-2
triggering a push notification,
or adding a certificate.


43
00:02:23,243 --> 00:02:27,481 line:-2
For instance, we can drag an APNs file
onto the Simulator window here


44
00:02:27,548 --> 00:02:30,117 line:-1
to cause a push notification to appear.


45
00:02:30,184 --> 00:02:34,021 line:-2
We'll talk more about support
for push notifications in a few minutes.


46
00:02:34,488 --> 00:02:39,393 line:-2
Finally, in Xcode 12, it's now possible
to bring Simulator into full-screen mode,


47
00:02:39,459 --> 00:02:42,262 line:-2
both on its own,
and tiled with another app.


48
00:02:42,329 --> 00:02:46,433 line:-2
For example, you can have the Simulator
and Xcode side by side


49
00:02:46,500 --> 00:02:48,035 line:-1
in full-screen mode.


50
00:02:49,102 --> 00:02:52,239 line:-2
Let's take a moment to talk about
how Simulator can allow you


51
00:02:52,306 --> 00:02:55,609 line:-2
to test your apps' support
for certain platform features.


52
00:02:55,676 --> 00:02:59,012 line:-2
iPadOS supports
mouse pointer interactions,


53
00:02:59,079 --> 00:03:02,816 line:-2
meaning that if a user connects a mouse
or a trackpad to their iPad,


54
00:03:02,883 --> 00:03:05,552 line:-2
they can get full pointer
and gesture support.


55
00:03:06,186 --> 00:03:09,489 line:-2
Watch how we can use the Simulator
to test this support.


56
00:03:09,556 --> 00:03:11,792 line:-2
With a click of the pointer button
in the toolbar,


57
00:03:11,859 --> 00:03:15,229 line:-2
you can enter into pointer capture mode
on an iPad Simulator


58
00:03:15,295 --> 00:03:18,165 line:-1
running a supported version of iPadOS.


59
00:03:18,232 --> 00:03:20,834 line:-2
Notice that once pointer capture mode
is enabled,


60
00:03:20,901 --> 00:03:26,173 line:-2
your Mac's mouse or trackpad now controls
the pointer in the iPad Simulator,


61
00:03:26,240 --> 00:03:31,011 line:-2
so all mouse and trackpad gestures
are processed by iPadOS.


62
00:03:31,078 --> 00:03:34,848 line:-2
It behaves just like as if it were
connected to a physical iPad.


63
00:03:35,382 --> 00:03:38,385 line:-1
For example, you can open up the Maps app.


64
00:03:38,452 --> 00:03:42,322 line:-2
We can do a pinch gesture
to zoom in and zoom out.


65
00:03:42,389 --> 00:03:44,825 line:-1
All keyboard shortcuts are also captured,


66
00:03:44,892 --> 00:03:46,760 line:-2
so if we want to go back
to the Home Screen,


67
00:03:46,827 --> 00:03:48,762 line:-1
we can press Command-H.


68
00:03:48,829 --> 00:03:52,065 line:-1
To switch apps, we can press Command-Tab


69
00:03:52,132 --> 00:03:55,135 line:-2
or do a three-finger swipe up
on the trackpad.


70
00:03:57,571 --> 00:04:01,341 line:-2
And, of course, we can do
a two-finger drag to scroll.


71
00:04:01,408 --> 00:04:04,311 line:-2
To stop capturing,
and return control to the host Mac,


72
00:04:04,378 --> 00:04:05,579 line:-1
simply press Escape.


73
00:04:05,646 --> 00:04:09,683 line:-2
It's also possible to capture
just the keyboard, but not the pointer.


74
00:04:09,750 --> 00:04:12,386 line:-2
This makes all keyboard input
stay with the Simulator,


75
00:04:12,452 --> 00:04:15,756 line:-2
but leaves your mouse free
to use with the Mac.


76
00:04:15,822 --> 00:04:17,591 line:-1
Also, in Xcode 12,


77
00:04:17,658 --> 00:04:21,595 line:-2
Simulator now keeps track of
which Simulators are currently capturing.


78
00:04:21,661 --> 00:04:25,899 line:-2
When a Simulator window loses focus,
such as if another window opens up,


79
00:04:25,966 --> 00:04:28,368 line:-1
then capturing is automatically stopped.


80
00:04:28,435 --> 00:04:31,839 line:-2
But when you switch back to the Simulator,
capturing starts again.


81
00:04:31,905 --> 00:04:34,341 line:-2
This is really handy
when you are debugging in Xcode.


82
00:04:34,875 --> 00:04:37,945 line:-2
Here, I've set a breakpoint
in our demo app's source code.


83
00:04:38,011 --> 00:04:41,148 line:-2
It will trigger when we load
one of our drinks from the menu.


84
00:04:41,215 --> 00:04:42,416 line:-1
When the breakpoint triggers,


85
00:04:42,482 --> 00:04:44,785 line:-2
your mouse pointer
will automatically be released,


86
00:04:44,852 --> 00:04:48,322 line:-2
allowing you to go into Xcode
and inspect things.


87
00:04:48,388 --> 00:04:50,557 line:-1
See? Our pointer is now free.


88
00:04:51,258 --> 00:04:55,295 line:-2
Once you switch back to the Simulator,
capturing starts right back up again,


89
00:04:55,362 --> 00:04:57,631 line:-1
right where you left off.


90
00:04:57,698 --> 00:05:01,101 line:-2
And, of course,
you can use Escape to stop capturing.


91
00:05:02,102 --> 00:05:06,006 line:-2
Now, you may be wondering if you can
change the shortcut to stop capturing.


92
00:05:06,073 --> 00:05:08,342 line:-2
For instance, maybe you want
to make the Escape key


93
00:05:08,408 --> 00:05:10,010 line:-1
do something in your app.


94
00:05:10,077 --> 00:05:12,546 line:-2
Well, the answer is yes,
it is customizable.


95
00:05:12,613 --> 00:05:14,414 line:-1
Simulator has a preferences window


96
00:05:14,481 --> 00:05:17,751 line:-2
which allows you to configure
a number of important settings.


97
00:05:18,852 --> 00:05:23,023 line:-2
At the top here, we can see the option
for the shortcut to stop capturing.


98
00:05:23,090 --> 00:05:26,927 line:-2
There are three supported options:
Escape, which is the default,


99
00:05:26,994 --> 00:05:29,463 line:-2
pressing both the left
and the right Command keys,


100
00:05:29,530 --> 00:05:31,598 line:-1
or pressing Control-Option.


101
00:05:32,399 --> 00:05:34,201 line:-1
The preferences window also allows you


102
00:05:34,268 --> 00:05:37,604 line:-2
to customize the lifetime
of booted Simulators.


103
00:05:37,671 --> 00:05:40,007 line:-2
By default,
when the Simulator is launched,


104
00:05:40,073 --> 00:05:42,743 line:-1
it boots the most recently used Simulator.


105
00:05:42,809 --> 00:05:45,679 line:-2
And the running Simulators get shut down
when you close their window


106
00:05:45,746 --> 00:05:47,681 line:-1
or quit the Simulator application.


107
00:05:47,748 --> 00:05:51,218 line:-2
Personally, I end up opening
and closing the app frequently,


108
00:05:51,285 --> 00:05:53,987 line:-2
so I've configured my preferences
to leave Simulators running


109
00:05:54,054 --> 00:05:55,289 line:-1
after I quit the app.


110
00:05:55,856 --> 00:05:59,326 line:-2
When I want to shut down a Simulator,
I simply close its window.


111
00:05:59,393 --> 00:06:02,029 line:-2
To get this result,
I set the preference items accordingly.


112
00:06:02,963 --> 00:06:05,432 line:-1
Next we have the visual indicator options.


113
00:06:06,567 --> 00:06:08,635 line:-1
Simulator can draw helpful widgets for you


114
00:06:08,702 --> 00:06:11,405 line:-2
to show the position
of the simulated fingers


115
00:06:11,471 --> 00:06:12,973 line:-1
for drag and pinch gestures.


116
00:06:14,641 --> 00:06:16,944 line:-2
You can also choose whether or not
you want device masks


117
00:06:17,010 --> 00:06:18,745 line:-1
to appear in screenshots.


118
00:06:18,812 --> 00:06:22,816 line:-2
If this is enabled, then on
certain devices such as the iPhone 11,


119
00:06:22,883 --> 00:06:26,086 line:-2
the area with the sensor housing
will be rendered as transparent.


120
00:06:26,587 --> 00:06:29,656 line:-2
In addition to preferences
which apply to all Simulators,


121
00:06:29,723 --> 00:06:33,460 line:-2
the menu bar contains a variety of options
for each Simulator.


122
00:06:33,527 --> 00:06:36,663 line:-2
The Features menu contains
a number of useful options


123
00:06:36,730 --> 00:06:39,199 line:-2
to toggle features
supported by our platforms.


124
00:06:39,266 --> 00:06:42,035 line:-1
One such option is Toggle Appearance.


125
00:06:42,102 --> 00:06:46,406 line:-2
This allows you to toggle between
Light Mode and Dark Mode in iOS.


126
00:06:46,473 --> 00:06:48,342 line:-1
I personally prefer Dark Mode,


127
00:06:48,408 --> 00:06:51,778 line:-2
so let's set our Simulator to use it
by clicking on the menu item.


128
00:06:51,845 --> 00:06:54,448 line:-2
You can also use the keyboard shortcut,
of course.


129
00:06:55,048 --> 00:06:59,052 line:-2
Under the File menu, you can see
the option to start Simulators.


130
00:06:59,720 --> 00:07:02,956 line:-2
To keep the clutter down
in Xcode's run destination menu,


131
00:07:03,023 --> 00:07:06,193 line:-2
Simulator only creates
a few devices by default,


132
00:07:06,260 --> 00:07:07,794 line:-1
but you can create more.


133
00:07:07,861 --> 00:07:10,430 line:-1
One feature we are introducing in Xcode 12


134
00:07:10,497 --> 00:07:14,401 line:-2
is the ability to create a new Simulator
right from within the app.


135
00:07:14,468 --> 00:07:17,671 line:-2
So you won't need to go
into Xcode as much anymore.


136
00:07:17,738 --> 00:07:19,907 line:-1
You can bring up the New Simulator window


137
00:07:19,973 --> 00:07:24,778 line:-2
by clicking on the File menu
and then on New Simulator here.


138
00:07:24,845 --> 00:07:27,981 line:-2
And as you can see, we can enter a name
for the new Simulator,


139
00:07:28,048 --> 00:07:30,817 line:-2
as well as choose the device type
and the runtime.


140
00:07:30,884 --> 00:07:32,152 line:-1
Let's create one now.


141
00:07:32,219 --> 00:07:35,556 line:-2
I'll just give it a name
and click on Create.


142
00:07:37,157 --> 00:07:39,626 line:-1
And now you can see it listed


143
00:07:39,693 --> 00:07:42,362 line:-2
under our list of Simulators
right in the menu.


144
00:07:44,331 --> 00:07:48,035 line:-2
Once a Simulator is running,
you may want to adjust the window size.


145
00:07:48,101 --> 00:07:51,805 line:-2
You can click and drag to resize
the corners of the Simulator.


146
00:07:51,872 --> 00:07:56,076 line:-2
The Window menu also contains
several window scaling options


147
00:07:56,143 --> 00:07:58,045 line:-1
that can adjust the window size.


148
00:07:58,111 --> 00:08:00,681 line:-2
Let's go through these options
in more detail.


149
00:08:01,281 --> 00:08:03,817 line:-1
First, the option for physical size.


150
00:08:03,884 --> 00:08:06,186 line:-1
This makes the Simulator window on-screen


151
00:08:06,253 --> 00:08:09,756 line:-2
exactly the same size
as a physical device would be.


152
00:08:09,823 --> 00:08:13,327 line:-2
This is done by taking the pixels per inch
of your Mac's display,


153
00:08:13,393 --> 00:08:16,063 line:-2
the pixels per inch
of the device you are simulating,


154
00:08:16,129 --> 00:08:18,799 line:-2
and then calculating
how big to make the window


155
00:08:18,866 --> 00:08:21,869 line:-1
so the content matches the size.


156
00:08:21,935 --> 00:08:24,538 line:-2
This can be used to see
exactly how your app will appear


157
00:08:24,605 --> 00:08:26,673 line:-1
across multiple simulated devices


158
00:08:26,740 --> 00:08:29,510 line:-2
with different screen sizes
and pixel densities.


159
00:08:30,911 --> 00:08:33,347 line:-1
Next, I want to talk about Point Accurate.


160
00:08:33,413 --> 00:08:35,849 line:-1
Point Accurate mode sizes the window


161
00:08:35,916 --> 00:08:40,988 line:-2
so that content appears the same size
on devices with different scale factors.


162
00:08:41,054 --> 00:08:44,358 line:-2
In other words,
it makes all points on all Simulators


163
00:08:44,424 --> 00:08:45,659 line:-1
the same on your screen,


164
00:08:45,726 --> 00:08:49,463 line:-2
regardless of the pixel density
of the simulated device.


165
00:08:49,530 --> 00:08:54,568 line:-2
So a device with a 3x display
will appear the same size as a 2x display.


166
00:08:54,635 --> 00:08:58,305 line:-2
This will result in the Simulator's
screen content being downscaled


167
00:08:58,372 --> 00:09:01,241 line:-2
if your Mac's display
has a lower pixel density


168
00:09:01,308 --> 00:09:03,644 line:-1
than that of the simulated device.


169
00:09:03,710 --> 00:09:05,812 line:-1
For example, in Point Accurate mode,


170
00:09:05,879 --> 00:09:09,449 line:-2
a simulated device with a 3x display
will be downscaled


171
00:09:09,516 --> 00:09:12,786 line:-2
if viewed on a Mac
with a 2x or a 1x display,


172
00:09:12,853 --> 00:09:16,290 line:-2
and a simulated device with a 2x display
will be downscaled


173
00:09:16,356 --> 00:09:18,926 line:-1
if viewed on a Mac with a 1x display.


174
00:09:18,992 --> 00:09:22,229 line:-2
If the simulated device's display
and your Mac's display


175
00:09:22,296 --> 00:09:25,799 line:-2
have the same pixel density,
then no scaling needs to occur.


176
00:09:25,866 --> 00:09:28,669 line:-2
It's the same as Pixel Accurate
in this case.


177
00:09:29,036 --> 00:09:32,372 line:-2
Finally, let's talk about
the Pixel Accurate display mode.


178
00:09:32,439 --> 00:09:35,943 line:-2
In this mode,
each pixel on the simulated device


179
00:09:36,009 --> 00:09:39,680 line:-2
is mapped directly to one pixel
on your Mac's display.


180
00:09:39,746 --> 00:09:42,783 line:-2
This will cause Simulators
to appear larger on-screen


181
00:09:42,850 --> 00:09:48,355 line:-2
if the Mac's display has a lower
pixel density than the simulated device.


182
00:09:48,422 --> 00:09:52,526 line:-2
As an example, if we have
a simulated device with a 2x screen


183
00:09:52,593 --> 00:09:54,795 line:-1
running on a Mac with a 1x screen,


184
00:09:54,862 --> 00:09:57,364 line:-2
then the Simulator window
will be double the size


185
00:09:57,431 --> 00:09:59,266 line:-1
of the Point Accurate mode.


186
00:09:59,666 --> 00:10:02,703 line:-2
Now I want to talk about ways
you can leverage the command line


187
00:10:02,769 --> 00:10:05,739 line:-1
to access all the power Simulator offers.


188
00:10:06,106 --> 00:10:08,542 line:-2
You can control Simulator
from the command line


189
00:10:08,609 --> 00:10:10,310 line:-1
using the simctl tool.


190
00:10:10,377 --> 00:10:14,248 line:-2
Its name is a portmanteau of the words
"Simulator and "control."


191
00:10:14,314 --> 00:10:17,351 line:-2
It is an amazing tool
to help boost your productivity.


192
00:10:17,885 --> 00:10:20,087 line:-1
First, we're going to talk about privacy.


193
00:10:20,153 --> 00:10:23,223 line:-2
At Apple,
we take our users' privacy seriously.


194
00:10:23,290 --> 00:10:24,658 line:-1
For so many people,


195
00:10:24,725 --> 00:10:29,263 line:-2
our devices are often an extension
of our own personal lives.


196
00:10:29,329 --> 00:10:33,967 line:-2
They contain so much personal data
about ourselves and those we care about.


197
00:10:35,235 --> 00:10:39,973 line:-2
That's why our platforms don't allow apps
to access your users' personal data


198
00:10:40,040 --> 00:10:41,742 line:-1
without their permission.


199
00:10:41,808 --> 00:10:45,612 line:-2
Testing your app's handling
of the user's privacy choices is important


200
00:10:45,679 --> 00:10:47,581 line:-1
and simctl can help you.


201
00:10:48,282 --> 00:10:51,585 line:-2
An important part of the privacy features
on our platforms


202
00:10:51,652 --> 00:10:54,087 line:-1
are various access prompts that appear


203
00:10:54,154 --> 00:10:57,391 line:-2
when an app wants to access
a protected resource.


204
00:10:57,457 --> 00:11:00,260 line:-1
You must test your app to see how it works


205
00:11:00,327 --> 00:11:03,897 line:-2
when permissions are both granted
and withheld.


206
00:11:03,964 --> 00:11:07,134 line:-2
With simctl, you can grant
and revoke your apps' access


207
00:11:07,201 --> 00:11:10,070 line:-2
to these protected resources
from the command line.


208
00:11:10,137 --> 00:11:13,774 line:-2
simctl supports
many of the most important services.


209
00:11:13,841 --> 00:11:17,678 line:-2
These include access to the calendar,
your user's contacts,


210
00:11:17,744 --> 00:11:20,514 line:-1
their location, and their photos.


211
00:11:20,581 --> 00:11:24,251 line:-2
For more information, and to see
the full list of supported services,


212
00:11:24,318 --> 00:11:27,087 line:-2
don't hesitate to visit
the simctl help pages.


213
00:11:27,154 --> 00:11:30,958 line:-2
To access it,
just run simctl without any arguments.


214
00:11:31,358 --> 00:11:34,695 line:-2
To grant your app permission,
you simply specify the action--


215
00:11:34,761 --> 00:11:37,364 line:-1
here, grant, to grant permissions--


216
00:11:37,431 --> 00:11:40,267 line:-2
followed by the service name
and your app's bundle ID.


217
00:11:41,335 --> 00:11:45,973 line:-2
Here I'm using the booted alias to refer
to the currently booted Simulator.


218
00:11:46,039 --> 00:11:48,275 line:-1
If you have multiple booted Simulators,


219
00:11:48,342 --> 00:11:52,713 line:-2
you'll want to specify which Simulator
by its name or UDID.


220
00:11:54,014 --> 00:11:58,051 line:-2
Of course, it's equally possible
to revoke an app's access to a resource.


221
00:11:58,118 --> 00:12:00,187 line:-1
You just specify the revoke action.


222
00:12:01,388 --> 00:12:03,724 line:-1
Instead of listing a specific service,


223
00:12:03,790 --> 00:12:07,160 line:-2
you can instead specify "all"
as the service name.


224
00:12:07,227 --> 00:12:10,564 line:-2
This applies the specified action
to all services.


225
00:12:10,631 --> 00:12:13,734 line:-2
Here, we are taking away
all of an app's permissions.


226
00:12:14,935 --> 00:12:20,073 line:-2
And finally, you can reset all permissions
to restore them to the defaults.


227
00:12:20,140 --> 00:12:24,178 line:-2
With the reset command,
it can apply either to a specific app,


228
00:12:24,244 --> 00:12:25,846 line:-1
or system-wide.


229
00:12:25,913 --> 00:12:30,117 line:-2
Here, we will reset all permissions
to all apps on the system.


230
00:12:30,751 --> 00:12:33,687 line:-1
Next, let's discuss push notifications.


231
00:12:34,154 --> 00:12:36,957 line:-2
Push notifications
are a big part of the experience


232
00:12:37,024 --> 00:12:39,159 line:-1
for users on Apple platforms.


233
00:12:39,226 --> 00:12:42,462 line:-2
It lets you deliver messages
to your users periodically


234
00:12:42,529 --> 00:12:45,866 line:-2
to notify them about things
they've asked to be notified about.


235
00:12:46,967 --> 00:12:51,004 line:-2
Here you can see an example
of a very, very basic push notification


236
00:12:51,071 --> 00:12:53,740 line:-1
containing a title and a body.


237
00:12:53,807 --> 00:12:55,976 line:-1
When the push notification is displayed,


238
00:12:56,043 --> 00:12:59,813 line:-2
the body text appears below the title text
in a different font.


239
00:13:00,681 --> 00:13:05,285 line:-2
One special additional key
is this "Simulator Target Bundle" key.


240
00:13:05,352 --> 00:13:07,855 line:-2
This key specifies
the bundle ID of the app


241
00:13:07,921 --> 00:13:10,390 line:-1
that should receive the notification.


242
00:13:10,457 --> 00:13:13,994 line:-2
Here, the notification is associated
with our sample app.


243
00:13:14,394 --> 00:13:17,531 line:-2
Let's dispatch the notification
to our sample app.


244
00:13:17,598 --> 00:13:21,435 line:-2
Now the push notification command
takes at most two parameters:


245
00:13:21,502 --> 00:13:24,838 line:-2
the app bundle ID and the payload file,
which I just showed you.


246
00:13:25,572 --> 00:13:28,642 line:-2
If you drag-and-drop the file
onto the device window,


247
00:13:28,709 --> 00:13:32,079 line:-2
then the bundle ID must be specified
in the JSON file.


248
00:13:32,779 --> 00:13:35,382 line:-2
With simctl,
the bundle ID can be specified


249
00:13:35,449 --> 00:13:38,151 line:-1
as a parameter or in the JSON file.


250
00:13:39,453 --> 00:13:41,221 line:-1
But it's still useful to include


251
00:13:41,288 --> 00:13:44,458 line:-2
so that you can omit the bundle ID
from your commands.


252
00:13:44,525 --> 00:13:47,461 line:-2
Just note that whatever you specify
on the command line


253
00:13:47,528 --> 00:13:49,930 line:-1
will override anything from the file.


254
00:13:50,931 --> 00:13:53,433 line:-2
So let's run this command
and see what happens.


255
00:13:53,500 --> 00:13:58,405 line:-2
Like typical UNIX commands,
simctl prints no output if it succeeds.


256
00:13:58,472 --> 00:14:02,142 line:-2
You'll see the contents
of the push notification on the screen.


257
00:14:02,209 --> 00:14:04,978 line:-1
See? It works, just like that.


258
00:14:05,479 --> 00:14:07,714 line:-1
Next up, let's talk about video recording.


259
00:14:08,248 --> 00:14:12,686 line:-2
Sometimes, you really need a video
to capture the essence of your app,


260
00:14:12,753 --> 00:14:15,656 line:-2
whether it's to market your app
on its App Store page,


261
00:14:15,722 --> 00:14:18,292 line:-2
to send some work in progress UI
to a colleague,


262
00:14:18,358 --> 00:14:20,494 line:-1
or to give a demo on your website.


263
00:14:20,827 --> 00:14:23,263 line:-2
Lots of developers use
screen recording software


264
00:14:23,330 --> 00:14:25,065 line:-1
such as QuickTime to do this,


265
00:14:25,132 --> 00:14:28,635 line:-2
but you don't need to use any
special software to record the Simulator.


266
00:14:28,969 --> 00:14:30,804 line:-1
Fortunately, with simctl,


267
00:14:30,871 --> 00:14:33,507 line:-2
you can capture a video
of your app's functionality


268
00:14:33,574 --> 00:14:35,075 line:-1
right from the command line.


269
00:14:35,142 --> 00:14:38,445 line:-2
And Simulator.app
does not even need to be running.


270
00:14:38,512 --> 00:14:41,648 line:-2
Here's a sample simctl command
to record a video.


271
00:14:41,715 --> 00:14:45,152 line:-2
It captures a video of the screen
from the running device


272
00:14:45,219 --> 00:14:49,256 line:-2
and saves it to the output file
named video.mp4.


273
00:14:49,323 --> 00:14:52,226 line:-2
Note that this file
shouldn't already exist.


274
00:14:52,292 --> 00:14:55,262 line:-2
If it already exists,
then the recording will fail


275
00:14:55,329 --> 00:14:58,632 line:-2
unless you use
the "--force" command line flag


276
00:14:58,699 --> 00:15:02,035 line:-2
to indicate that it is safe
to write over the existing file.


277
00:15:02,669 --> 00:15:05,439 line:-1
The video recording capabilities of simctl


278
00:15:05,506 --> 00:15:08,342 line:-2
support several different options
to control the behavior.


279
00:15:09,376 --> 00:15:11,778 line:-1
Here, we are using the default options.


280
00:15:12,546 --> 00:15:17,851 line:-2
These options give a video file
the HEVC codec with a black device mask.


281
00:15:18,485 --> 00:15:20,921 line:-1
If the device mask is set to be black,


282
00:15:20,988 --> 00:15:25,125 line:-2
then the sensor bar and curves
of certain devices such as the iPhone 11


283
00:15:25,192 --> 00:15:29,429 line:-2
will be rendered black in the video,
making the items behind them invisible.


284
00:15:29,830 --> 00:15:33,133 line:-2
It's important to note
that the video recording continues


285
00:15:33,200 --> 00:15:36,737 line:-2
until you terminate it by pressing
Control-C in the terminal window.


286
00:15:36,803 --> 00:15:39,673 line:-2
One nice thing
about video recording with simctl


287
00:15:39,740 --> 00:15:43,510 line:-2
is that it uses your GPU
to accelerate the video encoding.


288
00:15:43,577 --> 00:15:46,513 line:-2
So, it won't use
too many system resources.


289
00:15:46,914 --> 00:15:51,218 line:-2
Now, let's record another video,
but this time specifying some options.


290
00:15:51,285 --> 00:15:55,189 line:-2
We're going to change the video codec
and the device mask.


291
00:15:55,255 --> 00:15:57,991 line:-1
This time, we will ignore any device mask.


292
00:15:58,058 --> 00:16:01,828 line:-2
This means that the entire rectangular
frame buffer will be recorded.


293
00:16:01,895 --> 00:16:06,900 line:-2
We will also use the h264 codec
instead of the HEVC codec.


294
00:16:07,467 --> 00:16:12,573 line:-2
Lastly, certain devices running iOS
support external displays.


295
00:16:12,639 --> 00:16:14,875 line:-2
You can choose to capture
the video footage


296
00:16:14,942 --> 00:16:19,880 line:-2
from either the device's internal display,
or an external display.


297
00:16:19,947 --> 00:16:22,716 line:-2
Here's how to capture video
from an external display.


298
00:16:23,450 --> 00:16:26,687 line:-2
On iOS, one app
that supports sending output


299
00:16:26,753 --> 00:16:29,523 line:-1
to an external display is the Photos app.


300
00:16:29,590 --> 00:16:33,093 line:-2
Right now, we are flicking through
the Photos app, looking at our photos.


301
00:16:36,096 --> 00:16:39,566 line:-2
If we want to capture what is displayed
on the external display,


302
00:16:39,633 --> 00:16:43,203 line:-2
we tell simctl to capture the output
of the external display


303
00:16:43,270 --> 00:16:45,339 line:-1
with the "--display" flag.


304
00:16:47,274 --> 00:16:49,376 line:-1
And here is the video that we captured.


305
00:16:49,443 --> 00:16:52,513 line:-2
You'll notice that it contains the output
of the external display


306
00:16:52,579 --> 00:16:55,115 line:-1
and not the simulated device's screen.


307
00:16:55,916 --> 00:16:57,851 line:-1
Now, on to the status bar.


308
00:16:57,918 --> 00:17:01,588 line:-1
As you know, iOS and iPadOS devices


309
00:17:01,655 --> 00:17:04,758 line:-1
have a status bar showing the time, date,


310
00:17:04,825 --> 00:17:08,494 line:-2
cellular and Wi-Fi signal,
and other important information.


311
00:17:08,561 --> 00:17:11,665 line:-2
You can use simctl
to customize this information


312
00:17:11,732 --> 00:17:14,568 line:-2
so that it can display
whatever information you want.


313
00:17:14,635 --> 00:17:17,069 line:-2
For example,
this can be used for screenshots


314
00:17:17,137 --> 00:17:18,571 line:-1
for your app's App Store page.


315
00:17:18,638 --> 00:17:20,941 line:0
Here's our iPhone as it stands now.


316
00:17:21,008 --> 00:17:24,877 line:0
Currently the phone is showing
that the current time is 9:41 a.m.


317
00:17:24,944 --> 00:17:27,481 line:0
with full cellular and Wi-Fi strength.


318
00:17:27,548 --> 00:17:30,784 line:0
The battery is also 100% charged.


319
00:17:30,851 --> 00:17:33,687 line:0
Suppose we want to customize
the status bar up top


320
00:17:33,754 --> 00:17:36,823 line:0
so we can see what it would look like
under different conditions.


321
00:17:37,457 --> 00:17:41,195 line:0
The simctl status_bar command
can override the status bar


322
00:17:41,261 --> 00:17:43,530 line:0
to display whatever information you like.


323
00:17:43,931 --> 00:17:47,534 line:-2
Let's say we want a screenshot
of our app when the user is out and about.


324
00:17:47,935 --> 00:17:50,838 line:-1
Some time has passed, so it is now 12:01.


325
00:17:50,904 --> 00:17:54,908 line:-2
Perhaps the user has a low signal
with one cellular bar signal,


326
00:17:54,975 --> 00:17:58,412 line:-2
3G data network, and no Wi-Fi.
Let's see the result.


327
00:18:00,113 --> 00:18:03,784 line:-2
After running the command, you can see
that our status bar has changed


328
00:18:03,851 --> 00:18:06,587 line:-1
to match the settings we have specified.


329
00:18:07,154 --> 00:18:08,956 line:-1
Of course, at a certain point,


330
00:18:09,022 --> 00:18:11,992 line:-2
you may want to clear
the overrides you have set.


331
00:18:12,059 --> 00:18:15,562 line:-2
You can do that with the clear command.
Let's run that now.


332
00:18:16,330 --> 00:18:21,001 line:-2
And, as you can see, the status bar
has been returned to its default settings.


333
00:18:21,068 --> 00:18:25,205 line:-2
Now, there are actually more options
that you can override in the status bar


334
00:18:25,272 --> 00:18:26,607 line:-1
than I've shown here.


335
00:18:26,673 --> 00:18:28,675 line:-1
To see all the available options,


336
00:18:28,742 --> 00:18:31,845 line:-2
run the status_bar command
without any arguments.


337
00:18:31,912 --> 00:18:34,815 line:-2
Finally, let's discuss
the Keychain management.


338
00:18:34,882 --> 00:18:40,187 line:-2
simctl allows you to add CA certificates
to the device's trusted root store.


339
00:18:40,254 --> 00:18:44,358 line:-2
This is really useful when you are
developing apps with network capabilities.


340
00:18:44,424 --> 00:18:45,692 line:-1
Here's how it works.


341
00:18:46,593 --> 00:18:48,462 line:-1
I have a certificate which I want to add


342
00:18:48,529 --> 00:18:50,898 line:-2
to the trusted root store
in the Simulator.


343
00:18:50,964 --> 00:18:54,134 line:-2
I can do this with
the simctl Keychain command.


344
00:18:54,201 --> 00:18:55,536 line:-1
When you call this command,


345
00:18:55,602 --> 00:18:58,839 line:-2
you need to it give the path
to a valid CA certificate.


346
00:19:00,040 --> 00:19:01,875 line:-1
In addition to using simctl,


347
00:19:01,942 --> 00:19:05,579 line:-2
you can also add the certificate
by dragging it onto the Simulator window,


348
00:19:05,646 --> 00:19:08,982 line:-2
but here, we're going to stick
with the simctl command.


349
00:19:09,049 --> 00:19:10,617 line:-1
And after running this command,


350
00:19:10,684 --> 00:19:14,254 line:-2
your certificate will be added
into the Simulator's trust store.


351
00:19:14,321 --> 00:19:16,590 line:-1
But you still have to trust it manually.


352
00:19:16,657 --> 00:19:19,226 line:-1
To do so, go into the Settings app,


353
00:19:19,293 --> 00:19:23,597 line:-2
then tap on General, About,
Certificate Trust Settings,


354
00:19:23,664 --> 00:19:26,166 line:-1
and then tap on the switch to activate it.


355
00:19:26,233 --> 00:19:28,702 line:-2
Be sure to acknowledge
the warning message.


356
00:19:29,236 --> 00:19:32,539 line:-2
And at this point,
this CA certificate is now trusted.


357
00:19:32,606 --> 00:19:37,511 line:-2
So now any TLS certificates this CA issues
will work without a problem.


358
00:19:38,512 --> 00:19:41,248 line:-2
You can do other tasks
with the Keychain command as well,


359
00:19:41,315 --> 00:19:43,650 line:-1
such as clearing any saved passwords.


360
00:19:43,717 --> 00:19:46,086 line:-2
For more information,
please check the help pages.


361
00:19:46,820 --> 00:19:50,691 line:-2
And that's the end of our presentation
on "Becoming a Simulator Expert."


362
00:19:50,757 --> 00:19:52,860 line:-2
We hope the techniques
we've talked about today


363
00:19:52,926 --> 00:19:55,996 line:-2
will help you turbocharge
your developer experience


364
00:19:56,063 --> 00:19:59,166 line:-2
so that you can create better apps
and delight your users.


365
00:19:59,233 --> 00:20:00,400 line:-1
Thank you for watching,


366
00:20:00,467 --> 00:20:05,372 line:-2
and we hope you enjoy
the rest of the content for WWDC 2020.

