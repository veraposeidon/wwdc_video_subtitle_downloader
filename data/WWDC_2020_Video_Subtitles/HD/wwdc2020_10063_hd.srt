1
00:00:03,836 --> 00:00:06,707 line:-1
Hello and welcome to WWDC.


2
00:00:08,408 --> 00:00:09,676 line:0
Hi. My name's Roberto,


3
00:00:09,743 --> 00:00:12,246 line:0
and I'm a software battery life engineer
here at Apple,


4
00:00:12,312 --> 00:00:15,849 line:0
and I'm going to demystify
background execution for you today.


5
00:00:16,283 --> 00:00:18,385 line:-1
You may have asked yourself this question:


6
00:00:18,452 --> 00:00:20,821 line:-1
"My app adopted a background mode,


7
00:00:20,888 --> 00:00:23,323 line:-2
but it's not running as much
as I would like it to.


8
00:00:23,390 --> 00:00:24,391 line:-1
Why?"


9
00:00:25,158 --> 00:00:28,529 line:-2
At Apple, we understand
that background execution allows apps


10
00:00:28,595 --> 00:00:31,231 line:-2
to take their user experience
to the next level,


11
00:00:31,965 --> 00:00:34,201 line:-1
and we provide a wide variety of APIs


12
00:00:34,268 --> 00:00:37,204 line:-2
that grant background execution
for different use cases,


13
00:00:37,271 --> 00:00:39,373 line:-1
each with different parameters.


14
00:00:39,439 --> 00:00:40,507 line:-1
In this video,


15
00:00:40,574 --> 00:00:44,645 line:-2
we will address some of these APIs
and answer this most common question.


16
00:00:45,612 --> 00:00:50,417 line:-2
Today we'll start by talking about general
factors affecting background runtime.


17
00:00:50,484 --> 00:00:53,654 line:-1
Then we will dive into four specific APIs:


18
00:00:54,154 --> 00:00:57,424 line:-2
background app refresh tasks,
background pushes,


19
00:00:57,991 --> 00:01:00,561 line:-2
URLSession background downloads
and uploads,


20
00:01:00,627 --> 00:01:02,596 line:-1
and background processing tasks.


21
00:01:02,663 --> 00:01:05,032 line:-1
Now, before you proceed,


22
00:01:05,098 --> 00:01:07,868 line:-2
if your app does not
currently use these APIs,


23
00:01:07,935 --> 00:01:10,137 line:-1
or you want to learn how to adopt them,


24
00:01:10,204 --> 00:01:13,507 line:-2
then we recommend viewing
existing sessions and documentation first.


25
00:01:13,974 --> 00:01:17,945 line:0
A great start would be the "Advances
in App Background Execution" session


26
00:01:18,011 --> 00:01:20,214 line:0
from WWDC 2019.


27
00:01:20,647 --> 00:01:23,917 line:-2
And before we dive into
the general factors affecting runtime,


28
00:01:23,984 --> 00:01:27,855 line:-2
let's highlight the goals we balance
when determining what factors play a role


29
00:01:27,921 --> 00:01:30,490 line:-2
in system scheduling
of background execution.


30
00:01:31,291 --> 00:01:33,360 line:-1
On the right, we have your app's goals:


31
00:01:34,394 --> 00:01:36,063 line:-1
having the latest content,


32
00:01:36,129 --> 00:01:38,832 line:-2
being fresh when the user
brings the app to the foreground,


33
00:01:38,899 --> 00:01:41,835 line:-2
and being able to achieve
both of these reliably.


34
00:01:42,369 --> 00:01:44,905 line:-2
And we balance these with the goals
on the left.


35
00:01:45,906 --> 00:01:48,075 line:-1
First, there's battery life.


36
00:01:48,141 --> 00:01:50,611 line:-2
We want to make sure
that any background execution can occur


37
00:01:50,677 --> 00:01:52,813 line:-1
while maintaining all-day battery life.


38
00:01:53,447 --> 00:01:55,449 line:-1
Next is performance.


39
00:01:55,516 --> 00:01:59,453 line:-2
We set strategic limits to ensure
that opportunistic background execution


40
00:01:59,520 --> 00:02:01,822 line:-1
does not interfere with active usage.


41
00:02:02,856 --> 00:02:04,758 line:-1
Third is privacy.


42
00:02:04,825 --> 00:02:07,060 line:-2
We want to make sure
that users are not surprised


43
00:02:07,127 --> 00:02:08,961 line:-1
by an app running in the background.


44
00:02:09,029 --> 00:02:12,065 line:-2
That is,
based on their particular usage patterns,


45
00:02:12,132 --> 00:02:16,136 line:-2
they would reasonably expect that this app
should get some background execution.


46
00:02:17,070 --> 00:02:21,208 line:-2
Finally, we have user intent.
This is really important to us.


47
00:02:21,275 --> 00:02:23,443 line:-1
If a user takes a certain action,


48
00:02:23,510 --> 00:02:27,247 line:-2
we want to make sure the system
responds to and tailors the experience


49
00:02:27,314 --> 00:02:29,216 line:-1
to those unique actions.


50
00:02:29,283 --> 00:02:31,018 line:-1
In balancing all these goals,


51
00:02:31,084 --> 00:02:35,155 line:-2
we arrive at many different factors that
affect background launches and runtime.


52
00:02:35,856 --> 00:02:38,258 line:-2
And here you can see some
of these factors.


53
00:02:39,226 --> 00:02:43,263 line:-2
Today, we'll cover the top seven factors
that are likely to affect you.


54
00:02:44,565 --> 00:02:49,269 line:-2
These are critically low battery,
Low Power Mode,


55
00:02:49,336 --> 00:02:51,805 line:-1
app usage, the App switcher,


56
00:02:52,306 --> 00:02:54,208 line:-1
the Background App Refresh switch,


57
00:02:54,775 --> 00:02:56,910 line:-1
system budgets, and rate-limiting.


58
00:02:56,977 --> 00:02:59,446 line:-1
Let's start with critically low battery.


59
00:02:59,847 --> 00:03:02,916 line:-2
Sometimes people find themselves
in critically low battery conditions


60
00:03:02,983 --> 00:03:05,285 line:-2
where they may not have
much battery charge left,


61
00:03:05,352 --> 00:03:07,454 line:-2
but they still expect
their phone can last long enough


62
00:03:07,521 --> 00:03:09,256 line:-1
to get them to a place to charge.


63
00:03:10,357 --> 00:03:13,460 line:-2
An app running in the background
may be invisible to the user,


64
00:03:13,527 --> 00:03:15,329 line:-1
so it doesn't make sense to use power


65
00:03:15,395 --> 00:03:18,565 line:-2
and risk the user not being able to reach
that charging destination.


66
00:03:19,499 --> 00:03:21,435 line:-1
That's why in these situations,


67
00:03:21,502 --> 00:03:25,172 line:-2
the system will attempt to pause
discretionary and opportunistic work,


68
00:03:25,239 --> 00:03:27,674 line:-2
which may not bring direct utility
in real time,


69
00:03:27,741 --> 00:03:31,778 line:-2
and instead focus on essential work
that is directly user-requested.


70
00:03:32,679 --> 00:03:34,581 line:0
Next, we have Low Power Mode.


71
00:03:35,182 --> 00:03:37,484 line:0
Low Power Mode is different
from critically low battery


72
00:03:37,551 --> 00:03:39,686 line:0
because it is a user-determined setting.


73
00:03:39,753 --> 00:03:42,289 line:-1
The user has explicitly told the system


74
00:03:42,356 --> 00:03:45,125 line:-2
that preserving battery
is critically important to them,


75
00:03:45,192 --> 00:03:47,961 line:-2
potentially even at levels
higher than 20 percent.


76
00:03:48,829 --> 00:03:52,065 line:-2
Therefore, given it is such a strong
and direct signal,


77
00:03:52,132 --> 00:03:55,135 line:-2
the system will take this as a cue
to limit certain activity.


78
00:03:55,736 --> 00:03:56,737 line:-1
As a developer,


79
00:03:56,803 --> 00:03:59,940 line:-2
remember you can always check
if a user is in Low Power Mode.


80
00:04:00,007 --> 00:04:03,310 line:0
And further, you can register
for state change notifications.


81
00:04:04,044 --> 00:04:07,247 line:0
These can both be a trigger
to pause activity in your app.


82
00:04:07,314 --> 00:04:11,718 line:0
For example, maybe your app can turn off
autoplaying videos in Low Power Mode


83
00:04:11,785 --> 00:04:14,688 line:0
to limit energy consumption
due to networking and rendering.


84
00:04:15,255 --> 00:04:19,192 line:-2
Now, let's talk about other user-driven
factors affecting background runtime.


85
00:04:20,226 --> 00:04:22,095 line:-1
One of these is app usage.


86
00:04:22,162 --> 00:04:24,431 line:-2
There is a finite amount of resources
on the system,


87
00:04:24,498 --> 00:04:28,735 line:-2
and sometimes the system must prioritize
running certain apps over others,


88
00:04:28,802 --> 00:04:31,171 line:-2
as running everything at once
would be detrimental


89
00:04:31,238 --> 00:04:32,573 line:-1
to performance and battery life.


90
00:04:33,140 --> 00:04:34,908 line:-1
Therefore, whenever reasonable,


91
00:04:34,975 --> 00:04:38,345 line:-2
the system will prioritize apps
that are most important to the user.


92
00:04:38,745 --> 00:04:41,548 line:-2
Typically, these are simply
the apps they use the most.


93
00:04:42,449 --> 00:04:44,852 line:-1
There is an on-device predictive engine


94
00:04:44,918 --> 00:04:47,387 line:-2
that learns which apps people will use
and when,


95
00:04:47,454 --> 00:04:50,524 line:-2
and this information is used
to prioritize background activity.


96
00:04:51,158 --> 00:04:53,861 line:-2
But it's not just the apps
the user uses the most.


97
00:04:53,927 --> 00:04:57,698 line:-2
We sometimes have indirect cues from
the user on which apps they want to run.


98
00:04:58,498 --> 00:05:01,268 line:-2
For example,
they may jump into the App Switcher


99
00:05:01,335 --> 00:05:03,971 line:-2
and decide to swipe up
to remove a few apps,


100
00:05:04,037 --> 00:05:07,074 line:-2
perhaps to declutter
or explicitly terminate an app.


101
00:05:07,641 --> 00:05:09,610 line:-1
For the modes we will discuss today,


102
00:05:09,676 --> 00:05:12,212 line:-2
when the system determines
which apps to run,


103
00:05:12,279 --> 00:05:16,483 line:-2
it constrains to the set of apps that
are still visible in the App Switcher.


104
00:05:17,451 --> 00:05:20,587 line:-2
Similarly, there are more direct cues
on which apps to run,


105
00:05:20,654 --> 00:05:22,422 line:-1
like specific user settings.


106
00:05:22,489 --> 00:05:24,725 line:-2
There are settings
for many different background modes:


107
00:05:24,791 --> 00:05:26,960 line:-1
for example, Location and Bluetooth.


108
00:05:27,661 --> 00:05:30,564 line:-2
For discretionary
and opportunistic background execution,


109
00:05:30,631 --> 00:05:33,300 line:-1
we have the Background App Refresh switch.


110
00:05:33,367 --> 00:05:36,870 line:-2
It may be obvious that this maps
to Background App Refresh tasks,


111
00:05:36,937 --> 00:05:40,707 line:-2
but it may not be as apparent that
this setting applies to other modes too.


112
00:05:40,774 --> 00:05:44,278 line:-2
In fact, it applies to every mode
we will discuss today.


113
00:05:45,078 --> 00:05:48,649 line:-2
This switch defaults to "on."
No special permission prompt required.


114
00:05:49,183 --> 00:05:53,420 line:-2
And just like Low Power Mode,
you can query the state of the switch


115
00:05:53,487 --> 00:05:56,657 line:-2
as well as listen for notifications
when the state is changed.


116
00:05:57,658 --> 00:06:00,694 line:-1
Now, because this switch defaults to "on,"


117
00:06:00,761 --> 00:06:04,164 line:-2
the system needs a way to mitigate against
all apps running all day


118
00:06:04,231 --> 00:06:06,266 line:-2
and overwhelming a user's battery
or data plan.


119
00:06:07,568 --> 00:06:09,703 line:-2
This is where system budgets
come into play.


120
00:06:10,304 --> 00:06:14,708 line:-2
To ensure that opportunistic activities
do not deplete batteries or data plans,


121
00:06:14,775 --> 00:06:16,844 line:-1
we have an energy and data budget,


122
00:06:16,910 --> 00:06:20,047 line:-2
and every time an app runs,
it deducts from these budgets.


123
00:06:21,248 --> 00:06:24,117 line:-2
The budgets are slowly made available
throughout the day


124
00:06:24,184 --> 00:06:27,554 line:-2
so that updates can be distributed
and apps remain fresh throughout.


125
00:06:28,222 --> 00:06:32,593 line:-2
As long as you limit the amount of energy
and cellular data that you use per launch,


126
00:06:32,659 --> 00:06:35,062 line:-2
this will prevent the system
from limiting you.


127
00:06:36,630 --> 00:06:39,266 line:-1
Also, to help apps with budget management,


128
00:06:39,333 --> 00:06:42,536 line:-2
the system performs some rate-limiting
on your app's behalf.


129
00:06:43,136 --> 00:06:45,839 line:-2
This means the system
reasonably spaces out launches


130
00:06:45,906 --> 00:06:48,709 line:-1
just enough to maintain freshness


131
00:06:48,775 --> 00:06:51,778 line:-2
while mitigating against frequent energy
and data usage.


132
00:06:52,246 --> 00:06:55,716 line:-2
This is all done for you, so don't worry
about implementing complex logic


133
00:06:55,782 --> 00:06:57,885 line:-1
to do rate-limiting on your own.


134
00:06:57,951 --> 00:07:01,054 line:-2
Just request what you need,
and the system will space out launches


135
00:07:01,121 --> 00:07:03,657 line:-2
depending on what's appropriate
for each background mode.


136
00:07:04,424 --> 00:07:07,461 line:0
So those are the top seven factors
the system considers


137
00:07:07,528 --> 00:07:10,831 line:0
and that you should keep in mind when
examining your app's background execution.


138
00:07:11,265 --> 00:07:13,200 line:-1
And now, here's my colleague Andy


139
00:07:13,267 --> 00:07:17,004 line:-2
to explain how the seven factors apply
to specific background modes.


140
00:07:17,571 --> 00:07:21,408 line:0
Thanks, Roberto.
I'm Andy from iOS System Experience.


141
00:07:21,475 --> 00:07:25,679 line:0
Let's see how the seven factors apply
to each of the specific background modes.


142
00:07:26,213 --> 00:07:29,683 line:-2
First, let's start
with Background App Refresh tasks.


143
00:07:30,117 --> 00:07:33,387 line:-2
Background App Refresh tasks
are a way to ask the system


144
00:07:33,453 --> 00:07:36,190 line:-2
to run your app periodically
in the background


145
00:07:36,256 --> 00:07:39,660 line:-2
so that your app can be fresh
just before the user foregrounds it.


146
00:07:40,427 --> 00:07:43,363 line:-2
It's great for things like
refreshing a social media feed,


147
00:07:43,430 --> 00:07:46,366 line:-2
fetching emails,
and retrieving the latest stock price.


148
00:07:46,433 --> 00:07:50,037 line:-2
Let's take a look at how
your Background App Refresh tasks


149
00:07:50,103 --> 00:07:52,172 line:-1
might run over the course of the day.


150
00:07:52,606 --> 00:07:53,874 line:-1
On this timeline,


151
00:07:53,941 --> 00:07:57,678 line:-2
I have plotted the background launches
for App Refresh tasks.


152
00:07:58,245 --> 00:08:02,549 line:-2
You might expect that they would be evenly
distributed over the course of the day.


153
00:08:04,151 --> 00:08:07,187 line:-2
But in reality,
you may observe something like this.


154
00:08:07,254 --> 00:08:09,056 line:-1
Why could this be?


155
00:08:09,122 --> 00:08:11,558 line:-2
This is where
the seven factors come into play.


156
00:08:12,926 --> 00:08:15,829 line:-2
Over time,
the system learned usage patterns


157
00:08:15,896 --> 00:08:19,967 line:-2
and understood that the user typically
launches your app in the morning,


158
00:08:20,033 --> 00:08:22,569 line:-1
around lunchtime, and in the evening.


159
00:08:22,636 --> 00:08:27,040 line:-2
Therefore, the launches were scheduled
just before typical launch times.


160
00:08:27,508 --> 00:08:31,044 line:-2
But wait. Maybe you also notice
a large gap in launches.


161
00:08:31,912 --> 00:08:33,246 line:-1
Why could this be?


162
00:08:34,014 --> 00:08:36,383 line:-2
This is where
the other factors come into play.


163
00:08:37,183 --> 00:08:39,520 line:-1
Maybe the user was in Low Power Mode,


164
00:08:39,586 --> 00:08:42,389 line:-2
as they realized they would be out
until late in the evening


165
00:08:42,456 --> 00:08:44,424 line:-1
and wanted to preserve battery life.


166
00:08:45,092 --> 00:08:48,362 line:-2
Or maybe the user forgot to charge
their phone the previous night,


167
00:08:48,428 --> 00:08:50,297 line:-1
and the battery was critically low.


168
00:08:51,498 --> 00:08:54,468 line:-2
Any of the seven factors
could have played a role.


169
00:08:54,535 --> 00:08:58,505 line:-2
There's one factor, though, where you
have the most influence as a developer,


170
00:08:59,072 --> 00:09:00,874 line:-1
and this is the system budgets.


171
00:09:02,009 --> 00:09:06,046 line:-2
As a developer, you can focus
on efficient usage of these budgets


172
00:09:06,113 --> 00:09:09,316 line:-2
to maximize the opportunities
for your app to run.


173
00:09:10,184 --> 00:09:13,153 line:-1
So, first, minimize power consumption.


174
00:09:13,654 --> 00:09:18,025 line:-2
Avoid bringing up unnecessary hardware
like the GPS or accelerometer


175
00:09:18,091 --> 00:09:20,093 line:-1
unless you absolutely need to.


176
00:09:20,794 --> 00:09:24,665 line:-2
Along those lines, try to finish your work
as quickly as possible.


177
00:09:25,132 --> 00:09:27,701 line:-2
This can mean
parallelizing network activity


178
00:09:27,768 --> 00:09:30,404 line:-2
and limiting computation
to the bare minimum.


179
00:09:32,005 --> 00:09:34,675 line:-2
And don't let these optimizations
go to waste.


180
00:09:34,741 --> 00:09:37,044 line:-1
Tell the system when you are done.


181
00:09:37,110 --> 00:09:40,247 line:-2
This allows the system
to immediately suspend your app


182
00:09:40,314 --> 00:09:42,249 line:-1
and enter a lower power state.


183
00:09:43,684 --> 00:09:48,188 line:-2
For Background App Refresh tasks,
this means calling setTaskCompleted.


184
00:09:48,255 --> 00:09:51,391 line:-2
For other APIs,
it means calling a completion handler.


185
00:09:52,125 --> 00:09:55,295 line:-2
The other budget to optimize for
is the cellular data budget.


186
00:09:56,230 --> 00:09:59,867 line:-2
Try to limit your downloads
to what's necessary for a fresh UI.


187
00:10:00,501 --> 00:10:04,204 line:-2
For example, download thumbnails
instead of full-size images.


188
00:10:04,771 --> 00:10:06,540 line:-1
And enqueue the rest of your downloads


189
00:10:06,607 --> 00:10:09,710 line:-2
as a URLSession discretionary
background transfer


190
00:10:09,776 --> 00:10:11,545 line:-1
for completion at a better time.


191
00:10:12,179 --> 00:10:15,582 line:-2
Try to keep your cellular data usage
under a hundred kilobytes


192
00:10:15,649 --> 00:10:17,417 line:-1
each time your app refreshes.


193
00:10:18,118 --> 00:10:21,255 line:-2
This is a good target to use
for Background App Refresh tasks


194
00:10:21,321 --> 00:10:23,323 line:-1
as well as for background pushes.


195
00:10:23,991 --> 00:10:26,093 line:-1
Now let's talk about background pushes.


196
00:10:26,827 --> 00:10:29,429 line:-2
Background pushes
are pushes that wake up your app


197
00:10:29,496 --> 00:10:32,399 line:-2
without a visible notification
to the user.


198
00:10:33,000 --> 00:10:35,202 line:-2
They are great
for when you have new content,


199
00:10:35,269 --> 00:10:37,571 line:-2
but it's not immediately important
to the user.


200
00:10:38,372 --> 00:10:41,675 line:-2
For example,
a message to a muted conversation


201
00:10:41,742 --> 00:10:44,144 line:-1
or an email to an unimportant in-box


202
00:10:44,211 --> 00:10:47,714 line:-2
or even as a trigger
to initiate a discretionary download


203
00:10:47,781 --> 00:10:49,783 line:-1
for a new episode of a TV show.


204
00:10:50,884 --> 00:10:54,354 line:-2
The seven factors come into play
for background pushes as well


205
00:10:54,855 --> 00:10:57,824 line:-1
except for one: app usage.


206
00:10:57,891 --> 00:11:01,862 line:-2
The system does not gate
background pushes based on app usage.


207
00:11:02,496 --> 00:11:04,531 line:-1
One common question we hear is,


208
00:11:04,598 --> 00:11:07,534 line:-2
"How does rate-limiting apply
to background pushes?"


209
00:11:08,035 --> 00:11:09,803 line:-1
Let's take a look at that.


210
00:11:09,870 --> 00:11:11,505 line:-1
Here's the timeline again,


211
00:11:11,572 --> 00:11:13,907 line:-2
and let's hone in
on an early part of the day.


212
00:11:15,242 --> 00:11:16,977 line:-1
Say in a given window,


213
00:11:17,044 --> 00:11:20,214 line:-2
you send 14 pushes
with a few denser clusters.


214
00:11:21,315 --> 00:11:24,084 line:-1
You may expect a launch upon every push.


215
00:11:24,718 --> 00:11:28,655 line:-2
But running this frequently could cause
significant battery-life issues,


216
00:11:28,722 --> 00:11:29,857 line:-1
and on top of that,


217
00:11:29,923 --> 00:11:34,061 line:-2
it could lead to exhausting the energy
and data budgets early in the day.


218
00:11:34,795 --> 00:11:38,999 line:-2
Just imagine if that one chatty Messages
conversation you muted


219
00:11:39,066 --> 00:11:42,102 line:-2
caused your app to run
every time you received a message.


220
00:11:43,070 --> 00:11:46,473 line:-2
Instead of running upon every push,
the system does this.


221
00:11:47,407 --> 00:11:49,977 line:-2
The system delays the delivery
of some pushes


222
00:11:50,043 --> 00:11:53,914 line:-2
to limit the amount of execution while
maintaining a frequent launch cadence.


223
00:11:54,615 --> 00:11:58,452 line:-2
So the 14 pushes we had
result in seven launches.


224
00:11:59,019 --> 00:12:00,487 line:-1
And while you might be thinking,


225
00:12:00,554 --> 00:12:03,123 line:-2
"Oh, no.
Only half our pushes are being delivered."


226
00:12:04,291 --> 00:12:07,561 line:-2
Well, the time interval between runs
was just 15 minutes,


227
00:12:08,095 --> 00:12:10,230 line:-1
meaning we had many times per hour,


228
00:12:10,297 --> 00:12:13,233 line:-2
and the app will be up-to-date
before the user launches it.


229
00:12:13,767 --> 00:12:15,369 line:-1
So focus on the launch interval


230
00:12:15,435 --> 00:12:19,373 line:-2
when evaluating your background push
deliveries instead of the delivery rate.


231
00:12:19,940 --> 00:12:21,775 line:-2
Now that we've talked about
background push,


232
00:12:21,842 --> 00:12:24,278 line:-1
let's talk about Background URLSessions.


233
00:12:24,945 --> 00:12:27,714 line:-2
Background URLSessions
are downloads and uploads


234
00:12:27,781 --> 00:12:30,684 line:-2
that are off-loaded
from your app to the system.


235
00:12:31,418 --> 00:12:35,589 line:-2
This is great because it allows transfers
to continue after the app exits,


236
00:12:35,656 --> 00:12:38,425 line:-2
meaning they are unconstrained
by runtime limits.


237
00:12:39,893 --> 00:12:43,397 line:-2
Background URLSessions are perfect
for things like file downloads,


238
00:12:43,463 --> 00:12:47,134 line:-2
photo uploads,
and full-size social media content


239
00:12:47,201 --> 00:12:49,870 line:-2
kicked off
as a result of a background push.


240
00:12:50,437 --> 00:12:54,041 line:-2
There are many different parameters
you can configure for your download.


241
00:12:54,107 --> 00:12:56,877 line:-2
One important one
is you can prevent the transfer


242
00:12:56,944 --> 00:12:59,980 line:-2
from going over cellular
and other expensive links.


243
00:13:01,315 --> 00:13:04,918 line:0
Another important parameter is
sessionSendsLaunchEvents.


244
00:13:04,985 --> 00:13:08,522 line:0
Setting this to "Yes" requests
that the system launch your app


245
00:13:08,589 --> 00:13:10,858 line:0
after the background transfer is complete.


246
00:13:12,693 --> 00:13:15,662 line:-2
There are two main types
of background URLSessions:


247
00:13:15,729 --> 00:13:18,665 line:-1
discretionary and nondiscretionary.


248
00:13:18,732 --> 00:13:22,102 line:-2
You signal this
by setting the isDiscretionary property.


249
00:13:22,803 --> 00:13:27,608 line:-2
Discretionary background transfers
are transfers you are okay with deferring.


250
00:13:27,674 --> 00:13:32,012 line:-2
The system will perform discretionary
transfers when conditions are optimal,


251
00:13:32,079 --> 00:13:34,848 line:-2
perhaps when the phone is plugged in
and on Wi-Fi.


252
00:13:36,016 --> 00:13:40,821 line:-2
Nondiscretionary transfers are transfers
you want to occur as soon as possible,


253
00:13:40,888 --> 00:13:43,824 line:-2
perhaps because the user
hit a download button in your app.


254
00:13:44,525 --> 00:13:47,628 line:-2
If you enqueue a transfer
while the app is in the background,


255
00:13:47,694 --> 00:13:52,633 line:-2
the system will ignore the isDiscretionary
property and treat it as true.


256
00:13:52,699 --> 00:13:55,969 line:-2
From the foreground,
you can optionally request discretionary.


257
00:13:57,271 --> 00:14:01,408 line:-2
For discretionary transfers,
most of the seven factors apply,


258
00:14:01,475 --> 00:14:04,077 line:-1
but there aren't app usage requirements,


259
00:14:04,144 --> 00:14:07,548 line:-2
nor does the system impose rate limits
on the transfers you enqueue.


260
00:14:09,082 --> 00:14:11,618 line:-2
If you requested
sessionSendsLaunchEvents,


261
00:14:11,685 --> 00:14:14,755 line:-2
it will attempt to launch you
if conditions permit.


262
00:14:14,821 --> 00:14:16,857 line:-1
Distinct from the transfers,


263
00:14:16,924 --> 00:14:20,027 line:-2
we have some basic rate-limiting
for the launches.


264
00:14:20,093 --> 00:14:22,396 line:-2
If the app was brought foreground
recently,


265
00:14:22,462 --> 00:14:24,298 line:-1
rate-limiting won't apply.


266
00:14:24,965 --> 00:14:28,836 line:-2
For nondiscretionary transfers
that you've enqueued in the foreground,


267
00:14:28,902 --> 00:14:31,805 line:-2
the transfer continues
after you dismiss the app.


268
00:14:32,306 --> 00:14:35,242 line:0
For these,
only two of the seven factors apply.


269
00:14:35,943 --> 00:14:39,880 line:0
Users can stop transfers by swiping
to kill the app in the App Switcher.


270
00:14:40,447 --> 00:14:42,950 line:0
And there are indeed some system budgets,


271
00:14:43,016 --> 00:14:46,320 line:0
but they are greatly relaxed and unlikely
to get in your way.


272
00:14:48,222 --> 00:14:51,491 line:-2
And again, if you requested
sessionSendsLaunchEvents,


273
00:14:51,558 --> 00:14:54,294 line:-2
the launches will follow five
of the seven factors.


274
00:14:54,728 --> 00:14:58,065 line:-2
Since these sessions were enqueued
while the app was foreground,


275
00:14:58,131 --> 00:15:00,901 line:-2
rate-limiting due to app usage
won't happen.


276
00:15:02,002 --> 00:15:06,273 line:-2
Last, there is one more specific run mode
we want to cover:


277
00:15:06,773 --> 00:15:08,642 line:-1
background processing tasks.


278
00:15:09,276 --> 00:15:13,313 line:-2
Background processing tasks give your app
several minutes' worth of runtime


279
00:15:13,380 --> 00:15:16,116 line:-2
at system-friendly times
to do maintenance work,


280
00:15:16,183 --> 00:15:18,051 line:-1
like indexing a database.


281
00:15:18,118 --> 00:15:22,556 line:-2
You can also do intensive work
like on-device Core ML training.


282
00:15:23,323 --> 00:15:25,325 line:-1
Given these are long-running tasks,


283
00:15:25,392 --> 00:15:30,030 line:-2
the system will wait to run you until
the user is not actively using the device,


284
00:15:30,097 --> 00:15:31,965 line:-1
such as when it's charging at night.


285
00:15:33,367 --> 00:15:36,803 line:-2
So how do the seven factors apply
to background processing tasks?


286
00:15:37,638 --> 00:15:39,973 line:-2
Since you're going to be running
while plugged in,


287
00:15:40,040 --> 00:15:42,609 line:-2
you won't have to worry
about critically low battery,


288
00:15:42,676 --> 00:15:45,379 line:-2
Low Power Mode,
or the system energy budget.


289
00:15:46,113 --> 00:15:50,250 line:-2
With regard to app usage, the user
doesn't need to use your app every day


290
00:15:50,317 --> 00:15:52,319 line:-1
for your processing tasks to run.


291
00:15:52,386 --> 00:15:55,589 line:-2
As long as they've brought the app
foreground in the past couple of weeks,


292
00:15:55,656 --> 00:15:56,657 line:-1
you should be fine.


293
00:15:56,723 --> 00:16:01,028 line:-2
The App Switcher and Background App
Refresh switches are still gating factors,


294
00:16:01,094 --> 00:16:05,499 line:-2
so as to prevent the app from
running unexpectedly, against user intent.


295
00:16:06,433 --> 00:16:10,737 line:-2
And with regard to rate limits,
as long as the user plugs in every day,


296
00:16:10,804 --> 00:16:14,041 line:-2
your background processing tasks
should be able to run daily.


297
00:16:14,508 --> 00:16:16,410 line:-1
Now that you've learned the seven factors


298
00:16:16,476 --> 00:16:19,046 line:-2
and how they apply
to specific background modes,


299
00:16:19,112 --> 00:16:21,515 line:-1
think about how they apply to your app.


300
00:16:21,582 --> 00:16:24,318 line:-2
Remember,
you can check the state of user switches,


301
00:16:24,384 --> 00:16:27,254 line:-2
such as Low Power Mode
and Background App Refresh,


302
00:16:27,321 --> 00:16:29,957 line:-2
in order to respond gracefully
to user intent.


303
00:16:31,191 --> 00:16:33,827 line:-2
And now that you understand
the differences between these modes,


304
00:16:33,894 --> 00:16:38,265 line:-2
reevaluate whether you are choosing
the right mode for a specific job.


305
00:16:38,332 --> 00:16:40,634 line:-1
This could even mean using multiple modes.


306
00:16:41,935 --> 00:16:44,471 line:-1
Finally, the power is in your hands.


307
00:16:44,538 --> 00:16:47,107 line:-1
If you reduce energy and data usage,


308
00:16:47,174 --> 00:16:49,543 line:-2
then you can maximize
your app's freshness,


309
00:16:49,610 --> 00:16:52,880 line:-2
maintain great battery life,
preserve data plans,


310
00:16:52,946 --> 00:16:56,550 line:-2
and overall deliver
a mystically delightful experience.


311
00:16:56,617 --> 00:16:57,618 line:-1
Thanks for watching.

