1
00:00:03,804 --> 00:00:06,939 line:-1
Hello and welcome to WWDC.


2
00:00:07,574 --> 00:00:11,745 line:0
Hello and welcome to
"Introducing StoreKit Testing in Xcode."


3
00:00:11,812 --> 00:00:14,615 line:0
My name is Dana,
and I'm really excited to show you


4
00:00:14,681 --> 00:00:17,951 line:0
all the great new features
we're introducing this year


5
00:00:18,018 --> 00:00:21,922 line:0
that will make building and testing
in-app purchases better than ever.


6
00:00:22,456 --> 00:00:24,658 line:-1
But before we get into what's new,


7
00:00:24,725 --> 00:00:27,828 line:-2
let's quickly review
how developers work with StoreKit


8
00:00:27,895 --> 00:00:30,731 line:-2
to add in-app purchases
to their apps today.


9
00:00:31,532 --> 00:00:34,067 line:-2
Currently,
if I'm looking to update my app,


10
00:00:34,134 --> 00:00:36,436 line:-2
either to begin selling content
through StoreKit


11
00:00:36,503 --> 00:00:38,438 line:-1
or to add new content to sell,


12
00:00:38,505 --> 00:00:42,809 line:-2
one of the very first steps I have to take
is to sign into App Store Connect.


13
00:00:42,876 --> 00:00:46,613 line:-2
There, I need to register my app,
define my in-app purchases


14
00:00:46,680 --> 00:00:49,383 line:-2
and create my Sandbox accounts
for testing.


15
00:00:49,449 --> 00:00:52,920 line:-2
Only after I've taken those steps
can I go back to Xcode


16
00:00:52,986 --> 00:00:56,757 line:-2
and start writing the code
to integrate StoreKit within my app.


17
00:00:58,492 --> 00:01:01,595 line:0
As I'm building up my app, I'll be working
with the Sandbox environment


18
00:01:01,662 --> 00:01:03,430 line:0
to test my in-app purchases


19
00:01:03,931 --> 00:01:07,501 line:0
using one of the Sandbox accounts
I set up in App Store Connect.


20
00:01:07,568 --> 00:01:11,438 line:0
There, I won't be charged
as purchases are made during my testing.


21
00:01:12,239 --> 00:01:15,609 line:0
Additionally,
when I hand off my app to be beta tested,


22
00:01:15,676 --> 00:01:20,480 line:0
the Sandbox environment will continue to
be used by developers working with my app.


23
00:01:21,949 --> 00:01:25,085 line:0
Only after I've verified
my app works as expected


24
00:01:25,152 --> 00:01:27,454 line:0
will I release my app to the App Store,


25
00:01:27,521 --> 00:01:30,858 line:0
where the production environment is used
to back all StoreKit calls.


26
00:01:31,892 --> 00:01:33,660 line:-1
This has worked well in the past,


27
00:01:33,727 --> 00:01:36,263 line:-2
but we think we can do better for you,
our developers.


28
00:01:36,330 --> 00:01:39,366 line:-2
I'm excited to announce this year,
with Xcode 12,


29
00:01:39,433 --> 00:01:42,202 line:-2
we're introducing
a new development and testing suite


30
00:01:42,269 --> 00:01:45,405 line:-2
dedicated to StoreKit
and in-app purchases.


31
00:01:45,472 --> 00:01:47,341 line:-2
This will allow you to start
right in Xcode


32
00:01:47,407 --> 00:01:51,378 line:-2
to build and test your app's
in-app purchase entirely locally.


33
00:01:52,246 --> 00:01:54,214 line:-1
This is all integrated right into Xcode,


34
00:01:54,281 --> 00:01:57,484 line:-2
so it works seamlessly
with your app's development workflow.


35
00:01:58,185 --> 00:02:01,889 line:-2
Additionally, we're introducing
a brand-new StoreKit test framework


36
00:02:01,955 --> 00:02:06,393 line:-2
that will unlock the full automation
testing for your StoreKit integration.


37
00:02:07,694 --> 00:02:10,697 line:-2
This changes the entire
development life cycle for StoreKit.


38
00:02:10,764 --> 00:02:14,101 line:-2
Now, instead of starting in App Store
Connect, you can start right in Xcode.


39
00:02:15,335 --> 00:02:16,737 line:-1
Build out your StoreKit integration


40
00:02:16,803 --> 00:02:19,506 line:-2
at the same time
you're building out the rest of your app.


41
00:02:21,074 --> 00:02:23,677 line:0
Add in unit, UI and other automation tests


42
00:02:23,744 --> 00:02:27,714 line:0
to make sure the quality of your app's
StoreKit integration remains high,


43
00:02:28,515 --> 00:02:32,719 line:0
then sign in to App Store Connect
and begin using the Sandbox environment.


44
00:02:33,453 --> 00:02:36,190 line:0
Working with Sandbox
is a critical step you need to take


45
00:02:36,256 --> 00:02:40,394 line:0
to make sure your app is ready to be
released to your users in the App Store.


46
00:02:40,460 --> 00:02:42,229 line:0
It's also the environment you need to use


47
00:02:42,296 --> 00:02:46,166 line:0
to test out any server-to-server
functionality required for your app.


48
00:02:46,834 --> 00:02:49,436 line:0
Additionally, we're adding
a number of great enhancements


49
00:02:49,503 --> 00:02:51,505 line:0
to the Sandbox environment this year


50
00:02:51,572 --> 00:02:55,042 line:0
that my colleague Chris will go
into more detail later on in the session.


51
00:02:59,746 --> 00:03:03,617 line:-2
Let's dive in and take a closer look
at StoreKit testing in Xcode 12.


52
00:03:04,384 --> 00:03:07,688 line:-2
The app I'm building, Fruta,
is all about fruit smoothies,


53
00:03:07,754 --> 00:03:09,489 line:-1
and the feature I'm working on now


54
00:03:09,556 --> 00:03:12,459 line:-2
is around selling recipes
for those smoothies.


55
00:03:12,860 --> 00:03:15,162 line:-1
StoreKit is the right technology to use,


56
00:03:15,229 --> 00:03:19,099 line:-2
as those recipes are digital content
I want to offer within my app.


57
00:03:19,166 --> 00:03:20,634 line:-1
I've already configured Fruta


58
00:03:20,701 --> 00:03:24,104 line:-2
to fetch and render those store products
for the recipes.


59
00:03:24,171 --> 00:03:29,376 line:-2
If I navigate to Store.swift, where I keep
most of the store content within my app,


60
00:03:29,443 --> 00:03:32,479 line:-2
you can see
I have a list of product identifiers


61
00:03:32,546 --> 00:03:34,815 line:-2
for all the different recipes
I want to sell.


62
00:03:35,983 --> 00:03:39,553 line:-2
Further down,
within the fetchProducts function...


63
00:03:41,054 --> 00:03:45,926 line:-2
I have a SKProductsRequest call
where I'm passing in


64
00:03:45,993 --> 00:03:49,663 line:-2
all the product identifiers
from those recipes.


65
00:03:51,632 --> 00:03:54,968 line:-2
Fruta should be ready to go
for fetching and rendering those products,


66
00:03:55,035 --> 00:03:57,771 line:-2
so let's launch it in the simulator
and see what happens.


67
00:04:00,841 --> 00:04:03,777 line:-2
As you can see,
none of my recipes are showing.


68
00:04:03,844 --> 00:04:06,113 line:-2
But this is expected
because I've not yet configured


69
00:04:06,180 --> 00:04:09,216 line:-2
my app or in-app purchases
within App Store Connect.


70
00:04:09,283 --> 00:04:13,320 line:-2
And by default,
StoreKit is using the Sandbox environment,


71
00:04:13,387 --> 00:04:16,557 line:-2
so I need to enable local testing
within Xcode.


72
00:04:16,623 --> 00:04:21,028 line:-2
To do that, I first need to define
my in-app products inside my project.


73
00:04:21,862 --> 00:04:24,031 line:-1
First, I navigate up to the file menu.


74
00:04:26,033 --> 00:04:27,568 line:-1
Create a new file.


75
00:04:29,069 --> 00:04:34,241 line:-2
There I'll type in "StoreKit" and select
the StoreKit configuration file template.


76
00:04:35,008 --> 00:04:39,146 line:-2
And I'll just create a new configuration
file right inside my project.


77
00:04:39,746 --> 00:04:43,150 line:-2
I now have a place to store the metadata
for all my in-app products,


78
00:04:43,217 --> 00:04:45,352 line:-1
the recipes that my app will offer.


79
00:04:45,419 --> 00:04:47,454 line:-2
In the bottom left-hand corner
of this editor,


80
00:04:47,521 --> 00:04:50,624 line:-2
I have the option
to add StoreKit items to this file.


81
00:04:51,959 --> 00:04:55,762 line:0
As I select that, I'm given a choice
over which type of product to add.


82
00:04:55,829 --> 00:04:58,365 line:0
The first option is for consumable,


83
00:04:58,432 --> 00:05:01,435 line:0
which is a type of product
that you can buy over and over again,


84
00:05:01,502 --> 00:05:04,438 line:0
such as lives or gems within a game.


85
00:05:04,505 --> 00:05:09,710 line:0
The second is for a non-consumable,
which are purchased once and never expire.


86
00:05:10,377 --> 00:05:13,146 line:0
Lastly,
we have auto-renewable subscriptions,


87
00:05:13,213 --> 00:05:17,551 line:0
where users are charged periodically
for access to services or content.


88
00:05:17,618 --> 00:05:19,987 line:0
I'm going to choose to create
a non-consumable,


89
00:05:20,053 --> 00:05:23,524 line:0
as that makes the most sense
for purchasing digital recipes.


90
00:05:25,926 --> 00:05:29,463 line:-2
I now need to fill out the details
for the recipe I want to sell.


91
00:05:30,163 --> 00:05:34,635 line:-2
In this case, I'm gonna choose Berry Blue,
as it's my favorite smoothie.


92
00:05:38,472 --> 00:05:42,809 line:-2
The product ID is a unique identifier
for this specific product within my app,


93
00:05:42,876 --> 00:05:47,848 line:-2
and it needs to match the value that
my app will pass into the StoreKit APIs.


94
00:05:47,915 --> 00:05:51,785 line:-2
To make sure I get it right, I'm gonna
copy and paste it from Store.swift.


95
00:06:05,132 --> 00:06:07,201 line:-1
Next, I need to set a price.


96
00:06:07,267 --> 00:06:10,737 line:-2
Unlike in App Store Connect,
where I can choose from a price tier,


97
00:06:10,804 --> 00:06:13,473 line:-2
here I'm given the option
to enter in any decimal value.


98
00:06:13,907 --> 00:06:16,710 line:-2
This is because
for StoreKit testing in Xcode,


99
00:06:16,777 --> 00:06:19,913 line:-2
the price is simply used
for setting what value is returned


100
00:06:19,980 --> 00:06:22,816 line:-2
in the SKProduct
that is handed back to my app.


101
00:06:23,283 --> 00:06:26,420 line:-2
So here I have direct control
over the value, and I can easily change it


102
00:06:26,486 --> 00:06:29,523 line:-2
to make sure my app can handle
any possible value returned.


103
00:06:29,590 --> 00:06:32,326 line:-2
For now,
I'm going to leave it as 99 cents.


104
00:06:33,327 --> 00:06:36,930 line:-2
Additionally, I have the option
to enable Family Sharing.


105
00:06:37,264 --> 00:06:39,766 line:-2
This is a brand-new feature
we're releasing this year.


106
00:06:40,167 --> 00:06:43,704 line:-2
For the purposes of StoreKit testing
in Xcode, enabling Family Sharing


107
00:06:43,770 --> 00:06:47,774 line:-2
will update the is-family-shareable flag
on the SKProduct.


108
00:06:48,242 --> 00:06:49,810 line:-1
I'm gonna leave that unset.


109
00:06:50,878 --> 00:06:54,982 line:-2
Lastly, I need to give this product
a localized name within my app.


110
00:07:03,557 --> 00:07:06,927 line:-2
I can also set a description,
but for now I'm gonna leave that blank.


111
00:07:08,028 --> 00:07:10,297 line:-2
Now that I've set up
my StoreKit configuration,


112
00:07:10,364 --> 00:07:14,835 line:-2
I need to tell Xcode to use it
instead of Sandbox when launching my app.


113
00:07:14,902 --> 00:07:18,372 line:-2
Doing that is easy
as opening up the scheme editor...


114
00:07:20,374 --> 00:07:25,179 line:-2
and under "run options," selecting
that configuration I just created.


115
00:07:26,547 --> 00:07:28,649 line:-1
Now when I relaunch my app,


116
00:07:29,149 --> 00:07:32,286 line:-2
StoreKit is using
the local test environment...


117
00:07:33,587 --> 00:07:36,890 line:-2
and the SKProduct
returns the metadata I've configured.


118
00:07:38,125 --> 00:07:40,894 line:-2
Earlier, I skipped setting a description
for Berry Blue,


119
00:07:40,961 --> 00:07:42,763 line:-1
but I want a description to show up,


120
00:07:42,829 --> 00:07:45,799 line:-2
and Fruta's already set up
to take the localized description


121
00:07:45,866 --> 00:07:47,901 line:-1
from the SKProduct and display it.


122
00:07:48,402 --> 00:07:51,505 line:-2
StoreKit testing in Xcode
is entirely interactive,


123
00:07:51,572 --> 00:07:54,408 line:-2
meaning I can update the metadata
for my app's products


124
00:07:54,474 --> 00:07:56,877 line:-1
without recompiling or even relaunching.


125
00:07:56,944 --> 00:07:59,379 line:-2
I just need to update
the StoreKit configuration file


126
00:07:59,446 --> 00:08:01,114 line:-1
to have the description I want...


127
00:08:12,292 --> 00:08:15,429 line:-2
and have my app re-execute
the SKProduct request


128
00:08:15,495 --> 00:08:17,831 line:-1
to pull down the updated metadata.


129
00:08:19,633 --> 00:08:22,102 line:-2
My project already contained
a StoreKit configuration


130
00:08:22,169 --> 00:08:24,238 line:-2
that has all the recipes
I will be selling,


131
00:08:24,304 --> 00:08:27,441 line:-2
so I'm gonna quickly switch over
to that file and relaunch my app.


132
00:08:39,620 --> 00:08:42,890 line:-2
My app is already configured
to take the SKProduct that we fetched


133
00:08:42,956 --> 00:08:46,960 line:-2
and use it to create an SKPayment
and add it to the payment queue.


134
00:08:47,027 --> 00:08:50,330 line:-2
To exercise that code, I just need
to select one of the "buy" buttons.


135
00:08:52,666 --> 00:08:54,768 line:-2
Right here in the simulator,
I get a payment sheet


136
00:08:54,835 --> 00:08:56,870 line:-1
a lot like what my users will see.


137
00:08:56,937 --> 00:08:59,573 line:-2
The big difference here
is that I didn't need to sign in,


138
00:08:59,640 --> 00:09:01,775 line:-1
and there is no need to authenticate.


139
00:09:01,842 --> 00:09:05,145 line:-2
Since this is just for testing purposes
and I won't be charged,


140
00:09:05,212 --> 00:09:09,116 line:-2
I simply select "confirm,"
and the payment goes through.


141
00:09:11,952 --> 00:09:13,453 line:-1
Just like Sandbox or Production,


142
00:09:13,520 --> 00:09:15,956 line:-2
my app's payment transaction observer
is updated


143
00:09:16,023 --> 00:09:18,959 line:-2
as the transaction goes from "purchasing"
to "purchased."


144
00:09:19,026 --> 00:09:22,129 line:-2
I'm even given a receipt
that my app can verify.


145
00:09:22,196 --> 00:09:25,999 line:-2
Berry Blue is now unlocked,
and I can navigate in and see the recipe.


146
00:09:27,100 --> 00:09:30,604 line:-2
Let's say I had an issue where I needed
to purchase Berry Blue all over again,


147
00:09:30,671 --> 00:09:34,942 line:-2
possibly to fix a bug or to change
the experience around purchasing.


148
00:09:35,809 --> 00:09:40,180 line:-2
Xcode makes that really easy with the new
StoreKit Transaction Manager.


149
00:09:43,417 --> 00:09:46,320 line:-2
I see all of the purchases
I made in the local test environment,


150
00:09:46,386 --> 00:09:48,255 line:-1
and I have full control over them.


151
00:09:48,322 --> 00:09:50,691 line:-1
I'm able to delete this transaction...


152
00:09:52,860 --> 00:09:55,696 line:-2
and reset state
as if the purchase never happened.


153
00:09:59,166 --> 00:10:03,003 line:-2
I can now buy Berry Blue again
as if I'd never purchased it before.


154
00:10:10,911 --> 00:10:13,514 line:-2
In addition to being able to delete
previous purchases,


155
00:10:13,580 --> 00:10:15,782 line:-1
I have the ability to simulate a refund.


156
00:10:15,849 --> 00:10:19,987 line:-2
In the case of a refund, the transaction
remains in the transaction manager


157
00:10:20,053 --> 00:10:21,955 line:-1
but is marked as refunded.


158
00:10:27,694 --> 00:10:30,564 line:-2
The transaction also remains
in the app's receipt


159
00:10:30,631 --> 00:10:33,033 line:-2
but is updated
to contain a cancellation date


160
00:10:33,100 --> 00:10:34,668 line:-1
for when the refund occurred.


161
00:10:35,135 --> 00:10:39,873 line:-2
Again, my app is informed about the refund
and is able to respond immediately.


162
00:10:40,841 --> 00:10:43,544 line:-2
If you want to make sure your app
has a great experience for kids,


163
00:10:43,610 --> 00:10:45,946 line:-2
who need to get permission
before making purchases,


164
00:10:46,013 --> 00:10:49,249 line:-2
StoreKit testing in Xcode has full support
for Ask to Buy.


165
00:10:49,650 --> 00:10:53,220 line:-2
It's easy as going back
to your StoreKit configuration file


166
00:10:53,287 --> 00:10:56,356 line:-2
and enabling Ask to Buy
under the editor menu.


167
00:11:01,762 --> 00:11:04,231 line:-2
Now when I go to purchase a recipe
within Fruta,


168
00:11:04,298 --> 00:11:07,501 line:-1
I see the same "ask permission" dialogue


169
00:11:07,568 --> 00:11:11,972 line:-2
that'll be presented to any user who has
Ask to Buy turned on for their account.


170
00:11:15,742 --> 00:11:20,781 line:-2
When I select "Ask," the transaction
appears as "pending approval"


171
00:11:20,848 --> 00:11:22,883 line:-1
within the transaction manager.


172
00:11:22,950 --> 00:11:26,653 line:-2
And in code,
my app's SKPaymentTransactionObserver


173
00:11:26,720 --> 00:11:30,457 line:-2
is informed that the transaction
is now in a deferred state.


174
00:11:34,027 --> 00:11:36,230 line:-1
I can now approve or decline it.


175
00:11:37,064 --> 00:11:38,365 line:-1
Once I approve,


176
00:11:38,432 --> 00:11:42,236 line:-2
the previously deferred transaction
is updated to a purchased state,


177
00:11:42,302 --> 00:11:46,173 line:-2
and my app updates right away
to show the unlocked recipe.


178
00:11:47,474 --> 00:11:50,711 line:-2
I also have the option to enable
interrupted purchases.


179
00:11:50,777 --> 00:11:52,513 line:-1
This will allow me to simulate the case


180
00:11:52,579 --> 00:11:54,982 line:-2
where a user needs to take some action
on their account


181
00:11:55,048 --> 00:11:57,384 line:-1
before being able to complete a purchase.


182
00:11:57,451 --> 00:11:59,186 line:-2
For example,
they may need to update details


183
00:11:59,253 --> 00:12:01,588 line:-2
related to their account's
billing information.


184
00:12:02,189 --> 00:12:05,092 line:-2
In this case, the initial purchase
will come back as "failed."


185
00:12:05,158 --> 00:12:06,493 line:-1
But once the user's taken action


186
00:12:06,560 --> 00:12:09,162 line:-2
to resolve whatever issue
caused the interruption,


187
00:12:09,229 --> 00:12:12,866 line:-2
a new transaction for the same product
will be added to the payment queue.


188
00:12:14,935 --> 00:12:18,105 line:-2
I've been considering changing
the business model of my application


189
00:12:18,172 --> 00:12:19,973 line:-1
to be subscription-based.


190
00:12:20,541 --> 00:12:23,977 line:-2
For one monthly price, users will have
access to all the smoothie recipes


191
00:12:24,044 --> 00:12:26,580 line:-2
instead of needing to buy them
one at a time.


192
00:12:26,647 --> 00:12:28,815 line:-2
StoreKit testing in Xcode
makes it really easy


193
00:12:28,882 --> 00:12:31,552 line:-2
to build auto-renewable subscriptions
with StoreKit.


194
00:12:32,653 --> 00:12:36,056 line:-2
I've already created
a second StoreKit configuration file...


195
00:12:37,324 --> 00:12:40,394 line:-2
that contains two different subscriptions
I want to offer in my app.


196
00:12:40,894 --> 00:12:42,930 line:-1
First, Recipes Plus,


197
00:12:42,996 --> 00:12:46,099 line:-2
which is configured to renew
at a monthly price of 2.99.


198
00:12:49,169 --> 00:12:50,871 line:-1
To make it even more compelling,


199
00:12:50,938 --> 00:12:55,475 line:-2
I've set up an introductory offer
of 99 cents for the first month.


200
00:12:56,743 --> 00:13:00,113 line:-1
I've also created a Recipes Pro option,


201
00:13:00,180 --> 00:13:02,583 line:-2
which not only unlocks
all the recipes in my app,


202
00:13:02,649 --> 00:13:04,117 line:-1
but gives subscribers access


203
00:13:04,184 --> 00:13:06,887 line:-2
to advanced nutrition facts
for each smoothie.


204
00:13:08,155 --> 00:13:12,259 line:-2
The two subscriptions are contained
in the same Subscription group,


205
00:13:12,326 --> 00:13:17,364 line:-2
enabling my app to offer upgrade options
between Recipes Plus and Recipes Pro.


206
00:13:18,131 --> 00:13:20,767 line:-2
I've already built Fruta
to work with these subscriptions,


207
00:13:20,834 --> 00:13:22,736 line:-1
so to try out that business model,


208
00:13:22,803 --> 00:13:25,138 line:-2
I just need to switch
StoreKit configurations


209
00:13:25,205 --> 00:13:26,607 line:-1
and relaunch my app.


210
00:13:37,951 --> 00:13:41,221 line:-2
Here, my app is displaying details
about both the subscription offers,


211
00:13:41,288 --> 00:13:44,291 line:-2
including the introductory offer
on Recipes Plus.


212
00:13:45,292 --> 00:13:47,127 line:-2
I want to make sure my app
correctly handles


213
00:13:47,194 --> 00:13:49,062 line:-1
when my subscription auto-renews,


214
00:13:49,129 --> 00:13:51,632 line:-2
but I don't want to wait
a full month to test it.


215
00:13:51,698 --> 00:13:54,768 line:-2
With StoreKit testing in Xcode,
I have the power to speed up time.


216
00:13:55,335 --> 00:13:58,238 line:-2
In the Editor menu
of my Subscription Configuration...


217
00:14:01,175 --> 00:14:02,910 line:-1
I select Time Rate,


218
00:14:03,577 --> 00:14:06,380 line:-1
and I can set one second to be one day.


219
00:14:06,980 --> 00:14:10,250 line:-2
This will change it so I only have to wait
seconds for that renewal to occur


220
00:14:10,317 --> 00:14:11,885 line:-1
instead of an entire month.


221
00:14:24,498 --> 00:14:28,468 line:-2
Now that I've purchased that subscription,
all the recipes are unlocked.


222
00:14:31,638 --> 00:14:35,375 line:-2
And I won't have to wait very long
for the recipe auto-renewing subscription


223
00:14:35,442 --> 00:14:36,944 line:-1
to automatically renew.


224
00:14:39,313 --> 00:14:42,115 line:-2
Earlier, as I was working
with the Transaction Manager


225
00:14:42,182 --> 00:14:44,151 line:-1
to delete and refund purchases,


226
00:14:44,218 --> 00:14:48,222 line:-2
my app immediately updated
to revoke access to those recipes.


227
00:14:48,956 --> 00:14:51,124 line:-1
This was made possible in iOS 14


228
00:14:51,191 --> 00:14:55,329 line:-2
thanks to a new API we added
on SKPaymentTransactionObserver:


229
00:14:56,029 --> 00:14:58,699 line:-2
didRevokeEntitlements-
ForProductIdentifiers.


230
00:15:00,200 --> 00:15:01,835 line:0
To learn more about this API


231
00:15:01,902 --> 00:15:05,172 line:0
and all of the other new features
we've added to StoreKit this year,


232
00:15:05,239 --> 00:15:09,042 line:0
I highly suggest you check out
"What's New with In-App Purchases."


233
00:15:11,445 --> 00:15:14,982 line:-2
To enable you to authenticate
the purchased content in your app,


234
00:15:15,482 --> 00:15:18,485 line:-2
the App Store provides
a digitally signed receipt.


235
00:15:19,152 --> 00:15:24,157 line:-2
The receipt is the trusted record
of purchases made by the user in your app.


236
00:15:25,359 --> 00:15:29,162 line:-2
It's stored on the device
and updated automatically by the system.


237
00:15:29,730 --> 00:15:32,666 line:-2
It is signed, so you know
that it came from the App Store


238
00:15:32,733 --> 00:15:35,335 line:-1
and was meant for your app on that device.


239
00:15:36,837 --> 00:15:40,908 line:0
If you want to learn more on how to verify
the receipt, I recommend checking out


240
00:15:40,974 --> 00:15:45,546 line:0
"Best Practices and What's New
with In-App Purchases" from 2018.


241
00:15:46,914 --> 00:15:48,949 line:0
But I do want to highlight
some key differences


242
00:15:49,016 --> 00:15:52,753 line:0
you need to keep in mind
when working with the receipts generated


243
00:15:52,819 --> 00:15:56,390 line:-2
by the local
Xcode StoreKitTest environment.


244
00:15:56,456 --> 00:15:59,326 line:-2
First, they're signed
with a different private key


245
00:15:59,393 --> 00:16:01,528 line:-2
than what is used
for the receipts generated


246
00:16:01,595 --> 00:16:03,931 line:-1
in the Sandbox or production environments.


247
00:16:05,132 --> 00:16:08,101 line:-2
That means you need to use
a different certificate when validating.


248
00:16:08,569 --> 00:16:13,040 line:-2
We provide a convenient way
to export that StoreKitTest certificate


249
00:16:13,607 --> 00:16:18,212 line:-2
into your project via the editor menu
of your StoreKit configuration file.


250
00:16:19,546 --> 00:16:24,117 line:-2
Lastly, the StoreKitTest certificate
is not part of a certificate chain.


251
00:16:24,918 --> 00:16:26,553 line:-1
To accommodate for those differences,


252
00:16:26,620 --> 00:16:30,958 line:-2
you should make use of the DEBUG macro
within your client-side validation code.


253
00:16:31,358 --> 00:16:35,662 line:-2
Here you can see where my code is choosing
between the StoreKitTestCertificate


254
00:16:36,163 --> 00:16:39,566 line:-2
and the AppleIncRootCertificate
based on that macro.


255
00:16:40,767 --> 00:16:44,638 line:-2
Additionally, if I use OpenSSL
for my client-side receipt validation,


256
00:16:44,705 --> 00:16:49,109 line:-2
I would pass in the PKCS7_NOCHAIN
argument,


257
00:16:49,176 --> 00:16:51,011 line:-1
but only when building for DEBUG.


258
00:16:51,979 --> 00:16:53,780 line:-1
StoreKit testing in Xcode 12


259
00:16:53,847 --> 00:16:57,017 line:-2
works great on all of the OS betas
that we just released,


260
00:16:57,384 --> 00:16:59,520 line:-2
both when building and running
in the simulator,


261
00:16:59,586 --> 00:17:01,688 line:-1
as well as on real devices.


262
00:17:02,489 --> 00:17:05,826 line:-2
I walked you through setting up
your project's StoreKit configuration,


263
00:17:05,893 --> 00:17:08,095 line:-1
enabling the local test environment,


264
00:17:08,862 --> 00:17:13,099 line:-2
using the Transaction Manager
to delete and refund previous purchases,


265
00:17:13,165 --> 00:17:15,301 line:-2
and making sure your app
has a great experience


266
00:17:15,368 --> 00:17:17,704 line:-1
for deferred or interrupted purchases...


267
00:17:18,771 --> 00:17:21,074 line:-1
and purchases that renew automatically.


268
00:17:22,342 --> 00:17:25,078 line:-2
But as critical as it is
for you to be able to build and test


269
00:17:25,145 --> 00:17:27,114 line:-1
your StoreKit integration manually,


270
00:17:27,181 --> 00:17:29,917 line:-2
it's just as important
for you to build automation


271
00:17:29,983 --> 00:17:32,819 line:-2
that continuously tests
your in-app purchases.


272
00:17:33,954 --> 00:17:37,658 line:-2
Which is why we're introducing
a brand new StoreKitTest framework


273
00:17:37,724 --> 00:17:42,095 line:-2
that enables you in code to control
the full local test environment.


274
00:17:42,796 --> 00:17:46,333 line:-2
All of the controls that you had manually
are exposed inside your tests.


275
00:17:47,167 --> 00:17:52,072 line:-2
StoreKitTest works with XCTest
for extending unit and UI test coverage


276
00:17:52,139 --> 00:17:53,574 line:-1
to your in-app purchases.


277
00:17:54,408 --> 00:17:57,511 line:-2
Additionally, with StoreKitTest,
you have the ability to disable


278
00:17:57,578 --> 00:18:00,614 line:-2
all of the sheets and dialogues
that would normally appear,


279
00:18:00,681 --> 00:18:04,251 line:-2
so your test can run to completion
without waiting for user interaction.


280
00:18:04,852 --> 00:18:08,856 line:-2
Lastly, you have the ability to trigger
the renewal of a subscription right away,


281
00:18:08,922 --> 00:18:11,291 line:-2
so your test can validate
your app's subscription features


282
00:18:11,358 --> 00:18:13,527 line:-1
continue to work across renewals.


283
00:18:16,063 --> 00:18:19,233 line:-2
StoreKitTest can be used
to cover a wide range of cases,


284
00:18:19,299 --> 00:18:22,836 line:-2
including your app's handling
of both successful and failed purchases,


285
00:18:22,903 --> 00:18:24,938 line:-1
interrupted and deferred purchases,


286
00:18:25,005 --> 00:18:28,008 line:-2
transactions that initiate
outside the running of your app,


287
00:18:28,075 --> 00:18:30,677 line:-2
as well as all sorts of cases
related to subscriptions.


288
00:18:32,045 --> 00:18:34,648 line:-2
Let's go back into Xcode
and run through an example.


289
00:18:36,016 --> 00:18:39,253 line:-2
In Fruta, I've already built out
a series of unit tests


290
00:18:39,319 --> 00:18:41,855 line:-2
covering cases
related to in-app purchases.


291
00:18:42,923 --> 00:18:45,659 line:-1
The first one is a basic test case...


292
00:18:46,660 --> 00:18:52,266 line:-2
that ensures my app correctly unlocks
the "That's Berry Bananas" smoothie recipe


293
00:18:52,332 --> 00:18:54,468 line:-1
when successfully purchased by a user.


294
00:18:55,002 --> 00:18:58,805 line:-2
The very first thing it does
is create a new StoreKitTest session


295
00:18:59,373 --> 00:19:04,244 line:-2
initialized with the NonConsumable
StoreKit configuration file.


296
00:19:04,611 --> 00:19:08,682 line:-2
It's important to remember to include
the configuration file in the test targets


297
00:19:08,749 --> 00:19:11,585 line:-2
so that it's referencable
by SKTestSession.


298
00:19:12,319 --> 00:19:15,355 line:-2
Next,
I'm disabling all dialogues on my session


299
00:19:15,422 --> 00:19:18,358 line:-2
so that my test can run to completion
without user interaction.


300
00:19:19,159 --> 00:19:21,862 line:-2
After that,
I'm clearing all previous transactions,


301
00:19:21,929 --> 00:19:24,431 line:-2
so I know that I'm starting
from a clear state.


302
00:19:25,666 --> 00:19:29,269 line:-2
Finally, my test buys the recipe
and confirms that it's available.


303
00:19:42,216 --> 00:19:44,585 line:-2
"Test succeeded,"
so I know I'm good to go.


304
00:19:44,885 --> 00:19:48,856 line:-2
At this point, I can begin the process
of getting my app and in-app purchases


305
00:19:48,922 --> 00:19:50,724 line:-1
ready to be available on the App Store.


306
00:19:51,391 --> 00:19:54,528 line:-2
The critical next step
is sign into App Store Connect,


307
00:19:54,595 --> 00:19:58,065 line:-2
set up everything the App Store needs
to support my in-app purchases,


308
00:19:58,632 --> 00:20:01,902 line:-2
and test that configuration
using the Sandbox environment.


309
00:20:02,603 --> 00:20:05,305 line:-2
To tell you about
all the great enhancements and features


310
00:20:05,372 --> 00:20:08,509 line:-2
we are bringing to Sandbox,
I'm gonna hand it off to Chris.


311
00:20:09,610 --> 00:20:10,611 line:-1
Thanks, Dana.


312
00:20:10,677 --> 00:20:13,213 line:-2
Hi. I'm Chris,
a program manager for the App Store.


313
00:20:13,947 --> 00:20:15,816 line:-1
We saw how StoreKit testing in Xcode


314
00:20:15,883 --> 00:20:19,119 line:-2
enables you to perform early testing
and debugging of in-app purchases


315
00:20:19,186 --> 00:20:20,587 line:-1
in a local test environment.


316
00:20:21,288 --> 00:20:23,957 line:-2
There are key differences
between StoreKit testing in Xcode


317
00:20:24,024 --> 00:20:26,026 line:-1
and testing in the Sandbox environment.


318
00:20:26,860 --> 00:20:29,897 line:-2
First, you set up in-app purchases
in App Store Connect.


319
00:20:30,430 --> 00:20:32,165 line:-1
This is the same product information


320
00:20:32,232 --> 00:20:34,568 line:-2
your app uses
when it's available on the App Store.


321
00:20:35,602 --> 00:20:38,939 line:-2
And you'll create a Sandbox Apple ID
to sign into your test device.


322
00:20:40,274 --> 00:20:42,876 line:-2
In Sandbox,
app receipts are signed by the App Store.


323
00:20:43,944 --> 00:20:46,947 line:-2
Sandbox also supports
server-side receipt validation


324
00:20:47,481 --> 00:20:49,550 line:-1
and App Store server notifications.


325
00:20:51,084 --> 00:20:55,055 line:-2
In iOS 12, we added a Sandbox
account section in App Store Settings...


326
00:20:56,056 --> 00:20:57,991 line:-1
for signing into a Sandbox account,


327
00:20:58,058 --> 00:21:00,294 line:-2
an account you set up
in App Store Connect.


328
00:21:01,395 --> 00:21:04,231 line:-2
In iOS 14,
it's easier to test your in-app purchases


329
00:21:04,298 --> 00:21:05,766 line:-1
and subscriptions in Sandbox.


330
00:21:06,500 --> 00:21:10,370 line:-2
A new Manage option leads you into the new
Sandbox Manage Subscriptions page...


331
00:21:11,738 --> 00:21:14,708 line:-2
where you can view and test
your subscriptions in Sandbox.


332
00:21:15,876 --> 00:21:17,778 line:-1
Tapping into our Fruta app,


333
00:21:17,845 --> 00:21:20,447 line:-2
we see all subscriptions
within the Subscription group.


334
00:21:21,515 --> 00:21:24,384 line:-2
You may have used this page on production
as a subscriber


335
00:21:24,451 --> 00:21:28,222 line:-2
for selecting a different subscription,
to upgrade, downgrade or cancel.


336
00:21:29,189 --> 00:21:31,525 line:-2
Now this page is available to you
as a developer


337
00:21:31,592 --> 00:21:34,127 line:-2
to test your subscription tiers
in the Sandbox environment.


338
00:21:34,695 --> 00:21:39,166 line:-2
We added the ability to reset introductory
offer eligibility for a subscription.


339
00:21:40,467 --> 00:21:43,203 line:-2
With this,
you can use the same Sandbox test account


340
00:21:43,270 --> 00:21:45,606 line:-2
to test free trials
or introductory offers.


341
00:21:45,672 --> 00:21:48,342 line:-2
You no longer need to set up
a new Sandbox Apple ID


342
00:21:48,408 --> 00:21:50,944 line:-2
each time you want to re-test
an introductory offer.


343
00:21:52,913 --> 00:21:54,982 line:-2
Here's an example
of a subscription life cycle.


344
00:21:55,649 --> 00:21:57,851 line:-1
With this new functionality in Sandbox,


345
00:21:57,918 --> 00:22:01,388 line:-2
you can test common subscription changes
which happen outside of your app,


346
00:22:01,855 --> 00:22:03,524 line:-1
including customer actions,


347
00:22:03,991 --> 00:22:06,760 line:-2
such as a downgrade,
an upgrade or a cancellation.


348
00:22:07,661 --> 00:22:11,798 line:-2
You can test server logic for subscriber
status change notification types,


349
00:22:11,865 --> 00:22:14,801 line:-1
such as Did_Change_Renewal_Status


350
00:22:15,435 --> 00:22:17,171 line:-1
and Did_Renew,


351
00:22:17,237 --> 00:22:20,574 line:-2
a new notification type
coming later this year in production


352
00:22:20,641 --> 00:22:22,376 line:-1
which you'll also receive in Sandbox.


353
00:22:23,544 --> 00:22:25,445 line:0
To learn more
about server notification types,


354
00:22:25,512 --> 00:22:28,815 line:0
please refer to the session
"What's New with In-App Purchase."


355
00:22:29,917 --> 00:22:31,552 line:-1
Coming soon to App Store Connect,


356
00:22:31,618 --> 00:22:35,489 line:-2
Sandbox accounts will be able to test
interrupted purchases on a device.


357
00:22:36,223 --> 00:22:38,992 line:-2
To use this,
select a row for a Sandbox Apple ID.


358
00:22:40,093 --> 00:22:41,495 line:-1
Selecting Cindy's account.


359
00:22:42,029 --> 00:22:45,065 line:-2
Check the box to enable
interrupted purchases, then save.


360
00:22:46,700 --> 00:22:50,404 line:-2
Now Cindy can test interrupted purchases
in Sandbox on an iOS device.


361
00:22:51,705 --> 00:22:55,309 line:-2
A scenario would be needing to agree
to updated terms and conditions


362
00:22:55,375 --> 00:22:56,877 line:-1
before completing the purchase.


363
00:22:58,011 --> 00:23:00,347 line:-2
Purchases on a device
will continue to be interrupted


364
00:23:00,414 --> 00:23:02,649 line:-1
for an individual Sandbox account


365
00:23:03,217 --> 00:23:05,085 line:-1
until you return to App Store Connect


366
00:23:05,152 --> 00:23:07,788 line:-2
and disable Interrupted Purchases
for each tester.


367
00:23:08,956 --> 00:23:11,625 line:-1
Let's review the new iOS 14 subscription


368
00:23:11,692 --> 00:23:14,194 line:-2
and in-app purchase testing functionality
in Sandbox.


369
00:23:15,329 --> 00:23:18,031 line:-2
On a device, you can now view
and manage subscriptions.


370
00:23:18,799 --> 00:23:21,835 line:-2
You can also test upgrades, downgrades,
cancellations,


371
00:23:21,902 --> 00:23:24,505 line:-1
and reset introductory offer eligibility.


372
00:23:25,439 --> 00:23:27,441 line:-1
Soon you'll be able to test on a device


373
00:23:27,508 --> 00:23:30,143 line:-2
how your app responds
to an interrupted purchase.


374
00:23:31,678 --> 00:23:34,648 line:-2
Lastly, in App Store Connect,
users with the developer role


375
00:23:34,715 --> 00:23:37,751 line:-2
will be able to create and manage
Sandbox tester accounts.


376
00:23:38,619 --> 00:23:40,554 line:-1
Testing in the Sandbox environment


377
00:23:40,621 --> 00:23:43,590 line:-2
is a great way to improve
your app's handling of in-app purchases


378
00:23:43,657 --> 00:23:45,492 line:-1
before releasing into production.


379
00:23:45,993 --> 00:23:47,461 line:-1
For a recap, here's Dana.


380
00:23:48,662 --> 00:23:49,663 line:-1
Thanks, Chris.


381
00:23:50,130 --> 00:23:52,432 line:-2
There's a clear path
for building and releasing


382
00:23:52,499 --> 00:23:54,635 line:-1
high-quality apps that use StoreKit.


383
00:23:55,169 --> 00:23:59,139 line:-2
Start in Xcode 12 and use
the interactive local test environment


384
00:23:59,206 --> 00:24:01,141 line:-1
to build out your StoreKit integration.


385
00:24:03,677 --> 00:24:06,747 line:-2
Use the StoreKitTest framework
to build tests and automation


386
00:24:06,813 --> 00:24:09,616 line:-2
to ensure the quality
of your app's subscription


387
00:24:09,683 --> 00:24:11,485 line:-1
and in-app purchase functionality.


388
00:24:12,753 --> 00:24:14,621 line:-1
Sign into App Store Connect,


389
00:24:14,688 --> 00:24:17,991 line:-2
set up everything the App Store needs
to support your in-app purchases,


390
00:24:18,058 --> 00:24:21,428 line:-2
and test that configuration
using the Sandbox environment.


391
00:24:21,862 --> 00:24:25,766 line:-2
Additionally, use Sandbox to test
all server-to-server functionality


392
00:24:25,832 --> 00:24:27,301 line:-1
required for your app.


393
00:24:28,502 --> 00:24:31,071 line:-2
Take advantage of TestFlight
to get beta testing coverage


394
00:24:31,138 --> 00:24:35,075 line:-2
of both your app and its subscription
or in-app purchase functionality,


395
00:24:35,809 --> 00:24:38,579 line:-2
and then make your app live
on the App Store.


396
00:24:39,146 --> 00:24:40,147 line:-1
Thanks again,


397
00:24:40,214 --> 00:24:43,317 line:-2
and we look forward to seeing
the great apps you're gonna release.

