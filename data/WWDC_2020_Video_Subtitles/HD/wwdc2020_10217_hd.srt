1
00:00:03,804 --> 00:00:07,441 line:-1
Hello and welcome to WWDC.


2
00:00:07,508 --> 00:00:11,345 line:0
Hello and welcome to
Explore Numerical Computing in Swift.


3
00:00:11,411 --> 00:00:14,147 line:-2
My name is Tim Kientzle.
I'm with the Swift Runtime team,


4
00:00:14,214 --> 00:00:16,416 line:-2
and I'd like to talk to you
about recent improvements


5
00:00:16,483 --> 00:00:18,886 line:-2
to floating-point numerics support
in Swift.


6
00:00:18,952 --> 00:00:21,989 line:-2
I'll start by introducing
the Swift Numerics package.


7
00:00:22,055 --> 00:00:23,156 line:-1
Among other features,


8
00:00:23,223 --> 00:00:25,425 line:-2
this package includes
a protocol called "Real"


9
00:00:25,492 --> 00:00:27,828 line:-2
and a fully-functional
Complex number type.


10
00:00:27,895 --> 00:00:30,964 line:-2
Then I'll describe the new
high-performance Float16 type


11
00:00:31,031 --> 00:00:34,134 line:-2
that we've added to the Swift Core
language and standard libraries.


12
00:00:34,201 --> 00:00:37,171 line:0
Let's start by looking at
the Numerics package as a whole.


13
00:00:38,238 --> 00:00:39,439 line:-1
The Swift Numerics package


14
00:00:39,506 --> 00:00:42,809 line:-2
is an open-source Swift development effort
hosted on GitHub.com.


15
00:00:43,544 --> 00:00:46,380 line:-2
It's designed to make it easy
to implement numeric algorithms


16
00:00:46,446 --> 00:00:49,216 line:-2
that work with any standard
floating-point type.


17
00:00:49,283 --> 00:00:51,785 line:-2
It does this by making
the standard floating-point types


18
00:00:51,852 --> 00:00:54,788 line:-2
usable with Swift's generic
programming facilities.


19
00:00:56,023 --> 00:00:59,259 line:-2
To see how this works, let's assume
you're working on some project


20
00:00:59,326 --> 00:01:00,928 line:-1
where you discover you need to use


21
00:01:00,994 --> 00:01:04,531 line:0
the common logit or log-odds function
from probability theory.


22
00:01:05,699 --> 00:01:09,203 line:0
You start by defining a logit function
that takes and returns a Double.


23
00:01:10,170 --> 00:01:11,371 line:0
To implement this function,


24
00:01:11,438 --> 00:01:14,441 line:0
you import the log and log1p
functions from the Darwin module.


25
00:01:15,576 --> 00:01:20,180 line:0
This code works,
but there's one small wrinkle.


26
00:01:20,247 --> 00:01:23,116 line:0
This is written to only support Double.


27
00:01:23,684 --> 00:01:27,154 line:0
Some day you might want to
use it with Float or maybe Float80.


28
00:01:27,221 --> 00:01:29,356 line:0
With a one-liner like this,
it's no big deal


29
00:01:29,423 --> 00:01:32,125 line:0
to just make another copy of it,


30
00:01:32,993 --> 00:01:35,696 line:0
but what if a new floating-point type
gets added in the future?


31
00:01:35,762 --> 00:01:37,764 line:0
How do you handle types like Float80


32
00:01:37,831 --> 00:01:41,001 line:0
that are only available
on certain platforms?


33
00:01:41,068 --> 00:01:44,638 line:0
And of course, if this function
were hundreds of lines,


34
00:01:44,705 --> 00:01:46,540 line:0
then duplication would create problems.


35
00:01:47,107 --> 00:01:51,678 line:0
Someone might correct a bug in one copy
but fail to correctly edit the other copy.


36
00:01:52,246 --> 00:01:54,348 line:0
This could get to be quite a mess.


37
00:01:55,082 --> 00:01:59,152 line:0
So let's instead try to define logit
as a generic function


38
00:01:59,219 --> 00:02:01,188 line:0
that can work with
any floating-point type.


39
00:02:02,089 --> 00:02:04,458 line:0
Here's a reasonable first attempt.


40
00:02:04,525 --> 00:02:06,560 line:0
Unfortunately, this won't compile.


41
00:02:07,928 --> 00:02:10,297 line:0
The problem is
that we've told the compiler


42
00:02:10,364 --> 00:02:12,866 line:0
that this function works for any type.


43
00:02:13,467 --> 00:02:17,137 line:0
But of course the log and log1p
functions aren't defined for every type.


44
00:02:17,204 --> 00:02:20,674 line:0
They only make sense
for a handful of floating-point types.


45
00:02:21,275 --> 00:02:24,378 line:0
So we need some way
to constrain the type T


46
00:02:24,444 --> 00:02:27,381 line:0
to only the types
that are actual floating-point types


47
00:02:27,447 --> 00:02:29,716 line:0
with actual log functions available.


48
00:02:30,484 --> 00:02:33,754 line:0
Instead, let's import the Numerics module.


49
00:02:34,221 --> 00:02:38,725 line:0
By importing the Numerics module,
we get access to the Real protocol,


50
00:02:38,792 --> 00:02:41,895 line:0
which provides all the necessary support
for this kind of programming.


51
00:02:41,962 --> 00:02:44,064 line:0
Using that,
we can define our logit function


52
00:02:44,131 --> 00:02:47,534 line:0
so it works for any fully-functional
floating-point type.


53
00:02:48,168 --> 00:02:49,870 line:0
We also need to use the generic forms


54
00:02:49,937 --> 00:02:53,407 line:0
of log and logonePlus
that are exposed by the Numerics module.


55
00:02:54,441 --> 00:02:58,378 line:0
This implementation of logit works
for every standard floating-point type.


56
00:02:58,445 --> 00:03:00,814 line:0
If new floating-point types
get added in the future,


57
00:03:00,881 --> 00:03:04,551 line:0
this code will support them
without requiring any changes.


58
00:03:04,618 --> 00:03:08,388 line:0
This even works for Float80,
on the platforms that support Float80,


59
00:03:08,455 --> 00:03:11,158 line:0
without you having to figure out
the magic conditionals.


60
00:03:12,025 --> 00:03:15,429 line:0
The key to this is the Real protocol.


61
00:03:16,063 --> 00:03:18,031 line:-1
Let's take a closer look at that.


62
00:03:20,534 --> 00:03:22,536 line:-1
Types that conform to the Real protocol


63
00:03:22,603 --> 00:03:25,772 line:-2
support all the standard
floating-point capabilities.


64
00:03:26,340 --> 00:03:29,510 line:-2
Real does this
by combining several other protocols,


65
00:03:29,576 --> 00:03:31,411 line:-1
as you can see in the definition here.


66
00:03:31,478 --> 00:03:32,746 line:-1
This definition, by the way,


67
00:03:32,813 --> 00:03:35,749 line:-2
is exactly the one that you can see
in the Numerics source code.


68
00:03:36,850 --> 00:03:39,152 line:-2
The FloatingPoint protocol
from the standard library


69
00:03:39,219 --> 00:03:41,088 line:-1
is one key component here.


70
00:03:41,655 --> 00:03:44,858 line:-2
Two other protocols,
AlgebraicField and RealFunctions,


71
00:03:44,925 --> 00:03:48,128 line:-2
are new protocols
defined by the Numerics package.


72
00:03:48,195 --> 00:03:52,299 line:-2
But before I dive into details of those,
I want to reiterate


73
00:03:52,366 --> 00:03:55,836 line:-2
that the Real protocol
is the one you should actually use.


74
00:03:56,303 --> 00:03:59,239 line:-2
I'm going to describe how these
other protocols fit together


75
00:03:59,306 --> 00:04:01,308 line:-2
because I think it helps
to better understand


76
00:04:01,375 --> 00:04:03,844 line:-2
the range of capabilities
that Real brings to the table.


77
00:04:03,911 --> 00:04:07,648 line:-2
And of course, if you ever need
to define a new numeric type,


78
00:04:07,714 --> 00:04:11,251 line:-2
you'll probably want to decompose
your implementation along these lines.


79
00:04:11,919 --> 00:04:16,490 line:-2
But for most of you, the Real protocol is
the only one you'll routinely work with.


80
00:04:17,357 --> 00:04:19,726 line:-2
With that in mind,
let's review the protocols


81
00:04:19,793 --> 00:04:22,930 line:-2
that are already present
in the Swift standard library.


82
00:04:24,064 --> 00:04:26,400 line:-2
The Swift standard library
defines a lot of protocols


83
00:04:26,466 --> 00:04:28,702 line:-2
that apply to the standard
floating-point types.


84
00:04:28,769 --> 00:04:32,206 line:-2
This diagram shows just a few
of the more important ones.


85
00:04:33,006 --> 00:04:35,943 line:-2
For this talk,
I'm only interested in three of these:


86
00:04:36,009 --> 00:04:40,013 line:-2
AdditiveArithmetic, SignedNumeric
and FloatingPoint.


87
00:04:40,948 --> 00:04:45,018 line:-2
AdditiveArithmetic applies to types
that support addition and subtraction.


88
00:04:45,085 --> 00:04:46,320 line:-1
This covers almost anything


89
00:04:46,386 --> 00:04:48,989 line:-2
that can reasonably claim
to be some form of number


90
00:04:49,056 --> 00:04:51,758 line:-2
and corresponds nicely
to what mathematicians refer to


91
00:04:51,825 --> 00:04:53,527 line:-1
as an "algebraic group."


92
00:04:56,230 --> 00:05:00,868 line:-2
SignedNumeric extends that
with a concept of multiplication.


93
00:05:03,604 --> 00:05:05,839 line:-2
Finally, FloatingPoint
adds various notions


94
00:05:05,906 --> 00:05:10,110 line:-2
that are needed for any practical computer
floating-point number implementation,


95
00:05:10,177 --> 00:05:11,778 line:-1
including comparison functions,


96
00:05:11,845 --> 00:05:15,182 line:-2
a way to decompose numbers
into exponent and significand,


97
00:05:15,249 --> 00:05:16,783 line:-1
as well as useful constants,


98
00:05:16,850 --> 00:05:20,988 line:-2
like the largest and smallest value,
infinity, pi and so on.


99
00:05:23,257 --> 00:05:27,094 line:-2
The Numerics package
builds on these core concepts.


100
00:05:28,195 --> 00:05:33,467 line:-2
The first protocol here augments
SignedNumeric with a notion of division.


101
00:05:33,534 --> 00:05:37,538 line:-2
Mathematicians refer to number systems
that support all four basic operations


102
00:05:37,604 --> 00:05:40,841 line:-2
as "algebraic fields",
which inspired the name.


103
00:05:43,110 --> 00:05:45,312 line:-1
The ElementaryFunctions protocol


104
00:05:45,612 --> 00:05:49,716 line:-2
specifies a large collection
of common floating-point functions,


105
00:05:49,783 --> 00:05:51,418 line:-1
including core trig functions,


106
00:05:51,485 --> 00:05:54,755 line:-2
as well as logarithms,
exponentials, roots and powers.


107
00:05:56,523 --> 00:06:00,827 line:0
The RealFunctions protocol
extends this even further


108
00:06:00,894 --> 00:06:04,231 line:0
with many less-used functions,
such as the gamma and error functions,


109
00:06:04,298 --> 00:06:06,800 line:0
as well as variations
of the common trig functions.


110
00:06:08,936 --> 00:06:11,371 line:0
The Real protocol combines all of these


111
00:06:11,438 --> 00:06:14,942 line:0
into a single unifying concept
that neatly defines


112
00:06:15,008 --> 00:06:18,478 line:0
the common capabilities
of the standard floating-point types.


113
00:06:19,179 --> 00:06:23,817 line:0
Any type that conforms to the Real
protocol is a floating-point type...


114
00:06:24,985 --> 00:06:28,088 line:0
that supports all
the standard arithmetic operations...


115
00:06:28,789 --> 00:06:33,026 line:0
and has a full repertoire
of common mathematical functions...


116
00:06:34,761 --> 00:06:36,463 line:0
which is how the Numerics package


117
00:06:36,530 --> 00:06:39,833 line:0
makes the standard floating-point types
more usable than ever.


118
00:06:40,934 --> 00:06:44,638 line:-2
Fundamentally, the Real protocol
is a simple concept


119
00:06:44,705 --> 00:06:46,240 line:-1
that is very powerful in practice.


120
00:06:46,306 --> 00:06:48,308 line:-2
It lets you use generic
programming techniques


121
00:06:48,375 --> 00:06:50,077 line:-1
to define your floating-point code


122
00:06:50,143 --> 00:06:54,114 line:-2
in a way that automatically supports
every standard floating-point type.


123
00:06:54,948 --> 00:06:58,352 line:-2
And it's built on top of
a set of interlocking protocols


124
00:06:58,418 --> 00:07:01,555 line:-2
that should make it easy to define
new numeric types.


125
00:07:02,055 --> 00:07:07,394 line:-2
Now, let us turn to the complex number
support provided by the Numerics package.


126
00:07:08,795 --> 00:07:11,131 line:0
The Complex type
in the Swift Numerics package


127
00:07:11,198 --> 00:07:15,202 line:0
is a fully-featured implementation
of a standard complex number type.


128
00:07:15,269 --> 00:07:18,605 line:0
To use it, just import
the Numerics package into your program.


129
00:07:19,039 --> 00:07:22,276 line:0
Because the Complex type
is generic over the Real protocol,


130
00:07:22,342 --> 00:07:24,311 line:0
it works for any floating-point type.


131
00:07:24,378 --> 00:07:28,815 line:0
In this example, the constants
1.0 and 2.0 default to Double,


132
00:07:28,882 --> 00:07:31,451 line:0
so "Z" here is a Complex Double.


133
00:07:31,518 --> 00:07:33,820 line:0
As always, Swift infers the type for you


134
00:07:33,887 --> 00:07:36,957 line:0
so you generally
can just omit the type annotation.


135
00:07:38,292 --> 00:07:41,428 line:-2
The Complex number type
is useful in itself,


136
00:07:41,662 --> 00:07:44,431 line:-2
but it's also a great example
of how the Real protocol


137
00:07:44,498 --> 00:07:47,000 line:-1
enables generic numeric programming.


138
00:07:47,601 --> 00:07:50,103 line:-1
The basic type is defined a lot like this.


139
00:07:50,170 --> 00:07:53,774 line:-2
A complex number has both real
and imaginary components


140
00:07:53,841 --> 00:07:57,077 line:-2
and a way to create new complex numbers
from those components.


141
00:07:57,711 --> 00:08:02,749 line:-2
Those components can be any NumberType
that conforms to the Real protocol.


142
00:08:04,518 --> 00:08:06,553 line:-1
To make complex numbers fully functional,


143
00:08:06,620 --> 00:08:09,356 line:-2
we need to define
the standard arithmetic operations.


144
00:08:09,423 --> 00:08:13,527 line:-2
Here are the basic addition, subtraction
and multiplication operations


145
00:08:13,727 --> 00:08:17,798 line:-2
as required by the SignedNumeric protocol
we discussed a little while ago.


146
00:08:19,900 --> 00:08:23,003 line:-2
Complex numbers are often
expressed in polar coordinates--


147
00:08:23,070 --> 00:08:26,340 line:-2
that is, in terms of a length
and a phase angle.


148
00:08:26,940 --> 00:08:30,210 line:-2
Because the real and imaginary components
are floating-point types


149
00:08:30,277 --> 00:08:32,179 line:-1
that conform to the Real protocol,


150
00:08:32,246 --> 00:08:33,947 line:-1
we automatically get everything we need


151
00:08:34,014 --> 00:08:37,083 line:-2
to expose those length
and phase properties.


152
00:08:37,150 --> 00:08:40,587 line:-2
The length is defined in terms
of the standard hypotenuse function,


153
00:08:40,654 --> 00:08:43,957 line:-2
the phase in terms of
the standard arctangent function.


154
00:08:44,358 --> 00:08:45,692 line:-1
Other common trig functions


155
00:08:45,759 --> 00:08:49,663 line:-2
let us create new complex numbers
with a specified length and phase.


156
00:08:51,198 --> 00:08:54,801 line:-2
This complex type is a plain struct
holding two floating-point values.


157
00:08:54,868 --> 00:08:57,938 line:-2
As a result, its memory layout
precisely matches


158
00:08:58,005 --> 00:09:01,275 line:-2
that of the C and C++
complex number types.


159
00:09:01,842 --> 00:09:06,013 line:-2
So complex numbers in memory look
exactly the same in all three languages.


160
00:09:06,079 --> 00:09:08,549 line:-2
You can create a buffer
full of complex numbers in Swift


161
00:09:08,615 --> 00:09:12,252 line:-2
and pass a pointer
to that buffer to a C or C++ library


162
00:09:12,319 --> 00:09:15,956 line:-2
that expects the corresponding
C or C++ complex type.


163
00:09:17,191 --> 00:09:18,492 line:-1
To see how this works,


164
00:09:18,559 --> 00:09:21,828 line:-2
let's look at an example
using Accelerate's implementation


165
00:09:21,895 --> 00:09:24,765 line:-1
of the Basic Linear Algebra Subroutines.


166
00:09:25,399 --> 00:09:28,101 line:-2
The first part of this example
just creates an array


167
00:09:28,168 --> 00:09:32,673 line:-2
of 100 Complex Double values
using a common Swift idiom.


168
00:09:32,873 --> 00:09:35,342 line:-1
Now we can use the ampersand operator


169
00:09:35,409 --> 00:09:39,279 line:-2
to pass a pointer to this array
directly into the Accelerate API.


170
00:09:40,013 --> 00:09:43,984 line:0
This particular function accepts
an array of Complex Doubles,


171
00:09:44,051 --> 00:09:47,688 line:0
computes the Euclidean 2-norm
and returns a Double.


172
00:09:49,857 --> 00:09:53,193 line:-2
Especially when
porting code from C or C++,


173
00:09:53,260 --> 00:09:56,797 line:-2
you may need to be careful
when dealing with infinity or NaN values.


174
00:09:57,564 --> 00:10:00,801 line:-2
There have been different styles
over the years for how these should work.


175
00:10:00,868 --> 00:10:04,905 line:-2
It's not surprising that C and C++
use the same style as each other.


176
00:10:04,972 --> 00:10:08,442 line:-2
After all, their complex number support
was standardized at about the same time.


177
00:10:09,276 --> 00:10:12,179 line:-2
Swift however uses
a slightly different convention


178
00:10:12,246 --> 00:10:16,683 line:-2
that is simpler
and significantly more performant.


179
00:10:17,684 --> 00:10:20,654 line:-2
To see the difference,
here's a basic benchmark program


180
00:10:20,721 --> 00:10:24,558 line:-2
that just performs a bunch
of complex multiplications and divisions.


181
00:10:25,259 --> 00:10:26,627 line:-1
With this program,


182
00:10:26,693 --> 00:10:31,665 line:-2
multiplication is about 1.3 times
faster in Swift than in C.


183
00:10:32,232 --> 00:10:35,435 line:-1
Division is almost 4 times faster.


184
00:10:35,736 --> 00:10:39,439 line:-2
And if you can arrange your work
so that you are dividing by a constant,


185
00:10:39,506 --> 00:10:44,144 line:-2
then you'll find that division in Swift
can be over 10 times faster.


186
00:10:45,679 --> 00:10:48,048 line:-2
I hope the previous sections
have given you a taste


187
00:10:48,115 --> 00:10:51,451 line:-2
of what we're trying to accomplish
with the Swift Numerics package.


188
00:10:51,518 --> 00:10:53,720 line:-1
This is a work in progress.


189
00:10:53,787 --> 00:10:56,823 line:-2
The package is being developed
as a community effort on GitHub,


190
00:10:56,890 --> 00:10:59,493 line:-2
and there are active discussions
about where to take it in the future.


191
00:11:00,327 --> 00:11:02,362 line:-1
New features are added regularly.


192
00:11:02,663 --> 00:11:05,899 line:-2
This has recently included
improved handling of integer powers


193
00:11:05,966 --> 00:11:09,002 line:-2
and some new tools
for dealing with approximate equality.


194
00:11:09,837 --> 00:11:13,607 line:-2
There are also active discussions
about how to extend the library


195
00:11:13,674 --> 00:11:16,043 line:-2
with support for
arbitrary-precision integers,


196
00:11:16,109 --> 00:11:18,645 line:-1
shaped arrays and decimal floating-point.


197
00:11:19,079 --> 00:11:22,616 line:-2
If you would like to participate, please
check out the project on GitHub.com


198
00:11:22,683 --> 00:11:24,618 line:-2
or join the discussion
in the Swift Forums.


199
00:11:25,719 --> 00:11:30,357 line:-2
Now, let's turn to the core Swift language
and standard library


200
00:11:30,424 --> 00:11:33,594 line:-1
and the new Float16 data type.


201
00:11:34,928 --> 00:11:38,999 line:0
Float16 is an IEEE 754 standard
floating-point format


202
00:11:39,066 --> 00:11:40,267 line:0
that is new to Swift.


203
00:11:40,334 --> 00:11:42,970 line:0
It's already available in Swift
on ARM-based platforms,


204
00:11:43,036 --> 00:11:46,139 line:0
and we're working with Intel to finalize
the correct calling convention


205
00:11:46,206 --> 00:11:48,075 line:0
before we land this on x86.


206
00:11:48,842 --> 00:11:53,947 line:0
Float16 is in every way a standard
and fully-supported floating-point type.


207
00:11:54,014 --> 00:11:56,817 line:0
It conforms to the core protocols
from the standard library,


208
00:11:56,884 --> 00:11:58,952 line:0
including things like SIMDScalar.


209
00:11:59,253 --> 00:12:02,856 line:0
It conforms to the Real protocol
that I discussed earlier in this talk.


210
00:12:03,223 --> 00:12:05,659 line:0
As you recall, this means that it supports


211
00:12:05,726 --> 00:12:08,929 line:0
all of the standard floating-point
operations and functions.


212
00:12:09,763 --> 00:12:13,867 line:-2
So our earlier diagram that shows
the types that conform to Real


213
00:12:13,934 --> 00:12:15,335 line:-1
now has a fourth type.


214
00:12:16,303 --> 00:12:18,505 line:-2
In the months
since Swift Numerics was released,


215
00:12:18,572 --> 00:12:22,075 line:-2
there are already a number
of projects using the Real protocol


216
00:12:22,142 --> 00:12:25,879 line:-2
to write algorithms that work
across all standard floating-point types.


217
00:12:25,946 --> 00:12:30,851 line:-2
Without any source code changes at all,
those projects already work with Float16.


218
00:12:32,119 --> 00:12:34,188 line:-1
Like any actual numeric format,


219
00:12:34,254 --> 00:12:38,392 line:-2
there are trade-offs to using Float16
instead of some other type.


220
00:12:38,859 --> 00:12:41,862 line:-2
Most of those trade-offs
relate simply to its size.


221
00:12:42,396 --> 00:12:44,131 line:-1
Since it's a smaller data type,


222
00:12:44,198 --> 00:12:47,601 line:-2
you can fit more of them
in a SIMD register or in a page of memory,


223
00:12:47,668 --> 00:12:50,637 line:-2
which directly translates
into improved performance.


224
00:12:50,971 --> 00:12:56,343 line:-2
However, as a smaller data type, it also
has a more limited precision and range.


225
00:12:57,110 --> 00:12:59,313 line:-1
Let's take a careful look at that.


226
00:12:59,646 --> 00:13:04,017 line:-2
As the name suggests,
a Float16 takes just 16 bits or two bytes,


227
00:13:04,084 --> 00:13:06,720 line:-2
as opposed to four bytes
for a single-precision float


228
00:13:06,787 --> 00:13:09,590 line:-2
or eight bytes
for a double-precision value.


229
00:13:10,123 --> 00:13:11,758 line:-1
The smallest value it can represent


230
00:13:11,825 --> 00:13:15,195 line:-2
is around 10 to the minus 8,
which is generally not a concern.


231
00:13:15,629 --> 00:13:19,600 line:-2
However, the maximum value
that a Float16 can represent


232
00:13:19,666 --> 00:13:21,969 line:-1
is a little more than 65,000.


233
00:13:22,302 --> 00:13:24,872 line:-2
This can be a problem
for many applications,


234
00:13:24,938 --> 00:13:27,875 line:-2
and it's something you should be
careful with when translating code


235
00:13:27,941 --> 00:13:32,246 line:-2
that was originally implemented
for Double or Float to work with Float16.


236
00:13:33,514 --> 00:13:37,384 line:-2
On the hardware side,
Float16 is already well-supported.


237
00:13:37,751 --> 00:13:40,487 line:-1
Apple GPUs have used this for a long time,


238
00:13:40,554 --> 00:13:44,424 line:-2
and Apple CPUs have direct support
beginning with A11 Bionic.


239
00:13:45,292 --> 00:13:48,028 line:-1
On older CPUs, we support Float16


240
00:13:48,095 --> 00:13:50,364 line:-1
by simulating the operations using Float.


241
00:13:50,430 --> 00:13:53,500 line:-2
The results are exactly the same,
only a little slower.


242
00:13:54,001 --> 00:13:57,938 line:-2
As I mentioned before, on hardware
that does fully support Float16,


243
00:13:58,005 --> 00:14:01,775 line:-2
you can fit twice as many values
into the same SIMD registers,


244
00:14:01,842 --> 00:14:05,045 line:-2
which generally translates
into a doubling of performance.


245
00:14:05,946 --> 00:14:07,848 line:-1
To see how that plays out in practice,


246
00:14:07,915 --> 00:14:12,386 line:-2
let's look at a simple benchmark
that compares a BNNS convolution


247
00:14:12,452 --> 00:14:17,791 line:-2
computed in single-precision Float,
where we get about 49 gigaflops,


248
00:14:17,858 --> 00:14:20,294 line:-1
to one computed with Float16,


249
00:14:20,360 --> 00:14:25,032 line:-2
which achieves 119 gigaflops,
even more than twice the performance.


250
00:14:27,334 --> 00:14:30,137 line:-2
This talk has discussed
the Swift Numerics package


251
00:14:30,204 --> 00:14:31,939 line:-1
and shown how the Real protocol


252
00:14:32,005 --> 00:14:34,875 line:-2
provides a way to write floating-point
algorithms generically


253
00:14:34,942 --> 00:14:37,244 line:-2
so they work with
all floating-point types.


254
00:14:37,311 --> 00:14:39,446 line:-1
I've also talked about a new complex type


255
00:14:39,513 --> 00:14:43,150 line:-2
that provides
full interoperability with C and C++.


256
00:14:43,217 --> 00:14:46,520 line:-2
And finally, I've introduced
the new Float16 type


257
00:14:46,587 --> 00:14:49,790 line:-2
that improves our support
for high-performance numerics.


258
00:14:50,257 --> 00:14:51,658 line:-1
To get involved, you can visit


259
00:14:51,725 --> 00:14:53,894 line:-1
the Swift Numerics project on GitHub,


260
00:14:53,961 --> 00:14:56,296 line:-2
take a look at the existing
issues and pull requests


261
00:14:56,363 --> 00:14:58,332 line:-1
to understand what work is ongoing


262
00:14:58,398 --> 00:15:00,968 line:-2
and contribute your own ideas
to the group.


263
00:15:01,034 --> 00:15:04,204 line:-2
You can also visit
the Swift Forums at forums.swift.org


264
00:15:04,271 --> 00:15:06,440 line:-2
and look in
the "Related Projects" category


265
00:15:06,507 --> 00:15:09,710 line:-2
to find discussion
specifically about Swift Numerics.


266
00:15:10,611 --> 00:15:13,213 line:-2
I appreciate you joining me
for this look at Swift Numerics,


267
00:15:13,280 --> 00:15:15,215 line:-1
and I hope you enjoy the conference.

