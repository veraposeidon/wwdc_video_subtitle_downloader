1
00:00:03,770 --> 00:00:06,640 line:-1
Hello and welcome to WWDC.


2
00:00:07,941 --> 00:00:12,212 line:0
Hello, everyone. My name is Eric,
and I'll be joined by my colleague Nathan


3
00:00:12,279 --> 00:00:15,015 line:0
to talk about accessibility design
for Mac Catalyst.


4
00:00:15,616 --> 00:00:18,752 line:-2
Mac Catalyst
has been a huge success for Apple.


5
00:00:18,819 --> 00:00:20,621 line:-1
It is incredibly easy to use,


6
00:00:20,687 --> 00:00:23,724 line:-2
and the developer communities
absolutely love it.


7
00:00:23,790 --> 00:00:26,793 line:-2
And we already have some of the best apps
on the App Store


8
00:00:26,860 --> 00:00:28,762 line:-1
that are made of Mac Catalyst.


9
00:00:28,829 --> 00:00:31,131 line:-1
And with all that great work out there,


10
00:00:31,198 --> 00:00:34,635 line:-2
it is important to make your app usable
for all of your customers.


11
00:00:35,169 --> 00:00:39,006 line:-2
And this is what brings us here today
to talk about accessibility.


12
00:00:39,773 --> 00:00:43,710 line:-2
At Apple,
accessibility is one of our core values.


13
00:00:43,777 --> 00:00:48,148 line:-2
We have an array of assistive technologies
on all of our platforms


14
00:00:48,215 --> 00:00:50,651 line:-1
to help people with disabilities.


15
00:00:50,717 --> 00:00:53,554 line:-2
Our accessibility team
has been working so hard


16
00:00:53,620 --> 00:00:57,758 line:-2
to make sure that all the great work
you've done for iOS accessibility


17
00:00:57,824 --> 00:01:00,260 line:-1
are converted to Mac Catalyst.


18
00:01:00,327 --> 00:01:02,629 line:0
So, if you make your iOS app accessible,


19
00:01:02,696 --> 00:01:06,200 line:0
it is automatically accessible
when bringing it to the Mac.


20
00:01:06,266 --> 00:01:09,636 line:0
This is so that you can continue
to think in terms of iOS


21
00:01:09,703 --> 00:01:11,705 line:0
when working on Mac Catalyst apps.


22
00:01:12,105 --> 00:01:16,677 line:-2
We'll first talk about how to optimize
your app experience for keyboard usage


23
00:01:16,743 --> 00:01:19,913 line:-2
by improving focus behavior
and adding keyboard shortcuts.


24
00:01:20,781 --> 00:01:22,883 line:-1
Then we'll walk through what you can do


25
00:01:22,950 --> 00:01:27,588 line:-2
to enhance your app's navigation
efficiency for assistive technologies.


26
00:01:27,654 --> 00:01:30,958 line:-2
And finally, we'll give you some tips
to test accessibility


27
00:01:31,024 --> 00:01:33,460 line:-1
on macOS for Mac Catalyst apps.


28
00:01:34,428 --> 00:01:36,263 line:-1
So let's start with keyboard usage.


29
00:01:36,864 --> 00:01:40,968 line:-2
On macOS, the keyboard isn't just
a supplementary interaction method


30
00:01:41,034 --> 00:01:42,970 line:-1
like it is on iPadOS.


31
00:01:43,036 --> 00:01:47,274 line:-2
Instead, it's the primary medium
users will interact with your app.


32
00:01:47,341 --> 00:01:50,544 line:-2
So the goal is to make
as many functionalities of your app


33
00:01:50,611 --> 00:01:52,179 line:-1
accessible with the keyboard.


34
00:01:52,679 --> 00:01:56,183 line:-2
And the first thing you could do
is to check keyboard focus.


35
00:01:57,117 --> 00:01:59,686 line:-1
Keyboard focus determines which UI element


36
00:01:59,753 --> 00:02:02,789 line:-2
is currently receiving inputs
from the keyboard,


37
00:02:02,856 --> 00:02:06,093 line:-2
and we want to make sure
that all UI elements of app


38
00:02:06,159 --> 00:02:09,896 line:-2
that could be interacted by the user
can become focused.


39
00:02:09,963 --> 00:02:15,269 line:-2
To demonstrate this, we will look at
a sample app called Roasted Beans.


40
00:02:15,335 --> 00:02:19,806 line:-2
It is a spin-off of the Peanut Butter app
that we made accessible in previous years.


41
00:02:20,174 --> 00:02:22,876 line:-2
While our Peanut Butter app
was a great success,


42
00:02:22,943 --> 00:02:25,579 line:-2
many were asking for a way
to find the ideal cup of coffee


43
00:02:25,646 --> 00:02:27,915 line:-1
to enjoy with their peanut butter toast.


44
00:02:28,515 --> 00:02:32,085 line:-2
So having finished building the iOS app
and making it accessible,


45
00:02:32,152 --> 00:02:35,622 line:-2
we now want to bring it to the macOS
using Mac Catalyst.


46
00:02:36,857 --> 00:02:40,227 line:-2
Let's see how this app interacts
with the keyboard.


47
00:02:40,294 --> 00:02:42,930 line:-2
To test this,
we first need to turn on a system setting


48
00:02:42,996 --> 00:02:46,066 line:-2
that enables keyboard interaction
with controls.


49
00:02:46,133 --> 00:02:49,403 line:-2
It is located
in the System Preferences app...


50
00:02:50,504 --> 00:02:55,976 line:-2
the Keyboard section,
and under Shortcuts menu.


51
00:02:56,743 --> 00:03:01,415 line:-2
With the checkbox, use keyboard navigation
to move focus between controls.


52
00:03:02,816 --> 00:03:06,386 line:-2
So go back to our app,
and see what happens if we press tabs.


53
00:03:06,453 --> 00:03:09,556 line:-2
We'll see that the add button
on the right of the navigation bar


54
00:03:09,623 --> 00:03:11,959 line:-1
now has a focus ring around it.


55
00:03:12,759 --> 00:03:16,029 line:-2
This means that the add button
has the keyboard focus,


56
00:03:16,096 --> 00:03:19,967 line:-2
and if you press the space bar,
the button will be activated.


57
00:03:20,033 --> 00:03:23,337 line:-2
The next tab highlights
the first item of the sidebar.


58
00:03:24,304 --> 00:03:27,241 line:-2
The users could press
up and down arrow keys


59
00:03:27,307 --> 00:03:29,643 line:-1
to change the selection of the table view.


60
00:03:31,011 --> 00:03:32,946 line:-1
And subsequent tabs highlights


61
00:03:33,013 --> 00:03:36,149 line:-2
the rest of the interactable controls
of the app,


62
00:03:36,216 --> 00:03:40,754 line:-2
the Share button, the Favorite button
and the Gift button.


63
00:03:41,855 --> 00:03:44,424 line:-1
Wow, that is awesome!


64
00:03:44,491 --> 00:03:46,226 line:-1
Without us doing any work,


65
00:03:46,293 --> 00:03:50,430 line:-2
UIKit already makes all of our controls
accessible with keyboard,


66
00:03:50,497 --> 00:03:53,734 line:-2
with tab keys looping us
through the controls of the app


67
00:03:53,800 --> 00:03:56,803 line:-2
and arrow keys changing the selection
of the table view.


68
00:03:58,238 --> 00:04:01,842 line:-2
Now, if you have a UITableView
or a UICollectionView


69
00:04:01,909 --> 00:04:03,277 line:-1
elsewhere in your app,


70
00:04:03,343 --> 00:04:06,213 line:-2
you might notice that arrow keys
don't move the selection.


71
00:04:06,647 --> 00:04:09,983 line:-2
And all you need to do
for arrow keys to change the selection


72
00:04:10,050 --> 00:04:15,355 line:-2
is to set this new API
selectionFollowsFocus to true


73
00:04:15,422 --> 00:04:17,690 line:-1
on your UITableView or CollectionView.


74
00:04:17,757 --> 00:04:22,129 line:-2
In our sample app, because our tableView
is a sidebar of a UISplitView,


75
00:04:22,196 --> 00:04:26,133 line:-2
UIKit sets this to true for us
so we don't need to do this step.


76
00:04:27,634 --> 00:04:31,171 line:0
To learn more about how to further
customize your keyboard experience,


77
00:04:31,238 --> 00:04:32,706 line:0
please check out the sample app


78
00:04:32,773 --> 00:04:36,210 line:0
and watch the session
"What's New in Mac Catalyst."


79
00:04:36,276 --> 00:04:37,678 line:-1
Now we've made sure


80
00:04:37,744 --> 00:04:42,082 line:-2
that all of the interactable controls
of the app can take focus.


81
00:04:42,149 --> 00:04:45,719 line:-2
We can talk about the next thing
you could do about keyboard usage.


82
00:04:45,786 --> 00:04:47,654 line:-1
Add keyboard shortcuts.


83
00:04:48,288 --> 00:04:52,793 line:-2
Right now, in order for our users
to add a new coffee or rate a coffee,


84
00:04:52,860 --> 00:04:55,295 line:-2
they can only do so
by clicking on the screen.


85
00:04:56,096 --> 00:04:58,365 line:-1
For people who use assistive technologies,


86
00:04:58,432 --> 00:05:01,969 line:-2
finding on-screen UIs to interact
can become tedious.


87
00:05:02,970 --> 00:05:05,839 line:-2
So it would be nice
if they are able to perform actions


88
00:05:05,906 --> 00:05:07,908 line:-1
through a quick keyboard shortcut.


89
00:05:08,742 --> 00:05:12,145 line:-2
So let's see what we need to do
if we were to add a keyboard shortcut


90
00:05:12,212 --> 00:05:14,381 line:-1
for sharing a roast with friends.


91
00:05:15,282 --> 00:05:19,219 line:-2
To do that, I first need to find out
the best keyboard combination to use


92
00:05:19,286 --> 00:05:22,756 line:-2
because we want it to be as intuitive
as possible for the customers.


93
00:05:23,423 --> 00:05:25,325 line:-2
You can first check out
the Apple guideline


94
00:05:25,392 --> 00:05:28,295 line:-2
for a list of commonly used
keyboard shortcuts.


95
00:05:28,362 --> 00:05:30,631 line:-1
If your app has similar functionalities,


96
00:05:30,697 --> 00:05:34,201 line:-2
you could consider using these
keyboard combinations for the shortcuts


97
00:05:34,268 --> 00:05:36,537 line:-2
because users
are already familiar with them.


98
00:05:37,437 --> 00:05:40,674 line:-1
For us, sharing isn't on the list here,


99
00:05:40,741 --> 00:05:43,944 line:-2
so another way is to check out
the existing apps on the Mac


100
00:05:44,011 --> 00:05:45,779 line:-1
to see if they have something similar.


101
00:05:45,846 --> 00:05:49,249 line:-2
So I checked out the Safari app on the Mac
that everybody loves.


102
00:05:49,316 --> 00:05:53,253 line:-2
It uses Command-I
as a shortcut for sharing.


103
00:05:53,320 --> 00:05:55,322 line:-1
And I've just decided to do the same.


104
00:05:56,857 --> 00:06:01,428 line:-2
To do this, we first need to override
the buildMenu function in AppDelegate.


105
00:06:02,596 --> 00:06:07,467 line:-2
We need to create a UIKeyCommand
that responds to the keyboard shortcut.


106
00:06:07,534 --> 00:06:10,470 line:-1
We assign a localized string as the title,


107
00:06:10,537 --> 00:06:13,340 line:-2
because this would show up
in the menu bar.


108
00:06:13,407 --> 00:06:17,077 line:-2
Then we assign the action
that gets triggered for the command.


109
00:06:17,144 --> 00:06:21,615 line:-2
We need to create a UIKeyCommand
that responds to the keyboard shortcut.


110
00:06:21,682 --> 00:06:24,418 line:-1
We assign a localized string as the title,


111
00:06:24,484 --> 00:06:27,054 line:-2
because this would show up
in the menu bar.


112
00:06:27,120 --> 00:06:30,591 line:-2
Then we assign the action
that gets triggered for the command


113
00:06:30,657 --> 00:06:35,095 line:-2
and set the input to letter "I"
for modifierFlags command.


114
00:06:36,096 --> 00:06:39,132 line:0
Then we need to create a UIMenu
that takes the shareCommand


115
00:06:39,199 --> 00:06:41,435 line:0
as the only child for the menu,


116
00:06:41,502 --> 00:06:46,173 line:0
and insert this new menu item
to an appropriate place on the menu bar.


117
00:06:46,240 --> 00:06:50,244 line:0
For this demo, I chose to insert it
at the end of the edit menu.


118
00:06:50,310 --> 00:06:52,279 line:-1
Now if you open the edit menu,


119
00:06:52,346 --> 00:06:55,349 line:-2
you would see that
our new keyboard shortcut, Share,


120
00:06:55,415 --> 00:06:57,651 line:-1
appears nicely under the edit menu,


121
00:06:57,718 --> 00:07:00,587 line:-2
and it can be accessed
by pressing Command-I.


122
00:07:01,989 --> 00:07:06,193 line:-2
And don't forget that all the great work
you are optimizing for Mac Catalyst


123
00:07:06,260 --> 00:07:10,664 line:-2
are also great optimizations
for full keyboard access on iOS,


124
00:07:10,731 --> 00:07:15,102 line:-2
which is a feature that allows users
to use the device with just the keyboard.


125
00:07:16,170 --> 00:07:19,439 line:-2
In addition,
your app can get the exact keyCode


126
00:07:19,506 --> 00:07:23,310 line:-2
from a UIPress object
starting in iOS 13.4.


127
00:07:23,677 --> 00:07:26,947 line:-2
This is useful if you're developing
a game, for example,


128
00:07:27,014 --> 00:07:30,951 line:-2
because this API gives you
the full control of the keyboard.


129
00:07:31,018 --> 00:07:33,687 line:-2
And don't forget to check out
our sample app for these usages.


130
00:07:33,754 --> 00:07:35,589 line:-1
For a quick recap,


131
00:07:35,656 --> 00:07:40,260 line:-2
a great app designed for the keyboard
is a great app for accessibility.


132
00:07:41,261 --> 00:07:44,965 line:-2
It is important to make sure
that interactable controls


133
00:07:45,032 --> 00:07:47,534 line:-1
are accessible with keyboard focus.


134
00:07:48,569 --> 00:07:52,639 line:-2
And we recommend you to add some
useful keyboard shortcuts for your app.


135
00:07:54,174 --> 00:07:56,844 line:-1
So that's it for keyboard usage.


136
00:07:56,910 --> 00:07:59,847 line:-2
Next, I will hand it over
to my colleague, Nathan,


137
00:07:59,913 --> 00:08:02,916 line:-2
to talk about how you can improve
navigation efficiency


138
00:08:02,983 --> 00:08:04,518 line:-1
for assistive technologies.


139
00:08:05,586 --> 00:08:08,355 line:-2
Thanks, Eric.
Hey, folks, my name is Nathan.


140
00:08:08,422 --> 00:08:10,958 line:-2
I'm a software engineer
on the Accessibility Team.


141
00:08:11,024 --> 00:08:12,793 line:-2
My team and I
have been working really hard


142
00:08:12,860 --> 00:08:15,128 line:-2
to improve
how our macOS assistive technologies


143
00:08:15,195 --> 00:08:17,865 line:-2
are going to interact
with your Catalyst apps.


144
00:08:17,931 --> 00:08:19,366 line:-1
Like Eric touched on earlier,


145
00:08:19,433 --> 00:08:22,202 line:-2
making your app accessible
is to make it usable for everyone.


146
00:08:22,603 --> 00:08:24,004 line:-1
Part of making your app usable


147
00:08:24,071 --> 00:08:27,307 line:-2
is to give users
an efficient way to access content.


148
00:08:27,875 --> 00:08:29,676 line:-1
Today we'll focus on VoiceOver.


149
00:08:29,743 --> 00:08:32,145 line:-2
It's a screen reader that exists
on all of our platforms,


150
00:08:32,212 --> 00:08:35,249 line:-2
and it allows users with low or no vision
to interact with your app


151
00:08:35,315 --> 00:08:36,717 line:-1
by reading out content on screen.


152
00:08:37,150 --> 00:08:40,587 line:-2
VoiceOver does this through interacting
with a tree of accessibility elements


153
00:08:40,654 --> 00:08:42,256 line:-1
based off of your user interface.


154
00:08:43,357 --> 00:08:46,126 line:-2
On macOS, you might be delivering
a more complex app


155
00:08:46,193 --> 00:08:47,261 line:-1
with a bigger user interface,


156
00:08:47,327 --> 00:08:49,763 line:-2
to take advantage
of the additional screen real estate.


157
00:08:50,163 --> 00:08:51,498 line:-1
With a more complex interface,


158
00:08:51,565 --> 00:08:55,602 line:-2
it means there's even more accessibility
elements for VoiceOver to navigate.


159
00:08:55,669 --> 00:08:57,905 line:-2
This means users need
an efficient way to navigate


160
00:08:57,971 --> 00:08:59,873 line:-1
or they could begin to feel overwhelmed.


161
00:09:00,407 --> 00:09:04,945 line:-2
That's why today, I'm very excited
to talk to you about accessibility groups.


162
00:09:05,012 --> 00:09:09,016 line:-2
It's a strategy you can use to improve
your app's navigation for VoiceOver users.


163
00:09:09,082 --> 00:09:14,421 line:-2
We've made it possible to use grouping
to deliver a more native macOS experience.


164
00:09:14,488 --> 00:09:17,291 line:-2
But before we can talk about
improving navigation efficiency,


165
00:09:17,357 --> 00:09:20,227 line:-2
it's important to first understand
how VoiceOver sees your app.


166
00:09:20,727 --> 00:09:24,865 line:-2
This is how VoiceOver sees your app.
It's what we call the accessibility tree.


167
00:09:24,932 --> 00:09:26,633 line:-2
It's a collection of elements
that are visible


168
00:09:26,700 --> 00:09:28,635 line:-1
by all of our assistive technologies.


169
00:09:29,636 --> 00:09:31,238 line:-1
Views that are accessibility elements


170
00:09:31,305 --> 00:09:34,341 line:-2
are determined
by the isAccessibilityElement property.


171
00:09:34,408 --> 00:09:35,809 line:-1
Each element is a leaf node,


172
00:09:35,876 --> 00:09:39,012 line:-2
which results
in a single-level tree of elements.


173
00:09:39,079 --> 00:09:41,114 line:-1
This model works great on iOS.


174
00:09:41,181 --> 00:09:42,716 line:-1
Users navigate with a touchscreen,


175
00:09:42,783 --> 00:09:44,985 line:-2
which means they can navigate elements
one by one


176
00:09:45,052 --> 00:09:47,521 line:-2
or quickly jump to them
by tapping them on screen.


177
00:09:48,388 --> 00:09:49,823 line:-1
However, on macOS,


178
00:09:49,890 --> 00:09:52,125 line:-1
VoiceOver users navigate using a keyboard.


179
00:09:52,192 --> 00:09:55,229 line:-2
Without a touchscreen,
they cannot quickly jump between elements.


180
00:09:56,029 --> 00:09:57,764 line:-1
So if we were to use the same model,


181
00:09:57,831 --> 00:10:00,901 line:-2
all accessibility elements
would have to be navigated one by one.


182
00:10:01,368 --> 00:10:03,170 line:-1
To illustrate this navigation challenge,


183
00:10:03,237 --> 00:10:05,272 line:-2
let's take a look
at the accessibility elements


184
00:10:05,339 --> 00:10:06,707 line:-1
in our Roasted Beans app.


185
00:10:06,773 --> 00:10:11,011 line:-2
Here you can see there are
26 visible accessibility elements.


186
00:10:11,078 --> 00:10:12,946 line:-1
That means there's at least 26 elements


187
00:10:13,013 --> 00:10:15,749 line:-2
a user would have to navigate through
at any given time.


188
00:10:16,350 --> 00:10:19,019 line:-2
Imagine if it took you
26 keystrokes in Xcode


189
00:10:19,086 --> 00:10:20,687 line:-1
to reach that Compile button.


190
00:10:20,754 --> 00:10:24,291 line:-2
You would probably find programming
quite a bit more challenging.


191
00:10:24,358 --> 00:10:26,293 line:-1
While a keyboard shortcut could be added


192
00:10:26,360 --> 00:10:29,496 line:-2
so that navigation
to a specific element isn't required,


193
00:10:29,563 --> 00:10:31,031 line:-1
it won't solve every use case.


194
00:10:31,098 --> 00:10:33,200 line:-2
So what can we do
to improve this experience?


195
00:10:33,267 --> 00:10:35,569 line:-2
What if we were to take inspiration
from a dinner menu?


196
00:10:35,636 --> 00:10:38,572 line:-2
Instead of the menu presenting
a long list of every dish,


197
00:10:38,639 --> 00:10:40,807 line:-2
they are categorized
into relatable sections,


198
00:10:40,874 --> 00:10:43,410 line:-2
such as salads, main course
and side dishes.


199
00:10:43,477 --> 00:10:46,713 line:-2
This would allow a VoiceOver user
to navigate between groups


200
00:10:46,780 --> 00:10:49,683 line:-2
before navigating individual elements
in a specific group.


201
00:10:49,750 --> 00:10:52,819 line:-2
We can apply this same idea
to the accessibility tree.


202
00:10:52,886 --> 00:10:54,788 line:-1
You can define a relation between elements


203
00:10:54,855 --> 00:10:56,890 line:-2
through the use
of accessibility containers.


204
00:10:57,591 --> 00:11:00,260 line:0
When you set accessibilityContainerType
on an element,


205
00:11:00,327 --> 00:11:03,096 line:0
our assistive technologies
will be able to use that information


206
00:11:03,163 --> 00:11:05,165 line:0
to provide a better navigation experience


207
00:11:05,232 --> 00:11:07,167 line:0
for the accessibility elements
it contains.


208
00:11:08,335 --> 00:11:11,004 line:0
You may have already known
about the accessibility container API


209
00:11:11,071 --> 00:11:13,540 line:0
and how it helps users on iOS navigate.


210
00:11:13,607 --> 00:11:16,276 line:-2
For example, it allows them
to perform a touch gesture


211
00:11:16,343 --> 00:11:20,414 line:-2
to navigate to the first accessibility
element in the next container.


212
00:11:20,480 --> 00:11:22,683 line:-2
VoiceOver would then focus
on elements like this.


213
00:11:24,318 --> 00:11:28,722 line:-2
Since our goal here was to improve
navigation efficiency for Mac Catalyst,


214
00:11:28,789 --> 00:11:32,292 line:-2
VoiceOver on macOS
will leverage this same API,


215
00:11:32,359 --> 00:11:34,494 line:-1
but adapt the behavior.


216
00:11:34,561 --> 00:11:39,099 line:-2
Accessibility containers on macOS
will behave as an accessibility element.


217
00:11:39,166 --> 00:11:43,303 line:-2
This means VoiceOver can navigate focus
to the container itself.


218
00:11:43,370 --> 00:11:47,474 line:-2
From here, users can choose to skip past
the container to the next element


219
00:11:47,541 --> 00:11:49,109 line:-1
or interact with a container,


220
00:11:49,176 --> 00:11:53,080 line:-2
allowing for exclusive navigation
of the containers' accessibility elements.


221
00:11:53,914 --> 00:11:58,185 line:-2
So when I say accessibility containers
will behave as an accessibility element,


222
00:11:58,252 --> 00:12:00,554 line:-2
this is because
when we build the accessibility tree


223
00:12:00,621 --> 00:12:01,955 line:-1
for a Mac Catalyst app,


224
00:12:02,022 --> 00:12:05,359 line:-2
the container becomes
its own node on the tree


225
00:12:05,425 --> 00:12:09,296 line:-2
and its accessibility elements
become their own subtree.


226
00:12:09,363 --> 00:12:14,668 line:-2
This structure closely aligns with
the accessibility API built around AppKit.


227
00:12:15,869 --> 00:12:17,638 line:-1
Its model works great for macOS


228
00:12:17,704 --> 00:12:20,474 line:-2
because it significantly reduces
the number of accessibility elements


229
00:12:20,541 --> 00:12:22,809 line:-2
a user needs to navigate
at any given time.


230
00:12:23,977 --> 00:12:26,680 line:-2
The key takeaway here
is that accessibility containers


231
00:12:26,747 --> 00:12:29,049 line:-2
are an accessibility element
on Mac Catalyst,


232
00:12:29,116 --> 00:12:31,518 line:-2
so ensuring you have
set standard accessibility properties


233
00:12:31,585 --> 00:12:35,355 line:-2
such as accessibility label
on your containers is essential.


234
00:12:35,422 --> 00:12:37,724 line:-1
Looking back to our Roasted Beans app,


235
00:12:37,791 --> 00:12:40,160 line:-2
what would we see
now that the accessibility containers


236
00:12:40,227 --> 00:12:43,096 line:-2
behave as an independent node
in the accessibility tree?


237
00:12:44,231 --> 00:12:46,466 line:-2
Here you can see
a dramatic efficiency improvement.


238
00:12:46,533 --> 00:12:50,237 line:-2
This reduces the number
of visible elements from 26 to 8.


239
00:12:50,304 --> 00:12:52,105 line:-1
Now that we've seen how much of an impact


240
00:12:52,172 --> 00:12:54,408 line:-2
accessibility containers
have on navigation,


241
00:12:54,474 --> 00:12:56,410 line:-2
let's take a few moments
to discuss the different types


242
00:12:56,476 --> 00:12:57,811 line:-1
and when you should use them.


243
00:12:57,878 --> 00:13:00,280 line:-2
Data tables are specifically
for when your container,


244
00:13:00,347 --> 00:13:01,381 line:-1
such as a graph,


245
00:13:01,448 --> 00:13:04,952 line:-2
adopts the UIAccessibilityContainer
DataTable protocol.


246
00:13:05,018 --> 00:13:07,054 line:-1
Lists are for ordered content.


247
00:13:07,120 --> 00:13:11,058 line:-2
These are primarily used in web pages
or in a PDF's table of contents.


248
00:13:11,124 --> 00:13:16,029 line:-2
Landmarks are containers
used specifically for web pages and tvOS.


249
00:13:16,096 --> 00:13:20,467 line:-2
Lastly, semanticGroups
are a general container type on iOS.


250
00:13:20,534 --> 00:13:24,071 line:-2
On iOS, their accessibility label
will be spoken the first time


251
00:13:24,137 --> 00:13:27,941 line:-2
VoiceOver users focus on an element
within that container.


252
00:13:28,008 --> 00:13:33,113 line:-2
On macOS, their label will be spoken when
VoiceOver focuses on the container itself.


253
00:13:34,548 --> 00:13:37,451 line:-2
So in our case, we want to be using
the semanticGroup type


254
00:13:37,518 --> 00:13:39,286 line:-1
to improve the navigation experience.


255
00:13:39,353 --> 00:13:42,823 line:-2
While grouping can greatly improve
the navigation experience,


256
00:13:42,890 --> 00:13:44,491 line:-1
I want to be sure that you understand


257
00:13:44,558 --> 00:13:47,427 line:-2
that too much grouping can overcomplicate
the navigation of your app.


258
00:13:47,494 --> 00:13:51,532 line:-2
Since each accessibility container
becomes a node in the accessibility tree,


259
00:13:51,598 --> 00:13:53,967 line:-2
elements within the container
are not discoverable


260
00:13:54,034 --> 00:13:57,237 line:-2
unless a VoiceOver user
explicitly interacts with the group.


261
00:13:58,038 --> 00:14:01,642 line:-2
So let's take a look at a few examples
to see when we should group elements.


262
00:14:01,708 --> 00:14:04,878 line:-2
To start things off, elements belonging
to the same functional section


263
00:14:04,945 --> 00:14:05,979 line:-1
should be grouped.


264
00:14:06,046 --> 00:14:08,282 line:-2
But how do we discover
these functional sections?


265
00:14:09,316 --> 00:14:12,486 line:-2
Let's take a look at Swift Playgrounds,
a recent Mac Catalyst app.


266
00:14:12,553 --> 00:14:15,689 line:-2
Imagine you have a friend
who just started learning how to code.


267
00:14:15,756 --> 00:14:18,725 line:-2
They open up Swift Playgrounds
and start one of their first lessons


268
00:14:18,792 --> 00:14:20,961 line:-2
and unfortunately, they get stuck
on one of the problems.


269
00:14:21,028 --> 00:14:22,996 line:-2
But luckily for them,
they have you to call upon.


270
00:14:23,063 --> 00:14:25,265 line:-2
Imagine yourself
talking to them over the phone.


271
00:14:25,332 --> 00:14:27,467 line:-1
How would you help them navigate the app?


272
00:14:27,534 --> 00:14:30,571 line:-2
You might ask, "Do you see
a list of chapters on the left?


273
00:14:30,637 --> 00:14:32,806 line:-1
Which chapter are you on?


274
00:14:32,873 --> 00:14:34,308 line:-1
In the world view on your right,


275
00:14:34,374 --> 00:14:36,176 line:-2
which tile
is your character byte standing on?"


276
00:14:36,243 --> 00:14:38,679 line:-2
Or maybe you're trying to teach them
more about writing code,


277
00:14:38,745 --> 00:14:41,648 line:-2
in which case you could separate
the middle into two functional groups,


278
00:14:41,715 --> 00:14:43,650 line:-2
the top being the editor
where you write code


279
00:14:43,717 --> 00:14:46,486 line:-2
and the bottom being
the auto-complete suggestions.


280
00:14:46,553 --> 00:14:48,889 line:-2
By walking through
how you might verbally describe your app,


281
00:14:48,956 --> 00:14:51,291 line:-2
you can more easily identify
these functional sections


282
00:14:51,358 --> 00:14:53,560 line:-2
that should be placed
into accessibility containers.


283
00:14:54,194 --> 00:14:56,864 line:-2
Another instance of when
you should use accessibility containers


284
00:14:56,930 --> 00:14:59,566 line:-2
are when they are related by type
or functional purpose.


285
00:15:00,033 --> 00:15:03,937 line:-2
For example, UINavigationBar,
UITabBar,


286
00:15:04,004 --> 00:15:06,607 line:-1
UICollectionView and UITableView


287
00:15:06,673 --> 00:15:08,742 line:-1
are some of the standard UIKit views


288
00:15:08,809 --> 00:15:12,346 line:-2
that are accessibility containers
of type semanticGroup by default.


289
00:15:12,412 --> 00:15:14,915 line:-2
So if you have created
your own custom UI elements


290
00:15:14,982 --> 00:15:17,384 line:-1
that act as tab bars or navigation bars,


291
00:15:17,451 --> 00:15:19,453 line:-2
please follow
the expected default behavior


292
00:15:19,520 --> 00:15:21,822 line:-2
by configuring it
as an accessibility container.


293
00:15:22,356 --> 00:15:24,758 line:-2
Now let's step through an example
in our Roasted Beans app


294
00:15:24,825 --> 00:15:28,395 line:-2
to see how easy it to improve the
navigation experience in your own apps.


295
00:15:28,462 --> 00:15:31,665 line:-2
Starting on the left,
we have a UITableView.


296
00:15:31,732 --> 00:15:34,935 line:-2
It's an accessibility container
of type semanticGroup by default.


297
00:15:35,736 --> 00:15:39,706 line:-2
Recall that accessibility containers
are an independent accessibility element


298
00:15:39,773 --> 00:15:41,108 line:-1
for our Mac Catalyst app.


299
00:15:41,175 --> 00:15:43,644 line:-2
Which means that just like
any other accessibility element,


300
00:15:43,710 --> 00:15:47,581 line:-2
we recommend giving the container
a localized accessibility label.


301
00:15:47,648 --> 00:15:50,751 line:-2
In this case,
"Coffee list" would be appropriate.


302
00:15:50,817 --> 00:15:53,020 line:-2
Since our UITableView
maintains some state


303
00:15:53,086 --> 00:15:54,688 line:-1
about which coffee is selected,


304
00:15:54,755 --> 00:15:56,390 line:-1
we could make this label even better


305
00:15:56,456 --> 00:15:58,859 line:-2
by adding which coffee is selected
to the label.


306
00:15:59,793 --> 00:16:02,996 line:0
Here is a great time to take a moment
to pause and remind everyone


307
00:16:03,063 --> 00:16:06,700 line:0
of the importance of adding
great accessibility labels to their apps.


308
00:16:06,767 --> 00:16:08,969 line:0
To learn how to make
great accessibility labels,


309
00:16:09,036 --> 00:16:12,606 line:0
we have a presentation from 2019
which I encourage for you to watch.


310
00:16:12,673 --> 00:16:16,276 line:-2
Coming back to our app,
what about the details view on the right?


311
00:16:16,343 --> 00:16:18,545 line:-2
It's a functional section
that holds all the information


312
00:16:18,612 --> 00:16:21,014 line:-1
related to the select coffee.


313
00:16:21,081 --> 00:16:23,417 line:-2
Because the details view
isn't already grouped,


314
00:16:23,483 --> 00:16:26,820 line:-2
because we did not use a UITableView
or UICollectionView,


315
00:16:26,887 --> 00:16:29,990 line:-2
we have to manually define
these accessibility containers.


316
00:16:30,057 --> 00:16:31,825 line:-1
Today I'll show you how easy it can be


317
00:16:31,892 --> 00:16:35,729 line:-2
to take something like our availability UI
and make it a container.


318
00:16:35,796 --> 00:16:38,031 line:-2
We implemented this
as a series of UILabels


319
00:16:38,098 --> 00:16:40,133 line:-1
in a vertical UIStackView.


320
00:16:40,200 --> 00:16:43,737 line:-2
This means a user would have to
navigate through each element.


321
00:16:43,804 --> 00:16:46,206 line:-2
We could make
this navigation experience better


322
00:16:46,273 --> 00:16:48,242 line:-1
by adding an accessibility container,


323
00:16:48,308 --> 00:16:51,512 line:-2
so the VoiceOver users can quickly
navigate past the entire list.


324
00:16:52,980 --> 00:16:54,448 line:-1
From here, in just a few lines,


325
00:16:54,515 --> 00:16:57,351 line:-2
we can make the UIStackView
an accessibility container


326
00:16:57,417 --> 00:17:00,053 line:-2
and give it an accessibility label
that describes the group.


327
00:17:02,256 --> 00:17:05,092 line:-2
These are some fantastic improvements
to our app.


328
00:17:05,157 --> 00:17:07,560 line:-2
By placing these related elements
into groups,


329
00:17:07,627 --> 00:17:11,898 line:-2
we can greatly improve how VoiceOver users
will navigate our Mac Catalyst app.


330
00:17:11,964 --> 00:17:13,700 line:-1
And so I hope you take away the importance


331
00:17:13,767 --> 00:17:16,203 line:-2
of adding accessibility containers
to your app.


332
00:17:16,270 --> 00:17:19,071 line:-2
It's a small change you can make
that will greatly improve


333
00:17:19,138 --> 00:17:22,442 line:-2
the navigation experience
on macOS and on iOS.


334
00:17:23,644 --> 00:17:25,546 line:-2
Please ensure
that your accessibility containers


335
00:17:25,612 --> 00:17:28,715 line:-2
have a concise localized label
that describes the group


336
00:17:28,782 --> 00:17:31,919 line:-2
and includes any important details
regarding the containers' state.


337
00:17:33,253 --> 00:17:36,557 line:-2
That's all I have for you today
regarding navigation efficiency.


338
00:17:36,623 --> 00:17:39,059 line:-2
I'll now pass things back to Eric,
where he will show you


339
00:17:39,126 --> 00:17:41,962 line:-2
how to test your Mac Catalyst app
for accessibility.


340
00:17:42,596 --> 00:17:43,664 line:-1
Thank you, Nathan.


341
00:17:43,730 --> 00:17:45,599 line:-1
With all the great work that you've done


342
00:17:45,666 --> 00:17:47,968 line:-2
to improve
your accessibility app experience,


343
00:17:48,035 --> 00:17:51,538 line:-2
now is a great time to talk about
testing on the macOS platform.


344
00:17:51,605 --> 00:17:53,974 line:-1
When bringing apps from iOS to the Mac,


345
00:17:54,041 --> 00:17:57,044 line:-2
you think of the app as an iOS app
from the inside,


346
00:17:57,110 --> 00:17:58,812 line:-1
but a Mac app on the outside,


347
00:17:58,879 --> 00:18:01,481 line:-2
because it is running
on the macOS platform.


348
00:18:02,182 --> 00:18:06,486 line:-2
As it happens, when you work
with accessibility APIs from UIKit,


349
00:18:06,553 --> 00:18:10,924 line:-2
our team automatically converts
your iOS accessibility code to macOS


350
00:18:10,991 --> 00:18:13,694 line:-1
without you having to do any work,


351
00:18:13,760 --> 00:18:16,029 line:-2
so that you can continue
to think about iOS.


352
00:18:16,096 --> 00:18:19,266 line:-2
To help you better understand
what's going on under the hood,


353
00:18:19,333 --> 00:18:23,303 line:-2
we've improved the Accessibility Inspector
for Mac Catalyst apps,


354
00:18:23,370 --> 00:18:26,940 line:-2
and now it shows you the iOS APIs
when running on macOS.


355
00:18:28,175 --> 00:18:30,878 line:-2
If you have not used
Accessibility Inspector before,


356
00:18:30,944 --> 00:18:33,380 line:-2
I highly recommend you
to watch these two videos,


357
00:18:33,447 --> 00:18:37,951 line:0
"Auditing Your Apps for Accessibility"
and "Accessibility Inspector."


358
00:18:38,018 --> 00:18:40,487 line:0
Together they will give you
a complete guide


359
00:18:40,554 --> 00:18:42,923 line:0
on how Accessibility Inspector
can help you


360
00:18:42,990 --> 00:18:45,826 line:0
find and fix accessibility issues
for your apps


361
00:18:45,893 --> 00:18:47,995 line:0
across all Apple platforms.


362
00:18:48,061 --> 00:18:50,931 line:-2
So now let's see
how to use the Accessibility Inspector


363
00:18:50,998 --> 00:18:54,101 line:-2
to audit your app accessibility
on Mac Catalyst.


364
00:18:55,035 --> 00:18:58,939 line:-2
If we use the Inspector
to inspect the elements for the cell,


365
00:18:59,006 --> 00:19:04,178 line:-2
we can see the element has a proper label
that describes the title of the coffee


366
00:19:04,244 --> 00:19:07,514 line:-2
and a proper value
that describes the rating.


367
00:19:08,715 --> 00:19:11,885 line:-2
We also see
that there's a new Catalyst section


368
00:19:11,952 --> 00:19:16,690 line:-2
that shows accessibility traits,
container types from iOS.


369
00:19:16,757 --> 00:19:19,293 line:-1
If we then use the Command-Control-Up,


370
00:19:19,359 --> 00:19:23,463 line:-2
the Inspector would then inspect
the parent of the cell element,


371
00:19:23,530 --> 00:19:25,299 line:-1
which serves as the container.


372
00:19:26,166 --> 00:19:29,970 line:-2
We could verify that
this is the correct element to inspect


373
00:19:30,037 --> 00:19:32,439 line:-1
by checking the element class.


374
00:19:32,506 --> 00:19:35,142 line:-2
In this case, the class name shows
that this is the element


375
00:19:35,209 --> 00:19:38,679 line:-2
that we translated
for the tableView class.


376
00:19:38,745 --> 00:19:40,581 line:-1
All classes from UIKit


377
00:19:40,647 --> 00:19:43,817 line:-2
will be eventually translated
to a Mac platform element.


378
00:19:44,918 --> 00:19:48,355 line:-2
In addition, Inspector tells you
the view controller of the view


379
00:19:48,422 --> 00:19:49,423 line:-1
if it has one.


380
00:19:49,489 --> 00:19:54,494 line:-2
In this case, it is
the RBListViewController from the app.


381
00:19:54,561 --> 00:19:57,431 line:-2
To make sure that VoiceOver
reads the container,


382
00:19:57,497 --> 00:19:59,433 line:-2
we can make sure
that the tableView container


383
00:19:59,499 --> 00:20:02,269 line:-2
has a proper label
which is a localized coffee list.


384
00:20:03,504 --> 00:20:07,374 line:-2
It also has the correct container type
which is a semanticGroup.


385
00:20:09,009 --> 00:20:10,210 line:-1
And starting this year,


386
00:20:10,277 --> 00:20:14,882 line:-2
Accessibility Inspector would tell you
the automation type for all elements.


387
00:20:14,948 --> 00:20:17,217 line:-1
In this case, it is a table,


388
00:20:17,284 --> 00:20:21,688 line:-2
so that you know
exactly how to find it in XCUI tests.


389
00:20:21,755 --> 00:20:24,825 line:-2
So that's a brief overview
of some of the additional things


390
00:20:24,892 --> 00:20:28,495 line:-2
you can do with Accessibility Inspector
for Mac Catalyst apps.


391
00:20:28,562 --> 00:20:29,997 line:-1
We hope you enjoyed it.


392
00:20:31,365 --> 00:20:35,035 line:-2
So we've covered a lot today
for accessibility in Mac Catalyst.


393
00:20:35,669 --> 00:20:39,840 line:-2
To wrap up, we first discussed
how a great keyboard app


394
00:20:39,907 --> 00:20:41,909 line:-1
is a great app for accessibility


395
00:20:41,975 --> 00:20:45,646 line:-2
by making sure the controls of the app
is accessible by keyboard focus


396
00:20:45,712 --> 00:20:47,481 line:-1
and adding keyboard shortcuts.


397
00:20:48,982 --> 00:20:52,052 line:-2
Then we showed you
how you can improve navigation efficiency


398
00:20:52,119 --> 00:20:54,521 line:-2
for assistive technologies
for Mac Catalyst apps.


399
00:20:55,389 --> 00:20:59,560 line:-2
We learned how the existing iOS API
accessibilityContainerType


400
00:20:59,626 --> 00:21:04,665 line:-2
can make a much bigger impact on the Mac,
and how you should adopt it in your app.


401
00:21:04,731 --> 00:21:09,002 line:-2
And our last piece of advice
is to use the Accessibility Inspector.


402
00:21:09,069 --> 00:21:13,040 line:-2
This is a great tool that we created
to help developers like you.


403
00:21:13,540 --> 00:21:15,475 line:-1
So thank you for joining us,


404
00:21:15,542 --> 00:21:17,778 line:-2
and we hope this presentation
will help you create


405
00:21:17,845 --> 00:21:21,415 line:-2
a better accessibility experience
for Mac Catalyst apps.

