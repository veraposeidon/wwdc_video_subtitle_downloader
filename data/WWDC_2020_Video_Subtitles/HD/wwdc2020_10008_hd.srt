1
00:00:03,836 --> 00:00:06,240 line:-1
Hello and welcome to WWDC.


2
00:00:07,608 --> 00:00:09,610 line:0
Welcome, everyone.
My name is David Hayward,


3
00:00:09,676 --> 00:00:11,778 line:0
and I'll be giving
a short presentation today


4
00:00:11,845 --> 00:00:13,881 line:0
that will show how to get
the best performance


5
00:00:13,947 --> 00:00:17,284 line:0
when using Core Image to apply effects
to your video app.


6
00:00:17,351 --> 00:00:20,454 line:-2
With that goal in mind,
I will discuss the following topics:


7
00:00:21,688 --> 00:00:23,690 line:-1
How best to create a CIContext,


8
00:00:24,658 --> 00:00:27,060 line:-1
how to write and apply custom CI Kernels,


9
00:00:27,828 --> 00:00:30,030 line:-1
and how to optimally render to your view.


10
00:00:31,064 --> 00:00:33,901 line:-2
So, let's dive in
and start with Creating a CIContext.


11
00:00:34,868 --> 00:00:39,239 line:-2
The first advice when creating your
CIContext is to only create one per view.


12
00:00:40,340 --> 00:00:41,875 line:-1
Contexts are easy to create,


13
00:00:41,942 --> 00:00:44,111 line:-2
but they take time
and memory to initialize,


14
00:00:44,178 --> 00:00:45,812 line:-1
so you don't wanna do it often.


15
00:00:46,313 --> 00:00:48,182 line:-1
Also, when you create your context,


16
00:00:48,248 --> 00:00:50,717 line:-2
there are some options
that should be specified.


17
00:00:50,784 --> 00:00:54,388 line:-2
Most important is to tell the context
not to cache intermediates.


18
00:00:54,821 --> 00:00:57,791 line:-2
With video, every frame is different
than the one before it,


19
00:00:57,858 --> 00:01:00,761 line:-2
so disabling this cache
will lower memory usage.


20
00:01:02,229 --> 00:01:05,065 line:-2
Also, I recommend that you give
your context a name.


21
00:01:05,766 --> 00:01:09,102 line:-2
This can be useful when using
Core Image debugging techniques.


22
00:01:09,837 --> 00:01:12,072 line:-1
Under the hood, Core Image uses Metal,


23
00:01:12,606 --> 00:01:16,977 line:-2
but some applications may want to
combine Core Image with other Metal APIs.


24
00:01:18,045 --> 00:01:23,550 line:-2
For example, you may want to use a Metal
texture as input or output for Core Image.


25
00:01:24,351 --> 00:01:27,721 line:-2
In these situations, I recommend
that you create your CIContext


26
00:01:27,788 --> 00:01:29,423 line:-1
with a Metal-Command-Queue.


27
00:01:29,890 --> 00:01:32,626 line:-2
A timeline graph
is the best way to explain why.


28
00:01:33,260 --> 00:01:37,497 line:-2
Consider a situation where an app
first uses its Metal-Command-Queue


29
00:01:37,564 --> 00:01:39,800 line:-1
to render content into a Metal texture.


30
00:01:40,534 --> 00:01:44,705 line:-2
This involves enqueueing work on the CPU
which is performed on the GPU.


31
00:01:45,205 --> 00:01:47,875 line:-2
Next, the app passes that texture
to Core Image


32
00:01:47,941 --> 00:01:50,110 line:-1
which uses its own internal Metal queue


33
00:01:50,177 --> 00:01:53,113 line:-2
to render content
into another Metal texture.


34
00:01:53,180 --> 00:01:55,883 line:-2
This also involves
enqueueing work on the CPU


35
00:01:55,949 --> 00:01:57,751 line:-1
which is performed on the GPU.


36
00:01:58,519 --> 00:02:00,787 line:-1
Lastly, the app uses its Metal queue again


37
00:02:00,854 --> 00:02:03,590 line:-2
to render with the output texture
from Core Image.


38
00:02:04,491 --> 00:02:06,894 line:-2
Because all this work
is done on different queues,


39
00:02:06,960 --> 00:02:10,497 line:-2
the app must issue wait commands
to get the correct results.


40
00:02:11,431 --> 00:02:14,735 line:-2
This causes wasteful bubbles
due to inefficient pipelining.


41
00:02:15,169 --> 00:02:18,405 line:-2
The solution to this problem
is to create the CIContext


42
00:02:18,472 --> 00:02:21,608 line:-2
with the same queue
that is used by the other Metal renders.


43
00:02:21,675 --> 00:02:24,111 line:-1
This allows the app to remove the waits.


44
00:02:25,245 --> 00:02:29,616 line:-2
And by doing so, the work can be pipelined
efficiently for the best performance.


45
00:02:31,351 --> 00:02:34,688 line:-2
The next topic to discuss
is writing CIKernels in Metal.


46
00:02:35,189 --> 00:02:37,324 line:-2
To get the best performance
in your video app,


47
00:02:37,391 --> 00:02:40,427 line:-2
it is important that the effects
are implemented in Metal.


48
00:02:40,694 --> 00:02:41,995 line:-1
The easiest way to do this


49
00:02:42,062 --> 00:02:44,731 line:-2
is to use built-in Core Image filters
wherever possible


50
00:02:44,798 --> 00:02:46,900 line:-1
because they are all implemented in Metal.


51
00:02:47,901 --> 00:02:49,803 line:-1
To help you use the built-in filters


52
00:02:49,870 --> 00:02:54,208 line:-2
we have been upgrading the documentation
to include parameter descriptions,


53
00:02:54,274 --> 00:02:57,511 line:-2
sample images,
and even sample code is included.


54
00:02:59,146 --> 00:03:01,815 line:-2
The code to apply a built-in filter
is really simple.


55
00:03:02,349 --> 00:03:06,520 line:-2
Just import CI-Filters-Built-ins,
create a filter instance,


56
00:03:06,854 --> 00:03:10,023 line:-2
set the input properties,
and get the output image.


57
00:03:10,490 --> 00:03:14,361 line:-2
Here are some more reasons why you
want to write custom CIKernels in Metal:


58
00:03:14,928 --> 00:03:17,431 line:-2
In addition to
the usual features of CIKernels,


59
00:03:17,497 --> 00:03:20,234 line:-2
such as automatic tiling
and concatenation,


60
00:03:20,300 --> 00:03:24,104 line:-2
by writing them in Metal,
you will reduce runtime compile time


61
00:03:24,171 --> 00:03:26,707 line:-2
by shifting that work
to when your app is built.


62
00:03:27,341 --> 00:03:30,878 line:-2
Also, you'll give your kernels access
to high performance features


63
00:03:30,944 --> 00:03:34,715 line:-2
such as gather-reads, group-writes,
and half-float math,


64
00:03:34,781 --> 00:03:37,784 line:-1
and make your life easier as a developer


65
00:03:37,851 --> 00:03:42,322 line:-2
by syntax highlighting as you type
and syntax checking when you build.


66
00:03:42,923 --> 00:03:45,893 line:-2
Let's go over an example
of writing CIKernels in Metal.


67
00:03:46,527 --> 00:03:48,862 line:0
For today's session,
I will demonstrate this


68
00:03:48,929 --> 00:03:51,565 line:0
with a kernel that is shown
in the presentation,


69
00:03:51,632 --> 00:03:54,835 line:0
Edit and Playback HDR Video
with AVFoundation.


70
00:03:55,302 --> 00:03:59,139 line:-2
It is very easy to write
a custom CIKernel for this effect.


71
00:03:59,573 --> 00:04:03,677 line:-2
First, at the top of the source you will
include the Core-Image-dot-h header


72
00:04:03,744 --> 00:04:06,613 line:-2
so that you get access to
all the normal Metal classes


73
00:04:06,680 --> 00:04:09,983 line:-2
as well as the additional classes
that Core Image provides.


74
00:04:10,551 --> 00:04:14,688 line:-2
Next, you will declare the function
for the kernel which must be extern "C."


75
00:04:15,656 --> 00:04:17,558 line:-1
This example is a CI-Color-Kernel,


76
00:04:17,624 --> 00:04:21,394 line:-2
so the function must return a
float4 pixel and take some arguments.


77
00:04:22,196 --> 00:04:25,399 line:-2
Here, the first argument
is a Core Image sample_t


78
00:04:25,465 --> 00:04:27,901 line:-2
that represents a pixel
from an input image.


79
00:04:28,502 --> 00:04:33,006 line:-2
This pixel is a linear
premultiplied RGBA float4,


80
00:04:33,073 --> 00:04:36,343 line:-2
which is suitable
for either SDR or HDR images.


81
00:04:37,711 --> 00:04:40,314 line:-2
The last argument
is a Core Image destination


82
00:04:40,380 --> 00:04:43,317 line:-2
that provides the coordinate
of the pixel to return.


83
00:04:43,383 --> 00:04:45,185 line:-1
In the implementation of this kernel,


84
00:04:45,252 --> 00:04:50,457 line:-2
we use the dest-coord x and y values to
determine which diagonal line we are on.


85
00:04:50,958 --> 00:04:55,529 line:-2
Then we use some simple math to calculate
if we should be on a zebra stripe or not.


86
00:04:56,797 --> 00:05:00,067 line:-2
If we are on a zebra stripe
and the current pixel sample is brighter


87
00:05:00,133 --> 00:05:03,270 line:-2
than the normal
Standard Dynamic Range white of one,


88
00:05:03,871 --> 00:05:06,240 line:-1
then we will return a bright red pixel.


89
00:05:06,673 --> 00:05:09,243 line:-2
Otherwise, we return
the input sample unchanged.


90
00:05:09,943 --> 00:05:11,044 line:-1
For more details,


91
00:05:11,111 --> 00:05:15,449 line:-2
see my presentation on "Build Metal-Based
Core Image Kernels with Xcode."


92
00:05:17,417 --> 00:05:21,922 line:-2
The last topic to discuss is choosing
the best view class for your video app.


93
00:05:21,989 --> 00:05:24,992 line:-1
If your app applies effects to video,


94
00:05:25,058 --> 00:05:29,596 line:-2
it is important to avoid view classes
like UI-Image-View and NS-Image-View


95
00:05:29,663 --> 00:05:32,432 line:-2
that are designed
for displaying static content.


96
00:05:32,866 --> 00:05:35,502 line:-1
The easiest view class is AV-Player-View


97
00:05:35,569 --> 00:05:40,007 line:-2
because it automatically does the work
to display filtered video to the view.


98
00:05:40,073 --> 00:05:44,645 line:-2
A more flexible option that can also
give great performance is MetalKit View.


99
00:05:45,112 --> 00:05:48,949 line:-2
I will discuss how to use both
with Core Image in the next few slides.


100
00:05:50,117 --> 00:05:52,452 line:-1
Using AV-Player-View is really simple.


101
00:05:53,253 --> 00:05:56,757 line:-2
The key object
is an AV-Mutable-Video-Composition,


102
00:05:57,057 --> 00:06:00,627 line:-2
which is initialized with a video asset
and a handler block.


103
00:06:01,228 --> 00:06:03,764 line:-2
This block is called
for every frame in the video,


104
00:06:03,830 --> 00:06:07,768 line:-2
and it is passed an AV-Synchronous-
CI-Image-Filtering-Request.


105
00:06:07,835 --> 00:06:09,236 line:-1
When your block is called,


106
00:06:09,303 --> 00:06:15,342 line:-2
all you need to do is create a CI-Filter,
set its inputs and get its output image.


107
00:06:15,409 --> 00:06:18,445 line:-2
Then you just need give that image
to the request object.


108
00:06:21,048 --> 00:06:23,750 line:-2
A great feature in Xcode
is that while debugging,


109
00:06:23,817 --> 00:06:25,919 line:-1
you can hover over a CI-Image variable


110
00:06:25,986 --> 00:06:29,756 line:-2
and a small popover will appear
that shows the object's address,


111
00:06:29,823 --> 00:06:32,926 line:-2
but if you then click on the eye symbol,
a new window will appear


112
00:06:32,993 --> 00:06:37,097 line:-2
that shows a visual representation
of the recipe that makes up the image.


113
00:06:37,698 --> 00:06:39,533 line:-1
And if you look at this even closer,


114
00:06:39,600 --> 00:06:43,937 line:0
you can see that the input video frame
is a 10-bit HDR surface,


115
00:06:44,004 --> 00:06:46,473 line:0
and Core Image
has automatically color managed it


116
00:06:46,540 --> 00:06:49,943 line:0
from HLG to the Core Image working space.


117
00:06:50,010 --> 00:06:53,080 line:-2
Using a MetalKit View
to display your filtered videos


118
00:06:53,146 --> 00:06:55,282 line:-1
is another option you might consider.


119
00:06:56,583 --> 00:06:58,919 line:-2
Here's how to get the best performance
with Core Image


120
00:06:58,986 --> 00:07:00,454 line:-1
when drawing to a MetalKit View.


121
00:07:00,954 --> 00:07:03,657 line:-2
The first thing you'll want to do
in your MetalKit View class


122
00:07:03,724 --> 00:07:06,393 line:-2
is override the init
with frame and device.


123
00:07:06,994 --> 00:07:10,797 line:-2
The init method is the best time
to create a CIContext for the view.


124
00:07:10,864 --> 00:07:15,969 line:-2
Be sure to set framebuffer-Only to false
so that Core Image can use Metal Compute.


125
00:07:16,637 --> 00:07:19,373 line:-1
On macOS, if your view supports HDR,


126
00:07:19,439 --> 00:07:24,111 line:0
then you should set
the color-Pixel-Format to rgba16Float


127
00:07:24,178 --> 00:07:28,448 line:0
and also set the wants-Extended-
Dynamic-Range-Content to true.


128
00:07:28,515 --> 00:07:30,817 line:-2
The next thing you'll want to do
in your MetalKit View


129
00:07:30,884 --> 00:07:32,986 line:-1
is implement the draw-in view method.


130
00:07:33,053 --> 00:07:37,124 line:-2
In this method we create
a CI-Render-Destination in a special way.


131
00:07:37,724 --> 00:07:42,362 line:-2
We create the destination with the correct
width, height and pixel format,


132
00:07:42,429 --> 00:07:44,631 line:-1
but instead of passing in a Metal texture,


133
00:07:44,698 --> 00:07:47,568 line:-2
we pass in a block
that will return the texture.


134
00:07:47,634 --> 00:07:50,804 line:-2
This allows the CIContext
to start enqueueing Metal work


135
00:07:50,871 --> 00:07:53,574 line:-2
before waiting on the previous frame
to complete.


136
00:07:54,107 --> 00:07:55,809 line:-1
Next we tell our CIContext


137
00:07:55,876 --> 00:07:59,179 line:-2
to start the task
of rendering the image to the destination.


138
00:07:59,947 --> 00:08:02,716 line:-2
And last step
is to create a command buffer


139
00:08:02,783 --> 00:08:05,552 line:-2
to present the current drawable
to the view.


140
00:08:06,353 --> 00:08:08,488 line:-2
So, that concludes
my step-by-step discussion


141
00:08:08,555 --> 00:08:12,192 line:-2
on how to get great performance
with Core Image in your video app.


142
00:08:12,259 --> 00:08:15,662 line:-2
We have reviewed
how best to create CIContexts,


143
00:08:15,729 --> 00:08:18,532 line:-1
apply CIKernels and render to your view.


144
00:08:19,233 --> 00:08:23,537 line:-2
I hope that this allows you to add
great visual effects to your apps' videos.


145
00:08:23,871 --> 00:08:27,841 line:-2
Thank you very much,
and enjoy the rest of WWDC 2020.

