1
00:00:03,804 --> 00:00:06,907 line:-1
Hello and welcome to WWDC.


2
00:00:08,742 --> 00:00:10,978 line:0
Welcome to what's new in Mac Catalyst.


3
00:00:11,044 --> 00:00:12,579 line:0
My name is Jason Beaver,


4
00:00:12,646 --> 00:00:15,148 line:0
and I'll be joined later
by my colleague Brycen Wershing.


5
00:00:15,215 --> 00:00:18,085 line:-2
As you all know,
Mac Catalyst is the infrastructure


6
00:00:18,151 --> 00:00:21,455 line:-2
that allows us to bring iOS applications
to macOS.


7
00:00:22,623 --> 00:00:26,527 line:-2
We introduced Mac Catalyst
in macOS Catalina as public API,


8
00:00:26,593 --> 00:00:29,396 line:-2
and the developer community
has used this technology


9
00:00:29,463 --> 00:00:31,865 line:-2
to bring some amazing iPad apps
to the Mac.


10
00:00:31,932 --> 00:00:34,735 line:-2
The apps can take advantage
of the much larger display,


11
00:00:34,801 --> 00:00:37,638 line:-2
and many have added custom toolbars
and menus.


12
00:00:38,205 --> 00:00:41,241 line:-2
They get a great deal
of the macOS look and feel automatically,


13
00:00:41,308 --> 00:00:43,610 line:-1
making them feel right at home on the Mac.


14
00:00:44,611 --> 00:00:45,946 line:-1
In macOS Big Sur,


15
00:00:46,013 --> 00:00:50,050 line:-2
I'm excited to announce a number
of improvements to Mac Catalyst


16
00:00:50,117 --> 00:00:54,388 line:-2
that will make it easier for you
to bring your iOS application to macOS


17
00:00:54,454 --> 00:00:57,824 line:-2
and help you make your app
an even better experience on the Mac.


18
00:00:58,192 --> 00:01:00,794 line:-2
One of the biggest challenges
developers have faced


19
00:01:00,861 --> 00:01:03,463 line:-2
when trying to bring
their iOS applications to the Mac


20
00:01:03,530 --> 00:01:07,634 line:-2
is that many iOS frameworks
weren't available to Mac Catalyst apps.


21
00:01:08,402 --> 00:01:10,571 line:-1
We've worked hard over the past year


22
00:01:10,637 --> 00:01:14,141 line:-2
to bring dozens of additional
iOS frameworks to Mac Catalyst,


23
00:01:14,208 --> 00:01:16,210 line:-1
or to bring over missing functionality


24
00:01:16,276 --> 00:01:19,813 line:-2
so that your applications are even
more compatible with macOS.


25
00:01:20,614 --> 00:01:24,084 line:0
We've even brought over frameworks
that aren't available on macOS


26
00:01:24,151 --> 00:01:27,120 line:0
to make it easier for you
to bring your application to Mac Catalyst


27
00:01:27,187 --> 00:01:30,991 line:0
without having to conditionally
exclude code when compiling for the Mac.


28
00:01:32,059 --> 00:01:35,796 line:-2
For example, if your application
is dependent on ARKit,


29
00:01:35,863 --> 00:01:39,566 line:-2
previously, you would need to remove
the framework from your macOS target


30
00:01:39,633 --> 00:01:43,136 line:-2
and conditionalize your code
so that you didn't reference ARKit symbols


31
00:01:43,203 --> 00:01:44,838 line:-1
when building for macOS.


32
00:01:46,173 --> 00:01:49,643 line:-2
Now, if you're targeting macOS Big Sur
or later,


33
00:01:49,710 --> 00:01:52,446 line:-2
your iOS code can work
exactly the same way it would


34
00:01:52,513 --> 00:01:54,982 line:-1
on an iOS device that doesn't support AR.


35
00:01:55,482 --> 00:01:58,085 line:-1
You can link ARKit and use runtime checks


36
00:01:58,151 --> 00:02:00,721 line:-2
to determine whether your AR features
should be enabled.


37
00:02:01,288 --> 00:02:03,624 line:-2
This, of course,
goes for dozens of other frameworks


38
00:02:03,690 --> 00:02:07,261 line:-2
that are now available in the macOS SDK
for Mac Catalyst apps.


39
00:02:08,127 --> 00:02:11,365 line:-2
Now let's focus on some of the new APIs
we've added in the past year.


40
00:02:12,432 --> 00:02:16,303 line:-2
We recently added support for handling
physical keyboard events in iOS,


41
00:02:16,370 --> 00:02:18,872 line:-2
and these are available
to Mac Catalyst applications


42
00:02:18,939 --> 00:02:20,941 line:-1
in the latest macOS Catalina update.


43
00:02:21,775 --> 00:02:23,544 line:-1
These can be added to your application


44
00:02:23,610 --> 00:02:26,847 line:-2
by implementing the methods
pressesBegan, and pressesEnded


45
00:02:26,914 --> 00:02:29,283 line:-2
on one of the responders
in your responder chain.


46
00:02:29,683 --> 00:02:33,854 line:-2
Games can especially benefit from this
as an alternative to multi-touch.


47
00:02:34,254 --> 00:02:37,057 line:-2
See the "support hardware keyboards
in your apps" session


48
00:02:37,124 --> 00:02:38,692 line:-1
where this will be covered in-depth.


49
00:02:39,426 --> 00:02:42,496 line:-2
In addition,
the focus engine APIs from tvOS


50
00:02:42,563 --> 00:02:45,065 line:-1
are now available to apps in Mac Catalyst.


51
00:02:45,132 --> 00:02:48,202 line:-2
This allows you to set
focus group identifiers on your views


52
00:02:48,268 --> 00:02:50,037 line:-1
to control which views are related,


53
00:02:50,103 --> 00:02:52,573 line:-2
and receive callbacks
when the focus is changed


54
00:02:52,639 --> 00:02:54,241 line:-1
to allow you to update your UI.


55
00:02:55,108 --> 00:02:58,212 line:-2
See the technical documentation
for details on how to customize


56
00:02:58,278 --> 00:03:00,214 line:-1
what can be focused in your application.


57
00:03:01,014 --> 00:03:03,217 line:-1
UICollectionView and UITableView


58
00:03:03,283 --> 00:03:05,686 line:-2
allows the selection
to follow the keyboard focus.


59
00:03:06,053 --> 00:03:08,422 line:-1
For example, users can use the arrow keys


60
00:03:08,488 --> 00:03:10,791 line:-2
to navigate between the cells
in a sidebar.


61
00:03:11,258 --> 00:03:13,193 line:-2
If you're navigating a table
or collection view


62
00:03:13,260 --> 00:03:14,595 line:-1
in a detail view though,


63
00:03:14,661 --> 00:03:16,964 line:-2
keyboard navigation
acts more as a highlight.


64
00:03:17,030 --> 00:03:19,333 line:-1
In this case, hitting enter or space


65
00:03:19,399 --> 00:03:21,768 line:-2
would trigger the selection
of the focused cell.


66
00:03:22,302 --> 00:03:25,939 line:-2
You can override this default behavior
by changing selectionFollowsFocus.


67
00:03:26,406 --> 00:03:30,644 line:-2
UISceneActivationRequestOptions.
CollectionJoinBehavior


68
00:03:30,711 --> 00:03:33,480 line:-2
allows you to specify
the window creation behavior.


69
00:03:33,547 --> 00:03:36,984 line:-2
By specifying the collection join behavior
when activating a scene,


70
00:03:37,050 --> 00:03:40,487 line:-2
you can control whether it appears
as a new tab in an existing window,


71
00:03:40,554 --> 00:03:42,556 line:-1
or it appears as a new top-level window.


72
00:03:43,056 --> 00:03:44,525 line:-1
In an update to Catalina,


73
00:03:44,591 --> 00:03:48,328 line:-2
we exposed the AppKit class
NSCursor to Mac Catalyst app.


74
00:03:48,395 --> 00:03:50,497 line:-2
This allows you to hide the cursor
in your app,


75
00:03:50,564 --> 00:03:53,133 line:-2
for example,
when starting to play a full-screen video.


76
00:03:53,834 --> 00:03:56,637 line:-2
NSCursor also allows you
to change the cursor's image.


77
00:03:57,304 --> 00:04:00,073 line:-2
Here are some of the cursor images
that are available to you.


78
00:04:00,140 --> 00:04:03,544 line:-2
These cursor images can be used
over certain regions of your application


79
00:04:03,610 --> 00:04:06,246 line:-2
to help your users understand
how to interact with it.


80
00:04:06,947 --> 00:04:10,384 line:-2
UIKit now includes a color well
and a color-picker view controller.


81
00:04:10,684 --> 00:04:11,885 line:-1
In Mac Catalyst apps,


82
00:04:11,952 --> 00:04:14,755 line:-2
this automatically brings up
the standard system color-picker


83
00:04:14,821 --> 00:04:16,290 line:-1
that is provided by AppKit.


84
00:04:17,257 --> 00:04:20,594 line:-2
UIDatePicker now uses the AppKit-provided
inline date-picker


85
00:04:20,661 --> 00:04:23,897 line:-2
to make Mac Catalyst apps
feel even more at home on the Mac.


86
00:04:24,298 --> 00:04:27,000 line:-2
UIButtons now support bringing up
pull-down menus.


87
00:04:27,301 --> 00:04:30,971 line:-2
And on macOS Big Sur,
they are regular Mac pull-down menus.


88
00:04:31,405 --> 00:04:33,774 line:0
You can find more about all
of these controls


89
00:04:33,841 --> 00:04:36,643 line:0
at the "UIKit Menus, Pickers,
and Controls" session.


90
00:04:37,244 --> 00:04:40,480 line:-2
Sheets are now presented
in their own separate NSWindow.


91
00:04:41,014 --> 00:04:42,583 line:-1
These windows are resizable


92
00:04:42,649 --> 00:04:46,053 line:-2
but default to the preferred content size
of the modal view controller.


93
00:04:46,353 --> 00:04:49,423 line:-2
Using Autolayout will ensure
that your content resizes well.


94
00:04:50,157 --> 00:04:53,393 line:-2
Popover presentations are now presented
in NSPopovers,


95
00:04:53,460 --> 00:04:56,496 line:-2
which have their own separate windows
that extend outside


96
00:04:56,563 --> 00:04:58,465 line:-2
of the presenting
view controller's window.


97
00:04:58,932 --> 00:05:02,870 line:-2
And finally, UISplitViewController
now supports three columns,


98
00:05:02,936 --> 00:05:04,972 line:-1
and the leading column can be a sidebar.


99
00:05:05,038 --> 00:05:09,009 line:-2
Of course, sidebars were supported
by Mac Catalyst apps in Catalina,


100
00:05:09,076 --> 00:05:12,045 line:-2
but with Big Sur,
we have made them even more Mac-like.


101
00:05:12,513 --> 00:05:13,714 line:-1
In macOS Big Sur,


102
00:05:13,780 --> 00:05:17,117 line:-1
UIKit and AppKit fully support SF Symbols,


103
00:05:17,184 --> 00:05:19,953 line:-2
and they are heavily utilized
in the system applications.


104
00:05:20,654 --> 00:05:24,491 line:-2
SF Symbols integrate seamlessly
with the San Francisco system font,


105
00:05:24,558 --> 00:05:27,794 line:-2
so the symbols automatically ensure
optical vertical alignment


106
00:05:27,861 --> 00:05:29,897 line:-1
with text for all weights and sizes.


107
00:05:30,464 --> 00:05:34,168 line:-2
Adopting SF Symbols will make your app
work and feel even better


108
00:05:34,234 --> 00:05:35,836 line:-1
on iOS and macOS.


109
00:05:36,537 --> 00:05:39,439 line:-1
Podcasts uses SF Symbols in the sidebar


110
00:05:39,506 --> 00:05:41,942 line:-2
so that it can adapt well
to different sizes


111
00:05:42,009 --> 00:05:45,612 line:-2
without having to include image assets
for each supported size.


112
00:05:46,146 --> 00:05:48,215 line:-2
Now I'd like to hand it over
to my colleague, Brycen,


113
00:05:48,282 --> 00:05:50,951 line:-2
to take you through
some additional changes to Mac Catalyst.


114
00:05:51,385 --> 00:05:52,486 line:-1
Thanks, Jason.


115
00:05:52,719 --> 00:05:55,222 line:-2
Hello. I'm Brycen Wershing
from Core Darwin,


116
00:05:55,289 --> 00:05:56,957 line:-2
and I'm going to take you through
a few more


117
00:05:57,024 --> 00:05:59,326 line:-2
of the new features
in Mac Catalyst this year.


118
00:05:59,726 --> 00:06:02,930 line:0
First, a short peek at the new ways
that you can optimize UI.


119
00:06:03,630 --> 00:06:06,400 line:-2
"Optimized for Mac"
is a new Mac Catalyst mode


120
00:06:06,466 --> 00:06:07,801 line:-1
that you can choose for your apps


121
00:06:07,868 --> 00:06:11,471 line:-2
that lets you take that extra step
towards a truly refined Mac experience.


122
00:06:12,039 --> 00:06:16,777 line:-2
It changes the default scaling
from the 77% we have today, to 100%,


123
00:06:16,844 --> 00:06:19,546 line:-2
which will yield more crisp text
and graphics


124
00:06:19,613 --> 00:06:22,549 line:-2
at the cost of potentially disturbing
your application's layout.


125
00:06:23,050 --> 00:06:25,586 line:-2
This change is particularly noticeable
for text,


126
00:06:25,986 --> 00:06:28,021 line:-2
such as the word "tarte"
in our sample app.


127
00:06:28,689 --> 00:06:32,626 line:-2
By increasing the default scaling,
"tarte" will look more clear and crisp.


128
00:06:34,461 --> 00:06:37,231 line:-2
Optimized for Mac also allows
various controls


129
00:06:37,297 --> 00:06:40,234 line:-2
to change your app's metrics and behaviors
to match the Mac.


130
00:06:40,634 --> 00:06:44,037 line:-2
There's also some additional API
for access to things like checkboxes,


131
00:06:44,104 --> 00:06:46,807 line:-2
which have not previously been available
to Catalyst apps.


132
00:06:46,874 --> 00:06:49,576 line:-2
This is the largest new addition
to Mac Catalyst this year.


133
00:06:49,643 --> 00:06:50,644 line:-1
And you can check out


134
00:06:50,711 --> 00:06:53,447 line:0
the "Optimizing Catalyst UI
for the Mac Idiom" session


135
00:06:53,514 --> 00:06:56,850 line:0
to learn all about it, and how to adopt
“Optimized for Mac” in your apps.


136
00:06:57,317 --> 00:06:59,753 line:-1
Next up, let's take a look at SwiftUI.


137
00:07:00,020 --> 00:07:02,923 line:-2
If your app is written in SwiftUI,
you don't need Catalyst.


138
00:07:02,990 --> 00:07:06,660 line:-2
But if you're using SwiftUI
alongside UIKit in an iPad app,


139
00:07:06,727 --> 00:07:10,063 line:-2
the same code will also work
in the context of Mac Catalyst.


140
00:07:10,464 --> 00:07:13,000 line:-2
This year,
SwiftUI has a number of new features


141
00:07:13,066 --> 00:07:14,868 line:-1
that will work wonderfully with Catalyst.


142
00:07:15,369 --> 00:07:17,104 line:-1
Looking at some examples,


143
00:07:17,171 --> 00:07:20,674 line:-2
commands in SwiftUI work delightfully
for Mac Catalyst apps.


144
00:07:20,908 --> 00:07:24,611 line:-2
This integrates seamlessly
with Mac features, such as the main menu.


145
00:07:25,779 --> 00:07:27,548 line:-1
The new toolbar support in SwiftUI


146
00:07:27,614 --> 00:07:30,384 line:-2
will work just as expected
in Mac Catalyst.


147
00:07:30,450 --> 00:07:32,219 line:-1
With the use of semantic placement,


148
00:07:32,286 --> 00:07:35,422 line:-2
toolbar items can be automatically placed
in the Mac toolbar


149
00:07:35,489 --> 00:07:37,357 line:-1
with no extra adoption needed.


150
00:07:37,958 --> 00:07:41,261 line:-2
SwiftUI works exceedingly well
when apps are optimized for Mac,


151
00:07:41,328 --> 00:07:45,432 line:-2
which is expanded on in the "Optimizing
Catalyst UI for the Mac Idiom" session.


152
00:07:46,066 --> 00:07:49,469 line:-2
Generally, the parts of a UIKit iPad app
that use SwiftUI


153
00:07:49,536 --> 00:07:51,471 line:-1
will continue to work in Mac Catalyst.


154
00:07:52,039 --> 00:07:55,676 line:0
For more information about SwiftUI,
check out "What's New in SwiftUI."


155
00:07:56,376 --> 00:07:58,145 line:-2
Now let's take a look
at something different:


156
00:07:58,212 --> 00:07:59,580 line:-1
Application Lifecycle.


157
00:08:00,247 --> 00:08:03,250 line:-2
Application Lifecycle in UIKit
revolves around a few states


158
00:08:03,317 --> 00:08:06,753 line:-2
that your application can be in
depending on where the user's focus is.


159
00:08:06,820 --> 00:08:09,289 line:-2
There are some big changes to this
in macOS Big Sur.


160
00:08:09,656 --> 00:08:12,492 line:-2
As a quick refresher,
on both iPad and Mac,


161
00:08:12,559 --> 00:08:15,929 line:-2
an app, when in front of the user,
is in the foreground active state.


162
00:08:16,530 --> 00:08:18,065 line:-1
When the app moves to the background,


163
00:08:18,131 --> 00:08:20,334 line:-2
such as when you switch
to another app on the iPad,


164
00:08:20,400 --> 00:08:22,769 line:-2
it will transition through
the foreground inactive state


165
00:08:22,836 --> 00:08:24,037 line:-1
to the background state.


166
00:08:24,404 --> 00:08:27,474 line:-2
On Mac, when the user quits the app,
the app will terminate.


167
00:08:28,208 --> 00:08:30,310 line:-1
When transitioning between app states,


168
00:08:30,377 --> 00:08:32,913 line:-2
the delegate calls
and notifications on Mac,


169
00:08:32,980 --> 00:08:35,883 line:-2
and the sequences thereof,
are the same as on an iPad.


170
00:08:36,149 --> 00:08:39,186 line:0
If you want to learn more about
what happens during a state change,


171
00:08:39,253 --> 00:08:41,788 line:0
take a look at "Taking iPad Apps
for the Mac to the Next Level"


172
00:08:41,855 --> 00:08:43,823 line:0
from WWDC 2019.


173
00:08:44,291 --> 00:08:46,193 line:-2
Although what happens
during a state change


174
00:08:46,260 --> 00:08:47,895 line:-1
is the same on iPad and Mac,


175
00:08:47,961 --> 00:08:51,031 line:-2
there's not a direct parallel
for when state changes occur.


176
00:08:51,331 --> 00:08:54,668 line:-2
That being said, there are some
approximations that can be made.


177
00:08:54,735 --> 00:08:56,670 line:-1
This year, we've added more scenarios


178
00:08:56,737 --> 00:08:59,106 line:-2
where a scene may transition
to the background state,


179
00:08:59,173 --> 00:09:01,341 line:-2
even while the app is perceived
to be running.


180
00:09:01,708 --> 00:09:03,744 line:-2
It's worth mentioning
that the overall app state


181
00:09:03,810 --> 00:09:06,747 line:-2
in a multi-window app
depends on the activation state


182
00:09:06,813 --> 00:09:08,182 line:-1
of the individual scenes.


183
00:09:08,248 --> 00:09:11,618 line:-2
Considering this, you will likely want
to handle state changes per scene.


184
00:09:12,085 --> 00:09:15,489 line:-2
A scene will enter the background states
when the user no longer perceives


185
00:09:15,556 --> 00:09:18,759 line:-2
the window that contains that scene
to be part of an active space.


186
00:09:19,159 --> 00:09:21,628 line:-2
For example,
when a window becomes minimized,


187
00:09:21,695 --> 00:09:23,830 line:-2
or the space with the window
moves out of view,


188
00:09:23,897 --> 00:09:25,132 line:-1
or the app is hidden,


189
00:09:25,199 --> 00:09:27,267 line:-2
the scene will transition
to the background.


190
00:09:27,768 --> 00:09:30,370 line:-2
In addition,
the app as a whole will be foreground


191
00:09:30,437 --> 00:09:32,306 line:-2
whenever at least one window
is foreground,


192
00:09:32,372 --> 00:09:34,508 line:-2
or if the app has control
over the menu bar.


193
00:09:35,209 --> 00:09:38,212 line:-2
Let me be clear, your app will not
transition to the background


194
00:09:38,278 --> 00:09:41,548 line:-2
when it gains or loses the menu bar
while in an active space,


195
00:09:41,615 --> 00:09:43,350 line:-1
or when a window becomes occluded.


196
00:09:43,817 --> 00:09:48,522 line:-2
In summary, we've made Mac Catalyst
Application Lifecycle more iOS-like,


197
00:09:48,589 --> 00:09:52,259 line:-2
so that your apps can more easily get
the behavior that your users expect.


198
00:09:52,893 --> 00:09:55,829 line:-2
Looking at an example,
say your app is a game.


199
00:09:55,896 --> 00:09:58,298 line:-2
Depending on how that game interacts
with the user,


200
00:09:58,665 --> 00:10:01,235 line:-2
you may or may not wish
to have that game pause


201
00:10:01,301 --> 00:10:02,970 line:-1
when it moves to the background.


202
00:10:03,036 --> 00:10:05,539 line:-2
Typically, you'll want the same behavior
as on iPad.


203
00:10:05,806 --> 00:10:08,842 line:-2
But consider carefully the best behavior
for your app on a Mac.


204
00:10:09,309 --> 00:10:12,813 line:-2
Be aware that while Mac Catalyst apps
do get all the benefits of AppNap,


205
00:10:12,880 --> 00:10:15,048 line:-2
they do not get the benefit
of being suspended,


206
00:10:15,115 --> 00:10:16,450 line:-1
even when in the background.


207
00:10:17,017 --> 00:10:20,187 line:-2
Now let's take a look at what's new
for Mac Catalyst Extensions.


208
00:10:20,821 --> 00:10:23,390 line:-2
Photo editing extensions
are now available.


209
00:10:23,457 --> 00:10:26,260 line:-2
You can bring your great
photo-editing extensions to the Mac.


210
00:10:26,960 --> 00:10:30,697 line:0
Mac Catalyst extensions now have
a more iOS-like lifecycle.


211
00:10:30,764 --> 00:10:33,133 line:0
One example of this
is that when not in use,


212
00:10:33,200 --> 00:10:36,370 line:0
rather than being terminated,
extensions will be suspended,


213
00:10:36,436 --> 00:10:39,006 line:0
and they will be unsuspended immediately
when needed.


214
00:10:39,339 --> 00:10:43,343 line:-2
We've also brought iOS-style memory limits
and memory pressure controls to the Mac,


215
00:10:43,410 --> 00:10:46,146 line:-2
making sure that your extensions behave
as expected


216
00:10:46,213 --> 00:10:47,881 line:-1
when the system is under memory pressure.


217
00:10:48,482 --> 00:10:51,952 line:-2
When you put all this together,
it means that more of your iOS extensions


218
00:10:52,019 --> 00:10:54,988 line:-2
will work as expected
right out of the box on macOS.


219
00:10:55,055 --> 00:10:57,191 line:-2
There's nothing you need to do
to get this behavior,


220
00:10:57,257 --> 00:10:59,927 line:-2
it will apply automatically
to all Catalyst extensions.


221
00:11:00,527 --> 00:11:04,331 line:-2
Great WidgetKit iPad widgets
can also make great Mac widgets.


222
00:11:04,398 --> 00:11:06,233 line:-1
Simply opt in to Mac Catalyst


223
00:11:06,300 --> 00:11:08,802 line:-2
and your widgets will work
just as expected on Mac.


224
00:11:09,403 --> 00:11:11,371 line:0
Check out "Getting Started with WidgetKit"


225
00:11:11,438 --> 00:11:13,473 line:0
to learn all about how to create
WidgetKit widgets


226
00:11:13,540 --> 00:11:15,108 line:0
for iOS and Mac Catalyst.


227
00:11:15,175 --> 00:11:18,745 line:-2
Now let's take a look at a new feature
this year, Universal Purchase.


228
00:11:19,146 --> 00:11:22,616 line:-2
Now, when you bring your iPad app
over to the Mac via Catalyst,


229
00:11:22,683 --> 00:11:26,820 line:-2
your existing users on iOS no longer
have to purchase your app a second time.


230
00:11:27,287 --> 00:11:30,724 line:-2
In addition, the capabilities
and App Store metadata of your app


231
00:11:30,791 --> 00:11:33,060 line:-1
can be managed consistently in one place.


232
00:11:33,527 --> 00:11:36,663 line:-2
In other words, any purchase
of a Universal Purchase app


233
00:11:36,730 --> 00:11:39,933 line:-2
will result in the user having access
to the app across all platforms.


234
00:11:40,634 --> 00:11:44,037 line:-2
All new Mac Catalyst apps are opted in
to Universal Purchase,


235
00:11:44,104 --> 00:11:45,606 line:-1
and may opt out if they choose.


236
00:11:45,939 --> 00:11:49,676 line:-2
To opt out, simply uncheck
the "Use iOS Bundle Identifier" checkbox


237
00:11:49,743 --> 00:11:50,944 line:-1
in your project settings.


238
00:11:51,578 --> 00:11:53,413 line:-1
If you have a non-Catalyst Mac app,


239
00:11:53,480 --> 00:11:56,683 line:-2
or if you have an existing Catalyst app
created in Catalina,


240
00:11:56,750 --> 00:11:59,753 line:-2
and you want to adopt Universal Purchase
with an iOS app,


241
00:12:00,220 --> 00:12:02,990 line:-2
see the documentation
on "Offering Universal Purchase"


242
00:12:03,056 --> 00:12:05,225 line:-2
for instructions on how to enable this
for your app.


243
00:12:05,425 --> 00:12:09,696 line:-2
Next up, let's look at Mac Catalyst
in the context of the New Look of macOS.


244
00:12:10,063 --> 00:12:12,466 line:-2
Many of the new Mac UIs
that have been introduced


245
00:12:12,533 --> 00:12:15,135 line:-2
are also available
to help make Catalyst apps.


246
00:12:15,202 --> 00:12:18,338 line:-2
In fact, most of this will work
automatically for your apps.


247
00:12:18,672 --> 00:12:21,441 line:-2
Let's walk through a few examples
of how your app can take advantage


248
00:12:21,508 --> 00:12:22,442 line:-1
of this new UI.


249
00:12:23,210 --> 00:12:25,479 line:-2
One new feature this year
is toolbar styles.


250
00:12:25,546 --> 00:12:28,415 line:-2
You can experiment with this
and make sure that you get a toolbar look


251
00:12:28,482 --> 00:12:29,850 line:-1
that's right for your app.


252
00:12:29,917 --> 00:12:32,986 line:-2
All these looks are now available
to Catalyst applications


253
00:12:33,053 --> 00:12:35,255 line:-1
via UITitlebarToolbarStyle.


254
00:12:35,622 --> 00:12:38,592 line:-2
In addition, you can set the toolbar style
per window


255
00:12:38,659 --> 00:12:40,694 line:-1
on the UITitlebarForWindows.


256
00:12:40,761 --> 00:12:43,497 line:-2
For more information
on all the new toolbar styles on Mac,


257
00:12:43,564 --> 00:12:46,166 line:0
check out the "Adopting the New Look
of macOS" session.


258
00:12:47,100 --> 00:12:49,670 line:-2
Next, let's take a look
at separator items,


259
00:12:49,736 --> 00:12:52,773 line:-2
a tool to help position toolbar items
in Mac Catalyst.


260
00:12:53,307 --> 00:12:55,742 line:-2
When you're crafting the look
of your toolbar items,


261
00:12:55,809 --> 00:12:58,612 line:-2
you may want your items to appear
in different areas of your app.


262
00:12:58,979 --> 00:13:02,015 line:-2
UIKit provides separator identifiers
to help you with this.


263
00:13:02,282 --> 00:13:05,018 line:-2
When you add these separator identifiers
to a toolbar,


264
00:13:05,085 --> 00:13:07,321 line:-2
we will automatically create zones
in the app


265
00:13:07,387 --> 00:13:09,323 line:-1
bounded by the position of the divider.


266
00:13:09,690 --> 00:13:12,693 line:-2
For example, in the Messages toolbar,
from left to right,


267
00:13:12,759 --> 00:13:15,095 line:-1
the compose icon is in the sidebar,


268
00:13:15,162 --> 00:13:18,565 line:-2
then a sidebar separator item indicates
a jump out of the sidebar.


269
00:13:18,966 --> 00:13:22,336 line:-2
After that, the "To" field is displayed
left-justified,


270
00:13:22,402 --> 00:13:26,507 line:-2
then, a flexible space sidebar item
indicates a change in justification.


271
00:13:26,573 --> 00:13:29,843 line:-2
And finally, the Info icon,
which ends up on the far right of the app.


272
00:13:30,477 --> 00:13:32,913 line:-2
The code that describes
the Messages toolbar layout


273
00:13:32,980 --> 00:13:34,982 line:-1
is simple and easy to understand.


274
00:13:35,215 --> 00:13:39,853 line:-2
Separator Identifiers are simply added
to toolbarDefaultItemIdentifiers method.


275
00:13:40,621 --> 00:13:43,223 line:-2
That's all that needs to be done
to get this behavior automatic.


276
00:13:43,924 --> 00:13:45,792 line:-1
Now let's look at accent colors.


277
00:13:46,059 --> 00:13:49,329 line:-2
This year, you have the ability
to specify a brand color


278
00:13:49,396 --> 00:13:51,164 line:-1
that is used for things like selection.


279
00:13:51,498 --> 00:13:54,902 line:-2
This color will work just as well
on both iPad and on the Mac.


280
00:13:54,968 --> 00:13:57,671 line:-2
You simply create a symbolic color
in the Assets catalog,


281
00:13:57,738 --> 00:13:59,506 line:-1
and then set it as the accent color.


282
00:13:59,873 --> 00:14:02,910 line:-2
UIKit will use this color
for highlights in your user interface.


283
00:14:04,311 --> 00:14:06,947 line:-2
Use this accent color
as an application-wide color.


284
00:14:07,014 --> 00:14:09,716 line:-2
Essentially, it becomes the default
tint color of your app.


285
00:14:10,150 --> 00:14:13,387 line:-2
Of course, you can override it locally
in specific parts of the UI.


286
00:14:14,755 --> 00:14:16,290 line:-1
Now let's look at the sidebar.


287
00:14:16,523 --> 00:14:18,926 line:-2
There is now more flexibility
for sidebars in your app


288
00:14:18,992 --> 00:14:20,427 line:-1
available automatically.


289
00:14:20,661 --> 00:14:23,830 line:-2
One example is automatic drag reordering
for collection views.


290
00:14:24,131 --> 00:14:26,200 line:-2
If you're using collection views
in your app,


291
00:14:26,266 --> 00:14:29,269 line:-2
your users will be able to drag
and reorder the contained items.


292
00:14:29,803 --> 00:14:32,339 line:-2
There's no work that you need to do
to get this behavior.


293
00:14:32,406 --> 00:14:35,776 line:-2
In general, we're encouraging you
to use collection views wherever possible,


294
00:14:35,843 --> 00:14:38,378 line:-2
and with List Layout,
adoption should be effortless.


295
00:14:39,213 --> 00:14:42,115 line:-2
Now, with new frameworks
and APIs supported,


296
00:14:42,182 --> 00:14:45,285 line:-2
more iOS code will work
right out of the box on macOS.


297
00:14:45,986 --> 00:14:47,554 line:-1
If you choose to use SwiftUI,


298
00:14:47,621 --> 00:14:49,890 line:-2
it will work wonderfully
in your Catalyst app,


299
00:14:49,957 --> 00:14:52,092 line:-2
giving you more options
on how to write your app.


300
00:14:53,227 --> 00:14:56,129 line:-2
With improvements to application
and extension lifecycle,


301
00:14:56,196 --> 00:14:59,466 line:-2
at runtime, your Catalyst apps
will run just like on iPad.


302
00:15:00,300 --> 00:15:02,102 line:-1
Now that we have Universal Purchase,


303
00:15:02,169 --> 00:15:05,772 line:-2
app discovery and enablement
will be even easier for your users.


304
00:15:06,974 --> 00:15:10,344 line:-2
And your Catalyst apps will automatically
get all the UI improvements


305
00:15:10,410 --> 00:15:12,212 line:-2
that have been introduced
in macOS Big Sur.


306
00:15:12,980 --> 00:15:15,282 line:-2
We're really excited about
all the improvements we've made


307
00:15:15,349 --> 00:15:18,252 line:-2
to Mac Catalyst, and the impact
it's going to have on your apps.


308
00:15:18,752 --> 00:15:21,889 line:-1
Thanks for watching, and enjoy WWDC 20.

