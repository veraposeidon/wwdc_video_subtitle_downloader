1
00:00:03,937 --> 00:00:06,740 line:-1
Hello and welcome to WWDC.


2
00:00:07,941 --> 00:00:12,079 line:0
Hi, everyone. My name is Dina,
and I'm an iOS engineer here at Apple.


3
00:00:12,145 --> 00:00:14,248 line:0
And today,
I'm gonna introduce you to HealthKit


4
00:00:14,314 --> 00:00:17,284 line:0
and get you started building
your first health application.


5
00:00:17,918 --> 00:00:19,186 line:-1
Our own health data


6
00:00:19,253 --> 00:00:21,688 line:-2
makes up some of
the most personal parts of who we are.


7
00:00:22,022 --> 00:00:25,425 line:-2
Whether it's tracking menstrual cycles
and fertility to get pregnant,


8
00:00:26,193 --> 00:00:28,529 line:-2
or my lab test result
from my doctor's appointment,


9
00:00:29,196 --> 00:00:32,499 line:-2
and even the workout I completed
this morning on my Apple Watch.


10
00:00:32,866 --> 00:00:34,902 line:-1
Ready access to our own health data


11
00:00:34,968 --> 00:00:38,105 line:-2
is one of the most empowering
developments of modern technology.


12
00:00:38,172 --> 00:00:42,075 line:-2
Today, there are over 18,000 applications
on the App Store


13
00:00:42,142 --> 00:00:44,745 line:-2
that all focus on improving
our health and fitness.


14
00:00:45,612 --> 00:00:46,780 line:-1
That's mind-blowing!


15
00:00:46,847 --> 00:00:49,249 line:-1
Like, seriously, it's mind-blowing.


16
00:00:49,816 --> 00:00:51,218 line:-1
There are applications today


17
00:00:51,285 --> 00:00:55,589 line:-2
that help us reach our fitness goals
at home by providing at-home workouts,


18
00:00:56,256 --> 00:00:58,559 line:-2
help us track
our menstrual cycles and fertility,


19
00:00:59,026 --> 00:01:02,696 line:-2
and even log the food that we eat
to help us reach our goal weight.


20
00:01:03,597 --> 00:01:06,834 line:-2
There is a whole diversity
of different applications available today


21
00:01:06,900 --> 00:01:09,236 line:-2
that help us take control
over our health.


22
00:01:09,303 --> 00:01:12,973 line:-2
All of these applications are built
on the foundation of HealthKit.


23
00:01:13,473 --> 00:01:17,077 line:-2
HealthKit is a framework that creates
a central repository


24
00:01:17,144 --> 00:01:18,912 line:-1
of all the users' health data,


25
00:01:18,979 --> 00:01:23,016 line:-2
allowing applications to read data
from it, and also contribute data to it


26
00:01:23,483 --> 00:01:25,986 line:-2
to help create
the most seamless user experience.


27
00:01:26,620 --> 00:01:29,323 line:-2
We can interact with our health data
on multiple devices,


28
00:01:29,389 --> 00:01:33,527 line:-2
including our iPhone,
Apple Watch, even iCloud.


29
00:01:34,528 --> 00:01:36,964 line:-1
HealthKit securely stores and synchronizes


30
00:01:37,030 --> 00:01:39,566 line:-2
all of our health data
across these devices,


31
00:01:39,633 --> 00:01:42,503 line:-2
so you as a developer
don't have to worry about handling that.


32
00:01:43,036 --> 00:01:47,107 line:-2
HealthKit also guards users' privacy
by giving us explicit control


33
00:01:47,174 --> 00:01:49,943 line:-2
over what data
applications have access to.


34
00:01:50,944 --> 00:01:54,615 line:-2
HealthKit is a framework that helps create
a more seamless health application,


35
00:01:54,681 --> 00:01:56,750 line:-1
while also protecting our health data.


36
00:01:57,584 --> 00:02:00,687 line:-2
So, today, we're gonna join
this healthy community of ours


37
00:02:00,754 --> 00:02:03,156 line:-2
by building an application
of our own with HealthKit


38
00:02:03,223 --> 00:02:04,925 line:-1
called SmoothWalker.


39
00:02:04,992 --> 00:02:07,361 line:-2
And just like its name,
the goal of this application


40
00:02:07,427 --> 00:02:09,830 line:-2
is to allow us to record
the walks that we've been on,


41
00:02:10,364 --> 00:02:13,800 line:-2
and visually see the daily steps
we've taken over the past week.


42
00:02:14,535 --> 00:02:18,038 line:-2
To build SmoothWalker, we'll need
to accomplish three different tasks.


43
00:02:18,105 --> 00:02:21,775 line:-2
The first one being setting up HealthKit
in our Xcode project.


44
00:02:21,842 --> 00:02:24,144 line:-2
Once we do,
we'll be able to start saving data,


45
00:02:24,211 --> 00:02:26,914 line:-1
specifically, the distances we've walked.


46
00:02:26,980 --> 00:02:28,515 line:-1
And finally, we can read data


47
00:02:28,582 --> 00:02:31,785 line:-2
to display our daily step count
over the past week in our application.


48
00:02:32,186 --> 00:02:33,220 line:-1
To set up HealthKit,


49
00:02:33,287 --> 00:02:36,323 line:-2
we'll need to accomplish
several different tasks.


50
00:02:36,924 --> 00:02:39,960 line:-2
The first one being we'll need to enable
the HealthKit capability


51
00:02:40,027 --> 00:02:41,662 line:-1
in our Xcode project.


52
00:02:41,728 --> 00:02:44,231 line:-2
Once we do,
we'll need to check whether or not


53
00:02:44,298 --> 00:02:46,667 line:-2
the platform we're running on
supports HealthKit.


54
00:02:47,868 --> 00:02:51,038 line:-2
And finally,
we'll create an HKHealthStore,


55
00:02:51,104 --> 00:02:53,140 line:-1
the entry point to the HealthKit API.


56
00:02:53,207 --> 00:02:56,343 line:-2
To enable the HealthKit capability
in your application,


57
00:02:56,410 --> 00:02:59,947 line:-2
you'll select the target that you want
to integrate users' health data into,


58
00:03:00,013 --> 00:03:03,951 line:-2
you'll tap "Signing and Capabilities,"
and hit that "Add Capability" button.


59
00:03:04,718 --> 00:03:07,221 line:-2
You'll type in HealthKit,
and right then and there,


60
00:03:07,287 --> 00:03:09,823 line:-2
you'll add the HealthKit framework
into your application,


61
00:03:09,890 --> 00:03:13,227 line:-2
which will allow you to retrieve and store
users' health information.


62
00:03:13,293 --> 00:03:16,263 line:-2
We'll now need to check whether or not
the platform we're running on


63
00:03:16,330 --> 00:03:17,664 line:-1
supports HealthKit.


64
00:03:18,365 --> 00:03:21,301 line:-2
It's really common for developers
to have one application


65
00:03:21,368 --> 00:03:24,638 line:-2
and have it run on multiple platforms
or operating systems.


66
00:03:24,705 --> 00:03:27,341 line:-2
So we'll need to check whether
the platform we're running on right now


67
00:03:27,407 --> 00:03:28,575 line:-1
supports HealthKit.


68
00:03:29,409 --> 00:03:33,180 line:-2
You'll need to import HealthKit,
and then, using HKHealthStore,


69
00:03:33,247 --> 00:03:35,749 line:-2
you'll check whether or not
health data is available.


70
00:03:35,816 --> 00:03:38,552 line:-2
If it is,
you'll continue being able to integrate


71
00:03:38,619 --> 00:03:40,487 line:-1
users' health data into your application.


72
00:03:41,388 --> 00:03:43,824 line:-2
If not, then make sure
that your application


73
00:03:43,891 --> 00:03:47,060 line:-2
is still able to operate
without having users' health data.


74
00:03:47,494 --> 00:03:49,830 line:-1
Finally, we'll create an HKHealthStore.


75
00:03:51,231 --> 00:03:53,166 line:-2
An HKHealthStore is
what I like to think of


76
00:03:53,233 --> 00:03:56,904 line:-2
as the gateway or portal
to the world of health data.


77
00:03:56,970 --> 00:04:00,641 line:-2
It's what you'll use when you wanna
request access to users' health data,


78
00:04:00,707 --> 00:04:04,912 line:-2
it's how you'll save data,
and even read data using queries.


79
00:04:05,612 --> 00:04:07,314 line:-1
You only need to create one instance


80
00:04:07,381 --> 00:04:09,850 line:-2
and reuse it across the life cycle
of your application.


81
00:04:09,917 --> 00:04:12,186 line:-2
There's no need
to create multiple instances.


82
00:04:12,819 --> 00:04:14,588 line:-1
Here we have our healthStore object,


83
00:04:14,655 --> 00:04:17,724 line:-2
the one that we'll be using
across the entirety of our application.


84
00:04:17,791 --> 00:04:21,728 line:-2
And if health data is available,
we'll instantiate our healthStore object.


85
00:04:21,795 --> 00:04:24,498 line:-1
And setting up HealthKit is that easy.


86
00:04:24,565 --> 00:04:25,999 line:-1
Enabling the HealthKit capability,


87
00:04:26,066 --> 00:04:28,669 line:-2
checking whether or not
our platform supports HealthKit,


88
00:04:28,735 --> 00:04:30,504 line:-1
and creating an HKHealthStore.


89
00:04:30,571 --> 00:04:31,872 line:-1
That's all you need to do.


90
00:04:32,239 --> 00:04:34,441 line:-2
Now that we've finished
setting up HealthKit,


91
00:04:34,508 --> 00:04:36,543 line:-1
let's move on to saving data,


92
00:04:36,610 --> 00:04:38,478 line:-1
specifically, the distances we've walked.


93
00:04:39,213 --> 00:04:41,448 line:-2
But before we do,
we'll need to take a deeper look


94
00:04:41,515 --> 00:04:45,018 line:-2
about how HealthKit organizes
and structures our data.


95
00:04:45,085 --> 00:04:46,920 line:-1
I have this little ritual of mine,


96
00:04:46,987 --> 00:04:49,990 line:-2
where right before
any presentation or talk,


97
00:04:50,057 --> 00:04:51,892 line:-1
I like to do a little bit of a workout.


98
00:04:52,593 --> 00:04:56,330 line:-2
It helps boost up my energy
but also calm my nerves.


99
00:04:56,396 --> 00:05:00,467 line:-2
There's nothing a couple of push-ups
or a couple of sprints can't fix.


100
00:05:00,534 --> 00:05:02,936 line:-2
So that's what I did
right before this presentation,


101
00:05:03,003 --> 00:05:04,071 line:-1
I did a quick workout.


102
00:05:04,872 --> 00:05:07,941 line:-2
So let's see all of the health data
that was recorded during my workout.


103
00:05:09,276 --> 00:05:12,045 line:-1
For my workout, I went for a walk


104
00:05:12,112 --> 00:05:14,114 line:-1
from 2:35 to 3:00 p.m. today.


105
00:05:15,015 --> 00:05:17,284 line:-2
I walked outside
because the weather was gorgeous,


106
00:05:17,351 --> 00:05:21,288 line:-2
partially cloudy, low humidity,
great for a good hair day.


107
00:05:22,189 --> 00:05:24,191 line:-1
I walked 628 meters,


108
00:05:24,258 --> 00:05:29,196 line:-2
and I was blasting Lizzo and Rico Nasty
a little bit too loudly on Apple Music,


109
00:05:29,263 --> 00:05:31,698 line:-2
and should probably turn down
the volume moving forward


110
00:05:31,765 --> 00:05:32,966 line:-1
to preserve my hearing health.


111
00:05:33,033 --> 00:05:34,501 line:-1
Five minutes into my walk,


112
00:05:34,568 --> 00:05:37,204 line:-2
I also started noticing
some mild abdominal cramping


113
00:05:37,271 --> 00:05:40,240 line:-2
due to the fact
that my period's gonna start any day now.


114
00:05:40,774 --> 00:05:42,543 line:-2
All of these different types
of health data


115
00:05:42,609 --> 00:05:44,878 line:-1
are stored as health samples.


116
00:05:45,445 --> 00:05:48,515 line:-2
Health samples are all structured
in a very similar pattern.


117
00:05:49,116 --> 00:05:52,319 line:-2
They all have the associated type of data
that they represent,


118
00:05:52,386 --> 00:05:54,421 line:-1
the value of that type of data,


119
00:05:54,488 --> 00:05:56,757 line:-1
the time these health events occurred,


120
00:05:56,823 --> 00:05:59,860 line:0
and metadata, which represents
any additional information


121
00:05:59,927 --> 00:06:02,196 line:0
we wanna store about these samples.


122
00:06:02,262 --> 00:06:05,632 line:-2
Like whether or not my workout
was outdoors or indoors,


123
00:06:05,699 --> 00:06:08,769 line:-2
the weather outside,
the device that recorded it,


124
00:06:08,836 --> 00:06:10,537 line:-2
and even the application
that wrote it.


125
00:06:11,071 --> 00:06:13,841 line:0
As all of these different types of data
are stored as samples,


126
00:06:13,907 --> 00:06:16,510 line:0
there are some nuanced differences
between all of them.


127
00:06:16,577 --> 00:06:20,514 line:0
Right now, I'm gonna focus on one
type of sample, called quantity samples.


128
00:06:21,315 --> 00:06:25,853 line:-2
Quantity samples store a numerical value
and unit associated with our health data.


129
00:06:25,919 --> 00:06:30,524 line:-2
Perfect for storing the distance we walk,
and our headphone audio-level exposure.


130
00:06:31,391 --> 00:06:35,429 line:-2
Regardless of type, we always want
to remain in control of our data.


131
00:06:35,963 --> 00:06:39,533 line:-2
And to do so,
HealthKit has its authorization system,


132
00:06:39,600 --> 00:06:41,568 line:-2
which will allow you
to request authorization


133
00:06:41,635 --> 00:06:44,671 line:-2
for users' health data
by specific data type.


134
00:06:46,039 --> 00:06:50,744 line:-2
And to give users the most control over
what data applications have access to,


135
00:06:50,811 --> 00:06:53,747 line:-2
read permissions and write permissions
are handled separately.


136
00:06:54,815 --> 00:06:58,986 line:-2
So, your user may or may not
grant you permission to the data


137
00:06:59,052 --> 00:07:00,053 line:-1
that you requested for


138
00:07:00,120 --> 00:07:03,423 line:-2
depending on the sensitivity of it
and what they feel comfortable sharing.


139
00:07:04,224 --> 00:07:06,159 line:-1
Any time you request authorization,


140
00:07:06,226 --> 00:07:09,129 line:-2
this screen on the right
might appear to the user.


141
00:07:09,796 --> 00:07:11,732 line:-1
This is HealthKit's authorization sheet.


142
00:07:12,399 --> 00:07:15,135 line:-2
It allows the user
to grant or deny permission


143
00:07:15,202 --> 00:07:17,571 line:-2
to the data
that you're requesting access for,


144
00:07:18,105 --> 00:07:21,575 line:-2
so it's important to request authorization
in context


145
00:07:21,642 --> 00:07:24,378 line:-2
so the user has an understanding
of what this screen is


146
00:07:24,444 --> 00:07:28,282 line:-2
and why this application needs
access to their health data.


147
00:07:28,348 --> 00:07:32,853 line:-2
You'll be required to define two keys
in your application's info.plist,


148
00:07:33,820 --> 00:07:38,058 line:0
Health Update Usage Description
and Health Share Usage Description.


149
00:07:38,125 --> 00:07:40,994 line:-2
This will give you an opportunity
to briefly explain


150
00:07:41,061 --> 00:07:42,262 line:-1
what your application does


151
00:07:42,329 --> 00:07:45,199 line:-2
and how it interacts
with the user's health data.


152
00:07:45,966 --> 00:07:48,135 line:0
Another important part of context


153
00:07:48,202 --> 00:07:51,471 line:0
is requesting authorization
when there's good timing.


154
00:07:53,106 --> 00:07:57,444 line:-2
Request authorization any time you intend
to interact with the user's health data,


155
00:07:57,511 --> 00:07:59,847 line:-2
whether that's saving
or reading their health data.


156
00:08:00,647 --> 00:08:04,251 line:-2
Onboarding is also another great place
to request authorization


157
00:08:04,318 --> 00:08:06,687 line:-2
because that's usually where
the user has an understanding


158
00:08:06,753 --> 00:08:07,988 line:-1
of what your application does


159
00:08:08,055 --> 00:08:10,490 line:-2
and how it'll use their health data
in the experience.


160
00:08:10,991 --> 00:08:14,428 line:-2
As requesting authorization in context
is really important,


161
00:08:14,494 --> 00:08:17,831 line:-2
make sure to request authorization
for only the data that you need


162
00:08:17,898 --> 00:08:20,267 line:-2
to create the best experience
for the user.


163
00:08:20,334 --> 00:08:21,335 line:-1
If, for instance,


164
00:08:21,401 --> 00:08:24,571 line:-2
you requested authorization
for all HealthKit data types,


165
00:08:24,638 --> 00:08:26,840 line:-1
that's well over 100, by the way,


166
00:08:26,907 --> 00:08:29,676 line:-2
then the user might be
a little bit confused


167
00:08:29,743 --> 00:08:33,313 line:-2
as to why an application that's
helping them perform a swimming workout


168
00:08:33,380 --> 00:08:36,482 line:-2
is also asking them for all the times
they brushed their teeth.


169
00:08:36,549 --> 00:08:39,419 line:-2
I mean, you could be hitting
that really niche group of athletes


170
00:08:39,486 --> 00:08:43,123 line:-2
who swim while also brushing their teeth,
but I'd be a little bit skeptical.


171
00:08:43,690 --> 00:08:47,194 line:-2
Finally, request authorization
every time you intend


172
00:08:47,261 --> 00:08:49,530 line:-1
to interact with the user's health data.


173
00:08:49,596 --> 00:08:52,666 line:-2
HealthKit is the source of truth
when it comes to user permissions,


174
00:08:52,733 --> 00:08:56,670 line:-2
and user permissions can change
at any time outside of your application.


175
00:08:57,204 --> 00:09:01,241 line:-2
So, make sure to request authorization
so your application stays up to date.


176
00:09:01,808 --> 00:09:04,244 line:-2
To save the distance
I walked during my workout today,


177
00:09:05,212 --> 00:09:08,215 line:-2
the first thing we'll need to do
is request write access


178
00:09:08,282 --> 00:09:12,019 line:-2
to our walking-distance data type
using HealthKit's authorization system.


179
00:09:12,085 --> 00:09:15,522 line:-2
Once we do, we'll need to create
our walking-distance sample


180
00:09:15,589 --> 00:09:18,058 line:-2
and save that sample
using our health store.


181
00:09:18,125 --> 00:09:20,561 line:-2
To request write access,
what we'll need to do


182
00:09:20,627 --> 00:09:23,363 line:-2
is to find the type of data
that we want write access to.


183
00:09:23,897 --> 00:09:26,967 line:-2
In this case, it's just our
distanceWalkingRunning quantity type.


184
00:09:27,568 --> 00:09:30,304 line:-2
Then we'll call
the requestAuthorization method


185
00:09:30,370 --> 00:09:31,638 line:-1
on our healthStore,


186
00:09:31,705 --> 00:09:34,575 line:-2
passing in the data
that we want to write to and read from.


187
00:09:35,075 --> 00:09:38,212 line:-2
In SmoothWalker, we're only writing
the distances we've walked,


188
00:09:38,278 --> 00:09:40,013 line:-1
we're not reading any of that data,


189
00:09:40,514 --> 00:09:42,916 line:-1
so we're only gonna request write access.


190
00:09:43,417 --> 00:09:46,553 line:-2
Finally, we'll know if we successfully
requested authorization


191
00:09:46,620 --> 00:09:47,988 line:-1
in our completion handler.


192
00:09:48,522 --> 00:09:52,826 line:-2
Success in this case does not mean
that the user has granted permission


193
00:09:52,893 --> 00:09:53,961 line:-1
to these data types,


194
00:09:54,027 --> 00:09:57,397 line:-2
it just means that you successfully
requested authorization.


195
00:09:58,031 --> 00:10:01,068 line:-2
And if it failed,
you can always try again.


196
00:10:01,702 --> 00:10:05,873 line:-2
User privacy is so important when it comes
to our sensitive health data,


197
00:10:06,507 --> 00:10:08,775 line:-2
so make sure
when requesting authorization


198
00:10:08,842 --> 00:10:14,381 line:-2
to only ask for what you need,
when you need it, every time.


199
00:10:14,448 --> 00:10:18,552 line:-2
We finished requesting write access,
so let's move on to our final two tasks


200
00:10:18,619 --> 00:10:22,689 line:-2
of creating our sample that represents
the distance I walked during my workout,


201
00:10:22,756 --> 00:10:24,825 line:-2
and saving that sample
using our health store.


202
00:10:24,892 --> 00:10:27,561 line:-2
We'll need to define
the type of data that we wanna save,


203
00:10:27,628 --> 00:10:30,264 line:-2
which is our quantity type,
distanceWalkingRunning,


204
00:10:30,330 --> 00:10:32,833 line:-2
the same quantity type
we requested write access for.


205
00:10:33,634 --> 00:10:35,969 line:-2
Then we'll need to instantiate
the start and end time


206
00:10:36,036 --> 00:10:37,804 line:-1
of when I walked that distance,


207
00:10:37,871 --> 00:10:40,574 line:-2
in this case
it was 2:35 and 3:00 p.m. today.


208
00:10:40,641 --> 00:10:45,245 line:-2
All quantity samples in HealthKit
are stored with an associated HKQuantity.


209
00:10:46,046 --> 00:10:50,250 line:-2
HKQuantities represent the value and unit
associated with this sample.


210
00:10:50,317 --> 00:10:53,854 line:-2
So, for my walk today,
I walked a distance of 628 meters.


211
00:10:53,921 --> 00:10:55,756 line:-1
A really powerful part of HealthKit


212
00:10:55,822 --> 00:10:58,959 line:-2
is that it can convert between
different units for you.


213
00:10:59,593 --> 00:11:02,529 line:-2
So, for instance, if I wanted to see
all the distances I've walked


214
00:11:02,596 --> 00:11:06,767 line:-2
in meters in one application,
but in yards in another application,


215
00:11:06,834 --> 00:11:10,404 line:-2
then HealthKit can do all that conversion
for you on the same data set,


216
00:11:10,470 --> 00:11:12,439 line:-2
so you don't have to do
any of that manual math.


217
00:11:12,506 --> 00:11:15,209 line:-2
We have all the pieces needed
to construct our sample.


218
00:11:15,776 --> 00:11:18,278 line:-2
We'll pass in the type of data
we wanna create,


219
00:11:18,345 --> 00:11:21,114 line:-2
which is our distanceWalkingRunning
quantity type,


220
00:11:21,782 --> 00:11:23,884 line:-1
our quantity of 628 meters,


221
00:11:24,451 --> 00:11:27,654 line:-2
and our start and end date,
2:35 and 3:00 p.m. today.


222
00:11:28,755 --> 00:11:31,692 line:0
Finally, we'll call our save method
on our healthStore,


223
00:11:32,726 --> 00:11:33,961 line:0
and pass in our sample.


224
00:11:34,027 --> 00:11:37,030 line:0
And we'll know if we successfully
saved the sample into the database


225
00:11:37,097 --> 00:11:38,298 line:0
through our completion handler.


226
00:11:39,199 --> 00:11:42,503 line:-2
And just with that, we saved the distance
I walked during my workout.


227
00:11:42,569 --> 00:11:45,706 line:-2
We just took a deeper look
into how quantity samples


228
00:11:45,772 --> 00:11:48,041 line:-1
are structured and stored in HealthKit.


229
00:11:48,108 --> 00:11:52,679 line:-2
But not all of our data is necessarily
best represented in quantity samples,


230
00:11:52,746 --> 00:11:56,049 line:-2
like my workout
or my abdominal cramps today.


231
00:11:56,116 --> 00:11:59,019 line:-2
So, let's take a deeper look
into how HealthKit


232
00:11:59,086 --> 00:12:01,255 line:-1
organizes our data in a more general way.


233
00:12:01,321 --> 00:12:03,857 line:-1
To reiterate, we have quantity samples


234
00:12:03,924 --> 00:12:07,928 line:-2
that store a numerical value and unit
associated with our health data,


235
00:12:07,995 --> 00:12:11,732 line:-2
perfect for storing the distance I walked,
and my headphone audio-level exposure.


236
00:12:12,833 --> 00:12:16,336 line:-2
However, not all of my health data
is necessarily quantitative,


237
00:12:16,970 --> 00:12:18,639 line:-1
some of it is more qualitative.


238
00:12:19,206 --> 00:12:22,276 line:-2
And those are stored
as category samples in HealthKit,


239
00:12:22,342 --> 00:12:24,144 line:-1
where the value that you can record


240
00:12:24,211 --> 00:12:27,047 line:-2
comes from a predefined list
and it doesn't carry a unit.


241
00:12:28,248 --> 00:12:31,618 line:-2
So, for instance, when I logged
my mild abdominal cramping today,


242
00:12:31,685 --> 00:12:34,288 line:-2
I had the option to log
whether it was mild,


243
00:12:34,354 --> 00:12:38,158 line:-2
moderate, or severe,
and thankfully, it was just mild.


244
00:12:39,259 --> 00:12:42,996 line:-2
Both of these types of samples
represent singular values,


245
00:12:43,063 --> 00:12:46,200 line:-2
but not all of our health data
is necessarily represented


246
00:12:46,266 --> 00:12:48,502 line:-2
in that way in HealthKit,
like my workout,


247
00:12:48,569 --> 00:12:52,573 line:-2
which summarizes multiple values
and can carry multiple units


248
00:12:52,639 --> 00:12:54,875 line:-2
depending on the values
that it's summarizing.


249
00:12:54,942 --> 00:12:59,146 line:-2
My workout today summarized
the 628 meters I walked,


250
00:12:59,213 --> 00:13:02,683 line:-2
the three flights I climbed,
and even the 105 calories that I burned.


251
00:13:03,350 --> 00:13:06,787 line:-2
All of these different types of data
are samples in HealthKit.


252
00:13:07,988 --> 00:13:10,724 line:0
Samples all have
an associated start and end time


253
00:13:10,791 --> 00:13:12,492 line:0
of when these health events happened.


254
00:13:13,393 --> 00:13:16,864 line:0
As we looked at quantity samples,
category samples, and workouts,


255
00:13:16,930 --> 00:13:19,299 line:0
there are many more
different types of samples available


256
00:13:19,366 --> 00:13:21,301 line:0
that I encourage you to look into.


257
00:13:22,369 --> 00:13:26,206 line:-2
Not all of our health data, though,
changes over time like samples do.


258
00:13:27,174 --> 00:13:29,843 line:-2
Some of our health data
remains more static over our life,


259
00:13:29,910 --> 00:13:31,879 line:-1
like my birthday or my blood type.


260
00:13:32,813 --> 00:13:35,215 line:0
These are stored
as characteristics in HealthKit.


261
00:13:36,850 --> 00:13:40,854 line:0
All of these different types of objects
are unified under HKObject,


262
00:13:41,688 --> 00:13:44,591 line:-2
where it has
the associated unique identifier for data


263
00:13:44,658 --> 00:13:46,260 line:-1
so you can easily reference it,


264
00:13:47,127 --> 00:13:50,297 line:-2
the device that recorded it,
and even the application that wrote it.


265
00:13:50,864 --> 00:13:54,368 line:-2
This hierarchy represents
the objects that are stored in HealthKit.


266
00:13:54,735 --> 00:13:58,805 line:-2
There is also a parallel hierarchy
of all the types in HealthKit.


267
00:13:59,806 --> 00:14:03,243 line:-2
For instance, the distance I walked today
was stored as a quantity sample


268
00:14:03,310 --> 00:14:05,879 line:-2
of the quantity type
"distanceWalkingRunning".


269
00:14:06,613 --> 00:14:09,917 line:-2
My mild abdominal cramps
were stored in a category sample


270
00:14:09,983 --> 00:14:12,753 line:-1
of the category type "abdominal cramps".


271
00:14:13,654 --> 00:14:17,491 line:-2
We just took a look into how HealthKit
organizes and structures our data.


272
00:14:18,258 --> 00:14:21,361 line:-2
So let's move on to
our final and third task


273
00:14:21,428 --> 00:14:22,462 line:-1
of reading data.


274
00:14:22,529 --> 00:14:26,733 line:-2
When it comes to reading health data,
you'll want to use queries.


275
00:14:27,234 --> 00:14:29,469 line:-1
HealthKit has a wide range of queries


276
00:14:29,536 --> 00:14:32,239 line:-2
to help you accomplish the task
that you have at hand.


277
00:14:32,806 --> 00:14:34,408 line:-1
Here are some of the many.


278
00:14:34,908 --> 00:14:36,877 line:-2
Today,
we're gonna look into three of them.


279
00:14:37,411 --> 00:14:40,447 line:-2
HKStatisticsQuery,
HKStatisticsCollectionQuery


280
00:14:40,514 --> 00:14:42,015 line:-1
and HKSampleQuery.


281
00:14:42,516 --> 00:14:43,917 line:-1
When it comes to using queries,


282
00:14:43,984 --> 00:14:46,720 line:-2
the first thing you'll need to do
is construct a query object.


283
00:14:47,354 --> 00:14:49,957 line:-2
You'll need to define the type of data
that you wanna read,


284
00:14:50,023 --> 00:14:53,026 line:-2
as well as specify a filter
that will restrict the results


285
00:14:53,093 --> 00:14:54,428 line:-1
returned from your query.


286
00:14:54,962 --> 00:14:56,797 line:-1
This is done by defining a predicate.


287
00:14:57,698 --> 00:15:01,201 line:-2
A predicate can vastly improve
the efficiency and performance


288
00:15:01,268 --> 00:15:04,705 line:-2
of your query by filtering out
the results that it returns.


289
00:15:06,106 --> 00:15:08,842 line:-2
Finally, you'll execute your query
on our health store


290
00:15:08,909 --> 00:15:11,478 line:-1
and get our results from our handler.


291
00:15:12,212 --> 00:15:15,382 line:-2
The first query we're gonna look in to
is HKStatisticsQuery,


292
00:15:15,449 --> 00:15:17,918 line:-1
and it is exactly what it sounds like.


293
00:15:18,485 --> 00:15:21,488 line:-2
It's a query that performs statistics
on samples,


294
00:15:21,555 --> 00:15:23,290 line:-1
specifically, quantity samples.


295
00:15:23,357 --> 00:15:25,659 line:-2
Let's take a look
at what type of statistics


296
00:15:25,726 --> 00:15:28,228 line:-2
can be computed with
an HKStatisticsQuery.


297
00:15:28,295 --> 00:15:30,864 line:-2
For instance, I might wanna know
the total amount of steps


298
00:15:30,931 --> 00:15:32,766 line:0
I took during my workout,


299
00:15:32,833 --> 00:15:35,068 line:0
or the total amount of calories I burned.


300
00:15:35,602 --> 00:15:37,638 line:0
And if I'm feeling particularly brave,


301
00:15:37,704 --> 00:15:40,707 line:0
I might wanna know the total amount
of caffeine I consumed today,


302
00:15:40,774 --> 00:15:43,744 line:-2
which might unveil
a matcha latte addiction.


303
00:15:43,810 --> 00:15:45,212 line:-1
I think I'll hold off on that one.


304
00:15:45,279 --> 00:15:48,115 line:0
We can compute the sum
of these different data types,


305
00:15:49,216 --> 00:15:52,352 line:-2
but it doesn't make sense
to sum up all of our health data.


306
00:15:53,053 --> 00:15:56,557 line:0
For instance, I might wanna know
my average UV exposure for today,


307
00:15:56,623 --> 00:16:00,227 line:0
so I know that my SPF 50
and my shades had me fully protected.


308
00:16:00,961 --> 00:16:02,863 line:0
Or to know that my HIIT workouts


309
00:16:02,930 --> 00:16:05,666 line:0
were really impacting
my minimum resting heart rate.


310
00:16:06,733 --> 00:16:09,069 line:0
And even know
my maximum body temperature


311
00:16:09,136 --> 00:16:11,238 line:0
from when I was sick
a couple of weeks ago.


312
00:16:11,605 --> 00:16:15,709 line:0
We can also compute the average minimum
and maximum on our health data.


313
00:16:16,710 --> 00:16:19,646 line:-2
It doesn't make sense to sum up
all of our body temperatures,


314
00:16:20,113 --> 00:16:23,450 line:0
or compute the average calories
I burned during my workout.


315
00:16:23,517 --> 00:16:27,387 line:0
So, the type of statistics we can compute
depends on what makes the most sense


316
00:16:27,454 --> 00:16:30,858 line:0
and what reveals the most insightful
information about our health.


317
00:16:31,625 --> 00:16:35,362 line:-2
This is known as the aggregation style
of samples in HealthKit,


318
00:16:35,829 --> 00:16:38,832 line:-2
where the total steps I took
and my calories burned


319
00:16:38,899 --> 00:16:40,300 line:-1
are all cumulative,


320
00:16:40,367 --> 00:16:43,704 line:-2
while my UV exposure
and my heart rate are discrete.


321
00:16:44,104 --> 00:16:48,242 line:-2
Today, I wanna know the total amount
of steps I took this past week,


322
00:16:48,809 --> 00:16:50,677 line:-1
from June 15th to today.


323
00:16:51,278 --> 00:16:53,547 line:-1
Here are all my steps for the past week.


324
00:16:53,614 --> 00:16:56,617 line:-2
What I'll do is construct
an HKStatisticsQuery


325
00:16:56,683 --> 00:17:01,255 line:-2
specifying the type of statistics
I wanna compute, which is cumulative sum.


326
00:17:01,955 --> 00:17:06,527 line:0
I'll execute it on our health store,
and we'll get back an HKStatistics object,


327
00:17:06,593 --> 00:17:09,530 line:0
which has the start date and end date
of all the samples


328
00:17:09,596 --> 00:17:14,667 line:0
that make up our statistic,
as well as our sum of 6,902 steps.


329
00:17:15,903 --> 00:17:19,573 line:-2
It's not that much. I probably should
really up my activity moving forward.


330
00:17:19,640 --> 00:17:22,709 line:-2
All of those samples were recorded
on my Apple Watch,


331
00:17:22,776 --> 00:17:26,747 line:-2
but sometimes when I go for a walk,
I like to bring my iPhone with me


332
00:17:26,813 --> 00:17:28,849 line:-2
in case I need to make
a couple of phone calls.


333
00:17:29,383 --> 00:17:33,387 line:-2
Both my Apple Watch and my iPhone
are both recording steps.


334
00:17:34,521 --> 00:17:37,925 line:-2
If we were to sum up all of my steps
over all of my devices,


335
00:17:37,991 --> 00:17:42,329 line:-2
then we would naively be double counting
a lot of those steps.


336
00:17:42,396 --> 00:17:46,133 line:-2
HKStatisticsQuery can help with
the deduplication of data.


337
00:17:46,567 --> 00:17:49,670 line:-2
For instance, on June 15th,
HKStatisticsQuery


338
00:17:49,736 --> 00:17:53,340 line:-2
will ignore those 900 steps
recorded on my iPhone


339
00:17:53,407 --> 00:17:55,809 line:-1
since that would be duplicated data,


340
00:17:55,876 --> 00:17:59,079 line:-2
but it would also add in
those additional 1,100 steps


341
00:17:59,146 --> 00:18:02,449 line:-2
that were recorded on my iPhone
when I forgot my Apple Watch at home.


342
00:18:02,850 --> 00:18:04,852 line:-2
So, we'll construct
our HKStatisticsQuery,


343
00:18:04,918 --> 00:18:06,253 line:0
execute it on our health store


344
00:18:06,320 --> 00:18:11,959 line:0
and get our updated HKStatistics object
with our new sum of 8,002 steps.


345
00:18:12,559 --> 00:18:15,028 line:-1
So I did better, but not by that much.


346
00:18:15,829 --> 00:18:20,334 line:-2
I'm more interested in the patterns
of my daily step count.


347
00:18:20,400 --> 00:18:24,071 line:-2
I wanna know the steps that I take
every day for the past week.


348
00:18:25,472 --> 00:18:29,176 line:-2
What we could do
is construct HKStatisticsQueries


349
00:18:29,243 --> 00:18:30,711 line:-1
for every day of the week.


350
00:18:31,211 --> 00:18:32,613 line:-1
That would be seven of them.


351
00:18:33,013 --> 00:18:35,048 line:-1
That might be fine for now,


352
00:18:35,115 --> 00:18:38,719 line:-2
but if I wanted to know
my daily step count over the past year,


353
00:18:38,785 --> 00:18:42,155 line:-2
then that would be well over
300 HKStatisticsQueries to manage


354
00:18:42,222 --> 00:18:44,091 line:-1
and that just becomes too much.


355
00:18:45,225 --> 00:18:46,793 line:-1
HealthKit has a solution.


356
00:18:47,995 --> 00:18:50,531 line:-1
It's called HKStatisticsCollectionQuery.


357
00:18:51,632 --> 00:18:56,637 line:-2
And it's a query that performs statistics
on fixed time intervals that you specify.


358
00:18:56,703 --> 00:18:59,106 line:-2
In this case,
we'll specify a daily cadence


359
00:18:59,173 --> 00:19:01,909 line:-2
of when I want the sum of my steps
to be computed.


360
00:19:01,975 --> 00:19:03,911 line:-1
I'll also need to specify an anchor date,


361
00:19:03,977 --> 00:19:06,847 line:-2
which represents
when our statistic starts being computed


362
00:19:06,914 --> 00:19:08,815 line:-1
and how our samples get bucketed.


363
00:19:09,683 --> 00:19:12,386 line:-2
When I construct
my HKStatisticsCollectionQuery,


364
00:19:12,452 --> 00:19:15,923 line:-2
I'll specify my anchor
of June 15th at midnight,


365
00:19:15,989 --> 00:19:18,392 line:-1
my time interval of a daily cadence,


366
00:19:18,458 --> 00:19:21,161 line:-2
and the statistics I wanna compute,
which is the sum.


367
00:19:21,929 --> 00:19:24,064 line:-1
I'll execute this on my health store,


368
00:19:24,498 --> 00:19:27,501 line:0
and we'll get back
an HKStatisticsCollection object.


369
00:19:28,035 --> 00:19:31,638 line:-2
An HKStatisticsCollection object
is exactly what it sounds like.


370
00:19:31,705 --> 00:19:33,774 line:-1
It's a collection of HKStatistics.


371
00:19:35,242 --> 00:19:38,512 line:0
So, for every day of the week,
we'll get an HKStatistics object


372
00:19:38,579 --> 00:19:40,047 line:-1
with the sum of our steps.


373
00:19:40,681 --> 00:19:45,619 line:0
So, for Monday, June 15th,
I'll get a sum of 2,222 steps.


374
00:19:46,453 --> 00:19:48,755 line:-2
Tuesday, I'm not gonna lie,
I was super lazy,


375
00:19:48,822 --> 00:19:50,290 line:-1
didn't even get out of bed,


376
00:19:50,357 --> 00:19:52,059 line:-1
so I didn't take any steps.


377
00:19:52,125 --> 00:19:55,596 line:0
Wednesday, I have a sum of steps of 1,100,


378
00:19:55,662 --> 00:19:59,066 line:0
so I'll get an HKStatistics object
with a sum of 1,100.


379
00:19:59,132 --> 00:20:01,335 line:0
And the rest will follow suit.


380
00:20:03,103 --> 00:20:05,339 line:-1
Here are some of the many charts in health


381
00:20:05,405 --> 00:20:09,109 line:-2
that are all powered
by HKStatisticsCollectionQueries.


382
00:20:09,176 --> 00:20:11,578 line:-1
It's incredible to see how one query


383
00:20:11,645 --> 00:20:14,715 line:-2
can unveil so much useful
and insightful information


384
00:20:14,781 --> 00:20:16,049 line:-1
about our health.


385
00:20:16,116 --> 00:20:18,986 line:-2
HKStatisticsCollectionQuery
is really powerful.


386
00:20:19,486 --> 00:20:22,122 line:-2
I wanna touch on
one of its other superpowers.


387
00:20:22,823 --> 00:20:25,759 line:-2
It can listen for updates
to the user's health data.


388
00:20:26,260 --> 00:20:29,530 line:-2
To do so,
we'll need to set its update handler


389
00:20:29,596 --> 00:20:31,365 line:-1
before executing the query.


390
00:20:31,431 --> 00:20:33,500 line:-2
That way, our query will be running
in the background


391
00:20:33,567 --> 00:20:36,203 line:-2
listening to any new statistics
or new data


392
00:20:36,270 --> 00:20:38,005 line:-1
coming into the health database.


393
00:20:38,472 --> 00:20:41,208 line:-2
Now, our query will be running
in the background indefinitely,


394
00:20:41,275 --> 00:20:43,177 line:-1
so we'll wanna make sure to call "stop"


395
00:20:43,243 --> 00:20:45,546 line:-2
when we're done collecting
all the data that we need.


396
00:20:45,946 --> 00:20:48,882 line:-2
So, let's go ahead
and use HKStatisticsCollectionQuery


397
00:20:48,949 --> 00:20:50,050 line:-1
in SmoothWalker


398
00:20:50,117 --> 00:20:52,519 line:-2
to display our daily step count
over the past week.


399
00:20:53,020 --> 00:20:54,354 line:-1
The first thing we'll need to do


400
00:20:54,421 --> 00:20:56,657 line:-2
is construct
our HKStatisticsCollectionQuery.


401
00:20:57,524 --> 00:21:00,194 line:-2
Once we do,
we'll execute it on our health store


402
00:21:00,260 --> 00:21:03,096 line:-2
and update our UI with
the HKStatisticsCollection object


403
00:21:03,163 --> 00:21:04,164 line:-1
we get back.


404
00:21:04,598 --> 00:21:05,933 line:-1
Let's move on to our demo.


405
00:21:06,600 --> 00:21:08,035 line:-1
All of the code you're about to see


406
00:21:08,101 --> 00:21:11,038 line:-2
is available online
through a sample Xcode project


407
00:21:11,104 --> 00:21:13,373 line:-2
for you to download
and to play around with.


408
00:21:13,440 --> 00:21:15,709 line:-2
Here, we have SmoothWalker
running in our simulator


409
00:21:15,776 --> 00:21:17,644 line:-1
in the left-hand portion of my screen.


410
00:21:18,178 --> 00:21:21,215 line:-2
The view is empty right now
because we haven't implemented the pieces


411
00:21:21,281 --> 00:21:23,150 line:-1
to display our daily step count.


412
00:21:24,084 --> 00:21:27,554 line:-2
In the upper right-hand corner,
we also have an "Add Data" button,


413
00:21:27,621 --> 00:21:30,123 line:-2
which will allow us
to add any new steps for today.


414
00:21:31,725 --> 00:21:34,595 line:-2
So, let's go ahead
and move over into our Xcode project


415
00:21:34,661 --> 00:21:38,365 line:-2
and implement all the pieces
we need to display our daily steps.


416
00:21:39,700 --> 00:21:42,135 line:-2
Here I am in
DailyStepCountTableViewController.


417
00:21:42,803 --> 00:21:46,273 line:-2
This is the ViewController that's powering
our view in the simulator right now.


418
00:21:47,140 --> 00:21:49,610 line:-2
We have an array
that's hooked up to our table view,


419
00:21:49,676 --> 00:21:52,179 line:-2
so all we need to do
is read our daily steps


420
00:21:52,246 --> 00:21:54,081 line:-1
and populate our array with that.


421
00:21:55,315 --> 00:21:58,719 line:-2
The first thing we'll need to do, though,
is request read and write access


422
00:21:58,785 --> 00:21:59,953 line:-1
to our step-count data.


423
00:22:00,787 --> 00:22:04,324 line:-2
We'll need to request authorization
where there's appropriate context.


424
00:22:04,892 --> 00:22:07,728 line:-2
A great place to do that
is in our method viewWillAppear.


425
00:22:08,629 --> 00:22:11,999 line:-2
That way, when our application loads
or we hit that "step count" tab,


426
00:22:12,065 --> 00:22:14,034 line:-1
our authorization sheet will appear.


427
00:22:14,568 --> 00:22:15,903 line:-1
So let's go ahead and do that.


428
00:22:21,942 --> 00:22:24,978 line:-2
Here, we define the type of data
that we want read and write access to,


429
00:22:25,045 --> 00:22:27,047 line:-1
which is our step-count data type.


430
00:22:27,814 --> 00:22:30,484 line:-2
Then using our healthStore,
we will request authorization,


431
00:22:30,551 --> 00:22:33,587 line:-2
passing in the data that we want
to write to and read from.


432
00:22:34,922 --> 00:22:37,424 line:-1
If we successfully request authorization,


433
00:22:37,491 --> 00:22:40,661 line:-2
we'll call the method
calculateDailyStepCountForPastWeek.


434
00:22:41,395 --> 00:22:43,897 line:-2
This is the method
where all the magic happens.


435
00:22:43,964 --> 00:22:46,767 line:-2
It's where we'll read our daily steps
and update our UI.


436
00:22:47,467 --> 00:22:49,102 line:-1
So, let's go down into this method.


437
00:22:52,072 --> 00:22:54,541 line:-2
Here I am in
calculateDailyStepCountForPastWeek.


438
00:22:55,209 --> 00:22:57,945 line:-2
We'll need to construct
an HKStatisticsCollectionQuery,


439
00:22:58,011 --> 00:23:02,082 line:-2
execute our query on our healthStore
and update our UI with our results.


440
00:23:02,683 --> 00:23:05,185 line:-2
The first thing we'll need to do
is define all the pieces


441
00:23:05,252 --> 00:23:07,120 line:-1
needed to construct our query,


442
00:23:07,187 --> 00:23:09,189 line:-1
like the type of data we wanna read,


443
00:23:10,490 --> 00:23:12,426 line:-1
which in this case is our step-count data.


444
00:23:13,527 --> 00:23:18,432 line:-2
We'll need our anchor,
which is Monday at 3:00 a.m...


445
00:23:20,934 --> 00:23:22,002 line:-1
our time interval,


446
00:23:23,637 --> 00:23:26,206 line:-1
which is a daily cadence.


447
00:23:27,908 --> 00:23:30,244 line:-2
There can be a lot of steps data
in HealthKit,


448
00:23:30,310 --> 00:23:32,779 line:-2
but we're only interested
in computing statistics


449
00:23:32,846 --> 00:23:34,281 line:-1
over the past week's worth.


450
00:23:34,848 --> 00:23:37,851 line:-2
So, we'll define a predicate
that we were only computing statistics


451
00:23:37,918 --> 00:23:40,053 line:-2
over the past week's worth
of step samples.


452
00:23:43,757 --> 00:23:45,826 line:-2
Here, I define my date
from one week ago,


453
00:23:46,493 --> 00:23:50,597 line:-2
and I'll construct my predicate
using HKQuery's predicateForSamples.


454
00:23:51,632 --> 00:23:54,001 line:-2
We have all the components needed
to construct our query,


455
00:23:54,067 --> 00:23:55,569 line:-1
so let's go ahead and do that.


456
00:23:59,439 --> 00:24:01,842 line:-1
Here I have my HKStatisticsCollectionQuery


457
00:24:02,342 --> 00:24:04,278 line:-2
passing in the type of data
I want to read,


458
00:24:04,344 --> 00:24:05,812 line:-1
which is our step count data,


459
00:24:06,346 --> 00:24:08,081 line:-1
our predicate of one week ago,


460
00:24:09,149 --> 00:24:11,552 line:-2
the statistics we want to compute,
which is our sum,


461
00:24:12,653 --> 00:24:17,324 line:-2
our anchor of Monday,
and our time interval of a daily cadence.


462
00:24:19,860 --> 00:24:22,863 line:-2
Now that we've constructed our query,
we'll need to update our UI


463
00:24:22,930 --> 00:24:24,198 line:-1
with the results we get back.


464
00:24:25,199 --> 00:24:27,134 line:-1
Here we have our initialResultsHandler.


465
00:24:27,935 --> 00:24:31,572 line:-2
When our query is done executing,
we'll get back our statistics collection,


466
00:24:32,039 --> 00:24:35,075 line:-2
and an error if there was any issue
reading our health data.


467
00:24:36,276 --> 00:24:37,911 line:-1
Here is where we'll update our UI.


468
00:24:42,583 --> 00:24:45,352 line:-2
If there are any statistics
to show in our table view,


469
00:24:45,419 --> 00:24:48,288 line:-2
we'll call our method
updateUIFromStatistics.


470
00:24:48,355 --> 00:24:51,325 line:-2
This is where we'll pass in
our statistics collection


471
00:24:51,391 --> 00:24:53,727 line:-2
and update our array
that's backing our table view.


472
00:24:54,228 --> 00:24:56,496 line:-2
So, let's go down into this method
and implement it.


473
00:24:59,733 --> 00:25:02,202 line:-1
Here I am in updateUIFromStatistics.


474
00:25:02,269 --> 00:25:04,004 line:-1
It takes a statisticsCollection object,


475
00:25:04,071 --> 00:25:06,406 line:-2
so we'll enumerate
over all of our statistics


476
00:25:06,473 --> 00:25:09,176 line:-2
and append it into our array
that's backing our table view.


477
00:25:15,315 --> 00:25:16,750 line:-1
Since we'll be updating our UI,


478
00:25:16,817 --> 00:25:19,353 line:-2
we wanna make sure
to dispatch back to the main thread.


479
00:25:20,521 --> 00:25:22,256 line:-1
Here we have our dataValues array,


480
00:25:22,322 --> 00:25:25,826 line:-2
which is the array
backing our table view and our UI.


481
00:25:25,893 --> 00:25:28,362 line:-1
It is an array of HKStatistics.


482
00:25:28,428 --> 00:25:31,031 line:-2
What we'll need to do
is enumerate over our statistics


483
00:25:31,098 --> 00:25:33,667 line:-2
for the past week
in our statisticsCollection object.


484
00:25:34,334 --> 00:25:36,737 line:-2
We'll define our start date
of one week ago,


485
00:25:36,803 --> 00:25:38,338 line:-1
and we'll enumerate until today.


486
00:25:39,239 --> 00:25:43,110 line:-2
Then we'll call our enumerateStatistics
method on our statisticsCollection,


487
00:25:43,177 --> 00:25:45,946 line:-2
and as we enumerate,
we'll append our statistics


488
00:25:46,013 --> 00:25:47,981 line:-1
into our array backing our table view.


489
00:25:48,382 --> 00:25:51,718 line:-2
Finally, when we're done enumerating,
we'll call reloadData.


490
00:25:52,486 --> 00:25:55,088 line:-2
This will refresh our table view
and update our UI.


491
00:25:56,590 --> 00:25:59,726 line:-2
The final thing we need to do, though,
is execute our query.


492
00:26:00,227 --> 00:26:04,531 line:-2
So, we'll go back up into our calculate
DailyStepCountForPastWeek method


493
00:26:04,598 --> 00:26:08,569 line:-2
and execute our query after setting
our initialResultsHandler.


494
00:26:17,878 --> 00:26:20,480 line:-2
And with that, I'll hit "run"
and let's see what happens.


495
00:26:26,854 --> 00:26:28,021 line:-1
Ah!


496
00:26:28,088 --> 00:26:30,557 line:-2
Our authorization sheet
just popped up on our device.


497
00:26:31,158 --> 00:26:33,427 line:-2
This will allow us
to deny or grant permission


498
00:26:33,493 --> 00:26:35,596 line:-1
to our step-count data for SmoothWalker.


499
00:26:36,330 --> 00:26:39,633 line:-2
Since I'm not particularly sensitive
about steps data,


500
00:26:39,700 --> 00:26:42,402 line:-2
I'll enable both
read and write access for it.


501
00:26:43,270 --> 00:26:46,573 line:-2
I'll hit "Turn All Categories On"
and hit that "Allow" button.


502
00:26:47,808 --> 00:26:51,812 line:-2
And our table view just updated with
all of our daily steps for the past week.


503
00:26:52,646 --> 00:26:55,382 line:-2
Let's go ahead
and try and add some data for today.


504
00:26:56,283 --> 00:26:57,851 line:-1
I'll add 800 steps.


505
00:26:58,852 --> 00:27:00,220 line:-1
I'll hit that "Add" button,


506
00:27:01,088 --> 00:27:03,924 line:-2
and as you can see,
our table view didn't update,


507
00:27:03,991 --> 00:27:07,361 line:-2
and that's because we haven't set
our updateHandler on our query.


508
00:27:07,427 --> 00:27:10,664 line:-2
So, let's go back into Xcode
and set up our updateHandler.


509
00:27:10,731 --> 00:27:12,833 line:-2
That way, our query will be
running in the background,


510
00:27:12,900 --> 00:27:16,436 line:-2
listening for any new health data
or any new steps coming in.


511
00:27:18,839 --> 00:27:20,908 line:-2
We'll set up our updateHandler
in our method


512
00:27:20,974 --> 00:27:23,043 line:-1
calculateDailyStepCountForPastWeek.


513
00:27:23,844 --> 00:27:27,147 line:-2
We'll need to set up our updateHandler
before we execute our query,


514
00:27:29,049 --> 00:27:30,517 line:-1
so that's where we'll do it.


515
00:27:37,658 --> 00:27:39,693 line:-1
Here, I have my statisticsUpdateHandler.


516
00:27:40,894 --> 00:27:42,930 line:-2
This'll get called
when there's any new data


517
00:27:42,996 --> 00:27:44,631 line:-1
that's coming into the database,


518
00:27:44,698 --> 00:27:46,500 line:-1
or if there's any new statistics.


519
00:27:46,567 --> 00:27:48,535 line:-1
We'll get back any new statistics,


520
00:27:48,602 --> 00:27:50,337 line:-1
a statisticsCollection object,


521
00:27:50,404 --> 00:27:52,840 line:-2
and an error
if there's any issue reading our data.


522
00:27:54,007 --> 00:27:56,410 line:-2
Here, we'll update our UI
calling the same method


523
00:27:56,476 --> 00:27:58,378 line:-1
we did in our initialResultsHandler.


524
00:28:06,153 --> 00:28:10,057 line:-2
Now our query is going to be
running in the background indefinitely,


525
00:28:10,123 --> 00:28:13,427 line:-2
listening to any new steps
that'll be added into the database.


526
00:28:14,261 --> 00:28:16,029 line:-1
So, we'll wanna make sure to call "stop"


527
00:28:16,096 --> 00:28:19,032 line:-2
when we're done collecting all the data
that we need.


528
00:28:19,666 --> 00:28:23,136 line:-2
A great place to do that
is in our method viewWillDisappear.


529
00:28:23,837 --> 00:28:26,907 line:-2
That way, our query will stop
when our view is no longer visible


530
00:28:26,974 --> 00:28:28,242 line:-1
on our device.


531
00:28:28,308 --> 00:28:30,210 line:-1
So, let's go ahead and implement that.


532
00:28:37,851 --> 00:28:39,620 line:-1
Here, we're in viewWillDisappear.


533
00:28:39,686 --> 00:28:41,455 line:-1
We'll stop our query in this method.


534
00:28:44,858 --> 00:28:47,427 line:-2
And with that, let's hit run again
and see what happens


535
00:28:47,494 --> 00:28:49,196 line:-1
when we add some new steps for today.


536
00:28:55,869 --> 00:28:59,840 line:-2
So, I'm gonna add some data,
I'll add 235 steps.


537
00:29:03,777 --> 00:29:07,014 line:-2
And our table view just updated
with that new step count.


538
00:29:07,080 --> 00:29:11,285 line:-2
And with that, we just finished displaying
our daily steps in our application.


539
00:29:11,351 --> 00:29:13,353 line:-2
Let's just take a look
at what we just did.


540
00:29:13,420 --> 00:29:16,456 line:-2
We constructed our
HKStatisticsCollectionQuery,


541
00:29:16,523 --> 00:29:18,592 line:-1
executed it on our healthStore,


542
00:29:18,659 --> 00:29:21,929 line:-2
and updated our UI
with our statisticsCollection object.


543
00:29:21,995 --> 00:29:26,834 line:-2
We just took a look at HKStatisticsQuery
and HKStatisticsCollectionQuery.


544
00:29:26,900 --> 00:29:28,368 line:-1
They are super powerful.


545
00:29:29,303 --> 00:29:33,540 line:-2
However, you may not always want
to compute statistics on health data,


546
00:29:34,241 --> 00:29:36,710 line:-2
and not all of
our health data is quantitative.


547
00:29:37,044 --> 00:29:41,048 line:-2
You can use HKSampleQuery
to retrieve the raw health samples


548
00:29:41,114 --> 00:29:42,216 line:-1
stored in the database.


549
00:29:42,716 --> 00:29:44,685 line:-2
Let's go take a look
at how we would do that.


550
00:29:45,652 --> 00:29:49,356 line:-2
Here, we'll define the type of data
I wanna read, which is my workouts.


551
00:29:50,424 --> 00:29:54,027 line:-2
Then I'll define a sort,
which will sort all of the objects


552
00:29:54,094 --> 00:29:56,330 line:-1
returned back from my query.


553
00:29:56,396 --> 00:29:59,900 line:-2
In this case, I want them sorted from
the most recent date that they finished.


554
00:30:00,367 --> 00:30:02,236 line:-1
Finally, we'll construct our sample query,


555
00:30:02,302 --> 00:30:04,738 line:-1
passing in the type of data we wanna read,


556
00:30:04,805 --> 00:30:07,841 line:-2
our predicate, which is nil,
our limit of one,


557
00:30:07,908 --> 00:30:12,613 line:-2
since we're only interested in
the most recent one workout, and our sort.


558
00:30:14,114 --> 00:30:17,251 line:-2
Finally, we'll execute our query
using our healthStore.


559
00:30:17,684 --> 00:30:20,687 line:-2
There are many other types of queries
available on HealthKit


560
00:30:20,754 --> 00:30:23,857 line:-2
to help you accomplish the task
that you have at hand.


561
00:30:24,525 --> 00:30:26,527 line:-1
We have HKAnchoredObjectQuery,


562
00:30:26,593 --> 00:30:29,596 line:-2
which will allow you to detect changes
in the user's database.


563
00:30:30,497 --> 00:30:34,368 line:-2
There's also HKActivitySummaryQuery,
which will allow you to display


564
00:30:34,434 --> 00:30:37,404 line:-2
the rich activity ring data
from our Apple Watch.


565
00:30:38,672 --> 00:30:41,408 line:0
There's also HKWorkoutRouteQuery,


566
00:30:41,475 --> 00:30:46,113 line:0
which will display all of the locations
we've been on during our outdoor workouts.


567
00:30:47,481 --> 00:30:51,351 line:-2
And with that, we finished integrating
HealthKit into SmoothWalker.


568
00:30:52,586 --> 00:30:54,188 line:-1
We discussed a lot today.


569
00:30:54,888 --> 00:30:57,024 line:-2
I wanna go over
some of the bigger takeaways.


570
00:30:57,090 --> 00:31:00,060 line:-2
HealthKit is a framework
that helps create and manage


571
00:31:00,127 --> 00:31:02,896 line:-2
essential repository
of the user's health data,


572
00:31:02,963 --> 00:31:05,933 line:-2
providing a rich ecosystem
for your health application.


573
00:31:06,733 --> 00:31:11,171 line:-2
However, our health data makes up some
of the most sensitive data on our device,


574
00:31:11,238 --> 00:31:13,040 line:-1
so make sure to request authorization


575
00:31:13,106 --> 00:31:17,244 line:-2
for only the data that you need,
when you need it, every time.


576
00:31:17,978 --> 00:31:19,847 line:-1
HealthKit has a rich type system


577
00:31:19,913 --> 00:31:22,282 line:-2
to help organize and structure
our health data.


578
00:31:22,883 --> 00:31:26,420 line:-2
We looked at quantity types,
category types, and even workouts,


579
00:31:27,087 --> 00:31:29,623 line:-2
but there are many more
that I encourage you to look into


580
00:31:29,690 --> 00:31:32,392 line:-2
to see what works best
for your health application.


581
00:31:32,893 --> 00:31:34,895 line:-1
HealthKit has a wide range of queries


582
00:31:34,962 --> 00:31:38,332 line:-2
to help you efficiently
and performantly read data.


583
00:31:39,099 --> 00:31:42,135 line:-2
We looked at SampleQuery
and StatisticsQueries today,


584
00:31:42,202 --> 00:31:46,273 line:-2
but there are many more to help you create
the next great health application.


585
00:31:46,340 --> 00:31:50,077 line:-2
We're so excited for you to join
our healthy community here at Apple,


586
00:31:50,143 --> 00:31:53,080 line:-2
and to see the incredible
health applications you'll build


587
00:31:53,146 --> 00:31:56,750 line:-2
that will revolutionize the way users
take control over their health.


588
00:31:58,085 --> 00:32:02,189 line:-2
I hope you have a wonderful rest
of your WWDC, and let's go get healthy.

