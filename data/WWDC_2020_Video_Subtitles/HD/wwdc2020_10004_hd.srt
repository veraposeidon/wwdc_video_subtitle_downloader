1
00:00:03,937 --> 00:00:07,474 line:-1
Hello and welcome to WWDC.


2
00:00:08,041 --> 00:00:12,846 line:0
Hello. Welcome to "Expanding Automation
with the App Store Connect API."


3
00:00:12,913 --> 00:00:15,883 line:0
My name is Geoff Coffey.
I'm an engineer on App Store Connect.


4
00:00:15,949 --> 00:00:18,185 line:0
Today, we're gonna look at
some new capabilities


5
00:00:18,252 --> 00:00:21,054 line:0
coming to the App Store Connect API
later this year.


6
00:00:22,322 --> 00:00:26,159 line:-2
We introduced this API
two years ago at WWDC


7
00:00:26,226 --> 00:00:29,329 line:-2
and since then, the response
from our users has been really great.


8
00:00:29,396 --> 00:00:32,232 line:-2
We love seeing and hearing about
how you use the API


9
00:00:32,299 --> 00:00:35,569 line:-2
to streamline your app development
and TestFlight programs.


10
00:00:35,636 --> 00:00:36,737 line:-1
For the first release,


11
00:00:36,803 --> 00:00:39,673 line:-2
we focused on things
you do repeatedly in App Store Connect.


12
00:00:39,740 --> 00:00:41,975 line:-2
Things like
managing the users on your team,


13
00:00:42,042 --> 00:00:45,612 line:-2
creating provisioning profiles,
adding and removing beta testers


14
00:00:45,679 --> 00:00:48,115 line:-2
and downloading your sales
and financial reports.


15
00:00:48,182 --> 00:00:50,717 line:-2
Since you do these things
over and over again,


16
00:00:50,784 --> 00:00:52,653 line:-1
we gave you the tools to automate them


17
00:00:52,719 --> 00:00:55,055 line:-2
so you have more time
to focus on your apps.


18
00:00:55,122 --> 00:00:57,724 line:-1
Here's where we started two years ago.


19
00:00:57,791 --> 00:01:00,360 line:-2
But there are important parts
of your app development workflow


20
00:01:00,427 --> 00:01:02,763 line:-1
that aren't covered by the API.


21
00:01:02,829 --> 00:01:05,364 line:-2
I'm excited to announce
two powerful new extensions


22
00:01:05,432 --> 00:01:08,669 line:-2
coming to the App Store Connect API
later this year.


23
00:01:08,735 --> 00:01:12,239 line:-2
First, we're adding
a comprehensive App Metadata API


24
00:01:12,306 --> 00:01:15,042 line:-2
so you can manage your presence
on the App Store,


25
00:01:15,108 --> 00:01:18,545 line:-2
and the new Power and Performance
Metrics and Diagnostics API


26
00:01:18,612 --> 00:01:21,481 line:-2
lets you programmatically access
the same aggregate data


27
00:01:21,548 --> 00:01:25,619 line:-2
that drives the Power and Performance
analysis tools in Xcode.


28
00:01:25,686 --> 00:01:28,689 line:-2
This is a huge update
to the App Store Connect API.


29
00:01:28,755 --> 00:01:30,724 line:-1
We've added over 200 new endpoints,


30
00:01:30,791 --> 00:01:33,627 line:-2
more than doubling the size
of the API in all.


31
00:01:33,694 --> 00:01:36,730 line:-2
You can manage app information
like your app categories,


32
00:01:36,797 --> 00:01:40,601 line:-2
global availability,
primary locale and license agreements.


33
00:01:40,667 --> 00:01:43,704 line:-2
You can make new versions
or add new platforms,


34
00:01:43,770 --> 00:01:46,173 line:-1
upload app previews and screenshots


35
00:01:46,240 --> 00:01:48,242 line:-1
and add and update localized information


36
00:01:48,308 --> 00:01:51,111 line:-2
like your app name, description
and keywords,


37
00:01:51,178 --> 00:01:53,247 line:-1
and so much more.


38
00:01:53,313 --> 00:01:56,149 line:-2
The API has complete coverage
of app version metadata


39
00:01:56,216 --> 00:01:58,852 line:-2
so you can do everything
from creating a new version


40
00:01:58,919 --> 00:02:00,721 line:-1
through to submitting for App Review.


41
00:02:00,787 --> 00:02:03,957 line:-2
I do want to note that you'll still need
to use the App Store Connect website


42
00:02:04,024 --> 00:02:05,759 line:-1
to manually release your app


43
00:02:05,826 --> 00:02:08,529 line:-2
and to configure in-app purchases
and Game Center.


44
00:02:08,595 --> 00:02:11,164 line:-2
With so much new to discover
and code against,


45
00:02:11,231 --> 00:02:15,002 line:-2
we want to make the process
of using the API as easy as possible.


46
00:02:15,068 --> 00:02:16,069 line:-1
So, we're also making


47
00:02:16,136 --> 00:02:19,840 line:-2
a full OpenAPI specification file
available to you to download.


48
00:02:19,907 --> 00:02:22,075 line:-1
If you're not familiar with OpenAPI,


49
00:02:22,142 --> 00:02:25,579 line:-2
it's the open standard version 3
of the popular Swagger format.


50
00:02:25,646 --> 00:02:28,882 line:-2
You can view it in the Swagger-UI
for a quick API reference,


51
00:02:28,949 --> 00:02:31,118 line:-2
or better yet,
feed it into a code generator


52
00:02:31,185 --> 00:02:36,957 line:-2
to make bootstrapping your API integration
in almost any language faster and easier.


53
00:02:37,024 --> 00:02:38,625 line:-1
We've also improved the documentation.


54
00:02:38,692 --> 00:02:40,727 line:-2
Of course,
all the new endpoints are documented,


55
00:02:40,794 --> 00:02:44,097 line:-2
now with clearer complete request
and response examples.


56
00:02:44,164 --> 00:02:46,300 line:-2
We've added
several new explanatory articles


57
00:02:46,366 --> 00:02:49,036 line:-2
on topics like rate limiting
and file uploads.


58
00:02:49,837 --> 00:02:51,872 line:-2
And we're providing
downloadable sample code


59
00:02:51,939 --> 00:02:54,107 line:-1
that demonstrates important API concepts


60
00:02:54,174 --> 00:02:56,577 line:-2
like creating and signing
authentication tokens,


61
00:02:56,643 --> 00:03:00,948 line:-2
interacting with API responses
and using the new asset upload APIs.


62
00:03:01,882 --> 00:03:05,986 line:-2
So, let's take a look at what you can do
with the new App Metadata API.


63
00:03:06,053 --> 00:03:08,322 line:-1
This is my app, Forest Explorer.


64
00:03:08,388 --> 00:03:10,123 line:-1
I've been hard at work on a new version,


65
00:03:10,190 --> 00:03:13,026 line:-2
and I'm ready to submit this version
to the App Store.


66
00:03:13,093 --> 00:03:16,230 line:-2
Let me show you
how I would do this using the new API.


67
00:03:17,064 --> 00:03:19,299 line:-1
We're going to focus on five areas.


68
00:03:19,366 --> 00:03:23,637 line:-2
We'll create a new version, set pricing,
update the app metadata,


69
00:03:23,704 --> 00:03:25,539 line:-1
associate a build with that version


70
00:03:25,606 --> 00:03:28,675 line:-2
and then submit that new version
for App Review.


71
00:03:28,742 --> 00:03:31,345 line:-2
Let's start by creating
a new version of our app.


72
00:03:32,212 --> 00:03:34,448 line:-2
In App Store Connect,
you do this on the App page


73
00:03:34,515 --> 00:03:36,383 line:-1
using these links here in the sidebar.


74
00:03:36,450 --> 00:03:41,855 line:-2
I can make a new version of my iOS app,
or I can add a macOS or tvOS version.


75
00:03:41,922 --> 00:03:44,424 line:-1
The API supports the same operations.


76
00:03:44,491 --> 00:03:47,261 line:-2
In the API,
we have a resource called Apps.


77
00:03:47,327 --> 00:03:49,429 line:-2
You have one of these
for each of your apps.


78
00:03:49,963 --> 00:03:54,067 line:-2
And each app has a relationship
to App Store Versions.


79
00:03:54,134 --> 00:03:58,071 line:-1
They have a platform, iOS, tvOS or macOS,


80
00:03:58,138 --> 00:03:59,806 line:-1
and they have a version string,


81
00:03:59,873 --> 00:04:03,076 line:-2
which is the version number
that you want to show in the App Store.


82
00:04:03,143 --> 00:04:06,346 line:-2
So all we need to do is create
a new App Store Version.


83
00:04:06,413 --> 00:04:09,283 line:-2
When we do that,
we'll link it to our app by ID.


84
00:04:09,349 --> 00:04:14,488 line:-2
So really, the first thing we need to do
is look up our app identifier.


85
00:04:14,555 --> 00:04:16,390 line:-1
We can do this with the API.


86
00:04:16,456 --> 00:04:21,295 line:-2
I'm going to do a GET on v1/apps,
and I'm going to filter by bundleID


87
00:04:21,361 --> 00:04:24,531 line:-2
since that's a good way to find
exactly the app I'm looking for.


88
00:04:24,598 --> 00:04:28,902 line:-2
If I send that request,
I get a successful 200 response.


89
00:04:28,969 --> 00:04:34,141 line:-2
The response contains the app resource,
and here we see the app identifier.


90
00:04:34,208 --> 00:04:35,776 line:-1
In the App Store Connect documentation,


91
00:04:35,843 --> 00:04:39,413 line:-2
you sometimes see this ID
called the Apple ID of your app.


92
00:04:39,479 --> 00:04:43,383 line:-2
We'll take note of this ID
and we're ready to make a new version.


93
00:04:43,450 --> 00:04:47,254 line:-1
We do a POST to v1/appStoreVersions,


94
00:04:47,321 --> 00:04:51,391 line:-2
we supply the platform
and our new versionString


95
00:04:51,458 --> 00:04:53,994 line:-2
and we include a relationship link
to the app.


96
00:04:54,061 --> 00:04:57,364 line:-2
And here's where we use that App ID
we just looked up.


97
00:04:57,431 --> 00:05:01,835 line:-2
I send this request,
and I get a 201 CREATED response.


98
00:05:01,902 --> 00:05:05,005 line:-2
This tells us App Store Connect
has created this new version.


99
00:05:05,072 --> 00:05:07,174 line:-2
If we were to log in
to App Store Connect right now,


100
00:05:07,241 --> 00:05:09,843 line:-1
we'd see this version in the sidebar.


101
00:05:09,910 --> 00:05:12,012 line:-2
And here in the response,
we see the identifier


102
00:05:12,079 --> 00:05:14,615 line:-2
App Store Connect has assigned
to this version.


103
00:05:15,148 --> 00:05:18,418 line:-2
Now we want to set pricing
and availability for our app.


104
00:05:19,353 --> 00:05:21,154 line:-1
On the App page in App Store Connect,


105
00:05:21,221 --> 00:05:23,724 line:-2
you start by clicking
Pricing and Availability


106
00:05:23,790 --> 00:05:27,427 line:-2
here in the sidebar which takes us to
the Pricing and Availability page.


107
00:05:27,494 --> 00:05:31,698 line:-2
And in particular, today we're going to
look at the Price Schedule.


108
00:05:31,765 --> 00:05:33,233 line:-1
Now, I'm not going to show it today,


109
00:05:33,300 --> 00:05:36,303 line:-2
but you can also use the API
to manage your app preorders


110
00:05:36,370 --> 00:05:38,572 line:-1
and your app's global availability.


111
00:05:38,639 --> 00:05:41,642 line:-2
So, how does pricing
fit into the API resource model?


112
00:05:41,708 --> 00:05:44,645 line:-2
Once again,
we start with the Apps Resource.


113
00:05:44,711 --> 00:05:48,615 line:-2
It has another relationship
to a resource called App Prices.


114
00:05:48,682 --> 00:05:50,350 line:-1
Each App Price has a startDate.


115
00:05:50,417 --> 00:05:52,319 line:-1
For the current price, this will be null.


116
00:05:52,386 --> 00:05:53,754 line:-1
But this is a Price Schedule,


117
00:05:53,820 --> 00:05:57,090 line:-2
so we may have multiple
planned future price changes.


118
00:05:57,157 --> 00:05:59,726 line:-2
In that case,
our app will have multiple prices,


119
00:05:59,793 --> 00:06:02,396 line:-2
and each additional price
will have a startDate,


120
00:06:02,462 --> 00:06:06,066 line:-2
which is the date that price takes effect
around the world.


121
00:06:06,133 --> 00:06:08,302 line:-1
Each App Price also has a Price Tier.


122
00:06:08,368 --> 00:06:09,670 line:-1
These are exactly the same tiers


123
00:06:09,736 --> 00:06:11,471 line:-2
you're familiar with
from App Store Connect.


124
00:06:11,538 --> 00:06:16,510 line:-2
The free tier, Tier 1, which is 99 cents
in US dollars, and so on.


125
00:06:16,577 --> 00:06:18,145 line:-1
To select a tier in App Store Connect,


126
00:06:18,212 --> 00:06:21,014 line:-2
you would normally refer to
All Prices and Currencies page.


127
00:06:21,081 --> 00:06:22,416 line:-1
Let me show you.


128
00:06:22,482 --> 00:06:26,520 line:-2
Back on the Pricing and Availability,
we click All Prices and Currencies here,


129
00:06:26,587 --> 00:06:28,956 line:-1
and we see a list of prices like this.


130
00:06:29,022 --> 00:06:33,160 line:-2
It has tiers down the side
and App Store territories across the top,


131
00:06:33,227 --> 00:06:37,831 line:-2
and for each tier and territory,
we see individual price points.


132
00:06:37,898 --> 00:06:40,033 line:-1
Each price point has two values:


133
00:06:40,100 --> 00:06:42,002 line:-1
the price the customer pays for the app


134
00:06:42,069 --> 00:06:44,771 line:-2
in the currency
relevant to that territory,


135
00:06:44,838 --> 00:06:48,141 line:-2
and the proceeds you will earn
for each sale.


136
00:06:48,208 --> 00:06:50,477 line:-2
Back on the resource model,
the price tier here


137
00:06:50,544 --> 00:06:54,181 line:-2
is actually a relationship
to another set of resources.


138
00:06:54,248 --> 00:06:57,417 line:-2
These gray resources
are read-only reference data,


139
00:06:57,484 --> 00:07:01,922 line:-2
the exact same data you just saw
on the All Prices and Currencies page.


140
00:07:01,989 --> 00:07:04,691 line:-2
Each price tier contains
a collection of price points,


141
00:07:04,758 --> 00:07:07,628 line:-1
one point for each app store territory.


142
00:07:07,694 --> 00:07:11,331 line:-2
And these price points tell you
the customer price and the proceeds.


143
00:07:11,398 --> 00:07:13,300 line:-1
Okay, with all of that in mind,


144
00:07:13,367 --> 00:07:17,237 line:-2
let's use the API to look at
the current Price Schedule for our app.


145
00:07:17,304 --> 00:07:20,140 line:-1
We do a GET on v1/apps


146
00:07:20,207 --> 00:07:24,578 line:-2
and then the ID of our app,
and then the prices relationship,


147
00:07:24,645 --> 00:07:27,281 line:-2
and I'm also going to include
the related priceTier


148
00:07:27,347 --> 00:07:29,416 line:-1
so we can see that in the response.


149
00:07:29,483 --> 00:07:33,453 line:-2
I execute this request
and I get back a list of prices.


150
00:07:33,520 --> 00:07:35,489 line:-1
In this case, we have just one price.


151
00:07:35,556 --> 00:07:38,458 line:-2
The startDate is null,
meaning it's currently in effect,


152
00:07:38,525 --> 00:07:43,564 line:-2
and here's the priceTier relationship
where I can see it's linked to Tier 1.


153
00:07:43,630 --> 00:07:47,334 line:-2
Let's compare this JSON data
to what we see in App Store Connect.


154
00:07:47,401 --> 00:07:51,371 line:-2
If we look closer at the Price Schedule,
we can see the same basic information.


155
00:07:51,438 --> 00:07:55,509 line:-2
We have one price,
it's currently in effect, at Tier 1.


156
00:07:56,210 --> 00:07:59,179 line:-2
Now, suppose we want to run
a special pricing promotion for our app.


157
00:07:59,246 --> 00:08:03,016 line:-2
Starting on June 29th, for one week,
let's give our app away for free.


158
00:08:03,083 --> 00:08:06,486 line:-2
In other words, we want
the Price Schedule to look like this.


159
00:08:07,287 --> 00:08:09,022 line:-1
Now we have three prices.


160
00:08:09,089 --> 00:08:11,558 line:-1
Tier 1 is in effect until June 29th.


161
00:08:11,625 --> 00:08:14,528 line:-2
Starting on June 29th,
we'll switch to the free tier.


162
00:08:14,595 --> 00:08:19,132 line:-2
And then a week later, on July 6th,
we want it to change back to Tier 1.


163
00:08:19,199 --> 00:08:22,669 line:-2
Let's make this Price Schedule change
using the API.


164
00:08:24,304 --> 00:08:26,173 line:-1
Although we're adding three prices,


165
00:08:26,240 --> 00:08:30,644 line:-2
I want to make a single atomic change
to the overall Price Schedule.


166
00:08:30,711 --> 00:08:34,414 line:-2
So, we're going to make a PATCH request
against the app itself.


167
00:08:34,481 --> 00:08:37,918 line:-2
We're not changing any app attributes,
so we leave the attribute section off,


168
00:08:37,985 --> 00:08:41,054 line:-2
but we are changing
the prices relationship.


169
00:08:41,121 --> 00:08:43,222 line:-2
Now, if you're familiar
with App Store Connect,


170
00:08:43,289 --> 00:08:46,126 line:-2
you know that we would normally
add the IDs of the resources


171
00:08:46,193 --> 00:08:48,962 line:-2
we want to associate with the app
right here.


172
00:08:49,029 --> 00:08:52,966 line:-2
But in this case, the app price resources
don't actually exist yet.


173
00:08:53,033 --> 00:08:56,036 line:-2
We need to create them
and attach them to the app,


174
00:08:56,103 --> 00:08:58,138 line:-1
all in a single request.


175
00:08:58,205 --> 00:09:01,208 line:-2
Since the prices don't exist,
they don't have IDs,


176
00:09:01,275 --> 00:09:04,478 line:-2
so let's assign them temporary IDs
for now.


177
00:09:04,545 --> 00:09:08,282 line:-2
We have three prices,
so we need three temporary IDs.


178
00:09:08,348 --> 00:09:13,554 line:-2
I'll use new-price-1, new-price-2
and new-price-3.


179
00:09:13,620 --> 00:09:16,456 line:-2
You can use any values you want
for these temporary IDs.


180
00:09:16,523 --> 00:09:18,592 line:-2
The important things is
I'm using this syntax


181
00:09:18,659 --> 00:09:21,828 line:-2
with a dollar sign
and braces around the ID.


182
00:09:21,895 --> 00:09:25,499 line:-2
That serves as a signal to the API
that this is a temporary ID


183
00:09:25,566 --> 00:09:27,768 line:-1
for a resource that doesn't exist yet,


184
00:09:27,835 --> 00:09:31,839 line:-2
one that we will be defining
in this same request.


185
00:09:31,905 --> 00:09:35,042 line:-2
Now we need to define
those new app price resources.


186
00:09:35,108 --> 00:09:36,109 line:-1
Here's the first one.


187
00:09:36,176 --> 00:09:39,213 line:-2
We give it the first temporary ID
of new-price-1,


188
00:09:39,279 --> 00:09:41,682 line:-1
again with that dollar sign syntax.


189
00:09:41,748 --> 00:09:45,118 line:-2
It has a startDate of null, meaning this
is the price we want right now.


190
00:09:45,185 --> 00:09:47,521 line:-2
You can also just leave the startDate off
in this scenario.


191
00:09:47,588 --> 00:09:49,189 line:-1
It would do the same thing.


192
00:09:49,256 --> 00:09:51,758 line:-1
And finally, we link it with Tier 1.


193
00:09:51,825 --> 00:09:55,095 line:-2
Next, we define the second price.
It looks like this.


194
00:09:55,162 --> 00:09:59,199 line:-2
It has an ID of new-price-2,
a startDate of June 29th,


195
00:09:59,266 --> 00:10:01,969 line:-1
and we link it to Tier 0, the free tier.


196
00:10:03,103 --> 00:10:07,241 line:-2
And finally, we define new-price-3
with a date of July 6,


197
00:10:07,307 --> 00:10:09,576 line:-1
and we'll switch back to priceTier 1.


198
00:10:09,643 --> 00:10:11,411 line:-2
Now bear in mind,
we haven't sent any requests


199
00:10:11,478 --> 00:10:13,213 line:-1
for this Price Schedule change.


200
00:10:13,280 --> 00:10:14,982 line:-1
We're still building the JSON payload


201
00:10:15,048 --> 00:10:18,385 line:-2
for that single atomic request
I talked about before.


202
00:10:18,452 --> 00:10:20,120 line:-1
Here's the request we were working on.


203
00:10:20,187 --> 00:10:24,224 line:-2
And now we need to add the prices
we just defined into this request.


204
00:10:24,291 --> 00:10:27,327 line:0
We add an "included" section
to our request entity,


205
00:10:27,394 --> 00:10:33,467 line:0
and then we take those three new prices
and insert them into this included array.


206
00:10:33,534 --> 00:10:35,335 line:0
The final payload looks like this,


207
00:10:35,402 --> 00:10:38,472 line:0
or at least as much of it
as I can fit on the screen.


208
00:10:38,539 --> 00:10:42,209 line:-2
Now, the order of the resources
in the included array doesn't matter.


209
00:10:42,276 --> 00:10:45,946 line:-2
The important thing is
that these temporary IDs up here


210
00:10:46,013 --> 00:10:49,483 line:-2
match one-to-one
with the temporary IDs down here.


211
00:10:50,384 --> 00:10:51,985 line:-1
When we send this request,


212
00:10:52,052 --> 00:10:54,421 line:-2
App Store Connect
will create these three prices,


213
00:10:54,488 --> 00:10:57,491 line:-2
assign them real IDs
and link them to our app,


214
00:10:57,558 --> 00:11:00,294 line:-1
all in one atomic operation.


215
00:11:00,360 --> 00:11:01,361 line:-1
Let's send it.


216
00:11:01,428 --> 00:11:06,200 line:-2
We get back a 200 response,
and our new Price Schedule is now applied.


217
00:11:06,266 --> 00:11:07,434 line:-1
Now, it's important to note


218
00:11:07,501 --> 00:11:10,003 line:-2
that price changes
and available territory changes


219
00:11:10,070 --> 00:11:11,839 line:-1
go to the App Store right away.


220
00:11:11,905 --> 00:11:15,209 line:-2
If your app is already released,
the changes will take effect immediately.


221
00:11:15,275 --> 00:11:17,978 line:-2
They will not wait for your next version
to go through App Review


222
00:11:18,045 --> 00:11:19,246 line:-1
and then be released.


223
00:11:19,313 --> 00:11:23,417 line:-2
So when experimenting with the API,
be sure not to test on live apps.


224
00:11:24,484 --> 00:11:26,787 line:-2
Now let's talk about
editing your app metadata.


225
00:11:26,854 --> 00:11:30,290 line:-2
This is a really big area in the API
with lots of endpoints,


226
00:11:30,357 --> 00:11:31,725 line:-1
so let me show you around first.


227
00:11:32,960 --> 00:11:36,530 line:-2
Back on our Version page,
I can click App Information,


228
00:11:36,597 --> 00:11:40,234 line:-2
and that takes me to a page
where we see app-level information


229
00:11:40,300 --> 00:11:43,971 line:-2
including the localized app name,
subtitle and privacy policy


230
00:11:44,037 --> 00:11:46,573 line:-1
and the App Store categorization.


231
00:11:46,640 --> 00:11:50,611 line:-2
And if we click here on our version,
we see version-level information.


232
00:11:50,677 --> 00:11:54,214 line:-2
This is metadata that changes
on a platform-by-platform basis


233
00:11:54,281 --> 00:11:58,085 line:-2
like screenshots, promotional text
and keywords.


234
00:11:58,151 --> 00:12:01,154 line:-2
The API resource model
works in much the same way.


235
00:12:01,221 --> 00:12:03,056 line:-1
Here's what we've seen so far.


236
00:12:03,123 --> 00:12:07,027 line:-2
The app also has a relationship
to a resource called App Info.


237
00:12:07,094 --> 00:12:09,263 line:-2
This is where you'll find
app-level information


238
00:12:09,329 --> 00:12:11,632 line:-1
like your App Store categorization.


239
00:12:11,698 --> 00:12:14,234 line:-2
And some of that app information
is localized,


240
00:12:14,301 --> 00:12:19,273 line:-2
so each App Info has a relationship
to multiple App Info Localizations,


241
00:12:19,339 --> 00:12:21,608 line:-1
one for each locale.


242
00:12:22,543 --> 00:12:27,781 line:-2
Here you'll find attributes like app name,
subtitle and privacy policy.


243
00:12:27,848 --> 00:12:30,984 line:-2
And, of course, there's localized data
at the version level too.


244
00:12:31,051 --> 00:12:34,688 line:-2
We call this resource
the App Store Version Localization.


245
00:12:34,755 --> 00:12:37,724 line:-2
The version has one of these
for each locale as well.


246
00:12:37,791 --> 00:12:39,626 line:-1
Let's flip back to App Store Connect


247
00:12:39,693 --> 00:12:41,929 line:-2
and look a little closer
at our version page.


248
00:12:41,995 --> 00:12:45,199 line:-2
I'm looking at
the US English localization here,


249
00:12:45,265 --> 00:12:48,468 line:-2
and if we look closer at screenshots
and app previews,


250
00:12:48,535 --> 00:12:52,840 line:-2
we see we have multiple display types
like the 6.5-inch iPhone,


251
00:12:52,906 --> 00:12:57,477 line:-2
the 5.5-inch iPhone
or the 12.9-inch iPad Pro.


252
00:12:57,544 --> 00:13:01,281 line:-2
Within each display type,
we can upload up to three previews


253
00:13:01,348 --> 00:13:03,217 line:-1
and up to ten screenshots.


254
00:13:03,283 --> 00:13:05,786 line:-1
All of this is modeled in the API


255
00:13:05,853 --> 00:13:09,189 line:-2
through resources
and relationships as well.


256
00:13:09,256 --> 00:13:11,525 line:-2
The version localization
has a relationship


257
00:13:11,592 --> 00:13:14,061 line:-1
to multiple app screenshot sets,


258
00:13:14,127 --> 00:13:16,096 line:-1
one for each display type.


259
00:13:16,163 --> 00:13:19,666 line:-2
The localization also has
multiple app preview sets.


260
00:13:19,733 --> 00:13:23,837 line:-2
And finally, each screenshot set has
a relationship to multiple screenshots,


261
00:13:23,904 --> 00:13:26,673 line:-1
and each preview set to multiple previews.


262
00:13:26,740 --> 00:13:29,243 line:-2
There's a lot more
to app version metadata,


263
00:13:29,309 --> 00:13:32,045 line:-2
but these are the major resources
we'll talk about today.


264
00:13:33,447 --> 00:13:37,684 line:-2
So let's say we want to upload
a 6.5-inch iPhone app preview


265
00:13:37,751 --> 00:13:40,954 line:-2
in the US English localization
to promote my new version.


266
00:13:41,955 --> 00:13:45,259 line:-2
In other words,
let's find the US English localization,


267
00:13:45,325 --> 00:13:48,662 line:-2
get the app preview set
and add a new preview to it.


268
00:13:49,863 --> 00:13:52,533 line:-2
Every version has
at least one localization:


269
00:13:52,599 --> 00:13:54,902 line:-1
the one in your app's primary locale.


270
00:13:54,968 --> 00:13:57,971 line:-2
We can fetch that localization
for our versions like this.


271
00:13:58,038 --> 00:14:03,310 line:-2
We issue a GET request to
the appStoreVersionLocalizations URL


272
00:14:03,377 --> 00:14:05,846 line:-1
for our version ID.


273
00:14:05,913 --> 00:14:08,515 line:-2
The response includes
all of our localizations


274
00:14:08,582 --> 00:14:11,552 line:-1
including this one for US English.


275
00:14:11,618 --> 00:14:15,889 line:-2
And down here we see the related URL
for the appPreviewSets.


276
00:14:15,956 --> 00:14:20,194 line:-2
Let's GET this URL,
and we get back an empty data array.


277
00:14:20,260 --> 00:14:24,431 line:-2
This tells us we don't have any
app preview sets for this localization.


278
00:14:24,498 --> 00:14:26,433 line:-1
So, let's add one.


279
00:14:26,500 --> 00:14:31,638 line:-2
As you probably would guess,
we POST to v1/appPreviewSets.


280
00:14:31,705 --> 00:14:36,877 line:-2
We'll use a previewType of IPHONE_65,
that's the 6.5-inch iPhone,


281
00:14:37,444 --> 00:14:41,515 line:-2
and we link it to the localization
we were just looking at by ID.


282
00:14:41,582 --> 00:14:45,419 line:-2
We send this request,
and the preview set has been created.


283
00:14:45,485 --> 00:14:47,855 line:-1
Now we're ready to add an app preview.


284
00:14:49,089 --> 00:14:52,192 line:-2
We send this request,
and the preview set has been created.


285
00:14:52,826 --> 00:14:56,196 line:-2
But a preview is more than
just some attributes and relationships.


286
00:14:56,263 --> 00:15:00,033 line:-2
You have a video file that you need
to upload to App Store Connect.


287
00:15:00,100 --> 00:15:02,069 line:-1
This is a type of API interaction


288
00:15:02,135 --> 00:15:04,972 line:-2
you've never seen before
in the App Store Connect API,


289
00:15:05,038 --> 00:15:08,308 line:-2
so let's step back a minute
and look at how this works.


290
00:15:08,375 --> 00:15:12,646 line:-2
App previews are just one type of file
you can upload using the API.


291
00:15:12,713 --> 00:15:15,883 line:-2
You could also upload screenshots,
App Review attachments


292
00:15:15,949 --> 00:15:18,318 line:-1
and GeoJSON routing app coverage files.


293
00:15:18,385 --> 00:15:21,555 line:-2
But whatever you're uploading,
the fundamental problem is the same:


294
00:15:21,622 --> 00:15:24,491 line:-2
you have this file on your disk,
we call it an asset,


295
00:15:24,558 --> 00:15:27,494 line:-2
and you want to get it up
to App Store Connect.


296
00:15:27,561 --> 00:15:29,796 line:-1
But the Internet is standing in the way.


297
00:15:29,863 --> 00:15:32,866 line:-2
Our asset upload process
is a multi-step process


298
00:15:32,933 --> 00:15:36,303 line:-2
designed to ensure that you can get
even large video files


299
00:15:36,370 --> 00:15:39,206 line:-2
into App Store Connect
as quickly as possible,


300
00:15:39,273 --> 00:15:40,941 line:-1
and get them there reliably


301
00:15:41,008 --> 00:15:44,311 line:-2
even if the Internet connection
isn't always perfectly reliable.


302
00:15:45,078 --> 00:15:48,248 line:-2
It works like this.
First, you create a reservation.


303
00:15:48,315 --> 00:15:52,452 line:-2
Then you upload the actual assets,
possibly in multiple parts.


304
00:15:52,519 --> 00:15:54,421 line:-1
Then you commit the asset.


305
00:15:54,488 --> 00:15:56,890 line:-2
And finally, you check for errors.
Let's try it out.


306
00:15:57,991 --> 00:16:03,130 line:-2
You create an app preview reservation
by doing a POST to v1/appPreviews.


307
00:16:03,764 --> 00:16:07,100 line:-2
And you tell App Store Connect
the name of the file you'll be uploading


308
00:16:07,167 --> 00:16:09,803 line:-1
and the file size in bytes.


309
00:16:09,870 --> 00:16:12,706 line:-2
You link it to the preview set
we just created,


310
00:16:12,773 --> 00:16:15,976 line:-2
and App Store Connect reserves a place
for this preview.


311
00:16:16,043 --> 00:16:20,581 line:-2
It uses the file size
to create a set of upload operations.


312
00:16:20,647 --> 00:16:22,482 line:-1
For small assets, this is simple:


313
00:16:22,549 --> 00:16:26,787 line:-2
just an HTTP PUT operation
to upload the data to our servers.


314
00:16:26,854 --> 00:16:31,225 line:-2
But for large assets,
we will send you back multiple operations.


315
00:16:31,291 --> 00:16:33,694 line:-2
Each operation
includes the same properties:


316
00:16:33,760 --> 00:16:38,165 line:-1
an HTTP method, a URL, a length in bytes,


317
00:16:38,232 --> 00:16:41,969 line:-2
an offset in bytes
and a set of request headers.


318
00:16:42,035 --> 00:16:45,672 line:-2
You then take these operations
and use the information in them


319
00:16:45,739 --> 00:16:48,575 line:-1
to split your asset into multiple parts:


320
00:16:48,642 --> 00:16:51,044 line:-1
one part for each operation.


321
00:16:51,411 --> 00:16:55,883 line:-2
You'll use the length and offset values
in each operation


322
00:16:55,949 --> 00:17:00,721 line:-2
to determine the range of bytes
in the file associated with each part.


323
00:17:00,787 --> 00:17:04,558 line:-2
Note that you should always be prepared
to receive multiple operations.


324
00:17:04,625 --> 00:17:07,895 line:-2
We may use various factors to decide
how many operations are needed.


325
00:17:07,961 --> 00:17:10,396 line:-2
So, an asset that you upload
in just one part today


326
00:17:10,464 --> 00:17:12,766 line:-1
might require multiple parts tomorrow.


327
00:17:12,833 --> 00:17:17,671 line:-2
So your code should always expect the
possibility of multiple upload operations.


328
00:17:18,771 --> 00:17:22,809 line:-2
Okay. With our asset split into parts,
we're ready for step number two.


329
00:17:22,876 --> 00:17:28,015 line:-2
Using the method, URL and request headers
in each upload operation,


330
00:17:28,080 --> 00:17:30,584 line:-1
you upload the associated part.


331
00:17:30,651 --> 00:17:33,420 line:-1
You can do this one at a time


332
00:17:33,487 --> 00:17:35,322 line:-1
or you can upload multiple parts at once.


333
00:17:36,890 --> 00:17:40,961 line:-2
You can upload these parts in any order.
It doesn't matter at all.


334
00:17:41,028 --> 00:17:45,566 line:-2
Of course, sometimes the upload will fail.
That's okay. Just try the part again.


335
00:17:45,632 --> 00:17:48,902 line:-2
If one part fails, there's no need
to re-upload the other parts.


336
00:17:48,969 --> 00:17:51,305 line:-2
Just keep trying
until all of the parts are up.


337
00:17:51,371 --> 00:17:53,907 line:-2
Once they are,
you're ready for step number three,


338
00:17:53,974 --> 00:17:56,343 line:-1
which is to commit the asset.


339
00:17:56,410 --> 00:17:59,079 line:-1
To do this, you PATCH the preview URL


340
00:17:59,146 --> 00:18:03,917 line:-2
and mark the preview uploaded
by setting its uploaded attribute to true.


341
00:18:03,984 --> 00:18:07,888 line:-2
You also need to provide an MD5 checksum
of the original source file.


342
00:18:07,955 --> 00:18:09,590 line:-1
App Store Connect will use this checksum


343
00:18:09,656 --> 00:18:13,694 line:-2
to make sure the multiple parts
were divided and uploaded correctly.


344
00:18:13,760 --> 00:18:15,329 line:-1
We send this request.


345
00:18:15,395 --> 00:18:17,998 line:-2
App Store Connect
then reassembles the asset,


346
00:18:18,065 --> 00:18:19,433 line:-1
validates the checksum,


347
00:18:19,499 --> 00:18:22,636 line:-2
checks the file integrity,
like, is this actually a video file,


348
00:18:22,703 --> 00:18:24,972 line:-2
and checks various metrics
like video length,


349
00:18:25,038 --> 00:18:27,341 line:-1
dimensions and audio track.


350
00:18:27,407 --> 00:18:29,910 line:-2
If everything looks good,
the asset is marked complete,


351
00:18:29,977 --> 00:18:32,913 line:-2
and your app preview
is ready to submit for review.


352
00:18:32,980 --> 00:18:35,949 line:-2
Bear in mind that asset processing
is asynchronous.


353
00:18:36,016 --> 00:18:38,418 line:-1
For large assets, it may take some time.


354
00:18:38,485 --> 00:18:42,923 line:-2
You can use the API to re-fetch an asset
at any time to check on its status.


355
00:18:44,291 --> 00:18:45,726 line:-1
If we fetch the app preview,


356
00:18:45,792 --> 00:18:48,195 line:-2
we can check its state attribute
right here.


357
00:18:48,262 --> 00:18:52,699 line:-2
Once validation is successful,
the asset state will switch to COMPLETE.


358
00:18:52,766 --> 00:18:56,436 line:-2
If anything goes wrong,
the state will instead change to FAILED


359
00:18:56,503 --> 00:18:59,139 line:-2
and the errors array will tell you
what went wrong


360
00:18:59,206 --> 00:19:03,043 line:-2
so you can delete the asset,
fix the problem and re-upload.


361
00:19:03,110 --> 00:19:04,978 line:-1
We looked closely at app previews


362
00:19:05,045 --> 00:19:07,648 line:-2
and a few other
app metadata-related resources today,


363
00:19:07,714 --> 00:19:09,349 line:-1
but we only scratched the surface.


364
00:19:09,416 --> 00:19:12,553 line:-2
There's lots more metadata
you can manage and edit with the API.


365
00:19:12,619 --> 00:19:16,857 line:-2
Be sure to check out the new
App Metadata section in the documentation.


366
00:19:16,924 --> 00:19:21,628 line:-2
It has a complete list of API endpoints
related to app and version metadata.


367
00:19:21,695 --> 00:19:24,264 line:-2
Now let's look at adding a build
to our new version.


368
00:19:24,331 --> 00:19:27,000 line:-2
In App Store Connect,
you do this on the version page


369
00:19:27,067 --> 00:19:28,702 line:-1
in the Build section right here.


370
00:19:28,769 --> 00:19:30,971 line:-2
Where does that fit
into our resource model?


371
00:19:31,038 --> 00:19:35,576 line:-2
Right here. The App Store version has
a relationship to its associated build.


372
00:19:35,642 --> 00:19:38,145 line:-2
Of course, you don't actually
create builds with the API.


373
00:19:38,212 --> 00:19:39,746 line:-1
You create your builds with Xcode


374
00:19:39,813 --> 00:19:42,616 line:-2
and you upload them using Xcode
or using Transporter.


375
00:19:42,683 --> 00:19:45,919 line:-2
So presumably, the build is already
in App Store Connect.


376
00:19:45,986 --> 00:19:49,656 line:-2
We just need to look up its ID
and associate it with the version.


377
00:19:49,723 --> 00:19:51,825 line:-2
This is probably starting
to look familiar to you now.


378
00:19:51,892 --> 00:19:55,429 line:-2
We GET v1/builds.
I'm gonna filter by the app ID,


379
00:19:55,495 --> 00:19:58,899 line:-2
the pre-release version number
and the build version number.


380
00:19:58,966 --> 00:20:01,502 line:-2
And from the response,
I'll grab the build ID.


381
00:20:01,568 --> 00:20:05,973 line:-2
Now we can PATCH the build relationship
on our new version with that build ID.


382
00:20:06,039 --> 00:20:10,878 line:-2
We send it in and we get back
this 204 NO CONTENT response.


383
00:20:10,944 --> 00:20:14,214 line:-2
Since this was a relationship update,
there's no resource data to return.


384
00:20:14,281 --> 00:20:16,316 line:-1
So, this is a successful response message


385
00:20:16,383 --> 00:20:18,919 line:-2
telling us the build
and version IDs were valid,


386
00:20:18,986 --> 00:20:21,221 line:-2
and they're now correctly associated
with each other.


387
00:20:21,855 --> 00:20:25,025 line:-2
With metadata complete and a build added,
we're ready to submit for Review.


388
00:20:25,559 --> 00:20:28,695 line:-2
In App Store Connect,
this is a three-step process.


389
00:20:28,762 --> 00:20:32,299 line:-2
First, we provide the contact info,
demo account


390
00:20:32,366 --> 00:20:34,935 line:-1
and any notes that App Review may need.


391
00:20:35,002 --> 00:20:37,905 line:-2
Then, if necessary,
we can upload attachments.


392
00:20:37,971 --> 00:20:41,408 line:-1
And finally, we click submit for review.


393
00:20:41,475 --> 00:20:45,412 line:-2
In the API, we once again start
with the App Store version.


394
00:20:45,479 --> 00:20:48,849 line:-2
It has a relationship
to App Store Review Details,


395
00:20:48,916 --> 00:20:51,318 line:-2
where you can add information
for App Review.


396
00:20:51,385 --> 00:20:54,888 line:-2
This in turn has
multiple App Review attachments.


397
00:20:54,955 --> 00:20:56,623 line:-1
These work just like app previews,


398
00:20:56,690 --> 00:20:59,426 line:-2
allowing you to upload files
to App Store Connect.


399
00:21:00,060 --> 00:21:02,529 line:-2
To add App Review details
to a new version,


400
00:21:02,596 --> 00:21:06,233 line:-1
just POST to v1/appReviewDetails,


401
00:21:06,300 --> 00:21:10,704 line:-2
provide the necessary information
and associate it with the version.


402
00:21:10,771 --> 00:21:14,107 line:-2
And we're good. App Review details
are now attached to our version.


403
00:21:14,174 --> 00:21:15,943 line:-2
If you've already added
App Review details,


404
00:21:16,009 --> 00:21:18,145 line:-1
you can edit them using a PATCH instead.


405
00:21:18,212 --> 00:21:20,180 line:-2
You can edit this information
as often as you want


406
00:21:20,247 --> 00:21:22,749 line:-2
up to the point
where you actually submit for review.


407
00:21:23,417 --> 00:21:24,551 line:-1
Now let's see how we do that.


408
00:21:24,618 --> 00:21:27,221 line:-2
How do we actually click
that Submit for Review button


409
00:21:27,287 --> 00:21:28,822 line:-1
using the API?


410
00:21:29,323 --> 00:21:31,859 line:-1
Once again, we have another resource.


411
00:21:31,925 --> 00:21:34,595 line:-2
It's called
the App Store Version Submission.


412
00:21:34,661 --> 00:21:38,232 line:-2
To submit a version to the App Store,
we just create one of these.


413
00:21:38,298 --> 00:21:42,569 line:-2
We POST
to v1/appStoreVersionSubmissions,


414
00:21:42,636 --> 00:21:45,806 line:-2
link it to our version
and send the request.


415
00:21:45,873 --> 00:21:48,275 line:-2
And that's it.
Our version is on its way to App Review.


416
00:21:48,342 --> 00:21:49,343 line:-1
If we made a mistake


417
00:21:49,409 --> 00:21:51,778 line:-2
and want to pull this app back
before it gets reviewed,


418
00:21:51,845 --> 00:21:55,048 line:-2
we can just delete this
App Store Version Submission resource.


419
00:21:55,516 --> 00:21:58,685 line:-2
Of course, if our version isn't ready yet,
say we forgot to add screenshots,


420
00:21:58,752 --> 00:22:01,889 line:-2
then creating a submission will fail
with a 400 response


421
00:22:01,955 --> 00:22:03,924 line:-2
and that response
will contain error messages


422
00:22:03,991 --> 00:22:05,726 line:-1
explaining what we need to fix.


423
00:22:05,792 --> 00:22:08,896 line:-2
And remember,
if your version requires in-app purchases


424
00:22:08,962 --> 00:22:10,531 line:-1
or Game Center configurations,


425
00:22:10,597 --> 00:22:13,300 line:-2
you'll need to set those up
in the App Store Connect website


426
00:22:13,367 --> 00:22:15,435 line:-1
before you submit for review.


427
00:22:15,502 --> 00:22:17,604 line:-1
That's the App Metadata API.


428
00:22:17,671 --> 00:22:22,109 line:-2
Hopefully this gives you a sense of
how these API resources all fit together.


429
00:22:22,176 --> 00:22:24,878 line:-2
Using them, we were able
to successfully create a version,


430
00:22:24,945 --> 00:22:27,281 line:-2
provide all the necessary
App Store information


431
00:22:27,347 --> 00:22:28,982 line:-1
and send it in to App Review.


432
00:22:29,049 --> 00:22:30,784 line:-1
If we have auto-release enabled,


433
00:22:30,851 --> 00:22:33,620 line:-2
our app will go to the App Store
as soon as review is complete.


434
00:22:33,687 --> 00:22:36,423 line:-2
You can also release manually
in App Store Connect on the web


435
00:22:36,490 --> 00:22:38,492 line:-1
or on iOS if you prefer.


436
00:22:39,593 --> 00:22:41,895 line:-2
Now let's turn
to the new Power and Performance


437
00:22:41,962 --> 00:22:43,897 line:-1
Metrics and Diagnostics API.


438
00:22:43,964 --> 00:22:46,700 line:-2
This is the Power and Performance view
in Xcode.


439
00:22:46,767 --> 00:22:48,802 line:-2
It helps you monitor
app performance indicators


440
00:22:48,869 --> 00:22:54,241 line:-2
like memory usage, launch time, hang rate,
disk writes and battery consumption


441
00:22:54,308 --> 00:22:57,244 line:-2
using data collected
from real customer sessions.


442
00:22:57,311 --> 00:23:00,113 line:-2
You can access this same information
using the API.


443
00:23:00,180 --> 00:23:03,283 line:-2
I'm going to give you a high level view
of how to access this data


444
00:23:03,350 --> 00:23:06,019 line:-2
and how it fits into
the larger API resource model.


445
00:23:06,086 --> 00:23:08,622 line:-2
But we actually have a whole session
devoted to this feature


446
00:23:08,689 --> 00:23:11,058 line:-2
where you'll learn more
about this new API,


447
00:23:11,124 --> 00:23:13,060 line:-2
including how to interpret
the response data


448
00:23:13,126 --> 00:23:15,329 line:-2
and find insights
into your app's behavior.


449
00:23:15,395 --> 00:23:16,563 line:-1
So be sure to check out


450
00:23:16,630 --> 00:23:18,999 line:-2
the "Power and Performance
App Store Connect API"


451
00:23:19,066 --> 00:23:20,701 line:-1
session video as well.


452
00:23:21,368 --> 00:23:25,038 line:-2
You can get performance metrics
for recent versions of your app


453
00:23:25,105 --> 00:23:30,511 line:-2
by requesting the perfPowerMetrics
relationship off the app URL.


454
00:23:30,577 --> 00:23:33,080 line:-1
The metrics data uses a custom media type,


455
00:23:33,146 --> 00:23:36,383 line:-2
so you need
an appropriate Accept header as well.


456
00:23:36,450 --> 00:23:39,052 line:-2
That will get you metrics
for recent versions of your app,


457
00:23:39,119 --> 00:23:42,022 line:-2
but you can also fetch metrics
for a particular build


458
00:23:42,089 --> 00:23:46,460 line:-2
using the perfPowerMetrics relationship
off the build URL instead.


459
00:23:46,527 --> 00:23:48,662 line:-1
Either way, once we send this request,


460
00:23:48,729 --> 00:23:53,534 line:-2
we get back a successful response
with a structured set of metrics data.


461
00:23:53,600 --> 00:23:57,070 line:-2
In this, I can see that the first set
of metrics are HANG metrics


462
00:23:57,137 --> 00:24:01,475 line:-2
and the first data set is the hang rate
expressed in seconds per hour.


463
00:24:02,009 --> 00:24:04,711 line:-2
Check out that other session
to see the rest of this response


464
00:24:04,778 --> 00:24:06,480 line:-1
and learn how to interpret this data.


465
00:24:06,547 --> 00:24:09,516 line:-2
But there are two more endpoints
I want to show you.


466
00:24:09,583 --> 00:24:13,487 line:-2
For Disk Writes in particular,
once you've identified a problem spot,


467
00:24:13,554 --> 00:24:16,423 line:-2
you can view diagnostic information,
including call stacks,


468
00:24:16,490 --> 00:24:19,493 line:-2
to help pinpoint the source
of potential problems.


469
00:24:19,560 --> 00:24:23,130 line:-2
In Xcode, we show you a list
of diagnostic signatures.


470
00:24:23,197 --> 00:24:26,333 line:-2
These are just places in your app
where you do disk writes.


471
00:24:26,400 --> 00:24:30,437 line:-2
These signatures are sorted by percentage
contribution to total disk writes,


472
00:24:30,504 --> 00:24:33,440 line:-2
so the biggest contributors
are up at the top.


473
00:24:33,507 --> 00:24:37,244 line:-2
And for each diagnostic signature,
you can view the actual call stack


474
00:24:37,311 --> 00:24:39,646 line:-1
and additional diagnostic details.


475
00:24:39,713 --> 00:24:42,950 line:-2
You can get this same information
using the API.


476
00:24:43,016 --> 00:24:45,652 line:-1
Once again, we start with the build URL


477
00:24:45,719 --> 00:24:49,356 line:-2
and we fetch its new
diagnosticSignatures relationship.


478
00:24:49,423 --> 00:24:50,524 line:-1
Let's get it.


479
00:24:50,591 --> 00:24:54,127 line:-2
And the API responds
with a list of diagnostic signatures.


480
00:24:54,194 --> 00:24:56,897 line:-2
These are standard App Store Connect
API resources.


481
00:24:56,964 --> 00:24:58,532 line:-1
They have a signature attribute.


482
00:24:58,599 --> 00:25:01,935 line:-2
This identifies where in your run time
the disk write takes place


483
00:25:02,002 --> 00:25:06,740 line:-2
and a weight which tells you how much this
signature contributes to total writes.


484
00:25:06,807 --> 00:25:10,277 line:-2
Each signature also has
a relationship to its log data.


485
00:25:10,344 --> 00:25:14,548 line:-2
If we take this link and once again use
that custom media type,


486
00:25:14,615 --> 00:25:16,783 line:-1
we get back diagnostic data.


487
00:25:16,850 --> 00:25:19,286 line:-2
In addition to app information
and total disk writes,


488
00:25:19,353 --> 00:25:22,456 line:-2
you'll find detailed call stack
information in this response.


489
00:25:22,990 --> 00:25:24,525 line:-1
And that's the App Metadata


490
00:25:24,591 --> 00:25:28,262 line:-2
and Power and Performance
Metrics and Diagnostic APIs.


491
00:25:28,328 --> 00:25:32,032 line:-2
Together these represent a big update
to the App Store Connect API.


492
00:25:32,099 --> 00:25:35,736 line:-2
We look forward to seeing
how you take advantage of them. Thank you.

