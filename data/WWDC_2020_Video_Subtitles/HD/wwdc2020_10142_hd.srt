1
00:00:03.836 --> 00:00:06.906
Hello, and welcome to WWDC.


2
00:00:07.240 --> 00:00:09.676
Hi, I’m Eric and along with
my colleague Pınar,


3
00:00:09.709 --> 00:00:12.512
we manage the Retail Store Apps
Mobile Engineering team,


4
00:00:12.612 --> 00:00:14.781
and we're here to discuss
building enterprise applications


5
00:00:14.848 --> 00:00:17.617
that are robust, flexible
and maintainable.


6
00:00:17.684 --> 00:00:20.086
At Apple, we have over 500 stores


7
00:00:20.153 --> 00:00:23.156
where we work to constantly redefine
the retail experience.


8
00:00:23.890 --> 00:00:27.594
Our amazing retail employees are
the heart of our retail operations


9
00:00:27.627 --> 00:00:29.529
and we build the apps that support them...


10
00:00:29.596 --> 00:00:32.432
from our system
that manages store reservations


11
00:00:32.465 --> 00:00:35.635
to our product catalog
and managing store layout.


12
00:00:35.702 --> 00:00:38.071
They all work together
to build a fluid system


13
00:00:38.104 --> 00:00:40.540
that makes our stores run smoothly.


14
00:00:40.640 --> 00:00:43.510
Now you know a bit about
why we do what we do.


15
00:00:43.543 --> 00:00:45.712
The rest of this session
covers how we do it,


16
00:00:45.812 --> 00:00:48.181
and how you can take advantage
of the same practices


17
00:00:48.248 --> 00:00:50.116
in your own enterprise apps.


18
00:00:50.817 --> 00:00:54.287
Our agenda includes
architecting for sharing across apps,


19
00:00:54.354 --> 00:00:56.923
which covers some of the basic principles
you should consider


20
00:00:56.990 --> 00:01:00.560
when either building new apps
or rearchitecting existing apps.


21
00:01:01.194 --> 00:01:03.830
We'll also cover testing your apps
after they've been built.


22
00:01:04.664 --> 00:01:08.268
And finally, Pınar will discuss
some aspects of managing your app


23
00:01:08.301 --> 00:01:09.936
once it's been pushed to production.


24
00:01:10.537 --> 00:01:11.905
When building your apps,


25
00:01:11.938 --> 00:01:16.042
there are many features of iOS that
make multiple apps work together nicely.


26
00:01:16.643 --> 00:01:17.744
I’ll go over a few of them.


27
00:01:18.178 --> 00:01:21.214
Enabling app groups,
benefits of Swift packages


28
00:01:21.281 --> 00:01:23.049
and finding good package candidates.


29
00:01:23.783 --> 00:01:27.053
App groups are one of the first
iOS features that we took advantage of


30
00:01:27.120 --> 00:01:28.922
when developing our suite of apps.


31
00:01:29.322 --> 00:01:32.392
Once enabled, it gave us the ability
to share multiple types of data


32
00:01:32.425 --> 00:01:34.394
via UserDefaults and shared files.


33
00:01:35.061 --> 00:01:37.964
All of the setup can be done
via the Signing and Capabilities section


34
00:01:38.031 --> 00:01:39.866
in your project file within Xcode.


35
00:01:39.933 --> 00:01:41.234
Let’s see how it works.


36
00:01:41.668 --> 00:01:46.039
First, click on the + Capability button
and then select App Groups.


37
00:01:46.873 --> 00:01:48.508
This will add a new App Group panel.


38
00:01:48.875 --> 00:01:51.845
Selecting the plus button in that panel
will add a new App Group


39
00:01:51.878 --> 00:01:53.847
and add it to your developer portal
as well,


40
00:01:53.880 --> 00:01:56.449
so other apps in the same portal
have access to it.


41
00:01:57.083 --> 00:02:00.587
Once you have your app group set up
in Xcode, sharing data is easy.


42
00:02:00.620 --> 00:02:03.790
This example shows how
to share data using UserDefaults.


43
00:02:03.857 --> 00:02:06.626
First, we’ve created
an instance of UserDefaults,


44
00:02:06.693 --> 00:02:08.794
passing it to our app group
to initialize it.


45
00:02:09.429 --> 00:02:15.101
After this initial setup, setting values
is as easy as calling the set method.


46
00:02:15.168 --> 00:02:19.906
Reading values is also just as easy
using one of the named type methods,


47
00:02:19.973 --> 00:02:22.642
such as string, integer,
Boolean, et cetera.


48
00:02:23.009 --> 00:02:24.978
Next, let’s talk about Swift packages.


49
00:02:25.378 --> 00:02:27.180
There are many reasons
we used Swift packages


50
00:02:27.280 --> 00:02:31.017
when looking at our existing apps,
as well as when we build new ones.


51
00:02:31.084 --> 00:02:33.920
The most obvious is that
it reduces code duplication.


52
00:02:33.987 --> 00:02:37.190
This decreases our development time
and the risk of human error,


53
00:02:37.290 --> 00:02:39.359
thus increasing the reliability
of our apps.


54
00:02:40.126 --> 00:02:42.829
It also provides more flexibility
in our organization,


55
00:02:42.929 --> 00:02:46.900
allowing people to move from team to team
easier with less onboarding overhead


56
00:02:46.933 --> 00:02:49.302
since much of the codebase
will already be known.


57
00:02:49.836 --> 00:02:53.473
We’ve also built a team that solely works
on developing these packages,


58
00:02:53.573 --> 00:02:57.210
allowing them to focus more in-depth
on the problems the packages are solving.


59
00:02:57.577 --> 00:02:59.212
After building our iOS apps,


60
00:02:59.312 --> 00:03:02.482
our team identified many areas
that were great candidates.


61
00:03:02.549 --> 00:03:03.583
Just like many of you,


62
00:03:03.650 --> 00:03:07.020
Apple uses standard authentication methods
across our applications.


63
00:03:07.487 --> 00:03:10.857
Because of this,
authentication was a perfect choice.


64
00:03:10.957 --> 00:03:13.059
We’ve built ours on top of URLSession,


65
00:03:13.159 --> 00:03:16.963
and in doing so, it removes the burden
of thinking about auth from the engineer,


66
00:03:17.063 --> 00:03:20.700
allowing them to interact with the server
as if the authentication doesn’t exist.


67
00:03:21.334 --> 00:03:24.971
Another network-related package
is for image caching and fetching.


68
00:03:25.038 --> 00:03:28.575
This allows us to queue images
and cache them to disk as necessary,


69
00:03:28.608 --> 00:03:30.577
again, freeing our engineers
from worrying about


70
00:03:30.610 --> 00:03:33.246
the network connection
or where the image is coming from.


71
00:03:33.713 --> 00:03:36.516
Everything we build is based on UIKit.


72
00:03:36.583 --> 00:03:39.819
We use custom table view cells
and product detail views,


73
00:03:39.886 --> 00:03:41.988
which we package to ensure consistency


74
00:03:42.088 --> 00:03:44.791
where the same UI is used
across multiple apps.


75
00:03:45.692 --> 00:03:47.994
Many of our applications
have similar objects,


76
00:03:48.061 --> 00:03:50.363
such as customers,
reservations and products.


77
00:03:50.897 --> 00:03:54.901
These model objects are prime candidates
for extracting into a Swift package


78
00:03:55.001 --> 00:03:56.869
and sharing across each of our apps,


79
00:03:56.903 --> 00:03:59.539
allowing for standardized definitions
of our model.


80
00:03:59.639 --> 00:04:03.076
The final package I want to talk to you
today about is our scanning package.


81
00:04:03.109 --> 00:04:05.912
We built it on top of
Vision and AVFoundation.


82
00:04:05.979 --> 00:04:10.350
This gives a common look and feel
for our bar code, QR and text recognition


83
00:04:10.383 --> 00:04:12.118
across each of our apps.


84
00:04:12.218 --> 00:04:13.920
Let me show you what that looks like.


85
00:04:14.654 --> 00:04:18.757
Using the Vision framework, our package
is capable of scanning many symbologies,


86
00:04:18.825 --> 00:04:22.862
such as PDF417, DataMatrix and QR codes.


87
00:04:22.929 --> 00:04:27.667
In addition, it also allows us to do
real-time OCR to capture text-based data.


88
00:04:27.767 --> 00:04:29.168
On top of the Vision framework,


89
00:04:29.235 --> 00:04:32.305
we've built a layer that can show
a supplementary UI view


90
00:04:32.372 --> 00:04:36.009
to help the user target the camera,
customize accessibility support,


91
00:04:36.042 --> 00:04:37.043
control the flash,


92
00:04:37.143 --> 00:04:40.113
and simplify configuration
into a clean, common API.


93
00:04:40.580 --> 00:04:42.649
Let’s look at what
a couple of those look like.


94
00:04:42.682 --> 00:04:47.120
Our code uses the same patterns
whether you’re scanning a barcode or text.


95
00:04:47.186 --> 00:04:48.221
The setup is simple.


96
00:04:48.288 --> 00:04:50.223
Initialize the appropriate
view controller,


97
00:04:50.290 --> 00:04:52.925
passing in a struct containing
configuration options


98
00:04:52.959 --> 00:04:54.327
and assign a delegate.


99
00:04:54.427 --> 00:04:56.195
It’s that simple for the engineer.


100
00:04:56.262 --> 00:04:58.898
The delegate handles the messaging
for successes and failures


101
00:04:58.965 --> 00:05:00.166
of the scanning process.


102
00:05:00.600 --> 00:05:02.235
I’ll show you a bit more how that works.


103
00:05:03.703 --> 00:05:06.172
Here, we create an instance
of scan options,


104
00:05:06.239 --> 00:05:09.442
which is a struct that holds
the configuration in our scanning package.


105
00:05:09.842 --> 00:05:12.211
We then initialize
a new barcodeScannerViewController


106
00:05:12.278 --> 00:05:14.080
with that same configuration.


107
00:05:14.580 --> 00:05:16.215
This configuration/initializer pattern


108
00:05:16.282 --> 00:05:19.952
allows us to easily save and reuse them
across each of our apps.


109
00:05:20.520 --> 00:05:23.623
Our next example is very similar
to the first.


110
00:05:23.690 --> 00:05:25.558
Rather than scanning a barcode,


111
00:05:25.625 --> 00:05:29.862
this controller allows us to scan
and recognize text within the view area.


112
00:05:29.929 --> 00:05:32.098
We’ve kept the same
configuration/initializer pattern


113
00:05:32.198 --> 00:05:33.499
as the barcode example,


114
00:05:33.566 --> 00:05:36.369
making it quick and easy
to use either package.


115
00:05:37.170 --> 00:05:40.006
With both of these,
our API provides a default UI


116
00:05:40.106 --> 00:05:44.343
that can be replaced or fully customized
to the needs of each application.


117
00:05:44.377 --> 00:05:48.348
This makes it easy to keep the UI
in all of our apps consistent.


118
00:05:48.381 --> 00:05:50.817
We talked about app groups
and Swift packages.


119
00:05:50.883 --> 00:05:52.385
Now let’s talk about testing.


120
00:05:52.885 --> 00:05:55.455
After our apps were built,
we, of course, needed to test them


121
00:05:55.521 --> 00:05:58.124
to make sure that they did
what we expected them to.


122
00:05:58.224 --> 00:05:59.959
We could have an army of people do this,


123
00:06:00.026 --> 00:06:02.128
but there are more efficient ways
to go about it.


124
00:06:02.195 --> 00:06:04.397
Let's go over a few of
the most common cases.


125
00:06:04.931 --> 00:06:08.468
Three of those are unit testing,
UI testing and performance testing.


126
00:06:09.869 --> 00:06:12.505
Unit testing is the first step
in our testing strategy


127
00:06:12.572 --> 00:06:14.574
and begins with the engineering team.


128
00:06:15.208 --> 00:06:17.744
As they write the classes and functions
that power the apps,


129
00:06:17.777 --> 00:06:19.312
it's important to create unit tests


130
00:06:19.379 --> 00:06:23.316
to make sure that they return the values
that are expected for each code path.


131
00:06:24.117 --> 00:06:28.654
Xcode provides fantastic support
for unit tests with the XCTest framework,


132
00:06:28.688 --> 00:06:31.391
which enables you to quickly write
and run your tests.


133
00:06:32.191 --> 00:06:34.927
For more in-depth information,
there are many sessions available.


134
00:06:34.994 --> 00:06:37.330
I would recommend starting with
"Testing in Xcode"


135
00:06:37.396 --> 00:06:38.965
and "Testing Tips and Tricks."


136
00:06:40.867 --> 00:06:42.869
We use UI testing as much as possible,


137
00:06:42.935 --> 00:06:45.571
as this is where you see
real efficiency gains.


138
00:06:46.272 --> 00:06:49.709
UI testing takes the manual test cases
your QE team has created


139
00:06:49.776 --> 00:06:51.144
and encodes them in Swift.


140
00:06:51.711 --> 00:06:56.849
Xcode comes with XCUITest that provides
a structure for building and running them.


141
00:06:58.151 --> 00:07:01.354
Once we created these tests,
we broke them down by importance.


142
00:07:01.888 --> 00:07:04.857
Tests can take time to run,
so breaking them down by priority


143
00:07:04.924 --> 00:07:08.361
allows us to run the most important tests
more frequently than others.


144
00:07:08.427 --> 00:07:11.531
The more frequent they're run,
the quicker we can catch any failures.


145
00:07:11.898 --> 00:07:14.801
We do this on a check-in, daily
and weekly basis.


146
00:07:15.201 --> 00:07:20.606
The WWDC session "UI Testing in Xcode 7"
is a great place to start for more info.


147
00:07:21.674 --> 00:07:24.110
When we look at performance testing
on iOS devices,


148
00:07:24.210 --> 00:07:26.345
what we’re really looking at
is two things:


149
00:07:26.412 --> 00:07:28.748
rendering performance
and battery performance.


150
00:07:29.916 --> 00:07:33.619
The CPU and GPU in modern iOS devices
are very powerful,


151
00:07:33.686 --> 00:07:35.321
but we still need to focus on
the performance


152
00:07:35.388 --> 00:07:37.590
of every interaction in our app.


153
00:07:38.057 --> 00:07:39.759
There’s nothing more frustrating
for a user


154
00:07:39.859 --> 00:07:41.828
than a view that doesn’t scroll smoothly


155
00:07:41.894 --> 00:07:44.697
or a drag operation
that takes a split second too long.


156
00:07:45.431 --> 00:07:48.334
Battery performance is also
very important for us.


157
00:07:48.768 --> 00:07:51.537
Our devices are on the store floor
all day long.


158
00:07:51.604 --> 00:07:53.573
When an employee has
to step out of the front of house


159
00:07:53.639 --> 00:07:55.641
to take their device
to a charging station,


160
00:07:55.708 --> 00:07:57.043
that’s lost productivity,


161
00:07:57.109 --> 00:08:00.246
not to mention the extra devices
that we have to have on hand.


162
00:08:00.646 --> 00:08:03.015
Engineers have an excellent tool
at their disposal


163
00:08:03.082 --> 00:08:06.886
that makes accomplishing these tasks easy
and straightforward: Instruments.


164
00:08:07.353 --> 00:08:09.989
Instruments is a tool
also built in to Xcode


165
00:08:10.056 --> 00:08:12.258
that has helped us analyze
areas of our apps


166
00:08:12.325 --> 00:08:14.393
that are taking a long time to execute,


167
00:08:14.460 --> 00:08:18.397
have higher than expected memory
or battery usage and much more.


168
00:08:19.131 --> 00:08:20.566
For more information on Instruments,


169
00:08:20.633 --> 00:08:24.103
please check out the sessions "Practical
Approaches to Great App Performance"


170
00:08:24.170 --> 00:08:26.405
and "Improving Battery Life
and Performance."


171
00:08:26.873 --> 00:08:28.174
Now, I’ll hand this off to Pınar


172
00:08:28.241 --> 00:08:31.544
to dive into managing apps
once they’re deployed to production.


173
00:08:31.911 --> 00:08:32.912
Thank you, Eric.


174
00:08:32.979 --> 00:08:36.549
With all the wonderful info
Eric just shared with you all,


175
00:08:36.616 --> 00:08:41.220
you might be wondering how we manage our
apps in production with configurations.


176
00:08:41.287 --> 00:08:45.691
First, I will discuss why we develop
with app configurations in mind.


177
00:08:45.758 --> 00:08:49.428
Then I will discuss points
on backwards compatibility


178
00:08:49.495 --> 00:08:52.098
and requiring users to force update.


179
00:08:52.665 --> 00:08:54.267
There are two configurations


180
00:08:54.333 --> 00:08:57.737
our applications
currently support simultaneously:


181
00:08:58.137 --> 00:09:01.774
Client based configuration file
and a Server based one,


182
00:09:01.841 --> 00:09:05.978
which is essentially Boolean values
downloaded from our server.


183
00:09:06.045 --> 00:09:09.181
Let’s talk about client based
configuration first.


184
00:09:10.383 --> 00:09:12.485
Having a configuration file


185
00:09:12.552 --> 00:09:15.688
that is baked in our client
but hosted on the server,


186
00:09:15.755 --> 00:09:19.425
allows us to have more flexibility
and adaptability


187
00:09:19.492 --> 00:09:22.595
around the user experience
in our application.


188
00:09:23.095 --> 00:09:28.200
These elements can then be manipulated
at the geo, market,


189
00:09:28.267 --> 00:09:31.470
and, in our case,
at the Apple retail store level.


190
00:09:31.971 --> 00:09:37.376
Changing these attributes in production
does not depend on any code changes.


191
00:09:38.144 --> 00:09:41.347
Therefore, no new client builds
would be necessary.


192
00:09:42.114 --> 00:09:45.051
This makes the application
highly adaptable


193
00:09:45.117 --> 00:09:47.386
to our ever-changing business needs.


194
00:09:48.521 --> 00:09:52.191
Our applications also have
server configurations in place


195
00:09:52.258 --> 00:09:54.460
which can also drive the app behavior.


196
00:09:54.527 --> 00:09:58.531
We rely on data from our server
to show certain elements.


197
00:10:00.099 --> 00:10:04.337
This provides a great flexibility
where some features may not be used


198
00:10:04.403 --> 00:10:09.475
for certain geos, markets and,
in our case, certain Apple retail stores.


199
00:10:10.610 --> 00:10:16.082
Our server can simply turn on or off
features based on the global market level.


200
00:10:17.183 --> 00:10:20.252
Just like having a robust client config,


201
00:10:20.319 --> 00:10:24.156
changing values on the server
does not require any code change.


202
00:10:24.223 --> 00:10:26.792
Once config values are deployed
on the server,


203
00:10:26.859 --> 00:10:31.030
changes will automatically be reflected
in our application’s behavior.


204
00:10:32.631 --> 00:10:37.036
Server configurations can also be exposed
to business and operations teams,


205
00:10:37.103 --> 00:10:40.373
where they can take sole control
of the values being set.


206
00:10:40.706 --> 00:10:45.277
They can then turn on or off features
according to the business needs.


207
00:10:46.345 --> 00:10:50.883
This partnership frees up developers' time
to maintain these configs


208
00:10:50.950 --> 00:10:54.086
and allows them to focus on
the engineering instead.


209
00:10:55.354 --> 00:10:57.390
Here’s a high-level illustration


210
00:10:57.456 --> 00:11:01.093
of how these configurations
might work for your application.


211
00:11:01.460 --> 00:11:04.864
With client configuration,
you can create a PLIST file


212
00:11:04.930 --> 00:11:07.500
with all the attributes
you want to include.


213
00:11:08.134 --> 00:11:12.405
Your server can then host this file
in a JSON format.


214
00:11:12.972 --> 00:11:14.840
During your startup sequence,


215
00:11:14.907 --> 00:11:18.811
your application can download
all the attributes that are set.


216
00:11:19.278 --> 00:11:22.915
If, for any reason, during production


217
00:11:22.982 --> 00:11:25.618
you want to change a value
for an attribute,


218
00:11:25.684 --> 00:11:28.020
you can just change it in the PLIST file


219
00:11:28.087 --> 00:11:31.490
and upload a new version
of the config to the server.


220
00:11:32.158 --> 00:11:36.362
When your application launches again,
the new changes will take place.


221
00:11:36.429 --> 00:11:40.966
I will show you how that can be done
in just few minutes with an example.


222
00:11:41.033 --> 00:11:43.335
With server based configurations,


223
00:11:43.402 --> 00:11:48.808
your business or operations teams can
take full control of setting the values.


224
00:11:49.341 --> 00:11:53.446
This way they can turn on or off features
at a global level


225
00:11:53.512 --> 00:11:57.149
and change values to adapt
to business and market needs.


226
00:11:58.017 --> 00:12:01.987
Your iOS application can then
fetch a service API


227
00:12:02.054 --> 00:12:03.889
where these attributes are set,


228
00:12:03.956 --> 00:12:08.294
and these flags will ultimately drive
your application’s behavior.


229
00:12:10.329 --> 00:12:13.966
Let’s dive in to a client-based
configuration as an example.


230
00:12:14.366 --> 00:12:18.671
Here we have all the fields
we want to define for a customer form.


231
00:12:18.738 --> 00:12:22.741
We have First Name, Last Name,
Email, and Phone Number,


232
00:12:22.808 --> 00:12:26.378
and maybe other info that
we'd like to collect from our customers.


233
00:12:27.847 --> 00:12:31.617
These attributes are carefully mapped
in our client code


234
00:12:31.684 --> 00:12:35.855
and remain as generic as possible
in our function definitions.


235
00:12:35.921 --> 00:12:39.258
That way, we can manipulate them
in our PLIST files.


236
00:12:39.825 --> 00:12:43.662
Here's what the form looks like
in our application’s UI in production.


237
00:12:43.729 --> 00:12:46.966
Now, let’s say our stakeholders
do not need to collect


238
00:12:47.032 --> 00:12:49.401
customers’ email addresses any longer


239
00:12:49.468 --> 00:12:52.571
and want to remove that field
from the UI right away.


240
00:12:54.039 --> 00:12:58.377
We can simply delete the Email field
in our configuration PLIST file


241
00:12:58.444 --> 00:13:02.214
and upload a new version
of the config to our server.


242
00:13:02.281 --> 00:13:07.119
When the application is launched again,
the email field is no longer seen.


243
00:13:07.186 --> 00:13:10.489
No code changes, no new client builds,


244
00:13:10.556 --> 00:13:11.857
it just works.


245
00:13:13.159 --> 00:13:15.694
Now let’s say our stakeholders
do not need to collect


246
00:13:15.761 --> 00:13:20.199
customers’ phone numbers either
and needs this change done right now.


247
00:13:20.733 --> 00:13:22.701
We can repeat the same process


248
00:13:22.768 --> 00:13:25.771
and upload the new version
of the config to our server.


249
00:13:26.906 --> 00:13:31.944
And again, when we pull the new config,
Phone Number field is no longer shown.


250
00:13:32.011 --> 00:13:35.748
As you can see,
having a config-driven user experience


251
00:13:35.815 --> 00:13:38.684
allows us to manage
our application in production


252
00:13:38.751 --> 00:13:41.854
with greater flexibility and adaptability.


253
00:13:42.788 --> 00:13:48.360
With server and client hand in hand
and work in such close orchestration,


254
00:13:48.427 --> 00:13:52.665
backwards compatibility is something
we always have to keep in mind


255
00:13:52.731 --> 00:13:54.567
as new changes in the server


256
00:13:54.633 --> 00:13:58.204
may not be supported in our old client
and vice versa.


257
00:13:58.270 --> 00:14:01.473
In our experience,
having config versioning in place


258
00:14:01.540 --> 00:14:04.743
has helped us a great deal
in navigating these waters.


259
00:14:05.177 --> 00:14:09.215
Our application checks which version
of the server and client configuration


260
00:14:09.281 --> 00:14:11.450
that is being downloaded at startup.


261
00:14:11.517 --> 00:14:15.788
We can then determine which
user experience to show, or not show,


262
00:14:15.855 --> 00:14:17.089
to our users.


263
00:14:17.990 --> 00:14:19.658
There are, of course, cases


264
00:14:19.725 --> 00:14:23.562
where we do need our users
to force update to the version of the app,


265
00:14:23.629 --> 00:14:27.633
otherwise they will not be able
to see the new features we developed.


266
00:14:28.367 --> 00:14:31.136
When a new value for an attribute
is added in the client


267
00:14:31.203 --> 00:14:33.772
but server does not have mapping for it,


268
00:14:33.839 --> 00:14:36.976
neither server nor client
can support each other.


269
00:14:37.042 --> 00:14:41.380
In such cases, requiring users
to force update is necessary.


270
00:14:41.814 --> 00:14:46.252
And to wrap up, we covered app groups,
shared frameworks and testing,


271
00:14:46.318 --> 00:14:50.089
we went over utilizing config-driven
user experience,


272
00:14:50.155 --> 00:14:53.626
and, finally, discussed points
in why backwards compatibility


273
00:14:53.692 --> 00:14:57.329
and requiring users
to force updates are necessary.


274
00:14:57.396 --> 00:14:58.731
Thank you for watching.


275
00:14:58.797 --> 00:15:02.568
We look forward to seeing
the apps you develop with iOS 14.


276
00:15:02.635 --> 00:15:05.638
Hope you have an enjoyable WWDC this year.


277
00:15:05.704 --> 00:15:07.239
Stay safe and healthy out there.

