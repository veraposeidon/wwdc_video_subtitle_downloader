1
00:00:03,836 --> 00:00:07,007 line:-1
Hello and welcome to WWDC.


2
00:00:10,943 --> 00:00:14,515 line:0
Hi. I'm Michael Harris,
and I'm a GPU software engineer at Apple.


3
00:00:14,581 --> 00:00:17,084 line:0
Today I'd like to talk about
the improvements we've made


4
00:00:17,150 --> 00:00:18,619 line:0
to Metal's debugging tools,


5
00:00:18,685 --> 00:00:21,855 line:0
specifically for errors
in GPU-side Metal shader code.


6
00:00:22,823 --> 00:00:25,993 line:-2
So what are a few examples of errors
that we can make in Metal shader code?


7
00:00:27,094 --> 00:00:30,364 line:-2
You could have an out of bounds access
in global or shared memory.


8
00:00:31,765 --> 00:00:34,268 line:-2
You could attempt to access
a null texture resource.


9
00:00:35,802 --> 00:00:39,039 line:-2
Or you might have forgotten to call
useResource when using argument buffers,


10
00:00:39,106 --> 00:00:41,108 line:-1
resulting in invalid resource residency.


11
00:00:43,210 --> 00:00:47,347 line:-2
You may have a timeout, which can be
caused by long-running or infinite loops.


12
00:00:47,948 --> 00:00:49,416 line:-1
This isn't an exhaustive list,


13
00:00:49,483 --> 00:00:52,452 line:-2
but it's some of the more common errors
we Metal developers experience.


14
00:00:53,220 --> 00:00:55,489 line:-1
These errors can often cause one another.


15
00:00:55,556 --> 00:00:57,324 line:-1
An infinite loop may be caused


16
00:00:57,391 --> 00:00:59,960 line:-2
by an out of bounds access
of the loop iteration count.


17
00:01:01,328 --> 00:01:03,997 line:-2
The result of a GPU-side error
is a message like this one.


18
00:01:05,599 --> 00:01:09,503 line:-2
In comparison, here's what we get
from an API usage error on the CPU.


19
00:01:12,239 --> 00:01:14,208 line:-2
Let's compare and contrast
these two errors


20
00:01:14,274 --> 00:01:16,710 line:-2
because there's a pretty large gap
in useful information.


21
00:01:17,778 --> 00:01:21,782 line:-2
For a GPU error, all we get is a message
that says something went wrong,


22
00:01:21,849 --> 00:01:23,483 line:-1
but not much about what or where.


23
00:01:25,619 --> 00:01:27,254 line:-1
But when there's an API usage error,


24
00:01:27,321 --> 00:01:29,389 line:-2
Metal provides
a lot of useful information.


25
00:01:30,224 --> 00:01:33,327 line:-2
It shows the API entry point
the error occurred on.


26
00:01:33,393 --> 00:01:34,962 line:-1
It shows what type of error it was.


27
00:01:35,028 --> 00:01:37,931 line:-2
In this case, we set an offset
larger than the buffer's length.


28
00:01:39,600 --> 00:01:42,369 line:-2
There's also a call stack
of exactly where the error occurred,


29
00:01:42,436 --> 00:01:45,205 line:-2
including line and file information
from your codebase.


30
00:01:46,139 --> 00:01:49,843 line:-2
Wouldn't it be nice if the GPU errors
looked a bit more like the API errors?


31
00:01:50,377 --> 00:01:52,212 line:-1
Today, we'll show you some new tools


32
00:01:52,279 --> 00:01:55,249 line:-2
to help improve the debugging experience
of GPU errors.


33
00:01:56,450 --> 00:01:58,485 line:-2
To help illustrate
where our new tools fit in,


34
00:01:58,552 --> 00:02:02,789 line:-2
we'll use a debugging workflow of detect,
locate, classify and fix.


35
00:02:04,958 --> 00:02:08,529 line:-2
Metal has always had API validation
to help you catch issues early.


36
00:02:08,595 --> 00:02:10,264 line:-2
Finding them early means
that they're caught


37
00:02:10,330 --> 00:02:12,566 line:-2
before they can cause problems
further down the line.


38
00:02:14,001 --> 00:02:16,436 line:-2
Using it,
you can detect when there's API misuse,


39
00:02:16,503 --> 00:02:20,240 line:-2
locate the function causing the issue,
and classify the error message.


40
00:02:20,307 --> 00:02:22,342 line:-1
We'll leave fixing the error up to you.


41
00:02:24,144 --> 00:02:27,214 line:-2
But what about errors in your Metal
shading language usage on the GPU?


42
00:02:28,148 --> 00:02:32,019 line:-2
You've seen how these errors appeared
on iOS 13 and macOS Catalina.


43
00:02:32,085 --> 00:02:34,154 line:-1
Metal provides a basic error message.


44
00:02:34,221 --> 00:02:37,624 line:-2
It's enough to tell you something happened
in the execution of that command buffer,


45
00:02:37,691 --> 00:02:38,792 line:-1
but not much else.


46
00:02:40,394 --> 00:02:43,397 line:-2
So today, Metal is introducing
two new diagnostic tools


47
00:02:43,463 --> 00:02:45,465 line:-1
that will help improve the debug workflow:


48
00:02:45,532 --> 00:02:48,468 line:-2
enhanced command buffer errors
and the shader validation layer.


49
00:02:49,636 --> 00:02:52,239 line:-2
First, let's talk about
enhanced command buffer errors.


50
00:02:54,408 --> 00:02:57,010 line:-2
What is it? Well, it enhances
your command buffer's errors.


51
00:02:57,444 --> 00:02:58,512 line:-1
To be more specific,


52
00:02:58,579 --> 00:03:00,914 line:-2
it improves the existing
command buffer error mechanism


53
00:03:00,981 --> 00:03:05,085 line:-2
by helping you detect and locate
execution errors at the encoder level.


54
00:03:07,387 --> 00:03:08,856 line:-1
Here's that GPU error again.


55
00:03:09,389 --> 00:03:11,692 line:-2
There isn't a lot
of actionable information here.


56
00:03:11,758 --> 00:03:14,995 line:-2
When you're debugging a command buffer
that might have hundreds of encoders,


57
00:03:15,062 --> 00:03:16,763 line:-1
making progress is a lot of work.


58
00:03:18,265 --> 00:03:19,299 line:-1
Here's that same error,


59
00:03:19,366 --> 00:03:22,269 line:-2
but this time we've turned on
enhanced command buffer errors.


60
00:03:22,336 --> 00:03:24,905 line:-2
It's an obvious improvement
over what we had before.


61
00:03:24,972 --> 00:03:27,941 line:-2
You have information about each encoder
within this command buffer,


62
00:03:28,008 --> 00:03:29,977 line:-2
and that helps you
narrow down the failure.


63
00:03:31,912 --> 00:03:33,981 line:-1
Most of our encoders completed their work.


64
00:03:35,282 --> 00:03:36,984 line:-1
But there are a few suspect encoders


65
00:03:37,050 --> 00:03:39,052 line:-2
that have been marked
as affected or faulted.


66
00:03:39,620 --> 00:03:41,788 line:-2
That narrows
our search down significantly.


67
00:03:43,390 --> 00:03:45,826 line:-2
Enabling enhanced command buffer errors
is simple.


68
00:03:45,893 --> 00:03:48,095 line:-2
All you have to do
is create your command buffer


69
00:03:48,161 --> 00:03:50,697 line:-1
with the new descriptor-based API


70
00:03:50,764 --> 00:03:53,901 line:-2
and set the errorOptions
to encoderExecutionStatus.


71
00:03:53,967 --> 00:03:54,968 line:-1
That's it.


72
00:03:56,470 --> 00:03:58,772 line:-2
If an error occurs
while the feature is enabled,


73
00:03:58,839 --> 00:04:01,808 line:-2
you can get encoder-level information
about that error.


74
00:04:03,477 --> 00:04:07,147 line:-2
Here in our code example,
we're using the encoder info error key


75
00:04:07,214 --> 00:04:09,917 line:-2
to access the user info data
of this error.


76
00:04:10,484 --> 00:04:14,788 line:-2
This is where we'll find the array of
our encoder info objects to iterate over.


77
00:04:17,658 --> 00:04:18,992 line:-1
As you can see here,


78
00:04:19,059 --> 00:04:22,629 line:-2
each encoder info object
has the label and debugSignposts


79
00:04:22,696 --> 00:04:26,400 line:-2
that you're already using
to uniquely identify each command encoder.


80
00:04:26,466 --> 00:04:28,769 line:-2
If you're not already using
labels and signposts,


81
00:04:28,836 --> 00:04:30,337 line:-1
now's a great time to start.


82
00:04:32,239 --> 00:04:34,975 line:-2
The error state tells you the status
of the command encoder


83
00:04:35,042 --> 00:04:36,543 line:-1
at the time of the fault.


84
00:04:37,945 --> 00:04:39,246 line:-1
Or, alternatively,


85
00:04:39,313 --> 00:04:42,316 line:-2
if you don't want to format it yourself,
you could just log the whole error.


86
00:04:42,382 --> 00:04:45,152 line:-2
That will print all the information
related to the error.


87
00:04:46,954 --> 00:04:49,623 line:-2
The ErrorState property
has a few possible values:


88
00:04:49,690 --> 00:04:53,360 line:-2
completed, pending, faulted,
affected and unknown.


89
00:04:54,995 --> 00:04:57,164 line:-1
Faulted is the most important error state


90
00:04:57,231 --> 00:05:00,200 line:-2
because it means that this encoder
was directly responsible


91
00:05:00,267 --> 00:05:01,702 line:-1
for the command buffer fault.


92
00:05:03,804 --> 00:05:06,874 line:-2
Affected could still indicate
the faulting encoder,


93
00:05:06,940 --> 00:05:10,077 line:-2
but unlike the faulted state,
we're not a hundred percent sure.


94
00:05:10,143 --> 00:05:13,647 line:-2
A fault on one encoder
could have affected multiple encoders


95
00:05:13,714 --> 00:05:17,217 line:-2
that are running in parallel, including
encoders from different processes.


96
00:05:17,951 --> 00:05:21,088 line:-2
In the rare event where we can't tell
the state of an encoder,


97
00:05:21,154 --> 00:05:22,689 line:-1
we'll report the unknown state.


98
00:05:24,424 --> 00:05:27,227 line:-2
There's synergy
with the existing GPU tools as well.


99
00:05:27,895 --> 00:05:30,664 line:-2
Since the encoder info objects
are in recorded order


100
00:05:30,731 --> 00:05:32,933 line:-1
and use your labels and debug signposts,


101
00:05:33,000 --> 00:05:36,703 line:-2
you can easily associate them
with the same encoder in Metal Debugger,


102
00:05:36,770 --> 00:05:39,573 line:-2
Metal System Trace,
and other tools built into Xcode.


103
00:05:40,774 --> 00:05:42,809 line:-1
For example, with this information,


104
00:05:42,876 --> 00:05:45,812 line:-2
you can jump right to the relevant encoder
in Metal Debugger.


105
00:05:47,247 --> 00:05:48,649 line:-1
So, when should you turn it on?


106
00:05:48,715 --> 00:05:51,084 line:-2
First off, you should enable it
on every command buffer


107
00:05:51,151 --> 00:05:52,753 line:-1
during development and QA.


108
00:05:52,819 --> 00:05:55,322 line:-2
That will enhance
all your internal error reports


109
00:05:55,389 --> 00:05:57,791 line:-1
and give you quick feedback on any errors.


110
00:05:59,326 --> 00:06:02,796 line:-2
Since enhanced command buffer errors
are built right into Metal,


111
00:06:02,863 --> 00:06:05,065 line:-1
it doesn't require any auxiliary layers.


112
00:06:05,132 --> 00:06:08,969 line:-2
It's designed so that the API
can leverage hardware functionality


113
00:06:09,036 --> 00:06:10,470 line:-1
in its implementation.


114
00:06:10,537 --> 00:06:12,739 line:-1
That makes it into a low-overhead feature.


115
00:06:13,907 --> 00:06:16,009 line:-1
Because it is so low-overhead,


116
00:06:16,076 --> 00:06:19,179 line:-2
you can even ship your application
with the feature enabled.


117
00:06:19,246 --> 00:06:20,981 line:-1
Since it's command buffer-specific,


118
00:06:21,048 --> 00:06:23,483 line:-2
you can target what command buffers
to enable it on.


119
00:06:24,151 --> 00:06:25,919 line:-1
As you get telemetry and bug reports,


120
00:06:25,986 --> 00:06:29,156 line:-2
you can tune the set of command buffers
to hone in on the problem.


121
00:06:30,224 --> 00:06:33,894 line:-2
That said, test your performance
before enabling on user devices.


122
00:06:33,961 --> 00:06:37,030 line:-2
The performance impact varies
across devices and workloads,


123
00:06:37,497 --> 00:06:40,701 line:-2
so you'll want to check
whether the overhead is acceptable to you.


124
00:06:41,435 --> 00:06:43,837 line:-2
The challenge with debugging
Metal shader code


125
00:06:43,904 --> 00:06:45,305 line:-1
is that the codebase can be large


126
00:06:45,372 --> 00:06:48,041 line:-2
and can contain
a lot of places for errors to occur.


127
00:06:48,108 --> 00:06:49,710 line:-1
The first step is knowing where to look,


128
00:06:49,776 --> 00:06:52,379 line:-2
and enhanced command buffer errors
helps with that.


129
00:06:52,446 --> 00:06:54,047 line:-1
It can get us to the encoder level,


130
00:06:54,114 --> 00:06:56,416 line:-2
but to go deeper,
Metal provides another tool.


131
00:06:57,951 --> 00:07:00,153 line:-1
That's where shader validation comes in:


132
00:07:00,220 --> 00:07:04,625 line:-2
to detect, locate and classify
the error at the draw call level


133
00:07:04,691 --> 00:07:06,326 line:-1
to help you debug and fix it.


134
00:07:07,928 --> 00:07:11,465 line:0
So let's talk about the shader validation
layer and what it can do for you.


135
00:07:12,966 --> 00:07:16,937 line:-2
It's a layer similar to the API
validation layer, but running on the GPU.


136
00:07:18,372 --> 00:07:21,475 line:-2
It instruments your Metal shaders
to detect logical issues


137
00:07:21,542 --> 00:07:23,810 line:-1
as well as locate and classify them.


138
00:07:23,877 --> 00:07:27,548 line:-2
When it detects that an operation
would've caused undefined behavior,


139
00:07:27,614 --> 00:07:30,651 line:-2
that operation is prevented
and a log is created


140
00:07:30,717 --> 00:07:34,021 line:-2
that can be used to locate the draw call,
Metal function,


141
00:07:34,087 --> 00:07:36,823 line:-2
possibly even the line in the shader
causing the error.


142
00:07:37,691 --> 00:07:40,994 line:-2
This tool can help you debug issues
that cause command buffer errors,


143
00:07:41,061 --> 00:07:43,030 line:-2
and it can help you
detect ones that don't.


144
00:07:43,597 --> 00:07:45,832 line:-2
This is important
because there's many types of errors


145
00:07:45,899 --> 00:07:48,502 line:-2
that don't actually cause
a command buffer to fail


146
00:07:48,569 --> 00:07:50,337 line:-1
but are still undefined behavior.


147
00:07:50,404 --> 00:07:52,439 line:-1
Let's walk through one of those cases now.


148
00:07:53,874 --> 00:07:56,877 line:-2
We'll start by allocating two buffers,
A and B.


149
00:07:57,444 --> 00:08:00,681 line:-2
We want to read from buffer A
but have a logic issue


150
00:08:00,747 --> 00:08:03,283 line:-2
such that it causes us
to read out of bounds.


151
00:08:03,350 --> 00:08:05,018 line:-1
What happens next is undefined


152
00:08:05,085 --> 00:08:07,120 line:-2
and depends on
Metal's allocation behavior.


153
00:08:08,488 --> 00:08:09,489 line:-1
You could get lucky,


154
00:08:09,556 --> 00:08:12,459 line:-2
and there's unallocated memory
in between the two buffers.


155
00:08:12,526 --> 00:08:15,963 line:-2
If you go out of bounds in this case,
you can get a command buffer fault.


156
00:08:16,029 --> 00:08:17,030 line:-1
Since there's a fault,


157
00:08:17,097 --> 00:08:19,433 line:-2
it's obvious feedback
that something bad has happened,


158
00:08:19,499 --> 00:08:22,769 line:-2
and enhanced command buffer errors
will narrow it down to the encoder.


159
00:08:24,071 --> 00:08:25,272 line:-1
But if you're unlucky,


160
00:08:25,339 --> 00:08:27,841 line:-2
out of bounds access
won't cause a command buffer fault.


161
00:08:28,442 --> 00:08:31,778 line:-2
Metal may place the buffers
one after another in virtual memory


162
00:08:31,845 --> 00:08:33,947 line:-1
with no unallocated space between.


163
00:08:35,515 --> 00:08:38,952 line:-2
Here, our logic error
won't cause a command buffer fault.


164
00:08:39,019 --> 00:08:42,054 line:-2
We still go out of bounds
but end up landing in another allocation


165
00:08:42,121 --> 00:08:45,025 line:-2
and either read the wrong data
or corrupt another buffer.


166
00:08:45,626 --> 00:08:49,329 line:-2
Such issues can be hard to detect
and frustrating to debug,


167
00:08:49,396 --> 00:08:51,131 line:-1
as they may appear intermittent.


168
00:08:52,299 --> 00:08:54,434 line:-2
The most important thing to take
from that example


169
00:08:54,501 --> 00:08:57,504 line:-2
is that you should always test
with API validation


170
00:08:57,571 --> 00:08:59,606 line:-1
and shader validation before shipping.


171
00:09:01,542 --> 00:09:03,877 line:-2
Just because you're not seeing
a command buffer fault


172
00:09:03,944 --> 00:09:06,847 line:-2
does not rule out that you don't have
any undefined behavior.


173
00:09:07,414 --> 00:09:10,784 line:-2
Undefined behavior isn't always obvious,
and it can appear intermittent.


174
00:09:12,786 --> 00:09:14,621 line:-2
But the good news is
that shader validation


175
00:09:14,688 --> 00:09:18,091 line:-2
is meant to detect these cases,
including the ones that aren't obvious.


176
00:09:18,659 --> 00:09:22,029 line:-2
Let's go over what shader validation
can and cannot detect.


177
00:09:24,064 --> 00:09:27,467 line:-2
It can detect out of bounds device
and constant memory access,


178
00:09:28,101 --> 00:09:30,103 line:-1
out of bounds threadgroup memory access,


179
00:09:30,604 --> 00:09:34,241 line:-2
and attempting to use texturing functions
on a null texture object.


180
00:09:35,108 --> 00:09:37,311 line:0
This doesn't cover
all of the common issues mentioned,


181
00:09:37,377 --> 00:09:40,480 line:0
but for everything else,
enhanced command buffer errors can help.


182
00:09:42,149 --> 00:09:45,719 line:-2
You won't get draw information,
but it will narrow down to the encoder.


183
00:09:47,888 --> 00:09:50,357 line:-2
The most powerful way
to use this feature when debugging


184
00:09:50,424 --> 00:09:53,093 line:-2
is from within Xcode,
and enabling it is easy.


185
00:09:53,827 --> 00:09:56,496 line:-2
First, bring up the scheme settings
in your project.


186
00:09:56,563 --> 00:09:58,131 line:-1
In the Diagnostics tab,


187
00:09:58,198 --> 00:10:01,268 line:-2
we have a new section
for diagnostics specific to Metal.


188
00:10:03,770 --> 00:10:06,039 line:-1
Checking the box next to Shader Validation


189
00:10:06,106 --> 00:10:08,709 line:-2
will enable the layer
and enhanced command buffer errors


190
00:10:08,775 --> 00:10:10,511 line:-1
for all command buffers.


191
00:10:10,577 --> 00:10:11,912 line:-1
Once the layer is enabled,


192
00:10:11,979 --> 00:10:14,615 line:-2
you still need to enable
the Metal diagnostics breakpoint.


193
00:10:16,483 --> 00:10:18,218 line:-1
The Metal diagnostics breakpoint


194
00:10:18,285 --> 00:10:21,088 line:-2
tells Xcode to stop
the execution of the program


195
00:10:21,154 --> 00:10:23,423 line:-1
when a shader validation error occurs


196
00:10:23,490 --> 00:10:27,761 line:-2
and to show the recorded
GPU and CPU backtrace for that error.


197
00:10:29,596 --> 00:10:32,099 line:-2
Clicking the arrow
to the right of shader validation


198
00:10:32,165 --> 00:10:33,333 line:-1
will add the breakpoint.


199
00:10:35,502 --> 00:10:37,004 line:-1
Once the breakpoint has been added,


200
00:10:37,070 --> 00:10:40,007 line:-2
you can find it in the Debug Navigator
on the Breakpoints tab.


201
00:10:40,641 --> 00:10:42,442 line:-2
You can view
the settings of this breakpoint


202
00:10:42,509 --> 00:10:44,011 line:-1
by clicking on the blue arrow.


203
00:10:46,346 --> 00:10:50,050 line:-2
That will bring up this interface,
where you can customize the breakpoint.


204
00:10:50,517 --> 00:10:52,986 line:-2
To configure the breakpoint
for shader validation,


205
00:10:53,320 --> 00:10:55,155 line:-2
first make sure
the breakpoint is enabled.


206
00:10:56,890 --> 00:10:58,825 line:-2
Then set the Type
to System Frameworks


207
00:10:59,760 --> 00:11:02,396 line:-2
and enter "Metal Diagnostics"
into the Category field.


208
00:11:03,730 --> 00:11:06,066 line:-2
At this point, you're ready
to use the feature within Xcode.


209
00:11:06,133 --> 00:11:08,368 line:-2
Now let's jump into a demo
showing it in action.


210
00:11:10,003 --> 00:11:13,407 line:-2
We're using the Metal Performance Shader
Ray Tracing sample code.


211
00:11:13,473 --> 00:11:17,211 line:-2
We've introduced an easy-to-make GPU error
into the sample for this demo.


212
00:11:17,277 --> 00:11:20,047 line:-2
During the demo,
we'll go through using shader validation


213
00:11:20,113 --> 00:11:21,748 line:-1
to detect and debug this issue.


214
00:11:23,317 --> 00:11:26,386 line:-2
First, I'll start by launching the app
without shader validation.


215
00:11:29,256 --> 00:11:30,824 line:-1
That doesn't look quite right.


216
00:11:30,891 --> 00:11:33,660 line:-2
There's missing shadows
and a bunch of lines on the screen.


217
00:11:34,127 --> 00:11:36,196 line:-2
Why this isn't rendering isn't obvious,
though.


218
00:11:36,597 --> 00:11:38,632 line:-2
We're not getting
any command buffer errors,


219
00:11:38,699 --> 00:11:41,635 line:-2
so we don't know which encoder
or Metal function has the bug.


220
00:11:43,270 --> 00:11:46,073 line:-2
Before we start trying to debug this
line by line,


221
00:11:46,139 --> 00:11:50,010 line:-2
I'll use Metal's new debugging workflow
by enabling shader validation.


222
00:11:50,077 --> 00:11:53,647 line:-2
First, I'll bring up
the scheme settings in my project.


223
00:11:53,714 --> 00:11:56,383 line:-1
And then I'll go into the Diagnostics tab


224
00:11:56,450 --> 00:11:58,418 line:-2
and then down at the bottom,
there'll be options


225
00:11:58,485 --> 00:12:01,588 line:-1
for API validation and shader validation.


226
00:12:01,655 --> 00:12:05,692 line:-2
The API validation has been moved
from a different tab to this one.


227
00:12:05,759 --> 00:12:09,029 line:-2
Now I'll enable API validation
and shader validation.


228
00:12:11,031 --> 00:12:14,334 line:-2
Since I want to have Xcode break
on the first validation error,


229
00:12:14,401 --> 00:12:17,938 line:-2
I'll click this arrow to add
the Metal diagnostics breakpoint.


230
00:12:18,005 --> 00:12:21,375 line:-2
Now I'm set up to use shader validation,
and I'll relaunch the application.


231
00:12:24,711 --> 00:12:28,482 line:-2
So we have some logs being printed
in the console from shader validation


232
00:12:28,549 --> 00:12:30,350 line:-1
indicating that it detected an error.


233
00:12:31,985 --> 00:12:35,389 line:-2
Since I have the breakpoint enabled,
Xcode has stopped my application


234
00:12:35,455 --> 00:12:38,492 line:-2
and brought up the Metal shader
where the error occurred.


235
00:12:38,559 --> 00:12:40,961 line:-1
Xcode is also showing a shader annotation


236
00:12:41,028 --> 00:12:43,997 line:-2
on the line that shader validation found
had an error.


237
00:12:44,064 --> 00:12:45,999 line:-1
I can click the shader annotation,


238
00:12:46,066 --> 00:12:48,836 line:-2
and it'll show some more details
about this error.


239
00:12:49,803 --> 00:12:52,906 line:-2
Based on the annotation,
I'm hitting an out of bounds memory read.


240
00:12:55,642 --> 00:12:58,946 line:-2
Looking at this expression,
there's only one memory access going on.


241
00:12:59,012 --> 00:13:02,115 line:-2
We're reading the maxDistance field
from the shadowRay argument,


242
00:13:02,883 --> 00:13:04,618 line:-1
which is a pointer in device memory.


243
00:13:05,152 --> 00:13:07,020 line:-1
There are two possibilities here:


244
00:13:07,087 --> 00:13:10,591 line:-2
either shadowRay is null
or shadowRay points to invalid memory.


245
00:13:12,226 --> 00:13:14,294 line:-1
Since we enabled API validation,


246
00:13:14,361 --> 00:13:17,364 line:-2
that would've caught a null buffer
binding, so we can rule that one out.


247
00:13:17,831 --> 00:13:19,499 line:-1
Just looking at the function here,


248
00:13:19,566 --> 00:13:22,903 line:-2
it's not clear how the address
of shadowRay is being calculated.


249
00:13:23,504 --> 00:13:27,941 line:-2
So we'll use the GPU backtrace view
in the bottom left-hand side of Xcode.


250
00:13:29,843 --> 00:13:32,946 line:-2
This view shows
the GPU backtrace of the error,


251
00:13:33,013 --> 00:13:35,415 line:-2
which has the recorded
call stack of the error


252
00:13:35,482 --> 00:13:36,984 line:-1
at the time the error occurred.


253
00:13:37,417 --> 00:13:41,221 line:-2
We can traverse this call stack just like
you would any other recorded call stack.


254
00:13:41,288 --> 00:13:44,091 line:-2
I'll click on the stack
below our function,


255
00:13:44,157 --> 00:13:47,394 line:-2
which will jump me to the call site
of the function shadowRayIntersection.


256
00:13:49,496 --> 00:13:52,699 line:-2
It looks like the variable shadowRay
is what's being passed in,


257
00:13:52,766 --> 00:13:56,403 line:-2
which is computed by taking
the shadowRay's argument


258
00:13:56,470 --> 00:13:59,339 line:-2
and indexing it using
the rayIndex variable.


259
00:13:59,406 --> 00:14:03,076 line:-2
Since we suspect an invalid offset,
we need to investigate rayIndex.


260
00:14:04,311 --> 00:14:07,447 line:-2
Looking at the comment
above the computation of rayIndex,


261
00:14:07,514 --> 00:14:10,117 line:-2
its code intends to convert
a 2D grid coordinate


262
00:14:10,184 --> 00:14:11,752 line:-1
into a 1D array coordinate.


263
00:14:12,286 --> 00:14:16,190 line:-2
That's typically accomplished by
multiplying the grid Y with the grid width


264
00:14:16,256 --> 00:14:17,758 line:-1
and then adding the grid X.


265
00:14:18,192 --> 00:14:20,594 line:-2
However,
looking closely at this expression,


266
00:14:20,661 --> 00:14:24,064 line:-2
we see that instead of multiplying
the grid Y and the width,


267
00:14:24,131 --> 00:14:25,966 line:-1
we're multiplying the X and the width.


268
00:14:26,366 --> 00:14:30,070 line:-2
That's definitely a typo, so let's
correct that and rerun the application.


269
00:14:43,750 --> 00:14:45,018 line:-1
Now our app is fixed.


270
00:14:45,953 --> 00:14:49,022 line:-2
With the help of shader validation
and API validation,


271
00:14:49,089 --> 00:14:52,159 line:-2
we were able to quickly locate
and classify this issue.


272
00:14:52,960 --> 00:14:56,530 line:-2
We realize you're not always able
to run everything under Xcode,


273
00:14:56,597 --> 00:14:59,833 line:-2
so with some additional setup, you can
use shader validation without Xcode.


274
00:15:00,634 --> 00:15:04,204 line:-2
That lets you use shader validation
for use cases like automated testing.


275
00:15:05,305 --> 00:15:07,107 line:-1
Similar to API validation,


276
00:15:07,174 --> 00:15:10,544 line:-2
shader validation can be enabled
using two new environment variables


277
00:15:10,611 --> 00:15:13,413 line:-1
we've added to the new macOS and iOS 14.


278
00:15:14,281 --> 00:15:16,049 line:-1
These variables must be set


279
00:15:16,116 --> 00:15:18,986 line:-2
before any Metal device
is created for that process.


280
00:15:19,052 --> 00:15:21,755 line:-2
Once a device is created,
we latch their values,


281
00:15:21,822 --> 00:15:25,058 line:-2
so any changes to them after that point
will not have an effect.


282
00:15:26,393 --> 00:15:30,797 line:-2
To enable API validation,
set MTL_DEBUG_LAYER to any non-zero value.


283
00:15:31,431 --> 00:15:33,166 line:-1
And to enable shader validation,


284
00:15:33,233 --> 00:15:35,969 line:-2
set MTL_SHADER_VALIDATION
to any non-zero value.


285
00:15:37,404 --> 00:15:40,207 line:0
Both of these can be set at once
or used independently.


286
00:15:41,208 --> 00:15:44,311 line:-2
The command buffer
now has a new logs property


287
00:15:44,378 --> 00:15:48,315 line:-2
which allows you to retrieve the details
for any validation errors that occurred.


288
00:15:48,949 --> 00:15:51,218 line:-2
The first thing to note
is that the log's property


289
00:15:51,285 --> 00:15:54,087 line:-2
is only valid
after a command buffer finishes.


290
00:15:54,655 --> 00:15:58,125 line:-2
For that reason, we're doing all
of our work inside the completion handler.


291
00:15:59,693 --> 00:16:01,328 line:-1
We'll walk through this code sample,


292
00:16:01,395 --> 00:16:04,665 line:-2
showing how to use the new API
and what information it provides.


293
00:16:06,233 --> 00:16:09,736 line:-2
Each command buffer can have
multiple shader validation errors.


294
00:16:09,803 --> 00:16:11,805 line:-2
So we're gonna iterate
through all of them.


295
00:16:13,140 --> 00:16:16,944 line:-2
Every log object contains information
about the shader validation error.


296
00:16:17,010 --> 00:16:19,813 line:-2
Like the label of the encoder
that had an error,


297
00:16:19,880 --> 00:16:22,883 line:-2
that will give you the label,
but there can be more information.


298
00:16:23,750 --> 00:16:26,620 line:-2
If your Metal library
was compiled from source


299
00:16:26,687 --> 00:16:28,655 line:-1
or was compiled with debug samples,


300
00:16:29,389 --> 00:16:32,526 line:-2
each log may also have
a debugLocation property.


301
00:16:32,593 --> 00:16:35,696 line:-2
This property is the GPU stack frame
containing the error,


302
00:16:35,762 --> 00:16:40,300 line:-2
and it will hold the file URL
and line of the faulting expression.


303
00:16:42,202 --> 00:16:45,506 line:-2
Alternatively, you could just use
the description property.


304
00:16:45,572 --> 00:16:49,142 line:-2
This contains all the same information
formatted in an easy-to-read string.


305
00:16:51,745 --> 00:16:54,715 line:-2
You'll also be able to find
this information in the system log.


306
00:16:54,781 --> 00:16:58,318 line:-2
You can access this log by running
this highlighted command in your Terminal.


307
00:17:00,254 --> 00:17:03,423 line:-2
When a validation error occurs,
it'll show up like this.


308
00:17:03,490 --> 00:17:05,058 line:-1
The first thing in the log


309
00:17:05,125 --> 00:17:07,994 line:-2
is the process name
the error is occurring from.


310
00:17:08,060 --> 00:17:11,098 line:-2
The next will be the type of error
and then the error details.


311
00:17:11,898 --> 00:17:15,234 line:0
Finally, the name of the Metal file
and the line information.


312
00:17:17,069 --> 00:17:20,374 line:-2
We have some tips to help you
get the most out of shader validation.


313
00:17:21,241 --> 00:17:24,144 line:-2
You can expect pipelines
to take a bit longer to compile.


314
00:17:24,744 --> 00:17:25,746 line:-1
Because of that,


315
00:17:25,811 --> 00:17:28,916 line:-2
you should really be using
the asynchronous compilation methods.


316
00:17:28,982 --> 00:17:32,019 line:-2
That will parallelize compilation
across multiple threads,


317
00:17:32,085 --> 00:17:35,389 line:-2
which will help mitigate the increased
load times during development.


318
00:17:37,357 --> 00:17:40,694 line:-2
You should also enable debug symbols
when compiling your Metal libraries.


319
00:17:41,261 --> 00:17:45,032 line:-2
That should automatically happen
if you're using a debug scheme in Xcode.


320
00:17:45,098 --> 00:17:47,534 line:-2
But if you are invoking
the Metal front-end manually,


321
00:17:47,601 --> 00:17:50,304 line:-2
symbols can be enabled
by adding the "-g" flag.


322
00:17:50,904 --> 00:17:53,841 line:-2
If any of your libraries
are compiled from source online,


323
00:17:53,907 --> 00:17:56,143 line:-2
debug symbols
will automatically be enabled.


324
00:17:57,978 --> 00:18:00,447 line:-1
If you are compiling libraries online,


325
00:18:00,514 --> 00:18:03,550 line:-2
we recommend using
the line preprocessor directive.


326
00:18:03,617 --> 00:18:07,387 line:-2
The backtrace we report
uses the file name to identify a shader.


327
00:18:07,454 --> 00:18:11,425 line:-2
Off-line compiled metalib files
include this information automatically,


328
00:18:11,491 --> 00:18:14,027 line:-2
but it's missing when compiling
from source at runtime.


329
00:18:15,829 --> 00:18:18,398 line:-2
You can manually add
the file name information


330
00:18:18,465 --> 00:18:22,035 line:-2
by using the line directive to tell
the compiler what file it was sourced from


331
00:18:22,102 --> 00:18:23,837 line:-1
or to provide a useful identifier.


332
00:18:25,405 --> 00:18:27,107 line:-1
Due to the nature of its instrumentation,


333
00:18:27,174 --> 00:18:30,043 line:-2
there are a few things to be aware of
when enabling shader validation.


334
00:18:30,944 --> 00:18:32,980 line:-1
Shader validation is a process-wide switch


335
00:18:33,046 --> 00:18:35,315 line:-2
that when enabled
causes all Metal commands,


336
00:18:35,382 --> 00:18:38,519 line:-2
including UI rendering,
to go through the shader validation layer.


337
00:18:39,953 --> 00:18:41,688 line:-1
Unlike enhanced command buffer errors,


338
00:18:41,755 --> 00:18:45,459 line:-2
using shader validation does have
a high performance and memory impact.


339
00:18:47,127 --> 00:18:50,564 line:-2
We recommend enabling this feature
in development and during QA


340
00:18:50,631 --> 00:18:52,966 line:-1
but not for users because of this impact.


341
00:18:54,635 --> 00:18:58,805 line:0
Enabling the feature may also change
some queries to return different values.


342
00:18:59,439 --> 00:19:03,911 line:0
In particular, you should always check
the maxTotalThreadsPerThreadgroup


343
00:19:03,977 --> 00:19:07,614 line:0
and the threadExecutionWidth properties
of a compute pipeline state,


344
00:19:07,681 --> 00:19:10,350 line:0
as these two may change
when shader validation is enabled.


345
00:19:11,552 --> 00:19:14,788 line:-2
We support some level of customization
on how this feature behaves,


346
00:19:15,455 --> 00:19:17,191 line:-1
such as disabling specific checks.


347
00:19:19,092 --> 00:19:22,262 line:-2
For example, if you're already doing
null texture checks,


348
00:19:22,329 --> 00:19:25,299 line:-2
you can safely disable
texture usage instrumentation


349
00:19:25,365 --> 00:19:27,334 line:-1
by setting the environment variable


350
00:19:27,401 --> 00:19:30,404 line:-2
MTL_SHADER_VALIDATION_TEXTURE_USAGE
to zero.


351
00:19:32,372 --> 00:19:34,274 line:-1
While disabling some instrumentation


352
00:19:34,341 --> 00:19:36,844 line:-2
can improve runtime
and compile time performance,


353
00:19:36,910 --> 00:19:39,980 line:-2
it's at the cost of no longer detecting
some possible issues.


354
00:19:41,982 --> 00:19:44,484 line:-2
More information
about what flags are supported


355
00:19:44,551 --> 00:19:47,287 line:-2
can be found
at the new MetalValidation man page.


356
00:19:49,823 --> 00:19:52,893 line:-2
Some features are not supported
when using shader validation.


357
00:19:52,960 --> 00:19:56,396 line:-2
Binary function pointers
and dynamic linking are not supported.


358
00:19:58,365 --> 00:20:01,768 line:-2
There's an additional limitation
for MTLGPUFamilyMac1,


359
00:20:01,835 --> 00:20:05,839 line:-2
as well as MTLGPUFamilyApple5
and older devices,


360
00:20:05,906 --> 00:20:08,175 line:-2
which is that global memory access
of pointers


361
00:20:08,242 --> 00:20:10,544 line:-2
coming from an argument buffer
are not checked.


362
00:20:11,612 --> 00:20:13,547 line:-2
Thank you very much
for coming to our session


363
00:20:13,614 --> 00:20:16,617 line:-2
about the two new Metal debugging tools
we've added this year.


364
00:20:17,184 --> 00:20:19,353 line:-2
First, we covered
enhanced command buffer errors,


365
00:20:19,419 --> 00:20:21,855 line:-1
which is a low-overhead in-framework tool


366
00:20:21,922 --> 00:20:24,691 line:-2
that helps you detect and locate
your faulting encoders


367
00:20:24,758 --> 00:20:26,159 line:-1
in multiple environments,


368
00:20:26,226 --> 00:20:29,096 line:-2
like during development and QA,
or even after you've shipped.


369
00:20:30,831 --> 00:20:32,533 line:-1
And we just covered shader validation,


370
00:20:32,599 --> 00:20:35,335 line:-2
which helps you detect,
locate and classify


371
00:20:35,402 --> 00:20:39,006 line:-2
both subtle and obvious shader errors
during development and QA.


372
00:20:39,873 --> 00:20:41,408 line:-1
Now go out and try the features.


373
00:20:42,009 --> 00:20:46,180 line:-2
Test your apps with enhanced command
buffer errors and shader validation.


374
00:20:46,246 --> 00:20:48,348 line:-1
Thanks, and have a great WWDC.

