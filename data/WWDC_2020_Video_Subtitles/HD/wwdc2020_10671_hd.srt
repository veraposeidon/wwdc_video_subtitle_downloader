1
00:00:03,836 --> 00:00:06,573 line:-1
Hello and welcome to WWDC.


2
00:00:09,076 --> 00:00:12,913 line:0
Hello, everyone. Thank you for viewing
"Architecting for Subscriptions."


3
00:00:12,980 --> 00:00:14,181 line:0
My name is Michael Gargas,


4
00:00:14,248 --> 00:00:16,950 line:0
a technical advocate
on the App Store Commerce team,


5
00:00:17,017 --> 00:00:19,386 line:0
and I'm excited to introduce
some new concepts


6
00:00:19,453 --> 00:00:20,988 line:-1
around how to build and maintain


7
00:00:21,054 --> 00:00:23,891 line:-2
a subscription service
on the Apple platform.


8
00:00:24,258 --> 00:00:28,595 line:-2
We want to structure this to be helpful
not just for business and engineering,


9
00:00:28,662 --> 00:00:32,299 line:-2
but also for your server-side teams
and data analysts.


10
00:00:33,166 --> 00:00:36,270 line:-2
Whether you've been offering
subscriptions within your app for years


11
00:00:36,336 --> 00:00:38,005 line:-1
or are just getting started,


12
00:00:38,071 --> 00:00:40,307 line:-2
this session will provide
valuable information


13
00:00:40,374 --> 00:00:44,244 line:-2
for constructing
your system's entitlement architecture.


14
00:00:45,012 --> 00:00:49,516 line:-2
From there, you'll see ways to build
or reconstruct your server-side systems


15
00:00:49,583 --> 00:00:53,620 line:-2
to take full advantage of the new features
which Apple will provide over time.


16
00:00:54,521 --> 00:00:57,090 line:-2
To build a successful
subscription platform,


17
00:00:57,157 --> 00:01:00,894 line:-2
it's important to understand
the journey a subscriber can take.


18
00:01:00,961 --> 00:01:03,397 line:-2
We can then define
subscription entitlement,


19
00:01:03,463 --> 00:01:04,965 line:-1
craft custom logic,


20
00:01:05,032 --> 00:01:08,735 line:-2
and put it all into practice by utilizing
an entitlement engine


21
00:01:08,802 --> 00:01:12,172 line:-2
to provide a tailored experience
for those subscribers.


22
00:01:13,140 --> 00:01:15,742 line:-2
So let's take a deeper look
at the subscriber journey


23
00:01:15,809 --> 00:01:20,180 line:-2
and the different complex states that can
result from different subscriber actions.


24
00:01:21,248 --> 00:01:25,619 line:-2
In the past, access may have been granted
based on one or two receipt fields,


25
00:01:25,686 --> 00:01:29,289 line:-2
such as product ID
and expiration date, determining:


26
00:01:29,356 --> 00:01:32,426 line:-1
Is this user or subscriber active or not?


27
00:01:33,327 --> 00:01:37,130 line:-2
As we've launched new features
like Billing Retry and Grace Period,


28
00:01:37,197 --> 00:01:41,435 line:-2
these combinations of receipt fields
have become more and more complex,


29
00:01:41,502 --> 00:01:45,506 line:-2
and understanding them requires
deep knowledge of the app receipt itself.


30
00:01:46,340 --> 00:01:50,210 line:-2
Let's take a look at an example
subscription in a calendar view.


31
00:01:50,277 --> 00:01:54,147 line:-2
Here, we have a one-month product
which was purchased on May 1st.


32
00:01:54,214 --> 00:01:55,215 line:-1
Let's take a deeper look


33
00:01:55,282 --> 00:01:59,286 line:-2
and see how different subscriber actions
can affect subscriber states.


34
00:02:00,187 --> 00:02:04,091 line:-2
For a basic subscription
that was purchased on May 1st,


35
00:02:04,157 --> 00:02:08,127 line:-2
Apple will send you, the developer,
a server-to-server notification


36
00:02:08,195 --> 00:02:10,663 line:-1
signifying an initial buy has taken place.


37
00:02:11,265 --> 00:02:14,968 line:-2
If no subsequent actions are taken
by the subscriber,


38
00:02:15,035 --> 00:02:18,839 line:-2
we will continue to renew the subscription
on the 1st moving forward.


39
00:02:19,473 --> 00:02:22,876 line:-2
But let's say that the subscriber elects
to cancel their subscription.


40
00:02:23,877 --> 00:02:27,514 line:-2
Here, we see the example subscription
purchased again on the 1st.


41
00:02:27,581 --> 00:02:29,516 line:-1
However, the subscriber has navigated


42
00:02:29,583 --> 00:02:32,119 line:-2
to the App Store
Manage Subscription setting


43
00:02:32,186 --> 00:02:34,087 line:-1
and elected to cancel.


44
00:02:34,154 --> 00:02:36,823 line:-2
It's at this point that Apple
will send you, the developer,


45
00:02:36,890 --> 00:02:38,625 line:-1
a server-to-server notification


46
00:02:38,692 --> 00:02:42,663 line:-2
letting you know that that subscriber
has disabled their auto-renewal status.


47
00:02:43,564 --> 00:02:46,066 line:-1
If no subsequent actions are taken,


48
00:02:46,133 --> 00:02:50,037 line:-2
this user will voluntarily churn
from your subscription product.


49
00:02:50,103 --> 00:02:55,075 line:-2
This will be signified via the
expires_date and expiration_intent fields


50
00:02:55,142 --> 00:02:56,643 line:-1
in the receipt response.


51
00:02:58,612 --> 00:02:59,980 line:-1
In this example,


52
00:03:00,047 --> 00:03:05,319 line:-2
what if Apple is unsuccessful in charging
the user's card for a subsequent renewal?


53
00:03:05,919 --> 00:03:08,989 line:-2
Here again, we see
the initial buy notification on the 1st,


54
00:03:09,823 --> 00:03:12,626 line:-2
but Apple was unsuccessful
in charging the card


55
00:03:12,693 --> 00:03:14,795 line:-1
on the subsequent anniversary date.


56
00:03:14,862 --> 00:03:18,799 line:-2
The user, however, navigated to the
App Store's Payment Information settings


57
00:03:18,866 --> 00:03:21,702 line:-1
and updated their payment method on file.


58
00:03:21,768 --> 00:03:24,638 line:-2
It's at this point that Apple
will deliver you, the developer,


59
00:03:24,705 --> 00:03:28,642 line:-2
a server-to-server notification signifying
that the subscriber has renewed,


60
00:03:29,109 --> 00:03:33,514 line:-2
and we will continue to renew that
subscriber on the 15th moving forward.


61
00:03:34,181 --> 00:03:38,118 line:-2
However, what if you, as a developer,
have Grace Period enabled?


62
00:03:38,852 --> 00:03:42,389 line:-2
In this example, again we see
the subscription purchased on the 1st,


63
00:03:42,456 --> 00:03:46,293 line:-2
and we were unable to renew the card
on the subsequent renewal date.


64
00:03:46,360 --> 00:03:48,662 line:-1
However, with Grace Period enabled,


65
00:03:48,729 --> 00:03:52,366 line:-2
any recoveries which happen
within a 16-day period


66
00:03:52,432 --> 00:03:54,668 line:-1
will keep billing date continuity.


67
00:03:54,735 --> 00:03:55,736 line:-1
So as you can see,


68
00:03:55,802 --> 00:03:59,873 line:-2
Apple will continue to renew
that subscriber on the 1st moving forward.


69
00:04:00,607 --> 00:04:04,745 line:-2
It's important to understand
that each subscriber journey is unique.


70
00:04:04,811 --> 00:04:08,849 line:-2
It's for this reason that we need
to understand all of the receipt fields,


71
00:04:08,916 --> 00:04:12,519 line:-2
the signals Apple sends
as a result of customer actions


72
00:04:12,586 --> 00:04:14,555 line:-2
and the different states
that may be a result


73
00:04:14,621 --> 00:04:16,857 line:-1
of those specific customer actions.


74
00:04:18,992 --> 00:04:21,894 line:-2
These examples illustrate how quickly
a subscription state


75
00:04:21,962 --> 00:04:25,032 line:-1
becomes more than active versus inactive.


76
00:04:25,732 --> 00:04:30,370 line:-2
Basic actions like upgrading
or downgrading, and even crossgrading,


77
00:04:30,437 --> 00:04:34,975 line:-2
and other complex billing states,
like Billing Retry and Grace Period,


78
00:04:35,042 --> 00:04:37,978 line:-2
also present messaging opportunities
or actions


79
00:04:38,045 --> 00:04:41,048 line:-2
which can help provide
a better customer experience,


80
00:04:41,114 --> 00:04:43,984 line:-1
reduce churn and maximize conversion.


81
00:04:44,785 --> 00:04:48,288 line:0
In previous sessions, we've highlighted
a wide range of tools and features


82
00:04:48,355 --> 00:04:51,592 line:0
that can be used to enhance
your subscription service.


83
00:04:51,658 --> 00:04:55,429 line:0
Whether it's the StoreKit framework
that helps process payments,


84
00:04:55,495 --> 00:04:59,466 line:0
server-to-server notifications
or even enhanced receipt data,


85
00:04:59,533 --> 00:05:03,370 line:0
each of these lay the groundwork for
building an engaging subscription service


86
00:05:03,437 --> 00:05:04,638 line:0
on the Apple platform.


87
00:05:06,240 --> 00:05:09,843 line:0
I highly recommend that you check out
these additional sessions


88
00:05:09,910 --> 00:05:13,747 line:0
to ensure you are up-to-date
on all the existing and new features


89
00:05:13,814 --> 00:05:16,950 line:0
which will be available for integration
in your applications.


90
00:05:17,684 --> 00:05:20,954 line:-2
So in order to respond
to customer actions accurately,


91
00:05:21,021 --> 00:05:24,625 line:-2
it's imperative that we take
a deep dive into the subscriber state.


92
00:05:25,492 --> 00:05:27,895 line:-2
Here we see that identifying
the subscriber state


93
00:05:27,961 --> 00:05:30,531 line:-1
is a key step in the purchase process.


94
00:05:30,597 --> 00:05:32,399 line:-1
This helps you, the developer,


95
00:05:32,466 --> 00:05:36,637 line:-2
best understand the experience that
you want to provide to your end users.


96
00:05:37,337 --> 00:05:39,306 line:-2
Whether it's presenting
a subscription offer


97
00:05:39,373 --> 00:05:42,910 line:-2
or un-entitling service for the user
because they've been refunded,


98
00:05:42,976 --> 00:05:45,445 line:-2
understanding the subscription state
is key.


99
00:05:47,748 --> 00:05:49,449 line:-1
When we think about subscription state,


100
00:05:49,516 --> 00:05:52,586 line:-2
it's important to know
where the subscriber has been,


101
00:05:52,653 --> 00:05:56,356 line:-2
where they are at, and what event
may take place in the future.


102
00:05:58,392 --> 00:06:00,727 line:-2
Deep knowledge of the data
within the app receipt


103
00:06:00,794 --> 00:06:03,564 line:-2
is key to understanding
subscription states.


104
00:06:04,031 --> 00:06:07,334 line:-2
Each renewal event in the receipt is
a static entry


105
00:06:07,401 --> 00:06:10,504 line:-2
showing that subscriber's state
at that moment in time.


106
00:06:11,705 --> 00:06:13,073 line:-1
State can then be inferred


107
00:06:13,140 --> 00:06:16,476 line:-2
by looking at combinations
of these different receipt field values.


108
00:06:17,277 --> 00:06:21,849 line:-2
Using these states, you can then decide to
tailor your experience for that subscriber


109
00:06:21,915 --> 00:06:25,419 line:-2
and take any relevant actions
within the app experience.


110
00:06:26,920 --> 00:06:30,490 line:-2
Taking a deeper look, it is obvious that
there are many different states


111
00:06:30,557 --> 00:06:32,593 line:-1
which a subscriber can land in.


112
00:06:32,659 --> 00:06:36,063 line:-2
These states are a combination
of different receipt values,


113
00:06:36,129 --> 00:06:39,166 line:-2
such as an expires-date value
being set in the future


114
00:06:39,233 --> 00:06:44,705 line:-2
and auto-renew status being a value of
one, representing active, auto-renew on.


115
00:06:46,306 --> 00:06:49,810 line:-2
For each of these states,
we've also defined relevant substates


116
00:06:49,877 --> 00:06:52,946 line:-2
to show what type of offer
the user is consuming,


117
00:06:53,013 --> 00:06:56,450 line:-2
such as a free trial
or even a subscription offer.


118
00:06:57,885 --> 00:06:59,953 line:-2
Now that we've established
a better understanding


119
00:07:00,020 --> 00:07:04,091 line:-2
of the complexity behind
subscriber state and substate,


120
00:07:04,157 --> 00:07:07,828 line:-2
let's see how these can manifest
in the real world for subscribers


121
00:07:07,895 --> 00:07:10,697 line:-2
and what relevant type of actions
or messaging


122
00:07:10,764 --> 00:07:14,034 line:-2
you, as a developer,
may want to take as a result.


123
00:07:14,701 --> 00:07:17,704 line:-2
So let's walk through these five different
examples of complex states


124
00:07:17,771 --> 00:07:19,706 line:-1
and the resulting actions to take.


125
00:07:20,541 --> 00:07:23,744 line:-2
When looking at a subscriber
and trying to decipher the state,


126
00:07:23,810 --> 00:07:26,713 line:-2
we have to look at
the most recent receipt data.


127
00:07:27,514 --> 00:07:32,419 line:-2
At the surface, we may only see "active"
if we're only looking at expiration date.


128
00:07:32,753 --> 00:07:36,690 line:-2
When looking at a subscriber state
and trying to decipher that state,


129
00:07:36,757 --> 00:07:40,861 line:-2
you, as a developer, have to look at
the most recent receipt data.


130
00:07:40,928 --> 00:07:45,132 line:-2
On the surface, you may just see "active"
if only the expiration date is used.


131
00:07:47,601 --> 00:07:50,771 line:-2
However, if we look even just
a little bit deeper,


132
00:07:50,838 --> 00:07:54,308 line:-2
we can see an opportunity
for a retention subscription offer


133
00:07:54,374 --> 00:07:58,645 line:-2
based on that user's auto-renewal status
and the current subscription product.


134
00:07:59,246 --> 00:08:03,016 line:-2
In this case, the subscriber is currently
on a subscription offer.


135
00:08:03,083 --> 00:08:04,084 line:-1
As a developer,


136
00:08:04,151 --> 00:08:08,255 line:-2
you may want to attempt to retain them
with a follow-up subscription offer.


137
00:08:09,957 --> 00:08:12,559 line:-2
Using that same logic,
if we dive deeper here,


138
00:08:12,626 --> 00:08:14,862 line:-1
we can see a user who has expired,


139
00:08:14,928 --> 00:08:17,664 line:-2
but is in actuality
in a Billing Retry state,


140
00:08:17,731 --> 00:08:19,600 line:-1
signifying that we, Apple,


141
00:08:19,666 --> 00:08:23,237 line:-2
are still attempting to collect payment
for a subscription renewal.


142
00:08:23,871 --> 00:08:25,873 line:-1
In this example, as a developer,


143
00:08:25,939 --> 00:08:29,877 line:-2
you may want to surface a persistent
banner which deep links the subscriber


144
00:08:29,943 --> 00:08:32,813 line:-2
to the App Store's account
to update their payment information.


145
00:08:34,515 --> 00:08:38,018 line:-2
When using the Grace Period example,
we can see another opportunity


146
00:08:38,085 --> 00:08:43,457 line:-2
to identify the user is in a grace period
via these specific receipt fields,


147
00:08:43,524 --> 00:08:47,728 line:-2
and offer maybe a countdown
of days remaining for available service.


148
00:08:47,794 --> 00:08:49,229 line:-1
This can also deep link


149
00:08:49,296 --> 00:08:52,299 line:-2
to that subscriber's payment information
in the App Store


150
00:08:52,366 --> 00:08:55,636 line:-2
so that they're able to update
and recover their subscription.


151
00:08:56,637 --> 00:08:59,673 line:-2
Another opportunity to provide
a tailored experience


152
00:08:59,740 --> 00:09:02,643 line:-2
is to win back users
who have already expired.


153
00:09:03,343 --> 00:09:06,914 line:-2
In this example, we're looking
to see how the user expired,


154
00:09:06,980 --> 00:09:09,583 line:-2
what product
they were initially subscribed to,


155
00:09:09,650 --> 00:09:11,852 line:-1
and providing a push notification


156
00:09:11,919 --> 00:09:14,755 line:-2
merchandising a current win-back
marketing offer.


157
00:09:16,023 --> 00:09:18,592 line:-2
It's important to note that
this push notification


158
00:09:18,659 --> 00:09:21,028 line:-1
will still need to deep link that user


159
00:09:21,094 --> 00:09:24,464 line:-2
to an appropriate payment screen
within your application.


160
00:09:26,099 --> 00:09:30,838 line:-2
And lastly, as a developer, you may want
to provide subscribers a better experience


161
00:09:30,904 --> 00:09:33,807 line:-2
by merchandising potential
upgrade opportunities.


162
00:09:34,775 --> 00:09:38,879 line:-2
In this example, you may notice
the user has purchased a monthly product


163
00:09:38,946 --> 00:09:42,282 line:-2
and renewed for multiple
consecutive periods.


164
00:09:42,349 --> 00:09:45,352 line:-2
By offering an upgrade
to an annual subscription,


165
00:09:45,419 --> 00:09:49,523 line:-2
you can provide a discount
and reward your most loyal subscribers.


166
00:09:51,725 --> 00:09:54,661 line:-2
Now we have identified five states
and substates,


167
00:09:54,728 --> 00:09:58,932 line:-2
but as you can see, there isn't just
one state for active versus inactive.


168
00:09:58,999 --> 00:10:02,669 line:-2
There are many more potential outcomes
based on subscriber actions.


169
00:10:03,570 --> 00:10:07,875 line:-2
Understanding this is a key factor
in defining subscription entitlement.


170
00:10:08,442 --> 00:10:10,777 line:-2
To walk you through
the details of entitlement,


171
00:10:10,844 --> 00:10:12,980 line:-1
I'd love to welcome my colleague Garrett.


172
00:10:13,447 --> 00:10:18,785 line:0
Hi, my name is Garrett Cox, and I'm
a solutions engineer for the App Store.


173
00:10:18,852 --> 00:10:22,356 line:0
Michael described the subscriber journey,
and as we've seen,


174
00:10:22,422 --> 00:10:26,260 line:0
there are many potential states
a subscriber can encounter.


175
00:10:26,326 --> 00:10:30,597 line:0
The entitlement process needs
to account for these potential states.


176
00:10:30,664 --> 00:10:35,302 line:0
Let's start by defining the components
that make up subscription entitlement.


177
00:10:36,603 --> 00:10:41,642 line:-2
While access to content is the fundamental
basis of subscription entitlement,


178
00:10:41,708 --> 00:10:45,345 line:-2
the scope of access
will inevitably be broad.


179
00:10:45,412 --> 00:10:47,714 line:-1
Rather than just unlock content,


180
00:10:47,781 --> 00:10:51,685 line:-2
access might vary
based on geographical availability,


181
00:10:51,752 --> 00:10:54,388 line:-2
billing states
and unique levels of service.


182
00:10:54,955 --> 00:11:00,093 line:-2
Before we present products to the user,
we must determine whether they qualify.


183
00:11:00,160 --> 00:11:05,098 line:-2
This also applies to the upgrade
and downgrade options we might present.


184
00:11:05,165 --> 00:11:09,770 line:-2
How and when you display products
changes based on the user's eligibility


185
00:11:09,837 --> 00:11:13,440 line:-2
for discounted pricing
like free trials or offers.


186
00:11:14,775 --> 00:11:18,278 line:-2
The App Store determines
certain eligibility criteria,


187
00:11:18,345 --> 00:11:20,113 line:-1
such as for free trials,


188
00:11:20,180 --> 00:11:23,851 line:-2
but you can control eligibility
for subscription offers


189
00:11:23,917 --> 00:11:25,519 line:-1
based on your business needs.


190
00:11:26,520 --> 00:11:30,224 line:-2
Lastly, your messaging to the user
can be more meaningful


191
00:11:30,290 --> 00:11:33,193 line:-2
than simply communicating
an expiration date.


192
00:11:33,827 --> 00:11:36,697 line:-2
A tailored experience means
timely communication


193
00:11:36,763 --> 00:11:40,033 line:-2
of promotional messaging
or critical billing issues


194
00:11:40,100 --> 00:11:42,169 line:-2
which change throughout
the subscriber journey.


195
00:11:43,070 --> 00:11:46,607 line:-2
Given this definition
of subscription entitlement,


196
00:11:46,673 --> 00:11:49,142 line:-2
you're going to need to build
the server-side logic


197
00:11:49,209 --> 00:11:53,947 line:-2
which digests all of the subscription data
encompassing the subscriber journey.


198
00:11:54,648 --> 00:11:58,652 line:-2
For now, we'll be referring to this
as the entitlement engine.


199
00:11:59,486 --> 00:12:05,192 line:-2
This digested data is then used to
calculate the user's service entitlement.


200
00:12:05,259 --> 00:12:09,229 line:-2
The engine needs to support changes
to your subscription offering


201
00:12:09,296 --> 00:12:12,666 line:-2
as well as the billing states
a user might encounter.


202
00:12:13,834 --> 00:12:19,406 line:0
So more specifically, our engine takes
receipt data and any other app insights


203
00:12:19,473 --> 00:12:23,644 line:0
to calculate and respond
with correct entitlement info.


204
00:12:25,379 --> 00:12:28,982 line:-2
So before I walk through how we,
as subscription developers,


205
00:12:29,049 --> 00:12:32,419 line:-2
actually need to code
this entitlement engine,


206
00:12:32,486 --> 00:12:37,124 line:-2
I want to let you know that we will be
providing sample code in Node.js


207
00:12:37,191 --> 00:12:41,628 line:-2
in an article with this session
to represent the parts of this process


208
00:12:41,695 --> 00:12:45,232 line:-2
and help you get started
in building your entitlement engine.


209
00:12:45,299 --> 00:12:47,534 line:-1
For now, I'll be addressing these steps


210
00:12:47,601 --> 00:12:50,771 line:-2
as if we're building
this entitlement engine together.


211
00:12:51,972 --> 00:12:53,740 line:-1
Here's a more detailed overview


212
00:12:53,807 --> 00:12:57,911 line:-2
of what the entitlement process
looks like using our engine.


213
00:12:57,978 --> 00:13:01,582 line:-2
Subscription data, including receipts
and server notifications,


214
00:13:01,648 --> 00:13:03,817 line:-1
are passed into the engine.


215
00:13:03,884 --> 00:13:06,887 line:-1
The output is a simplified JSON payload


216
00:13:06,954 --> 00:13:10,524 line:-2
that you use to entitle service
and update your user database.


217
00:13:12,326 --> 00:13:17,598 line:-2
The app receipt is our source of truth
for inspecting transactional data,


218
00:13:17,664 --> 00:13:18,665 line:-1
so it's only fitting


219
00:13:18,732 --> 00:13:23,470 line:-2
our first step is to validate
the authenticity of each receipt.


220
00:13:23,537 --> 00:13:26,740 line:-2
This phase should include fetching
the newest receipt info


221
00:13:26,807 --> 00:13:29,309 line:-2
from the App Store's
verifyReceipt end point


222
00:13:29,376 --> 00:13:32,079 line:-2
if the receipt we are starting with
is out-of-date.


223
00:13:32,946 --> 00:13:35,616 line:-2
We want to ensure
we're making entitlement decisions


224
00:13:35,682 --> 00:13:39,086 line:-2
using up-to-date information
that isn't outdated.


225
00:13:40,220 --> 00:13:45,893 line:-2
Optionally, we can fetch from our systems
other relevant data or contextual details


226
00:13:45,959 --> 00:13:48,929 line:-2
unique to the subscriber
not found in the receipt.


227
00:13:49,963 --> 00:13:53,967 line:-2
If you're providing a subscription
across multiple apps or platforms,


228
00:13:54,034 --> 00:13:57,171 line:-2
this phase should include passing in
the subscriber's status


229
00:13:57,237 --> 00:14:01,241 line:-2
that exists outside of the app receipt
to ensure they aren't locked out


230
00:14:01,308 --> 00:14:04,011 line:-2
or presented with another subscription
to purchase.


231
00:14:04,978 --> 00:14:08,615 line:-2
Next, we'll synthesize the relevant data
we have gathered.


232
00:14:11,018 --> 00:14:14,121 line:-2
This phase is really
the powerhouse of the engine


233
00:14:14,188 --> 00:14:17,691 line:-2
because we want to condense
and convert the information we have


234
00:14:17,758 --> 00:14:19,526 line:-1
into actionable insight.


235
00:14:20,827 --> 00:14:25,232 line:-2
Given that information is interspersed
across multiple arrays and fields


236
00:14:25,299 --> 00:14:26,700 line:-1
in the in-app receipt,


237
00:14:26,767 --> 00:14:31,104 line:-2
like the latest_receipt_info array
and the pending_renewal_info array,


238
00:14:31,171 --> 00:14:33,674 line:-1
we want this process to thoroughly check


239
00:14:33,740 --> 00:14:36,977 line:-2
all of the relevant fields
that shape entitlement.


240
00:14:37,978 --> 00:14:40,914 line:-2
We want our logic to iterate
over the data,


241
00:14:40,981 --> 00:14:45,352 line:-2
building data objects that we will
eventually include in our final response.


242
00:14:46,153 --> 00:14:50,123 line:-2
Our focus here is to produce
and attach any key details


243
00:14:50,190 --> 00:14:55,162 line:-2
that will aid in determining where
in the subscriber journey a user might be.


244
00:14:55,963 --> 00:15:00,567 line:-2
So for example, we'll want to organize
the response by subscription product


245
00:15:00,634 --> 00:15:02,870 line:-1
and include essential information.


246
00:15:02,936 --> 00:15:06,707 line:-2
This key data is valuable
to any subscription service


247
00:15:06,773 --> 00:15:11,144 line:-2
like product ID, trial consumption
or expiration date.


248
00:15:11,211 --> 00:15:13,480 line:-2
We'll revisit the entitlement code
for now.


249
00:15:14,381 --> 00:15:18,018 line:-2
Additionally we can add insights
outside of the receipt


250
00:15:18,085 --> 00:15:21,588 line:-2
that still might influence
the entitlement process.


251
00:15:21,655 --> 00:15:23,757 line:-1
For example, hours watched


252
00:15:23,824 --> 00:15:26,960 line:-2
or an upcoming event
the subscriber might be interested in.


253
00:15:27,628 --> 00:15:31,131 line:-2
We've now condensed the data down
to the meaningful details


254
00:15:31,198 --> 00:15:35,068 line:-2
to distinguish one unique cohort
of subscribers from another.


255
00:15:35,536 --> 00:15:37,905 line:-1
At first the cohorts should be defined


256
00:15:37,971 --> 00:15:41,175 line:-2
to cover all the general subscription
billing states.


257
00:15:41,775 --> 00:15:44,978 line:-2
These separate cohorts
of subscriber states


258
00:15:45,045 --> 00:15:47,414 line:-1
will allow us to craft unique experiences


259
00:15:47,481 --> 00:15:51,251 line:-2
based on the location of the subscriber
in the journey.


260
00:15:52,886 --> 00:15:56,356 line:-2
As we organize the subscriber journey
into varying states,


261
00:15:56,423 --> 00:16:00,494 line:-2
we want to distinguish subscribers
within the states Michael enumerated.


262
00:16:01,395 --> 00:16:07,167 line:-2
So for this example, I'm simply assigning
unique values to each of those states.


263
00:16:07,234 --> 00:16:11,305 line:-2
These could be modified or enhanced
to fit the needs of your subscription.


264
00:16:13,207 --> 00:16:15,742 line:-2
And then I also do the same
with the substates


265
00:16:15,809 --> 00:16:18,979 line:-2
to add uniqueness
to the specific subscription products


266
00:16:19,046 --> 00:16:21,081 line:-1
by assigning them a decimal value.


267
00:16:22,516 --> 00:16:24,651 line:-1
This way, the combination of the two


268
00:16:24,718 --> 00:16:27,955 line:-2
can be paired together to represent
a range of cohorts.


269
00:16:28,755 --> 00:16:30,224 line:-1
For a simple approach,


270
00:16:30,290 --> 00:16:34,695 line:-2
the positive values represent cases
where we would unlock access,


271
00:16:34,761 --> 00:16:37,865 line:-2
and the negative values
represent subscription states


272
00:16:37,931 --> 00:16:41,768 line:-2
where the service wouldn't be provided
for a given product ID.


273
00:16:42,970 --> 00:16:47,941 line:-2
Even though we define generic access
with positive and negative values,


274
00:16:48,008 --> 00:16:52,579 line:-2
we can enhance the entitlement process
to pay attention to unique cohorts.


275
00:16:53,981 --> 00:16:55,382 line:-1
Combining these values,


276
00:16:55,449 --> 00:16:59,419 line:-2
we now have an entitlement code
to represent the state of a product.


277
00:16:59,486 --> 00:17:03,156 line:-2
We can send this value to the client
or store it server-side.


278
00:17:03,223 --> 00:17:05,592 line:-1
The code can be treated as a simple signal


279
00:17:05,659 --> 00:17:08,194 line:-2
to unlock the service
since it is positive.


280
00:17:08,262 --> 00:17:12,566 line:-2
Or in this example, the value
could be handled as a custom action


281
00:17:12,633 --> 00:17:16,569 line:-2
since its unique insight
represents an active subscriber


282
00:17:16,637 --> 00:17:20,540 line:-2
that has disabled auto-renew
during the free trial period.


283
00:17:23,544 --> 00:17:26,880 line:-2
Now that we've identified the cohort
of a subscriber,


284
00:17:26,946 --> 00:17:30,651 line:-2
we'll use that to determine
the entitlement info we want to include.


285
00:17:31,518 --> 00:17:35,656 line:-2
In this phase, we focus on generating
and attaching added data


286
00:17:35,722 --> 00:17:38,959 line:-2
that suits the unique cohort
of the subscriber.


287
00:17:39,860 --> 00:17:43,430 line:-2
This phase can also include
taking specific business actions


288
00:17:43,497 --> 00:17:45,766 line:-1
that apply to each unique cohort.


289
00:17:46,466 --> 00:17:47,634 line:-1
Here's how.


290
00:17:48,769 --> 00:17:52,139 line:-2
We built our response object
to contain the essential keys


291
00:17:52,206 --> 00:17:53,874 line:-1
we'll need for entitlement


292
00:17:54,441 --> 00:17:59,346 line:-2
and populated those keys with the values
pertaining to subscription entitlement.


293
00:17:59,413 --> 00:18:03,250 line:-2
We can take this representation
and, with a few statements,


294
00:18:03,317 --> 00:18:06,720 line:-2
tailor the entitlement
to cover complex states


295
00:18:06,787 --> 00:18:08,455 line:-1
like the ones Michael had mentioned.


296
00:18:09,690 --> 00:18:14,161 line:-2
So for the retention example where
the subscriber just disabled auto-renew...


297
00:18:15,329 --> 00:18:21,802 line:-2
an if statement including the entitlement
code 4.0 and the specific product


298
00:18:21,869 --> 00:18:26,673 line:0
can then be used to attach
a retention message or even an offer.


299
00:18:27,274 --> 00:18:30,244 line:-2
The nuanced state of Grace Period
Michael mentioned


300
00:18:30,310 --> 00:18:33,680 line:-2
must be used to unlock service
throughout the grace period,


301
00:18:33,747 --> 00:18:36,617 line:-2
but since we already have defined
this unique code,


302
00:18:36,683 --> 00:18:40,754 line:-2
we can use that state to add logic
covering the more niche action


303
00:18:40,821 --> 00:18:43,824 line:-2
to prompt the user to update
their billing information


304
00:18:43,891 --> 00:18:46,560 line:-2
in order to prevent
unwanted loss of service.


305
00:18:47,060 --> 00:18:50,497 line:-2
And since Grace Period is slightly
different than Billing Retry,


306
00:18:50,564 --> 00:18:54,234 line:-2
we can have a similar goal
of updating billing information


307
00:18:54,301 --> 00:18:56,670 line:-1
while providing limited access instead.


308
00:18:57,871 --> 00:19:01,508 line:-2
In this example,
we can use the entitlement info


309
00:19:01,575 --> 00:19:06,013 line:-2
to present a custom offer to the user
that has opted to cancel service.


310
00:19:06,813 --> 00:19:10,350 line:-2
Even for our loyal subscribers,
we can use this entitlement code,


311
00:19:10,417 --> 00:19:13,754 line:-2
the number of renewals
and the subscription group ID,


312
00:19:13,820 --> 00:19:16,557 line:-1
to suggest upgrading to an annual product.


313
00:19:17,758 --> 00:19:19,593 line:-1
So we've made it to the final step


314
00:19:19,660 --> 00:19:22,796 line:-2
and generated
all the necessary entitlement info.


315
00:19:23,797 --> 00:19:26,900 line:-2
We want to route this data
to update our database


316
00:19:26,967 --> 00:19:30,137 line:-2
so it accurately is synced
and representing the state of the user.


317
00:19:30,938 --> 00:19:35,075 line:-2
And if it was a user's device that
was requesting this entitlement data,


318
00:19:35,142 --> 00:19:38,812 line:-2
we should send this calculated data back
securely to the device.


319
00:19:38,879 --> 00:19:42,015 line:-2
Consider adding something
like a JSON Web Signature


320
00:19:42,082 --> 00:19:44,151 line:-1
to prove the data came from your server.


321
00:19:44,551 --> 00:19:48,388 line:-2
We just dove deep into crafting
the entitlement engine logic,


322
00:19:48,455 --> 00:19:49,690 line:-1
so now let's zoom out some


323
00:19:49,756 --> 00:19:54,194 line:-2
and get a sense of how to put the engine
to use within our system's architecture.


324
00:19:55,429 --> 00:19:57,264 line:-1
Let's keep in mind some essentials.


325
00:19:58,332 --> 00:20:00,767 line:-1
A highly available entitlement engine


326
00:20:00,834 --> 00:20:05,205 line:-2
will allow us to compute and respond
with the latest entitlement details


327
00:20:05,272 --> 00:20:07,207 line:-1
the moment a change happens.


328
00:20:07,641 --> 00:20:12,045 line:-2
This availability, paired with the
coverage of all the subscription states,


329
00:20:12,112 --> 00:20:16,683 line:-2
ensures we accurately entitle subscribers
with the proper experience.


330
00:20:17,618 --> 00:20:20,153 line:-2
While responding with accuracy
is the mission,


331
00:20:20,220 --> 00:20:25,192 line:-2
we want to position this process to be
fail-safe from unexpected circumstances.


332
00:20:26,193 --> 00:20:29,329 line:-2
And lastly, we've built our engine
in a manner


333
00:20:29,396 --> 00:20:32,199 line:-2
that we can leave room
to support future features


334
00:20:32,266 --> 00:20:36,236 line:-2
or changes to our subscription business
that may happen later on.


335
00:20:37,504 --> 00:20:41,074 line:-2
We've covered how to build the engine
to validate, authenticate


336
00:20:41,141 --> 00:20:44,578 line:-2
and properly entitle
for the subscription experience.


337
00:20:44,645 --> 00:20:50,184 line:-2
Here's an overview on how we can maximize
the engine in our server architecture.


338
00:20:51,318 --> 00:20:53,420 line:-1
This approach is really powerful,


339
00:20:53,487 --> 00:20:56,056 line:-2
even when just getting started
with subscriptions.


340
00:20:57,124 --> 00:21:02,029 line:-2
With just a basic implementation
that isn't using notifications or storage,


341
00:21:02,095 --> 00:21:06,633 line:-2
we can still support many of the
subscription features Apple has to offer,


342
00:21:06,700 --> 00:21:08,569 line:-1
like subscription offers.


343
00:21:08,635 --> 00:21:10,938 line:-2
Also, having this engine
running server-side


344
00:21:11,004 --> 00:21:13,841 line:-2
means any errors or updates
in our entitlement logic


345
00:21:13,907 --> 00:21:18,011 line:-2
can be fixed, tested with receipts
or mocked receipt data


346
00:21:18,078 --> 00:21:19,746 line:-1
and then quickly deployed.


347
00:21:19,813 --> 00:21:25,018 line:-2
That way, new inbound requests
will resolve to properly entitle access


348
00:21:25,085 --> 00:21:27,154 line:-1
without relying on a client update.


349
00:21:27,688 --> 00:21:31,925 line:-2
The catch here is that we need the devices
to be sending the receipts


350
00:21:31,992 --> 00:21:33,794 line:-1
to be processed in each request.


351
00:21:33,861 --> 00:21:35,996 line:-1
Without storing the receipt data,


352
00:21:36,063 --> 00:21:39,733 line:-2
we also won't have a way to support web
or other platforms,


353
00:21:39,800 --> 00:21:44,538 line:-2
but this approach is a promising start
and even a reasonable fallback


354
00:21:44,605 --> 00:21:47,708 line:-2
in the event that we have
some problems with our storage


355
00:21:47,774 --> 00:21:51,345 line:-2
or for some reason missed processing
App Store notifications.


356
00:21:52,246 --> 00:21:55,349 line:-1
But we can easily iterate from here.


357
00:21:55,415 --> 00:21:56,884 line:-1
By adding persistent storage,


358
00:21:56,950 --> 00:22:00,420 line:-2
it now becomes a matter of routing
the resulting entitlement info


359
00:22:00,487 --> 00:22:03,490 line:-2
and receipt data
to the persistent storage.


360
00:22:03,557 --> 00:22:06,760 line:-2
Getting over that hurdle means
we can then grant access


361
00:22:06,827 --> 00:22:09,463 line:-1
via the web and off-platform.


362
00:22:09,530 --> 00:22:11,732 line:-2
But at this point,
we should add an end point


363
00:22:11,798 --> 00:22:15,636 line:-2
to receive and process
the App Store Server notifications.


364
00:22:15,702 --> 00:22:17,571 line:-1
Our server can then be notified


365
00:22:17,638 --> 00:22:21,041 line:-2
the moment a change is made
to the subscription status


366
00:22:21,108 --> 00:22:24,278 line:-2
rather than status polling
the verifyReceipt end point.


367
00:22:25,312 --> 00:22:29,383 line:-2
With this implementation, we also have
multiple ways to support failure.


368
00:22:29,983 --> 00:22:32,753 line:-2
If notifications are missed
or not processed,


369
00:22:33,220 --> 00:22:37,257 line:-2
use the persistent storage receipt data
to maintain accuracy.


370
00:22:37,758 --> 00:22:42,796 line:-2
Even if our storage data is inaccurate,
we can update our entitlement logic.


371
00:22:42,863 --> 00:22:46,266 line:-2
That way we can route the data
directly to the entitlement engine


372
00:22:46,333 --> 00:22:49,903 line:-2
and entitle service until we resolve
the problems with our storage.


373
00:22:50,571 --> 00:22:53,574 line:-2
So if there's anything you take away
from this session,


374
00:22:53,941 --> 00:22:57,444 line:-2
it should be that building
a responsive entitlement process


375
00:22:57,511 --> 00:23:02,015 line:-2
will allow you to tailor to the complexity
of the subscriber experience.


376
00:23:03,083 --> 00:23:07,054 line:-2
From there you can then iterate
to better support the subscriber journey.


377
00:23:08,355 --> 00:23:12,392 line:-2
Thank you for attending this session,
and I hope you enjoy the rest of WWDC.

