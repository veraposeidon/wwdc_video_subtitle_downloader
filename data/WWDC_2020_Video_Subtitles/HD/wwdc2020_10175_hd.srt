1
00:00:03,871 --> 00:00:06,206 line:-1
Hello and welcome to WWDC.


2
00:00:08,242 --> 00:00:09,843 line:0
Hi. My name is LoÃ¯c Sander.


3
00:00:09,910 --> 00:00:12,145 line:0
I'm a type designer
on the Apple Design Team.


4
00:00:12,746 --> 00:00:14,248 line:-1
In this session, with my colleague Jiang,


5
00:00:14,314 --> 00:00:17,317 line:-2
we'll introduce you to the details
that matter for great UI Typography


6
00:00:17,384 --> 00:00:20,053 line:-2
and the tools that will allow you
to achieve that for your app.


7
00:00:20,654 --> 00:00:22,422 line:-1
Overall, all the topics we'll cover


8
00:00:22,489 --> 00:00:25,092 line:-2
are really about understanding
the dynamic behavior of text


9
00:00:25,158 --> 00:00:26,393 line:-1
on our platforms.


10
00:00:26,460 --> 00:00:28,529 line:-2
So first, I'll talk about about fonts
and their aspects


11
00:00:28,595 --> 00:00:30,297 line:-1
that are relevant to UI design.


12
00:00:30,731 --> 00:00:32,933 line:-2
Then Jiang will show you
around useful APIs


13
00:00:33,000 --> 00:00:36,603 line:-2
and best practices when dealing
with typographic styles and layout.


14
00:00:37,304 --> 00:00:38,305 line:-1
For most people,


15
00:00:38,372 --> 00:00:40,440 line:-2
dealing with type is
as simple as picking a font


16
00:00:40,507 --> 00:00:43,310 line:-2
and choosing a point size,
and it's really how it should be.


17
00:00:44,311 --> 00:00:46,013 line:-2
But with our first topic,
I'd like to show you


18
00:00:46,079 --> 00:00:49,583 line:-2
how changing the size of text
actually has many subtle consequences.


19
00:00:50,250 --> 00:00:54,121 line:-2
Learning about optical sizes is key
to a better understanding of legibility,


20
00:00:54,188 --> 00:00:56,690 line:-2
which is something
you should always try to care for.


21
00:00:57,724 --> 00:01:01,295 line:-2
Right after optical sizes,
I'll talk a bit about variable fonts.


22
00:01:01,361 --> 00:01:04,798 line:-2
This is a format that's letting us refine
the behavior of text on our platforms


23
00:01:04,864 --> 00:01:07,034 line:-2
and can improve the typography
of your apps too.


24
00:01:08,268 --> 00:01:10,971 line:-2
Then I'll get into a topic
that affects UI Design directly:


25
00:01:11,038 --> 00:01:12,539 line:-1
tracking and leading.


26
00:01:12,606 --> 00:01:14,374 line:-1
They're essential parts of text layout,


27
00:01:14,441 --> 00:01:17,578 line:-2
so it's definitely worth taking time
to become more familiar with them.


28
00:01:18,612 --> 00:01:22,316 line:-2
Last but not least, Jiang will delve into
Text styles and Dynamic Type.


29
00:01:22,382 --> 00:01:25,352 line:-2
Two of our core typographic tools
to achieve great UI design.


30
00:01:25,986 --> 00:01:28,655 line:-2
It'll be a refresher,
since some of those APIs are not new,


31
00:01:28,722 --> 00:01:31,158 line:-2
but we do also have
some updates on the topic.


32
00:01:31,225 --> 00:01:32,559 line:-1
So let's get started.


33
00:01:33,193 --> 00:01:35,028 line:0
To describe what optical sizes are,


34
00:01:35,095 --> 00:01:36,396 line:0
I'd like to go back a few years


35
00:01:36,463 --> 00:01:39,566 line:0
when our main system font, San Francisco,
was first designed.


36
00:01:39,633 --> 00:01:41,001 line:-1
Our team put a lot of effort


37
00:01:41,068 --> 00:01:44,004 line:-2
in making sure that SF
would look great at any point size.


38
00:01:44,071 --> 00:01:46,106 line:-2
And we achieved that
by introducing two variants


39
00:01:46,173 --> 00:01:47,774 line:-1
that you're probably familiar with.


40
00:01:47,841 --> 00:01:50,711 line:-2
We designed SF Text for small sizes
below 20 points


41
00:01:50,777 --> 00:01:53,080 line:-1
and SF Display for 20 points and above.


42
00:01:53,914 --> 00:01:56,216 line:-2
These variants
are what we call optical sizes.


43
00:01:57,551 --> 00:02:00,854 line:0
They allow us to better control
the details that affect legibility.


44
00:02:00,921 --> 00:02:03,957 line:0
For instance, the space between letters
in SF Text and Display


45
00:02:04,024 --> 00:02:06,793 line:0
is adapted to the fact that
one design will be used small


46
00:02:06,860 --> 00:02:08,195 line:0
and other one large.


47
00:02:10,097 --> 00:02:13,500 line:0
The vertical proportions between
the two designs also differ slightly,


48
00:02:13,567 --> 00:02:15,636 line:0
so that SF Text can appear
a little bit bigger


49
00:02:15,702 --> 00:02:17,037 line:0
at the same point size,


50
00:02:17,104 --> 00:02:19,540 line:0
and therefore being more legible
when used small.


51
00:02:20,741 --> 00:02:24,211 line:-2
When we introduced this design,
it felt like a small revolution,


52
00:02:24,278 --> 00:02:26,914 line:-2
but there's something amusing I find
about the word "revolution."


53
00:02:26,980 --> 00:02:29,449 line:-2
We usually assume
it means forward motion or progress,


54
00:02:29,516 --> 00:02:31,852 line:-2
when essentially
it means "going back to the start."


55
00:02:32,386 --> 00:02:33,387 line:-1
Because, you see,


56
00:02:33,453 --> 00:02:36,990 line:-2
optical sizes have been a thing
ever since typography was invented,


57
00:02:37,057 --> 00:02:39,793 line:-2
and remained a printing process
involving physical objects


58
00:02:39,860 --> 00:02:41,261 line:-1
that barely changed for centuries.


59
00:02:41,929 --> 00:02:45,566 line:-2
It is true that digital technology gave us
a lot more flexibility in handling text,


60
00:02:45,632 --> 00:02:48,802 line:-2
but in one way, it made typography
a bit more crude than it used to be.


61
00:02:49,203 --> 00:02:50,204 line:-1
So to make my point,


62
00:02:50,270 --> 00:02:53,073 line:-2
I'd like to show you optical sizes
in their natural habitat.


63
00:02:53,774 --> 00:02:54,875 line:-1
As a type and history nerd,


64
00:02:54,942 --> 00:02:57,811 line:-2
I happen to have this old book
from the 18th century at home.


65
00:02:57,878 --> 00:02:59,680 line:-1
This is what we call a type specimen.


66
00:02:59,746 --> 00:03:02,382 line:-2
It contains samples of typography
at various sizes,


67
00:03:02,449 --> 00:03:04,618 line:-1
of which I want to show you two examples.


68
00:03:04,685 --> 00:03:07,621 line:-2
In these pages, we have
the same design at a different size,


69
00:03:07,688 --> 00:03:10,724 line:-2
which is to say, two different fonts,
a bit like SF Text and Display.


70
00:03:11,158 --> 00:03:13,961 line:-2
They're about eight and 42 points
in today's printing units.


71
00:03:15,429 --> 00:03:18,131 line:-2
Now I'd like you to picture that
for each letter you see here,


72
00:03:18,198 --> 00:03:20,300 line:-2
there was a metallic stamp
of the exact same size


73
00:03:20,367 --> 00:03:21,602 line:-1
that was made by hand.


74
00:03:23,136 --> 00:03:25,339 line:-2
These so-called stamps
were designed through a process


75
00:03:25,405 --> 00:03:27,774 line:-2
that involved cutting letterforms
on punches of steel.


76
00:03:28,342 --> 00:03:31,645 line:-2
And these punches of steel were then used
at the start of the molding process,


77
00:03:31,712 --> 00:03:33,113 line:-1
that resulted in a sort,


78
00:03:33,180 --> 00:03:35,482 line:-2
which is what
these metallic stamps are actually called.


79
00:03:37,150 --> 00:03:38,919 line:0
Looking at the details
of these letterforms


80
00:03:38,986 --> 00:03:42,556 line:0
reveals how much this manual process
was influenced by physical scale.


81
00:03:43,123 --> 00:03:46,326 line:0
The eight-point letter looks rough
because of its smaller dimension,


82
00:03:46,393 --> 00:03:48,428 line:0
and that says something
about optical sizes:


83
00:03:48,495 --> 00:03:50,230 line:0
they're entangled with resolution.


84
00:03:51,999 --> 00:03:55,669 line:-2
Which, for people cutting punches,
meant designing against the challenges


85
00:03:55,736 --> 00:03:58,739 line:-2
of printing with metal and ink
on paper fibers,


86
00:03:58,805 --> 00:04:00,807 line:-2
while for us,
it means dealing with the challenges


87
00:04:00,874 --> 00:04:03,443 line:-2
of vector graphics being rasterized
on a pixel grid.


88
00:04:04,044 --> 00:04:06,380 line:-2
But regardless of the kind
of output you design for,


89
00:04:06,446 --> 00:04:10,317 line:-2
the changes in optical sizes are meant
to balance legibility and detail.


90
00:04:10,884 --> 00:04:13,020 line:-2
And I say this
as if they were independent,


91
00:04:13,086 --> 00:04:15,455 line:-1
but legibility is defined by the details.


92
00:04:15,856 --> 00:04:17,391 line:-1
As with SF Text and Display,


93
00:04:17,457 --> 00:04:19,760 line:-2
the key detail here
is the space between letters.


94
00:04:21,295 --> 00:04:22,629 line:-1
When type becomes smaller,


95
00:04:22,696 --> 00:04:24,831 line:-2
letters tend to need more
space between them,


96
00:04:24,898 --> 00:04:27,100 line:-2
so that they eye can
more easily tell them apart.


97
00:04:28,101 --> 00:04:31,371 line:-2
But there are more meaningful details
in the letterforms themselves, of course,


98
00:04:31,438 --> 00:04:34,508 line:-2
like the thinner parts of the letters
that sometimes need to become sturdier,


99
00:04:34,575 --> 00:04:36,143 line:-1
as the letters become smaller.


100
00:04:37,444 --> 00:04:39,847 line:-2
Then, some details might strike you
as accidents,


101
00:04:39,913 --> 00:04:42,683 line:-2
like the position of the dot
on the letter "i," for instance.


102
00:04:43,150 --> 00:04:44,818 line:-1
But that's intentionally done to make sure


103
00:04:44,885 --> 00:04:47,721 line:-2
an "i" won't be confused
with an "l" at small sizes.


104
00:04:48,522 --> 00:04:51,458 line:-2
Because the smaller a gap gets,
the easier it is to fill,


105
00:04:51,525 --> 00:04:53,160 line:-1
be it with ink or pixels.


106
00:04:54,962 --> 00:04:57,097 line:-1
So since relative size is relevant here,


107
00:04:57,164 --> 00:05:00,167 line:-2
let's observe our two initial words
at their intended scale ratio.


108
00:05:00,834 --> 00:05:03,937 line:-2
The difference between the two designs
now feels much less pronounced,


109
00:05:04,471 --> 00:05:06,240 line:-1
which is the purpose of optical sizes,


110
00:05:06,306 --> 00:05:08,675 line:-2
they balance legibility
with aesthetic qualities


111
00:05:08,742 --> 00:05:12,045 line:-2
to make the design feel comfortable
and consistent across scales.


112
00:05:12,746 --> 00:05:14,648 line:-1
And for people making font centuries ago,


113
00:05:14,715 --> 00:05:17,484 line:-2
adapting a design to its scale
was a fairly direct process,


114
00:05:17,551 --> 00:05:19,386 line:-1
since they always worked at actual size.


115
00:05:19,987 --> 00:05:20,988 line:-1
But on the other hand,


116
00:05:21,054 --> 00:05:24,057 line:-2
digital type design has been faced
with an unfortunate challenge.


117
00:05:25,659 --> 00:05:28,095 line:-2
Because you can scale
vector graphics infinitely,


118
00:05:28,161 --> 00:05:31,999 line:-2
virtually, all digital fonts only contain
a single drawing for each glyph.


119
00:05:32,599 --> 00:05:35,869 line:-2
So type designers have to pick
an ideal size to design for.


120
00:05:35,936 --> 00:05:38,906 line:-2
And that means that most fonts you use
were really meant to perform best


121
00:05:38,972 --> 00:05:40,174 line:-1
around a certain size.


122
00:05:41,975 --> 00:05:43,677 line:0
Of course,
type designers can always decide


123
00:05:43,744 --> 00:05:46,847 line:0
to create multiple fonts
adapted to multiple sizes,


124
00:05:46,914 --> 00:05:48,682 line:0
but it's not a decision we take lightly,


125
00:05:48,749 --> 00:05:50,951 line:0
because it's a lot more work,
and more importantly,


126
00:05:51,018 --> 00:05:53,620 line:0
it becomes a font family
that's less convenient to use.


127
00:05:54,555 --> 00:05:58,225 line:-2
So when SF was initially designed,
we considered that very carefully,


128
00:05:58,292 --> 00:06:01,828 line:-2
and we eventually decided on having
optical sizes but just two of them.


129
00:06:03,197 --> 00:06:05,599 line:-2
For us, this decision
was a bit easier to make,


130
00:06:05,666 --> 00:06:08,302 line:-2
because the OS could switch
between designs automatically.


131
00:06:08,769 --> 00:06:11,271 line:-2
Then we embraced the need
to teach everyone about the existence


132
00:06:11,338 --> 00:06:12,873 line:-1
of SF Text and SF Display.


133
00:06:13,774 --> 00:06:16,977 line:-2
And for years now, that's pretty much been
the state of the art on our platforms,


134
00:06:17,044 --> 00:06:19,746 line:-2
but we kept wishing
we could refine this behavior more.


135
00:06:20,414 --> 00:06:21,648 line:-1
After all, wouldn't it be great


136
00:06:21,715 --> 00:06:24,885 line:-2
if a single font would automatically adapt
to each size you picked


137
00:06:24,952 --> 00:06:27,387 line:-2
without you having to switch
between Text and Display?


138
00:06:28,155 --> 00:06:30,791 line:-2
Well, that's exactly what became possible
a few years ago.


139
00:06:31,491 --> 00:06:33,994 line:-1
Variable fonts were introduced in 2016,


140
00:06:34,061 --> 00:06:36,363 line:-2
as an evolution
of the OpenType specification.


141
00:06:37,231 --> 00:06:40,801 line:-2
The spec was updated in response
to the increased popularity of web fonts,


142
00:06:40,868 --> 00:06:43,504 line:-2
and the fact that this technology
was really testing the limits


143
00:06:43,570 --> 00:06:44,838 line:-1
of existing font formats.


144
00:06:45,639 --> 00:06:48,809 line:-2
The format fundamentally changes
the way glyphs are stored in a font.


145
00:06:49,309 --> 00:06:52,179 line:-2
A glyph is no longer limited
to being a single static drawing,


146
00:06:52,246 --> 00:06:54,381 line:-2
it can also describe
the way each point moves


147
00:06:54,448 --> 00:06:56,416 line:-1
to produce a related but different glyph.


148
00:06:57,284 --> 00:07:00,287 line:-2
Each of these motions, or deltas,
are tied to design axes


149
00:07:00,354 --> 00:07:02,322 line:-1
that let software control their behavior.


150
00:07:03,657 --> 00:07:06,493 line:-2
Among these axes, there is one
that is of particular interest to us,


151
00:07:06,560 --> 00:07:09,596 line:-2
because it is dedicated
to the implementation of optical sizes.


152
00:07:10,197 --> 00:07:13,967 line:-2
This has allowed us to update SF Pro
and refine our existing optical sizes,


153
00:07:14,535 --> 00:07:16,937 line:-2
but this new dynamic behavior
really shows its potential


154
00:07:17,004 --> 00:07:18,839 line:-1
with our system serif, New York,


155
00:07:18,906 --> 00:07:21,608 line:-2
where the different adaptations to size
are much more noticeable.


156
00:07:23,477 --> 00:07:25,145 line:-1
Thanks to variable optical sizes,


157
00:07:25,212 --> 00:07:28,949 line:-2
we're now able to design typefaces
that can adapt to scale perfectly.


158
00:07:29,449 --> 00:07:32,886 line:-2
And coming full circle, we're recovering
what was good about physical type.


159
00:07:34,321 --> 00:07:35,322 line:-1
This is why, this year,


160
00:07:35,389 --> 00:07:38,192 line:-2
we're starting to move away
from optical sizes as separate fonts.


161
00:07:38,258 --> 00:07:42,129 line:-2
And it's not just optical sizes that are
now merged together but weights too.


162
00:07:43,197 --> 00:07:44,464 line:-1
This means that from now on,


163
00:07:44,531 --> 00:07:47,901 line:-2
most of our system fonts will be
downloadable as single variable fonts.


164
00:07:48,468 --> 00:07:49,469 line:-1
This being said,


165
00:07:49,536 --> 00:07:52,406 line:-2
we'll still publish Text and Display fonts
this year to ease the transition.


166
00:07:53,674 --> 00:07:57,211 line:-2
In design tools, you should expect
to find new controls for variable fonts.


167
00:07:57,277 --> 00:08:00,547 line:-2
Mostly in the form of sliders
that will expose a font's public axes.


168
00:08:02,249 --> 00:08:03,984 line:-2
But note that
they are an optional control.


169
00:08:04,051 --> 00:08:08,021 line:-2
You can still use that font the usual way
through its predefined instances.


170
00:08:08,088 --> 00:08:10,224 line:-2
In fact, when you're working
with our system fonts,


171
00:08:10,290 --> 00:08:12,993 line:-2
it's usually best
to keep to these predefined instances.


172
00:08:14,494 --> 00:08:17,097 line:-2
If the variable font you're using
supports optical sizes,


173
00:08:17,164 --> 00:08:18,665 line:-1
you can look for a dedicated slider


174
00:08:18,732 --> 00:08:21,802 line:-2
that will cover
a specific range of point sizes.


175
00:08:21,869 --> 00:08:25,439 line:-2
In principle, design apps should take care
of keeping the value of that slider


176
00:08:25,506 --> 00:08:27,474 line:-1
in sync with the point size you're using.


177
00:08:28,876 --> 00:08:31,144 line:-2
But it's not always the case,
and depending on the app,


178
00:08:31,211 --> 00:08:34,248 line:-2
changing the point size
may not automatically update the control.


179
00:08:35,749 --> 00:08:39,052 line:-2
So if you notice the point size you use
doesn't match the value on the slider,


180
00:08:39,119 --> 00:08:41,087 line:-1
then you need to set the slider yourself.


181
00:08:42,556 --> 00:08:44,591 line:-2
And it's totally okay
if the point size you're using


182
00:08:44,658 --> 00:08:46,126 line:-1
is out of range of the slider.


183
00:08:46,193 --> 00:08:48,729 line:-2
Just set the slider
at the closest value you can.


184
00:08:49,129 --> 00:08:51,465 line:-2
If you're using a design tool
on a previous OS,


185
00:08:51,532 --> 00:08:54,701 line:-2
it is possible that variable fonts
won't work as expected.


186
00:08:54,768 --> 00:08:56,537 line:-1
In that case, it is safer to revert


187
00:08:56,603 --> 00:08:59,106 line:-2
using the separate optical sizes
we still provide,


188
00:08:59,173 --> 00:09:00,807 line:-1
like SF Text and Display.


189
00:09:02,009 --> 00:09:04,411 line:-2
In code,
this behavior is entirely automatic.


190
00:09:04,478 --> 00:09:08,148 line:-2
We take care of keeping the optical size
and point size values in sync.


191
00:09:08,215 --> 00:09:09,950 line:-2
This applies to our system fonts,
of course,


192
00:09:10,017 --> 00:09:12,853 line:-2
but also to any custom
variable font you might use,


193
00:09:12,920 --> 00:09:15,322 line:-1
as long as it has an optical size axis.


194
00:09:16,190 --> 00:09:18,292 line:-2
So after catching up
with the latest developments


195
00:09:18,358 --> 00:09:19,927 line:-1
in size-specific typography,


196
00:09:19,993 --> 00:09:22,930 line:-2
I'd like to touch on two fundamentals
of UI text layout:


197
00:09:22,996 --> 00:09:23,997 line:-1
tracking and leading.


198
00:09:25,365 --> 00:09:29,503 line:-2
Tracking is an essential part of how
we achieve great size-specific typography.


199
00:09:29,570 --> 00:09:31,672 line:-2
I've just discussed optical sizes
at length,


200
00:09:31,738 --> 00:09:33,707 line:-1
but there is one thing I didn't mention,


201
00:09:33,774 --> 00:09:35,809 line:-2
and that's the fact
that optical sizes work better


202
00:09:35,876 --> 00:09:37,778 line:-1
when you pair them with tracking.


203
00:09:37,845 --> 00:09:39,479 line:-1
But first, what do I mean by tracking?


204
00:09:40,514 --> 00:09:43,450 line:-2
Well, let's start by looking
at the glyphs of a font first.


205
00:09:43,517 --> 00:09:46,186 line:-2
They already incorporate
a certain amount of space in them.


206
00:09:47,321 --> 00:09:49,590 line:-2
And that space
is what we call "side bearings."


207
00:09:49,656 --> 00:09:53,360 line:-2
It is designed as the glyphs are drawn
and defines the default spacing of text.


208
00:09:55,529 --> 00:09:58,899 line:-2
But as I pointed out earlier,
text requires letter-spacing to vary


209
00:09:58,966 --> 00:10:01,368 line:-2
so it can always look good
at any point size.


210
00:10:03,103 --> 00:10:05,672 line:-2
And when you do that,
and compensate that initial space,


211
00:10:05,739 --> 00:10:07,174 line:-1
that's what we call "tracking."


212
00:10:07,708 --> 00:10:10,911 line:-2
It is somewhat synonymous
with letter-spacing, as in CSS,


213
00:10:10,978 --> 00:10:14,047 line:-2
but tracking specifically
refers to the action of adding space


214
00:10:14,114 --> 00:10:15,582 line:-1
between glyphs in text layout.


215
00:10:16,783 --> 00:10:19,086 line:-2
Now, I'm sure some of you were puzzled
by what I just said,


216
00:10:19,152 --> 00:10:21,555 line:-2
and thought,
"Wait, I thought this was kerning."


217
00:10:23,190 --> 00:10:26,426 line:-2
The confusion is common, but tracking
and kerning are different things.


218
00:10:27,961 --> 00:10:29,696 line:-1
Kerning is a micro-correction of spacing


219
00:10:29,763 --> 00:10:31,865 line:-2
that is only applied
between certain pairs.


220
00:10:32,432 --> 00:10:34,468 line:-1
Kerning is also created by type designers,


221
00:10:34,535 --> 00:10:37,571 line:-2
and the vast majority of times,
you shouldn't need to modify it at all.


222
00:10:38,805 --> 00:10:39,907 line:-1
But back to tracking,


223
00:10:39,973 --> 00:10:42,376 line:-2
let me show you how and why
we use it with SF.


224
00:10:43,877 --> 00:10:46,747 line:0
Even when you're designing fonts
with size-specific spacing


225
00:10:46,813 --> 00:10:48,882 line:0
like we did for SF Texts and Display,


226
00:10:48,949 --> 00:10:51,952 line:0
it's still good to use tracking
if you want to achieve fine-tuned results.


227
00:10:53,487 --> 00:10:54,521 line:0
With no tracking,


228
00:10:54,588 --> 00:10:57,224 line:0
the difference in native spacing
between SF Text and Display


229
00:10:57,291 --> 00:11:00,894 line:0
would have been an issue when we switched
from one font to the other at 20 points.


230
00:11:02,496 --> 00:11:04,865 line:0
Notice how the last blue
and first orange lines


231
00:11:04,932 --> 00:11:06,733 line:0
are almost the same length,


232
00:11:06,800 --> 00:11:08,702 line:0
in spite of their difference
in point size.


233
00:11:10,404 --> 00:11:12,739 line:0
That's because of
their default spacing being different,


234
00:11:12,806 --> 00:11:15,342 line:0
and that abrupt change is the reason
why we use tracking


235
00:11:15,409 --> 00:11:16,710 line:0
with our optical sizes.


236
00:11:17,711 --> 00:11:20,514 line:0
It really is an essential part
of the behavior of system fonts


237
00:11:20,581 --> 00:11:22,616 line:0
and the reason
why we publish tracking tables


238
00:11:22,683 --> 00:11:24,618 line:0
as part of the Apple Design Resources.


239
00:11:25,586 --> 00:11:29,089 line:0
Because if you want to accurately
reproduce a system font's behavior,


240
00:11:29,156 --> 00:11:32,292 line:0
you need to know how much tracking
to apply for each point size.


241
00:11:33,260 --> 00:11:35,495 line:0
This year, with SF Pro
becoming a variable font,


242
00:11:35,562 --> 00:11:37,998 line:0
there is no hard break
around 20 points anymore


243
00:11:38,065 --> 00:11:42,102 line:0
and the design now transitions from Text
to Display between 17 and 28 points.


244
00:11:43,537 --> 00:11:45,639 line:-2
Because of that underlying change
in behavior,


245
00:11:45,706 --> 00:11:47,941 line:-1
we've had to update the tracking tables.


246
00:11:48,008 --> 00:11:50,811 line:-2
So note that when you're using
the new SF Pro in your design comps,


247
00:11:50,878 --> 00:11:52,880 line:-2
you'll need to apply
a new set of tracking values


248
00:11:52,946 --> 00:11:55,115 line:-1
between 17 and 28 points.


249
00:11:56,083 --> 00:11:57,684 line:0
But while we're looking
at tracking curves,


250
00:11:57,751 --> 00:11:59,786 line:0
there's one last thing
I'd like to point out.


251
00:11:59,853 --> 00:12:02,256 line:0
A font can actually contain
multiple tracking tables,


252
00:12:02,322 --> 00:12:04,024 line:0
and we've used that to add tracking values


253
00:12:04,091 --> 00:12:06,460 line:0
that can help with the tightening
of strings, for instance.


254
00:12:07,427 --> 00:12:10,197 line:-2
So say you were in that tricky situation
with a truncated string.


255
00:12:11,398 --> 00:12:13,166 line:-2
You might reach
for this very common solution


256
00:12:13,233 --> 00:12:14,868 line:-1
using the kerning API,


257
00:12:14,935 --> 00:12:18,105 line:-2
but as I pointed out earlier,
using kerning here is not ideal.


258
00:12:19,473 --> 00:12:21,241 line:-2
It would be better
to use the tracking API,


259
00:12:21,308 --> 00:12:22,943 line:-2
because it's semantically correct,
for one,


260
00:12:23,010 --> 00:12:26,847 line:-2
but more importantly, it allows the OS
to deactivate typographic features


261
00:12:26,914 --> 00:12:29,516 line:-2
that can clash with tracking,
such as ligatures.


262
00:12:31,218 --> 00:12:35,322 line:-2
Because if you're tracking out a word that
contains ligature, with a kerning API,


263
00:12:35,389 --> 00:12:38,258 line:-2
that ligature remains
and breaks the rhythm of the word.


264
00:12:38,325 --> 00:12:40,294 line:-1
On the other hand, with the tracking API,


265
00:12:40,360 --> 00:12:42,696 line:-2
we take of de-assembling
that ligature for you,


266
00:12:42,763 --> 00:12:44,598 line:-1
which makes that word spacing more even.


267
00:12:46,400 --> 00:12:48,936 line:-2
However, the best and preferred solution
to make a string fit


268
00:12:49,002 --> 00:12:51,471 line:-2
is to allow it
to be tightened automatically.


269
00:12:51,538 --> 00:12:53,540 line:-2
And that's when we use
the tight tracking table.


270
00:12:54,508 --> 00:12:57,611 line:-2
With this API, the system
will try to make a string fit


271
00:12:57,678 --> 00:13:00,113 line:-2
within a range
that's reasonable for legibility,


272
00:13:00,180 --> 00:13:02,516 line:-2
because there is such a thing
as too much tracking.


273
00:13:03,150 --> 00:13:06,386 line:-2
And for those cases, it's just better
to let things truncate.


274
00:13:07,654 --> 00:13:11,258 line:-2
One last reason to use this API
is that it applies size-specific tracking,


275
00:13:11,325 --> 00:13:14,428 line:-2
which you would have to implement manually
if you applied tracking on your own.


276
00:13:16,029 --> 00:13:18,398 line:-2
Okay, so let me wrap up
on the topic of tracking


277
00:13:18,465 --> 00:13:19,867 line:-1
with a little announcement.


278
00:13:20,300 --> 00:13:23,237 line:-2
This year, we're enabling tracking
for third-party fonts.


279
00:13:25,105 --> 00:13:27,774 line:-2
This means that font vendors
can start adding tracking tables


280
00:13:27,841 --> 00:13:28,976 line:-1
to their own fonts.


281
00:13:29,309 --> 00:13:31,912 line:-2
That embedded tracking
will be applied on our platforms,


282
00:13:31,979 --> 00:13:34,515 line:-2
provided that the font
also contains a STAT table.


283
00:13:36,817 --> 00:13:40,254 line:-2
Such fonts can also be used
with their tracking data on older OSs


284
00:13:40,320 --> 00:13:42,756 line:-2
if you apply
the CTFont optical size attribute.


285
00:13:44,858 --> 00:13:47,160 line:0
All right, so we've looked
at the space between glyphs,


286
00:13:47,227 --> 00:13:50,764 line:0
but let's now consider another kind
of typographic space: between lines.


287
00:13:52,332 --> 00:13:54,868 line:0
Here again, I'd like to propose
a vocabulary interlude


288
00:13:54,935 --> 00:13:56,904 line:0
to disambiguate two terms.


289
00:13:56,970 --> 00:13:58,605 line:0
So let's first talk about line height.


290
00:14:00,140 --> 00:14:03,477 line:0
By default, line height
is the height of font's vertical limits.


291
00:14:03,544 --> 00:14:06,180 line:0
You can also measure it
as the distance between to baselines,


292
00:14:06,246 --> 00:14:09,183 line:0
but regardless of the approach,
the distance remains the same.


293
00:14:10,317 --> 00:14:12,653 line:0
Now when the distance
between two lines increases,


294
00:14:12,719 --> 00:14:14,922 line:0
the space between them
is referred to as "leading."


295
00:14:16,323 --> 00:14:17,758 line:-1
And if trivia helps your memory,


296
00:14:17,824 --> 00:14:19,593 line:-1
the name comes from the days of metal type


297
00:14:19,660 --> 00:14:22,129 line:-2
when this gap corresponded
to an actual piece of lead


298
00:14:22,196 --> 00:14:23,597 line:-1
between two lines of text.


299
00:14:25,299 --> 00:14:28,669 line:0
One important thing to note here is that
when there is leading between lines,


300
00:14:28,735 --> 00:14:30,671 line:0
the line height includes the leading.


301
00:14:30,737 --> 00:14:34,374 line:0
So the two concepts are dependent.
If you change one, you change the other.


302
00:14:35,943 --> 00:14:37,978 line:-2
Most of the time,
you don't need to concern yourself


303
00:14:38,045 --> 00:14:39,112 line:-1
with leading or line height,


304
00:14:39,179 --> 00:14:42,282 line:-2
because we've already defined them
in most of our UI components.


305
00:14:42,349 --> 00:14:45,786 line:-2
But let me show you two examples
in which we do modify leading.


306
00:14:47,921 --> 00:14:49,489 line:-1
The Arabic script is a writing system


307
00:14:49,556 --> 00:14:51,892 line:-2
that can feature a lot
of ascending and descending parts.


308
00:14:52,292 --> 00:14:55,662 line:-2
And on a given line, they can encroach
on the visual space of surrounding lines,


309
00:14:56,230 --> 00:14:59,700 line:-2
So it's usually beneficial
to add some leading in such situations.


310
00:15:01,168 --> 00:15:03,871 line:-2
For that reason, we're made our platforms
apply more leading


311
00:15:03,937 --> 00:15:07,107 line:-2
for Arabic and other locales
that benefit from a taller line height.


312
00:15:10,077 --> 00:15:12,980 line:-2
On the other hand, it's sometimes helpful
to tighten the leading,


313
00:15:13,046 --> 00:15:14,815 line:-1
and make things more vertically compact.


314
00:15:15,516 --> 00:15:18,452 line:-2
On watchOS, for instance,
we apply tight leading in many places,


315
00:15:18,519 --> 00:15:21,421 line:-2
to maximize the amount of information
that can be shown onscreen.


316
00:15:22,923 --> 00:15:25,492 line:-2
Such modifications are done
through the use of text styles


317
00:15:25,559 --> 00:15:27,361 line:-1
that Jiang will be covering next.


318
00:15:28,729 --> 00:15:31,365 line:-2
These two examples provide
a good closing demonstration


319
00:15:31,431 --> 00:15:34,568 line:-2
of how we strive to design our APIs
and typographic features.


320
00:15:35,202 --> 00:15:37,104 line:-1
By using preexisting system APIs,


321
00:15:37,171 --> 00:15:38,906 line:-2
you'll benefit from
the design improvements


322
00:15:38,972 --> 00:15:40,174 line:-1
we're making each year.


323
00:15:40,240 --> 00:15:41,441 line:-1
As for the new ones,


324
00:15:41,508 --> 00:15:43,844 line:-2
we try and make it easy for you
to consider adopting them,


325
00:15:43,911 --> 00:15:46,180 line:-2
which allows your app
to become better with time.


326
00:15:46,246 --> 00:15:49,683 line:-2
This gives me the perfect opportunity now
to hand off to Jiang.


327
00:15:49,750 --> 00:15:52,386 line:-2
He will show you more about
the powerful font and text APIs


328
00:15:52,452 --> 00:15:53,720 line:-1
we have for you to use.


329
00:15:54,621 --> 00:15:55,889 line:-1
Thank you, LoÃ¯c.


330
00:15:55,956 --> 00:16:01,028 line:-2
Okay, after an excursion
into the finer details of typography,


331
00:16:01,094 --> 00:16:03,797 line:0
let's talk about text styles
and Dynamic Type,


332
00:16:03,864 --> 00:16:05,499 line:0
two important system tools


333
00:16:05,566 --> 00:16:10,070 line:0
that will help you create beautiful
and consistent typography in your apps.


334
00:16:11,438 --> 00:16:15,075 line:-2
Text styles are at the core
of how we build great UIs at Apple.


335
00:16:15,142 --> 00:16:19,880 line:-2
They provide a framework that enables
flexible and consistent typography


336
00:16:19,947 --> 00:16:21,548 line:-1
with a clear hierarchy


337
00:16:21,615 --> 00:16:25,152 line:-2
and enough stylistic range
to cover most UI needs.


338
00:16:26,553 --> 00:16:29,590 line:-2
Text styles are
a set of predefined combinations


339
00:16:29,656 --> 00:16:34,928 line:-2
of a system font weight,
a point size value and a leading value.


340
00:16:34,995 --> 00:16:38,532 line:-2
They are built in a system
that provides typographic hierarchy


341
00:16:38,599 --> 00:16:43,670 line:-2
and makes it easier for you to achieve
clear and legible layouts in your apps.


342
00:16:45,506 --> 00:16:46,507 line:-1
First of all,


343
00:16:46,573 --> 00:16:50,477 line:-2
while the text styles defined
offer a wide range of font sizes


344
00:16:50,544 --> 00:16:52,913 line:-1
to represent the information hierarchy,


345
00:16:52,980 --> 00:16:57,751 line:-2
sometimes the sizes alone are not enough
to highlight more subtle differences.


346
00:16:59,253 --> 00:17:02,523 line:-2
Like here, the header of the year
and month in Calendar.


347
00:17:03,423 --> 00:17:06,026 line:-2
You can see they are using
a heavier weight


348
00:17:06,093 --> 00:17:07,994 line:-1
from the standard text styles.


349
00:17:08,060 --> 00:17:09,829 line:-1
Emphasized text styles like these


350
00:17:09,896 --> 00:17:14,867 line:-2
allow you to use the same text style sizes
with a different weight.


351
00:17:14,935 --> 00:17:18,005 line:-1
This is widely used by our system apps.


352
00:17:18,070 --> 00:17:22,376 line:-2
And of course, you have seen this,
the large title navigation bar in Mail.


353
00:17:22,442 --> 00:17:25,846 line:-2
This is using
the emphasized large title text style.


354
00:17:25,913 --> 00:17:29,283 line:-2
Now I'm going to show you
how to use it in your own app.


355
00:17:30,584 --> 00:17:34,688 line:-2
Let's say we have a label
using the title1 font.


356
00:17:34,755 --> 00:17:37,491 line:-2
I've found the title needs
a little bit more punch,


357
00:17:37,558 --> 00:17:39,760 line:-1
so why not use a bold weight?


358
00:17:39,826 --> 00:17:43,130 line:-1
Well, emphasized title1 is exactly that.


359
00:17:44,965 --> 00:17:49,670 line:-2
Here, instead of using the UIFont
preferredFont(withTextStyle:) API,


360
00:17:49,736 --> 00:17:52,306 line:-1
we are using the UIFontDescriptor API


361
00:17:52,372 --> 00:17:55,475 line:-2
to get the descriptor
with title1 text style,


362
00:17:55,542 --> 00:17:58,378 line:-2
and then we apply
a bold symbolic trait to it.


363
00:17:58,445 --> 00:18:02,182 line:-2
With the bold trait, you are getting
emphasized title1 text style,


364
00:18:02,249 --> 00:18:04,318 line:-1
which maps to SF Pro Bold.


365
00:18:05,886 --> 00:18:12,326 line:-2
You can apply bold symbolic trait
to any NSFont, UIFont or SwiftUI font


366
00:18:16,163 --> 00:18:19,032 line:-2
While the name of that symbolic trait
is "bold,"


367
00:18:19,099 --> 00:18:23,070 line:-2
but the actual weight of the variant
depends on the text style.


368
00:18:23,136 --> 00:18:26,974 line:-2
It can be medium, semibold, bold,
or heavy.


369
00:18:27,841 --> 00:18:29,343 line:-1
As we talked about earlier,


370
00:18:29,409 --> 00:18:32,946 line:-2
text styles come with line heights
that we found to be appropriate


371
00:18:33,013 --> 00:18:34,882 line:-1
for most of the cases.


372
00:18:34,948 --> 00:18:38,218 line:-2
However, sometimes you are working
with a more constrained space,


373
00:18:38,285 --> 00:18:42,990 line:-2
so saving spaces between lines
can increase the information density.


374
00:18:43,056 --> 00:18:46,226 line:-1
An example here is the Fitness app.


375
00:18:46,293 --> 00:18:49,429 line:-1
Or when presenting a large amount of text,


376
00:18:49,496 --> 00:18:52,766 line:-2
you might want to give the content
a bit more breathing room


377
00:18:52,833 --> 00:18:56,737 line:-2
to improve the reading experience,
like here with Maps.


378
00:18:56,803 --> 00:19:02,576 line:-2
In those cases, you can use the tight
and loose leading variants of text styles.


379
00:19:02,643 --> 00:19:08,582 line:-2
In iOS and macOS, tight leading
decreases the line height by two points,


380
00:19:08,649 --> 00:19:12,853 line:-2
while loose leading
increases the line spacing by two points.


381
00:19:12,920 --> 00:19:16,323 line:0
In watchOS,
the adjustment is reduced to one point.


382
00:19:17,925 --> 00:19:19,826 line:-1
Now, in this case,


383
00:19:19,893 --> 00:19:22,095 line:-2
we have a long paragraph of text
like this,


384
00:19:22,162 --> 00:19:25,065 line:-1
and it is using the body text style.


385
00:19:25,132 --> 00:19:28,101 line:-1
For now it has 22-point line height,


386
00:19:28,168 --> 00:19:30,337 line:-1
and let's just say we want to experiment


387
00:19:30,404 --> 00:19:33,407 line:-2
and see how it would look like
with a tighter line height.


388
00:19:34,041 --> 00:19:36,510 line:-1
I think you're now getting the hang of it.


389
00:19:36,577 --> 00:19:39,479 line:-2
Once we apply
the tight leading symbolic trait,


390
00:19:39,546 --> 00:19:41,248 line:-1
the text will look like this.


391
00:19:41,315 --> 00:19:43,784 line:-2
There we go.
Now it has 20 points of line height.


392
00:19:43,851 --> 00:19:49,056 line:-2
But that does seem to be too tight
for such a long paragraph of text.


393
00:19:49,122 --> 00:19:52,326 line:-2
So, what about loose leading?
How would that look?


394
00:19:52,392 --> 00:19:57,030 line:-2
Now let's try the loose leading trait
to get 24 points of line height.


395
00:19:57,097 --> 00:19:59,900 line:-1
Okay, that does look much better.


396
00:19:59,967 --> 00:20:03,770 line:-2
So it is actually very similar
to what we just covered


397
00:20:03,837 --> 00:20:05,772 line:-1
with the emphasized variants.


398
00:20:05,839 --> 00:20:09,009 line:-2
Only this time,
we are using the tight leading


399
00:20:09,076 --> 00:20:11,211 line:-1
and loose leading symbolic traits.


400
00:20:11,278 --> 00:20:12,913 line:0
And new in this year,


401
00:20:12,980 --> 00:20:17,217 line:0
you can do leading adjustments
for text style fonts in SwiftUI as well.


402
00:20:18,519 --> 00:20:19,786 line:-1
Throughout the system,


403
00:20:19,853 --> 00:20:23,524 line:-2
we have used New York
and SF Pro Rounded in our apps,


404
00:20:23,590 --> 00:20:27,127 line:-2
like here with the Books
and Reminders app.


405
00:20:27,194 --> 00:20:31,565 line:-2
But it is worth noticing that they
don't just work as stand-alone typefaces,


406
00:20:31,632 --> 00:20:35,035 line:-2
they work really well
with our text styles too.


407
00:20:35,102 --> 00:20:39,573 line:-2
Now, let's say we want to build a label
just like Reminders.


408
00:20:39,640 --> 00:20:43,677 line:-2
Let's combine what we just learned
about emphasized text style.


409
00:20:43,744 --> 00:20:46,613 line:-1
We start with a text such as "Today,"


410
00:20:46,680 --> 00:20:49,183 line:-2
and using
emphasized large title text style.


411
00:20:50,284 --> 00:20:52,786 line:-1
For now it's using SF Pro Bold.


412
00:20:54,855 --> 00:21:00,294 line:-2
Let's try to apply rounded design
using the fontDescriptorwithDesign API.


413
00:21:00,360 --> 00:21:04,665 line:-2
You can see now the font has switched
to SF Pro Rounded.


414
00:21:06,233 --> 00:21:08,702 line:-2
So, we have introduced
a really flexible API


415
00:21:08,769 --> 00:21:12,339 line:-2
to allow you to apply these designs
to any system UI fonts.


416
00:21:13,307 --> 00:21:17,845 line:-2
For AppKit and UIKit,
the fontDescriptorwithDesign API


417
00:21:17,911 --> 00:21:19,780 line:-1
can be applied to any UI font.


418
00:21:21,381 --> 00:21:24,351 line:0
For SwiftUI,
the API is a little bit different.


419
00:21:24,418 --> 00:21:28,322 line:0
You should pass the design
when constructing a font to begin with,


420
00:21:28,388 --> 00:21:32,125 line:0
instead of using a modifier
to convert an existing font.


421
00:21:33,126 --> 00:21:35,629 line:0
When picking a text style with a design,


422
00:21:35,696 --> 00:21:38,866 line:0
everything else besides the design
stays the same,


423
00:21:38,932 --> 00:21:42,703 line:0
including font size, weight
and line height.


424
00:21:42,769 --> 00:21:48,175 line:-2
I know many of you work with web pages
or have web views embedded in your app.


425
00:21:48,242 --> 00:21:49,610 line:-1
A few years ago,


426
00:21:49,676 --> 00:21:52,546 line:-2
WebKit introduced
the -apple-system font family


427
00:21:52,613 --> 00:21:56,717 line:-2
so that you can use it
to use San Francisco font in CSS.


428
00:21:56,783 --> 00:21:58,585 line:-1
This has been widely adopted.


429
00:21:59,753 --> 00:22:04,892 line:-2
Now the -apple prefixed version
has a standard name: system-ui.


430
00:22:04,958 --> 00:22:09,162 line:-2
And earlier this year, we're bringing
a new set of CSS font family names,


431
00:22:09,229 --> 00:22:14,902 line:-2
like ui-rounded, ui-serif
and ui-monospace to Apple platforms.


432
00:22:15,769 --> 00:22:18,305 line:-1
I'm happy to announce that this year


433
00:22:18,372 --> 00:22:22,075 line:-2
text style is a fully supported API
in macOS.


434
00:22:23,010 --> 00:22:28,415 line:-2
We are introducing a new set of API
to AppKit for all Cocoa apps.


435
00:22:28,482 --> 00:22:31,818 line:-2
This AppKit API will support
a full range of text styles,


436
00:22:31,885 --> 00:22:33,921 line:-1
just like on iOS.


437
00:22:33,987 --> 00:22:38,425 line:-2
The font sizes are optimized
to match macOS control sizes.


438
00:22:38,492 --> 00:22:41,195 line:-1
Although there is no Dynamic Type support,


439
00:22:41,261 --> 00:22:45,365 line:-2
you do get all the other benefits
of text styles we have just covered.


440
00:22:45,432 --> 00:22:50,103 line:-2
Last year, we shared this chart
for Catalyst app text style sizes,


441
00:22:50,170 --> 00:22:54,074 line:-1
which is really iOS sizes scaled at 77%.


442
00:22:54,141 --> 00:22:58,278 line:-2
And this year, the Catalyst apps
with interfaces optimized for Mac,


443
00:22:58,345 --> 00:23:01,281 line:-2
you will get a new set
of text style sizes like this.


444
00:23:03,050 --> 00:23:05,385 line:-1
You see, they are pretty well aligned


445
00:23:05,452 --> 00:23:09,323 line:-2
so that your app should only require
minimal change to adapt.


446
00:23:11,892 --> 00:23:14,895 line:-2
If you pick
"Scale Interface to Match iPad,"


447
00:23:14,962 --> 00:23:19,366 line:-2
it will continue to follow
the iOS sizes at 77%.


448
00:23:19,433 --> 00:23:21,668 line:-1
But if you want the new behavior,


449
00:23:21,735 --> 00:23:25,839 line:-2
picking the "Optimize Interface for Mac"
option in Xcode will give you that.


450
00:23:28,008 --> 00:23:29,743 line:-1
As you may already be aware,


451
00:23:29,810 --> 00:23:34,448 line:-2
in iOS, there is another dimension
to text style: Dynamic Type.


452
00:23:35,282 --> 00:23:37,684 line:-2
The font you picked
will scale automatically


453
00:23:37,751 --> 00:23:39,520 line:-1
according to preferences.


454
00:23:40,754 --> 00:23:45,559 line:-2
Dynamic Type lets people control how large
or small text styles should be for them.


455
00:23:46,360 --> 00:23:49,329 line:-2
It makes text easier to read
for a lot of people,


456
00:23:49,396 --> 00:23:53,534 line:-2
so you really should consider
supporting Dynamic Type in your apps.


457
00:23:55,035 --> 00:23:58,405 line:-2
By using the system font APIs
and text styles together,


458
00:23:58,472 --> 00:24:01,875 line:-2
you are opted in to this behavior
automatically on iOS.


459
00:24:02,709 --> 00:24:06,446 line:-2
But you can also support Dynamic Type
when using custom fonts,


460
00:24:06,513 --> 00:24:09,616 line:-2
and I will cover how to do that
in this part of the talk.


461
00:24:11,218 --> 00:24:15,322 line:0
All right. The chart we have just shown
is a lot to take in,


462
00:24:15,389 --> 00:24:19,493 line:0
and one thing I would like you to notice
is that the different text styles


463
00:24:19,560 --> 00:24:22,196 line:0
may have different scaling behaviors.


464
00:24:22,262 --> 00:24:26,567 line:0
And here we can see how body,
title1 and footnote text styles


465
00:24:26,633 --> 00:24:28,602 line:0
scale with Dynamic Type.


466
00:24:28,669 --> 00:24:32,039 line:0
When you are working on
Dynamic Type support with custom fonts,


467
00:24:32,105 --> 00:24:34,608 line:0
you should also pay attention to this.


468
00:24:34,675 --> 00:24:38,812 line:-2
As we know,
typography is critical for brand identity,


469
00:24:38,879 --> 00:24:42,549 line:-2
and many of you are building apps
that are using custom fonts


470
00:24:42,616 --> 00:24:45,319 line:-1
designed for your app and brand.


471
00:24:45,385 --> 00:24:50,023 line:-2
But you still want to support Dynamic Type
as that is critical for accessibility.


472
00:24:52,025 --> 00:24:56,864 line:-2
You want your app to react accordingly
when text size preferences change,


473
00:24:56,930 --> 00:24:59,700 line:-1
just like iOS system apps do.


474
00:24:59,766 --> 00:25:01,134 line:-1
How would you do that?


475
00:25:02,169 --> 00:25:06,340 line:-2
We have covered this in past talks,
but it still deserves a revisit


476
00:25:06,406 --> 00:25:09,476 line:-2
as it is such a common question
throughout the years.


477
00:25:10,677 --> 00:25:15,415 line:-2
Since iOS 11, we introduced
a new UIFontMetrics class


478
00:25:15,482 --> 00:25:19,686 line:-2
that captures the Dynamic Type capability
from text styles,


479
00:25:19,753 --> 00:25:22,589 line:-2
and lets you apply it
to any arbitrary font.


480
00:25:24,391 --> 00:25:27,494 line:-1
To use it, let's look at this example.


481
00:25:27,561 --> 00:25:33,734 line:-2
First, I start with a custom font as usual
with the standard UIFont API,


482
00:25:33,800 --> 00:25:38,972 line:-2
and then I can create a UIFontMetrics
from body text style.


483
00:25:39,039 --> 00:25:40,974 line:-1
With that bodyMetrics object,


484
00:25:41,041 --> 00:25:44,044 line:-1
the font generated by scaledFont API


485
00:25:44,111 --> 00:25:48,916 line:-2
will scale just like how body text scales
when text size preferences change.


486
00:25:51,051 --> 00:25:54,388 line:-2
And it is worth noticing
that you can also use it


487
00:25:54,454 --> 00:25:57,791 line:-2
to scale a constant value
for custom layout,


488
00:25:57,858 --> 00:26:01,929 line:-2
like here the spacing
between the two labels.


489
00:26:01,995 --> 00:26:05,832 line:-2
We have received great feedback
from our SwiftUI developers


490
00:26:05,899 --> 00:26:07,501 line:-1
since the release last year.


491
00:26:07,568 --> 00:26:09,469 line:-1
And this year in SwiftUI,


492
00:26:09,536 --> 00:26:13,941 line:-2
we are making it possible for you
to do the same font scaling as in UIKit.


493
00:26:14,641 --> 00:26:15,876 line:-1
To understand this,


494
00:26:15,943 --> 00:26:20,380 line:-2
let's start by having a piece of text
in our SwiftUI ContentView.


495
00:26:20,447 --> 00:26:21,515 line:-1
So far so good.


496
00:26:21,582 --> 00:26:25,385 line:-2
Everything scales accordingly
when text size preference changes.


497
00:26:26,787 --> 00:26:33,760 line:-2
Now let's say I want to use Avenir font,
medium weight, 34-point for this text.


498
00:26:33,827 --> 00:26:35,362 line:-1
I know how to do that,


499
00:26:35,429 --> 00:26:39,833 line:-2
and as you can see,
it is using the font we intended.


500
00:26:39,900 --> 00:26:42,536 line:-1
However, in iOS 13,


501
00:26:42,603 --> 00:26:46,240 line:-2
the problem is that once you start
using a custom font,


502
00:26:46,306 --> 00:26:48,408 line:-1
it stops supporting Dynamic Type.


503
00:26:51,445 --> 00:26:54,314 line:-1
In iOS 14, it will automatically scale,


504
00:26:54,381 --> 00:26:58,352 line:-2
but just to make sure it has
the correct scaling behavior as title,


505
00:26:58,418 --> 00:27:01,455 line:-1
I'm going to set the relativeTo parameter


506
00:27:01,522 --> 00:27:04,358 line:-2
so that it will scale relative
to title text style.


507
00:27:06,093 --> 00:27:09,696 line:-2
As you can see, the title text
is scaling automatically now.


508
00:27:11,698 --> 00:27:14,301 line:-1
Let's move on to add the body text.


509
00:27:14,368 --> 00:27:16,970 line:-1
Similar to how we add the title text,


510
00:27:17,037 --> 00:27:22,776 line:-2
we declare a paragraph of text
and assign it to text in a VStack.


511
00:27:24,111 --> 00:27:27,514 line:-2
And I don't even need to use
the relativeTo parameter,


512
00:27:27,581 --> 00:27:31,652 line:-2
since custom font will scale relative
to body text style by default


513
00:27:31,718 --> 00:27:33,554 line:-1
now in iOS 14.


514
00:27:35,756 --> 00:27:39,560 line:-2
Both the title and body text
are scaling automatically now,


515
00:27:39,626 --> 00:27:44,364 line:-2
but it looks like we can benefit
from some padding around the body text,


516
00:27:44,431 --> 00:27:48,468 line:-2
because the text is just too close
to the edges and to the title.


517
00:27:49,937 --> 00:27:52,072 line:-1
Let's add some padding.


518
00:27:52,139 --> 00:27:55,042 line:-2
We start with a fixed padding
of 20 points first.


519
00:27:57,077 --> 00:27:58,645 line:-1
Much better.


520
00:27:58,912 --> 00:28:01,348 line:-1
Now, wouldn't it be nice if the padding


521
00:28:01,415 --> 00:28:04,618 line:-2
can also scale
in relative to text size changes?


522
00:28:05,752 --> 00:28:09,723 line:-2
Here we can leverage
the new ScaledMetric property wrapper,


523
00:28:09,790 --> 00:28:12,226 line:-1
to define a padding with value "20"...


524
00:28:13,493 --> 00:28:16,563 line:-2
but it can also scale relative
to body text style.


525
00:28:18,198 --> 00:28:20,601 line:-1
Let's see if that did the trick.


526
00:28:20,667 --> 00:28:25,472 line:-2
You can see the padding around the text
are scaling in proportion to the text size


527
00:28:25,539 --> 00:28:27,174 line:-1
instead of a fixed size.


528
00:28:28,775 --> 00:28:32,446 line:-2
Okay, here's a recap
of what we've just shown.


529
00:28:32,513 --> 00:28:37,684 line:-2
The font(.custom API has
a new optional parameter, relativeTo,


530
00:28:37,751 --> 00:28:42,289 line:-2
to specify which text style
you want it to scale relative to.


531
00:28:42,356 --> 00:28:46,159 line:-2
If you skip that,
it will scale relative to body,


532
00:28:46,226 --> 00:28:49,496 line:-1
and this is a behavior change in iOS 14.


533
00:28:49,563 --> 00:28:53,500 line:-2
You can still create a custom font
that is fixed size


534
00:28:53,567 --> 00:28:56,970 line:-2
and doesn't scale at all
with the fixedSize parameter.


535
00:28:58,539 --> 00:29:01,708 line:-2
In addition to that,
you can also scale a constant


536
00:29:01,775 --> 00:29:07,814 line:-2
just like what UIFontMetrics does
with the ScaledMetric property wrapper.


537
00:29:07,881 --> 00:29:10,784 line:-2
Well, we have covered
a lot of ground today,


538
00:29:10,851 --> 00:29:13,987 line:-2
and here are some of the basic principles
I want to remind you.


539
00:29:15,122 --> 00:29:18,392 line:-2
We have offered a wide range
of carefully designed system fonts


540
00:29:18,458 --> 00:29:19,793 line:-1
in a variety of styles,


541
00:29:20,494 --> 00:29:25,899 line:-2
such as SF Pro, SF Pro Rounded,
SF Mono, and New York.


542
00:29:25,966 --> 00:29:28,202 line:-1
We encourage you to give them a try.


543
00:29:29,803 --> 00:29:32,606 line:-2
For good typography,
hierarchy is important,


544
00:29:32,673 --> 00:29:36,109 line:-2
and text style is a great tool
for building such hierarchy.


545
00:29:37,377 --> 00:29:39,479 line:-1
Even when working with custom fonts,


546
00:29:39,546 --> 00:29:43,116 line:-2
you should have plenty of options
to support Dynamic Type,


547
00:29:43,183 --> 00:29:45,385 line:-1
which is great for accessibility.


548
00:29:46,753 --> 00:29:49,590 line:-2
We've covered many important details
of typography,


549
00:29:49,656 --> 00:29:51,725 line:-1
such as tracking and leading.


550
00:29:51,792 --> 00:29:54,494 line:-2
You should only override
the default system behavior


551
00:29:54,561 --> 00:29:55,929 line:-1
in exceptional cases,


552
00:29:55,996 --> 00:29:58,398 line:-2
and let the system
do the right thing for you


553
00:29:58,465 --> 00:29:59,666 line:-1
for the rest of them.


554
00:30:01,068 --> 00:30:03,937 line:-2
If you have to work with custom tracking
in your UI,


555
00:30:04,004 --> 00:30:06,874 line:-1
remember that it should be size specific,


556
00:30:06,940 --> 00:30:10,177 line:-2
otherwise a tracking you provided
for small sizes


557
00:30:10,244 --> 00:30:12,446 line:-1
may not look good on large sizes.


558
00:30:13,280 --> 00:30:18,585 line:-2
I hope you now have a better understanding
of the behavior of text on our platforms


559
00:30:18,652 --> 00:30:21,822 line:-2
and the text and font APIs
at your disposal


560
00:30:21,889 --> 00:30:23,891 line:-1
to achieve great typography in your apps.


561
00:30:23,957 --> 00:30:24,958 line:-1
Thank you.

