1
00:00:03,703 --> 00:00:06,640 line:-1
Hello and welcome to WWDC.


2
00:00:08,742 --> 00:00:12,546 line:0
Welcome. My name is Steve Breen,
and I'm an engineer on the UIKit team.


3
00:00:12,613 --> 00:00:15,148 line:0
And in this video,
we're going to chat a bit about


4
00:00:15,215 --> 00:00:17,985 line:0
advances in Diffable Data Source
for iOS 14.


5
00:00:18,418 --> 00:00:20,287 line:-1
So, before we dive into our content,


6
00:00:20,354 --> 00:00:23,257 line:-2
I want to highlight a portion
of the companion sample project


7
00:00:23,323 --> 00:00:26,193 line:-1
for this video entitled "Emoji Explorer."


8
00:00:26,660 --> 00:00:30,531 line:-2
This sample has a lot of interesting
components baked right into its design.


9
00:00:31,164 --> 00:00:35,936 line:-2
Now, in this first section, there's
a horizontally scrolling grid of emoji.


10
00:00:36,003 --> 00:00:39,706 line:-2
This is a pretty common design element
in many of today's apps.


11
00:00:39,773 --> 00:00:44,511 line:-2
Okay, so, this section in the middle
of Emoji Explorer is especially novel.


12
00:00:44,578 --> 00:00:50,150 line:-2
It's an expandable-collapsible
outline-styled UI which is new in iOS 14.


13
00:00:50,884 --> 00:00:53,720 line:0
And finally, in this last section,


14
00:00:53,787 --> 00:00:56,757 line:0
there's a design that looks
suspiciously like a UITableView


15
00:00:56,823 --> 00:01:00,060 line:0
right here in the middle
of our UICollectionView.


16
00:01:00,127 --> 00:01:02,095 line:-1
Okay, that's Emoji Explorer,


17
00:01:02,162 --> 00:01:04,897 line:-2
and we'll be referring back to this
throughout our video.


18
00:01:05,632 --> 00:01:10,170 line:-2
Okay. So, to review, Diffable Data Source,
which was introduced in iOS 13,


19
00:01:10,237 --> 00:01:13,307 line:-2
greatly simplifies
the management of UI state


20
00:01:13,373 --> 00:01:16,210 line:-2
through the addition
of a new snapshot data type.


21
00:01:16,910 --> 00:01:19,580 line:-1
Snapshots encapsulate the entire UI state


22
00:01:19,646 --> 00:01:22,816 line:-2
via the use of unique section
and item identifiers.


23
00:01:23,183 --> 00:01:27,521 line:-2
So, when updating a UICollectionView,
we first create a new snapshot,


24
00:01:27,588 --> 00:01:31,758 line:-2
populate it with the current UI state,
and apply it to the data source.


25
00:01:32,693 --> 00:01:34,995 line:-2
Diffable Data Source
computes the differences


26
00:01:35,062 --> 00:01:37,130 line:-1
and animates things automatically


27
00:01:37,197 --> 00:01:40,434 line:-2
without any additional work needed
from the application developer.


28
00:01:41,001 --> 00:01:46,173 line:-2
So we covered this API in detail
in the WWDC 2019 video,


29
00:01:46,240 --> 00:01:47,975 line:-1
"Advances in UI Data Sources,"


30
00:01:48,041 --> 00:01:51,011 line:-2
and I encourage you
to check out that video to learn more.


31
00:01:51,678 --> 00:01:55,549 line:-2
So, for iOS 14, we've built on
the foundation of Diffable Data Source


32
00:01:55,616 --> 00:01:57,284 line:-1
with two new features:


33
00:01:57,351 --> 00:02:01,788 line:-2
Section Snapshots
and first class Reordering Support.


34
00:02:01,855 --> 00:02:04,658 line:-1
Let's chat a bit about Section Snapshots.


35
00:02:06,627 --> 00:02:09,729 line:-2
For iOS 14,
we're adding a new section snapshot


36
00:02:09,795 --> 00:02:14,067 line:-2
right alongside the existing snapshot type
we call "section snapshots."


37
00:02:14,134 --> 00:02:18,105 line:-2
And as the name implies,
section snapshots encapsulates the data


38
00:02:18,172 --> 00:02:21,108 line:-2
for a single section
in a UICollectionView.


39
00:02:21,175 --> 00:02:23,577 line:-2
There are two reasons
for this enhancement.


40
00:02:23,644 --> 00:02:28,982 line:-2
First, to allow data sources to be more
composable into section-sized chunks.


41
00:02:29,783 --> 00:02:32,886 line:-2
And second, to allow modeling
of hierarchical data


42
00:02:32,953 --> 00:02:36,523 line:-2
which is needed to support
rendering outline-style UIs,


43
00:02:36,590 --> 00:02:39,960 line:-2
a common visual design
found all throughout iOS 14.


44
00:02:40,794 --> 00:02:42,696 line:-1
So let's go back to Emoji Explorer


45
00:02:42,763 --> 00:02:47,034 line:-2
and see how section snapshots are used
to build this out in our sample app.


46
00:02:47,701 --> 00:02:50,470 line:-2
First, in our
horizontally scrolling section,


47
00:02:50,537 --> 00:02:52,439 line:-1
we are using a single section snapshot


48
00:02:52,506 --> 00:02:55,108 line:-2
to completely model
the content found here.


49
00:02:56,076 --> 00:02:58,378 line:-2
Next, in our second section
where we see this


50
00:02:58,445 --> 00:03:02,182 line:-2
expandable-collapsible
outline-style section,


51
00:03:02,249 --> 00:03:06,520 line:-2
a second section snapshot is used
to model this hierarchical data.


52
00:03:06,587 --> 00:03:08,355 line:0
And finally, in our list section,


53
00:03:08,422 --> 00:03:12,726 line:0
we again model this section's content
with a third section snapshot.


54
00:03:13,393 --> 00:03:14,628 line:-1
So for Emoji Explorer,


55
00:03:14,695 --> 00:03:18,866 line:-2
we compose our Diffable Data Source
from three distinct section snapshots


56
00:03:18,932 --> 00:03:21,635 line:-2
each representing
a single section's content.


57
00:03:21,702 --> 00:03:23,604 line:-1
Let's take a look at some API.


58
00:03:23,670 --> 00:03:27,174 line:-2
So, here's a snippet
of the new Section Snapshot API,


59
00:03:27,241 --> 00:03:30,444 line:-1
and check out the SDK for the entire API.


60
00:03:31,945 --> 00:03:34,982 line:-2
So, please note
that we'll use the term "snapshot"


61
00:03:35,048 --> 00:03:39,219 line:-2
when we're referring to the original
snapshot type introduced in iOS 13,


62
00:03:39,286 --> 00:03:42,656 line:-2
which includes sections
and item identifiers.


63
00:03:43,423 --> 00:03:48,462 line:-2
And we'll use the term "section snapshot"
to refer to this new to iOS 14 type.


64
00:03:48,529 --> 00:03:51,164 line:0
So, glancing at
this new section snapshot type,


65
00:03:51,231 --> 00:03:53,834 line:0
we see that
it's generic over the item type.


66
00:03:54,902 --> 00:03:58,839 line:0
Note there's an absence
of any kind of section identifier type.


67
00:03:58,906 --> 00:04:02,676 line:-2
section snapshots just inherently
don't know what section they represent.


68
00:04:03,744 --> 00:04:08,615 line:0
To add content to our section snapshot,
we'll use the 'append' API.


69
00:04:09,917 --> 00:04:12,486 line:0
Now, notice the optional parent parameter.


70
00:04:12,553 --> 00:04:16,190 line:0
When supplied, this allows us
to create parent-child relationships


71
00:04:16,255 --> 00:04:20,260 line:0
in the section snapshot
needed to model hierarchical data.


72
00:04:21,528 --> 00:04:25,465 line:-2
Now, we've added two new APIs
to UICollectionViewDiffableDataSource


73
00:04:25,532 --> 00:04:28,468 line:-2
to accommodate
the new section snapshot type.


74
00:04:29,403 --> 00:04:31,104 line:-1
First, we have a new 'apply' method


75
00:04:31,171 --> 00:04:35,142 line:-2
which takes a section snapshot
and a section identifier.


76
00:04:36,243 --> 00:04:39,680 line:-2
Our second new API allows us
to retrieve a section snapshot


77
00:04:39,746 --> 00:04:42,816 line:-2
representing
a particular section's contents.


78
00:04:42,883 --> 00:04:46,687 line:-2
So next, let's flesh out a code snippet
showing how to use snapshots


79
00:04:46,753 --> 00:04:51,024 line:-2
and section snapshots together
to build up our Collection View's content.


80
00:04:51,091 --> 00:04:53,827 line:-2
First, we'll add sections
in the order we desire


81
00:04:53,894 --> 00:04:57,097 line:-2
by applying a snapshot
to our Diffable Data Source.


82
00:04:57,664 --> 00:05:00,300 line:-2
And here we see, we have the sections
in a particular order:


83
00:05:00,367 --> 00:05:02,469 line:-1
'recent,' 'top,' and 'suggested.'


84
00:05:03,437 --> 00:05:06,240 line:-2
Now, after we have
the desired section order,


85
00:05:06,306 --> 00:05:09,009 line:-2
we're going to populate the items
for each of these sections


86
00:05:09,076 --> 00:05:12,379 line:-2
by applying section snapshots
directly to each section.


87
00:05:12,446 --> 00:05:15,282 line:-2
Let's take a look
at how to create hierarchical data


88
00:05:15,349 --> 00:05:18,018 line:-1
using this Section Snapshot API.


89
00:05:18,085 --> 00:05:22,489 line:-2
First, we'll append some root items
to our sections.


90
00:05:22,556 --> 00:05:26,260 line:-2
Smiley, nature, food, et cetera
using the 'append' API.


91
00:05:27,461 --> 00:05:31,331 line:-2
Recall the 'append' method
has an optional 'parent' parameter.


92
00:05:31,398 --> 00:05:35,135 line:-2
So when that's not supplied,
that means apply these items to the root.


93
00:05:35,202 --> 00:05:37,638 line:-2
So, to configure
our parent-child relationship,


94
00:05:37,704 --> 00:05:40,707 line:-2
we'll append some child items
into a parent item.


95
00:05:40,774 --> 00:05:44,077 line:-2
In this example,
the parent item is "food."


96
00:05:44,144 --> 00:05:46,180 line:-2
And that's it.
We've created a section snapshot


97
00:05:46,246 --> 00:05:49,216 line:-2
which models
our application's hierarchical data.


98
00:05:49,283 --> 00:05:51,218 line:-1
Okay. So, it should be clear by now,


99
00:05:51,285 --> 00:05:54,354 line:-2
section snapshots are capable
of representing hierarchical data.


100
00:05:55,122 --> 00:05:57,858 line:-2
Now, at times, it's very convenient
to reason about


101
00:05:57,925 --> 00:06:00,127 line:-1
just a portion of this hierarchical data.


102
00:06:00,827 --> 00:06:03,897 line:-2
So, in this code snippet,
we're interested in getting


103
00:06:03,964 --> 00:06:07,034 line:-2
all the children
related to a particular parent item,


104
00:06:07,100 --> 00:06:11,205 line:-2
optionally including the parent
in a resultant section snapshot.


105
00:06:12,406 --> 00:06:15,943 line:-2
Okay. So, next up,
let's chat a bit about expansion state.


106
00:06:16,710 --> 00:06:20,848 line:-2
So expansion state is managed
as part of a section snapshot's state.


107
00:06:20,914 --> 00:06:25,052 line:-2
And when building up a snapshot for display,
you can easily determine whether or not


108
00:06:25,118 --> 00:06:27,855 line:-1
a child content is initially visible


109
00:06:27,921 --> 00:06:30,624 line:-2
by setting that item's
parent expansion state.


110
00:06:31,325 --> 00:06:35,229 line:-2
You can also query a snapshot to determine
if an item is expanded or collapsed.


111
00:06:35,295 --> 00:06:39,633 line:-2
Note that if you mutate
a section snapshot's expansion state,


112
00:06:39,700 --> 00:06:43,737 line:-2
this won't apply until you actually
apply that to the Diffable Data Source.


113
00:06:43,804 --> 00:06:47,341 line:-2
Okay, so when a user interacts
with an outline-styled UI


114
00:06:47,407 --> 00:06:51,345 line:-2
which is configured with
the new Cell Outline Disclosure Accessory,


115
00:06:51,411 --> 00:06:54,648 line:-2
the framework will automatically update
the section snapshot


116
00:06:54,715 --> 00:06:56,049 line:-1
with the new expansion state


117
00:06:56,116 --> 00:06:59,219 line:-2
and apply that section snapshot
to the data source.


118
00:06:59,286 --> 00:07:01,288 line:-1
Now, often it's useful to be notified


119
00:07:01,355 --> 00:07:05,192 line:-2
about expansion state changes
caused by these user interactions.


120
00:07:05,259 --> 00:07:07,961 line:-2
For example, you may have a design
that requires


121
00:07:08,028 --> 00:07:10,364 line:-1
that a particular parent never collapse.


122
00:07:11,331 --> 00:07:14,668 line:-2
To support this,
Diffable Data Source has new APIs


123
00:07:14,735 --> 00:07:17,538 line:-2
for giving applications
programmatic control


124
00:07:17,604 --> 00:07:21,074 line:-2
over expansion state changes
caused by user interactions.


125
00:07:21,141 --> 00:07:23,377 line:-1
Okay, so here are these new APIs.


126
00:07:24,144 --> 00:07:26,713 line:-2
First, we notice that
Diffable Data Source has a new property


127
00:07:26,780 --> 00:07:29,116 line:-1
called "SectionSnapshotHandlers."


128
00:07:29,183 --> 00:07:33,987 line:-2
The new SectionSnapshotHandlers type
is a struct which is generic over item


129
00:07:34,054 --> 00:07:37,224 line:-1
and contains five optional closures.


130
00:07:37,291 --> 00:07:40,327 line:-2
To handle
our previously mentioned requirement,


131
00:07:40,394 --> 00:07:43,597 line:-2
we could provide
a shouldCollapseItem handler


132
00:07:43,664 --> 00:07:45,999 line:-2
which will return 'false'
for a particular parent


133
00:07:46,066 --> 00:07:48,435 line:-1
to avoid collapsing the outline.


134
00:07:48,502 --> 00:07:52,639 line:-2
Now, we also provide support
for lazy loading of expensive content


135
00:07:52,706 --> 00:07:56,109 line:-2
with the API
snapshotForExpandingParent.


136
00:07:56,810 --> 00:08:00,080 line:-2
So this is useful to minimize
the amount of content loaded


137
00:08:00,147 --> 00:08:04,585 line:-2
in the initial section snapshot
when getting that content is expensive.


138
00:08:04,651 --> 00:08:07,154 line:-1
So, you can load that content as needed


139
00:08:07,221 --> 00:08:09,756 line:-2
depending on
the current child snapshot's state.


140
00:08:09,823 --> 00:08:12,459 line:-1
So, that wraps up Section Snapshots.


141
00:08:12,526 --> 00:08:14,895 line:-2
One of the advances
Diffable Data Source brings


142
00:08:14,962 --> 00:08:17,064 line:-2
is the ability to model
our Collection View's data


143
00:08:17,130 --> 00:08:19,633 line:-1
with unique item identifiers.


144
00:08:19,700 --> 00:08:21,768 line:-1
With these unique item identifiers,


145
00:08:21,835 --> 00:08:25,639 line:-2
it is possible for the framework
to automatically commit reordering changes


146
00:08:25,706 --> 00:08:29,877 line:-2
on the application's behalf
based on user interactions.


147
00:08:29,943 --> 00:08:31,645 line:-1
But this isn't really enough.


148
00:08:31,712 --> 00:08:34,181 line:-1
Our application needs to be notified


149
00:08:34,248 --> 00:08:37,451 line:-2
that a user-initiated
reordering interaction took place


150
00:08:37,518 --> 00:08:39,919 line:-2
so that it can persist
the new visual order


151
00:08:39,986 --> 00:08:43,590 line:-2
to the application's backing store,
which is its final source of truth.


152
00:08:43,657 --> 00:08:45,459 line:0
So, to support reordering,


153
00:08:45,526 --> 00:08:49,763 line:0
Diffable Data Source now has
a new property: reorderingHandlers.


154
00:08:50,764 --> 00:08:54,201 line:0
This a struct
which contains three optional closures:


155
00:08:54,268 --> 00:08:57,538 line:0
canReorderItem,
willReorder, and didReorder.


156
00:08:57,604 --> 00:09:00,073 line:0
So, to enable reordering via this new API,


157
00:09:00,140 --> 00:09:04,344 line:0
you'll first need to supply
a canReorderItem closure.


158
00:09:04,411 --> 00:09:07,848 line:-2
This will be called when a user attempts
to start a reordering interaction.


159
00:09:07,915 --> 00:09:09,116 line:-1
If it returns 'true,'


160
00:09:09,183 --> 00:09:11,351 line:-2
the reordering interaction
is allowed to begin.


161
00:09:11,418 --> 00:09:14,421 line:0
When the user is done
with the reordering interaction,


162
00:09:14,488 --> 00:09:18,091 line:0
the didReorder closure is called
to allow your application to commit


163
00:09:18,158 --> 00:09:22,696 line:0
the new ordering state
to your application's source of truth.


164
00:09:22,763 --> 00:09:23,764 line:0
Note that you must provide


165
00:09:23,830 --> 00:09:26,767 line:0
both the canReorderItem
and didReorder closure


166
00:09:26,834 --> 00:09:28,802 line:0
to enable the reordering feature.


167
00:09:28,869 --> 00:09:33,907 line:-2
Okay. So, the didReorder closure
passes your application a new type:


168
00:09:33,974 --> 00:09:36,310 line:-1
NSDiffableDataSourceTransaction.


169
00:09:37,211 --> 00:09:39,746 line:0
So, transactions supply
all the information needed


170
00:09:39,813 --> 00:09:44,852 line:0
to reason about the update being performed
against the Diffable Data Source.


171
00:09:44,918 --> 00:09:48,188 line:0
First, let's check out
the NSDiffableDataSourceTransaction.


172
00:09:48,255 --> 00:09:51,625 line:0
This type supplies
four basic pieces of information.


173
00:09:51,692 --> 00:09:53,827 line:0
First, we have the initialSnapshot.


174
00:09:53,894 --> 00:09:55,662 line:0
This is the state
of the Diffable Data Source


175
00:09:55,729 --> 00:09:58,165 line:0
before the update is applied.


176
00:09:59,166 --> 00:10:01,935 line:0
Next, we have the finalSnapshot.


177
00:10:02,002 --> 00:10:04,171 line:0
Now, this is the state
of the Diffable Data Source


178
00:10:04,238 --> 00:10:06,340 line:0
after the update is applied.


179
00:10:06,406 --> 00:10:09,610 line:-2
And we can use these item identifiers
from this snapshot directly


180
00:10:09,676 --> 00:10:11,278 line:-1
to determine the new ordering


181
00:10:11,345 --> 00:10:14,381 line:-2
which we need to commit
to our application's source of truth.


182
00:10:14,448 --> 00:10:15,749 line:0
Additionally, we can see


183
00:10:15,816 --> 00:10:19,786 line:0
the Swift standard lib
CollectionDifference is also supplied.


184
00:10:19,853 --> 00:10:23,790 line:0
And if your application has a data type
such as 'Array' for the source of truth,


185
00:10:23,857 --> 00:10:27,027 line:0
we can apply that CollectionDifference
directly to that.


186
00:10:27,094 --> 00:10:30,097 line:0
And, lastly, we see
a list of section transactions


187
00:10:30,163 --> 00:10:32,499 line:0
that provide per-section details


188
00:10:32,566 --> 00:10:35,669 line:0
about all the sections involved
in this reordering update.


189
00:10:35,736 --> 00:10:37,905 line:0
Section transactions are quite similar.


190
00:10:37,971 --> 00:10:40,007 line:0
They have one section transaction supplied


191
00:10:40,073 --> 00:10:43,577 line:0
for each section
involved in the reordering update.


192
00:10:43,644 --> 00:10:46,413 line:0
First off, we can inspect
the sectionIdentifier


193
00:10:46,480 --> 00:10:48,949 line:0
this sectionTransaction
has been applied to.


194
00:10:49,016 --> 00:10:52,419 line:0
And we also see we have
the initial and final section snapshots,


195
00:10:52,486 --> 00:10:56,723 line:0
along with the CollectionDifference
specific to this section's update.


196
00:10:56,790 --> 00:10:59,326 line:-1
Okay. So, let's check out an example.


197
00:10:59,393 --> 00:11:02,196 line:0
Here, our backing store
is an array of items


198
00:11:02,262 --> 00:11:06,266 line:0
supplying the source of truth
for a single section Collection View.


199
00:11:07,267 --> 00:11:09,469 line:0
Using the Swift standard lib
CollectionDifference


200
00:11:09,536 --> 00:11:11,605 line:0
supplied with the transaction,


201
00:11:11,672 --> 00:11:15,209 line:0
we'll create a new backing store
and update our source of truth directly.


202
00:11:15,742 --> 00:11:17,177 line:-1
Well, that wraps up our video today


203
00:11:17,244 --> 00:11:21,582 line:-2
covering all the advances we've brought
to Diffable Data Source for iOS 14.


204
00:11:22,516 --> 00:11:23,584 line:-1
Download the sample app.


205
00:11:23,650 --> 00:11:26,887 line:-2
It's full of examples
of how to use these new APIs.


206
00:11:26,954 --> 00:11:30,257 line:-2
And use this code as a starting point
to update your apps


207
00:11:30,324 --> 00:11:32,960 line:-1
to take advantage of these new APIs.


208
00:11:33,026 --> 00:11:37,030 line:-2
And watch the related videos mentioned
throughout this talk to go deeper.


209
00:11:37,865 --> 00:11:38,932 line:-1
Thanks for watching.

