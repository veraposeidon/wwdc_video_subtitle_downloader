1
00:00:03,670 --> 00:00:06,507 line:-1
Hello and welcome to WWDC.


2
00:00:07,541 --> 00:00:12,045 line:0
Hello, everyone. Welcome to
"Discover WKWebView Enhancements."


3
00:00:12,112 --> 00:00:15,849 line:0
My name is Brady Eidson, and I'm an
engineer on the WebKit Architecture team.


4
00:00:15,916 --> 00:00:21,154 line:-2
I'm genuinely excited to talk to you today
about new features of the WKWebView API.


5
00:00:21,221 --> 00:00:23,557 line:-1
At Apple, we love the Web.


6
00:00:23,624 --> 00:00:25,859 line:-1
We pay great attention to detail,


7
00:00:25,926 --> 00:00:30,998 line:-2
making sure that the WebKit framework
is fast, responsive, secure and efficient


8
00:00:31,732 --> 00:00:35,269 line:-2
so that our favorite browser, Safari,
can be all of those things.


9
00:00:35,936 --> 00:00:39,006 line:-2
But we don't only love
exploring the Web in a browser.


10
00:00:39,072 --> 00:00:41,975 line:-2
We love seeing web technology
used everywhere,


11
00:00:42,042 --> 00:00:45,479 line:-2
and our platforms enable
amazing integration of web content


12
00:00:45,546 --> 00:00:47,014 line:-1
with native experiences.


13
00:00:47,848 --> 00:00:50,484 line:-2
If you primarily need
an in-app web browser


14
00:00:50,551 --> 00:00:53,420 line:-2
and don't need deep customization
of that experience,


15
00:00:53,487 --> 00:00:57,391 line:-2
SFSafariViewController
is the best choice for you and your users.


16
00:00:57,457 --> 00:01:00,060 line:-2
It handles all of the things
you'd need to worry about


17
00:01:00,127 --> 00:01:03,030 line:-2
while implementing a basic browser
and beyond.


18
00:01:03,096 --> 00:01:07,467 line:-2
Your users get Reader, content blockers,
autofill and more,


19
00:01:07,534 --> 00:01:10,537 line:-1
and you get a browser in a box.


20
00:01:10,604 --> 00:01:13,273 line:-2
Add it to your app
and give it a URL to load.


21
00:01:13,674 --> 00:01:17,211 line:-2
SafariViewController is easy to use,
but powerful


22
00:01:17,277 --> 00:01:19,713 line:-1
because it is built on top of WKWebView.


23
00:01:20,581 --> 00:01:23,617 line:-2
When you need a higher degree
of configurability


24
00:01:23,684 --> 00:01:27,020 line:-2
or are using web content in ways
unrelated to browsing,


25
00:01:27,087 --> 00:01:29,923 line:-1
you can also build on WKWebView directly.


26
00:01:30,557 --> 00:01:35,062 line:-2
WKWebView automatically protects
your application's code and data


27
00:01:35,128 --> 00:01:37,364 line:-1
from the complexities of the web platform


28
00:01:37,431 --> 00:01:40,434 line:-2
by isolating web content
in a separate process.


29
00:01:40,501 --> 00:01:43,470 line:-1
This enables fast execution of web content


30
00:01:43,537 --> 00:01:47,007 line:-2
while also providing protection
against malicious actors.


31
00:01:47,774 --> 00:01:51,645 line:-2
SafariViewController uses WKWebView
because of those benefits,


32
00:01:51,712 --> 00:01:54,114 line:-1
and they are also why, for years,


33
00:01:54,181 --> 00:01:58,218 line:-2
we've strongly recommended WKWebView
over other alternatives.


34
00:01:58,285 --> 00:02:00,821 line:-1
Speaking of those other alternatives,


35
00:02:00,888 --> 00:02:06,159 line:-2
WebView and UIWebView were our
original APIs for embedding web content.


36
00:02:06,226 --> 00:02:09,896 line:-2
They've served us well,
but for all the benefits WKWebView has,


37
00:02:09,963 --> 00:02:11,999 line:-1
they tend to have the parallel drawbacks


38
00:02:12,065 --> 00:02:15,169 line:-2
which is why they've been deprecated
for a few years now


39
00:02:15,235 --> 00:02:18,305 line:-2
and why we are striving
to drive their usage down to zero.


40
00:02:18,372 --> 00:02:21,909 line:-2
The deprecated WebViews
work so differently from WKWebView,


41
00:02:21,975 --> 00:02:24,545 line:-1
it wasn't desirable or even possible


42
00:02:24,611 --> 00:02:27,648 line:-2
to make WKWebView APIs work
exactly the same.


43
00:02:27,714 --> 00:02:31,318 line:-2
This difference sometimes requires you
to rethink how you do things.


44
00:02:31,385 --> 00:02:35,722 line:-2
Other times, it requires us
to add new capabilities to WKWebView.


45
00:02:35,789 --> 00:02:39,793 line:-2
For those developers who have run into
challenges transitioning to WKWebView,


46
00:02:39,860 --> 00:02:45,365 line:-2
we are listening to you,
and the WKWebView API is still growing.


47
00:02:45,432 --> 00:02:49,870 line:-2
It has each year since its introduction,
and it will each year going forward.


48
00:02:49,937 --> 00:02:54,608 line:-2
On that note, I'm going to talk
about new features WKWebView has in iOS 14


49
00:02:54,675 --> 00:02:56,343 line:-1
and macOS Big Sur.


50
00:02:57,244 --> 00:03:00,681 line:-2
Some will make previously difficult tasks
much easier.


51
00:03:00,747 --> 00:03:03,750 line:-2
Some will bring back things missing
from the deprecated WebViews.


52
00:03:03,817 --> 00:03:05,819 line:-1
And some are brand-new capabilities.


53
00:03:06,887 --> 00:03:08,889 line:-1
We have a lot on our plate to cover.


54
00:03:09,223 --> 00:03:11,191 line:-1
First, I'm going to discuss new APIs


55
00:03:11,258 --> 00:03:14,461 line:-2
to help you isolate your app
and web content from one another...


56
00:03:15,462 --> 00:03:17,698 line:-2
then we'll talk about improvements
in how you interact


57
00:03:17,764 --> 00:03:19,766 line:-1
with web content via JavaScript...


58
00:03:20,767 --> 00:03:23,637 line:-2
we'll go over a few APIs to help you
fine-tune the rendering


59
00:03:23,704 --> 00:03:26,073 line:-1
of web content in your app,


60
00:03:26,139 --> 00:03:28,842 line:-2
we'll touch on ways to get more value
from web content


61
00:03:28,909 --> 00:03:30,511 line:-1
on the native side of things,


62
00:03:31,178 --> 00:03:34,882 line:-2
and finally, we'll touch on a topic
that is more and more important each day,


63
00:03:34,948 --> 00:03:36,383 line:-1
respecting privacy.


64
00:03:37,117 --> 00:03:39,386 line:0
To help show off these new capabilities,


65
00:03:39,453 --> 00:03:42,890 line:0
I'm going to tell you a story
that is probably familiar to many of you,


66
00:03:42,956 --> 00:03:45,092 line:0
and that is the story of an app.


67
00:03:45,158 --> 00:03:46,493 line:0
First, a little background.


68
00:03:46,793 --> 00:03:49,563 line:-2
Like most mature
software engineering organizations,


69
00:03:49,630 --> 00:03:52,933 line:-2
the Safari and WebKit teams have many
mission-critical internal tools


70
00:03:53,000 --> 00:03:54,168 line:-1
to keep the project going.


71
00:03:54,801 --> 00:03:59,239 line:-2
One of these critical tools
is our internal WebKittens website,


72
00:03:59,306 --> 00:04:01,508 line:-2
to notify team members
of the important updates


73
00:04:01,575 --> 00:04:03,043 line:-1
to the department's many cats.


74
00:04:04,244 --> 00:04:07,214 line:-2
The website has been with us
for longer than the iPhone.


75
00:04:07,281 --> 00:04:09,216 line:-1
But of course, once iOS was a thing,


76
00:04:09,917 --> 00:04:13,554 line:-2
somebody took it upon themselves to write
the WebKittens app using UIWebView.


77
00:04:14,388 --> 00:04:17,624 line:-2
Also like most mature
software engineering organizations,


78
00:04:17,690 --> 00:04:19,826 line:-2
our department has
a lot of duplicated effort


79
00:04:19,892 --> 00:04:21,862 line:-1
in its mission-critical internal tools.


80
00:04:22,529 --> 00:04:25,065 line:-1
The Pups on Safari website is one of those


81
00:04:25,132 --> 00:04:27,467 line:-2
to stay updated
on the department's many dogs.


82
00:04:28,702 --> 00:04:33,140 line:-2
And like with WebKittens, Pups on Safari
also has an aging iPhone app.


83
00:04:33,907 --> 00:04:35,375 line:-1
For such critical content,


84
00:04:35,442 --> 00:04:38,579 line:-2
having to check multiple places
throughout the day was kind of a drag,


85
00:04:38,645 --> 00:04:42,349 line:-2
so I decided to solve that problem
by writing Browser Pets,


86
00:04:42,416 --> 00:04:45,118 line:-2
a single feed
seamlessly combining both sites


87
00:04:45,185 --> 00:04:47,454 line:-2
natively managing
the interactions between them.


88
00:04:48,255 --> 00:04:50,858 line:-2
Since each of the original apps
evolved independently,


89
00:04:50,924 --> 00:04:53,160 line:-1
I started from scratch using WKWebView.


90
00:04:53,961 --> 00:04:58,398 line:-2
One of the first challenges I ran into
was isolating my application's logic


91
00:04:58,465 --> 00:04:59,766 line:-1
from the web content.


92
00:05:00,567 --> 00:05:03,237 line:-1
The "hello world" moment for my app


93
00:05:03,303 --> 00:05:06,106 line:-2
was showing the WebKittens' news feed
by itself.


94
00:05:06,173 --> 00:05:08,842 line:-2
And the first thing I noticed
while trying to scroll through the feed


95
00:05:08,909 --> 00:05:10,377 line:-1
was I couldn't.


96
00:05:10,811 --> 00:05:13,780 line:-2
As I scrolled through the page
with my finger, the page was fighting me.


97
00:05:14,248 --> 00:05:16,049 line:-1
My experience with the WebKittens website


98
00:05:16,116 --> 00:05:19,486 line:-2
is that it has a scrolling experience
heavily customized by JavaScript.


99
00:05:19,920 --> 00:05:21,855 line:-1
That's fine for the page in the browser,


100
00:05:21,922 --> 00:05:25,025 line:-2
but I'm doing deep customization
of the experience in my app.


101
00:05:25,092 --> 00:05:27,194 line:-1
I just want the kitties and nothing else.


102
00:05:27,594 --> 00:05:31,131 line:-2
The WKWebView API has always had a way
to disable JavaScript


103
00:05:31,198 --> 00:05:35,235 line:-2
by setting the javaScriptEnabled
property of WKPreferences to "false."


104
00:05:35,602 --> 00:05:38,071 line:-2
Unless you're writing
a general purpose web browser,


105
00:05:38,138 --> 00:05:41,341 line:-2
it's always good to ask yourself
if you can disable JavaScript


106
00:05:41,408 --> 00:05:45,445 line:-2
from remote sources,
especially those outside of your control.


107
00:05:45,512 --> 00:05:48,749 line:-2
With WKWebView,
this can become problematic


108
00:05:48,815 --> 00:05:51,485 line:-2
since most interaction with the content
inside the view


109
00:05:51,552 --> 00:05:53,420 line:-1
is by evaluating JavaScript.


110
00:05:54,288 --> 00:05:56,190 line:-2
So, we've deprecated
that setting this year


111
00:05:56,256 --> 00:05:57,457 line:-1
and we've added something new.


112
00:05:58,492 --> 00:06:01,128 line:-2
By using
the allowsContentJavaScript setting


113
00:06:01,195 --> 00:06:02,763 line:-1
on WKWebPagePreferences,


114
00:06:02,829 --> 00:06:06,600 line:-2
you disable only the JavaScript that comes
from the web page content itself.


115
00:06:07,000 --> 00:06:10,170 line:-2
In-line scripts,
remotely referenced JavaScript files,


116
00:06:10,237 --> 00:06:12,472 line:-1
JavaScript URLs, everything.


117
00:06:13,106 --> 00:06:16,043 line:-2
But your application's JavaScript
will continue working.


118
00:06:17,344 --> 00:06:20,647 line:-2
If you are not familiar
with the WKWebPagePreferences API,


119
00:06:20,714 --> 00:06:21,815 line:-1
it's pretty slick.


120
00:06:21,882 --> 00:06:23,050 line:-1
It's a recent addition,


121
00:06:23,116 --> 00:06:26,653 line:-2
and it allows configuring certain
behaviors on a per-navigation basis.


122
00:06:27,187 --> 00:06:30,023 line:-2
I'm already using the newer version
of the policy delegate


123
00:06:30,090 --> 00:06:32,125 line:-2
that lets me configure
web page preferences


124
00:06:32,192 --> 00:06:35,295 line:-2
so I can present as a mobile device
even when running on an iPad.


125
00:06:36,363 --> 00:06:39,566 line:-2
Here is where I can also disable
ContentJavaScript


126
00:06:39,633 --> 00:06:41,969 line:-1
while viewing the main news feed.


127
00:06:44,037 --> 00:06:47,140 line:-2
With that change,
scrolling works as expected.


128
00:06:49,409 --> 00:06:51,578 line:-2
Now that I can scroll
through the news feed at will,


129
00:06:51,645 --> 00:06:54,481 line:-2
I want to make sure
viewing the comments on a post works,


130
00:06:54,548 --> 00:06:55,916 line:-1
so let me tap this one here.


131
00:06:57,251 --> 00:06:59,586 line:-1
And this is the next problem I ran into.


132
00:06:59,653 --> 00:07:02,389 line:-2
I know from using the website
and app for years


133
00:07:02,456 --> 00:07:05,592 line:-2
that the bottom half of this page
should be full of comments.


134
00:07:05,659 --> 00:07:07,628 line:-1
Instead, it is blank.


135
00:07:08,228 --> 00:07:11,765 line:-2
I also know from experience
the comments are populated by JavaScript.


136
00:07:11,832 --> 00:07:13,000 line:-1
And before you say it,


137
00:07:13,066 --> 00:07:16,270 line:-2
I did not accidentally disable JavaScript
on these navigations.


138
00:07:16,837 --> 00:07:18,805 line:-1
It's time to hit up the Web Inspector.


139
00:07:19,606 --> 00:07:22,576 line:-2
The Web Inspector is a great way
to explore what's happening


140
00:07:22,643 --> 00:07:25,279 line:-2
with web content
in your WebKit application.


141
00:07:25,345 --> 00:07:29,183 line:-2
For years you've been able to attach
to any WebView or JavaScript context


142
00:07:29,249 --> 00:07:30,984 line:-1
in any app you're developing,


143
00:07:31,051 --> 00:07:33,320 line:-2
but we like to remind developers
at every opportunity


144
00:07:33,387 --> 00:07:35,856 line:-2
that you can do this,
and that it's awesome.


145
00:07:36,723 --> 00:07:39,860 line:0
There are a lot of fantastic improvements
to the Web Inspector this year,


146
00:07:39,927 --> 00:07:42,763 line:0
and I encourage you to check out
the session about them to learn more.


147
00:07:43,931 --> 00:07:45,232 line:-1
Back to our bug.


148
00:07:45,299 --> 00:07:48,435 line:-2
I can see here that there is an error
in the JavaScript console.


149
00:07:50,470 --> 00:07:52,172 line:-1
Let's take a closer look at that.


150
00:07:53,907 --> 00:07:58,545 line:-2
The web page expects the symbol
"commentDetails" to be a function,


151
00:07:58,612 --> 00:08:00,113 line:-1
but it isn't.


152
00:08:01,081 --> 00:08:03,083 line:-1
When looking at the page's JavaScript,


153
00:08:03,150 --> 00:08:05,819 line:-2
I can clearly see
they declare this function,


154
00:08:05,886 --> 00:08:08,388 line:-2
but the Web Inspector is telling us
that it's null.


155
00:08:09,590 --> 00:08:13,327 line:-2
I searched for the symbol in my app
and found this code.


156
00:08:14,461 --> 00:08:18,365 line:-2
Coincidentally, my application code
also has a JavaScript symbol


157
00:08:18,432 --> 00:08:20,968 line:-2
named commentDetails
injected into the web page.


158
00:08:21,535 --> 00:08:23,770 line:-1
And when I evaluate my JavaScript,


159
00:08:23,837 --> 00:08:27,107 line:-2
I overwrite their function
with an unrelated variable.


160
00:08:27,875 --> 00:08:30,677 line:-2
This type of conflict
is an ever-present concern


161
00:08:30,744 --> 00:08:32,746 line:-1
when working with WKWebViews.


162
00:08:32,813 --> 00:08:36,383 line:-2
Your application can accidentally conflict
with the web content.


163
00:08:36,450 --> 00:08:39,086 line:-2
The web content can accidentally conflict
with your app.


164
00:08:39,520 --> 00:08:43,823 line:-2
Malicious web content can conflict
with your application on purpose


165
00:08:43,890 --> 00:08:47,794 line:-2
by trying to change its behavior
or steal sensitive information from it.


166
00:08:47,861 --> 00:08:50,831 line:-2
These are all possible
as long as our JavaScript


167
00:08:50,898 --> 00:08:54,234 line:-2
and the web page's JavaScript run
in the same world.


168
00:08:54,301 --> 00:08:58,405 line:-2
To fix this, we'll need an isolated place
for our JavaScript to run


169
00:08:58,472 --> 00:09:00,240 line:-1
separate from the application JavaScript.


170
00:09:00,707 --> 00:09:02,643 line:-1
Our own global object.


171
00:09:03,510 --> 00:09:07,181 line:-2
And that is where
WKContentWorld comes in.


172
00:09:07,247 --> 00:09:11,351 line:-2
A WKContentWorld is an isolated sandbox
for JavaScript to run in.


173
00:09:11,952 --> 00:09:13,854 line:-1
If you are familiar with JavaScript,


174
00:09:13,921 --> 00:09:18,725 line:-2
it's like having your own separate
window object for the same page content.


175
00:09:18,792 --> 00:09:22,296 line:-2
There is a page world
representing the web content itself,


176
00:09:22,362 --> 00:09:25,899 line:-2
and then there are client worlds
representing one or more homes


177
00:09:25,966 --> 00:09:28,001 line:-1
for your application's JavaScript.


178
00:09:28,769 --> 00:09:31,505 line:-2
Your application's JavaScript
run in a client world


179
00:09:31,572 --> 00:09:34,942 line:-2
can still do things
like call built-in DOM APIs on the page


180
00:09:35,008 --> 00:09:36,710 line:-1
or change the DOM itself,


181
00:09:36,777 --> 00:09:40,981 line:-2
but it will never see the application
state set up by the page's JavaScript.


182
00:09:41,982 --> 00:09:45,419 line:-2
Likewise, the page's JavaScript
will never see yours.


183
00:09:46,753 --> 00:09:51,058 line:-2
To fix this in my application,
I'm going to use the default client world


184
00:09:51,124 --> 00:09:53,994 line:-1
for all of my evaluateJavaScript calls.


185
00:09:55,462 --> 00:09:59,666 line:-2
And now that my app's JavaScript and the
JavaScript on the page no longer conflict,


186
00:09:59,733 --> 00:10:02,135 line:-1
there's those comments. Great.


187
00:10:02,202 --> 00:10:05,939 line:-2
I showed you adopting WKContentWorld
with evaluateJavaScript,


188
00:10:06,006 --> 00:10:09,443 line:-2
but now you can also inject
WKScriptMessageHandlers


189
00:10:09,510 --> 00:10:12,779 line:-2
into a specific content world
to isolate them as well.


190
00:10:14,014 --> 00:10:17,050 line:-2
I think I've done a pretty good job
protecting my app and web content


191
00:10:17,117 --> 00:10:18,485 line:-1
from one another.


192
00:10:18,552 --> 00:10:22,589 line:-2
The next step in developing Browser Pets
involved a lot more JavaScript.


193
00:10:22,656 --> 00:10:24,458 line:-1
To help keep that under control,


194
00:10:24,525 --> 00:10:27,160 line:-2
I used some new ways
of managing the JavaScript


195
00:10:27,227 --> 00:10:28,929 line:-1
that my app uses.


196
00:10:29,796 --> 00:10:32,299 line:-1
The WebKittens website is rather static,


197
00:10:32,366 --> 00:10:35,435 line:-2
so it was a great starting point
for our combined news feed.


198
00:10:36,436 --> 00:10:39,506 line:-2
I injected some JavaScript
to clean up its look a little bit


199
00:10:39,573 --> 00:10:42,409 line:-2
and to prepare it to integrate
the Pups on Safari web content.


200
00:10:43,777 --> 00:10:48,515 line:-2
The Pups on Safari site has
a JavaScript API for fetching posts,


201
00:10:48,582 --> 00:10:52,186 line:-2
and that's what I've used to get
the combined news feed up and running,


202
00:10:52,252 --> 00:10:54,388 line:-2
and here's some of the hoops
I had to jump through.


203
00:10:55,255 --> 00:10:59,259 line:0
When I wanted to reuse the same JavaScript
but with different values,


204
00:10:59,326 --> 00:11:02,329 line:0
you know, kind of like calling a function
with parameters,


205
00:11:02,396 --> 00:11:06,433 line:0
I needed to construct an entirely new
JavaScript string each time.


206
00:11:07,968 --> 00:11:13,674 line:-2
Another awkward thing was passing data.
These strings to represent zero?


207
00:11:13,740 --> 00:11:17,110 line:-2
Elsewhere in my application code,
they are natively integers,


208
00:11:17,177 --> 00:11:20,647 line:-2
but I have to convert them into strings
so I can build a JavaScript string


209
00:11:20,714 --> 00:11:22,349 line:-1
out of the string components.


210
00:11:22,816 --> 00:11:26,386 line:-2
Much worse than those
is how I manually add JavaScript strings


211
00:11:26,453 --> 00:11:29,156 line:-1
for each entry in this native dictionary.


212
00:11:29,556 --> 00:11:34,161 line:-2
What I'd love is for the ability to reuse
the same constant JavaScript string


213
00:11:34,228 --> 00:11:37,264 line:-1
as a function with named parameters,


214
00:11:37,331 --> 00:11:39,666 line:-2
and to not worry about those parameters
getting serialized


215
00:11:39,733 --> 00:11:41,702 line:-1
or deserialized incorrectly.


216
00:11:43,604 --> 00:11:48,008 line:-2
And those are just a few things that
the new callAsyncJavaScript API does.


217
00:11:48,075 --> 00:11:50,878 line:-1
Let's see what using it does to that code.


218
00:11:52,012 --> 00:11:53,780 line:-1
I can write JavaScript naturally


219
00:11:53,847 --> 00:11:56,483 line:-2
without having to construct
a string from arguments.


220
00:11:56,550 --> 00:12:00,020 line:-2
I can name whatever arguments I want
for my JavaScript string


221
00:12:00,087 --> 00:12:04,525 line:-2
and provide their values with the call
to callAsyncJavaScript.


222
00:12:04,591 --> 00:12:09,630 line:-2
Serialization and deserialization
of argument types happens automatically.


223
00:12:09,696 --> 00:12:12,466 line:-2
A Cocoa string
becomes a JavaScript string.


224
00:12:12,533 --> 00:12:14,635 line:-1
A number remains a number.


225
00:12:14,701 --> 00:12:17,838 line:-2
A Cocoa dictionary
becomes a JavaScript object


226
00:12:17,905 --> 00:12:19,473 line:-1
as I've highlighted here.


227
00:12:20,474 --> 00:12:22,509 line:-1
This little utility method I've written


228
00:12:22,576 --> 00:12:26,547 line:-2
can easily be reused
with different argument values like this.


229
00:12:28,315 --> 00:12:30,017 line:-1
You might notice in my example


230
00:12:30,083 --> 00:12:32,986 line:-2
that the JavaScript has
an explicit return value.


231
00:12:33,053 --> 00:12:36,390 line:-2
That's another difference between this
and evaluateJavaScript.


232
00:12:36,456 --> 00:12:38,725 line:-1
If I don't explicitly return a value,


233
00:12:38,792 --> 00:12:42,729 line:-2
then my completion handler receives
"undefined" as the result.


234
00:12:42,796 --> 00:12:46,567 line:-2
But there is another really important
trick hiding up its sleeve.


235
00:12:46,633 --> 00:12:49,336 line:-1
If your JavaScript returns a promise,


236
00:12:49,403 --> 00:12:52,206 line:-2
then your completion handler
is not called right away.


237
00:12:52,272 --> 00:12:55,142 line:-2
Instead,
it waits for the promise to resolve


238
00:12:55,209 --> 00:12:58,212 line:-2
and is called with the result
of that fulfillment.


239
00:12:58,278 --> 00:13:01,048 line:-2
This code returns the promise
that is returned


240
00:13:01,114 --> 00:13:03,183 line:-1
from calling the built-in fetch method,


241
00:13:03,250 --> 00:13:05,485 line:-2
which means
that my completion handler isn't called


242
00:13:05,552 --> 00:13:08,322 line:-2
until the bytes for that resource
have loaded over the network.


243
00:13:08,956 --> 00:13:10,524 line:-1
Just one tiny example


244
00:13:10,591 --> 00:13:14,228 line:-2
of how this makes working with modern
asynchronous JavaScript seamless.


245
00:13:14,294 --> 00:13:18,298 line:-2
CallAsyncJavaScript is a great addition
to evaluate JavaScript,


246
00:13:18,365 --> 00:13:20,667 line:-2
but there's more ways
my app uses JavaScript


247
00:13:20,734 --> 00:13:23,203 line:-1
besides my native code evaluating it.


248
00:13:23,270 --> 00:13:26,840 line:-2
The WebKittens folks
built in some cool features.


249
00:13:26,907 --> 00:13:30,811 line:-2
For example, if a new comment
is being added to a post server-side,


250
00:13:30,878 --> 00:13:33,514 line:-1
the page is notified and lets you know.


251
00:13:33,580 --> 00:13:38,151 line:-2
It even fires a comment event
for other JS on the page to listen to.


252
00:13:38,986 --> 00:13:41,889 line:-2
I wanted my native app
to listen for new comments too


253
00:13:41,955 --> 00:13:44,057 line:-1
so I can notify my native code,


254
00:13:44,124 --> 00:13:46,827 line:-2
and I do that using
WKScriptMessageHandler.


255
00:13:47,728 --> 00:13:52,165 line:-2
This API was originally designed
as a one-way communications channel.


256
00:13:52,232 --> 00:13:56,803 line:-2
To make it bidirectional
to handle a reply to your script message


257
00:13:56,870 --> 00:13:58,639 line:-1
requires some extra code.


258
00:13:59,473 --> 00:14:02,576 line:-2
For example,
tracking each message with an identifier


259
00:14:02,643 --> 00:14:04,945 line:-1
that can be used to look up a later reply.


260
00:14:05,012 --> 00:14:07,447 line:-2
The more sophisticated
your messaging system,


261
00:14:07,514 --> 00:14:11,251 line:-2
the more involved your message tracking
mechanism needed to be,


262
00:14:11,318 --> 00:14:13,353 line:-1
more code you have to write and debug,


263
00:14:13,420 --> 00:14:16,523 line:-2
and there's some race conditions
you may never be able to solve.


264
00:14:18,091 --> 00:14:21,128 line:-2
There's two new changes this year
to improve this.


265
00:14:21,195 --> 00:14:24,998 line:-2
First, postMessage
used to return "undefined" in JavaScript


266
00:14:25,065 --> 00:14:27,534 line:-2
as there is no meaningful return value
to be had.


267
00:14:28,769 --> 00:14:30,204 line:-1
Now it returns a promise.


268
00:14:30,838 --> 00:14:34,908 line:-2
Second, there's a new form
of the WKScriptMessageHandler protocol


269
00:14:34,975 --> 00:14:37,744 line:-2
that you can use which gets
a completion handler attached


270
00:14:37,811 --> 00:14:39,546 line:-1
to each message it receives.


271
00:14:40,280 --> 00:14:42,015 line:-1
When you call that completion handler,


272
00:14:42,082 --> 00:14:44,785 line:-2
the promise from the postMessage
is resolved.


273
00:14:45,519 --> 00:14:48,222 line:-2
That JavaScript code
waiting for a message reply


274
00:14:48,288 --> 00:14:49,857 line:-1
now boils down to this--


275
00:14:50,357 --> 00:14:54,261 line:-2
handling the reply to the message
through the resolution of the promise,


276
00:14:54,328 --> 00:14:55,629 line:-1
and that's a good thing.


277
00:14:57,331 --> 00:15:00,801 line:-2
At this point, I feel really great
about my application's JavaScript


278
00:15:00,868 --> 00:15:02,336 line:-1
and how well it cleaned up,


279
00:15:02,402 --> 00:15:04,338 line:-2
so I want to turn my attention
to making sure


280
00:15:04,404 --> 00:15:07,107 line:-2
the cats and dogs are all displaying
as they should.


281
00:15:07,174 --> 00:15:10,277 line:-2
I was able to apply
a few more new APIs that we have


282
00:15:10,344 --> 00:15:12,779 line:-1
to allow for more flexible rendering.


283
00:15:13,447 --> 00:15:15,549 line:-1
This is relatively old web content


284
00:15:15,616 --> 00:15:19,520 line:-2
from before when the phrase
"responsive design" had even been coined.


285
00:15:19,586 --> 00:15:23,190 line:-2
The original WebKittens app
looked pretty good on early iPhones


286
00:15:23,257 --> 00:15:26,159 line:-2
because the authors had tweaked it
for that specific purpose.


287
00:15:27,027 --> 00:15:30,063 line:-2
This is how viewing a comment
on the original iPhone looks.


288
00:15:32,232 --> 00:15:35,802 line:-2
This is how viewing a WebKittens comment
looks on a modern iPhone,


289
00:15:35,869 --> 00:15:39,740 line:-2
much larger than when the WebKittens app
was originally written.


290
00:15:39,806 --> 00:15:43,076 line:-2
You can see the beginnings
of a native UI I'm adding to Browser Pets


291
00:15:43,143 --> 00:15:45,579 line:-2
to allow returning from a post
to the news feed.


292
00:15:46,580 --> 00:15:51,818 line:-2
The web content itself looks passable,
but there's also lots of negative space.


293
00:15:51,885 --> 00:15:55,689 line:-2
It looks more like a 2005-era website
in a browser.


294
00:15:56,290 --> 00:16:00,060 line:-2
I think I can adapt the site as is
to make better use of the space


295
00:16:00,127 --> 00:16:04,131 line:-2
to make better use of the screen
and to fit in better with native UI.


296
00:16:05,632 --> 00:16:08,569 line:-2
I decided to see
if I could throw some CSS at the problem


297
00:16:08,635 --> 00:16:10,504 line:-1
to fill my users' screens.


298
00:16:11,038 --> 00:16:15,008 line:-2
The CSS zoom property has been with WebKit
for a dozen years,


299
00:16:15,075 --> 00:16:18,312 line:-2
and I think it might work here
applied to the entire body element.


300
00:16:19,713 --> 00:16:22,082 line:-1
As long as the zoom value is big enough,


301
00:16:22,149 --> 00:16:25,752 line:-2
it caps to take up
the entire viewport width


302
00:16:25,819 --> 00:16:27,654 line:-1
which is perfect in effect.


303
00:16:27,721 --> 00:16:29,957 line:-2
But the way I'm doing it here
is a bit clunky.


304
00:16:30,924 --> 00:16:34,795 line:-2
First, even though I'm evaluating
the JavaScript in my own client world,


305
00:16:34,862 --> 00:16:37,197 line:-2
that doesn't change the fact
that I'm changing the CSS


306
00:16:37,264 --> 00:16:39,499 line:-1
in ways visible to the page.


307
00:16:39,566 --> 00:16:42,169 line:-2
I don't know if it would cause issues
for WebKittens,


308
00:16:42,236 --> 00:16:44,204 line:-1
but you can easily imagine how it might.


309
00:16:44,738 --> 00:16:48,108 line:-2
Second, I chose to do this manually
on each navigation,


310
00:16:48,175 --> 00:16:49,943 line:-1
so I get into a bit of a race.


311
00:16:50,010 --> 00:16:54,314 line:-2
Will the content display before my
JavaScript-to-override-zoom is executed?


312
00:16:54,381 --> 00:16:55,382 line:-1
Unclear.


313
00:16:56,049 --> 00:16:59,987 line:-2
Fortunately, we have a solution for that
in the form of the new pageZoom property


314
00:17:00,053 --> 00:17:01,355 line:-1
on WKWebView.


315
00:17:01,889 --> 00:17:04,992 line:-2
This is actually the same property
that drives command-plus


316
00:17:05,058 --> 00:17:08,194 line:-2
and command-minus full-page-zoom
in Safari.


317
00:17:08,262 --> 00:17:11,865 line:-2
And I think a lot of developers
will find it useful in a lot of scenarios.


318
00:17:13,200 --> 00:17:16,869 line:-2
By using it on my WKWebView,
I can get the exact same effect


319
00:17:16,936 --> 00:17:19,640 line:-1
as changing CSS with JavaScript


320
00:17:19,705 --> 00:17:22,576 line:-2
but without any of the drawbacks
of doing so.


321
00:17:22,643 --> 00:17:25,913 line:-2
So much code removed
and more predictable behavior.


322
00:17:27,079 --> 00:17:30,651 line:-2
Next, let's take a look
at a Pups on Safari comment.


323
00:17:30,717 --> 00:17:34,721 line:-2
These headers and footers that you see
were meant for display on the website


324
00:17:34,788 --> 00:17:36,790 line:-1
as viewed in a browser.


325
00:17:36,857 --> 00:17:38,458 line:-1
They're not really what I want.


326
00:17:38,525 --> 00:17:42,029 line:-2
I have native UI to show,
not these artifacts from the site.


327
00:17:43,163 --> 00:17:45,065 line:-1
To explore my options for removing them,


328
00:17:45,132 --> 00:17:47,868 line:-2
I decided to learn more about them
in the Web Inspector.


329
00:17:48,502 --> 00:17:53,407 line:-2
I noticed the elements have these classes,
pup-header and pup-footer.


330
00:17:53,473 --> 00:17:55,943 line:-2
Let's dig a little deeper
and see where those are used.


331
00:17:57,544 --> 00:18:02,216 line:-2
So they match this custom media query
for a no-header-and-footer-device.


332
00:18:02,850 --> 00:18:05,853 line:-2
One usually sees
only a handful of media types in CSS,


333
00:18:05,919 --> 00:18:10,123 line:-2
"Screen," "Print" and so on,
and this is not one of them.


334
00:18:11,091 --> 00:18:13,227 line:-2
I did a little digging
amongst my colleagues,


335
00:18:13,293 --> 00:18:16,563 line:-2
and I found out that before there was
a Pups app for iPhone,


336
00:18:16,630 --> 00:18:20,000 line:-2
there was also a Mac app
that used the original Mac WebView.


337
00:18:21,301 --> 00:18:23,370 line:-1
WebView in the Mac had this great feature


338
00:18:23,437 --> 00:18:26,707 line:-2
where you could tell it to present itself
as a particular media type.


339
00:18:26,773 --> 00:18:30,677 line:-2
Commonly used to pretend to be a printer
when you were really a screen,


340
00:18:30,744 --> 00:18:33,080 line:-1
it could also be used for custom types.


341
00:18:33,146 --> 00:18:35,349 line:-2
So, depending on the context
within your app,


342
00:18:35,415 --> 00:18:37,951 line:-2
the same content
could have different presentation.


343
00:18:39,219 --> 00:18:43,190 line:-2
And we're bringing that feature forward
to WKWebView on all platforms this year.


344
00:18:44,725 --> 00:18:47,361 line:-2
By setting a custom media type
on my WKWebView,


345
00:18:47,427 --> 00:18:49,596 line:-1
I can easily get rid of those elements


346
00:18:49,663 --> 00:18:52,065 line:-2
and also adopt any other styles
that might come along


347
00:18:52,132 --> 00:18:54,568 line:-1
for a custom app like mine,


348
00:18:54,635 --> 00:18:58,472 line:-2
all without JavaScript,
and globally instead of per navigation.


349
00:19:00,107 --> 00:19:03,544 line:-2
Now that I've spent some time
fine-tuning how things look in my app,


350
00:19:03,610 --> 00:19:06,113 line:-2
I wanted to explore other features
I could add


351
00:19:06,180 --> 00:19:08,248 line:-1
that focus on the web content itself.


352
00:19:08,749 --> 00:19:12,819 line:-2
Fortunately, there's some relevant
new APIs this year for me to explore.


353
00:19:13,720 --> 00:19:16,557 line:-2
Looking back
at that last Pups on Safari post,


354
00:19:16,623 --> 00:19:20,260 line:-2
this was a popular post
with a lot of comments.


355
00:19:21,495 --> 00:19:25,165 line:-2
I remember Beth made this hilarious joke
in those comments,


356
00:19:25,232 --> 00:19:27,801 line:-2
but scrolling through to find it
seems cumbersome.


357
00:19:27,868 --> 00:19:31,839 line:-2
I'd rather have a "find in page" feature,
but how will I implement it?


358
00:19:32,339 --> 00:19:35,375 line:-2
There are some great
JavaScript find utilities out there


359
00:19:35,442 --> 00:19:39,546 line:-2
that might make sense if I needed
deep customization of the find experience.


360
00:19:39,613 --> 00:19:43,817 line:-2
But WKWebView now has an easy-to-use
find functionality


361
00:19:43,884 --> 00:19:48,021 line:-2
that behaves like others on the platform,
and that's just what I'm looking for.


362
00:19:50,057 --> 00:19:52,526 line:-2
I have a few things I can configure
about the find


363
00:19:52,593 --> 00:19:58,765 line:-2
like any find in AppKit and UIKit APIs--
the direction, case sensitivity, wrapping.


364
00:19:58,832 --> 00:20:02,135 line:-2
Or without any configuration,
it will just use sensible defaults.


365
00:20:02,803 --> 00:20:06,507 line:-2
If a result is found,
it is selected and scrolled into view.


366
00:20:07,140 --> 00:20:08,275 line:-1
Voilà.


367
00:20:11,345 --> 00:20:14,982 line:-2
That joke is just not quite as funny
as I remembered it.


368
00:20:15,048 --> 00:20:18,585 line:-2
Another thing a proper app needs to do
is share content.


369
00:20:19,486 --> 00:20:22,055 line:-2
And I can think of no content
more worth sharing


370
00:20:22,122 --> 00:20:25,259 line:-2
than the cutest web kittens
and the most adorable pups on Safari.


371
00:20:26,059 --> 00:20:29,129 line:-2
For a few years,
WKWebView has supported the ability


372
00:20:29,196 --> 00:20:31,899 line:-1
to take a bitmap snapshot of its contents.


373
00:20:31,965 --> 00:20:34,234 line:-1
This is useful in so many situations.


374
00:20:35,068 --> 00:20:37,771 line:-1
But it is limited to the on-screen content


375
00:20:37,838 --> 00:20:40,340 line:-2
no matter how much content
is actually there.


376
00:20:41,408 --> 00:20:43,277 line:-1
So if we add a feature to zoom in


377
00:20:43,343 --> 00:20:46,647 line:-2
on the full-resolution version
of this photo, for example,


378
00:20:46,713 --> 00:20:49,116 line:-1
we could only capture what's visible.


379
00:20:49,183 --> 00:20:51,718 line:-2
And this is not to mention,
depending on your goal,


380
00:20:51,785 --> 00:20:53,887 line:-1
bitmapped images might be a poor fit.


381
00:20:54,555 --> 00:20:57,824 line:-2
I think another great way of sharing
this content would be as a PDF,


382
00:20:57,891 --> 00:21:00,294 line:-2
and this year,
WKWebView will support just that.


383
00:21:01,361 --> 00:21:05,199 line:-2
You can configure a few things
about how you want to capture the PDF,


384
00:21:05,265 --> 00:21:08,068 line:-2
or if you just want a PDF
of all the content in the view,


385
00:21:08,135 --> 00:21:11,038 line:-2
including content
not currently visible on the screen,


386
00:21:11,104 --> 00:21:13,707 line:-2
call createPDF
with the default configuration.


387
00:21:13,774 --> 00:21:18,011 line:-1
This code... will share this entire post,


388
00:21:18,078 --> 00:21:20,948 line:-2
including all the comments
in a searchable text form


389
00:21:21,014 --> 00:21:24,351 line:-2
in one PDF document
that would look like this.


390
00:21:25,285 --> 00:21:27,087 line:-1
I told you it was a popular post.


391
00:21:28,689 --> 00:21:33,427 line:-2
Another type of content snapshot that I
often find useful when working with WebKit


392
00:21:33,493 --> 00:21:35,529 line:-1
is the WebArchive.


393
00:21:35,596 --> 00:21:39,967 line:-2
A web archive is an actual rich snapshot
of the current DOM of the web content


394
00:21:40,033 --> 00:21:42,302 line:-2
and the sub-resources
it would need to render.


395
00:21:42,369 --> 00:21:44,004 line:-1
In addition to being a file format


396
00:21:44,071 --> 00:21:47,174 line:-2
supported since the first public release
of the WebKit framework,


397
00:21:47,241 --> 00:21:51,144 line:-2
it is also the native pasteboard format
for web content on all of our platforms.


398
00:21:52,212 --> 00:21:55,816 line:-2
When I was first debugging issues with
the combined news feed in Browser Pets,


399
00:21:55,883 --> 00:21:57,951 line:-2
I wanted to leverage WebArchives
to help me.


400
00:21:58,785 --> 00:22:03,357 line:-2
While WKWebView has been able to load
WebArchive files since its first release,


401
00:22:03,423 --> 00:22:05,125 line:-1
it hasn't been able to save them.


402
00:22:05,792 --> 00:22:07,261 line:-1
Until now.


403
00:22:07,327 --> 00:22:11,832 line:-2
With createWebArchiveData, I can
now take that snapshot of web content


404
00:22:11,899 --> 00:22:13,634 line:-1
for later debugging and testing.


405
00:22:15,068 --> 00:22:18,539 line:-2
Like taking a bitmap snapshot
or creating a PDF,


406
00:22:18,605 --> 00:22:21,375 line:-2
it's a simple method of requesting
the WebArchive data


407
00:22:21,441 --> 00:22:23,644 line:-2
and getting the result
in a completion handler.


408
00:22:24,144 --> 00:22:26,947 line:-2
I can save this data off to disk
for later use,


409
00:22:27,014 --> 00:22:28,415 line:-1
put it on the pasteboard,


410
00:22:28,482 --> 00:22:31,185 line:-2
or even load it
into another WKWebView right now.


411
00:22:31,919 --> 00:22:36,390 line:-2
As I mentioned, WKWebView has always
been able to load WebArchive files.


412
00:22:36,456 --> 00:22:39,393 line:-2
I've heard from a few developers
that they thought that was not the case,


413
00:22:39,459 --> 00:22:44,298 line:-2
so I just wanted to share the code I used
to load a WebArchive, which is load(data


414
00:22:44,364 --> 00:22:46,300 line:-1
with the appropriate mimeType.


415
00:22:48,068 --> 00:22:50,971 line:-2
With bitmap snapshots,
PDFs and web archives,


416
00:22:51,038 --> 00:22:55,175 line:-2
we have a growing number of ways
to get stuff out of a WKWebView.


417
00:22:55,242 --> 00:22:57,077 line:-1
And there is one more important one.


418
00:22:57,611 --> 00:22:59,947 line:-2
As I mentioned before,
WebKittens and Pups on Safari


419
00:23:00,013 --> 00:23:02,182 line:-1
are mission-critical tools.


420
00:23:02,249 --> 00:23:06,119 line:-2
And some team members even rely on the
ability to print out their favorite pets


421
00:23:06,186 --> 00:23:09,122 line:-2
on actual paper
for proper motivation throughout the day.


422
00:23:10,557 --> 00:23:14,628 line:-2
Since Browser Pets is brand new,
I am of course using SwiftUI,


423
00:23:14,695 --> 00:23:17,531 line:-2
and I've been able to build
a Mac version of the app.


424
00:23:17,598 --> 00:23:20,300 line:-2
But I know printing is important
to these team members.


425
00:23:20,367 --> 00:23:23,770 line:-2
Printing WKWebViews has been possible
on iOS for a while,


426
00:23:23,837 --> 00:23:25,839 line:-1
but Mac developers have not been so lucky,


427
00:23:26,573 --> 00:23:29,042 line:-1
until macOS Big Sur.


428
00:23:29,109 --> 00:23:32,813 line:-2
If this interests you, go looking for it
in your SDK, and give it a whirl.


429
00:23:33,947 --> 00:23:37,885 line:-2
Before we get to a few more APIs
that help you on the app side of things,


430
00:23:37,951 --> 00:23:41,655 line:-2
I know many of you are also focused
on the web content itself.


431
00:23:41,722 --> 00:23:46,026 line:-2
We're always working on new Web-facing
features that can shine on our platforms,


432
00:23:46,093 --> 00:23:47,828 line:-1
and this year is no exception.


433
00:23:48,395 --> 00:23:50,998 line:0
Once we're done here,
I encourage you to take a look


434
00:23:51,064 --> 00:23:53,634 line:0
at the "What's New for Web Developers"
session.


435
00:23:54,401 --> 00:23:56,203 line:-1
Finally, I'm happy to share with you


436
00:23:56,270 --> 00:23:58,672 line:-2
exciting announcements
regarding user privacy


437
00:23:58,739 --> 00:24:01,608 line:-2
and how they affect developers
using WKWebView.


438
00:24:02,643 --> 00:24:04,311 line:-2
You might have heard Apple
say this before,


439
00:24:04,378 --> 00:24:06,180 line:-1
but just in case, I'll repeat it now.


440
00:24:06,246 --> 00:24:09,850 line:-2
We firmly believe
that privacy is a fundamental human right,


441
00:24:09,917 --> 00:24:12,519 line:-2
and that belief
is legitimately one of our core values.


442
00:24:13,554 --> 00:24:16,823 line:-2
We've designed iOS and the App Store
with this in mind.


443
00:24:16,890 --> 00:24:20,694 line:-2
We strive to prevent any native app
from using private information


444
00:24:20,761 --> 00:24:22,196 line:-1
without user consent,


445
00:24:22,262 --> 00:24:25,532 line:-2
not only at the policy level,
but also at a technical level,


446
00:24:25,599 --> 00:24:27,267 line:-1
and we get better at this every year.


447
00:24:27,334 --> 00:24:30,571 line:-2
The Web is different.
When users browse the wild web,


448
00:24:30,637 --> 00:24:32,739 line:-2
they are often being watched
by at least one party.


449
00:24:32,806 --> 00:24:36,343 line:-2
There is no curator, and some
web technologies seem to have evolved


450
00:24:36,410 --> 00:24:39,580 line:-2
to encourage tracking users
instead of preventing it.


451
00:24:40,747 --> 00:24:43,884 line:-2
We realized that with WebKit,
we could do something about this.


452
00:24:45,185 --> 00:24:49,289 line:-2
We started working on
Intelligent Tracking Prevention, or ITP.


453
00:24:50,090 --> 00:24:53,827 line:-2
ITP uses various client-side heuristics
and machine learning


454
00:24:53,894 --> 00:24:57,397 line:-1
to identify, classify and thwart trackers.


455
00:24:58,966 --> 00:25:03,136 line:-2
We've improved it continuously
since we added it to Safari in 2017,


456
00:25:03,203 --> 00:25:04,872 line:-1
and we won't stop.


457
00:25:04,938 --> 00:25:07,307 line:-1
Since we added ITP to Safari,


458
00:25:07,374 --> 00:25:10,944 line:-2
many WKWebView developers have been
asking us to use it in their apps.


459
00:25:11,745 --> 00:25:15,849 line:-2
And we're happy to announce that in iOS 14
and macOS Big Sur,


460
00:25:15,916 --> 00:25:20,287 line:-2
ITP is enabled by default
on all WKWebView apps.


461
00:25:20,354 --> 00:25:22,389 line:-1
Users have the control here.


462
00:25:22,456 --> 00:25:24,992 line:-2
For example, if you have
a general purpose web browser,


463
00:25:25,058 --> 00:25:28,595 line:-2
your users might need to disable ITP
for compatibility


464
00:25:28,662 --> 00:25:30,731 line:-1
with a website you don't control.


465
00:25:30,797 --> 00:25:33,767 line:-2
Most people
will not fall into this situation,


466
00:25:33,834 --> 00:25:37,037 line:-2
but there is API for you
to point users towards disabling it


467
00:25:37,104 --> 00:25:38,739 line:-1
just like we've seen with Safari.


468
00:25:39,606 --> 00:25:41,241 line:-1
Intelligent Tracking Prevention


469
00:25:41,308 --> 00:25:44,845 line:-2
has proven to be a powerful way
to protect user privacy in the Web,


470
00:25:44,912 --> 00:25:46,613 line:-1
but we didn't stop there.


471
00:25:46,680 --> 00:25:50,250 line:-2
While trying to think of other ways
to protect users on the Web,


472
00:25:50,317 --> 00:25:54,154 line:-2
we identified three common ways
web content is used in an app.


473
00:25:55,322 --> 00:25:57,291 line:-1
The easiest to understand, perhaps,


474
00:25:57,357 --> 00:26:00,127 line:-2
is the general purpose web browser
like Safari.


475
00:26:00,761 --> 00:26:04,898 line:-2
The primary purpose of these apps
is to show web content from any source


476
00:26:04,965 --> 00:26:07,534 line:-2
and to help their user manage
the things important to them


477
00:26:07,601 --> 00:26:09,536 line:-1
related to the task of web browsing.


478
00:26:10,671 --> 00:26:13,640 line:-2
On the opposite end of the spectrum
from a general web browser


479
00:26:13,707 --> 00:26:18,245 line:-2
is an app that stays in the confines
of only one or a few sites.


480
00:26:18,312 --> 00:26:21,849 line:-2
No matter their balance of native UI
and displaying web content,


481
00:26:21,915 --> 00:26:26,286 line:-2
the web content itself is part
of the core implementation of the app.


482
00:26:27,621 --> 00:26:29,923 line:-1
And then there's the in-app browser.


483
00:26:29,990 --> 00:26:32,626 line:-2
Often starting from a domain
specific to the app,


484
00:26:32,693 --> 00:26:35,395 line:-2
they aggregate content
from a lot of different sources,


485
00:26:35,462 --> 00:26:38,699 line:-2
usually allowing users
to start browsing from any of them.


486
00:26:38,765 --> 00:26:42,269 line:-2
A prime example
is a social media news feed,


487
00:26:42,336 --> 00:26:43,737 line:-1
much like Browser Pets.


488
00:26:44,404 --> 00:26:46,073 line:-1
For these last two types of app,


489
00:26:46,139 --> 00:26:49,910 line:-2
WKWebView has a new feature
called App-bound domains.


490
00:26:49,977 --> 00:26:51,512 line:-1
The idea is simple.


491
00:26:51,745 --> 00:26:56,250 line:-2
You specify which domains are the core
part of the implementation of your app.


492
00:26:57,484 --> 00:27:00,020 line:-1
This empowers you to design a secure app


493
00:27:00,087 --> 00:27:02,689 line:-2
by implementing the principle
of least privilege.


494
00:27:02,756 --> 00:27:07,261 line:-2
Deep interaction with the web content
not core to your app is disabled


495
00:27:07,327 --> 00:27:08,695 line:-1
for both the code you write


496
00:27:08,762 --> 00:27:12,165 line:-2
and any other code you might bring in
from frameworks or libraries.


497
00:27:13,400 --> 00:27:15,636 line:-1
This affects me with Browser Pets.


498
00:27:15,702 --> 00:27:18,205 line:-2
Comments on a post
can have links to other domains


499
00:27:18,272 --> 00:27:20,440 line:-1
to learn more about cats and dogs.


500
00:27:21,041 --> 00:27:24,278 line:-2
I want to allow these links,
and I can do so safely


501
00:27:24,344 --> 00:27:29,550 line:-2
as long as I limit my App-bound domains
to WebKittens and Pups on Safari.


502
00:27:31,118 --> 00:27:35,088 line:-2
It would become impossible for user data
to be accidentally compromised


503
00:27:35,155 --> 00:27:37,524 line:-2
on these other domains
where I don't have a deep understanding


504
00:27:37,591 --> 00:27:38,926 line:-1
of their structure or function,


505
00:27:38,992 --> 00:27:43,363 line:-2
or intentionally compromised if my users
run across a bad actor on the Web.


506
00:27:43,430 --> 00:27:46,066 line:-2
I don't necessarily know
what nefarious plans


507
00:27:46,133 --> 00:27:48,135 line:-1
the developers of this site might have.


508
00:27:49,636 --> 00:27:51,638 line:-1
Adopting it is easy.


509
00:27:51,705 --> 00:27:54,775 line:-2
You just need to add an entry
for WKAppBoundDomains


510
00:27:54,842 --> 00:27:58,946 line:-2
to your app's info.Plist,
and point it to an array of domains.


511
00:27:59,012 --> 00:28:01,815 line:-1
Here's how I adopted it in Browser Pets.


512
00:28:01,882 --> 00:28:06,653 line:-2
Loading any other domain still works,
but deep interaction with other domains


513
00:28:06,720 --> 00:28:08,989 line:-1
is prevented at a technological level.


514
00:28:10,557 --> 00:28:14,561 line:-2
It's even possible to disable deep
interaction with all domains in your app


515
00:28:14,628 --> 00:28:18,298 line:-2
by simply adding the key to your
info.Plist with an empty set of values.


516
00:28:18,866 --> 00:28:20,901 line:-1
If you load arbitrary content


517
00:28:20,968 --> 00:28:24,104 line:-2
but don't need any interaction
with the web content itself,


518
00:28:24,171 --> 00:28:26,240 line:-1
this is a best practice.


519
00:28:28,509 --> 00:28:29,877 line:-1
So, that was our journey.


520
00:28:29,943 --> 00:28:33,380 line:-2
We took two separate apps displaying
content from two separate websites


521
00:28:33,447 --> 00:28:35,782 line:-1
and integrated them into one news feed.


522
00:28:35,849 --> 00:28:38,919 line:-2
And the morale of the Safari
and WebKit teams has never been higher.


523
00:28:39,887 --> 00:28:42,356 line:-2
Along the way,
we made sure our app's JavaScript


524
00:28:42,422 --> 00:28:44,925 line:-1
was isolated from the web content itself.


525
00:28:44,992 --> 00:28:48,695 line:-2
We leveraged callAsyncJavaScript
and postMessageWithReplies


526
00:28:48,762 --> 00:28:51,732 line:-1
to greatly simplify our JavaScript logic.


527
00:28:51,798 --> 00:28:56,103 line:-2
We fine-tuned how the content displays
using new APIs that affect rendering.


528
00:28:56,170 --> 00:28:59,806 line:-2
We added an easy "find in page"
and a powerful "share as PDF" feature


529
00:28:59,873 --> 00:29:01,575 line:-1
as well as printing on the Mac.


530
00:29:02,376 --> 00:29:05,145 line:-2
And we respected our users' privacy
out of the gate


531
00:29:05,212 --> 00:29:07,614 line:-2
by embracing
Intelligent Tracking Prevention


532
00:29:07,681 --> 00:29:10,017 line:-1
and adopting App-bound domains.


533
00:29:10,083 --> 00:29:14,021 line:-2
All of these features were driven
directly by developer feedback.


534
00:29:14,087 --> 00:29:16,390 line:-2
We know we haven't gotten
to everyone's requests,


535
00:29:16,456 --> 00:29:18,659 line:-1
but remember, we're not done.


536
00:29:18,725 --> 00:29:21,128 line:-2
We can't wait for you to try out
these new APIs


537
00:29:21,195 --> 00:29:25,199 line:-2
and we genuinely want to keep hearing
what else you need in WKWebView.


538
00:29:25,999 --> 00:29:30,404 line:0
In addition to feedback with Apple,
webkit.org has multiple ways to reach out,


539
00:29:30,470 --> 00:29:33,740 line:0
including a link to our Slack
and to our many mailing lists.


540
00:29:33,807 --> 00:29:35,676 line:0
WebKit is very open source,


541
00:29:35,742 --> 00:29:37,978 line:0
so this is also where you can learn
to check out and build


542
00:29:38,045 --> 00:29:39,613 line:0
as well as file bugs.


543
00:29:40,247 --> 00:29:41,648 line:0
We're also on Twitter.


544
00:29:42,382 --> 00:29:44,985 line:0
If you want to stay on top
of new Web-facing features,


545
00:29:45,052 --> 00:29:49,022 line:0
Web Inspector enhancements and other
goodies you might see in future releases,


546
00:29:49,089 --> 00:29:52,759 line:0
we usually update
Safari technology preview every two weeks.


547
00:29:52,826 --> 00:29:55,395 line:0
Purple Safari deserves a home in your doc.


548
00:29:56,630 --> 00:30:00,300 line:-2
Thank you for watching, and I hope
you have a great rest of WWDC 2020.

