1
00:00:03,836 --> 00:00:06,907 line:-1
Hello, and welcome to WWDC.


2
00:00:08,876 --> 00:00:11,912 line:0
Hello.
Welcome to "Meet Scribble for iPad."


3
00:00:11,979 --> 00:00:13,113 line:-1
My name is Daniel Gobera.


4
00:00:13,180 --> 00:00:15,582 line:-2
I'm an engineer
in the Pencil and Paper team.


5
00:00:15,649 --> 00:00:18,418 line:-2
And I'll be joined later
by my colleague, Evan Long.


6
00:00:18,485 --> 00:00:23,023 line:-2
Scribble is a fantastic new way
of entering text on iPad


7
00:00:23,090 --> 00:00:25,893 line:-2
using Apple Pencil
through handwriting recognition.


8
00:00:25,959 --> 00:00:29,596 line:-2
In this video, we'll see an overview
on how Scribble works.


9
00:00:29,663 --> 00:00:33,066 line:-2
We'll look at the aspects that make
a great writing experience.


10
00:00:33,133 --> 00:00:35,969 line:-2
We'll take a tour of the APIs
that support Scribble,


11
00:00:36,036 --> 00:00:38,172 line:-1
and finally, we'll see some examples


12
00:00:38,238 --> 00:00:40,641 line:-2
on how to customize
the behavior of Scribble


13
00:00:40,707 --> 00:00:43,644 line:-2
so you're getting the best possible
experience in your app.


14
00:00:44,111 --> 00:00:48,215 line:-2
When bringing Scribble to the iPad,
we wanted to do it in a big way.


15
00:00:48,282 --> 00:00:50,417 line:-1
Centered around the Apple Pencil,


16
00:00:50,484 --> 00:00:53,086 line:-2
Scribble is deeply integrated
into the system,


17
00:00:53,153 --> 00:00:56,957 line:-2
which means you can just write directly
into any text field,


18
00:00:57,024 --> 00:00:59,159 line:-1
and not on a separate writing area.


19
00:00:59,927 --> 00:01:02,930 line:-2
Transcription happens on the fly
as you write.


20
00:01:02,996 --> 00:01:06,633 line:-2
There are no modes, no tapping.
You just write.


21
00:01:06,700 --> 00:01:10,237 line:-2
Scribble on iPadOS
is part of the system experience,


22
00:01:10,304 --> 00:01:13,307 line:-2
which means it's available
to all apps by default,


23
00:01:13,373 --> 00:01:15,209 line:-1
the same way the keyboard is.


24
00:01:15,876 --> 00:01:19,012 line:-2
It works anywhere
where you can enter text.


25
00:01:19,079 --> 00:01:23,650 line:-2
It is built on top of a best-in-class
handwriting recognition engine


26
00:01:23,717 --> 00:01:26,653 line:-1
that is fast, it's incredibly accurate,


27
00:01:26,720 --> 00:01:29,189 line:-1
and runs entirely on the device,


28
00:01:29,256 --> 00:01:32,259 line:-2
so it's always available
and completely private.


29
00:01:33,460 --> 00:01:36,029 line:-1
It recognizes handwriting in English,


30
00:01:36,096 --> 00:01:39,233 line:-2
Simplified and Traditional Chinese
and Cantonese.


31
00:01:39,299 --> 00:01:44,338 line:-2
So, let's see an overview of the aspects
that make up a great writing experience.


32
00:01:44,404 --> 00:01:47,341 line:-2
This will give you a set of guidelines
that you can use


33
00:01:47,407 --> 00:01:51,378 line:-2
to make sure your app is getting the best
possible experience with Scribble.


34
00:01:53,614 --> 00:01:54,815 line:-1
The first key aspect


35
00:01:54,882 --> 00:01:58,986 line:-2
is that Scribble makes text input
feel fluid and effortless.


36
00:01:59,052 --> 00:02:01,822 line:-2
Here we see an example
of searching in Maps.


37
00:02:02,789 --> 00:02:05,158 line:-2
Notice how you can just
start writing directly


38
00:02:05,225 --> 00:02:07,728 line:-1
without tapping on the field first.


39
00:02:07,794 --> 00:02:11,031 line:-2
If you notice that there are
any fields in your app


40
00:02:11,098 --> 00:02:13,200 line:-2
that don't accept
Scribble writing directly


41
00:02:13,267 --> 00:02:15,636 line:-1
and it's necessary to tap on them first,


42
00:02:15,702 --> 00:02:19,106 line:-2
you should adopt the APIs
that we're gonna show a little bit later.


43
00:02:19,173 --> 00:02:23,076 line:-2
Scribble is direct,
meaning that the position of the Pencil


44
00:02:23,143 --> 00:02:25,913 line:-2
tells the system
where the text should get inserted.


45
00:02:25,979 --> 00:02:30,317 line:-2
We see an example here of filling out
a form with multiple fields in Safari,


46
00:02:30,384 --> 00:02:33,720 line:-2
and notice how you can effortlessly jump
from field to field.


47
00:02:33,787 --> 00:02:35,556 line:-1
The strokes are ephemeral,


48
00:02:35,622 --> 00:02:38,926 line:-2
as the transcription happens on the fly
as you write.


49
00:02:38,992 --> 00:02:42,196 line:-2
Makes it feel almost like
you're dictating with motion.


50
00:02:43,597 --> 00:02:46,500 line:-2
The second design principle
is consistency.


51
00:02:46,567 --> 00:02:51,572 line:-2
Scribble needs to work everywhere where
you would expect to be able to enter text.


52
00:02:51,638 --> 00:02:53,807 line:-1
Here we see an example in Reminders,


53
00:02:53,874 --> 00:02:58,545 line:-2
where every item on the list
contains text that you can normally edit,


54
00:02:58,612 --> 00:03:01,782 line:-2
so naturally you can just start writing
on any of them.


55
00:03:02,449 --> 00:03:05,118 line:-2
Now, we noticed that
some people found it natural


56
00:03:05,185 --> 00:03:09,456 line:-2
to write on the blank area below the list
to create a new entry.


57
00:03:10,123 --> 00:03:13,193 line:-1
This is not normally a text input view,


58
00:03:13,260 --> 00:03:17,598 line:-2
so Reminders adopted the API,
that we'll describe a little bit later,


59
00:03:17,664 --> 00:03:20,133 line:-1
to allow writing in this area.


60
00:03:20,200 --> 00:03:25,539 line:-2
And this created a great new way
of adding a new reminder very easily.


61
00:03:25,939 --> 00:03:29,209 line:-2
There's also a small set
of editing gestures


62
00:03:29,276 --> 00:03:31,845 line:-1
that people need to learn only once,


63
00:03:31,912 --> 00:03:36,450 line:-2
and they work exactly the same anywhere
where you can edit text with Scribble.


64
00:03:37,017 --> 00:03:39,820 line:-2
We can see an example
when composing an e-mail.


65
00:03:39,887 --> 00:03:43,457 line:0
You can draw a horizontal line
to select text


66
00:03:43,524 --> 00:03:46,460 line:0
and perform the normal
text editing actions.


67
00:03:47,127 --> 00:03:51,098 line:0
You can also scratch out some text
that you want to delete.


68
00:03:51,164 --> 00:03:55,669 line:0
This all adds up to create a reliable
and familiar interaction model.


69
00:03:56,136 --> 00:03:59,640 line:-2
Our final design principle
is Pencil friendliness.


70
00:03:59,706 --> 00:04:03,677 line:-2
The iOS user interface
was designed primarily for Touch,


71
00:04:03,744 --> 00:04:06,480 line:-2
and it works really, really well
for Pencil input.


72
00:04:07,114 --> 00:04:10,651 line:-2
But you'll notice a few places
where we made some adjustments,


73
00:04:10,717 --> 00:04:12,719 line:-1
and I want to highlight some of them.


74
00:04:13,320 --> 00:04:15,889 line:-1
Let's start with reducing distractions.


75
00:04:15,956 --> 00:04:19,892 line:-2
A good example we see here
is placeholders in text fields.


76
00:04:20,594 --> 00:04:23,564 line:-2
When you start writing into a field
that has a placeholder,


77
00:04:23,630 --> 00:04:27,501 line:-2
it disappears
to avoid overlapping the strokes,


78
00:04:27,568 --> 00:04:29,770 line:-1
and that keeps the handwriting readable.


79
00:04:30,337 --> 00:04:34,007 line:-2
You get this behavior for free
with Standard Text Controls.


80
00:04:35,576 --> 00:04:39,279 line:-2
Stable layout means that the text field
and the text inside


81
00:04:39,346 --> 00:04:43,150 line:-2
should not move or scroll
while you're writing.


82
00:04:43,851 --> 00:04:46,520 line:-2
As an example, you might know
that some search fields


83
00:04:46,587 --> 00:04:49,957 line:-2
tend to shift their position
when they become focused.


84
00:04:50,023 --> 00:04:51,792 line:-1
This is great for a keyboard,


85
00:04:51,859 --> 00:04:56,129 line:-2
but it can be a problem when you're trying
to write into it with your Pencil.


86
00:04:57,664 --> 00:05:02,536 line:-2
So Scribble detects when you're writing
on a search field that moves,


87
00:05:02,603 --> 00:05:05,539 line:-1
and it waits for you to make a pause


88
00:05:05,606 --> 00:05:09,142 line:-2
before making it first responder
and inserting the text.


89
00:05:09,676 --> 00:05:13,547 line:-2
If you use the standard search controller,
you get this behavior for free.


90
00:05:14,214 --> 00:05:18,051 line:-2
But if you have a custom field
with a similar shifting animation,


91
00:05:18,118 --> 00:05:19,987 line:-1
you need to tell Scribble about this,


92
00:05:20,053 --> 00:05:23,257 line:-2
and you can request delaying
focusing of the field


93
00:05:23,323 --> 00:05:25,125 line:-1
to adopt the same behavior.


94
00:05:26,593 --> 00:05:30,931 line:-2
It's also really important that
there's always enough space to write.


95
00:05:30,998 --> 00:05:33,367 line:-1
A good example is the Messages app.


96
00:05:33,433 --> 00:05:37,171 line:-2
You'll notice that the message field
is near the corner of the screen,


97
00:05:37,237 --> 00:05:41,341 line:-2
so there's really not a lot of space
to write more than a few words.


98
00:05:42,409 --> 00:05:45,512 line:-2
So Messages detects
that you're using Scribble,


99
00:05:45,579 --> 00:05:47,814 line:-1
and it adjusts the size of the field


100
00:05:47,881 --> 00:05:51,685 line:-2
so it's much more comfortable to write -
even a longer sentence.


101
00:05:52,853 --> 00:05:56,823 line:-2
We know many apps have a similar layout,
especially messaging apps,


102
00:05:56,890 --> 00:06:00,561 line:-2
and we recommend
that you apply the same behavior


103
00:06:00,627 --> 00:06:03,530 line:-2
using the API
that we'll show a little bit later.


104
00:06:05,165 --> 00:06:08,235 line:-2
So let's see an overview of the APIs
that support Scribble,


105
00:06:08,302 --> 00:06:10,871 line:-1
some existing ones and some new ones.


106
00:06:12,206 --> 00:06:16,910 line:-2
Scribble relies on
existing Text Input APIs from iOS:


107
00:06:16,977 --> 00:06:21,548 line:-2
Standard Text Controls
and the UIKit Text Input infrastructure.


108
00:06:21,615 --> 00:06:25,786 line:-2
There's also two new APIs
that we're introducing in iOS 14


109
00:06:25,853 --> 00:06:28,789 line:-2
that allow customizing
the behavior of Scribble.


110
00:06:29,890 --> 00:06:33,360 line:-2
Let's talk about
the existing Text Input APIs first.


111
00:06:34,294 --> 00:06:38,532 line:-2
Standard Text Controls
are things like text fields, text views,


112
00:06:38,599 --> 00:06:41,602 line:-2
and search fields
that you can get from UIKit.


113
00:06:41,668 --> 00:06:45,138 line:-2
It also includes
standard editable web content


114
00:06:45,205 --> 00:06:47,774 line:-1
and forms in web pages through WebKit.


115
00:06:48,675 --> 00:06:51,512 line:-2
The great news is that
all of these work out of the box,


116
00:06:51,578 --> 00:06:53,881 line:-1
and they work really well with Scribble.


117
00:06:53,947 --> 00:06:57,050 line:-2
We recommend that you stick to these
as much as possible,


118
00:06:57,117 --> 00:07:01,355 line:-2
and they're highly customizable
to adapt to the look and feel of your app.


119
00:07:01,955 --> 00:07:05,659 line:-2
Now, it's worth noting that password fields
are not supported by Scribble,


120
00:07:05,726 --> 00:07:09,796 line:-2
because the recommended way
of entering passwords is through AutoFill.


121
00:07:10,464 --> 00:07:13,200 line:-2
Next is the UIKit Text Input
infrastructure.


122
00:07:14,001 --> 00:07:16,970 line:-2
If you have a custom
text editing experience,


123
00:07:17,037 --> 00:07:20,307 line:-2
there's a set of protocols
that you must implement


124
00:07:20,374 --> 00:07:24,945 line:-2
for your view to work with the keyboard
and with the iOS text input system.


125
00:07:26,046 --> 00:07:30,851 line:-2
Scribble relies on these same APIs
to talk to your text view.


126
00:07:31,919 --> 00:07:33,887 line:-2
In particular,
it's really important to have


127
00:07:33,954 --> 00:07:37,991 line:-2
a very good and complete implementation
of UITextInput.


128
00:07:39,026 --> 00:07:43,564 line:-2
This is how Scribble gets information
about the text content, the selection,


129
00:07:43,630 --> 00:07:46,600 line:-2
and how it's gonna make changes
to the text in your view.


130
00:07:47,668 --> 00:07:51,305 line:-2
We also recommend that you use
UITextInteraction


131
00:07:51,371 --> 00:07:55,008 line:-2
to get the standard cursor
and selection UI from the system,


132
00:07:55,075 --> 00:07:57,077 line:-1
so you don't have to implement your own.


133
00:07:57,878 --> 00:08:00,314 line:0
If you're interested in more details
about these topics,


134
00:08:00,380 --> 00:08:05,552 line:0
check out these great talks
from previous WWDC 2012 and 2017.


135
00:08:05,619 --> 00:08:10,390 line:-2
And now Evan's gonna give us an overview
on how to use the new APIs


136
00:08:10,457 --> 00:08:13,827 line:-2
to customize the behavior of Scribble
in your app.


137
00:08:14,561 --> 00:08:15,596 line:0
Thank you, Daniel.


138
00:08:15,662 --> 00:08:18,899 line:0
As Daniel mentioned,
when using standard UIKit text controls,


139
00:08:18,966 --> 00:08:20,300 line:0
Scribble will just work.


140
00:08:20,834 --> 00:08:23,971 line:-2
But there are cases that may require
customizing the Scribble experience.


141
00:08:24,037 --> 00:08:28,108 line:-2
And to support those customizations,
we've introduced UIScribbleInteraction


142
00:08:28,175 --> 00:08:31,178 line:-2
and UIIndirectScribbleInteraction
in iOS 14.


143
00:08:32,513 --> 00:08:34,615 line:-1
First, UIScribbleInteraction.


144
00:08:36,149 --> 00:08:38,452 line:-1
Interactions are added to views.


145
00:08:38,519 --> 00:08:41,755 line:-2
Here, we've added UIScribbleInteraction
to a text field.


146
00:08:42,956 --> 00:08:44,791 line:-1
The interaction has a delegate,


147
00:08:44,858 --> 00:08:48,562 line:-2
and this delegate is where an app
can customize the Scribble experience.


148
00:08:49,596 --> 00:08:52,399 line:-2
For example,
disabling Scribble on the view,


149
00:08:52,466 --> 00:08:54,735 line:-2
delaying that view
from becoming first responder


150
00:08:54,801 --> 00:08:57,337 line:-1
until handwriting has momentarily paused,


151
00:08:57,404 --> 00:09:00,941 line:-2
or simply being informed
when Scribble handwriting begins or ends.


152
00:09:01,575 --> 00:09:05,579 line:-2
Now let's go through some practical cases
of how to use UIScribbleInteraction.


153
00:09:06,513 --> 00:09:08,982 line:-2
Some apps have added
in-line completion fields.


154
00:09:09,049 --> 00:09:11,785 line:-1
For example, Spotlight's search field.


155
00:09:11,852 --> 00:09:14,221 line:-1
This works well for keyboard input,


156
00:09:14,288 --> 00:09:16,690 line:-2
but would visually interfere
with handwriting.


157
00:09:18,759 --> 00:09:22,496 line:0
By using a UIScribbleInteraction
previously added to this field,


158
00:09:22,563 --> 00:09:26,033 line:0
it's possible to check if the view
is currently handling handwriting


159
00:09:26,099 --> 00:09:28,535 line:0
and to update
the completion text accordingly.


160
00:09:28,602 --> 00:09:30,804 line:0
In this case, simply by hiding it.


161
00:09:31,405 --> 00:09:33,974 line:-2
Now, in order to optimize UI layout
for Scribble,


162
00:09:34,041 --> 00:09:36,944 line:-2
we need to know if handwriting is likely,
or if it has completed.


163
00:09:38,412 --> 00:09:40,514 line:0
One place to do this
is in the initial appearance


164
00:09:40,581 --> 00:09:42,216 line:0
or setup of the UI.


165
00:09:42,282 --> 00:09:45,085 line:0
Here, the app uses
UIScribbleInteraction's class property,


166
00:09:45,152 --> 00:09:47,020 line:0
isPencilInputExpected.


167
00:09:47,087 --> 00:09:48,655 line:0
When the property is true,


168
00:09:48,722 --> 00:09:50,924 line:0
the app makes the text area
a little larger.


169
00:09:52,793 --> 00:09:54,962 line:0
Rather than changing the UI
as part of view setup,


170
00:09:55,028 --> 00:09:56,797 line:0
it is also possible to update it


171
00:09:56,864 --> 00:09:59,833 line:0
after the user finishes writing
via the delegate method,


172
00:09:59,900 --> 00:10:01,802 line:0
scribbleInteractionDidFinishWriting.


173
00:10:02,302 --> 00:10:06,106 line:-2
And it's worth noting,
in both of the approaches we just saw,


174
00:10:06,173 --> 00:10:09,343 line:-2
the UI is changed
while the user is not writing.


175
00:10:09,743 --> 00:10:12,646 line:0
Some apps mix drawing and editable text.


176
00:10:12,713 --> 00:10:17,417 line:0
In cases like this, it makes sense
to disable Scribble to allow drawing.


177
00:10:18,252 --> 00:10:20,420 line:0
This can be done
with ScribbleInteraction's


178
00:10:20,487 --> 00:10:22,523 line:0
shouldBeginAt delegate method,


179
00:10:22,589 --> 00:10:25,392 line:0
by returning "false"
when the app is in a drawing mode.


180
00:10:27,227 --> 00:10:29,596 line:-2
Now let's look at
UIIndirectScribbleInteraction.


181
00:10:31,465 --> 00:10:33,367 line:-1
Just like UIScribbleInteraction,


182
00:10:33,433 --> 00:10:36,937 line:-2
UIIndirectScribbleInteraction
is also added to a view.


183
00:10:37,571 --> 00:10:39,306 line:-1
This interaction is used by Reminders


184
00:10:39,373 --> 00:10:41,842 line:-2
to allow writing below the list
of current reminders,


185
00:10:41,909 --> 00:10:43,343 line:-1
to create a new one.


186
00:10:44,478 --> 00:10:46,246 line:-1
This is also the interaction to use


187
00:10:46,313 --> 00:10:49,483 line:-2
for UI that would become editable
in response to a tap gesture.


188
00:10:51,585 --> 00:10:53,720 line:-1
And this interaction has a delegate.


189
00:10:53,787 --> 00:10:56,790 line:-2
This delegate provides
the system information about elements.


190
00:10:57,624 --> 00:11:00,694 line:-2
Elements are regions within the view
that can be written into.


191
00:11:01,261 --> 00:11:04,665 line:-2
There can be more than one element,
and the size of the elements can vary.


192
00:11:05,032 --> 00:11:06,733 line:-1
Let's take a closer look


193
00:11:06,800 --> 00:11:10,237 line:-2
at how UIIndirectScribbleInteraction
was used in our sample app.


194
00:11:11,805 --> 00:11:15,275 line:-2
Our sample app allows adding
an engraving to the back of a laptop.


195
00:11:15,342 --> 00:11:19,546 line:-2
This engraving element does not
become editable until it is tapped.


196
00:11:19,613 --> 00:11:21,148 line:-1
So I can tap with my finger,


197
00:11:21,215 --> 00:11:24,284 line:-2
a text field is installed
that becomes first responder,


198
00:11:24,351 --> 00:11:25,919 line:-1
and I can enter my name.


199
00:11:25,986 --> 00:11:28,222 line:-1
But if I remove the text,


200
00:11:28,288 --> 00:11:31,692 line:-2
and instead try to write
with Apple Pencil, it doesn't work.


201
00:11:31,758 --> 00:11:35,796 line:-2
That's because the engraving field alone
is not editable text input.


202
00:11:35,863 --> 00:11:38,098 line:-2
So let's add
a UIIndirectScribbleInteraction


203
00:11:38,165 --> 00:11:39,800 line:-1
to make this work with Scribble.


204
00:11:41,168 --> 00:11:43,637 line:-2
To surface the engraving field
as a writable area,


205
00:11:43,704 --> 00:11:46,039 line:-2
we install
a UIIndirectScribbleInteraction.


206
00:11:47,474 --> 00:11:49,443 line:-2
Next we need to implement
the delegate methods


207
00:11:49,510 --> 00:11:51,178 line:-1
describing the writable regions.


208
00:11:52,513 --> 00:11:54,781 line:-2
The first thing is to implement
the delegate method


209
00:11:54,848 --> 00:11:58,118 line:-2
that provides a list of identifiers
for all writable elements.


210
00:11:59,319 --> 00:12:03,457 line:-2
In this case, the engraving field
has a single writable region.


211
00:12:03,524 --> 00:12:07,027 line:-2
So we can call the completion handler
immediately with an identifier.


212
00:12:07,794 --> 00:12:10,430 line:-2
Next, we need to provide
the system information


213
00:12:10,497 --> 00:12:12,032 line:-1
about the element's location.


214
00:12:13,400 --> 00:12:17,371 line:-2
This is done with the frameForElement
delegate method.


215
00:12:17,437 --> 00:12:21,141 line:-2
It is possible to return smaller regions
that can be written into,


216
00:12:21,208 --> 00:12:23,610 line:-2
but we want to allow writing
into the whole view.


217
00:12:23,677 --> 00:12:26,013 line:-2
So, in this case,
we just return the bounds.


218
00:12:27,814 --> 00:12:29,716 line:-1
Next, we need to handle the case


219
00:12:29,783 --> 00:12:32,119 line:-2
where the system requests
we focus a responder


220
00:12:32,186 --> 00:12:33,687 line:-1
that supports text input.


221
00:12:34,488 --> 00:12:37,624 line:-2
This is done with
the focusElementIfNeeded method.


222
00:12:39,092 --> 00:12:41,562 line:-1
If a text field is not installed,


223
00:12:41,628 --> 00:12:44,097 line:-2
we'll create it
and add one to the view hierarchy.


224
00:12:44,898 --> 00:12:48,502 line:0
Then we will ensure the installed
text field becomes first responder.


225
00:12:49,503 --> 00:12:53,207 line:0
And finally, return that text field
with the completion handler.


226
00:12:55,375 --> 00:12:57,678 line:-2
The last piece of information
required by the system


227
00:12:57,744 --> 00:13:00,280 line:-2
is to indicate if a particular element
is focused.


228
00:13:01,815 --> 00:13:04,051 line:-1
We only have the one field in this case.


229
00:13:04,117 --> 00:13:06,720 line:-2
So if we have a field,
and it's first responder,


230
00:13:06,787 --> 00:13:10,123 line:-2
we'll return "true,"
otherwise, we'll always return "false."


231
00:13:11,525 --> 00:13:14,895 line:-2
Now if I try writing my name
in the engraving area,


232
00:13:14,962 --> 00:13:16,296 line:-1
I can do so.


233
00:13:22,903 --> 00:13:25,272 line:-2
So just to recap the APIs
that support Scribble:


234
00:13:25,806 --> 00:13:29,743 line:0
Standard Text Controls in the system
from UIKit and WebKit will just work.


235
00:13:30,377 --> 00:13:32,813 line:0
Scribble will also work
for custom text editors


236
00:13:32,880 --> 00:13:35,015 line:0
that implement the text input protocols.


237
00:13:35,883 --> 00:13:40,287 line:0
And to customize Scribble, this is done
via the two interactions added in iOS 14.


238
00:13:41,255 --> 00:13:43,891 line:-2
So grab your Pencil
and test your apps with Scribble.


239
00:13:44,725 --> 00:13:48,662 line:-2
See how you fit into the design principles
we covered earlier


240
00:13:48,729 --> 00:13:52,266 line:-2
and use Standard Text Controls
to get most of these behaviors for free.


241
00:13:53,066 --> 00:13:55,702 line:-2
And apply those Scribble interactions
for that final polish,


242
00:13:55,769 --> 00:13:59,573 line:-2
things like creating space to write
and allowing Scribble where expected.


243
00:14:00,541 --> 00:14:01,542 line:-1
Thank you for watching,


244
00:14:01,608 --> 00:14:05,579 line:-2
and we look forward to your app
Scribbling to success in iOS 14.

