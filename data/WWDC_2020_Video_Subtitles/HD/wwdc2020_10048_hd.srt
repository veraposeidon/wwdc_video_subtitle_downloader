1
00:00:00,167 --> 00:00:02,269 line:-1
[chimes]


2
00:00:03,904 --> 00:00:06,773 line:-1
Hello and welcome to WWDC.


3
00:00:08,275 --> 00:00:12,779 line:0
Hi, my name is Matthew Koonce
and I'm a watchOS SwiftUI engineer.


4
00:00:13,881 --> 00:00:16,817 line:0
I'll be joined later by my colleague,
August.


5
00:00:17,284 --> 00:00:20,821 line:-2
Today we get to dive into
all the awesome things you can build


6
00:00:20,888 --> 00:00:22,756 line:-1
with SwiftUI complications.


7
00:00:22,823 --> 00:00:27,194 line:-2
Complications are how you display timely
and relevant information about your app


8
00:00:27,261 --> 00:00:28,795 line:-1
on the watch face.


9
00:00:28,862 --> 00:00:31,665 line:-2
Some of the most powerful
and useful complications


10
00:00:32,131 --> 00:00:34,368 line:-1
are able to distill complex information


11
00:00:34,434 --> 00:00:37,237 line:-2
into something that
can be quickly understood at a glance.


12
00:00:37,471 --> 00:00:42,409 line:-2
For example, the UVI complication features
vertical gauges with a color gradient


13
00:00:42,809 --> 00:00:46,180 line:-2
which quickly tells me that
sunscreen would be a good choice today.


14
00:00:47,447 --> 00:00:50,384 line:-2
Building complications like the UVI chart
can be challenging.


15
00:00:50,984 --> 00:00:52,619 line:-1
But with SwiftUI complications,


16
00:00:52,686 --> 00:00:56,223 line:-2
you can bring your knowledge about SwiftUI
right to the watch face.


17
00:00:56,924 --> 00:00:57,958 line:-1
And of course,


18
00:00:58,025 --> 00:01:01,528 line:-2
we can't have SwiftUI complications
without Xcode previews.


19
00:01:02,462 --> 00:01:06,333 line:-2
Now you can view your complications
on different faces at the same time.


20
00:01:07,301 --> 00:01:08,302 line:-1
So today


21
00:01:08,368 --> 00:01:12,573 line:-2
we're going to take a look at how you can
build your own complication in SwiftUI.


22
00:01:12,973 --> 00:01:13,974 line:-1
To do that,


23
00:01:14,274 --> 00:01:18,612 line:-2
we'll look at the new API in ClockKit
and SwiftUI that make this all possible.


24
00:01:19,813 --> 00:01:23,250 line:-2
We'll see how our SwiftUI views work
with watch face tinting


25
00:01:24,184 --> 00:01:26,019 line:-1
and some best practices.


26
00:01:26,086 --> 00:01:28,155 line:-1
Let's get started with the API.


27
00:01:29,456 --> 00:01:32,593 line:-2
In order to use SwiftUI views
in complications,


28
00:01:32,659 --> 00:01:35,429 line:-2
we turn to our trusty
complication templates.


29
00:01:36,096 --> 00:01:38,298 line:0
ClockKit has dozens
of predefined templates


30
00:01:38,365 --> 00:01:41,368 line:0
that provide easy-to-use layouts
for your complications.


31
00:01:42,336 --> 00:01:43,837 line:-1
New in watchOS 7,


32
00:01:43,904 --> 00:01:46,106 line:-2
we've added templates
that take a SwiftUI view


33
00:01:46,173 --> 00:01:48,609 line:-1
right alongside other ClockKit providers.


34
00:01:49,443 --> 00:01:51,545 line:-2
These templates
are for the Graphic Corner,


35
00:01:52,112 --> 00:01:54,147 line:-1
Circular, Rectangular...


36
00:01:55,249 --> 00:01:56,717 line:-1
and Extra Large families.


37
00:01:57,451 --> 00:01:59,520 line:-1
But where SwiftUI really shines


38
00:01:59,586 --> 00:02:02,356 line:-2
are the templates that take
just a single SwiftUI view.


39
00:02:03,056 --> 00:02:06,326 line:-2
These templates provide
a full canvas for drawing in each family.


40
00:02:07,361 --> 00:02:09,795 line:-2
And
the GraphicRectangularFullView template


41
00:02:09,863 --> 00:02:13,367 line:-2
is a brand-new template that gives you
an even larger canvas for drawing.


42
00:02:14,635 --> 00:02:18,105 line:-2
And with that canvas, you can use SwiftUI
to do just about anything.


43
00:02:18,805 --> 00:02:21,975 line:-2
SwiftUI's powerful drawing library
is at your full disposal,


44
00:02:22,242 --> 00:02:25,279 line:-2
allowing you to easily create
novel designs for complications


45
00:02:25,345 --> 00:02:27,648 line:-2
like this awesome tide chart
from Dawn Patrol.


46
00:02:28,549 --> 00:02:32,152 line:-2
So that's how you can get your
SwiftUI views into ClockKit templates.


47
00:02:32,619 --> 00:02:34,388 line:-1
We've also made changes in SwiftUI


48
00:02:34,454 --> 00:02:37,691 line:-2
that bring more power and flexibility
to complications.


49
00:02:38,825 --> 00:02:40,761 line:-1
First, let's talk about text.


50
00:02:41,428 --> 00:02:45,199 line:-2
We've updated text to be aware of
the complication family it will appear on.


51
00:02:45,832 --> 00:02:48,969 line:-2
The default font size
will change for each family.


52
00:02:49,703 --> 00:02:54,107 line:-2
For example, this same text shown here
in the GraphicRectangular complication


53
00:02:54,608 --> 00:02:57,177 line:-2
will be much larger
on the Extra Large face.


54
00:02:57,845 --> 00:03:00,848 line:-2
The default font has also changed
to SF Rounded


55
00:03:00,914 --> 00:03:02,983 line:-1
to look right at home on the face.


56
00:03:04,418 --> 00:03:06,854 line:-2
Additionally,
text features new date formatters


57
00:03:06,920 --> 00:03:08,655 line:-1
that work great on the watch face.


58
00:03:09,389 --> 00:03:12,926 line:-2
In particular,
the relative, offset and timer styles


59
00:03:12,993 --> 00:03:16,029 line:-2
will be automatically kept up-to-date
by the watch face.


60
00:03:17,097 --> 00:03:18,232 line:-1
For example,


61
00:03:18,732 --> 00:03:20,901 line:-1
using the relative style for this date


62
00:03:20,968 --> 00:03:23,604 line:-2
will make sure it's always accurate
relative to now.


63
00:03:24,671 --> 00:03:26,406 line:-1
Same for the timer style.


64
00:03:26,473 --> 00:03:29,610 line:-2
I can place the date
right inside an interpolated string


65
00:03:29,676 --> 00:03:33,247 line:-2
and it will automatically show
the time remaining on my Sourdough Timer.


66
00:03:34,515 --> 00:03:36,783 line:-2
So that's the improvements
we've made to text.


67
00:03:37,084 --> 00:03:39,453 line:-1
Next, let's look at two popular controls


68
00:03:39,520 --> 00:03:42,756 line:-2
from complications
that we've brought right into SwiftUI.


69
00:03:43,290 --> 00:03:45,292 line:-1
Those are Progress View and Gauge.


70
00:03:46,527 --> 00:03:49,229 line:-2
Both Progress View and Gauge
are super useful,


71
00:03:49,296 --> 00:03:51,064 line:-1
and each have a specific purpose.


72
00:03:52,065 --> 00:03:55,536 line:-2
Progress View is great for information
that progresses in a linear fashion,


73
00:03:55,602 --> 00:03:56,637 line:-1
like music.


74
00:03:57,337 --> 00:04:01,175 line:-2
And the Gauge is great for information
that varies over time, like temperature.


75
00:04:02,042 --> 00:04:03,577 line:-1
Let's start with Progress View.


76
00:04:05,078 --> 00:04:06,747 line:-1
In its most simple setup,


77
00:04:06,813 --> 00:04:10,584 line:-2
Progress View just has a single value
and can be set with a style.


78
00:04:11,618 --> 00:04:14,221 line:-2
In this case,
we're using the Circular style.


79
00:04:15,556 --> 00:04:19,192 line:-2
We can also add a label to the
Progress View which describes its purpose.


80
00:04:19,493 --> 00:04:22,296 line:-2
In our case,
we're using the music note SF symbol.


81
00:04:23,497 --> 00:04:25,866 line:-1
Finally, Progress Views can be tinted,


82
00:04:26,567 --> 00:04:29,136 line:-2
completing the look
of our musical Progress View.


83
00:04:30,137 --> 00:04:32,539 line:-2
Progress View
also comes in a linear style.


84
00:04:33,073 --> 00:04:36,076 line:-2
And all the same API works
just like you'd expect.


85
00:04:37,010 --> 00:04:39,112 line:-1
Next, let's look at Gauge.


86
00:04:40,247 --> 00:04:43,784 line:-2
Gauge is a superpowerful control
with a ton of configuration options.


87
00:04:43,851 --> 00:04:44,852 line:-1
Let's take a look.


88
00:04:46,386 --> 00:04:50,123 line:-2
Here we have a simple Gauge that shows
the soil acidity level of our garden.


89
00:04:50,657 --> 00:04:52,759 line:-1
It's using the CircularGaugeStyle.


90
00:04:55,229 --> 00:04:57,464 line:-1
We can also add a current value label


91
00:04:57,531 --> 00:04:59,299 line:-2
that will appear
in the center of the Gauge


92
00:04:59,366 --> 00:05:01,368 line:-1
to provide some context at a glance.


93
00:05:03,070 --> 00:05:06,840 line:-2
For some Gauges, it might be useful
to label the start and end values.


94
00:05:07,441 --> 00:05:09,943 line:-2
In our case,
our Gauge is from three to ten.


95
00:05:10,310 --> 00:05:13,947 line:-2
So let's add those labels
with the minimum and maximum value labels.


96
00:05:15,215 --> 00:05:18,519 line:-2
Like Progress View,
Gauge can also be tinted with a color.


97
00:05:19,019 --> 00:05:20,554 line:-1
Here we add a green color.


98
00:05:21,989 --> 00:05:25,359 line:-2
But where Gauges really come
into their own is with a gradient tint.


99
00:05:25,993 --> 00:05:27,694 line:-1
By using SwiftUI's gradient,


100
00:05:27,761 --> 00:05:31,231 line:-2
I can easily specify the color stops
for my acidity Gauge.


101
00:05:32,766 --> 00:05:35,235 line:-1
Gauge also comes in a linear style


102
00:05:35,302 --> 00:05:37,271 line:-2
which is great for
Rectangular complications


103
00:05:37,337 --> 00:05:39,173 line:-1
like on the Modular Compact face.


104
00:05:40,407 --> 00:05:41,808 line:-1
So that's the Gauge API.


105
00:05:42,009 --> 00:05:45,245 line:-2
But one thing to remember
is that both Gauge and Progress Views


106
00:05:45,312 --> 00:05:48,749 line:-2
are available in SwiftUI as a new control
that you can build as needed.


107
00:05:49,449 --> 00:05:54,121 line:-2
For example, we can use a Circular Gauge
in a Rectangular complication...


108
00:05:55,322 --> 00:05:57,491 line:-1
or use Gauges right in the app.


109
00:05:58,792 --> 00:06:02,396 line:-2
So that's the new API we've added
to SwiftUI and ClockKit.


110
00:06:03,163 --> 00:06:07,000 line:-2
Next, let's talk about one of
my favorite features of watch faces,


111
00:06:07,401 --> 00:06:08,535 line:-1
watch face tinting.


112
00:06:10,370 --> 00:06:13,574 line:-2
Watch faces support
a full range of tinted colors,


113
00:06:13,907 --> 00:06:16,243 line:-1
allowing for even more personalization.


114
00:06:17,044 --> 00:06:22,115 line:-2
Complications take on this face color,
giving each face a unique style.


115
00:06:23,283 --> 00:06:27,287 line:-2
Some faces, like the Solar Dial face,
take this a step further


116
00:06:27,921 --> 00:06:33,026 line:-2
and alters the tint color and the color of
each complication as the day progresses.


117
00:06:34,027 --> 00:06:37,531 line:-2
So understanding how your complication
will behave on a tinted watch face


118
00:06:37,598 --> 00:06:40,434 line:-2
is intrinsic to
the design of your complication.


119
00:06:41,201 --> 00:06:43,971 line:-2
So let's dive into
how watch face tinting works.


120
00:06:44,938 --> 00:06:49,243 line:-2
I have a full color view here
of a yellow apple over a blue circle.


121
00:06:50,143 --> 00:06:52,579 line:-2
When the watch face
becomes tinted by a color,


122
00:06:52,646 --> 00:06:55,282 line:-2
one of two possible tinting effects
will be applied.


123
00:06:56,683 --> 00:06:58,852 line:-1
The first is a desaturated tint.


124
00:06:59,620 --> 00:07:02,122 line:-1
And the second is a color opacity tint.


125
00:07:03,423 --> 00:07:06,493 line:-2
Let's start by talking about
desaturated tinting.


126
00:07:07,794 --> 00:07:11,632 line:-2
Desaturated tinting is the default
tinting mode for complications.


127
00:07:12,566 --> 00:07:16,970 line:-2
When the watch face is tinted, it
creates a grayscale version of your view.


128
00:07:18,372 --> 00:07:20,908 line:-1
Some faces, like the Extra Large face,


129
00:07:21,241 --> 00:07:24,545 line:-2
may apply a single color
over this desaturated view.


130
00:07:25,379 --> 00:07:28,081 line:-2
Let's see how we can build
a SwiftUI complication


131
00:07:28,148 --> 00:07:30,450 line:-2
that becomes desaturated
on the watch face.


132
00:07:32,586 --> 00:07:37,791 line:-2
Here I have the code for my view which is
a ZStack of a circle and an apple image.


133
00:07:39,026 --> 00:07:41,061 line:-1
On the watch face that looks pretty good.


134
00:07:42,062 --> 00:07:44,264 line:-2
When the watch face color
is changed to red...


135
00:07:45,165 --> 00:07:48,402 line:-2
you can see that
the default desaturation mode kicks in,


136
00:07:49,002 --> 00:07:52,706 line:-2
and the view becomes desaturated
automatically on the watch face.


137
00:07:54,174 --> 00:07:56,143 line:-1
And on the Extra Large face,


138
00:07:56,210 --> 00:07:59,279 line:-2
a single color is applied
over the desaturated view.


139
00:07:59,880 --> 00:08:00,981 line:-1
So that's pretty easy.


140
00:08:01,548 --> 00:08:06,186 line:-2
With no changes to our SwiftUI view,
we get a good tinted complication.


141
00:08:07,821 --> 00:08:12,192 line:-2
With that said, be mindful about the
colors you choose for your complication.


142
00:08:13,460 --> 00:08:16,363 line:-2
If I had instead
chosen colors with a similar brightness,


143
00:08:17,097 --> 00:08:20,334 line:-2
the apple will just disappear
when the view is desaturated.


144
00:08:21,101 --> 00:08:23,971 line:-2
So it's important to consider
how your view will look desaturated


145
00:08:24,037 --> 00:08:25,506 line:-1
when building a complication.


146
00:08:26,607 --> 00:08:28,375 line:-1
So that's desaturated tinting.


147
00:08:28,742 --> 00:08:31,512 line:-1
Next, let's look at color opacity tinting.


148
00:08:32,212 --> 00:08:35,816 line:-2
While desaturated tinting
is the default tinting behavior,


149
00:08:35,883 --> 00:08:40,254 line:-2
color opacity is an alternative
tinting style that we can opt into.


150
00:08:41,221 --> 00:08:45,492 line:-2
This tinting style works by
creating layers within our complication.


151
00:08:46,093 --> 00:08:49,429 line:-2
And then the watch face
applies a color to each layer.


152
00:08:51,265 --> 00:08:53,233 line:-1
Starting with our fullColor view,


153
00:08:53,300 --> 00:08:56,170 line:-2
we first want to identify
the layers of our complication.


154
00:08:57,004 --> 00:08:59,773 line:-1
Watch faces support two distinct layers.


155
00:09:01,074 --> 00:09:04,811 line:-2
In this case, we've chosen the circle
to be separated from the apple.


156
00:09:05,646 --> 00:09:07,381 line:-1
These will now be our two layers.


157
00:09:08,315 --> 00:09:09,917 line:-1
Next, as the name implies,


158
00:09:09,983 --> 00:09:13,287 line:-2
the watch face only considers
the opacity of each view.


159
00:09:14,254 --> 00:09:18,325 line:-2
Since each of these views are at
full opacity, they both become white.


160
00:09:19,493 --> 00:09:23,263 line:-2
Then the watch face applies a color
to the appropriate layer.


161
00:09:23,830 --> 00:09:27,034 line:-2
Each watch face determines
the color applied to each layer.


162
00:09:27,601 --> 00:09:32,706 line:-2
In this case, the watch face determined
that the circle's layer should become red


163
00:09:32,773 --> 00:09:34,942 line:-1
and the apple's layer should remain white.


164
00:09:36,710 --> 00:09:38,645 line:-1
Then the layers are brought back together.


165
00:09:39,847 --> 00:09:44,418 line:-2
It's up to the watch face to define how
the chosen color is applied to each layer.


166
00:09:45,219 --> 00:09:49,923 line:-2
On the Extra Large face, for example,
our apple is white on a red background...


167
00:09:51,258 --> 00:09:54,828 line:-2
but will be red on a white background
on the Meridian face.


168
00:09:56,096 --> 00:09:58,765 line:-1
And other faces, like the Solar Dial face,


169
00:09:58,832 --> 00:10:01,101 line:-2
may apply a different color
to both layers.


170
00:10:02,703 --> 00:10:06,573 line:-2
So let's return to our example,
this time using the Extra Large face


171
00:10:07,040 --> 00:10:10,444 line:-2
and see how we can make
our complication use a color opacity tint.


172
00:10:12,145 --> 00:10:16,550 line:-2
I want my circle and my apple
to each be in their own distinct layer.


173
00:10:17,417 --> 00:10:21,755 line:-2
By default, all view content is
considered to be in the background layer.


174
00:10:23,290 --> 00:10:26,260 line:-2
By applying
the complicationForeground modifier,


175
00:10:26,326 --> 00:10:28,462 line:-1
I've determined that the apple image


176
00:10:28,529 --> 00:10:30,631 line:-2
should be promoted
to the foreground layer.


177
00:10:31,431 --> 00:10:34,201 line:-2
And the circle
will remain in the background layer.


178
00:10:34,268 --> 00:10:38,305 line:-2
Now that I have distinct layers,
color opacity tinting kicks in.


179
00:10:39,506 --> 00:10:41,708 line:-2
When the watch face color
is changed to red...


180
00:10:42,543 --> 00:10:46,146 line:-2
the apple now becomes white
and the circle becomes red.


181
00:10:47,414 --> 00:10:49,516 line:-1
If I change the color of the face again,


182
00:10:50,284 --> 00:10:53,353 line:-2
you'll see that the background
changes right along with it.


183
00:10:53,420 --> 00:10:55,022 line:-1
On the Extra Large face,


184
00:10:55,355 --> 00:10:58,058 line:-2
the background layer
was given the watch face color.


185
00:10:58,659 --> 00:11:00,227 line:-1
Let's look at a different face.


186
00:11:01,295 --> 00:11:05,432 line:-2
On the Meridian face, you'll notice
that the opposite layers are colored.


187
00:11:07,134 --> 00:11:09,436 line:-1
So that's color opacity tinting,


188
00:11:09,503 --> 00:11:13,307 line:-2
where we create distinct opacity layers
within our view hierarchy.


189
00:11:13,941 --> 00:11:17,711 line:-2
Then the watch face applies a color
to these layers for a striking result.


190
00:11:18,745 --> 00:11:19,746 line:-1
In some cases,


191
00:11:19,813 --> 00:11:23,116 line:-2
you may want to make additional changes
to your view for tinting.


192
00:11:23,450 --> 00:11:24,484 line:-1
For example,


193
00:11:25,052 --> 00:11:28,055 line:-2
you may want to change
the background color to use a gradient.


194
00:11:29,056 --> 00:11:31,491 line:-2
Or you may want
to remove the background entirely.


195
00:11:32,426 --> 00:11:35,462 line:-2
We can do that
with the new ComplicationRenderingMode.


196
00:11:36,463 --> 00:11:38,065 line:-1
The rendering mode has two values,


197
00:11:38,732 --> 00:11:42,369 line:-2
fullColor for when this view
is being rendered for a full color face,


198
00:11:43,003 --> 00:11:46,907 line:-2
and tinted for when this view
will be shown on a tinted face.


199
00:11:48,308 --> 00:11:51,044 line:-2
We can get the current value
out of the environment.


200
00:11:52,112 --> 00:11:53,547 line:-1
Let's return to our example


201
00:11:53,614 --> 00:11:55,983 line:-2
and see how we can use
the ComplicationRenderingMode.


202
00:11:57,718 --> 00:12:01,522 line:-2
First, I can use the environment
to get the current rendering mode.


203
00:12:02,789 --> 00:12:07,094 line:-2
Next, let's use the rendering mode
by changing the fill of our circle


204
00:12:07,461 --> 00:12:10,097 line:-2
and the complication
is for color or tinted.


205
00:12:11,598 --> 00:12:12,766 line:-1
We'll add a switch statement


206
00:12:12,833 --> 00:12:15,035 line:-2
to check for
the current value of rendering mode.


207
00:12:17,004 --> 00:12:18,238 line:-1
In the fullColor case,


208
00:12:19,106 --> 00:12:21,308 line:-1
we keep our circle exactly the same


209
00:12:21,375 --> 00:12:22,910 line:-1
using a blue fill color...


210
00:12:23,944 --> 00:12:27,614 line:-2
but in the tinted case,
we're gonna change the fill entirely.


211
00:12:28,415 --> 00:12:32,085 line:0
Instead of a single color,
we're gonna use a linear gradient.


212
00:12:33,420 --> 00:12:34,421 line:0
In particular,


213
00:12:34,488 --> 00:12:37,424 line:0
a gradient that only changes
the opacity of this view.


214
00:12:38,358 --> 00:12:39,560 line:0
Recall from earlier,


215
00:12:39,626 --> 00:12:41,695 line:0
this is a color opacity complication.


216
00:12:42,362 --> 00:12:44,198 line:0
Therefore the opacity of the view


217
00:12:44,264 --> 00:12:47,534 line:0
is the only thing being considered
when it's shown onscreen.


218
00:12:47,601 --> 00:12:50,938 line:0
Since the opacity is the only thing
we can change,


219
00:12:51,004 --> 00:12:54,975 line:0
this gradient goes from an opacity of one
to an opacity of zero.


220
00:12:56,643 --> 00:12:58,445 line:-1
So now we have a tinted complication


221
00:12:58,512 --> 00:13:01,415 line:-2
with an opacity gradient fill
in tinted mode


222
00:13:02,249 --> 00:13:05,018 line:-1
and a blue fill in fullColor mode.


223
00:13:05,085 --> 00:13:07,855 line:-1
That was a lot of information,


224
00:13:07,921 --> 00:13:10,023 line:-1
so let's go over some key takeaways.


225
00:13:10,991 --> 00:13:15,863 line:-2
First, by default, a SwiftUI view
will be desaturated on the watch face.


226
00:13:15,929 --> 00:13:18,899 line:-1
If you want a color opacity complication,


227
00:13:18,966 --> 00:13:20,834 line:-1
use the complicationForeground modifier


228
00:13:20,901 --> 00:13:23,504 line:-2
to group pieces of a view together
for tinting.


229
00:13:24,571 --> 00:13:26,874 line:-1
And finally, the ComplicationRenderingMode


230
00:13:26,940 --> 00:13:29,076 line:-2
allows for advanced customization
of a view


231
00:13:29,142 --> 00:13:31,645 line:-1
for fullColor and tinted complications.


232
00:13:32,212 --> 00:13:34,147 line:-1
So now we've learned about all the new API


233
00:13:34,214 --> 00:13:37,317 line:-2
that you can use
to build amazing SwiftUI complications.


234
00:13:37,851 --> 00:13:41,355 line:-2
But to see it all happen in action,
I'd like to hand it over to August.


235
00:13:42,055 --> 00:13:43,056 line:-1
Thank you, Matthew.


236
00:13:43,123 --> 00:13:45,092 line:-1
I'm August Joki, a watch face engineer,


237
00:13:45,158 --> 00:13:48,328 line:-2
and I'm gonna show you how to use
what we've learned in Xcode.


238
00:13:48,929 --> 00:13:52,900 line:-2
Not long ago, we released new sample code
for creating and updating complications.


239
00:13:52,966 --> 00:13:56,036 line:-2
It's called Coffee Tracker.
Here's what the app looks like.


240
00:13:57,504 --> 00:13:59,239 line:-1
It already includes complications.


241
00:13:59,306 --> 00:14:02,843 line:-2
This'll make a great place to show off
the new SwiftUI complication features.


242
00:14:03,877 --> 00:14:06,446 line:-2
Matthew and I have been working on
incorporating a new SwiftUI view


243
00:14:06,513 --> 00:14:09,149 line:-2
to show the user
their historical caffeine consumption.


244
00:14:09,650 --> 00:14:12,853 line:-2
They can see the equivalent number of
cups of coffee consumed in the past week,


245
00:14:12,920 --> 00:14:14,922 line:-2
and the chart incorporates
the colors of the app.


246
00:14:15,722 --> 00:14:17,224 line:-1
The view's turning out really nice,


247
00:14:17,291 --> 00:14:20,093 line:-2
and we think it'd make
a great Graphic Rectangular complication.


248
00:14:20,160 --> 00:14:21,161 line:-1
Let's go to Xcode


249
00:14:21,228 --> 00:14:23,664 line:-2
to see how to incorporate SwiftUI
and complication templates


250
00:14:23,730 --> 00:14:25,666 line:-2
and how to support
the two options for tinting.


251
00:14:26,433 --> 00:14:28,569 line:-2
While previously working on
the History View of the app,


252
00:14:28,635 --> 00:14:31,872 line:-2
we set up a preview to quickly see
changes we make to our view.


253
00:14:31,939 --> 00:14:35,275 line:-2
Simple views may not need any changes
for inclusion in a complication


254
00:14:35,342 --> 00:14:36,944 line:-1
or only need a new property or two


255
00:14:37,010 --> 00:14:39,546 line:-2
to key off of
for rendering in a complication.


256
00:14:42,516 --> 00:14:44,484 line:-1
But because our chart is fairly complex,


257
00:14:44,551 --> 00:14:48,188 line:-2
we decided we will create a new view
to use in our complication.


258
00:14:48,255 --> 00:14:50,557 line:-2
The separate view allows us
to encapsulate any changes


259
00:14:50,624 --> 00:14:52,492 line:-1
that are specific to the complication.


260
00:14:57,097 --> 00:14:58,799 line:-1
We add the new view to our preview


261
00:14:58,866 --> 00:15:01,435 line:-2
because we want to see
the Apps version of the HistoryView


262
00:15:01,502 --> 00:15:03,971 line:-1
alongside our new ComplicationHistoryView


263
00:15:04,037 --> 00:15:06,273 line:-2
to ensure
we are not accidentally modifying it.


264
00:15:06,874 --> 00:15:09,243 line:-2
Let's take the HistoryChart part
of the HistoryView


265
00:15:09,309 --> 00:15:10,744 line:-1
to use in our complication.


266
00:15:11,979 --> 00:15:13,947 line:0
To preview our complication,
we start by creating


267
00:15:14,014 --> 00:15:17,918 line:0
a FullViewGraphicRectangularTemplate
using the new SwiftUI view.


268
00:15:19,353 --> 00:15:21,221 line:0
But the template
is not a SwiftUI view itself


269
00:15:21,288 --> 00:15:23,390 line:0
so it can't be previewed on its own.


270
00:15:23,457 --> 00:15:24,458 line:0
To address this,


271
00:15:24,525 --> 00:15:27,594 line:0
we've added a new function
to CLKComplicationTemplate:


272
00:15:27,661 --> 00:15:29,296 line:0
previewContext.


273
00:15:29,363 --> 00:15:32,733 line:0
It is defined when both ClockKit
and SwiftUI are imported together.


274
00:15:32,799 --> 00:15:35,269 line:0
The function wraps the template
in a SwiftUI view


275
00:15:35,335 --> 00:15:38,005 line:0
that Previews knows how to transform
into a clock face


276
00:15:38,071 --> 00:15:40,240 line:0
with a complication template set on it.


277
00:15:40,841 --> 00:15:43,443 line:0
Every complication template previewed
is set on a face


278
00:15:43,510 --> 00:15:45,312 line:0
that is best suited for its family.


279
00:15:46,146 --> 00:15:47,347 line:-1
Thanks to the power of SwiftUI,


280
00:15:47,414 --> 00:15:49,716 line:-2
our complication looks almost done
right out of the gate.


281
00:15:50,184 --> 00:15:52,653 line:0
But the default Graphic
Rectangular font size is a bit large


282
00:15:52,719 --> 00:15:54,388 line:0
for the kind of content we are displaying.


283
00:15:54,454 --> 00:15:55,822 line:0
Let's start by fixing that.


284
00:15:57,524 --> 00:15:59,159 line:0
We add a font modifier to the chart


285
00:15:59,226 --> 00:16:02,296 line:0
to set a size more suitable
for displaying in our complication.


286
00:16:03,397 --> 00:16:05,499 line:0
We also wanna take up
all the available space


287
00:16:05,566 --> 00:16:08,268 line:0
for the GraphicRectangular
FullView template.


288
00:16:08,335 --> 00:16:11,505 line:0
Matthew will explain complication
safe areas in more detail later.


289
00:16:12,206 --> 00:16:13,507 line:0
That font size looks great.


290
00:16:13,574 --> 00:16:16,877 line:0
And since we can see our chart is next to
other complications on the watch face,


291
00:16:16,944 --> 00:16:19,646 line:0
we should provide some context
for our complications data.


292
00:16:20,147 --> 00:16:22,749 line:0
Adding a title is a great way
to provide that context.


293
00:16:24,685 --> 00:16:28,055 line:-2
Since this is all SwiftUI,
we can add "Weekly Coffee" as a text


294
00:16:28,121 --> 00:16:31,291 line:-2
and wrap it up together
with the History Chart in a VStack.


295
00:16:31,925 --> 00:16:34,094 line:-1
And now that is looking really polished.


296
00:16:34,161 --> 00:16:36,897 line:-2
But what does our complication look like
when the face is tinted?


297
00:16:36,964 --> 00:16:39,566 line:-2
To find out, let's set
the preview's face color to blue.


298
00:16:42,069 --> 00:16:44,905 line:-2
Nothing is blending together,
but we lost all of our color.


299
00:16:44,972 --> 00:16:48,509 line:-2
Let's use complicationForeground
to make the title adopt the tint color.


300
00:16:50,010 --> 00:16:53,680 line:-2
Now our title's automatically tinted
to match the color of the face.


301
00:16:54,414 --> 00:16:56,149 line:-2
Since we are focusing on
supporting tinting,


302
00:16:56,216 --> 00:16:58,352 line:-1
let's focus our previews on tinting too.


303
00:16:59,486 --> 00:17:03,457 line:0
Now we can see what a multicolor face
looks like right next to a tinted face.


304
00:17:03,524 --> 00:17:05,826 line:0
And I've just noticed
that using complicationForeground


305
00:17:05,893 --> 00:17:08,428 line:0
also made the gradient
and the Gauges disappear.


306
00:17:08,494 --> 00:17:10,696 line:-2
That's because,
as soon as we adopt tinting support,


307
00:17:10,763 --> 00:17:13,467 line:-2
our complication
is no longer getting desaturated.


308
00:17:13,534 --> 00:17:16,703 line:-2
Instead, only the opacity
of our view hierarchy is used.


309
00:17:16,770 --> 00:17:20,240 line:-2
That means everything in the hierarchy
is reduced to their opacity values,


310
00:17:20,307 --> 00:17:22,142 line:-2
the parts marked
with complicationForeground


311
00:17:22,209 --> 00:17:23,210 line:-1
are grouped together


312
00:17:23,277 --> 00:17:25,913 line:-2
and have the same
color wash applied to them.


313
00:17:25,979 --> 00:17:28,649 line:-2
As we learned earlier,
we have another way to work with tinting:


314
00:17:28,715 --> 00:17:31,351 line:-2
the ComplicationRenderingMode
environment value.


315
00:17:31,852 --> 00:17:34,321 line:-2
Let's use it to change
how we render the chart when tinted.


316
00:17:35,055 --> 00:17:38,759 line:-2
But first, let's paint our previews
so that we can watch in real time


317
00:17:38,825 --> 00:17:42,429 line:-2
the complication update as we are
making changes to a different file.


318
00:17:42,930 --> 00:17:45,732 line:-2
Here we have the view
that creates a column for a given day.


319
00:17:48,268 --> 00:17:51,572 line:-2
We add an environment property
for ComplicationRenderingMode


320
00:17:52,272 --> 00:17:55,776 line:-2
and pass the new property
to our custom HistoryGaugeStyle


321
00:17:55,843 --> 00:17:58,478 line:-1
to hide the background when tinted.


322
00:17:59,079 --> 00:18:01,148 line:-2
We can see that the chart
now renders differently


323
00:18:01,215 --> 00:18:02,850 line:-1
from the fullColor case.


324
00:18:04,718 --> 00:18:06,286 line:-1
With ComplicationRenderingMode,


325
00:18:06,353 --> 00:18:08,422 line:-2
we are able to change
pieces of our view hierarchy


326
00:18:08,488 --> 00:18:10,724 line:-2
while keeping the code pads
from drastically diverging


327
00:18:10,791 --> 00:18:12,793 line:-1
between fullColor and tinted rendering.


328
00:18:13,493 --> 00:18:15,963 line:-1
Let's go back to ComplicationHistoryView.


329
00:18:16,797 --> 00:18:19,733 line:-2
We've seen what our new complication
looks like with a blue face color,


330
00:18:19,800 --> 00:18:22,135 line:-2
but what about
the other sample preview colors?


331
00:18:24,004 --> 00:18:27,608 line:-2
We can take advantage of the power
of using ClockKit and SwiftUI together


332
00:18:27,674 --> 00:18:31,778 line:-2
to enumerate the PreviewFaceColors
to see them all at the same time.


333
00:18:32,479 --> 00:18:34,414 line:-2
We can now make sure
our complication looks good


334
00:18:34,481 --> 00:18:38,352 line:-2
with a sampling of different options
a user could set for their face color.


335
00:18:39,219 --> 00:18:42,589 line:-2
I've shown you how easy it is to use
SwiftUI and complication templates,


336
00:18:42,656 --> 00:18:45,492 line:-2
how to quickly support tinting
with complicationForeground


337
00:18:45,559 --> 00:18:47,628 line:-2
and how to make use
of complicationRenderingMode


338
00:18:47,694 --> 00:18:49,630 line:-1
for finer-grained tinting control.


339
00:18:49,696 --> 00:18:53,667 line:-2
And now I'll hand it back to Matthew
to talk about best practices. Thank you.


340
00:18:53,734 --> 00:18:56,603 line:-2
Thanks, August.
That was some pretty cool stuff.


341
00:18:56,670 --> 00:18:59,973 line:-2
SwiftUI makes it really seamless
to create compelling charts


342
00:19:00,040 --> 00:19:01,642 line:-1
like our weekly summary view.


343
00:19:02,142 --> 00:19:04,945 line:-2
It has never been easier
to turn that into a complication.


344
00:19:06,013 --> 00:19:08,682 line:-2
Next, let's talk about
some best practices to consider


345
00:19:08,749 --> 00:19:10,918 line:-2
when building
your own SwiftUI complication.


346
00:19:12,586 --> 00:19:13,921 line:-1
First, it's important to know


347
00:19:13,987 --> 00:19:17,524 line:-2
that tapping anywhere on a complication
will always launch your app.


348
00:19:18,192 --> 00:19:21,228 line:-2
Buttons, gestures
and other interactive elements


349
00:19:21,295 --> 00:19:23,397 line:-1
are not supported in complications.


350
00:19:24,665 --> 00:19:27,467 line:-2
Stick to text, images
and drawing primitives


351
00:19:27,534 --> 00:19:29,136 line:-1
when building your complication.


352
00:19:30,404 --> 00:19:33,240 line:-2
We've added a new runtime warning
to Xcode,


353
00:19:33,307 --> 00:19:37,377 line:-2
in case you try to use a view
that is not compatible with complications.


354
00:19:38,846 --> 00:19:43,450 line:-2
And finally, remember that a complication
is a timeline composed of static views.


355
00:19:44,151 --> 00:19:47,087 line:-2
Therefore, SwiftUI animations
are not supported.


356
00:19:49,022 --> 00:19:50,357 line:-1
We want you to also consider


357
00:19:50,424 --> 00:19:52,626 line:-2
the performance characteristics
of your view.


358
00:19:53,660 --> 00:19:56,630 line:-2
In order to keep the watch face
performing at a high level,


359
00:19:56,697 --> 00:20:00,334 line:-2
every SwiftUI view's performance
is measured before it's shown on screen.


360
00:20:02,102 --> 00:20:06,640 line:-2
Consult the Human Interface Guidelines
and our documentation to ensure you use


361
00:20:06,707 --> 00:20:09,443 line:-2
appropriately sized images
for each complication...


362
00:20:10,911 --> 00:20:15,082 line:-2
and be mindful about the runtime costs
of certain drawing attributes,


363
00:20:15,148 --> 00:20:17,451 line:-1
such as blurs and formatted text,


364
00:20:18,018 --> 00:20:20,420 line:-1
and only use what is absolutely necessary.


365
00:20:21,989 --> 00:20:26,393 line:-2
Note that poorly performing views
may penalize your complication's runtime.


366
00:20:27,861 --> 00:20:29,930 line:-2
Watch out for runtime warnings
like this one


367
00:20:29,997 --> 00:20:32,833 line:-2
regarding the size or complexity
of your view.


368
00:20:34,635 --> 00:20:38,105 line:-2
If your complication is giving
a runtime warning like this,


369
00:20:38,172 --> 00:20:39,907 line:-1
treat it like a build error


370
00:20:39,973 --> 00:20:42,276 line:-2
and make sure you fix it
before shipping your complication


371
00:20:42,342 --> 00:20:44,678 line:-2
for the best experience
for your customers.


372
00:20:46,146 --> 00:20:48,448 line:-1
Finally, some layout best practices.


373
00:20:49,449 --> 00:20:52,186 line:-2
Use the default font size
for each complication


374
00:20:52,252 --> 00:20:54,755 line:-2
as a guide for the kinds of views
that you should build.


375
00:20:56,223 --> 00:21:01,328 line:-2
For example, the Extra Large complication
may have a large canvas for drawing,


376
00:21:01,395 --> 00:21:04,965 line:-2
but its purpose is to provide
large and easy-to-see information.


377
00:21:06,733 --> 00:21:10,137 line:-2
Note that the Circular
and Rectangular complication families


378
00:21:10,204 --> 00:21:12,940 line:-2
will mask your content
to their respective shapes.


379
00:21:14,174 --> 00:21:19,079 line:-2
And the Rectangular Full View complication
features a safe area for layout


380
00:21:19,146 --> 00:21:22,382 line:-2
to help prevent your content
from being clipped on the watch face.


381
00:21:23,550 --> 00:21:25,853 line:-1
This new larger drawing area


382
00:21:25,919 --> 00:21:28,822 line:-2
could be clipped by
the corners of the Apple Watch display


383
00:21:28,889 --> 00:21:30,557 line:-1
on certain watch faces.


384
00:21:31,491 --> 00:21:34,561 line:-2
By default, the safe area
provides you with space that's safe


385
00:21:34,628 --> 00:21:36,597 line:-1
for all complication placements.


386
00:21:37,264 --> 00:21:40,000 line:-2
If you'd like to use
the full area of the complication,


387
00:21:40,067 --> 00:21:42,803 line:-2
like we did
for the Weekly Coffee complication,


388
00:21:42,870 --> 00:21:45,873 line:-2
you can use
the edgesIgnoringSafeArea modifier.


389
00:21:47,140 --> 00:21:49,610 line:-2
This will give you
that little bit of extra space.


390
00:21:50,310 --> 00:21:52,813 line:-2
Be mindful, though,
about the layout of your content


391
00:21:52,880 --> 00:21:54,281 line:-1
to prevent it being clipped.


392
00:21:54,982 --> 00:21:57,117 line:-2
So that was a look
at some of the awesome things


393
00:21:57,184 --> 00:21:59,753 line:-2
that you can now do
with SwiftUI complications.


394
00:22:00,387 --> 00:22:02,523 line:-1
We saw how, for the first time,


395
00:22:02,589 --> 00:22:05,959 line:-2
you can bring your knowledge about SwiftUI
right to the watch face.


396
00:22:07,227 --> 00:22:11,231 line:-2
We saw some great new APIs for Text,
Progress View and Gauge


397
00:22:11,298 --> 00:22:14,067 line:-2
and how our complications are tinted
on the watch face.


398
00:22:15,269 --> 00:22:16,937 line:-1
And how you can use Xcode previews


399
00:22:17,004 --> 00:22:19,573 line:-2
to work on multiple complications
at the same time


400
00:22:19,640 --> 00:22:21,441 line:-1
and on different watch face colors.


401
00:22:22,576 --> 00:22:24,912 line:0
If you've never built
a complication before,


402
00:22:24,978 --> 00:22:26,647 line:0
or you wanna freshen up your knowledge


403
00:22:26,713 --> 00:22:29,616 line:0
about complication templates
and descriptors,


404
00:22:29,683 --> 00:22:32,853 line:0
check out the "Create Complications
for Apple Watch" talk.


405
00:22:34,087 --> 00:22:36,256 line:0
And to make sure your complications
are always showing


406
00:22:36,323 --> 00:22:38,792 line:0
the right information at the right time,


407
00:22:38,859 --> 00:22:41,895 line:0
I highly recommend watching
"Keep Your Complications Up to Date."


408
00:22:42,896 --> 00:22:43,897 line:0
Thank you.


409
00:22:43,964 --> 00:22:45,899 line:-1
[chimes]

