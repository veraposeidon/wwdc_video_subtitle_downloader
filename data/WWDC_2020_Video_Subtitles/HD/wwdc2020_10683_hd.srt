1
00:00:03,971 --> 00:00:06,874 line:0
Hello, and welcome to WWDC.


2
00:00:08,842 --> 00:00:12,379 line:0
Hello, WWDC. This is Swan's Quest.


3
00:00:12,980 --> 00:00:15,682 line:-2
I'm Rob,
your host as we take an inside look


4
00:00:15,749 --> 00:00:19,920 line:-2
at an exciting Swift Playgrounds challenge
our crack team has built for you.


5
00:00:19,987 --> 00:00:21,755 line:-1
Are you ready?


6
00:00:21,822 --> 00:00:26,193 line:-2
In this episode, we're going to build upon
our knowledge of Timer and ToneOutput.


7
00:00:27,094 --> 00:00:30,697 line:-2
In this third episode,
you again start back in the lizard's hut


8
00:00:30,764 --> 00:00:34,201 line:-2
to uncover the mystery
of another scroll from the Swan.


9
00:00:34,268 --> 00:00:35,769 line:-1
I don't want to spoil it for you,


10
00:00:35,836 --> 00:00:39,773 line:-2
but I can tell you, to pass this challenge
you need to understand tempo


11
00:00:39,840 --> 00:00:42,109 line:-1
and how to play notes of different length.


12
00:00:42,709 --> 00:00:45,712 line:-2
We're going to start with a crash course
on music theory.


13
00:00:45,779 --> 00:00:49,349 line:-2
You're going to learn about the difference
between quarter notes and half notes.


14
00:00:49,416 --> 00:00:52,586 line:-2
The second challenge
only used a single note length,


15
00:00:52,653 --> 00:00:57,024 line:-2
so we'll revisit our timer, and talk about
how to create variable durations.


16
00:00:57,090 --> 00:01:00,928 line:-2
And finally, we're going to wrap up
with another exciting side quest.


17
00:01:01,662 --> 00:01:02,996 line:-1
Let's talk about rhythm.


18
00:01:03,063 --> 00:01:07,768 line:-2
We've already discussed in prior episodes
how to play notes of different pitch.


19
00:01:07,835 --> 00:01:09,937 line:-1
But as you can see in the Swan's scroll,


20
00:01:10,003 --> 00:01:12,806 line:-2
we need to learn how to play notes
of different length.


21
00:01:13,407 --> 00:01:15,242 line:-1
Since everyone can't read music,


22
00:01:15,309 --> 00:01:18,478 line:-2
let's discuss three different lengths
of notes as an example.


23
00:01:18,946 --> 00:01:22,983 line:-2
Here we see the quarter note,
the half note, and the dotted half note.


24
00:01:23,951 --> 00:01:28,021 line:-2
Most tempos are defined by the quarter
note, so we'll use that as our baseline.


25
00:01:28,488 --> 00:01:30,457 line:0
A half note is twice as long,


26
00:01:30,524 --> 00:01:34,228 line:0
and a dotted half note
is three times as long as a quarter note.


27
00:01:34,895 --> 00:01:40,267 line:-2
The tempo for the song the Swan wants
to hear is 120 beats per minute.


28
00:01:40,334 --> 00:01:43,537 line:-2
That means there are 120 quarter notes
in a minute.


29
00:01:43,604 --> 00:01:46,573 line:-2
From there, we calculate the interval
for our timer


30
00:01:46,640 --> 00:01:49,676 line:-2
so we can play each length of note
in the scroll.


31
00:01:50,644 --> 00:01:54,615 line:-2
In Music.swift, we've included protocols
for you to implement.


32
00:01:54,681 --> 00:01:59,052 line:-2
The first is Pitches, to capture
the frequency for the ToneOutput.


33
00:01:59,453 --> 00:02:01,722 line:-1
An example could look like this.


34
00:02:02,523 --> 00:02:06,894 line:-2
You'll want to add additional cases
for each pitch in the Swan's scroll.


35
00:02:08,095 --> 00:02:12,432 line:-2
Next, we need to represent a note
as a tone of a certain length.


36
00:02:12,499 --> 00:02:16,203 line:-2
The length should be provided
as a multiple of a quarter note.


37
00:02:16,270 --> 00:02:19,640 line:-1
For example, a half note would return 2.0


38
00:02:19,706 --> 00:02:22,543 line:-1
and an eighth note would return 0.5.


39
00:02:23,210 --> 00:02:25,546 line:-1
An example could look like this.


40
00:02:26,213 --> 00:02:28,882 line:-2
Again, you'll need to add cases
to the enum


41
00:02:28,949 --> 00:02:31,385 line:-1
for each length of note in the scroll.


42
00:02:31,451 --> 00:02:35,989 line:-2
Next we need to update our timer code.
So let's check in with Stephen.


43
00:02:37,457 --> 00:02:40,227 line:-2
As Rob mentioned,
we need to update our timer code


44
00:02:40,294 --> 00:02:42,763 line:-1
to allow for variable-length notes.


45
00:02:43,463 --> 00:02:45,132 line:-1
Before we get into our approach,


46
00:02:45,199 --> 00:02:48,902 line:-2
let's update our code
to use the types that Rob just showed you.


47
00:02:48,969 --> 00:02:53,707 line:-2
First, let's update our sample to use
the pitch and note types we just defined.


48
00:02:54,141 --> 00:02:57,177 line:-2
Unfortunately,
this isn't going to work out of the box


49
00:02:57,244 --> 00:03:01,281 line:-2
because the TimeInterval for the timer
does not respect our note length.


50
00:03:01,915 --> 00:03:05,219 line:-2
Remember that the ToneOutput
emits a continuous tone


51
00:03:05,285 --> 00:03:07,487 line:-1
until it is told to stop.


52
00:03:07,554 --> 00:03:11,058 line:-2
Our approach to updating the timer
can take advantage of this.


53
00:03:11,758 --> 00:03:14,728 line:-1
First, we need to set the timer's interval


54
00:03:14,795 --> 00:03:17,531 line:-2
to the duration
of the shortest note's length.


55
00:03:18,198 --> 00:03:22,069 line:-2
To do that, we'll update our NoteProtocol
to add a property,


56
00:03:22,135 --> 00:03:24,404 line:-1
shortestSupportedNoteLength.


57
00:03:24,471 --> 00:03:27,341 line:-1
Then we update our note implementation.


58
00:03:28,175 --> 00:03:31,311 line:-2
Since the quarter note is
the shortest note in the Swan's scroll,


59
00:03:31,378 --> 00:03:33,881 line:-2
we'll choose the quarter note
to keep things simple.


60
00:03:34,548 --> 00:03:36,617 line:-1
Finally, we update our timer's interval


61
00:03:36,683 --> 00:03:40,354 line:-2
to the shortest note length
multiplied by our tempo.


62
00:03:40,420 --> 00:03:43,457 line:-1
This example assumes 120 beats per minute,


63
00:03:43,524 --> 00:03:47,261 line:-2
which means the length of a quarter note
is 500 milliseconds.


64
00:03:47,327 --> 00:03:50,631 line:-2
Next, we need to subdivide
our larger notes


65
00:03:50,697 --> 00:03:53,066 line:-1
into a flattened array of pitches.


66
00:03:54,468 --> 00:03:58,539 line:-2
We need to send the ToneOutput
a set of pitch instructions


67
00:03:58,605 --> 00:04:00,774 line:-1
for each timer interval.


68
00:04:00,841 --> 00:04:04,011 line:-2
Since our smallest supported note
is the quarter note,


69
00:04:04,077 --> 00:04:06,313 line:-1
we only send one instruction.


70
00:04:06,380 --> 00:04:10,250 line:-2
Likewise,
half notes send two instructions.


71
00:04:10,317 --> 00:04:13,987 line:-2
Dotted half notes
would send three instructions, and so on.


72
00:04:15,055 --> 00:04:18,325 line:-2
To subdivide your notes,
you'll need to implement another method


73
00:04:18,392 --> 00:04:20,594 line:-1
in your NoteProtocol implementation.


74
00:04:21,461 --> 00:04:23,997 line:-1
"Subdivide" returns an array of pitches


75
00:04:24,064 --> 00:04:27,601 line:-2
that can be collected
and sent to the ToneOutput.


76
00:04:28,669 --> 00:04:34,074 line:-2
Now, in our timer loop, we first create
the subdivided array of pitches.


77
00:04:34,141 --> 00:04:36,210 line:-1
Then we update our timer loop


78
00:04:36,276 --> 00:04:39,580 line:-2
to iterate over the pitches,
instead of the notes array.


79
00:04:40,547 --> 00:04:44,585 line:-2
This completed example
demonstrates all of the API you need


80
00:04:44,651 --> 00:04:46,086 line:-1
to complete the challenge.


81
00:04:47,054 --> 00:04:49,857 line:-2
Rob, do you have another side quest
for our audience?


82
00:04:50,490 --> 00:04:54,161 line:-2
I sure do, Stephen. But before we get
to that, I need to warn you.


83
00:04:54,795 --> 00:04:58,665 line:-2
This side quest will contain spoilers
for this chapter's challenge.


84
00:04:58,732 --> 00:05:02,269 line:-2
If you want to complete the challenge
first, hit pause on this video


85
00:05:02,336 --> 00:05:04,972 line:-2
and come back
after you've completed the challenge.


86
00:05:05,038 --> 00:05:06,039 line:-1
Good luck!


87
00:05:07,341 --> 00:05:09,142 line:-1
Okay, are you ready?


88
00:05:09,209 --> 00:05:11,879 line:-2
The Swan's challenge
was to play "Ode to Joy,"


89
00:05:11,945 --> 00:05:14,448 line:-2
and the scroll provided
all of the notes for you.


90
00:05:14,515 --> 00:05:19,019 line:-2
Let's see if you can upgrade that code
to play bass chords underneath it.


91
00:05:19,086 --> 00:05:20,988 line:-1
I just have one hint for you.


92
00:05:21,855 --> 00:05:26,159 line:-2
You can layer tones on top of one another
by using multiple timers.


93
00:05:27,127 --> 00:05:29,129 line:-1
During this episode we gave you tips


94
00:05:29,196 --> 00:05:31,665 line:-2
for completing the third challenge
in Swan's Quest.


95
00:05:31,732 --> 00:05:34,935 line:-2
We talked about rhythm
and how tempo is defined.


96
00:05:35,002 --> 00:05:38,172 line:-2
Then we discussed how to use
a single, fixed-duration timer


97
00:05:38,238 --> 00:05:41,775 line:-2
with subdivided pitches
to play notes of different length.


98
00:05:42,509 --> 00:05:44,244 line:-1
Good luck, have fun,


99
00:05:44,311 --> 00:05:48,148 line:-2
and join us in the forums to share
your solutions for the side quests.


100
00:05:48,215 --> 00:05:50,083 line:-1
We'd love to hear how you did.

