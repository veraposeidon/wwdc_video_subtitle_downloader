1
00:00:03,804 --> 00:00:06,874 line:-1
Hello and welcome to WWDC.


2
00:00:12,112 --> 00:00:14,781 line:-2
Hello and welcome.
My name is Michael Ochs.


3
00:00:14,848 --> 00:00:17,050 line:-2
I'm a frameworks engineer
on the UIKit team,


4
00:00:17,117 --> 00:00:21,021 line:-2
and in this video we're going to talk
about lists in UICollectionView.


5
00:00:24,391 --> 00:00:26,293 line:-1
What you can see here is the architecture


6
00:00:26,360 --> 00:00:29,196 line:-2
that we consider part of
a modern Collection View setup,


7
00:00:29,263 --> 00:00:33,267 line:0
and this diagram is covered in detail
in "Advances in Collection View."


8
00:00:34,234 --> 00:00:37,504 line:0
There are individual videos
for the different parts of this diagram,


9
00:00:37,571 --> 00:00:42,142 line:0
and in this video we're covering
list configuration and list cell.


10
00:00:43,143 --> 00:00:46,914 line:-2
But let's first talk about what
lists in collection views actually are.


11
00:00:47,714 --> 00:00:52,953 line:-2
Lists in iOS 14 give you UITableView-like
appearances in Collection View.


12
00:00:53,020 --> 00:00:57,057 line:-2
We built it on top of Compositional Layout
which we introduced in iOS 13.


13
00:00:57,124 --> 00:01:00,394 line:-2
That makes it very flexible
and highly customizable.


14
00:01:01,895 --> 00:01:06,066 line:-2
We also greatly improved the self-sizing
support specifically for lists


15
00:01:06,133 --> 00:01:08,869 line:-2
and are making self-sizing
the new default behavior


16
00:01:08,936 --> 00:01:11,271 line:-1
when using lists in UICollectionView.


17
00:01:11,338 --> 00:01:13,607 line:-2
What that means is,
you no longer need to worry


18
00:01:13,674 --> 00:01:16,143 line:-2
about manually calculating
the height of your cells,


19
00:01:16,210 --> 00:01:19,313 line:-2
but instead, you can simply
build your cells using auto layout,


20
00:01:19,379 --> 00:01:22,516 line:-2
and Collection View
will take care of the rest for you.


21
00:01:23,350 --> 00:01:26,453 line:-2
If you do require manual sizing, though,
you can still do this


22
00:01:26,520 --> 00:01:29,823 line:-2
by overriding
preferredLayoutAttributesFittingAttributes


23
00:01:29,890 --> 00:01:31,925 line:-1
on your cell sub-classes.


24
00:01:33,160 --> 00:01:35,829 line:-2
But let's circle back
to the customization aspect


25
00:01:35,896 --> 00:01:39,066 line:-2
and take a look at what I mean
when I say "highly customizable."


26
00:01:40,601 --> 00:01:42,536 line:-1
Here you can see an example of an app


27
00:01:42,603 --> 00:01:47,407 line:-2
that shows all my recently used emojis
in the top row, scrolling orthogonally.


28
00:01:48,308 --> 00:01:51,912 line:-2
Below that, you see an outline
that sorts all the emojis by group


29
00:01:51,979 --> 00:01:54,047 line:-1
and has this hierarchy built into it.


30
00:01:54,114 --> 00:01:55,415 line:-1
And then at the bottom,


31
00:01:55,482 --> 00:01:58,886 line:-2
we have something that looks
a lot more like a UITableView,


32
00:01:58,952 --> 00:02:02,155 line:-2
and in addition
you can also swipe each of the cells


33
00:02:02,222 --> 00:02:04,157 line:-1
to mark your favorite emojis.


34
00:02:04,958 --> 00:02:07,528 line:-2
What you see here
is a single collection view


35
00:02:07,594 --> 00:02:10,964 line:-2
using a combination of lists
and Compositional Layout.


36
00:02:11,532 --> 00:02:15,836 line:-2
Before we dig deeper into how this works,
let's look at the components of a list.


37
00:02:18,138 --> 00:02:20,774 line:-1
In iOS 14, we're offering a new type


38
00:02:20,841 --> 00:02:23,844 line:-2
called
UICollectionLayoutListConfiguration.


39
00:02:23,911 --> 00:02:27,281 line:-2
This is the only new type
that is required on the layout side


40
00:02:27,347 --> 00:02:29,550 line:-1
to build lists in Collection View.


41
00:02:30,250 --> 00:02:32,286 line:-1
UICollectionLayoutListConfiguration


42
00:02:32,352 --> 00:02:34,855 line:-2
is built on top of
NSCollectionLayoutSection


43
00:02:34,922 --> 00:02:37,891 line:-2
as well as
UICollectionViewCompositionalLayout,


44
00:02:37,958 --> 00:02:41,128 line:-2
which are both parts of the existing
Compositional Layout system


45
00:02:41,195 --> 00:02:43,197 line:-1
we introduced in iOS 13.


46
00:02:44,398 --> 00:02:47,568 line:-2
We're not going to cover Compositional
Layout in detail in this talk,


47
00:02:47,634 --> 00:02:51,238 line:-2
so if you're not familiar with it,
I highly recommend you to check out


48
00:02:51,305 --> 00:02:55,242 line:0
"Advances in Collection View Layout"
from WWDC 2019.


49
00:02:57,411 --> 00:03:00,581 line:-2
But now,
let's take a look at list configuration.


50
00:03:02,015 --> 00:03:04,718 line:-2
List configuration gives you
the same appearances


51
00:03:04,785 --> 00:03:07,888 line:-2
that you already know
from Table View as styles:


52
00:03:07,955 --> 00:03:10,023 line:-1
plain, grouped and inset-grouped.


53
00:03:10,624 --> 00:03:15,295 line:-2
But we're also introducing two new styles
exclusive to lists in UICollectionView


54
00:03:15,362 --> 00:03:18,866 line:-2
which we call "sidebar"
and "sidebar plain."


55
00:03:18,932 --> 00:03:20,467 line:-1
And you can use these new styles


56
00:03:20,534 --> 00:03:23,770 line:-2
to build amazing multi-column apps
on iPadOS 14.


57
00:03:24,638 --> 00:03:26,540 line:-1
In addition to the general appearance,


58
00:03:26,607 --> 00:03:30,611 line:-2
list configuration also gives you
the option to show or hide separators


59
00:03:30,677 --> 00:03:33,814 line:-2
as well as to configure
the headers and footers of your list.


60
00:03:34,748 --> 00:03:37,918 line:-2
All this terminology on list configuration
should sound familiar to you


61
00:03:37,985 --> 00:03:40,254 line:-1
if you have used UITableView before.


62
00:03:40,754 --> 00:03:43,023 line:-2
But we did add a couple
of new bells and whistles


63
00:03:43,090 --> 00:03:45,492 line:-2
that we're going to talk about
in a minute.


64
00:03:45,559 --> 00:03:48,929 line:-2
But first,
let's take a look at how to create a list.


65
00:03:51,131 --> 00:03:52,799 line:-1
The easiest way to create a list


66
00:03:52,866 --> 00:03:55,802 line:-2
is to create
a UICollectionLayoutListConfiguration,


67
00:03:55,869 --> 00:03:57,104 line:-1
give it an appearance,


68
00:03:57,171 --> 00:03:59,439 line:-2
and then create
a UICollectionViewCompositionalLayout


69
00:03:59,506 --> 00:04:01,208 line:-1
using this configuration.


70
00:04:02,476 --> 00:04:05,846 line:-2
In this example,
we're using the inset-grouped style,


71
00:04:05,913 --> 00:04:09,783 line:-2
which will make this look exactly like
an inset-grouped UITableView,


72
00:04:09,850 --> 00:04:12,653 line:-2
with every section in this layout
looking the same.


73
00:04:13,854 --> 00:04:16,523 line:-1
So it's very similar to UITableView,


74
00:04:16,589 --> 00:04:19,660 line:-2
and I recommend you
to use this approach when possible.


75
00:04:20,327 --> 00:04:23,597 line:-2
However, there is a much more
powerful way to create a list,


76
00:04:23,664 --> 00:04:26,333 line:-1
and we call this the per-section setup.


77
00:04:27,968 --> 00:04:31,638 line:-2
In the per-section setup,
you use the exact same configuration,


78
00:04:31,705 --> 00:04:34,875 line:-2
but instead of creating
a compositional layout with it,


79
00:04:34,942 --> 00:04:39,813 line:-2
you create an NSCollectionLayoutSection
using this configuration.


80
00:04:43,183 --> 00:04:47,921 line:-2
This code can then be used inside
the existing section-provider initializer


81
00:04:47,988 --> 00:04:49,456 line:-1
on Compositional Layout,


82
00:04:49,523 --> 00:04:53,026 line:-2
which will then be called
for every section in your collection view,


83
00:04:53,093 --> 00:04:55,863 line:-2
allowing you to return
an individual layout definition


84
00:04:55,929 --> 00:04:58,398 line:-1
specific to the particular section.


85
00:05:00,100 --> 00:05:02,970 line:-2
What you see here will result
in the exact same design


86
00:05:03,036 --> 00:05:05,138 line:-1
as the simple setup I showed you earlier.


87
00:05:05,205 --> 00:05:07,774 line:-1
However, now that we have this set up,


88
00:05:07,841 --> 00:05:11,778 line:-2
we can start customizing our layout
on a per-section basis.


89
00:05:13,680 --> 00:05:17,484 line:-2
For example, here, for the first section,
I'm returning a custom grid layout


90
00:05:17,551 --> 00:05:21,021 line:-2
that I built using the existing
Compositional Layout APIs.


91
00:05:21,088 --> 00:05:23,824 line:-2
This is very powerful
and can be used for layouts


92
00:05:23,891 --> 00:05:26,527 line:-2
like the one you saw earlier in the video,
where I showed you


93
00:05:26,593 --> 00:05:30,063 line:-2
the orthogonally scrolling section
of my recently used emojis.


94
00:05:30,764 --> 00:05:34,501 line:-2
Now that you've seen how to create lists
in UICollectionView,


95
00:05:34,568 --> 00:05:38,539 line:-2
let's talk about how to configure your
headers and footers in a list section.


96
00:05:40,507 --> 00:05:43,243 line:-2
Headers and footers in lists
in collection views


97
00:05:43,310 --> 00:05:46,980 line:-2
work a bit different than
what you are used to from UITableView.


98
00:05:47,047 --> 00:05:49,149 line:-2
Headers and footers
in lists in UICollectionView


99
00:05:49,216 --> 00:05:53,120 line:-2
have to be explicitly enabled,
and there are two ways to do this.


100
00:05:54,955 --> 00:05:59,293 line:-2
The first way is to register your headers
and footers as supplementary views.


101
00:05:59,359 --> 00:06:01,762 line:-2
In this example,
we're going to configure a header,


102
00:06:01,828 --> 00:06:03,897 line:-1
but the same code also works for footers.


103
00:06:03,964 --> 00:06:07,134 line:-2
Simply set either the header
or the footer mode on the configuration


104
00:06:07,201 --> 00:06:08,502 line:-1
to "supplementary."


105
00:06:10,070 --> 00:06:12,072 line:-1
Next, when configured that way,


106
00:06:12,139 --> 00:06:14,942 line:-2
Collection View will ask you to provide
a supplementary view


107
00:06:15,008 --> 00:06:18,011 line:-2
when it's time to render
your header or footer on-screen.


108
00:06:19,112 --> 00:06:20,914 line:-1
The easiest way to provide this view


109
00:06:20,981 --> 00:06:24,585 line:-2
is through a supplementary-view provider
on your diffable data source,


110
00:06:24,651 --> 00:06:26,887 line:-2
but you can also implement
the equivalent method


111
00:06:26,954 --> 00:06:28,956 line:-1
on your UICollectionView delegate.


112
00:06:31,191 --> 00:06:34,194 line:-2
Inside of this callback,
you can then check the element kind


113
00:06:34,261 --> 00:06:38,632 line:-2
for either elementKindSectionHeader
or elementKindSectionFooter


114
00:06:38,699 --> 00:06:41,168 line:-2
and configure and return
the appropriate view.


115
00:06:42,202 --> 00:06:45,239 line:-2
It's important to keep in mind
that when using this approach,


116
00:06:45,305 --> 00:06:49,343 line:-2
you have to provide a supplementary view
when Collection View asks you to.


117
00:06:49,409 --> 00:06:52,212 line:-2
If you return nil
in the supplementary-view callback,


118
00:06:52,279 --> 00:06:54,081 line:-1
Collection View will assert.


119
00:06:54,648 --> 00:06:59,186 line:-2
So if some sections in your layout
require a header while others don't,


120
00:06:59,253 --> 00:07:02,556 line:-2
simply use the per-section configuration
that I showed you earlier


121
00:07:02,623 --> 00:07:05,092 line:-2
and set the mode
to either "supplementary" or "none,"


122
00:07:05,158 --> 00:07:08,896 line:-2
depending on whether this particular
section should show a header or not.


123
00:07:09,496 --> 00:07:11,331 line:-1
I mentioned there are two options.


124
00:07:11,398 --> 00:07:14,234 line:-2
The second option
is only available for headers,


125
00:07:14,301 --> 00:07:18,305 line:-2
and is enabled by setting the header mode
to firstItemInSection.


126
00:07:18,939 --> 00:07:21,542 line:-2
This tells the collection view
to configure the first cell


127
00:07:21,608 --> 00:07:24,011 line:-2
in this particular section
to look like a header.


128
00:07:25,279 --> 00:07:28,982 line:0
This is the mode we're recommending
when using hierarchical data structures


129
00:07:29,049 --> 00:07:31,351 line:0
and the new section-snapshot APIs.


130
00:07:31,418 --> 00:07:35,689 line:0
You can learn all about how this works
in "Advances in Diffable Data Source."


131
00:07:36,223 --> 00:07:38,559 line:-2
However,
keep in mind that when using this mode,


132
00:07:38,625 --> 00:07:40,727 line:-2
your data source needs to be
aware of this,


133
00:07:40,794 --> 00:07:43,230 line:-1
because the first item in your data source


134
00:07:43,297 --> 00:07:46,600 line:-2
no longer represents
the actual content of your section


135
00:07:46,667 --> 00:07:50,304 line:-2
but rather the header,
probably just a title, of the section.


136
00:07:50,737 --> 00:07:53,841 line:-2
Now that we have covered
the layout of lists in Collection View,


137
00:07:53,907 --> 00:07:56,276 line:-1
let's talk about the presentation side.


138
00:07:56,343 --> 00:08:01,215 line:-2
In iOS 14, we are introducing
a new UICollectionView cell subclass


139
00:08:01,281 --> 00:08:03,617 line:-1
called UICollectionViewListCell.


140
00:08:06,353 --> 00:08:07,621 line:-1
It's worth mentioning that,


141
00:08:07,688 --> 00:08:10,524 line:-2
staying true to the compositional nature
of collection views,


142
00:08:10,591 --> 00:08:14,995 line:-2
you can use a list cell anywhere a regular
collection-view cell is expected,


143
00:08:15,062 --> 00:08:19,266 line:-2
and also you can just use any
UICollectionView cell with list sections.


144
00:08:19,766 --> 00:08:23,203 line:-2
So you can just pick the bits and pieces
of the API that you need


145
00:08:23,270 --> 00:08:26,406 line:-2
in order to achieve the design
that you are aiming for.


146
00:08:27,307 --> 00:08:31,411 line:-2
Let's take a look at what the pieces are
that list cell can help you with.


147
00:08:33,679 --> 00:08:38,719 line:0
List cell has more fine-grained support
to configure the insets of separators


148
00:08:38,784 --> 00:08:41,421 line:0
as well as the indentation
of your cell's content.


149
00:08:42,289 --> 00:08:43,991 line:0
In contrast to UITableView,


150
00:08:44,057 --> 00:08:47,027 line:0
swipe actions are now
also a feature of the cell.


151
00:08:48,128 --> 00:08:51,131 line:0
Furthermore, we have
a greatly improved accessories API,


152
00:08:51,198 --> 00:08:54,134 line:0
and of course you have access
to the default system content


153
00:08:54,201 --> 00:08:56,937 line:0
and background configurations
that you can learn all about


154
00:08:57,004 --> 00:08:59,206 line:0
in the video "Modern Cell Configuration."


155
00:09:02,543 --> 00:09:04,278 line:-1
So let's talk about separators.


156
00:09:06,413 --> 00:09:08,182 line:-1
Here you can see an example of a cell


157
00:09:08,248 --> 00:09:11,952 line:-2
that is rendering an image and a label
and a separator beneath it.


158
00:09:12,019 --> 00:09:14,054 line:-1
It's a pretty common layout.


159
00:09:14,121 --> 00:09:16,056 line:-1
However, as you might have noticed,


160
00:09:16,123 --> 00:09:19,226 line:-2
the layout you can see here
is actually not correct.


161
00:09:19,660 --> 00:09:23,297 line:-2
The separator is supposed to line up
with the primary content of your cell,


162
00:09:23,363 --> 00:09:25,632 line:-2
which in this example
is not the image view


163
00:09:25,699 --> 00:09:27,601 line:-1
but rather the label of the cell.


164
00:09:27,668 --> 00:09:31,405 line:-2
So on the leading side,
the separator is supposed to be inset


165
00:09:31,471 --> 00:09:33,640 line:-1
to match the edge of this label.


166
00:09:34,675 --> 00:09:35,876 line:-1
Like this.


167
00:09:37,077 --> 00:09:38,345 line:-1
On UITableView,


168
00:09:38,412 --> 00:09:40,714 line:-2
this is done by providing
a point-based value


169
00:09:40,781 --> 00:09:42,349 line:-1
called a separator inset.


170
00:09:42,916 --> 00:09:45,752 line:-2
This was pretty easy
when this API was introduced,


171
00:09:45,819 --> 00:09:47,955 line:-1
because you probably already had a method


172
00:09:48,021 --> 00:09:51,325 line:-2
that manually calculated
the x-offset of your label,


173
00:09:51,391 --> 00:09:53,227 line:-1
so you could use the same method


174
00:09:53,293 --> 00:09:56,363 line:-2
to also configure the separator inset
with the same value.


175
00:09:56,930 --> 00:09:59,333 line:-1
However, in the modern auto-layout world,


176
00:09:59,399 --> 00:10:01,568 line:-1
where you have safe-area insets,


177
00:10:01,635 --> 00:10:05,506 line:-2
layout margins,
dynamic font sizes and SF symbols,


178
00:10:05,572 --> 00:10:07,474 line:-1
it's not that easy anymore.


179
00:10:07,541 --> 00:10:09,776 line:-1
Today we have a highly dynamic environment


180
00:10:09,843 --> 00:10:12,746 line:-2
where all these values
could change at any time.


181
00:10:13,213 --> 00:10:17,484 line:-2
With dynamic fonts and SF symbols,
even the size of your image could change


182
00:10:17,551 --> 00:10:19,987 line:-2
depending on the preferred font size
of your users,


183
00:10:20,053 --> 00:10:22,623 line:-1
and then alter the position of the label.


184
00:10:22,689 --> 00:10:26,493 line:-2
So it's pretty hard to know up front
where the label is going to end up.


185
00:10:27,160 --> 00:10:29,563 line:-2
In list cell,
we're introducing a new concept


186
00:10:29,630 --> 00:10:32,299 line:-1
we're calling the separator layout guide.


187
00:10:32,866 --> 00:10:37,304 line:-2
This layout guide works a bit different
than the existing layout guides in UIKit.


188
00:10:37,371 --> 00:10:40,707 line:-2
Instead of constraining your content
to this layout guide,


189
00:10:40,774 --> 00:10:43,744 line:-2
you constrain this layout guide
to your content,


190
00:10:43,810 --> 00:10:47,481 line:-2
so it's the opposite of what you're
used to when working with layout guides.


191
00:10:47,948 --> 00:10:50,350 line:-2
The easiest way to set up
the separator layout guide


192
00:10:50,417 --> 00:10:52,920 line:-1
is to configure you cell's layout first,


193
00:10:52,986 --> 00:10:55,756 line:-2
and once your cell looks the way
you intend it to,


194
00:10:55,822 --> 00:10:58,725 line:-1
simply add a single additional constraint.


195
00:10:59,159 --> 00:11:02,129 line:-2
Constrain the separatorLayoutGuide's
leading anchor


196
00:11:02,196 --> 00:11:03,730 line:-1
to your label's leading anchor


197
00:11:03,797 --> 00:11:07,067 line:-2
or to whatever the primary content is
in your cell.


198
00:11:07,134 --> 00:11:09,102 line:-1
List cell, together with list section,


199
00:11:09,169 --> 00:11:12,439 line:-2
will then make sure to automatically keep
the separator aligned


200
00:11:12,506 --> 00:11:14,508 line:-1
with the primary content of your cell.


201
00:11:16,243 --> 00:11:19,680 line:-2
Note that if you're using the
system-provided content configurations,


202
00:11:19,746 --> 00:11:23,584 line:-2
it will do this automatically for you,
and you don't have to worry about this.


203
00:11:24,351 --> 00:11:26,420 line:-1
But if you have custom cell layouts,


204
00:11:26,486 --> 00:11:30,090 line:-2
this is an easy way to make sure
the separator is positioned correctly.


205
00:11:33,360 --> 00:11:35,262 line:-1
Now let's talk about swipe actions.


206
00:11:38,265 --> 00:11:42,836 line:-2
In contrast to UITableView, swipe actions
are now a feature of list cell.


207
00:11:43,370 --> 00:11:46,106 line:-2
You configure them together
with the content of your cell.


208
00:11:46,173 --> 00:11:49,877 line:-2
So wherever you configure the image view
or the labels of your cell,


209
00:11:49,943 --> 00:11:54,047 line:-2
you can now also set the leading
or trailing swipe-actions configuration.


210
00:11:55,148 --> 00:11:58,418 line:0
This requires communication
between the cell and the layout,


211
00:11:58,485 --> 00:12:00,554 line:0
so swipe actions are only supported


212
00:12:00,621 --> 00:12:03,190 line:0
if your cell is rendered
inside of a section


213
00:12:03,257 --> 00:12:06,326 line:0
that was configured
using a list configuration.


214
00:12:07,561 --> 00:12:12,199 line:-2
If you require the dynamic nature of the
swipe-action API we had on UITableView,


215
00:12:12,266 --> 00:12:14,368 line:-2
where you only create
the swipe configuration


216
00:12:14,434 --> 00:12:16,303 line:-1
when the swipe is about to start,


217
00:12:16,370 --> 00:12:19,606 line:0
you can override the leading or trailing
swipe-actions configuration getter


218
00:12:19,673 --> 00:12:22,009 line:0
and then create
the configuration in there.


219
00:12:22,543 --> 00:12:24,545 line:0
We will make sure to only call the getter


220
00:12:24,611 --> 00:12:27,314 line:0
when the user actually attempts
to swipe this cell.


221
00:12:30,551 --> 00:12:32,219 line:-1
A word of caution.


222
00:12:32,286 --> 00:12:34,421 line:-2
In the action handler
of your swipe actions,


223
00:12:34,488 --> 00:12:38,292 line:-2
make sure to never capture the index path
of the cell you are configuring.


224
00:12:38,358 --> 00:12:41,662 line:-1
The index path is not a stable identifier.


225
00:12:41,728 --> 00:12:43,964 line:-1
The index path of this cell changes


226
00:12:44,031 --> 00:12:47,134 line:-2
whenever you're inserting
or deleting content above it,


227
00:12:47,201 --> 00:12:50,437 line:-2
which doesn't necessarily reload
this particular cell.


228
00:12:51,371 --> 00:12:55,676 line:-2
So if you use a stored index path
to fetch the data model of the cell


229
00:12:55,742 --> 00:12:57,845 line:-1
when the user triggers a swipe action,


230
00:12:57,911 --> 00:13:00,881 line:-2
you might actually operate
on the data of another cell.


231
00:13:01,582 --> 00:13:04,084 line:-2
This is particularly dangerous
for the delete action,


232
00:13:04,151 --> 00:13:06,253 line:-1
as you might delete the wrong data.


233
00:13:07,187 --> 00:13:10,157 line:-2
Instead,
either capture the data model directly


234
00:13:10,224 --> 00:13:14,728 line:-2
or a stable identifier that you can use
to identify the content of this cell.


235
00:13:15,362 --> 00:13:18,131 line:-2
Diffable data source
and its stable item identifiers,


236
00:13:18,198 --> 00:13:21,068 line:-2
as well as the new
cell-registration type in iOS 14,


237
00:13:21,134 --> 00:13:23,136 line:-1
are a perfect fit for this.


238
00:13:24,972 --> 00:13:27,140 line:-1
Next, let's talk about accessories,


239
00:13:29,309 --> 00:13:33,080 line:-2
On UITableView,
the accessories API was fairly limited.


240
00:13:33,146 --> 00:13:36,049 line:-2
You had access to an accessory type
and an accessory view,


241
00:13:36,116 --> 00:13:37,784 line:-1
which were mutually exclusive


242
00:13:37,851 --> 00:13:40,954 line:-2
and were only relevant
for the trailing side of your cell.


243
00:13:42,089 --> 00:13:44,591 line:-1
List cell offers many new accessory types


244
00:13:44,658 --> 00:13:46,760 line:-2
and also allows you
to configure accessories


245
00:13:46,827 --> 00:13:49,730 line:-2
for both the trailing
and the leading side of the cell,


246
00:13:49,796 --> 00:13:53,567 line:-2
and you can even configure multiple
accessories on the same side.


247
00:13:55,369 --> 00:13:57,871 line:-1
Furthermore, where in UITableView cell


248
00:13:57,938 --> 00:14:00,340 line:-2
accessories were more like
decoration views,


249
00:14:00,407 --> 00:14:03,410 line:-2
in list cell
they can enable functionality.


250
00:14:05,279 --> 00:14:08,849 line:-2
For example, if you configure a cell
with the reorder accessory,


251
00:14:08,916 --> 00:14:12,119 line:-2
we will automatically put
the collection view in reordering mode


252
00:14:12,186 --> 00:14:14,188 line:-1
when the user taps this accessory,


253
00:14:14,254 --> 00:14:17,691 line:-2
assuming you also implement
the necessary reorder callbacks.


254
00:14:19,993 --> 00:14:21,895 line:-1
Another example is the delete accessory,


255
00:14:21,962 --> 00:14:24,531 line:-2
which was previously known
as the delete edit control.


256
00:14:25,399 --> 00:14:29,436 line:-2
If the user taps this accessory,
list cell will automatically reveal


257
00:14:29,503 --> 00:14:32,506 line:-2
any configured trailing swipe actions
of your cell.


258
00:14:34,641 --> 00:14:39,112 line:-2
And we also have a brand-new accessory:
the outline-disclosure accessory.


259
00:14:39,179 --> 00:14:40,981 line:-1
When the user taps this accessory,


260
00:14:41,048 --> 00:14:44,051 line:-2
the cell will automatically communicate
with the data source


261
00:14:44,117 --> 00:14:47,120 line:-2
and expand or collapse
the children of this cell.


262
00:14:47,955 --> 00:14:50,624 line:-2
This requires the use
of the new section-snapshot APIs,


263
00:14:50,691 --> 00:14:54,761 line:0
and you can learn all about that
in "Advances in Diffable Data Source."


264
00:14:56,430 --> 00:14:58,532 line:-2
Now let's take a look
at how the API works.


265
00:14:59,166 --> 00:15:02,002 line:-2
In order to configure
the accessories of your cell,


266
00:15:02,069 --> 00:15:06,306 line:-2
all you have to do is to set
a single accessories property on list cell


267
00:15:06,373 --> 00:15:08,509 line:-1
to an area of UI cell accessories.


268
00:15:09,276 --> 00:15:11,478 line:-2
For this example,
I'm going to configure the cell


269
00:15:11,545 --> 00:15:14,381 line:-2
with a disclosure indicator
and a delete accessory.


270
00:15:14,448 --> 00:15:16,950 line:-2
The system knows
that the disclosure indicator


271
00:15:17,017 --> 00:15:20,220 line:-2
is supposed to always be
on the trailing side of your cell,


272
00:15:20,287 --> 00:15:24,258 line:-2
whereas the delete accessory always shows
on the leading side of your cell.


273
00:15:24,324 --> 00:15:27,828 line:-2
So UIKit will automatically sort
the accessories in the correct order


274
00:15:27,895 --> 00:15:30,264 line:-1
and show them on the appropriate side.


275
00:15:31,398 --> 00:15:33,934 line:-1
Furthermore, the system also knows that,


276
00:15:34,001 --> 00:15:37,337 line:-2
while the disclosure indicator
is supposed to be visible all the time,


277
00:15:37,404 --> 00:15:39,640 line:-2
the delete accessory
should only be visible


278
00:15:39,706 --> 00:15:42,109 line:-2
when the collection view
is in editing mode.


279
00:15:42,176 --> 00:15:46,313 line:-2
So UIKit will automatically animate
the delete accessory in or out


280
00:15:46,380 --> 00:15:48,782 line:-1
when entering or exiting edit mode.


281
00:15:50,250 --> 00:15:52,386 line:-1
We provide a lot of these system defaults,


282
00:15:52,452 --> 00:15:54,855 line:-2
but we allow you to customize
almost all of them.


283
00:15:54,922 --> 00:15:57,291 line:-2
For example,
if you want the disclosure indicator


284
00:15:57,357 --> 00:16:00,027 line:-2
to only be visible
when not in editing mode,


285
00:16:00,093 --> 00:16:03,463 line:-2
simply set the displayed parameter
to whenNotEditing.


286
00:16:03,864 --> 00:16:05,832 line:-1
This is a super-declarative API,


287
00:16:05,899 --> 00:16:08,569 line:-2
where UIKit takes care
of all the states for you.


288
00:16:09,369 --> 00:16:12,105 line:-2
As you've seen,
lists are a highly customizable layout


289
00:16:12,172 --> 00:16:14,141 line:-1
that is very modular and flexible.


290
00:16:14,208 --> 00:16:16,410 line:-1
It is super easy to adopt,


291
00:16:16,476 --> 00:16:19,346 line:-2
so go check out the sample code
and play around with it.


292
00:16:19,413 --> 00:16:21,915 line:-1
There is a lot more to discover in there.


293
00:16:21,982 --> 00:16:24,785 line:-2
And once you've familiarized yourself
with the new APIs,


294
00:16:24,852 --> 00:16:28,021 line:-2
think about where you could enhance
the layouts in your app.


295
00:16:28,088 --> 00:16:30,691 line:-2
Think about where you could replace
an existing table view


296
00:16:30,757 --> 00:16:33,393 line:-2
and make use
of the flexibility to mix lists


297
00:16:33,460 --> 00:16:35,796 line:-1
with any custom compositional layout.


298
00:16:36,563 --> 00:16:40,100 line:-2
And of course, also check out all the
other videos we have on UICollectionView.


299
00:16:40,167 --> 00:16:44,104 line:-2
There are a lot more amazing features
in collection views in iOS 14.


300
00:16:45,272 --> 00:16:47,274 line:-1
Thank you so much for watching.

