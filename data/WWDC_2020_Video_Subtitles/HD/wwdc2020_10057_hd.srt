1
00:00:03,871 --> 00:00:06,874 line:-1
Hello and welcome to WWDC.


2
00:00:08,775 --> 00:00:10,744 line:0
Hello, my name is Ashish,


3
00:00:10,811 --> 00:00:13,580 line:0
and I'm a performance tools engineer
at Apple.


4
00:00:14,014 --> 00:00:15,749 line:-1
Yeounoh will join me later,


5
00:00:15,816 --> 00:00:19,720 line:-2
and we are very excited to talk to you
about the new App Store Connect API


6
00:00:19,786 --> 00:00:22,356 line:-1
for obtaining power and performance data.


7
00:00:22,422 --> 00:00:26,627 line:-2
The amazing work done by developers
in building great applications


8
00:00:26,693 --> 00:00:30,297 line:-2
is an essential part of our users'
overall software experience.


9
00:00:31,231 --> 00:00:35,869 line:-2
And two of the most important aspects
of ensuring a great user experience


10
00:00:35,936 --> 00:00:38,939 line:-2
are optimizing the power
and performance impact


11
00:00:39,006 --> 00:00:40,340 line:-1
of your applications.


12
00:00:40,741 --> 00:00:44,912 line:-2
At Apple, we are deeply committed
towards providing you actionable tools


13
00:00:44,978 --> 00:00:48,115 line:-2
to help you easily
identify the areas to focus on.


14
00:00:48,782 --> 00:00:51,118 line:-1
Last year at WWDC 2019,


15
00:00:51,185 --> 00:00:54,254 line:-2
we first introduced
a new feature within Xcode 11


16
00:00:54,321 --> 00:00:57,424 line:-2
for out-of-the-box
power and performance analytics.


17
00:00:57,491 --> 00:01:00,227 line:-1
The Xcode Organizer allows you to view


18
00:01:00,294 --> 00:01:03,697 line:-2
aggregated power,
performance and I/O metrics


19
00:01:03,764 --> 00:01:07,267 line:-2
to help identify areas
for improvements in your applications.


20
00:01:07,901 --> 00:01:10,571 line:-2
Since that release,
we have received many requests


21
00:01:10,637 --> 00:01:14,074 line:-2
to be able to access the same
Xcode data programmatically.


22
00:01:14,141 --> 00:01:16,210 line:-1
One of the common requests we heard


23
00:01:16,276 --> 00:01:18,312 line:-1
was the ability to consume this data


24
00:01:18,378 --> 00:01:21,181 line:-2
in your own analytics
and monitoring pipelines.


25
00:01:21,248 --> 00:01:25,619 line:-2
So, we are very excited to announce
the new Power and Performance API


26
00:01:26,386 --> 00:01:30,757 line:-2
which is part of the App Store Connect API
being released later this year.


27
00:01:30,824 --> 00:01:32,459 line:0
We highly recommend you to check out


28
00:01:32,526 --> 00:01:36,430 line:0
the "Expanding Automation
with the App Store Connect API" video


29
00:01:36,496 --> 00:01:38,699 line:0
to learn more about App Store Connect.


30
00:01:39,333 --> 00:01:42,569 line:-2
The new API enables you
to programmatically access


31
00:01:42,636 --> 00:01:45,472 line:-1
the Xcode metrics and diagnostics data,


32
00:01:45,539 --> 00:01:48,275 line:-2
allowing you to consume
this data yourself.


33
00:01:48,342 --> 00:01:51,879 line:-2
We've also provided
a new built-in smart insights feature


34
00:01:51,945 --> 00:01:55,682 line:-2
to identify your application's
power and performance hotspots


35
00:01:55,749 --> 00:01:57,651 line:-1
without any additional effort.


36
00:01:58,185 --> 00:02:00,354 line:-1
As people use your application,


37
00:02:00,420 --> 00:02:04,024 line:-2
we collect the power and performance data
from consented devices.


38
00:02:04,525 --> 00:02:07,561 line:-2
This data is then aggregated
on our servers


39
00:02:07,628 --> 00:02:10,997 line:-2
and made available to you
through the App Store Connect API.


40
00:02:11,064 --> 00:02:13,567 line:-1
You can use data from this new API


41
00:02:13,634 --> 00:02:16,670 line:-2
for building highly customized
analytics pipelines,


42
00:02:16,737 --> 00:02:19,840 line:-2
as well as automated monitoring
of your app's performance


43
00:02:19,907 --> 00:02:21,241 line:-1
through dashboards.


44
00:02:21,708 --> 00:02:23,544 line:-1
During the rest of this talk,


45
00:02:23,610 --> 00:02:26,880 line:-2
we'll first go through
a brief overview of this new API


46
00:02:26,947 --> 00:02:29,283 line:-1
and the data types vended by it.


47
00:02:29,349 --> 00:02:34,488 line:-2
Next, we'll walk through a few examples
of accessing the same aggregated data


48
00:02:34,555 --> 00:02:37,724 line:-2
that drives the power
and performance analytics in Xcode,


49
00:02:37,791 --> 00:02:39,893 line:-1
as well as the new smart insights.


50
00:02:40,727 --> 00:02:42,963 line:-1
Finally, we'll present a live demo


51
00:02:43,030 --> 00:02:47,134 line:-2
to extract aggregated metrics,
insights and diagnostics


52
00:02:47,201 --> 00:02:50,771 line:-2
for a sample application
and wrap up with a brief summary.


53
00:02:51,839 --> 00:02:55,475 line:-2
Now, let's walk through
an overview of this API.


54
00:02:55,943 --> 00:02:59,346 line:-2
There are four new REST API resources
available this year.


55
00:02:59,413 --> 00:03:01,381 line:-1
Let's take a look at each resource.


56
00:03:02,482 --> 00:03:06,053 line:-2
The first API resource
uses your application's ID


57
00:03:06,119 --> 00:03:11,592 line:-2
to provide aggregated metrics and insights
for your app's most recent versions.


58
00:03:11,658 --> 00:03:15,796 line:-2
The smart insights help identify
your application's hotspots.


59
00:03:15,863 --> 00:03:18,799 line:-2
We'll go into more details
of this data in the next section.


60
00:03:19,933 --> 00:03:21,635 line:-1
The second API resource


61
00:03:21,702 --> 00:03:25,305 line:-2
allows you to download metrics
for a specific app version.


62
00:03:25,372 --> 00:03:28,442 line:-2
To get this data,
you'll need to provide the build ID


63
00:03:28,509 --> 00:03:32,646 line:-2
provided by App Store Connect API
for a specific application version.


64
00:03:33,647 --> 00:03:36,950 line:-2
Next, you can access
top diagnostic signatures


65
00:03:37,017 --> 00:03:38,919 line:-1
for a specific app version.


66
00:03:38,986 --> 00:03:42,356 line:-2
These signatures are used
to group common problems.


67
00:03:42,422 --> 00:03:44,024 line:0
We also recommend you check out


68
00:03:44,091 --> 00:03:46,727 line:0
this year's talk on Xcode Organizer,


69
00:03:46,793 --> 00:03:48,896 line:0
which goes into details about accessing


70
00:03:48,962 --> 00:03:51,398 line:0
the same diagnostics data through Xcode.


71
00:03:52,032 --> 00:03:53,867 line:-1
Finally, you can download logs


72
00:03:53,934 --> 00:03:58,372 line:-2
corresponding to diagnostic signatures
for your root cause analysis.


73
00:03:58,438 --> 00:04:02,543 line:-2
This requires the diagnostic signature ID
as part of the GET request.


74
00:04:03,443 --> 00:04:05,245 line:-1
To summarize the new API,


75
00:04:05,312 --> 00:04:09,383 line:-2
you can incorporate these four endpoints
into your analytics workflows


76
00:04:09,449 --> 00:04:12,052 line:-2
to automatically track
your application's footprint


77
00:04:12,119 --> 00:04:16,290 line:-2
using aggregated metrics,
smart insights and diagnostics data.


78
00:04:16,757 --> 00:04:19,293 line:-1
Now, let's walk through a few examples


79
00:04:19,358 --> 00:04:22,963 line:-2
to get data and insights
through these API endpoints,


80
00:04:23,030 --> 00:04:25,299 line:-1
starting with aggregated metrics data.


81
00:04:26,200 --> 00:04:29,570 line:-2
The power and performance
metrics data for an application


82
00:04:29,636 --> 00:04:33,273 line:-2
is aggregated by each unique metric
and device type.


83
00:04:33,340 --> 00:04:37,411 line:-2
These metrics are the same as those
available in Xcode Organizer today,


84
00:04:37,477 --> 00:04:41,148 line:-2
such as battery drain,
launch and disk writes.


85
00:04:41,215 --> 00:04:44,384 line:-2
The new API currently supports
vending this data


86
00:04:44,451 --> 00:04:47,187 line:-1
for all iPhone and iPad device groups.


87
00:04:48,455 --> 00:04:51,725 line:-2
As discussed earlier,
you need to make the following GET request


88
00:04:51,792 --> 00:04:53,660 line:-1
with your application ID


89
00:04:53,727 --> 00:04:55,929 line:-1
to receive both aggregated metrics


90
00:04:55,996 --> 00:04:58,832 line:-1
and insights for your recent app versions.


91
00:04:59,933 --> 00:05:03,937 line:-2
This returns a structured JSON string
with two major sections:


92
00:05:04,705 --> 00:05:09,510 line:-2
aggregated metrics, which is represented
as productData, and insights.


93
00:05:09,576 --> 00:05:12,045 line:-2
Let's take a look
at the sample metrics JSON.


94
00:05:13,146 --> 00:05:15,415 line:-1
For each metric, such as hangRate,


95
00:05:15,482 --> 00:05:18,952 line:-2
the JSON structure contains
some metadata, such as unit.


96
00:05:19,686 --> 00:05:22,723 line:-2
And for each unique device
and metric combination,


97
00:05:22,789 --> 00:05:26,393 line:-2
the JSON contains the 50th
and 90th percentile values.


98
00:05:27,194 --> 00:05:29,596 line:0
Finally, the metric summary is generated


99
00:05:29,663 --> 00:05:33,033 line:0
for up to eight most recent versions
of the application.


100
00:05:34,001 --> 00:05:37,905 line:-2
As this example JSON indicates,
you can use this data


101
00:05:37,971 --> 00:05:41,608 line:-2
to build highly customized
power and performance analytics


102
00:05:41,675 --> 00:05:44,945 line:-2
across different metrics,
devices and percentiles.


103
00:05:45,012 --> 00:05:47,281 line:-1
But we didn't stop here.


104
00:05:47,347 --> 00:05:49,149 line:-1
Our team went one step further


105
00:05:49,216 --> 00:05:51,251 line:-1
to also help you quickly identify


106
00:05:51,318 --> 00:05:54,288 line:-2
your application's power
and performance hotspots


107
00:05:54,354 --> 00:05:56,823 line:-1
without the need for custom analytics.


108
00:05:57,424 --> 00:06:00,861 line:-2
We are very excited to bring you
the new smart insights feature.


109
00:06:00,928 --> 00:06:04,164 line:-2
These smart insights
use the earlier metrics data


110
00:06:04,231 --> 00:06:07,534 line:-2
to automatically flag
major hotspots in your application.


111
00:06:08,502 --> 00:06:10,771 line:-2
This is especially helpful
if you want to track


112
00:06:10,838 --> 00:06:14,808 line:-2
top application regressions in the field
without any additional effort.


113
00:06:14,875 --> 00:06:19,379 line:-2
Currently, these insights flag regressions
and uptick in metric values.


114
00:06:20,347 --> 00:06:23,584 line:-2
The insights JSON response
contains three sections:


115
00:06:23,650 --> 00:06:27,621 line:-2
the versions analyzed for the insight,
a summary of the regression,


116
00:06:27,688 --> 00:06:30,691 line:-2
and a list of impacted devices
and percentiles.


117
00:06:31,925 --> 00:06:34,895 line:-2
Let's walk through the details
of a sample insight.


118
00:06:34,962 --> 00:06:37,764 line:-2
The highlighted section
indicates the metric type


119
00:06:37,831 --> 00:06:40,367 line:-1
and summary of the identified regression.


120
00:06:40,434 --> 00:06:42,035 line:-1
You can use these summary strings


121
00:06:42,102 --> 00:06:44,605 line:-2
to track top regressions
for your application.


122
00:06:45,372 --> 00:06:48,809 line:-2
As shown here, the application's
launch time is regressed


123
00:06:48,876 --> 00:06:51,778 line:-1
only for the 90th percentile iPhone users.


124
00:06:51,845 --> 00:06:54,982 line:-2
Such insights can help you
take more focused actions


125
00:06:55,048 --> 00:06:56,884 line:-1
to improve your app's performance.


126
00:06:57,851 --> 00:06:59,186 line:-1
The population section


127
00:06:59,253 --> 00:07:04,124 line:-2
contains a detailed structure list
of impacted percentiles and devices.


128
00:07:04,858 --> 00:07:07,160 line:0
And the third part contains the metadata,


129
00:07:07,227 --> 00:07:09,429 line:0
such as the latest application version,


130
00:07:09,496 --> 00:07:13,166 line:0
and the list of previous
application versions used for comparison.


131
00:07:13,734 --> 00:07:16,069 line:-1
In the final part of this section,


132
00:07:16,136 --> 00:07:19,907 line:-2
let's take a look at diagnostics data
for root cause analysis.


133
00:07:19,973 --> 00:07:23,010 line:-2
Over to Yeounoh now
to continue the rest of the talk.


134
00:07:23,710 --> 00:07:25,145 line:0
Thank you, Ashish.


135
00:07:25,212 --> 00:07:29,216 line:0
Hi, I'm Yeounoh,
a performance tools engineer at Apple.


136
00:07:30,083 --> 00:07:32,486 line:0
In addition to metrics and smart insights,


137
00:07:32,553 --> 00:07:34,788 line:-1
we also provide diagnostics data


138
00:07:34,855 --> 00:07:37,391 line:-1
to help you deep-dive into regressions.


139
00:07:37,457 --> 00:07:40,994 line:-2
There are two parts
to power and performance diagnostics.


140
00:07:41,061 --> 00:07:45,899 line:-2
First, we use diagnostic signatures
to group similar problems together.


141
00:07:46,333 --> 00:07:49,303 line:-2
For instance,
similar disk writes exceptions


142
00:07:49,369 --> 00:07:53,106 line:-2
are aggregated to generate
disk writes signatures.


143
00:07:53,173 --> 00:07:54,908 line:-1
Using diagnostic signatures,


144
00:07:54,975 --> 00:07:58,612 line:-2
we can do root cause analysis
by problem group.


145
00:07:58,679 --> 00:08:03,217 line:-2
The API returns most prevalent
top signatures for your app version,


146
00:08:03,283 --> 00:08:05,686 line:-1
and given a top signature and its ID,


147
00:08:05,752 --> 00:08:09,489 line:-2
you can get related diagnostic logs
with more details.


148
00:08:10,357 --> 00:08:13,360 line:-2
To receive top signatures
for your app version,


149
00:08:13,427 --> 00:08:16,597 line:-2
you need to make following
GET request with build ID


150
00:08:16,663 --> 00:08:18,599 line:-1
from App Store Connect API.


151
00:08:18,966 --> 00:08:22,402 line:-2
This year, you can access
disk writes diagnosticSignatures


152
00:08:22,469 --> 00:08:25,038 line:-1
from both Xcode and the API.


153
00:08:25,772 --> 00:08:29,643 line:-2
The response contains
a list of top signatures in data,


154
00:08:29,710 --> 00:08:34,847 line:-2
and each signature contains
a unique signature ID and attributes.


155
00:08:35,282 --> 00:08:36,917 line:-1
From these attributes,


156
00:08:36,984 --> 00:08:41,087 line:-2
you can tell that this is an example
of a disk writes signature,


157
00:08:41,154 --> 00:08:42,523 line:-1
and the signature string


158
00:08:42,589 --> 00:08:46,593 line:-2
is the call frame that represents
the call stack in Xcode UI.


159
00:08:47,060 --> 00:08:49,830 line:-2
And weight is the normalized
signature weight


160
00:08:49,897 --> 00:08:53,600 line:-2
which indicates the relative importance
of this signature.


161
00:08:53,667 --> 00:08:57,538 line:-2
And it also comes with a URL
to get diagnostic logs.


162
00:08:57,604 --> 00:09:02,075 line:-2
As you can see, this URL
already contains the signature ID.


163
00:09:02,142 --> 00:09:04,645 line:-2
The second part of power
and performance diagnostics


164
00:09:04,711 --> 00:09:06,079 line:-1
is diagnostic log.


165
00:09:06,513 --> 00:09:11,151 line:-2
It contains anonymized diagnostic details
from individual devices.


166
00:09:12,052 --> 00:09:15,522 line:-2
And this includes metadata information,
such as platform,


167
00:09:15,589 --> 00:09:17,524 line:-1
OS version and device type.


168
00:09:18,258 --> 00:09:22,095 line:-2
And also, the log contains
function call stack trees,


169
00:09:22,162 --> 00:09:23,931 line:-1
which can be extremely helpful


170
00:09:23,997 --> 00:09:27,501 line:-2
to understand what is causing
the power and performance hotspots.


171
00:09:28,035 --> 00:09:32,840 line:0
The diagnostic call stack JSON structure
is also shared with MetricKit.


172
00:09:32,906 --> 00:09:35,108 line:0
So check out this year's MetricKit talk


173
00:09:35,175 --> 00:09:39,112 line:0
to learn more about on-device
power and performance diagnostics.


174
00:09:40,180 --> 00:09:43,517 line:-2
Getting diagnostic logs requires
the following GET request


175
00:09:43,584 --> 00:09:45,519 line:-1
with a signature ID.


176
00:09:45,586 --> 00:09:47,654 line:-1
This is the same kind of URL


177
00:09:47,721 --> 00:09:50,757 line:-2
that we have seen
from the diagnosticSignature response.


178
00:09:51,325 --> 00:09:54,895 line:-2
The response contains
a list of diagnosticLogs,


179
00:09:54,962 --> 00:09:57,898 line:-1
and each log contains diagnosticMetadata


180
00:09:57,965 --> 00:10:02,169 line:-2
with information like deviceType,
osVersion and buildVersion.


181
00:10:03,036 --> 00:10:07,741 line:-2
In this example, the log is generated
for a disk writes exception event.


182
00:10:08,208 --> 00:10:10,577 line:-1
The log also comes with callStacks.


183
00:10:10,644 --> 00:10:13,347 line:-1
Each callStack frame contains rawFrame


184
00:10:13,413 --> 00:10:15,382 line:-1
and parsed frame information,


185
00:10:16,016 --> 00:10:17,885 line:0
and a list of subFrames.


186
00:10:18,218 --> 00:10:20,687 line:0
Following the subFrames
from the root frame,


187
00:10:20,754 --> 00:10:23,724 line:0
you can traverse
the entire call stack tree structure.


188
00:10:24,658 --> 00:10:26,593 line:-1
Now, let's jump into a demo.


189
00:10:26,994 --> 00:10:30,464 line:-2
In this demo, you will see
how to access the API yourself,


190
00:10:30,531 --> 00:10:32,399 line:-1
as well as using a sample script


191
00:10:32,466 --> 00:10:35,302 line:-2
that will be released with the API
later this year.


192
00:10:36,904 --> 00:10:38,872 line:-1
For the purpose of this demo,


193
00:10:38,939 --> 00:10:42,809 line:-2
let's assume that I'm a developer
for an app called MealPlanner.


194
00:10:43,544 --> 00:10:46,680 line:-2
This app helps me plan meals
and save recipes.


195
00:10:47,314 --> 00:10:50,217 line:-2
In the latest release,
we introduced a new feature


196
00:10:50,284 --> 00:10:52,920 line:-1
to save delicious photos with entries.


197
00:10:52,986 --> 00:10:56,456 line:-2
And now, I can use
Power and Performance API


198
00:10:56,523 --> 00:11:00,327 line:-2
to make sure that app users
don't experience any regression.


199
00:11:01,295 --> 00:11:05,799 line:-2
To access the API, we first need
to generate an API access token.


200
00:11:09,770 --> 00:11:12,072 line:-1
I will run a script to generate the token


201
00:11:12,139 --> 00:11:14,274 line:-1
using an App Store Connect API key.


202
00:11:21,048 --> 00:11:24,618 line:-2
With the token, I can access
perfPowerMetrics resource


203
00:11:24,685 --> 00:11:26,620 line:-1
with MealPlanner app ID.


204
00:11:34,895 --> 00:11:39,633 line:-2
As you can see in this response,
we get insights, as well as productData,


205
00:11:39,700 --> 00:11:42,603 line:0
in the same format
that we have seen during the talk.


206
00:11:44,071 --> 00:11:48,275 line:-2
And productData contains
a lot of aggregated metrics information.


207
00:11:49,776 --> 00:11:54,081 line:-2
So, let's go look at smart insights
to see if we have any regression.


208
00:11:56,917 --> 00:12:00,554 line:-2
Taking insights regression
and its summary string,


209
00:12:00,621 --> 00:12:02,923 line:-2
we see that there is
a disk writes regression


210
00:12:02,990 --> 00:12:08,262 line:-2
for the latest app version
for 50th percentile users on all iPhones.


211
00:12:10,564 --> 00:12:14,301 line:-2
To further investigate this,
let's get diagnostics logs


212
00:12:14,368 --> 00:12:16,770 line:-1
and look at exception call stacks.


213
00:12:24,244 --> 00:12:27,981 line:-2
First, I will request
top diagnosticSignatures


214
00:12:28,048 --> 00:12:30,884 line:-1
using the latest app version build ID.


215
00:12:35,889 --> 00:12:40,227 line:-2
By taking the top disk writes signature
and its related URL...


216
00:12:46,934 --> 00:12:50,938 line:-2
I will request diagnosticLogs
for the signature.


217
00:12:57,845 --> 00:13:01,815 line:-2
The diagnosticLog response
contains callStack information...


218
00:13:02,983 --> 00:13:07,187 line:-2
and this call stack structure
is efficient for machine processing.


219
00:13:08,989 --> 00:13:11,458 line:-2
And for us to look at
the original call stack,


220
00:13:11,525 --> 00:13:13,126 line:-1
I've written a sample code


221
00:13:13,193 --> 00:13:16,096 line:-2
to parse and pretty-print
this stack information.


222
00:13:22,035 --> 00:13:24,738 line:-1
The sample script programmatically access


223
00:13:24,805 --> 00:13:27,808 line:-1
the same diagnostic API resources.


224
00:13:28,642 --> 00:13:32,279 line:-2
Hit Enter, we get
the original call stack from the log.


225
00:13:33,347 --> 00:13:36,483 line:-2
Looking at the call function frames
from the bottom...


226
00:13:37,484 --> 00:13:40,988 line:-2
I see that the new feature
to add photos with the entries


227
00:13:41,054 --> 00:13:43,357 line:-1
is causing heavy disk writes I/O.


228
00:13:44,558 --> 00:13:46,593 line:-1
By following the stack trace,


229
00:13:46,660 --> 00:13:49,396 line:-2
I can go to the exact location
in the source code


230
00:13:49,463 --> 00:13:52,566 line:-1
to debug and optimize the implementation.


231
00:13:53,634 --> 00:13:57,571 line:-2
The sample codes to generate a token,
as well as to get diagnostics data


232
00:13:57,638 --> 00:14:00,407 line:-2
will be released with the API
later this year.


233
00:14:00,941 --> 00:14:04,945 line:-2
So, please check out the sample codes
for a quick reference to API access.


234
00:14:05,646 --> 00:14:07,147 line:-1
To summarize this demo,


235
00:14:07,848 --> 00:14:11,718 line:-2
you can view and monitor
aggregated metrics using the API,


236
00:14:12,653 --> 00:14:17,057 line:-2
and use smart insights to identify
power and performance regression.


237
00:14:18,258 --> 00:14:20,994 line:-1
And finally, use diagnostics data


238
00:14:21,061 --> 00:14:23,430 line:-1
to do root cause analysis of the problem.


239
00:14:24,431 --> 00:14:26,900 line:-1
Let's recap what we have discussed today.


240
00:14:28,435 --> 00:14:31,104 line:-2
We introduced our new
App Store Connect API


241
00:14:31,171 --> 00:14:33,207 line:-1
for power and performance.


242
00:14:33,273 --> 00:14:36,310 line:-2
With this new API,
you can programmatically access


243
00:14:36,376 --> 00:14:40,447 line:-2
the same metrics and diagnostics data
as Xcode Organizer,


244
00:14:41,281 --> 00:14:44,518 line:-2
and build customized data analytics
and monitoring systems


245
00:14:44,585 --> 00:14:46,787 line:-1
around power and performance metrics.


246
00:14:47,421 --> 00:14:49,957 line:-1
We also introduced smart insights


247
00:14:50,023 --> 00:14:54,027 line:-2
that can help you identify
key trends and regression in metrics.


248
00:14:54,461 --> 00:14:56,964 line:-1
We are very excited about this new API


249
00:14:57,030 --> 00:14:59,733 line:-1
for you to continue building amazing apps.


250
00:14:59,800 --> 00:15:04,037 line:-2
So, we kindly ask you to try it out
and give us your feedback. Thank you.

