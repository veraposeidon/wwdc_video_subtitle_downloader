1
00:00:03,871 --> 00:00:06,640 line:-1
Hello and welcome to WWDC.


2
00:00:07,474 --> 00:00:09,276 line:0
Hey, everyone. My name is Josh,


3
00:00:09,343 --> 00:00:12,346 line:0
and I'm an engineer
on Apple's Education and Enterprise Team.


4
00:00:12,412 --> 00:00:15,616 line:0
Today I'm excited to share with you
what Apple's been up to the past year


5
00:00:15,682 --> 00:00:17,017 line:0
in the assessment space.


6
00:00:17,084 --> 00:00:19,152 line:-1
Education is deep in Apple's DNA.


7
00:00:19,219 --> 00:00:22,055 line:-2
Whether Apple's striving
to put Apple II's in every classroom,


8
00:00:22,122 --> 00:00:24,958 line:-2
or iPad and Apple Books
is transforming textbooks,


9
00:00:25,025 --> 00:00:28,562 line:-2
Apple products have been hailed
as revolutionary educational tools.


10
00:00:28,629 --> 00:00:30,898 line:-1
Our introduction to assessment was in 2013


11
00:00:30,964 --> 00:00:33,300 line:-2
with autonomous single app mode
on the iPad.


12
00:00:33,367 --> 00:00:36,737 line:-2
This system piggybacked off MDM
to restrict devices during exams,


13
00:00:36,803 --> 00:00:38,805 line:-2
but was soon replaced
with an entitlement-based system


14
00:00:38,872 --> 00:00:41,041 line:-2
known as
Automatic Assessment Configuration,


15
00:00:41,108 --> 00:00:43,043 line:-1
or AAC for short.


16
00:00:43,110 --> 00:00:45,546 line:-2
This next step made deployment
of assessment apps easier


17
00:00:45,612 --> 00:00:48,015 line:-2
and expanded their use
to non-supervised devices.


18
00:00:49,249 --> 00:00:52,719 line:-2
We work closely with developers
to make iPad a modern assessment platform.


19
00:00:52,786 --> 00:00:56,390 line:-2
It helps prevent unfair advantages like
switching apps, using auto-text-complete,


20
00:00:56,456 --> 00:00:58,025 line:-1
and looking up words in the dictionary.


21
00:00:58,091 --> 00:01:00,093 line:-1
And as a result, assessment mode on iPad


22
00:01:00,160 --> 00:01:03,163 line:-2
has been adopted by a majority
of standardized digital test vendors.


23
00:01:03,230 --> 00:01:05,299 line:-2
And now we're going
to push things forward again


24
00:01:05,364 --> 00:01:08,268 line:-2
by bringing standardized testing
to the Mac with a new framework


25
00:01:08,335 --> 00:01:10,637 line:-1
called Automatic Assessment Configuration.


26
00:01:11,271 --> 00:01:14,007 line:-2
I'd love to give you a tour
of what this new framework has to offer.


27
00:01:14,074 --> 00:01:17,044 line:-2
Assessment mode on the Mac
is not identical to iPad


28
00:01:17,110 --> 00:01:19,713 line:-1
because it runs on, well, not an iPad.


29
00:01:19,780 --> 00:01:23,050 line:-2
The goal is to preserve the same
testing environment on each platform.


30
00:01:24,251 --> 00:01:27,688 line:-2
Typically with a new feature,
I'd explain what new things a user can do,


31
00:01:27,754 --> 00:01:28,789 line:-1
but with assessment mode,


32
00:01:28,856 --> 00:01:30,958 line:-2
the magic's in
what a user is prevented from doing.


33
00:01:31,024 --> 00:01:32,125 line:-1
During assessment mode,


34
00:01:32,192 --> 00:01:34,528 line:-2
only your app is visible,
and things like the Dock,


35
00:01:34,595 --> 00:01:37,798 line:-2
Mission Control and Notification Center
are all unavailable.


36
00:01:37,865 --> 00:01:40,100 line:-1
You can't record or capture your screen.


37
00:01:40,167 --> 00:01:42,836 line:-2
While other apps can be opened,
their windows are hidden,


38
00:01:42,903 --> 00:01:45,739 line:-2
and for all other processes,
network access is prevented.


39
00:01:46,440 --> 00:01:47,708 line:-1
Playing media gets paused,


40
00:01:47,774 --> 00:01:50,944 line:-2
and your pasteboard is cleared
when the session begins and ends.


41
00:01:51,645 --> 00:01:52,913 line:-1
This list is a subset.


42
00:01:52,980 --> 00:01:55,983 line:-2
You can always look to the developer docs
to answer any specific questions


43
00:01:56,049 --> 00:01:58,785 line:-2
about what system services
are affected during this mode.


44
00:01:59,753 --> 00:02:00,754 line:-1
An important thing to note


45
00:02:00,821 --> 00:02:02,956 line:-2
is that this new feature
is guarded by an entitlement.


46
00:02:03,023 --> 00:02:05,259 line:-2
Information about
how to apply this entitlement


47
00:02:05,325 --> 00:02:08,862 line:-2
and how to integrate it into your app
are also available in the developer docs.


48
00:02:09,463 --> 00:02:12,099 line:-2
Now that we've learned about
what the new AAC framework does,


49
00:02:12,165 --> 00:02:14,101 line:-1
let's take a closer look at how it works.


50
00:02:14,168 --> 00:02:15,536 line:-1
But before we hop into any code,


51
00:02:15,602 --> 00:02:19,072 line:-2
I wanna talk about the assessment mode
life cycle and how it relates to your app.


52
00:02:19,439 --> 00:02:22,142 line:-2
When your app begins running,
assessment mode will be inactive.


53
00:02:22,209 --> 00:02:23,443 line:-1
It's up to you to decide


54
00:02:23,510 --> 00:02:25,979 line:-2
when the appropriate time
to restrict the device is.


55
00:02:26,713 --> 00:02:27,781 line:-1
When that time comes,


56
00:02:27,848 --> 00:02:30,184 line:-2
your app will request
for assessment mode to begin,


57
00:02:30,250 --> 00:02:32,519 line:-2
at which point
the AAC framework will start modifying


58
00:02:32,586 --> 00:02:35,989 line:-2
and restricting system services
to create the safe testing environment.


59
00:02:36,056 --> 00:02:37,057 line:-1
This can take some time,


60
00:02:37,124 --> 00:02:39,993 line:-2
so it's a good idea for your app
to present some kind of transition UI,


61
00:02:40,060 --> 00:02:41,061 line:-1
maybe a spinner.


62
00:02:41,828 --> 00:02:43,564 line:-1
Once all services are in the right state,


63
00:02:43,630 --> 00:02:46,200 line:-2
your app will be informed,
and you can begin your exam.


64
00:02:47,634 --> 00:02:48,702 line:0
After the exam is complete,


65
00:02:48,769 --> 00:02:51,238 line:0
your app should request
for assessment mode to end.


66
00:02:51,305 --> 00:02:53,006 line:0
Just like before,
this might take some time,


67
00:02:53,073 --> 00:02:55,909 line:0
so presenting transition UI
will make for a better user experience.


68
00:02:57,177 --> 00:02:59,413 line:0
Once the OS is restored
to its previous state,


69
00:02:59,479 --> 00:03:00,480 line:0
your app will be notified,


70
00:03:00,547 --> 00:03:03,450 line:0
and you will have completed
the assessment mode life cycle.


71
00:03:03,517 --> 00:03:06,353 line:-2
This is the happy path through AAC,
but in the real world,


72
00:03:06,420 --> 00:03:08,388 line:-2
there's always the possibility
for errors to pop up,


73
00:03:08,455 --> 00:03:11,358 line:-2
and it's important that your app knows
how to deal with them.


74
00:03:11,425 --> 00:03:12,993 line:-1
The first place an error might bubble up


75
00:03:13,060 --> 00:03:15,329 line:-2
is right after requesting
to begin the mode.


76
00:03:15,395 --> 00:03:17,464 line:-2
It's possible the service
couldn't be restricted,


77
00:03:17,531 --> 00:03:20,634 line:-2
or maybe you just forgot
to entitle your app to use this feature.


78
00:03:20,701 --> 00:03:22,302 line:-1
Either way, your app will be informed


79
00:03:22,369 --> 00:03:25,606 line:-2
and assessment mode
will return to the inactive state.


80
00:03:25,672 --> 00:03:28,408 line:-2
The next place an error could occur
is while the exam is running.


81
00:03:28,475 --> 00:03:29,943 line:-1
Although very unlikely,


82
00:03:30,010 --> 00:03:32,613 line:-2
it's possible that a service stops
respecting assessment mode,


83
00:03:32,679 --> 00:03:35,482 line:-2
and we can no longer
make the same safety guarantees as before.


84
00:03:35,549 --> 00:03:37,951 line:-2
If this happens,
we do not tear down assessment mode.


85
00:03:38,018 --> 00:03:40,354 line:-2
Instead, we inform your app
that something has gone wrong


86
00:03:40,420 --> 00:03:41,955 line:0
and that you should stop your exam.


87
00:03:42,022 --> 00:03:44,992 line:0
Your app should hide
all sensitive content immediately,


88
00:03:45,058 --> 00:03:48,629 line:0
and then release the remaining
system services by ending the mode.


89
00:03:48,695 --> 00:03:51,798 line:0
Now let's take a look
at how this cycle actually looks in code.


90
00:03:52,332 --> 00:03:55,836 line:-2
To get started, I'm gonna walk you through
implementing your own AAC client.


91
00:03:55,903 --> 00:03:59,072 line:-2
First, let's create a new class
called the AssessmentManager.


92
00:03:59,139 --> 00:04:02,643 line:-2
This class's job is to bridge your app's
UI and the assessment mode life cycle.


93
00:04:03,577 --> 00:04:04,945 line:-1
We'll give it two functions:


94
00:04:05,012 --> 00:04:07,147 line:-2
beginAssessmentMode
and endAssessmentMode.


95
00:04:08,048 --> 00:04:09,449 line:-1
To actually begin and end the mode,


96
00:04:09,516 --> 00:04:11,418 line:-2
our manager needs
an AEAssessmentSession


97
00:04:11,485 --> 00:04:12,853 line:0
provided by the framework.


98
00:04:13,520 --> 00:04:16,890 line:0
The assessment session reports all
of its life cycle events via delegation,


99
00:04:16,957 --> 00:04:21,394 line:0
so we need to implement the AEAssessment
SessionDelegate protocol in our manager.


100
00:04:21,461 --> 00:04:24,064 line:0
Now let's focus on
what happens in the begin function.


101
00:04:25,532 --> 00:04:28,769 line:-2
First, you construct
an AEAssessmentConfiguration.


102
00:04:28,836 --> 00:04:31,238 line:-2
This object defines
your customized assessment experience


103
00:04:31,305 --> 00:04:33,807 line:-1
and by default, is the most restrictive.


104
00:04:33,874 --> 00:04:36,643 line:-2
You'll use that to construct
your AEAssessmentSession.


105
00:04:37,377 --> 00:04:38,645 line:-1
After construction,


106
00:04:38,712 --> 00:04:41,315 line:-2
you'll wanna set its delegate
in order to receive life cycle events.


107
00:04:41,381 --> 00:04:43,116 line:-2
It's also important
you hold on to the session


108
00:04:43,183 --> 00:04:46,053 line:-2
to ensure it doesn't deallocate
prematurely, ending assessment mode.


109
00:04:46,119 --> 00:04:48,956 line:-2
I mentioned earlier that entering
assessment mode might take some time,


110
00:04:49,022 --> 00:04:50,290 line:-1
so you'll present some transition UI


111
00:04:50,357 --> 00:04:52,125 line:-2
so your users understand
something's going on.


112
00:04:52,192 --> 00:04:53,794 line:0
Finally, you'll call "begin"
on the session


113
00:04:53,861 --> 00:04:56,096 line:0
and wait for the OS
to enter assessment mode.


114
00:04:56,163 --> 00:04:58,065 line:-2
The session will delegate
back to the manager,


115
00:04:58,131 --> 00:05:00,801 line:-2
either through the DidBegin
or failedToBegin delegate functions.


116
00:05:02,302 --> 00:05:03,604 line:-1
In DidBegin,


117
00:05:03,670 --> 00:05:05,939 line:-2
you'll have completely entered
assessment mode.


118
00:05:06,006 --> 00:05:07,941 line:-1
You can tear down the transition UI...


119
00:05:09,676 --> 00:05:12,079 line:-2
and present your testing material
to the student.


120
00:05:13,480 --> 00:05:16,517 line:-2
The other possibility
is the failedToBegin function is called.


121
00:05:16,950 --> 00:05:18,051 line:-1
In failedToBegin,


122
00:05:18,118 --> 00:05:21,054 line:-2
you will start by tearing down your
transition UI just like in DidBegin...


123
00:05:22,122 --> 00:05:23,357 line:0
and since something went wrong,


124
00:05:23,423 --> 00:05:26,293 line:0
you'll probably present
some kind of error to your users,


125
00:05:26,360 --> 00:05:28,729 line:0
and then finally, since you weren't able
to get into the mode,


126
00:05:28,795 --> 00:05:31,832 line:0
your session is now invalid,
and its reference can be discarded.


127
00:05:33,200 --> 00:05:34,535 line:-1
Now, assuming everything went okay


128
00:05:34,601 --> 00:05:37,905 line:-2
and you received the DidBegin delegate
call, the student can begin their exam.


129
00:05:39,106 --> 00:05:40,874 line:-1
Once the student signals they're all done,


130
00:05:40,941 --> 00:05:44,178 line:-2
you'll end up calling endAssessmentMode
on your assessment manager.


131
00:05:45,946 --> 00:05:48,649 line:-2
Now, first, your stored assessment session
is an optional,


132
00:05:48,715 --> 00:05:50,184 line:-1
so you'll have to unwrap it.


133
00:05:50,250 --> 00:05:53,187 line:-2
Just like entering assessment mode,
exiting may take some time,


134
00:05:53,253 --> 00:05:56,123 line:-2
so you'll also present
some kind of transition UI to your users.


135
00:05:56,623 --> 00:05:58,725 line:-2
Finally, you can ask
your unwrapped session to end


136
00:05:58,792 --> 00:06:00,394 line:-1
and take the OS out of assessment mode.


137
00:06:00,460 --> 00:06:02,563 line:-2
Once the OS is restored
to its original state,


138
00:06:02,629 --> 00:06:04,364 line:-2
the assessment session
will inform the manager


139
00:06:04,431 --> 00:06:06,333 line:-1
through the DidEnd delegate function.


140
00:06:06,700 --> 00:06:08,202 line:0
In our DidEnd function,


141
00:06:08,268 --> 00:06:10,204 line:0
we can tear down the transition UI,


142
00:06:10,270 --> 00:06:12,506 line:0
and we can present our post-test content,


143
00:06:12,573 --> 00:06:15,142 line:0
maybe something like
a result page or a success page,


144
00:06:15,843 --> 00:06:19,012 line:0
and you can finish by discarding
your reference to the assessment session.


145
00:06:20,714 --> 00:06:24,184 line:-2
The last part of this protocol
is the wasInterrupted function.


146
00:06:24,251 --> 00:06:27,487 line:-2
This will be called when something goes
wrong during an active assessment session.


147
00:06:28,322 --> 00:06:29,523 line:0
In this function,


148
00:06:29,590 --> 00:06:31,792 line:0
you should immediately hide
all sensitive content.


149
00:06:31,859 --> 00:06:34,461 line:0
You could also use it as an opportunity
to perform necessary cleanup


150
00:06:34,528 --> 00:06:36,029 line:0
or save test progress.


151
00:06:36,096 --> 00:06:38,799 line:0
After that, you can present
an error message to your users.


152
00:06:39,533 --> 00:06:42,102 line:0
Next, you'll present
your exit transition UI


153
00:06:42,169 --> 00:06:45,706 line:0
and bring the OS out of assessment mode
by asking the session to end.


154
00:06:45,772 --> 00:06:47,140 line:0
You'll know this has been completed


155
00:06:47,207 --> 00:06:49,610 line:0
once you receive
the DidEnd delegate function.


156
00:06:49,676 --> 00:06:50,677 line:-1
And that's it.


157
00:06:50,744 --> 00:06:52,045 line:-1
You have your own AAC client


158
00:06:52,112 --> 00:06:55,148 line:-2
that's nicely integrated
with your assessment application.


159
00:06:55,215 --> 00:06:57,217 line:-2
Now that we've covered
the assessment mode life cycle


160
00:06:57,284 --> 00:07:00,120 line:-2
and how it looks in code,
it's important we go over some strategies


161
00:07:00,187 --> 00:07:02,222 line:-2
for adopting this new framework
in your projects.


162
00:07:02,289 --> 00:07:04,324 line:-1
But first, let's talk about vegetables.


163
00:07:05,826 --> 00:07:08,662 line:-2
When I was much younger, I always hated
when my vegetables got mixed up.


164
00:07:08,729 --> 00:07:11,231 line:-2
I did not like
when my peas touched my carrots.


165
00:07:11,298 --> 00:07:14,067 line:-2
I would always divide them up on my plate
with clear boundaries.


166
00:07:14,134 --> 00:07:16,170 line:-2
Today as a developer,
this really hasn't changed.


167
00:07:16,236 --> 00:07:17,804 line:-1
But now instead of peas and carrots,


168
00:07:17,871 --> 00:07:20,674 line:-2
I'm drawing clear boundaries
between my logic and effects.


169
00:07:21,708 --> 00:07:23,143 line:-1
When I say logic and effects,


170
00:07:23,210 --> 00:07:25,012 line:-2
I'm drawing the line
between the parts of my code


171
00:07:25,078 --> 00:07:26,413 line:-1
that decide to do things,


172
00:07:26,480 --> 00:07:28,382 line:-1
and the parts that actually do things.


173
00:07:29,483 --> 00:07:31,485 line:-1
Examples of this idea are things like


174
00:07:31,552 --> 00:07:34,588 line:-2
deciding to write a string to a plist
versus actually writing it,


175
00:07:34,655 --> 00:07:38,292 line:-2
or deciding to make a network request
versus actually making that request.


176
00:07:38,358 --> 00:07:39,626 line:-1
Or in your case,


177
00:07:39,693 --> 00:07:43,463 line:0
deciding to enter assessment mode
versus actually entering the mode.


178
00:07:43,530 --> 00:07:46,033 line:-2
In all these cases,
an important pattern emerges.


179
00:07:46,099 --> 00:07:49,303 line:-2
What if we look at all of these pieces
in terms of who owns them?


180
00:07:49,837 --> 00:07:52,873 line:-2
Your app owns all the logic.
Your app's the star of the show.


181
00:07:52,940 --> 00:07:54,775 line:-2
It's the thing that creates
the cool new experience,


182
00:07:54,842 --> 00:07:57,511 line:-2
and everything on the right side
of the fence is just a detail.


183
00:07:57,578 --> 00:07:59,079 line:-1
Now, you might be thinking,


184
00:07:59,146 --> 00:08:02,249 line:-2
"Neat. What does this have to do
with assessment mode?"


185
00:08:02,316 --> 00:08:04,184 line:-1
Well, like other side effects,


186
00:08:04,251 --> 00:08:06,119 line:-1
AAC can make writing tests difficult,


187
00:08:06,186 --> 00:08:08,989 line:-2
and in your case,
even make debugging in Xcode difficult.


188
00:08:09,623 --> 00:08:10,691 line:-1
So what do you do?


189
00:08:11,258 --> 00:08:14,127 line:-2
You should establish a good boundary
between your logic and effects


190
00:08:14,194 --> 00:08:15,696 line:-1
provided by AAC.


191
00:08:15,762 --> 00:08:17,297 line:-1
One way to do that is with protocols,


192
00:08:17,364 --> 00:08:19,566 line:-2
often referred to
as protocol-oriented programming.


193
00:08:19,633 --> 00:08:23,604 line:-2
With protocols, you can define a contract
detailing what work you need to be done


194
00:08:23,670 --> 00:08:26,006 line:-2
without having to worry about
who does that work.


195
00:08:26,073 --> 00:08:27,074 line:-1
Why is this valuable?


196
00:08:27,140 --> 00:08:29,943 line:-2
Let's take a look at some sample code
just to see why.


197
00:08:30,010 --> 00:08:31,545 line:-1
Let's pretend you've defined a protocol


198
00:08:31,612 --> 00:08:33,647 line:-2
that encapsulates
the entirety of assessment mode.


199
00:08:33,714 --> 00:08:36,015 line:-2
It's got begin, end,
and everything in between.


200
00:08:36,082 --> 00:08:37,784 line:-1
We'll call it AssessmentManaging.


201
00:08:38,751 --> 00:08:40,254 line:-1
One implementation of this protocol


202
00:08:40,320 --> 00:08:42,923 line:-2
will depend on
a real AEAssessmentSession.


203
00:08:42,990 --> 00:08:45,826 line:-2
This implementation will do the work
in a production setting.


204
00:08:45,893 --> 00:08:49,730 line:-2
In a test setting, however, you don't want
your machine to get locked down.


205
00:08:50,597 --> 00:08:53,400 line:0
For this case, you can replace
the real one with an implementation


206
00:08:53,467 --> 00:08:55,969 line:0
that just logs
when asking to enter assessment mode.


207
00:08:56,036 --> 00:08:59,206 line:0
Or even better, you could write
an implementation specifically for testing


208
00:08:59,273 --> 00:09:01,141 line:0
that's loaded up with test expectations.


209
00:09:01,208 --> 00:09:04,912 line:0
That way you can be sure you're invoking
your dependency correctly as well.


210
00:09:05,445 --> 00:09:08,315 line:-2
Depending on a protocol makes it easier
to exercise all the logic


211
00:09:08,382 --> 00:09:09,816 line:-1
surrounding assessment mode.


212
00:09:09,883 --> 00:09:11,718 line:-2
If this seems a bit high-level
or confusing,


213
00:09:11,785 --> 00:09:14,454 line:-2
you can always look to
the presentation companion sample app


214
00:09:14,521 --> 00:09:16,657 line:-2
to see functioning examples
of all of these ideas.


215
00:09:17,658 --> 00:09:19,359 line:0
This has been
a more lightweight explanation


216
00:09:19,426 --> 00:09:20,727 line:0
of protocol-oriented programming,


217
00:09:20,794 --> 00:09:22,563 line:0
so I recommend checking out
these previous sessions


218
00:09:22,629 --> 00:09:23,997 line:0
that dive deeper into the topic.


219
00:09:24,064 --> 00:09:25,899 line:0
It's a valuable tool
that will make writing tests


220
00:09:25,966 --> 00:09:27,434 line:0
for your assessment apps much easier,


221
00:09:27,501 --> 00:09:29,403 line:0
and as a result,
make the apps themselves better.


222
00:09:29,469 --> 00:09:32,306 line:-2
Since assessment developers
are distributing tests for students,


223
00:09:32,372 --> 00:09:35,175 line:-2
I think it only makes sense
that their apps are tested as well.


224
00:09:35,742 --> 00:09:37,211 line:-1
Besides the testing context,


225
00:09:37,277 --> 00:09:39,513 line:-2
establishing boundaries
will be particularly helpful


226
00:09:39,580 --> 00:09:41,915 line:-2
when debugging your assessment app
in Xcode.


227
00:09:41,982 --> 00:09:45,652 line:-2
Assessment mode on the Mac restricts
which apps can receive user input events.


228
00:09:45,719 --> 00:09:48,589 line:-2
If you're debugging your app in Xcode
and you hit a breakpoint,


229
00:09:48,655 --> 00:09:50,290 line:-1
you will have no way to proceed.


230
00:09:50,357 --> 00:09:52,092 line:-2
The app will hang,
waiting for the breakpoint,


231
00:09:52,159 --> 00:09:54,328 line:-2
and you will be stuck,
unable to interact with Xcode.


232
00:09:55,128 --> 00:09:56,663 line:-1
Fortunately, there's a solution.


233
00:09:56,730 --> 00:09:59,600 line:-2
If you restart your Mac,
assessment mode will stop running.


234
00:09:59,666 --> 00:10:03,036 line:-2
In fact, all system services
are guaranteed to be restored on reboot.


235
00:10:03,103 --> 00:10:04,104 line:-1
This is both a feature


236
00:10:04,171 --> 00:10:07,140 line:-2
and a great way to give students
some agency over their own Mac.


237
00:10:07,207 --> 00:10:10,110 line:-2
If you manage to deadlock Xcode
and your assessment app,


238
00:10:10,177 --> 00:10:11,979 line:-2
make sure to remember
rebooting is your friend.


239
00:10:12,045 --> 00:10:15,315 line:-2
Now let's talk about what we've done
this year on iOS and iPadOS.


240
00:10:16,149 --> 00:10:20,420 line:-2
Along with the Mac, the AAC framework
is also available on iOS and iPadOS.


241
00:10:20,487 --> 00:10:22,389 line:-2
This will make for
a unified developer experience


242
00:10:22,456 --> 00:10:24,358 line:-1
when building on any platform.


243
00:10:24,424 --> 00:10:25,893 line:-1
On iOS and iPadOS,


244
00:10:25,959 --> 00:10:29,229 line:-2
the AAC framework actually improves upon
the previous assessment experience.


245
00:10:29,296 --> 00:10:30,297 line:-1
Let me show you how.


246
00:10:30,931 --> 00:10:32,766 line:-1
This is the original API from UIKit


247
00:10:32,833 --> 00:10:35,369 line:-2
that developers have been using
to enter assessment mode on iPad.


248
00:10:36,236 --> 00:10:39,039 line:-2
I brushed past this a little earlier,
but during the sample code segment,


249
00:10:39,106 --> 00:10:40,741 line:-1
I'm sure some assessment veterans


250
00:10:40,807 --> 00:10:43,977 line:-2
noticed something a bit different
about the AEAssessmentSession.


251
00:10:44,678 --> 00:10:45,946 line:-1
It's the config.


252
00:10:46,013 --> 00:10:48,348 line:-2
The assessment session is designed
to be configurable.


253
00:10:48,415 --> 00:10:49,416 line:-1
We've heard loud and clear


254
00:10:49,483 --> 00:10:53,420 line:-2
that developers want ways to make
more customizable assessment experiences,


255
00:10:53,487 --> 00:10:56,123 line:-2
so we've made it possible
with this new framework.


256
00:10:56,190 --> 00:10:57,224 line:-1
In iOS 14,


257
00:10:57,291 --> 00:10:59,826 line:-2
you'll notice AEAssessmentConfiguration
includes options


258
00:10:59,893 --> 00:11:02,029 line:-2
for enabling system services
like dictation,


259
00:11:02,095 --> 00:11:03,964 line:-1
predictive keyboard and spell check.


260
00:11:04,998 --> 00:11:07,367 line:-2
These capabilities are critical
for a great user experience,


261
00:11:07,434 --> 00:11:09,837 line:-2
especially when you consider
the many different kinds of exams,


262
00:11:09,903 --> 00:11:11,839 line:-2
the different countries
students might be taking them,


263
00:11:11,905 --> 00:11:13,373 line:-1
and different needs students might have.


264
00:11:13,440 --> 00:11:16,677 line:-2
For example, allowing spell check
might make more sense on a math test


265
00:11:16,743 --> 00:11:18,478 line:-1
where spelling isn't really being tested.


266
00:11:18,545 --> 00:11:21,648 line:-2
Or continuous path keyboard
might be beneficial for tests in languages


267
00:11:21,715 --> 00:11:23,650 line:-1
where it makes inputting answers easier.


268
00:11:23,717 --> 00:11:26,386 line:-2
This list of capabilities we're releasing
is pretty cool,


269
00:11:26,453 --> 00:11:29,456 line:-2
but actually, the idea of the list
is cooler than the list.


270
00:11:29,523 --> 00:11:32,125 line:-2
What I mean to say
is that assessment mode configurability


271
00:11:32,192 --> 00:11:33,627 line:-1
is now a first-class citizen.


272
00:11:33,694 --> 00:11:36,330 line:-2
The AEAssessmentConfiguration
is an expandable value


273
00:11:36,396 --> 00:11:38,765 line:-2
designed to evolve
with the landscape of the operating system


274
00:11:38,832 --> 00:11:40,801 line:-2
and more importantly,
with the needs of developers.


275
00:11:40,868 --> 00:11:41,869 line:-1
I think it's pretty cool.


276
00:11:42,703 --> 00:11:44,004 line:0
These new points of customization


277
00:11:44,071 --> 00:11:46,340 line:0
will only be available
in the new AAC framework,


278
00:11:46,406 --> 00:11:50,177 line:0
so you'll want to migrate away from
the existing assessment mode API in UIKit.


279
00:11:50,911 --> 00:11:53,447 line:-2
I have one more exciting piece
of AAC news to give you.


280
00:11:53,514 --> 00:11:55,482 line:-2
Now that we have
a new assessment framework


281
00:11:55,549 --> 00:11:57,417 line:-1
for iOS, iPadOS and macOS,


282
00:11:57,484 --> 00:11:59,820 line:-2
and we expose the exact same API
across all of them,


283
00:11:59,887 --> 00:12:02,289 line:-2
it's only natural that we make
this functionality available


284
00:12:02,356 --> 00:12:03,557 line:-1
for Catalyst apps.


285
00:12:04,057 --> 00:12:06,193 line:-1
Beginning in iOS 14 and macOS Big Sur,


286
00:12:06,260 --> 00:12:08,529 line:-2
your iOS apps will have
complete assessment mode support


287
00:12:08,595 --> 00:12:09,830 line:-1
when running on the Mac.


288
00:12:09,897 --> 00:12:10,898 line:-1
No matter the platform,


289
00:12:10,964 --> 00:12:13,634 line:-2
your app will initiate
the contextually correct assessment mode.


290
00:12:13,700 --> 00:12:14,701 line:-1
In summary,


291
00:12:14,768 --> 00:12:18,438 line:-2
we brought assessment mode to the Mac
with a new dedicated framework.


292
00:12:18,505 --> 00:12:21,241 line:-2
We made that framework available
on iOS and iPadOS


293
00:12:21,308 --> 00:12:24,378 line:-2
and expanded upon the experience,
making it more customizable.


294
00:12:24,845 --> 00:12:27,915 line:-2
And finally, we shipped
a friendly, cross-platform API


295
00:12:27,981 --> 00:12:31,952 line:-2
that makes bringing your iOS
and iPadOS apps to the Mac even easier.


296
00:12:32,519 --> 00:12:33,554 line:-1
Thank you for listening


297
00:12:33,620 --> 00:12:35,622 line:-2
to what Apple's been working on
in the assessment space.


298
00:12:35,689 --> 00:12:38,158 line:-2
Have fun building amazing apps
with these powerful new tools.

