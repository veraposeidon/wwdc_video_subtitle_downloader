1
00:00:03,937 --> 00:00:06,840 line:-1
Hello and welcome to WWDC.


2
00:00:08,809 --> 00:00:12,546 line:0
Hi. My name is Elliot Garner,
and in this video,


3
00:00:12,613 --> 00:00:15,048 line:0
I'm going to be discussing
push notifications.


4
00:00:15,115 --> 00:00:18,519 line:-2
Let's begin with an overview
of push notifications,


5
00:00:18,919 --> 00:00:21,388 line:-1
what they are and why you might use them.


6
00:00:21,922 --> 00:00:25,893 line:-2
Then, I will be discussing
how you can add them to your application.


7
00:00:26,827 --> 00:00:31,265 line:-2
Push notifications allow applications
to be engaging and interactive.


8
00:00:31,732 --> 00:00:36,336 line:-2
They provide you the ability to deliver
updates to your application in real time.


9
00:00:36,970 --> 00:00:39,239 line:-1
This allows for a more dynamic experience


10
00:00:39,306 --> 00:00:41,441 line:-2
when it comes to
updating your application.


11
00:00:41,975 --> 00:00:44,278 line:-1
So, what exactly are the advantages


12
00:00:44,344 --> 00:00:46,813 line:-2
to adding push notifications
to your application?


13
00:00:47,614 --> 00:00:51,051 line:-2
First, they do not require
your application to be in the foreground.


14
00:00:51,752 --> 00:00:54,421 line:-2
Push notifications are delivered
to your application


15
00:00:54,488 --> 00:00:56,123 line:-1
regardless of the app state


16
00:00:56,190 --> 00:00:59,826 line:-2
and, if necessary,
your application will be launched.


17
00:01:00,727 --> 00:01:03,063 line:-1
Push notifications are power-efficient


18
00:01:03,130 --> 00:01:06,133 line:-2
and are a great way to engage
with your customers.


19
00:01:06,600 --> 00:01:09,036 line:-1
There are two types of push notifications:


20
00:01:09,102 --> 00:01:12,539 line:-2
Alert notifications
and background notifications.


21
00:01:12,606 --> 00:01:15,943 line:-2
Alert notifications allow you
to deliver visible alerts


22
00:01:16,009 --> 00:01:19,479 line:-2
that can be interacted with
in ways that your app can customize.


23
00:01:20,214 --> 00:01:24,117 line:-2
Background notifications allow
your application to receive runtime


24
00:01:24,184 --> 00:01:27,955 line:-2
while it is not in the foreground
in order to keep your content up-to-date.


25
00:01:28,021 --> 00:01:31,091 line:-1
Now, let's talk about alert pushes first.


26
00:01:31,658 --> 00:01:34,695 line:-2
Alert pushes allow you to deliver
a visible alert


27
00:01:34,761 --> 00:01:37,164 line:-1
to give an update about your application.


28
00:01:37,631 --> 00:01:40,534 line:-2
This alert should be used
to inform about new information


29
00:01:40,601 --> 00:01:42,536 line:-1
that can be interacted with.


30
00:01:42,603 --> 00:01:45,339 line:-2
This alert does not require
your application to be running


31
00:01:45,405 --> 00:01:48,041 line:-2
and will be displayed
regardless of app state.


32
00:01:48,108 --> 00:01:51,478 line:-2
And, most importantly,
it's entirely customizable.


33
00:01:51,879 --> 00:01:55,549 line:-2
How the alert looks,
and its interact-ability, is up to you.


34
00:01:56,483 --> 00:01:59,453 line:-2
Let's look at how you would begin
setting up your application


35
00:01:59,520 --> 00:02:01,188 line:-1
for alert notifications.


36
00:02:01,255 --> 00:02:04,992 line:-2
The first thing you need to do
is register for remote notifications.


37
00:02:05,592 --> 00:02:10,797 line:-2
This will register the device for
Apple Push Notification system, or APNs,


38
00:02:10,864 --> 00:02:13,600 line:-2
and will return a device token
to your application.


39
00:02:14,268 --> 00:02:19,039 line:-2
This token is used to identify the device
and lets you target it for notifications.


40
00:02:19,706 --> 00:02:22,676 line:-2
Next, you will need to declare
your AppDelegate


41
00:02:22,743 --> 00:02:25,312 line:-1
a UNUserNotificationCenterDelegate.


42
00:02:25,779 --> 00:02:27,181 line:-1
Once you have done that,


43
00:02:27,247 --> 00:02:31,518 line:-2
you will assign your AppDelegate
as a delegate of the Notification Center.


44
00:02:31,919 --> 00:02:35,822 line:-2
This will let your application be notified
when your alert gets opened.


45
00:02:36,290 --> 00:02:39,126 line:-2
Once you have called
registerForRemoteNotifications,


46
00:02:39,193 --> 00:02:42,429 line:-2
you will receive a callback
on one of these two methods.


47
00:02:42,496 --> 00:02:44,798 line:-2
If you failed to get a token
for the device,


48
00:02:44,865 --> 00:02:48,202 line:-2
didFailToRegisterFor
RemoteNotificationsWithError


49
00:02:48,268 --> 00:02:51,605 line:-2
will be called with the error
describing why registration failed.


50
00:02:52,940 --> 00:02:54,908 line:-1
If you succeeded in getting a token,


51
00:02:54,975 --> 00:02:57,878 line:-2
you need to send that token
to your back end push server


52
00:02:57,945 --> 00:03:00,547 line:-2
so you can deliver notifications
to this device.


53
00:03:01,014 --> 00:03:03,183 line:-1
Let's take a look at an example of that.


54
00:03:03,650 --> 00:03:07,988 line:-2
The device token is delivered
to your application as a data object.


55
00:03:08,422 --> 00:03:13,393 line:-2
So, in order to send it to your server,
it needs to be converted into a string.


56
00:03:13,994 --> 00:03:17,297 line:-2
You can do that by separating the data
into its components,


57
00:03:17,764 --> 00:03:20,834 line:-2
converting those components
into a hexadecimal string,


58
00:03:20,901 --> 00:03:23,804 line:-2
and then joining them back together
into a single string.


59
00:03:24,705 --> 00:03:27,641 line:-2
You then append that string
to your URLQuery


60
00:03:27,708 --> 00:03:29,743 line:-1
to make your fully qualified endpoint.


61
00:03:31,078 --> 00:03:33,380 line:-1
Then, you perform a URLSession


62
00:03:33,447 --> 00:03:37,251 line:-2
to send that token to your server
to register it in your database.


63
00:03:38,218 --> 00:03:41,989 line:-2
Lastly, before the device
can receive any notifications,


64
00:03:42,055 --> 00:03:45,959 line:-2
you need to ask for permissions
for your application to display alerts.


65
00:03:46,460 --> 00:03:50,097 line:-2
Calling requestAuthorization
results in a prompt being displayed


66
00:03:50,163 --> 00:03:52,666 line:-2
asking if your application
can display alerts.


67
00:03:53,934 --> 00:03:57,337 line:-2
The result of that decision
will be passed to the completionHandler


68
00:03:57,404 --> 00:03:59,773 line:-1
and is set in device settings.


69
00:03:59,840 --> 00:04:01,875 line:-1
Any successive calls to this method


70
00:04:01,942 --> 00:04:05,913 line:-2
will return the status in device settings
and will not result in a prompt.


71
00:04:06,446 --> 00:04:10,651 line:-2
As you can see, this function is asking
for permissions to display an alert,


72
00:04:11,251 --> 00:04:14,855 line:-2
play a sound, and present a badge
on the application icon.


73
00:04:15,489 --> 00:04:20,160 line:-2
Only request authorization in response to
an action when there is context.


74
00:04:20,226 --> 00:04:23,030 line:-2
You are much more likely to get
permissions with this context.


75
00:04:23,463 --> 00:04:26,834 line:-2
Before discussing how to handle
a notification payload,


76
00:04:26,900 --> 00:04:28,936 line:-1
let's look at an example payload.


77
00:04:29,503 --> 00:04:32,439 line:-2
Let's say that you're building
an application for a restaurant


78
00:04:32,506 --> 00:04:36,410 line:-2
that wants to be able to alert users
whenever there is a new special.


79
00:04:37,444 --> 00:04:40,013 line:-1
As you can see, this alert is telling us


80
00:04:40,080 --> 00:04:42,516 line:-2
that the Avocado Bacon Burger
is now on sale.


81
00:04:43,483 --> 00:04:45,719 line:-2
Let's step through this payload
piece by piece


82
00:04:45,786 --> 00:04:47,988 line:-1
to make sure that it's understood.


83
00:04:48,055 --> 00:04:50,257 line:-1
First is the aps dictionary.


84
00:04:50,757 --> 00:04:54,828 line:-2
This aps dictionary tells the device
how to render the notification.


85
00:04:54,895 --> 00:04:58,232 line:-2
Inside of the aps dictionary
is the alert dictionary.


86
00:04:58,732 --> 00:05:02,336 line:-2
This tells the system what text to use
for the notification.


87
00:05:02,970 --> 00:05:05,906 line:-2
Inside of that
are the title and body fields.


88
00:05:06,306 --> 00:05:08,208 line:-1
The title field is a short string


89
00:05:08,275 --> 00:05:10,644 line:-2
describing the purpose
of the notification.


90
00:05:10,711 --> 00:05:13,247 line:-2
This needs to be short
and easy to understand.


91
00:05:14,047 --> 00:05:17,918 line:-2
The body field is the full descriptive
text of the alert message.


92
00:05:17,985 --> 00:05:19,386 line:-1
Next is the sound field.


93
00:05:19,820 --> 00:05:21,088 line:-1
This field is optional


94
00:05:21,154 --> 00:05:24,091 line:-2
and should be included
when you want the device to play a sound


95
00:05:24,157 --> 00:05:25,859 line:-1
when the alert is received.


96
00:05:25,926 --> 00:05:30,130 line:-2
If you wanna use the default sound,
simply use default like this.


97
00:05:30,197 --> 00:05:34,301 line:-2
However, you can also provide
custom sounds for your application.


98
00:05:34,735 --> 00:05:36,503 line:-1
Next is the badge field.


99
00:05:36,570 --> 00:05:40,974 line:-2
This is an optional field which is used
to modify the badge of your app icon.


100
00:05:41,575 --> 00:05:45,012 line:-2
This is an absolute value
which will be displayed on the app icon.


101
00:05:45,712 --> 00:05:48,415 line:-2
This value can be modified
programmatically,


102
00:05:48,482 --> 00:05:50,017 line:-1
so once the alert has been opened,


103
00:05:50,083 --> 00:05:52,853 line:-2
set this value to zero
when handling the notification.


104
00:05:53,420 --> 00:05:56,190 line:-2
Outside of the aps field,
you have any custom data


105
00:05:56,256 --> 00:05:59,159 line:-2
that you might wanna provide
alongside the notification.


106
00:05:59,226 --> 00:06:02,796 line:-2
Here, it's telling the application
what the special is for today,


107
00:06:02,863 --> 00:06:04,198 line:-1
and how much it costs.


108
00:06:05,032 --> 00:06:07,467 line:-2
Now that we know
what our payload looks like,


109
00:06:07,534 --> 00:06:10,204 line:-2
let's examine how to handle
receiving a notification.


110
00:06:10,971 --> 00:06:15,008 line:-2
This method is the UNUser
NotificationCenterDelegate method


111
00:06:15,075 --> 00:06:17,845 line:-2
that is called
whenever your notification is opened.


112
00:06:18,378 --> 00:06:20,113 line:-1
This method has a completionHandler


113
00:06:20,180 --> 00:06:22,983 line:-2
that must be called
before returning from the function.


114
00:06:23,050 --> 00:06:25,352 line:-2
The payload that was delivered
to the application


115
00:06:25,419 --> 00:06:30,123 line:-2
can be extracted from the userInfo
property of the notification's content.


116
00:06:30,190 --> 00:06:32,559 line:-1
Once you have the payload, parse the data


117
00:06:32,626 --> 00:06:35,395 line:-2
from the dictionary representation
of the JSON.


118
00:06:36,029 --> 00:06:38,799 line:-1
If the data isn't there as is expected,


119
00:06:38,866 --> 00:06:41,235 line:-2
call the completionHandler
before returning.


120
00:06:41,702 --> 00:06:43,237 line:-1
This lets the system know


121
00:06:43,303 --> 00:06:46,773 line:-2
that you have finished handling
the opening of the notification.


122
00:06:46,840 --> 00:06:51,979 line:-2
Once you have the data, you can perform
any updates necessary to your application.


123
00:06:52,546 --> 00:06:56,316 line:-2
You should be opening the part of your
application relevant to the alert.


124
00:06:56,383 --> 00:06:59,953 line:-2
In the example of the restaurant,
when the alert is tapped,


125
00:07:00,020 --> 00:07:03,290 line:-2
the item is added to the cart
and the cart is displayed.


126
00:07:05,058 --> 00:07:07,261 line:-2
Once you're done,
call the completionHandler


127
00:07:07,327 --> 00:07:09,029 line:-1
to tell the system that you finished.


128
00:07:09,563 --> 00:07:10,664 line:-1
And that's it.


129
00:07:11,164 --> 00:07:13,867 line:-2
That's all that you need to do
to set up your application


130
00:07:13,934 --> 00:07:16,637 line:-1
to handle and receive alert notifications.


131
00:07:17,571 --> 00:07:20,274 line:-2
Now that we've examined
implementing alert pushes,


132
00:07:20,340 --> 00:07:22,309 line:-1
let's discuss background pushes


133
00:07:22,376 --> 00:07:24,978 line:-2
and how you can use them
in your application.


134
00:07:25,045 --> 00:07:27,881 line:-2
Background pushes
are similar to alert pushes


135
00:07:28,282 --> 00:07:31,752 line:-2
but there are some crucial differences
that are important to remember.


136
00:07:32,386 --> 00:07:36,023 line:-2
Background notifications
allow your application to fetch data


137
00:07:36,089 --> 00:07:38,959 line:-2
from the background
upon receiving push notifications.


138
00:07:39,593 --> 00:07:42,296 line:-2
These should be used
to keep your application up-to-date


139
00:07:42,362 --> 00:07:44,231 line:-1
even if the application isn't running.


140
00:07:44,298 --> 00:07:47,901 line:-2
The system will launch your application
and give you necessary runtime


141
00:07:47,968 --> 00:07:50,204 line:-2
in order to perform
your background update.


142
00:07:50,737 --> 00:07:53,207 line:-1
However, there are some limitations.


143
00:07:53,574 --> 00:07:57,411 line:-2
The system limits applications
to so many background operations a day,


144
00:07:57,845 --> 00:08:00,480 line:-2
and background updates
will not be performed


145
00:08:00,547 --> 00:08:02,716 line:-2
if the device
is under certain constraints.


146
00:08:02,783 --> 00:08:05,786 line:-2
For example,
if the device is in a low battery state.


147
00:08:06,653 --> 00:08:10,390 line:-2
So, what do you need to do
in order to set up your application


148
00:08:10,457 --> 00:08:14,161 line:-2
to register for and handle
receiving background pushes?


149
00:08:14,228 --> 00:08:17,197 line:-2
Like with alert pushes,
you need to register your application


150
00:08:17,264 --> 00:08:18,699 line:-1
for remote notifications


151
00:08:18,765 --> 00:08:21,702 line:-2
in order to obtain a device token
for your application.


152
00:08:22,703 --> 00:08:24,938 line:-1
However, unlike alert pushes,


153
00:08:25,005 --> 00:08:29,643 line:-2
you do not need to make your application
a UNUserNotificationCenterDelegate


154
00:08:29,710 --> 00:08:32,479 line:-2
or assign it to
the UNUserNotificationCenter.


155
00:08:33,013 --> 00:08:36,283 line:-2
That's because
the UNUserNotificationCenterDelegate


156
00:08:36,350 --> 00:08:39,520 line:-2
is only used
when handling alert notifications.


157
00:08:39,586 --> 00:08:43,323 line:-2
And since background notifications
are all that's being implemented here,


158
00:08:43,390 --> 00:08:44,625 line:-1
it's unnecessary.


159
00:08:45,225 --> 00:08:47,895 line:-2
Because registerForRemoteNotifications
was called,


160
00:08:48,228 --> 00:08:50,697 line:-2
you still need
to handle receiving a device token,


161
00:08:50,764 --> 00:08:53,400 line:-2
and you still need to send that device
to your push server


162
00:08:53,467 --> 00:08:54,968 line:-1
for your own registration.


163
00:08:55,335 --> 00:08:59,006 line:-2
This is exactly the same as what needs
to be done for alert notifications.


164
00:08:59,540 --> 00:09:02,776 line:-2
Now, let's examine the payload
for a background notification.


165
00:09:02,843 --> 00:09:05,879 line:-2
As you can see,
background notification payloads


166
00:09:05,946 --> 00:09:08,615 line:-2
are much more simple
than alert notifications.


167
00:09:09,082 --> 00:09:11,652 line:-2
The only field required
for background notifications


168
00:09:11,718 --> 00:09:14,955 line:-2
is the content-available field
inside of the aps dictionary.


169
00:09:16,089 --> 00:09:19,426 line:-2
This field tells the system
that this is a background notification


170
00:09:19,493 --> 00:09:23,197 line:-2
and that your application should be
launched to perform your updates.


171
00:09:23,730 --> 00:09:25,532 line:-1
Just like alert notifications,


172
00:09:25,599 --> 00:09:28,869 line:-2
the outside of the aps dictionary
can be used for custom data.


173
00:09:28,936 --> 00:09:32,472 line:-2
Now, let's look at
how you would handle a background push.


174
00:09:33,106 --> 00:09:35,976 line:-2
When the device receives
any remote notification,


175
00:09:36,043 --> 00:09:38,412 line:-1
didReceiveRemoteNotification is called.


176
00:09:39,012 --> 00:09:41,949 line:-2
Use this method
to handle your background notification.


177
00:09:43,250 --> 00:09:45,652 line:-2
This function
also has a completionHandler.


178
00:09:45,953 --> 00:09:49,923 line:-2
However, unlike the completionHandler
when handling alert notifications,


179
00:09:49,990 --> 00:09:52,159 line:-1
this completionHandler has one parameter.


180
00:09:53,393 --> 00:09:55,028 line:-1
This parameter is an enum


181
00:09:55,095 --> 00:09:58,232 line:-2
which tells the system whether
your background update failed...


182
00:09:58,298 --> 00:09:59,733 line:-1
received no data...


183
00:09:59,800 --> 00:10:01,168 line:-1
or received new data.


184
00:10:02,069 --> 00:10:03,704 line:-1
This allows the system to be smart


185
00:10:03,770 --> 00:10:06,573 line:-2
about when to launch your application
in the future.


186
00:10:07,541 --> 00:10:10,744 line:-2
So, in the case
of the restaurant application,


187
00:10:10,811 --> 00:10:14,381 line:-2
background notifications are being used
to fetch the menu every day


188
00:10:14,448 --> 00:10:16,950 line:-2
in order to make sure
its content is up-to-date.


189
00:10:17,551 --> 00:10:20,888 line:-2
If the URL for the current version
of the menu fails to be made,


190
00:10:20,954 --> 00:10:23,891 line:-2
call the completionHandler
and tell it the background update failed.


191
00:10:25,359 --> 00:10:29,162 line:-2
Once the URL is created,
a URLSession needs to be created


192
00:10:29,229 --> 00:10:31,498 line:-2
in order to fetch the data
for today's menu.


193
00:10:32,065 --> 00:10:35,068 line:-2
If no data was received,
call the completionHandler


194
00:10:35,135 --> 00:10:39,373 line:-2
and tell it that the background update
finished successfully with no data.


195
00:10:40,807 --> 00:10:44,211 line:-2
Otherwise, now that the updated menu
has been fetched,


196
00:10:44,278 --> 00:10:47,614 line:-2
the application can use
that data to update its contents.


197
00:10:48,115 --> 00:10:49,950 line:-1
And once that has been finished,


198
00:10:50,017 --> 00:10:52,519 line:-2
the completionHandler can be called
to tell the system


199
00:10:52,586 --> 00:10:56,156 line:-2
that the background update has succeeded
and retrieved new data.


200
00:10:57,224 --> 00:10:59,560 line:-2
And that's all it takes
to get your application


201
00:10:59,626 --> 00:11:01,295 line:-1
to handle background notifications.


202
00:11:01,895 --> 00:11:04,598 line:-2
Now that you know
what push notifications are,


203
00:11:04,665 --> 00:11:07,568 line:-2
how they can be used,
and how to implement them,


204
00:11:07,634 --> 00:11:10,637 line:-2
it should be no problem
to add them to your application.


205
00:11:11,205 --> 00:11:15,642 line:-2
All that you need to do is enable
push notifications in the developer portal


206
00:11:15,709 --> 00:11:19,746 line:-2
and follow these steps to add
push notifications to your application.


207
00:11:20,981 --> 00:11:22,382 line:-1
Download the sample app.


208
00:11:22,449 --> 00:11:24,918 line:-2
It has all of the codes
shown in this video.


209
00:11:25,252 --> 00:11:27,821 line:-2
Look through it,
and use it as a jumping-off point


210
00:11:27,888 --> 00:11:30,257 line:-1
for adding notifications to your apps.


211
00:11:30,324 --> 00:11:32,092 line:-1
Once you have done these things,


212
00:11:32,159 --> 00:11:36,730 line:-2
you are well on your way to creating an
enriched experience for your applications.


213
00:11:36,797 --> 00:11:37,965 line:-1
Thank you.

