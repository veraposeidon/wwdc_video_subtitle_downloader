1
00:00:03,937 --> 00:00:06,340 line:-1
Hello and welcome to WWDC.


2
00:00:08,342 --> 00:00:12,012 line:0
Hi. My name is Ellie Epskamp-Hunt.
I work on Safari.


3
00:00:12,079 --> 00:00:14,882 line:0
Today I'm going to introduce
a new type of Safari extension,


4
00:00:14,948 --> 00:00:16,683 line:0
Safari web extensions.


5
00:00:17,117 --> 00:00:19,052 line:-1
Before I go into more detail,


6
00:00:19,119 --> 00:00:22,689 line:-2
let's cover Safari's
existing extension ecosystem.


7
00:00:22,756 --> 00:00:27,661 line:-2
First there are Content Blockers.
These are available for iOS and macOS,


8
00:00:27,728 --> 00:00:30,297 line:-2
and are designed for speed
and user privacy.


9
00:00:30,364 --> 00:00:33,667 line:-2
Safari 13.1 can even run
your Content Blockers


10
00:00:33,734 --> 00:00:36,069 line:-2
delivered with apps
built with Mac Catalyst.


11
00:00:37,304 --> 00:00:39,306 line:-1
Next up, share extensions.


12
00:00:39,373 --> 00:00:42,743 line:-2
These are also available
on both iOS and macOS.


13
00:00:42,809 --> 00:00:44,144 line:-1
Once invoked by the user,


14
00:00:44,211 --> 00:00:46,446 line:-2
they are able to run JavaScript
on the webpage


15
00:00:46,513 --> 00:00:48,649 line:-1
and return data to your app extension.


16
00:00:49,216 --> 00:00:52,819 line:-2
And third, Safari App Extensions,
available on macOS.


17
00:00:53,220 --> 00:00:55,589 line:-2
These are great
if you are a native app developer


18
00:00:55,656 --> 00:00:58,292 line:-1
already familiar with Swift or Objective-C


19
00:00:58,358 --> 00:01:01,228 line:-2
who wants to extend
your app's functionality into Safari.


20
00:01:02,429 --> 00:01:05,165 line:-2
These extensions are all built
using native technologies


21
00:01:05,232 --> 00:01:06,900 line:-1
like Swift or Objective-C.


22
00:01:06,967 --> 00:01:10,070 line:-2
But what if you aren't familiar
with this style of development,


23
00:01:10,137 --> 00:01:15,375 line:-2
but are instead a web developer
familiar with JavaScript, HTML, and CSS?


24
00:01:15,442 --> 00:01:19,279 line:-2
Maybe you even have an extension
written for another major web browser


25
00:01:19,346 --> 00:01:21,548 line:-2
and you don't want to re-write it
in native code.


26
00:01:22,316 --> 00:01:23,884 line:-1
This year, we are thrilled to announce


27
00:01:23,951 --> 00:01:27,187 line:-2
that Safari is adding support
for web extensions on macOS.


28
00:01:28,322 --> 00:01:32,492 line:-2
These are built primarily using
JavaScript, HTML, and CSS,


29
00:01:32,559 --> 00:01:35,162 line:-1
similar to Legacy Safari Extensions.


30
00:01:35,229 --> 00:01:38,498 line:-2
But this type of extension
brings along significant improvements.


31
00:01:39,533 --> 00:01:42,035 line:-2
You can use
the same extension model and APIs


32
00:01:42,102 --> 00:01:44,972 line:-2
that you are already familiar with
in other browsers.


33
00:01:45,706 --> 00:01:49,810 line:-2
And web extensions also provide
improved user privacy controls


34
00:01:49,877 --> 00:01:52,546 line:-2
along with the ability
to sell through the App Store.


35
00:01:53,680 --> 00:01:55,983 line:-2
Today we're going to show you
just how easy it is


36
00:01:56,049 --> 00:01:59,553 line:-2
to bring your extensions
from other browsers to Safari.


37
00:01:59,620 --> 00:02:02,789 line:-2
We will walk you through
using our conversion tool.


38
00:02:02,856 --> 00:02:05,492 line:-2
We will review
our privacy-centric permissions model


39
00:02:05,559 --> 00:02:09,263 line:-2
to show how users will grant capabilities
to your extension.


40
00:02:09,329 --> 00:02:12,299 line:-2
Finally, we will cover tips and tricks
for debugging


41
00:02:12,366 --> 00:02:14,902 line:-2
and show how to message
your extension's native app.


42
00:02:16,370 --> 00:02:19,072 line:-2
Before we create
our first Safari web extension,


43
00:02:19,139 --> 00:02:21,608 line:-2
let's talk about
how these extensions are packaged.


44
00:02:23,210 --> 00:02:25,145 line:-1
Just like other Safari extensions,


45
00:02:25,212 --> 00:02:28,649 line:-2
Safari web extensions
are packaged with native apps.


46
00:02:28,715 --> 00:02:33,320 line:-2
When that native app is installed,
the extension is also installed in Safari.


47
00:02:33,387 --> 00:02:34,922 line:-1
It's up to you, the developer,


48
00:02:34,988 --> 00:02:37,824 line:-2
if the containing app
should play any role beyond this.


49
00:02:38,959 --> 00:02:41,261 line:-2
The containing apps
for Safari web extensions


50
00:02:41,328 --> 00:02:43,397 line:-1
will be distributed through the App Store.


51
00:02:44,998 --> 00:02:47,801 line:-2
And because these extensions
are packaged with apps,


52
00:02:47,868 --> 00:02:52,172 line:-2
you'll need to download Xcode 12 or higher
to build and run that app.


53
00:02:52,773 --> 00:02:55,576 line:-2
We've built a command-line tool
that ships with Xcode


54
00:02:55,642 --> 00:02:58,812 line:-2
to help you convert existing extensions
to use in Safari.


55
00:02:58,879 --> 00:03:02,115 line:-2
This tool will package your extension
into a native app.


56
00:03:03,250 --> 00:03:07,521 line:-2
This tool only needs to be run once
to create a default Xcode project


57
00:03:07,588 --> 00:03:10,991 line:-2
using information
from your extension's manifest file.


58
00:03:11,058 --> 00:03:14,928 line:-2
That project will build and run
the native app containing your extension.


59
00:03:15,429 --> 00:03:17,431 line:-2
If there are keys
that appear in your manifest


60
00:03:17,497 --> 00:03:19,933 line:-2
that are not supported
by the current version of Safari,


61
00:03:20,000 --> 00:03:21,468 line:-1
the tool will let you know.


62
00:03:23,704 --> 00:03:25,873 line:-2
The largest icon
you declare in the manifest


63
00:03:25,939 --> 00:03:28,041 line:-1
will be used as your app's icon,


64
00:03:28,108 --> 00:03:32,279 line:-2
so you'll want to declare
a larger icon size in your manifest.


65
00:03:32,346 --> 00:03:39,319 line:-2
We recommend that you add
a 512 by 512 icon and a 1024 by 1024 icon.


66
00:03:39,386 --> 00:03:42,890 line:-2
For more information
on designing great Mac app icons,


67
00:03:42,956 --> 00:03:45,692 line:-2
check out the macOS
Human Interface Guidelines.


68
00:03:47,928 --> 00:03:51,231 line:-2
Finally, if you add more files
while developing your extension,


69
00:03:51,298 --> 00:03:54,635 line:-2
these new files must be added
to your Xcode project.


70
00:03:54,701 --> 00:03:57,538 line:-2
And note that when you modify
your source files through Xcode,


71
00:03:57,604 --> 00:04:00,440 line:-2
your changes will appear
in the original file.


72
00:04:01,308 --> 00:04:03,710 line:-2
Now let's see how this tool works
in practice.


73
00:04:07,014 --> 00:04:08,916 line:-1
I have my unconverted extension here.


74
00:04:09,516 --> 00:04:13,554 line:-2
Sea Creator is an extension that replaces
aquatic animal names in webpages


75
00:04:13,620 --> 00:04:15,455 line:-1
with their corresponding emoji.


76
00:04:15,522 --> 00:04:18,392 line:-2
This folder contains
all my extension's resources.


77
00:04:19,459 --> 00:04:24,264 line:-2
In Terminal, I'll run
the safari-web-extension-converter command


78
00:04:24,331 --> 00:04:27,367 line:-2
and provide the path
to the extension folder.


79
00:04:30,737 --> 00:04:34,741 line:-2
Here it's asking if the information
it gleaned from the manifest is correct.


80
00:04:34,808 --> 00:04:37,311 line:-2
If I saw an issue with anything here,
I could type "no"


81
00:04:37,377 --> 00:04:39,479 line:-2
and the tool would allow me
to make changes.


82
00:04:39,546 --> 00:04:41,481 line:-2
But everything looks good,
so I'll press Enter


83
00:04:41,548 --> 00:04:44,284 line:-2
to use the default option
in the brackets, which is "yes."


84
00:04:48,856 --> 00:04:52,860 line:-2
We've got a warning from the tool.
Let's minimize Xcode for a second.


85
00:04:56,296 --> 00:05:00,200 line:-2
I declared that I wanted to use
the notifications API in my manifest,


86
00:05:00,267 --> 00:05:03,470 line:-2
but that isn't supported
in this version of Safari.


87
00:05:03,537 --> 00:05:07,007 line:-2
Since notifications aren't a critical part
of this extension's functionality,


88
00:05:07,074 --> 00:05:08,575 line:-1
I can continue converting.


89
00:05:09,276 --> 00:05:12,579 line:-2
Now let's run the app
and see the extension appear in Safari.


90
00:05:12,646 --> 00:05:14,948 line:-1
Click the Run button to build and run.


91
00:05:16,650 --> 00:05:19,453 line:-2
Here's the app that was created
by the converter tool.


92
00:05:19,520 --> 00:05:21,088 line:-1
It has the extension's icon,


93
00:05:21,154 --> 00:05:24,258 line:-2
some text indicating
if the extension is turned on or off,


94
00:05:24,324 --> 00:05:27,494 line:-2
and a button to open up
Safari's Preferences pane.


95
00:05:27,561 --> 00:05:30,464 line:-2
It's up to you
if you want to customize this app further.


96
00:05:30,898 --> 00:05:33,834 line:-1
Okay, let's open up Safari's Preferences.


97
00:05:36,603 --> 00:05:38,939 line:-1
Note that our extension isn't here.


98
00:05:39,006 --> 00:05:43,277 line:-2
Because I am just trying this tool out,
I don't have a developer certificate yet,


99
00:05:43,343 --> 00:05:45,913 line:-1
so the parent app is ad-hoc signed.


100
00:05:45,979 --> 00:05:49,883 line:-2
By default, Safari won't show extensions
from ad-hoc signed apps.


101
00:05:49,950 --> 00:05:53,253 line:-2
To show these extensions,
we need to first turn on the Develop menu.


102
00:05:54,121 --> 00:05:55,455 line:-1
Click in Advanced,


103
00:05:56,456 --> 00:05:59,092 line:-1
and then "show Develop menu in Menu bar."


104
00:06:00,394 --> 00:06:01,962 line:-1
Then in the Develop menu,


105
00:06:04,131 --> 00:06:07,634 line:-2
allow unsigned extensions
and authenticate.


106
00:06:10,170 --> 00:06:15,509 line:-2
Coming back to the extension pane,
there's our extension installed in Safari.


107
00:06:15,576 --> 00:06:17,678 line:-1
Below the extension description


108
00:06:17,744 --> 00:06:21,381 line:-2
is an explanation
of the privileges this extension has.


109
00:06:21,448 --> 00:06:23,016 line:-1
This extension's permissions mean


110
00:06:23,083 --> 00:06:25,752 line:-2
it can only access
the current tab's webpage


111
00:06:25,819 --> 00:06:28,188 line:-2
after the user interacts
with the toolbar icon,


112
00:06:28,255 --> 00:06:30,991 line:-2
a context menu item
or a keyboard shortcut.


113
00:06:31,058 --> 00:06:33,694 line:-2
All right, let's turn this extension on
and see it working.


114
00:06:40,367 --> 00:06:43,804 line:-2
The extension has a toolbar button now,
but its icon is grayed out.


115
00:06:43,871 --> 00:06:47,774 line:-2
This indicates that the extension
is not active on this current page.


116
00:06:48,408 --> 00:06:51,078 line:-1
Now let's find an article about fish.


117
00:06:52,513 --> 00:06:55,616 line:-2
When I click on the toolbar button
to use the popover,


118
00:06:55,682 --> 00:06:58,051 line:-1
the extension icon lights up.


119
00:06:58,118 --> 00:07:01,088 line:-2
The first thing you might notice here
is this broken image.


120
00:07:01,154 --> 00:07:02,623 line:-1
We will come back and fix that


121
00:07:02,689 --> 00:07:04,958 line:-2
during the debugging portion
of this session.


122
00:07:05,526 --> 00:07:09,029 line:-2
Now let's replace all the fish words
on this page with a cool emoji.


123
00:07:10,864 --> 00:07:15,569 line:-2
Great! We converted an existing extension
and used it in Safari.


124
00:07:15,636 --> 00:07:18,071 line:-2
For more information
on this converter tool,


125
00:07:18,138 --> 00:07:21,441 line:-2
consult the documentation
linked in the resources section.


126
00:07:21,909 --> 00:07:25,312 line:-2
Now what if you don't have an extension
made for another browser?


127
00:07:25,379 --> 00:07:26,713 line:-1
You can create one from scratch


128
00:07:26,780 --> 00:07:29,917 line:-2
using the Safari Extension App template
in Xcode


129
00:07:29,983 --> 00:07:32,419 line:-1
with "Safari web extension" as the type.


130
00:07:32,486 --> 00:07:34,288 line:-1
But it's possible that you have a Mac app


131
00:07:34,354 --> 00:07:36,623 line:-2
that you'd like to add
a Safari web extension to.


132
00:07:36,690 --> 00:07:38,625 line:-1
Let's cover how to do that now.


133
00:07:39,960 --> 00:07:41,728 line:-1
Here's my existing Mac app.


134
00:07:41,795 --> 00:07:44,865 line:-2
It's an app that lets me browse
and save recipes.


135
00:07:44,932 --> 00:07:49,136 line:-2
Maybe we want to create an extension
that lets me save recipes right in Safari.


136
00:07:49,203 --> 00:07:50,804 line:-1
Let's explore how to do that.


137
00:07:51,672 --> 00:07:57,511 line:-2
We're going to add a new target.
Select File, New, and Target.


138
00:08:00,113 --> 00:08:04,484 line:-2
Make sure you have the macOS tab selected
and filter by "Safari."


139
00:08:05,118 --> 00:08:07,354 line:-1
Select the "Safari Extension" option.


140
00:08:08,555 --> 00:08:11,225 line:-2
You'd use
the "Safari Extension App" option


141
00:08:11,291 --> 00:08:14,294 line:-2
if you wanted to create both the extension
and the containing app


142
00:08:14,361 --> 00:08:15,729 line:-1
completely from scratch.


143
00:08:18,432 --> 00:08:20,367 line:-1
Let's give this extension a name


144
00:08:20,434 --> 00:08:22,769 line:-2
and then make sure
you have "web extension"


145
00:08:22,836 --> 00:08:24,304 line:-1
as the selected type.


146
00:08:27,508 --> 00:08:30,377 line:-2
So the new target was created,
which we can see here.


147
00:08:30,777 --> 00:08:33,480 line:-2
And there's a new folder
here in the sidebar


148
00:08:33,547 --> 00:08:35,749 line:-1
with some default extension files.


149
00:08:36,183 --> 00:08:38,619 line:-2
For those who are unfamiliar
with this type of development,


150
00:08:38,684 --> 00:08:40,287 line:-1
let's go over what's here.


151
00:08:40,354 --> 00:08:41,922 line:-1
The information I'm about to cover


152
00:08:41,989 --> 00:08:45,225 line:-2
is applicable to all browsers
that support web extensions.


153
00:08:45,292 --> 00:08:47,361 line:-1
First, let's look at the manifest file.


154
00:08:49,229 --> 00:08:52,900 line:-2
The manifest file defines
the overall structure of your extension.


155
00:08:54,101 --> 00:08:59,573 line:-2
For example, you name your extension
by giving a value for the name key.


156
00:08:59,640 --> 00:09:01,942 line:-2
Here, the value of the name key
is a special string


157
00:09:02,009 --> 00:09:05,112 line:-2
that allows the extension's name
to be localized.


158
00:09:05,179 --> 00:09:09,583 line:-2
It's further defined in the Locales folder
in the messages.json file.


159
00:09:13,353 --> 00:09:17,591 line:-2
There are three main parts
of an extension:


160
00:09:17,658 --> 00:09:21,061 line:-2
the background scripts, content scripts,
and a popover.


161
00:09:21,128 --> 00:09:22,396 line:-1
There's a special API


162
00:09:22,462 --> 00:09:25,365 line:-2
that lets an extension communicate
between these three parts,


163
00:09:25,432 --> 00:09:28,836 line:-2
as well as create keyboard shortcuts,
access cookies, and more.


164
00:09:32,706 --> 00:09:36,076 line:-2
The background key defines which scripts
make up the background page.


165
00:09:36,610 --> 00:09:38,345 line:-1
These scripts have no visible UI


166
00:09:38,412 --> 00:09:41,148 line:-2
and can contain the logic
that drives your extension.


167
00:09:42,015 --> 00:09:44,318 line:-2
Let's take a look
at the background script.


168
00:09:44,384 --> 00:09:46,620 line:-2
Here we have a snippet of code
that receives a message


169
00:09:46,687 --> 00:09:49,623 line:-2
from another part of the extension
and sends out a response.


170
00:09:50,657 --> 00:09:52,526 line:-1
Next up, content scripts.


171
00:09:55,462 --> 00:09:57,731 line:-1
Content scripts are injected into webpages


172
00:09:57,798 --> 00:10:00,100 line:-2
and can modify their appearance
and function.


173
00:10:00,167 --> 00:10:02,569 line:-2
These scripts execute
in an isolated world,


174
00:10:02,636 --> 00:10:05,806 line:-2
meaning they won't conflict
with the webpage's JavaScript.


175
00:10:05,873 --> 00:10:07,341 line:-1
The "matches" keyword here


176
00:10:07,407 --> 00:10:11,078 line:-2
defines which domains you want
your content scripts to be injected into.


177
00:10:12,546 --> 00:10:15,482 line:-1
If we take a look at this content script,


178
00:10:15,549 --> 00:10:18,852 line:-2
we can see it using the sendMessage API
to send out a message


179
00:10:18,919 --> 00:10:21,588 line:-2
which we saw being processed
by the background page.


180
00:10:24,625 --> 00:10:26,293 line:-1
And finally, a popover.


181
00:10:27,728 --> 00:10:30,464 line:-2
Here, the browser_action key
defines a popover


182
00:10:30,531 --> 00:10:33,066 line:-2
that appears when the user
clicks the toolbar button.


183
00:10:33,133 --> 00:10:36,503 line:-2
This is an easy way for your users
to interact with your extension.


184
00:10:37,671 --> 00:10:41,141 line:-2
Another important part of the manifest
is the permissions key.


185
00:10:41,608 --> 00:10:45,012 line:-2
The permissions key defines privileges
your extension has in Safari.


186
00:10:46,146 --> 00:10:48,549 line:-2
You can put API names here,
like "cookies,"


187
00:10:50,751 --> 00:10:53,487 line:-2
which lets an extension read
and set browser cookies.


188
00:10:55,022 --> 00:10:58,091 line:-1
You can also have URL match strings


189
00:10:58,158 --> 00:11:01,762 line:-2
to define which websites
your extension has access to generally.


190
00:11:03,163 --> 00:11:04,798 line:-1
There are lots of online resources


191
00:11:04,865 --> 00:11:07,167 line:-2
to learn more
about developing web extensions


192
00:11:07,234 --> 00:11:10,537 line:-2
and you can look at the information
on developer.apple.com


193
00:11:10,604 --> 00:11:13,340 line:-2
for content specific
to Safari web extensions.


194
00:11:13,407 --> 00:11:15,742 line:-2
And that's how you create
Safari web extensions,


195
00:11:15,809 --> 00:11:18,879 line:-2
either from scratch
or by converting an existing one.


196
00:11:19,546 --> 00:11:22,583 line:-2
Now let's talk about extension permissions
in greater detail.


197
00:11:23,750 --> 00:11:26,386 line:-1
Apple takes user privacy very seriously.


198
00:11:26,453 --> 00:11:29,656 line:-2
Our browsing experience,
including which websites we visit


199
00:11:29,723 --> 00:11:32,559 line:-2
and what we do on those websites
can be highly personal.


200
00:11:32,626 --> 00:11:35,462 line:-2
So when we install an extension,
we want to make sure


201
00:11:35,529 --> 00:11:38,932 line:-2
only the data we are comfortable sharing
with that extension gets shared.


202
00:11:39,566 --> 00:11:42,069 line:-2
To show how users will control
their privacy in Safari


203
00:11:42,135 --> 00:11:43,604 line:-1
when it comes to extensions,


204
00:11:43,670 --> 00:11:47,274 line:-2
let's make some modifications
to the Sea Creator extension.


205
00:11:48,008 --> 00:11:51,078 line:-2
Let's say I've really enjoyed
using my extension on Wikipedia


206
00:11:51,144 --> 00:11:53,213 line:-2
and I just want it
to always work on that site


207
00:11:53,280 --> 00:11:54,882 line:-1
without any action on my end.


208
00:11:54,948 --> 00:11:58,418 line:0
Previously, my extension made use
of the activeTab permission


209
00:11:58,485 --> 00:12:01,288 line:0
which is what allowed it access
to the current tab I was on.


210
00:12:01,855 --> 00:12:05,492 line:-2
The "Replace words" button
injected the content script dynamically.


211
00:12:05,559 --> 00:12:08,929 line:-2
Instead, we want to declare
our content script in the manifest.


212
00:12:08,996 --> 00:12:10,664 line:0
First we'll go into the manifest


213
00:12:10,731 --> 00:12:13,934 line:0
and remove that activeTab keyword
from the permissions array.


214
00:12:15,936 --> 00:12:18,272 line:-1
Then we will add a content_scripts key


215
00:12:18,338 --> 00:12:21,675 line:-1
to inject content.js into wikipedia.org.


216
00:12:25,078 --> 00:12:28,315 line:-2
Let's build and see
what this experience looks like in Safari.


217
00:12:28,382 --> 00:12:30,851 line:-2
I'll use the product menu
and select "build."


218
00:12:38,225 --> 00:12:40,227 line:-1
Let's go to that article about fish.


219
00:12:42,629 --> 00:12:45,098 line:-2
The first thing that we notice
is that our toolbar button


220
00:12:45,165 --> 00:12:46,900 line:-1
is badged with a warning icon.


221
00:12:46,967 --> 00:12:49,570 line:-2
This lets the user know
that the extension wants access


222
00:12:49,636 --> 00:12:51,605 line:-1
to one or more sites.


223
00:12:51,672 --> 00:12:55,943 line:-2
If we click on the button,
we get this dialog in the popover


224
00:12:56,009 --> 00:12:59,580 line:-2
explaining what website
the extension wants access to.


225
00:12:59,646 --> 00:13:01,915 line:-1
We can go ahead and allow for one day.


226
00:13:03,817 --> 00:13:05,953 line:-1
And then our content script is injected.


227
00:13:07,087 --> 00:13:10,090 line:-2
Notice that if we visit
another Wikipedia page,


228
00:13:10,157 --> 00:13:11,792 line:-1
our choice is remembered


229
00:13:11,859 --> 00:13:13,994 line:-2
and the content script
is injected immediately


230
00:13:14,061 --> 00:13:16,997 line:-2
without me having to interact
with the toolbar button again.


231
00:13:17,064 --> 00:13:19,666 line:-2
The toolbar button
still remains highlighted,


232
00:13:19,733 --> 00:13:23,504 line:-2
letting me know that the extension
is able to run code on this page.


233
00:13:24,204 --> 00:13:26,139 line:-1
Now let's say I want to add a share button


234
00:13:26,206 --> 00:13:28,775 line:-2
for Shiny the social network
to my extension.


235
00:13:28,842 --> 00:13:31,678 line:-2
This is a good chance
to use optional permissions.


236
00:13:31,745 --> 00:13:33,914 line:-2
Optional permissions
are used for permissions


237
00:13:33,981 --> 00:13:36,984 line:-2
that aren't critical
to your extension's functionality.


238
00:13:37,050 --> 00:13:38,519 line:-1
To use optional permissions,


239
00:13:38,585 --> 00:13:42,155 line:-2
we first name the URL
or API name in the manifest,


240
00:13:42,222 --> 00:13:45,259 line:-2
and then request it
in our JavaScript code.


241
00:13:45,325 --> 00:13:49,696 line:-2
First, let's add a URL match pattern
for shiny.com in the manifest.


242
00:13:53,000 --> 00:13:54,501 line:-1
In our popover code,


243
00:13:56,503 --> 00:13:58,438 line:-1
I've already added a share button.


244
00:13:59,573 --> 00:14:02,743 line:-2
Let's add the code that requests
the optional permission I added


245
00:14:02,809 --> 00:14:04,478 line:-1
in the shareOnShiny function.


246
00:14:10,951 --> 00:14:13,720 line:-1
I'm calling browser.permissions.request


247
00:14:13,787 --> 00:14:16,390 line:-2
with the particular origin
I want access to.


248
00:14:16,857 --> 00:14:18,559 line:-1
Then I could add more code here


249
00:14:18,625 --> 00:14:21,195 line:-2
that would share information
about the extension.


250
00:14:21,261 --> 00:14:23,597 line:-1
Let's see what this looks like in Safari.


251
00:14:24,565 --> 00:14:26,800 line:-1
Use the product menu to build again.


252
00:14:26,867 --> 00:14:28,101 line:-1
Back in Safari...


253
00:14:30,571 --> 00:14:32,306 line:-1
when I click this share button,


254
00:14:35,509 --> 00:14:37,211 line:-1
I get this dialog that asks me


255
00:14:37,277 --> 00:14:40,314 line:-2
if I want to allow my extension access
to shiny.com.


256
00:14:41,381 --> 00:14:43,016 line:-1
I can allow for one day


257
00:14:44,651 --> 00:14:48,155 line:-2
and then I would be able to tell the world
about the Sea Creator extension.


258
00:14:49,489 --> 00:14:52,793 line:-2
All right, so maybe
I'm just loving my extension so much


259
00:14:52,860 --> 00:14:54,928 line:-1
that I just want it to work everywhere.


260
00:14:57,064 --> 00:14:59,299 line:-1
To do this, I'll modify the manifest again


261
00:14:59,366 --> 00:15:02,202 line:-2
and use the "all_urls" keyword
in the matches section


262
00:15:02,269 --> 00:15:06,807 line:-2
to indicate I want this content script
to be injected onto every webpage I visit.


263
00:15:13,647 --> 00:15:14,882 line:-1
Let's build again.


264
00:15:21,855 --> 00:15:23,824 line:-2
Now if I come back
into the Preferences pane,


265
00:15:23,891 --> 00:15:26,827 line:-2
I can see that my previous choices
were remembered.


266
00:15:27,461 --> 00:15:32,633 line:-2
If I go to another webpage about fish,
this time there's no warning badge.


267
00:15:32,699 --> 00:15:36,470 line:-2
The warning badge won't appear
every time a user visits a new site.


268
00:15:36,537 --> 00:15:38,005 line:-1
We put the warning badge there


269
00:15:38,071 --> 00:15:41,074 line:-2
the first time your extension
wants to inject into a webpage


270
00:15:41,141 --> 00:15:42,576 line:-1
as a way to educate users


271
00:15:42,643 --> 00:15:46,213 line:-2
about activating an extension
from the toolbar item.


272
00:15:46,280 --> 00:15:48,482 line:-1
When we click the popover,


273
00:15:48,549 --> 00:15:52,352 line:-2
we get a similar dialog
about giving access to a website.


274
00:15:52,419 --> 00:15:54,688 line:-1
This time I'll allow on all websites,


275
00:15:56,423 --> 00:15:58,292 line:-1
but this prompt appears to make sure


276
00:15:58,358 --> 00:16:01,295 line:-2
that the user is completely aware
of the access they are giving.


277
00:16:04,831 --> 00:16:06,433 line:-1
Back in the Preferences pane,


278
00:16:06,500 --> 00:16:09,169 line:-2
the list of websites
where your extension has access


279
00:16:09,236 --> 00:16:12,439 line:-2
has disappeared
and has been replaced by this message,


280
00:16:12,506 --> 00:16:15,809 line:-2
letting the user know
the capability that this extension has.


281
00:16:16,243 --> 00:16:19,146 line:-2
And that's how extension permissions
work in Safari.


282
00:16:19,213 --> 00:16:22,683 line:-2
Now let's talk about some best practices
when it comes to these permissions.


283
00:16:24,117 --> 00:16:26,920 line:-2
The best way for an extension
to respect user intention


284
00:16:26,987 --> 00:16:30,791 line:-2
when it comes to privacy
is by using the activeTab permission.


285
00:16:30,858 --> 00:16:33,694 line:-2
With this permission,
your extension is only granted access


286
00:16:33,760 --> 00:16:36,263 line:-1
to know things about a tab, like its URL,


287
00:16:36,330 --> 00:16:38,265 line:-1
and inject script into the webpage,


288
00:16:38,332 --> 00:16:40,701 line:-2
when your user expresses intent
to use your extension


289
00:16:40,767 --> 00:16:42,870 line:-1
with that tab very clearly,


290
00:16:42,936 --> 00:16:46,573 line:-2
by using the toolbar item,
keyboard shortcut, or context menu item.


291
00:16:47,808 --> 00:16:51,445 line:-2
Optional permissions are another great way
to respect user privacy.


292
00:16:51,512 --> 00:16:54,014 line:-2
These permissions are also declared
in the manifest


293
00:16:54,081 --> 00:16:56,984 line:-2
and represent permissions
that your extension would like to have,


294
00:16:57,050 --> 00:17:00,387 line:-2
but that aren't critical to
the core functionality of your extension.


295
00:17:01,255 --> 00:17:06,292 line:-2
For some extensions, you will want to
not require a user gesture to take action.


296
00:17:06,359 --> 00:17:08,228 line:-1
For example, you might have an extension


297
00:17:08,295 --> 00:17:10,864 line:-2
that inserts a useful toolbar
on certain domains.


298
00:17:11,964 --> 00:17:14,768 line:-2
You might have a manifest
that looks something like this,


299
00:17:14,835 --> 00:17:19,106 line:-2
where a script is injected onto
all domains that match to apple.com.


300
00:17:19,705 --> 00:17:23,143 line:-2
But this doesn't mean that your extension
will automatically be given access


301
00:17:23,210 --> 00:17:25,279 line:-1
to inject on those domains.


302
00:17:25,345 --> 00:17:29,082 line:-2
Instead, the user will see
your extension's toolbar icon badged


303
00:17:29,149 --> 00:17:30,817 line:-1
the first time they visit a website


304
00:17:30,884 --> 00:17:33,153 line:-2
that matches what's declared
in the manifest.


305
00:17:34,821 --> 00:17:37,224 line:-2
Some extensions ask
for access to everything


306
00:17:37,291 --> 00:17:40,894 line:-2
by using the "all_urls" permissions key
in the manifest.


307
00:17:40,961 --> 00:17:44,932 line:-2
If your extension doesn't actually
need access to all webpages,


308
00:17:44,998 --> 00:17:48,335 line:-2
scope your webpage access requests
more appropriately.


309
00:17:48,902 --> 00:17:53,173 line:-2
In summary, activeTab is a great way
to respect user privacy.


310
00:17:53,240 --> 00:17:56,076 line:-2
If activeTab isn't compatible
with your extension,


311
00:17:56,143 --> 00:17:59,613 line:-2
request the minimum access you need
for your extension to work.


312
00:17:59,680 --> 00:18:02,149 line:-2
And use optional permissions
to request more access


313
00:18:02,216 --> 00:18:04,985 line:-2
for noncritical features
of your extension.


314
00:18:05,452 --> 00:18:07,821 line:-2
And that was an overview
of privacy and permissions


315
00:18:07,888 --> 00:18:09,957 line:-1
for Safari web extensions.


316
00:18:10,791 --> 00:18:12,626 line:-1
Now let's talk about some tools we added


317
00:18:12,693 --> 00:18:16,063 line:-2
to make debugging your web extensions
easier in Safari.


318
00:18:16,897 --> 00:18:19,967 line:-2
I can right-click in the popover
to inspect.


319
00:18:22,536 --> 00:18:23,837 line:-1
Well, there's an error.


320
00:18:23,904 --> 00:18:27,174 line:-2
It looks like I've hard-coded
my extension resource URLs


321
00:18:27,241 --> 00:18:29,243 line:-1
to use the moz-extension scheme.


322
00:18:32,045 --> 00:18:34,348 line:-1
That's not going to work in Safari.


323
00:18:34,414 --> 00:18:36,817 line:-1
Let's go back to Xcode and fix this.


324
00:18:39,686 --> 00:18:42,723 line:-2
One approach might be
to change the scheme of this URL


325
00:18:42,789 --> 00:18:44,725 line:-1
to be safari-web-extension.


326
00:18:44,791 --> 00:18:46,126 line:-1
This isn't going to work, though,


327
00:18:46,193 --> 00:18:50,330 line:-2
because the host of your extension URL
changes across every launch of Safari


328
00:18:50,397 --> 00:18:53,700 line:-2
to prevent users of your extension
from being fingerprinted.


329
00:18:54,034 --> 00:18:57,938 line:-2
Instead, we need to use an extension API
that forms extension URLs.


330
00:18:58,005 --> 00:19:01,208 line:-1
It's called browser.runtime.getURL.


331
00:19:01,275 --> 00:19:03,777 line:-1
Let's see if that fixes our bug.


332
00:19:17,991 --> 00:19:20,827 line:-2
Great, now our beautiful
wave image appears.


333
00:19:22,663 --> 00:19:24,598 line:-1
Our issue was in the popover this time,


334
00:19:24,665 --> 00:19:27,467 line:-2
but you might also want to inspect
your background page.


335
00:19:28,168 --> 00:19:32,406 line:-2
I'll use the Develop menu,
web extension background pages,


336
00:19:32,472 --> 00:19:34,374 line:-1
and click on the name of my extension.


337
00:19:37,177 --> 00:19:39,780 line:-2
You might also run into bugs
in your content scripts.


338
00:19:39,847 --> 00:19:42,316 line:-1
Let's take a look at how to debug those.


339
00:19:42,382 --> 00:19:45,886 line:-2
First, let's go to a webpage
where my content script is injected.


340
00:19:45,953 --> 00:19:47,855 line:-1
Then let's right-click on the page.


341
00:19:50,224 --> 00:19:52,092 line:-1
Here in the Sources tab,


342
00:19:54,361 --> 00:19:57,898 line:-2
you can see all the extension scripts
that are injected into a page.


343
00:19:59,666 --> 00:20:02,336 line:-2
Any injected style sheets
would also appear here.


344
00:20:03,637 --> 00:20:08,876 line:-2
Maybe I want to print out the contents
of a variable in my content script.


345
00:20:08,942 --> 00:20:10,878 line:-1
If I do that now, it won't work.


346
00:20:13,013 --> 00:20:15,382 line:-2
That's because Web Inspector
is currently targeting


347
00:20:15,449 --> 00:20:17,417 line:-1
the page's JavaScript world.


348
00:20:17,484 --> 00:20:20,420 line:-2
Again, content scripts execute
in an isolated world


349
00:20:20,487 --> 00:20:22,890 line:-2
to avoid conflicts
with the webpage JavaScript.


350
00:20:22,956 --> 00:20:26,727 line:-2
We need to switch
to the extension's isolated world.


351
00:20:27,327 --> 00:20:30,063 line:-2
I can do that using this menu
in the bottom right.


352
00:20:35,169 --> 00:20:37,738 line:-2
Now if I print out the variable,
I can see its contents.


353
00:20:40,841 --> 00:20:44,778 line:-2
Those are some developer tools we added
to help you debug your web extensions.


354
00:20:44,845 --> 00:20:46,980 line:-2
If you want to learn more
about Web Inspector,


355
00:20:47,047 --> 00:20:49,483 line:-2
check out the session
dedicated this topic.


356
00:20:50,951 --> 00:20:53,453 line:-2
Let's quickly discuss
some common bugs you may encounter


357
00:20:53,520 --> 00:20:56,390 line:-2
while converting your web extension
to use in Safari.


358
00:20:56,924 --> 00:21:00,961 line:-2
First, if you perform user agent checking,
think again about this approach.


359
00:21:01,028 --> 00:21:03,463 line:-2
Using feature detection
is the more reliable way


360
00:21:03,530 --> 00:21:04,865 line:-1
to determine what's available


361
00:21:04,932 --> 00:21:07,634 line:-2
in the browser
your extension is running in.


362
00:21:07,701 --> 00:21:10,170 line:-2
Second, bugs can come
from making assumptions


363
00:21:10,237 --> 00:21:12,873 line:-1
about your extension's resource URLs.


364
00:21:12,940 --> 00:21:15,409 line:-2
For example,
if you check for a particular scheme,


365
00:21:15,475 --> 00:21:16,977 line:-1
like Chrome extension,


366
00:21:17,044 --> 00:21:20,814 line:-2
or assume the host of your URL
will be same across launches of Safari,


367
00:21:20,881 --> 00:21:22,950 line:-1
this might cause bugs.


368
00:21:23,016 --> 00:21:25,752 line:-2
Third, your extension
may have problems in Safari


369
00:21:25,819 --> 00:21:29,690 line:-2
if it has content scripts
that depend on being injected immediately.


370
00:21:29,756 --> 00:21:32,326 line:-1
Remember, the user may navigate to a page


371
00:21:32,392 --> 00:21:35,095 line:-2
and then allow your extensions
to inject scripts.


372
00:21:35,162 --> 00:21:37,397 line:-2
So in this case,
if you have a script that listens


373
00:21:37,464 --> 00:21:40,868 line:-2
for when the DOM content has loaded
and then performs an action,


374
00:21:40,934 --> 00:21:42,069 line:-1
that code won't be called


375
00:21:42,135 --> 00:21:44,905 line:-2
and your extension will appear broken
to the user.


376
00:21:45,706 --> 00:21:47,508 line:-1
Finally, it's possible that there are


377
00:21:47,574 --> 00:21:49,810 line:-2
slight implementation differences
between browsers


378
00:21:49,877 --> 00:21:51,879 line:-1
for an API your extension uses.


379
00:21:51,945 --> 00:21:56,517 line:0
Consult online documentation like on MDN,
the Mozilla Developer Network,


380
00:21:56,583 --> 00:21:58,552 line:0
for more detailed information.


381
00:21:58,886 --> 00:22:00,254 line:-1
And those were some tips and tricks


382
00:22:00,320 --> 00:22:02,623 line:-2
for debugging your web extension
in Safari.


383
00:22:03,891 --> 00:22:06,360 line:-2
Let's discuss how to communicate
with your native app


384
00:22:06,426 --> 00:22:08,662 line:-1
using the native messaging API.


385
00:22:09,296 --> 00:22:13,033 line:-2
Native messaging allows apps
and extensions to communicate.


386
00:22:13,100 --> 00:22:14,401 line:-1
Unlike in other browsers,


387
00:22:14,468 --> 00:22:18,172 line:-2
your extension is only allowed
to communicate with its container app.


388
00:22:18,238 --> 00:22:19,973 line:-1
Let's discuss how to send messages


389
00:22:20,040 --> 00:22:22,709 line:-2
between the different components
of your extension:


390
00:22:22,776 --> 00:22:27,548 line:-2
the app, the app extension,
and the background page running in Safari.


391
00:22:27,614 --> 00:22:31,351 line:-2
Communicating from the background page
to your app extension's native code


392
00:22:31,418 --> 00:22:34,821 line:-1
uses the same API found in other browsers.


393
00:22:34,888 --> 00:22:40,294 line:-2
Use browser.runtime.sendNativeMessage
or browser.runtime.connectNative


394
00:22:40,360 --> 00:22:42,896 line:-2
and make sure you request
the native messaging permission


395
00:22:42,963 --> 00:22:44,097 line:-1
in your manifest.


396
00:22:44,598 --> 00:22:48,368 line:-2
You don't need to provide
the application IDs to these APIs


397
00:22:48,435 --> 00:22:50,404 line:-1
as Safari securely guarantees


398
00:22:50,470 --> 00:22:52,973 line:-2
that the message will be relayed
to your app extension.


399
00:22:54,241 --> 00:22:56,476 line:-2
If we want to go the other way
and send a message


400
00:22:56,543 --> 00:22:59,346 line:-2
from the app extension's native code
to the background page,


401
00:22:59,413 --> 00:23:02,816 line:-2
use the completion handler
on the NSExtensionContext object


402
00:23:02,883 --> 00:23:06,186 line:-2
passed in to SafariWebExtensionHandler.
beginRequest.


403
00:23:07,988 --> 00:23:11,391 line:-2
To send a message from your app
to the extension's background page,


404
00:23:11,458 --> 00:23:15,462 line:-2
you can use SFSafariApplication.
dispatchMessage.


405
00:23:15,529 --> 00:23:18,198 line:-2
Before using this method,
it's a good idea to check


406
00:23:18,265 --> 00:23:21,401 line:-2
that your extension
is actually turned on in Safari.


407
00:23:21,802 --> 00:23:23,070 line:-1
You can do this by calling


408
00:23:23,136 --> 00:23:27,374 line:-2
SFSafariExtensionManager
getStateOfSafariExtension.


409
00:23:27,441 --> 00:23:29,943 line:-2
If you've written
a Safari app extension before,


410
00:23:30,010 --> 00:23:32,412 line:-1
these APIs are the same ones you've used.


411
00:23:34,014 --> 00:23:36,750 line:-2
To receive the message
in the background page,


412
00:23:36,817 --> 00:23:41,121 line:-2
you must have opened a port
using browser.runtime.connectNative.


413
00:23:41,922 --> 00:23:45,058 line:-2
And to communicate between the different
components of your App Group,


414
00:23:45,125 --> 00:23:48,128 line:-1
use NSUserDefaults or an XPC connection.


415
00:23:49,496 --> 00:23:51,865 line:-2
That's how you send messages
between the different components


416
00:23:51,932 --> 00:23:53,700 line:-1
of your app and extension.


417
00:23:54,668 --> 00:23:56,737 line:-2
Now that we've got an idea
of how to communicate


418
00:23:56,803 --> 00:24:00,207 line:-2
between our native app and extension,
let's see how it works in practice.


419
00:24:01,742 --> 00:24:04,178 line:-2
Let's add a feature
that reports how many times


420
00:24:04,244 --> 00:24:07,581 line:-2
our word replacement script
ran in the native app UI.


421
00:24:08,982 --> 00:24:12,920 line:-2
To achieve this, we will send a message
from our extension to our app extension,


422
00:24:12,986 --> 00:24:15,222 line:-1
write the value to NSUserDefaults


423
00:24:15,289 --> 00:24:18,759 line:-2
and then read that value
and display it in the app's UI.


424
00:24:18,825 --> 00:24:22,629 line:-2
First, we need to add the nativeMessaging
permission to our manifest.


425
00:24:25,532 --> 00:24:26,934 line:-1
Next, let's add a message


426
00:24:27,000 --> 00:24:29,203 line:-2
from the content script
to the background page


427
00:24:29,269 --> 00:24:31,872 line:-2
to indicate that
some replacement of text has happened.


428
00:24:36,877 --> 00:24:40,180 line:-2
Then, in our background page,
we can call sendNativeMessage


429
00:24:40,247 --> 00:24:43,050 line:-2
to send a message
from our app extension's native code.


430
00:24:52,092 --> 00:24:55,696 line:-2
Now let's handle that message
in SafariWebExtensionHandler.


431
00:24:59,499 --> 00:25:03,470 line:-2
The code that's here was provided by Xcode
when we converted our extension.


432
00:25:04,571 --> 00:25:08,876 line:-2
Using the NSExtensionContext object,
we can grab the contents of that message


433
00:25:08,942 --> 00:25:12,646 line:-1
and then write to NSUserDefaults.


434
00:25:14,581 --> 00:25:17,551 line:-1
Make sure you specify a particular suite.


435
00:25:17,618 --> 00:25:21,455 line:-2
The bundle identifier here
matches the ID I used


436
00:25:21,522 --> 00:25:23,457 line:-1
to group my app and app extension


437
00:25:23,524 --> 00:25:25,792 line:-2
in the Capabilities section
of the targets.


438
00:25:27,160 --> 00:25:29,563 line:-1
I added the App Group capability here...


439
00:25:34,201 --> 00:25:36,904 line:-2
for each target,
and gave them the same identifier.


440
00:25:42,442 --> 00:25:46,180 line:-2
Now that we've written to our defaults,
we can read that value in the parent app.


441
00:25:46,613 --> 00:25:48,482 line:-1
I've already created a button


442
00:25:50,584 --> 00:25:54,288 line:-1
that will update the text in our app's UI.


443
00:25:54,354 --> 00:25:56,757 line:-1
So we need to read and then set the text.


444
00:26:01,461 --> 00:26:03,564 line:-1
Let's build and see it in action.


445
00:26:18,245 --> 00:26:20,414 line:-2
I navigate to the page,
and the script works.


446
00:26:22,349 --> 00:26:24,184 line:-1
I click this button, and great,


447
00:26:24,251 --> 00:26:27,387 line:-2
this updated based on information
from the extension.


448
00:26:28,188 --> 00:26:30,257 line:-2
And that was an overview
of how to communicate


449
00:26:30,324 --> 00:26:32,793 line:-1
between your extension and app.


450
00:26:32,860 --> 00:26:34,628 line:-1
We've gone over a lot today.


451
00:26:34,695 --> 00:26:38,765 line:-2
First we showed how to convert
an existing extension for use in Safari


452
00:26:38,832 --> 00:26:41,168 line:-1
or how to create ones from scratch.


453
00:26:41,235 --> 00:26:45,239 line:-2
Then we covered Safari's permission model
developed with privacy in mind.


454
00:26:45,305 --> 00:26:47,207 line:-1
We explored tools added in Safari


455
00:26:47,274 --> 00:26:50,677 line:-2
to help you debug your extension
and common pitfalls.


456
00:26:51,178 --> 00:26:54,815 line:-2
And finally we learned how to communicate
with your extension's parent app.


457
00:26:55,549 --> 00:26:58,285 line:-2
Now that you've seen
Safari web extensions work in practice,


458
00:26:58,352 --> 00:26:59,653 line:-1
try it out yourself.


459
00:26:59,720 --> 00:27:01,822 line:-2
Start by downloading
the sample code project


460
00:27:01,889 --> 00:27:04,525 line:-2
that builds and runs
the Sea Creator extension


461
00:27:04,591 --> 00:27:06,994 line:-2
that you saw in this session
and play around with it.


462
00:27:07,861 --> 00:27:11,064 line:-2
We are very excited to see you
bring your web extensions to Safari,


463
00:27:11,131 --> 00:27:12,599 line:-1
so try using our converter tool


464
00:27:12,666 --> 00:27:15,702 line:-2
to bring over an extension
you've made for another browser.


465
00:27:15,769 --> 00:27:18,539 line:-2
We are just getting started
with web extensions in Safari


466
00:27:18,605 --> 00:27:21,408 line:-2
and you might find that some APIs
you need are missing.


467
00:27:21,942 --> 00:27:23,510 line:-1
We are depending on your feedback


468
00:27:23,577 --> 00:27:25,979 line:-2
to make web extensions in Safari
even better,


469
00:27:26,046 --> 00:27:28,315 line:-2
so tell us which APIs
are the most important


470
00:27:28,382 --> 00:27:31,285 line:-2
to help you provide the best experience
for your users.


471
00:27:32,019 --> 00:27:35,522 line:-2
Reach out through Feedback Assistant
or on the Safari developer forums


472
00:27:35,589 --> 00:27:39,026 line:-2
to let us know what you think
or of any bugs you find.

