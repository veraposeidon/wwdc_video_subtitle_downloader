1
00:00:03,937 --> 00:00:06,840 line:-1
Hello and welcome to WWDC.


2
00:00:08,775 --> 00:00:12,880 line:0
Hi. Welcome to
"Get the Most Out of Sign in with Apple."


3
00:00:13,413 --> 00:00:16,817 line:0
My name is Alfonso,
and together with my colleague, Jonathan,


4
00:00:16,884 --> 00:00:20,254 line:0
we're going to talk about best practices
and some of the new features


5
00:00:20,320 --> 00:00:23,023 line:0
we have worked this year
for Sign in with Apple.


6
00:00:23,624 --> 00:00:26,727 line:-2
As you know,
Sign in with Apple makes the experience


7
00:00:26,793 --> 00:00:29,897 line:-2
of signing into your application
fast and easy.


8
00:00:30,464 --> 00:00:33,166 line:-2
Users are really loving
how easy it is to use,


9
00:00:33,233 --> 00:00:37,037 line:-2
as well as the fact that there are
no more passwords for them to remember.


10
00:00:37,704 --> 00:00:40,574 line:-2
Its privacy features
have been embraced by our users,


11
00:00:40,641 --> 00:00:44,077 line:-2
with over half of them opting
to use private e-mail relay.


12
00:00:44,645 --> 00:00:46,480 line:-1
Because of Sign in with Apple,


13
00:00:46,547 --> 00:00:51,285 line:-2
users are now able to create an account
with your application with a simple tap.


14
00:00:51,752 --> 00:00:56,657 line:0
If you haven't already,
be sure to watch last year's WWDC session


15
00:00:56,723 --> 00:01:00,861 line:0
"Introducing Sign in with Apple,"
where you will be able to see a live demo


16
00:01:00,928 --> 00:01:03,664 line:0
on how you can add this feature
to your application.


17
00:01:04,230 --> 00:01:07,167 line:-1
Today, we will go over several topics.


18
00:01:07,234 --> 00:01:10,571 line:-2
We will start by digging deeper
into the authorization request


19
00:01:10,637 --> 00:01:13,006 line:-1
and how to make it more secure.


20
00:01:13,073 --> 00:01:15,809 line:-2
After that,
we will talk about best practices


21
00:01:15,876 --> 00:01:19,513 line:-2
when handling credentialState changes
for your applications.


22
00:01:19,580 --> 00:01:23,584 line:-2
We will also introduce new
server-to-server developer notifications,


23
00:01:23,650 --> 00:01:27,821 line:-2
as well as some new additions and changes
to the Sign in with Apple Button.


24
00:01:27,888 --> 00:01:32,025 line:-2
And finally, we will talk about
upgrading to Sign in with Apple.


25
00:01:32,759 --> 00:01:36,296 line:-2
As you know,
security is very important for our users,


26
00:01:36,363 --> 00:01:40,400 line:-2
and it was one of the things we focused on
when creating Sign in with Apple.


27
00:01:40,968 --> 00:01:42,870 line:-1
When using Sign in with Apple,


28
00:01:42,936 --> 00:01:45,839 line:-2
you already get great security features
for your accounts,


29
00:01:45,906 --> 00:01:48,742 line:-1
like automatic two-factor authentication,


30
00:01:48,809 --> 00:01:53,180 line:-2
but there are also a few things you can do
to make your requests even more secure.


31
00:01:53,780 --> 00:01:56,450 line:-2
Today, we will review
some of the best practices


32
00:01:56,517 --> 00:02:00,087 line:-2
for creating your authorization requests,
as well as how to get the most


33
00:02:00,153 --> 00:02:02,723 line:-2
out of the security features
integrated into them.


34
00:02:04,291 --> 00:02:08,729 line:-2
This is an example on how to create
an authorization request using Swift.


35
00:02:09,562 --> 00:02:13,634 line:-2
If you have seen our previous session
or implemented Sign in with Apple before,


36
00:02:13,700 --> 00:02:15,369 line:-1
this will look very familiar.


37
00:02:17,638 --> 00:02:21,542 line:-2
This is the method where we will handle
the SignInWithAppleButtonPress


38
00:02:21,608 --> 00:02:25,312 line:-2
and the right place to create
your authorization request and controller.


39
00:02:27,381 --> 00:02:30,484 line:-2
As you know, you can modify
the properties of the request


40
00:02:30,551 --> 00:02:32,486 line:-1
to add things like requestedScopes,


41
00:02:32,553 --> 00:02:36,323 line:-2
in case your application requires
user information like name or e-mail.


42
00:02:38,358 --> 00:02:41,528 line:-2
But as we mentioned before,
the request also has some properties


43
00:02:41,595 --> 00:02:44,531 line:-2
that can help make
the authorization process more secure.


44
00:02:44,598 --> 00:02:46,867 line:-1
These are nonce and state.


45
00:02:49,403 --> 00:02:53,240 line:-2
These properties will allow you to verify
that the authorization and credential


46
00:02:53,307 --> 00:02:57,578 line:-2
you get after executing a request
are the ones you were expecting.


47
00:02:57,644 --> 00:03:01,014 line:-2
Let's start by talking about
what these properties are.


48
00:03:01,782 --> 00:03:06,753 line:-2
The nonce is an opaque blob of data
sent as a string in the request.


49
00:03:06,820 --> 00:03:09,456 line:-2
It is important
to generate one unique nonce


50
00:03:09,523 --> 00:03:11,792 line:-1
every time you create a new request,


51
00:03:11,859 --> 00:03:15,162 line:-2
as later on,
you will be able to verify this value.


52
00:03:16,964 --> 00:03:20,100 line:-2
In order to do that,
the nonce value will be returned to you


53
00:03:20,167 --> 00:03:23,937 line:-2
embedded in the identityToken property
of the authorization credential.


54
00:03:25,539 --> 00:03:28,842 line:-2
This will allow you to verify this value
in your server,


55
00:03:28,909 --> 00:03:30,844 line:-1
helping prevent replay attacks.


56
00:03:32,379 --> 00:03:34,648 line:-1
Like the nonce, the state value


57
00:03:34,715 --> 00:03:38,185 line:-2
is also an opaque blob of data
sent with the request.


58
00:03:39,086 --> 00:03:41,955 line:-2
One key difference
it has with the nonce value


59
00:03:42,022 --> 00:03:44,825 line:-2
is that the state will be returned
in the credential,


60
00:03:44,892 --> 00:03:47,794 line:-2
allowing you to locally match
a credential to a request


61
00:03:47,861 --> 00:03:51,265 line:-2
and verify this was generated
from your application.


62
00:03:51,865 --> 00:03:55,202 line:-2
Now that we have added these properties,
we're ready to tell the controller


63
00:03:55,269 --> 00:03:57,838 line:-2
to perform and present our request
to the user.


64
00:03:59,306 --> 00:04:02,776 line:0
At this moment, the user will see
the authorization request,


65
00:04:02,843 --> 00:04:04,678 line:0
which will look like this.


66
00:04:04,745 --> 00:04:07,447 line:0
If you requested
the user's e-mail address,


67
00:04:07,514 --> 00:04:11,718 line:0
the user will be presented with the choice
to share or hide their e-mail address.


68
00:04:12,386 --> 00:04:15,222 line:0
If the user decides
to hide their e-mail address,


69
00:04:15,289 --> 00:04:18,591 line:0
what you will receive
will be a private e-mail relay.


70
00:04:19,159 --> 00:04:21,661 line:-2
You might have
several questions about this, like,


71
00:04:21,728 --> 00:04:25,933 line:-2
"What is a private e-mail relay?
How can I verify this e-mail address?


72
00:04:25,999 --> 00:04:28,268 line:-1
What if I need a reply from a user?"


73
00:04:28,335 --> 00:04:30,637 line:-2
So let's try to answer
some of these questions.


74
00:04:31,772 --> 00:04:36,643 line:-2
E-mail relays are just like
a real e-mail address and are team-scoped.


75
00:04:36,710 --> 00:04:39,513 line:-2
This means
that they will be unique for you


76
00:04:39,580 --> 00:04:42,449 line:-2
but will always be the same e-mail address
for a user


77
00:04:42,516 --> 00:04:44,618 line:-1
across all of your applications.


78
00:04:46,753 --> 00:04:49,523 line:-2
E-mail relays route e-mails
to an e-mail address


79
00:04:49,590 --> 00:04:53,126 line:-2
verified by Apple
to be real and owned by the user,


80
00:04:53,193 --> 00:04:56,330 line:-2
so you don't have to worry about
verifying the e-mail address.


81
00:04:58,232 --> 00:04:59,533 line:-1
You can also be sure


82
00:04:59,600 --> 00:05:04,505 line:-2
that users will have the ability to reply
to your e-mails if a reply is needed.


83
00:05:04,571 --> 00:05:06,640 line:-1
There are no downtimes for this service,


84
00:05:06,707 --> 00:05:10,611 line:-2
so users are able to receive and reply
to your e-mails anytime.


85
00:05:11,311 --> 00:05:15,415 line:-2
As you can see, this makes the e-mail
relay a great choice for your users


86
00:05:15,482 --> 00:05:19,720 line:-2
while remaining a convenient communication
method between you and them.


87
00:05:20,354 --> 00:05:23,357 line:-2
If a user has chosen to use
a private e-mail relay,


88
00:05:23,423 --> 00:05:25,158 line:-1
be sure to respect their choice.


89
00:05:25,859 --> 00:05:29,663 line:0
Once the user makes a selection,
the authorization will proceed.


90
00:05:29,730 --> 00:05:33,467 line:0
When an authorization is successful,
you will receive a credential


91
00:05:33,534 --> 00:05:36,570 line:0
in the delegate methods
for the authorization controller.


92
00:05:37,104 --> 00:05:40,941 line:-2
This is an example on how to get
a credential from an authorization.


93
00:05:41,942 --> 00:05:44,444 line:-2
Inside of this credential,
you will find properties


94
00:05:44,511 --> 00:05:48,815 line:-2
containing the user information
that you requested, like name and e-mail.


95
00:05:50,817 --> 00:05:54,788 line:-2
Along with this, you will also find
important properties that will allow you


96
00:05:54,855 --> 00:05:59,193 line:-2
to securely verify the request
and create a session with your servers.


97
00:05:59,259 --> 00:06:03,664 line:-2
These are the state,
identityToken and authorizationCode.


98
00:06:04,798 --> 00:06:08,335 line:-2
As you know, some of these parameters,
like name and e-mail,


99
00:06:08,402 --> 00:06:10,604 line:-1
will only be included on the credential


100
00:06:10,671 --> 00:06:13,473 line:-2
the first time a user
authorizes your application.


101
00:06:14,875 --> 00:06:18,078 line:-2
Because of this, it is important
to cache the objects you need


102
00:06:18,145 --> 00:06:22,449 line:-2
in case of a failure communicating
with your server due to poor connectivity.


103
00:06:22,516 --> 00:06:26,320 line:-2
That way, the important information
you need will not be lost.


104
00:06:28,188 --> 00:06:31,191 line:-2
Make sure you verify
the state value of the credential


105
00:06:31,258 --> 00:06:34,394 line:-2
to be the same state value
you previously generated.


106
00:06:35,929 --> 00:06:38,365 line:-2
As I mentioned before,
the response contains


107
00:06:38,432 --> 00:06:41,535 line:-1
an authorizationCode and an identityToken.


108
00:06:41,602 --> 00:06:44,738 line:-2
Send these values to your server,
where they can be decoded.


109
00:06:46,507 --> 00:06:49,476 line:-2
Once decoded,
verify the received information,


110
00:06:49,543 --> 00:06:51,879 line:-1
as well as the session with Apple servers.


111
00:06:51,945 --> 00:06:56,517 line:-2
Let's see how the identityToken will look
when decoded by your server.


112
00:06:57,284 --> 00:07:00,087 line:-2
As you can see, some of the values
you can get from it are:


113
00:07:00,153 --> 00:07:01,255 line:-1
the subject,


114
00:07:01,321 --> 00:07:04,858 line:-2
which is the userIdentifier that was
returned to you on the authorization


115
00:07:04,925 --> 00:07:07,694 line:-2
and will allow you
to create a session in your servers.


116
00:07:08,862 --> 00:07:13,033 line:-2
The nonce, as we mentioned before,
it's a very important value.


117
00:07:13,100 --> 00:07:17,137 line:-2
Verify this to be the same nonce
you generated previously in the request.


118
00:07:17,204 --> 00:07:20,207 line:-2
This will allow you to verify
the authenticity of the authorization


119
00:07:20,274 --> 00:07:22,342 line:-1
and help mitigate replay attacks.


120
00:07:24,011 --> 00:07:26,180 line:-2
If you requested
the user's e-mail address,


121
00:07:26,246 --> 00:07:29,249 line:-2
it will also be included
in the identityToken.


122
00:07:31,518 --> 00:07:34,588 line:-2
And finally,
the real_user_status will be returned


123
00:07:34,655 --> 00:07:37,558 line:-2
the first time that a user
authorizes your application.


124
00:07:38,192 --> 00:07:40,127 line:-1
Includes one of three states:


125
00:07:40,194 --> 00:07:44,765 line:-2
0 for unsupported, 1 for unknown,
and 2 for likely real.


126
00:07:45,632 --> 00:07:49,970 line:-2
As we just saw, the identityToken
is a JSON Web Token that contains


127
00:07:50,037 --> 00:07:53,340 line:-2
several pieces of information
related to the authorization.


128
00:07:55,275 --> 00:07:58,612 line:-2
Once you have this information,
it's time to verify the token


129
00:07:58,679 --> 00:08:01,448 line:-2
by using the public key
you can obtain from Apple,


130
00:08:01,515 --> 00:08:04,017 line:-1
and make sure the token has not expired.


131
00:08:05,886 --> 00:08:09,456 line:-2
You can exchange the authorizationCode
with the Apple ID servers,


132
00:08:09,523 --> 00:08:10,958 line:-1
and when this is successful,


133
00:08:11,024 --> 00:08:14,995 line:-2
you will receive a refresh token
and an access token for future calls,


134
00:08:15,062 --> 00:08:16,897 line:-1
as well as a new identityToken


135
00:08:16,964 --> 00:08:20,067 line:-2
that should be identical
to the one you already have.


136
00:08:22,135 --> 00:08:25,005 line:-1
You may verify a refresh token once a day


137
00:08:25,072 --> 00:08:29,576 line:-2
to confirm that the user's Apple ID
on that device is still in good standing.


138
00:08:30,177 --> 00:08:33,179 line:-2
By following these best practices,
you will not only make sure


139
00:08:33,246 --> 00:08:36,350 line:-2
your users have
a great and smooth sign-in experience,


140
00:08:36,416 --> 00:08:39,086 line:-2
but you can also be confident
that the authorization,


141
00:08:39,152 --> 00:08:42,923 line:-2
along with the information
contained in it, is valid and secure.


142
00:08:43,789 --> 00:08:46,393 line:-2
Now that we have covered
the authorization process,


143
00:08:46,460 --> 00:08:48,695 line:-2
let's cover
some of the best practices to have


144
00:08:48,762 --> 00:08:52,032 line:-2
when checking for the credentialState
of your application.


145
00:08:52,099 --> 00:08:55,936 line:-2
For this,
we use the getCredentialState API.


146
00:08:56,470 --> 00:08:59,239 line:-2
It allows you to verify
the current state of a credential


147
00:08:59,306 --> 00:09:02,276 line:-2
by sending
the currently stored userIdentifier.


148
00:09:03,677 --> 00:09:05,846 line:-1
This API will help you verify


149
00:09:05,913 --> 00:09:10,150 line:-2
that the user remains signed into
this device and to your application,


150
00:09:10,217 --> 00:09:14,421 line:-2
helping you make sure everything is okay
for you to continue with your session.


151
00:09:15,622 --> 00:09:19,760 line:-2
It is important that this method is called
every time your application is launched


152
00:09:19,826 --> 00:09:21,595 line:-1
or changes to the foreground.


153
00:09:21,662 --> 00:09:25,666 line:-2
That way, you will be able to react
on time to any changes in status


154
00:09:25,732 --> 00:09:29,069 line:-2
and present the appropriate screen
in your application to your user.


155
00:09:31,805 --> 00:09:36,243 line:-2
These are the already known states
you can receive when calling this API.


156
00:09:36,310 --> 00:09:40,480 line:-2
Let's quickly review those again
and what to do when encountering each one.


157
00:09:42,616 --> 00:09:45,219 line:-2
Authorized means
you can fast-track the user


158
00:09:45,285 --> 00:09:48,622 line:-2
directly to your application
and skip the log-in UI.


159
00:09:50,157 --> 00:09:54,194 line:-2
Revoked means that the user
decided to sign out of your application.


160
00:09:54,261 --> 00:09:57,865 line:-2
In this scenario, you should
sign the user out of your application,


161
00:09:57,931 --> 00:10:00,801 line:-2
close your session,
and present the log-in screen.


162
00:10:01,735 --> 00:10:03,337 line:-1
NotFound will be returned


163
00:10:03,403 --> 00:10:06,940 line:-2
when there was no credential
matching the userIdentifier.


164
00:10:07,007 --> 00:10:11,712 line:-2
Present the log-in screen so that the user
can authenticate to your application.


165
00:10:11,778 --> 00:10:15,716 line:-2
And finally, you will notice
there is a new credentialState...


166
00:10:16,884 --> 00:10:17,951 line:-1
Transferred.


167
00:10:18,018 --> 00:10:21,588 line:-2
Let's talk about this credentialState
and how we can handle it.


168
00:10:22,623 --> 00:10:26,293 line:-2
The Transferred credentialState
will only be received by applications


169
00:10:26,360 --> 00:10:30,264 line:-2
that recently were transferred
from one development team to another.


170
00:10:30,330 --> 00:10:32,900 line:-1
For example, after a company is acquired.


171
00:10:34,768 --> 00:10:39,506 line:-2
As we have mentioned before,
userIdentifiers are unique to a team,


172
00:10:39,573 --> 00:10:41,842 line:-2
so when transferring ownership
of an application,


173
00:10:41,909 --> 00:10:44,278 line:-2
the existing users
will need to be migrated


174
00:10:44,344 --> 00:10:47,447 line:-2
to a new userIdentifier
to match the new team.


175
00:10:50,117 --> 00:10:54,555 line:-2
This migration is handled silently,
that is, without any user interaction,


176
00:10:54,621 --> 00:10:57,424 line:-2
and can be triggered
by calling the same API


177
00:10:57,491 --> 00:11:00,894 line:-2
used to create a new account
or log in a user.


178
00:11:01,662 --> 00:11:03,730 line:-1
As you can see, this is the same code


179
00:11:03,797 --> 00:11:07,267 line:-2
for creating a new account
or signing into an existing account.


180
00:11:09,169 --> 00:11:12,906 line:-2
By adding the currently stored
userIdentifier to the request,


181
00:11:12,973 --> 00:11:15,609 line:-2
we can validate
the transferred state of the user


182
00:11:15,676 --> 00:11:19,479 line:-2
and generate the new userIdentifier
that will match the new team.


183
00:11:21,648 --> 00:11:23,083 line:-1
The response will be returned


184
00:11:23,150 --> 00:11:25,485 line:-2
in the AuthorizationController
delegate methods,


185
00:11:25,552 --> 00:11:27,888 line:-2
and the application can continue
to be used


186
00:11:27,955 --> 00:11:30,691 line:-1
without the user noticing a change.


187
00:11:31,325 --> 00:11:33,493 line:-1
Now, let's talk about a new feature


188
00:11:33,560 --> 00:11:36,396 line:-2
we're introducing this year
for Sign in with Apple:


189
00:11:36,463 --> 00:11:39,499 line:-1
server-to-server developer notifications.


190
00:11:40,300 --> 00:11:43,170 line:-2
Listening to these notifications
will allow you to monitor


191
00:11:43,237 --> 00:11:46,607 line:-2
things like credentialState changes
right from your server


192
00:11:46,673 --> 00:11:49,176 line:-1
as well as receive other types of events.


193
00:11:49,877 --> 00:11:53,247 line:-2
The process to start receiving
these notifications is simple.


194
00:11:54,047 --> 00:11:56,683 line:-2
First, you have to register
your server end point


195
00:11:56,750 --> 00:11:58,919 line:-1
on the Apple Developer's website.


196
00:11:59,753 --> 00:12:04,258 line:-2
Once you have completed this registration,
you are ready to start receiving events.


197
00:12:06,293 --> 00:12:10,864 line:-2
Events will be sent as JSON Web Tokens
signed by Apple.


198
00:12:10,931 --> 00:12:13,667 line:-2
Let's take a look
at how these tokens look like.


199
00:12:14,134 --> 00:12:18,272 line:-2
As you can see, the JSON Web Token
will contain important information,


200
00:12:18,338 --> 00:12:21,808 line:-2
like the issuer and the bundle identifier
of the application.


201
00:12:22,342 --> 00:12:25,646 line:-2
This is an example
of the e-mail-disabled event,


202
00:12:25,712 --> 00:12:27,948 line:-1
which you can get if a user has decided


203
00:12:28,015 --> 00:12:30,651 line:-2
to stop receiving e-mails
on their e-mail relay.


204
00:12:32,186 --> 00:12:33,954 line:-1
The e-mail-enabled event


205
00:12:34,021 --> 00:12:37,791 line:-2
means that the user opted back in
to receiving e-mail messages.


206
00:12:37,858 --> 00:12:41,895 line:-2
It is important to note that this event,
as well as e-mail-disabled,


207
00:12:41,962 --> 00:12:45,399 line:-2
will only be sent when the user
previously decided to use


208
00:12:45,465 --> 00:12:47,668 line:-1
a private e-mail relay for their account.


209
00:12:48,335 --> 00:12:51,371 line:-2
The consent-revoked event
will be sent to you


210
00:12:51,438 --> 00:12:55,509 line:-2
when a user decided to stop using
their Apple ID with your application,


211
00:12:55,576 --> 00:12:58,345 line:-2
and should be treated
as a sign out by the user.


212
00:12:59,213 --> 00:13:02,282 line:-2
One example on when you might receive
this notification


213
00:13:02,349 --> 00:13:06,119 line:-2
is when a user decides to disconnect
your application from Settings.


214
00:13:06,920 --> 00:13:09,156 line:-1
And finally, account-delete.


215
00:13:09,857 --> 00:13:14,661 line:-2
This event will be sent when a user
has asked Apple to delete their Apple ID.


216
00:13:15,229 --> 00:13:17,197 line:-1
When receiving this notification,


217
00:13:17,264 --> 00:13:21,969 line:-2
the userIdentifier associated
with the user will no longer be valid.


218
00:13:22,035 --> 00:13:25,038 line:-2
As you can see,
by listening to these notifications,


219
00:13:25,105 --> 00:13:28,742 line:-2
you will be able to react to these
four different scenarios in a better way


220
00:13:28,809 --> 00:13:30,511 line:-1
and directly from your servers.


221
00:13:31,345 --> 00:13:35,315 line:-2
Now, let's talk about another new feature
we're introducing this year:


222
00:13:35,382 --> 00:13:38,285 line:-1
a Sign in with Apple Button for SwiftUI.


223
00:13:38,852 --> 00:13:42,122 line:-2
With SwiftUI,
it is really simple to present


224
00:13:42,189 --> 00:13:44,958 line:-2
the Sign in with Apple Button
in your application,


225
00:13:45,025 --> 00:13:47,794 line:-1
but not only that, the SwiftUI API


226
00:13:47,861 --> 00:13:51,431 line:-2
will also help you create
the authorization request


227
00:13:51,498 --> 00:13:54,935 line:-2
as well as handle the response
within the same block of code.


228
00:13:56,003 --> 00:13:59,706 line:-2
As you can see,
the button is very simple to create.


229
00:13:59,773 --> 00:14:03,410 line:-2
On your view, you can just add
a SignInWithAppleButton object


230
00:14:03,477 --> 00:14:05,646 line:-1
and specify a label for it.


231
00:14:05,712 --> 00:14:08,048 line:-1
In this case, we have chosen "SignIn,"


232
00:14:08,115 --> 00:14:10,851 line:-2
but we can also choose "Continue"
or "SignUp."


233
00:14:11,418 --> 00:14:16,690 line:-2
After that, we have an onRequest closure
where we're able to create our request.


234
00:14:17,291 --> 00:14:19,126 line:-1
Just like we saw before in Swift,


235
00:14:19,193 --> 00:14:23,163 line:-2
this is the right place to add
the requested scopes like name and e-mail,


236
00:14:23,230 --> 00:14:26,033 line:-2
and the nonce and state values
we talked about before.


237
00:14:27,301 --> 00:14:31,104 line:-2
With the button,
we also have an onCompletion closure


238
00:14:31,171 --> 00:14:33,340 line:-2
where we will get
the result of the request


239
00:14:33,407 --> 00:14:35,776 line:-1
and handle the success or failure cases


240
00:14:35,843 --> 00:14:39,546 line:-2
just as you would on the delegate methods
for the authorization controller.


241
00:14:40,047 --> 00:14:43,016 line:0
And finally,
we can also select the button style.


242
00:14:43,984 --> 00:14:46,653 line:-2
The available styles
for the Sign in with Apple Button


243
00:14:46,720 --> 00:14:50,891 line:-1
are black, white, and white outline.


244
00:14:51,458 --> 00:14:54,228 line:-2
And since we're talking
about styles for the button,


245
00:14:54,294 --> 00:14:57,397 line:-2
if you need to personalize
the Sign in with Apple Button more


246
00:14:57,464 --> 00:15:01,635 line:-2
to match the specific design
of your website or application,


247
00:15:01,702 --> 00:15:04,771 line:-2
we're also happy to introduce
a new online portal


248
00:15:04,838 --> 00:15:07,374 line:-1
where you will be able to do just that.


249
00:15:07,441 --> 00:15:09,610 line:-1
You can access this website at


250
00:15:09,676 --> 00:15:15,048 line:-1
appleid.apple.com/signinwithapple/button.


251
00:15:15,983 --> 00:15:19,720 line:-2
Here, you will be able to customize
many features of the button


252
00:15:19,786 --> 00:15:23,624 line:-2
like the label, the size,
and the position of the elements.


253
00:15:24,191 --> 00:15:27,361 line:-2
You will also be able to download
and get the button assets


254
00:15:27,427 --> 00:15:30,797 line:-2
so that you can import them
to your project or website.


255
00:15:31,265 --> 00:15:33,634 line:-1
And now, I would like to invite Jonathan


256
00:15:33,700 --> 00:15:36,436 line:-2
to talk about upgrading
to Sign in with Apple.


257
00:15:37,171 --> 00:15:38,305 line:0
Thanks, Alfonso.


258
00:15:38,372 --> 00:15:42,843 line:0
Last year, we launched Sign in with Apple,
and customer feedback has been phenomenal.


259
00:15:43,343 --> 00:15:46,980 line:-2
Users love being able
to sign in to your apps with just one tap.


260
00:15:47,381 --> 00:15:49,850 line:-2
But what about users
that are already using


261
00:15:49,917 --> 00:15:52,753 line:-2
a traditional username-
and password-based account


262
00:15:52,819 --> 00:15:55,422 line:-2
and don't want to fork
their current account?


263
00:15:55,489 --> 00:15:57,758 line:-1
This year, we're introducing a new API


264
00:15:57,824 --> 00:16:01,128 line:-2
to help your users upgrade
to using Sign in with Apple.


265
00:16:01,195 --> 00:16:03,830 line:-2
So why would you want your users
to upgrade their account


266
00:16:03,897 --> 00:16:05,199 line:-1
to Sign in with Apple?


267
00:16:05,766 --> 00:16:08,669 line:-2
First, it is secure
for both you and your users.


268
00:16:08,735 --> 00:16:10,804 line:-2
Upgrading to Sign in with Apple
is the easiest way


269
00:16:10,871 --> 00:16:13,740 line:-2
to convert your accounts
to two-factor authentication.


270
00:16:13,807 --> 00:16:15,676 line:-1
Sign in with Apple requires two-factor


271
00:16:15,742 --> 00:16:18,745 line:-2
and utilizes device trust
for local credentialState.


272
00:16:19,613 --> 00:16:22,182 line:-2
Account recovery
is also a lot less complicated


273
00:16:22,249 --> 00:16:23,650 line:-1
with Sign in with Apple.


274
00:16:23,717 --> 00:16:27,321 line:-2
Users forget their passwords,
and they also need to be verified.


275
00:16:27,387 --> 00:16:29,523 line:-2
You don't need to manage
your users' secrets


276
00:16:29,590 --> 00:16:31,158 line:-1
when you use Sign in with Apple.


277
00:16:31,225 --> 00:16:32,626 line:-1
That's all done for you.


278
00:16:33,260 --> 00:16:37,297 line:-2
Utilizing this API, you will prevent
the duplication of accounts.


279
00:16:37,364 --> 00:16:40,801 line:-2
Users love the convenience and security
of Sign in with Apple.


280
00:16:40,868 --> 00:16:43,670 line:-2
Those users that already have
a traditional username-


281
00:16:43,737 --> 00:16:45,205 line:-1
and password-based account


282
00:16:45,272 --> 00:16:48,075 line:-2
won't abandon their current account
to use Sign in with Apple


283
00:16:48,141 --> 00:16:50,277 line:-1
because now they can just upgrade.


284
00:16:50,344 --> 00:16:52,980 line:-1
So what is Upgrade to Sign in with Apple?


285
00:16:53,046 --> 00:16:55,749 line:-1
Upgrade to Sign in with Apple is a new API


286
00:16:55,816 --> 00:16:59,520 line:-2
designed to be a fast,
easy security upgrade for your users,


287
00:16:59,586 --> 00:17:03,724 line:-2
and it is available in multiple places
throughout iOS and iPadOS,


288
00:17:03,790 --> 00:17:05,592 line:-1
including your app.


289
00:17:05,659 --> 00:17:08,295 line:-2
To help you upgrade your users
to Sign in with Apple,


290
00:17:08,362 --> 00:17:12,266 line:-2
Authentication Services is utilizing
an extension-based API.


291
00:17:12,332 --> 00:17:13,567 line:-1
We call this extension


292
00:17:13,634 --> 00:17:16,603 line:-2
the Account Authentication
Modification Extension.


293
00:17:17,771 --> 00:17:20,707 line:-2
Using it, you can provide
a seamless experience for your users


294
00:17:20,773 --> 00:17:23,544 line:-2
to upgrade the way they sign in
to Sign in with Apple.


295
00:17:24,778 --> 00:17:28,048 line:-2
When a user upgrades to Sign in with Apple
from a weak credential,


296
00:17:28,115 --> 00:17:30,450 line:-2
that weak credential
gets removed from the system


297
00:17:30,517 --> 00:17:32,819 line:-1
once the flow is completed successfully.


298
00:17:33,921 --> 00:17:36,757 line:-2
We've also included support
for adding your own UI


299
00:17:36,823 --> 00:17:39,960 line:-2
in cases in which
security verification should be completed


300
00:17:40,027 --> 00:17:42,629 line:-2
prior to asking
for a Sign in with Apple credential.


301
00:17:43,664 --> 00:17:46,900 line:-2
This same extension supports both upgrades
to Sign in with Apple


302
00:17:46,967 --> 00:17:48,635 line:-1
and strong password upgrades.


303
00:17:49,169 --> 00:17:51,638 line:-2
For our session,
I'll be providing an overview


304
00:17:51,705 --> 00:17:54,441 line:-2
of the new
Upgrade to Sign in with Apple flow.


305
00:17:54,508 --> 00:17:57,978 line:-2
For all the details
about implementing this new API,


306
00:17:58,045 --> 00:18:00,247 line:-1
including strong password upgrades,


307
00:18:00,314 --> 00:18:04,017 line:-2
I invite you to check out
the WWDC 2020 session,


308
00:18:04,084 --> 00:18:06,820 line:-1
"One-Tap Account Security Upgrades."


309
00:18:06,887 --> 00:18:10,757 line:-2
Once implemented, there are three ways
your Account Modification Extension


310
00:18:10,824 --> 00:18:12,426 line:-1
can be invoked by users.


311
00:18:13,427 --> 00:18:17,664 line:-2
The first is when security recommendations
identifies a weak credential


312
00:18:17,731 --> 00:18:19,800 line:-1
in the new password manager in Settings.


313
00:18:20,901 --> 00:18:23,904 line:-2
The second is when a user
is interacting with your app,


314
00:18:23,971 --> 00:18:25,672 line:-1
utilizes password autofill,


315
00:18:25,739 --> 00:18:28,141 line:-2
and the selected credential
is a weak credential.


316
00:18:29,443 --> 00:18:33,313 line:-2
The last is when you invoke
the new Authentication Services API


317
00:18:33,380 --> 00:18:36,917 line:-2
via a user interaction
that you specify within your app.


318
00:18:37,618 --> 00:18:40,120 line:-2
Now that we know
where the extension is invoked,


319
00:18:40,187 --> 00:18:41,889 line:-1
let's take a look at how it works.


320
00:18:42,489 --> 00:18:45,559 line:-2
There are a few concepts
to the Account Modification Extension.


321
00:18:46,426 --> 00:18:48,795 line:-2
If you couldn't tell by its name,
let me clarify


322
00:18:48,862 --> 00:18:52,499 line:-2
that the ASAccountAuthentication
ModificationViewController


323
00:18:52,566 --> 00:18:53,934 line:-1
is a view controller.


324
00:18:54,001 --> 00:18:57,871 line:-2
Your subclass of it
will be the NSExtensionPrincipalClass.


325
00:18:59,139 --> 00:19:03,677 line:-2
The first call to your extension will
invoke a non-user interactive function


326
00:19:03,744 --> 00:19:07,447 line:-2
that serves as the first attempt
to upgrade the user to Sign in with Apple


327
00:19:07,514 --> 00:19:09,349 line:-1
with the existing credential.


328
00:19:09,416 --> 00:19:11,952 line:-1
We hope to see most upgrades occur here,


329
00:19:12,019 --> 00:19:14,755 line:-2
as it would require
the least work for our users.


330
00:19:16,590 --> 00:19:20,794 line:-2
Understanding there are cases that will
require additional UI to verify a user,


331
00:19:20,861 --> 00:19:23,497 line:-1
a step-up security view can be displayed.


332
00:19:23,564 --> 00:19:26,133 line:-2
We'll then pass the same credential
to the extension


333
00:19:26,200 --> 00:19:28,001 line:-1
via a separately defined function.


334
00:19:29,736 --> 00:19:33,006 line:-2
The last element
is the extension context property.


335
00:19:33,073 --> 00:19:36,844 line:-2
The extension context is used
for communication between your extension


336
00:19:36,910 --> 00:19:38,645 line:-1
and the extension hosting process


337
00:19:38,712 --> 00:19:42,816 line:-2
while within the user interactive
and step-up security functions.


338
00:19:42,883 --> 00:19:44,551 line:-1
Using the extension context,


339
00:19:44,618 --> 00:19:47,020 line:-2
you'll be able to tell
the extension hosting process


340
00:19:47,087 --> 00:19:49,823 line:-2
what happened
and what needs to happen next.


341
00:19:51,325 --> 00:19:54,962 line:-2
Here, you can see a stubbed-out version
of the ExtensionViewController subclass


342
00:19:55,028 --> 00:19:58,098 line:-1
named AccountModificationViewController.


343
00:19:58,165 --> 00:20:01,268 line:-2
As you can see,
it is overriding three functions.


344
00:20:02,202 --> 00:20:06,373 line:-2
The first, convertAccountToSignIn
WithAppleWithoutUserInteraction,


345
00:20:06,440 --> 00:20:09,343 line:-2
is called initially
by the extension hosting process


346
00:20:09,409 --> 00:20:12,846 line:-2
in an attempt to upgrade the credential
without user interaction.


347
00:20:13,847 --> 00:20:15,749 line:-1
The second is viewDidLoad,


348
00:20:15,816 --> 00:20:18,852 line:-2
which can be used to set up
an intermediary user interface


349
00:20:18,919 --> 00:20:21,588 line:-2
for the security step-up flow
if necessary.


350
00:20:21,655 --> 00:20:24,525 line:-2
Providing intermediary UI
to indicate progress


351
00:20:24,591 --> 00:20:27,027 line:-2
might help provide
the best user experience


352
00:20:27,094 --> 00:20:30,130 line:-2
if you expect there to be
network calls or delays.


353
00:20:30,764 --> 00:20:34,434 line:-2
The last, prepareInterface
ToConvertAccountToSignInWithApple,


354
00:20:34,501 --> 00:20:37,337 line:-2
is called just prior
to your view appearing.


355
00:20:37,404 --> 00:20:39,573 line:-1
It gets past the same ASPasswordCredential


356
00:20:39,640 --> 00:20:42,442 line:-1
provided in the non-user interactive flow.


357
00:20:42,509 --> 00:20:47,114 line:-2
This credential is to be used for actions
such as prefilling a username in a form


358
00:20:47,181 --> 00:20:50,017 line:-2
or kicking off
a two-factor authentication flow.


359
00:20:50,083 --> 00:20:52,753 line:-2
Tasks that will take a while
should be done asynchronously,


360
00:20:52,819 --> 00:20:55,989 line:-2
utilizing intermediary UI
to indicate progress.


361
00:20:56,690 --> 00:21:00,093 line:-2
Your step-up view is not shown
until this call finishes.


362
00:21:01,395 --> 00:21:02,930 line:-1
Now that we've completed an overview


363
00:21:02,996 --> 00:21:06,033 line:-2
of the AccountAuthentication
ModificationViewController,


364
00:21:06,099 --> 00:21:09,203 line:-2
let's take a closer look
at how it all works together by looking at


365
00:21:09,269 --> 00:21:13,073 line:-2
the ASAccountAuthentication
ModificationExtensionContext.


366
00:21:13,140 --> 00:21:15,809 line:-2
The extension context
is the integral property


367
00:21:15,876 --> 00:21:18,312 line:-2
of the account modification
view controller.


368
00:21:18,378 --> 00:21:20,981 line:-2
As mentioned earlier,
the extension context is used


369
00:21:21,048 --> 00:21:23,183 line:-1
to control the flow of the upgrade.


370
00:21:23,250 --> 00:21:24,918 line:-1
So, how does it control the flow?


371
00:21:25,853 --> 00:21:29,690 line:-2
First, it has a function to request
Sign in with Apple authorization.


372
00:21:29,756 --> 00:21:31,625 line:-2
This is similar
to calling perform requests


373
00:21:31,692 --> 00:21:35,429 line:-2
with an Apple ID credential,
as mentioned earlier by Alfonso.


374
00:21:35,495 --> 00:21:38,699 line:-2
This will display Sign in with Apple UI
specific to your app.


375
00:21:40,067 --> 00:21:43,270 line:-2
Then if you're evaluating the credential
or currently signed-in account


376
00:21:43,337 --> 00:21:47,441 line:-2
and determine that additional UI
is needed to verify the account,


377
00:21:47,508 --> 00:21:52,279 line:-2
the extension context is used to request
that the Step-Up Security UI is displayed.


378
00:21:53,981 --> 00:21:55,849 line:-1
The extension context is also used


379
00:21:55,916 --> 00:21:58,485 line:-2
to tell the hosting process
to complete the flow.


380
00:21:58,552 --> 00:22:00,654 line:-1
This removes the existing credential.


381
00:22:01,955 --> 00:22:05,292 line:-2
Last, the extension context
is also used in cases


382
00:22:05,359 --> 00:22:08,161 line:-2
in which you need to cancel
the flow entirely.


383
00:22:09,229 --> 00:22:13,066 line:-2
Let's take a closer look at the
extension context property in more detail.


384
00:22:14,201 --> 00:22:16,436 line:-1
GetSignInWithAppleAuthorizationWithState


385
00:22:16,503 --> 00:22:20,407 line:-2
displays the Sign in with Apple UI
with your app's information,


386
00:22:20,474 --> 00:22:22,576 line:-1
asking the user to authorize the upgrade.


387
00:22:23,810 --> 00:22:26,413 line:-2
Earlier, Alfonso mentioned
setting a state and nonce


388
00:22:26,480 --> 00:22:29,616 line:-1
on the ASAuthorizationAppleID request.


389
00:22:29,683 --> 00:22:34,354 line:-2
In upgrade flows, nonce and state
is passed as a parameter to this call.


390
00:22:34,421 --> 00:22:38,192 line:-2
Once the user authorizes the upgrade,
the completion handler will be called


391
00:22:38,258 --> 00:22:41,161 line:-2
with the Apple ID credential
after the flow completes.


392
00:22:42,529 --> 00:22:45,832 line:-2
Next, we have completeUpgrade
ToSignInWithApple.


393
00:22:45,899 --> 00:22:47,868 line:-1
This lets the extension hosting process


394
00:22:47,935 --> 00:22:50,671 line:-2
know that the authorization
completed successfully,


395
00:22:50,737 --> 00:22:53,407 line:-2
resulting in the removal
of the password credential.


396
00:22:54,708 --> 00:22:56,777 line:-1
Last, we have cancelRequest.


397
00:22:58,245 --> 00:23:02,082 line:-2
The API expects this to be called
with an ASExtensionError.


398
00:23:02,716 --> 00:23:04,117 line:-1
If your extension determines


399
00:23:04,184 --> 00:23:06,787 line:-2
that additional UI
needs to be shown to the user,


400
00:23:06,854 --> 00:23:10,691 line:-2
it is critical to call this
with the userInteractionRequired error.


401
00:23:11,258 --> 00:23:14,194 line:0
If the user cancels
while within your UI flow,


402
00:23:14,261 --> 00:23:16,196 line:0
utilize the userCanceled error.


403
00:23:17,197 --> 00:23:19,566 line:0
All other failures can use
the failed error.


404
00:23:20,734 --> 00:23:22,870 line:-2
In our previous slides,
we did a brief overview


405
00:23:22,936 --> 00:23:25,639 line:-2
of the account modification
view controller.


406
00:23:26,273 --> 00:23:28,709 line:-2
Then we reviewed
the extension context property


407
00:23:28,775 --> 00:23:30,444 line:-1
and how it controls the flow.


408
00:23:31,011 --> 00:23:33,947 line:-2
Now, let's dive deeper
into implementation details


409
00:23:34,014 --> 00:23:36,617 line:-1
around converting the account without UI.


410
00:23:37,217 --> 00:23:38,819 line:-1
We begin the flow in the OS


411
00:23:38,886 --> 00:23:40,888 line:-2
when the user interacts
with a weak credential


412
00:23:40,954 --> 00:23:43,590 line:-2
and wants to upgrade that credential
to Sign in with Apple.


413
00:23:45,125 --> 00:23:47,661 line:-2
Your Account Modification Extension
is initialized


414
00:23:47,728 --> 00:23:49,630 line:-1
by the password managing process,


415
00:23:50,397 --> 00:23:52,966 line:-2
and the Convert without UI function
is called,


416
00:23:53,033 --> 00:23:55,569 line:-2
providing the password credential
intended to be upgraded


417
00:23:55,636 --> 00:23:57,104 line:-1
to Sign in with Apple.


418
00:23:57,171 --> 00:23:59,873 line:-2
The extension's job
is to evaluate the passed credential


419
00:23:59,940 --> 00:24:03,277 line:-2
to make sure it is valid
prior to upgrading to Sign in with Apple.


420
00:24:04,811 --> 00:24:07,281 line:-2
At this point,
checking to see if the username matches


421
00:24:07,347 --> 00:24:10,717 line:-2
the currently signed-in user
is a good first course of action.


422
00:24:12,586 --> 00:24:15,789 line:-2
Let's say the extension determined
that the state of the signed-in user


423
00:24:15,856 --> 00:24:16,957 line:-1
and the passed credential


424
00:24:17,024 --> 00:24:19,826 line:-2
requires a call to the server
to verify the account.


425
00:24:20,861 --> 00:24:24,998 line:-2
The server verifies the credential,
and the authentication is a success.


426
00:24:26,233 --> 00:24:28,569 line:-2
The server then replies back
to the extension


427
00:24:28,635 --> 00:24:32,306 line:-2
confirming that the account is ready
to be upgraded to Sign in with Apple.


428
00:24:33,907 --> 00:24:38,011 line:-2
Now that the account is confirmed
as authenticated and eligible for upgrade,


429
00:24:38,078 --> 00:24:41,548 line:-2
the extension context would be used
to request the Apple ID credential.


430
00:24:41,915 --> 00:24:44,351 line:-2
But before we jump into
that part of the flow,


431
00:24:44,418 --> 00:24:47,788 line:-2
let's take a look at what would happen
if there is an issue with the account


432
00:24:47,855 --> 00:24:49,890 line:-1
preventing an immediate upgrade.


433
00:24:51,291 --> 00:24:52,826 line:-1
As seen in our previous example,


434
00:24:52,893 --> 00:24:55,729 line:-2
the flow begins when the user interacts
with a weak credential


435
00:24:55,796 --> 00:24:58,799 line:-2
and wants to upgrade that credential
to Sign in with Apple.


436
00:24:58,866 --> 00:25:01,502 line:-2
Your Account Modification Extension
is then initialized


437
00:25:01,568 --> 00:25:03,437 line:-1
by the password managing process.


438
00:25:03,937 --> 00:25:06,406 line:-2
Then the Prepare to Convert
Without UI function is called


439
00:25:06,473 --> 00:25:07,941 line:-1
with the password credential.


440
00:25:09,176 --> 00:25:11,812 line:-2
The credentials are then verified
by the extension.


441
00:25:11,879 --> 00:25:15,682 line:-2
Let's take a moment to look at some
sample code for verifying the credentials.


442
00:25:16,416 --> 00:25:18,752 line:-2
As you can see,
the sample code defines an enum


443
00:25:18,819 --> 00:25:20,787 line:-1
representing a verification result.


444
00:25:22,222 --> 00:25:25,559 line:-2
There are three values
that represent the verification result:


445
00:25:25,626 --> 00:25:28,662 line:-2
success, failure,
and twoFactorAuthRequired.


446
00:25:30,163 --> 00:25:32,032 line:-1
When the existing credential is verified,


447
00:25:32,099 --> 00:25:34,535 line:-2
one of these three values
would get returned.


448
00:25:36,270 --> 00:25:37,671 line:-1
A failure result is for cases


449
00:25:37,738 --> 00:25:40,374 line:-2
such as when the server attempts
to validate the credential,


450
00:25:40,440 --> 00:25:42,910 line:-2
but the account or server state
is not appropriate


451
00:25:42,976 --> 00:25:45,279 line:-1
for converting the account at that time.


452
00:25:45,345 --> 00:25:47,581 line:-2
For this case,
the extensionContext would be used


453
00:25:47,648 --> 00:25:50,517 line:-2
to call cancelRequest
with the failed error.


454
00:25:50,584 --> 00:25:51,919 line:-1
This would end the flow.


455
00:25:53,487 --> 00:25:57,324 line:-2
Success indicates that the account
is ready to be converted right away,


456
00:25:57,391 --> 00:25:59,760 line:-1
as shown in our previous sequence diagram.


457
00:25:59,826 --> 00:26:03,096 line:-2
The extensionContext is then used
to get the Apple ID credential.


458
00:26:05,065 --> 00:26:08,836 line:0
TwoFactorAuthRequired means
that we need to show some UI to the user.


459
00:26:08,902 --> 00:26:12,973 line:0
The credential alone is not enough
to upgrade to Sign in with Apple.


460
00:26:13,040 --> 00:26:15,475 line:0
This case is handled
by using the extensionContext


461
00:26:15,542 --> 00:26:19,079 line:0
to call cancelWithError
with the userInteractionRequired error.


462
00:26:20,347 --> 00:26:21,782 line:-1
Back to our diagram.


463
00:26:21,849 --> 00:26:24,518 line:-2
The extension calls
the verifyCredential function,


464
00:26:24,585 --> 00:26:26,920 line:-2
which results in a call
to the extension's back end


465
00:26:26,987 --> 00:26:28,255 line:-1
to validate the credential.


466
00:26:29,690 --> 00:26:32,926 line:-2
The server will attempt
to verify the account with the request.


467
00:26:34,494 --> 00:26:37,764 line:-2
The server determines that this account
needs additional verification.


468
00:26:39,333 --> 00:26:41,602 line:-1
That reply comes back to the extension,


469
00:26:41,668 --> 00:26:44,137 line:-2
and the verifyCredential function
evaluates this


470
00:26:44,204 --> 00:26:47,040 line:-2
as a twoFactorAuthRequired
VerificationResult.


471
00:26:48,208 --> 00:26:51,311 line:-2
As shown in the sample code
for the verifyCredentials call,


472
00:26:51,378 --> 00:26:54,147 line:-2
this case is handled
by using the extension context


473
00:26:54,214 --> 00:26:58,018 line:-2
to call cancelWithError
with the userInteractionRequired error.


474
00:26:58,819 --> 00:27:01,889 line:-2
We have a recommendation
of requesting UI only if needed


475
00:27:01,955 --> 00:27:04,558 line:-1
to avoid users having to do extra work.


476
00:27:04,625 --> 00:27:08,362 line:-2
In most cases where a user
is already authenticated in your app,


477
00:27:08,428 --> 00:27:10,931 line:-2
we'd expect
that a non-user interactive flow


478
00:27:10,998 --> 00:27:13,166 line:-1
will be enough to complete the conversion.


479
00:27:13,233 --> 00:27:15,135 line:-1
However, as seen in this example,


480
00:27:15,202 --> 00:27:18,605 line:-2
there could be circumstances
where UI flows might be warranted.


481
00:27:19,039 --> 00:27:21,408 line:-1
Let's take a look at how this would work.


482
00:27:21,475 --> 00:27:25,078 line:-2
After the extension context canceled
with the userInteractionRequired error,


483
00:27:25,145 --> 00:27:28,015 line:-2
the password managing process
initializes a new instance


484
00:27:28,081 --> 00:27:30,350 line:-2
of the account modification
view controller...


485
00:27:31,618 --> 00:27:34,254 line:-2
and calls
the Prepare to Convert with UI function,


486
00:27:34,321 --> 00:27:36,123 line:-1
passing the ASPasswordCredential.


487
00:27:37,925 --> 00:27:40,627 line:-2
At this point, the extension's
view controller is presented


488
00:27:40,694 --> 00:27:43,597 line:-2
providing intermediary UI,
such as a spinning gear.


489
00:27:44,898 --> 00:27:48,769 line:-2
Utilizing the same credentials as earlier
with perhaps a slight change of context,


490
00:27:48,836 --> 00:27:50,704 line:-1
a request is made to the back end.


491
00:27:51,738 --> 00:27:56,410 line:-2
The server attempts to verify the account,
requires 2FA,


492
00:27:56,476 --> 00:27:58,745 line:-1
and sends a reply back to the extension.


493
00:28:00,047 --> 00:28:01,648 line:-1
The extension updates the view,


494
00:28:01,715 --> 00:28:04,284 line:-2
asking the user
for two-factor authentication.


495
00:28:05,552 --> 00:28:09,690 line:-2
The user provides the verification code,
which the extension would then verify.


496
00:28:09,756 --> 00:28:12,092 line:-2
If the user could not be verified
at this point,


497
00:28:12,159 --> 00:28:16,563 line:-2
the extension context would be used
to cancel the flow with the failed error.


498
00:28:16,630 --> 00:28:18,966 line:-2
Let's assume
the user provided a valid code


499
00:28:19,032 --> 00:28:21,101 line:-1
and verification is a success.


500
00:28:21,168 --> 00:28:24,838 line:-2
The extension is now ready
to request the Apple ID credential.


501
00:28:24,905 --> 00:28:26,840 line:-1
So now, we're back on the happy path


502
00:28:26,907 --> 00:28:30,711 line:-2
with an account that is authenticated
and eligible for upgrade.


503
00:28:30,777 --> 00:28:32,145 line:-1
Now that the account is ready,


504
00:28:32,212 --> 00:28:34,982 line:-2
let's request the Apple ID credential
and finish the flow.


505
00:28:36,550 --> 00:28:40,254 line:-2
As mentioned earlier by Alfonso,
it is important to secure your request.


506
00:28:40,320 --> 00:28:43,257 line:-2
To do so, your extension would generate
a state and nonce


507
00:28:43,323 --> 00:28:47,461 line:-2
and pass them as parameters
for the getAppleIDCredential call.


508
00:28:47,528 --> 00:28:50,097 line:-2
This results in
Upgrade to Sign in with Apple UI


509
00:28:50,163 --> 00:28:51,832 line:-1
being displayed to the user.


510
00:28:52,399 --> 00:28:55,135 line:-1
The user then authorizes using Face ID.


511
00:28:56,303 --> 00:28:58,672 line:-2
The Apple ID credential
is provided to the extension


512
00:28:58,739 --> 00:29:02,075 line:-2
in the completion block
of the getAppleIDCredential call.


513
00:29:02,142 --> 00:29:05,078 line:-2
The extension would then verify
the credential's state property


514
00:29:05,145 --> 00:29:07,080 line:-1
as being the same generated earlier.


515
00:29:08,482 --> 00:29:10,884 line:-2
The extension would then request
an upgrade of the account,


516
00:29:10,951 --> 00:29:13,153 line:-2
providing the necessary
account information


517
00:29:13,220 --> 00:29:15,923 line:-2
and the Apple ID credential
to the server back end


518
00:29:15,989 --> 00:29:17,624 line:-1
so the account can be converted.


519
00:29:18,759 --> 00:29:22,229 line:-2
The back end would then exchange
the authorization code with Apple servers,


520
00:29:22,296 --> 00:29:25,265 line:-2
verifying the value of the nonce
in the identityToken,


521
00:29:25,332 --> 00:29:28,068 line:-2
and if successful,
perform a conversion of the account.


522
00:29:29,736 --> 00:29:33,207 line:-2
After converting, it sends a reply back
with a success value.


523
00:29:33,273 --> 00:29:36,677 line:-2
It is important to note again
that if the server's operation failed,


524
00:29:36,743 --> 00:29:39,580 line:-2
the extension context should be used
to call cancelWithError


525
00:29:39,646 --> 00:29:41,014 line:-1
with the failed error.


526
00:29:42,149 --> 00:29:44,518 line:-2
This time,
the server is indicating success,


527
00:29:44,585 --> 00:29:47,221 line:-2
so the extension would perform
any required bookkeeping


528
00:29:47,287 --> 00:29:51,725 line:-2
and then call completeUpgradeToSignIn
WithApple on the extension context.


529
00:29:51,792 --> 00:29:55,329 line:-2
This results in the password manager
removing the existing credential,


530
00:29:55,395 --> 00:29:57,130 line:-1
and with that, the flow is completed.


531
00:29:57,865 --> 00:30:01,134 line:-2
The new Authentication Services
Account Modification Extension


532
00:30:01,201 --> 00:30:04,171 line:-2
is built specifically
to help improve users' security


533
00:30:04,238 --> 00:30:07,941 line:-2
by offering Sign in with Apple
in place of their weak credentials.


534
00:30:08,509 --> 00:30:10,444 line:-1
Because we remove the old credential,


535
00:30:10,511 --> 00:30:13,814 line:-2
users will not be confused
when they sign in to your app next.


536
00:30:13,881 --> 00:30:17,251 line:-2
Utilizing this API,
you can help your users implement


537
00:30:17,317 --> 00:30:20,020 line:-2
the best security practices
for their credentials


538
00:30:20,087 --> 00:30:21,989 line:-1
while avoiding duplicate accounts.


539
00:30:23,123 --> 00:30:25,859 line:-2
Upgrade to Sign in with Apple
offers a convenient API


540
00:30:25,926 --> 00:30:29,263 line:-2
for you to upgrade
your users' existing accounts.


541
00:30:29,329 --> 00:30:33,166 line:-2
We're incredibly excited to see how you
implement Upgrade to Sign in with Apple


542
00:30:33,233 --> 00:30:35,169 line:-1
and look forward to your feedback.


543
00:30:35,235 --> 00:30:37,471 line:-1
I hope you all enjoyed our talk today.


544
00:30:37,538 --> 00:30:40,274 line:-2
Thank you for joining us
and have a great WWDC.

