1
00:00:03,904 --> 00:00:06,507 line:-1
Hello and welcome to WWDC.


2
00:00:08,842 --> 00:00:10,377 line:0
Hello and welcome to the session


3
00:00:10,444 --> 00:00:12,579 line:0
on handling
the new Limited Photos Library.


4
00:00:13,180 --> 00:00:14,281 line:0
My name's Matt Dickoff,


5
00:00:14,348 --> 00:00:16,250 line:0
and together with my colleague,
Adam Swift,


6
00:00:16,315 --> 00:00:18,585 line:0
we'll be walking you through
this new PhotoKit feature


7
00:00:18,652 --> 00:00:20,087 line:0
that allows users to better control


8
00:00:20,153 --> 00:00:22,556 line:0
the access that apps have
to their Photos Library.


9
00:00:23,590 --> 00:00:25,158 line:-1
We'll start with a feature overview


10
00:00:25,225 --> 00:00:28,562 line:-2
so you can familiarize yourself
with what this looks like in iOS 14.


11
00:00:29,563 --> 00:00:31,932 line:-2
Then, we'll cover
what new APIs are available


12
00:00:31,999 --> 00:00:34,501 line:-2
to determine if your app
has been put into this mode.


13
00:00:35,302 --> 00:00:39,306 line:-2
And finally, we'll discuss some UI changes
that you might need to make in your app.


14
00:00:40,607 --> 00:00:43,443 line:-2
So, first, let's go over
what Limited Photo Library means.


15
00:00:45,412 --> 00:00:46,413 line:-1
As a reference,


16
00:00:46,480 --> 00:00:49,082 line:-2
here's what full Photos Library access
looks like to your app.


17
00:00:49,750 --> 00:00:52,986 line:-2
In this scenario, your app has access
to nearly all of the assets


18
00:00:53,053 --> 00:00:55,889 line:-2
in the user's Photo Library
through PhotoKit APIs.


19
00:00:56,423 --> 00:01:00,527 line:-2
You app can make PhotoKit requests
to either write or read from the database.


20
00:01:02,863 --> 00:01:07,167 line:-2
In limited mode, we introduce this concept
of the user's limited library selection.


21
00:01:07,768 --> 00:01:11,338 line:-2
You can think of this as a filter
for the PhotoKit APIs that you call.


22
00:01:12,105 --> 00:01:14,274 line:-2
You will only be able
to fetch assets and resources


23
00:01:14,341 --> 00:01:17,678 line:-2
related to what the user has chosen
for you to have access to.


24
00:01:19,580 --> 00:01:23,884 line:-2
When a user modifies their selection,
your app will automatically be notified


25
00:01:23,951 --> 00:01:27,154 line:-2
so that it can update its UI
to reflect the user's actions.


26
00:01:30,023 --> 00:01:32,826 line:-2
It's important to note that
Limited Photo Library access


27
00:01:32,893 --> 00:01:35,329 line:-1
will affect all apps that use PhotoKit.


28
00:01:35,395 --> 00:01:37,297 line:-1
Even the apps that you've already shipped


29
00:01:37,364 --> 00:01:40,267 line:-2
will be able to be put into
this mode in iOS 14.


30
00:01:41,869 --> 00:01:44,404 line:-2
To demonstrate this,
let's look at an example app.


31
00:01:49,243 --> 00:01:51,345 line:-1
This demo will show what a user will see


32
00:01:51,411 --> 00:01:55,749 line:-2
when using a third-party app that hasn't
adopted any new APIs or functionality.


33
00:01:56,583 --> 00:01:58,519 line:-1
Upon first launch of a photos application,


34
00:01:58,585 --> 00:02:01,088 line:-1
the user will often be faced with a prompt


35
00:02:01,154 --> 00:02:03,724 line:-2
asking them to grant the app
access to their Photo Library.


36
00:02:04,758 --> 00:02:07,895 line:-2
The user now has an additional option
which says Select Photos.


37
00:02:11,131 --> 00:02:12,132 line:-1
After selecting this,


38
00:02:12,199 --> 00:02:15,269 line:-2
the user is presented
with the limited library management UI.


39
00:02:15,335 --> 00:02:17,437 line:-2
This is allowing the user
to individually select


40
00:02:17,504 --> 00:02:21,108 line:-2
what photos or videos the app
will have access to via PhotoKit.


41
00:02:21,175 --> 00:02:22,609 line:-1
Now, let's select some photos.


42
00:02:31,552 --> 00:02:34,321 line:-2
After tapping "Done,"
the app is back in the foreground.


43
00:02:34,388 --> 00:02:38,358 line:-2
As you can see, the app is only able
to fetch the assets selected by the user.


44
00:02:39,026 --> 00:02:40,961 line:-2
The app is still able
to see photo metadata,


45
00:02:41,028 --> 00:02:42,496 line:-1
such as whether it was favorited.


46
00:02:42,563 --> 00:02:44,798 line:-2
However,
this is limited to the user's selection.


47
00:02:45,966 --> 00:02:50,003 line:-2
So, if we turn the Favorites on for this,
we can see it's only the selected assets.


48
00:02:51,705 --> 00:02:52,806 line:-1
Now, you may be wondering


49
00:02:52,873 --> 00:02:56,076 line:-2
how a user would be able to modify
the selection of photos for this app.


50
00:02:56,810 --> 00:02:58,712 line:-1
The first way is by going to Settings,


51
00:02:58,779 --> 00:03:02,282 line:-2
where alongside the option to change
the overall access level this app has,


52
00:03:02,349 --> 00:03:04,384 line:-1
the user can manage their selection.


53
00:03:16,363 --> 00:03:17,931 line:-1
So if I add a new photo...


54
00:03:20,434 --> 00:03:21,902 line:-1
and go back to our app...


55
00:03:23,136 --> 00:03:25,439 line:-2
you'll see that it refreshed
its view of the library.


56
00:03:27,474 --> 00:03:30,344 line:-2
The second way is specific to apps
that haven't made any changes


57
00:03:30,410 --> 00:03:32,045 line:-1
to accommodate this new mode.


58
00:03:32,579 --> 00:03:34,815 line:-1
For these apps, like this one here,


59
00:03:34,882 --> 00:03:38,952 line:-2
once per app life cycle,
when they first fetch assets via PhotoKit,


60
00:03:39,019 --> 00:03:42,956 line:-2
the user will be prompted to either
keep their current selection or modify it.


61
00:03:43,457 --> 00:03:45,158 line:-1
Let me show you what that looks like.


62
00:03:56,203 --> 00:03:59,373 line:-2
This allows the user to modify
the selection within all apps


63
00:03:59,439 --> 00:04:00,841 line:-1
without app adoption.


64
00:04:03,677 --> 00:04:06,914 line:-2
Later on in the presentation,
I'll show you new APIs that you can adopt,


65
00:04:06,980 --> 00:04:09,149 line:-2
which will allow you
to take control over when and where


66
00:04:09,216 --> 00:04:11,084 line:-1
this management UI is presented from,


67
00:04:11,585 --> 00:04:13,687 line:-2
as well as suppressing
that prompt that comes up


68
00:04:13,754 --> 00:04:17,324 line:-2
the first time your app
calls PhotoKit APIs after launch.


69
00:04:20,726 --> 00:04:22,462 line:-1
Before we dive into the technical details,


70
00:04:22,529 --> 00:04:24,798 line:-2
I wanna first talk about
why we built this feature.


71
00:04:25,632 --> 00:04:29,369 line:-2
The primary motivation was to give users
more control over their data.


72
00:04:30,103 --> 00:04:32,439 line:-2
Over the years,
we've seen personal Photo Libraries


73
00:04:32,506 --> 00:04:35,709 line:-2
grow from tens to hundreds of thousands
of photos and videos.


74
00:04:36,310 --> 00:04:37,644 line:-1
In nearly all cases,


75
00:04:37,711 --> 00:04:41,481 line:-2
users do not want to give third parties
access to their entire library.


76
00:04:42,316 --> 00:04:44,318 line:-1
Given this big push for user control,


77
00:04:44,384 --> 00:04:46,186 line:-1
this is a great year to take a step back


78
00:04:46,253 --> 00:04:48,722 line:-2
and ask yourself if your app
even needs to ask the user


79
00:04:48,789 --> 00:04:50,691 line:-1
for access to their Photo Library at all.


80
00:04:51,258 --> 00:04:53,427 line:-1
For most apps, the answer is no.


81
00:04:54,061 --> 00:04:57,497 line:-2
Today, users see this prompt
way more often than they really need to.


82
00:04:57,965 --> 00:05:00,501 line:-2
Many of you don't need to request
this level of access


83
00:05:00,567 --> 00:05:04,404 line:-2
and could provide a simpler and better
experience for your users without it.


84
00:05:04,905 --> 00:05:06,073 line:-1
To accentuate this point,


85
00:05:06,139 --> 00:05:08,575 line:-2
let's look at some features
that can easily be built


86
00:05:08,642 --> 00:05:10,978 line:-2
without needing to request
access from the user.


87
00:05:13,013 --> 00:05:15,649 line:-2
Uploading a profile picture
is a prime example.


88
00:05:15,716 --> 00:05:18,519 line:-2
Often, this is the only
photo-related feature in an app.


89
00:05:20,354 --> 00:05:24,191 line:-2
Or maybe you support sending photos
in a message or social media post.


90
00:05:25,526 --> 00:05:27,961 line:-2
Or maybe your app supports
embedding photos


91
00:05:28,028 --> 00:05:29,630 line:-1
into a document that it creates.


92
00:05:30,464 --> 00:05:34,067 line:-2
All of these features can be built
very easily with the new PHPicker


93
00:05:34,134 --> 00:05:36,637 line:-2
without requiring
any Photo Library access.


94
00:05:38,972 --> 00:05:40,974 line:-1
PHPicker is a great replacement


95
00:05:41,041 --> 00:05:43,844 line:-2
for the UIImagePickerController
you may be familiar with.


96
00:05:44,411 --> 00:05:46,947 line:-1
It has multi-select and built-in search


97
00:05:47,014 --> 00:05:50,984 line:-2
and users will expect that your app will
be able to use features like I just showed


98
00:05:51,051 --> 00:05:53,720 line:-2
without ever granting your app
Photo Library access.


99
00:05:54,555 --> 00:05:58,425 line:-2
For more information on implementing
these workflows with the new PHPicker,


100
00:05:58,492 --> 00:06:00,761 line:-2
please see this session
that my colleagues put together.


101
00:06:02,796 --> 00:06:06,433 line:-2
I haven't talked about all the features
you possibly could build with PhotoKit,


102
00:06:06,500 --> 00:06:07,501 line:-1
so what is left?


103
00:06:09,069 --> 00:06:11,371 line:-2
The simple addition
of being able to save an image


104
00:06:11,438 --> 00:06:13,540 line:-2
then accounts
for a large percentage of apps.


105
00:06:14,474 --> 00:06:16,310 line:-1
If your app falls into this category,


106
00:06:16,376 --> 00:06:18,612 line:-1
you are now to explicitly ask the user


107
00:06:18,679 --> 00:06:21,548 line:-2
for add-only access
to their Photos Library.


108
00:06:21,615 --> 00:06:25,185 line:-2
In the API slides coming up,
we will show exactly how you can do that.


109
00:06:26,353 --> 00:06:29,590 line:-2
Of course, there are apps that provide
a very photocentric experience


110
00:06:29,656 --> 00:06:31,091 line:-1
that require full access.


111
00:06:31,525 --> 00:06:37,297 line:-2
For example, browsing apps, editing apps,
camera apps or data backup apps.


112
00:06:38,131 --> 00:06:40,133 line:-2
These types of apps
will need to do the most work


113
00:06:40,200 --> 00:06:42,002 line:-1
to handle limited library access.


114
00:06:43,504 --> 00:06:45,739 line:-2
Now I'm gonna hand
the presentation over to Adam,


115
00:06:45,806 --> 00:06:48,809 line:-2
who will walk you through
the new APIs we've introduced this year.


116
00:06:48,876 --> 00:06:49,910 line:-1
Adam?


117
00:06:50,944 --> 00:06:51,945 line:-1
Thanks, Matt.


118
00:06:52,613 --> 00:06:55,449 line:-2
As you just heard,
Limited Photos Library access


119
00:06:55,516 --> 00:07:00,120 line:-2
can be enabled by the user in every app
that requests access to the Photo Library.


120
00:07:01,021 --> 00:07:03,223 line:-2
So, as a developer,
we wanna help you provide


121
00:07:03,290 --> 00:07:07,160 line:-2
the best app experience for users
that choose to enable limited access.


122
00:07:08,662 --> 00:07:11,164 line:-2
First, I'm going to walk you through
the APIs you can use


123
00:07:11,231 --> 00:07:13,433 line:-2
to know if the user
has granted your application


124
00:07:13,500 --> 00:07:14,935 line:-1
limited photos access.


125
00:07:15,969 --> 00:07:18,939 line:-2
Then we'll look at what has changed
when requesting access.


126
00:07:20,374 --> 00:07:22,576 line:-2
After that,
I'll be handing it back to Matt


127
00:07:22,643 --> 00:07:24,778 line:-1
to talk about UI considerations


128
00:07:24,845 --> 00:07:28,815 line:-2
like how to present
the limited library management UI natively


129
00:07:28,882 --> 00:07:30,751 line:-1
and prevent the automatic prompt.


130
00:07:32,386 --> 00:07:35,622 line:-2
Let's start with a look at how you query
for authorization status.


131
00:07:37,124 --> 00:07:38,225 line:-1
We've added a new value


132
00:07:38,292 --> 00:07:41,495 line:-2
to the existing
PHAuthorizationStatus enumeration


133
00:07:41,562 --> 00:07:44,731 line:-2
to indicate that your app
is authorized for limited access,


134
00:07:45,666 --> 00:07:49,369 line:-2
and introduced a new enumeration
called PHAccessLevel.


135
00:07:49,937 --> 00:07:52,372 line:-1
This can be add-only or read/write.


136
00:07:54,308 --> 00:07:55,609 line:-1
These levels correspond


137
00:07:55,676 --> 00:07:58,245 line:-2
to the two different
photos usage privacy prompts


138
00:07:58,312 --> 00:08:00,013 line:-1
that you should be familiar with.


139
00:08:02,683 --> 00:08:05,953 line:-2
The authorization status query
and request APIs


140
00:08:06,019 --> 00:08:08,322 line:-1
have been updated to take an access level.


141
00:08:09,122 --> 00:08:12,793 line:-2
This means that now you can check
if your app is authorized for read/write


142
00:08:12,860 --> 00:08:14,728 line:-1
or just add-only access.


143
00:08:16,496 --> 00:08:19,399 line:-2
Limited library doesn't affect
add-only access,


144
00:08:20,000 --> 00:08:23,003 line:-2
so to check if the user
has granted limited access,


145
00:08:23,070 --> 00:08:25,806 line:-2
you need to pass
the read/write access level


146
00:08:25,873 --> 00:08:29,776 line:-2
and check for the limited
authorization status return value.


147
00:08:31,812 --> 00:08:33,547 line:-2
Let's look at
how you can do that in detail.


148
00:08:34,847 --> 00:08:38,919 line:-2
Since we want to know if the user
has authorized our app for limited access,


149
00:08:38,986 --> 00:08:41,321 line:-2
we'll need to specify
the read/write access level.


150
00:08:42,789 --> 00:08:45,626 line:-2
Then, we'll call
the new authorizationStatus API


151
00:08:45,692 --> 00:08:47,160 line:-1
for that access level.


152
00:08:48,295 --> 00:08:50,697 line:-2
And the last step is
to check the return value


153
00:08:50,764 --> 00:08:53,634 line:-1
for the new limited authorization status,


154
00:08:53,700 --> 00:08:58,071 line:-2
usually to set up your UI in a way
that works best in limited access mode.


155
00:09:00,440 --> 00:09:04,178 line:-2
Now, let's see how requesting access
is impacted by limited library.


156
00:09:05,846 --> 00:09:09,082 line:-2
When your application wants to access
Photo Library data,


157
00:09:09,149 --> 00:09:13,086 line:-2
we still recommend that you allow
a user action to drive that request.


158
00:09:13,654 --> 00:09:17,257 line:-2
Ideally, when some UI activity
initiated by the user


159
00:09:17,324 --> 00:09:20,594 line:-2
requires you to fetch photo data
or add to the camera roll,


160
00:09:21,395 --> 00:09:23,597 line:-2
calling the PhotoKit APIs
to perform that work


161
00:09:23,664 --> 00:09:25,465 line:-1
will trigger the request for access


162
00:09:25,532 --> 00:09:29,169 line:-2
and make it clear to the user
why your app is requesting access.


163
00:09:29,837 --> 00:09:30,971 line:-1
But there are some cases


164
00:09:31,038 --> 00:09:33,574 line:-2
where you want to control
the timing of that request.


165
00:09:34,308 --> 00:09:36,677 line:-2
And we've updated
the request authorization API


166
00:09:36,743 --> 00:09:40,113 line:-2
to support access level
and limited authorization status.


167
00:09:41,582 --> 00:09:43,717 line:-1
Let's take a look at a request example,


168
00:09:43,784 --> 00:09:45,953 line:-2
keeping in mind that
requesting authorization


169
00:09:46,019 --> 00:09:49,456 line:-2
only prompts the user
if the status isn't already determined.


170
00:09:51,491 --> 00:09:53,894 line:-1
Just like when querying the status,


171
00:09:53,961 --> 00:09:57,030 line:-2
you'll want to declare
the access level your application needs.


172
00:09:58,031 --> 00:10:01,068 line:-2
In this case again,
we are requesting read/write access.


173
00:10:02,636 --> 00:10:06,673 line:-2
Then, call to request authorization
for that access level from the user.


174
00:10:07,674 --> 00:10:10,677 line:-2
This will put up the system prompt
for Photo Library access.


175
00:10:11,879 --> 00:10:14,815 line:-2
After the user makes their choice,
in the call back to this function


176
00:10:14,882 --> 00:10:17,985 line:-2
you will be provided with
the authorization status value


177
00:10:18,051 --> 00:10:19,720 line:-1
that aligns with their response.


178
00:10:21,555 --> 00:10:22,990 line:-1
This is where you want to check


179
00:10:23,056 --> 00:10:25,859 line:-2
for the new authorization status,
"limited",


180
00:10:25,926 --> 00:10:28,428 line:-2
that indicates that the user
has granted your application


181
00:10:28,495 --> 00:10:30,731 line:-1
limited photos library access.


182
00:10:32,699 --> 00:10:35,802 line:-2
The old authorization status
and request APIs


183
00:10:35,869 --> 00:10:38,906 line:-2
are not limited-library
or access-level aware


184
00:10:38,972 --> 00:10:40,841 line:-1
and are marked for future deprecation.


185
00:10:41,808 --> 00:10:44,111 line:-2
It's important to note
that for compatibility reasons,


186
00:10:44,178 --> 00:10:47,681 line:-2
these APIs will not return
the new "limited" authorization status.


187
00:10:47,748 --> 00:10:49,883 line:-1
Instead, they will return "authorized"


188
00:10:49,950 --> 00:10:54,254 line:-2
even if the user has granted Limited
Photos Library access to your application.


189
00:10:55,856 --> 00:10:58,859 line:-1
Generally, you should expect PhotoKit APIs


190
00:10:58,926 --> 00:11:01,528 line:-2
to act the same whether your app
has full authorization


191
00:11:01,595 --> 00:11:04,164 line:-2
or limited access
to the user's Photo Library.


192
00:11:05,098 --> 00:11:09,036 line:-2
However, there are a few exceptions
that are intentional and worth noting.


193
00:11:10,537 --> 00:11:13,507 line:-2
When your app creates new assets,
they will automatically be included


194
00:11:13,574 --> 00:11:16,076 line:-2
as part of the user's selection
for the application.


195
00:11:17,578 --> 00:11:21,048 line:-2
User albums, however,
cannot be fetched, nor created.


196
00:11:21,114 --> 00:11:24,685 line:-2
If your application relies on being able
to create an app-specific album,


197
00:11:24,751 --> 00:11:26,553 line:-2
you will need to change
your app's behavior.


198
00:11:27,754 --> 00:11:30,824 line:-2
Also, there is no access
to cloud-shared assets or albums.


199
00:11:31,825 --> 00:11:34,595 line:-2
All right, with that in mind,
I'll hand it back to Matt


200
00:11:34,661 --> 00:11:36,697 line:-1
to talk about UI considerations


201
00:11:36,763 --> 00:11:40,334 line:-2
and how you can natively present
the selection UI in your app.


202
00:11:41,435 --> 00:11:44,605 line:-2
So now that you can determine
if your app is in limited library mode,


203
00:11:44,671 --> 00:11:46,940 line:-2
let's talk about what UI changes
you'll need to make.


204
00:11:48,141 --> 00:11:51,545 line:-2
First, I'll cover how you can present
the selection UI natively.


205
00:11:51,612 --> 00:11:53,680 line:-1
And second, I'll mention how you can stop


206
00:11:53,747 --> 00:11:56,817 line:-2
the automatic system prompt
from happening for your app


207
00:11:56,884 --> 00:12:00,187 line:-2
the first time that it does
PhotoKit API calls after launch.


208
00:12:02,222 --> 00:12:03,524 line:-1
Presenting the management UI


209
00:12:03,590 --> 00:12:06,560 line:-2
is as simple as calling
this new PHPhotoLibrary API


210
00:12:06,627 --> 00:12:08,762 line:-1
presentLimitedLibraryPicker,


211
00:12:08,829 --> 00:12:11,565 line:-2
passing in the view controller
you wanted to present from.


212
00:12:12,399 --> 00:12:15,402 line:-2
You should monitor any changes
that happen to the user's selection


213
00:12:15,469 --> 00:12:19,173 line:-2
through the existing
PHPhotoLibraryChangeObserver API.


214
00:12:21,475 --> 00:12:25,212 line:-2
By doing this, you will be robust
to changes that happen in this picker,


215
00:12:25,279 --> 00:12:28,282 line:-2
in system preferences
or existing scenarios,


216
00:12:28,348 --> 00:12:30,250 line:-2
such as asset deletions
that may have synced


217
00:12:30,317 --> 00:12:31,818 line:-1
through iCloud Photo Library.


218
00:12:34,087 --> 00:12:37,891 line:-2
You may want to tie the presentation
to a button or action within your app.


219
00:12:37,958 --> 00:12:40,694 line:-2
For example, in the demo app
I showed you in the beginning,


220
00:12:40,761 --> 00:12:43,163 line:-2
some sort of affordance
in the browsing experience


221
00:12:43,230 --> 00:12:45,699 line:-2
would be a good way to allow
the user to easily modify


222
00:12:45,766 --> 00:12:47,868 line:-2
their Photo Library selection
for your app.


223
00:12:48,869 --> 00:12:52,072 line:-2
As you can see here, we added
a button to the browsing experience


224
00:12:52,139 --> 00:12:54,474 line:-2
that pulls up
the limited library selection UI.


225
00:12:56,710 --> 00:12:59,446 line:-2
You can suppress
the automatic prompting from the system


226
00:12:59,513 --> 00:13:02,416 line:-2
by setting this key to yes
in your app's Info.plist.


227
00:13:03,217 --> 00:13:04,685 line:-1
This is found in the same place


228
00:13:04,751 --> 00:13:07,754 line:-2
where you set your Photos
usage description strings in Xcode.


229
00:13:10,791 --> 00:13:14,828 line:-2
This is represented by the Prevent
Limited Photos Access alert key.


230
00:13:14,895 --> 00:13:18,232 line:-2
This exact string will be
in an upcoming version of Xcode.


231
00:13:19,933 --> 00:13:22,236 line:-2
In summary, these are the steps
that you should go through


232
00:13:22,302 --> 00:13:25,205 line:-2
when updating your app to handle
the new limited library mode.


233
00:13:26,340 --> 00:13:30,410 line:-2
First, reconsider if your app needs
to use Photo Library access at all.


234
00:13:31,078 --> 00:13:32,980 line:-1
The new PHPicker improvements this year


235
00:13:33,046 --> 00:13:35,582 line:-2
are a great way to implement
many of your features.


236
00:13:36,283 --> 00:13:39,186 line:-1
Second, adopt the new authorization APIs


237
00:13:39,253 --> 00:13:42,055 line:-2
so you will know if your app
is in limited library mode.


238
00:13:43,156 --> 00:13:45,225 line:-1
Third, update your app designs


239
00:13:45,292 --> 00:13:48,762 line:-2
to give an affordance for users
to modify their limited library selection


240
00:13:48,829 --> 00:13:51,331 line:-2
in a way that makes sense
in the context of your app.


241
00:13:52,032 --> 00:13:55,736 line:-2
And finally, be sure to set
the Info.plist key in Xcode


242
00:13:55,802 --> 00:13:58,405 line:-2
so the system prompt
stops coming up for your app


243
00:13:58,472 --> 00:14:01,675 line:-2
the first time it makes
PhotoKit API calls after launch.


244
00:14:03,510 --> 00:14:05,245 line:-2
And that's everything
you need to know about


245
00:14:05,312 --> 00:14:07,614 line:-1
the new Limited Photos Library feature.


246
00:14:07,681 --> 00:14:08,916 line:-1
Thank you.

