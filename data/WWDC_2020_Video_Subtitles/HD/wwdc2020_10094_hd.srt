1
00:00:03,904 --> 00:00:06,939 line:-1
Hello and welcome to WWDC.


2
00:00:08,876 --> 00:00:11,144 line:0
I'm Steve Moseley, a UIKit engineer,


3
00:00:11,211 --> 00:00:14,081 line:0
and this is "Handle Trackpad
and Mouse Input."


4
00:00:14,648 --> 00:00:16,583 line:-1
In this video, we're going to talk about


5
00:00:16,650 --> 00:00:20,721 line:-2
ways to make your app feel responsive
to the indirect input mechanisms


6
00:00:20,787 --> 00:00:22,456 line:-1
like trackpads and mice


7
00:00:22,523 --> 00:00:26,994 line:-2
introduced in macOS Catalina
and iPadOS 13.4.


8
00:00:27,060 --> 00:00:30,230 line:-2
There are some common updates
that apply to every app,


9
00:00:30,297 --> 00:00:33,834 line:-2
and some advanced updates
for apps that want to go the extra mile.


10
00:00:34,902 --> 00:00:38,338 line:-2
In common updates,
we'll go over handling pointer movement,


11
00:00:38,405 --> 00:00:42,442 line:-2
locking the pointer, and handling
scroll input and trackpad gestures.


12
00:00:43,911 --> 00:00:45,412 line:-1
In advanced updates,


13
00:00:45,479 --> 00:00:48,582 line:-2
we'll go over handling button mask
and keyboard modifiers,


14
00:00:48,649 --> 00:00:50,417 line:-1
accepting or rejecting events


15
00:00:50,484 --> 00:00:55,522 line:-2
with new UIGestureRecognizer
and UIGestureRecognizerDelegate methods,


16
00:00:55,589 --> 00:00:58,792 line:-2
distinguishing touches
from indirect input devices,


17
00:00:58,859 --> 00:01:02,095 line:-2
and opting in to some new behavior
with an Info.plist key.


18
00:01:03,463 --> 00:01:05,532 line:-1
Let's take a look at those common updates.


19
00:01:07,167 --> 00:01:08,936 line:-1
With a mouse or trackpad,


20
00:01:09,002 --> 00:01:11,471 line:-2
users expect
to interact with your application


21
00:01:11,538 --> 00:01:13,507 line:-1
without touching the screen.


22
00:01:13,574 --> 00:01:18,078 line:-2
Notice how Safari reveals their toolbar
when the pointer moves into that region,


23
00:01:18,145 --> 00:01:21,815 line:-2
or how they show the tab-close button
when the pointer moves into a tab.


24
00:01:22,683 --> 00:01:27,454 line:-2
Safari responds to pointer movement
like this with UIHoverGestureRecognizer.


25
00:01:29,623 --> 00:01:34,261 line:-2
UIHoverGestureRecognizer was introduced
with Mac Catalyst in Catalina


26
00:01:34,328 --> 00:01:37,164 line:-1
and is now available in iPadOS.


27
00:01:37,231 --> 00:01:38,932 line:-1
It is a normal gesture recognizer


28
00:01:38,999 --> 00:01:42,135 line:-2
and works on iPad
just like it does on the Mac.


29
00:01:42,202 --> 00:01:45,305 line:-2
If you're overriding
UIApplication.sendEvent,


30
00:01:45,372 --> 00:01:49,376 line:-2
you'll notice it's driven by
a new event type, EventType.hover.


31
00:01:51,345 --> 00:01:55,716 line:-2
You instantiate a UIHoverGestureRecognizer
with a target and action,


32
00:01:55,782 --> 00:01:58,418 line:-2
just like you would
any other gesture recognizer.


33
00:01:59,219 --> 00:02:00,621 line:-1
In your action callback,


34
00:02:00,687 --> 00:02:04,658 line:-2
you'll switch over the gesture state
and perform appropriate actions.


35
00:02:06,660 --> 00:02:09,062 line:-1
Note that gesture state "began"


36
00:02:09,128 --> 00:02:12,299 line:-2
maps to the pointer
entering your gesture view's bounds...


37
00:02:13,634 --> 00:02:18,272 line:-2
and "ended" maps to the pointer
exiting your gesture view's bounds.


38
00:02:18,338 --> 00:02:21,241 line:-2
Here,
we're revealing video playback controls


39
00:02:21,308 --> 00:02:23,977 line:-2
based on whether the pointer
is within our view.


40
00:02:26,146 --> 00:02:29,816 line:-2
If you inspect touches
in your iPad or Mac Catalyst apps,


41
00:02:29,883 --> 00:02:33,187 line:-2
you'll see there are a few new phases
to track pointer movement.


42
00:02:34,855 --> 00:02:39,693 line:-2
These phases map to the overall
pointer movement within your window.


43
00:02:39,760 --> 00:02:43,664 line:-2
RegionEntered means
the pointer has entered your window.


44
00:02:43,730 --> 00:02:46,667 line:-2
RegionMoved means
the pointer is within your window


45
00:02:46,733 --> 00:02:49,503 line:-1
but has not clicked or pressed down yet.


46
00:02:49,570 --> 00:02:52,172 line:-2
RegionExited means
it has left your window.


47
00:02:53,907 --> 00:02:56,543 line:-2
Notice that these phases
do not always align


48
00:02:56,610 --> 00:03:00,414 line:-2
with the gesture states we discussed
for UIHoverGestureRecognizer.


49
00:03:01,381 --> 00:03:04,585 line:-2
The UIHoverGestureRecognizer states
will only map


50
00:03:04,651 --> 00:03:08,856 line:-2
to what the pointer is doing
within the bounds of your gesture's view,


51
00:03:08,922 --> 00:03:13,227 line:-2
whereas these phases pertain to what
the pointer is doing within your window.


52
00:03:13,827 --> 00:03:17,564 line:-2
Use UIHoverGestureRecognizer
to respond to pointer movement


53
00:03:17,631 --> 00:03:22,069 line:-2
or for hiding and revealing content,
like we saw in the Safari example earlier.


54
00:03:23,103 --> 00:03:25,472 line:-2
Don't use it to modify
the appearance of the pointer


55
00:03:25,539 --> 00:03:27,908 line:-1
or apply a hover effect.


56
00:03:27,975 --> 00:03:31,178 line:-2
For either of those,
you should use UIPointerInteraction.


57
00:03:32,880 --> 00:03:38,051 line:0
For more on UIHoverGestureRecognizer,
see our talk from 2019,


58
00:03:38,118 --> 00:03:41,922 line:0
"Taking iPad Apps for the Mac
to the Next Level."


59
00:03:41,989 --> 00:03:45,526 line:0
And if you are interested in modifying
the appearance of the pointer,


60
00:03:45,592 --> 00:03:48,128 line:0
check out "Build for the iPadOS Pointer."


61
00:03:50,030 --> 00:03:52,432 line:-2
In addition
to responding to pointer movement,


62
00:03:52,499 --> 00:03:56,403 line:-2
some apps, like games, would like
to lock the movement of the pointer.


63
00:03:57,171 --> 00:04:00,974 line:-1
New in iPadOS 14 and Mac Catalyst Big Sur,


64
00:04:01,041 --> 00:04:04,077 line:-2
we've introduced API
to allow you to do just that.


65
00:04:04,144 --> 00:04:05,913 line:-1
It's really easy to use.


66
00:04:07,447 --> 00:04:10,884 line:-2
Set your lock preference
with UIViewController API


67
00:04:10,951 --> 00:04:15,055 line:-2
and observe the resolved value
with the new UIPointerLockState.


68
00:04:15,122 --> 00:04:16,723 line:-1
That's it.


69
00:04:16,790 --> 00:04:18,791 line:-1
The pointer is a shared resource,


70
00:04:18,858 --> 00:04:23,230 line:-2
so ultimately, the system decides
whether the pointer should be locked.


71
00:04:23,297 --> 00:04:25,465 line:-2
That means
your preferred pointer lock state


72
00:04:25,532 --> 00:04:28,168 line:-1
may or may not be honored.


73
00:04:28,235 --> 00:04:31,138 line:-2
Let's see how these two pieces of API
work together.


74
00:04:32,940 --> 00:04:36,743 line:-2
Your view controller sets
a prefersPointerLocked value of "true."


75
00:04:37,578 --> 00:04:39,413 line:-1
As long as some requirements are met,


76
00:04:39,479 --> 00:04:43,050 line:-2
the system sets the lock value
of your scene to "true" as well.


77
00:04:43,717 --> 00:04:47,621 line:-2
That status is reflected
in the UIPointerLockState of your scene.


78
00:04:50,591 --> 00:04:52,993 line:-2
What happens
if you need to present content


79
00:04:53,060 --> 00:04:54,795 line:-1
and you want to disable the lock?


80
00:04:55,529 --> 00:04:58,298 line:-2
Let's say your game
experiences a networking error,


81
00:04:58,365 --> 00:05:00,767 line:-2
and you'd like to present
a UIAlertController.


82
00:05:01,435 --> 00:05:04,638 line:-2
The user expects to interact
with that content using the pointer


83
00:05:04,705 --> 00:05:07,140 line:-2
just like they can
throughout the rest of the system.


84
00:05:08,575 --> 00:05:09,843 line:-1
No problem.


85
00:05:09,910 --> 00:05:13,380 line:-2
The default value
of prefersPointerLocked is "false."


86
00:05:14,248 --> 00:05:16,617 line:-1
When UIAlertController is presented,


87
00:05:16,683 --> 00:05:20,354 line:-2
its value of prefersPointerLocked
is observed by the system


88
00:05:20,420 --> 00:05:22,256 line:-1
and the pointer lock is disabled.


89
00:05:24,191 --> 00:05:27,094 line:-2
As view controllers
are presented or dismissed,


90
00:05:27,160 --> 00:05:31,064 line:-2
your scene's pointer lock value
is automatically updated,


91
00:05:31,131 --> 00:05:33,700 line:-2
which means you don't need
to keep track of this state.


92
00:05:35,969 --> 00:05:38,906 line:-2
If you want the pointer to be locked
in your scene,


93
00:05:38,972 --> 00:05:41,742 line:-2
just override
prefersPointerLocked property


94
00:05:41,808 --> 00:05:43,677 line:-1
of your view controller to be "true."


95
00:05:44,745 --> 00:05:48,382 line:-2
If at some point you want to disable
or change this value,


96
00:05:48,448 --> 00:05:51,885 line:-2
just call setNeedsUpdate
OfPrefersPointerLocked.


97
00:05:53,253 --> 00:05:57,157 line:-2
If there's a part of your application
that needs to see the current lock status,


98
00:05:57,224 --> 00:05:59,793 line:-2
you obtain the pointer lock state
from your scene


99
00:05:59,860 --> 00:06:01,862 line:-1
and look at the isLocked property.


100
00:06:02,729 --> 00:06:05,098 line:-2
Here, we have an object
that wants to be notified


101
00:06:05,165 --> 00:06:07,935 line:-2
of changes to the pointer lock state
of its scene.


102
00:06:09,536 --> 00:06:15,042 line:-2
It obtains the pointerLockState object,
then registers to observe that object.


103
00:06:16,610 --> 00:06:20,581 line:-2
When UIPointerLockState
.didChangeNotification is posted,


104
00:06:20,647 --> 00:06:22,216 line:-1
the closure will be executed


105
00:06:22,282 --> 00:06:25,018 line:-2
and the isLocked value
of UIPointerLockState


106
00:06:25,085 --> 00:06:28,188 line:-2
will be passed on
to another part of the application.


107
00:06:29,756 --> 00:06:31,391 line:-1
As mentioned in the diagram,


108
00:06:31,458 --> 00:06:33,994 line:-2
there are some requirements
your scene needs to fulfill


109
00:06:34,061 --> 00:06:37,431 line:-2
in order for your preferred
pointer lock value to be considered.


110
00:06:37,497 --> 00:06:39,766 line:-2
The requirements
are different per platform,


111
00:06:39,833 --> 00:06:41,535 line:-1
so let's start with iPadOS.


112
00:06:42,569 --> 00:06:45,639 line:-1
First, your scene must be full screen.


113
00:06:45,706 --> 00:06:50,644 line:-2
This means your application cannot be
in Split View multitasking or Slide Over.


114
00:06:50,711 --> 00:06:53,413 line:-2
It also means there can be
no other app in Slide Over.


115
00:06:54,448 --> 00:06:56,116 line:-1
Full screen here does not mean


116
00:06:56,183 --> 00:06:59,853 line:-2
using the UIRequiresFullScreen
Info.plist key,


117
00:06:59,920 --> 00:07:03,223 line:-2
simply that your scene
must occupy the entire screen.


118
00:07:04,391 --> 00:07:09,329 line:-2
Second, your scene must be
in the foregroundActive activation state.


119
00:07:09,396 --> 00:07:12,666 line:-2
This means it cannot be deactivated
for any reason,


120
00:07:12,733 --> 00:07:15,702 line:-2
like Control Center
or Notification Center being presented.


121
00:07:16,970 --> 00:07:21,074 line:-2
In Mac Catalyst, your application
must be the frontmost application


122
00:07:21,141 --> 00:07:24,645 line:-2
for your prefersPointerLocked value
to be considered by the system.


123
00:07:25,712 --> 00:07:27,481 line:-1
And if you have multiple windows,


124
00:07:27,548 --> 00:07:29,783 line:-2
the window where you'd like the pointer
to be locked


125
00:07:29,850 --> 00:07:31,785 line:-1
should also be ordered to the front.


126
00:07:33,720 --> 00:07:36,256 line:-2
If your application
fails to meet these requirements,


127
00:07:36,323 --> 00:07:38,025 line:-1
the pointer lock is disabled.


128
00:07:38,926 --> 00:07:42,162 line:-2
On iPadOS,
if a slide-over app is displayed,


129
00:07:42,229 --> 00:07:46,266 line:-2
or on macOS, if your application
is no longer frontmost,


130
00:07:46,333 --> 00:07:49,570 line:-2
isLocked will change to "false,"
and you will be notified


131
00:07:49,636 --> 00:07:52,639 line:-2
through UIPointerLockState
DidChangeNotification.


132
00:07:54,074 --> 00:07:57,678 line:-2
However, you don't need to do anything
to get the pointer lock back.


133
00:07:57,744 --> 00:08:01,248 line:-2
The system continuously evaluates
these requirements.


134
00:08:01,315 --> 00:08:03,150 line:-1
So, as conditions change,


135
00:08:03,217 --> 00:08:05,886 line:-2
so will the pointer lock status
of your scene.


136
00:08:05,953 --> 00:08:09,656 line:-2
You don't need to call setNeedsUpdate
OfPrefersPointerLocked.


137
00:08:11,124 --> 00:08:15,028 line:-2
Remember that it's the system's discretion
to lock the pointer.


138
00:08:15,095 --> 00:08:19,900 line:-2
These requirements are subject to change
and are informed by user behavior.


139
00:08:19,967 --> 00:08:21,869 line:-1
So your application should not assume


140
00:08:21,935 --> 00:08:25,706 line:-2
that your prefersPointerLocked value
will always be honored.


141
00:08:25,772 --> 00:08:28,342 line:-2
You should always observe changes
to isLocked


142
00:08:28,408 --> 00:08:31,044 line:-2
and respond
in your application appropriately.


143
00:08:32,746 --> 00:08:36,549 line:-2
Finally, pointer locking
is not available on all scenes.


144
00:08:36,616 --> 00:08:41,188 line:-2
For those, the pointerLockState property
on UIScene will return "nil"


145
00:08:41,255 --> 00:08:44,424 line:-1
to indicate that locking is not available.


146
00:08:44,491 --> 00:08:45,559 line:-1
When locking the pointer,


147
00:08:45,626 --> 00:08:48,595 line:-2
you'll also want to look at
relative movement from trackpads and mice.


148
00:08:50,097 --> 00:08:51,932 line:0
For more information on that,


149
00:08:51,999 --> 00:08:55,369 line:0
see the "Bring Keyboard
and Mouse Gaming to iPad" video.


150
00:08:57,037 --> 00:08:59,506 line:-1
Let's talk about handling scroll input.


151
00:09:00,874 --> 00:09:03,677 line:-2
It is important to ensure
that all regions of your app


152
00:09:03,744 --> 00:09:07,047 line:-2
respond correctly
with connected pointing devices.


153
00:09:07,114 --> 00:09:09,349 line:-2
If users can pan something
with their finger,


154
00:09:09,416 --> 00:09:10,918 line:-1
they'll expect to pan the content


155
00:09:10,984 --> 00:09:14,188 line:-2
with either a two-finger gesture
or a mouse scroll wheel.


156
00:09:15,255 --> 00:09:17,991 line:-2
Here we see that the custom controls
in Control Center


157
00:09:18,058 --> 00:09:21,161 line:-2
have been updated to pan
with two-finger swipes on a trackpad.


158
00:09:22,362 --> 00:09:24,631 line:-1
You handle scroll input in your app


159
00:09:24,698 --> 00:09:30,103 line:-2
by updating UIPanGestureRecognizer's
allowedScrollTypesMask property.


160
00:09:30,170 --> 00:09:33,006 line:-2
Simply give it the set of scroll types
you want to handle


161
00:09:33,073 --> 00:09:36,376 line:-2
and that will enable EventType.scroll
support for your gesture.


162
00:09:37,644 --> 00:09:39,780 line:-1
UIScrollView's pan gesture recognizer


163
00:09:39,847 --> 00:09:44,117 line:-2
updates allowedScrollTypesMask
to handle all types of scroll input,


164
00:09:44,985 --> 00:09:49,857 line:-2
but standard UIPanGestureRecognizers
have no mask by default.


165
00:09:49,923 --> 00:09:53,694 line:-2
So you'll want to update this property
for all your application's pan gestures.


166
00:09:55,162 --> 00:09:59,166 line:-2
Let's say you have an app that hides
content on either side of its main view.


167
00:09:59,967 --> 00:10:03,036 line:-2
The user can reveal this content
with a horizontal swipe,


168
00:10:03,103 --> 00:10:05,706 line:-1
which is powered by a pan gesture.


169
00:10:05,772 --> 00:10:07,174 line:-1
Your designer has determined


170
00:10:07,241 --> 00:10:11,345 line:-2
revealing this content with a scroll wheel
doesn't feel very natural,


171
00:10:11,411 --> 00:10:15,148 line:-2
so you're going only support
continuous scroll types with this gesture.


172
00:10:16,817 --> 00:10:20,621 line:-2
Simply update the pan gesture's
allowedScrollTypesMask


173
00:10:20,687 --> 00:10:23,357 line:-1
to UIScrollTypeMaskContinuous.


174
00:10:23,991 --> 00:10:27,227 line:-2
Perhaps there's a custom pull-to-refresh
interaction in your application


175
00:10:27,294 --> 00:10:29,763 line:-1
that's also powered by a pan gesture.


176
00:10:29,830 --> 00:10:30,898 line:-1
For this gesture,


177
00:10:30,964 --> 00:10:34,301 line:-2
you might want to respond
to all types of scroll input,


178
00:10:34,368 --> 00:10:37,538 line:-2
so just update
its allowedScrollTypesMask property


179
00:10:37,604 --> 00:10:39,907 line:-1
to UIScrollTypeMaskAll.


180
00:10:41,375 --> 00:10:45,412 line:-2
Handling pinch and rotate
trackpad gestures is even easier.


181
00:10:45,479 --> 00:10:51,051 line:-2
Just use UIPinchGestureRecognizer
and UIRotationGestureRecognizer.


182
00:10:51,118 --> 00:10:54,988 line:-2
To ensure every app can handle
these types of indirect gestures,


183
00:10:55,055 --> 00:10:58,425 line:-2
these recognizers
use a compatibility mode.


184
00:10:58,492 --> 00:11:02,896 line:-2
By default, they are driven
by gesture-simulating touches.


185
00:11:02,963 --> 00:11:06,166 line:-2
UIKit creates these touches
a fixed distance apart


186
00:11:06,233 --> 00:11:10,037 line:-2
and simulates their movement in response
to movement on the touch surface.


187
00:11:11,471 --> 00:11:17,945 line:-2
Starting in iPadOS 13.4
and macOS Catalina 10.15.4,


188
00:11:18,011 --> 00:11:21,748 line:-2
applications can move these gestures
out of the compatibility mode


189
00:11:21,815 --> 00:11:25,752 line:-2
and respond to a new event type,
EventType.transform.


190
00:11:26,887 --> 00:11:29,656 line:-2
This event type
comes directly from the input device


191
00:11:29,723 --> 00:11:32,492 line:-2
which enables
precise pinch and rotate gestures


192
00:11:32,559 --> 00:11:34,228 line:-1
like your users expect.


193
00:11:35,395 --> 00:11:37,064 line:-1
To get this new event type


194
00:11:37,130 --> 00:11:40,234 line:-2
and to move these gestures
out of their compatibility mode,


195
00:11:40,300 --> 00:11:44,071 line:-2
you'll need to add a key
to your application's Info.plist.


196
00:11:44,137 --> 00:11:45,906 line:-1
We'll talk more about that in a bit.


197
00:11:47,040 --> 00:11:48,075 line:-1
The good news


198
00:11:48,141 --> 00:11:52,412 line:-2
is that there is no additional code
required for either of these scenarios.


199
00:11:52,479 --> 00:11:54,281 line:-1
With or without the key,


200
00:11:54,348 --> 00:11:58,685 line:-2
UIPinchGestureRecognizer
and UIRotationGestureRecognizer


201
00:11:58,752 --> 00:12:01,054 line:-1
know how to handle this input.


202
00:12:01,121 --> 00:12:04,091 line:-2
And when you do add
the Info.plist key to your app,


203
00:12:04,157 --> 00:12:06,960 line:-2
you don't need to write code
to handle the new event type.


204
00:12:07,027 --> 00:12:08,295 line:-1
It just works.


205
00:12:09,630 --> 00:12:12,900 line:-2
Do note, though, that if
you're adopting the Info.plist key,


206
00:12:12,966 --> 00:12:17,304 line:-2
these gestures will no longer be driven
by touches during trackpad input.


207
00:12:17,371 --> 00:12:20,574 line:-2
In that case,
numberOfTouches will return zero


208
00:12:20,641 --> 00:12:23,510 line:-2
and locationOfTouch:inView
may throw an exception.


209
00:12:24,811 --> 00:12:27,948 line:-2
And those are the common updates
that apply to every app.


210
00:12:29,049 --> 00:12:31,518 line:-2
Let's move on and talk about
some advanced updates


211
00:12:31,585 --> 00:12:34,521 line:-1
to surprise and delight your pro users.


212
00:12:35,355 --> 00:12:38,225 line:-2
Button mask and key modifiers
are a great way


213
00:12:38,292 --> 00:12:41,128 line:-2
to add advanced functionality
to your application.


214
00:12:42,129 --> 00:12:43,964 line:-1
Context menus use button mask


215
00:12:44,031 --> 00:12:47,301 line:-2
to recognize two-finger taps
and secondary clicks


216
00:12:47,367 --> 00:12:49,837 line:-1
so they can provide a more streamlined UI.


217
00:12:51,038 --> 00:12:53,373 line:-1
And Numbers uses key modifiers


218
00:12:53,440 --> 00:12:56,910 line:-2
so I can select multiple rows
with the pointer and Shift key modifier,


219
00:12:56,977 --> 00:12:58,445 line:-1
just like I can with my finger.


220
00:13:00,614 --> 00:13:04,017 line:-1
UIEvent.ButtonMask is a new type in iOS,


221
00:13:04,084 --> 00:13:07,487 line:-2
and it's the set of buttons pressed
while clicking with a pointing device.


222
00:13:09,056 --> 00:13:14,027 line:-2
It's present on both UIEvent and
UIGestureRecognizer as buttonMask,


223
00:13:14,094 --> 00:13:18,966 line:-2
giving you a convenient way to respond
to just the primary button of the device,


224
00:13:19,032 --> 00:13:21,435 line:-2
create features that respond
to two-finger taps


225
00:13:21,502 --> 00:13:25,973 line:-2
and secondary mouse buttons,
or target high-number mouse buttons.


226
00:13:26,039 --> 00:13:28,742 line:-2
Note that the button mask
on UIGestureRecognizer


227
00:13:28,809 --> 00:13:30,811 line:-1
is from the last event processed.


228
00:13:32,646 --> 00:13:36,917 line:-2
If you want a simple way to require
a specific button mask before firing,


229
00:13:36,984 --> 00:13:41,388 line:-2
we've updated UITapGestureRecognizer
with buttonMaskRequired.


230
00:13:41,455 --> 00:13:43,891 line:-2
Just give it a button mask,
and you're done.


231
00:13:44,892 --> 00:13:47,494 line:-2
There's even a convenience function
on ButtonMask


232
00:13:47,561 --> 00:13:51,598 line:-2
that returns the appropriate mask value
for high-number buttons.


233
00:13:51,665 --> 00:13:53,534 line:-1
Together with buttonMaskRequired,


234
00:13:53,600 --> 00:13:56,436 line:-2
it's really easy to target
high-number mouse buttons


235
00:13:56,503 --> 00:13:59,540 line:-2
as accelerators for advanced functionality
in your app.


236
00:14:01,475 --> 00:14:04,845 line:-2
If you've used UICommand
or UIPointerInteraction,


237
00:14:04,912 --> 00:14:08,115 line:-1
you're familiar with UIKeyModifierFlags.


238
00:14:08,182 --> 00:14:12,386 line:-2
It's the set of keyboard modifiers
pressed during an event.


239
00:14:12,452 --> 00:14:17,624 line:-2
We've brought UIKeyModifierFlags
to both UIEvent and UIGestureRecognizer


240
00:14:17,691 --> 00:14:19,259 line:-1
as modifierFlags.


241
00:14:20,093 --> 00:14:22,462 line:-2
This property can be used
during gesture callbacks


242
00:14:22,529 --> 00:14:24,998 line:-1
to alter how you respond to an event.


243
00:14:26,333 --> 00:14:30,270 line:-2
For instance, clicking on a link in Safari
with the Command key pressed


244
00:14:30,337 --> 00:14:33,774 line:-1
causes the link to be opened in a new tab.


245
00:14:33,841 --> 00:14:37,444 line:-2
Like buttonMask,
UIGestureRecognizer's modifierFlags


246
00:14:37,511 --> 00:14:40,080 line:-2
is populated
from the last event processed.


247
00:14:41,448 --> 00:14:45,018 line:-2
For more on how to have
a great keyboard experience in your app,


248
00:14:45,085 --> 00:14:48,455 line:0
check out the "Support Hardware Keyboards
in Your App" video.


249
00:14:49,556 --> 00:14:52,726 line:-2
Button mask and key modifiers
are easy to use.


250
00:14:53,594 --> 00:14:57,831 line:-2
Targeting a third mouse button
is as easy as using buttonMask.button


251
00:14:57,898 --> 00:15:00,267 line:-1
to get the appropriate mask


252
00:15:00,334 --> 00:15:01,668 line:-1
and setting the result


253
00:15:01,735 --> 00:15:05,339 line:-2
on UITapGestureRecognizer.
buttonMaskRequired.


254
00:15:05,405 --> 00:15:06,440 line:-1
That's it.


255
00:15:08,008 --> 00:15:11,812 line:-2
Let's go back to our UIHoverGesture
Recognizer example from earlier


256
00:15:11,879 --> 00:15:14,114 line:-1
to see how modifier flags work.


257
00:15:14,181 --> 00:15:17,150 line:-2
Previously,
we revealed video playback controls


258
00:15:17,217 --> 00:15:19,820 line:-2
whenever the pointer entered
our gesture's view.


259
00:15:20,687 --> 00:15:23,690 line:-2
If we optionally want to show
chapter-selection controls


260
00:15:23,757 --> 00:15:27,327 line:-2
whenever the UIKeyModifierAlternate
is pressed,


261
00:15:27,394 --> 00:15:31,231 line:-2
we just need to check
if modifierFlags contains that value.


262
00:15:31,865 --> 00:15:35,068 line:-2
Button mask and modifier flags
are especially powerful


263
00:15:35,135 --> 00:15:39,173 line:-2
when combined with new API
for UIGestureRecognizerDelegate


264
00:15:39,239 --> 00:15:42,309 line:-1
and UIGestureRecognizer subclasses.


265
00:15:42,376 --> 00:15:46,280 line:-2
These methods are called for
only the events handled by your gesture,


266
00:15:46,346 --> 00:15:51,051 line:-2
so UIPinchGestureRecognizer
won't be asked about EventType.scroll.


267
00:15:51,818 --> 00:15:55,422 line:-2
These methods give you an opportunity
to accept or reject those events


268
00:15:55,489 --> 00:16:00,027 line:-2
based on button mask, modifier flags,
or other properties.


269
00:16:00,093 --> 00:16:01,762 line:-1
Note that these methods happen


270
00:16:01,828 --> 00:16:05,098 line:-2
before the event is fully processed
by the gesture,


271
00:16:05,165 --> 00:16:09,336 line:-2
so UIGestureRecognizer's
buttonMask and modifierFlags properties


272
00:16:09,403 --> 00:16:12,506 line:-2
will not include the new values
found in the event.


273
00:16:13,607 --> 00:16:16,777 line:-2
If you're inspecting either of those
properties in these methods,


274
00:16:16,844 --> 00:16:19,213 line:-1
you should look at the values on UIEvent,


275
00:16:19,279 --> 00:16:21,849 line:-1
not the ones on UIGestureRecognizer.


276
00:16:22,616 --> 00:16:27,421 line:-2
As gestures like UIPanGestureRecognizer
and UIPinchGestureRecognizer


277
00:16:27,487 --> 00:16:30,457 line:-2
respond to multiple
non-touch-based events,


278
00:16:30,524 --> 00:16:32,526 line:-1
you should move any event-related code


279
00:16:32,593 --> 00:16:35,629 line:-2
in methods like
gestureRecognizer(shouldReceive touch:)


280
00:16:35,696 --> 00:16:37,664 line:-1
into either of these two new methods.


281
00:16:39,533 --> 00:16:43,470 line:-2
Let's look at some examples
for how you can use this in your app.


282
00:16:43,537 --> 00:16:45,873 line:-1
We have a UIGestureRecognizer subclass


283
00:16:45,939 --> 00:16:49,476 line:-2
that only wants to receive events
with a buttonMask of secondary.


284
00:16:50,244 --> 00:16:54,548 line:-2
You might do this for functionality
driven exclusively by two-finger taps


285
00:16:54,615 --> 00:16:56,483 line:-1
or secondary mouse-button clicks.


286
00:16:58,385 --> 00:17:02,723 line:-2
Start by overriding the gesture
subclass method shouldReceive(_ event).


287
00:17:03,557 --> 00:17:07,361 line:-2
In that method, you simply need to check
if the buttonMask on the event


288
00:17:07,426 --> 00:17:09,963 line:-1
is exactly equal to secondary.


289
00:17:10,030 --> 00:17:14,601 line:-2
If it is, we receive the event.
If not, we reject it.


290
00:17:15,569 --> 00:17:20,473 line:-2
As mentioned earlier, while buttonMask
exists on UIGestureRecognizer as well,


291
00:17:20,540 --> 00:17:24,011 line:-2
we shouldn't look at that property
in this method.


292
00:17:24,077 --> 00:17:26,680 line:-2
ShouldReceive(_ event)
happens prior to the event


293
00:17:26,747 --> 00:17:29,349 line:-1
being fully processed by the gesture,


294
00:17:29,416 --> 00:17:33,620 line:-2
so UIGestureRecognizer's buttonMask
will not be up to date at this point.


295
00:17:36,723 --> 00:17:40,127 line:-2
It's common to allow click
plus the Control key modifier


296
00:17:40,194 --> 00:17:43,397 line:-2
to perform the same actions
as a secondary click.


297
00:17:43,463 --> 00:17:46,466 line:-2
We can update our example
for that as well.


298
00:17:46,533 --> 00:17:49,903 line:-2
We just need to modify
our shouldReceive method.


299
00:17:50,838 --> 00:17:54,308 line:-2
First, check if the buttonMask
is exactly primary.


300
00:17:55,976 --> 00:18:01,415 line:-2
If that's true, we check if modifierFlags
is equal to UIKeyModifierControl.


301
00:18:02,816 --> 00:18:06,620 line:-2
We'll receive the event
if it's a secondary click or Control click


302
00:18:06,687 --> 00:18:08,121 line:-1
and reject it if it isn't.


303
00:18:10,490 --> 00:18:13,193 line:-1
Let's bring back our video example again.


304
00:18:13,260 --> 00:18:15,796 line:-2
We want to add another hover gesture
over the video


305
00:18:15,863 --> 00:18:18,432 line:-1
that shows closed-caption controls.


306
00:18:18,498 --> 00:18:21,768 line:-2
The user can already get to this feature
through a settings menu,


307
00:18:21,835 --> 00:18:23,971 line:-2
but we'd like to give them
a quick way to do this


308
00:18:24,037 --> 00:18:26,240 line:-1
with a key modifier and the hover gesture.


309
00:18:27,975 --> 00:18:31,478 line:-2
We can instantiate
our HoverGestureRecognizer like before.


310
00:18:32,479 --> 00:18:35,816 line:-2
This time,
we'll set ourselves as the delegate,


311
00:18:35,883 --> 00:18:39,486 line:-2
and implement the gestureRecognizer
shouldReceive event method.


312
00:18:40,954 --> 00:18:46,326 line:-2
In that method, we'll receive the event
if UIKeyModifierAlternate is pressed,


313
00:18:46,393 --> 00:18:48,395 line:-1
and reject the event if it isn't.


314
00:18:49,630 --> 00:18:52,900 line:-2
As you're considering how to polish
pointer support for your app,


315
00:18:52,966 --> 00:18:56,336 line:-2
you may want to distinguish touches
originating from a pointing device


316
00:18:56,403 --> 00:18:58,906 line:-1
from ones originating from a finger.


317
00:18:58,972 --> 00:19:00,874 line:-1
You especially may want to consider this


318
00:19:00,941 --> 00:19:04,044 line:-2
if you have a lot custom hit-testing code
in your app.


319
00:19:05,112 --> 00:19:07,781 line:-2
As the pointer is more precise
than a finger,


320
00:19:07,848 --> 00:19:11,652 line:-2
you can reduce any expanded
hit-testing regions for those touches,


321
00:19:11,718 --> 00:19:14,788 line:-1
providing a more precise experience.


322
00:19:14,855 --> 00:19:16,490 line:-1
Touches from a pointing device


323
00:19:16,557 --> 00:19:19,560 line:-2
are given the new TouchType
of indirectPointer


324
00:19:19,626 --> 00:19:23,530 line:-2
if you opt in to the UIApplication
SupportsIndirectInputEvents


325
00:19:23,597 --> 00:19:25,032 line:-1
Info.plist key.


326
00:19:26,333 --> 00:19:29,369 line:-2
You can use this touch type
with existing API


327
00:19:29,436 --> 00:19:32,606 line:-2
like UIGestureRecognizer.
allowedTouchTypes


328
00:19:32,673 --> 00:19:35,709 line:-2
to have gestures that only respond
to pointer clicks,


329
00:19:35,776 --> 00:19:38,212 line:-2
or ones that only respond
to finger-based touches.


330
00:19:40,314 --> 00:19:44,852 line:-2
Let's talk some more about UIApplication
SupportsIndirectInputEvents.


331
00:19:45,619 --> 00:19:49,323 line:-2
It's a Boolean key you add
to your application's Info.plist.


332
00:19:50,057 --> 00:19:53,560 line:-2
This key is not required
to enable pointer interactions,


333
00:19:53,627 --> 00:19:57,631 line:-2
button clicking, scroll input,
or trackpad gestures.


334
00:19:57,698 --> 00:20:00,667 line:-1
All of those work with or without the key.


335
00:20:00,734 --> 00:20:04,638 line:-2
It is required in order to get
the new touch type indirect pointer


336
00:20:04,705 --> 00:20:06,406 line:-1
and EventType.transform.


337
00:20:08,008 --> 00:20:12,379 line:-2
Existing projects do not have this key set
and will need to add it.


338
00:20:12,446 --> 00:20:16,383 line:-2
Starting with iOS 14
and macOS Big Sur SDKs,


339
00:20:16,450 --> 00:20:20,754 line:-2
new UIKit and SwiftUI projects
will have this value set to "true."


340
00:20:21,622 --> 00:20:23,957 line:-2
In a future release,
the default will change


341
00:20:24,024 --> 00:20:27,594 line:-2
and we will no longer consult
the value of this key.


342
00:20:27,661 --> 00:20:31,265 line:-2
Let's see exactly what happens
if this key is or is not present.


343
00:20:33,200 --> 00:20:37,171 line:-2
It's helpful to think of UIApplication
SupportsIndirectInputEvents


344
00:20:37,237 --> 00:20:39,773 line:-1
as opting out of a compatibility mode.


345
00:20:40,641 --> 00:20:42,543 line:-1
We added this compatibility mode


346
00:20:42,609 --> 00:20:44,945 line:-2
so that users would have
a great initial experience


347
00:20:45,012 --> 00:20:48,482 line:-1
with indirect input on iPadOS 13.4.


348
00:20:49,616 --> 00:20:53,620 line:-2
So if the key is not present,
as it is for all existing projects,


349
00:20:53,687 --> 00:20:56,356 line:-2
your application
is in this compatibility mode.


350
00:20:57,791 --> 00:21:00,827 line:-2
Clicks from pointing devices
are TouchType.direct,


351
00:21:00,894 --> 00:21:03,130 line:-1
the same as for finger-based touches,


352
00:21:03,197 --> 00:21:06,233 line:-2
so you won't be able
to distinguish them apart.


353
00:21:06,300 --> 00:21:10,971 line:-2
Pinching and rotating on the trackpad
result in gesture-simulating touches


354
00:21:11,038 --> 00:21:13,574 line:-2
that may incidentally activate
other gestures.


355
00:21:15,242 --> 00:21:17,144 line:-1
If the key is present and true,


356
00:21:17,211 --> 00:21:19,680 line:-2
your application
is out of the compatibility mode


357
00:21:19,746 --> 00:21:22,583 line:-1
and new features are enabled.


358
00:21:22,649 --> 00:21:26,153 line:-2
Clicks from pointing devices
are TouchType.indirectPointer,


359
00:21:26,220 --> 00:21:28,789 line:-2
allowing you to target
and modify functionality


360
00:21:28,856 --> 00:21:30,924 line:-1
for precision pointing devices.


361
00:21:31,925 --> 00:21:35,629 line:-2
Pinching and rotating on the trackpad
emits a new event type


362
00:21:35,696 --> 00:21:39,533 line:-2
directly from the input device:
EventType.transform.


363
00:21:39,600 --> 00:21:42,669 line:-2
This enables
precise pinch and rotate gestures


364
00:21:42,736 --> 00:21:45,339 line:-2
that won't incidentally activate
other recognizers.


365
00:21:47,207 --> 00:21:51,278 line:-2
With this key, you are fully entering
the new world of indirect input


366
00:21:51,345 --> 00:21:53,747 line:-1
on iPadOS and Mac Catalyst.


367
00:21:53,814 --> 00:21:56,717 line:-2
With that,
there are a few things to be aware of.


368
00:21:57,618 --> 00:22:01,355 line:-2
New event types like EventType.scroll
or EventType.transform


369
00:22:01,421 --> 00:22:03,156 line:-1
are not touch-based,


370
00:22:03,223 --> 00:22:07,294 line:-2
so you'll need to be careful
with touch-related gestureRecognizer API.


371
00:22:08,228 --> 00:22:12,466 line:-2
When UIPanGestureRecognizer
UIPinchGestureRecognizer


372
00:22:12,533 --> 00:22:16,803 line:-2
or UIRotationGestureRecognizer
are driven by these new event types,


373
00:22:16,870 --> 00:22:19,173 line:-1
numberOfTouches will return zero


374
00:22:19,239 --> 00:22:22,209 line:-2
and locationOfTouch:inView
may throw an exception.


375
00:22:23,610 --> 00:22:25,946 line:-1
Also be aware that any code you may have


376
00:22:26,013 --> 00:22:29,383 line:-2
in your shouldReceivetouch
delegate methods for these gestures


377
00:22:29,449 --> 00:22:32,719 line:-2
will not be run
when they're driven by these events.


378
00:22:32,786 --> 00:22:37,124 line:-2
After opting in to this key,
UIPinchGestureRecognizer


379
00:22:37,191 --> 00:22:41,562 line:-2
and UIRotationGestureRecognizer
are removed from their compatibility mode.


380
00:22:42,229 --> 00:22:45,232 line:-2
So any incidentally activated gestures
from that mode


381
00:22:45,299 --> 00:22:47,367 line:-1
will no longer be triggered.


382
00:22:47,434 --> 00:22:49,736 line:-1
In this new world of indirect input,


383
00:22:49,803 --> 00:22:52,940 line:-2
gestures respond
to multiple types of events.


384
00:22:53,006 --> 00:22:55,042 line:-1
Because of that, you may find it helpful


385
00:22:55,108 --> 00:22:59,112 line:-2
to detect which event
your gesture recognizer is responding to.


386
00:22:59,880 --> 00:23:03,750 line:-2
You can use the shouldReceive methods
we discussed earlier to help with that.


387
00:23:03,817 --> 00:23:06,053 line:-1
When responding to EventType.touches,


388
00:23:06,119 --> 00:23:10,824 line:-2
you can use API like numberOfTouches
or locationOfTouch:inView.


389
00:23:10,891 --> 00:23:14,595 line:-2
If you're responding to other events,
you should avoid those methods.


390
00:23:15,495 --> 00:23:18,732 line:-2
There are some simple things you can do
to make your app come alive


391
00:23:18,799 --> 00:23:21,068 line:-1
with trackpad and mouse input.


392
00:23:22,069 --> 00:23:25,272 line:-1
Enable scroll input for your pan gestures.


393
00:23:25,339 --> 00:23:28,809 line:-2
Respond to pointer movement
by hiding or revealing content.


394
00:23:30,410 --> 00:23:35,048 line:-2
Add the Info.plist key to your app
to gain the new TouchType and EventType,


395
00:23:35,115 --> 00:23:38,652 line:-2
allowing you to customize functionality
for pointer-based touches


396
00:23:38,719 --> 00:23:41,788 line:-2
and have precise pinch and rotate gestures
in your app.


397
00:23:43,190 --> 00:23:46,727 line:-2
Use new event properties
and gesture recognizer API


398
00:23:46,793 --> 00:23:49,463 line:-2
to delight your users
with alternate responses


399
00:23:49,530 --> 00:23:52,299 line:-1
to button presses and keyboard modifiers.


400
00:23:52,900 --> 00:23:56,904 line:-2
Thanks for watching this video.
I can't wait to try out your updated apps.

