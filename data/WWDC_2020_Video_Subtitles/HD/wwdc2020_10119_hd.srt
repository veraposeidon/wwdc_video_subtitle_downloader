1
00:00:03,804 --> 00:00:06,440 line:-1
Hello and welcome to WWDC.


2
00:00:08,609 --> 00:00:09,610 line:0
Hi, everyone.


3
00:00:09,676 --> 00:00:12,246 line:0
I'm Jacob,
and I'll be joined later by Kyle.


4
00:00:12,312 --> 00:00:16,783 line:0
We're so excited to show you SwiftUI,
a great way to build better apps, faster.


5
00:00:17,351 --> 00:00:19,653 line:-2
We think the best way
to learn about SwiftUI


6
00:00:19,720 --> 00:00:22,022 line:-1
is to see it in action by building an app.


7
00:00:22,523 --> 00:00:24,725 line:-1
Using SwiftUI feels like magic,


8
00:00:24,791 --> 00:00:27,594 line:-2
but to make it clear
that I don't have anything up my sleeves,


9
00:00:27,661 --> 00:00:31,365 line:-2
I want to go through the entire process
of creating an app in SwiftUI


10
00:00:31,431 --> 00:00:32,665 line:-1
starting from scratch.


11
00:00:33,200 --> 00:00:35,135 line:-2
So, what kind of an app
are we going to make?


12
00:00:35,202 --> 00:00:36,970 line:-1
Let me set the stage for you.


13
00:00:37,037 --> 00:00:39,873 line:-1
Kyle and I love to eat sandwiches.


14
00:00:39,940 --> 00:00:43,143 line:-2
So we've been keeping a list
of the best sandwiches we can find.


15
00:00:43,210 --> 00:00:45,012 line:-1
And we want to make an app for it.


16
00:00:45,846 --> 00:00:48,448 line:-1
Let's jump to Xcode and start building it.


17
00:00:49,283 --> 00:00:51,451 line:-1
I'll start by creating a new project.


18
00:00:54,154 --> 00:00:56,790 line:-1
And using the multi-platform app template.


19
00:00:58,158 --> 00:00:59,826 line:-1
And I'll call it "Sandwiches."


20
00:01:14,141 --> 00:01:15,642 line:-1
And here's our new project.


21
00:01:15,709 --> 00:01:17,911 line:-2
Xcode has started us off
with everything we need


22
00:01:17,978 --> 00:01:20,647 line:-1
for iOS and macOS versions of our app.


23
00:01:20,714 --> 00:01:24,084 line:-1
We have a group for iOS-specific assets


24
00:01:24,151 --> 00:01:26,153 line:-1
and a group for macOS-specific ones.


25
00:01:27,487 --> 00:01:30,157 line:-2
But most of our code
is in the shared group.


26
00:01:30,858 --> 00:01:34,161 line:-2
We have a file here
that has all of our app code.


27
00:01:34,228 --> 00:01:37,798 line:-2
And this may seem too short to be the code
that sets up our entire app,


28
00:01:37,865 --> 00:01:39,600 line:-1
but this is all we need.


29
00:01:39,666 --> 00:01:41,935 line:-2
We'll come back to this code
a little later.


30
00:01:42,002 --> 00:01:44,805 line:-2
For now, let's start with the code
for our app's view.


31
00:01:53,413 --> 00:01:56,016 line:-2
The left side of our editor
shows our code,


32
00:01:56,083 --> 00:02:00,487 line:-2
and the right side shows a canvas
with a visual representation of that code.


33
00:02:00,554 --> 00:02:04,725 line:-2
In SwiftUI,
view definitions are just Swift code,


34
00:02:04,791 --> 00:02:07,027 line:-2
which means that the canvas
and the code editor


35
00:02:07,094 --> 00:02:10,830 line:-2
are just different ways of viewing
and editing that same code.


36
00:02:10,898 --> 00:02:13,233 line:-1
If we select something in the canvas,


37
00:02:13,300 --> 00:02:16,370 line:-2
that selection is reflected
in the code as well.


38
00:02:16,436 --> 00:02:18,672 line:-1
And if you change something in the code...


39
00:02:20,607 --> 00:02:23,477 line:-2
that change is reflected
in the canvas as well.


40
00:02:23,544 --> 00:02:25,812 line:-1
They work together seamlessly


41
00:02:25,879 --> 00:02:29,016 line:-2
so that you can move between them
whenever you want.


42
00:02:29,082 --> 00:02:31,185 line:-2
Let me tell you a little more
about how it works.


43
00:02:31,885 --> 00:02:34,988 line:-2
The canvas shows us previews
of our view code,


44
00:02:35,055 --> 00:02:38,325 line:-2
and it even helps us edit
and learn about that code.


45
00:02:38,392 --> 00:02:41,695 line:-2
Xcode shows these previews
by compiling our real code


46
00:02:41,762 --> 00:02:44,064 line:-1
and running it to generate a result.


47
00:02:44,131 --> 00:02:46,166 line:-2
But one of my favorite things
about previews


48
00:02:46,233 --> 00:02:49,503 line:-2
is that they're also created
using SwiftUI code.


49
00:02:49,570 --> 00:02:54,875 line:-2
And later on, we'll see how that gives us
a lot of power to customize our previews.


50
00:02:54,942 --> 00:02:58,045 line:-2
Now, our app is going to show
a list of sandwiches.


51
00:02:58,111 --> 00:03:00,447 line:-1
So let's make the cell for our list.


52
00:03:00,514 --> 00:03:03,584 line:-2
I'm going to add another piece of text
under this one


53
00:03:03,650 --> 00:03:06,286 line:-2
to show more information
about each sandwich.


54
00:03:06,987 --> 00:03:09,323 line:-2
And I'm going to add it
from the library...


55
00:03:13,560 --> 00:03:16,096 line:-1
by just dragging it out onto my canvas.


56
00:03:17,364 --> 00:03:20,200 line:-1
And Xcode even shows me what will happen


57
00:03:20,267 --> 00:03:22,135 line:-1
when I drag it into different locations.


58
00:03:23,103 --> 00:03:27,441 line:-2
When I drop it, the preview updates
to show the text added,


59
00:03:27,508 --> 00:03:32,045 line:-2
but even better, Xcode has actually
edited my code to add that text.


60
00:03:33,113 --> 00:03:36,116 line:-2
Xcode has embedded these views
into a VStack


61
00:03:36,183 --> 00:03:38,218 line:-1
to get the layout that I want.


62
00:03:38,285 --> 00:03:40,254 line:-1
A VStack, or vertical stack,


63
00:03:40,320 --> 00:03:43,023 line:-2
is one of the common layout containers
in SwiftUI.


64
00:03:43,090 --> 00:03:44,658 line:-1
It lets you stack views vertically.


65
00:03:45,592 --> 00:03:49,296 line:-2
There's also an HStack
that lets you stack views horizontally.


66
00:03:50,831 --> 00:03:52,766 line:-1
And these stacks are containers.


67
00:03:52,833 --> 00:03:55,202 line:-2
I can place any views that I want
inside of them.


68
00:03:56,503 --> 00:04:00,774 line:-2
I'm going to replace this placeholder
with the ingredients of a sandwich.


69
00:04:01,375 --> 00:04:04,178 line:-1
For now, let's just use a hard-coded value.


70
00:04:08,415 --> 00:04:10,784 line:-1
Next, let's add an image next to our text.


71
00:04:11,518 --> 00:04:14,788 line:-2
I can make edits in the code
just as easily as in the editor,


72
00:04:14,855 --> 00:04:17,491 line:-2
so let's embed our view
in an HStack right over here.


73
00:04:18,458 --> 00:04:19,927 line:-1
I'll command-click on my view


74
00:04:20,694 --> 00:04:22,496 line:-1
and choose "Embed in HStack."


75
00:04:23,697 --> 00:04:25,933 line:-2
And Xcode has added the code
to do just that.


76
00:04:26,934 --> 00:04:29,469 line:-2
Now, I can just add an image
next to our VStack.


77
00:04:32,306 --> 00:04:34,074 line:-1
We'll add some assets in a bit,


78
00:04:34,141 --> 00:04:37,911 line:-2
but for now, I'll use an SF symbol image
to get things up and running.


79
00:04:40,647 --> 00:04:43,016 line:-2
And already,
we have a basic version of our cell.


80
00:04:43,584 --> 00:04:44,785 line:-1
Now let's style the cell.


81
00:04:45,485 --> 00:04:48,422 line:-2
I can command-click on a view
and inspect it


82
00:04:48,488 --> 00:04:50,591 line:-1
to see some properties about that view.


83
00:04:52,559 --> 00:04:54,394 line:-1
Let's change the alignment for our VStack.


84
00:04:57,097 --> 00:04:59,967 line:-2
And Xcode has updated my code
to show that value.


85
00:05:01,068 --> 00:05:03,403 line:-1
Now, let's inspect our ingredients text.


86
00:05:04,204 --> 00:05:06,039 line:-1
This time, let's use the canvas.


87
00:05:07,674 --> 00:05:12,045 line:-2
Pro tip: You can control-option-click
to go directly to the inspector.


88
00:05:13,981 --> 00:05:15,616 line:-1
I'll change to a smaller font.


89
00:05:16,617 --> 00:05:18,118 line:-1
Let's use Subheadline.


90
00:05:20,053 --> 00:05:22,856 line:-2
One of the great things
about Xcode editing my code


91
00:05:22,923 --> 00:05:25,759 line:-2
is that it helps me to learn
how to use SwiftUI.


92
00:05:25,826 --> 00:05:29,630 line:-2
I can now see the code
to set the font for some text.


93
00:05:30,330 --> 00:05:32,699 line:-2
We call these kinds of methods
"modifiers,"


94
00:05:32,766 --> 00:05:36,937 line:-2
and they're used in SwiftUI to customize
the way your views look or behave.


95
00:05:37,738 --> 00:05:40,207 line:-1
I'll add another modifier in code


96
00:05:40,274 --> 00:05:44,011 line:-2
to set the foreground color
to a secondary color.


97
00:05:45,412 --> 00:05:48,515 line:-2
And now that I have my cell,
let's put it into a list.


98
00:05:49,183 --> 00:05:53,854 line:-2
To do that, I'll command-click on my cell
and choose "Embed in List."


99
00:05:55,589 --> 00:05:59,359 line:-2
This wraps my cell in a list
and makes five iterations of that cell.


100
00:06:00,060 --> 00:06:02,329 line:-2
And this code is all I need
to show a list.


101
00:06:02,829 --> 00:06:06,033 line:-2
No delegates or data sources,
just views inside a list.


102
00:06:07,134 --> 00:06:09,570 line:-1
Next, let's hook this up to some data.


103
00:06:10,437 --> 00:06:14,308 line:-2
I'm going to drag in some assets
and a model file that I created earlier.


104
00:06:21,615 --> 00:06:24,351 line:-2
My model has a few fields of information
that we'll use.


105
00:06:25,052 --> 00:06:27,120 line:-1
And to use this in a list in SwiftUI,


106
00:06:27,187 --> 00:06:29,523 line:-2
I just need to
make this type Identifiable.


107
00:06:31,425 --> 00:06:34,494 line:-2
This lets the list know
when new items are coming and going.


108
00:06:35,128 --> 00:06:37,865 line:-2
We already have an 'id' property,
which is all we need.


109
00:06:39,066 --> 00:06:41,835 line:-2
This model file also includes
some test data


110
00:06:42,736 --> 00:06:44,505 line:-1
that I can use for debugging my app.


111
00:06:45,706 --> 00:06:49,142 line:-2
Now, let's go back to our view
and pass in our data.


112
00:06:50,911 --> 00:06:53,747 line:-2
I'll add a property on my view
for the sandwiches.


113
00:07:00,554 --> 00:07:02,589 line:-1
And one of the great things about previews


114
00:07:02,656 --> 00:07:04,491 line:-1
is that they can use their own test data.


115
00:07:05,192 --> 00:07:08,028 line:-2
So I'll just pass in our test data
right here.


116
00:07:10,898 --> 00:07:13,567 line:-2
You may notice this banner
that's appeared above our preview.


117
00:07:14,635 --> 00:07:18,605 line:-2
When I make larger changes to my types,
like adding the sandwich's property,


118
00:07:18,672 --> 00:07:23,277 line:-2
Xcode pauses the previews until I'm ready
to have them resume updating.


119
00:07:23,343 --> 00:07:27,181 line:-2
I can click this button
or press command-option-P to resume.


120
00:07:28,916 --> 00:07:31,285 line:-2
Next, let's use our data
to drive the list.


121
00:07:32,452 --> 00:07:34,521 line:-1
We'll pass the sandwiches to the list...


122
00:07:37,758 --> 00:07:40,827 line:-2
and we'll update our text
to show the sandwich's name.


123
00:07:41,995 --> 00:07:44,298 line:-2
And we'll show
the correct number of ingredients.


124
00:07:47,801 --> 00:07:49,336 line:-1
And now that we have real images,


125
00:07:49,403 --> 00:07:51,805 line:-2
let's use our sandwich's thumbnail
for the image.


126
00:08:01,748 --> 00:08:04,585 line:-2
You may have noticed
a subtle change in our cells.


127
00:08:04,651 --> 00:08:07,588 line:-2
When we started,
they were the standard 44 points tall.


128
00:08:08,155 --> 00:08:10,324 line:-2
But when we changed
to these larger images,


129
00:08:10,390 --> 00:08:13,727 line:-2
the cells automatically expanded
to make sure those images fit


130
00:08:13,794 --> 00:08:15,162 line:-1
without any extra work.


131
00:08:16,230 --> 00:08:18,232 line:-2
And now that I have
those images in context,


132
00:08:18,298 --> 00:08:19,399 line:-1
they look a little sharp.


133
00:08:20,167 --> 00:08:23,871 line:-2
Let's apply a corner radius to our images
using another modifier.


134
00:08:25,072 --> 00:08:27,407 line:-2
If you're not sure
what modifiers are available,


135
00:08:27,474 --> 00:08:31,211 line:-2
you can view and filter a list of them
in the Xcode library right here.


136
00:08:32,346 --> 00:08:34,715 line:-1
We'll find the corner radius modifier,


137
00:08:34,780 --> 00:08:36,950 line:-1
and we can drag it onto our canvas.


138
00:08:38,118 --> 00:08:40,453 line:-2
Notice that for views
that are in our list cell,


139
00:08:41,087 --> 00:08:44,358 line:-2
Xcode even knows that these cells
share the same definition


140
00:08:44,424 --> 00:08:46,760 line:-2
so this modifier
will apply to all of them.


141
00:08:47,995 --> 00:08:49,496 line:-1
Let's drop it onto our image...


142
00:08:50,564 --> 00:08:51,565 line:-1
and tweak the value.


143
00:08:53,734 --> 00:08:56,303 line:-2
Now that our cells and list
are looking good,


144
00:08:56,370 --> 00:08:58,972 line:-2
the next thing we need
is to be able to tap on a cell


145
00:08:59,039 --> 00:09:01,275 line:-1
to see more details about a sandwich.


146
00:09:02,509 --> 00:09:05,546 line:-2
To support that,
let's wrap our list in a NavigationView.


147
00:09:11,818 --> 00:09:16,056 line:-2
A NavigationView enables navigating
between different parts of your app.


148
00:09:16,123 --> 00:09:18,592 line:-1
On an iPhone, it shows a navigation bar


149
00:09:18,659 --> 00:09:21,895 line:-1
And allows pushing onto a navigation stack.


150
00:09:21,962 --> 00:09:25,432 line:0
Let's also set the navigationTitle
for our view


151
00:09:25,499 --> 00:09:27,434 line:0
to show "Sandwiches" in the bar.


152
00:09:29,603 --> 00:09:32,639 line:-2
Then I'll set up our cell
to push onto the stack.


153
00:09:33,440 --> 00:09:36,944 line:-2
To do that, we can wrap our cell's content
in a NavigationLink.


154
00:09:40,714 --> 00:09:44,384 line:-2
A NavigationLink
takes a destination to push.


155
00:09:44,451 --> 00:09:46,920 line:-1
For now, we'll just use some text


156
00:09:46,987 --> 00:09:48,555 line:-1
that shows the sandwich's name,


157
00:09:49,823 --> 00:09:53,260 line:-2
and then we'll put our cell
as the contents of the NavigationLink.


158
00:09:57,531 --> 00:10:00,033 line:-2
And you'll see that the UI
has automatically updated


159
00:10:00,100 --> 00:10:02,870 line:-2
to show these detail indicators
in all of the cells.


160
00:10:04,104 --> 00:10:06,673 line:-2
SwiftUI automatically handles
details like this


161
00:10:06,740 --> 00:10:09,076 line:-1
so that our UI looks right by default.


162
00:10:09,843 --> 00:10:12,312 line:-2
Let's also check
that the cell behaves correctly.


163
00:10:12,379 --> 00:10:14,181 line:-1
And previews are great here as well.


164
00:10:14,715 --> 00:10:17,150 line:-1
I can click the play button on my preview,


165
00:10:17,217 --> 00:10:18,285 line:-1
which takes me live.


166
00:10:19,386 --> 00:10:22,723 line:-2
This lets me interact with my real code
right here in the canvas.


167
00:10:23,857 --> 00:10:28,762 line:-2
So I can tap on cells to make sure
that they push and pop as expected.


168
00:10:30,464 --> 00:10:33,800 line:-2
And if I swipe to pop,
you'll notice an advanced behavior


169
00:10:33,867 --> 00:10:36,870 line:-1
that SwiftUI has given me automatically.


170
00:10:36,937 --> 00:10:41,141 line:-2
Our cell stays highlighted
and interactively unhighlights as we swipe


171
00:10:41,208 --> 00:10:42,376 line:-1
with no extra work.


172
00:10:46,446 --> 00:10:48,649 line:-2
One last change
I'd like to make to this list


173
00:10:48,715 --> 00:10:51,418 line:-2
is showing the number of sandwiches
in a row in the list.


174
00:10:52,186 --> 00:10:54,121 line:-2
But our view code
is a little bit large now.


175
00:10:54,655 --> 00:10:56,990 line:-2
And I don't want to end up
with a single massive view.


176
00:10:57,491 --> 00:11:00,194 line:-2
So let's factor the cell out
to be its own view


177
00:11:00,260 --> 00:11:01,895 line:-1
to get some separation of concerns.


178
00:11:02,963 --> 00:11:05,799 line:-2
Xcode helps me do this
in one simple operation.


179
00:11:05,866 --> 00:11:08,635 line:-2
I can just command-click
the view that I want...


180
00:11:09,837 --> 00:11:11,505 line:-1
and choose "Extract Subview."


181
00:11:13,173 --> 00:11:16,343 line:-2
All of the view code gets moved
into this new view,


182
00:11:16,410 --> 00:11:18,011 line:-1
and I even get to choose its name.


183
00:11:18,645 --> 00:11:20,280 line:-1
Let's call it "SandwichCell."


184
00:11:22,015 --> 00:11:24,618 line:-2
Then I'll just add a property
for the sandwich...


185
00:11:27,821 --> 00:11:29,623 line:-1
and pass that sandwich in.


186
00:11:31,658 --> 00:11:34,161 line:-1
This is a fantastic workflow improvement.


187
00:11:34,228 --> 00:11:36,930 line:-2
And with SwiftUI,
views are very lightweight,


188
00:11:36,997 --> 00:11:39,333 line:-2
so you don't have to worry about
creating extra views


189
00:11:39,399 --> 00:11:41,768 line:-2
to better encapsulate
or separate your logic.


190
00:11:42,936 --> 00:11:45,105 line:-1
Now that our list code is slimmed down,


191
00:11:45,172 --> 00:11:47,808 line:-2
let's add the row
with the number of sandwiches.


192
00:11:49,109 --> 00:11:51,678 line:-1
Right now, we're using a single collection


193
00:11:51,745 --> 00:11:53,680 line:-1
to drive our entire list,


194
00:11:53,747 --> 00:11:56,316 line:-2
which is great for lists
that are purely data-driven.


195
00:11:57,484 --> 00:12:00,220 line:-2
But when I need more,
SwiftUI also lets me mix


196
00:12:00,287 --> 00:12:03,857 line:-2
static and dynamic content
in lists and other containers.


197
00:12:04,658 --> 00:12:07,127 line:-2
I can replace passing this collection
to the list


198
00:12:07,628 --> 00:12:09,129 line:-1
with a ForEach,


199
00:12:10,430 --> 00:12:13,367 line:-2
which creates a view
for each item in the collection.


200
00:12:15,235 --> 00:12:19,039 line:-2
Now I can add a static element
right alongside this data-driven one.


201
00:12:19,706 --> 00:12:22,276 line:-2
I'll just add another text
below this ForEach


202
00:12:23,343 --> 00:12:25,612 line:-1
and have it show the number of sandwiches.


203
00:12:30,083 --> 00:12:33,253 line:-2
And let's change its foreground color
to be secondary as well.


204
00:12:37,324 --> 00:12:38,926 line:-1
Let's also show the text centered.


205
00:12:39,660 --> 00:12:42,629 line:-2
To do that, we can embed the text
in an HStack...


206
00:12:44,164 --> 00:12:45,399 line:-1
and add some spacers.


207
00:12:47,234 --> 00:12:50,671 line:-2
A Spacer is a common layout element
in SwiftUI.


208
00:12:51,438 --> 00:12:54,208 line:-2
It behaves like a flexible space
in a toolbar,


209
00:12:54,274 --> 00:12:57,110 line:-2
expanding to fill
whatever space is available.


210
00:12:57,678 --> 00:13:01,081 line:-2
So these two spacers
divide up any available space,


211
00:13:01,148 --> 00:13:02,649 line:-1
which centers the text.


212
00:13:04,184 --> 00:13:06,220 line:-1
Next, let's build our detail view.


213
00:13:07,087 --> 00:13:08,355 line:-1
I'll create a new view


214
00:13:09,423 --> 00:13:11,091 line:-1
using the SwiftUI View template...


215
00:13:12,459 --> 00:13:13,594 line:-1
called "SandwichDetail."


216
00:13:18,699 --> 00:13:20,934 line:-1
Xcode automatically gave me a view struct


217
00:13:21,502 --> 00:13:23,370 line:-1
and the preview code to create it.


218
00:13:24,805 --> 00:13:28,375 line:-2
I want this detail view to show
more information about my sandwich,


219
00:13:28,442 --> 00:13:30,444 line:-1
so I'll pass that in as an input.


220
00:13:34,848 --> 00:13:37,518 line:-2
And just like before,
I use the preview code


221
00:13:37,584 --> 00:13:40,821 line:-2
to set up a version of this view
that uses our test data.


222
00:13:44,892 --> 00:13:47,261 line:-2
Now, to build our view,
I'll just use an image


223
00:13:47,327 --> 00:13:49,162 line:-1
with the sandwich's image name.


224
00:13:55,903 --> 00:13:59,339 line:-2
It's showing our image,
but that image is too large for our view.


225
00:14:00,140 --> 00:14:04,611 line:-2
By default, SwiftUI shows all images
at the size of their contents


226
00:14:04,678 --> 00:14:08,448 line:-2
to prevent visual artifacts
from scaling the image up or down.


227
00:14:09,116 --> 00:14:13,086 line:-2
But for photos like this one,
we want to be able to resize them down.


228
00:14:13,153 --> 00:14:16,890 line:-2
And we can use an image-specific
resizable modifier to specify that.


229
00:14:20,827 --> 00:14:22,596 line:-1
Now it's the size of our screen,


230
00:14:22,663 --> 00:14:25,832 line:-2
but I really want to maintain
the image's original aspect ratio.


231
00:14:26,600 --> 00:14:28,468 line:-1
I can do that with another modifier


232
00:14:29,136 --> 00:14:30,604 line:-1
to set the aspect ratio.


233
00:14:34,107 --> 00:14:36,210 line:-1
And this lets me choose between "fill,"


234
00:14:36,276 --> 00:14:39,112 line:-2
which expands the image
to take up its entire frame,


235
00:14:40,147 --> 00:14:41,248 line:-1
or "fit,"


236
00:14:42,349 --> 00:14:44,918 line:-2
which makes sure that the image fits
within the frame.


237
00:14:45,886 --> 00:14:48,589 line:-2
And previews let me really
easily see and understand


238
00:14:48,655 --> 00:14:49,923 line:-1
the difference between these.


239
00:14:50,624 --> 00:14:53,794 line:-2
For now, let's use "fit,"
so we can see our full image.


240
00:14:55,395 --> 00:14:56,964 line:-1
Now, let's go back to our list


241
00:14:57,831 --> 00:15:01,802 line:-2
and update our cell to push
our new detail view when we tap on it.


242
00:15:03,537 --> 00:15:05,606 line:-1
We'll create our SandwichDetail...


243
00:15:08,175 --> 00:15:10,177 line:-1
and pass in the current sandwich.


244
00:15:13,647 --> 00:15:15,883 line:-1
I'll switch my preview back to live mode.


245
00:15:16,650 --> 00:15:20,153 line:-2
And now I can tap on the cell
to see my image.


246
00:15:21,421 --> 00:15:23,423 line:-1
But now that I'm previewing it here,


247
00:15:23,490 --> 00:15:26,293 line:-2
I can see that I forgot to set its title
in the navigation bar.


248
00:15:27,194 --> 00:15:29,596 line:-2
Let's go back to our detail view
and fix that.


249
00:15:33,000 --> 00:15:35,636 line:-2
I'll just add
the same navigationTitle here


250
00:15:35,702 --> 00:15:38,639 line:-1
to set my title to be the sandwich's name.


251
00:15:41,775 --> 00:15:45,345 line:-2
But in the preview I have here,
we're only seeing the view itself,


252
00:15:45,412 --> 00:15:48,015 line:-2
and I'd really like to be able
to quickly verify my change.


253
00:15:48,782 --> 00:15:52,352 line:-2
Well, since previews have all the power
of SwiftUI's views available,


254
00:15:52,419 --> 00:15:53,921 line:-1
we can do just that.


255
00:15:54,721 --> 00:15:57,558 line:-2
I can set up my preview
to be in a NavigationView


256
00:15:58,225 --> 00:16:01,028 line:-2
just like I would anywhere else
in my SwiftUI code.


257
00:16:05,365 --> 00:16:08,268 line:-2
Now, my view's preview
has a navigation bar,


258
00:16:08,335 --> 00:16:10,571 line:-1
and I can see my title right there.


259
00:16:11,605 --> 00:16:13,540 line:-1
Now, when I'm picking a good sandwich,


260
00:16:13,607 --> 00:16:15,576 line:-2
there's one thing
that's very important to me.


261
00:16:16,109 --> 00:16:18,846 line:-2
The sandwich has to have
just the right amount of sauce.


262
00:16:18,912 --> 00:16:20,981 line:-1
No sauce, and it's too dry.


263
00:16:21,048 --> 00:16:22,850 line:-1
Too much, and it's drowning in sauce.


264
00:16:23,817 --> 00:16:26,253 line:-2
I can see that there's some sauce
on this sandwich,


265
00:16:26,320 --> 00:16:28,355 line:-2
but I want to make sure
that it's not too much.


266
00:16:29,223 --> 00:16:31,959 line:-2
Now, if this had an aspect ratio
of "fill"...


267
00:16:33,060 --> 00:16:34,962 line:-1
I could see the sandwich up close.


268
00:16:35,028 --> 00:16:35,996 line:-1
Looks like a good one.


269
00:16:37,064 --> 00:16:39,900 line:-2
What I'd really like
is to be able to change back and forth


270
00:16:39,967 --> 00:16:41,835 line:-1
between "fill," to see up close,


271
00:16:42,503 --> 00:16:44,571 line:-1
and "fit," to see the whole sandwich.


272
00:16:45,305 --> 00:16:48,642 line:-2
But how do I dynamically change
this aspect ratio's content mode


273
00:16:48,709 --> 00:16:50,477 line:-1
while the app is running?


274
00:16:50,544 --> 00:16:52,379 line:-1
To understand how to do this,


275
00:16:52,446 --> 00:16:55,215 line:-2
we really need to know more
about how views work in SwiftUI


276
00:16:55,282 --> 00:16:56,517 line:-1
and why.


277
00:16:56,583 --> 00:16:59,586 line:-2
I'm going to turn things over to Kyle
to talk about that.


278
00:17:00,220 --> 00:17:02,222 line:-1
Thanks, Jacob. Hi.


279
00:17:02,289 --> 00:17:05,125 line:-1
I'm Kyle, a member of the SwiftUI team.


280
00:17:06,026 --> 00:17:09,029 line:-2
SwiftUI might be a little different
from what you're used to,


281
00:17:09,096 --> 00:17:11,330 line:-1
so, before we go any further,


282
00:17:11,397 --> 00:17:15,135 line:-2
we're gonna step back and spend some time
talking about the way views work.


283
00:17:15,969 --> 00:17:18,972 line:-2
We left off implementing
the SandwichDetail view.


284
00:17:20,641 --> 00:17:25,378 line:-2
Note that in SwiftUI, a view is a struct
that conforms to the view protocol,


285
00:17:25,444 --> 00:17:28,182 line:-2
rather than a class
that inherits from a base class


286
00:17:28,248 --> 00:17:29,783 line:-1
like UIView.


287
00:17:29,850 --> 00:17:33,353 line:-2
This means your view doesn't inherit
any stored properties.


288
00:17:33,420 --> 00:17:36,757 line:-2
It's allocated on the stack,
and it's passed by value.


289
00:17:38,225 --> 00:17:41,495 line:-1
SandwichDetail just stores a sandwich,


290
00:17:41,562 --> 00:17:44,298 line:-1
so it's the size and weight of a sandwich,


291
00:17:44,364 --> 00:17:47,267 line:-2
no additional allocation
or reference counting.


292
00:17:49,203 --> 00:17:53,440 line:-2
Behind the scenes, SwiftUI
aggressively collapses your view hierarchy


293
00:17:53,507 --> 00:17:55,576 line:-2
into an efficient data structure
for rendering.


294
00:17:56,176 --> 00:17:58,879 line:-1
Because of this, we make liberal use


295
00:17:58,946 --> 00:18:01,849 line:-1
of small, single-purpose views in SwiftUI.


296
00:18:02,282 --> 00:18:03,250 line:-1
And you should too.


297
00:18:05,152 --> 00:18:09,323 line:-2
What I want you to take away from this
is that views are incredibly lightweight


298
00:18:09,389 --> 00:18:10,390 line:-1
in SwiftUI.


299
00:18:10,958 --> 00:18:12,759 line:-1
As Jacob mentioned earlier,


300
00:18:12,826 --> 00:18:16,230 line:-2
you should never hesitate
to re-factor your SwiftUI code


301
00:18:16,296 --> 00:18:20,100 line:-2
because extracting a subview
has virtually no runtime overhead.


302
00:18:20,667 --> 00:18:24,705 line:-2
A view in SwiftUI
and a view in a traditional UI framework


303
00:18:24,771 --> 00:18:27,207 line:-1
fulfill the same primary role:


304
00:18:27,274 --> 00:18:29,776 line:-1
they define a piece of UI.


305
00:18:30,577 --> 00:18:35,082 line:-2
The view protocol only requires
a single property: body.


306
00:18:35,148 --> 00:18:37,117 line:-1
Which is itself a view.


307
00:18:38,819 --> 00:18:43,056 line:-2
You build bigger views
by composing together smaller views.


308
00:18:43,123 --> 00:18:46,727 line:-2
We built the SandwichDetail view
by composing together


309
00:18:46,793 --> 00:18:50,397 line:-2
Image, a view of an image
at its native resolution...


310
00:18:51,765 --> 00:18:55,903 line:-2
resizable, a view that stretches an image
in either dimension...


311
00:18:57,104 --> 00:18:58,772 line:-1
and aspectRatio,


312
00:18:58,839 --> 00:19:01,542 line:-2
a view that proportionally
scales its child.


313
00:19:02,809 --> 00:19:06,580 line:-2
The rendering of any view you might build,
like SandwichDetail,


314
00:19:06,647 --> 00:19:08,649 line:-1
is just the rendering of its body.


315
00:19:10,050 --> 00:19:13,086 line:-2
If you set a break point
in the implementation of body,


316
00:19:13,954 --> 00:19:15,322 line:-1
and the debugger stops there,


317
00:19:16,123 --> 00:19:20,027 line:-2
its means the framework has decided
it needs a fresh rendering of your view.


318
00:19:21,195 --> 00:19:22,196 line:-1
Ta-da!


319
00:19:22,796 --> 00:19:25,599 line:-2
The framework knows
when to fetch a new rendering


320
00:19:25,666 --> 00:19:29,036 line:-2
because in addition
to defining a piece of UI,


321
00:19:29,102 --> 00:19:31,471 line:-1
a view defines its dependencies.


322
00:19:33,073 --> 00:19:35,309 line:-1
Let's extend SandwichDetail


323
00:19:35,375 --> 00:19:37,377 line:-1
to allow the user to tap,


324
00:19:37,444 --> 00:19:42,182 line:-2
to toggle between fitting into
and filling up the available space.


325
00:19:44,852 --> 00:19:47,454 line:-2
The first thing we'll need
is a state variable


326
00:19:47,521 --> 00:19:50,424 line:-2
that says whether or not
the image is zoomed.


327
00:19:51,825 --> 00:19:54,628 line:-2
When SwiftUI sees a view
with a state variable,


328
00:19:54,695 --> 00:19:57,698 line:-2
it allocates persistent storage
for that variable


329
00:19:57,764 --> 00:19:59,333 line:-1
on the view's behalf.


330
00:20:01,869 --> 00:20:05,539 line:-2
If we decide to fill or fit
based on that state variable,


331
00:20:06,440 --> 00:20:09,776 line:-2
we've got a view that renders like this
when it's zoomed


332
00:20:09,843 --> 00:20:12,012 line:-1
and like this when it isn't.


333
00:20:13,514 --> 00:20:15,849 line:-1
Now, all we need is a tap gesture


334
00:20:15,916 --> 00:20:19,720 line:-2
to toggle back and forth
between the two states.


335
00:20:19,786 --> 00:20:22,956 line:-2
Then on tap,
the image will zoom to fill...


336
00:20:23,991 --> 00:20:25,659 line:-1
and shrink to fit.


337
00:20:27,861 --> 00:20:30,497 line:-2
So, what's actually happening here
when we tap?


338
00:20:32,466 --> 00:20:35,169 line:-2
One of the special properties
of state variables


339
00:20:35,235 --> 00:20:38,939 line:-2
is that SwiftUI can observe
when they're read and written.


340
00:20:39,006 --> 00:20:43,277 line:-2
Because SwiftUI knows
that zoomed here was read in body,


341
00:20:43,343 --> 00:20:46,113 line:-2
it knows that the view's rendering
depends on it.


342
00:20:46,180 --> 00:20:47,214 line:-1
Which means...


343
00:20:48,549 --> 00:20:51,552 line:-2
when the variable changes,
the framework is going to ask


344
00:20:51,618 --> 00:20:53,153 line:-1
for the body again,


345
00:20:53,220 --> 00:20:55,189 line:-1
using that new state value


346
00:20:55,255 --> 00:20:56,823 line:-1
so it can refresh the rendering,


347
00:20:57,891 --> 00:21:00,194 line:-1
this time with a different content mode.


348
00:21:00,928 --> 00:21:04,498 line:-2
Traditional UI frameworks don't
distinguish between state variables


349
00:21:04,565 --> 00:21:06,733 line:-1
and plain old properties.


350
00:21:06,800 --> 00:21:09,937 line:-2
However, I found the distinction
to be incredibly clarifying.


351
00:21:10,537 --> 00:21:14,875 line:-2
In SwiftUI, every possible state
your UI might find itself in--


352
00:21:15,976 --> 00:21:17,511 line:-1
the offset of a scroll view,


353
00:21:18,478 --> 00:21:20,447 line:-1
the highlightness of a button,


354
00:21:21,048 --> 00:21:23,417 line:-1
the contents of a navigation stack--


355
00:21:24,451 --> 00:21:27,588 line:-2
is derived from an authoritative
piece of data


356
00:21:27,654 --> 00:21:30,624 line:-1
often called "a source of truth."


357
00:21:31,792 --> 00:21:35,395 line:-2
Collectively,
your state variables and your model


358
00:21:35,462 --> 00:21:38,465 line:-2
constitute the source of truth
for your entire app.


359
00:21:40,434 --> 00:21:44,838 line:-2
Earlier I mentioned that this call
to aspectRatio makes a view.


360
00:21:46,306 --> 00:21:48,208 line:-1
Its definition looks something like this,


361
00:21:48,775 --> 00:21:52,346 line:-2
where contentMode
is a plain old Swift property.


362
00:21:53,647 --> 00:21:56,149 line:-1
You can neatly classify every property


363
00:21:56,216 --> 00:21:59,253 line:-2
as either a source of truth
or a derived value.


364
00:22:00,721 --> 00:22:03,957 line:-2
The zoomed state variable
is a source of truth.


365
00:22:05,392 --> 00:22:08,462 line:-2
The contentMode property
is derived from it.


366
00:22:09,830 --> 00:22:14,935 line:-2
Recall, SwiftUI can observe
when state variables are read and written.


367
00:22:15,002 --> 00:22:18,605 line:-2
So when one changes,
it knows which renderings to refresh.


368
00:22:20,407 --> 00:22:24,178 line:-2
The framework refreshes a rendering
by asking for a new body,


369
00:22:24,645 --> 00:22:27,414 line:-2
making a new aspectRatio view
from scratch,


370
00:22:27,481 --> 00:22:30,984 line:-2
thereby overriding the contentMode
and any other stored properties.


371
00:22:33,086 --> 00:22:36,223 line:-2
This is the mechanism
by which all derived values


372
00:22:36,290 --> 00:22:38,625 line:-1
are kept up-to-date in SwiftUI.


373
00:22:40,827 --> 00:22:45,199 line:-2
We've seen that every state variable
is a read-write source of truth...


374
00:22:46,466 --> 00:22:50,904 line:-2
and that every plain old property
is a read-only derived value.


375
00:22:51,638 --> 00:22:53,774 line:-2
We're not going to see an example
in this talk,


376
00:22:53,841 --> 00:22:56,410 line:-2
but SwiftUI invents a tool
called "binding"


377
00:22:56,476 --> 00:22:59,346 line:-1
for passing read-write derived values.


378
00:23:00,280 --> 00:23:02,783 line:-1
And technically, any constant can serve


379
00:23:02,850 --> 00:23:05,485 line:-2
as a perfectly good
read-only source of truth.


380
00:23:06,153 --> 00:23:09,223 line:-2
The test data driving our previews
is an example of this.


381
00:23:11,058 --> 00:23:13,627 line:-2
Lastly, I mentioned earlier
that collectively,


382
00:23:13,694 --> 00:23:17,664 line:-2
your state variables and your model
constitute the source of truth


383
00:23:17,731 --> 00:23:19,032 line:-1
of your entire app.


384
00:23:19,466 --> 00:23:22,736 line:-2
Later on, we'll see Jacob use
observable objects


385
00:23:22,803 --> 00:23:26,640 line:-2
to teach SwiftUI how to observe changes
to a model object.


386
00:23:28,775 --> 00:23:31,144 line:-2
Don't worry if the difference
between these primitives


387
00:23:31,211 --> 00:23:33,113 line:-1
isn't crystal clear to you yet.


388
00:23:34,248 --> 00:23:37,284 line:-2
We've got an entire session dedicated
to developing your instincts


389
00:23:37,351 --> 00:23:41,054 line:-2
around when to use which
of these data flow primitives.


390
00:23:41,121 --> 00:23:42,523 line:-1
Okay.


391
00:23:42,589 --> 00:23:44,725 line:-1
Let's just step back and take stock here.


392
00:23:45,492 --> 00:23:48,395 line:-2
What we've seen is really different
from what you do


393
00:23:48,462 --> 00:23:50,330 line:-1
in a traditional UI framework,


394
00:23:50,397 --> 00:23:52,533 line:-1
where the views themselves persist


395
00:23:52,599 --> 00:23:55,969 line:-2
and you try your hardest to keep them
all up-to-date and consistent.


396
00:23:57,437 --> 00:24:01,642 line:-2
You may not think about it in these terms
when you use a traditional UI framework,


397
00:24:02,442 --> 00:24:05,379 line:-2
but every time a view
reads a piece of data,


398
00:24:05,445 --> 00:24:07,814 line:-1
it's creating an implicit dependency.


399
00:24:08,682 --> 00:24:12,152 line:-2
It's a dependency
because when that data changes,


400
00:24:12,219 --> 00:24:15,222 line:-2
the view needs to update
to reflect the new value.


401
00:24:16,857 --> 00:24:19,459 line:-1
When it fails to, that's a bug.


402
00:24:20,394 --> 00:24:24,865 line:-2
SwiftUI automatically manages dependencies
on your behalf,


403
00:24:24,932 --> 00:24:28,135 line:-1
recomputing the appropriate derived values


404
00:24:28,202 --> 00:24:31,038 line:-1
so this never happens again.


405
00:24:31,839 --> 00:24:35,409 line:-2
Of course, we don't just manage
a single dependency at a time.


406
00:24:36,476 --> 00:24:40,013 line:-2
The UIs we work on
are big and complicated.


407
00:24:40,581 --> 00:24:43,116 line:-2
When it comes to how much
you have to hold in your head


408
00:24:43,183 --> 00:24:46,320 line:-1
and how easy it is to make a mistake,


409
00:24:46,386 --> 00:24:49,223 line:-2
the way we manually manage
dependencies today


410
00:24:49,289 --> 00:24:50,357 line:-1
is really hard.


411
00:24:51,124 --> 00:24:52,926 line:-1
Despite my best efforts,


412
00:24:52,993 --> 00:24:56,563 line:-2
every update to every app
I've ever shipped


413
00:24:56,630 --> 00:24:58,365 line:-1
has had UI bugs.


414
00:24:59,166 --> 00:25:02,402 line:-1
Every one of these lines is a dependency.


415
00:25:03,837 --> 00:25:06,740 line:-1
And even after you understand all of them,


416
00:25:06,807 --> 00:25:10,777 line:-2
you still have to make sure
that your UI is in a consistent state


417
00:25:10,844 --> 00:25:15,015 line:-2
across all possible orderings
of event handler callbacks.


418
00:25:17,351 --> 00:25:18,952 line:-1
To clarify what I mean by that,


419
00:25:19,019 --> 00:25:22,589 line:-2
we're going to look at a bug
in an old version of the Sandwiches app,


420
00:25:22,656 --> 00:25:24,892 line:-1
which was implemented in UIKit.


421
00:25:24,958 --> 00:25:26,994 line:-2
Here's a sketch
of the view controller code.


422
00:25:27,694 --> 00:25:31,365 line:-2
When you zoomed in,
it had a snazzy enhance button.


423
00:25:32,699 --> 00:25:37,371 line:-2
So, if Jacob ever ended up
with a low-resolution image like this one,


424
00:25:37,437 --> 00:25:41,341 line:-2
he could still verify the sandwich
included a healthy dose of sauce.


425
00:25:43,477 --> 00:25:46,880 line:-2
Tapping the button would dispatch
a machine-learning operation


426
00:25:46,947 --> 00:25:49,750 line:-2
on a background thread
to enhance the image.


427
00:25:51,118 --> 00:25:52,286 line:-1
Ah, that's better.


428
00:25:52,352 --> 00:25:55,455 line:-1
I think I spy some spicy brown mustard.


429
00:25:56,056 --> 00:25:57,291 line:-1
There was only one problem.


430
00:25:58,392 --> 00:26:01,028 line:-2
We had a report
of a stray activity indicator


431
00:26:01,094 --> 00:26:02,930 line:-1
that never stopped spinning.


432
00:26:03,997 --> 00:26:07,634 line:-2
The bug was caused
by this unexpected ordering of events.


433
00:26:09,870 --> 00:26:11,772 line:-1
These kinds of mistakes are easy to make


434
00:26:11,839 --> 00:26:15,709 line:-2
when you mutate your subviews
directly in event handler callbacks


435
00:26:15,776 --> 00:26:20,247 line:-2
rather than updating a source of truth
and deriving your UI from that.


436
00:26:21,515 --> 00:26:24,751 line:-2
This is because we can't help
but code to the happy paths


437
00:26:24,818 --> 00:26:26,787 line:-1
that come readily to mind


438
00:26:26,854 --> 00:26:29,356 line:-1
and overlook the unhappy ones that don't.


439
00:26:30,490 --> 00:26:34,261 line:-2
The problem is,
as the number of events increases,


440
00:26:34,328 --> 00:26:37,231 line:-1
the number of unhappy paths explodes.


441
00:26:38,131 --> 00:26:40,300 line:-1
Assume we get all four events.


442
00:26:40,367 --> 00:26:42,636 line:-2
How many different possible orderings
are there?


443
00:26:42,703 --> 00:26:45,772 line:-1
There are actually 24 different orders


444
00:26:45,839 --> 00:26:48,509 line:-2
any four event handlers
could be called in.


445
00:26:49,510 --> 00:26:51,812 line:-1
In practice, it's even worse than this


446
00:26:51,879 --> 00:26:54,848 line:-2
because each of these events
can occur more than once.


447
00:26:55,516 --> 00:26:58,552 line:-2
Say, for example,
a user is mashing the enhance button.


448
00:26:58,619 --> 00:27:02,389 line:-2
The challenge of managing this complexity
should be familiar to anyone


449
00:27:02,456 --> 00:27:05,092 line:-2
who has tried to juggle
asynchronous callbacks


450
00:27:05,158 --> 00:27:07,528 line:-1
or implement interruptible animations.


451
00:27:07,594 --> 00:27:11,632 line:-2
These completion handlers can fire
at all kinds of unexpected times.


452
00:27:13,600 --> 00:27:18,605 line:-2
If I could tell myself from five years ago
one thing about my job,


453
00:27:18,672 --> 00:27:21,475 line:-1
it would be that UI programming is hard.


454
00:27:22,476 --> 00:27:25,646 line:-2
No one pretends synchronizing
multi-threaded code is easy.


455
00:27:26,180 --> 00:27:28,282 line:-1
It's taken me months to shake out the bugs


456
00:27:28,348 --> 00:27:30,951 line:-2
in some of the multi-threaded code
I've written.


457
00:27:31,018 --> 00:27:35,355 line:-2
And even then, I couldn't be
100% confident in its correctness.


458
00:27:36,023 --> 00:27:38,825 line:-2
A lot of UI code
is actually just like that.


459
00:27:39,560 --> 00:27:41,295 line:-1
I think we downplay how hard it is


460
00:27:41,361 --> 00:27:45,666 line:-2
because it often only manifests
as a view missing or in the wrong place.


461
00:27:45,732 --> 00:27:47,167 line:-1
But we shouldn't.


462
00:27:47,234 --> 00:27:50,037 line:-1
Race conditions and UI inconsistencies


463
00:27:50,103 --> 00:27:53,040 line:-2
share the same underlying
source of complexity –


464
00:27:53,874 --> 00:27:56,276 line:-1
these easy-to-overlook orderings.


465
00:27:56,910 --> 00:28:00,714 line:-2
Many of the views we all work on
have to handle way more than four events.


466
00:28:01,281 --> 00:28:05,719 line:-2
Model notifications, target-actions,
delegate methods,


467
00:28:05,786 --> 00:28:08,488 line:0
lifecycle checkpoints,
completion handlers--


468
00:28:08,555 --> 00:28:10,958 line:0
they're all events.


469
00:28:11,592 --> 00:28:14,094 line:0
A view with 12 would roughly equate


470
00:28:14,161 --> 00:28:17,164 line:0
to 12 factorial possible orderings.


471
00:28:17,231 --> 00:28:18,899 line:0
That's almost half a billion.


472
00:28:19,399 --> 00:28:23,904 line:-2
You can think about this as kind of like
Big O notation for your brain.


473
00:28:25,138 --> 00:28:26,139 line:0
You're human.


474
00:28:26,640 --> 00:28:30,043 line:0
You can only fit so much in your head
at a time.


475
00:28:31,144 --> 00:28:32,446 line:0
This dotted line?


476
00:28:33,180 --> 00:28:34,481 line:0
That's your app.


477
00:28:35,582 --> 00:28:38,318 line:0
What do you think the difference
between these points is?


478
00:28:39,152 --> 00:28:40,087 line:0
That's right.


479
00:28:40,954 --> 00:28:42,055 line:0
Bugs.


480
00:28:43,590 --> 00:28:45,058 line:0
As we add features


481
00:28:45,125 --> 00:28:47,861 line:0
the number of possible orderings explodes,


482
00:28:47,928 --> 00:28:50,731 line:-2
and the chance we overlook one
increases to the point


483
00:28:50,797 --> 00:28:53,467 line:-1
where bugs are inevitable.


484
00:28:55,169 --> 00:28:57,337 line:-1
I imagine many of you have discovered


485
00:28:57,404 --> 00:28:59,773 line:-1
when using a traditional UI framework


486
00:28:59,840 --> 00:29:03,844 line:-2
the simplicity that results from
collecting all of your view updates


487
00:29:03,911 --> 00:29:05,445 line:-1
into a single method.


488
00:29:06,313 --> 00:29:09,683 line:-2
When you do this, you break the back
of the curve we just saw,


489
00:29:09,750 --> 00:29:11,785 line:-1
because when there's only one method,


490
00:29:11,852 --> 00:29:14,821 line:-2
there's only one possible order
it can be called in.


491
00:29:16,523 --> 00:29:18,725 line:-2
You may not have thought about it
in this way,


492
00:29:18,792 --> 00:29:21,762 line:-2
but this pattern forces you
to define a source of truth


493
00:29:21,828 --> 00:29:25,098 line:-2
for every possible state
your UI might find itself in


494
00:29:25,165 --> 00:29:29,436 line:-2
and derive your view's properties
from that collective source of truth.


495
00:29:30,904 --> 00:29:32,372 line:-1
If this sounds familiar,


496
00:29:32,439 --> 00:29:36,977 line:-2
it's because SwiftUI was directly inspired
by this best practice.


497
00:29:37,044 --> 00:29:39,112 line:-1
We've codified it in the framework


498
00:29:39,179 --> 00:29:43,150 line:-2
by making "body"
the only entry point that is ever called.


499
00:29:44,484 --> 00:29:47,654 line:-2
And in doing so,
we've solved the tricky cases,


500
00:29:48,021 --> 00:29:51,658 line:-2
the ones that I, at least,
when using a traditional UI framework,


501
00:29:51,725 --> 00:29:53,961 line:-1
was never able to fit into this pattern.


502
00:29:54,027 --> 00:29:57,931 line:-2
Like removing subviews,
pushing onto a navigation stack


503
00:29:57,998 --> 00:30:00,100 line:-1
and performing updates to a table view.


504
00:30:01,101 --> 00:30:04,738 line:-2
This is why Views,
but also Apps and Scenes


505
00:30:04,805 --> 00:30:07,875 line:-2
and any other SwiftUI abstractions
with a body


506
00:30:07,941 --> 00:30:09,743 line:-1
work the way they do.


507
00:30:10,511 --> 00:30:12,813 line:-1
Because you're only human,


508
00:30:12,880 --> 00:30:16,049 line:-2
and this pattern
of simply fetching new instances


509
00:30:16,116 --> 00:30:18,252 line:-1
for the parts of the UI that changed


510
00:30:18,318 --> 00:30:19,419 line:-1
scales with your brain,


511
00:30:20,287 --> 00:30:24,024 line:-1
virtually eliminating UI inconsistencies.


512
00:30:24,091 --> 00:30:27,861 line:-2
Now let's get back to the demo
and finish the SandwichDetail view.


513
00:30:27,928 --> 00:30:28,929 line:-1
Jacob?


514
00:30:29,730 --> 00:30:30,898 line:-1
Thanks, Kyle.


515
00:30:30,964 --> 00:30:33,200 line:-2
To be able to look more closely
at our sandwich,


516
00:30:33,267 --> 00:30:34,701 line:-1
let's add a state property...


517
00:30:36,770 --> 00:30:37,771 line:-1
called "zoomed"...


518
00:30:38,605 --> 00:30:39,873 line:-1
and default it to "false."


519
00:30:41,975 --> 00:30:44,912 line:-2
And states should only be accessible
within a view's implementation,


520
00:30:44,978 --> 00:30:46,079 line:-1
so we'll make it private.


521
00:30:47,481 --> 00:30:50,184 line:-2
Then we'll use it
in our aspect ratio's content mode


522
00:30:50,851 --> 00:30:54,788 line:-2
to change between "fill" when we're zoomed
and "fit" otherwise.


523
00:30:56,590 --> 00:31:00,961 line:-2
And finally, we'll add a tap gesture
to toggle our zoomed state.


524
00:31:03,664 --> 00:31:05,766 line:-1
Let's try it out in a live preview.


525
00:31:07,201 --> 00:31:09,469 line:-1
Now we can change between these modes.


526
00:31:10,971 --> 00:31:13,140 line:-2
But you might notice
that when we're zoomed in,


527
00:31:13,207 --> 00:31:14,908 line:-1
there's some blank space at the bottom.


528
00:31:15,676 --> 00:31:19,213 line:0
SwiftUI automatically lays out your views
in what we call the safe area.


529
00:31:19,947 --> 00:31:22,883 line:0
This means that UI elements in your app
won't get clipped


530
00:31:22,950 --> 00:31:24,384 line:0
by things like the corner radius.


531
00:31:25,719 --> 00:31:27,788 line:0
But for an edge-to-edge image like this,


532
00:31:27,855 --> 00:31:29,990 line:0
we actually want to expand
to the whole screen.


533
00:31:31,892 --> 00:31:33,961 line:-1
To do that, we can just add a modifier...


534
00:31:34,995 --> 00:31:36,396 line:-1
to ignore the safe area.


535
00:31:42,736 --> 00:31:45,239 line:-2
And specifically,
we'll ignore it on the bottom edge.


536
00:31:48,308 --> 00:31:51,211 line:-2
Okay, we're close,
but there's something missing here.


537
00:31:52,579 --> 00:31:53,714 line:-1
This needs an animation,


538
00:31:54,448 --> 00:31:57,050 line:-2
and with SwiftUI
animations are really easy to add.


539
00:31:57,918 --> 00:32:00,354 line:-2
I can just wrap my change
in withAnimation...


540
00:32:03,657 --> 00:32:06,326 line:-2
and now it animates
between its different states.


541
00:32:07,461 --> 00:32:10,898 line:-2
And not only that, the animation
is fully interactive and interruptible.


542
00:32:11,565 --> 00:32:14,735 line:-2
I can tap on it at any time,
and it always animates correctly.


543
00:32:17,571 --> 00:32:19,206 line:-1
I would add the enhance button next,


544
00:32:19,273 --> 00:32:21,542 line:-2
but it turns out
that the way Kyle trained the model,


545
00:32:21,608 --> 00:32:23,877 line:-2
it only ever worked
on that one image that he showed.


546
00:32:24,378 --> 00:32:26,446 line:-1
So I'm going to add something more useful.


547
00:32:27,281 --> 00:32:30,083 line:-2
Kyle loves spicy sandwiches,
like this one.


548
00:32:33,020 --> 00:32:35,889 line:-2
But I don't,
so I want to have a way to quickly know


549
00:32:35,956 --> 00:32:37,658 line:-1
if a sandwich is spicy or not.


550
00:32:38,692 --> 00:32:41,395 line:-2
Let's show an indicator for that
below our detail view.


551
00:32:43,130 --> 00:32:46,200 line:-2
I'll add a VStack
around our existing sandwich image.


552
00:32:49,269 --> 00:32:52,906 line:-2
And I'll move the more general modifiers
to apply to that VStack.


553
00:32:54,308 --> 00:32:56,577 line:-1
I want to show an image and text here,


554
00:32:56,643 --> 00:32:58,645 line:-2
and a great way to do that
is with a label.


555
00:33:01,715 --> 00:33:05,018 line:0
A label takes a title to show--
we'll use "Spicy"


556
00:33:06,320 --> 00:33:08,689 line:0
and it also has an associated icon.


557
00:33:09,423 --> 00:33:10,924 line:0
We'll use a system image...


558
00:33:12,125 --> 00:33:13,527 line:0
called "flame.fill."


559
00:33:16,363 --> 00:33:19,566 line:0
The label shows the icon and title
together for us.


560
00:33:20,334 --> 00:33:24,338 line:-2
And it can also be used in other contexts,
like lists and menus,


561
00:33:24,404 --> 00:33:27,040 line:-2
where it will automatically
take on the correct appearance,


562
00:33:27,107 --> 00:33:28,308 line:-1
spacing and sizing.


563
00:33:30,410 --> 00:33:33,180 line:-2
I was kind of imagining
a bottom banner appearance for this,


564
00:33:33,247 --> 00:33:36,149 line:0
where it's at the bottom of the screen
with a background behind it.


565
00:33:36,950 --> 00:33:40,020 line:0
To move it down there
we'll just add a spacer...


566
00:33:41,688 --> 00:33:45,225 line:-2
which will move the banner to the bottom
and our image to the top.


567
00:33:46,527 --> 00:33:50,731 line:-2
And to keep our image centered,
let's add another spacer above the image.


568
00:33:53,367 --> 00:33:58,038 line:-2
Spacers automatically have a minimum size
to maintain some padding between elements.


569
00:33:58,705 --> 00:34:01,441 line:-2
But in this case, we want the image
to be able to go all the way


570
00:34:01,508 --> 00:34:03,043 line:-1
to the edges of its container.


571
00:34:03,777 --> 00:34:07,214 line:-2
So let's set a minLength of zero
for these.


572
00:34:10,784 --> 00:34:12,953 line:-1
Let's also add some padding in our banner


573
00:34:13,719 --> 00:34:15,956 line:-2
so it still has some space
when it's visible


574
00:34:16,023 --> 00:34:18,225 line:-2
and doesn't go up against
the edge of the screen.


575
00:34:19,760 --> 00:34:21,128 line:-1
In the inspector...


576
00:34:22,129 --> 00:34:25,532 line:-2
I can just click this button
to turn on padding for this view.


577
00:34:27,000 --> 00:34:27,900 line:-1
That's better.


578
00:34:28,735 --> 00:34:31,038 line:-1
And let's turn up the font size as well.


579
00:34:35,442 --> 00:34:37,878 line:0
Notice that not only
did the text size increase,


580
00:34:38,445 --> 00:34:39,980 line:0
the symbol image did as well.


581
00:34:40,614 --> 00:34:44,284 line:0
Symbol images automatically use
the same font information as text


582
00:34:44,351 --> 00:34:46,186 line:0
to size themselves appropriately.


583
00:34:46,887 --> 00:34:48,188 line:0
Let's use a headline font.


584
00:34:51,891 --> 00:34:55,596 line:0
Now, to really make this screen spicy,
let's give it a red background.


585
00:34:56,964 --> 00:35:00,033 line:0
A background modifier lets me put any view


586
00:35:00,100 --> 00:35:01,835 line:0
behind the view that it's applied to.


587
00:35:02,469 --> 00:35:04,538 line:0
These are commonly used with solid colors


588
00:35:04,605 --> 00:35:06,573 line:0
to give a solid color background
to a view.


589
00:35:13,447 --> 00:35:15,182 line:0
Well, we have red behind our view.


590
00:35:15,249 --> 00:35:16,917 line:0
But why is it just this small region?


591
00:35:18,385 --> 00:35:21,955 line:0
In SwiftUI, views size themselves
to fit their content.


592
00:35:22,022 --> 00:35:25,759 line:0
So in this case the image and text
are their natural sizes,


593
00:35:25,826 --> 00:35:28,061 line:0
and there's also space
for the padding we applied.


594
00:35:28,896 --> 00:35:31,798 line:0
And just like earlier,
we can make this expand edge-to-edge


595
00:35:31,865 --> 00:35:33,700 line:0
by adding spacers and an HStack.


596
00:35:46,079 --> 00:35:47,748 line:0
Now, for a few finishing touches,


597
00:35:47,814 --> 00:35:49,950 line:0
let's turn the foreground color
to be yellow


598
00:35:50,017 --> 00:35:51,552 line:0
to match our spicy theme...


599
00:35:55,455 --> 00:35:57,691 line:0
and update our font to use small caps.


600
00:36:02,462 --> 00:36:03,463 line:0
Looking good.


601
00:36:03,797 --> 00:36:05,265 line:0
Now we have our banner,


602
00:36:05,332 --> 00:36:07,835 line:0
but we only want it to appear
when a sandwich is spicy.


603
00:36:07,901 --> 00:36:08,902 line:0
How do we do that?


604
00:36:09,903 --> 00:36:12,706 line:0
The declarative syntax we're using
makes that really easy.


605
00:36:12,773 --> 00:36:13,974 line:0
We can just use an "if."


606
00:36:15,409 --> 00:36:17,678 line:0
We'll check if our sandwich is spicy...


607
00:36:18,946 --> 00:36:21,114 line:0
and if so, we'll show our banner.


608
00:36:26,653 --> 00:36:29,189 line:0
To check this,
we can change our preview data


609
00:36:29,756 --> 00:36:32,459 line:0
to show a different sandwich
that isn't spicy.


610
00:36:33,460 --> 00:36:34,461 line:0
But even better,


611
00:36:34,528 --> 00:36:37,698 line:0
we can set up our previews
to show multiple versions of our view.


612
00:36:38,599 --> 00:36:42,302 line:0
I can click the plus button
to add another copy of this preview.


613
00:36:44,371 --> 00:36:46,106 line:0
And I'll update the data we're using...


614
00:36:48,475 --> 00:36:49,843 line:0
to show different sandwiches.


615
00:36:50,777 --> 00:36:53,780 line:0
Now, we can see one version of our view
with a spicy banner


616
00:36:54,481 --> 00:36:55,482 line:0
and one without.


617
00:36:56,984 --> 00:36:59,119 line:0
That way, as we make edits, we can be sure


618
00:36:59,186 --> 00:37:01,755 line:0
that both versions of our view
work the way we want.


619
00:37:03,056 --> 00:37:05,526 line:0
And notice that the way Xcode
added another preview


620
00:37:05,592 --> 00:37:08,395 line:0
is just by adding
another instantiation of our view.


621
00:37:15,102 --> 00:37:18,605 line:0
I like this banner, but I don't want it
taking away space from the sandwich image


622
00:37:18,672 --> 00:37:19,606 line:0
when we're zoomed in.


623
00:37:20,507 --> 00:37:22,342 line:0
So let's hide the image when we're zoomed,


624
00:37:23,043 --> 00:37:25,312 line:0
which we can do
just by updating our condition.


625
00:37:29,716 --> 00:37:32,986 line:0
Now the banner shows and hides as we zoom.


626
00:37:35,622 --> 00:37:36,990 line:0
And it even animates...


627
00:37:37,991 --> 00:37:39,193 line:0
fading in and out.


628
00:37:40,527 --> 00:37:42,729 line:0
We can also customize
that animation behavior


629
00:37:43,530 --> 00:37:45,165 line:0
by setting a different transition.


630
00:37:47,901 --> 00:37:50,270 line:0
Let's use ".move" on the bottom edge.


631
00:37:52,239 --> 00:37:54,575 line:0
Now it slides out and slides back in.


632
00:37:56,276 --> 00:37:59,413 line:0
And if you look closely while I tap
when the animation is still going...


633
00:38:01,381 --> 00:38:03,250 line:0
notice that it turns around
and comes back.


634
00:38:03,917 --> 00:38:06,486 line:0
No matter what I do,
everything stays interactive


635
00:38:06,553 --> 00:38:08,655 line:0
and it always ends up in the right place.


636
00:38:09,556 --> 00:38:10,891 line:-1
And that's our detail view.


637
00:38:11,391 --> 00:38:12,826 line:-1
Let's review what we just built.


638
00:38:14,027 --> 00:38:17,331 line:-2
Our detail view is configured
with the sandwich to show.


639
00:38:17,898 --> 00:38:21,668 line:-2
And remember, that's a derived value
passed in by the parent of this view.


640
00:38:22,669 --> 00:38:26,139 line:-2
We also have our state property
for whether we're zoomed or not,


641
00:38:26,206 --> 00:38:27,808 line:-1
which is persisted by the framework


642
00:38:28,242 --> 00:38:30,777 line:-2
and controls our aspect ratio's
content mode.


643
00:38:32,312 --> 00:38:33,780 line:-1
And we have our banner,


644
00:38:34,781 --> 00:38:36,917 line:-1
which is only visible for spicy sandwiches


645
00:38:37,451 --> 00:38:38,952 line:-1
and only when they're not zoomed.


646
00:38:40,387 --> 00:38:44,858 line:0
We're also specifying a transition
to make it slide in and out.


647
00:38:45,659 --> 00:38:47,961 line:0
And what's actually happening
during that transition?


648
00:38:48,795 --> 00:38:52,366 line:0
When it's removed, the view is animating
to a new position offscreen...


649
00:38:53,333 --> 00:38:56,036 line:0
and SwiftUI waits
until it finishes that animation


650
00:38:56,103 --> 00:38:58,105 line:0
to actually remove the view
from the hierarchy.


651
00:38:59,039 --> 00:39:02,042 line:0
And when it's coming back,
SwiftUI inserts it offscreen


652
00:39:02,109 --> 00:39:04,144 line:0
and then moves it back in
with an animation.


653
00:39:05,179 --> 00:39:08,415 line:-2
It's pretty amazing to be able to add
and remove views from a hierarchy


654
00:39:08,482 --> 00:39:10,083 line:-1
with an animation so easily.


655
00:39:11,919 --> 00:39:15,622 line:-2
And recall that this animation is always
interactive right out of the box.


656
00:39:16,990 --> 00:39:20,394 line:-2
This is where being data-driven,
instead of event-driven, really shines.


657
00:39:20,827 --> 00:39:24,198 line:-2
All those events Kyle talked about
can happen while this is animating too.


658
00:39:24,831 --> 00:39:27,968 line:-2
And animations beginning and ending
are even more events.


659
00:39:28,502 --> 00:39:30,838 line:-2
It's incredibly difficult
to build something like this


660
00:39:30,904 --> 00:39:32,039 line:-1
in an event-driven world,


661
00:39:32,573 --> 00:39:34,741 line:-1
but in SwiftUI it's just one line of code.


662
00:39:38,078 --> 00:39:41,515 line:-2
Now let's go back to our list
of sandwiches and finish up this app.


663
00:39:44,885 --> 00:39:47,988 line:-2
When we started, we used
a multi-platform app template,


664
00:39:48,055 --> 00:39:50,424 line:-2
but so far we've only been looking
at an iPhone.


665
00:39:51,225 --> 00:39:54,328 line:-2
How much work do we need to do
to run this on other platforms?


666
00:39:54,394 --> 00:39:55,395 line:-1
Let's see.


667
00:39:56,063 --> 00:39:59,266 line:-2
I'll switch my run destination
from an iPhone to an iPad...


668
00:40:01,235 --> 00:40:02,236 line:-1
and go live.


669
00:40:14,214 --> 00:40:17,651 line:-2
SwiftUI has converted our navigation view
into a split view,


670
00:40:18,185 --> 00:40:20,254 line:-1
so I can choose sandwiches on the left...


671
00:40:20,854 --> 00:40:22,155 line:-1
and show them on the right.


672
00:40:25,726 --> 00:40:27,961 line:-2
The one thing
that I'm noticing in my preview


673
00:40:28,028 --> 00:40:29,997 line:-2
is that when I don't have
a sandwich selected,


674
00:40:30,063 --> 00:40:31,231 line:-1
I just see a blank area.


675
00:40:32,266 --> 00:40:34,234 line:-2
I'd like to improve that
to show a placeholder


676
00:40:34,301 --> 00:40:36,003 line:-1
saying to select a sandwich.


677
00:40:36,803 --> 00:40:40,541 line:-2
All we have to do for that is to add
a second view in our navigation view.


678
00:40:44,278 --> 00:40:46,480 line:0
Just like you can add multiple views
to stacks,


679
00:40:46,547 --> 00:40:48,015 line:0
you can add multiple views here.


680
00:40:56,790 --> 00:40:58,592 line:-1
But instead of those views being stacked,


681
00:40:58,659 --> 00:41:02,462 line:-2
they're given to the navigation view
to be shown in the most appropriate way.


682
00:41:03,430 --> 00:41:04,431 line:-1
In this case,


683
00:41:05,365 --> 00:41:07,034 line:-1
the first view is shown on the left


684
00:41:07,701 --> 00:41:10,704 line:-2
and the second view becomes
the placeholder for the view on the right.


685
00:41:11,705 --> 00:41:14,508 line:-2
And on an iPhone
the placeholder is automatically removed


686
00:41:14,575 --> 00:41:15,709 line:-1
since it's not needed.


687
00:41:18,378 --> 00:41:20,214 line:-1
Let's look at what happens on macOS.


688
00:41:31,859 --> 00:41:33,193 line:-1
It's working great here too,


689
00:41:33,727 --> 00:41:36,630 line:-2
and we get the same placeholder,
shown here, as on iPad.


690
00:41:38,365 --> 00:41:41,969 line:-2
We're able to use the same view code,
model code and app code


691
00:41:42,035 --> 00:41:43,570 line:-1
between all Apple platforms.


692
00:41:44,238 --> 00:41:46,573 line:0
And we can make
platform-specific improvements,


693
00:41:46,640 --> 00:41:47,641 line:0
like this placeholder,


694
00:41:48,308 --> 00:41:49,309 line:0
to go even further.


695
00:41:57,518 --> 00:42:00,654 line:-2
Over time, we need to be able to
change our list of sandwiches.


696
00:42:01,188 --> 00:42:02,723 line:-1
So let's add some editing support.


697
00:42:03,457 --> 00:42:06,927 line:-2
And while we're at it, let's also
make our data model a little more real.


698
00:42:07,728 --> 00:42:11,131 line:-2
Right now, the data in our app
is completely static.


699
00:42:11,999 --> 00:42:13,700 line:-1
We have this array of sandwiches...


700
00:42:14,868 --> 00:42:17,137 line:-2
and whatever we start with
is what we'll always have.


701
00:42:17,704 --> 00:42:20,240 line:-2
Let's update our model
to have a root store object


702
00:42:20,307 --> 00:42:23,844 line:-2
that will contain our sandwiches
and will be able to change over time.


703
00:42:25,212 --> 00:42:27,581 line:-2
I'm going to drag in
a pre-built model file


704
00:42:27,648 --> 00:42:28,749 line:-1
with our sandwich store.


705
00:42:32,152 --> 00:42:35,022 line:-2
And just so you know,
that store as in data store,


706
00:42:35,088 --> 00:42:36,690 line:-1
not a place that sells sandwiches.


707
00:42:39,459 --> 00:42:43,230 line:-2
Notice that our store is a mutable object
that contains our sandwiches.


708
00:42:45,966 --> 00:42:49,636 line:-2
And we also have a singleton instance
of that store for testing.


709
00:42:50,370 --> 00:42:53,607 line:-2
Now all we need to do is tell SwiftUI
when our object changes.


710
00:42:55,142 --> 00:42:58,745 line:-2
To do that, I'm going to make it conform
to the ObservableObject protocol.


711
00:43:00,047 --> 00:43:04,952 line:-2
Then I can just mark any properties
I want to observe with @Published.


712
00:43:07,154 --> 00:43:09,156 line:-1
So, how can we use our new model?


713
00:43:11,191 --> 00:43:14,561 line:-2
Just like we used @State
to make a source of truth for a value...


714
00:43:15,796 --> 00:43:17,331 line:-1
we can use @StateObject


715
00:43:18,198 --> 00:43:20,634 line:-2
to make a source of truth
for a mutable object.


716
00:43:32,813 --> 00:43:35,516 line:-2
StateObject will automatically
observe the object


717
00:43:35,582 --> 00:43:37,518 line:-1
to update our view when it changes.


718
00:43:38,352 --> 00:43:40,921 line:-2
And we could add that StateObject
here in our view code.


719
00:43:41,788 --> 00:43:45,259 line:-2
But since this is our app-wide store,
there's an even better place to put it--


720
00:43:45,325 --> 00:43:46,994 line:-1
in our app code.


721
00:43:48,095 --> 00:43:51,698 line:-2
Let's go back to our app code
to look more closely


722
00:43:51,765 --> 00:43:53,534 line:-1
and see how we can link it to our model.


723
00:43:56,136 --> 00:43:57,604 line:-1
This is the code we started with.


724
00:43:58,172 --> 00:44:01,608 line:-2
And notice that it's very similar to the
view code that we were just looking at.


725
00:44:02,476 --> 00:44:05,546 line:-2
We have a struct that conforms
to the app protocol...


726
00:44:06,647 --> 00:44:08,549 line:-1
and it has a body property,


727
00:44:08,615 --> 00:44:11,018 line:-2
where we build up what we want,
just like a view.


728
00:44:12,019 --> 00:44:14,354 line:-1
In this case we have a WindowGroup


729
00:44:14,421 --> 00:44:17,591 line:-2
which lets us specify
what view we want to use


730
00:44:17,658 --> 00:44:18,926 line:-1
for all windows in our app.


731
00:44:19,793 --> 00:44:21,595 line:-1
And one thing that's special about our app


732
00:44:21,662 --> 00:44:23,664 line:-1
is that we also have this @main attribute.


733
00:44:24,665 --> 00:44:28,669 line:-2
This just tells Swift that this struct
should be the starting point for our app.


734
00:44:30,337 --> 00:44:33,574 line:-2
I'll add our store
and a StateObject right here.


735
00:44:35,108 --> 00:44:38,212 line:-2
Apps can use State, StateObject
and other special properties


736
00:44:38,278 --> 00:44:39,279 line:-1
just like views.


737
00:44:40,180 --> 00:44:42,950 line:-2
Next, let's pass the store
to our view code.


738
00:44:43,817 --> 00:44:46,587 line:-1
We'll pass it to the view's initializer.


739
00:44:48,188 --> 00:44:49,456 line:-1
And back in our view code...


740
00:44:52,793 --> 00:44:54,795 line:-1
we'll replace the constant sandwiches...


741
00:44:55,562 --> 00:44:57,030 line:-1
with a property for our store.


742
00:45:03,070 --> 00:45:06,974 line:-2
Then we'll tell SwiftUI that we want to
observe this object for changes


743
00:45:07,040 --> 00:45:08,809 line:-1
by making it an ObservedObject.


744
00:45:13,380 --> 00:45:16,550 line:-2
And we'll update our list
to pull the sandwiches from the store.


745
00:45:21,088 --> 00:45:24,558 line:-2
Finally, let's also update our preview
to use our test store.


746
00:45:29,296 --> 00:45:32,299 line:-2
Great. Now we're pulling our data
from the store.


747
00:45:32,366 --> 00:45:34,601 line:-2
Which means we're ready
to add our editing support.


748
00:45:35,969 --> 00:45:38,238 line:-2
I'm going to drop in
some convenience functions


749
00:45:38,305 --> 00:45:40,774 line:-2
for making changes to our store
from a snippet.


750
00:45:46,446 --> 00:45:48,315 line:-1
There's one to add a new sandwich...


751
00:45:49,516 --> 00:45:51,118 line:-1
one to move sandwiches around


752
00:45:51,552 --> 00:45:53,086 line:-1
and one to delete sandwiches.


753
00:45:55,822 --> 00:45:59,426 line:-2
In our lists ForEach,
we can add an onMove modifier...


754
00:46:01,962 --> 00:46:04,264 line:-1
that calls our "moveSandwiches" method.


755
00:46:05,766 --> 00:46:08,035 line:-1
And we'll also add onDelete...


756
00:46:09,703 --> 00:46:11,572 line:-1
to call "deleteSandwiches."


757
00:46:14,241 --> 00:46:17,444 line:-2
And with just that change,
we can go back to our app...


758
00:46:22,416 --> 00:46:26,587 line:-2
and we're already able to swipe
to delete rows from our list.


759
00:46:27,421 --> 00:46:28,956 line:-1
Whenever we swipe to delete,


760
00:46:30,057 --> 00:46:31,792 line:-1
SwiftUI will call our callback...


761
00:46:33,427 --> 00:46:35,462 line:0
which will remove the sandwich
from the store.


762
00:46:37,331 --> 00:46:40,367 line:0
And our UI will automatically update
to show that change.


763
00:46:41,268 --> 00:46:44,471 line:-2
On macOS, this is all we need
for editing support.


764
00:46:44,538 --> 00:46:48,208 line:-2
But on iOS, we should add a way
to explicitly go into edit mode


765
00:46:48,275 --> 00:46:49,643 line:-1
in addition to swipe to delete.


766
00:46:50,577 --> 00:46:53,580 line:-2
So let's add an edit button
as a toolbar item.


767
00:46:55,282 --> 00:46:57,384 line:-1
I can use a toolbar modifier...


768
00:46:59,553 --> 00:47:02,756 line:-2
which lets us add any SwiftUI views
as toolbar items.


769
00:47:03,423 --> 00:47:05,826 line:-1
Inside of it I'll just add an edit button,


770
00:47:06,360 --> 00:47:09,396 line:-2
which is a control
that automatically toggles edit mode.


771
00:47:10,397 --> 00:47:12,766 line:-1
I only want this to appear on iOS,


772
00:47:12,833 --> 00:47:16,637 line:-2
so I'll add "if os(iOS)"
around that button...


773
00:47:19,606 --> 00:47:21,909 line:-2
so that it's only added
to the toolbar there.


774
00:47:23,043 --> 00:47:25,979 line:-1
Now let's toggle edit mode for our list.


775
00:47:27,381 --> 00:47:30,984 line:-2
Notice that all of our data rows
have editing controls,


776
00:47:31,051 --> 00:47:33,987 line:-2
and the static element at the bottom
does not.


777
00:47:34,721 --> 00:47:37,090 line:-2
SwiftUI automatically
shows the editing controls


778
00:47:37,157 --> 00:47:38,859 line:-1
only on the rows that need them


779
00:47:38,926 --> 00:47:40,928 line:-1
and omits them from the rows that don't.


780
00:47:42,029 --> 00:47:43,530 line:-1
We can reorder items...


781
00:47:44,364 --> 00:47:46,033 line:-1
and tap to delete them.


782
00:47:50,637 --> 00:47:53,373 line:-2
Let's also add a button
for adding new sandwiches.


783
00:47:53,974 --> 00:47:56,877 line:-2
I'll just add another view
in our toolbar modifier,


784
00:47:57,778 --> 00:47:59,746 line:-2
and for this one
I'll just make it a button


785
00:48:00,581 --> 00:48:02,182 line:-1
with a label of "Add"...


786
00:48:03,317 --> 00:48:06,320 line:-2
and an action that calls
our makeSandwich method.


787
00:48:09,356 --> 00:48:10,891 line:-1
Now we can tap our button...


788
00:48:11,925 --> 00:48:13,227 line:-1
and there's our new sandwich.


789
00:48:15,128 --> 00:48:17,231 line:-2
Let's quickly review
what we've just added.


790
00:48:17,965 --> 00:48:21,401 line:-2
We saw how to quickly add
editing operations to our list...


791
00:48:23,136 --> 00:48:25,038 line:-1
with just these modifiers...


792
00:48:26,373 --> 00:48:29,009 line:-2
and some simple functions
to change our data.


793
00:48:30,143 --> 00:48:32,913 line:-2
And remember how we made
our sandwich type identifiable earlier?


794
00:48:33,947 --> 00:48:37,751 line:-2
ForEach automatically watches
for changes to its collection


795
00:48:37,818 --> 00:48:41,054 line:-2
and synthesizes the correct
insertions and deletions for us


796
00:48:41,855 --> 00:48:45,025 line:-2
so we no longer need to tell the list
to add and remove rows,


797
00:48:45,092 --> 00:48:46,760 line:-1
which means we no longer have to worry


798
00:48:46,827 --> 00:48:49,463 line:-2
about getting data source
inconsistency exceptions.


799
00:48:51,331 --> 00:48:53,667 line:-1
We also used a toolbar modifier...


800
00:48:56,303 --> 00:49:00,007 line:0
to add toolbar items for editing our list
and adding new items.


801
00:49:01,041 --> 00:49:02,476 line:0
And that's our list.


802
00:49:02,543 --> 00:49:06,813 line:0
We made this whole sophisticated list UI
with just this really minimal view code.


803
00:49:10,918 --> 00:49:13,153 line:-2
We were able to build up this app
really quickly.


804
00:49:13,754 --> 00:49:16,323 line:-2
But you might be thinking that
there's still a lot more work we need


805
00:49:16,390 --> 00:49:17,724 line:-1
to get it ready for customers.


806
00:49:18,559 --> 00:49:22,996 line:-2
These days support for Dynamic Type,
Dark Mode, localization and more


807
00:49:23,063 --> 00:49:24,131 line:-1
are expected for an app.


808
00:49:24,865 --> 00:49:28,368 line:-2
But with SwiftUI you get a lot more
support for these behaviors automatically.


809
00:49:29,236 --> 00:49:32,272 line:-2
And we can use previews
to really quickly test all of these.


810
00:49:33,373 --> 00:49:35,142 line:-1
Let's go to our preview and take a look.


811
00:49:36,210 --> 00:49:40,080 line:-2
I'm going to add a second preview
by clicking the preview's "plus" button.


812
00:49:42,916 --> 00:49:46,787 line:-2
Then I can click this "inspect" button
to configure the new preview.


813
00:49:47,855 --> 00:49:51,124 line:-2
I'll set the Dynamic Type size
to be a much larger value.


814
00:49:54,528 --> 00:49:56,697 line:-1
And everything looks great automatically.


815
00:49:57,731 --> 00:50:00,434 line:-2
Let's look at the code that got added
to change this preview.


816
00:50:04,271 --> 00:50:07,241 line:-2
Xcode just added a modifier
that's setting a value


817
00:50:07,307 --> 00:50:08,842 line:-1
in the environment of our previews.


818
00:50:09,676 --> 00:50:14,014 line:-2
The environment is a way you can set
contextual information about your views


819
00:50:14,081 --> 00:50:15,682 line:-1
that flows down the view hierarchy


820
00:50:15,749 --> 00:50:18,919 line:-2
and changes aspects
of any contained views at once.


821
00:50:19,920 --> 00:50:23,457 line:-2
It's great for making cascading changes
to a view and its children.


822
00:50:26,260 --> 00:50:28,061 line:-1
Let's add another preview instance.


823
00:50:32,332 --> 00:50:34,568 line:-1
And this time, in our preview inspector...


824
00:50:35,702 --> 00:50:37,804 line:-1
let's set the color scheme to "Dark."


825
00:50:41,341 --> 00:50:43,777 line:-2
Once again,
everything looks great automatically.


826
00:50:44,745 --> 00:50:48,015 line:-2
And finally, let's see how our app works
with other languages.


827
00:50:48,649 --> 00:50:50,717 line:-1
I have some English string files...


828
00:50:51,518 --> 00:50:52,819 line:-1
that I'll drop into our app.


829
00:51:02,095 --> 00:51:05,232 line:-2
Then I'll tell Xcode
that we want to localize these files.


830
00:51:21,081 --> 00:51:23,083 line:-1
Then I'll go to my project file...


831
00:51:25,786 --> 00:51:28,589 line:-1
and import a localization into Arabic.


832
00:51:37,331 --> 00:51:40,434 line:-2
Now, back in our view code,
let's add one more preview.


833
00:51:50,777 --> 00:51:52,779 line:-2
If we set the environment's
layout direction...


834
00:51:54,882 --> 00:51:56,483 line:-1
to be "rightToLeft"...


835
00:52:00,988 --> 00:52:02,689 line:-1
everything just works already,


836
00:52:02,756 --> 00:52:03,690 line:-1
which is great.


837
00:52:06,660 --> 00:52:09,429 line:-1
And finally, if we set the locale...


838
00:52:13,734 --> 00:52:14,835 line:0
to be Arabic...


839
00:52:22,176 --> 00:52:23,610 line:-1
our app is localized.


840
00:52:24,344 --> 00:52:27,147 line:-2
But even better,
if you look back at our code...


841
00:52:28,415 --> 00:52:31,218 line:-2
we didn't do anything special
to support these features.


842
00:52:31,285 --> 00:52:32,953 line:-1
To get our text localizable,


843
00:52:33,020 --> 00:52:36,356 line:-2
we didn't have to mark up which strings
should be localizable or not.


844
00:52:36,423 --> 00:52:40,827 line:-2
SwiftUI automatically infers the text
with string literals, like "sandwiches,"


845
00:52:40,894 --> 00:52:42,930 line:-1
should be localized by default.


846
00:52:45,265 --> 00:52:48,569 line:-2
But text that's created from strings,
like our model values,


847
00:52:48,635 --> 00:52:49,803 line:-1
should be used as is.


848
00:52:50,804 --> 00:52:54,541 line:-2
And you can even use string interpolations
and have them localized correctly.


849
00:52:55,275 --> 00:52:58,312 line:-2
We're really excited for you
to start building apps with SwiftUI.


850
00:52:58,378 --> 00:53:00,314 line:-2
When you get all of these behaviors
for free,


851
00:53:00,380 --> 00:53:02,783 line:-2
you can concentrate on
the unique parts of your app


852
00:53:02,850 --> 00:53:05,452 line:-2
and build better apps for your customers
even faster.


853
00:53:06,620 --> 00:53:09,790 line:-2
Let's take one last pass through our app
to review what we built


854
00:53:09,857 --> 00:53:11,859 line:-1
and make sure everything is working right.


855
00:53:12,459 --> 00:53:15,662 line:-2
Let's use the Dark Mode version
and take our app live again.


856
00:53:15,729 --> 00:53:17,831 line:-1
But this time let's do it on a device.


857
00:53:19,333 --> 00:53:21,201 line:-1
I have an iPhone plugged in,


858
00:53:21,268 --> 00:53:22,769 line:-1
so let's just click this button...


859
00:53:24,037 --> 00:53:26,373 line:-2
to send our view to the device
to preview it there.


860
00:53:27,808 --> 00:53:29,510 line:-1
We have our list of sandwiches,


861
00:53:29,576 --> 00:53:31,845 line:-2
and we can tap on one
to see more information.


862
00:53:34,414 --> 00:53:38,118 line:0
In our detail view,
we can tap to zoom to full screen,


863
00:53:38,185 --> 00:53:41,021 line:0
which hides the "spicy" banner
with a transition.


864
00:53:41,822 --> 00:53:43,991 line:0
And that animation is always interactive.


865
00:53:47,427 --> 00:53:49,796 line:-1
And we can edit our list to make changes.


866
00:53:51,999 --> 00:53:52,966 line:-1
Let's move this up.


867
00:53:55,068 --> 00:53:56,069 line:-1
And I'm a purist.


868
00:53:56,136 --> 00:53:58,071 line:-2
I don't think a hot dog
counts as a sandwich.


869
00:53:59,640 --> 00:54:01,642 line:-1
And we can add our new sandwich.


870
00:54:03,076 --> 00:54:04,211 line:-1
So there's our app.


871
00:54:04,745 --> 00:54:07,014 line:-2
But there's one last thing
that I want to point out,


872
00:54:07,080 --> 00:54:08,549 line:-1
and it's something we didn't see.


873
00:54:09,016 --> 00:54:13,387 line:-2
We just built up this entire application
and tested all of these rich behaviors


874
00:54:13,453 --> 00:54:15,522 line:-2
without ever once
building and running our app.


875
00:54:16,223 --> 00:54:19,860 line:-2
Xcode previews let us view, edit
and debug our applications


876
00:54:19,927 --> 00:54:21,995 line:-1
much faster than was ever possible before.


877
00:54:22,896 --> 00:54:26,466 line:-2
Thank you for watching, and I hope
you enjoy using SwiftUI as much as we do.

