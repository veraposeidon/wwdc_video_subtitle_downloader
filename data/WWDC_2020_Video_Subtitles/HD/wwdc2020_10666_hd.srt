1
00:00:03,937 --> 00:00:07,608 line:-1
Hello and welcome to WWDC.


2
00:00:07,674 --> 00:00:09,443 line:0
Hi there, my name is Jay Mulani,


3
00:00:09,510 --> 00:00:12,980 line:0
and I'm gonna talk to you
about one-tap account security upgrades.


4
00:00:13,881 --> 00:00:17,451 line:-2
I'm so excited to talk to you today
about what we've added in iOS this year


5
00:00:17,518 --> 00:00:19,953 line:-2
to help improve
your users' account security.


6
00:00:20,554 --> 00:00:23,156 line:-2
We've got some great new features
that raise user awareness


7
00:00:23,223 --> 00:00:25,926 line:-2
about account security risks,
and with your buy-in,


8
00:00:25,993 --> 00:00:29,229 line:-2
make addressing those risks
faster and easier than ever.


9
00:00:30,197 --> 00:00:33,967 line:-2
We'll get started with a brief discussion
on account security,


10
00:00:34,034 --> 00:00:36,136 line:-2
and then walk through
security recommendations


11
00:00:36,203 --> 00:00:37,804 line:-1
new in iOS this year.


12
00:00:38,839 --> 00:00:41,041 line:-2
I'll show you how to adopt
our new extension point


13
00:00:41,108 --> 00:00:43,977 line:-2
to offer your users
fast, easy security upgrades


14
00:00:44,044 --> 00:00:46,046 line:-1
on the operating system.


15
00:00:46,113 --> 00:00:48,782 line:-2
And then how to add those flows
within your app.


16
00:00:49,750 --> 00:00:53,020 line:0
We'll close with some best practices
on adopting the extension.


17
00:00:54,188 --> 00:00:56,089 line:-2
Let's start by talking about
account security.


18
00:00:56,657 --> 00:00:59,026 line:-1
Accounts are staples of our identities.


19
00:00:59,092 --> 00:01:01,828 line:-2
We use them to manage
our most personal, private data,


20
00:01:01,895 --> 00:01:04,565 line:-2
and to access services
that power our lives.


21
00:01:05,132 --> 00:01:10,804 line:-2
Accounts manage our finances, health,
emails, social media profiles, and more.


22
00:01:10,871 --> 00:01:13,307 line:-1
Accounts are so important.


23
00:01:13,373 --> 00:01:15,742 line:-2
Their ever-growing integral role
in our lives


24
00:01:15,809 --> 00:01:17,778 line:-2
means that
we have a lot of them to keep track of


25
00:01:17,845 --> 00:01:20,113 line:-2
and that they need to be
carefully protected.


26
00:01:20,180 --> 00:01:22,583 line:-1
Most accounts are unlocked with passwords,


27
00:01:22,649 --> 00:01:26,019 line:-2
and so account management is
heavily dependent on password management.


28
00:01:26,086 --> 00:01:29,423 line:-2
Many of you are already using
iOS and macOS features


29
00:01:29,489 --> 00:01:32,092 line:-2
to make password management
easy for your users.


30
00:01:32,626 --> 00:01:34,194 line:-1
Password AutoFill provides users


31
00:01:34,261 --> 00:01:37,431 line:-2
with a super-fast
and convenient login experience.


32
00:01:37,497 --> 00:01:39,900 line:-2
AuthenticationServices
takes this a step further


33
00:01:39,967 --> 00:01:42,769 line:-2
and removes a keyboard
from the sign-in process.


34
00:01:42,836 --> 00:01:45,639 line:-2
Security Code AutoFill
streamlines the login process


35
00:01:45,706 --> 00:01:49,309 line:-2
for accounts that have
SMS two-factor authentication enabled.


36
00:01:49,376 --> 00:01:50,377 line:-1
And Sign in with Apple


37
00:01:50,444 --> 00:01:52,980 line:-2
completely removes the password component
of account management.


38
00:01:53,046 --> 00:01:56,617 line:-2
It's the fastest way for users
to get a new account and sign in.


39
00:01:56,683 --> 00:01:59,520 line:-2
Accounts should be convenient to use
and secure.


40
00:02:00,387 --> 00:02:03,190 line:-2
These features I just mentioned,
integrated into your apps,


41
00:02:03,257 --> 00:02:05,692 line:-1
make signing in super easy.


42
00:02:05,759 --> 00:02:10,330 line:-2
In this year's iOS, we've added
new account management features and APIs


43
00:02:10,396 --> 00:02:13,333 line:-2
to help you keep
your users' accounts secure.


44
00:02:14,001 --> 00:02:18,305 line:-2
My goal today is to show you
how beneficial it is, and how easy it is,


45
00:02:18,372 --> 00:02:20,007 line:-1
for you to use these new features


46
00:02:20,073 --> 00:02:24,111 line:-2
to continue our joint mission
of keeping users' accounts secure.


47
00:02:24,178 --> 00:02:28,182 line:-2
To motivate that, let's talk about
the new Security Recommendations feature.


48
00:02:29,783 --> 00:02:31,351 line:-1
Every iPhone and iPad


49
00:02:31,418 --> 00:02:34,421 line:-2
has the built-in
iCloud Keychain password manager.


50
00:02:34,488 --> 00:02:36,757 line:-2
It's deeply integrated
with the operating system


51
00:02:36,823 --> 00:02:41,094 line:-2
and securely synchronizes passwords
across all of a user's devices.


52
00:02:41,161 --> 00:02:44,865 line:-2
It provides easy password lookup
and powers Password AutoFill,


53
00:02:44,932 --> 00:02:47,835 line:-2
and now
it's home to Security Recommendations.


54
00:02:48,602 --> 00:02:51,538 line:-2
This new section of the password manager
will show all of the warnings


55
00:02:51,605 --> 00:02:54,408 line:-2
the system has found
with passwords saved in Keychain.


56
00:02:54,474 --> 00:02:58,412 line:-2
Security Recommendations educates users
about why certain passwords are flagged


57
00:02:58,478 --> 00:03:00,848 line:-1
and motivates them to take action.


58
00:03:00,914 --> 00:03:02,182 line:-1
High-priority recommendations


59
00:03:02,249 --> 00:03:06,053 line:-2
will be highlighted based on the severity
of the warning and the type of account.


60
00:03:06,119 --> 00:03:08,989 line:-2
The system will flag passwords
that are reused across sites,


61
00:03:09,056 --> 00:03:10,591 line:-1
easily guessed,


62
00:03:10,657 --> 00:03:13,393 line:-2
and, new this year,
iOS will flag passwords


63
00:03:13,460 --> 00:03:15,596 line:-1
that are seen in public data breaches.


64
00:03:15,662 --> 00:03:19,299 line:-2
In fact, iCloud Keychain
will show users notifications


65
00:03:19,366 --> 00:03:22,035 line:-2
when one of their passwords
has been seen in a data breach.


66
00:03:23,203 --> 00:03:25,038 line:-1
Tapping on one of those notifications


67
00:03:25,105 --> 00:03:27,241 line:-2
will bring them
into Security Recommendations


68
00:03:27,307 --> 00:03:29,243 line:-1
to view the warning for the password.


69
00:03:31,512 --> 00:03:33,380 line:-1
Having a password be publicly breached


70
00:03:33,447 --> 00:03:36,383 line:-2
puts all accounts
using that password at risk.


71
00:03:36,450 --> 00:03:37,918 line:-1
We'll show this notification


72
00:03:37,985 --> 00:03:41,188 line:-2
for any account using a password
that has been breached,


73
00:03:41,255 --> 00:03:43,457 line:-2
even if the breach
came from another service.


74
00:03:43,857 --> 00:03:45,926 line:-2
Each of the warnings
in Security Recommendations


75
00:03:45,993 --> 00:03:49,596 line:-2
will include actions the user can take
to fix the corresponding account.


76
00:03:50,464 --> 00:03:52,699 line:-2
One option users will have
to fix their accounts


77
00:03:52,766 --> 00:03:55,135 line:-2
is the "Change Password
on Website" button.


78
00:03:55,202 --> 00:03:56,603 line:-1
This will take the user to the web


79
00:03:56,670 --> 00:03:59,206 line:-2
to the credential's
Well-Known-Change-Password-URL,


80
00:03:59,273 --> 00:04:01,241 line:-1
if the service has adopted that standard.


81
00:04:01,308 --> 00:04:03,477 line:-1
This is great for motivated users,


82
00:04:03,544 --> 00:04:06,847 line:-2
but navigating through a website
to change your password is a hassle.


83
00:04:06,914 --> 00:04:11,118 line:-2
Most users avoid changing passwords
because doing so feels like so much work.


84
00:04:11,185 --> 00:04:14,755 line:-2
Ideally, users should be able to visit
Security Recommendations


85
00:04:14,821 --> 00:04:17,457 line:-2
and quickly make progress
on addressing their warnings.


86
00:04:18,591 --> 00:04:20,394 line:-1
New in iOS this year,


87
00:04:20,459 --> 00:04:22,663 line:-2
it will be possible
with just the tap of a button


88
00:04:22,729 --> 00:04:23,964 line:-1
in the password manager


89
00:04:24,031 --> 00:04:26,733 line:-2
for users to upgrade
at-risk password-based accounts


90
00:04:26,800 --> 00:04:29,403 line:-2
to an automatically-generated
strong password...


91
00:04:30,704 --> 00:04:33,340 line:-1
or even to use Sign in with Apple.


92
00:04:33,841 --> 00:04:35,175 line:-1
These upgrades are powered


93
00:04:35,242 --> 00:04:38,779 line:-2
by the new account authentication
modification extension.


94
00:04:38,846 --> 00:04:42,850 line:-2
These extensions
change user perception on fixing accounts.


95
00:04:42,916 --> 00:04:45,853 line:-2
They provide fast, easy
account security upgrades.


96
00:04:47,254 --> 00:04:49,656 line:-2
The extension point
offers two upgrade options:


97
00:04:49,723 --> 00:04:53,060 line:-2
upgrading to Sign in with Apple,
and upgrading to a strong password.


98
00:04:54,194 --> 00:04:56,563 line:-2
If necessary,
extensions allow the opportunity


99
00:04:56,630 --> 00:04:59,800 line:-2
for additional user authentication
before completing an upgrade.


100
00:05:00,367 --> 00:05:04,104 line:-2
For example, you may want a user to enter
an SMS two-factor authentication code


101
00:05:04,171 --> 00:05:07,174 line:-2
before they switch their account
to use Sign in with Apple.


102
00:05:07,241 --> 00:05:09,042 line:-1
With just one extension implementation,


103
00:05:09,109 --> 00:05:11,912 line:-2
these upgrades can be accessed
from three places:


104
00:05:12,513 --> 00:05:15,482 line:-2
in the password manager,
when looking at a password detail view...


105
00:05:16,483 --> 00:05:18,852 line:-2
directly off of
a high-priority recommendation item


106
00:05:18,919 --> 00:05:20,420 line:-1
in Security Recommendations,


107
00:05:21,221 --> 00:05:25,492 line:-2
or, third, via automatic system prompts
when users sign in to your apps.


108
00:05:25,559 --> 00:05:28,061 line:-2
The system will prompt users
with security recommendations


109
00:05:28,128 --> 00:05:31,098 line:-2
when they sign in to your app
with a weak or breached password.


110
00:05:32,900 --> 00:05:34,568 line:-1
Once you've implemented an extension,


111
00:05:34,635 --> 00:05:37,070 line:-2
you can also add these upgrade flows
within your app


112
00:05:37,137 --> 00:05:39,940 line:-2
using new
AuthenticationServices framework API.


113
00:05:40,007 --> 00:05:41,909 line:-1
This is an awesome way that you can offer


114
00:05:41,975 --> 00:05:44,144 line:-2
system-integrated
account security upgrades


115
00:05:44,211 --> 00:05:47,981 line:-2
with the user experience
you want your users to have in your app.


116
00:05:48,048 --> 00:05:50,150 line:-2
We'll walk through
how to do this towards the end.


117
00:05:50,984 --> 00:05:51,985 line:-1
Now that I've introduced


118
00:05:52,052 --> 00:05:55,189 line:-2
the new account authentication
modification extension point,


119
00:05:55,255 --> 00:05:57,624 line:-2
let's walk through
how to implement an extension.


120
00:05:57,691 --> 00:05:59,259 line:-1
Throughout the presentation,


121
00:05:59,326 --> 00:06:01,828 line:-2
I'll be adding upgrades
to my test app, Shiny.


122
00:06:02,462 --> 00:06:04,431 line:-2
We're going to walk through
four different aspects


123
00:06:04,498 --> 00:06:05,899 line:-1
of implementing the extension.


124
00:06:05,966 --> 00:06:08,202 line:-2
Depending on which upgrades
you choose to support,


125
00:06:08,268 --> 00:06:10,270 line:-1
some of these steps may not apply to you.


126
00:06:10,337 --> 00:06:12,039 line:-1
Regardless, they'll all help you


127
00:06:12,105 --> 00:06:14,508 line:-2
better understand
what's involved in this process.


128
00:06:14,975 --> 00:06:18,879 line:-2
We'll start by discussing how to associate
your app with your domain.


129
00:06:19,580 --> 00:06:21,748 line:-2
For your app to be able
to upgrade users' accounts


130
00:06:21,815 --> 00:06:23,317 line:-1
saved in the password manager,


131
00:06:23,383 --> 00:06:26,053 line:-2
you'll need to securely associate
your app and domain.


132
00:06:26,119 --> 00:06:29,256 line:-2
If you haven't already done this
for your app to support Password AutoFill,


133
00:06:29,323 --> 00:06:30,424 line:-1
it's really easy.


134
00:06:30,490 --> 00:06:33,827 line:-2
You'll serve a JSON file
on your domain's server


135
00:06:33,894 --> 00:06:37,364 line:-2
that identifies that the domain
is affiliated with your app.


136
00:06:37,431 --> 00:06:40,567 line:-2
For the purpose of tying your app
and domain together for authentication,


137
00:06:40,634 --> 00:06:42,803 line:-1
use the "webcredentials" service.


138
00:06:42,870 --> 00:06:46,673 line:-2
Then you'll add a matching
associated domain entitlement to your app.


139
00:06:47,708 --> 00:06:48,976 line:-1
You can do that in Xcode


140
00:06:49,042 --> 00:06:52,980 line:-2
by adding the associated domain capability
and specifying the domain for your app.


141
00:06:54,381 --> 00:06:57,284 line:0
Once you've associated your app
with the webcredentials service,


142
00:06:57,351 --> 00:06:59,353 line:0
your app will be eligible to offer
an upgrade


143
00:06:59,419 --> 00:07:02,022 line:0
for a password saved
in the user's iCloud Keychain.


144
00:07:02,656 --> 00:07:05,392 line:0
For more information
about associating apps and domains,


145
00:07:05,459 --> 00:07:09,897 line:0
check out the WWDC session,
"Introducing Password AutoFill for Apps."


146
00:07:10,364 --> 00:07:13,066 line:-2
And that was associating your app
with your domain.


147
00:07:13,133 --> 00:07:16,703 line:-2
Now, it's time to implement
a strong password upgrade.


148
00:07:16,770 --> 00:07:18,739 line:-1
A strong password upgrade helps users


149
00:07:18,805 --> 00:07:21,942 line:-2
by giving them a strong, unique password
for your service.


150
00:07:22,009 --> 00:07:24,945 line:-2
The very first step will be
to create a new target in your project


151
00:07:25,012 --> 00:07:29,416 line:-2
using the new account authentication
modification extension template in Xcode.


152
00:07:29,483 --> 00:07:32,486 line:-2
Next, you'll need to declare support
for strong password upgrades


153
00:07:32,553 --> 00:07:34,821 line:-1
in your extension's Info.plist.


154
00:07:34,888 --> 00:07:37,357 line:-2
Setting the
ASAccountAuthenticationModification-


155
00:07:37,424 --> 00:07:40,194 line:-2
SupportsStrongPasswordChange key
to "yes"


156
00:07:40,260 --> 00:07:41,762 line:-1
will tell the system to offer


157
00:07:41,828 --> 00:07:44,164 line:-2
the strong password
extension upgrade option


158
00:07:44,231 --> 00:07:46,300 line:-1
for credentials for your app.


159
00:07:46,366 --> 00:07:49,269 line:-2
The template will declare support
for both upgrades by default.


160
00:07:49,336 --> 00:07:52,406 line:-2
If you don't want to support this upgrade,
you can just set the key to "no."


161
00:07:53,207 --> 00:07:55,742 line:-2
You'll implement your extension
in a special subclass,


162
00:07:55,809 --> 00:07:57,411 line:-1
which will be the brain of the operation


163
00:07:57,477 --> 00:08:00,113 line:-2
and contains the business logic
for the upgrade,


164
00:08:00,180 --> 00:08:02,216 line:-2
including communicating
with your back-end server


165
00:08:02,282 --> 00:08:04,351 line:-1
to commit account changes.


166
00:08:04,418 --> 00:08:07,221 line:-2
It's exposed out of
the AuthenticationServices framework,


167
00:08:07,287 --> 00:08:09,156 line:-2
and you'll notice
that it's a ViewController.


168
00:08:10,424 --> 00:08:13,293 line:-2
The reason it's a ViewController
is because you'll have the flexibility


169
00:08:13,360 --> 00:08:16,463 line:-2
to show security step-up UI
to have the user fully authorize


170
00:08:16,530 --> 00:08:18,999 line:-2
before performing an upgrade,
if necessary.


171
00:08:19,066 --> 00:08:21,735 line:-2
We'll talk about that later,
and for right now,


172
00:08:21,802 --> 00:08:25,072 line:-2
we'll cover upgrade flows
without security step-up UI.


173
00:08:25,772 --> 00:08:28,942 line:-2
When users tap an extension upgrade button
within the password manager,


174
00:08:29,009 --> 00:08:31,311 line:-1
or just after signing into your app,


175
00:08:31,378 --> 00:08:35,315 line:-2
the system will launch your extension
and start an upgrade request


176
00:08:35,381 --> 00:08:39,219 line:-2
with a system-generated strong password
and an existing credential.


177
00:08:40,953 --> 00:08:43,857 line:-2
The system will call
changePasswordWithoutUserInteraction


178
00:08:43,924 --> 00:08:46,793 line:-2
on the ViewController
to begin the request,


179
00:08:46,860 --> 00:08:50,030 line:-2
passing in a serviceIdentifier
which provides the domain or URL


180
00:08:50,097 --> 00:08:52,366 line:-1
for the passed-in credential.


181
00:08:52,432 --> 00:08:53,934 line:-1
The serviceIdentifier is useful


182
00:08:54,001 --> 00:08:57,504 line:-2
if your extension offers upgrades
for several different services.


183
00:08:57,571 --> 00:09:02,075 line:-2
You'll also be passed a new, unique,
strong password generated by the system,


184
00:09:02,142 --> 00:09:05,913 line:-2
and userInfo, which we will revisit
when we talk about in-app upgrades.


185
00:09:05,979 --> 00:09:09,183 line:-2
This argument will always be nil
for system-initiated upgrades.


186
00:09:10,250 --> 00:09:12,553 line:-1
Upon receiving this initial request,


187
00:09:12,619 --> 00:09:15,556 line:-2
your extension needs to authorize
the upgrade before proceeding,


188
00:09:15,622 --> 00:09:18,225 line:-2
communicating with your back-end server
to do so.


189
00:09:18,292 --> 00:09:19,693 line:-1
The result of the authorization


190
00:09:19,760 --> 00:09:21,995 line:-2
will decide what your ViewController
should do next.


191
00:09:22,663 --> 00:09:24,698 line:-2
Your extension should check
with your back-end server


192
00:09:24,765 --> 00:09:28,702 line:-2
to see if it is authorized to perform
the upgrade for the passed-in credential.


193
00:09:28,769 --> 00:09:31,905 line:-2
You can also leverage
any existing login cookies or tokens


194
00:09:31,972 --> 00:09:34,808 line:-2
stored in a data container
shared between your app and extension.


195
00:09:35,843 --> 00:09:38,645 line:-2
If the upgrade is authorized,
you can continue with the upgrade.


196
00:09:39,746 --> 00:09:42,049 line:-1
If not, you'll need to cancel the upgrade.


197
00:09:43,383 --> 00:09:47,154 line:-2
When your extension is informed
that the authorization failed,


198
00:09:47,221 --> 00:09:48,722 line:-1
it should cancel the request.


199
00:09:51,024 --> 00:09:52,593 line:-1
In your extension implementation,


200
00:09:52,659 --> 00:09:54,394 line:-2
you should do this
by canceling the request


201
00:09:54,461 --> 00:09:56,196 line:-1
with the failed error code.


202
00:09:56,263 --> 00:09:59,333 line:-2
If you'd like to provide
a failure message to be shown to the user,


203
00:09:59,399 --> 00:10:01,235 line:-1
you can specify one in the userInfo


204
00:10:01,301 --> 00:10:05,105 line:-2
using the ASExtensionLocalized-
FailureReasonErrorKey.


205
00:10:05,172 --> 00:10:07,674 line:-2
If not, the system will provide
a default error message


206
00:10:07,741 --> 00:10:10,177 line:-1
and encourage the user to try again later.


207
00:10:10,244 --> 00:10:12,813 line:-1
If upgrade authorization succeeds,


208
00:10:12,880 --> 00:10:16,683 line:-2
you can commit the change on your end
and complete the request.


209
00:10:18,919 --> 00:10:20,120 line:-1
In this successful case,


210
00:10:20,187 --> 00:10:22,956 line:-2
your extension should commit the change
on your back-end server.


211
00:10:24,124 --> 00:10:26,960 line:0
If the change commits successfully,
you can complete the upgrade


212
00:10:27,027 --> 00:10:29,062 line:0
by calling
completeChangePasswordRequest


213
00:10:29,129 --> 00:10:32,866 line:0
using an ASPasswordCredential
with the username and updated password.


214
00:10:34,334 --> 00:10:38,272 line:0
Note that you can change the new password
passed in from the system if you need to.


215
00:10:38,338 --> 00:10:40,440 line:0
If you end up doing so,
you should be sure to pass


216
00:10:40,507 --> 00:10:42,776 line:0
the correct password
to the completion method.


217
00:10:42,843 --> 00:10:44,978 line:0
That's the password
that will be saved to Keychain.


218
00:10:46,280 --> 00:10:49,516 line:-2
This is an example password
that iCloud Keychain could generate.


219
00:10:49,583 --> 00:10:52,286 line:-2
It's a strong password
designed to be easily typeable


220
00:10:52,352 --> 00:10:55,889 line:-2
for those times that AutoFill can't help
the user with using the password.


221
00:10:56,456 --> 00:10:58,892 line:-2
It's also designed
with a length and character set


222
00:10:58,959 --> 00:11:00,894 line:-1
to be compatible with most services.


223
00:11:00,961 --> 00:11:03,897 line:-2
That said,
if the iCloud Keychain-generated passwords


224
00:11:03,964 --> 00:11:05,599 line:-1
aren't compatible with your service,


225
00:11:05,666 --> 00:11:07,968 line:-1
you can specify your own password rules


226
00:11:08,035 --> 00:11:10,904 line:-2
to ensure iCloud Keychain
generates a compatible password.


227
00:11:10,971 --> 00:11:13,373 line:-2
You can specify
password requirements for your app


228
00:11:13,440 --> 00:11:16,009 line:-1
with a technology called Password Rules.


229
00:11:16,076 --> 00:11:19,146 line:-2
At the Password Rules website,
you'll find a validation tool


230
00:11:19,213 --> 00:11:22,082 line:-2
that you can use to make
your passwordrules string.


231
00:11:22,149 --> 00:11:25,185 line:-2
You can then add it
to your extension's Info.plist using the


232
00:11:25,252 --> 00:11:30,090 line:-2
ASAccountAuthenticationModification-
PasswordGenerationRequirements key.


233
00:11:30,157 --> 00:11:32,426 line:-2
Once again,
you should only need to do this


234
00:11:32,492 --> 00:11:35,028 line:-2
if you find the default passwords
generated by the system


235
00:11:35,095 --> 00:11:37,364 line:-2
are not compatible
with your password rules.


236
00:11:38,832 --> 00:11:41,368 line:-2
And that's how you support
strong password upgrades.


237
00:11:41,435 --> 00:11:45,105 line:0
Next, let's look at supporting
upgrades to Sign in with Apple.


238
00:11:45,172 --> 00:11:49,243 line:0
Before adding Sign in with Apple upgrades,
you'll need to support Sign in with Apple.


239
00:11:49,309 --> 00:11:50,944 line:0
Check out these talks for more information


240
00:11:51,011 --> 00:11:53,380 line:0
on adding Sign in with Apple support
to your apps.


241
00:11:54,548 --> 00:11:56,517 line:-2
Just as we saw
with strong password upgrades,


242
00:11:56,583 --> 00:11:59,853 line:-2
you'll need to declare that your extension
supports Sign in with Apple upgrades


243
00:11:59,920 --> 00:12:01,922 line:-1
in your extension's Info.plist.


244
00:12:02,356 --> 00:12:05,592 line:-2
You'll do this by setting the
ASAccountAuthenticationModification-


245
00:12:05,659 --> 00:12:08,262 line:-2
SupportsUpgradeToSignInWithApple
key to "yes."


246
00:12:09,763 --> 00:12:12,799 line:-2
By default, the template will declare
support for both upgrades.


247
00:12:12,866 --> 00:12:15,802 line:-2
If you don't want to support this upgrade,
you can just set it to "no."


248
00:12:16,870 --> 00:12:20,240 line:-2
Sign in with Apple upgrades
start just like strong password upgrades.


249
00:12:20,307 --> 00:12:22,476 line:-1
The system will launch your extension


250
00:12:22,543 --> 00:12:26,213 line:-2
and make the upgrade request
with an existing credential.


251
00:12:27,181 --> 00:12:28,182 line:-1
The system will call


252
00:12:28,248 --> 00:12:30,784 line:-2
convertAccountToSignInWithApple-
WithoutUserInteraction


253
00:12:30,851 --> 00:12:32,819 line:-2
on the ViewController
to begin the request...


254
00:12:33,887 --> 00:12:37,858 line:-2
passing in a serviceIdentifier
and an existing password credential.


255
00:12:39,459 --> 00:12:43,764 line:-2
And finally, userInfo, which we'll ignore
until we talk about in-app upgrades.


256
00:12:43,830 --> 00:12:47,067 line:-2
UserInfo will always be nil
for system-initiated upgrades.


257
00:12:48,936 --> 00:12:52,172 line:-2
Once again, your extension
will need to authorize the upgrade.


258
00:12:54,741 --> 00:12:56,777 line:-2
Your extension should check
with your back-end server


259
00:12:56,844 --> 00:12:58,779 line:-2
to see if it is authorized
to perform the upgrade


260
00:12:58,846 --> 00:13:00,581 line:-1
for the passed-in credential.


261
00:13:00,647 --> 00:13:03,817 line:-2
You can also leverage
any existing login cookies or tokens


262
00:13:03,884 --> 00:13:06,854 line:-2
stored in a data container
shared between your app and extension.


263
00:13:08,488 --> 00:13:12,025 line:-2
If the upgrade is authorized,
you can continue with the upgrade.


264
00:13:12,092 --> 00:13:14,795 line:-1
If not, you'll need to cancel the upgrade.


265
00:13:15,095 --> 00:13:18,298 line:-2
When your extension is informed
that the authorization failed,


266
00:13:18,365 --> 00:13:19,833 line:-1
it should cancel the request.


267
00:13:23,036 --> 00:13:24,738 line:-1
In your extension implementation,


268
00:13:24,805 --> 00:13:26,607 line:-2
you should do this
by canceling the request


269
00:13:26,673 --> 00:13:27,975 line:-1
with the failure error code.


270
00:13:28,542 --> 00:13:32,012 line:-2
You can use the ASExtension-
LocalizedFailureReasonErrorKey


271
00:13:32,079 --> 00:13:35,315 line:-2
to communicate the reason for the failure
to the user, if you'd like.


272
00:13:36,850 --> 00:13:39,253 line:-1
When upgrade authorization succeeds,


273
00:13:39,319 --> 00:13:41,755 line:-2
your extension should request
a Sign in with Apple credential


274
00:13:41,822 --> 00:13:42,823 line:-1
for the upgrade.


275
00:13:45,859 --> 00:13:49,096 line:-2
In code, your extension will request
the credential from the system


276
00:13:49,162 --> 00:13:53,534 line:-2
by calling getSignInWithAppleUpgrade-
Authorization on the extension context.


277
00:13:53,600 --> 00:13:55,569 line:-2
This method takes
state and nonce arguments


278
00:13:55,636 --> 00:13:59,973 line:-2
that you can use to securely verify
the Apple ID credential for the upgrade.


279
00:14:00,040 --> 00:14:01,942 line:-2
To learn more about this,
you should check out


280
00:14:02,009 --> 00:14:03,944 line:-2
the Sign in with Apple talks
referenced earlier.


281
00:14:05,546 --> 00:14:07,481 line:-2
It's possible
that when you call this method,


282
00:14:07,548 --> 00:14:10,017 line:-2
the system won't be able
to return a credential


283
00:14:10,083 --> 00:14:12,252 line:-2
and your extension
will need to fail the request.


284
00:14:13,086 --> 00:14:16,290 line:-2
The system may fail to return
a credential here for various reasons,


285
00:14:16,356 --> 00:14:19,993 line:-2
such as the user tapping the cancel button
on the system Sign in with Apple sheet,


286
00:14:20,060 --> 00:14:21,728 line:-1
or if there's a bad network connection.


287
00:14:23,330 --> 00:14:27,067 line:0
In this case, your extension will cancel
the request with the failure error code.


288
00:14:28,969 --> 00:14:32,673 line:-2
If the system returns a Sign in with Apple
credential successfully,


289
00:14:32,739 --> 00:14:36,710 line:-2
you should do the necessary bookkeeping
to process the upgrade on your end,


290
00:14:36,777 --> 00:14:38,912 line:-2
and then successfully
complete the request.


291
00:14:42,316 --> 00:14:45,419 line:0
In code, once your extension
has successfully committed the upgrade


292
00:14:45,485 --> 00:14:46,653 line:0
on your back-end server,


293
00:14:46,720 --> 00:14:48,856 line:0
it can complete the request
by simply calling


294
00:14:48,922 --> 00:14:52,593 line:0
completeUpgradeToSignInWithApple
on the extensionContext.


295
00:14:52,659 --> 00:14:54,561 line:-1
One of the promises of Sign in with Apple


296
00:14:54,628 --> 00:14:57,865 line:-2
is having one fewer password
to manage and keep track of.


297
00:14:57,931 --> 00:14:59,433 line:-1
Once the upgrade is completed,


298
00:14:59,499 --> 00:15:03,337 line:-2
the system will delete the Keychain
password credential used for the upgrade.


299
00:15:03,871 --> 00:15:06,306 line:-2
These flows cover the ideal scenarios
for upgrades,


300
00:15:06,373 --> 00:15:08,742 line:-1
with minimal user interaction.


301
00:15:08,809 --> 00:15:10,344 line:-1
However, in some cases,


302
00:15:10,410 --> 00:15:13,080 line:-2
your extension may require
some additional user authentication


303
00:15:13,146 --> 00:15:14,181 line:-1
to complete an upgrade.


304
00:15:14,915 --> 00:15:19,353 line:-2
Your extension will have the capability to
show security step-up UI in upgrade flows.


305
00:15:19,419 --> 00:15:23,490 line:-2
As an example, you may want the user
to enter a two-factor authentication code


306
00:15:23,557 --> 00:15:24,625 line:-1
to complete an upgrade.


307
00:15:26,126 --> 00:15:27,427 line:-1
Let's pick back up on the flow


308
00:15:27,494 --> 00:15:30,430 line:-2
when your extension is verifying
the credential passed in for the upgrade.


309
00:15:32,132 --> 00:15:34,301 line:-2
When your extension is checking
with your back-end server


310
00:15:34,368 --> 00:15:35,602 line:-1
to authorize the upgrade,


311
00:15:35,669 --> 00:15:39,907 line:-2
we saw that if the upgrade is authorized,
you can continue with the upgrade,


312
00:15:39,973 --> 00:15:42,376 line:-2
or if not,
you'll need to cancel the upgrade.


313
00:15:43,110 --> 00:15:45,412 line:0
But now,
we'll consider a third possibility


314
00:15:45,479 --> 00:15:48,615 line:0
in which further authorization is required
to complete the upgrade.


315
00:15:49,917 --> 00:15:51,952 line:-1
When further authorization is required,


316
00:15:52,019 --> 00:15:54,821 line:-2
your extension can cancel
the initial request


317
00:15:54,888 --> 00:15:57,824 line:-2
and specify that it needs to show
security step-up UI.


318
00:16:00,260 --> 00:16:02,563 line:0
Your extension can do this
by canceling the initial request


319
00:16:02,629 --> 00:16:04,998 line:0
with the userInteractionRequired
error code.


320
00:16:06,133 --> 00:16:09,002 line:-2
In response,
the system will create a new request


321
00:16:09,069 --> 00:16:11,104 line:-1
configured to allow user interaction.


322
00:16:12,940 --> 00:16:15,409 line:-2
The system will call
prepareInterfaceToChangePassword


323
00:16:15,475 --> 00:16:18,445 line:-2
on your ViewController subclass
for strong password upgrades.


324
00:16:19,513 --> 00:16:21,014 line:-1
For Sign in with Apple upgrades,


325
00:16:21,081 --> 00:16:25,152 line:-2
the system will call prepareInterface-
ToConvertAccountToSignInWithApple.


326
00:16:25,219 --> 00:16:26,286 line:-1
In each of these methods,


327
00:16:26,353 --> 00:16:28,822 line:-2
your extension should quickly do
any work necessary


328
00:16:28,889 --> 00:16:30,557 line:-1
to prepare the interface to be presented.


329
00:16:31,225 --> 00:16:34,161 line:-2
Once this method finishes,
the system will present your interface.


330
00:16:35,429 --> 00:16:39,299 line:-2
Your interface will be presented
with a system-provided navigation bar


331
00:16:39,366 --> 00:16:42,202 line:-2
with the name of the containing app
for the extension as the title,


332
00:16:42,269 --> 00:16:43,370 line:-1
and a cancel button.


333
00:16:44,271 --> 00:16:47,574 line:-2
Once your interface is presented,
there are three possible scenarios.


334
00:16:48,809 --> 00:16:51,144 line:-2
If the additional
user authentication fails


335
00:16:51,211 --> 00:16:52,980 line:-1
or something else goes wrong,


336
00:16:53,046 --> 00:16:56,250 line:-2
you can fail the request
by canceling with the failure error code.


337
00:16:57,684 --> 00:17:01,822 line:-2
The second scenario is that all goes well,
and you can continue with the upgrade.


338
00:17:01,889 --> 00:17:03,357 line:-1
For a strong password upgrade,


339
00:17:03,423 --> 00:17:05,759 line:-2
the next step will be
to commit the password change.


340
00:17:07,227 --> 00:17:09,896 line:-2
For a Sign in with Apple upgrade,
your extension's next step


341
00:17:09,963 --> 00:17:12,031 line:-2
will be to request
the Sign in with Apple credential.


342
00:17:13,200 --> 00:17:14,667 line:-1
The system will take this as a sign


343
00:17:14,734 --> 00:17:17,069 line:-2
that the work in your security step-up UI
is complete,


344
00:17:17,137 --> 00:17:20,374 line:-2
and will dismiss it to show
the system Sign in with Apple sheet.


345
00:17:20,440 --> 00:17:24,178 line:-2
From here, the upgrade will continue
the same exact way we saw earlier.


346
00:17:25,846 --> 00:17:28,749 line:-2
The third possibility,
regardless of the upgrade type,


347
00:17:28,815 --> 00:17:31,652 line:-2
is that the user taps
the system-provided cancel button.


348
00:17:32,686 --> 00:17:35,589 line:-2
In this case, your extension
will need to cancel the request.


349
00:17:36,924 --> 00:17:40,727 line:-2
The system will call cancelRequest
on your ViewController subclass.


350
00:17:40,794 --> 00:17:42,829 line:-2
The superclass implementation
of this method


351
00:17:42,896 --> 00:17:46,066 line:-2
simply cancels the request
with the userCanceled error code.


352
00:17:47,634 --> 00:17:50,971 line:-2
If you want the ability to clean up state
before the request is canceled,


353
00:17:51,038 --> 00:17:52,306 line:-1
you should override this method,


354
00:17:52,372 --> 00:17:55,709 line:-2
and be sure to still cancel the request
at the end.


355
00:17:55,776 --> 00:17:58,345 line:-2
We've completed the core implementation
for the extension


356
00:17:58,412 --> 00:18:00,147 line:-1
and the hard work is done.


357
00:18:00,214 --> 00:18:03,283 line:-2
Now, if you want to use the upgrades
from within your app,


358
00:18:03,350 --> 00:18:05,452 line:-2
all you have to do
is invoke the extension.


359
00:18:06,119 --> 00:18:08,021 line:-1
Let's talk about in-app upgrades.


360
00:18:08,088 --> 00:18:11,925 line:-2
In-app upgrades begin when your app
creates and performs an upgrade request.


361
00:18:13,160 --> 00:18:15,262 line:-2
Performing the request
will launch your extension.


362
00:18:16,463 --> 00:18:20,234 line:-2
The request will have a username
and will not have a password.


363
00:18:20,300 --> 00:18:21,802 line:-1
There's no password in this flow


364
00:18:21,869 --> 00:18:24,972 line:-2
because your app should not be able
to provide plaintext passwords,


365
00:18:25,038 --> 00:18:26,640 line:-1
and because, unlike the system,


366
00:18:26,707 --> 00:18:28,642 line:-2
you won't have a handle
to a Keychain credential


367
00:18:28,709 --> 00:18:30,577 line:-1
to perform the upgrade with.


368
00:18:30,644 --> 00:18:33,347 line:-2
However, you may pass
any information you'd like


369
00:18:33,413 --> 00:18:34,748 line:-1
to your extension for the upgrade


370
00:18:34,815 --> 00:18:38,418 line:-2
with the userInfo property
of the request object.


371
00:18:38,485 --> 00:18:39,720 line:-1
We ignored this earlier


372
00:18:39,786 --> 00:18:42,656 line:-2
because it's always nil
for system-initiated upgrades.


373
00:18:43,790 --> 00:18:46,860 line:-2
Your extension can use this information
to authorize the upgrade.


374
00:18:47,828 --> 00:18:50,631 line:-2
The upgrade authorization process
works as outlined before,


375
00:18:50,697 --> 00:18:53,166 line:-2
where your extension will need to talk
to your back-end server


376
00:18:53,233 --> 00:18:56,236 line:-2
to ensure the account is authorized
to perform the upgrade,


377
00:18:56,303 --> 00:19:00,240 line:-2
with the same three possible outcomes
of successful authorization,


378
00:19:00,307 --> 00:19:01,909 line:-1
failed authorization,


379
00:19:01,975 --> 00:19:04,745 line:0
or finding that
further authorization is required.


380
00:19:04,811 --> 00:19:07,881 line:0
Ideally, you shouldn't need
any further authorization in this flow


381
00:19:07,948 --> 00:19:09,750 line:0
as the user
is already logged into the app.


382
00:19:11,485 --> 00:19:12,786 line:-1
Let's add in-app upgrades


383
00:19:12,853 --> 00:19:15,022 line:-2
to the account settings section
of the Shiny app.


384
00:19:16,356 --> 00:19:18,959 line:-2
Let's start with
in-app strong password upgrades.


385
00:19:19,026 --> 00:19:21,061 line:-2
The upgrade will be added here
in the handler


386
00:19:21,128 --> 00:19:24,097 line:-2
for the changeToStrongPassword button
in the account settings section.


387
00:19:25,132 --> 00:19:27,434 line:-2
The first step
is to specify the serviceIdentifier


388
00:19:27,501 --> 00:19:29,403 line:-1
for the credential to be upgraded


389
00:19:29,469 --> 00:19:33,240 line:-2
by creating an ASCredential-
ServiceIdentifier for the Shiny app.


390
00:19:33,307 --> 00:19:36,076 line:-2
The next step is to get the username
for the upgrade.


391
00:19:36,143 --> 00:19:37,911 line:-1
Remember that for in-app upgrades,


392
00:19:37,978 --> 00:19:40,180 line:-2
your extension
will not receive a password.


393
00:19:40,247 --> 00:19:41,715 line:-1
You can authorize the upgrade


394
00:19:41,782 --> 00:19:45,819 line:-2
by passing authorization information
in on the request's userInfo.


395
00:19:45,886 --> 00:19:48,422 line:-2
In this example,
I'm passing in the auth token


396
00:19:48,488 --> 00:19:50,657 line:-2
for the current user
logged into the Shiny app


397
00:19:50,724 --> 00:19:53,961 line:-2
for the Shiny extension to use
to authorize the upgrade.


398
00:19:54,027 --> 00:19:55,562 line:-1
These three pieces of information


399
00:19:55,629 --> 00:19:58,465 line:-2
are used to create
a strong password upgrade request.


400
00:19:58,532 --> 00:20:02,569 line:-2
Next, we need to create an ASAccount-
AuthenticationModificationController


401
00:20:02,636 --> 00:20:03,804 line:-1
to perform the request.


402
00:20:05,172 --> 00:20:07,307 line:-2
In order to be informed
of the results of the upgrade,


403
00:20:07,374 --> 00:20:10,611 line:-2
the ViewController needs to be set
as the upgrade controller's delegate.


404
00:20:11,645 --> 00:20:15,249 line:-2
Lastly, a presentationContextProvider
must always be provided


405
00:20:15,315 --> 00:20:17,651 line:-2
to tell the system
the window to show UI in.


406
00:20:18,385 --> 00:20:21,622 line:0
Once this is all done,
the request can be performed.


407
00:20:22,055 --> 00:20:25,926 line:-2
Now, let's quickly see how to add
in-app Sign in with Apple upgrades.


408
00:20:25,993 --> 00:20:29,463 line:-2
They're very, very similar to the strong
password upgrades we just saw.


409
00:20:29,796 --> 00:20:32,332 line:0
The only difference
for the in-app Sign in with Apple upgrades


410
00:20:32,399 --> 00:20:35,669 line:0
will be to create and use
a Sign in with Apple request object.


411
00:20:37,337 --> 00:20:39,173 line:-1
For in-app upgrades, you are in control


412
00:20:39,239 --> 00:20:43,043 line:-2
for communicating upgrade results
to the user with your user interface.


413
00:20:43,443 --> 00:20:47,481 line:-2
The ASAccountAuthentication-
ModificationController delegate protocol


414
00:20:47,548 --> 00:20:49,783 line:-1
has two methods to handle upgrade results.


415
00:20:49,850 --> 00:20:53,153 line:-2
There's a method that will be called
for successful upgrades


416
00:20:53,220 --> 00:20:55,722 line:-2
where you should inform the user
that the upgrade succeeded.


417
00:20:56,957 --> 00:20:58,425 line:-1
After a successful upgrade,


418
00:20:58,492 --> 00:21:00,994 line:-2
the system will look
for a Keychain credential for your service


419
00:21:01,061 --> 00:21:03,664 line:-1
with the username used in the upgrade.


420
00:21:03,730 --> 00:21:05,465 line:-1
If a Keychain credential is found,


421
00:21:05,532 --> 00:21:08,869 line:-2
it will either be updated or removed,
depending on the type of upgrade.


422
00:21:10,838 --> 00:21:14,007 line:-2
There's also a method to indicate
an upgrade has failed


423
00:21:14,074 --> 00:21:15,976 line:-2
where you should inform the user
that it failed


424
00:21:16,043 --> 00:21:17,911 line:-1
and provide the reason why, if possible.


425
00:21:19,680 --> 00:21:22,749 line:-2
Here's a successful Sign in with Apple
upgrade in the Shiny app.


426
00:21:29,256 --> 00:21:31,124 line:-1
People love Sign in with Apple.


427
00:21:31,191 --> 00:21:34,027 line:-2
Providing this upgrade flow in your app
allows your users


428
00:21:34,094 --> 00:21:36,196 line:-2
to convert existing accounts
to Sign in with Apple


429
00:21:36,263 --> 00:21:38,365 line:-1
without having to create a new account.


430
00:21:38,432 --> 00:21:41,368 line:-2
We just looked at adding upgrades
in an account settings view.


431
00:21:41,435 --> 00:21:44,137 line:-2
Another great opportunity
to offer upgrades


432
00:21:44,204 --> 00:21:46,807 line:-2
is when a user transitions
into using your app


433
00:21:46,874 --> 00:21:48,509 line:-1
after using your App Clip.


434
00:21:49,142 --> 00:21:51,044 line:-1
Let's quickly review some best practices


435
00:21:51,111 --> 00:21:54,515 line:-2
for adopting the account authentication
modification extension point.


436
00:21:56,617 --> 00:21:59,853 line:-2
Keep upgrades as quick
and as effortless as possible.


437
00:21:59,920 --> 00:22:03,724 line:-2
Only request to show your extension's UI
when absolutely necessary.


438
00:22:03,790 --> 00:22:07,394 line:-2
Your extension can authorize upgrades by
communicating with your back-end server,


439
00:22:07,461 --> 00:22:10,464 line:-2
but you can also leverage
any existing login cookies or tokens


440
00:22:10,531 --> 00:22:14,034 line:-2
that you have saved in a data container
shared between your app and extension.


441
00:22:14,101 --> 00:22:16,570 line:-2
Once an account upgrades
to use Sign in with Apple,


442
00:22:16,637 --> 00:22:19,540 line:-2
do not allow the account to log in
using a password anymore.


443
00:22:20,841 --> 00:22:23,010 line:-2
If you override
the system cancel button method,


444
00:22:23,076 --> 00:22:25,078 line:-1
cancel the request as soon as possible.


445
00:22:26,880 --> 00:22:29,283 line:0
Consider offering
account security upgrade options


446
00:22:29,349 --> 00:22:31,718 line:0
when a user signs into your service
with an App Clip


447
00:22:31,785 --> 00:22:33,554 line:0
and is later upgraded to the full app.


448
00:22:35,055 --> 00:22:36,957 line:-2
Those are some best practices
to keep in mind


449
00:22:37,024 --> 00:22:38,425 line:-1
when implementing your extension.


450
00:22:39,860 --> 00:22:43,230 line:-2
Let's wrap up by reviewing the experience
you can provide for your users


451
00:22:43,297 --> 00:22:46,567 line:-2
by adopting the account authentication
modification extension point.


452
00:22:48,268 --> 00:22:50,304 line:-1
The new Security Recommendations feature


453
00:22:50,370 --> 00:22:53,774 line:-2
warns users about
at-risk password-based accounts.


454
00:22:53,841 --> 00:22:56,710 line:-2
It educates users about
why certain passwords have been flagged


455
00:22:56,777 --> 00:22:58,679 line:-1
and motivates them to take action.


456
00:23:00,214 --> 00:23:02,850 line:-2
Users will even get notifications
about breached passwords


457
00:23:02,916 --> 00:23:04,618 line:-2
that will take them
to the password manager


458
00:23:04,685 --> 00:23:06,053 line:-1
to secure their accounts.


459
00:23:07,554 --> 00:23:08,655 line:-1
If you choose to adopt


460
00:23:08,722 --> 00:23:11,358 line:-2
the new account authentication
modification extension,


461
00:23:11,425 --> 00:23:13,694 line:-2
they'll have access to upgrades
to secure their accounts


462
00:23:13,760 --> 00:23:16,296 line:-2
with the tap of a button
and use Sign in with Apple,


463
00:23:16,363 --> 00:23:18,799 line:-1
or change to a new, strong password.


464
00:23:19,366 --> 00:23:22,035 line:-2
When the system alerts your users
about a security warning


465
00:23:22,102 --> 00:23:23,504 line:-1
for an account with your service,


466
00:23:23,570 --> 00:23:26,406 line:-2
they'll be able to address it
instantly and seamlessly.


467
00:23:27,508 --> 00:23:30,077 line:-2
Lastly, we saw that
once you've implemented an extension,


468
00:23:30,143 --> 00:23:32,813 line:-2
you can easily add the upgrade flows
within your application


469
00:23:32,880 --> 00:23:36,250 line:-2
using new
AuthenticationServices framework API.


470
00:23:37,017 --> 00:23:40,020 line:-2
This buys you system-integrated
account security upgrades


471
00:23:40,087 --> 00:23:43,724 line:-2
with the experience
you want your users to have in your app.


472
00:23:43,790 --> 00:23:45,192 line:-1
I hope you'll choose to adopt


473
00:23:45,259 --> 00:23:47,895 line:-2
the account authentication
modification extension


474
00:23:47,961 --> 00:23:50,797 line:-2
to provide your users
with a first-class experience


475
00:23:50,864 --> 00:23:52,699 line:-1
when they need to secure their accounts.


476
00:23:53,166 --> 00:23:57,571 line:-2
Thank you so much for watching.
I hope you enjoy WWDC 2020.

