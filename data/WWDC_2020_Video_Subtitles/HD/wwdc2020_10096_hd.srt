1
00:00:03,836 --> 00:00:07,040 line:-1
Hello and welcome to WWDC.


2
00:00:09,109 --> 00:00:12,613 line:0
Welcome to "Explore Packages and Projects
with Xcode Playgrounds."


3
00:00:12,679 --> 00:00:15,382 line:0
I'm Chris Miles, an engineering manager
on the Xcode team.


4
00:00:16,315 --> 00:00:18,051 line:-1
Developers love using Xcode Playgrounds


5
00:00:18,118 --> 00:00:21,889 line:-2
to quickly try out new ideas and to learn
and explore APIs and frameworks.


6
00:00:22,256 --> 00:00:25,859 line:-2
Today, I'm excited to tell you about
enhancements we've made to Xcode 12


7
00:00:25,926 --> 00:00:29,296 line:-2
to make Playgrounds work seamlessly
with Swift packages and frameworks


8
00:00:29,363 --> 00:00:30,364 line:-1
in your projects.


9
00:00:30,898 --> 00:00:33,200 line:-2
In Xcode 12,
Playgrounds is fully integrated


10
00:00:33,267 --> 00:00:35,169 line:-1
with Xcode's modern build system.


11
00:00:35,235 --> 00:00:37,571 line:-2
That integration brings with it
a lot of improvements


12
00:00:37,638 --> 00:00:41,475 line:-2
to how Playgrounds works with packages,
projects and resources.


13
00:00:42,376 --> 00:00:45,946 line:-2
First, I'll show you how Playgrounds
now works well in Swift packages


14
00:00:46,013 --> 00:00:49,850 line:-2
and makes a great option for package
documentation containing runnable code.


15
00:00:50,651 --> 00:00:54,421 line:-2
Then I'm going to demonstrate improvements
for Playgrounds importing project targets,


16
00:00:54,488 --> 00:00:56,757 line:-1
like frameworks and package dependencies.


17
00:00:57,691 --> 00:00:59,560 line:-1
In the final part of the presentation,


18
00:00:59,626 --> 00:01:02,729 line:-2
I'm going to demonstrate working with
resources that need build support,


19
00:01:02,796 --> 00:01:05,766 line:-2
like ML models and asset catalogs,
in a playground.


20
00:01:06,333 --> 00:01:07,334 line:-1
So, let's get started


21
00:01:07,401 --> 00:01:10,404 line:-2
by looking at how Xcode Playgrounds
works with Swift packages.


22
00:01:11,138 --> 00:01:14,074 line:-2
Here I have a Swift package checked out
called NutritionFacts.


23
00:01:14,141 --> 00:01:17,311 line:-2
I'm gonna open it in Xcode
by double-clicking "Package.swift."


24
00:01:18,212 --> 00:01:20,747 line:-2
NutritionFacts provides accurate
nutritional information


25
00:01:20,814 --> 00:01:22,249 line:-1
for many common types of food.


26
00:01:22,316 --> 00:01:24,985 line:-2
It's a really handy package to use
in recipe and food apps.


27
00:01:25,552 --> 00:01:26,987 line:-1
What's great about NutritionFacts


28
00:01:27,054 --> 00:01:29,089 line:-2
is the authors have included
rich documentation


29
00:01:29,156 --> 00:01:31,058 line:-1
explaining how to use the API,


30
00:01:31,124 --> 00:01:34,261 line:-2
and, even better, the documentation
was written as a playground.


31
00:01:34,328 --> 00:01:35,963 line:-1
Playgrounds are great for documentation,


32
00:01:36,029 --> 00:01:38,599 line:-2
and they now work seamlessly
with packages in Xcode 12.


33
00:01:38,665 --> 00:01:39,766 line:-1
So, let's take a look.


34
00:01:40,901 --> 00:01:43,270 line:-2
In the navigator,
I'm gonna open the Playgrounds folder


35
00:01:43,337 --> 00:01:45,606 line:-1
and select the NutritionFacts playground.


36
00:01:46,139 --> 00:01:48,642 line:-1
Here, we see a description of the package


37
00:01:48,709 --> 00:01:52,312 line:-2
followed by detailed documentation
about how to use the API,


38
00:01:52,379 --> 00:01:54,281 line:-1
along with example code snippets.


39
00:01:54,715 --> 00:01:56,984 line:-2
And being a playground,
we can run that code.


40
00:01:57,050 --> 00:01:59,987 line:0
Let's do that now by hitting "execute"
in the toolbar.


41
00:02:00,721 --> 00:02:04,458 line:-2
The playground will execute,
and on the right, we see a live view.


42
00:02:05,359 --> 00:02:07,060 line:-1
That is a view provided by the package.


43
00:02:07,127 --> 00:02:09,395 line:-2
It shows NutritionFacts
in a familiar format.


44
00:02:10,631 --> 00:02:14,067 line:-2
In the editor, we see an example
of looking up an item by identifier


45
00:02:14,134 --> 00:02:16,203 line:-2
and fetching nutritional information
about it.


46
00:02:16,270 --> 00:02:18,539 line:-2
The playground helps us
understand the code


47
00:02:18,605 --> 00:02:21,909 line:-2
by showing the result of each statement
in the results bar on the right.


48
00:02:23,577 --> 00:02:26,980 line:-2
As you can see, Playgrounds in Xcode 12
work seamlessly with packages.


49
00:02:27,514 --> 00:02:28,515 line:-1
This was made possible


50
00:02:28,582 --> 00:02:30,851 line:-2
because of Playgrounds' integration
with the modern build system,


51
00:02:30,918 --> 00:02:32,152 line:-1
which knows how to build packages


52
00:02:32,219 --> 00:02:34,588 line:-2
and make them available
for importing into playground code.


53
00:02:35,122 --> 00:02:36,823 line:-1
I recommend making use of a playground


54
00:02:36,890 --> 00:02:38,926 line:-2
the next time you need
to write documentation


55
00:02:38,992 --> 00:02:40,894 line:-1
or a tutorial for your Swift package.


56
00:02:41,195 --> 00:02:42,863 line:-1
Don't forget to take advantage of the fact


57
00:02:42,930 --> 00:02:46,800 line:-2
that users can run the example code
and see live results in the playground.


58
00:02:47,334 --> 00:02:50,671 line:-2
Next, I'd like to show you how Xcode 12
makes it easier for Playgrounds


59
00:02:50,737 --> 00:02:53,707 line:-2
to use framework and package dependencies
from a project.


60
00:02:54,808 --> 00:02:56,677 line:-1
I'm gonna use a project called Fruta,


61
00:02:56,743 --> 00:03:00,214 line:-2
and let's open it in Xcode
and run the project in the simulator.


62
00:03:00,714 --> 00:03:03,951 line:-2
Fruta is an iOS and Mac app
for browsing and ordering smoothies.


63
00:03:04,017 --> 00:03:06,587 line:-2
You can even purchase smoothie recipes
with Apple Pay


64
00:03:06,653 --> 00:03:08,622 line:-2
so you can make
your own smoothies at home.


65
00:03:09,423 --> 00:03:11,291 line:-2
Let's take a look at the app
in the simulator.


66
00:03:11,358 --> 00:03:13,560 line:-2
We see a list of some
of the smoothies available,


67
00:03:13,627 --> 00:03:17,331 line:-2
and if we select one, we can see an option
to buy it with Apple Pay,


68
00:03:17,397 --> 00:03:20,601 line:-2
and scrolling up, we see some of
the ingredients that are in the smoothie.


69
00:03:20,667 --> 00:03:22,736 line:-1
Let's select one to see a detailed image,


70
00:03:22,803 --> 00:03:26,840 line:-2
and tap the "I" button to see
nutritional facts about that ingredient.


71
00:03:26,907 --> 00:03:31,445 line:-2
Now, you may recognize this as the view
provided by the NutritionFacts package.


72
00:03:31,512 --> 00:03:33,413 line:-2
This project has a dependency
on that package,


73
00:03:33,480 --> 00:03:35,816 line:-2
as you can see in the left
in the navigator.


74
00:03:36,950 --> 00:03:38,352 line:-1
Even as a project dependency,


75
00:03:38,418 --> 00:03:41,154 line:-2
any playgrounds in that package
will still be available.


76
00:03:41,221 --> 00:03:43,690 line:-1
Let's take a look by opening the package


77
00:03:43,757 --> 00:03:47,594 line:-2
and opening the NutritionFacts playground
that we opened earlier.


78
00:03:47,661 --> 00:03:49,363 line:-1
Here, we see the same content,


79
00:03:49,429 --> 00:03:53,367 line:-2
and, like before, we can execute
the playground to see the results.


80
00:03:54,801 --> 00:03:58,338 line:-2
So, playgrounds in packages are available
whether you open the package directly,


81
00:03:58,405 --> 00:03:59,506 line:-1
like we did at the start,


82
00:03:59,573 --> 00:04:03,544 line:-2
or whether it's part of your project
as a package dependency, like it is here.


83
00:04:03,610 --> 00:04:06,113 line:-2
Just remember that, like all files
in a package dependency,


84
00:04:06,180 --> 00:04:07,548 line:-1
the playground will be read-only.


85
00:04:08,482 --> 00:04:11,485 line:-2
This project also contains a framework
called UtilityViews.


86
00:04:12,052 --> 00:04:15,389 line:-1
Let's take a look at the project editor


87
00:04:15,455 --> 00:04:18,458 line:-2
where we can see the UtilityView's
framework target.


88
00:04:18,992 --> 00:04:21,995 line:-2
It is now easier than before to use
your frameworks in Playgrounds,


89
00:04:22,062 --> 00:04:23,931 line:-1
as long as they are in the same workspace.


90
00:04:23,997 --> 00:04:25,332 line:-1
Let me show you an example.


91
00:04:26,200 --> 00:04:28,969 line:-2
In the navigator,
I'm gonna open the Playgrounds folder,


92
00:04:29,036 --> 00:04:31,505 line:-2
and we see a playground
called SmoothieLab.


93
00:04:31,572 --> 00:04:33,173 line:-1
Let's open SmoothieLab.


94
00:04:33,240 --> 00:04:35,108 line:-1
Notice some build activity at the top.


95
00:04:35,976 --> 00:04:40,147 line:-2
This was due to a new playground option
in Xcode 12 called Build Active Scheme.


96
00:04:40,214 --> 00:04:42,216 line:-1
Let me show you by opening the inspector,


97
00:04:42,282 --> 00:04:44,618 line:-1
and here we see in the playground settings


98
00:04:44,685 --> 00:04:47,387 line:-2
the new option
at the bottom of the settings.


99
00:04:47,454 --> 00:04:49,323 line:-1
When "Build Active Scheme" is enabled,


100
00:04:49,389 --> 00:04:51,792 line:-2
it tells Xcode
to automatically build all targets


101
00:04:51,859 --> 00:04:53,293 line:-1
in the currently selected scheme


102
00:04:53,360 --> 00:04:55,896 line:-2
and make any modules importable
to the playground.


103
00:04:56,763 --> 00:04:59,199 line:-2
So, that's why when
we opened the playground,


104
00:04:59,266 --> 00:05:02,569 line:-2
Xcode built all of the targets
for the currently selected scheme,


105
00:05:02,636 --> 00:05:05,506 line:-2
and the playground could import
the UtilityViews framework


106
00:05:05,572 --> 00:05:07,774 line:-1
and the NutritionFacts package.


107
00:05:08,175 --> 00:05:11,678 line:-2
SmoothieLab is a utility playground
that we use to design new smoothies.


108
00:05:11,745 --> 00:05:13,780 line:-1
We can select some raw ingredients,


109
00:05:14,515 --> 00:05:16,283 line:-1
combine them in various quantities


110
00:05:16,884 --> 00:05:19,319 line:-1
and then inspect their nutritional values.


111
00:05:20,053 --> 00:05:21,989 line:-1
We can even chart a calorie breakdown


112
00:05:22,055 --> 00:05:25,492 line:-2
using a chart view
from the UtilityViews framework.


113
00:05:26,093 --> 00:05:29,463 line:-2
Let's run the playground to see
the calorie breakdown for this smoothie.


114
00:05:32,399 --> 00:05:35,102 line:-2
In the live view, we see a chart
of the calorie breakdown.


115
00:05:35,169 --> 00:05:39,206 line:-2
Now, we usually like to keep
the fat content to be less than about 25%,


116
00:05:39,273 --> 00:05:42,176 line:-2
so let's tap the chart
to take a look at the percentages.


117
00:05:43,110 --> 00:05:44,511 line:-1
It's about 33% in this case,


118
00:05:44,578 --> 00:05:47,147 line:-2
so perhaps we could lower
the amount of peanut butter,


119
00:05:47,214 --> 00:05:48,582 line:-1
but I'll work on that later.


120
00:05:49,249 --> 00:05:51,318 line:-2
As you can see,
this playground is a handy tool


121
00:05:51,385 --> 00:05:54,521 line:-2
for helping us to combine ingredients
to design well-balanced smoothies,


122
00:05:54,588 --> 00:05:56,657 line:-1
at least from a nutritional perspective.


123
00:05:56,723 --> 00:05:58,158 line:-1
We haven't designed an algorithm


124
00:05:58,225 --> 00:06:00,394 line:-2
for calculating how good
a smoothie might taste,


125
00:06:00,460 --> 00:06:03,697 line:-2
but I'm fine with that as tasting is
my favorite part of smoothie design.


126
00:06:04,231 --> 00:06:06,400 line:-2
Playgrounds can now work seamlessly
with project targets,


127
00:06:06,466 --> 00:06:07,868 line:-1
such as frameworks and packages.


128
00:06:07,935 --> 00:06:09,937 line:-2
Xcode will take care of
building those targets


129
00:06:10,003 --> 00:06:12,806 line:-2
so that they can be imported
into your playground code.


130
00:06:12,873 --> 00:06:15,742 line:-2
Just make sure to enable
"Build Active Scheme."


131
00:06:15,809 --> 00:06:19,546 line:-2
The good news is that this option is
enabled by default for new playgrounds.


132
00:06:20,414 --> 00:06:24,451 line:-2
Also make sure that the module you want to
import is either part of the active scheme


133
00:06:24,518 --> 00:06:27,321 line:-2
or a dependency on another target
built by that scheme.


134
00:06:27,888 --> 00:06:29,857 line:-1
Another great enhancement in Xcode 12


135
00:06:29,923 --> 00:06:32,693 line:-2
is the availability of full build logs
for playgrounds.


136
00:06:32,759 --> 00:06:34,962 line:-2
Let's take a look at the build log
for SmoothieLab.


137
00:06:35,028 --> 00:06:36,930 line:-1
We'll switch to the report navigator,


138
00:06:36,997 --> 00:06:40,234 line:-2
and at the top, we see the build log
for the SmoothieLab playground.


139
00:06:40,300 --> 00:06:42,169 line:-2
So, let's select it
to open the build logs.


140
00:06:42,703 --> 00:06:45,839 line:-2
In the build logs,
we see all of the build details


141
00:06:45,906 --> 00:06:48,742 line:-2
for the targets that were built
as part of the active scheme,


142
00:06:49,243 --> 00:06:52,312 line:-2
as well as the module that
was built to support the playground,


143
00:06:52,379 --> 00:06:56,049 line:-2
containing compiled sources and resources
from within the playground.


144
00:06:56,550 --> 00:06:58,886 line:-2
Build logs are invaluable
for diagnosing build issues,


145
00:06:58,952 --> 00:07:01,321 line:-2
and we're happy that they're
available for playgrounds.


146
00:07:01,955 --> 00:07:03,790 line:-2
Another benefit
of Playgrounds' integration


147
00:07:03,857 --> 00:07:05,292 line:-1
with Xcode's modern build system,


148
00:07:05,359 --> 00:07:07,728 line:-2
is that all resource types
supported by the build system


149
00:07:07,794 --> 00:07:09,530 line:-1
are now supported in Playgrounds.


150
00:07:09,596 --> 00:07:12,299 line:-2
Let me show you an example
of using some resources in a playground


151
00:07:12,366 --> 00:07:14,067 line:-1
that require build system support.


152
00:07:15,302 --> 00:07:18,172 line:-2
Returning to the Fruta project,
I'd like to add a feature to Fruta


153
00:07:18,238 --> 00:07:21,074 line:-2
where the user can point their
iPhone's camera at their favorite fruit,


154
00:07:21,141 --> 00:07:23,043 line:-2
and Fruta would magically
suggest smoothies


155
00:07:23,110 --> 00:07:24,878 line:-1
that match the fruit that it could see.


156
00:07:25,279 --> 00:07:27,147 line:-2
To do this I'd like
to use machine learning


157
00:07:27,214 --> 00:07:29,850 line:-2
to perform object detection
and image classification.


158
00:07:30,450 --> 00:07:32,119 line:-2
There are a number
of classifiers available,


159
00:07:32,186 --> 00:07:34,388 line:-2
so I'd like to try one of them
with a few sample images


160
00:07:34,454 --> 00:07:36,256 line:-2
to see if it would be suitable
for the task,


161
00:07:36,323 --> 00:07:38,625 line:-2
and I'm going to do that using
a playground in Xcode.


162
00:07:38,692 --> 00:07:41,562 line:-2
First, let's get some sample fruit images
to test with,


163
00:07:41,628 --> 00:07:45,165 line:-2
and I think we happen to have some
already available in the Fruta project.


164
00:07:45,766 --> 00:07:49,269 line:-2
Let's switch back to the simulator
and navigate back,


165
00:07:49,336 --> 00:07:52,206 line:-2
and remember we saw the image
of some oranges before?


166
00:07:52,272 --> 00:07:55,142 line:-2
And if we dismiss that,
we see images of the other ingredients.


167
00:07:55,209 --> 00:07:56,810 line:-1
So, let's find these in the project.


168
00:07:57,544 --> 00:08:00,347 line:-2
I'm gonna hide the simulator,
as we don't need that anymore,


169
00:08:00,747 --> 00:08:01,748 line:-1
expand the Shared folder,


170
00:08:01,815 --> 00:08:03,817 line:-2
and let's take a look
in the asset catalog.


171
00:08:04,384 --> 00:08:07,788 line:-2
We see an app icon, some color sets,
and in the Ingredients folder,


172
00:08:07,855 --> 00:08:10,224 line:-2
we see all the images
representing the ingredients


173
00:08:10,290 --> 00:08:12,326 line:-1
that we put in our smoothies.


174
00:08:12,392 --> 00:08:15,762 line:-2
I think this will be a good sample set
for testing our machine-learning model.


175
00:08:15,996 --> 00:08:19,933 line:-2
So, let's make a copy of this by
Option-dragging this out to the desktop.


176
00:08:21,902 --> 00:08:24,471 line:-2
And now we don't need the project open,
so we'll close that,


177
00:08:24,538 --> 00:08:27,975 line:-2
and instead create a new playground
with "File," "New Playground."


178
00:08:30,477 --> 00:08:32,179 line:-1
We use an iOS blank playground.


179
00:08:33,614 --> 00:08:36,350 line:-2
And let's call it ML Fruta,
and store it on the desktop.


180
00:08:38,684 --> 00:08:42,121 line:-2
I'm gonna expand the size of the window
to give us some more working space.


181
00:08:42,188 --> 00:08:46,860 line:-2
Now, let's drag in the asset catalog into
the resources folder of the playground.


182
00:08:46,927 --> 00:08:50,030 line:-2
Notice that Playground compiles
the asset catalog for us


183
00:08:50,097 --> 00:08:53,433 line:-2
so that we can access the resources
from our code.


184
00:08:54,201 --> 00:08:57,437 line:-1
We can do that using UIImage(named.


185
00:08:58,472 --> 00:09:01,041 line:-2
Specify the name of the folder
within the asset catalog


186
00:09:01,108 --> 00:09:02,709 line:-1
and the name of an image.


187
00:09:02,776 --> 00:09:05,345 line:-2
And now let's execute the playground
to see the results.


188
00:09:06,313 --> 00:09:08,282 line:-2
In the results,
we see the width of the image,


189
00:09:08,348 --> 00:09:10,984 line:-2
and if we QuickLook the image,
we see a preview.


190
00:09:11,051 --> 00:09:14,388 line:-2
That looks great. So, we have access
to images from that asset catalog.


191
00:09:14,454 --> 00:09:16,390 line:-1
Now we just need a machine-learning model.


192
00:09:17,057 --> 00:09:18,792 line:-1
I'm gonna switch to Safari


193
00:09:18,859 --> 00:09:20,093 line:-1
where I've been browsing


194
00:09:20,160 --> 00:09:23,063 line:-2
the machine learning section
of the Apple Developer website.


195
00:09:23,897 --> 00:09:25,399 line:-1
In the Core ML Models page,


196
00:09:25,465 --> 00:09:30,170 line:-2
we see a number of image classification
and object detection models.


197
00:09:30,237 --> 00:09:33,240 line:-2
I'd like to try out this model
called YOLOv3,


198
00:09:33,307 --> 00:09:36,810 line:-2
which is able to detect multiple objects
in a scene and classify each of them.


199
00:09:37,177 --> 00:09:39,980 line:-2
I think that'd be good for pointing
the camera at a bowl of fruit


200
00:09:40,047 --> 00:09:42,850 line:-2
and having it identify all the fruit
that it could see.


201
00:09:43,217 --> 00:09:44,551 line:-1
So, let's click "View models,"


202
00:09:44,618 --> 00:09:47,354 line:-2
and we can download
the full-precision model at the top.


203
00:09:47,421 --> 00:09:50,357 line:-2
To save us time, I've already done this,
so let's minimize Safari.


204
00:09:51,458 --> 00:09:54,761 line:-2
And I'll drag in the model
from the desktop


205
00:09:54,828 --> 00:09:57,397 line:-2
into the resources section
of the playground.


206
00:09:57,464 --> 00:09:59,766 line:-2
Xcode will automatically compile
the model for us,


207
00:09:59,833 --> 00:10:02,002 line:-2
and while it's doing that,
let's select the model


208
00:10:02,069 --> 00:10:04,304 line:-1
to see details about it in the editor.


209
00:10:04,738 --> 00:10:08,141 line:-2
An important detail is the model class
up near the top here.


210
00:10:08,208 --> 00:10:09,877 line:-1
It tells us the name of the class


211
00:10:09,943 --> 00:10:12,379 line:-2
that will be automatically generated
by the build system


212
00:10:12,446 --> 00:10:13,947 line:-1
for use in our Swift code.


213
00:10:14,014 --> 00:10:15,482 line:-1
So, let's make use of that now.


214
00:10:16,183 --> 00:10:17,718 line:-1
Returning to the playground,


215
00:10:18,519 --> 00:10:21,855 line:-1
let's add the code to import CoreML.


216
00:10:22,389 --> 00:10:24,658 line:-1
Then I'll call my variable yoloModel,


217
00:10:24,725 --> 00:10:28,629 line:-2
and we'll use the class that was
automatically generated for us, YOLOv3,


218
00:10:28,695 --> 00:10:31,064 line:-2
to create a new instance
with a default configuration,


219
00:10:31,131 --> 00:10:32,666 line:-1
and we'll fetch the model property.


220
00:10:33,233 --> 00:10:35,369 line:-2
Let's run the playground
to see the results.


221
00:10:38,071 --> 00:10:41,141 line:-2
We get back a model description,
which we can preview here,


222
00:10:41,208 --> 00:10:44,511 line:-2
and see details about the inputs,
outputs and other properties.


223
00:10:44,578 --> 00:10:47,481 line:-2
So, that's great.
We now have a machine-learning model,


224
00:10:47,548 --> 00:10:50,384 line:-2
and images to test with,
we just need to combine them together.


225
00:10:50,884 --> 00:10:54,021 line:-2
An easy way to do that is using
the Vision framework.


226
00:10:54,087 --> 00:10:58,325 line:-2
I'm gonna replace this code
and instead import the Vision framework.


227
00:10:58,926 --> 00:11:02,396 line:-2
I'll define an array with
three ingredients to start testing with,


228
00:11:02,462 --> 00:11:04,364 line:-1
and then we can use our yoloModel


229
00:11:04,431 --> 00:11:08,101 line:-2
to create an instance of
the Vision framework's CoreMLModel.


230
00:11:08,168 --> 00:11:10,237 line:-2
And with that, we can create
a CoreMLRequest


231
00:11:10,304 --> 00:11:13,473 line:-2
that we can use to make
machine-learning requests on images.


232
00:11:14,274 --> 00:11:18,245 line:-2
Now, I'd like to visualize the results
of these requests by showing each image,


233
00:11:18,312 --> 00:11:21,148 line:-2
and drawing a rectangle around
any objects detected in the image.


234
00:11:21,215 --> 00:11:24,084 line:-2
To help do that, I've got some code
that I've used in the past.


235
00:11:24,151 --> 00:11:25,786 line:-1
Let me QuickLook it for you.


236
00:11:26,286 --> 00:11:30,224 line:-2
It defines a couple of structs to hold
the results of our object detection


237
00:11:30,290 --> 00:11:33,460 line:-2
and some SwiftUI views
that we use to show the images


238
00:11:33,527 --> 00:11:36,496 line:-2
and draw rectangles around any objects
detected in the image.


239
00:11:36,563 --> 00:11:38,131 line:-1
We won't go into detail about this code,


240
00:11:38,198 --> 00:11:40,434 line:-2
but we'll make it available
on our session website.


241
00:11:41,368 --> 00:11:45,172 line:-2
So, after dragging the support code into
the sources section of the playground,


242
00:11:45,239 --> 00:11:48,041 line:-2
Xcode will compile that,
and now we can make use of the code.


243
00:11:50,377 --> 00:11:52,412 line:-1
We'll iterate over the ingredient names,


244
00:11:52,846 --> 00:11:55,315 line:-2
fetch an image for each one
from the asset catalog,


245
00:11:55,382 --> 00:11:58,652 line:-2
and then we'll create
an image request handler with that image.


246
00:11:59,253 --> 00:12:01,822 line:-2
We can use that to perform
our machine-learning request.


247
00:12:02,356 --> 00:12:04,091 line:-1
Then we just need to pass the results.


248
00:12:04,491 --> 00:12:07,294 line:-2
Each result is
a RecognizedObjectObservation.


249
00:12:07,928 --> 00:12:09,663 line:-1
We'll enumerate the observations,


250
00:12:09,730 --> 00:12:11,665 line:-2
we'll fetch the label
with the highest confidence


251
00:12:11,732 --> 00:12:14,434 line:-2
and the bounding box of that object
within the image,


252
00:12:14,501 --> 00:12:16,370 line:-1
and return that as a RecognizedObject.


253
00:12:17,437 --> 00:12:21,308 line:-2
Finally, for each image, we'll return
the results as an ObjectDetectionResult,


254
00:12:21,375 --> 00:12:23,510 line:-2
and let's preview the results
that we get at the bottom.


255
00:12:24,144 --> 00:12:27,247 line:-1
Xcode will iterate over the three images,


256
00:12:27,314 --> 00:12:29,383 line:-1
and then we can preview the results.


257
00:12:29,449 --> 00:12:32,519 line:-2
Indeed we have a result for each image,
so let's visualize them.


258
00:12:33,086 --> 00:12:35,255 line:-2
We can do that by setting
a playground LiveView


259
00:12:35,322 --> 00:12:38,792 line:-2
to the RecognizedObjectVisualizer,
and pass it the results.


260
00:12:38,859 --> 00:12:40,027 line:-1
Let's continue running.


261
00:12:41,061 --> 00:12:44,331 line:-2
On the right, we see the results
of our object detection.


262
00:12:44,798 --> 00:12:47,134 line:-2
The first image we passed in
was of a banana,


263
00:12:47,201 --> 00:12:51,572 line:-2
and the orange indicates that a banana
was detected with 100% accuracy.


264
00:12:51,638 --> 00:12:53,373 line:-1
So, that's a pretty good result.


265
00:12:54,074 --> 00:12:56,210 line:-1
The second image was of three oranges,


266
00:12:56,276 --> 00:12:59,546 line:-2
and we can see that all three oranges
were detected with high confidence.


267
00:12:59,613 --> 00:13:00,948 line:-1
So, that worked really well.


268
00:13:02,216 --> 00:13:04,184 line:-2
The third image was of
a bottle of almond milk,


269
00:13:04,251 --> 00:13:07,020 line:-2
and we can see that the machine-learning
model detected a bottle


270
00:13:07,087 --> 00:13:09,990 line:-2
with pretty high confidence, although it
didn't classify it specifically


271
00:13:10,057 --> 00:13:12,125 line:-1
as a bottle of milk or almond milk.


272
00:13:12,192 --> 00:13:15,295 line:-2
And that would be because this model
has been trained to detect bottles


273
00:13:15,362 --> 00:13:18,599 line:-2
but hasn't been specifically trained
to detect bottles of milk or almond milk.


274
00:13:18,665 --> 00:13:19,733 line:-1
And I think that's fine.


275
00:13:19,800 --> 00:13:22,536 line:-2
For what this model's been trained for,
it performed really well.


276
00:13:22,603 --> 00:13:24,838 line:-2
I think this would be the model
to use for our app.


277
00:13:24,905 --> 00:13:28,075 line:-2
The next step would be to go ahead
and train that model even further,


278
00:13:28,141 --> 00:13:31,378 line:-2
with the types of ingredients
that we wanna detect for our use case.


279
00:13:31,445 --> 00:13:33,647 line:-2
To find out more about
how to train your ML models,


280
00:13:33,714 --> 00:13:36,717 line:-2
I suggest watching
the WWDC 2019 session called


281
00:13:36,783 --> 00:13:39,353 line:-2
"Training Object Detection Models
in Create ML."


282
00:13:40,587 --> 00:13:42,456 line:-1
So, that was an example of using resources


283
00:13:42,523 --> 00:13:45,259 line:-2
that require build system support
in Playgrounds.


284
00:13:45,659 --> 00:13:48,095 line:-2
Let's summarize what
I've covered in this presentation.


285
00:13:48,562 --> 00:13:52,399 line:-2
In Xcode 12, Playgrounds is fully
integrated with the modern build system.


286
00:13:53,300 --> 00:13:56,336 line:-2
When the new option "Build Active Scheme"
is enabled,


287
00:13:56,403 --> 00:13:59,606 line:-2
all targets in the currently selected
scheme will be automatically built


288
00:13:59,673 --> 00:14:03,177 line:-2
and made importable into playgrounds
that are in the same workspace.


289
00:14:03,644 --> 00:14:07,648 line:-2
Any frameworks or Swift packages can then
be imported into your playground code.


290
00:14:09,283 --> 00:14:13,086 line:0
All resource types the build system knows
about can now be used in Playgrounds.


291
00:14:13,153 --> 00:14:16,190 line:0
For example, asset catalogs and ML Models,
like I demonstrated.


292
00:14:17,691 --> 00:14:20,994 line:0
Full playground build logs are
now available in the report navigator,


293
00:14:21,061 --> 00:14:24,031 line:0
making it much easier
to diagnose playground build issues.


294
00:14:25,766 --> 00:14:28,168 line:-2
Playgrounds are great for documenting
packages and frameworks


295
00:14:28,235 --> 00:14:29,336 line:-1
with runnable code.


296
00:14:29,403 --> 00:14:31,672 line:-2
And don't forget that playgrounds are
a handy tool


297
00:14:31,738 --> 00:14:34,975 line:-2
for quickly coding up new ideas
or writing utility code.


298
00:14:35,375 --> 00:14:38,111 line:-2
I look forward to hearing
how playgrounds are able to help you


299
00:14:38,178 --> 00:14:40,547 line:-2
make your packages
and projects even better.


300
00:14:40,948 --> 00:14:42,216 line:-1
Thank you for watching.

