1
00:00:03,836 --> 00:00:06,507 line:-1
Hello, and welcome to WWDC.


2
00:00:08,542 --> 00:00:10,143 line:0
Hello. My name is Tom Doron


3
00:00:10,210 --> 00:00:12,813 line:0
and today I'm thrilled to share with you
a set of technologies


4
00:00:12,880 --> 00:00:15,182 line:0
that allow you to build and debug
serverless functions


5
00:00:15,249 --> 00:00:17,351 line:0
written in Swift using Xcode.


6
00:00:18,318 --> 00:00:20,654 line:-2
Many systems these days
have client components


7
00:00:20,721 --> 00:00:24,858 line:-2
like iOS, macOS, tvOS
or watchOS applications


8
00:00:24,925 --> 00:00:26,460 line:-1
as well as server components.


9
00:00:27,361 --> 00:00:30,230 line:-2
The server components
enable the client applications


10
00:00:30,297 --> 00:00:33,200 line:-2
to extend their functionality
into the cloud, for example:


11
00:00:33,667 --> 00:00:36,470 line:-2
access data that is not available
on the device,


12
00:00:36,537 --> 00:00:39,206 line:-2
offload tasks
that can be done in the background,


13
00:00:39,273 --> 00:00:41,608 line:-2
or offload tasks
that are computational heavy.


14
00:00:43,277 --> 00:00:45,512 line:-1
Often, server components need to be built


15
00:00:45,579 --> 00:00:48,015 line:-2
using different tools
and different methodologies,


16
00:00:48,081 --> 00:00:51,151 line:-2
creating a separation between the server
and the client engineering teams.


17
00:00:51,818 --> 00:00:54,321 line:-2
Serverless functions offer
a programming model


18
00:00:54,388 --> 00:00:56,156 line:-1
that brings the two closer together.


19
00:00:56,623 --> 00:00:59,626 line:-2
Serverless functions are becoming
an increasingly popular choice


20
00:00:59,693 --> 00:01:00,861 line:-1
for running event-driven


21
00:01:00,928 --> 00:01:03,330 line:-2
or otherwise ad hoc
compute tasks in the cloud.


22
00:01:04,498 --> 00:01:07,000 line:-2
They resolve the need
in running dedicated resources


23
00:01:07,067 --> 00:01:10,337 line:-2
by replacing them with a more dynamic
resource allocation system.


24
00:01:11,505 --> 00:01:14,508 line:-2
In many cases,
serverless functions allow developers


25
00:01:14,575 --> 00:01:17,211 line:-2
to more easily scale
and control the compute costs


26
00:01:17,277 --> 00:01:19,646 line:-1
given their on demand and elastic nature.


27
00:01:20,848 --> 00:01:24,451 line:-2
AWS Lambda is an event-driven,
serverless computing platform


28
00:01:24,518 --> 00:01:27,921 line:-2
provided by Amazon
as part of Amazon Web Services,


29
00:01:27,988 --> 00:01:30,757 line:-2
and it is considered among
the industry leaders in this space.


30
00:01:32,025 --> 00:01:34,361 line:-2
When building systems
with serverless functions,


31
00:01:34,428 --> 00:01:37,564 line:-2
extra attention is given
to compute resource utilization


32
00:01:37,631 --> 00:01:41,535 line:-2
as it directly impacts
the overall cost of the system.


33
00:01:41,602 --> 00:01:45,305 line:-2
The combination of developer friendliness
and low resource footprint


34
00:01:45,372 --> 00:01:48,509 line:-2
makes Swift a fantastic choice
for building serverless functions.


35
00:01:49,443 --> 00:01:53,714 line:-2
Given how well these two go together,
we're happy to offer a Swift solution


36
00:01:53,780 --> 00:01:56,483 line:-2
for building and debugging
serverless functions in Xcode


37
00:01:56,550 --> 00:01:58,685 line:-1
and deploying them to AWS Lambda.


38
00:01:59,353 --> 00:02:01,088 line:-1
Let me show you what this looks like.


39
00:02:02,389 --> 00:02:06,960 line:-2
And this is it. Only four lines of code.
Let's review the API in detail.


40
00:02:07,027 --> 00:02:09,896 line:-2
First, we import
the AWS Lambda Runtime library.


41
00:02:10,663 --> 00:02:13,667 line:-2
Next, we call Lambda.run
and pass in a closure


42
00:02:13,734 --> 00:02:17,538 line:-2
that takes a context, an event payload
and a completion handler.


43
00:02:17,604 --> 00:02:19,373 line:-2
The function can call
the completion handler


44
00:02:19,439 --> 00:02:20,941 line:-1
when the work is done.


45
00:02:21,008 --> 00:02:22,509 line:-1
The closure will be invoked


46
00:02:22,576 --> 00:02:25,312 line:-2
as event payloads become available
for it to process,


47
00:02:25,379 --> 00:02:28,115 line:-2
and the runtime library
will manage the program's life cycle


48
00:02:28,182 --> 00:02:30,350 line:-2
and interaction
with the underlying platform.


49
00:02:31,485 --> 00:02:33,820 line:-2
There is also
a second protocol oriented API


50
00:02:33,887 --> 00:02:36,256 line:-2
that is designed
for performance sensitive use cases.


51
00:02:37,124 --> 00:02:40,427 line:-2
This API exposes
the SwiftNIO EventLoop underpinning,


52
00:02:40,494 --> 00:02:42,863 line:-2
which allow the Lambda function
to share the same thread


53
00:02:42,930 --> 00:02:46,967 line:-2
as the networking processing stack
and so to avoid context twitches.


54
00:02:48,168 --> 00:02:49,670 line:-1
This API is more powerful,


55
00:02:49,736 --> 00:02:52,673 line:-2
but it comes at a cost
of cognitive and technical complexity


56
00:02:52,739 --> 00:02:55,776 line:-2
as the Lambda function needs to take care
to never block the EventLoop.


57
00:02:57,010 --> 00:02:57,878 line:-1
In most cases,


58
00:02:57,945 --> 00:03:00,447 line:-2
closure based Lambda functions
are the right choice.


59
00:03:01,114 --> 00:03:02,249 line:-1
And in this example,


60
00:03:02,316 --> 00:03:05,252 line:-2
you may have noticed that
we're using a request and response struct


61
00:03:05,319 --> 00:03:07,321 line:-1
that conform to the Codable protocol,


62
00:03:07,387 --> 00:03:09,890 line:-2
providing easy serialization
to and from JSON.


63
00:03:11,225 --> 00:03:13,727 line:-2
In most cases,
Lambda payloads are JSON based,


64
00:03:13,794 --> 00:03:16,029 line:-2
so this represents
a more typical use of the library.


65
00:03:17,064 --> 00:03:20,033 line:-2
Now, let's see how to build
and debug a Lambda function,


66
00:03:20,100 --> 00:03:22,169 line:-2
and for that,
we will switch over to Xcode.


67
00:03:23,437 --> 00:03:24,438 line:-1
In this example,


68
00:03:24,505 --> 00:03:28,308 line:-2
which is included in the Swift
AWS Lambda Runtime library repository,


69
00:03:28,742 --> 00:03:30,611 line:-1
we have a workspace with two projects:


70
00:03:31,111 --> 00:03:33,113 line:-1
a Lambda and an iOS app.


71
00:03:33,981 --> 00:03:38,185 line:-2
The Lambda is a package manager project
with an executable product


72
00:03:38,252 --> 00:03:41,588 line:-2
and the dependency
on the Swift AWS Lambda Runtime library.


73
00:03:42,523 --> 00:03:47,294 line:-2
If we look at the Lambda main.swift,
which is the entry point for the program,


74
00:03:47,361 --> 00:03:49,997 line:-2
we can see a request struct
and a response struct


75
00:03:50,063 --> 00:03:51,899 line:-1
similar to the ones we saw on the slide.


76
00:03:52,566 --> 00:03:54,668 line:-2
The request struct
is a user registration form


77
00:03:54,735 --> 00:03:56,670 line:-1
with a name and a password field,


78
00:03:56,737 --> 00:04:00,073 line:-2
and the response is a message
with a simple greeting to the new user.


79
00:04:00,774 --> 00:04:05,812 line:-2
Switching over to the iOS app,
we can see a similar setup.


80
00:04:05,879 --> 00:04:09,049 line:-2
The SwiftUI registration form
with a text field for the username


81
00:04:09,116 --> 00:04:10,851 line:-1
and a secure field for the password


82
00:04:11,518 --> 00:04:14,421 line:-2
and a button that invokes
a register function.


83
00:04:14,488 --> 00:04:17,491 line:-2
The question, of course, is
how do we tie these two things together?


84
00:04:17,558 --> 00:04:21,495 line:-2
How does a register function cause
the Lambda function on the other side?


85
00:04:22,162 --> 00:04:25,265 line:-2
Let's try to run our Lambda function
and see what happens.


86
00:04:26,266 --> 00:04:29,970 line:-2
We hit "run"
on the Lambda target over here,


87
00:04:30,537 --> 00:04:32,706 line:-1
and we can see that it failed.


88
00:04:33,607 --> 00:04:34,942 line:-1
Looking at the error,


89
00:04:35,008 --> 00:04:37,511 line:-2
it could not fetch work
from the Lambda runtime engine


90
00:04:37,578 --> 00:04:39,313 line:-1
because the connection was refused.


91
00:04:40,013 --> 00:04:43,517 line:-2
This makes sense because
we're not running in AWS Lambda Runtime.


92
00:04:43,851 --> 00:04:45,853 line:-1
We're running in Xcode.


93
00:04:45,919 --> 00:04:48,889 line:-2
Luckily, the library comes
with a special mode


94
00:04:48,956 --> 00:04:53,660 line:-2
that enables a Simulator
that simulates the AWS runtime engine.


95
00:04:54,361 --> 00:04:56,630 line:-1
We can turn this on by editing the scheme


96
00:04:57,397 --> 00:04:59,066 line:-1
and setting an environment variable


97
00:05:00,100 --> 00:05:02,970 line:-2
called LOCAL_LAMBDA_SERVER_ENABLED
to true.


98
00:05:03,036 --> 00:05:06,874 line:-2
Let's do that
and try to run the Lambda again.


99
00:05:08,842 --> 00:05:10,911 line:-2
In this case,
we're getting much better results.


100
00:05:10,978 --> 00:05:13,213 line:-2
We're seeing that
the Local Lambda Server was started


101
00:05:13,280 --> 00:05:15,916 line:-1
and is listening on local host port 7000


102
00:05:15,983 --> 00:05:17,985 line:-2
and receiving events
on the invoke endpoint.


103
00:05:18,585 --> 00:05:19,753 line:-1
That's pretty sweet.


104
00:05:19,820 --> 00:05:23,824 line:-2
It also gives us a hint as to what
we can do on the iOS application side.


105
00:05:24,324 --> 00:05:27,995 line:-2
Let's switch over there
and try to write our register function.


106
00:05:29,630 --> 00:05:32,566 line:-2
For this, we will use a snippet
we prepared up front,


107
00:05:33,367 --> 00:05:37,905 line:-2
and this snippet uses URLSession
to the local host address


108
00:05:37,971 --> 00:05:40,007 line:-1
provided to us by the Lambda function


109
00:05:40,073 --> 00:05:43,443 line:-2
in sending the request form,
and then handle the response.


110
00:05:44,077 --> 00:05:47,848 line:-2
We can add a couple breakpoints,
maybe when we're constructing the request,


111
00:05:47,915 --> 00:05:50,050 line:-1
and as we are handling the response,


112
00:05:50,117 --> 00:05:53,520 line:-2
we can also add a breakpoint
on the Lambda function.


113
00:05:54,821 --> 00:05:58,892 line:-2
Let's run our iOS application
in the Simulator and see what happens.


114
00:06:05,799 --> 00:06:08,702 line:-2
We can see that
Xcode is managing two processes.


115
00:06:09,136 --> 00:06:12,840 line:-2
One for the Lambda function
and one for the iOS application.


116
00:06:12,906 --> 00:06:17,477 line:-2
We can also see that the Lambda
only takes 6.3 megabytes of memory.


117
00:06:17,544 --> 00:06:18,545 line:-1
That's pretty sweet.


118
00:06:19,446 --> 00:06:24,017 line:-2
Now, let's switch to the application
in the Simulator and try to register.


119
00:06:25,752 --> 00:06:29,356 line:-2
Put in our name and our password
and click the register button.


120
00:06:29,857 --> 00:06:33,160 line:-2
Then we hit the first breakpoint.
This is the construction of the request.


121
00:06:33,227 --> 00:06:34,895 line:-1
This all looks pretty good.


122
00:06:34,962 --> 00:06:37,231 line:-1
Let's remove this breakpoint and continue.


123
00:06:38,131 --> 00:06:41,068 line:-2
And now we hit the second breakpoint
on the Lambda function.


124
00:06:41,602 --> 00:06:45,539 line:-2
Here we can inspect, maybe,
the request that we got from the client,


125
00:06:45,606 --> 00:06:48,208 line:-2
and we see our username
and supersecret password.


126
00:06:48,775 --> 00:06:51,912 line:-2
That looks good as well.
Remove the breakpoint and continue.


127
00:06:52,446 --> 00:06:54,948 line:-1
And finally, we hit the last breakpoint


128
00:06:55,015 --> 00:06:56,450 line:-1
when processing the response.


129
00:06:57,618 --> 00:07:02,356 line:-2
We can use the LLDB debugger
to examine the response as well.


130
00:07:03,824 --> 00:07:07,194 line:-2
Finally, we get our greeting showing up
on the UI as expected.


131
00:07:07,661 --> 00:07:09,763 line:-1
Awesome, but how did this work?


132
00:07:10,297 --> 00:07:14,201 line:-2
We used Xcode to manage two processes
for our two executable targets:


133
00:07:14,268 --> 00:07:16,737 line:-2
the iOS application
and the Lambda function.


134
00:07:17,671 --> 00:07:20,240 line:-2
To make the Lambda function
available over HTTP,


135
00:07:20,307 --> 00:07:22,609 line:-1
we also started a local HTTP server


136
00:07:22,676 --> 00:07:25,145 line:-2
that simulates
the AWS Lambda Runtime engine.


137
00:07:25,946 --> 00:07:29,383 line:-2
We used a special environment variable
to turn this functionality on.


138
00:07:30,918 --> 00:07:33,787 line:-2
The iOS application
then used an HTTP call,


139
00:07:33,854 --> 00:07:36,356 line:-2
using URLSession
to submit work to the Lambda.


140
00:07:37,291 --> 00:07:39,993 line:-2
This setup only works locally
in debug mode.


141
00:07:40,060 --> 00:07:43,430 line:-2
To interact with a Lambda
deployed to AWS over HTTP,


142
00:07:43,497 --> 00:07:46,433 line:-2
you need to expose it first
through AWS API Gateway.


143
00:07:47,034 --> 00:07:49,837 line:-2
Now, let's see how to deploy
our Lambda function.


144
00:07:49,903 --> 00:07:52,272 line:-2
And for this,
we will switch over to the terminal.


145
00:07:53,607 --> 00:07:55,075 line:-1
To deploy our Lambda function,


146
00:07:55,142 --> 00:07:57,678 line:-2
we can use a variety of tools
provided by AWS,


147
00:07:57,744 --> 00:07:59,847 line:-1
such as SAM or AWS CLI.


148
00:08:00,380 --> 00:08:04,151 line:-2
In this example, which is also available
as part of the library code on GitHub,


149
00:08:04,218 --> 00:08:07,254 line:-2
we build a small script
that wraps the AWS CLI


150
00:08:07,321 --> 00:08:11,391 line:-2
and shows you the different steps required
to deploy the Lambda function to AWS.


151
00:08:11,458 --> 00:08:15,562 line:-2
Let's run scripts/deploy
and see what it does.


152
00:08:16,363 --> 00:08:18,031 line:-1
First, we create a Docker image


153
00:08:18,098 --> 00:08:21,969 line:-2
that is based on the Amazon Linux 2 image
published by Swift.org.


154
00:08:22,035 --> 00:08:25,672 line:-2
Next, we compile the Lambda function
in the Docker container.


155
00:08:25,739 --> 00:08:29,610 line:-2
Then we package the executable and
all of its dependencies in a .zip file,


156
00:08:29,676 --> 00:08:31,445 line:-1
which is the expected package format.


157
00:08:31,512 --> 00:08:36,950 line:-2
Finally, we upload the .zip file to AWS
and notify about the new code version.


158
00:08:37,017 --> 00:08:38,184 line:-1
With the code updated,


159
00:08:38,251 --> 00:08:42,389 line:-2
we can also test our Lambda function
using the AWS CLI wrapper script.


160
00:08:42,923 --> 00:08:45,759 line:-2
We're gonna call scripts/test
and see what happens.


161
00:08:46,226 --> 00:08:50,030 line:-2
We enter our username and password
and we get a greeting as expected.


162
00:08:50,097 --> 00:08:51,098 line:-1
Sweet!


163
00:08:51,498 --> 00:08:52,866 line:-1
But how did this work?


164
00:08:53,734 --> 00:08:56,170 line:-1
When we deploy the Lambda function to AWS,


165
00:08:56,236 --> 00:08:59,940 line:-2
the AWS Lambda Runtime engine
will control the program's life cycle.


166
00:09:00,007 --> 00:09:02,109 line:-2
The Lambda polls
the runtime engine for work,


167
00:09:02,176 --> 00:09:03,877 line:-1
and if such work is not available,


168
00:09:03,944 --> 00:09:07,381 line:-2
the compute resource will be hibernated
until work is available.


169
00:09:07,447 --> 00:09:10,684 line:-2
The iOS application,
command line tool or any other client


170
00:09:10,751 --> 00:09:14,087 line:-2
can use an HTTP call,
using URLSession or otherwise,


171
00:09:14,154 --> 00:09:15,923 line:-1
to interact with the Lambda.


172
00:09:15,989 --> 00:09:18,825 line:-2
To make the Lambda function available
as an HTTP endpoint,


173
00:09:18,892 --> 00:09:23,263 line:-2
you can use AWS API Gateway
which routes every request it receives


174
00:09:23,330 --> 00:09:24,831 line:-1
to the Lambda function queue.


175
00:09:25,732 --> 00:09:27,968 line:-2
There are also other ways
to invoke Lambda functions,


176
00:09:28,035 --> 00:09:31,872 line:-2
such as event based triggers,
which are covered by AWS's documentation.


177
00:09:32,873 --> 00:09:34,508 line:-1
In order to make all this possible,


178
00:09:34,575 --> 00:09:37,277 line:-2
we needed to create
two main pieces of technology.


179
00:09:37,778 --> 00:09:40,547 line:-2
The first part was getting Swift
to run on Amazon Linux,


180
00:09:40,614 --> 00:09:42,416 line:-1
a flavor of CentOS.


181
00:09:42,482 --> 00:09:43,784 line:-1
Starting May 2020,


182
00:09:43,851 --> 00:09:46,620 line:-2
Swift.org has begun publishing
Swift toolchains


183
00:09:46,687 --> 00:09:49,690 line:-2
for building and running Swift programs
on Amazon Linux 2.


184
00:09:50,858 --> 00:09:55,028 line:-2
The toolchain is useful in the context
of many AWS compute services,


185
00:09:55,095 --> 00:09:57,598 line:-1
including EC2 and AWS Lambda.


186
00:09:58,765 --> 00:10:02,569 line:-2
The second part was building
a Swift Lambda runtime library,


187
00:10:02,636 --> 00:10:05,906 line:-2
an implementation
of the AWS Lambda Runtime API.


188
00:10:06,773 --> 00:10:08,976 line:-1
The library provides a multitier API


189
00:10:09,042 --> 00:10:11,311 line:-2
that allows building
a range of serverless functions,


190
00:10:11,378 --> 00:10:13,213 line:-1
from quick and simple closures


191
00:10:13,280 --> 00:10:15,849 line:-2
to complex and performance sensitive
event handlers.


192
00:10:16,350 --> 00:10:19,286 line:-2
A program's life cycle is managed
by a lifecycle loop


193
00:10:19,353 --> 00:10:21,088 line:-1
provided as part of the library.


194
00:10:21,154 --> 00:10:23,323 line:-2
The program is designed
to serve traffic forever,


195
00:10:23,390 --> 00:10:26,627 line:-2
or until the process is terminated
by the AWS platform.


196
00:10:26,693 --> 00:10:29,363 line:-2
Long-lived processes
can serve traffic faster


197
00:10:29,429 --> 00:10:32,466 line:-2
by employing caching techniques
such as caching the connection.


198
00:10:32,533 --> 00:10:34,902 line:-1
The library also manages a state machine


199
00:10:34,968 --> 00:10:37,971 line:-2
representing the various stages
of the Lambda execution.


200
00:10:38,038 --> 00:10:39,873 line:-2
Polling work
from the runtime engine queue,


201
00:10:39,940 --> 00:10:42,476 line:-2
submitting the work
to the user provided function,


202
00:10:42,543 --> 00:10:44,778 line:-2
and submitting the results
back to the runtime engine.


203
00:10:45,312 --> 00:10:46,880 line:-1
An asynchronous HTTP client


204
00:10:46,947 --> 00:10:50,350 line:-2
that is fine tuned for performance
in the AWS Lambda Runtime context


205
00:10:50,417 --> 00:10:52,286 line:-1
is embedded in the library,


206
00:10:52,352 --> 00:10:55,322 line:-2
and compiling the Lambda program
produces an executable


207
00:10:55,389 --> 00:10:56,890 line:-1
that links the user provided code


208
00:10:56,957 --> 00:11:00,093 line:-2
with the underlying runtime library
and the Swift dependencies.


209
00:11:00,160 --> 00:11:02,429 line:-2
And they can be linked together
statically or dynamically,


210
00:11:02,496 --> 00:11:03,830 line:-1
depending on the need.


211
00:11:03,897 --> 00:11:05,933 line:-1
AWS Lambda can then be configured


212
00:11:05,999 --> 00:11:09,036 line:-2
to run as many copies
of the serverless functions as required,


213
00:11:09,102 --> 00:11:11,738 line:-2
and this elasticity means
that this simple programming model


214
00:11:11,805 --> 00:11:14,174 line:-2
can be scaled up
to meet even significant demand.


215
00:11:15,108 --> 00:11:18,812 line:-2
This also means that the serverless
functions are designed to be stateless


216
00:11:18,879 --> 00:11:21,949 line:-2
and care needs to be taken
to avoid global mutable state


217
00:11:22,015 --> 00:11:24,384 line:-2
or holding on to memory
for longer than required.


218
00:11:24,751 --> 00:11:28,689 line:-2
Finally, the runtime library
includes extensible integration points


219
00:11:28,755 --> 00:11:31,191 line:-2
to trigger serverless functions
based on events.


220
00:11:31,258 --> 00:11:32,259 line:-1
For example,


221
00:11:32,926 --> 00:11:36,897 line:-2
events from AWS systems
like S3, SQS and SNS,


222
00:11:37,464 --> 00:11:41,335 line:-2
triggers based on HTTP endpoints
exposed via API Gateway,


223
00:11:41,401 --> 00:11:43,704 line:-2
or custom events
that can be added by the user.


224
00:11:44,838 --> 00:11:48,375 line:-2
To wrap up, serverless functions
are a great way to extend


225
00:11:48,442 --> 00:11:51,011 line:-1
your iOS, macOS, watchOS, tvOS


226
00:11:51,078 --> 00:11:53,113 line:-2
or any other client applications
to the cloud.


227
00:11:54,081 --> 00:11:56,617 line:-2
Swift is a perfect match
for serverless functions.


228
00:11:56,683 --> 00:11:59,887 line:-2
It is fast, safe
and uses only little resources.


229
00:12:00,787 --> 00:12:05,158 line:-2
The tools you need to build, debug
and run Swift based serverless functions


230
00:12:05,225 --> 00:12:06,760 line:-1
are available today.


231
00:12:06,827 --> 00:12:09,696 line:-2
So, what are you waiting for?
Go build awesome things.


232
00:12:10,964 --> 00:12:13,600 line:-1
Thank you for listening, and enjoy WWDC.

