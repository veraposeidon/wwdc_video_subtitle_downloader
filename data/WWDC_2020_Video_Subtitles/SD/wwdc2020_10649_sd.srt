1
00:00:03,770 --> 00:00:06,507 line:-1
Hello and welcome to WWDC.


2
00:00:08,842 --> 00:00:11,512 line:0
Hello and welcome to WWDC.


3
00:00:11,578 --> 00:00:14,548 line:0
My name is Anton, and in this session
we are going to take some time


4
00:00:14,615 --> 00:00:18,352 line:0
to talk about your SwiftUI views
and modifiers inside Xcode.


5
00:00:18,785 --> 00:00:21,054 line:-2
Since the very beginning,
Xcode Previews was built


6
00:00:21,121 --> 00:00:23,123 line:-1
to put your content front and center.


7
00:00:23,190 --> 00:00:27,060 line:-2
For example, your views are previewable
without doing any extra work,


8
00:00:27,127 --> 00:00:30,464 line:-2
and most user modifiers are inspectable
right out of the box as well.


9
00:00:31,298 --> 00:00:34,134 line:-1
In Xcode 12, we are taking a step further


10
00:00:34,201 --> 00:00:38,539 line:-2
by letting you add your SwiftUI views
and modifiers to the Xcode Library.


11
00:00:38,939 --> 00:00:42,976 line:-2
Let's take a step back and talk about
some benefits of the Xcode Library.


12
00:00:43,043 --> 00:00:45,312 line:-1
First, discoverability.


13
00:00:45,379 --> 00:00:48,682 line:-2
As your code base grows, it can become
hard for the users of your code


14
00:00:48,749 --> 00:00:51,451 line:-2
to know exactly what the key parts
of your API are.


15
00:00:52,219 --> 00:00:55,756 line:-2
The Library is a place where developers
look to discover available visual content,


16
00:00:55,822 --> 00:00:59,126 line:-2
and by placing your most important
and most reusable views there,


17
00:00:59,193 --> 00:01:00,827 line:-1
you make them easier to find.


18
00:01:01,728 --> 00:01:04,096 line:-1
But discoverability is just the beginning.


19
00:01:04,164 --> 00:01:07,000 line:-2
Since each asset in the Library
comes in a compilable form,


20
00:01:07,067 --> 00:01:10,571 line:-2
it can serve as an excellent way
of educating the users of your code


21
00:01:10,637 --> 00:01:14,441 line:-2
about how any particular view
or modifier was intended to be used


22
00:01:14,508 --> 00:01:18,312 line:-2
with a clear example that can often
serve as an excellent starting point.


23
00:01:18,979 --> 00:01:19,980 line:-1
And finally,


24
00:01:20,047 --> 00:01:23,417 line:-2
every asset in the Library can be
dragged and dropped into the canvas,


25
00:01:23,483 --> 00:01:25,953 line:-2
and inserting views and modifiers
from the Library


26
00:01:26,019 --> 00:01:28,422 line:-2
allows Xcode Previews
to continue rendering,


27
00:01:28,488 --> 00:01:31,391 line:-2
enabling rich visual editing
for your content.


28
00:01:31,792 --> 00:01:35,762 line:-2
So now let's look at what you need to do
to expose your content in the Library.


29
00:01:35,829 --> 00:01:39,099 line:-2
And this is where the Library takes
a page from Xcode Previews' playbook.


30
00:01:39,166 --> 00:01:41,435 line:-2
Since the view or modifier
you're adding to your Library


31
00:01:41,502 --> 00:01:44,037 line:-2
is defined in Swift code,
the most natural place to define


32
00:01:44,104 --> 00:01:46,907 line:-2
how to expose it in the Library
is also in Swift code,


33
00:01:46,974 --> 00:01:49,209 line:-2
right next to the view
or the modifier itself.


34
00:01:49,543 --> 00:01:52,913 line:-2
The big advantage of doing that
is that the compiler can help us ensure


35
00:01:52,980 --> 00:01:56,283 line:-2
that the Library items remain functional
as your API changes.


36
00:01:57,217 --> 00:02:00,420 line:-2
To extend the Xcode Library,
we need to declare a new type


37
00:02:00,487 --> 00:02:02,956 line:-2
that conforms
to the Library content provider protocol.


38
00:02:03,924 --> 00:02:05,659 line:-1
This protocol has two requirements:


39
00:02:06,326 --> 00:02:10,497 line:-2
the views property, which you can use
to extend the views Xcode Library,


40
00:02:10,564 --> 00:02:11,965 line:-1
and the modifiers function,


41
00:02:12,032 --> 00:02:14,868 line:-2
which you can use
to extend the modifiers Xcode Library.


42
00:02:14,935 --> 00:02:18,205 line:-2
There are some differences between the two
which we will discuss in a moment,


43
00:02:18,272 --> 00:02:22,876 line:-2
but for now notice that both of them
return an array of Library items.


44
00:02:23,777 --> 00:02:26,046 line:-2
Let's look at how to create
a Library item.


45
00:02:27,147 --> 00:02:30,584 line:-2
The minimum amount of data
that Xcode needs to create a Library item


46
00:02:30,651 --> 00:02:32,519 line:-1
is a completion that will get inserted


47
00:02:32,586 --> 00:02:35,189 line:-2
when the user picks that item
from the Library.


48
00:02:35,255 --> 00:02:38,492 line:-2
But you can also optionally specify
additional information,


49
00:02:38,559 --> 00:02:41,061 line:-1
such as that Library item's visibility...


50
00:02:42,262 --> 00:02:44,164 line:-1
a more descriptive title for the item,


51
00:02:44,898 --> 00:02:46,099 line:-1
or its category.


52
00:02:46,433 --> 00:02:47,801 line:-1
There's a lot to unpack here,


53
00:02:47,868 --> 00:02:50,637 line:-2
and the best way to discover this API
is with a demo.


54
00:02:50,704 --> 00:02:51,972 line:-1
So let's take a look.


55
00:02:53,674 --> 00:02:57,578 line:-2
So I am here in a Fruta app that
my team has been working on for a while.


56
00:02:57,644 --> 00:03:01,481 line:-2
This is an app that allows the user
to explore different kinds of smoothies,


57
00:03:01,548 --> 00:03:04,084 line:-2
and in particular,
I'm looking at a smoothie row view,


58
00:03:04,151 --> 00:03:08,055 line:-2
which is a view designed to showcase
a particular smoothie with information


59
00:03:08,121 --> 00:03:11,959 line:-2
such as its title, its ingredients,
its image and so on.


60
00:03:12,025 --> 00:03:14,228 line:-2
This view is used
in a couple places in our app,


61
00:03:14,294 --> 00:03:17,331 line:-2
so I'd like to add it to the Library
to make their use easier.


62
00:03:17,397 --> 00:03:18,565 line:-1
I'm gonna do that now.


63
00:03:20,634 --> 00:03:24,404 line:-2
We just scroll to the bottom of this file
and add a new type


64
00:03:24,471 --> 00:03:27,608 line:0
that conforms
to the Library content provider protocol.


65
00:03:27,674 --> 00:03:30,711 line:0
This type can be named anything,
but for the purposes of this demo,


66
00:03:30,777 --> 00:03:32,946 line:0
I'm going to call it LibraryContent.


67
00:03:33,013 --> 00:03:37,417 line:-2
Since what I'm adding is a view,
I'm gonna add a views property.


68
00:03:38,652 --> 00:03:40,888 line:0
And now I need to add a Library item.


69
00:03:42,589 --> 00:03:44,224 line:0
To finish completing the Library item,


70
00:03:44,291 --> 00:03:46,860 line:0
I need to provide a completion
that represents my view.


71
00:03:46,927 --> 00:03:49,162 line:0
Since what I'm adding
is a smoothie row view,


72
00:03:49,229 --> 00:03:52,266 line:0
I'm just going to instantiate
a SmoothieRowView here.


73
00:03:52,332 --> 00:03:55,736 line:0
I'm going to provide
some default data here for my smoothie.


74
00:03:55,802 --> 00:03:58,272 line:0
I'm gonna pick out of the list
of preexisting ones.


75
00:03:58,338 --> 00:04:01,808 line:0
And I like lemonberry,
so I'm just gonna pick lemonberry here.


76
00:04:01,875 --> 00:04:06,280 line:-2
And that's really all we need
to create a Library item for this view.


77
00:04:06,346 --> 00:04:09,550 line:-2
I'm ready to use it.
I'm going to switch to the smoothie list.


78
00:04:10,484 --> 00:04:14,655 line:-2
As the name applies, this is just a view
that takes an array of smoothies


79
00:04:14,721 --> 00:04:16,857 line:-1
and shows them in a navigable list.


80
00:04:16,923 --> 00:04:19,660 line:-2
It's empty right now,
as you can see from the preview.


81
00:04:19,726 --> 00:04:22,462 line:-2
I'm going to populate it
with my smoothie row view.


82
00:04:22,529 --> 00:04:26,366 line:-2
To do that, I'm going to click
on the Library icon in the toolbar,


83
00:04:26,433 --> 00:04:29,102 line:-2
which is a little plus,
and I'm gonna search for "smoothie."


84
00:04:29,703 --> 00:04:34,441 line:-2
As you can see,
Xcode already discovered my Library item


85
00:04:34,508 --> 00:04:36,109 line:-1
and populated the Library with it.


86
00:04:36,844 --> 00:04:40,747 line:-2
It even gave it a category, Fruta,
which matches the name of my project.


87
00:04:41,215 --> 00:04:44,885 line:-2
This makes local items
from my project easier to find.


88
00:04:44,952 --> 00:04:48,589 line:-2
It also gave it a rich title,
Smoothie Row View,


89
00:04:48,655 --> 00:04:50,791 line:-2
which is based
on the completion I provided.


90
00:04:50,858 --> 00:04:54,261 line:-2
So now I can just drag this Library item
right into my code...


91
00:04:55,462 --> 00:05:00,534 line:-2
and my preview will update automatically
to reflect the change that I just made.


92
00:05:00,601 --> 00:05:05,539 line:-2
Notice that all of the rows in this list
right now are saying "lemonberry,"


93
00:05:05,606 --> 00:05:09,209 line:-2
and that's because Xcode inserted
exactly what I specified


94
00:05:09,276 --> 00:05:11,311 line:-1
with a lemonberry placeholder.


95
00:05:11,378 --> 00:05:13,247 line:-1
But there's a slight difference here.


96
00:05:13,313 --> 00:05:16,416 line:-2
The argument
for the smoothie row view here,


97
00:05:16,483 --> 00:05:18,819 line:-1
lemonberry, that I provided, is tokenized.


98
00:05:18,886 --> 00:05:20,854 line:-1
And that's because Library items


99
00:05:20,921 --> 00:05:24,391 line:-2
are meant to be a starting point
that can be customized


100
00:05:24,458 --> 00:05:28,128 line:-2
based on the insertion context
for the view that you are inserting.


101
00:05:28,195 --> 00:05:30,797 line:-2
So I'm going to select
the lemonberry token here


102
00:05:30,864 --> 00:05:33,300 line:-2
and replace it with the data
from the list--


103
00:05:33,367 --> 00:05:34,801 line:-1
in this case, just "smoothie."


104
00:05:35,969 --> 00:05:39,506 line:-2
So the preview updates
to show me the content of the list


105
00:05:39,573 --> 00:05:42,142 line:-2
with the different smoothies
provided from its preview.


106
00:05:42,209 --> 00:05:43,677 line:-1
That's exactly what I want.


107
00:05:44,178 --> 00:05:47,915 line:-2
So now let's talk about customizations
options for this Library item.


108
00:05:47,981 --> 00:05:52,252 line:-2
And for that, I'm going to go back to
the LibraryContent struct I'm working on.


109
00:05:52,319 --> 00:05:54,321 line:-1
First, let's talk about the category.


110
00:05:54,855 --> 00:05:57,758 line:-1
The project category is very useful


111
00:05:57,824 --> 00:06:01,795 line:-2
for projects that are small
and add a small number of items,


112
00:06:02,663 --> 00:06:03,830 line:-1
such as this demo.


113
00:06:04,264 --> 00:06:07,401 line:-2
But for a larger project
that adds a lot of items,


114
00:06:07,467 --> 00:06:10,771 line:-2
this category will become pretty unwieldy
pretty quickly.


115
00:06:10,838 --> 00:06:14,007 line:-2
If you've ever used
SwiftUI's Xcode Library,


116
00:06:14,074 --> 00:06:16,243 line:-1
you noticed that SwiftUI deals with that


117
00:06:16,310 --> 00:06:20,480 line:-2
by adding categories
that correspond to functionality,


118
00:06:20,547 --> 00:06:23,884 line:-2
such as controls, layout,
effects and so on.


119
00:06:23,951 --> 00:06:27,888 line:-2
We can do the same
for our Library items as well.


120
00:06:29,089 --> 00:06:32,492 line:-2
I'm going to go back to my code
and add an argument here


121
00:06:32,559 --> 00:06:34,194 line:-1
to specify the category.


122
00:06:34,795 --> 00:06:37,865 line:0
I'm going to pick control
because this view is most like control.


123
00:06:37,931 --> 00:06:40,767 line:-2
It provides data
and allows me to interact with it.


124
00:06:40,834 --> 00:06:44,505 line:0
Now if I bring up the Library
with a Command-Shift-L shortcut


125
00:06:44,571 --> 00:06:45,772 line:-1
and search for "smoothie,"


126
00:06:46,540 --> 00:06:50,077 line:-2
you'll see that the category
of this Library item was updated.


127
00:06:50,777 --> 00:06:52,079 line:-1
It's still prepended with Fruta,


128
00:06:52,145 --> 00:06:54,281 line:-2
so it's still easy for me
to find the local ones,


129
00:06:54,348 --> 00:06:57,251 line:-2
but now it's clearly indicated
that my view is a control.


130
00:06:57,985 --> 00:07:00,888 line:-2
The icon for the Library item
changed as well


131
00:07:00,954 --> 00:07:04,358 line:-2
to indicate that it's control
with the color blue.


132
00:07:05,225 --> 00:07:08,729 line:-2
So views don't have to correspond
to Library items one-to-one.


133
00:07:08,795 --> 00:07:11,765 line:-2
It is perfectly reasonable
to create multiple Library items


134
00:07:11,832 --> 00:07:14,468 line:-2
representing the same view
in different configurations.


135
00:07:15,369 --> 00:07:20,908 line:-2
In this particular case, smoothie row view
has another argument that lets me specify


136
00:07:20,974 --> 00:07:25,112 line:-2
whether I want to see local popularity
of a particular smoothie.


137
00:07:25,179 --> 00:07:28,549 line:-2
I'm going to add a Library item
for that configuration as well.


138
00:07:28,615 --> 00:07:32,953 line:-2
I'm going to go back to my views property
and add another Library item.


139
00:07:33,020 --> 00:07:34,988 line:-1
And it also creates a SmoothieRowView,


140
00:07:35,055 --> 00:07:38,392 line:-2
but now it also uses
showNearbyPopularity flag


141
00:07:38,458 --> 00:07:40,127 line:-1
and sets its default to "true."


142
00:07:40,894 --> 00:07:42,729 line:-1
If I bring up my Library again...


143
00:07:44,431 --> 00:07:47,100 line:-1
I can see that my Library item got added,


144
00:07:47,167 --> 00:07:49,469 line:-2
just like I would expect,
but there's a problem.


145
00:07:50,070 --> 00:07:51,939 line:-1
It's really hard for me to tell


146
00:07:52,005 --> 00:07:55,542 line:-2
which Library item
represents which instantiations.


147
00:07:56,109 --> 00:08:00,480 line:-2
I can fix that by adding another argument
to this Library item instantiation


148
00:08:00,547 --> 00:08:02,049 line:0
that specifies its title.


149
00:08:02,115 --> 00:08:05,118 line:0
In this case, I'm gonna say
"Smoothie Row View With Popularity."


150
00:08:05,185 --> 00:08:07,421 line:0
And while I'm here,
I can also fix its category


151
00:08:07,487 --> 00:08:10,390 line:0
to match the other smoothie row view
as well.


152
00:08:10,457 --> 00:08:12,292 line:-1
Now, if I bring up the Library,


153
00:08:12,359 --> 00:08:15,596 line:-2
I can see that my Library item
got updated,


154
00:08:15,662 --> 00:08:19,132 line:-2
and it's much easier for me to tell
which one is which.


155
00:08:20,467 --> 00:08:24,938 line:-2
So that's a quick intro in how to add
a view to the Xcode Library.


156
00:08:25,005 --> 00:08:26,807 line:-1
But what about modifiers?


157
00:08:26,874 --> 00:08:30,644 line:-2
It turns out the idea is very similar,
but has a little bit of a detail.


158
00:08:30,711 --> 00:08:32,712 line:-1
Let me set the stage for a second.


159
00:08:33,947 --> 00:08:35,682 line:-1
As I audited my code,


160
00:08:35,749 --> 00:08:38,519 line:-2
I found out that a lot of times
when we use an image,


161
00:08:38,585 --> 00:08:41,321 line:-2
we also use
these three modifiers in a row:


162
00:08:41,388 --> 00:08:44,658 line:-1
resizable, aspectRatio and frame.


163
00:08:44,725 --> 00:08:48,195 line:-2
And the result of these modifiers
is to resize an image to a particular size


164
00:08:48,262 --> 00:08:50,163 line:-1
while keeping its aspect ratio.


165
00:08:51,331 --> 00:08:55,502 line:-2
We use it enough that I actually separated
this functionality into its own modifier.


166
00:08:55,936 --> 00:08:57,971 line:-1
I created an extension on Image,


167
00:08:58,639 --> 00:09:00,941 line:-2
and I created a function
called resizedToFill,


168
00:09:01,008 --> 00:09:03,110 line:-1
which takes a width and height.


169
00:09:03,177 --> 00:09:05,312 line:-1
And this function just takes the image


170
00:09:05,379 --> 00:09:09,082 line:-2
and applies the three modifiers to it
and returns the result.


171
00:09:09,149 --> 00:09:13,253 line:-2
I'd like to add resizedToFill
to the modifiers Library.


172
00:09:13,320 --> 00:09:16,390 line:-2
To do that, I'm going to implement
the second requirement


173
00:09:16,456 --> 00:09:19,593 line:-2
of the Library content provider protocol,
the modifiers function.


174
00:09:20,160 --> 00:09:22,563 line:-2
And this is very similar
to the views property,


175
00:09:22,629 --> 00:09:24,898 line:-1
but it requires a base argument.


176
00:09:25,399 --> 00:09:28,569 line:-2
When figuring out what the completion
for the Library item should be,


177
00:09:28,635 --> 00:09:30,504 line:-1
Xcode needs a way to be able to tell


178
00:09:30,571 --> 00:09:32,606 line:-2
which part of the completion
is the modifier


179
00:09:32,673 --> 00:09:34,741 line:-1
and which part is the thing it modifies.


180
00:09:34,808 --> 00:09:38,078 line:-2
And the base is the way for us
to communicate that.


181
00:09:38,145 --> 00:09:42,816 line:-2
So since my modifier is declared on Image,
I'm going to set this type to Image.


182
00:09:45,152 --> 00:09:47,921 line:-1
And then I'm going to add my Library item.


183
00:09:47,988 --> 00:09:51,825 line:-2
Its completion is base
with resizedToFill called on it.


184
00:09:52,793 --> 00:09:55,929 line:-2
And I just need to populate this
with sample data.


185
00:09:56,763 --> 00:10:00,100 line:-2
And just like that,
my modifier item is ready to be used.


186
00:10:00,634 --> 00:10:02,636 line:-1
I'm going to scroll back to my image


187
00:10:03,136 --> 00:10:06,340 line:-2
and delete the three modifiers
I'm trying to replace.


188
00:10:10,110 --> 00:10:13,313 line:-2
I'm going to bring up the Library again,
but this time I'm going to switch


189
00:10:13,380 --> 00:10:16,083 line:-2
to the Modifiers tab
and search for "resized."


190
00:10:18,252 --> 00:10:19,653 line:-1
And here's my new modifier.


191
00:10:19,720 --> 00:10:22,356 line:-2
I can use it right now
by hitting "return,"


192
00:10:22,422 --> 00:10:25,025 line:-2
and what gets inserted
is exactly what I would expect.


193
00:10:25,092 --> 00:10:28,529 line:-2
Xcode stripped the base part
and just inserted the modifier itself


194
00:10:28,595 --> 00:10:30,197 line:-1
and tokenized the arguments.


195
00:10:30,264 --> 00:10:33,367 line:-1
So I can customize them here with size...


196
00:10:34,768 --> 00:10:37,104 line:-1
and size, like it was before.


197
00:10:38,038 --> 00:10:41,208 line:-2
And just like that,
I used my modifier from the Library.


198
00:10:41,909 --> 00:10:44,645 line:-2
You may have noticed that
at no point during this demo


199
00:10:44,711 --> 00:10:48,182 line:-2
we had to build or run our project
to populate the Library.


200
00:10:48,248 --> 00:10:51,185 line:-2
This is because Xcode can harvest
the Library definitions


201
00:10:51,251 --> 00:10:54,521 line:-2
by simply scanning your source
for Library content providers


202
00:10:54,588 --> 00:10:56,190 line:-1
and parsing their declarations.


203
00:10:56,256 --> 00:10:58,058 line:-1
There are several advantages to this.


204
00:10:58,125 --> 00:11:01,094 line:-2
First, it means that if your project
is not in a runnable state,


205
00:11:01,161 --> 00:11:03,530 line:-2
it can still contribute content
to the Library,


206
00:11:03,597 --> 00:11:06,934 line:-2
which is really handy when you are
in the middle of a UI rework,


207
00:11:07,000 --> 00:11:11,071 line:-2
your project doesn't run, but you
still want the content of the Library.


208
00:11:11,138 --> 00:11:14,107 line:-2
It also means that there's
no additional build configuration required


209
00:11:14,174 --> 00:11:15,309 line:-1
to enable this feature,


210
00:11:15,375 --> 00:11:18,612 line:-2
and since Library content provider code
is never actually executed,


211
00:11:18,679 --> 00:11:22,149 line:-2
the compiler will strip it when
your project is built for distribution.


212
00:11:22,549 --> 00:11:24,218 line:-1
So this approach works really well


213
00:11:24,284 --> 00:11:27,221 line:-2
for building a library of content
for your work space or project,


214
00:11:27,487 --> 00:11:31,491 line:-2
but since Xcode scans all source files
in your work space for library content,


215
00:11:31,558 --> 00:11:33,794 line:-1
including any dependencies you have,


216
00:11:33,861 --> 00:11:37,164 line:-2
it actually works really well
with Swift packages as well.


217
00:11:37,231 --> 00:11:41,168 line:-2
In our project, we have a dependency
on the nutrition facts we've packaged,


218
00:11:41,235 --> 00:11:44,505 line:-2
which provides facilities
for visualizing nutritional information.


219
00:11:44,571 --> 00:11:47,074 line:-2
I'm looking for a view
that will allow me to display


220
00:11:47,140 --> 00:11:50,077 line:-2
caloric information of a smoothie
in my row view.


221
00:11:50,143 --> 00:11:53,680 line:-2
I can use the Library to explore
the content of the nutrition facts package


222
00:11:53,747 --> 00:11:55,115 line:-1
for a view I want.


223
00:11:55,682 --> 00:11:57,951 line:-1
I'm going to bring up the Library again.


224
00:11:58,519 --> 00:12:01,288 line:-2
But this time I'm going to switch back
to the Views tab


225
00:12:01,355 --> 00:12:06,760 line:-2
and scroll down
until I find the nutrition facts category.


226
00:12:06,827 --> 00:12:08,962 line:-1
This is a category that Xcode created


227
00:12:09,029 --> 00:12:11,398 line:-2
for the content of the nutrition facts
Swift package.


228
00:12:11,465 --> 00:12:13,667 line:-2
I can see that there's
a Calorie Count View here,


229
00:12:13,734 --> 00:12:15,369 line:-1
which sounds like exactly what I want.


230
00:12:15,435 --> 00:12:17,671 line:0
I'm going to hit "return" to insert it,


231
00:12:17,738 --> 00:12:21,408 line:0
and my preview will update
to reflect the change that I just made.


232
00:12:21,475 --> 00:12:24,278 line:0
This basically looks exactly
like what I want,


233
00:12:24,344 --> 00:12:27,414 line:0
so all I need to do now
is to populate this view


234
00:12:27,481 --> 00:12:29,516 line:0
with data from my model.


235
00:12:29,583 --> 00:12:31,585 line:0
Fortunately,
I already have nutrition facts,


236
00:12:31,652 --> 00:12:35,189 line:0
so I can just type
smoothie.nutritionFact here


237
00:12:35,255 --> 00:12:37,124 line:0
and have my view updated.


238
00:12:37,724 --> 00:12:40,928 line:-2
And just like that,
I was able to discover and use


239
00:12:40,994 --> 00:12:44,765 line:-2
content from a Swift package
without ever opening its source code.


240
00:12:45,299 --> 00:12:47,034 line:-1
To summarize, in this session,


241
00:12:47,100 --> 00:12:48,969 line:-2
we've learned how to extend
the Xcode Library


242
00:12:49,036 --> 00:12:52,239 line:-2
by creating a type that conforms
to the Library content provider protocol,


243
00:12:52,306 --> 00:12:54,608 line:-2
implementing one or both
of its requirements


244
00:12:54,675 --> 00:12:58,812 line:-2
and returning instances of Library items
that correspond to the individual items.


245
00:12:59,313 --> 00:13:01,782 line:-1
Thank you, and have a great WWDC.

