1
00:00:03,971 --> 00:00:06,807 line:-1
Hello and welcome to WWDC.


2
00:00:08,742 --> 00:00:12,579 line:0
Welcome to "iPad and iPhone Apps
on Apple Silicon Macs."


3
00:00:13,280 --> 00:00:14,882 line:0
My name is Jason Beaver,


4
00:00:14,948 --> 00:00:18,619 line:0
and I'll be joined later by my colleagues
James Snee and Patrick Heynen.


5
00:00:19,253 --> 00:00:22,523 line:-2
As you may have seen in the Keynote
or State of the Union talks,


6
00:00:22,589 --> 00:00:25,058 line:-1
Big Sur on Apple Silicon


7
00:00:25,125 --> 00:00:30,464 line:-2
allows you to run iOS apps natively
on the Mac without recompilation.


8
00:00:31,098 --> 00:00:33,901 line:-2
The Mac is a robust platform
for development


9
00:00:33,967 --> 00:00:36,336 line:-1
that enables all kinds of apps.


10
00:00:36,403 --> 00:00:39,006 line:-2
There's everything
from powerful desktop apps


11
00:00:39,072 --> 00:00:42,409 line:-2
to web-based experiences
and graphic-intensive games.


12
00:00:42,476 --> 00:00:46,847 line:-2
These experiences are all powered
by our dedicated UI frameworks.


13
00:00:47,614 --> 00:00:49,283 line:-1
In macOS Catalina,


14
00:00:49,349 --> 00:00:52,319 line:-2
we added the ability to build
your iOS apps for the Mac


15
00:00:52,386 --> 00:00:53,587 line:-1
with Mac Catalyst.


16
00:00:54,021 --> 00:00:55,923 line:-1
Mac Catalyst makes UIKit


17
00:00:55,989 --> 00:00:59,493 line:-2
a native peer to these other
UI frameworks on the Mac


18
00:00:59,560 --> 00:01:02,262 line:-1
and enables you to bring your iOS apps


19
00:01:02,329 --> 00:01:05,364 line:-2
over to the Mac
as first-class experiences.


20
00:01:06,266 --> 00:01:07,835 line:0
You can refer to last year's


21
00:01:07,901 --> 00:01:10,237 line:0
"Introducing iPad Apps for Mac" session


22
00:01:10,304 --> 00:01:12,139 line:0
to hear all about how we did this.


23
00:01:12,940 --> 00:01:16,844 line:-2
Mac Catalyst requires building your app
with the macOS SDK


24
00:01:16,910 --> 00:01:21,315 line:-2
and gives you the ability to customize
and optimize your application


25
00:01:21,381 --> 00:01:23,550 line:-1
to take full advantage of the Mac.


26
00:01:24,885 --> 00:01:26,220 line:-1
In macOS Big Sur,


27
00:01:26,286 --> 00:01:28,755 line:-2
we are leveraging
this Mac Catalyst infrastructure


28
00:01:28,822 --> 00:01:32,726 line:-2
to enable running
your existing iOS apps as-is


29
00:01:32,793 --> 00:01:34,795 line:-1
on Apple Silicon-based Macs.


30
00:01:35,429 --> 00:01:39,166 line:-1
Here, "as-is" really means "as-is."


31
00:01:39,666 --> 00:01:45,172 line:-2
We enable the user on the Mac to purchase
or download, through the Mac App Store,


32
00:01:45,239 --> 00:01:48,942 line:-2
the application you've already
made available on the iOS App Store.


33
00:01:49,009 --> 00:01:51,178 line:-1
It is the exact same binary.


34
00:01:52,779 --> 00:01:55,649 line:-2
Because these apps use
the same underlying infrastructure


35
00:01:55,716 --> 00:01:57,751 line:-1
that is used for Mac Catalyst apps,


36
00:01:57,818 --> 00:02:01,188 line:-2
the same unified frameworks
and the same iOS frameworks


37
00:02:01,255 --> 00:02:03,590 line:-1
brought over and integrated with the Mac,


38
00:02:03,657 --> 00:02:05,826 line:-1
your iPad and iPhone apps


39
00:02:05,893 --> 00:02:08,794 line:-2
get a tremendous amount
of behavior automatically,


40
00:02:08,862 --> 00:02:11,331 line:-1
making them feel right at home on the Mac.


41
00:02:13,600 --> 00:02:15,669 line:-1
However, they don't have access


42
00:02:15,736 --> 00:02:18,205 line:-1
to all that a Mac app would like to offer.


43
00:02:18,272 --> 00:02:21,508 line:-2
If you want to take your iOS applications
further on the Mac,


44
00:02:21,575 --> 00:02:24,745 line:-2
create a Mac Catalyst version
by checking that switch in Xcode.


45
00:02:25,212 --> 00:02:26,914 line:-2
This will give you
the ability to customize


46
00:02:26,980 --> 00:02:28,649 line:-1
your app's behavior on the Mac,


47
00:02:28,715 --> 00:02:30,384 line:-1
as well as allow you to distribute


48
00:02:30,450 --> 00:02:32,719 line:-1
your application on all Macs,


49
00:02:32,786 --> 00:02:35,122 line:-1
not just those running Apple Silicon.


50
00:02:35,722 --> 00:02:38,258 line:-2
For your app to be available
in the Mac App Store,


51
00:02:38,325 --> 00:02:40,260 line:-1
it must be compatible with the Mac.


52
00:02:40,827 --> 00:02:44,298 line:-2
Your app can't be dependent
on an unavailable symbol or framework,


53
00:02:44,998 --> 00:02:49,102 line:-2
it can't be dependent on missing
functionality in existing frameworks,


54
00:02:49,536 --> 00:02:52,306 line:-2
and it can't be dependent
on hardware capabilities


55
00:02:52,372 --> 00:02:54,041 line:-1
that don't exist on the Mac.


56
00:02:55,175 --> 00:02:56,577 line:-1
Compatible iOS apps


57
00:02:56,643 --> 00:02:59,680 line:-2
are automatically available
in the Mac App Store,


58
00:03:00,147 --> 00:03:03,851 line:-2
but you can manage the availability
of your app in App Store Connect.


59
00:03:03,917 --> 00:03:07,988 line:-2
You might choose not to make your
iOS app available in the Mac App Store


60
00:03:08,055 --> 00:03:10,858 line:-2
if you already have a Mac app
or are planning on shipping one


61
00:03:11,391 --> 00:03:13,894 line:-2
or if your app
doesn't make sense on the Mac.


62
00:03:14,461 --> 00:03:17,130 line:-2
Patrick will discuss this further
later in the session.


63
00:03:18,565 --> 00:03:23,270 line:-2
Most existing iPad and iPhone apps
run great on macOS,


64
00:03:23,770 --> 00:03:27,107 line:-2
but the environment has some differences
that you should be aware of.


65
00:03:28,041 --> 00:03:30,143 line:-1
These fall into three categories:


66
00:03:30,577 --> 00:03:35,616 line:-2
hardware differences, UI differences
and system software differences.


67
00:03:36,083 --> 00:03:38,118 line:-1
Let's start with hardware differences.


68
00:03:38,852 --> 00:03:43,190 line:-2
iOS is built around a direct,
multi-touch interaction model,


69
00:03:43,824 --> 00:03:48,195 line:-2
but macOS is built around an indirect,
cursor-based interaction model.


70
00:03:48,929 --> 00:03:53,500 line:-2
The infrastructure automatically maps
many multi-touch gestures,


71
00:03:53,567 --> 00:03:56,537 line:-2
but if your application uses
custom touch handling,


72
00:03:56,603 --> 00:03:59,873 line:-2
you should test whether your application
is compatible with the Mac.


73
00:03:59,940 --> 00:04:02,609 line:-2
If your application supports
keyboard entry


74
00:04:02,676 --> 00:04:05,379 line:-2
as an alternative
to your custom touch handling,


75
00:04:05,445 --> 00:04:08,348 line:-2
that will also help your app
be more compatible with the Mac,


76
00:04:08,415 --> 00:04:10,851 line:-1
as well as a better experience on iOS.


77
00:04:12,019 --> 00:04:16,623 line:-2
iOS devices have a range of sensors
that aren't available on Macs,


78
00:04:16,690 --> 00:04:20,761 line:-2
such as accelerometers, gyroscopes,
magnetometers,


79
00:04:20,827 --> 00:04:23,163 line:-1
depth-sensing cameras and GPS.


80
00:04:23,997 --> 00:04:28,669 line:-2
By dynamically confirming in your code
that the appropriate sensor is present,


81
00:04:28,735 --> 00:04:33,774 line:-2
you can ensure that your app is compatible
with the entire range of iOS devices,


82
00:04:33,841 --> 00:04:35,876 line:-1
as well as compatible with the Mac.


83
00:04:36,443 --> 00:04:40,013 line:-2
Note that not all APIs
that are dependent on these sensors


84
00:04:40,080 --> 00:04:41,415 line:-1
fail to work on the Mac.


85
00:04:41,949 --> 00:04:46,320 line:-2
For example, even though Macs
do not contain GPS receivers,


86
00:04:46,386 --> 00:04:48,255 line:-1
they do support Core Location


87
00:04:48,322 --> 00:04:51,124 line:-2
and can provide position information
to your app,


88
00:04:51,191 --> 00:04:54,228 line:-2
though it will be less precise
than it would be with GPS.


89
00:04:55,162 --> 00:04:59,499 line:-2
iOS devices typically just have
front- and rear-facing cameras.


90
00:04:59,566 --> 00:05:03,170 line:-2
Macs, on the other hand,
may have built-in front-facing cameras,


91
00:05:03,237 --> 00:05:05,639 line:-1
like in our laptops and some desktops,


92
00:05:05,706 --> 00:05:08,642 line:-2
but may also include cameras
built into external displays


93
00:05:08,709 --> 00:05:10,677 line:-1
or cameras plugged in via USB.


94
00:05:11,445 --> 00:05:15,782 line:-2
iOS apps may not be prepared
to deal with all of these configurations,


95
00:05:16,450 --> 00:05:19,219 line:-2
but using
the AVCaptureDeviceDiscoverySession


96
00:05:19,286 --> 00:05:21,989 line:-2
instead of enumerating
all of the AV capture devices


97
00:05:22,055 --> 00:05:25,559 line:-2
will allow us to ensure
that your app has access


98
00:05:25,626 --> 00:05:27,694 line:-2
to the most appropriate camera
for your needs.


99
00:05:28,529 --> 00:05:30,631 line:-1
Now, let's talk about some UI differences.


100
00:05:33,300 --> 00:05:34,768 line:-1
As we discussed before,


101
00:05:34,835 --> 00:05:39,173 line:-2
iOS apps automatically get a great deal
of system behavior from macOS.


102
00:05:39,873 --> 00:05:43,911 line:-2
This will necessarily look and behave
differently than on iOS devices.


103
00:05:43,977 --> 00:05:46,246 line:-1
For example, alerts and pop-ups


104
00:05:46,313 --> 00:05:48,448 line:-2
may show up in different locations
on the Mac


105
00:05:48,515 --> 00:05:51,351 line:-2
and Open and Save panels
will show in separate windows.


106
00:05:52,085 --> 00:05:54,054 line:-2
This means that it's important
that your app


107
00:05:54,121 --> 00:05:57,391 line:-2
does not hard-code any assumptions
about the UI,


108
00:05:57,457 --> 00:05:59,626 line:-1
like the location of system UI,


109
00:05:59,693 --> 00:06:02,596 line:-2
since those assumptions might be wrong
when running on the Mac.


110
00:06:03,096 --> 00:06:06,733 line:-2
On macOS, windows are typically
resizable by the user.


111
00:06:06,800 --> 00:06:10,337 line:-2
If your iPad app already supports
multitasking on iOS,


112
00:06:10,404 --> 00:06:12,906 line:-1
it will be fully resizable on macOS.


113
00:06:13,640 --> 00:06:17,211 line:-2
This means that it can run
at a wide range of sizes,


114
00:06:17,277 --> 00:06:21,582 line:-2
not just the small number of fixed sizes
supported by iOS multitasking.


115
00:06:22,249 --> 00:06:24,318 line:-1
Using Auto Layout will help you ensure


116
00:06:24,384 --> 00:06:27,421 line:-2
that your app can run correctly
at any size.


117
00:06:27,955 --> 00:06:30,924 line:-1
Window resize is also live on macOS.


118
00:06:30,991 --> 00:06:33,727 line:-2
Optimizing the performance
of your application layout


119
00:06:33,794 --> 00:06:36,396 line:-2
will improve the resize experience
on the Mac


120
00:06:36,463 --> 00:06:40,234 line:-2
and make your app even more responsive
when multitasking on iOS.


121
00:06:41,034 --> 00:06:43,804 line:-2
If your iPad app
does not support multitasking,


122
00:06:43,871 --> 00:06:45,539 line:-1
or if you have an iPhone app,


123
00:06:45,606 --> 00:06:48,809 line:-2
it will run in a fixed-size window
and will not be resizable.


124
00:06:49,576 --> 00:06:52,446 line:-2
Now let's look at some
of the system software differences.


125
00:06:52,880 --> 00:06:56,383 line:-1
On iOS, apps live in a standard location,


126
00:06:56,450 --> 00:06:59,820 line:-2
but on macOS, the user can move the app
wherever they would like.


127
00:07:00,621 --> 00:07:03,924 line:-2
Your app's data containers are also
in a different location on the Mac.


128
00:07:04,858 --> 00:07:08,629 line:-2
If you're using the Foundation APIs
to locate items in the file system,


129
00:07:08,695 --> 00:07:10,931 line:-1
all of this will be transparent to you,


130
00:07:10,998 --> 00:07:13,800 line:-2
and your app will behave correctly
when running on the Mac.


131
00:07:15,035 --> 00:07:19,072 line:-2
Some system APIs will reveal
that your application is running on a Mac.


132
00:07:19,706 --> 00:07:22,743 line:-2
For example, if you've hard-coded
parts of your system,


133
00:07:22,809 --> 00:07:25,679 line:-1
whether on the device or on your servers,


134
00:07:25,746 --> 00:07:31,051 line:-2
to expect only the devices
iPhone, iPod Touch or iPad,


135
00:07:31,118 --> 00:07:32,886 line:-1
you will likely encounter problems


136
00:07:32,953 --> 00:07:35,355 line:-2
when running your iOS application
on the Mac.


137
00:07:36,223 --> 00:07:41,195 line:-2
It is better to ensure your software
robustly handles unexpected values


138
00:07:41,261 --> 00:07:43,330 line:-1
and falls back to some default behavior.


139
00:07:44,231 --> 00:07:47,100 line:-2
Other device properties,
such as screen size,


140
00:07:47,167 --> 00:07:49,436 line:-1
can vary dramatically across Macs,


141
00:07:49,503 --> 00:07:51,839 line:-2
and your application
should not make the assumption


142
00:07:51,905 --> 00:07:55,642 line:-2
that it will match one of
the screen resolutions in our iOS devices.


143
00:07:55,709 --> 00:07:58,312 line:-2
Now I'd like to hand it over
to my colleague James,


144
00:07:58,378 --> 00:08:01,448 line:-2
who will talk about testing and debugging
your iOS apps on the Mac.


145
00:08:02,749 --> 00:08:03,984 line:-1
Thanks, Jason.


146
00:08:04,051 --> 00:08:08,455 line:-2
Being able to run iPhone and iPad apps
natively on the Apple Silicon Mac


147
00:08:08,522 --> 00:08:10,591 line:-2
allows you to reach
a whole new set of users.


148
00:08:11,191 --> 00:08:14,094 line:-2
And with macOS Big Sur,
Apple has done all the hard work


149
00:08:14,161 --> 00:08:17,264 line:-2
to make that possible
with minimal to zero effort on your part.


150
00:08:18,131 --> 00:08:21,902 line:-2
So I'm sure you want to see how your app
looks running on the Apple Silicon Mac.


151
00:08:22,336 --> 00:08:25,172 line:-2
As Jason mentioned,
your apps may be making some assumptions


152
00:08:25,239 --> 00:08:28,342 line:-2
about the devices they're running on
that are no longer true on the Mac.


153
00:08:28,909 --> 00:08:32,279 line:-2
The goal here is to ensure
that your apps function correctly


154
00:08:32,346 --> 00:08:35,916 line:-2
and that there aren't any major
UI glitches or unexpected behavior.


155
00:08:36,416 --> 00:08:39,086 line:-2
The good news is that
Xcode has great support


156
00:08:39,152 --> 00:08:42,856 line:-2
for debugging, testing and profiling
iPhone and iPad apps


157
00:08:42,923 --> 00:08:44,391 line:-1
natively on the Mac,


158
00:08:44,725 --> 00:08:48,228 line:-2
just as if it were running in a simulator
or on an iOS device.


159
00:08:48,662 --> 00:08:49,897 line:-1
Let me show you how that works.


160
00:08:51,331 --> 00:08:54,735 line:-2
Here I've got an iOS app project
open in Xcode.


161
00:08:55,269 --> 00:08:57,871 line:-2
Some of you may recognize it
from a previous session.


162
00:08:59,239 --> 00:09:02,276 line:-2
In order to run an iOS app
on the Apple Silicon Mac,


163
00:09:02,342 --> 00:09:05,579 line:-2
all you need to do is select
the new run destination,


164
00:09:05,646 --> 00:09:07,447 line:-1
My Mac, Designed for iPad.


165
00:09:07,981 --> 00:09:10,250 line:-2
So let's go ahead
and build and run this app.


166
00:09:15,722 --> 00:09:19,426 line:-2
I want to call out that this app
is building against the iOS SDK,


167
00:09:19,493 --> 00:09:21,428 line:-1
so barring the edge cases Jason mentioned,


168
00:09:21,495 --> 00:09:24,598 line:-2
you don't have to make any source changes
in order for this to run.


169
00:09:25,966 --> 00:09:30,537 line:-2
So, here we have this iOS app
running natively on the Apple Silicon Mac.


170
00:09:30,604 --> 00:09:34,174 line:-2
It's built against the iOS SDK
and isn't running in a simulator.


171
00:09:34,875 --> 00:09:36,577 line:-1
As I click around the various views,


172
00:09:36,643 --> 00:09:39,880 line:-2
I can verify that it behaves the same
as it does on an iPhone.


173
00:09:41,915 --> 00:09:44,585 line:-1
As well as running iPhone and iPad apps,


174
00:09:44,651 --> 00:09:48,555 line:-2
we've also brought all of Xcode's
great debugging and profiling capabilities


175
00:09:48,622 --> 00:09:49,623 line:-1
along for the ride.


176
00:09:52,693 --> 00:09:55,963 line:-2
While an app is running, you can get
a high-level view of its performance


177
00:09:56,029 --> 00:09:58,265 line:-1
by checking out Xcode's debug gauges.


178
00:10:01,468 --> 00:10:05,205 line:-2
You can see how much CPU time
and memory it's consuming,


179
00:10:05,272 --> 00:10:08,809 line:-2
as well as any network
and disk I/O it might be performing.


180
00:10:09,810 --> 00:10:12,546 line:-2
If you want to take a more targeted look
at what your app is doing,


181
00:10:12,613 --> 00:10:14,948 line:-1
you can pause it or set a break point


182
00:10:15,015 --> 00:10:17,751 line:-2
and use one of Xcode's
great debugging features,


183
00:10:17,818 --> 00:10:20,287 line:-1
just like you would on an iPhone or iPad.


184
00:10:20,687 --> 00:10:22,990 line:-1
For example, a common use of the debugger


185
00:10:23,056 --> 00:10:26,426 line:-2
is to investigate the state of an app
in response to a user action.


186
00:10:26,927 --> 00:10:30,597 line:-2
Let me show you how this works with
this iOS app running natively on the Mac.


187
00:10:34,067 --> 00:10:37,337 line:-2
I'm going to set a break point
here in this IBAction method.


188
00:10:38,272 --> 00:10:41,808 line:0
And I'm going to trigger it by clicking
on this useful button in the app.


189
00:10:44,211 --> 00:10:46,880 line:-2
You'll see, in response
to triggering this break point,


190
00:10:46,947 --> 00:10:49,049 line:-1
Xcode presents its debugging interface.


191
00:10:49,650 --> 00:10:52,953 line:-2
Once in the debugger, you can make use
of all the features you'd expect,


192
00:10:53,020 --> 00:10:56,023 line:-2
such as inspecting variables
and evaluating expressions.


193
00:10:56,757 --> 00:10:58,625 line:-1
To investigate more specific issues,


194
00:10:58,692 --> 00:11:01,228 line:-2
you can check out the Memory
and View debuggers.


195
00:11:01,295 --> 00:11:04,064 line:-2
And for understanding or tracking
the performance of your app,


196
00:11:04,131 --> 00:11:05,666 line:-1
you can use Instruments.


197
00:11:06,266 --> 00:11:08,936 line:-2
And finally,
I'm sure you're wondering about testing.


198
00:11:09,369 --> 00:11:10,871 line:-1
Tests are a great way to verify


199
00:11:10,938 --> 00:11:12,940 line:-2
that your software
is behaving as you expect.


200
00:11:13,340 --> 00:11:14,341 line:-1
Let me show you.


201
00:11:18,679 --> 00:11:22,783 line:-2
With Xcode, you can run
your iOS app XCTest unit tests


202
00:11:22,850 --> 00:11:25,118 line:-1
natively on your Apple Silicon Mac.


203
00:11:25,752 --> 00:11:27,421 line:-1
I'm going to execute these tests


204
00:11:27,487 --> 00:11:29,990 line:-2
by clicking Run here
in the Test Navigator.


205
00:11:32,092 --> 00:11:35,796 line:-2
Like running the app, these tests
are being built against the iOS SDK


206
00:11:35,863 --> 00:11:37,331 line:-1
and are running natively.


207
00:11:42,402 --> 00:11:44,037 line:-1
Great. The tests pass.


208
00:11:45,572 --> 00:11:50,410 line:-2
Xcode provides a great set of tools
to help you debug, test and profile


209
00:11:50,477 --> 00:11:53,780 line:-2
iPhone and iPad apps
natively on the Apple Silicon Mac.


210
00:11:54,381 --> 00:11:56,316 line:-2
And with that,
I'll hand it over to Patrick


211
00:11:56,383 --> 00:11:59,620 line:-2
to talk about distributing
iPhone and iPad apps for the Mac.


212
00:12:00,654 --> 00:12:03,724 line:-2
So, now that we understand
how iPad and iPhone apps work,


213
00:12:03,790 --> 00:12:05,893 line:-2
let's talk about how these apps
get on the Macs


214
00:12:05,959 --> 00:12:08,161 line:-2
your users and team members
will be running.


215
00:12:09,429 --> 00:12:12,733 line:-2
The good news is that distribution
for your iOS app on the Mac


216
00:12:12,799 --> 00:12:15,802 line:-2
works exactly like it does
on iPad or iPhone today.


217
00:12:16,570 --> 00:12:18,972 line:-2
All of the workflows
you are familiar with today


218
00:12:19,039 --> 00:12:20,774 line:-1
have been seamlessly extended


219
00:12:20,841 --> 00:12:24,244 line:-2
by adding the Mac to the family
of devices supported by your app.


220
00:12:25,379 --> 00:12:28,615 line:-2
All you really have to do
to make your apps available on the Mac


221
00:12:28,682 --> 00:12:30,484 line:-1
is sign the new Developer Agreement,


222
00:12:30,551 --> 00:12:32,486 line:-2
and your compatible apps
will be made available


223
00:12:32,553 --> 00:12:34,688 line:-1
on the Mac App Store later this year.


224
00:12:35,923 --> 00:12:37,224 line:-1
For new submissions,


225
00:12:37,291 --> 00:12:39,359 line:-2
distribution for the Mac
will fit seamlessly


226
00:12:39,426 --> 00:12:41,395 line:-1
into your existing development workflows.


227
00:12:42,863 --> 00:12:46,633 line:-2
From the Xcode organizer, you can
prepare your app for running on the Mac


228
00:12:46,700 --> 00:12:48,869 line:-1
by exporting through App Store Connect


229
00:12:48,936 --> 00:12:51,271 line:-2
or use any of the local
distribution options,


230
00:12:51,338 --> 00:12:54,474 line:-1
such as ad hoc, enterprise or development


231
00:12:54,541 --> 00:12:56,677 line:-2
to distribute versions
of your iPad or iPhone app


232
00:12:56,743 --> 00:12:58,645 line:-1
directly to members of your team.


233
00:12:59,379 --> 00:13:01,715 line:-2
If your app takes advantage
of App Store features,


234
00:13:01,782 --> 00:13:05,652 line:-2
they will all be supported when running
your iPad or iPhone app on a Mac.


235
00:13:06,253 --> 00:13:10,057 line:-2
Users will have full access to any
in-app purchases and subscriptions


236
00:13:10,123 --> 00:13:13,594 line:-2
associated with your iPad or iPhone app
when running on Mac


237
00:13:13,994 --> 00:13:16,864 line:-2
and can make new purchases
using the StoreKit framework.


238
00:13:17,698 --> 00:13:20,033 line:-1
If your app uses on-demand resources


239
00:13:20,100 --> 00:13:23,437 line:-2
to dynamically manage
the content downloaded for your app,


240
00:13:23,504 --> 00:13:26,173 line:-2
the experience will be identical
when running on a Mac.


241
00:13:27,074 --> 00:13:31,011 line:-2
In fact, all App Store features
work just like they do on iPad and iPhone.


242
00:13:32,246 --> 00:13:34,414 line:-1
App thinning has also been extended


243
00:13:34,481 --> 00:13:36,984 line:-2
to work with deploying
to Apple Silicon Macs.


244
00:13:37,251 --> 00:13:41,588 line:-2
App content is automatically selected
for best fit for running on a Mac,


245
00:13:41,655 --> 00:13:43,156 line:-1
and inapplicable resources


246
00:13:43,223 --> 00:13:46,393 line:-2
best suited for other iPad
or iPhone devices are left out


247
00:13:46,460 --> 00:13:48,495 line:-1
for a streamlined install experience.


248
00:13:49,463 --> 00:13:50,898 line:-1
In fact, for app thinning,


249
00:13:50,964 --> 00:13:54,501 line:-2
a new Mac looks just like
any other very capable iPad.


250
00:13:56,036 --> 00:13:57,504 line:-1
To support this workflow,


251
00:13:57,571 --> 00:14:00,874 line:-2
Xcode has added a new virtual
thinning destination for Mac


252
00:14:00,941 --> 00:14:03,076 line:-1
in the Organizer export workflow.


253
00:14:04,044 --> 00:14:06,680 line:-2
Use the Mac device to produce
an install variant


254
00:14:06,747 --> 00:14:10,017 line:-2
optimized for running or testing
on any Apple Silicon Mac.


255
00:14:11,785 --> 00:14:14,454 line:-2
Note that because Mac users
are accustomed to moving apps


256
00:14:14,521 --> 00:14:17,024 line:-2
seamlessly between machines
and removable storage,


257
00:14:17,090 --> 00:14:19,860 line:-2
only a single app variant
and thinning target is needed.


258
00:14:21,695 --> 00:14:24,765 line:-2
If your app relies on developer
or ad hoc distribution,


259
00:14:24,831 --> 00:14:27,267 line:-2
that will work just like it does
on iPhone and iPad.


260
00:14:28,202 --> 00:14:31,738 line:-2
The good news is that you can get
your iPhone or iPad app onto Macs


261
00:14:31,805 --> 00:14:34,975 line:-2
by exporting just like you would
for other iOS devices.


262
00:14:35,609 --> 00:14:37,744 line:-2
If you take advantage
of Over-the-Air installation,


263
00:14:37,811 --> 00:14:40,180 line:-2
distributing to the Mac
requires no changes.


264
00:14:40,647 --> 00:14:43,083 line:-2
The Mac will automatically select
an appropriate variant


265
00:14:43,150 --> 00:14:45,519 line:-1
from your OTA manifest to download


266
00:14:45,586 --> 00:14:47,988 line:-1
and run on your suitably provisioned Macs.


267
00:14:49,423 --> 00:14:51,692 line:-1
For scenarios involving managed devices,


268
00:14:52,259 --> 00:14:55,462 line:-2
iPad and iPhone apps
can be pushed to enrolled Macs


269
00:14:55,529 --> 00:14:56,964 line:-1
just like any other device.


270
00:14:58,699 --> 00:15:01,835 line:-2
Although distribution to the Mac
is incredibly straightforward,


271
00:15:01,902 --> 00:15:03,971 line:-1
the Mac is a distinct platform,


272
00:15:04,037 --> 00:15:07,407 line:-2
and there are some key points to consider
when deploying to Mac.


273
00:15:08,408 --> 00:15:10,978 line:-1
TestFlight is not available for Mac,


274
00:15:11,044 --> 00:15:14,147 line:-2
so any prerelease distributions
ahead of your final submission


275
00:15:14,214 --> 00:15:16,383 line:-2
will need to use ad hoc
or development distribution


276
00:15:16,450 --> 00:15:18,652 line:-1
as an alternative to test your app.


277
00:15:18,719 --> 00:15:21,121 line:-1
In addition, as Jason noted earlier,


278
00:15:21,188 --> 00:15:25,425 line:-2
there are limits to iPad and iPhone app
run-time compatibility on Mac.


279
00:15:26,827 --> 00:15:29,763 line:-2
Xcode will tell you if your app
has hard dependencies


280
00:15:29,830 --> 00:15:32,766 line:-2
on symbols or frameworks
unavailable on Mac,


281
00:15:32,833 --> 00:15:35,102 line:-2
but it is always a good idea
to test your app


282
00:15:35,169 --> 00:15:37,471 line:-2
on Apple Silicon Mac hardware
when available


283
00:15:37,538 --> 00:15:40,974 line:-2
in order to evaluate the user experience
of your app on a Mac.


284
00:15:43,010 --> 00:15:46,580 line:-2
We have made it incredibly easy
to get your apps onto the Mac App Store.


285
00:15:47,381 --> 00:15:49,883 line:-2
To ensure that your customers
will have the best experience


286
00:15:49,950 --> 00:15:51,718 line:-1
with your iOS apps on the Mac,


287
00:15:51,785 --> 00:15:53,687 line:-1
App Store Connect will be providing tools


288
00:15:53,754 --> 00:15:57,224 line:-2
to help you test and validate
that experience later this summer.


289
00:15:57,958 --> 00:16:00,360 line:-1
Of course, you will still have the choice


290
00:16:00,427 --> 00:16:03,197 line:-2
of whether your apps are available
on the Mac App Store.


291
00:16:04,298 --> 00:16:06,033 line:-1
Let's look at how you'll control that now.


292
00:16:07,267 --> 00:16:09,436 line:-1
After you sign the Developer Agreement,


293
00:16:09,503 --> 00:16:13,040 line:-2
all your compatible apps will
automatically be made available on Mac.


294
00:16:13,674 --> 00:16:17,077 line:-2
Use App Store Connect to review
the status of all of your apps.


295
00:16:18,512 --> 00:16:21,615 line:-2
In App Store Connect,
the Pricing and Availability page


296
00:16:21,682 --> 00:16:23,217 line:-1
is where you make your choice


297
00:16:23,283 --> 00:16:26,119 line:-2
about whether to distribute your app
on the Mac App Store.


298
00:16:26,987 --> 00:16:29,323 line:-2
If you don't want this app
available on the Mac,


299
00:16:29,389 --> 00:16:31,124 line:-1
simply uncheck this box,


300
00:16:31,191 --> 00:16:34,328 line:-2
and it will no longer be offered for sale
on the Mac App Store.


301
00:16:35,495 --> 00:16:38,365 line:-2
Note that once your app
is made unavailable,


302
00:16:38,432 --> 00:16:41,201 line:-2
Mac users will no longer
be able to re-download


303
00:16:41,268 --> 00:16:42,870 line:-1
existing versions of your app


304
00:16:42,936 --> 00:16:45,539 line:-2
until the app is made available
on Mac again.


305
00:16:46,673 --> 00:16:48,075 line:-1
So, now you know.


306
00:16:48,141 --> 00:16:51,879 line:-2
Your apps can now run natively
on Apple Silicon Macs without change.


307
00:16:52,212 --> 00:16:55,616 line:-2
Users will love the ability
to run your apps on their desktops.


308
00:16:56,216 --> 00:16:58,285 line:-1
Most functionality just works,


309
00:16:58,352 --> 00:17:01,388 line:-2
and the apps run adapted
to the familiar Mac user experience.


310
00:17:02,256 --> 00:17:05,959 line:-2
Building and debugging is just the tools
that you already know and use.


311
00:17:06,760 --> 00:17:09,663 line:-2
So all you need to do is test your apps
on Apple Silicon Macs


312
00:17:09,730 --> 00:17:11,932 line:-1
to confirm your apps come across well.


313
00:17:12,699 --> 00:17:15,202 line:-2
Then you'll have a whole new set of users
enjoying your apps


314
00:17:15,269 --> 00:17:17,003 line:-1
from the Mac App Store soon.


315
00:17:18,172 --> 00:17:19,306 line:-1
Thank you for watching.

