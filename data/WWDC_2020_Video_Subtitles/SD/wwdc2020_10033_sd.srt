1
00:00:04,003 --> 00:00:06,440 line:-1
Hello and welcome to WWDC.


2
00:00:08,842 --> 00:00:09,943 line:0
My name is Nils,


3
00:00:10,010 --> 00:00:12,579 line:0
and I'm an engineer
on the iOS System Experience team.


4
00:00:12,980 --> 00:00:17,317 line:-2
Today I'm going to show you
how to build SwiftUI views for widgets.


5
00:00:22,489 --> 00:00:26,226 line:-2
First, we'll talk about
how widgets are enabled by SwiftUI.


6
00:00:27,060 --> 00:00:29,630 line:-1
Then, in the main part of this session,


7
00:00:29,696 --> 00:00:32,432 line:-2
we're going to build
a widgets view together.


8
00:00:32,499 --> 00:00:35,602 line:-2
And we'll finish by going over
some of the new APIs


9
00:00:35,669 --> 00:00:38,972 line:-2
that make building widgets
with SwiftUI awesome.


10
00:00:39,273 --> 00:00:40,440 line:-1
Let's jump right in.


11
00:00:41,942 --> 00:00:45,679 line:-2
With SwiftUI and WidgetKit,
you can provide a timeline of views


12
00:00:45,746 --> 00:00:49,082 line:-2
to be displayed by the Home Screen
at the appropriate time.


13
00:00:49,983 --> 00:00:52,085 line:-1
Thanks to SwiftUI's adaptability,


14
00:00:52,152 --> 00:00:56,590 line:-2
you can write a widget
and deploy it to both iOS and macOS.


15
00:00:57,291 --> 00:00:59,459 line:-2
Because they're
self-contained experiences,


16
00:00:59,526 --> 00:01:02,629 line:-1
new in iOS 14 and macOS Big Sur,


17
00:01:02,696 --> 00:01:07,100 line:-2
widgets are an amazing opportunity
to learn and use SwiftUI,


18
00:01:07,167 --> 00:01:11,138 line:-2
even if you need to deploy your app
to older versions of our OSes


19
00:01:11,205 --> 00:01:13,307 line:-1
where SwiftUI may not be available.


20
00:01:14,074 --> 00:01:17,511 line:-2
I don't know about you, but I've been
drinking a lot of coffee lately.


21
00:01:17,578 --> 00:01:19,613 line:-1
Some days, a bit too much.


22
00:01:20,013 --> 00:01:25,586 line:-2
So I created an app to log and track
the caffeinated beverages I drink


23
00:01:25,652 --> 00:01:28,989 line:-2
and to give me an estimate
of how much caffeine is in my body.


24
00:01:29,356 --> 00:01:31,191 line:-1
I called it Wired.


25
00:01:32,226 --> 00:01:35,095 line:-2
I think a widget would be a great addition
to the app,


26
00:01:35,495 --> 00:01:39,833 line:-2
to be able to know at a glance
at all times how caffeinated I am.


27
00:01:40,501 --> 00:01:42,669 line:-2
This is what
I want my widget to look like.


28
00:01:45,005 --> 00:01:49,610 line:-2
First you can see that it's using
my app's visual identity and color scheme.


29
00:01:50,611 --> 00:01:54,348 line:-2
At the top, we are showing the amount
of caffeine currently in my body,


30
00:01:54,414 --> 00:01:58,252 line:-2
and at the bottom, the last drink I had
and how long ago that was.


31
00:02:00,220 --> 00:02:03,857 line:-2
Note that the shape of the background
for the caffeine amount


32
00:02:03,924 --> 00:02:06,093 line:-1
is concentric with the widget's shape.


33
00:02:07,427 --> 00:02:11,064 line:-2
Also, I want the duration
at the bottom of the widget


34
00:02:11,131 --> 00:02:13,867 line:-1
to be updating live to always be correct.


35
00:02:16,436 --> 00:02:20,374 line:-2
Let's jump to the demo
to see how SwiftUI makes all of this easy.


36
00:02:23,710 --> 00:02:27,314 line:-2
I've already set up the widget
configuration to read on a timeline


37
00:02:27,381 --> 00:02:30,617 line:-2
so that we can focus
on creating the views for our widget here.


38
00:02:31,351 --> 00:02:34,454 line:-2
I'm going to be using SwiftUI
to build this widgets view.


39
00:02:34,521 --> 00:02:38,759 line:-2
And that means everything I write here
can be used in your app too.


40
00:02:40,160 --> 00:02:41,361 line:-1
Here is my view.


41
00:02:41,828 --> 00:02:43,363 line:-1
And here is the preview for it.


42
00:02:44,431 --> 00:02:46,600 line:-1
I'm using a WidgetPreviewContext


43
00:02:46,667 --> 00:02:50,270 line:-2
to specify which widget family
I want my preview to display.


44
00:02:50,671 --> 00:02:52,506 line:-1
In this case, systemSmall.


45
00:02:54,174 --> 00:02:58,312 line:-2
First, let's define a struct for the data
that is going to drive our UI.


46
00:03:00,781 --> 00:03:03,951 line:-2
I called it CaffeineWidgetData,
and it has three properties,


47
00:03:04,017 --> 00:03:08,522 line:-2
for the caffeine amount,
the drink name and the drink date.


48
00:03:09,489 --> 00:03:13,360 line:-2
I also have a steady constant
for some preview values


49
00:03:13,427 --> 00:03:16,530 line:-2
that I'm going to use
to make my previews look real.


50
00:03:17,798 --> 00:03:20,701 line:-2
Let's add the property to our view
to hold this data.


51
00:03:31,411 --> 00:03:34,882 line:-2
Next, let's update our preview
to use the preview data.


52
00:03:41,755 --> 00:03:43,690 line:0
We're ready to start building our view.


53
00:03:43,991 --> 00:03:45,959 line:-1
Let's start by adding some content.


54
00:03:52,266 --> 00:03:55,169 line:-2
I'm using a VStack
to stack views vertically.


55
00:03:55,936 --> 00:04:00,474 line:-2
At the top, I have the word "caffeine"
styled with the body font "bold"


56
00:04:01,041 --> 00:04:05,979 line:-2
and using a custom color that
I've defined here in my asset catalog.


57
00:04:11,685 --> 00:04:13,787 line:-1
Below that, I have the amount.


58
00:04:13,854 --> 00:04:16,390 line:-2
That gets a bigger font
but a similar look.


59
00:04:17,457 --> 00:04:19,159 line:-1
Because this font is pretty big,


60
00:04:19,226 --> 00:04:23,030 line:-2
I want to allow it to shrink a bit
if our layout requires it.


61
00:04:23,096 --> 00:04:26,266 line:-2
That's why I have set
a minimumScaleFactor here.


62
00:04:28,635 --> 00:04:31,205 line:-2
Next, let's give our widget
some personality


63
00:04:31,638 --> 00:04:34,908 line:-2
by putting a background color behind it
using a ZStack.


64
00:04:34,975 --> 00:04:39,279 line:-2
A ZStack allows you to overlay views
on top of each other.


65
00:04:59,933 --> 00:05:03,437 line:-2
You'll notice that our widget
automatically gets its shape,


66
00:05:03,504 --> 00:05:06,039 line:-1
size and corner radius from the system.


67
00:05:07,241 --> 00:05:11,812 line:-2
Now, let's continue building our widget
by adding the name of the last drink I had


68
00:05:11,879 --> 00:05:13,514 line:-1
and how long ago that was.


69
00:05:16,984 --> 00:05:19,152 line:-1
For the time elapsed since my last drink,


70
00:05:19,219 --> 00:05:22,089 line:-2
you can see that I'm using
a new initializer on text


71
00:05:22,155 --> 00:05:25,392 line:-2
that takes a date and a style
to format it for you.


72
00:05:26,159 --> 00:05:30,063 line:-2
When using this initializer,
the content will count up or down


73
00:05:30,130 --> 00:05:33,934 line:-2
from the specified date automatically
as time passes.


74
00:05:34,601 --> 00:05:39,106 line:-2
This is a great way to make your widgets
feel alive on the Home Screen.


75
00:05:39,640 --> 00:05:44,845 line:-2
Let's see what it looks like by clicking
the "live preview" button in the canvas.


76
00:05:45,445 --> 00:05:48,148 line:-2
You can see
that the duration is counting up.


77
00:05:56,857 --> 00:06:00,894 line:-2
I can even use string interpolation
to add more content to the string.


78
00:06:00,961 --> 00:06:04,565 line:-2
So I can add the word "ago"
just like this.


79
00:06:15,809 --> 00:06:18,378 line:-2
And because this is using
string interpolation,


80
00:06:18,445 --> 00:06:21,248 line:-2
the framework will generate
a localized key for you


81
00:06:21,315 --> 00:06:25,752 line:-2
so that the format can be adapted
for other locales and languages.


82
00:06:29,323 --> 00:06:33,560 line:-2
We really have two groups of content here,
as shown by the text color:


83
00:06:33,627 --> 00:06:37,464 line:-2
this brown text at the top
and this white text below it.


84
00:06:38,131 --> 00:06:42,736 line:-2
So let's split them into two VStacks
and add a spacer between them.


85
00:06:43,470 --> 00:06:46,139 line:-2
I'm going to come and click
on this text here


86
00:06:46,707 --> 00:06:48,675 line:-1
and select "Embed in VStack."


87
00:06:51,144 --> 00:06:53,814 line:-1
Gonna move this text inside the VStack.


88
00:06:57,284 --> 00:07:00,153 line:-2
Next, I'm gonna do the same thing
with this text here.


89
00:07:00,220 --> 00:07:03,190 line:-1
Come and click "Embed in VStack."


90
00:07:05,526 --> 00:07:08,228 line:-1
And move the second text inside.


91
00:07:18,705 --> 00:07:20,240 line:-1
And add a spacer between them.


92
00:07:22,943 --> 00:07:25,946 line:-2
I'm going to make both of my VStacks
leading-aligned.


93
00:07:26,013 --> 00:07:27,748 line:-1
To do that using the canvas,


94
00:07:27,814 --> 00:07:30,984 line:-2
I can click the leading button
in the vertical stack section


95
00:07:31,051 --> 00:07:32,519 line:-1
of the Attributes Inspector.


96
00:07:35,088 --> 00:07:36,089 line:-1
Here...


97
00:07:40,694 --> 00:07:41,695 line:-1
and here.


98
00:07:43,564 --> 00:07:45,933 line:-1
This is starting to get a bit complicated,


99
00:07:45,999 --> 00:07:48,435 line:-2
so I'm going to extract
the top and bottom parts


100
00:07:48,502 --> 00:07:50,204 line:-1
into their own subviews.


101
00:07:50,270 --> 00:07:55,375 line:-2
Because this is SwiftUI, views are cheap,
and I can do this with almost no cost.


102
00:07:56,577 --> 00:08:00,614 line:-2
I come and click on the VStack here
and select "Extract Subview."


103
00:08:01,148 --> 00:08:06,286 line:-1
Let's call it "CaffeineAmountView."


104
00:08:10,190 --> 00:08:13,393 line:-2
Let's add a property to it
to hold some data.


105
00:08:19,366 --> 00:08:22,870 line:-2
Then I'm gonna do the same thing
to the bottom VStack.


106
00:08:22,936 --> 00:08:25,606 line:-1
Come and click "Extract Subview."


107
00:08:25,672 --> 00:08:27,474 line:-1
Let's call it "DrinkView."


108
00:08:30,043 --> 00:08:33,246 line:-2
And let's also add
the same property to it.


109
00:08:35,582 --> 00:08:38,552 line:-1
Finally, let's pass in some data.


110
00:08:45,792 --> 00:08:49,930 line:-2
Things look the same, but we have
better code structure to build upon.


111
00:08:51,231 --> 00:08:54,334 line:-2
I want my content to be leading-aligned
instead of centered.


112
00:08:54,768 --> 00:08:58,839 line:-2
I'm going to wrap the content
of the CaffeineAmountView in an HStack


113
00:08:58,906 --> 00:09:00,474 line:-1
and add a spacer at the end.


114
00:09:01,441 --> 00:09:03,944 line:-1
Come and click "Embed in HStack."


115
00:09:10,083 --> 00:09:15,289 line:-2
An HStack, or horizontal stack, allows you
to place views next to each other.


116
00:09:15,856 --> 00:09:17,691 line:-1
By putting a spacer at the end,


117
00:09:17,758 --> 00:09:21,862 line:-2
I'm telling the layout system
to push my content to the opposite edge,


118
00:09:21,929 --> 00:09:23,230 line:-1
the leading edge.


119
00:09:24,097 --> 00:09:29,169 line:-2
Because I don't need any minimum spacing,
I'm going to specify a min length of zero


120
00:09:29,236 --> 00:09:32,105 line:-2
so that my content can take as much space
as is available.


121
00:09:41,682 --> 00:09:44,384 line:-2
Let's add some padding to our content
to make it look better.


122
00:09:45,052 --> 00:09:48,822 line:-2
Because this is SwiftUI,
I can do this using the canvas


123
00:09:48,889 --> 00:09:51,692 line:-1
by placing my cursor on the main VStack...


124
00:09:54,795 --> 00:09:57,264 line:-2
and then clicking
the four checkboxes here


125
00:09:57,331 --> 00:10:00,267 line:-2
in the padding section
of the Attributes Inspector.


126
00:10:07,708 --> 00:10:08,709 line:-1
Easy.


127
00:10:09,343 --> 00:10:12,479 line:-2
You can see that I'm not specifying
a value for that padding.


128
00:10:12,546 --> 00:10:15,549 line:-2
SwiftUI will use
an appropriate default value


129
00:10:15,616 --> 00:10:18,051 line:-2
for the device and configuration
it's running on.


130
00:10:20,153 --> 00:10:22,389 line:-2
I want to emphasize
the CaffeineAmountView,


131
00:10:22,456 --> 00:10:24,525 line:-1
so I'm going to give it a background.


132
00:10:37,237 --> 00:10:40,574 line:-2
I'm using the color named "latte"
from my asset catalog.


133
00:10:41,575 --> 00:10:43,477 line:-1
Let's add some padding again


134
00:10:43,544 --> 00:10:46,480 line:-2
by clicking the four checkboxes
in the Attributes Inspector.


135
00:10:52,619 --> 00:10:55,055 line:-2
That's a bit too much.
Let's make it eight.


136
00:10:57,224 --> 00:10:58,358 line:-1
Okay.


137
00:10:59,226 --> 00:11:02,496 line:-2
You can see that the corners
of this shape are not rounded.


138
00:11:02,563 --> 00:11:05,465 line:-2
As described in the
Human Interface Guidelines for widgets,


139
00:11:05,532 --> 00:11:09,536 line:-2
rounded rectangles are an important part
of widgets' visual design language.


140
00:11:09,603 --> 00:11:12,005 line:-2
So I'm going to round the corners
of this shape.


141
00:11:13,240 --> 00:11:16,210 line:-2
I could use a cornerRadius modifier,
like this...


142
00:11:19,947 --> 00:11:22,416 line:-2
and then try to find a value
that looks good.


143
00:11:23,150 --> 00:11:27,554 line:-2
But then different devices may use
a different radius for their widgets,


144
00:11:27,621 --> 00:11:29,456 line:-1
so it can become a bit cumbersome.


145
00:11:30,457 --> 00:11:33,093 line:-2
We have a much better way to do this
in iOS 14


146
00:11:33,527 --> 00:11:35,896 line:-1
using the new ContainerRelativeShape.


147
00:11:54,381 --> 00:11:57,317 line:-2
ContainerRelativeShape
is a new shape type


148
00:11:57,384 --> 00:12:00,220 line:-2
that will take on the path
of the nearest container shape


149
00:12:00,287 --> 00:12:01,855 line:-1
specified by a parent


150
00:12:01,922 --> 00:12:05,559 line:-2
with an appropriate corner radius
based on the position of the shape.


151
00:12:05,626 --> 00:12:09,963 line:-2
In this instance, the system is defining
the container shape for our widget,


152
00:12:10,030 --> 00:12:13,567 line:-2
and we get the corner radius
concentric with it super easy.


153
00:12:16,470 --> 00:12:19,673 line:-2
If I change the value for the padding
of our main VStack,


154
00:12:19,740 --> 00:12:23,143 line:-2
the corner radius
of the CaffeineAmountView changes


155
00:12:23,210 --> 00:12:26,847 line:-2
so that the border around it
keeps a constant thickness


156
00:12:26,914 --> 00:12:28,482 line:-1
around the corner's curve.


157
00:12:39,660 --> 00:12:42,896 line:-2
Finally,
let's give our most important content


158
00:12:42,963 --> 00:12:45,065 line:-1
some room to breathe using a spacer.


159
00:12:52,539 --> 00:12:55,809 line:-2
There. We've implemented the design
that we were going for.


160
00:12:55,876 --> 00:12:58,111 line:-1
I personally think it looks gorgeous,


161
00:12:58,178 --> 00:13:00,781 line:-2
and I can't wait to add it
to my Home Screen.


162
00:13:00,848 --> 00:13:04,251 line:-2
Let's see what my widget looks like
in Dark Mode.


163
00:13:04,318 --> 00:13:09,523 line:-2
To do this, let me duplicate my preview
and add a modifier to set it to Dark Mode.


164
00:13:20,067 --> 00:13:23,203 line:-2
Because all of my colors
come from an asset catalog


165
00:13:23,270 --> 00:13:26,273 line:-2
where I've already defined
dark appearance variants for them,


166
00:13:26,340 --> 00:13:28,909 line:-2
my widget automatically adapts
for Dark Mode.


167
00:13:31,144 --> 00:13:32,913 line:-1
My mom drinks a lot of coffee too,


168
00:13:32,980 --> 00:13:35,415 line:-2
so I'm sure she will be super excited
about Wired.


169
00:13:35,916 --> 00:13:40,621 line:-2
But this small text at the bottom
may be difficult for her to read.


170
00:13:41,021 --> 00:13:44,124 line:-2
So let's update our widget
to support dynamic type


171
00:13:44,191 --> 00:13:48,495 line:-2
so that she and all our users
who prefer larger text can use it too.


172
00:13:49,730 --> 00:13:53,534 line:-2
First, let's add a new preview
to check what my widget looks like


173
00:13:53,600 --> 00:13:55,202 line:-1
at a larger size category.


174
00:14:03,877 --> 00:14:08,048 line:-2
Here, I set the size category
to extraExtraExtraLarge.


175
00:14:11,151 --> 00:14:12,486 line:-1
It looks great.


176
00:14:12,553 --> 00:14:14,621 line:-1
Thanks to SwiftUI's adaptive nature,


177
00:14:14,688 --> 00:14:17,424 line:-2
I didn't have to change anything
to support dynamic type.


178
00:14:17,491 --> 00:14:21,828 line:-2
And I built a widget that's more inclusive
with no additional work.


179
00:14:21,895 --> 00:14:23,330 line:-1
Isn't that amazing?


180
00:14:24,264 --> 00:14:26,867 line:-1
Next, I want to talk about placeholders.


181
00:14:27,467 --> 00:14:30,704 line:-2
For a great widget experience,
you should provide a placeholder


182
00:14:30,771 --> 00:14:34,474 line:-2
that the system can use while it's
requesting a view from your extension


183
00:14:34,541 --> 00:14:36,610 line:-1
or when the device is locked.


184
00:14:37,311 --> 00:14:39,913 line:-2
Your placeholder should look
just like your widget


185
00:14:39,980 --> 00:14:41,682 line:-1
but without any specific content.


186
00:14:42,015 --> 00:14:46,053 line:-2
Let's see how we can modify our view
to also use it as a placeholder.


187
00:14:46,620 --> 00:14:51,425 line:-2
First, I'm going to create another preview
by copying an existing one.


188
00:14:56,196 --> 00:14:59,666 line:0
And I'm going to add
the isPlaceholder(true) modifier to it


189
00:14:59,733 --> 00:15:01,134 line:0
to make it a placeholder.


190
00:15:05,072 --> 00:15:08,542 line:-2
You can see that SwiftUI knows
to automatically replace the content


191
00:15:08,609 --> 00:15:11,578 line:-1
of all my text with rounded rectangles


192
00:15:11,645 --> 00:15:15,482 line:-2
and to style them in a way that
matches the content they're replacing.


193
00:15:16,783 --> 00:15:19,386 line:-2
And if I want to preserve some text
in my placeholder,


194
00:15:19,453 --> 00:15:22,456 line:-2
I can add
the isPlaceholder(false) modifier to it.


195
00:15:22,523 --> 00:15:24,458 line:-1
Let's add it to the word "caffeine."


196
00:15:33,534 --> 00:15:38,105 line:-2
Just like that, I updated my view to
use it as the placeholder for my widget.


197
00:15:38,172 --> 00:15:39,306 line:-1
Simple, right?


198
00:15:40,174 --> 00:15:43,310 line:-2
The isPlaceholder modifier
that I just showed you


199
00:15:43,377 --> 00:15:45,379 line:-1
will be available in a later seed.


200
00:15:45,445 --> 00:15:49,016 line:-2
You probably know that widgets
come in three different families:


201
00:15:49,082 --> 00:15:51,552 line:-1
system small, medium and large.


202
00:15:52,019 --> 00:15:54,888 line:-2
Let's look at how easy it is
to update my widget


203
00:15:54,955 --> 00:15:56,356 line:-1
for another widget family.


204
00:15:56,823 --> 00:16:00,294 line:-2
Let's start by adding another preview
for systemMedium.


205
00:16:12,172 --> 00:16:15,175 line:-2
This looks okay,
but it's a bit of a waste of space.


206
00:16:16,443 --> 00:16:21,048 line:-2
In my app, I let the user take a photo
of their drink when they log it.


207
00:16:21,114 --> 00:16:23,584 line:-2
So let's make better use
of screen real estate


208
00:16:23,650 --> 00:16:25,686 line:-1
by including these photos in our widget.


209
00:16:26,253 --> 00:16:29,456 line:-2
First, I'm going to add the property
to my data struct


210
00:16:29,523 --> 00:16:31,558 line:-1
to hold the name of that photo.


211
00:16:38,765 --> 00:16:42,903 line:-2
And then add a sample photo
from my preview asset catalog.


212
00:16:51,445 --> 00:16:53,447 line:-1
Let's add the photo to our view.


213
00:16:54,014 --> 00:16:57,551 line:-2
We only want the drinks photo to appear
on systemMedium.


214
00:16:57,618 --> 00:17:00,153 line:-2
To be able to create
this conditional layout,


215
00:17:00,220 --> 00:17:03,023 line:-2
let's add an Environment variable
for the widget family.


216
00:17:12,766 --> 00:17:16,403 line:0
I want my photo to appear
next to the existing content,


217
00:17:16,470 --> 00:17:19,705 line:0
so I'm going to wrap all our content
in an HStack.


218
00:17:35,289 --> 00:17:40,494 line:-2
Then, if we are in a systemMedium widget,
and if we have a photo to display,


219
00:17:40,561 --> 00:17:41,862 line:-1
let's add our image.


220
00:17:46,900 --> 00:17:48,435 line:-1
And make it resizable.


221
00:17:52,606 --> 00:17:53,607 line:-1
Awesome.


222
00:17:54,641 --> 00:17:57,744 line:-2
Finally, let's look at our placeholder
for this size


223
00:17:57,811 --> 00:17:59,513 line:-1
by adding another preview.


224
00:17:59,580 --> 00:18:01,949 line:-2
I'm pretty sure
you're starting to get the hang of this.


225
00:18:02,015 --> 00:18:04,985 line:-2
I'm copying the existing one
and adding a modifier to it


226
00:18:05,052 --> 00:18:06,453 line:-1
to make it a placeholder.


227
00:18:18,532 --> 00:18:20,234 line:-1
You can see that SwiftUI knows


228
00:18:20,300 --> 00:18:24,438 line:-2
to automatically replace the content
of my image with a fill color,


229
00:18:24,505 --> 00:18:28,809 line:-2
so I didn't have to do any additional work
to create my systemMedium placeholder.


230
00:18:28,876 --> 00:18:29,943 line:-1
Awesome, right?


231
00:18:30,344 --> 00:18:34,314 line:-2
And that's how easy it is
to build your widgets views with SwiftUI.


232
00:18:35,048 --> 00:18:38,418 line:-2
Let me go over two new APIs
that I just showed you in the demo.


233
00:18:40,120 --> 00:18:44,825 line:-2
First, let's look at how to make corner
radii look beautiful in your widget.


234
00:18:44,892 --> 00:18:46,693 line:-1
When nesting rounded rects,


235
00:18:46,760 --> 00:18:50,597 line:-2
most of the time you don't want them
to use the same corner radius.


236
00:18:51,398 --> 00:18:53,567 line:-1
Instead, you want them to be concentric.


237
00:18:55,135 --> 00:18:57,938 line:-1
In iOS 14, this is effortless.


238
00:18:58,005 --> 00:19:02,142 line:-2
Set the new ContainerRelativeShape
as the background for your view,


239
00:19:02,209 --> 00:19:04,278 line:-1
and SwiftUI will take it from there.


240
00:19:04,344 --> 00:19:06,113 line:-1
That's almost too easy.


241
00:19:07,147 --> 00:19:10,551 line:-2
In iOS 14,
we added a new initializer on text


242
00:19:10,617 --> 00:19:13,320 line:-1
to format a date according to a style.


243
00:19:13,387 --> 00:19:16,957 line:-2
This allows you to create countdowns,
timers,


244
00:19:17,024 --> 00:19:20,260 line:-2
and other styles
of absolute and relative dates.


245
00:19:20,794 --> 00:19:24,031 line:0
Because this will automatically update
as time passes,


246
00:19:24,097 --> 00:19:27,701 line:0
it's a great way to make your widgets
feel alive on the Home Screen.


247
00:19:29,770 --> 00:19:31,305 line:-1
Let's wrap it up.


248
00:19:31,371 --> 00:19:36,009 line:-2
SwiftUI enables you to build compelling
widget experiences for your users.


249
00:19:36,977 --> 00:19:41,615 line:-2
Widgets leverage SwiftUI's
existing support for adaptive layouts.


250
00:19:42,749 --> 00:19:44,418 line:-1
We've added new APIs


251
00:19:44,484 --> 00:19:48,522 line:-2
to make it easier to do some things
that we found common in widgets.


252
00:19:48,922 --> 00:19:53,393 line:-2
Note that these APIs work everywhere,
not just in widgets,


253
00:19:53,460 --> 00:19:55,229 line:-1
so use them in your apps too.


254
00:19:56,496 --> 00:19:59,199 line:0
Be sure to check out
the "Meet WidgetKit" session


255
00:19:59,266 --> 00:20:01,368 line:0
to learn more about widget timelines


256
00:20:01,435 --> 00:20:05,038 line:0
and also the "Widgets Code-along"
by my colleague Izzy,


257
00:20:05,472 --> 00:20:08,775 line:0
to watch him use WidgetKit
to build a widget from scratch.


258
00:20:09,309 --> 00:20:11,078 line:-1
I hope you had a great WWDC.


259
00:20:11,478 --> 00:20:13,514 line:-1
Thank you, and see you next year.

