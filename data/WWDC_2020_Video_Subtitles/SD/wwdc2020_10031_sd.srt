1
00:00:00,167 --> 00:00:02,102 line:-1
[chimes]


2
00:00:03,804 --> 00:00:06,573 line:-1
Hello and welcome to WWDC.


3
00:00:07,975 --> 00:00:11,945 line:0
Hello and welcome to
"Stacks, Grids and Outlines in SwiftUI."


4
00:00:12,479 --> 00:00:15,282 line:0
I'm Cody, an engineer working on SwiftUI.


5
00:00:15,716 --> 00:00:18,185 line:-2
And later in this talk,
I'll be joined by my colleague Curt.


6
00:00:18,719 --> 00:00:21,455 line:-2
SwiftUI has a variety
of built-in layout primitives


7
00:00:21,522 --> 00:00:25,526 line:-2
for arranging collections of views
in horizontal and vertical sequences.


8
00:00:26,126 --> 00:00:29,429 line:-2
These primitives can be used on their own
to address basic layout needs,


9
00:00:29,496 --> 00:00:30,764 line:-1
or they can be combined together


10
00:00:30,831 --> 00:00:33,166 line:-2
to build out complex views
with custom behavior.


11
00:00:33,700 --> 00:00:37,304 line:-2
The new Notification Center in macOS
was implemented with SwiftUI,


12
00:00:37,371 --> 00:00:41,041 line:-2
and it serves as a great example
of this compositional process at work.


13
00:00:41,542 --> 00:00:43,744 line:0
Simple Stacks and Grids work together


14
00:00:43,810 --> 00:00:48,916 line:0
using hierarchy, alignment and spacing
to organize a lot of information,


15
00:00:48,982 --> 00:00:51,385 line:0
and the result is both
beautiful and usable.


16
00:00:52,119 --> 00:00:55,756 line:0
When developing your own apps,
I encourage you to think in similar terms.


17
00:00:55,822 --> 00:00:59,359 line:-2
SwiftUI's layout primitives
were designed with composition in mind.


18
00:00:59,893 --> 00:01:03,730 line:-2
Generally, when a simple type doesn't do
everything you need it to do,


19
00:01:03,797 --> 00:01:05,632 line:-1
the path forward involves combining it


20
00:01:05,699 --> 00:01:08,435 line:-2
with another simple type
that has complementary behavior.


21
00:01:09,269 --> 00:01:11,071 line:-1
In this talk, I'm going to cover


22
00:01:11,138 --> 00:01:13,941 line:-2
some new additions to SwiftUI's
family of layout primitives.


23
00:01:14,775 --> 00:01:17,344 line:-2
I'll start with a review
of the most basic types,


24
00:01:17,411 --> 00:01:19,213 line:-1
horizontal and vertical Stacks,


25
00:01:19,713 --> 00:01:21,215 line:-1
and introduce a new pair of types


26
00:01:21,281 --> 00:01:23,450 line:-2
for creating grid layouts
that grow lazily.


27
00:01:24,685 --> 00:01:28,121 line:-2
Then I'll look at a new feature
of the existing Lists type


28
00:01:28,188 --> 00:01:30,824 line:-2
that allows for the presentation
of hierarchical data.


29
00:01:31,892 --> 00:01:35,062 line:-2
And finally, Curt will do a deep dive
into Outlines and Forms


30
00:01:35,128 --> 00:01:37,364 line:-2
and show some techniques
for the progressive display


31
00:01:37,431 --> 00:01:38,966 line:-1
of user interface controls.


32
00:01:39,032 --> 00:01:40,434 line:-1
I'll begin with Stacks,


33
00:01:40,501 --> 00:01:42,903 line:-2
which are the simplest
layout primitives in SwiftUI.


34
00:01:43,570 --> 00:01:48,008 line:-2
But first, in order to talk about Stacks,
I need to talk about sandwiches.


35
00:01:48,075 --> 00:01:50,477 line:-2
If you caught
the "Introduction to SwiftUI" talk,


36
00:01:50,544 --> 00:01:52,880 line:-2
you'll know that my friend Jacob
has been hard at work


37
00:01:52,946 --> 00:01:55,048 line:-1
on an app for making sandwiches.


38
00:01:55,115 --> 00:01:58,018 line:-2
I fancy myself something
of a sandwich connoisseur,


39
00:01:58,085 --> 00:01:59,620 line:-2
and I thought it would be fun
to put together


40
00:01:59,686 --> 00:02:01,622 line:-1
a gallery view for Jacob's app


41
00:02:01,688 --> 00:02:04,658 line:-2
to showcase photos
of especially memorable lunches.


42
00:02:05,192 --> 00:02:07,794 line:-2
The data model I'm going to use
is pretty simple,


43
00:02:07,861 --> 00:02:12,699 line:-2
just an ID, a name, a star rating
and a heroImage for the gallery.


44
00:02:13,734 --> 00:02:17,371 line:-2
The view for displaying an individual
sandwich in the gallery is equally simple.


45
00:02:18,071 --> 00:02:20,274 line:-1
It displays a resizable heroImage.


46
00:02:21,542 --> 00:02:24,711 line:-2
And it adds an overlay
containing information about the sandwich.


47
00:02:27,047 --> 00:02:30,350 line:-2
The BannerView that overlays
each heroImage uses a VStack


48
00:02:30,417 --> 00:02:33,287 line:-2
to arrange the sandwich's title
and star rating indicator.


49
00:02:34,688 --> 00:02:37,558 line:-2
And the star rating is just
a horizontal stack of images.


50
00:02:39,326 --> 00:02:41,995 line:-2
My initial implementation
is pretty straightforward.


51
00:02:42,062 --> 00:02:45,332 line:-2
I'm presenting my gallery
using a vertical stack of sandwich views.


52
00:02:46,066 --> 00:02:49,536 line:-2
My sandwich list is going to grow
dynamically as I take more pictures,


53
00:02:49,603 --> 00:02:51,705 line:-1
so I need to include a ForEach view


54
00:02:51,772 --> 00:02:54,708 line:-2
that will enumerate every sandwich
and make a view for each one.


55
00:02:55,742 --> 00:02:58,545 line:-1
Also, Stacks don't scroll on their own,


56
00:02:58,612 --> 00:03:00,914 line:-2
so I need to wrap everything
in a ScrollView.


57
00:03:01,815 --> 00:03:03,617 line:-1
I'm pretty happy with this so far,


58
00:03:03,684 --> 00:03:07,054 line:-2
but as I go about loading
in my back catalog of sandwich photos,


59
00:03:07,120 --> 00:03:08,522 line:-1
I start to notice a problem.


60
00:03:09,089 --> 00:03:11,391 line:-2
The more photos my gallery
needs to display,


61
00:03:11,458 --> 00:03:14,661 line:-2
the longer it takes for the screen
to become responsive when presented.


62
00:03:15,095 --> 00:03:18,899 line:-2
What I want is a Lazy Stack
that builds itself out incrementally,


63
00:03:18,966 --> 00:03:22,703 line:-2
so that initially only the first
screenful of images need to be rendered.


64
00:03:23,237 --> 00:03:27,274 line:-2
The rest can be loaded on demand
as the user scrolls through the gallery.


65
00:03:27,341 --> 00:03:30,077 line:-2
We are introducing
two new SwiftUI stack types


66
00:03:30,143 --> 00:03:32,112 line:-1
that address this problem directly:


67
00:03:32,179 --> 00:03:35,249 line:-1
LazyVStack and LazyHStack.


68
00:03:35,315 --> 00:03:38,919 line:-2
Lazy Stacks are just like
their VStack and HStack counterparts,


69
00:03:38,986 --> 00:03:42,689 line:-2
except that they render their content
incrementally as it becomes visible.


70
00:03:43,390 --> 00:03:45,192 line:-1
This is perfect for my needs.


71
00:03:45,259 --> 00:03:49,029 line:-2
The view won't block the main thread
loading and measuring every single image


72
00:03:49,096 --> 00:03:52,733 line:-2
and the app's memory footprint
won't grow unnecessarily large.


73
00:03:53,433 --> 00:03:57,137 line:-2
All I need to do is replace
my VStack with a LazyVStack...


74
00:03:58,238 --> 00:04:00,374 line:-1
and now my gallery loads incrementally.


75
00:04:02,843 --> 00:04:04,945 line:-2
There's one other point
I want to make here.


76
00:04:05,012 --> 00:04:07,748 line:-2
If you recall from the definition
of "rating view,"


77
00:04:07,814 --> 00:04:10,684 line:-2
the vertical stack that defines
the gallery of HeroViews


78
00:04:10,751 --> 00:04:12,619 line:-1
isn't the only stack on screen here.


79
00:04:13,921 --> 00:04:16,557 line:-1
Each HeroView has its own horizontal stack


80
00:04:16,623 --> 00:04:18,591 line:-1
to lay out the star rating indicator


81
00:04:18,659 --> 00:04:22,863 line:-2
as well as a ZStack to overlay
the rating on top of the heroImage.


82
00:04:23,830 --> 00:04:27,201 line:-2
So, it's worth asking,
since I made my outer stack lazy,


83
00:04:27,267 --> 00:04:28,969 line:-1
should these stacks be lazy too?


84
00:04:30,370 --> 00:04:32,005 line:-1
In this case, the answer is no.


85
00:04:32,606 --> 00:04:34,408 line:-2
While I want the vertical stack
to be lazy,


86
00:04:34,474 --> 00:04:36,476 line:-1
specifically because it scrolls,


87
00:04:36,543 --> 00:04:39,780 line:-2
I don't want to spend the time
it takes to render everything up front


88
00:04:39,847 --> 00:04:42,449 line:-2
when most of the content
can't be seen without scrolling.


89
00:04:43,784 --> 00:04:47,688 line:-2
On the other hand, making the stacks
within a given HeroView lazy


90
00:04:47,754 --> 00:04:49,656 line:-1
doesn't actually confer any benefits.


91
00:04:50,324 --> 00:04:54,394 line:-2
The content is all visible at once
as soon as the view lands on screen.


92
00:04:54,461 --> 00:04:56,330 line:-1
So, everything has to be loaded at once,


93
00:04:56,396 --> 00:04:58,866 line:-2
regardless of the container's
default behavior.


94
00:04:59,233 --> 00:05:02,436 line:-2
As a rule, if you aren't sure
which type of stack to use,


95
00:05:02,503 --> 00:05:04,404 line:-1
use VStack or HStack.


96
00:05:05,172 --> 00:05:08,408 line:-2
Adopt Lazy Stacks as a way
to resolve performance bottlenecks


97
00:05:08,475 --> 00:05:11,044 line:-2
that you find after profiling
with Instruments.


98
00:05:11,111 --> 00:05:14,715 line:-2
Now I'd like to talk about
a new set of types, Lazy Grids.


99
00:05:15,482 --> 00:05:17,150 line:-1
Let's return to my sandwich gallery.


100
00:05:18,685 --> 00:05:22,723 line:-2
I'm liking how this looks on iPhone,
but how does it fare on a bigger screen?


101
00:05:23,390 --> 00:05:25,192 line:-1
Let's move it to an iPad and find out.


102
00:05:26,326 --> 00:05:28,629 line:-1
It's the same thing, just bigger.


103
00:05:29,196 --> 00:05:30,931 line:-1
Not exactly the look I'm going for.


104
00:05:31,498 --> 00:05:33,333 line:-1
With all this extra screen real estate,


105
00:05:33,400 --> 00:05:36,236 line:-2
what I really want is to get
more sandwiches on the screen.


106
00:05:37,437 --> 00:05:39,940 line:-2
If I could change this
from a single column of images


107
00:05:40,007 --> 00:05:41,942 line:-1
to a grid with multiple columns,


108
00:05:42,009 --> 00:05:45,312 line:-2
I'd be able to increase my overall
sandwich density quite a bit.


109
00:05:45,913 --> 00:05:48,081 line:-1
Sounds like a job for two new types


110
00:05:48,148 --> 00:05:50,384 line:-2
we're adding to SwiftUI's
family of layout primitives,


111
00:05:51,185 --> 00:05:53,453 line:-1
named LazyVGrid and LazyHGrid.


112
00:05:53,520 --> 00:05:57,224 line:-2
As the names imply,
these types build out grids of content


113
00:05:57,291 --> 00:05:59,293 line:-1
and are similar in use to Stacks.


114
00:06:00,460 --> 00:06:04,164 line:-2
Using a LazyVGrid, I can easily
implement a multi-column layout


115
00:06:04,231 --> 00:06:06,733 line:-2
to increase the sandwich density
of my view.


116
00:06:06,800 --> 00:06:08,468 line:-1
Let's take a look at how this works.


117
00:06:10,337 --> 00:06:13,941 line:-2
Here's the same Lazy Stack we saw earlier,
scaled up for iPad.


118
00:06:14,575 --> 00:06:17,945 line:-2
I'll update it to make it three columns
of sandwiches instead of one.


119
00:06:18,979 --> 00:06:20,681 line:-2
The main difference
from the earlier example


120
00:06:20,747 --> 00:06:22,015 line:-1
is my layout container.


121
00:06:22,716 --> 00:06:25,886 line:-2
I'm using a LazyVGrid
instead of a LazyVStack


122
00:06:25,953 --> 00:06:28,889 line:-2
and I'm passing in a collection
of values that tells SwiftUI


123
00:06:28,956 --> 00:06:31,792 line:-2
how to compute the width
of the columns in my grid.


124
00:06:31,859 --> 00:06:33,093 line:-1
More on that in a second.


125
00:06:33,627 --> 00:06:35,362 line:-1
Apart from the column descriptions,


126
00:06:35,429 --> 00:06:37,731 line:-2
I define my grid
just like I would define a stack,


127
00:06:38,265 --> 00:06:39,700 line:-1
by passing in a view builder


128
00:06:39,766 --> 00:06:42,503 line:-2
to generate the individual views
that comprise the grid.


129
00:06:43,570 --> 00:06:47,474 line:-2
To describe my grid's columns,
I create an array of GridItem values.


130
00:06:48,108 --> 00:06:51,778 line:-2
Each item specifies how
an individual column's width is computed.


131
00:06:52,446 --> 00:06:54,548 line:-1
Here, I'm defining three columns.


132
00:06:55,282 --> 00:06:57,251 line:-1
Grid items are flexible by default,


133
00:06:57,317 --> 00:07:00,554 line:-2
so this arrangement will fill the grid
with columns of equal width.


134
00:07:01,755 --> 00:07:04,191 line:-2
And here's the same thing
in landscape orientation.


135
00:07:04,758 --> 00:07:07,394 line:-2
The number of columns is the same,
they're just wider.


136
00:07:07,928 --> 00:07:10,364 line:-2
Grid layouts can also adapt
to the space available


137
00:07:10,430 --> 00:07:12,533 line:-1
to create a variable number of columns.


138
00:07:13,333 --> 00:07:16,703 line:-2
Here, for example,
I've declared an adaptive GridItem


139
00:07:16,770 --> 00:07:20,107 line:-2
which produces as many
equally wide columns as it can


140
00:07:20,174 --> 00:07:22,843 line:-2
while maintaining
a specified minimum column width.


141
00:07:23,343 --> 00:07:26,613 line:-2
It's great for landscape mode
where there's room for additional columns.


142
00:07:27,781 --> 00:07:30,617 line:-2
Adaptive grid items
are also great on macOS


143
00:07:30,684 --> 00:07:32,819 line:-1
where windows can be resized arbitrarily.


144
00:07:33,287 --> 00:07:36,557 line:-2
I'm really excited about the expressive
power of these new primitives.


145
00:07:36,957 --> 00:07:40,260 line:-2
The last topic I wanna cover
before handing off to Curt is Lists.


146
00:07:40,928 --> 00:07:43,497 line:-2
Lists are more than just
basic layout primitives.


147
00:07:43,564 --> 00:07:47,601 line:-2
They are interactive, with support
for selection management and scrolling.


148
00:07:48,402 --> 00:07:50,637 line:-1
List contents are always loaded lazily.


149
00:07:51,104 --> 00:07:52,573 line:-1
Now, I don't know about you,


150
00:07:52,639 --> 00:07:55,542 line:-2
but at this point, I've pretty much
had my fill of sandwiches.


151
00:07:55,976 --> 00:07:59,813 line:-2
Let's take a look at a cool new app that
Curt's been working on called "ShapeEdit."


152
00:08:00,581 --> 00:08:05,819 line:-2
ShapeEdit is a document-based app
that runs on macOS, iPadOS and iOS.


153
00:08:06,553 --> 00:08:10,090 line:-2
If we zoom in, we can see
the window sidebar view in ShapeEdit,


154
00:08:10,157 --> 00:08:13,160 line:-2
where we've used a List
to enumerate the shapes on the canvas.


155
00:08:14,561 --> 00:08:17,030 line:-2
We have an array of the graphics
currently on the canvas,


156
00:08:17,865 --> 00:08:19,533 line:-1
and we use our graphics array


157
00:08:19,600 --> 00:08:22,069 line:-2
to populate rows of content
in the sidebar,


158
00:08:22,135 --> 00:08:23,904 line:-1
producing a flat list of shapes.


159
00:08:23,971 --> 00:08:25,305 line:-1
Super cool.


160
00:08:26,173 --> 00:08:28,709 line:-2
I've been having a lot of fun
playing around with this app,


161
00:08:28,775 --> 00:08:30,110 line:-1
so much so that I was inspired


162
00:08:30,177 --> 00:08:32,779 line:-2
to add a feature
to collect shapes into groups.


163
00:08:33,580 --> 00:08:36,283 line:-1
Groups can also contain other groups,


164
00:08:36,350 --> 00:08:40,721 line:-2
so our flat list now needs to represent
an arbitrarily deep tree of elements.


165
00:08:41,621 --> 00:08:44,291 line:-2
We've added a new feature to Lists
that's perfect for this,


166
00:08:44,358 --> 00:08:46,059 line:-1
and I'm really excited to talk about it.


167
00:08:46,126 --> 00:08:48,061 line:-1
To turn my list into an outline,


168
00:08:48,128 --> 00:08:50,931 line:-2
I just need to tell the list
how to traverse the data tree.


169
00:08:51,698 --> 00:08:53,000 line:-1
I'll use a new initializer


170
00:08:53,066 --> 00:08:55,636 line:-2
to provide the children key path
on the graphic model,


171
00:08:56,136 --> 00:08:57,704 line:-1
and SwiftUI will do the rest.


172
00:08:58,472 --> 00:09:02,176 line:-2
With this one change, my sidebar now shows
the complete shape hierarchy.


173
00:09:02,242 --> 00:09:03,243 line:-1
Awesome.


174
00:09:03,677 --> 00:09:04,912 line:-1
As you might imagine,


175
00:09:04,978 --> 00:09:07,314 line:-2
there's a lot of interesting work
happening under the hood


176
00:09:07,381 --> 00:09:09,449 line:-1
to automate the creation of this outline.


177
00:09:10,317 --> 00:09:11,985 line:-1
I'll now hand off to Curt


178
00:09:12,052 --> 00:09:14,888 line:-2
who will show you how to use
the same tools List uses


179
00:09:14,955 --> 00:09:17,658 line:-2
to implement progressive disclosure
in your own UI.


180
00:09:18,392 --> 00:09:19,393 line:-1
Curt?


181
00:09:20,427 --> 00:09:21,662 line:-1
Thanks, Cody.


182
00:09:21,728 --> 00:09:24,398 line:-2
Converting a list to an outline
like that is super cool.


183
00:09:24,464 --> 00:09:26,266 line:-1
I'd like to dive into how that works.


184
00:09:26,333 --> 00:09:27,968 line:-1
I think the details are pretty great,


185
00:09:28,035 --> 00:09:31,104 line:-2
and you can use some of the pieces
in your own apps too.


186
00:09:31,171 --> 00:09:32,606 line:-1
Cody showed us how ShapeEdit


187
00:09:32,673 --> 00:09:35,342 line:-2
can display an outline of the graphics
in the sidebar


188
00:09:35,409 --> 00:09:38,078 line:-2
by passing the children key path
to the List.


189
00:09:38,145 --> 00:09:41,315 line:-2
I've been thinking it would be cool
to support multiple canvases in our app


190
00:09:41,381 --> 00:09:43,050 line:-1
and sketched a mock-up.


191
00:09:43,116 --> 00:09:45,953 line:-2
This mock-up uses a different section
for each canvas


192
00:09:46,019 --> 00:09:48,956 line:-2
and has a separate outline
inside each section.


193
00:09:49,022 --> 00:09:51,859 line:-2
Let's see how we can implement
a custom outline like this.


194
00:09:53,060 --> 00:09:54,061 line:-1
As Cody mentioned,


195
00:09:54,127 --> 00:09:57,564 line:-2
Lists are a high level structure
that help manage selection.


196
00:09:57,631 --> 00:09:58,966 line:-1
So, we keep that bit.


197
00:09:59,032 --> 00:10:01,068 line:-1
Then, inside the List,


198
00:10:01,134 --> 00:10:04,538 line:-2
we use a ForEach to iterate
over the canvases.


199
00:10:04,605 --> 00:10:07,875 line:-2
For each canvas,
we use Section to add a header


200
00:10:07,941 --> 00:10:09,710 line:-1
showing the name of the canvas.


201
00:10:09,776 --> 00:10:14,414 line:-2
And finally, the content of the Section
is a view new to SwiftUI:


202
00:10:14,481 --> 00:10:15,916 line:-1
an OutlineGroup.


203
00:10:16,250 --> 00:10:18,418 line:-1
An OutlineGroup is similar to a ForEach,


204
00:10:18,485 --> 00:10:21,522 line:-2
except that instead of iterating
over a flat collection,


205
00:10:21,588 --> 00:10:24,091 line:-2
OutlineGroup traverses
tree structure data.


206
00:10:24,157 --> 00:10:28,395 line:-2
Here, it takes an array of graphics
and the children key path.


207
00:10:29,096 --> 00:10:33,033 line:-2
The OutlineGroup generates an outline
where each item is a GraphicRow.


208
00:10:34,601 --> 00:10:37,137 line:-2
Let's switch to Xcode
and see how this works live.


209
00:10:37,971 --> 00:10:40,340 line:-2
Here's our outline of graphics
showing in preview.


210
00:10:40,407 --> 00:10:44,811 line:-2
Not only do SwiftUI outlines work
on macOS, they work on iOS too.


211
00:10:44,878 --> 00:10:49,616 line:-2
It's great to have powerful, built-in
outline capabilities on iPad and iPhone.


212
00:10:49,683 --> 00:10:52,452 line:-2
Let's go to Live Preview
and see how these groups work.


213
00:10:54,755 --> 00:10:58,125 line:-2
I can tap the disclosure indicators
to expand and collapse the groups.


214
00:10:59,092 --> 00:11:01,795 line:-2
Let's update this view
to show all the canvases.


215
00:11:01,862 --> 00:11:03,664 line:-1
First, we'll add an OutlineGroup


216
00:11:03,730 --> 00:11:06,300 line:-1
inside our List, wrapping this GraphicRow.


217
00:11:11,805 --> 00:11:15,375 line:-2
Then I'll move these first two arguments
from List to the OutlineGroup.


218
00:11:21,215 --> 00:11:23,250 line:-1
Notice how our preview hasn't changed yet.


219
00:11:23,317 --> 00:11:25,619 line:-1
An OutlineGroup directly inside a List


220
00:11:25,686 --> 00:11:28,689 line:-2
is the same as a List
that uses the children parameter.


221
00:11:29,089 --> 00:11:32,759 line:-2
Next, let's change our view
to use canvases instead of graphics.


222
00:11:32,826 --> 00:11:37,798 line:-2
I'll wrap this OutlineGroup in a ForEach
by Command clicking and choosing Repeat.


223
00:11:41,168 --> 00:11:44,204 line:-2
Then I'll replace the argument
with the canvases from my model.


224
00:11:48,809 --> 00:11:50,310 line:-1
And rename this parameter.


225
00:11:54,014 --> 00:11:55,849 line:-1
Finally, I'll change the OutlineGroup


226
00:11:55,916 --> 00:11:58,585 line:-2
to iterate over the graphics
from a single canvas.


227
00:11:59,386 --> 00:12:03,323 line:-2
Now we see the graphics from all
our canvases, but they all run together.


228
00:12:03,390 --> 00:12:05,058 line:-1
Let's add some section headers.


229
00:12:05,959 --> 00:12:08,996 line:-2
I can hit Shift+Command+L
to open the Library,


230
00:12:09,062 --> 00:12:10,998 line:-1
then filter to Show Section.


231
00:12:11,532 --> 00:12:13,400 line:-1
I can just drag the Section in,


232
00:12:14,134 --> 00:12:16,303 line:-1
then make the header show the canvas name.


233
00:12:34,154 --> 00:12:36,990 line:-2
Notice that because we're using
a SidebarListStyle,


234
00:12:37,057 --> 00:12:40,460 line:-2
we get these beautiful bold headers
introduced in iOS 14.


235
00:12:40,527 --> 00:12:42,796 line:-1
We can expand and collapse these too.


236
00:12:46,033 --> 00:12:47,601 line:-1
I think this is so cool.


237
00:12:48,402 --> 00:12:50,904 line:-1
With hierarchical Lists and OutlineGroups,


238
00:12:50,971 --> 00:12:54,608 line:-2
SwiftUI provides two great new tools
on mac and iOS


239
00:12:54,675 --> 00:12:56,643 line:-1
for progressive display of information.


240
00:12:57,544 --> 00:13:00,380 line:-2
Sometimes an app calls
for hiding and showing controls


241
00:13:00,447 --> 00:13:03,884 line:-2
or other information that doesn't
follow a regular hierarchy,


242
00:13:03,951 --> 00:13:05,819 line:-1
like this Inspector popover.


243
00:13:06,420 --> 00:13:07,521 line:-1
For cases like this,


244
00:13:07,588 --> 00:13:11,458 line:-2
I'm happy to introduce
a third new tool: DisclosureGroups.


245
00:13:11,525 --> 00:13:14,661 line:-2
A DisclosureGroup provides
a disclosure indicator,


246
00:13:14,728 --> 00:13:17,197 line:-1
a label and content.


247
00:13:17,264 --> 00:13:20,100 line:-2
When your user taps or clicks
on the disclosure indicator,


248
00:13:20,167 --> 00:13:21,869 line:-1
the content is revealed.


249
00:13:21,935 --> 00:13:24,938 line:-2
When they tap or click it again,
the content is hidden.


250
00:13:25,405 --> 00:13:26,874 line:-1
Let's see how we can use it.


251
00:13:27,708 --> 00:13:28,842 line:-1
Here's our Inspector.


252
00:13:28,909 --> 00:13:33,213 line:-2
We have controls for adjusting the fill,
shadow and text properties.


253
00:13:33,280 --> 00:13:35,315 line:-1
All this is wrapped in a Form,


254
00:13:35,382 --> 00:13:38,752 line:-2
which is a perfect choice
for collections of controls like this.


255
00:13:38,819 --> 00:13:42,389 line:-2
You can use Forms in your new
Settings Scenes on macOS too.


256
00:13:42,923 --> 00:13:46,093 line:-2
Let's take a quick look
at how the Inspector works in the app.


257
00:13:47,494 --> 00:13:49,363 line:-1
ShapeEdit works great on iPad.


258
00:13:49,930 --> 00:13:51,164 line:-1
I can select a shape


259
00:13:51,832 --> 00:13:53,267 line:-1
and then open the Inspector.


260
00:13:54,601 --> 00:13:57,471 line:-1
I can change the color, add a shadow...


261
00:13:59,907 --> 00:14:01,341 line:-1
and even change the shape.


262
00:14:03,377 --> 00:14:04,878 line:-1
Let's go back to the code.


263
00:14:06,146 --> 00:14:09,116 line:-2
This Inspector works great,
but it's a little busy.


264
00:14:09,183 --> 00:14:11,251 line:-1
Let's see if we can tidy things up a bit.


265
00:14:11,318 --> 00:14:14,788 line:-2
First, I'll wrap all these fill controls
in a DisclosureGroup.


266
00:14:18,225 --> 00:14:20,294 line:-2
I'll grab a DisclosureGroup
from the Library.


267
00:14:28,769 --> 00:14:30,404 line:-1
And set the title to Fill.


268
00:14:32,472 --> 00:14:36,343 line:-2
Notice that the fill controls are now
collapsed together in the Inspector.


269
00:14:36,410 --> 00:14:37,611 line:-1
Just like with Outlines,


270
00:14:37,678 --> 00:14:40,013 line:-2
we can expand and collapse
the disclosure group.


271
00:14:42,783 --> 00:14:46,520 line:-2
This group could really use an icon.
We can use a label for that.


272
00:14:47,454 --> 00:14:49,957 line:-1
We just remove this convenience property


273
00:14:50,824 --> 00:14:52,926 line:-1
and add a trailing closure for the label.


274
00:15:01,969 --> 00:15:03,504 line:-1
I can put any view here,


275
00:15:03,570 --> 00:15:05,639 line:-1
but the new Label type is a convenient way


276
00:15:05,706 --> 00:15:08,609 line:-2
to semantically combine
a title and an icon.


277
00:15:15,349 --> 00:15:18,285 line:-2
I can use one of the great
SF Symbol images here.


278
00:15:18,352 --> 00:15:21,588 line:-2
One of my favorites
is rectangle.3.offgrid.fill.


279
00:15:26,493 --> 00:15:27,628 line:-1
That's looking great.


280
00:15:28,495 --> 00:15:31,532 line:-2
Let's give the shadow and text controls
the same treatment.


281
00:15:36,937 --> 00:15:39,873 line:-2
With that done,
this Inspector is looking pretty good.


282
00:15:39,940 --> 00:15:42,042 line:-2
There's just one more thing
I'd like to change.


283
00:15:42,109 --> 00:15:44,978 line:-2
I think my users will adjust
the fill settings a lot,


284
00:15:45,045 --> 00:15:47,848 line:-2
so I'd like them to be visible
when they open the Inspector.


285
00:15:47,915 --> 00:15:49,082 line:-1
Let's do that now.


286
00:15:49,750 --> 00:15:51,151 line:-1
Disclosure groups in SwiftUI


287
00:15:51,218 --> 00:15:54,755 line:-2
can take a binding to a Boolean property
that controls expansion.


288
00:15:54,821 --> 00:15:57,724 line:-2
I'll add Boolean state
to act as the source of truth.


289
00:16:07,935 --> 00:16:09,503 line:-1
And make it default to true.


290
00:16:10,604 --> 00:16:14,541 line:-2
Then I'll configure the DisclosureGroup
to take a binding to our new state.


291
00:16:26,787 --> 00:16:30,157 line:-2
Now our fill controls default
to expanded. Nice.


292
00:16:30,757 --> 00:16:33,527 line:-2
We've seen how you can use
Outline and DisclosureGroups


293
00:16:33,594 --> 00:16:36,763 line:-2
to manage progressive disclosure
of information in your apps.


294
00:16:36,830 --> 00:16:38,232 line:-1
Before I wrap up,


295
00:16:38,298 --> 00:16:40,801 line:-2
let's look at how OutlineGroup
actually works.


296
00:16:40,868 --> 00:16:44,371 line:-2
It's a great example of the principle
of composition that Cody mentioned.


297
00:16:44,938 --> 00:16:49,276 line:-2
It's not necessary to understand this bit
to use Outline and DisclosureGroups,


298
00:16:49,343 --> 00:16:51,545 line:-2
but I think it's pretty cool
and hope you will too.


299
00:16:52,012 --> 00:16:55,249 line:-2
Here we have an OutlineGroup
over a collection of graphics.


300
00:16:55,716 --> 00:16:58,151 line:-1
SwiftUI expands the OutlineGroup


301
00:16:58,218 --> 00:17:01,922 line:-2
into a ForEach over that
same collection of graphics.


302
00:17:01,989 --> 00:17:05,125 line:-2
The body of that ForEach
is a DisclosureGroup.


303
00:17:06,292 --> 00:17:08,896 line:-2
Notice that the label
of each DisclosureGroup


304
00:17:08,962 --> 00:17:12,199 line:-2
is generated with a single element
of the original collection,


305
00:17:12,799 --> 00:17:16,603 line:-2
while the content of each DisclosureGroup
is another OutlineGroup,


306
00:17:16,670 --> 00:17:19,873 line:-2
this time over the children
of that single element.


307
00:17:20,641 --> 00:17:24,877 line:-2
This unwinding process continues
until we find a graphic with no children.


308
00:17:24,944 --> 00:17:28,949 line:-2
But because SwiftUI only evaluates
the content of a DisclosureGroup


309
00:17:29,016 --> 00:17:30,617 line:-1
after someone opens it,


310
00:17:30,684 --> 00:17:34,121 line:-2
only the minimum amount of the process
is actually executed.


311
00:17:35,022 --> 00:17:36,023 line:-1
As I mentioned,


312
00:17:36,089 --> 00:17:38,058 line:-2
you don't need to understand
this unwinding


313
00:17:38,125 --> 00:17:40,227 line:-1
to use Outline and DisclosureGroups,


314
00:17:40,294 --> 00:17:43,297 line:-2
but I just love the combination
of recursion and composition


315
00:17:43,363 --> 00:17:45,299 line:-1
that makes OutlineGroup possible.


316
00:17:45,365 --> 00:17:49,403 line:-2
Practically, I hope this tour of
SwiftUI's tools for displaying your data


317
00:17:49,469 --> 00:17:50,571 line:-1
has been helpful.


318
00:17:50,637 --> 00:17:53,540 line:-2
We saw that HStack and VStack
are the right tool


319
00:17:53,607 --> 00:17:56,510 line:-2
for controlling the placement
of a fixed set of items.


320
00:17:56,577 --> 00:17:59,513 line:-2
The new Lazy Stacks work great
inside a scroll view


321
00:17:59,580 --> 00:18:03,317 line:-2
for displaying variable,
potentially large sets of items.


322
00:18:03,383 --> 00:18:08,422 line:-2
Lazy Grids provide a convenient new way
to display your collections in a grid.


323
00:18:08,488 --> 00:18:09,923 line:-1
Lists are a powerhouse,


324
00:18:09,990 --> 00:18:13,460 line:-2
giving you support for selection,
scrolling, lazy loading of content


325
00:18:13,527 --> 00:18:17,064 line:-2
and, new this year,
display of hierarchical data.


326
00:18:17,664 --> 00:18:20,200 line:-2
Use Forms for settings
and other lists of controls


327
00:18:20,267 --> 00:18:22,369 line:-1
like we saw in the Inspector example.


328
00:18:22,436 --> 00:18:25,405 line:-2
And finally, the new Outline
and DisclosureGroups


329
00:18:25,472 --> 00:18:28,942 line:-2
give you the power to tailor
the progressive display of information


330
00:18:29,009 --> 00:18:30,944 line:-1
that's just right for your app.


331
00:18:32,246 --> 00:18:34,948 line:0
To learn more about how best
to show data in your app,


332
00:18:35,015 --> 00:18:36,917 line:0
you can download the code for ShapeEdit


333
00:18:36,984 --> 00:18:39,319 line:0
from developer.apple.com.


334
00:18:39,386 --> 00:18:42,523 line:0
Also be sure to check out
"App Essentials in SwiftUI"


335
00:18:42,589 --> 00:18:45,626 line:0
for more on creating
Settings Scenes in your apps


336
00:18:45,692 --> 00:18:47,995 line:0
and "Data Essentials in SwiftUI"


337
00:18:48,061 --> 00:18:51,331 line:0
for the details on connecting
your model to your views.


338
00:18:51,832 --> 00:18:53,667 line:-1
And for more about sandwiches,


339
00:18:53,734 --> 00:18:57,171 line:-2
check out "Introduction to SwiftUI"
from WW 20.


340
00:18:57,237 --> 00:18:59,640 line:-1
Thanks for watching. Be well.


341
00:18:59,706 --> 00:19:01,642 line:-1
[chimes]

