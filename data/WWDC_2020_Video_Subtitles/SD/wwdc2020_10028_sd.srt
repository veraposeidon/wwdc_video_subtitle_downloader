1
00:00:03,937 --> 00:00:06,773 line:-1
Hello and welcome to WWDC.


2
00:00:08,742 --> 00:00:10,611 line:0
Hi there. My name is Nahir,


3
00:00:10,677 --> 00:00:13,680 line:0
and I'm a manager on
our iOS System Experience team,


4
00:00:14,214 --> 00:00:16,717 line:-2
and I'll later be joined
by my colleague Neil.


5
00:00:16,783 --> 00:00:19,987 line:-2
It's my pleasure to welcome you
to "Meet WidgetKit."


6
00:00:20,320 --> 00:00:24,424 line:-2
In iOS 14, we have a dramatic,
new Home Screen experience.


7
00:00:24,491 --> 00:00:28,996 line:-2
One that is much more dynamic
and personalized with a focus on widgets.


8
00:00:29,563 --> 00:00:33,634 line:-2
Our new widgets are designed
to be bold, highly glanceable


9
00:00:33,700 --> 00:00:37,237 line:-2
and be perfectly at home,
not just on the iPhone Home Screen...


10
00:00:38,805 --> 00:00:41,208 line:-1
but also our refreshed Today View...


11
00:00:42,576 --> 00:00:44,645 line:-1
pinned to your iPad Home Screen


12
00:00:45,379 --> 00:00:49,783 line:-2
and, finally, in the gorgeous new
Notification Center on MacOS Big Sur.


13
00:00:51,552 --> 00:00:53,921 line:-1
Now, before I dive deep into the API,


14
00:00:53,987 --> 00:00:57,491 line:-2
let's actually talk about
what makes a great widget experience.


15
00:00:57,558 --> 00:01:01,995 line:-2
When the team started to think about that,
we quickly came to three main goals.


16
00:01:02,062 --> 00:01:06,900 line:-2
A great widget is glanceable,
it's relevant and it's personalized.


17
00:01:08,836 --> 00:01:11,805 line:-2
What do we mean by
that a great widget is glanceable?


18
00:01:12,339 --> 00:01:16,043 line:-2
As we'll dive into later,
our new widgets can come in many sizes.


19
00:01:16,443 --> 00:01:18,745 line:-1
Especially at the smallest widget size,


20
00:01:18,812 --> 00:01:22,749 line:-2
you only have the space
of around four Home Screen icons,


21
00:01:22,816 --> 00:01:25,252 line:-2
so you really want
to make that space count.


22
00:01:25,719 --> 00:01:28,856 line:-2
People only spend a few moments
on their Home Screen


23
00:01:28,922 --> 00:01:31,391 line:-2
before they springboard off
to somewhere else.


24
00:01:31,458 --> 00:01:35,863 line:-2
They shouldn't need to interact with
or do anything more than take a quick peek


25
00:01:35,929 --> 00:01:38,098 line:-1
to get the most value out of your widget.


26
00:01:39,266 --> 00:01:42,703 line:-2
Take a look at some examples of widgets
in the small sizes.


27
00:01:42,769 --> 00:01:44,505 line:-1
You don't need to tap any buttons


28
00:01:44,571 --> 00:01:48,008 line:-2
or even spend time
trying to figure out a complicated UI.


29
00:01:48,075 --> 00:01:49,843 line:-1
The content is the focus.


30
00:01:50,944 --> 00:01:54,748 line:-2
This is very important,
widgets are not mini-apps.


31
00:01:55,215 --> 00:01:59,453 line:-2
Think of this as more projecting content
from your app onto the Home Screen


32
00:01:59,520 --> 00:02:03,023 line:-2
rather than full mini-apps
filled with tiny little buttons.


33
00:02:03,290 --> 00:02:05,425 line:-2
This can sometimes be tricky
to figure out.


34
00:02:05,492 --> 00:02:09,429 line:0
Luckily, we have a great session
from our design team available


35
00:02:09,496 --> 00:02:11,865 line:0
to help you think through
what parts of your app


36
00:02:11,932 --> 00:02:14,601 line:0
would make really compelling
widget experiences.


37
00:02:15,736 --> 00:02:18,805 line:-2
Having a glanceable widget
is only one part of the story.


38
00:02:19,139 --> 00:02:22,543 line:-2
Having those widgets be relevant
is just as important.


39
00:02:23,010 --> 00:02:25,512 line:-1
For example, in the morning getting ready,


40
00:02:25,579 --> 00:02:27,281 line:-1
I care most about the weather,


41
00:02:27,981 --> 00:02:29,483 line:-1
but then, throughout the day,


42
00:02:29,550 --> 00:02:33,053 line:-2
maybe Reminders
so I don't forget any of my to-dos,


43
00:02:33,420 --> 00:02:36,223 line:-1
and then, at the end of the day, music,


44
00:02:36,290 --> 00:02:39,593 line:-2
so I can annoy my neighbors
with some loud party music. I'm kidding.


45
00:02:40,227 --> 00:02:43,630 line:-2
Especially on our mobile platforms,
where space is at a premium,


46
00:02:43,964 --> 00:02:47,134 line:-2
we really wanted a way
to make sure the right widget


47
00:02:47,201 --> 00:02:49,803 line:-1
is up and available as soon as you need.


48
00:02:51,004 --> 00:02:53,240 line:-1
This is where Smart Stacks comes in.


49
00:02:54,007 --> 00:02:56,476 line:-1
Smart Stacks are a collection of widgets


50
00:02:56,543 --> 00:03:00,280 line:-2
that will automatically rotate
to show the right widget at the top.


51
00:03:00,681 --> 00:03:02,349 line:-1
But you can also swipe through.


52
00:03:02,416 --> 00:03:03,717 line:-1
It's super fun.


53
00:03:04,351 --> 00:03:09,323 line:-2
We use on-device intelligence to help show
the right thing at the top of the Stack.


54
00:03:09,389 --> 00:03:13,894 line:-2
But as a developer, you can help
drive this using Siri Shortcuts donations,


55
00:03:13,961 --> 00:03:17,264 line:-2
the system that we've been building upon
in previous years.


56
00:03:17,331 --> 00:03:20,667 line:-1
There's also a specific WidgetKit API


57
00:03:20,734 --> 00:03:24,438 line:-2
to help the system figure out
when your widget will be more relevant


58
00:03:24,505 --> 00:03:26,206 line:-1
or when something else might be.


59
00:03:27,174 --> 00:03:30,611 line:-2
This is a really deep topic
that is broader than just widgets,


60
00:03:30,677 --> 00:03:34,348 line:-2
and we have an entire session
dedicated to this topic available


61
00:03:34,414 --> 00:03:36,450 line:-1
that I highly recommend you go check out.


62
00:03:37,150 --> 00:03:39,820 line:-2
A great widget
should let you personalize it.


63
00:03:40,120 --> 00:03:42,189 line:-1
Let's take a look at the Weather widget.


64
00:03:42,256 --> 00:03:45,659 line:-2
Yes, it's in Celsius.
I'm Canadian, and we use metric.


65
00:03:46,326 --> 00:03:49,796 line:-2
Right off the bat, you can have it
in three different sizes,


66
00:03:49,863 --> 00:03:52,332 line:-1
small, medium or large.


67
00:03:53,166 --> 00:03:55,335 line:-2
You're not required
to support all the sizes


68
00:03:55,402 --> 00:03:58,438 line:-2
as some experiences don't make sense
in all of them,


69
00:03:58,505 --> 00:04:01,475 line:-2
but I recommend supporting
as many sizes as possible.


70
00:04:02,409 --> 00:04:04,545 line:-2
Let's customize
the Weather widget further.


71
00:04:05,179 --> 00:04:07,581 line:-2
Just tapping on a widget,
while in edit mode,


72
00:04:07,648 --> 00:04:09,883 line:-1
flips around for quick configuration.


73
00:04:10,450 --> 00:04:13,520 line:-2
All the configuration options
are built using Intents,


74
00:04:13,587 --> 00:04:15,889 line:-2
which you may be familiar with
from Shortcuts.


75
00:04:16,190 --> 00:04:18,959 line:-2
Choosing a city
is a relatively simple example,


76
00:04:19,026 --> 00:04:22,262 line:-2
but this is a powerful system
full of possibilities.


77
00:04:22,663 --> 00:04:25,666 line:-2
Now, the awesome thing about WidgetKit
is that we can generate


78
00:04:25,732 --> 00:04:30,204 line:-2
this entire Configuration UI
from your Intent completely automatically


79
00:04:30,270 --> 00:04:31,939 line:-1
with no additional work from you.


80
00:04:32,005 --> 00:04:33,273 line:-1
It's pretty cool.


81
00:04:33,340 --> 00:04:36,844 line:-2
So, to recap,
the goals for a great widget experience


82
00:04:36,910 --> 00:04:41,315 line:-2
is one that is glanceable,
relevant and personalized.


83
00:04:42,683 --> 00:04:45,552 line:-2
With these goals in mind,
we designed WidgetKit.


84
00:04:45,619 --> 00:04:46,720 line:-1
So, let's dive in.


85
00:04:47,487 --> 00:04:50,290 line:-2
First of all, it was a goal
from the very beginning


86
00:04:50,357 --> 00:04:54,795 line:-2
for widgets to be multi-platform,
and to make it as easy as possible


87
00:04:54,862 --> 00:05:00,701 line:-2
for developers to have their learnings
apply across iOS, iPadOS and macOS,


88
00:05:01,635 --> 00:05:05,806 line:-2
so widget's user interface and WidgetKit
are built entirely with SwiftUI.


89
00:05:06,373 --> 00:05:09,810 line:-2
SwiftUI also makes it super easy
to support features


90
00:05:09,877 --> 00:05:13,514 line:-2
like Dynamic Type and Dark Mode
nearly automatically.


91
00:05:14,548 --> 00:05:17,651 line:-2
Next, there are some strong implications
with having widgets


92
00:05:17,718 --> 00:05:19,086 line:-1
on the main Home Screen.


93
00:05:19,653 --> 00:05:23,924 line:-2
The average person goes to
the Home Screen more than 90 times a day


94
00:05:24,391 --> 00:05:26,493 line:-1
and only spends a few moments there.


95
00:05:27,728 --> 00:05:31,999 line:-2
The last thing you want to see is
your Home Screen full of loading spinners.


96
00:05:32,566 --> 00:05:36,770 line:-2
When we designed complications on watchOS,
we had very similar goals


97
00:05:36,837 --> 00:05:40,274 line:-2
of having things be ready
and immediately glanceable,


98
00:05:40,340 --> 00:05:43,310 line:-2
so we took some inspiration
from how they were built.


99
00:05:44,678 --> 00:05:49,716 line:-2
What that means is WidgetKit extensions
are background extensions


100
00:05:49,783 --> 00:05:52,953 line:-2
that return a series of view hierarchies
in a timeline.


101
00:05:53,720 --> 00:05:56,156 line:-1
Using the declarative nature of SwiftUI,


102
00:05:56,223 --> 00:05:59,059 line:-2
we can package up these views
in this timeline


103
00:05:59,126 --> 00:06:01,195 line:-2
and then send them over
to the Home Screen,


104
00:06:01,261 --> 00:06:04,798 line:-2
which will present them at the
correct time according to the timeline.


105
00:06:05,399 --> 00:06:09,837 line:-2
This avoids the entire launcher process,
load and then present to view.


106
00:06:10,204 --> 00:06:13,006 line:-2
They are ready to go
and immediately glanceable.


107
00:06:14,041 --> 00:06:16,543 line:-2
The fact that we have your views
ready beforehand


108
00:06:16,610 --> 00:06:19,980 line:-2
means we can also reuse them
in other areas of the system.


109
00:06:20,514 --> 00:06:21,515 line:-1
For example,


110
00:06:21,582 --> 00:06:25,786 line:-2
we can have this super-fun experience
to add widgets from the Widget Gallery,


111
00:06:25,853 --> 00:06:28,188 line:-2
where people who use your app
can get a preview


112
00:06:28,255 --> 00:06:31,758 line:-2
of exactly what your widget will look like
right on the Home Screen.


113
00:06:32,693 --> 00:06:35,295 line:-2
You can refresh these timelines
from your main app.


114
00:06:35,362 --> 00:06:39,399 line:-2
So, for example, something changes in
your app, your widget can be up-to-date.


115
00:06:40,400 --> 00:06:44,204 line:-2
Or you can request schedule updates
right from your extension.


116
00:06:46,440 --> 00:06:50,444 line:-2
So, as an example, Calendar's widget
knows all my events for the day


117
00:06:50,511 --> 00:06:51,712 line:-1
and when they occur.


118
00:06:52,179 --> 00:06:56,116 line:-2
The extension can use this information
to render the right views


119
00:06:56,183 --> 00:06:59,753 line:-2
for when my next meeting is happening,
when I'm in that meeting


120
00:06:59,820 --> 00:07:01,188 line:-1
and the next one after.


121
00:07:02,055 --> 00:07:03,090 line:-1
You know what?


122
00:07:03,156 --> 00:07:05,025 line:-1
I think Neil and I should skip coffee


123
00:07:05,092 --> 00:07:08,295 line:-2
and go celebrate
at my favorite steak place in the city,


124
00:07:08,362 --> 00:07:10,931 line:-2
so I go into Calendar
and update the event.


125
00:07:13,133 --> 00:07:16,837 line:-2
Calendar will then use API
to reload the timeline.


126
00:07:17,204 --> 00:07:18,405 line:-1
What we mean by that


127
00:07:18,472 --> 00:07:21,942 line:-2
is that the extension wakes up
and returns a new timeline


128
00:07:22,009 --> 00:07:23,510 line:-1
with all the new updates.


129
00:07:23,844 --> 00:07:26,446 line:-2
Now that you have some idea
of how WidgetKit works,


130
00:07:26,513 --> 00:07:30,217 line:-2
let me hand it off to Neil who'll dive
deeper into actually building a widget.


131
00:07:30,284 --> 00:07:31,285 line:-1
Neil.


132
00:07:31,952 --> 00:07:32,953 line:-1
Thanks, Nahir.


133
00:07:33,020 --> 00:07:36,857 line:-2
Hi, everyone. My name is Neil Desai,
and I'm the WidgetKit engineering manager.


134
00:07:36,924 --> 00:07:40,427 line:-2
I am so excited to talk about
how to create a great widget today,


135
00:07:40,761 --> 00:07:44,064 line:-2
and to do so, I wanna talk about
four major things.


136
00:07:44,331 --> 00:07:46,667 line:-2
We're gonna talk about
how to define a widget


137
00:07:46,733 --> 00:07:49,703 line:-2
and learning about how to create
a glanceable experience.


138
00:07:50,003 --> 00:07:52,739 line:-2
We're also gonna discuss
the engine of our widget:


139
00:07:52,806 --> 00:07:55,142 line:-1
our views, timelines and reloads,


140
00:07:55,209 --> 00:07:59,213 line:-2
as well as the personalization
and intelligence aspects of widgets.


141
00:07:59,680 --> 00:08:02,816 line:-2
Widgets are simple
yet incredibly powerful.


142
00:08:02,883 --> 00:08:06,587 line:-2
And we're gonna talk about
all of the tools at your disposal.


143
00:08:06,653 --> 00:08:09,623 line:-2
So, first,
let's learn how to define a widget.


144
00:08:10,524 --> 00:08:14,027 line:-2
To define a widget, I wanna talk through
a few different concepts.


145
00:08:14,361 --> 00:08:19,533 line:-2
Those are: kind, configuration,
supportedFamilies and placeholder.


146
00:08:21,835 --> 00:08:23,337 line:-1
When we started this project,


147
00:08:23,403 --> 00:08:27,808 line:-2
we talked a lot about the different kinds
of widgets we wished to enable.


148
00:08:27,875 --> 00:08:29,076 line:-1
We wanted a mechanism


149
00:08:29,142 --> 00:08:33,013 line:0
to allow a single extension
to support multiple kinds of widgets.


150
00:08:34,648 --> 00:08:38,118 line:-2
For example, a single Stocks extension
provides an experience


151
00:08:38,184 --> 00:08:39,919 line:-1
like the Stocks overview widget.


152
00:08:39,986 --> 00:08:44,458 line:-2
A great widget, which provides
glanceable information about a few stocks,


153
00:08:44,525 --> 00:08:48,862 line:-2
but also, that same extension powers
the Stocks detail widget,


154
00:08:48,929 --> 00:08:52,699 line:-2
which allows a user to show a single stock
on their Home Screen


155
00:08:52,766 --> 00:08:55,602 line:-1
or on Notification Center on macOS.


156
00:08:56,203 --> 00:08:58,539 line:-2
This is all done,
like Nahir had mentioned,


157
00:08:58,605 --> 00:09:01,742 line:-2
through the use of SwiftUI
and a multi-platform extension.


158
00:09:02,176 --> 00:09:07,714 line:-2
WidgetKit extensions can support SwiftUI,
AppKit and Catalyst-based macOS apps.


159
00:09:08,649 --> 00:09:13,153 line:-2
Kinds of widgets can also express
which type of configuration they support.


160
00:09:13,620 --> 00:09:17,858 line:-2
One is a StaticConfiguration,
and the other is an IntentConfiguration.


161
00:09:19,259 --> 00:09:22,396 line:-2
The Fitness widget doesn't really
make sense for configuration.


162
00:09:22,462 --> 00:09:26,600 line:-2
The widget doesn't need to allow the user
to configure it in any way.


163
00:09:26,667 --> 00:09:29,903 line:-2
The widget really is just,
"Hey, here's your activity for the day."


164
00:09:29,970 --> 00:09:32,539 line:-1
And mine happens to not look so hot.


165
00:09:33,006 --> 00:09:36,844 line:-2
So, I should get moving around,
but I digress. Anyways...


166
00:09:36,910 --> 00:09:39,213 line:-1
This widget has a StaticConfiguration.


167
00:09:40,214 --> 00:09:43,851 line:-2
Reminders, on the flip side,
can be personalized for a particular list.


168
00:09:44,651 --> 00:09:47,020 line:-1
This widget uses an IntentConfiguration.


169
00:09:48,822 --> 00:09:53,126 line:-2
A particular kind can also enable
one or many supportedFamilies.


170
00:09:53,193 --> 00:09:56,363 line:-2
By default,
widgets support all family types.


171
00:09:56,964 --> 00:09:59,199 line:-1
Weather's widget supports all families,


172
00:09:59,266 --> 00:10:02,302 line:-2
and so I can enjoy all my temperatures
in Fahrenheit


173
00:10:02,369 --> 00:10:06,173 line:-2
with any family type,
unlike Nahir's love of Celsius.


174
00:10:06,240 --> 00:10:09,309 line:-1
And these families look great on iOS...


175
00:10:10,777 --> 00:10:12,446 line:-1
and on macOS.


176
00:10:13,080 --> 00:10:15,449 line:-2
The last key component
of widget definition


177
00:10:15,516 --> 00:10:17,317 line:-1
is our placeholder UI.


178
00:10:17,384 --> 00:10:20,187 line:-2
Each kind of widget is required
to provide a placeholder UI.


179
00:10:20,254 --> 00:10:23,357 line:-2
Placeholder UI is the default content
of your widget.


180
00:10:23,757 --> 00:10:26,326 line:-2
It should be a representation
of your widget kind,


181
00:10:26,393 --> 00:10:28,061 line:-1
but nothing more than that.


182
00:10:28,529 --> 00:10:31,031 line:-2
There should not be any user data
in this UI.


183
00:10:31,932 --> 00:10:35,969 line:-2
The other important thing to note
is this UI is retrieved only sparingly,


184
00:10:36,036 --> 00:10:38,772 line:-2
and there are no guarantees
on when that will occur.


185
00:10:39,439 --> 00:10:42,209 line:-2
Typically we will only ask
for a new placeholder UI


186
00:10:42,276 --> 00:10:44,178 line:-1
on a device environment change.


187
00:10:44,244 --> 00:10:47,848 line:-2
For example, if the dynamic type setting
of the device changes.


188
00:10:49,249 --> 00:10:53,887 line:-2
Great placeholder UIs show representation
of what your kind of widget is.


189
00:10:53,954 --> 00:10:58,792 line:-2
I encourage you to think through
the best possible UI for your widget.


190
00:10:59,726 --> 00:11:00,894 line:-1
Ah, code.


191
00:11:01,328 --> 00:11:05,132 line:-2
All of those four key components
boil down to this widget definition.


192
00:11:05,666 --> 00:11:09,536 line:-2
Here we define a sample widget,
which conforms to the widget protocol


193
00:11:09,603 --> 00:11:11,338 line:-1
and we specify a kind.


194
00:11:11,905 --> 00:11:16,243 line:-2
We return some widget configuration,
which is composed of a few items


195
00:11:16,310 --> 00:11:20,380 line:-2
and within there we specify a provider
in our placeholder view.


196
00:11:23,717 --> 00:11:25,052 line:-1
We'll get to provider later,


197
00:11:25,118 --> 00:11:28,255 line:-2
but, really, that's how we set up
the engine of our widget.


198
00:11:29,356 --> 00:11:31,825 line:-1
We now know how to define our widget.


199
00:11:31,892 --> 00:11:34,294 line:-2
Let's talk about how to create
a glanceable experience.


200
00:11:34,361 --> 00:11:37,564 line:-2
Weather is a great example
of a glanceable widget.


201
00:11:37,631 --> 00:11:40,300 line:-2
Same with Nike Run Club's widget
and Calendar.


202
00:11:40,834 --> 00:11:44,505 line:-2
All three show me useful information
and invite me, as the user,


203
00:11:44,571 --> 00:11:47,441 line:-2
to tap to launch the app
and find out more information.


204
00:11:47,508 --> 00:11:50,310 line:-2
The first aspect of creating
a glanceable experience


205
00:11:50,377 --> 00:11:54,147 line:-2
is creating StatelessUI,
which SwiftUI is uniquely perfect for.


206
00:11:54,515 --> 00:11:58,919 line:-2
These interactions on the Home Screen
and on Notification Center are different.


207
00:11:58,986 --> 00:12:01,121 line:-1
These widgets are not mini-apps.


208
00:12:01,188 --> 00:12:03,457 line:-2
We do not support
scrolling within the widget,


209
00:12:03,891 --> 00:12:07,528 line:-2
interactive elements like switches
and other system controls,


210
00:12:07,594 --> 00:12:09,997 line:-1
nor videos or animated images.


211
00:12:10,564 --> 00:12:13,066 line:-1
These glanceable UIs can allow your user


212
00:12:13,133 --> 00:12:16,537 line:-2
to easily tap on the widget
and deep link into your app.


213
00:12:17,337 --> 00:12:21,441 line:-2
Let's take music as an example.
Here's music in systemSmall.


214
00:12:21,508 --> 00:12:24,111 line:-2
A user can tap
on the most recently played album


215
00:12:24,178 --> 00:12:26,713 line:-1
and deep link directly into that app.


216
00:12:27,347 --> 00:12:29,416 line:-1
systemSmall has a single tap target.


217
00:12:29,483 --> 00:12:31,652 line:-1
So the entire widget is a tap target


218
00:12:31,718 --> 00:12:34,588 line:-2
meant to take the user
directly into the app.


219
00:12:35,822 --> 00:12:38,692 line:-1
Music's widget also supports systemMedium.


220
00:12:38,759 --> 00:12:42,563 line:-2
There's great content which shows me
a bunch of different albums.


221
00:12:42,629 --> 00:12:47,501 line:-2
Each album is an individual link,
which can take you directly into that app.


222
00:12:48,502 --> 00:12:53,774 line:-2
The entire widget can be associated
with a URL link using the widget URL API.


223
00:12:54,441 --> 00:12:58,278 line:-2
If you wanna create sub-links
in systemMedium or systemLarge,


224
00:12:58,345 --> 00:13:01,114 line:-2
then you can use the new link API
in SwiftUI.


225
00:13:03,951 --> 00:13:07,754 line:-2
We've defined our widget and know how
to create a glanceable experience.


226
00:13:07,821 --> 00:13:10,991 line:-2
Let's now chat about the real guts
of your widget experience:


227
00:13:11,058 --> 00:13:13,160 line:-1
views, timelines and reloads.


228
00:13:13,694 --> 00:13:17,497 line:-2
Really, there are three types
of UI experiences you need to think about:


229
00:13:18,165 --> 00:13:20,567 line:-2
Placeholder UI,
which we discussed earlier,


230
00:13:20,634 --> 00:13:22,903 line:-1
and then there is snapshot and timeline.


231
00:13:23,570 --> 00:13:27,474 line:-2
Snapshot is where the system needs
to quickly display a single entry,


232
00:13:27,975 --> 00:13:31,712 line:-2
so the expectation is for your extension
to quickly return a view


233
00:13:31,778 --> 00:13:34,615 line:-2
as fast as possible,
because when you do so,


234
00:13:34,681 --> 00:13:38,819 line:-2
you'll see your real widget
in the gorgeous Widget Gallery on iOS.


235
00:13:39,219 --> 00:13:43,156 line:-2
This isn't a screenshot or image
we had to provide at design time.


236
00:13:43,457 --> 00:13:48,462 line:-2
This is your real widget experience
on iOS, iPadOS and macOS.


237
00:13:50,163 --> 00:13:53,934 line:-2
In most cases,
your timeline's first entry and snapshot


238
00:13:54,001 --> 00:13:56,203 line:-1
can be returned as the same entry.


239
00:13:56,270 --> 00:13:57,971 line:-1
So what you see in the Widget Gallery


240
00:13:58,038 --> 00:14:00,908 line:-2
is what you get when the user
adds it to their device.


241
00:14:01,842 --> 00:14:07,014 line:-2
And if we follow that thread,
if a snapshot is just a single entry,


242
00:14:07,080 --> 00:14:10,918 line:-2
then a series of multiple views
to be displayed at the right time


243
00:14:10,984 --> 00:14:12,319 line:-1
is just the timeline.


244
00:14:12,786 --> 00:14:16,623 line:-2
Timelines are a combination
of views and dates that are returned,


245
00:14:16,690 --> 00:14:20,594 line:-2
which allow you to say at what time
a particular view should be shown.


246
00:14:22,262 --> 00:14:26,066 line:-2
And by returning a timeline
is how we drive the widget experience.


247
00:14:26,500 --> 00:14:29,837 line:-2
Timeline's returns should be
for both dark and light mode.


248
00:14:30,304 --> 00:14:32,973 line:-2
And I wanna pull back the curtain
a little bit.


249
00:14:33,040 --> 00:14:35,642 line:-2
When a WidgetKit extension
returns an entry,


250
00:14:35,709 --> 00:14:39,980 line:-2
we will take that information
and serialize the view hierarchy to disk.


251
00:14:41,448 --> 00:14:45,586 line:-2
This means we just-in-time
render each individual entry.


252
00:14:45,652 --> 00:14:48,388 line:-2
This enables the system
to power numerous widgets


253
00:14:48,455 --> 00:14:51,291 line:-1
at the same time with numerous timelines.


254
00:14:51,358 --> 00:14:55,028 line:-2
I can't put this lightly.
This is some seriously cool tech.


255
00:14:55,095 --> 00:14:58,899 line:-2
Timelines should typically be returned
for days' worth of content.


256
00:14:58,966 --> 00:15:03,370 line:-2
There are times when your widget needs
to return more up-to-date information.


257
00:15:03,437 --> 00:15:06,573 line:-2
We do this through the concept
of what we call reloads.


258
00:15:08,108 --> 00:15:12,479 line:-2
Reloads are where the system will wake up
your extension and ask for a new timeline


259
00:15:12,546 --> 00:15:14,815 line:-1
for each widget placed on the device.


260
00:15:15,849 --> 00:15:20,320 line:-2
Reloads help ensure that your content
is always up-to-date for your user.


261
00:15:20,387 --> 00:15:21,555 line:-1
I don't know about you,


262
00:15:21,622 --> 00:15:25,592 line:-2
but I always find code to be the easiest
way to learn about a new topic.


263
00:15:25,659 --> 00:15:26,960 line:-1
So, let's dive in.


264
00:15:27,027 --> 00:15:29,229 line:-1
Here's the TimelineProvider protocol.


265
00:15:29,296 --> 00:15:32,799 line:-2
We have a TimelineEntry,
which consists mainly of a date,


266
00:15:32,866 --> 00:15:35,802 line:-2
a context, which provides
environment information,


267
00:15:35,869 --> 00:15:39,373 line:-2
and the context for which
the system is asking you for entries.


268
00:15:41,208 --> 00:15:45,078 line:-2
Then, in the snapshot function,
the system asks for a single entry.


269
00:15:45,145 --> 00:15:48,949 line:-2
And in the timeline function,
the system asks for a series of entries.


270
00:15:51,018 --> 00:15:54,688 line:-2
Here's an example of how I'd conform
to the TimelineProvider protocol.


271
00:15:55,322 --> 00:15:56,623 line:-1
I would create a provider.


272
00:15:57,090 --> 00:16:00,494 line:-2
In snapshot, I would create a single entry
and return it.


273
00:16:01,061 --> 00:16:05,399 line:-2
In timeline, I would return an array
of entries and attach a reload policy.


274
00:16:05,465 --> 00:16:08,335 line:-2
Baked into each timeline
is a reload policy.


275
00:16:08,735 --> 00:16:11,972 line:-2
It's where you can tell the system
when to ask for the next timeline.


276
00:16:13,407 --> 00:16:16,910 line:-2
You can ask for a reload
at the end of the timeline you provide,


277
00:16:16,977 --> 00:16:18,745 line:-1
after a particular date,


278
00:16:18,812 --> 00:16:22,349 line:-2
or you can explicitly tell the system
to not reload your timeline.


279
00:16:23,116 --> 00:16:25,986 line:-2
For example, maybe your widget
needs user data first


280
00:16:26,053 --> 00:16:27,888 line:-1
before returning a compelling timeline.


281
00:16:28,255 --> 00:16:31,391 line:-2
The system will take into account
your reload policy


282
00:16:31,458 --> 00:16:34,194 line:-2
and determine the best time
to reload your widget.


283
00:16:34,895 --> 00:16:37,664 line:-2
Widgets viewed frequently
will receive more reloads.


284
00:16:37,998 --> 00:16:41,068 line:-2
Widgets viewed infrequently
will receive fewer reloads.


285
00:16:41,635 --> 00:16:46,106 line:-2
The system will also force reloads
for whenever a device environment changes.


286
00:16:46,173 --> 00:16:48,742 line:-2
For example, if a significant
time change occurs.


287
00:16:50,344 --> 00:16:53,347 line:-2
The system will determine the best time
to reload your widget,


288
00:16:53,847 --> 00:16:55,382 line:-1
but there are also other events,


289
00:16:55,449 --> 00:16:58,819 line:-2
which may need you to ask
the system for a reload from your app.


290
00:17:00,053 --> 00:17:03,123 line:-2
For example, your app may receive
a background notification.


291
00:17:03,490 --> 00:17:06,326 line:-2
Or a user may make a change
in the app itself.


292
00:17:07,094 --> 00:17:10,897 line:-2
When receiving a background notification,
you can use WidgetKit API


293
00:17:10,964 --> 00:17:14,734 line:-2
via WidgetCenter to reload your timeline,
which will wake your extension.


294
00:17:15,469 --> 00:17:18,638 line:-2
And if your user makes a relevant change
in your foreground app,


295
00:17:18,704 --> 00:17:20,540 line:-1
you may also reload your timeline.


296
00:17:22,776 --> 00:17:25,712 line:-2
Be judicious with your
foreground app reloads.


297
00:17:25,779 --> 00:17:29,416 line:-2
Only reload your widget when a relevant
change in the app has occurred,


298
00:17:29,483 --> 00:17:31,385 line:-1
which should be reflected in your widget.


299
00:17:32,052 --> 00:17:33,887 line:-1
You can use the WidgetCenter APIs


300
00:17:33,954 --> 00:17:37,758 line:-2
from within your app process or extension
to reload your timeline.


301
00:17:37,824 --> 00:17:42,196 line:-2
You have the option to reload timelines
per kind or reload all timelines,


302
00:17:42,763 --> 00:17:45,933 line:-2
and you can retrieve the list
of current configurations.


303
00:17:45,999 --> 00:17:49,937 line:-2
There are also times when you need
to query your server for more information.


304
00:17:50,003 --> 00:17:53,540 line:-2
You can use background URLSessions
to kick off a task


305
00:17:53,607 --> 00:17:56,343 line:-2
and your payload will be delivered
to your extension


306
00:17:56,410 --> 00:17:59,646 line:-2
via the onBackgroundURLSessionEvents
modifier.


307
00:18:00,380 --> 00:18:03,116 line:-2
You should also be cognizant
of your networking usage.


308
00:18:03,584 --> 00:18:06,053 line:-2
Make sure and batch your requests
to your server


309
00:18:06,119 --> 00:18:08,755 line:-2
and only use as much networking
as you need.


310
00:18:09,923 --> 00:18:13,093 line:-2
Reloads when your app processor widget
is run in the background


311
00:18:13,160 --> 00:18:14,828 line:-1
are budgeted by the system.


312
00:18:15,195 --> 00:18:19,299 line:-2
Be efficient with how much processing
and networking your widget requires.


313
00:18:19,700 --> 00:18:22,803 line:-1
Widgets are not in every second operation.


314
00:18:22,870 --> 00:18:26,340 line:-2
Widgets are not about creating a live
running experience on the Home Screen.


315
00:18:27,808 --> 00:18:31,311 line:-2
There are many ways to drive reloads
to help keep your widget up to date.


316
00:18:31,812 --> 00:18:34,748 line:-2
Think through the right experience
for your kind of widget.


317
00:18:35,315 --> 00:18:37,518 line:-1
And keep in mind how to be efficient


318
00:18:37,584 --> 00:18:39,920 line:-2
with the different ways
to reload your timeline.


319
00:18:40,787 --> 00:18:45,092 line:-2
Lastly, let's talk about how to enable
your users to personalize your widget,


320
00:18:45,158 --> 00:18:46,226 line:-1
if it makes sense,


321
00:18:46,293 --> 00:18:48,862 line:-2
and help inform the intelligence
in the Stack.


322
00:18:50,264 --> 00:18:54,234 line:-2
Personalization and intelligence
are driven by two major concepts.


323
00:18:54,668 --> 00:18:59,640 line:-2
Intents, which are used as a mechanism
to allow a user to configure a widget,


324
00:18:59,706 --> 00:19:02,442 line:-2
and relevance,
which allows you, the developer,


325
00:19:02,509 --> 00:19:05,279 line:-1
to inform the intelligence in the Stack.


326
00:19:05,345 --> 00:19:08,482 line:-2
Intents are all powered
by the Intents framework.


327
00:19:08,916 --> 00:19:13,220 line:-2
Intents contain a set of parameters,
which are questions to ask the user.


328
00:19:14,521 --> 00:19:17,257 line:-2
For example,
Weather's configuration question


329
00:19:17,324 --> 00:19:19,860 line:-2
is the location
for which to return a forecast.


330
00:19:21,261 --> 00:19:25,332 line:-2
The Intents framework is already used
for integrating with Siri and Shortcuts.


331
00:19:25,399 --> 00:19:29,336 line:-2
And in iOS 14, it is now used
to power widget configuration.


332
00:19:30,838 --> 00:19:32,506 line:-1
Let's look at a concrete example.


333
00:19:33,073 --> 00:19:36,910 line:-2
The Stocks single symbol widget
asks someone which stock to show.


334
00:19:37,511 --> 00:19:39,813 line:-2
When the user tries to configure
the widget,


335
00:19:39,880 --> 00:19:44,284 line:-2
Intents can help answer this question
by allowing Stocks to return


336
00:19:44,351 --> 00:19:47,654 line:-2
the same list of stocks
that are presented in the Stocks app.


337
00:19:48,222 --> 00:19:51,892 line:-2
This is really powerful
and helps give your app the tools needed


338
00:19:51,959 --> 00:19:55,195 line:-2
to provide a great
configuration experience for your user.


339
00:19:56,864 --> 00:19:58,832 line:-1
Sometimes, though, that may not be enough.


340
00:19:59,433 --> 00:20:03,237 line:-2
What if someone wanted to show a Stock
that didn't already exist in the main app?


341
00:20:03,837 --> 00:20:08,375 line:-2
Well, thanks to the power of Intents,
we can drive this type of experience


342
00:20:08,442 --> 00:20:11,478 line:-2
using the Intents dynamic options
capability.


343
00:20:12,112 --> 00:20:15,048 line:-2
So, the user can search
in the configuration UI


344
00:20:15,115 --> 00:20:18,552 line:-2
and the system will fire up
the Stocks Intents Extension


345
00:20:18,619 --> 00:20:22,589 line:-2
which can then return a series of answers
in the form of stock symbols.


346
00:20:23,023 --> 00:20:27,828 line:-2
And new in iOS 14, Intents now support
in-app Intent handling


347
00:20:28,362 --> 00:20:30,597 line:-1
where your app can answer these questions.


348
00:20:32,566 --> 00:20:35,602 line:0
If you want more information
about in-app Intent handling,


349
00:20:35,669 --> 00:20:38,805 line:0
see the "What's New in SiriKit
and Shortcuts" talk.


350
00:20:38,872 --> 00:20:41,775 line:-2
Now, do you remember
that widget we defined earlier?


351
00:20:41,842 --> 00:20:44,444 line:-2
Here's how we change that
to support Intents.


352
00:20:45,312 --> 00:20:50,184 line:-2
Now, we specify an IntentConfiguration
instead of a StaticConfiguration,


353
00:20:50,250 --> 00:20:52,753 line:-1
and we specify an associated Intent.


354
00:20:53,854 --> 00:20:58,058 line:-2
Along the same lines,
here's that previous TimelineProvider


355
00:20:58,125 --> 00:21:03,230 line:-2
which now evolves into the provider
conforming to the IntentTimelineProvider.


356
00:21:04,298 --> 00:21:09,002 line:-2
You will be passed in an Intent object,
and based on the parameters in the Intent,


357
00:21:09,069 --> 00:21:11,238 line:-1
you can generate a specific timeline.


358
00:21:13,040 --> 00:21:16,810 line:-2
One of the coolest features of widgets
is not just having one widget,


359
00:21:16,877 --> 00:21:18,345 line:-1
but multiple in a Stack.


360
00:21:18,812 --> 00:21:22,282 line:-2
The system can intelligently rotate
the most relevant widget,


361
00:21:22,349 --> 00:21:25,719 line:-2
and your app and widget
can help feed this intelligence.


362
00:21:26,320 --> 00:21:28,188 line:-1
There are two primary ways to do so.


363
00:21:28,255 --> 00:21:32,960 line:-2
When users perform actions in your app,
your app can donate Shortcuts.


364
00:21:33,293 --> 00:21:36,063 line:-2
If your widget is backed by
the same INIntent,


365
00:21:36,129 --> 00:21:38,866 line:-2
then your widget may be rotated to
in the Stack


366
00:21:38,932 --> 00:21:41,435 line:-2
when the user would have typically
performed that action.


367
00:21:42,002 --> 00:21:44,705 line:-2
If you want to know more information,
I recommend checking out


368
00:21:44,771 --> 00:21:47,875 line:-2
the "Enable Widget Personalization
and Intelligence" talk.


369
00:21:47,941 --> 00:21:52,312 line:-2
Your widget extension also has the ability
to annotate timeline entries


370
00:21:52,379 --> 00:21:55,949 line:-2
with relevance values
via the TimelineEntryRelevance API.


371
00:21:56,450 --> 00:22:00,287 line:-2
When the time is appropriate, and you feel
your entry is the most relevant,


372
00:22:00,354 --> 00:22:03,290 line:-1
then you may return a score and duration


373
00:22:03,357 --> 00:22:06,860 line:-2
to inform the system
to rotate to your particular widget.


374
00:22:07,461 --> 00:22:09,630 line:-1
Score is a float value that you provide


375
00:22:09,696 --> 00:22:12,399 line:-2
relative to all entries
you have ever provided.


376
00:22:12,900 --> 00:22:16,970 line:-2
Duration is a time interval for when
that particular entry is relevant.


377
00:22:18,572 --> 00:22:20,574 line:-1
I want to make sure and stress this point.


378
00:22:20,641 --> 00:22:25,279 line:-2
This relevance value is relative
to all entries you have ever provided.


379
00:22:25,812 --> 00:22:29,983 line:-2
The system will take your relative values
and all other widgets' values


380
00:22:30,050 --> 00:22:33,287 line:-2
and determine the correct widget
to rotate to in the Stack.


381
00:22:35,689 --> 00:22:40,327 line:-2
Widgets are simple yet incredibly powerful
and we've only scratched the surface.


382
00:22:41,061 --> 00:22:42,963 line:-1
Widgets are not mini-apps,


383
00:22:43,030 --> 00:22:46,166 line:-2
so think through
a glanceable experience for your user


384
00:22:46,233 --> 00:22:50,737 line:-2
and use timelines,
the concept of reloads, and intelligence


385
00:22:50,804 --> 00:22:55,409 line:-2
to create the perfect experience
on iOS, iPadOS, and macOS.


386
00:22:56,677 --> 00:23:01,148 line:-2
On behalf of Nahir and myself,
we hope you have a great WWDC.


387
00:23:01,215 --> 00:23:03,217 line:-1
We can't wait to see what you'll build.

