1
00:00:00,167 --> 00:00:02,102 line:-1
[chimes]


2
00:00:03,904 --> 00:00:06,707 line:-1
Hello and welcome to WWDC.


3
00:00:08,775 --> 00:00:12,579 line:0
Hi, I'm Izzy. I'm an engineer
on the iOS System Experience team.


4
00:00:12,646 --> 00:00:13,981 line:0
Thanks for joining me.


5
00:00:14,047 --> 00:00:16,817 line:-2
Let's take a look
at what we will be covering today.


6
00:00:16,884 --> 00:00:20,220 line:-2
This is a code-along,
a new format for WWDC 2020.


7
00:00:20,287 --> 00:00:23,056 line:-2
We'll go over what that means
and how you can participate,


8
00:00:23,657 --> 00:00:26,627 line:-2
we'll cover the core concept
of what a widget is,


9
00:00:26,693 --> 00:00:29,162 line:-2
and then we'll build our first widget
together.


10
00:00:29,229 --> 00:00:30,931 line:-1
I'm excited. Let's get started.


11
00:00:32,131 --> 00:00:33,667 line:-1
This session is a code-along.


12
00:00:33,734 --> 00:00:36,703 line:-2
There's a project available
on the developer portal we'll start with,


13
00:00:36,770 --> 00:00:39,973 line:-2
and we will build a widget for it
from scratch together.


14
00:00:40,374 --> 00:00:42,176 line:-1
I invite you to start that download now,


15
00:00:42,242 --> 00:00:44,578 line:-2
and while that's going,
we'll cover a couple concepts.


16
00:00:45,412 --> 00:00:47,581 line:-1
What is a widget at its core?


17
00:00:48,582 --> 00:00:51,185 line:-2
A widget is just a SwiftUI view.
SwiftUI.


18
00:00:51,251 --> 00:00:54,922 line:-2
So it's the same declarative code
that generates gorgeous native views


19
00:00:54,988 --> 00:00:57,991 line:-1
on iOS, iPadOS, and macOS.


20
00:00:59,359 --> 00:01:02,429 line:-2
And it's a SwiftUI view
that updates over time.


21
00:01:02,496 --> 00:01:06,667 line:-2
Exactly how and when it updates is what
we'll be looking at in this code-along.


22
00:01:09,903 --> 00:01:12,573 line:-1
So, this is the download project.


23
00:01:14,074 --> 00:01:18,512 line:-2
We're in the first part of our code-along,
so let's open that project.


24
00:01:21,748 --> 00:01:25,385 line:-2
Before we get into the widget, let's build
and run this to see what we have.


25
00:01:32,526 --> 00:01:33,861 line:-1
This is the Emoji Rangers app.


26
00:01:33,927 --> 00:01:36,496 line:-2
It lets us keep track
of our favorite Emoji Rangers.


27
00:01:36,563 --> 00:01:39,233 line:-2
You can see we have Power Panda,
Spouty and Egghead.


28
00:01:39,299 --> 00:01:40,701 line:-1
Let's look at their details.


29
00:01:42,970 --> 00:01:46,440 line:-2
Here we see that our Emoji Rangers are
saving the world from waves of attacks.


30
00:01:46,507 --> 00:01:49,510 line:-2
Power Panda is recharging right now
but will be ready soon.


31
00:01:50,511 --> 00:01:52,813 line:-2
I've seen the keynote,
I've watched "Welcome to WidgetKit,"


32
00:01:52,880 --> 00:01:54,882 line:-2
and I'd really like a widget
for this game.


33
00:01:54,948 --> 00:01:57,150 line:-2
It looks like we have
the perfect view for it already.


34
00:01:57,217 --> 00:02:01,588 line:-2
The status square in the top left looks
ideal for a widget, so let's make it one.


35
00:02:03,090 --> 00:02:06,426 line:-2
Let's check out how this view
works in code first.


36
00:02:11,665 --> 00:02:13,300 line:-1
Here's our SwiftUI AvatarView.


37
00:02:13,367 --> 00:02:16,503 line:-2
If you're new to SwiftUI, widgets
are a perfect place to get started.


38
00:02:16,570 --> 00:02:20,340 line:-2
You can see we have just a few lines
of code to generate the widget we want,


39
00:02:20,407 --> 00:02:23,410 line:-2
and because we're expressing the layout
semantically with Stacks,


40
00:02:23,477 --> 00:02:26,613 line:-2
SwiftUI knows how to set the padding
just right for us.


41
00:02:26,680 --> 00:02:30,484 line:-2
You'll also notice on the right-hand side,
there's a SwiftUI preview,


42
00:02:30,551 --> 00:02:33,921 line:-2
which is a live representation overview
that updates as we type.


43
00:02:34,688 --> 00:02:39,059 line:-2
It kind of looks like a widget already.
Let's go ahead and make it one for real.


44
00:02:39,526 --> 00:02:42,062 line:-1
First, we need to create a widget target.


45
00:02:42,129 --> 00:02:47,234 line:-2
I do that by going to File, New, Target,
and search for a widget.


46
00:02:53,574 --> 00:02:55,809 line:-1
Let's name it "EmojiRanger Widget."


47
00:02:58,145 --> 00:02:59,513 line:-1
And finish.


48
00:03:01,081 --> 00:03:02,649 line:-1
Activate our target.


49
00:03:05,652 --> 00:03:09,423 line:-2
Now that we have our target, I know
we want that view from earlier in it,


50
00:03:09,489 --> 00:03:12,359 line:-2
and I'm going to add the files
that I want to the target.


51
00:03:24,238 --> 00:03:28,075 line:-2
SwiftUI previews work for widgets as well.
Let's take a look.


52
00:03:29,109 --> 00:03:33,413 line:-2
You can click the Create Preview
to automatically insert a preview for us,


53
00:03:33,480 --> 00:03:35,249 line:-1
and we can use that AvatarView.


54
00:03:45,993 --> 00:03:48,862 line:-2
In order to see
exactly what it'll look like as a widget,


55
00:03:48,929 --> 00:03:52,966 line:-2
we use the WidgetPreviewContext
as an argument to the previewContext.


56
00:04:15,055 --> 00:04:17,391 line:-2
That looks great.
It's almost like we already have a widget.


57
00:04:17,457 --> 00:04:20,427 line:-2
Making it real is just a matter
of filling in some information.


58
00:04:23,063 --> 00:04:25,766 line:-2
We have a DisplayName and a Description
that are easy to fill in.


59
00:04:39,246 --> 00:04:41,348 line:-1
Now let's look at our main EntryView...


60
00:04:43,016 --> 00:04:45,552 line:-1
the EmojiRangerWidgetEntryView.


61
00:04:45,619 --> 00:04:48,689 line:-2
Let's use that AvatarView,
which is what we previewed before.


62
00:04:51,992 --> 00:04:54,795 line:-2
Now,
it wants me to pass a character in here,


63
00:04:54,862 --> 00:04:57,064 line:-1
so where should that character come from?


64
00:04:57,731 --> 00:05:01,869 line:-2
The EmojiRangersWidgetEntryView
already comes with an entry,


65
00:05:02,469 --> 00:05:04,304 line:-1
so let's add it to the entry.


66
00:05:10,210 --> 00:05:13,080 line:-2
And now I can pass it directly
into my AvatarView.


67
00:05:17,017 --> 00:05:20,153 line:-1
But where does this entry come from?


68
00:05:20,521 --> 00:05:24,658 line:-2
Entries come from a timeline provider,
which is the core engine of a widget.


69
00:05:25,959 --> 00:05:30,364 line:-2
The timeline provider provides snapshots
when WidgetKit wants just one entry,


70
00:05:30,430 --> 00:05:34,168 line:-2
like in the Widget Gallery,
and it provides a full timeline


71
00:05:34,234 --> 00:05:37,804 line:-2
when the user has added
a configured widget to their device.


72
00:05:38,705 --> 00:05:41,975 line:-2
So here, for the snapshot,
all we need to do is pass a character.


73
00:05:42,976 --> 00:05:44,878 line:-1
We can pass our character in here.


74
00:05:48,115 --> 00:05:51,985 line:-2
Timeline is used once a user has actually
added a widget from the gallery.


75
00:05:52,052 --> 00:05:55,822 line:-2
We don't need a full timeline right now,
so let's just use one entry again.


76
00:06:04,264 --> 00:06:07,301 line:-2
Okay, that's great.
Let's build and run, and see what we have.


77
00:06:13,040 --> 00:06:14,308 line:-1
I built my widget target,


78
00:06:14,374 --> 00:06:17,878 line:-2
and it automatically added the widget
to my Home Screen for me.


79
00:06:18,445 --> 00:06:22,015 line:-2
We have a full widget now, but I noticed
some things I'd like to tweak.


80
00:06:22,082 --> 00:06:24,484 line:-1
First, in the Add sheet...


81
00:06:26,320 --> 00:06:30,757 line:-2
...our widget has a small, medium,
and large size.


82
00:06:31,391 --> 00:06:34,628 line:-2
These work okay, but it's not
the best use of space right now,


83
00:06:34,695 --> 00:06:36,697 line:-1
and I'm not ready to support those yet.


84
00:06:37,030 --> 00:06:39,199 line:-1
So let's set our supported families.


85
00:06:43,737 --> 00:06:47,007 line:-2
That's just an extra modifier
on our widget configuration.


86
00:06:53,847 --> 00:06:55,649 line:-1
One other thing you may have noticed


87
00:06:55,716 --> 00:06:58,619 line:-2
is that there's this PlaceholderView
in our template.


88
00:06:59,486 --> 00:07:02,155 line:-2
Our widget is so fast
that we can't actually see it,


89
00:07:02,222 --> 00:07:05,559 line:-2
but this is what shows up
while WidgetKit is waiting on a timeline.


90
00:07:05,893 --> 00:07:07,494 line:-1
We want it to be our AvatarView,


91
00:07:07,561 --> 00:07:10,297 line:-2
and we can preview what that looks like
with SwiftUI previews.


92
00:07:11,231 --> 00:07:12,799 line:-1
Let's make it our AvatarView.


93
00:07:13,834 --> 00:07:17,404 line:-2
There's no entry for the PlaceholderView,
so we can pass in Panda again.


94
00:07:19,072 --> 00:07:20,807 line:-1
And now in our preview...


95
00:07:23,010 --> 00:07:25,812 line:-1
we can make this a group...


96
00:07:30,417 --> 00:07:32,186 line:-1
and we can add in our placeholder.


97
00:07:44,131 --> 00:07:46,166 line:-1
Now we have two views that look the same,


98
00:07:46,233 --> 00:07:50,337 line:-2
but we want our placeholder to indicate
pending content, not our actual content.


99
00:07:51,305 --> 00:07:55,776 line:-2
So there's new SwiftUI API
that makes this super easy.


100
00:07:55,843 --> 00:07:59,046 line:-1
It's just the isPlaceholder modifier.


101
00:08:03,584 --> 00:08:05,385 line:-1
Now you can see in our previews,


102
00:08:05,586 --> 00:08:09,623 line:-1
we have our full widget and a placeholder


103
00:08:09,690 --> 00:08:13,660 line:-2
with our text automatically replaced
with gray, rounded rectangles,


104
00:08:13,727 --> 00:08:16,730 line:-2
and our image
is automatically replaced as well.


105
00:08:18,298 --> 00:08:19,533 line:-1
Amazing.


106
00:08:21,768 --> 00:08:24,338 line:0
Let's take one last look
at our new widget.


107
00:08:26,106 --> 00:08:27,708 line:-1
Here's our Emoji Rangers app.


108
00:08:28,842 --> 00:08:30,844 line:-1
Now when I go to the Widget Gallery,


109
00:08:31,345 --> 00:08:36,850 line:-2
I can see the single supported size,
and I can add it right on my Home Screen.


110
00:08:37,351 --> 00:08:38,352 line:-1
Perfect.


111
00:08:39,086 --> 00:08:41,221 line:0
For insight
on how to approach widget design,


112
00:08:41,288 --> 00:08:45,058 line:0
see the "Designing Great Widgets" talk,
and my teammate Nils is giving a talk


113
00:08:45,125 --> 00:08:49,029 line:0
about how to make the most of SwiftUI
and widgets to really nail those designs.


114
00:08:49,096 --> 00:08:52,432 line:0
I'd also love for you to join me
in the next section of this code-along.


115
00:08:52,900 --> 00:08:55,569 line:-2
Thanks for joining me,
and have a great WWDC.


116
00:08:56,270 --> 00:08:58,539 line:-1
[chimes]

