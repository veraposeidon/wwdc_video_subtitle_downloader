1
00:00:03,904 --> 00:00:06,406 line:-1
Hello and welcome to WWDC.


2
00:00:09,243 --> 00:00:11,545 line:0
Welcome, everyone.
My name is David Hayward,


3
00:00:11,612 --> 00:00:13,680 line:0
and I'll be giving
a short presentation today


4
00:00:13,747 --> 00:00:17,217 line:0
that will show you some powerful
Core Image debugging techniques.


5
00:00:17,284 --> 00:00:19,953 line:0
This debugging feature
will give you new insights


6
00:00:20,020 --> 00:00:22,956 line:0
on how Core Image works
in your application.


7
00:00:23,023 --> 00:00:27,327 line:-2
The debugging feature I will describe
in detail is called CI_PRINT_TREE.


8
00:00:27,394 --> 00:00:30,964 line:-2
In this presentation,
I will tell you what CI_PRINT_TREE is,


9
00:00:31,965 --> 00:00:34,635 line:-2
how to enable and control it
in your application,


10
00:00:35,402 --> 00:00:39,339 line:-2
and then I will demonstrate how to get
and interpret the files it produces.


11
00:00:40,541 --> 00:00:43,443 line:-2
So, let's get started with,
what is CI_PRINT_TREE?


12
00:00:43,510 --> 00:00:45,646 line:-1
It is based on the same infrastructure


13
00:00:45,712 --> 00:00:48,916 line:-2
that gives Core Image Quick Look support
in Xcode.


14
00:00:49,449 --> 00:00:53,187 line:-2
This gives developers immediate
visualization of Core Image graphs...


15
00:00:54,788 --> 00:00:57,858 line:-2
and it is beautifully integrated
into the Xcode debugger.


16
00:00:59,426 --> 00:01:01,228 line:-1
Let me show you how this works.


17
00:01:01,295 --> 00:01:04,831 line:-2
Imagine you were debugging some code
that creates a filter,


18
00:01:05,098 --> 00:01:08,802 line:-2
sets its input properties, and then gets
its output image property.


19
00:01:10,604 --> 00:01:14,174 line:-2
If while debugging,
you hover over a CI image variable,


20
00:01:14,241 --> 00:01:17,411 line:-2
a small popover will appear
that shows the object's address.


21
00:01:18,111 --> 00:01:21,882 line:-2
Then if you click on the small eye symbol,
a new window will appear


22
00:01:21,949 --> 00:01:26,119 line:-2
that shows a visual representation
of the recipe that makes the image.


23
00:01:26,820 --> 00:01:29,623 line:-2
But Quick Look of images
is just the beginning.


24
00:01:30,257 --> 00:01:32,893 line:-2
CI_PRINT_TREE
is a flexible environment variable


25
00:01:32,960 --> 00:01:34,962 line:-1
with several modes and operations...


26
00:01:36,063 --> 00:01:40,567 line:-2
which allows you to see how Core Image
optimizes and renders images.


27
00:01:41,268 --> 00:01:44,805 line:-2
The first thing you'll need to know
is how to enable CI_PRINT_TREE.


28
00:01:45,506 --> 00:01:49,109 line:-2
There are two ways to enable
the CI_PRINT_TREE environment variable.


29
00:01:49,676 --> 00:01:53,213 line:-2
The most common
is to edit your Xcode target scheme.


30
00:01:53,847 --> 00:01:57,751 line:-2
Go to the arguments pane and add it
to the Environment Variable list.


31
00:01:59,253 --> 00:02:03,223 line:-2
You can also enable CI_PRINT_TREE
environment variable in Terminal.app


32
00:02:03,290 --> 00:02:06,827 line:-2
by setting it before launching
your application's executable.


33
00:02:08,495 --> 00:02:11,598 line:-2
The next thing you will need to know
is how to control CI_PRINT_TREE.


34
00:02:13,200 --> 00:02:16,436 line:-2
The value of CI_PRINT_TREE
is a string of this form:


35
00:02:16,970 --> 00:02:20,707 line:-1
A <graph type>, an <output type> and <options>.


36
00:02:20,774 --> 00:02:24,144 line:-2
I will describe what each part does
in the following slides.


37
00:02:26,480 --> 00:02:30,184 line:-2
Graph types represent the three stages
of a Core Image render.


38
00:02:30,884 --> 00:02:35,222 line:-2
Specify type one if you want to see
the initial state of each image render.


39
00:02:35,822 --> 00:02:39,693 line:-2
This is useful for seeing, among
other things, what color spaces are used.


40
00:02:40,594 --> 00:02:44,631 line:-2
Specify type two if you want to see
how Core Image optimizes a render.


41
00:02:45,399 --> 00:02:49,002 line:-2
This is useful for seeing how Core Image
reorders, combines,


42
00:02:49,069 --> 00:02:51,538 line:-1
and prunes the stages of each render.


43
00:02:53,240 --> 00:02:55,375 line:-1
And specify type four if you want to see


44
00:02:55,442 --> 00:02:58,879 line:-2
how Core Image concatenates the stages
into GPU programs.


45
00:02:59,746 --> 00:03:03,750 line:-2
This is useful for seeing how many
intermediate buffers each render requires.


46
00:03:05,786 --> 00:03:08,088 line:0
Lastly, the above values can be combined.


47
00:03:08,155 --> 00:03:13,360 line:0
So, for example, specifying seven
will print graphs one, two and four.


48
00:03:13,427 --> 00:03:16,196 line:-1
Output type can be either PDF or PNG.


49
00:03:17,297 --> 00:03:19,867 line:-2
If you specify "either,"
then for every render,


50
00:03:19,933 --> 00:03:22,402 line:-2
Core Image will save the tree
as a document.


51
00:03:22,936 --> 00:03:27,140 line:-2
On macOS, the documents will be saved
to the temporary items directory.


52
00:03:27,207 --> 00:03:30,344 line:-2
On iOS, they will be saved
to the documents directory,


53
00:03:30,410 --> 00:03:32,913 line:-2
and if that's not possible,
the temporary directory.


54
00:03:34,114 --> 00:03:38,118 line:-2
If output type is not specified,
then Core Image will output the tree


55
00:03:38,185 --> 00:03:41,421 line:-2
in a compact text only format
to standard out.


56
00:03:42,256 --> 00:03:45,125 line:-2
You can also have the text go
to Console.app


57
00:03:45,192 --> 00:03:48,862 line:-1
by setting CI_LOG_FILE="oslog".


58
00:03:49,329 --> 00:03:52,266 line:-2
This can be more convenient
when developing for iOS.


59
00:03:52,699 --> 00:03:56,603 line:-2
Lastly, you can also specify
a variety of additional options.


60
00:03:57,070 --> 00:04:00,240 line:-2
Using "context==name"
will limit the output


61
00:04:00,307 --> 00:04:04,411 line:-2
so only the output
for a specific named CI context is logged.


62
00:04:05,646 --> 00:04:08,982 line:-2
Similarly, frame-number
will limit the output


63
00:04:09,049 --> 00:04:12,519 line:-2
so that only the nth render
of each context is logged.


64
00:04:14,855 --> 00:04:19,059 line:-2
There are also options that request
that the inputs, intermediates


65
00:04:19,125 --> 00:04:22,496 line:-2
and output images
be included in the documents.


66
00:04:23,330 --> 00:04:26,667 line:-2
These options can provide
very useful debugging information,


67
00:04:26,733 --> 00:04:28,302 line:-1
but they should be used with caution


68
00:04:28,368 --> 00:04:32,239 line:-2
because they increase the time and memory
to produce the documents.


69
00:04:32,306 --> 00:04:36,043 line:-2
The next thing you will need to know
is how to get the CI_PRINT_TREE files.


70
00:04:37,044 --> 00:04:38,979 line:-1
On macOS, this is very easy.


71
00:04:39,046 --> 00:04:41,615 line:-2
You just need to go
to the temporary directory,


72
00:04:42,149 --> 00:04:44,952 line:-2
and there you will find
the documents made by Core Image.


73
00:04:45,719 --> 00:04:49,556 line:-2
Note that sandboxed applications
will have a unique temporary directory.


74
00:04:49,823 --> 00:04:53,861 line:-2
To make getting the files just as easy
when debugging your iOS application,


75
00:04:53,927 --> 00:04:56,296 line:-2
there is one important setting
you should use.


76
00:04:57,464 --> 00:05:00,934 line:-2
Go to your app's
Custom iOS Target Properties.


77
00:05:01,335 --> 00:05:03,370 line:-1
Once there, you should make sure


78
00:05:03,437 --> 00:05:07,708 line:-2
the application supports iTunes
file sharing key as the value "yes."


79
00:05:09,409 --> 00:05:13,447 line:-2
With this setting, all you need to do
is connect your iOS device,


80
00:05:13,514 --> 00:05:16,783 line:-2
select the finders sidebar
and go to the files pane.


81
00:05:17,618 --> 00:05:20,287 line:-2
Once there,
you can see your application's documents


82
00:05:20,354 --> 00:05:22,155 line:-1
and then drag them to your Mac's drive.


83
00:05:23,023 --> 00:05:24,625 line:-1
The next thing you'll need to know


84
00:05:24,691 --> 00:05:26,927 line:-2
is how to interpret
the CI_PRINT_TREE files.


85
00:05:28,495 --> 00:05:31,698 line:-2
Here are some tips for how to read
the CI_PRINT_TREE documents.


86
00:05:32,966 --> 00:05:36,503 line:-2
Firstly, inputs are at the bottom,
and output is at the top.


87
00:05:38,105 --> 00:05:43,110 line:-2
Green nodes represent warp kernels,
and red nodes represent color kernels.


88
00:05:44,811 --> 00:05:48,649 line:-2
It is easy to look for colormatch nodes
in the graph in the initial tree.


89
00:05:49,383 --> 00:05:51,685 line:-2
Here you can see the name
of the colorspace.


90
00:05:52,085 --> 00:05:56,690 line:-2
In this case, the input image
is colormatched from the HLG colorspace


91
00:05:56,757 --> 00:05:59,026 line:-1
to the Core Image linear working space.


92
00:05:59,960 --> 00:06:04,565 line:-2
Every node also displays its ROI,
which stands for "region of interest."


93
00:06:05,399 --> 00:06:09,136 line:-2
This shows the area of each node
that was needed for this render.


94
00:06:10,938 --> 00:06:15,108 line:-2
If you use 4 and dump-intermediates,
then the concatenated graph document


95
00:06:15,175 --> 00:06:18,946 line:-2
will show the intermediate buffers
for every pass but the output pass.


96
00:06:19,580 --> 00:06:22,616 line:-2
This can be very helpful
to track down where in the render


97
00:06:22,683 --> 00:06:24,251 line:-1
an error was introduced.


98
00:06:25,018 --> 00:06:27,254 line:-2
If you don't see an intermediate image
in the tree,


99
00:06:27,321 --> 00:06:29,122 line:-1
then Core Image did not need to render it


100
00:06:29,189 --> 00:06:31,558 line:-2
because it was cached
from an earlier render.


101
00:06:34,394 --> 00:06:38,966 line:-2
And if you look closely, the document can
show you the execution time of each pass


102
00:06:39,032 --> 00:06:42,669 line:-2
as well as the pixel count
and pixel format of each intermediate.


103
00:06:43,170 --> 00:06:45,138 line:-1
This can be useful to help you understand


104
00:06:45,205 --> 00:06:48,442 line:-2
which passes are using the most time
and memory.


105
00:06:49,776 --> 00:06:52,045 line:-2
So that concludes
my step-by-step description


106
00:06:52,112 --> 00:06:55,782 line:-2
of how to use CI_PRINT_TREE
as a Core Image debugging technique.


107
00:06:55,849 --> 00:06:59,052 line:-2
I hope that this allows you
to further understand and improve


108
00:06:59,119 --> 00:07:02,789 line:-2
the visual effects
in your applications, images and videos.


109
00:07:02,856 --> 00:07:06,827 line:-2
Thank you very much,
and enjoy the rest of WWDC 2020.

