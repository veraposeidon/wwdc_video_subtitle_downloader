1
00:00:03,836 --> 00:00:06,507 line:-1
Hello and welcome to WWDC.


2
00:00:08,408 --> 00:00:13,280 line:0
Hello and welcome. I'm Eric Dudiak,
an engineer on the UIKit team.


3
00:00:13,347 --> 00:00:15,582 line:0
And I'll be joined by David Duncan.


4
00:00:16,350 --> 00:00:18,785 line:-2
We're going to be talking about
some great new features of UIKit


5
00:00:18,852 --> 00:00:22,089 line:-2
with a focus
on standard controls and menus.


6
00:00:22,589 --> 00:00:24,057 line:-1
So, let's get started.


7
00:00:24,525 --> 00:00:25,893 line:-1
Here's a quick overview


8
00:00:25,959 --> 00:00:28,529 line:-2
of what we're going to be covering
in this session.


9
00:00:29,363 --> 00:00:33,467 line:-2
We'll take a brief look at some of
the recent changes in control appearances.


10
00:00:34,067 --> 00:00:37,604 line:-2
After that, we'll go over
the new color picker and how to use it.


11
00:00:38,539 --> 00:00:42,142 line:-2
Then we'll take a look
at the updated date picker.


12
00:00:42,843 --> 00:00:46,847 line:-2
We'll also look at how menus have changed
and added more options.


13
00:00:47,481 --> 00:00:50,884 line:-2
Finally, we'll go over improvements
around UIActions


14
00:00:50,951 --> 00:00:53,654 line:-1
that can significantly simplify your code.


15
00:00:54,688 --> 00:00:58,258 line:-2
So let's get started with the appearance
updates to some common controls,


16
00:00:58,325 --> 00:01:01,428 line:-1
and these apply across iOS and iPadOS,


17
00:01:01,495 --> 00:01:04,765 line:-2
in both UIKit
and their SwiftUI counterparts.


18
00:01:06,733 --> 00:01:10,637 line:-2
UISlider and UIProgressView
have both received minor updates


19
00:01:10,704 --> 00:01:14,341 line:-2
to make them more consistent
across all of the platforms.


20
00:01:15,409 --> 00:01:19,746 line:-2
First, you'll notice the thickness
of the track has been increased,


21
00:01:19,813 --> 00:01:22,416 line:-2
bringing the appearance
more in line with macOS.


22
00:01:23,083 --> 00:01:28,288 line:-2
Along with the appearance changes,
UISlider now adopts the macOS behavior


23
00:01:28,355 --> 00:01:32,492 line:-2
of being able to tap or click on the track
to adjust the value.


24
00:01:34,261 --> 00:01:37,364 line:-2
Here we see the matching visual change
on UIProgressView.


25
00:01:38,565 --> 00:01:43,170 line:-2
When using these and other UIKit controls
in an optimized Catalyst app,


26
00:01:43,237 --> 00:01:46,540 line:-2
they will further adopt
the macOS appearance.


27
00:01:47,241 --> 00:01:52,246 line:-2
This further adoption will limit some of
the customization APIs of these controls,


28
00:01:52,312 --> 00:01:53,947 line:-1
and they will have no effect.


29
00:01:54,681 --> 00:01:56,884 line:-2
For more information
about the considerations


30
00:01:56,950 --> 00:01:58,752 line:-1
when making an optimized Catalyst app,


31
00:01:59,253 --> 00:02:03,624 line:0
check out the "Optimize the Interface
of your Mac Catalyst App" session.


32
00:02:04,992 --> 00:02:07,427 line:-2
The next control
to receive an appearance update


33
00:02:07,494 --> 00:02:09,530 line:-1
is UIActivityIndicatorView.


34
00:02:10,364 --> 00:02:15,636 line:-2
The new design features fewer petals
and is consistent across all sizes,


35
00:02:15,702 --> 00:02:18,472 line:-2
along with some timing adjustments
on the animation.


36
00:02:19,373 --> 00:02:23,277 line:-2
Now, it is important to always use
the built-in UIActivityIndicatorView


37
00:02:23,343 --> 00:02:25,412 line:-1
when showing indeterminate progress.


38
00:02:25,479 --> 00:02:27,414 line:-1
This ensures consistency.


39
00:02:27,481 --> 00:02:30,184 line:-2
Now, to ensure it works
in all possible scenarios,


40
00:02:30,250 --> 00:02:33,120 line:-2
use the modern styles
that adjust for Dark Mode


41
00:02:33,187 --> 00:02:36,924 line:-2
and optionally allow
setting a custom color via the API.


42
00:02:38,258 --> 00:02:42,496 line:-2
Similar appearance changes have also
been made in the pull-to-refresh control.


43
00:02:44,231 --> 00:02:48,202 line:-2
And here we see the optimized
Mac Catalyst version of these


44
00:02:48,268 --> 00:02:50,804 line:-1
and a few other standard controls.


45
00:02:50,871 --> 00:02:53,974 line:-2
Notice that they match the appearance
of standard Mac controls.


46
00:02:56,176 --> 00:02:59,646 line:-2
UIPickerView has also received an update
in its appearance.


47
00:02:59,713 --> 00:03:05,919 line:-2
It should be noted, however, that menus
may be an appropriate replacement


48
00:03:05,986 --> 00:03:07,721 line:-1
in many contexts.


49
00:03:07,788 --> 00:03:10,123 line:-2
We'll discuss them a little bit later
in this session.


50
00:03:10,757 --> 00:03:15,596 line:-2
On Catalyst apps on macOS,
menus are almost always the best choice


51
00:03:15,662 --> 00:03:18,899 line:-2
when you're presenting a selection
from a number of choices.


52
00:03:20,167 --> 00:03:23,437 line:-2
The last control we'll go over
is UIPageControl.


53
00:03:23,504 --> 00:03:25,672 line:-2
Now, it has received both
appearance changes


54
00:03:25,739 --> 00:03:27,708 line:-1
and some functional changes.


55
00:03:27,774 --> 00:03:32,579 line:-2
The new appearance allows the page control
to support an unlimited number of pages


56
00:03:32,646 --> 00:03:34,248 line:-1
within a fixed size.


57
00:03:35,649 --> 00:03:39,219 line:-2
Now when the number of pages
exceed the space available,


58
00:03:39,286 --> 00:03:43,223 line:-2
the control allows for the scrubbing
and scrolling of those pages,


59
00:03:43,290 --> 00:03:46,293 line:-2
making the control more ideal
for scenarios


60
00:03:46,360 --> 00:03:49,997 line:-2
where user customization
may dictate the number of pages,


61
00:03:50,063 --> 00:03:51,632 line:-1
such as on the Home Screen.


62
00:03:52,366 --> 00:03:57,838 line:-2
Additionally, the page control features
new API to customize its appearance.


63
00:03:59,840 --> 00:04:03,710 line:-2
The indicators themselves
can now be set to custom images


64
00:04:03,777 --> 00:04:07,514 line:-2
either for individual pages
or all of the pages.


65
00:04:08,081 --> 00:04:11,552 line:-2
This can be useful if a certain page
has a special function,


66
00:04:11,618 --> 00:04:14,188 line:-2
such as the first page
in the Weather app shown here,


67
00:04:14,254 --> 00:04:17,024 line:-2
which shows the current location icon
for the weather.


68
00:04:19,159 --> 00:04:23,397 line:-2
The presentation and interaction
of the control can also be customized,


69
00:04:23,463 --> 00:04:26,934 line:-2
such as setting the control to display
in a more prominent mode


70
00:04:27,000 --> 00:04:29,503 line:-2
when it is the main control
of an interface.


71
00:04:30,404 --> 00:04:33,607 line:-2
So, let's take a look at
how we use these customizations.


72
00:04:34,341 --> 00:04:36,810 line:-2
Here we go ahead
and create our pageControl.


73
00:04:38,111 --> 00:04:40,848 line:-2
We can then set the backgroundStyle
to prominent,


74
00:04:40,914 --> 00:04:43,884 line:-2
so that it'll stand out better
in the context of our app.


75
00:04:44,518 --> 00:04:46,787 line:-2
This will make the background area
always show,


76
00:04:46,854 --> 00:04:49,523 line:-2
instead of just
when we're interacting with it.


77
00:04:50,791 --> 00:04:54,127 line:-2
We can also set the default image
for all the indicators


78
00:04:54,194 --> 00:04:56,630 line:-1
if we don't want the normal circles.


79
00:04:57,164 --> 00:04:59,199 line:-1
In this case, setting the bookmark image


80
00:04:59,266 --> 00:05:02,102 line:-2
for a case where we are browsing
pages of bookmarks.


81
00:05:03,704 --> 00:05:06,840 line:-2
We can also further customize
individual pages.


82
00:05:07,574 --> 00:05:10,577 line:-2
Here we're doing that
with the heart image on the first page


83
00:05:10,644 --> 00:05:12,880 line:-1
to indicate that it is for favorites.


84
00:05:13,747 --> 00:05:16,350 line:-2
All of the other API surface
of the pageControl


85
00:05:16,416 --> 00:05:18,485 line:-1
remains completely unchanged.


86
00:05:19,653 --> 00:05:24,424 line:-2
Next up, let's take a look
at the new color picker in iOS 14.


87
00:05:25,626 --> 00:05:28,428 line:-2
For those already familiar
with the macOS color panel,


88
00:05:28,495 --> 00:05:33,467 line:-2
the new color picker in iPadOS and iOS 14
will feel very similar.


89
00:05:33,967 --> 00:05:36,970 line:-2
The color picker is a view controller
that can be easily presented


90
00:05:37,037 --> 00:05:39,873 line:-2
as a sheet or popover
from your application.


91
00:05:40,607 --> 00:05:42,843 line:-1
In addition to typical delegate callbacks,


92
00:05:42,910 --> 00:05:46,713 line:-2
it has a color property that can be set
and read to configure it.


93
00:05:47,447 --> 00:05:48,749 line:-1
Once presented,


94
00:05:48,815 --> 00:05:51,785 line:-2
it allows selecting a color
through a number of different methods,


95
00:05:51,852 --> 00:05:53,987 line:-1
such as picking from a grid...


96
00:05:55,222 --> 00:05:58,158 line:-2
selecting a color from
the entire spectrum gradient


97
00:05:58,725 --> 00:06:04,331 line:-2
or manually specifying an exact color
with red, green and blue components.


98
00:06:04,765 --> 00:06:06,900 line:-1
Or even a hexadecimal code.


99
00:06:07,801 --> 00:06:10,437 line:-2
Frequently used colors
can also be favorited


100
00:06:10,504 --> 00:06:12,906 line:-1
and reused across applications.


101
00:06:12,973 --> 00:06:16,844 line:-2
So Pro Apps can allow users
to easily select something important,


102
00:06:16,910 --> 00:06:20,547 line:-2
like a brand color, in one context,
and use it in many.


103
00:06:21,181 --> 00:06:23,817 line:-1
Finally, just like the macOS panel,


104
00:06:23,884 --> 00:06:27,487 line:-2
the color picker supports grabbing colors
from anywhere on the screen


105
00:06:27,554 --> 00:06:28,856 line:-1
using an eyedropper tool.


106
00:06:30,190 --> 00:06:34,294 line:-2
This is especially powerful on iPadOS
when running multiple apps.


107
00:06:35,028 --> 00:06:38,699 line:-2
The color can be easily selected
anywhere on the screen,


108
00:06:38,765 --> 00:06:41,568 line:-1
matched and then reused.


109
00:06:43,403 --> 00:06:47,508 line:-2
On macOS, the picker uses
the standard color picker panel,


110
00:06:47,908 --> 00:06:50,978 line:-1
allowing the same familiar functionality.


111
00:06:52,012 --> 00:06:55,349 line:-2
So, let's take a look at setting up
and using the color picker.


112
00:06:56,116 --> 00:06:58,886 line:-2
In this case, we have
a ColorPickerViewController property


113
00:06:58,952 --> 00:07:00,954 line:-1
on our existing viewController.


114
00:07:01,922 --> 00:07:03,891 line:-1
When the color button is pressed,


115
00:07:03,957 --> 00:07:06,994 line:-2
we go ahead and set the color
on the viewController


116
00:07:07,394 --> 00:07:08,929 line:-1
to the current color being used


117
00:07:08,996 --> 00:07:11,665 line:-2
and then present
the ColorPickerViewController.


118
00:07:13,100 --> 00:07:16,870 line:-2
If the user finishes selecting a color,
we go ahead and set it in the app.


119
00:07:17,905 --> 00:07:22,009 line:-2
If the user canceled selecting a color,
we can safely ignore the color.


120
00:07:22,075 --> 00:07:26,246 line:-2
At no point do we have to worry
about how the color was selected


121
00:07:26,313 --> 00:07:28,015 line:-1
or supporting the eyedropper tool.


122
00:07:28,615 --> 00:07:31,652 line:-2
All of that is handled automatically
by the color picker.


123
00:07:33,153 --> 00:07:36,823 line:-2
The date picker in iOS and iPadOS
is not a new control,


124
00:07:37,291 --> 00:07:39,760 line:-2
but we have made
some really big improvements


125
00:07:39,826 --> 00:07:42,629 line:-2
to the versatility
and user experience of it.


126
00:07:43,897 --> 00:07:46,867 line:-1
New in iPadOS and iOS 14,


127
00:07:46,934 --> 00:07:49,736 line:-2
the compact style
is available and supported.


128
00:07:50,270 --> 00:07:52,840 line:-2
Just like the macOS version
introduced earlier,


129
00:07:52,906 --> 00:07:56,977 line:-2
the compact style in iOS
shows the time and date


130
00:07:57,044 --> 00:08:00,347 line:-2
as fields that can be tapped
to bring up a modal selection.


131
00:08:01,715 --> 00:08:05,319 line:-2
This is especially useful
when space is limited in the UI,


132
00:08:05,385 --> 00:08:08,722 line:-2
such as in a table view
or form with several fields.


133
00:08:09,356 --> 00:08:12,926 line:-2
When selecting from the date side,
a modal calendar is displayed


134
00:08:12,993 --> 00:08:16,196 line:-2
allowing for the easy selection
of any given day.


135
00:08:17,197 --> 00:08:20,567 line:-2
This also allows for far more rapid
selection of distant dates


136
00:08:20,634 --> 00:08:22,703 line:-1
than the traditional wheel styles allowed


137
00:08:22,769 --> 00:08:26,440 line:-2
and is better optimized
for pointer interaction on an iPad.


138
00:08:27,074 --> 00:08:28,709 line:-1
When tapping on the time,


139
00:08:28,775 --> 00:08:31,778 line:-2
the keypad is used
for selection of the time.


140
00:08:33,313 --> 00:08:37,551 line:-2
As mentioned earlier, the compact style
is supported on macOS Catalina


141
00:08:37,618 --> 00:08:41,554 line:-1
and later in the iOS 13.4 SDK and newer.


142
00:08:42,155 --> 00:08:45,526 line:-2
This can help make your optimized
or unoptimized Catalyst app


143
00:08:45,592 --> 00:08:48,262 line:-2
better support showing a date picker
on a Mac.


144
00:08:48,729 --> 00:08:52,966 line:-2
When using it, the date picker control
is sized similarly to a UILabel.


145
00:08:53,767 --> 00:08:55,469 line:-1
Clicking on components of the date


146
00:08:55,536 --> 00:08:59,273 line:-2
bring up a modal calendar presentation
for selecting the date.


147
00:08:59,339 --> 00:09:03,010 line:-2
The date and time can also be set
by typing in values to the field.


148
00:09:03,076 --> 00:09:06,780 line:-2
Additionally, if only the time
or only the date are required


149
00:09:06,847 --> 00:09:07,915 line:-1
for a given context,


150
00:09:07,981 --> 00:09:11,218 line:-2
the app can limit the picker
to just that part of the field.


151
00:09:11,718 --> 00:09:16,957 line:-2
Additionally, iOS 14 introduces
the inline style for the date picker.


152
00:09:17,591 --> 00:09:21,195 line:-2
This is particularly useful
in circumstances where selecting a date


153
00:09:21,261 --> 00:09:23,297 line:-1
is the primary function of a UI


154
00:09:23,897 --> 00:09:26,934 line:-2
and the addition of the modal step
is simply unnecessary.


155
00:09:27,668 --> 00:09:31,238 line:-2
This can be useful on iPad apps
migrating from the wheel style


156
00:09:31,305 --> 00:09:33,740 line:-2
where more screen space
is readily available.


157
00:09:34,775 --> 00:09:37,711 line:-2
The presentation itself matches that
of the modal one


158
00:09:37,778 --> 00:09:39,780 line:-1
presented from the compact style,


159
00:09:40,180 --> 00:09:43,984 line:-2
just filling the contents of the control
rather than being presented from it.


160
00:09:44,985 --> 00:09:47,321 line:-1
The great part about all three new styles


161
00:09:47,721 --> 00:09:52,226 line:-2
is that all the API of UIDatePicker
remains exactly the same.


162
00:09:52,292 --> 00:09:55,395 line:-2
So the new styles can be easily adopted
or even adjusted,


163
00:09:55,462 --> 00:09:57,231 line:-1
depending on the context,


164
00:09:57,297 --> 00:10:00,067 line:-2
with only the layout of the app
being affected.


165
00:10:00,601 --> 00:10:02,970 line:-2
So now let's take a look
at using these new styles.


166
00:10:03,604 --> 00:10:06,907 line:-2
Here we see creating a date picker
and setting the initial date


167
00:10:06,974 --> 00:10:09,042 line:-1
has not changed at all on iOS 14.


168
00:10:09,943 --> 00:10:12,746 line:-2
We can also set minimum and maximum dates
for the selection.


169
00:10:13,580 --> 00:10:17,251 line:-2
All we have to do to use one of the
new styles is just set a preferred one.


170
00:10:17,317 --> 00:10:19,553 line:-2
And here we'll set that to
the compact style.


171
00:10:21,622 --> 00:10:26,527 line:-2
We can also customize the locale and
calendar of the date picker if necessary.


172
00:10:26,593 --> 00:10:29,830 line:-2
And the new styles will show
the appropriate content.


173
00:10:29,897 --> 00:10:32,432 line:-2
In this case,
we'll show the Japanese calendar.


174
00:10:33,233 --> 00:10:36,737 line:-2
And we can see how the era is now
displayed where the year was previously.


175
00:10:38,405 --> 00:10:41,141 line:-2
We can also limit the selection
to just the date


176
00:10:41,208 --> 00:10:43,443 line:-2
if the time isn't relevant
to this context.


177
00:10:45,112 --> 00:10:47,648 line:-1
The date picker is still just a UIControl.


178
00:10:47,714 --> 00:10:50,784 line:-2
So it's easy to be notified
when the value has changed


179
00:10:50,851 --> 00:10:52,219 line:-1
and then read in the new date.


180
00:10:52,953 --> 00:10:55,522 line:-2
The new date picker styles provide
an improved experience


181
00:10:55,589 --> 00:10:57,558 line:-1
when selecting dates in an application


182
00:10:57,624 --> 00:11:00,961 line:-2
without the application having to handle
many of the inherent complexities


183
00:11:01,028 --> 00:11:05,232 line:-2
of different calendars or interactions
across platforms.


184
00:11:06,266 --> 00:11:09,236 line:-2
Now I'd like to hand it over
to my colleague, David Duncan.


185
00:11:09,303 --> 00:11:10,704 line:-1
Thanks, Eric.


186
00:11:10,771 --> 00:11:11,939 line:-1
I'm David Duncan,


187
00:11:12,005 --> 00:11:15,742 line:-2
and I'm going to talk about enhancements
to menus and UIAction.


188
00:11:15,809 --> 00:11:20,848 line:-2
Let's start with how iOS 14 brings quick,
lightweight interactions with menus


189
00:11:20,914 --> 00:11:22,549 line:-1
to more parts of your UI.


190
00:11:23,317 --> 00:11:29,423 line:0
Any app in iOS 14 can easily add menus
to UIButtons and UIBarButtonItems.


191
00:11:30,557 --> 00:11:36,330 line:0
This example shows how Safari uses menus
to put more power at your fingertips.


192
00:11:36,396 --> 00:11:38,098 line:0
Let's dive into this interaction.


193
00:11:39,766 --> 00:11:43,770 line:-2
Tapping on the tab switch button
performs the default action,


194
00:11:43,837 --> 00:11:45,439 line:-1
showing the Safari tab switcher.


195
00:11:47,007 --> 00:11:52,946 line:0
On iOS 14, long pressing on this button
presents a menu with more options.


196
00:11:53,714 --> 00:11:58,018 line:0
Immediately, you can slide your finger
to select an item and lift to activate.


197
00:11:59,219 --> 00:12:02,022 line:0
Let's see how to add a menu like this
to your app.


198
00:12:03,590 --> 00:12:07,227 line:-2
UIButton and UIBarButtonItem
directly support menus,


199
00:12:07,294 --> 00:12:09,162 line:-1
and adding one couldn't be easier.


200
00:12:09,897 --> 00:12:13,800 line:-2
Just assign a menu to the menu property
of either class,


201
00:12:13,867 --> 00:12:17,604 line:-2
and UIKit will take care of displaying
that menu on long press.


202
00:12:18,539 --> 00:12:21,008 line:-1
But in some cases, you don't want to wait.


203
00:12:21,808 --> 00:12:23,577 line:-1
Let's take a look at that interaction.


204
00:12:25,179 --> 00:12:29,149 line:-2
Reminders uses a More button
to group several actions together.


205
00:12:30,083 --> 00:12:33,554 line:-2
Unlike our Safari example,
the menu presents immediately


206
00:12:33,620 --> 00:12:34,922 line:-1
when you touch the button.


207
00:12:35,489 --> 00:12:38,625 line:-2
Just like before,
the user can then slide their finger


208
00:12:38,692 --> 00:12:41,595 line:-2
and quickly select an action
in one smooth gesture.


209
00:12:42,496 --> 00:12:46,867 line:-2
How you select this interaction differs
between UIButton and UIBarButtonItem.


210
00:12:47,734 --> 00:12:52,706 line:-2
For UIButton,
setting showsMenuAsPrimaryAction to true


211
00:12:52,773 --> 00:12:56,243 line:-2
causes the button to present its menu
immediately on touch down.


212
00:12:57,611 --> 00:13:02,349 line:-2
For UIBarButtonItem, providing a menu
but not setting a primary action


213
00:13:02,416 --> 00:13:04,785 line:-2
indicates the menu should present
on touch down.


214
00:13:06,887 --> 00:13:10,991 line:-2
On iOS 14, you'll also see menus
automatically provided


215
00:13:11,058 --> 00:13:12,826 line:-1
by the navigation Bar Back button.


216
00:13:13,961 --> 00:13:16,496 line:-1
This menu creates a standard accelerator


217
00:13:16,563 --> 00:13:19,733 line:-2
for jumping back in the nav stack
in any application.


218
00:13:21,568 --> 00:13:23,770 line:-1
Menu titles are automatically chosen


219
00:13:23,837 --> 00:13:26,440 line:-2
considering customized back buttons
where appropriate.


220
00:13:27,608 --> 00:13:29,543 line:-1
If you use a custom title view


221
00:13:29,610 --> 00:13:32,212 line:-2
but don't set a title
of a navigation item,


222
00:13:32,279 --> 00:13:35,816 line:-2
consider setting backButtonTitle
to ensure a good experience.


223
00:13:37,317 --> 00:13:40,487 line:-2
The new menu support you've seen so far
is provided by UIControl.


224
00:13:41,522 --> 00:13:44,458 line:-2
You've already seen
showsMenuAsPrimaryAction


225
00:13:44,525 --> 00:13:47,628 line:-2
which determines if the menu triggers
on long press or touch down.


226
00:13:49,029 --> 00:13:52,599 line:-2
UIControl provides access
to its contextMenuInteraction


227
00:13:52,666 --> 00:13:54,735 line:-1
and a property to enable that interaction.


228
00:13:55,402 --> 00:13:59,606 line:-2
To support custom menu-based UIs,
you can subclass UIControl


229
00:13:59,673 --> 00:14:03,477 line:-2
and override its implementation
of ContextMenuInteractionDelegate.


230
00:14:05,045 --> 00:14:07,848 line:-2
To take action when the menu gesture
has been recognized,


231
00:14:07,915 --> 00:14:10,851 line:-2
you can register for
the menuActionTriggered control event.


232
00:14:11,652 --> 00:14:14,955 line:-2
Now let's take a look
at powerful new features in menus


233
00:14:15,022 --> 00:14:17,824 line:-2
to complement the new places
where you can use them.


234
00:14:18,959 --> 00:14:23,931 line:-2
UIDeferredMenuElement adds the ability
to asynchronously provide menu items.


235
00:14:24,932 --> 00:14:26,233 line:-1
As our example shows,


236
00:14:27,034 --> 00:14:29,369 line:-1
UIKit presents a standard loading UI


237
00:14:29,436 --> 00:14:31,772 line:-2
while waiting for the final menu items
to be provided.


238
00:14:33,240 --> 00:14:37,377 line:-2
Once provided, these items are cached
should the menu be displayed again.


239
00:14:37,778 --> 00:14:42,249 line:-2
UIDeferredMenuElement is also useful
for generating complex menus,


240
00:14:42,316 --> 00:14:45,652 line:-2
as the items won't be requested
until they need to be displayed.


241
00:14:46,553 --> 00:14:50,724 line:-2
Next, let's focus on two new features
of UIContextMenuInteraction.


242
00:14:52,459 --> 00:14:56,597 line:-2
UpdateVisibleMenu allows you to update
the menu currently presented to the user.


243
00:14:57,531 --> 00:14:59,366 line:-1
You receive a copy of that menu,


244
00:14:59,433 --> 00:15:01,535 line:-2
and you return a menu
to present in its place.


245
00:15:03,170 --> 00:15:05,939 line:-1
To make this API super easy to use,


246
00:15:06,006 --> 00:15:10,210 line:-2
UIMenu has changed behavior to no longer
force its children to be immutable,


247
00:15:10,744 --> 00:15:14,214 line:-2
allowing you to update and return
the menu passed to your block


248
00:15:14,281 --> 00:15:15,782 line:-1
instead of creating a new one.


249
00:15:16,683 --> 00:15:21,255 line:-2
UIContextMenuInteraction now provides
a query for the interaction's appearance.


250
00:15:22,189 --> 00:15:25,325 line:-2
This property may return rich
when displaying a preview,


251
00:15:25,392 --> 00:15:28,295 line:-2
compact for menu-only interactions
or none.


252
00:15:29,263 --> 00:15:31,999 line:-2
While controls always use
the compact appearance,


253
00:15:32,065 --> 00:15:36,770 line:-2
your own interactions may display rich
or compact based on how they're triggered.


254
00:15:37,504 --> 00:15:41,842 line:-2
That's some of the new capabilities
in iOS 14 to bring menus to more places.


255
00:15:42,576 --> 00:15:46,914 line:-2
Next, let's see how improvements
to UIAction can make it easier than ever


256
00:15:46,980 --> 00:15:48,815 line:-1
to act on user input.


257
00:15:49,550 --> 00:15:55,355 line:-2
In iOS 13, UIKit introduced UIAction to
make sharing event handling code easier.


258
00:15:55,856 --> 00:16:00,861 line:0
For a refresher,
see "Modernize your UI for iOS 13"


259
00:16:00,928 --> 00:16:03,597 line:0
from WWDC 2019.


260
00:16:04,164 --> 00:16:08,902 line:-2
iOS 14 expands where and how
you can use UIAction in your app.


261
00:16:10,637 --> 00:16:15,342 line:-2
UIBarButtonItem adds new initializers
to create items with actions and menus.


262
00:16:16,210 --> 00:16:18,512 line:-1
They make it easy to create BarButtonItems


263
00:16:18,579 --> 00:16:22,082 line:-1
that react to taps, present menus or both.


264
00:16:22,983 --> 00:16:24,885 line:-1
And nearly every parameter is optional,


265
00:16:24,952 --> 00:16:27,588 line:-2
so you only need to specify
those that you need.


266
00:16:27,654 --> 00:16:28,655 line:-1
Let's take a look.


267
00:16:30,190 --> 00:16:32,926 line:-2
Here we configure the toolbar items
of our viewController


268
00:16:32,993 --> 00:16:35,095 line:-1
using new API in iOS 14.


269
00:16:36,597 --> 00:16:40,400 line:-2
First, we create a system item
that triggers an action when tapped


270
00:16:40,467 --> 00:16:41,969 line:-1
and a menu when long pressed.


271
00:16:43,203 --> 00:16:47,508 line:-2
Next, we add a fixedSpace,
using the new fixedSpacewidth API.


272
00:16:48,909 --> 00:16:50,477 line:-1
Then we add a custom item,


273
00:16:50,544 --> 00:16:53,881 line:-2
configured to display an image
and present a menu on touch down.


274
00:16:55,182 --> 00:16:58,151 line:-1
Now, a flexibleSpace, also using new API.


275
00:16:59,453 --> 00:17:03,657 line:-2
And finally, an item that will use
the primaryAction's title or image


276
00:17:03,724 --> 00:17:05,526 line:-1
and trigger the handler on tap.


277
00:17:06,326 --> 00:17:10,297 line:-2
Like BarButtonItems, all controls
can be constructed with a UIAction,


278
00:17:10,797 --> 00:17:11,865 line:-1
but two controls,


279
00:17:11,932 --> 00:17:15,536 line:-2
UIButton and UISegmentedControl,
have additional behavior.


280
00:17:16,637 --> 00:17:21,141 line:-2
UIButton adds a new initializer accepting
the button type alongside a UIAction.


281
00:17:22,276 --> 00:17:26,079 line:-2
The type defaults to system,
and the primary action's title and image


282
00:17:26,146 --> 00:17:28,515 line:-2
are used to configure the button
when appropriate.


283
00:17:29,883 --> 00:17:32,619 line:-2
Like other controls created
with a primaryAction,


284
00:17:32,686 --> 00:17:36,323 line:-2
that action is registered to handle
the primaryActionTriggered control event


285
00:17:36,924 --> 00:17:40,394 line:-2
causing the action handler to be called
when the button is tapped.


286
00:17:41,762 --> 00:17:45,332 line:-2
Before we look at Segmented Control's
support for UIAction,


287
00:17:45,399 --> 00:17:48,502 line:-2
let's see how you might configure one
prior to iOS 14.


288
00:17:50,571 --> 00:17:53,540 line:-2
First, create the control
with an array of strings.


289
00:17:53,607 --> 00:17:57,211 line:-2
Next, add a handler to call a method,
located elsewhere in your code.


290
00:17:58,045 --> 00:18:00,480 line:-2
That method then has to switch over
the selected segment


291
00:18:00,547 --> 00:18:02,316 line:-1
assuming a mapping that may change.


292
00:18:03,150 --> 00:18:04,651 line:-1
And when the mapping does change,


293
00:18:04,718 --> 00:18:07,087 line:-2
the compiler can't help you
catch the problem.


294
00:18:07,487 --> 00:18:09,556 line:-1
iOS 14 makes this much easier.


295
00:18:10,958 --> 00:18:14,728 line:-2
With UIAction, creating segmented controls
looks like this.


296
00:18:15,696 --> 00:18:18,365 line:-2
Create the control with an array
of UIActions,


297
00:18:18,432 --> 00:18:21,001 line:-2
each defining the title or image
for one segment.


298
00:18:22,002 --> 00:18:25,038 line:-2
But unlike before,
we don't need to add an event handler.


299
00:18:25,772 --> 00:18:28,775 line:-2
UIKit automatically calls
the action's handler


300
00:18:28,842 --> 00:18:31,845 line:-2
when that segment is selected
and only that segment.


301
00:18:32,980 --> 00:18:34,982 line:-1
No more need for a switch statement.


302
00:18:35,048 --> 00:18:37,317 line:-2
No more default case
to try to catch problems.


303
00:18:37,951 --> 00:18:40,988 line:-2
The handler is right there
next to control creation.


304
00:18:41,054 --> 00:18:43,056 line:-1
And the compiler can help us keep


305
00:18:43,123 --> 00:18:46,193 line:-2
configuration and response
to user input in sync.


306
00:18:47,694 --> 00:18:50,764 line:-2
Here we use an enum
to generate our actions.


307
00:18:50,831 --> 00:18:53,767 line:-2
Which means we can just add
a new enum case,


308
00:18:53,834 --> 00:18:56,737 line:-2
and our segmented control's behavior
updates automatically.


309
00:18:57,804 --> 00:19:00,407 line:-2
And you can still combine this
with control event handling


310
00:19:00,474 --> 00:19:02,042 line:-1
for the best of both worlds.


311
00:19:04,077 --> 00:19:08,348 line:-2
UISegmentedControl's adoption
of UIAction starts with a new initializer


312
00:19:08,415 --> 00:19:12,619 line:-2
and adds new methods for adding, removing,
updating and finding segments.


313
00:19:13,554 --> 00:19:17,424 line:-2
As we've already seen,
segments associated with a UIAction


314
00:19:17,491 --> 00:19:21,261 line:-2
will have that action's handler called
only when that segment is selected.


315
00:19:22,696 --> 00:19:25,999 line:-2
iOS 14 has a lot to offer
to enhance your application


316
00:19:26,066 --> 00:19:28,836 line:-1
for iPhones, iPads and Mac Catalyst.


317
00:19:29,670 --> 00:19:33,740 line:-2
Refresh your UI by taking advantage
of new appearances on stock controls,


318
00:19:33,807 --> 00:19:38,245 line:-2
new customizability on UIPageControl
and new styles for UIDatePicker.


319
00:19:39,446 --> 00:19:42,783 line:-2
Adopt ColorPickerController
for all your color picking needs,


320
00:19:42,850 --> 00:19:46,453 line:-2
making it easy for your users
to select any color they can see.


321
00:19:47,321 --> 00:19:50,991 line:-2
Make your application easier and faster
to use with menus,


322
00:19:51,058 --> 00:19:53,727 line:-2
where a quick slide of the finger
can begin any task.


323
00:19:54,962 --> 00:19:57,231 line:-1
Support rapid navigation through your app


324
00:19:57,297 --> 00:20:00,467 line:-2
by making sure back button menus
are clear and correct.


325
00:20:01,568 --> 00:20:07,274 line:-2
And take action on UIAction to simplify
and share code to handle user input.


326
00:20:07,875 --> 00:20:10,978 line:-2
I can't wait to see how you enhance
your applications.


327
00:20:11,044 --> 00:20:12,980 line:-1
And thank you for watching.

