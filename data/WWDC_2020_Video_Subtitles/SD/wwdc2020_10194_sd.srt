1
00:00:03,770 --> 00:00:06,406 line:-1
Hello and welcome to WWDC.


2
00:00:07,808 --> 00:00:11,778 line:0
Welcome to "Add Configuration
and Intelligence to Your Widgets."


3
00:00:11,845 --> 00:00:14,848 line:0
My name is Ian,
and I'm here with my colleague Kelvin.


4
00:00:15,782 --> 00:00:18,719 line:-2
In this talk, we'll show you
how to make widgets configurable,


5
00:00:18,785 --> 00:00:21,788 line:-2
and show you how a configurable widget
can help the system work


6
00:00:21,855 --> 00:00:23,690 line:-1
in more intelligent ways.


7
00:00:24,758 --> 00:00:30,063 line:-2
New in iOS 14 and macOS Big Sur,
we have a whole new widget experience.


8
00:00:30,130 --> 00:00:32,900 line:-2
Widgets allow your app
to surface new information to people


9
00:00:32,966 --> 00:00:34,668 line:-1
in exciting new ways.


10
00:00:35,702 --> 00:00:37,938 line:-1
Widgets can live in more places than ever.


11
00:00:38,005 --> 00:00:41,608 line:-2
They can live on pages of the Home Screen,
as part of Stacks,


12
00:00:41,675 --> 00:00:44,912 line:-2
on the Today View,
and in macOS Notification Center.


13
00:00:46,180 --> 00:00:48,715 line:0
Powering those widgets is WidgetKit.


14
00:00:48,782 --> 00:00:51,351 line:0
WidgetKit allows you
to create multiple widgets,


15
00:00:51,418 --> 00:00:53,687 line:0
each to solve its own unique problem.


16
00:00:54,188 --> 00:00:57,090 line:0
Each widget can support
different sizes and layouts.


17
00:00:57,157 --> 00:00:59,226 line:0
Let's take a look at an example.


18
00:01:00,360 --> 00:01:01,662 line:-1
We've built an example app


19
00:01:01,728 --> 00:01:05,199 line:-2
that lets you view all of the transactions
on your credit cards.


20
00:01:05,265 --> 00:01:07,467 line:-2
It lets you view information
about your spending


21
00:01:07,534 --> 00:01:09,903 line:-2
and track balances
on all of your accounts.


22
00:01:10,571 --> 00:01:12,840 line:-2
The two most common things
that I do in the app


23
00:01:12,906 --> 00:01:16,510 line:-2
are check balances
and look at recent transactions.


24
00:01:16,577 --> 00:01:19,513 line:-2
It would be really great to see
this information right at a glance


25
00:01:19,580 --> 00:01:20,848 line:-1
on the Home Screen,


26
00:01:20,914 --> 00:01:22,883 line:-1
so we built two widgets for our app.


27
00:01:24,051 --> 00:01:26,220 line:-2
The first one
is called "Recent Purchases,"


28
00:01:26,286 --> 00:01:29,156 line:-2
which shows a list of purchases
on one of your cards.


29
00:01:29,223 --> 00:01:30,824 line:-1
The other one is called "Due Date,"


30
00:01:30,891 --> 00:01:34,094 line:-2
which shows your next payment's due date
and how much you owe.


31
00:01:35,128 --> 00:01:38,632 line:-2
Because I often want to see information
about one card at a time,


32
00:01:38,699 --> 00:01:41,468 line:-2
we added configuration
to pick which card to show.


33
00:01:42,269 --> 00:01:43,704 line:-1
I can change which card is shown


34
00:01:43,770 --> 00:01:46,940 line:-2
by tapping on "Edit Widget"
and then selecting a card.


35
00:01:48,308 --> 00:01:50,310 line:-1
Because we made our widget configurable,


36
00:01:50,377 --> 00:01:53,947 line:-2
now people can create multiple
different instances of the Due Date widget


37
00:01:54,014 --> 00:01:55,916 line:-1
and show a different card in each.


38
00:01:56,984 --> 00:01:59,219 line:-2
Now let's look at
what we're going to cover today.


39
00:01:59,720 --> 00:02:03,957 line:-2
First, we'll talk about the basics of how
to add configuration to your widget.


40
00:02:04,791 --> 00:02:06,894 line:-2
Next, we'll talk about
the types of information


41
00:02:06,960 --> 00:02:08,762 line:-1
that you can ask the user to enter,


42
00:02:08,829 --> 00:02:12,165 line:-2
and show how to populate the interface
with data from your app.


43
00:02:13,367 --> 00:02:16,937 line:-2
After that, we'll talk about how
you can customize the title, description


44
00:02:17,004 --> 00:02:19,473 line:-1
and colors of the backside of your widget.


45
00:02:20,140 --> 00:02:23,177 line:-2
And finally, we'll cover how
adding configuration to your widget


46
00:02:23,243 --> 00:02:27,347 line:-2
allows the system to better predict times
to display your widget in a stack.


47
00:02:28,315 --> 00:02:30,217 line:-1
Let's start with the basics.


48
00:02:30,951 --> 00:02:34,388 line:0
The first piece of the system is
the widget extension.


49
00:02:34,454 --> 00:02:36,623 line:0
Widget extensions contain SwiftUI code


50
00:02:36,690 --> 00:02:39,526 line:0
that renders the visual appearance
of the widget.


51
00:02:39,593 --> 00:02:42,696 line:0
They also contain some metadata
about the widget itself.


52
00:02:44,164 --> 00:02:45,299 line:-1
Before you get started,


53
00:02:45,365 --> 00:02:48,068 line:-2
make sure that you have set up
a widget extension already


54
00:02:48,135 --> 00:02:49,903 line:-1
using WidgetKit and SwiftUI.


55
00:02:50,404 --> 00:02:51,872 line:0
If you haven't done that yet,


56
00:02:51,939 --> 00:02:54,775 line:0
make sure to go watch
the "Meet WidgetKit" talk.


57
00:02:55,976 --> 00:02:57,878 line:-1
When your widget is configurable,


58
00:02:57,945 --> 00:03:02,282 line:-2
you can specify which options to ask
the user on the backside of the widget,


59
00:03:02,349 --> 00:03:04,351 line:-1
and the system will display them for you.


60
00:03:04,418 --> 00:03:06,820 line:-1
These questions are called parameters.


61
00:03:07,788 --> 00:03:09,623 line:-1
Here's our Recent Purchases widget.


62
00:03:09,690 --> 00:03:12,826 line:-2
It has a "Card" parameter
and a "Category" parameter.


63
00:03:12,893 --> 00:03:16,296 line:-2
The Card parameter allows people
to choose a card to display,


64
00:03:16,363 --> 00:03:18,866 line:-2
and the Category parameter
lets people filter the list


65
00:03:18,932 --> 00:03:21,602 line:-2
to only include transactions
for a specific category,


66
00:03:21,668 --> 00:03:23,270 line:-1
like groceries, if they'd like.


67
00:03:24,872 --> 00:03:27,875 line:-2
To define which parameters are shown,
we use intents,


68
00:03:27,941 --> 00:03:30,244 line:-2
which is the same system that you can use
to add support


69
00:03:30,310 --> 00:03:32,346 line:-1
for Siri and Shortcuts to your app.


70
00:03:33,247 --> 00:03:36,116 line:-2
An intent contains
an ordered list of parameters.


71
00:03:36,183 --> 00:03:37,918 line:-1
Each parameter that you put on the intent


72
00:03:37,985 --> 00:03:40,988 line:-2
will show up as a row
in the widget's configuration UI.


73
00:03:42,289 --> 00:03:46,460 line:-2
You declare your intents in Xcode
using an Intent Definition File.


74
00:03:46,527 --> 00:03:49,763 line:-2
This file contains all of your intents,
their parameters,


75
00:03:49,830 --> 00:03:52,666 line:-2
and indicates which parts
of the system they support.


76
00:03:53,267 --> 00:03:55,235 line:-1
By compiling this file into your app,


77
00:03:55,302 --> 00:03:58,605 line:-2
the system will be able
to read information about your intents.


78
00:03:59,640 --> 00:04:01,008 line:0
Once you define an intent,


79
00:04:01,074 --> 00:04:03,844 line:0
Xcode will also generate
an intent class for you,


80
00:04:03,911 --> 00:04:06,880 line:0
containing a property for each parameter.


81
00:04:06,947 --> 00:04:10,250 line:0
For this widget, we have
a ViewRecentPurchasesIntent class,


82
00:04:10,317 --> 00:04:12,319 line:0
with Card and Category properties.


83
00:04:13,820 --> 00:04:15,355 line:-1
An instance of this intent class


84
00:04:15,422 --> 00:04:18,257 line:-2
will be passed into the widget extension
at runtime,


85
00:04:18,325 --> 00:04:21,261 line:-2
allowing your widget to know
what the user has configured


86
00:04:21,327 --> 00:04:22,729 line:-1
and what to display.


87
00:04:23,597 --> 00:04:25,699 line:-2
Next, let's talk about
the types of parameters


88
00:04:25,766 --> 00:04:27,434 line:-1
that you can add to your intent.


89
00:04:27,501 --> 00:04:29,169 line:-1
As I mentioned before,


90
00:04:29,236 --> 00:04:31,805 line:-2
we build the widget configuration UI
for you,


91
00:04:31,872 --> 00:04:33,874 line:-1
based on the intent's definition.


92
00:04:33,941 --> 00:04:37,644 line:-2
We support a wide variety of input types,
which I'll walk you through now.


93
00:04:38,212 --> 00:04:41,014 line:-2
When you specify "String"
as the type of your parameter,


94
00:04:41,081 --> 00:04:43,917 line:-1
the configuration UI shows a text field,


95
00:04:43,984 --> 00:04:46,620 line:-2
and it will show a switch
for the "Boolean" parameter.


96
00:04:47,254 --> 00:04:52,159 line:-2
The configuration UI also supports numbers
with a few different input mechanisms.


97
00:04:52,226 --> 00:04:54,828 line:-2
For integers,
it supports number fields and steppers,


98
00:04:54,895 --> 00:04:57,764 line:-2
and for decimals,
it supports number fields and sliders.


99
00:04:59,433 --> 00:05:03,537 line:-2
The configuration UI also has support
for contact and location pickers.


100
00:05:04,071 --> 00:05:06,273 line:-2
The "Person" type will show
as a contact picker,


101
00:05:06,340 --> 00:05:09,209 line:-2
and the "Location" type will show
as a location picker.


102
00:05:10,677 --> 00:05:13,747 line:-2
The configuration UI
also supports enumerations.


103
00:05:13,814 --> 00:05:15,816 line:-1
You can make these enumerations static,


104
00:05:15,883 --> 00:05:19,186 line:-2
or dynamically populate them
with content from your app.


105
00:05:19,253 --> 00:05:22,389 line:-2
We'll talk about dynamic options
in more detail later.


106
00:05:22,823 --> 00:05:26,693 line:-2
The configuration UI supports
a number of other types as well,


107
00:05:26,760 --> 00:05:28,462 line:-1
each with their own UI.


108
00:05:29,062 --> 00:05:31,832 line:-2
Parameters can also support
multiple values.


109
00:05:31,899 --> 00:05:35,469 line:-2
For example, if your widget shows
a list of events from your calendars,


110
00:05:35,536 --> 00:05:39,706 line:-2
you can configure the intent
to support selecting multiple calendars.


111
00:05:39,773 --> 00:05:44,244 line:-2
New in iOS 14,
Intents now supports fixed-size arrays.


112
00:05:44,311 --> 00:05:47,915 line:-2
This is useful if your widget
supports showing a fixed number of items,


113
00:05:47,981 --> 00:05:51,351 line:-2
and lets you prevent the user from adding
more than a defined number of items


114
00:05:51,418 --> 00:05:52,419 line:-1
into the array.


115
00:05:53,120 --> 00:05:56,323 line:-2
You can specify the number of items
based on the widget size


116
00:05:56,390 --> 00:05:57,858 line:-1
in the intent editor.


117
00:05:57,925 --> 00:05:59,359 line:-1
Now I'm going to walk you through


118
00:05:59,426 --> 00:06:02,095 line:-2
how to add rich configuration
to your widget.


119
00:06:02,162 --> 00:06:05,566 line:-2
The first step is identifying
what you want to make configurable.


120
00:06:05,632 --> 00:06:09,269 line:-2
Let's use the Recent Purchases widget here
as an example.


121
00:06:09,336 --> 00:06:13,073 line:-2
In the Recent Purchases widget,
each widget can only show one card,


122
00:06:13,140 --> 00:06:15,676 line:-2
but people may have multiple cards
in the app,


123
00:06:15,742 --> 00:06:18,045 line:-2
so it would make sense
to make that configurable.


124
00:06:19,246 --> 00:06:21,915 line:-2
This allows people
to have multiple Recent Purchases widgets


125
00:06:21,982 --> 00:06:24,651 line:-2
on their Home Screen,
each showing different cards.


126
00:06:25,552 --> 00:06:28,722 line:-2
It also would be useful
to be able to filter by category.


127
00:06:28,789 --> 00:06:31,992 line:-2
That way, people could have one widget
to show transportation expenses


128
00:06:32,059 --> 00:06:34,294 line:-1
and another widget to show food expenses.


129
00:06:35,395 --> 00:06:37,931 line:-2
So, in addition to making
the card configurable,


130
00:06:37,998 --> 00:06:40,968 line:-2
we are also going to allow people
to configure the category.


131
00:06:41,969 --> 00:06:44,271 line:-2
Now I'm going to walk you through
how we can make


132
00:06:44,338 --> 00:06:46,573 line:-1
the Recent Purchases widget configurable.


133
00:06:47,074 --> 00:06:50,344 line:-2
This is our project,
where we already have our widget set up.


134
00:06:50,410 --> 00:06:53,780 line:-2
You can see that the widget currently has
a StaticConfiguration.


135
00:06:55,716 --> 00:06:57,451 line:-1
In order to make the widget configurable,


136
00:06:57,518 --> 00:06:59,453 line:-2
we need to switch
from a StaticConfiguration


137
00:06:59,520 --> 00:07:01,255 line:-1
to an IntentConfiguration.


138
00:07:01,321 --> 00:07:03,991 line:-2
The first step in switching to
an IntentConfiguration


139
00:07:04,057 --> 00:07:06,994 line:-2
is defining an intent that
you'll use to configure the widget.


140
00:07:07,794 --> 00:07:11,298 line:-2
You can define a custom intent
inside of an Intent Definition File.


141
00:07:12,933 --> 00:07:15,068 line:-1
I already have one here in this project.


142
00:07:15,135 --> 00:07:17,204 line:-2
You'll note that it is checked in
to both the app


143
00:07:17,271 --> 00:07:18,972 line:-1
and the widget extension targets.


144
00:07:20,474 --> 00:07:23,644 line:-2
Now let's create an intent using
the plus button in the bottom left.


145
00:07:25,846 --> 00:07:28,248 line:-1
I'll be calling it ViewRecentPurchases.


146
00:07:31,919 --> 00:07:35,055 line:-2
Next we're going to check the
"Intent is eligible for widgets" option.


147
00:07:36,657 --> 00:07:39,826 line:-2
This will allow the intent to work
as a configuration for a widget.


148
00:07:40,427 --> 00:07:43,263 line:-2
If you want this intent
to also support the Shortcuts app,


149
00:07:43,330 --> 00:07:47,968 line:-2
check the "Intent is user-configurable in
the Shortcuts app and Add to Siri" option.


150
00:07:48,035 --> 00:07:51,538 line:-2
We'll uncheck this option for this demo
and just focus on widgets.


151
00:07:52,139 --> 00:07:55,175 line:-2
We're also going to leave the
"Intent is eligible for Siri Suggestions"


152
00:07:55,242 --> 00:07:57,411 line:-1
checkbox unchecked for now,


153
00:07:57,477 --> 00:07:59,112 line:-2
and my colleague Kelvin
will walk you through


154
00:07:59,179 --> 00:08:01,748 line:-2
how to add intelligence to your widget
later in this talk.


155
00:08:02,649 --> 00:08:05,319 line:-2
We'll also set the category
of this intent to "View"


156
00:08:05,385 --> 00:08:08,255 line:-2
because the purpose is
to view your transactions.


157
00:08:11,792 --> 00:08:14,328 line:-2
Now, using the plus button
in the parameters list,


158
00:08:14,394 --> 00:08:16,296 line:-2
I am going to add a parameter
for the card.


159
00:08:17,231 --> 00:08:19,299 line:-2
The first step here
is naming the parameter.


160
00:08:19,366 --> 00:08:22,135 line:-2
This label will be displayed
in the widget configuration UI.


161
00:08:22,202 --> 00:08:23,737 line:-1
I'm going to name this "Card."


162
00:08:25,272 --> 00:08:26,807 line:-1
Next, I need to pick a type.


163
00:08:28,075 --> 00:08:30,844 line:-2
Because a credit card represents
an object inside of my app,


164
00:08:30,911 --> 00:08:33,480 line:-2
I'm going to create a custom type
to represent it.


165
00:08:33,547 --> 00:08:36,015 line:-2
You'll see that I already created
a "Card" type,


166
00:08:36,082 --> 00:08:39,686 line:-2
which has a name and identifier,
so I'll use that here for my type.


167
00:08:41,788 --> 00:08:44,558 line:-2
The list of cards
will need to be provided by the app,


168
00:08:44,625 --> 00:08:47,060 line:-2
and will change depending on
who is signed in,


169
00:08:47,127 --> 00:08:48,228 line:-1
so I will check


170
00:08:48,295 --> 00:08:50,797 line:-2
the "Options are provided dynamically"
checkbox.


171
00:08:52,766 --> 00:08:56,870 line:-2
We'll go into detail later
on how to populate this dynamic list.


172
00:08:57,804 --> 00:09:00,140 line:-2
Since this intent
won't support running in Siri,


173
00:09:00,207 --> 00:09:03,477 line:-2
we can uncheck the
"Siri can ask for value when run" option


174
00:09:05,546 --> 00:09:08,015 line:-2
Next, because we want to allow people
to choose the category,


175
00:09:08,081 --> 00:09:10,384 line:-2
we'll add a "Category" parameter
to the intent.


176
00:09:13,187 --> 00:09:15,455 line:-2
We can use an enum
for the type of this parameter


177
00:09:15,522 --> 00:09:17,758 line:-2
because there are
a fixed set of categories.


178
00:09:17,824 --> 00:09:20,527 line:-2
I already have an enum defined,
so I will choose that.


179
00:09:24,565 --> 00:09:26,967 line:-2
We'll set the default value
for the category to "All"


180
00:09:27,034 --> 00:09:30,137 line:-2
so that people will see
all of the transactions by default.


181
00:09:32,606 --> 00:09:35,843 line:-2
And we'll also uncheck the
"Siri can ask for value when run" option


182
00:09:35,909 --> 00:09:37,010 line:-1
for the category.


183
00:09:40,581 --> 00:09:43,684 line:-2
Now let's talk about dynamic options
and search.


184
00:09:44,251 --> 00:09:45,252 line:-1
In many cases,


185
00:09:45,319 --> 00:09:47,821 line:-2
the data that you want to display
in the widget configuration


186
00:09:47,888 --> 00:09:49,189 line:-1
can vary by person,


187
00:09:49,256 --> 00:09:52,559 line:-2
and can't be specified up front
in the Intent Definition File.


188
00:09:52,626 --> 00:09:56,763 line:-2
For example, the list of cards
in our example app varies by person.


189
00:09:56,830 --> 00:09:59,867 line:-2
You can accomplish this
by implementing dynamic options.


190
00:10:01,134 --> 00:10:04,304 line:-2
You can enable dynamic options
for any parameter on an intent


191
00:10:04,371 --> 00:10:08,075 line:-2
by checking the "Dynamic Options" checkbox
in Xcode.


192
00:10:08,141 --> 00:10:11,011 line:-2
Enabling dynamic options
will indicate to the system


193
00:10:11,078 --> 00:10:12,346 line:-1
that it should consult your app


194
00:10:12,412 --> 00:10:15,215 line:-2
to retrieve the possible values
that a person can choose from,


195
00:10:15,282 --> 00:10:17,918 line:-2
instead of allowing them
to enter any value that they want.


196
00:10:18,485 --> 00:10:21,688 line:-2
Once you enable dynamic options,
two things will happen.


197
00:10:21,755 --> 00:10:24,358 line:-2
First, the visual appearance
of your parameter will change


198
00:10:24,424 --> 00:10:25,592 line:-1
on the backside of the widget


199
00:10:25,659 --> 00:10:28,462 line:-2
into a button
that opens a modal list of options.


200
00:10:29,463 --> 00:10:33,433 line:-2
Second, two methods will be generated
for you to implement in your app,


201
00:10:33,500 --> 00:10:37,237 line:-2
one to provide a list of possible options,
and a default value.


202
00:10:38,972 --> 00:10:41,508 line:-2
These methods are part
of the intent handler protocol,


203
00:10:41,575 --> 00:10:43,410 line:-1
which Xcode generates for you.


204
00:10:44,011 --> 00:10:46,780 line:-2
You will need to make a class
that conforms to this protocol,


205
00:10:46,847 --> 00:10:49,383 line:-2
either in your app
or in an Intents extension.


206
00:10:50,050 --> 00:10:53,353 line:-2
This class will be asked by the system
to provide possible options


207
00:10:53,420 --> 00:10:55,522 line:-2
while the person is configuring
your widget.


208
00:10:56,790 --> 00:10:59,526 line:-2
In the example app, the two methods
that we need to implement


209
00:10:59,593 --> 00:11:03,263 line:-2
are provideCardOptionsCollection
and defaultCard.


210
00:11:03,330 --> 00:11:05,065 line:-1
For provideCardOptionsCollection,


211
00:11:05,132 --> 00:11:07,568 line:-2
we will load the list of cards
that the user has set up


212
00:11:07,634 --> 00:11:09,603 line:-1
and then call the completion handler.


213
00:11:09,670 --> 00:11:10,671 line:-1
For defaultCard,


214
00:11:10,737 --> 00:11:13,440 line:-2
we return the primary card
that the user has set up.


215
00:11:15,576 --> 00:11:17,644 line:-1
The provideCardOptionsCollection method


216
00:11:17,711 --> 00:11:19,847 line:-2
lets you either provide
a flat list of cards


217
00:11:19,913 --> 00:11:22,249 line:-1
or a list of sections containing cards.


218
00:11:23,517 --> 00:11:26,286 line:-2
For example, we can display a section
for each type of card,


219
00:11:26,353 --> 00:11:27,988 line:-1
like credit or debit.


220
00:11:28,055 --> 00:11:30,557 line:-2
If you use sections,
your UI will look like this.


221
00:11:32,226 --> 00:11:34,862 line:-2
Now all of my credit cards
show under the "Credit" section,


222
00:11:34,928 --> 00:11:37,865 line:-2
and I can see more sections
containing other types of cards.


223
00:11:38,932 --> 00:11:43,036 line:-2
By default, the search bar at the top
will filter the options that you provide.


224
00:11:43,103 --> 00:11:45,239 line:-2
In some cases,
your app might have more data


225
00:11:45,305 --> 00:11:47,708 line:-2
than you can easily provide
up-front in a list.


226
00:11:48,575 --> 00:11:52,613 line:-2
If that's the case, you can provide
search results as the person types.


227
00:11:52,679 --> 00:11:55,315 line:-2
These results can include options
outside of the standard options


228
00:11:55,382 --> 00:11:56,984 line:-1
that you provide dynamically.


229
00:11:59,152 --> 00:12:00,487 line:-1
To do this, make sure to check


230
00:12:00,554 --> 00:12:04,191 line:-2
the "Intent handler provides
search results as the user types" checkbox


231
00:12:04,258 --> 00:12:06,059 line:-1
and also provide a prompt.


232
00:12:07,294 --> 00:12:08,462 line:-1
If you check the checkbox,


233
00:12:08,529 --> 00:12:12,199 line:-2
the provideCardOptionsCollection method
will get a search term parameter.


234
00:12:13,367 --> 00:12:15,002 line:-1
When a person first looks at the list,


235
00:12:15,068 --> 00:12:17,671 line:-2
this method will get called
with a nil search term,


236
00:12:17,738 --> 00:12:19,206 line:-1
and then as they start typing,


237
00:12:19,273 --> 00:12:22,276 line:-2
the method will get called again
with the updated search term.


238
00:12:22,342 --> 00:12:26,580 line:-2
Now let's do a quick demo
of how you can implement dynamic options.


239
00:12:27,414 --> 00:12:28,982 line:-1
Continuing from our last demo,


240
00:12:29,049 --> 00:12:32,953 line:-2
let's go ahead and implement returning
the list of cards to the user dynamically.


241
00:12:33,020 --> 00:12:35,155 line:-2
The first step is setting up
the intent handler


242
00:12:35,222 --> 00:12:37,758 line:-1
for the ViewRecentPurchases intent.


243
00:12:37,824 --> 00:12:40,994 line:-2
We're going to put our intent handler
inside of an Intents extension.


244
00:12:41,628 --> 00:12:44,398 line:-2
I already have an Intents extension set up
for our other widget,


245
00:12:44,464 --> 00:12:45,933 line:-1
so I can add my code there.


246
00:12:46,934 --> 00:12:49,570 line:-2
The next step is making
our intent handler conform


247
00:12:49,636 --> 00:12:52,706 line:-2
to the ViewRecentPurchases
intent handling protocol.


248
00:12:56,009 --> 00:12:58,378 line:-2
You can see that this protocol has
a single required method,


249
00:12:58,445 --> 00:13:00,848 line:-2
which is the
provideCardOptionsCollection method.


250
00:13:00,914 --> 00:13:04,384 line:-2
We need to implement this such that it
returns a list of cards inside of the app.


251
00:13:05,352 --> 00:13:09,323 line:-2
First, I create custom Card objects
from the objects inside of my app.


252
00:13:10,123 --> 00:13:12,626 line:-2
Then I put them into
the INObjectCollection,


253
00:13:12,693 --> 00:13:15,596 line:-1
which allows me to add sections if I want.


254
00:13:17,297 --> 00:13:19,032 line:-1
I don't have any sections in mind here,


255
00:13:19,099 --> 00:13:22,269 line:-2
so I will just create the collection
from a list of items,


256
00:13:22,803 --> 00:13:25,472 line:-2
and then call the completion handler
with the created collection.


257
00:13:28,242 --> 00:13:31,011 line:-2
There's also an optional method
to provide a default card.


258
00:13:34,448 --> 00:13:35,449 line:0
The default is used


259
00:13:35,516 --> 00:13:37,951 line:0
when a widget is dragged
onto the Home Screen for the first time,


260
00:13:38,018 --> 00:13:40,420 line:0
so it's really important
to provide a good default.


261
00:13:44,324 --> 00:13:47,394 line:-2
Now that we've created our intent
and implemented our intent handler,


262
00:13:47,461 --> 00:13:50,330 line:-2
we can adopt the IntentConfiguration
in our widget.


263
00:13:54,801 --> 00:13:56,670 line:-2
It's very similar to
the StaticConfiguration


264
00:13:56,737 --> 00:13:57,738 line:-1
that we had before,


265
00:13:57,804 --> 00:14:00,073 line:-2
but it takes an intent type
as an argument.


266
00:14:03,877 --> 00:14:05,779 line:-2
You'll also need to switch
your TimelineProvider


267
00:14:05,846 --> 00:14:07,581 line:-1
to be an IntentTimelineProvider.


268
00:14:11,285 --> 00:14:13,554 line:-2
It's very similar to
the default TimelineProvider,


269
00:14:13,620 --> 00:14:15,622 line:-2
but the methods have
an additional intent argument


270
00:14:15,689 --> 00:14:17,758 line:-1
that you use to determine what to show.


271
00:14:23,397 --> 00:14:25,599 line:-2
Here, we’ll need to take the card
from the intent


272
00:14:25,666 --> 00:14:28,569 line:-2
and use that to determine
which purchases to show.


273
00:14:28,635 --> 00:14:31,638 line:-2
Previously, it was just showing
the purchases from the default card.


274
00:14:40,214 --> 00:14:43,150 line:-2
Let's run the code
and try to configure the widget.


275
00:14:46,787 --> 00:14:48,355 line:-1
Notice that when I drag out the widget,


276
00:14:48,422 --> 00:14:50,958 line:-2
it shows me transactions
from the default card.


277
00:14:52,960 --> 00:14:55,562 line:-2
This is because I implemented
the default card method.


278
00:14:57,064 --> 00:15:00,100 line:-2
Now if I go and flip it around
and tap on the "Card" button,


279
00:15:00,534 --> 00:15:02,002 line:-1
it shows me a list of cards.


280
00:15:03,670 --> 00:15:07,274 line:-2
Tapping on the "Category" option
also shows a list of categories.


281
00:15:11,311 --> 00:15:12,346 line:-1
Voilà.


282
00:15:13,514 --> 00:15:16,183 line:-2
Now let's talk about a few ways
that you can further customize


283
00:15:16,250 --> 00:15:19,119 line:-2
the appearance
of your widget configuration UI.


284
00:15:19,753 --> 00:15:21,889 line:-2
You can customize the title
and the description


285
00:15:21,955 --> 00:15:25,692 line:-2
by using the SwiftUI modifiers called
"configurationDisplayName"


286
00:15:25,759 --> 00:15:28,095 line:-2
and "description"
in your widget extension.


287
00:15:29,162 --> 00:15:30,497 line:-1
Next is colors.


288
00:15:30,564 --> 00:15:32,933 line:-2
You can style the background
and the accent color


289
00:15:33,000 --> 00:15:36,170 line:-2
of the widget configuration UI
to match your app's color scheme.


290
00:15:37,171 --> 00:15:39,139 line:-2
To do this,
you'll need to add named colors


291
00:15:39,206 --> 00:15:41,742 line:-1
to your widget extension's asset catalog.


292
00:15:41,808 --> 00:15:45,679 line:-2
Here we're adding one for the accent color
and another one for the background color.


293
00:15:48,282 --> 00:15:50,317 line:0
And then you'll need to add
the names of your colors


294
00:15:50,384 --> 00:15:52,019 line:0
to your widget extension's build settings


295
00:15:52,085 --> 00:15:55,222 line:0
for "Global Accent Color Name"
and "Widget Background Color Name."


296
00:15:56,590 --> 00:15:59,726 line:-2
Another thing you might want to do
is hide and show specific parameters


297
00:15:59,793 --> 00:16:01,495 line:-1
based on another parameter.


298
00:16:01,562 --> 00:16:03,497 line:-1
For example, in the Calendar widget,


299
00:16:03,564 --> 00:16:06,366 line:-2
if you turn off
the "Mirror Calendar App" switch,


300
00:16:06,433 --> 00:16:07,935 line:-1
the "Calendar" parameter appears,


301
00:16:08,001 --> 00:16:10,437 line:-2
and you can manually choose
which calendar to show.


302
00:16:12,005 --> 00:16:14,107 line:-2
Let's take a look at
the Intent Definition File


303
00:16:14,174 --> 00:16:18,712 line:-2
to see how to specify the relationship
between Mirror Calendar App and Calendar.


304
00:16:19,813 --> 00:16:22,749 line:-2
To specify that we only want
the "Calendar" parameter to show up


305
00:16:22,816 --> 00:16:25,219 line:-2
when the "Mirror Calendar App" option
is off,


306
00:16:25,285 --> 00:16:28,922 line:-2
make the "Mirror Calendar App" parameter
a parent of the "Calendar" parameter.


307
00:16:30,324 --> 00:16:32,492 line:-2
To do that,
we'll select the "Calendar" parameter,


308
00:16:33,060 --> 00:16:35,729 line:-2
then select "Mirror Calendar App"
as its parent.


309
00:16:36,663 --> 00:16:41,168 line:-2
Then we'll set it up to show only if
the parent has the exact value of "false".


310
00:16:41,235 --> 00:16:43,370 line:-2
Now the "Calendar" parameter
will only show up


311
00:16:43,437 --> 00:16:45,839 line:-2
if the "Mirror Calendar App"
is turned off.


312
00:16:46,240 --> 00:16:47,241 line:-1
That's it from me.


313
00:16:47,307 --> 00:16:50,644 line:-2
Now over to Kelvin to talk about
system intelligence and widgets.


314
00:16:52,346 --> 00:16:56,783 line:-2
Hi, I'm Kelvin, and I work on
the Proactive team here at Apple.


315
00:16:56,850 --> 00:17:00,420 line:-2
Next, we're going to talk about
system intelligence.


316
00:17:00,921 --> 00:17:04,258 line:-2
Widgets are one of the most exciting
new opportunities


317
00:17:04,324 --> 00:17:07,394 line:-1
across iOS, iPadOS and macOS.


318
00:17:08,127 --> 00:17:12,633 line:-2
On iOS 14, not only can you add widgets
to the Home Screen,


319
00:17:12,699 --> 00:17:15,002 line:-1
you can stack multiple widgets together


320
00:17:15,068 --> 00:17:20,207 line:-2
and provide access to a variety of widgets
in one place by easily swiping through.


321
00:17:21,474 --> 00:17:24,678 line:-2
Everyone will find a different way
to take advantage of this,


322
00:17:24,744 --> 00:17:28,649 line:-2
but it's easy to imagine that
you could group multiple widgets together


323
00:17:28,715 --> 00:17:31,318 line:-2
that would be useful
as you progress through your day.


324
00:17:32,019 --> 00:17:33,787 line:-1
Now, what's exciting about Stacks


325
00:17:33,854 --> 00:17:39,059 line:-2
is that the system can automatically
rotate widgets to the top of the stack


326
00:17:39,126 --> 00:17:41,929 line:-1
to provide useful and timely information.


327
00:17:43,163 --> 00:17:46,066 line:-2
Let me walk you through
the underlying design principles


328
00:17:46,133 --> 00:17:50,571 line:-2
that drive stack intelligence,
and how you should implement some new APIs


329
00:17:50,637 --> 00:17:54,141 line:-2
to ensure your app is part of
this new Home Screen experience.


330
00:17:54,975 --> 00:17:59,146 line:-2
Let's dig a little deeper into what makes
for a good Smart Stack.


331
00:18:00,080 --> 00:18:03,517 line:-2
Stacks should provide timely
and glanceable information


332
00:18:03,584 --> 00:18:05,719 line:-1
with obvious value to the user.


333
00:18:06,653 --> 00:18:10,390 line:-2
You want your widget to be surfaced
when you have timely information


334
00:18:10,457 --> 00:18:12,693 line:-1
relevant to the people using your app,


335
00:18:12,759 --> 00:18:15,095 line:-2
like when you know
there is a thunderstorm coming,


336
00:18:15,162 --> 00:18:18,398 line:-2
but not when you're just updating
the temperature regularly.


337
00:18:19,099 --> 00:18:24,271 line:-2
Broadly speaking, the system will try
to surface widgets based on two reasons.


338
00:18:24,338 --> 00:18:27,074 line:-1
The first is user behavior-based.


339
00:18:27,140 --> 00:18:30,344 line:-2
We want to surface widgets
that provide information


340
00:18:30,410 --> 00:18:33,914 line:-2
the user typically looks for
at a particular time.


341
00:18:34,448 --> 00:18:35,716 line:-1
For example,


342
00:18:35,782 --> 00:18:39,720 line:-2
if someone frequently launches
your weather app to check on the weather,


343
00:18:39,786 --> 00:18:43,690 line:-2
the system can instead surface your widget
with that information


344
00:18:43,757 --> 00:18:46,927 line:-2
to provide quicker access
to what they're looking for.


345
00:18:47,928 --> 00:18:51,532 line:-2
The second is based on
relevant information from your app.


346
00:18:51,598 --> 00:18:54,835 line:-2
So, for example,
if a thunderstorm is happening,


347
00:18:54,902 --> 00:18:59,640 line:-2
your widget can inform the system
that it has a highly relevant update,


348
00:18:59,706 --> 00:19:04,111 line:-2
and the system will consider surfacing
your widget to the top of the stack.


349
00:19:05,279 --> 00:19:08,282 line:-1
Now let's talk about the APIs you can use


350
00:19:08,348 --> 00:19:11,985 line:-2
to provide the information
the system needs to surface your widget.


351
00:19:13,220 --> 00:19:15,088 line:-1
Let's start with user behavior.


352
00:19:16,523 --> 00:19:18,792 line:-1
So the system wants to surface your widget


353
00:19:18,859 --> 00:19:22,329 line:-2
when someone is typically looking
in your app for information,


354
00:19:22,996 --> 00:19:28,735 line:-2
and in iOS 12, we introduced the concept
of Shortcuts and custom intent donations,


355
00:19:28,802 --> 00:19:33,841 line:-2
which provides a way for the system
to understand what people do in your app.


356
00:19:33,907 --> 00:19:35,442 line:-1
And using this information,


357
00:19:35,509 --> 00:19:38,278 line:-2
the system provides predictions
in Spotlight


358
00:19:38,345 --> 00:19:40,214 line:-1
on what actions they want to perform.


359
00:19:41,348 --> 00:19:43,083 line:0
Now, new in iOS 14,


360
00:19:43,150 --> 00:19:46,753 line:0
these same donations
will also inform the system


361
00:19:46,820 --> 00:19:49,923 line:0
about when would be a good time
to surface your widget.


362
00:19:51,391 --> 00:19:53,961 line:-2
So now, let's continue
from our previous example


363
00:19:54,027 --> 00:19:56,230 line:-1
with the Recent Purchases widget.


364
00:19:56,296 --> 00:19:59,733 line:-2
Here we have already set up an intent
for widget configuration.


365
00:19:59,800 --> 00:20:02,302 line:-2
It allows a user to specify
the credit card


366
00:20:02,369 --> 00:20:04,638 line:-1
and the category they want to view.


367
00:20:04,705 --> 00:20:08,175 line:-2
Now, to enable system intelligence
to rotate to our widget,


368
00:20:08,242 --> 00:20:12,412 line:-2
we have to set this same intent
for donation by our host app.


369
00:20:13,647 --> 00:20:16,517 line:-2
The idea here
is we want to inform the system


370
00:20:16,583 --> 00:20:20,587 line:-2
when a user is checking
a particular credit card in our app,


371
00:20:20,654 --> 00:20:23,223 line:-1
and we will do so by donating this intent.


372
00:20:23,924 --> 00:20:27,494 line:-2
We'll describe what happens
under the hood in just a bit.


373
00:20:27,561 --> 00:20:31,231 line:-2
So for now, let's dive into some details
about how to set it up.


374
00:20:33,300 --> 00:20:38,539 line:-2
First, we need to mark this intent
as eligible for Siri Suggestions,


375
00:20:38,605 --> 00:20:42,476 line:0
and that opens up the bottom section
here labeled "Suggestions."


376
00:20:43,076 --> 00:20:46,380 line:0
And for our example,
we want the system to predict


377
00:20:46,446 --> 00:20:49,082 line:0
when someone will check
a particular credit card,


378
00:20:49,149 --> 00:20:53,854 line:0
and we want it to match any widget
with that same card configured.


379
00:20:53,921 --> 00:20:55,255 line:0
In order to convey that,


380
00:20:55,322 --> 00:20:59,927 line:0
we need to add a "Supported Combinations"
with just the Card parameter.


381
00:21:01,195 --> 00:21:05,399 line:-2
And so now that we have set up
our custom ViewRecentPurchases intent,


382
00:21:05,465 --> 00:21:07,634 line:-1
we need to have our host app donate it


383
00:21:07,701 --> 00:21:12,039 line:-2
whenever the user views recent purchases
in our host app.


384
00:21:12,105 --> 00:21:15,609 line:-2
And to do that,
we create an INInteraction object


385
00:21:15,676 --> 00:21:19,313 line:-2
and call the donate function,
passing in our intent.


386
00:21:20,314 --> 00:21:23,317 line:-2
And since we've specified
a "Supported Combinations"


387
00:21:23,383 --> 00:21:25,552 line:-1
as just the Card parameter,


388
00:21:25,619 --> 00:21:29,256 line:-2
even if we provided the Category parameter
in our donation,


389
00:21:29,323 --> 00:21:32,292 line:-2
the system will only consider
the Card parameter.


390
00:21:33,026 --> 00:21:36,730 line:-2
And that's all you have to do.
The system will do the rest.


391
00:21:36,797 --> 00:21:38,031 line:-1
Now let's take a closer look


392
00:21:38,098 --> 00:21:41,435 line:-2
at what the system does
with your donations under the hood.


393
00:21:42,236 --> 00:21:44,605 line:-2
So let's say someone views
grocery purchases


394
00:21:44,671 --> 00:21:47,274 line:-1
for our AcmeCard regularly at noon,


395
00:21:47,341 --> 00:21:51,311 line:-2
and checks their SoupPay card
for restaurant purchases in the evenings.


396
00:21:51,378 --> 00:21:53,981 line:-2
Now, our host app
would donate intents like this.


397
00:21:55,148 --> 00:21:56,750 line:-1
And based on these donations,


398
00:21:56,817 --> 00:22:01,021 line:-2
the system would recognize that the user
typically checks their AcmeCard at noon.


399
00:22:01,088 --> 00:22:02,789 line:-1
And then on Friday at noon,


400
00:22:02,856 --> 00:22:06,326 line:-2
the system would predict the intent
for viewing AcmeCard


401
00:22:06,393 --> 00:22:08,028 line:-1
and would surface our widget,


402
00:22:08,095 --> 00:22:11,198 line:-2
as long as they have configured it
to show their AcmeCard


403
00:22:11,265 --> 00:22:12,866 line:-1
regardless of the category.


404
00:22:14,301 --> 00:22:19,473 line:-2
But what if instead we added both Card
and Category as a supported combination?


405
00:22:19,540 --> 00:22:21,475 line:-1
Let's look at what would happen.


406
00:22:21,542 --> 00:22:25,045 line:-2
Now, since Category is part
of the supported combination,


407
00:22:25,112 --> 00:22:28,649 line:-2
you are telling the system
that it is an important parameter.


408
00:22:29,249 --> 00:22:32,886 line:-2
Then on Friday at noon,
the system would predict the intent


409
00:22:32,953 --> 00:22:36,156 line:-2
for viewing AcmeCard
in the "Groceries" category,


410
00:22:36,223 --> 00:22:38,091 line:-1
which would only surface widgets


411
00:22:38,158 --> 00:22:41,862 line:-2
where the user has explicitly configured
both parameters


412
00:22:41,929 --> 00:22:45,265 line:-2
to show the AcmeCard
for the "Groceries" category.


413
00:22:46,600 --> 00:22:51,071 line:-2
So, in short, "Supported Combinations"
is the way to communicate to the system


414
00:22:51,138 --> 00:22:54,141 line:-2
which configurable parameter
truly represents


415
00:22:54,208 --> 00:22:56,410 line:-1
the information people are looking for.


416
00:22:57,544 --> 00:23:00,981 line:-2
We walked through a lot of steps there,
so to quickly summarize,


417
00:23:01,048 --> 00:23:05,586 line:-2
first, set up a configuration
for your widget with an intent.


418
00:23:05,652 --> 00:23:08,922 line:-2
Second, mark it as eligible
for Siri Suggestions


419
00:23:08,989 --> 00:23:11,325 line:-1
to allow the system to predict it.


420
00:23:12,226 --> 00:23:14,795 line:-1
Next, configure "Supported Combinations"


421
00:23:14,862 --> 00:23:18,398 line:-2
for only the parameters
that you want the system to predict.


422
00:23:18,465 --> 00:23:20,267 line:-1
And finally, donate the intent


423
00:23:20,334 --> 00:23:23,504 line:-2
when the user views that information
in your host app.


424
00:23:24,071 --> 00:23:26,807 line:-1
Now let's talk about the second scenario,


425
00:23:26,874 --> 00:23:29,376 line:-2
where you want the system
to surface your widget


426
00:23:29,443 --> 00:23:32,246 line:-2
when you have important,
relevant information.


427
00:23:33,280 --> 00:23:34,348 line:-1
So, a quick recap.


428
00:23:34,414 --> 00:23:36,884 line:-2
Using WidgetKit,
you provide timeline entries


429
00:23:36,950 --> 00:23:41,121 line:-2
that will determine what your widget
will look like at various points in time.


430
00:23:41,188 --> 00:23:44,858 line:-2
It works great whether your widget
can schedule your entries ahead of time,


431
00:23:44,925 --> 00:23:46,193 line:-1
like this weather example


432
00:23:46,260 --> 00:23:48,529 line:-2
where you can provide forecasts
for future views.


433
00:23:49,129 --> 00:23:53,767 line:-2
It also works if your widget needs
to react to new information in real time,


434
00:23:53,834 --> 00:23:55,636 line:-1
like our Recent Purchases example,


435
00:23:55,702 --> 00:23:58,772 line:-2
where you can only provide
each entry as they occur.


436
00:23:59,439 --> 00:24:03,143 line:-2
So now, let's say we know that people
using our app want to be alerted


437
00:24:03,210 --> 00:24:05,746 line:-1
if they got a charge for over $50.


438
00:24:06,813 --> 00:24:10,684 line:-2
How can you inform the system
that your widget has relevant information


439
00:24:10,751 --> 00:24:12,352 line:-1
for the Acme Books purchase?


440
00:24:12,419 --> 00:24:14,922 line:-2
You can convey that information
by supplying


441
00:24:14,988 --> 00:24:18,725 line:-2
a TimelineEntryRelevance object
with your TimelineEntry.


442
00:24:20,093 --> 00:24:23,030 line:-2
A TimelineEntry has effectively
three components:


443
00:24:23,096 --> 00:24:27,000 line:-2
a date time stamp that determines
when this entry should be rendered,


444
00:24:27,067 --> 00:24:31,071 line:-2
the view that should be rendered,
and the relevance of this entry.


445
00:24:31,138 --> 00:24:34,241 line:-2
The relevance is
a TimelineEntryRelevance object,


446
00:24:34,308 --> 00:24:37,010 line:-2
which has two fields:
a score and a duration.


447
00:24:38,078 --> 00:24:40,113 line:-1
And here's what it looks like in Swift.


448
00:24:40,180 --> 00:24:41,815 line:-1
Let's start with the score.


449
00:24:41,882 --> 00:24:45,419 line:-2
The score is a value indicating
how relevant an entry is


450
00:24:45,485 --> 00:24:48,956 line:-2
compared to all entries
provided in the past.


451
00:24:49,022 --> 00:24:52,192 line:-2
The range and scale
is largely up to you to define,


452
00:24:52,259 --> 00:24:57,397 line:-2
as the system only considers the score
in relation to other entries.


453
00:24:57,464 --> 00:25:02,069 line:-2
The only exception being a score of zero
or lower will indicate to the system


454
00:25:02,135 --> 00:25:05,072 line:-2
that your widget currently has
no relevant information


455
00:25:05,138 --> 00:25:06,773 line:-1
and should not be surfaced.


456
00:25:07,574 --> 00:25:09,476 line:0
Now, coming back to our example,


457
00:25:09,543 --> 00:25:12,913 line:0
we want to convey to the system
that we have important information


458
00:25:12,980 --> 00:25:15,916 line:0
when there is a purchase of more than $50.


459
00:25:15,983 --> 00:25:18,719 line:0
We can simply provide a score of one
when that happens


460
00:25:18,785 --> 00:25:20,187 line:0
to emphasize the importance,


461
00:25:20,254 --> 00:25:23,857 line:0
and a score of 0.1
for all other purchases.


462
00:25:23,924 --> 00:25:26,193 line:0
That way, there will be a slight chance


463
00:25:26,260 --> 00:25:29,763 line:0
the system might surface our widget
for the minor purchases,


464
00:25:29,830 --> 00:25:32,432 line:0
but will try to prioritize
for the big purchase.


465
00:25:33,033 --> 00:25:34,801 line:0
When there is no important information,


466
00:25:34,868 --> 00:25:38,539 line:0
like when we have
no recent purchases at 8:04 a.m.,


467
00:25:38,605 --> 00:25:39,907 line:0
we set a score of zero.


468
00:25:39,973 --> 00:25:44,077 line:-2
And keep in mind, it doesn't matter
what scores other widgets provide.


469
00:25:44,144 --> 00:25:47,881 line:-2
Scores are only compared
within the scores you provide.


470
00:25:48,482 --> 00:25:49,650 line:0
Now, on the other hand,


471
00:25:49,716 --> 00:25:53,654 line:0
let's say we think the amount spent
is a good indicator of relevance.


472
00:25:53,720 --> 00:25:56,523 line:0
We can set the amount spent
to be the score,


473
00:25:56,590 --> 00:26:01,061 line:0
and the system will likewise prioritize
surfacing the expensive purchases.


474
00:26:01,929 --> 00:26:03,897 line:-1
Next, let's talk about duration.


475
00:26:03,964 --> 00:26:06,466 line:-1
The duration is a field for situations


476
00:26:06,533 --> 00:26:09,269 line:-2
where you have
a well-defined period of time


477
00:26:09,336 --> 00:26:11,405 line:-1
where the relevance score will be fixed.


478
00:26:11,905 --> 00:26:15,042 line:-2
Otherwise,
feel free to leave duration as zero,


479
00:26:15,108 --> 00:26:17,144 line:-2
which will mean
the relevance score will last


480
00:26:17,211 --> 00:26:20,647 line:-2
until the next TimelineEntryRelevance
is received.


481
00:26:21,682 --> 00:26:25,152 line:0
Here's an example
to highlight how duration can be used.


482
00:26:25,219 --> 00:26:27,387 line:0
We want to build a basketball widget


483
00:26:27,454 --> 00:26:30,123 line:0
that shows the progress of a game
as it occurs.


484
00:26:30,190 --> 00:26:34,127 line:0
So, at the beginning of the game,
we can create an entry with a score of one


485
00:26:34,194 --> 00:26:36,864 line:0
and a fixed duration
for the length of the game.


486
00:26:36,930 --> 00:26:40,434 line:0
During the game, we can continue
to make TimelineEntry updates


487
00:26:40,501 --> 00:26:42,202 line:0
without affecting the relevance


488
00:26:42,269 --> 00:26:46,373 line:0
by just leaving
the TimelineEntryRelevance field as nil.


489
00:26:46,440 --> 00:26:49,743 line:0
Setting the entry as nil
is how you can tell the system


490
00:26:49,810 --> 00:26:53,013 line:0
to ignore this update
for relevance purposes.


491
00:26:53,647 --> 00:26:56,049 line:-1
So to wrap up, with Smart Stacks,


492
00:26:56,116 --> 00:27:00,521 line:-2
we have an opportunity to surface
your widget on top of a stack.


493
00:27:00,587 --> 00:27:03,957 line:-2
You can make this work
for your widgets in two ways.


494
00:27:04,024 --> 00:27:09,630 line:-2
First, by donating intents from your app
that match configuration of your widget,


495
00:27:09,696 --> 00:27:13,166 line:-2
and secondly,
by providing TimelineEntryRelevance


496
00:27:13,233 --> 00:27:15,936 line:-2
when your widget has
important information.


497
00:27:16,703 --> 00:27:17,771 line:-1
Thanks for watching.


498
00:27:17,838 --> 00:27:21,542 line:-2
We can't wait to see what kind
of configurable, intelligent widgets


499
00:27:21,608 --> 00:27:23,110 line:-1
you will build.

