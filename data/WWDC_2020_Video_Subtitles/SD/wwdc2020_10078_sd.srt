1
00:00:03,804 --> 00:00:06,974 line:-1
Hello and welcome to WWDC.


2
00:00:08,742 --> 00:00:10,744 line:0
Hi. My name is Andy Aude,


3
00:00:10,811 --> 00:00:13,380 line:0
and I'm an iOS System Experience engineer.


4
00:00:13,847 --> 00:00:16,617 line:0
Today, I'm going to shed light
on the many reasons


5
00:00:16,683 --> 00:00:19,152 line:0
applications can be terminated
in the background


6
00:00:19,219 --> 00:00:20,521 line:0
and what you can do about it.


7
00:00:21,054 --> 00:00:24,558 line:-2
Just as you wouldn't want an app
to crash while it's in the foreground,


8
00:00:24,625 --> 00:00:28,262 line:-2
it can be equally as disruptive
to have it crash in the background.


9
00:00:28,795 --> 00:00:31,632 line:-1
For example, I have this to-do-list app


10
00:00:31,698 --> 00:00:34,668 line:-2
that launches to a main screen
with several lists.


11
00:00:35,202 --> 00:00:37,070 line:-1
I'll drill into the grocery list


12
00:00:37,137 --> 00:00:39,806 line:-2
and I'll start making a reminder
to buy a pineapple.


13
00:00:41,608 --> 00:00:43,744 line:-2
Now, say I have to leave
the app for a moment.


14
00:00:44,778 --> 00:00:46,847 line:-1
At some point, I'll come back to it.


15
00:00:47,548 --> 00:00:50,317 line:-2
Oh, no. Why did the app
launch from scratch?


16
00:00:50,884 --> 00:00:53,120 line:-2
And where's my reminder
to buy the pineapple?


17
00:00:54,154 --> 00:00:57,024 line:-2
This is because the app
was terminated in the background.


18
00:00:58,759 --> 00:01:02,129 line:-2
There are many reasons apps
get terminated in the background.


19
00:01:02,196 --> 00:01:04,765 line:-2
Here are the most common,
which we'll cover today.


20
00:01:05,599 --> 00:01:07,201 line:-1
Prior to iOS 14,


21
00:01:07,267 --> 00:01:10,070 line:-2
you only had a signal
for if two of these were happening.


22
00:01:11,271 --> 00:01:13,373 line:0
But now, in iOS 14,


23
00:01:13,440 --> 00:01:18,011 line:0
we have new API for you to find out
how often these terminations happen


24
00:01:18,078 --> 00:01:20,147 line:0
broken out by the specific reason.


25
00:01:21,148 --> 00:01:25,552 line:0
MXBackgroundExitData provides
the counts of each termination type.


26
00:01:26,687 --> 00:01:29,389 line:0
And we're even going to
give you counts for normal exits


27
00:01:29,456 --> 00:01:33,026 line:0
where the user explicitly terminated
your app in the app switcher.


28
00:01:33,760 --> 00:01:37,097 line:0
It should no longer be a mystery
why your app was killed.


29
00:01:38,932 --> 00:01:42,002 line:-2
Crashes are the most straightforward
type of termination.


30
00:01:42,469 --> 00:01:45,539 line:-2
Crashes are typically
due to segmentation faults,


31
00:01:45,606 --> 00:01:48,342 line:-1
illegal instructions and asserts.


32
00:01:48,408 --> 00:01:50,777 line:-1
These events all generate crash logs,


33
00:01:50,844 --> 00:01:54,681 line:-2
which are surfaced in the Xcode Organizer
for you automatically.


34
00:01:55,883 --> 00:01:58,986 line:0
If you want to learn more about crashes
and how to fix them,


35
00:01:59,052 --> 00:02:03,790 line:0
check out "Understanding Crashes
and Crash Logs" from WWDC 2018.


36
00:02:06,460 --> 00:02:08,695 line:0
In addition to the Xcode Organizer,


37
00:02:08,762 --> 00:02:11,265 line:0
new in MetricKit, we've added the ability


38
00:02:11,331 --> 00:02:14,801 line:0
to get crash info programmatically
directly from the device.


39
00:02:15,469 --> 00:02:18,972 line:0
The MXCrashDiagnostic object
contains everything you need


40
00:02:19,039 --> 00:02:21,642 line:0
to track down crashes
and other terminations.


41
00:02:22,442 --> 00:02:24,278 line:0
Check out "What's New in Metric Kit"


42
00:02:24,344 --> 00:02:27,681 line:0
to learn how to obtain these
and other diagnostic reports.


43
00:02:29,383 --> 00:02:32,686 line:0
Another common termination
is a watchdog event.


44
00:02:32,753 --> 00:02:36,223 line:0
This is a long hang
during key app transitions,


45
00:02:36,290 --> 00:02:40,427 line:0
such as launch, going background
and becoming foreground again.


46
00:02:41,728 --> 00:02:45,399 line:0
These transitions have a time limit
on the order of 20 seconds.


47
00:02:46,133 --> 00:02:50,204 line:0
Note that these terminations do not happen
while the Debugger is attached.


48
00:02:51,538 --> 00:02:55,175 line:0
Watchdogs usually indicate
something seriously wrong,


49
00:02:55,242 --> 00:02:57,411 line:0
like a deadlock, infinite loop


50
00:02:57,477 --> 00:03:01,315 line:0
or some other unending
synchronous work on the main thread.


51
00:03:02,649 --> 00:03:05,419 line:0
When these happen,
you can get a diagnostic report


52
00:03:05,485 --> 00:03:07,521 line:0
via MXCrashDiagnostic.


53
00:03:08,055 --> 00:03:10,290 line:0
Inside, the call graph is there,


54
00:03:10,357 --> 00:03:13,794 line:0
and it will show you the offending symbols
where your app is getting stuck.


55
00:03:14,194 --> 00:03:17,564 line:-2
Next, if your app relies
on background execution,


56
00:03:17,631 --> 00:03:20,701 line:-1
know there are strict CPU usage limits.


57
00:03:21,435 --> 00:03:25,339 line:-2
After a sustained high CPU load
in the background,


58
00:03:25,405 --> 00:03:28,375 line:-2
the system will generate
an energy exception report.


59
00:03:29,076 --> 00:03:33,313 line:-2
If the sustained work goes on long enough,
the system terminates the app.


60
00:03:34,715 --> 00:03:38,886 line:-2
CPU resource exception logs
are available in the Xcode Organizer,


61
00:03:39,486 --> 00:03:43,156 line:-1
as well as via MXCPUExceptionDiagnostic.


62
00:03:43,857 --> 00:03:45,792 line:-1
These reports contain call stacks


63
00:03:45,859 --> 00:03:48,328 line:-2
to identify what exactly
your app was doing


64
00:03:48,395 --> 00:03:49,897 line:-1
at the time of the termination.


65
00:03:50,864 --> 00:03:52,566 line:-1
Perhaps there's a bug in your code


66
00:03:52,633 --> 00:03:56,303 line:-2
causing excess CPU activity
that you can simply fix.


67
00:03:57,004 --> 00:04:00,240 line:-2
But if you need to do
truly intensive work in the background,


68
00:04:00,307 --> 00:04:03,544 line:-2
consider moving the work
into a background processing task.


69
00:04:04,211 --> 00:04:07,614 line:-2
The background processing task
gives you several minutes of runtime


70
00:04:07,681 --> 00:04:11,685 line:-2
while the device charges overnight,
without CPU resource limits.


71
00:04:13,220 --> 00:04:16,490 line:-1
Similar to avoiding excessive CPU usage,


72
00:04:16,557 --> 00:04:19,793 line:-2
it's important to keep memory usage
under control as well.


73
00:04:20,527 --> 00:04:23,964 line:-2
If your app's memory,
represented by this green square,


74
00:04:24,031 --> 00:04:26,200 line:-1
grows way too large,


75
00:04:26,266 --> 00:04:30,437 line:-2
the system will terminate it
right as it crosses the footprint limit.


76
00:04:30,504 --> 00:04:34,241 line:-2
The footprint limit is the same
in the foreground and the background.


77
00:04:35,642 --> 00:04:37,845 line:-1
Instruments and Xcode's Memory Debugger


78
00:04:37,911 --> 00:04:41,648 line:-2
help to track down the source
of excess memory use in your app.


79
00:04:42,449 --> 00:04:45,953 line:-2
Note that the limit does vary
from device to device.


80
00:04:46,019 --> 00:04:48,856 line:-1
Older devices generally have lower limits.


81
00:04:48,922 --> 00:04:52,492 line:-2
If your app targets devices
before iPhone 6s,


82
00:04:52,559 --> 00:04:56,230 line:-2
you'll want to aim to stay
under 200 megabytes at all times.


83
00:04:56,763 --> 00:04:59,399 line:-2
This will give you
more than enough safety margin.


84
00:05:00,701 --> 00:05:03,570 line:-2
Now, unlike
the footprint exceeded terminations,


85
00:05:03,637 --> 00:05:06,673 line:-2
we have another type
of memory-related termination:


86
00:05:07,341 --> 00:05:10,210 line:-1
the pressure exit, also known as jetsam.


87
00:05:10,277 --> 00:05:13,380 line:-2
This is the most common
background termination.


88
00:05:14,681 --> 00:05:18,519 line:-2
If these are happening, you're not
necessarily doing anything wrong,


89
00:05:18,585 --> 00:05:21,154 line:-2
it's just that the system
needs to free up memory


90
00:05:21,221 --> 00:05:24,458 line:-2
for the foreground application
and other running applications


91
00:05:24,525 --> 00:05:26,360 line:-1
like music and navigation apps.


92
00:05:27,027 --> 00:05:29,162 line:-1
If the foreground app grows too much,


93
00:05:29,229 --> 00:05:31,832 line:-2
your app, the green block,
will be terminated.


94
00:05:33,100 --> 00:05:35,769 line:-2
You can directly reduce
the rate of terminations


95
00:05:35,836 --> 00:05:37,571 line:-1
by shrinking your memory footprint


96
00:05:37,638 --> 00:05:40,941 line:-2
to be as small as possible
when you go background.


97
00:05:41,008 --> 00:05:44,745 line:-2
When going into the background,
aim for less than 50 megabytes.


98
00:05:44,811 --> 00:05:46,346 line:-1
The smaller, the better.


99
00:05:47,981 --> 00:05:52,686 line:-2
Consider dropping caches and any resources
you can just read back from disk.


100
00:05:52,753 --> 00:05:55,122 line:-2
You can always set things back
to the way they were


101
00:05:55,189 --> 00:05:56,590 line:-1
when going foreground again.


102
00:05:57,191 --> 00:06:00,494 line:-2
But remember, you can cause
other apps to jetsam,


103
00:06:00,561 --> 00:06:04,298 line:-2
so try to be a good steward
and minimize your foreground usage too.


104
00:06:05,799 --> 00:06:08,769 line:-2
And even if you manage to get
under 50 megabytes,


105
00:06:08,836 --> 00:06:11,805 line:-2
you can't eliminate the risk
of jetsam entirely.


106
00:06:11,872 --> 00:06:13,941 line:-1
Jetsam is inevitable.


107
00:06:14,007 --> 00:06:17,044 line:-1
When it happens is very unpredictable too.


108
00:06:17,110 --> 00:06:20,280 line:-2
It can happen in the mere seconds
after backgrounding your app


109
00:06:20,347 --> 00:06:25,185 line:-2
if the very next user action
requires an extreme amount of memory.


110
00:06:25,252 --> 00:06:29,356 line:-2
For example, launching camera
and taking dozens of photos in a burst.


111
00:06:30,190 --> 00:06:32,359 line:-1
So, what should you do about this?


112
00:06:32,426 --> 00:06:36,463 line:-2
You should absolutely save your state
upon going background.


113
00:06:36,530 --> 00:06:38,665 line:-1
Such that when your app is launched next,


114
00:06:38,732 --> 00:06:41,401 line:-2
it goes back to the same place
the user left off.


115
00:06:42,069 --> 00:06:43,904 line:-1
If they had been editing a text field,


116
00:06:43,971 --> 00:06:47,007 line:-2
users expect that text
to be there when they come back.


117
00:06:47,074 --> 00:06:51,211 line:-2
If media playback is involved,
be sure to restore the playback position.


118
00:06:52,012 --> 00:06:56,016 line:-2
You can do this with UIKit's
built-in State Restoration APIs


119
00:06:56,083 --> 00:06:58,652 line:-2
which do a lot
of the heavy lifting for you.


120
00:06:58,719 --> 00:07:01,421 line:-2
If you implement State Restoration
throughout your app,


121
00:07:01,488 --> 00:07:03,056 line:-1
many users won't even realize


122
00:07:03,123 --> 00:07:06,293 line:-2
the app had been killed in the background
and had to relaunch.


123
00:07:07,561 --> 00:07:10,898 line:-2
After jetsam, the second
most common termination reason


124
00:07:10,964 --> 00:07:12,866 line:-1
is a background task timeout.


125
00:07:13,667 --> 00:07:16,403 line:-2
When moving from the foreground
to the background,


126
00:07:16,470 --> 00:07:19,773 line:-2
you can get some extra runtime
to finish up critical work


127
00:07:19,840 --> 00:07:23,410 line:-2
by calling
UIApplication.beginBackgroundTask.


128
00:07:23,477 --> 00:07:26,346 line:-2
When you finish that work,
you call endBackgroundTask.


129
00:07:27,514 --> 00:07:28,715 line:-1
What you may not realize


130
00:07:28,782 --> 00:07:32,085 line:-2
is that if you don't explicitly call
endBackgroundTask,


131
00:07:32,152 --> 00:07:35,389 line:-2
the system will terminate the app
when the time runs out.


132
00:07:35,455 --> 00:07:39,593 line:-2
And that termination happens
only 30 seconds after suspending your app,


133
00:07:39,660 --> 00:07:41,562 line:-1
which can be massively frustrating


134
00:07:41,628 --> 00:07:44,164 line:-2
if your app doesn't implement
State Restoration.


135
00:07:45,199 --> 00:07:49,703 line:-2
Think of each task as a stick
of dynamite with a 30-second fuse.


136
00:07:50,304 --> 00:07:53,707 line:-2
Once your app enters the background,
the fuse is lit.


137
00:07:54,408 --> 00:07:57,811 line:-2
As long as you end all tasks
within 30 seconds,


138
00:07:57,878 --> 00:08:01,415 line:-2
your app will suspend gracefully
instead of terminating.


139
00:08:02,816 --> 00:08:06,320 line:-2
Now, we don't surface crash logs
when these terminations happen,


140
00:08:06,386 --> 00:08:09,623 line:-2
but we do surface the statistics
around their frequency


141
00:08:09,690 --> 00:08:11,892 line:-1
via MXBackgroundExitData.


142
00:08:13,193 --> 00:08:15,562 line:-2
The good news is that
these are preventable


143
00:08:15,629 --> 00:08:18,365 line:-2
with very careful handling
of your background tasks.


144
00:08:20,033 --> 00:08:22,970 line:-2
To prevent these terminations,
the first thing you should do


145
00:08:23,036 --> 00:08:26,173 line:-2
is switch to the named variant
of the UIKit API.


146
00:08:27,374 --> 00:08:30,277 line:-2
The named variant is helpful
because it lets you isolate


147
00:08:30,344 --> 00:08:33,714 line:-2
which of the potentially
many background tasks in your app


148
00:08:33,780 --> 00:08:35,048 line:-1
are not being ended.


149
00:08:35,682 --> 00:08:38,719 line:-2
Note that these terminations
don't reproduce in the Debugger.


150
00:08:39,318 --> 00:08:42,923 line:-2
So, to make things easier,
starting in iOS 13.4,


151
00:08:42,990 --> 00:08:44,958 line:-1
there's a new console message that prints


152
00:08:45,025 --> 00:08:47,794 line:-2
when a task has been held
for way too long.


153
00:08:48,695 --> 00:08:51,565 line:-2
These prints happen
even if your app is in the foreground.


154
00:08:51,632 --> 00:08:54,535 line:-2
So if you see these prints
while debugging your application,


155
00:08:54,601 --> 00:08:58,005 line:-2
you should do an audit of your calls
to beginBackgroundTask,


156
00:08:58,071 --> 00:09:01,275 line:-2
ensuring there's a matching call
to endBackgroundTask.


157
00:09:02,643 --> 00:09:06,079 line:-2
Another thing that can help
is the expiration handler.


158
00:09:06,146 --> 00:09:09,516 line:-2
It's good practice for all calls
to beginBackgroundTask


159
00:09:09,583 --> 00:09:11,451 line:-1
to provide an expiration handler.


160
00:09:12,186 --> 00:09:16,056 line:-2
Note that it's safe to call
endBackgroundTask inside the handler.


161
00:09:16,890 --> 00:09:20,093 line:-2
Be careful to not kick off
any additional expensive work


162
00:09:20,160 --> 00:09:23,297 line:-2
in this expiration handler
as you only have a few seconds.


163
00:09:24,531 --> 00:09:28,702 line:-2
Think of the expiration handler
as a safety net against terminations.


164
00:09:28,769 --> 00:09:32,306 line:-2
They shouldn't be the only place
you call endBackgroundTask.


165
00:09:32,372 --> 00:09:35,776 line:-2
You should call endBackgroundTask
when the work actually ends,


166
00:09:35,843 --> 00:09:38,011 line:-2
which allows the device
to go to sleep sooner


167
00:09:38,078 --> 00:09:39,546 line:-1
and preserve battery life.


168
00:09:41,148 --> 00:09:44,184 line:0
If you are seeing your app
is encountering these terminations


169
00:09:44,251 --> 00:09:46,587 line:0
via MXBackgroundExitData,


170
00:09:46,653 --> 00:09:49,790 line:0
and you are not able to reproduce
the issue in the Debugger,


171
00:09:49,857 --> 00:09:51,758 line:0
it can be useful to add telemetry


172
00:09:51,825 --> 00:09:54,361 line:0
to see which expiration handlers
are being called.


173
00:09:55,162 --> 00:09:57,798 line:0
To do this, first make a log handle.


174
00:09:58,832 --> 00:10:01,134 line:0
Then, drop an event signpost


175
00:10:01,201 --> 00:10:03,470 line:0
to say you've entered
the expiration handler.


176
00:10:04,404 --> 00:10:08,575 line:0
Then, do the necessary cleanup work
to make it safe to suspend your app.


177
00:10:09,676 --> 00:10:13,080 line:0
And lastly, drop a signpost
as you exit the handler.


178
00:10:14,681 --> 00:10:17,484 line:-2
To check how often
the signposts are being emitted,


179
00:10:17,551 --> 00:10:21,555 line:-2
you inspect the signpost counts
inside your MXMetricsPayload.


180
00:10:22,823 --> 00:10:24,558 line:-1
It can also indicate if your app


181
00:10:24,625 --> 00:10:27,561 line:-2
is not making it
through the expiration handler.


182
00:10:27,628 --> 00:10:29,963 line:-1
In this example, I have an imbalance.


183
00:10:30,631 --> 00:10:34,835 line:-2
Our entered signpost count
is greater than the exited signpost count.


184
00:10:35,502 --> 00:10:38,005 line:-1
This means the DatabaseExpirationHandler


185
00:10:38,071 --> 00:10:40,240 line:-1
is either hanging or crashing.


186
00:10:41,875 --> 00:10:44,411 line:0
You should be extra careful
in starting tasks


187
00:10:44,478 --> 00:10:47,147 line:0
while the application
is already in the background,


188
00:10:47,214 --> 00:10:49,816 line:0
since the expiration handler
won't be called


189
00:10:49,883 --> 00:10:52,819 line:0
if you start a task
with fewer than five seconds remaining.


190
00:10:54,054 --> 00:10:55,422 line:0
To guard against this,


191
00:10:55,489 --> 00:10:58,358 line:0
you can estimate how long
the work will take to complete


192
00:10:58,425 --> 00:11:00,294 line:0
using five as a lower bound.


193
00:11:01,295 --> 00:11:04,331 line:0
And then compare this
to how much background time remains.


194
00:11:04,998 --> 00:11:06,800 line:0
If enough background time remains,


195
00:11:06,867 --> 00:11:09,136 line:0
it's safe to call beginBackgroundTask.


196
00:11:10,070 --> 00:11:11,738 line:0
If not enough time remains,


197
00:11:11,805 --> 00:11:14,741 line:0
you could enqueue the work
as a background processing task


198
00:11:14,808 --> 00:11:17,878 line:0
to happen later, such as
when the device is charging.


199
00:11:19,580 --> 00:11:21,181 line:-1
The next thing to be careful with


200
00:11:21,248 --> 00:11:24,985 line:-2
is how you store
your UIBackgroundTaskIdentifiers.


201
00:11:25,052 --> 00:11:28,155 line:-2
If you're storing them
in an instance variable, like so,


202
00:11:28,222 --> 00:11:29,923 line:-1
it's easy to run into trouble.


203
00:11:31,225 --> 00:11:33,760 line:-1
In this example, I begin a background task


204
00:11:33,827 --> 00:11:37,431 line:-2
when the user taps
the beginDataExport button in my app.


205
00:11:38,398 --> 00:11:41,602 line:-2
After several seconds,
the data finishes exporting


206
00:11:41,668 --> 00:11:43,237 line:-1
and I get a completion handler.


207
00:11:43,770 --> 00:11:46,940 line:-2
If I tap the beginDataExport button
a few times,


208
00:11:47,007 --> 00:11:50,043 line:-2
I can end up with multiple
outstanding background tasks.


209
00:11:51,445 --> 00:11:55,983 line:-2
Remember, our instance variable
can only hold a single task at a time,


210
00:11:56,049 --> 00:11:59,319 line:-2
and so we'll leak all the identifiers
except the most recent one.


211
00:11:59,953 --> 00:12:02,756 line:-2
Fortunately, it's easy
to avoid this kind of bug.


212
00:12:03,790 --> 00:12:08,028 line:-2
The easiest fix is to use a local variable
instead of an instance variable


213
00:12:08,095 --> 00:12:10,797 line:-1
to hold your UIBackgroundTaskIdentifier.


214
00:12:12,065 --> 00:12:15,969 line:-2
In Swift, this local variable
is captured by closures,


215
00:12:16,036 --> 00:12:18,238 line:-2
so you can access it
in the completion block


216
00:12:18,305 --> 00:12:20,107 line:-1
and even the expiration handler.


217
00:12:20,874 --> 00:12:24,878 line:-2
With this strategy,
each invocation of beginDataExport


218
00:12:24,945 --> 00:12:27,080 line:-1
will track the task identifier


219
00:12:27,147 --> 00:12:30,918 line:-2
in a separate underlying
memory location, preventing a leak.


220
00:12:31,985 --> 00:12:35,455 line:-2
If you carefully audit all uses
of beginBackgroundTask


221
00:12:35,522 --> 00:12:37,891 line:-1
and endBackgroundTask in your application,


222
00:12:37,958 --> 00:12:41,929 line:-2
you should be able to eliminate
background task timeout terminations.


223
00:12:42,996 --> 00:12:45,432 line:-1
Now you know how to investigate crashes,


224
00:12:45,499 --> 00:12:47,701 line:-1
watchdogs, resource exceptions


225
00:12:47,768 --> 00:12:49,803 line:-1
and background task timeouts.


226
00:12:49,870 --> 00:12:53,540 line:-2
If you fix these,
your app will appear to launch much faster


227
00:12:53,607 --> 00:12:56,176 line:-2
since it'll resume
instead of launch from scratch.


228
00:12:56,877 --> 00:12:58,912 line:-1
As for the most common termination,


229
00:12:58,979 --> 00:13:00,747 line:-1
you can reduce the chance of jetsam


230
00:13:00,814 --> 00:13:04,284 line:-2
by using less than 50 megabytes
of memory when in the background.


231
00:13:04,351 --> 00:13:05,819 line:-1
The smaller, the better.


232
00:13:06,887 --> 00:13:10,357 line:-2
But jetsam is inevitable.
It's going to happen.


233
00:13:10,424 --> 00:13:13,260 line:-2
Make sure your app can recover
with State Restoration


234
00:13:13,327 --> 00:13:16,396 line:-2
and launch smoothly,
returning to where the user left off.


235
00:13:17,197 --> 00:13:18,599 line:-1
Doing these three things


236
00:13:18,665 --> 00:13:22,069 line:-2
will ensure a truly seamless
multitasking experience.


237
00:13:22,603 --> 00:13:24,972 line:-2
Thanks for watching
and happy termination hunting.

