1
00:00:03,804 --> 00:00:06,139 line:-1
Hello and welcome to WWDC.


2
00:00:08,242 --> 00:00:11,678 line:0
Hi, my name is Devin,
and I'm thrilled to be able to show you


3
00:00:11,745 --> 00:00:13,647 line:0
some of the many improvements
and new features


4
00:00:13,714 --> 00:00:15,549 line:0
added to Web Inspector in the last year.


5
00:00:16,783 --> 00:00:19,786 line:-2
To start,
let's enable Web Inspector in Safari.


6
00:00:20,687 --> 00:00:23,891 line:-1
First, click on the Safari menu bar item


7
00:00:23,957 --> 00:00:26,927 line:-2
and select "Preferences"
to show Safari's Preferences.


8
00:00:27,861 --> 00:00:29,363 line:-1
Go to the Advanced tab


9
00:00:29,429 --> 00:00:32,533 line:-2
and enable
"Show Develop menu in menu bar".


10
00:00:33,200 --> 00:00:36,537 line:-2
In the now-visible Develop menu,
click "Show Web Inspector".


11
00:00:37,571 --> 00:00:38,739 line:-1
And there it is.


12
00:00:39,573 --> 00:00:41,842 line:-1
Web Inspector is your one-stop shop


13
00:00:41,909 --> 00:00:45,045 line:-2
for all introspection
and debugging tools for Web content,


14
00:00:45,112 --> 00:00:47,981 line:-2
whether that be in Safari,
a WKWebView in an app


15
00:00:48,048 --> 00:00:49,583 line:-1
or even a JSContext.


16
00:00:50,117 --> 00:00:52,419 line:-1
Before we dive into individual features,


17
00:00:52,486 --> 00:00:54,421 line:-1
let's take a look at some of the changes


18
00:00:54,488 --> 00:00:56,857 line:-2
that have been made
to the overall interface.


19
00:00:58,525 --> 00:01:01,862 line:-2
We've merged the toolbar and dashboard
into the tab bar


20
00:01:01,929 --> 00:01:03,697 line:-1
to save on vertical space.


21
00:01:04,063 --> 00:01:06,166 line:-1
Additionally, we've tightened the spacing


22
00:01:06,233 --> 00:01:08,468 line:-2
around many controls
throughout the interface,


23
00:01:08,535 --> 00:01:11,338 line:-2
allowing you to see more content
in Web Inspector


24
00:01:11,405 --> 00:01:14,141 line:-2
without having to sacrifice
on visibility of content


25
00:01:14,208 --> 00:01:15,642 line:-1
in the inspected page.


26
00:01:17,010 --> 00:01:20,681 line:-2
These changes also are not limited
to when docked to the bottom


27
00:01:20,747 --> 00:01:23,584 line:-2
as they also apply
when docked to the side,


28
00:01:23,650 --> 00:01:26,653 line:-2
and even when undocked
into a separate window.


29
00:01:27,554 --> 00:01:29,723 line:-1
We've also improved accessibility support


30
00:01:29,790 --> 00:01:32,759 line:-2
for navigating around Web Inspector
when using a screen reader.


31
00:01:33,560 --> 00:01:35,462 line:-1
For those of you that prefer Dark Mode,


32
00:01:35,529 --> 00:01:37,531 line:-1
we've created Dark Mode variants


33
00:01:37,598 --> 00:01:40,267 line:-2
for all of the icons
throughout Web Inspector,


34
00:01:40,334 --> 00:01:42,269 line:-1
as well as added a way to toggle Dark Mode


35
00:01:42,336 --> 00:01:45,606 line:-2
independently from the rest of the system
in the Settings tab.


36
00:01:46,940 --> 00:01:49,009 line:-1
Because there's no longer a dashboard,


37
00:01:49,076 --> 00:01:52,646 line:-2
the Network tab now shows
the inspected page statistics


38
00:01:52,713 --> 00:01:54,715 line:-1
below the main table,


39
00:01:54,781 --> 00:01:58,785 line:-2
and has been expanded to include
the number of unique domains,


40
00:01:58,852 --> 00:02:02,656 line:-2
the total transfer size,
and a count of all redirects.


41
00:02:03,957 --> 00:02:07,761 line:-2
This year, we've added new features
to almost every tab,


42
00:02:07,828 --> 00:02:10,631 line:-1
as well as adding a few entirely new tabs.


43
00:02:11,265 --> 00:02:14,568 line:-2
So, let's go through each,
starting with the new Sources tab.


44
00:02:15,869 --> 00:02:18,372 line:-2
For those of you who've used
Web Inspector in the past,


45
00:02:18,438 --> 00:02:21,742 line:-2
the Sources tab takes
all of the best features


46
00:02:21,808 --> 00:02:24,378 line:-1
of the Resources tab and the Debugger tab,


47
00:02:24,444 --> 00:02:26,613 line:-1
and combines them into a single tab.


48
00:02:28,048 --> 00:02:30,617 line:-1
The Sources tab lists all resources


49
00:02:30,684 --> 00:02:34,288 line:-2
loaded by the inspected page
since Web Inspector was opened,


50
00:02:34,354 --> 00:02:37,157 line:-2
including long-lived things
like WebSockets,


51
00:02:37,224 --> 00:02:40,127 line:-2
or more ephemeral things
like XHRs or Fetches.


52
00:02:41,895 --> 00:02:46,266 line:-2
The Sources tab is also the primary place
for JavaScript debugging,


53
00:02:46,333 --> 00:02:49,603 line:-2
containing all of the JavaScript debugger
stepping controls


54
00:02:49,670 --> 00:02:52,506 line:-2
and many
of the breakpoint-adding capabilities


55
00:02:52,573 --> 00:02:53,874 line:-1
provided by Web Inspector.


56
00:02:55,542 --> 00:02:56,810 line:-1
And new this year,


57
00:02:56,877 --> 00:03:00,614 line:-2
the Sources tab is home
to the network-overriding capabilities


58
00:03:00,681 --> 00:03:02,216 line:-1
provided by Web Inspector,


59
00:03:02,282 --> 00:03:03,750 line:-1
which we'll see in a minute.


60
00:03:04,318 --> 00:03:05,385 line:-1
So, let's take a look.


61
00:03:07,120 --> 00:03:09,289 line:-1
When viewing resources in the Sources tab,


62
00:03:09,356 --> 00:03:10,757 line:-1
Web Inspector will provide


63
00:03:10,824 --> 00:03:13,493 line:-2
alternate representations
for applicable content,


64
00:03:13,560 --> 00:03:17,331 line:-2
giving you another way
to explore and examine the content


65
00:03:17,397 --> 00:03:20,300 line:-2
to understand what's going on,
or fix any issues.


66
00:03:20,968 --> 00:03:25,405 line:-2
Right now, we're looking at
the response content of this resource,


67
00:03:25,472 --> 00:03:28,208 line:-1
which we can see is HTML text.


68
00:03:29,042 --> 00:03:33,480 line:-2
In this case, the head is filled
with a lot of meta and link tags,


69
00:03:33,547 --> 00:03:37,551 line:-2
meaning that we'd have to scroll down
to see any of the content of the body.


70
00:03:38,285 --> 00:03:41,388 line:-2
Additionally, it's harder to see
where tags begin and end


71
00:03:41,455 --> 00:03:43,490 line:-2
when they're all scrunched up
like this in the text.


72
00:03:44,625 --> 00:03:46,793 line:-1
It would be a lot easier to navigate


73
00:03:46,860 --> 00:03:48,996 line:-2
if we could visualize
this response content


74
00:03:49,062 --> 00:03:52,332 line:-2
as a DOM tree instead,
just like in the Elements tab.


75
00:03:53,367 --> 00:03:57,771 line:-2
Clicking on the Response breadcrumb item
will show a drop-down


76
00:03:57,838 --> 00:04:02,409 line:-2
with all of the alternate representations
Web Inspector provides for this resource.


77
00:04:03,110 --> 00:04:05,479 line:-1
Selecting the response "DOM Tree"


78
00:04:05,546 --> 00:04:09,917 line:-2
will visualize the response content
as a DOM tree, just like we wanted.


79
00:04:11,084 --> 00:04:14,054 line:-2
Similar alternate representations
are also provided


80
00:04:14,121 --> 00:04:16,190 line:-1
for when the content is valid JSON,


81
00:04:16,255 --> 00:04:19,059 line:-2
showing an object tree
as if it were logged in the Console.


82
00:04:20,226 --> 00:04:22,996 line:-2
These alternate representations
are also available


83
00:04:23,063 --> 00:04:25,365 line:-1
when content is sent as part of a request.


84
00:04:26,633 --> 00:04:30,537 line:-2
In situations that you do find an issue
in the resource's response,


85
00:04:30,604 --> 00:04:32,372 line:-1
it's not always easy to make a change


86
00:04:32,439 --> 00:04:34,541 line:-2
to the source code
that the resource was loaded from


87
00:04:34,908 --> 00:04:36,877 line:-1
as it may exist on a faraway server,


88
00:04:36,944 --> 00:04:39,279 line:-2
or involve complicated
preprocessing steps.


89
00:04:40,314 --> 00:04:42,883 line:-2
I am very excited to tell you
that this year


90
00:04:42,950 --> 00:04:46,887 line:-2
Web Inspector has added a new feature
to solve this exact problem.


91
00:04:47,521 --> 00:04:49,523 line:-1
We call them "local overrides".


92
00:04:50,357 --> 00:04:54,494 line:-2
Creating one is as simple as clicking
the "Create Override" button


93
00:04:54,561 --> 00:04:56,096 line:-1
when viewing any resource,


94
00:04:56,163 --> 00:05:00,167 line:-2
which will automatically copy
the current contents of that resource


95
00:05:00,234 --> 00:05:02,870 line:-2
into a new local override
for that resource.


96
00:05:03,704 --> 00:05:06,807 line:-2
They are fully editable
and are preserved by Web Inspector


97
00:05:06,874 --> 00:05:09,142 line:-1
across sessions of both the inspected page


98
00:05:09,209 --> 00:05:10,777 line:-1
and Web Inspector itself.


99
00:05:11,512 --> 00:05:14,982 line:-2
So, let's try making a simple change
to see a local override in action.


100
00:05:16,149 --> 00:05:17,818 line:-1
Scrolling down in the content area,


101
00:05:17,885 --> 00:05:21,054 line:-1
we can see the WebKit text in the header.


102
00:05:21,889 --> 00:05:27,094 line:-2
We can change this WebKit text
to something like "Hello WWDC" instead.


103
00:05:28,161 --> 00:05:31,932 line:-2
If we take a look at the inspected page
and reload,


104
00:05:31,999 --> 00:05:36,503 line:-2
we can see that the WebKit text
in the header of the inspected page


105
00:05:36,570 --> 00:05:39,106 line:-1
changes to match the edits we just made.


106
00:05:41,074 --> 00:05:43,343 line:-1
Even better, local overrides support


107
00:05:43,410 --> 00:05:46,013 line:-2
more than just modifying
the response's content.


108
00:05:46,580 --> 00:05:49,683 line:-2
If you right-click on the local override
in Web Inspector


109
00:05:49,750 --> 00:05:52,786 line:-2
and select
the "Edit Local Override" action,


110
00:05:52,853 --> 00:05:56,790 line:-2
it's also possible to modify
the HTTP status code


111
00:05:56,857 --> 00:05:58,492 line:-1
or any HTTP headers.


112
00:05:59,326 --> 00:06:02,429 line:-2
When the inspected page
loads anything over the network


113
00:06:02,496 --> 00:06:05,399 line:-1
that matches any local override's URL,


114
00:06:05,465 --> 00:06:09,269 line:-2
the entire response,
including the HTTP status code


115
00:06:09,336 --> 00:06:12,906 line:-2
and any HTTP headers,
will be completely replaced


116
00:06:12,973 --> 00:06:15,409 line:-2
by the local override
as it's been configured.


117
00:06:16,243 --> 00:06:20,848 line:-2
Whenever this happens, the icon
of the overridden resource will change,


118
00:06:20,914 --> 00:06:22,850 line:-1
indicating that it was replaced.


119
00:06:23,517 --> 00:06:27,020 line:-2
And this overridden icon is shown anywhere
that the resource can be seen


120
00:06:27,087 --> 00:06:28,222 line:-1
throughout Web Inspector.


121
00:06:29,089 --> 00:06:30,123 line:-1
As further proof,


122
00:06:30,724 --> 00:06:33,894 line:-2
if we select the overridden resource
and scroll down,


123
00:06:34,661 --> 00:06:37,898 line:-2
the same modifications we made
to the content are also present.


124
00:06:38,832 --> 00:06:42,436 line:-2
All resources, including
the main resource like we just saw,


125
00:06:42,503 --> 00:06:45,105 line:-1
and even non-text resources like images,


126
00:06:45,172 --> 00:06:48,575 line:-2
can be overridden and fully configured
from within Web Inspector.


127
00:06:49,142 --> 00:06:50,177 line:-1
Sometimes, however,


128
00:06:50,244 --> 00:06:53,614 line:-2
it's not necessarily a particular resource
that you wanna change,


129
00:06:53,680 --> 00:06:56,950 line:-2
but really a JavaScript API
provided by WebKit.


130
00:06:57,651 --> 00:07:01,722 line:-2
In these cases, you'll want to use
the new Inspector Bootstrap Script,


131
00:07:02,122 --> 00:07:05,025 line:-2
which can be added
from the "Add Resource" button


132
00:07:05,092 --> 00:07:07,327 line:-2
in the bottom corner
of the navigation sidebar


133
00:07:07,394 --> 00:07:12,132 line:0
in the Sources tab by selecting
the "Inspector Bootstrap Script" action.


134
00:07:13,600 --> 00:07:16,603 line:-2
Similar to how local overrides
allow you to modify resources


135
00:07:16,670 --> 00:07:19,806 line:-2
loaded over the network,
the Inspector Bootstrap Script


136
00:07:19,873 --> 00:07:23,911 line:-2
can be thought of as a way to modify
the JavaScript API surface itself.


137
00:07:25,245 --> 00:07:27,548 line:-2
The contents
of the Inspector Bootstrap Script


138
00:07:27,614 --> 00:07:31,451 line:-2
are guaranteed to run before anything else
in the inspected page,


139
00:07:31,518 --> 00:07:33,187 line:-1
hence the "bootstrap" name.


140
00:07:33,954 --> 00:07:37,424 line:-2
This allows you to do things
like swizzle built-in functions


141
00:07:37,491 --> 00:07:38,725 line:-1
to see where they get called,


142
00:07:38,792 --> 00:07:40,360 line:-1
or set up some global state


143
00:07:40,427 --> 00:07:43,530 line:-2
that causes your code to log
additional debugging information.


144
00:07:44,731 --> 00:07:47,701 line:-2
Just like local overrides,
the Inspector Bootstrap Script


145
00:07:47,768 --> 00:07:50,304 line:-2
is preserved by Web Inspector
across sessions


146
00:07:50,370 --> 00:07:53,707 line:-2
of both the inspected page
and Web Inspector itself.


147
00:07:54,408 --> 00:07:56,310 line:-1
Speaking of debugging JavaScript,


148
00:07:56,376 --> 00:07:59,413 line:-2
we've also added a number
of new global breakpoints.


149
00:08:00,948 --> 00:08:02,649 line:-1
The Debugger Statements breakpoint


150
00:08:02,716 --> 00:08:05,485 line:-2
controls whether or not
JavaScript execution


151
00:08:05,552 --> 00:08:07,521 line:-1
is paused at debugger statements.


152
00:08:08,155 --> 00:08:13,160 line:-2
Previously, the only way to control this
was to completely disable all breakpoints.


153
00:08:14,094 --> 00:08:16,930 line:-2
We felt that this was
unnecessarily restrictive,


154
00:08:16,997 --> 00:08:18,966 line:-1
so we created this separate control


155
00:08:19,032 --> 00:08:21,802 line:-2
to allow you to use
other types of breakpoints


156
00:08:21,869 --> 00:08:25,205 line:-2
while simultaneously disabling
debugger statements specifically.


157
00:08:25,772 --> 00:08:29,276 line:-2
The other new breakpoints,
since they relate to specific APIs,


158
00:08:29,643 --> 00:08:32,846 line:-2
must be enabled by clicking
on the "Add Breakpoint" button,


159
00:08:32,913 --> 00:08:35,582 line:-1
which will show a menu with actions


160
00:08:35,649 --> 00:08:38,284 line:-2
that each enable
one of these new different breakpoints.


161
00:08:39,385 --> 00:08:41,221 line:-2
So, let's go through each of them
one by one.


162
00:08:43,056 --> 00:08:46,760 line:-2
The All Microtasks breakpoint
will pause JavaScript execution


163
00:08:46,827 --> 00:08:49,696 line:-2
whenever any microtask
is about to be executed,


164
00:08:49,763 --> 00:08:51,398 line:-1
such as from Promise objects


165
00:08:51,465 --> 00:08:53,767 line:-1
or the queueMicrotask global function.


166
00:08:54,468 --> 00:08:57,571 line:-2
Along these lines,
the All Animation Frames breakpoint


167
00:08:57,638 --> 00:09:00,140 line:-2
does the same
for requestAnimationFrame callbacks,


168
00:09:01,008 --> 00:09:04,444 line:-2
the All Timeouts breakpoint
does the same for setTimeout callbacks,


169
00:09:05,145 --> 00:09:09,449 line:-2
and the All Intervals breakpoint
does the same for setInterval callbacks.


170
00:09:11,285 --> 00:09:14,521 line:-2
Lastly, the All Events breakpoint
will pause


171
00:09:14,588 --> 00:09:17,658 line:-2
before any callback is invoked
for any eventListener,


172
00:09:17,724 --> 00:09:19,693 line:-1
even those unrelated to the DOM.


173
00:09:20,294 --> 00:09:24,498 line:-2
But sometimes these global breakpoints
are almost too global


174
00:09:24,565 --> 00:09:27,334 line:-2
in the sense that they pause
more often than desired.


175
00:09:28,468 --> 00:09:31,672 line:-2
Let's take a look at an example
using the All Events breakpoint.


176
00:09:33,407 --> 00:09:35,709 line:-1
I have a simple page that uses jQuery


177
00:09:35,776 --> 00:09:37,978 line:-2
to add an EventListener
to a button element.


178
00:09:38,579 --> 00:09:41,248 line:-2
Because I've enabled
the All Events breakpoint,


179
00:09:41,315 --> 00:09:44,418 line:-2
I would expect to pause
inside this EventListener.


180
00:09:45,118 --> 00:09:48,422 line:-2
But in reality, jQuery wraps
my EventListener callback


181
00:09:48,488 --> 00:09:49,890 line:-1
with its own logic,


182
00:09:49,957 --> 00:09:54,228 line:-2
so instead we pause
in jQuery's EventListener wrapper,


183
00:09:54,294 --> 00:09:57,564 line:-2
which is not really ideal
as none of this is my code.


184
00:09:58,165 --> 00:09:59,766 line:-1
Really, what I want to do


185
00:09:59,833 --> 00:10:05,138 line:-2
is have this breakpoint pause in my code
after all of jQuery's code has run.


186
00:10:06,406 --> 00:10:10,444 line:-2
Script blackboxing is a new feature
that allows you to do just that,


187
00:10:10,511 --> 00:10:12,546 line:-1
instructing the JavaScript debugger


188
00:10:12,613 --> 00:10:15,816 line:-2
to defer any pause
that would occur in a script


189
00:10:15,883 --> 00:10:19,753 line:-2
to pause at the first expression
to execute outside of that script.


190
00:10:20,587 --> 00:10:22,456 line:-1
We can do this to jQuery


191
00:10:22,523 --> 00:10:27,027 line:-2
by hovering over the jQuery resource
in the navigation sidebar


192
00:10:27,094 --> 00:10:29,096 line:-1
and clicking on the button that appears.


193
00:10:29,796 --> 00:10:32,599 line:-1
Now, if we trigger this breakpoint again,


194
00:10:32,666 --> 00:10:35,569 line:-2
we should pause
in our EventListener instead.


195
00:10:36,803 --> 00:10:37,971 line:-1
If, for some reason,


196
00:10:38,038 --> 00:10:41,141 line:-2
you still do want to dig
into the library or framework code,


197
00:10:41,608 --> 00:10:45,612 line:-2
Web Inspector will still show
any call frames from blackboxed script,


198
00:10:46,313 --> 00:10:48,982 line:-2
graying them out
to indicate their blackbox nature.


199
00:10:49,650 --> 00:10:51,518 line:-1
For larger libraries and frameworks,


200
00:10:51,585 --> 00:10:55,222 line:-2
it's also possible to blackbox
multiple scripts at once


201
00:10:55,289 --> 00:10:57,925 line:-1
by configuring regular expression patterns


202
00:10:57,991 --> 00:11:00,794 line:-2
to match against the script's URL
in the Settings tab.


203
00:11:03,163 --> 00:11:04,998 line:-2
In addition to some
of the global breakpoints


204
00:11:05,065 --> 00:11:08,569 line:-2
we've seen so far, Web Inspector
also allows you to set breakpoints


205
00:11:08,635 --> 00:11:11,972 line:-2
on specific lines of JavaScript,
even after pretty-printing.


206
00:11:12,673 --> 00:11:16,343 line:-2
Clicking on any line
in the gutter area of the content preview


207
00:11:16,410 --> 00:11:18,612 line:-1
will add a JavaScript breakpoint


208
00:11:18,679 --> 00:11:21,148 line:-2
that will pause right before
that line executes.


209
00:11:21,915 --> 00:11:25,385 line:-2
Because JavaScript is so flexible
with its syntax, however,


210
00:11:25,452 --> 00:11:27,187 line:-1
it's not uncommon to see


211
00:11:27,254 --> 00:11:30,557 line:-2
lots of operations combined
onto a single line,


212
00:11:30,624 --> 00:11:32,593 line:-1
using a mix of various operators.


213
00:11:32,659 --> 00:11:35,195 line:-1
In this case, the logical "or" operator.


214
00:11:36,330 --> 00:11:40,467 line:-2
Previously, if I wanted to pause
inside the "c" function call


215
00:11:40,534 --> 00:11:43,537 line:-2
and I didn't know where "c"
was declared to set a breakpoint,


216
00:11:44,071 --> 00:11:45,405 line:-1
the only way to do this


217
00:11:45,472 --> 00:11:49,543 line:-2
would be to use the Step In
JavaScript debugger action


218
00:11:49,610 --> 00:11:51,478 line:-1
to step in to "a"


219
00:11:51,545 --> 00:11:55,449 line:-1
and then step out to move past "a",


220
00:11:55,516 --> 00:11:59,119 line:-1
then step in again to go inside "b"


221
00:11:59,186 --> 00:12:02,789 line:-2
and finally, step back out again
to arrive at "c".


222
00:12:03,490 --> 00:12:08,028 line:-2
This is a very tedious process
with lots of opportunity for mistakes,


223
00:12:08,095 --> 00:12:09,997 line:-1
which can be incredibly frustrating,


224
00:12:10,063 --> 00:12:13,100 line:-2
especially in cases
where the starting state is hard to reach.


225
00:12:13,534 --> 00:12:17,237 line:-2
This has led us to introduce
a new JavaScript debugger action


226
00:12:17,304 --> 00:12:18,939 line:-1
which we call "Step".


227
00:12:20,641 --> 00:12:24,578 line:-2
Unlike the Step Over
JavaScript debugger action,


228
00:12:24,645 --> 00:12:26,847 line:-1
which resumes and re-pauses execution


229
00:12:26,914 --> 00:12:29,516 line:-2
before the next statement
in the current call frame,


230
00:12:29,583 --> 00:12:34,655 line:-2
which, in this case, would be after
the entire foo variable declaration,


231
00:12:34,721 --> 00:12:37,758 line:-1
this new Step debugger action


232
00:12:37,824 --> 00:12:40,727 line:-2
will resume and re-pause
JavaScript execution


233
00:12:40,794 --> 00:12:43,530 line:-2
before the next expression
in the current call frame.


234
00:12:44,965 --> 00:12:47,167 line:-1
And just like that, we've resumed,


235
00:12:47,234 --> 00:12:50,671 line:-2
executed "a" and re-paused
on the same line


236
00:12:50,737 --> 00:12:53,173 line:-2
without ever having
to step in or step out.


237
00:12:54,041 --> 00:12:59,413 line:-2
Once more, we can Step to resume,
execute "b",


238
00:12:59,479 --> 00:13:02,416 line:-2
and re-pause,
arriving at the call for "c".


239
00:13:03,517 --> 00:13:07,888 line:-2
The Step JavaScript debugger action
provides more fine-grained control


240
00:13:07,955 --> 00:13:12,192 line:-2
over how the JavaScript debugger
execution head moves through the program,


241
00:13:12,259 --> 00:13:16,163 line:-2
allowing for fewer stepping mistakes,
and even less actions in total.


242
00:13:16,897 --> 00:13:20,200 line:-2
But sometimes scripts
are inlined into HTML.


243
00:13:20,834 --> 00:13:22,970 line:-1
In the past, there was no way


244
00:13:23,036 --> 00:13:25,105 line:-2
to pretty-print
this inlined script content,


245
00:13:25,172 --> 00:13:27,174 line:-1
or even any of the surrounding HTML.


246
00:13:27,808 --> 00:13:30,878 line:-2
As a result, it was often difficult
to set breakpoints,


247
00:13:30,944 --> 00:13:33,647 line:-2
or even step through code
in a nicely readable way.


248
00:13:34,748 --> 00:13:37,184 line:-2
I'm very happy to say
that in the latest Safari,


249
00:13:37,251 --> 00:13:39,920 line:-1
Web Inspector now supports formatting HTML


250
00:13:39,987 --> 00:13:44,491 line:-2
and other XML-like content,
including inline scripts and style sheets,


251
00:13:44,558 --> 00:13:48,128 line:-2
allowing support for all of the existing
JavaScript debugger


252
00:13:48,195 --> 00:13:49,863 line:-1
and stepping capabilities too.


253
00:13:50,631 --> 00:13:52,933 line:-1
Simply click on the "Pretty-Print" button


254
00:13:53,000 --> 00:13:55,769 line:-2
in the top right
of any text-based content preview


255
00:13:55,836 --> 00:14:00,641 line:-2
to toggle between the original content
and the pretty-printed version.


256
00:14:01,875 --> 00:14:05,579 line:-2
Web Inspector will also attempt to detect
when HTML has been minified


257
00:14:05,646 --> 00:14:07,848 line:-1
and automatically toggle pretty-printing,


258
00:14:07,915 --> 00:14:11,552 line:-2
just like it has always done
for JavaScript and CSS content.


259
00:14:13,020 --> 00:14:15,289 line:-2
So, speaking
of Web Inspector functionality,


260
00:14:15,355 --> 00:14:18,125 line:-2
there's so much more
than just viewing resources.


261
00:14:18,192 --> 00:14:20,761 line:-2
So, let's move on
to some of the other powerful


262
00:14:20,827 --> 00:14:22,462 line:-1
or more specialized features,


263
00:14:22,529 --> 00:14:24,565 line:-1
starting with the Timelines tab.


264
00:14:25,832 --> 00:14:27,301 line:-1
The Timelines tab contains


265
00:14:27,367 --> 00:14:29,736 line:-2
the majority
of performance-profiling tools


266
00:14:29,803 --> 00:14:31,104 line:-1
offered by Web Inspector.


267
00:14:32,439 --> 00:14:37,177 line:-2
It captures activity in the inspected page
during what we call "a recording",


268
00:14:37,244 --> 00:14:39,012 line:-1
which organizes and plots the data


269
00:14:39,079 --> 00:14:41,081 line:-2
into one of a handful
of different timelines


270
00:14:41,148 --> 00:14:42,449 line:-1
based on the type of data.


271
00:14:43,951 --> 00:14:46,987 line:-2
Timeline recordings can also be
exported and imported,


272
00:14:47,054 --> 00:14:49,790 line:-2
allowing you to share them with others,
or save them for later use.


273
00:14:51,825 --> 00:14:54,194 line:-2
The main change this year
in the Timelines tab


274
00:14:54,261 --> 00:14:56,730 line:-2
is an introduction
of an entirely new timeline,


275
00:14:56,797 --> 00:15:01,568 line:-2
which you can activate by clicking
the "Edit" button in the main graph area.


276
00:15:02,503 --> 00:15:04,538 line:-1
This will put us in Edit mode,


277
00:15:04,605 --> 00:15:07,508 line:-2
where we can enable or disable
any of the various timelines.


278
00:15:08,375 --> 00:15:13,046 line:-2
The new timeline we've added this year
is the Media and Animations timeline,


279
00:15:13,113 --> 00:15:17,217 line:-2
which captures events related
to media elements, like video or audio,


280
00:15:17,284 --> 00:15:22,222 line:-2
and also captures the life cycle
of CSS animations and CSS transitions.


281
00:15:23,390 --> 00:15:27,461 line:-2
After checking the checkbox to enable
the Media and Animations timeline,


282
00:15:27,528 --> 00:15:30,230 line:-2
and clicking the "Done" button
to leave Edit mode,


283
00:15:31,031 --> 00:15:33,000 line:-1
if we reload the inspected page,


284
00:15:33,066 --> 00:15:38,472 line:-2
we can see a list of all media elements,
CSS animations and CSS transitions


285
00:15:38,539 --> 00:15:41,008 line:-2
that have had any activity
during the recorded interval.


286
00:15:42,142 --> 00:15:46,580 line:-2
Each individual media element,
CSS animation or CSS transition


287
00:15:46,647 --> 00:15:48,982 line:-1
has its own row in the table,


288
00:15:49,049 --> 00:15:51,185 line:-1
with links to any related DOM node,


289
00:15:51,251 --> 00:15:53,487 line:-2
or information about
the CSS animation name,


290
00:15:53,554 --> 00:15:55,088 line:-1
or CSS transition property.


291
00:15:56,356 --> 00:15:58,158 line:-1
The Media and Animations timeline


292
00:15:58,225 --> 00:16:02,129 line:-2
can also be used to correlate activity
captured in other timelines


293
00:16:02,196 --> 00:16:06,366 line:-2
with state changes in any media elements,
such as a video being paused,


294
00:16:06,433 --> 00:16:10,838 line:-2
or the creation or destruction
of any CSS animations or CSS transitions,


295
00:16:10,904 --> 00:16:13,473 line:-2
to figure out what's going on
and understand why.


296
00:16:15,008 --> 00:16:17,678 line:-2
And that's a quick look
at the Media and Animations timeline


297
00:16:17,744 --> 00:16:18,846 line:-1
in the Timelines tab.


298
00:16:19,446 --> 00:16:21,515 line:-1
Let's move on to the Storage tab.


299
00:16:22,749 --> 00:16:26,320 line:-2
So, the Storage tab
contains a list of all of the data


300
00:16:26,386 --> 00:16:28,856 line:-2
stored by the inspected page
in the browser,


301
00:16:28,922 --> 00:16:32,226 line:-2
via things like cookies
or localStorage or IndexedDB.


302
00:16:32,993 --> 00:16:36,096 line:-2
This year,
we've added filtering capabilities


303
00:16:36,163 --> 00:16:37,664 line:-1
for all storage types,


304
00:16:37,731 --> 00:16:40,901 line:-2
and improved editing
and deleting capabilities,


305
00:16:40,968 --> 00:16:42,436 line:-1
especially for cookies.


306
00:16:44,004 --> 00:16:45,606 line:-1
The new filtering capabilities


307
00:16:45,672 --> 00:16:48,609 line:-2
take the form
of an always-visible filter bar


308
00:16:48,675 --> 00:16:50,944 line:-1
shown at the top of most storage views.


309
00:16:51,612 --> 00:16:52,846 line:-1
As an example,


310
00:16:52,913 --> 00:16:56,683 line:-2
filtering cookies is as simple
as typing some text into the filter bar,


311
00:16:56,750 --> 00:16:59,953 line:-2
which is compared
against the various fields of each cookie,


312
00:17:00,020 --> 00:17:02,055 line:-1
hiding any rows that had no matches.


313
00:17:03,757 --> 00:17:06,660 line:-2
The second major feature
is the ability to edit cookies.


314
00:17:07,594 --> 00:17:09,695 line:-1
Double-clicking on one of a cookie's cells


315
00:17:09,762 --> 00:17:14,001 line:-2
will show a popover with inputs
for each field of that cookie.


316
00:17:14,902 --> 00:17:17,304 line:-1
All modifications made in this popover


317
00:17:17,371 --> 00:17:19,906 line:-2
will be applied
as soon as the popover is dismissed.


318
00:17:21,040 --> 00:17:23,644 line:-2
It is also possible
to add entirely new cookies


319
00:17:23,710 --> 00:17:26,146 line:-1
by clicking on the "Add Cookie" button,


320
00:17:26,213 --> 00:17:28,248 line:-1
which will show a similar popover,


321
00:17:28,315 --> 00:17:30,751 line:-2
but this time
all of the inputs will be empty.


322
00:17:31,385 --> 00:17:34,988 line:-2
Note that a name is required
in order for a cookie to be added.


323
00:17:35,923 --> 00:17:37,558 line:-1
Just like HTTP cookies


324
00:17:37,624 --> 00:17:39,726 line:-1
or those set by document.cookie,


325
00:17:39,793 --> 00:17:43,330 line:-2
they will persist beyond Web Inspector,
so be careful what you add.


326
00:17:45,199 --> 00:17:48,101 line:-2
But many other features of the Web
are not persistent,


327
00:17:48,168 --> 00:17:50,437 line:-2
so let's take a look at tooling
for some of those,


328
00:17:51,104 --> 00:17:53,207 line:-1
starting with the all-new Graphics tab.


329
00:17:54,775 --> 00:17:57,878 line:-2
For those of you who've used
Web Inspector in the past few years,


330
00:17:57,945 --> 00:18:00,214 line:-1
you may remember using the Canvas tab.


331
00:18:00,981 --> 00:18:05,252 line:-2
The Graphics tab expands the scope
and functionality of the Canvas tab,


332
00:18:06,019 --> 00:18:08,822 line:-2
still showing all
canvas contexts and shaders,


333
00:18:08,889 --> 00:18:11,925 line:-2
and supporting taking recordings
of JavaScript API calls


334
00:18:11,992 --> 00:18:13,427 line:-1
made with canvas contexts,


335
00:18:14,061 --> 00:18:16,563 line:-1
but now also listing all Web Animations,


336
00:18:16,630 --> 00:18:20,467 line:-2
including those created
by CSS animations and CSS transitions,


337
00:18:20,534 --> 00:18:22,936 line:-1
providing in-depth information about each.


338
00:18:24,571 --> 00:18:26,173 line:-1
The previously available information


339
00:18:26,240 --> 00:18:29,009 line:-2
about all canvas contexts
in the inspected page


340
00:18:29,076 --> 00:18:32,346 line:-2
is still shown
in the Canvases section at the top,


341
00:18:32,880 --> 00:18:36,783 line:-2
followed by the new sections
for the various types of animations


342
00:18:36,850 --> 00:18:38,952 line:-1
created by the Web Animations API,


343
00:18:39,453 --> 00:18:41,221 line:-1
separated by how they're created,


344
00:18:41,288 --> 00:18:45,125 line:-2
such as from JavaScript,
CSS animations or CSS transitions.


345
00:18:46,360 --> 00:18:50,264 line:-2
Clicking on one of these animations
will expand the Details sidebar,


346
00:18:50,330 --> 00:18:53,634 line:-2
which contains all of the information
about the selected animation,


347
00:18:54,168 --> 00:18:57,838 line:-2
such as the ID, which can be
thought of as the animation's name,


348
00:18:58,372 --> 00:19:00,507 line:-1
the associated node of the animation,


349
00:19:01,175 --> 00:19:02,776 line:-1
the configured timing parameters,


350
00:19:02,843 --> 00:19:05,579 line:-2
like the number of iterations
or the total duration,


351
00:19:06,380 --> 00:19:07,681 line:-1
the keyframes list,


352
00:19:07,748 --> 00:19:11,151 line:-2
each item containing
a list of CSS properties and values


353
00:19:11,218 --> 00:19:13,887 line:-2
that are interpolated between
as the animation progresses,


354
00:19:14,488 --> 00:19:18,692 line:-2
and finally, for animations
that are created by the JavaScript API,


355
00:19:18,759 --> 00:19:21,261 line:-2
a backtrace for how the animation
was created.


356
00:19:22,362 --> 00:19:25,699 line:-2
Clicking the "markup" icon
in the header of any animation


357
00:19:25,766 --> 00:19:29,436 line:-2
will show a context menu
with a number of utility actions,


358
00:19:29,503 --> 00:19:31,371 line:-1
such as "Log Animation",


359
00:19:31,438 --> 00:19:35,409 line:-2
which will save the JavaScript object
for that Web Animation


360
00:19:35,475 --> 00:19:37,711 line:-1
in a temporary variable in the Console,


361
00:19:37,778 --> 00:19:39,546 line:-1
in this case "dollar sign one",


362
00:19:40,080 --> 00:19:43,050 line:-2
allowing us to have easy access
for manipulating it


363
00:19:43,116 --> 00:19:45,419 line:-1
using the powerful Web Animations API.


364
00:19:47,120 --> 00:19:49,990 line:0
For more information
about the new Web Animations API,


365
00:19:50,057 --> 00:19:51,158 line:0
be sure to check out


366
00:19:51,225 --> 00:19:53,026 line:0
the "What's New for Web Developers"
session


367
00:19:53,093 --> 00:19:54,194 line:0
in your Developer App.


368
00:19:55,796 --> 00:19:59,266 line:-2
But sometimes
animations are configured incorrectly,


369
00:19:59,333 --> 00:20:01,401 line:-1
which causes performance problems.


370
00:20:01,869 --> 00:20:04,137 line:-2
So, let's take a look
at the new Layers tab


371
00:20:04,204 --> 00:20:05,405 line:-1
to see how it can help.


372
00:20:06,640 --> 00:20:11,745 line:-2
The Layers tab shows a live view
of the layer tree of the inspected page,


373
00:20:11,812 --> 00:20:16,216 line:-2
listing the memory cost
and the paint count for each layer.


374
00:20:17,684 --> 00:20:21,121 line:-2
While it's not exactly one-to-one,
it's generally a good idea


375
00:20:21,188 --> 00:20:24,925 line:-2
to keep the number of unintended layers
as low as possible,


376
00:20:24,992 --> 00:20:26,393 line:-1
as a greater number of layers


377
00:20:26,460 --> 00:20:29,129 line:-2
can be associated
with increased memory use


378
00:20:29,196 --> 00:20:30,631 line:-1
and worse performance.


379
00:20:31,031 --> 00:20:33,767 line:-2
The key word there, though,
is "unintended,"


380
00:20:33,834 --> 00:20:37,738 line:-2
which really requires you,
the developer, to know your layout


381
00:20:37,804 --> 00:20:41,074 line:-2
and when things should
and should not create a layer.


382
00:20:41,141 --> 00:20:43,610 line:-1
To assist with this, clicking on a layer,


383
00:20:43,677 --> 00:20:47,314 line:-2
either in the visualization itself
or in the Details sidebar,


384
00:20:47,381 --> 00:20:51,518 line:-2
will show information about that layer,
such as why it was created.


385
00:20:52,152 --> 00:20:54,288 line:-2
In the case
of the currently selected layer,


386
00:20:54,354 --> 00:20:56,490 line:-1
it was created because the associated node


387
00:20:56,557 --> 00:21:00,894 line:-2
was being animated by CSS
and had a CSS willChange property.


388
00:21:02,229 --> 00:21:04,131 line:-1
The entire layer tree visualization


389
00:21:04,198 --> 00:21:07,267 line:-2
can also be manipulated
using common orbit controls,


390
00:21:07,334 --> 00:21:11,505 line:-2
such as rotating vertically
by clicking and dragging up and down...


391
00:21:14,341 --> 00:21:17,377 line:-2
rotating horizontally
by clicking and dragging left and right...


392
00:21:21,448 --> 00:21:23,417 line:-1
zooming by scrolling in and out...


393
00:21:25,552 --> 00:21:28,188 line:-2
and panning by right-clicking
and dragging,


394
00:21:28,255 --> 00:21:30,791 line:-1
making it easy to find layers visually


395
00:21:30,858 --> 00:21:32,392 line:-1
to find out more about them.


396
00:21:33,393 --> 00:21:36,230 line:-2
So, now let's move on to our final tab,
the Console.


397
00:21:36,930 --> 00:21:40,534 line:-2
The Console tab lists
all of the various messages


398
00:21:40,601 --> 00:21:42,636 line:-1
logged by the inspected page,


399
00:21:42,703 --> 00:21:46,507 line:-2
and allows arbitrary JavaScript evaluation
in the inspected page.


400
00:21:47,774 --> 00:21:51,678 line:-2
Special functionality is also exposed
while evaluating JavaScript,


401
00:21:51,745 --> 00:21:55,148 line:-2
intended to make inspecting
and debugging JavaScript easier


402
00:21:55,215 --> 00:21:58,785 line:-2
by providing more information
previously known only to WebKit.


403
00:21:59,887 --> 00:22:03,624 line:-2
There are a whole bunch of these
Console-only, specially-exposed bits


404
00:22:03,690 --> 00:22:05,859 line:-1
of functionality that are new this year,


405
00:22:05,926 --> 00:22:08,395 line:-2
but there are two
that are particularly noteworthy.


406
00:22:08,862 --> 00:22:11,431 line:-1
The first is called QueryInstances.


407
00:22:12,165 --> 00:22:15,169 line:0
So, let's imagine a simple
JavaScript class hierarchy


408
00:22:15,235 --> 00:22:18,605 line:0
of an Animal base class
with a Pet subclass.


409
00:22:19,506 --> 00:22:23,377 line:0
Now, let's say that we want to find
all instances of this Pet subclass.


410
00:22:24,011 --> 00:22:27,214 line:0
One way to do it would be
to examine a captured heap snapshot


411
00:22:27,281 --> 00:22:28,849 line:0
in the Timelines tab,


412
00:22:28,916 --> 00:22:31,151 line:0
but that includes
a lot of other information


413
00:22:31,218 --> 00:22:32,586 line:0
that is likely not relevant.


414
00:22:33,153 --> 00:22:37,124 line:0
So instead, QueryInstances,
when given a constructor,


415
00:22:37,191 --> 00:22:39,526 line:0
will scan the entire JavaScript heap


416
00:22:39,593 --> 00:22:43,564 line:0
for instances of objects that inherit
from that given constructor,


417
00:22:43,630 --> 00:22:45,065 line:0
returning them all in an array


418
00:22:45,132 --> 00:22:47,167 line:0
that can be further manipulated
in the Console.


419
00:22:47,835 --> 00:22:49,002 line:0
As we can see here,


420
00:22:49,069 --> 00:22:51,672 line:0
there is one instance of this Pet class,


421
00:22:51,738 --> 00:22:54,141 line:0
which is held in the variable
with the name "Buddy".


422
00:22:55,242 --> 00:22:58,545 line:-2
Note, however, that due to the nature
of JavaScript inheritance,


423
00:22:58,612 --> 00:23:02,282 line:-2
the term "instance" also applies
to subclass objects as well.


424
00:23:02,616 --> 00:23:03,917 line:0
As an example,


425
00:23:04,451 --> 00:23:07,721 line:0
if we call QueryInstances
with the Animal constructor,


426
00:23:07,788 --> 00:23:11,658 line:0
we will not only see
the previously seen "Buddy" variable,


427
00:23:11,725 --> 00:23:14,394 line:0
but we will also see an instance of Animal


428
00:23:14,461 --> 00:23:17,898 line:0
held by the "cat" variable,
and even the entire Pet class,


429
00:23:17,965 --> 00:23:20,234 line:0
as it also inherits from the Animal class.


430
00:23:21,201 --> 00:23:23,837 line:0
For more flexibility, it's also possible


431
00:23:23,904 --> 00:23:26,807 line:0
to provide a prototype
instead of a constructor,


432
00:23:26,874 --> 00:23:29,142 line:0
which will have the exact same result


433
00:23:29,209 --> 00:23:31,712 line:0
we saw earlier
with the related constructor.


434
00:23:33,514 --> 00:23:36,950 line:-2
The second noteworthy function
is called queryHolders.


435
00:23:37,184 --> 00:23:41,421 line:0
So, again, let's imagine
a simple JavaScript class called Person.


436
00:23:42,089 --> 00:23:45,225 line:0
Similar to reality,
each Person can have a Parent.


437
00:23:46,059 --> 00:23:49,162 line:0
This is represented in JavaScript
as a Parent property,


438
00:23:49,229 --> 00:23:51,598 line:0
whose value is the other Person object.


439
00:23:53,200 --> 00:23:55,269 line:0
This is called a strong reference


440
00:23:55,335 --> 00:23:58,639 line:-2
and is a common cause
of memory leaks in JavaScript programs.


441
00:23:59,273 --> 00:24:01,775 line:-1
If we wanted to find all objects


442
00:24:01,842 --> 00:24:04,411 line:-2
that have a strong reference
to a given object,


443
00:24:04,478 --> 00:24:08,448 line:-2
we could examine a captured heap snapshot
in the Timelines tab,


444
00:24:08,515 --> 00:24:10,817 line:-2
but again, this may include
other information


445
00:24:10,884 --> 00:24:12,486 line:-1
that is likely not relevant.


446
00:24:13,487 --> 00:24:17,858 line:0
Instead, we can use the queryHolders
Console function,


447
00:24:17,925 --> 00:24:21,962 line:0
which, when given an object,
will scan the entire JavaScript heap


448
00:24:22,029 --> 00:24:24,798 line:0
for all other objects
that have a strong reference


449
00:24:24,865 --> 00:24:25,999 line:0
to that given object.


450
00:24:26,900 --> 00:24:28,602 line:0
As we can see in this example,


451
00:24:28,669 --> 00:24:32,773 line:0
Alice has a strong reference to John
through its Parent property,


452
00:24:32,840 --> 00:24:36,643 line:0
which is why Alice appears in the array
returned by queryHolders.


453
00:24:37,778 --> 00:24:40,447 line:-2
Now let's talk
about our last feature for today.


454
00:24:40,514 --> 00:24:43,684 line:-2
I'm very happy to announce
that in the latest Safari,


455
00:24:43,750 --> 00:24:46,119 line:-1
so long as Web Inspector is already open,


456
00:24:46,186 --> 00:24:49,489 line:-2
enabling "Intelligent Tracking Prevention
Debug Mode"


457
00:24:49,556 --> 00:24:52,926 line:-2
from Safari's Develop menu
will cause all debug logging


458
00:24:52,993 --> 00:24:55,429 line:-2
from Safari's
Intelligent Tracking Prevention


459
00:24:55,495 --> 00:24:58,532 line:0
to also appear
in the Web Inspector Console,


460
00:24:58,599 --> 00:25:02,069 line:0
as well as in the macOS system
Console.app.


461
00:25:02,736 --> 00:25:06,406 line:-2
Additionally, logs
for Ad Click Attribution Debug Mode


462
00:25:06,473 --> 00:25:09,109 line:-2
will also be shown
in the Web Inspector Console,


463
00:25:09,176 --> 00:25:12,346 line:-2
which can be enabled
from the Experimental Features submenu


464
00:25:12,412 --> 00:25:13,847 line:-1
of Safari's Develop menu.


465
00:25:14,548 --> 00:25:17,451 line:-2
This way, you'll never
have to switch away from Safari


466
00:25:17,518 --> 00:25:19,853 line:-2
to see all of the logs
you might find useful.


467
00:25:20,721 --> 00:25:24,024 line:-2
And with that, we've reached
the end of our feature highlights.


468
00:25:24,091 --> 00:25:27,227 line:-2
There is so much more
coming in the latest Safari,


469
00:25:27,294 --> 00:25:29,329 line:-1
including a ton of bug fixes


470
00:25:29,396 --> 00:25:31,965 line:-1
and minor tweaks throughout Web Inspector.


471
00:25:32,499 --> 00:25:33,700 line:-1
Before we finish up,


472
00:25:33,767 --> 00:25:36,036 line:-2
there's a few general tips
I'd like to leave you with.


473
00:25:37,738 --> 00:25:39,373 line:-1
Tooltips are your friend.


474
00:25:40,407 --> 00:25:42,476 line:-1
If you're unsure of what something does,


475
00:25:42,543 --> 00:25:45,779 line:-2
simply hover over it with your cursor
for a few seconds


476
00:25:45,846 --> 00:25:48,215 line:-1
and voilà, the answer will appear.


477
00:25:48,949 --> 00:25:51,585 line:-1
Every icon in Web Inspector has a tooltip.


478
00:25:51,652 --> 00:25:53,620 line:-1
All links have a tooltip.


479
00:25:54,021 --> 00:25:57,624 line:-2
In fact, almost every component
of the interface has a tooltip.


480
00:25:58,125 --> 00:26:00,928 line:-2
Web Inspector makes heavy use
of iconography


481
00:26:00,994 --> 00:26:03,096 line:-1
as there's a ton of varying functionality


482
00:26:03,163 --> 00:26:05,699 line:-2
that has to fit into
a very limited amount of space.


483
00:26:06,433 --> 00:26:09,102 line:-1
As such, it relies on tooltips


484
00:26:09,169 --> 00:26:11,705 line:-2
to provide additional explanation
and description


485
00:26:11,772 --> 00:26:13,373 line:-1
where there isn't enough room.


486
00:26:14,741 --> 00:26:18,178 line:-2
For a similar reason,
context menus are everywhere


487
00:26:18,245 --> 00:26:20,747 line:-2
and they often contain
additional functionality


488
00:26:20,814 --> 00:26:22,616 line:-1
that can't be accessed anywhere else.


489
00:26:24,084 --> 00:26:26,353 line:-1
Many icons have a context menu.


490
00:26:27,254 --> 00:26:29,256 line:-1
Every link has a context menu.


491
00:26:30,357 --> 00:26:33,927 line:-2
Again, almost every component
of the interface has a context menu.


492
00:26:34,394 --> 00:26:37,064 line:-2
And, in fact,
most of what we've done so far


493
00:26:37,130 --> 00:26:39,766 line:-2
could've also been done
via a context menu action.


494
00:26:40,901 --> 00:26:42,769 line:-1
For much of the same reason as tooltips,


495
00:26:42,836 --> 00:26:46,640 line:-2
Web Inspector puts a lot of functionality
into context menu actions


496
00:26:46,707 --> 00:26:49,076 line:-1
as there isn't enough room for each action


497
00:26:49,142 --> 00:26:51,278 line:-2
to have its own component
in the interface.


498
00:26:52,246 --> 00:26:53,547 line:-1
For more tips like those,


499
00:26:53,614 --> 00:26:56,183 line:-2
there's an all-new section
of the WebKit website


500
00:26:56,250 --> 00:26:58,719 line:-2
that talks specifically
about Web Inspector.


501
00:26:58,785 --> 00:27:01,288 line:-1
It contains a bunch of reference pages


502
00:27:01,355 --> 00:27:04,424 line:-2
that each explore
both the breadth and the depth


503
00:27:04,491 --> 00:27:07,427 line:-2
of various features,
parts of the interface and more.


504
00:27:08,428 --> 00:27:11,198 line:-2
In fact, many of the features
we talked about today


505
00:27:11,265 --> 00:27:12,933 line:-1
already have reference pages,


506
00:27:13,000 --> 00:27:16,203 line:-2
and we're working on writing even more
for many of the others.


507
00:27:17,104 --> 00:27:20,240 line:0
Also, be sure to follow @webkit on Twitter


508
00:27:20,307 --> 00:27:23,477 line:0
as we post weekly tips
about various features in Web Inspector.


509
00:27:24,945 --> 00:27:28,215 line:0
And I'd also highly recommend
using Safari Technology Preview


510
00:27:28,282 --> 00:27:29,783 line:0
for your daily development


511
00:27:29,850 --> 00:27:33,787 line:0
as it gets biweekly updates
with bug fixes and new features


512
00:27:33,854 --> 00:27:36,290 line:-2
both to Web Inspector
and to the rest of WebKit.


513
00:27:36,823 --> 00:27:39,927 line:-2
Be sure to check out
this session's related resources


514
00:27:39,993 --> 00:27:43,096 line:-2
or other sessions
about some of these new features,


515
00:27:43,163 --> 00:27:45,098 line:-1
as well as links to our documentation.


516
00:27:45,799 --> 00:27:49,469 line:-2
I really hope you've enjoyed learning
about what's new in Web Inspector,


517
00:27:49,536 --> 00:27:52,739 line:-2
and I hope you find
the things we've discussed useful


518
00:27:52,806 --> 00:27:55,909 line:-2
for understanding and debugging
Web content in the future.


519
00:27:55,976 --> 00:27:59,713 line:-2
Thank you so much for listening,
and I hope you have a wonderful WWDC.

