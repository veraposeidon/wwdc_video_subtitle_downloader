1
00:00:00,167 --> 00:00:02,102 line:-1
[chimes]


2
00:00:03,871 --> 00:00:06,373 line:-1
Hello and welcome to WWDC.


3
00:00:07,841 --> 00:00:09,443 line:0
Hi, my name's Nick Gillett.


4
00:00:09,510 --> 00:00:11,645 line:0
I'm an engineer here at Apple
on the Core Data team,


5
00:00:11,712 --> 00:00:14,581 line:0
and today we're gonna talk about
what it's like to build applications


6
00:00:14,648 --> 00:00:16,550 line:0
with NSPersistentCloudKitContainer


7
00:00:16,617 --> 00:00:19,820 line:0
that sync Core Data stores
with the public CloudKit database.


8
00:00:19,887 --> 00:00:22,523 line:-2
To do this,
we'll be introducing some new API,


9
00:00:22,589 --> 00:00:25,092 line:-2
and we'll talk a lot about things
that you need to think about


10
00:00:25,158 --> 00:00:28,061 line:-2
when building applications
for the public database.


11
00:00:28,128 --> 00:00:31,398 line:-2
Finally, we'll take a detailed look
at how importing works


12
00:00:31,465 --> 00:00:34,268 line:-2
with NSPersistentCloudKitContainer
in the public database.


13
00:00:34,835 --> 00:00:36,203 line:-1
Now before we get started,


14
00:00:36,270 --> 00:00:39,673 line:-2
I'd like to do a quick review
of where we are so far.


15
00:00:39,740 --> 00:00:42,976 line:0
In 2019 in our session
"Using Core Data with CloudKit,"


16
00:00:43,043 --> 00:00:45,879 line:0
we introduced
NSPersistentCloudKitContainer


17
00:00:45,946 --> 00:00:48,649 line:0
as a way of easily syncing
your Core Data stores


18
00:00:48,715 --> 00:00:51,151 line:0
with a private CloudKit database.


19
00:00:51,218 --> 00:00:53,287 line:-2
As well,
we introduced a new sample application


20
00:00:53,353 --> 00:00:55,556 line:-1
that demonstrates how this works,


21
00:00:55,622 --> 00:01:00,460 line:-2
and we wrote a ton of documentation about
how NSPersistentCloudKitContainer works


22
00:01:00,527 --> 00:01:02,829 line:-2
and how you can integrate it
with your applications.


23
00:01:02,896 --> 00:01:06,967 line:-2
So if at any point during this session
you feel like you're lacking some context


24
00:01:07,034 --> 00:01:09,736 line:-2
or some of the concepts
we're discussing feel foreign,


25
00:01:09,803 --> 00:01:13,807 line:-2
I highly recommend that you review our
documentation and our previous session.


26
00:01:14,441 --> 00:01:16,243 line:-1
I also want to review some terms.


27
00:01:16,310 --> 00:01:19,479 line:-2
You see, Core Data and CloudKit
are very similar frameworks,


28
00:01:19,546 --> 00:01:23,517 line:-2
and they express themselves through
a similar set of ideas and APIs.


29
00:01:23,584 --> 00:01:27,821 line:-2
We think of each framework in terms
of objects, models and stores.


30
00:01:27,888 --> 00:01:31,058 line:-2
In Core Data, we know these
as instances of NSManagedObject,


31
00:01:31,124 --> 00:01:34,394 line:-2
and these are the objects that you work
with directly in your application.


32
00:01:34,461 --> 00:01:37,731 line:-2
Likewise in CloudKit,
we know them as CKRecord.


33
00:01:37,798 --> 00:01:40,033 line:-1
We model these objects, or describe them,


34
00:01:40,100 --> 00:01:42,369 line:-1
using an instance of NSManagedObjectModel,


35
00:01:42,436 --> 00:01:45,038 line:-1
and in CloudKit this is called the schema.


36
00:01:45,105 --> 00:01:48,775 line:-2
Finally, objects are persisted,
to use the Core Data vernacular,


37
00:01:48,842 --> 00:01:50,844 line:-1
in an instance of NSPersistentStore,


38
00:01:50,911 --> 00:01:55,949 line:-2
or, in CloudKit, in a CKRecordZone,
which is part of a CKRecordDatabase.


39
00:01:56,016 --> 00:01:57,751 line:-1
Now that we've got that out of the way,


40
00:01:57,818 --> 00:02:00,587 line:-2
I want to show you what it's like
to actually build an application,


41
00:02:00,654 --> 00:02:04,591 line:-2
or in this case, customize one that
works with the public CloudKit database.


42
00:02:04,658 --> 00:02:07,160 line:-2
To do that, I'm just gonna open
our sample application,


43
00:02:07,227 --> 00:02:10,264 line:-2
and I'm looking for a specific file
called the Core Data stack.


44
00:02:11,899 --> 00:02:15,702 line:-2
You see, the Core Data stack is where this
application keeps all of the code it needs


45
00:02:15,769 --> 00:02:18,672 line:-2
to set up its instance
of NSPersistentCloudKitContainer.


46
00:02:18,739 --> 00:02:20,274 line:-1
You can see here at the top


47
00:02:20,340 --> 00:02:23,043 line:-2
that it's already using
NSPersistentCloudKitContainer,


48
00:02:23,110 --> 00:02:25,512 line:-2
which means it's ready to sync
with the private database.


49
00:02:25,579 --> 00:02:28,115 line:-2
Now, to make it work with
the public database,


50
00:02:28,182 --> 00:02:30,217 line:-1
we just want to add one new line of code.


51
00:02:30,751 --> 00:02:33,554 line:-2
I'm simply gonna change
the existing StoreDescription


52
00:02:33,620 --> 00:02:36,156 line:-1
to set its CloudKitContainerOptions


53
00:02:36,223 --> 00:02:40,460 line:-2
and use the new databaseScope property
to set it to public.


54
00:02:40,527 --> 00:02:42,029 line:-1
Now, imagine that you want


55
00:02:42,095 --> 00:02:45,465 line:-2
to use multiple persistent stores
with your application instead of just one,


56
00:02:45,532 --> 00:02:49,002 line:-2
as many of our clients do
with NSPersistentCloudKitContainer.


57
00:02:49,069 --> 00:02:50,404 line:-1
To do that, all we have to do


58
00:02:50,470 --> 00:02:53,707 line:-2
is add a new store description
instead of customizing the existing one.


59
00:02:54,675 --> 00:02:56,977 line:-2
You can see I've just pasted in
a lot of code,


60
00:02:57,044 --> 00:03:00,214 line:-2
so let's take a detailed look at
what's actually going on here.


61
00:03:02,049 --> 00:03:05,519 line:-2
In this code, we create a new instance
of NSPersistentStoreDescription


62
00:03:05,586 --> 00:03:08,922 line:-2
and customize it with
the normal CloudKitContainerOptions,


63
00:03:08,989 --> 00:03:12,159 line:-2
things like HistoryTracking
and RemoteChangeNotifications.


64
00:03:12,226 --> 00:03:16,230 line:-2
Then we create a new instance of
NSPersistentCloudKitContainerOptions.


65
00:03:16,296 --> 00:03:18,732 line:-2
This is what tells
NSPersistentCloudKitContainer


66
00:03:18,799 --> 00:03:21,568 line:-2
that we want to use this StoreDescription
with CloudKit.


67
00:03:21,635 --> 00:03:23,837 line:-2
We set its databaseScope property
to "public,"


68
00:03:23,904 --> 00:03:27,040 line:-2
and that tells it that
we wanna use it with the public database.


69
00:03:27,107 --> 00:03:29,476 line:-2
Next, we assign
the CloudKitContainerOptions


70
00:03:29,543 --> 00:03:30,811 line:-1
to the StoreDescription


71
00:03:30,878 --> 00:03:33,680 line:-2
and append the StoreDescription
to the array of stores


72
00:03:33,747 --> 00:03:36,583 line:-2
that we want
NSPersistentCloudKitContainer to load.


73
00:03:36,650 --> 00:03:40,120 line:0
Finally, we load our stores
as you normally would.


74
00:03:40,787 --> 00:03:44,391 line:-2
Now, I would like to say that
that's all you have to do at all,


75
00:03:44,458 --> 00:03:46,960 line:-2
but we have to configure
our CloudKitContainer


76
00:03:47,027 --> 00:03:50,097 line:-2
to work correctly
with NSPersistentCloudKitContainer.


77
00:03:50,163 --> 00:03:52,866 line:-2
You see, it fetches data differently
in the public database.


78
00:03:52,933 --> 00:03:55,602 line:-2
And so, I want to use
the CloudKit Dashboard now


79
00:03:55,669 --> 00:03:58,539 line:-1
to change the configuration of our schema.


80
00:03:58,605 --> 00:04:00,874 line:-1
To do that, I'm just gonna open Safari.


81
00:04:00,941 --> 00:04:04,811 line:-2
And you can see that I already have
the page I need open in Safari.


82
00:04:04,878 --> 00:04:07,381 line:-1
So let's orient ourselves to where we are.


83
00:04:07,447 --> 00:04:10,083 line:-2
At the top, you can see that I've selected
the iCloud container


84
00:04:10,150 --> 00:04:11,852 line:-1
for our sample application,


85
00:04:11,919 --> 00:04:16,490 line:-2
and we're in the development environment
looking specifically at the schema.


86
00:04:16,557 --> 00:04:18,926 line:-2
We're looking at the indexes section
of the schema


87
00:04:18,992 --> 00:04:22,329 line:-2
because we need to add some indexes
to all five of the record types


88
00:04:22,396 --> 00:04:25,032 line:-2
that you see listed on the screen here
on the left-hand side.


89
00:04:25,098 --> 00:04:28,168 line:-2
We need to add two new indexes
to each record type,


90
00:04:28,235 --> 00:04:31,772 line:-2
and to do that, I'm just gonna use
this "Add Index" button down here.


91
00:04:31,839 --> 00:04:34,241 line:-2
I'll click it once and add one
for the record name,


92
00:04:34,308 --> 00:04:37,010 line:-2
and then another one
for the modified at date.


93
00:04:37,077 --> 00:04:39,513 line:-1
And finally, I'll save my changes.


94
00:04:39,580 --> 00:04:42,783 line:-2
These are the indexes that
NSPersistentCloudKitContainer needs


95
00:04:42,850 --> 00:04:46,787 line:-2
to run its queries against the public
database to fetch records of this type.


96
00:04:47,421 --> 00:04:48,789 line:-1
Of course, for your application,


97
00:04:48,856 --> 00:04:51,725 line:-2
you would have to repeat these steps
for all of your record types,


98
00:04:51,792 --> 00:04:54,661 line:-2
so we would do this four more times
for our sample application.


99
00:04:54,728 --> 00:04:57,598 line:-2
So that's all we have to do
to build an application


100
00:04:57,664 --> 00:05:00,000 line:-2
that works with
the public CloudKit database.


101
00:05:00,067 --> 00:05:02,870 line:-2
We simply adopt
NSPersistentCloudKitContainerOptions'


102
00:05:02,936 --> 00:05:04,638 line:-1
new databaseScope property


103
00:05:04,705 --> 00:05:07,774 line:-2
and add a couple of indexes
to all of our record types.


104
00:05:08,442 --> 00:05:11,745 line:-2
Now if you don't see all of your indexes
in the CloudKit Dashboard,


105
00:05:11,812 --> 00:05:15,282 line:-2
you may need to go through a process
that we call "schema initialization."


106
00:05:15,349 --> 00:05:18,318 line:-2
And schema initialization is detailed
in our documentation


107
00:05:18,385 --> 00:05:20,954 line:-1
and in the session from 2019.


108
00:05:21,522 --> 00:05:22,689 line:-1
Once you finish that,


109
00:05:22,756 --> 00:05:26,293 line:-2
you will have a complete local mirror
of all of the data in CloudKit


110
00:05:26,360 --> 00:05:28,128 line:-2
on the device your application
is running on.


111
00:05:28,662 --> 00:05:32,599 line:-2
Now you might be wondering
why we create a complete local mirror,


112
00:05:32,666 --> 00:05:35,469 line:-1
and the reason is, you asked us to.


113
00:05:35,536 --> 00:05:37,337 line:-1
You see, since our talk in 2019,


114
00:05:37,404 --> 00:05:41,742 line:-2
we've received a slew of feature requests
for support with the public database,


115
00:05:41,808 --> 00:05:43,610 line:-1
and they had some common themes.


116
00:05:44,077 --> 00:05:47,514 line:-2
The first being that all of the requests
wanted to create a dataset


117
00:05:47,581 --> 00:05:48,949 line:-1
that everyone could use,


118
00:05:49,016 --> 00:05:51,919 line:-2
that is, all users of your application
could access.


119
00:05:51,985 --> 00:05:55,422 line:-2
Now sometimes this was data that you,
the developer, would create,


120
00:05:55,489 --> 00:05:58,058 line:-2
such as an application template
or an initial dataset


121
00:05:58,125 --> 00:06:02,062 line:-2
so that your user has a rich experience
with your application from day one.


122
00:06:02,129 --> 00:06:05,032 line:-2
In other cases,
it was data created by users.


123
00:06:05,098 --> 00:06:06,900 line:-1
Now, I'm gonna be candid here.


124
00:06:06,967 --> 00:06:08,902 line:-2
The most common request
that we got for this


125
00:06:08,969 --> 00:06:11,705 line:-2
was for a high scores table
in a video game.


126
00:06:11,772 --> 00:06:14,341 line:-2
And this is actually a great example
of what we want


127
00:06:14,408 --> 00:06:17,044 line:-1
NSPersistentCloudKitContainer to support.


128
00:06:17,110 --> 00:06:18,545 line:-1
You need all the data locally,


129
00:06:18,612 --> 00:06:21,348 line:-2
so that you can quickly fetch it,
sort it and order it,


130
00:06:22,015 --> 00:06:25,619 line:-2
and it's something that
your users will want to contribute to.


131
00:06:25,686 --> 00:06:29,423 line:-2
We also know that you want to mix data
from the private database as needed


132
00:06:29,489 --> 00:06:30,657 line:-1
in these applications.


133
00:06:30,724 --> 00:06:32,726 line:-1
And this makes a lot of sense.


134
00:06:32,793 --> 00:06:35,229 line:-2
Your user may want to upload
their high score,


135
00:06:35,295 --> 00:06:37,431 line:-2
but they may not want to upload
their saved game state


136
00:06:37,497 --> 00:06:40,267 line:-2
or their character configuration
to the public database,


137
00:06:40,667 --> 00:06:44,471 line:-2
and instead, to sync that,
you would use the private database.


138
00:06:44,538 --> 00:06:46,907 line:-2
And that's actually a great segue
to our next section,


139
00:06:46,974 --> 00:06:50,077 line:-2
which is special considerations,
or things that you need to think about


140
00:06:50,143 --> 00:06:53,013 line:-2
as you're building applications
that work with the public database.


141
00:06:54,281 --> 00:06:56,783 line:-2
To dig into this a little bit,
we're gonna compare and contrast


142
00:06:56,850 --> 00:06:58,952 line:-2
the behavior
of NSPersistentCloudKitContainer


143
00:06:59,019 --> 00:07:01,755 line:-2
when working with the private database
and the public database.


144
00:07:02,356 --> 00:07:05,425 line:-2
The first thing that we'll look at is
the notion of accounts and ownership,


145
00:07:05,492 --> 00:07:07,594 line:-1
and how that changes between the two.


146
00:07:07,661 --> 00:07:10,697 line:-2
You see, in the private database,
accounts are required,


147
00:07:10,764 --> 00:07:15,669 line:-2
and all the data's owned by a single user,
so the behavior is fairly straightforward.


148
00:07:15,736 --> 00:07:18,105 line:-2
But the public database
doesn't work that way.


149
00:07:18,172 --> 00:07:19,273 line:-1
Accounts are optional.


150
00:07:19,339 --> 00:07:22,809 line:-2
You can read data from the public database
without an iCloud account,


151
00:07:22,876 --> 00:07:26,580 line:-2
and that data could be owned by
any user of your application.


152
00:07:26,647 --> 00:07:28,081 line:-1
We'll also talk about import


153
00:07:28,148 --> 00:07:31,185 line:-2
and how that changes
between the public and private database.


154
00:07:31,251 --> 00:07:33,787 line:-2
You see, the private database
supports push notifications,


155
00:07:33,854 --> 00:07:35,756 line:-1
and the public database does not,


156
00:07:35,822 --> 00:07:38,192 line:-2
so we have to query for records
that we want to import


157
00:07:38,258 --> 00:07:40,127 line:-1
using a process called polling.


158
00:07:40,594 --> 00:07:44,398 line:-2
Now, I wanted to call out export here
because we won't be talking about it.


159
00:07:44,464 --> 00:07:47,734 line:-2
It works identically between
the private and public databases,


160
00:07:47,801 --> 00:07:51,271 line:-2
and we talked about it in detail
in our session in 2019.


161
00:07:51,772 --> 00:07:53,774 line:-2
When we think about
accounts and ownership,


162
00:07:53,841 --> 00:07:57,978 line:-2
what we're really talking about is the set
of actions that your application can take


163
00:07:58,045 --> 00:08:00,981 line:-2
when you're signed in or signed out
of an iCloud account.


164
00:08:01,048 --> 00:08:04,718 line:-2
Now as I said, in the private database,
this is super straightforward.


165
00:08:04,785 --> 00:08:07,120 line:-2
If you're signed out,
you can't do anything.


166
00:08:07,187 --> 00:08:08,956 line:-2
If you're signed in,
you can do everything.


167
00:08:09,022 --> 00:08:12,159 line:-2
The world is your oyster
and all the data is yours to work with.


168
00:08:12,893 --> 00:08:15,863 line:-2
In the public database, though,
this gets a lot more complicated.


169
00:08:16,496 --> 00:08:19,499 line:-2
You can read data
if you're signed out or signed in,


170
00:08:19,566 --> 00:08:23,737 line:-2
but you can only create data, new records
if you're signed in to an iCloud account.


171
00:08:23,804 --> 00:08:25,639 line:-1
What about modifications?


172
00:08:25,706 --> 00:08:27,007 line:-1
Well, it's tricky.


173
00:08:27,941 --> 00:08:32,111 line:-2
And this poses a problem for applications
that have UIs like our sample application.


174
00:08:32,179 --> 00:08:36,216 line:-2
Maybe you have some editing controls,
such as this Edit button in the top left,


175
00:08:36,283 --> 00:08:39,620 line:-2
or this plus button in the top right
that allows us to create new records.


176
00:08:39,686 --> 00:08:42,789 line:-2
Likewise, our sample application
has a DetailViewController


177
00:08:42,856 --> 00:08:45,559 line:-1
that allows us to edit individual objects,


178
00:08:45,626 --> 00:08:48,061 line:-2
and that also has
an editing control in it.


179
00:08:48,128 --> 00:08:50,197 line:-2
Our application may need to know
whether or not


180
00:08:50,264 --> 00:08:54,134 line:-2
it can use one or any of these controls
based on where that object is stored


181
00:08:54,201 --> 00:08:56,670 line:-2
and where the database that
that object lives in.


182
00:08:56,737 --> 00:08:58,305 line:-1
And it turns out that you can use


183
00:08:58,372 --> 00:09:02,009 line:-2
NSPersistentCloudKitContainer's
existing APIs to figure this out.


184
00:09:02,075 --> 00:09:05,078 line:-2
You simply ask CloudKit
for the current account.


185
00:09:05,145 --> 00:09:07,481 line:-1
Then you ask NSPersistentCloudKitContainer


186
00:09:07,548 --> 00:09:10,484 line:-2
for the record that backs
an object you're working with,


187
00:09:10,551 --> 00:09:12,352 line:-1
and if you compare the creator user ID,


188
00:09:12,419 --> 00:09:15,222 line:-2
then you'll know whether or not
that object is mutable.


189
00:09:15,289 --> 00:09:17,357 line:-1
But this is a ridiculous amount of code


190
00:09:17,424 --> 00:09:20,561 line:-2
just to turn this question mark
into a yes or no,


191
00:09:20,627 --> 00:09:22,529 line:-1
and it's an insane amount of code


192
00:09:22,596 --> 00:09:26,700 line:-2
to execute for every user interface
element in your application.


193
00:09:26,767 --> 00:09:27,835 line:-1
So we can do better.


194
00:09:27,901 --> 00:09:29,036 line:-1
And we have.


195
00:09:29,102 --> 00:09:30,904 line:-1
This is NSPersistentCloudKitContainer's


196
00:09:30,971 --> 00:09:34,208 line:-2
new canUpdateRecord
forManagedObjectWith ID method,


197
00:09:34,274 --> 00:09:36,243 line:-2
which tells us exactly
what we need to know


198
00:09:36,310 --> 00:09:38,345 line:-2
about whether or not
this object is mutable


199
00:09:38,412 --> 00:09:41,014 line:-2
with respect to the current configuration
of the device,


200
00:09:41,081 --> 00:09:43,183 line:-1
the persistent store the object is kept in


201
00:09:43,250 --> 00:09:46,086 line:-2
and whether or not that store
is backed by CloudKit.


202
00:09:46,153 --> 00:09:48,422 line:-2
It even handles all the edge cases
you might expect,


203
00:09:48,488 --> 00:09:52,559 line:-2
like that object being stored in a store
that's not backed by CloudKit at all,


204
00:09:52,626 --> 00:09:56,663 line:-2
or the account changing on the device
while you're using your application.


205
00:09:56,730 --> 00:09:58,232 line:-1
And we cache this state


206
00:09:58,298 --> 00:10:00,834 line:-2
so that it's efficient enough
to use in your user interface.


207
00:10:00,901 --> 00:10:04,037 line:-2
Now, if you have a more coarse-grained
view of the world


208
00:10:04,104 --> 00:10:06,907 line:-2
such as this table view
in our application,


209
00:10:06,974 --> 00:10:09,042 line:-2
you can use
NSPersistentCloudKitContainer's


210
00:10:09,109 --> 00:10:11,278 line:-1
canModifyObjects in store


211
00:10:11,345 --> 00:10:14,448 line:-2
to tell whether or not any of the objects
in a given persistent store


212
00:10:14,515 --> 00:10:17,918 line:-2
would be mutable with respect
to the configuration on the device,


213
00:10:17,985 --> 00:10:20,187 line:-2
and whether or not that store
is backed by CloudKit.


214
00:10:20,254 --> 00:10:25,292 line:-2
Now, I'd like to switch gears a bit
and talk in detail about how import works


215
00:10:25,359 --> 00:10:28,362 line:-2
in the public database with
NSPersistentCloudKitContainer.


216
00:10:28,428 --> 00:10:33,200 line:-2
To do that, I wanna review some content
from our session in 2019.


217
00:10:33,267 --> 00:10:36,003 line:-2
You may remember this graphic
where we talked about how,


218
00:10:36,069 --> 00:10:38,539 line:-2
when we get a push notification
from CloudKit,


219
00:10:38,605 --> 00:10:39,973 line:-1
we schedule an import operation


220
00:10:40,040 --> 00:10:43,377 line:-2
that brings all of the changed records
down to the local store...


221
00:10:44,578 --> 00:10:47,214 line:-2
and makes them available
to your application.


222
00:10:48,482 --> 00:10:51,785 line:-2
And this works really well, even if you
have a large set of changed records


223
00:10:51,852 --> 00:10:53,820 line:-1
or a very complicated object graph.


224
00:10:54,955 --> 00:10:57,591 line:-2
NSPersistentCloudKitContainer
can efficiently import


225
00:10:57,658 --> 00:11:00,661 line:-1
complicated graphs and large change sets


226
00:11:00,727 --> 00:11:03,897 line:-2
whether you're using the public database
or the private database.


227
00:11:04,498 --> 00:11:06,066 line:-1
To understand how they're different,


228
00:11:06,133 --> 00:11:08,235 line:-2
we want to take a look at
exactly what happens


229
00:11:08,302 --> 00:11:10,871 line:-2
between the cloud
and the local persistent store.


230
00:11:12,706 --> 00:11:14,842 line:-2
When I say that we create
an import operation,


231
00:11:14,908 --> 00:11:17,010 line:-2
what I really mean
is that we create an instance


232
00:11:17,077 --> 00:11:19,613 line:-1
of CKFetchRecordZoneChangesOperation.


233
00:11:19,680 --> 00:11:23,717 line:-2
And this creates a single request
against the CloudKit server,


234
00:11:23,784 --> 00:11:25,719 line:-2
which brings down
all of the changed records


235
00:11:25,786 --> 00:11:27,588 line:-1
from the private database.


236
00:11:27,654 --> 00:11:31,491 line:-2
But CKFetchRecordZoneChangesOperation
relies on some technologies


237
00:11:31,558 --> 00:11:34,194 line:-1
that are specific to the private database,


238
00:11:34,261 --> 00:11:38,565 line:-2
and so, in the public database,
we have to use CKQueryOperation instead.


239
00:11:38,632 --> 00:11:41,134 line:-1
Now, if you've ever used CKQueryOperation,


240
00:11:41,201 --> 00:11:44,171 line:-2
you know that queries affect
a specific record type,


241
00:11:44,238 --> 00:11:47,040 line:-2
which means that we have to make
one request for the post


242
00:11:47,107 --> 00:11:49,810 line:-1
and another request for their tags,


243
00:11:49,877 --> 00:11:52,412 line:-1
and another request for the attachments,


244
00:11:52,479 --> 00:11:55,082 line:-1
and another request for the images,


245
00:11:55,148 --> 00:11:58,952 line:-2
and another request for
the many-to-many relationships.


246
00:11:59,019 --> 00:12:03,690 line:-2
And so on. It continues until we fetch
all the record types in our application.


247
00:12:05,692 --> 00:12:09,730 line:-2
And this means that stores backed by the
public database are doing a lot more work.


248
00:12:09,796 --> 00:12:12,766 line:-2
And that's how we import data
into the public database.


249
00:12:12,833 --> 00:12:15,969 line:-2
NSPersistentCloudKitContainer has
to use CKQueryOperation


250
00:12:16,036 --> 00:12:19,106 line:-2
instead of
CKFetchRecordZoneChangesOperation,


251
00:12:19,173 --> 00:12:20,807 line:-1
and we have to poll for changes


252
00:12:20,874 --> 00:12:24,545 line:-2
instead of using push notifications
to know exactly when to make our requests.


253
00:12:24,611 --> 00:12:28,982 line:-2
Now this means that we need to be careful
about how we load up the CloudKit server


254
00:12:29,049 --> 00:12:30,717 line:-2
because of the way
we want your applications


255
00:12:30,784 --> 00:12:32,452 line:-1
to scale with the public database.


256
00:12:33,153 --> 00:12:36,557 line:-2
So we're only going to poll for changes
on application launch


257
00:12:36,623 --> 00:12:39,726 line:-2
or after about every 30 minutes
of application use.


258
00:12:39,793 --> 00:12:43,063 line:-2
This is to ensure that we align
the load of these requests


259
00:12:43,130 --> 00:12:45,632 line:-2
with the actual usage
of your applications.


260
00:12:46,266 --> 00:12:49,803 line:-2
Of course, this does mean
that the quality of freshness


261
00:12:49,870 --> 00:12:51,772 line:-1
that you can expect from a public database


262
00:12:51,839 --> 00:12:54,808 line:-2
will be noticeably different
from the private database.


263
00:12:55,475 --> 00:12:59,847 line:-2
I also want to mention that this means
that simpler ManageObjectModels--


264
00:12:59,913 --> 00:13:03,150 line:-2
that is ManageObjectModels
that have fewer entities in them--


265
00:13:03,217 --> 00:13:06,086 line:-2
will make fewer requests
through the public database.


266
00:13:06,153 --> 00:13:07,321 line:-1
Now that's not to say


267
00:13:07,387 --> 00:13:10,357 line:-2
that you shouldn't have complicated
object graphs in your application,


268
00:13:10,424 --> 00:13:12,893 line:-2
or that the public database
doesn't support them.


269
00:13:12,960 --> 00:13:14,795 line:-1
In fact, you absolutely should.


270
00:13:14,862 --> 00:13:18,498 line:-2
You should build the ManageObjectModels
you need for the public database,


271
00:13:18,565 --> 00:13:21,401 line:-2
but it does mean that
you should restrict that model


272
00:13:21,468 --> 00:13:25,272 line:-2
to only the entities
that are used in the public database


273
00:13:25,339 --> 00:13:29,810 line:-2
so that NSPersistentCloudKitContainer
isn't making unnecessary requests.


274
00:13:29,877 --> 00:13:33,780 line:-2
Now we do this using a configuration
in the ManageObjectModel,


275
00:13:33,847 --> 00:13:36,884 line:-2
and we talk about those in detail
in our documentation


276
00:13:36,950 --> 00:13:38,819 line:-1
about how you set up a ManagedObjectModel


277
00:13:38,886 --> 00:13:41,688 line:-2
for use with
NSPersistentCloudKitContainer.


278
00:13:41,755 --> 00:13:44,658 line:-2
You want to restrict the entities
that are used in the public database


279
00:13:44,725 --> 00:13:47,094 line:-2
to a specific configuration
for that store.


280
00:13:48,161 --> 00:13:50,230 line:-1
Now, why does any of this matter?


281
00:13:51,131 --> 00:13:56,570 line:-2
Well, because queries affect how deletes
propagate throughout the public database,


282
00:13:56,637 --> 00:13:58,939 line:-1
consider the following set of objects.


283
00:13:59,006 --> 00:14:01,808 line:-2
If we import those objects
onto two devices,


284
00:14:01,875 --> 00:14:05,646 line:-2
both devices will come to an identical
picture of what's in the cloud,


285
00:14:05,712 --> 00:14:07,214 line:-1
as we would expect, right?


286
00:14:08,048 --> 00:14:11,818 line:-2
In the private database,
if we delete an object from one device


287
00:14:11,885 --> 00:14:14,221 line:-1
and then export that delete to the cloud,


288
00:14:14,288 --> 00:14:16,657 line:-2
that will leave behind a shell
called a tombstone,


289
00:14:16,723 --> 00:14:19,159 line:-2
which contains the record type
and the record ID


290
00:14:19,226 --> 00:14:21,228 line:-1
of the object that was deleted.


291
00:14:21,295 --> 00:14:27,467 line:-2
Now this allows us to fetch that tombstone
via CKFetchRecordZoneChangesOperation


292
00:14:27,534 --> 00:14:30,270 line:-2
when we import changes
from the private database


293
00:14:30,337 --> 00:14:32,706 line:-2
and delete that record
on the other device.


294
00:14:32,773 --> 00:14:36,143 line:-2
So both devices, again, come to
the same picture of what's in the cloud.


295
00:14:36,877 --> 00:14:41,081 line:-2
However, as I said,
NSPersistentCloudKitContainer can't use


296
00:14:41,148 --> 00:14:44,751 line:-2
CKFetchRecordZoneChangesOperation
with the public database.


297
00:14:44,818 --> 00:14:46,620 line:-1
It has to use CKQueryOperation.


298
00:14:47,187 --> 00:14:49,723 line:-2
So when we delete our record
from one device


299
00:14:49,790 --> 00:14:52,459 line:-2
and export that delete
to the public database,


300
00:14:52,526 --> 00:14:54,761 line:-1
the record is deleted immediately.


301
00:14:55,796 --> 00:14:58,665 line:-2
And this means that when we execute
our CKQueryOperation,


302
00:14:58,732 --> 00:15:01,168 line:-1
we ask the public database what's changed,


303
00:15:01,235 --> 00:15:03,470 line:-1
and it says, "Nothing."


304
00:15:03,537 --> 00:15:06,240 line:-2
There's no tombstone left behind
for us to fetch.


305
00:15:06,874 --> 00:15:09,743 line:-2
This means that we can't propagate
the delete to the other device,


306
00:15:09,810 --> 00:15:12,279 line:-2
and they will have different pictures
of what's in the cloud.


307
00:15:12,346 --> 00:15:15,516 line:-2
And this poses a potential problem
for our applications,


308
00:15:15,582 --> 00:15:17,818 line:-2
especially if they have user interfaces
like this one


309
00:15:17,885 --> 00:15:20,854 line:-2
where we have swipe to delete,
for example, in our table view.


310
00:15:20,921 --> 00:15:22,756 line:-1
In swiping to delete this object,


311
00:15:22,823 --> 00:15:25,158 line:-2
that delete won't propagate
in the public database


312
00:15:25,225 --> 00:15:27,528 line:-2
to all the devices
that have downloaded this object.


313
00:15:27,961 --> 00:15:31,632 line:-2
And it turns out that you can
totally detect that this will occur


314
00:15:31,698 --> 00:15:36,136 line:-2
using an API on CKRecordZone
called Capabilities.


315
00:15:36,203 --> 00:15:39,072 line:-2
If a zone doesn't support
the fetchChanges capability,


316
00:15:39,139 --> 00:15:42,142 line:-2
we can't use
CKFetchRecordZoneChangesOperation


317
00:15:42,209 --> 00:15:43,544 line:-1
to import data from it.


318
00:15:43,610 --> 00:15:45,579 line:-1
We have to use queries instead,


319
00:15:45,646 --> 00:15:48,715 line:-2
but that takes so much code
to integrate into your application


320
00:15:48,782 --> 00:15:51,318 line:-2
that I didn't even bother
to put it on slides.


321
00:15:51,385 --> 00:15:54,121 line:-2
Instead, we can detect this
in one line of code


322
00:15:54,188 --> 00:15:56,089 line:-1
using NSPersistentCloudKitContainer's


323
00:15:56,156 --> 00:15:59,660 line:-2
new canDeleteRecord
forManagedObjectWith ID method.


324
00:15:59,726 --> 00:16:00,894 line:-1
If it returns false,


325
00:16:00,961 --> 00:16:03,597 line:-2
that means that this record is stored
in the public database,


326
00:16:03,664 --> 00:16:06,500 line:-2
and NSPersistentCloudKitContainer
can't import the delete


327
00:16:06,567 --> 00:16:09,136 line:-2
in the same way that it would
from the private database.


328
00:16:09,203 --> 00:16:12,506 line:-2
Now, that doesn't mean
that you can't delete.


329
00:16:12,573 --> 00:16:15,843 line:-2
In fact, you definitely should delete data
when you need to.


330
00:16:16,643 --> 00:16:19,446 line:-2
But there's a difference
between deleting data


331
00:16:19,513 --> 00:16:22,182 line:-2
for the sake of removing it
from the public database


332
00:16:22,249 --> 00:16:26,486 line:-2
and removing it from the user interface
in your application.


333
00:16:26,553 --> 00:16:30,791 line:-2
In this code, we use canDeleteRecord
forManagedObjectWith ID


334
00:16:30,858 --> 00:16:34,161 line:-2
to tell whether or not
we should be updating a record


335
00:16:34,228 --> 00:16:38,098 line:-2
to remove it from our user interface
instead of deleting it.


336
00:16:38,165 --> 00:16:41,902 line:-2
To do that, we set the isTrashed property
on this tag to "true"


337
00:16:41,969 --> 00:16:44,905 line:-2
when we can't delete something
from the public database.


338
00:16:44,972 --> 00:16:47,107 line:-2
And in our application,
we use a fetchRequest


339
00:16:47,174 --> 00:16:50,143 line:-2
with a predicate that filters out
all the trashed records


340
00:16:50,210 --> 00:16:52,579 line:-1
to remove them from the user interface.


341
00:16:52,646 --> 00:16:56,350 line:-2
In this way, we're using an update,
or a modification, in place of a delete


342
00:16:56,416 --> 00:16:59,520 line:-2
to achieve the desired effect
in our user interface.


343
00:17:00,254 --> 00:17:03,590 line:-2
Now, we can carry
this paradigm even further,


344
00:17:03,657 --> 00:17:06,359 line:-2
say, for example, by milling out
all the fields on the record


345
00:17:06,425 --> 00:17:09,061 line:-1
that we no longer need once it's trashed.


346
00:17:09,128 --> 00:17:11,999 line:-2
This reclaims space
in the public database,


347
00:17:12,065 --> 00:17:15,002 line:-1
as well as on disc on your users' devices.


348
00:17:15,502 --> 00:17:17,237 line:-1
And you could go even further


349
00:17:17,304 --> 00:17:20,307 line:-2
by eventually purging these trashed
records from the public database


350
00:17:20,374 --> 00:17:23,877 line:-2
once you're confident that all of
the users who downloaded these records


351
00:17:23,944 --> 00:17:25,878 line:-1
have processed this update.


352
00:17:25,945 --> 00:17:28,615 line:-2
And so what you really need to decide
in your application is,


353
00:17:28,682 --> 00:17:30,784 line:-2
do you want to delete something
from the public database


354
00:17:30,851 --> 00:17:33,220 line:-1
so that no one ever downloads it again,


355
00:17:33,287 --> 00:17:36,089 line:-2
or do you want to pull something
out of the UI?


356
00:17:36,156 --> 00:17:39,726 line:-2
In this session, we learned a lot about
NSPersistentCloudKitContainer,


357
00:17:39,793 --> 00:17:43,130 line:-2
including its new databaseScope API
that allows you to configure


358
00:17:43,197 --> 00:17:46,433 line:-2
whether you want to use a store
with the public or private database.


359
00:17:46,500 --> 00:17:50,704 line:-2
And we took a detailed look at what the
public database means to your application.


360
00:17:51,405 --> 00:17:55,309 line:-2
Finally, we learned about some other
NSPersistentCloudKitContainer APIs


361
00:17:55,375 --> 00:17:57,544 line:-2
and how they can help make
some of these considerations


362
00:17:57,611 --> 00:17:59,680 line:-1
easier for you to deal with.


363
00:17:59,746 --> 00:18:02,716 line:-2
So that's all about
NSPersistentCloudKitContainer


364
00:18:02,783 --> 00:18:04,384 line:-1
and the public database.


365
00:18:04,451 --> 00:18:06,420 line:-2
It's been my pleasure
to bring you this session,


366
00:18:06,486 --> 00:18:09,823 line:-2
and from all of us here at Apple,
have an amazing WWDC.


367
00:18:09,890 --> 00:18:11,825 line:-1
[chimes]

