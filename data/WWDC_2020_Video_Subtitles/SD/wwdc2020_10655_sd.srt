1
00:00:04,104 --> 00:00:06,807 line:-1
Hello and welcome to WWDC.


2
00:00:08,709 --> 00:00:10,544 line:0
My name is Nishant,


3
00:00:10,611 --> 00:00:12,779 line:0
and I'm a Streaming Media Engineer
at Apple.


4
00:00:13,413 --> 00:00:14,948 line:-1
If you are looking to let your users


5
00:00:15,015 --> 00:00:18,185 line:-2
download and play
your HLS content while off-line,


6
00:00:18,252 --> 00:00:20,053 line:-1
you've tuned in to the right session.


7
00:00:20,821 --> 00:00:24,124 line:-2
We introduced the ability
to download HLS back in 2016.


8
00:00:25,359 --> 00:00:27,794 line:-2
Over the years
we have added new functionality,


9
00:00:27,861 --> 00:00:30,697 line:-2
and in this talk
we'll cover everything you need to know.


10
00:00:31,498 --> 00:00:35,402 line:-2
Many of you already have media content
authored as HLS for streaming.


11
00:00:36,036 --> 00:00:38,038 line:-1
You can reuse the same for downloads.


12
00:00:38,338 --> 00:00:41,708 line:-2
Along with that, you can use
FairPlay Streaming content protection.


13
00:00:41,775 --> 00:00:44,511 line:-1
And finally, off-line HLS


14
00:00:44,578 --> 00:00:47,648 line:-2
allows your users to download
the content in the background.


15
00:00:48,582 --> 00:00:51,618 line:-2
So, first question first,
should I use off-line HLS?


16
00:00:52,386 --> 00:00:56,657 line:-2
Yes. Use it when your user
explicitly requests media downloads.


17
00:00:57,891 --> 00:01:01,495 line:-2
They may want to download, say,
when they are about to get on an airplane,


18
00:01:02,196 --> 00:01:04,998 line:-2
or they may be on some
expensive cellular data plan


19
00:01:05,065 --> 00:01:07,134 line:-1
and they may want to download on Wi-Fi.


20
00:01:07,634 --> 00:01:10,804 line:-2
In all these cases,
it's appropriate to use off-line HLS.


21
00:01:11,872 --> 00:01:14,107 line:-1
Let's see how we can get you started.


22
00:01:15,008 --> 00:01:17,744 line:-2
Off-line HLS starts with the creation
of a download task.


23
00:01:18,011 --> 00:01:21,381 line:-2
The download task represents
the entire life cycle of a media download,


24
00:01:21,448 --> 00:01:22,482 line:-1
such as a movie.


25
00:01:23,317 --> 00:01:25,519 line:-2
Later on,
you need to monitor the download task


26
00:01:25,586 --> 00:01:27,521 line:-1
and update any progress in your app.


27
00:01:28,021 --> 00:01:30,157 line:-2
And finally,
once the download is complete,


28
00:01:30,224 --> 00:01:31,491 line:-1
you can play it off-line.


29
00:01:32,359 --> 00:01:34,528 line:-1
So let's take a look at the download task.


30
00:01:35,529 --> 00:01:37,965 line:-1
Download tasks are defined on URLSession.


31
00:01:38,966 --> 00:01:40,734 line:-1
What is a URLSession?


32
00:01:41,702 --> 00:01:45,706 line:-2
URLSession is an object which coordinates
all network-related tasks


33
00:01:45,772 --> 00:01:47,641 line:-1
such as upload and download tasks.


34
00:01:48,675 --> 00:01:52,379 line:-2
The download tasks specifically inherit
certain features from it.


35
00:01:53,547 --> 00:01:55,415 line:-1
The important ones to remember are


36
00:01:56,149 --> 00:02:00,187 line:-2
the download tasks are scheduled according
to availability of system resources.


37
00:02:00,721 --> 00:02:05,025 line:-2
So in certain cases, you may see that
the download does not start immediately.


38
00:02:05,425 --> 00:02:08,027 line:-2
For example,
if the network connectivity is poor,


39
00:02:08,095 --> 00:02:10,631 line:-2
the download starts
when the network improves.


40
00:02:12,065 --> 00:02:16,136 line:-2
Another important thing to remember is
the downloads are automatically retried.


41
00:02:16,670 --> 00:02:18,772 line:-1
For example, if you hit network timeouts,


42
00:02:18,839 --> 00:02:21,275 line:-2
AVFoundation retries the downloads
for you.


43
00:02:22,309 --> 00:02:23,377 line:-1
Before we dig in,


44
00:02:23,443 --> 00:02:27,080 line:-2
let's take a look at typical HLS assets
we all are familiar with.


45
00:02:27,814 --> 00:02:32,019 line:-2
This particular asset has bunch of video,
audio and subtitle renditions.


46
00:02:32,953 --> 00:02:35,956 line:-2
We will be using this as an example
going forward.


47
00:02:36,423 --> 00:02:39,259 line:-2
Coming to download tasks,
there are two variants.


48
00:02:39,326 --> 00:02:42,596 line:-2
The first one we're gonna look at
is AVAssetDownloadTask.


49
00:02:43,430 --> 00:02:49,203 line:-2
Using it, you can download one combination
of video, audio and subtitle renditions.


50
00:02:50,137 --> 00:02:54,241 line:-2
To create one of these download tasks,
you need to set up a URL session,


51
00:02:54,708 --> 00:02:57,110 line:-1
specifically AVAssetDownloadURLSession.


52
00:02:57,845 --> 00:03:01,315 line:-2
You create it with a session configuration
using an identifier.


53
00:03:02,282 --> 00:03:06,420 line:-2
And then, once you have the URL session,
you can call makeAssetDownloadTask.


54
00:03:07,020 --> 00:03:10,524 line:-2
Here in this example,
I'm downloading a movie at two megabits.


55
00:03:11,525 --> 00:03:15,529 line:-2
When you create AVAssetDownloadTask,
automatic media selection will be used.


56
00:03:16,330 --> 00:03:17,497 line:-1
What does that mean?


57
00:03:18,098 --> 00:03:20,534 line:-2
Automatic media selection
chooses renditions


58
00:03:20,601 --> 00:03:23,470 line:-2
based on device region
and localization preferences.


59
00:03:24,705 --> 00:03:27,541 line:-2
For example,
if the device region is set as France,


60
00:03:28,375 --> 00:03:31,979 line:-2
French audio and French subtitle
renditions will be downloaded.


61
00:03:32,913 --> 00:03:35,983 line:-2
Moving on,
after creating one of these things,


62
00:03:36,049 --> 00:03:39,052 line:-2
the next thing you may want to do
is monitor it for progress.


63
00:03:40,053 --> 00:03:43,557 line:-2
To do this, you need to use
AVAssetDownloadDelegate protocol.


64
00:03:44,124 --> 00:03:47,027 line:-2
I would like to highlight
two of the interfaces we have here.


65
00:03:47,794 --> 00:03:51,098 line:-2
The first one can be used to monitor
the progress of your download.


66
00:03:51,164 --> 00:03:54,134 line:-2
It provides you with the time ranges
that have been downloaded,


67
00:03:54,201 --> 00:03:55,302 line:-1
rather than the bytes,


68
00:03:55,369 --> 00:03:57,671 line:-2
so as to correlate better
with media interfaces.


69
00:03:58,505 --> 00:04:00,440 line:-1
We also have didCompleteWithError,


70
00:04:00,507 --> 00:04:02,776 line:-2
which informs you
when the download is complete.


71
00:04:04,111 --> 00:04:07,781 line:-2
You can use these interfaces
to build a progress UI in your app.


72
00:04:10,017 --> 00:04:12,853 line:-1
Here is an example of how you can do it.


73
00:04:14,087 --> 00:04:17,824 line:-2
I won't go into detail,
but it's here for your reference.


74
00:04:18,524 --> 00:04:20,360 line:-1
Some of you may be wondering,


75
00:04:20,427 --> 00:04:24,498 line:-2
"What if I want to download multiple audio
and subtitle renditions?"


76
00:04:25,165 --> 00:04:28,635 line:-2
We have another API called
AVAggregateAssetDownloadTask.


77
00:04:29,670 --> 00:04:31,939 line:-1
Using AVAggregateAssetDownloadTask,


78
00:04:32,005 --> 00:04:34,107 line:-2
you choose what renditions
you want to download.


79
00:04:34,174 --> 00:04:38,145 line:-2
Going back to our earlier example,
using aggregate download task,


80
00:04:38,212 --> 00:04:41,949 line:-2
you can download English audio
and English subtitle,


81
00:04:42,015 --> 00:04:46,720 line:-2
followed by Spanish audio and Spanish
subtitle and French subtitle renditions.


82
00:04:47,554 --> 00:04:51,158 line:-2
This API is appropriate
when you want to let your users choose


83
00:04:51,225 --> 00:04:53,961 line:-2
which audio and subtitle renditions
they want to download.


84
00:04:54,862 --> 00:04:56,964 line:-1
To create one of these, first you need


85
00:04:57,030 --> 00:04:59,766 line:-2
an array of media selections
which you want to download.


86
00:05:00,567 --> 00:05:03,403 line:0
You can create a media selection
by obtaining


87
00:05:03,470 --> 00:05:06,440 line:0
a mutable AVMediaSelection from your asset


88
00:05:06,507 --> 00:05:09,042 line:0
and choosing an appropriate
media selection option.


89
00:05:10,043 --> 00:05:11,845 line:-1
Once you have your media selections,


90
00:05:11,912 --> 00:05:15,482 line:-2
you create the AVAssetDownload
URLSession as we did before.


91
00:05:16,116 --> 00:05:18,719 line:-1
Later, you call aggregateAssetDownloadTask


92
00:05:18,785 --> 00:05:21,054 line:-2
with the media selections
you want to download.


93
00:05:22,422 --> 00:05:26,093 line:-2
Since aggregateAssetDownloadTask
involves multiple media selections,


94
00:05:26,159 --> 00:05:29,463 line:-2
monitoring it is a bit different
compared to AVAssetDownloadTask.


95
00:05:30,564 --> 00:05:31,999 line:-1
The first thing to do is


96
00:05:32,065 --> 00:05:35,602 line:-2
split the download progress
between your various media selections.


97
00:05:35,669 --> 00:05:39,673 line:-2
You can do this by assigning weights
to each one of the media selections.


98
00:05:40,774 --> 00:05:44,144 line:-2
The first media selection
will typically involve downloading video


99
00:05:44,211 --> 00:05:46,113 line:-1
and hence will take a longer time.


100
00:05:46,813 --> 00:05:51,218 line:-2
We have observed that this accounts for
approximately 70% of the download time...


101
00:05:52,386 --> 00:05:55,722 line:-2
but this may vary depending on
how your content is authored.


102
00:05:57,090 --> 00:06:00,360 line:-2
Then you split the remaining weight
between your other media selections.


103
00:06:01,195 --> 00:06:03,597 line:-2
Keep in mind that downloading audio
takes more time


104
00:06:03,664 --> 00:06:05,699 line:-1
compared to downloading subtitle tracks.


105
00:06:07,201 --> 00:06:09,369 line:-1
Going back to our earlier example,


106
00:06:09,436 --> 00:06:12,973 line:-2
you can assign 70% of the download time
to the video rendition,


107
00:06:13,040 --> 00:06:15,609 line:-2
10% of the time
to each of the audio renditions.


108
00:06:16,243 --> 00:06:18,612 line:-2
Here, I've split the time
for the audio rendition


109
00:06:18,679 --> 00:06:21,315 line:-2
between stereo
and multichannel representation.


110
00:06:21,915 --> 00:06:25,519 line:-2
Finally, we can assign the remaining time
to the subtitle renditions.


111
00:06:26,253 --> 00:06:27,621 line:-1
In order to get you started,


112
00:06:27,688 --> 00:06:30,457 line:-2
let's look at some of
the download delegate interfaces.


113
00:06:30,791 --> 00:06:34,795 line:-2
To monitor progress, you still use
the LoadedTimeRanges callback


114
00:06:34,862 --> 00:06:36,797 line:-1
similarly to AVAssetDownloadTask.


115
00:06:37,297 --> 00:06:40,100 line:-2
But here,
in addition to loaded time ranges,


116
00:06:40,167 --> 00:06:42,102 line:-2
you'll be informed
about the media selection


117
00:06:42,169 --> 00:06:44,271 line:-1
for which the time range was loaded.


118
00:06:44,972 --> 00:06:48,775 line:-2
Another interface to look at is
didCompleteFor mediaSelection.


119
00:06:48,842 --> 00:06:50,811 line:-2
You can use this
as a synchronization point


120
00:06:50,878 --> 00:06:52,880 line:-1
while estimating your download progress.


121
00:06:53,480 --> 00:06:56,550 line:0
In case of audio rendition,
expect the calls twice.


122
00:06:56,617 --> 00:07:01,255 line:0
One for stereo representation, followed by
once for multichannel representation.


123
00:07:02,155 --> 00:07:04,925 line:-2
Another thing that might happen
during your download is


124
00:07:04,992 --> 00:07:06,560 line:-1
your app may get backgrounded.


125
00:07:07,094 --> 00:07:09,830 line:-2
Download tasks still run
when your app is in background.


126
00:07:11,298 --> 00:07:15,002 line:-2
When your app is relaunched, you need to
restore your existing download task.


127
00:07:15,602 --> 00:07:17,638 line:-1
You can do this by creating a URL session


128
00:07:17,704 --> 00:07:21,108 line:-2
with the same configuration identifier
you used previously.


129
00:07:21,742 --> 00:07:24,144 line:-1
Then you can restore your existing tasks


130
00:07:24,211 --> 00:07:28,115 line:-2
and then query the tasks to get
the latest status of your downloads.


131
00:07:29,383 --> 00:07:33,487 line:-2
You can also get your original AVAsset
from the download task and reuse it.


132
00:07:34,621 --> 00:07:37,724 line:-2
So now you know how to create
and monitor the download task.


133
00:07:38,192 --> 00:07:40,027 line:-1
Let's see how you can play them.


134
00:07:41,528 --> 00:07:45,332 line:-2
First, let's take a look at where
your download is deposited on the disk.


135
00:07:45,399 --> 00:07:47,634 line:-1
In case of AVAssetDownloadTask,


136
00:07:47,701 --> 00:07:50,304 line:-2
you get the location
once the download is complete.


137
00:07:51,738 --> 00:07:54,241 line:-1
And in case of aggregateAssetDownloadTask,


138
00:07:54,308 --> 00:07:57,744 line:-2
you get the location via willDownloadTo
delegate callback.


139
00:07:58,378 --> 00:08:00,247 line:-1
You may want to store this location.


140
00:08:01,748 --> 00:08:03,383 line:-1
We'll see the reason in a bit.


141
00:08:04,785 --> 00:08:07,054 line:-2
Now let's see how we can play
your download.


142
00:08:07,754 --> 00:08:10,324 line:-2
Here is how we created
a download task earlier.


143
00:08:11,758 --> 00:08:15,329 line:-2
For playback, you reuse the AVAsset
to create your playback item.


144
00:08:16,363 --> 00:08:18,866 line:-2
An advantage of reusing
the same AVAsset is...


145
00:08:20,100 --> 00:08:22,603 line:-2
it allows AVFoundation
to optimize resources


146
00:08:22,669 --> 00:08:24,371 line:-1
between playback and download.


147
00:08:24,872 --> 00:08:26,507 line:-1
This will be useful in cases


148
00:08:26,573 --> 00:08:29,610 line:-2
where the playback happens
before the download is complete.


149
00:08:30,310 --> 00:08:33,212 line:-2
We call this scenario as play
while download is in progress.


150
00:08:34,347 --> 00:08:36,984 line:-2
Any media resources
fetched during playback


151
00:08:37,049 --> 00:08:38,418 line:-1
will be stored to the disk


152
00:08:38,485 --> 00:08:40,554 line:-2
and will not be refetched again
for the download.


153
00:08:42,222 --> 00:08:43,991 line:-1
Another scenario you may encounter is


154
00:08:44,057 --> 00:08:47,194 line:-2
your user is trying to play
long after the download is complete.


155
00:08:47,261 --> 00:08:48,529 line:-1
In that case,


156
00:08:48,595 --> 00:08:52,799 line:-2
you may not have the original AVAsset
or the download task object lying around.


157
00:08:54,434 --> 00:08:55,536 line:-1
In such cases,


158
00:08:55,602 --> 00:08:58,338 line:-2
you can recreate an AVAsset
using the file URL.


159
00:08:59,373 --> 00:09:01,508 line:-1
This is the same URL you saved earlier.


160
00:09:02,409 --> 00:09:03,977 line:-1
Some of you may be wondering,


161
00:09:04,044 --> 00:09:06,813 line:-1
"All right, I have an asset here,


162
00:09:06,880 --> 00:09:09,316 line:-2
probably with a bunch
of audio and subtitle renditions.


163
00:09:09,950 --> 00:09:12,085 line:-2
How can I find out
what can be played off-line?"


164
00:09:13,787 --> 00:09:15,889 line:-1
We have an interface called AVAssetCache.


165
00:09:16,890 --> 00:09:20,460 line:-2
You can obtain the AVAssetCache object
from your AVAsset.


166
00:09:21,595 --> 00:09:23,764 line:-1
It tells you what can be played off-line


167
00:09:23,830 --> 00:09:27,000 line:-2
and also what media selections
are playable off-line.


168
00:09:28,402 --> 00:09:31,705 line:-2
Now you know how to download
and play media content while off-line.


169
00:09:32,406 --> 00:09:36,410 line:-2
Let's talk about how you can protect
your content using FairPlay.


170
00:09:37,911 --> 00:09:42,216 line:-2
FairPlay Streaming for off-line HLS
was introduced back in 2016.


171
00:09:42,282 --> 00:09:45,018 line:-2
Some of you
may already be using FairPlay Streaming


172
00:09:45,085 --> 00:09:47,354 line:-1
for protecting your streaming content.


173
00:09:47,421 --> 00:09:49,890 line:-2
You can do the same
for off-line HLS as well.


174
00:09:51,024 --> 00:09:52,492 line:0
If you are new to FairPlay Streaming,


175
00:09:52,559 --> 00:09:54,862 line:0
I would recommend
you check out our earlier talk


176
00:09:54,928 --> 00:09:59,166 line:0
"AVContentKeySession Best Practices"
from WWDC 2018.


177
00:10:00,100 --> 00:10:03,670 line:-2
When streaming, you get your key
from your key server as needed.


178
00:10:03,737 --> 00:10:05,005 line:-1
But during off-line playback,


179
00:10:05,072 --> 00:10:07,140 line:-2
you may not be able
to reach your key server.


180
00:10:07,207 --> 00:10:10,677 line:-2
Instead you create something
called as off-line key during the download


181
00:10:10,744 --> 00:10:12,379 line:-1
and store it for later use.


182
00:10:13,213 --> 00:10:15,482 line:-2
Let's see how we you can get you
this off-line key.


183
00:10:16,283 --> 00:10:18,652 line:0
You need AVContentKeySession
to start with.


184
00:10:18,719 --> 00:10:20,020 line:0
Then you initiate key loading


185
00:10:20,087 --> 00:10:22,289 line:0
as you would normally do
for the streaming case.


186
00:10:23,056 --> 00:10:25,392 line:0
If you do not know
the key required for the download,


187
00:10:25,459 --> 00:10:26,460 line:0
don't worry.


188
00:10:26,994 --> 00:10:28,395 line:0
When you create a download task,


189
00:10:28,462 --> 00:10:31,331 line:0
you will also receive
a key request from AVContentKeySession


190
00:10:31,398 --> 00:10:33,400 line:0
if the key's already not loading.


191
00:10:33,467 --> 00:10:36,970 line:0
Then you create a ServerPlaybackContext,
SPC for short,


192
00:10:37,037 --> 00:10:40,541 line:0
by providing your FairPlay Streaming
application certificate.


193
00:10:40,607 --> 00:10:42,776 line:0
You talk to your key server
and get back the key


194
00:10:42,843 --> 00:10:45,712 line:0
in the form of Content Key Context,
CKC for short,


195
00:10:46,580 --> 00:10:49,116 line:0
and provide the CKC
to AVContentKeySession.


196
00:10:49,183 --> 00:10:51,818 line:0
You can later obtain
the off-line key from it.


197
00:10:52,753 --> 00:10:55,689 line:0
You store the off-line key
for subsequent use.


198
00:10:55,756 --> 00:10:58,859 line:0
During off-line playback,
when you receive a key request,


199
00:10:58,926 --> 00:11:01,662 line:0
you can reply back
with the off-line key you created earlier.


200
00:11:03,096 --> 00:11:04,464 line:-1
One thing to remember is


201
00:11:04,531 --> 00:11:08,735 line:-2
FairPlay Streaming lets your key server
set expiration date for off-line keys.


202
00:11:09,770 --> 00:11:12,506 line:-2
If the key expires
during an existing playback session,


203
00:11:12,573 --> 00:11:14,641 line:-1
in order to have a good user experience,


204
00:11:14,708 --> 00:11:17,744 line:-2
the session continues to the end
rather than stop abruptly.


205
00:11:19,012 --> 00:11:22,316 line:-2
Finally, remember to create
a new off-line key before expiration.


206
00:11:23,517 --> 00:11:24,518 line:-1
In some cases,


207
00:11:24,585 --> 00:11:28,522 line:-2
you may want to securely delete
an off-line key before it expires.


208
00:11:29,823 --> 00:11:32,259 line:-2
For example,
when the user deletes the download.


209
00:11:33,460 --> 00:11:34,761 line:-1
Since iOS 12,


210
00:11:34,828 --> 00:11:38,899 line:-2
you can invalidate an off-line key
by providing it to AVContentKeySession.


211
00:11:40,133 --> 00:11:42,302 line:-2
You can use also
invalidate all your off-line keys


212
00:11:42,369 --> 00:11:45,606 line:-2
by providing your FairPlay Streaming
application certificate.


213
00:11:46,139 --> 00:11:50,511 line:-2
AVContentKeySession also allows you
to create off-line keys for movie rentals.


214
00:11:50,577 --> 00:11:54,047 line:-2
A typical rental scenario involves
having two expiration dates:


215
00:11:55,382 --> 00:11:57,584 line:-2
one which starts
when the user rents a movie


216
00:11:58,085 --> 00:12:00,854 line:-2
and the other one which starts
when the user starts playback.


217
00:12:01,889 --> 00:12:05,526 line:-2
FairPlay Streaming supports this
using dual expiry off-line keys.


218
00:12:06,360 --> 00:12:11,064 line:-2
For example, you can let your user
watch a rental within 30 days of purchase,


219
00:12:11,131 --> 00:12:14,935 line:-2
but once they start watching,
they have to finish within 48 hours.


220
00:12:15,002 --> 00:12:17,137 line:0
Again, this is explained in more detail


221
00:12:17,204 --> 00:12:21,375 line:0
in "AVContentKeySession Best Practices"
from WWDC 2018.


222
00:12:22,643 --> 00:12:24,745 line:-2
There is one more thing
you may find useful.


223
00:12:26,280 --> 00:12:30,517 line:-2
Your app may be using custom protocols
for URL resources when streaming.


224
00:12:31,885 --> 00:12:33,620 line:-1
What are custom protocols for URLs?


225
00:12:35,022 --> 00:12:37,424 line:-2
These are the URLs
which begin with a custom scheme.


226
00:12:38,091 --> 00:12:43,430 line:-2
For example, URLs beginning with myscheme
and URLs beginning with skd.


227
00:12:44,765 --> 00:12:46,800 line:-2
These are the resources
specific to your app,


228
00:12:46,867 --> 00:12:51,405 line:0
and AVFoundation handles them using
AVAssetResourceLoader for playlists


229
00:12:51,471 --> 00:12:53,640 line:0
and AVContentKeySession for keys.


230
00:12:54,708 --> 00:12:58,378 line:0
If your app gets backgrounded
immediately after the download starts,


231
00:12:58,445 --> 00:13:01,248 line:0
you can still answer
resource requests for custom protocols.


232
00:13:02,883 --> 00:13:05,519 line:0
Starting from iOS 14, you have 30 seconds


233
00:13:05,586 --> 00:13:08,689 line:0
to answer any resource requests
involving custom protocols.


234
00:13:09,990 --> 00:13:14,561 line:-2
Moving on, let's talk a few things
you can do to improve user experience.


235
00:13:14,928 --> 00:13:17,030 line:-1
First, let's talk about the download time.


236
00:13:18,031 --> 00:13:21,168 line:-2
Users prefer
downloads which complete faster,


237
00:13:21,235 --> 00:13:24,204 line:-2
but they also prefer downloads
which are of higher quality.


238
00:13:24,638 --> 00:13:26,540 line:-1
You need to find the right balance.


239
00:13:27,508 --> 00:13:28,909 line:-1
One best practice we recommend


240
00:13:28,976 --> 00:13:31,979 line:-2
is to allow your users
an option to do fast downloads.


241
00:13:33,981 --> 00:13:36,149 line:-1
This may be really helpful for those users


242
00:13:36,216 --> 00:13:38,685 line:-2
who are downloading
just before catching a flight.


243
00:13:39,953 --> 00:13:42,890 line:-2
And finally another option
for best quality download.


244
00:13:44,224 --> 00:13:46,560 line:-2
For either of these options,
you may want to restrict


245
00:13:46,627 --> 00:13:49,329 line:-2
the type and quality of the content
you want to download.


246
00:13:50,731 --> 00:13:53,567 line:-2
You can do this by using
various options on the download task.


247
00:13:54,535 --> 00:13:59,506 line:-2
Firstly, you can restrict media bitrate
using MinimumRequiredMediaBitrateKey.


248
00:14:00,807 --> 00:14:01,808 line:-1
For example,


249
00:14:01,875 --> 00:14:05,078 line:-2
if you specify minimum required
media bitrate as five megabits,


250
00:14:05,145 --> 00:14:08,682 line:-2
the bitrate variant just above five
megabits will be chosen for downloads.


251
00:14:10,317 --> 00:14:11,985 line:-1
Starting from iOS 14,


252
00:14:12,052 --> 00:14:14,855 line:-2
you can also restrict
based on presentation size as well.


253
00:14:17,024 --> 00:14:21,128 line:-2
Another quality restriction you can do
is to download HDR presentations or not.


254
00:14:21,895 --> 00:14:22,930 line:-1
By default,


255
00:14:22,996 --> 00:14:26,967 line:-2
the download task would prefer to
download HDR presentations if available.


256
00:14:29,336 --> 00:14:31,872 line:-2
Lastly, you may want to restrict
based on audio type.


257
00:14:33,240 --> 00:14:35,409 line:-1
Again, by default, AVFoundation downloads


258
00:14:35,475 --> 00:14:38,178 line:-2
both stereo
and multichannel audio renditions.


259
00:14:39,780 --> 00:14:43,884 line:-2
You can opt out of multichannel by setting
prefers multichannel option key to false.


260
00:14:44,651 --> 00:14:46,320 line:-1
Some you may be wondering,


261
00:14:46,386 --> 00:14:49,756 line:-2
"Why download both
stereo and multichannel representations?"


262
00:14:50,190 --> 00:14:53,193 line:-2
We believe that the stereo rendition
mixed at a studio


263
00:14:53,260 --> 00:14:55,128 line:-1
better reflects artistic intent.


264
00:14:56,063 --> 00:14:58,632 line:-2
For example,
the dialogue may be given more prominence


265
00:14:58,699 --> 00:15:00,400 line:-1
compared to other background noise.


266
00:15:01,702 --> 00:15:05,072 line:-2
You may want to experiment with these
options and choose them appropriately


267
00:15:05,138 --> 00:15:07,541 line:-2
depending on
how your media library is authored.


268
00:15:08,909 --> 00:15:11,311 line:-2
Moving on,
let's talk about storage management.


269
00:15:12,946 --> 00:15:14,982 line:-1
Another best practice we recommend is


270
00:15:15,048 --> 00:15:18,619 line:-2
you let the operating system manage
the storage for your off-line downloads.


271
00:15:20,354 --> 00:15:22,556 line:-2
By doing so,
it allows the operating system


272
00:15:22,623 --> 00:15:25,692 line:-2
to delete and reclaim storage
when your app is not running.


273
00:15:27,461 --> 00:15:30,163 line:-1
For example, during software updates,


274
00:15:30,230 --> 00:15:33,166 line:-2
the operating system
can automatically reclaim space


275
00:15:33,233 --> 00:15:34,868 line:-1
when the storage is running low.


276
00:15:36,203 --> 00:15:38,906 line:-2
It also allows your users
to delete media content


277
00:15:38,972 --> 00:15:40,207 line:-1
through the Settings app.


278
00:15:41,275 --> 00:15:44,811 line:-2
The asset image and title you provide
when you create the download task


279
00:15:44,878 --> 00:15:46,180 line:-1
will be displayed here.


280
00:15:47,514 --> 00:15:50,117 line:-2
Now let's take a look
at how you can opt in to this.


281
00:15:51,051 --> 00:15:53,253 line:-2
You start by getting
a shared storage manager.


282
00:15:54,821 --> 00:15:58,792 line:-2
Then you create a new policy by providing
a priority and expiration date.


283
00:16:00,294 --> 00:16:02,896 line:-2
Assets will be purged
based on expiration date


284
00:16:02,963 --> 00:16:04,765 line:-1
and then based on the priority.


285
00:16:05,966 --> 00:16:08,669 line:-2
Finally, you set the policy
on your downloaded content.


286
00:16:10,270 --> 00:16:15,142 line:-2
Remember to keep the downloaded content
at the same system-provided location.


287
00:16:15,943 --> 00:16:19,246 line:-2
And be prepared for the assets
to be deleted by the system.


288
00:16:20,514 --> 00:16:21,915 line:-1
So that is off-line HLS,


289
00:16:21,982 --> 00:16:24,885 line:-2
and we are really excited
for you to start using it.


290
00:16:25,452 --> 00:16:26,486 line:-1
To wrap up,


291
00:16:26,553 --> 00:16:30,057 line:-2
we went over two different download tasks
using which you can download HLS.


292
00:16:31,191 --> 00:16:33,360 line:-1
The first one is AVAssetDownloadTask,


293
00:16:33,427 --> 00:16:37,231 line:-2
which uses automatic media selection
to select media renditions to download,


294
00:16:38,065 --> 00:16:40,901 line:-2
and the second one is
the aggregate download task,


295
00:16:40,968 --> 00:16:42,202 line:-1
which lets you specify


296
00:16:42,269 --> 00:16:44,972 line:-2
the audio and subtitle renditions
you want to download.


297
00:16:46,173 --> 00:16:48,642 line:-2
Finally, we looked at
how we can use FairPlay Streaming


298
00:16:48,709 --> 00:16:50,410 line:-1
to protect your off-line content


299
00:16:50,477 --> 00:16:52,579 line:-2
and learned
some best practices on the way.


300
00:16:53,547 --> 00:16:54,648 line:-1
To get you started,


301
00:16:54,715 --> 00:16:58,151 line:-2
we have a sample app which you can obtain
from the resources below.


302
00:16:58,685 --> 00:17:01,388 line:-2
Thank you for joining,
and enjoy the rest of WWDC.

