1
00:00:03,804 --> 00:00:06,406 line:-1
Hello and welcome to WWDC.


2
00:00:08,775 --> 00:00:12,246 line:0
Hello. My name is Tobias Conradi,
and I'm an engineer on the Photos team.


3
00:00:12,312 --> 00:00:14,047 line:0
Together with my colleague, Justin,


4
00:00:14,114 --> 00:00:16,950 line:0
I will introduce you
to the new Photos picker.


5
00:00:17,384 --> 00:00:19,453 line:-1
First of all, let's answer this question:


6
00:00:19,520 --> 00:00:21,321 line:-1
"What is PHPicker?"


7
00:00:23,423 --> 00:00:25,526 line:-1
PHPicker is a system-provided picker


8
00:00:25,592 --> 00:00:28,462 line:-2
which allows you to get access
to photos and videos


9
00:00:28,529 --> 00:00:30,063 line:-1
from the user's Photo Library.


10
00:00:31,231 --> 00:00:35,235 line:-2
It has now built-in support for search
just like the Photos app.


11
00:00:36,703 --> 00:00:39,306 line:-1
It supports fluid zooming in the grid


12
00:00:40,073 --> 00:00:44,745 line:-2
and a very often requested feature,
multi-select for third-party apps,


13
00:00:44,811 --> 00:00:47,347 line:-2
where you can even review
your selection in one app.


14
00:00:47,781 --> 00:00:52,119 line:-2
In short, PHPicker is the best way
for an app to access


15
00:00:52,186 --> 00:00:54,354 line:-1
photo and video data from Photos.


16
00:00:54,421 --> 00:00:56,857 line:-2
It comes in an all-new design
you just saw,


17
00:00:56,924 --> 00:01:01,094 line:-2
has a new, easy-to-use API,
supports multi-selection,


18
00:01:01,161 --> 00:01:03,864 line:-1
and apps can specify the selectable types.


19
00:01:05,098 --> 00:01:08,435 line:-2
Another very important feature
is the privacy aspect of it.


20
00:01:08,502 --> 00:01:11,205 line:-1
It has privacy built in by default.


21
00:01:11,271 --> 00:01:15,075 line:-2
The app doesn't need direct access
to the Photos Library to show the picker,


22
00:01:15,142 --> 00:01:19,012 line:-2
and the picker won't prompt for access
on behalf of your app.


23
00:01:19,079 --> 00:01:21,982 line:-2
It provides the user-selected photos
and videos only,


24
00:01:22,049 --> 00:01:25,552 line:-2
which is a clear user intent
of sharing the assets with your app.


25
00:01:26,353 --> 00:01:28,689 line:-2
You might wonder,
"How do we achieve that?"


26
00:01:28,755 --> 00:01:31,925 line:-2
Well, PHPicker runs out of process
of the app.


27
00:01:31,992 --> 00:01:35,629 line:-2
Even though it looks like
PHPicker runs inside the app,


28
00:01:35,696 --> 00:01:41,034 line:0
it is really running in a separate process
from the host app rendered on top of it,


29
00:01:41,735 --> 00:01:43,971 line:0
but the app can't access
the picker directly


30
00:01:44,037 --> 00:01:46,874 line:0
and not even take screenshots
of the picker content.


31
00:01:46,940 --> 00:01:52,012 line:-2
Only what the user actually selects
is passed back to the host app.


32
00:01:53,347 --> 00:01:56,483 line:-2
Now let's have a look
at the different components of this API.


33
00:01:57,117 --> 00:01:59,520 line:-1
First, there is PHPickerConfiguration,


34
00:01:59,586 --> 00:02:02,623 line:-2
which is used to specify
the multi-select limit,


35
00:02:02,689 --> 00:02:06,860 line:-2
or with an optional PHPickerFilter
to reduce the selectable types.


36
00:02:07,995 --> 00:02:10,597 line:-2
The configuration is passed
to a PHPickerController


37
00:02:10,663 --> 00:02:12,533 line:-1
during its initialization.


38
00:02:12,599 --> 00:02:16,136 line:-2
Set a delegate implemented in your app
to get a response back.


39
00:02:17,037 --> 00:02:19,006 line:-1
Once your user confirms their selection,


40
00:02:19,072 --> 00:02:21,808 line:-2
the picker creates
an array of PHPickerResult objects


41
00:02:21,875 --> 00:02:24,444 line:-1
which is then passed back to the delegate.


42
00:02:25,512 --> 00:02:27,814 line:-1
Let's have a look how it works in code.


43
00:02:27,881 --> 00:02:30,684 line:-2
As I already mentioned,
you can use the configuration


44
00:02:30,751 --> 00:02:34,454 line:-2
to specify the selection limit
and filter down the visible item types.


45
00:02:35,355 --> 00:02:37,324 line:-1
First, we initialize the configuration.


46
00:02:38,425 --> 00:02:40,761 line:-2
You can specify
a selection limit for the picker,


47
00:02:40,827 --> 00:02:42,296 line:-1
the default limit is one,


48
00:02:42,362 --> 00:02:46,066 line:-2
and to allow unlimited selection,
set the selection limit to zero.


49
00:02:46,667 --> 00:02:51,004 line:0
You can then specify a filter
to restrict the types of selected items.


50
00:02:51,071 --> 00:02:53,774 line:0
For example,
if you only want to show images,


51
00:02:53,841 --> 00:02:56,443 line:0
including live photos,
use the "images" filter.


52
00:02:56,944 --> 00:02:59,546 line:0
You can even combine filters.
In this example,


53
00:02:59,613 --> 00:03:03,517 line:0
the picker will only show videos
and live photos but no images.


54
00:03:04,685 --> 00:03:08,355 line:-2
The PHPickerViewController
is initialized with the configuration.


55
00:03:08,422 --> 00:03:10,390 line:-1
First, let's create a configuration


56
00:03:10,457 --> 00:03:13,594 line:-2
and then pass the configuration
to the PickerViewController


57
00:03:13,660 --> 00:03:15,262 line:-1
during initialization.


58
00:03:15,329 --> 00:03:19,199 line:0
Assign a delegate to the picker
and present the picker.


59
00:03:19,633 --> 00:03:22,903 line:0
Please note that your app
is responsible for presentation


60
00:03:22,970 --> 00:03:24,538 line:0
and dismissal of the picker.


61
00:03:24,605 --> 00:03:26,974 line:0
The picker doesn't manage
presentation itself.


62
00:03:27,708 --> 00:03:30,210 line:-1
Once the user confirms their selection,


63
00:03:30,277 --> 00:03:32,012 line:-1
the delegate method will be called.


64
00:03:32,813 --> 00:03:35,282 line:-1
So first, let's dismiss the picker.


65
00:03:35,349 --> 00:03:38,819 line:-2
Then you can ask result objects
for an NSItemProvider.


66
00:03:38,886 --> 00:03:43,223 line:-2
The item provider vends multiple different
representations of the selected item.


67
00:03:44,224 --> 00:03:47,461 line:-2
First ask the provider
if it can load the type you want to load,


68
00:03:47,528 --> 00:03:49,897 line:-1
and then actually load it.


69
00:03:49,963 --> 00:03:52,466 line:-2
Then your app can do something
with the image.


70
00:03:52,533 --> 00:03:55,536 line:-2
Remember that the item provider API
is async,


71
00:03:55,602 --> 00:03:57,938 line:-2
and you should handle
any errors occurring here.


72
00:03:59,540 --> 00:04:03,443 line:-2
Let me now hand over to my colleague,
Justin, to show it to you in Xcode.


73
00:04:04,378 --> 00:04:05,812 line:-1
Thanks, Tobias.


74
00:04:05,879 --> 00:04:07,080 line:-1
Hello, everyone.


75
00:04:07,548 --> 00:04:10,918 line:-2
My name is Justin.
I'm an engineer on the Photos team.


76
00:04:11,318 --> 00:04:16,356 line:-2
I'm here to show you how you can integrate
PHPicker into your iOS application.


77
00:04:17,591 --> 00:04:20,293 line:-1
We will build a simple photo preview app


78
00:04:20,360 --> 00:04:22,829 line:-2
that can display
user-selected photos on screen.


79
00:04:23,263 --> 00:04:28,101 line:-2
Before we start, let's build and run
to see what we have currently.


80
00:04:29,136 --> 00:04:31,872 line:-2
We have a UIImageView
displaying a placeholder image.


81
00:04:32,606 --> 00:04:34,441 line:-1
There's also a "plus" button,


82
00:04:34,508 --> 00:04:36,777 line:-2
but tapping it
doesn't do anything right now.


83
00:04:37,144 --> 00:04:40,247 line:-1
So what does it take to complete this app?


84
00:04:40,981 --> 00:04:42,916 line:-1
We're going to do it in two steps.


85
00:04:43,784 --> 00:04:46,887 line:-2
First,
we'll support previewing a single image.


86
00:04:47,988 --> 00:04:50,691 line:-2
We want to present the picker
when "plus" is tapped


87
00:04:50,757 --> 00:04:53,160 line:-2
and display the selected image
on the image view.


88
00:04:53,594 --> 00:04:56,864 line:-1
Then we will add multi-image support.


89
00:04:58,098 --> 00:05:00,634 line:-2
In addition to what we have
with single-selection,


90
00:05:01,134 --> 00:05:03,337 line:-1
if more than one image is selected,


91
00:05:03,403 --> 00:05:06,607 line:-1
a user can display the next selected image


92
00:05:06,673 --> 00:05:08,742 line:-1
by simply tapping on the screen.


93
00:05:09,276 --> 00:05:10,511 line:-1
Okay.


94
00:05:10,577 --> 00:05:13,313 line:-2
Now that we understand
what features we want to add,


95
00:05:13,380 --> 00:05:14,481 line:-1
let's start building.


96
00:05:16,083 --> 00:05:18,819 line:-2
The first thing I need to do
is to present the picker.


97
00:05:20,053 --> 00:05:24,157 line:-2
I already set up the UI
so presentPicker method will be called


98
00:05:24,224 --> 00:05:25,492 line:-1
when "plus" is tapped.


99
00:05:26,093 --> 00:05:28,228 line:-1
We just need to implement this method.


100
00:05:28,295 --> 00:05:30,230 line:-1
To actually present the picker,


101
00:05:30,297 --> 00:05:32,866 line:-2
we will create
the picker configuration object first.


102
00:05:36,637 --> 00:05:39,206 line:-1
Since we are only interested in images,


103
00:05:39,273 --> 00:05:41,542 line:-1
we want to specify the images filter.


104
00:05:43,076 --> 00:05:45,179 line:-1
We don't need to set a selection limit


105
00:05:45,245 --> 00:05:47,347 line:-2
because the default selection limit
is one.


106
00:05:48,749 --> 00:05:51,118 line:-1
We will add multi-selection support later.


107
00:05:51,518 --> 00:05:54,821 line:-2
Then we can initialize
PHPickerViewController


108
00:05:54,888 --> 00:05:57,491 line:-2
using the configuration object
I just created.


109
00:05:58,792 --> 00:06:02,763 line:-2
We want the presenting view controller
to receive user selections,


110
00:06:02,829 --> 00:06:04,731 line:-1
so we need to set delegate to "self."


111
00:06:08,569 --> 00:06:10,270 line:-1
We are seeing this compiler error


112
00:06:10,337 --> 00:06:13,874 line:-2
because our view controller didn't conform
to the delegate protocol yet.


113
00:06:14,741 --> 00:06:17,911 line:-2
Let's add the conformance
to fix the error.


114
00:06:20,881 --> 00:06:23,317 line:-1
We only need to implement a single method:


115
00:06:23,383 --> 00:06:25,118 line:-1
pickerDidFinishPicking.


116
00:06:25,185 --> 00:06:27,888 line:-2
It will give us an array
of PHPickerResult objects.


117
00:06:28,889 --> 00:06:30,924 line:-1
If a user cancels the picker,


118
00:06:31,592 --> 00:06:32,926 line:-1
that array will be empty.


119
00:06:33,994 --> 00:06:36,196 line:-1
We should always dismiss the picker first.


120
00:06:38,498 --> 00:06:42,269 line:-2
Then we can check
if we receive any result.


121
00:06:45,839 --> 00:06:48,675 line:-1
And if the item provider can load images,


122
00:06:49,276 --> 00:06:52,045 line:-2
we will retrieve the image
and display it on screen.


123
00:06:53,580 --> 00:06:55,015 line:-1
In your real app,


124
00:06:55,082 --> 00:06:58,418 line:-2
you should also handle the error
when the image can't be retrieved.


125
00:06:59,853 --> 00:07:01,154 line:-1
All right.


126
00:07:01,221 --> 00:07:03,590 line:-2
That's all we need
to implement single-selection.


127
00:07:04,224 --> 00:07:07,628 line:-2
Let's build and run
to see what we have so far.


128
00:07:08,662 --> 00:07:12,132 line:-2
Now, if I tap the "plus" button,
the picker will be presented.


129
00:07:14,034 --> 00:07:15,802 line:-1
And then if I select the image...


130
00:07:17,671 --> 00:07:19,239 line:-1
it will be displayed on screen.


131
00:07:19,740 --> 00:07:21,441 line:-1
It worked.


132
00:07:21,508 --> 00:07:24,278 line:-2
It's that easy to use
the new PHPicker API.


133
00:07:26,446 --> 00:07:27,447 line:-1
Great.


134
00:07:28,115 --> 00:07:31,251 line:-2
Let's complete the app
by adding multiple selection support.


135
00:07:33,020 --> 00:07:36,823 line:-2
The first thing I need to do
is to set selection limit to zero


136
00:07:36,890 --> 00:07:38,725 line:-1
to enable unlimited selection.


137
00:07:39,560 --> 00:07:42,829 line:-2
The great thing
about the new async image-loading API


138
00:07:42,896 --> 00:07:45,532 line:-2
is we don't need
to load all images up front.


139
00:07:45,599 --> 00:07:49,269 line:-2
We just need to keep a reference
to all returned item providers


140
00:07:49,336 --> 00:07:51,438 line:-1
and load images when necessary.


141
00:07:52,306 --> 00:07:53,373 line:-1
So let's do that.


142
00:07:58,846 --> 00:08:03,083 line:-2
Now we have an array to store
all picker-returned item providers.


143
00:08:03,750 --> 00:08:05,586 line:-1
We also created an iterator


144
00:08:05,652 --> 00:08:09,223 line:-2
so we can know which selected image
is currently displayed.


145
00:08:10,057 --> 00:08:12,559 line:-2
We can create a method
to display the next image.


146
00:08:19,466 --> 00:08:22,236 line:-1
You may notice that this is very similar


147
00:08:22,302 --> 00:08:24,771 line:-2
to our previous
single-selection implementation.


148
00:08:25,606 --> 00:08:30,177 line:-2
The only difference is we use the iterator
to get the current item provider.


149
00:08:31,011 --> 00:08:32,813 line:-1
Like I mentioned earlier,


150
00:08:32,880 --> 00:08:36,616 line:-2
whenever the screen is tapped,
we want to display the next image.


151
00:08:37,650 --> 00:08:41,554 line:-2
So we just need to override touchesEnded
and call displayNextImage.


152
00:08:46,827 --> 00:08:50,130 line:-2
And lastly,
we can update our delegate method.


153
00:08:53,200 --> 00:08:55,302 line:-1
So we can delete single-selection first.


154
00:08:59,273 --> 00:09:01,508 line:-1
We just need to save all item providers,


155
00:09:02,242 --> 00:09:03,877 line:-1
create an iterator,


156
00:09:03,944 --> 00:09:07,514 line:-2
and call displayNextImage
to display the first image.


157
00:09:08,115 --> 00:09:11,585 line:-2
That's all we need to implement
multi-image preview.


158
00:09:12,753 --> 00:09:14,788 line:-1
Let's run the app to see what we built.


159
00:09:19,493 --> 00:09:20,928 line:-1
I can tap the "plus" button.


160
00:09:22,529 --> 00:09:26,266 line:-2
You may notice that the picker
now has that slightly different UI.


161
00:09:26,900 --> 00:09:29,903 line:-2
That's because the picker knows
we're in multi-selection mode.


162
00:09:30,504 --> 00:09:32,773 line:-1
We'll also show the staging area


163
00:09:32,840 --> 00:09:36,143 line:-2
and also the "add" button
on the top right corner.


164
00:09:37,711 --> 00:09:39,379 line:-1
I can select a couple images...


165
00:09:40,848 --> 00:09:42,015 line:-1
and tap "add."


166
00:09:45,018 --> 00:09:47,821 line:-2
The first image
is correctly displayed on-screen.


167
00:09:49,122 --> 00:09:52,326 line:-1
It is as fast as single-selection mode


168
00:09:52,392 --> 00:09:55,028 line:-2
because we don't need
to load other images at all.


169
00:09:56,263 --> 00:09:57,764 line:-1
And if I tap the screen,


170
00:09:58,332 --> 00:10:00,000 line:-1
the next image will be displayed.


171
00:10:01,201 --> 00:10:06,640 line:-2
Tap it again and again and again
until I reach the end.


172
00:10:08,909 --> 00:10:12,312 line:-2
That's it for the demo.
Now, back to slides.


173
00:10:12,746 --> 00:10:14,348 line:-1
As seen in the demo,


174
00:10:14,414 --> 00:10:16,817 line:-2
you don't need to prompt
for Photos Library access


175
00:10:16,884 --> 00:10:18,218 line:-1
to use PHPicker.


176
00:10:19,386 --> 00:10:23,056 line:-2
Actually, for most apps
that only want photo and video data,


177
00:10:23,690 --> 00:10:25,626 line:-1
you don't need to use PhotoKit at all.


178
00:10:26,760 --> 00:10:30,430 line:-2
But at the same time,
we know that some PhotoKit-based apps


179
00:10:30,497 --> 00:10:34,001 line:-2
want to get user-selected PHAssets
from the picker.


180
00:10:35,369 --> 00:10:37,604 line:-1
So let's talk about how you can do that.


181
00:10:38,405 --> 00:10:40,207 line:-1
Before we dive into the API,


182
00:10:41,041 --> 00:10:45,579 line:-2
let's reconsider what types of apps
can benefit from using PhotoKit.


183
00:10:46,880 --> 00:10:48,048 line:-1
For example,


184
00:10:48,582 --> 00:10:51,585 line:-2
if your app supports
non-destructive image editing


185
00:10:51,652 --> 00:10:54,121 line:-2
or has Photos Library
organization features...


186
00:10:55,189 --> 00:10:56,790 line:-1
you need to use PhotoKit.


187
00:10:58,458 --> 00:11:03,297 line:-2
But please make sure you only request
Photos Library access when necessary


188
00:11:04,231 --> 00:11:07,334 line:-2
and handle the case
where Photos Library access


189
00:11:07,401 --> 00:11:09,002 line:-1
is denied by the user.


190
00:11:09,770 --> 00:11:11,371 line:-1
Let's look at some code now.


191
00:11:12,306 --> 00:11:16,076 line:-2
Using PHPicker with PhotoKit
is very simple.


192
00:11:16,143 --> 00:11:18,912 line:-2
You just need to initialize
PHPickerConfiguration


193
00:11:18,979 --> 00:11:20,714 line:-1
with a PHPhotoLibrary object.


194
00:11:21,381 --> 00:11:25,686 line:0
Then you can get asset identifiers
in your delegate callback,


195
00:11:26,186 --> 00:11:30,390 line:0
and you can fetch PHAssets
using asset identifiers


196
00:11:30,457 --> 00:11:33,327 line:0
you received
through standard PhotoKit API.


197
00:11:34,795 --> 00:11:36,930 line:-1
In iOS 14,


198
00:11:36,997 --> 00:11:40,934 line:-2
we also introduced a new feature
called Limited Photos Library.


199
00:11:42,002 --> 00:11:46,173 line:-2
If your app doesn't use PhotoKit,
you don't need to worry about that.


200
00:11:47,708 --> 00:11:50,310 line:-1
For apps asking for Photos Library access,


201
00:11:51,111 --> 00:11:55,282 line:-2
we will show a third "Select Photos"
option in the user prompt


202
00:11:56,083 --> 00:12:00,587 line:-2
in addition to the existing "Allow Access"
and "No Access" options.


203
00:12:02,756 --> 00:12:05,392 line:-1
The new option will only allow your app


204
00:12:05,459 --> 00:12:08,795 line:-2
to access a portion of PHAssets
in a user's Photos Library.


205
00:12:10,097 --> 00:12:13,901 line:-2
We believe it can enable users
to better control their privacy.


206
00:12:16,670 --> 00:12:19,706 line:-2
If a user places your app
under Limited Photos Library,


207
00:12:20,507 --> 00:12:23,343 line:-2
there's a couple things
you need to keep in mind.


208
00:12:24,278 --> 00:12:28,415 line:-2
First, the picker will still show
the entire Photos Library,


209
00:12:28,482 --> 00:12:31,752 line:-2
and all photos and videos
can be selected by the user.


210
00:12:33,086 --> 00:12:37,257 line:-2
Second,
no matter what users select in the picker,


211
00:12:37,324 --> 00:12:40,527 line:-1
PHAssets you can access will not change.


212
00:12:41,595 --> 00:12:44,498 line:-2
If you want to request access
to additional PHAssets,


213
00:12:45,299 --> 00:12:47,501 line:-1
there's a separate API for you to do that.


214
00:12:48,368 --> 00:12:51,505 line:0
For more information, please refer to


215
00:12:51,572 --> 00:12:54,308 line:0
"Handle the Limited Photos Library
in Your App" session.


216
00:12:55,375 --> 00:12:59,413 line:0
Now, back to Tobias
to wrap up this session.


217
00:12:59,913 --> 00:13:01,181 line:-1
Thank you, Justin.


218
00:13:01,248 --> 00:13:05,419 line:-2
Let's talk about some best practices
and summarize what you've just learned.


219
00:13:07,454 --> 00:13:10,224 line:-2
First,
let's start with a deprecation reminder.


220
00:13:10,290 --> 00:13:14,628 line:-2
AssetsLibrary has been deprecated
years ago, and is still deprecated.


221
00:13:14,695 --> 00:13:17,497 line:-2
If your app needs access
to the Photos Library,


222
00:13:17,564 --> 00:13:19,666 line:-1
please switch over to PhotoKit.


223
00:13:19,733 --> 00:13:22,169 line:-1
AssetsLibrary will eventually go away.


224
00:13:23,036 --> 00:13:25,138 line:-1
The other deprecation announcement today


225
00:13:25,205 --> 00:13:28,542 line:-2
is about the Photos Library portion
of UIImagePickerController.


226
00:13:28,609 --> 00:13:30,143 line:-1
It is being deprecated,


227
00:13:30,210 --> 00:13:33,514 line:-2
and we encourage you to adopt
PHPickerViewController instead.


228
00:13:34,081 --> 00:13:37,050 line:-2
If your app needs access
to images or videos,


229
00:13:37,117 --> 00:13:39,553 line:-2
we really encourage you to adopt
the new PHPicker


230
00:13:39,620 --> 00:13:42,389 line:-2
instead of writing
your own custom picker UI.


231
00:13:42,456 --> 00:13:44,858 line:-1
It supports multi-select, search,


232
00:13:44,925 --> 00:13:47,861 line:-2
and has a consistent UI
with the main Photos app,


233
00:13:47,928 --> 00:13:51,698 line:-2
so your users already know
how to get to their images and videos.


234
00:13:52,332 --> 00:13:55,402 line:-2
Also, please don't prompt
for Photos Library access


235
00:13:55,469 --> 00:13:56,870 line:-1
before showing the picker,


236
00:13:56,937 --> 00:14:00,607 line:-2
and don't require the user to grant you
access before showing the picker.


237
00:14:00,674 --> 00:14:02,743 line:-1
There is no need to do any of this,


238
00:14:02,809 --> 00:14:05,445 line:-2
and it doesn't help with your user's trust
into your app.


239
00:14:07,114 --> 00:14:10,384 line:-2
If your app leverages PhotoKit
to access the Photos Library,


240
00:14:10,450 --> 00:14:13,887 line:-2
please reconsider if it really needs
to have access to the library


241
00:14:13,954 --> 00:14:16,356 line:-1
or if you can use PHPicker instead.


242
00:14:16,790 --> 00:14:19,493 line:-2
We really hope you like
the new picker and API.


243
00:14:19,560 --> 00:14:22,429 line:-2
We're looking forward
to you adopting it in your apps.


244
00:14:23,030 --> 00:14:24,031 line:-1
Thank you.

