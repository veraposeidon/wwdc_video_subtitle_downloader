1
00:00:03,871 --> 00:00:06,406 line:-1
Hello and welcome to WWDC.


2
00:00:08,509 --> 00:00:10,277 line:0
Hello, my name is Stacey Abrams,


3
00:00:10,344 --> 00:00:12,913 line:0
and I'm an engineer
on the Wallet and Apple Pay team.


4
00:00:12,980 --> 00:00:15,349 line:0
I'm excited to share
what we've been working on this year,


5
00:00:15,415 --> 00:00:16,617 line:0
so let's get started.


6
00:00:17,284 --> 00:00:20,254 line:-2
First,
we'll cover incoming API enhancements.


7
00:00:20,320 --> 00:00:24,324 line:-2
Then we will talk about how Apple Pay
and App Clips work together.


8
00:00:24,691 --> 00:00:26,960 line:-2
Finally,
we will cover platform enhancements


9
00:00:27,027 --> 00:00:29,396 line:-2
that will improve the experience
of Apple Pay.


10
00:00:29,463 --> 00:00:31,665 line:-1
So, let's get into the API enhancements.


11
00:00:33,000 --> 00:00:34,434 line:-1
When we first launched Apple Pay,


12
00:00:34,501 --> 00:00:36,970 line:-2
we started out with payment
in its traditional form:


13
00:00:37,037 --> 00:00:38,372 line:-1
credit and debit cards.


14
00:00:38,939 --> 00:00:40,574 line:-1
But we've come a long way since then,


15
00:00:40,641 --> 00:00:43,310 line:-2
and now we have so much more
than just credit cards.


16
00:00:43,377 --> 00:00:45,779 line:-2
You can use Apple Pay
to get onto public transit


17
00:00:45,846 --> 00:00:49,082 line:-2
in the United States, Japan and China,
just to name a few.


18
00:00:49,616 --> 00:00:51,785 line:-2
You can add your student ID badge
to Wallet


19
00:00:51,852 --> 00:00:53,520 line:-1
and use your iPhone or Apple Watch


20
00:00:53,587 --> 00:00:55,956 line:-2
to get into dining halls
and academic buildings.


21
00:00:56,323 --> 00:00:57,324 line:-1
Historically,


22
00:00:57,391 --> 00:01:00,060 line:-2
the class used in conjunction
with these features on-device


23
00:01:00,127 --> 00:01:01,795 line:-1
has been PKPaymentPass,


24
00:01:01,862 --> 00:01:04,932 line:-2
but what these scenarios really have
in common from a device standpoint


25
00:01:04,998 --> 00:01:07,935 line:-2
is that they all require the backing
of the Secure Element.


26
00:01:08,569 --> 00:01:12,739 line:-2
The payment in PKPaymentPass was
starting to feel a little too specific,


27
00:01:12,806 --> 00:01:15,008 line:-2
given our continuously expanding
feature set.


28
00:01:15,375 --> 00:01:19,112 line:-2
Because of that, today we are introducing
PKSecureElementPass


29
00:01:19,179 --> 00:01:22,216 line:-2
in order to accurately unify
the uses of this class.


30
00:01:22,983 --> 00:01:25,819 line:-2
PKSecureElementPass
has all the same properties


31
00:01:25,886 --> 00:01:30,057 line:-2
to encourage new and existing developers
to adopt this class moving forward.


32
00:01:30,123 --> 00:01:32,693 line:-2
PKPaymentPass will be deprecated
in the future.


33
00:01:33,260 --> 00:01:35,562 line:-2
One class that's not shedding
its payment character


34
00:01:35,629 --> 00:01:37,598 line:-1
is our very own PKPaymentButton.


35
00:01:37,965 --> 00:01:41,001 line:-2
This is our main entry point for payment,
and that isn't changing.


36
00:01:41,768 --> 00:01:44,238 line:-2
What is changing
is that we have a comprehensive slate


37
00:01:44,304 --> 00:01:46,373 line:-1
of new button types coming this year.


38
00:01:46,740 --> 00:01:49,977 line:-2
Our users are doing so much more
than outright purchasing these days.


39
00:01:50,043 --> 00:01:52,079 line:-1
People are using Apple Pay to rent bikes.


40
00:01:52,145 --> 00:01:54,281 line:-2
They are adding money
to their transit cards.


41
00:01:54,348 --> 00:01:57,651 line:-2
We wanted to enable
anyone adding support for Apple Pay


42
00:01:57,718 --> 00:02:01,522 line:-2
to have the purchasing granularity
they desire in the button that they add.


43
00:02:01,588 --> 00:02:05,459 line:-2
So now you can rent with Apple Pay,
tip with Apple Pay and more,


44
00:02:05,526 --> 00:02:07,828 line:-2
all in the button you surface
to your users.


45
00:02:08,628 --> 00:02:12,733 line:-2
This is how you would currently declare
a PKPaymentButton with a white outline


46
00:02:12,799 --> 00:02:15,169 line:-1
on the Web and natively on iOS.


47
00:02:15,235 --> 00:02:17,404 line:-2
While type controls
the content of the button,


48
00:02:17,471 --> 00:02:19,173 line:-1
the style controls its appearance.


49
00:02:19,773 --> 00:02:22,976 line:-2
We have Light and Dark modes
for PKPaymentButton.


50
00:02:23,043 --> 00:02:25,379 line:-2
But wouldn't it be great
if it automatically switched


51
00:02:25,445 --> 00:02:28,682 line:-2
based on if your app is in Light
or Dark Mode?


52
00:02:28,749 --> 00:02:29,950 line:-1
Well, now it can.


53
00:02:30,017 --> 00:02:32,486 line:-2
We're introducing a new style
that handles this:


54
00:02:32,553 --> 00:02:34,888 line:-1
PKPaymentButtonStyle: .automatic.


55
00:02:34,955 --> 00:02:37,191 line:-2
This button's style
will automatically switch


56
00:02:37,257 --> 00:02:38,926 line:-1
based on the system theme.


57
00:02:38,992 --> 00:02:43,597 line:-2
If you're an iOS or macOS developer,
you can use this automatic button style.


58
00:02:43,664 --> 00:02:45,332 line:-1
If you have more specific requirements


59
00:02:45,399 --> 00:02:47,367 line:-2
or want to respond
to backgrounds differently,


60
00:02:47,434 --> 00:02:51,071 line:-2
then you can still use the regular
Light or Dark styles accordingly.


61
00:02:51,138 --> 00:02:54,842 line:-2
We hope this automatic style makes it
easier to enable Dark Mode in your apps.


62
00:02:55,275 --> 00:02:57,744 line:-2
We think you're going to love
all these new button options,


63
00:02:57,811 --> 00:03:01,415 line:-2
and they'll go far in helping you to
integrate Apple Pay into your app clips,


64
00:03:01,481 --> 00:03:03,584 line:-1
a feature that we're really excited about.


65
00:03:04,051 --> 00:03:06,820 line:-2
First, a small review
on what app clips are.


66
00:03:07,254 --> 00:03:11,425 line:-2
App clips are a way to build quick
transactional experiences from the Web


67
00:03:11,491 --> 00:03:14,061 line:-1
while leveraging native iOS technologies.


68
00:03:14,127 --> 00:03:16,063 line:-2
Without needing
to fully download your app,


69
00:03:16,129 --> 00:03:18,632 line:-1
users can complete small, focused tasks.


70
00:03:19,333 --> 00:03:20,434 line:-1
And with App Clips,


71
00:03:20,501 --> 00:03:23,170 line:-2
users gain access
to a seamless checkout experience


72
00:03:23,237 --> 00:03:24,872 line:-1
with Apple Pay natively.


73
00:03:25,806 --> 00:03:27,808 line:-1
So, you could tap and pay to park.


74
00:03:28,509 --> 00:03:31,445 line:-2
You could tap and pay
to rent a scooter or rent a bike.


75
00:03:31,945 --> 00:03:35,015 line:-2
You could tap and pay for food
at a restaurant or cafÃ©.


76
00:03:35,549 --> 00:03:36,683 line:-1
And so much more.


77
00:03:36,750 --> 00:03:39,052 line:-1
You could tap and pay to rent a car,


78
00:03:39,119 --> 00:03:42,523 line:-2
you could tap and pay in-store
while having the item delivered home,


79
00:03:42,990 --> 00:03:45,726 line:-2
or you could tap and pay
to fill your car with gas.


80
00:03:46,026 --> 00:03:50,097 line:-2
The potential is really tremendous
for easily and quickly unlocking services


81
00:03:50,163 --> 00:03:52,099 line:-1
with App Clips and Apple Pay.


82
00:03:52,599 --> 00:03:56,470 line:-2
So, let's cover the best practices
when adding Apple Pay to your app clips.


83
00:03:57,704 --> 00:04:00,140 line:-2
We recommend
that you use Apple Pay when possible


84
00:04:00,207 --> 00:04:03,243 line:-2
because it's designed to be fast,
easy, and secure.


85
00:04:03,544 --> 00:04:06,813 line:-2
Making it your default payment option
will save your users time.


86
00:04:08,348 --> 00:04:11,718 line:-2
We also suggest allowing guest checkout
because it reduces friction


87
00:04:11,785 --> 00:04:15,622 line:-2
by postponing account creation
until after the purchase is complete.


88
00:04:15,689 --> 00:04:19,526 line:-2
Use "Sign in with Apple"
to make this process as easy as possible.


89
00:04:20,694 --> 00:04:23,964 line:-2
And app clips work best
when they are simple and focused.


90
00:04:24,031 --> 00:04:26,433 line:-2
Keeping this in mind
when designing your app clip


91
00:04:26,500 --> 00:04:28,168 line:-1
helps maximize conversion.


92
00:04:29,136 --> 00:04:30,137 line:0
And finally,


93
00:04:30,204 --> 00:04:33,540 line:0
keeping your app clip lightweight
lets users purchase faster.


94
00:04:33,607 --> 00:04:36,944 line:0
By loading assets
such as maps and routes on-demand,


95
00:04:37,010 --> 00:04:39,913 line:0
rather than with the initial download,
you reduce overhead


96
00:04:39,980 --> 00:04:42,850 line:0
and make your app clip experience
more instantaneous.


97
00:04:44,184 --> 00:04:46,353 line:-2
App Clips is going to bring
even more people


98
00:04:46,420 --> 00:04:48,355 line:-1
into the Apple Pay ecosystem.


99
00:04:48,422 --> 00:04:51,458 line:-2
It's fitting to talk about
what we are doing to collectively enhance


100
00:04:51,525 --> 00:04:54,761 line:-2
the Apple Pay experience
across all of our platforms.


101
00:04:54,828 --> 00:04:56,430 line:-1
So, let's begin with Mac.


102
00:04:56,496 --> 00:05:00,834 line:-2
Today, Apple Pay on the Mac
is primarily experienced through Safari.


103
00:05:00,901 --> 00:05:04,438 line:-2
And we have seen developers adding support
for Apple Pay on the Web everywhere


104
00:05:04,505 --> 00:05:05,539 line:-1
by leveraging WebKit,


105
00:05:05,606 --> 00:05:08,575 line:-2
which simplifies the payment process
for e-commerce websites.


106
00:05:08,642 --> 00:05:10,110 line:-1
Speaking of WebKit,


107
00:05:10,177 --> 00:05:13,514 line:-2
I wanted to discuss a couple features
we introduced last year:


108
00:05:13,580 --> 00:05:16,683 line:-2
custom corner radius
and redacted billing address support.


109
00:05:17,818 --> 00:05:21,588 line:-2
You can now modify PKPaymentButton's
corner radius on the Web.


110
00:05:21,655 --> 00:05:24,324 line:-2
So, while the button comes
with rounded corners by default,


111
00:05:24,391 --> 00:05:27,461 line:-2
you can increase the rounding further
to achieve a pill shape


112
00:05:27,528 --> 00:05:29,563 line:-1
or decrease it to have a square shape.


113
00:05:30,163 --> 00:05:33,767 line:-2
And when the user presses that button,
you can present our payment sheet.


114
00:05:33,834 --> 00:05:38,739 line:-2
In order to compute line items like taxes,
merchants need simple locale information.


115
00:05:38,805 --> 00:05:41,775 line:-2
Historically, the shipping address
would be used for this,


116
00:05:42,109 --> 00:05:44,778 line:-2
but shipping address isn't applicable
to all purchases,


117
00:05:44,845 --> 00:05:48,282 line:-2
as shown in this screen for a purchase
involving a digital certificate.


118
00:05:48,615 --> 00:05:52,953 line:-2
Now, merchants on the web can receive
a redacted version of billing address


119
00:05:53,020 --> 00:05:55,589 line:-1
in order to compute variable line items.


120
00:05:56,390 --> 00:06:00,561 line:-2
This feature is ideal for purchases
involving digital goods and services.


121
00:06:00,627 --> 00:06:04,798 line:-2
It results in a lower risk of charge-backs
for merchants and higher conversion rates


122
00:06:04,865 --> 00:06:06,967 line:-1
because users get a complete price picture


123
00:06:07,034 --> 00:06:09,603 line:-2
before authenticating
to approve the transaction.


124
00:06:10,370 --> 00:06:13,640 line:-2
But what about experiences
outside of Safari on Mac?


125
00:06:13,707 --> 00:06:16,910 line:-2
We haven't provided a truly native option
for our Mac users.


126
00:06:17,311 --> 00:06:19,279 line:-1
However, today that changes,


127
00:06:19,346 --> 00:06:22,783 line:-2
with Apple Pay coming to Catalyst
and native Mac apps.


128
00:06:22,850 --> 00:06:26,553 line:-2
With Catalyst, you can have
your amazing iPad apps come to the Mac


129
00:06:26,620 --> 00:06:29,256 line:-2
with the full fidelity
of the Apple Pay experience.


130
00:06:29,323 --> 00:06:32,426 line:-2
We're going further than Catalyst too
in adding native support,


131
00:06:32,492 --> 00:06:33,994 line:-1
so if you had a photo book app


132
00:06:34,061 --> 00:06:36,630 line:-2
or any other app
that takes payments on Mac,


133
00:06:36,697 --> 00:06:38,265 line:-1
it can now accept Apple Pay.


134
00:06:38,665 --> 00:06:40,634 line:-2
This will bring
our great payment experiences


135
00:06:40,701 --> 00:06:42,803 line:-1
to more Mac apps across the board.


136
00:06:42,870 --> 00:06:46,039 line:-2
This also means
that PKPaymentButton is coming to Mac,


137
00:06:46,106 --> 00:06:48,542 line:-2
including the new types
and new automatic style


138
00:06:48,609 --> 00:06:49,610 line:-1
that I just announced.


139
00:06:49,676 --> 00:06:52,112 line:-1
So, how do you complete a payment on Mac?


140
00:06:52,179 --> 00:06:54,882 line:-2
It's very similar
to how you do it on the Web.


141
00:06:54,948 --> 00:06:57,985 line:-2
To quickly recap,
you need to establish a merchant session,


142
00:06:58,051 --> 00:07:01,154 line:-2
and you do so
by WebKit telling you which URL to hit.


143
00:07:01,522 --> 00:07:03,423 line:-1
Then you validate that URL


144
00:07:03,490 --> 00:07:05,859 line:-2
against a published list
of Apple hostnames


145
00:07:05,926 --> 00:07:07,494 line:-1
and send a post request to it.


146
00:07:07,895 --> 00:07:11,498 line:-2
Apple Pay server returns the session
for the client to consume.


147
00:07:11,832 --> 00:07:13,934 line:0
If you'd like to get more information
about this,


148
00:07:14,001 --> 00:07:17,538 line:0
you can find it in our "Apple Pay
on the Web" talk from 2016.


149
00:07:18,005 --> 00:07:20,507 line:-2
A native app might not need
to use WebKit though,


150
00:07:20,574 --> 00:07:22,242 line:-1
so we made things really easy here.


151
00:07:22,709 --> 00:07:24,845 line:-1
You hit this one static URL,


152
00:07:24,912 --> 00:07:27,848 line:-2
and you don't have to worry
about where it's coming from anymore.


153
00:07:27,915 --> 00:07:30,350 line:-1
In fact, this works for Web payments too,


154
00:07:30,417 --> 00:07:33,787 line:-2
so you should stop using the old way
and transition to this new way.


155
00:07:34,354 --> 00:07:37,424 line:-2
In a future release,
the old way will be removed completely.


156
00:07:38,192 --> 00:07:41,895 line:-2
Now, a couple more notes
about implementing Apple Pay on Mac.


157
00:07:41,962 --> 00:07:45,566 line:-2
First, when using
the PKPaymentAuthorizationController,


158
00:07:45,632 --> 00:07:49,036 line:-2
it needs to know the window
upon which to present the payment sheet.


159
00:07:49,102 --> 00:07:52,239 line:-2
Your delegate must implement
the presentationWindow method


160
00:07:52,306 --> 00:07:55,142 line:-2
and return
the UIWindow requesting the payment.


161
00:07:55,209 --> 00:07:59,379 line:-2
Typically, you'll return
yourViewController.view.window.


162
00:07:59,446 --> 00:08:03,684 line:-2
Of note, if you're using
the PKPaymentAuthorizationViewController,


163
00:08:03,750 --> 00:08:07,654 line:-2
the hosting window is determined by
the presentation of that view controller.


164
00:08:08,055 --> 00:08:11,758 line:-2
And as I just mentioned,
Catalyst uses the same security model


165
00:08:11,825 --> 00:08:14,661 line:-2
as a Web page implementing support
for Apple Pay.


166
00:08:15,128 --> 00:08:19,266 line:-2
Your delegate should implement
the didRequestMerchantSessionUpdate method


167
00:08:19,333 --> 00:08:21,668 line:-2
to request a merchant session
from your server


168
00:08:21,735 --> 00:08:23,770 line:-1
which securely obtains it from Apple.


169
00:08:24,171 --> 00:08:26,306 line:-2
The result of that request
is then passed back


170
00:08:26,373 --> 00:08:27,841 line:-1
through the provided handler.


171
00:08:28,242 --> 00:08:31,812 line:-2
On Catalyst, this takes the place
of supplying your merchant IDs


172
00:08:31,879 --> 00:08:33,580 line:-1
within your entitlements.


173
00:08:33,647 --> 00:08:36,650 line:-2
Many developers have
their native apps load Web pages


174
00:08:36,717 --> 00:08:38,751 line:-1
as a method of accepting Apple Pay.


175
00:08:38,818 --> 00:08:41,621 line:-2
They do this
by implementing support for WebKit.


176
00:08:42,256 --> 00:08:44,191 line:-1
With the introduction of Tiered WebKit,


177
00:08:44,258 --> 00:08:46,960 line:-2
I wanted to touch on its implications
for Apple Pay.


178
00:08:47,294 --> 00:08:49,229 line:-1
To further protect user privacy,


179
00:08:49,296 --> 00:08:52,699 line:-2
WKWebViews will now work
more like the SafariViewController.


180
00:08:53,166 --> 00:08:57,404 line:-2
Apps displaying WKWebViews will
be restricted in the APIs they can invoke


181
00:08:57,471 --> 00:08:59,940 line:-1
outside of a set of app-defined domains.


182
00:09:00,007 --> 00:09:02,609 line:-2
This means limitations
to JavaScript injections.


183
00:09:03,110 --> 00:09:06,647 line:-2
Now, nothing really changes for Apple Pay
from an implementation standpoint.


184
00:09:06,713 --> 00:09:07,915 line:-1
It was previously the case


185
00:09:07,981 --> 00:09:10,150 line:-2
that you could not perform
Apple Pay transactions


186
00:09:10,217 --> 00:09:14,288 line:-2
if script was injected
into a WKWebView instance on iOS.


187
00:09:14,655 --> 00:09:16,323 line:-1
What this does mean for Apple Pay


188
00:09:16,390 --> 00:09:20,327 line:-2
is that there will now be more WKWebViews
blocked from injecting script.


189
00:09:20,594 --> 00:09:22,863 line:-1
This means more loaded pages on iOS


190
00:09:22,930 --> 00:09:25,766 line:-2
will be allowed to perform
Apple Pay transactions now.


191
00:09:26,133 --> 00:09:29,937 line:-2
With Apple Pay making its debut
on Catalyst and native Mac apps,


192
00:09:30,003 --> 00:09:32,105 line:-1
we wanted to discuss what we're doing


193
00:09:32,172 --> 00:09:35,776 line:-2
to make the contact information
and checkout experience more seamless


194
00:09:35,843 --> 00:09:37,845 line:-1
on iOS, macOS, and the Web.


195
00:09:38,579 --> 00:09:40,380 line:-2
People have been using Apple Pay
for a while.


196
00:09:40,447 --> 00:09:42,449 line:-2
In fact, for six years,
which is incredible.


197
00:09:42,516 --> 00:09:44,952 line:-2
This is meant that, over time,
users have accumulated


198
00:09:45,018 --> 00:09:48,055 line:-2
a lot of Apple Pay contact information
on their devices.


199
00:09:48,856 --> 00:09:50,757 line:0
And everyone knows what this feels like.


200
00:09:50,824 --> 00:09:53,727 line:0
Some users would see this,
and that was for a few reasons.


201
00:09:53,794 --> 00:09:56,730 line:-2
To this point,
we haven't formatted our contact data.


202
00:09:56,797 --> 00:09:59,533 line:-2
You could insert any character you want,
including emojis.


203
00:09:59,600 --> 00:10:03,403 line:-2
While fun, these pose problems
for address-validation systems


204
00:10:03,470 --> 00:10:04,872 line:-1
that merchants employ.


205
00:10:04,938 --> 00:10:07,741 line:-2
And even if the merchant cleaned up
the address separately,


206
00:10:07,808 --> 00:10:10,711 line:-2
future transactions with Apple Pay
wouldn't reap the benefits


207
00:10:10,777 --> 00:10:12,112 line:-1
of that corrected information.


208
00:10:12,546 --> 00:10:14,081 line:-1
So, we set a goal for ourselves:


209
00:10:14,147 --> 00:10:18,552 line:-2
establish consistency
and make it easier on users and merchants.


210
00:10:18,619 --> 00:10:21,054 line:-2
While the ultimate responsibility
of address validation


211
00:10:21,121 --> 00:10:23,223 line:-2
for billing and shipping
lies with the merchant,


212
00:10:23,290 --> 00:10:26,827 line:-2
we want to ensure that the data
that the merchant gets is more consistent.


213
00:10:27,528 --> 00:10:31,465 line:-2
This way, when contact data comes
from Apple Pay, it will be standardized,


214
00:10:31,532 --> 00:10:35,435 line:-2
so you'll see less variation
and more predictability in the experience.


215
00:10:35,502 --> 00:10:37,004 line:-1
So, how are we achieving this?


216
00:10:37,938 --> 00:10:41,742 line:-2
We will now provide basic formatting
for contact data through the payment sheet


217
00:10:41,808 --> 00:10:44,578 line:-1
beginning with the latest iOS and macOS.


218
00:10:44,878 --> 00:10:48,015 line:-2
Merchants can now begin
to expect better formatted data.


219
00:10:48,749 --> 00:10:52,553 line:-2
Street and city fields
will only contain alphanumeric characters,


220
00:10:52,619 --> 00:10:54,555 line:-1
punctuation and whitespace.


221
00:10:55,489 --> 00:10:57,858 line:-2
The state field
will be a two-letter state code.


222
00:10:58,559 --> 00:11:02,729 line:0
In the US, for example, the ZIP code will
be a five- or nine-digit numeric code.


223
00:11:03,197 --> 00:11:07,467 line:0
If applicable, the ISO country code will
be an uppercase two-letter country code.


224
00:11:08,268 --> 00:11:10,404 line:-1
We're also improving the user experience


225
00:11:10,470 --> 00:11:13,774 line:-2
by raising formatting errors
in the UI earlier in the payment flow


226
00:11:13,841 --> 00:11:15,409 line:-1
so that the user can address them


227
00:11:15,475 --> 00:11:18,612 line:-2
before they authenticate
with Touch ID or Face ID.


228
00:11:18,946 --> 00:11:22,249 line:-2
For example, in this screen,
the incomplete ZIP code is highlighted.


229
00:11:22,749 --> 00:11:25,686 line:-2
And here we surface
that the phone number is not valid


230
00:11:25,752 --> 00:11:28,155 line:-2
so the user knows
to fix that specifically.


231
00:11:28,789 --> 00:11:30,424 line:-1
Use our error APIs


232
00:11:30,490 --> 00:11:34,061 line:-2
to help your users understand
what information needs correcting.


233
00:11:34,127 --> 00:11:38,098 line:-2
By doing so, they combine with the power
of these new contact formatting rules


234
00:11:38,165 --> 00:11:41,034 line:-2
to elevate the accuracy
of stored data on-device.


235
00:11:41,602 --> 00:11:45,439 line:-2
We will initially be supporting
addresses from Australia, Canada,


236
00:11:45,506 --> 00:11:47,508 line:-1
United Kingdom and the United States


237
00:11:47,574 --> 00:11:49,776 line:-2
while rolling out support
to other countries soon.


238
00:11:49,843 --> 00:11:53,213 line:-2
Address formatting differences
across countries, such as postal code,


239
00:11:53,280 --> 00:11:55,782 line:-2
will be accounted for
on a per-region basis.


240
00:11:56,283 --> 00:11:58,719 line:-2
These enhancements
to our contact data formatting


241
00:11:58,785 --> 00:12:01,822 line:-2
will make it simpler for users
to use Apple Pay at checkout.


242
00:12:01,889 --> 00:12:03,257 line:-1
But before you can check out,


243
00:12:03,323 --> 00:12:05,826 line:-2
you need to have a card in Apple Pay
to begin with.


244
00:12:06,426 --> 00:12:10,330 line:-2
We wanted to make it easier
for users to know they can use Apple Pay.


245
00:12:10,631 --> 00:12:14,001 line:-2
There are few ways new
and existing users can add cards today.


246
00:12:14,935 --> 00:12:16,136 line:-1
You can scan a card,


247
00:12:16,203 --> 00:12:18,972 line:-2
which uses our stellar
camera-recognition technology,


248
00:12:19,039 --> 00:12:22,442 line:-2
but you do need to be in possession
of your physical card to do this.


249
00:12:23,076 --> 00:12:25,179 line:-2
You can add the card
from within an issuer app,


250
00:12:25,245 --> 00:12:28,348 line:-2
which works well, but you need
to intentionally already be there


251
00:12:28,415 --> 00:12:30,317 line:-1
and have the goal of adding that card.


252
00:12:30,384 --> 00:12:34,454 line:-2
We wanted to make it easier for our users
to know they can add a card to Apple Pay


253
00:12:34,521 --> 00:12:37,057 line:-2
by improving discoverability
from within Wallet.


254
00:12:37,624 --> 00:12:42,029 line:-2
Today, we are introducing support for
Issuer Extensions to facilitate that goal.


255
00:12:42,596 --> 00:12:46,099 line:-2
For an issuer, this gives them the ability
to have that in-app experience


256
00:12:46,166 --> 00:12:48,402 line:-1
of adding a card, but inside of Wallet.


257
00:12:48,869 --> 00:12:50,704 line:-1
The issuer app needs to be installed,


258
00:12:50,771 --> 00:12:53,674 line:-2
and the user needs
to have signed into the app at least once


259
00:12:53,740 --> 00:12:55,642 line:-2
so Wallet knows there are cards
to surface.


260
00:12:56,043 --> 00:13:00,147 line:-2
Wallet can prompt for re-authentication
when adding if the app requires it.


261
00:13:00,714 --> 00:13:04,484 line:-2
This feature is extension-based:
apps will need a non-UI extension.


262
00:13:04,818 --> 00:13:06,787 line:-2
It will report the status
of the extension,


263
00:13:06,854 --> 00:13:10,290 line:-2
the passes it has available,
and then perform the card data lookup,


264
00:13:10,357 --> 00:13:13,360 line:-2
just like when adding cards to Apple Pay
from within an app.


265
00:13:13,427 --> 00:13:17,297 line:-2
It must subclass
PKIssuerProvisioningExtensionHandler,


266
00:13:17,364 --> 00:13:19,533 line:-2
and your extension will need
an entitlement.


267
00:13:20,033 --> 00:13:22,903 line:-2
If the non-UI extension reports
in its status


268
00:13:22,970 --> 00:13:24,805 line:-1
that authentication is required,


269
00:13:24,872 --> 00:13:28,775 line:-2
then a UI extension is also needed
to handle that re-authentication.


270
00:13:29,543 --> 00:13:31,612 line:-2
Your extension view controller
should conform


271
00:13:31,678 --> 00:13:35,082 line:-2
to PKIssuerProvisioningExtension-
AuthorizationProviding.


272
00:13:35,616 --> 00:13:38,619 line:-2
This UI extension also requires
a separate entitlement.


273
00:13:38,986 --> 00:13:42,823 line:0
If you are interested in supporting
issuer extensions, please reach out to us.


274
00:13:43,123 --> 00:13:45,692 line:0
We will help you determine
if issuer extensions make sense


275
00:13:45,759 --> 00:13:47,628 line:0
for your app and get your app entitled.


276
00:13:48,629 --> 00:13:52,165 line:-2
We've covered a lot of changes today,
and I wanted to quickly review them.


277
00:13:52,232 --> 00:13:55,736 line:-2
I introduced a new style
and new button types for PKPaymentButton.


278
00:13:56,236 --> 00:13:57,504 line:-1
We talked about App Clips


279
00:13:57,571 --> 00:14:01,275 line:-2
and how you can leverage Apple Pay
even when your app isn't downloaded.


280
00:14:01,341 --> 00:14:04,611 line:-2
We are now providing full Mac support:
native and Catalyst.


281
00:14:05,179 --> 00:14:07,414 line:-2
Mac support
and App Clips will benefit greatly


282
00:14:07,481 --> 00:14:11,185 line:-2
from our new standardized
contact information formatting by region.


283
00:14:11,251 --> 00:14:13,854 line:-2
The experience of using Apple Pay
will be more consistent


284
00:14:13,921 --> 00:14:16,790 line:-2
as more users
are onboarded onto the platform.


285
00:14:16,857 --> 00:14:20,460 line:-2
And finally,
we introduced extensions for card issuers.


286
00:14:20,527 --> 00:14:23,697 line:-2
We're really excited for you
to leverage these changes in your apps.


287
00:14:23,764 --> 00:14:26,867 line:-2
We encourage you to add support
for App Clips and Apple Pay


288
00:14:26,934 --> 00:14:29,403 line:-1
to build even better commerce experiences.


289
00:14:29,469 --> 00:14:31,305 line:-1
Use our new buttons while you're at it.


290
00:14:31,371 --> 00:14:32,840 line:-1
Use the new static URL


291
00:14:32,906 --> 00:14:35,843 line:-2
for your Apple Pay sessions
natively and on the Web.


292
00:14:35,909 --> 00:14:37,544 line:-1
Take a look at our code sample


293
00:14:37,611 --> 00:14:40,347 line:-2
for supporting Apple Pay on Mac
found in our resources.


294
00:14:40,848 --> 00:14:45,085 line:-2
And finally, adopt our error APIs for
an all-around better checkout experience.


295
00:14:45,586 --> 00:14:48,388 line:-2
Thanks for attending today,
and I hope you've had a great WWDC.

