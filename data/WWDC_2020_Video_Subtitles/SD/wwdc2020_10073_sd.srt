1
00:00:03,703 --> 00:00:06,039 line:-1
Hello, and welcome to WWDC.


2
00:00:08,375 --> 00:00:10,244 line:0
Hello, and thanks for joining us.


3
00:00:10,577 --> 00:00:13,947 line:0
My name is Roman,
and I'm a shortcuts engineer at Apple.


4
00:00:17,150 --> 00:00:21,288 line:-2
Today I'm going to be sharing with you
some techniques and some strategies


5
00:00:21,355 --> 00:00:23,323 line:-1
for efficiently implementing Siri


6
00:00:23,390 --> 00:00:25,893 line:-2
and Shortcuts support
in your applications.


7
00:00:26,660 --> 00:00:30,464 line:-2
First, we are going to take a tour
of the new APIs in SiriKit.


8
00:00:31,598 --> 00:00:34,067 line:-1
Then, we are going to learn all about


9
00:00:34,134 --> 00:00:36,670 line:-2
how you can fine-tune custom intents
in your app.


10
00:00:38,372 --> 00:00:40,607 line:-1
So let's start with a brief overview.


11
00:00:41,375 --> 00:00:45,112 line:0
SiriKit encompasses the Intents
and Intents UI frameworks,


12
00:00:45,179 --> 00:00:49,449 line:0
which you use to integrate your services
with Siri, Shortcuts, and Maps.


13
00:00:49,883 --> 00:00:53,954 line:0
And in iOS 14,
you can use Intents to add configuration


14
00:00:54,021 --> 00:00:55,856 line:0
and intelligence to widgets.


15
00:00:56,523 --> 00:00:58,825 line:-1
An Intents UI app extension


16
00:00:58,892 --> 00:01:02,930 line:-2
displays custom UI in the Siri,
Shortcuts, or Maps interface


17
00:01:03,430 --> 00:01:07,034 line:-2
after your Intents app extension
fulfills a user request.


18
00:01:07,534 --> 00:01:11,505 line:-2
An Intents app extension
receives user requests from SiriKit


19
00:01:11,572 --> 00:01:14,208 line:-1
and turns them into app-specific actions,


20
00:01:14,508 --> 00:01:17,444 line:-2
such as sending a message,
playing some music,


21
00:01:17,978 --> 00:01:21,582 line:-2
getting current weather conditions,
or ordering a soup.


22
00:01:22,783 --> 00:01:25,519 line:-2
SiriKit defines a large number
of system intents


23
00:01:25,586 --> 00:01:28,055 line:-1
that represent common tasks people take.


24
00:01:28,755 --> 00:01:32,726 line:-2
For system intents,
Siri defines the conversational flow


25
00:01:32,793 --> 00:01:35,996 line:-2
while your app provides the data
to complete the interaction.


26
00:01:36,063 --> 00:01:39,166 line:-2
If your app lets people perform
an everyday task


27
00:01:39,233 --> 00:01:41,902 line:-2
that doesn't fit into any
of the SiriKit domains,


28
00:01:42,302 --> 00:01:45,005 line:-2
you can create a custom intent
to represent it.


29
00:01:46,406 --> 00:01:48,475 line:-1
The job of your Intents extension


30
00:01:48,542 --> 00:01:51,545 line:-2
is to provide SiriKit
with the handler objects


31
00:01:51,612 --> 00:01:53,881 line:-1
that you use to handle specific intents.


32
00:01:54,748 --> 00:01:56,283 line:-1
You provide these objects


33
00:01:56,350 --> 00:01:59,887 line:-2
from the handlerForIntent: method
of your extension.


34
00:02:00,287 --> 00:02:03,457 line:-2
Let's take a look at the life cycle
of handling an intent.


35
00:02:03,924 --> 00:02:06,593 line:0
Every time the user
interacts with an intent,


36
00:02:06,860 --> 00:02:09,830 line:0
whether at the resolve,
confirm, or handle phases,


37
00:02:09,896 --> 00:02:13,767 line:-2
your intent handler has ten seconds
to complete the request.


38
00:02:14,701 --> 00:02:16,937 line:-1
The ten-second timeout starts


39
00:02:17,004 --> 00:02:20,774 line:-2
as soon as the user request
initiates a connection to your extension.


40
00:02:22,242 --> 00:02:25,646 line:-2
When this happens,
if your extension is not yet running,


41
00:02:26,079 --> 00:02:27,981 line:-1
it will be launched by the system.


42
00:02:28,048 --> 00:02:31,151 line:-2
The amount of time it takes
to launch your extension


43
00:02:31,218 --> 00:02:35,689 line:-2
depends on how long it takes to load
all of the frameworks your process links,


44
00:02:36,523 --> 00:02:39,059 line:-2
and how much time it takes
to run the +loads


45
00:02:39,126 --> 00:02:42,396 line:-2
and static initializers
included in your process


46
00:02:42,462 --> 00:02:44,398 line:-1
or any frameworks it links.


47
00:02:45,999 --> 00:02:49,870 line:-2
Your extension also needs some time
to perform your business logic.


48
00:02:51,171 --> 00:02:53,740 line:-2
So it's important to optimize
for launch time


49
00:02:53,807 --> 00:02:58,745 line:-2
by making sure that your extension only
links the frameworks that it really needs,


50
00:02:58,812 --> 00:03:01,715 line:-2
because the time spent loading
all of the link frameworks


51
00:03:01,782 --> 00:03:04,218 line:-1
counts towards the ten-second timeout.


52
00:03:04,718 --> 00:03:07,521 line:-2
The amount of time it takes
to handle a request


53
00:03:07,588 --> 00:03:10,724 line:-2
also affects how people perceive
interactions with your app.


54
00:03:11,491 --> 00:03:15,495 line:-2
Siri interactions are intended to be quick
and lightweight,


55
00:03:15,562 --> 00:03:19,800 line:-2
so you should avoid making the user wait
while your intent handler is working.


56
00:03:27,074 --> 00:03:29,276 line:-1
Ten seconds seems like a lot.


57
00:03:29,643 --> 00:03:32,946 line:-2
Since in most of the cases
your Intents extension


58
00:03:33,013 --> 00:03:36,650 line:-2
doesn't really need to link all
of the frameworks that your app links,


59
00:03:37,317 --> 00:03:41,054 line:-2
you have the opportunity to minimize
the number of symbols that you import.


60
00:03:41,855 --> 00:03:45,225 line:-2
Another noteworthy characteristic
of Intents extensions


61
00:03:45,292 --> 00:03:48,595 line:-2
is that they are modular,
independently run processes


62
00:03:48,662 --> 00:03:51,298 line:-1
with a lower memory footprint than an app.


63
00:03:52,299 --> 00:03:56,670 line:-2
However, sometimes it's not always
possible or convenient to use extensions.


64
00:03:57,304 --> 00:04:00,774 line:-2
In iOS 14,
we are introducing in-app intent handling.


65
00:04:01,175 --> 00:04:04,311 line:-2
Now, you have an option
to add an intent handler to your app


66
00:04:04,378 --> 00:04:08,015 line:-2
where you can handle SiriKit requests
such as Resolve, Confirm, Handle.


67
00:04:08,949 --> 00:04:12,753 line:-2
Let's talk about a few good use cases
that should help you decide


68
00:04:12,819 --> 00:04:16,957 line:-2
when to handle your intents
in your app versus your extension.


69
00:04:18,392 --> 00:04:22,229 line:-2
Starting or controlling media playback,
or starting a workout,


70
00:04:22,696 --> 00:04:26,033 line:-2
previously required you to perform
resolve and confirm


71
00:04:26,099 --> 00:04:29,570 line:-2
in your Intents extension,
and then handle in your app.


72
00:04:30,370 --> 00:04:34,341 line:-2
It is more efficient to do this entirely
in your app process now.


73
00:04:35,642 --> 00:04:37,010 line:-1
In another scenario,


74
00:04:37,344 --> 00:04:42,516 line:-2
if handling your intent affects
your app's user interface live on-screen,


75
00:04:42,583 --> 00:04:45,485 line:-2
it's also a good candidate
for in-app intent handling.


76
00:04:46,987 --> 00:04:51,091 line:-2
In-app intent handling also opens up
an opportunity for new use cases


77
00:04:51,158 --> 00:04:55,128 line:-2
that weren't possible before
due to memory constraints of extensions,


78
00:04:55,195 --> 00:04:57,264 line:-1
such as photo and video processing.


79
00:04:58,532 --> 00:05:02,302 line:-2
And, well, let's be honest,
in some cases your app's structure


80
00:05:02,369 --> 00:05:05,172 line:-2
doesn't currently allow you
to factor out code


81
00:05:05,239 --> 00:05:08,308 line:-2
into an intents extension
or a shared framework.


82
00:05:08,375 --> 00:05:11,311 line:-2
But, of course, be mindful
about the launch time of your app


83
00:05:11,378 --> 00:05:14,014 line:-2
because it will eat
into the ten-second timeout


84
00:05:14,081 --> 00:05:16,383 line:-1
we talked about earlier in this session.


85
00:05:17,417 --> 00:05:19,853 line:-2
When you're designing
your intent handlers,


86
00:05:19,920 --> 00:05:24,625 line:-2
you should evaluate which intents need
to be handled in your intents extension,


87
00:05:25,125 --> 00:05:26,894 line:-1
and which can be moved to your app.


88
00:05:29,530 --> 00:05:33,767 line:-2
Let's see how you can implement support
for in-app intent handling in your app.


89
00:05:34,902 --> 00:05:36,703 line:-1
The first thing you need to do


90
00:05:36,770 --> 00:05:39,740 line:-2
is to make sure that your app
supports multiple windows


91
00:05:39,806 --> 00:05:42,743 line:-1
and has adopted the UIScene life cycle.


92
00:05:42,809 --> 00:05:45,779 line:-2
When your app is launched
in a response to a SiriKit request,


93
00:05:46,280 --> 00:05:50,450 line:-2
it will be launched without any
UIScene objects connected to your app.


94
00:05:51,218 --> 00:05:54,922 line:-2
Then, you need to list all of the intents
that you would like to handle


95
00:05:54,988 --> 00:05:56,323 line:-1
inside of your application


96
00:05:56,990 --> 00:06:00,194 line:-2
in the Supported Intents section
of your app's target.


97
00:06:01,128 --> 00:06:05,232 line:-2
And finally, you need to implement
the handlerForIntent: method


98
00:06:05,299 --> 00:06:06,600 line:-1
in your app's delegate.


99
00:06:07,701 --> 00:06:09,803 line:-1
This method acts as a dispatcher


100
00:06:09,870 --> 00:06:13,774 line:-2
mapping incoming intents
to the object capable of handling them.


101
00:06:14,074 --> 00:06:17,911 line:-2
In your implementation,
check the type of the intent parameter


102
00:06:18,245 --> 00:06:21,682 line:-2
and return an object capable
of handling that type of intent.


103
00:06:22,583 --> 00:06:26,787 line:-2
The object you return must adopt
the protocol used to handle that intent.


104
00:06:27,588 --> 00:06:30,757 line:-2
For example, when handling
a ProcessPhotoIntent object,


105
00:06:31,558 --> 00:06:35,929 line:-2
return an object that adopts
the ProcessPhotoIntentHandling protocol.


106
00:06:37,798 --> 00:06:42,269 line:-2
If handling an intent updates
your application's user interface,


107
00:06:42,336 --> 00:06:45,339 line:-2
and requires your users to be looking
at something in the app


108
00:06:45,405 --> 00:06:47,007 line:-1
before using the intent,


109
00:06:47,741 --> 00:06:52,312 line:-2
your intent handler may need to make sure
that the relevant UI is on-screen


110
00:06:52,379 --> 00:06:53,814 line:-1
in the handle phase.


111
00:06:54,915 --> 00:06:58,919 line:-2
You can do this by checking to make sure
the app is not in the background.


112
00:06:59,286 --> 00:07:02,289 line:-1
And if it is, asking the system to open it


113
00:07:02,356 --> 00:07:05,659 line:-2
by responding with continueInApp
response code.


114
00:07:06,126 --> 00:07:08,529 line:-2
Let's see how to add
in-app intent handling


115
00:07:08,595 --> 00:07:09,696 line:-1
to an app in Xcode.


116
00:07:12,666 --> 00:07:14,535 line:-1
I got into cooking at home recently,


117
00:07:14,601 --> 00:07:17,704 line:-2
so I've been working on this app
called Recipe Assistant


118
00:07:17,771 --> 00:07:20,174 line:-2
that allows me
to browse my favorite recipes.


119
00:07:21,275 --> 00:07:22,676 line:-1
When I tap on a recipe,


120
00:07:22,743 --> 00:07:26,013 line:-2
I can see all of the ingredients
needed to make this recipe.


121
00:07:26,580 --> 00:07:30,150 line:-2
I can tap on the "Directions" button
to view step-by-step directions.


122
00:07:30,584 --> 00:07:34,221 line:-2
When I tap on the "Next Step" button
I can advance to the next step.


123
00:07:34,288 --> 00:07:36,890 line:-2
However, sometimes
it's not always convenient


124
00:07:36,957 --> 00:07:39,893 line:-2
to tap buttons on-screen
while you're preparing the meal.


125
00:07:40,527 --> 00:07:44,298 line:-2
So I would like users of my app
to be able to advance to the next step


126
00:07:44,364 --> 00:07:48,402 line:-2
by using a shortcut that they invoke
with their voice using Siri.


127
00:07:49,069 --> 00:07:51,939 line:-2
I'm going to implement
in-app intent handling in my app


128
00:07:52,005 --> 00:07:55,275 line:-2
since my users will be interacting
with the content on-screen.


129
00:07:57,044 --> 00:07:59,713 line:-2
Here in Xcode,
I have my intent-definition file


130
00:07:59,780 --> 00:08:02,716 line:-2
where I define my custom intent
called "ShowDirections."


131
00:08:03,450 --> 00:08:07,087 line:-2
I also added the "Add to Siri" button
to my recipe directions view


132
00:08:07,154 --> 00:08:09,756 line:-2
so users can easily set up
a shortcut here.


133
00:08:09,823 --> 00:08:11,825 line:-1
This is what it looks like in the app.


134
00:08:14,127 --> 00:08:15,696 line:-1
Now, back to Xcode.


135
00:08:15,762 --> 00:08:18,332 line:-2
I have already adopted
multiple-window support in my app.


136
00:08:18,732 --> 00:08:21,301 line:-1
Now, I need to add ShowDirectionsIntent


137
00:08:21,368 --> 00:08:25,305 line:-2
to the list of intents eligible
for in-app intent handling.


138
00:08:25,372 --> 00:08:29,142 line:-2
To do that, I'm going to click
on the "Plus" button and add my intent.


139
00:08:33,714 --> 00:08:37,618 line:-2
Now, what I want to do is to make
every view controller in my app


140
00:08:37,683 --> 00:08:40,087 line:-2
to be able to respond
to the "Next Step" command.


141
00:08:41,621 --> 00:08:44,391 line:-2
To do that, I'm going to define
a common intent handler


142
00:08:44,458 --> 00:08:48,028 line:-2
that accepts an object conforming
to the NextStepProviding protocol.


143
00:08:49,096 --> 00:08:52,132 line:-2
A view controller that adopts
the NextStepProviding protocol


144
00:08:52,199 --> 00:08:55,536 line:-2
will need to return an instance
of the IntentHandler class.


145
00:08:55,936 --> 00:08:58,705 line:-2
It would also need to implement
the nextStep function


146
00:08:58,772 --> 00:09:01,275 line:-2
that will take the user to the next step
in the app.


147
00:09:01,808 --> 00:09:03,944 line:-1
Let's conform our intent handler


148
00:09:04,011 --> 00:09:06,613 line:-2
to the showDirectionsIntentHandling
protocol


149
00:09:06,680 --> 00:09:10,250 line:-2
that was code-generated for us,
and implement the resolve method.


150
00:09:16,857 --> 00:09:19,326 line:-2
In the resolve method
for the recipe parameter,


151
00:09:19,393 --> 00:09:21,662 line:-1
we are going to check if we have a recipe.


152
00:09:21,728 --> 00:09:24,898 line:-2
If we don't have a recipe,
we will ask for disambiguation.


153
00:09:25,299 --> 00:09:27,601 line:-1
Otherwise, we will return success.


154
00:09:28,235 --> 00:09:29,436 line:-1
In the handle method,


155
00:09:29,503 --> 00:09:31,572 line:-2
we are going to tell
the next-step provider


156
00:09:31,638 --> 00:09:33,006 line:-1
to go to the next step.


157
00:09:33,073 --> 00:09:36,210 line:-2
We need to make sure that our app
is in the foreground.


158
00:09:36,276 --> 00:09:39,079 line:-2
And if it's not,
that we are going to launch the app


159
00:09:39,146 --> 00:09:41,315 line:-1
using the continueInApp response code.


160
00:09:41,782 --> 00:09:46,286 line:-2
We will need to handle launching
with a user activity in our SceneDelegate,


161
00:09:46,353 --> 00:09:48,655 line:-1
and I will come back to this in a moment.


162
00:09:48,722 --> 00:09:52,693 line:-2
Now, I will create a new singleton class
that will hold a weak reference


163
00:09:52,759 --> 00:09:54,328 line:-1
to the current intent handler.


164
00:09:59,299 --> 00:10:01,568 line:-2
We are going to assign
the current intent handler


165
00:10:01,635 --> 00:10:05,239 line:-2
in viewDidAppear
of each view controller in our app.


166
00:10:08,275 --> 00:10:09,376 line:-1
In my app delegate,


167
00:10:09,443 --> 00:10:12,279 line:-2
I need to implement
the new handlerForIntent: method,


168
00:10:12,346 --> 00:10:14,715 line:-2
and return the current
IntentHandler instance.


169
00:10:18,585 --> 00:10:20,621 line:-1
In my SceneDelegate object,


170
00:10:20,687 --> 00:10:23,857 line:-2
I need to implement
both willConnectToSession


171
00:10:23,924 --> 00:10:25,759 line:-1
and continueUserActivity methods


172
00:10:26,293 --> 00:10:30,764 line:-2
to continue user activity when we respond
with continueInApp response code


173
00:10:30,831 --> 00:10:32,232 line:-1
in our handle method.


174
00:10:33,033 --> 00:10:35,235 line:-1
willConnectToSession will be invoked


175
00:10:35,302 --> 00:10:38,705 line:-2
when the app does not have
a UIScene object connected to it.


176
00:10:40,440 --> 00:10:42,709 line:-2
Now, we need to conform
each view controller


177
00:10:42,776 --> 00:10:44,811 line:-1
to the NextStepProviding protocol.


178
00:10:45,646 --> 00:10:49,816 line:-2
And finally, we need to make sure
to assign the current intent handler


179
00:10:49,883 --> 00:10:51,285 line:-1
in viewDidAppear.


180
00:10:58,592 --> 00:11:00,027 line:-1
Let's give it a try.


181
00:11:01,929 --> 00:11:04,298 line:-1
First, I need to add my shortcut to Siri.


182
00:11:07,267 --> 00:11:09,503 line:-2
Now, let's see what the experience
looks like.


183
00:11:09,970 --> 00:11:11,205 line:-1
Hey Siri, next step.


184
00:11:11,271 --> 00:11:12,272 line:-1
[Siri chimes]


185
00:11:12,840 --> 00:11:14,641 line:-1
[Siri] <i>Which recipe would you like to see?</i>


186
00:11:14,908 --> 00:11:19,246 line:-2
<i>Spicy tomato sauce, chickpea curry,</i>
<i>or cinnamon apple cake? </i>[chimes]


187
00:11:19,313 --> 00:11:20,480 line:-1
The first one.


188
00:11:20,547 --> 00:11:22,983 line:-1
[Siri chimes] <i>Okay. Viewing.</i>


189
00:11:23,050 --> 00:11:25,819 line:-2
<i>Here are the ingredients</i>
<i>for spicy tomato sauce.</i>


190
00:11:26,420 --> 00:11:27,554 line:-1
Hey Siri, next step.


191
00:11:27,754 --> 00:11:30,424 line:-1
[Siri chimes] <i>Okay. Viewing.</i>


192
00:11:30,490 --> 00:11:34,394 line:-2
<i>Step one, in a large pot,</i>
<i>heat olive oil on medium heat.</i>


193
00:11:35,028 --> 00:11:36,230 line:-1
Hey Siri, next step.


194
00:11:36,697 --> 00:11:39,266 line:-1
[Siri chimes] <i>Okay. Viewing.</i>


195
00:11:39,333 --> 00:11:41,401 line:-1
<i>Step two, add minced garlic</i>


196
00:11:41,468 --> 00:11:44,004 line:-2
<i>and sauté for a few seconds</i>
<i>until fragrant.</i>


197
00:11:44,438 --> 00:11:45,606 line:-1
Pretty cool, isn't it?


198
00:11:48,642 --> 00:11:53,080 line:-2
When deciding between handling an intent
in an extension versus an app,


199
00:11:53,514 --> 00:11:55,148 line:-1
you should ask yourself first,


200
00:11:55,215 --> 00:11:57,684 line:-2
can this task be accomplished
in an extension?


201
00:11:58,252 --> 00:12:00,153 line:-1
Because if so, it's better to do that.


202
00:12:00,554 --> 00:12:05,025 line:-2
Intents extensions can be more lightweight
and faster to launch


203
00:12:05,726 --> 00:12:09,663 line:-2
depending on the number of frameworks
and symbols that you link.


204
00:12:09,997 --> 00:12:13,300 line:-2
This is your opportunity
to optimize for launch time


205
00:12:13,567 --> 00:12:16,803 line:-2
since you decide which frameworks
your extension is linking.


206
00:12:17,137 --> 00:12:20,274 line:-2
To summarize what we learned
about in-app intent handling today,


207
00:12:21,341 --> 00:12:23,944 line:-2
consider implementing
an Intents extension first.


208
00:12:25,078 --> 00:12:27,848 line:-2
Always be mindful
of how many frameworks you link


209
00:12:27,915 --> 00:12:30,150 line:-1
in both your app and your extensions.


210
00:12:31,018 --> 00:12:34,721 line:-2
In-app intent handling is only supported
for multi-window apps,


211
00:12:35,422 --> 00:12:38,892 line:0
so make sure to check out
"Introducing Multiple Windows on iPad"


212
00:12:38,959 --> 00:12:41,762 line:0
and "Architecting Your App
for Multiple Windows"


213
00:12:41,828 --> 00:12:44,498 line:0
from WWDC 2019.


214
00:12:44,565 --> 00:12:48,936 line:-2
We are very excited to see
all the great new SiriKit integrations


215
00:12:49,002 --> 00:12:51,205 line:-2
that you will build
using in-app intent handling.


216
00:12:51,271 --> 00:12:53,707 line:-2
Now, let's take a look
at another API enhancement


217
00:12:53,774 --> 00:12:55,042 line:-1
that we made this year.


218
00:12:55,108 --> 00:12:57,477 line:-1
We call it "rich disambiguation."


219
00:12:58,178 --> 00:13:01,715 line:-2
In iOS 13, we introduced
parameters for Shortcuts


220
00:13:02,349 --> 00:13:06,486 line:-2
which allow your users to provide
intent parameter values at runtime.


221
00:13:06,553 --> 00:13:08,922 line:-2
When resolving parameter values
of your intent,


222
00:13:08,989 --> 00:13:11,825 line:-2
you can return disambiguation
resolution result,


223
00:13:12,259 --> 00:13:15,629 line:-2
and the user will be prompted
to pick from a list of values.


224
00:13:17,764 --> 00:13:22,936 line:-2
This year, we are introducing the ability
for your app to include subtitles


225
00:13:23,003 --> 00:13:24,738 line:-1
and images in those lists.


226
00:13:26,139 --> 00:13:28,175 line:-1
The API is pretty simple.


227
00:13:28,242 --> 00:13:31,211 line:-2
You just need to provide
the subtitle as a string,


228
00:13:31,278 --> 00:13:33,514 line:-1
and the image as INImage,


229
00:13:33,580 --> 00:13:36,083 line:-1
for your custom types at runtime.


230
00:13:38,051 --> 00:13:41,388 line:-2
What's really cool is that
you can also provide dynamic options


231
00:13:41,455 --> 00:13:44,458 line:-2
with images and subtitles
that your users will see


232
00:13:44,525 --> 00:13:47,094 line:-2
when they configure your intent
in the Shortcuts app.


233
00:13:48,829 --> 00:13:53,000 line:-2
Another addition to disambiguation lists
is pagination in Siri.


234
00:13:53,066 --> 00:13:56,003 line:-2
As a developer, now you can provide
the number of items


235
00:13:56,069 --> 00:13:58,338 line:-2
that Siri should speak
to the user at once,


236
00:13:58,739 --> 00:14:02,676 line:-2
and also provide subsequent introductions
spoken by Siri.


237
00:14:02,943 --> 00:14:06,346 line:-2
The disambiguation pagination
will be only used


238
00:14:06,413 --> 00:14:09,683 line:-2
when the user invokes Siri
by saying, "Hey Siri."


239
00:14:10,184 --> 00:14:13,420 line:-2
Here's how to support rich disambiguation
with Xcode.


240
00:14:14,221 --> 00:14:18,091 line:-2
Open your intent-definition file
where you define your custom intents


241
00:14:18,926 --> 00:14:21,195 line:-1
and expand the Siri Dialog section


242
00:14:21,261 --> 00:14:24,998 line:-2
for the parameter that needs
customized disambiguation pagination.


243
00:14:25,465 --> 00:14:28,802 line:-2
Here, you can simply specify
the maximum number of items


244
00:14:28,869 --> 00:14:30,938 line:-1
that can be spoken to the user at once,


245
00:14:31,471 --> 00:14:34,541 line:-2
as well as the subsequent
introduction stream.


246
00:14:34,608 --> 00:14:37,678 line:-2
You can also override the disambiguation
introduction dialog


247
00:14:37,744 --> 00:14:39,746 line:-1
provided by Siri in the voice-only mode


248
00:14:40,147 --> 00:14:43,150 line:-2
by specifying your own dialog
in the intent editor.


249
00:14:44,017 --> 00:14:46,353 line:-2
Another addition to the SiriKit APIs
this year


250
00:14:46,420 --> 00:14:48,856 line:-1
is dynamic search for dynamic options.


251
00:14:49,990 --> 00:14:52,860 line:-2
Last year, we introduced
a dynamic-options API


252
00:14:53,327 --> 00:14:58,365 line:-2
that allows you to provide a set of values
for eligible parameters dynamically


253
00:14:58,432 --> 00:15:02,202 line:-2
when the user is configuring your intent
in the Shortcuts app.


254
00:15:02,269 --> 00:15:05,105 line:-1
This year, we are expanding this API


255
00:15:05,472 --> 00:15:08,308 line:-2
to include the search term
provided by the user.


256
00:15:09,676 --> 00:15:13,647 line:-2
There is a new checkbox
to provide search results as you type.


257
00:15:13,714 --> 00:15:15,349 line:-1
If you check the checkbox,


258
00:15:15,415 --> 00:15:19,720 line:-2
it will code-generate a new method
that includes searchTerm.


259
00:15:20,187 --> 00:15:24,191 line:-2
This method will be called repeatedly
while the user is typing.


260
00:15:24,258 --> 00:15:26,326 line:-1
If the search term is empty,


261
00:15:26,393 --> 00:15:29,396 line:-2
you can provide the user
with a list of default values.


262
00:15:30,130 --> 00:15:34,268 line:-2
Dynamic search should only be adopted
for searching large catalogs,


263
00:15:34,735 --> 00:15:37,404 line:-1
not for filtering small static collections


264
00:15:37,471 --> 00:15:40,474 line:-2
because the Shortcuts app
supports filtering by default.


265
00:15:41,642 --> 00:15:45,212 line:-2
The provide options collections method
completion handler


266
00:15:45,279 --> 00:15:48,649 line:-1
accepts a new INObjectCollection object.


267
00:15:48,715 --> 00:15:50,217 line:-1
Using this new object,


268
00:15:50,284 --> 00:15:54,755 line:-2
you can now group your dynamic options
into sections with titles,


269
00:15:54,821 --> 00:15:57,658 line:-1
and optionally use indexed collation.


270
00:15:57,724 --> 00:16:01,862 line:-2
In iOS 13, we introduced configurable
parameters for Shortcuts.


271
00:16:02,262 --> 00:16:05,465 line:-2
Each parameter that you specified
as user-facing


272
00:16:05,532 --> 00:16:07,801 line:-1
had to be resolved at runtime.


273
00:16:08,802 --> 00:16:12,372 line:-2
Now, in iOS 14,
you can mark each parameter


274
00:16:12,439 --> 00:16:15,475 line:-1
as configurable and resolvable separately.


275
00:16:16,009 --> 00:16:19,313 line:-2
Siri and the Shortcuts app
will not resolve parameters


276
00:16:19,379 --> 00:16:21,215 line:-1
which are marked as unresolvable.


277
00:16:21,615 --> 00:16:25,419 line:-2
You don't need to provide Siri dialog
for unresolvable parameters.


278
00:16:25,953 --> 00:16:29,256 line:-2
Today, you learned all about
in-app intent handling,


279
00:16:29,323 --> 00:16:32,092 line:-2
and how you can add support for it
in your apps.


280
00:16:32,793 --> 00:16:35,162 line:-1
You can enhance your disambiguation lists


281
00:16:35,229 --> 00:16:39,700 line:-2
and dynamic options
with rich disambiguation in iOS 14.


282
00:16:41,635 --> 00:16:44,471 line:-2
Dynamic search gives you
a new, flexible way


283
00:16:44,538 --> 00:16:47,741 line:-2
of providing dynamic options
for your intent parameters.


284
00:16:48,876 --> 00:16:50,677 line:-1
When you're designing your intents,


285
00:16:50,744 --> 00:16:54,181 line:-2
decide which parameters
should be configurable


286
00:16:54,248 --> 00:16:56,083 line:-1
and resolvable at runtime.


287
00:16:56,149 --> 00:16:58,785 line:-2
Now, let's take a look at some useful tips
and tricks


288
00:16:58,852 --> 00:17:01,788 line:-2
that could help you take
your custom intents to the next level.


289
00:17:01,855 --> 00:17:05,125 line:-2
If one of your custom intents
is no longer needed


290
00:17:05,192 --> 00:17:08,328 line:-2
because you discontinued
the corresponding feature in your app,


291
00:17:08,862 --> 00:17:11,665 line:-2
or you're replacing the intent
with another intent,


292
00:17:11,732 --> 00:17:17,404 line:-2
it is now possible to deprecate
custom intents in iOS 14 using Xcode 12.


293
00:17:18,105 --> 00:17:19,573 line:-1
In the intent editor,


294
00:17:19,640 --> 00:17:22,542 line:-2
select the intent
that you would like to deprecate,


295
00:17:22,608 --> 00:17:23,911 line:-1
and reveal the inspectors


296
00:17:23,977 --> 00:17:27,281 line:-2
by clicking on the "Expand Inspectors"
button in the toolbar.


297
00:17:29,349 --> 00:17:32,886 line:-2
Now, all you need to do
is just check the deprecated checkbox.


298
00:17:34,388 --> 00:17:35,789 line:-1
In the Shortcuts app,


299
00:17:35,856 --> 00:17:39,159 line:-2
your existing users will see
that this intent action


300
00:17:39,226 --> 00:17:42,629 line:-2
might be no longer available
in future versions of your app.


301
00:17:43,430 --> 00:17:47,734 line:-2
Additionally, this intent action will
be hidden from the Shortcuts action list.


302
00:17:48,268 --> 00:17:51,839 line:-2
Now, let's talk about how you can specify
your custom-intent class names.


303
00:17:52,406 --> 00:17:55,342 line:-2
When you define a custom intent,
a custom type,


304
00:17:55,409 --> 00:17:58,111 line:-1
or a custom enum in the intent editor,


305
00:17:58,178 --> 00:18:00,981 line:-2
you define a type name,
not the actual class.


306
00:18:01,481 --> 00:18:05,786 line:-2
The actual class will be code-generated
for you based on the type name.


307
00:18:07,654 --> 00:18:09,957 line:-1
So if your app uses a class prefix,


308
00:18:10,224 --> 00:18:14,962 line:-2
this is not the right place to specify
for your custom intents, types, and enums.


309
00:18:16,997 --> 00:18:19,433 line:-1
Instead, provide your desired class name


310
00:18:19,499 --> 00:18:22,169 line:-2
in the Custom Class inspector
of your intent.


311
00:18:22,736 --> 00:18:26,306 line:-2
Alternatively, you can specify
a common class prefix


312
00:18:26,607 --> 00:18:29,843 line:-2
used for all custom intents,
types, and enums


313
00:18:29,910 --> 00:18:32,813 line:-2
in the Project Document inspector
of your target


314
00:18:32,880 --> 00:18:35,215 line:-1
where the code generation needs to happen.


315
00:18:35,282 --> 00:18:38,151 line:-2
This allows you to have
different class prefixes


316
00:18:38,218 --> 00:18:40,220 line:-1
in different targets if you need.


317
00:18:40,754 --> 00:18:44,458 line:-2
Some custom intents that you define
in your intent-definition file


318
00:18:44,525 --> 00:18:48,762 line:-2
may require an Intents UI view
for the confirm and handle phases,


319
00:18:49,029 --> 00:18:50,397 line:-1
while others don't.


320
00:18:50,998 --> 00:18:52,966 line:-2
Let's see how you can
efficiently manage that.


321
00:18:53,667 --> 00:18:58,105 line:-2
When add your intent-definition file
to an Intents UI extension target,


322
00:18:58,172 --> 00:19:00,774 line:-2
Xcode automatically lists
all of the intents


323
00:19:00,841 --> 00:19:05,045 line:-2
from that intent-definition file
as supported by this Intents UI extension.


324
00:19:06,046 --> 00:19:08,448 line:-1
However, for some of your custom intents,


325
00:19:08,515 --> 00:19:10,951 line:-2
you might not want to display
any UI at all.


326
00:19:12,452 --> 00:19:16,590 line:-2
You can easily achieve this by creating
a separate intent-definition file


327
00:19:16,657 --> 00:19:18,458 line:-1
for your non-UI intents.


328
00:19:19,126 --> 00:19:23,363 line:-2
Then, in the target membership inspector
of your intent-definition file,


329
00:19:23,697 --> 00:19:27,534 line:-2
simply don't include it
in your Intents UI extension target.


330
00:19:28,068 --> 00:19:31,471 line:-2
Sometimes you might want to explicitly
choose the code-generation language


331
00:19:31,538 --> 00:19:33,140 line:-1
for your custom intents.


332
00:19:33,207 --> 00:19:36,443 line:-2
And you can easily do this
in your project's build settings.


333
00:19:37,778 --> 00:19:40,414 line:-2
By default,
Xcode will automatically decide


334
00:19:40,480 --> 00:19:42,449 line:-1
the intent code-generation language


335
00:19:42,516 --> 00:19:45,786 line:-2
for each of the targets eligible
for code generation


336
00:19:45,853 --> 00:19:49,456 line:-2
based on the existing search files
included in this target.


337
00:19:49,523 --> 00:19:52,459 line:-2
But here, you have an option
to customize this behavior.


338
00:19:52,526 --> 00:19:54,561 line:-1
So we've gone over a lot today.


339
00:19:54,628 --> 00:19:57,130 line:-2
We've gone over some
of the major enhancements


340
00:19:57,197 --> 00:19:59,233 line:-1
in the SiriKit APIs this year.


341
00:19:59,900 --> 00:20:02,536 line:-2
We've also gone over
some of the best practices


342
00:20:02,603 --> 00:20:06,607 line:-2
that you can keep in mind
when you're designing your custom intents.


343
00:20:06,673 --> 00:20:10,244 line:-2
Thank you so much for watching,
and we can't wait to see what you build.

