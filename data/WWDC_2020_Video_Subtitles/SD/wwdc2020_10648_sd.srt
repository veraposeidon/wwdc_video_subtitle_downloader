1
00:00:03,770 --> 00:00:06,939 line:-1
Hello and welcome to WWDC.


2
00:00:08,775 --> 00:00:10,644 line:0
Hello. My name is Karoy Lorentey,


3
00:00:10,711 --> 00:00:13,313 line:0
and I'm an engineer
on the Swift Standard Library team


4
00:00:13,380 --> 00:00:14,381 line:0
here at Apple.


5
00:00:15,082 --> 00:00:18,318 line:-2
Today, I'm going to talk about
unsafe APIs in Swift.


6
00:00:18,385 --> 00:00:21,989 line:-2
The standard library provides
many different constructs:


7
00:00:22,055 --> 00:00:26,159 line:-2
types, protocols, functions, properties,
and so on.


8
00:00:27,227 --> 00:00:31,098 line:-2
A small amount of these
are explicitly labeled as "unsafe."


9
00:00:31,698 --> 00:00:33,100 line:-1
What does this mean?


10
00:00:33,166 --> 00:00:34,735 line:-1
What makes these special?


11
00:00:35,502 --> 00:00:38,639 line:-2
The distinction between
safe and unsafe constructs


12
00:00:38,705 --> 00:00:41,508 line:-2
is not apparent
in the interface they provide,


13
00:00:41,575 --> 00:00:44,511 line:-2
rather it arises from the way
their implementations


14
00:00:44,578 --> 00:00:45,812 line:-1
deal with invalid input.


15
00:00:46,613 --> 00:00:49,016 line:-1
Most operations in the standard library


16
00:00:49,082 --> 00:00:51,685 line:-2
fully validate their input
before executing.


17
00:00:51,752 --> 00:00:55,689 line:-2
So we can safely assume
that any serious coding errors we may make


18
00:00:55,756 --> 00:00:58,025 line:-1
will be reliably caught and reported.


19
00:00:58,692 --> 00:01:03,163 line:-2
One example for such an operation
is the familiar force unwrapping operator


20
00:01:03,230 --> 00:01:05,098 line:-1
on Swift's Optional type.


21
00:01:05,165 --> 00:01:08,669 line:-2
It does require that the value
must not be nil,


22
00:01:08,735 --> 00:01:10,270 line:-1
but if we get this wrong,


23
00:01:10,337 --> 00:01:14,208 line:-2
we are guaranteed to get
a nice, clean fatal runtime error.


24
00:01:15,242 --> 00:01:18,912 line:-2
Here, we asked Optional to do something
that is nonsensical,


25
00:01:18,979 --> 00:01:23,116 line:-2
so stopping execution
is the only responsible thing it can do.


26
00:01:23,183 --> 00:01:26,653 line:-2
Of course,
trying to force unwrap a nil value


27
00:01:26,720 --> 00:01:31,425 line:-2
is still a serious programming error,
but its consequences are well-defined.


28
00:01:32,226 --> 00:01:35,562 line:-2
We say that the force unwrap operator
is safe


29
00:01:35,629 --> 00:01:39,533 line:-2
because we can fully describe its behavior
for all possible inputs,


30
00:01:39,600 --> 00:01:42,870 line:-2
including input
that doesn't satisfy its requirements.


31
00:01:43,604 --> 00:01:45,105 line:-1
So by extension,


32
00:01:45,172 --> 00:01:48,742 line:-2
unsafe operations must exhibit
undefined behavior


33
00:01:48,809 --> 00:01:52,779 line:-2
on at least some input that violates
their documented expectations.


34
00:01:53,647 --> 00:01:58,552 line:-2
For example, Optional also provides
an unsafe force unwrapping operation


35
00:01:58,619 --> 00:02:00,687 line:-1
through its unsafelyUnwrapped property.


36
00:02:01,421 --> 00:02:03,857 line:-2
Just like the regular
force unwrap operator,


37
00:02:03,924 --> 00:02:06,927 line:-2
this also requires the underlying value
to be non-nil.


38
00:02:07,327 --> 00:02:10,430 line:-2
However, when compiled
with optimizations enabled,


39
00:02:10,497 --> 00:02:13,367 line:-2
this property doesn't verify
this requirement.


40
00:02:13,433 --> 00:02:17,204 line:-2
It trusts you
that you only call it on a non-nil value


41
00:02:17,271 --> 00:02:18,972 line:-1
and directly reads it out.


42
00:02:19,740 --> 00:02:22,709 line:-2
So what happens
when you accidentally call it on nil?


43
00:02:22,776 --> 00:02:25,913 line:-1
Well, it reads a value that isn't there,


44
00:02:25,979 --> 00:02:28,682 line:-2
and it's difficult to say
what exactly this means.


45
00:02:28,749 --> 00:02:31,285 line:-1
Depending on arbitrary circumstances,


46
00:02:31,351 --> 00:02:35,389 line:-2
it could trigger an immediate crash
or it may return some garbage value.


47
00:02:35,756 --> 00:02:37,824 line:-1
Perhaps it will do something else.


48
00:02:37,891 --> 00:02:40,194 line:-1
It could do the same thing every time,


49
00:02:40,260 --> 00:02:42,963 line:-2
or its result may change
on every execution.


50
00:02:43,497 --> 00:02:46,166 line:-1
The point is that by using this property,


51
00:02:46,233 --> 00:02:49,703 line:-2
you assume full responsibility
to fulfill its requirements.


52
00:02:50,170 --> 00:02:54,041 line:-2
If you accidentally violate them,
the effects can be unpredictable,


53
00:02:54,107 --> 00:02:57,611 line:-2
and debugging the problem
may be extraordinarily difficult.


54
00:02:57,678 --> 00:03:01,882 line:-2
This is the quintessential property
of all unsafe types and operations


55
00:03:01,949 --> 00:03:03,383 line:-1
in the standard library.


56
00:03:03,450 --> 00:03:08,455 line:-2
They all have assumptions that they
are unable or unwilling to fully verify.


57
00:03:08,922 --> 00:03:13,527 line:-2
The "unsafe" prefix is a naming convention
that works a bit like a hazard symbol.


58
00:03:14,094 --> 00:03:19,466 line:-2
It warns you and anyone reading your code
of the danger inherent in their use.


59
00:03:19,533 --> 00:03:22,302 line:-2
Interfaces marked "unsafe"
can still be used


60
00:03:22,369 --> 00:03:24,371 line:-1
to build code that works reliably.


61
00:03:24,438 --> 00:03:27,608 line:-2
Indeed, some tasks
can only be done using them.


62
00:03:27,941 --> 00:03:31,879 line:-2
However, you need to be extra careful
when you reach for these,


63
00:03:31,945 --> 00:03:34,948 line:-2
and you must fully understand
the conditions of their use.


64
00:03:35,549 --> 00:03:39,086 line:-2
In exchange, though, we get to achieve
something that will be difficult


65
00:03:39,152 --> 00:03:41,288 line:-1
or impossible to do otherwise.


66
00:03:41,355 --> 00:03:45,993 line:-2
The use cases of unsafe APIs
typically fall into one of two categories.


67
00:03:46,693 --> 00:03:50,631 line:-2
Either they provide interoperability
with C or Objective-C,


68
00:03:50,697 --> 00:03:54,735 line:-2
or they provide fine-grain control
over runtime performance


69
00:03:54,801 --> 00:03:57,671 line:-2
or some other aspect
of the execution of your program.


70
00:03:59,239 --> 00:04:04,444 line:-2
Optional's unsafelyUnwrapped property
falls squarely in the second category.


71
00:04:04,511 --> 00:04:08,182 line:-2
It enables us to eliminate
a superfluous check for a nil value.


72
00:04:08,949 --> 00:04:11,852 line:-2
This is best reserved
for the most critical parts


73
00:04:11,919 --> 00:04:12,920 line:-1
of our code base,


74
00:04:12,986 --> 00:04:15,189 line:-1
where performance measurements indicate


75
00:04:15,255 --> 00:04:18,791 line:-2
that the tiny, tiny costs
of a potentially unnecessary check


76
00:04:18,858 --> 00:04:20,761 line:-1
still has a detrimental impact.


77
00:04:20,827 --> 00:04:23,430 line:-1
To help us sketch potential mistakes,


78
00:04:23,497 --> 00:04:26,700 line:-2
this property only elides the nil check
in optimized builds.


79
00:04:26,767 --> 00:04:31,205 line:-2
In unoptimized debug builds,
it still fully validates its input value.


80
00:04:31,872 --> 00:04:35,809 line:-2
If you ever implement your own
performance-oriented unsafe interfaces,


81
00:04:35,876 --> 00:04:38,679 line:-2
it is a good idea
to replicate this behavior


82
00:04:38,745 --> 00:04:43,483 line:-2
because it makes it so much easier
to detect problems during development.


83
00:04:43,550 --> 00:04:45,285 line:-1
It is important to note


84
00:04:45,352 --> 00:04:48,722 line:-2
that the goal of safe APIs
is not to prevent crashes.


85
00:04:48,789 --> 00:04:51,058 line:-1
In fact, it's kind of the opposite.


86
00:04:51,124 --> 00:04:54,761 line:-2
When they are given input outside
of their documented constraints,


87
00:04:54,828 --> 00:04:59,800 line:-2
safe APIs guarantee to stop execution
by raising a fatal runtime error.


88
00:04:59,867 --> 00:05:03,237 line:-2
These situations indicate
serious programming errors.


89
00:05:03,303 --> 00:05:07,508 line:-2
Our code broke a critical contract,
and we need to go and fix it.


90
00:05:07,574 --> 00:05:10,344 line:-2
Proceeding with execution
would be irresponsible.


91
00:05:10,410 --> 00:05:12,346 line:-1
The crash report generated by the error


92
00:05:12,713 --> 00:05:15,549 line:-2
lets us know the circumstances
of how the problem occurred,


93
00:05:15,616 --> 00:05:18,151 line:-2
so that we can debug the problem
and correct it.


94
00:05:18,519 --> 00:05:21,388 line:-2
When we say that Swift
is a safe programming language,


95
00:05:21,455 --> 00:05:23,490 line:-1
we mean that, by default,


96
00:05:23,557 --> 00:05:27,861 line:-2
its language and library-level features
fully validate their input.


97
00:05:28,161 --> 00:05:30,564 line:-2
Any construct that does not
or cannot do this


98
00:05:30,631 --> 00:05:32,766 line:-1
is explicitly marked as "unsafe."


99
00:05:33,267 --> 00:05:34,268 line:-1
For instance,


100
00:05:34,334 --> 00:05:37,971 line:-2
the Swift Standard Library
provides powerful unsafe pointer types


101
00:05:38,038 --> 00:05:40,474 line:-2
that are roughly on the same level
of abstraction


102
00:05:40,541 --> 00:05:43,443 line:-1
as pointers in the C programming language.


103
00:05:43,510 --> 00:05:48,182 line:-2
In order to understand how pointers work,
we have to talk a little bit about memory.


104
00:05:49,183 --> 00:05:51,818 line:-1
Swift has a flat memory model.


105
00:05:51,885 --> 00:05:56,356 line:-2
It treats memory as a linear address space
of individually addressable 8-bit bytes.


106
00:05:56,423 --> 00:05:59,126 line:-2
Each of these bytes
has its own unique address,


107
00:05:59,193 --> 00:06:02,029 line:-2
usually printed as
a hexadecimal integer value.


108
00:06:02,095 --> 00:06:06,200 line:-2
Now, at runtime, the address space
is sparsely populated with data


109
00:06:06,266 --> 00:06:09,970 line:-2
that reflects our app's execution state
at any given moment.


110
00:06:10,370 --> 00:06:13,507 line:-1
It includes our app's executable binary,


111
00:06:13,574 --> 00:06:16,276 line:-2
all the libraries and frameworks
that we have imported,


112
00:06:16,844 --> 00:06:20,547 line:-2
the stack, providing storage
for local and temporary variables


113
00:06:20,614 --> 00:06:22,516 line:-1
as well as some function arguments,


114
00:06:22,583 --> 00:06:24,051 line:-1
dynamic memory regions,


115
00:06:24,117 --> 00:06:25,853 line:-1
including class instance storage


116
00:06:25,919 --> 00:06:28,655 line:-2
and any memory
we manually allocate ourselves,


117
00:06:28,722 --> 00:06:32,826 line:0
and some regions may even get mapped to
read-only resources such as image files.


118
00:06:33,660 --> 00:06:37,598 line:-2
Each individual item is assigned
a contiguous memory region


119
00:06:37,664 --> 00:06:41,935 line:-2
storing some sort of data in the same
shared linear address space.


120
00:06:42,469 --> 00:06:46,640 line:-2
As your app executes,
the states of its memory keeps evolving.


121
00:06:46,707 --> 00:06:48,609 line:-1
New objects get allocated,


122
00:06:48,675 --> 00:06:51,945 line:-2
the stack keeps changing,
old items get destroyed.


123
00:06:52,012 --> 00:06:54,548 line:-2
Luckily, the Swift language
and the runtime


124
00:06:54,615 --> 00:06:57,784 line:-2
take care of keeping track
of where things are for us.


125
00:06:57,851 --> 00:07:01,321 line:-2
We generally don't need
to manually manage memory in Swift.


126
00:07:01,855 --> 00:07:03,957 line:-1
When we do need to do so though,


127
00:07:04,024 --> 00:07:07,194 line:-2
unsafe pointers give us
all the low-level operations we need


128
00:07:07,261 --> 00:07:09,596 line:-1
to effectively manage memory ourselves.


129
00:07:09,663 --> 00:07:12,599 line:-2
Of course,
the flip side of all this control


130
00:07:12,666 --> 00:07:15,102 line:-1
is the responsibility that comes with it.


131
00:07:15,169 --> 00:07:18,071 line:-2
These pointers simply represent
the address of a location


132
00:07:18,138 --> 00:07:19,239 line:-1
somewhere in memory.


133
00:07:20,274 --> 00:07:22,476 line:-1
They provide powerful operations,


134
00:07:22,543 --> 00:07:25,445 line:-2
but they have to trust you
that you will use them correctly,


135
00:07:25,512 --> 00:07:28,215 line:-1
and this makes them fundamentally unsafe.


136
00:07:28,282 --> 00:07:29,516 line:-1
If you aren't careful,


137
00:07:29,583 --> 00:07:33,120 line:-2
your pointer operations
may scribble all over the address space,


138
00:07:33,187 --> 00:07:36,190 line:-2
ruining the carefully-maintained state
of your application.


139
00:07:36,790 --> 00:07:37,824 line:-1
For example,


140
00:07:37,891 --> 00:07:41,061 line:-2
dynamically allocating storage
for an integer value


141
00:07:41,128 --> 00:07:45,098 line:-2
creates a storage location for you
and gives you a direct pointer to it.


142
00:07:45,933 --> 00:07:49,603 line:-2
The pointer gives you full control
over the underlying memory,


143
00:07:49,670 --> 00:07:51,939 line:-1
but it does not manage it for you.


144
00:07:52,005 --> 00:07:56,343 line:-2
Neither is it able to keep track of
what happens to the memory location later.


145
00:07:56,410 --> 00:07:59,546 line:-2
It merely executes the operations
you tell it to do.


146
00:08:00,247 --> 00:08:02,149 line:-1
The pointer gets invalidated


147
00:08:02,216 --> 00:08:05,352 line:-2
as the underlying memory
is deinitialized and deallocated.


148
00:08:05,886 --> 00:08:10,357 line:-2
However, an invalid pointer
looks just like a regular valid one.


149
00:08:10,424 --> 00:08:13,627 line:-2
The pointer itself doesn't know
that it has become invalid.


150
00:08:14,328 --> 00:08:17,364 line:-2
Any attempt to dereference
such a dangling pointer


151
00:08:17,431 --> 00:08:19,700 line:-1
is a serious programming error.


152
00:08:19,766 --> 00:08:20,767 line:-1
If we are lucky,


153
00:08:20,834 --> 00:08:23,604 line:-2
the memory location was rendered
completely inaccessible


154
00:08:23,670 --> 00:08:24,805 line:-1
by the deallocation,


155
00:08:24,872 --> 00:08:28,075 line:-2
and trying to access it will result
in an immediate crash.


156
00:08:28,141 --> 00:08:30,344 line:-1
However, this isn't guaranteed.


157
00:08:30,410 --> 00:08:33,145 line:-2
Subsequent allocations may have reused
the same address


158
00:08:33,212 --> 00:08:34,715 line:-1
to store some other value.


159
00:08:35,249 --> 00:08:37,784 line:-2
In this case,
dereferencing the dangling pointer


160
00:08:37,851 --> 00:08:40,153 line:-1
may lead to even more serious problems.


161
00:08:41,121 --> 00:08:42,923 line:-1
Attempting to write through it


162
00:08:42,990 --> 00:08:46,760 line:-2
may silently corrupt the state
of some unrelated part of our application.


163
00:08:47,094 --> 00:08:50,664 line:-2
This is bad
because this may have arbitrary effects.


164
00:08:50,731 --> 00:08:53,166 line:-2
For example,
it can lead to silent corruption,


165
00:08:53,233 --> 00:08:55,202 line:-1
or even loss of user data.


166
00:08:56,036 --> 00:08:58,205 line:-1
Such bugs are especially sinister


167
00:08:58,272 --> 00:09:01,308 line:-2
when the values we access
contain object references,


168
00:09:01,375 --> 00:09:05,212 line:-2
or when the memory now contains
a Swift value of an incompatible type.


169
00:09:05,746 --> 00:09:09,249 line:-2
Xcode provides a runtime debugging tool
called the Address Sanitizer


170
00:09:09,316 --> 00:09:11,518 line:-1
to help you catch such memory problems.


171
00:09:11,885 --> 00:09:14,821 line:0
For more information on this
and similar Xcode tools,


172
00:09:14,888 --> 00:09:17,591 line:0
see the "Finding Bugs Using
Xcode Runtime Tools" session


173
00:09:17,658 --> 00:09:19,259 line:0
from our previous conference.


174
00:09:20,093 --> 00:09:24,431 line:0
For a more detail discussion on how
to avoid issues with pointer type safety,


175
00:09:24,498 --> 00:09:27,401 line:0
check out my colleague Andy's talk
on this topic this week.


176
00:09:28,168 --> 00:09:32,973 line:-2
So, if pointers are so dangerous,
why would you ever want to use them?


177
00:09:33,040 --> 00:09:36,944 line:-2
Well, a big reason is interoperability
with unsafe languages


178
00:09:37,010 --> 00:09:38,779 line:-1
like C or Objective-C.


179
00:09:39,479 --> 00:09:43,083 line:-2
In these languages,
functions often take pointer arguments.


180
00:09:43,150 --> 00:09:45,586 line:-1
So to be able to call them from Swift,


181
00:09:45,652 --> 00:09:49,590 line:-2
you need to know how to generate pointers
to Swift values.


182
00:09:49,656 --> 00:09:52,626 line:-2
In fact, there is a direct mapping
between C pointer types


183
00:09:52,693 --> 00:09:55,729 line:-2
and their corresponding
Swift unsafe pointer counterparts.


184
00:09:56,330 --> 00:10:00,701 line:-2
C APIs that we import to Swift
get translated using this mapping.


185
00:10:01,602 --> 00:10:04,171 line:-2
For example,
consider the simple C function


186
00:10:04,238 --> 00:10:07,474 line:-2
that processes a buffer
of integer values in some way.


187
00:10:08,141 --> 00:10:12,212 line:-2
When it gets imported to Swift,
the const int pointer parameter


188
00:10:12,279 --> 00:10:16,650 line:-2
gets translated into an implicitly
unwrapped optional UnsafePointer type.


189
00:10:17,417 --> 00:10:19,386 line:-1
One way to get such a pointer


190
00:10:19,453 --> 00:10:23,056 line:-2
is to use the static allocate method
on UnsafeMutablePointer


191
00:10:23,123 --> 00:10:27,060 line:-2
to create a dynamic buffer
suitable for holding integer values.


192
00:10:27,728 --> 00:10:32,332 line:-2
Then we can use pointer arithmetic
and dedicated initialization methods


193
00:10:32,399 --> 00:10:35,369 line:-2
to set up the buffer's elements
to particular values.


194
00:10:36,403 --> 00:10:40,340 line:-2
And once that's all arranged,
we can at last call the C function,


195
00:10:40,407 --> 00:10:42,976 line:-2
passing it the pointer
to the initialized buffer.


196
00:10:43,677 --> 00:10:45,245 line:-1
When the function returns,


197
00:10:45,312 --> 00:10:47,814 line:-2
we can deinitialize
and deallocate the buffer,


198
00:10:47,881 --> 00:10:50,217 line:-2
allowing Swift to reuse
its memory location


199
00:10:50,284 --> 00:10:51,718 line:-1
for something else later.


200
00:10:52,519 --> 00:10:56,123 line:-2
We have full control
over every operation along the way,


201
00:10:56,190 --> 00:10:59,126 line:-1
but every step is fundamentally unsafe.


202
00:10:59,193 --> 00:11:03,931 line:-2
The lifetime of the allocated buffer
is not managed by the return pointer.


203
00:11:03,997 --> 00:11:06,533 line:-2
We have to remember
to manually deallocate it


204
00:11:06,600 --> 00:11:08,268 line:-1
at the appropriate time


205
00:11:08,335 --> 00:11:11,171 line:-2
or it will stick around forever,
causing a memory leak.


206
00:11:11,939 --> 00:11:14,875 line:-1
Initialization cannot automatically verify


207
00:11:14,942 --> 00:11:18,212 line:-2
that the address location
is within the buffer we allocated.


208
00:11:18,278 --> 00:11:21,582 line:-2
If we get it wrong,
we get undefined behavior.


209
00:11:21,849 --> 00:11:24,651 line:-2
To correctly call the function,
we have to be aware


210
00:11:24,718 --> 00:11:27,754 line:-2
if it is going to take ownership
of the underlying buffer.


211
00:11:27,821 --> 00:11:30,757 line:-2
In this case, we are assuming
that it merely accesses it


212
00:11:30,824 --> 00:11:32,759 line:-1
for the duration of the function call,


213
00:11:32,826 --> 00:11:36,530 line:-2
and it doesn't hold on to the pointer
or attempt to deallocate it.


214
00:11:36,997 --> 00:11:38,899 line:-1
This is not enforced by the language,


215
00:11:38,966 --> 00:11:41,869 line:-2
we have to look it up
in the function's documentation.


216
00:11:42,336 --> 00:11:45,606 line:-2
Deinitialization only makes sense
if the underlying memory


217
00:11:45,672 --> 00:11:49,243 line:-2
has been previously initialized
with values of the correct type.


218
00:11:49,977 --> 00:11:54,081 line:-2
Finally, we must only deallocate memory
that was previously allocated


219
00:11:54,147 --> 00:11:56,583 line:-1
and which is in a deinitialized state.


220
00:11:57,184 --> 00:12:00,120 line:-2
At every step,
there are unchecked assumptions.


221
00:12:00,187 --> 00:12:03,657 line:-2
Getting any one of them wrong
will lead to undefined behavior.


222
00:12:04,291 --> 00:12:08,428 line:-2
Now, this code works fine,
but it has some questionable choices.


223
00:12:08,862 --> 00:12:13,166 line:-2
One of these is that the buffer is
represented solely by its start address.


224
00:12:13,233 --> 00:12:16,870 line:-2
Its length is a separate value
that is duplicated all over.


225
00:12:17,538 --> 00:12:20,607 line:-2
We could improve the clarity of this code
by modeling the buffer


226
00:12:20,674 --> 00:12:23,410 line:-2
as a pair of start address
and length values.


227
00:12:23,477 --> 00:12:27,147 line:-2
This way, the boundaries of the buffer
are always easily available,


228
00:12:27,214 --> 00:12:31,518 line:-2
so, for example, it becomes possible to
easily check against out-of-bounds access


229
00:12:31,585 --> 00:12:32,920 line:-1
at any point.


230
00:12:32,986 --> 00:12:38,025 line:-2
This is why the standard library provides
these four unsafe buffer pointer types.


231
00:12:38,091 --> 00:12:41,628 line:-2
These come handy whenever we need to work
with regions of memory


232
00:12:41,695 --> 00:12:44,698 line:-1
rather than pointers to individual values.


233
00:12:44,765 --> 00:12:49,269 line:-2
By including the size of the region,
as well as location in a nice package,


234
00:12:49,336 --> 00:12:53,841 line:-2
they encourage best practices
and let you manage memory more carefully.


235
00:12:54,608 --> 00:12:56,510 line:-1
In unoptimized debug builds,


236
00:12:56,577 --> 00:12:59,646 line:-2
these buffer pointers check against
out-of-bounds access


237
00:12:59,713 --> 00:13:04,017 line:-2
through their subscript operation,
contributing a little bit of safety.


238
00:13:04,084 --> 00:13:07,654 line:-2
However, this validation is incomplete
by necessity.


239
00:13:07,721 --> 00:13:09,690 line:-1
It is limited to bounds checking.


240
00:13:10,257 --> 00:13:13,560 line:-2
Like pointers, they cannot verify
that the underlying memory


241
00:13:13,627 --> 00:13:15,095 line:-1
is in the expected state.


242
00:13:15,596 --> 00:13:18,098 line:-2
Still, partial checking
is far more helpful


243
00:13:18,165 --> 00:13:19,933 line:-1
than no verification at all,


244
00:13:20,000 --> 00:13:24,738 line:-2
and the mere act of considering the length
and the address together as a single unit


245
00:13:24,805 --> 00:13:27,541 line:-2
already helps preventing
some simple mistakes.


246
00:13:28,442 --> 00:13:32,579 line:-2
Swift's standard contiguous collections
use these buffer pointers


247
00:13:32,646 --> 00:13:36,717 line:-2
to provide temporary direct access
to their underlying storage buffer


248
00:13:36,783 --> 00:13:38,719 line:-1
through these handy unsafe methods.


249
00:13:39,653 --> 00:13:43,891 line:-2
It is also possible to get a temporary
pointer to an individual Swift value,


250
00:13:43,957 --> 00:13:47,294 line:-2
which we can then pass
to C functions expecting such.


251
00:13:47,794 --> 00:13:50,531 line:-2
We can use these methods
to simplify our code,


252
00:13:50,597 --> 00:13:54,468 line:-2
isolating unsafe operations
to the smallest possible code section.


253
00:13:54,902 --> 00:13:57,738 line:-2
To get rid of the need
for manual memory management,


254
00:13:57,804 --> 00:14:00,807 line:-2
we can store our input data
in an array value.


255
00:14:01,074 --> 00:14:04,144 line:-2
Then we can use
the withUnsafeBufferPointer method


256
00:14:04,211 --> 00:14:08,248 line:-2
to temporarily get direct access
to the array's underlying storage.


257
00:14:09,149 --> 00:14:12,085 line:-2
Within the closure
we pass to this function,


258
00:14:12,152 --> 00:14:14,655 line:-2
we can extract the start address
and count values


259
00:14:14,721 --> 00:14:17,858 line:-2
and pass them directly
to the C function we want to call.


260
00:14:18,425 --> 00:14:22,496 line:-2
In fact, the need to pass pointers
to C functions is so frequent


261
00:14:22,563 --> 00:14:25,232 line:-1
that Swift provides special syntax for it.


262
00:14:25,299 --> 00:14:29,369 line:-2
We can simply pass an array value
to a function expecting an unsafe pointer,


263
00:14:29,436 --> 00:14:31,405 line:-2
and the compiler
will automatically generate


264
00:14:31,471 --> 00:14:34,675 line:-2
the equivalent
withUnsafeBufferPointer call for us.


265
00:14:35,242 --> 00:14:38,078 line:-2
Remember, though,
that this does not change the fact


266
00:14:38,145 --> 00:14:41,915 line:-2
that the pointer is only valid
for the duration of the function call.


267
00:14:42,416 --> 00:14:44,318 line:-1
If the function escapes the pointer


268
00:14:44,384 --> 00:14:47,120 line:-2
and tries to access
the underlying memory later,


269
00:14:47,187 --> 00:14:49,756 line:-2
then that will result
in undefined behavior


270
00:14:49,823 --> 00:14:52,359 line:-2
no matter what syntax
we used to get the pointer.


271
00:14:52,659 --> 00:14:55,996 line:-2
Here's a list of such implicit
value-to-pointer conversions


272
00:14:56,063 --> 00:14:57,397 line:-1
supported by Swift.


273
00:14:58,098 --> 00:15:02,369 line:-2
As we have just seen, to pass the contents
of a Swift array to a C function,


274
00:15:02,436 --> 00:15:05,138 line:-2
we can simply pass in
the array value itself.


275
00:15:06,006 --> 00:15:08,308 line:-2
If the function
wants to mutate the elements,


276
00:15:08,375 --> 00:15:13,046 line:-2
we can pass in an inout reference
to the array to get a mutable pointer.


277
00:15:13,113 --> 00:15:15,215 line:-1
Functions that take C strings


278
00:15:15,282 --> 00:15:19,152 line:-2
can be called by directly passing in
a Swift stringValue.


279
00:15:19,219 --> 00:15:22,155 line:-2
The string will produce
a temporary C string,


280
00:15:22,222 --> 00:15:25,392 line:-2
including the all-important
terminating null character.


281
00:15:25,559 --> 00:15:29,329 line:0
If the C function simply expects a pointer
to an individual value,


282
00:15:29,396 --> 00:15:32,733 line:0
we can use an inout reference
to the corresponding Swift value


283
00:15:32,799 --> 00:15:35,369 line:0
to get a suitable temporary pointer to it.


284
00:15:35,736 --> 00:15:40,374 line:-2
Careful use of this feature lets us call
even the most complicated C interfaces.


285
00:15:41,041 --> 00:15:44,912 line:-2
For instance, here is a C function
provided by the Darwin module


286
00:15:44,978 --> 00:15:47,981 line:-2
that you can use to query or update
low-level information


287
00:15:48,048 --> 00:15:49,449 line:-1
about the running system.


288
00:15:49,816 --> 00:15:55,022 line:-2
It comes with six parameters specifying
the location and size of an integer buffer


289
00:15:55,088 --> 00:15:58,525 line:-2
serving as the identifier
for the value we want to access,


290
00:15:59,359 --> 00:16:01,628 line:-1
the location and size of another buffer


291
00:16:01,695 --> 00:16:04,498 line:-2
where we want the functions
to store the current value,


292
00:16:04,565 --> 00:16:06,900 line:-1
and an optional, read-only third buffer


293
00:16:06,967 --> 00:16:10,704 line:-2
containing a new value we may want to set
for the specified entry.


294
00:16:11,572 --> 00:16:14,274 line:-1
This all looks rather intimidating.


295
00:16:14,341 --> 00:16:17,010 line:-1
However, calling this function from Swift


296
00:16:17,077 --> 00:16:20,514 line:-2
isn't necessarily more complicated
as it is in C.


297
00:16:20,581 --> 00:16:24,117 line:-2
We can use implicit pointer conversions
to great effect here,


298
00:16:24,184 --> 00:16:27,888 line:-2
resulting in code that is roughly similar
in apparent complexity


299
00:16:27,955 --> 00:16:30,090 line:-1
as it would be in its native language.


300
00:16:30,390 --> 00:16:32,826 line:-2
For example, here,
we want to create a function


301
00:16:32,893 --> 00:16:34,795 line:-1
that retrieves the size of a cache line


302
00:16:34,862 --> 00:16:37,331 line:-2
for the processor architecture
we are running on.


303
00:16:38,131 --> 00:16:42,536 line:-2
The documentation of sysctl tells us
that this information is available


304
00:16:42,603 --> 00:16:45,973 line:-2
under the identifier "CACHELINE"
in the hardware section.


305
00:16:46,039 --> 00:16:47,841 line:-1
To pass this ID to sysctl,


306
00:16:47,908 --> 00:16:51,044 line:-2
we can use
an implicit array-to-pointer conversion,


307
00:16:51,111 --> 00:16:53,714 line:-2
and an explicit integer conversion
for its count.


308
00:16:54,448 --> 00:16:57,918 line:-2
The information we want to retrieve
is a C integer value,


309
00:16:57,985 --> 00:17:00,521 line:-1
so we create a local integer variable,


310
00:17:00,587 --> 00:17:02,422 line:-1
and generate a temporary pointer to it


311
00:17:02,489 --> 00:17:06,260 line:-2
for the third argument
with another inout-to-pointer conversion.


312
00:17:06,693 --> 00:17:10,430 line:-2
The function will copy the size
of the cache lines into the buffer,


313
00:17:10,497 --> 00:17:12,098 line:-1
starting at this pointer,


314
00:17:12,165 --> 00:17:16,103 line:-2
overwriting our original zero value
with another integer.


315
00:17:16,435 --> 00:17:19,540 line:-2
The fourth argument is a pointer
to the size of this buffer,


316
00:17:19,606 --> 00:17:23,510 line:-2
which we can get from the memory layout
of the corresponding integer type.


317
00:17:24,278 --> 00:17:27,146 line:-2
On return,
the function will set this value


318
00:17:27,214 --> 00:17:29,616 line:-2
to the number of bytes
it copied into the result.


319
00:17:30,417 --> 00:17:33,954 line:-2
Because we only want to retrieve
the current value, not set it,


320
00:17:34,021 --> 00:17:36,723 line:-2
we supply a nil value
for the "new value" buffer,


321
00:17:36,790 --> 00:17:38,425 line:-1
and set its size to zero.


322
00:17:38,892 --> 00:17:42,930 line:-2
Sysctl is documented to return
a zero value on success.


323
00:17:42,996 --> 00:17:47,334 line:-2
We assume that this call cannot fail,
but we do verify this assumption


324
00:17:47,401 --> 00:17:50,604 line:-2
in case we have made a mistake
in the arguments we supplied.


325
00:17:51,405 --> 00:17:54,775 line:-2
Similarly, we expect the call to set
as many bytes as there are


326
00:17:54,842 --> 00:17:56,510 line:-1
in a C integer value.


327
00:17:56,577 --> 00:18:00,948 line:-2
Finally, we can convert the C integer
to a Swift Int, and return the result.


328
00:18:01,715 --> 00:18:06,220 line:-2
As it happens, the cache line
is 64 bytes wide on most platforms.


329
00:18:06,286 --> 00:18:09,089 line:-2
Notice how the unsafe parts
are neatly isolated


330
00:18:09,156 --> 00:18:10,991 line:-1
into the single function call.


331
00:18:11,058 --> 00:18:13,327 line:-2
Of course, we could also choose
to expand this code


332
00:18:13,393 --> 00:18:15,295 line:-1
into explicit, closure-based calls.


333
00:18:15,629 --> 00:18:17,531 line:-1
It would look something like this.


334
00:18:18,098 --> 00:18:21,602 line:-2
This code is functionally equivalent
to our original version.


335
00:18:21,668 --> 00:18:25,038 line:-2
Choosing between the two styles
is mostly a matter of taste.


336
00:18:25,105 --> 00:18:27,474 line:-2
To be honest, though,
in this particular case,


337
00:18:27,541 --> 00:18:29,943 line:-2
I think I prefer to go with
the shorter variant.


338
00:18:30,777 --> 00:18:34,381 line:-2
Whichever version we choose, though,
we need to always be aware


339
00:18:34,448 --> 00:18:37,217 line:-2
that the generated pointer values
are temporary,


340
00:18:37,284 --> 00:18:40,153 line:-2
and they get invalidated
when the function returns.


341
00:18:40,220 --> 00:18:43,557 line:-2
While inout-to-pointer conversions
can be convenient,


342
00:18:43,924 --> 00:18:47,294 line:-2
they are really only intended
to help calling C functions.


343
00:18:47,661 --> 00:18:51,865 line:-2
In pure Swift code, we need to pass around
pointers far less often,


344
00:18:51,932 --> 00:18:55,202 line:-2
so it makes sense to highlight the cases
when we do such things


345
00:18:55,269 --> 00:18:57,905 line:-1
by preferring to use closure-based APIs.


346
00:18:57,971 --> 00:19:01,642 line:-2
They might be more verbose,
but I find that their explicitness


347
00:19:01,708 --> 00:19:04,745 line:-2
makes it easier to understand
what exactly is happening.


348
00:19:05,078 --> 00:19:07,981 line:-1
In particular, their closure-based design


349
00:19:08,048 --> 00:19:10,551 line:-2
makes the actual lifetime
of the resulting pointer


350
00:19:10,617 --> 00:19:11,818 line:-1
far more explicit,


351
00:19:11,885 --> 00:19:16,089 line:-2
helping you avoid lifetime issues,
like this invalid pointer conversion.


352
00:19:16,490 --> 00:19:20,894 line:-2
Here, passing a temporary pointer
to a mutable pointer initializer


353
00:19:20,961 --> 00:19:23,764 line:-2
escapes its value
out of the initializer call.


354
00:19:24,164 --> 00:19:26,834 line:-2
Accessing the resulting
dangling pointer value


355
00:19:26,900 --> 00:19:28,435 line:-1
is undefined behavior.


356
00:19:28,502 --> 00:19:31,438 line:-2
The underlying memory location
may not exist anymore,


357
00:19:31,505 --> 00:19:34,174 line:-2
or it may have been reused
for some other value.


358
00:19:34,741 --> 00:19:36,844 line:0
To help catch these sort of bugs,


359
00:19:36,910 --> 00:19:40,480 line:0
the Swift 5.3 compiler now produces
a helpful warning


360
00:19:40,547 --> 00:19:42,115 line:0
when it can detect such cases.


361
00:19:42,616 --> 00:19:45,919 line:-2
Another recent improvement
is that the Swift Standard Library


362
00:19:45,986 --> 00:19:47,888 line:-1
now provides new initializers


363
00:19:47,955 --> 00:19:50,891 line:-2
that allow us to create an array
or a stringValue


364
00:19:50,958 --> 00:19:54,895 line:-2
by directly copying data into
their underlying uninitialized storage.


365
00:19:55,395 --> 00:19:58,232 line:-2
This gets rid of the need to allocate
temporary buffers


366
00:19:58,298 --> 00:20:00,000 line:-1
only to prepare such data.


367
00:20:00,367 --> 00:20:03,370 line:-2
For example,
string's new initializer can be used


368
00:20:03,437 --> 00:20:07,074 line:-2
to call the same sysctl function
to retrieve a stringValue.


369
00:20:07,374 --> 00:20:09,710 line:-2
Here, we want to find out
the kernel version


370
00:20:09,776 --> 00:20:12,012 line:-1
of the operating system we are running on,


371
00:20:12,079 --> 00:20:16,250 line:-2
which is identified by the version entry
in the kernel section.


372
00:20:17,050 --> 00:20:18,652 line:-1
Unlike the cache line example,


373
00:20:18,719 --> 00:20:21,488 line:-2
we don't know the size
of the version string in advance,


374
00:20:21,555 --> 00:20:25,459 line:-2
so in order to figure it out,
we'll need to call sysctl twice.


375
00:20:26,293 --> 00:20:29,229 line:-2
First, we call the function
with a nil output buffer.


376
00:20:29,296 --> 00:20:31,431 line:-1
On return, the length variable


377
00:20:31,498 --> 00:20:35,068 line:-2
will get set to the number of bytes
required to store the string.


378
00:20:35,135 --> 00:20:38,872 line:-2
Like before, we need to remember
to check for any reported errors.


379
00:20:38,939 --> 00:20:41,074 line:-1
With the size of the result on hand,


380
00:20:41,141 --> 00:20:44,845 line:-2
we can now ask string
to prepare uninitialized storage for us


381
00:20:44,912 --> 00:20:46,914 line:-1
so that we can get the actual data.


382
00:20:46,980 --> 00:20:51,952 line:-2
The initializer gives us a buffer pointer
that we can pass to the sysctl function.


383
00:20:52,486 --> 00:20:56,023 line:-2
The function will copy the version string
directly into this buffer.


384
00:20:56,089 --> 00:20:59,393 line:-2
On return,
we verify that the call was successful,


385
00:20:59,826 --> 00:21:02,963 line:-2
we double-check that the function
did actually copy some bytes


386
00:21:03,030 --> 00:21:05,866 line:-2
to the buffer,
and that the last byte is zero,


387
00:21:05,933 --> 00:21:09,169 line:-2
corresponding to the null character
terminating a C string.


388
00:21:09,469 --> 00:21:12,573 line:-2
This null character
is not part of the version string,


389
00:21:12,639 --> 00:21:16,610 line:-2
so we discard it by returning one less
than the amount of bytes copied.


390
00:21:16,677 --> 00:21:20,781 line:-2
This signals to the string exactly
how many bytes of UTF-8 data


391
00:21:20,848 --> 00:21:22,549 line:-1
we have copied into its storage.


392
00:21:22,616 --> 00:21:24,785 line:-1
By using this new string initializer,


393
00:21:24,852 --> 00:21:27,955 line:-2
we get rid of the need
for manual memory management here.


394
00:21:28,021 --> 00:21:29,723 line:-1
We get direct access to a buffer


395
00:21:29,790 --> 00:21:33,727 line:-2
that will eventually become storage
for a regular Swift string instance.


396
00:21:33,794 --> 00:21:36,864 line:-2
We don't need to manually allocate
or deallocate memory.


397
00:21:36,930 --> 00:21:40,667 line:0
When we call this function,
we get the expected version string.


398
00:21:40,868 --> 00:21:45,272 line:-2
So, as we have seen, we can use
the standard library's unsafe APIs


399
00:21:45,339 --> 00:21:49,276 line:-2
to elegantly solve even the most tricky
interoperability puzzles.


400
00:21:49,710 --> 00:21:53,046 line:-2
In summary,
to effectively use unsafe APIs,


401
00:21:53,113 --> 00:21:57,918 line:-2
you need to be aware of their expectations
and be careful to always fulfill them,


402
00:21:57,985 --> 00:22:00,787 line:-2
otherwise your code
will have undefined behavior.


403
00:22:01,355 --> 00:22:05,626 line:-2
It is easier to do this if you keep
unsafe API usage to the minimum.


404
00:22:06,093 --> 00:22:09,263 line:-2
It is always a good idea
to choose safer alternatives


405
00:22:09,329 --> 00:22:10,831 line:-1
whenever they are available.


406
00:22:11,565 --> 00:22:15,335 line:-2
When working with a region of memory
containing more than one element,


407
00:22:15,402 --> 00:22:17,404 line:-1
it is best to keep track of its boundaries


408
00:22:17,471 --> 00:22:21,375 line:-2
by using UnsafeBufferPointers
rather than just a pointer value.


409
00:22:22,276 --> 00:22:25,779 line:-2
Xcode provides a set of great tools
to help debug issues


410
00:22:25,846 --> 00:22:29,917 line:-2
with how we use unsafe APIs,
including the Address Sanitizer.


411
00:22:30,317 --> 00:22:34,855 line:-2
Use these to identify bugs in your code
before putting it in production,


412
00:22:34,922 --> 00:22:37,424 line:-2
and to debug problems
that may have been uncovered.


413
00:22:37,891 --> 00:22:41,295 line:-2
And with that, thank you,
and have a great WWDC.

