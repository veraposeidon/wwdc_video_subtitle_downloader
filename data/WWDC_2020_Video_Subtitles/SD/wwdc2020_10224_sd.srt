1
00:00:03,804 --> 00:00:06,306 line:-1
Hello, and welcome to WWDC.


2
00:00:09,710 --> 00:00:12,279 line:0
Hello. I'm Doug Wyatt
from the Core Audio team,


3
00:00:12,346 --> 00:00:15,549 line:0
and today I'd like to introduce you
to audio workgroups.


4
00:00:15,949 --> 00:00:19,887 line:-2
If you develop an audio application
or plug-in that creates realtime threads,


5
00:00:19,953 --> 00:00:21,722 line:-1
then this talk is for you.


6
00:00:22,256 --> 00:00:26,159 line:-2
You're probably using realtime threads
for very low-latency audio synthesis


7
00:00:26,226 --> 00:00:27,694 line:-1
or signal processing.


8
00:00:28,729 --> 00:00:32,399 line:-2
It's important that you adopt
new API audio workgroups.


9
00:00:32,900 --> 00:00:38,505 line:-2
And these new APIs are available in
the fall 2020 releases of macOS and iOS.


10
00:00:41,675 --> 00:00:44,478 line:0
Now, if you're wondering if you should
create your own realtime threads,


11
00:00:44,545 --> 00:00:46,213 line:0
the answer is probably no.


12
00:00:46,947 --> 00:00:48,615 line:0
If you do go down this path, though,


13
00:00:48,682 --> 00:00:52,686 line:0
then follow the first rule
of performance tuning: measure everything.


14
00:00:53,987 --> 00:00:56,323 line:-1
Okay, let's dive in with some background.


15
00:00:56,790 --> 00:00:59,092 line:-1
Modern CPUs have performance controllers,


16
00:00:59,159 --> 00:01:03,163 line:-2
which make trade-offs between
power consumption and computing power.


17
00:01:04,263 --> 00:01:07,301 line:-2
The performance controller
helps assign threads to CPUs.


18
00:01:07,668 --> 00:01:11,839 line:-2
The CPUs themselves may have
differing power and speed characteristics.


19
00:01:12,239 --> 00:01:13,540 line:-1
The performance controller


20
00:01:13,607 --> 00:01:17,110 line:-2
can also dynamically change
the clock frequency of the CPUs.


21
00:01:19,012 --> 00:01:23,417 line:-2
Up until now, the main input into the
performance controller's decision-making


22
00:01:23,483 --> 00:01:27,354 line:-2
has been observations about
the running applications and daemons:


23
00:01:27,421 --> 00:01:30,591 line:-2
how many threads are they using
and how much work they are doing?


24
00:01:31,525 --> 00:01:34,261 line:-2
Now, because of
the time-critical nature of audio,


25
00:01:34,328 --> 00:01:37,798 line:-2
we've given it a new input
into the performance controller:


26
00:01:37,865 --> 00:01:39,533 line:-1
the new workgroup APIs.


27
00:01:40,634 --> 00:01:42,503 line:-1
Let's look now at audio workgroups.


28
00:01:42,569 --> 00:01:46,073 line:-2
Later, we'll see how to use them
in your apps and Audio Unit plug-ins.


29
00:01:47,207 --> 00:01:50,377 line:-2
First, a workgroup consists of
one or more threads.


30
00:01:50,878 --> 00:01:53,447 line:-2
There is a master thread
which wakes up periodically.


31
00:01:54,348 --> 00:01:56,950 line:0
It tells the kernel
when it begins a work cycle,


32
00:01:57,017 --> 00:01:59,152 line:0
and what the deadline for that work is.


33
00:02:00,954 --> 00:02:03,991 line:0
The master thread might signal and wait
for other threads


34
00:02:04,057 --> 00:02:05,726 line:0
that are part of the workgroup


35
00:02:05,792 --> 00:02:08,127 line:0
and those threads
might be in other processes.


36
00:02:09,830 --> 00:02:13,967 line:0
At the end of each work cycle,
the workgroup, again, notifies the kernel.


37
00:02:15,369 --> 00:02:20,040 line:0
This diagram illustrates how Core Audio
runs an I/O thread in the audio server.


38
00:02:20,641 --> 00:02:25,045 line:-2
This thread wakes up at regular intervals
and has a deadline for each cycle.


39
00:02:25,979 --> 00:02:29,516 line:-2
Each time it wakes up,
it calls the client to produce output.


40
00:02:30,284 --> 00:02:31,718 line:-1
When the client is done,


41
00:02:31,785 --> 00:02:36,790 line:-2
then the output data is written
to the hardware and the I/O thread sleeps.


42
00:02:37,457 --> 00:02:40,260 line:-2
This is the master thread
of a device workgroup.


43
00:02:40,694 --> 00:02:44,565 line:-2
It informs the kernel of the
beginning and end of each work cycle.


44
00:02:46,667 --> 00:02:49,369 line:-2
If the client takes too long
to produce output data,


45
00:02:49,436 --> 00:02:52,940 line:-2
then the thread misses its deadline
and we get an overload.


46
00:02:53,307 --> 00:02:57,110 line:-2
The user hears this as a discontinuity,
or a glitch, in the audio.


47
00:02:58,078 --> 00:03:01,081 line:-2
So, it's important that the performance
controller be aware of the threads


48
00:03:01,148 --> 00:03:03,483 line:-2
that are producing audio
with that deadline.


49
00:03:04,284 --> 00:03:06,486 line:-1
For every audio server I/O thread,


50
00:03:06,553 --> 00:03:09,323 line:-2
there is a second thread
in the client application.


51
00:03:09,389 --> 00:03:11,258 line:-1
We see here that the audio server


52
00:03:11,325 --> 00:03:14,595 line:-2
wakes and waits for this thread
on each I/O cycle.


53
00:03:15,662 --> 00:03:17,798 line:-1
Both threads are colored in green here.


54
00:03:18,232 --> 00:03:20,300 line:-1
This illustrates that the audio frameworks


55
00:03:20,367 --> 00:03:23,971 line:-2
join the client-side thread
to the device's workgroup.


56
00:03:24,037 --> 00:03:26,206 line:-1
So, the kernel knows that both threads


57
00:03:26,273 --> 00:03:29,209 line:-2
are working together
towards a common deadline.


58
00:03:29,843 --> 00:03:31,879 line:-1
Here's a more complex situation:


59
00:03:31,945 --> 00:03:35,949 line:-2
the app is hosting two Audio Units
which are running in other processes.


60
00:03:36,383 --> 00:03:37,751 line:-1
In each render cycle,


61
00:03:37,818 --> 00:03:42,556 line:-2
the app renders the two Audio Units
serially, using two inter-process calls.


62
00:03:43,891 --> 00:03:48,662 line:-2
Here too, all of the realtime rendering
threads are owned by the audio frameworks,


63
00:03:48,729 --> 00:03:50,130 line:-1
so they are colored in green


64
00:03:50,197 --> 00:03:53,367 line:-2
to indicate that they are all
part of the device's workgroup.


65
00:03:53,834 --> 00:03:55,602 line:-1
What we've just seen is the good news.


66
00:03:55,669 --> 00:03:59,640 line:-2
The audio system's realtime threads
are automatically joined to workgroups.


67
00:04:00,340 --> 00:04:04,178 line:-2
Now, let's look at apps which have
their own realtime audio threads.


68
00:04:04,945 --> 00:04:05,946 line:-1
Here we have an app


69
00:04:06,013 --> 00:04:09,616 line:-2
that's running two auxiliary threads
in parallel with the I/O thread.


70
00:04:10,384 --> 00:04:13,487 line:-2
For example, it might be rendering
three complex tracks.


71
00:04:14,054 --> 00:04:17,824 line:-2
It splits the work between
the auxiliary threads and the I/O thread,


72
00:04:17,891 --> 00:04:22,329 line:-2
and the I/O thread waits for the worker
threads and mixes the final result.


73
00:04:22,396 --> 00:04:25,432 line:-2
These threads are in shown in gray
to illustrate a problem:


74
00:04:25,499 --> 00:04:27,267 line:-1
they're not part of the workgroup.


75
00:04:28,235 --> 00:04:31,438 line:-2
They're running with the same deadline
as the threads in the workgroup,


76
00:04:31,505 --> 00:04:33,440 line:-1
but the scheduler doesn't know this.


77
00:04:34,074 --> 00:04:37,010 line:-2
So, the solution is to join these threads
to the workgroup.


78
00:04:37,477 --> 00:04:38,745 line:-1
And we can see how.


79
00:04:40,247 --> 00:04:43,984 line:-2
First, obtain the device's
os_workgroup object.


80
00:04:44,051 --> 00:04:48,322 line:-2
On macOS, you can obtain it directly from
the audio device with the HAL API.


81
00:04:49,323 --> 00:04:50,490 line:-1
On any platform,


82
00:04:50,557 --> 00:04:56,129 line:-2
you can obtain it from the input/output
audio unit, AUHAL, or AURemoteIO,


83
00:04:56,196 --> 00:04:57,698 line:-1
using these properties.


84
00:04:58,131 --> 00:05:00,334 line:-2
Once you've obtained
the device's workgroup,


85
00:05:00,767 --> 00:05:04,238 line:-2
then in your realtime thread,
call os_workgroup_join.


86
00:05:04,872 --> 00:05:08,408 line:-2
This joins the thread to the workgroup
and only has to be done once.


87
00:05:09,376 --> 00:05:11,945 line:-2
You'll also need to call
os_workgroup_leave


88
00:05:12,012 --> 00:05:13,413 line:-1
before your thread ends.


89
00:05:14,014 --> 00:05:16,016 line:-1
The details are in these header files.


90
00:05:17,518 --> 00:05:20,787 line:-2
After you've done this,
then your app's parallel realtime threads


91
00:05:20,854 --> 00:05:22,890 line:-1
are part of the device's workgroup.


92
00:05:22,956 --> 00:05:24,691 line:-1
All the threads are in green.


93
00:05:25,592 --> 00:05:27,594 line:-1
Let's look at a more complex app.


94
00:05:27,661 --> 00:05:31,365 line:-2
It is also running two auxiliary threads,
but they are running asynchronously


95
00:05:31,431 --> 00:05:34,234 line:-2
to the I/O threads,
with different deadlines.


96
00:05:35,102 --> 00:05:38,472 line:-2
Since they have different deadlines
from the device I/O threads,


97
00:05:38,539 --> 00:05:42,242 line:-2
these auxiliary threads
need to be in two additional workgroups.


98
00:05:42,309 --> 00:05:43,544 line:-1
Let's see how.


99
00:05:43,911 --> 00:05:47,781 line:-2
First, instead of obtaining
the device's workgroup as we saw before,


100
00:05:47,848 --> 00:05:51,318 line:-2
create your own workgroup
using AudioWorkIntervalCreate.


101
00:05:52,686 --> 00:05:56,423 line:-2
As before, you need to join
the realtime threads to the workgroup,


102
00:05:56,490 --> 00:06:01,495 line:-2
using os_workgroup_join.
And again, this only has to be done once.


103
00:06:02,429 --> 00:06:04,731 line:-2
You might have multiple threads
in your group,


104
00:06:04,798 --> 00:06:07,734 line:-2
but one is controlling the others.
It's the "master."


105
00:06:08,535 --> 00:06:13,140 line:-2
In this thread, on each work cycle,
call os_workgroup_interval_start.


106
00:06:13,740 --> 00:06:18,111 line:-2
The startTime parameter can be "now,"
as reported by mach_absolute_time.


107
00:06:18,612 --> 00:06:20,347 line:-1
Or it can be in the past,


108
00:06:20,414 --> 00:06:23,417 line:-2
if you know exactly when your work cycle
was scheduled to start,


109
00:06:23,483 --> 00:06:25,419 line:-1
presumably in the recent past.


110
00:06:26,453 --> 00:06:29,122 line:-2
The deadline has to be greater
than the start time.


111
00:06:30,023 --> 00:06:32,192 line:-1
The units are mach_absolute_time.


112
00:06:32,726 --> 00:06:36,396 line:-2
Here, be sure not to assume that
mach_absolute_time are nanoseconds


113
00:06:36,463 --> 00:06:37,831 line:-1
or anything else.


114
00:06:37,898 --> 00:06:43,103 line:-2
Be sure to use mach_timebase_info to get
the clock frequency of mach_absolute_time.


115
00:06:44,271 --> 00:06:48,275 line:-2
Then at the end of each work cycle,
call os_workgroup_interval_finish.


116
00:06:49,576 --> 00:06:52,713 line:0
After you have joined your asynchronous
auxiliary threads to workgroups,


117
00:06:52,779 --> 00:06:54,248 line:0
things look like this.


118
00:06:54,314 --> 00:06:56,183 line:-1
There are three independent workgroups


119
00:06:56,250 --> 00:06:59,119 line:-2
working on separate cadences
with separate deadlines


120
00:07:00,487 --> 00:07:03,023 line:-2
that cover apps
which create realtime threads.


121
00:07:03,757 --> 00:07:06,927 line:-2
Now, let's look at Audio Units
which create realtime threads.


122
00:07:07,794 --> 00:07:10,230 line:-2
The vast majority of Audio Units
don't do this,


123
00:07:10,297 --> 00:07:12,165 line:-2
but there are a few
large and powerful ones


124
00:07:12,232 --> 00:07:15,135 line:-2
that do create
their own extra rendering threads.


125
00:07:15,602 --> 00:07:16,603 line:-1
Here's an example.


126
00:07:16,670 --> 00:07:19,940 line:-2
This Audio Unit is dividing its work
between four threads,


127
00:07:20,007 --> 00:07:22,910 line:-2
three that it has created,
plus one from the host.


128
00:07:24,111 --> 00:07:25,579 line:-1
You can see the problem here:


129
00:07:25,646 --> 00:07:29,416 line:-2
the Audio Unit has realtime threads
that are not part of a workgroup.


130
00:07:29,483 --> 00:07:33,887 line:-2
It's being called by the host
in some unknown thread context.


131
00:07:33,954 --> 00:07:36,690 line:-2
That context could be
the device's I/O thread,


132
00:07:36,757 --> 00:07:39,226 line:-2
or it could be
a non-realtime worker thread.


133
00:07:39,293 --> 00:07:40,827 line:-1
The Audio Unit doesn't know.


134
00:07:41,395 --> 00:07:45,399 line:-2
To solve this, we're introducing
the AURenderContextObserver.


135
00:07:45,999 --> 00:07:51,438 line:-2
This is a block in the audio unit that
gets called before each render request.


136
00:07:51,505 --> 00:07:53,373 line:-1
As the audio unit developer,


137
00:07:53,440 --> 00:07:56,610 line:-2
you implement
this render context observer property


138
00:07:56,677 --> 00:08:00,480 line:-2
to return a block
that receives a context struct.


139
00:08:00,547 --> 00:08:02,950 line:-1
This struct contains an os_workgroup.


140
00:08:06,086 --> 00:08:09,890 line:-2
So, at render time, when you see
that the context's workgroup has changed,


141
00:08:10,357 --> 00:08:13,493 line:-2
you can join your auxiliary
realtime threads to that workgroup,


142
00:08:13,560 --> 00:08:16,797 line:-2
as we saw earlier,
using os_workgroup_join.


143
00:08:18,065 --> 00:08:19,633 line:-1
It's important to be aware here


144
00:08:19,700 --> 00:08:23,370 line:-2
that the workgroup may change
from one render call to the next.


145
00:08:24,671 --> 00:08:27,407 line:-2
After you implement
the render context observer,


146
00:08:27,474 --> 00:08:30,677 line:-2
and you join your realtime threads
to the workgroup it observes,


147
00:08:31,044 --> 00:08:34,548 line:-2
then here too we have all realtime threads
joined to workgroups.


148
00:08:35,048 --> 00:08:36,750 line:-1
It's very important to note here:


149
00:08:36,817 --> 00:08:39,686 line:-2
the system informs Audio Units
of the workgroup


150
00:08:39,753 --> 00:08:41,722 line:-1
using the render context observer.


151
00:08:42,422 --> 00:08:44,925 line:-2
This happens automatically
when the host renders.


152
00:08:44,992 --> 00:08:48,729 line:-2
So, the host should not try to call
the render context observer.


153
00:08:49,096 --> 00:08:51,765 line:-2
Again, the system
handles this automatically.


154
00:08:52,466 --> 00:08:54,768 line:-2
That brings me
to the main point of this talk:


155
00:08:55,335 --> 00:08:57,971 line:-2
all audio threads
should be joined to workgroups.


156
00:08:58,405 --> 00:09:01,441 line:-2
And now we've seen the APIs
you can use to do this.


157
00:09:02,242 --> 00:09:05,846 line:-2
You might be wondering about
non-realtime audio rendering threads.


158
00:09:06,380 --> 00:09:09,983 line:-2
They don't have deadlines,
so they can't be joined to workgroups.


159
00:09:10,684 --> 00:09:13,220 line:-2
If your non-realtime threads
do have deadlines,


160
00:09:13,287 --> 00:09:15,789 line:-2
that might be a reason
to convert them to realtime.


161
00:09:16,323 --> 00:09:19,193 line:-2
But again, measure performance
if you start down this path.


162
00:09:21,295 --> 00:09:23,297 line:-2
If you're creating
parallel worker threads,


163
00:09:23,363 --> 00:09:26,934 line:-2
there is a new API which will recommend
how many threads to create:


164
00:09:27,334 --> 00:09:30,404 line:-2
and that's
os_workgroup_max_parallel_threads.


165
00:09:31,805 --> 00:09:34,341 line:-2
You can't call this
until you know your workgroup,


166
00:09:34,408 --> 00:09:35,843 line:-1
which, if you're an Audio Unit,


167
00:09:35,909 --> 00:09:38,278 line:-2
might not be
until you're rendering in realtime.


168
00:09:40,314 --> 00:09:43,383 line:0
In that case,
when your Audio Unit is initialized,


169
00:09:43,450 --> 00:09:47,421 line:0
then you create as many threads
as there are CPU cores,


170
00:09:47,487 --> 00:09:51,625 line:0
but make a render-time decision to use
only the recommended number of threads.


171
00:09:53,227 --> 00:09:57,664 line:-2
To summarize, here are all the different
kinds of realtime threads we looked at,


172
00:09:57,731 --> 00:10:00,334 line:-2
and how to make sure
they are joined to workgroups.


173
00:10:00,801 --> 00:10:03,804 line:-2
The system frameworks
take care of all the threads they manage.


174
00:10:05,439 --> 00:10:08,108 line:-2
For app threads
that are parallel to the device thread,


175
00:10:08,609 --> 00:10:10,611 line:-1
join them to the device's workgroup.


176
00:10:12,179 --> 00:10:15,115 line:-2
For app threads that are
asynchronous to the device thread,


177
00:10:15,382 --> 00:10:20,053 line:-2
create and manage a workgroup of your own
and join those threads to that workgroup.


178
00:10:21,822 --> 00:10:25,659 line:0
For Audio Unit threads that are
parallel to the host's render requests,


179
00:10:25,726 --> 00:10:27,861 line:0
implement a render context observer,


180
00:10:27,928 --> 00:10:30,631 line:0
and join threads
to the workgroup it observes.


181
00:10:31,498 --> 00:10:33,467 line:-1
We've seen how to improve the performance


182
00:10:33,534 --> 00:10:36,103 line:-2
of your app or plug-in's
audio realtime threads


183
00:10:36,170 --> 00:10:38,005 line:-1
by joining them to audio workgroups.


184
00:10:38,372 --> 00:10:40,107 line:-1
Thank you for your time and attention,


185
00:10:40,174 --> 00:10:43,177 line:-2
and I look forward to seeing
your great music and audio apps.

