1
00:00:03,770 --> 00:00:06,840 line:-1
Hello and welcome to WWDC.


2
00:00:08,675 --> 00:00:10,244 line:0
Hello and welcome.


3
00:00:10,310 --> 00:00:14,014 line:0
My name's Yongjun,
and I'm an engineer on the App Clips team.


4
00:00:14,781 --> 00:00:17,451 line:-1
I'm joined today by my colleague, Luming,


5
00:00:17,518 --> 00:00:21,255 line:-2
to talk about how to streamline
your app clip experience.


6
00:00:21,588 --> 00:00:25,158 line:-2
As you know, the app clip
is a small piece of your app.


7
00:00:25,893 --> 00:00:29,763 line:-2
They're lightweight, delivered on demand
at the moment you need it.


8
00:00:31,031 --> 00:00:36,336 line:-2
They are invoked by URLs that you
have registered as app clip experiences.


9
00:00:37,771 --> 00:00:41,441 line:-2
Users can also easily
get your app during this experience.


10
00:00:42,843 --> 00:00:45,546 line:-1
Today, I will talk about three topics.


11
00:00:46,213 --> 00:00:50,684 line:-2
First, best practices for designing
and building your app clip.


12
00:00:51,618 --> 00:00:56,723 line:-2
Then, I will show an example of how to
streamline transactions in your app clip.


13
00:00:57,591 --> 00:01:00,327 line:-1
Finally, I will share some techniques


14
00:01:00,394 --> 00:01:03,997 line:-2
to help transition users
from app clip to your app.


15
00:01:06,400 --> 00:01:08,302 line:-1
Let's talk best practices.


16
00:01:10,437 --> 00:01:12,406 line:-1
App clips are designed for speed.


17
00:01:13,073 --> 00:01:16,343 line:-2
Interactions with App Clip
needs to be quick and focused.


18
00:01:17,578 --> 00:01:20,380 line:-2
Your app clip should
focus on essential tasks


19
00:01:21,248 --> 00:01:24,618 line:-2
and the named features to what is needed
for the task at hand.


20
00:01:25,719 --> 00:01:29,756 line:-2
For the vast or complex features,
reserve them for your app.


21
00:01:32,526 --> 00:01:36,230 line:-2
When your app clip launches,
it should be usable right away.


22
00:01:36,997 --> 00:01:41,268 line:-2
Include all required assets
for a fast initial experience.


23
00:01:42,402 --> 00:01:44,771 line:-1
Do not include splash screens


24
00:01:44,838 --> 00:01:48,442 line:-2
or make users wait for download
before they can start a task.


25
00:01:52,246 --> 00:01:56,550 line:-2
Creating an account is a complex task
and takes time and effort.


26
00:01:57,451 --> 00:02:01,788 line:-2
Wait to ask people to sign up
until after they have finished the task.


27
00:02:03,724 --> 00:02:08,228 line:-2
When asking user data, request permission
at the moment you need.


28
00:02:08,695 --> 00:02:11,031 line:-1
And clearly state why you need them.


29
00:02:13,500 --> 00:02:17,137 line:-2
When users upgrade to your app,
it replaces the app clip.


30
00:02:18,238 --> 00:02:21,675 line:-2
Your app should provide
the same streamlined experiences


31
00:02:22,109 --> 00:02:23,410 line:-1
that the app clip offers.


32
00:02:24,444 --> 00:02:29,650 line:-2
And make sure that your app clip
has the same name and icon as your app,


33
00:02:30,551 --> 00:02:32,886 line:-2
so the user can have
a consistent experience.


34
00:02:34,688 --> 00:02:37,724 line:0
For more information
about app clip's design,


35
00:02:37,791 --> 00:02:40,761 line:0
please check,
"Design Great App Clips" session.


36
00:02:42,162 --> 00:02:43,797 line:-1
To build an app clip,


37
00:02:43,864 --> 00:02:47,100 line:-2
you'll need to add a new target
in your app's Xcode project.


38
00:02:48,202 --> 00:02:51,104 line:-1
Your app already has assets and classes.


39
00:02:51,171 --> 00:02:53,740 line:-1
Some will be shared with your app clip.


40
00:02:55,776 --> 00:02:59,379 line:-2
Identify all resources
that are required for the experience.


41
00:03:00,047 --> 00:03:02,583 line:-2
Include them
in your app clip Apple bundle.


42
00:03:03,817 --> 00:03:08,455 line:-2
Keep in mind, the smaller your app clip
is, the faster it gets to your users.


43
00:03:09,056 --> 00:03:10,791 line:-1
So only add what you need.


44
00:03:13,293 --> 00:03:16,830 line:-2
For assets that are used
in both your app and app clip,


45
00:03:17,297 --> 00:03:19,266 line:-1
pull them in a shared asset catalog.


46
00:03:20,634 --> 00:03:23,570 line:-2
Organize your classes
and localization strings files


47
00:03:24,071 --> 00:03:27,608 line:-2
such that you can share them
for both your app and app clip.


48
00:03:28,742 --> 00:03:32,045 line:-2
"Sign in with Apple"
is the best way to get a user's account.


49
00:03:33,280 --> 00:03:35,782 line:-2
If your service supports
a federated log-in system


50
00:03:35,849 --> 00:03:37,417 line:-1
that isn't Sign in with Apple,


51
00:03:38,085 --> 00:03:41,822 line:-2
ASWebAuthenticationSession
is a great lightweight solution


52
00:03:42,256 --> 00:03:44,191 line:-1
to authenticate with third-party services.


53
00:03:44,791 --> 00:03:47,060 line:-1
It keeps the user in your app clip,


54
00:03:47,427 --> 00:03:49,696 line:-2
and it doesn't require
switching to an app.


55
00:03:51,698 --> 00:03:54,668 line:-2
For users who already have
an account with your app,


56
00:03:55,269 --> 00:03:58,238 line:-2
you should also offer
username-password log in.


57
00:03:59,706 --> 00:04:04,178 line:-2
App Clip supports Password AutoFill,
which makes logging in really easy.


58
00:04:07,014 --> 00:04:10,350 line:-2
If a user used passwords
to log into the app clip,


59
00:04:11,051 --> 00:04:14,655 line:-2
consider offering Sign in with Apple
upgrade when users get the app.


60
00:04:17,591 --> 00:04:21,695 line:0
To learn about the best way to support
username and password sign-in in your app,


61
00:04:22,362 --> 00:04:24,631 line:0
check out, "What's New in Authentication."


62
00:04:25,566 --> 00:04:28,235 line:0
And to learn about
how to offer Sign in with Apple


63
00:04:28,302 --> 00:04:32,472 line:0
and strong password upgrades,
see, "Securing Accounts with Upgrades


64
00:04:32,539 --> 00:04:35,275 line:0
to Sign in with Apple
and a Strong Password" session.


65
00:04:36,944 --> 00:04:38,445 line:-1
App clips are ephemeral.


66
00:04:38,979 --> 00:04:42,082 line:-2
Your users should try them out
with great confidence


67
00:04:42,149 --> 00:04:44,184 line:-1
that their privacy is very protected.


68
00:04:45,786 --> 00:04:49,089 line:-2
Some sensitive user data
are not available to app clips.


69
00:04:49,723 --> 00:04:53,994 line:-2
They are not essential to a lightweight
experience an app clip offers.


70
00:04:54,294 --> 00:04:58,732 line:-2
And you can always encourage users
to get your app for these functionalities.


71
00:04:59,333 --> 00:05:03,570 line:-2
App clips can request permission
for camera, microphone, and Bluetooth.


72
00:05:04,972 --> 00:05:07,508 line:-2
To preserve the fast
and streamlined experience,


73
00:05:08,008 --> 00:05:11,311 line:-2
we also transfer this data
when the user gets your app,


74
00:05:11,912 --> 00:05:13,914 line:-1
so you don't need to request them again.


75
00:05:14,848 --> 00:05:17,718 line:0
To know more
about app clips and app privacy,


76
00:05:18,218 --> 00:05:21,555 line:0
please check out, "Build Trust
Through Better Privacy" session.


77
00:05:25,692 --> 00:05:29,062 line:0
We use many iOS apps for transactions
in our daily life.


78
00:05:29,530 --> 00:05:32,399 line:-2
A typical transaction
involves multiple steps.


79
00:05:32,900 --> 00:05:34,868 line:-1
Let me walk you through with an example.


80
00:05:35,736 --> 00:05:37,604 line:-1
Let's say I wanted to order a smoothie.


81
00:05:39,006 --> 00:05:44,778 line:-2
I walk into a smoothie store, tap NFC tag
and a food app clip launches.


82
00:05:46,413 --> 00:05:49,550 line:-2
The app clip asks my permission
to get my location


83
00:05:49,616 --> 00:05:51,752 line:-1
to find out which smoothie store I'm at.


84
00:05:55,489 --> 00:05:58,892 line:-2
Next, the app clip
shows the menu for ordering.


85
00:06:00,727 --> 00:06:03,297 line:-1
I select my favorite smoothie and pay.


86
00:06:05,199 --> 00:06:07,634 line:-1
Then, the app clip asks my permission


87
00:06:07,701 --> 00:06:10,637 line:-2
to send a notification
to tell me when my smoothie's ready.


88
00:06:11,839 --> 00:06:16,643 line:-2
Last, this app clip offers to sign up
or sign in to get a discount later.


89
00:06:17,711 --> 00:06:19,346 line:-1
There are quite a few steps here.


90
00:06:19,813 --> 00:06:22,616 line:-2
Let's see how we can improve this...
to this.


91
00:06:24,451 --> 00:06:25,686 line:-1
First, location.


92
00:06:26,420 --> 00:06:30,123 line:-2
Your app clip can be triggered
by physical codes like NFC tags.


93
00:06:31,425 --> 00:06:32,926 line:-1
In our smoothie example,


94
00:06:32,993 --> 00:06:37,664 line:-2
the URL in the NFC tag
tells which smoothie store it is for.


95
00:06:38,632 --> 00:06:41,935 line:-2
With that,
you can get the location of the store,


96
00:06:42,002 --> 00:06:44,438 line:-2
show the right menu
and accept the payment.


97
00:06:45,239 --> 00:06:48,742 line:-2
However, what if the tag
is placed at the wrong store?


98
00:06:49,610 --> 00:06:54,281 line:-2
Or what if someone intentionally placed
a different tag in this store?


99
00:06:54,848 --> 00:06:58,352 line:-2
This could cause confusion
or even lead to fraud.


100
00:06:59,152 --> 00:07:01,421 line:-1
To prevent that, you need to know


101
00:07:01,488 --> 00:07:04,725 line:-2
if the user's actually at the store
when they scanned the tag.


102
00:07:06,493 --> 00:07:08,962 line:-2
To do that,
you need to get the user's location.


103
00:07:09,730 --> 00:07:12,099 line:-2
Then use that
to match the store's location.


104
00:07:14,201 --> 00:07:18,172 line:0
Location confirmation reveals just
enough information to accomplish this.


105
00:07:19,406 --> 00:07:21,475 line:0
You do not need the full location access.


106
00:07:22,976 --> 00:07:25,879 line:0
The user has the control
to allow that in the app clip card.


107
00:07:28,348 --> 00:07:32,052 line:0
When your app clip receives the payload
from a physical code,


108
00:07:32,719 --> 00:07:36,857 line:0
you can ask the system if the payload
is acquired at a specific location,


109
00:07:37,791 --> 00:07:40,427 line:-2
and you will get a binary
yes or no answer.


110
00:07:41,094 --> 00:07:42,496 line:-1
No prompt needed.


111
00:07:43,931 --> 00:07:45,632 line:-1
To enable location confirmation,


112
00:07:46,133 --> 00:07:50,671 line:-2
add NSAppClipRequestLocation-
Confirmation Key to the Info.plist.


113
00:07:52,639 --> 00:07:57,511 line:-2
When your app clip launches,
get the payload from NSUserActivity...


114
00:07:58,712 --> 00:08:01,682 line:-2
then prepare the region
where the code should be acquired


115
00:08:02,449 --> 00:08:04,451 line:-1
with the coordinates and the radius.


116
00:08:04,985 --> 00:08:07,788 line:-1
You can set the radius up to 500 meters.


117
00:08:09,189 --> 00:08:13,160 line:-2
Last,
code confirmedAcquired(in: region) API.


118
00:08:13,794 --> 00:08:15,762 line:-1
The closure will tell you the result.


119
00:08:16,496 --> 00:08:18,165 line:-1
This is location confirmation.


120
00:08:20,467 --> 00:08:21,502 line:-1
Next, payment.


121
00:08:22,069 --> 00:08:26,039 line:-2
Just like in apps, your app clip
can use any payment method.


122
00:08:27,341 --> 00:08:30,444 line:-2
Apple Pay allows people
to make purchases fast and secure.


123
00:08:30,811 --> 00:08:33,080 line:-1
No need to enter credit card numbers.


124
00:08:34,081 --> 00:08:36,750 line:-2
It is a great way
to speed up the payment experience.


125
00:08:39,620 --> 00:08:43,289 line:-2
You can use notifications to connect
to users after they use your app clip.


126
00:08:44,291 --> 00:08:48,328 line:-2
To send the notifications today,
you need to request permission first.


127
00:08:51,231 --> 00:08:54,268 line:0
With app clip notification,
you get permission


128
00:08:54,334 --> 00:08:56,470 line:0
for up to eight hours after each launch.


129
00:08:58,205 --> 00:09:00,674 line:0
User can grant the permission
in the app clip card.


130
00:09:01,675 --> 00:09:04,545 line:0
After it launches,
you can send the notifications,


131
00:09:04,611 --> 00:09:05,846 line:0
no prompt needed.


132
00:09:06,680 --> 00:09:11,618 line:0
At any time when App Clip is running,
you can always ask for regular permission.


133
00:09:14,021 --> 00:09:15,989 line:-1
To enable app clip notification,


134
00:09:16,623 --> 00:09:21,461 line:-2
add NSAppClipRequestEphemeral-
UserNotification key to the Info.plist.


135
00:09:23,597 --> 00:09:27,534 line:-2
To tell if the user has granted permission
in the app clip card,


136
00:09:28,202 --> 00:09:31,605 line:-2
check authorizationStatus
in notifications settings.


137
00:09:33,540 --> 00:09:34,641 line:-1
Last, sign in.


138
00:09:35,542 --> 00:09:39,246 line:-2
Sign in with Apple is a private and
convenient way to create an account


139
00:09:39,313 --> 00:09:41,114 line:-1
or sign in with an existing one.


140
00:09:41,748 --> 00:09:44,718 line:-2
If a user already has
a password best account with you,


141
00:09:45,285 --> 00:09:48,021 line:-2
you can also use
AuthenticationServices API


142
00:09:48,088 --> 00:09:51,992 line:-2
to streamline the sign in
without even showing the log in screen.


143
00:09:53,727 --> 00:09:56,997 line:-2
Now, when you put
all these improvements together...


144
00:09:58,065 --> 00:10:00,267 line:-2
this transaction experience
is much smoother.


145
00:10:02,269 --> 00:10:06,507 line:0
My user has the app clip.
They can easily get your app at any time.


146
00:10:07,474 --> 00:10:10,878 line:-2
iOS provides plenty of opportunities
for them to do it.


147
00:10:14,448 --> 00:10:16,316 line:-1
After your app clip's activated,


148
00:10:16,817 --> 00:10:22,089 line:-2
the App Banner will show your app's name,
icon and App Store link for a moment.


149
00:10:23,123 --> 00:10:25,893 line:-2
Tapping the banner takes the users
to the App Store


150
00:10:25,959 --> 00:10:27,561 line:-1
where they can install your app.


151
00:10:28,762 --> 00:10:32,366 line:-2
Users can also get your app
from App Clips Settings panel.


152
00:10:33,467 --> 00:10:37,437 line:0
Your app clip can embed
StoreKit SKOverlay in a view.


153
00:10:37,938 --> 00:10:40,674 line:-2
We think it works best
if you display the overlay


154
00:10:40,741 --> 00:10:42,409 line:-1
after the user finishes the task.


155
00:10:43,210 --> 00:10:46,747 line:-2
For example, you can put it
next to the payment confirmation page.


156
00:10:48,482 --> 00:10:51,251 line:-1
To add SKOverlay to your app clip,


157
00:10:51,318 --> 00:10:53,353 line:-1
use appStoreOverlay modifier


158
00:10:53,420 --> 00:10:56,156 line:-2
and make a config
with AppClipConfiguration.


159
00:10:57,124 --> 00:10:59,593 line:0
To know more about SKOverlay,


160
00:10:59,660 --> 00:11:02,696 line:0
please refer to
"What's New with In-App Purchase" video.


161
00:11:04,097 --> 00:11:07,501 line:-2
Your app clip may want to pass user data
to your app


162
00:11:07,568 --> 00:11:09,703 line:-1
like Shopping List or Order History.


163
00:11:10,604 --> 00:11:12,973 line:-1
You can do this with a secure app group.


164
00:11:15,576 --> 00:11:19,947 line:-2
This secure app group is only accessible
between your app clip and your app.


165
00:11:21,281 --> 00:11:23,450 line:-1
When a user installs your app,


166
00:11:23,517 --> 00:11:26,386 line:-2
the app group will be transferred
to your app


167
00:11:26,453 --> 00:11:28,422 line:-1
after the app clip is deleted.


168
00:11:31,491 --> 00:11:36,430 line:-2
If the user has already signed in
to the app clip with the app group,


169
00:11:36,496 --> 00:11:38,632 line:-1
they can automatically sign into the app.


170
00:11:39,333 --> 00:11:40,467 line:-1
Here's how to do it.


171
00:11:41,134 --> 00:11:44,972 line:-2
In your app clip,
when users log in with Sign in with Apple,


172
00:11:45,038 --> 00:11:49,743 line:-2
save the user ID in the shared app group
as a file or in a database.


173
00:11:52,779 --> 00:11:54,915 line:-1
After the user upgrades to your app,


174
00:11:54,982 --> 00:11:57,618 line:-2
read the saved user ID
from the App group...


175
00:11:58,785 --> 00:12:03,524 line:-2
then use iOS authorization app ID provider
to verify the user ID.


176
00:12:04,625 --> 00:12:07,594 line:-2
If the user has already signed in
to your app clip,


177
00:12:07,661 --> 00:12:10,264 line:-2
you can seamlessly
sign them into your app.


178
00:12:11,798 --> 00:12:15,302 line:-2
With that, I would like
to hand over to Luming to show you a demo.


179
00:12:15,369 --> 00:12:16,370 line:-1
Luming.


180
00:12:16,870 --> 00:12:21,275 line:-2
Thanks, Yongjun, for your great talk about
streamlining your app clip experience.


181
00:12:21,341 --> 00:12:24,211 line:-2
I'm Luming,
an engineer from the App Clips team,


182
00:12:24,278 --> 00:12:27,981 line:-2
and today, I'll be demoing how to
streamline your App clip experience.


183
00:12:28,749 --> 00:12:31,818 line:-2
Without a streamlined experience,
if you launch an app clip,


184
00:12:31,885 --> 00:12:33,820 line:-1
your users may see something like this.


185
00:12:34,254 --> 00:12:37,691 line:-2
They'll have to decide on the spot
about giving location access


186
00:12:37,758 --> 00:12:39,726 line:-1
as well as notification access.


187
00:12:40,294 --> 00:12:42,462 line:-1
Not exactly a frictionless experience.


188
00:12:43,163 --> 00:12:46,500 line:-2
So let's see how we can streamline
these permission requests.


189
00:12:46,567 --> 00:12:48,969 line:-1
Let's look at notifications first.


190
00:12:49,036 --> 00:12:53,307 line:-2
App clips can request for
eight hours of ephemeral notification


191
00:12:53,373 --> 00:12:55,042 line:-1
without throwing up an alert.


192
00:12:55,676 --> 00:12:58,245 line:-1
I have the Fruta Xcode project open,


193
00:12:58,312 --> 00:13:01,515 line:-2
and let's first look
at the app clip's Info.plist.


194
00:13:02,282 --> 00:13:05,052 line:-1
I've expanded the NSAppClipDictionary,


195
00:13:05,118 --> 00:13:06,887 line:-1
and I'll set the Boolean value


196
00:13:06,954 --> 00:13:11,558 line:-2
of NSAppClipRequestEphemeral-
UserNotification to "Yes."


197
00:13:12,526 --> 00:13:15,462 line:-1
Now, I can come back to FrutaClip.swift,


198
00:13:15,529 --> 00:13:19,333 line:-2
and before we request
for notification authorization,


199
00:13:19,399 --> 00:13:22,669 line:-2
we can check
if our app clip has already been granted


200
00:13:22,736 --> 00:13:25,172 line:-1
ephemeral notification status.


201
00:13:27,074 --> 00:13:29,376 line:-1
[typing, mouse click]


202
00:13:29,443 --> 00:13:34,214 line:-2
This is a new value
introduced in iOS 14 for App Clips.


203
00:13:34,581 --> 00:13:38,552 line:-2
If we have already acquired
ephemeral notification status,


204
00:13:38,619 --> 00:13:41,021 line:-2
there's no need
to prompt the user for an alert.


205
00:13:41,488 --> 00:13:43,790 line:-2
Let's build and install the clip
on the device.


206
00:13:49,296 --> 00:13:51,532 line:-1
While there is still a location prompt,


207
00:13:51,598 --> 00:13:54,268 line:-2
there is no more
notification permission prompts.


208
00:13:54,701 --> 00:13:56,069 line:-1
Let's verify this.


209
00:13:56,670 --> 00:14:00,307 line:-2
If I go to Settings and look
at the notification setting for Fruta,


210
00:14:00,374 --> 00:14:03,477 line:-2
you can see that there is
"Will turn off in 8 hours."


211
00:14:03,944 --> 00:14:06,680 line:-2
This indicates
the Fruta App Clip has been given


212
00:14:06,747 --> 00:14:09,183 line:-1
an eight-hour ephemeral notification,


213
00:14:09,249 --> 00:14:11,351 line:-1
tied to physical invocations.


214
00:14:12,452 --> 00:14:13,854 line:-1
What a coincidence.


215
00:14:13,921 --> 00:14:15,489 line:-1
Looks like my smoothie's ready,


216
00:14:15,556 --> 00:14:18,458 line:-2
and ephemeral notifications
are also confirmed working.


217
00:14:18,959 --> 00:14:23,530 line:-2
Next up, since app clips can request
for a one-time location confirmation,


218
00:14:23,597 --> 00:14:28,235 line:-2
when launched through physical invocation
methods, such as NFC or QR code,


219
00:14:28,302 --> 00:14:30,037 line:-1
let's take a look at setting it up.


220
00:14:30,437 --> 00:14:33,340 line:-2
Just like setting up
ephemeral notifications


221
00:14:33,407 --> 00:14:36,877 line:-2
under the NSAppClipDictionary
in Info.plist,


222
00:14:36,944 --> 00:14:40,814 line:-2
what we need to do for location
confirmation is also very similar.


223
00:14:41,281 --> 00:14:43,917 line:-2
This time,
I'll instead set the Boolean value


224
00:14:43,984 --> 00:14:47,754 line:-2
of NSAppClipRequest-
LocationConfirmation to "Yes."


225
00:14:48,355 --> 00:14:51,291 line:-1
Then, we can go back to FrutaClip.swift.


226
00:14:52,159 --> 00:14:56,864 line:-2
I can remove our existing code
to explicitly request for location updates


227
00:14:56,930 --> 00:14:58,966 line:-1
using Core Location APIs.


228
00:15:00,033 --> 00:15:02,836 line:-2
Since I have already linked against
AppClip.framework


229
00:15:02,903 --> 00:15:05,973 line:-2
in our project settings,
I'll import the framework here.


230
00:15:07,241 --> 00:15:12,246 line:-2
Next, in handleUserActivity,
I'll get the app clip activation payload


231
00:15:12,312 --> 00:15:15,849 line:-2
and the location latitude and longitude
to verify from the URL.


232
00:15:18,919 --> 00:15:22,623 line:-2
After this, I'll instantiate a region
I would like to confirm.


233
00:15:25,292 --> 00:15:28,762 line:0
Then, I'll call confirmAcquired-
(in: region) on the payload.


234
00:15:31,532 --> 00:15:36,069 line:-2
After this, I'll only allow Apple Pay
if the user is within that region.


235
00:15:39,506 --> 00:15:41,275 line:-1
I'll Build and Run the app clip again.


236
00:15:44,945 --> 00:15:46,580 line:-1
At Fruta headquarters,


237
00:15:46,647 --> 00:15:50,250 line:-2
the QR code shipment team
has mixed up QR code printouts


238
00:15:50,317 --> 00:15:55,189 line:-2
for Fruta Cupertino with QR code printouts
from Fruta San Francisco.


239
00:15:55,255 --> 00:15:58,725 line:-2
Without location confirmation,
unsuspecting customers


240
00:15:58,792 --> 00:16:02,062 line:-2
may end up paying
for someone else's smoothie by mistake.


241
00:16:02,129 --> 00:16:06,266 line:-2
The good thing here
is location confirmation has us covered.


242
00:16:06,333 --> 00:16:11,338 line:-2
Let's see how location confirmation
protects you and your customers in action.


243
00:16:11,405 --> 00:16:14,041 line:-1
I am at Fruta Cupertino right now,


244
00:16:14,107 --> 00:16:18,178 line:-2
and I'll scan this QR code
that belongs to Fruta San Francisco.


245
00:16:19,880 --> 00:16:20,881 line:-1
[beeps]


246
00:16:20,948 --> 00:16:25,152 line:-2
Now, if I launched the app clip
then try to place an order,


247
00:16:25,219 --> 00:16:28,255 line:-2
you will see
that location confirmation is working,


248
00:16:28,322 --> 00:16:30,891 line:-2
and I am no longer allowed
to pay for smoothies


249
00:16:30,958 --> 00:16:34,962 line:-2
since I am not at San Francisco
where the Fruta shop is located at.


250
00:16:36,029 --> 00:16:38,031 line:-1
Now, let's go back to Xcode


251
00:16:38,098 --> 00:16:43,604 line:-2
and use Xcode to simulate our device
as if it's in the center of San Francisco.


252
00:16:43,670 --> 00:16:46,740 line:-2
We really are traveling
at the speed of light


253
00:16:46,807 --> 00:16:50,010 line:-2
and teleportation technologies
have come a long way.


254
00:16:50,077 --> 00:16:52,412 line:-1
Let's scan the same QR code again.


255
00:16:54,481 --> 00:16:55,582 line:-1
[beeps]


256
00:16:56,950 --> 00:16:59,152 line:0
This time, if I open the app clip,


257
00:16:59,219 --> 00:17:01,388 line:0
I can proceed through the payment
as usual.


258
00:17:01,455 --> 00:17:02,456 line:0
[phone dings]


259
00:17:03,390 --> 00:17:04,391 line:-1
Finally,


260
00:17:04,458 --> 00:17:08,060 line:-2
let's look at migrating credentials
from the app clip to the full app.


261
00:17:08,127 --> 00:17:10,864 line:-2
As my colleague, Yongjun,
has explained in the talk,


262
00:17:10,931 --> 00:17:13,567 line:-2
I have already set up
a secure group container,


263
00:17:13,634 --> 00:17:15,801 line:-1
shared between the app and the app clip.


264
00:17:16,537 --> 00:17:18,805 line:-1
I'll open OrderPlacedView.swift.


265
00:17:20,406 --> 00:17:22,342 line:-1
And if Sign in with Apple has succeeded,


266
00:17:22,409 --> 00:17:25,746 line:-2
we write the authorization credential
into the group container.


267
00:17:29,616 --> 00:17:32,753 line:-2
For users to be easily able
to upgrade to the full app,


268
00:17:32,819 --> 00:17:36,823 line:-2
this is also the perfect opportunity
to configure a StoreKit overlay.


269
00:17:38,859 --> 00:17:40,327 line:-1
[typing]


270
00:17:40,394 --> 00:17:44,631 line:-2
And also show it right after
Sign in with Apple has succeeded,


271
00:17:44,698 --> 00:17:46,934 line:-1
and your user has completed a transaction.


272
00:17:47,501 --> 00:17:49,703 line:-1
Then, when we first launch the full app,


273
00:17:49,770 --> 00:17:54,141 line:-2
we can add some code to migrate
the credential over in FrutaModel.swift.


274
00:18:00,013 --> 00:18:02,950 line:-2
And I'll migrate
the account information over


275
00:18:03,016 --> 00:18:05,152 line:-2
only if we're building,
not for the app clip,


276
00:18:05,219 --> 00:18:06,587 line:-1
but for the main app.


277
00:18:06,653 --> 00:18:09,189 line:-2
We'll read the saved user ID
from the group container,


278
00:18:09,256 --> 00:18:13,026 line:-2
instantiate
a new ASAuthorizationAppleIDProvider


279
00:18:13,093 --> 00:18:14,828 line:-1
and get its credential state.


280
00:18:15,762 --> 00:18:17,030 line:-1
Let's run the clip again.


281
00:18:22,069 --> 00:18:23,770 line:-1
This time, I'll place an order...


282
00:18:26,106 --> 00:18:27,341 line:-1
[dings]


283
00:18:33,413 --> 00:18:36,383 line:-2
...and when the order is ready,
I'll Sign in with Apple.


284
00:18:44,124 --> 00:18:47,895 line:-2
For your users, this is
a great opportunity to get your full app


285
00:18:47,961 --> 00:18:51,298 line:-2
and have their log in information
automatically migrated over.


286
00:18:51,798 --> 00:18:56,303 line:0
So as we have added this UI SKOverlay,
as Yongjun has explained earlier,


287
00:18:56,370 --> 00:18:57,604 line:0
we've got just that.


288
00:18:58,872 --> 00:19:02,676 line:-2
Since we have just made changes to our app
to handle account migration,


289
00:19:02,743 --> 00:19:05,012 line:-2
which hasn't been submitted
to the App Store yet,


290
00:19:05,078 --> 00:19:07,881 line:-2
let's build and run the app
to simulate the full app upgrade.


291
00:19:08,615 --> 00:19:10,384 line:-1
In the target scheme selection,


292
00:19:10,450 --> 00:19:13,787 line:-2
I'll choose the full app
and build and run it on my device.


293
00:19:18,592 --> 00:19:21,528 line:-2
As you can see,
we're automatically logged in,


294
00:19:21,595 --> 00:19:24,598 line:-2
and all my rewards are right there
waiting for me.


295
00:19:25,098 --> 00:19:27,968 line:-2
So you've seen how to set up
ephemeral notification


296
00:19:28,035 --> 00:19:30,270 line:-1
and one-time location confirmation,


297
00:19:30,337 --> 00:19:34,107 line:-2
as well as migrating user data
from the app clip to the full app.


298
00:19:35,008 --> 00:19:37,911 line:-2
That's my demo of
"Streamlining Your App Clip Experience."


299
00:19:38,412 --> 00:19:39,880 line:-1
Back to you, Yongjun.


300
00:19:40,347 --> 00:19:41,615 line:-1
Thank you, Luming.


301
00:19:41,682 --> 00:19:44,551 line:-2
It's great!
I learned how to use location confirmation


302
00:19:44,618 --> 00:19:46,620 line:-1
and app clip notification.


303
00:19:47,154 --> 00:19:49,056 line:-1
To recap, in this video,


304
00:19:49,122 --> 00:19:53,193 line:-2
we talked about best practices
for designing and building app clips.


305
00:19:53,794 --> 00:19:57,731 line:-2
Then we covered how to
streamline transactions in your app clip.


306
00:19:58,232 --> 00:20:02,903 line:-2
Last, we learned some ideas to help users
transition to your app.


307
00:20:03,237 --> 00:20:06,306 line:-1
Thanks, and I hope you have a great WWDC.

