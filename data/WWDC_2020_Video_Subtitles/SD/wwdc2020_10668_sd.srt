1
00:00:03,937 --> 00:00:07,241 line:-1
Hello and welcome to WWDC.


2
00:00:08,709 --> 00:00:11,812 line:-2
Hello and welcome to the session
"Meet Nearby Interaction."


3
00:00:11,879 --> 00:00:15,249 line:-2
My name is Yagil, and I'm an engineer
from the Location team here at Apple.


4
00:00:15,816 --> 00:00:17,818 line:-1
Today we will talk about how to build


5
00:00:17,885 --> 00:00:20,487 line:-2
a completely new class
of user interactions


6
00:00:20,554 --> 00:00:23,557 line:-2
that are based on spatial awareness
in iOS.


7
00:00:23,924 --> 00:00:25,792 line:-1
Spatial awareness, in essence,


8
00:00:25,859 --> 00:00:28,395 line:-2
means understanding
the physical world around you.


9
00:00:29,963 --> 00:00:33,000 line:-2
Such understanding in a device
you're holding in your hand


10
00:00:33,066 --> 00:00:36,470 line:-2
can translate into fluid interactions
with the environment.


11
00:00:38,505 --> 00:00:40,741 line:-1
This is AirDrop in iOS 13.


12
00:00:41,508 --> 00:00:43,710 line:-2
The top selection
that I'm highlighting here


13
00:00:43,777 --> 00:00:45,946 line:-1
uses spatial sensing technologies


14
00:00:46,013 --> 00:00:48,649 line:-2
available for the first time
in the iPhone 11.


15
00:00:49,216 --> 00:00:52,986 line:-2
The user can orient their device
toward someone else's device


16
00:00:53,053 --> 00:00:55,189 line:-1
to give a strong hint to the share sheet


17
00:00:55,255 --> 00:00:57,791 line:-2
for presenting
the most relevant sharing selection.


18
00:00:59,493 --> 00:01:01,995 line:-1
This sort of high-fidelity interactivity


19
00:01:02,062 --> 00:01:05,399 line:-2
is only possible
thanks to the Apple-designed U1 chip.


20
00:01:07,067 --> 00:01:11,238 line:-2
We wanted to empower you to use
such capabilities in your application.


21
00:01:11,672 --> 00:01:15,742 line:-2
So today, we are introducing
the Nearby Interaction framework,


22
00:01:15,809 --> 00:01:21,114 line:-2
a powerful yet easy-to-use interface
to spatial awareness in iOS.


23
00:01:21,515 --> 00:01:25,385 line:-2
Let's start by talking about
user control and transparency.


24
00:01:25,886 --> 00:01:28,956 line:-2
Say your app wants to run
a Nearby Interaction session


25
00:01:29,022 --> 00:01:30,524 line:-1
with another user's device.


26
00:01:31,191 --> 00:01:33,160 line:-1
The first thing the system will do


27
00:01:33,227 --> 00:01:35,896 line:-2
is present a permission prompt
to both users.


28
00:01:37,030 --> 00:01:39,633 line:-2
The user can choose between
not allowing your app


29
00:01:39,700 --> 00:01:41,835 line:-1
to interact with a nearby device,


30
00:01:41,902 --> 00:01:45,005 line:-1
or granting it a one-time permission


31
00:01:45,072 --> 00:01:47,908 line:-2
that remains in effect
until your app is exited.


32
00:01:49,076 --> 00:01:52,679 line:-2
If users on both sides
choose to grant permission,


33
00:01:52,746 --> 00:01:56,717 line:-2
their devices can start to understand
how far apart they are


34
00:01:56,783 --> 00:01:58,352 line:-1
and in which relative direction.


35
00:02:00,888 --> 00:02:06,093 line:-2
This kind of rich spatial information
enables you to create user experiences


36
00:02:06,159 --> 00:02:10,430 line:-2
that are more natural and more intuitive
in your application.


37
00:02:10,497 --> 00:02:13,667 line:-2
Nearby Interaction
will be available to your apps


38
00:02:13,734 --> 00:02:17,004 line:-1
on U1-equipped devices running iOS 14.


39
00:02:18,672 --> 00:02:20,340 line:-1
Here's what we'll cover today.


40
00:02:21,074 --> 00:02:24,978 line:-2
I will talk about spatial awareness in iOS
with Nearby Interaction.


41
00:02:25,045 --> 00:02:27,314 line:-1
Then I will take you through what it takes


42
00:02:27,381 --> 00:02:30,250 line:-2
to start streaming
relative position updates.


43
00:02:30,317 --> 00:02:34,188 line:-2
And I'll close with some best practices
for you to adopt in your application.


44
00:02:34,655 --> 00:02:35,989 line:-1
So let's jump right in.


45
00:02:37,691 --> 00:02:41,428 line:-2
Nearby Interaction provides your app
two main types of output:


46
00:02:41,495 --> 00:02:44,031 line:-1
a measurement of distance between devices,


47
00:02:44,097 --> 00:02:47,334 line:-2
and a measurement of relative direction
from one to the other.


48
00:02:47,801 --> 00:02:51,138 line:-2
So when your app is running
a Nearby Interaction session,


49
00:02:51,205 --> 00:02:54,341 line:0
it is able to get
a continuous stream of updates


50
00:02:54,408 --> 00:02:57,644 line:0
containing distance
and direction information.


51
00:02:58,278 --> 00:03:01,582 line:0
As this slide shows,
these updates are bi-directional,


52
00:03:01,648 --> 00:03:03,784 line:-1
and both sides of the session


53
00:03:03,851 --> 00:03:07,487 line:-2
are learning about each other's
relative position simultaneously.


54
00:03:08,121 --> 00:03:11,258 line:-2
Your app is not limited
to interacting with just one device.


55
00:03:11,658 --> 00:03:15,095 line:-2
Each device can run several sessions
at the same time,


56
00:03:15,162 --> 00:03:17,531 line:-1
each session with one other peer.


57
00:03:18,198 --> 00:03:22,369 line:-2
In this graphic, I'm showing four devices
interacting with one another


58
00:03:22,436 --> 00:03:24,671 line:-2
by each running three sessions
in parallel.


59
00:03:26,340 --> 00:03:28,976 line:-2
Let's talk about the interface
for making this happen.


60
00:03:29,810 --> 00:03:32,779 line:-2
You start with creating
a Nearby Interaction session object.


61
00:03:33,480 --> 00:03:36,617 line:-2
All Nearby Interactions
are encapsulated in sessions.


62
00:03:37,217 --> 00:03:41,388 line:-2
Similar to patterns in other
Apple frameworks such as ARKit,


63
00:03:41,455 --> 00:03:43,223 line:-1
you provide your session object


64
00:03:43,290 --> 00:03:45,592 line:-2
a configuration
you would like it to run with.


65
00:03:46,326 --> 00:03:49,496 line:-2
So let's say that there are
two or more users running your app,


66
00:03:49,563 --> 00:03:53,333 line:-2
and they want to interact with one another
in some spatial manner.


67
00:03:53,400 --> 00:03:55,068 line:-1
Before this can happen,


68
00:03:55,135 --> 00:03:58,472 line:-2
your app needs to let the system know,
on both sides,


69
00:03:58,539 --> 00:04:01,975 line:-2
how to identify the other device
when it is nearby.


70
00:04:03,110 --> 00:04:05,846 line:-1
Peer discovery is a key concept.


71
00:04:05,913 --> 00:04:10,083 line:-2
Devices can discover each other
in a privacy-preserving manner


72
00:04:10,150 --> 00:04:13,320 line:-2
by using something
we call a discovery token.


73
00:04:14,254 --> 00:04:19,192 line:-2
A discovery token is a randomly generated
identifier for a given device


74
00:04:19,259 --> 00:04:21,461 line:-2
in a particular
Nearby Interaction session.


75
00:04:22,863 --> 00:04:27,201 line:-2
The discovery token has a limited
time period for which it can be used,


76
00:04:27,267 --> 00:04:31,805 line:-2
and that time period is exactly as long
as the session itself,


77
00:04:31,872 --> 00:04:36,176 line:-2
meaning that if you invalidate the session
or if the user exits your app,


78
00:04:36,243 --> 00:04:39,646 line:-2
any session and its associated token
get invalidated.


79
00:04:40,614 --> 00:04:42,850 line:0
The token is generated by the system,


80
00:04:42,916 --> 00:04:46,520 line:0
and you receive it in your application
through the session object.


81
00:04:46,587 --> 00:04:50,824 line:0
Each session you create has its own
unique associated discovery token.


82
00:04:51,425 --> 00:04:55,462 line:0
Finally, your app needs to copy
the discovery token


83
00:04:55,529 --> 00:04:57,231 line:0
from the session object


84
00:04:57,297 --> 00:05:00,701 line:0
and then share it between users
that want to interact.


85
00:05:01,702 --> 00:05:04,705 line:-2
Let's go into a little bit more detail
about what that means.


86
00:05:05,973 --> 00:05:09,142 line:-2
Let's say that your app is running
on both of these devices,


87
00:05:09,209 --> 00:05:11,778 line:-2
and that your app
has some networking layer


88
00:05:11,845 --> 00:05:14,281 line:-2
over which the devices
can talk to one another.


89
00:05:14,715 --> 00:05:16,483 line:-1
Use your networking layer


90
00:05:16,550 --> 00:05:20,020 line:-2
to send a discovery token
from one device to the other,


91
00:05:20,087 --> 00:05:22,556 line:-1
and do exactly the same on the other side.


92
00:05:23,390 --> 00:05:24,424 line:-1
How do you do this?


93
00:05:25,125 --> 00:05:29,496 line:-2
The discovery token type
conforms to the NSSecureCoding protocol,


94
00:05:29,563 --> 00:05:33,934 line:-2
which means you can easily encode it
and then shuttle it over


95
00:05:34,001 --> 00:05:37,471 line:-2
using whatever transport technology
is available to your app.


96
00:05:38,205 --> 00:05:41,975 line:-2
For example, you can use
Apple's MultipeerConnectivity framework,


97
00:05:42,042 --> 00:05:44,878 line:-2
or, if applicable to your app,
via the cloud.


98
00:05:46,480 --> 00:05:48,749 line:-1
Coming back to the block diagram.


99
00:05:48,815 --> 00:05:52,986 line:-2
The discovery token your app exchanged
goes into the session configuration,


100
00:05:53,053 --> 00:05:57,224 line:-2
and the configuration is provided
to the session via the "run" method.


101
00:05:59,126 --> 00:06:00,594 line:-1
Let's jump into the code.


102
00:06:02,029 --> 00:06:03,931 line:-1
This short code snippet here


103
00:06:03,997 --> 00:06:07,301 line:-2
shows you all you need to do
to get a session going in your app.


104
00:06:08,101 --> 00:06:10,470 line:-1
First, create a session object.


105
00:06:10,537 --> 00:06:14,474 line:-2
Behind the scenes, this call allocates
all the needed resources


106
00:06:14,541 --> 00:06:17,544 line:-2
for running a session,
including a discovery token.


107
00:06:18,745 --> 00:06:22,182 line:-2
Next, to be able to receive callbacks
from the system,


108
00:06:22,249 --> 00:06:23,717 line:-1
set the session's delegate.


109
00:06:25,285 --> 00:06:29,556 line:-2
The next step is exchanging
the session-specific discovery token.


110
00:06:29,623 --> 00:06:32,759 line:-2
This needs to be done
over your app's networking layer.


111
00:06:33,427 --> 00:06:37,998 line:-2
When the token exchange step is complete,
proceed to create a session configuration.


112
00:06:38,065 --> 00:06:41,001 line:-2
And finally,
run the session with the configuration.


113
00:06:42,269 --> 00:06:45,072 line:-2
Let's keep building this down
to match the code.


114
00:06:45,906 --> 00:06:48,475 line:-2
The session takes a delegate
to provide updates to,


115
00:06:48,542 --> 00:06:50,043 line:-1
and after calling "run,"


116
00:06:50,110 --> 00:06:53,413 line:0
your delegate starts getting updates
about nearby objects.


117
00:06:54,047 --> 00:06:56,884 line:0
That's the basic structure
of a Nearby Interaction session.


118
00:06:58,452 --> 00:06:59,586 line:-1
Time for a demo.


119
00:06:59,653 --> 00:07:03,223 line:-2
Let's see a fun little app
that makes use of distance and direction:


120
00:07:04,258 --> 00:07:05,392 line:-1
Monkey Time.


121
00:07:06,593 --> 00:07:08,595 line:-1
I have an app here


122
00:07:08,662 --> 00:07:12,165 line:-2
that is also running on the phone
behind me on the table over there,


123
00:07:12,232 --> 00:07:13,967 line:-1
and I already started the session.


124
00:07:14,034 --> 00:07:15,636 line:-1
Let's see what's on the screen.


125
00:07:16,336 --> 00:07:20,307 line:-2
We see a measurement distance at the top,
and you see it's updating.


126
00:07:20,374 --> 00:07:24,344 line:-2
And we also have our little friend,
the monkey here,


127
00:07:24,411 --> 00:07:26,313 line:-1
and he's covering his eyes.


128
00:07:26,713 --> 00:07:30,017 line:-2
So I'm going to head over
towards the other phone


129
00:07:30,083 --> 00:07:31,685 line:-1
and see what's gonna happen.


130
00:07:48,735 --> 00:07:52,639 line:-2
All right. I went through
a lot of new stuff, so let's recap.


131
00:07:52,706 --> 00:07:56,143 line:-2
To run a session, first create
a session object for each peer


132
00:07:56,210 --> 00:07:58,212 line:-1
and exchange tokens with that peer.


133
00:07:59,213 --> 00:08:03,350 line:-2
Once discovery tokens are exchanged,
create a session configuration.


134
00:08:03,984 --> 00:08:07,888 line:-2
And to start streaming updates,
run the session with the configuration.


135
00:08:08,355 --> 00:08:09,990 line:0
You can also pause a session


136
00:08:10,057 --> 00:08:13,026 line:0
and resume it later
by calling the "run" method again.


137
00:08:13,727 --> 00:08:15,629 line:-1
I mentioned that after calling "run,"


138
00:08:15,696 --> 00:08:18,065 line:-2
you will start getting updates
from the session.


139
00:08:18,565 --> 00:08:21,368 line:-2
With that in mind,
let's go into a little more detail


140
00:08:21,435 --> 00:08:24,304 line:-2
about the delegate callbacks
you can implement in your app.


141
00:08:26,106 --> 00:08:28,542 line:-1
This is the session delegate protocol.


142
00:08:28,609 --> 00:08:31,411 line:-2
Your app receives updates
about nearby devices


143
00:08:31,478 --> 00:08:34,014 line:-1
by implementing the didUpdate callback.


144
00:08:34,681 --> 00:08:36,683 line:-2
There are a few more
interesting methods here.


145
00:08:37,650 --> 00:08:39,486 line:-1
The system will notify your app


146
00:08:39,553 --> 00:08:42,556 line:-2
whenever it is no longer interacting
with a nearby object.


147
00:08:43,056 --> 00:08:46,393 line:-2
This notification comes
with a reason associated with it.


148
00:08:47,327 --> 00:08:51,365 line:-2
The two reasons you can expect
are "timeout" or "peerEnded."


149
00:08:51,932 --> 00:08:53,967 line:-1
They are different in some important ways.


150
00:08:54,668 --> 00:08:57,905 line:-2
Timeout means that
there wasn't any activity in the session


151
00:08:57,971 --> 00:08:59,673 line:-1
for over some time period.


152
00:09:00,140 --> 00:09:03,577 line:-2
This may happen, for example,
if the devices are too far apart.


153
00:09:04,478 --> 00:09:06,513 line:-1
PeerEnded, on the other hand,


154
00:09:06,580 --> 00:09:10,117 line:-2
means that the session was
explicitly invalidated on the other end.


155
00:09:10,751 --> 00:09:12,419 line:-1
A word of caution here.


156
00:09:12,486 --> 00:09:15,656 line:-2
This notification is delivered
on a best-effort basis


157
00:09:15,722 --> 00:09:17,624 line:-1
and may not always be received.


158
00:09:18,592 --> 00:09:20,894 line:-2
Those were the nearby object
removal reasons.


159
00:09:21,428 --> 00:09:25,399 line:-2
The final three delegate callbacks
have to do with the session life cycle.


160
00:09:25,999 --> 00:09:28,969 line:-2
Whenever there are conditions
preventing your session from running,


161
00:09:29,036 --> 00:09:31,905 line:-2
your delegate will get
a suspension notification.


162
00:09:33,140 --> 00:09:35,542 line:-2
The session will be suspended,
for example,


163
00:09:35,609 --> 00:09:37,878 line:-2
when your app is no longer
in the foreground.


164
00:09:38,412 --> 00:09:41,481 line:-2
You need to wait for a notification
that the suspension ended


165
00:09:41,548 --> 00:09:43,383 line:-1
before being able to use it again.


166
00:09:44,518 --> 00:09:47,154 line:-2
When you finally get a callback
that the suspension ended,


167
00:09:47,221 --> 00:09:49,590 line:-2
your session
will not resume automatically.


168
00:09:50,023 --> 00:09:54,127 line:-2
This is to allow you to decide what to do
with the session at this point.


169
00:09:54,194 --> 00:09:57,798 line:-2
If you want to resume the session,
you can call "run" on both sides,


170
00:09:57,865 --> 00:10:00,300 line:-2
just like you did
when you first started the session,


171
00:10:00,367 --> 00:10:02,970 line:-2
but this time, there's no need
to exchange discovery tokens.


172
00:10:04,438 --> 00:10:07,708 line:0
Last but not least
is the sessionDidInvalidate callback,


173
00:10:07,774 --> 00:10:10,911 line:0
which notifies your app
about session invalidation.


174
00:10:11,778 --> 00:10:14,848 line:-2
The session will be invalidated
with an associated error code


175
00:10:14,915 --> 00:10:17,985 line:-2
upon certain error conditions
or resource constraints.


176
00:10:18,752 --> 00:10:21,288 line:-2
Sessions that are invalidated
cannot be run again,


177
00:10:21,355 --> 00:10:24,157 line:-2
and their associated tokens
cannot be used anymore.


178
00:10:24,858 --> 00:10:28,428 line:-2
To restart interaction,
you'll need to create a new session


179
00:10:28,495 --> 00:10:30,364 line:-1
and re-exchange discovery tokens.


180
00:10:31,632 --> 00:10:33,367 line:-2
These were the different
delegate callbacks


181
00:10:33,433 --> 00:10:35,235 line:-1
your app might get from the system.


182
00:10:36,436 --> 00:10:38,105 line:-1
Back to the full diagram.


183
00:10:38,172 --> 00:10:40,741 line:-1
This is illustrating a single session.


184
00:10:40,807 --> 00:10:44,011 line:-2
I mentioned that your app
can run several simultaneous sessions.


185
00:10:44,745 --> 00:10:47,681 line:-2
This is what it would look like
with multiple sessions.


186
00:10:48,615 --> 00:10:50,918 line:-1
You create a session for each peer,


187
00:10:50,984 --> 00:10:55,088 line:-2
and you can re-use other parts of your app
whenever it makes sense.


188
00:10:55,989 --> 00:11:00,127 line:-2
For example, here, I'm using
the same delegate for all sessions.


189
00:11:01,728 --> 00:11:05,132 line:-2
Maintaining the principle
of "one session for one peer"


190
00:11:05,199 --> 00:11:08,202 line:-2
makes managing multiple sessions
straightforward.


191
00:11:08,268 --> 00:11:11,004 line:-2
You can interact
with multiple nearby devices


192
00:11:11,071 --> 00:11:13,607 line:-2
by creating an interaction session
for each one.


193
00:11:13,674 --> 00:11:16,443 line:-2
You can think about it
like a conversation with that device.


194
00:11:16,910 --> 00:11:20,247 line:-2
We recommend storing sessions
in a data structure like a dictionary


195
00:11:20,314 --> 00:11:23,450 line:-2
in order to map your app's notion
of peer users


196
00:11:23,517 --> 00:11:25,652 line:-2
to their respective
Nearby Interaction sessions.


197
00:11:27,054 --> 00:11:30,257 line:-2
All right. You've constructed and run
a session or two,


198
00:11:30,324 --> 00:11:33,026 line:-2
and you start getting updates
about nearby objects.


199
00:11:33,727 --> 00:11:36,330 line:-2
Now I'll dive into
what nearby objects contain


200
00:11:36,396 --> 00:11:38,532 line:-2
and how you can use them
in your application.


201
00:11:39,600 --> 00:11:43,003 line:-2
Each nearby object
comes with three properties.


202
00:11:43,770 --> 00:11:47,608 line:-2
A discovery token that you provided
to the session in the configuration.


203
00:11:47,674 --> 00:11:50,978 line:-2
This property is here to allow you
to tie back these updates


204
00:11:51,044 --> 00:11:54,681 line:-2
to the user from which
you received the token in the first place.


205
00:11:55,516 --> 00:11:57,084 line:-1
The next property is distance.


206
00:11:57,150 --> 00:11:59,586 line:-2
It contains a distance measurement
in meters,


207
00:11:59,653 --> 00:12:02,489 line:-2
indicating how far apart
the two devices are.


208
00:12:03,056 --> 00:12:05,492 line:-1
And the final property is direction.


209
00:12:05,559 --> 00:12:08,462 line:-2
It contains
a three-dimensional unit vector


210
00:12:08,529 --> 00:12:12,199 line:-2
pointing at the other device,
relative to the local device itself.


211
00:12:13,534 --> 00:12:15,569 line:-1
This is what it looks like in code.


212
00:12:15,636 --> 00:12:18,772 line:-2
A discovery token
identifying this nearby object,


213
00:12:18,839 --> 00:12:22,176 line:-2
a distance measurement in meters
between you and the object,


214
00:12:22,242 --> 00:12:25,946 line:-2
and a vector expressing
the relative direction to the object.


215
00:12:26,680 --> 00:12:28,182 line:-1
I'd like to call your attention


216
00:12:28,248 --> 00:12:31,552 line:-2
to the fact that the distance
and direction properties are nullable.


217
00:12:31,618 --> 00:12:33,120 line:-1
This is an excellent segue


218
00:12:33,187 --> 00:12:35,822 line:-2
to some best practices
we'd like you to keep in mind.


219
00:12:36,557 --> 00:12:39,560 line:-1
First, always verify hardware support.


220
00:12:40,460 --> 00:12:42,596 line:-1
Choose a strategic place in your app


221
00:12:42,663 --> 00:12:45,032 line:-2
to check whether Nearby Interaction
is supported.


222
00:12:45,599 --> 00:12:48,869 line:-2
Make sure to fall back to a different
user experience when necessary.


223
00:12:49,403 --> 00:12:54,107 line:-2
Next, become familiar with the concept
of the directional field of view.


224
00:12:54,975 --> 00:12:58,779 line:-2
Similar to other hardware sensors,
like the camera, for example,


225
00:12:58,846 --> 00:13:03,150 line:-2
the hardware used in Nearby Interaction
is also subject to a field of view.


226
00:13:03,984 --> 00:13:07,487 line:-2
The field of view, notionally,
is a cone that looks just like this


227
00:13:07,554 --> 00:13:09,823 line:-1
coming out of the back of the phone.


228
00:13:09,890 --> 00:13:14,294 line:-2
It roughly corresponds with the Ultra Wide
camera's field of view on the iPhone 11.


229
00:13:15,562 --> 00:13:19,099 line:-2
When devices you're interacting with
are inside this field of view,


230
00:13:19,166 --> 00:13:21,101 line:-1
both distance and direction updates


231
00:13:21,168 --> 00:13:23,604 line:-2
are expected to be produced
with high confidence.


232
00:13:24,371 --> 00:13:27,307 line:-2
But if a device is outside
that directional field of view,


233
00:13:27,374 --> 00:13:31,478 line:-2
your app may get distance updates about it
but not direction updates.


234
00:13:32,079 --> 00:13:36,083 line:-2
Remember this when developing your apps
and designing your user experiences.


235
00:13:36,783 --> 00:13:40,921 line:-2
Next, understand the impact
of physical device orientation.


236
00:13:40,988 --> 00:13:42,623 line:-1
For optimal performance,


237
00:13:42,689 --> 00:13:45,092 line:-2
devices should be held
in the portrait orientation.


238
00:13:46,226 --> 00:13:48,595 line:-2
One device in portrait
and the other in landscape


239
00:13:48,662 --> 00:13:51,598 line:-2
would lead to limited
measurement availability.


240
00:13:51,665 --> 00:13:54,134 line:-2
This is something
you absolutely want to avoid,


241
00:13:54,201 --> 00:13:57,404 line:-2
so make sure that your app
does not lead users to this situation.


242
00:13:58,305 --> 00:14:01,175 line:-1
Moving on, be mindful of occlusions.


243
00:14:01,708 --> 00:14:04,745 line:-2
Devices that are in clear line of sight
of each other


244
00:14:04,811 --> 00:14:06,713 line:-1
will achieve optimal performance.


245
00:14:06,780 --> 00:14:10,651 line:-2
You can think about it in terms
of the devices looking at one another.


246
00:14:10,717 --> 00:14:15,923 line:-2
Brick walls, people,
or any body or object in between devices


247
00:14:15,989 --> 00:14:17,858 line:-1
may reduce measurement availability.


248
00:14:18,792 --> 00:14:19,893 line:-1
Like I mentioned,


249
00:14:19,960 --> 00:14:23,797 line:-2
the distance and direction properties
of a nearby object are nullable.


250
00:14:23,864 --> 00:14:28,135 line:0
So whenever either one cannot be produced
due to the scenarios I just talked about,


251
00:14:28,202 --> 00:14:30,904 line:0
these fields are expected to be nil.


252
00:14:30,971 --> 00:14:32,239 line:-1
Be prepared for this


253
00:14:32,306 --> 00:14:35,142 line:-2
and handle nullability accordingly
in your application.


254
00:14:35,909 --> 00:14:38,212 line:-2
As for best practices
around your development process,


255
00:14:38,779 --> 00:14:42,516 line:-2
take advantage of the natively integrated
Simulator support in Xcode.


256
00:14:43,350 --> 00:14:46,620 line:-2
The same application code
that runs on actual devices


257
00:14:46,687 --> 00:14:49,022 line:-2
will get triggered
with distance and direction updates


258
00:14:49,089 --> 00:14:51,625 line:-1
between two or more Simulator windows.


259
00:14:51,692 --> 00:14:53,694 line:-2
We're happy
to be able to ship this to you,


260
00:14:53,760 --> 00:14:55,262 line:-1
and we hope that this functionality


261
00:14:55,329 --> 00:14:57,865 line:-2
will simplify and accelerate
your development process.


262
00:14:59,032 --> 00:15:02,002 line:-2
This makes our final
best-practice recommendation.


263
00:15:02,069 --> 00:15:06,573 line:-2
Leverage the native Xcode support
for simulating Nearby Interactions.


264
00:15:07,608 --> 00:15:09,743 line:-1
Today we introduced Nearby Interaction.


265
00:15:09,810 --> 00:15:12,946 line:-2
It enables you to add spatial awareness
to your application


266
00:15:13,013 --> 00:15:15,415 line:-1
and create new kinds of user interactions


267
00:15:15,482 --> 00:15:18,485 line:-2
that are based on knowledge
of relative device position.


268
00:15:19,186 --> 00:15:21,054 line:-1
Thank you for joining the session today,


269
00:15:21,121 --> 00:15:24,124 line:-2
and we truly can't wait to see
what you'll build with this.

