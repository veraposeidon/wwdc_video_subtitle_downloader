1
00:00:03,804 --> 00:00:06,406 line:-1
Hello and welcome to WWDC.


2
00:00:08,074 --> 00:00:10,077 line:0
Hi, everyone. My name is Shefali


3
00:00:10,143 --> 00:00:13,213 line:0
and I'm a performance tools engineer
here at Apple.


4
00:00:13,280 --> 00:00:16,717 line:0
Today, I'm excited to talk to you
about the Xcode Organizer.


5
00:00:17,784 --> 00:00:21,321 line:-2
Your apps are the backbone
of our software experience.


6
00:00:21,388 --> 00:00:24,958 line:-2
Now more than ever, it's important
that we continue working together


7
00:00:25,025 --> 00:00:27,594 line:-1
to improve battery life and performance


8
00:00:27,661 --> 00:00:29,997 line:-2
so users can get the most
out of their devices.


9
00:00:30,764 --> 00:00:34,968 line:-2
Year after year, you will strive to build
the most performant apps for your users,


10
00:00:35,035 --> 00:00:39,072 line:-2
asking us what more you can do
and what areas you should prioritize.


11
00:00:40,541 --> 00:00:44,511 line:-2
To help you ensure that your apps
are performing well on customer devices,


12
00:00:44,578 --> 00:00:48,115 line:-2
we're dedicated to providing you
with actionable tools and data


13
00:00:48,182 --> 00:00:51,885 line:-2
so you can quickly determine
what areas of your app to focus on.


14
00:00:51,952 --> 00:00:56,223 line:-2
The Xcode Organizer Window
allows you to track aggregated battery,


15
00:00:56,290 --> 00:00:59,459 line:-2
performance, and IO metrics
for your applications.


16
00:00:59,526 --> 00:01:02,196 line:-1
Today, I'm very excited to introduce


17
00:01:02,262 --> 00:01:04,164 line:-2
some of the new features
we've added this year.


18
00:01:04,697 --> 00:01:08,168 line:-2
First, I'll go through a brief overview
of the Xcode Organizer,


19
00:01:08,235 --> 00:01:11,004 line:-2
and show you
what it looks like in Xcode 11.


20
00:01:11,071 --> 00:01:13,674 line:-2
Then we'll jump into
the new features we've added this year,


21
00:01:13,740 --> 00:01:17,344 line:-2
which includes a new category of metrics
and diagnostics reports,


22
00:01:17,411 --> 00:01:18,879 line:-1
as well as a new UI.


23
00:01:20,180 --> 00:01:23,617 line:-2
Finally, we'll tie all of these
new features together in a demo


24
00:01:23,684 --> 00:01:26,653 line:-2
where I'll show you
how you can use this powerful tool


25
00:01:26,720 --> 00:01:29,590 line:-2
to track the battery life
and performance impact of your app


26
00:01:29,656 --> 00:01:31,058 line:-1
from release to release,


27
00:01:31,124 --> 00:01:32,860 line:-1
and we'll wrap it up with some next steps.


28
00:01:33,994 --> 00:01:36,663 line:-2
Let's begin
with a brief overview of the Organizer.


29
00:01:37,764 --> 00:01:39,733 line:-1
What is the Xcode Organizer,


30
00:01:39,800 --> 00:01:42,703 line:-2
and how do I get to it
to see my app's data?


31
00:01:43,036 --> 00:01:44,304 line:-1
As the name suggests,


32
00:01:44,371 --> 00:01:46,907 line:-2
the Xcode Organizer Window
is built directly into Xcode,


33
00:01:46,974 --> 00:01:50,244 line:-2
which means all you have to do
is navigate to the menu bar,


34
00:01:50,310 --> 00:01:52,479 line:-2
go to "Window,"
and click "Organizer" to launch.


35
00:01:53,213 --> 00:01:55,082 line:-1
What's great about using the Organizer


36
00:01:55,148 --> 00:01:58,719 line:-2
is that it requires absolutely no changes
to be made to your app.


37
00:01:59,253 --> 00:02:00,554 line:-1
As users use your app,


38
00:02:00,621 --> 00:02:02,856 line:-2
we collect battery life
and performance data


39
00:02:02,923 --> 00:02:04,791 line:-1
from consented devices.


40
00:02:04,858 --> 00:02:06,960 line:-2
This data is then aggregated
on our servers


41
00:02:07,027 --> 00:02:09,363 line:-2
and sent back to you
through the Organizer.


42
00:02:10,597 --> 00:02:14,234 line:0
To learn more about the Xcode Organizer,
I recommend you check out


43
00:02:14,301 --> 00:02:17,271 line:0
the "What's New in Energy Debugging" talk
from 2018,


44
00:02:17,337 --> 00:02:21,241 line:0
and the "Improving Battery Life
and Performance" talk from 2019.


45
00:02:21,308 --> 00:02:23,043 line:-1
Last year, through the Organizer,


46
00:02:23,110 --> 00:02:26,380 line:-2
we provided data
for various app-usage metrics.


47
00:02:26,446 --> 00:02:30,751 line:-2
Since then, we've loved seeing you use
the metrics and diagnostics reports


48
00:02:30,817 --> 00:02:34,688 line:-2
to monitor your app's performance
and drive some really great bug fixes.


49
00:02:35,956 --> 00:02:40,327 line:-2
Now let's take a look at the new data
we've added in the Organizer this year.


50
00:02:41,562 --> 00:02:46,600 line:0
This year, we're providing more data
across both metrics and diagnostics.


51
00:02:48,235 --> 00:02:50,971 line:0
We've added
a new category of metrics for scrolling.


52
00:02:51,038 --> 00:02:53,173 line:0
We're calling these "hitches."


53
00:02:53,240 --> 00:02:54,975 line:-1
Before we go into the details,


54
00:02:55,042 --> 00:02:58,512 line:-2
let's take a look at the Meal Planner app
I've been working on with some colleagues,


55
00:02:58,579 --> 00:03:00,347 line:-1
and what a user perceives as a hitch.


56
00:03:01,448 --> 00:03:04,518 line:-2
Notice the slow, skipping,
and jittery scroll.


57
00:03:05,252 --> 00:03:08,388 line:-2
And here's the same application,
but without any hitches.


58
00:03:09,256 --> 00:03:12,993 line:-2
As we can see, there's quite a difference
between the two experiences,


59
00:03:13,060 --> 00:03:14,595 line:-1
and this smooth scroll here


60
00:03:14,661 --> 00:03:17,731 line:-2
is what we wanna help you achieve
using the scroll hitch metric.


61
00:03:19,099 --> 00:03:20,801 line:-1
But what is a scroll hitch?


62
00:03:20,868 --> 00:03:22,936 line:-1
A scroll hitch is when a rendered frame


63
00:03:23,003 --> 00:03:26,206 line:-2
does not end up on-screen
at its expected time


64
00:03:26,273 --> 00:03:28,675 line:-1
while a user is scrolling within your app.


65
00:03:28,742 --> 00:03:30,878 line:-1
This usually causes frames to be dropped,


66
00:03:30,944 --> 00:03:33,247 line:-2
which can be perceived
as a jittery scroll.


67
00:03:35,148 --> 00:03:36,917 line:-2
For the scrolling section
of the Organizer,


68
00:03:36,984 --> 00:03:39,019 line:-1
we take the hitch time,


69
00:03:39,086 --> 00:03:43,123 line:-2
which is the total amount of extra time
frames take to show up on-screen,


70
00:03:43,190 --> 00:03:45,325 line:-1
and we divide that by the scroll duration,


71
00:03:45,392 --> 00:03:48,962 line:-2
which is the total amount of time
a user spends scrolling within your app.


72
00:03:50,531 --> 00:03:52,266 line:-1
The result is the hitch rate,


73
00:03:52,332 --> 00:03:55,669 line:-2
which is an important metric you can use
to measure app performance


74
00:03:55,736 --> 00:03:58,839 line:-2
because it provides an estimate
of the severity of hitches


75
00:03:58,906 --> 00:04:00,474 line:-1
as perceived by the user.


76
00:04:01,375 --> 00:04:04,311 line:-2
There are three buckets
for how you should interpret hitch rate.


77
00:04:05,212 --> 00:04:08,916 line:-2
This first is when the hitch rate
is less than five milliseconds per second.


78
00:04:08,982 --> 00:04:12,252 line:-2
Here, there's quite a large window of time
between dropped frames,


79
00:04:12,319 --> 00:04:15,322 line:-2
and users are likely to perceive
the smooth scroll


80
00:04:15,389 --> 00:04:18,225 line:-2
that we saw in the Meal Planner app
just a little earlier.


81
00:04:19,125 --> 00:04:21,595 line:-2
Between five and ten milliseconds
per second,


82
00:04:21,661 --> 00:04:24,431 line:-2
frames are dropped
every couple of seconds.


83
00:04:24,498 --> 00:04:27,835 line:-2
And when the hitch rate is greater
than 10 milliseconds per second,


84
00:04:27,901 --> 00:04:30,838 line:-2
users will be perceiving
frame drops very frequently,


85
00:04:30,904 --> 00:04:32,673 line:-1
leading to a poor scroll experience.


86
00:04:33,807 --> 00:04:36,310 line:0
To learn more about hitches,
I recommend you check out


87
00:04:36,376 --> 00:04:39,146 line:0
the "Eliminate Animation Hitches
with XCTests" talk


88
00:04:39,213 --> 00:04:40,814 line:0
we've prepared for you this year.


89
00:04:42,616 --> 00:04:45,152 line:-2
The second piece of new data
we've added this year


90
00:04:45,219 --> 00:04:47,054 line:-1
is disk write diagnostics reports.


91
00:04:48,655 --> 00:04:51,358 line:0
Last year,
we gave you metrics for this category,


92
00:04:51,425 --> 00:04:54,795 line:0
and this year,
we're providing you with even more context


93
00:04:54,862 --> 00:04:59,066 line:0
to help you pinpoint and really narrow in
on any issues your app encounters.


94
00:05:00,667 --> 00:05:04,271 line:-2
Disk write diagnostics logs
are aggregated when disk writes exceed


95
00:05:04,338 --> 00:05:06,840 line:-1
one gigabyte in a 24-hour period.


96
00:05:08,375 --> 00:05:10,911 line:-2
By reducing the amount
of writes your app is doing,


97
00:05:10,978 --> 00:05:13,080 line:-1
you can ensure better performance,


98
00:05:13,146 --> 00:05:16,817 line:-2
longer battery life,
and overall good device health.


99
00:05:16,884 --> 00:05:20,153 line:-2
Let's take a look at an example
of what these reports look like.


100
00:05:22,089 --> 00:05:23,790 line:-1
In the left pane of the Organizer,


101
00:05:23,857 --> 00:05:27,261 line:-2
when we navigate to the "Reports" section
and click on "Disk Writes",


102
00:05:27,861 --> 00:05:30,063 line:-1
here's what we'll see for our app.


103
00:05:30,130 --> 00:05:32,699 line:-2
We'll go into more detail about this
during the demo.


104
00:05:34,401 --> 00:05:37,037 line:-1
So far, we've seen some great new data,


105
00:05:37,104 --> 00:05:41,975 line:-2
and to go along with it, in Xcode 12,
we've completely redone the interface.


106
00:05:42,042 --> 00:05:44,444 line:-1
We're thrilled for you to finally see it.


107
00:05:45,045 --> 00:05:48,482 line:-2
The new interactive UI allows you
to compare and contrast metrics


108
00:05:48,549 --> 00:05:51,852 line:-2
for different versions of your app
with a single click.


109
00:05:51,919 --> 00:05:53,387 line:-1
Let's go to the Organizer


110
00:05:53,453 --> 00:05:55,689 line:-2
and take a better look
at all of these new features.


111
00:05:56,890 --> 00:05:59,459 line:-2
Let's say I'm a developer
for an app called Meal Planner


112
00:05:59,526 --> 00:06:01,595 line:-2
which allows users
to plan meals for the week


113
00:06:01,662 --> 00:06:05,065 line:-2
by saving pictures and recipes
so that they're all in one place.


114
00:06:06,633 --> 00:06:09,369 line:-1
In XCode 12, when I open up the Organizer,


115
00:06:09,436 --> 00:06:12,673 line:-2
I can do a side-by-side comparison
of two of my releases


116
00:06:12,739 --> 00:06:14,374 line:-1
thanks to the new interactive UI.


117
00:06:15,275 --> 00:06:18,445 line:-2
I can now click on
any of the older versions of my app...


118
00:06:20,514 --> 00:06:23,016 line:-2
and on the right side,
we can see the UI update


119
00:06:23,083 --> 00:06:26,987 line:-2
to reflect the differences
between the latest and selected versions.


120
00:06:27,054 --> 00:06:28,922 line:-1
There's also a more detailed breakdown


121
00:06:28,989 --> 00:06:31,625 line:-2
of the subcategories accounting
for the battery usage of my app.


122
00:06:32,192 --> 00:06:33,994 line:-2
We can see here
that in the latest version,


123
00:06:34,061 --> 00:06:37,030 line:-2
there's an increase
in Camera and Bluetooth usage


124
00:06:37,097 --> 00:06:39,132 line:-1
that I now know to go investigate.


125
00:06:39,199 --> 00:06:43,170 line:-2
I can also go back and select
any of the older versions whenever I want.


126
00:06:44,037 --> 00:06:45,038 line:-1
This is really useful


127
00:06:45,105 --> 00:06:47,207 line:-2
because it opens up
a lot of new possibilities


128
00:06:47,274 --> 00:06:48,809 line:-1
for version comparison,


129
00:06:48,876 --> 00:06:52,179 line:-2
and it gives me control
over the data I'm looking at.


130
00:06:52,246 --> 00:06:56,016 line:-2
As developers, we love seeing data
about the usage of our app,


131
00:06:56,083 --> 00:06:59,686 line:-2
but what if it takes days or even weeks
before we can see it in the Organizer?


132
00:07:00,787 --> 00:07:02,523 line:-1
It's important to note that last year,


133
00:07:02,589 --> 00:07:05,125 line:-2
we set a threshold
where we expected each app version


134
00:07:05,192 --> 00:07:07,928 line:-2
to have a certain amount of usage
from user devices


135
00:07:07,995 --> 00:07:11,098 line:-2
before we could show histograms for them
in the Xcode Organizer.


136
00:07:11,632 --> 00:07:14,735 line:-2
This year, we're thrilled
to show this data even sooner,


137
00:07:14,801 --> 00:07:17,804 line:-2
giving you an early glimpse
of your app's performance.


138
00:07:17,871 --> 00:07:19,206 line:-1
In Xcode 12,


139
00:07:19,273 --> 00:07:23,110 line:-2
we've lowered the required usage threshold
by a factor of five.


140
00:07:23,177 --> 00:07:26,547 line:-2
This means that if you're currently able
to see data for your app,


141
00:07:26,613 --> 00:07:28,982 line:-1
you'll now see this data even sooner.


142
00:07:29,049 --> 00:07:32,119 line:-2
If your app's usage
was below the old threshold


143
00:07:32,186 --> 00:07:33,754 line:-1
but is above the new one,


144
00:07:33,820 --> 00:07:35,923 line:-2
you'll start seeing data
for the first time.


145
00:07:36,523 --> 00:07:40,027 line:-2
We're incredibly happy that
a much larger audience of app developers


146
00:07:40,093 --> 00:07:43,397 line:-2
can now use the Organizer
to monitor their apps' battery life


147
00:07:43,463 --> 00:07:44,765 line:-1
and performance impact.


148
00:07:45,332 --> 00:07:47,067 line:-1
Looking at this battery-usage graph,


149
00:07:47,134 --> 00:07:51,305 line:-2
we can see an icon
in the X-axis by version 1.0.1.


150
00:07:52,606 --> 00:07:56,944 line:-2
This icon indicates that a version
of our app had limited usage.


151
00:07:57,010 --> 00:07:59,880 line:-2
Associated with this icon
is additional information


152
00:07:59,947 --> 00:08:02,316 line:-2
regarding the margin of error
for that version.


153
00:08:02,382 --> 00:08:04,451 line:-1
We can see this on the right side here.


154
00:08:05,419 --> 00:08:08,388 line:-2
This is important
because we're analyzing fewer data points


155
00:08:08,455 --> 00:08:10,457 line:-1
for these versions with limited usage.


156
00:08:11,692 --> 00:08:13,760 line:-1
The data from the smaller working set


157
00:08:13,827 --> 00:08:17,898 line:-2
will stabilize as more people
update their app and use the new version.


158
00:08:17,965 --> 00:08:19,499 line:-1
As the usage increases,


159
00:08:19,566 --> 00:08:22,836 line:-2
the error margin will decrease
until the version gets enough usage


160
00:08:22,903 --> 00:08:25,639 line:-2
where the error margin is low enough
that's it's omitted from the UI.


161
00:08:26,573 --> 00:08:30,511 line:-2
Now let's take a look at how we can use
the new reports as part of our workflow.


162
00:08:31,411 --> 00:08:33,514 line:-2
Clicking on the disk write metrics
on the left,


163
00:08:34,780 --> 00:08:37,251 line:-2
we can see that there was
a sudden increase in disk writes


164
00:08:37,317 --> 00:08:39,119 line:-1
in version 2.2.


165
00:08:39,186 --> 00:08:42,422 line:-2
Let's walk through how we at Meal Planner
would triage this regression.


166
00:08:42,990 --> 00:08:45,526 line:-2
After identifying the spike
in disk writes here,


167
00:08:45,592 --> 00:08:47,861 line:-2
we'll navigate
to the "Reports" section on the left...


168
00:08:49,363 --> 00:08:50,797 line:-1
and click on "Disk Writes".


169
00:08:53,166 --> 00:08:55,235 line:-2
It looks like
there were a couple of different issues


170
00:08:55,302 --> 00:08:57,371 line:-1
contributing to the increase we saw.


171
00:08:57,437 --> 00:09:00,407 line:-2
The top one looks like
it's actually related to a new feature


172
00:09:00,474 --> 00:09:03,710 line:-2
we added in version 2.2,
where users can now add


173
00:09:03,777 --> 00:09:06,647 line:-2
their own custom pictures
and recipes to their meals.


174
00:09:07,347 --> 00:09:10,951 line:-2
Since the stack trace tells us exactly
what the signature of the issue is,


175
00:09:11,018 --> 00:09:13,887 line:-2
we can jump to that part of the code
and begin investigating.


176
00:09:15,022 --> 00:09:16,356 line:-1
Under the signature,


177
00:09:16,423 --> 00:09:19,159 line:-2
we can also see
what percentage of our disk writes


178
00:09:19,226 --> 00:09:21,161 line:-1
a given signature accounted for.


179
00:09:22,229 --> 00:09:24,131 line:-1
For a particular signature,


180
00:09:24,198 --> 00:09:25,566 line:-1
the "Reports" section on the right


181
00:09:25,632 --> 00:09:29,369 line:-2
shows us a breakdown
by device type and operating system,


182
00:09:30,504 --> 00:09:34,408 line:-2
and the bar graph below the pie chart
gives us a trend of how many reports


183
00:09:34,474 --> 00:09:37,244 line:-2
were received for our app
over the last 14 days.


184
00:09:37,978 --> 00:09:39,580 line:-1
Similar to the energy reports,


185
00:09:39,646 --> 00:09:42,749 line:-2
we also provide
sample stack traces per signature


186
00:09:42,816 --> 00:09:45,085 line:-2
and additional information
regarding the stack trace


187
00:09:45,152 --> 00:09:46,720 line:-1
in the "Details" section on the right.


188
00:09:48,555 --> 00:09:50,090 line:-1
I can use all of this information


189
00:09:50,157 --> 00:09:53,327 line:-2
to make the fix so that our app
isn't doing as much writing.


190
00:09:53,393 --> 00:09:56,129 line:-2
I'll go ahead
and mark the signature as resolved


191
00:09:56,196 --> 00:09:58,799 line:-2
so my colleagues can address
some of the other regressions


192
00:09:58,866 --> 00:10:00,067 line:-1
the Organizer caught.


193
00:10:00,634 --> 00:10:03,003 line:-2
Once our users are using
the version with this fix,


194
00:10:03,070 --> 00:10:04,304 line:-1
we'll come back to the metrics


195
00:10:04,371 --> 00:10:07,508 line:-2
to confirm that our data returns back
to what it previously was.


196
00:10:09,209 --> 00:10:13,480 line:-2
We're incredibly excited to show you
more data in a new interactive Organizer,


197
00:10:14,047 --> 00:10:17,784 line:-2
and we're excited to see how you use
all of these new features


198
00:10:17,851 --> 00:10:20,821 line:-2
to drive some great optimizations
within your app.


199
00:10:21,455 --> 00:10:24,258 line:-1
If you're a developer using the Organizer,


200
00:10:24,324 --> 00:10:27,094 line:-1
I encourage you to go compare metrics


201
00:10:27,160 --> 00:10:30,464 line:-2
for two of your app versions
with the new interactive UI,


202
00:10:31,431 --> 00:10:34,301 line:-2
check out what scrolling performance
looks like for your app


203
00:10:34,368 --> 00:10:35,669 line:-1
with the hitches metric,


204
00:10:36,970 --> 00:10:39,773 line:-2
and take a deep dive
into the disk writes for your app


205
00:10:39,840 --> 00:10:43,810 line:-2
by using the disk write reports
along with the disk write metrics.


206
00:10:44,478 --> 00:10:47,981 line:-2
We're very excited for you
to continue using the Xcode Organizer


207
00:10:48,048 --> 00:10:51,185 line:-2
to optimize your apps
for battery life and performance.


208
00:10:52,519 --> 00:10:55,222 line:-2
Thank you for taking the time
to listen to this presentation,


209
00:10:55,289 --> 00:10:57,925 line:-2
and I hope you enjoy
the rest of this conference.

