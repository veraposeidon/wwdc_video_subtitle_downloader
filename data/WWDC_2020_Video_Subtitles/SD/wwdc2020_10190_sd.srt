1
00:00:00,167 --> 00:00:02,102 line:-1
[chimes]


2
00:00:03,937 --> 00:00:07,241 line:-1
Hello and welcome to WWDC.


3
00:00:08,375 --> 00:00:11,678 line:0
Hi, everyone. My name is Conrad
and welcome to my crib.


4
00:00:12,145 --> 00:00:16,250 line:-2
I'm very excited to tell you today about
the new Shortcuts experience in watchOS 7.


5
00:00:16,917 --> 00:00:20,988 line:-2
First, I'm going to introduce you to the
all-new Shortcuts app on Apple Watch.


6
00:00:21,922 --> 00:00:25,926 line:-2
Then my colleague Alex will walk you
through what you can do as a developer


7
00:00:25,993 --> 00:00:29,129 line:-2
to craft a delightful
Shortcuts experience on watchOS.


8
00:00:29,763 --> 00:00:35,369 line:-2
Last year, in watchOS 6, we brought some
exciting new updates to Shortcuts in Siri.


9
00:00:35,936 --> 00:00:38,005 line:-2
We added the ability for shortcuts
to have parameters


10
00:00:38,071 --> 00:00:40,140 line:-2
which means that Siri
can ask follow-up questions.


11
00:00:40,974 --> 00:00:45,112 line:-2
You can see here that Siri is asking
which items to add to my Walmart cart.


12
00:00:46,146 --> 00:00:48,916 line:-2
You can also run shortcuts
right from the Siri watch face.


13
00:00:49,349 --> 00:00:51,919 line:-2
Shortcuts are suggested on the face
when they become relevant,


14
00:00:51,985 --> 00:00:54,988 line:-2
and you can run them with a tap
at just the right moment.


15
00:00:55,055 --> 00:00:58,025 line:-2
This year, I am really excited
to share with you all


16
00:00:58,091 --> 00:01:00,761 line:-1
the new Shortcuts app on watchOS 7.


17
00:01:01,762 --> 00:01:05,699 line:-2
The Shortcuts app on watchOS
naturally complements its iOS counterpart


18
00:01:05,766 --> 00:01:10,003 line:-2
and you can run shortcuts
with a single tap right from your wrist.


19
00:01:10,070 --> 00:01:12,439 line:-2
The Shortcuts that you know and love
on iOS


20
00:01:12,506 --> 00:01:14,942 line:-1
work just as well in Shortcuts on watchOS.


21
00:01:15,576 --> 00:01:18,946 line:-2
For example, here is a great shortcut
from the Shortcuts Gallery


22
00:01:19,012 --> 00:01:23,483 line:-2
that automatically texts someone an ETA
of how long it will take to get home,


23
00:01:23,550 --> 00:01:24,785 line:-1
running right on the watch.


24
00:01:26,220 --> 00:01:30,757 line:-2
In the new Shortcuts app, you can organize
and edit your Apple Watch collection


25
00:01:30,824 --> 00:01:35,062 line:-2
to determine which shortcuts should sync
via iCloud to your watch.


26
00:01:35,529 --> 00:01:37,431 line:-1
If a shortcut asks a question,


27
00:01:37,497 --> 00:01:40,567 line:-2
you can answer those questions
inline inside of the Shortcuts app.


28
00:01:41,235 --> 00:01:45,939 line:-2
For example, here, I am prompted to choose
which event I want to get directions to


29
00:01:46,006 --> 00:01:48,041 line:-1
in my Directions to Event shortcut.


30
00:01:48,642 --> 00:01:50,677 line:-2
We're also very excited
to support complications


31
00:01:50,744 --> 00:01:52,446 line:-1
for the new Shortcuts app on watchOS.


32
00:01:52,513 --> 00:01:55,349 line:-2
You can see here
that I can launch the Shortcuts app


33
00:01:55,415 --> 00:01:57,818 line:-2
in just a single tap,
straight from the watch face.


34
00:01:57,885 --> 00:01:59,353 line:-1
But that's not all.


35
00:01:59,419 --> 00:02:03,924 line:-2
You can also set up complications
that launch a specific shortcut directly.


36
00:02:04,825 --> 00:02:07,995 line:-2
You can see here that I can send my ETA
right from my watch face.


37
00:02:08,996 --> 00:02:13,600 line:-2
I just tap on the complication, tap run,
and there is my message.


38
00:02:14,568 --> 00:02:17,070 line:-2
That message looks good,
so I'll go ahead and send it.


39
00:02:18,906 --> 00:02:20,908 line:-2
By supporting Shortcuts
inside of your app,


40
00:02:20,974 --> 00:02:24,378 line:-2
your app's shortcuts could also
be available right from the watch face.


41
00:02:25,512 --> 00:02:28,248 line:-2
Now, I am going to hand it over to my
colleague Alex, who will explain


42
00:02:28,315 --> 00:02:31,518 line:-2
how you can build an awesome experience
for Shortcuts on watchOS.


43
00:02:32,186 --> 00:02:33,487 line:-1
Alex.


44
00:02:34,021 --> 00:02:38,325 line:-2
Thanks, Conrad. Hi, everyone.
Let's start with a quick recap


45
00:02:38,392 --> 00:02:42,396 line:-2
about how you can offer shortcuts in your
apps, so that you can take full advantage


46
00:02:42,462 --> 00:02:45,866 line:-2
of this great new Shortcuts
experience on watchOS.


47
00:02:46,967 --> 00:02:49,336 line:-2
Just like in iOS,
your apps can support Shortcuts


48
00:02:49,403 --> 00:02:54,474 line:-2
by using the APIs from the SiriKit suite
of frameworks and the NSUserActivity API.


49
00:02:55,475 --> 00:02:58,879 line:0
If you are new to Shortcuts or SiriKit,
you should start with watching


50
00:02:58,946 --> 00:03:02,049 line:0
these great sessions
from the previous years' conferences.


51
00:03:02,583 --> 00:03:05,586 line:-2
Now, let's talk about
how running shortcuts on the watch


52
00:03:05,652 --> 00:03:07,955 line:-2
is different from running them
on iOS devices.


53
00:03:10,090 --> 00:03:11,091 line:-1
As you may know,


54
00:03:11,158 --> 00:03:14,928 line:-2
Shortcuts are seamlessly synced
across all of your devices via iCloud.


55
00:03:15,829 --> 00:03:19,633 line:-2
This means that people can configure
shortcuts on an iOS device,


56
00:03:19,700 --> 00:03:22,035 line:-2
put some shortcuts
into the Apple Watch collection,


57
00:03:22,102 --> 00:03:25,005 line:-2
and will expect to run those shortcuts
on their Apple Watch.


58
00:03:26,340 --> 00:03:29,176 line:-2
So what happens when someone
runs a shortcut on their watch?


59
00:03:30,444 --> 00:03:34,181 line:-2
The flow will be different depending on
how the shortcut is implemented.


60
00:03:35,582 --> 00:03:38,852 line:-2
For shortcuts that you offer
via the NSUserActivity API,


61
00:03:38,919 --> 00:03:41,321 line:-2
we need to open the app
to handle the activity.


62
00:03:42,356 --> 00:03:45,392 line:-2
But we cannot open the app
if it's not installed on the watch,


63
00:03:45,459 --> 00:03:49,730 line:0
and in that case, attempting to run
such a shortcut would result in an error.


64
00:03:51,398 --> 00:03:53,834 line:-2
Let's now take a look
at intent-based shortcuts.


65
00:03:54,401 --> 00:03:58,105 line:-2
Now, intents are handled
by Intents extensions.


66
00:03:58,172 --> 00:04:01,108 line:-2
If an Intents extension
is installed on the watch,


67
00:04:01,175 --> 00:04:04,478 line:-2
and it supports this intent,
we just hand the intent over to that.


68
00:04:06,547 --> 00:04:10,884 line:-2
If not, we will try to run this intent
remotely, on the paired phone.


69
00:04:11,418 --> 00:04:14,154 line:-1
We call this remote execution.


70
00:04:14,821 --> 00:04:18,257 line:-2
Note how this is in contrast
to NSUserActivity-based shortcuts,


71
00:04:18,325 --> 00:04:21,028 line:-2
which can only be run
directly on the watch.


72
00:04:22,829 --> 00:04:24,898 line:0
But if the Intents extension on the phone


73
00:04:24,965 --> 00:04:27,868 line:0
tells us that it needs to
continue in the app,


74
00:04:27,935 --> 00:04:31,071 line:0
then, just like for
user activity-based shortcuts,


75
00:04:31,138 --> 00:04:34,308 line:0
we won't be able to open the app
remotely on the phone,


76
00:04:34,374 --> 00:04:35,976 line:0
and an error will be shown.


77
00:04:36,910 --> 00:04:40,547 line:0
Otherwise, the shortcut is executed
remotely on the phone.


78
00:04:42,082 --> 00:04:44,117 line:0
And here's what
the overall decision process


79
00:04:44,184 --> 00:04:46,320 line:0
for running shortcuts
on the watch looks like.


80
00:04:47,421 --> 00:04:50,724 line:0
You should design your shortcuts
to avoid these "error" nodes,


81
00:04:50,791 --> 00:04:55,095 line:0
to ensure that people using your apps
have a great experience on the watch,


82
00:04:55,162 --> 00:04:58,632 line:0
and we'll go over how you can do that
further in this session.


83
00:04:58,699 --> 00:05:02,135 line:-2
And now, let's take a closer look
at remote execution


84
00:05:02,202 --> 00:05:06,039 line:-2
and see what it means for you
and the people who use your shortcuts.


85
00:05:07,441 --> 00:05:09,977 line:-2
If an Intent is supported natively
on the watch,


86
00:05:10,043 --> 00:05:12,846 line:-2
we'll launch the associated
watchOS Intents extension


87
00:05:12,913 --> 00:05:14,114 line:-1
and let it handle the intent.


88
00:05:15,148 --> 00:05:18,652 line:-2
Similarly, user activity-based shortcuts
will be opened


89
00:05:18,719 --> 00:05:22,055 line:-2
in their corresponding watchOS app
if it is installed.


90
00:05:23,657 --> 00:05:28,395 line:0
If, on the other hand, we have to send
the intent over to the paired phone,


91
00:05:28,462 --> 00:05:32,666 line:0
we introduce an additional hop
for sending the data to the phone,


92
00:05:32,733 --> 00:05:36,803 line:0
which inevitably increases the overall
time it takes to perform the task.


93
00:05:38,639 --> 00:05:42,176 line:-2
As you can see,
even if you don't have a watch app yet,


94
00:05:42,242 --> 00:05:46,580 line:-2
or you are not supporting all of the
intents in your watchOS Intents extension,


95
00:05:46,647 --> 00:05:49,783 line:-2
we will still run the shortcuts
based on your intent,


96
00:05:49,850 --> 00:05:52,653 line:-2
but it will be slower
than running locally.


97
00:05:53,554 --> 00:05:55,122 line:-1
Best experience is achieved


98
00:05:55,189 --> 00:05:57,791 line:-2
when the intent
can be handled directly on the watch.


99
00:05:59,593 --> 00:06:03,864 line:-2
Now that we've seen how running shortcuts
on watchOS is different from iOS,


100
00:06:03,931 --> 00:06:08,202 line:-2
let's take a look at what your options are
when supporting shortcuts on the watch.


101
00:06:10,637 --> 00:06:14,174 line:0
The best approach by far
is to have a watchOS app


102
00:06:14,241 --> 00:06:17,644 line:0
and have that app support
the same user activities or intents


103
00:06:17,711 --> 00:06:19,646 line:0
that you support in your iOS app.


104
00:06:20,681 --> 00:06:23,617 line:-2
This will ensure the best
Shortcuts experience on the watch.


105
00:06:24,551 --> 00:06:28,322 line:-2
And if you don't offer a watch app yet,
consider building one.


106
00:06:29,990 --> 00:06:33,460 line:0
If for some reason a watchOS app
is not an option for you,


107
00:06:33,527 --> 00:06:37,965 line:0
you can instead ensure that your shortcuts
work well with remote execution.


108
00:06:38,031 --> 00:06:41,735 line:-2
Now, while remote execution
is great for running shortcuts


109
00:06:41,802 --> 00:06:44,638 line:-2
for those of you
who don't offer a watch app yet,


110
00:06:44,705 --> 00:06:47,574 line:-2
your shortcuts need to satisfy
a few requirements


111
00:06:47,641 --> 00:06:49,243 line:-1
in order to work well with it.


112
00:06:49,309 --> 00:06:53,914 line:-2
First, remote execution is only supported
for intent-based shortcuts,


113
00:06:53,981 --> 00:06:56,283 line:-1
not NSUserActivity-based ones.


114
00:06:56,984 --> 00:06:59,286 line:-2
This is because
user activity-based shortcuts


115
00:06:59,353 --> 00:07:02,322 line:-2
require the app to be open
in order to run,


116
00:07:02,389 --> 00:07:06,994 line:-2
and opening an app on another device
would be a very jarring experience.


117
00:07:07,794 --> 00:07:12,432 line:-2
And second, only those intents that can
perform the task entirely in background,


118
00:07:12,499 --> 00:07:15,736 line:-2
without opening the app,
can be executed remotely.


119
00:07:17,571 --> 00:07:20,807 line:-2
This means that you need to not return
".continueInApp"


120
00:07:20,874 --> 00:07:22,342 line:-1
in your intent handling code.


121
00:07:23,810 --> 00:07:28,615 line:-2
Additionally, you would need to check the
"supports background execution" checkbox


122
00:07:28,682 --> 00:07:32,052 line:-2
in the Suggestions section
of the Xcode intent editor


123
00:07:32,119 --> 00:07:36,657 line:-2
for all parameter combinations that you
are using in your interaction donations.


124
00:07:38,058 --> 00:07:41,929 line:-2
Let's now go over some of the best
practices for implementing shortcuts.


125
00:07:42,563 --> 00:07:46,900 line:-2
As I mentioned earlier, there are two ways
to support shortcuts in your app.


126
00:07:47,634 --> 00:07:51,071 line:-2
The first is through
the NSUserActivity API.


127
00:07:51,738 --> 00:07:54,441 line:-2
And the second is
using the Intents framework.


128
00:07:55,542 --> 00:07:57,544 line:-1
And for all new shortcuts adopters,


129
00:07:57,611 --> 00:08:00,214 line:-2
we recommend to implement
shortcuts using Intents,


130
00:08:00,280 --> 00:08:04,551 line:-2
because it provides richer
and much more flexible APIs


131
00:08:04,618 --> 00:08:07,855 line:-2
and allows you to offer shortcuts
that support parameters


132
00:08:07,921 --> 00:08:09,223 line:-1
and can run in background.


133
00:08:11,024 --> 00:08:15,529 line:-2
Another very important part is to make
sure to compile your Intents extension


134
00:08:15,596 --> 00:08:19,600 line:-1
not only for iOS but also for watchOS.


135
00:08:20,567 --> 00:08:23,937 line:-2
This usually means creating
a separate Intents extension target


136
00:08:24,004 --> 00:08:28,175 line:-2
in your Xcode project and bundling
that extension with your watchOS app.


137
00:08:30,077 --> 00:08:33,514 line:-2
As we've talked about previously,
the best experience is achieved


138
00:08:33,580 --> 00:08:35,749 line:-2
when shortcuts can run locally
on the watch


139
00:08:35,816 --> 00:08:39,019 line:-2
and don't need to rely
on remote execution.


140
00:08:39,785 --> 00:08:42,722 line:-2
And for that, you really
want to strive to support


141
00:08:42,789 --> 00:08:46,793 line:-2
as many intents in your watchOS
Intents extension as you can.


142
00:08:48,161 --> 00:08:50,230 line:-1
Ideally, on watchOS,


143
00:08:50,297 --> 00:08:53,834 line:-2
you should support all of the intents
that you support on iOS.


144
00:08:55,669 --> 00:08:58,172 line:-2
As you may know,
the great thing about shortcuts


145
00:08:58,238 --> 00:09:01,241 line:-2
is that any shortcut
that you see in the Shortcuts app


146
00:09:01,308 --> 00:09:04,044 line:-1
can also be run in Siri with your voice.


147
00:09:05,679 --> 00:09:08,182 line:-1
And on Watch, it is especially important


148
00:09:08,248 --> 00:09:11,785 line:-2
to provide carefully constructed dialogs
in your intents


149
00:09:11,852 --> 00:09:15,822 line:-2
because Intents UI extensions
are not supported on watchOS.


150
00:09:17,524 --> 00:09:21,862 line:-2
Here's an example of a Siri confirmation
UI for an intent-based ordering shortcut


151
00:09:21,929 --> 00:09:23,931 line:-2
that is using
the default confirmation prompt.


152
00:09:25,032 --> 00:09:28,402 line:-2
This is what you would see
if you return a default intent response


153
00:09:28,468 --> 00:09:31,238 line:-2
with code "ready"
from your "confirm()" method.


154
00:09:32,172 --> 00:09:33,874 line:-2
But it doesn't provide
a lot of information


155
00:09:33,941 --> 00:09:36,376 line:-2
beyond the fact
that you're about to order a soup.


156
00:09:38,078 --> 00:09:40,113 line:-1
In contrast to the previous example,


157
00:09:40,180 --> 00:09:44,918 line:-2
here we use a custom confirm response
and provide the person ordering the soup


158
00:09:44,985 --> 00:09:48,088 line:-2
with the order total
before they make the purchase.


159
00:09:49,223 --> 00:09:51,859 line:-1
But custom responses are very flexible


160
00:09:51,925 --> 00:09:54,962 line:-2
and you can provide
any additional information in your dialogs


161
00:09:55,028 --> 00:10:00,200 line:-2
that you think can be relevant or helpful
to people using your shortcut in Siri.


162
00:10:00,868 --> 00:10:05,239 line:0
For information on how to
make your shortcuts work great in Siri,


163
00:10:05,305 --> 00:10:08,208 line:0
please refer
to these past years' sessions.


164
00:10:08,275 --> 00:10:13,947 line:-2
Another great spot to showcase your app
on the watch is the Siri watch face.


165
00:10:14,381 --> 00:10:17,317 line:-2
You should see whether the shortcuts
that your app supports


166
00:10:17,384 --> 00:10:21,855 line:-2
can be relevant in various circumstances
and offer them on the Siri watch face.


167
00:10:23,190 --> 00:10:28,395 line:-2
And to do that, you can use the relevant
shortcut APIs from the Intents framework.


168
00:10:29,363 --> 00:10:30,464 line:0
To learn more,


169
00:10:30,531 --> 00:10:36,537 line:0
watch the "Siri Shortcuts on the Siri
Watch Face" session from WWDC 2018.


170
00:10:36,603 --> 00:10:39,039 line:-1
Let's recap what we've covered today.


171
00:10:39,907 --> 00:10:43,343 line:-2
First, to make your shortcuts work
on watchOS,


172
00:10:43,410 --> 00:10:45,179 line:-1
you should either build a watch app


173
00:10:45,245 --> 00:10:48,415 line:-2
or develop your shortcuts
to work with remote execution.


174
00:10:49,716 --> 00:10:53,754 line:-2
Second, if you're just starting
to adopt shortcuts in your apps,


175
00:10:53,820 --> 00:10:57,291 line:-2
prefer to implement them
using the richer Intents API.


176
00:10:58,659 --> 00:11:03,931 line:-2
Next, don't forget to compile
your Intents extension for watchOS


177
00:11:03,997 --> 00:11:06,033 line:-1
and to bundle it with your watch app.


178
00:11:07,401 --> 00:11:10,103 line:-2
You should also
construct your dialogs carefully


179
00:11:10,170 --> 00:11:12,773 line:-2
to ensure a great voice experience
for your shortcuts


180
00:11:12,840 --> 00:11:14,775 line:-1
when people run them in Siri.


181
00:11:16,476 --> 00:11:20,480 line:0
And finally, consider offering
your shortcuts on the Siri watch face.


182
00:11:21,915 --> 00:11:23,250 line:-1
Thank you all for your time,


183
00:11:23,317 --> 00:11:26,820 line:-2
and we can't wait to see
what great shortcuts you will build.


184
00:11:27,254 --> 00:11:29,189 line:-1
[chimes]

