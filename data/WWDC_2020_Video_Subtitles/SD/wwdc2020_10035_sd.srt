1
00:00:03,904 --> 00:00:06,740 line:-1
Hello and welcome to WWDC.


2
00:00:08,742 --> 00:00:10,010 line:0
Hi, I'm Izzy.


3
00:00:10,077 --> 00:00:12,713 line:0
I'm an engineer
on the iOS System Experience team.


4
00:00:12,779 --> 00:00:13,814 line:0
Thanks for joining me.


5
00:00:14,314 --> 00:00:16,315 line:-1
Let's take a look at today's agenda.


6
00:00:16,383 --> 00:00:18,252 line:-2
We'll talk about widget families
and what they are.


7
00:00:18,318 --> 00:00:21,722 line:-2
If you built a watchOS complication
before, this will sound familiar.


8
00:00:22,055 --> 00:00:24,424 line:-2
We'll cover timelines
and how to update them.


9
00:00:24,858 --> 00:00:27,528 line:-2
We'll go over how to make a widget
user configurable.


10
00:00:28,328 --> 00:00:31,265 line:-2
We'll talk about how a widget can link
to content in its app.


11
00:00:31,632 --> 00:00:33,867 line:-2
And we'll update our widget
to do all of this.


12
00:00:33,934 --> 00:00:34,968 line:-1
It sounds like a lot,


13
00:00:35,035 --> 00:00:37,437 line:-2
but the power of SwiftUI
combined with WidgetKit


14
00:00:37,504 --> 00:00:40,107 line:-2
really makes each step
simple and straightforward.


15
00:00:41,008 --> 00:00:43,577 line:-2
There are three families
provided by WidgetKit,


16
00:00:43,944 --> 00:00:48,515 line:0
systemSmall, systemMedium,
and systemLarge.


17
00:00:48,949 --> 00:00:50,751 line:0
If you've built a complication before,


18
00:00:50,817 --> 00:00:53,654 line:0
these are the same in concept
as complication families.


19
00:00:54,922 --> 00:00:56,490 line:-1
As we saw in Part 1,


20
00:00:56,557 --> 00:00:59,426 line:-2
the timeline provider
is the engine of the widget.


21
00:00:59,760 --> 00:01:02,329 line:-1
We returned one entry from our provider...


22
00:01:03,430 --> 00:01:05,199 line:-1
but we could have returned many.


23
00:01:05,632 --> 00:01:08,235 line:-2
The big question
is what happens at the end?


24
00:01:08,602 --> 00:01:10,437 line:-1
How do we provide more entries?


25
00:01:12,039 --> 00:01:14,942 line:-2
The answer is that we pick
a TimelineReloadPolicy.


26
00:01:16,009 --> 00:01:18,045 line:-1
The first one, atEnd,


27
00:01:18,278 --> 00:01:21,849 line:-2
tells WidgetKit that when the last entry
of a timeline is displayed,


28
00:01:21,915 --> 00:01:23,584 line:-1
to start scheduling an update.


29
00:01:24,618 --> 00:01:25,919 line:-1
When that update happens,


30
00:01:25,986 --> 00:01:30,424 line:-2
our timeline method will be called again,
allowing us to return more entries.


31
00:01:31,458 --> 00:01:34,094 line:-1
Similarly, "after" tells WidgetKit


32
00:01:34,161 --> 00:01:36,997 line:-2
to start scheduling an update
at the date provided.


33
00:01:37,631 --> 00:01:40,501 line:0
Let's say we passed in
an after date of 10:00 PM.


34
00:01:41,468 --> 00:01:45,038 line:0
Then, WidgetKit will schedule an update
for 10:00 PM,


35
00:01:45,105 --> 00:01:49,743 line:0
regardless of how far in the future
or past other entries in the timeline are.


36
00:01:50,644 --> 00:01:52,379 line:-1
Our last option is "never."


37
00:01:52,813 --> 00:01:56,917 line:-2
"Never" means that the system
will not independently update a widget.


38
00:01:56,984 --> 00:01:59,586 line:-2
It is up to us
to explicitly tell the widget


39
00:01:59,653 --> 00:02:02,422 line:-1
when to reload via the widget center API.


40
00:02:03,724 --> 00:02:07,594 line:-2
Note that there may be many timelines
active in the system at a time,


41
00:02:07,661 --> 00:02:09,630 line:-1
each with its own reload policy.


42
00:02:10,097 --> 00:02:12,633 line:-2
In order to provide
the best user experience,


43
00:02:12,699 --> 00:02:14,201 line:-1
and provide widgets updates


44
00:02:14,268 --> 00:02:16,870 line:-2
as close to when the user
will see them as possible,


45
00:02:17,037 --> 00:02:19,540 line:-2
the system intelligently
schedules updates.


46
00:02:20,340 --> 00:02:22,709 line:-1
This means "atEnd" and "after"


47
00:02:22,776 --> 00:02:25,746 line:-2
represent the earliest times
a widget can be refreshed.


48
00:02:26,680 --> 00:02:29,917 line:-2
Widgets can be configurable
right on the Home Screen.


49
00:02:30,784 --> 00:02:34,221 line:-2
WidgetKit configuration
is driven by SiriKit,


50
00:02:34,288 --> 00:02:36,590 line:-2
which means that
just by having configuration,


51
00:02:36,657 --> 00:02:39,927 line:-2
our widget is eligible
for intelligent system behaviors.


52
00:02:40,427 --> 00:02:43,931 line:-2
The core technology for configuration
is INIntents,


53
00:02:43,997 --> 00:02:45,666 line:-1
specifically custom intents.


54
00:02:46,700 --> 00:02:48,635 line:0
For a deep dive into these subjects,


55
00:02:48,702 --> 00:02:51,238 line:0
see the configuration
and intelligence presentation


56
00:02:51,305 --> 00:02:53,106 line:0
from this year's WWDC.


57
00:02:54,675 --> 00:02:57,911 line:-2
Widgets do not have animation
or custom interactions,


58
00:02:57,978 --> 00:03:00,747 line:-2
but we can deep link from our widget
into our app.


59
00:03:01,782 --> 00:03:04,918 line:-2
SystemSmall widgets
are one large tap area,


60
00:03:05,219 --> 00:03:10,390 line:-2
while systemMedium and systemLarge
can use the new SwiftUI link API


61
00:03:10,457 --> 00:03:12,926 line:-2
to create tappable zones
within the widget.


62
00:03:14,394 --> 00:03:16,096 line:-1
This session is a code-along.


63
00:03:16,163 --> 00:03:20,000 line:-2
We're picking up from where we left off
on the first widgets code-along session,


64
00:03:20,067 --> 00:03:23,337 line:-2
so if you've been following along so far,
you're in the right spot.


65
00:03:23,403 --> 00:03:25,038 line:-1
If not, don't worry,


66
00:03:25,105 --> 00:03:28,208 line:-2
you can pick up from the Part 2 target
in the sample project.


67
00:03:32,813 --> 00:03:36,283 line:-2
Since we're covering a lot of subjects
in this session, I've made a checklist.


68
00:03:37,718 --> 00:03:40,754 line:-2
We're starting in Part 2,
so let's jump in.


69
00:03:40,821 --> 00:03:41,822 line:-1
[clicks mouse]


70
00:03:46,493 --> 00:03:50,430 line:-2
In our previous session, we limited
our widget to just systemSmall.


71
00:03:50,497 --> 00:03:53,967 line:-2
I have an idea for how to update it
to work in the medium size as well,


72
00:03:54,034 --> 00:03:55,102 line:-1
so let's do that.


73
00:03:59,039 --> 00:04:02,242 line:-2
First, we need to update
our supported families.


74
00:04:02,543 --> 00:04:05,612 line:-2
So we need to support systemSmall,
and systemMedium.


75
00:04:07,414 --> 00:04:11,385 line:-2
Now, we need to know which family
our view is being drawn in.


76
00:04:13,687 --> 00:04:17,891 line:-2
WidgetKit provides a widgetFamily
environment value that we can use.


77
00:04:27,634 --> 00:04:32,639 line:-2
Now, we can just switch over that family
and decide which view we want to return.


78
00:04:46,687 --> 00:04:48,488 line:-1
We can move our AvatarView.


79
00:04:53,393 --> 00:04:56,830 line:-2
So for systemSmall,
we're returning our same AvatarView,


80
00:04:57,397 --> 00:04:59,633 line:-2
and in our other case,
we'll return something new.


81
00:05:03,303 --> 00:05:05,038 line:-1
I used a snippet here,


82
00:05:05,105 --> 00:05:08,342 line:-2
but this is just the same AvatarView
we were using before


83
00:05:09,009 --> 00:05:11,612 line:-1
in an HStack with some text next to it,


84
00:05:11,678 --> 00:05:13,914 line:-1
and that text is our character's bio.


85
00:05:14,548 --> 00:05:17,317 line:-2
In order to add a little bit
of visual interest,


86
00:05:17,384 --> 00:05:19,219 line:-1
I've added a background color as well.


87
00:05:19,286 --> 00:05:22,589 line:-2
So let's go ahead and do that
for our systemSmall.


88
00:05:23,056 --> 00:05:24,658 line:-1
I like using this trick


89
00:05:25,058 --> 00:05:28,028 line:-2
where I embed in an HStack,
but I don't actually want an HStack.


90
00:05:28,095 --> 00:05:29,663 line:-1
I want a ZStack.


91
00:05:29,730 --> 00:05:32,299 line:-2
So we can just use
the embed in HStack shortcut


92
00:05:32,366 --> 00:05:34,401 line:-1
and change that to a ZStack


93
00:05:34,468 --> 00:05:36,603 line:-1
and add a background color the same way.


94
00:05:37,304 --> 00:05:40,974 line:-2
And now that we have a background color,
we need a foreground color as well.


95
00:05:45,646 --> 00:05:48,549 line:-2
So let's take a look
at what that looks like in our preview.


96
00:05:49,783 --> 00:05:53,086 line:-2
So notice in our preview,
we're returning our AvatarView.


97
00:05:53,787 --> 00:05:57,858 line:-2
But our entry actually returns two
different views based on widgetFamily.


98
00:05:57,925 --> 00:06:00,527 line:-2
So let's just return
our entry view directly instead.


99
00:06:19,646 --> 00:06:25,118 line:-2
We'll want to update both our placeholder
and our primary at the same time.


100
00:06:36,597 --> 00:06:38,565 line:-1
You'll notice that our PlaceholderView...


101
00:06:39,600 --> 00:06:42,703 line:-2
is always returning an AvatarView
like our preview was.


102
00:06:43,103 --> 00:06:46,340 line:-2
Instead, we want it to return
our EntryView the same way.


103
00:06:48,675 --> 00:06:50,511 line:-1
So let's look at that in our preview.


104
00:07:00,521 --> 00:07:02,890 line:-1
Great. Now we have a medium-size view,


105
00:07:02,956 --> 00:07:07,528 line:-2
and our preview was automatically updated
to reflect the new content.


106
00:07:07,961 --> 00:07:10,097 line:-2
Let's Build and Run this,
and see it in action.


107
00:07:10,931 --> 00:07:11,932 line:-1
[clicks]


108
00:07:13,700 --> 00:07:14,701 line:-1
[clicks]


109
00:07:16,937 --> 00:07:19,206 line:-1
Here's our Emoji Rangers app that we love.


110
00:07:21,642 --> 00:07:23,710 line:-1
And now, when I go to the widget gallery,


111
00:07:23,777 --> 00:07:27,981 line:-2
I can add a small or a medium widget
to my Home Screen.


112
00:07:33,987 --> 00:07:35,122 line:-1
So that's families.


113
00:07:35,822 --> 00:07:38,025 line:-1
Let's talk about timelines for a second.


114
00:07:39,026 --> 00:07:40,460 line:-1
Like we talked about earlier,


115
00:07:40,527 --> 00:07:43,096 line:-2
WidgetKit is trying to schedule
all the widgets on the system


116
00:07:43,163 --> 00:07:44,464 line:-1
at the same time.


117
00:07:44,531 --> 00:07:47,868 line:-2
And we're sitting here asking to reload
when we don't even need to.


118
00:07:48,502 --> 00:07:50,771 line:-1
We know our character's healing over time.


119
00:07:50,838 --> 00:07:53,106 line:-2
We even know exactly
when they will be fully healed.


120
00:07:53,173 --> 00:07:54,541 line:-1
There's a timer right there.


121
00:07:54,875 --> 00:07:58,946 line:-2
What we can do is generate a full timeline
out until the character's healed,


122
00:07:59,012 --> 00:08:01,348 line:-2
and we can fill that timeline
with more entries


123
00:08:01,415 --> 00:08:03,183 line:-1
than would have been fetched otherwise.


124
00:08:03,250 --> 00:08:05,185 line:-1
That sounds ideal, so let's do that.


125
00:08:14,294 --> 00:08:16,864 line:-2
I use a snippet,
and I hope you're following along,


126
00:08:16,930 --> 00:08:18,866 line:-1
so I'll cover each line while you type.


127
00:08:19,766 --> 00:08:22,302 line:-1
First, we have our selectedCharacter,


128
00:08:23,070 --> 00:08:26,840 line:-2
and we have the endDate we know
when our character will be fully healed.


129
00:08:27,574 --> 00:08:30,277 line:-2
We're going to provide updates
on one-minute intervals,


130
00:08:30,344 --> 00:08:32,513 line:-2
and we're going to start
at the currentDate.


131
00:08:34,414 --> 00:08:36,383 line:-1
We start with an empty array of entries.


132
00:08:37,551 --> 00:08:40,754 line:-2
And while our currentDate
hasn't yet reached our endDate,


133
00:08:40,821 --> 00:08:43,256 line:-2
we create a new entry
with the currentDate,


134
00:08:43,724 --> 00:08:46,026 line:-2
step the currentDate forward
by one minute,


135
00:08:46,627 --> 00:08:48,161 line:-1
and add that entry.


136
00:08:48,962 --> 00:08:51,865 line:-1
So now, we have a full timeline


137
00:08:52,299 --> 00:08:58,138 line:-2
and WidgetKit won't attempt to reload us
until that timeline is exhausted.


138
00:09:00,307 --> 00:09:02,910 line:-2
We talked about intelligent
system behavior before.


139
00:09:03,110 --> 00:09:06,313 line:-2
One thing that means
is if our widget is in a stack,


140
00:09:06,380 --> 00:09:08,949 line:-1
the system can intelligently rotate to it.


141
00:09:09,483 --> 00:09:13,020 line:-2
We can give the system hints about times
we think it should prioritize our widget


142
00:09:13,086 --> 00:09:14,421 line:-1
using "relevance."


143
00:09:14,488 --> 00:09:16,023 line:-1
You may have noticed relevance


144
00:09:16,089 --> 00:09:18,559 line:-2
as an optional property
on timeline entry already.


145
00:09:18,625 --> 00:09:20,060 line:-1
Let's go ahead and add it.


146
00:09:30,470 --> 00:09:34,141 line:-2
Note, the range of relevance values
is set by us.


147
00:09:34,208 --> 00:09:37,978 line:-2
Since our character, being fully healed,
is the most important state,


148
00:09:38,045 --> 00:09:40,948 line:-2
we can just use the health level directly
as our relevance.


149
00:09:42,349 --> 00:09:45,619 line:-2
So we can pass our relevance
to our sample entry here.


150
00:09:49,556 --> 00:09:52,559 line:-2
And now, we have a full timeline
with relevance.


151
00:09:53,060 --> 00:09:54,261 line:-1
And that's timelines.


152
00:09:56,196 --> 00:09:59,299 line:-2
Now, our widget is only showing
Power Panda.


153
00:09:59,633 --> 00:10:01,068 line:-1
But there are two other heroes.


154
00:10:01,134 --> 00:10:04,238 line:-2
That's unfair because both of them
saved the day as well.


155
00:10:04,471 --> 00:10:07,808 line:-2
Let's make which hero the widget displays
a configuration option.


156
00:10:08,242 --> 00:10:11,478 line:-2
I've already added an intent definition
to this project.


157
00:10:11,845 --> 00:10:13,680 line:-1
But here's how you would do it fresh.


158
00:10:13,881 --> 00:10:15,949 line:-1
You go to File, New File,


159
00:10:16,917 --> 00:10:18,151 line:-1
Search for Intent.


160
00:10:20,521 --> 00:10:23,423 line:-1
And add a SiriKit Intent Definition file.


161
00:10:26,527 --> 00:10:29,229 line:-2
I've already added it,
so I'm not going to do that here.


162
00:10:29,796 --> 00:10:33,300 line:-2
But one thing we want to double-check
is that our target membership


163
00:10:33,367 --> 00:10:36,403 line:-1
includes both the widget and the app.


164
00:10:38,939 --> 00:10:43,377 line:-2
So the Intent Definition file
has a few fields we need to fill out.


165
00:10:44,778 --> 00:10:48,849 line:-2
Because widgets display information,
our category is information view.


166
00:10:49,683 --> 00:10:51,685 line:-1
We have a custom title and description.


167
00:10:52,186 --> 00:10:54,521 line:-2
And we need to make sure
that we check this box


168
00:10:54,588 --> 00:10:57,257 line:-1
to let our intent be eligible for widgets.


169
00:10:59,026 --> 00:11:02,429 line:-1
Our intent has one parameter named "hero."


170
00:11:02,796 --> 00:11:05,199 line:-1
And that parameter is an enum.


171
00:11:06,066 --> 00:11:11,138 line:-2
And we can set what values
our enum provides in the enum editor.


172
00:11:11,205 --> 00:11:13,507 line:-1
Here I've already added Panda and Egghead,


173
00:11:13,574 --> 00:11:15,209 line:-1
but we also need to add Spouty.


174
00:11:15,275 --> 00:11:16,944 line:-1
[typing]


175
00:11:20,447 --> 00:11:22,583 line:-1
So now my intent definition is complete.


176
00:11:23,717 --> 00:11:26,854 line:-2
How do we make our widget
use our intent definition?


177
00:11:27,955 --> 00:11:29,389 line:-1
Back in our widget...


178
00:11:31,758 --> 00:11:34,828 line:-1
we need to change our widget type...


179
00:11:35,929 --> 00:11:39,633 line:-2
from being a static configuration
to an intent configuration.


180
00:11:41,401 --> 00:11:43,604 line:-1
This requires one extra argument.


181
00:11:43,837 --> 00:11:47,574 line:-2
And I'm going to let Xcode tell me
exactly what it is by building...


182
00:11:47,641 --> 00:11:49,076 line:-1
[clicking]


183
00:11:49,142 --> 00:11:50,744 line:-1
...and applying this fix-it.


184
00:11:52,913 --> 00:11:58,652 line:-2
And we can use
our CharacterSelectionIntent.


185
00:12:02,589 --> 00:12:07,494 line:-2
And an intent configuration
needs a matching intent timeline provider.


186
00:12:08,228 --> 00:12:10,797 line:-2
So up at the top,
we can change our timeline provider


187
00:12:10,864 --> 00:12:12,799 line:-1
to be an intent timeline provider.


188
00:12:15,736 --> 00:12:19,540 line:-2
And an intent timeline provider
passes one extra argument


189
00:12:19,606 --> 00:12:22,342 line:-1
to its snapshot and timeline methods.


190
00:12:25,879 --> 00:12:27,314 line:-1
And that's the configuration.


191
00:12:27,814 --> 00:12:31,118 line:-2
We added it to snapshot,
and we also need to add it to timeline.


192
00:12:37,824 --> 00:12:41,295 line:-2
Now we just need a map
from the configuration to a character.


193
00:12:43,964 --> 00:12:48,035 line:-2
Note that these enum values look the same,
but one is from the intent definition,


194
00:12:48,101 --> 00:12:50,437 line:-2
and one is our character
detail definition.


195
00:12:50,504 --> 00:12:52,906 line:-2
Now we just need to set
the selected character


196
00:12:52,973 --> 00:12:54,541 line:-1
for the character of our intent.


197
00:13:03,350 --> 00:13:05,719 line:-2
Now let's Build and Run it
and see it in action.


198
00:13:15,495 --> 00:13:18,365 line:-2
Now when I add Emoji Rangers widget
from the gallery,


199
00:13:18,432 --> 00:13:20,067 line:-1
it defaults to Power Panda.


200
00:13:24,638 --> 00:13:27,841 line:-2
But when I long press on it,
I have this new "Edit Widget" option.


201
00:13:27,908 --> 00:13:30,544 line:-1
When I tap that, my widget flips around,


202
00:13:30,611 --> 00:13:34,014 line:-2
and I can select between Power Panda,
Egghead and Spouty.


203
00:13:35,916 --> 00:13:37,918 line:-1
And I want Spouty on my Home Screen.


204
00:13:38,685 --> 00:13:40,320 line:-1
So that's configuration.


205
00:13:42,389 --> 00:13:43,790 line:-1
So this is super cool,


206
00:13:43,857 --> 00:13:47,227 line:-2
but I'm kind of expecting to jump directly
into the characters' detail screen,


207
00:13:47,294 --> 00:13:49,763 line:-2
now that I can pick
exactly which character is showing,


208
00:13:49,830 --> 00:13:51,398 line:-1
and doing that is super easy.


209
00:13:51,798 --> 00:13:55,302 line:-2
We just add a widgetURL modifier
onto our view.


210
00:14:04,778 --> 00:14:08,115 line:-2
And we do that for both our systemSmall
and our systemMedium views.


211
00:14:10,250 --> 00:14:12,119 line:-1
Now, when I Build and run...


212
00:14:19,826 --> 00:14:21,728 line:-1
when I add my Emoji Ranger widget...


213
00:14:23,096 --> 00:14:25,866 line:-2
when I tap on it,
now I go directly into Power Panda.


214
00:14:26,867 --> 00:14:29,636 line:-1
And if I switch my favorite Ranger...


215
00:14:33,674 --> 00:14:36,009 line:-2
I'll go directly
into their information as well.


216
00:14:36,844 --> 00:14:37,878 line:-1
Fantastic.


217
00:14:38,445 --> 00:14:41,515 line:-2
So now,
we've built a fully-featured widget


218
00:14:41,582 --> 00:14:45,252 line:-2
that supports multiple families,
has a full timeline,


219
00:14:45,819 --> 00:14:50,090 line:-2
supports user configuration,
and deep links into its host app.


220
00:14:50,791 --> 00:14:53,227 line:0
There's one more section
of this Code-Along


221
00:14:53,293 --> 00:14:55,262 line:0
that I would love for you to join me on.


222
00:14:55,462 --> 00:14:57,798 line:0
For insight on how to approach
widget design,


223
00:14:57,865 --> 00:14:59,533 line:0
see the "Designing Great Widgets" talk.


224
00:14:59,600 --> 00:15:00,734 line:0
And my teammate, Nils,


225
00:15:00,801 --> 00:15:03,604 line:0
is giving a talk about how to make
the most of SwiftUI and widgets


226
00:15:03,670 --> 00:15:05,205 line:0
to really nail those designs.


227
00:15:06,039 --> 00:15:08,442 line:-1
Thank you and have a great WWDC.

