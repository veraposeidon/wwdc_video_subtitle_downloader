1
00:00:03,871 --> 00:00:06,673 line:-1
Hello and welcome to WWDC.


2
00:00:08,175 --> 00:00:12,045 line:0
Hello. My name is Nick Teissler,
and I'm a Cocoa Engineer.


3
00:00:12,713 --> 00:00:15,616 line:0
Later, I'll be joined by my colleague,
Jake Carter.


4
00:00:21,488 --> 00:00:23,390 line:-1
Today, we're going to tell you


5
00:00:23,457 --> 00:00:26,593 line:-2
how to optimize the interface
of your Mac Catalyst app.


6
00:00:27,895 --> 00:00:32,766 line:-2
The next level of Mac Catalyst app
is what we call "Optimized for Mac."


7
00:00:33,767 --> 00:00:37,137 line:-2
Optimizing for Mac gives you
Mac-like visuals and controls


8
00:00:37,204 --> 00:00:40,574 line:-2
that aren't available to Catalyst apps
scaled to match the iPad.


9
00:00:42,009 --> 00:00:45,546 line:-2
Opting in to optimized for Mac
is a build setting change


10
00:00:45,612 --> 00:00:47,281 line:-1
that takes effect at launch time.


11
00:00:47,981 --> 00:00:51,818 line:-2
An app optimized for Mac
launches in the Mac idiom.


12
00:00:51,885 --> 00:00:56,456 line:-2
Catalyst apps scaled to match the iPad
launch in the iPad idiom.


13
00:00:57,925 --> 00:01:01,295 line:-2
This particular setting
won't have any compile time implications.


14
00:01:01,361 --> 00:01:04,164 line:-2
So you won't have build errors
or framework issues


15
00:01:04,230 --> 00:01:07,100 line:-2
if you're optimizing a Catalyst app
scaled for iPad.


16
00:01:08,402 --> 00:01:10,571 line:-2
And we recommend
you start with a Catalyst app


17
00:01:10,637 --> 00:01:13,473 line:-2
that has already gone some work
to bring it to the Mac.


18
00:01:14,074 --> 00:01:16,777 line:-2
There's a lot you should do
before optimizing for the Mac,


19
00:01:16,844 --> 00:01:19,746 line:-2
like adding menu bar actions
with keyboard shortcuts


20
00:01:19,813 --> 00:01:24,651 line:-2
or handling right clicks in your interface
with the UIContextMenuInteraction APIs.


21
00:01:26,386 --> 00:01:29,790 line:0
See these sessions from WWDC 2019


22
00:01:29,857 --> 00:01:32,226 line:0
that review features you can add
to your Catalyst app


23
00:01:32,292 --> 00:01:35,095 line:0
before optimizing the interface for Mac.


24
00:01:35,829 --> 00:01:39,666 line:-2
So let's look at what we mean
when we say "Optimized for Mac".


25
00:01:39,733 --> 00:01:41,702 line:-1
What exactly is getting optimized?


26
00:01:42,603 --> 00:01:46,139 line:-2
Optimizing for the Mac
is all about more Mac-like visuals.


27
00:01:47,040 --> 00:01:51,378 line:0
So, when you bring your iPad app over
as an optimized Catalyst app,


28
00:01:51,445 --> 00:01:53,547 line:0
we render that content 1:1.


29
00:01:54,915 --> 00:01:58,018 line:0
Compare that to the 77% downscale


30
00:01:58,085 --> 00:02:01,522 line:0
when Catalyst apps are adjusted
to match your iPad views.


31
00:02:01,588 --> 00:02:05,993 line:0
In that case, 100 points in your code
becomes 77 points onscreen.


32
00:02:07,327 --> 00:02:09,162 line:0
When optimized for Mac,


33
00:02:09,229 --> 00:02:13,066 line:0
100 points in your code is always
equivalent to 100 points onscreen.


34
00:02:13,834 --> 00:02:16,036 line:0
Not scaling your content paves the way


35
00:02:16,103 --> 00:02:18,906 line:0
for many more visual improvements
throughout an app.


36
00:02:24,178 --> 00:02:28,282 line:0
If you use controls
like UIButtons, UISlider, UISwitch,


37
00:02:28,348 --> 00:02:30,651 line:0
UIActivityIndicator and more,


38
00:02:30,717 --> 00:02:33,754 line:0
these will all render
as macOS system controls.


39
00:02:34,721 --> 00:02:37,191 line:0
Here, you see a system iOS button


40
00:02:37,257 --> 00:02:40,160 line:0
that will render as a system Mac button
when optimized.


41
00:02:41,495 --> 00:02:44,698 line:-2
These new control appearances
will have sizes and metrics


42
00:02:44,765 --> 00:02:46,433 line:-1
matching controls on the Mac.


43
00:02:46,967 --> 00:02:50,003 line:0
It's likely they won't be the same size
as your iPad appearance.


44
00:02:50,070 --> 00:02:52,072 line:0
So your layouts might be
a little bit altered.


45
00:02:53,373 --> 00:02:57,144 line:0
Catalyst Optimized for Mac
adjusts text style sizes


46
00:02:57,211 --> 00:03:00,948 line:0
like body, title and callout
to match the Mac.


47
00:03:01,014 --> 00:03:06,220 line:0
Unlike Catalyst apps scaled for iPad,
the rendered text is no longer scaled.


48
00:03:06,286 --> 00:03:08,689 line:0
The text style sizes are different.


49
00:03:10,224 --> 00:03:13,594 line:0
For example, the body text style
returns 17 points


50
00:03:13,660 --> 00:03:16,163 line:0
on Catalyst apps scaled to match the iPad,


51
00:03:16,230 --> 00:03:20,934 line:0
whereas it returns 13 points
on Catalyst apps optimized for Mac.


52
00:03:21,001 --> 00:03:26,039 line:0
The true font sizes will look noticeably
sharper than the scaled font sizes.


53
00:03:27,875 --> 00:03:30,477 line:0
This also means
if you have hardcoded font sizes,


54
00:03:30,544 --> 00:03:32,379 line:0
these will not be adjusted,


55
00:03:32,446 --> 00:03:35,749 line:0
and your UILabel or UITextField
might feel sad.


56
00:03:36,483 --> 00:03:41,555 line:0
A small part of it, probably about 23%,
won't feel home when it's on the Mac.


57
00:03:44,625 --> 00:03:47,427 line:0
A final more straightforward change
to be aware of


58
00:03:47,494 --> 00:03:49,496 line:0
is that Auto Layout will use Mac spacing


59
00:03:49,563 --> 00:03:52,633 line:0
if you're building constraints
with the system spacing methods.


60
00:03:53,267 --> 00:03:57,237 line:0
The system spacing is typically larger
on the Mac than in iOS.


61
00:03:58,839 --> 00:04:01,375 line:0
So these are the high-level features
that you will get


62
00:04:01,441 --> 00:04:04,978 line:0
if you choose to optimize
your Mac Catalyst app for the Mac.


63
00:04:06,980 --> 00:04:10,984 line:-2
It may take a minute to mentally
position Catalyst optimized for Mac


64
00:04:11,051 --> 00:04:15,556 line:-2
in the growing set of options
available to you to bring apps to the Mac.


65
00:04:16,190 --> 00:04:17,925 line:-1
Catalyst Optimized for Mac


66
00:04:17,991 --> 00:04:21,094 line:-2
is an alternative
to Catalyst scaled to match the iPad.


67
00:04:21,161 --> 00:04:22,296 line:-1
You can't have both.


68
00:04:22,362 --> 00:04:24,565 line:-1
Let's compare the two more directly.


69
00:04:26,800 --> 00:04:29,436 line:-1
So, first, one doesn't obsolete the other.


70
00:04:29,503 --> 00:04:33,040 line:-2
Scaling to match the iPad might certainly
be a better fit for your app,


71
00:04:33,106 --> 00:04:36,143 line:-2
and we'll continue to see great apps
running in both idioms.


72
00:04:38,078 --> 00:04:41,048 line:-2
The scaled option
is a fast path to a Mac app.


73
00:04:41,114 --> 00:04:43,050 line:-1
It will get your app running on the Mac.


74
00:04:43,116 --> 00:04:46,086 line:-2
You shouldn't need to refactor
all of your app's views


75
00:04:46,153 --> 00:04:48,488 line:-2
to get a great version of your app
on the Mac.


76
00:04:49,389 --> 00:04:52,593 line:-2
And that's part of the philosophy
behind scaled apps.


77
00:04:52,659 --> 00:04:56,230 line:-2
So you make some trade-offs to get
your Mac app up and running quickly.


78
00:04:57,397 --> 00:05:00,367 line:-2
The trade-offs you make
might be more or less desirable


79
00:05:00,434 --> 00:05:02,202 line:-1
depending on the specifics of your app.


80
00:05:02,936 --> 00:05:05,506 line:-2
Optimizing for Mac
is a possible next step.


81
00:05:07,674 --> 00:05:10,711 line:-2
A scaled app
favors compatibility with your iPad app.


82
00:05:10,777 --> 00:05:13,046 line:-1
Catalyst does everything it can do


83
00:05:13,113 --> 00:05:15,983 line:-2
so you don't have to make
app-wide code changes


84
00:05:16,049 --> 00:05:18,685 line:-2
to get an appearance
that fits in great on the Mac.


85
00:05:19,987 --> 00:05:23,857 line:-2
An optimized app
favors an authentic Mac look and feel.


86
00:05:23,924 --> 00:05:27,427 line:-2
Catalyst swaps in Mac controls
and unscaled text sizes


87
00:05:27,494 --> 00:05:30,564 line:-2
to make an app's interface
look its absolute best on the Mac.


88
00:05:32,399 --> 00:05:34,868 line:-2
Because scaled apps favor
this compatibility


89
00:05:34,935 --> 00:05:36,737 line:-1
with the iPad version of your app,


90
00:05:36,803 --> 00:05:39,306 line:-2
your layouts are preserved
as much as possible.


91
00:05:39,840 --> 00:05:42,075 line:-2
Most times,
you don't have to make any changes


92
00:05:42,142 --> 00:05:44,244 line:-2
for your view
to lay out properly on the Mac.


93
00:05:45,812 --> 00:05:49,683 line:-2
But given that optimizing gives you
a completely different look for controls,


94
00:05:49,750 --> 00:05:51,151 line:-1
you'll need to do some layout work


95
00:05:51,218 --> 00:05:54,755 line:-2
where you've made implicit assumptions
of the sizes of controls.


96
00:05:55,355 --> 00:05:59,459 line:-2
Now that we understand what is optimized
and the differences between the idioms,


97
00:05:59,526 --> 00:06:03,630 line:-2
we should start thinking about which apps
can gain the most from opting in.


98
00:06:03,697 --> 00:06:06,466 line:-2
Which apps want to be optimized
to look their best?


99
00:06:07,868 --> 00:06:12,206 line:-2
Apps that show lots of text
can see noticeable visual improvements.


100
00:06:12,272 --> 00:06:14,575 line:-2
This is because
they get the true text sizes


101
00:06:14,641 --> 00:06:16,176 line:-1
instead of scaled text.


102
00:06:18,178 --> 00:06:22,816 line:-2
Swift Playgrounds is a Catalyst app
optimized for Mac this year on Big Sur.


103
00:06:22,883 --> 00:06:26,887 line:-2
The rich text editor in Swift Playgrounds
drives the app's visual appeal,


104
00:06:26,954 --> 00:06:30,490 line:-2
so it makes sense to undertake the work
and see these benefits.


105
00:06:32,226 --> 00:06:36,263 line:-2
Apps with certain emphases on graphics
have potential for improvements too.


106
00:06:37,698 --> 00:06:40,667 line:-2
Graphics intensive apps
that use Metal or SceneKit


107
00:06:40,734 --> 00:06:43,070 line:-2
saw significant improvement
in our experience.


108
00:06:43,971 --> 00:06:47,341 line:-2
Swift Playgrounds uses SceneKit
in their "Learn to Code" series.


109
00:06:47,407 --> 00:06:49,409 line:-1
After optimizing for Mac,


110
00:06:49,476 --> 00:06:52,846 line:-2
Swift Playgrounds saw higher frame rates
and lower power consumption


111
00:06:52,913 --> 00:06:56,483 line:-2
on Macs with both integrated
and discrete graphics systems.


112
00:06:58,585 --> 00:07:03,023 line:-2
Another type of graphics emphasis
is highly custom, detailed artwork.


113
00:07:03,690 --> 00:07:08,028 line:-2
The differences between
scaled Catalyst assets and optimized ones


114
00:07:08,095 --> 00:07:10,531 line:-2
is identical to the visual differences
you see


115
00:07:10,597 --> 00:07:13,867 line:-2
if you display a png
scaled to fit a particular size


116
00:07:13,934 --> 00:07:15,903 line:-1
rather than at its natural dimensions.


117
00:07:16,937 --> 00:07:19,173 line:-2
You can quickly evaluate
how your app will look


118
00:07:19,239 --> 00:07:21,542 line:-1
comparing the two versions side by side.


119
00:07:22,376 --> 00:07:25,546 line:-2
The artwork in MapKit
is a great example of this.


120
00:07:25,612 --> 00:07:29,716 line:-2
MapKit has literally a world's worth
of custom designs and icons.


121
00:07:30,317 --> 00:07:31,985 line:-1
Looking at the magnified versions


122
00:07:32,052 --> 00:07:35,689 line:-2
of the pixel-perfect iconography
created for place marks,


123
00:07:35,756 --> 00:07:39,059 line:-2
we can see the difference
between scaled and unscaled artwork.


124
00:07:40,527 --> 00:07:44,765 line:-2
On the left here is the scaled icon that
the California Academy of Sciences uses.


125
00:07:45,432 --> 00:07:47,301 line:-1
On the right is the unscaled image.


126
00:07:48,068 --> 00:07:51,438 line:-2
See how you can count the windows
and pillars at the front of the building.


127
00:07:52,005 --> 00:07:54,942 line:-2
Some of that fine detail
is lost in a scaled graphic.


128
00:07:57,010 --> 00:07:58,912 line:-1
Just down the road is the de Young Museum.


129
00:07:59,680 --> 00:08:03,417 line:-2
Here, too, the unscaled asset
and even the text is sharper.


130
00:08:04,918 --> 00:08:06,787 line:-1
Finally, the Guggenheim Museum.


131
00:08:06,854 --> 00:08:11,325 line:-2
The rounded architecture is represented
more fully in the unscaled MapKit asset.


132
00:08:13,026 --> 00:08:15,229 line:-2
Icons are rendered
much smaller on the screen,


133
00:08:15,295 --> 00:08:17,731 line:-2
so the visual differences
aren't as obvious to users


134
00:08:17,798 --> 00:08:19,499 line:-1
as we've displayed them here.


135
00:08:22,336 --> 00:08:24,771 line:-2
But this still generalizes
throughout MapKit.


136
00:08:24,838 --> 00:08:27,474 line:-1
In dense cities like Paris, at a low zoom,


137
00:08:27,541 --> 00:08:30,210 line:-2
having that resolution to show
detailed road networks


138
00:08:30,277 --> 00:08:33,013 line:-2
is a strong motivator
for optimizing your Catalyst app


139
00:08:33,080 --> 00:08:34,948 line:-1
if you use MapKit prominently.


140
00:08:36,015 --> 00:08:38,217 line:-2
Another trait that can make an app
a good candidate


141
00:08:38,284 --> 00:08:39,953 line:-1
is having many control views.


142
00:08:40,020 --> 00:08:42,923 line:-2
Like a popover
showing some adjustable value.


143
00:08:42,990 --> 00:08:47,427 line:-2
That view would likely fit in better
if optimized for Mac.


144
00:08:47,494 --> 00:08:51,265 line:-2
Maps takes advantage of this,
using the checkbox here,


145
00:08:51,331 --> 00:08:53,734 line:-2
which fits in better
than a sliding switch might.


146
00:08:54,668 --> 00:08:57,104 line:-2
Finally, the state
of your third-party dependencies


147
00:08:57,171 --> 00:08:59,873 line:-2
could be a limiting factor
for your apps' candidacy.


148
00:08:59,940 --> 00:09:02,176 line:-2
For all of you
framework developers out there,


149
00:09:02,242 --> 00:09:05,145 line:-2
supporting a Catalyst target
might not be enough.


150
00:09:05,546 --> 00:09:08,315 line:-2
Especially if your framework
is UI-focused,


151
00:09:08,382 --> 00:09:11,351 line:-2
you likely need to support
optimizing for the Mac,


152
00:09:11,418 --> 00:09:13,120 line:-1
so you don't limit your clients.


153
00:09:13,187 --> 00:09:15,956 line:-2
Jake will show you
how to make changes to your code


154
00:09:16,023 --> 00:09:18,225 line:-1
to support the Mac idiom later.


155
00:09:19,259 --> 00:09:21,094 line:-1
Now we'll look at how optimizing for Mac


156
00:09:21,161 --> 00:09:23,664 line:-2
affects a view
from an app scaled to match the iPad.


157
00:09:24,464 --> 00:09:28,435 line:-2
On the left is a simple view showing
the beginning of a recipe for a tart.


158
00:09:29,136 --> 00:09:33,006 line:-2
The layout is built with stack views
and contains five elements:


159
00:09:33,073 --> 00:09:37,477 line:-2
a button, a label, a slider,
an image and a text view.


160
00:09:38,512 --> 00:09:42,950 line:-2
Watch closely as I optimize this for Mac
without making any layout adjustments.


161
00:09:46,019 --> 00:09:48,388 line:-1
Phew, looks like our layout held up okay.


162
00:09:50,190 --> 00:09:52,092 line:-1
The first difference that jumps out to you


163
00:09:52,159 --> 00:09:55,162 line:-2
is probably the system iOS button
on the left


164
00:09:55,229 --> 00:09:58,232 line:-2
changing to the system Mac button
on the right.


165
00:09:58,298 --> 00:10:00,901 line:-2
This causes the button
to have a different size at run time


166
00:10:00,968 --> 00:10:04,538 line:-2
and, depending on how you layout
your views, possibly a different origin.


167
00:10:06,039 --> 00:10:08,475 line:-1
Let me draw your attention to the windows.


168
00:10:08,542 --> 00:10:11,345 line:-2
They're exactly the same size in points
on the Mac screen.


169
00:10:12,713 --> 00:10:13,881 line:-1
Remember, though,


170
00:10:13,947 --> 00:10:17,851 line:-2
the point sizes of the window on the left
and all of its contents


171
00:10:17,918 --> 00:10:22,155 line:-2
are actually 77% of the sizes
in your app's code.


172
00:10:25,392 --> 00:10:29,129 line:-2
This is the behavior from
the first release of Catalyst on Catalina,


173
00:10:29,196 --> 00:10:32,099 line:-2
but keep that in mind as we go through
the rest of the changes.


174
00:10:33,467 --> 00:10:36,670 line:-2
Next, take a look
at the leading edge of each window.


175
00:10:36,737 --> 00:10:40,307 line:-2
The space between the leading edge
of the window and the text view


176
00:10:40,374 --> 00:10:43,177 line:-2
is noticeably smaller on the left
than on the right.


177
00:10:43,243 --> 00:10:47,814 line:-2
As we saw before, system spacing values
are generally a bit larger on the Mac.


178
00:10:49,349 --> 00:10:50,350 line:-1
This means, though,


179
00:10:50,417 --> 00:10:54,054 line:-2
that there is more horizontal padding
on the view optimized for Mac.


180
00:10:54,922 --> 00:10:58,258 line:-2
This gives that view
less available width to lay out in.


181
00:10:58,325 --> 00:11:01,428 line:-2
And this is the reason
the text has wrapped an additional line,


182
00:11:01,495 --> 00:11:03,630 line:-1
and the reason the slider is more narrow.


183
00:11:05,399 --> 00:11:08,535 line:-2
Strangely, though,
even given less available width,


184
00:11:08,602 --> 00:11:11,672 line:-2
the image view has taken up more space
when optimized for Mac.


185
00:11:12,639 --> 00:11:15,375 line:-2
It's laid out with required width
and height constraints


186
00:11:15,442 --> 00:11:17,744 line:-1
matching its intrinsic content size.


187
00:11:18,812 --> 00:11:22,816 line:-2
Knowing that, you can guess
why it's wider when optimized for Mac.


188
00:11:22,883 --> 00:11:26,320 line:-2
The image has gone
from being 77% of its natural size


189
00:11:26,386 --> 00:11:28,422 line:-1
to 100% of its natural size.


190
00:11:29,790 --> 00:11:32,726 line:-2
You can handle this different ways
depending on your circumstances.


191
00:11:33,360 --> 00:11:38,932 line:-2
The optimal way is using Asset Catalogs
to provide a Mac or iPad-specific asset.


192
00:11:39,933 --> 00:11:42,202 line:-1
If you don't have a properly-sized asset,


193
00:11:42,269 --> 00:11:44,438 line:-2
you can use
Interface Builder's trait variations


194
00:11:44,505 --> 00:11:47,207 line:-2
to assign a different size
to either idiom.


195
00:11:48,041 --> 00:11:50,644 line:-2
This fully explains
the appearance of the slider.


196
00:11:50,711 --> 00:11:54,948 line:-2
The slider is configured
to take up the available space remaining.


197
00:11:55,015 --> 00:11:57,584 line:-1
The increased padding and wider image


198
00:11:57,651 --> 00:12:00,554 line:-2
have decreased the space
available to the slider.


199
00:12:04,791 --> 00:12:07,728 line:-1
In fact, the optimized for Mac slider


200
00:12:07,794 --> 00:12:10,330 line:-2
is shorter by the sum
of the increased padding


201
00:12:10,397 --> 00:12:12,399 line:-1
and the increased width of the image.


202
00:12:15,702 --> 00:12:19,206 line:-2
That's enough layout for now.
Let's take a look back at appearances.


203
00:12:20,440 --> 00:12:23,043 line:-2
The slider on the left
is a system UISlider


204
00:12:23,110 --> 00:12:24,845 line:-1
with no customizations.


205
00:12:25,846 --> 00:12:26,880 line:-1
On the right,


206
00:12:26,947 --> 00:12:31,151 line:-2
you see it's adopted the appearance
of the newly-designed macOS Slider.


207
00:12:34,588 --> 00:12:38,358 line:-2
Notice some subtle differences
in the track height and knob shadow.


208
00:12:38,425 --> 00:12:41,395 line:-2
The important part for you
and the people who use your app


209
00:12:41,461 --> 00:12:44,731 line:-2
is that this slider is identical
to other sliders on the Mac.


210
00:12:45,532 --> 00:12:47,935 line:-2
One thing that isn't obvious
from these screenshots


211
00:12:48,001 --> 00:12:50,137 line:-1
is the difference in text rendering.


212
00:12:50,204 --> 00:12:53,440 line:-2
The text view is using
the body text style.


213
00:12:53,507 --> 00:12:57,344 line:-2
On the left, that will be a font size
of 17 points, the iPad standard.


214
00:12:58,245 --> 00:13:00,981 line:-1
On the right, 13, the Mac standard.


215
00:13:01,048 --> 00:13:04,918 line:-2
As we know,
the fonts match visually in size.


216
00:13:04,985 --> 00:13:09,723 line:-2
However, since the view optimized for Mac
is using a true 13-point font,


217
00:13:09,790 --> 00:13:11,925 line:-1
the text is sharper.


218
00:13:11,992 --> 00:13:13,961 line:-1
Remember that the additional line of wrap


219
00:13:14,027 --> 00:13:17,030 line:-2
is because of the decreased
horizontal width available


220
00:13:17,097 --> 00:13:19,967 line:-2
and doesn't have anything to do
with the text rendering or sizing.


221
00:13:20,834 --> 00:13:22,769 line:-2
If you're inclined toward
concrete numbers,


222
00:13:22,836 --> 00:13:25,372 line:-2
I've annotated this slide
with the layout values


223
00:13:25,439 --> 00:13:28,375 line:-2
so you can convince yourself
that all of these changes make sense.


224
00:13:29,843 --> 00:13:31,545 line:-1
Taking all of this together,


225
00:13:31,612 --> 00:13:34,181 line:-2
you can see that you are committing to
a certain amount of work


226
00:13:34,248 --> 00:13:38,218 line:-2
refactoring even some simple layouts
when you elect to optimize for the Mac.


227
00:13:39,820 --> 00:13:41,655 line:-1
Let's tidy up this Mac layout.


228
00:13:43,156 --> 00:13:46,226 line:-1
That app is truly at home on the Mac.


229
00:13:46,293 --> 00:13:49,763 line:-2
So we just saw that it's less about
applying rules of thumb to your layouts


230
00:13:49,830 --> 00:13:54,101 line:-2
and more about understanding
which elements will be changing, and how.


231
00:13:54,168 --> 00:13:58,438 line:-2
The payoff is this wonderful app
that looks completely at home to users.


232
00:14:00,040 --> 00:14:02,009 line:-1
Before we leave this view behind,


233
00:14:02,075 --> 00:14:04,444 line:-2
take a look
at that "Get Cooking" button on the left.


234
00:14:05,312 --> 00:14:08,949 line:-2
Its tint color is set to systemTeal,
but on the right,


235
00:14:09,016 --> 00:14:12,352 line:-2
that tint color doesn't carry over
to the Mac appearance at all.


236
00:14:12,419 --> 00:14:17,024 line:-2
Tinted buttons aren't standard on the Mac
and users aren't accustomed to them,


237
00:14:17,090 --> 00:14:20,194 line:-2
so that tint color gets dropped
for the optimal Mac appearance.


238
00:14:20,260 --> 00:14:24,665 line:-2
In fact, there's a larger category
of control customizations


239
00:14:24,731 --> 00:14:27,334 line:-2
that are unavailable
when optimizing for Mac,


240
00:14:27,401 --> 00:14:32,105 line:-2
either because the customization
is typical to the iPad and not the Mac,


241
00:14:32,172 --> 00:14:36,009 line:-2
or because their usage isn't supported
with the Mac visual appearance.


242
00:14:37,277 --> 00:14:41,815 line:-2
It's common to attach a gesture recognizer
to a UIButton to detect a long press


243
00:14:42,349 --> 00:14:44,685 line:-2
and overload the button
with multiple actions.


244
00:14:45,352 --> 00:14:48,889 line:-2
Your gesture recognizers
on UIButtons will not get called


245
00:14:48,956 --> 00:14:52,359 line:-2
if you're using a system button
that has adopted the Mac appearance.


246
00:14:53,460 --> 00:14:56,263 line:-1
You can handle this in a number of ways.


247
00:14:56,330 --> 00:15:01,034 line:-2
First, make sure you aren't bringing
an iPad interaction over to the Mac.


248
00:15:01,101 --> 00:15:05,272 line:-2
This might be better handled
with a menu item in the app's menu bar,


249
00:15:05,339 --> 00:15:09,676 line:-2
or by attaching a menu to the UIButton
using the UIButton menu property


250
00:15:09,743 --> 00:15:11,578 line:-1
like Maps does here.


251
00:15:12,045 --> 00:15:13,547 line:-1
When optimizing your app,


252
00:15:13,614 --> 00:15:17,651 line:-2
we recommend auditing controls
customized at the event handling level.


253
00:15:18,485 --> 00:15:22,656 line:-2
This includes gesture recognizers
on controls like UIButtons,


254
00:15:22,723 --> 00:15:25,792 line:-2
and overrides
of UIControl event tracking methods


255
00:15:25,859 --> 00:15:28,228 line:-1
like beginTrackingTouchWithEvent.


256
00:15:28,862 --> 00:15:31,565 line:-2
If the gesture recognizer
is non-negotiable,


257
00:15:31,632 --> 00:15:36,036 line:-2
remember that the custom button type
is not rendered with the Mac appearance


258
00:15:36,103 --> 00:15:39,072 line:-2
and will maintain the same event tracking
as on the iPad


259
00:15:39,139 --> 00:15:42,342 line:-2
and your gesture recognizer
won't lose functionality.


260
00:15:42,409 --> 00:15:45,245 line:-2
Look at this customized slider
to the right, here.


261
00:15:45,312 --> 00:15:47,614 line:-1
I've really taken off with it.


262
00:15:47,681 --> 00:15:52,085 line:-2
It has a white minimumTrackTint color,
and blue maximumTrackTintColor,


263
00:15:52,152 --> 00:15:54,988 line:-2
and has replaced the circular thumb
with an airplane.


264
00:15:56,256 --> 00:15:59,359 line:-2
You might experience some turbulence
when you bring this to the Mac.


265
00:16:00,227 --> 00:16:03,997 line:-2
In the Mac idiom,
these customizations are unavailable.


266
00:16:04,064 --> 00:16:08,802 line:-2
An effective mental model here
is that when using system controls,


267
00:16:08,869 --> 00:16:10,971 line:-2
you are limited
to appearance customizations


268
00:16:11,038 --> 00:16:15,409 line:-2
where standard Mac appearances
overlap available UIKit API.


269
00:16:16,743 --> 00:16:20,247 line:-2
I'll now hand it over to Jake who will
take you through making some changes


270
00:16:20,314 --> 00:16:23,584 line:-2
to a scaled Catalyst app
to optimize it for the Mac.


271
00:16:25,319 --> 00:16:28,989 line:-2
Thanks, Nick. Hi, my name is Jake,
and I'm an engineer on the Xcode team.


272
00:16:29,690 --> 00:16:32,226 line:-2
Today I'd like to show you
a simple Mac Catalyst cookbook app


273
00:16:32,292 --> 00:16:33,727 line:-1
that some of us have been working on.


274
00:16:34,294 --> 00:16:35,729 line:-1
Let's jump right into a demo.


275
00:16:39,900 --> 00:16:41,535 line:-2
First, let me give you
a quick tour of the app


276
00:16:41,602 --> 00:16:43,237 line:-1
before we optimize it for the Mac.


277
00:16:43,303 --> 00:16:47,174 line:-2
On the left, we have a sidebar with
easy access to common areas of our app,


278
00:16:47,241 --> 00:16:49,042 line:-1
like "All Recipes" and "Favorites."


279
00:16:49,109 --> 00:16:51,879 line:-2
Next, we have a list of recipes,
and finally, the recipe itself.


280
00:16:53,046 --> 00:16:56,049 line:-2
We can add new recipes
by pressing this "New Recipes" button.


281
00:16:58,352 --> 00:17:01,722 line:-2
Here, we can add details of our recipe
along with a photo.


282
00:17:01,788 --> 00:17:03,357 line:-2
This app already feels pretty good
on the Mac,


283
00:17:03,423 --> 00:17:05,392 line:-2
but there are some things
that feel out of place,


284
00:17:05,459 --> 00:17:08,127 line:-2
like the iOS-style button
and the navigation bar.


285
00:17:09,029 --> 00:17:11,131 line:-2
Let's switch over to Xcode
and get started.


286
00:17:15,569 --> 00:17:17,637 line:-1
This is the target's general settings.


287
00:17:17,704 --> 00:17:20,973 line:-2
Here you'll notice this new pop-up button
next to the "Mac" checkbox.


288
00:17:23,911 --> 00:17:27,114 line:-2
By default, "Scale Interface
to Match iPad" will be selected.


289
00:17:27,181 --> 00:17:30,484 line:-2
New with Xcode 12 and Mac OS 10.16 is
the "Optimize Interface for Mac" option.


290
00:17:32,586 --> 00:17:34,054 line:-1
Let's choose that.


291
00:17:37,624 --> 00:17:40,861 line:-2
What this will do is tell UIKit that
we want our app to run with the Mac idiom


292
00:17:40,928 --> 00:17:42,663 line:-2
which will give it
a more Mac-like look and feel.


293
00:17:42,729 --> 00:17:44,698 line:-1
Let's Build and Run to see what's changed.


294
00:17:47,801 --> 00:17:51,205 line:-2
I've set this up so that we can view
both the "Scale Interface to Match iPad"


295
00:17:51,271 --> 00:17:54,141 line:-2
and the "Optimize Interface for Mac"
versions at the same time.


296
00:17:54,875 --> 00:17:57,144 line:-2
Immediately,
you'll notice that the window is larger.


297
00:17:57,211 --> 00:18:00,447 line:-2
But not only that, the contents
inside the window is also larger,


298
00:18:00,514 --> 00:18:02,549 line:-2
and that's because
it's no longer being scaled.


299
00:18:03,984 --> 00:18:06,653 line:-2
The next thing I'd like to point out
is this "Timers" button.


300
00:18:06,720 --> 00:18:09,189 line:-2
Just by making the change
to "Optimize Interface for Mac,"


301
00:18:09,256 --> 00:18:11,992 line:-2
we're automatically getting
a more Mac-like look for this button.


302
00:18:13,026 --> 00:18:15,028 line:-1
There's also something else going on here.


303
00:18:15,095 --> 00:18:18,365 line:-2
Not only does the button look bigger,
because it's no longer being scaled,


304
00:18:18,432 --> 00:18:20,067 line:-1
it's also using different metrics.


305
00:18:20,133 --> 00:18:21,635 line:-1
What do I mean by that?


306
00:18:22,803 --> 00:18:25,839 line:-2
What I mean is that some of the sizes
have actually changed.


307
00:18:25,906 --> 00:18:28,108 line:-1
For example, the font is bigger,


308
00:18:28,175 --> 00:18:30,844 line:-2
and there's more padding
between the text and the button border.


309
00:18:32,746 --> 00:18:34,147 line:-1
Because of these types of changes,


310
00:18:34,214 --> 00:18:36,350 line:-2
the frame of the button
is actually larger.


311
00:18:36,416 --> 00:18:38,886 line:-2
It's these changes in metrics
that you should keep in mind


312
00:18:38,952 --> 00:18:41,288 line:-2
when auditing your layouts
after making this change.


313
00:18:42,422 --> 00:18:45,192 line:-2
Okay, let's look a little closer
at this list of recipes.


314
00:18:45,826 --> 00:18:48,729 line:-2
We know that the recipe images on the left
and the "Favorite" icon on the right


315
00:18:48,795 --> 00:18:51,732 line:-2
are slightly bigger,
because they're no longer being scaled.


316
00:18:52,332 --> 00:18:56,336 line:-2
But if you look closer, you may notice
that the size of the text did not change.


317
00:18:56,403 --> 00:18:58,572 line:-2
And that's because
we've used a dynamic text style


318
00:18:58,639 --> 00:19:00,908 line:-2
which automatically adjusts
for optimal legibility.


319
00:19:01,775 --> 00:19:04,511 line:-2
The size of the text looks good,
but I think the list would look better


320
00:19:04,578 --> 00:19:06,680 line:-2
if the recipe images
and the "Favorite" icon


321
00:19:06,747 --> 00:19:09,383 line:-2
were a little smaller,
like they were before.


322
00:19:09,449 --> 00:19:12,352 line:-2
Let's head back into Xcode
and get this list looking better.


323
00:19:13,587 --> 00:19:16,757 line:-2
This is the view controller
that manages that list of recipes.


324
00:19:16,823 --> 00:19:19,092 line:-2
If we look through the code here
that creates the layout,


325
00:19:19,159 --> 00:19:22,262 line:-2
we can see that we're using
an absolute height of 100 points.


326
00:19:23,597 --> 00:19:25,899 line:-2
Because of the way I've set up
the Auto Layout constraints,


327
00:19:25,966 --> 00:19:27,267 line:-1
if this height were smaller,


328
00:19:27,334 --> 00:19:29,436 line:-2
it would cause the recipe images
to be smaller, too.


329
00:19:30,904 --> 00:19:32,339 line:-1
I was playing around with this earlier


330
00:19:32,406 --> 00:19:34,174 line:-2
and found that 80 points
looks really nice.


331
00:19:38,412 --> 00:19:39,746 line:-1
[taps keyboard]


332
00:19:41,915 --> 00:19:44,284 line:-2
So I'll update this line of code
to check the idiom.


333
00:19:44,351 --> 00:19:46,587 line:-2
If it's "Mac,"
we set the height to 80 points,


334
00:19:46,653 --> 00:19:48,388 line:-1
otherwise we leave it at 100.


335
00:19:48,856 --> 00:19:50,357 line:-1
Now for the Favorite icon.


336
00:19:52,392 --> 00:19:55,095 line:-2
For that I've specified an image here
in the Asset Catalog.


337
00:19:55,162 --> 00:19:57,164 line:-2
I've only filled in
the "Universal" version,


338
00:19:57,231 --> 00:19:59,299 line:-2
so it's getting used
everywhere the app can run.


339
00:19:59,366 --> 00:20:02,069 line:-1
In this case, on iPhone, iPad and Mac.


340
00:20:02,836 --> 00:20:06,106 line:-2
As we saw, this version of the image
looked too big next to the text


341
00:20:06,173 --> 00:20:07,241 line:-1
when running on the Mac.


342
00:20:08,408 --> 00:20:10,277 line:-2
Now that our app is running
in the Mac idiom,


343
00:20:10,344 --> 00:20:14,381 line:-2
it'll have access to the Mac assets
defined here in the Asset Catalog.


344
00:20:15,015 --> 00:20:16,617 line:-1
This will let us specialize the image


345
00:20:16,683 --> 00:20:19,086 line:-2
and use one that's been handcrafted
to the correct size.


346
00:20:20,821 --> 00:20:22,956 line:-2
To enable the Mac assets,
all we need to do


347
00:20:23,023 --> 00:20:26,860 line:-2
is click this "Mac" checkbox here
in the "Devices" section of the inspector.


348
00:20:27,761 --> 00:20:30,297 line:-2
Now we can drag in
the Mac versions of our icon.


349
00:20:40,674 --> 00:20:44,244 line:-2
That's it. Let's Build and Run
and take a look at that list again.


350
00:20:44,311 --> 00:20:46,313 line:-2
Now you can see
that our cell height is shorter,


351
00:20:46,380 --> 00:20:49,082 line:-2
which caused our recipe images
to be smaller also.


352
00:20:49,149 --> 00:20:52,853 line:-2
And that our Favorite icon on the right
is a more appropriate size for the text


353
00:20:52,920 --> 00:20:55,222 line:-2
because it's using
that specialized Mac asset.


354
00:20:56,290 --> 00:20:58,559 line:-2
Let's move on and take a look
at the "New Recipe" screen.


355
00:21:02,329 --> 00:21:05,299 line:-2
Okay, we got that new Mac style
for this "Choose Photo" button,


356
00:21:05,365 --> 00:21:06,366 line:-1
which is really nice.


357
00:21:06,433 --> 00:21:08,969 line:-2
But there are some things here
that feel out of place on the Mac,


358
00:21:09,036 --> 00:21:10,704 line:-1
like this top navigation bar.


359
00:21:10,771 --> 00:21:13,273 line:-2
Navigation view controllers
and their navigation bars


360
00:21:13,340 --> 00:21:16,310 line:-2
are really useful for transitioning
between child view controllers,


361
00:21:16,376 --> 00:21:18,779 line:-2
so that you can show more data
on small screens.


362
00:21:18,846 --> 00:21:21,648 line:-2
This type of interaction
feels out of place on a Mac, though.


363
00:21:21,715 --> 00:21:24,985 line:-2
It's also common to put frequently used
buttons in the navigation bar.


364
00:21:25,052 --> 00:21:28,121 line:-2
On a Mac, the toolbar,
up here where you see the window title,


365
00:21:28,188 --> 00:21:30,257 line:-1
is a better choice for this type of UI.


366
00:21:31,058 --> 00:21:33,093 line:-2
So, the "Save" and "Cancel" buttons
should be moved,


367
00:21:33,160 --> 00:21:35,562 line:-2
either up to the toolbar,
or down into the view


368
00:21:35,629 --> 00:21:38,098 line:-2
and the navigation bar
should go away completely.


369
00:21:38,765 --> 00:21:40,367 line:-1
Because the "Save" and "Cancel" buttons


370
00:21:40,434 --> 00:21:42,302 line:-2
are acting on the data
entered in this view,


371
00:21:42,369 --> 00:21:44,805 line:-2
and because both of them will end up
dismissing the window,


372
00:21:44,872 --> 00:21:47,841 line:-2
it would be more Mac-like
to move them to the bottom of this view.


373
00:21:48,308 --> 00:21:49,643 line:-1
I also see a bug.


374
00:21:49,710 --> 00:21:51,512 line:-1
Now that we're running in the Mac idiom,


375
00:21:51,578 --> 00:21:54,214 line:-2
the "Title" label is bigger
than the other two labels.


376
00:21:54,281 --> 00:21:56,283 line:-2
Let's go back to Xcode
and get these fixed up.


377
00:22:01,922 --> 00:22:05,626 line:-2
This is the RecipeEditorViewController
which is used in that "New Recipe" window.


378
00:22:05,692 --> 00:22:08,562 line:-2
What I'd like to do is hide the
navigation bar when running on the Mac.


379
00:22:13,100 --> 00:22:14,768 line:-1
To fix that, we'll check the idiom.


380
00:22:14,835 --> 00:22:18,205 line:-2
If it's Mac, we hide the navigation bar.
Pretty simple.


381
00:22:18,272 --> 00:22:20,040 line:-1
Next, let's take a look at the storyboard.


382
00:22:26,980 --> 00:22:28,916 line:0
Now that our project supports
the Mac idiom,


383
00:22:28,982 --> 00:22:32,152 line:0
you'll notice this new idiom chooser
in the device bar here at the bottom.


384
00:22:34,588 --> 00:22:36,690 line:0
Watch the view above
as I switch it to the "Mac."


385
00:22:40,294 --> 00:22:42,029 line:0
You'll notice the canvas has updated.


386
00:22:42,095 --> 00:22:43,564 line:0
The controls are now more Mac-like,


387
00:22:43,630 --> 00:22:45,799 line:0
and are using the Mac standard spacing
and metrics.


388
00:22:48,035 --> 00:22:50,504 line:-2
The first thing I'd like to fix here
is the "Title" label.


389
00:22:50,571 --> 00:22:52,606 line:-2
At run time,
it was bigger than the other two.


390
00:22:54,074 --> 00:22:56,543 line:-2
If we take a look at the "Font" attribute
in the inspector,


391
00:22:56,610 --> 00:23:00,214 line:-2
you can see that it's set up to use
a 17-point system font.


392
00:23:00,647 --> 00:23:01,915 line:-1
Like Nick mentioned earlier,


393
00:23:01,982 --> 00:23:04,685 line:-2
this was getting scaled down
to around 13 points.


394
00:23:05,552 --> 00:23:08,155 line:-2
But now that we've chosen
the "Optimize Interface for Mac" option,


395
00:23:08,222 --> 00:23:10,724 line:-2
it's getting rendered
at its unscaled 17 points.


396
00:23:11,091 --> 00:23:14,161 line:-2
So that's why this one is bigger,
but why haven't the other two changed?


397
00:23:16,363 --> 00:23:17,931 line:-1
If we select one of the other two labels,


398
00:23:17,998 --> 00:23:20,901 line:-2
we can see that it's set up to use
the "Body" text style.


399
00:23:20,968 --> 00:23:23,670 line:-2
Like I mentioned earlier,
these text styles are dynamic


400
00:23:23,737 --> 00:23:27,508 line:-2
and will adjust to be the appropriate size
for the platform they're rendered on.


401
00:23:28,041 --> 00:23:31,144 line:-2
We highly recommend using
these text styles when you can.


402
00:23:31,712 --> 00:23:33,580 line:-2
Let's go ahead
and update the "Title" label


403
00:23:33,647 --> 00:23:35,182 line:-1
to use the "Body" text style as well.


404
00:23:42,623 --> 00:23:44,892 line:-2
Next, let's address
the "Save" and "Cancel" buttons.


405
00:23:44,958 --> 00:23:47,327 line:-2
Remember that we've already hidden
the navigation bar in code,


406
00:23:47,394 --> 00:23:49,963 line:-2
so even though it does show up here,
it won't at run time.


407
00:23:50,297 --> 00:23:53,166 line:-2
Let's add new "Save" and "Cancel" buttons
to the bottom of this view


408
00:23:53,233 --> 00:23:55,302 line:-2
and set them up
to only show in the Mac idiom.


409
00:23:59,206 --> 00:24:02,676 line:-2
First, I'll resize this bottom text view
to make room for our new buttons.


410
00:24:08,916 --> 00:24:11,051 line:-2
When I do,
Interface Builder alerts me to the fact


411
00:24:11,118 --> 00:24:12,819 line:-2
that the frames in the canvas
no longer match


412
00:24:12,886 --> 00:24:14,488 line:-1
the frames computed by Auto Layout.


413
00:24:15,556 --> 00:24:17,925 line:-2
I'll leave this for now
so we have room for our buttons.


414
00:24:19,693 --> 00:24:21,395 line:-2
Now, I'll go ahead
and drag out a stack view...


415
00:24:25,666 --> 00:24:26,900 line:-1
and pin it to the bottom right.


416
00:24:33,674 --> 00:24:36,844 line:-2
I'll adjust its spacing
to use the system standard spacing...


417
00:24:40,614 --> 00:24:43,183 line:-2
and set its "Distribution"
to "Fill Equally"


418
00:24:43,250 --> 00:24:44,818 line:-1
so that the buttons are the same size.


419
00:24:47,387 --> 00:24:49,556 line:-2
Next, I'll drag out our buttons
and update their titles.


420
00:25:02,736 --> 00:25:04,004 line:-1
I only want these buttons to show up


421
00:25:04,071 --> 00:25:06,106 line:-1
when the app is running in the Mac idiom.


422
00:25:06,173 --> 00:25:08,008 line:-2
So I'll select
the containing stack view...


423
00:25:11,678 --> 00:25:13,247 line:-1
and I'll use this "Installed" attribute


424
00:25:13,313 --> 00:25:15,148 line:-2
here at the bottom
of the Attributes inspector.


425
00:25:17,818 --> 00:25:20,454 line:-2
For a view,
this attribute specifies whether or not


426
00:25:20,521 --> 00:25:22,623 line:-2
it will be added to the view hierarchy
at run time.


427
00:25:22,689 --> 00:25:24,157 line:-1
By having "Installed" checked,


428
00:25:24,224 --> 00:25:27,127 line:-2
this stack view will always be added
to the view hierarchy,


429
00:25:27,194 --> 00:25:29,029 line:-1
but we can add a trait variation


430
00:25:29,096 --> 00:25:31,131 line:-2
by clicking the plus button
down here on the left.


431
00:25:35,669 --> 00:25:38,438 line:-2
This will let us vary the attribute
based on these traits.


432
00:25:38,505 --> 00:25:43,177 line:-2
New in Xcode 12, we've added the ability
to vary the traits based on the Mac idiom.


433
00:25:43,243 --> 00:25:45,612 line:-2
I'll go ahead and add a variation
based on these traits.


434
00:25:50,651 --> 00:25:53,987 line:-2
We'll leave "Installed" checked
for this new Mac idiom variation,


435
00:25:54,054 --> 00:25:55,589 line:-1
but uncheck it for the "Default" case.


436
00:25:59,326 --> 00:26:02,362 line:-2
Now these views will only be installed
when running in the Mac idiom.


437
00:26:04,164 --> 00:26:07,034 line:-2
Next, let's make sure that our text view
doesn't cover up our new buttons.


438
00:26:10,237 --> 00:26:12,873 line:-2
To do that, I'll Control-drag from it
to the stack view.


439
00:26:17,311 --> 00:26:19,213 line:0
When I hold the "Option" key
on the keyboard,


440
00:26:19,279 --> 00:26:20,280 line:0
the top choice changes


441
00:26:20,347 --> 00:26:23,717 line:0
from "Vertical Spacing"
to "Vertical Standard Spacing."


442
00:26:23,784 --> 00:26:24,785 line:0
I'll choose that one.


443
00:26:28,488 --> 00:26:29,489 line:-1
The constraint was added,


444
00:26:29,556 --> 00:26:31,491 line:-2
but some of our other constraints
turned red.


445
00:26:31,558 --> 00:26:33,727 line:-2
This means we have
unsatisfiable constraints.


446
00:26:34,862 --> 00:26:36,830 line:-2
If we look at the red constraints
at the bottom,


447
00:26:36,897 --> 00:26:38,699 line:-2
you can see that we still have
that 20pt spacing


448
00:26:38,765 --> 00:26:41,201 line:-2
between the text view
and the bottom of its superview.


449
00:26:41,268 --> 00:26:43,871 line:-2
This is conflicting
with the new constraint we just added.


450
00:26:48,675 --> 00:26:51,678 line:-2
We can't just delete this old constraint,
because when running on the iPad,


451
00:26:51,745 --> 00:26:53,280 line:-1
our new buttons won't be installed,


452
00:26:53,347 --> 00:26:56,583 line:-2
and we'll need some other way
to specify the height of this text view.


453
00:26:57,084 --> 00:26:58,652 line:-1
There are a couple ways we could fix this,


454
00:26:58,719 --> 00:27:01,321 line:-2
but I think what I'll do
is change the constraint's "Priority."


455
00:27:05,225 --> 00:27:06,627 line:-1
Currently it's set to "Required,"


456
00:27:06,693 --> 00:27:08,929 line:-2
but let's change it
to "High Priority" instead.


457
00:27:08,996 --> 00:27:11,398 line:-2
This way it'll be ignored
when it can't be satisfied.


458
00:27:15,369 --> 00:27:17,137 line:-1
We're back to all orange constraints,


459
00:27:17,204 --> 00:27:19,273 line:-2
so all we need to do
is click the "Update Frames" button


460
00:27:19,339 --> 00:27:20,474 line:-1
down here in the bottom right.


461
00:27:25,979 --> 00:27:28,882 line:-2
Now the constraints work
in both Mac and iPad idioms,


462
00:27:28,949 --> 00:27:32,386 line:-2
and we can verify that using
the idiom chooser in the device bar again.


463
00:27:37,791 --> 00:27:39,560 line:-2
Now when I bring up
the "New Recipe" window,


464
00:27:39,626 --> 00:27:41,895 line:-2
you can see that the "Title" label
is the appropriate size,


465
00:27:41,962 --> 00:27:43,463 line:-1
the navigation bar is hidden,


466
00:27:44,231 --> 00:27:46,567 line:-2
and we have the "Save" and "Cancel"
buttons at the bottom.


467
00:27:46,633 --> 00:27:49,169 line:-1
This feels much more Mac-like.


468
00:27:49,236 --> 00:27:51,004 line:-1
Let's go back to slides and recap.


469
00:27:52,306 --> 00:27:54,441 line:-2
So, by choosing
the "Optimize Interface for Mac" option,


470
00:27:54,508 --> 00:27:58,078 line:-2
you're telling UIKit you want your app
to run in the Mac idiom.


471
00:27:58,145 --> 00:28:01,381 line:-2
As we saw, this gives your application
a more Mac-like look and feel.


472
00:28:01,448 --> 00:28:02,850 line:-1
But it also means layout changes,


473
00:28:02,916 --> 00:28:05,953 line:-2
because the Mac standard spacing
and control metrics are being applied.


474
00:28:06,854 --> 00:28:10,624 line:-2
This means that controls, image views
and font sizes will be different.


475
00:28:10,691 --> 00:28:13,794 line:-2
So you really need to audit your layouts
after making this change.


476
00:28:14,494 --> 00:28:15,495 line:-1
One tip would be to check


477
00:28:15,562 --> 00:28:18,031 line:-2
for "unsatisfiable constraint" warnings
in the logs.


478
00:28:18,098 --> 00:28:21,502 line:-2
This can help find issues caused
by the changes to control sizes.


479
00:28:21,568 --> 00:28:24,404 line:-2
We also looked at providing Mac assets
in the Asset Catalog


480
00:28:24,471 --> 00:28:26,039 line:-2
to help with
some of these kinds of issues.


481
00:28:27,241 --> 00:28:30,444 line:-2
One thing to keep in mind here is that
if Mac assets can't be found,


482
00:28:30,511 --> 00:28:33,947 line:-2
the system will fall back
through "Mac Scaled" and "iPad" assets


483
00:28:34,014 --> 00:28:36,083 line:-1
before using the "Universal" assets.


484
00:28:36,750 --> 00:28:37,751 line:-1
As we saw in the demo,


485
00:28:37,818 --> 00:28:40,454 line:-2
it's likely the sizes of these assets
won't be optimal,


486
00:28:40,521 --> 00:28:44,491 line:-2
so make sure to audit your images and
provide Mac versions where appropriate.


487
00:28:45,125 --> 00:28:48,228 line:-2
Lastly, we looked at some paradigm
differences between Mac and iPad,


488
00:28:48,295 --> 00:28:50,797 line:-2
like the navigation bar
and button placement.


489
00:28:50,864 --> 00:28:52,699 line:-2
You should keep
these kinds of differences in mind


490
00:28:52,766 --> 00:28:54,501 line:-1
when designing your Mac Catalyst apps.


491
00:28:56,970 --> 00:28:59,673 line:-2
I would highly recommend reading
our Human Interface Guidelines


492
00:28:59,740 --> 00:29:03,243 line:-2
for more insight into designing apps
that feel truly great on the Mac.


493
00:29:04,912 --> 00:29:07,514 line:-2
While it is possible to back deploy
a Mac Catalyst app


494
00:29:07,581 --> 00:29:09,016 line:-1
that has been optimized for the Mac,


495
00:29:09,082 --> 00:29:10,951 line:-2
there are some things
you should keep in mind.


496
00:29:11,785 --> 00:29:13,086 line:-1
When running on Catalina,


497
00:29:13,153 --> 00:29:15,589 line:-2
these apps will not get
the new Mac-like look and feel.


498
00:29:15,656 --> 00:29:18,659 line:-2
It also means supporting
both the iPad and Mac idioms.


499
00:29:19,259 --> 00:29:21,595 line:-2
We found that a majority of the work
when back deploying


500
00:29:21,662 --> 00:29:25,199 line:-2
is making sure that your layouts
can handle the metrics in both idioms.


501
00:29:25,265 --> 00:29:28,335 line:-2
You'll also need to continue guarding
uses of frameworks and API


502
00:29:28,402 --> 00:29:29,803 line:-1
that aren't supported on the Mac.


503
00:29:31,405 --> 00:29:33,740 line:-2
Consider checking the idiom
on traitCollection...


504
00:29:36,910 --> 00:29:40,447 line:-2
or using conditional compilation blocks
to help with these sorts of things.


505
00:29:40,514 --> 00:29:43,083 line:-2
Keep in mind that
the conditional compilation block here


506
00:29:43,150 --> 00:29:44,918 line:-1
will be true regardless of idiom.


507
00:29:46,386 --> 00:29:49,122 line:-2
And in some cases, it may be appropriate
to use both techniques.


508
00:29:52,559 --> 00:29:54,561 line:-2
That's it for me.
I'll hand it back over to Nick


509
00:29:54,628 --> 00:29:57,798 line:-2
to tell you about SwiftUI
optimized for Mac. Nick.


510
00:29:58,632 --> 00:30:00,033 line:-1
Thanks for the demo, Jake.


511
00:30:00,100 --> 00:30:02,970 line:-2
That Cookbook app
fits right in on the Mac now.


512
00:30:03,971 --> 00:30:05,939 line:-1
You may know that SwiftUI is available


513
00:30:06,006 --> 00:30:08,775 line:-2
to Catalyst applications
scaled to match iPad.


514
00:30:09,643 --> 00:30:14,214 line:-2
SwiftUI is also available to use
in applications optimized for Mac.


515
00:30:14,281 --> 00:30:18,986 line:-2
SwiftUI takes a similar approach to UIKit
in Catalyst optimized for Mac,


516
00:30:19,052 --> 00:30:20,988 line:-1
but you tend to get more for free.


517
00:30:21,488 --> 00:30:25,425 line:-2
Its declarative syntax and layout
allows it to do more for your views


518
00:30:25,492 --> 00:30:27,227 line:-1
when optimizing them for the Mac.


519
00:30:29,530 --> 00:30:31,265 line:-1
If you've worked with SwiftUI,


520
00:30:31,331 --> 00:30:35,569 line:-2
you've seen how it already adjusts
your views on a context-aware basis.


521
00:30:36,370 --> 00:30:40,607 line:-2
For example, changing a button's style
if it's in a form or a menu.


522
00:30:41,141 --> 00:30:45,212 line:-2
SwiftUI also knows if views are being used
in the Mac idiom.


523
00:30:45,279 --> 00:30:47,514 line:-2
Just like your controls
change their appearance


524
00:30:47,581 --> 00:30:49,850 line:-1
for where they are in an iPadOS view,


525
00:30:49,917 --> 00:30:53,787 line:-2
so, too, will they represent themselves
differently optimized for Mac.


526
00:30:55,489 --> 00:30:57,791 line:-2
You can still expect to do
some layout work


527
00:30:57,858 --> 00:31:00,527 line:-2
to optimize SwiftUI interfaces
for the Mac.


528
00:31:01,094 --> 00:31:03,797 line:-2
Your SwiftUI layouts
will by and large shift


529
00:31:03,864 --> 00:31:08,035 line:-2
based off the containers you use
to compose your views.


530
00:31:08,101 --> 00:31:11,772 line:-2
As always, you can build more flexible
and reusable layouts,


531
00:31:11,839 --> 00:31:15,475 line:-2
keeping your views modular
and making proper use of containers.


532
00:31:16,476 --> 00:31:19,346 line:-2
Let's take a whirlwind tour
through some SwiftUI controls


533
00:31:19,413 --> 00:31:20,914 line:-1
and how their appearances change


534
00:31:20,981 --> 00:31:23,817 line:-2
from "scaled to match the iPad"
to "optimized for Mac."


535
00:31:24,751 --> 00:31:28,755 line:-2
This year, GroupBox is new
on iOS and iPadOS.


536
00:31:28,822 --> 00:31:31,925 line:-2
GroupBox is used
for layering structured content


537
00:31:31,992 --> 00:31:35,128 line:-2
and automatically receiving
the right semantic colors


538
00:31:35,195 --> 00:31:37,164 line:-1
as backgrounds for that content.


539
00:31:38,265 --> 00:31:44,137 line:-2
In this code sample, I've used a GroupBox
in a VStack nested in another GroupBox,


540
00:31:44,204 --> 00:31:47,241 line:-2
and the views have rendered automatically
with different background colors.


541
00:31:48,408 --> 00:31:51,745 line:-2
Your SwiftUI GroupBoxes
will appear as Mac GroupBoxes


542
00:31:51,812 --> 00:31:53,747 line:-1
when optimized for Mac.


543
00:31:53,814 --> 00:31:56,750 line:-2
This comes with some automatic padding
and layout adjustments.


544
00:31:58,519 --> 00:32:00,921 line:-1
Here, I've set up a Toggle in code


545
00:32:00,988 --> 00:32:04,691 line:-2
that uses the variable completed
as its Bool binding.


546
00:32:04,758 --> 00:32:09,229 line:-2
You'll see that the default representation
of a Toggle in SwiftUI on iPadOS


547
00:32:09,296 --> 00:32:11,198 line:-1
is the sliding switch.


548
00:32:12,799 --> 00:32:15,169 line:-2
We've already seen
that Mac Catalyst and UIKit


549
00:32:15,235 --> 00:32:18,839 line:-2
make the Mac checkboxes available,
and so does SwiftUI.


550
00:32:19,273 --> 00:32:20,974 line:-1
In Catalyst Optimized for Mac,


551
00:32:21,041 --> 00:32:23,610 line:-2
the default Toggle appearance
is a checkbox.


552
00:32:24,278 --> 00:32:27,681 line:-2
You can use the ToggleStyle structs
and ToggleStyle modifier


553
00:32:27,748 --> 00:32:30,851 line:-2
to specify a style
if the default isn't right for your case.


554
00:32:32,853 --> 00:32:37,357 line:-2
Similar to UIKit, system iOS buttons
will adopt the native Mac appearance.


555
00:32:37,424 --> 00:32:40,060 line:-2
You can even place SF Symbols
alongside them.


556
00:32:42,362 --> 00:32:45,832 line:-2
These are both definitely
fantastic buttons.


557
00:32:45,899 --> 00:32:49,570 line:-2
I don't know about you, but one of these
looks more clickable to me.


558
00:32:51,405 --> 00:32:53,340 line:-1
DatePicker is a little different.


559
00:32:53,774 --> 00:32:57,644 line:-2
On the right, you see the DatePicker
in both idioms of Catalyst.


560
00:32:57,711 --> 00:33:02,316 line:-2
The DefaultDatePickerStyle
renders identically across Catalyst.


561
00:33:02,382 --> 00:33:04,585 line:-2
Remember that here, too,
there are, of course,


562
00:33:04,651 --> 00:33:06,587 line:-1
other styles available to you.


563
00:33:06,653 --> 00:33:09,790 line:-2
The DefaultDatePickerStyle
is compact in both idioms.


564
00:33:11,959 --> 00:33:17,297 line:-2
This content view sets up a picker to pick
from the small, medium and large sizes.


565
00:33:17,364 --> 00:33:20,767 line:-2
Its binding is set up
through the property sizeIndex.


566
00:33:20,834 --> 00:33:23,337 line:-2
You could also bind via string values
or an enum.


567
00:33:24,771 --> 00:33:28,909 line:-2
When you optimize for Mac,
the Mac picker becomes available to you.


568
00:33:28,976 --> 00:33:32,279 line:-2
This is a control
users are very familiar with on the Mac,


569
00:33:32,346 --> 00:33:35,749 line:-2
and offers a much more Mac-like experience
than the scrolling picker.


570
00:33:36,617 --> 00:33:41,321 line:-2
Remember, the segmentedControlStyle
is an option on both platforms too.


571
00:33:42,689 --> 00:33:44,558 line:-1
One last control to mention.


572
00:33:44,625 --> 00:33:47,027 line:-2
You know that the system buttons
are available to you,


573
00:33:47,094 --> 00:33:51,098 line:-2
however, you also aren't sacrificing
any customizability


574
00:33:51,164 --> 00:33:52,833 line:-1
on your SwiftUI buttons.


575
00:33:53,734 --> 00:33:56,036 line:-2
If you aren't using
the system button appearance,


576
00:33:56,103 --> 00:33:58,272 line:-1
then you're using some custom body.


577
00:33:58,338 --> 00:34:02,809 line:-2
Hopefully, you're using SwiftUI's
ButtonStyle API as I've done here,


578
00:34:02,876 --> 00:34:05,846 line:-2
to make your button styles
flexible and reusable.


579
00:34:07,281 --> 00:34:10,684 line:-2
SwiftUI and Catalyst
know not to render custom buttons


580
00:34:10,751 --> 00:34:12,186 line:-1
with the Mac appearance,


581
00:34:12,252 --> 00:34:15,255 line:-2
so your custom buttons come across
exactly as they are.


582
00:34:16,590 --> 00:34:18,058 line:-1
I've taken some time to write


583
00:34:18,125 --> 00:34:21,360 line:-2
a fully custom
throwback NinetiesButtonStyle.


584
00:34:21,428 --> 00:34:23,697 line:-2
You can see I've applied it
as a view modifier


585
00:34:23,764 --> 00:34:26,099 line:-1
to the button in my ContentView's body.


586
00:34:26,166 --> 00:34:29,870 line:-2
Thanks to Catalyst,
I can have this on iOS and Mac


587
00:34:29,937 --> 00:34:32,739 line:-2
without needing to write
any additional code.


588
00:34:34,507 --> 00:34:39,079 line:-2
So I, like some of you, maybe,
have been experimenting with SwiftUI.


589
00:34:39,146 --> 00:34:43,382 line:-2
And you may know that SwiftUI
can run seamlessly in UIKit apps.


590
00:34:44,284 --> 00:34:46,485 line:-2
It's really easy
to build up a content view


591
00:34:46,553 --> 00:34:48,422 line:-1
in the SwiftUI previews canvas,


592
00:34:48,487 --> 00:34:50,824 line:-2
and then drop that
right into my UIKit code


593
00:34:50,891 --> 00:34:52,525 line:-1
with the UIHostingController.


594
00:34:53,793 --> 00:34:55,596 line:-1
I thought that this text-only view


595
00:34:55,661 --> 00:34:57,898 line:-2
from the Cookbook app
Jake was showing earlier


596
00:34:57,965 --> 00:34:59,132 line:-1
could use a makeover.


597
00:35:00,133 --> 00:35:04,104 line:-2
So I made this interactive recipe view
completely with SwiftUI.


598
00:35:04,171 --> 00:35:07,341 line:-2
It lets the user check off their progress
as they work through the recipe.


599
00:35:08,842 --> 00:35:12,379 line:-2
You can select which units of measurement
to use with a picker at the top.


600
00:35:13,947 --> 00:35:16,316 line:-2
Each instruction is contained
in a GroupBox...


601
00:35:17,551 --> 00:35:19,486 line:-1
and can be marked complete with a Toggle.


602
00:35:21,255 --> 00:35:24,591 line:-2
I've used a custom blue timer view
and custom SwiftUI button


603
00:35:24,658 --> 00:35:26,059 line:-1
to control that timer.


604
00:35:26,126 --> 00:35:28,862 line:-2
Now let's see
how this new iPad feature work


605
00:35:28,929 --> 00:35:32,466 line:-2
carries over
to our Catalyst app optimized for Mac.


606
00:35:33,233 --> 00:35:36,470 line:-2
Here's the app
with the plain text directions view.


607
00:35:36,537 --> 00:35:40,741 line:-2
And here it is with my iPad SwiftUI view
dropped right in,


608
00:35:40,807 --> 00:35:42,676 line:-1
no code changes at all.


609
00:35:42,743 --> 00:35:44,711 line:-1
I am really happy with these changes.


610
00:35:46,180 --> 00:35:49,349 line:-2
The picker has adopted
the default Mac appearance.


611
00:35:49,416 --> 00:35:53,253 line:-2
The iOS style GroupBoxes
are now using the Mac style.


612
00:35:53,320 --> 00:35:57,724 line:-2
Notice how using the GroupBox
also achieved a more Mac-like layout


613
00:35:57,791 --> 00:35:59,726 line:-2
that I otherwise would have
had to do myself.


614
00:36:01,762 --> 00:36:04,097 line:-1
The Mac GroupBox uses Mac metrics,


615
00:36:04,164 --> 00:36:06,633 line:-2
so it's a little bit more snug
around the views,


616
00:36:06,700 --> 00:36:09,503 line:-2
and the label of the GroupBox
has moved outside the box


617
00:36:09,570 --> 00:36:12,439 line:-2
which also affects
what completed instructions look like.


618
00:36:13,941 --> 00:36:16,610 line:-2
The sliding switches
are all now checkboxes,


619
00:36:17,444 --> 00:36:22,216 line:-2
and the labels of those checkboxes
are to the trailing edge of the box.


620
00:36:22,282 --> 00:36:25,686 line:-2
Those labels are also clickable
to toggle the checkbox,


621
00:36:25,752 --> 00:36:28,589 line:-2
and this is different
from a sliding switch's label behavior.


622
00:36:30,257 --> 00:36:33,594 line:-2
And my custom views are untouched
and scaled correctly.


623
00:36:36,196 --> 00:36:38,198 line:-1
I'm very excited with how easily


624
00:36:38,265 --> 00:36:41,435 line:-2
I was able to bring SwiftUI
right into this app


625
00:36:41,502 --> 00:36:44,505 line:-2
and make following our recipes easier
and more interactive


626
00:36:44,571 --> 00:36:47,441 line:-1
on the Mac and the iPad.


627
00:36:48,008 --> 00:36:50,010 line:-1
Let's review all that we've learned today.


628
00:36:50,644 --> 00:36:52,346 line:-1
You saw what you to expect to change


629
00:36:52,412 --> 00:36:54,982 line:-2
when you optimize
your Catalyst interfaces.


630
00:36:56,049 --> 00:36:58,151 line:-1
We went over traits that might make an app


631
00:36:58,218 --> 00:37:00,521 line:-2
a good candidate
for optimizing for the Mac.


632
00:37:01,555 --> 00:37:04,591 line:-2
Jake showed you
how to optimize your app in Xcode


633
00:37:04,658 --> 00:37:08,529 line:-2
using Interface Builder's trait variations
and idiom checks in code.


634
00:37:09,763 --> 00:37:13,567 line:0
Finally, we saw how SwiftUI
optimizes for Mac,


635
00:37:13,634 --> 00:37:15,302 line:0
and how easy it can be


636
00:37:15,369 --> 00:37:18,805 line:0
to integrate new SwiftUI views
into your UIKit app.


637
00:37:19,873 --> 00:37:21,074 line:-1
Thanks for watching.


638
00:37:21,141 --> 00:37:23,577 line:-1
Enjoy WWDC 2020.

