1
00:00:03,770 --> 00:00:06,673 line:-1
Hello and welcome to WWDC.


2
00:00:08,308 --> 00:00:09,676 line:0
Hello, everyone.


3
00:00:09,743 --> 00:00:12,679 line:0
My name is Karan MiÅ›ra,
and today I'd like to talk about


4
00:00:12,746 --> 00:00:16,315 line:0
how we can format data in our apps
to be friendly and understandable.


5
00:00:16,950 --> 00:00:20,921 line:-2
Every day, we use many apps which shows us
all different kinds of data.


6
00:00:20,988 --> 00:00:23,557 line:-2
Some apps, like Weather,
are full of different measurements.


7
00:00:24,424 --> 00:00:27,628 line:-2
Others, like Health,
show us some key statistics with trends.


8
00:00:28,495 --> 00:00:32,432 line:-2
And yet others, like Notes, may only
show us a simple date or time stamp.


9
00:00:32,900 --> 00:00:35,135 line:-2
No matter how prominently
the data is shown,


10
00:00:35,202 --> 00:00:36,603 line:-1
it's important to get it right


11
00:00:36,670 --> 00:00:39,907 line:-2
all the way from what units are used
to what formats are used.


12
00:00:40,340 --> 00:00:41,642 line:-1
And this is crucially important


13
00:00:41,708 --> 00:00:44,845 line:-2
regardless of whether the app
is available in just one language


14
00:00:44,912 --> 00:00:48,081 line:-2
or whether it's available
in dozens of different languages.


15
00:00:49,049 --> 00:00:53,620 line:-2
We also update the underlying algorithms
and data sets that power our formatters,


16
00:00:53,687 --> 00:00:56,657 line:-2
and one of our focus areas
has been expanding our support


17
00:00:56,723 --> 00:00:58,892 line:-1
for combinations of languages and regions.


18
00:00:58,959 --> 00:01:02,696 line:-2
Why? Because we're living
in an increasingly globalized world


19
00:01:02,763 --> 00:01:06,600 line:-2
and we find that people all over the world
are using their devices in languages


20
00:01:06,667 --> 00:01:09,336 line:-2
that may not be traditionally associated
with that region.


21
00:01:11,672 --> 00:01:16,376 line:-2
For example, someone living in Abu Dhabi
might be using their iPhone in French.


22
00:01:17,578 --> 00:01:20,280 line:-2
Before, this meant that
we would get number formats


23
00:01:20,347 --> 00:01:24,218 line:-2
that were intended for France
with the decimal separator as a comma,


24
00:01:24,284 --> 00:01:25,552 line:-1
as shown here in the Home App.


25
00:01:26,687 --> 00:01:31,892 line:-2
Now with iOS 14, and the latest versions
of Mac OS, watchOS and tvOS,


26
00:01:31,959 --> 00:01:36,930 line:-2
we will get formats that are better suited
for the region, which is UAE in this case.


27
00:01:36,997 --> 00:01:38,131 line:-1
And it goes without saying


28
00:01:38,198 --> 00:01:41,335 line:-2
that this change is not limited
to a single language or region


29
00:01:41,401 --> 00:01:43,937 line:-2
but is a general algorithm
that will improve the formats


30
00:01:44,004 --> 00:01:47,174 line:-2
across hundreds of combinations
of languages and regions.


31
00:01:48,375 --> 00:01:52,312 line:-2
I want to show you the power of using
the formatter APIs in your app,


32
00:01:52,379 --> 00:01:55,015 line:-2
how much time and effort
these APIs can save you,


33
00:01:55,082 --> 00:01:58,385 line:-2
and how you can use these APIs
to build versatile UIs.


34
00:01:59,586 --> 00:02:01,522 line:-2
I'm going to walk through
several sections,


35
00:02:01,588 --> 00:02:03,123 line:-1
and as I walk through each of them,


36
00:02:03,190 --> 00:02:07,027 line:-2
I will focus on real-world examples
from Apple's own apps,


37
00:02:07,094 --> 00:02:10,163 line:-2
going down in order
from most specific to most generic.


38
00:02:10,229 --> 00:02:14,301 line:-2
My goal is to show that we have
an extensive set of APIs at our disposal,


39
00:02:14,368 --> 00:02:17,337 line:-2
that simple things are easy
and complex things are possible.


40
00:02:18,172 --> 00:02:19,940 line:-1
Let's get started with dates and times.


41
00:02:21,074 --> 00:02:22,743 line:-1
Let's start with a simple example.


42
00:02:22,809 --> 00:02:24,978 line:-2
In the Notes app,
at the top of every note,


43
00:02:25,045 --> 00:02:27,381 line:-2
you will see the last modification
date and time.


44
00:02:28,048 --> 00:02:29,316 line:-1
Let's see how we can do this.


45
00:02:30,317 --> 00:02:35,422 line:-2
Here we want to show a full date with day,
month and year and also the time.


46
00:02:35,489 --> 00:02:37,090 line:-1
This is something that can be accomplished


47
00:02:37,157 --> 00:02:39,393 line:-2
with the predefined styles
in dateFormatter,


48
00:02:39,459 --> 00:02:42,262 line:-2
with the medium style for the date
and the short style for the time.


49
00:02:43,096 --> 00:02:45,699 line:-2
Note that the word "at"
is automatically added here


50
00:02:45,766 --> 00:02:48,669 line:-2
as a consequence of this being
a medium-length format.


51
00:02:48,735 --> 00:02:50,771 line:-1
So, as I said, simple things are easy.


52
00:02:52,239 --> 00:02:56,109 line:-2
Now let me show you that
more complex things are possible too.


53
00:02:56,176 --> 00:02:58,679 line:-2
Here, we have the Screen Time UI
in Settings


54
00:02:58,745 --> 00:03:02,249 line:-2
and we want to show the day of the week
followed by the day and month


55
00:03:02,316 --> 00:03:03,584 line:-1
but not the year.


56
00:03:03,650 --> 00:03:06,887 line:-2
This is not something that any
of the predefined styles can offer you,


57
00:03:06,954 --> 00:03:09,156 line:-2
but it is possible by specifying
a template.


58
00:03:10,657 --> 00:03:15,062 line:0
As one more example from Screen Time,
which you will see in many other UIs too,


59
00:03:15,128 --> 00:03:17,965 line:0
if you just want the abbreviations
for the days of the week,


60
00:03:18,031 --> 00:03:20,534 line:0
you can request that
with a custom template.


61
00:03:20,601 --> 00:03:24,571 line:0
As we can see,
the template mechanism is really powerful.


62
00:03:24,638 --> 00:03:26,640 line:0
So let's dive a little deeper
into templates.


63
00:03:27,741 --> 00:03:30,110 line:-2
Unicode publishes various
technical reports,


64
00:03:30,177 --> 00:03:31,778 line:-1
including this one on dates,


65
00:03:31,845 --> 00:03:35,115 line:0
one of a seven-part series, in fact,
for which I'm proud to say that Apple,


66
00:03:35,182 --> 00:03:38,185 line:0
as a Unicode member,
has been one of the key contributors.


67
00:03:38,252 --> 00:03:40,521 line:0
This is an excellent reference
for templates,


68
00:03:40,587 --> 00:03:42,990 line:0
and there are lots of explanations
and examples.


69
00:03:43,557 --> 00:03:47,528 line:0
So when I was looking for day of the week
earlier, I scrolled down,


70
00:03:47,594 --> 00:03:48,962 line:-1
and found this section.


71
00:03:49,029 --> 00:03:52,866 line:-2
Here you can see that
I can choose between an uppercase "E,"


72
00:03:52,933 --> 00:03:55,335 line:-1
a lowercase "e" and a lowercase "c."


73
00:03:56,003 --> 00:03:57,538 line:-1
So which one should I use?


74
00:03:58,205 --> 00:04:04,044 line:-2
Now, as you may recall, I was showing
these days of the week labels in a graph,


75
00:04:04,111 --> 00:04:07,614 line:-2
so these are stand-alone
and not part of a longer format.


76
00:04:07,681 --> 00:04:10,184 line:-2
This helps me choose the lowercase "c"
for my template.


77
00:04:11,451 --> 00:04:14,188 line:-2
Now that we've chosen a template,
let's see how it works.


78
00:04:15,589 --> 00:04:18,559 line:-2
Here, you're seeing the output
of different lengths of lowercase "c."


79
00:04:19,259 --> 00:04:22,930 line:-2
Notice that here the template with five
C's is the one that's appropriate,


80
00:04:22,996 --> 00:04:25,832 line:-1
because we want the most abbreviated form.


81
00:04:25,899 --> 00:04:28,936 line:-2
Also, note the way
that these lengths are interpreted


82
00:04:29,002 --> 00:04:31,205 line:-1
across different languages will vary.


83
00:04:31,271 --> 00:04:35,709 line:-2
Here, we see that in English each of the
five lengths produces a different output


84
00:04:35,776 --> 00:04:38,679 line:-1
but not so in Arabic or Japanese.


85
00:04:38,745 --> 00:04:40,714 line:-2
So it's important to choose
the right template


86
00:04:40,781 --> 00:04:43,116 line:-2
and consider all the locales
that we're supporting,


87
00:04:43,750 --> 00:04:47,688 line:-2
since some distinctions may only manifest
for certain languages or locales.


88
00:04:48,455 --> 00:04:52,459 line:-2
This is also why it was very important
that we chose the stand-alone style.


89
00:04:52,526 --> 00:04:54,094 line:-1
It may not make a difference in English,


90
00:04:54,161 --> 00:04:56,463 line:-2
but it may make a difference
for other languages.


91
00:04:57,364 --> 00:04:59,633 line:-2
Another important thing to note
about templates


92
00:04:59,700 --> 00:05:02,836 line:-2
is that the order of the fields
does not matter.


93
00:05:02,903 --> 00:05:08,108 line:-2
This template is the same as this template
which is the same as this template.


94
00:05:09,409 --> 00:05:12,379 line:-2
The template takes the pieces of data
that we're interested in


95
00:05:12,446 --> 00:05:15,582 line:-2
and it is the formatter's job
to assemble them into something


96
00:05:15,649 --> 00:05:17,284 line:-1
that makes sense for the locale.


97
00:05:18,619 --> 00:05:21,421 line:0
So for American English,
you'll see that it adds a comma.


98
00:05:22,322 --> 00:05:25,726 line:0
For British English, you'll see that it
makes sure that the month follows the day


99
00:05:25,792 --> 00:05:27,160 line:0
and not the other way around.


100
00:05:28,095 --> 00:05:29,296 line:0
And as one last example,


101
00:05:29,363 --> 00:05:32,699 line:0
you'll see that for Japanese it adds
the characters for month and day


102
00:05:32,766 --> 00:05:36,003 line:0
which are needed to produce
a sensible-looking date in Japanese.


103
00:05:37,237 --> 00:05:39,706 line:0
Lastly, I should point out
that dateFormatter


104
00:05:39,773 --> 00:05:41,575 line:0
has a property called dateFormat,


105
00:05:41,642 --> 00:05:45,512 line:0
and we should never set the template
directly onto that property,


106
00:05:45,579 --> 00:05:47,948 line:0
since it will cause it to be
interpreted literally


107
00:05:48,015 --> 00:05:50,951 line:0
and almost certainly produce
the wrong result.


108
00:05:51,018 --> 00:05:55,355 line:0
Instead, we should always create
our date formats from a template first.


109
00:05:57,224 --> 00:05:59,960 line:-2
There are a few more APIs
for formatting dates and times.


110
00:06:01,161 --> 00:06:04,164 line:-2
DateComponentsFormatter
helps you format components,


111
00:06:04,231 --> 00:06:05,832 line:-1
such as those used in durations.


112
00:06:06,667 --> 00:06:08,769 line:-1
You can also format ranges of time,


113
00:06:08,836 --> 00:06:12,840 line:-2
like this example from the Health app
by using DateIntervalFormatter.


114
00:06:13,640 --> 00:06:15,876 line:-2
It even takes care of avoiding
repeating elements


115
00:06:15,943 --> 00:06:18,045 line:-1
that are both in the start and end date.


116
00:06:19,613 --> 00:06:22,416 line:-2
Lastly, the RelativeDateTimeFormatter
is a powerful tool


117
00:06:22,482 --> 00:06:26,086 line:-2
for dates in the past or future which
you want to present in a natural manner.


118
00:06:26,920 --> 00:06:28,956 line:-2
Next up, let's take a look
at measurements.


119
00:06:29,690 --> 00:06:34,428 line:-2
If your app uses any kind of measurements,
MeasurementFormatter is your friend.


120
00:06:34,494 --> 00:06:37,231 line:-2
Let me show you a few examples
that we use in the Weather app.


121
00:06:38,465 --> 00:06:40,067 line:-1
Let's start with temperature.


122
00:06:40,133 --> 00:06:43,670 line:-2
Note that in all these examples, I am
setting the measurements in metric units,


123
00:06:43,737 --> 00:06:47,307 line:-2
but the display you see on the right
has everything localized for the US,


124
00:06:47,374 --> 00:06:48,775 line:-1
which uses imperial units.


125
00:06:49,276 --> 00:06:54,681 line:-2
So the temperature of 16 degrees Celsius
will come out as 61 degrees Fahrenheit.


126
00:06:54,748 --> 00:06:56,250 line:-1
The same goes for speed.


127
00:06:56,316 --> 00:06:59,119 line:-2
Here the value is converted
to miles per hour for the US.


128
00:06:59,820 --> 00:07:01,655 line:-1
And similarly for pressure.


129
00:07:01,722 --> 00:07:02,823 line:-1
I'm showing these examples


130
00:07:02,890 --> 00:07:06,159 line:-2
because your data source for measurements
may use metric or other units


131
00:07:06,226 --> 00:07:09,196 line:-2
and MeasurementFormatter
does all the heavy lifting for you,


132
00:07:09,263 --> 00:07:13,000 line:-2
not only across units
but also across languages and locales.


133
00:07:13,066 --> 00:07:17,538 line:-2
Now, while I just showed you examples
of three different kinds of measurements,


134
00:07:17,604 --> 00:07:20,140 line:-2
MeasurementFormatter supports
many, many more.


135
00:07:20,207 --> 00:07:22,943 line:-2
And, in case it doesn't support
a unit that you'd like to use,


136
00:07:23,010 --> 00:07:24,978 line:-1
it can even support custom units.


137
00:07:25,045 --> 00:07:26,079 line:0
For all this and more,


138
00:07:26,146 --> 00:07:30,717 line:0
do check out the excellent WWDC 2016 talk
on "Measurements and Units."


139
00:07:31,952 --> 00:07:33,720 line:-1
Next, let's talk about names.


140
00:07:34,721 --> 00:07:39,893 line:-2
Names are one of the most personal bits
of data that we display in our apps,


141
00:07:39,960 --> 00:07:43,931 line:-2
and we all have a very strong response
when we see our names on screen.


142
00:07:44,631 --> 00:07:46,066 line:-1
So getting name formatting right


143
00:07:46,133 --> 00:07:48,669 line:-2
is absolutely crucial to making
a good impression.


144
00:07:49,403 --> 00:07:51,972 line:-1
Luckily, PersonNameComponentsFormatter,


145
00:07:52,039 --> 00:07:54,141 line:-2
which I like to call "Name Formatter"
for short,


146
00:07:54,208 --> 00:07:55,876 line:-1
makes it easy to do the right thing.


147
00:07:56,977 --> 00:07:59,580 line:-2
All we need to do is to populate
the components object


148
00:07:59,646 --> 00:08:01,215 line:-1
and ask for the formatted strings.


149
00:08:02,449 --> 00:08:05,018 line:-2
By default, Name Formatter
will choose the medium style


150
00:08:05,085 --> 00:08:08,555 line:-2
which includes all the primary components
like family name and given name.


151
00:08:09,590 --> 00:08:13,560 line:-2
We can also request a short style,
which, depending on user preferences,


152
00:08:13,627 --> 00:08:16,630 line:-2
may use the nickname
or a shortened version of the name.


153
00:08:17,631 --> 00:08:21,902 line:0
The abbreviated style is intended
for specific use cases like monograms,


154
00:08:21,969 --> 00:08:23,203 line:0
as shown here.


155
00:08:23,270 --> 00:08:27,875 line:0
Over the past few years, more and more
apps have been using monograms.


156
00:08:27,941 --> 00:08:30,277 line:0
So let's dive a little deeper into them.


157
00:08:31,478 --> 00:08:35,883 line:-2
Monograms are a great alternative
in the absence of an avatar or photo


158
00:08:35,948 --> 00:08:39,253 line:-2
while still making the UI
feel friendly and inviting.


159
00:08:39,318 --> 00:08:42,556 line:-2
And the Name Formatter was designed
with monograms in mind.


160
00:08:42,623 --> 00:08:44,358 line:-1
However, it is important to note


161
00:08:44,424 --> 00:08:47,094 line:-2
that monograms cannot be generated
for all names


162
00:08:47,160 --> 00:08:50,664 line:-2
and some abbreviated names
may be too long to fit in a given UI.


163
00:08:51,365 --> 00:08:55,702 line:-2
With Swift, it's easy to restrict
monograms based on a length check.


164
00:08:55,769 --> 00:08:59,039 line:-2
Because Swift's count
is based on user-visible characters


165
00:08:59,106 --> 00:09:02,676 line:-2
and not Unicode code points,
this works well across languages.


166
00:09:03,510 --> 00:09:05,913 line:-2
Of course,
a character count cannot determine


167
00:09:05,979 --> 00:09:08,916 line:-2
how tall or wide the string would be
when rendered.


168
00:09:08,982 --> 00:09:12,186 line:-2
So we still need to make sure
that the string fits appropriately.


169
00:09:13,420 --> 00:09:16,890 line:-2
When the character count is too long
or the string is too large to fit,


170
00:09:16,957 --> 00:09:18,659 line:-1
a fallback option needs to be used,


171
00:09:18,725 --> 00:09:22,529 line:-2
such as a generic icon
that can be used in place of a monogram.


172
00:09:23,830 --> 00:09:25,666 line:-1
Lastly, it's worth mentioning


173
00:09:25,732 --> 00:09:28,502 line:-2
that the Name Formatter
has a lot of intelligence built in


174
00:09:28,569 --> 00:09:31,572 line:-2
and uses several pieces of information
when formatting names,


175
00:09:31,638 --> 00:09:33,473 line:-1
such as the user's language settings,


176
00:09:33,540 --> 00:09:37,411 line:-2
their contact settings, such as
name order, as well as the name itself.


177
00:09:38,712 --> 00:09:43,217 line:-2
For example, here a Japanese name
is shown on an iPhone running in English.


178
00:09:43,283 --> 00:09:45,719 line:-2
I've intentionally chosen this example
to show you


179
00:09:45,786 --> 00:09:49,456 line:-2
that the Name Formatter will render
the name appropriately in all cases,


180
00:09:49,523 --> 00:09:51,625 line:-2
even in cases
where the language of the name


181
00:09:51,692 --> 00:09:53,594 line:-1
is different from the iPhone language.


182
00:09:54,795 --> 00:09:57,130 line:-2
For names written in Chinese,
Japanese and Korean,


183
00:09:57,197 --> 00:10:01,068 line:-2
this means that they will always use
the family name followed by given name,


184
00:10:01,134 --> 00:10:03,604 line:-2
which is the only appropriate way
to write these names.


185
00:10:04,338 --> 00:10:07,841 line:-2
Next up, let's see
how we can make well-formatted lists.


186
00:10:07,908 --> 00:10:12,446 line:-2
Anytime we're showing a list of items
that's formatted as human readable text,


187
00:10:12,513 --> 00:10:13,914 line:-1
we can use ListFormatter.


188
00:10:13,981 --> 00:10:16,583 line:-2
Let me show you
how it can not only save us time


189
00:10:16,650 --> 00:10:20,654 line:-2
but also make our app look polished
by getting the nuances right.


190
00:10:21,321 --> 00:10:23,156 line:-1
The API couldn't be easier.


191
00:10:23,223 --> 00:10:25,158 line:-1
We simply specify an array of strings


192
00:10:25,225 --> 00:10:27,494 line:-2
or other objects
that we want to combine into a list,


193
00:10:27,561 --> 00:10:29,363 line:-1
and we get back a concatenated list.


194
00:10:30,163 --> 00:10:33,133 line:-2
Let's see the subtle benefits we get
by doing this.


195
00:10:33,200 --> 00:10:34,968 line:-1
This is the keyboard settings UI,


196
00:10:35,035 --> 00:10:38,272 line:-2
and here we're formatting
a very simple list with two elements:


197
00:10:38,338 --> 00:10:40,874 line:-2
the language names "English"
and "Spanish."


198
00:10:40,941 --> 00:10:44,611 line:-2
In English, all this takes
is inserting the word "and" in the middle.


199
00:10:45,412 --> 00:10:48,682 line:-2
And if the order of the languages
is changed, it's still the same.


200
00:10:49,283 --> 00:10:52,319 line:0
But if we take a look at the same UI
now localized to Spanish,


201
00:10:52,386 --> 00:10:55,022 line:0
we'll see that the word for "and"
is in Spanish,


202
00:10:55,088 --> 00:10:58,792 line:0
but did you know that the Spanish word
for "and" can vary based on context?


203
00:10:59,560 --> 00:11:01,929 line:0
Notice that when the order of the elements
is changed,


204
00:11:01,995 --> 00:11:03,830 line:0
so is the Spanish word for "and."


205
00:11:04,431 --> 00:11:09,369 line:0
In fact, in iOS 14, as well as the latest
versions of macOS, tvOS and watchOS,


206
00:11:09,436 --> 00:11:12,940 line:0
ListFormatter has been updated to adhere
to the grammatical rules


207
00:11:13,006 --> 00:11:15,342 line:0
of several languages, including Spanish.


208
00:11:16,276 --> 00:11:17,911 line:-1
This is one of the many reasons


209
00:11:17,978 --> 00:11:20,581 line:-2
that we should use formatter APIs
wherever possible.


210
00:11:20,647 --> 00:11:23,584 line:-2
Not only do they abstract away
a ton of complexity


211
00:11:23,650 --> 00:11:25,686 line:-1
and provide localization for free,


212
00:11:25,752 --> 00:11:28,689 line:-2
as the underlying implementation
is updated and improved,


213
00:11:28,755 --> 00:11:33,460 line:-2
our app gets improved behavior
without modifying a single line of code.


214
00:11:33,527 --> 00:11:36,330 line:-2
Now let's talk
about two generic data types.


215
00:11:36,396 --> 00:11:37,731 line:-1
Let's start with numbers.


216
00:11:38,131 --> 00:11:41,668 line:-2
Here is a quick quiz.
What's the number you're seeing onscreen?


217
00:11:41,735 --> 00:11:43,871 line:-1
It's a little bit of a trick question.


218
00:11:43,937 --> 00:11:46,907 line:-2
Depending on what language we use
and what region we're in,


219
00:11:46,974 --> 00:11:52,713 line:-2
we may interpret this as 32,768
or as 32.768.


220
00:11:53,280 --> 00:11:57,084 line:-2
In this case, the decimal separator button
on the calculator gives it away


221
00:11:57,150 --> 00:12:00,053 line:-1
and tells us that this is actually 32.768.


222
00:12:01,221 --> 00:12:03,924 line:-2
And this is how we can format it
super easy.


223
00:12:05,225 --> 00:12:07,728 line:-2
Now what happens
if the app is instead launched


224
00:12:07,794 --> 00:12:10,430 line:-2
with the language set to Arabic
and the region to Egypt?


225
00:12:10,964 --> 00:12:14,067 line:-2
As we see here, NumberFormatter
does all the heavy lifting


226
00:12:14,134 --> 00:12:16,937 line:-2
to ensure that everything is localized
appropriately.


227
00:12:18,071 --> 00:12:21,575 line:-2
It's also worth noting
that if we need to access certain symbols


228
00:12:21,642 --> 00:12:23,977 line:-2
that change
according to the language or locale,


229
00:12:24,044 --> 00:12:26,947 line:-2
there are convenience methods
to fetch the percentSymbol


230
00:12:27,014 --> 00:12:29,116 line:-1
and the decimalSeparator.


231
00:12:29,183 --> 00:12:31,118 line:-1
In fact, there are also convenience APIs


232
00:12:31,185 --> 00:12:33,287 line:-2
for many more symbols
that aren't shown here.


233
00:12:34,454 --> 00:12:36,690 line:-2
NumberFormatter supports
several different styles,


234
00:12:36,757 --> 00:12:38,458 line:-1
including a percent style.


235
00:12:38,525 --> 00:12:39,693 line:-1
And, as we would expect,


236
00:12:39,760 --> 00:12:43,096 line:-2
it handles nuances
across languages and regions here too.


237
00:12:43,864 --> 00:12:47,034 line:-2
For example, we can see
that it correctly formats the number


238
00:12:47,100 --> 00:12:50,170 line:-2
with the percent sign
going in front of the number for Turkish.


239
00:12:50,938 --> 00:12:54,107 line:-2
I'm not going to go into more detail
on NumberFormatter here


240
00:12:54,174 --> 00:12:56,844 line:-2
because it is chock-full
of useful functionality,


241
00:12:56,910 --> 00:13:01,415 line:-2
but please do check out the documentation,
or try using it in an Xcode Playground.


242
00:13:01,481 --> 00:13:04,084 line:-1
Lastly, let's talk about strings.


243
00:13:04,985 --> 00:13:09,223 line:-2
While the various formatter APIs
will cover a wide range of data types


244
00:13:09,289 --> 00:13:11,892 line:-2
that are commonly formatted
across all apps,


245
00:13:11,959 --> 00:13:16,597 line:-2
your app may have its own kinds of data
that don't have a standard formatter.


246
00:13:17,030 --> 00:13:21,235 line:-2
For example, there's no standard formatter
that will format the number of photos.


247
00:13:21,301 --> 00:13:23,070 line:-2
Let's see an example
of how this would work.


248
00:13:24,137 --> 00:13:26,807 line:-1
Doing this is extremely simple.


249
00:13:26,874 --> 00:13:31,845 line:-2
Using the text element in SwiftUI,
we specify the text as we normally do.


250
00:13:31,912 --> 00:13:34,214 line:-2
As far as code goes,
that's all we need to write.


251
00:13:35,215 --> 00:13:38,886 line:0
Then all we need to do is to make sure
that we have a stringsdict file


252
00:13:38,952 --> 00:13:41,121 line:0
that contains the corresponding string.


253
00:13:41,788 --> 00:13:45,392 line:0
To learn more about stringsdict, or even
more about localization in general,


254
00:13:45,459 --> 00:13:49,062 line:0
do take a look at the documentation
at the URL mentioned here.


255
00:13:49,129 --> 00:13:53,433 line:0
Let's say our translators have translated
the text into English and Arabic.


256
00:13:53,500 --> 00:13:55,569 line:0
Let's see what the result looks like.


257
00:13:55,636 --> 00:14:00,040 line:0
When a single photo is selected, note that
while the English uses the numeral "1,"


258
00:14:00,107 --> 00:14:03,310 line:0
in Arabic, it spells out the words,
as that is more natural.


259
00:14:04,344 --> 00:14:07,814 line:0
When two photos are selected,
the English, again, uses a number,


260
00:14:07,881 --> 00:14:11,251 line:0
but "photo" becomes "photos,"
following English's grammar.


261
00:14:11,318 --> 00:14:12,853 line:0
On the other hand, in Arabic,


262
00:14:12,920 --> 00:14:15,155 line:0
the dual form is used
following Arabic grammar.


263
00:14:16,390 --> 00:14:19,760 line:0
For three photos,
both English and Arabic look similar,


264
00:14:19,826 --> 00:14:23,063 line:0
using the number followed
by the plural form of the word "photo."


265
00:14:24,097 --> 00:14:26,900 line:0
And this goes on for numbers up to ten.


266
00:14:26,967 --> 00:14:29,770 line:0
For 11 photos or more,
Arabic grammar dictates


267
00:14:29,837 --> 00:14:31,772 line:0
that a different plural form be used.


268
00:14:32,239 --> 00:14:35,909 line:-2
Now, maybe you're interested in learning
the grammar rules of a hundred languages.


269
00:14:35,976 --> 00:14:39,313 line:-2
I know I am. However,
what I want you to take away from this


270
00:14:39,379 --> 00:14:42,216 line:-2
is that if you correctly localize strings
using stringsdict,


271
00:14:42,282 --> 00:14:45,919 line:-2
and if you use the formatters
wherever you can in your app,


272
00:14:45,986 --> 00:14:48,622 line:-2
your app will shine regardless
of whether you support


273
00:14:48,689 --> 00:14:51,091 line:-1
only one language or a hundred.


274
00:14:51,158 --> 00:14:54,595 line:-2
Also, all of this is code
that you need to write only once,


275
00:14:54,661 --> 00:14:57,431 line:-2
no matter how many languages
you support in your app,


276
00:14:57,497 --> 00:14:59,099 line:-1
either now or in the future.


277
00:15:00,167 --> 00:15:04,171 line:-2
Lastly, to show you even more features
of all the formatters I talked about


278
00:15:04,238 --> 00:15:08,175 line:-2
and let you explore, we have a sample app
that you can download and play with.


279
00:15:08,242 --> 00:15:09,443 line:-1
So happy formatting.

