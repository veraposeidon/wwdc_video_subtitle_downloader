1
00:00:04.003 --> 00:00:07.273
Hello, and welcome to WWDC.


2
00:00:08.875 --> 00:00:10.777
My name is Roger Pantos.


3
00:00:10.777 --> 00:00:15.949
And today we are gonna talk about
some updates to Low-Latency HLS.


4
00:00:17.183 --> 00:00:20.553
The first thing I'd like to announce
is that Low-Latency HLS


5
00:00:20.553 --> 00:00:22.555
is coming out of beta!


6
00:00:22.589 --> 00:00:25.291
That means it will be available
to everyone


7
00:00:25.325 --> 00:00:29.729
in iOS 14, tvOS 14, and this year's macOS.


8
00:00:30.964 --> 00:00:33.967
That includes support
for bit-rate switching,


9
00:00:34.033 --> 00:00:40.039
FairPlay Streaming, fMP4 CMAF,
and all your other favorite HLS features.


10
00:00:40.607 --> 00:00:42.776
It's available to any native application,


11
00:00:42.876 --> 00:00:44.978
and this year
there's no entitlement necessary.


12
00:00:45.979 --> 00:00:49.883
Also, given that we're finalizing
the Low-Latency protocol,


13
00:00:49.983 --> 00:00:53.953
the time has come to add them
to the HLS spec itself.


14
00:00:53.987 --> 00:00:59.793
So, the second revision draft
of the HLS RFC on ietf.org


15
00:00:59.859 --> 00:01:03.797
now includes all of the rules
for Low-Latency.


16
00:01:03.897 --> 00:01:07.734
And in addition to those rules,
it also includes a couple new appendices


17
00:01:07.801 --> 00:01:10.904
for the Low-Latency Server
Configuration Profile


18
00:01:10.970 --> 00:01:14.641
and describing the CDN tune-in algorithm.


19
00:01:14.707 --> 00:01:19.112
Also, the page that was hosting
the provisional Low-Latency spec


20
00:01:19.179 --> 00:01:22.715
while it was in beta is now being turned
into an informative article


21
00:01:22.749 --> 00:01:24.918
with some more descriptions and examples.


22
00:01:25.819 --> 00:01:28.455
You can find information
about Apple device support


23
00:01:28.521 --> 00:01:32.025
in the HLS authoring spec
on developer.apple.com.


24
00:01:32.091 --> 00:01:37.197
Now, in the year that Low-Latency HLS has
been in beta, we got some great feedback,


25
00:01:37.297 --> 00:01:41.100
and, as a result, we made
some significant changes to the protocol.


26
00:01:41.634 --> 00:01:43.670
One of the areas that we focused on


27
00:01:43.736 --> 00:01:46.739
since the beginning
of the original Low-Latency design


28
00:01:46.840 --> 00:01:49.042
was reducing segment delay.


29
00:01:49.108 --> 00:01:52.178
That's the time between
when a new segment is produced


30
00:01:52.212 --> 00:01:54.180
and when the client begins to receive it.


31
00:01:55.048 --> 00:01:56.850
The approach that we took initially


32
00:01:56.950 --> 00:02:00.120
was to have that segment
ride along with the Playlist update


33
00:02:00.186 --> 00:02:02.922
using HTTP/2 Push.


34
00:02:02.956 --> 00:02:06.593
But one of the biggest areas
of feedback we received


35
00:02:06.659 --> 00:02:08.862
is that the Push approach
doesn't really work


36
00:02:08.961 --> 00:02:11.197
for how a lot of people
deliver their content,


37
00:02:11.231 --> 00:02:13.299
and, in particular, it's not compatible


38
00:02:13.333 --> 00:02:15.969
with how a lot of ad-supported content
gets delivered.


39
00:02:16.603 --> 00:02:20.073
And so we replaced H2 Push
with a new approach


40
00:02:20.139 --> 00:02:22.876
that we call "Blocking Preload Hints."


41
00:02:22.976 --> 00:02:27.247
The basic idea is that,
similar to Blocking Playlist Reload,


42
00:02:27.347 --> 00:02:30.250
the client will ask for the next part
before it's ready


43
00:02:30.350 --> 00:02:33.720
and then the server will hold on
to the request until it can send it.


44
00:02:34.354 --> 00:02:37.157
If you'd like to know more
about Blocking Preload Hints,


45
00:02:37.223 --> 00:02:40.727
we've got an entire talk
where we go into it in more detail.


46
00:02:40.793 --> 00:02:43.229
One of the things
that we're really pleased about


47
00:02:43.263 --> 00:02:47.500
is that Blocking Preload Hints
actually perform better than H2 Push


48
00:02:47.534 --> 00:02:49.369
when you're using a CDN.


49
00:02:49.469 --> 00:02:52.171
And that's because driving the request
from the client


50
00:02:52.272 --> 00:02:54.807
also triggers CDN cache fill


51
00:02:54.908 --> 00:02:58.811
without requiring an extra round trip
between the edge and the origin.


52
00:02:59.612 --> 00:03:01.514
And so that's great for CDNs.


53
00:03:01.548 --> 00:03:05.618
And it's also good that we're no longer
asking them to support Push,


54
00:03:05.652 --> 00:03:08.621
although they do
still need to support HTTP/2.


55
00:03:09.088 --> 00:03:12.825
In addition to moving away from Push,
we made some other improvements as well.


56
00:03:13.526 --> 00:03:16.829
One of the bits of feedback
that we received from the CDN folks


57
00:03:16.930 --> 00:03:20.934
was that allowing a client
to ask for specific rendition reports


58
00:03:21.000 --> 00:03:25.138
could lead to a combinatorial explosion
of different request URLs


59
00:03:25.205 --> 00:03:27.774
that all reference
the same playlist update,


60
00:03:27.840 --> 00:03:29.842
and that reduced caching efficiency.


61
00:03:30.310 --> 00:03:34.480
So we changed the spec to eliminate
the report delivery directive,


62
00:03:34.547 --> 00:03:39.319
and, instead, we now put all Rendition
Reports into every playlist update.


63
00:03:40.420 --> 00:03:43.957
We also heard from providers
who are using lots of date-range tags


64
00:03:44.023 --> 00:03:45.792
with long DVR windows.


65
00:03:45.858 --> 00:03:47.760
So we added a way for them


66
00:03:47.794 --> 00:03:51.931
to incorporate date-range tags
into Playlist Delta Updates,


67
00:03:51.965 --> 00:03:54.867
so the update only carries
the most recent one.


68
00:03:55.535 --> 00:03:57.437
And we go into more detail about that


69
00:03:57.537 --> 00:04:00.707
in our separate video
about Playlist Delta Updates.


70
00:04:00.807 --> 00:04:05.545
Finally, we added gap signaling
to Rendition Reports and Partial Segments


71
00:04:05.612 --> 00:04:10.250
in the form of new attributes
on the Part and Rendition Report tags.


72
00:04:10.350 --> 00:04:14.787
This allows clients to deal better with
encoded outages in Low-Latency streams.


73
00:04:15.588 --> 00:04:16.990
Beyond improving the spec,


74
00:04:17.089 --> 00:04:20.560
we also updated
our server reference implementation.


75
00:04:20.627 --> 00:04:22.795
Now if you remember that from last year,


76
00:04:22.862 --> 00:04:25.098
we have a set of Low-Latency tools


77
00:04:25.198 --> 00:04:27.734
that allow you to generate
your own Low-Latency stream.


78
00:04:28.534 --> 00:04:34.107
Late last year, we added an option to that
to package media as fragmented MPEG-4


79
00:04:34.173 --> 00:04:35.842
so it's compatible with CMAF.


80
00:04:36.643 --> 00:04:39.746
The web server is also
much easier to set up.


81
00:04:39.846 --> 00:04:42.115
Rather than having to configure
your own web server


82
00:04:42.215 --> 00:04:46.519
and then mating a PHP script to it,
you can now just run a Go script


83
00:04:46.586 --> 00:04:48.755
and that will implement
the delivery directives


84
00:04:48.855 --> 00:04:51.991
and an HTTP/2 web server
in a single package.


85
00:04:52.825 --> 00:04:55.461
Finally, we've incorporated
the Low-Latency tools


86
00:04:55.528 --> 00:04:57.864
into the regular HLS tools package.


87
00:04:57.930 --> 00:05:00.900
So now, once again,
there's a single download for everything.


88
00:05:01.501 --> 00:05:04.103
You can find out more about that
in Eryk's talk


89
00:05:04.170 --> 00:05:08.041
about improving stream authoring
using the HLS tools.


90
00:05:08.141 --> 00:05:11.744
So to summarize what's new
in Low-Latency HLS,


91
00:05:12.312 --> 00:05:14.414
we've made several important improvements,


92
00:05:14.514 --> 00:05:18.151
including using Preload Hinting
instead of Push,


93
00:05:18.217 --> 00:05:20.620
improving
the Delivery Directive interface,


94
00:05:20.687 --> 00:05:24.424
and providing CMAF support
in the server reference implementation.


95
00:05:25.124 --> 00:05:29.762
The Low-Latency extensions are now
part of the core HLS spec on ietf.org.


96
00:05:30.329 --> 00:05:32.065
And with all of this in place,


97
00:05:32.131 --> 00:05:36.169
Low-Latency HLS will be available to users
later this year.


98
00:05:36.836 --> 00:05:40.973
So if your users have been asking you
for a lower-latency live stream,


99
00:05:41.040 --> 00:05:44.644
now is the time to act,
and we will look forward to seeing them.


100
00:05:44.711 --> 00:05:45.978
Thank you very much.

