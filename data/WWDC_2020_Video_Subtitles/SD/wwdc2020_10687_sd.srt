1
00:00:00,133 --> 00:00:01,968 line:-1
[chimes]


2
00:00:03,836 --> 00:00:06,773 line:-1
Hello and welcome to WWDC.


3
00:00:08,442 --> 00:00:12,246 line:0
Hi, my name is Wil, and I work on testing
and automation in XCode.


4
00:00:12,312 --> 00:00:14,915 line:-2
In this session we're going
to learn about new APIs


5
00:00:14,982 --> 00:00:15,949 line:-1
and other improvements


6
00:00:16,015 --> 00:00:18,785 line:-2
to how you investigate
test failures in your projects.


7
00:00:19,453 --> 00:00:22,589 line:-2
Investigation of test failures
is the single most critical piece


8
00:00:22,656 --> 00:00:24,725 line:-1
of maintaining any active test suite.


9
00:00:25,259 --> 00:00:27,561 line:-2
Difficult to diagnose failures
cost you time.


10
00:00:27,995 --> 00:00:29,096 line:-1
They cost too much time.


11
00:00:29,162 --> 00:00:30,964 line:-2
At the wrong point
in your release schedule,


12
00:00:31,031 --> 00:00:33,066 line:-2
they can even lead
to bugs shipping in products.


13
00:00:33,767 --> 00:00:35,102 line:-1
With any growing project,


14
00:00:35,169 --> 00:00:37,871 line:-2
code changes
will sometimes cause tests to fail.


15
00:00:37,938 --> 00:00:40,240 line:-2
Either locally,
or in continuous integration.


16
00:00:40,307 --> 00:00:41,241 line:-1
And when they do fail,


17
00:00:41,308 --> 00:00:43,443 line:-2
you'll be considering
the following questions.


18
00:00:44,478 --> 00:00:45,879 line:-1
What failed?


19
00:00:45,946 --> 00:00:46,947 line:-1
How did it fail?


20
00:00:47,581 --> 00:00:48,582 line:-1
Why?


21
00:00:48,649 --> 00:00:49,917 line:-1
And perhaps, most of all,


22
00:00:49,983 --> 00:00:52,986 line:-2
where in my source code,
did the failure happen?


23
00:00:53,453 --> 00:00:55,989 line:-1
In Xcode 12, we've added new APIs,


24
00:00:56,056 --> 00:00:58,492 line:-2
and enhanced the UI
for test failure reporting


25
00:00:58,559 --> 00:01:01,094 line:-2
to make answering
these questions more efficient.


26
00:01:02,229 --> 00:01:05,465 line:-2
It's worth noting the answer
to these questions are so important,


27
00:01:05,532 --> 00:01:07,534 line:-1
that there's a whole session dedicated


28
00:01:07,601 --> 00:01:10,671 line:-2
to coding patterns you can use
to further improve this process.


29
00:01:11,338 --> 00:01:14,875 line:0
For more about
that check out, "Write Tests to Fail."


30
00:01:16,610 --> 00:01:19,813 line:-2
We've organized the content
for this session in four sections.


31
00:01:20,214 --> 00:01:23,350 line:-2
Swift errors in tests,
rich failure objects,


32
00:01:23,684 --> 00:01:26,854 line:-2
call stacks for test failures,
and advanced workflows.


33
00:01:27,321 --> 00:01:29,523 line:-2
We'll explore each
of these topics in turn.


34
00:01:29,590 --> 00:01:33,627 line:-2
But first, let's take a look
at how failures are presented in Xcode 12.


35
00:01:35,229 --> 00:01:37,898 line:-2
I have here a little project
called PlayGarden,


36
00:01:37,965 --> 00:01:40,701 line:-2
that I've been working on
with my three-year-old daughter.


37
00:01:40,767 --> 00:01:43,437 line:-2
PlayGarden helps us keep track
of all the plants, toys


38
00:01:43,504 --> 00:01:45,072 line:-1
and furniture in our backyard.


39
00:01:45,672 --> 00:01:46,773 line:-1
Now even at age three,


40
00:01:46,840 --> 00:01:49,576 line:-2
my daughter has
fully embraced test-driven development.


41
00:01:49,643 --> 00:01:51,411 line:-1
So, it's not surprising we have tests


42
00:01:51,478 --> 00:01:54,448 line:-2
for all the view classes
representing elements in our garden.


43
00:01:54,882 --> 00:01:58,318 line:-2
We noticed recently there was a lot
of duplicated code in these tests,


44
00:01:58,385 --> 00:02:00,487 line:-1
so we refactored it into some utilities.


45
00:02:01,121 --> 00:02:02,789 line:-1
I'm going to run one of these tests now.


46
00:02:03,223 --> 00:02:05,425 line:-1
I've introduced an artificial failure,


47
00:02:05,492 --> 00:02:08,228 line:-2
so we can see
how that's presented in Xcode 12.


48
00:02:09,596 --> 00:02:12,933 line:0
Right away, you might have noticed
that the test is marked as failing.


49
00:02:13,000 --> 00:02:15,269 line:0
But the only annotation
we can see is gray.


50
00:02:15,769 --> 00:02:19,573 line:-2
This tells us the failure happened
in a call underneath the annotated line,


51
00:02:19,640 --> 00:02:21,141 line:-1
but not at that line itself.


52
00:02:21,808 --> 00:02:25,412 line:-2
We can explore this further
by switching to the Issue Navigator.


53
00:02:27,514 --> 00:02:29,983 line:-2
The Issue Navigator
shows the test failure here,


54
00:02:30,050 --> 00:02:31,552 line:-1
but it shows more than that.


55
00:02:31,618 --> 00:02:34,721 line:-2
Underneath the failure is a call stack
in your test code.


56
00:02:35,556 --> 00:02:36,757 line:-1
If I click on a frame,


57
00:02:37,391 --> 00:02:39,493 line:-2
the source editor takes me
to that location.


58
00:02:40,294 --> 00:02:41,662 line:-1
Here the annotation is red,


59
00:02:41,728 --> 00:02:43,830 line:-2
because this
is the actual point of failure.


60
00:02:44,498 --> 00:02:46,733 line:-2
Now if I move through the rest
of the frames,


61
00:02:46,800 --> 00:02:51,038 line:-2
the Issue Navigator and the source editor
take me on a tour of my code,


62
00:02:51,471 --> 00:02:52,940 line:0
working back from the failure


63
00:02:53,006 --> 00:02:55,475 line:0
to the point in the test
where it was triggered.


64
00:02:56,143 --> 00:03:00,013 line:-2
This helps me quickly understand
all the context around the test failure,


65
00:03:00,080 --> 00:03:02,716 line:-2
cutting down on the time needed
to fix the issue.


66
00:03:03,684 --> 00:03:05,719 line:-2
There's another way
we can explore this data.


67
00:03:05,786 --> 00:03:07,487 line:-1
Let's switch to the test report.


68
00:03:08,088 --> 00:03:10,490 line:-2
This is a great way
to investigate test failures,


69
00:03:10,557 --> 00:03:12,392 line:-2
particularly if you're working
with a result bundle


70
00:03:12,459 --> 00:03:14,394 line:-1
from a continuous integration system.


71
00:03:16,430 --> 00:03:20,634 line:-2
In the report for our most recent test run
we have the failing test here in red.


72
00:03:21,268 --> 00:03:23,871 line:-2
If we expand that,
we see the failure message along


73
00:03:23,937 --> 00:03:26,173 line:-2
with the file
and line where it was recorded.


74
00:03:26,673 --> 00:03:28,609 line:-1
But let's scroll down a little further.


75
00:03:29,643 --> 00:03:32,913 line:-2
Now we can see the same call stack we saw
in the Issue Navigator


76
00:03:32,980 --> 00:03:34,982 line:-2
giving us another way
to explore your code.


77
00:03:35,883 --> 00:03:38,685 line:-2
You'll notice as I hover
over a frame in the call stack,


78
00:03:38,752 --> 00:03:41,221 line:-2
that two buttons appear
to the right of the frame.


79
00:03:41,655 --> 00:03:43,524 line:-1
The first of these is the Jump button,


80
00:03:43,590 --> 00:03:45,859 line:-2
which navigates
to the source code location.


81
00:03:47,661 --> 00:03:51,431 line:-2
I'll go back to the report,
so that we can explore the second button.


82
00:03:51,865 --> 00:03:54,535 line:-2
New in Xcode 12,
the Assistant button opens


83
00:03:54,601 --> 00:03:57,371 line:-2
a secondary editor next
to the test report,


84
00:03:57,437 --> 00:03:59,506 line:-1
which shows the reference source location.


85
00:03:59,973 --> 00:04:03,577 line:-2
This lets us view the test report,
and the source code, side by side.


86
00:04:04,044 --> 00:04:06,647 line:-2
And we can explore the failure
of call stack


87
00:04:06,713 --> 00:04:09,016 line:-2
in the same way that we did
within Issue Navigator.


88
00:04:12,052 --> 00:04:15,422 line:-2
So, that's our look at how test failures
are presented in Xcode 12.


89
00:04:16,356 --> 00:04:19,826 line:-2
Now I'd like to talk about
using Swift errors in your tests.


90
00:04:21,327 --> 00:04:25,465 line:-2
One of the ways XCTest supports
idiomatic coding patterns in Swift,


91
00:04:25,532 --> 00:04:28,468 line:-2
is by making it possible
for test functions to throw.


92
00:04:29,236 --> 00:04:33,841 line:-2
When a test does throw, the error is used
to formulate the failure message.


93
00:04:34,308 --> 00:04:37,511 line:-2
This means, instead of having
boilerplate for handling errors


94
00:04:37,578 --> 00:04:41,481 line:-2
like this,
your tests can be written like this.


95
00:04:42,115 --> 00:04:43,116 line:-1
Much cleaner.


96
00:04:43,183 --> 00:04:46,954 line:-2
But, until recently, these failures could
not provide the source code location,


97
00:04:47,020 --> 00:04:49,156 line:-1
file and line, that was traditionally part


98
00:04:49,223 --> 00:04:51,692 line:-1
of test failures recorded by XCTAssert.


99
00:04:52,326 --> 00:04:53,660 line:-1
Because of this limitation,


100
00:04:53,727 --> 00:04:56,230 line:-2
some developers still use
error handling boilerplate.


101
00:04:56,730 --> 00:04:58,899 line:-1
Happily, improvements to the Swift runtime


102
00:04:58,966 --> 00:05:04,638 line:-1
and iOS, and tvOS 13.4 and macOS 10.15.4,


103
00:05:04,705 --> 00:05:08,442 line:-2
made it possible for XCTest to begin
reporting the source code locations


104
00:05:08,509 --> 00:05:10,010 line:-1
for thrown errors and tests.


105
00:05:10,511 --> 00:05:12,980 line:-2
This means that you get great context
for these errors


106
00:05:13,046 --> 00:05:15,048 line:-1
without any other extra handling code.


107
00:05:15,916 --> 00:05:18,118 line:-2
Along with
the source code location improvements,


108
00:05:18,185 --> 00:05:21,255 line:-2
we added APIs,
so the same level of convenience


109
00:05:21,321 --> 00:05:23,657 line:-2
is available in your test's setUp()
and tearDown().


110
00:05:24,391 --> 00:05:27,194 line:-2
These new APIs are variants
of the original setUp()


111
00:05:27,261 --> 00:05:29,263 line:-1
and tearDown() methods shown here.


112
00:05:31,064 --> 00:05:34,635 line:-2
The new setUpWithError() will run
before the original setUp() method.


113
00:05:35,202 --> 00:05:36,737 line:-1
And the new tearDownWithError()


114
00:05:36,803 --> 00:05:39,306 line:-2
will be called
after the original tearDown() method.


115
00:05:40,040 --> 00:05:42,276 line:-2
You'll see both of these methods
in the templates provided


116
00:05:42,342 --> 00:05:43,410 line:-1
for new test files.


117
00:05:44,578 --> 00:05:48,749 line:-2
It's possible to use both variants
of these APIs in the same test case.


118
00:05:48,815 --> 00:05:50,083 line:-1
But generally, we encourage you


119
00:05:50,150 --> 00:05:52,186 line:-2
to switch your tests over
to the new methods,


120
00:05:52,252 --> 00:05:54,054 line:-2
unless you need
to preserve the old methods


121
00:05:54,121 --> 00:05:55,355 line:-1
because of inheritance.


122
00:05:56,256 --> 00:06:00,127 line:-2
Now I'd like to switch gears
and talk about rich failure objects.


123
00:06:01,028 --> 00:06:04,932 line:-2
XCTest has always recorded failures
as four discrete values.


124
00:06:04,998 --> 00:06:06,867 line:-1
The failure message, the file path,


125
00:06:06,934 --> 00:06:09,203 line:-2
and line number,
where the failure was recorded,


126
00:06:09,269 --> 00:06:12,039 line:-2
and a flag indicating
whether the failure was expected.


127
00:06:13,140 --> 00:06:16,243 line:-2
Expected failures are
those recorded by XCTAssert.


128
00:06:16,844 --> 00:06:18,712 line:-1
Unexpected failures generally indicate


129
00:06:18,779 --> 00:06:22,716 line:-2
that XCTest has caught an unhandled
exception thrown by the test code.


130
00:06:24,051 --> 00:06:28,789 line:-2
These values were passed by XCTAssert
into the record failure API,


131
00:06:28,856 --> 00:06:32,292 line:-2
which ensures that failures are logged
and ratted to Xcode for display.


132
00:06:33,627 --> 00:06:37,030 line:-2
In Xcode 12 these disparate values
have been encapsulated


133
00:06:37,364 --> 00:06:39,533 line:-1
by a new object XCTIssue.


134
00:06:40,300 --> 00:06:42,736 line:-2
In addition, there are new kinds
of failure data.


135
00:06:43,070 --> 00:06:46,406 line:-2
An explicit type of numeration,
a detailed description,


136
00:06:46,874 --> 00:06:49,309 line:-1
an underlying error and Attachments.


137
00:06:51,211 --> 00:06:55,983 line:-2
XCTAttachment is an API for capturing
arbitrary data with test runs.


138
00:06:56,650 --> 00:06:59,186 line:-2
Attachments can either be added
to the test itself,


139
00:06:59,620 --> 00:07:02,356 line:-1
or to an activity created by XCTContext.


140
00:07:02,990 --> 00:07:05,826 line:-1
Attachments can also be added to XCTIssue,


141
00:07:06,260 --> 00:07:09,129 line:-2
making it possible
to associate custom diagnostics


142
00:07:09,196 --> 00:07:10,597 line:-1
with your test failures.


143
00:07:11,498 --> 00:07:14,701 line:-2
XCTestCase has new API
for recording test failures.


144
00:07:15,169 --> 00:07:18,872 line:-2
This API, record(_issue:),
is used by all XCTAsserts


145
00:07:19,373 --> 00:07:21,775 line:-2
and can be invoked directly,
or even overridden.


146
00:07:22,509 --> 00:07:25,245 line:-2
The record failure API,
that we've showed a few slides back,


147
00:07:25,312 --> 00:07:26,346 line:-1
has been deprecated.


148
00:07:27,314 --> 00:07:29,416 line:-1
If you're calling recordFailure directly,


149
00:07:29,483 --> 00:07:32,219 line:-2
or are overriding it
to customize failure recording,


150
00:07:32,586 --> 00:07:34,888 line:-2
we encourage you
to update to record(_issue:)


151
00:07:34,955 --> 00:07:36,523 line:-1
at your earliest convenience.


152
00:07:37,591 --> 00:07:41,662 line:-2
When using record(_issue:), you may need
to know how to modify XCTIssues.


153
00:07:42,362 --> 00:07:45,499 line:-2
In Swift, issues are immutable
when declared with let.


154
00:07:45,899 --> 00:07:48,335 line:-2
Declaring with var allows you
to modify them.


155
00:07:49,102 --> 00:07:52,539 line:-2
In Objective-C, XCTIssue
has immutable subclass


156
00:07:52,606 --> 00:07:55,175 line:-1
and also conforms to NS mutableCopy.


157
00:07:56,210 --> 00:07:59,112 line:-2
XCTIssue enhances failure triage
in many ways.


158
00:07:59,713 --> 00:08:02,516 line:-2
But it's call stacks may be
the most transformative.


159
00:08:03,450 --> 00:08:04,918 line:-1
At the beginning of this session,


160
00:08:04,985 --> 00:08:07,120 line:-2
I suggested that one
of the most important questions


161
00:08:07,187 --> 00:08:09,523 line:-1
to answer about a test failure is where?


162
00:08:10,257 --> 00:08:12,059 line:-1
This is why the core test failure data


163
00:08:12,125 --> 00:08:14,661 line:-2
has always included a file path
and line number


164
00:08:14,995 --> 00:08:18,832 line:-2
captured at bill time, using
compiler tokens like pound file path.


165
00:08:20,300 --> 00:08:23,604 line:-2
A single source code location
is great for simple tests.


166
00:08:23,670 --> 00:08:25,873 line:-2
But isn't as useful
when test code is factored


167
00:08:25,939 --> 00:08:28,141 line:-2
into functions shared
by more than one test.


168
00:08:28,709 --> 00:08:30,043 line:-1
Consider this example.


169
00:08:30,944 --> 00:08:34,147 line:-2
Here are two tests both calling out
to the same shared function.


170
00:08:34,948 --> 00:08:38,652 line:-2
When there's a failure, the annotation
appears next to the assertion.


171
00:08:39,219 --> 00:08:42,756 line:-2
The test method itself becomes confusing,
because it's marked as failing,


172
00:08:43,090 --> 00:08:47,294 line:-2
but has no further information to help
the developer answer the where question.


173
00:08:48,328 --> 00:08:50,597 line:-2
This can be mitigated
if the helper function


174
00:08:50,664 --> 00:08:53,133 line:-2
captures the source location
where it was invoked.


175
00:08:53,200 --> 00:08:56,270 line:-2
And explicitly uses that
in its XCTAssert calls.


176
00:08:57,004 --> 00:08:59,306 line:-2
That improves the presentation
and the test method,


177
00:08:59,806 --> 00:09:01,942 line:-2
but if the helper has more
than one assertion,


178
00:09:02,009 --> 00:09:04,311 line:-2
than the ambiguity
has simply been shifted.


179
00:09:05,579 --> 00:09:10,150 line:-2
Fortunately, XCTIssue captures
and symbolicates call stacks.


180
00:09:10,617 --> 00:09:12,986 line:-2
This means that
there's considerably more context


181
00:09:13,053 --> 00:09:15,088 line:-1
for failures in complex test code.


182
00:09:17,157 --> 00:09:20,460 line:-2
Here's how that same failure looks
when we capture the call stack.


183
00:09:20,961 --> 00:09:23,530 line:-2
Very much like what we saw
in the demo earlier.


184
00:09:23,597 --> 00:09:26,800 line:-2
Answering the where question
is a totally different experience.


185
00:09:26,867 --> 00:09:29,303 line:-2
A gray annotation
in the test method indicates


186
00:09:29,369 --> 00:09:31,371 line:-1
the line under which the failure occurred.


187
00:09:31,839 --> 00:09:35,075 line:-2
And a red annotation in the helper method
highlights the failure itself.


188
00:09:35,943 --> 00:09:39,012 line:-2
No extra code was required
to pass down a location


189
00:09:39,079 --> 00:09:42,049 line:-2
and you don't have to choose
which location is annotated.


190
00:09:42,115 --> 00:09:44,818 line:-2
You get the best of both worlds,
with no extra effort.


191
00:09:46,320 --> 00:09:49,122 line:-2
Finally, I'd like to show you
some more advanced workflows


192
00:09:49,189 --> 00:09:51,792 line:-1
made possible by these new APIs.


193
00:09:52,593 --> 00:09:55,128 line:-1
First, you can implement custom assertions


194
00:09:55,195 --> 00:09:59,366 line:-2
by creating XCTIssue instances directly,
and calling record(_issue:).


195
00:10:00,000 --> 00:10:03,003 line:-2
Here's an example of an assertion
that validates some data,


196
00:10:03,070 --> 00:10:06,340 line:-2
and includes it as an attachment
to the issue that it records.


197
00:10:07,708 --> 00:10:10,344 line:-2
In the initial creation of the issue,
I'm using var,


198
00:10:10,410 --> 00:10:13,647 line:-2
because the rest of the code makes
some modifications to the struct.


199
00:10:14,047 --> 00:10:17,818 line:-2
We could also pass all the information
up-front to a longer initializer.


200
00:10:18,151 --> 00:10:20,420 line:-2
But I think it's a bit easier
to read this way.


201
00:10:21,622 --> 00:10:24,658 line:-2
Next, I'm adding the data
as an attachment to the issue.


202
00:10:25,225 --> 00:10:29,296 line:-2
This means that the data will appear
with the failure in the Xcode test report,


203
00:10:29,696 --> 00:10:34,101 line:-2
enabling me to inspect it during triage
and determine why it failed validation.


204
00:10:35,135 --> 00:10:38,672 line:-2
Here, I'm capturing the location
where my custom assertion was called.


205
00:10:38,739 --> 00:10:42,276 line:-2
This isn't required,
but can result in clear presentation,


206
00:10:42,342 --> 00:10:44,011 line:-1
since the code you see here isn't likely


207
00:10:44,077 --> 00:10:46,446 line:-2
to be useful
in understanding the failure itself.


208
00:10:47,714 --> 00:10:49,383 line:-1
Finally we call record(_issue:),


209
00:10:49,449 --> 00:10:51,752 line:-2
which logs the issue,
and sends it to Xcode.


210
00:10:53,554 --> 00:10:55,455 line:-2
The other advanced workflow
I wanna show you


211
00:10:55,522 --> 00:10:57,724 line:-1
is how you can override record(_issue:)


212
00:10:58,058 --> 00:10:59,526 line:-1
to observe, suppress,


213
00:10:59,893 --> 00:11:02,729 line:-2
or modify failures recorded
in your test class.


214
00:11:03,230 --> 00:11:06,500 line:-2
This method is the funnel point through
which every failure passes.


215
00:11:06,934 --> 00:11:10,270 line:-2
Overrides have total control over
the output of your test class.


216
00:11:11,338 --> 00:11:14,775 line:-2
Our first example overrides
record(_issue:) for observation.


217
00:11:15,275 --> 00:11:16,743 line:-1
It's important to call super,


218
00:11:16,810 --> 00:11:19,580 line:-2
to ensure the issue continues
along the recording chain.


219
00:11:20,147 --> 00:11:23,617 line:-2
You can also observe issues
using XCTestObservationCenter.


220
00:11:23,951 --> 00:11:26,019 line:-2
But the approach here
is useful if you only want


221
00:11:26,086 --> 00:11:27,921 line:-1
to observe failures in one class.


222
00:11:28,922 --> 00:11:33,260 line:-2
If your override does not call super,
you will have suppressed the issue.


223
00:11:33,327 --> 00:11:35,629 line:-2
You will not continue
along the recording chain.


224
00:11:35,696 --> 00:11:38,031 line:-2
And nothing will be logged
or reported to Xcode.


225
00:11:39,566 --> 00:11:43,504 line:-2
Modification is the most common reason
for overriding record(_issue:).


226
00:11:43,904 --> 00:11:46,273 line:-2
This pattern makes it possible
to add attachments,


227
00:11:46,340 --> 00:11:48,141 line:-1
which can be great diagnostic aides.


228
00:11:48,709 --> 00:11:51,778 line:-2
Example here shows
adding a simple string attachment,


229
00:11:51,845 --> 00:11:54,381 line:-2
but the API can handle
a broad range of types.


230
00:11:55,415 --> 00:11:57,050 line:-1
And that wraps up our session.


231
00:11:57,117 --> 00:11:59,019 line:-1
A few key points I hope you take away.


232
00:11:59,786 --> 00:12:02,523 line:-2
Triaging test failures
is one of the most important parts


233
00:12:02,589 --> 00:12:04,057 line:-1
of caring for your test suites.


234
00:12:04,424 --> 00:12:08,228 line:-2
Having call stacks makes it easy
to track down the locations in your code


235
00:12:08,295 --> 00:12:09,997 line:-1
that are most relevant to a failure.


236
00:12:11,031 --> 00:12:14,101 line:-2
This, in turn, supports more
natural patterns in your test code,


237
00:12:14,468 --> 00:12:18,138 line:-2
freeing you up to focus
on code reuse and other good practices.


238
00:12:18,839 --> 00:12:23,977 line:-2
XCTIssue also supports attachments,
which lets you add custom diagnostic data,


239
00:12:24,044 --> 00:12:27,247 line:-2
helping you answer the how
and why of your test failures.


240
00:12:28,215 --> 00:12:29,283 line:-1
Thanks for watching.


241
00:12:29,349 --> 00:12:31,218 line:-1
[chimes]

