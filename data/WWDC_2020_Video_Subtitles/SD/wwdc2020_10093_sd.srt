1
00:00:00,167 --> 00:00:02,169 line:-1
[chimes]


2
00:00:03,804 --> 00:00:06,507 line:-1
Hello and welcome to WWDC.


3
00:00:08,141 --> 00:00:11,578 line:0
Hi. I'm Mohammed, a UIKit engineer.


4
00:00:12,379 --> 00:00:16,984 line:0
Later, I'll be joined by my colleague Joey
from the iOS System UI team,


5
00:00:17,050 --> 00:00:19,920 line:0
and this is
"How to Build for the iPadOS Pointer."


6
00:00:20,821 --> 00:00:26,193 line:-2
In 13.4, iPadOS added general
pointing device support to the iPad.


7
00:00:26,260 --> 00:00:31,365 line:-2
This is a brand-new input method for an OS
that has been primarily touch-based


8
00:00:31,431 --> 00:00:32,900 line:-1
since its inception.


9
00:00:32,966 --> 00:00:37,604 line:-2
Rather than just bring over the exact
interaction model that exists on a Mac,


10
00:00:38,472 --> 00:00:42,709 line:-2
we thought about what value
a pointer can add to iPadOS


11
00:00:42,776 --> 00:00:46,213 line:-2
and how it can coexist
with a touch-based interface.


12
00:00:47,214 --> 00:00:51,518 line:-2
The result is a system
built on a fluid adaptive pointer


13
00:00:51,585 --> 00:00:56,089 line:-2
that morphs into controls when
hovering over them to adapt its accuracy


14
00:00:56,156 --> 00:01:00,194 line:-2
and provide a clear indication
that you're about to interact with them.


15
00:01:01,161 --> 00:01:06,200 line:-2
In other contexts, the pointer changes
its shape and motion characteristics


16
00:01:06,266 --> 00:01:07,968 line:-1
to provide contextual hints.


17
00:01:09,136 --> 00:01:11,672 line:-1
When hovering over text, for example,


18
00:01:11,738 --> 00:01:14,608 line:-2
the pointer changes into a beam
and snaps to lines


19
00:01:14,675 --> 00:01:16,977 line:-1
to make interacting with text easier.


20
00:01:17,611 --> 00:01:20,848 line:-2
In this video,
we'll discuss the strategy we followed


21
00:01:20,914 --> 00:01:22,850 line:-1
to update iPadOS for pointer


22
00:01:23,450 --> 00:01:27,221 line:-2
and how you can use the same strategy
when updating your app.


23
00:01:28,322 --> 00:01:29,656 line:-1
In the course of the discussion,


24
00:01:29,723 --> 00:01:32,626 line:-2
we'll talk about
the pointer customization APIs


25
00:01:32,693 --> 00:01:35,128 line:-1
introduced in iOS 13.4,


26
00:01:35,996 --> 00:01:39,032 line:-2
and we'll talk about some
of the best practices to keep in mind


27
00:01:39,099 --> 00:01:40,601 line:-1
while updating your app.


28
00:01:41,835 --> 00:01:44,605 line:-2
We'll also touch
on some of the basic design principles


29
00:01:44,671 --> 00:01:46,640 line:-1
behind the pointer UI.


30
00:01:46,707 --> 00:01:49,676 line:-2
For a more detailed discussion
of these principles


31
00:01:49,743 --> 00:01:53,247 line:0
and some of the thought processes
behind the pointer design,


32
00:01:53,313 --> 00:01:56,884 line:0
check out the session
on "Design for the iPadOS Pointer."


33
00:01:59,887 --> 00:02:02,723 line:-2
When you use an iPad
with a pointing device connected,


34
00:02:02,789 --> 00:02:06,260 line:-2
you'll notice that a lot of things work
with the pointer automatically


35
00:02:06,326 --> 00:02:09,096 line:-1
without any additional adoption from apps.


36
00:02:09,162 --> 00:02:13,534 line:-2
This is because a lot of system components
have pointer support built in.


37
00:02:14,334 --> 00:02:18,372 line:-2
Controls like UIBarButtonItem,
UISegmentedControl


38
00:02:18,438 --> 00:02:21,041 line:-1
and UIMenuController, to name a few,


39
00:02:21,108 --> 00:02:23,677 line:-2
have built-in pointer effects
and behaviors.


40
00:02:24,945 --> 00:02:28,782 line:-2
Scroll views respond to scrolling
with two fingers


41
00:02:28,849 --> 00:02:30,551 line:-1
as well as mouse wheels


42
00:02:30,617 --> 00:02:33,587 line:-1
and pinching to zoom on the trackpad.


43
00:02:34,588 --> 00:02:36,957 line:-2
And in addition
to these scroll view basics,


44
00:02:37,024 --> 00:02:41,395 line:-2
collection and table view now support
two-finger panning for swipe actions.


45
00:02:42,462 --> 00:02:46,834 line:-2
UITextView and other components
that use UITextInteraction


46
00:02:46,900 --> 00:02:51,738 line:-2
support a suite of new
quick text selection and editing gestures


47
00:02:51,805 --> 00:02:54,808 line:-2
that should be familiar
to anyone who's used a Mac.


48
00:02:56,410 --> 00:03:01,682 line:-2
UIDragInteraction now allows you
to drag quickly via a click-and-drag


49
00:03:01,748 --> 00:03:05,552 line:-2
instead of requiring a long press
as it does with touch.


50
00:03:06,987 --> 00:03:11,391 line:-2
And UIContextMenuInteraction
lets you invoke its menu


51
00:03:11,458 --> 00:03:15,662 line:-2
in a new, compact appearance
via a secondary click.


52
00:03:16,997 --> 00:03:19,233 line:-2
So, how do we go about updating an app
for pointer?


53
00:03:20,667 --> 00:03:24,071 line:-2
We found that it's best
to take a top-down approach.


54
00:03:24,605 --> 00:03:26,907 line:-1
Start with the higher-level APIs.


55
00:03:26,974 --> 00:03:29,776 line:-2
They'll offer you
the most polished experience


56
00:03:29,843 --> 00:03:32,446 line:-1
with tuned behaviors and visuals


57
00:03:32,513 --> 00:03:36,250 line:-2
that are consistent with similar UI
in the rest of the system.


58
00:03:37,050 --> 00:03:40,420 line:-2
There are a number of pointer-related APIs
available to you


59
00:03:40,487 --> 00:03:42,656 line:-1
at different levels of the stack.


60
00:03:42,723 --> 00:03:46,026 line:-2
Many controls
have built-in pointer effects.


61
00:03:46,093 --> 00:03:49,129 line:-2
Some,
like bar buttons and segmented controls,


62
00:03:49,196 --> 00:03:51,665 line:-1
have their effects enabled by default,


63
00:03:52,466 --> 00:03:54,535 line:-1
while others, like UIButton,


64
00:03:54,601 --> 00:03:59,072 line:-2
offer API that allows you to enable
and customize their effects.


65
00:04:00,541 --> 00:04:02,276 line:-1
With UIPointerInteraction,


66
00:04:02,342 --> 00:04:06,113 line:-2
you can make your custom UI react to
and interact with the pointer


67
00:04:06,180 --> 00:04:09,616 line:-2
in a way that feels consistent
with the rest of the system.


68
00:04:10,017 --> 00:04:14,121 line:-2
Using the interaction,
you can choose from one of a collection


69
00:04:14,188 --> 00:04:17,089 line:-2
of system-vended effects
to apply to your views.


70
00:04:17,624 --> 00:04:21,862 line:-2
Or you can change the pointer's shape
within an area of your app.


71
00:04:22,629 --> 00:04:25,365 line:0
UIHoverGestureRecognizer lets you respond


72
00:04:25,432 --> 00:04:28,035 line:0
to the pointer's motion more directly.


73
00:04:28,101 --> 00:04:30,437 line:0
This is great for any custom behavior


74
00:04:30,504 --> 00:04:33,807 line:0
that doesn't involve applying
hover or highlight effects


75
00:04:33,874 --> 00:04:35,943 line:0
or modifying the pointer's appearance.


76
00:04:36,476 --> 00:04:38,412 line:0
For more details on this gesture


77
00:04:38,478 --> 00:04:42,149 line:0
and other pointer-related additions
to gestures and events,


78
00:04:42,216 --> 00:04:45,586 line:0
check out the session
on handling trackpad and mouse input.


79
00:04:46,386 --> 00:04:49,890 line:-2
When updating your app,
you want to aim for an experience


80
00:04:49,957 --> 00:04:53,627 line:-2
that makes it feel consistent
with the rest of the OS.


81
00:04:54,595 --> 00:04:56,730 line:-2
When deciding
where to add pointer support,


82
00:04:56,797 --> 00:05:00,767 line:-2
take your cues from the Human
Interface Guidelines and built-in apps.


83
00:05:01,602 --> 00:05:03,403 line:-1
To that end, a good starting point


84
00:05:03,470 --> 00:05:07,908 line:-2
is ensuring that controls in your app's
chrome have the appropriate effects.


85
00:05:08,876 --> 00:05:12,446 line:-2
By "chrome," we mean the application's
top and bottom bars,


86
00:05:12,513 --> 00:05:14,982 line:-1
so start with any bar buttons in the app.


87
00:05:16,049 --> 00:05:21,755 line:-2
UIBarButtonItems created using
the system item, image or title APIs


88
00:05:21,822 --> 00:05:24,691 line:-2
get appropriate pointer effects
automatically.


89
00:05:26,093 --> 00:05:28,729 line:-1
If you're using the custom view API,


90
00:05:28,795 --> 00:05:31,532 line:-2
you'll have to implement
the pointer behavior yourself,


91
00:05:31,598 --> 00:05:35,135 line:-2
either using the view's convenience API,
if it has one,


92
00:05:35,202 --> 00:05:39,706 line:-2
or by installing a pointer interaction
and managing the effect yourself.


93
00:05:41,608 --> 00:05:46,013 line:-2
UIButtons that have been placed in bars
via the custom view API


94
00:05:46,079 --> 00:05:49,449 line:-2
have their built-in interactions enabled
by default


95
00:05:49,516 --> 00:05:53,353 line:-2
and are given an effect that the system
has deemed appropriate


96
00:05:53,420 --> 00:05:55,856 line:-1
for that button in its containing bar.


97
00:05:57,057 --> 00:06:01,495 line:-2
You'll be able to tweak this effect
using UIButton's convenience APIs.


98
00:06:02,563 --> 00:06:07,568 line:-2
To make this really easy, UIButton
has a two-stage convenience API.


99
00:06:08,268 --> 00:06:10,170 line:-1
To enable the automatic effect,


100
00:06:10,237 --> 00:06:14,842 line:-2
simply set the button's isPointer-
InteractionEnabled property to "true."


101
00:06:15,709 --> 00:06:17,444 line:-1
After enabling the effect,


102
00:06:17,511 --> 00:06:21,081 line:-2
you may customize it
using the button's pointerStyleProvider.


103
00:06:22,316 --> 00:06:27,287 line:-2
In this closure, the system offers you
a proposed effect and shape


104
00:06:27,354 --> 00:06:30,524 line:-2
that have been determined
based on the appearance,


105
00:06:30,591 --> 00:06:33,026 line:-1
size and contents of the button.


106
00:06:34,695 --> 00:06:37,364 line:-1
Here, you can customize either of these


107
00:06:37,931 --> 00:06:41,935 line:-2
or replace them entirely
and construct a new style.


108
00:06:43,437 --> 00:06:45,806 line:-1
Before we look at some examples,


109
00:06:45,873 --> 00:06:49,343 line:-2
let's take a brief detour
and talk about pointer styles.


110
00:06:50,811 --> 00:06:54,581 line:-2
All APIs that modify
the appearance of the pointer


111
00:06:54,648 --> 00:06:59,253 line:-2
use UIPointerStyle
to describe the modifications they apply.


112
00:07:00,554 --> 00:07:02,723 line:-1
Styles fit into two categories.


113
00:07:04,825 --> 00:07:07,628 line:-2
The first is what we call
a content effect.


114
00:07:08,762 --> 00:07:14,368 line:-2
Content effects usually cause the pointer
to morph into a view in the app


115
00:07:14,434 --> 00:07:16,603 line:-1
and apply some visual treatment to it.


116
00:07:18,005 --> 00:07:19,540 line:-1
A common example of this


117
00:07:19,606 --> 00:07:22,409 line:-2
is the highlight effect
applied to bar buttons


118
00:07:22,943 --> 00:07:26,346 line:-2
where the pointer morphs
into a rounded rectangle,


119
00:07:26,413 --> 00:07:28,015 line:-1
slides under the button


120
00:07:28,081 --> 00:07:31,051 line:-2
and applies
a subtle parallax effect to it.


121
00:07:33,220 --> 00:07:36,790 line:-1
This style consists of a UIPointerEffect


122
00:07:36,857 --> 00:07:40,027 line:-2
which describes the visual treatment
applied to the view...


123
00:07:40,961 --> 00:07:43,297 line:-1
and a UIPointerShape


124
00:07:43,363 --> 00:07:46,900 line:-2
which describes the shape
to which the pointer will change.


125
00:07:49,002 --> 00:07:53,574 line:-2
To specify this effect,
we construct a UIPointerStyle


126
00:07:53,640 --> 00:07:57,945 line:-2
with the highlight effect
and roundedRect as the pointer shape.


127
00:08:00,013 --> 00:08:03,550 line:-2
The second category
is shape customizations,


128
00:08:03,617 --> 00:08:09,256 line:-2
which are expressed via a UIPointerShape
and a UIAxis mask.


129
00:08:10,924 --> 00:08:14,328 line:-2
When applied,
the pointer morphs into the shape


130
00:08:14,394 --> 00:08:19,266 line:-2
and is constrained along the specified
axes within the current region.


131
00:08:20,834 --> 00:08:24,238 line:-2
A good example of this
is the pointer behavior in text views


132
00:08:25,138 --> 00:08:28,242 line:-1
where we use a verticalBeam as the shape


133
00:08:28,308 --> 00:08:32,145 line:-2
and specify "vertical"
as the constrainedAxes


134
00:08:32,212 --> 00:08:37,251 line:-2
to make the pointer feel as if it's on
a horizontal rail along the line of text.


135
00:08:38,684 --> 00:08:42,923 line:-2
So, with that basic overview of
the control APIs and the pointer styles,


136
00:08:42,990 --> 00:08:44,591 line:-1
I'm going to hand it over to Joey


137
00:08:44,658 --> 00:08:48,395 line:-2
to demo how they can be applied
to an existing app.


138
00:08:48,462 --> 00:08:49,496 line:-1
Joey?


139
00:08:50,430 --> 00:08:51,832 line:-1
Thanks, Mohammed.


140
00:08:51,899 --> 00:08:54,768 line:-2
Today we're going to take a look
at an app that I've been working on


141
00:08:54,835 --> 00:08:56,570 line:-1
called Quilt Simulator.


142
00:08:56,637 --> 00:08:58,338 line:-1
I'm not much of a quilter myself,


143
00:08:58,405 --> 00:09:01,175 line:-2
but I've been learning about quilting
as I built this app.


144
00:09:01,241 --> 00:09:04,211 line:-2
Let me build and run
to see what we've got so far.


145
00:09:08,215 --> 00:09:12,486 line:0
The first thing we want to take a look at
is this button in the lower right corner.


146
00:09:12,553 --> 00:09:15,622 line:0
It toggles a straight-line guide mode
on and off


147
00:09:15,689 --> 00:09:17,791 line:0
to make stitching in a straight line
easier.


148
00:09:18,692 --> 00:09:21,962 line:0
You can see that it uses the highlight
effect, but it doesn't seem right.


149
00:09:22,029 --> 00:09:23,964 line:0
The effect isn't the right size.


150
00:09:24,965 --> 00:09:28,335 line:-2
Let's switch back to Xcode
and see what we can do to improve it.


151
00:09:32,206 --> 00:09:34,341 line:-2
Here we can see
that the pointer interaction


152
00:09:34,408 --> 00:09:38,545 line:-2
has already been enabled for the button
which gives up the default effect.


153
00:09:38,612 --> 00:09:42,850 line:-2
We can add a pointerStyleProvider for
this ruler button to improve the shape.


154
00:09:50,457 --> 00:09:54,061 line:-2
First we create a rect
that is outset from the button's bounds


155
00:09:54,127 --> 00:09:55,495 line:-1
by a suitable amount...


156
00:09:57,431 --> 00:10:00,133 line:-2
then convert that rect
to the coordinate space


157
00:10:00,200 --> 00:10:03,270 line:-2
of the target of the preview
of the proposed effect.


158
00:10:04,805 --> 00:10:08,575 line:-2
And finally, return a style
that uses the proposed effect


159
00:10:08,642 --> 00:10:11,845 line:-2
but with an improved pointer shape
based on that rect.


160
00:10:12,646 --> 00:10:14,581 line:-1
Let's take a look at the change.


161
00:10:17,351 --> 00:10:21,388 line:0
Much better. This button looks right
and feels more comfortable.


162
00:10:22,756 --> 00:10:25,959 line:-2
Next, let's turn our attention
to the thread selector button


163
00:10:26,026 --> 00:10:27,628 line:-1
in the upper right corner.


164
00:10:27,694 --> 00:10:31,465 line:-2
This button changes color
with the currently selected thread color.


165
00:10:33,133 --> 00:10:36,403 line:-2
I already customized this bar button
to use the lift effect


166
00:10:36,470 --> 00:10:38,705 line:-1
because it has an intrinsic shape.


167
00:10:38,772 --> 00:10:41,208 line:-2
You can see here
it doesn't look quite right.


168
00:10:41,275 --> 00:10:45,579 line:-2
When the pointer approaches the button,
we see a diffuse blur under the button.


169
00:10:45,646 --> 00:10:47,981 line:-1
This is distracting and incorrect.


170
00:10:48,048 --> 00:10:51,285 line:-2
Let's switch back to Xcode
to address this problem.


171
00:10:54,688 --> 00:10:59,760 line:-2
Since it is a UIBarButtonItem,
it already gets an effect by default.


172
00:10:59,826 --> 00:11:03,130 line:-1
Again, we modify the pointerStyleProvider,


173
00:11:03,197 --> 00:11:06,266 line:-2
this time to change the default effect
to a lift effect.


174
00:11:07,234 --> 00:11:11,505 line:-2
This implementation isn't correct though,
so let's fix it with the correct shape.


175
00:11:22,683 --> 00:11:27,154 line:-2
In this updated implementation,
we create a new UITargetedPreview


176
00:11:27,221 --> 00:11:29,723 line:-2
that's suitable to be used
with the lift effect.


177
00:11:29,790 --> 00:11:31,925 line:-1
It's created with the view, target


178
00:11:31,992 --> 00:11:35,062 line:-2
as well as preview parameters
which we create above.


179
00:11:36,763 --> 00:11:38,999 line:-1
The parameter's shadowPath property


180
00:11:39,066 --> 00:11:42,870 line:-2
is set to be the path
which matches the outline of the button.


181
00:11:45,672 --> 00:11:48,775 line:-2
Finally,
the closure returns a pointer style


182
00:11:48,842 --> 00:11:51,645 line:-2
using a lift effect
created with this preview


183
00:11:51,712 --> 00:11:53,914 line:-2
and a pointer shape
that matches the button.


184
00:11:55,516 --> 00:11:58,719 line:-2
And now back to the iPad
to see the improvement.


185
00:12:01,955 --> 00:12:03,357 line:-1
Now things are looking good.


186
00:12:03,423 --> 00:12:06,827 line:-2
That spool of thread just comes alive
as we approach it with the pointer.


187
00:12:08,328 --> 00:12:10,264 line:-1
Mohammed, back to you.


188
00:12:11,198 --> 00:12:12,432 line:-1
Thanks, Joey.


189
00:12:12,499 --> 00:12:14,668 line:-2
Now that we've seen
how to enhance controls,


190
00:12:14,735 --> 00:12:16,837 line:-1
let's talk about custom UI.


191
00:12:17,838 --> 00:12:21,575 line:-2
When considering
adding pointer behaviors to custom UI,


192
00:12:21,642 --> 00:12:26,780 line:-2
focus on areas where you think
they'll add utility and unique value.


193
00:12:28,081 --> 00:12:31,585 line:-2
Our Quilt Simulator app
has this large area in the middle.


194
00:12:31,652 --> 00:12:33,921 line:-1
You click on it once to begin a stitch,


195
00:12:33,987 --> 00:12:37,057 line:-2
and then you click again
in a different location to complete it.


196
00:12:37,558 --> 00:12:40,627 line:-2
By implementing
some custom pointer behaviors,


197
00:12:40,694 --> 00:12:43,297 line:-2
we can do some things
to improve the experience.


198
00:12:44,131 --> 00:12:45,666 line:-1
Let's add two enhancements.


199
00:12:46,667 --> 00:12:50,871 line:-2
First, let's change the pointer's shape
when hovering over the quilt area


200
00:12:50,938 --> 00:12:54,808 line:-2
to make it clear that clicking
in a location starts a stitch.


201
00:12:56,610 --> 00:12:59,780 line:-2
And let's add a guided mode
for beginner quilters


202
00:12:59,847 --> 00:13:03,350 line:-2
where the pointer is constrained
along the vertical axis


203
00:13:03,417 --> 00:13:07,254 line:-2
to make it easier
to make perfectly horizontal stitches.


204
00:13:09,823 --> 00:13:12,392 line:-1
Since this is an entirely custom view,


205
00:13:12,459 --> 00:13:16,763 line:-2
we'll use UIPointerInteraction directly
to achieve our goals.


206
00:13:17,564 --> 00:13:22,870 line:-2
As with other UI interactions, we create
an instance of UIPointerInteraction


207
00:13:22,936 --> 00:13:24,705 line:-1
and attach it to the view.


208
00:13:25,506 --> 00:13:29,176 line:-2
Unlike others, however,
this interaction's delegate is optional.


209
00:13:31,245 --> 00:13:36,350 line:-2
As we did with the controls in our app,
we'll be using UIPointerStyles


210
00:13:36,416 --> 00:13:40,854 line:-2
to specify the effects or shape changes
we'd like to apply to the pointer.


211
00:13:41,755 --> 00:13:46,360 line:-2
Since we want fine-grained control
over where the styles are active,


212
00:13:46,426 --> 00:13:50,297 line:-2
we'll also be defining
custom UIPointerRegions


213
00:13:50,364 --> 00:13:54,902 line:-2
to indicate to the interaction
where to apply the styles we provide.


214
00:13:56,270 --> 00:14:00,974 line:-2
By default, the interaction uses a region
that covers the entire view.


215
00:14:02,676 --> 00:14:04,945 line:-2
If the delegate doesn't provide
any styles,


216
00:14:05,012 --> 00:14:10,484 line:-2
the interaction applies the automatic
pointer effect to the entire view.


217
00:14:11,552 --> 00:14:14,855 line:-1
This is really convenient in simple cases


218
00:14:14,922 --> 00:14:18,725 line:-2
where we want to apply an effect to a view
and be done with it.


219
00:14:18,792 --> 00:14:21,128 line:-1
But our scenario's a bit more specialized.


220
00:14:22,696 --> 00:14:27,634 line:0
Since we want to define behavior
within specific subregions of our view,


221
00:14:27,701 --> 00:14:29,036 line:0
we're going to implement


222
00:14:29,102 --> 00:14:33,340 line:0
UIPointerInteractionDelegate's
regionFor request method.


223
00:14:34,708 --> 00:14:37,845 line:0
This method is called
to request new regions


224
00:14:37,911 --> 00:14:41,114 line:0
as the pointer moves
within the interaction's view.


225
00:14:41,782 --> 00:14:43,650 line:-1
For our implementation,


226
00:14:43,717 --> 00:14:48,088 line:-2
we'll provide it with regions
that correspond to our guides.


227
00:14:49,423 --> 00:14:51,625 line:0
As soon as the pointer enters a region,


228
00:14:51,692 --> 00:14:55,696 line:0
the interaction calls
its delegate's styleForRegion method


229
00:14:55,762 --> 00:14:57,264 line:0
to request a style,


230
00:14:58,065 --> 00:15:02,936 line:0
so we'll need to implement the method
and return a shape customization style


231
00:15:03,003 --> 00:15:05,172 line:0
that provides this crosshair shape.


232
00:15:06,340 --> 00:15:09,943 line:-2
Now I'm gonna hand it back to Joey
to see what this looks like in practice.


233
00:15:11,612 --> 00:15:13,080 line:-1
Thanks again, Mohammed.


234
00:15:13,146 --> 00:15:16,683 line:-2
Let's take another look at Quilt Simulator
to see how we can improve it.


235
00:15:17,384 --> 00:15:21,088 line:-2
Once the quilter has selected a thread
color, it's time to start quilting,


236
00:15:21,154 --> 00:15:24,191 line:-2
which is easily done
by clicking for each of the stitches


237
00:15:24,258 --> 00:15:25,759 line:-1
on the patchwork area.


238
00:15:26,760 --> 00:15:28,562 line:-1
First I'll select some yellow thread.


239
00:15:33,367 --> 00:15:37,905 line:-2
I can zoom in with two fingers, leveraging
the capabilities of UIScrollView...


240
00:15:40,641 --> 00:15:43,177 line:-2
and I'll make a few stitches here
to get started.


241
00:15:50,117 --> 00:15:52,619 line:-2
This is a great opportunity
to take advantage


242
00:15:52,686 --> 00:15:55,489 line:-2
of the laser precision
the pointer is capable of


243
00:15:55,556 --> 00:16:00,827 line:-2
by specifying a custom pointer shape
and assist the user with custom regions.


244
00:16:04,131 --> 00:16:08,602 line:0
The first thing we want to do is add the
custom pointer interaction to the view.


245
00:16:15,676 --> 00:16:20,280 line:0
This creates a new UIPointerInteraction
with "self" as the delegate


246
00:16:20,347 --> 00:16:22,115 line:0
and adds it to the quilt view.


247
00:16:26,386 --> 00:16:30,090 line:0
I already implemented
the styleForRegion delegate method.


248
00:16:30,991 --> 00:16:34,461 line:0
The first line creates
a UIPointerShape object


249
00:16:34,528 --> 00:16:38,031 line:0
with a custom Bezier path
we get from helper method.


250
00:16:40,734 --> 00:16:42,736 line:0
The second creates and returns


251
00:16:42,803 --> 00:16:45,939 line:0
a UIPointerStyle
that uses the pointer shape.


252
00:16:46,607 --> 00:16:48,075 line:-1
Let's see what it looks like.


253
00:17:02,956 --> 00:17:06,792 line:-2
Much better. This feels more natural
with such fine thread.


254
00:17:07,560 --> 00:17:10,964 line:-2
Let's return to the straight-line guide
I mentioned earlier.


255
00:17:11,031 --> 00:17:13,400 line:-2
If I turn it on
by clicking the ruler button...


256
00:17:16,136 --> 00:17:18,204 line:-1
then make a few stitches...


257
00:17:24,611 --> 00:17:28,715 line:-2
it's plain to see how much easier it is
to produce excellent results.


258
00:17:29,750 --> 00:17:31,852 line:-1
This feels a little disorienting though.


259
00:17:31,919 --> 00:17:33,954 line:-1
The pointer is moving around freely,


260
00:17:34,021 --> 00:17:36,924 line:-2
but the stitches are showing up
only on the grid lines.


261
00:17:40,928 --> 00:17:42,930 line:-1
Let's see what we can do about that.


262
00:17:45,332 --> 00:17:48,368 line:-2
We can modify
our delegate method implementations


263
00:17:48,435 --> 00:17:50,704 line:-1
to restrict pointer movement vertically


264
00:17:50,771 --> 00:17:53,540 line:-2
so the pointer is constrained
to each of the rows.


265
00:17:53,607 --> 00:17:57,277 line:-2
First, I'll add
a regionFor request implementation


266
00:17:57,344 --> 00:17:59,980 line:-1
to supply different regions per guideline.


267
00:18:07,387 --> 00:18:09,957 line:-1
If we're using StraightLineStitch mode,


268
00:18:10,023 --> 00:18:14,127 line:-2
then provide a separate region that's
the height of one of our grid lines.


269
00:18:21,001 --> 00:18:23,070 line:-1
Otherwise, return the default region.


270
00:18:24,137 --> 00:18:27,875 line:-2
Next, we'll constrain the pointer's
movement on the vertical axis.


271
00:18:38,352 --> 00:18:39,686 line:-1
If we're using the guide,


272
00:18:39,753 --> 00:18:43,891 line:-2
return the crosshair with
the constrainedAxes set to "vertical."


273
00:18:43,957 --> 00:18:46,093 line:-1
Otherwise, the same as before.


274
00:18:55,269 --> 00:18:59,239 line:-2
As you can see, we've really enhanced
the app for stitching straight lines.


275
00:18:59,306 --> 00:19:02,609 line:-2
As I toss the pointer,
it lands on horizontal guidelines,


276
00:19:02,676 --> 00:19:06,880 line:-2
and the cursor is almost magnetically
attracted to where it's supposed to be.


277
00:19:06,947 --> 00:19:10,284 line:-2
And that's it for the demo.
Back to you, Mohammed.


278
00:19:11,151 --> 00:19:13,453 line:-1
Thanks again, Joey. That looks great.


279
00:19:13,520 --> 00:19:16,323 line:-2
Now let's talk
about a few extra steps you can take


280
00:19:16,390 --> 00:19:18,825 line:-2
to tailor the pointer experience
to your app.


281
00:19:20,994 --> 00:19:23,063 line:-1
There are a few little things you can do


282
00:19:23,130 --> 00:19:26,033 line:-2
to really polish
the pointer experience in your app.


283
00:19:26,967 --> 00:19:31,004 line:-2
One such enhancement is providing
expanded padding around views


284
00:19:31,071 --> 00:19:33,307 line:-1
to amplify the pointer's magnetism


285
00:19:33,373 --> 00:19:37,077 line:-2
and make it easier to interact
with important elements in your UI.


286
00:19:37,978 --> 00:19:40,848 line:-2
As you can see here,
the pointer snaps to this button


287
00:19:40,914 --> 00:19:42,916 line:-1
well before it reaches its edge.


288
00:19:44,017 --> 00:19:46,820 line:-1
This is done by providing a pointer region


289
00:19:46,887 --> 00:19:50,057 line:-2
that extends the pointer style's
effective area.


290
00:19:51,091 --> 00:19:54,228 line:-2
It's important to note
that any regions you provide


291
00:19:54,294 --> 00:19:58,498 line:-2
must be contained within a hit-testable
area of the interaction's view.


292
00:19:59,266 --> 00:20:02,102 line:-2
If you provide a region
larger than the view,


293
00:20:02,169 --> 00:20:05,806 line:-2
you must also ensure
that this area hit-tests to the view


294
00:20:05,873 --> 00:20:08,375 line:-1
by overriding its hit-test method.


295
00:20:09,877 --> 00:20:14,882 line:-2
By tuning pointer regions,
we can control exactly when and how


296
00:20:14,948 --> 00:20:17,084 line:-1
the pointer transitions between effects.


297
00:20:18,051 --> 00:20:20,254 line:-1
In this example from the Reminders app,


298
00:20:20,954 --> 00:20:24,825 line:-2
we can see that even though
these views are visually separate,


299
00:20:24,892 --> 00:20:28,262 line:-2
the pointer transitions between them
seamlessly


300
00:20:28,328 --> 00:20:31,598 line:-2
without dropping back to the system shape
in the gaps.


301
00:20:33,400 --> 00:20:36,136 line:-2
This was achieved
by providing the interaction


302
00:20:36,203 --> 00:20:38,205 line:-1
with contiguous pointer regions.


303
00:20:39,873 --> 00:20:42,943 line:-2
When coordinating multiple pointer regions
or styles,


304
00:20:43,010 --> 00:20:45,312 line:-2
it often makes sense
to take your interaction


305
00:20:45,379 --> 00:20:48,182 line:-1
up to a higher level in the view hierarchy


306
00:20:48,248 --> 00:20:52,319 line:-2
where you have a more complete picture
of the UI and can reason more globally.


307
00:20:53,453 --> 00:20:57,558 line:-2
In this example, the interaction
is attached to the entire view,


308
00:20:57,624 --> 00:21:01,795 line:-2
and its delegate provides regions
for the individual subviews.


309
00:21:04,031 --> 00:21:05,766 line:-1
Another great thing you can do


310
00:21:05,832 --> 00:21:10,437 line:-2
is coordinate additional animations
with the pointer interaction's animation.


311
00:21:11,405 --> 00:21:14,708 line:-2
This is a great way
to show useful information


312
00:21:14,775 --> 00:21:18,812 line:-2
or hide extraneous chrome
to reduce clutter during the effect.


313
00:21:20,113 --> 00:21:24,151 line:-2
Here we see how UISegmentedControl
hides its separator


314
00:21:24,218 --> 00:21:28,755 line:-2
as the pointer shifts between segments
for a cleaner, less cluttered look.


315
00:21:30,824 --> 00:21:32,059 line:-1
To coordinate animations,


316
00:21:32,125 --> 00:21:36,129 line:-2
just implement
UIPointerInteractionDelegates willEnter


317
00:21:36,196 --> 00:21:38,632 line:-1
and willExitRegion methods


318
00:21:38,699 --> 00:21:42,569 line:-2
and attach animations
to the provided animator object.


319
00:21:43,837 --> 00:21:47,508 line:-2
In this example,
we'll fade out a separatorView


320
00:21:47,574 --> 00:21:50,444 line:-1
when the pointer enters the region,


321
00:21:50,511 --> 00:21:53,213 line:-1
and fade it back in when it exits.


322
00:21:54,481 --> 00:21:56,650 line:-1
For more guidelines and polish tips,


323
00:21:56,717 --> 00:22:00,721 line:-2
check out the Human Interface Guidelines
and developer documentation.


324
00:22:01,588 --> 00:22:05,659 line:-2
Also, please check out the sample
related to this video


325
00:22:05,726 --> 00:22:08,328 line:-2
as it has some great examples
for you to try out.


326
00:22:09,630 --> 00:22:11,665 line:-1
Take these simple guidelines to heart


327
00:22:11,732 --> 00:22:15,602 line:-2
and build iPad apps
with first-class pointer experiences.


328
00:22:16,503 --> 00:22:21,074 line:-2
Prefer using higher-level APIs
for a more native look and feel.


329
00:22:21,808 --> 00:22:25,078 line:-2
Add pointer effects
to controls and custom UI


330
00:22:25,145 --> 00:22:26,980 line:-1
to make them feel responsive.


331
00:22:27,714 --> 00:22:32,352 line:-2
And finally, take some small steps
to polish your implementation


332
00:22:32,419 --> 00:22:35,689 line:-2
and infuse your UI
with surprise and delight.


333
00:22:36,256 --> 00:22:37,424 line:-1
Thank you for watching.


334
00:22:37,491 --> 00:22:40,093 line:-2
I can't wait to use all the amazing
pointer-capable apps


335
00:22:40,160 --> 00:22:41,161 line:-1
you're going to build.


336
00:22:41,228 --> 00:22:43,163 line:-1
[chimes]

