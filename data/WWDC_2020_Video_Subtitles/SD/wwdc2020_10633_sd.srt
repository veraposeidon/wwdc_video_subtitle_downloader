1
00:00:03,804 --> 00:00:06,440 line:-1
Hello and welcome to WWDC.


2
00:00:08,509 --> 00:00:12,012 line:0
Hello and welcome
to the ReplayKit for macOS session.


3
00:00:12,079 --> 00:00:13,213 line:0
My name is Johnny Trenh,


4
00:00:13,280 --> 00:00:15,449 line:0
and I'm a software engineer
on the ReplayKit team.


5
00:00:15,516 --> 00:00:20,087 line:-2
Today, I'm really excited to talk to you
about ReplayKit on the Mac platform,


6
00:00:20,153 --> 00:00:23,457 line:-2
as well as some new, exciting features
for all platforms.


7
00:00:24,091 --> 00:00:26,527 line:-2
I've got a lot to cover,
so let's get started.


8
00:00:26,593 --> 00:00:29,496 line:-2
ReplayKit is a framework
that gives you the ability


9
00:00:29,563 --> 00:00:35,135 line:-2
to record or capture your application's
screen, audio and microphone content


10
00:00:35,202 --> 00:00:38,739 line:-2
to a video that people can edit,
save and share.


11
00:00:38,805 --> 00:00:40,607 line:-1
ReplayKit also gives you the ability


12
00:00:40,674 --> 00:00:44,344 line:-2
to broadcast your application's screen,
audio and microphone


13
00:00:44,411 --> 00:00:48,782 line:-2
to other third-party broadcast services
to be viewed all over the world.


14
00:00:48,849 --> 00:00:52,619 line:0
ReplayKit originally launched for iOS
in 2015,


15
00:00:52,686 --> 00:00:56,757 line:0
and in 2016,
ReplayKit for tvOS was introduced.


16
00:00:56,823 --> 00:01:02,062 line:-2
This year, I'm pleased to announce
ReplayKit is coming to the Mac.


17
00:01:02,129 --> 00:01:06,867 line:-2
All the great features that are available
to your iOS and tvOS applications


18
00:01:06,934 --> 00:01:09,803 line:-2
will now be made available
for your Mac applications.


19
00:01:10,504 --> 00:01:14,942 line:0
You can now record, capture
and broadcast your Mac application


20
00:01:15,008 --> 00:01:16,777 line:0
to everyone in the world.


21
00:01:16,844 --> 00:01:19,046 line:-2
The main goal in bringing ReplayKit
to the Mac


22
00:01:19,112 --> 00:01:22,516 line:-2
was to ensure that you have access
to all the great features


23
00:01:22,583 --> 00:01:26,053 line:-2
that were already shipping
with iOS and tvOS,


24
00:01:26,787 --> 00:01:30,357 line:-2
along with the same HD quality,
low performance impact


25
00:01:30,424 --> 00:01:32,626 line:-1
and built-in privacy safeguards.


26
00:01:32,693 --> 00:01:33,994 line:-1
Now, as you can imagine,


27
00:01:34,061 --> 00:01:38,966 line:-2
applications work quite differently
on the Mac when compared to iOS or tvOS,


28
00:01:39,032 --> 00:01:42,302 line:-2
so let's take a look at
the major ReplayKit features in the Mac.


29
00:01:42,369 --> 00:01:44,705 line:-1
And I'll start with screen recording.


30
00:01:45,606 --> 00:01:47,508 line:-1
Screen recording gives you the ability


31
00:01:47,574 --> 00:01:51,445 line:-2
to record your application's screen,
audio and microphone


32
00:01:51,512 --> 00:01:55,015 line:-2
into a video that people can then edit,
save or share.


33
00:01:55,682 --> 00:01:57,518 line:-2
How does screen recording work
under the hood?


34
00:01:57,584 --> 00:01:59,152 line:-1
Well, let's take a look.


35
00:01:59,586 --> 00:02:02,256 line:-2
Your application
will call into RPScreenRecorder


36
00:02:02,322 --> 00:02:04,525 line:-1
to get the shared recorder instance.


37
00:02:04,591 --> 00:02:07,394 line:0
With the shared instance,
you call startRecording,


38
00:02:07,461 --> 00:02:10,497 line:0
at which point,
ReplayKit will start to capture


39
00:02:10,564 --> 00:02:15,169 line:0
the screen, audio and microphone samples
from your application,


40
00:02:15,235 --> 00:02:18,272 line:0
and start writing those samples
into a movie file.


41
00:02:18,338 --> 00:02:20,574 line:0
When your application calls stopRecording,


42
00:02:20,641 --> 00:02:24,945 line:0
ReplayKit saves the recording,
calls the preview and share extension,


43
00:02:25,012 --> 00:02:29,349 line:0
and passes that information back up
through RPPreviewViewController.


44
00:02:29,416 --> 00:02:31,351 line:0
You then present
the previewViewController,


45
00:02:31,418 --> 00:02:34,922 line:0
which allows people to edit,
save or share that movie file.


46
00:02:34,988 --> 00:02:36,123 line:-1
Why don't we jump in


47
00:02:36,190 --> 00:02:38,959 line:-2
and see how we can start
in-app recording in a project?


48
00:02:39,593 --> 00:02:42,496 line:-2
So here, I wanna talk a little bit
about our project first.


49
00:02:42,563 --> 00:02:44,298 line:-1
I'm here on our main storyboard.


50
00:02:44,364 --> 00:02:45,699 line:-1
So, the main storyboard,


51
00:02:45,766 --> 00:02:47,701 line:-2
we have three buttons
that are gonna indicate


52
00:02:47,768 --> 00:02:50,137 line:-2
the different functionalities
that we're going to express


53
00:02:50,204 --> 00:02:51,772 line:-1
and build out throughout this demo.


54
00:02:51,839 --> 00:02:55,042 line:-2
We're only gonna focus on
a Start Recording button right now


55
00:02:55,108 --> 00:02:58,645 line:0
that you see right here on our storyboard.


56
00:02:58,712 --> 00:03:02,683 line:-2
So this button is already hooked up
to our code


57
00:03:02,749 --> 00:03:05,786 line:-1
via IBOutlets and through the storyboard.


58
00:03:05,853 --> 00:03:08,255 line:-2
What we're gonna look at now
is the IBAction


59
00:03:08,322 --> 00:03:11,191 line:-2
for what happens
when someone presses this button.


60
00:03:11,258 --> 00:03:17,097 line:-2
So here in our code, the IBAction
is right here for recordButtonTapped.


61
00:03:17,164 --> 00:03:20,067 line:-2
We're gonna do two different types
of things with this button.


62
00:03:20,133 --> 00:03:22,536 line:-2
We're actually gonna have the button
pull double duty for us.


63
00:03:22,603 --> 00:03:26,039 line:-2
If we're actively recording,
this button's gonna stop recording.


64
00:03:26,106 --> 00:03:27,708 line:-1
But if we're not actively recording,


65
00:03:27,774 --> 00:03:29,476 line:-2
this button's gonna start recording
for us.


66
00:03:29,543 --> 00:03:33,914 line:-2
So let's go ahead and take a look
at what happens when we start recording.


67
00:03:33,981 --> 00:03:36,250 line:-1
So here is our IBAction,


68
00:03:36,316 --> 00:03:39,319 line:-2
and we're gonna look at the method
startRecording.


69
00:03:39,386 --> 00:03:40,387 line:-1
This is very easy.


70
00:03:40,454 --> 00:03:42,489 line:-2
The first thing you wanna do
is you wanna go ahead


71
00:03:42,556 --> 00:03:46,260 line:-2
and call RPScreenRecorder
and get the shared recorder instance.


72
00:03:46,326 --> 00:03:49,429 line:-2
From there, we're gonna go ahead
and call startRecording.


73
00:03:49,496 --> 00:03:55,035 line:-2
After that, this entire block
is going to be executed right here.


74
00:03:55,102 --> 00:03:58,205 line:-2
So, the first thing you wanna do,
'cause we're gonna give back an error,


75
00:03:58,272 --> 00:04:00,007 line:-1
is you wanna see if we have an error.


76
00:04:00,073 --> 00:04:02,709 line:-2
If we don't have an error,
then we're properly recording,


77
00:04:02,776 --> 00:04:04,278 line:-1
and everything has started up fine.


78
00:04:04,344 --> 00:04:08,982 line:-2
So here, we say if there's no error,
all we're simply gonna do


79
00:04:09,049 --> 00:04:11,285 line:-2
is we're gonna go ahead
and update our recording state.


80
00:04:11,351 --> 00:04:13,654 line:-2
What do we do when we update
our recording state?


81
00:04:13,720 --> 00:04:16,690 line:-2
Actually, what we do when we update
our recording state


82
00:04:16,757 --> 00:04:19,860 line:-2
is we simply set the button
to reflect that.


83
00:04:19,927 --> 00:04:21,827 line:-1
Are we recording or not recording?


84
00:04:21,894 --> 00:04:24,865 line:-2
"Start" or "stop," and that's it,
and we update our state.


85
00:04:25,666 --> 00:04:27,968 line:-1
After that, we are now up and recording.


86
00:04:28,035 --> 00:04:30,637 line:-2
ReplayKit is now actually
capturing everything


87
00:04:30,704 --> 00:04:32,506 line:-1
and recording a video for you.


88
00:04:32,573 --> 00:04:35,242 line:-2
So what happens when your user
taps the button again?


89
00:04:35,309 --> 00:04:38,679 line:-2
Well, here, we're gonna go ahead
and call stopRecording.


90
00:04:38,745 --> 00:04:40,881 line:-1
And let's take a look at how that works.


91
00:04:41,682 --> 00:04:45,219 line:-2
Going down to the stopRecording method
right here,


92
00:04:45,285 --> 00:04:48,388 line:-2
once again, we're gonna go ahead
and get the shared recorder instance,


93
00:04:48,455 --> 00:04:51,625 line:-2
and then we're gonna go ahead
and call stopRecording.


94
00:04:51,692 --> 00:04:52,693 line:-1
When we do that,


95
00:04:52,759 --> 00:04:55,262 line:-2
the completionHandler block
is then executed.


96
00:04:55,329 --> 00:04:56,997 line:-1
Now this looks a little bit complicated,


97
00:04:57,064 --> 00:04:59,900 line:-2
but I'll walk you through it
'cause it's actually really simple.


98
00:04:59,967 --> 00:05:03,303 line:-2
The first thing I'm gonna do
is check to see if we have an error.


99
00:05:03,370 --> 00:05:04,872 line:-1
If we don't have an error,


100
00:05:04,938 --> 00:05:08,475 line:-2
let's check to see if we have
a previewViewController.


101
00:05:08,542 --> 00:05:11,378 line:-2
Now, this is where it gets
really interesting.


102
00:05:11,445 --> 00:05:13,947 line:-2
What we wanna do with
the previewViewController is,


103
00:05:14,014 --> 00:05:15,015 line:-1
like we spoke about,


104
00:05:15,082 --> 00:05:19,019 line:-2
you wanna display it so people can edit,
save or share their video.


105
00:05:19,086 --> 00:05:21,522 line:-1
So, we get the previewViewController,


106
00:05:21,588 --> 00:05:26,226 line:-2
we go ahead
and save a reference to that here,


107
00:05:26,293 --> 00:05:28,529 line:-1
and then this is the important part,


108
00:05:28,595 --> 00:05:33,267 line:-2
you want to make sure that you are
a delegate of the previewViewController.


109
00:05:33,333 --> 00:05:36,370 line:-2
And I'll talk to you about
why that's important in just a little bit.


110
00:05:36,937 --> 00:05:39,773 line:-2
Then you wanna go ahead
and share the sheet.


111
00:05:39,840 --> 00:05:43,010 line:-2
In this case,
I'm using mainWindow and beginSheet.


112
00:05:43,076 --> 00:05:49,650 line:-2
You can share the sheet or show the sheet
however which way you choose using UIKit,


113
00:05:49,716 --> 00:05:53,053 line:-2
but in this example,
we're gonna go ahead and use beginSheet.


114
00:05:53,120 --> 00:05:55,489 line:-2
And that's it.
We're gonna go ahead and show the sheet.


115
00:05:56,390 --> 00:06:01,028 line:-2
We do some error-checking here,
and if there's errors, we print them.


116
00:06:01,094 --> 00:06:02,863 line:-1
If not, then after that,


117
00:06:02,930 --> 00:06:06,266 line:-2
we go ahead and set the recording state
because we're no longer recording.


118
00:06:06,333 --> 00:06:08,468 line:-1
So, let's take a look at what happens


119
00:06:08,535 --> 00:06:11,605 line:-2
after the user interacts
with the previewViewController.


120
00:06:11,672 --> 00:06:14,174 line:-2
That's why we wanna be part
of the delegate.


121
00:06:14,241 --> 00:06:16,310 line:-2
So, I'm gonna go ahead
and scroll down here,


122
00:06:16,376 --> 00:06:20,147 line:-2
and here is our delegate,
previewViewControllerDidFinish.


123
00:06:20,214 --> 00:06:25,219 line:-2
This is gonna be called when the user
is done using the previewViewController.


124
00:06:25,285 --> 00:06:28,889 line:-2
They're gonna go ahead
and click Save or exit out of it,


125
00:06:28,956 --> 00:06:30,991 line:-1
and that's when you get notified.


126
00:06:31,058 --> 00:06:32,659 line:-1
So the reason why this is important


127
00:06:32,726 --> 00:06:37,130 line:-2
is because we wanna keep a reference
to that previewViewController


128
00:06:37,197 --> 00:06:38,332 line:-1
so that we can dismiss it.


129
00:06:38,398 --> 00:06:39,633 line:-1
And that's it.


130
00:06:39,700 --> 00:06:42,069 line:-2
Just like that,
you're up and running with ReplayKit


131
00:06:42,135 --> 00:06:44,338 line:-1
and recording your application to a video.


132
00:06:44,404 --> 00:06:46,607 line:-2
Now that you've seen
what it looks like in code,


133
00:06:46,673 --> 00:06:48,208 line:-1
I wanna take a moment to highlight


134
00:06:48,275 --> 00:06:51,311 line:-2
some of the differences
with RPPreviewViewController.


135
00:06:51,378 --> 00:06:53,714 line:-2
People will be able to edit
and trim the recording


136
00:06:53,780 --> 00:06:56,683 line:-2
by tapping on the Edit button
in the previewViewController.


137
00:06:57,784 --> 00:07:00,754 line:-2
Saving the video will be
a very familiar experience for people


138
00:07:00,821 --> 00:07:04,191 line:-2
as it follows the standard
macOS file-save flow.


139
00:07:04,992 --> 00:07:06,927 line:-1
With just two simple API calls,


140
00:07:06,994 --> 00:07:09,963 line:-2
you're now up and running
and recording with ReplayKit.


141
00:07:10,030 --> 00:07:11,465 line:-1
With in-app screen recording,


142
00:07:11,532 --> 00:07:15,202 line:-2
you and your application
don't have access to the movie file.


143
00:07:15,269 --> 00:07:17,437 line:-2
ReplayKit handles
the creation of the movie,


144
00:07:17,504 --> 00:07:21,074 line:-2
and people drive the sharing
and saving of the recorded session.


145
00:07:21,141 --> 00:07:22,509 line:-1
However, in the past,


146
00:07:22,576 --> 00:07:25,012 line:-2
I've received a lot of requests
from other developers


147
00:07:25,078 --> 00:07:27,681 line:-1
about having access to the recorded movie.


148
00:07:27,748 --> 00:07:30,684 line:-2
I think we finally have an answer
for those requests.


149
00:07:31,385 --> 00:07:33,887 line:0
This is how screen recording
currently works.


150
00:07:33,954 --> 00:07:38,525 line:0
As you can see, the movie file is created
and saved within ReplayKit,


151
00:07:38,592 --> 00:07:42,496 line:0
and your application has no access
to the recorded movie itself.


152
00:07:42,563 --> 00:07:44,998 line:0
It is only provided with
a previewViewController


153
00:07:45,065 --> 00:07:47,568 line:0
for people to edit and save the video.


154
00:07:47,634 --> 00:07:51,104 line:-2
But what if instead of ReplayKit
handling the video file,


155
00:07:51,805 --> 00:07:55,342 line:0
we give your application
direct access to the video?


156
00:07:55,409 --> 00:07:57,878 line:0
You can now do that with our new stop API.


157
00:07:57,945 --> 00:08:00,080 line:-1
The new stopRecording(with URL


158
00:08:00,147 --> 00:08:03,183 line:-2
will allow you to provide
a destination URL,


159
00:08:03,250 --> 00:08:07,487 line:-2
and ReplayKit will write and save
the recorded movie to that URL.


160
00:08:07,554 --> 00:08:10,691 line:-2
You now have direct access
to the recorded movie,


161
00:08:10,757 --> 00:08:13,861 line:-2
and you can incorporate them
into your application.


162
00:08:13,927 --> 00:08:19,166 line:-2
With it, you can create and manage
ReplayKit videos in your application.


163
00:08:19,233 --> 00:08:22,035 line:-1
You can even create a custom video editor


164
00:08:22,102 --> 00:08:25,806 line:-2
and have it integrated
right into your own app experience.


165
00:08:25,873 --> 00:08:29,810 line:-2
These are just some of the new
and exciting experiences you can create


166
00:08:29,877 --> 00:08:32,880 line:-1
using the new stopRecording API.


167
00:08:32,946 --> 00:08:34,515 line:-1
But you might be thinking,


168
00:08:34,581 --> 00:08:38,150 line:-2
"What if I don't want ReplayKit
to make the movie recording for me?


169
00:08:38,217 --> 00:08:39,820 line:-1
What if I want more control


170
00:08:39,886 --> 00:08:42,556 line:-2
of my application's video
and audio content?"


171
00:08:43,624 --> 00:08:46,360 line:-2
And for that,
you can use in-app screen capture,


172
00:08:46,426 --> 00:08:50,430 line:-2
the next major feature
we've brought to the Mac for ReplayKit.


173
00:08:50,497 --> 00:08:51,832 line:-1
With in-app screen capture,


174
00:08:51,899 --> 00:08:55,435 line:-2
ReplayKit will send
the audio and video samples


175
00:08:55,502 --> 00:08:57,571 line:-1
straight to your application's process,


176
00:08:57,638 --> 00:09:00,440 line:-2
where you'll have complete control
in how to use them.


177
00:09:01,108 --> 00:09:04,011 line:-2
Let's go ahead and take a quick look
at how that works.


178
00:09:04,478 --> 00:09:07,114 line:0
You've already seen how
in-app screen recording is done


179
00:09:07,181 --> 00:09:10,350 line:0
by interacting with
the shared screen recorder instance,


180
00:09:10,417 --> 00:09:12,586 line:0
but instead of calling startRecording,


181
00:09:12,653 --> 00:09:15,088 line:0
when startCapture is called
on the shared recorder,


182
00:09:15,155 --> 00:09:19,826 line:0
ReplayKit will start to capture
your audio, visual and microphone samples


183
00:09:19,893 --> 00:09:21,428 line:0
from your application.


184
00:09:21,495 --> 00:09:25,465 line:0
However, instead of ReplayKit
creating and managing a movie for you


185
00:09:25,532 --> 00:09:26,934 line:0
as we do in recording,


186
00:09:27,000 --> 00:09:31,471 line:0
we send all audio and visual samples
back to your application process.


187
00:09:31,538 --> 00:09:33,674 line:-2
Let's jump back
into our sample code project


188
00:09:33,740 --> 00:09:36,410 line:-2
and see how we can get started
with in-app capture for the Mac.


189
00:09:36,910 --> 00:09:39,012 line:-1
Okay, so we're back into our project here,


190
00:09:39,079 --> 00:09:41,248 line:-2
and once again,
we're taking a look at the storyboard.


191
00:09:41,315 --> 00:09:44,751 line:-2
Remember, like we said before,
we're building out this demo


192
00:09:44,818 --> 00:09:48,655 line:-2
so that we can cover all three
of the major functionalities in ReplayKit.


193
00:09:48,722 --> 00:09:50,924 line:-2
We've already covered
the Start Recording button.


194
00:09:50,991 --> 00:09:54,528 line:-2
Now we're gonna go ahead
and focus on the Start Capture button,


195
00:09:54,595 --> 00:09:57,731 line:-2
and let's take a look
at how that looks like inside the code.


196
00:09:57,798 --> 00:10:01,802 line:-2
So here we have an IBAction
that's tied to the button


197
00:10:01,869 --> 00:10:03,136 line:-1
from our storyboard.


198
00:10:03,203 --> 00:10:06,473 line:-2
Just like with recording,
our button's gonna pull double duty.


199
00:10:06,540 --> 00:10:10,077 line:-2
If we're actively not recording
or broadcasting or capturing,


200
00:10:10,143 --> 00:10:12,813 line:-1
tapping this button's gonna start capture.


201
00:10:12,880 --> 00:10:17,050 line:-2
Now, if we are actively capturing,
tapping this button's gonna stop capture.


202
00:10:17,117 --> 00:10:19,219 line:-2
So let's go ahead and take a look
at what happens


203
00:10:19,286 --> 00:10:21,121 line:-1
when we hit Start Capture.


204
00:10:22,089 --> 00:10:23,657 line:-1
Here's our code for startCapture.


205
00:10:23,724 --> 00:10:28,862 line:-2
Now, it looks a little bit crazy,
but I'll talk to you step-by-step.


206
00:10:28,929 --> 00:10:31,598 line:-2
Here, we're gonna go ahead
and call ScreenRecorder


207
00:10:31,665 --> 00:10:33,400 line:-1
and get the shared recorder instance.


208
00:10:33,467 --> 00:10:36,370 line:-2
From there,
you're gonna call startCapture.


209
00:10:36,436 --> 00:10:40,073 line:-2
StartCapture is gonna take in
two different handlers.


210
00:10:40,140 --> 00:10:44,745 line:-2
The first handler is going to be
your sample handler, which we see here.


211
00:10:45,646 --> 00:10:50,651 line:-2
This block of code is executed
every time ReplayKit gives you a sample,


212
00:10:50,717 --> 00:10:53,887 line:-1
whether it be audio, video or microphone.


213
00:10:53,954 --> 00:10:57,024 line:-1
So this block of code is run continuously.


214
00:10:57,090 --> 00:11:00,527 line:-2
Now, the second handler
is going to be the completionHandler,


215
00:11:00,594 --> 00:11:02,162 line:-1
which we have here.


216
00:11:03,096 --> 00:11:06,366 line:-2
Now, the completionHandler
is called only once


217
00:11:06,433 --> 00:11:08,101 line:-1
when you start capture.


218
00:11:08,168 --> 00:11:10,604 line:-2
This is much like
the recording completionHandler


219
00:11:10,671 --> 00:11:13,740 line:-2
where it signifies to you
that capture has started,


220
00:11:13,807 --> 00:11:15,342 line:-1
and will give you an error


221
00:11:15,409 --> 00:11:18,045 line:-2
if there's something that happened
in the process.


222
00:11:18,111 --> 00:11:20,581 line:-2
So, let's take a look
at the completionHandler first,


223
00:11:20,647 --> 00:11:24,151 line:-2
and then we'll take a look
at what we do when the samples come in.


224
00:11:24,218 --> 00:11:26,620 line:-2
Here in the completionHandler,
just like with recording,


225
00:11:26,687 --> 00:11:28,755 line:-2
we're gonna check to see
if we have any errors.


226
00:11:28,822 --> 00:11:31,692 line:-2
If we don't have any errors,
we're gonna set the captureState


227
00:11:31,758 --> 00:11:33,193 line:-1
much like we did with the recording.


228
00:11:33,260 --> 00:11:35,562 line:-2
And what did we do
in the recording captureState?


229
00:11:35,629 --> 00:11:39,099 line:-2
Well, we set the button title,
our active state internally,


230
00:11:39,166 --> 00:11:41,435 line:-1
and we disabled the other buttons.


231
00:11:41,502 --> 00:11:43,470 line:-1
And we set up the cameraView.


232
00:11:43,537 --> 00:11:45,739 line:-2
Now, we saw this back in
the recording as well.


233
00:11:45,806 --> 00:11:48,876 line:-2
The cameraView's gonna allow you
to use the camera PIP


234
00:11:48,942 --> 00:11:50,711 line:-1
to add to your application.


235
00:11:51,211 --> 00:11:53,380 line:-1
So, what happens when we do have an error?


236
00:11:53,447 --> 00:11:56,583 line:-2
We're gonna go ahead
and print the error and move forward.


237
00:11:56,650 --> 00:12:00,053 line:-2
Now let's go ahead
and look at the sample block,


238
00:12:00,120 --> 00:12:03,123 line:-2
because this is actually
the most interesting bit


239
00:12:03,190 --> 00:12:07,427 line:-2
because this gets called every time
ReplayKit gives you a sample.


240
00:12:07,494 --> 00:12:08,729 line:-1
So what you wanna do is,


241
00:12:08,795 --> 00:12:11,532 line:-2
you wanna go ahead and take a look
at all the different samples


242
00:12:11,598 --> 00:12:13,433 line:-2
and all the different types
that we give back.


243
00:12:13,500 --> 00:12:16,503 line:-2
Then you wanna go ahead
and decide what you wanna do with it.


244
00:12:16,570 --> 00:12:20,541 line:-2
So, in this completion block,
we give you back a sample.


245
00:12:20,607 --> 00:12:23,777 line:-2
We give you back the sample type
and an error.


246
00:12:24,811 --> 00:12:26,413 line:-1
And in this block right here,


247
00:12:26,480 --> 00:12:29,183 line:-2
the first thing we do is we take a look
to see if we have any errors.


248
00:12:29,249 --> 00:12:30,751 line:-1
If we do, we go ahead and print them.


249
00:12:30,817 --> 00:12:34,922 line:-2
If not, we're gonna run
a switch statement on the type.


250
00:12:34,988 --> 00:12:36,924 line:-1
Now, I'm sure in your application,


251
00:12:36,990 --> 00:12:39,927 line:-2
you're gonna be doing
a lot of really, really awesome things,


252
00:12:39,993 --> 00:12:41,895 line:-2
but in this application,
we'll keep it simple.


253
00:12:41,962 --> 00:12:44,765 line:-2
We're gonna go ahead
and go through each one of these types,


254
00:12:44,831 --> 00:12:46,934 line:-1
and we'll process them separately.


255
00:12:47,000 --> 00:12:48,669 line:-1
So for if it's a video type,


256
00:12:48,735 --> 00:12:51,939 line:-2
we'll go ahead
and say processAppVideoSample.


257
00:12:52,539 --> 00:12:56,543 line:-2
We'll do the same for audio and mike,
and that's it.


258
00:12:56,610 --> 00:12:58,645 line:-2
These samples are given to you
from ReplayKit,


259
00:12:58,712 --> 00:13:00,814 line:-2
and then you can do
whatever you need to do with them.


260
00:13:00,881 --> 00:13:05,219 line:-2
Let's take a look at what we do
in this example, which is pretty simple.


261
00:13:05,285 --> 00:13:07,921 line:-2
For all of our process methods,
all we do is print.


262
00:13:07,988 --> 00:13:10,624 line:-2
Now, again, I'm sure you can do something
far more interesting,


263
00:13:10,691 --> 00:13:12,492 line:-2
and I'm excited to see
what you do with it,


264
00:13:12,559 --> 00:13:15,162 line:-2
but for this example, we just print,
and that's it.


265
00:13:15,229 --> 00:13:18,799 line:-2
We're getting all of these samples,
and we print if we get an audio,


266
00:13:18,866 --> 00:13:22,035 line:-2
we print if we get a video,
and then we print if we get a mike.


267
00:13:22,102 --> 00:13:24,505 line:-2
And just like that,
you're up and running with capture.


268
00:13:25,105 --> 00:13:28,442 line:-2
With in-app screen capture,
your application now has access


269
00:13:28,509 --> 00:13:32,145 line:-2
to all the video and audio samples
through ReplayKit.


270
00:13:32,212 --> 00:13:36,450 line:-2
You can build dynamic in-app experiences
that include screenshots.


271
00:13:37,584 --> 00:13:39,586 line:-1
Now that you have access to the samples,


272
00:13:39,653 --> 00:13:42,289 line:-2
you can add custom gaming overlays
to the videos.


273
00:13:43,257 --> 00:13:45,492 line:-1
With this raw data, you can even implement


274
00:13:45,559 --> 00:13:49,530 line:-2
a custom heads-up display like this
for your application.


275
00:13:49,596 --> 00:13:52,633 line:-1
The possibilities really are endless.


276
00:13:53,166 --> 00:13:57,104 line:-2
Okay, so now we can record
and we can capture.


277
00:13:57,171 --> 00:14:00,541 line:-2
But what happens when you're ready
to take things global?


278
00:14:01,008 --> 00:14:02,976 line:-1
That's what live broadcast is for,


279
00:14:03,043 --> 00:14:07,281 line:-2
the final major feature we've brought over
to macOS for ReplayKit.


280
00:14:07,347 --> 00:14:08,515 line:-1
With live broadcast,


281
00:14:08,582 --> 00:14:13,320 line:-2
you give people the ability to stream
their experience in your application


282
00:14:13,387 --> 00:14:15,355 line:-1
to a third-party streaming service,


283
00:14:15,422 --> 00:14:18,559 line:-2
allowing viewers from all over the world
to watch live.


284
00:14:18,625 --> 00:14:21,328 line:-2
Let's take a quick look
at how live broadcast works,


285
00:14:21,395 --> 00:14:24,665 line:-2
before we jump into another example
of how to set up a live broadcast.


286
00:14:25,432 --> 00:14:26,433 line:-1
With in-app broadcast,


287
00:14:26,500 --> 00:14:30,170 line:-2
you will call into
RPBroadcastActivityController


288
00:14:30,237 --> 00:14:34,174 line:-2
to display a picker for the available
third-party streaming services.


289
00:14:34,575 --> 00:14:37,077 line:0
When people select
a third-party streaming service,


290
00:14:37,144 --> 00:14:41,081 line:0
ReplayKit will set up the broadcast
connection to the streaming service


291
00:14:41,148 --> 00:14:45,919 line:0
and give back a RPBroadcastController
to your application.


292
00:14:45,986 --> 00:14:50,057 line:-2
The broadcastController is what you'll use
to control the actual broadcast.


293
00:14:50,691 --> 00:14:53,594 line:-2
Here is a quick overview
of the three-part process


294
00:14:53,660 --> 00:14:57,264 line:-2
that will allow you to start
live-broadcasting your application.


295
00:14:57,331 --> 00:15:01,034 line:-2
People will initiate a broadcast,
and you'll present the broadcast picker.


296
00:15:01,101 --> 00:15:02,803 line:-1
People will select a broadcast service,


297
00:15:02,870 --> 00:15:05,072 line:-1
and you'll get back a broadcastController.


298
00:15:05,772 --> 00:15:08,709 line:-2
Then you'll start to broadcast
using that controller.


299
00:15:08,775 --> 00:15:11,111 line:-2
Now that we have an idea
of how that works,


300
00:15:11,178 --> 00:15:14,515 line:-2
let's go ahead and take a look
at how we can do that in a project.


301
00:15:15,182 --> 00:15:17,885 line:-2
Okay, so we're back in here
in our storyboard.


302
00:15:17,951 --> 00:15:21,121 line:-2
We've already covered the Start Recording
and Start Capture.


303
00:15:21,188 --> 00:15:24,458 line:-2
Now we're going to go ahead and focus
on the Start Broadcast button.


304
00:15:24,525 --> 00:15:26,994 line:-2
This is where things
get really, really cool.


305
00:15:27,060 --> 00:15:30,330 line:-2
All right, let's jump back
into our Swift code here.


306
00:15:30,397 --> 00:15:34,501 line:-2
And here we go. We're right here
on the IBAction for the button tap.


307
00:15:34,568 --> 00:15:38,105 line:-2
Once again, our broadcast button
is gonna pull double duty for us.


308
00:15:38,172 --> 00:15:41,508 line:-2
If we're active, the broadcast button
is gonna stop broadcast,


309
00:15:41,575 --> 00:15:44,311 line:-2
and if we're not active,
it's going to start a broadcast.


310
00:15:44,378 --> 00:15:47,648 line:-2
Let's look at the more interesting bit,
which is starting a broadcast.


311
00:15:47,714 --> 00:15:49,650 line:-1
And you'll see how easy it is


312
00:15:49,716 --> 00:15:53,086 line:-2
to actually get your app global
and broadcasting to the world.


313
00:15:53,153 --> 00:15:55,322 line:-1
All right. Here's our button.


314
00:15:55,389 --> 00:15:58,592 line:-2
And we're gonna go ahead
and do the presentBroadcastPicker.


315
00:15:58,659 --> 00:16:01,128 line:-2
Like we covered in the slides,
this is what happens


316
00:16:01,195 --> 00:16:06,033 line:-2
when your application presents a picker
for the available third-party broadcast


317
00:16:06,099 --> 00:16:08,335 line:-1
so that people can choose.


318
00:16:08,402 --> 00:16:11,171 line:-2
Let's go ahead
and jump into that code right here.


319
00:16:11,238 --> 00:16:13,640 line:-1
And here it is.


320
00:16:13,707 --> 00:16:15,042 line:-1
Well, first thing we're gonna do


321
00:16:15,108 --> 00:16:18,579 line:-2
is we're gonna decide
on a picker origin point.


322
00:16:18,645 --> 00:16:22,816 line:-2
This is the origin point
that is the bottom left-hand corner


323
00:16:22,883 --> 00:16:24,318 line:-1
of the broadcast picker.


324
00:16:24,384 --> 00:16:29,857 line:-2
Next, we're gonna go ahead and go
on to the RPBroadcastActivityController


325
00:16:29,923 --> 00:16:33,460 line:-1
and we're gonna call showBroadcastPicker


326
00:16:33,527 --> 00:16:35,495 line:-1
at our origin point


327
00:16:35,562 --> 00:16:39,166 line:-1
from the shared window of our application,


328
00:16:39,233 --> 00:16:41,635 line:-2
and we're gonna pass in a nil
for preferredExtension


329
00:16:41,702 --> 00:16:44,171 line:-1
because for now, I just want to show


330
00:16:44,238 --> 00:16:47,274 line:-2
all the available
third-party streaming services.


331
00:16:47,341 --> 00:16:51,178 line:-2
All right. When we call that, this block
right here is gonna get executed.


332
00:16:52,179 --> 00:16:54,348 line:-2
And the first thing we want to do
is check for errors.


333
00:16:54,414 --> 00:16:56,683 line:-2
If we don't have an error,
this is what we're gonna do.


334
00:16:56,750 --> 00:16:59,553 line:-2
We're gonna go ahead
and set the activityController


335
00:16:59,620 --> 00:17:02,923 line:-2
that we give back from this call,
and we're gonna keep a reference to it.


336
00:17:02,990 --> 00:17:05,291 line:-1
You'll see why this is important later.


337
00:17:05,358 --> 00:17:08,161 line:-2
And then you're gonna get
an activity controller delegate.


338
00:17:08,228 --> 00:17:11,031 line:-2
Now, the delegate part
is a really, really important part.


339
00:17:11,098 --> 00:17:13,767 line:-2
You're going to need to set yourself
as the delegate


340
00:17:13,834 --> 00:17:15,868 line:-1
or your application as the delegate.


341
00:17:15,935 --> 00:17:17,971 line:-1
I will explain that in just a little bit.


342
00:17:18,739 --> 00:17:20,674 line:-2
If we have an error,
go ahead and print it.


343
00:17:20,741 --> 00:17:23,911 line:-2
So now you're gonna go ahead
and present this picker.


344
00:17:23,977 --> 00:17:27,614 line:-2
People are gonna go ahead and choose
a broadcast that they want to do,


345
00:17:27,681 --> 00:17:30,784 line:-2
and then you're gonna want to be notified
when they're done.


346
00:17:30,851 --> 00:17:34,488 line:-2
This is where the delegate comes in
and why it's very, very important.


347
00:17:34,555 --> 00:17:37,057 line:-2
Let's go ahead and take a look
at the delegate call.


348
00:17:38,325 --> 00:17:41,562 line:-2
Here is the broadcastActivityController
delegate...


349
00:17:42,796 --> 00:17:44,932 line:-1
didFinishWith broadcastController.


350
00:17:44,998 --> 00:17:48,035 line:-2
So we definitely want to go ahead
and be a delegate here.


351
00:17:48,101 --> 00:17:53,207 line:-2
And the reason why is when the user
is done picking a third-party broadcast,


352
00:17:53,273 --> 00:17:57,211 line:-2
ReplayKit will connect your application
to the broadcast extension,


353
00:17:57,277 --> 00:17:59,713 line:-2
and we're gonna give you back
a broadcastController.


354
00:17:59,780 --> 00:18:01,782 line:-1
You need the broadcastController here...


355
00:18:02,783 --> 00:18:05,018 line:-2
because that broadcastController
is what you're gonna use


356
00:18:05,085 --> 00:18:06,954 line:-1
to actually control the broadcast.


357
00:18:07,020 --> 00:18:11,525 line:-2
So, in this call, we're gonna go ahead
and check to see if we have an error.


358
00:18:11,592 --> 00:18:12,960 line:-1
If we don't have an error,


359
00:18:13,026 --> 00:18:15,095 line:-2
we're gonna go ahead
and save the broadcastController


360
00:18:15,162 --> 00:18:18,265 line:-2
because the broadcastController, again,
controls your broadcast.


361
00:18:18,332 --> 00:18:21,969 line:-1
You can pause, you can stop, start.


362
00:18:22,035 --> 00:18:25,539 line:-2
All of those things are tied in
with the broadcastController.


363
00:18:26,073 --> 00:18:28,909 line:-2
Then we immediately use
the broadcastController


364
00:18:28,976 --> 00:18:30,844 line:-1
to call startBroadcast.


365
00:18:31,812 --> 00:18:34,047 line:-1
Then another block is executed.


366
00:18:34,548 --> 00:18:36,283 line:-1
This is just like your startRecording.


367
00:18:36,350 --> 00:18:38,452 line:-2
You call this,
and we give you back an error.


368
00:18:38,519 --> 00:18:40,988 line:-2
If there's an error,
that means something went wrong,


369
00:18:41,054 --> 00:18:43,290 line:-2
but if there isn't,
you are now broadcasting


370
00:18:43,357 --> 00:18:47,160 line:-2
to the third-party streaming service
people have selected.


371
00:18:47,227 --> 00:18:51,031 line:-2
What we do is update our broadcast state,
like we did with the other ones,


372
00:18:51,098 --> 00:18:52,900 line:-1
which is going to update our button,


373
00:18:52,966 --> 00:18:54,568 line:-1
title, our internal state,


374
00:18:54,635 --> 00:18:58,605 line:-2
and disable the other two
ReplayKit functional buttons.


375
00:18:58,672 --> 00:19:01,542 line:-1
And that's it. You're now broadcasting.


376
00:19:01,608 --> 00:19:03,710 line:-1
You are now sending audio and video


377
00:19:03,777 --> 00:19:08,649 line:-2
to the user's selected
third-party broadcast service.


378
00:19:08,715 --> 00:19:11,518 line:-2
Now, what happens
when we want to call stopBroadcast?


379
00:19:11,585 --> 00:19:15,489 line:-2
This is interesting because
when we call stopBroadcast,


380
00:19:15,556 --> 00:19:19,126 line:-2
right here, this is why we want
to save the broadcastController,


381
00:19:19,193 --> 00:19:22,863 line:-2
because here we simply call
our reference broadcastController,


382
00:19:22,930 --> 00:19:25,265 line:-1
and we call finishBroadcast,


383
00:19:25,332 --> 00:19:28,135 line:-2
at which point,
this entire block will be executed.


384
00:19:28,735 --> 00:19:31,572 line:-2
Just like with stopRecording
and stopCapture,


385
00:19:31,638 --> 00:19:33,507 line:-2
it will give you an error
if something has happened.


386
00:19:33,574 --> 00:19:35,142 line:-2
First thing you want to do
is check the error.


387
00:19:35,209 --> 00:19:37,978 line:-2
If you don't have an error,
set your broadcast state to false


388
00:19:38,045 --> 00:19:40,247 line:-1
because we're no longer broadcasting,


389
00:19:40,314 --> 00:19:43,217 line:-2
tear down your camera
and anything else that you need to do.


390
00:19:43,283 --> 00:19:46,420 line:-2
And that's it.
You've just started and stopped


391
00:19:46,486 --> 00:19:48,155 line:-1
a live broadcast with your application,


392
00:19:48,222 --> 00:19:50,557 line:-2
and you're ready
to take your application global.


393
00:19:51,058 --> 00:19:54,161 line:-2
I want to take a minute
to go into a little bit more depth


394
00:19:54,228 --> 00:19:58,165 line:-2
with the differences for in-app
live broadcast that were made for macOS.


395
00:19:58,232 --> 00:20:02,002 line:-2
If you're coming from iOS,
you'll notice that we no longer interact


396
00:20:02,069 --> 00:20:05,506 line:-2
with the RPBroadcastActivity-
ViewController class.


397
00:20:05,572 --> 00:20:07,174 line:-1
Instead, for macOS,


398
00:20:07,241 --> 00:20:11,645 line:-2
that class has been replaced
with RPBroadcastActivityController.


399
00:20:11,712 --> 00:20:15,282 line:-2
Due to macOS supporting
multiple screens and windows,


400
00:20:15,349 --> 00:20:18,785 line:-2
instead of calling
loadBroadcastActivityViewController


401
00:20:18,852 --> 00:20:20,287 line:-1
like we do in iOS,


402
00:20:20,354 --> 00:20:25,592 line:-2
for macOS we call showBroadcastPicker
with a CGPoint and a window reference.


403
00:20:25,659 --> 00:20:28,862 line:-2
We also take in
a preferredExtensionIdentifier


404
00:20:28,929 --> 00:20:31,231 line:-2
if your application
wants to stream directly


405
00:20:31,298 --> 00:20:33,433 line:-1
to a specific broadcast service.


406
00:20:33,500 --> 00:20:34,968 line:-1
The CGPoint passed in


407
00:20:35,035 --> 00:20:38,272 line:-2
is a reference to the origin point
of the passed-in window


408
00:20:38,338 --> 00:20:42,409 line:-2
and represents the bottom left-hand corner
for your broadcast picker.


409
00:20:43,043 --> 00:20:47,047 line:-2
You're now global with your application
using ReplayKit live broadcast.


410
00:20:47,748 --> 00:20:50,751 line:-2
When you start to implement ReplayKit
in your macOS applications,


411
00:20:50,817 --> 00:20:54,288 line:-2
you're gonna notice something new
that's been added to your menu bar.


412
00:20:54,354 --> 00:20:55,822 line:-1
With ReplayKit on macOS,


413
00:20:55,889 --> 00:20:58,692 line:-1
in keeping with the goal of user privacy,


414
00:20:58,759 --> 00:21:02,029 line:-2
you'll see a new menu-bar item
shown on the menu bar


415
00:21:02,095 --> 00:21:06,133 line:-2
every time you start an active recording,
capture or broadcast session.


416
00:21:06,200 --> 00:21:10,571 line:-2
The menu-bar icon indicates
that there is an active ReplayKit session.


417
00:21:10,637 --> 00:21:15,209 line:-2
It also serves as a way for people
to stop the active ReplayKit session.


418
00:21:15,275 --> 00:21:18,712 line:-2
You'll need to make sure that you adhere
to RPScreenRecordingDelegate


419
00:21:18,779 --> 00:21:22,115 line:-2
method call didStopRecording-
WithPreviewViewController,


420
00:21:22,182 --> 00:21:25,085 line:-2
as this will be called
when people click on the menu-bar icon


421
00:21:25,152 --> 00:21:26,653 line:-1
to stop a session.


422
00:21:26,720 --> 00:21:28,922 line:-2
For in-app capture
and live-broadcast sessions,


423
00:21:28,989 --> 00:21:32,359 line:-2
the RPPreviewViewController passed in
will be nil.


424
00:21:32,426 --> 00:21:35,162 line:-2
With that, you're now ready
to add ReplayKit


425
00:21:35,229 --> 00:21:38,599 line:-2
to record, capture
and broadcast your applications


426
00:21:38,665 --> 00:21:40,767 line:-1
and share them with the rest of the world.


427
00:21:40,834 --> 00:21:43,737 line:-2
But we have one last thing
we want to talk about, and that is...


428
00:21:43,804 --> 00:21:45,105 line:-1
game controllers.


429
00:21:45,172 --> 00:21:48,509 line:-2
I'm happy to announce
that there is now ReplayKit support


430
00:21:48,575 --> 00:21:53,547 line:-2
for the Game Controller framework
in iOS, tvOS and macOS.


431
00:21:53,614 --> 00:21:57,751 line:-2
Game Controller framework will now have
built-in ReplayKit functionality.


432
00:21:57,818 --> 00:22:00,554 line:-2
Double-tapping the Share button
on the PS4 controller


433
00:22:00,621 --> 00:22:03,223 line:-2
or the Select button
on the Xbox controller


434
00:22:03,290 --> 00:22:05,058 line:-1
will start an in-app recording.


435
00:22:05,125 --> 00:22:08,662 line:-2
Double-tapping again will automatically
stop the in-app recording


436
00:22:08,729 --> 00:22:12,866 line:-2
and save it to your photos for iOS
and your desktop for macOS.


437
00:22:13,934 --> 00:22:16,670 line:-1
For applications already using ReplayKit,


438
00:22:16,737 --> 00:22:19,606 line:-2
game controllers can start
and stop recordings


439
00:22:19,673 --> 00:22:21,842 line:-1
outside of your application's control.


440
00:22:21,909 --> 00:22:26,180 line:-2
So, it's a good idea to make sure
you're using key-value observing


441
00:22:26,246 --> 00:22:30,551 line:-2
for both availability and recording
properties on RPScreenRecorder,


442
00:22:30,617 --> 00:22:33,020 line:-2
so that you can update your state
as needed.


443
00:22:33,086 --> 00:22:35,455 line:-1
Also be sure to follow the protocol method


444
00:22:35,522 --> 00:22:38,158 line:-2
didStopRecordingWith-
PreviewViewController


445
00:22:38,225 --> 00:22:40,160 line:-1
on the RPScreenRecorderDelegate


446
00:22:40,227 --> 00:22:42,963 line:-2
so that you can update
your application state as needed.


447
00:22:43,497 --> 00:22:46,700 line:-2
I'm super excited to be announcing
ReplayKit support for game controllers.


448
00:22:46,767 --> 00:22:49,036 line:-1
I hope to see it in your games very soon.


449
00:22:49,603 --> 00:22:51,872 line:-1
Wow. We covered a lot today.


450
00:22:51,939 --> 00:22:54,741 line:-2
Let's go ahead and take a quick recap
of what we talked about.


451
00:22:55,342 --> 00:22:56,910 line:-1
I covered in-app screen recording,


452
00:22:56,977 --> 00:23:00,647 line:-2
where ReplayKit will record
your application's audio and video


453
00:23:00,714 --> 00:23:04,785 line:-2
into a movie that people can edit,
share and save.


454
00:23:04,852 --> 00:23:06,553 line:-1
I covered in-app screen capture,


455
00:23:06,620 --> 00:23:09,990 line:-2
where ReplayKit gives your application's
audio and video samples


456
00:23:10,057 --> 00:23:13,026 line:-2
right back to you
in your application's process.


457
00:23:13,093 --> 00:23:14,995 line:-1
I covered in-app screen broadcast,


458
00:23:15,062 --> 00:23:18,131 line:-2
where ReplayKit sends
your application audio and video


459
00:23:18,198 --> 00:23:20,734 line:-1
to a third-party livestreaming service.


460
00:23:20,801 --> 00:23:24,171 line:-2
And finally, I covered
the new built-in functionality


461
00:23:24,238 --> 00:23:26,507 line:-1
found in Game Controllers framework.


462
00:23:26,573 --> 00:23:28,175 line:-1
The sample code project,


463
00:23:28,242 --> 00:23:31,411 line:-2
as well as the documentation
regarding ReplayKit framework,


464
00:23:31,478 --> 00:23:35,916 line:-2
or to revisit this session,
please visit us at developer.apple.com.


465
00:23:35,983 --> 00:23:39,620 line:-2
We look forward to seeing you add
ReplayKit to your iOS, tvOS


466
00:23:39,686 --> 00:23:41,989 line:-1
and now macOS applications.


467
00:23:42,055 --> 00:23:45,993 line:-2
Thank you so much for watching our session
on ReplayKit for macOS,


468
00:23:46,059 --> 00:23:48,795 line:-1
and I hope you have a wonderful WWDC.

