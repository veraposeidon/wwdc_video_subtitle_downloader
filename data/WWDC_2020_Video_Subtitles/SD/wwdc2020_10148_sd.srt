1
00:00:03,804 --> 00:00:07,374 line:-1
Hello and welcome to WWDC.


2
00:00:08,709 --> 00:00:10,410 line:0
Hi, I'm Will Thimbleby.


3
00:00:10,477 --> 00:00:12,913 line:0
We're going to take a look
inside PencilKit drawings,


4
00:00:12,980 --> 00:00:15,883 line:0
at what they're made out of
and what you can do with them.


5
00:00:16,583 --> 00:00:18,852 line:-1
PencilKit is super easy to adopt,


6
00:00:18,919 --> 00:00:21,455 line:-2
provides beautiful,
realistic-looking inks,


7
00:00:21,522 --> 00:00:23,824 line:-1
the best low-latency drawing experience


8
00:00:23,891 --> 00:00:27,227 line:-2
and some great new UI improvements
in iOS 14.


9
00:00:27,794 --> 00:00:30,063 line:0
For more information
about these improvements,


10
00:00:30,130 --> 00:00:32,466 line:0
see the "What's New in PencilKit" talk.


11
00:00:33,567 --> 00:00:37,871 line:-2
In iOS 14, we're also letting you look
inside PencilKit's data model:


12
00:00:37,938 --> 00:00:41,675 line:-2
the drawings, the strokes,
inks, paths and points.


13
00:00:41,742 --> 00:00:46,547 line:-2
This will enable you to build some great
new features in your apps with PencilKit.


14
00:00:47,648 --> 00:00:49,383 line:-1
With access to the data model,


15
00:00:49,449 --> 00:00:53,220 line:-2
you'll be able to inspect the contents
of what your users drew,


16
00:00:53,287 --> 00:00:55,055 line:-1
react to what was drawn,


17
00:00:55,122 --> 00:00:56,957 line:-1
manipulate existing drawings


18
00:00:57,024 --> 00:00:59,526 line:-2
or dynamically create new drawings
from scratch.


19
00:01:00,127 --> 00:01:03,130 line:-2
To give an example of what's
newly possible with PencilKit,


20
00:01:03,197 --> 00:01:05,199 line:-1
let me jump straight into a demo.


21
00:01:11,104 --> 00:01:13,407 line:-2
This demo is also available
as sample code.


22
00:01:13,473 --> 00:01:16,310 line:-2
I've been working on an app
to help my seven-year-old son


23
00:01:16,376 --> 00:01:18,412 line:-1
practice his handwriting.


24
00:01:18,478 --> 00:01:22,583 line:-2
At the top of this app is a text field
with the words I want him to practice.


25
00:01:23,684 --> 00:01:28,255 line:-2
Below is a synthesized PencilKit drawing
of the same text.


26
00:01:28,922 --> 00:01:31,458 line:-2
I could change this text
with the keyboard,


27
00:01:31,525 --> 00:01:33,327 line:-1
but this is a Pencil demo.


28
00:01:33,393 --> 00:01:35,495 line:-1
I can use the great new Scribble feature,


29
00:01:36,029 --> 00:01:38,232 line:-1
which, by the way, also uses PencilKit,


30
00:01:38,298 --> 00:01:41,568 line:-2
to change this text
to what I want him to practice,


31
00:01:41,635 --> 00:01:44,304 line:-2
perhaps to something more appropriate
for a seven-year-old.


32
00:01:53,113 --> 00:01:54,781 line:-1
As I enter text,


33
00:01:55,649 --> 00:01:59,753 line:-2
the template PencilKit drawing below
is constructed from individual letters.


34
00:02:01,288 --> 00:02:05,392 line:-2
In the top right, I can also choose
the size I want him to practice


35
00:02:05,459 --> 00:02:06,960 line:-1
and the difficulty.


36
00:02:09,263 --> 00:02:12,733 line:-2
Now that I have a template,
we're set up to practice handwriting.


37
00:02:12,799 --> 00:02:16,603 line:-2
The next stroke to copy
is animated by this red dot


38
00:02:16,670 --> 00:02:18,939 line:-1
that shows how to write the next letter.


39
00:02:19,006 --> 00:02:21,141 line:-1
All I have to do is copy it.


40
00:02:28,348 --> 00:02:30,817 line:-2
If I write something
that's close to the template,


41
00:02:30,884 --> 00:02:33,587 line:-2
my handwriting changes to green
and we move on.


42
00:02:34,154 --> 00:02:36,256 line:-1
If I write something badly,


43
00:02:36,323 --> 00:02:38,759 line:-2
the stroke disappears
and the animation repeats.


44
00:02:41,762 --> 00:02:44,364 line:-1
My score is shown in the top right.


45
00:02:45,599 --> 00:02:47,100 line:-1
Let's see how I do.


46
00:02:55,576 --> 00:02:57,644 line:-1
We did well, so we get some fireworks,


47
00:02:57,711 --> 00:02:59,947 line:-2
a key motivational tool
for seven-year-olds.


48
00:03:01,148 --> 00:03:03,917 line:-2
But I've had a few years
to practice my handwriting,


49
00:03:03,984 --> 00:03:06,286 line:-2
so why don't we try
something a bit trickier?


50
00:03:06,887 --> 00:03:10,524 line:-2
I drew a PencilKit ligature,
and I've added that to the app.


51
00:03:18,799 --> 00:03:20,868 line:-1
Now we can practice our calligraphy.


52
00:03:25,239 --> 00:03:28,342 line:-2
The app is synthesizing
PencilKit drawings from text,


53
00:03:28,408 --> 00:03:32,045 line:-2
animating them and performing recognition
on what I wrote.


54
00:03:32,112 --> 00:03:34,681 line:-2
This is just a small example
of what you can now do


55
00:03:34,748 --> 00:03:37,050 line:-1
with access to the PencilKit data model.


56
00:03:37,551 --> 00:03:40,420 line:-1
So let's look inside a PencilKit drawing.


57
00:03:40,487 --> 00:03:42,823 line:-1
Here we have a simple drawing of a flower.


58
00:03:43,590 --> 00:03:44,925 line:-1
If we split it up,


59
00:03:44,992 --> 00:03:48,896 line:-2
we can see that the drawing is composed
out of many PencilKit strokes.


60
00:03:48,962 --> 00:03:52,799 line:-2
Each stroke represents
an individual line that the user drew.


61
00:03:53,734 --> 00:03:56,203 line:-2
These strokes are in the order
that the user drew them,


62
00:03:56,270 --> 00:03:59,640 line:-2
so you can see that the outline
of the flower was drawn first,


63
00:03:59,706 --> 00:04:01,074 line:-1
then the stalk, leaf,


64
00:04:01,141 --> 00:04:03,877 line:-2
and finally the whole thing
was colored in with a marker.


65
00:04:06,413 --> 00:04:08,549 line:-1
Here we have the data asset that I drew


66
00:04:08,615 --> 00:04:12,319 line:-2
that contains the lowercase letters
for the demo I just gave.


67
00:04:12,386 --> 00:04:14,188 line:-1
To be able to generate text,


68
00:04:14,254 --> 00:04:17,658 line:-2
we first want to split this drawing up
into individual letters.


69
00:04:19,660 --> 00:04:23,096 line:-2
Later, these letters are combined
to generate the template text


70
00:04:23,163 --> 00:04:24,965 line:-1
that users use to practice.


71
00:04:26,200 --> 00:04:27,868 line:-1
To split this drawing up,


72
00:04:27,935 --> 00:04:31,104 line:-2
we take the lowercase alphabet drawing
and get its strokes.


73
00:04:31,939 --> 00:04:35,475 line:-2
We slice this array to get the strokes
for each individual letter.


74
00:04:37,411 --> 00:04:41,281 line:-2
Then we can create new drawings
for each letter out of that slice.


75
00:04:41,348 --> 00:04:43,851 line:-2
This is repeated
for each letter in the alphabet.


76
00:04:45,152 --> 00:04:48,422 line:-2
If you want to inspect
or modify a drawing,


77
00:04:48,488 --> 00:04:51,658 line:-2
you do this by accessing
the drawing's array of strokes.


78
00:04:52,526 --> 00:04:55,863 line:-2
You can also use strokes
to create new drawings from scratch.


79
00:04:57,264 --> 00:04:59,399 line:-1
So, what about strokes?


80
00:04:59,466 --> 00:05:01,635 line:-1
What makes up a PencilKit stroke?


81
00:05:02,436 --> 00:05:05,706 line:-2
For a stroke,
the primary feature is the path.


82
00:05:06,306 --> 00:05:08,575 line:-1
This provides the shape of the stroke.


83
00:05:09,810 --> 00:05:13,380 line:-2
You also have an ink, which describes
the appearance of the stroke:


84
00:05:13,447 --> 00:05:15,115 line:-1
its color and type.


85
00:05:16,316 --> 00:05:20,153 line:0
A transform gives the orientation
and position of the stroke.


86
00:05:21,054 --> 00:05:23,357 line:0
Strokes can also have masks,


87
00:05:23,423 --> 00:05:25,692 line:0
and we'll discuss those
later in this talk.


88
00:05:26,994 --> 00:05:30,497 line:-2
Another useful property of strokes
is the renderBounds,


89
00:05:30,564 --> 00:05:34,034 line:-2
and this is a bounding box that
encompasses the entirety of the stroke


90
00:05:34,101 --> 00:05:36,069 line:-1
when it is rendered.


91
00:05:36,136 --> 00:05:40,307 line:-2
The renderBounds accounts for the effect
of all the stroke properties


92
00:05:40,374 --> 00:05:43,877 line:-2
including the path, ink,
transform and mask.


93
00:05:45,812 --> 00:05:48,815 line:-2
Inks, which describe
what a stroke looks like,


94
00:05:48,882 --> 00:05:51,251 line:-1
contain the type of ink and a color.


95
00:05:52,486 --> 00:05:54,221 line:-1
Inks do not have a width.


96
00:05:54,288 --> 00:05:57,291 line:-2
The width of a stroke
is variable along the stroke path.


97
00:05:58,425 --> 00:06:01,962 line:-2
The stroke path describes
the shape of the stroke


98
00:06:02,029 --> 00:06:05,098 line:-2
and the appearance of that shape
as it changes along the path.


99
00:06:05,666 --> 00:06:10,070 line:-2
For example, the stroke path gives you
the width of the stroke at any point.


100
00:06:11,171 --> 00:06:14,708 line:-2
A PencilKit stroke path
is a uniform cubic B-spline


101
00:06:14,775 --> 00:06:16,810 line:-1
of PencilKit stroke points.


102
00:06:17,344 --> 00:06:20,614 line:-2
Now, that's quite a mouthful.
What does that mean?


103
00:06:22,382 --> 00:06:24,985 line:0
It means that the contents of a path


104
00:06:25,052 --> 00:06:27,855 line:0
are, in fact,
the control points for the B-spline.


105
00:06:28,822 --> 00:06:31,458 line:0
So if we iterate
over the points in a path...


106
00:06:33,393 --> 00:06:35,495 line:0
and draw each one in turn...


107
00:06:37,664 --> 00:06:40,801 line:0
the resulting points
are not actually on the stroke.


108
00:06:40,868 --> 00:06:43,770 line:0
These points
are the B-spline control points


109
00:06:43,837 --> 00:06:46,039 line:0
and probably not what you want to draw.


110
00:06:46,907 --> 00:06:50,911 line:-2
To get points on the actual path,
we need to interpolate the spline.


111
00:06:53,647 --> 00:06:55,816 line:0
To interpolate the spline,
we access the points


112
00:06:55,883 --> 00:06:58,519 line:0
using interpolatedPoints strideBy.


113
00:06:59,620 --> 00:07:03,957 line:0
This provides a sequence of points
that we can iterate over like before.


114
00:07:04,024 --> 00:07:08,028 line:0
Drawing these gives us
a series of points on the path.


115
00:07:08,962 --> 00:07:10,964 line:0
There are a couple of things
to notice here.


116
00:07:11,031 --> 00:07:13,967 line:0
They're on the path,
there are more of them


117
00:07:14,034 --> 00:07:16,370 line:0
and they have uniform spacing,


118
00:07:16,436 --> 00:07:19,072 line:0
in this case, a distance of 50 points,


119
00:07:19,139 --> 00:07:22,209 line:0
which is the stride argument
passed in to the method.


120
00:07:23,677 --> 00:07:27,581 line:0
You might also notice that the spacing
of the last point is uneven.


121
00:07:28,248 --> 00:07:32,019 line:0
This is because the last point on a stroke
is always generated


122
00:07:32,085 --> 00:07:34,221 line:0
regardless of the stride.


123
00:07:34,288 --> 00:07:37,157 line:0
You can stride by distance,
as in this example,


124
00:07:37,224 --> 00:07:39,459 line:0
time or parametric value.


125
00:07:39,526 --> 00:07:42,029 line:-1
Distance and time are self explanatory.


126
00:07:42,095 --> 00:07:44,598 line:-2
Distance is points
in drawing coordinate space,


127
00:07:44,665 --> 00:07:46,900 line:-1
and time is duration in seconds,


128
00:07:46,967 --> 00:07:49,369 line:-1
which depends on how fast the user drew.


129
00:07:50,304 --> 00:07:54,608 line:-2
Parametric value relates to the parametric
interpolation of the B-spline.


130
00:07:55,742 --> 00:07:58,245 line:0
To explain what the parametric value is,


131
00:07:58,312 --> 00:08:00,981 line:0
let's bring back
drawing the control points.


132
00:08:01,048 --> 00:08:03,650 line:0
This is the same code
that we used earlier.


133
00:08:04,718 --> 00:08:06,787 line:0
If instead of drawing the control points,


134
00:08:06,854 --> 00:08:09,189 line:0
we iterate over the indices of the path,


135
00:08:09,256 --> 00:08:11,925 line:0
which go from zero
to the control point count,


136
00:08:12,793 --> 00:08:16,797 line:0
and at each iteration we get the point
using interpolatedPoint(at,


137
00:08:17,164 --> 00:08:20,634 line:0
for the parametric value
0, 1, 2, 3 and so on


138
00:08:20,701 --> 00:08:22,202 line:0
and draw that...


139
00:08:24,438 --> 00:08:27,641 line:0
we get the equivalent points
to the control points.


140
00:08:27,708 --> 00:08:30,377 line:0
But these points are actually on the path.


141
00:08:31,578 --> 00:08:33,080 line:0
Why is this useful?


142
00:08:33,145 --> 00:08:36,183 line:0
Let's number the points
so you can see what's going on.


143
00:08:36,250 --> 00:08:40,087 line:0
The parametric value is useful
because it is a floating point value.


144
00:08:40,988 --> 00:08:45,359 line:0
That means you can ask for
the interpolated point for any value,


145
00:08:45,425 --> 00:08:48,061 line:0
including non-integer values
between control points


146
00:08:48,128 --> 00:08:51,398 line:0
like 2.4 or 4.8...


147
00:08:52,466 --> 00:08:53,867 line:0
and so on.


148
00:08:54,635 --> 00:08:58,138 line:0
This gives you the flexibility
to interpolate the stroke path


149
00:08:58,205 --> 00:08:59,673 line:0
any way you want.


150
00:09:00,274 --> 00:09:02,276 line:-1
All the interpolation we've seen so far


151
00:09:02,342 --> 00:09:05,412 line:-2
has been interpolating the path
with a uniform step.


152
00:09:06,213 --> 00:09:09,750 line:-2
Using the parametric value,
PencilKit also provides the ability


153
00:09:09,816 --> 00:09:12,519 line:-2
to step along a path
by an arbitrary distance,


154
00:09:13,020 --> 00:09:15,422 line:-1
using parametricValue, offsetBy.


155
00:09:17,024 --> 00:09:20,427 line:-2
This function allows you to offset
a parametric value on a path


156
00:09:20,494 --> 00:09:21,995 line:-1
forwards or backwards


157
00:09:22,062 --> 00:09:23,997 line:-1
any step in time or distance.


158
00:09:26,433 --> 00:09:29,169 line:-2
One of the places
where non-uniform stepping is useful


159
00:09:29,236 --> 00:09:31,038 line:-1
is when animating.


160
00:09:31,104 --> 00:09:33,707 line:-1
The demo I gave earlier uses this ability


161
00:09:33,774 --> 00:09:36,443 line:-2
to animate the red marker dot
along the strokes.


162
00:09:37,678 --> 00:09:40,547 line:-2
Each frame,
the current marker position on a stroke,


163
00:09:40,614 --> 00:09:44,318 line:-2
is offset by the exact time duration
since the last frame.


164
00:09:46,520 --> 00:09:48,689 line:-1
Non-uniform stepping is necessary


165
00:09:48,755 --> 00:09:51,825 line:-2
because we're not always guaranteed
a uniform amount of time


166
00:09:51,892 --> 00:09:53,527 line:-1
between animation frames.


167
00:09:54,795 --> 00:09:58,165 line:-2
To animate in the demo,
first we get the delta time,


168
00:09:58,232 --> 00:10:01,468 line:-2
the time that has elapsed between
the current frame and the previous frame.


169
00:10:03,537 --> 00:10:06,907 line:-2
We use that to offset
the current animation parametric value


170
00:10:06,974 --> 00:10:09,776 line:-1
along the path by the same amount of time.


171
00:10:09,843 --> 00:10:11,845 line:-1
This animates along the stroke path


172
00:10:11,912 --> 00:10:14,681 line:-2
with the same velocity
as when the user drew it.


173
00:10:16,283 --> 00:10:18,886 line:-1
Finally, we update the marker position,


174
00:10:18,952 --> 00:10:22,723 line:-2
getting the new location on the path
from the new parametric value.


175
00:10:24,591 --> 00:10:26,426 line:-1
So that's the path.


176
00:10:26,493 --> 00:10:29,563 line:-2
Both the control points
and the interpolated points along the path


177
00:10:29,630 --> 00:10:31,532 line:-1
are PencilKit stroke points.


178
00:10:32,132 --> 00:10:35,169 line:-2
These are the atomic building blocks
of paths and strokes.


179
00:10:35,769 --> 00:10:39,206 line:-2
They capture both the appearance
and touch information of a stroke


180
00:10:39,273 --> 00:10:41,241 line:-1
at a particular location.


181
00:10:41,308 --> 00:10:45,145 line:-2
These points are stored
in a lossily compressed format,


182
00:10:45,212 --> 00:10:48,782 line:-2
so any points you create
will not capture the values you use


183
00:10:48,849 --> 00:10:50,817 line:-1
with perfect precision.


184
00:10:50,884 --> 00:10:54,188 line:-2
Let's take a closer look
at one of these points in a stroke.


185
00:10:56,456 --> 00:10:59,593 line:-2
A PencilKit stroke point
has several appearance attributes.


186
00:11:01,094 --> 00:11:03,897 line:-2
The first of those
is the location of the point.


187
00:11:05,199 --> 00:11:09,303 line:-2
A point also has a size,
which for marker strokes won't be square.


188
00:11:10,504 --> 00:11:12,840 line:-1
A rotation angle, or azimuth.


189
00:11:14,107 --> 00:11:16,176 line:-1
And finally, the opacity.


190
00:11:16,577 --> 00:11:21,348 line:-2
These attributes combine to describe how
a stroke appears at a certain location.


191
00:11:23,350 --> 00:11:25,419 line:-2
Stroke points
also have a couple of properties


192
00:11:25,485 --> 00:11:27,554 line:-1
that are not appearance attributes.


193
00:11:27,621 --> 00:11:30,858 line:-2
Force and altitude match
the same values from UITouch


194
00:11:30,924 --> 00:11:32,492 line:-1
when the stroke was drawn.


195
00:11:32,559 --> 00:11:37,464 line:-2
Time offset is the offset in seconds
from the creation date of the stroke path


196
00:11:37,531 --> 00:11:39,533 line:-1
that the point belongs to.


197
00:11:39,600 --> 00:11:43,470 line:-2
This provides timing information
for how the user drew the stroke.


198
00:11:44,972 --> 00:11:48,809 line:-2
We'll jump back now to talk about
the last property of PencilKit strokes


199
00:11:48,876 --> 00:11:50,410 line:-1
that we haven't covered...


200
00:11:51,345 --> 00:11:52,946 line:0
and that is masking.


201
00:11:54,314 --> 00:11:58,519 line:-2
Masked strokes are typically created
when the pixel eraser is used


202
00:11:58,585 --> 00:12:00,988 line:-1
to erase only a portion of a stroke.


203
00:12:01,889 --> 00:12:04,625 line:-1
Most strokes are not usually erased,


204
00:12:04,691 --> 00:12:05,859 line:-1
but when they are,


205
00:12:05,926 --> 00:12:08,996 line:-2
the mask is used to clip
these strokes in rendering


206
00:12:09,062 --> 00:12:13,100 line:-2
and adjust how the user
can interact with them on the canvas.


207
00:12:14,168 --> 00:12:15,869 line:-1
Masks can have holes.


208
00:12:17,504 --> 00:12:20,474 line:-2
Or they can cut a stroke
into multiple pieces.


209
00:12:20,541 --> 00:12:22,709 line:-1
In this example, using the eraser,


210
00:12:22,776 --> 00:12:25,345 line:-2
the stroke has been split
into two separate strokes.


211
00:12:26,747 --> 00:12:29,516 line:-1
These become unique, independent strokes


212
00:12:29,583 --> 00:12:32,986 line:-2
and behave as such
to the user and in the API.


213
00:12:33,921 --> 00:12:39,259 line:-2
For example, each of these two new strokes
has its own separate transform and mask.


214
00:12:40,394 --> 00:12:43,797 line:-2
The user can select one of the strokes
and move it around


215
00:12:43,864 --> 00:12:45,866 line:-1
without affecting the other stroke.


216
00:12:47,701 --> 00:12:51,872 line:0
PencilKit strokes are masked,
but stroke paths are not.


217
00:12:52,573 --> 00:12:56,543 line:0
This means that if we take the code
we were using earlier


218
00:12:56,610 --> 00:12:58,345 line:0
to draw a stroke path


219
00:12:58,412 --> 00:13:01,515 line:0
and use that code
to draw a masked stroke...


220
00:13:02,883 --> 00:13:05,786 line:0
we're going to get a much longer path
than we wanted.


221
00:13:07,554 --> 00:13:11,258 line:0
Instead, we want to use
the maskedPathRanges property


222
00:13:11,325 --> 00:13:12,526 line:0
of the stroke.


223
00:13:12,593 --> 00:13:16,797 line:0
This is an array of parametric
value ranges on the stroke path


224
00:13:16,864 --> 00:13:19,166 line:0
when it is clipped to the mask.


225
00:13:20,067 --> 00:13:23,136 line:0
Here we iterate
over the maskedPathRanges...


226
00:13:26,507 --> 00:13:29,409 line:0
and interpolate the points
in each of those ranges.


227
00:13:31,111 --> 00:13:34,348 line:0
This correctly gives an interpretation
of the stroke path


228
00:13:34,414 --> 00:13:38,151 line:0
in a way that makes sense
for a masked stroke.


229
00:13:40,320 --> 00:13:42,856 line:-1
Strokes can have zero masked ranges.


230
00:13:43,857 --> 00:13:48,362 line:-2
For example, if the user erases
all but a fraction of a stroke,


231
00:13:48,428 --> 00:13:51,565 line:-2
and that fraction does not
intersect the path spline,


232
00:13:51,632 --> 00:13:56,370 line:-2
then the resulting masked stroke
will have zero maskedPathRanges.


233
00:13:57,671 --> 00:14:00,807 line:-2
Strokes can also have
multiple masked ranges.


234
00:14:01,642 --> 00:14:05,979 line:-2
In this case, a stroke with holes in it
has four individual ranges.


235
00:14:09,550 --> 00:14:12,486 line:-2
Recognition is a building block
for many great features


236
00:14:12,553 --> 00:14:14,388 line:-1
that you can build with PencilKit.


237
00:14:15,088 --> 00:14:19,259 line:-2
Spline-based recognition can make use
of these maskedPathRanges


238
00:14:19,326 --> 00:14:22,996 line:-2
to provide a sensible interpretation
of masked strokes,


239
00:14:23,630 --> 00:14:26,633 line:-2
and this is what we do
for handwriting recognition in Notes.


240
00:14:28,001 --> 00:14:31,839 line:-2
When interpreting strokes,
you can use maskedPathRanges


241
00:14:31,905 --> 00:14:33,774 line:-1
to get a range of points,


242
00:14:33,841 --> 00:14:35,676 line:-1
interpolate them how you want


243
00:14:35,742 --> 00:14:38,545 line:-2
and use non-appearance attributes
like time and force


244
00:14:38,612 --> 00:14:40,781 line:-1
to supplement the shape of the path.


245
00:14:43,016 --> 00:14:44,718 line:-1
The demo you saw earlier


246
00:14:44,785 --> 00:14:47,888 line:-2
provides a simple example
of spline-based recognition.


247
00:14:48,288 --> 00:14:51,825 line:-2
It uses a matching algorithm
to compare and score the user


248
00:14:51,892 --> 00:14:56,530 line:-2
on the similarity between what they drew
and the template they're trying to copy.


249
00:14:57,397 --> 00:14:59,800 line:-1
If you want to do image-based recognition,


250
00:14:59,867 --> 00:15:03,704 line:-2
use the rendering API on PKDrawing
to generate images.


251
00:15:04,471 --> 00:15:09,109 line:-2
PencilKit provides a super easy way
to add great Pencil support to your app.


252
00:15:09,176 --> 00:15:12,246 line:-2
Now that you can look inside drawings
and access the strokes,


253
00:15:12,312 --> 00:15:14,715 line:-1
inks, paths and points,


254
00:15:15,148 --> 00:15:18,018 line:-2
inspect what the user wrote and drew
to build features


255
00:15:18,085 --> 00:15:20,888 line:-2
like the new Scribble experience
which uses PencilKit


256
00:15:20,954 --> 00:15:25,192 line:-2
to enable handwriting in text fields
across the whole of iPadOS.


257
00:15:26,026 --> 00:15:29,096 line:-2
Modify drawings to create
interactive drawing experiences


258
00:15:29,162 --> 00:15:31,365 line:-1
that respond to the user's actions.


259
00:15:31,865 --> 00:15:33,734 line:-1
And create new drawings procedurally,


260
00:15:33,800 --> 00:15:37,571 line:-2
like the sample code does to generate
handwriting templates for practicing.


261
00:15:38,872 --> 00:15:43,110 line:-2
Adding support for Pencil,
one of our most expressive input devices,


262
00:15:43,177 --> 00:15:45,279 line:-1
is a great addition to almost any app.


263
00:15:45,345 --> 00:15:48,649 line:-2
PencilKit has always been a fantastic way
to add drawing to your app,


264
00:15:48,715 --> 00:15:50,784 line:-1
and now that you can look inside drawings,


265
00:15:50,851 --> 00:15:53,353 line:-2
it's also
an incredibly powerful foundation


266
00:15:53,420 --> 00:15:56,323 line:-2
for new Pencil-focused experiences
that you want to build.

