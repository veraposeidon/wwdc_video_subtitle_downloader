1
00:00:03,937 --> 00:00:06,707 line:-1
Hello and welcome to WWDC.


2
00:00:07,508 --> 00:00:09,843 line:0
Hello and welcome to Apple Park.


3
00:00:10,344 --> 00:00:14,882 line:0
My name is John Tegtmeyer,
and I'm an engineer working on AppKit.


4
00:00:14,948 --> 00:00:18,051 line:0
Later today, I'll be joined
by my colleague Jeff Nadeau,


5
00:00:18,118 --> 00:00:23,123 line:0
and we're both really excited
to walk you through the new look of macOS.


6
00:00:23,624 --> 00:00:27,661 line:0
As you may have seen,
macOS has an all-new design...


7
00:00:28,529 --> 00:00:30,731 line:-1
which includes a dramatic update


8
00:00:30,797 --> 00:00:33,367 line:-2
to the appearance and structure
of Mac apps,


9
00:00:34,201 --> 00:00:36,570 line:-1
including full-height sidebars


10
00:00:36,637 --> 00:00:40,541 line:-2
with colorful icons
and updated symbol iconography.


11
00:00:41,475 --> 00:00:44,811 line:-1
An all-new toolbar with inline title,


12
00:00:44,878 --> 00:00:46,613 line:-1
big bold controls


13
00:00:46,680 --> 00:00:49,416 line:-2
and integration
with the split-view sections below.


14
00:00:50,684 --> 00:00:53,787 line:-2
And an updated appearance
for lists of content,


15
00:00:53,854 --> 00:00:56,323 line:-1
featuring a new inset selection style.


16
00:00:58,525 --> 00:01:01,161 line:-2
Now, this is a big change,
and you might be wondering


17
00:01:01,228 --> 00:01:02,729 line:-1
what it means for your app.


18
00:01:03,630 --> 00:01:08,001 line:-2
The great news is that many of these
design changes happen automatically.


19
00:01:08,702 --> 00:01:10,671 line:-2
With the frameworks
doing the heavy lifting,


20
00:01:10,737 --> 00:01:15,709 line:-2
your native Mac app will look great
on macOS Big Sur out of the box.


21
00:01:16,376 --> 00:01:18,278 line:-1
But with a bit of adoption,


22
00:01:18,345 --> 00:01:21,348 line:-2
you can go the extra mile
and really shine.


23
00:01:21,415 --> 00:01:23,984 line:-2
And that's what we're here
to talk about today.


24
00:01:24,051 --> 00:01:28,288 line:-2
This new design is broken down
into three main sections.


25
00:01:28,856 --> 00:01:31,892 line:-2
First, updates to the structure
of your window,


26
00:01:31,959 --> 00:01:34,061 line:-1
elements like the sidebar and toolbar,


27
00:01:34,127 --> 00:01:36,196 line:-1
which will set your app up for success.


28
00:01:37,164 --> 00:01:40,100 line:-2
Next is some great new features
in the line of controls.


29
00:01:40,868 --> 00:01:44,304 line:-2
And finally, symbol images,
which have come to macOS.


30
00:01:45,339 --> 00:01:48,809 line:-2
Let's start things off with the updates
to sidebars and toolbars.


31
00:01:49,710 --> 00:01:52,312 line:-2
Perhaps one
of the most eye-catching updates


32
00:01:52,379 --> 00:01:56,216 line:-2
is the beautiful new full-height sidebar,
seen here in Mail.


33
00:01:57,017 --> 00:02:00,454 line:-2
Your app may get this for free
just by building on Big Sur,


34
00:02:00,521 --> 00:02:03,790 line:-2
and that's because it takes advantage
of existing APIs.


35
00:02:05,659 --> 00:02:08,362 line:-2
Specifically, make sure
your sidebar is built


36
00:02:08,428 --> 00:02:10,997 line:-1
using an NSSplitViewController,


37
00:02:11,064 --> 00:02:14,868 line:-2
and the SplitViewItem is configured
using the sidebar behavior.


38
00:02:16,336 --> 00:02:17,905 line:-1
The second piece of API


39
00:02:17,971 --> 00:02:20,908 line:-1
is the fullSizeContentView window mask.


40
00:02:21,508 --> 00:02:23,410 line:-1
This will allow content to be laid out


41
00:02:23,477 --> 00:02:26,413 line:-2
under the space
normally reserved for the title bar.


42
00:02:28,549 --> 00:02:32,619 line:-2
If you're not already taking advantage
of the fullsizeContentView style,


43
00:02:32,686 --> 00:02:36,056 line:-2
it's even easier to adopt
in macOS Big Sur.


44
00:02:36,790 --> 00:02:41,628 line:-2
NSView now exposes several different ways
to find the safe area of your View.


45
00:02:43,830 --> 00:02:46,600 line:-2
These new safe areas
are also available to you


46
00:02:46,667 --> 00:02:47,968 line:-1
through Interface Builder.


47
00:02:48,969 --> 00:02:51,405 line:-2
Just check the new box
in the Size Inspector


48
00:02:51,471 --> 00:02:53,207 line:-1
for Safe Area Layout Guide.


49
00:02:54,741 --> 00:02:59,179 line:-2
Then you'll find a Safe Area Layout Guide
in your View, ready to use.


50
00:03:01,215 --> 00:03:03,750 line:-2
If you're creating a new Mac app
in Interface Builder,


51
00:03:03,817 --> 00:03:05,886 line:-1
there's a neat object in the Catalog


52
00:03:05,953 --> 00:03:08,155 line:-1
that creates a preconfigured sidebar.


53
00:03:09,523 --> 00:03:12,693 line:-2
This will set up a split view controller
with a sidebar


54
00:03:12,759 --> 00:03:14,962 line:-1
and automatically adjust your window


55
00:03:15,028 --> 00:03:16,964 line:-1
for the fullsizeContentView.


56
00:03:17,030 --> 00:03:19,233 line:-1
No extra configuration is required.


57
00:03:21,435 --> 00:03:25,272 line:-2
In rare circumstances,
you may not want a full-height sidebar.


58
00:03:25,839 --> 00:03:28,709 line:-2
There's a new property
on NSSplitViewItem


59
00:03:28,775 --> 00:03:30,544 line:-1
which will allow you to opt out.


60
00:03:31,345 --> 00:03:34,448 line:-2
You may consider this
if your sidebar is typically collapsed


61
00:03:34,515 --> 00:03:37,918 line:-2
or if your toolbar is crowded
and you need more space.


62
00:03:39,419 --> 00:03:41,188 line:-1
But please note that this property


63
00:03:41,255 --> 00:03:43,957 line:-2
only affects items
with the sidebar behavior.


64
00:03:45,626 --> 00:03:48,395 line:-2
The sidebar has also gained
a splash of color


65
00:03:48,462 --> 00:03:50,364 line:-1
with new colorful icons.


66
00:03:51,098 --> 00:03:55,369 line:-2
By default, all sidebar icons
are colored with the accent color,


67
00:03:55,435 --> 00:03:58,205 line:-2
but there's a new
NSOutlineViewDelegate method


68
00:03:58,272 --> 00:04:00,374 line:-1
that you can use to customize it.


69
00:04:01,508 --> 00:04:06,013 line:-2
The delegate method returns
an instance of NSTintConfiguration,


70
00:04:06,079 --> 00:04:08,482 line:-2
which offers a few different
types of tint.


71
00:04:09,483 --> 00:04:11,752 line:-1
The first is the default configuration,


72
00:04:11,818 --> 00:04:13,820 line:-1
which uses the accent color.


73
00:04:15,122 --> 00:04:18,225 line:-2
The monochrome option
provides a colorless appearance


74
00:04:18,291 --> 00:04:21,060 line:-1
similar to the sidebar icons in Catalina.


75
00:04:22,162 --> 00:04:24,698 line:-2
PreferredColor allows you
to specify a color


76
00:04:24,765 --> 00:04:27,634 line:-2
that should be used
with the default accent color,


77
00:04:27,701 --> 00:04:31,471 line:-2
but should change to follow
the accent color if it's customized.


78
00:04:32,039 --> 00:04:34,575 line:-1
For example, Mail's teal folders


79
00:04:34,641 --> 00:04:37,644 line:-2
complement the default accent color
of blue nicely,


80
00:04:37,711 --> 00:04:39,379 line:-1
but would clash with a red accent.


81
00:04:40,447 --> 00:04:44,351 line:-2
Finally, fixedColor specifies
a color that never changes.


82
00:04:45,118 --> 00:04:48,121 line:-1
A great example is Mail's VIP folder,


83
00:04:48,188 --> 00:04:50,157 line:-1
which is always a yellow star.


84
00:04:51,391 --> 00:04:54,995 line:-2
You can use this feature to distinguish
the sections of your sidebar


85
00:04:55,062 --> 00:04:57,331 line:-1
in whatever way makes sense for your app.


86
00:04:58,065 --> 00:05:02,402 line:-2
You can also use it to strongly associate
a color with a particular item,


87
00:05:02,469 --> 00:05:04,571 line:-1
or use the monochrome option


88
00:05:04,638 --> 00:05:08,141 line:-2
to de-emphasize
the secondary groups in your sidebar


89
00:05:08,208 --> 00:05:11,078 line:-2
in order to draw focus
towards what's important.


90
00:05:13,213 --> 00:05:16,016 line:-2
Next, I'd like to call your attention
to the toolbar.


91
00:05:16,950 --> 00:05:19,686 line:-2
Toolbars have a brand-new design
in Big Sur.


92
00:05:20,354 --> 00:05:24,224 line:-2
Notice how there's no longer
any visible material behind the items.


93
00:05:24,291 --> 00:05:27,961 line:-2
Instead, it looks uniform
with the content of the window.


94
00:05:28,028 --> 00:05:30,230 line:-2
This is something
you'll get automatically.


95
00:05:31,298 --> 00:05:34,268 line:-2
In addition to the new
visual appearance of the toolbar,


96
00:05:34,334 --> 00:05:37,437 line:-2
there are also
many new styles of toolbars.


97
00:05:37,504 --> 00:05:42,442 line:-2
Each has been purpose-built to either
make an impactful presence in the window


98
00:05:42,509 --> 00:05:46,213 line:-2
or scale back
and allow the content to take focus.


99
00:05:47,080 --> 00:05:50,284 line:-2
There's a new property on NSWindow
called toolbarStyle,


100
00:05:50,350 --> 00:05:52,219 line:-1
which controls these new looks.


101
00:05:53,220 --> 00:05:55,255 line:-1
First is a unified style,


102
00:05:55,322 --> 00:05:57,758 line:-2
which is the new standard look
of toolbars.


103
00:05:58,525 --> 00:06:01,795 line:-2
This style emphasizes
the controls in the toolbar.


104
00:06:02,362 --> 00:06:04,998 line:-2
See how they're larger
and the icons are bold.


105
00:06:05,799 --> 00:06:07,734 line:-1
It also supports the new inline title,


106
00:06:07,801 --> 00:06:12,139 line:-2
which is placed at the leading edge
of the toolbar, next to the sidebar.


107
00:06:14,842 --> 00:06:17,544 line:-2
As this is the new standard look
of the toolbar,


108
00:06:17,611 --> 00:06:19,279 line:-1
it's a good choice for most windows


109
00:06:19,346 --> 00:06:21,982 line:-2
that don't meet requirements
from the other styles.


110
00:06:22,883 --> 00:06:25,853 line:-1
Its larger controls and streamlined title


111
00:06:25,919 --> 00:06:29,223 line:-2
can help your app look great
in the new look of macOS.


112
00:06:31,692 --> 00:06:35,829 line:-2
A variation of the unified style
is the unified compact style.


113
00:06:36,663 --> 00:06:38,732 line:-1
This style has a more compressed layout


114
00:06:38,799 --> 00:06:40,767 line:-1
with regular-sized controls


115
00:06:40,834 --> 00:06:42,536 line:-1
and a smaller toolbar height.


116
00:06:44,972 --> 00:06:47,274 line:-2
This is the look
that's been used in the past


117
00:06:47,341 --> 00:06:50,210 line:-2
if your window was configured
to hide the window's title.


118
00:06:50,844 --> 00:06:54,214 line:-2
In Big Sur, this style now supports
an optional inline title.


119
00:06:54,982 --> 00:06:56,517 line:-1
You may choose to use this style


120
00:06:56,583 --> 00:07:00,220 line:-2
when the user's focus is primarily
on the content of the window


121
00:07:00,287 --> 00:07:02,456 line:-1
and your toolbar isn't heavily populated.


122
00:07:03,657 --> 00:07:06,326 line:-2
The new preference style
is specifically designed


123
00:07:06,393 --> 00:07:08,662 line:-1
for the preference window of your app.


124
00:07:08,729 --> 00:07:11,832 line:-2
It complements
the selectable icons in the toolbar,


125
00:07:11,899 --> 00:07:14,568 line:-2
giving them similar sizes
and centering them,


126
00:07:14,635 --> 00:07:17,137 line:-2
which gives a nice,
uniform look to the window.


127
00:07:19,072 --> 00:07:21,675 line:-2
Now, what's really cool
is that this preference style


128
00:07:21,742 --> 00:07:23,610 line:-1
will be used without any adoption


129
00:07:23,677 --> 00:07:26,313 line:-1
if you're using an NSTabViewController


130
00:07:26,380 --> 00:07:28,048 line:-1
with the toolbar TabStyle.


131
00:07:28,882 --> 00:07:32,452 line:-2
Start using this class for your preference
window, if you aren't already,


132
00:07:32,519 --> 00:07:35,022 line:-2
because it makes switching tabs
really easy


133
00:07:35,088 --> 00:07:37,157 line:-1
and gives you this new look for free.


134
00:07:39,593 --> 00:07:42,396 line:-2
The expanded style
is one you may be familiar with


135
00:07:42,462 --> 00:07:45,365 line:-2
because it used to be
the standard layout of the toolbar.


136
00:07:46,033 --> 00:07:49,403 line:-2
Notice how the title of the window
is placed on top of the toolbar


137
00:07:49,736 --> 00:07:53,140 line:-2
and the title can expand
across the window if necessary.


138
00:07:56,243 --> 00:07:59,546 line:-2
This style is recommended
when your window title is long


139
00:07:59,613 --> 00:08:02,482 line:-2
or your toolbar
is heavily populated by items.


140
00:08:02,983 --> 00:08:04,251 line:-1
It's also a good choice


141
00:08:04,318 --> 00:08:08,388 line:-2
if you need to maintain compatibility
with your existing toolbar construction.


142
00:08:10,157 --> 00:08:12,359 line:-1
Finally, we have the automatic style,


143
00:08:12,426 --> 00:08:16,063 line:-2
which will use your window structure
to determine which style to choose.


144
00:08:16,930 --> 00:08:18,432 line:-1
This is the default value


145
00:08:18,498 --> 00:08:22,236 line:-2
and will maintain existing layout
for your pre-Big Sur linked apps.


146
00:08:23,370 --> 00:08:26,206 line:-2
Controls in the toolbar
also have a brand-new design


147
00:08:26,273 --> 00:08:28,642 line:-1
requiring absolutely no adoption.


148
00:08:29,676 --> 00:08:33,380 line:-2
Notice how they no longer show a border
behind them during normal usage.


149
00:08:33,981 --> 00:08:36,216 line:-2
But when the mouse is hovered
over the control,


150
00:08:36,283 --> 00:08:40,287 line:-2
we see the border pop back in,
giving some nice visual feedback.


151
00:08:42,756 --> 00:08:45,526 line:-2
While most controls
won't have any border around them,


152
00:08:45,959 --> 00:08:48,161 line:-2
controls with text
will have a stroke border


153
00:08:48,228 --> 00:08:50,130 line:-1
surrounding the edge of the control.


154
00:08:50,664 --> 00:08:53,567 line:-2
This helps define which areas
of the toolbar are empty


155
00:08:53,634 --> 00:08:55,569 line:-1
and will allow dragging the window.


156
00:08:56,603 --> 00:08:58,539 line:-1
Another change affecting controls


157
00:08:58,605 --> 00:09:02,109 line:-2
is the new large size used
by the unified toolbar style.


158
00:09:02,876 --> 00:09:05,445 line:-2
You'll find both the control,
as well as the icon,


159
00:09:05,512 --> 00:09:07,848 line:-1
to be larger and use a heavier weight.


160
00:09:10,017 --> 00:09:11,752 line:-1
Because of this new control size,


161
00:09:11,818 --> 00:09:15,756 line:-2
you may find some of your buttons
to have clipping on one or more sides.


162
00:09:16,490 --> 00:09:18,759 line:-2
This is likely because
the min and maxSizes


163
00:09:18,825 --> 00:09:21,562 line:-2
defined on the ToolbarItem
are now too small.


164
00:09:23,597 --> 00:09:25,465 line:-1
These properties are being deprecated


165
00:09:25,532 --> 00:09:28,902 line:-2
in favor of letting AppKit
measure your views automatically.


166
00:09:29,803 --> 00:09:31,939 line:-1
This has been possible since Mojave,


167
00:09:32,005 --> 00:09:35,375 line:-2
so in most cases,
you can remove those calls entirely.


168
00:09:35,442 --> 00:09:37,277 line:-1
It's the easiest kind of adoption.


169
00:09:38,145 --> 00:09:39,880 line:-1
Of course, you can use constraints


170
00:09:39,947 --> 00:09:42,816 line:-2
if you need more control
over the size of the items.


171
00:09:44,151 --> 00:09:46,420 line:-2
You may have already noticed
another enhancement


172
00:09:46,486 --> 00:09:48,422 line:-1
to the inline title and the toolbar.


173
00:09:49,256 --> 00:09:51,458 line:-2
Mail has displayed
the unread message count


174
00:09:51,525 --> 00:09:54,361 line:-2
right under the window title,
in a smaller font.


175
00:09:56,563 --> 00:10:00,767 line:-2
This is made possible
by the new subtitle property on NSWindow.


176
00:10:01,735 --> 00:10:04,938 line:-2
This is a great way to display
secondary text, like an unread count.


177
00:10:05,806 --> 00:10:07,608 line:-1
In the unified toolbar style,


178
00:10:07,674 --> 00:10:10,544 line:-2
you will see this text
placed below the primary title,


179
00:10:10,611 --> 00:10:12,112 line:-1
which saves a lot of space.


180
00:10:12,880 --> 00:10:14,781 line:-1
Using this in the expanded style


181
00:10:14,848 --> 00:10:18,018 line:-2
will place the subtitle
next to the primary title,


182
00:10:18,085 --> 00:10:19,853 line:-1
separated automatically.


183
00:10:21,788 --> 00:10:23,824 line:-1
And speaking of the window title,


184
00:10:23,891 --> 00:10:27,327 line:-2
if your toolbar contains controls,
such as back and forward,


185
00:10:27,828 --> 00:10:31,031 line:-2
these items belong
to the leading edge of the window.


186
00:10:31,832 --> 00:10:34,935 line:-2
With the new navigational property
on NSToolbarItem,


187
00:10:35,002 --> 00:10:38,272 line:-2
you can specify these items
and the system will take care of the rest.


188
00:10:38,939 --> 00:10:43,177 line:-2
Navigation items have special behavior
when customizing the toolbar as well.


189
00:10:43,677 --> 00:10:46,980 line:-2
These items can be customized
into and out of the toolbar,


190
00:10:47,047 --> 00:10:50,551 line:-2
but they can't be moved
out of this title-leading position.


191
00:10:51,385 --> 00:10:53,320 line:-1
One specific control in the toolbar


192
00:10:53,387 --> 00:10:56,690 line:-2
which is getting an all-new experience
is the search control.


193
00:10:57,524 --> 00:11:01,128 line:-2
When the window is large enough,
the full search field is shown as normal,


194
00:11:01,695 --> 00:11:03,564 line:-1
but when the window is compressed down,


195
00:11:04,331 --> 00:11:06,533 line:-2
the search field
is collapsed down into a button.


196
00:11:08,302 --> 00:11:11,038 line:-2
Clicking this button
will expand the search field back out.


197
00:11:11,805 --> 00:11:14,074 line:-2
This ensures
that search is always available


198
00:11:14,141 --> 00:11:16,109 line:-1
no matter the size of the window.


199
00:11:17,778 --> 00:11:19,746 line:-1
Now, to accomplish this behavior,


200
00:11:19,813 --> 00:11:23,183 line:-2
a new item has been added,
called the NSSearchToolbarItem.


201
00:11:23,817 --> 00:11:27,421 line:-2
This item has been designed
to make adoption as easy as possible,


202
00:11:27,487 --> 00:11:30,357 line:-2
allowing you to keep
your existing search field.


203
00:11:32,726 --> 00:11:35,295 line:-2
Here's some existing code
you may have in your app.


204
00:11:35,996 --> 00:11:39,633 line:-2
Adoption of the new search item
can be done in as little as two steps.


205
00:11:40,601 --> 00:11:45,205 line:-2
First, change the class of the item
to be an NSSearchToolbarItem.


206
00:11:46,607 --> 00:11:49,510 line:-2
Next, rather than setting
the item's View property,


207
00:11:50,077 --> 00:11:52,646 line:-2
instead set the item's
searchField property.


208
00:11:53,347 --> 00:11:57,117 line:-2
And with those two small changes,
you have a brand-new search experience.


209
00:11:59,553 --> 00:12:01,922 line:-2
In Interface Builder,
you'll find that a search item


210
00:12:01,989 --> 00:12:04,124 line:-1
has been added to the object Catalog.


211
00:12:04,925 --> 00:12:08,962 line:-2
The really amazing part is that this
object maintains backwards compatibility.


212
00:12:09,596 --> 00:12:11,798 line:-1
When your app is run on an older system,


213
00:12:12,232 --> 00:12:15,736 line:-2
a standard search field will be used
just as it is today.


214
00:12:16,170 --> 00:12:18,272 line:-1
There's no need to do any run-time checks.


215
00:12:20,374 --> 00:12:22,576 line:-1
And with just a few code changes,


216
00:12:22,643 --> 00:12:25,012 line:-1
you've adopted full-height sidebars,


217
00:12:25,078 --> 00:12:26,980 line:-1
a brand-new toolbar style


218
00:12:27,047 --> 00:12:29,049 line:-1
and adjusted the layout of the items.


219
00:12:29,550 --> 00:12:32,119 line:-2
Many of these features
require no changes at all.


220
00:12:32,753 --> 00:12:35,022 line:-2
But you can take adoption
to the next level,


221
00:12:35,088 --> 00:12:39,359 line:-2
making your window take full advantage
of the new look of macOS.


222
00:12:40,794 --> 00:12:41,962 line:-1
Consider the Mail app.


223
00:12:42,629 --> 00:12:44,364 line:-1
Notice how there are items in the toolbar


224
00:12:44,431 --> 00:12:47,100 line:-2
that align with sections of content
in the window.


225
00:12:49,269 --> 00:12:52,506 line:-2
The dividers of the split view
reach up to the top of the window,


226
00:12:52,573 --> 00:12:55,008 line:-2
creating these beautiful
full-height sections.


227
00:12:55,943 --> 00:12:59,446 line:-2
As the dividers are resized,
the toolbar items follow.


228
00:13:00,080 --> 00:13:04,518 line:-2
This gives useful context to the controls,
showing what content they will act on.


229
00:13:06,587 --> 00:13:10,357 line:-2
Now, just because adoption of these
toolbar sections goes the extra mile


230
00:13:10,424 --> 00:13:12,926 line:-1
doesn't mean it requires a lot of work.


231
00:13:13,327 --> 00:13:18,031 line:-2
They're created using the new
NSTrackingSeparatorToolbarItem.


232
00:13:18,098 --> 00:13:21,034 line:-2
Each item is configured
to track a specific divider,


233
00:13:21,101 --> 00:13:22,970 line:-1
and the toolbar does the rest.


234
00:13:24,304 --> 00:13:27,841 line:-2
During customization,
these sections are not removable,


235
00:13:27,908 --> 00:13:31,044 line:-2
but the content of the sections
can be customized.


236
00:13:32,112 --> 00:13:35,616 line:-2
Creating one of these items
requires just one line of code.


237
00:13:36,483 --> 00:13:38,519 line:-1
Create the item using the constructor


238
00:13:38,585 --> 00:13:40,254 line:-1
and assign it a split view to track


239
00:13:40,320 --> 00:13:42,856 line:-2
and specify which divider
of that split view


240
00:13:42,923 --> 00:13:44,324 line:-1
it should be aligned with.


241
00:13:45,926 --> 00:13:50,297 line:-2
If you don't have access to the split view
during the item's creation, that's okay.


242
00:13:50,931 --> 00:13:52,833 line:-1
Just assign it before the window is shown.


243
00:13:55,636 --> 00:13:57,738 line:-1
You can also use this new tracking item


244
00:13:57,804 --> 00:14:00,240 line:-2
to place controls
over a full-height sidebar.


245
00:14:01,041 --> 00:14:05,312 line:-2
To make this easier, AppKit has added
a new standard item identifier,


246
00:14:05,379 --> 00:14:08,315 line:-2
which will discover
the full-height sidebar automatically.


247
00:14:09,283 --> 00:14:13,654 line:-2
Toolbar items placed before the separator
will appear over the full-height sidebar.


248
00:14:15,989 --> 00:14:19,960 line:-2
You may have noticed that the toolbar
doesn't have a divider below it anymore.


249
00:14:20,027 --> 00:14:21,762 line:-1
But that's not always true though.


250
00:14:22,329 --> 00:14:26,500 line:0
A shadow will automatically appear
between the toolbar and scrolled content


251
00:14:26,567 --> 00:14:29,670 line:0
to create a visual pocket
where the content trails off.


252
00:14:30,537 --> 00:14:33,774 line:0
This happens in each section of the window
with a scroll view.


253
00:14:36,109 --> 00:14:37,845 line:-1
In order to see this behavior,


254
00:14:37,911 --> 00:14:41,648 line:-2
make sure your scroll view
completely fills the frame of the section.


255
00:14:42,316 --> 00:14:45,085 line:-2
You'll also need to be using
the full-size content mask


256
00:14:45,152 --> 00:14:46,954 line:-1
that we talked about earlier.


257
00:14:47,020 --> 00:14:48,789 line:-1
Otherwise, you'll see a separator


258
00:14:48,856 --> 00:14:51,625 line:-2
regardless of whether or not
content is scrolled.


259
00:14:53,393 --> 00:14:57,464 line:-2
If you'd like to explicitly request
a separator instead of the scroll shadow,


260
00:14:57,531 --> 00:14:59,566 line:-1
or maybe have no separator at all,


261
00:14:59,633 --> 00:15:02,903 line:-2
you can do that
using the titlebarSeparatorStyle


262
00:15:02,970 --> 00:15:04,538 line:-1
on each split view item.


263
00:15:05,172 --> 00:15:08,742 line:-2
This will allow you to specify
which sections get the scrolling pockets


264
00:15:08,809 --> 00:15:10,177 line:-1
and which should not.


265
00:15:11,345 --> 00:15:14,448 line:-2
Or you can specify a style
on the window as a whole.


266
00:15:15,048 --> 00:15:16,517 line:-1
Note that the style on the window


267
00:15:16,583 --> 00:15:19,953 line:-2
will supersede any styles
defined by split view items.


268
00:15:20,654 --> 00:15:23,690 line:-2
If you want control of the style
to be in the hands of the items,


269
00:15:23,757 --> 00:15:26,260 line:-2
make sure the window style
is set to "automatic."


270
00:15:28,028 --> 00:15:31,064 line:-2
Now, we've talked about some
really striking window-level features


271
00:15:31,131 --> 00:15:32,199 line:-1
of the new design.


272
00:15:33,333 --> 00:15:36,303 line:-2
These features have been baked directly
into NSToolbar


273
00:15:36,370 --> 00:15:38,472 line:-1
and NSSplitViewController.


274
00:15:38,539 --> 00:15:41,708 line:-2
If you aren't already taking advantage
of those classes,


275
00:15:41,775 --> 00:15:45,846 line:-2
now is a great time to let the system
start doing the heavy lifting for you.


276
00:15:47,014 --> 00:15:50,284 line:-2
And that's it
for setting up your window for success.


277
00:15:50,350 --> 00:15:54,655 line:0
Next, Jeff Nadeau will guide you through
some exciting enhancements to controls.


278
00:15:55,822 --> 00:15:57,090 line:0
Thanks, John.


279
00:15:57,157 --> 00:15:59,259 line:0
Now that you've refined
your window structure,


280
00:15:59,326 --> 00:16:03,230 line:0
let's look at what macOS Big Sur brings
to the controls inside your app.


281
00:16:03,864 --> 00:16:07,301 line:-2
System controls have taken on
a new and modern design in Big Sur,


282
00:16:07,367 --> 00:16:10,804 line:-2
and AppKit provides all of these updates
to your app automatically.


283
00:16:11,438 --> 00:16:15,342 line:-2
But there are a few control updates we
think you'll be especially excited about,


284
00:16:15,409 --> 00:16:17,978 line:-2
and the first is an update
to accent colors.


285
00:16:18,679 --> 00:16:21,148 line:-2
You're probably familiar
with the family of accent colors


286
00:16:21,215 --> 00:16:23,350 line:-1
that are available on macOS.


287
00:16:23,417 --> 00:16:27,054 line:-2
These colors affect all kinds
of UI elements, including controls,


288
00:16:27,120 --> 00:16:29,823 line:-2
selection backgrounds, focus rings
and more.


289
00:16:30,824 --> 00:16:34,228 line:-2
In macOS Big Sur,
we're adding a new choice of accent color,


290
00:16:34,294 --> 00:16:35,896 line:-1
and it's any color you want.


291
00:16:36,363 --> 00:16:38,532 line:-2
If there's a color
that's special to your app,


292
00:16:38,599 --> 00:16:41,668 line:-2
you can designate it
as your app's custom accent color.


293
00:16:41,735 --> 00:16:45,339 line:-2
And when this multicolor option is chosen
in persistent preferences,


294
00:16:45,405 --> 00:16:49,276 line:-2
your custom accent will apply
in all of the places that you'd expect.


295
00:16:51,445 --> 00:16:55,482 line:-2
And that includes controls,
list selections, sidebar icons,


296
00:16:55,549 --> 00:16:57,484 line:-1
menus and focus rings.


297
00:16:58,085 --> 00:17:01,522 line:-2
This is a great way for your app
to express its unique personality.


298
00:17:03,056 --> 00:17:05,592 line:-1
Setting up a custom accent color is easy.


299
00:17:05,659 --> 00:17:08,161 line:-1
It's all done in the asset catalog.


300
00:17:08,228 --> 00:17:11,964 line:-2
First, create a new named color
in your app's asset catalog.


301
00:17:12,031 --> 00:17:15,435 line:-2
For newly created apps,
Xcode will even add this for you.


302
00:17:15,502 --> 00:17:17,204 line:-1
Set up your color however you'd like.


303
00:17:17,271 --> 00:17:21,141 line:-2
You can alias one of the existing
system colors, or you can pick your own.


304
00:17:21,942 --> 00:17:25,279 line:-2
And don't forget that you can also choose
a different shade for Dark Mode.


305
00:17:26,914 --> 00:17:28,815 line:-1
Once you're happy with your color choice,


306
00:17:28,882 --> 00:17:32,152 line:-2
you can specify your accent color's name
in the project editor


307
00:17:32,219 --> 00:17:34,488 line:-2
so that Xcode's build system
can identify it.


308
00:17:34,955 --> 00:17:37,791 line:-2
And that's it.
Build and run your app on Big Sur


309
00:17:37,858 --> 00:17:40,394 line:-2
and you'll see your custom color
throughout the UI.


310
00:17:41,862 --> 00:17:43,964 line:-1
Now, remember, your custom accent color


311
00:17:44,031 --> 00:17:47,668 line:-2
applies only when the system preference
is set to multicolor.


312
00:17:47,734 --> 00:17:49,937 line:-2
We still want to support
a level of personalization


313
00:17:50,003 --> 00:17:52,739 line:-2
when it comes to accent colors
so that people have the option


314
00:17:52,806 --> 00:17:55,309 line:-2
to choose their favorite
and use it everywhere on their Mac.


315
00:17:56,610 --> 00:18:00,280 line:-2
For that reason, you should continue
to draw using the named system colors


316
00:18:00,347 --> 00:18:03,183 line:-1
instead of hard-coding your custom accent.


317
00:18:03,250 --> 00:18:05,752 line:-2
These colors follow the accent preference
automatically


318
00:18:05,819 --> 00:18:08,822 line:-2
and will make sure that you match
the rest of the system as needed.


319
00:18:09,489 --> 00:18:13,460 line:-2
We think that's gonna be a really fun way
for apps to express some personality.


320
00:18:13,527 --> 00:18:17,064 line:-2
Next, I want to talk about a new control
style we think will be pretty popular--


321
00:18:17,130 --> 00:18:18,532 line:-1
large controls.


322
00:18:19,666 --> 00:18:23,403 line:-2
The idea behind large controls is that
sometimes you just need a bigger button.


323
00:18:24,137 --> 00:18:27,040 line:-2
These are really common
in onboarding flows like this one


324
00:18:27,107 --> 00:18:30,277 line:-2
where there's a single call to action
right in the middle of the window.


325
00:18:30,878 --> 00:18:33,013 line:-1
This type of UI is increasingly popular,


326
00:18:33,080 --> 00:18:35,916 line:-2
and we know that a lot of apps
have had to build custom buttons


327
00:18:35,983 --> 00:18:37,818 line:-1
just to get this type of control.


328
00:18:38,519 --> 00:18:42,689 line:-2
Well, I'm happy to say that large controls
are now a standard control size,


329
00:18:42,756 --> 00:18:46,493 line:-2
so you'll be able to get a large button
just by setting the control size to large


330
00:18:46,560 --> 00:18:49,830 line:-2
and have the confidence that it will
always match the system theme.


331
00:18:51,231 --> 00:18:53,133 line:-1
It's not just buttons though.


332
00:18:53,200 --> 00:18:56,303 line:-2
While the large size is available
for most styles of button,


333
00:18:56,370 --> 00:18:58,605 line:-1
including both pop-up and pull-down,


334
00:18:58,672 --> 00:19:03,110 line:-2
it's also available for segmented
controls, text fields and search fields.


335
00:19:04,578 --> 00:19:07,314 line:-2
In fact, the most prominent place
where you'll see these


336
00:19:07,381 --> 00:19:10,851 line:-2
is in the new unified style of toolbar
that we looked at earlier,


337
00:19:10,918 --> 00:19:14,721 line:-2
which uses the large control size
for all of the items in the toolbar.


338
00:19:16,323 --> 00:19:18,692 line:-2
You'll also see large buttons
in system alerts,


339
00:19:18,759 --> 00:19:22,262 line:-2
where they prominently display
the available actions on the alert.


340
00:19:22,930 --> 00:19:25,699 line:-2
Next up, I want to talk
about one control in particular,


341
00:19:25,766 --> 00:19:27,167 line:-1
and that's sliders.


342
00:19:27,234 --> 00:19:29,937 line:-1
Sliders have a new look on macOS Big Sur.


343
00:19:31,004 --> 00:19:34,942 line:-2
In this new style,
tick marks appear inline on the track,


344
00:19:35,008 --> 00:19:38,512 line:-2
unifying the layout between sliders
with and without tick marks.


345
00:19:39,046 --> 00:19:42,816 line:-2
This new look is applied automatically
when you build against the new SDK,


346
00:19:42,883 --> 00:19:45,419 line:-2
so there's a couple things
you'll want to know about it.


347
00:19:46,119 --> 00:19:49,189 line:-2
For one, it might have an impact
on your layout.


348
00:19:49,256 --> 00:19:52,726 line:-2
If you previously had a configuration
where you've manually aligned a label


349
00:19:52,793 --> 00:19:54,928 line:-1
to the track portion of the slider,


350
00:19:54,995 --> 00:19:58,165 line:-2
once your app is opted into the new style,
you might find


351
00:19:58,232 --> 00:20:01,568 line:-2
that your label doesn't line up anymore
since the track and tick marks


352
00:20:01,635 --> 00:20:04,705 line:-2
now sit differently
within the frame of the control.


353
00:20:04,771 --> 00:20:08,108 line:-2
The solution here is to baseline
align your label to the slider.


354
00:20:08,542 --> 00:20:13,647 line:-2
Slider calculates a baseline offset that's
appropriate for any adjacent label text.


355
00:20:13,714 --> 00:20:18,018 line:-2
This technique works on Catalina, too,
so you can configure your constraints once


356
00:20:18,085 --> 00:20:21,121 line:-2
and get clean label placement
on both versions.


357
00:20:21,555 --> 00:20:24,458 line:-2
Next up, let's take a look
at some of the updates to table views.


358
00:20:26,760 --> 00:20:29,029 line:-2
You might have noticed
this new look for table selections


359
00:20:29,096 --> 00:20:30,864 line:-1
in some of our screenshots.


360
00:20:30,931 --> 00:20:34,334 line:-2
This is the new inset style
that we've added to NSTableView.


361
00:20:35,669 --> 00:20:40,107 line:-2
The inset style applies some extra
horizontal padding around your cell views


362
00:20:40,174 --> 00:20:43,243 line:-2
and vertical padding
around the top and bottom rows.


363
00:20:43,310 --> 00:20:46,046 line:-2
It also has
a slightly taller default row height


364
00:20:46,113 --> 00:20:48,982 line:-1
and wider spacing in multicolumn tables.


365
00:20:49,449 --> 00:20:53,453 line:-2
You can control this styling using
the new style property on NSTableView.


366
00:20:53,954 --> 00:20:56,256 line:-1
There are four options built in.


367
00:20:56,323 --> 00:20:58,892 line:-2
The first, automatic,
is the default value,


368
00:20:58,959 --> 00:21:02,095 line:-2
and it chooses a style
based on the configuration of the table.


369
00:21:02,963 --> 00:21:06,600 line:-2
The fullWidth style displays
the selection edge-to-edge in the table,


370
00:21:06,667 --> 00:21:09,236 line:-1
just like it did on Catalina and previous.


371
00:21:09,937 --> 00:21:13,373 line:-2
Inset is the new inset style
that we just looked at,


372
00:21:13,440 --> 00:21:18,178 line:-2
and sourceList is specifically for the
new appearance of sidebar source lists.


373
00:21:18,979 --> 00:21:22,049 line:-2
The style property allows you
to configure which style you'd like,


374
00:21:22,115 --> 00:21:24,551 line:-2
and effectiveStyle
is a read-only property


375
00:21:24,618 --> 00:21:28,121 line:-2
which can tell you
how the automatic style is being resolved.


376
00:21:29,590 --> 00:21:33,093 line:-2
The automatic style resolve is based
on the configuration of the table view.


377
00:21:33,160 --> 00:21:36,897 line:-2
If it's in a sidebar,
it'll choose the sourceList appearance.


378
00:21:36,964 --> 00:21:39,333 line:-2
If the table is embedded
in a bordered scroll view,


379
00:21:39,399 --> 00:21:41,401 line:-1
it'll use the fullWidth style.


380
00:21:41,468 --> 00:21:44,304 line:-2
And, otherwise, it defaults to using
the new inset style.


381
00:21:46,139 --> 00:21:48,642 line:-2
Since the inset style
might affect your layout,


382
00:21:48,709 --> 00:21:52,279 line:-2
it's only used for apps that are built
using the new SDK.


383
00:21:52,346 --> 00:21:55,549 line:-2
However, sidebars always use
the new sourceList style.


384
00:21:57,184 --> 00:21:59,319 line:-1
The new style property completely replaces


385
00:21:59,386 --> 00:22:02,022 line:-2
the old sourceList selection
highlight style.


386
00:22:02,089 --> 00:22:05,893 line:-2
So, when you're setting up a sourceList,
you should prefer the new style property,


387
00:22:05,959 --> 00:22:09,263 line:-2
and so we've soft-deprecated
the old highlight style.


388
00:22:09,630 --> 00:22:11,865 line:-2
Now that your content lists
are looking great,


389
00:22:11,932 --> 00:22:15,002 line:-2
let's take a turn
and talk about the typography in your app.


390
00:22:16,136 --> 00:22:20,007 line:-2
The big news here is that text styles
have come to macOS.


391
00:22:20,073 --> 00:22:23,577 line:-2
You might have seen this hierarchy
of typographic styles on other platforms,


392
00:22:23,644 --> 00:22:27,114 line:-2
and now it's available
for your text content on macOS as well.


393
00:22:28,248 --> 00:22:31,518 line:-2
The sizes and weights have been adjusted
to fit the Mac design,


394
00:22:31,585 --> 00:22:35,055 line:-2
centering around
our standard body font size of 13 points.


395
00:22:35,689 --> 00:22:38,959 line:-2
It's important to remember that
this isn't the same thing as dynamic type,


396
00:22:39,026 --> 00:22:42,796 line:-2
so there's no slider that's going
to adjust these sizes system-wide.


397
00:22:42,863 --> 00:22:45,699 line:-2
Here's how you access
these system text styles and code.


398
00:22:46,233 --> 00:22:48,302 line:-1
You can either get an NSFont instance


399
00:22:48,368 --> 00:22:51,471 line:-2
using the preferredFontforTextStyle
options method,


400
00:22:51,538 --> 00:22:53,740 line:-1
or, if you'd like a font descriptor,


401
00:22:53,807 --> 00:22:57,678 line:-2
you can use preferredFontDescriptor
forTextStyle options instead.


402
00:22:58,812 --> 00:23:01,348 line:-2
And, of course,
the font picker and interface builder


403
00:23:01,415 --> 00:23:03,817 line:-1
has also added support for text styles.


404
00:23:04,218 --> 00:23:06,753 line:-2
Now that your controls
and typography are looking great,


405
00:23:06,820 --> 00:23:08,856 line:-1
let's focus our attention to iconography.


406
00:23:10,390 --> 00:23:13,694 line:-2
Those of you with keen eyes
might have noticed refreshed iconography


407
00:23:13,760 --> 00:23:16,730 line:-1
all across the system in macOS Big Sur,


408
00:23:16,797 --> 00:23:19,933 line:-2
and that's because
we've brought SF Symbols to the Mac.


409
00:23:20,000 --> 00:23:22,202 line:-2
That means that you have access
to our repertoire


410
00:23:22,269 --> 00:23:25,339 line:-1
of over 2,500 built-in symbol images


411
00:23:25,405 --> 00:23:28,108 line:-2
and also the option
to design your own symbols as well.


412
00:23:29,243 --> 00:23:31,745 line:-2
Symbol images are great
for building out iconography


413
00:23:31,812 --> 00:23:35,749 line:-2
that complements your app's typography
since they scale for the font size


414
00:23:35,816 --> 00:23:38,752 line:-2
and they adapt
to suit various font weights as well.


415
00:23:39,319 --> 00:23:40,854 line:-1
This makes them a natural partner


416
00:23:40,921 --> 00:23:43,590 line:-2
to the system text styles
that we looked at a moment ago.


417
00:23:44,157 --> 00:23:48,428 line:-2
It also means that symbol images can
easily adapt to different configurations.


418
00:23:49,396 --> 00:23:53,233 line:-2
For example, remember the large icons
in the new unified toolbar?


419
00:23:53,867 --> 00:23:59,039 line:-2
These icons are actually symbol images
set at a 13-point size, medium weight,


420
00:23:59,106 --> 00:24:01,141 line:-1
and using the large symbol scale.


421
00:24:01,708 --> 00:24:04,645 line:-2
Toolbar controls automatically configure
their symbol images


422
00:24:04,711 --> 00:24:07,681 line:-2
to match the size and style
of the toolbar.


423
00:24:07,748 --> 00:24:09,349 line:-1
So, if you use symbols,


424
00:24:09,416 --> 00:24:12,653 line:-2
you'll get a clean and consistent look
for any style of toolbar.


425
00:24:13,687 --> 00:24:16,056 line:-2
But that's not the only place
where we take advantage


426
00:24:16,123 --> 00:24:17,691 line:-1
of symbol images' versatility.


427
00:24:18,525 --> 00:24:20,594 line:-1
Symbols make for great sidebar icons,


428
00:24:20,661 --> 00:24:24,998 line:-2
and here we can see that NSOutlineView
automatically scales both the text labels


429
00:24:25,065 --> 00:24:26,400 line:-1
and the symbol images


430
00:24:26,466 --> 00:24:29,703 line:-2
to match the preferred sidebar size
in system preferences.


431
00:24:30,137 --> 00:24:34,575 line:-2
This makes it really easy to support
all three sizes in your sidebar.


432
00:24:35,442 --> 00:24:36,944 line:-1
You can access system symbols


433
00:24:37,010 --> 00:24:39,980 line:-2
using the new
init with systemSymbolName initializer.


434
00:24:40,514 --> 00:24:43,317 line:-2
When you create a system symbol,
you also have the opportunity


435
00:24:43,383 --> 00:24:47,020 line:-2
to provide an accessibility description,
which we strongly encourage.


436
00:24:48,288 --> 00:24:51,692 line:-2
You can also specify system symbols
in Interface Builder.


437
00:24:51,758 --> 00:24:53,861 line:-1
The menu provides a preview of each symbol


438
00:24:53,927 --> 00:24:56,563 line:-2
so you can find the exact one
that you're looking for.


439
00:24:57,264 --> 00:24:59,867 line:-2
When it comes to using symbol images
in your own UI,


440
00:25:00,367 --> 00:25:03,070 line:-1
the best method is to use NSImageView.


441
00:25:03,136 --> 00:25:05,272 line:-2
It knows how to properly resolve
the symbol image


442
00:25:05,339 --> 00:25:07,574 line:-2
against your preferred
typographic properties


443
00:25:07,641 --> 00:25:09,710 line:-1
and other factors like the display scale,


444
00:25:10,410 --> 00:25:13,580 line:-2
and it knows how
to most efficiently display symbol images.


445
00:25:13,647 --> 00:25:16,283 line:-2
We've added two new properties
to NSImageView


446
00:25:16,350 --> 00:25:20,320 line:-2
to help you configure your symbol image:
the symbol font and scale.


447
00:25:21,255 --> 00:25:25,259 line:-2
Image view also handles the unique
alignment properties of symbol images,


448
00:25:25,325 --> 00:25:27,194 line:-1
most importantly, the baseline.


449
00:25:27,794 --> 00:25:30,197 line:-2
When you use a symbol image
in NSImageView,


450
00:25:30,264 --> 00:25:33,934 line:-2
you can use auto layout to baseline align
the image to an adjacent label


451
00:25:34,001 --> 00:25:35,569 line:-1
so that they line up perfectly.


452
00:25:36,503 --> 00:25:39,806 line:-2
Symbol images typically resolve
their size, weight and scale


453
00:25:39,873 --> 00:25:41,875 line:-1
from the context that they're placed in.


454
00:25:41,942 --> 00:25:44,411 line:-2
So, for example,
a symbol image in a button


455
00:25:44,478 --> 00:25:46,680 line:-1
always matches the font of the button.


456
00:25:47,748 --> 00:25:50,017 line:-2
However, if you need
to manually specialize


457
00:25:50,083 --> 00:25:52,085 line:-1
some aspect of your symbol image,


458
00:25:52,152 --> 00:25:54,988 line:-2
you can use the new
withSymbolConfiguration method


459
00:25:55,055 --> 00:25:58,692 line:-2
to create a new NSImage
that embeds the relevant configuration.


460
00:25:59,760 --> 00:26:03,730 line:-2
You can create a symbol configuration
using a size, weight and scale,


461
00:26:03,797 --> 00:26:07,768 line:-2
or you can reference
one of our newly introduced text styles.


462
00:26:07,835 --> 00:26:10,270 line:-2
If you need
to manually draw a symbol image,


463
00:26:10,337 --> 00:26:13,473 line:-2
here's some important information
on how to align the geometry.


464
00:26:14,107 --> 00:26:18,011 line:-2
In the image's own coordinate space,
the glyph sits inside a bounding box


465
00:26:18,078 --> 00:26:21,248 line:-2
that's the same size
as the NSImageSize property.


466
00:26:22,282 --> 00:26:24,852 line:-2
Within that bounding box
is the alignment rect


467
00:26:24,918 --> 00:26:28,989 line:-2
which, for symbol images,
spans from the baseline to the cap height.


468
00:26:29,056 --> 00:26:32,626 line:-2
If you need to manually align
against one of these typographic features,


469
00:26:32,693 --> 00:26:35,896 line:-2
you can use the alignment rect
to adjust your drawing accordingly.


470
00:26:37,731 --> 00:26:42,169 line:-2
You should especially avoid using NSImage
directly in layer contents.


471
00:26:42,703 --> 00:26:45,339 line:-2
This has been problematic
for many versions of macOS,


472
00:26:45,405 --> 00:26:47,541 line:-1
but it's especially bad for symbols.


473
00:26:48,075 --> 00:26:52,713 line:-2
Once an image is set as layer contents,
it loses all of its context sensitivity,


474
00:26:52,779 --> 00:26:55,716 line:-2
and it won't be able to adapt
to things like display scale.


475
00:26:56,984 --> 00:27:01,121 line:-2
It's also difficult to properly size
and position the layer in this scenario,


476
00:27:01,188 --> 00:27:03,690 line:-2
which makes this a recipe
for blurry symbols.


477
00:27:03,757 --> 00:27:05,692 line:-1
It's better to just use NSImageView.


478
00:27:07,394 --> 00:27:09,029 line:-1
One final note on symbols.


479
00:27:09,096 --> 00:27:11,965 line:-2
We've updated
most of the existing named system images


480
00:27:12,032 --> 00:27:14,268 line:-1
to map directly to symbol images.


481
00:27:15,235 --> 00:27:19,139 line:0
So, for example, if you ask
for NSImageNameShare template,


482
00:27:19,206 --> 00:27:21,542 line:0
you'll get the square and arrow-up symbol.


483
00:27:22,209 --> 00:27:25,646 line:0
This change might affect the drawing
or layout of these images in your app,


484
00:27:25,712 --> 00:27:29,483 line:0
so we only do this mapping for apps
that are built against the new SDK.


485
00:27:30,083 --> 00:27:34,054 line:0
This is something to keep an eye out for
once you've rebuilt your app for Big Sur.


486
00:27:34,621 --> 00:27:38,125 line:-2
Now, there's a lot of cool stuff here,
so let's review your next steps.


487
00:27:38,792 --> 00:27:41,528 line:-2
Once you've got your app building
against the new SDK,


488
00:27:41,595 --> 00:27:44,164 line:-2
start by making sure that you're getting
the full-height sidebar


489
00:27:44,231 --> 00:27:46,466 line:-2
so that you match
that modern window construction.


490
00:27:47,601 --> 00:27:49,403 line:-1
Then take a look at your toolbar


491
00:27:49,469 --> 00:27:52,172 line:-2
and consider which style
is right for your app.


492
00:27:52,239 --> 00:27:54,608 line:-2
If your window is based
on a split view construction,


493
00:27:54,675 --> 00:27:57,211 line:-2
you might also want to add split tracking
to your toolbar


494
00:27:57,277 --> 00:28:00,414 line:-2
so that you can divide it into those
clean, distinct sections that you see


495
00:28:00,480 --> 00:28:01,748 line:-1
in apps like Mail.


496
00:28:02,482 --> 00:28:06,653 line:-2
Next, consider defining a custom
accent color in your asset catalog.


497
00:28:06,720 --> 00:28:10,123 line:-2
This is a great way for your app
to express its personality.


498
00:28:10,190 --> 00:28:12,793 line:-2
And then, finally,
start using symbol images.


499
00:28:12,860 --> 00:28:17,197 line:-2
You now have access to a huge library
of high-quality, Apple-produced symbols,


500
00:28:17,264 --> 00:28:18,966 line:-1
which provide a lot of versatility


501
00:28:19,032 --> 00:28:22,402 line:-2
and go hand-in-hand with
the surrounding typography in your app.


502
00:28:23,036 --> 00:28:26,940 line:-2
macOS Big Sur is a huge update
to the design of macOS,


503
00:28:27,007 --> 00:28:29,843 line:-2
and we look forward to seeing
where you take this new design direction


504
00:28:29,910 --> 00:28:31,345 line:-1
in your own apps.


505
00:28:31,411 --> 00:28:32,679 line:-1
Thanks for watching.

