1
00:00:03,871 --> 00:00:07,140 line:-1
Hello, and welcome to WWDC.


2
00:00:08,509 --> 00:00:09,510 line:0
Hi, everyone.


3
00:00:09,576 --> 00:00:10,511 line:0
My name is Holly,


4
00:00:10,577 --> 00:00:13,647 line:0
and I'm an engineer
on the Swift compiler team.


5
00:00:13,714 --> 00:00:16,216 line:0
Welcome to "Embrace Swift Type Inference."


6
00:00:16,617 --> 00:00:19,186 line:-1
Swift uses type inference extensively


7
00:00:19,253 --> 00:00:23,290 line:-2
to achieve concise syntax
without compromising safety in your code.


8
00:00:24,091 --> 00:00:27,661 line:-2
Today, we'll talk about
when you can leverage type inference,


9
00:00:27,728 --> 00:00:31,198 line:-2
we'll learn about
how type inference works in the compiler,


10
00:00:31,265 --> 00:00:34,535 line:-2
and finally,
we'll see how to work with Swift and Xcode


11
00:00:34,601 --> 00:00:38,505 line:-2
to understand and fix
compiler errors in your code.


12
00:00:38,972 --> 00:00:42,409 line:-2
Before we dive in,
let's review what type inference is.


13
00:00:42,976 --> 00:00:47,014 line:-2
Type inference allows you to omit
explicit type annotations


14
00:00:47,080 --> 00:00:49,783 line:-2
and other verbose details
in your source code


15
00:00:49,850 --> 00:00:52,119 line:-2
when the compiler
can figure out those details


16
00:00:52,186 --> 00:00:53,987 line:-1
from the surrounding context.


17
00:00:54,721 --> 00:00:58,959 line:-2
In this case, there is no type for x
written in the source code,


18
00:00:59,026 --> 00:01:02,529 line:0
but the compiler infers
the type of x to be a string


19
00:01:02,596 --> 00:01:05,032 line:0
based on the value provided
in the assignment,


20
00:01:05,098 --> 00:01:06,400 line:0
which is a string literal.


21
00:01:07,501 --> 00:01:10,637 line:-2
The type of x
could have been specified explicitly


22
00:01:10,704 --> 00:01:14,074 line:-2
with a type annotation
using a colon after x


23
00:01:14,141 --> 00:01:19,012 line:-2
or by coercing the right-hand side
to String using the "as" keyword.


24
00:01:19,479 --> 00:01:23,450 line:-2
This is a very small example,
but things get much more interesting


25
00:01:23,517 --> 00:01:26,253 line:-2
when the code leans heavily
on type inference,


26
00:01:26,320 --> 00:01:27,921 line:-1
like in a SwiftUI project.


27
00:01:28,589 --> 00:01:32,359 line:-2
Many SwiftUI apps create
large, complex interfaces


28
00:01:32,426 --> 00:01:35,462 line:-1
by composing small, reusable views,


29
00:01:35,529 --> 00:01:38,732 line:-2
and this kind of code
relies heavily on type inference


30
00:01:38,799 --> 00:01:41,902 line:-2
at the call-sites
of those reusable components.


31
00:01:41,969 --> 00:01:46,106 line:-2
We're going to take an in-depth look
at code in a SwiftUI app


32
00:01:46,173 --> 00:01:49,109 line:-2
that leverages type inference
at these call-sites.


33
00:01:49,843 --> 00:01:54,481 line:-2
Then we'll learn how the compiler
solves the type inference puzzle,


34
00:01:54,548 --> 00:01:58,519 line:-2
and finally, we'll see how to work
with the Swift compiler and Xcode


35
00:01:58,585 --> 00:02:02,356 line:-2
to understand and fix
compiler errors in the code.


36
00:02:03,390 --> 00:02:06,260 line:-2
We'll be looking at an app
that I've been working on with my team,


37
00:02:06,326 --> 00:02:08,328 line:-1
called Fruta, for ordering smoothies.


38
00:02:09,229 --> 00:02:11,465 line:-2
Currently,
the app shows a list of smoothies,


39
00:02:11,532 --> 00:02:13,734 line:-2
which you can see on the right
in the Preview.


40
00:02:15,135 --> 00:02:19,006 line:-2
I want to add a feature
to allow the user to search for smoothies.


41
00:02:19,973 --> 00:02:22,910 line:-2
Let's take a look at how
the current smoothie list is implemented.


42
00:02:25,012 --> 00:02:27,681 line:-2
The SmoothieList body
creates a SwiftUI List


43
00:02:27,748 --> 00:02:29,550 line:-1
from an array of smoothies,


44
00:02:29,616 --> 00:02:32,386 line:-2
mapping each smoothie
to a SmoothieRowView.


45
00:02:32,986 --> 00:02:34,888 line:-1
To add a search functionality,


46
00:02:34,955 --> 00:02:39,393 line:-2
I need to filter the smoothies based on
a string that the user searched for,


47
00:02:39,459 --> 00:02:43,163 line:-2
so SmoothieList needs a State property
to store this string.


48
00:02:44,431 --> 00:02:47,668 line:-2
I built a new reusable view
called FilteredList


49
00:02:47,734 --> 00:02:49,169 line:-1
that is similar to List,


50
00:02:49,236 --> 00:02:52,806 line:-2
but allows me to pass two additional
arguments to the initializer


51
00:02:52,873 --> 00:02:55,108 line:-1
that specify how to filter the smoothies.


52
00:02:56,643 --> 00:02:58,078 line:-1
The first is a KeyPath


53
00:02:58,145 --> 00:03:01,448 line:-2
to the property on smoothies
that I want to filter by,


54
00:03:01,515 --> 00:03:04,151 line:-2
and the second is a function
to compute whether the smoothie


55
00:03:04,218 --> 00:03:07,221 line:-2
should be included in the list
based on that property.


56
00:03:08,589 --> 00:03:12,292 line:-2
In this case, the smoothies will be
filtered by their title,


57
00:03:12,359 --> 00:03:13,760 line:-1
and a smoothie will be included


58
00:03:13,827 --> 00:03:16,496 line:-2
if the title has the searchPhrase
as a substring.


59
00:03:17,431 --> 00:03:19,366 line:-1
The hasSubstring method does the work


60
00:03:19,433 --> 00:03:21,935 line:-2
of checking for the searchPhrase
within the title,


61
00:03:22,002 --> 00:03:25,138 line:-2
and it will also return true
if the searchPhrase is an empty string.


62
00:03:26,807 --> 00:03:29,476 line:-2
It's not obvious
from looking at the call-site,


63
00:03:29,543 --> 00:03:31,945 line:-2
but this call
to the FilteredList initializer


64
00:03:32,012 --> 00:03:34,548 line:-1
leans heavily on type inference.


65
00:03:35,215 --> 00:03:38,886 line:-2
Let's talk about what causes this code
to rely on type inference,


66
00:03:38,952 --> 00:03:42,756 line:-2
and how the call-site
leverages type inference for cleaner code.


67
00:03:43,657 --> 00:03:48,128 line:-2
To understand the incidental details
that are omitted from this call-site,


68
00:03:48,195 --> 00:03:51,798 line:-2
we need to look at the declaration
of FilteredList and its initializer.


69
00:03:53,200 --> 00:03:56,103 line:-2
Since FilteredList
is a general-purpose view,


70
00:03:56,170 --> 00:03:58,472 line:-2
it should work with
any type of data and content


71
00:03:58,539 --> 00:04:00,674 line:-2
that the client
needs to show in their list.


72
00:04:01,575 --> 00:04:04,511 line:-2
This flexibility is achieved
using generics.


73
00:04:05,946 --> 00:04:09,883 line:-2
I introduced three type parameters,
which are placeholders


74
00:04:09,950 --> 00:04:13,153 line:-2
that will be replaced with actual types
at the call-site.


75
00:04:13,220 --> 00:04:15,189 line:-1
These actual types,


76
00:04:15,255 --> 00:04:18,024 line:-1
which are formally called concrete types,


77
00:04:18,091 --> 00:04:22,429 line:-2
are either specified at the call-site
or inferred by the compiler.


78
00:04:23,096 --> 00:04:25,732 line:-1
In this case, Element is a placeholder


79
00:04:25,799 --> 00:04:28,535 line:-1
for the type of element in the data array,


80
00:04:28,602 --> 00:04:30,170 line:-1
FilterKey is a placeholder


81
00:04:30,237 --> 00:04:33,006 line:-2
for the type of the specific property
on Element


82
00:04:33,073 --> 00:04:35,108 line:-1
that the data will be filtered by,


83
00:04:35,175 --> 00:04:37,244 line:-1
and RowContent is a placeholder


84
00:04:37,311 --> 00:04:40,848 line:-2
for the type of view to be displayed
in each row of the list.


85
00:04:41,415 --> 00:04:44,651 line:-2
Now that I have
these three type parameters,


86
00:04:44,718 --> 00:04:48,188 line:-2
I can use them
in the initializer's parameter list.


87
00:04:48,722 --> 00:04:53,227 line:-2
Each place that a type parameter appears
in the initializer's parameter list


88
00:04:53,293 --> 00:04:57,264 line:-2
is an opportunity to leverage
type inference at the call-site


89
00:04:57,331 --> 00:05:00,634 line:-2
by providing an argument
that gives the compiler a clue


90
00:05:00,701 --> 00:05:03,136 line:-2
about what the type parameter
should be replaced with.


91
00:05:04,071 --> 00:05:07,007 line:-2
We'll see how this works later,
but right now,


92
00:05:07,074 --> 00:05:10,544 line:-2
let's focus on the type of each parameter
as we build up the list.


93
00:05:10,978 --> 00:05:15,148 line:-2
First, FilteredList will be initialized
with the data to map,


94
00:05:15,215 --> 00:05:16,917 line:-1
which is an array of Elements.


95
00:05:18,585 --> 00:05:22,689 line:-2
The next parameter is a specific property
of Element to filter by,


96
00:05:22,756 --> 00:05:25,425 line:-2
which is a KeyPath
with an Element base type


97
00:05:25,492 --> 00:05:27,494 line:-1
and a value type of FilterKey.


98
00:05:28,896 --> 00:05:31,832 line:-2
The next parameter
is the isIncluded closure,


99
00:05:31,899 --> 00:05:34,635 line:-2
which is a function type
taking FilterKey as input


100
00:05:34,701 --> 00:05:36,336 line:-1
and returning Bool.


101
00:05:36,770 --> 00:05:38,539 line:-1
The closure is marked as "escaping"


102
00:05:38,605 --> 00:05:42,009 line:-2
because FilteredList will need
to store this closure in a property.


103
00:05:43,510 --> 00:05:48,182 line:-2
The last parameter is a closure
to map a data element to a view,


104
00:05:48,248 --> 00:05:50,918 line:-2
which is a function type
taking Element as input


105
00:05:50,984 --> 00:05:52,753 line:-1
and returning RowContent.


106
00:05:53,754 --> 00:05:57,424 line:-2
The closure is also marked as "escaping"
because it needs to be stored.


107
00:05:59,359 --> 00:06:02,429 line:-2
Note that this parameter
is marked as a ViewBuilder


108
00:06:02,496 --> 00:06:05,098 line:-1
to enable the SwiftUI DSL syntax


109
00:06:05,165 --> 00:06:07,734 line:-1
in the closure argument at the call-site.


110
00:06:08,402 --> 00:06:12,773 line:-2
The SwiftUI DSL enables you
to declare several child views


111
00:06:12,840 --> 00:06:15,676 line:-2
by listing them out
in the body of the closure,


112
00:06:15,742 --> 00:06:19,112 line:-2
and the ViewBuilder
will collect the child views into a tuple


113
00:06:19,179 --> 00:06:20,948 line:-1
for the parent view to work with.


114
00:06:21,014 --> 00:06:24,117 line:-2
And this is the full initializer
of FilteredList.


115
00:06:24,952 --> 00:06:26,987 line:-1
When a FilteredList is initialized,


116
00:06:27,054 --> 00:06:30,757 line:-2
its type parameters
will be replaced with concrete types.


117
00:06:30,824 --> 00:06:33,026 line:-1
Let's take a look at this initializer


118
00:06:33,093 --> 00:06:36,129 line:-2
side by side with the call-site
in SmoothieList


119
00:06:36,196 --> 00:06:39,266 line:-2
to see how the call-site
leans on type inference.


120
00:06:40,701 --> 00:06:43,237 line:-1
Notice how clean the call-site is.


121
00:06:43,871 --> 00:06:47,274 line:-2
There are no explicit type annotations
written at the call-site,


122
00:06:47,341 --> 00:06:50,844 line:-2
but it still gives the compiler
all of the information it needs


123
00:06:50,911 --> 00:06:54,815 line:-2
to infer concrete types
for each type parameter of FilteredList.


124
00:06:55,883 --> 00:06:57,885 line:-2
Let's see what this call-site
would look like


125
00:06:57,951 --> 00:07:02,189 line:-2
if all of the argument types
were explicitly specified in the code.


126
00:07:02,789 --> 00:07:05,192 line:-1
We'll use placeholders for type parameters


127
00:07:05,259 --> 00:07:09,263 line:-2
to see exactly where type inference
needs to fill in a concrete type.


128
00:07:10,397 --> 00:07:13,901 line:-2
First, the three type parameters
of FilteredList


129
00:07:13,967 --> 00:07:16,970 line:-2
could have been
explicitly specified at the call-site


130
00:07:17,037 --> 00:07:19,706 line:-1
in angle brackets after FilteredList.


131
00:07:21,175 --> 00:07:24,511 line:-2
The type of the first parameter,
which is an array of Elements,


132
00:07:24,578 --> 00:07:27,548 line:-2
could have been specified
using the "as" keyword


133
00:07:27,614 --> 00:07:29,383 line:-1
after the "smoothies" argument.


134
00:07:30,584 --> 00:07:34,121 line:-2
In the second parameter,
Element is the KeyPath base type.


135
00:07:34,888 --> 00:07:38,358 line:-2
This could have been specified
by writing an explicit base type


136
00:07:38,425 --> 00:07:41,528 line:-2
in the KeyPath literal
between the backslash and the dot.


137
00:07:42,896 --> 00:07:45,832 line:-2
The KeyPath type as a whole
could have been specified


138
00:07:45,899 --> 00:07:48,702 line:-2
using the "as" keyword
after the KeyPath literal.


139
00:07:50,337 --> 00:07:54,274 line:-2
Next, the type of the isIncluded closure
could have been specified


140
00:07:54,341 --> 00:07:57,010 line:-2
using a type annotation
in the closure body.


141
00:07:58,312 --> 00:07:59,313 line:-1
And finally,


142
00:07:59,379 --> 00:08:02,850 line:-2
the type of the RowContent closure
could have also been specified


143
00:08:02,916 --> 00:08:05,118 line:-2
using a type annotation
in the closure body.


144
00:08:06,987 --> 00:08:09,223 line:-1
Now, the initial source code that I wrote


145
00:08:09,289 --> 00:08:12,559 line:-2
is riddled with a lot of
verbose type annotations,


146
00:08:12,626 --> 00:08:14,027 line:-1
including a bunch of placeholders


147
00:08:14,094 --> 00:08:17,297 line:-2
for types that need to be filled in
by type inference.


148
00:08:18,432 --> 00:08:19,499 line:-1
Instead of figuring out


149
00:08:19,566 --> 00:08:22,870 line:-2
what these placeholders
need to be filled in with manually,


150
00:08:22,936 --> 00:08:24,805 line:-1
I am relying on type inference


151
00:08:24,872 --> 00:08:27,307 line:-2
to figure out exactly
what those types should be.


152
00:08:28,175 --> 00:08:32,479 line:-2
In other words, type inference
helps you write source code faster


153
00:08:32,546 --> 00:08:33,914 line:-1
because you don't need to know


154
00:08:33,981 --> 00:08:36,850 line:-2
exactly how to spell
all of these types in your code.


155
00:08:37,985 --> 00:08:40,520 line:-2
Let's talk about
how the compiler figures out


156
00:08:40,587 --> 00:08:42,923 line:-2
what these placeholders
need to be replaced with.


157
00:08:43,524 --> 00:08:46,727 line:-2
You can think of type inference
like a puzzle.


158
00:08:46,793 --> 00:08:49,263 line:-2
The type inference algorithm
solves the puzzle


159
00:08:49,329 --> 00:08:53,433 line:-2
by filling in the missing pieces
using clues from the source code.


160
00:08:55,269 --> 00:08:57,137 line:-1
Filling in one piece of the puzzle


161
00:08:57,204 --> 00:09:01,008 line:-2
can also uncover more clues
about the remaining pieces.


162
00:09:03,243 --> 00:09:06,246 line:-2
Let's see if we can
solve this puzzle together,


163
00:09:06,313 --> 00:09:08,048 line:-1
using clues from the source code


164
00:09:08,115 --> 00:09:11,652 line:-2
just like the compiler does for us
with type inference.


165
00:09:12,486 --> 00:09:17,157 line:-2
First, the "smoothies" argument
could tell us what to fill in for Element,


166
00:09:17,224 --> 00:09:20,627 line:-2
and we know that "smoothies"
is a property which already has a type.


167
00:09:21,495 --> 00:09:22,729 line:-1
Using QuickHelp,


168
00:09:22,796 --> 00:09:26,266 line:-2
we can see that the property
is an array of "Smoothie" elements,


169
00:09:26,333 --> 00:09:28,702 line:-2
so Element can be filled in
with "Smoothie."


170
00:09:30,904 --> 00:09:34,341 line:-2
Now that we have filled in
one of the Element placeholders,


171
00:09:34,408 --> 00:09:37,244 line:-2
we can replace
all of the other Element placeholders


172
00:09:37,311 --> 00:09:39,246 line:-1
with that same "Smoothie" type.


173
00:09:40,981 --> 00:09:43,684 line:-2
Now, filling in
the other Element placeholders


174
00:09:43,750 --> 00:09:47,187 line:-2
uncovered a clue
for the concrete type of FilterKey


175
00:09:47,788 --> 00:09:50,123 line:-2
because now we know
that the KeyPath literal


176
00:09:50,190 --> 00:09:52,259 line:-1
is referring to Smoothie.title.


177
00:09:53,660 --> 00:09:57,598 line:-2
Using QuickHelp again, we can see
that Smoothie.title is a string,


178
00:09:58,599 --> 00:10:00,968 line:-2
so FilterKey can be
filled in with "String."


179
00:10:01,802 --> 00:10:04,037 line:-1
And now that we know what FilterKey is,


180
00:10:04,104 --> 00:10:08,208 line:-2
the other FilterKey placeholders
can also be replaced with "String."


181
00:10:10,777 --> 00:10:14,047 line:-2
The last piece of the puzzle
is RowContent,


182
00:10:14,114 --> 00:10:17,618 line:-2
which is the return type
of the trailing ViewBuilder closure.


183
00:10:19,319 --> 00:10:22,990 line:-2
Since this closure
only has one view in the body,


184
00:10:23,056 --> 00:10:26,260 line:-2
the ViewBuilder will return
the single child view,


185
00:10:26,326 --> 00:10:28,729 line:-1
which has type SmoothieRowView.


186
00:10:29,663 --> 00:10:33,433 line:-2
And once again,
now that we know what RowContent is,


187
00:10:33,500 --> 00:10:37,337 line:-2
the last placeholder can also be replaced
with SmoothieRowView.


188
00:10:38,238 --> 00:10:41,775 line:-2
And with that,
we've solved the last piece of the puzzle.


189
00:10:42,476 --> 00:10:46,880 line:-2
This is the strategy that the compiler
uses to infer types throughout your code.


190
00:10:47,548 --> 00:10:51,885 line:-2
The code that you write
provides clues for the compiler to use.


191
00:10:51,952 --> 00:10:55,689 line:-2
And each step of the algorithm
uncovers more information


192
00:10:55,756 --> 00:10:57,624 line:-1
for subsequent steps to use.


193
00:10:58,458 --> 00:11:02,229 line:-2
However, it's possible
for one of the clues in the source code


194
00:11:02,296 --> 00:11:05,799 line:-2
to cause the compiler
to fill in one of the placeholders


195
00:11:05,866 --> 00:11:08,869 line:-2
with a concrete type that doesn't fit
with the rest of the puzzle.


196
00:11:09,736 --> 00:11:13,307 line:-2
If one of the pieces doesn't fit
and the puzzle can't be solved,


197
00:11:13,373 --> 00:11:16,410 line:-2
it means that there's an error
in the source code.


198
00:11:17,077 --> 00:11:21,315 line:-2
Let's talk about how the compiler modifies
its type inference strategy


199
00:11:21,381 --> 00:11:24,451 line:-2
to solve the puzzle
in the presence of source code errors.


200
00:11:25,152 --> 00:11:28,322 line:-2
Then, we'll take a look
at how you can utilize your tools


201
00:11:28,388 --> 00:11:30,858 line:-1
to understand and fix those errors.


202
00:11:31,825 --> 00:11:36,029 line:-2
Let's rewind back to where the compiler
inferred the concrete type for FilterKey.


203
00:11:36,864 --> 00:11:38,799 line:-1
Remember that, in the previous step,


204
00:11:39,266 --> 00:11:43,170 line:-2
the compiler inferred Smoothie
as the key-path base type,


205
00:11:43,237 --> 00:11:47,407 line:-2
and it used this information to figure out
the concrete type for FilterKey


206
00:11:47,474 --> 00:11:49,977 line:-1
by looking up the type of Smoothie.title.


207
00:11:51,311 --> 00:11:52,746 line:-1
If I had made the mistake


208
00:11:52,813 --> 00:11:55,983 line:-2
of using the wrong property
in the key-path literal,


209
00:11:56,617 --> 00:11:59,887 line:-2
the compiler would have tried
to infer the type of FilterKey


210
00:11:59,953 --> 00:12:02,356 line:-1
to be the type of that incorrect property,


211
00:12:02,422 --> 00:12:04,291 line:-1
which in this case is Bool.


212
00:12:05,359 --> 00:12:09,796 line:-2
Then, it would continue to fill in
the other FilterKey placeholders


213
00:12:09,863 --> 00:12:11,865 line:-1
with that same incorrect type.


214
00:12:12,866 --> 00:12:16,336 line:-2
Now, if we look
at how this Bool type is used


215
00:12:16,403 --> 00:12:21,108 line:-2
in the isIncluded closure,
it's clear that this piece doesn't fit


216
00:12:21,175 --> 00:12:24,244 line:-2
because Bool doesn't have any method
called hasSubstring.


217
00:12:24,811 --> 00:12:28,182 line:-2
So, the compiler needs to report
what went wrong.


218
00:12:29,516 --> 00:12:33,420 line:-2
Making mistakes
in the code that we write is inevitable,


219
00:12:33,487 --> 00:12:36,723 line:-2
and programming languages
and their tools must be designed


220
00:12:36,790 --> 00:12:39,793 line:-1
to account for our limitations as humans.


221
00:12:40,294 --> 00:12:43,630 line:-2
The Swift compiler is designed
to catch these mistakes


222
00:12:43,697 --> 00:12:47,134 line:-2
by integrating error tracking
into the type inference algorithm


223
00:12:47,201 --> 00:12:49,536 line:-1
to use later on in error messages.


224
00:12:50,170 --> 00:12:51,772 line:-1
During type inference,


225
00:12:51,839 --> 00:12:56,043 line:-2
the compiler will record information
about any errors it encounters.


226
00:12:56,743 --> 00:12:59,780 line:-1
Then, the compiler uses heuristics


227
00:12:59,847 --> 00:13:03,150 line:-2
to fix errors
in order to continue type inference.


228
00:13:04,184 --> 00:13:06,153 line:-1
Once type inference is done,


229
00:13:06,220 --> 00:13:09,356 line:-2
the compiler will report
all of the errors it collected,


230
00:13:09,423 --> 00:13:11,091 line:-1
often with actionable fix-its


231
00:13:11,158 --> 00:13:14,027 line:-2
to automatically fix the error
in the source code


232
00:13:14,094 --> 00:13:17,598 line:-2
or with notes
about concrete types the compiler inferred


233
00:13:17,664 --> 00:13:19,299 line:-1
that might have led to the error.


234
00:13:19,933 --> 00:13:23,203 line:-2
Integrated error tracking was introduced
for many error messages


235
00:13:23,270 --> 00:13:26,139 line:-1
in Swift 5.2 in Xcode 11.4,


236
00:13:26,807 --> 00:13:29,376 line:-1
and in Swift 5.3 and Xcode 12,


237
00:13:29,443 --> 00:13:34,314 line:-2
the compiler uses this new strategy
for all error messages in expressions.


238
00:13:34,948 --> 00:13:38,051 line:-1
Now, we have all had frustrating moments


239
00:13:38,118 --> 00:13:40,687 line:-2
when trying to fix compiler errors
in our code.


240
00:13:41,288 --> 00:13:44,458 line:-2
But error messages are designed
to be like a pair programmer


241
00:13:44,525 --> 00:13:46,226 line:-1
that is built into the compiler


242
00:13:46,293 --> 00:13:49,062 line:-2
to catch your mistakes
and help you fix them,


243
00:13:49,129 --> 00:13:52,533 line:-2
rather than allowing you to continue on
with that error in your code.


244
00:13:53,600 --> 00:13:57,037 line:-2
Let's jump over to Xcode
to see how to work with these tools


245
00:13:57,104 --> 00:13:59,840 line:-1
to fix errors while writing Swift code.


246
00:14:00,641 --> 00:14:04,311 line:-2
Before writing any code,
I'm going to open up the Xcode menu


247
00:14:04,978 --> 00:14:07,781 line:-2
under behaviors,
and click on Edit Behaviors.


248
00:14:08,916 --> 00:14:11,685 line:-2
I'm going to add a behavior
for when the build fails


249
00:14:11,752 --> 00:14:14,388 line:-2
to automatically show me
the issue navigator.


250
00:14:15,088 --> 00:14:18,125 line:-2
Now, I will see all of the errors
across my project


251
00:14:18,192 --> 00:14:20,327 line:-1
each time my project fails to build.


252
00:14:21,195 --> 00:14:24,831 line:-2
Here, were looking at
the current implementation of SmoothieList


253
00:14:24,898 --> 00:14:26,600 line:-1
and its preview.


254
00:14:26,667 --> 00:14:29,169 line:-2
I've already added FilteredList
to my project


255
00:14:29,236 --> 00:14:31,738 line:-2
which you can see
in the project navigator.


256
00:14:32,439 --> 00:14:35,542 line:-2
But before I replace List
with FilteredList,


257
00:14:35,609 --> 00:14:38,645 line:-2
I need to add a search field
above the list.


258
00:14:39,046 --> 00:14:42,816 line:-2
I've already added the State property
to store the user's search phrase.


259
00:14:43,517 --> 00:14:47,187 line:-2
So now, I'm going to add a TextField
above the list in the VStack.


260
00:14:50,123 --> 00:14:52,593 line:-2
I want the title of the text field
to be "Search"


261
00:14:52,659 --> 00:14:54,928 line:-1
and I'll pass in the search phrase.


262
00:14:54,995 --> 00:14:59,032 line:-2
And now I'm going to build using Command+B
to make sure I haven't made any mistakes.


263
00:15:00,133 --> 00:15:04,037 line:-2
Notice that there is now a compiler error
on the line of code that I just added.


264
00:15:05,172 --> 00:15:07,174 line:-1
I can expand the error by clicking on it.


265
00:15:08,442 --> 00:15:11,712 line:0
And it looks like I used
an argument whose type,


266
00:15:11,778 --> 00:15:14,014 line:0
which is "String," isn't compatible


267
00:15:14,081 --> 00:15:17,951 line:0
with the expected parameter type
of this TextField initializer,


268
00:15:18,018 --> 00:15:19,419 line:0
which is binding.


269
00:15:20,020 --> 00:15:21,021 line:-1
I made the mistake


270
00:15:21,088 --> 00:15:24,791 line:-2
of passing the search field value
rather than its binding


271
00:15:24,858 --> 00:15:26,927 line:-2
and the Swift compiler
was able to figure out


272
00:15:26,994 --> 00:15:29,463 line:-2
that the binding does
have a compatible type,


273
00:15:29,530 --> 00:15:32,633 line:0
providing me with a fix-it
to refer to the binding instead,


274
00:15:32,699 --> 00:15:34,034 line:0
using dollar sign.


275
00:15:35,569 --> 00:15:39,673 line:0
Next, I want replace this List
with my new FilteredList.


276
00:15:41,341 --> 00:15:44,344 line:0
And I'm going to build again
to make sure I haven't made any mistakes.


277
00:15:46,113 --> 00:15:48,081 line:-1
But it looks like there's another error.


278
00:15:48,882 --> 00:15:50,184 line:-1
If I expand the error,


279
00:15:50,584 --> 00:15:53,187 line:-2
I can see it's about
Smoothie not conforming


280
00:15:53,253 --> 00:15:56,557 line:-2
to the identifiable requirement
of FilteredList.


281
00:15:57,090 --> 00:15:58,825 line:-1
And this might be a little confusing


282
00:15:58,892 --> 00:16:02,563 line:-2
because "Identifiable" isn't written
anywhere in this part of the code.


283
00:16:03,730 --> 00:16:06,600 line:-2
Notice that on the left,
in the issue navigator,


284
00:16:06,667 --> 00:16:09,536 line:-2
there is a compiler note attached
to this error.


285
00:16:10,971 --> 00:16:13,173 line:-1
With the new integrated error tracking,


286
00:16:13,240 --> 00:16:17,878 line:-2
the compiler records information about
what was happening during type inference


287
00:16:17,945 --> 00:16:19,980 line:-1
when this error was encountered,


288
00:16:20,047 --> 00:16:22,749 line:-2
which allows the compiler
to leave breadcrumbs


289
00:16:22,816 --> 00:16:25,652 line:-2
that direct you to look
at other parts of your code


290
00:16:25,719 --> 00:16:27,254 line:-1
through compiler notes.


291
00:16:27,321 --> 00:16:29,556 line:-1
These notes can help you connect the dots


292
00:16:29,623 --> 00:16:32,326 line:-2
between the error that you see
in your source editor


293
00:16:32,392 --> 00:16:35,462 line:-2
and essential information
from other files in your project.


294
00:16:35,929 --> 00:16:40,000 line:-2
And you'll be seeing a lot more notes
in Swift 5.3 and Xcode 12.


295
00:16:40,934 --> 00:16:44,605 line:-2
I want to view this note
side by side with the error,


296
00:16:44,671 --> 00:16:46,440 line:-1
so I'm going to close the canvas,


297
00:16:46,507 --> 00:16:49,409 line:-2
which I can do
using the shortcut cmd+enter.


298
00:16:50,244 --> 00:16:53,080 line:-2
Now, I'm going to hold down
Option and Shift


299
00:16:53,146 --> 00:16:56,149 line:-2
while clicking on the note
to show the destination chooser.


300
00:16:57,384 --> 00:16:59,253 line:-1
And now I can arrow over to the right


301
00:16:59,319 --> 00:17:02,022 line:-2
and hit Enter
to open the file in a new editor.


302
00:17:03,156 --> 00:17:06,393 line:-2
Now, we are looking
at the FilteredList declaration.


303
00:17:06,960 --> 00:17:09,463 line:-1
And if I expand the note, it points out


304
00:17:09,530 --> 00:17:12,665 line:-2
that the compiler inferred
the concrete type of Element


305
00:17:12,733 --> 00:17:13,733 line:-1
to be Smoothie.


306
00:17:14,768 --> 00:17:18,405 line:-2
At this declaration,
I can see that Element or Smoothie


307
00:17:18,472 --> 00:17:21,208 line:-1
is required to conform to "Identifiable."


308
00:17:22,476 --> 00:17:25,612 line:-2
I must have forgotten
to add this conformance to Smoothie


309
00:17:25,679 --> 00:17:28,248 line:-1
before trying to use it in FilteredList.


310
00:17:28,315 --> 00:17:32,753 line:-2
In the editor on the left,
I'm going to cmd+click on Smoothie,


311
00:17:32,819 --> 00:17:34,721 line:-1
and use Jump to Definition.


312
00:17:35,155 --> 00:17:38,992 line:-2
And here I can add
the required conformance to Identifiable.


313
00:17:39,059 --> 00:17:42,963 line:-2
Smoothie already has
a property called "id."


314
00:17:43,030 --> 00:17:47,534 line:-2
So the requirements of the identifiable
protocol are already implemented.


315
00:17:47,601 --> 00:17:50,671 line:-2
But just to double-check,
I'm going to build one more time


316
00:17:50,737 --> 00:17:53,173 line:-1
to make sure that this does fix the error.


317
00:17:54,241 --> 00:17:56,610 line:-1
And it looks like we're error free again.


318
00:17:56,677 --> 00:18:00,013 line:-1
Now, let's close the editor on the right,


319
00:18:00,080 --> 00:18:03,283 line:-2
and hit the Back button
to go back to SmoothieList.


320
00:18:03,350 --> 00:18:05,419 line:-1
Now, if I use QuickHelp


321
00:18:05,485 --> 00:18:08,622 line:-2
on one of the arguments
to the FilteredList initializer,


322
00:18:08,689 --> 00:18:12,960 line:-2
I will be able to see the concrete type
that was inferred by the compiler.


323
00:18:13,026 --> 00:18:16,697 line:-2
Let's try using QuickHelp on
the key-path literal using option+click.


324
00:18:19,199 --> 00:18:22,169 line:-2
Just like we saw
when solving the type inference puzzle,


325
00:18:22,236 --> 00:18:25,472 line:-2
the compiler inferred the type of title
to be a string


326
00:18:25,906 --> 00:18:28,609 line:-1
based on the inferred key-path base type.


327
00:18:29,343 --> 00:18:33,113 line:-2
And remember that the compiler inferred
the base type to be Smoothie


328
00:18:33,180 --> 00:18:36,183 line:-2
based on the Smoothie's argument
on the line above.


329
00:18:37,251 --> 00:18:41,388 line:-2
Before we finish up, I wanna make sure
the filtering works using the canvas.


330
00:18:41,922 --> 00:18:45,792 line:-2
I can turn the canvas back on using
the key binding cmd+option+enter.


331
00:18:47,928 --> 00:18:50,197 line:-1
And I'm going to add a another preview


332
00:18:50,264 --> 00:18:53,734 line:-2
in the preview provider
that has some text in the search bar.


333
00:18:55,502 --> 00:18:58,005 line:-1
Now, the preview provider is iterating


334
00:18:58,071 --> 00:19:00,541 line:-2
over all of the search phrases
that I want to test,


335
00:19:01,041 --> 00:19:04,411 line:-2
which in this case
are empty string and the string "Berry."


336
00:19:04,912 --> 00:19:06,780 line:-1
And if I refresh the preview,


337
00:19:06,847 --> 00:19:10,083 line:-2
using cmd+option+P,
I can see that it works.


338
00:19:10,984 --> 00:19:14,621 line:-2
I can see the second preview
with "Berry" typed into the search bar


339
00:19:14,688 --> 00:19:18,325 line:-2
and only the Smoothies with Berry
in their title are showing in the list.


340
00:19:19,560 --> 00:19:22,863 line:-2
When I made typos
and other mistakes in my code,


341
00:19:22,930 --> 00:19:26,400 line:-2
error messages from the compiler
were actionable and informative.


342
00:19:27,201 --> 00:19:30,637 line:-2
Furthermore, the new integrated
error tracking in the compiler


343
00:19:30,704 --> 00:19:35,008 line:-2
allows the compiler to gather
a lot more information about failures,


344
00:19:35,676 --> 00:19:37,945 line:-1
which the compiler presents through notes.


345
00:19:38,912 --> 00:19:40,681 line:-1
These are just a few of the improvements


346
00:19:40,747 --> 00:19:44,451 line:-2
that you'll find using Swift 5.3
in Xcode 12.


347
00:19:44,518 --> 00:19:46,720 line:-1
During this session, we learned


348
00:19:46,787 --> 00:19:50,257 line:-2
that SwiftUI code relies heavily
on type inference


349
00:19:50,324 --> 00:19:53,393 line:-2
when interfaces are composed
of reusable views.


350
00:19:54,194 --> 00:19:59,766 line:-2
Next, we saw how type inference fills in
incidental details that are omitted,


351
00:19:59,833 --> 00:20:04,104 line:-2
by figuring out those details
using clues in the source code.


352
00:20:04,171 --> 00:20:08,175 line:-2
Finally, we learned about
how the compiler integrates error tracking


353
00:20:08,242 --> 00:20:12,246 line:-2
into the type inference algorithm
to record more information


354
00:20:12,312 --> 00:20:14,681 line:-1
and leave breadcrumbs for error messages


355
00:20:14,748 --> 00:20:17,885 line:-2
which help you understand
and fix mistakes.


356
00:20:17,951 --> 00:20:20,954 line:-2
To learn more,
you can read the Swift blog post


357
00:20:21,021 --> 00:20:23,757 line:-2
about the compiler's
new integrated error tracking


358
00:20:23,824 --> 00:20:25,926 line:-1
called the new diagnostics architecture.


359
00:20:26,860 --> 00:20:29,463 line:-2
To learn more
about building SwiftUI views,


360
00:20:29,530 --> 00:20:33,800 line:-2
I recommend following a SwiftUI tutorial
on developer.apple.com.


361
00:20:34,501 --> 00:20:38,839 line:-2
Finally, check out Swift Generics
from WWDC 2018


362
00:20:38,906 --> 00:20:41,675 line:-1
for an in-depth look at generics in Swift.


363
00:20:42,809 --> 00:20:44,411 line:-1
Thank you for watching.

