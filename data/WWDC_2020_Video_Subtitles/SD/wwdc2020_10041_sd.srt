1
00:00:00,167 --> 00:00:01,734 line:-1
[chimes]


2
00:00:03,737 --> 00:00:06,840 line:-1
Hello and welcome to WWDC.


3
00:00:08,609 --> 00:00:12,145 line:0
My name is Matt Ricketson,
and I work on the SwiftUI team.


4
00:00:12,212 --> 00:00:15,148 line:0
Later on,
I'll be joined by my colleague, Taylor.


5
00:00:15,883 --> 00:00:18,685 line:-1
Last year we introduced SwiftUI,


6
00:00:18,752 --> 00:00:22,523 line:-2
a powerful new way
to build great user interfaces


7
00:00:22,589 --> 00:00:24,157 line:-1
on all of Apple's platforms.


8
00:00:24,725 --> 00:00:26,360 line:-1
We're incredibly excited to show you


9
00:00:26,426 --> 00:00:29,463 line:-2
what's new
in SwiftUI's second major release.


10
00:00:30,731 --> 00:00:35,335 line:-2
As you'll soon find out,
there are a ton of new features this year,


11
00:00:35,402 --> 00:00:37,704 line:-2
much more than we can cover
in just one talk.


12
00:00:37,771 --> 00:00:40,040 line:-1
But we'll try to cover as much as we can,


13
00:00:40,107 --> 00:00:42,643 line:-2
and along the way,
we'll let you know about other sessions


14
00:00:42,709 --> 00:00:44,545 line:-1
that you can check out to learn more.


15
00:00:44,945 --> 00:00:48,448 line:-2
First up, we'll introduce
the new app and widget APIs.


16
00:00:49,516 --> 00:00:53,220 line:-2
We'll also talk about improvements
to displaying lists and collections.


17
00:00:54,321 --> 00:00:58,959 line:-2
We'll introduce new multi-platform APIs
for toolbars and controls...


18
00:00:59,860 --> 00:01:02,529 line:-2
and also show you
new kinds of visual effects


19
00:01:02,596 --> 00:01:03,997 line:-1
for styling your apps.


20
00:01:05,065 --> 00:01:08,235 line:-2
Finally, we'll discuss new ways
for your SwiftUI apps


21
00:01:08,302 --> 00:01:10,771 line:-1
to integrate with the rest of the system.


22
00:01:11,238 --> 00:01:13,507 line:-1
But let's start with apps and widgets.


23
00:01:14,074 --> 00:01:19,179 line:-2
For the first time, you can build
an entire app using just SwiftUI


24
00:01:19,246 --> 00:01:24,985 line:-2
instead of embedding your SwiftUI code
within a UIKit, AppKit or WatchKit app.


25
00:01:25,052 --> 00:01:26,086 line:-1
Let's take a look.


26
00:01:26,153 --> 00:01:30,891 line:-2
What you see here is a complete SwiftUI
app, a simple "Hello, world!" example.


27
00:01:32,025 --> 00:01:35,495 line:-2
That's right.
This is a 100% functioning app.


28
00:01:35,562 --> 00:01:37,431 line:-1
You can build and run this code.


29
00:01:38,432 --> 00:01:40,234 line:-1
In fact, it's so concise


30
00:01:40,300 --> 00:01:43,637 line:-2
that you can fit the entire app
into just 140 characters.


31
00:01:43,704 --> 00:01:45,772 line:-1
But don't let this deceive you.


32
00:01:45,839 --> 00:01:51,845 line:-2
SwiftUI packs a ton of intelligent,
automatic, but also customizable behavior


33
00:01:51,912 --> 00:01:55,349 line:-2
into a simple and flexible API
for declarative apps.


34
00:01:55,682 --> 00:01:58,051 line:-2
Here I've written an app
for keeping track of the books


35
00:01:58,118 --> 00:01:59,920 line:-1
I'm currently reading in my book club.


36
00:02:00,754 --> 00:02:06,126 line:0
At the bottom, I've written a custom view
to represent my app's main user interface.


37
00:02:06,860 --> 00:02:11,164 line:-2
And at the top, I'm using that view
as the content of my app's main window.


38
00:02:11,832 --> 00:02:16,203 line:-2
The first thing to notice here
is how similar these two declarations are.


39
00:02:16,637 --> 00:02:19,406 line:-1
We designed SwiftUI's new app API


40
00:02:19,473 --> 00:02:22,809 line:-2
to follow the same declarative,
state-driven patterns


41
00:02:22,876 --> 00:02:24,912 line:-1
you're already used to in your view code.


42
00:02:26,313 --> 00:02:29,883 line:-2
In both cases, you define a struct
conforming to a protocol.


43
00:02:30,817 --> 00:02:33,787 line:-2
You can declare data dependencies
using properties,


44
00:02:34,555 --> 00:02:37,524 line:-2
and that data is used
within the body property,


45
00:02:37,591 --> 00:02:42,462 line:-2
which, for both apps and views, defines
their declarative user interface content.


46
00:02:44,097 --> 00:02:46,633 line:-1
However, you may notice one key difference


47
00:02:46,700 --> 00:02:49,670 line:-2
which is the return type
of the app's body property.


48
00:02:49,736 --> 00:02:52,573 line:-1
The body of an app returns a scene,


49
00:02:52,639 --> 00:02:57,611 line:-2
a new concept in SwiftUI that represents
pieces of an app's user interface


50
00:02:57,678 --> 00:03:00,647 line:-2
that can be independently displayed
by the platform.


51
00:03:00,714 --> 00:03:03,884 line:0
We've prepared a whole talk
that goes into more depth


52
00:03:03,951 --> 00:03:06,753 line:0
on what scenes are
and how they relate to apps and views.


53
00:03:08,455 --> 00:03:11,525 line:-2
For now, I just want to focus
on the scene we're using in this app


54
00:03:11,592 --> 00:03:12,893 line:-1
called WindowGroup.


55
00:03:13,660 --> 00:03:18,365 line:-2
That's because WindowGroup is a powerful
example of how scenes in SwiftUI


56
00:03:18,432 --> 00:03:22,669 line:-2
can provide intelligent, multi-platform
functionality out of the box.


57
00:03:24,238 --> 00:03:27,174 line:-2
In our iOS app,
WindowGroup is creating and managing


58
00:03:27,241 --> 00:03:30,477 line:-2
a single full-screen window
for our application.


59
00:03:31,445 --> 00:03:34,781 line:-1
But the same code can also run on watchOS,


60
00:03:34,848 --> 00:03:38,652 line:-1
also managing a single full-screen window.


61
00:03:38,719 --> 00:03:42,589 line:-2
Of course, our watchOS app looks different
than our iOS app,


62
00:03:42,656 --> 00:03:46,293 line:-2
but the core app structure is the same
on both platforms,


63
00:03:46,360 --> 00:03:49,963 line:-2
allowing them to share
a single app declaration.


64
00:03:50,764 --> 00:03:54,935 line:-2
In fact, my app will also work on tvOS
and on the iPad too.


65
00:03:55,602 --> 00:03:58,772 line:-2
And since iPadOS supports
multi-window apps,


66
00:03:58,839 --> 00:04:01,041 line:-2
we get some additional functionality
for free...


67
00:04:02,042 --> 00:04:04,945 line:-2
like being able to create
multiple instances of the app


68
00:04:05,012 --> 00:04:06,680 line:-1
that can appear side-by-side.


69
00:04:08,282 --> 00:04:13,020 line:-2
This also extends to macOS,
which also supports multiple windows.


70
00:04:13,720 --> 00:04:18,024 line:-2
I can create new windows
using the standard command-N shortcut


71
00:04:18,692 --> 00:04:21,995 line:-2
and gather them up
into a single tabbed window.


72
00:04:23,430 --> 00:04:26,967 line:-2
SwiftUI will even automatically add
a new window menu command


73
00:04:27,034 --> 00:04:28,635 line:-1
into my main menu.


74
00:04:29,670 --> 00:04:33,841 line:-2
And all of this is made possible
by this simple app declaration


75
00:04:34,341 --> 00:04:38,111 line:-2
using the new WindowGroup API
to define my interface.


76
00:04:39,479 --> 00:04:42,115 line:-2
SwiftUI supports other types of scenes
as well,


77
00:04:42,182 --> 00:04:46,186 line:-2
which can be composed together,
like views, to build more complex apps.


78
00:04:47,254 --> 00:04:50,123 line:-2
Like the new Settings scene
available on macOS


79
00:04:50,190 --> 00:04:52,459 line:-2
for adding a preferences window
to your Mac app.


80
00:04:53,427 --> 00:04:55,495 line:-2
The Settings scene
will automatically set up


81
00:04:55,562 --> 00:04:58,832 line:-2
the standard preferences command
in the app menu


82
00:04:58,899 --> 00:05:01,235 line:-2
and also give the window
the correct style treatment.


83
00:05:02,636 --> 00:05:06,006 line:-2
SwiftUI's scene APIs
also support document-based apps


84
00:05:06,073 --> 00:05:08,709 line:-2
like this app that I built
for drawing vector shapes.


85
00:05:10,277 --> 00:05:13,080 line:-2
New this year
is the DocumentGroup scene type,


86
00:05:13,146 --> 00:05:18,585 line:-2
which automatically manages opening,
editing and saving document-based scenes,


87
00:05:18,652 --> 00:05:21,889 line:-1
supported on iOS, iPadOS and macOS.


88
00:05:23,090 --> 00:05:28,362 line:-2
On iOS and iPadOS, DocumentGroup will
automatically present a document browser


89
00:05:28,428 --> 00:05:30,464 line:-1
if no other main interface is provided.


90
00:05:31,365 --> 00:05:36,270 line:-2
And on the Mac, DocumentGroup will open
a different window for each new document,


91
00:05:36,336 --> 00:05:41,508 line:-2
and also automatically add commands to
the main menu for common document actions.


92
00:05:43,544 --> 00:05:48,215 line:0
Speaking of menu commands, SwiftUI
lets you add additional commands as well


93
00:05:48,849 --> 00:05:50,851 line:0
using the new commands modifier.


94
00:05:51,985 --> 00:05:55,222 line:0
For example,
here I've added a custom shape menu


95
00:05:55,289 --> 00:05:57,691 line:0
for adding new shapes to the canvas.


96
00:05:57,758 --> 00:06:03,263 line:0
macOS will automatically add custom menus
in the correct section of the main menu


97
00:06:04,231 --> 00:06:06,066 line:0
and will show their keyboard shortcuts


98
00:06:06,133 --> 00:06:09,703 line:0
which we assigned using
the new keyboardShortcut view modifier.


99
00:06:11,305 --> 00:06:15,409 line:-2
Commands API has a lot more to offer
than what we've shown here,


100
00:06:15,475 --> 00:06:18,779 line:-2
such as being able to target commands
based on user focus.


101
00:06:18,846 --> 00:06:20,380 line:-1
It's really fun to work with.


102
00:06:20,447 --> 00:06:23,116 line:-2
You can check out
our reference documentation to learn more.


103
00:06:24,451 --> 00:06:26,787 line:-2
There's a lot more to say
about apps and scenes,


104
00:06:26,854 --> 00:06:31,291 line:0
and we've prepared a few other talks to
help you dig deeper into these new APIs.


105
00:06:32,025 --> 00:06:36,096 line:0
"App Essentials in SwiftUI"
explains how views, scenes and apps


106
00:06:36,163 --> 00:06:37,664 line:0
all work together in more depth.


107
00:06:37,731 --> 00:06:39,867 line:-1
And "Document-Based Apps in SwiftUI"


108
00:06:39,933 --> 00:06:43,570 line:-2
dives deep into how to open
and manage documents in your app.


109
00:06:45,405 --> 00:06:47,207 line:-1
To help you build these new apps,


110
00:06:47,274 --> 00:06:51,411 line:-2
we've also updated
the "new project" experience in Xcode


111
00:06:51,478 --> 00:06:56,283 line:-2
by adding new multi-platform templates
specifically for SwiftUI apps.


112
00:06:57,784 --> 00:07:01,388 line:-2
These new templates are optimized
for multi-platform code,


113
00:07:02,089 --> 00:07:04,858 line:-2
automatically setting up groups
for shared code


114
00:07:04,925 --> 00:07:07,794 line:-2
as well as platform-specific components
and assets.


115
00:07:09,563 --> 00:07:12,566 line:-2
Another part of the project experience
we're extending


116
00:07:12,633 --> 00:07:15,035 line:-2
is how you configure
your app's launch screen.


117
00:07:16,069 --> 00:07:19,773 line:-2
New this year
is the Launch Screen Info.plist key.


118
00:07:20,974 --> 00:07:23,677 line:-2
This allows you to declare
various combinations


119
00:07:23,744 --> 00:07:28,549 line:-2
of standard launch screen components
such as default images, background colors


120
00:07:28,615 --> 00:07:32,085 line:-2
and empty top and bottom bars
like I've configured here.


121
00:07:33,153 --> 00:07:37,057 line:-2
You may already be using a storyboard
for your launch screen,


122
00:07:37,124 --> 00:07:40,127 line:-2
which still works great,
and there's no reason to switch.


123
00:07:40,194 --> 00:07:44,665 line:-2
But for new SwiftUI projects
that otherwise don't use storyboards,


124
00:07:44,731 --> 00:07:47,868 line:-2
Launch Screen configurations
are a simple alternative.


125
00:07:48,569 --> 00:07:53,841 line:-2
Now let's talk about widgets, an exciting
new feature on iOS, iPadOS and macOS.


126
00:07:55,108 --> 00:07:57,945 line:-2
Widgets are built exclusively
with SwiftUI.


127
00:07:59,079 --> 00:08:01,448 line:-1
You build widgets just like apps and views


128
00:08:01,515 --> 00:08:05,452 line:-2
using a custom struct
conforming to the new Widget protocol.


129
00:08:06,420 --> 00:08:09,089 line:-2
You can make many different types
of widgets,


130
00:08:09,156 --> 00:08:13,327 line:-2
like this one that periodically recommends
a new album for me to listen to.


131
00:08:14,328 --> 00:08:17,965 line:-2
Widgets can also be configured with
other kinds of data such as Siri intents.


132
00:08:19,766 --> 00:08:22,903 line:0
There's a lot to cover
when it comes to building widgets,


133
00:08:22,970 --> 00:08:25,739 line:0
and we have several talks
to help you get started.


134
00:08:25,806 --> 00:08:29,943 line:0
I'd recommend watching "Build SwiftUI
Views for Widgets" to learn more.


135
00:08:32,279 --> 00:08:34,615 line:-1
And finally, you can now use SwiftUI


136
00:08:34,681 --> 00:08:37,384 line:-2
to build custom complications
for Apple Watch.


137
00:08:38,150 --> 00:08:42,456 line:-2
You can build a full-color complication
like this weekly coffee chart I made


138
00:08:43,090 --> 00:08:46,593 line:-2
and also customize how it looks
within a tinted watch face,


139
00:08:46,660 --> 00:08:48,929 line:-2
like this cool blue tint
that I like to use.


140
00:08:50,297 --> 00:08:54,434 line:0
To learn more, check out
"Build Complications in SwiftUI,"


141
00:08:54,501 --> 00:08:56,336 line:0
or if you're new
to building complications,


142
00:08:56,403 --> 00:08:59,840 line:0
I'd recommend starting with
"Creating Complications on Apple Watch."


143
00:09:00,474 --> 00:09:04,945 line:-2
Next, let's talk about improvements
to displaying lists and collections.


144
00:09:06,480 --> 00:09:09,349 line:-1
Lists are a vital component of many apps,


145
00:09:09,416 --> 00:09:13,287 line:-2
often representing the primary interface
that users interact with.


146
00:09:14,421 --> 00:09:17,891 line:-2
In this release,
lists are gaining some great new features.


147
00:09:18,692 --> 00:09:22,129 line:-2
I'm especially excited
about the new support for outlines.


148
00:09:23,096 --> 00:09:28,435 line:-2
Regular lists enable concise declarations
of dynamic, data-driven content.


149
00:09:29,436 --> 00:09:32,873 line:-2
By providing a children key path
to its initializer,


150
00:09:32,940 --> 00:09:36,109 line:-2
a list can now build out
recursive outlines of content.


151
00:09:36,710 --> 00:09:39,513 line:-2
By default,
this shows up using the expected


152
00:09:39,580 --> 00:09:42,316 line:-1
system-standard styling on macOS...


153
00:09:43,150 --> 00:09:45,652 line:-1
and on iOS and iPadOS.


154
00:09:46,587 --> 00:09:49,890 line:-2
We hope that easy-to-use outlines
can help reduce the need


155
00:09:49,957 --> 00:09:53,060 line:-2
for disruptive
push-and-pop navigation patterns


156
00:09:53,126 --> 00:09:54,628 line:-1
within content-focused apps.


157
00:09:55,229 --> 00:09:59,933 line:-2
Along with lists and outlines, it's also
common to show collections of content


158
00:10:00,000 --> 00:10:03,103 line:-2
in other kinds
of scrollable layouts such as grids.


159
00:10:04,104 --> 00:10:08,642 line:-2
This year, SwiftUI is adding support
for lazy-loading grid layouts


160
00:10:08,709 --> 00:10:11,011 line:0
which can be composed with scroll views


161
00:10:11,078 --> 00:10:13,780 line:0
to create smooth-scrolling grids
of content.


162
00:10:15,215 --> 00:10:19,853 line:0
Grids are powerful layouts that support
a variety of different configurations,


163
00:10:19,920 --> 00:10:23,757 line:0
such as adapting the number of columns
to fit the available space


164
00:10:23,824 --> 00:10:26,994 line:0
like we see here
in both landscape and portrait.


165
00:10:28,862 --> 00:10:33,901 line:0
Or forcing a fixed number of columns that
can each have their own sizing parameters,


166
00:10:33,967 --> 00:10:37,738 line:0
like this example that sticks
with four columns in every orientation.


167
00:10:38,372 --> 00:10:43,010 line:-2
And, of course, SwiftUI also supports
horizontally scrolling grids.


168
00:10:43,443 --> 00:10:46,046 line:-1
We're also exposing lazy-loading versions


169
00:10:46,113 --> 00:10:50,150 line:-2
of the existing
vertical and horizontal stack layouts,


170
00:10:50,217 --> 00:10:53,153 line:-2
which are great for building
custom scrollable layouts


171
00:10:53,220 --> 00:10:55,789 line:-1
like this asymmetric gallery of images.


172
00:10:55,856 --> 00:10:57,291 line:-1
Let's take a closer look.


173
00:10:58,792 --> 00:11:03,530 line:-2
Here we're using a lazy vertical stack
containing all of our gallery content.


174
00:11:04,698 --> 00:11:09,036 line:-2
We're also using the new view
builder support for switch statements,


175
00:11:09,102 --> 00:11:14,041 line:-2
allowing us to easily alternate between
different image layouts within the stack


176
00:11:14,741 --> 00:11:17,377 line:-2
such as the single large image
shown at the top...


177
00:11:18,478 --> 00:11:20,881 line:-1
the asymmetric groups of three images...


178
00:11:21,882 --> 00:11:24,084 line:-1
and the shorter rows of smaller images.


179
00:11:24,985 --> 00:11:29,590 line:-2
Together, composed with
a lazy-loading vertically scrolling stack,


180
00:11:29,656 --> 00:11:31,391 line:-1
they form a seamless gallery.


181
00:11:31,458 --> 00:11:35,729 line:-2
Lists and collections
are powerful features of SwiftUI,


182
00:11:35,796 --> 00:11:39,566 line:-2
and we've only scratched the surface
of what they're capable of in this talk.


183
00:11:39,633 --> 00:11:42,603 line:0
To learn more,
you should really check out our talk


184
00:11:42,669 --> 00:11:45,339 line:0
on stacks, grids and outlines.


185
00:11:45,939 --> 00:11:50,277 line:-2
And now to talk about toolbars and
controls, I'll hand things over to Taylor.


186
00:11:50,344 --> 00:11:51,678 line:-1
Thank you, Matt.


187
00:11:51,745 --> 00:11:53,413 line:-1
It is so cool to see how easy it is


188
00:11:53,480 --> 00:11:56,817 line:-2
to have our app's model come to life
using SwiftUI


189
00:11:56,884 --> 00:12:00,387 line:-2
with things like the new DocumentGroup
and new collection views.


190
00:12:00,454 --> 00:12:03,724 line:-2
Now let's jump into
the powerful toolbar support in SwiftUI


191
00:12:03,790 --> 00:12:06,593 line:-1
and new ways to customize controls.


192
00:12:07,227 --> 00:12:11,565 line:-2
Toolbars and apps across our platforms
have some amazing new updates,


193
00:12:11,632 --> 00:12:14,434 line:-2
from their beautiful new look
in macOS Big Sur


194
00:12:14,501 --> 00:12:17,070 line:-1
to the updated iPad system experience


195
00:12:17,137 --> 00:12:19,873 line:-1
to the primary actions in watchOS.


196
00:12:19,940 --> 00:12:23,443 line:-2
And this year, SwiftUI has a new API
for constructing all of these


197
00:12:24,077 --> 00:12:26,013 line:-1
using the new toolbar modifier.


198
00:12:27,080 --> 00:12:31,251 line:-2
Toolbar items consists of the same views
you use throughout the rest of SwiftUI,


199
00:12:31,318 --> 00:12:32,886 line:-1
in this case, a button.


200
00:12:33,921 --> 00:12:36,423 line:-2
They'll be placed in idiomatic locations
by default


201
00:12:36,490 --> 00:12:40,027 line:-2
but can be explicitly customized
through the use of toolbar items.


202
00:12:40,794 --> 00:12:44,565 line:-2
In this case, the primary action
is the default placement on watchOS,


203
00:12:44,631 --> 00:12:46,500 line:-1
but there are other placements as well.


204
00:12:47,234 --> 00:12:50,838 line:-2
For instance, confirmation
and cancellation modal actions.


205
00:12:50,904 --> 00:12:53,440 line:-1
These are examples of semantic placements


206
00:12:53,507 --> 00:12:57,377 line:-2
where you're describing to SwiftUI
the role that these toolbar items have,


207
00:12:57,444 --> 00:13:00,280 line:-2
and SwiftUI automatically figures out
the right spot.


208
00:13:01,114 --> 00:13:06,253 line:0
Another example is the principal placement
to give an item prominence in your app,


209
00:13:06,320 --> 00:13:07,855 line:0
as you see here on iPad...


210
00:13:08,989 --> 00:13:10,490 line:0
and on macOS.


211
00:13:11,458 --> 00:13:13,493 line:0
Toolbar items
can have positional placements


212
00:13:13,560 --> 00:13:16,363 line:0
where you want to have
that extra level of design control


213
00:13:16,430 --> 00:13:18,332 line:0
over where your items are placed.


214
00:13:19,099 --> 00:13:24,037 line:-2
Particularly in narrow size classes, it's
common to have items in bottom toolbars,


215
00:13:24,104 --> 00:13:28,876 line:-2
and the literal bottomBar placement
allows you to explicitly specify that.


216
00:13:29,843 --> 00:13:32,546 line:-2
You've probably noticed
in a few of these examples


217
00:13:32,613 --> 00:13:35,382 line:-1
the use of a new label view in SwiftUI.


218
00:13:35,849 --> 00:13:37,851 line:-1
Let's take a closer look at that.


219
00:13:37,918 --> 00:13:41,688 line:-2
This is a combined representation
of a title and an icon


220
00:13:41,755 --> 00:13:43,690 line:-1
that can be used to label UI elements.


221
00:13:44,391 --> 00:13:48,462 line:-2
Here we have a string
used as a localization key for its title


222
00:13:48,529 --> 00:13:51,365 line:-2
and the name of a system image,
or SF Symbol.


223
00:13:51,932 --> 00:13:54,701 line:0
And this year, not only
are symbols available on macOS,


224
00:13:54,768 --> 00:13:58,005 line:0
but there are hundreds of new ones
available for your apps to use.


225
00:13:58,672 --> 00:14:01,475 line:-2
The "SF Symbols 2.0" talk
goes into more detail


226
00:14:01,542 --> 00:14:04,244 line:-2
on all the new enhancements
to symbols this year.


227
00:14:04,678 --> 00:14:07,014 line:-2
This construction of Label
is actually a convenience


228
00:14:07,080 --> 00:14:08,582 line:-1
for its full form,


229
00:14:08,649 --> 00:14:11,652 line:-2
which is using any view
for that title and icon.


230
00:14:12,586 --> 00:14:16,223 line:-2
And its power comes from the semantics
it provides for that title and icon,


231
00:14:16,823 --> 00:14:20,027 line:-2
so they can be treated appropriately
based on where they're used.


232
00:14:20,727 --> 00:14:22,896 line:-1
So, returning to our toolbar example,


233
00:14:23,530 --> 00:14:24,998 line:-1
in the context of a toolbar,


234
00:14:25,566 --> 00:14:27,534 line:-1
by default it'll just be the icon


235
00:14:27,601 --> 00:14:29,603 line:-1
visually presented as that button's label


236
00:14:30,070 --> 00:14:32,506 line:-2
and the title used
for accessibility purposes.


237
00:14:33,841 --> 00:14:36,243 line:-1
This behavior extends from toolbars,


238
00:14:36,310 --> 00:14:38,345 line:-1
to context menus, to lists.


239
00:14:39,246 --> 00:14:42,449 line:-2
Now, this list contains
multiple rows of labels.


240
00:14:42,516 --> 00:14:46,186 line:-2
The titles are perfectly aligned,
regardless of image size


241
00:14:46,253 --> 00:14:50,757 line:-2
and the power of Labels really shines
when using different dynamic type sizes.


242
00:14:50,824 --> 00:14:54,294 line:-2
This is showing the layout
for the default large size category


243
00:14:54,361 --> 00:14:57,197 line:-1
and as that changes to extra extra large,


244
00:14:57,264 --> 00:15:00,434 line:-2
both the icon and title
update automatically,


245
00:15:00,501 --> 00:15:04,471 line:-2
including nicely reflowing the text
and growing the list rows.


246
00:15:05,305 --> 00:15:09,376 line:-2
An even further specialization happens
at the larger accessibility sizes.


247
00:15:10,377 --> 00:15:13,046 line:-2
At those, the labels
have updated text wrapping


248
00:15:13,113 --> 00:15:17,050 line:-2
around the icon to maximize
the amount of visible text.


249
00:15:17,918 --> 00:15:20,487 line:-2
Now, with contexts
like toolbars having clean,


250
00:15:20,554 --> 00:15:22,789 line:-1
icon-only styles of labeling elements,


251
00:15:23,323 --> 00:15:26,026 line:-2
providing additional help
or context for those


252
00:15:26,093 --> 00:15:27,895 line:-1
is more important than ever.


253
00:15:28,896 --> 00:15:31,865 line:-2
With the new help modifier,
you can attach these descriptions


254
00:15:31,932 --> 00:15:33,700 line:-1
of what effect a control will have


255
00:15:34,301 --> 00:15:37,337 line:-2
and that will manifest
as Tool Tips on macOS.


256
00:15:39,139 --> 00:15:42,910 line:-2
What's really cool is that this modifier
is available on all platforms


257
00:15:42,976 --> 00:15:45,212 line:-1
as it also provides an accessibility hint


258
00:15:45,279 --> 00:15:47,581 line:-2
to provide an even better
voice over experience


259
00:15:47,648 --> 00:15:49,349 line:-1
for your app everywhere.


260
00:15:49,416 --> 00:15:52,219 line:-2
Here we can see a similar experience
for an app on the phone


261
00:15:52,286 --> 00:15:54,388 line:-1
for that same toolbar item.


262
00:15:54,454 --> 00:15:56,223 line:-1
[Siri] <i>Progress button.</i>


263
00:15:57,191 --> 00:15:58,959 line:-1
<i>Record new progress entry.</i>


264
00:16:00,327 --> 00:16:02,996 line:-1
It is so cool how our SwiftUI declarations


265
00:16:03,063 --> 00:16:06,166 line:-2
can naturally improve the experience
of our app for everyone.


266
00:16:07,568 --> 00:16:11,471 line:-2
Now, another new way of bringing
more flexibility and power


267
00:16:11,538 --> 00:16:15,709 line:-2
to how people interact with your controls
is using the keyboard shortcut modifier.


268
00:16:16,343 --> 00:16:18,912 line:-2
These are most often used
for scene commands


269
00:16:18,979 --> 00:16:22,049 line:-2
as it's critical for allowing
those commands to be accessible


270
00:16:22,115 --> 00:16:24,384 line:-1
via keyboard shortcut on iPad


271
00:16:24,451 --> 00:16:27,988 line:-2
and on macOS through the main menu,
like Matt showed earlier.


272
00:16:28,956 --> 00:16:31,458 line:-2
However, keyboard shortcuts
can also be used


273
00:16:31,525 --> 00:16:33,694 line:0
for other controls
that are shown on screen,


274
00:16:34,228 --> 00:16:37,130 line:0
such as creating Cancel
and default action buttons


275
00:16:37,197 --> 00:16:40,434 line:0
that have keyboard shortcuts
of Escape and Return keys.


276
00:16:41,768 --> 00:16:46,173 line:0
From keyboards, to TV remotes,
to the watchOS digital crown,


277
00:16:46,240 --> 00:16:49,776 line:-2
focus drives how these indirect inputs
are routed in your app.


278
00:16:50,511 --> 00:16:52,713 line:0
And using the new default focus support,


279
00:16:52,779 --> 00:16:55,649 line:0
your app can now control
where focus starts on screen


280
00:16:55,716 --> 00:16:58,752 line:0
and how that default might change
alongside your app state.


281
00:16:59,419 --> 00:17:01,388 line:-1
The "SwiftUI for tvOS" session


282
00:17:01,455 --> 00:17:04,458 line:-2
goes into more detail
on using that new support,


283
00:17:04,525 --> 00:17:09,061 line:-2
as well as other tips for crafting
a great tvOS app using SwiftUI.


284
00:17:10,531 --> 00:17:11,565 line:-1
Last but not least,


285
00:17:11,932 --> 00:17:15,169 line:-2
there are a couple of new controls
that you can now use throughout your app.


286
00:17:15,836 --> 00:17:17,271 line:-1
First, there are progress views.


287
00:17:17,838 --> 00:17:22,108 line:-2
These can be used to display determinate
and indeterminate progress over time.


288
00:17:22,876 --> 00:17:25,779 line:-2
There are both linear
and circular style progress views,


289
00:17:25,846 --> 00:17:29,016 line:-2
the latter enabling everyone's favorite,
spinning style,


290
00:17:29,082 --> 00:17:31,485 line:-1
as a display of indeterminate progress.


291
00:17:33,353 --> 00:17:35,389 line:-1
A similar new control are Gauges.


292
00:17:36,123 --> 00:17:38,592 line:-2
Gauges are used to indicate
the level of a value


293
00:17:38,659 --> 00:17:40,794 line:-1
relative to some overall capacity.


294
00:17:41,695 --> 00:17:43,830 line:-1
Here I have a circular watchOS gauge


295
00:17:43,897 --> 00:17:46,934 line:-2
for tracking the acidity level
of my garden's soil.


296
00:17:47,801 --> 00:17:50,737 line:-2
Gauge has additional
optional customizations.


297
00:17:50,804 --> 00:17:52,005 line:-1
Tomatoes are finicky enough


298
00:17:52,072 --> 00:17:55,275 line:-2
to where I'd really like to see
the exact pH level at a glance.


299
00:17:55,876 --> 00:17:59,479 line:-2
So I can add a current value label
to allow that to be displayed.


300
00:18:00,547 --> 00:18:03,684 line:-2
Gauge can also have minimum
and maximum value labels.


301
00:18:03,750 --> 00:18:06,186 line:-1
In some cases, those might be image icons,


302
00:18:06,253 --> 00:18:09,556 line:-2
but here I'm just gonna display
those pH levels as text.


303
00:18:10,924 --> 00:18:13,193 line:-1
Now, this code snippet also highlights


304
00:18:13,260 --> 00:18:16,496 line:-2
the new multiple trailing
closure syntax in Swift.


305
00:18:16,563 --> 00:18:18,966 line:-2
It allowed the expression
of our gauge to grow naturally


306
00:18:19,032 --> 00:18:21,134 line:-1
as it gained additional complexity.


307
00:18:21,201 --> 00:18:23,770 line:-2
It is really nice having
a new, expressive way


308
00:18:23,837 --> 00:18:27,541 line:-2
of creating toolbars across
all of the platforms my apps support,


309
00:18:28,108 --> 00:18:29,877 line:-1
plus these new means of really fine-tuning


310
00:18:29,943 --> 00:18:33,547 line:-2
the behavior of controls
both in and out of toolbars.


311
00:18:34,715 --> 00:18:37,484 line:-2
Next up, let's take a look
at new ways of crafting


312
00:18:37,551 --> 00:18:40,654 line:-2
immersive and fun experiences
using SwiftUI.


313
00:18:41,455 --> 00:18:44,057 line:-1
macOS Big Sur has a gorgeous revamp


314
00:18:44,124 --> 00:18:45,726 line:-1
to Notification Center


315
00:18:45,792 --> 00:18:48,161 line:-2
and the new Control Center
in the menu bar,


316
00:18:48,729 --> 00:18:51,031 line:-1
both built using SwiftUI.


317
00:18:51,899 --> 00:18:54,168 line:-2
Control Center features
these smooth animations


318
00:18:54,234 --> 00:18:56,036 line:-1
in and out of its different modules


319
00:18:56,436 --> 00:19:00,073 line:-2
using a new feature in SwiftUI
that you can use in your own apps.


320
00:19:01,108 --> 00:19:04,811 line:-2
Here I built a little prototype of UI
to gather up my favorite albums.


321
00:19:05,379 --> 00:19:09,650 line:-2
It consists of a scrolling grid of albums
and a row of the selected ones.


322
00:19:10,450 --> 00:19:14,121 line:-2
Now, on selection, rather than
the albums just popping into that row,


323
00:19:14,188 --> 00:19:17,090 line:-2
I'd really like them to fluidly
transition from the grid.


324
00:19:17,791 --> 00:19:20,994 line:-2
And using matched geometry effect,
it's really easy.


325
00:19:21,562 --> 00:19:23,997 line:-2
I can apply the matched
geometry effect modifier


326
00:19:24,064 --> 00:19:27,568 line:-2
to the albums in both the grid
and the selected album row


327
00:19:28,068 --> 00:19:29,837 line:-1
using the album's identifier


328
00:19:29,903 --> 00:19:32,339 line:-2
as the identifier
to connect the two views,


329
00:19:33,106 --> 00:19:36,777 line:-2
as well as the namespace
that those identifiers are relative to.


330
00:19:37,578 --> 00:19:40,914 line:-2
In this case, it's the namespace
associated with the containing view.


331
00:19:42,115 --> 00:19:44,685 line:-2
And that's really all it takes
to create this effect.


332
00:19:45,452 --> 00:19:48,655 line:-2
As an album is removed from one section
and inserted to the other,


333
00:19:49,089 --> 00:19:53,427 line:-2
SwiftUI will automatically interpolate
their frames as a seamless transition.


334
00:19:54,962 --> 00:19:58,632 line:-2
Another fantastic new tool
is ContainerRelativeShape.


335
00:19:59,399 --> 00:20:02,002 line:-2
This is a new shape type
that will take on a similar path


336
00:20:02,069 --> 00:20:03,637 line:-1
of the nearest containing shape.


337
00:20:04,471 --> 00:20:07,374 line:-2
We can see the effect here
in a widget for our favorite album.


338
00:20:08,275 --> 00:20:10,177 line:-1
The clip shape on our album artwork


339
00:20:10,244 --> 00:20:13,113 line:-2
automatically took on
a concentric corner radius


340
00:20:13,180 --> 00:20:17,451 line:-2
relative to the shape of the widget
and so fits perfectly within it.


341
00:20:18,352 --> 00:20:20,287 line:-2
We can really get a feel
for how cool this is


342
00:20:20,354 --> 00:20:21,822 line:-1
by changing that padding,


343
00:20:22,422 --> 00:20:25,759 line:-2
which effectively changes the offset
to that outer container shape,


344
00:20:26,260 --> 00:20:28,028 line:-1
and thus the clipping of our view,


345
00:20:28,095 --> 00:20:31,198 line:-2
using ContainerRelativeShape,
reacts beautifully...


346
00:20:32,699 --> 00:20:36,904 line:-2
automatically maintaining
that concentricity based on its offset.


347
00:20:38,605 --> 00:20:40,908 line:-2
There are a few other enhancements
to refine the experience


348
00:20:40,974 --> 00:20:42,910 line:-1
of text related elements as well.


349
00:20:43,510 --> 00:20:47,114 line:-2
Custom fonts will automatically scale
with dynamic type changes.


350
00:20:48,015 --> 00:20:51,685 line:-2
Further, now that images
can be embedded within text,


351
00:20:51,752 --> 00:20:54,154 line:-2
they'll act
as a unified part of that text,


352
00:20:54,221 --> 00:20:56,423 line:-1
including reacting to dynamic type.


353
00:20:57,124 --> 00:21:00,761 line:-2
And for any custom non-text metrics,
such as for layout,


354
00:21:00,827 --> 00:21:03,096 line:-2
there's a new scaled metric
property wrapper


355
00:21:03,163 --> 00:21:05,732 line:-1
that automatically scales some base value


356
00:21:05,799 --> 00:21:07,901 line:-1
against the current dynamic type size.


357
00:21:08,969 --> 00:21:14,041 line:-2
All together, these make it so easy
to create responsive, custom layouts


358
00:21:14,107 --> 00:21:16,710 line:-2
that react well in these larger
accessibility sizes.


359
00:21:17,611 --> 00:21:20,080 line:0
There'll be another talk
that goes into detail on this,


360
00:21:20,147 --> 00:21:22,482 line:0
as well as other advanced
font and typographic features


361
00:21:22,549 --> 00:21:25,385 line:0
that can be used
to really make your app shine.


362
00:21:26,353 --> 00:21:27,921 line:-1
Now, these were a few of the new tools


363
00:21:27,988 --> 00:21:30,657 line:-2
for building creative
and reactive custom views.


364
00:21:31,425 --> 00:21:34,494 line:-2
But the enhancements
to styling your app don't stop there.


365
00:21:35,229 --> 00:21:37,164 line:-1
Even when using system controls,


366
00:21:37,231 --> 00:21:40,234 line:-2
you can customize them to look
and feel at home on your app


367
00:21:40,300 --> 00:21:42,336 line:-1
and make your app stand out from the rest


368
00:21:42,402 --> 00:21:44,538 line:-1
by using a custom accent color.


369
00:21:45,439 --> 00:21:49,910 line:-2
New this year is the ability
to customize that accent color on macOS


370
00:21:49,977 --> 00:21:52,846 line:-2
and new support for customizing
that accent color


371
00:21:52,913 --> 00:21:55,949 line:-1
directly in the asset catalog in Xcode 12.


372
00:21:56,750 --> 00:21:58,785 line:-1
This lets you easily specify that color


373
00:21:58,852 --> 00:22:01,188 line:-2
for all of the platforms
that your app supports.


374
00:22:02,322 --> 00:22:05,959 line:-2
Now, this is great for applying
a broad theme color across your app.


375
00:22:06,560 --> 00:22:08,695 line:-2
But there are also cases
where you might wanna specifically


376
00:22:08,762 --> 00:22:11,231 line:-1
customize the tint of a single control.


377
00:22:12,599 --> 00:22:16,470 line:-2
Now, by default, cyber icons
on iPadOS and macOS


378
00:22:16,537 --> 00:22:18,172 line:-1
follow the app accent color.


379
00:22:18,772 --> 00:22:21,141 line:-1
With a new listItemTint modifier


380
00:22:21,208 --> 00:22:23,610 line:-1
you can customize the tint of those icons


381
00:22:23,677 --> 00:22:26,446 line:-1
per item or even for an entire section.


382
00:22:27,447 --> 00:22:29,883 line:-1
The same affect applies to macOS sidebars


383
00:22:29,950 --> 00:22:32,920 line:-2
where these modifiers
also react appropriately


384
00:22:32,986 --> 00:22:35,088 line:-1
for changes to the system accent color.


385
00:22:38,091 --> 00:22:41,895 line:-1
This same modifier also applies to watchOS


386
00:22:41,962 --> 00:22:44,531 line:-2
where it's used to tint
the standard platter background.


387
00:22:45,465 --> 00:22:48,302 line:-2
And we've brought this tinting support
to other controls as well.


388
00:22:49,970 --> 00:22:51,872 line:-1
Using new style customizations,


389
00:22:51,939 --> 00:22:55,776 line:-2
controls like buttons and toggles
can now be explicitly tinted.


390
00:22:56,577 --> 00:22:58,412 line:0
Here, the switch fill is customized


391
00:22:58,478 --> 00:23:01,014 line:0
to follow the overall themed accent color


392
00:23:01,081 --> 00:23:02,716 line:0
rather than the default green.


393
00:23:03,417 --> 00:23:05,652 line:-2
Now, all of these new views
and interactions


394
00:23:05,719 --> 00:23:09,056 line:-2
enable even more polished
and fun experiences within your app.


395
00:23:09,957 --> 00:23:11,992 line:-1
And last, but certainly not least,


396
00:23:12,059 --> 00:23:15,028 line:-2
let's look at new ways your app
can integrate and take advantage


397
00:23:15,095 --> 00:23:18,131 line:-2
of functionality and services
provided by the system.


398
00:23:19,533 --> 00:23:23,604 line:-2
This year, SwiftUI has a first-class API
for opening URLs,


399
00:23:23,670 --> 00:23:25,272 line:-1
available on all platforms.


400
00:23:26,406 --> 00:23:28,609 line:-1
One form of this is in a new Link view,


401
00:23:29,243 --> 00:23:32,279 line:-2
which takes the URL to open
and the label of the link.


402
00:23:33,313 --> 00:23:37,017 line:-2
It does what you'd expect,
creating a visual element with that label


403
00:23:37,084 --> 00:23:39,920 line:-2
and opening that URL
with the default web browser.


404
00:23:42,523 --> 00:23:46,693 line:-2
But in addition,
it can also open universal links


405
00:23:46,760 --> 00:23:48,629 line:-1
directly into other apps.


406
00:23:48,695 --> 00:23:50,397 line:-1
In this case, News.


407
00:23:52,466 --> 00:23:54,935 line:-1
Links also even work within widgets,


408
00:23:55,002 --> 00:23:58,739 line:-2
where they can even link directly
back into content within your main app.


409
00:23:59,973 --> 00:24:01,475 line:-1
Now, in the context of apps,


410
00:24:01,542 --> 00:24:04,278 line:-2
there are cases where URLs
need to be programmatically opened.


411
00:24:04,878 --> 00:24:06,480 line:-1
For these advanced cases,


412
00:24:06,547 --> 00:24:09,516 line:-2
there's also an openURL action
in the environment,


413
00:24:09,583 --> 00:24:13,854 line:-2
which can be called with the URL to open
in an optional completion handler.


414
00:24:15,255 --> 00:24:17,691 line:-2
Because it's in the context
of a specific view,


415
00:24:17,758 --> 00:24:20,093 line:-1
SwiftUI automatically opens that URL


416
00:24:20,160 --> 00:24:21,962 line:-1
relative to its containing window.


417
00:24:22,663 --> 00:24:25,199 line:-1
In an update to iPadOS 13,


418
00:24:25,265 --> 00:24:27,734 line:-2
SwiftUI gained support
for enabling your app


419
00:24:27,801 --> 00:24:31,972 line:-2
to both drag to other apps
and receive drops from those apps,


420
00:24:32,039 --> 00:24:34,975 line:-2
making your iPad app
even more powerful and integrated.


421
00:24:36,276 --> 00:24:38,579 line:-1
In iOS 14 and macOS Big Sur,


422
00:24:39,079 --> 00:24:41,849 line:-2
this API is built
on top of a new framework


423
00:24:41,915 --> 00:24:46,320 line:-2
that enables stronger typed identifiers
for the contents being dragged,


424
00:24:46,587 --> 00:24:49,489 line:-2
using the new
Uniform Type Identifiers framework.


425
00:24:50,657 --> 00:24:52,893 line:-1
This has been adopted throughout SwiftUI,


426
00:24:52,960 --> 00:24:56,129 line:-2
allowing you to take advantage
of its features throughout your app,


427
00:24:56,797 --> 00:25:00,434 line:-2
from extending it with your app's
custom exported or imported types


428
00:25:01,034 --> 00:25:02,669 line:-1
to introspecting a type.


429
00:25:02,736 --> 00:25:05,339 line:-2
For instance, getting
its human presentable description


430
00:25:05,405 --> 00:25:07,307 line:-1
or validating its conformance.


431
00:25:08,509 --> 00:25:10,811 line:0
The "Document-Based Apps in SwiftUI" talk


432
00:25:10,878 --> 00:25:12,012 line:0
has more details,


433
00:25:12,079 --> 00:25:15,182 line:0
such as the differences
between imported and exported types.


434
00:25:15,849 --> 00:25:17,551 line:0
And there's also some great documentation


435
00:25:17,618 --> 00:25:19,186 line:0
available on Apple's website.


436
00:25:20,721 --> 00:25:24,157 line:-2
One last example of enabling your app
to integrate with other services


437
00:25:24,224 --> 00:25:25,993 line:-1
is the Sign in with Apple button.


438
00:25:26,927 --> 00:25:29,663 line:-1
This is again a first-class SwiftUI API


439
00:25:29,730 --> 00:25:32,032 line:-1
provided by AuthenticationServices


440
00:25:32,099 --> 00:25:34,001 line:-1
and available on every platform.


441
00:25:34,768 --> 00:25:38,805 line:-2
What's really cool is that simply
by importing AuthenticationServices


442
00:25:38,872 --> 00:25:41,875 line:-2
and SwiftUI together,
you get these new APIs.


443
00:25:42,376 --> 00:25:44,545 line:-1
There's no new import or framework needed.


444
00:25:45,445 --> 00:25:48,382 line:-2
And this is just one example
of the many Apple frameworks


445
00:25:48,448 --> 00:25:51,084 line:-2
that are now providing
SwiftUI views and modifiers.


446
00:25:51,652 --> 00:25:55,055 line:-2
From video players, to maps,
to app clip overlays,


447
00:25:55,122 --> 00:25:57,491 line:-2
it's even easier to bring
these advanced features


448
00:25:57,558 --> 00:25:58,959 line:-1
into your SwiftUI app.


449
00:26:00,093 --> 00:26:04,531 line:-2
Many of these are fully multi-platform
including natively on watchOS,


450
00:26:04,598 --> 00:26:07,701 line:-2
meaning when you learn how to use
these frameworks for one platform,


451
00:26:07,768 --> 00:26:09,403 line:-1
you can apply that anywhere.


452
00:26:10,137 --> 00:26:12,673 line:-2
And that was a quick summary
of some of the new ways


453
00:26:12,739 --> 00:26:16,343 line:-2
your apps can integrate and take advantage
of the various system features


454
00:26:16,410 --> 00:26:18,612 line:-1
now available in SwiftUI.


455
00:26:19,012 --> 00:26:21,815 line:-2
We've run through
a lot of new features and APIs


456
00:26:21,882 --> 00:26:23,450 line:-1
and like Matt mentioned in the beginning,


457
00:26:23,517 --> 00:26:26,920 line:-2
there's just so much more
that we didn't have time to talk about.


458
00:26:26,987 --> 00:26:28,622 line:-1
But as one last callout,


459
00:26:28,689 --> 00:26:30,824 line:-2
throughout the talk
we came across a few examples


460
00:26:30,891 --> 00:26:33,994 line:-2
where our app's SwiftUI code
was made even better


461
00:26:34,061 --> 00:26:36,196 line:-1
from improvements to the language itself.


462
00:26:36,563 --> 00:26:38,098 line:0
This year's "What's New in Swift"


463
00:26:38,165 --> 00:26:41,568 line:0
goes into more details
on all of the awesome changes in Swift.


464
00:26:42,302 --> 00:26:44,571 line:0
It has more examples of syntax refinements


465
00:26:44,638 --> 00:26:48,675 line:0
like builder inference and support
for switch and if let inside of builders.


466
00:26:49,910 --> 00:26:52,613 line:0
The compiler now has
even better diagnostics


467
00:26:52,679 --> 00:26:55,516 line:0
that helps more quickly
pinpoint build errors in your code.


468
00:26:55,983 --> 00:26:57,651 line:0
And finally, improved performance,


469
00:26:58,218 --> 00:27:01,488 line:0
such as reductions of code size
for your SwiftUI apps


470
00:27:01,555 --> 00:27:03,223 line:0
and faster code completion.


471
00:27:04,291 --> 00:27:07,094 line:0
And these are the types of things
that make using SwiftUI


472
00:27:07,160 --> 00:27:08,896 line:0
that much more enjoyable.


473
00:27:09,329 --> 00:27:11,832 line:-2
We are so excited to share
all this with you this year,


474
00:27:12,332 --> 00:27:14,334 line:-1
but lastly, thank you.


475
00:27:14,902 --> 00:27:17,871 line:-2
Thank you for the excitement
and passion we've seen from the community.


476
00:27:17,938 --> 00:27:20,040 line:-2
Thank you for the reports
on Feedback Assistant,


477
00:27:20,107 --> 00:27:23,610 line:-2
the commentary on social media,
the discourse on the forums,


478
00:27:23,677 --> 00:27:25,045 line:-1
the many days of tutorials,


479
00:27:25,112 --> 00:27:28,348 line:-2
and all of the amazing prototypes
and explorations people have built.


480
00:27:29,149 --> 00:27:31,818 line:-2
We were just blown away
by the excitement we've seen


481
00:27:32,452 --> 00:27:35,122 line:-2
and are really looking forward
to what's yet to come.


482
00:27:35,589 --> 00:27:37,457 line:-1
[chimes]

