1
00:00:04,238 --> 00:00:06,840 line:-1
Hello and welcome to WWDC.


2
00:00:08,275 --> 00:00:10,077 line:0
Hi, my name is Nat Brown,


3
00:00:10,143 --> 00:00:12,946 line:0
and I work on the Game Technologies team
here at Apple.


4
00:00:13,013 --> 00:00:15,449 line:0
This video covers adding
keyboard and mouse input support


5
00:00:15,516 --> 00:00:17,084 line:0
to your games for iPadOS.


6
00:00:18,285 --> 00:00:20,621 line:-2
We've added specific support
for keyboard and mouse gaming


7
00:00:20,687 --> 00:00:23,924 line:-2
because we know games are often designed
around their main form of input.


8
00:00:25,559 --> 00:00:29,396 line:-2
For example, most iPhone and iPad games
are designed around Multi-Touch input.


9
00:00:29,696 --> 00:00:31,932 line:-1
Multi-Touch input is incredibly flexible.


10
00:00:31,999 --> 00:00:35,202 line:-2
Whole new genres of games
have emerged utilizing taps,


11
00:00:35,269 --> 00:00:37,304 line:-1
swipes, touches and gestures.


12
00:00:38,205 --> 00:00:40,541 line:-1
This is <i>Ordia</i> by Loju LTD.


13
00:00:41,308 --> 00:00:44,678 line:-2
It's one of the winners of last year's
Apple Design Awards, and it's super fun.


14
00:00:46,513 --> 00:00:49,716 line:-2
Some games have added on-screen controls
with thumbstick areas and buttons


15
00:00:49,783 --> 00:00:51,185 line:-1
similar to a game controller.


16
00:00:51,251 --> 00:00:54,488 line:-2
This has worked well for many
first-person view-oriented games,


17
00:00:54,555 --> 00:00:55,956 line:-1
as well as for driving games.


18
00:00:56,356 --> 00:01:00,260 line:-2
Here, I can play one of
our sample applications, <i>Fox2</i>,


19
00:01:00,327 --> 00:01:01,795 line:-1
using its on-screen controls.


20
00:01:02,729 --> 00:01:05,498 line:-2
On the left, is a touch area
that acts like a left joystick,


21
00:01:05,866 --> 00:01:09,136 line:-2
and on the right, I have two actions,
as well as a right joystick.


22
00:01:12,172 --> 00:01:16,376 line:-2
Still, many games and game genres were really
designed around the tactile feedback


23
00:01:16,443 --> 00:01:18,445 line:-1
and the precision of a game controller,


24
00:01:18,512 --> 00:01:21,348 line:-2
and they don't always translate well
to on-screen controls.


25
00:01:21,715 --> 00:01:23,517 line:-2
For example,
driving games can take advantage


26
00:01:23,584 --> 00:01:25,819 line:-2
of the analog triggers
and the shoulder buttons


27
00:01:25,886 --> 00:01:28,121 line:-2
to give finer control
to acceleration and braking.


28
00:01:28,188 --> 00:01:30,424 line:-2
And many gamers consider
this right thumbstick


29
00:01:30,490 --> 00:01:33,694 line:-2
more sensitive and accurate
to use for aiming and camera control.


30
00:01:34,161 --> 00:01:35,429 line:-1
Here in <i>Fox2</i>,


31
00:01:35,495 --> 00:01:38,866 line:-2
I find it more fun to play the game
with a game controller on an iPad.


32
00:01:38,932 --> 00:01:42,002 line:-2
It's more of a lean-back experience,
and I have additional control.


33
00:01:42,603 --> 00:01:45,639 line:-2
But we also know there are whole genres
of very popular games that


34
00:01:45,706 --> 00:01:49,676 line:-2
aren't a perfect fit for touch input and they're also
not a perfect fit for game controllers.


35
00:01:50,444 --> 00:01:53,146 line:-2
Multiplayer Online Battle Arena,
or MOBA games,


36
00:01:53,213 --> 00:01:57,050 line:-2
using precise mouse control
to select areas or to move units,


37
00:01:57,117 --> 00:02:00,320 line:-2
while also supporting
keyboard modifiers to those mouse actions,


38
00:02:00,387 --> 00:02:02,890 line:-2
they don't always translate well
to using touch input.


39
00:02:03,857 --> 00:02:07,327 line:-2
First-person perspective games
that use WASD keys for movement


40
00:02:07,394 --> 00:02:10,396 line:-2
and other left-hand adjacent keys
for actions and modifiers,


41
00:02:10,464 --> 00:02:12,599 line:-1
while the mouse precisely aims the camera


42
00:02:12,666 --> 00:02:15,235 line:-2
are another type of game
not always perfect for touch.


43
00:02:15,636 --> 00:02:17,604 line:-1
So we've added game-focused APIs


44
00:02:17,671 --> 00:02:20,507 line:-2
for keyboard and mouse input
for these types of games.


45
00:02:20,574 --> 00:02:24,077 line:-2
It's a coordinated effort between the
UIKit and the Game Controller framework


46
00:02:24,144 --> 00:02:27,381 line:-2
to give you the options you need
for creating your best game experience.


47
00:02:28,215 --> 00:02:29,550 line:-1
For the rest of this talk,


48
00:02:29,616 --> 00:02:33,086 line:-2
I'm going to first dive into the details
on the new keyboard and mouse APIs


49
00:02:33,153 --> 00:02:34,821 line:-1
in the Game Controller framework.


50
00:02:35,822 --> 00:02:37,558 line:-2
I'm gonna spend a moment
describing examples


51
00:02:37,624 --> 00:02:40,127 line:-2
of when you might choose to use
the Game Controller APIs


52
00:02:40,194 --> 00:02:42,863 line:-2
versus other pointer APIs
at the UIKit layer.


53
00:02:44,865 --> 00:02:46,967 line:-2
I'm gonna show
a quick example of adding support


54
00:02:47,034 --> 00:02:49,970 line:-2
in one of our classic
Game Controller samples, <i>Fox2</i>.


55
00:02:51,171 --> 00:02:54,408 line:0
And, finally, I'll play a bit of the game
to show you the game in action.


56
00:02:55,943 --> 00:02:58,445 line:-2
So let's dive into the Game Controller
framework support


57
00:02:58,512 --> 00:03:00,047 line:-1
for keyboard and mouse input.


58
00:03:01,281 --> 00:03:04,251 line:-2
The Game Controller framework
this year introduces two new classes:


59
00:03:04,318 --> 00:03:05,919 line:-1
GCKeyboard and GCMouse.


60
00:03:07,020 --> 00:03:08,856 line:-1
Like the trusty GCController class,


61
00:03:09,323 --> 00:03:13,227 line:-2
you can find out when these new types of
input devices connect and disconnect,


62
00:03:13,827 --> 00:03:16,930 line:-2
register blocks to watch
for input changes asynchronously,


63
00:03:16,997 --> 00:03:20,968 line:-2
and, in some cases, you can poll to read
the current state of these input devices.


64
00:03:23,403 --> 00:03:26,039 line:-2
These classes conform
to the GCDevice protocol,


65
00:03:26,106 --> 00:03:27,341 line:-1
just like GCController.


66
00:03:27,975 --> 00:03:30,010 line:-1
They have a physical input profile,


67
00:03:30,077 --> 00:03:33,547 line:-2
which you can use to look at the specific
input surfaces they expose.


68
00:03:35,449 --> 00:03:38,385 line:-2
In the case of GCKeyboard,
you'll find a set of buttons.


69
00:03:38,452 --> 00:03:41,788 line:-2
And those buttons also appear
in the aggregate elements collection.


70
00:03:41,855 --> 00:03:44,391 line:-2
You won't find Dpads
or Axes on GCKeyboards.


71
00:03:46,260 --> 00:03:47,628 line:-1
In the case of GCMouse,


72
00:03:47,694 --> 00:03:50,831 line:-2
you may see zero or more Axes
and one or more buttons


73
00:03:50,898 --> 00:03:54,368 line:-2
depending on the type of physical pointing
device you have paired at the time.


74
00:03:54,434 --> 00:03:58,372 line:-2
It is exactly the point of physical input
profiles to let you tune your game


75
00:03:58,438 --> 00:04:01,074 line:-2
to the specific capabilities
of attached devices.


76
00:04:02,576 --> 00:04:05,579 line:-2
Now we're finally to the actual code,
which is my favorite part.


77
00:04:05,646 --> 00:04:08,382 line:-2
I'm gonna show you the types
of change handlers you can establish


78
00:04:08,448 --> 00:04:09,716 line:-1
on GCKeyboard devices.


79
00:04:10,284 --> 00:04:14,354 line:-2
And you'll also see how you can inexpensively
poll the keyboard key states.


80
00:04:16,356 --> 00:04:19,892 line:-2
We'll see how to get raw mouse delta
events delivered to your change handlers...


81
00:04:21,595 --> 00:04:24,565 line:-2
and how you use the companion
UIKit pointer locking API


82
00:04:24,631 --> 00:04:26,266 line:-1
in order to hide the system pointer


83
00:04:26,333 --> 00:04:29,336 line:-2
and avoid triggering system gestures
at the edges of the screen.


84
00:04:30,904 --> 00:04:32,639 line:0
We'll also look at how to find out


85
00:04:32,706 --> 00:04:35,876 line:0
if the keyboard and mouse devices
are connected and when they disconnect.


86
00:04:37,211 --> 00:04:39,313 line:-2
So it's pretty straightforward
with GCKeyboard


87
00:04:39,379 --> 00:04:41,648 line:-2
to get notified about key-down
and key-up events.


88
00:04:43,383 --> 00:04:46,119 line:-2
You first check to see
if there's a keyboard attached.


89
00:04:46,186 --> 00:04:49,089 line:-2
You'll notice that we're using coalesced
on the GCKeyboard.


90
00:04:49,156 --> 00:04:51,859 line:-2
That's because we merge
all the keyboard input together.


91
00:04:52,926 --> 00:04:55,629 line:-2
Then, as you are used to elsewhere
in the Game Controller framework


92
00:04:55,696 --> 00:04:57,698 line:-1
for watching events asynchronously,


93
00:04:57,764 --> 00:04:59,766 line:-1
you simply assign a change handling block


94
00:04:59,833 --> 00:05:02,870 line:-2
to either the whole keyboard
with a key-Changed-Handler,


95
00:05:03,604 --> 00:05:06,039 line:-2
or alternately,
assign a change handling block


96
00:05:06,106 --> 00:05:09,142 line:-2
to a specific keyboard button
using a value-Changed-Handler.


97
00:05:09,543 --> 00:05:12,045 line:-2
In this case,
notice I added a handler to just catch


98
00:05:12,112 --> 00:05:14,314 line:-1
what the space bar is up to or down to.


99
00:05:16,450 --> 00:05:19,686 line:-2
The other common way to read keyboard
input in games is through polling


100
00:05:19,753 --> 00:05:22,256 line:-2
to check the current up
or down state of a key


101
00:05:22,322 --> 00:05:24,258 line:-1
rather than through a changed handler.


102
00:05:24,892 --> 00:05:27,227 line:-2
Here we are at some point
in our game's update loop,


103
00:05:27,294 --> 00:05:29,963 line:-2
and we're polling the input
using this poll-Input function.


104
00:05:30,964 --> 00:05:34,935 line:-2
We are just checking the up/down state
of the W, A, S and D keys


105
00:05:35,002 --> 00:05:38,805 line:-2
and reacting by preparing to move our
character later in the game update logic.


106
00:05:41,742 --> 00:05:45,679 line:-2
So whether you choose callbacks or polling
is really up to you and your needs,


107
00:05:45,746 --> 00:05:49,349 line:-2
depending on how you are trying to align
your input and your rendering loops.


108
00:05:50,384 --> 00:05:52,419 line:0
One nice thing about these polling APIs


109
00:05:52,486 --> 00:05:54,788 line:0
is that they are Order(1)
and non-blocking,


110
00:05:54,855 --> 00:05:57,024 line:0
they're non-yielding
and they're thread-safe,


111
00:05:57,090 --> 00:05:58,692 line:0
meaning you can call these APIs


112
00:05:58,759 --> 00:06:01,995 line:0
without worrying about interrupting
or stalling a critical input handling,


113
00:06:02,062 --> 00:06:03,664 line:0
simulation or rendering thread.


114
00:06:05,832 --> 00:06:09,703 line:-2
Events coming from the GCMouse devices
are not too different from the keyboard.


115
00:06:09,770 --> 00:06:11,738 line:-2
Here you can see
how our mouse-Moved-Handler


116
00:06:11,805 --> 00:06:14,641 line:-2
is receiving just delta information
coming from the device.


117
00:06:15,075 --> 00:06:19,513 line:-2
This is the delta or change in input value
since the last input was received.


118
00:06:19,580 --> 00:06:23,083 line:-2
It is not the current X and Y position
of the mouse and screen coordinates,


119
00:06:23,150 --> 00:06:24,451 line:-1
and that's intentional.


120
00:06:26,920 --> 00:06:30,424 line:-2
With GCMouse, there is no way
to poll the current pointer position


121
00:06:30,490 --> 00:06:32,326 line:-1
because, well, you're using this API


122
00:06:32,392 --> 00:06:35,095 line:-2
because you're in charge
of defining how and where you want


123
00:06:35,162 --> 00:06:37,631 line:-1
your in-game pointer to appear, if at all.


124
00:06:40,367 --> 00:06:43,370 line:-2
And you are also in charge
of how you want its acceleration to work


125
00:06:43,437 --> 00:06:46,540 line:-2
and the behavior you expect
at the screen edges as well.


126
00:06:49,910 --> 00:06:51,178 line:0
But what about system gestures,


127
00:06:51,245 --> 00:06:53,680 line:0
like bringing up the dock,
or other multitasking gestures


128
00:06:53,747 --> 00:06:55,883 line:0
that can happen
at screen edges and corners?


129
00:06:58,619 --> 00:07:02,589 line:-2
That takes us to the need to lock the
pointer to your application and to hide it.


130
00:07:02,923 --> 00:07:05,392 line:-2
If you're using GCMouse
for a full-screen game,


131
00:07:05,459 --> 00:07:07,327 line:-1
you almost certainly wanna do this.


132
00:07:07,394 --> 00:07:11,031 line:-2
Any game that draws its own pointer
or which sometimes shows no pointer,


133
00:07:11,098 --> 00:07:13,734 line:-2
a game that performs its own
input acceleration, yeah,


134
00:07:13,800 --> 00:07:16,737 line:-2
you'll also wanna lock the pointer
from the system's perspective.


135
00:07:17,604 --> 00:07:22,242 line:-2
This will both hide the pointer and it'll lock
it to just your full-screen application.


136
00:07:22,309 --> 00:07:24,511 line:-2
The pointer now
can't trigger those system gestures


137
00:07:24,578 --> 00:07:26,346 line:-1
that would otherwise break your game.


138
00:07:27,681 --> 00:07:30,217 line:-2
Telling the system you want
the pointer lock is very easy.


139
00:07:30,284 --> 00:07:32,219 line:-1
On your top level ViewController,


140
00:07:32,286 --> 00:07:34,555 line:-2
tell the system if you prefer
your pointer locking


141
00:07:34,621 --> 00:07:38,992 line:-2
by overriding the prefers-Pointer-Locked
getter to return your current state.


142
00:07:41,395 --> 00:07:44,498 line:-2
You can dynamically change your mind
about having the pointer locked and hidden


143
00:07:44,565 --> 00:07:46,733 line:-1
by simply calling UIViewController's


144
00:07:46,800 --> 00:07:48,936 line:-2
set-Needs-Update-
Of-Prefers-Pointer-Locked


145
00:07:49,002 --> 00:07:52,739 line:-2
and returning a new value from prefers-
Pointer-Locked when it gets called.


146
00:07:53,674 --> 00:07:55,542 line:-1
This allows you to, for example,


147
00:07:55,609 --> 00:07:58,412 line:-2
use a key to toggle
between a mouse-controlled camera mode,


148
00:07:58,478 --> 00:08:00,647 line:-2
where you are controlling
your character's viewpoint,


149
00:08:00,714 --> 00:08:02,349 line:-1
and having the system's on-screen pointer,


150
00:08:02,416 --> 00:08:04,985 line:-2
which can be used to interact
with user interface elements.


151
00:08:07,988 --> 00:08:10,924 line:-2
Finally, here's how you detect
the presence of a keyboard and mouse.


152
00:08:10,991 --> 00:08:14,695 line:-2
It's just the same as detecting when
game controllers connect and disconnect.


153
00:08:15,796 --> 00:08:18,398 line:-2
We keep some local state
to keep track of the mouse


154
00:08:18,465 --> 00:08:20,267 line:-1
and maybe whether we've seen a keyboard.


155
00:08:23,437 --> 00:08:28,408 line:-2
Then, if you wanna have special logic for
handling specific mice or multiple mice,


156
00:08:28,475 --> 00:08:31,411 line:-2
you can do so in the Connect-Notification
handling block.


157
00:08:31,478 --> 00:08:34,914 line:-2
You might simply set up button
and delta event handlers directly here


158
00:08:34,982 --> 00:08:37,751 line:-2
and effectively coalesce any attached
GCMouse devices.


159
00:08:37,818 --> 00:08:39,086 line:-1
That's up to you.


160
00:08:41,421 --> 00:08:44,825 line:-2
In the case of keyboards, you can't
differentiate multiple keyboards,


161
00:08:44,892 --> 00:08:48,962 line:-2
and all keyboard events from multiple
keyboards are instead coalesced for you.


162
00:08:49,029 --> 00:08:52,566 line:-2
So while you might use notifications
to notice when a keyboard disconnects


163
00:08:52,633 --> 00:08:55,269 line:-2
and perhaps pause the game
to prompt for different input,


164
00:08:55,335 --> 00:08:59,339 line:-2
in general, you'll find that just using
GCKeyboard-Device.coalesced


165
00:08:59,406 --> 00:09:02,676 line:-2
to check on the key state
when non-nil is the right path.


166
00:09:03,076 --> 00:09:05,546 line:-2
The coalesced keyboard input
is a little bit like


167
00:09:05,612 --> 00:09:08,482 line:-2
the GCController.current controller
in this respect--


168
00:09:08,549 --> 00:09:11,385 line:-2
a lot easier to use
if you don't really have any special needs


169
00:09:11,451 --> 00:09:13,987 line:-2
around seeing the device connect
or disconnect.


170
00:09:16,757 --> 00:09:20,827 line:-2
So, when should you use Game Controller
APIs for keyboard and mouse handling


171
00:09:20,894 --> 00:09:24,765 line:-2
versus the UIKit APIs
introduced in iOS 13.4?


172
00:09:25,132 --> 00:09:27,201 line:-1
The answer is, it really depends,


173
00:09:27,267 --> 00:09:30,170 line:-2
and you might find yourself
using a bit of a mix of the two.


174
00:09:32,739 --> 00:09:34,808 line:-1
If your game is almost always full-screen,


175
00:09:35,642 --> 00:09:37,144 line:-1
has mostly custom UI,


176
00:09:37,711 --> 00:09:40,581 line:-2
renders a custom pointer
or hides the pointer during gameplay,


177
00:09:41,281 --> 00:09:44,318 line:-2
wants delta mouse events to implement
custom input acceleration


178
00:09:44,384 --> 00:09:47,254 line:-2
and wants to avoid having system gestures
intrude on gameplay,


179
00:09:47,721 --> 00:09:51,825 line:-2
or if it needs to poll for the very latest
input in multiple time-critical threads,


180
00:09:51,892 --> 00:09:54,895 line:-2
you probably wanna make use
of GCKeyboard and GCMouse.


181
00:09:56,530 --> 00:09:59,600 line:-2
If, on the other hand,
your game is only optionally full-screen


182
00:09:59,666 --> 00:10:02,102 line:-2
and can be split screen
or multitasking aware...


183
00:10:03,237 --> 00:10:06,106 line:-2
if the standard system pointer
shape morphing and blending support


184
00:10:06,173 --> 00:10:07,608 line:-1
fits your interaction model,


185
00:10:07,674 --> 00:10:10,377 line:-2
and system gestures
at the edge of the screen or hot corners


186
00:10:10,444 --> 00:10:12,079 line:-1
do not intrude on your gameplay,


187
00:10:12,546 --> 00:10:15,148 line:-2
and the UIResponder delegate callbacks
on your main thread


188
00:10:15,215 --> 00:10:17,651 line:-2
are adequate for receiving keyboard
and mouse input,


189
00:10:18,051 --> 00:10:21,021 line:-2
you will have access
to all of the new key-up and key-down


190
00:10:21,088 --> 00:10:23,123 line:-1
and key modifier keyboard and mouse events


191
00:10:23,190 --> 00:10:26,326 line:-2
that games are looking for,
and you should be fine using UIKit.


192
00:10:27,728 --> 00:10:30,297 line:-2
The reality is that you may
find yourself using both


193
00:10:30,364 --> 00:10:32,065 line:-1
in different modes of your game.


194
00:10:32,132 --> 00:10:35,536 line:-2
During the match portion of a first-person
viewpoint game, for example,


195
00:10:35,602 --> 00:10:38,505 line:-2
you may have the pointer locked
and no cursor visible,


196
00:10:38,572 --> 00:10:41,008 line:-2
and then you'll be using
the delta mouse events.


197
00:10:41,074 --> 00:10:44,545 line:-2
After a match, it may then make sense
to unlock the pointer


198
00:10:44,611 --> 00:10:46,313 line:-1
and present standard system UI


199
00:10:46,380 --> 00:10:48,782 line:-2
and a pointer matching
the rest of the system.


200
00:10:49,850 --> 00:10:51,752 line:-1
So now let me show you how easy it was


201
00:10:51,818 --> 00:10:54,488 line:-2
to add keyboard and mouse support
to our <i>Fox2</i> sample.


202
00:10:55,656 --> 00:10:57,624 line:-1
We already had a UIViewController


203
00:10:57,691 --> 00:11:01,295 line:-2
with a lot of functions we need for moving
the character, changing the camera


204
00:11:01,361 --> 00:11:03,730 line:-2
and performing actions
like jumping and attacking.


205
00:11:04,097 --> 00:11:07,067 line:-2
All we need to do is wire those up
to the keyboard and mouse


206
00:11:07,134 --> 00:11:09,069 line:-1
and to keep track of a bit of state.


207
00:11:10,637 --> 00:11:13,173 line:-2
We're adding a delta variable
to pick up the mouse motion


208
00:11:13,240 --> 00:11:15,275 line:-1
which we'll apply in the main game loop.


209
00:11:17,177 --> 00:11:19,079 line:-1
When we see a new mouse device attach,


210
00:11:19,146 --> 00:11:21,248 line:-2
we're going to call
this new registerMouse function


211
00:11:21,315 --> 00:11:22,983 line:-1
to attach our value change handlers.


212
00:11:25,018 --> 00:11:28,155 line:-2
Now, here where we had that comment
to set up our handlers,


213
00:11:28,222 --> 00:11:30,090 line:-1
we first set up the mouse-Moved-Handler


214
00:11:30,157 --> 00:11:33,360 line:-2
to capture those raw delta mouse events
we were just talking about.


215
00:11:33,427 --> 00:11:35,629 line:-1
We just store those in our ViewController.


216
00:11:37,564 --> 00:11:39,099 line:-1
We'll wire up the mouse's left button


217
00:11:39,166 --> 00:11:41,201 line:-2
to cause our fox
to fight with the enemies.


218
00:11:41,268 --> 00:11:43,170 line:-2
It's easy because
we already wrote those methods


219
00:11:43,237 --> 00:11:45,973 line:-2
for our Game Controller
and on-screen touch controls.


220
00:11:46,039 --> 00:11:48,308 line:-2
We're just wiring them
to a new input source.


221
00:11:50,711 --> 00:11:52,112 line:-1
Finally, in our change handlers,


222
00:11:52,179 --> 00:11:54,615 line:-2
we set ourselves up to read
from the mouse scroll wheel


223
00:11:54,681 --> 00:11:56,850 line:-2
to change the fieldOfView
of the main camera.


224
00:11:56,917 --> 00:11:59,286 line:-2
The camera's already automatically
following our character,


225
00:11:59,353 --> 00:12:01,455 line:-1
so we just wire up a fieldOfView change.


226
00:12:01,522 --> 00:12:03,991 line:-2
This is actually a new feature
for keyboard and mouse.


227
00:12:04,057 --> 00:12:06,260 line:-2
We didn't have a way to zoom in and out
of the touch screen


228
00:12:06,326 --> 00:12:07,794 line:-1
or the Game Controller version.


229
00:12:09,229 --> 00:12:10,497 line:-1
Last, but not least,


230
00:12:10,564 --> 00:12:12,866 line:-2
we made some small changes
in our main update loop.


231
00:12:12,933 --> 00:12:15,802 line:-2
This is the loop of code
that runs every frame of the game.


232
00:12:16,103 --> 00:12:18,505 line:-2
We use the most recent
delta mouse event data


233
00:12:18,572 --> 00:12:20,007 line:-1
to change our camera direction,


234
00:12:20,073 --> 00:12:21,808 line:-1
and then we clear the delta event variable


235
00:12:21,875 --> 00:12:24,478 line:-2
until the next delta event
comes in from the mouse.


236
00:12:26,413 --> 00:12:29,049 line:-2
For the keyboard, we didn't set up
any value change handlers.


237
00:12:29,116 --> 00:12:32,352 line:-2
We're just polling for the current key
press state right here in the update loop,


238
00:12:32,419 --> 00:12:35,989 line:-2
and we change the character's direction
based on the W, A, S and D keys,


239
00:12:36,056 --> 00:12:38,192 line:-2
like a good
little keyboard and mouse game does.


240
00:12:39,593 --> 00:12:42,829 line:-2
Finally, we allow the user
to hold the left Shift key


241
00:12:42,896 --> 00:12:45,132 line:-1
to cause our fox to run instead of walk.


242
00:12:45,199 --> 00:12:47,568 line:-2
That's a pretty common
keyboard and mouse game trick--


243
00:12:47,634 --> 00:12:50,470 line:-2
to use modifier keys
to modify motion or aiming.


244
00:12:52,439 --> 00:12:53,607 line:-1
And that's all it took.


245
00:12:53,674 --> 00:12:56,476 line:-2
Let's compile this new version
of the game and give it a play.


246
00:12:59,012 --> 00:13:01,682 line:-1
So, here I am playing <i>Fox2</i>.


247
00:13:03,517 --> 00:13:04,651 line:-1
I can use the keyboard.


248
00:13:05,052 --> 00:13:08,222 line:-2
And the W, A, S and D keys
allow me to move.


249
00:13:08,288 --> 00:13:09,489 line:-1
The space bar jumps.


250
00:13:12,059 --> 00:13:14,795 line:-2
I've got control with the mouse
of where my camera's looking.


251
00:13:16,063 --> 00:13:18,131 line:-2
I can use the scroll wheel
to zoom in and out.


252
00:13:25,906 --> 00:13:28,342 line:-2
And that's it for keyboard
and mouse gaming on iPadOS.


253
00:13:28,942 --> 00:13:31,845 line:-2
Now you know how to use
GCKeyboard and GCMouse


254
00:13:31,912 --> 00:13:35,282 line:-2
and when you might wanna use GCMouse
versus UIKit Mouse APIs.


255
00:13:35,949 --> 00:13:37,651 line:-1
You've also seen how easy it was


256
00:13:37,718 --> 00:13:40,487 line:-2
to add to a game that already had
controller and touch input.


257
00:13:42,289 --> 00:13:45,125 line:0
If you're interested in more ways
to control games and game input,


258
00:13:45,192 --> 00:13:47,361 line:0
you may also find
these two other talks useful.


259
00:13:49,997 --> 00:13:53,100 line:-2
And that's it for keyboard
and mouse gaming for iPadOS.


260
00:13:53,166 --> 00:13:54,735 line:-1
Thanks for coming to WWDC.

