1
00:00:03,737 --> 00:00:06,306 line:-1
Hello and welcome to WWDC.


2
00:00:09,009 --> 00:00:11,945 line:0
Hi. My name is Boris,
and today I'm going to talk about


3
00:00:12,012 --> 00:00:14,481 line:0
distributing binary frameworks
as Swift packages.


4
00:00:15,015 --> 00:00:17,951 line:-2
In Xcode 11, we introduced support
for Swift packages,


5
00:00:18,018 --> 00:00:21,655 line:-2
offering a straightforward approach
to distributing libraries as source code.


6
00:00:21,722 --> 00:00:24,224 line:-1
We also introduced XCFrameworks,


7
00:00:24,291 --> 00:00:27,528 line:-2
which provided a better way to distribute
closed source binary frameworks


8
00:00:27,594 --> 00:00:28,662 line:-1
and libraries.


9
00:00:29,096 --> 00:00:30,264 line:-1
Now in Xcode 12,


10
00:00:30,330 --> 00:00:33,967 line:-2
we're bringing the advantages
of Swift packages for library distribution


11
00:00:34,034 --> 00:00:35,669 line:-1
to closed source libraries as well,


12
00:00:35,736 --> 00:00:37,738 line:-1
with support for binary dependencies.


13
00:00:38,372 --> 00:00:43,110 line:-2
In this video, I'm first going to cover
how to use a binary dependency in an app.


14
00:00:43,177 --> 00:00:46,446 line:-2
Next, I'll be talking about
how to distribute a binary framework


15
00:00:46,513 --> 00:00:47,915 line:-1
as a Swift package.


16
00:00:47,981 --> 00:00:52,486 line:-2
And finally, we're going to look at how
to create a binary framework with Xcode.


17
00:00:52,686 --> 00:00:55,589 line:-2
While many libraries
are available in source code form,


18
00:00:55,656 --> 00:00:57,758 line:-2
some developers choose to not make
the source code


19
00:00:57,824 --> 00:00:58,859 line:-1
of their library available,


20
00:00:58,926 --> 00:01:01,762 line:-2
and instead,
distribute them in binary form.


21
00:01:01,828 --> 00:01:03,397 line:-1
Using such a binary dependency


22
00:01:03,463 --> 00:01:05,699 line:-2
works just like adding
a source-based dependency.


23
00:01:06,099 --> 00:01:07,868 line:-1
Let's look at that in a demo.


24
00:01:09,102 --> 00:01:10,938 line:-1
We'll start with a simple iOS app.


25
00:01:11,772 --> 00:01:15,976 line:-2
You select File, Swift Packages,
Add Package Dependency.


26
00:01:17,811 --> 00:01:20,013 line:-1
We'll pick the BinaryEmoji package...


27
00:01:22,382 --> 00:01:24,017 line:-1
use version 1.0...


28
00:01:25,319 --> 00:01:27,087 line:-1
and link the binary with our app.


29
00:01:30,557 --> 00:01:32,492 line:-1
Now if we look at the project navigator,


30
00:01:32,559 --> 00:01:34,695 line:-2
we'll see a new group,
"Referenced Binaries,"


31
00:01:34,761 --> 00:01:36,396 line:-1
that contains an XCFramework.


32
00:01:38,298 --> 00:01:40,000 line:-1
Let's look at that in Finder.


33
00:01:41,535 --> 00:01:44,104 line:-2
We see that it has
a bunch of subdirectories,


34
00:01:44,171 --> 00:01:47,708 line:-2
each of which corresponds
to a platform and target environment


35
00:01:47,774 --> 00:01:49,510 line:-1
represented by a target triple.


36
00:01:51,545 --> 00:01:55,582 line:-2
Inside, you see a corresponding
framework for that particular triple.


37
00:01:58,151 --> 00:01:59,753 line:-1
Let's go back to Xcode.


38
00:02:01,054 --> 00:02:03,590 line:-1
We can now import the emoji module


39
00:02:04,892 --> 00:02:06,193 line:-1
in our app's code.


40
00:02:08,362 --> 00:02:10,364 line:-1
And if we jump to "definition,"


41
00:02:11,698 --> 00:02:13,433 line:-1
we'll see which API it provides.


42
00:02:13,500 --> 00:02:16,203 line:-2
There's an EmojiView type
that I want to use in my app.


43
00:02:17,337 --> 00:02:19,339 line:-1
If we now refresh the preview...


44
00:02:21,141 --> 00:02:24,378 line:-1
you see the EmojiView being used.


45
00:02:24,444 --> 00:02:27,114 line:-2
So, using a binary dependency
really works the same


46
00:02:27,181 --> 00:02:28,649 line:-1
as a source-based dependency.


47
00:02:29,983 --> 00:02:33,187 line:-2
If you're already familiar
with XCFrameworks from Xcode 11,


48
00:02:33,253 --> 00:02:34,888 line:-1
they are effectively handled the same way


49
00:02:34,955 --> 00:02:36,990 line:-2
as if they were added
directly to your app.


50
00:02:37,991 --> 00:02:40,961 line:-2
If you want to use that same library
as a package dependency,


51
00:02:41,028 --> 00:02:43,430 line:-1
it also works the same way you're used to.


52
00:02:43,497 --> 00:02:44,798 line:-1
In the package manifest,


53
00:02:44,865 --> 00:02:46,967 line:-2
you can add an entry
to the dependencies array,


54
00:02:47,034 --> 00:02:49,736 line:-2
which points to the repository
the package is using


55
00:02:49,803 --> 00:02:53,240 line:-2
and defines the version restrictions
that you chose for this dependency.


56
00:02:54,474 --> 00:02:57,377 line:-2
Now that we saw
how to use a binary dependency


57
00:02:57,444 --> 00:02:58,912 line:-1
that someone else authored,


58
00:02:58,979 --> 00:03:01,481 line:-2
next, let's look at
how we create such a package


59
00:03:01,548 --> 00:03:03,851 line:-2
that distributes
a binary framework ourselves.


60
00:03:04,785 --> 00:03:10,357 line:-2
Xcode 12 offers the new tools-version:5.3
which brings the new package manifest API.


61
00:03:11,024 --> 00:03:13,427 line:-2
This adds a new target type:
"binaryTarget."


62
00:03:14,428 --> 00:03:18,765 line:-2
It has a name which corresponds
to the module name of the XCFramework...


63
00:03:20,167 --> 00:03:21,969 line:-1
a HTTPS URL...


64
00:03:22,836 --> 00:03:26,106 line:0
and a checksum so that
the downloaded archive can be verified.


65
00:03:27,341 --> 00:03:30,544 line:0
There's also an option
to point to an XCFramework by path,


66
00:03:30,611 --> 00:03:32,246 line:0
that's meant for development.


67
00:03:32,312 --> 00:03:35,816 line:0
Note that larger XCFrameworks,
just as any large binary files,


68
00:03:35,883 --> 00:03:38,118 line:0
shouldn't be committed
to your Git repository,


69
00:03:38,185 --> 00:03:40,254 line:0
because they will slow down checkouts.


70
00:03:41,455 --> 00:03:44,525 line:-2
Products can reference binary targets
to vend them to clients,


71
00:03:44,591 --> 00:03:46,193 line:-1
just like regular targets.


72
00:03:46,960 --> 00:03:51,231 line:-2
Binary targets use XCFrameworks,
as we saw earlier,


73
00:03:51,298 --> 00:03:53,934 line:-1
are only supported on Apple platforms,


74
00:03:54,001 --> 00:03:59,706 line:-2
can be HTTPS or path-based where the path
can point to files inside your package.


75
00:04:00,574 --> 00:04:02,142 line:-1
If HTTPS is being used,


76
00:04:02,209 --> 00:04:04,778 line:-2
the binary artifact
will be downloaded separately


77
00:04:04,845 --> 00:04:06,446 line:-1
from the Git checkout of your package.


78
00:04:07,314 --> 00:04:10,350 line:-2
This means that you don't pollute
the history of your repository


79
00:04:10,417 --> 00:04:12,252 line:-1
with large binaries,


80
00:04:12,319 --> 00:04:15,656 line:-2
and that you can use
the same download location for other uses,


81
00:04:15,722 --> 00:04:18,091 line:-2
such as people downloading your framework
manually.


82
00:04:19,459 --> 00:04:21,595 line:-1
The name corresponds to the module name.


83
00:04:22,496 --> 00:04:24,765 line:-1
Names are unique across the graph,


84
00:04:24,831 --> 00:04:27,634 line:-2
so don't bundle
other people's binary frameworks.


85
00:04:27,701 --> 00:04:31,038 line:-2
There should be one canonical package
for each binary framework.


86
00:04:31,705 --> 00:04:34,341 line:-2
As you evolve the binary targets
of your package,


87
00:04:34,408 --> 00:04:36,376 line:-1
you should adhere to semantic versioning,


88
00:04:36,443 --> 00:04:38,545 line:-2
just like you would
for source-based targets.


89
00:04:38,612 --> 00:04:41,315 line:-2
For example,
breaking changes to your XCFramework,


90
00:04:41,381 --> 00:04:43,350 line:-1
such as renaming a method or type,


91
00:04:43,417 --> 00:04:46,620 line:-2
should lead to an increase
of the major version of your package.


92
00:04:46,954 --> 00:04:50,023 line:-2
Similarly, you also want to
version your framework itself


93
00:04:50,090 --> 00:04:54,261 line:-2
using the bundle version string setting
in the framework's Info.plist.


94
00:04:54,328 --> 00:04:56,697 line:0
More information about
evolving binary frameworks


95
00:04:56,763 --> 00:05:00,801 line:0
were covered in the WWDC 2019 session
"Binary Frameworks in Swift"


96
00:05:00,868 --> 00:05:02,536 line:0
that I would encourage you to watch.


97
00:05:02,603 --> 00:05:06,373 line:-2
Let's see how we can create
our own binary dependency in another demo.


98
00:05:07,608 --> 00:05:12,779 line:-2
This time we start with a new package
using File, New, Swift Package.


99
00:05:14,848 --> 00:05:16,817 line:-1
We will call it "Emoji."


100
00:05:20,554 --> 00:05:23,290 line:-2
We delete the targets
that were added by the template...


101
00:05:25,592 --> 00:05:27,794 line:-1
and instead, insert a binary target.


102
00:05:29,730 --> 00:05:31,865 line:-1
The name will also be "Emoji."


103
00:05:32,799 --> 00:05:37,304 line:-2
Use a URL pointing to a local server
that has my XCFramework.


104
00:05:39,039 --> 00:05:41,909 line:-2
And now we need a checksum.
How do we generate that?


105
00:05:42,943 --> 00:05:45,279 line:-2
To compute the checksum
of a binary framework,


106
00:05:45,345 --> 00:05:47,981 line:-2
use the "swift package compute-checksum"
command.


107
00:05:48,482 --> 00:05:50,384 line:-2
This will print the checksum
to the terminal,


108
00:05:50,450 --> 00:05:53,887 line:-2
and you can copy it from there
and paste it into your package manifest.


109
00:05:54,588 --> 00:05:56,123 line:-1
When your package is being used,


110
00:05:56,190 --> 00:05:58,926 line:-2
Xcode will compute the checksum
of the downloaded file


111
00:05:58,992 --> 00:06:01,595 line:-2
and reject it
if it does not match the manifest.


112
00:06:01,662 --> 00:06:05,432 line:-2
This ensures that your clients
use the exact binary you expect.


113
00:06:06,233 --> 00:06:09,570 line:-2
Now we can insert that checksum
and build the package.


114
00:06:11,138 --> 00:06:13,307 line:-2
And that's how you can bundle
an XCFramework


115
00:06:13,373 --> 00:06:15,576 line:-1
into a Swift package for distribution.


116
00:06:16,243 --> 00:06:19,646 line:-2
Finally, let's look at how to create
binary frameworks themselves.


117
00:06:20,514 --> 00:06:23,083 line:-1
XCFrameworks were introduced in Xcode 11.


118
00:06:23,150 --> 00:06:27,221 line:-2
They bundle up multiple variants
of a framework for different platforms,


119
00:06:27,287 --> 00:06:30,924 line:-2
they support frameworks
as well as dynamic and static libraries,


120
00:06:30,991 --> 00:06:33,927 line:-2
and each XCFramework
contains a single module.


121
00:06:34,695 --> 00:06:35,996 line:-1
To create an XCFramework,


122
00:06:36,063 --> 00:06:38,465 line:-2
set the "Build Libraries for Distribution"
build setting


123
00:06:38,532 --> 00:06:41,201 line:-2
on your existing framework
or library target,


124
00:06:41,268 --> 00:06:44,972 line:-2
archive each variant
using the "xcodebuild archive" command,


125
00:06:45,038 --> 00:06:47,708 line:-2
and use the "xcodebuild
-create-xcframework" command


126
00:06:47,774 --> 00:06:48,775 line:-1
to bundle it up.


127
00:06:49,910 --> 00:06:51,445 line:0
There's a lot more detail about this


128
00:06:51,512 --> 00:06:55,148 line:0
in the WWDC 2019 session
"Binary Frameworks in Swift,"


129
00:06:55,215 --> 00:06:58,785 line:0
so I'd recommend watching this before
creating binary frameworks with Xcode.


130
00:06:59,553 --> 00:07:00,821 line:-1
Now before we wrap up,


131
00:07:00,888 --> 00:07:03,690 line:-2
I want to talk about the trade-offs
of using binary dependencies.


132
00:07:04,124 --> 00:07:07,160 line:-2
You should always carefully consider
which third-party components


133
00:07:07,227 --> 00:07:08,829 line:-1
you bring into your projects.


134
00:07:08,896 --> 00:07:11,899 line:-2
With binaries specifically,
debugging becomes harder


135
00:07:11,965 --> 00:07:14,134 line:-2
and making your own fixes
won't be possible.


136
00:07:15,202 --> 00:07:17,571 line:-2
You will also be limited
to whatever platforms


137
00:07:17,638 --> 00:07:19,273 line:-1
are supported by the author,


138
00:07:19,339 --> 00:07:22,142 line:-2
since you won't be able
to rebuild a binary dependency.


139
00:07:22,209 --> 00:07:26,113 line:-2
Keep these points in mind before adding
new binary dependencies to your app.


140
00:07:26,914 --> 00:07:31,485 line:-2
To wrap up, you can now distribute
existing XCFrameworks as Swift packages.


141
00:07:32,319 --> 00:07:35,923 line:-2
Depending on them works the same way
as for source-based packages.


142
00:07:36,356 --> 00:07:37,824 line:-1
Thanks for watching.

