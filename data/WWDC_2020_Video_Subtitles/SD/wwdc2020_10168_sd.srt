1
00:00:03,737 --> 00:00:06,773 line:-1
Hello and welcome to WWDC.


2
00:00:08,141 --> 00:00:10,344 line:0
Welcome to Explore Logging in Swift.


3
00:00:10,410 --> 00:00:13,046 line:0
I am Ravi Kandhadai Madhavan,
an engineer at Apple.


4
00:00:13,947 --> 00:00:17,584 line:-2
In this talk, I will show you how
to make your apps easier to debug


5
00:00:17,651 --> 00:00:21,421 line:-2
using Apple's unified logging APIs,
also known as os_log.


6
00:00:22,155 --> 00:00:26,193 line:-2
I will talk about how to collect logs
from a device you have access to.


7
00:00:26,260 --> 00:00:29,897 line:-2
I will demonstrate the tools available
to analyze logs in order to understand


8
00:00:29,963 --> 00:00:31,798 line:-1
and fix problems with your app.


9
00:00:32,900 --> 00:00:35,836 line:-2
I will cover how to control performance
of log calls


10
00:00:35,903 --> 00:00:39,339 line:-2
and improve readability of log messages
using formatting options.


11
00:00:40,541 --> 00:00:42,242 line:-1
Bugs are important to fix.


12
00:00:42,676 --> 00:00:46,213 line:-2
Users expect quality apps to be reliable
and have few bugs.


13
00:00:46,747 --> 00:00:49,383 line:-2
Even minor bugs can lead
to a poor user experience.


14
00:00:49,783 --> 00:00:52,953 line:-2
However, some bugs are more difficult
to fix than others.


15
00:00:53,387 --> 00:00:57,658 line:-2
Often, the most elusive are those that
are hard to reproduce during development.


16
00:00:58,659 --> 00:01:02,829 line:-2
Logs are a valuable tool for finding
and fixing hard-to-reproduce bugs.


17
00:01:02,896 --> 00:01:06,466 line:-2
They provide a trail of clues
that you can follow to understand a bug


18
00:01:06,533 --> 00:01:08,535 line:-1
without even having to reproduce it.


19
00:01:09,002 --> 00:01:12,806 line:-2
I will now show you a hard-to-reproduce
bug in an app that I'm developing.


20
00:01:12,873 --> 00:01:17,377 line:-2
I will later show how I can add logging
to help understand and fix this bug.


21
00:01:19,313 --> 00:01:22,316 line:-2
My app, called Fruta,
lets users purchase smoothies.


22
00:01:22,816 --> 00:01:24,551 line:-1
I can browse through these smoothies,


23
00:01:25,519 --> 00:01:28,322 line:-1
tap on a smoothie, and also purchase one.


24
00:01:29,923 --> 00:01:33,260 line:-2
I've recently added a "Gift Cards" feature
to my app.


25
00:01:33,927 --> 00:01:36,997 line:-2
I've created a new tab
for browsing through gift cards.


26
00:01:37,497 --> 00:01:40,834 line:-2
I can tap on a card to purchase it
using Apple Pay.


27
00:01:40,901 --> 00:01:43,170 line:-2
When I scroll through the cards
and reach the end,


28
00:01:43,237 --> 00:01:46,673 line:-2
my app will start loading more cards
by communicating with a server.


29
00:01:47,541 --> 00:01:49,476 line:-1
When I select a card by tapping on it,


30
00:01:49,543 --> 00:01:53,046 line:-2
my app will stop the loading of cards
and any ongoing communication.


31
00:01:53,113 --> 00:01:56,316 line:-2
However, I can go back
and continue looking at more cards.


32
00:01:56,383 --> 00:01:57,951 line:-1
This works most of the time.


33
00:01:58,018 --> 00:02:00,587 line:-1
Unfortunately, sometimes I see a bug.


34
00:02:01,455 --> 00:02:04,858 line:-2
When my app is loading more cards,
if I tap on a card,


35
00:02:04,925 --> 00:02:07,227 line:-2
the loading occasionally fails
with an error.


36
00:02:08,729 --> 00:02:12,332 line:-2
This is frustrating because it doesn't
happen near my development machine.


37
00:02:13,300 --> 00:02:14,868 line:-1
It happens very rarely,


38
00:02:14,935 --> 00:02:17,638 line:-2
so I am not able to reproduce this
under the debugger.


39
00:02:17,704 --> 00:02:21,308 line:-2
Adding logging to your app can help you
understand errors like this one


40
00:02:21,375 --> 00:02:23,410 line:-2
without needing to reproduce them
at your desk.


41
00:02:24,278 --> 00:02:28,448 line:-2
In Xcode 12, we have introduced
new Swift APIs for unified logging.


42
00:02:28,982 --> 00:02:33,387 line:-2
You can use these APIs to record important
events happening in your app as it runs.


43
00:02:33,820 --> 00:02:35,989 line:-2
These logs are archived
by the operating system


44
00:02:36,056 --> 00:02:38,392 line:-2
so you can retrieve them later
from the device.


45
00:02:38,859 --> 00:02:41,128 line:-1
Because these new APIs are very efficient,


46
00:02:41,195 --> 00:02:43,931 line:-2
they can be widely used
without slowing down your app.


47
00:02:45,699 --> 00:02:48,869 line:-2
All it takes to add logging to your app
is three simple steps.


48
00:02:49,536 --> 00:02:53,473 line:-2
First, import the "os" module
which defines the new logging APIs.


49
00:02:54,274 --> 00:02:57,144 line:-2
Second,
create an instance of the type "Logger,"


50
00:02:57,211 --> 00:02:59,213 line:-1
passing it a subsystem and category.


51
00:03:00,080 --> 00:03:02,983 line:-2
These will be attached to every message
logged by the Logger.


52
00:03:04,151 --> 00:03:06,420 line:-1
Subsystem is typically a bundle identifier


53
00:03:06,486 --> 00:03:09,022 line:-2
which helps identify a message
coming from your app.


54
00:03:09,990 --> 00:03:12,759 line:-2
You can use the category
to further distinguish messages


55
00:03:12,826 --> 00:03:14,962 line:-2
coming from different parts
of your program.


56
00:03:16,129 --> 00:03:19,433 line:-2
Here, I've used the "Gift Cards" category
for my Logger.


57
00:03:20,801 --> 00:03:23,670 line:-2
Third, add logging to interesting places
in the code


58
00:03:23,737 --> 00:03:25,839 line:-2
by calling a method
on the logger instance.


59
00:03:26,473 --> 00:03:30,511 line:-2
Here, I've added a log every time
my app downloads data from a server.


60
00:03:31,778 --> 00:03:34,681 line:-2
With Logger, you can add runtime data
to the log message


61
00:03:34,748 --> 00:03:36,116 line:-1
using string interpolation.


62
00:03:36,683 --> 00:03:40,153 line:-2
For instance, here I'm adding
a task identifier to the log message.


63
00:03:40,587 --> 00:03:42,856 line:-2
This is similar
to calling the print function.


64
00:03:44,157 --> 00:03:47,461 line:-2
However,
log messages are different in a key way.


65
00:03:48,161 --> 00:03:49,396 line:-1
Unlike with print,


66
00:03:49,463 --> 00:03:53,534 line:-2
the log message is not fully converted
to a string, as that would be too slow.


67
00:03:54,067 --> 00:03:57,271 line:-2
Instead, the compiler
and the logging library work together


68
00:03:57,337 --> 00:04:00,741 line:-2
to produce a heavily optimized
representation of the log message


69
00:04:00,807 --> 00:04:03,277 line:-2
that leverages the type
of the logged data.


70
00:04:03,343 --> 00:04:06,980 line:-2
With the optimized representation,
you pay the cost of converting to a string


71
00:04:07,047 --> 00:04:09,349 line:-2
only when the log message
is actually displayed.


72
00:04:10,184 --> 00:04:13,387 line:-2
Log messages can contain
a wide variety of data types.


73
00:04:13,453 --> 00:04:17,224 line:-2
You can log numeric types
like Int and Double, Objective-C objects,


74
00:04:17,291 --> 00:04:19,459 line:-2
as well as any type that conforms
to Swift's


75
00:04:19,526 --> 00:04:21,695 line:-1
CustomStringConvertible protocol.


76
00:04:21,762 --> 00:04:24,565 line:-2
This means to add your own type
to a log message,


77
00:04:24,631 --> 00:04:28,001 line:-2
all you need to do is make it conform
to CustomStringConvertible.


78
00:04:28,635 --> 00:04:30,737 line:-1
When adding runtime data to a log message,


79
00:04:30,804 --> 00:04:32,873 line:-2
you should be aware
that a non-numeric type,


80
00:04:32,940 --> 00:04:36,643 line:-2
like a string or an object,
will be redacted in the logs by default.


81
00:04:37,578 --> 00:04:40,147 line:-2
This is done to ensure
that after your app ships


82
00:04:40,214 --> 00:04:42,049 line:-1
and is running on your user's device,


83
00:04:42,115 --> 00:04:44,751 line:-2
the logs do not show
any personal information.


84
00:04:45,786 --> 00:04:48,188 line:-1
For instance, here I'm logging a message


85
00:04:48,255 --> 00:04:50,357 line:-2
along with the bank account number
of a user


86
00:04:50,424 --> 00:04:52,226 line:-1
which is represented by a string.


87
00:04:52,726 --> 00:04:56,163 line:-2
In the output logs, the account number
will be redacted as private.


88
00:04:57,698 --> 00:05:01,134 line:-2
However, data that does not handle
any sensitive information


89
00:05:01,201 --> 00:05:02,970 line:-1
can be made visible in the logs.


90
00:05:03,670 --> 00:05:05,172 line:-1
When you log runtime data,


91
00:05:05,239 --> 00:05:09,543 line:-2
pass a value .public to an optional
parameter privacy, as shown here.


92
00:05:10,878 --> 00:05:13,680 line:-2
Now the logs will display
the contents of the data.


93
00:05:14,648 --> 00:05:16,416 line:-1
Here, it's the name of a smoothie.


94
00:05:17,017 --> 00:05:19,086 line:-1
I will say more about privacy later.


95
00:05:20,821 --> 00:05:24,191 line:-2
When your app logs a message,
the operating system stores it on device


96
00:05:24,258 --> 00:05:25,492 line:-1
in a compressed form.


97
00:05:26,093 --> 00:05:29,897 line:-2
You can use the "log collect" command
on your Mac to retrieve those logs.


98
00:05:30,364 --> 00:05:32,799 line:-1
First, connect your device to your Mac.


99
00:05:33,233 --> 00:05:37,571 line:-2
Next, run the "log collect" command
from the terminal with the device option.


100
00:05:38,906 --> 00:05:41,408 line:-2
Provide a start time
from when you need the logs,


101
00:05:41,942 --> 00:05:44,811 line:-2
typically,
a few minutes before you first saw a bug.


102
00:05:45,445 --> 00:05:48,348 line:-2
Also, provide a file name
for storing the log archive.


103
00:05:49,049 --> 00:05:52,519 line:-2
You can open log archives in Console app
by double-clicking on them.


104
00:05:52,953 --> 00:05:56,356 line:-2
This app makes it easy to browse logs
and filter them.


105
00:05:56,890 --> 00:05:59,326 line:-2
Let us see how I can use logging
to understand


106
00:05:59,393 --> 00:06:02,863 line:-2
the hard-to-reproduce bug
in the Fruta app I showed previously.


107
00:06:03,497 --> 00:06:07,267 line:-2
I have already added logging
to the source code of the gift cards view.


108
00:06:09,469 --> 00:06:12,806 line:-2
I imported the os module to get access
to the logging APIs


109
00:06:12,873 --> 00:06:15,442 line:-2
and created a logger
with a bundle identifier


110
00:06:15,509 --> 00:06:16,710 line:-1
and "Gift Cards" category.


111
00:06:17,377 --> 00:06:20,681 line:-2
I have added logging to record interesting
events performed by this view.


112
00:06:21,281 --> 00:06:24,551 line:-2
For instance, when the app starts a task
to communicate with the server,


113
00:06:24,618 --> 00:06:28,322 line:-2
it now logs a UUID
that uniquely identifies the task.


114
00:06:28,388 --> 00:06:31,058 line:-2
Since the identifier does not contain
sensitive information,


115
00:06:31,124 --> 00:06:33,727 line:-2
I made it public
so that it's visible in the logs.


116
00:06:34,294 --> 00:06:38,765 line:-2
Using log collect, I've extracted the logs
of the Fruta app to a log archive.


117
00:06:39,066 --> 00:06:41,235 line:-1
Now I will open it in Console app.


118
00:06:42,402 --> 00:06:44,137 line:-1
There are lots of log entries here.


119
00:06:44,505 --> 00:06:47,007 line:-2
This is because the log archive
contains messages


120
00:06:47,074 --> 00:06:49,309 line:-1
logged by all processes in the system.


121
00:06:49,376 --> 00:06:52,145 line:-2
I can use the "search" and "filter"
features of the Console


122
00:06:52,212 --> 00:06:54,515 line:-2
to narrow down on the logs
I am interested in.


123
00:06:55,282 --> 00:06:59,052 line:-2
First, I'll filter by subsystem--
in this case, my app's bundle identifier--


124
00:06:59,119 --> 00:07:01,722 line:-2
to limit the display
to only messages from my Fruta app.


125
00:07:02,923 --> 00:07:05,425 line:-2
I will click on the search field
at the top right,


126
00:07:06,226 --> 00:07:07,628 line:-1
enter the subsystem...


127
00:07:10,430 --> 00:07:13,200 line:-2
and select "subsystem"
from the drop-down list.


128
00:07:19,606 --> 00:07:22,009 line:-1
I can scroll through just my app's logs


129
00:07:22,075 --> 00:07:24,778 line:-2
and find the message that corresponds
to the failure.


130
00:07:26,313 --> 00:07:28,315 line:-1
But since my app is logging so much,


131
00:07:28,382 --> 00:07:32,219 line:-2
there are still too many entries for me
to understand what else has gone wrong.


132
00:07:32,286 --> 00:07:35,322 line:-2
What I really need is a way
to narrow down on the problem.


133
00:07:35,389 --> 00:07:37,991 line:0
My logged task identifiers
provide the solution.


134
00:07:39,026 --> 00:07:41,662 line:0
I can filter by the task identifier
of the failed task


135
00:07:41,728 --> 00:07:44,231 line:0
to see only logs
that are relevant to the failure.


136
00:07:44,531 --> 00:07:45,699 line:-1
I will do that now


137
00:07:45,766 --> 00:07:49,236 line:-2
by adding the task identifier
as another keyword to the search field.


138
00:07:52,239 --> 00:07:53,974 line:-1
Now there are only a few logs.


139
00:07:54,041 --> 00:07:56,410 line:-2
I can read through them
and understand the error.


140
00:07:59,913 --> 00:08:03,917 line:-2
The first entry shows that the app is
starting a task to fetch more gift cards.


141
00:08:04,384 --> 00:08:07,988 line:-2
Then I see that the task is completed
due to a network error


142
00:08:08,055 --> 00:08:10,224 line:-1
and is waiting to retry after a timeout.


143
00:08:11,425 --> 00:08:13,460 line:-1
The next entry shows that in the meantime,


144
00:08:13,527 --> 00:08:16,797 line:-2
the user has selected a gift card,
which attempts to stop the task.


145
00:08:17,464 --> 00:08:19,833 line:-2
But since there is no active task
at this point,


146
00:08:19,900 --> 00:08:22,936 line:-2
the app finds itself
in an inconsistent state and fails.


147
00:08:24,004 --> 00:08:27,107 line:-2
This is enough for me to reconstruct
what has actually happened.


148
00:08:27,174 --> 00:08:28,342 line:-1
By selecting a card,


149
00:08:28,408 --> 00:08:31,211 line:-2
I attempted to stop a task
from loading more gift cards


150
00:08:31,278 --> 00:08:34,147 line:-2
at a time it had already stopped
due to a network error.


151
00:08:35,115 --> 00:08:38,352 line:-2
This explains why this bug
was so hard to reproduce.


152
00:08:38,418 --> 00:08:41,355 line:-2
It's dependent on the timing of events
and a network error.


153
00:08:41,955 --> 00:08:45,726 line:-2
Thanks to the logs, I am now able
to understand the bug and fix it.


154
00:08:47,895 --> 00:08:49,863 line:-1
We saw that using "log collect" command,


155
00:08:49,930 --> 00:08:52,666 line:-2
you can collect logs
after your app has finished running.


156
00:08:53,500 --> 00:08:56,503 line:-2
It is also possible to stream logs
while your app is running.


157
00:08:57,037 --> 00:08:58,872 line:-1
If your device is connected to your Mac,


158
00:08:58,939 --> 00:09:01,909 line:-2
you can stream log messages
as they happen in Console app.


159
00:09:02,809 --> 00:09:06,780 line:-2
If your app is launched from Xcode,
you will also see them in Xcode's console.


160
00:09:07,181 --> 00:09:09,550 line:-2
This is a helpful alternative
to "printf" debugging


161
00:09:09,616 --> 00:09:12,486 line:-2
with more structured output
that can be easily filtered.


162
00:09:17,591 --> 00:09:21,161 line:-2
You might have noticed when I was
browsing through logs in Console app


163
00:09:21,228 --> 00:09:23,363 line:-2
that the "failure" message
was highlighted.


164
00:09:23,797 --> 00:09:26,533 line:-2
This is because I logged it
with the fault log level.


165
00:09:27,067 --> 00:09:31,238 line:-2
The logging APIs provide five log levels
for indicating importance of messages.


166
00:09:32,606 --> 00:09:34,441 line:-2
In the increasing order
of their importance,


167
00:09:34,508 --> 00:09:39,479 line:-2
they are debug, info, notice,
which is also the default level,


168
00:09:39,546 --> 00:09:41,148 line:-1
error, and fault.


169
00:09:43,383 --> 00:09:47,254 line:-2
Use the debug level for messages
that are useful only during debugging.


170
00:09:48,288 --> 00:09:50,724 line:-2
The info level is for messages
that are helpful


171
00:09:50,791 --> 00:09:53,026 line:-2
but not essential
for troubleshooting errors.


172
00:09:53,627 --> 00:09:57,831 line:-2
Notices indicate that the message is
absolutely essential for troubleshooting.


173
00:09:57,898 --> 00:10:01,502 line:-2
You can use the error level to record
errors that happen during execution.


174
00:10:02,135 --> 00:10:04,371 line:-1
The fault level is the most severe.


175
00:10:04,438 --> 00:10:06,240 line:-1
You should use it to record situations


176
00:10:06,306 --> 00:10:08,942 line:-2
that arise due to a potential bug
in the program.


177
00:10:09,009 --> 00:10:12,546 line:-2
For example, to record that an assumption
that the program expects to hold


178
00:10:12,613 --> 00:10:14,181 line:-1
is violated at runtime.


179
00:10:14,615 --> 00:10:16,416 line:-1
The error and fault levels are highlighted


180
00:10:16,483 --> 00:10:18,952 line:-2
with yellow and red bubbles
in Console app.


181
00:10:20,087 --> 00:10:22,990 line:-2
The Logger type has methods
for each log level.


182
00:10:23,423 --> 00:10:27,528 line:-2
For example, to log a debug message,
call the debug function on a logger.


183
00:10:28,295 --> 00:10:29,630 line:-1
While choosing a log level,


184
00:10:29,696 --> 00:10:32,733 line:-2
an important thing you must consider
is persistence.


185
00:10:32,799 --> 00:10:36,436 line:-2
That is, whether a log message is archived
and can be retrieved later


186
00:10:36,503 --> 00:10:38,372 line:-1
after the app has finished executing.


187
00:10:38,672 --> 00:10:42,509 line:-2
The logs that aren't persisted can only
be streamed while the app is running.


188
00:10:43,010 --> 00:10:46,146 line:-2
Whether a message is persisted or not
depends on the log level.


189
00:10:46,480 --> 00:10:49,516 line:-2
Persistence increases
with the method's importance.


190
00:10:51,285 --> 00:10:53,353 line:-1
Debug level messages are not persisted,


191
00:10:53,420 --> 00:10:57,090 line:-2
which means they cannot be retrieved
after the app has completed execution.


192
00:10:57,724 --> 00:11:00,694 line:-2
Info error messages
are mostly not persisted,


193
00:11:00,761 --> 00:11:04,198 line:-2
except when they are generated a few
moments before a log collect command.


194
00:11:04,565 --> 00:11:07,434 line:-2
Messages logged at every other level
are persisted,


195
00:11:07,501 --> 00:11:09,403 line:-1
and you can retrieve them later.


196
00:11:09,469 --> 00:11:13,273 line:-2
There is, however, a storage limit
on how many messages are archived.


197
00:11:13,340 --> 00:11:14,842 line:-1
Once that limit is exceeded,


198
00:11:14,908 --> 00:11:17,277 line:-2
the older ones are purged
and become unavailable.


199
00:11:17,778 --> 00:11:19,346 line:-1
The error and fault level messages


200
00:11:19,413 --> 00:11:22,349 line:-2
are persisted even longer
than notice level messages.


201
00:11:22,416 --> 00:11:25,285 line:-2
Typically, the messages will be persisted
for a few days.


202
00:11:25,352 --> 00:11:28,188 line:-2
However, it depends on the storage space
on your device.


203
00:11:30,057 --> 00:11:32,559 line:-1
The log levels also affect performance.


204
00:11:33,126 --> 00:11:35,829 line:-2
Even though logging in general
has low overhead,


205
00:11:35,896 --> 00:11:39,366 line:-2
the log levels have different performance
relative to each other.


206
00:11:39,833 --> 00:11:42,169 line:-2
The levels that are less important
are faster.


207
00:11:42,603 --> 00:11:44,271 line:-1
The fault level is the slowest,


208
00:11:44,338 --> 00:11:46,607 line:-2
and the debug level
is the most performant.


209
00:11:47,941 --> 00:11:49,977 line:-1
Logging at the debug level is so fast


210
00:11:50,043 --> 00:11:52,846 line:-2
because debug messages
are not persisted at all.


211
00:11:52,913 --> 00:11:55,582 line:-2
They are discarded when the logs
aren't being streamed.


212
00:11:55,983 --> 00:11:59,253 line:-2
Further, the Swift compiler uses
sophisticated optimizations


213
00:11:59,319 --> 00:12:03,590 line:-2
to ensure that the code that creates
the messages is not even executed


214
00:12:03,657 --> 00:12:05,792 line:-1
when the debug messages are discarded.


215
00:12:06,460 --> 00:12:09,463 line:-2
This means that you can log
verbose messages at the debug level


216
00:12:09,530 --> 00:12:12,399 line:-2
and call expensive functions
to construct messages.


217
00:12:12,466 --> 00:12:14,535 line:-1
Your users won't pay the cost for them.


218
00:12:18,472 --> 00:12:20,040 line:-1
As I showed with my Fruta app,


219
00:12:20,107 --> 00:12:22,910 line:-2
including runtime data,
such as task identifiers,


220
00:12:22,976 --> 00:12:25,812 line:-2
in a log message made it more useful
for debugging.


221
00:12:26,246 --> 00:12:28,882 line:-2
However,
raw data such as numbers and strings


222
00:12:28,949 --> 00:12:31,285 line:-1
can be hard to understand and interpret.


223
00:12:31,585 --> 00:12:35,389 line:-2
The Logging APIs offer many ways
to format data for readability


224
00:12:35,455 --> 00:12:36,723 line:-1
with no runtime cost.


225
00:12:37,191 --> 00:12:38,792 line:-1
Let us return to the Fruta app


226
00:12:38,859 --> 00:12:41,995 line:-2
to see how formatting of log messages
can help with debugging.


227
00:12:42,462 --> 00:12:45,165 line:-2
I see a performance problem
in the gift cards view.


228
00:12:45,666 --> 00:12:48,001 line:-1
Sometimes loading cards takes too long.


229
00:12:48,635 --> 00:12:51,505 line:-2
The app uses multiple servers
to load gift cards.


230
00:12:51,939 --> 00:12:55,776 line:-2
I suspect that the performance problem
is related to which servers are chosen.


231
00:12:56,176 --> 00:12:58,378 line:-2
To investigate this,
I've added some logging


232
00:12:58,445 --> 00:13:01,582 line:-2
to gather some statistics
about the communication with servers.


233
00:13:05,385 --> 00:13:08,288 line:-1
For each task, I log the task identifier,


234
00:13:08,856 --> 00:13:11,525 line:-2
the identifier of the gift card
that was fetched,


235
00:13:11,592 --> 00:13:13,427 line:-1
the server that served the request,


236
00:13:13,493 --> 00:13:16,129 line:-2
and the total duration
the task took to complete.


237
00:13:18,765 --> 00:13:21,468 line:-1
Now I will plug in my iPhone to my Mac


238
00:13:21,535 --> 00:13:25,072 line:-2
and run the app from Xcode
and view the logs in Xcode's console.


239
00:13:27,641 --> 00:13:30,811 line:-2
Unfortunately,
the logs are very hard to understand,


240
00:13:30,878 --> 00:13:32,312 line:-1
as they are not aligned well.


241
00:13:32,379 --> 00:13:35,582 line:-2
I will now use the formatting options
to make this look better.


242
00:13:41,688 --> 00:13:44,558 line:-2
First, let me make
the gift card identifier fixed-width


243
00:13:44,625 --> 00:13:48,195 line:-2
by displaying the maximum number
of characters a card identifier can have.


244
00:13:57,905 --> 00:14:00,674 line:-2
I will also round off the duration
to two decimal places,


245
00:14:00,741 --> 00:14:02,709 line:-1
since I don't need that much precision.


246
00:14:08,582 --> 00:14:11,084 line:-2
Let me relaunch the app
and view the logs again.


247
00:14:22,262 --> 00:14:25,098 line:-2
Now you see that
the logs are much easier to read.


248
00:14:25,666 --> 00:14:27,467 line:-1
In fact, since they are aligned well,


249
00:14:27,534 --> 00:14:30,938 line:-2
I can even hold down the option key
and copy the fields using "column select."


250
00:14:35,576 --> 00:14:38,145 line:-2
I will paste them in Numbers
and visualize the data.


251
00:14:42,649 --> 00:14:44,718 line:-1
With this graph, I can immediately notice


252
00:14:44,785 --> 00:14:47,287 line:-2
that the slow tasks
are all served by server three,


253
00:14:47,354 --> 00:14:49,857 line:-2
so I will take that server off-line
for maintenance.


254
00:14:53,560 --> 00:14:56,997 line:-2
To recap, you can use the optional
"format" and "align" parameter


255
00:14:57,064 --> 00:14:58,232 line:-1
to format data.


256
00:14:58,799 --> 00:15:01,134 line:-2
Since formatting data
using the Logging APIs


257
00:15:01,201 --> 00:15:03,136 line:-1
doesn't add to the cost of a log call,


258
00:15:03,203 --> 00:15:05,472 line:-1
you can use formatting as much as you like


259
00:15:05,539 --> 00:15:08,175 line:-2
to make your data look pretty
and easy to understand.


260
00:15:08,876 --> 00:15:11,211 line:-2
The Logging APIs
provide many formatting options,


261
00:15:11,278 --> 00:15:13,580 line:-1
of which I only showed you a few.


262
00:15:14,848 --> 00:15:18,619 line:-2
You can see the full range of options
using Xcode's code completion,


263
00:15:18,685 --> 00:15:21,755 line:-2
including formatting numbers
as hexadecimal,


264
00:15:21,822 --> 00:15:24,224 line:-1
octal, exponential, and others.


265
00:15:25,359 --> 00:15:26,426 line:-1
As we saw before,


266
00:15:26,493 --> 00:15:30,330 line:-2
you can use privacy options to control
the visibility of data in the logs.


267
00:15:30,397 --> 00:15:34,535 line:-2
It is really important to take seriously
the privacy of the logged data.


268
00:15:35,169 --> 00:15:37,538 line:-2
This is because logging happens
all the time,


269
00:15:37,871 --> 00:15:41,108 line:-2
even after your app has shipped
and is in the hands of your users.


270
00:15:41,475 --> 00:15:45,312 line:-2
Logs can be collected by anyone
who has physical access to the device


271
00:15:45,379 --> 00:15:46,680 line:-1
and also its passcode.


272
00:15:47,047 --> 00:15:49,683 line:-2
Therefore,
it is important that the log messages


273
00:15:49,750 --> 00:15:52,252 line:-2
do not mark
any personal information public,


274
00:15:52,319 --> 00:15:54,087 line:-1
which could expose it in the logs.


275
00:15:55,355 --> 00:15:59,726 line:-2
You can get a lot of the same benefits
as using public without actually doing so


276
00:15:59,793 --> 00:16:02,296 line:-1
by using an equality-preserving hash.


277
00:16:02,796 --> 00:16:04,965 line:-2
This does not reveal
the content of the data


278
00:16:05,032 --> 00:16:08,368 line:-2
but still allows you to know
when the logged values are the same,


279
00:16:08,435 --> 00:16:10,204 line:-1
which can help in filtering logs.


280
00:16:11,305 --> 00:16:14,174 line:-2
For example,
here I'm passing a mask parameter


281
00:16:14,241 --> 00:16:16,210 line:-1
to the .private privacy option


282
00:16:16,276 --> 00:16:19,613 line:-2
in order to log a customer's
bank account number with a hash.


283
00:16:20,180 --> 00:16:23,383 line:-2
This lets me find out when
two log messages refer to the same account


284
00:16:23,450 --> 00:16:25,319 line:-1
without revealing the account number.


285
00:16:26,854 --> 00:16:30,290 line:-2
The Logger APIs I described are available
in iOS 14.


286
00:16:30,858 --> 00:16:35,128 line:-2
If your app targets prior releases,
you can use the os_log function


287
00:16:35,195 --> 00:16:37,464 line:-1
that accepts printf-style format strings.


288
00:16:38,165 --> 00:16:41,168 line:-2
Starting in this release,
string interpolations can also be passed


289
00:16:41,235 --> 00:16:44,705 line:-2
to the os_log function,
just like with Logger.


290
00:16:45,939 --> 00:16:49,476 line:-2
To summarize, you can take advantage
of new Swift logging APIs


291
00:16:49,543 --> 00:16:53,747 line:-2
to debug problems that would otherwise be
almost impossible to understand and fix.


292
00:16:54,381 --> 00:16:57,618 line:-2
This is possible because you can
retrieve logs from your development device


293
00:16:57,684 --> 00:17:01,021 line:-2
and drill down into them
without even having to reproduce the bug.


294
00:17:01,488 --> 00:17:04,090 line:-2
The logging APIs offer you both
high performance


295
00:17:04,156 --> 00:17:05,992 line:-1
and at the same time rich formatting.


296
00:17:06,560 --> 00:17:09,128 line:-2
Therefore,
you can log informative messages,


297
00:17:09,195 --> 00:17:12,866 line:-2
secure in the knowledge that you won't
make your apps slow for your end users.


298
00:17:13,467 --> 00:17:14,535 line:-1
Thanks for watching.

