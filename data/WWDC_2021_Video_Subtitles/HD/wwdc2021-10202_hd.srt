2
00:00:00.334 --> 00:00:03.337 line:-1
[upbeat music]


3
00:00:03.370 --> 00:00:09.009 line:-1
♪ ♪


4
00:00:09.042 --> 00:00:10.777 line:-2
[Ravi]
I am Ravi Kandadai Madhavan,


5
00:00:10.811 --> 00:00:11.912 line:-1
and in this video,


6
00:00:11.945 --> 00:00:13.914 line:-2
I will show how to use
the static analyzer


7
00:00:13.947 --> 00:00:17.351 line:-2
in Xcode to find and fix
bugs in your apps.


8
00:00:17.384 --> 00:00:19.253 line:-2
First, I will demonstrate
how to use


9
00:00:19.286 --> 00:00:23.223 line:-2
the static analyzer to find bugs
and also understand them.


10
00:00:23.257 --> 00:00:26.226 line:-2
Then, I will describe
the new checks in Xcode 13,


11
00:00:26.260 --> 00:00:30.163 line:-2
which can help find more
kinds of issues in your code.


12
00:00:30.197 --> 00:00:31.765 line:-2
Finally,
I will describe the ways


13
00:00:31.798 --> 00:00:33.534 line:-2
in which you can
customize the analyzer


14
00:00:33.567 --> 00:00:37.704 line:-2
to better integrate it
with your development workflow.


15
00:00:37.738 --> 00:00:41.008 line:-2
Let's now see how to use
the analyzer to find bugs.


16
00:00:41.041 --> 00:00:44.912 line:-2
The static analyzer is a tool
in Xcode that can discover bugs


17
00:00:44.945 --> 00:00:48.448 line:-2
by analyzing the source code
without running it,


18
00:00:48.482 --> 00:00:50.817 line:-2
so it can reveal bugs,
even before you do


19
00:00:50.851 --> 00:00:54.021 line:-2
testing and quality assurance
of your app.


20
00:00:54.054 --> 00:00:56.123 line:-2
It can also find problems
in code paths


21
00:00:56.156 --> 00:00:59.326 line:-2
that are rare
and not covered by tests.


22
00:00:59.359 --> 00:01:03.463 line:-2
The analyzer finds bugs in C/C++
and Objective-C code,


23
00:01:03.497 --> 00:01:06.700 line:-2
even in mixed Swift
and Objective-C projects.


24
00:01:06.733 --> 00:01:08.368 line:-2
Let us see the analyzer
in action


25
00:01:08.402 --> 00:01:11.038 line:-1
using an app I am developing.


26
00:01:11.071 --> 00:01:13.941 line:-2
I am trying to improve
an existing app written in Swift


27
00:01:13.974 --> 00:01:18.378 line:-2
and Objective-C that allows
exploring the solar system.


28
00:01:18.412 --> 00:01:21.348 line:-2
This is the Xcode project
for the app.


29
00:01:21.381 --> 00:01:23.417 line:-2
I am going to run
the Static Analyzer to see


30
00:01:23.450 --> 00:01:26.353 line:-2
if it finds anything wrong
with my code.


31
00:01:26.386 --> 00:01:27.888 line:-1
It's very easy to run.


32
00:01:27.921 --> 00:01:30.390 line:-2
Just go to Product
and choose Analyze,


33
00:01:30.424 --> 00:01:33.427 line:-2
or use the keyboard shortcut
Command-Shift-B.


34
00:01:36.463 --> 00:01:40.801 line:-2
You can see the analyzer running
in the status bar of Xcode.


35
00:01:40.834 --> 00:01:44.071 line:-2
Analyzing your project is
very similar to building it.


36
00:01:44.104 --> 00:01:47.107 line:-2
The analyzer scans all
the sources files in the targets


37
00:01:47.140 --> 00:01:51.278 line:-2
of the currently-active scheme
looking for bugs.


38
00:01:51.311 --> 00:01:52.813 line:-1
As you see in the status,


39
00:01:52.846 --> 00:01:55.415 line:-2
the analyzer has found
an issue in my project.


40
00:01:55.449 --> 00:01:57.818 line:-2
I can go
to Xcode's issue navigator


41
00:01:57.851 --> 00:02:00.554 line:-1
to learn more about it.


42
00:02:00.587 --> 00:02:02.322 line:-2
As I showed you,
all it takes to run


43
00:02:02.356 --> 00:02:05.425 line:-2
the analyzer on your project
is a single click.


44
00:02:05.459 --> 00:02:07.194 line:-2
And with this single click,
you can find


45
00:02:07.227 --> 00:02:11.198 line:-2
several kinds of bugs,
like security issues,


46
00:02:11.231 --> 00:02:15.936 line:-2
logical bugs, misuse of APIs,
and many more.


47
00:02:15.969 --> 00:02:18.338 line:-2
The analyzer can not only
find bugs,


48
00:02:18.372 --> 00:02:20.374 line:-1
but can also explain them.


49
00:02:20.407 --> 00:02:22.242 line:-2
Let's get back to the bug found
in my app


50
00:02:22.276 --> 00:02:24.278 line:-1
and try to understand it.


51
00:02:24.311 --> 00:02:26.880 line:-2
The problem here is
that the Objective-C method


52
00:02:26.914 --> 00:02:31.351 line:-2
positionAtDate is returning nil
when it is not supposed to.


53
00:02:31.385 --> 00:02:34.221 line:-2
The method's return value
is declared to be non-null


54
00:02:34.254 --> 00:02:36.490 line:-1
in the method's definition.


55
00:02:36.523 --> 00:02:38.392 line:-2
But now,
I want to understand how


56
00:02:38.425 --> 00:02:41.395 line:-1
this method is returning nil.


57
00:02:41.428 --> 00:02:43.263 line:-2
You can expand
the analyzer issues


58
00:02:43.297 --> 00:02:46.834 line:-2
and see the sequence of events
that lead to the bug.


59
00:02:46.867 --> 00:02:49.036 line:-2
The events are also
shown in the editor,


60
00:02:49.069 --> 00:02:52.539 line:-2
alongside the statements
where they happen.


61
00:02:52.573 --> 00:02:55.709 line:-2
The arrows show how
the events are ordered.


62
00:02:55.742 --> 00:03:00.080 line:-2
I find it easier to read these
reports from bottom to top.


63
00:03:00.113 --> 00:03:01.515 line:-1
The last event shows


64
00:03:01.548 --> 00:03:05.485 line:-2
that the returned value,
position, is nil.


65
00:03:05.519 --> 00:03:08.388 line:-2
The previous events show
that this is because the method


66
00:03:08.422 --> 00:03:11.325 line:-2
regularPositionAtDate,
meant to initialize position,


67
00:03:11.358 --> 00:03:15.028 line:-2
is not called because
its receiver object is nil.


68
00:03:16.263 --> 00:03:18.332 line:-2
Looking at the arrows,
this happens along


69
00:03:18.365 --> 00:03:21.268 line:-1
the default case of the switch.


70
00:03:21.301 --> 00:03:23.637 line:-2
Going back to the beginning
of the report reveals


71
00:03:23.670 --> 00:03:26.039 line:-2
that the receiver object
is initialized to nil


72
00:03:26.073 --> 00:03:29.743 line:-2
and remains so
along the default case.


73
00:03:29.776 --> 00:03:33.347 line:-2
Now, I understand that I haven't
handled objects that are not


74
00:03:33.380 --> 00:03:35.883 line:-2
spherical or irregular
within the switch.


75
00:03:37.618 --> 00:03:39.152 line:-1
To fix this, I am going to make


76
00:03:39.186 --> 00:03:43.323 line:-2
the default case identical
to the spherical case.


77
00:03:43.357 --> 00:03:46.360 line:-2
I will rerun the analyzer
to make sure the issue is fixed.


78
00:03:48.161 --> 00:03:49.830 line:-2
I am quite relieved
that this bug


79
00:03:49.863 --> 00:03:52.933 line:-2
is detected while I am
developing the app.


80
00:03:52.966 --> 00:03:56.303 line:-2
This is because returning nil
from an Objective-C method


81
00:03:56.336 --> 00:03:58.939 line:-2
annotated as returning
a non-null value


82
00:03:58.972 --> 00:04:02.142 line:-2
can result in unexpected
runtime behavior when the method


83
00:04:02.176 --> 00:04:06.046 line:-2
is called from Swift,
which happens in my code.


84
00:04:06.079 --> 00:04:08.782 line:-2
Thankfully, running
the static analyzer has revealed


85
00:04:08.815 --> 00:04:12.819 line:-2
this bug before it could
affect the users of my app.


86
00:04:12.853 --> 00:04:16.356 line:-2
In Xcode 13, we have made
the analyzer even better,


87
00:04:16.390 --> 00:04:19.326 line:-2
and we have some
brand-new checks for you.


88
00:04:19.359 --> 00:04:23.597 line:-2
The analyzer can now catch
more logic bugs in your code.


89
00:04:23.630 --> 00:04:26.834 line:-2
It can detect infinite loops
and redundant code,


90
00:04:26.867 --> 00:04:30.237 line:-2
such as unnecessary
branch conditions.


91
00:04:30.270 --> 00:04:34.141 line:-2
It can report side-effects
in asserts, and in C++ code,


92
00:04:34.174 --> 00:04:38.979 line:-2
it can catch errors in the use
of move and forward operators.


93
00:04:39.012 --> 00:04:41.648 line:-2
Parts of these new checks
are open-source contributions


94
00:04:41.682 --> 00:04:44.685 line:-1
made to Apple's Clang compiler.


95
00:04:44.718 --> 00:04:49.089 line:-2
Let's see some examples of bugs
these new checks can catch.


96
00:04:49.122 --> 00:04:52.759 line:-2
In general, it's a good practice
to use asserts to validate


97
00:04:52.793 --> 00:04:55.462 line:-2
your expectations
about your code.


98
00:04:55.495 --> 00:04:57.264 line:-1
However, you must make sure


99
00:04:57.297 --> 00:04:59.199 line:-2
that asserts do not have
side effects,


100
00:04:59.233 --> 00:05:02.202 line:-2
such as writing
to variables or memory.


101
00:05:02.236 --> 00:05:04.304 line:-2
For example,
consider the code snippet


102
00:05:04.338 --> 00:05:06.039 line:-2
shown here that traverses
an array


103
00:05:06.073 --> 00:05:08.542 line:-2
of astronomical objects
and counts the number


104
00:05:08.575 --> 00:05:11.378 line:-2
of those that have
associated moons.


105
00:05:11.411 --> 00:05:14.348 line:-2
It has an NSAssert that checks
that the number of objects


106
00:05:14.381 --> 00:05:18.285 line:-2
with moons is less than or equal
to the number of planets.


107
00:05:18.318 --> 00:05:20.854 line:-2
But the assert has
a side effect of incrementing


108
00:05:20.888 --> 00:05:23.891 line:-2
the counter tracking
the objects with moons.


109
00:05:23.924 --> 00:05:26.560 line:-2
Updates like this can
be lost in the release


110
00:05:26.593 --> 00:05:28.662 line:-2
build configuration,
where asserts could


111
00:05:28.695 --> 00:05:32.032 line:-2
be disabled to make
your code run faster.


112
00:05:32.065 --> 00:05:34.234 line:-2
So this code may not
increment the counter


113
00:05:34.268 --> 00:05:36.870 line:-1
at all in release builds.


114
00:05:36.904 --> 00:05:39.606 line:-2
It's easy to miss bugs like
these during development,


115
00:05:39.640 --> 00:05:42.776 line:-2
as they do not show up
in debug builds.


116
00:05:42.809 --> 00:05:45.546 line:-2
Starting Xcode 13,
the analyzer can find


117
00:05:45.579 --> 00:05:48.882 line:-2
such issues in your code
and report it.


118
00:05:48.916 --> 00:05:51.285 line:-2
This check works
not just for NSAsserts,


119
00:05:51.318 --> 00:05:54.888 line:-2
but also for asserts in C
and C++.


120
00:05:54.922 --> 00:05:56.557 line:-1
These bugs are easy to fix,


121
00:05:56.590 --> 00:05:58.025 line:-2
and you just move
the side effect


122
00:05:58.058 --> 00:06:00.394 line:-2
outside of the assert,
as shown here.


123
00:06:02.796 --> 00:06:05.465 line:-2
Infinite loops
are another common bug.


124
00:06:05.499 --> 00:06:06.834 line:-1
You might have seen it happen


125
00:06:06.867 --> 00:06:10.103 line:-2
when there are loops
with complex logic.


126
00:06:10.137 --> 00:06:12.906 line:-2
For instance,
the nested loop shown here tries


127
00:06:12.940 --> 00:06:17.611 line:-2
to populate a two-dimensional
grid with a value.


128
00:06:17.644 --> 00:06:20.214 line:-2
It hides a bug where
the variable value


129
00:06:20.247 --> 00:06:23.116 line:-2
is incremented by the inner loop
instead of column,


130
00:06:23.150 --> 00:06:26.253 line:-2
which is
the actual loop counter.


131
00:06:26.286 --> 00:06:29.790 line:-2
The analyzer can now detect such
mistakes and explain it to you.


132
00:06:31.358 --> 00:06:34.661 line:-2
Once you spot it,
this bug is very easy to fix.


133
00:06:34.695 --> 00:06:38.332 line:-2
Just replace value
by column.


134
00:06:38.365 --> 00:06:40.000 line:-2
Though these checks
find simple mistake,


135
00:06:40.033 --> 00:06:42.503 line:-2
we have found
real bugs with them.


136
00:06:42.536 --> 00:06:44.505 line:-2
Now you can use them, too,
and find bugs


137
00:06:44.538 --> 00:06:47.441 line:-2
and fix them as you develop
your app.


138
00:06:47.474 --> 00:06:51.178 line:-2
Xcode offers many customizations
for fine tuning the analyzer


139
00:06:51.211 --> 00:06:53.947 line:-2
to fit in
with your development workflow.


140
00:06:53.981 --> 00:06:56.550 line:-2
You can make the analyzer
run along with every build


141
00:06:56.583 --> 00:06:59.720 line:-2
of your project from
the project's build settings.


142
00:06:59.753 --> 00:07:02.089 line:-2
To quickly narrow down
on the relevant settings,


143
00:07:02.122 --> 00:07:04.892 line:-2
make use
of the search functionality.


144
00:07:04.925 --> 00:07:07.895 line:-2
For example, using "analysis"
as the search keyword,


145
00:07:07.928 --> 00:07:11.331 line:-2
I can look at just those options
relevant to the analyzer.


146
00:07:12.766 --> 00:07:14.468 line:-2
To enable
Analyze During 'Build',


147
00:07:14.501 --> 00:07:17.804 line:-2
all you need to do is
turn on a build setting.


148
00:07:17.838 --> 00:07:20.040 line:-2
Like incremental builds,
the analysis runs


149
00:07:20.073 --> 00:07:22.409 line:-1
only on files that are modified.


150
00:07:22.442 --> 00:07:25.145 line:-2
This makes running
the analyzer after code changes


151
00:07:25.179 --> 00:07:28.348 line:-1
both fast and easy.


152
00:07:28.382 --> 00:07:33.554 line:-2
The analyzer offers two modes
of analysis: shallow and deep.


153
00:07:33.587 --> 00:07:36.056 line:-2
Shallow mode is faster,
but avoids exploring


154
00:07:36.089 --> 00:07:39.326 line:-2
bugs spanning
multiple functions.


155
00:07:39.359 --> 00:07:40.494 line:-1
Use this mode in projects


156
00:07:40.527 --> 00:07:44.264 line:-2
that are sensitive to build
and analysis times.


157
00:07:44.298 --> 00:07:46.900 line:-2
As I mentioned earlier,
the analyzer has checks


158
00:07:46.934 --> 00:07:48.735 line:-2
for finding different kinds
of bugs,


159
00:07:48.769 --> 00:07:51.505 line:-1
and some of them are opt-in.


160
00:07:51.538 --> 00:07:52.906 line:-1
You can fine tune the checks


161
00:07:52.940 --> 00:07:55.676 line:-2
that suit your project
by enabling or disabling them


162
00:07:55.709 --> 00:07:58.545 line:-2
selectively from
the build settings.


163
00:07:58.579 --> 00:08:01.782 line:-2
For instance, if your project
has security-critical code,


164
00:08:01.815 --> 00:08:05.185 line:-2
enable the checks
for security issues.


165
00:08:05.219 --> 00:08:07.688 line:-2
On the other hand,
if you find that some issues


166
00:08:07.721 --> 00:08:10.991 line:-2
are not relevant to your code,
you can disable less useful


167
00:08:11.024 --> 00:08:14.027 line:-2
checks individually and still
benefit from the other checks.


168
00:08:17.197 --> 00:08:19.266 line:-2
You can also analyze
a single file


169
00:08:19.299 --> 00:08:21.969 line:-1
instead of the entire project.


170
00:08:22.002 --> 00:08:26.306 line:-2
Choose the file to analyze from
the Product > Perform Action menu.


171
00:08:26.340 --> 00:08:28.509 line:-2
Use this to check
your changes quickly,


172
00:08:28.542 --> 00:08:31.678 line:-2
without even needing
to build your project.


173
00:08:31.712 --> 00:08:35.616 line:-2
This is particularly useful
when modifying header files.


174
00:08:35.649 --> 00:08:39.419 line:-2
It would skip reanalyzing
all files importing it.


175
00:08:39,453 --> 00:08:42,556
The static analyzer
in Xcode can reveal bugs


176
00:08:42,589 --> 00:08:45,325
in your code very early
during development.


177
00:08:45,359 --> 00:08:48,729
Run it with a click of a button
and find many kinds of bugs.


178
00:08:48,762 --> 00:08:51,765
And don't forget to customize it
to your workflow.


179
00:08:51,798 --> 00:08:54,968
In Xcode 13, we have
further improved the analyzer


180
00:08:55,002 --> 00:08:58,572
and added many new checks
for finding logical bugs.


181
00:08:58.605 --> 00:09:01.642 line:-2
Use the analyzer and fix bugs
in your app


182
00:09:01.675 --> 00:09:03.844 line:-1
before they reach your users.


183
00:09:03.877 --> 00:09:06.914 line:-2
Thank you,
and enjoy the rest of WWDC!


184
00:09:06,947 --> 00:09:09,950
[upbeat music]

