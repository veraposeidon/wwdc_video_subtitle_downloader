2
00:00:00,067 --> 00:00:01,702 line:-1
[MAC STARTUP CHIME]


3
00:00:01,702 --> 00:00:05,138 line:-1
♪ Bass music playing ♪


4
00:00:05.138 --> 00:00:06.540 line:-1 position:50%
[KEYSTROKES]


5
00:00:06,540 --> 00:00:09,610 line:0 position:89% size:2%
♪


6
00:00:09.610 --> 00:00:12.446 line:-1 position:50%
Han Ming Ong: Hello,
my name is Han Ming Ong.


7
00:00:12,446 --> 00:00:15,916 line:-1
I'm an engineer
in the Xcode Debugger UI team.


8
00:00:15.916 --> 00:00:18.018 line:-1 position:50%
Today, I want to talk
about the improvements


9
00:00:18.018 --> 00:00:19.987 line:-1 position:50%
the team has made to breakpoints


10
00:00:19.987 --> 00:00:23.190 line:-1 position:50%
that will make your debugging
more productive.


11
00:00:23,190 --> 00:00:25,492 line:-1
Let’s start with
some breakpoint basics


12
00:00:25,492 --> 00:00:27,361 line:-1
to get everyone
on the same page.


13
00:00:27.361 --> 00:00:29.897 line:-1 position:50%
When you encounter
a bug in your program,


14
00:00:29.897 --> 00:00:33.934 line:-1 position:50%
it means it is not executing
to your expectation,


15
00:00:33.934 --> 00:00:35.702 line:-1 position:50%
and you want to check
with the debugger


16
00:00:35.702 --> 00:00:38.372 line:-1 position:50%
why reality has diverged.


17
00:00:38.372 --> 00:00:42.576 line:-1 position:50%
At this point, there are two
common activities that you do.


18
00:00:42.576 --> 00:00:44.912 line:-1 position:50%
One, you inspect
the process state


19
00:00:44.912 --> 00:00:47.648 line:-1 position:50%
to further understand
the situation.


20
00:00:47.648 --> 00:00:49.750 line:-1 position:50%
Two, you ascertain your logic


21
00:00:49,750 --> 00:00:52,953 line:-1
by stepping through
the process execution.


22
00:00:52,953 --> 00:00:55,889 line:-1
Both activities require you
to pause,


23
00:00:55.889 --> 00:00:59.059 line:-1 position:50%
ideally just before
the bug happens.


24
00:00:59.059 --> 00:01:04.031 line:-1 position:50%
And the best way to pause the
process is to use a breakpoint.


25
00:01:04.031 --> 00:01:06.266 line:-1 position:50%
We're going to talk
about three common breakpoints


26
00:01:06.266 --> 00:01:08.669 line:-1 position:50%
that you can create in Xcode.


27
00:01:08.669 --> 00:01:13.507 line:-1 position:50%
The first is
source file breakpoints.


28
00:01:13.507 --> 00:01:16.576 line:-1 position:50%
These are breakpoints
that are set in a single file.


29
00:01:16,576 --> 00:01:19,947 line:-1
The most common type
is the line breakpoint.


30
00:01:19.947 --> 00:01:22.082 line:-1 position:50%
It is the workhorse
of breakpoints


31
00:01:22.082 --> 00:01:25.052 line:-1 position:50%
and is excellent for pausing
on a line of code


32
00:01:25.052 --> 00:01:26.687 line:-1 position:50%
you want to inspect.


33
00:01:26.687 --> 00:01:28.188 line:-1 position:50%
The fastest way to create one


34
00:01:28,188 --> 00:01:30,357 line:-1
is simply to click
in the gutter,


35
00:01:30.357 --> 00:01:33.527 line:-1 position:50%
right next to the line
you want to pause.


36
00:01:33,527 --> 00:01:34,995 line:-1
Suppose at this point,


37
00:01:34,995 --> 00:01:38,465 line:-1
I would like to check the logic
of function convertedToVolume


38
00:01:38,465 --> 00:01:41,468 line:-1
by stepping into it.


39
00:01:43,971 --> 00:01:45,105 line:-1
But when I step in,


40
00:01:45.105 --> 00:01:48.241 line:-1 position:50%
I'm actually stepping
into a different expression.


41
00:01:48,241 --> 00:01:50,344 line:-1
The compiler has
rightly determined


42
00:01:50.344 --> 00:01:55.015 line:-1 position:50%
that adjustedDensity
needs be executed first.


43
00:01:55.015 --> 00:02:00.020 line:-1 position:50%
Of course, I can step out


44
00:02:00,020 --> 00:02:02,823 line:-1
and then step back
into the function,


45
00:02:02,823 --> 00:02:04,791 line:-1
but this can get laborious


46
00:02:04,791 --> 00:02:07,661 line:-1
when you have
to repeat it many times.


47
00:02:07.661 --> 00:02:08.862 line:-1 position:50%
What we are seeing here is


48
00:02:08.862 --> 00:02:14.334 line:-1 position:50%
that sometimes a line breakpoint
is not granular enough.


49
00:02:14.334 --> 00:02:17.037 line:-1 position:50%
That's because
the compiler has generated


50
00:02:17.037 --> 00:02:21.908 line:-1 position:50%
more than one location
for LLDB to stop at.


51
00:02:21.908 --> 00:02:23.877 line:-1 position:50%
What we really want is to pause


52
00:02:23.877 --> 00:02:27.714 line:-1 position:50%
just before convertedToVolume
is executed.


53
00:02:27,714 --> 00:02:32,519 line:-1
In Xcode 13, we are introducing
column breakpoints.


54
00:02:32.519 --> 00:02:35.789 line:-1 position:50%
This allows you to avoid the
shortcomings of line breakpoints


55
00:02:35.789 --> 00:02:38.458 line:-1 position:50%
when you need to pause
at certain expressions


56
00:02:38,458 --> 00:02:40,227 line:-1
along a line.


57
00:02:40.227 --> 00:02:43.063 line:-1 position:50%
To set a column breakpoint
on convertedToVolume,


58
00:02:43,063 --> 00:02:45,098 line:-1
you Command-click
on the expression


59
00:02:45.098 --> 00:02:47.234 line:-1 position:50%
to bring up the Actions popover


60
00:02:47.234 --> 00:02:50.771 line:-1 position:50%
and then select
Set Column Breakpoint.


61
00:02:50.771 --> 00:02:52.606 line:-1 position:50%
Just like with
a line breakpoint,


62
00:02:52,606 --> 00:02:57,110 line:-1
you can click on the icon
to disable or enable.


63
00:02:57.110 --> 00:02:58.345 line:-1 position:50%
You can double-click on it


64
00:02:58.345 --> 00:03:00.981 line:-1 position:50%
to bring up
the breakpoint editor


65
00:03:00,981 --> 00:03:04,584 line:-1
if you need to modify
the breakpoint.


66
00:03:04.584 --> 00:03:06.553 line:-1 position:50%
Since we don’t need
the line breakpoint anymore,


67
00:03:06,553 --> 00:03:10,323 line:-1
we can delete it by dragging
away from the gutter.


68
00:03:10,323 --> 00:03:13,493 line:-1
You can do the same thing
to our column breakpoint,


69
00:03:13.493 --> 00:03:16.830 line:-1 position:50%
but I'm just going
to leave it there.


70
00:03:16.830 --> 00:03:20.767 line:-1 position:50%
Control or right mouse-click
brings up the contextual menu


71
00:03:20.767 --> 00:03:23.470 line:-1 position:50%
which includes
our previous action.


72
00:03:23,470 --> 00:03:28,775 line:-1
Here I'm going to select
Reveal in Breakpoint Navigator


73
00:03:28.775 --> 00:03:30.644 line:-1 position:50%
The subtitle has been amended


74
00:03:30,644 --> 00:03:33,580 line:-1
to show you the column
of the breakpoint.


75
00:03:33.580 --> 00:03:37.017 line:-1 position:50%
When we continue,


76
00:03:37.017 --> 00:03:39.786 line:-1 position:50%
we'll iterate through
the next NutritionFact


77
00:03:39,786 --> 00:03:42,923 line:-1
and hit our newly set
column breakpoint.


78
00:03:42.923 --> 00:03:46.059 line:-1 position:50%
When the breakpoint hits,
Xcode uses the line PC


79
00:03:46.059 --> 00:03:48.128 line:-1 position:50%
to tell you the paused line.


80
00:03:48.128 --> 00:03:52.032 line:-1 position:50%
It draws a light green
highlight over the line.


81
00:03:52,032 --> 00:03:55,469 line:-1
In Xcode 11.4,
we introduced column PC.


82
00:03:55,469 --> 00:03:58,105 line:-1
The column PC shows you
the paused column


83
00:03:58.105 --> 00:04:01.942 line:-1 position:50%
by drawing a green underscore
under an expression.


84
00:04:01,942 --> 00:04:03,577 line:-1
So it lets you know
the expression


85
00:04:03.577 --> 00:04:07.814 line:-1 position:50%
the debugger is going
to execute next.


86
00:04:07.814 --> 00:04:11.284 line:-1 position:50%
Since I'm seeing the column PC
under convertedToVolume,


87
00:04:11.284 --> 00:04:15.155 line:-1 position:50%
I can confidently do a one-step
into the function.


88
00:04:15.155 --> 00:04:17.357 line:-1 position:50%
Column breakpoints
are particularly useful


89
00:04:17.357 --> 00:04:21.061 line:-1 position:50%
for closures in Swift
or blocks in Objective-C.


90
00:04:21.061 --> 00:04:25.232 line:-1 position:50%
Sometimes a single Swift line
can have multiple closures,


91
00:04:25,232 --> 00:04:28,168 line:-1
just like this single line 269.


92
00:04:28,168 --> 00:04:31,338 line:-1
When a compiler compiles a file
under debug condition,


93
00:04:31.338 --> 00:04:34.841 line:-1 position:50%
it creates a map called
a line table


94
00:04:34,841 --> 00:04:39,546 line:-1
that maps source lines and
columns to compiled addresses.


95
00:04:39.546 --> 00:04:41.515 line:-1 position:50%
So for each closure
on this line,


96
00:04:41,515 --> 00:04:44,117 line:-1
the compiler generates
a line table entry


97
00:04:44.117 --> 00:04:46.987 line:-1 position:50%
that the debugger
will use to pause.


98
00:04:46.987 --> 00:04:50.423 line:-1 position:50%
Suppose I want to inspect
the anonymous parameter $0


99
00:04:50.423 --> 00:04:52.225 line:-1 position:50%
of the last closure,


100
00:04:52.225 --> 00:04:56.930 line:-1 position:50%
I can set a line breakpoint
at 269 but after pausing,


101
00:04:56.930 --> 00:04:58.598 line:-1 position:50%
to reach the last closure,


102
00:04:58.598 --> 00:05:01.034 line:-1 position:50%
I need to do numerous
step-in and step-out


103
00:05:01,034 --> 00:05:05,672 line:-1
due to the generated
line table entries.


104
00:05:05,672 --> 00:05:08,041 line:-1
We have seen that with Xcode 13,


105
00:05:08,041 --> 00:05:11,945 line:-1
we can simply set a column
breakpoint at the last $0


106
00:05:11.945 --> 00:05:15.048 line:-1 position:50%
and when paused, we are exactly
where we want to be


107
00:05:15,048 --> 00:05:18,952 line:-1
and we can inspect $0
to our heart's content.


108
00:05:18.952 --> 00:05:22.222 line:-1 position:50%
Hmm, looks having
Fragrant Durian Smoothie --


109
00:05:22.222 --> 00:05:25.625 line:-1 position:50%
for breakfast no less --
is a great way to start the day.


110
00:05:25,625 --> 00:05:27,327 line:-1
Yummy!


111
00:05:27.327 --> 00:05:30.397 line:-1 position:50%
Let's move on
to symbolic breakpoints.


112
00:05:30.397 --> 00:05:32.299 line:-1 position:50%
These are breakpoints
on function names


113
00:05:32.299 --> 00:05:36.603 line:-1 position:50%
that will pause the process when
those functions are executed.


114
00:05:36.603 --> 00:05:38.572 line:-1 position:50%
They are very helpful
in situations


115
00:05:38,572 --> 00:05:41,141 line:-1
where source file breakpoints
cannot be used


116
00:05:41.141 --> 00:05:43.176 line:-1 position:50%
or are inconvenient.


117
00:05:43,176 --> 00:05:45,745 line:-1
For instance, you don’t have
access to the source files


118
00:05:45.745 --> 00:05:49.216 line:-1 position:50%
and hence, you can't compile
them with debug info.


119
00:05:49.216 --> 00:05:53.053 line:-1 position:50%
Or you have many subclasses that
implement a common function,


120
00:05:53,053 --> 00:05:57,591 line:-1
and it is cumbersome to set a
file breakpoint in each of them.


121
00:05:57.591 --> 00:06:01.928 line:-1 position:50%
Let’s take a look.


122
00:06:01,928 --> 00:06:03,663 line:-1
We will click on the Add button


123
00:06:03,663 --> 00:06:06,399 line:-1
at the bottom
of the breakpoint navigator.


124
00:06:06.399 --> 00:06:10.103 line:-1 position:50%
This brings up a list
of breakpoints we can create.


125
00:06:10.103 --> 00:06:12.072 line:-1 position:50%
We will select
Symbolic Breakpoint


126
00:06:12,072 --> 00:06:15,175 line:-1
and immediately
the breakpoint editor appears


127
00:06:15,175 --> 00:06:19,012 line:-1
so that we can enter
the symbol name.


128
00:06:19,012 --> 00:06:22,349 line:-1
Suppose we are interested in
pausing in the toggle function


129
00:06:22,349 --> 00:06:25,385 line:-1
that is implemented
in a few classes.


130
00:06:25.385 --> 00:06:27.454 line:-1 position:50%
Instead of looking
for each of them,


131
00:06:27,454 --> 00:06:29,823 line:-1
we can just enter
toggle here.


132
00:06:29,823 --> 00:06:34,761 line:-1
[KEYSTROKES]


133
00:06:34,761 --> 00:06:37,797 line:-1
But you need to be careful
about function names


134
00:06:37,797 --> 00:06:40,834 line:-1
that are common words.


135
00:06:40.834 --> 00:06:44.804 line:-1 position:50%
This is because LLDB will match
the name in all the libraries


136
00:06:44.804 --> 00:06:49.109 line:-1 position:50%
that are loaded in the process,
including the system libraries.


137
00:06:49.109 --> 00:06:50.310 line:-1 position:50%
If unrestricted,


138
00:06:50.310 --> 00:06:53.179 line:-1 position:50%
there can be many resolved
breakpoint locations,


139
00:06:53.179 --> 00:06:55.915 line:-1 position:50%
sometimes even in the thousands.


140
00:06:55.915 --> 00:06:58.952 line:-1 position:50%
This can be annoying if many
of them are constantly hit


141
00:06:58.952 --> 00:07:02.455 line:-1 position:50%
by the execution path.


142
00:07:02,455 --> 00:07:09,362 line:-1
Thankfully, we can restrict the
search to a particular module.


143
00:07:09.362 --> 00:07:11.398 line:-1 position:50%
A module is a binary or image


144
00:07:11.398 --> 00:07:13.733 line:-1 position:50%
that can be loaded
during execution,


145
00:07:13,733 --> 00:07:15,702 line:-1
including the main binary.


146
00:07:15.702 --> 00:07:20.140 line:-1 position:50%
Here we enter "Fruta,"


147
00:07:20.140 --> 00:07:22.676 line:-1 position:50%
which is the binary name
of our app.


148
00:07:22,676 --> 00:07:25,078 line:-1
And we get three
resolved locations,


149
00:07:25,078 --> 00:07:28,181 line:-1
which is a lot more manageable.


150
00:07:28.181 --> 00:07:29.849 line:-1 position:50%
Since we have selected
a smoothie,


151
00:07:29,849 --> 00:07:33,586 line:-1
let’s toggle
the favorite button.


152
00:07:33,586 --> 00:07:35,188 line:-1
We will hit
our symbolic breakpoint


153
00:07:35,188 --> 00:07:37,757 line:-1
that was just set.


154
00:07:37.757 --> 00:07:40.193 line:-1 position:50%
Now, for symbolic breakpoints,


155
00:07:40,193 --> 00:07:44,531 line:-1
you know it is fairly easy
to make a typographic error.


156
00:07:44.531 --> 00:07:46.433 line:-1 position:50%
And then during
program execution,


157
00:07:46,433 --> 00:07:47,901 line:-1
the breakpoint doesn't hit


158
00:07:47.901 --> 00:07:51.137 line:-1 position:50%
and you are left
scratching your head.


159
00:07:51,137 --> 00:07:54,641 line:-1
Let’s try to create one
called convertToMass.


160
00:07:59,179 --> 00:08:00,947 line:-1
New in Xcode 13,


161
00:08:00,947 --> 00:08:05,185 line:-1
if a breakpoint is not resolved
to any location by LLDB,


162
00:08:05.185 --> 00:08:11.524 line:-1 position:50%
Xcode will show you
a dashed icon.


163
00:08:11,524 --> 00:08:15,428 line:-1
There is a myriad of reasons
why a breakpoint is not resolved


164
00:08:15.428 --> 00:08:17.797 line:-1 position:50%
but there are some
common explanations.


165
00:08:17.797 --> 00:08:21.000 line:-1 position:50%
If you hover over
the unresolved breakpoint icon,


166
00:08:21,000 --> 00:08:23,136 line:-1
we have a tooltip
that can help you out.


167
00:08:23.136 --> 00:08:24.838 line:-1 position:50%
The first couple of reasons


168
00:08:24,838 --> 00:08:26,906 line:-1
pertain to the kind
of breakpoint.


169
00:08:26,906 --> 00:08:28,508 line:-1
So for a symbolic breakpoint,


170
00:08:28,508 --> 00:08:30,643 line:-1
the name has to be
spelled correctly


171
00:08:30.643 --> 00:08:34.347 line:-1 position:50%
and the symbol has to exist
in its library.


172
00:08:34,347 --> 00:08:36,816 line:-1
The next reason is more generic:


173
00:08:36.816 --> 00:08:40.153 line:-1 position:50%
the library for the breakpoint
must be loaded.


174
00:08:40.153 --> 00:08:42.489 line:-1 position:50%
Sometimes, the library
is only loaded


175
00:08:42.489 --> 00:08:44.657 line:-1 position:50%
after you have done
some user action,


176
00:08:44.657 --> 00:08:47.761 line:-1 position:50%
like clicking on a button,
and at that point,


177
00:08:47.761 --> 00:08:51.364 line:-1 position:50%
LLDB will automatically resolve
the breakpoint for you.


178
00:08:51,364 --> 00:08:54,801 line:-1
In this case,
I suspect I have a bad spelling.


179
00:08:54.801 --> 00:08:56.236 line:-1 position:50%
Let’s figure it out.


180
00:08:56,236 --> 00:08:59,472 line:-1
One way is to use
the find navigator


181
00:08:59,472 --> 00:09:04,344 line:-1
and search for "convert."


182
00:09:04.344 --> 00:09:06.646 line:-1 position:50%
As you can see,
there are quite a few results


183
00:09:06.646 --> 00:09:10.583 line:-1 position:50%
and it will take some time
to analyze them visually.


184
00:09:10,583 --> 00:09:15,955 line:-1
Instead, let’s use
a different trick through LLDB.


185
00:09:15,955 --> 00:09:18,491 line:-1
In Xcode console,


186
00:09:18,491 --> 00:09:23,396 line:-1
we type `image` —
which also means module —


187
00:09:23.396 --> 00:09:30.837 line:-1 position:50%
`lookup -r` for regex,
`n` for name, `convert`


188
00:09:30.837 --> 00:09:32.405 line:-1 position:50%
[KEYSTROKES]


189
00:09:32,405 --> 00:09:37,977 line:-1
and we supply the module name,
Fruta to restrict the search.


190
00:09:37,977 --> 00:09:40,146 line:-1
You can see we only have
four matches


191
00:09:40,146 --> 00:09:42,882 line:-1
and have certainly misspelled
the function name.


192
00:09:42.882 --> 00:09:46.686 line:-1 position:50%
It should be "convertedToMass."


193
00:09:46,686 --> 00:09:51,958 line:-1
Let’s copy and paste it
into our breakpoint editor.


194
00:09:57,130 --> 00:10:00,867 line:-1
And this time, LLDB has
resolved it successfully


195
00:10:00,867 --> 00:10:03,870 line:-1
and given us
location number one.


196
00:10:06,206 --> 00:10:09,442 position:50%
If you are interested
in other LLDB tips and tricks,


197
00:10:09,442 --> 00:10:11,544 position:50%
please watch
our previous presentation,


198
00:10:11,544 --> 00:10:14,280 position:50%
"LLDB: Beyond 'po'."


199
00:10:14,280 --> 00:10:17,784 line:-1
Let’s bring up a different file.


200
00:10:22,722 --> 00:10:24,991 line:-1
Unresolved breakpoints
can also be seen


201
00:10:24.991 --> 00:10:27.927 line:-1 position:50%
in source file breakpoints.


202
00:10:27.927 --> 00:10:30.296 line:-1 position:50%
There are two reasons
that pertain to them.


203
00:10:30.296 --> 00:10:31.431 line:-1 position:50%
First,


204
00:10:31.431 --> 00:10:34.734 line:-1 position:50%
the line for the breakpoint
must be compiled.


205
00:10:34.734 --> 00:10:37.470 line:-1 position:50%
In this case, line 23
was not compiled


206
00:10:37.470 --> 00:10:41.508 line:-1 position:50%
because it's in the else part
of the compiler condition.


207
00:10:41,508 --> 00:10:44,410 line:-1
Also, the compiler must have
generated debug info


208
00:10:44.410 --> 00:10:45.845 line:-1 position:50%
for the module.


209
00:10:45,845 --> 00:10:49,382 line:-1
If not, you need to check
your build settings.


210
00:10:49,382 --> 00:10:52,185 line:-1
Next is runtime issue
breakpoints.


211
00:10:52.185 --> 00:10:55.555 line:-1 position:50%
A runtime issue is an issue
that occurs at runtime —


212
00:10:55,555 --> 00:10:59,559 line:-1
for example, changing a UI
state in a background thread.


213
00:10:59.559 --> 00:11:01.895 line:-1 position:50%
It is not as serious as a crash,


214
00:11:01,895 --> 00:11:04,864 line:-1
and by default, Xcode
doesn't pause your process,


215
00:11:04.864 --> 00:11:06.966 line:-1 position:50%
because it can be too disruptive


216
00:11:06.966 --> 00:11:11.371 line:-1 position:50%
when you are focusing
on a different bug.


217
00:11:11.371 --> 00:11:14.407 line:-1 position:50%
Instead, when a runtime
issue occurs,


218
00:11:14,407 --> 00:11:16,209 line:-1
Xcode records the backtrace


219
00:11:16,209 --> 00:11:19,812 line:-1
and presents it
in the Issue navigator.


220
00:11:19.812 --> 00:11:22.415 line:-1 position:50%
But because the issue
happened in the past,


221
00:11:22.415 --> 00:11:27.854 line:-1 position:50%
there's no point in inspecting
the current process state.


222
00:11:27,854 --> 00:11:34,060 line:-1
So sometimes, you do want
to catch it when it happens.


223
00:11:34,060 --> 00:11:35,762 line:-1
Having a runtime issue
breakpoint


224
00:11:35,762 --> 00:11:37,830 line:-1
allows you to pause
in the debugger


225
00:11:37.830 --> 00:11:41.701 line:-1 position:50%
and poke at the process
there and then.


226
00:11:41,701 --> 00:11:44,304 line:-1
There are different types
of runtime issue breakpoints.


227
00:11:44,304 --> 00:11:51,811 line:-1
You can easily select a specific
type by using the type popup.


228
00:11:51,811 --> 00:11:53,479 line:-1
Bear in mind
that for some of them,


229
00:11:53,479 --> 00:11:55,682 line:-1
you need to enable
the corresponding feature


230
00:11:55.682 --> 00:11:58.985 line:-1 position:50%
in the diagnostics tab
of the scheme editor.


231
00:11:58,985 --> 00:12:05,291 line:-1
You can go there by simply
clicking on the Go To button.


232
00:12:05.291 --> 00:12:06.192 line:-1 position:50%
Since we want to make use


233
00:12:06,192 --> 00:12:08,761 line:-1
of the main thread checker
runtime issue breakpoint,


234
00:12:08.761 --> 00:12:12.098 line:-1 position:50%
we want to enable
Main Thread Checker.


235
00:12:12,098 --> 00:12:14,834 position:50%
I hope that my session has
shown you the improvements


236
00:12:14,834 --> 00:12:17,870 position:50%
we have made to breakpoints
in Xcode 13.


237
00:12:17,870 --> 00:12:21,107 position:50%
Breakpoints can greatly enhance
your debugging prowess


238
00:12:21,107 --> 00:12:24,077 line:-1
and should definitely
be part of your repertoire.


239
00:12:24,077 --> 00:12:27,313 line:-1
Thank you and enjoy
the rest of WWDC.


240
00:12:27,313 --> 00:12:31,217 align:center size:2% position:89%
♪

