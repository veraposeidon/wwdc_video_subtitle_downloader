2
00:00:02.035 --> 00:00:05.038 line:-1 align:center
[percussive music]


3
00:00:09.009 --> 00:00:13.280 line:-2 align:center
[Suzy] Hello
and welcome to WWDC 2021.


4
00:00:13,280 --> 00:00:17,017 line:-2
I'm Suzy,
and I work on XCTest in Xcode.


5
00:00:17.017 --> 00:00:19.019 line:-2 align:center
In this session,
we're gonna learn about how


6
00:00:19.019 --> 00:00:22.823 line:-2 align:center
to diagnose unreliable code
with test repetitions,


7
00:00:22.823 --> 00:00:24.758 line:-1 align:center
a tool to repeat your tests.


8
00:00:27.361 --> 00:00:30.497 line:-2 align:center
In the process of running
tests that exercise your app,


9
00:00:30,497 --> 00:00:33,634 line:-2
your tests may occasionally fail
when running unreliable code.


10
00:00:35,269 --> 00:00:37,704 line:-2
You may run into this type
of inconsistency


11
00:00:37.704 --> 00:00:39.907 line:-2 align:center
when dealing
with race conditions,


12
00:00:39,907 --> 00:00:41,642 line:-1
environment assumptions,


13
00:00:41.642 --> 00:00:45.846 line:-2 align:center
global state, or communication
with external services.


14
00:00:45.846 --> 00:00:47.981 line:-2 align:center
These are hard bugs
to track down


15
00:00:47.981 --> 00:00:51.151 line:-2 align:center
because they're
challenging to reproduce.


16
00:00:51,151 --> 00:00:54,021 line:-2
One way to diagnose these
types of failures


17
00:00:54,021 --> 00:00:56,857 line:-1
is to run your tests repeatedly.


18
00:00:56.857 --> 00:01:00.194 line:-2 align:center
Test repetition,
added in Xcode 13,


19
00:01:00.194 --> 00:01:02.696 line:-2 align:center
allows you to repeat
a test up to a specified number


20
00:01:02,696 --> 00:01:06,300 line:-2
of iterations
with a stopping condition.


21
00:01:06,300 --> 00:01:10,838 line:-2
Xcode supports three
test repetition modes.


22
00:01:10.838 --> 00:01:13.874 line:-2 align:center
The first
mode is Fixed iterations.


23
00:01:13,874 --> 00:01:15,676 line:-2
Fixed iterations will
repeat your tests


24
00:01:15.676 --> 00:01:19.146 line:-2 align:center
a fixed number of times
regardless of the status.


25
00:01:19,146 --> 00:01:21,448 line:-2
Fixed iterations is
great for understanding


26
00:01:21.448 --> 00:01:23.951 line:-2 align:center
the reliability of your test
suite and helping


27
00:01:23.951 --> 00:01:28.388 line:-2 align:center
keep it reliable as new tests
are introduced over time.


28
00:01:28,388 --> 00:01:30,691 line:-1
The second is Until failure.


29
00:01:30.691 --> 00:01:34.595 line:-2 align:center
Until failure will continue
to repeat a test until it fails.


30
00:01:34,595 --> 00:01:37,898 line:-2
I love using this tool
to reproduce a nondeterministic


31
00:01:37,898 --> 00:01:41,702 line:-2
test failure to catch
it in the debugger.


32
00:01:41,702 --> 00:01:44,438 line:0
Lastly is Retry on failure.


33
00:01:44,438 --> 00:01:46,607 line:0
Retry on failure will
retry your test


34
00:01:46,607 --> 00:01:50,677 line:0
until it succeeds
up to a specified maximum.


35
00:01:50,677 --> 00:01:53,480 align:center
This is useful to identify
unreliable tests


36
00:01:53,480 --> 00:01:57,584 line:0
which fail initially but
eventually succeed on reattempt.


37
00:01:57,584 --> 00:02:00,821 line:0
If a test in CI is exhibiting
this behavior,


38
00:02:00,821 --> 00:02:02,656 line:0
you could enable
Retry on failure


39
00:02:02,656 --> 00:02:04,558 align:center
in your test plan temporarily


40
00:02:04,558 --> 00:02:07,594 line:0
and gather additional
data to fix the issue.


41
00:02:07.594 --> 00:02:10.597 line:-2 align:center
It's important to remember
retrying failures


42
00:02:10,597 --> 00:02:13,200 line:-2
can hide problems
in the actual product.


43
00:02:13,200 --> 00:02:15,068 line:-2
Some functionality fails
initially


44
00:02:15.068 --> 00:02:17.237 line:-1 align:center
before eventually succeeding,


45
00:02:17,237 --> 00:02:19,406 line:-2
so it's best to use
this mode temporarily


46
00:02:19.406 --> 00:02:22.743 line:-1 align:center
to diagnose the failures.


47
00:02:22,743 --> 00:02:26,180 line:-2
Let's get a better understanding
of how this works in practice.


48
00:02:26.180 --> 00:02:28.615 line:-2 align:center
I created an app called
IceCreamTruckCountdown


49
00:02:28,615 --> 00:02:30,651 line:-2
that tells me how long until
the ice cream truck


50
00:02:30.651 --> 00:02:32.219 line:-1 align:center
drives by my home.


51
00:02:32,219 --> 00:02:34,221 line:-2
I love when the truck
has cookies and cream,


52
00:02:34.221 --> 00:02:36.890 line:-2 align:center
and so I wrote a test
called testFlavors


53
00:02:36,890 --> 00:02:40,160 line:-2
to ensure that the truck
has all the flavors.


54
00:02:40.160 --> 00:02:43.463 line:-2 align:center
testFlavors has a truck that
I get from the truckDepot.


55
00:02:46,166 --> 00:02:49,536 line:-2
I call prepareFlavors
and, lastly,


56
00:02:49.536 --> 00:02:52.539 line:-2 align:center
assert that the truck
has all 33 flavors.


57
00:02:53,607 --> 00:02:56,443 line:-2
Recently,
I've noticed testFlavors


58
00:02:56.443 --> 00:03:00.080 line:-2 align:center
sometimes fails on the main
branch in Xcode Cloud.


59
00:03:00,080 --> 00:03:02,883 line:-2
To gather more information,
I temporarily configured


60
00:03:02,883 --> 00:03:05,152 line:-1
my test plan,


61
00:03:05,152 --> 00:03:09,089 line:-2
enabling Test Repetition Mode
to Retry on failure.


62
00:03:09.089 --> 00:03:11.258 line:-2 align:center
Let's take a look at
the report navigator


63
00:03:11,258 --> 00:03:14,027 line:-1
and check our cloud reports.


64
00:03:17,764 --> 00:03:19,800 line:-2
My tests are inconsistently
failing,


65
00:03:19.800 --> 00:03:23.470 line:-2 align:center
so let's check this last
one for more information.


66
00:03:28,909 --> 00:03:30,911 line:-2
If I expand
the first device open,


67
00:03:30,911 --> 00:03:33,413 line:-2
there is an iteration label here
letting us know


68
00:03:33,413 --> 00:03:36,116 line:-2
it was the first
iteration of this test.


69
00:03:38.318 --> 00:03:41.421 line:-2 align:center
Huh. And when I expand all
the other rows,


70
00:03:41,421 --> 00:03:44,024 line:-2
the assertion
failures are all the same,


71
00:03:44,024 --> 00:03:46,660 line:-1
and this last test passed.


72
00:03:46.660 --> 00:03:49.630 line:-2 align:center
I expected all the tests
to pass consistently,


73
00:03:49.630 --> 00:03:52.266 line:-1 align:center
not just on one device.


74
00:03:52,266 --> 00:03:55,269 line:-2
I'm gonna try to reproduce
this failure locally.


75
00:03:55,269 --> 00:03:58,105 line:-2
Let's go to our file
that has testFlavors.


76
00:03:59,706 --> 00:04:03,677 line:-2
I'll Control-click on the test
diamond for our test.


77
00:04:03,677 --> 00:04:07,648 line:-2
In the menu, I'll select Run
"testFlavors()" Repeatedly…


78
00:04:07,648 --> 00:04:11,418 line:-2
to bring up
the test repetition dialog.


79
00:04:11.418 --> 00:04:13.353 line:-2 align:center
Here you can select
the stopping condition


80
00:04:13,353 --> 00:04:14,855 line:-1
of your repetitions,


81
00:04:14,855 --> 00:04:16,890 line:-1
set Maximum Repetitions,


82
00:04:16,890 --> 00:04:19,826 line:-2
and other options
like Pause on Failure.


83
00:04:19,826 --> 00:04:22,429 line:-2
I want to try to reproduce
the issue that happened


84
00:04:22,429 --> 00:04:25,032 line:-2
in our cloud report, so I'm
setting my stopping condition


85
00:04:25.032 --> 00:04:28.635 line:-2 align:center
to go through maximum
repetitions and keep it at 100.


86
00:04:30,537 --> 00:04:32,406 line:-1
Now I'll run my test.


87
00:04:36.543 --> 00:04:39.613 line:-2 align:center
Oh, yay!
The test failed locally.


88
00:04:39,613 --> 00:04:41,515 line:-2
When I click on the failure
annotation,


89
00:04:41,515 --> 00:04:45,085 line:-2
it displays the same error
that happened in Xcode Cloud,


90
00:04:45.085 --> 00:04:47.554 line:-2 align:center
and it failed
4 out of 100 times.


91
00:04:47,554 --> 00:04:51,124 line:-2
Great!
I can now debug this issue.


92
00:04:51,124 --> 00:04:53,460 line:-2
I'll Control-click again
on the test diamond


93
00:04:53.460 --> 00:04:54.928 line:-1 align:center
for testFlavors,


94
00:04:54.928 --> 00:04:58.065 line:-2 align:center
selecting
Run "testFlavors()" Repeatedly…


95
00:04:58,065 --> 00:05:00,801 line:-2
but this time,
I'm gonna use stop on failure


96
00:05:00,801 --> 00:05:03,537 line:-2
so I can debug the issue
when it happens.


97
00:05:03.537 --> 00:05:07.708 line:-2 align:center
Thankfully, Xcode automatically
selects Pause on Failure for me,


98
00:05:07.708 --> 00:05:09.877 line:-2 align:center
so I can catch the error
in the debugger.


99
00:05:12,946 --> 00:05:16,083 line:-2
All right,
we have caught the issue.


100
00:05:16,083 --> 00:05:18,619 line:-2
And I know we're looking
at inconsistencies


101
00:05:18,619 --> 00:05:21,221 line:-2
with the flavors on the truck,
so I'll take a look


102
00:05:21.221 --> 00:05:24.525 line:-2 align:center
at our truck object
in the debugger.


103
00:05:30.764 --> 00:05:34.434 line:-2 align:center
It seems strange that flavors
is 0 when it should be 33


104
00:05:34,434 --> 00:05:37,104 line:-2
because we already
called prepareFlavors.


105
00:05:37,104 --> 00:05:41,041 line:-2
I wonder if we've made it
inside this completionHandler.


106
00:05:41,041 --> 00:05:43,777 line:-2
I'll add a breakpoint
and click Continue.


107
00:05:48,415 --> 00:05:51,652 line:-1
Hmm, that seems wrong.


108
00:05:54.188 --> 00:05:58.125 line:-2 align:center
Oh, the fulfill is called
in the outer completionHandler


109
00:05:58,125 --> 00:06:01,428 line:-2
and not the inner prepareFlavors
completionHandler.


110
00:06:05.866 --> 00:06:09.069 line:-2 align:center
This is a fairly simple bug
caused by asynchronous events


111
00:06:09,069 --> 00:06:12,539 line:-2
with multiple completionHandlers
and the expectation


112
00:06:12,539 --> 00:06:15,442 line:-2
not being fulfilled
in the correct place.


113
00:06:15.442 --> 00:06:18.946 line:-2 align:center
XCTest's support for Swift
5.5's async/await


114
00:06:18.946 --> 00:06:22.683 line:-2 align:center
lets me simplify this test so
it won't happen again.


115
00:06:22,683 --> 00:06:25,285 line:-2
To transform this test
to use async/await,


116
00:06:25.285 --> 00:06:28.689 line:-2 align:center
I'll add “async throws”
to the method header.


117
00:06:40,501 --> 00:06:42,202 line:-2
I'll use the “await”
version of getting


118
00:06:42,202 --> 00:06:44,338 line:-2
the iceCreamTruck
from the truckDepot.


119
00:06:58.018 --> 00:07:00.621 line:-2 align:center
I'll use the "await"
version of prepareFlavors.


120
00:07:07,327 --> 00:07:11,298 line:-2
I'll keep the same assert, but
the truck is no longer optional.


121
00:07:14.468 --> 00:07:16.203 line:-2 align:center
Let's run this test
one more time


122
00:07:16.203 --> 00:07:18.105 line:-1 align:center
to make sure that it is fixed.


123
00:07:18.105 --> 00:07:21.575 line:-2 align:center
I'll Control-click and select
Run "testFlavors()" Repeatedly…


124
00:07:21,575 --> 00:07:24,077 line:-2
and once again
select Maximum Repetitions


125
00:07:24,077 --> 00:07:25,913 line:-1
as the stop condition.


126
00:07:36,557 --> 00:07:39,293 line:-2
Yay!
The test passed 100 times.


127
00:07:39,293 --> 00:07:41,528 line:-2
I'm now confident that this is
fixed,


128
00:07:41.528 --> 00:07:43.430 line:-2 align:center
and I'm ready to remove
Retry on failure


129
00:07:43.430 --> 00:07:46.567 line:-2 align:center
from the test plan
and commit my change.


130
00:07:46.567 --> 00:07:48.402 line:-2 align:center
So we just got
a better understanding


131
00:07:48.402 --> 00:07:50.070 line:-1 align:center
of how to use this at desk


132
00:07:50.070 --> 00:07:52.873 line:-2 align:center
and one way to run your test
repeatedly in CI


133
00:07:52.873 --> 00:07:55.175 line:-2 align:center
by configuring it
in your test plan.


134
00:07:55,175 --> 00:07:57,477 line:-2
Let's talk about another way
to run your tests


135
00:07:57.477 --> 00:08:01.982 line:-2 align:center
with repetition, like in
the demo, using the CLI.


136
00:08:01.982 --> 00:08:03.717 line:-2 align:center
When running xcodebuild
directly,


137
00:08:03,717 --> 00:08:05,552 line:-1
you can add xcodebuild flags


138
00:08:05,552 --> 00:08:07,554 line:-2
which override
any test plan setting.


139
00:08:08,722 --> 00:08:11,525 line:-2
Pass -test-iterations
with a number


140
00:08:11,525 --> 00:08:14,595 line:-2
to run a test
a fixed number of times


141
00:08:14.595 --> 00:08:16.997 line:-2 align:center
or combine it
with -retry-tests-on-failure


142
00:08:16.997 --> 00:08:19.066 line:-1 align:center
or -run-tests-until-failure


143
00:08:19.066 --> 00:08:22.870 line:-2 align:center
to use it with one of the other
stopping conditions.


144
00:08:22.870 --> 00:08:26.540 line:-2 align:center
To run your test the same as
in the demo with xcodebuild,


145
00:08:26.540 --> 00:08:28.909 line:-2 align:center
you start with the base
xcodebuild command


146
00:08:28.909 --> 00:08:31.245 line:-2 align:center
used to run your tests
and add the flags


147
00:08:31.245 --> 00:08:35.582 line:-2 align:center
-test-iterations set to 100
and -run-tests-until-failure.


148
00:08:35.582 --> 00:08:38.852 line:-2 align:center
In summary,
use test repetitions as a tool


149
00:08:38.852 --> 00:08:42.089 line:-2 align:center
to help diagnose
unreliable code.


150
00:08:42,089 --> 00:08:44,925 align:center
For more information about
handling inconsistent tests,


151
00:08:44,925 --> 00:08:48,295 line:0
watch "Embrace expected
failures in XCTest."


152
00:08:48,295 --> 00:08:50,797 align:center
To learn more about Swift async,
check out


153
00:08:50,797 --> 00:08:53,433 align:center
"Meet async/await in Swift."


154
00:08:53,433 --> 00:08:54,935 line:-1
Thanks for watching.


155
00:08:54,935 --> 00:08:57,371 line:-1
[percussive music]

