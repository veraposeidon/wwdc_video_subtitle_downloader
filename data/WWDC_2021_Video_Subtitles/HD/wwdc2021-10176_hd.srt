2
00:00:00.334 --> 00:00:03.337 line:-1
[upbeat music]


3
00:00:03.370 --> 00:00:09.576 line:-1
♪ ♪


4
00:00:09.610 --> 00:00:13.313 line:-2
[Harry] Hi, I'm Harry,
an engineer on the SwiftUI team.


5
00:00:13.347 --> 00:00:16.617 line:-2
Welcome to "Craft search
experiences in SwiftUI."


6
00:00:16.650 --> 00:00:18.852 line:-2
Search is all-new
in SwiftUI this year,


7
00:00:18.886 --> 00:00:20.020 line:-1
and I'm excited to show you


8
00:00:20.053 --> 00:00:21.588 line:-2
how to start using
these features.


9
00:00:21.622 --> 00:00:23.490 line:-2
Sometimes,
you want to find something


10
00:00:23.524 --> 00:00:26.326 line:-2
specific within an app,
but many apps contain


11
00:00:26.360 --> 00:00:29.296 line:-2
large collections of data,
which can make it difficult


12
00:00:29.329 --> 00:00:32.065 line:-2
to find exactly what
you're looking for.


13
00:00:32.099 --> 00:00:34.067 line:-2
Whether it's finding
the latest app trend,


14
00:00:34.101 --> 00:00:35.435 line:-1
your next favorite song,


15
00:00:35.469 --> 00:00:37.971 line:-2
or the right podcast
for your morning commute,


16
00:00:38.005 --> 00:00:41.008 line:-2
implementing search
helps do just that.


17
00:00:41.041 --> 00:00:43.443 line:-2
The best search experience
will vary


18
00:00:43.477 --> 00:00:46.346 line:-2
based on the structure
and content of the app.


19
00:00:46.380 --> 00:00:49.049 line:-2
But, in general,
all experiences will include


20
00:00:49.082 --> 00:00:52.519 line:-2
a search field
that defines a search query.


21
00:00:52.553 --> 00:00:55.789 line:-2
Now, you can implement
search directly in SwiftUI.


22
00:00:55.822 --> 00:00:57.758 line:-1
Let's take a look.


23
00:00:57.791 --> 00:01:00.894 line:-2
In this talk, I'll introduce
the new searchable modifier


24
00:01:00.928 --> 00:01:05.232 line:-2
that forms the foundation of all
search features in SwiftUI.


25
00:01:05.265 --> 00:01:07.234 line:-2
I'll showcase
how a navigation view


26
00:01:07.267 --> 00:01:10.103 line:-2
integrates with
the searchable modifier.


27
00:01:10.137 --> 00:01:12.906 line:-2
Finally, I'll cover
extending the functionality


28
00:01:12.940 --> 00:01:16.376 line:-2
of searchable modifiers
by adding search suggestions.


29
00:01:16.410 --> 00:01:19.513 line:-2
Searchable is a new
view modifier in SwiftUI


30
00:01:19.546 --> 00:01:22.249 line:-1
available on all platforms.


31
00:01:22.282 --> 00:01:24.117 line:-2
It allows you
to mark view content


32
00:01:24.151 --> 00:01:26.753 line:-1
as being, well, searchable.


33
00:01:26.787 --> 00:01:29.923 line:-2
The content will define
exactly what that means.


34
00:01:29.957 --> 00:01:32.025 line:-2
Throughout this talk,
I'll explore examples


35
00:01:32.059 --> 00:01:34.294 line:-2
of this modifier
on each platform.


36
00:01:34.328 --> 00:01:36.797 line:-2
Now, to better understand
this modifier,


37
00:01:36.830 --> 00:01:38.832 line:-1
let's talk about the weather!


38
00:01:38.866 --> 00:01:40.901 line:-1
A great example of search on iOS


39
00:01:40.934 --> 00:01:43.237 line:-2
can be found
in the new Weather app.


40
00:01:43.270 --> 00:01:44.905 line:-2
When viewing
your list of cities,


41
00:01:44.938 --> 00:01:47.274 line:-2
you can start typing
into the search bar,


42
00:01:47.307 --> 00:01:50.644 line:-2
which will search for a new city
to add to your list.


43
00:01:50.677 --> 00:01:53.514 line:-2
To illustrate how Weather uses
a searchable modifier


44
00:01:53.547 --> 00:01:54.848 line:-1
to power this feature,


45
00:01:54.882 --> 00:01:57.584 line:-2
let's break down the structure
of their UI.


46
00:01:57.618 --> 00:01:59.853 line:-2
Weather starts
with a navigation view,


47
00:01:59.887 --> 00:02:02.489 line:-1
which provides a navigation bar.


48
00:02:02.523 --> 00:02:06.360 line:-2
Weather adds a custom list
as the navigation view's content.


49
00:02:06.393 --> 00:02:11.064 line:-2
And inside of that list, it adds
a ForEach over its cells.


50
00:02:11.098 --> 00:02:13.433 line:-2
Finally, Weather adds
the searchable modifier


51
00:02:13.467 --> 00:02:15.802 line:-1
to its navigation view.


52
00:02:15.836 --> 00:02:18.272 line:-2
At the core of all
searchable modifiers


53
00:02:18.305 --> 00:02:21.241 line:-2
is the configuration
of a search field.


54
00:02:21.275 --> 00:02:24.144 line:-2
The searchable modifier takes
the configured search field


55
00:02:24.178 --> 00:02:25.679 line:-1
and passes that down,


56
00:02:25.712 --> 00:02:28.348 line:-2
through the environment,
for other views to use


57
00:02:28.382 --> 00:02:30.951 line:-2
in the best way
for each platform.


58
00:02:30.984 --> 00:02:33.887 line:-2
Here, the navigation view
understands that search field


59
00:02:33.921 --> 00:02:36.190 line:-2
and will render it
as a search bar.


60
00:02:36.223 --> 00:02:39.026 line:-2
If no views use
the configured search field,


61
00:02:39.059 --> 00:02:42.362 line:-2
the searchable modifier provides
a default implementation


62
00:02:42.396 --> 00:02:44.898 line:-2
of rendering the search field
in the toolbar.


63
00:02:44.932 --> 00:02:47.234 line:-2
Now, a search field
is often not the only piece


64
00:02:47.267 --> 00:02:49.102 line:-1
of search-related UI.


65
00:02:49.136 --> 00:02:51.305 line:-2
Displaying some form
of search results


66
00:02:51.338 --> 00:02:53.173 line:-1
is a common design pattern.


67
00:02:53.207 --> 00:02:55.042 line:-1
Weather follows this pattern,


68
00:02:55.075 --> 00:02:57.744 line:-2
and whenever it sees
a non-empty search query,


69
00:02:57.778 --> 00:03:01.248 line:-2
it switches its custom list
to display another list


70
00:03:01.281 --> 00:03:04.651 line:-2
containing the results
of the current query.


71
00:03:04.685 --> 00:03:07.454 line:-2
Let's see how Weather can
use information vended


72
00:03:07.487 --> 00:03:10.524 line:-2
by the searchable modifier
to achieve this UI.


73
00:03:10.557 --> 00:03:12.359 line:-1
Here's Weather's custom list.


74
00:03:12.392 --> 00:03:15.229 line:-2
Searchable modifiers set up
a new environment property,


75
00:03:15.262 --> 00:03:17.464 line:-2
called isSearching,
that Weather uses


76
00:03:17.497 --> 00:03:20.133 line:-2
to dynamically change
the view being displayed,


77
00:03:20.167 --> 00:03:23.303 line:-2
based on whether a user
is actively searching.


78
00:03:23.337 --> 00:03:26.073 line:-2
Weather queries the isSearching
environment property


79
00:03:26.106 --> 00:03:27.608 line:-1
and the text of the search


80
00:03:27.641 --> 00:03:30.110 line:-2
to conditionally show
its results view.


81
00:03:30.143 --> 00:03:33.714 line:-2
When rendering your own results,
consider using an overlay


82
00:03:33.747 --> 00:03:36.416 line:-2
so that the state of your
main UI is unchanged


83
00:03:36.450 --> 00:03:39.820 line:-2
after a user returns
from their search interaction.


84
00:03:39.853 --> 00:03:43.357 line:-2
Let's talk a little bit more
about how a navigation view


85
00:03:43.390 --> 00:03:45.759 line:-2
integrates with the new
searchable modifier.


86
00:03:45.792 --> 00:03:47.394 line:-2
To do that,
I'd like to introduce


87
00:03:47.427 --> 00:03:49.997 line:-2
an app I've been
working tirelessly on.


88
00:03:50.030 --> 00:03:51.798 line:-1
I call it Colors.


89
00:03:51.832 --> 00:03:54.501 line:-2
This app lets users
manage a library


90
00:03:54.535 --> 00:03:58.105 line:-2
of their favorite sets
of colors, called Palettes.


91
00:03:58.138 --> 00:03:59.840 line:-2
Maybe you wanna play
with different paints


92
00:03:59.873 --> 00:04:01.975 line:-2
for your room,
themes for your app,


93
00:04:02.009 --> 00:04:05.579 line:-2
or just get help picking
the color of your new M1 iMac.


94
00:04:05.612 --> 00:04:08.515 line:-2
No matter your desire,
Colors is the app for you.


95
00:04:08.549 --> 00:04:11.318 line:-2
The basic structure
of Colors is a double-column


96
00:04:11.351 --> 00:04:13.520 line:-2
navigation view,
where the first column,


97
00:04:13.554 --> 00:04:17.324 line:-2
the root view, is a sidebar
on iPadOS and macOS,


98
00:04:17.357 --> 00:04:20.093 line:-2
or the root of a navigation
stack on other platforms.


99
00:04:20.127 --> 00:04:23.630 line:-2
In the sidebar, you can see
my library of color palettes.


100
00:04:23.664 --> 00:04:25.399 line:-1
In the detail view, you can see


101
00:04:25.432 --> 00:04:27.401 line:-2
the currently selected
color palette,


102
00:04:27.434 --> 00:04:28.836 line:-1
as well as how those colors


103
00:04:28.869 --> 00:04:32.239 line:-2
might appear to users
with visual differences.


104
00:04:32.272 --> 00:04:35.542 line:-2
As people started using the app,
I began to notice something.


105
00:04:35.576 --> 00:04:37.377 line:-1
People love colors.


106
00:04:37.411 --> 00:04:40.280 line:-2
They're adding colors
to their library constantly,


107
00:04:40.314 --> 00:04:43.750 line:-2
but as a library gets large,
it becomes difficult to find


108
00:04:43.784 --> 00:04:46.653 line:-2
a specific color palette,
as people have to scroll


109
00:04:46.687 --> 00:04:49.156 line:-2
through their whole library
to find it.


110
00:04:49.189 --> 00:04:51.258 line:-2
At this point,
I've decided it’s time


111
00:04:51.291 --> 00:04:53.026 line:-1
to add search functionality.


112
00:04:53.060 --> 00:04:56.063 line:-2
I'd like this feature
to follow platform conventions


113
00:04:56.096 --> 00:04:59.800 line:-2
so that people using my app
immediately understand it.


114
00:04:59.833 --> 00:05:01.668 line:-2
Let's take a look
at how I can use


115
00:05:01.702 --> 00:05:04.271 line:-2
the searchable modifier
to implement this feature.


116
00:05:05.939 --> 00:05:07.975 line:-2
Here I have
the navigation view I built


117
00:05:08.008 --> 00:05:10.310 line:-1
as part of the Colors app.


118
00:05:10.344 --> 00:05:13.113 line:-2
To implement search,
I'll add the searchable modifier


119
00:05:13.146 --> 00:05:14.748 line:-1
to my navigation view.


120
00:05:14.781 --> 00:05:17.317 line:-2
Just like before,
I'll provide it with a binding


121
00:05:17.351 --> 00:05:20.320 line:-2
to the state backing
the search query.


122
00:05:20.354 --> 00:05:22.723 line:-2
Again, this will be rendered
as a search bar


123
00:05:22.756 --> 00:05:25.692 line:-1
on iOS and iPadOS.


124
00:05:25.726 --> 00:05:27.127 line:-1
When a navigation view is


125
00:05:27.160 --> 00:05:29.429 line:-2
the searchable
modifier's content,


126
00:05:29.463 --> 00:05:32.833 line:-2
it associates the search field
with one of its columns.


127
00:05:32.866 --> 00:05:35.502 line:-2
Which column it uses
is dependent on the number


128
00:05:35.536 --> 00:05:38.372 line:-2
of columns provided
to the navigation view.


129
00:05:38.405 --> 00:05:40.574 line:-2
Since I have a two-column
navigation view,


130
00:05:40.607 --> 00:05:43.544 line:-2
the search bar is associated
with the sidebar column


131
00:05:43.577 --> 00:05:45.245 line:-1
on both iOS and iPadOS.


132
00:05:45.279 --> 00:05:48.015 line:-2
If you want the search field
associated with a column


133
00:05:48.048 --> 00:05:50.083 line:-2
other than the default,
you can place


134
00:05:50.117 --> 00:05:52.886 line:-2
the searchable modifier
on your desired column,


135
00:05:52.920 --> 00:05:56.490 line:-2
like you would with
the existing toolbar modifier.


136
00:05:56.523 --> 00:05:58.258 line:-2
For this app,
I'll keep searchable


137
00:05:58.292 --> 00:06:00.160 line:-1
on the navigation view.


138
00:06:00.194 --> 00:06:02.362 line:-2
Just like with Weather,
I'll use the isSearching


139
00:06:02.396 --> 00:06:04.698 line:-2
environment property
to dynamically display


140
00:06:04.731 --> 00:06:07.100 line:-2
my search results
over the sidebar.


141
00:06:07.134 --> 00:06:10.370 line:-2
The same placement of
the searchable modifier on macOS


142
00:06:10.404 --> 00:06:12.005 line:-2
will render
the search field placed


143
00:06:12.039 --> 00:06:14.608 line:-2
in the most trailing position
of the toolbar,


144
00:06:14.641 --> 00:06:16.743 line:-2
with behaviors expected
on that platform,


145
00:06:16.777 --> 00:06:19.847 line:-2
like automatically collapsing
as a window shrinks.


146
00:06:19.880 --> 00:06:21.582 line:-2
Here, I'll render
my search results


147
00:06:21.615 --> 00:06:23.116 line:-1
in the detail pane of the app


148
00:06:23.150 --> 00:06:26.186 line:-2
for a more typical experience
on macOS.


149
00:06:26.220 --> 00:06:29.623 line:-2
watchOS behaves similarly
to iOS in that it, too,


150
00:06:29.656 --> 00:06:33.727 line:-2
places a search field at the top
of the view in the toolbar.


151
00:06:33.760 --> 00:06:35.796 line:-2
Here, SwiftUI chooses
the first column


152
00:06:35.829 --> 00:06:38.031 line:-2
to associate
the search field with.


153
00:06:38.065 --> 00:06:41.201 line:-2
Notice how I didn't change where
I placed the searchable modifier


154
00:06:41.235 --> 00:06:44.838 line:-2
to produce these different
behaviors across the platforms.


155
00:06:44.872 --> 00:06:47.941 line:-2
The structure of my app didn't
change across these platforms


156
00:06:47.975 --> 00:06:51.245 line:-2
and remained
a double-column navigation view.


157
00:06:51.278 --> 00:06:53.213 line:-2
SwiftUI understands
this structure


158
00:06:53.247 --> 00:06:54.948 line:-2
and the different
platform conventions,


159
00:06:54.982 --> 00:06:57.885 line:-2
so it handled implementing them
on my behalf.


160
00:06:57.918 --> 00:07:00.454 line:-2
When I look at tvOS,
I realize that the structure


161
00:07:00.487 --> 00:07:04.525 line:-2
of my app on the other platforms
could be made more appropriate.


162
00:07:04.558 --> 00:07:08.629 line:-2
tvOS typically renders search
as a tab in a tab view,


163
00:07:08.662 --> 00:07:10.230 line:-1
but my app has no tab view.


164
00:07:10.264 --> 00:07:13.934 line:-2
With just a few tweaks
to my app, I can fix that.


165
00:07:13.967 --> 00:07:16.803 line:-2
Instead of rendering
a double-column navigation view,


166
00:07:16.837 --> 00:07:19.540 line:-2
I can make a more typical
tvOS experience


167
00:07:19.573 --> 00:07:22.643 line:-2
by rendering a single-column
navigation view


168
00:07:22.676 --> 00:07:26.380 line:-2
with a tab view
as the navigation view’s content.


169
00:07:26.413 --> 00:07:29.616 line:-2
In my tab view, I'll place
the existing sidebar view


170
00:07:29.650 --> 00:07:31.652 line:-1
and add a new search tab.


171
00:07:31.685 --> 00:07:33.921 line:-2
The search tab represents
the placeholder view


172
00:07:33.954 --> 00:07:36.623 line:-2
that will be visible
when someone first navigates


173
00:07:36.657 --> 00:07:37.824 line:-1
to that tab.


174
00:07:37.858 --> 00:07:40.627 line:-2
Finally, instead of wrapping
the navigation view,


175
00:07:40.661 --> 00:07:45.199 line:-2
I'll move the searchable
modifier to wrap my search tab.


176
00:07:45.232 --> 00:07:47.935 line:-2
Once a non-empty
search query has been entered,


177
00:07:47.968 --> 00:07:51.972 line:-2
I'll transition my view
to display my search results.


178
00:07:52.005 --> 00:07:55.142 line:-2
Now I've added search
functionality to each platform.


179
00:07:55.175 --> 00:07:57.678 line:-2
Thanks to the declarative nature
of SwiftUI,


180
00:07:57.711 --> 00:08:00.881 line:-2
where the navigation structure
of my app remained consistent,


181
00:08:00.914 --> 00:08:04.351 line:-2
I was able to rely on SwiftUI,
and let the implementation


182
00:08:04.384 --> 00:08:07.721 line:-2
of the searchable modifier
pick the appropriate interface


183
00:08:07.754 --> 00:08:10.557 line:-2
for that particular
navigation structure.


184
00:08:10.591 --> 00:08:13.560 line:-2
On tvOS, where the structure
of my app changed,


185
00:08:13.594 --> 00:08:16.029 line:-2
I took what I learned
about the searchable modifier


186
00:08:16.063 --> 00:08:18.498 line:-2
and applied that
to the different structure.


187
00:08:18.532 --> 00:08:21.335 line:-2
Only what I defined
as "searchable" changed


188
00:08:21.368 --> 00:08:23.103 line:-1
with that structure.


189
00:08:23.136 --> 00:08:24.538 line:-2
Now that you have
an understanding


190
00:08:24.571 --> 00:08:26.874 line:-2
of the searchable modifier,
let's move on


191
00:08:26.907 --> 00:08:29.977 line:-2
to our final topic:
search suggestions.


192
00:08:30.010 --> 00:08:33.180 line:-2
After using search in my app,
a few users have reported


193
00:08:33.213 --> 00:08:35.182 line:-2
that while they really like
the new functionality


194
00:08:35.215 --> 00:08:37.718 line:-2
search provides,
they're sometimes at a loss


195
00:08:37.751 --> 00:08:40.387 line:-2
for what they're able
to search for.


196
00:08:40.420 --> 00:08:43.457 line:-2
Many apps use search suggestions
to help guide people


197
00:08:43.490 --> 00:08:46.560 line:-2
towards the type of search
queries they can provide.


198
00:08:46.593 --> 00:08:49.463 line:-2
These suggestions represent
completed search queries


199
00:08:49.496 --> 00:08:52.566 line:-2
that may be presented in a menu,
like on macOS,


200
00:08:52.599 --> 00:08:55.636 line:-2
in a list, like on iOS,
or as button


201
00:08:55.669 --> 00:08:58.372 line:-2
that presents a list,
like on watchOS.


202
00:08:58.405 --> 00:09:00.207 line:-1
Suggestions give people an idea


203
00:09:00.240 --> 00:09:02.976 line:-2
for the types of things
they can search for.


204
00:09:03.010 --> 00:09:04.878 line:-1
SwiftUI offers an easy way


205
00:09:04.912 --> 00:09:06.847 line:-2
to add search suggestions
to your apps.


206
00:09:06.880 --> 00:09:08.782 line:-1
Let's take a look.


207
00:09:08.815 --> 00:09:10.984 line:-2
Looking at my app, you can see
that I've configured


208
00:09:11.018 --> 00:09:13.854 line:-1
a searchable modifier with text.


209
00:09:13.887 --> 00:09:16.490 line:-2
Searchable modifiers offer
an optional parameter,


210
00:09:16.523 --> 00:09:19.126 line:-2
called suggestions,
that I can start including.


211
00:09:19.159 --> 00:09:22.095 line:-2
For the suggestions parameter,
I'll provide a view.


212
00:09:22.129 --> 00:09:24.198 line:-2
This might just be
a few static buttons


213
00:09:24.231 --> 00:09:27.367 line:-2
or, more likely, it will be
a ForEach over a dynamic set


214
00:09:27.401 --> 00:09:31.905 line:-2
of suggestions coming from my
apps database or from a server.


215
00:09:31.939 --> 00:09:34.441 line:-2
SwiftUI looks at this view
and will present it


216
00:09:34.474 --> 00:09:37.544 line:-2
based on whether there are
any suggestions to display.


217
00:09:37.578 --> 00:09:41.448 line:-2
For example, watchOS will render
an icon in its search field


218
00:09:41.481 --> 00:09:43.917 line:-2
when you provide
non-empty suggestions.


219
00:09:43.951 --> 00:09:47.287 line:-2
A common pattern here might be
to provide a ForEach of buttons


220
00:09:47.321 --> 00:09:49.990 line:-2
that, when interacted with,
updates the text binding


221
00:09:50.023 --> 00:09:51.992 line:-2
provided
to the searchable modifier


222
00:09:52.025 --> 00:09:55.095 line:-2
with the search suggestion’s
textual value.


223
00:09:55.128 --> 00:09:58.732 line:-2
In fact, we expect this pattern
to be so common that we've added


224
00:09:58.765 --> 00:10:02.202 line:-2
a searchCompletion modifier
that does just this.


225
00:10:02.236 --> 00:10:04.271 line:-2
You can use
the searchCompletion modifier


226
00:10:04.304 --> 00:10:06.340 line:-1
with non-interactive views.


227
00:10:06.373 --> 00:10:08.775 line:-2
It will convert that view
into a button


228
00:10:08.809 --> 00:10:11.144 line:-2
that updates the search text
and dismisses


229
00:10:11.178 --> 00:10:13.480 line:-2
the currently presented
suggestion.


230
00:10:13.514 --> 00:10:15.983 line:-2
If you're creating an app
where users first interact


231
00:10:16.016 --> 00:10:19.119 line:-2
with suggestions to then fetch
a complete set of search results


232
00:10:19.152 --> 00:10:20.954 line:-1
based on that suggestion,


233
00:10:20.988 --> 00:10:23.290 line:-2
consider using
the new onSubmit modifier


234
00:10:23.323 --> 00:10:25.492 line:-2
to know when to fetch
your search results.


235
00:10:25.526 --> 00:10:28.795 line:-2
Pass in a value of search
to the onSubmit modifier,


236
00:10:28.829 --> 00:10:31.064 line:-2
and the closure you provide
will be invoked


237
00:10:31.098 --> 00:10:34.234 line:-2
whenever the user submits
their search query.


238
00:10:34.268 --> 00:10:35.469 line:-1
This typically occurs


239
00:10:35.502 --> 00:10:37.304 line:-2
when they select
a search suggestion


240
00:10:37.337 --> 00:10:39.473 line:-2
or press Enter
on a hardware keyboard.


241
00:10:39.506 --> 00:10:41.909 line:-2
You can also use
the new onSubmit modifier


242
00:10:41.942 --> 00:10:44.678 line:-2
in conjunction with text fields
or secure fields


243
00:10:44.711 --> 00:10:46.346 line:-2
for non-search-related
submissions.


244
00:10:46.380 --> 00:10:49.383 line:-2
Using the suggestions parameter
along with the search


245
00:10:49.416 --> 00:10:52.452 line:-2
completion modifier
provides an easy way to add


246
00:10:52.486 --> 00:10:55.923 line:-2
powerful search-suggestion
functionality to your app.


247
00:10:55.956 --> 00:10:57.457 line:-2
I hope you've enjoyed
a brief tour


248
00:10:57.491 --> 00:10:59.026 line:-2
of some
of the search functionality


249
00:10:59.059 --> 00:11:01.695 line:-1
that SwiftUI now offers.


250
00:11:01.728 --> 00:11:04.431 line:-2
In summary,
a searchable modifier allows you


251
00:11:04.464 --> 00:11:07.568 line:-2
to describe view content
as searchable.


252
00:11:07.601 --> 00:11:10.370 line:-2
Navigation views integrate
with the searchable modifier


253
00:11:10.404 --> 00:11:13.207 line:-2
to provide
platform-appropriate experiences


254
00:11:13.240 --> 00:11:16.877 line:-2
based on the content
of the navigation view.


255
00:11:16.910 --> 00:11:18.946 line:-2
Use the environment's
isSearching property


256
00:11:18.979 --> 00:11:21.215 line:-2
to dynamically adjust
the UI of your app


257
00:11:21.248 --> 00:11:23.917 line:-1
when a user is searching.


258
00:11:23.951 --> 00:11:25.886 line:-2
Use the search
completion modifier


259
00:11:25.919 --> 00:11:28.622 line:-2
and the suggestions parameter
of the searchable modifier


260
00:11:28.655 --> 00:11:30.524 line:-2
to add search suggestions
to your app.


261
00:11:30.557 --> 00:11:32.860 line:-2
Now, go out there
and start adding search


262
00:11:32.893 --> 00:11:35.829 line:-2
to all your SwiftUI apps,
and have a great WW.


263
00:11:35,863 --> 00:11:38,866
[upbeat music]

