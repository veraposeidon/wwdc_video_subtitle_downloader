2
00:00:02.135 --> 00:00:07.140 line:-1 align:center
[music]


3
00:00:09.743 --> 00:00:11.645 line:-2 align:center
[Jacob] Hi, I'm Jacob,
and welcome


4
00:00:11,678 --> 00:00:14,214 line:-2
to "Add Rich Graphics
to Your SwiftUI App."


5
00:00:14.248 --> 00:00:15.616 line:-1 align:center
I'm working on an app


6
00:00:15.649 --> 00:00:18.218 line:-2 align:center
to build gradients
with a few of my colleagues.


7
00:00:18.252 --> 00:00:20.621 line:-2 align:center
This year, colors are
the hot thing on our team.


8
00:00:21,555 --> 00:00:23,557 line:-2
Most of the implementation
is already done.


9
00:00:24.224 --> 00:00:26.894 line:-2 align:center
Now I just need to finish it
by adding some rich graphics.


10
00:00:27.427 --> 00:00:28.529 line:-1 align:center
As we customize the app,


11
00:00:28,562 --> 00:00:30,931 line:-2
we're going to see
a few different areas:


12
00:00:30.964 --> 00:00:34.401 line:-2 align:center
working with the safe area,
including customizing it;


13
00:00:34,434 --> 00:00:36,803 line:-1
new foreground style support;


14
00:00:36.837 --> 00:00:39.406 line:-1 align:center
a rich new set of materials;


15
00:00:39,439 --> 00:00:42,409 line:-2
and drawing with Canvas,
a powerful new view.


16
00:00:42,442 --> 00:00:44,111 line:-1
So let's get started.


17
00:00:44,144 --> 00:00:46,079 line:-2
I'll show you
what's in the app so far.


18
00:00:47,047 --> 00:00:49,183 line:-1
We have a library of gradients,


19
00:00:49,216 --> 00:00:50,551 line:-1
and I can view those gradients.


20
00:00:51.451 --> 00:00:53.120 line:-2 align:center
There's something
about this one I really like.


21
00:00:53.153 --> 00:00:54.988 line:-2 align:center
I just can't
put my finger on it.


22
00:00:55,022 --> 00:00:58,192 line:-1
I can also edit a gradient...


23
00:00:58,225 --> 00:01:00,394 line:-2
which lets me
change the color stops.


24
00:01:06.233 --> 00:01:08.302 line:-1 align:center
And I can add a new gradient.


25
00:01:10.838 --> 00:01:12.105 line:-1 align:center
I can also use these gradients


26
00:01:12,139 --> 00:01:13,907 line:-1
in some visualizers...


27
00:01:14,541 --> 00:01:17,010 line:-2
But one step at a time.
We'll look at those a bit later.


28
00:01:18,612 --> 00:01:19,479 line:-1
For now,


29
00:01:19.513 --> 00:01:22.449 line:-2 align:center
let's focus
on this gradient detail view.


30
00:01:22.482 --> 00:01:23.617 line:-1 align:center
It's functional,


31
00:01:23.650 --> 00:01:25.485 line:-2 align:center
but our actual content
is pretty small


32
00:01:25,519 --> 00:01:28,322 line:-2
relative to the chrome
and empty space.


33
00:01:28.355 --> 00:01:30.791 line:-2 align:center
I want the gradient to really
take over for this screen.


34
00:01:31,291 --> 00:01:33,160 line:-2
So let's
start editing it in Xcode.


35
00:01:35,762 --> 00:01:37,497 line:-1
This is our main detail view,


36
00:01:37.531 --> 00:01:40.200 line:-2 align:center
and it's used for
our editing mode as well.


37
00:01:40,234 --> 00:01:42,402 line:-2
Let's start
with isEditing false,


38
00:01:42.436 --> 00:01:44.571 line:-2 align:center
and we'll look
at the editing mode later.


39
00:01:44.605 --> 00:01:47.574 line:-2 align:center
Let's make our gradient use
as much of the space as possible


40
00:01:47.608 --> 00:01:48.976 line:-1 align:center
by deleting this frame.


41
00:01:51.078 --> 00:01:52.479 line:-2 align:center
And now that the gradient
is taking up


42
00:01:52.513 --> 00:01:53.680 line:-1 align:center
all of the height,


43
00:01:53,714 --> 00:01:55,549 line:-1
we no longer need this spacer.


44
00:01:57,251 --> 00:01:58,752 line:-1
We can go even further


45
00:01:58.785 --> 00:02:01.221 line:-2 align:center
by putting our controls
on top of this gradient


46
00:02:01,255 --> 00:02:03,156 line:-1
by changing this to a ZStack.


47
00:02:04,758 --> 00:02:06,493 line:-2
If you haven't seen
a ZStack before,


48
00:02:06.527 --> 00:02:07.694 line:-1 align:center
it lays elements out


49
00:02:07,728 --> 00:02:11,031 line:-2
on top of each other
instead of next to each other.


50
00:02:11.064 --> 00:02:13.367 line:-2 align:center
Let's move our editing controls
to the bottom.


51
00:02:18,038 --> 00:02:20,207 line:-2
And we only need padding
on the controls,


52
00:02:20.240 --> 00:02:22.409 line:-1 align:center
not on our gradient...


53
00:02:22.442 --> 00:02:23.977 line:-1 align:center
so let's move this.


54
00:02:26.313 --> 00:02:27.281 line:-1 align:center
You may be wondering


55
00:02:27,314 --> 00:02:29,383 line:-2
why there's still empty space
at the top


56
00:02:29,416 --> 00:02:31,084 line:-1
and bottom of the gradient,


57
00:02:31.118 --> 00:02:33.387 line:-2 align:center
even after
we've removed the padding.


58
00:02:33,420 --> 00:02:34,321 line:-1
By default,


59
00:02:34,354 --> 00:02:37,090 line:-2
SwiftUI positions your content
within the safe area,


60
00:02:37.124 --> 00:02:40.060 line:-2 align:center
avoiding anything that would
obscure or clip your view,


61
00:02:40,093 --> 00:02:41,328 line:-1
like the Home indicator


62
00:02:41.361 --> 00:02:43.931 line:-2 align:center
or any bars
that are being shown.


63
00:02:43,964 --> 00:02:45,499 line:-1
The safe area is represented


64
00:02:45,532 --> 00:02:48,468 line:-2
as a region that is inset
from the outermost full area


65
00:02:48,502 --> 00:02:50,037 line:-1
where a view is shown.


66
00:02:50,070 --> 00:02:52,673 line:-2
Content in the safe area
is automatically laid out


67
00:02:52.706 --> 00:02:54.341 line:-1 align:center
within the appropriate insets


68
00:02:54.374 --> 00:02:57.744 line:-2 align:center
to avoid those areas
where it would be obscured.


69
00:02:57,778 --> 00:02:58,879 line:-1
The safe area is also


70
00:02:58.912 --> 00:03:00.147 line:-1 align:center
how SwiftUI helps you avoid


71
00:03:00.180 --> 00:03:02.182 line:-2 align:center
drawing content
under the keyboard.


72
00:03:02,216 --> 00:03:03,183 line:-1
So in our app,


73
00:03:03.217 --> 00:03:04.918 line:-2 align:center
our controls will
automatically lift


74
00:03:04.952 --> 00:03:06.019 line:-1 align:center
out of the way of the keyboard.


75
00:03:07,321 --> 00:03:08,422 line:-1
This works the same way,


76
00:03:08,455 --> 00:03:10,357 line:-2
and if we look
more closely at how,


77
00:03:10.390 --> 00:03:13.393 line:-2 align:center
it's because there are multiple
different safe areas.


78
00:03:13.427 --> 00:03:16.029 line:-2 align:center
The most common one
is the container safe area,


79
00:03:16.063 --> 00:03:18.565 line:-2 align:center
which is driven by the container
a view is shown within


80
00:03:18,599 --> 00:03:21,435 line:-2
and includes things like bars
and device chrome.


81
00:03:21,468 --> 00:03:22,369 line:-1
Additionally,


82
00:03:22.402 --> 00:03:25.472 line:-2 align:center
there is a keyboard safe area
for avoiding the keyboard.


83
00:03:25.506 --> 00:03:27.074 line:-2 align:center
And note
that the keyboard safe area


84
00:03:27.107 --> 00:03:30.244 line:-2 align:center
is always a region within
the container safe area.


85
00:03:30.277 --> 00:03:32.713 line:-2 align:center
It keeps content safe
from the same areas


86
00:03:32.746 --> 00:03:36.583 line:-2 align:center
as the container safe area
in addition to the keyboard.


87
00:03:36,617 --> 00:03:39,119 line:-2
It's possible
to opt out of safe areas.


88
00:03:39.152 --> 00:03:40.687 line:-2 align:center
Usually
you won't need to do this,


89
00:03:40.721 --> 00:03:42.856 line:-2 align:center
since most content should be
within the safe area


90
00:03:42,890 --> 00:03:44,024 line:-1
so it isn't clipped.


91
00:03:44.057 --> 00:03:46.193 line:-1 align:center
It is safe, after all.


92
00:03:46.226 --> 00:03:47.494 line:-1 align:center
But ignoring the safe area


93
00:03:47,528 --> 00:03:49,963 line:-2
can make sense
for backgrounds or other content


94
00:03:49.997 --> 00:03:52.399 line:-2 align:center
that you want to go
fully edge to edge.


95
00:03:52.432 --> 00:03:55.702 line:-2 align:center
You can use this code
to opt out of all safe areas


96
00:03:55,736 --> 00:03:57,738 line:-1
or specify the keyboard region


97
00:03:57,771 --> 00:04:00,974 line:-2
to just opt out
of the keyboard safe area.


98
00:04:01,008 --> 00:04:03,177 line:-2
Let's add ignoresSafeArea
to our linear gradient


99
00:04:03,210 --> 00:04:04,678 line:-1
to get that full-bleed effect.


100
00:04:09,883 --> 00:04:12,986 line:-2
This Edit button isn't very
visible on top of our gradient,


101
00:04:13,020 --> 00:04:15,589 line:-2
so let's only ignore the safe
area on the bottom edge.


102
00:04:19,593 --> 00:04:21,628 line:-2
Now, to make sure we don't
run into the same problem


103
00:04:21,662 --> 00:04:23,931 line:-2
with this bottom text
being illegible


104
00:04:23,964 --> 00:04:25,265 line:-1
from the gradient,


105
00:04:25.299 --> 00:04:26.834 line:-2 align:center
let's add
a background behind it.


106
00:04:31,605 --> 00:04:33,574 line:-2
We'll customize
the background in a minute,


107
00:04:33.607 --> 00:04:36.043 line:-2 align:center
but let's start
with the most simple default,


108
00:04:36.076 --> 00:04:37.644 line:-2 align:center
which gives us
a white background


109
00:04:37.678 --> 00:04:39.980 line:-2 align:center
that automatically changes
in Dark Mode.


110
00:04:50.123 --> 00:04:51.692 line:-2 align:center
And this background
also extends


111
00:04:51,725 --> 00:04:54,361 line:-2
beyond the safe area
automatically.


112
00:04:54,394 --> 00:04:56,797 line:-2
This version of background
and its behavior


113
00:04:56,830 --> 00:04:59,967 line:-2
is new in iOS 15
and aligned OS releases.


114
00:05:00.000 --> 00:05:01.101 line:-1 align:center
Let's look at how it works.


115
00:05:01,735 --> 00:05:03,203 line:-2
Let's start
with a container view


116
00:05:03,237 --> 00:05:05,038 line:-1
and its safe area.


117
00:05:05,072 --> 00:05:07,107 line:-1
Then we have our content view,


118
00:05:07.140 --> 00:05:08.775 line:-2 align:center
which will just be within
the safe area


119
00:05:08.809 --> 00:05:10.978 line:-1 align:center
to keep it legible.


120
00:05:11,011 --> 00:05:12,679 line:-1
If we naively added a background


121
00:05:12,713 --> 00:05:14,781 line:-2
with the same bounds
to the view it's applied to,


122
00:05:14,815 --> 00:05:16,884 line:-1
we'd get this.


123
00:05:16,917 --> 00:05:19,520 line:-2
But if we apply
the ignoresSafeArea modifier


124
00:05:19.553 --> 00:05:21.088 line:-1 align:center
to just the background view,


125
00:05:21.121 --> 00:05:23.023 line:-2 align:center
then it will expand beyond
the safe area


126
00:05:23,056 --> 00:05:26,460 line:-2
while keeping the main content
nice and safe.


127
00:05:26,493 --> 00:05:27,895 line:-1
The new background modifier


128
00:05:27,928 --> 00:05:29,930 line:-2
gives you this behavior
automatically.


129
00:05:31.098 --> 00:05:34.301 line:-2 align:center
Let's go back to our background
and start customizing it.


130
00:05:34,334 --> 00:05:36,336 line:-1
We can pass in a specific style,


131
00:05:36,370 --> 00:05:39,139 line:-2
which could be a color
or any other style,


132
00:05:39.173 --> 00:05:40.174 line:-1 align:center
like a gradient.


133
00:05:42.009 --> 00:05:43.744 line:-2 align:center
It doesn't really make sense
in this app,


134
00:05:43,777 --> 00:05:45,646 line:-2
but let's look at something
pastel colored.


135
00:05:47.548 --> 00:05:50.350 line:-2 align:center
I can also pass in a shape
to clip this background to...


136
00:05:51.185 --> 00:05:53.020 line:-2 align:center
For example,
a rounded rectangle.


137
00:05:58.392 --> 00:06:00.227 line:-2 align:center
Notice that
when I use a custom shape,


138
00:06:00.260 --> 00:06:02.996 line:-2 align:center
the background no longer extends
out of the safe area


139
00:06:03.030 --> 00:06:05.866 line:-2 align:center
so that the shape matches
your content's bounds.


140
00:06:05,899 --> 00:06:07,768 line:-2
What I think would fit
our app better


141
00:06:07,801 --> 00:06:09,603 line:-1
is a blur for our background.


142
00:06:09,636 --> 00:06:12,673 line:-2
We can use another new API
to do that: Materials.


143
00:06:13,407 --> 00:06:16,476 line:-2
Materials are a set of standard
blur styles that you can apply.


144
00:06:17.578 --> 00:06:19.213 line:-2 align:center
And let's make
this background go back


145
00:06:19.246 --> 00:06:20.948 line:-1 align:center
to taking up the whole area.


146
00:06:22,683 --> 00:06:24,284 line:-1
Materials are great for places


147
00:06:24,318 --> 00:06:27,354 line:-2
where we want to show through
colorful content like this.


148
00:06:27,387 --> 00:06:29,656 line:-2
There's a set of different
materials you can choose from,


149
00:06:29.690 --> 00:06:32.826 line:-2 align:center
going from Ultra Thin
to Ultra Thick.


150
00:06:32.860 --> 00:06:34.528 line:-2 align:center
And all of these
automatically show


151
00:06:34,561 --> 00:06:36,663 line:-2
the right design
on every platform.


152
00:06:38.398 --> 00:06:40.100 line:-2 align:center
I'm going to use
a thin material here.


153
00:06:41.502 --> 00:06:43.637 line:-2 align:center
Next, I want to customize
our text.


154
00:06:43,670 --> 00:06:45,272 line:-2
Let's make
the number of colors


155
00:06:45,305 --> 00:06:46,640 line:-1
a little less prominent


156
00:06:46,673 --> 00:06:49,610 line:-2
to show that the name
is the primary information here.


157
00:06:51,011 --> 00:06:55,148 line:-2
I can do that by setting
a foreground style of secondary.


158
00:06:58.452 --> 00:07:00.587 line:-2 align:center
You may have noticed
that the secondary content


159
00:07:00.621 --> 00:07:03.390 line:-2 align:center
is automatically shown
with an effect called Vibrancy,


160
00:07:03,423 --> 00:07:05,259 line:-2
which blends
the colors behind it.


161
00:07:05,292 --> 00:07:08,462 line:-2
In SwiftUI, there's no extra API
for this effect.


162
00:07:08,495 --> 00:07:09,563 line:-1
It happens automatically


163
00:07:09.596 --> 00:07:12.132 line:-2 align:center
when you use the new Secondary
through Quaternary styles


164
00:07:12.165 --> 00:07:14.368 line:-1 align:center
in a material context.


165
00:07:14,401 --> 00:07:16,403 line:-2
That can happen when
you explicitly add a background


166
00:07:16,436 --> 00:07:18,438 line:-2
with a material,
like we just did,


167
00:07:18.472 --> 00:07:21.008 line:-2 align:center
or when your content
is in a system component,


168
00:07:21,041 --> 00:07:23,877 line:-2
like a sidebar,
that adds the material for you.


169
00:07:24.912 --> 00:07:27.347 line:-2 align:center
And these styles have
a lot of automatic smarts.


170
00:07:27,381 --> 00:07:29,049 line:-2
They automatically do
the right thing


171
00:07:29,082 --> 00:07:31,485 line:-2
when used in
a non-blurred context as well,


172
00:07:31.518 --> 00:07:33.387 line:-2 align:center
where they don't use
a vibrant effect.


173
00:07:34.021 --> 00:07:36.023 line:-2 align:center
They also automatically
change their behavior


174
00:07:36,056 --> 00:07:37,691 line:-1
as you set a color on them,


175
00:07:37.724 --> 00:07:40.527 line:-2 align:center
setting versions
of the color for each level.


176
00:07:40,561 --> 00:07:41,828 line:-1
And the same support works


177
00:07:41,862 --> 00:07:43,664 line:-2
for setting
any base foreground style,


178
00:07:43.697 --> 00:07:45.065 line:-1 align:center
even things like gradients.


179
00:07:45.098 --> 00:07:46.867 line:-1 align:center
Please use tastefully.


180
00:07:47.467 --> 00:07:48.569 line:-1 align:center
One thing to note:


181
00:07:48,602 --> 00:07:51,872 line:-2
Any given text can have a single
foreground style applied to it,


182
00:07:51.905 --> 00:07:54.441 line:-2 align:center
but multiple colors
within its ranges.


183
00:07:54,474 --> 00:07:56,476 line:-1
So for example,


184
00:07:56,510 --> 00:07:59,913 line:-2
I could use string interpolation
to embed an inner Text...


185
00:08:03,617 --> 00:08:08,288 line:-2
And then apply
a foregroundColor of red...


186
00:08:08.322 --> 00:08:09.823 line:-1 align:center
to the word "colors."


187
00:08:09,857 --> 00:08:11,024 line:-1
And it will show that color,


188
00:08:11,058 --> 00:08:13,694 line:-2
automatically opting out
of vibrancy for that range.


189
00:08:18,031 --> 00:08:19,266 line:-1
Even more importantly,


190
00:08:19.299 --> 00:08:22.002 line:-2 align:center
with these foreground styles,
for the first time ever,


191
00:08:22.035 --> 00:08:25.239 line:-2 align:center
you get the right behavior
with embedded emoji,


192
00:08:25,272 --> 00:08:26,707 line:-1
where they just work.


193
00:08:28.909 --> 00:08:30.410 line:-1 align:center
This is looking good.


194
00:08:30,444 --> 00:08:31,612 line:-1
Let's run it again


195
00:08:31.645 --> 00:08:34.014 line:-2 align:center
and try out Edit mode
with these changes too.


196
00:08:41.989 --> 00:08:43.790 line:-1 align:center
It mostly works already.


197
00:08:43.824 --> 00:08:47.261 line:-2 align:center
And these colors go under
the blur, which is great.


198
00:08:47.294 --> 00:08:48.829 line:-1 align:center
But if you look closely,


199
00:08:48,862 --> 00:08:51,498 line:-2
it's not doing
quite the right thing.


200
00:08:51,532 --> 00:08:53,133 line:-1
When I scroll all the way down,


201
00:08:53,166 --> 00:08:56,436 line:-2
there's a little bit of the list
that's hidden behind the blur.


202
00:08:56,470 --> 00:08:58,872 line:-2
Let's look more closely
at what's happening.


203
00:08:58.906 --> 00:09:00.541 line:-1 align:center
Let's take away the chrome


204
00:09:00,574 --> 00:09:02,576 line:-2
and only look
at the relevant views, here.


205
00:09:03.844 --> 00:09:07.114 line:-2 align:center
If we slide these views apart
a bit horizontally,


206
00:09:07.147 --> 00:09:09.049 line:-2 align:center
we can see
this is because the bar


207
00:09:09,082 --> 00:09:11,919 line:-2
is just ZStacked
on top of our content.


208
00:09:11.952 --> 00:09:14.221 line:-2 align:center
Now that we want to see
all of the view in the back,


209
00:09:14,254 --> 00:09:15,822 line:-2
that's not
the right behavior.


210
00:09:17.090 --> 00:09:19.126 line:-2 align:center
We could change
to a VStack here,


211
00:09:19,159 --> 00:09:20,861 line:-2
but without the list
under the blur,


212
00:09:20.894 --> 00:09:22.963 line:-2 align:center
we wouldn't get any
of the color showing through


213
00:09:22.996 --> 00:09:25.299 line:-1 align:center
when scrolling down.


214
00:09:25.332 --> 00:09:26.900 line:-2 align:center
We want
the background of the list


215
00:09:26.934 --> 00:09:28.168 line:-1 align:center
and its scrollable area


216
00:09:28.202 --> 00:09:31.171 line:-2 align:center
to extend under the bar
but not its main content.


217
00:09:31.205 --> 00:09:34.308 line:-2 align:center
And this is exactly
what the safe area is for.


218
00:09:34,341 --> 00:09:37,044 line:-2
If we make the safe area
get inset by this bar,


219
00:09:37,077 --> 00:09:40,848 line:-2
then any important content
will stay unobscured.


220
00:09:40,881 --> 00:09:43,016 line:-2
To customize the safe area
of our own views,


221
00:09:43.050 --> 00:09:46.720 line:-2 align:center
we can use a new modifier:
safeAreaInset.


222
00:09:46.753 --> 00:09:48.789 line:-2 align:center
This lets us add
auxiliary content,


223
00:09:48,822 --> 00:09:49,957 line:-1
like our bar,


224
00:09:49,990 --> 00:09:51,859 line:-1
over the main content.


225
00:09:51,892 --> 00:09:53,627 line:-1
I'll replace our ZStack...


226
00:09:56,697 --> 00:09:58,298 line:-1
With a safeAreaInset...


227
00:10:03,237 --> 00:10:05,105 line:-1
Using an edge of.bottom...


228
00:10:07.608 --> 00:10:10.277 line:-1 align:center
And put our controls into that.


229
00:10:10,310 --> 00:10:12,145 line:-1
Let's run it again to check.


230
00:10:17,718 --> 00:10:19,086 line:-1
This view still looks the same,


231
00:10:19,119 --> 00:10:20,387 line:-1
which is good.


232
00:10:20,420 --> 00:10:22,456 line:-2
That's because
it's ignoring the safe area.


233
00:10:24.091 --> 00:10:25.192 line:-1 align:center
And in Edit mode...


234
00:10:27,060 --> 00:10:30,731 line:-2
We can still scroll
under the bar to get that blur.


235
00:10:30,764 --> 00:10:32,266 line:-2
But when we scroll
to the bottom,


236
00:10:32,299 --> 00:10:34,034 line:-1
nothing is obscured.


237
00:10:34.067 --> 00:10:35.269 line:-1 align:center
Great.


238
00:10:35,302 --> 00:10:37,371 line:-2
Next,
let's look at our visualizers.


239
00:10:39,206 --> 00:10:41,008 line:-2
Let's start
with the Shapes visualizer,


240
00:10:41.041 --> 00:10:42.342 line:-1 align:center
which is already written.


241
00:10:44.211 --> 00:10:46.613 line:-2 align:center
It shows a large number
of random shape symbols,


242
00:10:46,647 --> 00:10:49,816 line:-2
each drawn with one
of the gradients from the app.


243
00:10:49,850 --> 00:10:52,052 line:-2
I can tap on a symbol
to zoom it up...


244
00:10:55.222 --> 00:10:58.525 line:-2 align:center
Or tap in the background to
reposition all of the symbols.


245
00:11:00,327 --> 00:11:02,729 line:-2
And if you've seen our SwiftUI
animation demos before,


246
00:11:02,763 --> 00:11:05,098 line:-2
you know that it's always
interactive and interruptible.


247
00:11:05.132 --> 00:11:07.034 line:-1 align:center
So I can keep rearranging...


248
00:11:09,136 --> 00:11:11,972 line:-2
And even tap to select
and deselect shapes


249
00:11:12.005 --> 00:11:13.440 line:-1 align:center
while that's happening.


250
00:11:15,976 --> 00:11:17,544 line:-1
If I go look at the code...


251
00:11:19.413 --> 00:11:23.951 line:-2 align:center
It's using a common technique
for drawing graphics in SwiftUI.


252
00:11:23.984 --> 00:11:25.252 line:-1 align:center
There's a GeometryReader


253
00:11:25,285 --> 00:11:26,820 line:-2
so I can read
the view's size


254
00:11:26,854 --> 00:11:29,423 line:-1
to lay out all of these graphics


255
00:11:29.456 --> 00:11:31.491 line:-2 align:center
and a ZStack
to help me position them.


256
00:11:33.660 --> 00:11:35.262 line:-1 align:center
And at the end of the body,


257
00:11:35,295 --> 00:11:38,632 line:-2
there's a modifier you may have
seen before: drawingGroup.


258
00:11:38.665 --> 00:11:40.234 line:-1 align:center
A drawingGroup tells SwiftUI


259
00:11:40,267 --> 00:11:42,169 line:-2
to combine all of the views
it contains


260
00:11:42,202 --> 00:11:44,371 line:-1
in a single layer to draw.


261
00:11:44,404 --> 00:11:45,873 line:-2
This works well
for graphical elements


262
00:11:45.906 --> 00:11:47.007 line:-1 align:center
like these


263
00:11:47,040 --> 00:11:48,842 line:-2
but shouldn't be used
with UI controls


264
00:11:48.876 --> 00:11:50.711 line:-1 align:center
like text fields and lists.


265
00:11:51.912 --> 00:11:53.313 line:-1 align:center
This is a great technique to use


266
00:11:53.347 --> 00:11:55.682 line:-2 align:center
when you want to show a large
number of graphical elements


267
00:11:55.716 --> 00:11:56.984 line:-1 align:center
like we're doing here.


268
00:11:57,784 --> 00:11:59,319 line:-2
And one of the benefits
of drawingGroup


269
00:11:59,353 --> 00:12:02,022 line:-2
is that even though these views
are drawn differently,


270
00:12:02,055 --> 00:12:04,558 line:-2
you can still use the same
functionality from SwiftUI


271
00:12:04,591 --> 00:12:06,493 line:-2
that you use everywhere else
in your app.


272
00:12:07,694 --> 00:12:09,196 line:-1
For example, here,


273
00:12:09.229 --> 00:12:11.164 line:-2 align:center
we have a gesture applied
to each symbol


274
00:12:11.198 --> 00:12:12.366 line:-1 align:center
for tapping on them


275
00:12:12,399 --> 00:12:14,201 line:-1
and also an animation


276
00:12:14.234 --> 00:12:17.571 line:-2 align:center
that applies when we change
selection or reposition them.


277
00:12:18,338 --> 00:12:20,707 line:-2
The accessibility information
contained in these views


278
00:12:20,741 --> 00:12:22,743 line:-1
is also passed up normally--


279
00:12:22.776 --> 00:12:26.446 line:-2 align:center
for example, these accessibility
actions on each symbol.


280
00:12:26,480 --> 00:12:28,448 line:-2
However, to support
all of these features,


281
00:12:28,482 --> 00:12:29,416 line:-1
there is some bookkeeping


282
00:12:29,449 --> 00:12:31,285 line:-2
and storage required
for each view.


283
00:12:31.318 --> 00:12:33.654 line:-2 align:center
If you have a high enough
number of elements,


284
00:12:33,687 --> 00:12:36,156 line:-2
then even that extra overhead
might be too much.


285
00:12:36,190 --> 00:12:37,457 line:-1
And for those cases,


286
00:12:37.491 --> 00:12:39.893 line:-2 align:center
we've introduced
a new Canvas view.


287
00:12:39,927 --> 00:12:41,361 line:-1
Our next visualizer


288
00:12:41.395 --> 00:12:43.363 line:-2 align:center
will show
a complex particle system,


289
00:12:43,397 --> 00:12:44,631 line:-1
and it isn't written yet.


290
00:12:44.665 --> 00:12:45.999 line:-1 align:center
Let's go build it.


291
00:12:46.033 --> 00:12:48.402 line:-2 align:center
Let's start with
our Canvas view to draw it.


292
00:12:52.406 --> 00:12:53.774 line:-1 align:center
This lets us make a closure


293
00:12:53,807 --> 00:12:56,210 line:-2
that's run every time
the canvas is drawn


294
00:12:56.243 --> 00:12:57.744 line:-2 align:center
and contains
our drawing commands.


295
00:12:58.312 --> 00:13:00.347 line:-2 align:center
If you're familiar
with drawRect in UIKit


296
00:13:00,380 --> 00:13:01,248 line:-1
or AppKit,


297
00:13:01.281 --> 00:13:02.583 line:-1 align:center
this works pretty similarly.


298
00:13:03,317 --> 00:13:05,052 line:-1
This closure gives us a context,


299
00:13:05,085 --> 00:13:07,254 line:-2
which is what we send
drawing commands to,


300
00:13:07.287 --> 00:13:09.456 line:-1 align:center
and a size that we can use


301
00:13:09.489 --> 00:13:12.025 line:-2 align:center
to get the size
of the entire canvas.


302
00:13:12,059 --> 00:13:13,827 line:-2
Let's start by just
drawing an image.


303
00:13:15,028 --> 00:13:17,364 line:-2
I can create one
using the same Image type


304
00:13:17,397 --> 00:13:19,533 line:-2
I use in the rest
of my SwiftUI code.


305
00:13:22.469 --> 00:13:25.105 line:-2 align:center
And let's tell the context
to draw our image.


306
00:13:32,179 --> 00:13:34,348 line:-2
When we draw it at 0,0,
it's up here,


307
00:13:34,381 --> 00:13:37,417 line:-2
centered at the origin,
where it's not very visible.


308
00:13:37,451 --> 00:13:40,187 line:-2
Since we have the size
of the whole canvas available,


309
00:13:40,220 --> 00:13:42,856 line:-2
let's use that to draw it
in the middle instead.


310
00:13:51.198 --> 00:13:53.200 line:-2 align:center
And one thing you can see
if I change our preview


311
00:13:53,233 --> 00:13:54,635 line:-1
to be in Dark Mode...


312
00:13:58.939 --> 00:14:01.742 line:-2 align:center
Is that our image automatically
flips to draw in white,


313
00:14:01,775 --> 00:14:03,610 line:-2
since it's using the same
foreground style


314
00:14:03,644 --> 00:14:05,179 line:-1
that we saw earlier.


315
00:14:05.212 --> 00:14:07.114 line:-2 align:center
Since we want to build
a particle system,


316
00:14:07,147 --> 00:14:08,815 line:-2
let's draw this image
a few more times.


317
00:14:10,884 --> 00:14:13,520 line:-2
Note that this closure
is for imperative code.


318
00:14:13.554 --> 00:14:14.922 line:-1 align:center
It's not a ViewBuilder.


319
00:14:14.955 --> 00:14:17.090 line:-2 align:center
So I can
just use a normal for loop.


320
00:14:21,461 --> 00:14:24,298 line:-2
And let's shift each image a bit
so we can actually see them.


321
00:14:32.706 --> 00:14:35.442 line:-2 align:center
Now, we're drawing
this image several times,


322
00:14:35.475 --> 00:14:36.276 line:-1 align:center
but each time,


323
00:14:36,310 --> 00:14:38,645 line:-2
the context needs to resolve it
to evaluate it


324
00:14:38,679 --> 00:14:40,714 line:-2
based on things
like the current environment,


325
00:14:40.747 --> 00:14:43.517 line:-2 align:center
even though each time,
it's the same image.


326
00:14:43,550 --> 00:14:45,986 line:-2
We can improve this
by resolving the image ourselves


327
00:14:46,019 --> 00:14:47,454 line:-1
before drawing it.


328
00:14:52.526 --> 00:14:54.027 line:-1 align:center
Now we have better performance


329
00:14:54,061 --> 00:14:56,363 line:-2
because we're sharing
the same resolved image,


330
00:14:56.396 --> 00:14:58.732 line:-2 align:center
but the resolved image also
lets us do some other things.


331
00:15:00,601 --> 00:15:03,637 line:-2
We can now ask
for its size and baseline.


332
00:15:03,670 --> 00:15:04,505 line:-1
In our case,


333
00:15:04,538 --> 00:15:07,541 line:-2
we'll use its size to shift
each one by the right amount.


334
00:15:17,351 --> 00:15:20,153 line:-2
Next, let's add ellipses
behind our sparkles.


335
00:15:20,187 --> 00:15:22,389 line:-2
I'm going to draw them
in the same region.


336
00:15:22,422 --> 00:15:24,625 line:-2
So let's pull out a frame
to draw them both in.


337
00:15:29.563 --> 00:15:31.932 line:-1 align:center
I'll create a CGRect


338
00:15:31,965 --> 00:15:34,968 line:-1
with the same X and Y values


339
00:15:35,002 --> 00:15:37,371 line:-2
and use our imageSize
for the width and height...


340
00:15:45.312 --> 00:15:47.714 line:-2 align:center
Then draw our image
in that frame.


341
00:15:50.117 --> 00:15:52.653 line:-2 align:center
Because each drawing operation
is done in order,


342
00:15:52,686 --> 00:15:54,421 line:-2
to put our ellipse
behind the image,


343
00:15:54,454 --> 00:15:56,190 line:-1
we need to draw it first.


344
00:15:56,223 --> 00:15:58,392 line:-2
And we can draw it
with context.fill...


345
00:16:00.327 --> 00:16:02.563 line:-2 align:center
Which takes a path
and a shading.


346
00:16:02,596 --> 00:16:05,465 line:-2
You can construct a path
with standard bezier curves,


347
00:16:05,499 --> 00:16:07,668 line:-1
but here's a tip:


348
00:16:07.701 --> 00:16:10.437 line:-2 align:center
You can also use shapes
like ellipse


349
00:16:10,470 --> 00:16:14,074 line:-2
and ask them for their path
in a given rectangle.


350
00:16:16,343 --> 00:16:18,212 line:-1
The other argument is a shading,


351
00:16:18,245 --> 00:16:19,947 line:-2
which is what
to fill our path with.


352
00:16:19.980 --> 00:16:23.817 line:-2 align:center
And this can use the same styles
as the rest of our SwiftUI app.


353
00:16:23,851 --> 00:16:25,719 line:-1
Let's use a cyan color.


354
00:16:28.388 --> 00:16:30.090 line:-1 align:center
And there are the ellipses.


355
00:16:30,123 --> 00:16:32,459 line:-2
There's not a lot of contrast
with the images, though.


356
00:16:32.492 --> 00:16:33.827 line:-1 align:center
Let's fix that.


357
00:16:33,861 --> 00:16:36,396 line:-2
Graphics context has many
standard drawing properties,


358
00:16:36.430 --> 00:16:40.267 line:-2 align:center
like opacity, blend modes,
transforms, and more.


359
00:16:40,300 --> 00:16:42,369 line:-1
Let's set an opacity here.


360
00:16:42,402 --> 00:16:43,504 line:-1
And we can look at an area


361
00:16:43.537 --> 00:16:45.439 line:-2 align:center
where this context behaves
a little differently


362
00:16:45,472 --> 00:16:48,375 line:-1
from what you might be used to.


363
00:16:48.408 --> 00:16:50.777 line:-2 align:center
If I just set an opacity
on the context,


364
00:16:50,811 --> 00:16:52,546 line:-1
then it behaves as you'd expect.


365
00:16:52.579 --> 00:16:55.315 line:-2 align:center
It affects all operations
that happen afterwards.


366
00:16:57,217 --> 00:16:58,352 line:-1
In the past,


367
00:16:58,385 --> 00:17:00,654 line:-2
if I wanted to make a change
to a graphics context


368
00:17:00,687 --> 00:17:03,156 line:-2
only applied to some
of my drawing operations,


369
00:17:03.190 --> 00:17:04.925 line:-2 align:center
I would have to bracket
those operations


370
00:17:04,958 --> 00:17:07,494 line:-1
in a save and restore call.


371
00:17:07,528 --> 00:17:09,129 line:-1
But with a SwiftUI context,


372
00:17:09.162 --> 00:17:11.798 line:-2 align:center
all I have to do is make changes
on a copy.


373
00:17:19,306 --> 00:17:20,874 line:-1
And those changes only affect


374
00:17:20.908 --> 00:17:23.377 line:-2 align:center
drawing done
with the modified context.


375
00:17:23,410 --> 00:17:26,380 line:-2
Drawing done on the original
context is unaffected.


376
00:17:28.849 --> 00:17:30.951 line:-2 align:center
Let's add some color
to our image too.


377
00:17:31.952 --> 00:17:34.087 line:-2 align:center
One other thing we can do
with a resolved image


378
00:17:34,121 --> 00:17:36,323 line:-2
is set a shading to control
how symbols are drawn.


379
00:17:41,228 --> 00:17:42,963 line:-1
Let's set a blue color here.


380
00:17:47.267 --> 00:17:50.070 line:-2 align:center
That looks a little less bright
than I was hoping for.


381
00:17:50,103 --> 00:17:51,538 line:-1
Sometimes when you're drawing,


382
00:17:51,572 --> 00:17:54,341 line:-2
the right blend mode
can make a big difference.


383
00:17:54.374 --> 00:17:56.610 line:-2 align:center
Blend modes control
how colors are combined,


384
00:17:56.643 --> 00:17:58.946 line:-2 align:center
especially with partial opacity,
like we have here.


385
00:18:02,649 --> 00:18:04,551 line:-1
Let's set a screen blend mode.


386
00:18:04,585 --> 00:18:08,388 line:-2
That combines colors so that
they always get brighter.


387
00:18:08.422 --> 00:18:09.690 line:-1 align:center
That's looks better.


388
00:18:10,991 --> 00:18:13,260 line:-2
There are many more
drawing operations you can do.


389
00:18:13,293 --> 00:18:15,028 line:-2
Check out
the GraphicsContext type


390
00:18:15.062 --> 00:18:16.997 line:-2 align:center
to see everything
that's possible.


391
00:18:17,030 --> 00:18:18,732 line:-2
Now, to make this
like a simulation,


392
00:18:18,765 --> 00:18:20,834 line:-1
it needs to actually move.


393
00:18:20.868 --> 00:18:21.869 line:-1 align:center
There are a few tools


394
00:18:21,902 --> 00:18:24,204 line:-2
to make something change
over time in SwiftUI.


395
00:18:24,972 --> 00:18:26,974 line:-1
Animations are the most common,


396
00:18:27,007 --> 00:18:28,709 line:-2
and they generally just
happen automatically


397
00:18:28,742 --> 00:18:30,544 line:-1
when you make a change.


398
00:18:30,577 --> 00:18:31,278 line:-1
This year,


399
00:18:31,311 --> 00:18:32,980 line:-2
we're introducing a new
lower-level tool


400
00:18:33,013 --> 00:18:34,181 line:-1
called TimelineView


401
00:18:34,214 --> 00:18:35,249 line:-1
for when you want to control


402
00:18:35,282 --> 00:18:38,151 line:-2
exactly how something changes
over time.


403
00:18:38.185 --> 00:18:39.653 line:-1 align:center
I can use a TimelineView


404
00:18:39,686 --> 00:18:41,221 line:-2
by just wrapping it
around the view


405
00:18:41.255 --> 00:18:42.289 line:-1 align:center
that I want to change.


406
00:18:49.796 --> 00:18:51.632 line:-2 align:center
And I can configure it
with a schedule,


407
00:18:51,665 --> 00:18:53,600 line:-2
which tells it
how often to update.


408
00:18:56,370 --> 00:18:58,405 line:-2
There are schedules
for things like timers,


409
00:18:58,438 --> 00:19:01,008 line:-2
but we're going to use
an animation schedule


410
00:19:01,041 --> 00:19:03,644 line:-2
to get updates as quickly
as we can display them.


411
00:19:04,845 --> 00:19:06,380 line:-2
If you're familiar
with a display link,


412
00:19:06.413 --> 00:19:07.881 line:-1 align:center
this works very similarly.


413
00:19:07.915 --> 00:19:09.750 line:-2 align:center
And if you're not,
that's totally OK.


414
00:19:09.783 --> 00:19:11.885 line:-2 align:center
We get passed
a timeline context


415
00:19:11.919 --> 00:19:14.221 line:-2 align:center
that gives us information
about what we should show.


416
00:19:16.490 --> 00:19:18.292 line:-2 align:center
I can pull out
a time in seconds


417
00:19:18.325 --> 00:19:20.627 line:-2 align:center
that we'll use
to animate our images around.


418
00:19:26,366 --> 00:19:29,570 line:-2
Let's make our images move
in a rotating oscillation.


419
00:19:29,603 --> 00:19:31,705 line:-2
So I'll make an angle
from the current time.


420
00:19:36,743 --> 00:19:38,278 line:-2
Let's have it loop
every three seconds


421
00:19:38.312 --> 00:19:40.247 line:-1 align:center
by using a remainder...


422
00:19:42.082 --> 00:19:45.786 line:-2 align:center
And multiply that by 120
to get 360 degrees.


423
00:19:47.221 --> 00:19:50.290 line:-2 align:center
And we'll get the X value
with cosine.


424
00:19:50,324 --> 00:19:51,425 line:-1
Or was it sine?


425
00:19:51.458 --> 00:19:52.860 line:-2 align:center
I hope you remember
your trigonometry.


426
00:19:56,230 --> 00:19:58,899 line:-2
Now let's use that value
to change our offset...


427
00:20:01.101 --> 00:20:03.704 line:-2 align:center
And take our previews live
to see how it looks.


428
00:20:06,173 --> 00:20:06,840 line:-1
Nice.


429
00:20:06.874 --> 00:20:09.510 line:-2 align:center
See how when they overlap,
they get even brighter?


430
00:20:09.543 --> 00:20:11.778 line:-2 align:center
That's our screen blend mode
at work.


431
00:20:11.812 --> 00:20:13.647 line:-2 align:center
Next,
let's add some interactivity.


432
00:20:14.348 --> 00:20:16.517 line:-2 align:center
Earlier, we looked at some
of the interactions we can do


433
00:20:16,550 --> 00:20:19,553 line:-2
by adding gestures
to individual views.


434
00:20:19.586 --> 00:20:21.121 line:-2 align:center
Remember that one
of the tradeoffs


435
00:20:21,154 --> 00:20:22,456 line:-1
of using a canvas


436
00:20:22,489 --> 00:20:24,458 line:-2
is that the individual elements
within it


437
00:20:24,491 --> 00:20:26,560 line:-2
are combined
into a single drawing.


438
00:20:26,593 --> 00:20:27,828 line:-2
So we couldn't,
for example,


439
00:20:27.861 --> 00:20:31.498 line:-2 align:center
attach a gesture
to these individual images.


440
00:20:31,532 --> 00:20:34,768 line:-2
However, we can still add
a gesture to the entire view.


441
00:20:34.801 --> 00:20:35.869 line:-1 align:center
Let's add the ability


442
00:20:35.903 --> 00:20:38.705 line:-2 align:center
to increase the number
of sparkles shown.


443
00:20:38.739 --> 00:20:40.374 line:-2 align:center
We'll add some state
for how many to show.


444
00:20:45.445 --> 00:20:48.649 line:-2 align:center
And let's have it start
with two.


445
00:20:48,682 --> 00:20:51,852 line:-2
Let's use the count
to control our loop.


446
00:20:55,088 --> 00:20:57,958 line:-2
Then we'll add a TapGesture
to increment the count.


447
00:21:02,462 --> 00:21:03,931 line:-1
Let's update our preview.


448
00:21:07,067 --> 00:21:10,070 line:-2
And now we can
tap to add sparkles.


449
00:21:13,207 --> 00:21:15,776 line:-2
One other important aspect
of using a canvas


450
00:21:15.809 --> 00:21:17.678 line:-2 align:center
is that,
since it's a single graphic,


451
00:21:17.711 --> 00:21:20.047 line:-2 align:center
there's not any information
about its contents


452
00:21:20.080 --> 00:21:22.516 line:-1 align:center
available to Accessibility.


453
00:21:22.549 --> 00:21:24.451 line:-1 align:center
To make this accessible,


454
00:21:24,484 --> 00:21:26,620 line:-2
we'll use the standard
accessibility modifiers


455
00:21:26,653 --> 00:21:28,722 line:-2
to add information
about our view.


456
00:21:37,464 --> 00:21:38,866 line:-1
And for more advanced cases,


457
00:21:38.899 --> 00:21:42.035 line:-2 align:center
there's a powerful new
.accessibilityChildren modifier


458
00:21:42.069 --> 00:21:43.103 line:-1 align:center
that lets you specify


459
00:21:43.136 --> 00:21:45.205 line:-2 align:center
an arbitrary SwiftUI
view hierarchy


460
00:21:45.239 --> 00:21:48.976 line:-2 align:center
to use to generate accessibility
information about a view.


461
00:21:49,009 --> 00:21:51,411 line:-2
See "SwiftUI Accessibility:
Beyond the Basics"


462
00:21:51.445 --> 00:21:53.747 line:-2 align:center
for more information
on how to use that.


463
00:21:55,249 --> 00:21:57,784 line:-2
We've built up a relatively
simple use of Canvas,


464
00:21:57.818 --> 00:22:00.621 line:-2 align:center
but it's designed to support
much more complex uses,


465
00:22:00,654 --> 00:22:02,723 line:-1
so let's spice things up a bit.


466
00:22:02.756 --> 00:22:05.125 line:-2 align:center
One of my colleagues wrote
some simulation code for me


467
00:22:05,158 --> 00:22:07,094 line:-2
that works the same way
as what we have here,


468
00:22:07,127 --> 00:22:09,930 line:-2
but with a lot more elements
doing more interesting things.


469
00:22:09,963 --> 00:22:11,865 line:-1
I have the file he sent me here


470
00:22:11.899 --> 00:22:13.600 line:-2 align:center
that I'll just paste
into our view.


471
00:22:22.943 --> 00:22:26.747 line:-2 align:center
This code has the same structure
as what we were just doing.


472
00:22:26,780 --> 00:22:29,049 line:-2
We now have
a long-lived model object


473
00:22:29.082 --> 00:22:30.717 line:-1 align:center
that we're updating over time


474
00:22:30,751 --> 00:22:33,887 line:-2
that keeps track
of all of our particles.


475
00:22:33.921 --> 00:22:36.023 line:-2 align:center
We have
the same TimelineView and Canvas


476
00:22:36,056 --> 00:22:38,692 line:-1
to animate and draw our content.


477
00:22:38,725 --> 00:22:42,229 line:-2
We're updating our model
with the new date,


478
00:22:42.262 --> 00:22:44.665 line:-1 align:center
setting that screen blend mode,


479
00:22:44.698 --> 00:22:47.367 line:-2 align:center
and telling each active particle
to draw itself


480
00:22:47.401 --> 00:22:50.037 line:-2 align:center
the same way as the ellipse
that we just had.


481
00:22:50.070 --> 00:22:53.207 line:-2 align:center
And finally, we have
the same modifiers applied,


482
00:22:53.240 --> 00:22:55.642 line:-2 align:center
just with a slightly
more complex gesture.


483
00:22:55,676 --> 00:22:57,244 line:-1
So let's see what it looks like.


484
00:23:04.084 --> 00:23:07.120 line:-2 align:center
It creates a new
fireworks burst periodically,


485
00:23:07,154 --> 00:23:10,791 line:-2
and we can also tap
to add more bursts.


486
00:23:10.824 --> 00:23:12.326 line:-2 align:center
And they're made
using ellipses


487
00:23:12,359 --> 00:23:14,494 line:-2
with the colors
from the app's gradients.


488
00:23:16.964 --> 00:23:19.233 line:-2 align:center
One other great thing about
drawing in Canvas


489
00:23:19.266 --> 00:23:21.869 line:-2 align:center
is that it also works on
watchOS,


490
00:23:21.902 --> 00:23:24.404 line:-1 align:center
tvOS, and macOS.


491
00:23:24,438 --> 00:23:27,241 line:-2
It's available
on all SwiftUI platforms.


492
00:23:27.274 --> 00:23:29.643 line:-2 align:center
All right.
We've finished our app.


493
00:23:29.676 --> 00:23:30.744 line:-1 align:center
And along the way,


494
00:23:30.777 --> 00:23:34.014 line:-2 align:center
we looked at working with
and modifying safe areas,


495
00:23:34,047 --> 00:23:37,784 line:-2
how to use foreground styles
to control how content is drawn,


496
00:23:37.818 --> 00:23:41.455 line:-2 align:center
how to use materials
to get blurs and vibrancy,


497
00:23:41,488 --> 00:23:43,657 line:-2
and we used Canvas
and TimelineView


498
00:23:43,690 --> 00:23:46,727 line:-2
to build complex
animated graphics.


499
00:23:46,760 --> 00:23:50,030 line:-2
I can't wait to see what amazing
graphics you build in your apps.


500
00:23:50.063 --> 00:23:52.065 line:-1 align:center
[music]

