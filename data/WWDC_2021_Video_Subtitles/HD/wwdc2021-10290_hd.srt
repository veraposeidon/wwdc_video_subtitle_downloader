2
00:00:00.000 --> 00:00:01.835 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:01,835 --> 00:00:05,472 line:-1
♪ Bass music playing ♪


4
00:00:05.472 --> 00:00:07.307 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,307 --> 00:00:09,109 position:90% line:0 size:2%
♪


6
00:00:09,109 --> 00:00:11,011 line:-1
Marty Pye: Welcome to
"What’s new in AVKit".


7
00:00:11.011 --> 00:00:14.514 line:-1 position:50%
My name is Marty Pye and I'm
an engineer on the AVKit team.


8
00:00:14.514 --> 00:00:16.116 line:-1 position:50%
Today, I'd like to talk about


9
00:00:16.116 --> 00:00:17.684 line:-1 position:50%
some of the enhancements
we've made


10
00:00:17.684 --> 00:00:19.920 line:-1 position:50%
to Picture in Picture --
or short, PiP --


11
00:00:19,920 --> 00:00:23,924 line:-1
as well as to the full-screen
experience on macOS.


12
00:00:23,924 --> 00:00:27,127 line:-1
Let's start with
Picture in Picture.


13
00:00:27.127 --> 00:00:28.228 line:-1 position:50%
With Picture in Picture,


14
00:00:28.228 --> 00:00:30.931 line:-1 position:50%
users can continue
to enjoy their video content


15
00:00:30,931 --> 00:00:33,233 line:-1
while multitasking
with their device.


16
00:00:33,233 --> 00:00:35,802 line:-1
For example, if you're watching
a video full screen


17
00:00:35,802 --> 00:00:37,437 line:-1
and you receive a message,


18
00:00:37,437 --> 00:00:39,306 line:-1
you can briefly
reply to that message


19
00:00:39.306 --> 00:00:41.708 line:-1 position:50%
while continuing
to watch your content.


20
00:00:41,708 --> 00:00:44,144 line:-1
The video will automatically
enter PiP,


21
00:00:44,144 --> 00:00:45,612 line:-1
and once you've
finished replying,


22
00:00:45.612 --> 00:00:48.649 line:-1 position:50%
you can quickly resume
full-screen playback.


23
00:00:48.649 --> 00:00:51.084 line:-1 position:50%
This makes for a really seamless
viewing experience,


24
00:00:51.084 --> 00:00:53.120 line:-1 position:50%
and we think users
will expect this behavior


25
00:00:53.120 --> 00:00:55.722 line:-1 position:50%
whenever they're
watching videos.


26
00:00:55,722 --> 00:00:57,824 line:-1
For more information
on how to integrate PiP


27
00:00:57.824 --> 00:00:59.226 line:-1 position:50%
into your own apps,


28
00:00:59,226 --> 00:01:01,595 line:-1
I encourage you to watch
this 2019 session


29
00:01:01,595 --> 00:01:05,565 line:-1
on delivering intuitive media
playback with AVKit.


30
00:01:05,565 --> 00:01:08,568 line:-1
New this year,
if your video is playing inline,


31
00:01:08,568 --> 00:01:11,672 line:-1
you can optionally allow it
to automatically enter PiP


32
00:01:11,672 --> 00:01:14,841 line:-1
when a user swipes back
to the Home screen.


33
00:01:14.841 --> 00:01:16.977 line:-1 position:50%
Enabling this behavior
is achieved via the


34
00:01:16,977 --> 00:01:19,546 line:-1
canStartPictureInPicture
AutomaticallyFromInline


35
00:01:19,546 --> 00:01:21,415 line:-1
property.


36
00:01:21,415 --> 00:01:24,318 line:-1
This property is available
both on AVPlayerViewController


37
00:01:24.318 --> 00:01:26.586 line:-1 position:50%
for apps using
our native controls


38
00:01:26,586 --> 00:01:28,822 line:-1
and on
AVPictureInPictureController


39
00:01:28,822 --> 00:01:31,792 line:-1
for apps implementing
their own custom UI.


40
00:01:31,792 --> 00:01:33,894 line:-1
Make sure to only
set this flag to true


41
00:01:33,894 --> 00:01:35,562 line:-1
when the playing content
is intended


42
00:01:35,562 --> 00:01:39,433 line:-1
to be the user's primary focus.


43
00:01:39,433 --> 00:01:41,168 line:-1
If you're using
AVPlayerViewController


44
00:01:41,168 --> 00:01:44,371 line:-1
to present video content,
PiP is handled for you.


45
00:01:44,371 --> 00:01:46,340 line:-1
There's nothing you need to do.


46
00:01:46.340 --> 00:01:48.475 line:-1 position:50%
If you're not using
AVPlayerViewController,


47
00:01:48.475 --> 00:01:51.244 line:-1 position:50%
you can still use
AVPictureInPictureController


48
00:01:51.244 --> 00:01:54.548 line:-1 position:50%
to bring the native
PiP experience to your app.


49
00:01:54,548 --> 00:01:55,916 line:-1
First, you need to configure


50
00:01:55.916 --> 00:01:58.652 line:-1 position:50%
your app's audio session
category for playback


51
00:01:58.652 --> 00:02:01.221 line:-1 position:50%
and enable the PiP
background mode.


52
00:02:01,221 --> 00:02:02,823 line:-1
Then, all you need to do


53
00:02:02,823 --> 00:02:04,925 line:-1
is create a
pictureInPictureController,


54
00:02:04.925 --> 00:02:08.095 line:-1 position:50%
passing in a reference
to the playerLayer.


55
00:02:08,095 --> 00:02:10,664 line:-1
Then, when a user attempts
to toggle Picture in Picture


56
00:02:10.664 --> 00:02:12.466 line:-1 position:50%
using the button you provide,


57
00:02:12,466 --> 00:02:14,968 line:-1
you just need to call
start or stop PiP


58
00:02:14.968 --> 00:02:17.137 line:-1 position:50%
on the controller object.


59
00:02:17.137 --> 00:02:19.740 line:-1 position:50%
Up until now, our
Picture in Picture experience


60
00:02:19.740 --> 00:02:22.642 line:-1 position:50%
was built around
AVPlayer-based content.


61
00:02:22,642 --> 00:02:25,946 line:-1
Today, I'm excited to announce
the same level of support


62
00:02:25.946 --> 00:02:28.315 line:-1 position:50%
for AVSampleBufferDisplayLayer.


63
00:02:28,315 --> 00:02:30,550 line:-1
Instead of creating the
Picture in Picture controller


64
00:02:30.550 --> 00:02:33.854 line:-1 position:50%
with a player layer, you first
create a ContentSource,


65
00:02:33,854 --> 00:02:36,556 line:-1
which you set up with either
an AVPlayerLayer or --


66
00:02:36.556 --> 00:02:40.027 line:-1 position:50%
as shown here -- with an
AVSampleBufferDisplayLayer.


67
00:02:40,027 --> 00:02:42,295 line:-1
For a user, the
Picture in Picture experience


68
00:02:42,295 --> 00:02:43,764 line:-1
will be identical.


69
00:02:43,764 --> 00:02:45,032 line:-1
For you as a developer,


70
00:02:45.032 --> 00:02:46.767 line:-1 position:50%
there are some
new responsibilities


71
00:02:46,767 --> 00:02:51,004 line:-1
associated with supporting PiP
for AVSampleBufferDisplayLayer.


72
00:02:51,004 --> 00:02:53,340 line:-1
Let's take a look
at this playback delegate.


73
00:02:53,340 --> 00:02:56,143 line:-1
We have to rely on
playback state information


74
00:02:56,143 --> 00:02:57,511 line:-1
provided via the new


75
00:02:57,511 --> 00:03:00,547 line:-1
AVPictureInPictureSample
BufferPlaybackDelegate


76
00:03:00.547 --> 00:03:02.516 line:-1 position:50%
in order to render the PiP UI,


77
00:03:02.516 --> 00:03:06.253 line:-1 position:50%
since media playback
is not managed by an AVPlayer.


78
00:03:06,253 --> 00:03:09,289 line:-1
When the user attempts to
control media from the PiP UI,


79
00:03:09,289 --> 00:03:12,726 line:-1
we forward those commands
to the delegate to handle.


80
00:03:12.726 --> 00:03:16.696 line:-1 position:50%
Let's go through the five
individual callbacks one by one.


81
00:03:16.696 --> 00:03:19.399 line:-1 position:50%
The setPlaying function
is called when the user presses


82
00:03:19.399 --> 00:03:21.568 line:-1 position:50%
the Play/Pause button
in the PiP window.


83
00:03:21,568 --> 00:03:23,336 line:-1
The skipByInterval function
is called


84
00:03:23,336 --> 00:03:25,972 line:-1
when the user presses
one of the skip buttons.


85
00:03:25.972 --> 00:03:29.476 line:-1 position:50%
Use these callbacks to control
your media accordingly.


86
00:03:29.476 --> 00:03:32.512 line:-1 position:50%
The timeRangeForPlayback
function allows you to specify


87
00:03:32.512 --> 00:03:34.748 line:-1 position:50%
the currently playable
time range.


88
00:03:34,748 --> 00:03:36,716 line:-1
This allows us
to render the timeline


89
00:03:36.716 --> 00:03:39.319 line:-1 position:50%
and show where the playhead
is currently.


90
00:03:39,319 --> 00:03:41,054 line:-1
Time ranges
with a finite duration


91
00:03:41.054 --> 00:03:42.956 line:-1 position:50%
should always
contain the current time


92
00:03:42,956 --> 00:03:45,892 line:-1
of the sample buffer
display layer's timebase.


93
00:03:45,892 --> 00:03:48,061 line:-1
Use a time range
with an infinite duration


94
00:03:48,061 --> 00:03:50,330 line:-1
to indicate live content.


95
00:03:50.330 --> 00:03:52.532 line:-1 position:50%
The didTransitionToRenderSize
function


96
00:03:52,532 --> 00:03:54,401 line:-1
is called when
the Picture in Picture window


97
00:03:54,401 --> 00:03:57,637 line:-1
changes size, such as
during pinch-to-zoom.


98
00:03:57.637 --> 00:03:59.539 line:-1 position:50%
Take this render size
into account


99
00:03:59,539 --> 00:04:01,208 line:-1
when choosing media variants


100
00:04:01,208 --> 00:04:04,811 line:-1
in order to avoid unnecessary
decoding overhead.


101
00:04:04.811 --> 00:04:07.781 line:-1 position:50%
The isPlaybackPaused
function is called periodically


102
00:04:07,781 --> 00:04:09,583 line:-1
and informs
the Picture in Picture UI


103
00:04:09,583 --> 00:04:12,552 line:-1
whether to reflect
a paused or playing state.


104
00:04:12.552 --> 00:04:14.221 line:-1 position:50%
This is conceptually
the equivalent


105
00:04:14,221 --> 00:04:17,491 line:-1
of timeControlStatus
on AVPlayer.


106
00:04:17.491 --> 00:04:19.793 line:-1 position:50%
Next, let's take a look at
some of the improvements


107
00:04:19,793 --> 00:04:23,663 line:-1
we've made to the full-screen
experience on macOS.


108
00:04:23,663 --> 00:04:25,899 line:-1
In Big Sur, when you take
a video full screen


109
00:04:25,899 --> 00:04:27,467 line:-1
in a Mac Catalyst app,


110
00:04:27,467 --> 00:04:29,369 line:-1
the video would fill
the entire window


111
00:04:29,369 --> 00:04:31,605 line:-1
but not the entire screen.


112
00:04:31,605 --> 00:04:33,406 line:-1
Now in macOS Monterey,


113
00:04:33.406 --> 00:04:36.576 line:-1 position:50%
the video will take up
the entire screen.


114
00:04:36.576 --> 00:04:38.678 line:-1 position:50%
You end up with
a true full-screen experience


115
00:04:38,678 --> 00:04:42,249 line:-1
for both native macOS
and Mac Catalyst apps.


116
00:04:42,249 --> 00:04:44,885 line:-1
The playback controls
look the same for both.


117
00:04:44.885 --> 00:04:48.688 line:-1 position:50%
All Mac Catalyst apps will get
this new behavior automatically.


118
00:04:48.688 --> 00:04:51.625 line:-1 position:50%
Just like in any native
macOS full-screen experience,


119
00:04:51,625 --> 00:04:54,327 line:-1
the user can swipe
back to the app window.


120
00:04:54.327 --> 00:04:57.097 line:-1 position:50%
A placeholder will be shown
instead of the original video,


121
00:04:57.097 --> 00:05:00.066 line:-1 position:50%
indicating that the content
is playing full screen.


122
00:05:00,066 --> 00:05:02,569 line:-1
This is very similar
to the placeholder shown


123
00:05:02,569 --> 00:05:06,006 line:-1
when the video is playing
in Picture in Picture.


124
00:05:06.006 --> 00:05:08.475 line:-1 position:50%
In a scenario where you present
a player view controller


125
00:05:08.475 --> 00:05:11.678 line:-1 position:50%
full screen after a user
selects some content,


126
00:05:11.678 --> 00:05:15.382 line:-1 position:50%
the view controller will still
present in full window.


127
00:05:15,382 --> 00:05:18,051 line:-1
However,
new in macOS Monterey,


128
00:05:18.051 --> 00:05:21.388 line:-1 position:50%
users can detach to a true
full-screen playback experience


129
00:05:21,388 --> 00:05:23,223 line:-1
by pressing
the green full screen button


130
00:05:23.223 --> 00:05:25.525 line:-1 position:50%
in the top left of the window.


131
00:05:25.525 --> 00:05:28.261 line:-1 position:50%
The full screen life cycle
can be explicitly managed


132
00:05:28.261 --> 00:05:30.397 line:-1 position:50%
to provide
a better user experience


133
00:05:30.397 --> 00:05:32.966 line:-1 position:50%
based on your application's
needs.


134
00:05:32.966 --> 00:05:35.435 line:-1 position:50%
Let's take a look
at an example.


135
00:05:35.435 --> 00:05:37.404 line:-1 position:50%
As we've already shown,
a user should be able


136
00:05:37.404 --> 00:05:40.907 line:-1 position:50%
to take a video full screen
and then swipe back to your app


137
00:05:40.907 --> 00:05:43.310 line:-1 position:50%
while playback continues.


138
00:05:43.310 --> 00:05:45.679 line:-1 position:50%
They should be able
to navigate your app freely,


139
00:05:45.679 --> 00:05:47.781 line:-1 position:50%
even if that results in
the player view controller


140
00:05:47.781 --> 00:05:50.617 line:-1 position:50%
being removed
from your view hierarchy.


141
00:05:50.617 --> 00:05:53.386 line:-1 position:50%
At any point in time, they
should be able to either swipe


142
00:05:53,386 --> 00:05:55,388 line:-1
or use Mission Control
to navigate back


143
00:05:55.388 --> 00:05:57.490 line:-1 position:50%
to the full-screen video.


144
00:05:57.490 --> 00:05:59.960 line:-1 position:50%
So let's take a look
at how to make that work.


145
00:05:59,960 --> 00:06:00,994 line:-1
You are responsible for


146
00:06:00,994 --> 00:06:03,530 line:-1
the playerViewController's
life cycle.


147
00:06:03,530 --> 00:06:05,865 line:-1
In order to achieve
an optimal experience,


148
00:06:05,865 --> 00:06:09,135 line:-1
you need to make sure to keep
the playerViewController alive


149
00:06:09.135 --> 00:06:12.072 line:-1 position:50%
even if it's not in your app's
view hierarchy.


150
00:06:12,072 --> 00:06:14,674 line:-1
Otherwise, when the user
navigates away from the page


151
00:06:14.674 --> 00:06:17.043 line:-1 position:50%
with the video,
full-screen playback will end


152
00:06:17.043 --> 00:06:20.046 line:-1 position:50%
as the playerViewController
is released.


153
00:06:20,046 --> 00:06:22,249 line:-1
All you need to do
is keep a strong reference


154
00:06:22,249 --> 00:06:24,451 line:-1
to the playerViewController
when you receive the


155
00:06:24.451 --> 00:06:27.420 line:-1 position:50%
willBeginFullScreenPresentation
callback.


156
00:06:27.420 --> 00:06:31.124 line:-1 position:50%
Then, once the user exits
full screen, you'll receive the


157
00:06:31.124 --> 00:06:34.094 line:-1 position:50%
willEndFullScreenPresentation
callback.


158
00:06:34.094 --> 00:06:36.096 line:-1 position:50%
This is your opportunity
to let go of


159
00:06:36,096 --> 00:06:38,665 line:-1
the playerViewController
you were keeping alive,


160
00:06:38,665 --> 00:06:40,767 line:-1
assuming the user
has navigated away


161
00:06:40.767 --> 00:06:43.703 line:-1 position:50%
from the original view
it was presented from.


162
00:06:43.703 --> 00:06:46.573 line:-1 position:50%
The same applies
for native macOS.


163
00:06:46,573 --> 00:06:48,375 line:-1
You can use
the new playerViewDelegate


164
00:06:48.375 --> 00:06:50.744 line:-1 position:50%
to keep the playerView alive
until you receive


165
00:06:50.744 --> 00:06:54.347 line:-1 position:50%
the playerViewWillExitFullScreen
callback.


166
00:06:54.347 --> 00:06:57.317 line:-1 position:50%
When a user exits full screen,
you will also receive


167
00:06:57,317 --> 00:07:00,120 line:-1
this restoreUserInterface
callback.


168
00:07:00,120 --> 00:07:01,855 line:-1
This is an opportunity
for your app


169
00:07:01.855 --> 00:07:05.292 line:-1 position:50%
to navigate back to the original
page containing the video,


170
00:07:05,292 --> 00:07:08,695 line:-1
assuming that's appropriate
for your use case.


171
00:07:08,695 --> 00:07:11,498 line:-1
This is very similar to the
existing callback you receive


172
00:07:11.498 --> 00:07:14.167 line:-1 position:50%
when a user stops
Picture in Picture.


173
00:07:14.167 --> 00:07:16.236 line:-1 position:50%
Make sure to return
from this completionHandler


174
00:07:16,236 --> 00:07:18,271 line:-1
as quickly as possible
so as not to block


175
00:07:18,271 --> 00:07:21,641 line:-1
the transition from
full screen to inline.


176
00:07:21.641 --> 00:07:24.311 line:-1 position:50%
Returning false indicates
that restoration failed


177
00:07:24.311 --> 00:07:26.112 line:-1 position:50%
or isn't possible,
in which case


178
00:07:26.112 --> 00:07:29.549 line:-1 position:50%
the content exits full screen
without an animation.


179
00:07:29.549 --> 00:07:32.652 line:-1 position:50%
With that, I would like
to wrap up today's session.


180
00:07:32.652 --> 00:07:35.188 line:-1 position:50%
We saw how to use
the new content source API


181
00:07:35.188 --> 00:07:37.357 line:-1 position:50%
to add Picture in Picture
support to your app


182
00:07:37.357 --> 00:07:39.459 line:-1 position:50%
when using
AVSampleBufferDisplayLayer


183
00:07:39.459 --> 00:07:41.995 line:-1 position:50%
instead of AVPlayerLayer.


184
00:07:41,995 --> 00:07:43,630 line:-1
For macOS and Mac Catalyst,


185
00:07:43,630 --> 00:07:46,266 line:-1
we went over the enhanced
full screen experience,


186
00:07:46.266 --> 00:07:47.934 line:-1 position:50%
and outlined the necessary steps


187
00:07:47.934 --> 00:07:50.804 line:-1 position:50%
for your code to integrate
seamlessly.


188
00:07:50,804 --> 00:07:52,472 line:-1
I hope you enjoyed
today's session


189
00:07:52,472 --> 00:07:54,507 line:-1
and I look forward to seeing
some of these features


190
00:07:54.507 --> 00:07:56.476 line:-1 position:50%
integrated into your apps.


191
00:07:56,476 --> 00:07:58,278 line:-1
Enjoy the rest
of the conference.


192
00:07:58,278 --> 00:08:01,715 align:right size:2% position:90%
♪

