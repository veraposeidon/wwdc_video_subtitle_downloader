2
00:00:00,334 --> 00:00:03,337 line:-1
[upbeat music]


3
00:00:03,370 --> 00:00:09,009 line:-1
♪ ♪


4
00:00:09.042 --> 00:00:09.877 line:-1 align:center
[Amanda] Hi there.


5
00:00:09,910 --> 00:00:11,545 line:-2
I’m Amanda,
and I’ll be joined in a bit


6
00:00:11,578 --> 00:00:13,413 line:-1
by my colleague, Olivier.


7
00:00:13,447 --> 00:00:15,082 line:-2
In this talk,
we’ll explore the features


8
00:00:15,115 --> 00:00:17,918 line:-2
that we’ve added to RealityKit
in 2021.


9
00:00:18.485 --> 00:00:21.288 line:-2 align:center
RealityKit is an augmented
reality authoring framework


10
00:00:21.321 --> 00:00:24.658 line:-2 align:center
introduced in 2019
focused on realistic rendering


11
00:00:24,691 --> 00:00:27,261 line:-2
and making it easy
to create AR apps.


12
00:00:27,294 --> 00:00:30,631 line:-2
Leveraging ARKit to read
the device’s sensor data,


13
00:00:30,664 --> 00:00:32,966 line:-2
RealityKit allows you
to place 3D content


14
00:00:33,000 --> 00:00:35,669 line:-2
in the real-world environment
and make that content look


15
00:00:35.702 --> 00:00:37.504 line:-1 align:center
as realistic as possible.


16
00:00:38.105 --> 00:00:40.274 line:-2 align:center
Here are some great
examples of RealityKit


17
00:00:40,307 --> 00:00:42,209 line:-1
experiences in action.


18
00:00:42.242 --> 00:00:44.645 line:-2 align:center
Go on a scavenger hunt
in the real world,


19
00:00:44,678 --> 00:00:47,915 line:-2
bowl virtually against
your friends, even become


20
00:00:47,948 --> 00:00:51,985 line:-2
a sculpture in a museum,
and find some colorful bugs.


21
00:00:52.019 --> 00:00:54.955 line:-2 align:center
Over the past couple of years,
we’ve seen some amazing apps


22
00:00:54.988 --> 00:00:56.456 line:-1 align:center
created with RealityKit


23
00:00:56,490 --> 00:00:57,891 line:-2
and received
really good feedback


24
00:00:57.925 --> 00:00:59.927 line:-2 align:center
to make this framework
even better.


25
00:01:01.395 --> 00:01:03.130 line:-2 align:center
And we’ve listened
to your feedback.


26
00:01:03,163 --> 00:01:05,599 line:-2
We are happy to share
that RealityKit 2 introduces


27
00:01:05.632 --> 00:01:07.434 line:-2 align:center
a bunch of new features
to help you make


28
00:01:07.467 --> 00:01:09.937 line:-2 align:center
even more immersive
AR apps and games.


29
00:01:10.938 --> 00:01:13.407 line:-2 align:center
In this session, we’ll be
highlighting some of them,


30
00:01:13.440 --> 00:01:15.742 line:-2 align:center
including our
most-requested features,


31
00:01:15.776 --> 00:01:17.878 line:-2 align:center
like custom shaders
and materials,


32
00:01:17,911 --> 00:01:18,979 line:-1
custom systems,


33
00:01:19.012 --> 00:01:21.682 line:-2 align:center
and our new character
controller concept.


34
00:01:21.715 --> 00:01:25.052 line:-2 align:center
So put on your snorkel mask
and let’s dive in.


35
00:01:25.919 --> 00:01:27.721 line:-2 align:center
When I was growing up
in the Middle East,


36
00:01:27.754 --> 00:01:30.157 line:-2 align:center
I learned to scuba dive
in the Gulf.


37
00:01:30,190 --> 00:01:31,325 line:-1
Although I didn’t get to wear


38
00:01:31.358 --> 00:01:34.027 line:-2 align:center
one of these super cute
steampunk helmets,


39
00:01:34,061 --> 00:01:36,663 line:-2
I loved seeing
all the colorful fish schooling.


40
00:01:36.697 --> 00:01:38.365 line:-2 align:center
I thought it might
be fun to re-create


41
00:01:38.398 --> 00:01:41.635 line:-2 align:center
that underwater vibe
right here in my living room.


42
00:01:41,668 --> 00:01:44,238 line:-2
Olivier and I wrote this demo
using a bunch of the features


43
00:01:44,271 --> 00:01:46,373 line:-2
that we’ll be showing you
in this session


44
00:01:46,406 --> 00:01:49,610 line:-2
and in our second RealityKit
session later this week.


45
00:01:49.643 --> 00:01:52.913 line:-2 align:center
We’ve got post processing
to create the depth fog effect


46
00:01:52.946 --> 00:01:55.849 line:-2 align:center
and the water caustics,
a custom geometry modifier


47
00:01:55.883 --> 00:01:59.486 line:-2 align:center
to make the seaweed dance
in the waves, and a bunch more.


48
00:01:59,520 --> 00:02:02,022 line:-2
Basically,
RealityKit 2 lets you customize


49
00:02:02,055 --> 00:02:03,991 line:-1
so many things now.


50
00:02:04,024 --> 00:02:06,426 line:-2
This sample code is
available for you to try out


51
00:02:06,460 --> 00:02:08,395 line:-1
at developer.apple.com.


52
00:02:09.496 --> 00:02:12.332 line:-2 align:center
There are five main topics
we’ll cover today.


53
00:02:12.366 --> 00:02:15.702 line:-2 align:center
We’ll do a recap of what an ECS
is and how we used


54
00:02:15,736 --> 00:02:17,838 line:-2
our new custom systems
feature to implement


55
00:02:17.871 --> 00:02:20.908 line:-2 align:center
the fishes’ flocking
behavior in our app.


56
00:02:20.941 --> 00:02:22.776 line:-2 align:center
We’ll show you advancements
in what you can do


57
00:02:22,809 --> 00:02:25,979 line:-2
with materials
as well as animations,


58
00:02:26.013 --> 00:02:28.715 line:-2 align:center
the new character controller,
which is how we got the diver


59
00:02:28.749 --> 00:02:30.083 line:-1 align:center
to interact so seamlessly


60
00:02:30,117 --> 00:02:32,486 line:-2
with the AR mesh
of the living room,


61
00:02:32.519 --> 00:02:35.222 line:-2 align:center
and how you can now generate
resources at runtime.


62
00:02:36,323 --> 00:02:38,525 line:-1
So let’s start with the ECS.


63
00:02:38.559 --> 00:02:41.562 line:-2 align:center
ECS, short for entity
component system,


64
00:02:41,595 --> 00:02:44,364 line:-2
is a way of structuring
data and behavior,


65
00:02:44,398 --> 00:02:47,668 line:-2
and it’s commonly used
in games and simulations.


66
00:02:47.701 --> 00:02:49.970 line:-2 align:center
It’s different from
object-oriented programming


67
00:02:50,003 --> 00:02:52,072 line:-2
in which you tend to model
an item


68
00:02:52,105 --> 00:02:53,807 line:-2
as an encapsulated bundle
of both


69
00:02:53.841 --> 00:02:57.678 line:-2 align:center
its functionality and the state
associated with that item.


70
00:02:57.711 --> 00:03:00.214 line:-2 align:center
But with ECS,
you have three prongs:


71
00:03:00,247 --> 00:03:03,684 line:-2
entity, component, and system,
where the functionality goes


72
00:03:03,717 --> 00:03:06,887 line:-2
in the system, the state
goes in the components,


73
00:03:06.920 --> 00:03:11.225 line:-2 align:center
and the entity is an identifier
for a group of components.


74
00:03:11.258 --> 00:03:13.994 line:-2 align:center
This year,
with RealityKit 2, we’re moving


75
00:03:14,027 --> 00:03:16,897 line:-2
towards a more pure
ECS implementation,


76
00:03:16,930 --> 00:03:18,665 line:-2
guiding you to keep more
of your functionality


77
00:03:18.699 --> 00:03:21.602 line:-2 align:center
in the system layer
with our new custom systems.


78
00:03:22,803 --> 00:03:24,638 line:-1
What does entity mean to us?


79
00:03:24,671 --> 00:03:28,108 line:-2
An entity represents
one thing in your scene.


80
00:03:28.141 --> 00:03:31.645 line:-2 align:center
Here are entities that represent
the sea creatures in our scene.


81
00:03:31,678 --> 00:03:33,647 line:-2
An entity can have
child entities,


82
00:03:33.680 --> 00:03:35.616 line:-2 align:center
giving you a graph structure
to work with.


83
00:03:35,649 --> 00:03:38,218 line:-2
For example,
the transform component uses


84
00:03:38.252 --> 00:03:42.656 line:-2 align:center
the parent entity’s transform
to add its own position onto.


85
00:03:42.689 --> 00:03:46.093 line:-2 align:center
An entity itself doesn’t
render anything on screen.


86
00:03:46.126 --> 00:03:48.395 line:-2 align:center
For that, you need to give it
a model component


87
00:03:48.428 --> 00:03:50.764 line:-2 align:center
or create a model entity,
which’ll do that for you.


88
00:03:51,932 --> 00:03:54,401 line:-2
To add attributes,
properties, and behaviors,


89
00:03:54,434 --> 00:03:56,703 line:-2
you add components
to your entity.


90
00:03:56.737 --> 00:03:59.573 line:-2 align:center
Speaking of which,
let’s talk about components.


91
00:04:00.774 --> 00:04:03.610 line:-2 align:center
Components are for storing
state between frames


92
00:04:03,644 --> 00:04:06,914 line:-2
and for marking an entity’s
participation in a system.


93
00:04:06.947 --> 00:04:09.149 line:-2 align:center
You don’t need to include
any logic for dealing


94
00:04:09,183 --> 00:04:10,651 line:-1
with that state here, though.


95
00:04:10,684 --> 00:04:13,253 line:-2
Your logic and behavior go
in your custom system.


96
00:04:14,421 --> 00:04:16,623 line:-2
There are some components
that will be already present


97
00:04:16.657 --> 00:04:18.926 line:-1 align:center
on any entity you create.


98
00:04:18,959 --> 00:04:21,795 line:-2
Not shown here are the built-in
components: the transform


99
00:04:21.828 --> 00:04:24.064 line:-1 align:center
and synchronization components.


100
00:04:24,097 --> 00:04:26,667 line:-2
They’re on all three
of these entities.


101
00:04:26.700 --> 00:04:28.769 line:-2 align:center
There are others that you’ll
often want to add,


102
00:04:28,802 --> 00:04:31,004 line:-2
like the model component,
which contains the mesh


103
00:04:31.038 --> 00:04:33.574 line:-2 align:center
and materials that make
your entity show up on screen.


104
00:04:34,408 --> 00:04:35,909 line:-2
You can add
and remove components


105
00:04:35.943 --> 00:04:37.845 line:-2 align:center
from your entities
at runtime too,


106
00:04:37.878 --> 00:04:40.147 line:-2 align:center
if you want to dynamically
change their behavior.


107
00:04:41,248 --> 00:04:43,350 line:0
We’ll mark this first
fish as participating


108
00:04:43,383 --> 00:04:45,385 line:0
in the Flocking System,
and we’ll tell it


109
00:04:45,419 --> 00:04:47,621 align:center
that it likes to eat algae.


110
00:04:47,654 --> 00:04:48,755 align:center
This second fish,


111
00:04:48,789 --> 00:04:51,091 align:center
it’s also going to flock
with the first fish,


112
00:04:51,124 --> 00:04:53,493 line:0
but it prefers
to eat plankton right now.


113
00:04:53,527 --> 00:04:55,362 line:0
This third guy is a plankton.


114
00:04:55,395 --> 00:04:57,164 align:center
It will be food
for the second fish.


115
00:04:57,197 --> 00:04:58,932 line:0
It should watch its back,


116
00:04:58,966 --> 00:05:00,200 line:0
because in our app,


117
00:05:00,234 --> 00:05:01,635 line:0
we’ve got some hungry creatures.


118
00:05:02,336 --> 00:05:05,272 align:center
We know which ones are hungry
because they have the AlgaeEater


119
00:05:05,305 --> 00:05:07,875 align:center
or the PlanktonEater
components on them.


120
00:05:07,908 --> 00:05:11,845 line:0
Every frame, our Eating System
has its update function called.


121
00:05:11,879 --> 00:05:13,914 align:center
In here,
it finds all the entities


122
00:05:13,947 --> 00:05:16,617 line:0
in the scene that have
either of these components,


123
00:05:16,650 --> 00:05:18,952 line:0
plus all the entities
that are food, so it can


124
00:05:18,986 --> 00:05:22,222 align:center
guide the hungry fish toward
the food they prefer to eat.


125
00:05:22.256 --> 00:05:24.391 line:-2 align:center
But what’s a performant way
for the Eating System


126
00:05:24.424 --> 00:05:27.461 line:-2 align:center
to figure out
which entities are hungry,


127
00:05:27.494 --> 00:05:30.397 line:-2 align:center
which ones are the food,
and which ones are neither?


128
00:05:30,430 --> 00:05:33,033 align:center
We don’t want to have
to traverse our entity graph


129
00:05:33,066 --> 00:05:35,102 line:0
and check each one’s components.


130
00:05:35,135 --> 00:05:38,338 align:center
Instead,
we perform an entity query.


131
00:05:38,372 --> 00:05:41,542 line:0
Let RealityKit do
the bookkeeping for you.


132
00:05:41,575 --> 00:05:43,143 align:center
The Flocking System wants
to find


133
00:05:43,177 --> 00:05:46,780 line:0
all entities that have
a FlockingComponent on them.


134
00:05:46,813 --> 00:05:50,551 line:0
While the Eating System wants
both kinds of hungry entities,


135
00:05:50,584 --> 00:05:53,220 align:center
plus the entity that’s a type
of food.


136
00:05:53.253 --> 00:05:55.155 line:-2 align:center
So let’s take a closer look
at what exactly


137
00:05:55,189 --> 00:05:58,659 line:-2
is happening when a system
uses an entity query.


138
00:05:58,692 --> 00:06:02,129 line:-2
Systems have their update
functions called every frame.


139
00:06:03.063 --> 00:06:04.364 line:-2 align:center
Let’s look
at the Flocking System


140
00:06:04.398 --> 00:06:05.899 line:-1 align:center
for our Yellow Tang fish.


141
00:06:05.933 --> 00:06:09.870 line:-2 align:center
We’ll pause at this frame
to see what’s going on.


142
00:06:09.903 --> 00:06:12.039 line:-2 align:center
In the Flocking System’s
update function,


143
00:06:12,072 --> 00:06:14,508 line:-2
we query for all entities
in the scene that have both


144
00:06:14,541 --> 00:06:18,679 line:-2
the FlockingComponent
and the MotionComponent on them.


145
00:06:18,712 --> 00:06:20,948 line:-2
Lots of things have
the MotionComponent,


146
00:06:20,981 --> 00:06:24,017 line:-2
but we don’t want all of them,
we just want our flock.


147
00:06:24,051 --> 00:06:26,553 line:-2
Our query returns
our flocking fish,


148
00:06:26.587 --> 00:06:29.189 line:-2 align:center
so now we can drive our custom
game physics by applying


149
00:06:29.223 --> 00:06:32.292 line:-2 align:center
the classic Boids simulation
to each fish in the flock.


150
00:06:32,726 --> 00:06:36,096 line:-2
We add forces on each fish’s
MotionComponent, where we keep


151
00:06:36.129 --> 00:06:39.366 line:-2 align:center
our state between frames,
forces for sticking together,


152
00:06:39,399 --> 00:06:42,536 line:-2
for preferring to stay a certain
distance apart, and for trying


153
00:06:42,569 --> 00:06:44,905 line:-2
to point their noses
in the same direction.


154
00:06:46,073 --> 00:06:48,675 line:-2
When the Motion System runs,
in the same frame


155
00:06:48,709 --> 00:06:50,744 line:-2
but after
the Flocking System runs,


156
00:06:50.777 --> 00:06:52.880 line:-2 align:center
it rolls up
all these forces to decide


157
00:06:52.913 --> 00:06:56.984 line:-2 align:center
the fish’s new acceleration,
velocity, and position.


158
00:06:57.017 --> 00:06:59.453 line:-2 align:center
It doesn’t care which other
system added them.


159
00:06:59.486 --> 00:07:01.221 line:-2 align:center
There are others,
like the Eating System


160
00:07:01,255 --> 00:07:05,092 line:-2
and the Fear System that also
operate on the MotionComponent


161
00:07:05,125 --> 00:07:07,094 line:-2
to push the fish
in various directions.


162
00:07:07,995 --> 00:07:09,429 line:-1
So let’s see the code.


163
00:07:10,931 --> 00:07:13,500 line:-2
Here’s an outline
of our Flocking System.


164
00:07:13,534 --> 00:07:15,068 line:-1
It’s a class that conforms


165
00:07:15,102 --> 00:07:18,071 line:-2
to the RealityKit.System
protocol.


166
00:07:18.105 --> 00:07:21.041 line:-2 align:center
When you register your custom
system at app launch time,


167
00:07:21.074 --> 00:07:23.377 line:-2 align:center
you’re telling the engine
that you want it to instantiate


168
00:07:23,410 --> 00:07:26,613 line:-2
one of this type
per scene in your app.


169
00:07:26.647 --> 00:07:28.549 line:-2 align:center
The init is required,
and you can


170
00:07:28.582 --> 00:07:30.484 line:-1 align:center
also provide a deinit.


171
00:07:30.517 --> 00:07:32.619 line:-1 align:center
We can specify dependencies.


172
00:07:32,653 --> 00:07:34,121 line:-1
This system should always run


173
00:07:34,154 --> 00:07:36,790 line:-2
before the MotionSystem,
which is why we’ve used


174
00:07:36.823 --> 00:07:39.760 line:-2 align:center
the enumeration
value.before here.


175
00:07:39.793 --> 00:07:42.229 line:-2 align:center
In our update function,
we’ll be altering the state


176
00:07:42,262 --> 00:07:45,465 line:-2
stored in the MotionComponent,
and the MotionSystem will be


177
00:07:45.499 --> 00:07:47.034 line:-2 align:center
acting upon the state
we provide, so we need to make


178
00:07:47,901 --> 00:07:51,772 line:-2
sure the FlockingSystem runs
before the MotionSystem,


179
00:07:51,805 --> 00:07:54,808 line:-2
sort of like a producer-consumer
relationship.


180
00:07:54,842 --> 00:07:57,878 line:-2
You can also use
the .after option.


181
00:07:57.911 --> 00:07:59.847 line:-2 align:center
If you don’t
specify dependencies,


182
00:07:59.880 --> 00:08:01.448 line:-2 align:center
your systems’ update
functions will be


183
00:08:01,481 --> 00:08:04,117 line:-2
executed in the order
you registered them in.


184
00:08:05,719 --> 00:08:08,355 line:-2
Our EntityQuery says
that we want all entities


185
00:08:08.388 --> 00:08:10.924 line:-2 align:center
that have the Flocking
and Motion Components.


186
00:08:10.958 --> 00:08:12.826 line:-2 align:center
It’s a static let
because it’s not going


187
00:08:12.860 --> 00:08:15.362 line:-2 align:center
to change for the duration
of our simulation.


188
00:08:15,963 --> 00:08:19,233 line:-2
In a multiplayer AR experience,
components that conform


189
00:08:19,266 --> 00:08:22,569 line:-2
to codable are automatically
synced over the network.


190
00:08:22.603 --> 00:08:26.039 line:-2 align:center
However, data in systems
are not automatically


191
00:08:26.073 --> 00:08:27.674 line:-1 align:center
synced over the network.


192
00:08:27,708 --> 00:08:30,577 line:-2
Data should be generally
stored in components.


193
00:08:30,611 --> 00:08:32,479 line:-2
Now let’s dive in
to our FlockingSystem’s


194
00:08:32.513 --> 00:08:33.881 line:-1 align:center
update function.


195
00:08:34,348 --> 00:08:38,018 line:-2
It takes a SceneUpdateContext,
which has in it the deltaTime


196
00:08:38.051 --> 00:08:42.222 line:-2 align:center
for that frame and a reference
to the scene itself.


197
00:08:42,256 --> 00:08:44,157 line:-2
First, we perform
our EntityQuery


198
00:08:44.191 --> 00:08:47.127 line:-2 align:center
on the scene,
which returns a query result


199
00:08:47,160 --> 00:08:49,096 line:-2
that we can iterate
over for the entities


200
00:08:49.129 --> 00:08:51.365 line:-2 align:center
that have the FlockingComponent
on them.


201
00:08:52,533 --> 00:08:54,735 line:-2
We get each one’s
MotionComponent,


202
00:08:54.768 --> 00:08:56.970 line:-2 align:center
which we’re going to be
modifying.


203
00:08:57,004 --> 00:08:59,873 line:-2
Why are we not getting
the FlockingComponent itself?


204
00:08:59,907 --> 00:09:02,843 line:-2
Because it doesn’t have
any data associated with it.


205
00:09:02,876 --> 00:09:05,212 line:-2
We use that one like a tag
to signify


206
00:09:05,245 --> 00:09:07,047 line:-1
membership in the flock.


207
00:09:07,080 --> 00:09:10,384 line:-2
Then we run our standard
Boids simulation on them


208
00:09:10,417 --> 00:09:12,553 line:-2
to guide the flock,
modifying the collection


209
00:09:12.586 --> 00:09:15.088 line:-2 align:center
of forces
in the MotionComponent.


210
00:09:15,122 --> 00:09:18,825 line:-2
At the end, since we’ve added
forces to each fish to push it


211
00:09:18.859 --> 00:09:22.329 line:-2 align:center
in the desired direction,
and because components are Swift


212
00:09:22.362 --> 00:09:25.132 line:-2 align:center
structs which are value types,
we need to store


213
00:09:25,165 --> 00:09:28,168 line:-2
our MotionComponent back
onto the entity it came from.


214
00:09:28,669 --> 00:09:31,872 line:-2
Systems don’t have to implement
a custom update function.


215
00:09:31.905 --> 00:09:34.842 line:-2 align:center
It can also be useful to create
a system which only provides


216
00:09:34,875 --> 00:09:38,779 line:-2
an init, like to register
event handlers for scene events.


217
00:09:39.246 --> 00:09:42.216 line:-2 align:center
So far, we’ve been looking
at the relationships between


218
00:09:42.249 --> 00:09:44.785 line:-2 align:center
entities, components,
and custom systems.


219
00:09:45.419 --> 00:09:48.589 line:-2 align:center
Now let’s zoom out for a second
and talk about some high-level


220
00:09:48,622 --> 00:09:52,693 line:-2
architecture changes that we’ve
brought in RealityKit 2.


221
00:09:52,726 --> 00:09:56,663 line:-2
Before, you would subscribe
to the SceneEvents.update event


222
00:09:56,697 --> 00:09:59,766 line:-2
using a closure that would
be called every frame.


223
00:09:59,800 --> 00:10:02,169 line:-2
These kind of event handlers
would often live,


224
00:10:02.202 --> 00:10:05.873 line:-2 align:center
or at least be registered in,
your Game Manager-like classes.


225
00:10:05.906 --> 00:10:08.008 line:-1 align:center
Instead of closures like that,


226
00:10:08,041 --> 00:10:09,743 line:-2
you can now have
your update logic


227
00:10:09,776 --> 00:10:12,346 line:-2
cleanly separated
and formally ordered


228
00:10:12.379 --> 00:10:14.715 line:-2 align:center
in separate system
update functions.


229
00:10:15,849 --> 00:10:19,186 align:center
So that means your Game Managers
can play less of a role.


230
00:10:19,219 --> 00:10:21,088 line:0
Instead of doing
all your registrations


231
00:10:21,121 --> 00:10:24,091 line:0
for event updates there
and then managing the order


232
00:10:24,124 --> 00:10:27,494 line:0
in which you call update
on all the things in your game,


233
00:10:27,528 --> 00:10:29,429 align:center
now the Game Managers
only have to add


234
00:10:29,463 --> 00:10:32,633 line:0
components to the entities
to signify to your systems


235
00:10:32,666 --> 00:10:35,335 align:center
that those entities should be
included in their queries.


236
00:10:36,770 --> 00:10:39,940 line:0
Previously, you would declare
protocol conformances


237
00:10:39,973 --> 00:10:41,875 align:center
on your entity subclasses
to express


238
00:10:41,909 --> 00:10:45,078 align:center
that that entity type
has certain components.


239
00:10:45,112 --> 00:10:47,915 line:0
Now you don’t need
to subclass entity anymore,


240
00:10:47,948 --> 00:10:49,917 line:0
since it, too, can play
less of a role.


241
00:10:51,685 --> 00:10:54,354 line:0
It can be merely
an identifier for an object,


242
00:10:54,388 --> 00:10:57,524 align:center
and its attributes can be
modeled as components.


243
00:10:57,558 --> 00:10:59,960 align:center
Because when you don’t
subclass entity, you don’t


244
00:10:59,993 --> 00:11:03,063 line:0
tie your object to forever
keeping those components.


245
00:11:03,096 --> 00:11:05,032 align:center
You’re free to add
and remove components


246
00:11:05,065 --> 00:11:06,733 align:center
during the experience.


247
00:11:06,767 --> 00:11:09,870 align:center
So with RealityKit 2,
your custom components


248
00:11:09,903 --> 00:11:12,940 line:0
are a lot more useful
because you have custom systems.


249
00:11:13,574 --> 00:11:15,509 line:-2
But you can still
do it either way.


250
00:11:15,542 --> 00:11:17,411 line:-2
That’s the beauty
of game development.


251
00:11:17.444 --> 00:11:19.479 line:-1 align:center
The world is your oyster.


252
00:11:19.513 --> 00:11:22.149 line:-2 align:center
In our underwater demo,
we’re using both methods.


253
00:11:23,150 --> 00:11:25,452 line:-2
We’ve also added a new
type of component:


254
00:11:25,485 --> 00:11:27,521 line:-1
TransientComponent.


255
00:11:27.554 --> 00:11:29.957 line:-2 align:center
Say, for example,
your fish were afraid


256
00:11:29,990 --> 00:11:33,260 line:-2
of the octopus, but only if
they had ever looked at it.


257
00:11:33,293 --> 00:11:36,230 line:-2
When you clone up a new fish
entity, you might not want


258
00:11:36,263 --> 00:11:39,733 line:-2
the clone to inherit that fish’s
fear of the octopus.


259
00:11:39,766 --> 00:11:41,268 line:-2
You could make
your FearComponent


260
00:11:41.301 --> 00:11:43.203 line:-1 align:center
conform to TransientComponent.


261
00:11:43.237 --> 00:11:45.806 line:-2 align:center
That way, it wouldn’t be
present on the new entity.


262
00:11:47,107 --> 00:11:49,843 line:-2
The TransientComponent is still
included in a network sync,


263
00:11:49,877 --> 00:11:52,246 line:-2
though,
if it conforms to codable,


264
00:11:52.279 --> 00:11:54.681 line:-2 align:center
like any other kind
of component that does so.


265
00:11:56.149 --> 00:11:59.820 line:-2 align:center
Another addition is our new
extension on cancellable.


266
00:11:59.853 --> 00:12:01.321 line:-2 align:center
You don’t need
to manually manage


267
00:12:01.355 --> 00:12:04.324 line:-2 align:center
unsubscribing to events
for an entity anymore.


268
00:12:04.358 --> 00:12:07.361 line:-2 align:center
We’ll do it for you when you use
storeWhileEntityActive.


269
00:12:08.695 --> 00:12:12.432 line:-2 align:center
Here, we’re handling collision
events for a fish entity.


270
00:12:12,466 --> 00:12:15,602 line:-2
We don’t need this subscription
to outlive the fish itself,


271
00:12:15.636 --> 00:12:17.905 line:-2 align:center
so we use
storeWhileEntityActive.


272
00:12:18,839 --> 00:12:20,908 line:-1
As always, when building a game,


273
00:12:20.941 --> 00:12:22.776 line:-2 align:center
there’s a whole bunch
of settings that you want


274
00:12:22,809 --> 00:12:25,112 line:-2
to tweak on the fly
without having to recompile.


275
00:12:25,712 --> 00:12:28,682 line:-2
In our game, we built
a Settings view in SwiftUI,


276
00:12:28,715 --> 00:12:31,451 line:-2
and we pass its backing model
down into our various


277
00:12:31.485 --> 00:12:35.155 line:-2 align:center
CustomSystems by way of wrapping
them in CustomComponents.


278
00:12:36,557 --> 00:12:39,426 line:-2
We create our Settings instance
as a @StateObject


279
00:12:39.459 --> 00:12:42.129 line:-2 align:center
and pass it into both
our ARViewContainer


280
00:12:42,162 --> 00:12:45,332 line:-2
and our SwiftUI view
as an environmentObject.


281
00:12:47,134 --> 00:12:48,569 line:-1
We wrap the Settings object


282
00:12:48,602 --> 00:12:51,905 line:-2
in a CustomComponent,
a SettingsComponent.


283
00:12:51,939 --> 00:12:54,441 line:-2
Then when we create
our fish entity,


284
00:12:54.474 --> 00:12:56.276 line:-1 align:center
we give it a SettingsComponent.


285
00:12:56.310 --> 00:12:59.813 line:-2 align:center
That way, when any CustomSystem
comes along that wants


286
00:12:59,847 --> 00:13:02,583 line:-2
those settings, it can read them
from there, like take


287
00:13:02.616 --> 00:13:06.920 line:-2 align:center
the “top speed” value and use it
to cap each fish’s velocity.


288
00:13:06,954 --> 00:13:09,089 line:-2
And now I’ll hand it over
to my colleague,


289
00:13:09.122 --> 00:13:11.625 line:-2 align:center
Olivier,
to tell you about materials.


290
00:13:12,826 --> 00:13:14,261 line:-1
[Olivier] Thanks, Amanda.


291
00:13:14.294 --> 00:13:17.364 line:-2 align:center
This year,
we added new APIs for materials.


292
00:13:17.397 --> 00:13:20.767 line:-2 align:center
We already had a few types,
such as SimpleMaterial,


293
00:13:20.801 --> 00:13:24.505 line:-2 align:center
with a baseColor, roughness,
and metallic property.


294
00:13:24,538 --> 00:13:26,907 line:-1
We also had UnlitMaterial,


295
00:13:26,940 --> 00:13:29,443 line:-2
with just a color
and no lighting.


296
00:13:29,476 --> 00:13:31,512 line:-1
We had OcclusionMaterials,


297
00:13:31,545 --> 00:13:35,215 line:-2
which can be used as a mask
to hide virtual objects.


298
00:13:35.249 --> 00:13:38.051 line:-2 align:center
And last year,
we introduced VideoMaterials,


299
00:13:38,085 --> 00:13:42,022 line:-2
which are UnlitMaterials
using a video as their color.


300
00:13:42,055 --> 00:13:45,259 line:-2
Note that this year we added
support for transparency.


301
00:13:45,292 --> 00:13:47,561 line:-2
If the video file
contains transparency,


302
00:13:47,594 --> 00:13:51,031 line:-2
it will be used
to render the object.


303
00:13:51.064 --> 00:13:53.166 line:-2 align:center
This year, we added new APIs
that give you a more


304
00:13:53,200 --> 00:13:57,171 line:-2
advanced control over materials,
starting with the type


305
00:13:57,204 --> 00:14:00,307 line:-2
PhysicallyBasedMaterial,
which is very similar


306
00:14:00,340 --> 00:14:03,177 line:-2
to the schema
for materials in USD.


307
00:14:03,210 --> 00:14:06,013 line:-2
It is a superset
of SimpleMaterial and has


308
00:14:06,046 --> 00:14:08,115 line:-2
most of the standard PBR
properties that you can


309
00:14:08,148 --> 00:14:09,716 line:-1
find in other renderers.


310
00:14:10.350 --> 00:14:11.718 line:-2 align:center
This is the material
that you will find


311
00:14:11.752 --> 00:14:14.555 line:-2 align:center
on entities that have
been loaded from a USD.


312
00:14:14,588 --> 00:14:16,490 line:-2
You can,
for example, load the USD


313
00:14:16.523 --> 00:14:20.427 line:-2 align:center
of the clown fish and then
modify individual properties


314
00:14:20.460 --> 00:14:22.763 line:-2 align:center
on its materials
to make it gold or purple.


315
00:14:24.331 --> 00:14:26.767 line:-2 align:center
Among the properties
of the material, you can,


316
00:14:26,800 --> 00:14:28,635 line:-2
for example,
change the normal map


317
00:14:28.669 --> 00:14:31.872 line:-2 align:center
to add small details
that are not part of the mesh.


318
00:14:31.905 --> 00:14:33.640 line:-2 align:center
You can also assign
a texture defining


319
00:14:33.674 --> 00:14:35.776 line:-1 align:center
the transparency of the model.


320
00:14:35,809 --> 00:14:37,611 line:-2
By default,
the transparency is using


321
00:14:37,644 --> 00:14:40,647 align:center
alpha blending,
but if you also assign


322
00:14:40,681 --> 00:14:43,217 line:0
an opacityThreshold,
all the fragments


323
00:14:43,250 --> 00:14:45,085 line:0
below that threshold
will be discarded.


324
00:14:46.653 --> 00:14:49.022 line:-2 align:center
You can set the texture
for ambient occlusion,


325
00:14:49,056 --> 00:14:52,125 line:-2
defining vague shadows
in the model.


326
00:14:52,159 --> 00:14:55,529 line:-2
And an example of a more
advanced property is clearcoat,


327
00:14:55,562 --> 00:14:57,397 line:-2
which will simulate
an additional layer


328
00:14:57,431 --> 00:14:59,800 line:-2
of reflective paint
on the material.


329
00:14:59,833 --> 00:15:01,235 line:-2
And there’s
many other properties


330
00:15:01,268 --> 00:15:03,770 line:-2
available on the type
PhysicallyBasedMaterial.


331
00:15:05,072 --> 00:15:08,208 align:center
We also added a new type
called custom material


332
00:15:08,242 --> 00:15:11,178 align:center
to make materials using
your own metal code.


333
00:15:11,211 --> 00:15:13,413 line:0
This is what we used to make
the color transition effect


334
00:15:13,447 --> 00:15:15,649 align:center
on this octopus model.


335
00:15:15,682 --> 00:15:17,784 align:center
We will explain this shader
and custom materials


336
00:15:17,818 --> 00:15:19,820 line:0
in the second talk
about rendering.


337
00:15:21,021 --> 00:15:23,524 line:-2
In addition to materials,
we also added


338
00:15:23.557 --> 00:15:25.692 line:-2 align:center
more control
over animations in RealityKit.


339
00:15:27,060 --> 00:15:30,898 line:-2
First, let’s go over
the existing API for animations,


340
00:15:30.931 --> 00:15:32.933 line:-2 align:center
which are mostly about
playback of animations


341
00:15:32.966 --> 00:15:35.302 line:-1 align:center
loaded from a USD.


342
00:15:35,335 --> 00:15:37,738 line:-2
If you load an animation from
a USD, you can play it once.


343
00:15:38,672 --> 00:15:41,775 line:-2
You can also repeat it
so that it loops infinitely,


344
00:15:41.808 --> 00:15:43.677 line:-2 align:center
which is what we want
for the Idle animation


345
00:15:43,710 --> 00:15:45,779 line:-1
of our diver here.


346
00:15:45,812 --> 00:15:48,482 line:-2
You can also pause, resume,
and stop an animation.


347
00:15:49,583 --> 00:15:52,486 align:center
Finally,
when playing a new animation,


348
00:15:52,519 --> 00:15:55,455 line:0
you can specify a transition
duration.


349
00:15:55,489 --> 00:15:57,524 line:0
If you don’t specify one,
the character will


350
00:15:57,558 --> 00:16:00,093 line:0
instantly switch
to the new animation.


351
00:16:00,127 --> 00:16:04,198 line:0
If you do specify a transition
duration, RealityKit will blend


352
00:16:04,231 --> 00:16:07,601 line:0
between the old and new
animations during that time.


353
00:16:07,634 --> 00:16:09,736 align:center
This is useful, for example,
when transitioning


354
00:16:09,770 --> 00:16:12,272 line:0
between the Walk
and Idle cycles of the diver.


355
00:16:13,073 --> 00:16:15,509 line:0
But we can still improve
the animation of the feet there.


356
00:16:17,144 --> 00:16:19,546 line:0
We can use the new API
for blend layers


357
00:16:19,580 --> 00:16:22,382 line:0
to make the animations
more realistic.


358
00:16:22,416 --> 00:16:24,651 line:0
We play the Walking animation
and the Idle animation


359
00:16:24,685 --> 00:16:26,653 line:0
on two separate blend layers,


360
00:16:26,687 --> 00:16:29,623 line:0
and since we played the Walking
animation on the top layer,


361
00:16:29,656 --> 00:16:32,659 line:0
that’s the only animation
that we currently see.


362
00:16:32,693 --> 00:16:35,996 line:0
But we can change the blend
factor of the Walking animation


363
00:16:36,029 --> 00:16:38,899 line:0
to reveal the Idle animation
underneath.


364
00:16:38,932 --> 00:16:41,869 line:0
Notice how, as the blend factor
gets smaller,


365
00:16:41,902 --> 00:16:43,737 line:0
the footsteps also get smaller.


366
00:16:45,706 --> 00:16:47,441 line:0
And we can also change
the playback speed


367
00:16:47,474 --> 00:16:51,912 line:0
of the animations to make
the diver walk faster or slower.


368
00:16:51,945 --> 00:16:53,981 align:center
Here, the diver is
walking at half speed.


369
00:16:55,616 --> 00:16:58,118 align:center
Finally, we use the speed
of the character relative


370
00:16:58,151 --> 00:17:01,622 line:0
to the ground to control
both of these values.


371
00:17:01,655 --> 00:17:03,957 align:center
This way, we can make
the animations smoother


372
00:17:03,991 --> 00:17:05,392 align:center
and reduce
the sliding of the feet


373
00:17:05,425 --> 00:17:06,927 align:center
compared to the ground.


374
00:17:08,662 --> 00:17:11,965 align:center
So far, we have been using
multiple animation clips,


375
00:17:11,999 --> 00:17:14,568 align:center
such as the Idle and Walk
cycles.


376
00:17:14,601 --> 00:17:15,536 line:0
These are stored


377
00:17:15,569 --> 00:17:18,172 line:0
as AnimationResources
in RealityKit.


378
00:17:18,205 --> 00:17:21,708 align:center
And there are multiple ways
to load them from USD files.


379
00:17:21,742 --> 00:17:25,579 line:0
The first way is to have
one USD file per clip.


380
00:17:25,612 --> 00:17:28,248 align:center
We can load
each USD as an entity


381
00:17:28,282 --> 00:17:31,952 align:center
and get its animations
as AnimationResources.


382
00:17:31,985 --> 00:17:33,687 align:center
The AnimationResource
can then be played


383
00:17:33,720 --> 00:17:36,123 line:0
on any entity,
as long as the names


384
00:17:36,156 --> 00:17:38,692 align:center
of the joints in its skeleton
match the animation.


385
00:17:39.693 --> 00:17:42.563 line:-2 align:center
Another way to load multiple
animation clips is to have them


386
00:17:42,596 --> 00:17:45,399 line:-2
in a single USD
on the same timeline


387
00:17:45,432 --> 00:17:47,167 line:-1
and then use AnimationViews


388
00:17:47,201 --> 00:17:49,036 line:-2
to slice this timeline
into multiples clips.


389
00:17:50,470 --> 00:17:52,806 line:-2
This requires knowing
the timecodes between each clip.


390
00:17:54.408 --> 00:17:56.476 line:-2 align:center
Each AnimationView
can then be converted


391
00:17:56,510 --> 00:17:58,879 line:-1
to an AnimationResource and used


392
00:17:58.912 --> 00:18:01.915 line:-2 align:center
exactly the same way
as the previous method.


393
00:18:01,949 --> 00:18:05,118 line:-2
Let’s now go over the animations
of the octopus in the app.


394
00:18:05,152 --> 00:18:08,355 line:-2
The octopus is hiding,
but when the player gets near,


395
00:18:08.388 --> 00:18:11.225 line:-2 align:center
it will be scared and move
to a new hiding spot.


396
00:18:11,258 --> 00:18:13,660 line:-1
Let’s see how to animate it.


397
00:18:13,694 --> 00:18:15,596 line:-2
We start with loading
the skeletal animations


398
00:18:15.629 --> 00:18:18.832 line:-2 align:center
of the octopus: jumping,
swimming, and landing.


399
00:18:18,866 --> 00:18:21,068 line:-2
These animations are loaded
from a USD,


400
00:18:21,101 --> 00:18:23,971 line:-2
just like what we did
for the diver.


401
00:18:24,004 --> 00:18:26,473 line:-2
But we also want to animate
the transform of the octopus


402
00:18:26.507 --> 00:18:29.877 line:-2 align:center
to move it from one location
to the next.


403
00:18:29.910 --> 00:18:33.647 line:-2 align:center
To animate the transform, we use
a new API to programmatically


404
00:18:33.680 --> 00:18:36.950 line:-2 align:center
create an animation
of type FromToByAnimation.


405
00:18:38.519 --> 00:18:41.488 line:-2 align:center
This way,
we can animate the position.


406
00:18:41,522 --> 00:18:43,857 line:0
Let’s see what it looks like
on the octopus.


407
00:18:46,793 --> 00:18:50,464 line:0
To make it more interesting,
let’s also animate the rotation.


408
00:18:53,267 --> 00:18:55,869 line:0
The octopus
now rotates while it moves,


409
00:18:55,903 --> 00:18:59,573 line:0
but it’s swimming sideways,
which is not very realistic.


410
00:18:59,606 --> 00:19:03,243 line:0
We can improve this by making
a sequence of animations.


411
00:19:03,277 --> 00:19:07,080 line:0
First, we rotate the octopus
towards the new location.


412
00:19:07,114 --> 00:19:10,784 align:center
Then we translate it
to the new location.


413
00:19:10,817 --> 00:19:12,519 align:center
And finally,
we rotate the octopus


414
00:19:12,553 --> 00:19:15,422 line:0
back towards the camera.


415
00:19:15,455 --> 00:19:17,291 align:center
And here is the full animation.


416
00:19:22.596 --> 00:19:25.766 line:-2 align:center
In addition to new
APIs for animations,


417
00:19:25,799 --> 00:19:28,969 line:-2
we also added a way to manage
the physics of characters.


418
00:19:29,002 --> 00:19:31,738 line:-2
It’s called
Character controller.


419
00:19:31,772 --> 00:19:33,640 line:-2
This allows us to create
characters that can


420
00:19:33.674 --> 00:19:36.677 line:-2 align:center
physically interact
with the colliders in the scene.


421
00:19:36.710 --> 00:19:39.046 line:-2 align:center
Here, we see the diver
jumping from the floor


422
00:19:39,079 --> 00:19:41,815 line:-1
to the couch and walking on it.


423
00:19:41,849 --> 00:19:42,983 line:-1
This is achieved by adding


424
00:19:43,016 --> 00:19:45,252 line:-2
a character controller
to the diver.


425
00:19:45,285 --> 00:19:47,221 line:-2
With that,
the diver will automatically


426
00:19:47.254 --> 00:19:49.556 line:-2 align:center
interact with the mesh
of the environment,


427
00:19:49.590 --> 00:19:51.758 line:-1 align:center
generated from the LiDAR sensor.


428
00:19:52,626 --> 00:19:55,095 line:-2
Creating a character controller
is simple.


429
00:19:55,128 --> 00:19:56,897 line:-2
All you need to do is
to define a capsule


430
00:19:56,930 --> 00:19:59,499 line:-2
that matches the shape
of your character.


431
00:19:59,533 --> 00:20:01,902 line:-2
On creation,
you have to specify the height


432
00:20:01.935 --> 00:20:05.739 line:-1 align:center
of the capsule and its radius.


433
00:20:05,772 --> 00:20:08,408 line:-2
After the character controller
has been assigned to the entity,


434
00:20:08,442 --> 00:20:11,512 line:-2
you can call the move(to:)
function every frame.


435
00:20:11.545 --> 00:20:14.515 line:-2 align:center
It will make the character
move to the desired location,


436
00:20:14,548 --> 00:20:17,117 line:-2
but without
going through obstacles.


437
00:20:17,150 --> 00:20:19,953 line:-2
On the other hand, if you do
want to ignore obstacles,


438
00:20:19.987 --> 00:20:22.589 line:-2 align:center
you can use
the teleport function.


439
00:20:22,623 --> 00:20:25,392 line:-2
Now I will hand it off
to Amanda,


440
00:20:25.425 --> 00:20:27.160 line:-2 align:center
who will take you through
a few more fun features


441
00:20:27.194 --> 00:20:29.930 line:-2 align:center
that we’ve added
to this release of RealityKit.


442
00:20:29,963 --> 00:20:31,932 line:-2
[Amanda] Great.
Thanks, Olivier.


443
00:20:31,965 --> 00:20:34,234 line:-2
OK, so I’ll highlight
two new APIs


444
00:20:34,268 --> 00:20:36,036 line:-2
that are available
for creating resources


445
00:20:36,069 --> 00:20:38,872 line:-2
on the fly without having
to load them from disk.


446
00:20:40,207 --> 00:20:43,310 line:-2
First I’ll show you how you can
get the mesh of a person’s face


447
00:20:43,343 --> 00:20:45,012 line:-2
from SceneUnderstanding,
and then


448
00:20:45,045 --> 00:20:47,581 line:-2
I’ll take you through
how to generate audio.


449
00:20:47.614 --> 00:20:49.983 line:-2 align:center
There’s a sea of possibilities
that these open up


450
00:20:50.017 --> 00:20:51.718 line:-1 align:center
for procedurally generated art.


451
00:20:52.419 --> 00:20:55.122 line:-1 align:center
First up, the face mesh.


452
00:20:55,155 --> 00:20:58,325 line:-2
I was so inspired by the look
of the purple and orange octopus


453
00:20:58.358 --> 00:21:01.228 line:-2 align:center
we have in our demo app,
I tried my hand at painting one


454
00:21:01,261 --> 00:21:06,066 line:-2
on my face, but virtually, using
the new face mesh capability.


455
00:21:06,099 --> 00:21:08,135 line:-2
SceneUnderstanding can
now give you entities


456
00:21:08,168 --> 00:21:11,305 line:-2
that represent people’s faces,
and those entities have


457
00:21:11.338 --> 00:21:14.541 line:-2 align:center
ModelComponents on them,
which means you can swap out


458
00:21:14.575 --> 00:21:18.178 line:-2 align:center
the properties of the materials
on the face entity’s mesh.


459
00:21:18.212 --> 00:21:20.948 line:-2 align:center
We had a lot of fun generating
the textures to apply


460
00:21:20.981 --> 00:21:23.984 line:-2 align:center
to the face mesh on the fly
with our live drawings.


461
00:21:24.651 --> 00:21:26.620 line:-1 align:center
Let’s look at the code.


462
00:21:26,653 --> 00:21:29,990 line:-2
The SceneUnderstandingComponent
now has an enum property


463
00:21:30,023 --> 00:21:33,794 line:-2
called entityType, which is set
by the SceneUnderstandingSystem


464
00:21:33.827 --> 00:21:36.763 line:-2 align:center
and can take
one of two values: face,


465
00:21:36,797 --> 00:21:40,133 line:-2
meaning it’s the representation
of a real-world person’s face,


466
00:21:40,167 --> 00:21:42,603 line:-2
or meshChunk,
meaning it’s some other part


467
00:21:42,636 --> 00:21:44,705 line:-1
of the reconstructed world mesh.


468
00:21:44,738 --> 00:21:47,541 line:-2
It can also be nil, meaning
its type is not yet known.


469
00:21:48.408 --> 00:21:50.577 line:-1 align:center
Here’s an EntityQuery again.


470
00:21:50,611 --> 00:21:52,212 line:-2
You can query for entities
that have


471
00:21:52.246 --> 00:21:54.581 line:-2 align:center
the SceneUnderstandingComponent
and check


472
00:21:54.615 --> 00:21:57.084 line:-1 align:center
their entityType to find faces.


473
00:21:57,117 --> 00:21:58,852 line:-2
Then, you can get
the ModelComponents


474
00:21:58.886 --> 00:22:02.089 line:-2 align:center
from those entities and do
whatever you want with them.


475
00:22:02,122 --> 00:22:05,192 line:-2
In our face painting sample,
we’re using PencilKit


476
00:22:05.225 --> 00:22:07.361 line:-1 align:center
to let people draw on the canvas


477
00:22:07.394 --> 00:22:11.131 line:-2 align:center
and then wrapping the resulting
CGImage onto the faceEntity


478
00:22:11,164 --> 00:22:14,768 line:-2
by creating a TextureResource
from that CGImage.


479
00:22:14.801 --> 00:22:17.337 line:-2 align:center
We’re using
a PhysicallyBasedMaterial


480
00:22:17,371 --> 00:22:19,072 line:-2
so that we can make
this face paint look


481
00:22:19.106 --> 00:22:21.775 line:-2 align:center
as realistic as possible,
and we’re setting a few


482
00:22:21.808 --> 00:22:25.045 line:-2 align:center
of the properties on it
to dial it in for our look.


483
00:22:25,078 --> 00:22:27,915 line:-2
To make the glitter paint
effect, we use a normal


484
00:22:27.948 --> 00:22:30.584 line:-2 align:center
map texture which tells
the physically based renderer


485
00:22:30,617 --> 00:22:33,320 line:-2
how it should reflect the light
differently on this surface


486
00:22:33,353 --> 00:22:36,957 line:-2
than it would if we had simply
left the material metallic.


487
00:22:36,990 --> 00:22:38,792 line:-1
We then give the pencil-drawn


488
00:22:38,825 --> 00:22:43,063 align:center
TextureResource to the material
and set it on the entity.


489
00:22:43,096 --> 00:22:45,265 line:-2
So that’s one way
to work with our new


490
00:22:45,299 --> 00:22:47,000 line:-1
generated resources.


491
00:22:47.034 --> 00:22:49.102 line:-2 align:center
Another type of resource
you can now generate


492
00:22:49,136 --> 00:22:51,004 line:-1
is the AudioBufferResource.


493
00:22:51.038 --> 00:22:53.707 line:-2 align:center
You can get an AVAudioBuffer
however you like:


494
00:22:53,740 --> 00:22:55,742 line:-1
by recording microphone input,


495
00:22:55,776 --> 00:22:57,878 line:-2
procedurally generating it
yourself,


496
00:22:57.911 --> 00:23:01.148 line:-1 align:center
or using an AVSpeechSynthesizer.


497
00:23:01.181 --> 00:23:03.617 line:-2 align:center
Then you can use
the AVAudioBuffer to create


498
00:23:03,650 --> 00:23:06,887 line:-2
an AudioBufferResource and use
that to play sounds in your app.


499
00:23:08.188 --> 00:23:10.757 line:-2 align:center
Here’s how we turn text
into speech by writing


500
00:23:10.791 --> 00:23:14.595 line:-2 align:center
an AVSpeechUtterance
to an AVSpeechSynthesizer.


501
00:23:14.628 --> 00:23:17.898 line:-2 align:center
We receive
an AVAudioBuffer in a callback.


502
00:23:17,931 --> 00:23:21,001 line:-2
Here, we’re creating
an AudioBufferResource


503
00:23:21,034 --> 00:23:24,104 line:-2
and setting its inputMode
to .spatial to make use


504
00:23:24.137 --> 00:23:25.806 line:-1 align:center
of 3D positional audio.


505
00:23:26,473 --> 00:23:30,577 line:-2
The other available inputModes
are nonSpatial and ambient.


506
00:23:30,611 --> 00:23:33,280 line:-2
Then we tell an entity
to play that audio.


507
00:23:33.313 --> 00:23:35.782 line:-2 align:center
You could, of course,
process the audio buffer


508
00:23:35.816 --> 00:23:37.918 line:-2 align:center
with fancy tricks to make it
sound like your fish


509
00:23:37,951 --> 00:23:40,220 line:-2
are blowing bubbles
as they talk under water


510
00:23:40.254 --> 00:23:42.256 line:-2 align:center
or whatever fun things
you can come up with.


511
00:23:43.423 --> 00:23:45.859 line:-2 align:center
So this was an overview
of some of the new features


512
00:23:45,893 --> 00:23:47,594 line:-1
in RealityKit this year.


513
00:23:47.628 --> 00:23:49.930 line:-2 align:center
We’ve really focused
on giving you more control


514
00:23:49.963 --> 00:23:52.799 line:-2 align:center
over the appearance
and behaviors of your scenes.


515
00:23:52.833 --> 00:23:54.201 line:-1 align:center
We’ve modified our ECS


516
00:23:54,234 --> 00:23:56,103 line:-2
to provide you
with custom systems,


517
00:23:56.136 --> 00:23:57.905 line:-2 align:center
which gives you
way more flexibility


518
00:23:57,938 --> 00:24:00,374 line:-2
in structuring
your app’s behaviors.


519
00:24:00.407 --> 00:24:01.775 line:-1 align:center
We’ve added lots of advancements


520
00:24:01.808 --> 00:24:04.411 line:-2 align:center
to our materials
and animation APIs.


521
00:24:04.444 --> 00:24:07.014 line:-2 align:center
We’ve introduced the character
controller to make it easy


522
00:24:07,047 --> 00:24:10,184 line:-2
for your entities to interact
with the real-world environment.


523
00:24:10.217 --> 00:24:12.386 line:-2 align:center
Finally, we’ve highlighted
a few of the ways


524
00:24:12,419 --> 00:24:15,489 line:-2
in which you can generate
resources on the fly.


525
00:24:15,522 --> 00:24:17,558 line:-2
But that’s definitely
not an exhaustive list


526
00:24:17,591 --> 00:24:19,927 line:-2
of everything that’s new
in RealityKit 2.


527
00:24:19,960 --> 00:24:22,796 align:center
In our second RealityKit
session later this week,


528
00:24:22,829 --> 00:24:25,599 line:0
you can learn more about
the new rendering capabilities


529
00:24:25,632 --> 00:24:26,800 line:0
and see how we implemented


530
00:24:26,834 --> 00:24:29,269 line:0
some of the things
in our underwater demo.


531
00:24:29,303 --> 00:24:31,171 line:0
A geometry modifier
is what we use


532
00:24:31,205 --> 00:24:32,739 align:center
to animate our seaweed.


533
00:24:32,773 --> 00:24:35,209 align:center
The octopus uses surface shaders
to transition


534
00:24:35,242 --> 00:24:37,344 align:center
beautifully between its colors.


535
00:24:37,377 --> 00:24:40,681 line:0
The blue depth fog effect
as well as the water caustics


536
00:24:40,714 --> 00:24:43,483 align:center
were created
using post processing.


537
00:24:43,517 --> 00:24:45,853 align:center
And in the theme
of generative resources,


538
00:24:45,886 --> 00:24:48,922 line:0
you’ll learn
how to use dynamic meshes.


539
00:24:48,956 --> 00:24:51,592 align:center
For a refresher,
you might also want to check out


540
00:24:51,625 --> 00:24:55,028 line:0
the session “Building Apps
with RealityKit” from 2019.


541
00:24:55,729 --> 00:24:57,898 line:-2
Thank you,
and we look forward to seeing


542
00:24:57,931 --> 00:25:00,601 line:-2
the depths of your creativity
with these APIs.


543
00:25:01,168 --> 00:25:04,171 line:0
[upbeat music]

