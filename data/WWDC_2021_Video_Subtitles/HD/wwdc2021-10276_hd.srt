2
00:00:00.000 --> 00:00:02.002 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02.002 --> 00:00:05.639 line:-1 position:50%
♪ Bass music playing ♪


4
00:00:05,639 --> 00:00:07,708 line:-1
[KEYSTROKES]


5
00:00:07,708 --> 00:00:09,309 line:0 align:center size:2%
♪


6
00:00:09.309 --> 00:00:11.511 line:-1 position:50%
Ron Santos: Hey, everyone.
I'm Ron Santos.


7
00:00:11,511 --> 00:00:14,014 line:-1
I'm a software engineer
working on Keyboards.


8
00:00:14.014 --> 00:00:15.682 line:-1 position:50%
And I'm here to show you
how to make the most


9
00:00:15,682 --> 00:00:18,185 line:-1
of a new feature
that lets you input text,


10
00:00:18.185 --> 00:00:23.123 line:-1 position:50%
not by typing or by dictation,
but by using the camera.


11
00:00:23.123 --> 00:00:25.792 line:-1 position:50%
So we've been working
really hard on this new release


12
00:00:25.792 --> 00:00:28.695 line:-1 position:50%
and now that WWDC
is finally here,


13
00:00:28.695 --> 00:00:32.099 line:-1 position:50%
I am so ready for a vacation.


14
00:00:32.099 --> 00:00:33.166 line:-1 position:50%
As soon as it's safe,


15
00:00:33,166 --> 00:00:35,369 line:-1
I'd love to take some time off
and travel.


16
00:00:35.369 --> 00:00:37.404 line:-1 position:50%
One thing about traveling
that bugs me though,


17
00:00:37,404 --> 00:00:40,007 line:-1
is dealing with all of that
nondigital text.


18
00:00:40,007 --> 00:00:41,408 line:-1
You know what I mean?


19
00:00:41.408 --> 00:00:43.510 line:-1 position:50%
Invoices, activity flyers,


20
00:00:43,510 --> 00:00:47,381 line:-1
and that giant binder they leave
for you in hotel rooms?


21
00:00:47.381 --> 00:00:50.284 line:-1 position:50%
Luckily, iOS 15 has
a new feature that allows you


22
00:00:50.284 --> 00:00:52.853 line:-1 position:50%
to capture text
from the world around you.


23
00:00:52,853 --> 00:00:55,722 line:-1
Let me show you what I mean.


24
00:00:55.722 --> 00:00:56.757 line:-1 position:50%
Check it out!


25
00:00:56,757 --> 00:00:58,225 line:0
I'm building
this travel journal app.


26
00:00:58,225 --> 00:01:00,127 position:50%
I'll use it to document
trips I've taken


27
00:01:00,127 --> 00:01:03,163 position:50%
and places I've stayed,
like my last trip to Hawaii.


28
00:01:03,163 --> 00:01:06,066 position:50%
At the top here,
I can add an image header;


29
00:01:06,066 --> 00:01:08,635 line:0
maybe a nice landscape photo
from my Camera Roll.


30
00:01:08,635 --> 00:01:11,138 position:50%
Then I have fields
for hotel information


31
00:01:11,138 --> 00:01:14,474 line:0
like name, phone number,
and address.


32
00:01:14,474 --> 00:01:17,044 line:-1
I actually have all of that
information on a document


33
00:01:17,044 --> 00:01:18,812 line:-1
right in front of me.


34
00:01:20.814 --> 00:01:22.683 line:-1 position:50%
I don't want to have
to type it all out,


35
00:01:22,683 --> 00:01:24,751 line:-1
and now I don't have to.


36
00:01:24,751 --> 00:01:28,322 line:0
For example, if I tap twice
on the Phone Number field,


37
00:01:28,322 --> 00:01:30,657 line:0
I see a new option
in the editing menu


38
00:01:30,657 --> 00:01:33,794 position:50%
to use Text from Camera.


39
00:01:33,794 --> 00:01:36,697 line:0
Once it launches,
the camera instantly recognizes


40
00:01:36,697 --> 00:01:39,366 position:50%
this group of text
on the document.


41
00:01:39,366 --> 00:01:42,703 position:50%
I can freeze it and select
just the phone number.


42
00:01:42,703 --> 00:01:45,405 line:0
Then I tap Insert and I'm done.


43
00:01:45.405 --> 00:01:46.773 line:-1 position:50%
I think that's pretty awesome.


44
00:01:46,773 --> 00:01:47,908 line:-1
Reminds me of that saying


45
00:01:47.908 --> 00:01:49.743 line:-1 position:50%
how a picture is worth
a thousand words.


46
00:01:49,743 --> 00:01:50,577 line:-1
But with this feature,


47
00:01:50.577 --> 00:01:54.147 line:-1 position:50%
we can literally take
a thousand words from a picture.


48
00:01:54.147 --> 00:01:55.983 line:-1 position:50%
Anyways, like I said earlier,


49
00:01:55,983 --> 00:01:58,986 line:-1
I'd love to show you how to get
the most out of this feature.


50
00:01:58.986 --> 00:02:02.155 line:-1 position:50%
Let's get started by talking
about filtering content.


51
00:02:02,155 --> 00:02:04,124 line:-1
If you remember,
I had to drag-select


52
00:02:04,124 --> 00:02:06,827 line:-1
the phone number
from the large block of text.


53
00:02:06,827 --> 00:02:08,261 line:-1
Well, I shouldn't
have to do that


54
00:02:08,261 --> 00:02:10,897 line:-1
if the app knows I'm looking
for a phone number.


55
00:02:10,897 --> 00:02:14,835 line:-1
It should ignore everything else
and just grab the number.


56
00:02:14.835 --> 00:02:16.536 line:-1 position:50%
So first, I'll show you
how simple it is


57
00:02:16,536 --> 00:02:18,939 line:-1
to filter for the content
you want.


58
00:02:18,939 --> 00:02:21,475 line:-1
Filtering is done by using
the TextContentType


59
00:02:21,475 --> 00:02:23,677 line:-1
and KeyboardType properties
which are available


60
00:02:23,677 --> 00:02:26,480 line:-1
on text fields
and text views.


61
00:02:26.480 --> 00:02:29.116 line:-1 position:50%
In fact, you're probably already
using these properties


62
00:02:29,116 --> 00:02:31,651 line:-1
to support things like AutoFill.


63
00:02:31,651 --> 00:02:33,153 line:-1
If so, terrific.


64
00:02:33,153 --> 00:02:36,056 line:-1
You'll get the extra benefit
for camera input.


65
00:02:36,056 --> 00:02:37,657 line:0
And if you haven't used them,


66
00:02:37,657 --> 00:02:39,292 position:50%
here are some videos
from previous years


67
00:02:39,292 --> 00:02:41,228 position:50%
that show you how.


68
00:02:41,228 --> 00:02:44,264 line:0
OK, back to TextContentType.


69
00:02:44,264 --> 00:02:47,601 line:-1
The TextContentType can be
any one of these various values.


70
00:02:47.601 --> 00:02:50.570 line:-1 position:50%
But the camera won't filter
for all of these types.


71
00:02:50,570 --> 00:02:53,106 position:50%
It'll filter
on just these seven.


72
00:02:53,106 --> 00:02:55,208 position:50%
Let's look at some examples.


73
00:02:55,208 --> 00:02:57,711 line:0
These first four --
telephone number,


74
00:02:57,711 --> 00:03:00,781 position:50%
full street address,
URL, and email --


75
00:03:00,781 --> 00:03:03,483 line:0
they all preexist in iOS today.


76
00:03:03,483 --> 00:03:06,953 position:50%
New in iOS 15, we've added
three additional types:


77
00:03:06,953 --> 00:03:09,089 position:50%
flight number,
shipment tracking number,


78
00:03:09,089 --> 00:03:13,026 line:0
and the combination of dates,
times, and durations.


79
00:03:13,026 --> 00:03:14,761 position:50%
You can imagine how
flight number might be useful


80
00:03:14,761 --> 00:03:16,663 position:50%
to travel apps,
or how tracking numbers


81
00:03:16,663 --> 00:03:19,099 line:0
would be cool
for package-tracking apps.


82
00:03:19,099 --> 00:03:22,502 position:50%
Anyways, here's how you would
use these content types.


83
00:03:22,502 --> 00:03:23,970 line:0
It's super simple.


84
00:03:23,970 --> 00:03:25,572 line:-1
If you're in Interface Builder,


85
00:03:25.572 --> 00:03:29.142 line:-1 position:50%
look for Content Type
and Keyboard Type


86
00:03:29,142 --> 00:03:31,378 line:-1
in the Attributes inspector.


87
00:03:31.378 --> 00:03:34.781 line:-1 position:50%
If you're doing this in code,
just assign the values you want.


88
00:03:34,781 --> 00:03:36,483 line:-1
Here in my travel journal app,


89
00:03:36,483 --> 00:03:39,419 line:-1
the Phone Number field
is using the phone pad keyboard,


90
00:03:39,419 --> 00:03:42,155 line:-1
and the Address field
has textContentType


91
00:03:42.155 --> 00:03:44.224 line:-1 position:50%
of fullStreetAddress.


92
00:03:44,224 --> 00:03:45,926 line:-1
And notice that
for the phone number,


93
00:03:45.926 --> 00:03:49.029 line:-1 position:50%
I set the autocorrectionType
to no.


94
00:03:49,029 --> 00:03:50,497 line:-1
Because if there
are no autocorrection


95
00:03:50,497 --> 00:03:52,432 line:-1
or predictive text candidates,


96
00:03:52,432 --> 00:03:55,735 line:-1
iOS gives you a button
for quick access to the camera.


97
00:03:55,735 --> 00:03:57,504 line:-1
OK, let's go back to my app,


98
00:03:57,504 --> 00:04:00,040 line:-1
and we can try capturing
the hotel phone number again,


99
00:04:00.040 --> 00:04:03.810 line:-1 position:50%
but this time, with our changes.


100
00:04:03,810 --> 00:04:05,312 line:0
Now, when I bring up the camera,


101
00:04:05,312 --> 00:04:07,514 line:0
it smartly ignores
all the other text


102
00:04:07,514 --> 00:04:09,549 line:0
except for the phone number.


103
00:04:09.549 --> 00:04:12.619 line:-1 position:50%
Let's try that again
with the Address field.


104
00:04:15,622 --> 00:04:16,990 position:50%
That's so much faster.


105
00:04:16,990 --> 00:04:19,459 line:0
A lot less tapping and swiping.


106
00:04:19,459 --> 00:04:21,061 line:-1
So that's how
you filter content.


107
00:04:21.061 --> 00:04:22.929 line:-1 position:50%
Let's move on
to a different challenge.


108
00:04:22,929 --> 00:04:24,431 line:-1
How do we make
this functionality


109
00:04:24.431 --> 00:04:28.568 line:-1 position:50%
more discoverable
to really encourage its use?


110
00:04:28,568 --> 00:04:29,803 line:-1
As app developers,


111
00:04:29.803 --> 00:04:32.606 line:-1 position:50%
we love having
a streamlined user interface.


112
00:04:32.606 --> 00:04:35.175 line:-1 position:50%
Which means we sometimes
have additional functionality


113
00:04:35.175 --> 00:04:41.615 line:-1 position:50%
hidden behind menus and gestures
the user doesn't know about.


114
00:04:41,615 --> 00:04:43,950 line:-1
For example, if I use
the Notes field in my app,


115
00:04:43,950 --> 00:04:46,987 line:-1
it's not obvious that I can use
the camera for input here.


116
00:04:46,987 --> 00:04:51,958 line:-1
The editing menu
only appears on a second tap.


117
00:04:51,958 --> 00:04:53,894 line:-1
And the candidate bar
has predictive text


118
00:04:53,894 --> 00:04:56,396 line:-1
instead of the button
I showed you earlier.


119
00:04:56.396 --> 00:05:00.167 line:-1 position:50%
So if you want a button onscreen
hinting at camera input,


120
00:05:00.167 --> 00:05:03.403 line:-1 position:50%
you'll want to add your own
dedicated launcher button.


121
00:05:03,403 --> 00:05:05,805 line:-1
To do that, first we need
to create a UIAction


122
00:05:05.805 --> 00:05:11.044 line:-1 position:50%
using the captureTextFromCamera
factory method, new in iOS 15.


123
00:05:11,044 --> 00:05:12,879 line:-1
The action knows
how to launch the camera,


124
00:05:12,879 --> 00:05:14,781 line:-1
but also provides
an image and a label


125
00:05:14,781 --> 00:05:17,317 line:-1
when it's used together
with buttons and menus.


126
00:05:17,317 --> 00:05:18,752 line:-1
Let's add a menu to my app


127
00:05:18,752 --> 00:05:21,922 line:-1
with an item to insert text
from the camera.


128
00:05:21,922 --> 00:05:23,557 line:-1
So here's my app again.


129
00:05:23,557 --> 00:05:25,358 line:-1
When editing the notes field,


130
00:05:25,358 --> 00:05:28,361 line:-1
I have this toolbar shown
above the keyboard.


131
00:05:28.361 --> 00:05:31.164 line:-1 position:50%
When the second item
with a camera icon is tapped,


132
00:05:31,164 --> 00:05:35,368 line:-1
I want a menu to appear for a
bunch of camera-related actions,


133
00:05:35,368 --> 00:05:38,905 line:-1
like our new feature,
Text from Camera.


134
00:05:38.905 --> 00:05:41.107 line:-1 position:50%
Here we create the action.


135
00:05:41,107 --> 00:05:43,810 line:-1
And notice, other than
the optional identifier,


136
00:05:43.810 --> 00:05:49.449 line:-1 position:50%
the factory method just requires
a responder to accept the text.


137
00:05:49.449 --> 00:05:53.420 line:-1 position:50%
Then, I create actions
for the other menu items.


138
00:05:53,420 --> 00:05:55,622 line:-1
Finally, I assemble the menu
and populate it


139
00:05:55,622 --> 00:05:59,926 line:-1
with each one of the actions
I just created,


140
00:05:59.926 --> 00:06:02.729 line:-1 position:50%
including the textFromCamera
action.


141
00:06:02,729 --> 00:06:04,764 line:-1
Remember, I don't have
to specify the title


142
00:06:04.764 --> 00:06:06.099 line:-1 position:50%
or which image to use.


143
00:06:06,099 --> 00:06:08,201 line:-1
That's all provided
by the action.


144
00:06:08,201 --> 00:06:10,604 line:-1
The title will even
be localized for me.


145
00:06:10,604 --> 00:06:13,440 line:-1
OK, let's try it out.


146
00:06:13,440 --> 00:06:14,641 line:-1
We're back in the app.


147
00:06:14,641 --> 00:06:17,744 line:-1
Here's the Notes field and the
toolbar with our camera menu.


148
00:06:17.744 --> 00:06:18.712 line:-1 position:50%
Let me insert some text


149
00:06:18.712 --> 00:06:22.148 line:-1 position:50%
from an activity flyer
in front of me.


150
00:06:24,718 --> 00:06:25,819 line:-1
And done!


151
00:06:25.819 --> 00:06:29.289 line:-1 position:50%
A user-discoverable launcher
with just a few lines of code.


152
00:06:29,289 --> 00:06:32,125 line:-1
There is, however,
one thing to keep in mind.


153
00:06:32,125 --> 00:06:34,127 line:-1
Before you add
any camera launchers,


154
00:06:34.127 --> 00:06:35.829 line:-1 position:50%
you'll first want to check
the result of


155
00:06:35.829 --> 00:06:38.098 line:-1 position:50%
canPerformAction withSender.


156
00:06:38.098 --> 00:06:40.667 line:-1 position:50%
That's because our UIAction
works by invoking a new method


157
00:06:40.667 --> 00:06:44.504 line:-1 position:50%
on UIResponder objects
called captureTextFromCamera,


158
00:06:44.504 --> 00:06:46.940 line:-1 position:50%
which works similar
to standard edit actions


159
00:06:46.940 --> 00:06:49.709 line:-1 position:50%
like cut, copy, and paste.


160
00:06:49.709 --> 00:06:51.544 line:-1 position:50%
And those actions
aren't always available,


161
00:06:51,544 --> 00:06:53,380 line:-1
depending on the context.


162
00:06:53,380 --> 00:06:55,048 line:-1
For example,
you can't cut text


163
00:06:55,048 --> 00:06:57,150 line:-1
if you have nothing selected.


164
00:06:57.150 --> 00:06:58.184 line:-1 position:50%
Same thing goes here;


165
00:06:58.184 --> 00:07:01.921 line:-1 position:50%
the captureTextFromCamera
action has some prerequisites.


166
00:07:01,921 --> 00:07:04,958 line:-1
That one method will make sure
all the requirements are met.


167
00:07:04.958 --> 00:07:06.626 line:-1 position:50%
But let's go
through each of them.


168
00:07:06,626 --> 00:07:08,228 line:-1
That way, you have a better idea


169
00:07:08,228 --> 00:07:10,797 line:-1
of why that method
may return false.


170
00:07:10.797 --> 00:07:13.233 line:-1 position:50%
First, there are some
hardware requirements;


171
00:07:13.233 --> 00:07:16.636 line:-1 position:50%
not all devices running iOS 15
support the feature.


172
00:07:16.636 --> 00:07:18.038 line:-1 position:50%
The device should be an iPhone.


173
00:07:18,038 --> 00:07:19,973 line:-1
And not just any iPhone,


174
00:07:19.973 --> 00:07:22.375 line:-1 position:50%
one with the machine learning
super powers


175
00:07:22.375 --> 00:07:24.744 line:-1 position:50%
of the Neural Engine.


176
00:07:24.744 --> 00:07:25.779 line:-1 position:50%
Aside from hardware,


177
00:07:25,779 --> 00:07:28,948 line:-1
your responder has to handle
text insertion.


178
00:07:28,948 --> 00:07:30,850 line:-1
We'll talk more
about that later.


179
00:07:30,850 --> 00:07:33,019 line:-1
Next, and this might be obvious,


180
00:07:33.019 --> 00:07:35.622 line:-1 position:50%
but if your responder
is a text view or text field,


181
00:07:35,622 --> 00:07:37,791 line:-1
it has to be editable.


182
00:07:37,791 --> 00:07:40,026 line:-1
And finally,
users must have at least one


183
00:07:40,026 --> 00:07:41,895 line:-1
of these seven
supported languages


184
00:07:41.895 --> 00:07:44.164 line:-1 position:50%
in their list
of preferred languages.


185
00:07:44.164 --> 00:07:46.800 line:-1 position:50%
You're now well-equipped
to handle camera input.


186
00:07:46.800 --> 00:07:47.867 line:-1 position:50%
But before we wrap up,


187
00:07:47.867 --> 00:07:50.704 line:-1 position:50%
let me show you something fun
I added to my app.


188
00:07:50,704 --> 00:07:52,505 line:-1
Remember the header photo?


189
00:07:52,505 --> 00:07:54,441 line:-1
It's nice, but I think
it'd be kind of cool


190
00:07:54,441 --> 00:07:56,142 line:-1
to add a caption over it.


191
00:07:56.142 --> 00:07:59.112 line:-1 position:50%
Maybe a caption taken
from the camera.


192
00:07:59,112 --> 00:08:01,281 line:-1
So I added
a launcher button here


193
00:08:01,281 --> 00:08:04,718 line:-1
just like what we did
with the menu item.


194
00:08:04,718 --> 00:08:05,819 line:-1
[PAPER RUSTLING]


195
00:08:08,822 --> 00:08:14,361 line:0
And now, I can capture text
and place it over the image.


196
00:08:14,361 --> 00:08:15,528 line:-1
But how'd I do that, though?


197
00:08:15.528 --> 00:08:20.233 line:-1 position:50%
I mean, it's an image view
and not a text control.


198
00:08:20.233 --> 00:08:23.336 line:-1 position:50%
Let's step back and figure out
how the text controls work.


199
00:08:23.336 --> 00:08:26.106 line:-1 position:50%
And then we'll talk
about image views later.


200
00:08:26.106 --> 00:08:29.609 line:-1 position:50%
Text controls adopt
a protocol called UIKeyInput.


201
00:08:29,609 --> 00:08:31,378 line:-1
It defines a basic set
of methods


202
00:08:31,378 --> 00:08:35,115 line:-1
for responders to accept
keyboard input.


203
00:08:35,115 --> 00:08:37,117 line:-1
The protocol has three methods,


204
00:08:37.117 --> 00:08:40.487 line:-1 position:50%
one of which
is the insertText method.


205
00:08:40,487 --> 00:08:42,155 line:-1
And that method
is exactly what's used


206
00:08:42.155 --> 00:08:45.325 line:-1 position:50%
to transport text
from the camera to your app.


207
00:08:45.325 --> 00:08:47.394 line:-1 position:50%
So for a responder
to support camera input,


208
00:08:47.394 --> 00:08:50.397 line:-1 position:50%
it needs to adopt this protocol.


209
00:08:50,397 --> 00:08:53,166 line:0
I know I just said text controls
adopt UIKeyInput.


210
00:08:53,166 --> 00:08:54,734 position:50%
But in reality,
they adopt a protocol


211
00:08:54,734 --> 00:08:56,469 line:0
called UITextInput,


212
00:08:56,469 --> 00:08:59,139 position:50%
which is an extension
of UIKeyInput.


213
00:08:59,139 --> 00:09:01,174 line:0
If you adopt UITextInput,


214
00:09:01,174 --> 00:09:03,443 line:0
you'll get an extra feature
when using the camera:


215
00:09:03,443 --> 00:09:06,279 line:0
a preview of the text
to be inserted.


216
00:09:06,279 --> 00:09:09,883 line:0
And that's done with the
setMarkedText method shown here.


217
00:09:09,883 --> 00:09:11,551 position:50%
Having a preview is optional,
though.


218
00:09:11,551 --> 00:09:12,719 line:0
If you opt not to have it,


219
00:09:12,719 --> 00:09:16,556 line:0
you only need
to adopt UIKeyInput.


220
00:09:16,556 --> 00:09:18,725 line:0
There's one last protocol
to mention,


221
00:09:18,725 --> 00:09:21,928 line:0
and you might have caught it
already a few minutes ago.


222
00:09:21,928 --> 00:09:25,932 line:-1
UIKeyInput itself
extends UITextInputTraits.


223
00:09:25,932 --> 00:09:28,668 line:-1
That protocol consists
only of optional properties


224
00:09:28,668 --> 00:09:31,771 line:-1
like KeyboardType
and TextContentType,


225
00:09:31,771 --> 00:09:34,274 line:-1
which you know from earlier
are used to filter camera input


226
00:09:34.274 --> 00:09:37.177 line:-1 position:50%
for specific content.


227
00:09:37,177 --> 00:09:38,545 line:-1
So for camera input,


228
00:09:38.545 --> 00:09:41.714 line:-1 position:50%
you'll want to adopt UIKeyInput
and, optionally,


229
00:09:41,714 --> 00:09:44,017 line:-1
depending on the level
of functionality you're after,


230
00:09:44,017 --> 00:09:48,188 line:-1
adopt UITextInputTraits
or UITextInput.


231
00:09:48,188 --> 00:09:51,291 line:-1
OK. Now, let's bring it back
to our ImageView.


232
00:09:51.291 --> 00:09:53.893 line:-1 position:50%
I'm going to create a new class
called HeadlineImageView


233
00:09:53,893 --> 00:09:58,531 line:-1
which subclasses UIImageView
and adopts UIKeyInput.


234
00:09:58,531 --> 00:09:59,866 line:-1
Here's it is in code.


235
00:09:59,866 --> 00:10:02,669 line:-1
It's a simple subclass
of UIImageView,


236
00:10:02.669 --> 00:10:04.571 line:-1 position:50%
and it has a UILabel subview


237
00:10:04,571 --> 00:10:08,274 line:-1
that we'll use
to display the caption.


238
00:10:08,274 --> 00:10:11,644 line:-1
Remember, to adopt UIKeyInput
we need three methods:


239
00:10:11,644 --> 00:10:15,949 line:-1
hasText, deleteBackward,
and insertText.


240
00:10:15.949 --> 00:10:17.884 line:-1 position:50%
Typically, responders
adopt UIKeyInput


241
00:10:17,884 --> 00:10:19,786 line:-1
to summon the keyboard.


242
00:10:19,786 --> 00:10:21,554 line:-1
But because I only want
camera input


243
00:10:21.554 --> 00:10:23.189 line:-1 position:50%
and not keyboard input,


244
00:10:23,189 --> 00:10:26,893 line:-1
we only have to implement
insertText.


245
00:10:26,893 --> 00:10:29,429 line:-1
hasText can just return false


246
00:10:29.429 --> 00:10:33.533 line:-1 position:50%
and deleteBackward
doesn't need to do anything.


247
00:10:33.533 --> 00:10:34.534 line:-1 position:50%
As for insertText,


248
00:10:34,534 --> 00:10:37,003 line:-1
its implementation
is really simple.


249
00:10:37,003 --> 00:10:38,905 line:-1
It just takes the text
from the camera


250
00:10:38.905 --> 00:10:41.007 line:-1 position:50%
and gives it to our label.


251
00:10:41,007 --> 00:10:42,208 line:-1
That's all there is to it!


252
00:10:42,208 --> 00:10:44,911 line:-1
Now we have an image view with
a way of displaying a caption


253
00:10:44,911 --> 00:10:47,380 line:-1
captured from the camera.


254
00:10:47,380 --> 00:10:49,249 line:-1
Thanks for taking
this trip with me!


255
00:10:49,249 --> 00:10:51,651 line:-1
Here's what I hope
you come away with.


256
00:10:51,651 --> 00:10:54,187 line:-1
Take advantage
of text content types.


257
00:10:54,187 --> 00:10:56,022 line:-1
They help in more ways than one,


258
00:10:56,022 --> 00:10:59,826 line:-1
including filtering text
from the camera.


259
00:10:59.826 --> 00:11:00.927 line:-1 position:50%
Create your own launchers


260
00:11:00,927 --> 00:11:03,763 line:-1
when you really want
to promote camera input.


261
00:11:03,763 --> 00:11:06,699 line:-1
We provide labels and images
for a consistent look


262
00:11:06.699 --> 00:11:10.603 line:-1 position:50%
that users can associate
with camera input across apps.


263
00:11:10,603 --> 00:11:11,871 line:-1
But make sure
you first check to see


264
00:11:11,871 --> 00:11:14,641 line:-1
if the functionality
is available.


265
00:11:14,641 --> 00:11:17,310 line:-1
Finally, remember you can
use camera input


266
00:11:17,310 --> 00:11:20,813 line:-1
for your own custom responders
that aren't text controls.


267
00:11:20,813 --> 00:11:24,217 line:-1
You just need to adopt
the UIKeyInput protocol.


268
00:11:24.217 --> 00:11:28.454 line:-1 position:50%
Safe travels and enjoy
the rest of WWDC 2021!


269
00:11:28,454 --> 00:11:30,690 line:0 position:89% size:2%
♪

