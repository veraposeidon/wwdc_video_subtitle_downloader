2
00:00:02,035 --> 00:00:09,009 line:-1
[music]


3
00:00:09.877 --> 00:00:11.778 line:-1 align:center
[Ken] Hi, I'm Ken Greenebaum,


4
00:00:11,812 --> 00:00:14,381 line:-2
on the Display and Color
Technologies team.


5
00:00:14.414 --> 00:00:15.782 line:-1 align:center
Thank you for attending this


6
00:00:15,816 --> 00:00:19,019 line:-2
"High Dynamic Range,
rendering with EDR" talk.


7
00:00:19.052 --> 00:00:22.589 line:-2 align:center
It is a technology I am
thrilled to be sharing with you.


8
00:00:22.623 --> 00:00:25.158 line:-2 align:center
Let's quickly run down
what we'll be covering


9
00:00:25,192 --> 00:00:28,061 line:-2
and who might best
benefit from attending.


10
00:00:28,729 --> 00:00:32,399 line:-2
We will start with what
EDR actually is,


11
00:00:32.432 --> 00:00:34.334 line:-2 align:center
describe the four steps
used to add


12
00:00:34.368 --> 00:00:37.137 line:-1 align:center
EDR to your existing app,


13
00:00:37.171 --> 00:00:39.239 line:-1 align:center
discuss the native EDR API


14
00:00:39,273 --> 00:00:41,842 line:-1
for more control of rendering,


15
00:00:41.875 --> 00:00:45.045 line:-2 align:center
and finally, we will explore
a series of best practices


16
00:00:45.078 --> 00:00:46.680 line:-1 align:center
related to EDR.


17
00:00:47,681 --> 00:00:50,284 line:-1
Now, what is EDR?


18
00:00:50,317 --> 00:00:51,485 line:-1
EDR is an acronym


19
00:00:51,518 --> 00:00:53,120 line:-1
you might not be familiar with.


20
00:00:54,121 --> 00:00:57,424 line:-2
It stands for
"Extended Dynamic Range."


21
00:00:58.425 --> 00:00:59.493 line:-1 align:center
We use "EDR"


22
00:00:59,526 --> 00:01:02,996 line:-2
to refer to both
the HDR representation


23
00:01:03,030 --> 00:01:05,299 line:-1
and the HDR rendering technology


24
00:01:05,332 --> 00:01:07,167 line:-1
used on our platforms.


25
00:01:08,168 --> 00:01:10,871 line:-2
It is somewhat akin
to color management,


26
00:01:10,904 --> 00:01:13,006 line:-2
which you might
already be familiar with.


27
00:01:13,607 --> 00:01:15,275 line:-1
Developers of many types of apps


28
00:01:15,309 --> 00:01:17,277 line:-1
will find this talk interesting.


29
00:01:17.711 --> 00:01:18.712 line:-1 align:center
To begin,


30
00:01:18.745 --> 00:01:22.049 line:-2 align:center
any developer interested
in computer graphics technology,


31
00:01:22,082 --> 00:01:24,084 line:-1
High Dynamic Range displays,


32
00:01:24,117 --> 00:01:26,286 line:-2
and especially
the new XDR displays


33
00:01:26.320 --> 00:01:29.590 line:-2 align:center
that Apple has been releasing
over the last couple of years.


34
00:01:30.591 --> 00:01:33.093 line:-2 align:center
Next are hardcore
game developers


35
00:01:33,126 --> 00:01:34,761 line:-2
who want to create
the most realistic


36
00:01:34,795 --> 00:01:36,663 line:-1
and exciting experience,


37
00:01:36,697 --> 00:01:39,466 line:-2
unlocking bright details
that might already be present


38
00:01:39,499 --> 00:01:41,101 line:-1
in their rendering engine.


39
00:01:41,768 --> 00:01:44,638 line:-2
Critically,
there are the Pro app developers


40
00:01:44,671 --> 00:01:46,807 line:-1
who are interested in achieving


41
00:01:46.840 --> 00:01:48.609 line:-1 align:center
studio reference response


42
00:01:48.642 --> 00:01:51.144 line:-1 align:center
for HDR video and still images.


43
00:01:53,146 --> 00:01:55,449 line:-2
Finally, there are
developers of apps


44
00:01:55,482 --> 00:01:58,385 line:-2
whose emphasis
isn't specific to graphics,


45
00:01:58,418 --> 00:02:01,054 line:-2
but who would like to embrace
the HDR still image


46
00:02:01,088 --> 00:02:04,424 line:-2
and video content
now entering the ecosystem.


47
00:02:04.925 --> 00:02:06.293 line:-1 align:center
HDR is here,


48
00:02:06.326 --> 00:02:09.429 line:-2 align:center
and it is enabled
by our EDR technology.


49
00:02:09,463 --> 00:02:11,298 line:-1
As we will be discussing,


50
00:02:11.331 --> 00:02:14.268 line:-2 align:center
we have displays
with incredible capabilities


51
00:02:14,301 --> 00:02:17,004 line:-1
already in users' hands.


52
00:02:17.037 --> 00:02:20.073 line:-2 align:center
Stunning HDR content
in the ecosystem


53
00:02:20.107 --> 00:02:23.710 line:-2 align:center
that users are capturing,
streaming, and downloading,


54
00:02:23,744 --> 00:02:27,281 line:-2
as well as HDR apps,
both games and professional,


55
00:02:27.314 --> 00:02:29.416 line:-1 align:center
available in the App Store.


56
00:02:29,783 --> 00:02:32,219 line:-1
EDR is an adaptive technology.


57
00:02:32,252 --> 00:02:35,589 line:-2
As we will discuss,
EDR not only maps HDR content


58
00:02:35,622 --> 00:02:38,625 line:-2
to displays of wildly
differing capabilities,


59
00:02:38,659 --> 00:02:40,494 line:-2
but also supports
an even wider range


60
00:02:40.527 --> 00:02:42.296 line:-1 align:center
of viewing conditions.


61
00:02:42.663 --> 00:02:44.932 line:-2 align:center
Have you ever noticed
displays look much different


62
00:02:44,965 --> 00:02:48,402 line:-2
in a bright environment
versus when viewed in the dark?


63
00:02:48.435 --> 00:02:51.805 line:-2 align:center
The bright, vibrant colors
you experience indoors


64
00:02:51.839 --> 00:02:55.008 line:-2 align:center
likely look dim and muted
with low dynamic range


65
00:02:55,042 --> 00:02:57,244 line:-1
when viewed outdoors.


66
00:02:57,277 --> 00:02:59,146 line:-1
The display didn't change.


67
00:02:59,179 --> 00:03:00,547 line:-1
At a given brightness setting,


68
00:03:00,581 --> 00:03:03,217 line:-2
it is always making
the same light.


69
00:03:03.250 --> 00:03:05.319 line:-1 align:center
is the environment that changed,


70
00:03:05.352 --> 00:03:07.554 line:-2 align:center
as well as your vision
that rapidly adapted


71
00:03:07.588 --> 00:03:09.656 line:-1 align:center
to the environment.


72
00:03:09,690 --> 00:03:10,791 line:-1
In a dark environment,


73
00:03:10,824 --> 00:03:13,660 line:-2
your vision adapts
to the displayed content,


74
00:03:13.694 --> 00:03:16.029 line:-1 align:center
the predominant source of light.


75
00:03:16,063 --> 00:03:18,165 line:-1
But in a bright environment,


76
00:03:18,198 --> 00:03:21,001 line:-2
the user's vision largely adapts
to the environment,


77
00:03:21,034 --> 00:03:22,836 line:-1
over the much dimmer display,


78
00:03:22.870 --> 00:03:25.539 line:-2 align:center
causing the content to look
dim and washed out,


79
00:03:25,572 --> 00:03:28,075 line:-2
crushing blacks
and shadow detail.


80
00:03:29.076 --> 00:03:30.477 line:-1 align:center
This is why EDR


81
00:03:30.511 --> 00:03:33.514 line:-2 align:center
and the underlying
ambient adaptation technologies


82
00:03:33,547 --> 00:03:35,983 line:-2
dynamically adapt
display parameters,


83
00:03:36.016 --> 00:03:39.019 line:-2 align:center
such as white point,
black point,


84
00:03:39.052 --> 00:03:41.855 line:-2 align:center
reference white brightness,
and dynamic range,


85
00:03:41,889 --> 00:03:44,258 line:-2
that we describe
as "EDR headroom,"


86
00:03:44,291 --> 00:03:47,561 line:-2
to map the display
to the user's adapted vision.


87
00:03:47,995 --> 00:03:51,465 line:-2
EDR's adaptation provides
a number of benefits.


88
00:03:51.498 --> 00:03:53.300 line:-1 align:center
Perhaps most surprisingly,


89
00:03:53,333 --> 00:03:57,471 line:-2
this results in EDR creating
a true HDR response,


90
00:03:57.504 --> 00:04:01.074 line:-2 align:center
even on conventional,
standard dynamic range displays.


91
00:04:02,075 --> 00:04:03,810 line:-2
That is,
when those displays are viewed


92
00:04:03.844 --> 00:04:05.679 line:-1 align:center
in dimmer environments


93
00:04:05,712 --> 00:04:09,216 line:-2
with correspondingly
dimmer brightness settings.


94
00:04:09.249 --> 00:04:11.485 line:-1 align:center
Similarly, EDR's dynamics


95
00:04:11,518 --> 00:04:14,755 line:-2
produce a situation-optimized
HDR capability


96
00:04:14,788 --> 00:04:17,124 line:-1
on bright HDR displays.


97
00:04:17.157 --> 00:04:19.660 line:-2 align:center
This allows HDR content
to look stunning


98
00:04:19,693 --> 00:04:22,796 line:-2
in HDR reference
dim environments,


99
00:04:22,829 --> 00:04:26,099 line:-2
while providing a reduced
but optimal dynamic range


100
00:04:26.133 --> 00:04:27.835 line:-1 align:center
in brighter environments,


101
00:04:27,868 --> 00:04:30,170 line:-2
all while
preserving shadow detail,


102
00:04:30.204 --> 00:04:33.040 line:-2 align:center
such as the patches
on this illustration.


103
00:04:33,073 --> 00:04:35,542 line:-2
EDR rendering is supported
on most devices


104
00:04:35,576 --> 00:04:37,010 line:-1
we've shipped for years now.


105
00:04:37,711 --> 00:04:41,381 line:-2
We described HDR capability
in terms of EDR headroom,


106
00:04:41.415 --> 00:04:42.916 line:-1 align:center
which is how many times brighter


107
00:04:42,950 --> 00:04:45,586 line:-2
than the conventional
maximum SDR white


108
00:04:45,619 --> 00:04:49,356 line:-2
the brightest EDR pixels
can be rendered to the display.


109
00:04:49.389 --> 00:04:52.292 line:-2 align:center
EDR headroom varies
based on display capability,


110
00:04:52,326 --> 00:04:53,894 line:-1
as well as other parameters,


111
00:04:53,927 --> 00:04:56,697 line:-2
including the current
brightness slider setting.


112
00:04:57.698 --> 00:04:59.633 line:-2 align:center
On conventional
backlit displays,


113
00:04:59,666 --> 00:05:02,369 line:-2
as found on most
recent Macs and iPads,


114
00:05:02,402 --> 00:05:06,507 line:-2
up to a very noticeable 2x SDR,
is available.


115
00:05:06.540 --> 00:05:08.775 line:-1 align:center
iPhones with XDR display


116
00:05:08.809 --> 00:05:13.447 line:-2 align:center
provide up to an exciting 8x
SDR EDR headroom.


117
00:05:13.480 --> 00:05:17.284 line:-2 align:center
The new iPad Pro's
Liquid Retina XDR display


118
00:05:17.317 --> 00:05:21.154 line:-1 align:center
has up to an incredible 16x SDR.


119
00:05:21,188 --> 00:05:23,490 line:-1
Roughly 5x SDR is provided


120
00:05:23,524 --> 00:05:26,894 line:-2
when driving typical external
HDR 10 displays


121
00:05:26.927 --> 00:05:30.464 line:-1 align:center
via Mac, iPad, and AppleTV.


122
00:05:30,497 --> 00:05:32,132 align:center
And the Pro Display XDR


123
00:05:32,165 --> 00:05:35,335 align:center
renders to a jaw-dropping
400x SDR


124
00:05:35,369 --> 00:05:37,304 align:center
in the default XDR preset,


125
00:05:37,337 --> 00:05:40,741 line:0
when brightness is set
to the minimum 4-nit value.


126
00:05:40.774 --> 00:05:43.010 line:-2 align:center
Not only
are HDR-capable displays


127
00:05:43,043 --> 00:05:45,812 line:-1
already in many users' hands,


128
00:05:45,846 --> 00:05:48,916 line:-2
but HDR content
is becoming mainstream.


129
00:05:48.949 --> 00:05:51.985 line:-2 align:center
In addition
to commercial HDR content,


130
00:05:52.019 --> 00:05:55.522 line:-2 align:center
users are adding HDR
still and video content,


131
00:05:55,556 --> 00:05:58,192 line:-2
captured on their own iPhones
and other devices,


132
00:05:58.225 --> 00:05:59.526 line:-1 align:center
to the ecosystem.


133
00:06:00.093 --> 00:06:02.229 line:-2 align:center
An awe-inspiring
list of applications


134
00:06:02,262 --> 00:06:04,298 line:-1
have already adopted EDR.


135
00:06:04.331 --> 00:06:06.800 line:-2 align:center
Top-tier games
supporting EDR include


136
00:06:07.367 --> 00:06:09.102 line:-1 align:center
"Baldur's Gate 3,"


137
00:06:09.136 --> 00:06:11.171 line:-1 align:center
"Divinity: Original Sin 2,"


138
00:06:11,205 --> 00:06:13,173 line:-1
and "Shadow of the Tomb Raider."


139
00:06:13.740 --> 00:06:16.176 line:-2 align:center
A growing number
of AppleTV services


140
00:06:16,210 --> 00:06:17,878 line:-1
provide HDR content,


141
00:06:17.911 --> 00:06:23.217 line:-2 align:center
including TV app,
Netflix, and YouTube.


142
00:06:23,250 --> 00:06:26,153 line:-2
Finally, an exciting
and growing list of Pro apps


143
00:06:26,186 --> 00:06:27,721 line:-1
have adopted EDR,


144
00:06:27.754 --> 00:06:28.589 line:-1 align:center
both upping the ante


145
00:06:29,323 --> 00:06:31,458 line:-2
and increasing
the amount of HDR content


146
00:06:31.491 --> 00:06:33.527 line:-1 align:center
developed on the platform.


147
00:06:33,560 --> 00:06:35,162 line:-1
Affinity Photo,


148
00:06:35,195 --> 00:06:36,797 line:-1
DaVinci Resolve,


149
00:06:36.830 --> 00:06:38.432 line:-1 align:center
Cinema 4D,


150
00:06:38,465 --> 00:06:40,000 line:0
Final Cut Pro,


151
00:06:40,033 --> 00:06:41,168 align:center
Nuke,


152
00:06:41,201 --> 00:06:42,569 align:center
and Pixelmator Pro


153
00:06:42,603 --> 00:06:44,238 line:0
are just some of the apps.


154
00:06:44.671 --> 00:06:47.140 line:-2 align:center
We chose to name
our technology "EDR"


155
00:06:47,174 --> 00:06:49,743 line:-2
in part to differentiate
it from "HDR,"


156
00:06:49,776 --> 00:06:50,611 line:-1
which tends to mean


157
00:06:50,644 --> 00:06:52,513 line:-2
different things
to different people.


158
00:06:53,180 --> 00:06:55,249 line:-2
When many think
of High Dynamic Range,


159
00:06:55.282 --> 00:06:57.484 line:-1 align:center
they imagine bright displays


160
00:06:57,518 --> 00:07:00,220 line:-2
capable of producing
deep blacks.


161
00:07:00,254 --> 00:07:02,222 line:-1
The production-minded may think


162
00:07:02,256 --> 00:07:06,660 line:-2
content formats,
perhaps HDR10 or Dolby Vision.


163
00:07:06.693 --> 00:07:09.029 line:-2 align:center
To the technical,
it brings transfer functions,


164
00:07:09,062 --> 00:07:12,032 line:-1
like PQ or HLG, to mind.


165
00:07:12,065 --> 00:07:14,268 line:0
And perhaps to the artistic,


166
00:07:14,301 --> 00:07:17,037 line:0
HDR can even suggest
the surrealistic,


167
00:07:17,070 --> 00:07:18,705 align:center
painterly tone map


168
00:07:18,739 --> 00:07:20,307 line:0
representing bright highlights,


169
00:07:20,340 --> 00:07:23,877 align:center
as well as dim shadow detail
as SDR.


170
00:07:23,911 --> 00:07:27,381 align:center
Consider this SDR tone map
of an RIT produced,


171
00:07:27,414 --> 00:07:31,385 align:center
ultra-High Dynamic Range
OpenEXR image.


172
00:07:31,418 --> 00:07:33,554 line:0
In the tone map,
the glowing light bulb


173
00:07:33,587 --> 00:07:36,123 line:0
and the shadow detail
are all present.


174
00:07:36,156 --> 00:07:38,125 line:0
However,
the dramatic dynamic range


175
00:07:38,158 --> 00:07:41,461 line:0
of the original
HDR image is lost.


176
00:07:41,495 --> 00:07:45,132 align:center
EDR is not a painterly
HDR-to-SDR conversion,


177
00:07:45,165 --> 00:07:48,168 line:0
preserving all details
while losing the intention,


178
00:07:48,202 --> 00:07:51,405 align:center
but rather, a true
High Dynamic Range rendering.


179
00:07:52,406 --> 00:07:54,107 line:0
The RIT team combined


180
00:07:54,141 --> 00:07:56,877 line:0
the 18 bracketed
Digital SLR exposures,


181
00:07:56,910 --> 00:07:58,078 align:center
seen here,


182
00:07:58,111 --> 00:08:00,080 line:0
to create their HDR image


183
00:08:00,113 --> 00:08:04,251 line:0
with its amazing
500,000:1 dynamic range.


184
00:08:04,284 --> 00:08:07,054 line:0
EDR fully represents this
in floating point,


185
00:08:07,087 --> 00:08:09,957 align:center
with the image's subject,
the Luxo lamp itself,


186
00:08:09,990 --> 00:08:13,293 line:0
as pixel values
under reference white's 1.0,


187
00:08:13,327 --> 00:08:14,928 align:center
and with brighter details,


188
00:08:14,962 --> 00:08:17,264 align:center
such as the emissive orb
of the lightbulb,


189
00:08:17,297 --> 00:08:20,033 line:0
represented as values
approaching 500.


190
00:08:20,067 --> 00:08:23,270 line:0
That's 500x brighter
than the lamp base.


191
00:08:23,303 --> 00:08:25,405 line:0
EDR's implementation
creates a mapping


192
00:08:25,439 --> 00:08:28,642 line:0
between the reference whites
of every element of the system.


193
00:08:28,675 --> 00:08:30,978 line:0
From the reference white
of the content


194
00:08:31,011 --> 00:08:32,679 line:0
to that of the display,


195
00:08:32,713 --> 00:08:35,816 align:center
through to that
of the user's adapted vision.


196
00:08:35,849 --> 00:08:37,150 line:0
This mapping is fundamental


197
00:08:37,184 --> 00:08:39,786 align:center
to providing
many of the benefits of EDR,


198
00:08:39,820 --> 00:08:43,090 align:center
including allowing
HDR and SDR content


199
00:08:43,123 --> 00:08:45,692 line:0
to co-exist side-by-side,


200
00:08:45,726 --> 00:08:48,729 line:0
optimally exposing
an HDR display's dynamic range


201
00:08:48,762 --> 00:08:50,831 line:0
across environments,


202
00:08:50,864 --> 00:08:53,300 line:0
even allowing
conventional SDR displays


203
00:08:53,333 --> 00:08:54,968 line:0
to render true HDR,


204
00:08:55,002 --> 00:08:57,371 align:center
while always allowing
EDR to render


205
00:08:57,404 --> 00:09:00,607 line:0
as great a dynamic range
as possible.


206
00:09:00,641 --> 00:09:02,910 align:center
For instance,
on a Pro Display XDR,


207
00:09:02,943 --> 00:09:06,880 align:center
with brightness slider
set to the maximum 500 nits,


208
00:09:06,914 --> 00:09:08,348 align:center
EDR values up to 3.2


209
00:09:08,382 --> 00:09:10,951 line:0
will be rendered
without clipping.


210
00:09:10,984 --> 00:09:13,287 align:center
Brighter elements,
such as the lamp head,


211
00:09:13,320 --> 00:09:15,956 align:center
with correspondingly
greater EDR values,


212
00:09:15,989 --> 00:09:19,693 align:center
will clamp to the display's
1,600-nit peak.


213
00:09:19,726 --> 00:09:21,795 align:center
Lowering the display's
brightness setting


214
00:09:21,828 --> 00:09:23,730 align:center
toward its 4-nit minimum,


215
00:09:23,764 --> 00:09:26,567 align:center
occurring when in
a dim to dark environment,


216
00:09:26,600 --> 00:09:29,236 align:center
either automatically
via auto brightness,


217
00:09:29,269 --> 00:09:31,905 line:0
or manually
using the brightness slider,


218
00:09:31,939 --> 00:09:35,075 line:0
EDR values up to 400
become renderable,


219
00:09:35,108 --> 00:09:37,377 line:0
thereby delivering
most of the dynamic range


220
00:09:37,411 --> 00:09:39,146 align:center
of this exceptional image.


221
00:09:40,047 --> 00:09:41,748 line:-1
The image's brightest elements,


222
00:09:41,782 --> 00:09:43,283 line:-2
while still rendered
to the display's


223
00:09:43.317 --> 00:09:45.586 line:-1 align:center
1,600-nit peak brightness,


224
00:09:45,619 --> 00:09:48,989 line:-2
now clearly define
the lightbulb's contour.


225
00:09:49,022 --> 00:09:51,558 line:-2
Similarly,
other details are revealed,


226
00:09:51.592 --> 00:09:53.827 line:-2 align:center
such as the colors
of the brightly illuminated


227
00:09:53,861 --> 00:09:55,495 line:-1
color checker.


228
00:09:55,529 --> 00:09:58,198 line:-2
With the user's vision
now adapting to the image's


229
00:09:58.232 --> 00:09:59.933 line:-1 align:center
4-nit reference white,


230
00:09:59.967 --> 00:10:03.537 line:-2 align:center
the image's brightest elements
are now amazingly rendered


231
00:10:03,570 --> 00:10:06,073 line:-2
400x brighter
than the lamp base.


232
00:10:07,074 --> 00:10:09,142 line:-2
Let's explore
the implications of EDR's


233
00:10:09.176 --> 00:10:11.245 line:-2 align:center
floating point
HDR representation


234
00:10:11.278 --> 00:10:12.813 line:-1 align:center
and rendering pipeline.


235
00:10:14,014 --> 00:10:15,482 line:-1
Being floating point,


236
00:10:15,516 --> 00:10:18,986 line:-2
EDR can represent every color
that humans can perceive,


237
00:10:19,019 --> 00:10:21,255 line:-2
as represented
by this completely filled


238
00:10:21,288 --> 00:10:23,624 line:-1
chromaticity diagram.


239
00:10:23,657 --> 00:10:26,426 line:-2
Similarly,
EDR can represent brightness


240
00:10:26.460 --> 00:10:29.963 line:-2 align:center
that would be damaging
to eyesight if fully rendered.


241
00:10:29,997 --> 00:10:33,734 line:-2
As such, EDR's representation
is future-proof.


242
00:10:34,134 --> 00:10:35,235 line:-1
As mentioned,


243
00:10:35,269 --> 00:10:38,272 line:-2
EDR is not only
a representation,


244
00:10:38.305 --> 00:10:41.008 line:-2 align:center
but is also
an HDR rendering pipeline.


245
00:10:41,675 --> 00:10:42,809 line:-1
EDR is an extension


246
00:10:42,843 --> 00:10:44,545 line:-2
to the color management
technologies


247
00:10:44,578 --> 00:10:46,146 line:-1
that Apple pioneered,


248
00:10:46,180 --> 00:10:48,949 line:-2
and has been shipping
for a very long time.


249
00:10:48.982 --> 00:10:52.286 line:-2 align:center
For instance, GPU accelerated
color managed video


250
00:10:52.319 --> 00:10:55.856 line:-2 align:center
first shipped way back
in MacOS 10.4 Tiger.


251
00:10:55.889 --> 00:10:57.958 line:-2 align:center
Conceptually similar
to allowing media


252
00:10:57.991 --> 00:11:01.895 line:-2 align:center
of normal and wide color gamut
to be displayed side by side,


253
00:11:01.929 --> 00:11:04.865 line:-1 align:center
EDR allows HDR and SDR assets


254
00:11:04.898 --> 00:11:07.901 line:-2 align:center
to share the screen
in a harmonious manner,


255
00:11:07,935 --> 00:11:09,603 line:-2
as well as to be
appropriately rendered


256
00:11:09.636 --> 00:11:12.606 line:-2 align:center
to displays
of differing capabilities.


257
00:11:12.639 --> 00:11:13.774 line:-1 align:center
Among other things,


258
00:11:13,807 --> 00:11:16,310 line:-2
this means that developers
may continue to use


259
00:11:16,343 --> 00:11:18,345 line:-1
existing SDR assets,


260
00:11:18.378 --> 00:11:21.548 line:-2 align:center
and selectively add
EDR support as needed.


261
00:11:22.049 --> 00:11:24.918 line:-2 align:center
Let's explore visually
EDR's representation


262
00:11:24.952 --> 00:11:26.753 line:-1 align:center
of HDR pixel values.


263
00:11:27.788 --> 00:11:31.024 line:-2 align:center
EDR is a floating
point representation.


264
00:11:31,058 --> 00:11:34,027 line:0
EDR 0.0 represents black,


265
00:11:34,061 --> 00:11:36,597 align:center
1.0 represents SDR max,


266
00:11:36,630 --> 00:11:39,967 align:center
also known as "reference white"
or "UI white,"


267
00:11:40,000 --> 00:11:44,204 align:center
thus EDR 0.0 to 1.0
represent the SDR range,


268
00:11:44,238 --> 00:11:46,106 line:0
the same as always.


269
00:11:46,139 --> 00:11:48,509 align:center
These values represent
the subject of an image,


270
00:11:48,542 --> 00:11:50,911 align:center
and will never be clipped
when rendered.


271
00:11:50,944 --> 00:11:53,146 align:center
EDR values beyond 1.0


272
00:11:53,180 --> 00:11:56,350 line:0
represent values
exceeding SDR brightness,


273
00:11:56,383 --> 00:11:59,386 line:0
such as highlights
and emissive surfaces.


274
00:11:59,419 --> 00:12:02,289 align:center
These values might get
extraordinarily bright,


275
00:12:02,322 --> 00:12:03,924 align:center
and while representable,


276
00:12:03,957 --> 00:12:06,360 line:0
are subject to clipping
when rendered.


277
00:12:06.393 --> 00:12:08.562 line:-2 align:center
EDR is used
to drive the display,


278
00:12:08.595 --> 00:12:09.730 line:-1 align:center
no matter if the display


279
00:12:09,763 --> 00:12:12,332 line:-2
has a conventional
pure power response


280
00:12:12,366 --> 00:12:14,601 line:-2
or a newer
HDR transfer function.


281
00:12:15,002 --> 00:12:17,070 line:0
Let's consider Pro Display XDR


282
00:12:17,104 --> 00:12:21,041 align:center
in the default XDR preset,
which is PQ-based.


283
00:12:21,074 --> 00:12:23,777 align:center
EDR 0.0 drives the display
to zero nits,


284
00:12:23,810 --> 00:12:26,413 align:center
via the zero nit PQ code.


285
00:12:26,446 --> 00:12:29,049 align:center
EDR 1.0,
called "reference white,"


286
00:12:29,082 --> 00:12:31,418 align:center
is scaled
by the display brightness slider


287
00:12:31,451 --> 00:12:34,454 line:0
or auto brightness,
the same as always.


288
00:12:34,488 --> 00:12:36,557 line:0
The XDR preset has the typical,


289
00:12:36,590 --> 00:12:40,527 align:center
about 4 to 500 nits reference
white brightness range.


290
00:12:40,561 --> 00:12:44,932 align:center
Let's consider the maximum 500
nits setting for this example.


291
00:12:44,965 --> 00:12:46,900 line:0
Regardless
of the brightness setting,


292
00:12:46,934 --> 00:12:50,671 line:0
the peak white is always
1,600 nits in this preset.


293
00:12:50,704 --> 00:12:52,072 line:0
Thus, EDRmax,


294
00:12:52,105 --> 00:12:56,009 align:center
the brightest, renderable
EDR value, is 3.2,


295
00:12:56,043 --> 00:13:00,180 align:center
as can be calculated by dividing
the 1,600-nit peak white


296
00:13:00,214 --> 00:13:02,716 line:0
by the 500-nit reference white.


297
00:13:02,749 --> 00:13:06,987 line:0
Correspondingly, we say
there is 3.2x SDR headroom,


298
00:13:07,020 --> 00:13:09,790 align:center
as the brightest value
renderable to the display


299
00:13:09,823 --> 00:13:14,094 align:center
is 3.2x brighter
than the reference white.


300
00:13:14,127 --> 00:13:16,930 line:0
In summary, on Pro Display XDR,


301
00:13:16,964 --> 00:13:19,366 align:center
using the default XDR preset,


302
00:13:19,399 --> 00:13:22,002 line:0
with display brightness,
also known as "reference white,"


303
00:13:22,035 --> 00:13:23,704 line:0
at 500 nits,


304
00:13:23,737 --> 00:13:25,839 align:center
EDR values 0.0 to 3.2


305
00:13:25,873 --> 00:13:30,110 align:center
are rendered to the display
as 0.0 to 1,600 nits,


306
00:13:30,143 --> 00:13:34,615 align:center
with EDR 1.0
displayed as 500 nits.


307
00:13:34,648 --> 00:13:38,485 line:0
Finally, EDR values
above EDRmax's 3.2


308
00:13:38,519 --> 00:13:41,522 align:center
are clipped to peak white,
1,600 nits.


309
00:13:41,555 --> 00:13:44,057 line:0
Amazingly,
as display brightness is reduced


310
00:13:44,091 --> 00:13:46,159 line:0
toward the minimum 4 nits,


311
00:13:46,193 --> 00:13:49,530 line:0
EDR values up to 400
become renderable,


312
00:13:49,563 --> 00:13:52,165 line:0
thus exposing
incredibly bright details


313
00:13:52,199 --> 00:13:54,568 line:0
at their true dynamic range.


314
00:13:55,068 --> 00:13:57,971 line:-2
Now that we have an overview
of how EDR works,


315
00:13:58.005 --> 00:14:01.108 line:-2 align:center
we'll explore adding EDR
to your application.


316
00:14:01.141 --> 00:14:05.412 line:-2 align:center
There are four steps to add EDR
support to most applications.


317
00:14:05,445 --> 00:14:07,414 line:-2
These steps
are all straightforward,


318
00:14:07,447 --> 00:14:09,449 line:-2
however,
their effects can be subtle


319
00:14:09.483 --> 00:14:12.386 line:-2 align:center
and you likely won't
reliably have EDR results


320
00:14:12,419 --> 00:14:14,154 line:-1
until you apply all of them.


321
00:14:15,189 --> 00:14:17,224 line:-1
First, you have to request EDR


322
00:14:17.257 --> 00:14:20.160 line:-2 align:center
by adding an attribute
to the appropriate context,


323
00:14:20.194 --> 00:14:22.696 line:-1 align:center
layer, or object.


324
00:14:22.729 --> 00:14:24.464 line:-1 align:center
Second, you have to associate


325
00:14:24.498 --> 00:14:28.602 line:-2 align:center
an extended-range colorspace
with your buffer, layer, or app.


326
00:14:28.635 --> 00:14:32.272 line:-2 align:center
Color Management will clip
EDR values beyond 1.0,


327
00:14:32.306 --> 00:14:35.242 line:-2 align:center
if an extended-range
colorspace is not specified.


328
00:14:35,275 --> 00:14:37,110 line:-2
You should know
that color management


329
00:14:37.144 --> 00:14:38.412 line:-1 align:center
might only engage


330
00:14:38.445 --> 00:14:42.082 line:-2 align:center
when the source and destination
colorspaces don't match,


331
00:14:42.115 --> 00:14:43.717 line:-2 align:center
so this clip
might be intermittent


332
00:14:43,750 --> 00:14:44,918 line:-1
or content dependent.


333
00:14:45.919 --> 00:14:48.956 line:-2 align:center
Third, you need to select
a pixel buffer format


334
00:14:48,989 --> 00:14:52,125 line:-2
that can represent
values above 1.0.


335
00:14:52.159 --> 00:14:54.862 line:-2 align:center
This is usually
some form of floating point.


336
00:14:54.895 --> 00:14:57.731 line:-2 align:center
Finally, your application
must generate pixels


337
00:14:57,764 --> 00:15:00,334 line:-2
that exceed the SDR 0.0 to 1
range,


338
00:15:00,367 --> 00:15:03,770 line:-2
and thus have sparkly
elements to show off.


339
00:15:03.804 --> 00:15:05.806 line:-2 align:center
Many developers
have existing apps


340
00:15:05.839 --> 00:15:08.675 line:-2 align:center
to which they might
want to add EDR support.


341
00:15:09.443 --> 00:15:12.179 line:-2 align:center
Perhaps the easiest way
to get started with EDR


342
00:15:12.212 --> 00:15:14.581 line:-2 align:center
is to simply substitute
HDR video or still image content


343
00:15:15,916 --> 00:15:19,319 line:-2
in place of existing
SDR content.


344
00:15:19,353 --> 00:15:22,189 line:-2
Then follow the four steps
we just outlined.


345
00:15:22.222 --> 00:15:25.392 line:-2 align:center
Some applications, for instance,
the email app shown,


346
00:15:25,425 --> 00:15:27,561 line:-1
might selectively enable EDR


347
00:15:27.594 --> 00:15:30.998 line:-2 align:center
only when HDR content
is encountered.


348
00:15:31.031 --> 00:15:33.333 line:-2 align:center
AVFoundation's
AVPlayer interface


349
00:15:33.367 --> 00:15:36.403 line:-2 align:center
supports a growing number
of HDR video formats


350
00:15:36,436 --> 00:15:38,238 line:0
such as Dolby Vision,


351
00:15:38,272 --> 00:15:41,175 line:0
HDR 10, and HLG.


352
00:15:41,208 --> 00:15:44,578 line:0
AVPlayer will automatically
render these formats as EDR


353
00:15:44,611 --> 00:15:45,812 align:center
when possible


354
00:15:45,846 --> 00:15:49,683 line:0
on all platforms,
except for watchOS.


355
00:15:49.716 --> 00:15:51.952 line:-2 align:center
Existing
AVPlayer-based applications


356
00:15:51,985 --> 00:15:54,021 line:-2
don't require
any changes to render


357
00:15:54,054 --> 00:15:57,124 line:-2
supported HDR video formats
via EDR.


358
00:15:57,457 --> 00:16:01,562 line:-2
Let's look at an EDR enabled
AVPlayer code example.


359
00:16:01,595 --> 00:16:05,566 line:-2
As always, one simply first
creates an AVPlayer instance,


360
00:16:05,599 --> 00:16:08,302 line:-1
using AVPlayer's playerWithURL.


361
00:16:08.335 --> 00:16:12.506 line:-2 align:center
However, in our example,
we specify HDR video content.


362
00:16:12,539 --> 00:16:18,378 line:-2
Next, add the player to a layer,
using playerLayerWithPlayer.


363
00:16:18.412 --> 00:16:21.315 line:-2 align:center
Finally, point the controller
to the player


364
00:16:21,348 --> 00:16:23,917 line:-2
and request the player
to begin playing.


365
00:16:23.951 --> 00:16:26.253 line:-2 align:center
AVFoundation
will automatically perform


366
00:16:26.286 --> 00:16:27.421 line:-1 align:center
what is required


367
00:16:27,454 --> 00:16:30,290 line:-1
to render the HDR media as EDR,


368
00:16:30.324 --> 00:16:34.695 line:-2 align:center
and will enable and disable EDR
based on the content type.


369
00:16:34.728 --> 00:16:37.898 line:-2 align:center
HDR video playback
is pretty straightforward.


370
00:16:37.931 --> 00:16:40.868 line:-2 align:center
Next, let's consider
HDR still image rendering.


371
00:16:41.702 --> 00:16:45.806 line:-2 align:center
ImageIO has extensive support
for HDR image formats,


372
00:16:45.839 --> 00:16:49.610 line:-2 align:center
and conveniently, will return
the decoded pixels as EDR


373
00:16:49.643 --> 00:16:51.545 line:-1 align:center
in floating point buffers.


374
00:16:51.578 --> 00:16:54.781 line:-2 align:center
While ImageIO is available
on all platforms,


375
00:16:54.815 --> 00:16:56.416 line:-1 align:center
presently, the decoded results


376
00:16:56.450 --> 00:16:59.720 line:-2 align:center
may only be rendered as EDR
on macOS.


377
00:16:59,753 --> 00:17:01,355 line:-2
We will demonstrate
how to incorporate


378
00:17:01.388 --> 00:17:04.391 line:-2 align:center
ImageIO-based assets into an
application


379
00:17:04,424 --> 00:17:07,528 line:-2
in the upcoming
CAMetalLayer example.


380
00:17:07.995 --> 00:17:11.064 line:-2 align:center
Now, let's explore
the native EDR API.


381
00:17:11.765 --> 00:17:14.601 line:-2 align:center
As I mentioned,
the native EDR API


382
00:17:14,635 --> 00:17:18,238 line:-2
was created for applications
like Games and Pro apps,


383
00:17:18,272 --> 00:17:21,141 line:-2
where the developer may
want to render custom content


384
00:17:21,175 --> 00:17:25,179 line:-2
and have more control over
how HDR media is rendered.


385
00:17:25.212 --> 00:17:29.883 line:-2 align:center
Presently, this API is available
on macOS via CAMetalLayer,


386
00:17:29,917 --> 00:17:32,252 line:-1
and NSOpenGLView.


387
00:17:32,286 --> 00:17:35,589 line:-2
Let's look at an example
using CAMetalLayer,


388
00:17:35,622 --> 00:17:38,425 line:-2
the preferred
native EDR framework.


389
00:17:38,458 --> 00:17:40,561 line:-2
To begin, we are going
to look at the first


390
00:17:40,594 --> 00:17:43,397 line:-1
three of the four-step process,


391
00:17:43,430 --> 00:17:45,465 line:-1
opting in to EDR,


392
00:17:45.499 --> 00:17:48.035 line:-2 align:center
setting an extended-range
colorspace,


393
00:17:48.068 --> 00:17:52.406 line:-2 align:center
and selecting
an FP16 pixel buffer format.


394
00:17:52,439 --> 00:17:54,875 line:-1
First, opt-in to EDR


395
00:17:54.908 --> 00:17:56.443 line:-1 align:center
by setting the metalLayer's


396
00:17:56.476 --> 00:17:59.413 line:-2 align:center
"wantsExtended
DynamicRangeContent" attribute


397
00:17:59.446 --> 00:18:01.582 line:-1 align:center
to "yes."


398
00:18:01.615 --> 00:18:04.351 line:-2 align:center
Second,
set the metalLayer's colorspace


399
00:18:04.384 --> 00:18:06.453 line:-1 align:center
to an extended-range colorspace,


400
00:18:06,486 --> 00:18:09,690 line:-1
such as ExtendedLinearDisplayP3.


401
00:18:09,723 --> 00:18:12,526 line:-2
Third, set the metalLayer's
pixel format


402
00:18:12,559 --> 00:18:17,497 line:-2
to a floating point format,
such as RGBA16Float.


403
00:18:17.531 --> 00:18:20.434 line:-2 align:center
Next, we will examine
the fourth EDR opt-in step,


404
00:18:20,467 --> 00:18:22,970 line:-1
actually generating EDR pixels.


405
00:18:23.003 --> 00:18:25.339 line:-2 align:center
In this case,
we will use ImageIO


406
00:18:25,372 --> 00:18:27,941 line:-2
to import HDR
still image content,


407
00:18:27.975 --> 00:18:30.978 line:-2 align:center
and render the result
as an EDR texture.


408
00:18:31.011 --> 00:18:32.212 line:-1 align:center
It is a little involved,


409
00:18:32.246 --> 00:18:35.449 line:-2 align:center
so we will walk though it
step by step.


410
00:18:35.482 --> 00:18:39.052 line:-2 align:center
We create the CGImage
from HDR content,


411
00:18:39.086 --> 00:18:42.856 line:-2 align:center
draw the decoded image
into a floating point bitmap,


412
00:18:42.890 --> 00:18:45.192 line:-1 align:center
create a floating point texture,


413
00:18:45.225 --> 00:18:48.195 line:-1 align:center
load the EDR bitmap to texture,


414
00:18:48,228 --> 00:18:50,297 line:0
and finally, render the texture


415
00:18:50,330 --> 00:18:53,700 line:0
to the EDR enabled
metal pipeline.


416
00:18:53,734 --> 00:18:56,537 align:center
First, the CGImage is created
from the source specified


417
00:18:56,570 --> 00:18:59,239 line:0
in HDRimageURL,


418
00:18:59,273 --> 00:19:03,143 align:center
using CGImageSourceCreateWithURL


419
00:19:03,177 --> 00:19:08,282 align:center
and
CGImageSourceCreateImageAtIndex.


420
00:19:08,315 --> 00:19:10,517 line:0
Next, create the CGContext


421
00:19:10,551 --> 00:19:13,253 align:center
with CGBitmapContextCreate,


422
00:19:13,287 --> 00:19:14,588 align:center
using the same colorspace


423
00:19:14,621 --> 00:19:17,124 align:center
we set earlier
on the metalLayer,


424
00:19:17,157 --> 00:19:18,792 align:center
and draw the EDR image


425
00:19:18,825 --> 00:19:23,597 align:center
into the floating point context
using CGContextDrawImage.


426
00:19:25,332 --> 00:19:27,601 align:center
Now, we create
a floating point texture


427
00:19:27,634 --> 00:19:30,337 line:0
of type RGBA16Float,


428
00:19:30,370 --> 00:19:33,841 line:0
using newTextureWithDescriptor.


429
00:19:33,874 --> 00:19:38,779 align:center
Load the EDR image data,
using CGBitmapContextGetData


430
00:19:38,812 --> 00:19:42,850 line:0
into the EDR texture,
using replaceRegion.


431
00:19:42,883 --> 00:19:45,018 line:0
Finally, the developer
is ready to render


432
00:19:45,052 --> 00:19:46,220 line:0
the EDR texture


433
00:19:46,253 --> 00:19:48,755 line:0
into their EDR enabled
metal pipeline


434
00:19:48,789 --> 00:19:51,558 align:center
and enjoy the dynamic results.


435
00:19:51,592 --> 00:19:54,895 line:-2
For those still supporting
OpenGL-based applications,


436
00:19:54,928 --> 00:19:58,765 line:-2
we will explore enabling EDR
on NSOpenGLView


437
00:19:58,799 --> 00:20:02,469 line:-2
using similar steps to those
we have already demonstrated.


438
00:20:02.503 --> 00:20:05.572 line:-2 align:center
Adoption of EDR might also
provide the opportunity


439
00:20:05,606 --> 00:20:07,908 line:-2
to fully embrace
color management.


440
00:20:07.941 --> 00:20:10.911 line:-2 align:center
However, we will not cover that
in this talk.


441
00:20:10.944 --> 00:20:13.413 line:-2 align:center
We will explore
the following steps:


442
00:20:13.447 --> 00:20:15.148 line:-1 align:center
Opting-in to EDR,


443
00:20:15,182 --> 00:20:18,385 line:-2
selecting a floating point
pixel buffer format,


444
00:20:18.418 --> 00:20:22.556 line:-2 align:center
and drawing EDR and content
to the NSOpenGLView.


445
00:20:22.589 --> 00:20:26.093 line:-2 align:center
Setting an extended-range
colorspace is not required,


446
00:20:26,126 --> 00:20:30,264 line:-2
as NSOpenGLView is not
automatically color managed.


447
00:20:30.297 --> 00:20:34.501 line:-2 align:center
First, opt-in to EDR
by setting the NSOpenGLView's


448
00:20:34,535 --> 00:20:38,539 line:-2
"wantsExtendedDynamicRange
OpenGLSurface" attribute


449
00:20:38,572 --> 00:20:40,207 line:-1
to "yes."


450
00:20:40.240 --> 00:20:42.609 line:-2 align:center
Second,
set the pixel buffer format


451
00:20:42,643 --> 00:20:46,647 align:center
to NSOpenGLPFAColorFloat


452
00:20:46,680 --> 00:20:49,483 line:0
with ColorSize, 64.


453
00:20:49,516 --> 00:20:53,086 line:0
Finally, draw EDR values
into the OpenGLView,


454
00:20:53,120 --> 00:20:56,957 align:center
run your modified application,
and enjoy the results.


455
00:20:56.990 --> 00:21:00.527 line:-2 align:center
Now that we've discussed
enabling basic EDR support


456
00:21:00.561 --> 00:21:02.563 line:-1 align:center
in existing applications,


457
00:21:02,596 --> 00:21:04,031 line:-1
let's dive a little deeper


458
00:21:04,064 --> 00:21:06,500 line:-2
and explore
a number of best practices


459
00:21:06.533 --> 00:21:10.204 line:-2 align:center
to get the most from
your EDR enabled application.


460
00:21:10.237 --> 00:21:12.539 line:-1 align:center
Recall EDR opt-in step four


461
00:21:12,573 --> 00:21:15,609 line:-2
is to set an extended-range
colorspace.


462
00:21:15.642 --> 00:21:17.411 line:-1 align:center
And in our example so far,


463
00:21:17.444 --> 00:21:22.015 line:-2 align:center
we explicitly set an appropriate
extended-range colorspace.


464
00:21:22,049 --> 00:21:26,086 line:-2
However, many apps don't set
their color space explicitly,


465
00:21:26.119 --> 00:21:28.088 line:-2 align:center
and instead use the default
colorspace


466
00:21:28.121 --> 00:21:30.591 line:-1 align:center
provided by the framework.


467
00:21:30,624 --> 00:21:32,759 line:-2
This often
corresponds to the display


468
00:21:32,793 --> 00:21:34,428 line:-1
or composition space,


469
00:21:34,461 --> 00:21:36,196 line:-1
which are not extended range,


470
00:21:36.230 --> 00:21:39.967 line:-2 align:center
thus breaking EDR
unless something is done.


471
00:21:40.000 --> 00:21:42.503 line:-2 align:center
Let's explore an example
of how to promote


472
00:21:42.536 --> 00:21:45.205 line:-2 align:center
existing colorspace
to extended range.


473
00:21:45.906 --> 00:21:48.475 line:-2 align:center
First,
get the existing colorspace,


474
00:21:48.509 --> 00:21:51.044 line:-2 align:center
in this case,
from your view's window.


475
00:21:51.078 --> 00:21:54.314 line:-2 align:center
Second, promote that colorspace
to extended-range


476
00:21:54.348 --> 00:21:57.784 line:-2 align:center
using
CGcolorspaceCreateExtended.


477
00:21:57,818 --> 00:21:59,887 align:center
Finally,
assign the newly generated


478
00:21:59,920 --> 00:22:01,989 align:center
extended-range colorspace


479
00:22:02,022 --> 00:22:05,158 line:0
to the window, buffer, or layer,
as appropriate,


480
00:22:05,192 --> 00:22:08,362 line:0
enabling apps that don't
explicitly set their colorspace


481
00:22:08,395 --> 00:22:10,597 line:0
to use EDR.


482
00:22:10,631 --> 00:22:12,599 line:-2
Next,
we will explore best practices


483
00:22:12,633 --> 00:22:15,002 line:-1
for generating EDR content.


484
00:22:15.035 --> 00:22:16.436 line:-1 align:center
So far, we've mentioned


485
00:22:16,470 --> 00:22:19,673 line:-2
EDR content
has values that exceed 1.0,


486
00:22:19,706 --> 00:22:22,409 line:-2
but not how to actually
synthesize this content,


487
00:22:22.442 --> 00:22:25.179 line:-1 align:center
or convert it from HDR sources.


488
00:22:25,212 --> 00:22:27,614 line:-2
Please be careful
generating EDR content,


489
00:22:27,648 --> 00:22:29,249 line:-1
for it is possible to experience


490
00:22:29,283 --> 00:22:31,552 line:-2
the dreaded
"glowing bunny syndrome,"


491
00:22:31.585 --> 00:22:35.022 line:-2 align:center
where content may have an eerie,
iridescent glow


492
00:22:35,055 --> 00:22:38,825 line:-2
that makes properly authored
content look dim in comparison.


493
00:22:38.859 --> 00:22:40.527 line:-1 align:center
As has been emphasized,


494
00:22:40.561 --> 00:22:42.596 line:-1 align:center
pixels above EDR 1.0,


495
00:22:42,629 --> 00:22:44,631 line:-2
should only encode
specular highlights


496
00:22:44.665 --> 00:22:46.567 line:-1 align:center
and emissive surfaces.


497
00:22:46,600 --> 00:22:48,101 line:-2
This means
that is it inappropriate


498
00:22:48,135 --> 00:22:52,573 line:-2
to take SDR content and stretch
it to be HDR.


499
00:22:52,606 --> 00:22:56,009 line:-2
SDR content is compatible
with EDR as-is


500
00:22:56,043 --> 00:22:58,645 line:-1
in its native 0.0 to 1.0 range.


501
00:22:58.679 --> 00:23:00.848 line:-2 align:center
This aligns
the SDR reference white


502
00:23:00,881 --> 00:23:03,317 line:-1
to that of HDR contents.


503
00:23:03.350 --> 00:23:06.453 line:-2 align:center
When HDR content is authored
to be too bright,


504
00:23:06,486 --> 00:23:09,156 line:-2
with what should be
dimmer elements or even shadows


505
00:23:09,189 --> 00:23:11,458 line:-2
exceeding EDR 1.0,


506
00:23:11,491 --> 00:23:12,759 line:-1
it will appear unnatural


507
00:23:12,793 --> 00:23:15,095 line:-2
compared
to well-authored content.


508
00:23:15.128 --> 00:23:17.331 line:-2 align:center
The user's vision
may begin to adapt


509
00:23:17.364 --> 00:23:19.299 line:-1 align:center
to this overly bright content,


510
00:23:19,333 --> 00:23:24,004 line:-2
making other content appear
dim in comparison.


511
00:23:24.037 --> 00:23:25.405 line:-1 align:center
Please consider this example,


512
00:23:25,439 --> 00:23:28,308 line:-2
of a girl holding
an 18% gray card,


513
00:23:28,342 --> 00:23:31,879 line:-2
as used by photographers
and animators to set exposure.


514
00:23:31.912 --> 00:23:34.314 line:-2 align:center
The girl is the subject
of the photograph,


515
00:23:34.348 --> 00:23:37.618 line:-2 align:center
and consequently,
the photographer or animator


516
00:23:37,651 --> 00:23:38,852 line:-1
will set the exposure


517
00:23:38,886 --> 00:23:42,556 line:-2
so that she is at or below
reference white,


518
00:23:42,589 --> 00:23:45,025 line:-1
and thus will not be clipped.


519
00:23:45,058 --> 00:23:46,660 line:-1
Most user interface elements


520
00:23:46,693 --> 00:23:49,796 line:-2
shouldn't exceed EDR 1.0
as well.


521
00:23:49,830 --> 00:23:51,665 line:-2
However,
there may be exceptions,


522
00:23:51.698 --> 00:23:54.268 line:-1 align:center
including EDR color pickers,


523
00:23:54.301 --> 00:23:56.470 line:-1 align:center
or temporarily scaled UI,


524
00:23:56,503 --> 00:23:59,840 line:-2
brightly illuminated
to capture attention.


525
00:23:59,873 --> 00:24:03,644 line:-2
Emissive surfaces,
such as the sun or clouds,


526
00:24:03,677 --> 00:24:05,279 line:-1
as well as specular highlights,


527
00:24:05,312 --> 00:24:08,215 line:-2
such as the sun reflecting
off a shiny surface,


528
00:24:08.248 --> 00:24:11.151 line:-2 align:center
are potentially far brighter
than reference white,


529
00:24:11,185 --> 00:24:15,756 line:-2
and consequently,
are expected to exceed EDR 1.0.


530
00:24:15,789 --> 00:24:17,124 line:0
A scene's brightest elements


531
00:24:17,157 --> 00:24:20,060 line:0
are already clipped
by SDR encoding.


532
00:24:20,093 --> 00:24:23,764 line:0
Consequently, SDR content
is correctly represented


533
00:24:23,797 --> 00:24:26,667 align:center
as EDR 0.0 to 1.0.


534
00:24:26,700 --> 00:24:29,503 line:-2
Sometimes a workflow
will require HDR formats


535
00:24:29.536 --> 00:24:32.105 line:-2 align:center
to be converted
to EDR explicitly.


536
00:24:32,139 --> 00:24:36,777 line:-2
As mentioned, ImageIO decodes
HDR content to EDR,


537
00:24:36,810 --> 00:24:39,279 line:-1
requiring no further conversion.


538
00:24:39,313 --> 00:24:40,647 line:-1
For instance,


539
00:24:40,681 --> 00:24:44,618 line:-2
HLG is decoded
to the 0.0 to 12.0 EDR range,


540
00:24:44,651 --> 00:24:48,655 line:-2
with EDR 1.0
representing reference white.


541
00:24:48.689 --> 00:24:51.825 line:-2 align:center
ImageIO decodes
other HDR still image formats


542
00:24:51,859 --> 00:24:54,261 line:-1
to their own particular ranges,


543
00:24:54.294 --> 00:24:56.830 line:-2 align:center
with EDR 1.0
always corresponding


544
00:24:56,864 --> 00:24:59,399 line:-1
to the source's reference white.


545
00:24:59.433 --> 00:25:02.769 line:-2 align:center
AVFoundation does not presently
decode HDR formats,


546
00:25:02,803 --> 00:25:05,539 line:-1
such as HDR10, to EDR.


547
00:25:05,572 --> 00:25:07,574 line:-2
Consequently,
these need to be adapted


548
00:25:07,608 --> 00:25:09,776 line:-1
for use with EDR rendering.


549
00:25:09,810 --> 00:25:11,512 line:-2
This conversion
is straightforward


550
00:25:11,545 --> 00:25:13,614 line:-1
and involves two steps.


551
00:25:13,647 --> 00:25:15,415 line:-2
First,
converting to linear light


552
00:25:15.449 --> 00:25:18.018 line:-2 align:center
by applying
the inverse transfer function.


553
00:25:18.051 --> 00:25:21.154 line:-2 align:center
And second, dividing by
the medium's reference white.


554
00:25:21,188 --> 00:25:24,091 line:-2
For example,
100 nits for PQ content,


555
00:25:24.124 --> 00:25:27.861 line:-2 align:center
so that reference white
will be mapped to EDR 1.0,


556
00:25:27,895 --> 00:25:30,464 line:-2
and the maximum PQ
10,000 nit value


557
00:25:30,497 --> 00:25:33,166 line:-1
will map to EDR 100.


558
00:25:33,200 --> 00:25:36,003 line:-2
Consider this photograph
that, like many photos,


559
00:25:36,036 --> 00:25:37,571 line:-1
both digital and film,


560
00:25:37.604 --> 00:25:39.773 line:-1 align:center
has the sky clipped to white.


561
00:25:39.806 --> 00:25:41.708 line:-1 align:center
While EDR will never clip values


562
00:25:41.742 --> 00:25:44.378 line:-1 align:center
up to EDR 1.0, reference white,


563
00:25:44,411 --> 00:25:46,647 line:-2
which represent
the subject of the image,


564
00:25:46.680 --> 00:25:49.183 line:-2 align:center
EDR will clip values
above reference white


565
00:25:49.216 --> 00:25:51.652 line:-2 align:center
that are beyond
the current EDRmax,


566
00:25:51,685 --> 00:25:53,353 line:-2
and thus are not able
to be rendered


567
00:25:53,387 --> 00:25:56,657 line:-2
on the current system display
and display settings.


568
00:25:56.690 --> 00:25:58.325 line:-2 align:center
These values
above reference white


569
00:25:58,358 --> 00:26:00,460 line:-2
are highlights
or emissive surfaces,


570
00:26:00.494 --> 00:26:03.163 line:-2 align:center
such as the clouds,
sky, and sun,


571
00:26:03,197 --> 00:26:04,965 line:-1
that we can't see in this image,


572
00:26:04.998 --> 00:26:07.801 line:-2 align:center
and, as such, are usually
okay to be clipped.


573
00:26:07,835 --> 00:26:10,070 line:-2
However,
clipping of bright details


574
00:26:10,103 --> 00:26:12,239 line:-1
is not always acceptable.


575
00:26:12,272 --> 00:26:13,173 line:-1
For instance,


576
00:26:13,207 --> 00:26:15,442 line:-2
consider this image
of a sun-lit airplane


577
00:26:15,475 --> 00:26:17,544 line:-1
flying high above the clouds.


578
00:26:17,578 --> 00:26:20,247 line:-1
Notice the blue "HDR11" livery?


579
00:26:20,280 --> 00:26:22,182 line:-2
Brightly illuminated, the
number,


580
00:26:22.216 --> 00:26:24.852 line:-2 align:center
as well as the fuselage
it's painted onto,


581
00:26:24,885 --> 00:26:28,322 line:-2
might both be rendered
at greater than reference white,


582
00:26:28,355 --> 00:26:30,591 line:-2
and hence,
potentially be clipped


583
00:26:30.624 --> 00:26:32.759 line:-2 align:center
depending on
the display capabilities


584
00:26:32,793 --> 00:26:34,962 line:-1
and the current EDRmax.


585
00:26:34,995 --> 00:26:38,832 line:-2
If this number was a crucial
plot element in a film or game,


586
00:26:38,866 --> 00:26:40,968 line:-2
then dynamic tone mapping
may be employed


587
00:26:41.001 --> 00:26:43.470 line:-1 align:center
to avoid or manage clipping,


588
00:26:43,504 --> 00:26:45,739 line:-1
and keep the number visible.


589
00:26:45,772 --> 00:26:48,375 line:-2
Let's explore
how sophisticated applications


590
00:26:48.408 --> 00:26:51.411 line:-2 align:center
may stay abreast
of the current EDRmax value,


591
00:26:51.445 --> 00:26:54.214 line:-2 align:center
and accordingly,
adapt what they render.


592
00:26:54.248 --> 00:26:56.183 line:-2 align:center
Applications
may want to subscribe


593
00:26:56,216 --> 00:26:58,118 line:-1
to NSScreen notifications,


594
00:26:58,151 --> 00:27:01,421 line:-2
perhaps to adjust the brightness
of objects in the scene,


595
00:27:01,455 --> 00:27:03,490 line:-1
change the scene's exposure,


596
00:27:03.524 --> 00:27:05.225 line:-1 align:center
apply a bloom effect,


597
00:27:05.259 --> 00:27:09.830 line:-2 align:center
or even soft-clip to ensure
critical details are not lost.


598
00:27:09,863 --> 00:27:12,833 line:-2
Presently, there is only one
dynamic EDR value


599
00:27:12,866 --> 00:27:15,802 line:-2
accessible
from the NSScreen interface.


600
00:27:15.836 --> 00:27:20.407 line:-2 align:center
It is maximumExtendedDynamic
RangeColorComponentValue,


601
00:27:20.440 --> 00:27:22.476 line:-2 align:center
and represents
the current maximum


602
00:27:22,509 --> 00:27:25,546 line:-1
renderable linear EDR value.


603
00:27:25,579 --> 00:27:26,780 line:-1
As we have stated,


604
00:27:26.813 --> 00:27:29.249 line:-1 align:center
EDR values greater than EDRmax


605
00:27:29.283 --> 00:27:31.185 line:-1 align:center
will clip to EDRmax.


606
00:27:31,218 --> 00:27:33,654 line:-2
And EDRmax
may dynamically change,


607
00:27:33.687 --> 00:27:36.156 line:-2 align:center
since it is dependent
on characteristics,


608
00:27:36,190 --> 00:27:38,759 line:-2
such as display brightness
or True Tone,


609
00:27:38.792 --> 00:27:41.328 line:-2 align:center
that may themselves
change over time.


610
00:27:41,361 --> 00:27:42,996 line:-1
The two other EDR values


611
00:27:43.030 --> 00:27:45.699 line:-2 align:center
accessible from NSScreen are
static,


612
00:27:45,732 --> 00:27:48,468 line:-2
meaning they won't
change over time.


613
00:27:48.502 --> 00:27:50.771 line:-2 align:center
In contrast
to the preceding value,


614
00:27:50.804 --> 00:27:54.875 line:-2 align:center
maximumPotentialExtendedDynamic
RangeColorComponentValue


615
00:27:54,908 --> 00:27:56,543 line:-1
returns just that,


616
00:27:56,577 --> 00:27:59,346 line:-2
the maximum EDR
linear pixel value


617
00:27:59,379 --> 00:28:00,447 line:-1
that might be renderable


618
00:28:00.480 --> 00:28:02.649 line:-2 align:center
without clipping
on this display.


619
00:28:02.683 --> 00:28:04.351 line:-2 align:center
That is,
if the display brightness


620
00:28:04.384 --> 00:28:07.087 line:-2 align:center
and other features
were set appropriately.


621
00:28:07,120 --> 00:28:10,290 line:-2
Max potential EDR may be used to
guide decisions,


622
00:28:10.324 --> 00:28:14.361 line:-2 align:center
such as if SDR or HDR versions
of content should be used,


623
00:28:14.394 --> 00:28:16.363 line:-2 align:center
or even deciding
if it is worthwhile


624
00:28:16,396 --> 00:28:18,665 line:-1
to enable EDR at all.


625
00:28:18,699 --> 00:28:21,268 line:-2
Please remember
that potential is in the name.


626
00:28:21,301 --> 00:28:23,537 line:-2
The current maximum
renderable value,


627
00:28:23.570 --> 00:28:26.974 line:-2 align:center
EDRmax,
might be below this value.


628
00:28:27.007 --> 00:28:30.310 line:-2 align:center
1.0 is returned for displays,
or display presets,


629
00:28:30,344 --> 00:28:32,246 line:-1
not supporting EDR.


630
00:28:32.279 --> 00:28:33.780 line:-1 align:center
The final static value,


631
00:28:33,814 --> 00:28:38,385 line:-2
maximumReferenceExtendedDynamic
RangeColorComponentValue,


632
00:28:38.418 --> 00:28:41.722 line:-2 align:center
is mainly of interest
to Pro application developers


633
00:28:41.755 --> 00:28:44.124 line:-2 align:center
concerned about achieving
the highest fidelity


634
00:28:44.157 --> 00:28:45.792 line:-1 align:center
to a reference standard.


635
00:28:45,826 --> 00:28:48,095 line:-2
It provides
the maximum EDR value


636
00:28:48,128 --> 00:28:51,198 line:-2
that is guaranteed to be
rendered without distortion,


637
00:28:51,231 --> 00:28:52,900 line:-2
such as clipping
or tone mapping,


638
00:28:52,933 --> 00:28:55,002 line:-1
on a given display.


639
00:28:55,035 --> 00:28:57,437 line:-2
0.0 is returned on displays
that do not support


640
00:28:57.471 --> 00:28:59.439 line:-1 align:center
reference rendering.


641
00:28:59,473 --> 00:29:01,909 line:-1
Now, let's explore example code


642
00:29:01.942 --> 00:29:05.379 line:-2 align:center
that reads EDR values
via NSScreen.


643
00:29:05.412 --> 00:29:07.981 line:-2 align:center
Here, we read
the two static EDR values,


644
00:29:08,015 --> 00:29:10,617 line:-1
maxPotential and maxReference.


645
00:29:10.651 --> 00:29:13.220 line:-2 align:center
EDR values may be
different across displays,


646
00:29:13.253 --> 00:29:14.488 line:-1 align:center
so be sure to make the call


647
00:29:14.521 --> 00:29:17.057 line:-2 align:center
on the screen
your app is actually on.


648
00:29:17.090 --> 00:29:19.493 line:-2 align:center
In this example,
we are using the NSScreen


649
00:29:19,526 --> 00:29:21,862 line:-1
associated with your window.


650
00:29:21,895 --> 00:29:25,232 line:-2
The application may keep abreast
of dynamic EDR changes


651
00:29:25,265 --> 00:29:26,200 line:-1
by subscribing to


652
00:29:26,233 --> 00:29:29,970 line:-2
"NSWindowDidChangeScreen"
notification,


653
00:29:30,003 --> 00:29:32,172 line:0
then query
the current EDR parameters


654
00:29:32,206 --> 00:29:34,575 align:center
upon receiving
the screen changed event,


655
00:29:34,608 --> 00:29:36,476 align:center
and potentially
altering what is rendered


656
00:29:36,510 --> 00:29:39,446 line:0
based on knowledge
of the current EDR headroom.


657
00:29:39,479 --> 00:29:41,815 line:-2
To complete our discussion
of tone mapping,


658
00:29:41,849 --> 00:29:45,085 line:-2
we will briefly explore
the CAMetalLayer tone mapper.


659
00:29:45,118 --> 00:29:46,820 line:-1
This is of interest for Pro apps


660
00:29:46,854 --> 00:29:49,022 line:-2
that author and render
HDR video,


661
00:29:49.056 --> 00:29:51.625 line:-1 align:center
such as HLG and HDR10,


662
00:29:51.658 --> 00:29:55.696 line:-2 align:center
to project-based HDR
mastering parameters.


663
00:29:55.729 --> 00:29:59.132 line:-2 align:center
System apps, as well as apps
employing AVPlayer,


664
00:29:59.166 --> 00:30:00.667 line:-1 align:center
as we've already described,


665
00:30:00.701 --> 00:30:02.636 line:-1 align:center
use the CAMetalLayer tone mapper


666
00:30:02.669 --> 00:30:04.571 line:-1 align:center
to provide media-specific,


667
00:30:04.605 --> 00:30:06.840 line:-2 align:center
optical-to-optical
transfer function,


668
00:30:06.874 --> 00:30:08.842 line:-1 align:center
and soft clip for HDR values


669
00:30:08.876 --> 00:30:11.945 line:-2 align:center
that would otherwise
not be renderable.


670
00:30:11,979 --> 00:30:13,814 line:0
The CAMetalLayer tone mapper


671
00:30:13,847 --> 00:30:17,618 align:center
is enabled via
the "CAEDRMetadata" attribute


672
00:30:17,651 --> 00:30:20,320 line:0
and is available on macOS.


673
00:30:20.354 --> 00:30:21.788 line:-1 align:center
This example demonstrates


674
00:30:21,822 --> 00:30:23,957 line:-2
how to enable
the system tone mapper


675
00:30:23.991 --> 00:30:26.393 line:-2 align:center
by setting
the "EDRMetadata" attribute


676
00:30:26,426 --> 00:30:28,228 line:-1
on your app's CAMetalLayer.


677
00:30:28,629 --> 00:30:32,099 line:-2
A number of EDRMetadata
constructors are available.


678
00:30:32,132 --> 00:30:34,501 line:-2
They are specific
to the HDR video standard,


679
00:30:34,535 --> 00:30:37,571 line:-2
as well as the mastering
information provided.


680
00:30:37.604 --> 00:30:40.507 line:-2 align:center
Here we see
the HLGMetadata constructor,


681
00:30:40.541 --> 00:30:42.709 line:-1 align:center
which takes no parameters.


682
00:30:42.743 --> 00:30:46.446 line:-2 align:center
Next, we demonstrate
one of the HDR10 constructors.


683
00:30:46.480 --> 00:30:48.682 line:-1 align:center
This one takes three parameters:


684
00:30:48,715 --> 00:30:51,618 line:-2
Explicit minimum
and maximumLuminance,


685
00:30:51,652 --> 00:30:52,953 line:-1
both in nits,


686
00:30:52,986 --> 00:30:56,390 line:-2
as well as opticalOutputScale,
which is often set


687
00:30:56,423 --> 00:30:59,526 line:-2
to HDR10's
100-nit reference white.


688
00:30:59,560 --> 00:31:00,527 align:center
Once constructed,


689
00:31:00,561 --> 00:31:04,198 line:0
set the resulting object on your
application's CAMetalLayer,


690
00:31:06,333 --> 00:31:08,502 align:center
to be processed
by the system tone mapper


691
00:31:08,535 --> 00:31:10,771 line:-1
based on the provided metadata.


692
00:31:11.238 --> 00:31:13.774 line:-2 align:center
Closely related
to adaptive tone mapping,


693
00:31:13.807 --> 00:31:15.242 line:-1 align:center
an app may want to draw


694
00:31:15.275 --> 00:31:18.278 line:-2 align:center
with the brightest white
currently renderable.


695
00:31:18,312 --> 00:31:21,081 line:-2
We already understand
how to get the current EDRmax


696
00:31:21,114 --> 00:31:22,516 line:-1
from NSScreen,


697
00:31:22.549 --> 00:31:25.352 line:-2 align:center
however, EDR headroom
is a linear value


698
00:31:25.385 --> 00:31:28.722 line:-2 align:center
and pixels are most often
nonlinearly encoded.


699
00:31:28,755 --> 00:31:30,057 line:-1
In this final example,


700
00:31:30.090 --> 00:31:31.625 line:-1 align:center
we will convert EDRmax


701
00:31:31,658 --> 00:31:35,028 line:-2
into the app's potentially
nonlinear colorspace.


702
00:31:35.062 --> 00:31:37.664 line:-2 align:center
First, we use
CGColorSpaceCreateWithName


703
00:31:37.698 --> 00:31:39.700 line:-1 align:center
to create the linear EDRmax


704
00:31:39,733 --> 00:31:41,668 line:-1
white pixel we want to render.


705
00:31:41,702 --> 00:31:44,238 line:0
And then convert
the linear EDRmax pixel


706
00:31:44,271 --> 00:31:46,607 line:0
to the application's colorspace,
using


707
00:31:46,640 --> 00:31:50,744 align:center
CGColorCreateCopy
ByMatchingToColorSpace.


708
00:31:50,777 --> 00:31:52,646 line:0
The resulting color
may then be used


709
00:31:52,679 --> 00:31:55,616 line:0
in any EDR enabled application.


710
00:31:55.649 --> 00:31:58.118 line:-2 align:center
This leaves us
with one last topic to discuss,


711
00:31:58,151 --> 00:32:01,522 line:-2
the power and performance
implications of EDR.


712
00:32:01,555 --> 00:32:03,924 line:-1
Similar to all CG rendering,


713
00:32:03,957 --> 00:32:07,194 line:-2
evaluating EDR's impact
on power and performance


714
00:32:07,227 --> 00:32:08,295 line:-1
can be complicated,


715
00:32:08.328 --> 00:32:11.298 line:-2 align:center
and often depends on the
specific hardware architecture


716
00:32:11,331 --> 00:32:15,269 line:-2
and display technology
used on a given device.


717
00:32:15,302 --> 00:32:17,371 line:-2
While we won't go into details
in this talk,


718
00:32:17,404 --> 00:32:20,240 line:-2
there are some general points
to consider, such as,


719
00:32:20.274 --> 00:32:23.911 line:-2 align:center
producing brighter pixels
often consumes more power,


720
00:32:23,944 --> 00:32:27,047 line:-2
floating point buffers
used with EDR may be larger,


721
00:32:27,080 --> 00:32:28,615 line:-1
and thus consume more bandwidth


722
00:32:28,649 --> 00:32:29,816 line:-1
than the fixed point buffers


723
00:32:29,850 --> 00:32:31,818 line:-1
that might otherwise be used.


724
00:32:31,852 --> 00:32:34,788 line:-2
This, in turn, correlates
to more power consumed.


725
00:32:34.821 --> 00:32:38.258 line:-2 align:center
Even enabling
CAEDRMetadata-based tone mapping


726
00:32:38.292 --> 00:32:40.794 line:-2 align:center
involves
an extra processing pass.


727
00:32:40,827 --> 00:32:44,131 line:-2
This, in turn, increases
latency and bandwidth.


728
00:32:44,164 --> 00:32:46,900 line:-1
Simply, EDR, like many features,


729
00:32:46,934 --> 00:32:51,205 line:-2
isn't free and, as such,
it should be used judiciously.


730
00:32:51.238 --> 00:32:53.774 line:-2 align:center
The best practice
is to enable EDR


731
00:32:53.807 --> 00:32:55.843 line:-1 align:center
when there is both HDR content


732
00:32:55,876 --> 00:32:58,645 line:-2
and potential EDR headroom
available.


733
00:32:58.679 --> 00:33:01.882 line:-2 align:center
Disable EDR
when this is not the case.


734
00:33:01.915 --> 00:33:06.119 line:-2 align:center
Similarly, choose HDR
or SDR versions of content


735
00:33:06.153 --> 00:33:10.257 line:-2 align:center
to open or stream based on
if the EDR potential headroom,


736
00:33:10,290 --> 00:33:12,492 line:-2
or even the current
EDRmax headroom,


737
00:33:12.526 --> 00:33:15.562 line:-2 align:center
is significantly
greater than 1.0.


738
00:33:15,596 --> 00:33:17,097 line:-1
Or, more simply,


739
00:33:17,130 --> 00:33:18,265 line:-1
only enable EDR


740
00:33:18,298 --> 00:33:20,834 line:-2
when the user
will see the difference.


741
00:33:20.868 --> 00:33:24.471 line:-2 align:center
We've covered a lot about EDR
in a short period of time.


742
00:33:24.505 --> 00:33:27.875 line:-2 align:center
I hope you are as excited
by EDR as I am,


743
00:33:27,908 --> 00:33:31,245 line:-2
and are eager to integrate it
into your applications.


744
00:33:31,278 --> 00:33:32,579 line:0
To summarize,


745
00:33:32,613 --> 00:33:34,648 line:0
EDR is used on macOS,


746
00:33:34,681 --> 00:33:38,318 align:center
iOS, iPadOS, and tvOS devices.


747
00:33:38,352 --> 00:33:40,721 line:0
EDR is an extension
to the color management


748
00:33:40,754 --> 00:33:44,057 line:0
and SDR representations
you are already using.


749
00:33:44,091 --> 00:33:47,194 line:0
EDR is easy for applications
to opt-in to.


750
00:33:47,227 --> 00:33:50,564 line:0
EDR is compatible
with industry HDR standards,


751
00:33:50,597 --> 00:33:53,567 align:center
and provides
a non-modal adaptive experience


752
00:33:53,600 --> 00:33:56,003 line:0
across devices and environments.


753
00:33:56,036 --> 00:33:58,438 align:center
Please check out the following
talks and resources


754
00:33:58,472 --> 00:34:01,842 align:center
for more information
on HDR video playback,


755
00:34:01,875 --> 00:34:03,610 align:center
Apple Pro Display XDR,


756
00:34:03,644 --> 00:34:06,346 align:center
and metal rendering of EDR.


757
00:34:06.380 --> 00:34:07.247 line:-1 align:center
Thank you!


758
00:34:07.281 --> 00:34:09.816 line:-2 align:center
Hope you enjoy the rest
of your WWDC.


759
00:34:09,850 --> 00:34:12,052 line:-1
[music]

