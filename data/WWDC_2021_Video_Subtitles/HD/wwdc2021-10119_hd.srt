2
00:00:00.300 --> 00:00:01.802 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:01,802 --> 00:00:05,572 line:-1
♪ Bass music playing ♪


4
00:00:05.572 --> 00:00:07.074 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,074 --> 00:00:09,509 align:right size:2% position:90%
♪


6
00:00:09,509 --> 00:00:12,412 line:-1
Nathan Tannar: Hello,
and welcome to WWDC!


7
00:00:12.412 --> 00:00:14.047 line:-1 position:50%
My name is Nathan,
and I'm an engineer


8
00:00:14.047 --> 00:00:16.250 line:-1 position:50%
on the Accessibility team.


9
00:00:16,250 --> 00:00:18,418 line:-1
Today we'll be going
beyond the basics to learn


10
00:00:18.418 --> 00:00:22.289 line:-1 position:50%
how to deliver exceptional
and accessible SwiftUI apps.


11
00:00:22,289 --> 00:00:24,157 line:-1
This year marks
a huge leap forward


12
00:00:24,157 --> 00:00:27,227 line:-1
for accessibility in SwiftUI.


13
00:00:27,227 --> 00:00:30,964 line:-1
At Apple, accessibility
is one of our core values.


14
00:00:30.964 --> 00:00:33.734 line:-1 position:50%
Our assistive technologies
across all our platforms


15
00:00:33.734 --> 00:00:35.903 line:-1 position:50%
make sure that anyone
can use your app


16
00:00:35.903 --> 00:00:39.106 line:-1 position:50%
regardless of any physical,
visual, audible,


17
00:00:39.106 --> 00:00:40.474 line:-1 position:50%
or motor impairment.


18
00:00:40.474 --> 00:00:43.277 line:-1 position:50%
My team and I work to make sure
most of your app is accessible


19
00:00:43.277 --> 00:00:44.444 line:-1 position:50%
by default,


20
00:00:44,444 --> 00:00:47,981 line:-1
but there is always more you can
do to enrich the experience.


21
00:00:47,981 --> 00:00:50,884 line:-1
Today I'll show you the new
tools and APIs for SwiftUI


22
00:00:50,884 --> 00:00:53,854 line:-1
that make enriching
this experience easy.


23
00:00:53,854 --> 00:00:56,890 line:-1
Let's begin with the tooling
improvements in Xcode.


24
00:00:56.890 --> 00:00:59.993 line:-1 position:50%
SwiftUI Previews have changed
how many of us develop apps.


25
00:00:59.993 --> 00:01:02.229 line:-1 position:50%
It dramatically improves
your ability to iterate


26
00:01:02.229 --> 00:01:05.299 line:-1 position:50%
upon your views
across multiple environments,


27
00:01:05.299 --> 00:01:09.069 line:-1 position:50%
all without the need
of running your app.


28
00:01:09,069 --> 00:01:11,438 line:-1
To make the most important
accessibility modifiers


29
00:01:11.438 --> 00:01:12.639 line:-1 position:50%
just a click away,


30
00:01:12.639 --> 00:01:15.976 line:-1 position:50%
we've added a curated list
of accessibility editors.


31
00:01:15,976 --> 00:01:17,210 line:-1
I hope this encourages everyone


32
00:01:17.210 --> 00:01:19.846 line:-1 position:50%
to always make
their views accessible.


33
00:01:19.846 --> 00:01:21.181 line:-1 position:50%
But there's more.


34
00:01:21,181 --> 00:01:23,984 line:-1
Since accessibility modifiers
don't have visual changes


35
00:01:23,984 --> 00:01:25,085 line:-1
in the previews,


36
00:01:25,085 --> 00:01:26,787 line:-1
a new tool was developed
that allows you


37
00:01:26,787 --> 00:01:31,325 line:-1
to inspect the accessibility of
your view without leaving Xcode.


38
00:01:31.325 --> 00:01:32.960 line:-1 position:50%
Let's switch
from the editor's panel


39
00:01:32.960 --> 00:01:36.296 line:-1 position:50%
to the new accessibility panel.


40
00:01:36,296 --> 00:01:38,899 line:-1
Shipping in Xcode 13,
SwiftUI Previews


41
00:01:38.899 --> 00:01:42.202 line:-1 position:50%
will now also feature
an Accessibility Preview.


42
00:01:42,202 --> 00:01:44,571 line:-1
With it, you can inspect
the accessibility elements


43
00:01:44.571 --> 00:01:46.740 line:-1 position:50%
for a preview in real time.


44
00:01:46.740 --> 00:01:48.775 line:-1 position:50%
And this is a game changer.


45
00:01:48,775 --> 00:01:51,812 line:-1
Accessibility Preview will help
you make accessible apps


46
00:01:51.812 --> 00:01:53.981 line:-1 position:50%
even if you don't have
a deep understanding


47
00:01:53,981 --> 00:01:56,483 line:-1
of each assistive technology.


48
00:01:56.483 --> 00:01:58.952 line:-1 position:50%
Let's take a closer look to see
how changes are reflected


49
00:01:58.952 --> 00:02:01.822 line:-1 position:50%
in the Accessibility Preview.


50
00:02:01.822 --> 00:02:04.791 line:-1 position:50%
This is a simplified version
of the view we just saw.


51
00:02:04,791 --> 00:02:07,427 line:-1
After running the preview,
I can select the VStack


52
00:02:07,427 --> 00:02:09,229 line:-1
and the Accessibility Preview
will update


53
00:02:09,229 --> 00:02:12,532 line:-1
to display the elements
in their sorted order.


54
00:02:12.532 --> 00:02:13.734 line:-1 position:50%
Notice that each element


55
00:02:13,734 --> 00:02:16,236 line:-1
will always display
its basic properties --


56
00:02:16.236 --> 00:02:20.073 line:-1 position:50%
such as a label and traits.


57
00:02:20,073 --> 00:02:22,843 line:-1
For example, the Text view will
create an accessibility element


58
00:02:22,843 --> 00:02:25,312 line:-1
with the string as its label.


59
00:02:25,312 --> 00:02:28,515 line:-1
It also gains
the .isStaticText trait.


60
00:02:28,515 --> 00:02:31,852 line:-1
The preview will update for any
accessibility changes we make,


61
00:02:31.852 --> 00:02:35.789 line:-1 position:50%
such as adding
the .isHeader trait.


62
00:02:35.789 --> 00:02:37.090 line:-1 position:50%
You will also be able to see


63
00:02:37.090 --> 00:02:39.092 line:-1 position:50%
some of the automatic
accessibility that takes place


64
00:02:39.092 --> 00:02:43.864 line:-1 position:50%
behind the scenes, such as
automatic SF Symbol labels.


65
00:02:43,864 --> 00:02:47,300 line:-1
For example, the
checkmark.seal.fill symbol


66
00:02:47,300 --> 00:02:49,936 line:-1
is labeled "Verified"
by default.


67
00:02:49.936 --> 00:02:52.406 line:-1 position:50%
If you're relying on a symbol's
default label, it's important


68
00:02:52,406 --> 00:02:55,342 line:-1
to check that it accurately
describes your interface.


69
00:02:55,342 --> 00:02:57,310 line:-1
We'll continue to use
the Accessibility Preview


70
00:02:57.310 --> 00:02:59.379 line:-1 position:50%
as we step through
five importance areas


71
00:02:59,379 --> 00:03:01,481 line:-1
that'll help you deliver
an exceptional experience


72
00:03:01,481 --> 00:03:03,683 line:-1
to all of your app's users.


73
00:03:03.683 --> 00:03:05.152 line:-1 position:50%
We'll start by examining
the best way


74
00:03:05,152 --> 00:03:08,388 line:-1
to make custom
controls accessible.


75
00:03:08.388 --> 00:03:12.793 line:-1 position:50%
Next, we'll discuss how to make
a view accessible with children.


76
00:03:12,793 --> 00:03:14,461 line:-1
I'll highlight
how to audit your app


77
00:03:14,461 --> 00:03:16,196 line:-1
for common navigation problems


78
00:03:16,196 --> 00:03:19,599 line:-1
and how the Accessibility
Preview can assist with this.


79
00:03:19,599 --> 00:03:20,600 line:-1
Then I'll show you


80
00:03:20.600 --> 00:03:22.636 line:-1 position:50%
how to supercharge
your app's navigation


81
00:03:22.636 --> 00:03:25.005 line:-1 position:50%
with VoiceOver rotors.


82
00:03:25.005 --> 00:03:27.407 line:-1 position:50%
And finally, we'll look at focus


83
00:03:27,407 --> 00:03:31,144 line:-1
and how it relates
to assistive technologies.


84
00:03:31.144 --> 00:03:33.346 line:-1 position:50%
I've been working to prototype
a new finance app


85
00:03:33.346 --> 00:03:35.282 line:-1 position:50%
I call Wallet Pal.


86
00:03:35,282 --> 00:03:36,650 line:0
It's still in the early stages,


87
00:03:36,650 --> 00:03:39,719 line:0
but so far, I'm pretty happy
with the initial design.


88
00:03:39,719 --> 00:03:43,824 position:50%
I was pleased to hear that early
beta testers are also loving it.


89
00:03:43,824 --> 00:03:46,159 line:-1
Now that I've polished the UI,
I should spend some time


90
00:03:46.159 --> 00:03:49.096 line:-1 position:50%
to polish
the accessibility interface.


91
00:03:49,096 --> 00:03:50,163 line:-1
The accessibility interface


92
00:03:50,163 --> 00:03:51,898 line:-1
compliments
the visual experience


93
00:03:51,898 --> 00:03:54,534 line:-1
to make sure that it’s usable
by everyone.


94
00:03:54,534 --> 00:03:57,270 line:-1
I've asked some VoiceOver
users to help test Wallet Pal


95
00:03:57,270 --> 00:03:59,172 line:-1
and I've heard that the app
is hard to navigate


96
00:03:59.172 --> 00:04:02.342 line:-1 position:50%
and not fully accessible.


97
00:04:02.342 --> 00:04:04.478 line:-1 position:50%
If parts are not accessible
to VoiceOver,


98
00:04:04,478 --> 00:04:05,946 line:-1
then they are also
not accessible


99
00:04:05.946 --> 00:04:08.515 line:-1 position:50%
to other assistive technologies.


100
00:04:08.515 --> 00:04:10.717 line:-1 position:50%
It's important that anyone
be able to use Wallet Pal,


101
00:04:10,717 --> 00:04:11,818 line:-1
so let's investigate


102
00:04:11,818 --> 00:04:14,020 line:-1
to see where we can improve
the experience.


103
00:04:14,020 --> 00:04:15,422 line:-1
We'll begin with reports
of users


104
00:04:15,422 --> 00:04:17,524 line:-1
not being able to edit
their budgets,


105
00:04:17,524 --> 00:04:20,594 line:-1
a critical feature
in Wallet Pal.


106
00:04:20.594 --> 00:04:22.496 line:-1 position:50%
This is the Budget Planner view


107
00:04:22.496 --> 00:04:25.265 line:-1 position:50%
which allows users to edit
their food, entertainment,


108
00:04:25,265 --> 00:04:27,300 line:-1
and savings budgets.


109
00:04:27,300 --> 00:04:28,969 line:-1
To fit the design of Wallet Pal,


110
00:04:28.969 --> 00:04:32.772 line:-1 position:50%
I ended up needing
to create custom sliders.


111
00:04:32.772 --> 00:04:34.975 line:-1 position:50%
I accomplished this
by creating a budget slider


112
00:04:34.975 --> 00:04:39.112 line:-1 position:50%
out of shapes and used
a drag gesture for interaction.


113
00:04:39.112 --> 00:04:40.914 line:-1 position:50%
Shapes in SwiftUI make it easy


114
00:04:40,914 --> 00:04:43,650 line:-1
to create stunning
and unique views,


115
00:04:43,650 --> 00:04:46,853 line:-1
but they are not accessible
by default,


116
00:04:46,853 --> 00:04:50,056 line:-1
and so neither
is my budget slider.


117
00:04:50.056 --> 00:04:54.995 line:-1 position:50%
This must be why some users are
not able to edit their budgets.


118
00:04:54,995 --> 00:04:56,696 line:-1
We can confirm
it's not accessible


119
00:04:56,696 --> 00:05:01,234 line:-1
by running a SwiftUI preview
and selecting the SliderShape.


120
00:05:01,234 --> 00:05:04,671 line:-1
The Accessibility Preview shows
that there are no elements,


121
00:05:04,671 --> 00:05:07,574 line:-1
so this control
is not accessible.


122
00:05:07.574 --> 00:05:08.375 line:-1 position:50%
Ideally,


123
00:05:08,375 --> 00:05:10,744 line:-1
we should have a single
labeled accessibility element


124
00:05:10,744 --> 00:05:14,648 line:-1
with a value
that can be changed.


125
00:05:14,648 --> 00:05:18,451 line:-1
In contrast, standard controls
are accessible by default,


126
00:05:18.451 --> 00:05:20.587 line:-1 position:50%
meaning little to no
extra effort is required


127
00:05:20,587 --> 00:05:23,890 line:-1
to provide a great experience.


128
00:05:23.890 --> 00:05:27.227 line:-1 position:50%
SwiftUI uses the view type and
its initialization parameters


129
00:05:27.227 --> 00:05:30.597 line:-1 position:50%
to automatically derive the
accessibility element's label,


130
00:05:30.597 --> 00:05:34.100 line:-1 position:50%
value, traits, and actions.


131
00:05:34,100 --> 00:05:35,969 line:-1
So what's the best way to make


132
00:05:35,969 --> 00:05:38,572 line:-1
our custom budget slider
accessible?


133
00:05:38,572 --> 00:05:41,241 line:-1
Since the standard slider
is accessible by default,


134
00:05:41.241 --> 00:05:43.777 line:-1 position:50%
my team and I thought
it would be great to have an API


135
00:05:43,777 --> 00:05:45,946 line:-1
that allows the accessibility
of one view


136
00:05:45,946 --> 00:05:48,315 line:-1
to be represented by another.


137
00:05:48,315 --> 00:05:49,983 line:-1
This is what led us
to us to create


138
00:05:49,983 --> 00:05:51,985 line:-1
accessibilityRepresentation(representation:).


139
00:05:51.985 --> 00:05:54.788 line:-1 position:50%
It's an API that allows
the accessibility of one view


140
00:05:54.788 --> 00:05:57.123 line:-1 position:50%
to be defined by another.


141
00:05:57.123 --> 00:05:58.625 line:-1 position:50%
Since I want this
to be perceived


142
00:05:58,625 --> 00:06:01,361 line:-1
by assistive technologies
as a slider,


143
00:06:01.361 --> 00:06:05.632 line:-1 position:50%
that's what I'll use for the
accessibility representation.


144
00:06:05.632 --> 00:06:07.234 line:-1 position:50%
With
accessibilityRepresentation(representation:),


145
00:06:07,234 --> 00:06:08,501 line:-1
we're now well on the way


146
00:06:08.501 --> 00:06:11.738 line:-1 position:50%
to making this
budget slider accessible.


147
00:06:11,738 --> 00:06:13,640 line:-1
The only change needed
to improve the experience


148
00:06:13,640 --> 00:06:18,878 line:-1
of the slider is to describe
the value in dollars.


149
00:06:18.878 --> 00:06:20.413 line:-1 position:50%
And great, just like that,


150
00:06:20,413 --> 00:06:23,617 line:-1
now our budget slider
is perfectly accessible.


151
00:06:23,617 --> 00:06:24,651 line:-1
On macOS,


152
00:06:24.651 --> 00:06:27.754 line:-1 position:50%
the type of control will also
be spoken to VoiceOver users.


153
00:06:27,754 --> 00:06:29,522 line:-1
So by using the slider view


154
00:06:29.522 --> 00:06:31.658 line:-1 position:50%
in our budget slider's
representation,


155
00:06:31,658 --> 00:06:34,027 line:-1
it will be announced
as a slider.


156
00:06:34,027 --> 00:06:36,396 line:-1
It's recommended to use
accessibilityRepresentation(representation:)


157
00:06:36.396 --> 00:06:40.600 line:-1 position:50%
when possible, to make
custom controls accessible.


158
00:06:40,600 --> 00:06:43,470 line:-1
This is just one way to use
accessibilityRepresentation(representation:).


159
00:06:43.470 --> 00:06:47.274 line:-1 position:50%
Its flexibility allows
for many more creative uses.


160
00:06:47.274 --> 00:06:49.776 line:-1 position:50%
Let's see if we can use it
to fix other accessibility bugs


161
00:06:49.776 --> 00:06:51.144 line:-1 position:50%
in our app.


162
00:06:51,144 --> 00:06:52,812 line:-1
While we have now fixed
the functional ability


163
00:06:52.812 --> 00:06:54.347 line:-1 position:50%
to edit budgets,


164
00:06:54,347 --> 00:06:56,516 line:-1
some users reported
that they couldn't discover


165
00:06:56.516 --> 00:06:59.219 line:-1 position:50%
how to navigate
to the Budget Planner view.


166
00:06:59,219 --> 00:07:02,055 position:50%
When designing Wallet Pal,
we decided to use SF Symbols


167
00:07:02,055 --> 00:07:03,723 position:50%
for all of our buttons.


168
00:07:03,723 --> 00:07:07,294 line:0
While SF Symbols may have great
default accessibility labels,


169
00:07:07,294 --> 00:07:10,530 line:0
they may not always fit
the intended use case.


170
00:07:10,530 --> 00:07:15,702 position:50%
Let's investigate if the problem
is a poorly labeled button.


171
00:07:15,702 --> 00:07:19,372 position:50%
The NavigationBarView contains
the Edit Budgets button.


172
00:07:19,372 --> 00:07:22,242 position:50%
Since we rely on SF Symbols
for so many of our buttons,


173
00:07:22,242 --> 00:07:27,247 position:50%
I created a custom buttonStyle
called SymbolButtonStyle.


174
00:07:27,247 --> 00:07:29,849 line:-1
But it appears that despite
initializing the button


175
00:07:29,849 --> 00:07:32,018 line:-1
with the label "Edit Budgets",


176
00:07:32,018 --> 00:07:36,556 line:-1
the label for the button
is slider.vertical.3.


177
00:07:36.556 --> 00:07:38.858 line:-1 position:50%
So the accessibility label
is being derived


178
00:07:38.858 --> 00:07:41.061 line:-1 position:50%
from the SF Symbol.


179
00:07:41.061 --> 00:07:45.565 line:-1 position:50%
Let's take a closer look
at the SymbolButtonStyle.


180
00:07:45.565 --> 00:07:47.600 line:-1 position:50%
The SymbolButtonStyle's
makeBody(configuration:) method


181
00:07:47,600 --> 00:07:49,569 line:-1
returns an Image view.


182
00:07:49.569 --> 00:07:52.505 line:-1 position:50%
The Edit Budgets string
we initialize the button with


183
00:07:52.505 --> 00:07:55.875 line:-1 position:50%
would create a Text view
as the configuration's label.


184
00:07:55.875 --> 00:07:57.444 line:-1 position:50%
But this style
completely ignores


185
00:07:57.444 --> 00:07:59.746 line:-1 position:50%
the configuration's label.


186
00:07:59,746 --> 00:08:04,918 line:-1
This is why the button is
not labeled "Edit Budgets".


187
00:08:04.918 --> 00:08:07.554 line:-1 position:50%
While we want an SF Symbol
to appear visually,


188
00:08:07.554 --> 00:08:09.222 line:-1 position:50%
we want the accessibility
of the button


189
00:08:09,222 --> 00:08:12,325 line:-1
to be represented
by the configuration's label.


190
00:08:12,325 --> 00:08:14,060 line:-1
And so this seems
like a great use case


191
00:08:14.060 --> 00:08:17.297 line:-1 position:50%
for accessibilityRepresentation(representation:).


192
00:08:17.297 --> 00:08:19.366 line:-1 position:50%
Using
accessibilityRepresentation(representation:),


193
00:08:19,366 --> 00:08:22,135 line:-1
I can substitute the
accessibility of the Image view


194
00:08:22,135 --> 00:08:26,639 line:-1
with another view, in this case,
the configuration's label.


195
00:08:26.639 --> 00:08:28.375 line:-1 position:50%
This way,
we can preserve the label


196
00:08:28.375 --> 00:08:30.210 line:-1 position:50%
we used to create the button.


197
00:08:30,210 --> 00:08:33,179 line:-1
accessibilityRepresentation(representation:)
is not just the ideal


198
00:08:33.179 --> 00:08:36.182 line:-1 position:50%
and recommended way to make
custom controls accessible,


199
00:08:36.182 --> 00:08:38.551 line:-1 position:50%
it also opens up
new creative possibilities


200
00:08:38.551 --> 00:08:40.653 line:-1 position:50%
to make views accessible.


201
00:08:40.653 --> 00:08:42.555 line:-1 position:50%
Next, let's discuss
the relationship


202
00:08:42,555 --> 00:08:46,126 line:-1
between children
and accessibility containers.


203
00:08:46.126 --> 00:08:49.396 line:-1 position:50%
As you may recall, accessibility
elements can be wrapped together


204
00:08:49.396 --> 00:08:53.800 line:-1 position:50%
in a group as children
of an accessibility container.


205
00:08:53.800 --> 00:08:56.636 line:-1 position:50%
This is done with the
accessibilityElement(children:) modifier


206
00:08:56,636 --> 00:09:00,373 line:-1
and the contain child behavior.


207
00:09:00,373 --> 00:09:03,543 position:50%
In case you're unfamiliar,
the contain child behavior


208
00:09:03,543 --> 00:09:07,213 line:0
can be used to create
an accessibility container,


209
00:09:07,213 --> 00:09:09,282 line:0
which wraps existing
accessibility elements


210
00:09:09,282 --> 00:09:11,584 line:0
as children.


211
00:09:11,584 --> 00:09:14,754 line:-1
But what if instead you have
an accessibility element


212
00:09:14,754 --> 00:09:18,191 line:-1
and you want to set
its children?


213
00:09:18,191 --> 00:09:19,325 line:-1
I'm running into this case


214
00:09:19.325 --> 00:09:23.096 line:-1 position:50%
when trying to make the
Budget History graph accessible.


215
00:09:23.096 --> 00:09:26.132 line:-1 position:50%
Users reported the graph
is completely inaccessible.


216
00:09:26,132 --> 00:09:28,401 line:-1
And so this means
when assistive technologies


217
00:09:28.401 --> 00:09:30.670 line:-1 position:50%
are focused on
the Budget History header


218
00:09:30.670 --> 00:09:32.705 line:-1 position:50%
and try to navigate
to the next element,


219
00:09:32,705 --> 00:09:35,108 line:-1
they end up
at the Alerts header.


220
00:09:35,108 --> 00:09:38,545 line:-1
VoiceOver users would not even
know that this graph exists.


221
00:09:38.545 --> 00:09:41.614 line:-1 position:50%
I built the graph
using the new Canvas view.


222
00:09:41.614 --> 00:09:44.484 line:-1 position:50%
Canvas makes it easier
to draw a collection of shapes.


223
00:09:44,484 --> 00:09:47,554 line:0
For more on Canvas, please
check out Jacob's presentation


224
00:09:47,554 --> 00:09:51,157 position:50%
on how it can be used to add
rich graphics to your app.


225
00:09:51,157 --> 00:09:53,393 line:-1
The most important takeaway
for accessibility


226
00:09:53.393 --> 00:09:56.429 line:-1 position:50%
is that Canvas draws
a collection of shapes.


227
00:09:56,429 --> 00:09:58,565 line:-1
And just like we saw
with BudgetSlider,


228
00:09:58,565 --> 00:10:01,634 line:-1
shapes are not accessible
by default.


229
00:10:01,634 --> 00:10:04,704 line:-1
All users need to be able
to view their budget history,


230
00:10:04,704 --> 00:10:08,408 line:-1
so let's make this
accessible for everyone.


231
00:10:08,408 --> 00:10:12,111 line:-1
Starting with the basics,
let's give our Canvas a label.


232
00:10:12,111 --> 00:10:14,581 line:-1
This will automatically create
a new accessibility element


233
00:10:14.581 --> 00:10:17.684 line:-1 position:50%
for the Canvas
and assign its label.


234
00:10:17.684 --> 00:10:19.419 line:-1 position:50%
Now, I'd like each bar
in the graph


235
00:10:19,419 --> 00:10:23,490 line:-1
to be represented by their own
accessibility element.


236
00:10:23,490 --> 00:10:26,626 line:-1
This is a use case where we have
an accessibility element


237
00:10:26,626 --> 00:10:29,529 line:-1
and want to provide
its children.


238
00:10:29,529 --> 00:10:34,334 line:-1
To do this, I'll use the new
accessibilityChildren(children:) modifier.


239
00:10:34,334 --> 00:10:36,603 line:-1
This will transform
the accessibility element


240
00:10:36.603 --> 00:10:38.771 line:-1 position:50%
into an accessibility container,


241
00:10:38,771 --> 00:10:42,709 line:-1
preserving other accessibility
properties, such as the label.


242
00:10:42,709 --> 00:10:44,310 line:-1
The modifier takes
a ViewBuilder,


243
00:10:44.310 --> 00:10:46.045 line:-1 position:50%
which allows us
to set new views


244
00:10:46,045 --> 00:10:50,717 line:-1
as children
of the accessibility container.


245
00:10:50.717 --> 00:10:52.552 line:-1 position:50%
Recall that our
Budget History graph


246
00:10:52,552 --> 00:10:56,022 line:-1
is drawing a horizontal bar
graph, so we'll use an HStack


247
00:10:56,022 --> 00:10:59,926 line:-1
and return a view
for each budget.


248
00:10:59,926 --> 00:11:02,395 position:50%
I'll use a Rectangle
for each accessibility element


249
00:11:02,395 --> 00:11:06,032 position:50%
so that the frame will fill
all available vertical space.


250
00:11:06,032 --> 00:11:08,001 line:-1
This will make each
accessibility element's frame


251
00:11:08.001 --> 00:11:11.838 line:-1 position:50%
bigger than what's displayed
visually, and that's OK.


252
00:11:11.838 --> 00:11:14.841 line:-1 position:50%
Having a large but consistent
frame will make it easier


253
00:11:14.841 --> 00:11:16.476 line:-1 position:50%
to navigate on iOS


254
00:11:16.476 --> 00:11:18.945 line:-1 position:50%
when VoiceOver users drag
their finger across the screen


255
00:11:18.945 --> 00:11:23.349 line:-1 position:50%
to scan
for accessibility elements.


256
00:11:23,349 --> 00:11:24,918 position:50%
If I select the HStack


257
00:11:24,918 --> 00:11:27,420 position:50%
from within the
accessibilityChildren(children:) modifier,


258
00:11:27,420 --> 00:11:29,188 line:0
the Accessibility Preview
confirms


259
00:11:29,188 --> 00:11:32,892 line:0
that an element has been created
for each bar in the graph.


260
00:11:32.892 --> 00:11:35.061 line:-1 position:50%
These will all be accessible
as children


261
00:11:35,061 --> 00:11:38,464 line:-1
of the Canvas
accessibility container.


262
00:11:38.464 --> 00:11:39.566 line:-1 position:50%
With these changes,


263
00:11:39,566 --> 00:11:42,902 line:-1
the Budget History graph
is now completely accessible,


264
00:11:42,902 --> 00:11:44,737 line:-1
and assistive technologies
can navigate


265
00:11:44,737 --> 00:11:47,440 line:-1
through each bar in the graph.


266
00:11:47,440 --> 00:11:49,876 line:-1
Notice that the frame
for each element is the same,


267
00:11:49.876 --> 00:11:52.278 line:-1 position:50%
which is ideal.


268
00:11:52,278 --> 00:11:53,713 line:0
For more complex charts,


269
00:11:53,713 --> 00:11:56,015 position:50%
we have other ways
of making them accessible.


270
00:11:56,015 --> 00:11:58,318 position:50%
For that, please check out
Preston's presentation


271
00:11:58,318 --> 00:12:01,020 line:0
on bringing accessibility
to charts.


272
00:12:01,020 --> 00:12:03,523 line:-1
But with accessibility children,
the accessibility elements


273
00:12:03,523 --> 00:12:06,426 line:-1
of a view can differ
from what's presented visually,


274
00:12:06,426 --> 00:12:09,095 line:-1
allowing you to tailor
a great experience.


275
00:12:09.095 --> 00:12:11.965 line:-1 position:50%
But accessibility children
can also be used to compose


276
00:12:11,965 --> 00:12:15,868 line:-1
the accessibility with the help
of the combine behavior.


277
00:12:15,868 --> 00:12:18,571 position:50%
As a quick refresh,
the combine child behavior


278
00:12:18,571 --> 00:12:21,574 line:0
will merge properties from
multiple accessibility elements


279
00:12:21,574 --> 00:12:25,345 position:50%
into a new or existing
accessibility element.


280
00:12:25,345 --> 00:12:28,081 line:0
But with the addition of
the accessibility children API,


281
00:12:28,081 --> 00:12:30,316 position:50%
it can now also be used
to compose accessibility


282
00:12:30,316 --> 00:12:34,120 line:0
in a generic way.


283
00:12:34.120 --> 00:12:35.989 line:-1 position:50%
With
accessibility representation,


284
00:12:35.989 --> 00:12:40.460 line:-1 position:50%
the original accessibility
is completely replaced.


285
00:12:40,460 --> 00:12:44,831 line:-1
This means no composition
can take place;


286
00:12:44.831 --> 00:12:51.070 line:-1 position:50%
whereas accessibility children
is additive.


287
00:12:51,070 --> 00:12:53,740 line:-1
This means you could later
combine the children


288
00:12:53.740 --> 00:12:57.243 line:-1 position:50%
to merge their properties
into the original element.


289
00:12:57.243 --> 00:12:58.678 line:-1 position:50%
This is a more advanced use case


290
00:12:58,678 --> 00:13:00,680 line:-1
of the accessibilityChildren(children:) modifier,


291
00:13:00,680 --> 00:13:03,549 line:-1
but it's a functionality
I wanted to highlight.


292
00:13:03,549 --> 00:13:05,451 line:-1
Examples are featured
in this presentation's


293
00:13:05,451 --> 00:13:08,488 line:-1
Accessibility Catalog
Sample Project.


294
00:13:08,488 --> 00:13:10,623 line:-1
I hope to see many of you
explore what's possible


295
00:13:10.623 --> 00:13:13.793 line:-1 position:50%
with this kind of composition.


296
00:13:13,793 --> 00:13:15,862 line:-1
accessibilityChildren(children:)
gives you control


297
00:13:15.862 --> 00:13:17.864 line:-1 position:50%
over the children
of a container.


298
00:13:17.864 --> 00:13:20.299 line:-1 position:50%
And with that, complex graphs
drawn with Canvas


299
00:13:20.299 --> 00:13:22.735 line:-1 position:50%
can be made accessible
with modifiers and views


300
00:13:22.735 --> 00:13:25.038 line:-1 position:50%
you're already familiar with.


301
00:13:25,038 --> 00:13:26,606 line:-1
And with the combine
child behavior,


302
00:13:26,606 --> 00:13:30,643 line:-1
the accessibility of a single
view can be composed of many.


303
00:13:30.643 --> 00:13:32.578 line:-1 position:50%
Now that we've learned how to
make individual components


304
00:13:32,578 --> 00:13:35,281 line:-1
of our app accessible, we can
start putting things together


305
00:13:35.281 --> 00:13:38.051 line:-1 position:50%
to refine the navigation
experience.


306
00:13:38,051 --> 00:13:40,253 line:-1
I've heard that navigating
Wallet Pal with VoiceOver


307
00:13:40,253 --> 00:13:42,755 line:-1
is confusing and difficult.


308
00:13:42.755 --> 00:13:44.490 line:-1 position:50%
So we have some more work to do


309
00:13:44.490 --> 00:13:49.429 line:-1 position:50%
if we want to deliver
a great accessible app.


310
00:13:49.429 --> 00:13:53.533 line:-1 position:50%
Let's take a closer look at the
Friends carousel at the top.


311
00:13:53,533 --> 00:13:55,468 line:-1
While I don't have
this feature built yet,


312
00:13:55.468 --> 00:13:58.871 line:-1 position:50%
I plan to add some kind
of gamification to Wallet Pal.


313
00:13:58,871 --> 00:14:00,106 position:50%
So I've added a challenge button


314
00:14:00,106 --> 00:14:03,810 position:50%
at the top left
of each friend view.


315
00:14:03.810 --> 00:14:05.912 line:-1 position:50%
We already fixed
the SymbolButtonStyle,


316
00:14:05.912 --> 00:14:09.082 line:-1 position:50%
so the challenge button
will be properly labeled now.


317
00:14:09.082 --> 00:14:12.085 line:-1 position:50%
But since users are reporting
that navigation is confusing,


318
00:14:12.085 --> 00:14:13.886 line:-1 position:50%
are there other issues?


319
00:14:13,886 --> 00:14:15,688 line:-1
To answer that,
we must first understand


320
00:14:15.688 --> 00:14:19.358 line:-1 position:50%
how assistive technologies
will navigate Wallet Pal.


321
00:14:19,358 --> 00:14:21,494 line:-1
By default, accessibility
elements are sorted


322
00:14:21.494 --> 00:14:23.429 line:-1 position:50%
based off their
geometric position


323
00:14:23.429 --> 00:14:28.534 line:-1 position:50%
in relation to other elements,
from top left to bottom right.


324
00:14:28,534 --> 00:14:30,670 line:-1
This means that without
accessibility containers


325
00:14:30,670 --> 00:14:33,639 line:-1
to differentiate the content,
VoiceOver would navigate


326
00:14:33.639 --> 00:14:36.109 line:-1 position:50%
through each
of the challenge buttons,


327
00:14:36,109 --> 00:14:39,278 line:-1
then the Image
and Add Friend button,


328
00:14:39.278 --> 00:14:42.815 line:-1 position:50%
and finally, the text
with the user's name.


329
00:14:42,815 --> 00:14:45,084 line:-1
A great feature
of the Accessibility Preview


330
00:14:45,084 --> 00:14:48,855 line:-1
is that it shows accessibility
elements in their sorted order.


331
00:14:48,855 --> 00:14:51,824 position:50%
This makes it easy to visualize
how assistive technologies


332
00:14:51,824 --> 00:14:54,794 line:0
will navigate right
from within Xcode.


333
00:14:54,794 --> 00:14:58,698 line:0
As expected, the sorted order
matches what we previously saw.


334
00:14:58,698 --> 00:15:02,368 line:0
And this order would certainly
be confusing to navigate.


335
00:15:02.368 --> 00:15:03.836 line:-1 position:50%
Now there are multiple ways


336
00:15:03.836 --> 00:15:07.206 line:-1 position:50%
we could fix the sort order
of the accessibility elements.


337
00:15:07.206 --> 00:15:08.241 line:-1 position:50%
One thing we could do


338
00:15:08.241 --> 00:15:11.144 line:-1 position:50%
is to introduce
accessibility containers.


339
00:15:11,144 --> 00:15:13,112 line:-1
I'll add the
accessibilityElement(children:) modifier


340
00:15:13,112 --> 00:15:16,516 line:-1
with the contain behavior.


341
00:15:16,516 --> 00:15:19,819 line:-1
This will wrap the accessibility
elements of each FriendCellView


342
00:15:19.819 --> 00:15:22.421 line:-1 position:50%
in an accessibility container.


343
00:15:22,421 --> 00:15:23,990 line:-1
This fixes the navigation order,


344
00:15:23,990 --> 00:15:26,159 line:-1
because children
of an accessibility container


345
00:15:26,159 --> 00:15:30,997 line:-1
are navigated before moving to
the next accessibility element.


346
00:15:30.997 --> 00:15:33.900 line:-1 position:50%
With this change, VoiceOver will
navigate through the children


347
00:15:33.900 --> 00:15:35.535 line:-1 position:50%
of the accessibility container


348
00:15:35.535 --> 00:15:39.172 line:-1 position:50%
before moving to the next
accessibility element.


349
00:15:39,172 --> 00:15:42,942 line:-1
And so we achieve a much more
desirable navigation order.


350
00:15:42,942 --> 00:15:45,745 line:-1
But could we do better
to improve this experience?


351
00:15:45.745 --> 00:15:47.580 line:-1 position:50%
One problem is that
the challenge button


352
00:15:47,580 --> 00:15:51,617 line:-1
is navigated to before
knowing who the user is.


353
00:15:51,617 --> 00:15:54,220 line:-1
A VoiceOver user would want
to know the name of the user


354
00:15:54,220 --> 00:15:56,155 line:-1
before sending a challenge,


355
00:15:56.155 --> 00:15:59.392 line:-1 position:50%
so this button should
really be sorted last.


356
00:15:59.392 --> 00:16:01.761 line:-1 position:50%
We can use the
accessibilitySortPriority(_:) modifier


357
00:16:01.761 --> 00:16:04.697 line:-1 position:50%
to fix this.


358
00:16:04,697 --> 00:16:07,667 position:50%
accessibilitySortPriority(_:)
can be used to change the order


359
00:16:07,667 --> 00:16:10,870 position:50%
of elements within
an accessibility container.


360
00:16:10,870 --> 00:16:13,506 line:0
An element with a higher
priority will be sorted first,


361
00:16:13,506 --> 00:16:16,776 position:50%
whereas a lower priority
will be sorted last.


362
00:16:16,776 --> 00:16:18,978 line:0
Elements with equal priorities
are then sorted


363
00:16:18,978 --> 00:16:22,615 line:0
based off
their geometric positioning.


364
00:16:22,615 --> 00:16:24,851 position:50%
I'll add the
accessibilitySortPriority(_:) modifier


365
00:16:24,851 --> 00:16:29,488 position:50%
to the challenge button
to improve the navigation order.


366
00:16:29,488 --> 00:16:32,925 position:50%
I'll use a priority of -1
since the default is 0,


367
00:16:32,925 --> 00:16:37,029 line:0
to force the sort order of the
challenge button to be last.


368
00:16:37,029 --> 00:16:39,799 line:-1
Now the challenge button
will be navigated to last.


369
00:16:39.799 --> 00:16:41.801 line:-1 position:50%
This is a good improvement,
since there is less chance


370
00:16:41.801 --> 00:16:43.669 line:-1 position:50%
a VoiceOver user
would be confused


371
00:16:43.669 --> 00:16:46.005 line:-1 position:50%
as to who they are sending
a challenge to,


372
00:16:46.005 --> 00:16:48.040 line:-1 position:50%
but it's still not great.


373
00:16:48,040 --> 00:16:49,742 line:-1
Rather than wrapping
each FriendCellView


374
00:16:49.742 --> 00:16:52.345 line:-1 position:50%
in an accessibility container,


375
00:16:52,345 --> 00:16:55,948 line:-1
we could combine the children
into a single element.


376
00:16:55,948 --> 00:16:58,217 line:-1
Recall that combine merges
properties from children


377
00:16:58,217 --> 00:17:01,354 line:-1
into an existing
or new accessibility element.


378
00:17:01,354 --> 00:17:03,055 line:-1
The combine behavior
also curates


379
00:17:03.055 --> 00:17:06.592 line:-1 position:50%
which properties are merged
for the best default result.


380
00:17:06,592 --> 00:17:09,562 line:-1
For example, the challenge
button has become an action


381
00:17:09.562 --> 00:17:11.998 line:-1 position:50%
named "Send Challenge".


382
00:17:11.998 --> 00:17:14.834 line:-1 position:50%
This too fixes the navigation
order and reduces the number


383
00:17:14,834 --> 00:17:16,936 line:-1
of accessibility elements.


384
00:17:16,936 --> 00:17:19,872 line:-1
Now there's a single
element for each user,


385
00:17:19,872 --> 00:17:23,276 line:-1
and each element
has a Send Challenge action.


386
00:17:23,276 --> 00:17:25,745 line:-1
It is often ideal to combine
the accessibility elements


387
00:17:25.745 --> 00:17:28.814 line:-1 position:50%
of views that are represented
in a ForEach.


388
00:17:28.814 --> 00:17:30.650 line:-1 position:50%
As you may have
picked up on by now,


389
00:17:30.650 --> 00:17:33.119 line:-1 position:50%
combine is a super
useful child behavior.


390
00:17:33.119 --> 00:17:35.755 line:-1 position:50%
Instead of children being
individually navigable,


391
00:17:35.755 --> 00:17:39.558 line:-1 position:50%
it merges their properties into
a single, navigable element.


392
00:17:39.558 --> 00:17:41.193 line:-1 position:50%
For when you need
a single element


393
00:17:41.193 --> 00:17:43.930 line:-1 position:50%
but do not want it to inherit
properties from the children,


394
00:17:43,930 --> 00:17:46,098 line:-1
use the ignore behavior.


395
00:17:46,098 --> 00:17:48,868 line:0
And lastly, the contain child
behavior wraps the children


396
00:17:48,868 --> 00:17:51,270 position:50%
in an accessibility container
and should be used


397
00:17:51,270 --> 00:17:54,173 position:50%
to express a groups
of views that are related.


398
00:17:54,173 --> 00:17:56,175 position:50%
This not only improves
the default sort order


399
00:17:56,175 --> 00:17:59,712 position:50%
but has other advantages
to assistive technologies.


400
00:17:59.712 --> 00:18:01.247 line:-1 position:50%
With the new
Accessibility Preview,


401
00:18:01.247 --> 00:18:03.549 line:-1 position:50%
discovering these
navigation problems is easy.


402
00:18:03.549 --> 00:18:05.184 line:-1 position:50%
And with a few small changes,


403
00:18:05,184 --> 00:18:07,954 line:-1
you can dramatically
improve the experience.


404
00:18:07.954 --> 00:18:09.755 line:-1 position:50%
But to deliver
a truly exceptional


405
00:18:09,755 --> 00:18:12,124 line:-1
navigation experience
to VoiceOver users,


406
00:18:12,124 --> 00:18:14,527 line:-1
you'll will want
to consider rotors.


407
00:18:14.527 --> 00:18:16.429 line:-1 position:50%
Now if you are new
to accessibility,


408
00:18:16,429 --> 00:18:19,565 line:-1
you might be thinking,
"What are rotors?"


409
00:18:19,565 --> 00:18:22,802 line:-1
In short, rotors are
a powerful navigation tool.


410
00:18:22.802 --> 00:18:24.136 line:-1 position:50%
They can be thought
of as bookmarks


411
00:18:24.136 --> 00:18:27.239 line:-1 position:50%
that allow users to quickly
navigate between them.


412
00:18:27,239 --> 00:18:29,008 line:-1
System rotors,
such as the headings


413
00:18:29.008 --> 00:18:31.444 line:-1 position:50%
and containers rotor,
provide the foundation


414
00:18:31,444 --> 00:18:35,047 line:-1
for this supercharged
form of navigation.


415
00:18:35.047 --> 00:18:38.384 line:-1 position:50%
For example, users can quickly
navigate through sections


416
00:18:38.384 --> 00:18:40.920 line:-1 position:50%
using the headings rotor.


417
00:18:40.920 --> 00:18:42.521 line:-1 position:50%
This is because the Section view


418
00:18:42,521 --> 00:18:46,092 line:-1
automatically adds the isHeader
trait to the header view


419
00:18:46,092 --> 00:18:47,793 line:-1
If you are not using
the Section view,


420
00:18:47.793 --> 00:18:50.096 line:-1 position:50%
you can add the isHeader trait
to your view


421
00:18:50,096 --> 00:18:52,598 line:-1
with accessibilityAddTraits(_:).


422
00:18:52.598 --> 00:18:55.001 line:-1 position:50%
Similarly, accessibility
containers are added


423
00:18:55.001 --> 00:18:57.970 line:-1 position:50%
to the container's rotor,
which as we saw earlier,


424
00:18:57,970 --> 00:19:01,140 line:-1
are created with the
accessibilityElement(children:) modifier.


425
00:19:01,140 --> 00:19:02,274 line:-1
As you can see,


426
00:19:02.274 --> 00:19:04.910 line:-1 position:50%
supporting the headings rotor
is incredibly easy,


427
00:19:04,910 --> 00:19:07,146 line:-1
and the container's rotor
further adds to the benefit


428
00:19:07.146 --> 00:19:09.148 line:-1 position:50%
of grouping
your accessibility elements


429
00:19:09,148 --> 00:19:12,985 line:-1
with the contain
child behavior.


430
00:19:12,985 --> 00:19:15,388 line:0
Now that the basic navigation
experience of Wallet Pal


431
00:19:15,388 --> 00:19:16,655 position:50%
has been refined,


432
00:19:16,655 --> 00:19:19,892 position:50%
let's take it a step
further with rotors.


433
00:19:19,892 --> 00:19:23,295 line:0
In Wallet Pal, alerts help keep
users' spending habits in check


434
00:19:23,295 --> 00:19:25,831 line:0
by providing motivation
messages and warnings


435
00:19:25,831 --> 00:19:29,368 line:0
when budgets near
or exceed their limit.


436
00:19:29,368 --> 00:19:31,003 position:50%
We've incorporated SF Symbols


437
00:19:31,003 --> 00:19:32,838 line:0
for the different types
of alerts.


438
00:19:32,838 --> 00:19:34,206 position:50%
These allow visual users


439
00:19:34,206 --> 00:19:36,609 line:0
to quickly scan
through the list.


440
00:19:36,609 --> 00:19:42,181 line:0
But this iconography will
not help VoiceOver users.


441
00:19:42,181 --> 00:19:44,884 line:0
They would instead have
to navigate through every alert


442
00:19:44,884 --> 00:19:47,686 line:0
just to know
if they have any warnings.


443
00:19:47.686 --> 00:19:49.221 line:-1 position:50%
To replicate
a similar experience


444
00:19:49,221 --> 00:19:51,657 line:-1
that sighted users have,
VoiceOver users need


445
00:19:51,657 --> 00:19:54,860 line:-1
to be able to exclusively
navigate warnings,


446
00:19:54.860 --> 00:19:55.961 line:-1 position:50%
that way, in an instant,


447
00:19:55,961 --> 00:19:58,697 line:-1
they can navigate
to the next warning alert.


448
00:19:58,697 --> 00:20:01,434 line:-1
To do this, we can use rotors.


449
00:20:01,434 --> 00:20:03,035 position:50%
For more examples
of custom rotors


450
00:20:03,035 --> 00:20:05,404 line:0
and why they're so important
to efficiency,


451
00:20:05,404 --> 00:20:07,873 line:0
please check out our "VoiceOver
Efficiency for Custom Rotors"


452
00:20:07,873 --> 00:20:10,509 line:0
presentation from 2020.


453
00:20:10.509 --> 00:20:12.411 line:-1 position:50%
To add a warnings rotor
to my AlertsView,


454
00:20:12,411 --> 00:20:14,980 line:-1
the first thing I'll do is
to make sure I'm adding my rotor


455
00:20:14.980 --> 00:20:17.283 line:-1 position:50%
to an accessibility container.


456
00:20:17.283 --> 00:20:19.819 line:-1 position:50%
Some views in SwiftUI
are accessibility containers


457
00:20:19.819 --> 00:20:23.689 line:-1 position:50%
by default --
such as List or LazyVStack --


458
00:20:23,689 --> 00:20:26,358 line:-1
but VStacks
and HStacks are not,


459
00:20:26.358 --> 00:20:28.494 line:-1 position:50%
so I'll add the
accessibilityElement(children:) modifier


460
00:20:28,494 --> 00:20:32,064 line:-1
with the contain
child behavior.


461
00:20:32,064 --> 00:20:35,968 line:-1
Next, I'll create my rotor with
the accessibilityRotor(_:entries:) modifier,


462
00:20:35.968 --> 00:20:39.472 line:-1 position:50%
giving it the name "Warnings".


463
00:20:39,472 --> 00:20:41,674 position:50%
And lastly, I'll declare
which of my alerts


464
00:20:41,674 --> 00:20:44,210 line:0
I want included
in the warnings rotor,


465
00:20:44,210 --> 00:20:46,846 position:50%
in this case all
of the warning alerts.


466
00:20:46,846 --> 00:20:47,880 line:-1
And that's it!


467
00:20:47,880 --> 00:20:52,118 line:-1
It's this easy to supercharge
your app's navigation.


468
00:20:52,118 --> 00:20:55,321 line:0
Part of what makes rotors so
easy for these simple use cases


469
00:20:55,321 --> 00:20:57,256 position:50%
is that SwiftUI can
automatically match


470
00:20:57,256 --> 00:20:59,825 position:50%
the rotor entry
to the accessibility element


471
00:20:59,825 --> 00:21:02,061 line:0
based off the ID.


472
00:21:02,061 --> 00:21:04,563 line:0
This is because the ID
of our rotor entry will match


473
00:21:04,563 --> 00:21:08,567 position:50%
the ID given to the
AlertCellView by a ForEach.


474
00:21:08,567 --> 00:21:10,669 position:50%
The identity of a view is
important to understand


475
00:21:10,669 --> 00:21:12,571 line:0
for accessibility rotors.


476
00:21:12,571 --> 00:21:15,608 line:0
So if view identity is unclear
or you'd like a refresher,


477
00:21:15,608 --> 00:21:16,942 position:50%
I strongly encourage
you to check out


478
00:21:16,942 --> 00:21:20,913 line:0
the "Demystifying SwiftUI"
presentation to learn more.


479
00:21:20.913 --> 00:21:23.182 line:-1 position:50%
Now you might be thinking,
"Hold on,


480
00:21:23,182 --> 00:21:25,284 line:-1
my view isn't this simple.


481
00:21:25,284 --> 00:21:28,020 line:-1
What about views
that are not within a ForEach?"


482
00:21:28,020 --> 00:21:30,389 line:-1
Don't worry,
the accessibility rotor API


483
00:21:30,389 --> 00:21:33,492 line:-1
can scale from simple
to complex views.


484
00:21:33,492 --> 00:21:35,394 position:50%
This simple case works elegantly


485
00:21:35,394 --> 00:21:37,663 position:50%
because there is a single
accessibility element --


486
00:21:37,663 --> 00:21:40,799 line:0
due to the combine --
for the AlertCellView.


487
00:21:40,799 --> 00:21:43,736 line:0
And the AlertCellView
is identified by the ID


488
00:21:43,736 --> 00:21:45,938 position:50%
of the alert.


489
00:21:45,938 --> 00:21:50,509 position:50%
What if for every alert
there was also an Actions view?


490
00:21:50,509 --> 00:21:54,180 line:0
In this case, the VStack is now
the root view of our ForEach,


491
00:21:54,180 --> 00:21:56,348 line:0
and it's the VStack
which will be given the identity


492
00:21:56,348 --> 00:21:58,017 line:0
of the alert.


493
00:21:58.017 --> 00:22:00.653 line:-1 position:50%
So to include the AlertCellView
in our warnings rotor,


494
00:22:00.653 --> 00:22:06.025 line:-1 position:50%
we will need to explicitly
mark it as a rotor entry.


495
00:22:06.025 --> 00:22:06.992 line:-1 position:50%
We can do that


496
00:22:06,992 --> 00:22:09,762 line:-1
with the accessibilityRotorEntry
modifier.


497
00:22:09,762 --> 00:22:12,932 line:0
This modifier requires
a namespace and an ID,


498
00:22:12,932 --> 00:22:15,467 position:50%
which could be anything
as long as they match the ID


499
00:22:15,467 --> 00:22:20,773 line:0
and namespace used to create
the AccessibilityRotorEntry.


500
00:22:20,773 --> 00:22:23,142 line:0
And lastly, we'll need
to include this namespace


501
00:22:23,142 --> 00:22:25,211 line:0
for each rotor entry.


502
00:22:25,211 --> 00:22:27,346 line:-1
The ability to refer
to an explicit namespace


503
00:22:27,346 --> 00:22:29,782 line:-1
is what enables the
accessibility rotor API


504
00:22:29.782 --> 00:22:33.085 line:-1 position:50%
to scale from simple
to complex use cases,


505
00:22:33.085 --> 00:22:36.121 line:-1 position:50%
allowing accessibility elements
that span across multiple views


506
00:22:36,121 --> 00:22:39,191 line:-1
to be included
in the same rotor.


507
00:22:39.191 --> 00:22:43.862 line:-1 position:50%
Accessibility rotors can also be
added to enrich text navigation.


508
00:22:43,862 --> 00:22:44,663 line:-1
To do that,


509
00:22:44,663 --> 00:22:47,633 line:-1
use a different variant of the
accessibilityRotor modifier,


510
00:22:47.633 --> 00:22:51.136 line:-1 position:50%
which allows you provide
an array of text ranges.


511
00:22:51.136 --> 00:22:53.305 line:-1 position:50%
This modifier is great
for giving VoiceOver users


512
00:22:53,305 --> 00:22:55,674 line:-1
quick and easy access
to specific strings


513
00:22:55,674 --> 00:23:01,247 line:-1
within a TextEditor, such as
emails, links, or phone numbers.


514
00:23:01,247 --> 00:23:03,849 line:-1
Accessibility rotors makes
complex navigation


515
00:23:03.849 --> 00:23:05.684 line:-1 position:50%
easy for VoiceOver users.


516
00:23:05.684 --> 00:23:08.821 line:-1 position:50%
And with the new SwiftUI rotors
API, it's never been easier


517
00:23:08,821 --> 00:23:12,124 line:-1
to deliver this exceptional
navigation experience.


518
00:23:12,124 --> 00:23:15,094 line:-1
The last topic
for today is focus.


519
00:23:15,094 --> 00:23:16,495 line:-1
The concept
of element of focus


520
00:23:16,495 --> 00:23:18,831 line:-1
is something you may
already be familiar with,


521
00:23:18,831 --> 00:23:19,932 line:-1
but what you may not know


522
00:23:19.932 --> 00:23:21.834 line:-1 position:50%
is that many
of our assistive technologies


523
00:23:21.834 --> 00:23:24.270 line:-1 position:50%
have their own focus state.


524
00:23:24,270 --> 00:23:27,406 line:-1
This is what we call
"accessibility focus".


525
00:23:27.406 --> 00:23:29.275 line:-1 position:50%
It's the focused view you
have been seeing change


526
00:23:29.275 --> 00:23:33.145 line:-1 position:50%
when I refer to assistive
technologies navigating.


527
00:23:33,145 --> 00:23:35,147 line:-1
The position of an assistive
technology's cursor


528
00:23:35,147 --> 00:23:37,983 line:-1
is critical
to the user experience.


529
00:23:37,983 --> 00:23:40,119 position:50%
When focus is changed
in VoiceOver,


530
00:23:40,119 --> 00:23:42,855 line:0
the cursor moves to match
the focused element's path


531
00:23:42,855 --> 00:23:46,325 position:50%
in addition to speaking
a description of the element.


532
00:23:46,325 --> 00:23:48,694 line:-1
So when does focus change?


533
00:23:48.694 --> 00:23:50.129 line:-1 position:50%
Focus can but may not
always change


534
00:23:50,129 --> 00:23:53,132 line:-1
when one of three events occur.


535
00:23:53.132 --> 00:23:54.566 line:-1 position:50%
The first and most
common use case


536
00:23:54,566 --> 00:23:56,669 line:-1
is when a user drives
a focus change


537
00:23:56.669 --> 00:24:00.873 line:-1 position:50%
when navigating to a different
accessibility element.


538
00:24:00.873 --> 00:24:02.841 line:-1 position:50%
The second case is
when the UI changes,


539
00:24:02.841 --> 00:24:05.744 line:-1 position:50%
and the previously focused view
is no longer on screen


540
00:24:05,744 --> 00:24:08,280 line:-1
or is covered by a modal view.


541
00:24:08.280 --> 00:24:10.149 line:-1 position:50%
When this happens,
focus is often reset


542
00:24:10,149 --> 00:24:13,352 line:-1
to the first sorted
accessibility element.


543
00:24:13,352 --> 00:24:15,421 line:-1
This covers many use cases
automatically,


544
00:24:15,421 --> 00:24:17,423 line:-1
such as moving to the first
accessibility element


545
00:24:17,423 --> 00:24:19,024 line:-1
of a newly presented view.


546
00:24:19,024 --> 00:24:22,294 line:-1
But that may not be
the best behavior in your app,


547
00:24:22,294 --> 00:24:24,063 line:-1
which is why focus
can also be changed


548
00:24:24.063 --> 00:24:26.365 line:-1 position:50%
upon programmatic request.


549
00:24:26.365 --> 00:24:28.734 line:-1 position:50%
However, this should be
handled with caution,


550
00:24:28,734 --> 00:24:30,803 line:-1
because moving
a VoiceOver user's focus


551
00:24:30.803 --> 00:24:33.539 line:-1 position:50%
can be very disruptive.


552
00:24:33,539 --> 00:24:36,375 line:-1
On that note, let's focus --
no pun intended --


553
00:24:36,375 --> 00:24:38,377 line:-1
on the last case.


554
00:24:38.377 --> 00:24:40.479 line:-1 position:50%
This year we have a new API
that will allow you


555
00:24:40,479 --> 00:24:43,615 line:-1
to both request an assistive
technology to move its focus,


556
00:24:43,615 --> 00:24:46,251 line:-1
in addition to reading
where an assistive technology


557
00:24:46,251 --> 00:24:48,253 line:-1
is currently focused.


558
00:24:48.253 --> 00:24:51.323 line:-1 position:50%
Here we have a simple view
which tracks a notification,


559
00:24:51.323 --> 00:24:56.061 line:-1 position:50%
and if it exists, overlays
a custom NotificationBanner.


560
00:24:56.061 --> 00:24:57.796 line:-1 position:50%
We want to use
this view in Wallet Pal


561
00:24:57.796 --> 00:24:59.765 line:-1 position:50%
to show alerts
for push notifications


562
00:24:59,765 --> 00:25:02,701 line:-1
received while the app
is in the foreground.


563
00:25:02,701 --> 00:25:04,670 line:-1
When the NotificationBanner
is added,


564
00:25:04,670 --> 00:25:08,507 line:-1
assistive technologies will
not automatically focus on it.


565
00:25:08,507 --> 00:25:09,908 line:-1
But we can request they do so


566
00:25:09,908 --> 00:25:13,879 line:-1
with the new
AccessibilityFocusState.


567
00:25:13,879 --> 00:25:16,915 line:-1
AccessibilityFocusState is a
property wrapper that provides


568
00:25:16,915 --> 00:25:19,952 line:-1
both a way of reading where an
assistive technology is focused


569
00:25:19,952 --> 00:25:23,188 line:-1
and requesting
a programmatic focus change.


570
00:25:23.188 --> 00:25:26.024 line:-1 position:50%
I'll add one to my view and bind
it to the NotificationBanner


571
00:25:26.024 --> 00:25:30.562 line:-1 position:50%
with the accessibilityFocused(_:)
modifier.


572
00:25:30,562 --> 00:25:32,564 line:-1
Next, I'll use
the onChange(of:perform:) modifier


573
00:25:32,564 --> 00:25:35,467 line:-1
to track when a new notification
is received.


574
00:25:35.467 --> 00:25:37.736 line:-1 position:50%
Only when a high-priority
notification is received


575
00:25:37,736 --> 00:25:42,174 line:-1
do we request accessibility
focus to change.


576
00:25:42.174 --> 00:25:43.876 line:-1 position:50%
It's especially
important to note


577
00:25:43,876 --> 00:25:45,677 line:-1
that moving focus
programmatically


578
00:25:45.677 --> 00:25:50.215 line:-1 position:50%
can be very disruptive
if no user interaction occurred.


579
00:25:50.215 --> 00:25:51.884 line:-1 position:50%
It takes the user out
of whatever context


580
00:25:51,884 --> 00:25:55,287 line:-1
they are currently focused on,
so it must be handled with care.


581
00:25:55,287 --> 00:25:57,389 line:-1
So for lower priority
notifications,


582
00:25:57,389 --> 00:25:59,158 line:-1
I'll post an accessibility
notification


583
00:25:59,158 --> 00:26:01,994 line:-1
for VoiceOver to announce.


584
00:26:01,994 --> 00:26:02,728 position:50%
This way,


585
00:26:02,728 --> 00:26:05,564 position:50%
VoiceOver users still know
a new notification has appeared


586
00:26:05,564 --> 00:26:08,367 position:50%
and can navigate
to it if desired.


587
00:26:08.367 --> 00:26:11.603 line:-1 position:50%
Now let's step inside
the NotificationBanner view.


588
00:26:11,603 --> 00:26:15,741 line:-1
When the notification appears,
a timer is started.


589
00:26:15,741 --> 00:26:19,545 line:-1
Upon it completing,
the notification is set to nil.


590
00:26:19.545 --> 00:26:22.014 line:-1 position:50%
Recall from before that
when the notification is nil,


591
00:26:22.014 --> 00:26:24.850 line:-1 position:50%
the NotificationBanner
will be hidden.


592
00:26:24.850 --> 00:26:26.718 line:-1 position:50%
This means if a VoiceOver user
was focused


593
00:26:26,718 --> 00:26:29,955 line:-1
on the notification banner
and the timer expired,


594
00:26:29.955 --> 00:26:33.725 line:-1 position:50%
their focus would be reset,
since the view is removed;


595
00:26:33,725 --> 00:26:37,229 line:-1
and this isn't
a great user experience.


596
00:26:37,229 --> 00:26:40,032 position:50%
To fix this, let's read
if our NotificationBanner


597
00:26:40,032 --> 00:26:42,367 position:50%
is focused by
an assistive technology,


598
00:26:42,367 --> 00:26:45,804 line:0
and if it is, delay
the notification dismissal.


599
00:26:45,804 --> 00:26:47,973 position:50%
This is the ideal solution.


600
00:26:47,973 --> 00:26:50,676 line:-1
A VoiceOver user's focus
will no longer be reset,


601
00:26:50.676 --> 00:26:53.579 line:-1 position:50%
since the view is no longer
removed while focused.


602
00:26:53,579 --> 00:26:56,381 line:-1
Additionally, we have given
assistive technology users


603
00:26:56.381 --> 00:26:59.485 line:-1 position:50%
an unlimited number of time
to digest the content


604
00:26:59.485 --> 00:27:01.887 line:-1 position:50%
and interact if desired;


605
00:27:01,887 --> 00:27:04,356 line:-1
two things that may take
assistive technology users


606
00:27:04,356 --> 00:27:08,227 line:-1
much longer to do so.


607
00:27:08,227 --> 00:27:10,429 line:-1
AccessibilityFocusState
is the last piece you need


608
00:27:10,429 --> 00:27:13,432 line:-1
to deliver exceptional
and accessible SwiftUI apps


609
00:27:13,432 --> 00:27:15,834 line:-1
this year and beyond.


610
00:27:15,834 --> 00:27:17,703 line:-1
With it, you can read
and direct the focus


611
00:27:17,703 --> 00:27:20,205 line:-1
of assistive technologies
to create smooth transitions


612
00:27:20,205 --> 00:27:21,807 line:-1
between views.


613
00:27:21,807 --> 00:27:25,611 line:-1
Wow, we've covered a lot today
for SwiftUI accessibility.


614
00:27:25,611 --> 00:27:28,180 line:-1
We were introduced to the new
Accessibility Preview,


615
00:27:28.180 --> 00:27:29.715 line:-1 position:50%
which enhances the way
you can develop


616
00:27:29,715 --> 00:27:32,718 line:-1
and debug SwiftUI accessibility;


617
00:27:32.718 --> 00:27:34.620 line:-1 position:50%
we covered how to make
custom controls


618
00:27:34.620 --> 00:27:36.822 line:-1 position:50%
and complex graphs accessible;


619
00:27:36,822 --> 00:27:39,591 line:-1
and we took the time to learn
how the navigation experience


620
00:27:39,591 --> 00:27:43,295 line:-1
can be improved with grouping,
rotors, and focus.


621
00:27:43,295 --> 00:27:45,464 line:-1
Put everything together,
and it truly has been


622
00:27:45,464 --> 00:27:48,133 line:-1
a huge leap for accessibility
this year.


623
00:27:48.133 --> 00:27:50.168 line:-1 position:50%
For some great simple
and complex examples


624
00:27:50,168 --> 00:27:52,571 line:-1
of our Accessibility APIs,
please checkout


625
00:27:52,571 --> 00:27:55,207 line:-1
the Accessibility Catalog
Sample Project.


626
00:27:55.207 --> 00:27:57.509 line:-1 position:50%
It features more examples
that we couldn't cover today


627
00:27:57,509 --> 00:28:00,112 line:-1
and some of our recommended
best practices.


628
00:28:00,112 --> 00:28:01,613 line:-1
Thank you so much
for joining me.


629
00:28:01,613 --> 00:28:03,815 line:-1
We look forward to seeing
how you make your app accessible


630
00:28:03.815 --> 00:28:05.083 line:-1 position:50%
to everyone.


631
00:28:05,083 --> 00:28:08,086 line:0 align:right size:2%
♪

