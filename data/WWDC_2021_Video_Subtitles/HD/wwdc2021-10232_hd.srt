2
00:00:00,467 --> 00:00:07,474 line:-1
[upbeat music]


3
00:00:09.042 --> 00:00:11.545 line:-2 align:center
[Ayaka] Hi, everyone!
My name is Ayaka,


4
00:00:11,545 --> 00:00:13,814 line:-2
and I'm so happy to be
here to introduce you


5
00:00:13.814 --> 00:00:15.215 line:-1 align:center
to Shortcuts for Mac.


6
00:00:16,216 --> 00:00:18,085 line:-2
I wanna first start
with a quick overview


7
00:00:18.085 --> 00:00:20.120 line:-2 align:center
of Shortcuts for Mac,
and also some of the other


8
00:00:20.120 --> 00:00:23.490 line:-2 align:center
exciting new updates we're
bringing this year to Shortcuts.


9
00:00:23,490 --> 00:00:26,126 line:-2
Shortcuts lets people
automate repetitive tasks


10
00:00:26.126 --> 00:00:27.928 line:-2 align:center
and connect together
functionality


11
00:00:27.928 --> 00:00:30.130 line:-2 align:center
from different apps
to solve problems.


12
00:00:30,130 --> 00:00:32,933 line:-2
It lets you be creative with how
you use your technology.


13
00:00:32.933 --> 00:00:35.402 line:-2 align:center
And Shortcuts for Mac
is gonna make automation


14
00:00:35.402 --> 00:00:38.005 line:-2 align:center
more fun and accessible
than ever before.


15
00:00:39.506 --> 00:00:41.108 line:-2 align:center
When you open the app
for the first time,


16
00:00:41.108 --> 00:00:44.678 line:-2 align:center
you'll see all of your shortcuts
already synced from your iPhone.


17
00:00:44,678 --> 00:00:46,647 line:-2
The app also includes
a Shortcuts Gallery,


18
00:00:46.647 --> 00:00:49.449 line:-2 align:center
where you can discover new
shortcuts that are ready to use,


19
00:00:49,449 --> 00:00:52,519 line:-2
including brand-new
Mac-specific ones.


20
00:00:52.519 --> 00:00:54.221 line:-2 align:center
And if you want to create your own
shortcuts,


21
00:00:54,221 --> 00:00:56,156 line:-2
you can also use
the Shortcuts Editor,


22
00:00:56.156 --> 00:00:58.358 line:-2 align:center
which is re-designed from
the ground up


23
00:00:58,358 --> 00:01:01,028 line:-1
to feel at home on the Mac.


24
00:01:01.028 --> 00:01:03.197 line:-2 align:center
By the way,
we wrote almost the entire


25
00:01:03.197 --> 00:01:05.866 line:-2 align:center
Mac app in SwiftUI,
which allows us to maintain


26
00:01:05.866 --> 00:01:09.036 line:-2 align:center
a unified codebase between
our iOS and Mac apps


27
00:01:09,036 --> 00:01:11,605 line:-2
while letting us tailor
the details to each platform.


28
00:01:13.207 --> 00:01:14.875 line:-2 align:center
Like on iOS,
any app on the Mac


29
00:01:14.875 --> 00:01:17.578 line:-2 align:center
can provide actions
to Shortcuts.


30
00:01:17,578 --> 00:01:20,047 line:-2
In this session, we're gonna
cover how supporting Shortcuts


31
00:01:20.047 --> 00:01:23.217 line:-2 align:center
in your apps can enable
powerful workflows on macOS,


32
00:01:23,217 --> 00:01:26,153 line:-2
whether you're developing
an iOS app, a native Mac app,


33
00:01:26.153 --> 00:01:28.088 line:-2 align:center
or an app
built with Mac Catalyst.


34
00:01:29.556 --> 00:01:32.559 line:-2 align:center
We'll also cover how Shortcuts
fits into the bigger picture


35
00:01:32,559 --> 00:01:34,761 line:-2
of Mac automation,
including existing tools


36
00:01:34,761 --> 00:01:37,598 line:-2
that we know and love
like AppleScript and Automator.


37
00:01:38,999 --> 00:01:41,668 line:-2
This year, we also added
two new automation types


38
00:01:41,668 --> 00:01:43,670 line:-1
for Focus and Sound Recognition,


39
00:01:43,670 --> 00:01:45,539 line:-2
along with a whole new suite
of actions


40
00:01:45,539 --> 00:01:47,407 line:-2
that let you manage
your windows and files,


41
00:01:47.407 --> 00:01:49.576 line:-2 align:center
plus many more,
which we'll highlight later.


42
00:01:51.144 --> 00:01:53.814 line:-2 align:center
We'll cover how your app, too,
can provide custom actions


43
00:01:53.814 --> 00:01:55.883 line:-2 align:center
for people to create
powerful shortcuts.


44
00:01:57.017 --> 00:01:59.853 line:-2 align:center
By the way, if your app
integrates with file providers,


45
00:01:59,853 --> 00:02:02,756 line:-2
these new Files actions
will automatically work with


46
00:02:02,756 --> 00:02:05,359 line:-2
the files that your app
provides.


47
00:02:05,359 --> 00:02:07,661 line:-2
And, if you have an app
that adopts the existing


48
00:02:07,661 --> 00:02:09,296 line:-1
SiriKit messages intent,


49
00:02:09,296 --> 00:02:11,632 line:-2
we'll now automatically
expose this capability


50
00:02:11,632 --> 00:02:14,268 line:-2
via a custom Send Message
action from your app.


51
00:02:16.203 --> 00:02:18.705 line:-2 align:center
We also have some exciting
new updates to Sharing,


52
00:02:18,705 --> 00:02:21,808 line:-2
and we know developers love
to build and share shortcuts.


53
00:02:21,808 --> 00:02:24,044 line:-2
This year,
we're making Shortcuts


54
00:02:24.044 --> 00:02:26.180 line:-1 align:center
much easier to distribute.


55
00:02:26,180 --> 00:02:27,514 line:-1
We also have a new file format


56
00:02:27.514 --> 00:02:30.317 line:-2 align:center
that lets you distribute
Shortcuts as files.


57
00:02:30.317 --> 00:02:32.219 line:-2 align:center
And we've enabled private
sharing,


58
00:02:32.219 --> 00:02:34.721 line:-2 align:center
which is useful for sharing
Shortcuts with your peers.


59
00:02:34.721 --> 00:02:36.356 line:-1 align:center
Let's take a look.


60
00:02:37,691 --> 00:02:39,693 line:-2
Now, anyone can download
Shortcuts,


61
00:02:39,693 --> 00:02:42,596 line:-2
without having to turn
on any special settings.


62
00:02:42,596 --> 00:02:44,565 align:center
This means that you
can distribute your


63
00:02:44,565 --> 00:02:47,100 align:center
own Shortcuts on your
website or in your app.


64
00:02:48,202 --> 00:02:51,438 line:0
For example, let's say,
you wanna give people


65
00:02:51.438 --> 00:02:54.575 line:-2 align:center
an awesome Shortcut that uses
actions from your app.


66
00:02:54.575 --> 00:02:56.877 line:-2 align:center
Now, if you build that Shortcut
and share it to iCloud,


67
00:02:56,877 --> 00:02:59,613 line:-2
Apple will notarize the Shortcut
and turn it into a link,


68
00:02:59.613 --> 00:03:01.782 line:-2 align:center
which you can feature
in your app or website


69
00:03:01.782 --> 00:03:03.951 line:-2 align:center
and make it easy
for people to download.


70
00:03:05.452 --> 00:03:07.354 line:-2 align:center
We're also keeping people
in control of their data


71
00:03:07,354 --> 00:03:09,823 line:-2
by presenting more
specific permission prompts


72
00:03:09.823 --> 00:03:12.759 line:-2 align:center
when they download a Shortcut
that passes data into your app


73
00:03:12,759 --> 00:03:14,661 line:-1
like a photo from their library.


74
00:03:14.661 --> 00:03:17.064 line:-1 align:center
And there's more.


75
00:03:17.064 --> 00:03:20.267 line:-2 align:center
Shortcuts can now also be shared
as files, which is useful


76
00:03:20.267 --> 00:03:24.204 line:-2 align:center
if you need to distribute
Shortcuts outside of iCloud.


77
00:03:24,204 --> 00:03:25,672 line:-1
And just like iCloud links,


78
00:03:25.672 --> 00:03:28.909 line:-2 align:center
Shortcuts files are notarized by
Apple to make sure they're safe.


79
00:03:30.410 --> 00:03:31.478 line:-1 align:center
Last but not least,


80
00:03:31.478 --> 00:03:33.647 line:-2 align:center
there's a new mode for sharing
Shortcuts privately,


81
00:03:33.647 --> 00:03:36.183 line:-2 align:center
without uploading to iCloud,
that you can use


82
00:03:36.183 --> 00:03:39.319 line:-2 align:center
for sharing with contacts
or for saving personal backups.


83
00:03:41,088 --> 00:03:42,990 line:-2
Shortcuts files are
signed with the identity


84
00:03:42,990 --> 00:03:44,925 line:-1
of the person who sent them.


85
00:03:44,925 --> 00:03:46,426 line:-2
If you need to re-sign
a Shortcut,


86
00:03:46.426 --> 00:03:49.096 line:-2 align:center
you can use the new
Shortcuts command-line tool.


87
00:03:49.096 --> 00:03:51.698 line:-2 align:center
So those are all the exciting
new updates


88
00:03:51,698 --> 00:03:53,567 line:-1
for Shortcuts this year.


89
00:03:53,567 --> 00:03:55,936 line:-2
Now let's take a look
at how Shortcuts fits in


90
00:03:55.936 --> 00:03:58.539 line:-2 align:center
with our existing
Mac automation technologies.


91
00:03:58,539 --> 00:04:02,309 line:-2
The Mac has a long history
of deep support for Automation,


92
00:04:02.309 --> 00:04:06.313 line:-2 align:center
including AppleScript,
Shell Scripting, and Automator.


93
00:04:06.313 --> 00:04:08.782 line:-2 align:center
We're excited to share
that Shortcuts has full support


94
00:04:08,782 --> 00:04:10,417 line:-2
for AppleScripts
and Shell Scripting.


95
00:04:10.417 --> 00:04:13.654 line:-2 align:center
We have new actions,
built right into Shortcuts,


96
00:04:13.654 --> 00:04:15.322 line:-2 align:center
that let you
write and run scripts


97
00:04:15.322 --> 00:04:17.324 line:-2 align:center
directly inside
the Shortcuts editor.


98
00:04:18,492 --> 00:04:21,195 line:-2
Next, let's take a look
at Automator.


99
00:04:21.195 --> 00:04:23.797 line:-2 align:center
Automator is an existing
automation tool on the Mac


100
00:04:23,797 --> 00:04:28,001 line:-2
that lets you create workflows
to automate repetitive tasks.


101
00:04:28,001 --> 00:04:31,605 line:-2
Shortcuts is the future
of Mac automation.


102
00:04:31,605 --> 00:04:33,740 line:-2
But we still care
deeply about Automator


103
00:04:33.740 --> 00:04:35.843 line:-1 align:center
and everyone who relies on it.


104
00:04:35,843 --> 00:04:39,446 line:-2
In order to make the transition
from Automator to Shortcuts


105
00:04:39,446 --> 00:04:42,349 line:-2
as smooth as possible,
we've built a migration tool


106
00:04:42.349 --> 00:04:46.420 line:-2 align:center
that can convert most Automator
workflows into Shortcuts.


107
00:04:46,420 --> 00:04:48,589 line:-2
For example,
if you have a great workflow


108
00:04:48.589 --> 00:04:51.658 line:-2 align:center
that makes images from PDF
documents selected in Finder,


109
00:04:51,658 --> 00:04:54,628 line:-2
Shortcuts can import that
and turn each Automator action


110
00:04:54.628 --> 00:04:56.797 line:-2 align:center
into one or more
Shortcuts actions.


111
00:04:57,865 --> 00:05:00,167 line:-2
All you have to do,
is open the workflow file


112
00:05:00.167 --> 00:05:02.202 line:-2 align:center
in the Shortcuts app
by dragging it into the app


113
00:05:02,202 --> 00:05:05,105 line:-2
or by using the right-click
menu, and that's it!


114
00:05:05,105 --> 00:05:08,242 line:-2
Your workflow is turned into
a Shortcut.


115
00:05:08.242 --> 00:05:11.745 line:-2 align:center
In order to enable the migrator,
we added all of the most popular


116
00:05:11,745 --> 00:05:15,349 line:-2
Automator actions to Shortcuts,
actions that run Shell Scripts


117
00:05:15,349 --> 00:05:18,552 line:-2
and AppleScripts,
manage your files, and more.


118
00:05:18,552 --> 00:05:20,220 line:-2
And, of course,
all of these actions


119
00:05:20,220 --> 00:05:22,823 line:-1
are supported by our migrator.


120
00:05:22.823 --> 00:05:25.926 line:-2 align:center
Now, let's talk about how your
app fits in to Shortcuts


121
00:05:25,926 --> 00:05:28,362 line:-2
and the value it can
create for customers.


122
00:05:28.362 --> 00:05:31.265 line:-2 align:center
The main way your app can
integrate with Shortcuts is


123
00:05:31,265 --> 00:05:34,434 line:-2
by exposing its capabilities via
"actions."


124
00:05:34.434 --> 00:05:36.370 line:-2 align:center
By exposing actions
to Shortcuts,


125
00:05:36,370 --> 00:05:38,805 line:-2
people can use
your app's functionality faster,


126
00:05:38.805 --> 00:05:41.308 line:-2 align:center
create powerful workflows
using your apps,


127
00:05:41,308 --> 00:05:42,776 line:-1
and last but not least,


128
00:05:42,776 --> 00:05:45,679 line:-2
use your app
in conjunction with other apps.


129
00:05:45.679 --> 00:05:48.348 line:-2 align:center
Let's take a deeper look
at these.


130
00:05:48.348 --> 00:05:51.251 line:-2 align:center
There are so many places
in macOS where people


131
00:05:51.251 --> 00:05:53.020 line:-1 align:center
can run their shortcuts.


132
00:05:53,020 --> 00:05:55,722 line:-2
If you expose an action from
your app, all of a sudden,


133
00:05:55,722 --> 00:05:58,759 line:-2
people will be able to use it
from the Shortcuts app itself,


134
00:05:58,759 --> 00:06:01,495 line:-2
the Shortcuts menu bar,
by typing a Keyboard shortcut,


135
00:06:01,495 --> 00:06:04,364 line:-2
by searching in Spotlight,
and much more.


136
00:06:06,500 --> 00:06:08,602 line:-2
So you're opening people up
to use your features


137
00:06:08.602 --> 00:06:11.638 line:-2 align:center
faster and in more places
than ever before.


138
00:06:11,638 --> 00:06:13,841 line:-2
And on top of that,
your app's actions can be


139
00:06:13.841 --> 00:06:17.144 line:-2 align:center
used as a part of powerful,
multi-step Shortcuts.


140
00:06:17,144 --> 00:06:18,879 line:-1
Let's say you make a to-do app


141
00:06:18,879 --> 00:06:21,114 line:-2
that lets people
manage their tasks.


142
00:06:21,114 --> 00:06:23,517 line:-2
If you expose the app's
capabilities as actions,


143
00:06:23,517 --> 00:06:25,752 line:-2
all of a sudden,
people can use those actions


144
00:06:25.752 --> 00:06:27.855 line:-1 align:center
to make powerful workflows.


145
00:06:27,855 --> 00:06:29,756 line:-2
For example, I can create
a Shortcut


146
00:06:29.756 --> 00:06:32.259 line:-2 align:center
that finds all of my to-do’s
that are due tomorrow,


147
00:06:32.259 --> 00:06:33.894 line:-1 align:center
sets the priority to high,


148
00:06:33.894 --> 00:06:36.897 line:-2 align:center
and shows them to me in a list,
all in one click.


149
00:06:36,897 --> 00:06:38,365 line:-2
Because of all
the different ways


150
00:06:38.365 --> 00:06:40.133 line:-1 align:center
you can hook actions together,


151
00:06:40,133 --> 00:06:42,569 line:-2
by exposing just a few actions,
you can enable


152
00:06:42.569 --> 00:06:46.640 line:-2 align:center
thousands of new use cases
for your app's functionality.


153
00:06:46.640 --> 00:06:49.776 line:-2 align:center
By exposing actions from your
app, you can also enable people


154
00:06:49.776 --> 00:06:52.913 line:-2 align:center
to use your app's functionality
in conjunction with other apps.


155
00:06:54.181 --> 00:06:56.383 line:-2 align:center
For example,
if you make an image editing app


156
00:06:56.383 --> 00:06:59.653 line:-2 align:center
and expose an action to apply
your app's custom image filters,


157
00:06:59,653 --> 00:07:01,655 line:-2
all of a sudden,
people can use that action


158
00:07:01.655 --> 00:07:03.490 line:-2 align:center
to make workflows
like this one


159
00:07:03.490 --> 00:07:06.126 line:-2 align:center
that lets me select a photo,
applies an image filter,


160
00:07:06,126 --> 00:07:09,897 line:-2
and posts it to social media,
all in one click.


161
00:07:09,897 --> 00:07:13,033 line:0
So, those are just a few
examples of how exposing actions


162
00:07:13,033 --> 00:07:15,903 align:center
can supercharge what people
can do with your apps.


163
00:07:15,903 --> 00:07:19,106 align:center
Be sure to check out the session
covering designing great actions


164
00:07:19,106 --> 00:07:20,774 line:0
to learn more about what
kinds of actions


165
00:07:20,774 --> 00:07:23,443 line:0
you can provide to empower
people with your apps.


166
00:07:23,944 --> 00:07:25,879 line:-2
I'm gonna hand it off
to Ian now


167
00:07:25,879 --> 00:07:28,815 line:-2
who will show you how to
actually build these actions.


168
00:07:28.815 --> 00:07:30.717 line:-1 align:center
[Ian] Hi, I'm Ian,


169
00:07:30,717 --> 00:07:32,119 line:-2
and today
I'm going to show you


170
00:07:32,119 --> 00:07:35,055 line:-2
how to build Shortcuts
actions for your Mac apps.


171
00:07:35.055 --> 00:07:37.357 line:-2 align:center
Later, I'll cover some
special considerations


172
00:07:37.357 --> 00:07:39.893 line:-2 align:center
you should keep in mind
for your integration.


173
00:07:39,893 --> 00:07:43,197 line:-2
Let's get started
with building actions.


174
00:07:43,197 --> 00:07:45,966 line:-2
Just like on iOS,
actions for Shortcuts are built


175
00:07:45.966 --> 00:07:49.736 line:-2 align:center
using the Intents framework,
which is also known as SiriKit.


176
00:07:49.736 --> 00:07:51.872 line:-2 align:center
For this session,
I'm gonna pretend that


177
00:07:51,872 --> 00:07:54,641 line:-2
I'm developing a collaborative
task management app


178
00:07:54,641 --> 00:07:56,710 line:-2
which lets people keep
track of a list of tasks


179
00:07:56,710 --> 00:07:59,313 line:-2
that they need to do,
each with their own due date,


180
00:07:59.313 --> 00:08:01.748 line:-2 align:center
and share
those tasks with others.


181
00:08:01.748 --> 00:08:04.251 line:-2 align:center
It's really important
for people to be able use


182
00:08:04.251 --> 00:08:07.654 line:-2 align:center
my app's functionality
from anywhere on the Mac.


183
00:08:07.654 --> 00:08:10.824 line:-2 align:center
By integrating with Shortcuts,
I can allow my users to build


184
00:08:10,824 --> 00:08:13,994 line:-2
multi-step Shortcuts
involving tasks in my app.


185
00:08:15,863 --> 00:08:18,332 line:-2
Looking at the app,
the primary type of content


186
00:08:18,332 --> 00:08:21,001 line:-2
the user interacts with
is a task.


187
00:08:21.001 --> 00:08:24.838 line:-2 align:center
Each task has a couple
of important attributes.


188
00:08:24,838 --> 00:08:27,274 line:-2
First, there's the title,
which is some text


189
00:08:27.274 --> 00:08:29.943 line:-2 align:center
that describes
what needs to be done.


190
00:08:29.943 --> 00:08:33.313 line:-2 align:center
Tasks also have a due date
and a link to share


191
00:08:33.313 --> 00:08:35.782 line:-1 align:center
the task with others.


192
00:08:35,782 --> 00:08:38,652 line:-2
There's a bunch of operations
you can perform related to tasks


193
00:08:38.652 --> 00:08:43.490 line:-2 align:center
in the app, as well, which we
can think of as the verbs.


194
00:08:43,490 --> 00:08:46,994 line:-2
You can add new tasks,
edit or delete existing tasks,


195
00:08:46,994 --> 00:08:50,764 line:-2
get tasks that match a certain
criteria, and, of course,


196
00:08:50.764 --> 00:08:53.800 line:-2 align:center
the app can display
a specific task to you.


197
00:08:53,800 --> 00:08:57,137 line:-2
So, for each of those verbs,
I'm going to create actions.


198
00:08:57,137 --> 00:08:59,006 line:-2
These will form the primitive
operations


199
00:08:59,006 --> 00:09:01,542 line:-2
that users can invoke,
and these actions are


200
00:09:01.542 --> 00:09:03.644 line:-2 align:center
designed so that people
can use them together.


201
00:09:05,212 --> 00:09:07,347 line:-2
For example,
you could get a task,


202
00:09:07.347 --> 00:09:10.150 line:-2 align:center
and then delete it,
by pairing those two together.


203
00:09:11.318 --> 00:09:12.819 line:-1 align:center
With just Create Task,


204
00:09:12,819 --> 00:09:14,755 line:-2
someone could create
an automated workflow


205
00:09:14,755 --> 00:09:16,924 line:-2
that takes selected text
from Notes,


206
00:09:16.924 --> 00:09:19.026 line:-2 align:center
capitalizes
the text if necessary,


207
00:09:19,026 --> 00:09:21,862 line:-2
and asks the user
to enter a due date.


208
00:09:21,862 --> 00:09:24,865 line:-2
Then, the shortcut can
pass that text and due date


209
00:09:24.865 --> 00:09:26.967 line:-1 align:center
into the Create Task action,


210
00:09:26,967 --> 00:09:30,704 line:-2
which will deliver an intent
to create the task to my app.


211
00:09:30,704 --> 00:09:32,873 line:-2
Once the task has been created
in my app,


212
00:09:32,873 --> 00:09:34,975 line:-1
my intent will return the task,


213
00:09:34,975 --> 00:09:37,544 align:center
including the sharing URL,
and the Shortcut


214
00:09:37,544 --> 00:09:39,613 line:0
can send that link
to someone in a message.


215
00:09:41.081 --> 00:09:42.516 line:-1 align:center
Now, that's just one example.


216
00:09:42.516 --> 00:09:44.251 line:-2 align:center
Because there are so many
different


217
00:09:44,251 --> 00:09:46,553 line:-2
actions in Shortcuts,
people can utilize


218
00:09:46,553 --> 00:09:50,424 line:-2
the Create Task action
in nearly infinite ways.


219
00:09:50.424 --> 00:09:53.160 line:-2 align:center
Now that I know which
actions the app will expose,


220
00:09:53.160 --> 00:09:55.229 line:-2 align:center
I'm going to get started
implementing them.


221
00:09:56.897 --> 00:09:58.332 line:-1 align:center
The first step of implementing


222
00:09:58.332 --> 00:10:01.602 line:-2 align:center
is creating an intent definition
file for your app.


223
00:10:01.602 --> 00:10:03.704 line:-2 align:center
Add this file to your Xcode
project,


224
00:10:03,704 --> 00:10:06,173 line:-2
and it will compile
alongside your source code.


225
00:10:07.674 --> 00:10:10.344 line:-2 align:center
For this presentation,
I have a fairly basic


226
00:10:10.344 --> 00:10:12.312 line:-1 align:center
SwiftUI app for Mac.


227
00:10:12,312 --> 00:10:15,182 line:-2
However, regardless of the UI
framework that you use,


228
00:10:15,182 --> 00:10:18,385 line:-2
the process of adding intents
will be very similar.


229
00:10:18,385 --> 00:10:21,255 line:-2
First, I'll create
an intent definition file.


230
00:10:23,190 --> 00:10:24,291 line:-1
In the template pane,


231
00:10:24,291 --> 00:10:26,293 line:-2
I'll search for
intent definition.


232
00:10:28,595 --> 00:10:30,631 line:-1
The default name is fine.


233
00:10:30.631 --> 00:10:33.267 line:-2 align:center
Make sure to add it to the app
target so it compiles.


234
00:10:34,968 --> 00:10:37,504 line:-2
Here's the new,
empty intent definition file.


235
00:10:38.872 --> 00:10:41.441 line:-2 align:center
Inside the file,
I'll need to define each intent


236
00:10:41,441 --> 00:10:43,410 line:-2
that the app implements,
as well as


237
00:10:43,410 --> 00:10:46,980 line:-2
other types that are used,
like task, in this case.


238
00:10:46.980 --> 00:10:49.116 line:-2 align:center
This app will have a number
of intents,


239
00:10:49,116 --> 00:10:51,385 line:-2
each which reference
this task type,


240
00:10:51,385 --> 00:10:54,154 line:-2
so I'll start by
defining our task type.


241
00:10:54.154 --> 00:10:56.623 line:-2 align:center
To do that, click the + button
in the bottom left


242
00:10:56.623 --> 00:10:57.624 line:-1 align:center
and select "New Type."


243
00:11:00,928 --> 00:11:02,462 line:-2
Each type
will automatically have


244
00:11:02,462 --> 00:11:05,065 line:-2
identifier
and displayString properties.


245
00:11:06,333 --> 00:11:09,703 line:-2
The displayString property will
work for the title of the task,


246
00:11:09,703 --> 00:11:11,772 line:-2
but we'll need to add
more properties


247
00:11:11,772 --> 00:11:14,308 line:-2
to the type for the
due date and sharing link.


248
00:11:14.308 --> 00:11:16.944 line:-2 align:center
First, I'll add the due date
property,


249
00:11:16,944 --> 00:11:19,713 line:-2
which specifies when the task
has to be completed by.


250
00:11:21,515 --> 00:11:23,717 line:-2
I'm going to choose
the Date Components type


251
00:11:23,717 --> 00:11:26,887 line:-2
since this will represent
a date and time.


252
00:11:28,388 --> 00:11:31,158 line:-2
I'll also add the URL,
which is a link to the task


253
00:11:31,158 --> 00:11:33,193 line:-2
that can be shared
with others.


254
00:11:36.196 --> 00:11:39.299 line:-2 align:center
Now that the first task is
complete, no pun intended,


255
00:11:39.299 --> 00:11:42.069 line:-2 align:center
I'll move on
and define an intent.


256
00:11:42.069 --> 00:11:44.505 line:-2 align:center
This will be the intent
that lets you create a task.


257
00:11:48.242 --> 00:11:50.244 line:-2 align:center
I'll give it a name,
"Create Task,"


258
00:11:50.244 --> 00:11:52.212 line:-2 align:center
and change the category
to Create.


259
00:11:57,818 --> 00:11:59,586 line:-2
I'll also
write a short description,


260
00:11:59.586 --> 00:12:01.221 line:-1 align:center
describing what the intent does.


261
00:12:02,923 --> 00:12:04,758 line:-2
Users will see this
when they're looking through


262
00:12:04.758 --> 00:12:07.394 line:-2 align:center
the list of actions
that the app implements.


263
00:12:07.394 --> 00:12:10.831 line:-2 align:center
Next, I will define
the parameters for the intent.


264
00:12:10.831 --> 00:12:12.766 line:-2 align:center
Think of the intent like
a function,


265
00:12:12,766 --> 00:12:15,502 line:-2
and parameters as the arguments
that must be passed in


266
00:12:15.502 --> 00:12:17.604 line:-2 align:center
for the function
to do its work.


267
00:12:19.840 --> 00:12:22.409 line:-2 align:center
In order to create a new task,
my app will need to know


268
00:12:22,409 --> 00:12:24,111 line:-1
the title and the due date,


269
00:12:24.111 --> 00:12:26.947 line:-2 align:center
so I will make a parameter
for each of those.


270
00:12:26,947 --> 00:12:29,249 line:-2
The sharing link will not need
to be collected up front,


271
00:12:29,249 --> 00:12:32,653 line:-2
since the app will generate
one when the task is made.


272
00:12:32.653 --> 00:12:35.122 line:-2 align:center
Let's start by adding
a parameter for the title.


273
00:12:37,457 --> 00:12:39,359 line:-1
We'll select String as the type.


274
00:12:41,261 --> 00:12:43,497 line:-2
Each type of parameter
has some configuration options


275
00:12:43,497 --> 00:12:45,532 line:-1
associated with it.


276
00:12:45,532 --> 00:12:48,769 line:-2
You can specify a default value,
if that makes sense.


277
00:12:48.769 --> 00:12:52.539 line:-2 align:center
But for this case, I'll just
leave it as an empty string.


278
00:12:52,539 --> 00:12:54,641 line:-2
Next, I'll add the due date
parameter,


279
00:12:54,641 --> 00:12:56,310 line:-1
with a Date Components type.


280
00:13:03.917 --> 00:13:06.820 line:-2 align:center
And I'll add a prompt here,
so if the user doesn't enter


281
00:13:06,820 --> 00:13:11,024 line:-2
a date ahead of time, the app
can ask them for one at runtime.


282
00:13:13.460 --> 00:13:17.064 line:-2 align:center
Now that both parameters have
been defined, we're almost done.


283
00:13:17,064 --> 00:13:20,100 line:-2
Finally, I need to scroll down
to the Shortcuts app section


284
00:13:20.100 --> 00:13:22.703 line:-1 align:center
and fill in a few more things.


285
00:13:22,703 --> 00:13:25,906 line:-2
First, I'll specify
an input parameter.


286
00:13:25.906 --> 00:13:28.108 line:-2 align:center
Since often users will
be taking text from


287
00:13:28.108 --> 00:13:30.477 line:-2 align:center
somewhere else and passing it
into our action,


288
00:13:30,477 --> 00:13:34,014 line:-2
I will pick the title
parameter to be the input.


289
00:13:34,014 --> 00:13:36,917 line:-2
This will improve the experience
when building the shortcut,


290
00:13:36.917 --> 00:13:40.087 line:-2 align:center
so if the user already
has text from a previous action


291
00:13:40,087 --> 00:13:42,356 line:-2
in their shortcut,
it'll be filled in automatically


292
00:13:42,356 --> 00:13:44,892 line:-2
for them when they add
our action.


293
00:13:44,892 --> 00:13:48,562 line:-2
The last thing I need to do
is define a summary.


294
00:13:48.562 --> 00:13:50.330 line:-2 align:center
This string is displayed
to the user


295
00:13:50,330 --> 00:13:53,200 line:-2
when they look at
this action in a shortcut.


296
00:13:53,200 --> 00:13:56,537 line:-2
I will call it
"Create task with due date."


297
00:13:59,506 --> 00:14:02,109 line:-2
Both of our parameters are
required to create a task,


298
00:14:02.109 --> 00:14:04.511 line:-2 align:center
so I'm putting both
of those in the summary,


299
00:14:04.511 --> 00:14:07.714 line:-2 align:center
so they are always visible
when you look at the action.


300
00:14:07.714 --> 00:14:09.483 line:-2 align:center
If you have more parameters
that you don't wanna


301
00:14:09,483 --> 00:14:12,586 line:-2
put in the summary,
feel free to leave them out.


302
00:14:12.586 --> 00:14:14.321 line:-2 align:center
If you do this,
the user will be able


303
00:14:14,321 --> 00:14:16,423 line:-2
to expand the action
and edit those.


304
00:14:18.458 --> 00:14:21.862 line:-2 align:center
Once you've defined intents,
Xcode will generate classes


305
00:14:21,862 --> 00:14:24,965 line:-2
and protocols for you to use
in your implementation.


306
00:14:24,965 --> 00:14:26,934 line:-2
Now,
I'm going to build the app.


307
00:14:26,934 --> 00:14:28,969 line:-2
This will make sure
there's no problems


308
00:14:28.969 --> 00:14:31.605 line:-2 align:center
with the intent definition
before we continue.


309
00:14:31.605 --> 00:14:35.809 line:-2 align:center
In the build log, I now see
some new code getting built.


310
00:14:35,809 --> 00:14:38,545 line:-2
These source files are
generated by Xcode based on


311
00:14:38,545 --> 00:14:40,614 line:-2
what was put into
the intent definition.


312
00:14:40.614 --> 00:14:43.884 line:-2 align:center
Xcode generated source
code for the Task type,


313
00:14:43.884 --> 00:14:46.420 line:-1 align:center
as well as the CreateTaskIntent.


314
00:14:47.821 --> 00:14:51.391 line:-2 align:center
These new types can now be
used in our app's codebase.


315
00:14:51,391 --> 00:14:55,028 line:-2
Additionally, now that
the intent has been defined,


316
00:14:55.028 --> 00:14:58.732 line:-2 align:center
I can launch the Shortcuts app
and create a new shortcut


317
00:14:58.732 --> 00:15:02.236 line:-2 align:center
and search for
the new Create Task action.


318
00:15:02.236 --> 00:15:05.706 line:-2 align:center
It won't work yet, since I
haven't written any code.


319
00:15:05.706 --> 00:15:07.941 line:-2 align:center
Next, the app will need
to dispatch


320
00:15:07.941 --> 00:15:10.177 line:-1 align:center
and handle incoming intents.


321
00:15:10,177 --> 00:15:12,513 line:-2
This code will run when
someone runs the action


322
00:15:12,513 --> 00:15:14,181 line:-1
through Shortcuts or Siri.


323
00:15:15,749 --> 00:15:17,784 line:-2
Apps need to decide
which process will


324
00:15:17,784 --> 00:15:20,988 line:-2
handle their intents,
and there's two options.


325
00:15:20.988 --> 00:15:24.124 line:-2 align:center
First, handling them in-app,
or second,


326
00:15:24.124 --> 00:15:26.126 line:-2 align:center
building a separate
intents extension.


327
00:15:27,494 --> 00:15:30,163 line:-2
In-app intent handling
allows an app to manipulate


328
00:15:30.163 --> 00:15:32.633 line:-2 align:center
its state in response
to incoming intents


329
00:15:32,633 --> 00:15:35,302 line:-2
which get delivered
to the app delegate.


330
00:15:35.302 --> 00:15:37.538 line:-2 align:center
Most apps should start
with this and move


331
00:15:37.538 --> 00:15:39.540 line:-2 align:center
to an intents extension,
if necessary.


332
00:15:40,908 --> 00:15:43,243 line:-2
An intents extension is
a lightweight,


333
00:15:43.243 --> 00:15:45.479 line:-2 align:center
standalone process
that can handle intents


334
00:15:45,479 --> 00:15:47,648 line:-1
on behalf of an app.


335
00:15:47,648 --> 00:15:49,516 line:-2
Since every time
an intent is run


336
00:15:49,516 --> 00:15:52,686 line:-2
a process needs to be launched,
building an intents extension


337
00:15:52.686 --> 00:15:54.955 line:-2 align:center
can help be
as efficient as possible,


338
00:15:54,955 --> 00:15:56,990 line:-2
since the app itself
won't have to launch.


339
00:16:00.894 --> 00:16:03.864 line:-2 align:center
Apps and intents extensions
will be asked to instantiate


340
00:16:03,864 --> 00:16:08,035 line:-2
and return an intent handler
object for each incoming intent.


341
00:16:08,035 --> 00:16:10,771 line:-2
Let's look at the APIs
you should implement to do this.


342
00:16:13,540 --> 00:16:16,243 line:-2
For in-app intent handling,
there are AppDelegate methods


343
00:16:16,243 --> 00:16:18,345 line:-2
that let you
return your intent handler.


344
00:16:20,514 --> 00:16:23,383 line:-2
In macOS Monterey,
this API is now available


345
00:16:23.383 --> 00:16:26.520 line:-2 align:center
for NSApplicationDelegate,
as well.


346
00:16:26.520 --> 00:16:30.123 line:-2 align:center
For intents extensions,
subclasses of INExtension


347
00:16:30,123 --> 00:16:32,693 line:-2
can override
the handlerForIntent method.


348
00:16:36,563 --> 00:16:38,265 line:0
For more information
about the differences


349
00:16:38,265 --> 00:16:41,134 align:center
between in-app intent handling
and intents extensions,


350
00:16:41,134 --> 00:16:45,005 line:0
watch the "Empower your intents"
session from WWDC 2020.


351
00:16:46,406 --> 00:16:48,642 line:-2
Now, I'll go into
the app and implement


352
00:16:48,642 --> 00:16:50,777 line:-1
in-app intent handling.


353
00:16:50,777 --> 00:16:53,847 line:-2
The first thing I need to do
is add the CreateTaskIntent


354
00:16:53.847 --> 00:16:55.983 line:-2 align:center
as a supported intent
for the app.


355
00:16:55.983 --> 00:16:58.385 line:-2 align:center
This lets the system
know that this intent


356
00:16:58.385 --> 00:17:00.821 line:-2 align:center
should be delivered
into the app delegate.


357
00:17:03,390 --> 00:17:05,893 line:-2
Next, go to the main
app source code.


358
00:17:08.228 --> 00:17:11.465 line:-2 align:center
First, I'll create an app
delegate for the app.


359
00:17:11.465 --> 00:17:14.768 line:-2 align:center
Since this is using
the SwiftUI app life cycle,


360
00:17:14,768 --> 00:17:17,204 line:-2
I'll also need to create
a delegate adaptor


361
00:17:17,204 --> 00:17:19,473 line:-2
to hook
the object up to SwiftUI.


362
00:17:21.408 --> 00:17:24.111 line:-2 align:center
To receive intents,
import the intents framework


363
00:17:24.111 --> 00:17:26.680 line:-2 align:center
and implement
the handlerForIntent method.


364
00:17:29,750 --> 00:17:31,218 line:-2
Now that there's
a dispatch method,


365
00:17:31,218 --> 00:17:34,354 line:-2
the next step is to implement
a handler for the intent.


366
00:17:36.023 --> 00:17:37.991 line:-2 align:center
For this example,
I'll create a new class


367
00:17:37,991 --> 00:17:39,459 line:-1
to handle the intent,


368
00:17:39,459 --> 00:17:42,262 line:-2
and this can be
any object in your app.


369
00:17:42,262 --> 00:17:43,597 line:-2
The intent handler
must conform


370
00:17:43.597 --> 00:17:46.133 line:-2 align:center
to the generated protocol
for this intent


371
00:17:46,133 --> 00:17:48,602 line:-2
which ends with the word
"Handling."


372
00:17:48,602 --> 00:17:50,137 line:-1
For the Create Task intent,


373
00:17:50,137 --> 00:17:52,539 line:-2
it's named
CreateTaskIntentHandling.


374
00:17:54.942 --> 00:17:57.110 line:-2 align:center
Then, I'll update
the handlerForIntent


375
00:17:57,110 --> 00:17:59,479 line:-2
method to return a new
IntentHandler object


376
00:17:59.479 --> 00:18:02.082 line:-2 align:center
when the intent
is a CreateTaskIntent.


377
00:18:05.185 --> 00:18:08.422 line:-2 align:center
Xcode should let you know which
methods you need to implement.


378
00:18:10.257 --> 00:18:12.759 line:-2 align:center
Intent handling protocols
can contain


379
00:18:12,759 --> 00:18:14,928 line:-2
four different types
of methods:


380
00:18:14,928 --> 00:18:18,665 line:-2
resolve, provide options,
confirm, and handle.


381
00:18:18,665 --> 00:18:20,334 line:-2
A resolve method will be
generated


382
00:18:20,334 --> 00:18:22,336 line:-1
for each of your parameters.


383
00:18:22,336 --> 00:18:24,972 line:-2
This will be your chance to
check if the parameter is valid


384
00:18:24,972 --> 00:18:27,407 line:-2
and tell the system
what to do if it's not.


385
00:18:28,809 --> 00:18:31,512 line:-2
For this intent,
there are two resolve methods,


386
00:18:31.512 --> 00:18:34.147 line:-2 align:center
one for the title,
and another for the due date.


387
00:18:36.316 --> 00:18:38.852 line:-2 align:center
For the title parameter,
the app needs to make sure


388
00:18:38,852 --> 00:18:41,522 line:-2
the value is not nil
and isn't empty.


389
00:18:44,591 --> 00:18:47,427 line:-2
If the title's empty,
it returns needsValue,


390
00:18:47.427 --> 00:18:50.397 line:-2 align:center
which tells the system to prompt
the user to enter a value.


391
00:18:52,332 --> 00:18:53,700 line:-1
For the due date parameter,


392
00:18:53.700 --> 00:18:55.602 line:-2 align:center
something similar
is implemented


393
00:18:55.602 --> 00:18:57.804 line:-2 align:center
where the due date
is validated to make sure


394
00:18:57,804 --> 00:18:59,773 line:-1
it's not nil.


395
00:18:59,773 --> 00:19:02,543 line:-2
Looking at the app's
requirements for due dates,


396
00:19:02,543 --> 00:19:05,779 line:-2
the resolve method also needs
to ensure that all due dates


397
00:19:05.779 --> 00:19:08.215 line:-2 align:center
are in the future
and show an error to the user


398
00:19:08,215 --> 00:19:10,050 line:-1
if the date is in the past.


399
00:19:12,452 --> 00:19:14,988 line:-2
To do this, I'll go back
to our intent definition file


400
00:19:14.988 --> 00:19:17.124 line:-2 align:center
and add
a custom validation error.


401
00:19:23,564 --> 00:19:27,000 line:-2
I'll give it a code,
invalidDate,


402
00:19:27.000 --> 00:19:28.969 line:-1 align:center
and an error message


403
00:19:28,969 --> 00:19:31,171 line:-2
saying that the due date
must be in the future.


404
00:19:33,273 --> 00:19:35,943 line:-2
Now, the app can return
the unsupported result


405
00:19:35.943 --> 00:19:38.412 line:-2 align:center
with the custom validation error
that I just added,


406
00:19:38.412 --> 00:19:40.247 line:-2 align:center
which will display
the error message


407
00:19:40,247 --> 00:19:43,650 line:-1
about the date being invalid.


408
00:19:43,650 --> 00:19:46,787 line:-2
Another type of method
is provide options.


409
00:19:46,787 --> 00:19:48,589 line:-2
You'll see this for
any parameter


410
00:19:48.589 --> 00:19:51.291 line:-2 align:center
with the Dynamic Options
setting enabled.


411
00:19:51,291 --> 00:19:53,794 line:-2
If any of your parameters
only has a finite set


412
00:19:53,794 --> 00:19:56,296 line:-2
of possible values,
and you don't want users


413
00:19:56,296 --> 00:19:58,832 line:-2
to be able to enter their
own arbitrary values,


414
00:19:58.832 --> 00:20:01.768 line:-2 align:center
you can enable dynamic
options for that parameter.


415
00:20:02,970 --> 00:20:05,973 line:-2
This will create a method called
provide options that lets you


416
00:20:05,973 --> 00:20:10,010 line:-2
specify what those possible
values are as the intent runs,


417
00:20:10.010 --> 00:20:13.380 line:-2 align:center
and Shortcuts will ask the user
to pick from one of the values.


418
00:20:13,380 --> 00:20:16,316 line:-2
After the parameters
are resolved individually,


419
00:20:16,316 --> 00:20:19,486 line:-2
you can optionally also
implement the confirm method,


420
00:20:19,486 --> 00:20:21,822 line:-2
which is where you should
make sure everything looks good,


421
00:20:21.822 --> 00:20:23.690 line:-2 align:center
and you should be able
to handle the intent


422
00:20:23,690 --> 00:20:26,093 line:-2
and throw an error
if there's a problem.


423
00:20:26.093 --> 00:20:29.263 line:-2 align:center
If, for example, a network
connection is required,


424
00:20:29.263 --> 00:20:31.098 line:-2 align:center
here is where you should check
to make sure


425
00:20:31.098 --> 00:20:32.900 line:-2 align:center
you can actually
reach the network.


426
00:20:34.368 --> 00:20:36.403 line:-2 align:center
Finally,
the handle method is where


427
00:20:36,403 --> 00:20:39,273 line:-2
you actually do what the intent
is telling you to do.


428
00:20:40,541 --> 00:20:42,876 line:-2
The handle method
will create the task in the app


429
00:20:42.876 --> 00:20:45.078 line:-1 align:center
and return success.


430
00:20:45,078 --> 00:20:46,980 line:-2
After the action creates
the task,


431
00:20:46,980 --> 00:20:49,082 line:-2
it should provide
the task as output


432
00:20:49.082 --> 00:20:51.318 line:-2 align:center
so later actions
can use attributes


433
00:20:51,318 --> 00:20:53,587 line:-1
such as the sharing URL.


434
00:20:53,587 --> 00:20:55,255 line:-1
Back in the intent editor,


435
00:20:55.255 --> 00:20:58.192 line:-2 align:center
I'll go to the response
section for the intent.


436
00:20:58,192 --> 00:21:01,161 line:-2
In here, I'll add a property
for the task that was created.


437
00:21:05,132 --> 00:21:07,601 line:-2
I'll select the task type
that I made before.


438
00:21:07,601 --> 00:21:10,737 line:-2
I'll select that property as
the output of the intent,


439
00:21:10.737 --> 00:21:13.207 line:-2 align:center
to make it available
to Shortcuts.


440
00:21:14,174 --> 00:21:16,410 line:-2
And now, back in the code,
the response will have


441
00:21:16.410 --> 00:21:19.613 line:-2 align:center
a task property where I
can assign the task object.


442
00:21:22,382 --> 00:21:23,817 line:-1
Once this is done,


443
00:21:23,817 --> 00:21:26,787 line:-2
your intent should appear as
an action in the Shortcuts app.


444
00:21:26,787 --> 00:21:28,755 line:-2
So, be sure to spend
some time testing it


445
00:21:28,755 --> 00:21:31,425 line:-2
and trying all the ways
people could use it.


446
00:21:31,425 --> 00:21:34,761 line:-2
To begin testing, I'll open
the Shortcuts app again


447
00:21:34,761 --> 00:21:36,797 line:-2
and look at
the Create Task action.


448
00:21:39,299 --> 00:21:43,370 line:-2
I'll fill in a name
for the task and a date--


449
00:21:43,370 --> 00:21:44,371 line:-1
"Tomorrow at 3:00 p.m."


450
00:21:47.007 --> 00:21:48.976 line:-1 align:center
When I hit the run button,


451
00:21:48,976 --> 00:21:51,378 line:-2
the task
gets created successfully.


452
00:21:51.378 --> 00:21:54.414 line:-2 align:center
However, if I change the date
to "Yesterday at 3:00 p.m."...


453
00:21:58.418 --> 00:22:02.689 line:-2 align:center
It'll show the error message,
just as we expected.


454
00:22:02,689 --> 00:22:05,392 line:-2
So that's it for building
an action in Shortcuts.


455
00:22:06,360 --> 00:22:09,630 line:-2
Finally, today I'll go over
some considerations


456
00:22:09,630 --> 00:22:11,164 line:-1
that you should keep in mind


457
00:22:11,164 --> 00:22:13,500 line:-2
when developing
for Shortcuts on the Mac.


458
00:22:16.003 --> 00:22:18.205 line:-2 align:center
I'm going to cover four
different types of apps


459
00:22:18,205 --> 00:22:20,874 line:-2
including apps that are
built with Mac Catalyst,


460
00:22:20,874 --> 00:22:24,878 line:-2
that work with files,
that deploy to both iOS and Mac,


461
00:22:24.878 --> 00:22:27.714 line:-2 align:center
and apps and tools
that need to run Shortcuts.


462
00:22:30,484 --> 00:22:32,686 line:-2
First, if you're using
Mac Catalyst to bring your


463
00:22:32,686 --> 00:22:36,657 line:-2
iOS app to the Mac, here's a few
things you need to know.


464
00:22:36,657 --> 00:22:39,293 line:-2
In macOS Monterey,
your apps can now use


465
00:22:39,293 --> 00:22:43,330 line:-2
the same Intents APIs
if it's built with Mac Catalyst.


466
00:22:43,330 --> 00:22:44,932 line:-1
If you're building a new app,


467
00:22:44.932 --> 00:22:47.668 line:-2 align:center
everything should work
the same as it does on iOS.


468
00:22:49,136 --> 00:22:52,339 line:-2
However, if your app
is already available on Mac,


469
00:22:52.339 --> 00:22:55.209 line:-2 align:center
and you integrated with
the Intents framework on iOS,


470
00:22:55,209 --> 00:22:57,077 line:-2
it's likely
that you have compiled out


471
00:22:57,077 --> 00:23:00,848 line:-2
your Intents integration
in the process of coming to Mac.


472
00:23:00,848 --> 00:23:03,050 line:0
So, make sure to audit your code


473
00:23:03,050 --> 00:23:06,587 align:center
to re-enable this functionality
when running on macOS Monterey.


474
00:23:07.754 --> 00:23:10.057 line:-2 align:center
Another type of app
I'd like to highlight


475
00:23:10,057 --> 00:23:12,059 line:-1
is a document-based app.


476
00:23:12,059 --> 00:23:14,795 line:-2
In the demo before,
our task management app


477
00:23:14,795 --> 00:23:18,932 line:-2
operates on tasks which exist
entirely within the app.


478
00:23:18.932 --> 00:23:21.802 line:-2 align:center
However, many other apps
operate on documents


479
00:23:21,802 --> 00:23:24,638 line:-1
that exist as files on disk.


480
00:23:24,638 --> 00:23:27,107 line:-1
In iOS 15 and macOS Monterey,


481
00:23:27,107 --> 00:23:30,177 line:-2
file parameters for intents
allow users to select


482
00:23:30,177 --> 00:23:34,047 line:-2
specific files and pass them
into your app's actions.


483
00:23:34.047 --> 00:23:37.117 line:-2 align:center
If your app deals primarily
with file-based documents


484
00:23:37,117 --> 00:23:38,285 line:-1
rather than a database,


485
00:23:38,285 --> 00:23:40,787 line:-2
consider building
a suite of actions


486
00:23:40,787 --> 00:23:42,990 line:-1
that operate on files.


487
00:23:42.990 --> 00:23:45.759 line:-2 align:center
For example, a spreadsheet app
can create an action


488
00:23:45,759 --> 00:23:47,160 line:-1
to open a document


489
00:23:47.160 --> 00:23:49.963 line:-2 align:center
or to add data to a row
of a specific file.


490
00:23:51,798 --> 00:23:54,301 line:0
Another really cool example
of how third-party Shortcuts


491
00:23:54,301 --> 00:23:56,737 align:center
can work with files
is shown in this session


492
00:23:56,737 --> 00:23:58,205 line:0
from Sound Analysis.


493
00:24:00,908 --> 00:24:04,244 line:-2
If you are developing an app
that exists on both iOS and Mac,


494
00:24:04.244 --> 00:24:06.947 line:-2 align:center
in order for your actions
to work on both platforms,


495
00:24:06,947 --> 00:24:08,649 line:-2
you should deploy
the same intents


496
00:24:08.649 --> 00:24:11.251 line:-1 align:center
in both copies of your app.


497
00:24:11,251 --> 00:24:13,220 line:-2
This will allow people
to build a shortcut


498
00:24:13,220 --> 00:24:17,224 line:-2
on one platform and have it work
the same way on the other.


499
00:24:17.224 --> 00:24:18.926 line:-2 align:center
To do this,
you should compile the same


500
00:24:18,926 --> 00:24:21,461 line:-2
exact intent definition
to both apps,


501
00:24:21,461 --> 00:24:24,731 line:-2
and make sure the intents share
the same name and parameters.


502
00:24:26,867 --> 00:24:28,502 line:0
Sometimes,
your apps may have different


503
00:24:28,502 --> 00:24:31,071 line:0
bundle identifiers
across platforms,


504
00:24:31,071 --> 00:24:32,539 align:center
and this is okay.


505
00:24:32,539 --> 00:24:34,208 align:center
Shortcuts will handle this
for you,


506
00:24:34,208 --> 00:24:35,576 line:0
but please keep in mind


507
00:24:35,576 --> 00:24:38,545 line:0
that the intents with the same
name will only be shared


508
00:24:38,545 --> 00:24:41,615 align:center
among apps deployed via the same
Apple Developer team.


509
00:24:43.684 --> 00:24:45.953 line:-2 align:center
Also, if you ever need
to upgrade users


510
00:24:45,953 --> 00:24:49,456 line:-2
from one version of your app
to another, on iOS 15,


511
00:24:49,456 --> 00:24:52,659 line:-2
as long as the two apps
are from the same developer


512
00:24:52,659 --> 00:24:54,461 line:-1
and use the same intent name,


513
00:24:54.461 --> 00:24:56.396 line:-2 align:center
your app's Shortcuts
will automatically transfer


514
00:24:56,396 --> 00:24:58,232 line:-1
from one to the other.


515
00:24:58.232 --> 00:25:01.368 line:-2 align:center
Finally, if you'd like to run
Shortcuts from your app


516
00:25:01.368 --> 00:25:04.505 line:-2 align:center
or command-line tool, there
are two methods to consider.


517
00:25:05,472 --> 00:25:08,208 line:-2
First, Shortcuts exposes
a scripting interface


518
00:25:08.208 --> 00:25:10.043 line:-2 align:center
which lets Mac apps
and AppleScripts


519
00:25:10.043 --> 00:25:12.913 line:-1 align:center
list and run Shortcuts.


520
00:25:12,913 --> 00:25:15,382 line:-2
Additionally, there's a
Shortcuts command-line tool


521
00:25:15.382 --> 00:25:18.352 line:-2 align:center
which lets you list and run
Shortcuts in your Shell Scripts


522
00:25:18,352 --> 00:25:20,120 line:-2
or command-line tools,
as well.


523
00:25:21.421 --> 00:25:24.224 line:-2 align:center
If you develop an app
or a script that would


524
00:25:24.224 --> 00:25:26.593 line:-2 align:center
benefit from the ability
to run Shortcuts,


525
00:25:26,593 --> 00:25:29,630 line:-2
you should use
the Scripting interface.


526
00:25:29.630 --> 00:25:32.266 line:-2 align:center
By communicating with
the "Shortcuts Events" process,


527
00:25:32,266 --> 00:25:34,268 line:-2
your app can get
a list of shortcuts


528
00:25:34,268 --> 00:25:38,005 line:-2
that the user has set up,
as well as start running one.


529
00:25:39.339 --> 00:25:41.909 line:-2 align:center
In AppleScript, you can
accomplish this by telling


530
00:25:41,909 --> 00:25:45,646 line:-2
the "Shortcuts Events" process
to run a shortcut by name.


531
00:25:47.514 --> 00:25:49.183 line:-2 align:center
Using the Scripting Bridge
framework,


532
00:25:49,183 --> 00:25:52,586 line:-2
you can ask the Shortcuts Events
process to run a shortcut


533
00:25:52,586 --> 00:25:55,656 line:-2
directly from your Swift
or Objective-C apps.


534
00:25:55.656 --> 00:25:59.293 line:-2 align:center
For sandbox apps, you'll need to
add an entitlement called


535
00:25:59.293 --> 00:26:02.229 line:-2 align:center
"com.apple.security.scripting
targets."


536
00:26:03,764 --> 00:26:05,566 line:-2
In order to access
the list of shortcuts


537
00:26:05.566 --> 00:26:07.234 line:-2 align:center
and run them,
you'll need to add


538
00:26:07,234 --> 00:26:11,104 line:-2
the "com.apple.shortcuts.run"
target.


539
00:26:11,104 --> 00:26:14,608 line:0
Finally, macOS Monterey also
includes a command-line tool


540
00:26:14,608 --> 00:26:17,611 line:0
that can list shortcuts
and run them by name.


541
00:26:17,611 --> 00:26:19,580 line:-2
If you have command-line
tools or scripts, they can


542
00:26:19.580 --> 00:26:22.516 line:-2 align:center
integrate with Shortcuts
via this interface.


543
00:26:22,516 --> 00:26:27,087 line:-2
So, to wrap up, Shortcuts is now
available on the Mac,


544
00:26:27,087 --> 00:26:28,989 line:-2
and no matter what
type of app you have,


545
00:26:28.989 --> 00:26:32.559 line:-2 align:center
you should participate
in the Shortcuts ecosystem.


546
00:26:32,559 --> 00:26:34,595 line:-1
By adding actions for your app,


547
00:26:34.595 --> 00:26:36.830 line:-2 align:center
you can multiply what
people can do with it.


548
00:26:37.731 --> 00:26:40.267 line:-2 align:center
Shortcuts lets people be
creative with your apps.


549
00:26:40,267 --> 00:26:41,802 line:-2
You might be delighted
to find out


550
00:26:41,802 --> 00:26:44,938 line:-2
what sorts of Shortcuts people
build with your actions.


551
00:26:44.938 --> 00:26:46.940 line:-1 align:center
[percussive music]

