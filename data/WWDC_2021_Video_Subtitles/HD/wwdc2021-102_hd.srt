2
00:00:17.251 --> 00:00:21.588 line:-3
[Susan] Welcome to the WWDC2021
platform state of the union.


3
00:00:21.622 --> 00:00:24.091 line:-2
WWDC is a time
when we come together


4
00:00:24.124 --> 00:00:27.528 line:-2
as a developer community to look
at what the near future holds


5
00:00:27.561 --> 00:00:28.629 line:-1
for our platforms.


6
00:00:28.662 --> 00:00:32.566 line:-2
I also want to reflect a bit
on how the work you did


7
00:00:32.599 --> 00:00:36.136 line:-2
helped all of us to get
through this past year.


8
00:00:36.170 --> 00:00:39.840 line:-2
Your apps and your creativity
have enabled people


9
00:00:39.873 --> 00:00:42.276 line:-2
to find new ways
to keep things moving


10
00:00:42.309 --> 00:00:45.412 line:-2
under extraordinary
circumstances.


11
00:00:45.445 --> 00:00:47.447 line:-1
There are so many great examples


12
00:00:47.481 --> 00:00:49.583 line:-2
of developers making
a difference,


13
00:00:49.616 --> 00:00:52.419 line:-2
and we know there's much more
we can do


14
00:00:52.452 --> 00:00:55.289 line:-2
to help you make the world
better faster.


15
00:00:55.322 --> 00:01:00.260 line:-2
So this year we're delivering
tools, technologies, and APIs


16
00:01:00.294 --> 00:01:02.996 line:-2
designed to help you
accomplish more.


17
00:01:03.030 --> 00:01:05.766 line:-2
And we'll be talking today
about three big areas


18
00:01:05.799 --> 00:01:07.701 line:-1
where we're making that happen.


19
00:01:07.734 --> 00:01:09.469 line:-2
First, we'll talk
about the things


20
00:01:09.503 --> 00:01:11.371 line:-1
that help you build great apps:


21
00:01:11.405 --> 00:01:15.108 line:-2
Xcode and Xcode Cloud, Swift,
and our UI frameworks.


22
00:01:15.142 --> 00:01:18.045 line:-2
Then we'll look at how Apple
technologies can help you


23
00:01:18.078 --> 00:01:21.515 line:-2
build apps that make it possible
with augmented reality


24
00:01:21.548 --> 00:01:24.718 line:-2
and our graphics technologies
for users to see the world


25
00:01:24.751 --> 00:01:25.853 line:-1
in new ways.


26
00:01:25.886 --> 00:01:30.524 line:-2
Finally, with new features like
Focus, the Screen Time API,


27
00:01:30.557 --> 00:01:32.359 line:-1
Widgets, and Share Play,


28
00:01:32.392 --> 00:01:35.429 line:-2
we'll see ways in which the apps
you build can help users


29
00:01:35.462 --> 00:01:36.964 line:-1
better connect with each other


30
00:01:36.997 --> 00:01:39.833 line:-2
and prioritize what's most
important to them.


31
00:01:39.867 --> 00:01:41.902 line:-2
Let's start
with developing apps.


32
00:01:41.935 --> 00:01:45.906 line:-2
To tell you more, here are
Alison, Rhonda, and Andrew.


33
00:01:48.809 --> 00:01:50.444 line:-2
[Alison] Developing an app today


34
00:01:50.477 --> 00:01:52.713 line:-3
is a pretty
sophisticated process


35
00:01:52.746 --> 00:01:54.114 line:-2
and you rely on your tools


36
00:01:54.147 --> 00:01:57.251 line:-3
to keep you focused
and effective.


37
00:01:57.284 --> 00:02:00.287 line:-2
The most essential part
of the process is coding,


38
00:02:00.320 --> 00:02:02.856 line:-2
but building a quality app today
involves a number


39
00:02:02.890 --> 00:02:04.958 line:-1
of specialized steps and tools.


40
00:02:04.992 --> 00:02:08.729 line:-2
You need to test your code
across various configurations.


41
00:02:08.762 --> 00:02:10.464 line:-1
Your team reviews your code,


42
00:02:10.497 --> 00:02:13.500 line:-2
and you integrate changes
into a shared repository.


43
00:02:13.534 --> 00:02:15.335 line:-1
You deliver to beta testers.


44
00:02:15.369 --> 00:02:19.273 line:-2
And based on their feedback,
you constantly refine your app.


45
00:02:19.306 --> 00:02:21.308 line:-1
All of these steps are important


46
00:02:21.341 --> 00:02:23.877 line:-2
and it’s important to get
all of them right.


47
00:02:23.911 --> 00:02:26.446 line:-2
You often have to jump
between different apps,


48
00:02:26.480 --> 00:02:30.250 line:-2
websites, and services
to get everything done.


49
00:02:30.284 --> 00:02:33.754 line:-2
All of this context switching
disrupts your focus


50
00:02:33.787 --> 00:02:36.657 line:-2
and pulls you
away from your code.


51
00:02:36.690 --> 00:02:39.059 line:-2
It’s time to do something
about that,


52
00:02:39.092 --> 00:02:42.563 line:-2
to remove the friction
and bring everything together,


53
00:02:42.596 --> 00:02:47.868 line:-2
so you and your team can focus
on creating great experiences.


54
00:02:47,901 --> 00:02:50,804
That’s why we created
Xcode Cloud:


55
00:02:50,838 --> 00:02:53,407
a new continuous integration
and delivery service


56
00:02:53,440 --> 00:02:56,810
built right into Xcode
and hosted in the cloud.


57
00:02:56.844 --> 00:03:00.848 line:-2
It helps you manage every stage
of your development process,


58
00:03:00.881 --> 00:03:04.551 line:-2
and makes it easy to get
the important things right.


59
00:03:04.585 --> 00:03:07.321 line:-2
Xcode Cloud was designed
and built from the ground up


60
00:03:07.354 --> 00:03:10.657 line:-2
to support development
for all Apple platforms.


61
00:03:10.691 --> 00:03:13.093 line:-2
It’s deeply integrated
into Xcode,


62
00:03:13.126 --> 00:03:16.563 line:-2
saving you time by keeping you
focused in one place.


63
00:03:16.597 --> 00:03:19.199 line:-2
It leverages Apple’s
cloud infrastructure to offload


64
00:03:19.233 --> 00:03:23.537 line:-2
your builds, tests, and even
code signing for distribution.


65
00:03:23.570 --> 00:03:26.106 line:-2
It integrates with Apple
services like Test Flight


66
00:03:26.139 --> 00:03:28.942 line:-2
and App Store Connect,
as well as every major


67
00:03:28.976 --> 00:03:30.677 line:-2
git-based
source control provider.


68
00:03:30.711 --> 00:03:32.946 line:-2
It even has
REST APIs to help connect


69
00:03:32.980 --> 00:03:35.549 line:-2
to other aspects
of your development process.


70
00:03:35.582 --> 00:03:37.551 line:-2
And it’s built
with advanced security


71
00:03:37.584 --> 00:03:40.354 line:-2
to protect you
and your projects.


72
00:03:40.387 --> 00:03:42.489 line:-2
This is the biggest
investment we’ve made


73
00:03:42.523 --> 00:03:45.993 line:-2
in our developer tools since
the original release of Xcode,


74
00:03:46.026 --> 00:03:50.097 line:-2
and all of it is inside
the experience you already know.


75
00:03:50.130 --> 00:03:52.299 line:-2
You create and manage
Xcode Cloud workflows


76
00:03:52.332 --> 00:03:55.269 line:-2
in Xcode 13,
letting you stay in your code


77
00:03:55.302 --> 00:03:56.937 line:-1
while test suites, code signing,


78
00:03:56.970 --> 00:04:00.140 line:-2
and TestFlight distribution
are handled for you.


79
00:04:00.174 --> 00:04:02.142 line:-2
And when
Xcode Cloud finishes a build,


80
00:04:02.176 --> 00:04:05.179 line:-2
your results
are right inside Xcode.


81
00:04:05.212 --> 00:04:08.015 line:-2
This is going to change
the way you work.


82
00:04:08.048 --> 00:04:10.751 line:-2
It’s already changing
the way we work.


83
00:04:10.784 --> 00:04:13.487 line:-2
Many teams at Apple
have incorporated Xcode Cloud


84
00:04:13.520 --> 00:04:15.422 line:-1
into their development process,


85
00:04:15.455 --> 00:04:18.559 line:-2
including the team
behind Xcode itself.


86
00:04:23.130 --> 00:04:26.633 line:-3
[Rhonda] It's incredibly easy
to get started with Xcode Cloud.


87
00:04:26.667 --> 00:04:30.270 line:-3
It only takes four steps:
selecting the product,


88
00:04:30.304 --> 00:04:32.105 line:-1
confirming your workflow,


89
00:04:32.139 --> 00:04:34.174 line:-2
granting access
to your source code,


90
00:04:34.208 --> 00:04:36.577 line:-2
and linking
with App Store Connect.


91
00:04:36.610 --> 00:04:38.645 line:-2
Let's walk through the process
with Fruta,


92
00:04:38.679 --> 00:04:41.215 line:-1
a SwiftUI sample app.


93
00:04:41.248 --> 00:04:43.217 line:-2
Xcode Cloud
automatically detects


94
00:04:43.250 --> 00:04:45.719 line:-2
the products and platform
for my project,


95
00:04:45.752 --> 00:04:47.955 line:-1
so I'll click next.


96
00:04:47.988 --> 00:04:50.991 line:-2
Then I'll review
the suggested workflow,


97
00:04:51.024 --> 00:04:55.028 line:-2
which tells Xcode Cloud
what to do and when to do it.


98
00:04:55.062 --> 00:04:57.764 line:-2
The default actions build
every change I make,


99
00:04:57.798 --> 00:05:00.234 line:-1
which is exactly what I want.


100
00:05:00.267 --> 00:05:02.769 line:-2
Now, Xcode Cloud will
securely connect


101
00:05:02.803 --> 00:05:05.305 line:-2
to the hosted account
for my source code.


102
00:05:05.339 --> 00:05:08.075 line:-2
I've already granted access
using my credentials,


103
00:05:08.108 --> 00:05:10.077 line:-1
so I can just move on.


104
00:05:10.110 --> 00:05:12.579 line:-1
Finally, Xcode Cloud recognizes


105
00:05:12.613 --> 00:05:15.015 line:-2
that Fruta already exists
on the App Store


106
00:05:15.048 --> 00:05:17.918 line:-2
and asks me to confirm
the information.


107
00:05:17.951 --> 00:05:20.220 line:-2
If your app isn't
registered yet,


108
00:05:20.254 --> 00:05:22.489 line:-1
Xcode Cloud will do it for you.


109
00:05:22.523 --> 00:05:27.027 line:-2
I'll click Complete and start
my first build in the Cloud.


110
00:05:27.060 --> 00:05:28.662 line:-1
When the build is finished,


111
00:05:28.695 --> 00:05:31.665 line:-2
I'll be able to view the results
in the report navigator.


112
00:05:31.698 --> 00:05:34.902 line:-2
And just like that, I set up
continuous integration


113
00:05:34.935 --> 00:05:38.105 line:-2
and delivery for my app
in one minute


114
00:05:38.138 --> 00:05:40.240 line:-1
all from within Xcode.


115
00:05:40.274 --> 00:05:44.611 line:-2
Let's take a closer look
at how results are presented.


116
00:05:44.645 --> 00:05:47.314 line:-2
Under the Cloud tab
in the report navigator,


117
00:05:47.347 --> 00:05:49.383 line:-2
builds that have been run
for each workflow


118
00:05:49.416 --> 00:05:52.119 line:-2
will be grouped by branch
or Pull Request.


119
00:05:52.152 --> 00:05:55.889 line:-2
Selecting an individual build
brings up its overview


120
00:05:55.923 --> 00:05:58.659 line:-2
with information like how
and when it was started,


121
00:05:58.692 --> 00:06:01.395 line:-2
which Xcode and macOS versions
were used,


122
00:06:01.428 --> 00:06:03.463 line:-2
and the status
of all the actions.


123
00:06:03.497 --> 00:06:05.399 line:-2
You can even check out
the source


124
00:06:05.432 --> 00:06:07.201 line:-1
or initiate a rebuild.


125
00:06:07.234 --> 00:06:10.470 line:-2
While the default workflow is
great for getting started,


126
00:06:10.504 --> 00:06:12.639 line:-2
Xcode Cloud gives you
even more power


127
00:06:12.673 --> 00:06:15.275 line:-2
to accomplish goals
like analyzing an app


128
00:06:15.309 --> 00:06:18.812 line:-2
or deploying new releases
to Test Flight or the App Store.


129
00:06:18.846 --> 00:06:22.816 line:-2
My team wants to run our iOS
tests on every new Pull Request,


130
00:06:22.850 --> 00:06:26.987 line:-2
so let's set
that workflow up now.


131
00:06:27.020 --> 00:06:29.790 line:-2
I'll go back to the Xcode Cloud
product menu,


132
00:06:29.823 --> 00:06:32.092 line:-2
selecting Manage Workflows
this time,


133
00:06:32.125 --> 00:06:34.828 line:-2
and I'll click Plus
to add a new one.


134
00:06:34.862 --> 00:06:37.998 line:-2
I'll name the workflow
Pull Requests,


135
00:06:38.031 --> 00:06:41.969 line:-2
then edit its start conditions
to run on every Pull Request


136
00:06:42.002 --> 00:06:44.304 line:-1
that targets the main branch.


137
00:06:44.338 --> 00:06:45.472 line:-1
I want our tests to run


138
00:06:45.506 --> 00:06:48.809 line:-2
on the public beta versions
of Xcode and macOS,


139
00:06:48.842 --> 00:06:51.945 line:-1
so I'll set that here.


140
00:06:51.979 --> 00:06:55.382 line:-2
Next, I'll look
at the workflow's actions,


141
00:06:55.415 --> 00:06:57.718 line:-1
where I'll add a test action,


142
00:06:57.751 --> 00:07:00.187 line:-2
then select
an existing iOS test plan


143
00:07:00.220 --> 00:07:02.256 line:-1
from the project.


144
00:07:02.289 --> 00:07:04.858 line:-2
To get broad testing coverage
for my app,


145
00:07:04.892 --> 00:07:08.462 line:-2
Xcode Cloud recommends
simulators for me to use.


146
00:07:08.495 --> 00:07:10.731 line:-1
With just two clicks, I get


147
00:07:10.764 --> 00:07:14.368 line:-2
a curated set of iPhones
and iPads for my workflow.


148
00:07:14.401 --> 00:07:16.003 line:-1
Now that's pretty neat.


149
00:07:16.036 --> 00:07:17.938 line:-2
Our team also needs
to be notified


150
00:07:17.971 --> 00:07:19.940 line:-1
when a build succeeds or fails.


151
00:07:19.973 --> 00:07:22.609 line:-1
So I'll add a Notify post action


152
00:07:22.643 --> 00:07:25.078 line:-2
and add our team's
Slack channel.


153
00:07:25.112 --> 00:07:28.415 line:-2
By clicking Save, our workflow
has been added to our product


154
00:07:28.448 --> 00:07:29.783 line:-1
on Xcode Cloud.


155
00:07:29.816 --> 00:07:32.486 line:-2
Now, my team will have
added confidence


156
00:07:32.519 --> 00:07:34.655 line:-1
in the changes we're making.


157
00:07:34.688 --> 00:07:37.558 line:-2
[Alison] There's so much more
you can do with workflows,


158
00:07:37.591 --> 00:07:39.793 line:-2
including running
custom build scripts,


159
00:07:39.826 --> 00:07:43.096 line:-2
and using Xcode Cloud’s web
hooks and APIs to integrate


160
00:07:43.130 --> 00:07:46.567 line:-2
with other systems you
and your team depend on.


161
00:07:46.600 --> 00:07:49.503 line:-2
And the workflow management
and build reports you just saw


162
00:07:49.536 --> 00:07:53.774 line:-2
in Xcode are also available
in App Store Connect on the web.


163
00:07:53.807 --> 00:07:56.143 line:-2
This makes it easy
for you or other members


164
00:07:56.176 --> 00:07:59.913 line:-2
of your team to use
Xcode Cloud from anywhere.


165
00:07:59.947 --> 00:08:01.815 line:-2
Now that you’ve seen
the basics of working


166
00:08:01.849 --> 00:08:04.051 line:-2
with Xcode Cloud,
let’s see how it helps you


167
00:08:04.084 --> 00:08:07.688 line:-2
in each specific area
of your development cycle.


168
00:08:07,721 --> 00:08:10,390
Writing good tests
and running them repeatedly


169
00:08:10,424 --> 00:08:13,694
is critical to creating
a quality application.


170
00:08:13.727 --> 00:08:16.663 line:-2
With Xcode Cloud,
you’ll be testing your code


171
00:08:16.697 --> 00:08:19.166 line:-2
more thoroughly,
more consistently,


172
00:08:19.199 --> 00:08:21.235 line:-1
and more efficiently.


173
00:08:21.268 --> 00:08:23.403 line:-2
You can configure
your Xcode Cloud workflows


174
00:08:23.437 --> 00:08:26.607 line:-2
to run multiple test plans
across multiple platforms,


175
00:08:26.640 --> 00:08:31.512 line:-2
device simulators,
and OS versions all in parallel.


176
00:08:31.545 --> 00:08:33.780 line:-2
You can also run
your tests in Xcode Cloud


177
00:08:33.814 --> 00:08:37.351 line:-2
on beta OS releases
before you even download


178
00:08:37.384 --> 00:08:39.653 line:-1
the betas to your own machine.


179
00:08:39.686 --> 00:08:42.623 line:-2
So Xcode Cloud will help you
test more


180
00:08:42.656 --> 00:08:46.894 line:-2
and Xcode 13 will help you
test better.


181
00:08:50.631 --> 00:08:54.535 line:-3
[Andrew] Our app Fruta supports
the Light and Dark appearance,


182
00:08:54.568 --> 00:08:56.737 line:-3
portrait and landscape
orientations,


183
00:08:56.770 --> 00:08:59.873 line:-1
and localizes to two languages.


184
00:08:59.907 --> 00:09:03.010 line:-2
I've been working on a suite
of user experience tests


185
00:09:03.043 --> 00:09:07.047 line:-2
that exercise Fruta's
most popular features.


186
00:09:07.080 --> 00:09:11.518 line:-2
Here in my test code, I'll adopt
this simple XC test API


187
00:09:11.552 --> 00:09:14.555 line:-2
to make these tests go
even further


188
00:09:14.588 --> 00:09:18.525 line:-2
by automatically running
each test in each variation.


189
00:09:18.559 --> 00:09:21.295 line:-2
Let's look at that test coverage
in Xcode Cloud


190
00:09:21.328 --> 00:09:22.996 line:-2
by selecting
the most recent build


191
00:09:23.030 --> 00:09:26.366 line:-2
and the workflow test action
I have configured.


192
00:09:26.400 --> 00:09:27.868 line:-1
Results are displayed


193
00:09:27.901 --> 00:09:30.771 line:-2
in the familiar Xcode
test report.


194
00:09:30.804 --> 00:09:34.875 line:-2
These tests ran across a set
of recommended iPad simulators


195
00:09:34.908 --> 00:09:38.345 line:-2
running iOS 15,
once per configuration,


196
00:09:38.378 --> 00:09:41.081 line:-2
capturing screenshots
all along the way.


197
00:09:41.114 --> 00:09:45.619 line:-2
Xcode 13 has a brilliant new way
to review those results.


198
00:09:45.652 --> 00:09:47.054 line:-1
From the editor options menu,


199
00:09:47.087 --> 00:09:50.157 line:-2
I'll enable
the new gallery view.


200
00:09:50.190 --> 00:09:52.292 line:-2
The screenshots from my tests
are displayed


201
00:09:52.326 --> 00:09:54.428 line:-1
in every variation


202
00:09:54.461 --> 00:09:58.632 line:-2
and images from each test
presented together.


203
00:09:58.665 --> 00:10:02.503 line:-2
I can zoom out even further
to see all images,


204
00:10:02.536 --> 00:10:04.805 line:-2
and when I find one
I'm really interested in,


205
00:10:04.838 --> 00:10:08.275 line:-2
I can see it at full resolution
using quick look.


206
00:10:08.308 --> 00:10:10.577 line:-2
The gallery view
makes it effortless


207
00:10:10.611 --> 00:10:13.113 line:-2
to confirm our app is
looking fantastic


208
00:10:13.146 --> 00:10:16.550 line:-2
across all conditions,
languages, and layouts.


209
00:10:16.583 --> 00:10:19.052 line:-2
Over in my unit tests,
I have a test failure


210
00:10:19.086 --> 00:10:22.322 line:-2
that I'm sure
you will relate to.


211
00:10:22.356 --> 00:10:25.993 line:-2
Sometimes the test passes
and sometimes it fails.


212
00:10:26.026 --> 00:10:27.928 line:-1
We've all been here before.


213
00:10:27.961 --> 00:10:31.698 line:-1
And Xcode 13 is here to help.


214
00:10:31.732 --> 00:10:33.967 line:-1
I navigate to the test source,


215
00:10:34.001 --> 00:10:38.705 line:-2
click on the test gem,
and choose Run Test Repeatedly.


216
00:10:38.739 --> 00:10:40.407 line:-2
Let's get a better sense
of reliability


217
00:10:40.440 --> 00:10:43.677 line:-1
by running it 100 times.


218
00:10:43.710 --> 00:10:46.280 line:-2
If I wanted to do this before,
I'd have to run the test


219
00:10:46.313 --> 00:10:48.815 line:-1
many, many times myself.


220
00:10:48.849 --> 00:10:53.820 line:-2
Now, I can sit back as the tools
do all of the work.


221
00:10:53.854 --> 00:10:59.026 line:-2
As I suspected, Xcode is showing
this test is very unreliable.


222
00:10:59.059 --> 00:11:01.195 line:-2
There must be a problem
in my code.


223
00:11:01.228 --> 00:11:05.532 line:-2
But until I can fix it, I'll
adopt the new Expected Fail API


224
00:11:05.566 --> 00:11:07.467 line:-2
and include a message
about reliability


225
00:11:07.501 --> 00:11:10.938 line:-1
for the rest of my team to see.


226
00:11:10.971 --> 00:11:13.407 line:-2
To make sure things are
just as I expect,


227
00:11:13.440 --> 00:11:15.742 line:-2
I'll make use
of the Test Again feature,


228
00:11:15.776 --> 00:11:18.545 line:-1
available from the product menu.


229
00:11:18.579 --> 00:11:20.280 line:-2
Xcode remembers what it did
last time


230
00:11:20.314 --> 00:11:22.649 line:-1
so it's really easy.


231
00:11:22.683 --> 00:11:25.252 line:-2
My test is still
raising assertions,


232
00:11:25.285 --> 00:11:27.487 line:-1
but it's not failing anymore.


233
00:11:27.521 --> 00:11:30.724 line:-2
And I have a gentle reminder
to fix it down the road.


234
00:11:30.757 --> 00:11:33.660 line:-1
That is exactly what I need.


235
00:11:33.694 --> 00:11:37.331 line:-2
[Alison] As you can see,
Xcode 13 and Xcode Cloud


236
00:11:37.364 --> 00:11:40.000 line:-2
help you find and address
issues in your app,


237
00:11:40.033 --> 00:11:43.437 line:-1
or your tests, faster than ever.


238
00:11:43.470 --> 00:11:45.639 line:-2
Tests are one form
of insight on your code.


239
00:11:45.672 --> 00:11:47.875 line:-1
Another is input from your peers


240
00:11:47.908 --> 00:11:49.877 line:-2
through code reviews
and Pull Requests.


241
00:11:49,910 --> 00:11:52,279
To keep you focused
on your code,


242
00:11:52,312 --> 00:11:54,448
Xcode 13 brings
these discussions


243
00:11:54,481 --> 00:11:55,749
with your team


244
00:11:55,782 --> 00:11:57,985
directly into the editor.


245
00:11:58.018 --> 00:11:59.319 line:-2
[Andrew]
I've created a Pull Request


246
00:11:59.353 --> 00:12:01.788 line:-2
from the feature branch
I've been working on.


247
00:12:01.822 --> 00:12:03.690 line:-1
My feature allows users


248
00:12:03.724 --> 00:12:06.894 line:-2
to favorite
the most delicious smoothies.


249
00:12:06.927 --> 00:12:08.362 line:-1
In the navigator on the left,


250
00:12:08.395 --> 00:12:11.198 line:-2
you can see the new
source control changes tab.


251
00:12:11.231 --> 00:12:13.834 line:-2
It shows all the files
I've modified locally,


252
00:12:13.867 --> 00:12:15.068 line:-1
my Pull Request,


253
00:12:15.102 --> 00:12:16.904 line:-2
and the changes
that are included.


254
00:12:16.937 --> 00:12:18.539 line:-1
When I select the Pull Request,


255
00:12:18.572 --> 00:12:20.908 line:-2
I get a full overview
of all the activity


256
00:12:20.941 --> 00:12:22.576 line:-1
and the conversation going on.


257
00:12:22.609 --> 00:12:24.878 line:-2
And as I scroll,
I see my description


258
00:12:24.912 --> 00:12:26.647 line:-2
and the interesting events
and time,


259
00:12:26.680 --> 00:12:28.782 line:-2
as well as any code feedback
from my team


260
00:12:28.815 --> 00:12:30.517 line:-1
and new commits that I make.


261
00:12:30.551 --> 00:12:32.352 line:-1
But we're using Xcode Cloud,


262
00:12:32.386 --> 00:12:33.820 line:-1
and our Pull Request workflow


263
00:12:33.854 --> 00:12:37.357 line:-2
is building and testing
every commit that I make.


264
00:12:37.391 --> 00:12:41.695 line:-2
At the top, I get a live status
from all of my workflows.


265
00:12:43.363 --> 00:12:47.835 line:-2
Rhonda has a few suggestions
to make my code even better.


266
00:12:47.868 --> 00:12:49.603 line:-2
When I navigate
to the source code,


267
00:12:49.636 --> 00:12:53.207 line:-2
I see comments from Rhonda
in my editor.


268
00:12:53.240 --> 00:12:55.676 line:-2
This code requires
the user to be logged in.


269
00:12:55.709 --> 00:12:57.010 line:-1
So it needs to be reworked


270
00:12:57.044 --> 00:13:00.581 line:-2
to allow signing in
before favoriting a recipe.


271
00:13:00.614 --> 00:13:03.784 line:-2
I'll reply to let Rhonda know
that I'm working on a change


272
00:13:03.817 --> 00:13:05.786 line:-1
and also give her a heads-up:


273
00:13:05.819 --> 00:13:08.622 line:-2
This might crash in the build
if she doesn't sign in first.


274
00:13:10.324 --> 00:13:11.625 line:-1
Beyond Pull Requests,


275
00:13:11.658 --> 00:13:17.464 line:-2
Xcode 13 makes reviewing
local changes really easy too.


276
00:13:17.497 --> 00:13:20.133 line:-2
As I navigate
to a file that I'm working on,


277
00:13:20.167 --> 00:13:23.070 line:-2
Xcode automatically displays the
diff of my changes


278
00:13:23.103 --> 00:13:24.538 line:-1
against the latest revision


279
00:13:24.571 --> 00:13:27.341 line:-2
in this beautiful new
in-line presentation.


280
00:13:28.408 --> 00:13:30.310 line:-2
I can use
the updated revision selectors


281
00:13:30.344 --> 00:13:33.714 line:-2
to compare my local changes
against any branch or tag


282
00:13:33.747 --> 00:13:35.415 line:-1
in history.


283
00:13:35.449 --> 00:13:39.219 line:-2
Best of all, I can use
code review in any editor,


284
00:13:39.253 --> 00:13:41.588 line:-2
even when I'm using
multiple editor splits


285
00:13:41.622 --> 00:13:44.091 line:-2
across different files
in my window.


286
00:13:44.124 --> 00:13:45.726 line:-1
And now with two options--


287
00:13:45.759 --> 00:13:48.462 line:-2
in-line comparison
and side by side--


288
00:13:48.495 --> 00:13:50.831 line:-2
I get to pick
the perfect presentation


289
00:13:50.864 --> 00:13:53.467 line:-1
for what I'm working on.


290
00:13:53.500 --> 00:13:55.802 line:-2
With one last code change
and comment,


291
00:13:55.836 --> 00:13:57.404 line:-1
it could not be easier


292
00:13:57.437 --> 00:14:00.674 line:-2
to review and respond
to insight from my team.


293
00:14:02.709 --> 00:14:04.645 line:-2
[Alison] Part of delivering
a great experience


294
00:14:04.678 --> 00:14:05.846 line:-1
is getting your app


295
00:14:05.879 --> 00:14:08.782 line:-2
into the hands
of your team and beta testers.


296
00:14:08,815 --> 00:14:12,619
Xcode Cloud
makes that process effortless.


297
00:14:12.653 --> 00:14:14.922 line:-1
Xcode 13 now uses the cloud


298
00:14:14.955 --> 00:14:18.192 line:-2
to securely obtain and manage
everything you need


299
00:14:18.225 --> 00:14:19.393 line:-1
to code sign your apps.


300
00:14:19.426 --> 00:14:22.462 line:-2
This means you no longer
need to worry


301
00:14:22.496 --> 00:14:25.666 line:-2
about keeping your certificates
and profiles up to date


302
00:14:25.699 --> 00:14:27.267 line:-1
on your Mac.


303
00:14:27.301 --> 00:14:29.970 line:-2
The archive action
in your Xcode Cloud workflow


304
00:14:30.003 --> 00:14:33.974 line:-2
uses the same system to sign
your app for distribution.


305
00:14:34.007 --> 00:14:37.778 line:-2
And by adding a postaction
to your Xcode Cloud workflow,


306
00:14:37.811 --> 00:14:40.113 line:-2
you get automatic delivery
of betas


307
00:14:40.147 --> 00:14:42.883 line:-2
through Test Flight
to all Apple platforms,


308
00:14:42.916 --> 00:14:44.384 line:-1
including macOS


309
00:14:44.418 --> 00:14:46.253 line:-2
with the new Test Flight
for Mac.


310
00:14:46.286 --> 00:14:48.755 line:-2
Once you've delivered
your latest build,


311
00:14:48.789 --> 00:14:52.092 line:-2
you'll get even more insight
from your beta testers.


312
00:14:52,125 --> 00:14:54,628
Xcode 13 includes
major improvements


313
00:14:54,661 --> 00:14:55,896
to better connect you


314
00:14:55,929 --> 00:14:58,265
with the same diagnostics
and feedback


315
00:14:58.298 --> 00:15:00.234 line:-1
found in App Store Connect.


316
00:15:00.267 --> 00:15:01.969 line:-1
Crash logs from Test Flight apps


317
00:15:02.002 --> 00:15:04.771 line:-2
are now delivered directly
to the Organizer


318
00:15:04.805 --> 00:15:06.707 line:-1
within minutes.


319
00:15:06.740 --> 00:15:09.109 line:-2
And the Organizer now shows
the written feedback


320
00:15:09.142 --> 00:15:11.245 line:-2
a user attaches
to a crash report.


321
00:15:11.278 --> 00:15:14.548 line:-2
This gives you valuable context
when analyzing the crash


322
00:15:14.581 --> 00:15:17.684 line:-2
and a broader view
into your app's usage.


323
00:15:17.718 --> 00:15:19.486 line:-2
[Rhonda]
After Andrew's test passed,


324
00:15:19.520 --> 00:15:23.156 line:-2
Xcode Cloud submitted the build
directly to Test Flight.


325
00:15:24.124 --> 00:15:26.560 line:-2
I just received
a notification on my phone


326
00:15:26.593 --> 00:15:28.929 line:-1
for a new iOS build of Fruta,


327
00:15:28.962 --> 00:15:31.164 line:-2
and there's the Mac version
from Test Flight for Mac.


328
00:15:32.366 --> 00:15:35.135 line:-2
Since Fruta
is a multiplatform project,


329
00:15:35.169 --> 00:15:39.173 line:-2
I'm getting this new build
in both places at the same time.


330
00:15:39.206 --> 00:15:41.642 line:-2
I'm really excited
to install this build


331
00:15:41.675 --> 00:15:43.544 line:-2
and see
how the new feature feels.


332
00:15:43.577 --> 00:15:45.612 line:-1
So I'll do that now.


333
00:15:45.646 --> 00:15:46.813 line:-1
I suspect


334
00:15:46.847 --> 00:15:48.882 line:-2
there are still
a few rough edges.


335
00:15:48.916 --> 00:15:52.719 line:-2
Maybe the app will crash if
I try to favorite this smoothie.


336
00:15:52.753 --> 00:15:54.755 line:-1
And sure enough, it does.


337
00:15:54.788 --> 00:15:58.158 line:-2
I can use Test Flight's
crash feedback UI


338
00:15:58.192 --> 00:16:00.194 line:-1
to let Andrew know.


339
00:16:00.227 --> 00:16:03.630 line:-2
I'll explain what I was doing
when the app crashed,


340
00:16:03.664 --> 00:16:05.532 line:-2
and he'll be able
to fix the issue


341
00:16:05.566 --> 00:16:09.570 line:-2
and add a test to ensure this
is caught earlier next time.


342
00:16:10.737 --> 00:16:11.872 line:-1
[Andrew] I've been looking


343
00:16:11.905 --> 00:16:14.708 line:-2
at our most recent app releases
in the Organizer


344
00:16:14.741 --> 00:16:17.010 line:-1
When I filter to the last day,


345
00:16:17.044 --> 00:16:18.712 line:-2
here's a crash
Rhonda experienced


346
00:16:18.745 --> 00:16:20.547 line:-1
just a moment ago,


347
00:16:20.581 --> 00:16:23.984 line:-2
fully symbolicated
and ready for investigation.


348
00:16:24.017 --> 00:16:27.254 line:-2
The new Test Flight feedback
inspector includes her comments,


349
00:16:27.287 --> 00:16:31.191 line:-2
information on the app build,
version, and her device.


350
00:16:31.225 --> 00:16:34.895 line:-2
And I can even contact her to
learn more about her experience.


351
00:16:34.928 --> 00:16:36.897 line:-1
What's even better:


352
00:16:36.930 --> 00:16:40.367 line:-2
Xcode knows where in my code
this crash came from.


353
00:16:40.400 --> 00:16:44.671 line:-2
So with one click,
I can open it in my project.


354
00:16:44.705 --> 00:16:47.975 line:-2
The debug navigator
has the full back trace.


355
00:16:48.008 --> 00:16:50.611 line:-2
My source editor
highlights the assertion


356
00:16:50.644 --> 00:16:54.248 line:-2
and my Pull Request conversation
displays too.


357
00:16:54.281 --> 00:16:56.383 line:-1
It's incredibly exciting


358
00:16:56.416 --> 00:16:58.452 line:-2
to have what I need
to fix this problem


359
00:16:58.485 --> 00:16:59.987 line:-1
right here in Xcode.


360
00:17:01.054 --> 00:17:03.056 line:-2
[Alison] We've brought
everything you need


361
00:17:03.090 --> 00:17:05.926 line:-2
into the tools you use
every day--


362
00:17:05.959 --> 00:17:07.261 line:-1
test results,


363
00:17:07.294 --> 00:17:10.163 line:-2
comments from peers,
and user feedback--


364
00:17:10.197 --> 00:17:12.399 line:-1
all to give you greater insight


365
00:17:12.432 --> 00:17:13.600 line:-1
and help you deliver


366
00:17:13.634 --> 00:17:15.836 line:-2
the next great version
of your app.


367
00:17:15.869 --> 00:17:17.104 line:-1
Xcode Cloud was built


368
00:17:17.137 --> 00:17:20.040 line:-2
with your privacy
and security in mind.


369
00:17:20.073 --> 00:17:21.175 line:-1
Your data--


370
00:17:21.208 --> 00:17:23.377 line:-2
including your source,
access tokens,


371
00:17:23.410 --> 00:17:25.479 line:-2
sign-in keys,
and build artifacts--


372
00:17:25.512 --> 00:17:26.914 line:-1
are handled securely.


373
00:17:26.947 --> 00:17:28.949 line:-2
And we use the least amount
of data possible


374
00:17:28.982 --> 00:17:30.751 line:-1
to run the service.


375
00:17:30.784 --> 00:17:34.154 line:-2
This is a huge year
for our developer tools.


376
00:17:34.188 --> 00:17:36.857 line:-1
With Xcode 13 and Xcode Cloud,


377
00:17:36.890 --> 00:17:39.426 line:-2
you'll be building
and delivering quality apps


378
00:17:39.459 --> 00:17:42.062 line:-1
across all of Apple's platforms


379
00:17:42.095 --> 00:17:46.200 line:-2
in less time
and with less effort than ever.


380
00:17:46.233 --> 00:17:48.635 line:-2
Xcode Cloud will initially
be available


381
00:17:48.669 --> 00:17:50.504 line:-1
as a free, limited beta.


382
00:17:50.537 --> 00:17:54.208 line:-2
Developer Program account
holders can sign up right now


383
00:17:54.241 --> 00:17:56.143 line:-1
at developer.apple.com.


384
00:17:56.176 --> 00:17:58.412 line:-1
We will gradually add more teams


385
00:17:58.445 --> 00:18:00.214 line:-2
as we work towards
making this available


386
00:18:00.247 --> 00:18:03.150 line:-1
to all developers next year.


387
00:18:03.183 --> 00:18:04.284 line:-1
We'll provide more details


388
00:18:04.318 --> 00:18:07.354 line:-2
on pricing and availability
this fall.


389
00:18:07.387 --> 00:18:09.256 line:-2
You can check
your registration status


390
00:18:09.289 --> 00:18:11.058 line:-1
from inside Xcode 13


391
00:18:11.091 --> 00:18:13.527 line:-2
or the Xcode Cloud tab
in App Store Connect.


392
00:18:14.661 --> 00:18:17.231 line:-2
In addition
to everything you've seen here,


393
00:18:17.264 --> 00:18:19.600 line:-2
we have a huge list
of improvements and features


394
00:18:19.633 --> 00:18:21.034 line:-1
in our developer tools


395
00:18:21.068 --> 00:18:23.871 line:-2
that you can learn about
in this year's sessions,


396
00:18:23.904 --> 00:18:26.106 line:-2
including
some terrific enhancements


397
00:18:26.139 --> 00:18:27.908 line:-1
to Swift support in Xcode.


398
00:18:28.575 --> 00:18:29.643 line:-1
That's just the start


399
00:18:29.676 --> 00:18:32.279 line:-2
of an exciting story
for Swift this year.


400
00:18:32.312 --> 00:18:35.816 line:-2
To tell you more,
here are Josh, Holly, and Matt.


401
00:18:39.520 --> 00:18:41.722 line:-2
[Josh] Swift has become
a critical language


402
00:18:41.755 --> 00:18:43.690 line:-2
for developers
across Apple's platforms


403
00:18:43.724 --> 00:18:45.125 line:-1
and beyond.


404
00:18:45.158 --> 00:18:47.928 line:-3
It's enabled
our most modern technologies,


405
00:18:47.961 --> 00:18:49.296 line:-2
serving as the foundation


406
00:18:49.329 --> 00:18:51.532 line:-3
for a new generation
of frameworks


407
00:18:51.565 --> 00:18:54.067 line:-1
like SwiftUI, CreateML,


408
00:18:54.101 --> 00:18:56.303 line:-1
and the new StoreKit 2.


409
00:18:56.336 --> 00:18:59.006 line:-2
It provides a modern,
type-safe language


410
00:18:59.039 --> 00:19:01.208 line:-1
to craft your most complex apps


411
00:19:01.241 --> 00:19:03.777 line:-2
with powerful tools
like Xcode Previews


412
00:19:03.810 --> 00:19:05.379 line:-1
and Swift Package Manager


413
00:19:05.412 --> 00:19:07.247 line:-1
to accelerate your development.


414
00:19:07.281 --> 00:19:09.917 line:-2
And it's friendly
and approachable for newcomers,


415
00:19:09.950 --> 00:19:11.752 line:-2
with engaging content
and lessons


416
00:19:11.785 --> 00:19:13.520 line:-1
available in Swift Playgrounds


417
00:19:13.554 --> 00:19:15.289 line:-1
to learn how to code.


418
00:19:15.322 --> 00:19:18.825 line:-2
Now, a key part of ensuring that
a technology is great for you


419
00:19:18.859 --> 00:19:20.527 line:-1
is adopting it ourselves.


420
00:19:20.561 --> 00:19:24.097 line:-2
High-profile apps like Music
have been written in Swift


421
00:19:24.131 --> 00:19:25.332 line:-1
for years now,


422
00:19:25.365 --> 00:19:28.735 line:-2
and system-wide features
like Widgets have been designed


423
00:19:28.769 --> 00:19:31.705 line:-1
from the ground up with SwiftUI.


424
00:19:31.738 --> 00:19:35.242 line:-2
Learning Swift and SwiftUI
gives you a common,


425
00:19:35.275 --> 00:19:39.313 line:-2
powerful set of tools and APIs
to build fully native apps


426
00:19:39.346 --> 00:19:41.982 line:-1
for all of our platforms.


427
00:19:42.015 --> 00:19:44.952 line:-2
And because Swift itself
is open source,


428
00:19:44.985 --> 00:19:47.688 line:-2
we've been able to work together
with many of you


429
00:19:47.721 --> 00:19:50.324 line:-2
to deliver tons of new features
and capabilities


430
00:19:50.357 --> 00:19:52.693 line:-1
over the last few years.


431
00:19:52.726 --> 00:19:54.895 line:-1
Now, one of those capabilities,


432
00:19:54.928 --> 00:19:57.130 line:-2
which is crucial
to building any app,


433
00:19:57.164 --> 00:19:58.999 line:-1
is support for concurrency.


434
00:19:59.032 --> 00:20:01.768 line:-2
And here's Holly
to tell you all about it.


435
00:20:04.304 --> 00:20:06.206 line:-2
[Holly] Whether you think
about it or not,


436
00:20:06.240 --> 00:20:09.076 line:-3
you are writing
concurrent code today.


437
00:20:09.109 --> 00:20:11.044 line:-2
Concurrency enables your apps


438
00:20:11.078 --> 00:20:14.081 line:-3
to perform multiple tasks
at the same time,


439
00:20:14.114 --> 00:20:17.084 line:-2
which helps your apps
stay responsive to user input


440
00:20:17.117 --> 00:20:18.852 line:-2
while doing work
in the background,


441
00:20:18.886 --> 00:20:21.221 line:-2
like a weather app
fetching forecast data


442
00:20:21.255 --> 00:20:23.857 line:-1
while the user selects a city.


443
00:20:23.891 --> 00:20:25.459 line:-1
And it's essential


444
00:20:25.492 --> 00:20:28.128 line:-2
to taking advantage
of multicore processors


445
00:20:28.161 --> 00:20:31.565 line:-2
to achieve high performance
for heavy computation,


446
00:20:31.598 --> 00:20:35.869 line:-2
like rendering complex
visual effects in a video app.


447
00:20:35.903 --> 00:20:37.938 line:-1
But without language support,


448
00:20:37.971 --> 00:20:42.042 line:-2
writing concurrent code
is really hard to get right.


449
00:20:42.075 --> 00:20:45.646 line:-2
So we're bringing first-class
support for concurrency


450
00:20:45.679 --> 00:20:47.114 line:-1
to Swift.


451
00:20:47.147 --> 00:20:47.981 line:-1
Our approach


452
00:20:48.015 --> 00:20:49.850 line:-2
to building concurrency
into the language


453
00:20:49.883 --> 00:20:53.287 line:-2
follows the same core principles
of Swift itself,


454
00:20:53.320 --> 00:20:57.224 line:-2
making it easier to write
modern, safe, and fast code


455
00:20:57.257 --> 00:21:01.061 line:-2
that eliminates entire classes
of programming mistakes.


456
00:21:01.094 --> 00:21:05.065 line:-2
First, let's talk about how
we've taken a modern approach


457
00:21:05.098 --> 00:21:07.901 line:-2
to building concurrency
into Swift.


458
00:21:07.935 --> 00:21:11.238 line:-2
Today, we think of modern code
as structured


459
00:21:11.271 --> 00:21:14.141 line:-2
and easy to express
what you want to do.


460
00:21:14.174 --> 00:21:15.442 line:-1
Unfortunately,


461
00:21:15.475 --> 00:21:17.644 line:-2
most of today's
asynchronous code


462
00:21:17.678 --> 00:21:20.480 line:-2
uses completion handlers
that are unstructured


463
00:21:20.514 --> 00:21:22.816 line:-1
and hard to express.


464
00:21:22.850 --> 00:21:26.119 line:-2
To make expressing asynchronous
functions easier,


465
00:21:26.153 --> 00:21:29.623 line:-2
we've built the modern
async/await pattern into Swift.


466
00:21:29.656 --> 00:21:32.426 line:-2
Now you can mark
an asynchronous function


467
00:21:32.459 --> 00:21:34.228 line:-1
with the async keyword.


468
00:21:34.928 --> 00:21:38.465 line:-2
When the function is called,
you use the await keyword


469
00:21:38.498 --> 00:21:41.502 line:-2
to indicate that other work can
be done while the caller waits


470
00:21:41.535 --> 00:21:43.704 line:-2
for the result
of the async function.


471
00:21:43.737 --> 00:21:46.974 line:-2
To understand the improvements
async/await brings


472
00:21:47.007 --> 00:21:48.842 line:-1
over completion handlers,


473
00:21:48.876 --> 00:21:50.844 line:-1
let's walk through an example.


474
00:21:50.878 --> 00:21:52.679 line:-2
When I'm not working
on the Swift compiler,


475
00:21:52.713 --> 00:21:54.815 line:-1
I like to dance.


476
00:21:54.848 --> 00:21:56.283 line:-1
To prepare for a show,


477
00:21:56.316 --> 00:21:58.418 line:-2
a dance company
must first warm up,


478
00:21:58.452 --> 00:22:01.388 line:-2
the crew will fetch the scenery
and props from storage,


479
00:22:01.421 --> 00:22:02.923 line:-1
and then the stage is set.


480
00:22:02.956 --> 00:22:05.392 line:-2
Once all of that is done,
the dancers can move


481
00:22:05.425 --> 00:22:07.427 line:-1
into their opening positions.


482
00:22:07.461 --> 00:22:09.630 line:-2
Here is an asynchronous
implementation


483
00:22:09.663 --> 00:22:13.433 line:-2
of "prepareForShow"
that uses completion handlers.


484
00:22:13.467 --> 00:22:15.369 line:-2
What this code
is trying to accomplish


485
00:22:15.402 --> 00:22:18.839 line:-2
is really simple,
but the code is convoluted.


486
00:22:18.872 --> 00:22:21.008 line:-2
It uses nested completion
handlers


487
00:22:21.041 --> 00:22:23.777 line:-2
that make the flow
of execution unnatural,


488
00:22:23.810 --> 00:22:26.079 line:-2
so the code
is really hard to read.


489
00:22:26.113 --> 00:22:28.715 line:-2
Adopting async/await
in this example


490
00:22:28.749 --> 00:22:32.619 line:-2
leaves us with code
that's now in a straight line.


491
00:22:32.653 --> 00:22:36.056 line:-2
This code is so much easier
to understand.


492
00:22:36.089 --> 00:22:38.492 line:-2
The control flow goes
from top to bottom,


493
00:22:38.525 --> 00:22:40.327 line:-1
like any other function.


494
00:22:40.360 --> 00:22:42.663 line:-2
You handle errors
and return values


495
00:22:42.696 --> 00:22:45.966 line:-2
in the same way
as you're used to in Swift.


496
00:22:45.999 --> 00:22:49.670 line:-2
You can use all of the normal
control flow constructs, too.


497
00:22:49.703 --> 00:22:52.272 line:-2
So it's easy to add
conditional logic,


498
00:22:52.306 --> 00:22:55.542 line:-2
so the function behaves
differently during a rehearsal.


499
00:22:55.576 --> 00:22:58.846 line:-2
Async/await makes writing
asynchronous code easier


500
00:22:58.879 --> 00:23:02.082 line:-2
by leveraging the tools
you already know.


501
00:23:02.115 --> 00:23:05.786 line:-2
It's also easier to introduce
concurrency where you need it


502
00:23:05.819 --> 00:23:08.789 line:-1
using Structured Concurrency.


503
00:23:08.822 --> 00:23:11.592 line:-2
Structured Concurrency
is a way of organizing


504
00:23:11.625 --> 00:23:15.596 line:-2
concurrent tasks to make them
easier to reason about.


505
00:23:15.629 --> 00:23:18.732 line:-2
Let's introduce concurrency
into prepareForShow.


506
00:23:18.765 --> 00:23:20.868 line:-1
Right now, the function waits


507
00:23:20.901 --> 00:23:22.936 line:-2
until the dancers
finish their warm-up


508
00:23:22.970 --> 00:23:25.339 line:-2
before starting
to fetch the scenery,


509
00:23:25.372 --> 00:23:28.242 line:-2
but these tasks could be done
in parallel.


510
00:23:28.275 --> 00:23:30.210 line:-1
With Structured Concurrency,


511
00:23:30.244 --> 00:23:33.280 line:-2
you can easily create
concurrent child tasks


512
00:23:33.313 --> 00:23:38.118 line:-2
using async/await
with local variables, like this.


513
00:23:38.151 --> 00:23:41.788 line:-2
Now, the code uses
'async let' variables


514
00:23:41.822 --> 00:23:44.825 line:-2
to create child tasks that
execute concurrently


515
00:23:44.858 --> 00:23:46.527 line:-1
with the parent.


516
00:23:46.560 --> 00:23:49.696 line:-2
So, the company warm up
and fetching the scenery


517
00:23:49.730 --> 00:23:53.367 line:-2
will run concurrently
with the rest of prepareForShow.


518
00:23:53.400 --> 00:23:56.136 line:-2
When we need the results
of those child tasks,


519
00:23:56.170 --> 00:23:58.639 line:-1
we await the results.


520
00:23:58.672 --> 00:24:02.142 line:-2
Because fetchStageScenery
executes concurrently,


521
00:24:02.176 --> 00:24:04.611 line:-2
it's possible that
the result isn't ready yet


522
00:24:04.645 --> 00:24:07.047 line:-2
when prepareForShow
needs to use it,


523
00:24:07.080 --> 00:24:10.884 line:-2
so accessing the result must be
done asynchronously.


524
00:24:12.386 --> 00:24:16.957 line:-2
Swift's concurrency model is
also designed to be safe.


525
00:24:16.990 --> 00:24:20.928 line:-2
Just like Swift eliminates null
pointer mistakes with optionals,


526
00:24:20.961 --> 00:24:23.130 line:-2
the compiler will now
help eliminate


527
00:24:23.163 --> 00:24:26.099 line:-2
common concurrency issues
by ensuring


528
00:24:26.133 --> 00:24:29.236 line:-2
that access to shared state
is safely coordinated


529
00:24:29.269 --> 00:24:31.104 line:-1
between concurrent tasks.


530
00:24:31.138 --> 00:24:34.174 line:-2
A core part of this safe
concurrency model


531
00:24:34.208 --> 00:24:36.410 line:-1
is built around actors.


532
00:24:36.443 --> 00:24:38.979 line:-2
Actors are
an industry-proven model


533
00:24:39.012 --> 00:24:41.048 line:-1
for safe concurrent programming,


534
00:24:41.081 --> 00:24:43.884 line:-2
and a powerful synchronization
primitive.


535
00:24:43.917 --> 00:24:47.221 line:-2
Conceptually, an actor is
an object that protects


536
00:24:47.254 --> 00:24:52.659 line:-2
its own state by only providing
mutually exclusive access.


537
00:24:52.693 --> 00:24:55.295 line:-2
This completely eliminates
concurrent access


538
00:24:55.329 --> 00:24:58.232 line:-2
and the low-level data
races that come with it.


539
00:24:58.265 --> 00:25:01.535 line:-2
This concept might sound
familiar, because it's similar


540
00:25:01.568 --> 00:25:03.370 line:-2
to a pattern that you might
already use


541
00:25:03.403 --> 00:25:05.839 line:-2
for classes
with a dispatch queue,


542
00:25:05.873 --> 00:25:08.809 line:-2
which was itself
inspired by actors.


543
00:25:08.842 --> 00:25:11.211 line:-2
In this pattern,
the instance properties


544
00:25:11.245 --> 00:25:14.047 line:-2
in a class are carefully
accessed using


545
00:25:14.081 --> 00:25:17.818 line:-2
a serial dispatch queue
to maintain mutual exclusion.


546
00:25:17.851 --> 00:25:21.021 line:-2
But this pattern is
prone to mistakes.


547
00:25:21.054 --> 00:25:23.590 line:-2
There's a lot of boilerplate,
and it's too easy


548
00:25:23.624 --> 00:25:26.727 line:-2
to forget to manually
use the queue just once


549
00:25:26.760 --> 00:25:30.864 line:-2
and introduce a race condition
into your code.


550
00:25:30.898 --> 00:25:35.736 line:-2
To solve these issues, we went
back to the core idea of actors,


551
00:25:35.769 --> 00:25:39.640 line:-2
and built it into Swift as
a first-class construct.


552
00:25:39.673 --> 00:25:42.976 line:-2
Now, you can declare
an actor type in Swift


553
00:25:43.010 --> 00:25:44.611 line:-1
with a simple keyword.


554
00:25:44.645 --> 00:25:48.282 line:-2
It has the same structure as
the constructs you already know,


555
00:25:48.315 --> 00:25:52.019 line:-2
and there's no need
for manual synchronization.


556
00:25:52.052 --> 00:25:54.721 line:-2
With actors built
into the Swift language,


557
00:25:54.755 --> 00:25:57.057 line:-2
synchronizing access
to actor state


558
00:25:57.090 --> 00:25:59.893 line:-2
can be managed
for you automatically.


559
00:25:59.927 --> 00:26:03.430 line:-2
An actor can access its own
properties directly,


560
00:26:03.463 --> 00:26:08.135 line:-2
and interacting with an actor
externally uses async/await


561
00:26:08.168 --> 00:26:10.537 line:-1
to guarantee mutual exclusion.


562
00:26:10.571 --> 00:26:13.740 line:-2
The actor concept is so powerful
that it also solves


563
00:26:13.774 --> 00:26:16.910 line:-2
another common source
of concurrency problems,


564
00:26:16.944 --> 00:26:18.979 line:-2
which is proper use
of the main thread


565
00:26:19.012 --> 00:26:21.481 line:-1
for things like UI operations.


566
00:26:21.515 --> 00:26:25.385 line:-2
Today, you have to manually
dispatch to the main queue


567
00:26:25.419 --> 00:26:30.023 line:-2
each time you call an API that
must be run on the main thread.


568
00:26:30.057 --> 00:26:34.127 line:-2
Now, we're introducing
a way to state that an API


569
00:26:34.161 --> 00:26:39.032 line:-2
is always run on the main thread
using the main actor.


570
00:26:39.066 --> 00:26:42.603 line:-2
Making sure that an API
always runs on the main actor


571
00:26:42.636 --> 00:26:45.239 line:-2
is as easy as annotating
the declaration


572
00:26:45.272 --> 00:26:48.242 line:-1
with the MainActor attribute.


573
00:26:48.275 --> 00:26:50.811 line:-2
Just like with other actors,
calling a function


574
00:26:50.844 --> 00:26:55.616 line:-2
that runs on the main actor
is just an await away.


575
00:26:55.649 --> 00:26:58.852 line:-2
Altogether,
this means it's easier write


576
00:26:58.886 --> 00:27:03.957 line:-2
safe concurrent code that you
don't have to manage yourself.


577
00:27:03.991 --> 00:27:06.059 line:-2
As we build support
for concurrency


578
00:27:06.093 --> 00:27:07.961 line:-1
directly into the language,


579
00:27:07.995 --> 00:27:10.464 line:-2
it gives us the opportunity
to better optimize


580
00:27:10.497 --> 00:27:12.599 line:-2
the performance
of your concurrent code.


581
00:27:12.633 --> 00:27:15.836 line:-2
With async/await,
the compiler understands


582
00:27:15.869 --> 00:27:17.604 line:-1
the concurrency of your code,


583
00:27:17.638 --> 00:27:19.973 line:-2
which allows for more
effective optimizations.


584
00:27:20.007 --> 00:27:23.210 line:-2
This includes reducing
reference counts and inlining


585
00:27:23.243 --> 00:27:25.646 line:-2
as well as addressing
concurrency-specific


586
00:27:25.679 --> 00:27:29.550 line:-2
performance issues like
excessive context switches.


587
00:27:29.583 --> 00:27:32.352 line:-2
And of course,
your concurrent code will get


588
00:27:32.386 --> 00:27:36.757 line:-2
even faster as the compiler gets
smarter in the years ahead.


589
00:27:36.790 --> 00:27:39.026 line:-2
There are
tons of asynchronous APIs


590
00:27:39.059 --> 00:27:42.930 line:-2
in the SDK that you
already use in your apps.


591
00:27:42.963 --> 00:27:46.233 line:-2
We've refined the SDK
to enable async/await


592
00:27:46.266 --> 00:27:49.870 line:-2
with these asynchronous APIs,
so you can immediately


593
00:27:49.903 --> 00:27:53.240 line:-2
adopt async/await
in your existing code.


594
00:27:53.273 --> 00:27:55.609 line:-1
And we didn't stop there.


595
00:27:55.642 --> 00:27:58.679 line:-2
We've added new purposely
crafted APIs


596
00:27:58.712 --> 00:28:00.547 line:-2
that take advantage
of async/await


597
00:28:00.581 --> 00:28:02.416 line:-1
for when you work with URLs,


598
00:28:02.449 --> 00:28:04.751 line:-2
when you're
doing asynchronous I/O,


599
00:28:04.785 --> 00:28:08.188 line:-2
and we even added support
for asynchronously iterating


600
00:28:08.222 --> 00:28:10.290 line:-1
line-by-line through a file.


601
00:28:10.324 --> 00:28:14.528 line:-2
Async/await makes it natural
to express asynchronous code,


602
00:28:14.561 --> 00:28:17.464 line:-2
structured concurrency
makes concurrent code


603
00:28:17.497 --> 00:28:18.999 line:-1
easier to reason about,


604
00:28:19.032 --> 00:28:21.168 line:-1
and actors help you safely model


605
00:28:21.201 --> 00:28:23.637 line:-2
shared state
in a concurrent program.


606
00:28:23.670 --> 00:28:25.873 line:-2
The Swift concurrency
model brings together


607
00:28:25.906 --> 00:28:29.543 line:-2
these fundamental pieces
to make you more efficient,


608
00:28:29.576 --> 00:28:32.079 line:-2
give you more power,
and allow you to have


609
00:28:32.112 --> 00:28:34.948 line:-2
more fun
building concurrent apps.


610
00:28:34.982 --> 00:28:39.319 line:-2
Of course, the language
is just one piece of the puzzle.


611
00:28:39.353 --> 00:28:43.023 line:-2
The frameworks built with Swift
are just as important.


612
00:28:43.056 --> 00:28:45.559 line:-1
Now, back to Josh.


613
00:28:45.592 --> 00:28:46.894 line:-1
[Josh] Swift is the foundation


614
00:28:46.927 --> 00:28:49.696 line:-1
for the next generation of APIs.


615
00:28:49.730 --> 00:28:52.165 line:-2
With new features
like Concurrency,


616
00:28:52.199 --> 00:28:55.702 line:-2
we're evolving the language
and frameworks together,


617
00:28:55.736 --> 00:28:59.306 line:-2
so you'll see immediate
benefits across the SDK,


618
00:28:59.339 --> 00:29:03.577 line:-2
including with key
technologies like SwiftUI.


619
00:29:03.610 --> 00:29:06.880 line:-2
Two years ago, we began
to reinvent UI development


620
00:29:06.914 --> 00:29:08.815 line:-1
on our platforms.


621
00:29:08.849 --> 00:29:11.718 line:-2
We started small,
with a core API


622
00:29:11.752 --> 00:29:14.388 line:-2
that allowed you to adopt
SwiftUI incrementally


623
00:29:14.421 --> 00:29:17.357 line:-1
in your existing applications.


624
00:29:17.391 --> 00:29:21.028 line:-2
Last year, we added API to
describe your app's life cycle,


625
00:29:21.061 --> 00:29:24.464 line:-2
enabling you to develop apps
entirely in SwiftUI


626
00:29:24.498 --> 00:29:26.366 line:-1
from your first line of code.


627
00:29:26.400 --> 00:29:28.535 line:-1
And this year, SwiftUI is taking


628
00:29:28.569 --> 00:29:30.871 line:-1
another huge step forward,


629
00:29:30.904 --> 00:29:32.773 line:-2
helping you deliver
great experiences


630
00:29:32.806 --> 00:29:37.177 line:-2
to all your users
across all Apple platforms.


631
00:29:37.211 --> 00:29:41.582 line:-2
We focused on APIs that we know
are critical to your apps,


632
00:29:41.615 --> 00:29:44.451 line:-2
because we also needed them
to build ours.


633
00:29:44.484 --> 00:29:48.155 line:-2
And your feedback helped us
enhance the most important APIs,


634
00:29:48.188 --> 00:29:51.792 line:-2
while also refining
the development experience.


635
00:29:51.825 --> 00:29:55.429 line:-2
This year, we've started
using SwiftUI in apps like Maps,


636
00:29:55.462 --> 00:29:57.798 line:-1
Photos, and Shortcuts.


637
00:29:57.831 --> 00:30:00.300 line:-2
And we've rebuilt iOS apps
like Weather,


638
00:30:00.334 --> 00:30:03.337 line:-2
system interfaces like
the Apple Pay payment sheet,


639
00:30:03.370 --> 00:30:06.006 line:-2
and brand new watchOS apps
like Find My,


640
00:30:06.039 --> 00:30:08.008 line:-1
entirely with SwiftUI.


641
00:30:08.041 --> 00:30:10.110 line:-2
To see just a few
of the enhancements


642
00:30:10.143 --> 00:30:11.512 line:-1
that make this possible,


643
00:30:11.545 --> 00:30:14.848 line:-2
let's take a look at some ways
that we can improve Fruta.


644
00:30:14.882 --> 00:30:17.985 line:-2
We'll start with List,
the most ubiquitous component


645
00:30:18.018 --> 00:30:20.787 line:-1
across all our platforms.


646
00:30:20.821 --> 00:30:23.357 line:-2
We can now easily add
a swipe action


647
00:30:23.390 --> 00:30:25.526 line:-2
to mark a smoothie
as a favorite.


648
00:30:25.559 --> 00:30:28.929 line:-2
Adding pull-to-refresh
is just one more line.


649
00:30:28.962 --> 00:30:32.199 line:-2
And Swift now makes it
easy to limit a modifier


650
00:30:32.232 --> 00:30:36.970 line:-2
to a single platform--
in this case, iOS.


651
00:30:37.004 --> 00:30:40.841 line:-2
Adding a Search field
is just one more line.


652
00:30:40.874 --> 00:30:42.609 line:-1
Now, we could stop there,


653
00:30:42.643 --> 00:30:45.379 line:-2
but let's add some
search suggestions as well,


654
00:30:45.412 --> 00:30:47.781 line:-2
which will be shown
while we're typing.


655
00:30:47.814 --> 00:30:51.385 line:-2
And let's test it right here
in Xcode.


656
00:30:51.418 --> 00:30:53.620 line:-1
We have a swipe action now,


657
00:30:53.654 --> 00:30:57.457 line:-2
pull-to-refresh,
and full search support


658
00:30:57.491 --> 00:30:59.393 line:-1
including suggestions,


659
00:30:59.426 --> 00:31:02.429 line:-1
all in just a few lines of code.


660
00:31:02.462 --> 00:31:06.800 line:-2
Next, let's refine Fruta's
accessibility support.


661
00:31:06.834 --> 00:31:11.071 line:-2
First, a new modifier which adds
accessibility rotors


662
00:31:11.104 --> 00:31:15.108 line:-2
can make our app faster
to navigate with VoiceOver.


663
00:31:15.142 --> 00:31:17.611 line:-2
And second we'll improve
the accessibility


664
00:31:17.644 --> 00:31:20.414 line:-1
of this custom stepper control.


665
00:31:20.447 --> 00:31:24.651 line:-2
Custom controls are often
a source of poor accessibility,


666
00:31:24.685 --> 00:31:27.788 line:-2
but we can now simply inherit
the full accessibility


667
00:31:27.821 --> 00:31:30.524 line:-2
implementation from
the standard Stepper.


668
00:31:30.557 --> 00:31:35.696 line:-2
Most SwiftUI APIs are
available across all platforms,


669
00:31:35.729 --> 00:31:38.265 line:-2
but we're moving platforms
forward individually


670
00:31:38.298 --> 00:31:40.667 line:-1
where appropriate as well.


671
00:31:40.701 --> 00:31:44.705 line:-2
Let's add a multi-column
table to our macOS app.


672
00:31:44.738 --> 00:31:47.241 line:-2
I already added a new file
for this,


673
00:31:47.274 --> 00:31:50.577 line:-2
so we'll just add the new
Table component here.


674
00:31:50.611 --> 00:31:54.448 line:-2
And then within it, we'll just
add three columns of data.


675
00:31:54.481 --> 00:31:58.051 line:-2
Now let's run the macOS
version of our app.


676
00:31:58.085 --> 00:32:00.921 line:-2
We'll find a search field
placed right where you expect it


677
00:32:00.954 --> 00:32:02.656 line:-1
in the toolbar,


678
00:32:02.689 --> 00:32:05.959 line:-2
and suggestions appear
just below it while we type.


679
00:32:05.993 --> 00:32:08.262 line:-2
We can switch to our new
multi-column table


680
00:32:08.295 --> 00:32:10.430 line:-2
that we added,
and we'll see it's displaying


681
00:32:10.464 --> 00:32:12.466 line:-1
the search results as well.


682
00:32:12.499 --> 00:32:17.371 line:-2
And of course, we can clear
the search to get them all back.


683
00:32:17.404 --> 00:32:22.109 line:-2
Now let's switch to recipes
and turn on VoiceOver.


684
00:32:22.142 --> 00:32:24.711 line:-2
With VoiceOver, we can
easily access the rotor


685
00:32:24.745 --> 00:32:29.283 line:-2
that we added to quickly choose
a smoothie from the list.


686
00:32:29.316 --> 00:32:31.685 line:-2
And VoiceOver interaction
with our custom stepper


687
00:32:31.718 --> 00:32:35.055 line:-2
now behaves exactly like
a standard stepper,


688
00:32:35.088 --> 00:32:38.926 line:-2
making it easy to use
for all of our users.


689
00:32:38.959 --> 00:32:42.429 line:-2
We're building our apps using
these new capabilities,


690
00:32:42.462 --> 00:32:46.466 line:-2
so we know that you'll find them
helpful in yours as well.


691
00:32:46.500 --> 00:32:50.237 line:-2
And we've just scratched
the surface of what's new.


692
00:32:50.270 --> 00:32:52.673 line:-2
For example,
you're going to love


693
00:32:52.706 --> 00:32:55.642 line:-1
SwiftUI's new material support.


694
00:32:55.676 --> 00:32:59.413 line:-2
In the Fruta app, views like
this are made more interesting


695
00:32:59.446 --> 00:33:01.548 line:-1
by adding a background image,


696
00:33:01.582 --> 00:33:03.750 line:-2
and they're kept legible
by applying


697
00:33:03.784 --> 00:33:07.487 line:-2
one of the new material styles
behind the content.


698
00:33:07.521 --> 00:33:10.357 line:-2
Content responds dynamically
to this background,


699
00:33:10.390 --> 00:33:12.426 line:-2
so instead of the gray
normally used


700
00:33:12.459 --> 00:33:15.462 line:-2
for secondary content
in an opaque context,


701
00:33:15.495 --> 00:33:20.234 line:-2
SwiftUI will automatically apply
vibrant rendering to text,


702
00:33:20.267 --> 00:33:24.538 line:-2
symbols, and even standard UI
like separators.


703
00:33:24.571 --> 00:33:26.874 line:-1
So with just one line of code,


704
00:33:26.907 --> 00:33:29.743 line:-2
you can get great-looking
results like this,


705
00:33:29.776 --> 00:33:30.878 line:-1
automatically.


706
00:33:30.911 --> 00:33:33.013 line:-1
And there's so much more.


707
00:33:33.046 --> 00:33:37.184 line:-2
With all of these improvements,
SwiftUI is the best way to build


708
00:33:37.217 --> 00:33:41.722 line:-2
great experiences for all your
users across all our platforms.


709
00:33:41.755 --> 00:33:44.057 line:-2
And this year, we're
bringing app development


710
00:33:44.091 --> 00:33:48.295 line:-2
with SwiftUI to iPad
in Swift Playgrounds.


711
00:33:48.328 --> 00:33:52.833 line:-2
It's so much fun, and Matt will
show you all about how it works.


712
00:33:56.136 --> 00:33:58.438 line:-2
[Matt] You know Swift
Playgrounds provides


713
00:33:58.472 --> 00:33:59.873 line:-2
a great way to learn how
to code,


714
00:33:59.907 --> 00:34:01.642 line:-2
and it's been used
by millions of people


715
00:34:01.675 --> 00:34:03.844 line:-2
to expand
their knowledge of Swift.


716
00:34:03.877 --> 00:34:05.746 line:-3
And beyond being a great way
to learn,


717
00:34:05.779 --> 00:34:08.115 line:-3
we know a lot of you already
use Swift Playgrounds


718
00:34:08.148 --> 00:34:10.551 line:-3
to experiment,
sketching out new ideas


719
00:34:10.584 --> 00:34:14.588 line:-2
and playing with the latest
features in the iPadOS SDK.


720
00:34:14.621 --> 00:34:18.825 line:-2
This year, Swift Playgrounds 4
is taking a huge step forward


721
00:34:18.859 --> 00:34:20.460 line:-1
by allowing you to build apps,


722
00:34:20.494 --> 00:34:22.196 line:-2
and even submit them
to the App Store


723
00:34:22.229 --> 00:34:24.064 line:-1
right from your iPad.


724
00:34:24.097 --> 00:34:26.500 line:-2
With the ability to create apps
on iPad,


725
00:34:26.533 --> 00:34:28.602 line:-2
you can be more productive
in Swift Playgrounds


726
00:34:28.635 --> 00:34:31.238 line:-2
than ever before, allowing you
to work on your ideas


727
00:34:31.271 --> 00:34:34.208 line:-2
wherever you go,
on whichever device you prefer.


728
00:34:34.241 --> 00:34:36.710 line:-2
And with a new
package-based project format,


729
00:34:36.743 --> 00:34:38.712 line:-2
you can seamlessly
bring your work between


730
00:34:38.745 --> 00:34:41.081 line:-1
Swift Playgrounds and Xcode.


731
00:34:41.114 --> 00:34:43.617 line:-1
Let's dive in and take a look.


732
00:34:43.650 --> 00:34:46.220 line:-1
This is Swift Playgrounds 4.


733
00:34:46.253 --> 00:34:48.722 line:-2
It's got all of the great
Learn to Code content


734
00:34:48.755 --> 00:34:51.692 line:-2
that's helped inspire
new developers around the world,


735
00:34:51.725 --> 00:34:56.063 line:-2
and now, you can create projects
that let you build SwiftUI apps.


736
00:34:56.096 --> 00:34:58.632 line:-1
Let's make a new one now


737
00:34:58.665 --> 00:35:00.767 line:-1
and see what we can build.


738
00:35:00.801 --> 00:35:03.737 line:-2
I'll open the new project
I created.


739
00:35:03.770 --> 00:35:05.739 line:-2
In an app project
in Swift Playgrounds,


740
00:35:05.772 --> 00:35:07.975 line:-2
my code is on the left,
and the result of my work


741
00:35:08.008 --> 00:35:10.944 line:-2
is on the right,
just like I'm used to.


742
00:35:10.978 --> 00:35:14.648 line:-2
What's new is deeply integrated
support for SwiftUI,


743
00:35:14.681 --> 00:35:17.818 line:-2
with live interactive previews
powered by the same technology


744
00:35:17.851 --> 00:35:19.553 line:-1
used in Xcode.


745
00:35:19.586 --> 00:35:22.422 line:-2
My new project template comes
with a Hello World placeholder,


746
00:35:22.456 --> 00:35:26.760 line:-2
which I can easily replace
with a text view of my own.


747
00:35:26.793 --> 00:35:30.864 line:-2
I'll start typing Text and right
away, I get helpful suggestions


748
00:35:30.898 --> 00:35:33.200 line:-2
from code completion,
which, new in this release,


749
00:35:33.233 --> 00:35:36.203 line:-2
appears right below
my insertion point.


750
00:35:36.236 --> 00:35:40.407 line:-2
I'll accept the completion
and write my own hello message.


751
00:35:40.440 --> 00:35:42.910 line:-2
While I'm typing,
my app updates live


752
00:35:42.943 --> 00:35:45.946 line:-2
to show my changes
with each keystroke.


753
00:35:45.979 --> 00:35:47.948 line:-1
Now, let's have a little fun.


754
00:35:47.981 --> 00:35:51.385 line:-2
I'm going to replace this
static text with a button.


755
00:35:51.418 --> 00:35:54.488 line:-2
I'll select my text view,
and then add a button


756
00:35:54.521 --> 00:35:56.256 line:-1
from the library.


757
00:35:56.290 --> 00:35:58.525 line:-2
Here in the library,
I can browse and search


758
00:35:58.559 --> 00:35:59.927 line:-1
through assets in my project,


759
00:35:59.960 --> 00:36:02.896 line:-2
as well as the SwiftUI views,
modifiers,


760
00:36:02.930 --> 00:36:07.100 line:-2
colors, and SF Symbols
provided by iPadOS.


761
00:36:07.134 --> 00:36:09.102 line:-2
For now,
I'll just add my button.


762
00:36:11.104 --> 00:36:14.107 line:-2
I'm going to fill the action in
with a simple print statement.


763
00:36:17.477 --> 00:36:22.382 line:-2
For the body, I'll use
a Label with a system image.


764
00:36:22.416 --> 00:36:24.585 line:-1
The text will be "Say Hello."


765
00:36:26.887 --> 00:36:30.457 line:-2
And the image will be
the SF Symbol for Swift.


766
00:36:30.490 --> 00:36:34.328 line:-2
I've now got an interactive
button in my app.


767
00:36:34.361 --> 00:36:36.663 line:-2
When I tap it,
the print message I wrote


768
00:36:36.697 --> 00:36:39.900 line:-2
appears as a message bubble
at the bottom of my screen.


769
00:36:39.933 --> 00:36:43.237 line:-2
If I open the console, I can see
a history of print statements


770
00:36:43.270 --> 00:36:46.039 line:-2
that have been executed
since I opened this project,


771
00:36:46.073 --> 00:36:50.244 line:-2
and it updates in real-time
as I interact with my app.


772
00:36:50.277 --> 00:36:52.312 line:-2
Now, this button is
purple because that's


773
00:36:52.346 --> 00:36:54.381 line:-2
my app's accent color,
which Swift Playgrounds


774
00:36:54.414 --> 00:36:57.184 line:-2
chose for me
when I created my project.


775
00:36:57.217 --> 00:36:59.152 line:-1
If I open the document sidebar,


776
00:36:59.186 --> 00:37:02.322 line:-2
I can access all of my app's
top-level settings,


777
00:37:02.356 --> 00:37:05.526 line:-2
like its name, accent color,
and icon.


778
00:37:05.559 --> 00:37:08.562 line:-2
As much as I do love purple,
I think this smiley face


779
00:37:08.595 --> 00:37:10.631 line:-2
will look big and bright
in orange,


780
00:37:10.664 --> 00:37:12.699 line:-2
so I'll change my accent
color here,


781
00:37:12.733 --> 00:37:15.235 line:-2
and both my app's icon
and the tint color


782
00:37:15.269 --> 00:37:18.939 line:-2
of the button I just made will
update to reflect the change.


783
00:37:18.972 --> 00:37:21.642 line:-2
This has been really fun,
but Swift Playgrounds


784
00:37:21.675 --> 00:37:24.444 line:-1
isn't just for experimentation.


785
00:37:24.478 --> 00:37:27.548 line:-2
I've got another app that I've
been working on for a while.


786
00:37:27.581 --> 00:37:30.083 line:-2
I use this app to track
the amount of time I spend


787
00:37:30.117 --> 00:37:31.885 line:-2
on my favorite hobbies,
and I think


788
00:37:31.919 --> 00:37:34.788 line:-2
others might find it useful
as well.


789
00:37:34.821 --> 00:37:37.124 line:-2
I can get a feel for what the
installed app would look like


790
00:37:37.157 --> 00:37:39.426 line:-1
by taking it full-screen.


791
00:37:39.459 --> 00:37:42.629 line:-2
Now I can explore my app
in its full-width two-,


792
00:37:42.663 --> 00:37:45.966 line:-1
or three-column layout.


793
00:37:45.999 --> 00:37:47.768 line:-1
I can jump out of full screen


794
00:37:47.801 --> 00:37:51.171 line:-2
and return
to my code whenever I like.


795
00:37:51.205 --> 00:37:53.974 line:-2
This feels great,
and I think my hard work is


796
00:37:54.007 --> 00:37:57.644 line:-2
ready to share with my friends
and family with TestFlight.


797
00:37:57.678 --> 00:37:59.179 line:-1
Anyone with a Developer Account


798
00:37:59.213 --> 00:38:01.515 line:-2
can upload their apps
from the App Settings area


799
00:38:01.548 --> 00:38:04.151 line:-2
once they're ready
for App Store Connect.


800
00:38:04.184 --> 00:38:06.854 line:-2
When I tap the upload button,
Swift Playgrounds builds,


801
00:38:06.887 --> 00:38:09.389 line:-1
packages, and uploads my app.


802
00:38:09.423 --> 00:38:12.059 line:-2
I can then hop over to the App
Store Connect website,


803
00:38:12.092 --> 00:38:13.994 line:-2
and make my app available
via TestFlight,


804
00:38:14.027 --> 00:38:17.197 line:-2
and when it's ready,
submit it to the App Store,


805
00:38:17.231 --> 00:38:19.233 line:-1
and share it with the world.


806
00:38:19.266 --> 00:38:21.835 line:-2
And that's a quick look
at Swift Playgrounds 4,


807
00:38:21.869 --> 00:38:24.471 line:-2
with the ability to create
apps using SwiftUI


808
00:38:24.505 --> 00:38:26.240 line:-1
right on your iPad.


809
00:38:26.273 --> 00:38:29.676 line:-2
Swift Playgrounds 4 will be
available later this year.


810
00:38:29.710 --> 00:38:32.246 line:-2
We know you're going to love
having the freedom to develop


811
00:38:32.279 --> 00:38:36.383 line:-2
your app ideas wherever you go,
on whichever device you prefer.


812
00:38:36.416 --> 00:38:38.385 line:-2
And now,
I'll hand it back to Susan.


813
00:38:43.857 --> 00:38:46.927 line:-2
[Susan] So much of the way
we experience the world is


814
00:38:46.960 --> 00:38:48.829 line:-1
through visual communication,


815
00:38:48.862 --> 00:38:51.565 line:-2
and that's a big part
of using Apple devices.


816
00:38:51.598 --> 00:38:54.067 line:-2
Our technologies
for graphics, displays,


817
00:38:54.101 --> 00:38:56.703 line:-2
and augmented reality are front
and center,


818
00:38:56.737 --> 00:38:58.639 line:-2
whether you're glancing
at the Always on Display


819
00:38:58.672 --> 00:38:59.940 line:-1
on Apple Watch,


820
00:38:59.973 --> 00:39:03.443 line:-2
enjoying ProMotion as you work
with video tools on iPad Pro,


821
00:39:03.477 --> 00:39:05.479 line:-1
playing a game on your iPhone,


822
00:39:05.512 --> 00:39:08.448 line:-2
or creating immersive 3D content
on your Mac.


823
00:39:08.482 --> 00:39:11.518 line:-2
And now Myra and Eric are gonna
take you through what's new


824
00:39:11.552 --> 00:39:14.188 line:-3
this year starting
with augmented reality.


825
00:39:15.122 --> 00:39:16.957 line:-3
[Myra]
AR is a powerful technology


826
00:39:16,990 --> 00:39:19,226
and thousands of you are already
using it in your apps


827
00:39:19,259 --> 00:39:21,395
to transform how we all work,


828
00:39:21.428 --> 00:39:23.163 line:-1
play, and express ourselves.


829
00:39:23.197 --> 00:39:26.333 line:-2
With over a billion AR
enabled iPhones and iPads


830
00:39:26.366 --> 00:39:28.101 line:-2
around the world today,
there's never been


831
00:39:28.135 --> 00:39:31.471 line:-2
a better time to start adding
AR experiences to your apps


832
00:39:31.505 --> 00:39:33.941 line:-1
or building entirely new ones.


833
00:39:33.974 --> 00:39:36.777 line:-2
Historically, building great AR
apps has required


834
00:39:36.810 --> 00:39:39.479 line:-2
deep knowledge of 3D modeling
and a mastery


835
00:39:39.513 --> 00:39:41.882 line:-2
of sophisticated
rendering engines.


836
00:39:41.915 --> 00:39:44.151 line:-2
However,
we want all of you to be able


837
00:39:44.184 --> 00:39:47.020 line:-2
to create amazing AR
experiences.


838
00:39:47.054 --> 00:39:49.790 line:-2
This is why we've released
a suite of technologies


839
00:39:49.823 --> 00:39:52.793 line:-2
to make it easy for you
to get started with AR.


840
00:39:52,826 --> 00:39:56,563
One of these is RealityKit,
our 3D rendering, audio,


841
00:39:56,597 --> 00:40:00,968
animation, and physics engine
built from the ground up for AR.


842
00:40:01.001 --> 00:40:03.337 line:-2
RealityKit makes
rendering immersive


843
00:40:03.370 --> 00:40:04.972 line:-1
AR experiences simple,


844
00:40:05.005 --> 00:40:06.740 line:-2
featuring
photorealistic rendering,


845
00:40:06.773 --> 00:40:10.077 line:-2
and camera effects
like noise and motion blur.


846
00:40:10.110 --> 00:40:13.313 line:-2
RealityKit also takes
advantage of our latest hardware


847
00:40:13.347 --> 00:40:16.583 line:-2
like the LiDAR Scanner,
which enables virtual objects


848
00:40:16.617 --> 00:40:19.019 line:-2
to behave just like
they were really there


849
00:40:19.052 --> 00:40:21.154 line:-2
with people
and object occlusion.


850
00:40:21.188 --> 00:40:23.423 line:-1
And it's all written in Swift.


851
00:40:23.457 --> 00:40:26.059 line:-2
Today, we're announcing
RealityKit 2,


852
00:40:26.093 --> 00:40:29.796 line:-2
a huge update that gives
you more visual, audio,


853
00:40:29.830 --> 00:40:30.898 line:-1
and animation control


854
00:40:30.931 --> 00:40:34.935 line:-2
and tackles the most difficult
part of making great AR apps--


855
00:40:34.968 --> 00:40:36.970 line:-1
creating 3D models.


856
00:40:37.004 --> 00:40:39.239 line:-2
If you've ever
created one before,


857
00:40:39.273 --> 00:40:42.109 line:-2
you know a single model
can take hours


858
00:40:42.142 --> 00:40:44.011 line:-2
and thousands of dollars
to make.


859
00:40:44.044 --> 00:40:47.381 line:-2
Now, with Object Capture,
you'll be able to make 3D models


860
00:40:47.414 --> 00:40:49.349 line:-1
in minutes using your iPhone


861
00:40:49.383 --> 00:40:51.018 line:-2
to capture
2D images of an object


862
00:40:51.051 --> 00:40:54.621 line:-2
and the Object Capture API
on Mac to turn these images


863
00:40:54.655 --> 00:40:58.158 line:-2
into lifelike 3D models,
optimized for AR.


864
00:40:58.192 --> 00:41:00.027 line:-1
This process is so simple.


865
00:41:00.060 --> 00:41:03.063 line:-2
You start by taking a series
of pictures with your


866
00:41:03.096 --> 00:41:05.899 line:-2
iPhone or iPad to capture
all angles of the object,


867
00:41:05.933 --> 00:41:07.935 line:-2
including the bottom,
because we support


868
00:41:07.968 --> 00:41:09.002 line:-1
flipping the object


869
00:41:09.036 --> 00:41:11.872 line:-2
and automatic foreground
segmentation.


870
00:41:11.905 --> 00:41:14.575 line:-2
You can use apps like Qlone,
which provide excellent guides


871
00:41:14.608 --> 00:41:17.477 line:-2
to help streamline
your workflow.


872
00:41:17.511 --> 00:41:19.746 line:-2
Then, using
the Object Capture API,


873
00:41:19.780 --> 00:41:23.550 line:-2
it only takes a few lines of
code to generate your 3D model.


874
00:41:23.584 --> 00:41:26.854 line:-2
You start a new photogrammetry
session in RealityKit


875
00:41:26.887 --> 00:41:30.457 line:-2
that points to the folder
of your captured images.


876
00:41:30.490 --> 00:41:33.293 line:-2
Then, call the process
function to generate


877
00:41:33.327 --> 00:41:35.996 line:-2
the model
at the desired level of detail.


878
00:41:36.029 --> 00:41:37.764 line:-1
It's that easy!


879
00:41:37.798 --> 00:41:41.602 line:-2
Object Capture enables you
to generate USDZ files


880
00:41:41.635 --> 00:41:43.737 line:-1
optimized for AR Quick Look,


881
00:41:43.770 --> 00:41:48.008 line:-2
so users can view them
in Messages, Mail, Safari,


882
00:41:48.041 --> 00:41:49.309 line:-1
and other apps.


883
00:41:49.343 --> 00:41:53.380 line:-2
You can also generate USD
or OBJ asset bundles


884
00:41:53.413 --> 00:41:57.050 line:-2
from the Object Capture API
that can be used for ray-tracing


885
00:41:57.084 --> 00:41:59.720 line:-2
and other
post-production workflows.


886
00:41:59.753 --> 00:42:03.857 line:-2
Turning real world objects into
3D models has never been easier.


887
00:42:03.891 --> 00:42:06.760 line:-2
You can get started using
Object Capture today


888
00:42:06.793 --> 00:42:09.129 line:-2
with our sample code,
and we're working with


889
00:42:09.162 --> 00:42:11.899 line:-2
some of the leading 3D content
creation tools


890
00:42:11.932 --> 00:42:15.702 line:-2
to bring this workflow into many
of the pro apps you already use


891
00:42:15.736 --> 00:42:19.439 line:-2
like Unity Mars,
Cinema 4D, and Qlone,


892
00:42:19.473 --> 00:42:21.575 line:-1
available later this year.


893
00:42:21.608 --> 00:42:25.179 line:-2
It's easy to bring
Object Capture models into Xcode


894
00:42:25.212 --> 00:42:29.149 line:-2
and use the new RealityKit
APIs to add effects.


895
00:42:29.183 --> 00:42:31.652 line:-2
My team and I tested
Object Capture by scanning


896
00:42:31.685 --> 00:42:33.187 line:-1
our favorite food,


897
00:42:33.220 --> 00:42:36.456 line:-2
and we built an AR App Clip
to share our recipes,


898
00:42:36.490 --> 00:42:39.359 line:-2
which include the AR preview
of the dish.


899
00:42:39.393 --> 00:42:41.995 line:-2
The chocolate croissant we
captured using Qlone


900
00:42:42.029 --> 00:42:44.932 line:-2
is actually a virtual
replica of a croissant


901
00:42:44.965 --> 00:42:46.733 line:-1
someone on my team baked,


902
00:42:46.767 --> 00:42:50.571 line:-2
and I want to add it as another
recipe to our App Clip.


903
00:42:52.973 --> 00:42:56.076 line:-2
I'll start by dragging
the 3D model of my croissant


904
00:42:56.109 --> 00:42:58.478 line:-1
into my ARApp project.


905
00:42:58.512 --> 00:43:01.148 line:-2
Next, I'll anchor it
to my App Clip Code


906
00:43:01.181 --> 00:43:06.653 line:-2
using ARKit and initialize
a ModelEntity for the asset.


907
00:43:06.687 --> 00:43:09.623 line:-2
I can always fully examine
the 3D model directly


908
00:43:09.656 --> 00:43:13.460 line:-2
in Xcode Quicklook at any time
while building my project,


909
00:43:13.493 --> 00:43:15.829 line:-1
before deploying my app clip.


910
00:43:15.863 --> 00:43:19.433 line:-2
We've used the new
RealityKit APIs in our App Clip


911
00:43:19.466 --> 00:43:24.705 line:-2
to add effects to each AR dish
to make it more realistic.


912
00:43:24.738 --> 00:43:28.275 line:-2
Because RealityKit is
a native rendering engine,


913
00:43:28.308 --> 00:43:32.779 line:-2
we can fit multiple AR scenes
or recipes into the App Clip.


914
00:43:32.813 --> 00:43:34.515 line:-1
Let's check it out.


915
00:43:39.753 --> 00:43:42.990 line:-2
When I scan the App Clip Code,
it launches the App Clip


916
00:43:43.023 --> 00:43:46.393 line:-2
and then anchors the chocolate
croissant right on top.


917
00:43:46.426 --> 00:43:48.161 line:-2
To make the croissant
more realistic,


918
00:43:48.195 --> 00:43:51.298 line:-2
we used the new RealityKit
custom surface shader


919
00:43:51.331 --> 00:43:55.002 line:-2
to add emissive light and pull
back on the ambient occlusion.


920
00:43:55.035 --> 00:43:57.971 line:-2
Let's take a look at
a few more dishes from the team,


921
00:43:58.005 --> 00:43:59.206 line:-1
like seared steak.


922
00:43:59.239 --> 00:44:01.341 line:-2
Here we added
onto the custom surface shader


923
00:44:01.375 --> 00:44:03.577 line:-2
by creating a steam effect
with the new


924
00:44:03.610 --> 00:44:08.348 line:-2
Procedural Geometry API
to layer in a flip-book shader.


925
00:44:08.382 --> 00:44:11.185 line:-2
Because the steam is procedural,
we can use the same effect


926
00:44:11.218 --> 00:44:13.720 line:-2
on lots of recipes,
like this pizza.


927
00:44:13.754 --> 00:44:16.290 line:-2
Notice how the steam
effect procedurally expanded


928
00:44:16.323 --> 00:44:19.393 line:-1
with size of the pizza.


929
00:44:19.426 --> 00:44:21.061 line:-1
For this barbecue chicken dish,


930
00:44:21.094 --> 00:44:24.231 line:-2
we've added a full screen
post processing fire effect


931
00:44:24.264 --> 00:44:26.733 line:-1
to indicate this dish is spicy.


932
00:44:26.767 --> 00:44:29.603 line:-2
And finally, we dropped
the flames and instead used


933
00:44:29.636 --> 00:44:32.372 line:-2
a new compute shader
and geometry modifier


934
00:44:32.406 --> 00:44:36.476 line:-2
to add some celebratory confetti
around the birthday cake.


935
00:44:36.510 --> 00:44:39.780 line:-2
As you can see, we've opened up
RealityKit rendering


936
00:44:39.813 --> 00:44:42.850 line:-2
to more customizations,
and we can't wait to see


937
00:44:42.883 --> 00:44:47.187 line:-2
your creativity in how
you use these new APIs.


938
00:44:47.221 --> 00:44:49.957 line:-2
These are just some
of the exciting new improvements


939
00:44:49.990 --> 00:44:53.126 line:-2
we have for AR that enable
all developers


940
00:44:53.160 --> 00:44:56.363 line:-2
to create 3D models
to build more immersive


941
00:44:56.396 --> 00:44:59.399 line:-1
and lifelike AR experiences.


942
00:44:59.433 --> 00:45:01.802 line:-2
One of the foundational
aspects of what we do


943
00:45:01.835 --> 00:45:05.572 line:-2
in ARKit and RealityKit
is our graphics technologies.


944
00:45:05.606 --> 00:45:09.009 line:-2
And Eric will give us
an update on what's new.


945
00:45:09.042 --> 00:45:11.945 line:-3
[Eric] A core idea of how
we build products at Apple


946
00:45:11.979 --> 00:45:14.081 line:-3
is that we bring together
the most amazing


947
00:45:14.114 --> 00:45:15.916 line:-1
hardware and software,


948
00:45:15,949 --> 00:45:18,819
and our approach to graphics
reflects that ideal.


949
00:45:18,852 --> 00:45:21,154
For years,
we've delivered powerful


950
00:45:21,188 --> 00:45:24,291
Apple-designed GPUs
for iPhone and iPad,


951
00:45:24,324 --> 00:45:27,327
paired with our Metal graphics
and compute APIs


952
00:45:27,361 --> 00:45:30,163
to help you get
the most out of our products.


953
00:45:30,197 --> 00:45:33,634
And now, with the M1 chip,
not only are we are delivering


954
00:45:33,667 --> 00:45:36,270
an unprecedented level
of graphics performance


955
00:45:36,303 --> 00:45:40,140
and power efficiency
in our latest Macs and iPad Pro,


956
00:45:40,174 --> 00:45:43,043
but we have created a unified
Apple graphics platform


957
00:45:43,076 --> 00:45:47,047
with a common architecture based
on Metal, the Apple GPU,


958
00:45:47.080 --> 00:45:52.252 line:-2
and unified memory, that spans
from iPhone, to iPad, to Mac.


959
00:45:52.286 --> 00:45:55.489 line:-2
And this platform enables
a fundamental shift.


960
00:45:55.522 --> 00:45:57.691 line:-2
Graphics workloads that
previously required


961
00:45:57.724 --> 00:46:00.928 line:-2
high-end workstations or
discrete GPU gaming computers,


962
00:46:00.961 --> 00:46:04.998 line:-2
are now possible across
our most popular products.


963
00:46:05.032 --> 00:46:08.268 line:-2
For instance, the console-level
performance of this unified


964
00:46:08.302 --> 00:46:11.872 line:-2
platform has enabled developers
like Larian to bring their


965
00:46:11.905 --> 00:46:14.541 line:-2
AAA game,
Divinity Original Sin 2,


966
00:46:14.575 --> 00:46:16.977 line:-1
to Mac and now to iPad.


967
00:46:17.010 --> 00:46:19.246 line:-1
And Deep Silver is using M1


968
00:46:19.279 --> 00:46:21.181 line:-2
and Metal's modern
shader pipeline


969
00:46:21.215 --> 00:46:24.084 line:-2
to enable the high performance,
immersive graphics


970
00:46:24.117 --> 00:46:27.421 line:-2
in their survival game
Metro Exodus for Mac.


971
00:46:27.454 --> 00:46:31.258 line:-2
But this graphics platform
is not just for games.


972
00:46:31.291 --> 00:46:34.761 line:-2
Metal compute APIs are now
accelerating the next generation


973
00:46:34.795 --> 00:46:36.563 line:-1
of professional GPU renderers,


974
00:46:36.597 --> 00:46:39.233 line:-2
like the all-new Octane X
from OTOY


975
00:46:39.266 --> 00:46:42.536 line:-2
and Maxon's Redshift
renderer in Cinema 4D,


976
00:46:42.569 --> 00:46:44.671 line:-1
now running Metal-accelerated


977
00:46:44.705 --> 00:46:46.874 line:-2
on the Mac
for the very first time.


978
00:46:46.907 --> 00:46:50.477 line:-2
So to help you bring your
graphics apps and games across


979
00:46:50.511 --> 00:46:52.646 line:-1
all of Apple's powerful devices,


980
00:46:52.679 --> 00:46:54.948 line:-2
we focused on two big areas
this year:


981
00:46:54.982 --> 00:46:57.384 line:-2
advanced graphics
and gaming features,


982
00:46:57.417 --> 00:47:00.387 line:-2
and powerful
graphics developer tools.


983
00:47:00.420 --> 00:47:03.891 line:-2
First, we focused on three
key features essential to modern


984
00:47:03.924 --> 00:47:07.094 line:-2
high end games
and GPU rendering algorithms


985
00:47:07,127 --> 00:47:10,531
In order to accelerate
complex mathematical operations,


986
00:47:10,564 --> 00:47:12,432
model the behavior of light,


987
00:47:12.466 --> 00:47:16.336 line:-2
and represent realistic
surfaces, modern GPU renderers


988
00:47:16.370 --> 00:47:19.006 line:-2
need to interleave Metal
graphics and compute commands


989
00:47:19.039 --> 00:47:20.807 line:-1
in the same pipeline,


990
00:47:20.841 --> 00:47:23.644 line:-2
which is why Metal can now call
dynamic libraries,


991
00:47:23.677 --> 00:47:25.245 line:-1
and Ray Query primitives,


992
00:47:25.279 --> 00:47:27.814 line:-2
directly from
your graphics shaders.


993
00:47:27.848 --> 00:47:30.317 line:-2
And you can create even more
photo-realistic rendering


994
00:47:30.350 --> 00:47:32.452 line:-2
with the new Stochastic
Motion Blur function


995
00:47:32.486 --> 00:47:34.655 line:-1
in the Metal Ray Tracing API.


996
00:47:34,688 --> 00:47:36,957
For games to achieve higher
frame rates


997
00:47:36,990 --> 00:47:39,293
with lower latency
and less judder,


998
00:47:39,326 --> 00:47:42,196
developers need more control
over the display.


999
00:47:42.229 --> 00:47:44.464 line:-2
To accomplish this
and take advantage of


1000
00:47:44.498 --> 00:47:47.835 line:-2
the awesome graphics performance
of the latest iPad Pro,


1001
00:47:47.868 --> 00:47:50.571 line:-2
your game can use the Metal
presentation time API


1002
00:47:50.604 --> 00:47:52.973 line:-2
and the ProMotion display
to dynamically adapt


1003
00:47:53.006 --> 00:47:55.676 line:-2
your app's frame rate based
on your desired latency


1004
00:47:55.709 --> 00:47:57.644 line:-1
between rendering and input.


1005
00:47:57.678 --> 00:48:02.616 line:-2
And macOS Monterey adds support
for Adaptive Sync Displays.


1006
00:48:02.649 --> 00:48:05.219 line:-2
This means you can now
take advantage of these


1007
00:48:05.252 --> 00:48:08.889 line:-2
ultra low-latency and variable
refresh rate displays


1008
00:48:08.922 --> 00:48:10.824 line:-1
for your Mac games as well.


1009
00:48:10.858 --> 00:48:13.594 line:-2
Now, high-end games
with advanced graphics


1010
00:48:13.627 --> 00:48:16.396 line:-2
are often designed around using
game controllers as input.


1011
00:48:16.430 --> 00:48:18.198 line:-2
And adding game controller
support is a powerful


1012
00:48:18.232 --> 00:48:20.467 line:-2
and easy way to use a common
input model


1013
00:48:20.501 --> 00:48:23.737 line:-2
to bring your games to our
unified graphics platform.


1014
00:48:23.770 --> 00:48:25.873 line:-2
Our Game Controller
framework now supports


1015
00:48:25.906 --> 00:48:27.708 line:-1
the most popular controllers,


1016
00:48:27.741 --> 00:48:29.142 line:-1
Including support for the latest


1017
00:48:29.176 --> 00:48:30.878 line:-2
Xbox Series X
Wireless Controller


1018
00:48:30.911 --> 00:48:33.447 line:-2
and the PlayStation 5
DualSense Controller,


1019
00:48:33.480 --> 00:48:35.949 line:-1
complete with haptics support.


1020
00:48:35.983 --> 00:48:37.951 line:-2
To make it even easier
for you to bring your


1021
00:48:37.985 --> 00:48:40.287 line:-2
controller-based games
to iPhone, and iPad,


1022
00:48:40.320 --> 00:48:43.423 line:-2
we've added a new API so that
you can enable an on-screen


1023
00:48:43.457 --> 00:48:46.527 line:-2
virtual Game Controller,
with just a few lines of code.


1024
00:48:46.560 --> 00:48:49.630 line:-2
and game controller support is
more valuable than ever,


1025
00:48:49.663 --> 00:48:51.598 line:-1
because in macOS Monterey


1026
00:48:51.632 --> 00:48:54.301 line:-2
and iPadOS 15,
players can find the games


1027
00:48:54.334 --> 00:48:55.702 line:-1
their friends are playing,


1028
00:48:55.736 --> 00:48:57.337 line:-2
directly navigate
to the app library


1029
00:48:57.371 --> 00:48:59.840 line:-2
to launch a game,
and then hit the "Share" button


1030
00:48:59.873 --> 00:49:01.542 line:-2
to record their favorite
game highlights,


1031
00:49:01.575 --> 00:49:04.711 line:-2
all without the controller
ever leaving their hands.


1032
00:49:04.745 --> 00:49:07.781 line:-2
Now, along with these new
advanced APIs and features,


1033
00:49:07.814 --> 00:49:10.784 line:-2
Xcode 13 adds powerful
new graphics developer tools


1034
00:49:10.817 --> 00:49:13.587 line:-2
for you to optimize
and debug your GPU code,


1035
00:49:13.620 --> 00:49:15.822 line:-2
each designed to bring your
modern high-end games


1036
00:49:15.856 --> 00:49:18.392 line:-2
and graphics applications
to the next level.


1037
00:49:18.425 --> 00:49:21.061 line:-2
First, when building advanced
GPU renderers and games,


1038
00:49:21.094 --> 00:49:23.363 line:-1
GPU shaders can get really big.


1039
00:49:23.397 --> 00:49:25.365 line:-2
Debugging 10,000 lines
of shader code


1040
00:49:25.399 --> 00:49:26.834 line:-1
across thousands of workgroups


1041
00:49:26.867 --> 00:49:30.070 line:-2
all running in parallel
can take a really long time.


1042
00:49:30,103 --> 00:49:33,173
To help you streamline this
process, Xcode 13 adds


1043
00:49:33,207 --> 00:49:34,875
Selective Shader Debugging.


1044
00:49:34.908 --> 00:49:36.944 line:-2
Here, we're using
Selective Shader Debugging


1045
00:49:36.977 --> 00:49:39.346 line:-2
to choose exactly which
functions to debug,


1046
00:49:39.379 --> 00:49:41.648 line:-1
within a much larger GPU shader.


1047
00:49:41.682 --> 00:49:43.650 line:-2
This can dramatically
reduce the time it takes you


1048
00:49:43.684 --> 00:49:45.853 line:-2
to iterate and debug
your largest shaders,


1049
00:49:45.886 --> 00:49:48.889 line:-2
which lets you develop faster,
and focus on adding features


1050
00:49:48.922 --> 00:49:51.925 line:-2
and performance
to your GPU code.


1051
00:49:51,959 --> 00:49:55,963
Next, high end AAA games
also require the latest


1052
00:49:55,996 --> 00:49:58,165
in modern texture
compression support,


1053
00:49:58.198 --> 00:50:00.400 line:-2
which is why we've updated
our powerful


1054
00:50:00.434 --> 00:50:02.169 line:-1
Metal Texture Converter Tool


1055
00:50:02.202 --> 00:50:04.505 line:-2
to give you direct control
over the Texture Converter


1056
00:50:04.538 --> 00:50:06.006 line:-1
compression pipeline,


1057
00:50:06.039 --> 00:50:08.775 line:-2
added all-new gamma-aware
pixel transforms,


1058
00:50:08.809 --> 00:50:12.079 line:-2
and vastly expanded support
for the latest ASTC


1059
00:50:12.112 --> 00:50:16.283 line:-2
and BC texture compression
formats used by Mac, PC,


1060
00:50:16.316 --> 00:50:18.085 line:-1
and iOS games.


1061
00:50:18.118 --> 00:50:20.287 line:-2
This makes it even easier
to optimize


1062
00:50:20.320 --> 00:50:23.857 line:-2
your game's texture assets
for each of Apple's devices.


1063
00:50:23,891 --> 00:50:26,994
Finally, to help you achieve
peak performance with your


1064
00:50:27,027 --> 00:50:30,497
most advanced rendering,
Xcode 13 adds an all-new


1065
00:50:30,531 --> 00:50:33,233
GPU Timeline view
in the Metal Debugger.


1066
00:50:33.267 --> 00:50:37.104 line:-2
This powerful new view allows
you to combine the best


1067
00:50:37.137 --> 00:50:39.239 line:-2
of visually debugging
your Metal commands,


1068
00:50:39.273 --> 00:50:43.177 line:-2
resources, and buffers,
on the timeline of events,


1069
00:50:43.210 --> 00:50:45.412 line:-2
in addition to powerful
performance counters


1070
00:50:45.445 --> 00:50:47.447 line:-2
and bottleneck
analysis information.


1071
00:50:47,481 --> 00:50:51,718
With Apple CPUs, GPUs,
and Metal, we have created


1072
00:50:51,752 --> 00:50:55,389
a unified graphics platform
with over a billion devices,


1073
00:50:55,422 --> 00:50:57,958
with the latest features
and developers tools


1074
00:50:57.991 --> 00:51:00.894 line:-2
to enable you to unleash
all-new levels of capability


1075
00:51:00.928 --> 00:51:05.299 line:-2
and performance for your
graphics, pro apps, and games.


1076
00:51:05.332 --> 00:51:07.034 line:-1
And now back to you, Susan.


1077
00:51:13.440 --> 00:51:15.509 line:-2
[Susan] Your apps can help
connect people


1078
00:51:15.542 --> 00:51:18.045 line:-1
with ideas, services, tools,


1079
00:51:18.078 --> 00:51:21.515 line:-2
and most importantly,
other people.


1080
00:51:21.548 --> 00:51:24.451 line:-2
Finding balance is just as
important as connecting,


1081
00:51:24.484 --> 00:51:27.120 line:-2
so this year we're enabling you
to help users


1082
00:51:27.154 --> 00:51:30.023 line:-2
focus on your app
at the right moments,


1083
00:51:30.057 --> 00:51:32.192 line:-1
to manage devices of loved ones


1084
00:51:32.226 --> 00:51:34.761 line:-1
while respecting their privacy,


1085
00:51:34.795 --> 00:51:36.630 line:-1
and to make your app's content


1086
00:51:36.663 --> 00:51:40.734 line:-2
the center of new, shared,
intimate experiences


1087
00:51:40.767 --> 00:51:43.437 line:-1
built across Apple platforms.


1088
00:51:43.470 --> 00:51:45.873 line:-2
We created a powerful new set
of APIs


1089
00:51:45.906 --> 00:51:49.576 line:-2
that'll help your app create
those kinds of relationships.


1090
00:51:49.610 --> 00:51:53.780 line:-2
Let's start with Heena and Matt
to tell us about Focus.


1091
00:51:53.814 --> 00:51:57.584 line:-3
[Heena] iOS 15 introduces
a powerful new set of tools


1092
00:51:57.618 --> 00:52:00.053 line:-1
to help people focus.


1093
00:52:00,087 --> 00:52:02,022
These tools
help reduce distractions,


1094
00:52:02,055 --> 00:52:04,124
so that people can be
in the moment.


1095
00:52:04.157 --> 00:52:08.495 line:-2
And it starts with an entirely
new approach to notifications.


1096
00:52:08.529 --> 00:52:10.264 line:-2
Here are some notifications
that have piled up


1097
00:52:10.297 --> 00:52:11.465 line:-1
on my Lock screen.


1098
00:52:11.498 --> 00:52:14.535 line:-2
Their levels of urgency
are clearly different.


1099
00:52:14.568 --> 00:52:17.137 line:-2
But they all behaved
identically.


1100
00:52:17.171 --> 00:52:19.139 line:-2
They had the same look,
the same haptic,


1101
00:52:19.173 --> 00:52:21.575 line:-2
the same apparent
level of importance.


1102
00:52:21.608 --> 00:52:24.178 line:-2
Now, with the new
Interruption Level API,


1103
00:52:24.211 --> 00:52:26.947 line:-2
there are more nuanced
ways for apps to convey


1104
00:52:26.980 --> 00:52:29.283 line:-1
different levels of urgency.


1105
00:52:29.316 --> 00:52:32.719 line:-2
Notifications can be assigned
one of four interruption levels.


1106
00:52:32.753 --> 00:52:36.390 line:-2
Passive interruptions are silent
and don't wake the device.


1107
00:52:36.423 --> 00:52:39.326 line:-2
People will see them the next
time they pick up their phones.


1108
00:52:39.359 --> 00:52:41.228 line:-2
You might want to use
these for notifications


1109
00:52:41.261 --> 00:52:43.730 line:-1
that aren't time-sensitive.


1110
00:52:43.764 --> 00:52:46.033 line:-2
Active interruptions
will play a sound or haptic


1111
00:52:46.066 --> 00:52:48.735 line:-1
just like notifications today.


1112
00:52:48.769 --> 00:52:51.972 line:-2
Time Sensitive interruptions are
designed to visually stand out


1113
00:52:52.005 --> 00:52:54.041 line:-2
and hang out on the Lock screen
a little longer


1114
00:52:54.074 --> 00:52:55.876 line:-1
if the user hasn't tapped on it.


1115
00:52:55.909 --> 00:52:57.811 line:-2
They'll also be announced
by Siri if someone


1116
00:52:57.845 --> 00:52:59.847 line:-1
is wearing AirPods.


1117
00:52:59.880 --> 00:53:01.548 line:-2
And you'll want to use
this for notifications


1118
00:53:01.582 --> 00:53:04.051 line:-2
that require
immediate attention.


1119
00:53:04.084 --> 00:53:06.753 line:-2
Critical alerts are
the most urgent category.


1120
00:53:06.787 --> 00:53:09.923 line:-2
They'll play a sound even if
the device is muted.


1121
00:53:09.957 --> 00:53:12.759 line:-2
These are reserved
for only very serious health


1122
00:53:12.793 --> 00:53:17.364 line:-2
and safety concerns, and require
an approved entitlement.


1123
00:53:17.397 --> 00:53:19.233 line:-3
[Matt] There's another
category of notifications


1124
00:53:19.266 --> 00:53:21.301 line:-2
that deserves special attention:


1125
00:53:21.335 --> 00:53:22.636 line:-2
communications from people.


1126
00:53:22.669 --> 00:53:25.172 line:-2
If you have a communication app,
it's important that you tell


1127
00:53:25.205 --> 00:53:28.075 line:-2
the system about your message
and call notifications.


1128
00:53:28.108 --> 00:53:29.877 line:-2
The system will then
use this information


1129
00:53:29.910 --> 00:53:32.479 line:-2
to tune your notifications'
appearance and behaviors,


1130
00:53:32.513 --> 00:53:34.448 line:-2
which will help people
better interpret them.


1131
00:53:34.481 --> 00:53:37.251 line:-2
Once implemented,
your notifications


1132
00:53:37.284 --> 00:53:40.020 line:-2
will go from the standard
appearance to looking like this,


1133
00:53:40.053 --> 00:53:43.657 line:-2
featuring a prominent avatar
with your app icon superimposed,


1134
00:53:43.690 --> 00:53:46.293 line:-2
and the same avatars will be
used elsewhere in the system,


1135
00:53:46.326 --> 00:53:47.628 line:-1
like in the Share Sheet.


1136
00:53:47.661 --> 00:53:50.597 line:-2
[Heena] I'm so excited
to see those avatars!


1137
00:53:50.631 --> 00:53:53.433 line:-2
All right, so notifications are
a really effective way


1138
00:53:53.467 --> 00:53:55.068 line:-1
to get people's attention.


1139
00:53:55.102 --> 00:53:57.237 line:-2
But they can also be
kind of ephemeral.


1140
00:53:57.271 --> 00:54:00.107 line:-2
If they're not well-timed,
people can easily miss them.


1141
00:54:00.140 --> 00:54:03.343 line:-2
To help users engage on
notifications on their own time,


1142
00:54:03.377 --> 00:54:05.846 line:-2
we're introducing
the Notification Summary,


1143
00:54:05.879 --> 00:54:08.382 line:-2
which delivers notifications
as a helpful bundle


1144
00:54:08.415 --> 00:54:10.417 line:-1
at times the user chooses,


1145
00:54:10.450 --> 00:54:12.853 line:-2
so they can quickly catch up
when it's best for them.


1146
00:54:12.886 --> 00:54:15.455 line:-2
The summary bundles
Passive and Active


1147
00:54:15.489 --> 00:54:18.091 line:-2
notifications from
user selected apps


1148
00:54:18.125 --> 00:54:20.494 line:-2
and presents them
in a beautiful layout.


1149
00:54:20.527 --> 00:54:22.062 line:-2
It then sticks around
on the Lock screen


1150
00:54:22.095 --> 00:54:23.730 line:-1
for a while until it's seen.


1151
00:54:23.764 --> 00:54:26.967 line:-2
The summary is also
personalized for each user.


1152
00:54:27.000 --> 00:54:30.504 line:-2
As you can see, there are two
marquee slots at the top.


1153
00:54:30.537 --> 00:54:33.540 line:-2
What's featured there
is based on a few factors:


1154
00:54:33.574 --> 00:54:35.742 line:-2
First, to provide variety,
those two apps


1155
00:54:35.776 --> 00:54:38.512 line:-2
are sampled from
inside the summary.


1156
00:54:38.545 --> 00:54:41.114 line:-2
From there,
we do some additional weighting.


1157
00:54:41.148 --> 00:54:43.150 line:-2
A notification
with a large thumbnail


1158
00:54:43.183 --> 00:54:45.686 line:-2
will always be chosen
over one without.


1159
00:54:45.719 --> 00:54:48.188 line:-2
And the notification with
the highest relevance score--


1160
00:54:48.222 --> 00:54:50.090 line:-2
which is something
that you determine--


1161
00:54:50.123 --> 00:54:52.759 line:-2
will be chosen over others
from the same app.


1162
00:54:52.793 --> 00:54:55.295 line:-2
Okay, so you might be wondering,
"How does my app end up


1163
00:54:55.329 --> 00:54:56.563 line:-1
in the summary at all?”


1164
00:54:56.597 --> 00:54:58.632 line:-2
Well, first,
it's completely up to the user


1165
00:54:58.665 --> 00:55:00.934 line:-2
if they want to use
the notification summary.


1166
00:55:00.968 --> 00:55:03.270 line:-2
And if they do,
apps that send the most


1167
00:55:03.303 --> 00:55:05.506 line:-1
notifications will be suggested.


1168
00:55:05.539 --> 00:55:08.575 line:-2
Users can then customize
which apps go in the summary


1169
00:55:08.609 --> 00:55:10.677 line:-2
along with the times
they'll receive them.


1170
00:55:10.711 --> 00:55:13.514 line:-2
If your app is placed
in the scheduled summary,


1171
00:55:13.547 --> 00:55:16.817 line:-2
there's still a way for you
to reach the user in real time.


1172
00:55:16.850 --> 00:55:19.987 line:-2
That's where Time Sensitive
notifications come in.


1173
00:55:20.020 --> 00:55:22.155 line:-2
Notifications that use
this interruption level


1174
00:55:22.189 --> 00:55:24.091 line:-1
will be delivered immediately.


1175
00:55:24.124 --> 00:55:26.226 line:-2
Remember, you should only
mark notifications


1176
00:55:26.260 --> 00:55:29.162 line:-2
as Time Sensitive if they
require the immediate attention


1177
00:55:29.196 --> 00:55:31.231 line:-1
and are relevant in the moment.


1178
00:55:31.265 --> 00:55:33.066 line:-2
[Matt] No feature
eliminates distractions


1179
00:55:33.100 --> 00:55:35.369 line:-1
more than Do Not Disturb.


1180
00:55:35.402 --> 00:55:38.138 line:-2
But Do Not Disturb
silences all notifications


1181
00:55:38.172 --> 00:55:40.474 line:-2
and we wanted to give
users more flexibility.


1182
00:55:40.507 --> 00:55:42.976 line:-2
With Focus,
users can choose the apps


1183
00:55:43.010 --> 00:55:45.846 line:-2
and people that they need
to receive notifications from


1184
00:55:45.879 --> 00:55:47.948 line:-2
based on what
they're currently doing.


1185
00:55:47.981 --> 00:55:51.118 line:-2
They can carve out their day
for work or create a Focus


1186
00:55:51.151 --> 00:55:53.720 line:-2
for an activity like gaming,
reading, or fitness.


1187
00:55:53.754 --> 00:55:55.923 line:-2
While in a Focus,
users can share


1188
00:55:55.956 --> 00:55:59.126 line:-2
their status with others,
so they know not to interrupt.


1189
00:55:59.159 --> 00:56:01.061 line:-1
But if it's truly urgent,


1190
00:56:01.094 --> 00:56:03.997 line:-2
a message can break through
and notify anyway.


1191
00:56:04.031 --> 00:56:06.700 line:-2
Your communication
app can also request access


1192
00:56:06.733 --> 00:56:09.002 line:-1
to the user's Focus status.


1193
00:56:09.036 --> 00:56:11.672 line:-2
If granted,
the system will inform your app


1194
00:56:11.705 --> 00:56:14.341 line:-2
when it changes,
so your app can keep its status


1195
00:56:14.374 --> 00:56:16.877 line:-2
in sync
with the rest of the system.


1196
00:56:16.910 --> 00:56:18.745 line:-2
Your app can even provide
users the ability


1197
00:56:18.779 --> 00:56:21.315 line:-2
to break through
for urgent communications.


1198
00:56:21.348 --> 00:56:23.984 line:-2
We're providing users with more
control and flexibility


1199
00:56:24.017 --> 00:56:26.587 line:-2
than ever to manage
their notifications.


1200
00:56:26.620 --> 00:56:29.223 line:-2
And to help make sure these
tools are working for them,


1201
00:56:29.256 --> 00:56:31.391 line:-2
the system will periodically
check in to see if


1202
00:56:31.425 --> 00:56:34.428 line:-2
a specific adjustment to their
settings might be helpful.


1203
00:56:34.461 --> 00:56:36.897 line:-2
It's based off of how
users interact with your app


1204
00:56:36.930 --> 00:56:38.398 line:-1
and your notifications.


1205
00:56:38.432 --> 00:56:41.602 line:-2
So if a user is typically using
an app while in a Focus,


1206
00:56:41.635 --> 00:56:43.804 line:-2
then the system might
suggest allowing that app's


1207
00:56:43.837 --> 00:56:46.306 line:-1
notifications during that Focus.


1208
00:56:46.340 --> 00:56:48.408 line:-2
Or if a user is
interacting with an app's


1209
00:56:48.442 --> 00:56:51.411 line:-2
Time Sensitive notifications,
then the system might suggest


1210
00:56:51.445 --> 00:56:53.914 line:-2
reverting them back
to active notifications.


1211
00:56:53.947 --> 00:56:56.483 line:-2
The same goes for when an app
sends one notification


1212
00:56:56.517 --> 00:56:59.186 line:-2
after another
and the user isn't engaging.


1213
00:56:59.219 --> 00:57:02.222 line:-2
The system might suggest muting
all notifications


1214
00:57:02.256 --> 00:57:05.626 line:-2
from that app or maybe just
a single conversation


1215
00:57:05.659 --> 00:57:07.394 line:-1
for a limited amount of time.


1216
00:57:07.427 --> 00:57:09.763 line:-2
So to make the most
of these new features,


1217
00:57:09.796 --> 00:57:11.965 line:-2
there are a few key things
that you need to do.


1218
00:57:11.999 --> 00:57:13.934 line:-2
You can help make sure
the right content


1219
00:57:13.967 --> 00:57:17.070 line:-2
is featured in the marquee slots
at the top of the summary


1220
00:57:17.104 --> 00:57:20.007 line:-2
by setting a relevance score
on your notifications


1221
00:57:20.040 --> 00:57:21.675 line:-2
and attaching
the appropriate thumbnails.


1222
00:57:21.708 --> 00:57:24.144 line:-2
You should think carefully about
which interruption levels


1223
00:57:24.178 --> 00:57:26.180 line:-2
make sense
for your notifications.


1224
00:57:26.213 --> 00:57:28.882 line:-2
If you have a communication app,
you should adopt


1225
00:57:28.916 --> 00:57:31.618 line:-2
the new User Notifications API
to tell the system


1226
00:57:31.652 --> 00:57:33.787 line:-2
about your message
and call notifications.


1227
00:57:33.820 --> 00:57:36.356 line:-2
You should also reflect
the user's Focus in your app


1228
00:57:36.390 --> 00:57:39.159 line:-2
by using the new
Focus Status API.


1229
00:57:39.193 --> 00:57:41.895 line:-2
We think these tools,
with your help,


1230
00:57:41.929 --> 00:57:45.299 line:-2
will go a long way in helping
users reduce distractions.


1231
00:57:45.332 --> 00:57:49.837 line:-2
Next, Martin is gonna tell us
about the new Screen Time API.


1232
00:57:49.870 --> 00:57:50.904 line:-2
[Martin] Thanks, Matt.


1233
00:57:50.938 --> 00:57:53.807 line:-3
Okay, let's switch gears
to talk about Screen Time


1234
00:57:53.841 --> 00:57:55.742 line:-2
and parental controls.


1235
00:57:55.776 --> 00:57:57.811 line:-2
We recognize that parents
need modern,


1236
00:57:57.845 --> 00:58:00.113 line:-2
innovative solutions
to help their children


1237
00:58:00.147 --> 00:58:02.149 line:-1
build healthy digital lives,


1238
00:58:02.182 --> 00:58:04.718 line:-2
and they also deeply value
their family's privacy.


1239
00:58:04.751 --> 00:58:07.487 line:-2
And we've seen an appetite
from many of you to deliver


1240
00:58:07.521 --> 00:58:09.189 line:-1
on these user needs.


1241
00:58:09.223 --> 00:58:12.860 line:-2
So today, we are releasing
Screen Time API,


1242
00:58:12.893 --> 00:58:15.295 line:-2
a set of tailor made
parental control frameworks


1243
00:58:15.329 --> 00:58:18.832 line:-2
that build upon our deep
commitment to privacy.


1244
00:58:18.866 --> 00:58:22.402 line:-2
We had three key goals in mind
with the Screen Time API.


1245
00:58:22.436 --> 00:58:24.671 line:-2
To offer you modern solutions
for developing


1246
00:58:24.705 --> 00:58:26.373 line:-1
parental control apps.


1247
00:58:26.406 --> 00:58:28.942 line:-2
To empower you to build
dynamic experiences


1248
00:58:28.976 --> 00:58:32.746 line:-2
and innovate beyond what even
Screen Time offers today.


1249
00:58:32.779 --> 00:58:35.516 line:-1
And to protect user privacy.


1250
00:58:35.549 --> 00:58:38.085 line:-2
To that end, we've added
three new Swift frameworks


1251
00:58:38.118 --> 00:58:41.221 line:-2
to the iOS SDK
that enable you to innovate


1252
00:58:41.255 --> 00:58:43.757 line:-2
in the world
of parental controls:


1253
00:58:43.790 --> 00:58:46.193 line:-2
Managed Settings,
Family Controls,


1254
00:58:46.226 --> 00:58:47.961 line:-1
and Device Activity.


1255
00:58:47,995 --> 00:58:50,197
First, let's talk about
Managed Settings.


1256
00:58:50.230 --> 00:58:52.366 line:-2
Fundamentally,
your parental control app


1257
00:58:52.399 --> 00:58:54.801 line:-2
needs a way to restrict
what a child can do


1258
00:58:54.835 --> 00:58:57.104 line:-2
across their devices,
and ensure that


1259
00:58:57.137 --> 00:58:59.306 line:-2
those restrictions
remain in place


1260
00:58:59.339 --> 00:59:01.675 line:-1
until the parent says otherwise.


1261
00:59:01.708 --> 00:59:05.379 line:-2
With Managed Settings, your app
can set a number of restrictions


1262
00:59:05.412 --> 00:59:09.550 line:-2
like locking accounts in place,
preventing a password change,


1263
00:59:09.583 --> 00:59:12.119 line:-2
filtering web traffic,
and limiting access


1264
00:59:12.152 --> 00:59:14.588 line:-2
to applications,
much like Screen Time.


1265
00:59:14.621 --> 00:59:18.091 line:-2
customized with your app's
branding and functionality.


1266
00:59:18.125 --> 00:59:20.460 line:-2
By leveraging this framework,
your app will be able


1267
00:59:20.494 --> 00:59:22.663 line:-2
to manage
all of these restrictions.


1268
00:59:24.498 --> 00:59:27.634 line:-2
Beyond restrictions
you'll be able to limit access


1269
00:59:27.668 --> 00:59:29.703 line:-2
to apps and websites
when appropriate


1270
00:59:29.736 --> 00:59:33.674 line:-2
and provide a set of actions
unique to your use cases.


1271
00:59:33.707 --> 00:59:36.009 line:-2
And finally,
we lock the app in place


1272
00:59:36.043 --> 00:59:40.280 line:-2
so it can only be removed with
the parent's explicit approval.


1273
00:59:43.183 --> 00:59:45.485 line:-2
Now, the Family Controls
framework is at the heart


1274
00:59:45.519 --> 00:59:47.955 line:-2
of our privacy model
and it serves two key


1275
00:59:47.988 --> 00:59:50.090 line:-1
user-facing experiences.


1276
00:59:50.123 --> 00:59:52.726 line:-2
First, it allows parents
to authorize your app


1277
00:59:52.759 --> 00:59:55.095 line:-2
for management
with their iCloud credentials,


1278
00:59:55.128 --> 00:59:58.398 line:-2
ensuring that the device is
for a child in that family.


1279
00:59:58.432 --> 01:00:01.969 line:-2
And it provides a personalized
experience via


1280
01:00:02.002 --> 01:00:04.104 line:-1
a system App & Website picker,


1281
01:00:04.137 --> 01:00:06.473 line:-2
which allows parents
to choose which apps and sites


1282
01:00:06.507 --> 01:00:10.611 line:-2
should be restricted, all while
protecting user privacy.


1283
01:00:10.644 --> 01:00:13.113 line:-2
We wanted to allow parents
to manage and restrict


1284
01:00:13.146 --> 01:00:15.782 line:-2
the apps and websites
that their children use,


1285
01:00:15.816 --> 01:00:18.051 line:-2
but do so in a way
that doesn't divulge


1286
01:00:18.085 --> 01:00:21.488 line:-2
their private application
and web browsing details.


1287
01:00:21.522 --> 01:00:24.491 line:-2
So, rather than returning
a selection of raw bundle IDs


1288
01:00:24.525 --> 01:00:28.862 line:-2
and URLs, the picker will return
opaque tokens instead.


1289
01:00:28.896 --> 01:00:31.198 line:-2
These tokens allow
your app to keep track


1290
01:00:31.231 --> 01:00:33.767 line:-2
of which apps and websites
a parent wants to manage,


1291
01:00:33.800 --> 01:00:36.937 line:-2
all while ensuring that
parents are the only people


1292
01:00:36.970 --> 01:00:40.140 line:-2
who can access this highly
sensitive information.


1293
01:00:40.174 --> 01:00:42.976 line:-2
And these tokens enable
functionality across


1294
01:00:43.010 --> 01:00:44.344 line:-1
all of these frameworks.


1295
01:00:44.378 --> 01:00:47.447 line:-2
Use a token to limit access
to a specific app or website


1296
01:00:47.481 --> 01:00:48.916 line:-1
with Managed Settings,


1297
01:00:48.949 --> 01:00:52.452 line:-2
or gain insight into app
and website activity,


1298
01:00:52.486 --> 01:00:56.490 line:-2
something that wasn't possible
on iOS until today,


1299
01:00:56.523 --> 01:00:58.659 line:-2
with the Device Activity
framework.


1300
01:00:58.692 --> 01:01:00.093 line:-1
With the tokens provided


1301
01:01:00.127 --> 01:01:02.930 line:-2
by the Activity Picker
in Family Controls,


1302
01:01:02.963 --> 01:01:06.533 line:-2
you're ready to leverage
the power of Device Activity.


1303
01:01:06.567 --> 01:01:08.268 line:-2
You can register
unique time windows


1304
01:01:08.302 --> 01:01:10.137 line:-2
for different apps
and activities,


1305
01:01:10.170 --> 01:01:13.507 line:-2
each emitting a warning like,
"Five more minutes left,"


1306
01:01:13.540 --> 01:01:15.342 line:-1
and a completion event.


1307
01:01:15.375 --> 01:01:18.345 line:-2
Once your app receives these
events, it can react accordingly


1308
01:01:18.378 --> 01:01:20.380 line:-1
by changing restrictions,


1309
01:01:20.414 --> 01:01:23.150 line:-2
limiting access to relevant apps
and websites


1310
01:01:23.183 --> 01:01:25.819 line:-1
or...


1311
01:01:25.853 --> 01:01:28.822 line:-2
encouraging children
to do their homework.


1312
01:01:28.856 --> 01:01:31.792 line:-2
Whatever experience
you are trying to deliver


1313
01:01:31.825 --> 01:01:33.794 line:-1
for your users.


1314
01:01:33.827 --> 01:01:36.330 line:-2
This concept of seeing
device activity,


1315
01:01:36.363 --> 01:01:37.998 line:-1
not just browser activity,


1316
01:01:38.031 --> 01:01:40.000 line:-2
but across all apps
on the device


1317
01:01:40.033 --> 01:01:42.970 line:-2
is totally new
and is a unique opportunity


1318
01:01:43.003 --> 01:01:45.973 line:-2
for you to innovate in the world
of parental controls.


1319
01:01:46.006 --> 01:01:48.675 line:-2
With the Screen Time API,
you could enable


1320
01:01:48.709 --> 01:01:51.211 line:-2
family-wide downtime,
or even create incentives


1321
01:01:51.245 --> 01:01:54.481 line:-2
to do something fun
after something educational,


1322
01:01:54.515 --> 01:01:57.851 line:-2
like unlocking some gaming
after doing some homework.


1323
01:01:57.885 --> 01:02:00.754 line:-2
We're super excited to see
how you will build on these APIs


1324
01:02:00.787 --> 01:02:02.923 line:-2
to help parents and families
manage the way


1325
01:02:02.956 --> 01:02:05.225 line:-1
that they use our devices.


1326
01:02:05.259 --> 01:02:09.329 line:-2
And now over to Vi to tell us
what's new with Widgets.


1327
01:02:09,363 --> 01:02:13,033
[Vi] Last year, we introduced
Widgets on the Home screen.


1328
01:02:13,066 --> 01:02:15,435
and people loved them.


1329
01:02:15,469 --> 01:02:19,039
Widgets provide
deep personalization


1330
01:02:19.072 --> 01:02:21.441 line:-1
with delightful and timely views


1331
01:02:21.475 --> 01:02:24.444 line:-2
of the most relevant content
from your app.


1332
01:02:24.478 --> 01:02:27.314 line:-1
They're all about glanceability.


1333
01:02:27.347 --> 01:02:29.449 line:-1
People love how widgets present


1334
01:02:29.483 --> 01:02:32.419 line:-2
the most useful information
from your app,


1335
01:02:32.452 --> 01:02:36.089 line:-2
in a single glance,
at exactly the right time.


1336
01:02:36.123 --> 01:02:39.560 line:-2
A tap can deep link just
to the right part of your app.


1337
01:02:39.593 --> 01:02:41.929 line:-2
Over the past year,
you've created some


1338
01:02:41.962 --> 01:02:46.366 line:-2
amazing widget experiences
that have truly inspired us.


1339
01:02:46.400 --> 01:02:49.837 line:-2
The best widgets are
focused, dynamic,


1340
01:02:49.870 --> 01:02:52.840 line:-2
and provide unique views
of the app throughout the day.


1341
01:02:52.873 --> 01:02:54.708 line:-1
Like this one, from Day One.


1342
01:02:54.741 --> 01:02:57.644 line:-2
That's me and my kids
on a trip to Santa Cruz.


1343
01:02:57.678 --> 01:03:00.581 line:-2
Surfacing just the right
piece of content


1344
01:03:00.614 --> 01:03:03.951 line:-2
in the right context
helps your users discover


1345
01:03:03.984 --> 01:03:06.420 line:-1
the magic of your apps.


1346
01:03:06.453 --> 01:03:09.690 line:-2
And we've seen that
widgets encourage people


1347
01:03:09.723 --> 01:03:12.593 line:-1
to use your app even more.


1348
01:03:12.626 --> 01:03:15.362 line:-2
This year,
we are taking the next step


1349
01:03:15.395 --> 01:03:17.764 line:-1
in making your apps more useful


1350
01:03:17.798 --> 01:03:20.868 line:-2
and more discoverable
with widgets.


1351
01:03:20.901 --> 01:03:24.938 line:-2
And it starts with letting
people place widgets


1352
01:03:24.972 --> 01:03:28.542 line:-2
among your apps
on the iPad Home screen.


1353
01:03:28.575 --> 01:03:31.211 line:-2
To take advantage
of the large screen,


1354
01:03:31.245 --> 01:03:36.683 line:-2
we're introducing a new
extra-large size for widgets.


1355
01:03:36.717 --> 01:03:40.354 line:-2
This means a whole new set
of opportunities


1356
01:03:40.387 --> 01:03:45.726 line:-2
for entirely new types of
widgets that work best on iPad.


1357
01:03:45.759 --> 01:03:48.896 line:-2
To make getting into widgets
even easier,


1358
01:03:48.929 --> 01:03:52.566 line:-2
we're adding new default
Home screen layouts


1359
01:03:52.599 --> 01:03:56.603 line:-1
with widgets on iPhone and iPad.


1360
01:03:56.637 --> 01:04:00.174 line:-2
These include widgets
from apps people use the most,


1361
01:04:00.207 --> 01:04:02.643 line:-1
arranged in Smart Stacks.


1362
01:04:02.676 --> 01:04:05.879 line:-2
Stacks let you save space
by placing multiple widgets


1363
01:04:05.913 --> 01:04:07.481 line:-1
on top of each other.


1364
01:04:07.514 --> 01:04:11.185 line:-2
Smart Stacks use on-device
intelligence to show the widget


1365
01:04:11.218 --> 01:04:14.621 line:-1
that's most relevant right now.


1366
01:04:14.655 --> 01:04:17.424 line:-2
Building on the foundation
of last year's


1367
01:04:17.457 --> 01:04:20.761 line:-2
TimelineRelevance API,
we are going beyond


1368
01:04:20.794 --> 01:04:24.598 line:-2
simply rotating the stack
with on-device intelligence.


1369
01:04:24.631 --> 01:04:29.069 line:-2
Now we can give your widget
more exposure by suggesting it


1370
01:04:29.102 --> 01:04:32.172 line:-2
even if it was not
already in the stack.


1371
01:04:32.206 --> 01:04:33.740 line:-1
And how do we do this?


1372
01:04:33.774 --> 01:04:36.543 line:-1
Enter widget suggestions.


1373
01:04:36.577 --> 01:04:39.613 line:-2
How people interact
with your app, as well as


1374
01:04:39.646 --> 01:04:43.784 line:-2
what you can tell us, helps us
suggest your widget in a stack.


1375
01:04:43.817 --> 01:04:48.288 line:-2
Let us see how this works
with our Fruta example app.


1376
01:04:48.322 --> 01:04:51.925 line:-2
If the user orders
a green juice every morning,


1377
01:04:51.959 --> 01:04:55.362 line:-2
on-device intelligence
will learn to suggest it.


1378
01:04:55.395 --> 01:04:58.799 line:-2
To opt in, you'll need to adopt
the intents framework


1379
01:04:58.832 --> 01:05:00.734 line:-1
and donate an Interaction.


1380
01:05:00.767 --> 01:05:01.835 line:-1
That's it!


1381
01:05:01.869 --> 01:05:04.805 line:-2
Now your widget can be
automatically suggested


1382
01:05:04.838 --> 01:05:07.641 line:-2
based on how people
use your app.


1383
01:05:07.674 --> 01:05:10.677 line:-2
When you want to provide
new information to users,


1384
01:05:10.711 --> 01:05:13.914 line:-2
you can also donate
using the Intents API.


1385
01:05:13.947 --> 01:05:17.284 line:-2
For instance,
the Fruta app can adopt this


1386
01:05:17.317 --> 01:05:20.354 line:-2
to offer
a free birthday smoothie.


1387
01:05:20.387 --> 01:05:23.056 line:-2
Both past usage behavior,
as well as


1388
01:05:23.090 --> 01:05:25.559 line:-1
new relevant intent donations


1389
01:05:25.592 --> 01:05:29.196 line:-2
can then help us suggest
your widget in a stack


1390
01:05:29.229 --> 01:05:30.364 line:-1
at the right time.


1391
01:05:30.397 --> 01:05:33.100 line:-2
And if a user finds
your widget useful,


1392
01:05:33.133 --> 01:05:36.937 line:-2
they can easily add it
permanently with a long press.


1393
01:05:36.970 --> 01:05:40.574 line:-2
So that's our big update
to widgets this year.


1394
01:05:40.607 --> 01:05:44.711 line:-2
More useful,
and more discoverable than ever.


1395
01:05:44.745 --> 01:05:48.148 line:-2
Next up is some news
on SharePlay.


1396
01:05:48.182 --> 01:05:50.817 line:-1
Over to Ryan and Juan.


1397
01:05:50.851 --> 01:05:53.153 line:-3
[Ryan] This year,
we've all had to improvise


1398
01:05:53.187 --> 01:05:55.322 line:-2
to find new ways of connecting.


1399
01:05:55.355 --> 01:05:57.958 line:-2
And it has been striking
to see many of you innovate,


1400
01:05:57.991 --> 01:06:00.127 line:-2
and build awesome new ways
for people to feel


1401
01:06:00.160 --> 01:06:02.396 line:-2
a sense of togetherness
while at a distance.


1402
01:06:02.429 --> 01:06:04.731 line:-2
And with people relying
on FaceTime and iMessage


1403
01:06:04.765 --> 01:06:06.767 line:-2
more than ever
to stay connected,


1404
01:06:06.800 --> 01:06:10.270 line:-2
it was only natural for us
to build on those experiences,


1405
01:06:10.304 --> 01:06:13.373 line:-2
to help people feel more
together when they're apart.


1406
01:06:13.407 --> 01:06:16.643 line:-2
Some of the most meaningful
moments people have together


1407
01:06:16.677 --> 01:06:19.213 line:-2
are about more than just
sharing a conversation


1408
01:06:19.246 --> 01:06:21.415 line:-2
they're about
sharing experiences.


1409
01:06:21.448 --> 01:06:23.584 line:-2
So to foster
that sense of closeness,


1410
01:06:23.617 --> 01:06:26.720 line:-2
we needed to build
something completely new.


1411
01:06:26.753 --> 01:06:28.722 line:-1
And we had an ambitious goal.


1412
01:06:28.755 --> 01:06:31.525 line:-2
We wanted FaceTime
to feel like a portal


1413
01:06:31.558 --> 01:06:34.461 line:-2
which transported people
into the same space


1414
01:06:34.494 --> 01:06:36.463 line:-2
as some of their closest
friends and family.


1415
01:06:36,496 --> 01:06:38,632
So we built SharePlay.


1416
01:06:38,665 --> 01:06:40,100
And we've given you the tools
you need


1417
01:06:40,133 --> 01:06:42,636
to create magical
SharePlay experiences


1418
01:06:42.669 --> 01:06:44.805 line:-2
with the new
GroupActivities framework.


1419
01:06:44.838 --> 01:06:47.741 line:-2
We bring the group,
you bring the activities.


1420
01:06:47.774 --> 01:06:51.478 line:-2
And it all comes down
to this concept of activities.


1421
01:06:51.512 --> 01:06:54.114 line:-2
When someone in a FaceTime
call starts an activity,


1422
01:06:54.147 --> 01:06:57.384 line:-2
SharePlay will bring the group
directly into your app,


1423
01:06:57.417 --> 01:07:00.320 line:-2
allowing for rich
interactive experiences


1424
01:07:00.354 --> 01:07:03.590 line:-2
where users can communicate,
just like they're used to.


1425
01:07:03.624 --> 01:07:05.959 line:-2
There are a lot of possibilities
to explore


1426
01:07:05.993 --> 01:07:07.794 line:-2
with the Group Activities
framework.


1427
01:07:07.828 --> 01:07:11.331 line:-2
And what better activity to do
in your virtual living room


1428
01:07:11.365 --> 01:07:12.733 line:-2
than watching
your favorite shows


1429
01:07:12.766 --> 01:07:14.468 line:-2
with some of
your closest friends.


1430
01:07:16.036 --> 01:07:18.405 line:-2
Hey, Juan, since your team
just finished integrating


1431
01:07:18.438 --> 01:07:20.073 line:-1
SharePlay into the TV app,


1432
01:07:20.107 --> 01:07:21.141 line:-1
why don't you show us around?


1433
01:07:21.175 --> 01:07:23.577 line:-2
[Juan] Sure thing!
What do you want to watch?


1434
01:07:23.610 --> 01:07:25.612 line:-2
[Ryan]
How about a little "Ted Lasso"?


1435
01:07:25.646 --> 01:07:27.014 line:-2
[Juan]
Sounds good.


1436
01:07:27.047 --> 01:07:29.216 line:-2
I press play,
and the system asks me


1437
01:07:29.249 --> 01:07:31.051 line:-2
if I want to start
shared playback,


1438
01:07:31.084 --> 01:07:32.486 line:-1
or play locally instead.


1439
01:07:32.519 --> 01:07:34.388 line:-1
This is where you come in.


1440
01:07:34.421 --> 01:07:36.557 line:-2
We're offering new APIs
to start playback


1441
01:07:36.590 --> 01:07:38.258 line:-2
that are designed to fit
right into your app's


1442
01:07:38.292 --> 01:07:40.027 line:-1
existing video experience.


1443
01:07:40.060 --> 01:07:42.095 line:-3
Now because I chose
shared playback,


1444
01:07:42.129 --> 01:07:44.097 line:-3
the system is coordinating
the video on my device


1445
01:07:44.131 --> 01:07:47.067 line:-3
and Ryan's at exactly
the same time with Core Media


1446
01:07:47.100 --> 01:07:49.870 line:-2
and Group Activities
doing the heavy lifting.


1447
01:07:49.903 --> 01:07:52.406 line:-2
[Ryan]
That means when I hit pause,


1448
01:07:52.439 --> 01:07:55.742 line:-2
Juan's video pauses
on the exact same moment.


1449
01:07:55.776 --> 01:07:57.878 line:-2
I can even jump
to a favorite scene


1450
01:07:57.911 --> 01:07:59.346 line:-1
and everyone comes with me,


1451
01:07:59.379 --> 01:08:01.148 line:-2
as if we were all
in the same room.


1452
01:08:01.181 --> 01:08:02.182 line:-2
[Ted] All right?
I mean, hey,


1453
01:08:02.216 --> 01:08:03.350 line:-2
Higgins and I are having
lunch today.


1454
01:08:03.383 --> 01:08:04.818 line:-2
[Juan]
I love this scene!


1455
01:08:06.820 --> 01:08:08.689 line:-2
The magic behind this
playback coordination


1456
01:08:08.722 --> 01:08:11.058 line:-2
means your media isn't
retransmitted in any way.


1457
01:08:11.091 --> 01:08:13.093 line:-2
Everyone will get your
full-fidelity video


1458
01:08:13.126 --> 01:08:14.995 line:-2
because it's playing
in your app and streaming


1459
01:08:15.028 --> 01:08:17.030 line:-2
from your servers
as it always does.


1460
01:08:17.064 --> 01:08:21.235 line:-2
Now, let's see how easy it is
to adopt Group Activities


1461
01:08:21.268 --> 01:08:22.870 line:-1
in a simple media app


1462
01:08:22.903 --> 01:08:25.272 line:-2
and take full advantage
of the framework.


1463
01:08:25.305 --> 01:08:27.207 line:-2
There are just a few steps
to get your app ready


1464
01:08:27.241 --> 01:08:28.809 line:-1
for shared playback.


1465
01:08:28.842 --> 01:08:32.012 line:-2
First, we need to define
our Group Activity.


1466
01:08:32.045 --> 01:08:33.480 line:-2
We'll create a new type
that conforms


1467
01:08:33.514 --> 01:08:35.015 line:-1
to the Group Activity protocol,


1468
01:08:35.048 --> 01:08:38.185 line:-2
and supply a URL for everyone
in the group to load.


1469
01:08:38.218 --> 01:08:40.854 line:-2
If your app already
supports deep-links to content,


1470
01:08:40.888 --> 01:08:43.223 line:-1
you can use those here.


1471
01:08:43.257 --> 01:08:45.092 line:-2
We'll also provide
some basic metadata


1472
01:08:45.125 --> 01:08:47.528 line:-2
to the system
to customize system UI


1473
01:08:47.561 --> 01:08:51.465 line:-2
like confirmation dialogs
and notices.


1474
01:08:51.498 --> 01:08:54.735 line:-2
Next, we need to hook up
our play buttons.


1475
01:08:54.768 --> 01:08:56.703 line:-2
In our play() function,
we'll create a new activity,


1476
01:08:56.737 --> 01:08:59.439 line:-2
and call
.prepareForActivation() on it.


1477
01:08:59.473 --> 01:09:01.942 line:-2
This is when the system presents
that confirmation dialogue


1478
01:09:01.975 --> 01:09:03.677 line:-1
you saw earlier.


1479
01:09:03.710 --> 01:09:05.946 line:-2
You can call this without any
extra conditionals.


1480
01:09:05.979 --> 01:09:08.916 line:-2
It'll return immediately if the
user is not on a FaceTime call.


1481
01:09:08.949 --> 01:09:12.252 line:-2
Now let's turn our attention
to handling incoming activities.


1482
01:09:12.286 --> 01:09:15.556 line:-2
The initiator joins the session
just like other participants,


1483
01:09:15.589 --> 01:09:18.525 line:-2
so the code looks the same
for everyone.


1484
01:09:18.559 --> 01:09:20.794 line:-2
Here, I'm using
Swift concurrency


1485
01:09:20.827 --> 01:09:22.196 line:-1
to create a new model


1486
01:09:22.229 --> 01:09:24.164 line:-2
with each session
that's delivered.


1487
01:09:24.198 --> 01:09:27.401 line:-2
We'll then join the new
session once the player appears.


1488
01:09:28.669 --> 01:09:31.104 line:-2
You can observe the session
for other state changes


1489
01:09:31.138 --> 01:09:32.973 line:-1
to update our UI accordingly.


1490
01:09:33.006 --> 01:09:36.076 line:-2
Finally, let's make sure
we synchronize our players.


1491
01:09:36.109 --> 01:09:39.146 line:-2
Step 1: Grab your AVPlayer,
and call


1492
01:09:39.179 --> 01:09:41.548 line:-2
.playbackCoordinator.coordinate
WithSession


1493
01:09:41.582 --> 01:09:42.850 line:-1
passing in your session.


1494
01:09:43.851 --> 01:09:46.420 line:-1
Step 2: There's no step 2.


1495
01:09:46.453 --> 01:09:47.654 line:-1
That's it!


1496
01:09:47.688 --> 01:09:50.724 line:-2
That's all you need to do to get
frame-accurate AV sync


1497
01:09:50.757 --> 01:09:53.560 line:-2
with Group Activities
and AVPlayer.


1498
01:09:53.594 --> 01:09:55.696 line:-1
The system handles the rest.


1499
01:09:55.729 --> 01:09:59.466 line:-2
[Ryan] Now we've talked a lot
about shared media experiences.


1500
01:09:59.499 --> 01:10:02.002 line:-2
But we wanted Group Activities
to provide a foundation


1501
01:10:02.035 --> 01:10:04.938 line:-2
that could power even the most
ambitious experiences


1502
01:10:04.972 --> 01:10:06.306 line:-1
that you could dream up.


1503
01:10:06.340 --> 01:10:08.141 line:-2
So we started building
on top of the fabric


1504
01:10:08.175 --> 01:10:10.210 line:-2
that powers
Group FaceTime today,


1505
01:10:10,244 --> 01:10:14,448
providing your app with a fast
and reliable data channel.


1506
01:10:14.481 --> 01:10:16.383 line:-2
By taking on the job
as group leader,


1507
01:10:16.416 --> 01:10:18.652 line:-2
our servers orchestrate
a centralized state


1508
01:10:18.685 --> 01:10:20.287 line:-1
for the entire group.


1509
01:10:20,320 --> 01:10:22,222
These servers don't see
your users' data,


1510
01:10:22,256 --> 01:10:24,291
because it's all
end-to-end encrypted


1511
01:10:24,324 --> 01:10:26,159
so that it stays private.


1512
01:10:26.193 --> 01:10:28.795 line:-2
And using this fast
and secure data channel,


1513
01:10:28.829 --> 01:10:31.331 line:-2
you can create
immersive experiences,


1514
01:10:31.365 --> 01:10:33.166 line:-2
from turning the page
on a shared book,


1515
01:10:33.200 --> 01:10:35.002 line:-2
to seeing the strokes
that someone has drawn


1516
01:10:35.035 --> 01:10:38.438 line:-1
on a shared whiteboard live.


1517
01:10:38.472 --> 01:10:40.941 line:-2
We want to really inspire you
to take full advantage


1518
01:10:40.974 --> 01:10:43.510 line:-2
of our APIs
and bring your users together


1519
01:10:43.544 --> 01:10:45.245 line:-1
like never before.


1520
01:10:45.279 --> 01:10:47.047 line:-1
But before we show you a demo,


1521
01:10:47.080 --> 01:10:50.317 line:-2
we're gonna need to call in a
little extra help with this one.


1522
01:10:53.053 --> 01:10:55.222 line:-2
Hey, everyone.
Thanks for joining.


1523
01:10:55.255 --> 01:10:57.324 line:-2
We're gonna need your help
with this one last demo


1524
01:10:57.357 --> 01:11:00.861 line:-2
to really demonstrate the power
of Group Activities.


1525
01:11:00.894 --> 01:11:03.830 line:-2
All right, we have a whiteboard
demo app to show you


1526
01:11:03.864 --> 01:11:06.166 line:-2
what can be done
with Group Activities.


1527
01:11:06.200 --> 01:11:09.203 line:-1
Now, by opening a shared canvas,


1528
01:11:09.236 --> 01:11:12.673 line:-2
I'm starting a new activity
with the group to draw together.


1529
01:11:12.706 --> 01:11:15.042 line:-2
Now we're all looking
at the same canvas,


1530
01:11:15.075 --> 01:11:17.945 line:-2
and we can interact with
each other in a whole new way.


1531
01:11:17.978 --> 01:11:19.713 line:-2
If I draw
somewhere on the canvas,


1532
01:11:19.746 --> 01:11:22.616 line:-2
everyone can see
what I'm drawing live.


1533
01:11:22.649 --> 01:11:26.553 line:-2
Now this app is using the same
APIs that you saw previously,


1534
01:11:26.587 --> 01:11:28.255 line:-2
but instead
of synchronizing media,


1535
01:11:28.288 --> 01:11:30.224 line:-1
it's using GroupSessionMessenger


1536
01:11:30.257 --> 01:11:32.259 line:-2
to send my strokes
to everyone's device.


1537
01:11:32.292 --> 01:11:34.061 line:-2
[Juan]
And this isn't screen sharing.


1538
01:11:34.094 --> 01:11:36.630 line:-2
Because the app is running
natively on everyone's iPad,


1539
01:11:36.663 --> 01:11:38.298 line:-1
I can draw on the canvas, too.


1540
01:11:39.733 --> 01:11:42.669 line:-1
Let's all give it a try.


1541
01:11:49.576 --> 01:11:51.578 line:-2
So we can gather
around a shared canvas


1542
01:11:51.612 --> 01:11:53.280 line:-1
no matter how far apart we are.


1543
01:11:53.313 --> 01:11:56.884 line:-2
[Ryan] And it's bringing us
together like never before.


1544
01:11:59.186 --> 01:12:02.289 line:-1
Thanks for the help, everyone.


1545
01:12:02.322 --> 01:12:05.259 line:-2
[Juan] The best part is,
everything you just saw--


1546
01:12:05.292 --> 01:12:08.295 line:-2
SharePlay activities,
playback synchronization,


1547
01:12:08.328 --> 01:12:09.997 line:-2
and the fast,
secure data channel--


1548
01:12:10.030 --> 01:12:12.533 line:-2
you get all of these benefits
just by integrating your app


1549
01:12:12.566 --> 01:12:14.735 line:-1
with GroupActivities framework.


1550
01:12:14.768 --> 01:12:17.704 line:-2
SharePlay is a great new way
to elevate your app's content


1551
01:12:17.738 --> 01:12:19.640 line:-2
and help you create
a more immersive experience


1552
01:12:19.673 --> 01:12:20.874 line:-1
for your users.


1553
01:12:20.908 --> 01:12:23.277 line:-2
We're eager to see
the new shared experiences


1554
01:12:23.310 --> 01:12:26.480 line:-2
that you'll come up with
using Group Activities.


1555
01:12:26.513 --> 01:12:29.016 line:-2
Now, over to Susan
to wrap things up.


1556
01:12:33.453 --> 01:12:35.756 line:-2
[Susan] We believe the advances
you've see today


1557
01:12:35.789 --> 01:12:37.824 line:-2
will help you
continue to build apps


1558
01:12:37.858 --> 01:12:39.526 line:-1
that make a difference.


1559
01:12:39.560 --> 01:12:42.129 line:-2
We're building tools that
streamline your workflow


1560
01:12:42.162 --> 01:12:45.132 line:-2
and make it easier
to build great apps faster.


1561
01:12:45.165 --> 01:12:47.534 line:-2
We've made it easier
to build immersive content,


1562
01:12:47.568 --> 01:12:50.637 line:-2
games, and tools
for professional creators.


1563
01:12:50.671 --> 01:12:53.674 line:-2
We've shown you how your apps
can help users connect


1564
01:12:53.707 --> 01:12:57.144 line:-2
while still focusing
on the things that matter most.


1565
01:12:57.177 --> 01:13:00.647 line:-2
What you've seen today
is just the start.


1566
01:13:00.681 --> 01:13:02.916 line:-2
There's so much more
to check out this week


1567
01:13:02.950 --> 01:13:06.253 line:-2
that we haven't even
had a chance to touch on.


1568
01:13:06.286 --> 01:13:08.288 line:-2
We know you're gonna build
something awesome,


1569
01:13:08.322 --> 01:13:10.324 line:-1
and we can't wait to see it.

