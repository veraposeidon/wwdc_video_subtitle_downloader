2
00:00:00,000 --> 00:00:01,668 line:-1
[MAC STARTUP CHIME]


3
00:00:01.668 --> 00:00:05.339 line:-1 position:50%
♪ Bass music playing ♪


4
00:00:05.339 --> 00:00:07.040 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,040 --> 00:00:09,476 position:89% align:center size:2%
♪


6
00:00:09,476 --> 00:00:10,777 line:-1
Brady White: Hi, I’m Brady.


7
00:00:10.777 --> 00:00:12.646 line:-1 position:50%
I’m an engineer
on the Fitness team.


8
00:00:12.646 --> 00:00:14.648 line:-1 position:50%
Thanks for joining me.


9
00:00:14.648 --> 00:00:16.984 line:-1 position:50%
There are lots of great workout
apps already available


10
00:00:16,984 --> 00:00:18,352 line:-1
in the App Store.


11
00:00:18,352 --> 00:00:20,387 line:-1
Apple Watch is an amazing device


12
00:00:20.387 --> 00:00:23.390 line:-1 position:50%
capable of tracking all sorts
of fitness activity.


13
00:00:23.390 --> 00:00:24.958 line:-1 position:50%
It can track distance
and elevation


14
00:00:24,958 --> 00:00:26,894 line:-1
on those challenging bike rides.


15
00:00:26.894 --> 00:00:29.162 line:-1 position:50%
You can monitor your heart rate
and energy burned


16
00:00:29,162 --> 00:00:30,964 line:-1
during intense workouts.


17
00:00:30.964 --> 00:00:34.801 line:-1 position:50%
For swimming, it can even detect
stroke type and count laps.


18
00:00:34.801 --> 00:00:37.137 line:-1 position:50%
All of this and more
is available for you


19
00:00:37,137 --> 00:00:39,406 line:-1
to build a great workout app.


20
00:00:39.406 --> 00:00:43.010 line:-1 position:50%
Let’s take a look at
what we will be covering today.


21
00:00:43.010 --> 00:00:45.345 line:-1 position:50%
This session is a Code-Along.


22
00:00:45.345 --> 00:00:49.816 line:-1 position:50%
We'll go over what that means
and how you can participate.


23
00:00:49,816 --> 00:00:53,854 line:-1
We'll build our workout views
in SwiftUI.


24
00:00:53.854 --> 00:00:57.357 line:-1 position:50%
Then, we'll integrate HealthKit
to our views.


25
00:00:57.357 --> 00:01:00.727 line:-1 position:50%
We'll also show you how
to support the Always On state.


26
00:01:00.727 --> 00:01:04.364 line:-1 position:50%
I'm excited,
let's get started.


27
00:01:04.364 --> 00:01:06.233 line:-1 position:50%
This session is a code-along.


28
00:01:06,233 --> 00:01:09,569 line:-1
We will build a workout app
together from scratch.


29
00:01:09,569 --> 00:01:11,104 line:-1
While you get your Xcode ready,


30
00:01:11,104 --> 00:01:14,241 line:-1
let's cover
a couple of concepts.


31
00:01:14.241 --> 00:01:16.109 line:-1 position:50%
What is a workout app?


32
00:01:16,109 --> 00:01:18,011 line:-1
A workout app tracks
fitness activity


33
00:01:18.011 --> 00:01:19.913 line:-1 position:50%
during a workout.


34
00:01:19.913 --> 00:01:22.916 line:-1 position:50%
A workout can be started
with a single tap.


35
00:01:22.916 --> 00:01:26.253 line:-1 position:50%
While the workout is in session,
live metrics are displayed,


36
00:01:26,253 --> 00:01:29,489 line:-1
such as elapsed time,
energy burned, heart rate,


37
00:01:29.489 --> 00:01:31.792 line:-1 position:50%
and distance.


38
00:01:31,792 --> 00:01:32,926 line:-1
When the workout ends,


39
00:01:32,926 --> 00:01:36,930 line:-1
a summary shows the metrics
recorded for the workout.


40
00:01:36.930 --> 00:01:39.933 line:-1 position:50%
This is what
we will build today.


41
00:01:39,933 --> 00:01:42,669 line:-1
Let’s get started building
our workout views.


42
00:01:42.669 --> 00:01:46.273 line:-1 position:50%
Let’s open Xcode
and start a new project.


43
00:01:46.273 --> 00:01:49.910 line:-1 position:50%
Click
Create a new Xcode project,


44
00:01:49,910 --> 00:01:51,845 line:-1
watchOS, Watch App,


45
00:01:51,845 --> 00:01:54,715 line:0
click Next.


46
00:01:54,715 --> 00:01:58,919 position:50%
Give your workout app a name,
such as "MyWorkouts".


47
00:01:58,919 --> 00:02:02,255 line:0
Ensure Interface is SwiftUI,
and language is Swift


48
00:02:02,255 --> 00:02:04,891 line:0
and click Next.


49
00:02:04,891 --> 00:02:08,895 line:0
Find a location for your project
and click Create.


50
00:02:13.533 --> 00:02:16.536 line:-1 position:50%
Let’s hide the inspector
and resize our canvas.


51
00:02:19,539 --> 00:02:21,742 line:-1
Let’s click Resume to see
what our app looks like,


52
00:02:21.742 --> 00:02:24.978 line:-1 position:50%
using Xcode previews.


53
00:02:24.978 --> 00:02:27.848 line:-1 position:50%
Great, our SwiftUI app is ready.


54
00:02:27,848 --> 00:02:30,117 line:-1
Let’s provide a way for someone
to start their workout


55
00:02:30.117 --> 00:02:31.752 line:-1 position:50%
with a StartView.


56
00:02:31,752 --> 00:02:34,721 line:-1
A workout can be started
with just a single tap.


57
00:02:34,721 --> 00:02:37,090 line:-1
The list view
with carousel-style layout


58
00:02:37.090 --> 00:02:39.793 line:-1 position:50%
will provide a list of workouts
that scrolls vertically


59
00:02:39,793 --> 00:02:42,162 line:-1
with a great depth effect.


60
00:02:42,162 --> 00:02:45,899 line:-1
Our list of workouts will
include bike, run, and walk.


61
00:02:45.899 --> 00:02:48.702 line:-1 position:50%
Let’s create our StartView.


62
00:02:48,702 --> 00:02:51,638 line:-1
Let’s rename "ContentView"
to "StartView".


63
00:02:51,638 --> 00:02:54,741 line:-1
Command-click on ContentView,


64
00:02:54,741 --> 00:02:56,943 line:-1
click Rename,


65
00:02:56,943 --> 00:03:01,581 line:-1
Enter "StartView"
as the new name.


66
00:03:01.581 --> 00:03:03.683 line:-1 position:50%
Notice that in
MyWorkoutsApp.swift


67
00:03:03.683 --> 00:03:07.187 line:-1 position:50%
StartView is now
NavigationView’s root view.


68
00:03:08,522 --> 00:03:10,524 line:-1
Click Rename.


69
00:03:12,125 --> 00:03:13,960 line:-1
Let’s define an array
of workout types


70
00:03:13,960 --> 00:03:16,596 line:-1
to display
in our StartView’s list.


71
00:03:16.596 --> 00:03:18.165 line:-1 position:50%
First, let’s import HealthKit


72
00:03:18,165 --> 00:03:22,169 line:-1
to get access to
HKWorkoutActivityType.


73
00:03:25,472 --> 00:03:28,508 line:-1
Next, let’s add our array
of workout types.


74
00:03:34,514 --> 00:03:37,484 line:-1
Our workout list will have
HKWorkoutActivityTypes


75
00:03:37.484 --> 00:03:40.720 line:-1 position:50%
of cycling, running,
and walking.


76
00:03:40.720 --> 00:03:42.889 line:-1 position:50%
Let’s make
HKWorkoutActivityType


77
00:03:42.889 --> 00:03:44.458 line:-1 position:50%
accessible to our list


78
00:03:44,458 --> 00:03:47,494 line:-1
by extending the
HKWorkoutActivityType enum


79
00:03:47.494 --> 00:03:49.930 line:-1 position:50%
to conform to
the identifiable protocol


80
00:03:49.930 --> 00:03:52.833 line:-1 position:50%
and add a name variable.


81
00:04:01.174 --> 00:04:07.180 line:-1 position:50%
The ID-computed variable will
return the rawValue of the enum.


82
00:04:09.015 --> 00:04:11.051 line:-1 position:50%
The name variable will switch
through the cases


83
00:04:11.051 --> 00:04:15.856 line:-1 position:50%
to return a name
like “Run”, “Bike”, or “Walk”.


84
00:04:15,856 --> 00:04:17,958 line:-1
Let’s add a List view
to our StartView’s body


85
00:04:17.958 --> 00:04:20.460 line:-1 position:50%
to display the list of workouts.


86
00:04:28.768 --> 00:04:32.839 line:-1 position:50%
The list uses the workoutTypes
variable as its model.


87
00:04:35.342 --> 00:04:38.578 line:-1 position:50%
A NavigationLink is displayed
for each workoutType.


88
00:04:38.578 --> 00:04:40.647 line:-1 position:50%
A NavigationLink defines
a destination


89
00:04:40,647 --> 00:04:42,916 line:-1
for a navigation-based
interface.


90
00:04:42,916 --> 00:04:45,886 line:-1
For now, the destination
will be a text view.


91
00:04:45.886 --> 00:04:47.654 line:-1 position:50%
We'll set these navigation
links up later


92
00:04:47,654 --> 00:04:50,991 line:-1
to make sure they are tracking
the right workout.


93
00:04:54.461 --> 00:04:56.296 line:-1 position:50%
Padding makes
the navigation links taller


94
00:04:56,296 --> 00:05:00,300 line:-1
to give them a larger tap area
to easily start a workout.


95
00:05:02,469 --> 00:05:04,070 line:0
The list uses
a carousel listStyle


96
00:05:04,070 --> 00:05:06,373 position:50%
to provide a depth effect
when scrolling.


97
00:05:09,376 --> 00:05:12,212 position:50%
The navigationBarTitle
will display “Workouts”.


98
00:05:12,212 --> 00:05:16,383 position:50%
Let’s click Resume to see
a preview of our StartView.


99
00:05:20,820 --> 00:05:25,292 line:-1
Click Live Preview
to be able to scroll.


100
00:05:25.292 --> 00:05:29.296 line:-1 position:50%
Scroll up to see the
carousel ListStyle depth effect.


101
00:05:29.296 --> 00:05:30.830 line:-1 position:50%
Looks great.


102
00:05:30.830 --> 00:05:34.401 line:-1 position:50%
The workout session will be
presented as a modal experience.


103
00:05:34,401 --> 00:05:36,203 line:-1
During a workout,
people typically need


104
00:05:36,203 --> 00:05:38,638 line:-1
only session-specific
functionality.


105
00:05:38,638 --> 00:05:40,640 line:-1
They don't need to review
the list of workouts


106
00:05:40,640 --> 00:05:42,809 line:-1
or access other parts
of your app.


107
00:05:42,809 --> 00:05:45,946 line:-1
Offering the most important
items in a modal experience


108
00:05:45,946 --> 00:05:48,081 line:-1
can help people
manage their session


109
00:05:48,081 --> 00:05:50,517 line:-1
while minimizing distraction.


110
00:05:50,517 --> 00:05:52,752 line:-1
People who use workout apps
on Apple Watch


111
00:05:52.752 --> 00:05:56.089 line:-1 position:50%
expect the views
to be in this order.


112
00:05:56.089 --> 00:05:58.792 line:-1 position:50%
On the left,
our controls view has buttons


113
00:05:58,792 --> 00:06:01,027 line:-1
that control
the in-progress session


114
00:06:01.027 --> 00:06:04.464 line:-1 position:50%
such as End, Pause, and Resume.


115
00:06:04.464 --> 00:06:07.334 line:-1 position:50%
In the center, metrics appear
on a dedicated screen


116
00:06:07,334 --> 00:06:10,370 line:-1
that people can read
at a glance.


117
00:06:10.370 --> 00:06:12.405 line:-1 position:50%
On the right,
media playback controls


118
00:06:12.405 --> 00:06:16.343 line:-1 position:50%
allow media to be controlled
during a workout.


119
00:06:16.343 --> 00:06:19.980 line:-1 position:50%
A TabView on watchOS switches
between multiple child views


120
00:06:19,980 --> 00:06:22,949 line:-1
when someone
swipes left or right.


121
00:06:22.949 --> 00:06:24.985 line:-1 position:50%
A TabView also provides
a page indicator


122
00:06:24.985 --> 00:06:26.820 line:-1 position:50%
at the bottom of the view.


123
00:06:26,820 --> 00:06:30,790 line:-1
A TabView will work great
to display our in-session views.


124
00:06:30.790 --> 00:06:33.627 line:-1 position:50%
Let’s create a SessionPagingView
with a TabView


125
00:06:33.627 --> 00:06:36.630 line:-1 position:50%
for our three workout
session views.


126
00:06:38,098 --> 00:06:43,637 line:-1
Click File > New > File...


127
00:06:43,637 --> 00:06:47,307 position:50%
SwiftUI View, click Next,


128
00:06:47.307 --> 00:06:51.878 line:-1 position:50%
name this "SessionPagingView"
and click Create.


129
00:06:55,215 --> 00:06:58,585 line:-1
Let’s create a Tab enum to model
each view that can be selected


130
00:06:58,585 --> 00:07:00,587 line:-1
in our TabView.


131
00:07:03.623 --> 00:07:05.625 line:-1 position:50%
The Tab enum has three cases:


132
00:07:05.625 --> 00:07:08.561 line:-1 position:50%
controls, metrics,
and nowPlaying.


133
00:07:08.561 --> 00:07:11.431 line:-1 position:50%
We’ve also added a @State
variable named "selection"


134
00:07:11,431 --> 00:07:14,434 line:-1
to provide the binding
for the TabView’s selection.


135
00:07:14.434 --> 00:07:16.870 line:-1 position:50%
Selection’s default value
will be metrics,


136
00:07:16.870 --> 00:07:20.173 line:-1 position:50%
so that when the workout starts,
the metrics view is displayed.


137
00:07:20,173 --> 00:07:22,175 line:-1
Let’s add the TabView.


138
00:07:29,382 --> 00:07:31,951 position:50%
The TabView’s selection
parameter uses a binding


139
00:07:31,951 --> 00:07:34,254 line:0
to our selection state variable.


140
00:07:34,254 --> 00:07:36,556 line:0
Text views are placeholders
for each view


141
00:07:36,556 --> 00:07:38,458 line:0
until they are created.


142
00:07:38,458 --> 00:07:41,928 line:0
Each of the views have a tag
so they can be selected.


143
00:07:41,928 --> 00:07:42,962 line:0
Let’s click Resume


144
00:07:42,962 --> 00:07:45,632 position:50%
and see what our
SessionPagingView looks like.


145
00:07:48,335 --> 00:07:52,339 position:50%
Click Live Preview to be able
to swipe between the views.


146
00:07:54,507 --> 00:07:57,143 position:50%
Notice the Metrics text view
is displayed first,


147
00:07:57,143 --> 00:07:59,913 position:50%
because SessionPagingView's
selection variable's


148
00:07:59,913 --> 00:08:02,482 line:0
default value is metrics.


149
00:08:02,482 --> 00:08:07,187 position:50%
Swiping to the left
shows the Controls text view.


150
00:08:07,187 --> 00:08:09,823 position:50%
Swiping all the way to the right


151
00:08:09,823 --> 00:08:11,991 position:50%
shows the Now Playing
text view.


152
00:08:11,991 --> 00:08:13,193 position:50%
Great!


153
00:08:13.193 --> 00:08:16.363 line:-1 position:50%
While the workout is running,
live metrics are displayed.


154
00:08:16.363 --> 00:08:18.832 line:-1 position:50%
When a session requires
movement, like running,


155
00:08:18.832 --> 00:08:22.369 line:-1 position:50%
your app should use large font
sizes and arrange text


156
00:08:22,369 --> 00:08:26,473 line:-1
so that the most important
information is easy to read.


157
00:08:26.473 --> 00:08:30.243 line:-1 position:50%
Our MetricsView will display
elapsed time, active energy,


158
00:08:30,243 --> 00:08:32,812 line:-1
current heart rate,
and distance.


159
00:08:32.812 --> 00:08:35.448 line:-1 position:50%
HealthKit has many more
HKQuantityTypes


160
00:08:35.448 --> 00:08:37.951 line:-1 position:50%
available for you to use.


161
00:08:37.951 --> 00:08:40.487 line:-1 position:50%
Let’s create the MetricsView.


162
00:08:40.487 --> 00:08:46.159 line:-1 position:50%
Click File > New > File


163
00:08:46,159 --> 00:08:50,497 line:0
SwiftUI View, click Next,


164
00:08:50,497 --> 00:08:55,368 position:50%
name this "MetricsView"
and click Create.


165
00:09:00.039 --> 00:09:05.044 line:-1 position:50%
A VStack will contain
our four metric Text views.


166
00:09:12.018 --> 00:09:14.020 line:-1 position:50%
The Text views have
default values for now


167
00:09:14,020 --> 00:09:17,690 line:-1
until we connect
these Text views to our model.


168
00:09:22.095 --> 00:09:24.964 line:-1 position:50%
Let’s make elapsed time
the focal point by giving it


169
00:09:24.964 --> 00:09:28.868 line:-1 position:50%
a yellow foregroundColor
and semibold fontWeight.


170
00:09:32.872 --> 00:09:36.176 line:-1 position:50%
The active energy text view
creates a measurement


171
00:09:36.176 --> 00:09:39.779 line:-1 position:50%
using a default value
in energy unit kilocalories.


172
00:09:39,779 --> 00:09:42,182 line:-1
The Measurement uses
a new formatted function


173
00:09:42.182 --> 00:09:43.716 line:-1 position:50%
which abbreviates the unit,


174
00:09:43.716 --> 00:09:46.186 line:-1 position:50%
usage is workout
for workout energy burned,


175
00:09:46,186 --> 00:09:48,988 line:-1
and numberFormat
has zero fractionLength


176
00:09:48,988 --> 00:09:50,990 line:-1
to trim fractions.


177
00:09:55,495 --> 00:09:57,997 line:-1
The heart rate text view
uses a default value


178
00:09:57,997 --> 00:10:00,300 line:-1
formatted with fractionLength
zero.


179
00:10:00.300 --> 00:10:02.635 line:-1 position:50%
It appends “bpm” --
for beats per minute --


180
00:10:02.635 --> 00:10:05.138 line:-1 position:50%
to the formatted string.


181
00:10:08.875 --> 00:10:11.711 line:-1 position:50%
The distance text view
uses a default value


182
00:10:11,711 --> 00:10:13,480 line:-1
with UnitLength.meters.


183
00:10:13,480 --> 00:10:16,483 line:-1
The measurement is formatted
with abbreviated units.


184
00:10:16.483 --> 00:10:19.853 line:-1 position:50%
usage is road, which displays
naturally progressing


185
00:10:19.853 --> 00:10:23.456 line:-1 position:50%
imperial or metric units
based on locale.


186
00:10:27,360 --> 00:10:30,463 line:-1
We’ll use a system font
of title with rounded design,


187
00:10:30,463 --> 00:10:34,467 line:-1
monospacedDigits,
and lowercaseSmallCaps.


188
00:10:36,402 --> 00:10:39,239 line:0
We want our metrics to
be aligned to the leading edge,


189
00:10:39,239 --> 00:10:42,141 position:50%
so we’ve given the VStack
a frame view modifier


190
00:10:42,141 --> 00:10:46,145 position:50%
with maxWidth infinity,
and leading alignment.


191
00:10:48,114 --> 00:10:50,483 position:50%
We want to allow content
of this VStack


192
00:10:50,483 --> 00:10:52,986 line:0
to extend all the way
to the bottom of the screen.


193
00:10:52,986 --> 00:10:56,589 position:50%
To allow this, we ignore
the bottom safe area.


194
00:10:58,525 --> 00:10:59,926 line:0
We want our metrics
to be aligned


195
00:10:59,926 --> 00:11:01,628 line:0
to the navigation bar title,


196
00:11:01,628 --> 00:11:05,632 position:50%
so we've used
scenePadding() to do this.


197
00:11:10.036 --> 00:11:11.804 line:-1 position:50%
We want our elapsed time
Text view


198
00:11:11,804 --> 00:11:14,073 line:-1
to format the elapsed time
properly


199
00:11:14.073 --> 00:11:17.544 line:-1 position:50%
and hide or show subseconds
based on the Always On state.


200
00:11:17.544 --> 00:11:20.480 line:-1 position:50%
To do this, let’s create
an ElapsedTimeView


201
00:11:20,480 --> 00:11:23,650 line:-1
and create a custom
ElapsedTimeFormatter.


202
00:11:23,650 --> 00:11:29,889 line:-1
Click File > New > File,


203
00:11:29,889 --> 00:11:33,293 position:50%
SwiftUI View, click Next,


204
00:11:33,293 --> 00:11:37,964 line:0
name it "ElapsedTimeView",
and click Create.


205
00:11:49.309 --> 00:11:51.511 line:-1 position:50%
Our ElapsedTimeView
has elapsedTime,


206
00:11:51.511 --> 00:11:54.480 line:-1 position:50%
which is a TimeInterval,
defaulted to zero.


207
00:11:54.480 --> 00:12:00.086 line:-1 position:50%
showSubseconds is a Boolean
argument defaulted to true.


208
00:12:00,086 --> 00:12:02,121 position:50%
timeFormatter is
an ElapsedTimeFormatter


209
00:12:02,121 --> 00:12:05,058 position:50%
state variable
that we define below.


210
00:12:09.162 --> 00:12:11.130 line:-1 position:50%
The View’s body contains
a Text view


211
00:12:11.130 --> 00:12:13.633 line:-1 position:50%
that casts the elapsedTime
to an NSNumber


212
00:12:13,633 --> 00:12:16,169 line:-1
so that the timeFormatter
can use it.


213
00:12:16,169 --> 00:12:19,038 line:-1
Text view has
a semibold fontWeight.


214
00:12:19.038 --> 00:12:21.341 line:-1 position:50%
When showSubseconds
changes, the timeFormatter’s


215
00:12:21.341 --> 00:12:24.844 line:-1 position:50%
showSubseconds variable
also changes.


216
00:12:32,318 --> 00:12:34,854 line:-1
The ElapsedTimeFormatter
is a custom formatter


217
00:12:34.854 --> 00:12:37.223 line:-1 position:50%
that uses a
DateComponentsFormatter.


218
00:12:37.223 --> 00:12:40.059 line:-1 position:50%
We want elapsed time
to show minutes and seconds


219
00:12:40,059 --> 00:12:41,728 line:-1
and pad zeros.


220
00:12:41.728 --> 00:12:43.129 line:-1 position:50%
The showSubseconds variable


221
00:12:43.129 --> 00:12:46.199 line:-1 position:50%
dictates if subseconds
are shown.


222
00:12:49,869 --> 00:12:51,971 line:-1
We override the string
for value function,


223
00:12:51.971 --> 00:12:54.040 line:-1 position:50%
which returns
an optional String.


224
00:12:54,040 --> 00:12:58,044 line:-1
The first guard ensures
the value is a TimeInterval.


225
00:13:00.613 --> 00:13:03.116 line:-1 position:50%
The second guard ensures
the componentsFormatter


226
00:13:03.116 --> 00:13:04.951 line:-1 position:50%
returned a string.


227
00:13:09,188 --> 00:13:12,525 line:-1
If showSubseconds is true,
calculate the subseconds


228
00:13:12.525 --> 00:13:14.093 line:-1 position:50%
by getting
the truncatedRemainder


229
00:13:14.093 --> 00:13:17.697 line:-1 position:50%
by dividingBy 1,
then multiplying by 100.


230
00:13:17,697 --> 00:13:19,632 line:-1
Use a localized
decimalSeparator,


231
00:13:19.632 --> 00:13:23.636 line:-1 position:50%
then return a formattedString,
appending the subseconds.


232
00:13:26,439 --> 00:13:28,675 position:50%
If showSubseconds is false,
then just return


233
00:13:28,675 --> 00:13:31,611 position:50%
the formattedString
without subseconds.


234
00:13:31,611 --> 00:13:35,615 position:50%
Click resume to see a preview
of our ElapsedTimeView.


235
00:13:38,017 --> 00:13:39,018 line:0
Looks good.


236
00:13:39,018 --> 00:13:41,788 position:50%
Minutes has zeros padded
on the left side of the colon.


237
00:13:41,788 --> 00:13:44,824 line:0
Seconds has zeros padded
on the right side of the colon.


238
00:13:44,824 --> 00:13:48,127 line:0
Subseconds are displayed
after the decimal.


239
00:13:48.127 --> 00:13:50.596 line:-1 position:50%
Let’s add the ElapsedTimeView
to MetricsView.


240
00:13:50,596 --> 00:13:52,598 position:50%
Click MetricsView.


241
00:13:55,334 --> 00:13:56,903 line:-1
Replace the elapsed time
Text view


242
00:13:56,903 --> 00:13:58,905 line:-1
with the ElapsedTimeView.


243
00:14:05,078 --> 00:14:07,313 line:-1
Let’s preview our MetricsView.


244
00:14:07.313 --> 00:14:09.115 line:-1 position:50%
Looks great!


245
00:14:10.416 --> 00:14:11.784 line:-1 position:50%
The ControlsView has buttons


246
00:14:11.784 --> 00:14:14.020 line:-1 position:50%
that control
the in-progress session,


247
00:14:14.020 --> 00:14:17.090 line:-1 position:50%
such as End, Pause, and Resume.


248
00:14:17.090 --> 00:14:18.658 line:-1 position:50%
When the End button is tapped,


249
00:14:18,658 --> 00:14:21,327 line:-1
the workout summary
will be displayed.


250
00:14:21.327 --> 00:14:23.863 line:-1 position:50%
When the Pause button is tapped,
the workout will pause


251
00:14:23,863 --> 00:14:26,733 line:-1
and the MetricsView
will be displayed.


252
00:14:26.733 --> 00:14:29.736 line:-1 position:50%
Let’s create the ControlsView.


253
00:14:29.736 --> 00:14:35.308 line:-1 position:50%
Click File > New > File,


254
00:14:35.308 --> 00:14:36.809 line:-1 position:50%
SwiftUI View,


255
00:14:38.778 --> 00:14:43.249 line:-1 position:50%
name this "ControlsView"
and click Create.


256
00:14:46,252 --> 00:14:50,523 line:-1
Let’s add the End
and Pause buttons.


257
00:14:55,428 --> 00:14:57,597 line:-1
An HStack contains two VStacks


258
00:14:57,597 --> 00:15:02,168 line:-1
where each VStack contains
a button and a text view.


259
00:15:05,404 --> 00:15:09,509 line:-1
The End button’s label is an
Image with systemName “xmark”.


260
00:15:09,509 --> 00:15:12,211 line:-1
The button has a red tint
and uses title2 font


261
00:15:12,211 --> 00:15:15,148 line:-1
to increase the size
of the symbol.


262
00:15:15.148 --> 00:15:18.251 line:-1 position:50%
The text view below
has an “End” string.


263
00:15:22,088 --> 00:15:25,358 position:50%
The pause button uses an image
with systemName “pause”.


264
00:15:25,358 --> 00:15:27,360 position:50%
It has a yellow tint.


265
00:15:27,360 --> 00:15:29,862 line:0
The text view below
has a “Pause” string.


266
00:15:29,862 --> 00:15:33,366 line:0
Click Resume to preview
the ControlsView.


267
00:15:39,338 --> 00:15:41,174 position:50%
Looks great.


268
00:15:43,509 --> 00:15:46,145 line:-1
The NowPlayingView
provides media playback controls


269
00:15:46.145 --> 00:15:48.281 line:-1 position:50%
while the workout is in session.


270
00:15:48,281 --> 00:15:50,583 line:-1
This includes controls
for third-party apps


271
00:15:50.583 --> 00:15:52.985 line:-1 position:50%
that are currently
playing media.


272
00:15:52.985 --> 00:15:55.555 line:-1 position:50%
Let’s add the NowPlayingView.


273
00:15:55.555 --> 00:15:58.558 line:-1 position:50%
Select SessionPagingView.


274
00:16:01,460 --> 00:16:03,763 line:-1
The NowPlayingView
is provided by WatchKit.


275
00:16:03,763 --> 00:16:06,766 line:-1
Let’s import WatchKit.


276
00:16:08,801 --> 00:16:12,772 line:-1
Let’s replace our text views
with ControlsView, MetricsView,


277
00:16:12,772 --> 00:16:15,107 line:-1
and the NowPlayingView.


278
00:16:21,280 --> 00:16:24,817 position:50%
The NowPlayingView is a SwiftUI
view provided by WatchKit.


279
00:16:24,817 --> 00:16:26,552 position:50%
It’s that simple.


280
00:16:26,552 --> 00:16:30,556 position:50%
Click Resume to see a preview
of SessionPagingView.


281
00:16:38,764 --> 00:16:42,068 position:50%
In Preview, we can see
our MetricsView.


282
00:16:42,068 --> 00:16:45,071 line:0
Swipe to the left
to see the ControlsView.


283
00:16:46,205 --> 00:16:49,208 line:0
Swipe all the way
to the right...


284
00:16:50,309 --> 00:16:52,812 line:0
...to see the NowPlayingView.


285
00:16:57,650 --> 00:17:00,720 line:-1
Let’s go back to our StartView
and change the destination


286
00:17:00,720 --> 00:17:04,357 line:-1
of the NavigationLink
to SessionPagingView.


287
00:17:04,357 --> 00:17:06,359 line:-1
Select StartView.


288
00:17:08,594 --> 00:17:12,598 line:-1
Update the destination
to SessionPagingView.


289
00:17:18.237 --> 00:17:21.040 line:-1 position:50%
A Summary screen confirms
that a workout is finished


290
00:17:21.040 --> 00:17:24.110 line:-1 position:50%
and displays
the recorded information.


291
00:17:24,110 --> 00:17:28,080 line:-1
We will enhance the summary
by including Activity Rings


292
00:17:28.080 --> 00:17:31.851 line:-1 position:50%
so that people can easily check
their current progress.


293
00:17:31,851 --> 00:17:34,353 line:-1
Let’s create the Summary view.


294
00:17:35.121 --> 00:17:40.226 line:-1 position:50%
Click File > New > File,


295
00:17:40,226 --> 00:17:43,829 line:0
SwiftUI View, click Next,


296
00:17:43,829 --> 00:17:47,033 position:50%
name this "SummaryView"
and click Create.


297
00:17:49.802 --> 00:17:52.204 line:-1 position:50%
Let’s create a custom
SummaryMetricView


298
00:17:52,204 --> 00:17:56,208 line:-1
that describes the metric
and its value.


299
00:18:02,315 --> 00:18:05,918 line:-1
SummaryMetricView takes a title
that describes the metric


300
00:18:05,918 --> 00:18:08,921 line:-1
and a value string
of the metric.


301
00:18:12.525 --> 00:18:15.962 line:-1 position:50%
Body contains the two text views
and a divider.


302
00:18:15,962 --> 00:18:17,930 line:-1
The text view showing
the metric value


303
00:18:17.930 --> 00:18:20.366 line:-1 position:50%
uses a title system font
with rounded design


304
00:18:20,366 --> 00:18:21,968 line:-1
and lowercaseSmallCaps.


305
00:18:21.968 --> 00:18:26.038 line:-1 position:50%
It uses the accentColor
as its foregroundColor.


306
00:18:26.038 --> 00:18:28.074 line:-1 position:50%
Let’s create the workout
duration formatter


307
00:18:28,074 --> 00:18:30,576 line:-1
for the SummaryView.


308
00:18:36,148 --> 00:18:38,985 line:-1
durationFormatter
is a DateComponentsFormatter


309
00:18:38,985 --> 00:18:42,888 line:-1
that displays hours, minutes,
and seconds separated by colons


310
00:18:42.888 --> 00:18:45.291 line:-1 position:50%
and pads zeros.


311
00:18:45,291 --> 00:18:47,860 line:-1
Let’s add the SummaryMetricViews
and the Done button


312
00:18:47.860 --> 00:18:49.862 line:-1 position:50%
to our SummaryView.


313
00:18:58,204 --> 00:19:01,841 line:-1
A ScrollView and VStack contain
our four SummaryMetricViews


314
00:19:01,841 --> 00:19:03,843 line:-1
and Done button.


315
00:19:08.581 --> 00:19:11.751 line:-1 position:50%
Total Time text view uses
the durationFormatter


316
00:19:11,751 --> 00:19:14,086 line:-1
to display hours,
minutes, and seconds,


317
00:19:14.086 --> 00:19:16.322 line:-1 position:50%
separated by colons.


318
00:19:21,961 --> 00:19:25,164 position:50%
Total Distance SummaryMetricView
uses Measurement


319
00:19:25,164 --> 00:19:27,400 position:50%
with a default value
that is formatted


320
00:19:27,400 --> 00:19:29,301 line:0
using an abbreviated unit.


321
00:19:29,301 --> 00:19:32,171 position:50%
usage is road, which displays
naturally progressing


322
00:19:32,171 --> 00:19:35,875 position:50%
imperial or metric units
based on locale.


323
00:19:42,248 --> 00:19:45,184 position:50%
Total Energy SummaryMetricView
uses Measurement


324
00:19:45,184 --> 00:19:48,754 line:0
with a default value
and energy unit of kilocalories.


325
00:19:48,754 --> 00:19:51,891 line:0
It is formatted
using an abbreviated unit.


326
00:19:51,891 --> 00:19:54,360 position:50%
usage is workout
for workout energy,


327
00:19:54,360 --> 00:19:59,031 position:50%
and numberFormat has a precision
with fractionLength zero.


328
00:20:03,469 --> 00:20:05,571 line:-1
Average Heart Rate
SummaryMetricView


329
00:20:05,571 --> 00:20:07,239 line:-1
uses a default value


330
00:20:07.239 --> 00:20:10.643 line:-1 position:50%
formatted with number precision,
fractionLength of zero,


331
00:20:10,643 --> 00:20:14,847 line:-1
and appends "bpm"
for beats per minute.


332
00:20:14.847 --> 00:20:17.183 line:-1 position:50%
We’ll provide actual
workout values later


333
00:20:17,183 --> 00:20:21,020 line:-1
for the SummaryMetricViews.


334
00:20:21,020 --> 00:20:23,089 position:50%
We want the text views
and dividers


335
00:20:23,089 --> 00:20:25,157 position:50%
to align to the navigation
bar title


336
00:20:25,157 --> 00:20:29,161 line:0
so we've used .scenePadding()
on the VStack.


337
00:20:31,997 --> 00:20:34,400 position:50%
The navigationTitle
will be "Summary"


338
00:20:34,400 --> 00:20:38,370 line:0
and will display inline
in the navigation bar.


339
00:20:38,370 --> 00:20:42,441 line:0
Next let’s add Activity Rings
to the workout summary.


340
00:20:42.441 --> 00:20:47.746 line:-1 position:50%
Click File > New > File,


341
00:20:47,746 --> 00:20:51,851 line:-1
Swift File, click Next,


342
00:20:51.851 --> 00:20:58.557 line:-1 position:50%
name this "ActivityRingsView"
and click Create.


343
00:21:06,565 --> 00:21:10,236 line:-1
Import HealthKit to get access
to the HKHealthStore.


344
00:21:10.236 --> 00:21:16.775 line:-1 position:50%
Import SwiftUI to get access to
WKInterfaceObjectRepresentable.


345
00:21:18,511 --> 00:21:20,579 line:-1
The ActivityRingsView
struct conforms to


346
00:21:20,579 --> 00:21:23,549 line:-1
WKInterfaceObjectRepresentable.


347
00:21:23.549 --> 00:21:28.587 line:-1 position:50%
The healthStore constant
is assigned at initialization.


348
00:21:30.990 --> 00:21:33.792 line:-1 position:50%
Two functions are required
to conform to the protocol:


349
00:21:33.792 --> 00:21:39.598 line:-1 position:50%
makeWKInterfaceObject
and updateWKInterfaceObject.


350
00:21:42.701 --> 00:21:44.904 line:-1 position:50%
Inside makeWKInterfaceObject,


351
00:21:44,904 --> 00:21:46,939 line:-1
we declare the
activityRingsObject


352
00:21:46,939 --> 00:21:51,777 line:-1
which is a
WKInterfaceActivityRing.


353
00:21:53.546 --> 00:21:57.082 line:-1 position:50%
Next we create the predicate
for the HKActivitySummaryQuery


354
00:21:57,082 --> 00:22:02,655 line:-1
and use date components
for today.


355
00:22:02,655 --> 00:22:04,990 line:0
Then we create the query
and handle the result,


356
00:22:04,990 --> 00:22:07,726 line:0
which sets the activity summary
on the activityRingsObject


357
00:22:07,726 --> 00:22:10,362 line:0
on the main queue.


358
00:22:13,098 --> 00:22:16,035 position:50%
Then execute the query
on the HKHealthStore.


359
00:22:16,035 --> 00:22:19,371 position:50%
Finally, return
the activityRingsObject.


360
00:22:19.371 --> 00:22:22.241 line:-1 position:50%
Let’s add the ActivityRingsView
to the SummaryView.


361
00:22:22.241 --> 00:22:24.543 line:-1 position:50%
Click SummaryView.


362
00:22:28.247 --> 00:22:32.251 line:-1 position:50%
Let's import HealthKit
to get access to HKHealthStore.


363
00:22:35,221 --> 00:22:37,823 line:-1
Next, let's add a Text view
and an ActivityRingsView


364
00:22:37,823 --> 00:22:40,426 line:-1
above the Done button.


365
00:22:48.434 --> 00:22:51.303 line:-1 position:50%
We’ve added a Text view
and an ActivityRingsViews


366
00:22:51.303 --> 00:22:53.606 line:-1 position:50%
with a frame width
and height of 50.


367
00:22:53,606 --> 00:22:55,841 line:-1
We’ll create
an HKHealthStore for now.


368
00:22:55,841 --> 00:22:58,043 line:-1
Later, we’ll reuse one.


369
00:22:58.043 --> 00:23:01.380 line:-1 position:50%
Let’s preview our SummaryView.
Click Resume.


370
00:23:06.352 --> 00:23:09.588 line:-1 position:50%
Click Live Preview
to be able to scroll.


371
00:23:12,157 --> 00:23:15,194 line:-1
See each of our
SummaryMetricViews,


372
00:23:17,563 --> 00:23:19,665 line:-1
Activity Rings,


373
00:23:19,665 --> 00:23:22,568 line:-1
and Done button.


374
00:23:22,568 --> 00:23:25,938 line:-1
Let’s talk about
HealthKit integration.


375
00:23:25,938 --> 00:23:28,073 line:-1
HealthKit provides
built-in functionality


376
00:23:28.073 --> 00:23:30.976 line:-1 position:50%
to track fitness activity
during the workout


377
00:23:30.976 --> 00:23:33.512 line:-1 position:50%
and save that workout
to HealthKit.


378
00:23:33.512 --> 00:23:35.547 line:-1 position:50%
This saves you time
as a developer,


379
00:23:35.547 --> 00:23:37.583 line:-1 position:50%
and your customers will have
all their workouts


380
00:23:37.583 --> 00:23:40.286 line:-1 position:50%
saved to one location.


381
00:23:40.286 --> 00:23:43.422 line:-1 position:50%
HK workout session prepares
the device’s sensors


382
00:23:43,422 --> 00:23:46,759 line:-1
for data collection so that
you can accurately collect data


383
00:23:46.759 --> 00:23:50.629 line:-1 position:50%
that’s relevant to the workout,
like calories and heart rate.


384
00:23:50.629 --> 00:23:53.399 line:-1 position:50%
It also allows your application
to run in the background


385
00:23:53,399 --> 00:23:56,168 line:-1
when the workout is active.


386
00:23:56,168 --> 00:24:00,706 line:-1
HKLiveWorkoutBuilder will create
and save an HKWorkout object.


387
00:24:00.706 --> 00:24:02.541 line:-1 position:50%
It automatically
collects samples


388
00:24:02.541 --> 00:24:05.110 line:-1 position:50%
and events for you.


389
00:24:05,110 --> 00:24:06,545 line:0
To learn more, check out


390
00:24:06,545 --> 00:24:10,783 line:0
the “New ways to work
with workouts” session.


391
00:24:10,783 --> 00:24:14,553 line:-1
Let’s see what the data flow
will be for our app.


392
00:24:14.553 --> 00:24:16.322 line:-1 position:50%
WorkoutManager will
be responsible


393
00:24:16,322 --> 00:24:18,957 line:-1
for interfacing with HealthKit.


394
00:24:18.957 --> 00:24:21.327 line:-1 position:50%
It interfaces with
an HKWorkoutSession


395
00:24:21,327 --> 00:24:24,396 line:-1
to start, pause,
and end the workout.


396
00:24:24.396 --> 00:24:27.266 line:-1 position:50%
It interfaces with an
HKLiveWorkoutBuilder


397
00:24:27,266 --> 00:24:30,336 line:-1
to listen for workout samples
and provide that data


398
00:24:30.336 --> 00:24:32.938 line:-1 position:50%
to our views.


399
00:24:32.938 --> 00:24:35.541 line:-1 position:50%
WorkoutManager will be
an environment object.


400
00:24:35,541 --> 00:24:38,444 line:-1
An environment object
invalidates the current view


401
00:24:38,444 --> 00:24:42,481 line:-1
whenever the observable
object changes.


402
00:24:42,481 --> 00:24:45,551 line:-1
We will assignMyWorkoutsApp’s
NavigationView


403
00:24:45,551 --> 00:24:48,120 line:-1
the WorkoutManager
environmentObject,


404
00:24:48,120 --> 00:24:50,823 line:-1
which will propagate
WorkoutManager to views


405
00:24:50,823 --> 00:24:54,860 line:-1
in the NavigationView’s
view hierarchy.


406
00:24:54,860 --> 00:24:57,363 line:0
Views will then declare
an @EnvironmentObject


407
00:24:57,363 --> 00:25:01,233 position:50%
to gain access to WorkoutManager
in the environment.


408
00:25:01.233 --> 00:25:03.936 line:-1 position:50%
Let’s create the WorkoutManager.


409
00:25:03.936 --> 00:25:09.541 line:-1 position:50%
Click File > New > File,


410
00:25:09.541 --> 00:25:13.746 line:-1 position:50%
Swift File, click Next,


411
00:25:13,746 --> 00:25:18,250 line:-1
name this "WorkoutManager"
and click Create.


412
00:25:22.254 --> 00:25:23.655 line:-1 position:50%
Import HealthKit


413
00:25:23,655 --> 00:25:28,427 line:-1
so that WorkoutManager has
access to HealthKit’s APIs.


414
00:25:32,131 --> 00:25:35,567 line:-1
Then define the WorkoutManager
class which is an NSObject


415
00:25:35,567 --> 00:25:39,171 line:-1
that conforms to
the ObservableObject protocol.


416
00:25:39.171 --> 00:25:42.941 line:-1 position:50%
We want to give all of our views
access to WorkoutManager.


417
00:25:42,941 --> 00:25:45,210 line:-1
We do this by assigning
WorkoutManager


418
00:25:45.210 --> 00:25:46.845 line:-1 position:50%
as an environment object


419
00:25:46.845 --> 00:25:49.348 line:-1 position:50%
on MyWorkoutsApp’s
NavigationView.


420
00:25:49.348 --> 00:25:52.017 line:-1 position:50%
Select MyWorkoutsApp.


421
00:25:53.752 --> 00:25:57.256 line:-1 position:50%
Add workoutManager
as a StateObject.


422
00:26:00.325 --> 00:26:02.361 line:-1 position:50%
Add the environmentObject
view modifier


423
00:26:02.361 --> 00:26:04.363 line:-1 position:50%
to the NavigationView.


424
00:26:07.499 --> 00:26:10.402 line:-1 position:50%
When a NavigationView is
assigned an environmentObject,


425
00:26:10.402 --> 00:26:13.005 line:-1 position:50%
it automatically passes
the environmentObject


426
00:26:13,005 --> 00:26:15,774 line:-1
to views in its view hierarchy.


427
00:26:15,774 --> 00:26:17,943 line:-1
Let’s set up
our navigation model.


428
00:26:17.943 --> 00:26:19.945 line:-1 position:50%
Select WorkoutManager.


429
00:26:23.382 --> 00:26:25.918 line:-1 position:50%
WorkoutManager will manage
the selected workout,


430
00:26:25.918 --> 00:26:30.255 line:-1 position:50%
which is an optional
HKWorkoutActivityType.


431
00:26:32.357 --> 00:26:34.393 line:-1 position:50%
We’ve added
the selectedWorkout variable


432
00:26:34.393 --> 00:26:37.229 line:-1 position:50%
to track the selected workout.


433
00:26:37.229 --> 00:26:38.831 line:-1 position:50%
Now our StartView’s
NavigationLink


434
00:26:38.831 --> 00:26:40.599 line:-1 position:50%
needs to bind its selection


435
00:26:40.599 --> 00:26:43.936 line:-1 position:50%
to WorkoutManager’s
selectedWorkout.


436
00:26:43.936 --> 00:26:45.938 line:-1 position:50%
Select StartView.


437
00:26:48.707 --> 00:26:52.377 line:-1 position:50%
Add workoutManager
EnvironmentObject to StartView.


438
00:26:55.914 --> 00:27:00.919 line:-1 position:50%
Let’s update NavigationLink
with tag and selection.


439
00:27:05,657 --> 00:27:07,693 line:-1
tag is the workoutType.


440
00:27:07,693 --> 00:27:11,096 line:-1
selection is a binding
to selectedWorkout


441
00:27:11,096 --> 00:27:12,898 line:-1
on workoutManager.


442
00:27:12,898 --> 00:27:14,933 line:-1
Now, whenever
a workout is tapped,


443
00:27:14,933 --> 00:27:18,904 line:-1
selectedWorkout on
workoutManager will update.


444
00:27:18.904 --> 00:27:20.973 line:-1 position:50%
Now let’s start
an HKWorkoutSession


445
00:27:20.973 --> 00:27:24.610 line:-1 position:50%
and HKLiveWorkoutBuilder
when a workout is selected.


446
00:27:24.610 --> 00:27:28.280 line:-1 position:50%
Select WorkoutManager.


447
00:27:36.688 --> 00:27:39.458 line:-1 position:50%
Add the HKHealthStore,
HKWorkoutSession,


448
00:27:39,458 --> 00:27:42,294 line:-1
and HKLiveWorkoutBuilder.


449
00:27:42.294 --> 00:27:46.565 line:-1 position:50%
Now, let’s create a startWorkout
function to start the workout.


450
00:27:54,373 --> 00:27:57,776 line:-1
The startWorkout function
takes a workoutType parameter.


451
00:27:57.776 --> 00:28:02.180 line:-1 position:50%
A HKWorkoutConfiguration is
created using the workoutType.


452
00:28:02,180 --> 00:28:05,651 line:-1
For our app, all of our workouts
will be outdoor.


453
00:28:05.651 --> 00:28:07.386 line:-1 position:50%
Note that location type
determines how


454
00:28:07,386 --> 00:28:11,189 line:-1
the HKWorkoutSession and
HKLiveWorkoutBuilder behaves.


455
00:28:11.189 --> 00:28:13.859 line:-1 position:50%
For example,
an outdoor cycling activity


456
00:28:13.859 --> 00:28:15.928 line:-1 position:50%
generates accurate
location data,


457
00:28:15.928 --> 00:28:19.798 line:-1 position:50%
while an indoor cycling
activity does not.


458
00:28:19.798 --> 00:28:22.501 line:-1 position:50%
Create the HKWorkoutSession
using the healthStore


459
00:28:22,501 --> 00:28:24,503 line:-1
and configuration.


460
00:28:27,940 --> 00:28:31,543 line:-1
Assign builder to the session’s
associatedWorkoutBuilder.


461
00:28:31.543 --> 00:28:35.647 line:-1 position:50%
This is done in a do-catch block
to handle any errors thrown.


462
00:28:38,417 --> 00:28:41,954 line:-1
Assign the builder’s dataSource
to an HKLiveWorkoutDataSource


463
00:28:41.954 --> 00:28:45.390 line:-1 position:50%
using the healthStore
and workoutConfiguration.


464
00:28:45,390 --> 00:28:49,561 line:-1
An HKLiveWorkoutDataSource
automatically provides live data


465
00:28:49.561 --> 00:28:52.898 line:-1 position:50%
from an active workout session.


466
00:28:55.934 --> 00:28:57.402 line:-1 position:50%
Create a startDate,


467
00:28:57,402 --> 00:28:59,104 line:-1
call startActivity
on the session,


468
00:28:59.104 --> 00:29:02.474 line:-1 position:50%
and beginCollection
on the builder.


469
00:29:02,474 --> 00:29:04,242 line:-1
Whenever
selectedWorkout changes,


470
00:29:04,242 --> 00:29:06,278 line:-1
let’s call startWorkout.


471
00:29:12.985 --> 00:29:15.320 line:-1 position:50%
selectedWorkout
can be nil.


472
00:29:15,320 --> 00:29:17,656 line:-1
Use a guard statement
to only call startWorkout


473
00:29:17,656 --> 00:29:21,293 line:-1
when selectedWorkout is not nil.


474
00:29:21.293 --> 00:29:23.962 line:-1 position:50%
Before our app can create
a workout session,


475
00:29:23.962 --> 00:29:26.732 line:-1 position:50%
we need to set up HealthKit
and request authorization


476
00:29:26,732 --> 00:29:30,268 line:-1
to read and share any health
data our app intends to use.


477
00:29:30.268 --> 00:29:34.439 line:-1 position:50%
Let's add a function
to request authorization.


478
00:29:42.314 --> 00:29:44.683 line:-1 position:50%
For workout sessions,
we must request permission


479
00:29:44,683 --> 00:29:47,686 line:-1
to share workout types.


480
00:29:50.355 --> 00:29:53.525 line:-1 position:50%
We also want to read any data
types automatically recorded


481
00:29:53,525 --> 00:29:56,762 line:-1
by Apple Watch
as part of the session.


482
00:29:56.762 --> 00:29:58.797 line:-1 position:50%
[CLICKING]


483
00:29:58.797 --> 00:30:02.300 line:-1 position:50%
We also want permission to read
the Activity Rings summary.


484
00:30:05,404 --> 00:30:08,740 line:0
Then call requestAuthorization
on the healthStore.


485
00:30:08,740 --> 00:30:10,609 position:50%
Let’s have the StartView
request authorization


486
00:30:10,609 --> 00:30:12,411 position:50%
from HealthKit
when the view appears.


487
00:30:12,411 --> 00:30:14,413 line:0
Click StartView.


488
00:30:23,288 --> 00:30:25,257 position:50%
On appear, workoutManager’s


489
00:30:25,257 --> 00:30:28,727 position:50%
requestAuthorization function
will be called.


490
00:30:28,727 --> 00:30:31,229 line:0
Let’s enable HealthKit
for our extension.


491
00:30:31,229 --> 00:30:34,232 line:0
Select MyWorkouts's
project file...


492
00:30:39.538 --> 00:30:42.441 line:-1 position:50%
...MyWorkouts WatchKit
Extension,


493
00:30:42.441 --> 00:30:45.911 line:-1 position:50%
Signing & Capabilities.


494
00:30:45,911 --> 00:30:50,282 line:-1
Select Add Capability,
scroll down, select HealthKit.


495
00:30:53.285 --> 00:30:55.120 line:-1 position:50%
Apps with an active
workout session


496
00:30:55,120 --> 00:30:57,322 line:-1
can run in the background,
so you need to add


497
00:30:57,322 --> 00:31:01,093 line:-1
the background modes capability
to your WatchKit Extension.


498
00:31:01,093 --> 00:31:02,260 line:-1
Workout sessions require


499
00:31:02,260 --> 00:31:05,063 line:-1
the Workout processing
background mode.


500
00:31:05.063 --> 00:31:09.267 line:-1 position:50%
Select Add Capability,


501
00:31:09,267 --> 00:31:12,104 line:-1
Background Modes.


502
00:31:12,104 --> 00:31:16,108 line:-1
Select Workout processing.


503
00:31:16,108 --> 00:31:17,843 line:-1
We need to add
usage descriptions


504
00:31:17,843 --> 00:31:21,279 line:-1
to our WatchKit Extension’s
Info.plist file.


505
00:31:21.279 --> 00:31:23.682 line:-1 position:50%
Select Info.plist.


506
00:31:26.952 --> 00:31:29.821 line:-1 position:50%
Select the last row,
then press Return.


507
00:31:33.225 --> 00:31:37.095 line:-1 position:50%
Use the NSHealth
ShareUsageDescription key.


508
00:31:40.732 --> 00:31:45.070 line:-1 position:50%
Describe why your app needs
to read the requested data.


509
00:31:45,070 --> 00:31:47,072 line:-1
Press Return.


510
00:31:48.673 --> 00:31:52.711 line:-1 position:50%
Use the NSHealth
UpdateUsageDescription key.


511
00:31:55.380 --> 00:31:59.084 line:-1 position:50%
Describe the data
your app intends to write.


512
00:32:02.454 --> 00:32:03.789 line:-1 position:50%
Let’s build and run our app


513
00:32:03,789 --> 00:32:06,858 line:-1
to see our app request
permission from HealthKit.


514
00:32:06.858 --> 00:32:08.860 line:-1 position:50%
Click Run.


515
00:32:25.043 --> 00:32:28.079 line:-1 position:50%
Our app has requested
HealthKit authorization.


516
00:32:28.079 --> 00:32:31.483 line:-1 position:50%
Scroll down
and click Review.


517
00:32:33.819 --> 00:32:36.221 line:-1 position:50%
Select All Requested Data Below.


518
00:32:39,791 --> 00:32:44,029 line:-1
See that our app has requested
to share Workouts.


519
00:32:44.029 --> 00:32:47.065 line:-1 position:50%
See our provided explanation.


520
00:32:47.065 --> 00:32:50.368 line:-1 position:50%
Tap Next.


521
00:32:50.368 --> 00:32:52.771 line:-1 position:50%
Our app has requested
read access.


522
00:32:52.771 --> 00:32:56.641 line:-1 position:50%
Select All Requested
Data Below.


523
00:32:56,641 --> 00:33:01,546 line:-1
See the data types that our app
has requested read access to.


524
00:33:07.185 --> 00:33:10.589 line:-1 position:50%
See our provided explanation.


525
00:33:10,589 --> 00:33:12,457 line:-1
Tap Done.


526
00:33:14.492 --> 00:33:16.494 line:-1 position:50%
Now that the workout session
can start,


527
00:33:16,494 --> 00:33:19,264 line:-1
we need to control
the HKWorkoutSession.


528
00:33:19,264 --> 00:33:22,200 line:-1
Select WorkoutManager.


529
00:33:27.038 --> 00:33:30.542 line:-1 position:50%
Let's add our session state
control logic.


530
00:33:39.050 --> 00:33:40.952 line:-1 position:50%
A @Published variable
named "running"


531
00:33:40,952 --> 00:33:44,422 line:-1
tracks if the session
is running.


532
00:33:46,958 --> 00:33:50,695 line:-1
The pause and resume functions
pause and resume the session.


533
00:33:50,695 --> 00:33:53,198 line:-1
The togglePause function
will either pause


534
00:33:53,198 --> 00:33:56,868 line:-1
or resume the session based
on if the session is running.


535
00:34:00,238 --> 00:34:03,475 position:50%
The endWorkout function
will end the session.


536
00:34:03.475 --> 00:34:05.377 line:-1 position:50%
Let’s extend WorkoutManager


537
00:34:05,377 --> 00:34:07,812 line:-1
to be an
HKWorkoutSessionDelegate


538
00:34:07,812 --> 00:34:11,650 line:-1
to listen for changes
to the session state.


539
00:34:19.891 --> 00:34:23.962 line:-1 position:50%
The workoutSession
didChangeTo toState fromState


540
00:34:23,962 --> 00:34:25,630 line:-1
with Date function is called


541
00:34:25.630 --> 00:34:28.600 line:-1 position:50%
whenever the session
state changes.


542
00:34:31.269 --> 00:34:32.971 line:-1 position:50%
Our running variable will update


543
00:34:32.971 --> 00:34:35.974 line:-1 position:50%
based on if the toState
is running and is dispatched


544
00:34:35.974 --> 00:34:38.476 line:-1 position:50%
to the main queue
for UI updates.


545
00:34:41,780 --> 00:34:43,848 line:0
When the session
transitions to ended,


546
00:34:43,848 --> 00:34:45,884 position:50%
call endCollection
on the builder


547
00:34:45,884 --> 00:34:50,155 line:0
with the end date provided to
stop collecting workout samples.


548
00:34:50,155 --> 00:34:52,891 position:50%
Once endCollection finishes,
call finishWorkout


549
00:34:52,891 --> 00:34:56,962 position:50%
to save the HKWorkout
to the Health database.


550
00:34:56,962 --> 00:34:59,197 position:50%
Make sure to assign
WorkoutManager


551
00:34:59,197 --> 00:35:02,267 position:50%
as the HKWorkoutSession
delegate.


552
00:35:08,907 --> 00:35:11,176 line:-1
Now let’s have the ControlsView


553
00:35:11,176 --> 00:35:14,446 line:-1
pause, resume,
and end the session.


554
00:35:14.446 --> 00:35:16.448 line:-1 position:50%
Select ControlsView.


555
00:35:19,351 --> 00:35:22,187 line:-1
Add workoutManager
as an EnvironmentObject


556
00:35:22.187 --> 00:35:26.391 line:-1 position:50%
so that our view
can control the session.


557
00:35:31,162 --> 00:35:34,065 line:-1
Have the End button’s action
call endWorkout


558
00:35:34.065 --> 00:35:35.900 line:-1 position:50%
on workoutManager.


559
00:35:40,939 --> 00:35:44,609 line:-1
The Pause/Resume button needs
to pause or resume the session


560
00:35:44.609 --> 00:35:49.014 line:-1 position:50%
and update its image and text
based on the session state.


561
00:35:56.054 --> 00:35:58.323 line:-1 position:50%
The button’s action
calls workoutManager’s


562
00:35:58.323 --> 00:36:03.094 line:-1 position:50%
togglePause function
to pause or resume the session.


563
00:36:05.096 --> 00:36:08.867 line:-1 position:50%
The button’s Image’s systemName
is either "pause" or "play",


564
00:36:08,867 --> 00:36:12,704 line:-1
based on workoutManager’s
running variable.


565
00:36:13,071 --> 00:36:16,174 line:-1
The text below the button shows
either “Pause” or “Resume”,


566
00:36:16.174 --> 00:36:19.611 line:-1 position:50%
also based on workoutManager’s
running variable.


567
00:36:19,611 --> 00:36:21,379 line:-1
Let’s update
our SessionPagingView


568
00:36:21.379 --> 00:36:24.416 line:-1 position:50%
to display the workout name
in the navigation bar.


569
00:36:24,416 --> 00:36:26,918 line:-1
Select SessionPagingView.


570
00:36:29,220 --> 00:36:30,955 line:-1
The SessionPagingView
needs access


571
00:36:30,955 --> 00:36:33,491 line:-1
to the WorkoutManager
environment variable,


572
00:36:33,491 --> 00:36:35,293 line:-1
so let’s add that.


573
00:36:35,293 --> 00:36:39,030 line:-1
[CLICKING]


574
00:36:39.030 --> 00:36:42.233 line:-1 position:50%
Now let’s configure
our navigation bar.


575
00:36:42,834 --> 00:36:44,269 line:-1
The navigation title


576
00:36:44.269 --> 00:36:48.139 line:-1 position:50%
is the WorkoutManager’s
selectedWorkout’s name.


577
00:36:48,139 --> 00:36:50,642 line:-1
The navigation bar’s
back button is hidden,


578
00:36:50.642 --> 00:36:53.478 line:-1 position:50%
because we don’t want someone
to go back to the StartView


579
00:36:53.478 --> 00:36:56.581 line:-1 position:50%
while they are in a workout.


580
00:36:56.581 --> 00:36:58.116 line:-1 position:50%
When the NowPlayingView
is shown,


581
00:36:58,116 --> 00:37:01,653 line:-1
we want to hide
the navigation bar.


582
00:37:01,653 --> 00:37:04,255 line:-1
When someone pauses
or resumes their workout,


583
00:37:04,255 --> 00:37:06,758 line:-1
they shouldn’t need to swipe
to the MetricsView.


584
00:37:06,758 --> 00:37:07,926 line:-1
We can do this for them


585
00:37:07.926 --> 00:37:11.229 line:-1 position:50%
by adding an onChange
view modifier.


586
00:37:18.536 --> 00:37:21.473 line:-1 position:50%
When WorkoutManager’s running
published variable changes,


587
00:37:21,473 --> 00:37:23,975 line:-1
the displayMetricsView
function is called.


588
00:37:23,975 --> 00:37:26,611 line:-1
displayMetricsView sets
the selection state variable


589
00:37:26,611 --> 00:37:29,347 line:-1
to metrics withAnimation.


590
00:37:29,347 --> 00:37:31,216 line:-1
Now that the workout can end,


591
00:37:31.216 --> 00:37:34.619 line:-1 position:50%
let’s add the ability to show
and dismiss the SummaryView.


592
00:37:34,619 --> 00:37:37,489 line:-1
Click WorkoutManager.


593
00:37:39,657 --> 00:37:43,394 line:-1
Add a published variable
named "showingSummaryView"


594
00:37:43,394 --> 00:37:46,698 line:-1
which is a Boolean
defaulted to false.


595
00:37:53.138 --> 00:37:56.441 line:-1 position:50%
This variable will provide
a binding to a sheet’s selection


596
00:37:56,441 --> 00:37:58,710 line:-1
on our app’s navigation view.


597
00:37:58.710 --> 00:38:02.213 line:-1 position:50%
In endWorkout,
set showingSummaryView to true.


598
00:38:11,523 --> 00:38:13,958 line:0
Let’s add the SummaryView
as a Sheet


599
00:38:13,958 --> 00:38:16,461 line:0
to MyWorkoutsApp’s
NavigationView.


600
00:38:16,461 --> 00:38:18,596 position:50%
Click MyWorkoutsApp.


601
00:38:21,166 --> 00:38:24,369 line:0
Add a sheet view modifier
to NavigationView.


602
00:38:29.908 --> 00:38:32.410 line:-1 position:50%
The isPresented parameter
is a binding


603
00:38:32,410 --> 00:38:35,647 line:-1
to workoutManager’s
showingSummaryView.


604
00:38:35.647 --> 00:38:38.383 line:-1 position:50%
The sheet’s content
is a SummaryView.


605
00:38:38,383 --> 00:38:39,484 line:-1
In SummaryView,


606
00:38:39,484 --> 00:38:42,187 line:-1
let’s add the ability
to dismiss the sheet.


607
00:38:42.187 --> 00:38:44.989 line:-1 position:50%
Click SummaryView.


608
00:38:48.426 --> 00:38:51.429 line:-1 position:50%
Add the dismiss
Dnvironment variable.


609
00:38:56.768 --> 00:39:00.104 line:-1 position:50%
In the Done button’s action,
call dismiss().


610
00:39:06.644 --> 00:39:09.881 line:-1 position:50%
Let’s run our application
to start and end the session


611
00:39:09,881 --> 00:39:12,717 line:-1
and see the SummaryView
displayed.


612
00:39:12.717 --> 00:39:15.453 line:-1 position:50%
Click Stop to stop
the previous run.


613
00:39:17,222 --> 00:39:19,057 line:-1
Click Run.


614
00:39:24,095 --> 00:39:26,097 line:-1
Tap the Run workout.


615
00:39:27.832 --> 00:39:30.768 line:-1 position:50%
Default metric values will
still be displayed in-session


616
00:39:30,768 --> 00:39:31,769 line:-1
and in the summary.


617
00:39:31,769 --> 00:39:33,605 line:-1
We'll set that up later.


618
00:39:33,605 --> 00:39:35,139 line:-1
Swipe to the left.


619
00:39:35,940 --> 00:39:38,643 line:-1
Tap Pause.


620
00:39:38,643 --> 00:39:40,878 line:-1
Notice the MetricsView
is displayed.


621
00:39:40.878 --> 00:39:42.714 line:-1 position:50%
Swipe to the left.


622
00:39:45.149 --> 00:39:47.619 line:-1 position:50%
Notice the button
now shows "Resume".


623
00:39:47.619 --> 00:39:49.354 line:-1 position:50%
Tap End.


624
00:39:51.689 --> 00:39:54.192 line:-1 position:50%
Our workout summary
displays as a sheet.


625
00:39:54,192 --> 00:39:57,061 line:-1
Scroll down.
[CLICKING]


626
00:39:57.061 --> 00:39:59.998 line:-1 position:50%
Tap Done.


627
00:39:59,998 --> 00:40:03,568 line:-1
The sheet is dismissed
and the StartView is displayed.


628
00:40:03,568 --> 00:40:05,670 line:-1
Let’s get our MetricsView
and SummaryView


629
00:40:05.670 --> 00:40:07.905 line:-1 position:50%
to show actual workout metrics.


630
00:40:07.905 --> 00:40:11.242 line:-1 position:50%
WorkoutManager will expose
published workout metrics


631
00:40:11,242 --> 00:40:14,512 line:-1
that MetricsView
and SummaryView can observe.


632
00:40:14,512 --> 00:40:16,481 line:-1
Select WorkoutManager.


633
00:40:20.685 --> 00:40:25.156 line:-1 position:50%
Let’s add the Published metric
variables to WorkoutManager.


634
00:40:32.430 --> 00:40:35.667 line:-1 position:50%
averageHeartRate will be used
by SummaryView.


635
00:40:35.667 --> 00:40:39.037 line:-1 position:50%
heartRate, activeEnergy,
and distance will be observed


636
00:40:39.037 --> 00:40:41.806 line:-1 position:50%
by MetricsView.


637
00:40:41,806 --> 00:40:44,409 line:-1
WorkoutManager needs
to observe workout samples


638
00:40:44,409 --> 00:40:48,780 line:-1
added to the builder by being an
HKLiveWorkoutBuilderDelegate.


639
00:40:48.780 --> 00:40:50.248 line:-1 position:50%
Let’s do this now.


640
00:40:50.248 --> 00:40:52.216 line:-1 position:50%
First, let’s assign
the builder’s delegate


641
00:40:52.216 --> 00:40:54.218 line:-1 position:50%
as WorkoutManager.


642
00:40:59.624 --> 00:41:01.492 line:-1 position:50%
Now let’s make WorkoutManager


643
00:41:01.492 --> 00:41:05.897 line:-1 position:50%
conform to the HKLiveWorkout
BuilderDelegate protocol.


644
00:41:14,339 --> 00:41:15,873 line:-1
We’ve extended WorkoutManager


645
00:41:15.873 --> 00:41:20.678 line:-1 position:50%
to conform to the HKLiveWorkout
BuilderDelegate protocol.


646
00:41:21,846 --> 00:41:24,248 line:-1
workoutBuilderDidCollectEvent
is called


647
00:41:24,248 --> 00:41:26,284 line:-1
whenever the builder
collects an event.


648
00:41:26,284 --> 00:41:29,287 line:-1
We will leave this function
empty for our app.


649
00:41:32.357 --> 00:41:35.593 line:-1 position:50%
workoutBuilder didCollectDataOf
collectedTypes


650
00:41:35,593 --> 00:41:40,865 line:-1
is called whenever the builder
collects new samples.


651
00:41:42.367 --> 00:41:45.970 line:-1 position:50%
We will iterate over each type
in collectedTypes.


652
00:41:45,970 --> 00:41:49,307 line:-1
The guard ensures the collected
type is an HKQuantityType.


653
00:41:49,307 --> 00:41:52,744 line:-1
Statistics are read from the
builder for that quantity type.


654
00:41:52.744 --> 00:41:54.145 line:-1 position:50%
updateForStatistics --


655
00:41:54.145 --> 00:41:56.080 line:-1 position:50%
a function we will
create shortly --


656
00:41:56.080 --> 00:42:00.118 line:-1 position:50%
will be called, which updates
the published metric values.


657
00:42:00.118 --> 00:42:03.755 line:-1 position:50%
Let’s create the
updateForStatistics function.


658
00:42:13.698 --> 00:42:18.202 line:-1 position:50%
updateForStatistics takes
an optional HKStatistics object.


659
00:42:18,202 --> 00:42:22,707 line:-1
A guard early returns
if statistics is nil.


660
00:42:25,910 --> 00:42:28,045 line:-1
Dispatch the metric updates
asynchronously


661
00:42:28,045 --> 00:42:29,614 line:-1
to the main queue.


662
00:42:29,614 --> 00:42:31,916 line:-1
Switch through
each quantity type.


663
00:42:31,916 --> 00:42:34,452 line:-1
For heartRate,
we want beats per minute,


664
00:42:34,452 --> 00:42:38,589 line:-1
so we use a count HKUnit
divided by a minute HKUnit.


665
00:42:38,589 --> 00:42:41,225 line:-1
Assign heartRate as
the mostRrecentQuantity’s


666
00:42:41.225 --> 00:42:44.195 line:-1 position:50%
doubleValue for
beats per minute.


667
00:42:44.195 --> 00:42:47.598 line:-1 position:50%
Assign averageHeartRate
as statistics.averageQuantity’s


668
00:42:47,598 --> 00:42:51,135 line:-1
doubleValue for
beats per minute.


669
00:42:53.971 --> 00:42:56.407 line:-1 position:50%
For the activeEnergyBurned
quantityType,


670
00:42:56.407 --> 00:42:59.177 line:-1 position:50%
use the kilocalorie energyUnit.


671
00:42:59.177 --> 00:43:02.613 line:-1 position:50%
Assign activeEnergy as
the sumQuantity’s doubleValue


672
00:43:02.613 --> 00:43:04.449 line:-1 position:50%
for the energyUnit.


673
00:43:08,619 --> 00:43:10,955 position:50%
For walking, running,
and cycling distance


674
00:43:10,955 --> 00:43:14,859 line:0
get the sumQuantity’s
doubleValue for meterUnit.


675
00:43:14,859 --> 00:43:18,229 line:0
Now let’s have MetricsView
use metric values


676
00:43:18,229 --> 00:43:19,864 line:0
from the WorkoutManager.


677
00:43:19,864 --> 00:43:21,599 position:50%
Select MetricsView.


678
00:43:25.303 --> 00:43:28.439 line:-1 position:50%
Add workoutManager
as an Environment variable.


679
00:43:32,243 --> 00:43:34,445 line:-1
Let's update our views
to use metric values


680
00:43:34,445 --> 00:43:37,148 line:-1
from WorkoutManager.


681
00:43:56.434 --> 00:43:57.802 line:-1 position:50%
The ElapsedTimeView


682
00:43:57.802 --> 00:44:02.306 line:-1 position:50%
uses the workoutManager’s
builder’s elapsedTime.


683
00:44:04.709 --> 00:44:06.978 line:-1 position:50%
The activeEnergy
Text view’s Measurement


684
00:44:06,978 --> 00:44:10,848 line:-1
uses workoutManager’s
activeEnergy.


685
00:44:14.986 --> 00:44:19.590 line:-1 position:50%
The heartRate Text view uses
workoutManager’s heartRate.


686
00:44:22.693 --> 00:44:24.529 line:-1 position:50%
The distance text view’s
Measurement


687
00:44:24,529 --> 00:44:27,231 line:-1
uses workoutManager’s distance.


688
00:44:31,802 --> 00:44:34,539 line:-1
The builder’s elapsed
time variable isn’t published,


689
00:44:34.539 --> 00:44:36.274 line:-1 position:50%
so our view currently
will not update


690
00:44:36.274 --> 00:44:38.509 line:-1 position:50%
when builder’s
elapsedTime updates.


691
00:44:38,509 --> 00:44:42,980 line:-1
What we can do is wrap
the VStack in a TimelineView.


692
00:44:46,017 --> 00:44:48,219 position:50%
TimelineView is new this year.


693
00:44:48,219 --> 00:44:52,590 position:50%
A TimelineView updates over time
in line with its schedule.


694
00:44:52,590 --> 00:44:56,193 position:50%
watchOS apps now support
Always On state.


695
00:44:56,193 --> 00:44:58,429 position:50%
TimelineViews make
our view aware of changes


696
00:44:58,429 --> 00:45:00,631 position:50%
to the Always On context.


697
00:45:00,631 --> 00:45:03,901 position:50%
To learn more, check out
the “What’s new in watchOS 8”


698
00:45:03,901 --> 00:45:08,439 line:0
and "What's new in SwiftUI"
sessions.


699
00:45:08,439 --> 00:45:13,110 position:50%
Apps can be in either
active state or Always On state.


700
00:45:13,110 --> 00:45:16,647 position:50%
Apps with active workout
sessions can update, at most,


701
00:45:16,647 --> 00:45:19,951 line:0
once every second
in Always On state.


702
00:45:19,951 --> 00:45:23,387 line:0
This means the MetricsView
needs to hide subseconds


703
00:45:23,387 --> 00:45:25,423 line:0
in Always On state.


704
00:45:25,423 --> 00:45:27,325 position:50%
Other design considerations
should be made


705
00:45:27,325 --> 00:45:28,826 position:50%
for Always On state,


706
00:45:28,826 --> 00:45:31,028 position:50%
such as hiding the page
indicator controls


707
00:45:31,028 --> 00:45:33,631 position:50%
to simplify the view.


708
00:45:33,631 --> 00:45:37,301 position:50%
Our TimelineView needs
a custom TimelineSchedule


709
00:45:37,301 --> 00:45:40,538 position:50%
that changes its interval based
on the TimelineScheduleMode


710
00:45:40,538 --> 00:45:43,074 position:50%
dictated by
the Always On context.


711
00:45:43,074 --> 00:45:46,077 position:50%
Let’s create our custom
TimelineSchedule.


712
00:45:58.389 --> 00:46:00.758 line:-1 position:50%
MetricsTimelineSchedule
has a startDate


713
00:46:00,758 --> 00:46:02,727 line:-1
for when the schedule
should start.


714
00:46:02,727 --> 00:46:05,429 line:-1
Its initializer
takes a startDate.


715
00:46:09,233 --> 00:46:10,635 position:50%
MetricsTimelineSchedule


716
00:46:10,635 --> 00:46:12,670 line:0
implements the entries function
to produce


717
00:46:12,670 --> 00:46:14,939 position:50%
PeriodicTimelineSchedule
entries.


718
00:46:14,939 --> 00:46:17,475 position:50%
The function creates
a PeriodicTimelineSchedule


719
00:46:17,475 --> 00:46:19,644 position:50%
using the startDate.


720
00:46:19,644 --> 00:46:22,847 position:50%
The interval is determined
by the TimelineScheduleMode.


721
00:46:22,847 --> 00:46:25,483 position:50%
When the TimelineScheduleMode
is lowFrequency,


722
00:46:25,483 --> 00:46:28,519 line:0
the TimelineSchedule
interval is one second.


723
00:46:28,519 --> 00:46:31,022 position:50%
When the TimelineScheduleMode
is normal,


724
00:46:31,022 --> 00:46:33,758 position:50%
the interval is 30 times
per second.


725
00:46:33,758 --> 00:46:37,261 position:50%
Let’s wrap our VStack
in a TimelineView.


726
00:46:47,838 --> 00:46:50,841 line:-1
The TimelineView uses
our MetricsTimelineSchedule,


727
00:46:50,841 --> 00:46:55,546 line:-1
using the builder’s startDate.


728
00:46:55,546 --> 00:46:58,482 line:0
ElapsedTimeView’s
showSubseconds is determined


729
00:46:58,482 --> 00:47:01,252 line:0
by the TimelineView’s
context.cadence.


730
00:47:01,252 --> 00:47:04,221 position:50%
When cadence is live,
subseconds are shown.


731
00:47:04,221 --> 00:47:08,259 position:50%
Otherwise subseconds are hidden
in Always On state.


732
00:47:08,259 --> 00:47:10,695 line:0
Let’s run our application
to see the metrics


733
00:47:10,695 --> 00:47:12,963 line:0
updating during the workout.


734
00:47:12,963 --> 00:47:16,467 position:50%
Click Stop to stop
the current run.


735
00:47:16,467 --> 00:47:18,469 position:50%
Click Run.


736
00:47:22.973 --> 00:47:26.143 line:-1 position:50%
Tap the Run workout.


737
00:47:26.877 --> 00:47:29.513 line:-1 position:50%
Notice that elapsed time
is incrementing.


738
00:47:29.513 --> 00:47:31.348 line:-1 position:50%
The watchOS simulator
automatically


739
00:47:31,348 --> 00:47:34,719 line:-1
simulates collecting live
workout samples for you.


740
00:47:34,719 --> 00:47:36,353 line:-1
Calories are accruing.


741
00:47:36.353 --> 00:47:37.922 line:-1 position:50%
Heart rate is updating.


742
00:47:37.922 --> 00:47:40.057 line:-1 position:50%
Distance is accumulating.


743
00:47:40,057 --> 00:47:42,893 line:-1
Let’s try the Always On state
by clicking the Lock button


744
00:47:42.893 --> 00:47:44.662 line:-1 position:50%
on the simulator.


745
00:47:46.464 --> 00:47:48.966 line:-1 position:50%
Notice subseconds are hidden
and metrics update


746
00:47:48,966 --> 00:47:52,570 line:-1
only once per second.


747
00:47:52,570 --> 00:47:55,973 line:-1
Click the Unlock button
to return to active state.


748
00:47:55,973 --> 00:47:56,974 line:-1
[CLICKING]


749
00:47:58,275 --> 00:48:00,978 line:-1
Swipe left and end the workout.


750
00:48:00.978 --> 00:48:04.749 line:-1 position:50%
[CLICKING]


751
00:48:04.749 --> 00:48:08.052 line:-1 position:50%
The SummaryView still needs
the actual HKWorkout values.


752
00:48:08.052 --> 00:48:10.020 line:-1 position:50%
Let’s do this now.


753
00:48:10,020 --> 00:48:13,557 line:-1
First, let’s add the HKWorkout
to the WorkoutManager


754
00:48:13.557 --> 00:48:15.359 line:-1 position:50%
to be used in the SummaryView.


755
00:48:15.359 --> 00:48:17.695 line:-1 position:50%
Select WorkoutManager.


756
00:48:17.695 --> 00:48:22.466 line:-1 position:50%
[CLICKING]


757
00:48:22.466 --> 00:48:26.137 line:-1 position:50%
Add a HKWorkout
Published variable.


758
00:48:30.775 --> 00:48:32.977 line:-1 position:50%
When the builder has finished
saving the workout,


759
00:48:32.977 --> 00:48:35.012 line:-1 position:50%
assign the workout
to WorkoutManager


760
00:48:35,012 --> 00:48:39,016 line:-1
when builder’s finishWorkout
function completes.


761
00:48:48,659 --> 00:48:52,797 position:50%
We do this assignment on
the main queue for UI updates.


762
00:48:52,797 --> 00:48:56,167 position:50%
When the SummaryView dismisses,
we need to reset our model.


763
00:48:56,167 --> 00:49:00,171 position:50%
Let’s create a resetWorkout
function that does this.


764
00:49:09,513 --> 00:49:12,550 line:0
The resetWorkout function resets
all of our model variables


765
00:49:12,550 --> 00:49:15,286 position:50%
back to an initial state.


766
00:49:15,286 --> 00:49:18,789 line:0
Let’s call resetWorkout
when the summary dismisses.


767
00:49:18,789 --> 00:49:22,793 position:50%
This is done in the didSet
of showingSummaryView.


768
00:49:32,570 --> 00:49:35,773 line:-1
Let’s display a progress view
when the workout ends,


769
00:49:35,773 --> 00:49:37,408 line:-1
while the workout is saving,


770
00:49:37,408 --> 00:49:39,844 line:-1
before displaying
the SummaryView.


771
00:49:39,844 --> 00:49:42,112 line:-1
Let’s go to our SummaryView.


772
00:49:42,112 --> 00:49:44,481 line:-1
Click SummaryView.


773
00:49:46.083 --> 00:49:49.019 line:-1 position:50%
First, add the workoutManager
EnvironmentObject


774
00:49:49.019 --> 00:49:51.488 line:-1 position:50%
to SummaryView.


775
00:49:56,060 --> 00:49:58,095 line:-1
We want to display
the ProgressView


776
00:49:58,095 --> 00:50:01,232 line:-1
until workoutManager has
the HKWorkout assigned


777
00:50:01,232 --> 00:50:04,768 line:-1
when the builder finishes
saving the workout.


778
00:50:16.146 --> 00:50:18.382 line:-1 position:50%
If workoutManager’s
workout is nil,


779
00:50:18.382 --> 00:50:20.117 line:-1 position:50%
then display the ProgressView


780
00:50:20,117 --> 00:50:22,453 line:-1
with the text showing
“Saving workout”,


781
00:50:22.453 --> 00:50:25.522 line:-1 position:50%
and hide the navigation bar.


782
00:50:30.895 --> 00:50:33.063 line:-1 position:50%
We've also updated
ActivityRingsView


783
00:50:33,063 --> 00:50:35,766 line:-1
to use workoutManager’s
HKHealthStore.


784
00:50:35.766 --> 00:50:39.403 line:-1 position:50%
You only need a single
HKHealthStore per app.


785
00:50:39.403 --> 00:50:41.372 line:-1 position:50%
Let’s update
our SummaryMetricViews


786
00:50:41.372 --> 00:50:45.009 line:-1 position:50%
to use the HKWorkout values.


787
00:50:58,756 --> 00:51:04,461 line:-1
The Total Time metric view
uses the workout duration.


788
00:51:06.463 --> 00:51:08.065 line:-1 position:50%
The totalDistance metric view


789
00:51:08,065 --> 00:51:10,801 line:-1
uses the workout’s
total distance.


790
00:51:14.471 --> 00:51:16.040 line:-1 position:50%
The Total Energy metric view


791
00:51:16.040 --> 00:51:19.610 line:-1 position:50%
uses the workout’s
totalEnergyBurned.


792
00:51:23,414 --> 00:51:24,982 line:-1
The Average Heart Rate
metric view


793
00:51:24,982 --> 00:51:27,851 line:-1
uses the workoutManager’s
averageHeartRate.


794
00:51:27,851 --> 00:51:30,554 line:-1
If you want to save
average heart rate for later,


795
00:51:30,554 --> 00:51:32,489 line:-1
you can add it as metadata
to the builder


796
00:51:32,489 --> 00:51:34,792 line:-1
before saving the workout.


797
00:51:34,792 --> 00:51:36,760 line:-1
Let’s update
our SessionPagingView


798
00:51:36,760 --> 00:51:38,696 line:-1
to react to Always On state.


799
00:51:38,696 --> 00:51:41,632 line:-1
Select SessionPagingView.


800
00:51:43,600 --> 00:51:47,805 line:-1
Add the isLuminanceReduced
Environment variable.


801
00:51:51.976 --> 00:51:53.210 line:-1 position:50%
During Always On state,


802
00:51:53,210 --> 00:51:55,479 line:-1
we want to hide the TabView’s
page indicator


803
00:51:55.479 --> 00:51:59.984 line:-1 position:50%
and ensure the MetricsView
is displayed.


804
00:52:05.923 --> 00:52:08.892 line:-1 position:50%
We’ve set the tabViewStyle's
indexDisplayMode


805
00:52:08,892 --> 00:52:13,597 line:-1
to either never or automatic,
based on isLuminanceReduced.


806
00:52:13,597 --> 00:52:15,933 line:0
When isLuminanceReduced
changes,


807
00:52:15,933 --> 00:52:18,235 position:50%
call the displayMetricsView
function


808
00:52:18,235 --> 00:52:20,204 line:0
to display the MetricsView.


809
00:52:20,204 --> 00:52:23,107 position:50%
Let’s run our app
in the simulator and try it out.


810
00:52:23,107 --> 00:52:26,710 position:50%
Click Stop to stop the last run.


811
00:52:26,710 --> 00:52:28,545 line:0
Click Run.


812
00:52:34.251 --> 00:52:38.188 line:-1 position:50%
Select the Run workout.


813
00:52:38.188 --> 00:52:41.725 line:-1 position:50%
Notice metrics are updating live
from the builder.


814
00:52:41,725 --> 00:52:45,662 line:-1
Swipe left.
Tap Pause.


815
00:52:45.662 --> 00:52:47.498 line:-1 position:50%
Notice metrics have
stopped updating,


816
00:52:47.498 --> 00:52:49.366 line:-1 position:50%
because the workout is paused.


817
00:52:49,366 --> 00:52:54,004 line:-1
Swipe left.
Tap Resume.


818
00:52:54.004 --> 00:52:57.574 line:-1 position:50%
Metrics resume updating.


819
00:52:57.574 --> 00:53:00.444 line:-1 position:50%
Swipe right,
see the NowPlayingView.


820
00:53:00,444 --> 00:53:03,647 line:-1
Swipe left.


821
00:53:03.647 --> 00:53:07.785 line:-1 position:50%
Click Lock to trigger
the Always On state.


822
00:53:07.785 --> 00:53:09.219 line:-1 position:50%
Notice subseconds are hidden


823
00:53:09,219 --> 00:53:11,822 line:-1
and page control indicators
are hidden.


824
00:53:11,822 --> 00:53:14,191 line:-1
Click Unlock to resume
active state.


825
00:53:16,193 --> 00:53:17,694 line:-1
Swipe left, tap End.


826
00:53:20.697 --> 00:53:23.333 line:-1 position:50%
The workout saves.


827
00:53:23,333 --> 00:53:25,235 line:-1
The summary is displayed.


828
00:53:25,235 --> 00:53:27,037 line:-1
Scroll down to view
each of the metrics.


829
00:53:27.037 --> 00:53:31.642 line:-1 position:50%
[CLICKING]


830
00:53:31,642 --> 00:53:34,511 line:-1
Activity Rings will populate
based on the amount of energy,


831
00:53:34.511 --> 00:53:37.181 line:-1 position:50%
exercise minutes,
and stand hours.


832
00:53:37.181 --> 00:53:38.115 line:-1 position:50%
Tap Done.


833
00:53:38.115 --> 00:53:40.284 line:-1 position:50%
[CLICKING]


834
00:53:40.284 --> 00:53:42.052 line:-1 position:50%
We are taken back
to the start view,


835
00:53:42,052 --> 00:53:44,655 line:-1
ready for our next workout.


836
00:53:48.792 --> 00:53:51.829 line:-1 position:50%
You saw how easy it is
to use SwiftUI


837
00:53:51,829 --> 00:53:54,231 line:-1
to implement a fully functioning
workout app


838
00:53:54,231 --> 00:53:58,202 line:-1
integrated with HealthKit that
supports the Always On state.


839
00:53:58.202 --> 00:54:01.438 line:-1 position:50%
We can’t wait to see what great
workout apps you’ll build next!


840
00:54:01,438 --> 00:54:06,577 align:right line:0 position:90%
♪

