2
00:00:00.234 --> 00:00:02.035 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,035 --> 00:00:05,439 line:-1
♪ Bass music playing ♪


4
00:00:05.439 --> 00:00:06.640 line:-1 position:50%
[KEYSTROKES]


5
00:00:06,640 --> 00:00:09,243 line:0 align:right position:90%
♪


6
00:00:09.243 --> 00:00:10.344 line:-1 position:50%
Tanu Singhal: Hello, everyone.


7
00:00:10.344 --> 00:00:12.980 line:-1 position:50%
My name is Tanu,
and I'm a SwiftUI engineer


8
00:00:12,980 --> 00:00:15,048 line:-1
on the Apple TV team.


9
00:00:15.048 --> 00:00:17.017 line:-1 position:50%
Today, we'll talk about
some new ways


10
00:00:17.017 --> 00:00:21.088 line:-1 position:50%
of working with focus
in SwiftUI.


11
00:00:21.088 --> 00:00:22.956 line:-1 position:50%
One of the great things
about SwiftUI


12
00:00:22.956 --> 00:00:25.425 line:-1 position:50%
is how much functionality
you get for free,


13
00:00:25.425 --> 00:00:27.361 line:-1 position:50%
right out of the box.


14
00:00:27,361 --> 00:00:29,963 line:-1
Built-in components
base their default behavior


15
00:00:29,963 --> 00:00:32,933 line:-1
on SwiftUI's knowledge
of platform conventions,


16
00:00:32,933 --> 00:00:34,968 line:-1
resulting in
an overall experience


17
00:00:34,968 --> 00:00:38,939 line:-1
that is sensible and familiar
in various contexts.


18
00:00:38.939 --> 00:00:44.511 line:-1 position:50%
We see this intelligence
at work when we look at focus.


19
00:00:44.511 --> 00:00:46.613 line:-1 position:50%
Focus is the system
that lets your app


20
00:00:46.613 --> 00:00:50.751 line:-1 position:50%
take input from keyboards,
remotes, game controllers,


21
00:00:50.751 --> 00:00:54.221 line:-1 position:50%
accessible switch controls,
and other sources that --


22
00:00:54.221 --> 00:00:55.622 line:-1 position:50%
unlike touch inputs --


23
00:00:55.622 --> 00:01:00.260 line:-1 position:50%
are not tied to specific
screen coordinates.


24
00:01:00,260 --> 00:01:03,964 line:-1
Often, the focus view is drawn
with special embellishments,


25
00:01:03,964 --> 00:01:06,166 line:-1
making it easy
for people to predict


26
00:01:06.166 --> 00:01:09.870 line:-1 position:50%
where their input
will be directed.


27
00:01:09.870 --> 00:01:14.174 line:-1 position:50%
For the most part, SwiftUI
manages focus on your behalf.


28
00:01:14,174 --> 00:01:15,976 line:-1
When someone clicks
in a text field


29
00:01:15.976 --> 00:01:17.611 line:-1 position:50%
or presses the Tab key


30
00:01:17,611 --> 00:01:20,347 line:-1
or when someone taps
an adjustable watch complication


31
00:01:20,347 --> 00:01:22,482 line:-1
or swipes on the Siri Remote,


32
00:01:22,482 --> 00:01:25,619 line:-1
SwiftUI decides
how focus is affected


33
00:01:25.619 --> 00:01:29.222 line:-1 position:50%
and how its next placement
is indicated.


34
00:01:29.222 --> 00:01:31.158 line:-1 position:50%
This is great for simple cases


35
00:01:31,158 --> 00:01:35,295 line:-1
where the right behavior
can be decided by convention.


36
00:01:35.295 --> 00:01:38.398 line:-1 position:50%
There are, however,
some cases where you may want


37
00:01:38.398 --> 00:01:43.537 line:-1 position:50%
a more accelerated experience
around focus.


38
00:01:43.537 --> 00:01:45.906 line:-1 position:50%
In this example
from the Notes app,


39
00:01:45,906 --> 00:01:48,241 line:-1
when we select
the new note button,


40
00:01:48,241 --> 00:01:52,713 line:-1
we want focus to automatically
move to the newly created note.


41
00:01:52,713 --> 00:01:58,452 line:-1
This type of behavior certainly
requires custom implementation.


42
00:01:58,452 --> 00:02:01,855 line:-1
Over here, we have a scenario
in which we want to move focus


43
00:02:01,855 --> 00:02:04,157 line:-1
from a button
on the bottom-left side


44
00:02:04.157 --> 00:02:06.493 line:-1 position:50%
to content near
the top of the screen


45
00:02:06.493 --> 00:02:09.429 line:-1 position:50%
when a user swipes right
on the remote.


46
00:02:09,429 --> 00:02:11,531 line:-1
Since the Music button
and the App tiles


47
00:02:11,531 --> 00:02:13,934 line:-1
are not adjacent to each other,


48
00:02:13,934 --> 00:02:18,071 line:-1
SwiftUI cannot automatically
guess where to move focus.


49
00:02:18,071 --> 00:02:19,239 line:-1
It needs more information


50
00:02:19,239 --> 00:02:23,276 line:-1
before distant focus targets
can be linked.


51
00:02:23.276 --> 00:02:25.345 line:-1 position:50%
And in this example from iOS,


52
00:02:25,345 --> 00:02:27,781 line:-1
we simply want the keyboard
to go away


53
00:02:27.781 --> 00:02:30.317 line:-1 position:50%
when a user selects an event.


54
00:02:30,317 --> 00:02:33,387 line:-1
Thanks to new APIs
we're introducing this year,


55
00:02:33,387 --> 00:02:36,690 line:-1
you can now do all of this
in SwiftUI.


56
00:02:36.690 --> 00:02:40.927 line:-1 position:50%
In this talk, we will focus on
two kinds of use cases.


57
00:02:40,927 --> 00:02:44,364 line:-1
We'll see how we can move focus
to a particular view


58
00:02:44.364 --> 00:02:46.600 line:-1 position:50%
without any direct input,


59
00:02:46.600 --> 00:02:50.604 line:-1 position:50%
and we'll make large navigation
targets out of small views


60
00:02:50.604 --> 00:02:54.307 line:-1 position:50%
so that nothing is
out of the user's reach.


61
00:02:54.307 --> 00:02:58.045 line:-1 position:50%
Let's first look an example
where we may want to move focus


62
00:02:58,045 --> 00:03:01,381 line:-1
to help direct
the user's attention.


63
00:03:01.381 --> 00:03:03.483 line:-1 position:50%
We're so ready
to go on a vacation,


64
00:03:03.483 --> 00:03:06.453 line:-1 position:50%
and we've started working on
a vacation planner app.


65
00:03:06.453 --> 00:03:09.689 line:-1 position:50%
This app works across
all Apple platforms,


66
00:03:09,689 --> 00:03:12,025 line:-1
and it allows you
to browse destinations


67
00:03:12,025 --> 00:03:14,194 line:-1
as well as book trips.


68
00:03:14,194 --> 00:03:17,497 line:-1
When you launch this app,
we present an email field,


69
00:03:17.497 --> 00:03:20.467 line:-1 position:50%
a password field,
and a Sign in with Apple button


70
00:03:20.467 --> 00:03:23.403 line:-1 position:50%
so you can log
into your account.


71
00:03:23.403 --> 00:03:26.907 line:-1 position:50%
On this login screen, if we
discover that the email entered


72
00:03:26.907 --> 00:03:29.142 line:-1 position:50%
was not in the correct format,


73
00:03:29,142 --> 00:03:33,613 line:-1
we want to programmatically move
focus back to the email field.


74
00:03:33.613 --> 00:03:35.282 line:-1 position:50%
To accomplish this behavior,


75
00:03:35.282 --> 00:03:38.652 line:-1 position:50%
we'll use the FocusState APIs.


76
00:03:38,652 --> 00:03:40,921 line:-1
The existing code
for our login view


77
00:03:40.921 --> 00:03:46.860 line:-1 position:50%
contains a VStack that has
a TextField and a SecureField.


78
00:03:46,860 --> 00:03:50,897 line:-1
Now, we'll add a FocusState
property wrapper to this view.


79
00:03:50,897 --> 00:03:55,235 line:-1
FocusState is a new API that
we have introduced this year!


80
00:03:55,235 --> 00:03:57,804 line:-1
This is a special type of state
that changes


81
00:03:57.804 --> 00:04:01.308 line:-1 position:50%
depending on the current
location of focus.


82
00:04:01,308 --> 00:04:03,877 line:-1
We'll use FocusState
to hold an identifier


83
00:04:03.877 --> 00:04:06.046 line:-1 position:50%
for the field that is focused.


84
00:04:06,046 --> 00:04:09,216 line:-1
The focusedField variable is of
an enum type that we created


85
00:04:09,216 --> 00:04:10,884 line:-1
for this example.


86
00:04:10,884 --> 00:04:12,652 line:-1
You can use strings, integers,


87
00:04:12,652 --> 00:04:17,224 line:-1
or any other hashable value type
for FocusState.


88
00:04:17.224 --> 00:04:20.760 line:-1 position:50%
Note that the FocusState
value is optional.


89
00:04:20,760 --> 00:04:23,597 line:-1
In general,
types used for FocusState


90
00:04:23,597 --> 00:04:26,266 line:-1
must be both hashable
and optional,


91
00:04:26,266 --> 00:04:28,635 line:-1
with nil used for cases
where focus


92
00:04:28,635 --> 00:04:32,572 line:-1
is in an unrelated
part of the screen.


93
00:04:32,572 --> 00:04:35,108 line:-1
Next we'll add
a focused modifier


94
00:04:35.108 --> 00:04:38.078 line:-1 position:50%
to the TextField
and the SecureField.


95
00:04:38,078 --> 00:04:41,448 line:-1
Also new this year,
this modifier creates a link


96
00:04:41,448 --> 00:04:43,383 line:-1
between the placement of focus


97
00:04:43.383 --> 00:04:46.820 line:-1 position:50%
and the value of
the focusedField property.


98
00:04:46,820 --> 00:04:49,222 line:-1
This simple link
is a powerful tool,


99
00:04:49,222 --> 00:04:52,692 line:-1
because it means you can use
the current placement of focus


100
00:04:52,692 --> 00:04:55,996 line:-1
for making other decisions
in your app.


101
00:04:55.996 --> 00:04:59.432 line:-1 position:50%
We can watch that play out
in our login form.


102
00:04:59.432 --> 00:05:02.969 line:-1 position:50%
When the screen first appears,
nothing has focus,


103
00:05:02.969 --> 00:05:06.740 line:-1 position:50%
so the value of focusedField
is nil.


104
00:05:06.740 --> 00:05:09.809 line:-1 position:50%
But if someone then taps
on the email text field,


105
00:05:09.809 --> 00:05:14.915 line:-1 position:50%
that field gains focus
and the keyboard appears.


106
00:05:14.915 --> 00:05:19.152 line:-1 position:50%
Since the focused text field is
bound to a FocusState value,


107
00:05:19.152 --> 00:05:23.123 line:-1 position:50%
the value of focusedField
will automatically be updated


108
00:05:23.123 --> 00:05:27.127 line:-1 position:50%
to hold the identifier
for the email text field.


109
00:05:27.127 --> 00:05:31.565 line:-1 position:50%
The link between focus placement
and FocusState works both ways.


110
00:05:31,565 --> 00:05:33,333 line:-1
This means
that we are not limited


111
00:05:33.333 --> 00:05:35.669 line:-1 position:50%
to reacting to focus changes;


112
00:05:35.669 --> 00:05:37.537 line:-1 position:50%
we can move focus
programmatically


113
00:05:37.537 --> 00:05:41.374 line:-1 position:50%
just by updating
our FocusState property.


114
00:05:41.374 --> 00:05:44.544 line:-1 position:50%
So for example, if we
programmatically set the value


115
00:05:44,544 --> 00:05:48,014 line:-1
of focusedField to .password,


116
00:05:48,014 --> 00:05:50,584 line:-1
SwiftUI will know
that our SecureField


117
00:05:50,584 --> 00:05:54,454 line:-1
is associated with
the new value we're setting


118
00:05:54.454 --> 00:05:58.858 line:-1 position:50%
and focus will automatically
move to the password field.


119
00:05:58,858 --> 00:06:01,261 line:-1
Now that our focus bindings
are in place,


120
00:06:01,261 --> 00:06:06,132 line:-1
we can put them to work.


121
00:06:06,132 --> 00:06:10,103 line:-1
In the Vacation Planner app,
when a user submits their data,


122
00:06:10.103 --> 00:06:11.938 line:-1 position:50%
we want to validate it.


123
00:06:11.938 --> 00:06:15.008 line:-1 position:50%
If the email is not
in the expected format,


124
00:06:15.008 --> 00:06:17.978 line:-1 position:50%
we set the focusedField
to email.


125
00:06:17.978 --> 00:06:21.248 line:-1 position:50%
This will send focus back
to the email text field,


126
00:06:21,248 --> 00:06:24,384 line:-1
if it's not there already.


127
00:06:24,384 --> 00:06:27,988 line:-1
Further, we'd like to highlight
the email field with a border


128
00:06:27,988 --> 00:06:30,357 line:-1
if the email was invalid.


129
00:06:30,357 --> 00:06:31,992 line:-1
We want this border to appear


130
00:06:31,992 --> 00:06:35,562 line:-1
only while focus
is on the email field.


131
00:06:35.562 --> 00:06:39.299 line:-1 position:50%
To do that, we can easily read
the value of focusedField


132
00:06:39.299 --> 00:06:42.669 line:-1 position:50%
when we create the border.


133
00:06:42.669 --> 00:06:45.138 line:-1 position:50%
Let's see how
this all comes together.


134
00:06:45,138 --> 00:06:48,708 line:-1
Note the email field doesn't
have a valid address.


135
00:06:48,708 --> 00:06:51,945 line:-1
Focus is currently
on the password field.


136
00:06:51,945 --> 00:06:55,548 line:-1
When we hit Go, the onSubmit
callback is triggered


137
00:06:55.548 --> 00:06:57.951 line:-1 position:50%
where the focusedField is set.


138
00:06:57,951 --> 00:07:01,688 line:-1
This causes the cursor to
move back to the email field.


139
00:07:01,688 --> 00:07:03,590 line:-1
While the email
field is focused,


140
00:07:03,590 --> 00:07:05,825 line:-1
we see the red border around it.


141
00:07:05.825 --> 00:07:09.496 line:-1 position:50%
However, once we move focus
away from the email field,


142
00:07:09,496 --> 00:07:13,667 line:-1
our focusedField is no longer
equal to the email identifier,


143
00:07:13.667 --> 00:07:17.437 line:-1 position:50%
and so the red border
disappears.


144
00:07:17.437 --> 00:07:20.674 line:-1 position:50%
In the scenario where
all the form data is valid,


145
00:07:20,674 --> 00:07:23,443 line:-1
we want to simply
dismiss the keyboard.


146
00:07:23,443 --> 00:07:24,744 line:-1
To dismiss the keyboard,


147
00:07:24.744 --> 00:07:28.148 line:-1 position:50%
we will set our
FocusState variable to nil.


148
00:07:28,148 --> 00:07:30,550 line:-1
Since the focusedField
is an optional,


149
00:07:30.550 --> 00:07:35.088 line:-1 position:50%
we use nil to indicate
that focus has left this view.


150
00:07:35.088 --> 00:07:39.459 line:-1 position:50%
In the video, notice that the
email address has been updated.


151
00:07:39.459 --> 00:07:43.063 line:-1 position:50%
This time when we submit,
the keyboard gets dismissed


152
00:07:43,063 --> 00:07:46,499 line:-1
since we have set
the FocusState variable to nil.


153
00:07:46,499 --> 00:07:48,101 line:-1
We've seen how it can be helpful


154
00:07:48.101 --> 00:07:50.136 line:-1 position:50%
to programmatically
control focus


155
00:07:50,136 --> 00:07:52,439 line:-1
when our app has text fields.


156
00:07:52.439 --> 00:07:56.109 line:-1 position:50%
However, FocusStates
are not just for text fields.


157
00:07:56,109 --> 00:07:58,812 line:-1
They can be used to
programmatically control focus


158
00:07:58,812 --> 00:08:05,585 line:-1
for any focusable view on iOS,
tvOS, watchOS, or macOS!


159
00:08:05.585 --> 00:08:08.021 line:-1 position:50%
In the next section,
we'll discuss the role


160
00:08:08,021 --> 00:08:11,691 line:-1
of focus-based navigation
in our apps.


161
00:08:11,691 --> 00:08:14,027 line:-1
Let's take a look
at the tvOS version


162
00:08:14.027 --> 00:08:16.296 line:-1 position:50%
of our Vacation Planner app.


163
00:08:16,296 --> 00:08:18,765 line:-1
We have leveraged
the extra space on TV


164
00:08:18,765 --> 00:08:20,934 line:-1
by adding photos
from some destinations


165
00:08:20.934 --> 00:08:23.703 line:-1 position:50%
that you may want to visit.


166
00:08:23,703 --> 00:08:25,138 position:50%
You can view more photos


167
00:08:25,138 --> 00:08:27,240 position:50%
by clicking the
Browse Photos button


168
00:08:27,240 --> 00:08:30,777 position:50%
even before you've logged in.


169
00:08:30,777 --> 00:08:34,514 line:-1
Notice that focus is initially
on the Email field.


170
00:08:34,514 --> 00:08:37,150 position:50%
If we swipe right
on the Siri Remote,


171
00:08:37,150 --> 00:08:40,854 line:0
we'd expect focus to move
to the Browse Photos button.


172
00:08:40,854 --> 00:08:44,424 position:50%
However, that doesn't work
by default.


173
00:08:44,424 --> 00:08:46,826 line:-1
This is because
directional focus navigation


174
00:08:46,826 --> 00:08:49,796 line:-1
is based on
adjacency relationships.


175
00:08:49,796 --> 00:08:53,666 line:-1
When swiping to move focus,
focus will only move if there is


176
00:08:53.666 --> 00:08:57.437 line:-1 position:50%
something adjacent and focusable
in the given direction.


177
00:08:57,437 --> 00:09:00,774 line:0
Take a look at the focusable
views in this app.


178
00:09:00,774 --> 00:09:02,809 line:0
Since there's no focusable view


179
00:09:02,809 --> 00:09:05,745 position:50%
adjacent to the login fields
on the left,


180
00:09:05,745 --> 00:09:09,115 line:0
the button on the bottom
is unreachable.


181
00:09:09,115 --> 00:09:10,817 position:50%
To make this screen navigable,


182
00:09:10,817 --> 00:09:14,120 line:0
we will extend the Browse
button's focusable area,


183
00:09:14,120 --> 00:09:17,590 line:0
so it becomes adjacent
to the login fields.


184
00:09:17,590 --> 00:09:21,227 position:50%
This is done using
the new FocusSections API.


185
00:09:21,227 --> 00:09:23,763 position:50%
Let's see how easy that is.


186
00:09:23.763 --> 00:09:25.799 line:-1 position:50%
Here we have
a simplified version


187
00:09:25,799 --> 00:09:29,035 line:-1
of the Vacation Planner code
for TV.


188
00:09:29.035 --> 00:09:32.005 line:-1 position:50%
It contains an HStack
with two VStacks;


189
00:09:32.005 --> 00:09:33.673 line:-1 position:50%
one for the login fields,


190
00:09:33,673 --> 00:09:37,477 line:-1
and another VStack
for the image and the button.


191
00:09:37.477 --> 00:09:40.480 line:-1 position:50%
We want to create a larger
logical focus target


192
00:09:40,480 --> 00:09:42,849 line:-1
around the button
so focus can behave


193
00:09:42,849 --> 00:09:47,487 line:-1
as if the button was adjacent
to the login fields.


194
00:09:47,487 --> 00:09:51,024 line:-1
This can be done by simply
adding a focusSection() modifier


195
00:09:51.024 --> 00:09:54.828 line:-1 position:50%
to the VStack
that contains the button.


196
00:09:54,828 --> 00:09:57,931 line:-1
When focusSection() modifier
is added to any view,


197
00:09:57,931 --> 00:10:01,668 line:-1
the frame of that view becomes
capable of accepting focus


198
00:10:01,668 --> 00:10:05,905 line:-1
if it contains
any focusable subviews.


199
00:10:05.905 --> 00:10:09.175 line:-1 position:50%
Since we also want to move focus
back to the login fields


200
00:10:09.175 --> 00:10:11.611 line:-1 position:50%
when swiping left
on the button,


201
00:10:11,611 --> 00:10:16,616 line:-1
we'll add another focusSection()
modifier to the first VStack.


202
00:10:16,616 --> 00:10:19,886 position:50%
Now when we run this app,
users can move focus


203
00:10:19,886 --> 00:10:22,489 line:0
between the input fields
and the Browse button


204
00:10:22,489 --> 00:10:25,859 position:50%
by swiping left and right
on the remote.


205
00:10:25,859 --> 00:10:27,393 line:-1
As we wrap things up,


206
00:10:27,393 --> 00:10:29,829 line:-1
I'd encourage you
to think about focus,


207
00:10:29.829 --> 00:10:33.800 line:-1 position:50%
which can often look different
on different platforms.


208
00:10:33.800 --> 00:10:36.102 line:-1 position:50%
SwiftUI has great
default behaviors


209
00:10:36,102 --> 00:10:38,738 line:-1
built in for most cases.


210
00:10:38.738 --> 00:10:41.841 line:-1 position:50%
The new focus states
and FocusSections APIs


211
00:10:41,841 --> 00:10:43,710 line:-1
can help you
take advantage of focus


212
00:10:43.710 --> 00:10:47.447 line:-1 position:50%
to create even more
streamlined experiences.


213
00:10:47,447 --> 00:10:48,915 line:-1
As you work on your apps,


214
00:10:48,915 --> 00:10:51,518 line:-1
take a moment to observe
the many ways


215
00:10:51.518 --> 00:10:55.121 line:-1 position:50%
in which focus impacts
user behavior.


216
00:10:55.121 --> 00:10:57.724 line:-1 position:50%
We hope this session
has equipped you with the tools


217
00:10:57,724 --> 00:11:01,528 line:-1
that'll help users focus
on what's most important.


218
00:11:01,528 --> 00:11:04,564 line:-1
Thanks for watching,
and have an awesome WWDC!


219
00:11:04,564 --> 00:11:08,234 position:90% size:2% line:0
♪

