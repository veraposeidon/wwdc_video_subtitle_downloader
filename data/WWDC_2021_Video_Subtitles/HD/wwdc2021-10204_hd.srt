2
00:00:00.334 --> 00:00:03.337 line:-1
[upbeat music]


3
00:00:03.370 --> 00:00:09.009 line:-1
♪ ♪


4
00:00:09.042 --> 00:00:10.911 line:-1
[Balraj] Hi, my name is Balraj,


5
00:00:10.944 --> 00:00:13.647 line:-2
and I am an engineer
on the Xcode team.


6
00:00:13.680 --> 00:00:17.284 line:-2
Today, I would like to tell you
all about app distribution


7
00:00:17.317 --> 00:00:19.553 line:-1
in Xcode 13.


8
00:00:19.586 --> 00:00:23.257 line:-2
There are a variety of different
ways to distribute apps,


9
00:00:23.290 --> 00:00:24.925 line:-1
and today, I'll be discussing


10
00:00:24.958 --> 00:00:27.794 line:-2
how to upload apps
to App Store Connect,


11
00:00:27.828 --> 00:00:30.964 line:-2
distribution options
outside of App Store Connect,


12
00:00:30.998 --> 00:00:34.568 line:-2
and how to automate
distribution.


13
00:00:34.601 --> 00:00:38.138 line:-2
I will also be going over
new features we have added


14
00:00:38.172 --> 00:00:41.808 line:-2
in the distribution workflow
in Xcode 13,


15
00:00:41.842 --> 00:00:44.778 line:-2
so you will find the content
in this session valuable,


16
00:00:44.811 --> 00:00:47.414 line:-2
whether this is your first time
distributing an app


17
00:00:47.447 --> 00:00:49.416 line:-1
or hundredth.


18
00:00:49.449 --> 00:00:52.819 line:-2
Lately, I've been baking
quite a lot, so I felt inspired


19
00:00:52.853 --> 00:00:56.857 line:-2
to create an app to get
others started called Baker.


20
00:00:56.890 --> 00:00:59.026 line:-2
Baker will help people
make a variety


21
00:00:59.059 --> 00:01:02.663 line:-2
of different types of bread
and baked goods.


22
00:01:02.696 --> 00:01:06.466 line:-2
I recently completed the first
build of the Baker iOS app,


23
00:01:06.500 --> 00:01:09.403 line:-2
tested it extensively,
and want to distribute the app


24
00:01:09.436 --> 00:01:12.039 line:-1
to beta testers for feedback.


25
00:01:12.072 --> 00:01:14.641 line:-2
For beta testing,
I want my app to be available


26
00:01:14.675 --> 00:01:16.577 line:-2
on TestFlight,
which is a service


27
00:01:16.610 --> 00:01:20.981 line:-2
for distributing beta builds
of apps and getting feedback.


28
00:01:21.014 --> 00:01:24.484 line:-2
In order to make a build of
Baker available on TestFlight,


29
00:01:24.518 --> 00:01:28.188 line:-2
I will need to first upload
the build to App Store Connect.


30
00:01:29.256 --> 00:01:31.391 line:-2
App Store Connect is where
I can manage the builds


31
00:01:31.425 --> 00:01:33.894 line:-2
of Baker on TestFlight,
as well as configure


32
00:01:33.927 --> 00:01:36.196 line:-1
settings for my developer team.


33
00:01:36.230 --> 00:01:38.899 line:-2
App Store Connect is also
where I will manage


34
00:01:38,932 --> 00:01:41,401
builds of Baker
for the App Store.


35
00:01:41,435 --> 00:01:44,104
So whether I am intending
to make Baker available


36
00:01:44,137 --> 00:01:48,175
on TestFlight or the App Store,
I will need to first upload


37
00:01:48,208 --> 00:01:51,712
a build of Baker
to App Store Connect.


38
00:01:51,745 --> 00:01:54,781
I will upload my beta build
of Baker to App Store Connect


39
00:01:54,815 --> 00:01:56,083
right in Xcode,


40
00:01:56,116 --> 00:01:58,218
so the distribution
process starts


41
00:01:58,252 --> 00:02:00,921
right where I have been
developing my app.


42
00:02:00.954 --> 00:02:04.958 line:-2
Xcode 13 has some exciting
new changes in distribution


43
00:02:04.992 --> 00:02:08.161 line:-2
that allows me to upload Baker
without performing


44
00:02:08.195 --> 00:02:11.665 line:-2
any setup on App Store Connect
or my local machine.


45
00:02:12.766 --> 00:02:15.702 line:-2
The first new addition
in Xcode 13 is that you can


46
00:02:15.736 --> 00:02:20.440 line:-2
create an app record directly
in Xcode prior to uploading.


47
00:02:20.474 --> 00:02:23.677 line:-2
Next, Xcode can manage
your app's build number for you


48
00:02:23.710 --> 00:02:26.079 line:-1
during the distribution process.


49
00:02:26.113 --> 00:02:29.783 line:-2
And finally, with cloud signing,
certificates and private keys


50
00:02:29.816 --> 00:02:32.786 line:-2
will be stored in the cloud,
meaning you will no longer need


51
00:02:32.819 --> 00:02:36.323 line:-2
to manually set them up locally
when using automatic signing.


52
00:02:36.356 --> 00:02:38.825 line:-2
Let's take a look
at how this all works


53
00:02:38.859 --> 00:02:42.462 line:-2
by uploading the Baker app
to App Store Connect from Xcode.


54
00:02:42.496 --> 00:02:46.433 line:-2
I have the Baker project open,
ready to be uploaded.


55
00:02:46.466 --> 00:02:49.102 line:-2
The first thing I need
is a build of the Baker app


56
00:02:49.136 --> 00:02:51.471 line:-2
that can be processed
for distribution.


57
00:02:51.505 --> 00:02:54.107 line:-2
To perform this type of build,
I will first select


58
00:02:54.141 --> 00:02:57.744 line:-2
the Any iOS Device
run destination in the toolbar,


59
00:02:57.778 --> 00:03:01.782 line:-2
as I need to ensure Baker can be
ran on any supported iOS device.


60
00:03:03.717 --> 00:03:06.353 line:-2
I then will select Product
in the menu bar,


61
00:03:06.386 --> 00:03:08.622 line:-1
and click Archive.


62
00:03:08.655 --> 00:03:11.859 line:-2
An archive is
a developer-signed release build


63
00:03:11.892 --> 00:03:14.494 line:-2
of an application,
which contains metadata


64
00:03:14.528 --> 00:03:18.599 line:-2
about your app and team that
will be used when distributing.


65
00:03:18.632 --> 00:03:20.968 line:-2
After the archiving
operation is complete,


66
00:03:21.001 --> 00:03:24.471 line:-2
the Xcode organizer will
automatically appear.


67
00:03:24.505 --> 00:03:27.174 line:-2
The built archive
is automatically selected,


68
00:03:27.207 --> 00:03:30.143 line:-2
which is what I want to use
for distribution.


69
00:03:30.177 --> 00:03:33.080 line:-2
In the inspector on the right,
I can also see information


70
00:03:33.113 --> 00:03:37.017 line:-2
about the archive,
such as version, bundle ID,


71
00:03:37.050 --> 00:03:39.853 line:-2
team name,
as well as a big blue button


72
00:03:39.887 --> 00:03:42.956 line:-2
in the top right corner
for distribution.


73
00:03:42.990 --> 00:03:46.460 line:-2
In addition to storing archives,
the organizer is also where


74
00:03:46.493 --> 00:03:49.162 line:-2
I will be able to view
different app analytics


75
00:03:49.196 --> 00:03:52.232 line:-2
for all of my apps
such as crashes,


76
00:03:52.266 --> 00:03:56.236 line:-1
energy, insights, and metrics.


77
00:03:56.270 --> 00:03:59.339 line:-2
As Baker is being beta tested,
I will definitely be checking


78
00:03:59.373 --> 00:04:03.110 line:-2
back here to get insight
on how the app is running.


79
00:04:03.143 --> 00:04:04.978 line:-2
To get started
with distribution,


80
00:04:05.012 --> 00:04:07.181 line:-2
I'll use
the currently selected archive


81
00:04:07.214 --> 00:04:09.583 line:-2
and click
the Distribute App button.


82
00:04:10.951 --> 00:04:13.654 line:-2
The first step
of distribution is selecting


83
00:04:13.687 --> 00:04:16.323 line:-1
how I want to distribute Baker.


84
00:04:16.356 --> 00:04:18.625 line:-2
App Store Connect
is the default method,


85
00:04:18.659 --> 00:04:19.927 line:-1
and I'll leave that selected,


86
00:04:19.960 --> 00:04:22.663 line:-2
as this is where
I want to upload to.


87
00:04:22.696 --> 00:04:24.865 line:-2
There are a variety
of additional ways


88
00:04:24.898 --> 00:04:27.100 line:-2
to distribute your app
displayed in this window,


89
00:04:27.134 --> 00:04:29.436 line:-1
such as Ad Hoc and Enterprise,


90
00:04:29.469 --> 00:04:32.706 line:-2
and I'll go over these
in more detail later.


91
00:04:32.739 --> 00:04:35.209 line:-2
To continue uploading
to App Store Connect,


92
00:04:35.242 --> 00:04:38.111 line:-2
I will click Next
in the bottom right hand corner


93
00:04:38.145 --> 00:04:40.948 line:-1
of the distribution assistant.


94
00:04:40.981 --> 00:04:43.383 line:-2
I am then brought
to a step asking


95
00:04:43.417 --> 00:04:46.119 line:-2
whether I want to upload
or export.


96
00:04:46.153 --> 00:04:49.790 line:-2
Upload will take my archive,
sign and generate an IPA,


97
00:04:49.823 --> 00:04:52.392 line:-2
which is the format
of an app packaged for upload,


98
00:04:52.426 --> 00:04:54.394 line:-2
and send it
to App Store Connect,


99
00:04:54.428 --> 00:04:57.130 line:-2
while Export will
also build an IPA


100
00:04:57.164 --> 00:05:00.133 line:-2
and sign the content
in the exact same way.


101
00:05:00.167 --> 00:05:03.170 line:-2
The only difference
is that Xcode will not upload


102
00:05:03.203 --> 00:05:05.873 line:-2
the IPA to App Store Connect,
but rather move it


103
00:05:05.906 --> 00:05:08.775 line:-2
to a designated directory
on your machine.


104
00:05:08.809 --> 00:05:11.078 line:-2
This IPA can later be
submitted to the App Store


105
00:05:11.111 --> 00:05:13.313 line:-1
using Transporter.


106
00:05:13.347 --> 00:05:16.750 line:-2
As I wish to upload Baker
to App Store Connect right now,


107
00:05:16.783 --> 00:05:20.454 line:-2
I will leave Upload selected
and click Next to continue.


108
00:05:20.487 --> 00:05:23.090 line:-2
Xcode will now check
App Store Connect status


109
00:05:23.123 --> 00:05:26.960 line:-2
and perform a variety
of distribution setup steps.


110
00:05:26.994 --> 00:05:31.331 line:-2
New in Xcode 13, I am shown
a prompt to create an app record


111
00:05:31.365 --> 00:05:33.667 line:-2
on App Store Connect,
which is required


112
00:05:33.700 --> 00:05:37.104 line:-2
before we can upload
the actual build of Baker.


113
00:05:37.137 --> 00:05:39.973 line:-2
The app record creation step
provides default values


114
00:05:40.007 --> 00:05:42.910 line:-1
for properties like app name,


115
00:05:42.943 --> 00:05:45.646 line:-1
bundle ID, and primary language,


116
00:05:45.679 --> 00:05:49.149 line:-2
which are derived from the Baker
archive and system settings.


117
00:05:49.183 --> 00:05:51.285 line:-2
I am happy
with the default options,


118
00:05:51.318 --> 00:05:54.121 line:-1
so I will click Next.


119
00:05:54.154 --> 00:05:58.625 line:-2
Xcode now creates the required
app record on App Store Connect.


120
00:05:58.659 --> 00:06:00.894 line:-2
An app record
is where I can view


121
00:06:00.928 --> 00:06:03.230 line:-1
all the uploaded builds of Baker


122
00:06:03.263 --> 00:06:06.500 line:-2
and is where I can set up
TestFlight, in-app purchases,


123
00:06:06.533 --> 00:06:09.503 line:-2
pricing information,
and so much more.


124
00:06:09.536 --> 00:06:12.773 line:-2
The Baker app record is now
available on App Store Connect


125
00:06:12.806 --> 00:06:15.275 line:-2
and is visible
in my list of apps.


126
00:06:15.309 --> 00:06:17.744 line:-2
The newly created
Baker app record will be


127
00:06:17.778 --> 00:06:20.314 line:-2
where all the builds
of Baker will be managed,


128
00:06:20.347 --> 00:06:23.283 line:-2
so I won't have to create
a new app record again


129
00:06:23.317 --> 00:06:25.819 line:-2
when performing
subsequent uploads.


130
00:06:25.853 --> 00:06:28.989 line:-2
After Xcode has created
the Baker app record


131
00:06:29.022 --> 00:06:31.525 line:-2
and validated
our App Store Connect settings,


132
00:06:31.558 --> 00:06:34.828 line:-2
I will be provided with a list
of options that is determined


133
00:06:34.862 --> 00:06:36.730 line:-1
by the content of my archive


134
00:06:36.763 --> 00:06:39.266 line:-2
and how I am distributing
an app.


135
00:06:39.299 --> 00:06:41.235 line:-2
I would like
to build for bitcode,


136
00:06:41.268 --> 00:06:44.104 line:-2
I would like to include symbols
so crash reports of my app


137
00:06:44.137 --> 00:06:47.107 line:-2
are detailed and descriptive,
and I would like to ensure


138
00:06:47.140 --> 00:06:49.109 line:-2
the build number
of Baker is consistent


139
00:06:49.142 --> 00:06:50.911 line:-1
across every framework,


140
00:06:50.944 --> 00:06:53.146 line:-2
so I will keep
the default values selected


141
00:06:53.180 --> 00:06:55.983 line:-1
and click Next to continue.


142
00:06:56.016 --> 00:07:00.420 line:-2
I am now brought to a page
asking how I want to sign Baker.


143
00:07:00.454 --> 00:07:02.122 line:-1
Signing is used to validate


144
00:07:02.155 --> 00:07:05.058 line:-2
that Baker is coming
from a trusted developer


145
00:07:05.092 --> 00:07:08.161 line:-2
and to ensure
that software is secure to run.


146
00:07:08.195 --> 00:07:11.431 line:-2
The two options provided
to me are automatic


147
00:07:11.465 --> 00:07:13.500 line:-1
and manual signing.


148
00:07:13.534 --> 00:07:16.603 line:-2
Automatic signing lets Xcode
handle signing for me,


149
00:07:16.637 --> 00:07:19.406 line:-2
while manual is
for when I want full control


150
00:07:19.439 --> 00:07:21.108 line:-1
over the signing process.


151
00:07:21.141 --> 00:07:23.944 line:-2
I want Xcode to handle
signing for me, so I will keep


152
00:07:23.977 --> 00:07:27.915 line:-2
automatic signing checked
and click Next to continue.


153
00:07:27.948 --> 00:07:30.484 line:-2
Xcode will now transform
the Baker archive


154
00:07:30.517 --> 00:07:33.153 line:-2
into an IPA
and sign it for distribution.


155
00:07:33.187 --> 00:07:35.956 line:-2
Automatic signing
in the distribution workflow


156
00:07:35.989 --> 00:07:37.891 line:-2
has underwent
some exciting changes


157
00:07:37.925 --> 00:07:41.061 line:-2
that makes signing work
with no local machine setup.


158
00:07:41.094 --> 00:07:44.198 line:-2
The signing process
requires a certificate


159
00:07:44.231 --> 00:07:48.769 line:-2
and private key to validate
that I am a trusted developer.


160
00:07:48.802 --> 00:07:51.438 line:-2
When locally signing,
I would need to ensure


161
00:07:51.471 --> 00:07:54.641 line:-2
that I had a distribution
certificate and private key


162
00:07:54.675 --> 00:07:57.544 line:-2
installed on my machine,
which would often require


163
00:07:57.578 --> 00:08:01.815 line:-2
manual setup before entering
the distribution workflow.


164
00:08:01.849 --> 00:08:04.751 line:-2
In Xcode 13,
when using automatic signing,


165
00:08:04.785 --> 00:08:08.889 line:-2
no certificate setup
is required.


166
00:08:08.922 --> 00:08:12.359 line:-2
Certificates and private keys
can now be securely stored


167
00:08:12.392 --> 00:08:16.263 line:-2
in the cloud, where the signing
operation now takes place.


168
00:08:16.296 --> 00:08:18.599 line:-2
This means that when using
automatic signing,


169
00:08:18.632 --> 00:08:21.602 line:-2
I don't have to set up
certificates at all.


170
00:08:21.635 --> 00:08:23.470 line:-2
This new style of signing
is supported


171
00:08:23.504 --> 00:08:25.873 line:-2
by every distribution method
in Xcode,


172
00:08:25.906 --> 00:08:27.574 line:-1
such as App Store uploads,


173
00:08:27.608 --> 00:08:31.044 line:-2
Developer ID,
and Enterprise distribution.


174
00:08:31.078 --> 00:08:34.248 line:-2
Cloud signing works completely
behind the scenes by managing


175
00:08:34.281 --> 00:08:37.184 line:-2
all of your signing assets
and signing your app.


176
00:08:37.217 --> 00:08:40.687 line:-2
Let's go over how this works
in more detail.


177
00:08:40.721 --> 00:08:43.390 line:-2
Xcode will take
the developer-signed Baker app


178
00:08:43.423 --> 00:08:48.295 line:-2
in your archive and generate
a partial signature for it.


179
00:08:48.328 --> 00:08:50.764 line:-2
This partial signature
contains hashes


180
00:08:50.797 --> 00:08:53.834 line:-1
of the content within your app.


181
00:08:53.867 --> 00:08:57.771 line:-2
A copy of those hashes are then
sent to our servers,


182
00:08:57.804 --> 00:09:00.474 line:-2
who, using a private key
and certificate,


183
00:09:00.507 --> 00:09:02.910 line:-1
signs your app in the cloud.


184
00:09:02.943 --> 00:09:06.146 line:-2
We then return the remaining
part of the signature


185
00:09:06.180 --> 00:09:08.882 line:-2
and insert that
into the partial signature


186
00:09:08.916 --> 00:09:12.386 line:-1
to complete the signing process.


187
00:09:12,419 --> 00:09:15,622
Now, by using automatic
and cloud signing,


188
00:09:15,656 --> 00:09:18,258
we have a fully
distribution signed Baker app


189
00:09:18,292 --> 00:09:21,295
that can be uploaded
to App Store Connect.


190
00:09:23.463 --> 00:09:26.166 line:-2
Anyone with an Admin
or Account Holder role


191
00:09:26.200 --> 00:09:29.069 line:-2
on App Store Connect can
cloud sign for App Store Connect


192
00:09:29.102 --> 00:09:31.505 line:-1
distribution by default.


193
00:09:31.538 --> 00:09:34.675 line:-2
If I want someone with
a Developer role to upload Baker


194
00:09:34.708 --> 00:09:36.043 line:-1
using cloud signing,


195
00:09:36.076 --> 00:09:38.612 line:-2
I can grant them permission
on App Store Connect


196
00:09:38.645 --> 00:09:40.747 line:-2
by checking
the Access to Cloud Managed


197
00:09:40.781 --> 00:09:43.917 line:-2
Distribution Certificate
checkbox.


198
00:09:43.951 --> 00:09:47.521 line:-2
Xcode has now completed
packaging and cloud signing


199
00:09:47.554 --> 00:09:50.390 line:-2
the Baker app
and shows me a summary page


200
00:09:50.424 --> 00:09:54.094 line:-2
before I perform the upload
to App Store Connect.


201
00:09:54.127 --> 00:09:56.396 line:-2
I can see information
such as the type


202
00:09:56.430 --> 00:09:59.766 line:-2
of certificate used,
the version number,


203
00:09:59.800 --> 00:10:03.036 line:-2
and the entitlements
the Baker app was signed with.


204
00:10:03.070 --> 00:10:04.605 line:-1
I am happy with what I see,


205
00:10:04.638 --> 00:10:08.075 line:-2
so I will go ahead
and click Upload.


206
00:10:08.108 --> 00:10:11.712 line:-2
Now, Xcode will upload
the first build of Baker


207
00:10:11.745 --> 00:10:14.314 line:-1
to App Store Connect.


208
00:10:14.348 --> 00:10:17.017 line:-2
Now, when I get
onto App Store Connect,


209
00:10:17.050 --> 00:10:20.254 line:-2
I can see the first build
of Baker in the app record


210
00:10:20.287 --> 00:10:22.489 line:-1
Xcode created earlier.


211
00:10:22.523 --> 00:10:24.758 line:-2
From here,
I will be able to set up Baker


212
00:10:24.791 --> 00:10:27.194 line:-2
for TestFlight
and start beta testing.


213
00:10:27.227 --> 00:10:30.631 line:-2
For information on how to set up
your app on App Store Connect


214
00:10:30.664 --> 00:10:33.333 line:-2
for TestFlight,
and also the App Store,


215
00:10:33.367 --> 00:10:35.302 line:-2
please see our guide
in the description.


216
00:10:35,335 --> 00:10:39,239
After getting Baker
on TestFlight and beta testing,


217
00:10:39,273 --> 00:10:42,242
I have addressed
many bugs and feedback.


218
00:10:42,276 --> 00:10:45,045
I now want to upload
another build of my app


219
00:10:45,078 --> 00:10:47,147
with the needed updates.


220
00:10:47.181 --> 00:10:49.116 line:-2
The process looks
mostly the same


221
00:10:49.149 --> 00:10:50.851 line:-1
as what we just went through.


222
00:10:50.884 --> 00:10:53.687 line:-2
I will archive my app
with the desired changes


223
00:10:53.720 --> 00:10:56.723 line:-2
and distribute through
the Xcode Organizer.


224
00:10:56.757 --> 00:10:59.126 line:-1
There will be two differences.


225
00:10:59.159 --> 00:11:02.262 line:-2
First, I won't need to create
an app record again,


226
00:11:02.296 --> 00:11:04.364 line:-2
and second,
I will need to make sure


227
00:11:04.398 --> 00:11:06.700 line:-2
the build number of Baker
is different,


228
00:11:06.733 --> 00:11:08.769 line:-2
as App Store Connect keeps
each build


229
00:11:08.802 --> 00:11:12.105 line:-2
and uses version and build
number to differentiate them.


230
00:11:12.139 --> 00:11:14.908 line:-2
I can do this by modifying
the build number


231
00:11:14.942 --> 00:11:18.078 line:-2
in my project file
before archiving.


232
00:11:18.111 --> 00:11:20.848 line:-2
But if I don't want
to manage my build number,


233
00:11:20.881 --> 00:11:23.984 line:-2
the distribution workflow
can now do this for me.


234
00:11:25.152 --> 00:11:29.022 line:-2
New in Xcode 13, if Xcode
detects I am distributing


235
00:11:29.056 --> 00:11:31.558 line:-2
with a build number
that has already been used


236
00:11:31.592 --> 00:11:32.793 line:-1
on App Store Connect,


237
00:11:32.826 --> 00:11:35.863 line:-2
or that is not incrementing,
it will offer to increment


238
00:11:35.896 --> 00:11:39.800 line:-2
the build number in the archive
to one that is valid.


239
00:11:39.833 --> 00:11:41.568 line:-2
Take a look
at the Manage Version


240
00:11:41.602 --> 00:11:45.706 line:-2
and Build Number option to see
the build number Xcode selects.


241
00:11:46,773 --> 00:11:50,110
As I let the distribution
workflow manage my build number,


242
00:11:50,143 --> 00:11:52,346
I followed
the exact same process


243
00:11:52,379 --> 00:11:54,381
as the first upload of Baker,


244
00:11:54,414 --> 00:11:58,886
and I now have a second build
of Baker on App Store Connect.


245
00:11:58,919 --> 00:12:00,988
This cycle
of releasing beta builds


246
00:12:01,021 --> 00:12:03,457
and addressing feedback
will continue


247
00:12:03,490 --> 00:12:06,360
until I have a build that meets
the desired quality


248
00:12:06,393 --> 00:12:08,662
needed for an App Store release.


249
00:12:09,897 --> 00:12:12,799
To get Baker on the App Store,
I can promote


250
00:12:12,833 --> 00:12:15,903
one of the TestFlight builds
on App Store Connect,


251
00:12:15,936 --> 00:12:19,907
or upload another build in the
organizer to App Store Connect


252
00:12:19,940 --> 00:12:22,776
in the exact same way
we did before.


253
00:12:22,809 --> 00:12:26,113
Once Baker is on the App Store,
I can then continue working


254
00:12:26,146 --> 00:12:28,815
on adding new features,
bug fixes,


255
00:12:28,849 --> 00:12:30,851
and enhancements
to the Baker app.


256
00:12:30.884 --> 00:12:34.788 line:-2
When I am ready for the next
upload for either TestFlight


257
00:12:34.821 --> 00:12:39.426 line:-2
or the App Store, I can follow
the same process in Xcode again.


258
00:12:39.459 --> 00:12:41.595 line:-2
With the new additions
we have made


259
00:12:41.628 --> 00:12:44.698 line:-2
to the distribution workflow
in Xcode 13,


260
00:12:44.731 --> 00:12:46.466 line:-1
such as cloud signing,


261
00:12:46.500 --> 00:12:49.269 line:-2
app record creation,
and build number management,


262
00:12:49.303 --> 00:12:51.505 line:-2
it is now possible
to distribute apps


263
00:12:51.538 --> 00:12:56.176 line:-2
with no prior machine setup
or setup on App Store Connect.


264
00:12:56.210 --> 00:12:58.378 line:-2
This makes
distributing your apps


265
00:12:58.412 --> 00:13:00.247 line:-1
more streamlined than ever.


266
00:13:00.280 --> 00:13:02.883 line:-1
Xcode provides a multitude


267
00:13:02.916 --> 00:13:05.385 line:-2
of different
distribution options.


268
00:13:05.419 --> 00:13:07.688 line:-2
Let's take a look
at some of the other options


269
00:13:07.721 --> 00:13:11.158 line:-2
for distributing apps,
starting with Mac apps.


270
00:13:11.191 --> 00:13:14.761 line:-2
Most iOS apps,
including Baker, are available


271
00:13:14.795 --> 00:13:18.031 line:-2
on Apple silicon Macs
by default.


272
00:13:18.065 --> 00:13:20.934 line:-2
To configure this setting,
I can go to the Privacy


273
00:13:20.968 --> 00:13:24.872 line:-2
and Availability section
of the Baker app record.


274
00:13:24.905 --> 00:13:28.609 line:-2
I want Baker to be available
on Intel Macs as well, though,


275
00:13:28.642 --> 00:13:31.345 line:-2
so I can create
a Mac Catalyst version


276
00:13:31.378 --> 00:13:33.347 line:-1
or native Mac version of Baker,


277
00:13:33.380 --> 00:13:35.082 line:-1
and then I will have two options


278
00:13:35.115 --> 00:13:38.886 line:-2
for how to distribute
my app to the world.


279
00:13:38.919 --> 00:13:41.755 line:-2
I can distribute the build
of my Mac Baker app


280
00:13:41.788 --> 00:13:44.024 line:-2
to the Mac App Store
by cloud signing


281
00:13:44.057 --> 00:13:48.028 line:-2
and distributing in the exact
same way we did for iOS.


282
00:13:48.061 --> 00:13:51.298 line:-2
If using the same bundle ID
as the iOS app,


283
00:13:51.331 --> 00:13:55.702 line:-2
my Mac app will use the same
app record as the iOS version.


284
00:13:55.736 --> 00:13:58.105 line:-2
This will also mean
that certain features,


285
00:13:58.138 --> 00:13:59.840 line:-1
such as in-app purchases,


286
00:13:59.873 --> 00:14:02.876 line:-2
will be shared across
the two platforms.


287
00:14:02.910 --> 00:14:06.947 line:-2
I will also be able to make my
Mac app available in TestFlight,


288
00:14:06.980 --> 00:14:10.117 line:-2
as it is newly available
in MacOS Monterey.


289
00:14:10.150 --> 00:14:12.619 line:-2
This means I will be able
to use TestFlight


290
00:14:12.653 --> 00:14:16.990 line:-2
for beta testing Baker
across all Apple platforms.


291
00:14:18.225 --> 00:14:20.260 line:-2
If I want people
to download Baker


292
00:14:20.294 --> 00:14:23.931 line:-2
outside of the Mac App Store,
I can choose to distribute


293
00:14:23.964 --> 00:14:26.733 line:-1
my app using Developer ID.


294
00:14:26.767 --> 00:14:30.037 line:-2
Developer ID distribution cloud
signs Baker


295
00:14:30.070 --> 00:14:32.105 line:-1
with a Developer ID certificate


296
00:14:32.139 --> 00:14:34.842 line:-2
and uploads the app
to be checked for malware


297
00:14:34.875 --> 00:14:37.744 line:-2
in a process
known as notarization.


298
00:14:37.778 --> 00:14:40.380 line:-2
Once Baker has been
signed and notarized,


299
00:14:40.414 --> 00:14:43.984 line:-2
macOS will trust the app
to run on any Mac.


300
00:14:44,985 --> 00:14:47,054
For more information
on distributing


301
00:14:47,087 --> 00:14:49,723
using Developer ID
and notarization,


302
00:14:49,756 --> 00:14:53,293
please view the "All about
notarization" session.


303
00:14:53.327 --> 00:14:55.896 line:-2
Developer ID
and the Mac App Store


304
00:14:55.929 --> 00:14:59.733 line:-2
are the two main methods
of distribution for macOS,


305
00:14:59.766 --> 00:15:03.937 line:-2
and both are great options for
getting your app to the world.


306
00:15:03.971 --> 00:15:06.106 line:-2
Now that we have gone over
the different ways


307
00:15:06.139 --> 00:15:08.642 line:-2
to distribute on Mac,
let's take a look


308
00:15:08.675 --> 00:15:13.280 line:-2
at a couple more ways
to distribute your apps on iOS.


309
00:15:13.313 --> 00:15:16.116 line:-2
Sometimes, I want
to directly send my teammates


310
00:15:16.149 --> 00:15:18.552 line:-2
a distribution signed build
of Baker.


311
00:15:18.585 --> 00:15:21.154 line:-2
This can be done
for testing a bug fix,


312
00:15:21.188 --> 00:15:23.357 line:-2
testing an experimental
new feature,


313
00:15:23.390 --> 00:15:26.026 line:-1
or a variety of other reasons.


314
00:15:26.059 --> 00:15:30.898 line:-2
For this use case, I will want
to use ad hoc distribution.


315
00:15:30.931 --> 00:15:33.967 line:-2
Ad hoc distribution allows me
to sign Baker to run


316
00:15:34.001 --> 00:15:39.306 line:-2
on up to 100 devices registered
to my team per device type.


317
00:15:39.339 --> 00:15:43.277 line:-2
Using Xcode, I can choose
the ad hoc distribution option,


318
00:15:43.310 --> 00:15:45.546 line:-2
export my app,
and then send Baker


319
00:15:45.579 --> 00:15:48.815 line:-2
to one of my teammates
with a registered device.


320
00:15:48.849 --> 00:15:53.053 line:-2
Finally, my team has an app
called Campus Explorer


321
00:15:53.086 --> 00:15:57.090 line:-2
that we'd like to distribute
internally within our company.


322
00:15:57.124 --> 00:16:01.061 line:-2
Xcode provides two options
to distribute in this way:


323
00:16:01.094 --> 00:16:04.231 line:-2
custom apps
and enterprise distribution.


324
00:16:04.264 --> 00:16:06.700 line:-2
To use custom apps,
I can distribute


325
00:16:06.733 --> 00:16:10.270 line:-2
to App Store Connect
and set up my custom app there.


326
00:16:10.304 --> 00:16:12.973 line:-2
Second, if I want
to distribute privately


327
00:16:13.006 --> 00:16:15.475 line:-2
through the enterprise program,
I can select


328
00:16:15.509 --> 00:16:19.446 line:-2
the enterprise distribution
method in the organizer.


329
00:16:19,479 --> 00:16:23,550
For more detailed information
on custom app distribution,


330
00:16:23,584 --> 00:16:25,919
please view
the "Custom app distribution


331
00:16:25,953 --> 00:16:28,188
with Apple Business Manager"
session.


332
00:16:30.224 --> 00:16:33.994 line:-2
We have now distributed Baker
in a variety of different ways


333
00:16:34.027 --> 00:16:36.163 line:-1
and for many different builds.


334
00:16:36.196 --> 00:16:38.599 line:-2
Over time,
I will continually select


335
00:16:38.632 --> 00:16:42.069 line:-2
the same options and methods
when distributing,


336
00:16:42.102 --> 00:16:46.240 line:-2
so I'll want to start automating
the distribution process.


337
00:16:46.273 --> 00:16:48.876 line:-2
Automating distribution
is especially great


338
00:16:48.909 --> 00:16:51.545 line:-2
when using a continuous
integration service,


339
00:16:51.578 --> 00:16:54.381 line:-2
as I can build, test,
and distribute my app


340
00:16:54.414 --> 00:16:57.251 line:-1
in one continuous workflow.


341
00:16:57.284 --> 00:17:01.188 line:-2
The new Xcode Cloud CI service
is great for this.


342
00:17:01.221 --> 00:17:03.757 line:-2
Once you have built
and tested your application,


343
00:17:03.790 --> 00:17:06.460 line:-2
Xcode Cloud supports
automated distribution


344
00:17:06.493 --> 00:17:09.229 line:-2
of your app
to App Store Connect.


345
00:17:09.263 --> 00:17:11.632 line:-2
To learn how to set up
and distribute your app


346
00:17:11,665 --> 00:17:13,934
in Xcode Cloud,
please take a look


347
00:17:13,967 --> 00:17:17,404
at the "Explore Xcode
Cloud workflows" session.


348
00:17:18.438 --> 00:17:20.707 line:-2
If you want
to automate distribution


349
00:17:20.741 --> 00:17:22.776 line:-1
using a different CI service


350
00:17:22.809 --> 00:17:25.712 line:-2
or automate it locally
on your machine,


351
00:17:25.746 --> 00:17:30.350 line:-2
you can use the Xcode
command line tool, xcodebuild.


352
00:17:30.384 --> 00:17:33.554 line:-2
The `xcodebuild
-exportArchive` command is used


353
00:17:33.587 --> 00:17:37.624 line:-2
to automate distribution,
and it takes in an archive,


354
00:17:37.658 --> 00:17:41.128 line:-2
export options plist,
and credentials.


355
00:17:41.161 --> 00:17:43.497 line:-2
I can create
the archive in Xcode,


356
00:17:43.530 --> 00:17:46.400 line:-2
like I did during
the first upload of Baker,


357
00:17:46.433 --> 00:17:51.171 line:-2
or I can build it using
xcodebuild's archive command.


358
00:17:51.205 --> 00:17:53.307 line:-1
To refer to the built archive,


359
00:17:53.340 --> 00:17:55.843 line:-2
I will use
the `-archivePath` argument


360
00:17:55.876 --> 00:17:59.012 line:-2
and pass the path
to my built archive.


361
00:18:00.614 --> 00:18:03.684 line:-2
Next is the export
options plist,


362
00:18:03.717 --> 00:18:06.787 line:-2
which is like a recipe
for distributing apps.


363
00:18:06.820 --> 00:18:10.123 line:-2
This is where all of the options
I selected manually


364
00:18:10.157 --> 00:18:13.227 line:-2
in Xcode's distribution workflow
are specified.


365
00:18:13.260 --> 00:18:17.264 line:-2
If you export an IPA,
an export options plist is saved


366
00:18:17.297 --> 00:18:21.368 line:-2
to your exported directory with
all the options you selected.


367
00:18:21.401 --> 00:18:24.204 line:-2
When we uploaded Baker
to App Store Connect,


368
00:18:24.238 --> 00:18:26.974 line:-2
an export options plist
was created,


369
00:18:27.007 --> 00:18:30.410 line:-2
keeping track of options
such as selecting upload,


370
00:18:30.444 --> 00:18:34.648 line:-2
enabling bitcode,
and selecting automatic signing.


371
00:18:34.681 --> 00:18:38.852 line:-2
When xcodebuild uses this plist,
it will distribute by selecting


372
00:18:38.886 --> 00:18:42.723 line:-2
the exact same options
as we did in Xcode.


373
00:18:42.756 --> 00:18:44.858 line:-2
For a list of options
that are available


374
00:18:44.892 --> 00:18:46.760 line:-1
in an export options plist,


375
00:18:46.793 --> 00:18:49.730 line:-2
you can run `xcodebuild -help`
on the command line.


376
00:18:51.832 --> 00:18:54.334 line:-2
To specify
the export options plist,


377
00:18:54.368 --> 00:18:57.971 line:-2
I need to pass the `-exportOptionsPlist` argument,


378
00:18:58.005 --> 00:19:01.542 line:-1
with a path to my plist file.


379
00:19:01.575 --> 00:19:03.610 line:-1
Finally, I'll need to ensure


380
00:19:03.644 --> 00:19:06.780 line:-2
xcodebuild has access
to valid credentials


381
00:19:06.813 --> 00:19:08.982 line:-2
in order to successfully
cloud sign


382
00:19:09.016 --> 00:19:10.851 line:-1
and upload to the App Store.


383
00:19:10.884 --> 00:19:13.954 line:-1
There are two ways to do this.


384
00:19:13.987 --> 00:19:16.690 line:-2
The first way
is to sign in to Xcode


385
00:19:16.723 --> 00:19:20.093 line:-2
prior to running xcodebuild,
and the session will persist


386
00:19:20.127 --> 00:19:23.463 line:-2
on my machine
for a period of time.


387
00:19:23.497 --> 00:19:26.867 line:-2
If I sign in with Xcode,
the only required flag


388
00:19:26.900 --> 00:19:29.403 line:-2
will be `-allowProvisioningUpdates`,


389
00:19:29.436 --> 00:19:31.505 line:-2
which gives permission
for xcodebuild


390
00:19:31.538 --> 00:19:35.509 line:-2
to communicate with
the Apple Developer website.


391
00:19:35.542 --> 00:19:39.446 line:-2
New in Xcode 13, you can
use App Store Connect keys


392
00:19:39.479 --> 00:19:44.117 line:-2
to sign in to xcodebuild
without ever signing into Xcode.


393
00:19:44.151 --> 00:19:46.587 line:-2
The keys can be fetched
from App Store Connect


394
00:19:46.620 --> 00:19:48.889 line:-1
and passed to xcodebuild.


395
00:19:48.922 --> 00:19:52.226 line:-2
The three things you'll need
is the Issuer ID,


396
00:19:52,259 --> 00:19:54,161
which is passed to xcodebuild


397
00:19:54,194 --> 00:19:58,098
using `-authenticationKeyIssuerID`;


398
00:19:58,131 --> 00:20:00,901
the Key ID,
which is passed using


399
00:20:00,934 --> 00:20:02,970
`-authenticationKeyID`;


400
00:20:03,003 --> 00:20:06,306
and finally, you'll need
to download the API Key


401
00:20:06,340 --> 00:20:09,476
using the Download API Key
button.


402
00:20:09,510 --> 00:20:13,714
The path to the downloaded file
can be passed to xcodebuild


403
00:20:13,747 --> 00:20:17,284
using `-authenticationKeyPath`.


404
00:20:17,317 --> 00:20:20,988
xcodebuild still requires
allow provisioning updates,


405
00:20:21,021 --> 00:20:24,625
as it still needs to communicate
with the developer website.


406
00:20:24,658 --> 00:20:27,928
Once you have that and all
the App Store Connect keys,


407
00:20:27,961 --> 00:20:29,530
you will have
the credentials needed


408
00:20:29,563 --> 00:20:32,466
for xcodebuild
to distribute your app.


409
00:20:32.499 --> 00:20:35.936 line:-2
Now that I have an archive,
export options plist,


410
00:20:35.969 --> 00:20:38.472 line:-2
and credentials,
I have everything needed


411
00:20:38.505 --> 00:20:41.775 line:-2
to construct the full
xcodebuild command.


412
00:20:41.808 --> 00:20:44.945 line:-2
Here are all the elements
put together for the command


413
00:20:44.978 --> 00:20:47.514 line:-2
to automate distribution
for Baker.


414
00:20:47.548 --> 00:20:49.516 line:-2
I want to continue
to provide updates


415
00:20:49.550 --> 00:20:53.053 line:-2
to my beta testers once a week,
so I will set up my CI


416
00:20:53.086 --> 00:20:56.290 line:-2
to do this using
this command for distribution.


417
00:20:58.358 --> 00:21:01.295 line:-2
And that is all the ways
to distribute apps


418
00:21:01.328 --> 00:21:03.297 line:-1
using Xcode 13.


419
00:21:03.330 --> 00:21:05.232 line:-2
From distributing
to App Store Connect


420
00:21:05.265 --> 00:21:07.768 line:-2
for TestFlight
and the App Store,


421
00:21:07.801 --> 00:21:10.904 line:-2
to distribution methods
such as Developer ID,


422
00:21:10.938 --> 00:21:13.006 line:-1
ad hoc, and enterprise.


423
00:21:13.040 --> 00:21:16.143 line:-2
Then, finally, to automate
the distribution process,


424
00:21:16.176 --> 00:21:20.747 line:-2
you can use xcodebuild
or the Xcode Cloud CI service.


425
00:21:20.781 --> 00:21:23.517 line:-2
For more information
on how to distribute


426
00:21:23.550 --> 00:21:25.686 line:-1
your app using Xcode Cloud,


427
00:21:25,719 --> 00:21:29,656
please view the "Explore Xcode
Cloud workflows" session,


428
00:21:29,690 --> 00:21:30,858
and for more information


429
00:21:30,891 --> 00:21:33,393
about other distribution methods
in detail,


430
00:21:33,427 --> 00:21:37,264
the "App Distribution — From
Ad Hoc to Enterprise" session


431
00:21:37,297 --> 00:21:39,299
has some great information.


432
00:21:39.333 --> 00:21:42.936 line:-2
Thank you so much for listening,
and have a great WWDC!


433
00:21:42,970 --> 00:21:45,973
[upbeat music]

