2
00:00:02,002 --> 00:00:04,972 line:-1
[upbeat music]


3
00:00:05,005 --> 00:00:09,009 line:-1
♪ ♪


4
00:00:09,042 --> 00:00:10,677 line:-2
[David]
Hi.


5
00:00:10,711 --> 00:00:13,380 line:-2
I’m David Duncan,
and with my colleague,


6
00:00:13.413 --> 00:00:16.783 line:-2 align:center
Eric Dudiak,
we’re going to be discussing


7
00:00:16,817 --> 00:00:19,152 line:-1
all the ways that UIKit


8
00:00:19,186 --> 00:00:22,523 line:-1
makes buttons better in iOS 15.


9
00:00:23.924 --> 00:00:25.626 line:-1 align:center
The humble button,


10
00:00:25,659 --> 00:00:28,829 line:-2
a staple of apps
large and small.


11
00:00:28,862 --> 00:00:31,632 line:-2
Buttons are perhaps
the most common way


12
00:00:31,665 --> 00:00:33,500 line:-1
to solicit user input.


13
00:00:33,534 --> 00:00:37,538 line:-2
Buttons come in many forms:
large and small;


14
00:00:37.571 --> 00:00:42.009 line:-2 align:center
with images, text, or both;
with and without backgrounds;


15
00:00:42.042 --> 00:00:44.711 line:-1 align:center
and every color of the rainbow.


16
00:00:44,745 --> 00:00:48,448 line:-2
Let’s start by focusing
on a few specific styles.


17
00:00:49.783 --> 00:00:53.253 line:-1 align:center
In iOS 15, UIKit now provides


18
00:00:53,287 --> 00:00:56,356 line:-1
these four basic styles.


19
00:00:56,390 --> 00:00:59,860 line:-2
Adding to the plain style
you already know and love


20
00:00:59,893 --> 00:01:04,431 line:-2
are the new gray,
tinted, and filled styles.


21
00:01:06.133 --> 00:01:09.303 line:-2 align:center
But UIKit doesn’t just
make buttons more stylish


22
00:01:09.336 --> 00:01:11.104 line:-1 align:center
in iOS 15.


23
00:01:11,138 --> 00:01:14,174 line:-2
It also makes them
more powerful.


24
00:01:14.208 --> 00:01:17.744 line:-2 align:center
Dynamic type
is now supported by default,


25
00:01:17.778 --> 00:01:21.114 line:-2 align:center
and multiline text support
is built into button system.


26
00:01:22,449 --> 00:01:25,919 line:-2
Accessibility has been enhanced
with better support


27
00:01:25,953 --> 00:01:30,157 line:-2
for all accessibility features
as well as generating buttons


28
00:01:30,190 --> 00:01:33,260 line:-2
that are more accessible
by default.


29
00:01:33,293 --> 00:01:37,431 line:-2
And with all these new features,
buttons are more customizable


30
00:01:37,464 --> 00:01:41,835 line:-2
than ever, so you can get
exactly the style you want.


31
00:01:41.869 --> 00:01:44.271 line:-1 align:center
So with that primer,


32
00:01:44,304 --> 00:01:47,241 line:-2
let’s meet
UIButtonConfiguration,


33
00:01:47,274 --> 00:01:50,110 line:-2
the entry point
to the new button system.


34
00:01:51.478 --> 00:01:54.982 line:-2 align:center
Welcome to Button Emporium,
the premier supplier


35
00:01:55,015 --> 00:01:57,851 line:-2
of buttons
of all shapes and sizes.


36
00:01:59.286 --> 00:02:02.856 line:-2 align:center
Button Emporium always wants
to have the best buttons,


37
00:02:02,890 --> 00:02:07,427 line:-2
so let’s update the app to adopt
UIButtonConfiguration...


38
00:02:07,461 --> 00:02:10,797 line:-2
starting with the all-important
Sign In button.


39
00:02:12.833 --> 00:02:16.603 line:-2 align:center
Currently the app generates
a Sign In button with this code,


40
00:02:16.637 --> 00:02:20.607 line:-2 align:center
generating a plain system button
with the title “Sign In”.


41
00:02:21.842 --> 00:02:24.311 line:-2 align:center
But this is
a super important button,


42
00:02:24,344 --> 00:02:28,215 line:-2
so let’s make it stand out more
using the new filled style.


43
00:02:29.750 --> 00:02:31.218 line:-1 align:center
And we’re done!


44
00:02:31.251 --> 00:02:34.621 line:-2 align:center
It’s easy to get started
with UIButtonConfiguration,


45
00:02:34,655 --> 00:02:38,725 line:-2
as UIButton automatically
integrates titles and images


46
00:02:38.759 --> 00:02:43.130 line:-2 align:center
set with the existing API
on configurations you provide,


47
00:02:43,163 --> 00:02:46,200 line:-2
making it easy
to update your button’s style


48
00:02:46,233 --> 00:02:49,203 line:-2
without updating
all your code at once.


49
00:02:49,236 --> 00:02:53,507 line:-2
But when you’re ready to update
your code, there is plenty more


50
00:02:53,540 --> 00:02:57,044 line:-2
to UIButtonConfiguration
than just styles.


51
00:02:57.077 --> 00:02:59.513 line:-1 align:center
Let’s take a look at that next.


52
00:03:01,248 --> 00:03:03,450 line:-2
This is our current
“Add to Cart” button.


53
00:03:04,618 --> 00:03:07,287 line:-2
It’s a pretty basic button
right now,


54
00:03:07.321 --> 00:03:08.989 line:-2 align:center
but we’re going
to take advantage


55
00:03:09.022 --> 00:03:12.526 line:-2 align:center
of new features
offered by UIButtonConfiguration


56
00:03:12,559 --> 00:03:15,996 line:-2
to turbo charge
the button-buying experience.


57
00:03:17.531 --> 00:03:20.434 line:-2 align:center
To start,
we’ll use the tinted style


58
00:03:20,467 --> 00:03:23,136 line:-2
as it complements
our other buttons.


59
00:03:23.170 --> 00:03:26.907 line:-2 align:center
We start by creating
a tinted button configuration,


60
00:03:26,940 --> 00:03:28,475 line:-1
set its title,


61
00:03:28,509 --> 00:03:30,644 line:-2
matching how we previously
configured our button.


62
00:03:31,879 --> 00:03:33,847 line:-1
Next we create the button


63
00:03:33,881 --> 00:03:35,315 line:-2
with our filled out
configuration.


64
00:03:36.583 --> 00:03:39.019 line:-2 align:center
This is already
quite an improvement,


65
00:03:39.052 --> 00:03:41.855 line:-1 align:center
but let’s take it over the top.


66
00:03:41.889 --> 00:03:43.624 line:-1 align:center
The next improvement we’ll make


67
00:03:43.657 --> 00:03:45.692 line:-2 align:center
is to add an image
to the button,


68
00:03:45,726 --> 00:03:49,263 line:-2
making it simple to determine
what it does at a glance.


69
00:03:50.564 --> 00:03:52.299 line:-2 align:center
Our designer
really wants the image


70
00:03:52.332 --> 00:03:55.102 line:-2 align:center
in the trailing position,
so alongside setting


71
00:03:55.135 --> 00:03:56.703 line:-1 align:center
the image property,


72
00:03:56,737 --> 00:03:59,706 line:-2
we also set
the imagePlacement property,


73
00:03:59,740 --> 00:04:02,776 line:-2
putting the image
exactly where we want it.


74
00:04:04.978 --> 00:04:07.414 line:-2 align:center
But there are two more features
we want to add


75
00:04:07.447 --> 00:04:09.049 line:-1 align:center
to our new “Add to Cart” button.


76
00:04:10,250 --> 00:04:13,153 line:-2
The first
is to preview what happens


77
00:04:13.187 --> 00:04:15.756 line:-1 align:center
when you order multiple items,


78
00:04:15.789 --> 00:04:18.058 line:-2 align:center
which will use
the subtitle feature


79
00:04:18.091 --> 00:04:19.660 line:-1 align:center
of UIButtonConfiguration.


80
00:04:21,328 --> 00:04:24,665 line:-2
The second is to switch
from the outlined image


81
00:04:24,698 --> 00:04:27,768 line:-2
to its filled version
when the button is pressed.


82
00:04:29.069 --> 00:04:31.738 line:-2 align:center
For that, we need to update
the image property


83
00:04:31,772 --> 00:04:32,940 line:-1
at the appropriate time.


84
00:04:34.541 --> 00:04:36.476 line:-2 align:center
In order to update
the button correctly


85
00:04:36,510 --> 00:04:39,112 line:-2
when either
of these changes occur,


86
00:04:39,146 --> 00:04:42,182 line:-2
we’ll add
a configurationUpdateHandler.


87
00:04:43.584 --> 00:04:47.421 line:-2 align:center
The configurationUpdateHandler
is called when the button


88
00:04:47.454 --> 00:04:51.091 line:-2 align:center
needs an update, allowing you
to make centralized changes.


89
00:04:52.226 --> 00:04:55.395 line:-2 align:center
Usually you’ll change
the button’s configuration,


90
00:04:55,429 --> 00:04:57,231 line:-1
so it typically begins


91
00:04:57,264 --> 00:04:59,566 line:-2
by obtaining
a starting configuration


92
00:04:59,600 --> 00:05:02,469 line:-2
and ends with setting
the changed configuration.


93
00:05:04.204 --> 00:05:07.407 line:-2 align:center
Here we start with the button’s
existing configuration,


94
00:05:07.441 --> 00:05:10.611 line:-2 align:center
but you can just as easily
create a new one and fill out


95
00:05:10.644 --> 00:05:12.179 line:-1 align:center
all of its parameters instead.


96
00:05:13,981 --> 00:05:15,782 line:-2
First let’s set
the correct image


97
00:05:15.816 --> 00:05:17.384 line:-1 align:center
for the button.


98
00:05:17.417 --> 00:05:21.522 line:-2 align:center
When the button is pressed,
isHighlighted returns true,


99
00:05:21.555 --> 00:05:23.624 line:-2 align:center
and we set the filled version
of our cart symbol.


100
00:05:25,192 --> 00:05:27,528 line:-2
Otherwise,
we use the outlined version.


101
00:05:29.263 --> 00:05:31.164 line:-1 align:center
Since isHighlighted is a state


102
00:05:31,198 --> 00:05:34,601 line:-2
of UIButton,
it automatically arranges


103
00:05:34,635 --> 00:05:36,436 line:-2
for the
configurationUpdateHandler


104
00:05:36,470 --> 00:05:38,839 line:-2
to be called
when that value changes.


105
00:05:40,641 --> 00:05:43,076 line:-1
Next, we update the subtitle


106
00:05:43.110 --> 00:05:46.446 line:-2 align:center
when itemQuantityDescription
changes.


107
00:05:46,480 --> 00:05:50,484 line:-2
But itemQuantityDescription
isn’t a property of UIButton.


108
00:05:50,517 --> 00:05:53,654 line:-2
How do we arrange for
the configurationUpdateHandler


109
00:05:53,687 --> 00:05:56,023 line:-2
to be called
when the value changes?


110
00:05:58,959 --> 00:06:01,461 line:-2
When the customer
changes the number of buttons


111
00:06:01.495 --> 00:06:06.233 line:-2 align:center
to be purchased, the app
updates itemQuantityDescription.


112
00:06:07,534 --> 00:06:09,603 line:-2
To ensure
that the Add to Cart button


113
00:06:09,636 --> 00:06:13,540 line:-2
also updates,
our didSet handler calls


114
00:06:13.574 --> 00:06:18.512 line:-2 align:center
setNeedsUpdateConfiguration,
which in turn


115
00:06:18.545 --> 00:06:21.515 line:-2 align:center
arranges for
the configurationUpdateHandler


116
00:06:21.548 --> 00:06:25.352 line:-2 align:center
to be called and triggers
an update of the button.


117
00:06:27.054 --> 00:06:28.922 line:-1 align:center
At Button Emporium,


118
00:06:28.956 --> 00:06:31.792 line:-2 align:center
we’ve never met
a button we didn’t like,


119
00:06:31,825 --> 00:06:35,295 line:-2
and with UIButtonConfiguration,
there is plenty to like.


120
00:06:36,563 --> 00:06:38,599 line:-2
Before we update
our next button,


121
00:06:38.632 --> 00:06:40.968 line:-2 align:center
let’s quickly cover
some other features.


122
00:06:42.369 --> 00:06:45.472 line:-2 align:center
Buttons can now show
an activity indicator,


123
00:06:45.506 --> 00:06:49.409 line:-2 align:center
making it easy to provide
feedback that your app is busy.


124
00:06:50,611 --> 00:06:54,381 line:-2
Just set
showsActivityIndicator to true


125
00:06:54,414 --> 00:06:58,252 line:-2
in your button configuration,
and we’ll show the indicator,


126
00:06:58,285 --> 00:07:00,821 line:-2
replacing the image
if necessary.


127
00:07:01,922 --> 00:07:04,124 align:center
Adjusting aspects
of the button’s layout


128
00:07:04,157 --> 00:07:07,461 align:center
is straightforward,
giving you more control


129
00:07:07,494 --> 00:07:11,131 line:0
over how content
is positioned in the button.


130
00:07:11,164 --> 00:07:13,934 line:0
Here you can see
how contentInsets


131
00:07:13,967 --> 00:07:16,403 align:center
reserve space
on the edges of the button,


132
00:07:16,436 --> 00:07:19,973 align:center
and imagePadding
and titlePadding allow us


133
00:07:20,007 --> 00:07:22,609 align:center
to increase the space
between those elements.


134
00:07:24,278 --> 00:07:28,081 line:0
And while UIKit will layout
these components automatically,


135
00:07:28,115 --> 00:07:30,717 align:center
you have control over
how titles align


136
00:07:30,751 --> 00:07:34,021 align:center
with each other as well
as how the button’s content


137
00:07:34,054 --> 00:07:36,423 line:0
aligns
inside the content region.


138
00:07:38,625 --> 00:07:42,229 line:-2
Semantic stylings make it simple
to create buttons


139
00:07:42.262 --> 00:07:44.264 line:-1 align:center
with cohesive styles


140
00:07:44.298 --> 00:07:46.133 line:-2 align:center
without having to dig
into details.


141
00:07:47,334 --> 00:07:50,270 line:-2
Starting with
a simple filled button,


142
00:07:50,304 --> 00:07:53,173 line:-2
we configure
the baseBackgroundColor,


143
00:07:53,207 --> 00:07:55,275 line:-1
baseForegroundColor,


144
00:07:55,309 --> 00:07:58,846 line:-1
cornerStyle, and buttonSize


145
00:07:58.879 --> 00:08:01.849 line:-1 align:center
to generate a customized button,


146
00:08:01,882 --> 00:08:05,319 line:-2
and you automatically get
thematic states,


147
00:08:05,352 --> 00:08:09,389 line:-2
such as pressed and disabled
without any extra effort.


148
00:08:11,458 --> 00:08:13,894 line:-2
But even
with lots of automation,


149
00:08:13,927 --> 00:08:17,464 line:-2
it’s still easy to make
detailed customizations


150
00:08:17,497 --> 00:08:22,436 line:-2
for those times when you simply
must have exactly what you need,


151
00:08:22,469 --> 00:08:25,372 line:-2
like with our
all-important “Check Out” button.


152
00:08:27.140 --> 00:08:29.443 line:-2 align:center
To ensure
that Button Emporium customers


153
00:08:29.476 --> 00:08:31.912 line:-2 align:center
can get their buttons
with a minimum of fuss,


154
00:08:31,945 --> 00:08:34,848 line:-2
the check out button
is big and easy to find.


155
00:08:35.983 --> 00:08:38.886 line:-2 align:center
To build it, we’ll start
with the filled style,


156
00:08:38,919 --> 00:08:41,321 line:-1
set its size to large,


157
00:08:41,355 --> 00:08:43,590 line:-2
and fill out
its image and title.


158
00:08:45,526 --> 00:08:47,961 line:-2
When the button is tapped,
we start processing


159
00:08:47,995 --> 00:08:51,231 line:-2
the cart and want to show
an activity indicator.


160
00:08:52,533 --> 00:08:56,203 line:-2
To enable this, we add
a configurationUpdateHandler


161
00:08:56,236 --> 00:08:58,972 line:-2
to manage the
showsActivityIndicator property


162
00:08:59.006 --> 00:09:00.507 line:-1 align:center
of the configuration.


163
00:09:02.142 --> 00:09:06.313 line:-2 align:center
Just as before, changes
to the isCartBusy property


164
00:09:06,346 --> 00:09:09,049 line:-2
will call
setNeedsUpdateConfiguration


165
00:09:09,082 --> 00:09:12,686 line:-2
on the check out button
to ensure the activity indicator


166
00:09:12,719 --> 00:09:15,489 line:-2
is turned on and off
as necessary.


167
00:09:17.124 --> 00:09:19.693 line:-2 align:center
And while blue is nice,
we want to make sure


168
00:09:19.726 --> 00:09:20.894 line:-1 align:center
to leave an impression.


169
00:09:22.062 --> 00:09:24.364 line:-2 align:center
So to ensure
our precise color


170
00:09:24,398 --> 00:09:26,099 line:-1
is used for the background,


171
00:09:26.133 --> 00:09:28.135 line:-1 align:center
let’s set the backgroundColor


172
00:09:28,168 --> 00:09:31,972 line:-2
of UIButtonConfiguration’s
UIBackgroundConfiguration.


173
00:09:32.840 --> 00:09:34.007 line:-1 align:center
That’s way better.


174
00:09:35,375 --> 00:09:38,078 line:-2
Now that we’ve discussed
how UIButtonConfiguration


175
00:09:38,111 --> 00:09:41,448 line:-2
can make your buttons
look better than ever,


176
00:09:41.481 --> 00:09:43.250 line:-2 align:center
I’ll hand it over
to Eric to talk


177
00:09:43.283 --> 00:09:46.153 line:-2 align:center
about other new things
that buttons can do.


178
00:09:46,186 --> 00:09:48,188 line:-2
[Eric]
Thanks, David.


179
00:09:48,222 --> 00:09:50,224 line:-2
Now that we’ve checked out
how buttons can have


180
00:09:50,257 --> 00:09:53,560 line:-2
their appearance customized,
let’s inspect how buttons


181
00:09:53,594 --> 00:09:56,296 line:-2
can have
their functionality customized.


182
00:09:56.330 --> 00:09:59.533 line:-2 align:center
Most buttons are just
simple push buttons,


183
00:09:59,566 --> 00:10:03,036 line:-2
but sometimes a button
needs a bit of extra behavior.


184
00:10:03.070 --> 00:10:06.540 line:-2 align:center
The first ones we’re going
to examine is the toggle button.


185
00:10:07,808 --> 00:10:09,643 line:-2
These buttons
preserve the selected state


186
00:10:09.676 --> 00:10:11.378 line:-1 align:center
from UIControl.


187
00:10:11,411 --> 00:10:14,047 line:-2
They automatically
toggle it on and off


188
00:10:14,081 --> 00:10:15,749 line:-1
each time the button is pressed.


189
00:10:16.984 --> 00:10:19.019 line:-2 align:center
It also can be
programmatically changed


190
00:10:19,052 --> 00:10:20,053 line:-1
as necessary.


191
00:10:21.755 --> 00:10:25.526 line:-2 align:center
In addition to built-in styles
for the on and off states,


192
00:10:25.559 --> 00:10:28.662 line:-2 align:center
we can take advantage
of the UIButtonConfiguration


193
00:10:28.695 --> 00:10:32.699 line:-2 align:center
to customize the presentation
of these on and off states.


194
00:10:34.334 --> 00:10:37.938 line:-2 align:center
The concept of toggle buttons
on iOS is not new.


195
00:10:37.971 --> 00:10:39.573 line:-2 align:center
You may have noticed
some buttons


196
00:10:39.606 --> 00:10:42.476 line:-2 align:center
like the lyrics button
in the Music app.


197
00:10:44.011 --> 00:10:48.949 line:-2 align:center
It toggles the lyrics on and off
in the player like this.


198
00:10:50,417 --> 00:10:53,387 line:-2
Functionally,
this works just like UISwitch,


199
00:10:53,420 --> 00:10:55,789 line:-2
but it saves some space
in the UI


200
00:10:55,822 --> 00:10:58,325 line:-2
and it fits the design
of the app much better.


201
00:10:59.693 --> 00:11:02.396 line:-2 align:center
Toggle buttons
also work off UIBarButtonItems


202
00:11:02,429 --> 00:11:03,964 line:-1
like this one in Calendar.


203
00:11:05,232 --> 00:11:09,369 line:-2
In the top bar, the day details
can be enabled and disabled.


204
00:11:10.437 --> 00:11:12.906 line:-2 align:center
Pushing it toggles the display
of the details.


205
00:11:14,241 --> 00:11:17,678 line:-2
In this case,
there is a new selected property


206
00:11:17,711 --> 00:11:21,415 line:-2
on UIBarButtonItem
that can be read or set


207
00:11:21,448 --> 00:11:22,983 line:-1
for the selected state.


208
00:11:23,016 --> 00:11:27,688 line:-2
Now let’s update Button Emporium
to adopt toggle buttons.


209
00:11:28,856 --> 00:11:31,058 line:-2
Our app lets us browse
for the kinds of buttons


210
00:11:31,091 --> 00:11:32,459 line:-1
we want to buy.


211
00:11:32.492 --> 00:11:34.795 line:-2 align:center
But while browsing,
I only want to peruse


212
00:11:34.828 --> 00:11:36.697 line:-1 align:center
what’s currently in stock.


213
00:11:36,730 --> 00:11:38,832 line:-2
Here, we’ve added
a toggle button


214
00:11:38.866 --> 00:11:41.401 line:-2 align:center
to toggle between showing
absolutely everything


215
00:11:41.435 --> 00:11:44.271 line:-2 align:center
and just what’s in stock
and ready to ship.


216
00:11:44,304 --> 00:11:46,640 line:-2
This is a great use
of the toggle button.


217
00:11:46,673 --> 00:11:48,976 line:-2
One advantage
is that, since it’s a button,


218
00:11:49,009 --> 00:11:50,511 line:-1
the label is part of it,


219
00:11:50,544 --> 00:11:53,180 line:-2
making it very clear
what is being toggled here.


220
00:11:54.882 --> 00:11:57.651 line:-2 align:center
So let’s check out
how we made that.


221
00:11:57.684 --> 00:12:01.221 line:-2 align:center
Here, we have the basics
of setting up a button.


222
00:12:01.255 --> 00:12:03.590 line:-2 align:center
To make it a toggle button,
we just set


223
00:12:03.624 --> 00:12:06.727 line:-2 align:center
changesSelectionAsPrimaryAction
to true.


224
00:12:06.760 --> 00:12:08.762 line:-1 align:center
Now it’s a toggle button.


225
00:12:08,795 --> 00:12:09,897 line:-1
That’s it.


226
00:12:11,098 --> 00:12:12,866 line:-2
We can also
set the selected state


227
00:12:12,900 --> 00:12:14,968 line:-1
to match our internal model.


228
00:12:16,703 --> 00:12:19,473 line:-2
Now, we might want something
a little more complicated


229
00:12:19.506 --> 00:12:22.776 line:-2 align:center
that just two states
of on and off.


230
00:12:22.809 --> 00:12:25.779 line:-2 align:center
For buttons that can have
more options to switch between,


231
00:12:25.812 --> 00:12:28.582 line:-1 align:center
we can use pop-up buttons.


232
00:12:28.615 --> 00:12:31.151 line:-2 align:center
Pop-up buttons
are a close relative


233
00:12:31,185 --> 00:12:34,454 line:-2
to pull-down buttons,
which already exist in iOS.


234
00:12:34.488 --> 00:12:37.024 line:-2 align:center
These present
a menu when pressed.


235
00:12:37,057 --> 00:12:39,860 line:-2
Pop-up buttons
take that a step further


236
00:12:39,893 --> 00:12:43,864 line:-2
and ensure that one and only one
of the menu elements


237
00:12:43,897 --> 00:12:44,932 line:-1
is ever selected.


238
00:12:46,066 --> 00:12:47,935 line:-2
They also show
that current selection


239
00:12:47.968 --> 00:12:49.970 line:-1 align:center
as their title and image.


240
00:12:50.003 --> 00:12:52.806 line:-2 align:center
Building a pop-up button
is actually an extension


241
00:12:52,840 --> 00:12:54,541 line:-2
of building
a pull-down button.


242
00:12:54,575 --> 00:12:57,611 line:-2
For those, a menu
is assigned to the button.


243
00:12:57,644 --> 00:12:59,680 line:-2
To make the menu
the default action,


244
00:12:59,713 --> 00:13:03,250 line:-2
the showsMenuAsPrimaryAction
property is set to true.


245
00:13:04.718 --> 00:13:07.454 line:-2 align:center
Pop-up buttons
take that one step further


246
00:13:07.487 --> 00:13:09.156 line:-1 align:center
by just turning on the


247
00:13:09.189 --> 00:13:11.792 line:-2 align:center
changesSelectionAsPrimaryAction
property.


248
00:13:11,825 --> 00:13:13,594 line:-1
That’s all it takes.


249
00:13:13,627 --> 00:13:15,696 line:-2
They work
like UISegmentedControl


250
00:13:15,729 --> 00:13:17,865 line:-2
but can be useful
when there are more choices


251
00:13:17,898 --> 00:13:20,434 line:-2
than might fit
on the segmented control.


252
00:13:20,467 --> 00:13:23,170 line:-2
They can also be useful
for cases where the choices


253
00:13:23.203 --> 00:13:24.771 line:-1 align:center
have an inherent hierarchy.


254
00:13:26.507 --> 00:13:30.110 line:-2 align:center
Some examples of this style
of button exist today.


255
00:13:30,143 --> 00:13:32,679 line:-2
For example, the Phone app
uses a pop-up button


256
00:13:32,713 --> 00:13:34,948 line:-2
to switch between
SIMs for outgoing calls.


257
00:13:36,783 --> 00:13:39,319 line:-2
And here
the button presents a menu.


258
00:13:39,353 --> 00:13:42,589 line:-2
Selecting secondary
switches the line.


259
00:13:42.623 --> 00:13:45.259 line:-2 align:center
As a result,
the button is updated


260
00:13:45,292 --> 00:13:47,294 line:-1
to the new outgoing line.


261
00:13:47,327 --> 00:13:49,162 line:-2
The label
and image have been updated


262
00:13:49,196 --> 00:13:50,797 line:-1
to display the new selection.


263
00:13:52,366 --> 00:13:56,737 line:-2
Similarly, we have some use
for this in Button Emporium.


264
00:13:56.770 --> 00:13:58.438 line:-1 align:center
When we’re browsing buttons,


265
00:13:58.472 --> 00:14:00.908 line:-2 align:center
we have some that come
in a variety of colors.


266
00:14:00,941 --> 00:14:02,943 line:-2
The number of colors
is a fixed set


267
00:14:02,976 --> 00:14:05,345 line:-2
to choose from,
but probably too big


268
00:14:05,379 --> 00:14:07,781 line:-2
for a segmented control,
but it’s also small enough


269
00:14:07,814 --> 00:14:09,483 line:-2
that we really want
to change it in-line.


270
00:14:11,018 --> 00:14:13,420 line:-2
This is a great use
of a pop-up button


271
00:14:13,453 --> 00:14:16,423 line:-2
because we want the selection
to be the title of the button.


272
00:14:16,456 --> 00:14:19,026 line:-2
We can then present
all the color choices.


273
00:14:23.030 --> 00:14:25.332 line:-2 align:center
And on a new selection,
our app


274
00:14:25,365 --> 00:14:27,668 line:-2
can just update
for the color choice.


275
00:14:28,902 --> 00:14:31,305 line:-2
Let’s investigate
the code for that.


276
00:14:31,338 --> 00:14:33,307 line:-2
Here we actually have
the code to make


277
00:14:33,340 --> 00:14:36,076 line:-2
a simple pull-down menu
that we can just update.


278
00:14:37,811 --> 00:14:39,880 line:-2
Just like the toggle button,
we switch


279
00:14:39.913 --> 00:14:42.883 line:-2 align:center
changesSelectionAsPrimaryAction
to true.


280
00:14:42,916 --> 00:14:44,418 line:-1
And now it’s a pop-up button.


281
00:14:45,986 --> 00:14:48,055 line:-2
If we want to have
a particular color


282
00:14:48,088 --> 00:14:51,291 line:-2
be the default selection
instead of just the first color


283
00:14:51.325 --> 00:14:53.827 line:-2 align:center
in the list,
we can preassign that one


284
00:14:53,861 --> 00:14:56,096 line:-1
to “on” when we set the menu.


285
00:14:57,631 --> 00:14:59,800 line:0
That will make it
the default selection.


286
00:15:01,935 --> 00:15:05,038 line:0
We can check the selection
by asking the button’s menu


287
00:15:05,072 --> 00:15:07,341 align:center
for the current selectedElements,


288
00:15:07,374 --> 00:15:09,810 align:center
which will always have
exactly a single element.


289
00:15:11,245 --> 00:15:14,581 align:center
And if we need to set a new one
in code, we can just change


290
00:15:14,615 --> 00:15:18,285 line:0
the state on the element
from the button’s menu property.


291
00:15:20,387 --> 00:15:24,491 line:0
Pop-up buttons can also
be created in Interface Builder,


292
00:15:24,525 --> 00:15:26,393 align:center
but in this case we’re going
to want to retrieve


293
00:15:26,426 --> 00:15:28,662 line:0
the colors dynamically
from the server


294
00:15:28,695 --> 00:15:32,933 align:center
instead of using a fixed list,
so we’re gonna do it in code.


295
00:15:32,966 --> 00:15:35,502 align:center
To learn more about
using the new button system


296
00:15:35,536 --> 00:15:38,472 line:0
and button types
with Interface Builder,


297
00:15:38,505 --> 00:15:41,575 line:0
check out the “Build
interfaces with style” video.


298
00:15:43.277 --> 00:15:45.712 line:-2 align:center
One of the best parts
of these new button types


299
00:15:45.746 --> 00:15:49.216 line:-2 align:center
is that they automatically
work on Mac Catalyst.


300
00:15:49.249 --> 00:15:52.619 line:-2 align:center
Mac users expect buttons to look
and behave a certain way,


301
00:15:52,653 --> 00:15:56,623 line:-2
including pull-downs,
pop-ups, and toggle buttons.


302
00:15:56,657 --> 00:15:59,293 line:-2
With these iOS buttons,
they automatically


303
00:15:59,326 --> 00:16:01,061 line:-2
get updated
to their Mac versions.


304
00:16:02,796 --> 00:16:05,966 line:-2
So here we have a selection
of buttons from an iPad app,


305
00:16:05,999 --> 00:16:08,535 line:-2
like we’ve been using
throughout the presentation,


306
00:16:08.569 --> 00:16:10.637 line:-2 align:center
which include
the default borderless buttons


307
00:16:10.671 --> 00:16:13.273 line:-2 align:center
and some
using the new configurations


308
00:16:13.307 --> 00:16:15.509 line:-2 align:center
as well as pop-up
and pull-down buttons.


309
00:16:17.244 --> 00:16:19.546 line:-2 align:center
And here they are
with no manual changes


310
00:16:19,580 --> 00:16:21,348 line:-1
on Mac Catalyst.


311
00:16:21,381 --> 00:16:24,084 line:-2
Just the way a seasoned Mac user
would expect.


312
00:16:24.117 --> 00:16:26.353 line:-2 align:center
We get the standard
bezeled buttons,


313
00:16:26.386 --> 00:16:30.023 line:-2 align:center
including the Mac indicators for
pull-down and pop-up buttons.


314
00:16:31.825 --> 00:16:35.062 line:-2 align:center
In some cases, however,
the extra customization


315
00:16:35.095 --> 00:16:38.031 line:-2 align:center
of the iPad buttons
may be more appropriate


316
00:16:38.065 --> 00:16:40.167 line:-1 align:center
even for a Mac app.


317
00:16:40,200 --> 00:16:42,803 line:-2
For that, button support
changing the behavior style


318
00:16:42.836 --> 00:16:46.073 line:-2 align:center
from the default
of automatic to iPad.


319
00:16:47.207 --> 00:16:49.710 line:-2 align:center
This is useful
for very prominent,


320
00:16:49,743 --> 00:16:52,312 line:-2
custom buttons in an app,
like the check out button


321
00:16:52.346 --> 00:16:54.047 line:-1 align:center
we made earlier.


322
00:16:54,081 --> 00:16:55,816 line:-2
For more information
about building


323
00:16:55.849 --> 00:16:58.018 line:-2 align:center
and customizing
Mac Catalyst apps,


324
00:16:58.051 --> 00:17:00.854 line:-2 align:center
check out the “What’s
new in Mac Catalyst” video.


325
00:17:02,689 --> 00:17:05,659 line:-2
As you may have noticed
in the pop-up button examples,


326
00:17:05,692 --> 00:17:08,161 line:-2
much of the functionality
is built on top


327
00:17:08,195 --> 00:17:11,365 line:-2
of new
and existing features of UIMenu.


328
00:17:12.633 --> 00:17:16.370 line:-2 align:center
UIMenu pairs
really well with UIButton


329
00:17:16.403 --> 00:17:20.507 line:-2 align:center
and UIBarButtonItem
for lots of great interactions.


330
00:17:20.541 --> 00:17:23.377 line:-2 align:center
We’ve explored how you can
adjust the behavior of buttons


331
00:17:23,410 --> 00:17:25,979 line:-2
to create both pop-up buttons
and pull-down buttons.


332
00:17:26,013 --> 00:17:30,284 line:-2
On iOS and iPadOS,
these behaviors are independent


333
00:17:30,317 --> 00:17:32,886 line:-2
of the visual customizations,
so you can


334
00:17:32,920 --> 00:17:36,123 line:-2
easily combine them
with UIButtonConfiguration


335
00:17:36.156 --> 00:17:38.425 line:-2 align:center
to create
lots of different button styles.


336
00:17:40.294 --> 00:17:42.930 line:-2 align:center
These buttons also benefit
from improvements


337
00:17:42,963 --> 00:17:45,732 line:-2
in menus like the ability
for menu items


338
00:17:45,766 --> 00:17:48,068 line:-2
to have subtitles
for greater clarity.


339
00:17:49,670 --> 00:17:51,839 line:-2
On top of that,
submenu navigation


340
00:17:51,872 --> 00:17:55,375 line:-2
on iOS and iPadOS
has also been improved,


341
00:17:55,409 --> 00:17:58,579 line:-2
allowing the creation
of hierarchies within a menu.


342
00:17:58,612 --> 00:18:01,348 line:-2
And in some cases,
you might want the submenu


343
00:18:01,381 --> 00:18:03,517 line:-1
of a pull-down button to behave


344
00:18:03,550 --> 00:18:05,619 line:-2
as a single-selection
menu itself.


345
00:18:05.652 --> 00:18:08.222 line:-2 align:center
This can be useful
if you have a “sort-by” menu


346
00:18:08.255 --> 00:18:11.291 line:-2 align:center
within an action menu,
for example.


347
00:18:11,325 --> 00:18:13,527 line:-2
Some of
the new menu improvements


348
00:18:13,560 --> 00:18:15,462 line:-1
make this much easier to create.


349
00:18:16,830 --> 00:18:19,566 line:-2
Here’s a custom
pull-down bar button item


350
00:18:19,600 --> 00:18:21,502 line:-1
using a submenu in our code.


351
00:18:22.636 --> 00:18:24.238 line:-1 align:center
It has a couple of actions


352
00:18:24.271 --> 00:18:26.974 line:-2 align:center
and then a submenu
for sorting results.


353
00:18:27,007 --> 00:18:29,643 line:-2
Instead of manually turning
on and off the menu items


354
00:18:29,676 --> 00:18:32,079 line:-2
within that submenu,
we’re just gonna indicate


355
00:18:32.112 --> 00:18:34.314 line:-2 align:center
that this submenu
is for single selection


356
00:18:34,348 --> 00:18:36,617 line:-1
when we create it.


357
00:18:36.650 --> 00:18:40.654 line:-2 align:center
Now it gets the same
automatic selection behavior


358
00:18:40,687 --> 00:18:44,558 line:-2
that pop-up buttons get
but just within the submenu.


359
00:18:44,591 --> 00:18:47,327 line:-2
Only one selected element
will be allowed,


360
00:18:47,361 --> 00:18:50,397 line:-2
and the element selected will be
updated when the user taps it.


361
00:18:51,832 --> 00:18:55,569 line:-2
It can be updated or accessed
in code in the exact same way


362
00:18:55.602 --> 00:18:57.604 line:-2 align:center
as we did earlier
with the pop-up menu.


363
00:18:58,972 --> 00:19:01,475 line:-2
And single-selection behavior
works if the menu


364
00:19:01,508 --> 00:19:03,177 line:-1
has its own submenu.


365
00:19:03,210 --> 00:19:05,479 line:-2
Only one element
in the entire subtree


366
00:19:05,512 --> 00:19:08,448 line:-1
then can be selected at a time.


367
00:19:08.482 --> 00:19:10.484 line:-2 align:center
And the selectedElements
property


368
00:19:10.517 --> 00:19:14.421 line:-2 align:center
includes selection in submenus,
making the access


369
00:19:14,454 --> 00:19:16,957 line:-2
just as easy
as if we didn’t have a submenu.


370
00:19:20.027 --> 00:19:22.930 line:-2 align:center
So that’s how to make
better buttons in your app.


371
00:19:22.963 --> 00:19:24.698 line:-1 align:center
Add configurations to buttons


372
00:19:24,731 --> 00:19:27,034 line:-2
to get more control
over the styling


373
00:19:27.067 --> 00:19:29.203 line:-1 align:center
to unlock much richer styling


374
00:19:29.236 --> 00:19:32.339 line:-2 align:center
while still staying consistent
with the platform.


375
00:19:33,607 --> 00:19:36,343 line:-2
Also explore ways to replace
existing picker interfaces


376
00:19:36,376 --> 00:19:39,513 line:-2
or controls
with pop-up or toggle buttons


377
00:19:39,546 --> 00:19:41,348 line:-2
to get more
streamlined interactions.


378
00:19:42,516 --> 00:19:44,451 line:-2
With these changes,
you will likely find


379
00:19:44,484 --> 00:19:47,788 line:-2
UIButton subclasses that can
be removed or simplified.


380
00:19:48.956 --> 00:19:50.824 line:-2 align:center
And because the system
can better understand


381
00:19:50,858 --> 00:19:52,926 line:-2
your buttons,
you’ll get much better


382
00:19:52,960 --> 00:19:56,730 line:-2
Mac Catalyst
conversion automatically.


383
00:19:56.763 --> 00:19:58.131 line:-2 align:center
Thank you
for joining us,


384
00:19:58.165 --> 00:19:59.166 line:-1 align:center
and I hope you’ve enjoyed


385
00:19:59.199 --> 00:20:01.235 line:-2 align:center
this deep dive
into the world of buttons.


386
00:20:01,268 --> 00:20:04,271 line:0
[upbeat music]

