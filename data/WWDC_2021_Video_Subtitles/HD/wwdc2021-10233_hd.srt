2
00:00:00.267 --> 00:00:02.069 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,069 --> 00:00:05,672 line:-1
♪ Bass music playing ♪


4
00:00:05.672 --> 00:00:06.874 line:-1 position:50%
[KEYSTROKES]


5
00:00:06,874 --> 00:00:10,043 align:center size:2% line:0
♪


6
00:00:10,043 --> 00:00:11,411 line:-1
Jonathan Hogg: Hello,
and welcome to this session


7
00:00:11.411 --> 00:00:14.047 line:-1 position:50%
on the Accelerate
and associated frameworks.


8
00:00:14,047 --> 00:00:16,216 line:-1
I'm Jonathan from Apple's
Vector & Numerics team,


9
00:00:16,216 --> 00:00:18,085 line:-1
and today I'm going
to talk to you briefly


10
00:00:18,085 --> 00:00:20,120 line:-1
about the Accelerate framework


11
00:00:20.120 --> 00:00:22.522 line:-1 position:50%
before telling you what's new
in our machine learning library,


12
00:00:22.522 --> 00:00:24.424 line:-1 position:50%
BNNS.


13
00:00:24.424 --> 00:00:27.661 line:-1 position:50%
I'll then cover improvements
to simd.h,


14
00:00:27,661 --> 00:00:29,329 line:-1
and introduce Apple Archive,


15
00:00:29.329 --> 00:00:32.366 line:-1 position:50%
and our new Apple Encrypted
Archive containers.


16
00:00:32,366 --> 00:00:34,268 line:-1
So let's get started
with a brief overview


17
00:00:34,268 --> 00:00:37,104 line:-1
of the Accelerate framework.


18
00:00:37.104 --> 00:00:38.672 line:-1 position:50%
Accelerate provides
high-performance


19
00:00:38,672 --> 00:00:41,708 line:-1
numerical computation
across all Apple platforms:


20
00:00:41,708 --> 00:00:48,215 line:-1
MacOS, iOS, iPadOS,
watchOS and tvOS.


21
00:00:48.215 --> 00:00:49.783 line:-1 position:50%
Accelerate also provides access


22
00:00:49,783 --> 00:00:51,685 line:-1
to the machine learning
accelerators


23
00:00:51.685 --> 00:00:55.689 line:-1 position:50%
in Apple Silicon Macs and
recent iPhone and iPad devices.


24
00:00:55.689 --> 00:00:57.591 line:-1 position:50%
The only way to leverage
this hardware


25
00:00:57,591 --> 00:00:59,960 line:-1
is by calling Accelerate
either directly


26
00:00:59,960 --> 00:01:03,664 line:-1
or through higher-level
frameworks such as Core ML.


27
00:01:03.664 --> 00:01:06.166 line:-1 position:50%
Accelerate is composed
of several parts.


28
00:01:06.166 --> 00:01:09.169 line:-1 position:50%
vDSP provides primitives
for signal processing


29
00:01:09.169 --> 00:01:11.972 line:-1 position:50%
such as DFT and FFT routines.


30
00:01:11,972 --> 00:01:14,541 line:-1
vImage provides routines
for image processing


31
00:01:14,541 --> 00:01:17,611 line:-1
such as format conversion
and convolution.


32
00:01:17.611 --> 00:01:19.780 line:-1 position:50%
vForce provides
vectorized versions


33
00:01:19.780 --> 00:01:23.784 line:-1 position:50%
of transcendental functions
such as sine and cosine.


34
00:01:23.784 --> 00:01:26.653 line:-1 position:50%
BLAS and LAPACK provide
high-performance implantations


35
00:01:26.653 --> 00:01:29.022 line:-1 position:50%
of the standard dense matrix
algebra routines,


36
00:01:29.022 --> 00:01:30.791 line:-1 position:50%
while Sparse BLAS
and our Sparse Solvers


37
00:01:30,791 --> 00:01:33,994 line:-1
provide similar functionality
for sparse matrices.


38
00:01:33,994 --> 00:01:39,166 position:50%
Finally, BNNS provides support
for machine learning.


39
00:01:39.166 --> 00:01:40.600 line:-1 position:50%
I'm also going
to talk to you today


40
00:01:40,600 --> 00:01:43,003 line:-1
about some related frameworks.


41
00:01:43.003 --> 00:01:46.974 line:-1 position:50%
simd.h provides computational
small vectors and matrices,


42
00:01:46.974 --> 00:01:49.076 line:-1 position:50%
such as those covered
in graphics programming,


43
00:01:49.076 --> 00:01:51.111 line:-1 position:50%
whilst Compression
and Apple Archive


44
00:01:51,111 --> 00:01:54,581 line:-1
provide support
for lossless data compression.


45
00:01:54.581 --> 00:01:56.316 line:-1 position:50%
In order to use
these frameworks,


46
00:01:56,316 --> 00:01:59,886 line:-1
simply add the relevant include
or import statement to your code


47
00:01:59,886 --> 00:02:03,457 line:-1
and add the framework
to your Xcode project.


48
00:02:03,457 --> 00:02:07,227 line:-1
Now, let me tell you
about BNNS in more detail.


49
00:02:07,227 --> 00:02:10,430 line:-1
BNNS stands for
Basic Neural Network Subroutines


50
00:02:10.430 --> 00:02:12.632 line:-1 position:50%
and provides performance
primitives for machine learning


51
00:02:12.632 --> 00:02:14.167 line:-1 position:50%
on the CPU.


52
00:02:14,167 --> 00:02:14,935 line:-1
For those of you unfamiliar


53
00:02:14,935 --> 00:02:17,070 line:-1
with Apple's machine
learning ecosystem,


54
00:02:17.070 --> 00:02:19.773 line:-1 position:50%
this diagram shows
the lay of the land.


55
00:02:19,773 --> 00:02:21,708 line:-1
There are three main
hardware blocks:


56
00:02:21.708 --> 00:02:24.478 line:-1 position:50%
the CPU, which includes the
machine learning accelerators


57
00:02:24.478 --> 00:02:26.079 line:-1 position:50%
I mentioned previously;


58
00:02:26.079 --> 00:02:29.516 line:-1 position:50%
the GPU;
and the separate neural engine.


59
00:02:29.516 --> 00:02:32.486 line:-1 position:50%
BNNS provides performance
primitives on the CPU


60
00:02:32.486 --> 00:02:35.389 line:-1 position:50%
in the same way as MPS
provides performance primitives


61
00:02:35.389 --> 00:02:37.758 line:-1 position:50%
on the GPU.


62
00:02:37.758 --> 00:02:40.027 line:-1 position:50%
Above this layer, there are
a number of frameworks


63
00:02:40,027 --> 00:02:42,396 line:-1
that run on one
or more of these backends.


64
00:02:42,396 --> 00:02:44,698 line:-1
These include Apple's high-level
machine learning frameworks --


65
00:02:44,698 --> 00:02:46,600 line:-1
Core ML and Create ML --


66
00:02:46.600 --> 00:02:48.301 line:-1 position:50%
as well as
the specialist frameworks


67
00:02:48.301 --> 00:02:51.338 line:-1 position:50%
like Vision
and Natural Language.


68
00:02:51,338 --> 00:02:54,274 position:50%
BNNS provides support for both
training and inference


69
00:02:54,274 --> 00:02:56,309 position:50%
across a wide range
of layer types,


70
00:02:56,309 --> 00:02:59,012 line:0
as well as support for the
optimizers shown at the bottom.


71
00:02:59,012 --> 00:03:00,147 position:50%
In this release,


72
00:03:00,147 --> 00:03:02,416 line:0
we have added support
for several new layer types:


73
00:03:02,416 --> 00:03:06,219 line:0
embedding, random fill,
and quantization;


74
00:03:06,219 --> 00:03:09,222 line:0
as well as support
for AdamW optimizer.


75
00:03:09,222 --> 00:03:11,591 line:-1
We've also improved
existing layers,


76
00:03:11,591 --> 00:03:13,627 line:-1
adding two new
activation functions:


77
00:03:13,627 --> 00:03:16,563 line:-1
SiLU and HardSwish,


78
00:03:16,563 --> 00:03:18,632 line:-1
as well as support for new
arithmetic functions:


79
00:03:18.632 --> 00:03:20.867 line:-1 position:50%
ternary select, multiply add,


80
00:03:20,867 --> 00:03:24,805 line:-1
as well as element-wise
minimum and maximum.


81
00:03:24,805 --> 00:03:26,606 line:-1
Layer fusions
provide the ability


82
00:03:26,606 --> 00:03:29,042 line:-1
to consume the output
of one layer immediately


83
00:03:29,042 --> 00:03:30,911 line:-1
as the input
to a subsequent layer,


84
00:03:30,911 --> 00:03:32,579 line:-1
avoiding the need
to write it out to memory


85
00:03:32.579 --> 00:03:34.114 line:-1 position:50%
and read it back in again.


86
00:03:34,114 --> 00:03:35,816 position:50%
We've added layer fusions
of convolution


87
00:03:35,816 --> 00:03:38,685 line:0
and fully connected layers
with the new quantization layer,


88
00:03:38,685 --> 00:03:39,453 line:0
as well as a fusion


89
00:03:39,453 --> 00:03:42,956 position:50%
between the arithmetic
and normalization layers.


90
00:03:42.956 --> 00:03:44.825 line:-1 position:50%
Other improvements
include improved support


91
00:03:44,825 --> 00:03:47,094 line:-1
for gradient clipping
in the optimizer,


92
00:03:47.094 --> 00:03:49.196 line:-1 position:50%
which can also be used
as standalone functions,


93
00:03:49.196 --> 00:03:53.133 line:-1 position:50%
as well as AMSGrad support
for our Adam-based optimizers.


94
00:03:53.133 --> 00:03:55.268 line:-1 position:50%
Together, these improvements
have expanded the range


95
00:03:55.268 --> 00:03:59.072 line:-1 position:50%
and network architectures
we can accelerate even further.


96
00:03:59,072 --> 00:04:03,210 line:-1
Now, let me tell you about
some improvements to simd.h.


97
00:04:03,210 --> 00:04:06,413 line:-1
simd.h provides computational
primitives on small vectors


98
00:04:06,413 --> 00:04:09,416 line:-1
and matrices that fit
into the CPU's registers,


99
00:04:09.416 --> 00:04:12.319 line:-1 position:50%
including support for functions
such as sine and cosine


100
00:04:12.319 --> 00:04:14.321 line:-1 position:50%
as well as useful
geometric operations,


101
00:04:14.321 --> 00:04:16.990 line:-1 position:50%
including support
for quaternions.


102
00:04:16.990 --> 00:04:19.960 line:-1 position:50%
The thing I really like about
simd.h is it lets us jump in


103
00:04:19,960 --> 00:04:22,262 line:-1
and get 90 percent
of the benefit of vectorization


104
00:04:22,262 --> 00:04:24,531 line:-1
with 10 percent of the effort.


105
00:04:24.531 --> 00:04:26.299 line:-1 position:50%
Here, let me show you.


106
00:04:26.299 --> 00:04:27.934 line:-1 position:50%
Here's a neural network
activation function


107
00:04:27,934 --> 00:04:29,202 line:-1
I just invented.


108
00:04:29,202 --> 00:04:32,439 line:-1
As you can see, it has
three different branches.


109
00:04:32.439 --> 00:04:34.107 line:-1 position:50%
If the input is less than
minus pi,


110
00:04:34,107 --> 00:04:36,143 line:-1
I just return zero.


111
00:04:36,143 --> 00:04:37,911 line:-1
If it's between
minus pi and pi,


112
00:04:37.911 --> 00:04:39.880 line:-1 position:50%
I return two times
the exponent of x,


113
00:04:39.880 --> 00:04:42.716 line:-1 position:50%
multiplied by x plus pi
over two.


114
00:04:42,716 --> 00:04:44,384 line:-1
Otherwise,
if it's greater than pi,


115
00:04:44.384 --> 00:04:47.220 line:-1 position:50%
I return two times
the exponent.


116
00:04:47.220 --> 00:04:50.457 line:-1 position:50%
That's great, but if I have
a large amount of data,


117
00:04:50,457 --> 00:04:53,727 line:-1
I may want to run it faster
than a scalar loop allows.


118
00:04:53,727 --> 00:04:56,396 line:-1
So let me show you how
to implement that in simd.


119
00:04:56.396 --> 00:04:58.999 line:-1 position:50%
I already have some
boilerplate in place,


120
00:04:58,999 --> 00:05:01,468 line:-1
an extension which allows me
to easily write vectors


121
00:05:01.468 --> 00:05:03.103 line:-1 position:50%
to a buffer,


122
00:05:03,103 --> 00:05:06,206 line:-1
and a simple loop that iterates
over our output array


123
00:05:06,206 --> 00:05:10,243 line:-1
in increments of one length
eight vector at a time.


124
00:05:10,243 --> 00:05:12,412 line:-1
The interesting part is how
to translate our scalar function


125
00:05:12,412 --> 00:05:14,080 line:-1
into a simd equivalent.


126
00:05:14.080 --> 00:05:16.683 line:-1 position:50%
Let's start by looking again
at our scalar code.


127
00:05:16,683 --> 00:05:18,685 line:-1
I see it has several branches.


128
00:05:18,685 --> 00:05:20,854 line:-1
These don't work well
for vectorization.


129
00:05:20,854 --> 00:05:23,323 line:-1
Instead, let's construct this
out of parts we can merge


130
00:05:23.323 --> 00:05:26.826 line:-1 position:50%
based on a mask.


131
00:05:26,826 --> 00:05:29,663 line:-1
Looking more closely,
if x is less than minus pi,


132
00:05:29,663 --> 00:05:31,631 line:-1
I just return zero.


133
00:05:31,631 --> 00:05:32,899 line:-1
If it's greater,


134
00:05:32,899 --> 00:05:38,438 line:-1
I return an expression involving
two times exponent of x.


135
00:05:38.438 --> 00:05:41.608 line:-1 position:50%
Let's pull that out.


136
00:05:41.608 --> 00:05:45.078 line:-1 position:50%
[KEYSTROKES]


137
00:05:45,078 --> 00:05:49,549 line:-1
Now, we want to construct
a vector from that y,


138
00:05:49,549 --> 00:05:54,955 line:-1
replacing with zero everywhere


139
00:05:54.955 --> 00:06:00.560 line:-1 position:50%
that x is element-wise
less than minus pi.


140
00:06:00.560 --> 00:06:02.796 line:-1 position:50%
Next, we can look
at a greater than case.


141
00:06:02.796 --> 00:06:06.099 line:-1 position:50%
Here, we are either multiplying
by one in the high region,


142
00:06:06,099 --> 00:06:09,869 line:-1
or by x plus pi over two
in the middle region.


143
00:06:09.869 --> 00:06:12.772 line:-1 position:50%
So let's write that
in the same way.


144
00:06:12,772 --> 00:06:17,611 position:50%
We take our x plus pi
over two expression


145
00:06:17,611 --> 00:06:20,547 position:50%
[KEYSTROKES]


146
00:06:20,547 --> 00:06:26,052 position:50%
and this time we're replacing
with one everywhere


147
00:06:26,052 --> 00:06:30,290 position:50%
that x is element-wise
greater than or equal to pi.


148
00:06:30.290 --> 00:06:32.425 line:-1 position:50%
Now all that remains


149
00:06:32,425 --> 00:06:35,195 line:-1
is to multiply
these two quantities together.


150
00:06:35,195 --> 00:06:36,896 position:50%
[KEYSTROKES]


151
00:06:36,896 --> 00:06:43,036 line:-1
Obviously, if a zero element,
multiplying by either value of b


152
00:06:43,036 --> 00:06:44,804 line:-1
still returns zero.


153
00:06:44,804 --> 00:06:47,807 line:-1
So let's run that
and see how it looks.


154
00:06:53,446 --> 00:06:56,283 line:0
Now, I can see --
looking down the console --


155
00:06:56,283 --> 00:06:59,252 position:50%
that my new simd version
is almost three times faster


156
00:06:59,252 --> 00:07:02,255 line:0
than the previous scalar code.


157
00:07:02.255 --> 00:07:05.759 line:-1 position:50%
So how is simd improved
in this release?


158
00:07:05.759 --> 00:07:09.562 line:-1 position:50%
We've improved usability for C++
programmers using templates.


159
00:07:09,562 --> 00:07:11,331 line:-1
We have added types
and traits structures


160
00:07:11.331 --> 00:07:13.400 line:-1 position:50%
to allow you to move between
the underlying scalar type


161
00:07:13,400 --> 00:07:15,302 line:-1
and vector length
and the concrete simd type


162
00:07:15.302 --> 00:07:17.237 line:-1 position:50%
without complicated
code structures


163
00:07:17.237 --> 00:07:20.640 line:-1 position:50%
or needing to implement
similar types yourself.


164
00:07:20,640 --> 00:07:23,877 position:50%
To simplify their use, we have
also added convenient aliases


165
00:07:23,877 --> 00:07:27,080 line:0
to reduce the need
for C++ boilerplate.


166
00:07:27,080 --> 00:07:29,082 line:-1
Here's an example
of what they look like in use.


167
00:07:29.082 --> 00:07:30.850 line:-1 position:50%
The vector and matrix types
allow us to go


168
00:07:30.850 --> 00:07:33.486 line:-1 position:50%
from an underlying type --
such as float or int --


169
00:07:33,486 --> 00:07:35,755 line:-1
and a vector length
to a concrete type


170
00:07:35.755 --> 00:07:38.358 line:-1 position:50%
and also have members providing
access to related types,


171
00:07:38.358 --> 00:07:39.926 line:-1 position:50%
such as the unaligned version


172
00:07:39.926 --> 00:07:43.797 line:-1 position:50%
and the mask type
resulting from comparisons.


173
00:07:43,797 --> 00:07:45,899 line:-1
The Vector_t
and Matrix_t aliases


174
00:07:45.899 --> 00:07:48.401 line:-1 position:50%
provide simplified syntax
to access the same definitions


175
00:07:48.401 --> 00:07:49.969 line:-1 position:50%
as we had before.


176
00:07:49.969 --> 00:07:52.872 line:-1 position:50%
The get_traits struct allows us
to go in the other direction,


177
00:07:52,872 --> 00:07:55,742 line:-1
moving from the concrete
simd type to the generic one.


178
00:07:55,742 --> 00:07:58,545 line:-1
And again, there are aliases
to simplify the syntax


179
00:07:58,545 --> 00:08:01,047 line:-1
for common use cases.


180
00:08:01,047 --> 00:08:02,782 line:-1
We've also added
templated versions


181
00:08:02,782 --> 00:08:04,818 line:-1
of the make
and convert functions


182
00:08:04,818 --> 00:08:06,920 line:-1
to allow their use
in templated code.


183
00:08:06.920 --> 00:08:08.922 line:-1 position:50%
These work the same
as the existing functions,


184
00:08:08.922 --> 00:08:11.891 line:-1 position:50%
but their destination type
is now a template parameter


185
00:08:11.891 --> 00:08:14.828 line:-1 position:50%
rather than part
of the function name.


186
00:08:14.828 --> 00:08:17.163 line:-1 position:50%
In addition
to our C++ improvements,


187
00:08:17,163 --> 00:08:18,665 line:-1
we have added
several new functions


188
00:08:18,665 --> 00:08:21,000 line:-1
supported across
all our languages.


189
00:08:21,000 --> 00:08:22,202 line:-1
These are classification
functions --


190
00:08:22,202 --> 00:08:24,003 line:-1
like isfinite and isinf --


191
00:08:24.003 --> 00:08:26.940 line:-1 position:50%
that provide vector versions
of the scalar functions in libm,


192
00:08:26,940 --> 00:08:29,709 line:-1
as well as new functions for
calculating the gamma function,


193
00:08:29.709 --> 00:08:32.612 line:-1 position:50%
as well as the trace
of simd matrices.


194
00:08:32.612 --> 00:08:34.447 line:-1 position:50%
Now, introducing Apple Archive


195
00:08:34,447 --> 00:08:37,817 line:-1
and our new Apple Encrypted
Archive formats.


196
00:08:37,817 --> 00:08:40,286 line:-1
Apple Archive has been powering
our system updates


197
00:08:40.286 --> 00:08:42.389 line:-1 position:50%
for the better part of a decade.


198
00:08:42.389 --> 00:08:43.857 line:-1 position:50%
In the macOS 11 release,


199
00:08:43.857 --> 00:08:45.892 line:-1 position:50%
we gave you access
to the compressed container


200
00:08:45.892 --> 00:08:48.762 line:-1 position:50%
and archive format.


201
00:08:48.762 --> 00:08:50.463 line:-1 position:50%
New in macOS 12,


202
00:08:50,463 --> 00:08:54,067 line:-1
we have added APIs
for encryption to this support.


203
00:08:54.067 --> 00:08:55.335 line:-1 position:50%
The archive format itself


204
00:08:55.335 --> 00:08:57.437 line:-1 position:50%
provides a modern,
modular approach,


205
00:08:57,437 --> 00:08:59,372 line:-1
allowing you to select
exactly which file attributes


206
00:08:59,372 --> 00:09:01,374 line:-1
and metadata you want to store.


207
00:09:01,374 --> 00:09:03,510 line:0
It is streamable, which means
you don't have to worry about


208
00:09:03,510 --> 00:09:05,845 position:50%
fitting the entire data
in memory at once.


209
00:09:05,845 --> 00:09:07,881 position:50%
It also supports
separate manifest files


210
00:09:07,881 --> 00:09:12,318 position:50%
for indexing into large archives
like file system images.


211
00:09:12.318 --> 00:09:14.721 line:-1 position:50%
The new Apple Encrypted Archive
builds on this,


212
00:09:14.721 --> 00:09:17.924 line:-1 position:50%
combining compression,
authenticated encryption,


213
00:09:17,924 --> 00:09:22,829 line:-1
and a digital signature
into a single secure package.


214
00:09:22,829 --> 00:09:24,631 line:-1
It gives you state-of-the-art cryptography


215
00:09:24.631 --> 00:09:27.267 line:-1 position:50%
that's been designed and audited
by our Security team,


216
00:09:27.267 --> 00:09:29.436 line:-1 position:50%
as well as outside experts.


217
00:09:29.436 --> 00:09:33.173 line:-1 position:50%
Data confidentiality means
that your data stays secret.


218
00:09:33,173 --> 00:09:35,475 line:-1
Data authenticity means
that you can be sure


219
00:09:35,475 --> 00:09:37,844 line:-1
it hasn't been corrupted
in transit.


220
00:09:37,844 --> 00:09:41,114 line:-1
Sender authentication means
you can be sure who sent it.


221
00:09:41,114 --> 00:09:43,683 line:-1
Signature privacy means
that in a public key context,


222
00:09:43,683 --> 00:09:46,719 line:-1
only you and the sender
know who has signed it.


223
00:09:46,719 --> 00:09:49,589 position:50%
We also obfuscate metadata --
such as the file lengths --


224
00:09:49,589 --> 00:09:52,725 position:50%
and include resigning
attack protection.


225
00:09:52,725 --> 00:09:54,527 line:0
Together, this means
you can be confident


226
00:09:54,527 --> 00:09:58,531 position:50%
that your data remains
private and secure.


227
00:09:58.531 --> 00:10:00.667 line:-1 position:50%
In order to facilitate
correct deployment,


228
00:10:00,667 --> 00:10:02,368 line:-1
we offer a number
of different profiles


229
00:10:02.368 --> 00:10:04.304 line:-1 position:50%
for different use cases.


230
00:10:04.304 --> 00:10:06.539 line:-1 position:50%
The basic profile
is to have a digital signature


231
00:10:06.539 --> 00:10:07.874 line:-1 position:50%
without encryption.


232
00:10:07.874 --> 00:10:09.976 line:-1 position:50%
This can be used for things
like software updates


233
00:10:09.976 --> 00:10:11.845 line:-1 position:50%
where the contents
are not secret,


234
00:10:11.845 --> 00:10:15.148 line:-1 position:50%
but you want to be sure the data
hasn't been tampered with.


235
00:10:15.148 --> 00:10:17.150 line:-1 position:50%
Next, we have
symmetric encryption,


236
00:10:17,150 --> 00:10:18,651 line:-1
with or without a signature,


237
00:10:18.651 --> 00:10:21.054 line:-1 position:50%
using a securely shared
binary key.


238
00:10:21,054 --> 00:10:22,689 line:-1
This is similar
to the next option


239
00:10:22,689 --> 00:10:25,925 line:-1
which uses a password
rather than a binary key.


240
00:10:25.925 --> 00:10:28.728 line:-1 position:50%
Finally, we have full-blown
public key encryption,


241
00:10:28.728 --> 00:10:30.997 line:-1 position:50%
again with or without
signature.


242
00:10:30,997 --> 00:10:32,765 position:50%
In all profiles,
compression is optional


243
00:10:32,765 --> 00:10:36,035 line:0
and data
is always authenticated.


244
00:10:36,035 --> 00:10:37,270 position:50%
To work with these formats,


245
00:10:37,270 --> 00:10:39,239 line:0
we provide a number
of command-line tools.


246
00:10:39,239 --> 00:10:41,975 line:-1
For working with the compressed
archive portion of the format,


247
00:10:41.975 --> 00:10:43.743 line:-1 position:50%
there is compression_tool,


248
00:10:43,743 --> 00:10:47,046 line:-1
and for the encrypted archive,
there is aea.


249
00:10:47,046 --> 00:10:51,651 line:-1
The aa tool handles
the entire container.


250
00:10:51.651 --> 00:10:53.553 line:-1 position:50%
There is of course also an API


251
00:10:53.553 --> 00:10:57.824 line:-1 position:50%
provided by the Apple Archive
framework in both Swift and C.


252
00:10:57.824 --> 00:10:58.925 line:-1 position:50%
It is stream-based,


253
00:10:58,925 --> 00:11:01,828 line:-1
allowing for both sequential
and random access.


254
00:11:01.828 --> 00:11:03.997 line:-1 position:50%
Its implementation
is multithreaded


255
00:11:03.997 --> 00:11:06.699 line:-1 position:50%
for blazingly fast performance.


256
00:11:06.699 --> 00:11:08.801 line:-1 position:50%
So, let's see
this API in action.


257
00:11:08.801 --> 00:11:11.638 line:-1 position:50%
Here, we have a simple demo
app we have put together.


258
00:11:11,638 --> 00:11:14,307 line:-1
The top portion of the window
acts as a drag-and-drop target


259
00:11:14,307 --> 00:11:15,942 line:-1
for things we want to encrypt,


260
00:11:15.942 --> 00:11:18.778 line:-1 position:50%
whilst the bottom part
is a simple status pane.


261
00:11:18,778 --> 00:11:21,548 line:-1
Let's say I want to encrypt
this TopSecret directory.


262
00:11:21.548 --> 00:11:25.018 line:-1 position:50%
I just drag and drop
this into the app.


263
00:11:25,018 --> 00:11:26,553 line:-1
And, oh no!
We get an error.


264
00:11:26,553 --> 00:11:29,422 line:-1
We haven't implemented
this function yet!


265
00:11:29.422 --> 00:11:31.224 line:-1 position:50%
Let's do that now.


266
00:11:31,224 --> 00:11:34,694 line:-1
So, what do we need to do to
encrypt this with Apple Archive?


267
00:11:34.694 --> 00:11:36.729 line:-1 position:50%
First, we need
an encryption context


268
00:11:36.729 --> 00:11:39.666 line:-1 position:50%
that describes the algorithm
and profile to use,


269
00:11:39.666 --> 00:11:42.201 line:-1 position:50%
along with our encryption
secret.


270
00:11:42,201 --> 00:11:46,639 line:-1
We also need a file stream we're
going to write the archive to.


271
00:11:46,639 --> 00:11:49,742 line:-1
We combine these
to create an encryption stream.


272
00:11:49,742 --> 00:11:52,478 line:-1
The encryption stream
will encrypt a stream of bytes,


273
00:11:52,478 --> 00:11:54,514 line:-1
so we need an adaptor that
will translate the directory


274
00:11:54.514 --> 00:11:56.549 line:-1 position:50%
we want to encrypt into such.


275
00:11:56.549 --> 00:11:59.953 line:-1 position:50%
This is the encoder stream.


276
00:11:59,953 --> 00:12:02,055 line:-1
The data, of course,
flows in the opposite direction


277
00:12:02.055 --> 00:12:03.790 line:-1 position:50%
to the object creation.


278
00:12:03,790 --> 00:12:06,159 position:50%
We feed archive entries
into the encoder stream,


279
00:12:06,159 --> 00:12:08,828 line:0
which transform them into bytes
for the encryption stream,


280
00:12:08,828 --> 00:12:12,899 line:0
which then outputs the encrypted
data to the file stream.


281
00:12:12,899 --> 00:12:14,434 position:50%
Let's see how that looks
in code.


282
00:12:14.434 --> 00:12:17.337 line:-1 position:50%
Here, we specify that we're
using a symmetric profile.


283
00:12:17.337 --> 00:12:18.605 line:-1 position:50%
And the "none" tells us


284
00:12:18.605 --> 00:12:21.074 line:-1 position:50%
that we're going to use
no digital signature.


285
00:12:21,074 --> 00:12:22,842 line:-1
The initial portion
of the enum


286
00:12:22.842 --> 00:12:26.446 line:-1 position:50%
just specifies the particular
algorithm we want to use.


287
00:12:26.446 --> 00:12:30.883 line:-1 position:50%
Here, we're going to use "lzfse"
to compress our data.


288
00:12:30,883 --> 00:12:32,251 line:-1
With the context created,


289
00:12:32,251 --> 00:12:36,656 line:-1
we just need to specify
our symmetric encryption key.


290
00:12:36.656 --> 00:12:40.226 line:-1 position:50%
Next, we create
those three streams.


291
00:12:40.226 --> 00:12:44.263 line:-1 position:50%
[KEYSTROKES]


292
00:12:44.263 --> 00:12:47.066 line:-1 position:50%
First, we create
the file stream,


293
00:12:47,066 --> 00:12:49,302 line:-1
then we combine it
with a context


294
00:12:49.302 --> 00:12:51.537 line:-1 position:50%
to create the encryptionStream.


295
00:12:51,537 --> 00:12:54,841 line:-1
Finally, we derive
the encoderStream.


296
00:12:54.841 --> 00:12:56.275 line:-1 position:50%
Now, it's important
that we remember


297
00:12:56.275 --> 00:12:59.445 line:-1 position:50%
to close these streams
in the correct order.


298
00:12:59,445 --> 00:13:01,280 position:50%
In particular,
closing the encryptionStream


299
00:13:01,280 --> 00:13:03,149 line:0
does a lot of work
behind the scenes,


300
00:13:03,149 --> 00:13:06,119 line:0
as it signs and seals
the archive.


301
00:13:06.119 --> 00:13:08.821 line:-1 position:50%
Finally, all that remains


302
00:13:08.821 --> 00:13:13.326 line:-1 position:50%
is for us to feed our files
into the encoderStream.


303
00:13:13,326 --> 00:13:17,330 line:-1
I specify the file attributes
I want to encode


304
00:13:17.330 --> 00:13:21.067 line:-1 position:50%
and then call the
writeDirectoryContents method.


305
00:13:21,067 --> 00:13:24,604 line:-1
All that remains is print
a status message to the console


306
00:13:24,604 --> 00:13:26,072 line:-1
with the encryption key.


307
00:13:26.072 --> 00:13:29.242 line:-1 position:50%
Let's see if that worked.


308
00:13:29,242 --> 00:13:31,544 line:-1
If I drop our TopSecret
directory into the app,


309
00:13:31.544 --> 00:13:36.082 line:-1 position:50%
it succeeds, encrypts it, and
prints out our encryption key.


310
00:13:36.082 --> 00:13:39.686 line:-1 position:50%
Now, if I drag and drop our
encrypted archive into the app,


311
00:13:39,686 --> 00:13:42,221 line:-1
it tries to decrypt it
and asks for the encryption key.


312
00:13:42.221 --> 00:13:46.092 line:-1 position:50%
So let's copy and paste
that encryption key


313
00:13:46,092 --> 00:13:48,561 line:-1
and let's see what's inside.


314
00:13:48,561 --> 00:13:51,264 line:-1
Mmm, delicious!


315
00:13:51,264 --> 00:13:53,766 line:-1
That's everything I have for you
on Apple Encrypted Archive,


316
00:13:53,766 --> 00:13:55,635 line:-1
so let's wrap up.


317
00:13:55,635 --> 00:13:57,303 line:-1
Today, I talked to you
about improvements


318
00:13:57.303 --> 00:13:58.905 line:-1 position:50%
to the Accelerate framework,


319
00:13:58.905 --> 00:14:02.041 line:-1 position:50%
including support
for new layer types in BNNS,


320
00:14:02.041 --> 00:14:04.043 line:-1 position:50%
as well as expanded C++ support


321
00:14:04,043 --> 00:14:07,246 line:-1
and other functionality
in simd.h.


322
00:14:07,246 --> 00:14:09,515 line:0
I then gave you an introduction
to the Apple Archive


323
00:14:09,515 --> 00:14:11,617 position:50%
and new Apple Encrypted Archive
formats


324
00:14:11,617 --> 00:14:14,053 line:0
and their support
in the frameworks.


325
00:14:14,053 --> 00:14:17,090 line:0
Thank you
and enjoy the rest of WWDC.


326
00:14:17,090 --> 00:14:20,593 position:89% size:2% align:center
♪

