2
00:00:00,534 --> 00:00:07,541 line:-1
[upbeat music]


3
00:00:09.042 --> 00:00:11.445 line:-2 align:center
[Camille] Hi.
I'm Camille Moussette,


4
00:00:11.445 --> 00:00:14.314 line:-2 align:center
designer
on the Apple Design team.


5
00:00:14.314 --> 00:00:16.149 line:-2 align:center
In this session,
I will walk you through


6
00:00:16,149 --> 00:00:18,986 line:-2
the practical steps
and design considerations


7
00:00:18.986 --> 00:00:22.155 line:-2 align:center
for adding audio and haptic
feedback to an app.


8
00:00:22,155 --> 00:00:25,926 line:-2
Historically, it's been quite
challenging both from a design


9
00:00:25,926 --> 00:00:29,062 line:-2
and engineering perspective
to deliver rich app experiences


10
00:00:29,062 --> 00:00:32,466 line:-2
that include animation,
sound, and haptics.


11
00:00:32.466 --> 00:00:35.869 line:-2 align:center
With Core Haptics on iPhone,
it's now easier to create


12
00:00:35.869 --> 00:00:39.373 line:-2 align:center
magical moments that look,
sound, and feel real.


13
00:00:39,373 --> 00:00:41,608 line:-2
To explain
and practice those skills,


14
00:00:41,608 --> 00:00:44,278 line:-2
I'll use an iOS app
derived from a previous


15
00:00:44.278 --> 00:00:47.114 line:-2 align:center
code sample project
called HapticBounce.


16
00:00:47,114 --> 00:00:49,816 line:-2
A few additions were
made to make it like


17
00:00:49.816 --> 00:00:53.253 line:-2 align:center
a mini game and to offer
a canvas to design visual,


18
00:00:53,253 --> 00:00:56,456 line:-2
sound, and haptics
working well together.


19
00:00:56.456 --> 00:00:59.960 line:-2 align:center
The new demo
is called HapticRicochet.


20
00:01:01.895 --> 00:01:05.632 line:-2 align:center
HapticRicochet is the story
of a ball that comes to life


21
00:01:05.632 --> 00:01:07.868 line:-2 align:center
in the iPhone
and moves around based on


22
00:01:07.868 --> 00:01:09.903 line:-1 align:center
the iPhone's orientations.


23
00:01:09,903 --> 00:01:13,707 line:-2
The ball rolls around
and bounces off the walls


24
00:01:13.707 --> 00:01:16.310 line:-2 align:center
of the phone with audio
and haptic feedback,


25
00:01:16,310 --> 00:01:18,946 line:-2
just like you expect
in the physical world.


26
00:01:18,946 --> 00:01:22,049 line:-1
If you tap the ball...


27
00:01:22,049 --> 00:01:23,717 line:-1
it grows into a larger ball.


28
00:01:23,717 --> 00:01:28,722 line:-2
If you tap once more,
a shield gets added to the ball.


29
00:01:28.722 --> 00:01:32.392 line:-2 align:center
That shield gets damaged
and depleted with each collision


30
00:01:32,392 --> 00:01:36,029 line:-2
with the walls, and ultimately
the ball implodes and dies.


31
00:01:37.197 --> 00:01:40.133 line:-2 align:center
We also added a texture
to the background that you


32
00:01:40.133 --> 00:01:43.203 line:-2 align:center
enable or disable by tapping
anywhere on the background.


33
00:01:43,203 --> 00:01:45,372 line:-1
[bass bloop]


34
00:01:45,372 --> 00:01:48,008 line:-1
[bass thrumming]


35
00:01:48,008 --> 00:01:52,813 line:-2
For this session, I will
focus on only two mechanics:


36
00:01:52.813 --> 00:01:55.983 line:-2 align:center
adding the shield and enabling
the rolling texture.


37
00:01:55,983 --> 00:01:59,419 line:-2
Before I proceed further,
let's review the agenda.


38
00:01:59,419 --> 00:02:02,823 line:-2
I'll first review the key audio
and haptic design principles


39
00:02:02,823 --> 00:02:04,892 line:-1
we often use within Apple.


40
00:02:04.892 --> 00:02:09.763 line:-2 align:center
I will follow up with a brief
introduction to Core Haptics,


41
00:02:09.763 --> 00:02:12.933 line:-2 align:center
the framework that enables
rich multimodal feedback.


42
00:02:14,835 --> 00:02:16,603 line:-2
The core of the session
will examine


43
00:02:16.603 --> 00:02:18.939 line:-2 align:center
the HapticRicochet
project in Xcode


44
00:02:18.939 --> 00:02:22.376 line:-2 align:center
and see how one adds,
designs, and refines


45
00:02:22,376 --> 00:02:26,146 line:-2
feedback for the shield
and rolling texture moments.


46
00:02:26,146 --> 00:02:29,883 line:-2
Designing multimodal
experiences can be challenging,


47
00:02:29,883 --> 00:02:34,588 line:-2
but when done well, it truly
elevates the user experience.


48
00:02:34,588 --> 00:02:38,158 line:-2
It feels magical,
delightful, and just right.


49
00:02:38,158 --> 00:02:41,929 line:-2
One example
is the Flashlight button in iOS.


50
00:02:41.929 --> 00:02:45.999 line:-2 align:center
It combines visual animation,
sound, and haptic feedback


51
00:02:45,999 --> 00:02:50,604 line:-2
in a unified experience that is
clear, precise, and succinct.


52
00:02:50,604 --> 00:02:53,173 line:-2
It's an iterative
and creative process


53
00:02:53,173 --> 00:02:56,510 line:-2
that involves design
and engineering effort.


54
00:02:56,510 --> 00:03:00,214 line:-2
Normally you would feel the
haptics rather than hear them,


55
00:03:00.214 --> 00:03:02.082 line:-2 align:center
but for demonstration
purposes,


56
00:03:02,082 --> 00:03:04,251 line:-2
we've converted
these haptics to sound


57
00:03:04,251 --> 00:03:07,154 line:-2
so you can hear it
in this video.


58
00:03:07.154 --> 00:03:10.023 line:-2 align:center
To help achieve magic and
delight in your app experience,


59
00:03:10,023 --> 00:03:13,360 line:-2
here are three principles
to guide the work.


60
00:03:13.360 --> 00:03:15.329 line:-2 align:center
They have been useful
to us internally,


61
00:03:15,329 --> 00:03:18,031 line:-2
and I hope they can help you
as well.


62
00:03:18,031 --> 00:03:20,934 line:-1
They are causality,


63
00:03:20,934 --> 00:03:23,437 line:-1
harmony, and utility.


64
00:03:25.372 --> 00:03:29.176 line:-2 align:center
For feedback to be useful, it
must be obvious what caused it.


65
00:03:29,176 --> 00:03:31,445 line:-2
It's about making
the source or the cause


66
00:03:31,445 --> 00:03:33,680 line:-2
of the feedback
clear and obvious.


67
00:03:33,680 --> 00:03:36,049 line:-2
The simplest form
is getting feedback


68
00:03:36.049 --> 00:03:39.586 line:-2 align:center
as the ball hits the wall
and the boundary of the phone.


69
00:03:39,586 --> 00:03:43,123 line:-2
It's a collision with associated
sound and haptics.


70
00:03:43.123 --> 00:03:46.960 line:-2 align:center
Similarly, the haptics rolling
texture is only presented


71
00:03:46.960 --> 00:03:49.730 line:-2 align:center
when the background visual
is shown.


72
00:03:49.730 --> 00:03:54.501 line:-2 align:center
You understand that the grid is
what created that sensation.


73
00:03:54,501 --> 00:03:56,770 line:-1
Our second principle, harmony,


74
00:03:56.770 --> 00:03:59.039 line:-2 align:center
highlights that our senses
work best


75
00:03:59.039 --> 00:04:01.375 line:-2 align:center
when they are coherent,
consistent,


76
00:04:01,375 --> 00:04:05,312 line:-2
and working together
to create a given experience.


77
00:04:05,312 --> 00:04:10,317 line:-2
It should feel the way it
looks, and the way it sounds.


78
00:04:10.317 --> 00:04:13.854 line:-2 align:center
A small ball should feel
small and sound small.


79
00:04:13.854 --> 00:04:16.924 line:-2 align:center
A large ball ought
to sound and feel heavier,


80
00:04:16.924 --> 00:04:20.127 line:-1 align:center
like it has real extra mass.


81
00:04:20.127 --> 00:04:24.765 line:-2 align:center
Our third principle, utility,
is about providing


82
00:04:24.765 --> 00:04:27.434 line:-2 align:center
clear value
to your app experience.


83
00:04:27,434 --> 00:04:30,537 line:-2
Don't add feedback
just because you can.


84
00:04:30,537 --> 00:04:34,775 line:-2
It can quickly become
overwhelming and unpleasant.


85
00:04:34,775 --> 00:04:37,444 line:-2
Reserve haptics and audio
for significant moments


86
00:04:37,444 --> 00:04:41,048 line:-2
in your app,
like the growth of the ball.


87
00:04:41,048 --> 00:04:44,318 line:-2
Next,
let's review Core Haptics.


88
00:04:44,318 --> 00:04:47,387 line:-2
Core Haptics is the technology
on iPhone and iOS


89
00:04:47,387 --> 00:04:49,489 line:-2
that lets you design
custom haptics


90
00:04:49,489 --> 00:04:51,792 line:-1
and audio feedback for your app.


91
00:04:51,792 --> 00:04:53,760 line:-2
It's a powerful API
centered around


92
00:04:53,760 --> 00:04:57,631 line:-2
four fundamental elements:
engine, player,


93
00:04:57,631 --> 00:05:01,168 line:-1
pattern, and event.


94
00:05:01.168 --> 00:05:03.504 line:-1 align:center
Let's review them briefly.


95
00:05:03,504 --> 00:05:06,907 line:-2
The highest level element
is the engine.


96
00:05:06,907 --> 00:05:10,210 line:-2
That's our link to the physical
actuator on the phone.


97
00:05:10,210 --> 00:05:12,179 line:-1
Next we have a player.


98
00:05:12,179 --> 00:05:17,150 line:-2
It is used for playback control,
like start, stop, and pause.


99
00:05:17,150 --> 00:05:20,487 line:-2
Then we
have patterns and events.


100
00:05:20,487 --> 00:05:23,824 line:-2
Patterns are a collection
of events over time.


101
00:05:23,824 --> 00:05:27,628 line:-2
Events are the building blocks
used to specify the experience.


102
00:05:27,628 --> 00:05:29,329 line:-1
There are many types of events.


103
00:05:29,329 --> 00:05:33,333 line:-2
The most common ones
are transient and continuous.


104
00:05:33,333 --> 00:05:35,502 line:-2
Practically,
here's a concrete example


105
00:05:35,502 --> 00:05:37,838 line:-1
of a pattern made of events.


106
00:05:37,838 --> 00:05:40,440 line:-2
I'm using
the QuickLook Visualizer


107
00:05:40,440 --> 00:05:43,243 line:-2
available in MacOS 12
to see the haptic pattern


108
00:05:43,243 --> 00:05:45,612 line:-1
specified in an .ahap file.


109
00:05:45,612 --> 00:05:49,583 line:-2
AHAP stands
for Apple Haptic Audio Pattern.


110
00:05:49,583 --> 00:05:51,985 line:-1
Let's look at it again.


111
00:05:51.985 --> 00:05:54.188 line:-1 align:center
Select an .ahap file in Finder,


112
00:05:54,188 --> 00:05:56,190 line:-2
then press
Space bar on your keyboard.


113
00:05:59.359 --> 00:06:03.397 line:-2 align:center
Now let's look in detail at
the items in the pattern.


114
00:06:03,397 --> 00:06:08,101 align:center
The first event in blue
is a transient event.


115
00:06:08,101 --> 00:06:11,572 line:0
The second event in orange
is a continuous event.


116
00:06:14,007 --> 00:06:16,543 line:0
The pattern is using
JSON syntax.


117
00:06:16,543 --> 00:06:19,780 align:center
The transient event is
created from this code.


118
00:06:21,648 --> 00:06:25,085 line:0
This sums up
our overview of Core Haptics.


119
00:06:25.085 --> 00:06:26.887 line:-1 align:center
For more in-depth information,


120
00:06:26.887 --> 00:06:29.623 line:-2 align:center
check out
the documentation online.


121
00:06:29,623 --> 00:06:31,258 line:-2
For the practice
in this session,


122
00:06:31,258 --> 00:06:35,062 line:-2
we'll focus on loading,
changing, and playing patterns.


123
00:06:35.062 --> 00:06:37.865 line:-2 align:center
It's time for Xcode
and the HapticRicochet.


124
00:06:37.865 --> 00:06:42.302 line:-2 align:center
Open the project from
HapticRicochet-Start folder.


125
00:06:42.302 --> 00:06:46.907 line:-2 align:center
Make sure you can compile and
run the project on your iPhone.


126
00:06:46,907 --> 00:06:49,009 line:-2
The simulator
doesn't work for haptics.


127
00:06:49,009 --> 00:06:53,313 line:-2
You need a physical iPhone 8
or newer to feel the haptics.


128
00:06:53,313 --> 00:06:55,616 line:-2
Verify that the phone
is not silenced


129
00:06:55,616 --> 00:06:58,719 line:-2
and that the volume level
is high.


130
00:06:58,719 --> 00:07:01,655 line:-2
The plan is to work
with ViewController files


131
00:07:01.655 --> 00:07:06.026 line:-2 align:center
and the .ahap, .wav
and .png asset files.


132
00:07:06,026 --> 00:07:08,061 line:-2
Make sure you familiarize
yourself


133
00:07:08,061 --> 00:07:10,664 line:-2
with the game and all
its interactions.


134
00:07:10,664 --> 00:07:12,733 line:-1
Remember, you can tap the ball,


135
00:07:12.733 --> 00:07:15.002 line:-2 align:center
tap the background,
and tilt the phone around.


136
00:07:15,002 --> 00:07:18,539 line:-1
[bass blooping]


137
00:07:18,539 --> 00:07:20,941 line:-1
[bass thrumming]


138
00:07:20.941 --> 00:07:24.144 line:-2 align:center
Once you're ready, let's dive
into the shield transformation.


139
00:07:24,144 --> 00:07:26,513 line:-2
I'll use the harmony
principle to dissect


140
00:07:26.513 --> 00:07:30.217 line:-2 align:center
the shield moment and look
at the design details.


141
00:07:30,217 --> 00:07:31,919 line:-2
For visual,
we have an animation


142
00:07:31.919 --> 00:07:34.288 line:-2 align:center
that is 500 milliseconds
in duration


143
00:07:34.288 --> 00:07:36.757 line:-2 align:center
and that looks like this
in the upper right.


144
00:07:38,258 --> 00:07:40,194 line:-2
For haptic,
we'll want to highlight


145
00:07:40,194 --> 00:07:43,163 line:-2
the transformation
to a new state.


146
00:07:43,163 --> 00:07:45,699 line:0
For audio,
we want to convey a gain


147
00:07:45,699 --> 00:07:49,570 align:center
in energy and an end state
that is robust and protected.


148
00:07:51,138 --> 00:07:54,274 align:center
For this practice, we've
created two different assets


149
00:07:54,274 --> 00:07:56,977 line:0
that convey
different qualities.


150
00:07:56,977 --> 00:07:58,679 line:0
We'll look at them
and see what works best


151
00:07:58,679 --> 00:08:00,647 line:0
for the shield experience.


152
00:08:00,647 --> 00:08:02,616 align:center
But first,
let's look at how we load


153
00:08:02,616 --> 00:08:04,585 line:0
and play feedback for shield.


154
00:08:06,687 --> 00:08:10,157 line:-2
Functionally, the code
is divided in two parts.


155
00:08:10,157 --> 00:08:13,794 line:-2
We first initialize our
building blocks and, second,


156
00:08:13,794 --> 00:08:17,097 line:-2
a function to play and render
that shield transformation.


157
00:08:18,599 --> 00:08:20,901 line:-2
In the initializeShieldHaptics
function,


158
00:08:20.901 --> 00:08:24.938 line:-2 align:center
I first create a pattern
from a ShieldTransient file.


159
00:08:24.938 --> 00:08:28.141 line:-2 align:center
Then create a shieldPlayer
with that pattern.


160
00:08:29,776 --> 00:08:31,945 line:-2
The feedback is ready to play
at this point.


161
00:08:33,514 --> 00:08:35,549 line:-1
The function shield is called


162
00:08:35.549 --> 00:08:38.652 line:-2 align:center
when the transformation
is ready to be rendered.


163
00:08:38.652 --> 00:08:41.321 line:-2 align:center
The haptic and audio
feedback are played via


164
00:08:41,321 --> 00:08:44,892 line:-2
calling startPlayer
on our shieldPlayer.


165
00:08:44,892 --> 00:08:48,262 line:-2
It's a convenience function we
reuse frequently in the project.


166
00:08:48,262 --> 00:08:51,298 line:0
The visual animation
is then played.


167
00:08:52,533 --> 00:08:56,136 line:-2
Now let's look at our
ShieldTransient asset.


168
00:08:56,136 --> 00:08:57,804 line:-2
It defines the experience
we have


169
00:08:57,804 --> 00:09:00,674 line:-1
for haptic and audio feedback.


170
00:09:00,674 --> 00:09:02,676 line:-2
The haptic should feel
like this:


171
00:09:02,676 --> 00:09:03,977 line:-1
[staccato beats]


172
00:09:03,977 --> 00:09:06,446 line:-1
And the audio should sound like this:


173
00:09:06,446 --> 00:09:07,581 line:-1
[bass upswing]


174
00:09:07,581 --> 00:09:08,949 line:-1
I like the sound.


175
00:09:08,949 --> 00:09:10,684 line:-2
It feels
like a gain of robustness


176
00:09:10,684 --> 00:09:12,452 line:-1
and protection for the ball.


177
00:09:12,452 --> 00:09:14,521 line:-2
Let's hear it again.
[bass upswing]


178
00:09:14,521 --> 00:09:16,390 line:-2
The problem is
the haptic and the sound


179
00:09:16.390 --> 00:09:17.925 line:-1 align:center
don't really match.


180
00:09:17,925 --> 00:09:19,826 line:-2
The haptic is made
of three transients...


181
00:09:19,826 --> 00:09:20,861 line:-1
[staccato beats]


182
00:09:20,861 --> 00:09:23,230 line:-2
While the audio is
continuous and progressive.


183
00:09:23,230 --> 00:09:24,531 line:-1
[bass upswing]


184
00:09:24.531 --> 00:09:26.600 line:-2 align:center
There's no harmony
between the two senses.


185
00:09:26.600 --> 00:09:28.735 line:-2 align:center
[staccato beats]
[bass upswing]


186
00:09:28,735 --> 00:09:30,871 line:-2
Let's look
at the alternate asset


187
00:09:30.871 --> 00:09:33.340 line:-2 align:center
which is called
ShieldContinuous.


188
00:09:33,340 --> 00:09:35,676 line:-2
It has a continuous
haptic progression...


189
00:09:35,676 --> 00:09:38,512 line:-2
[tone]
And a wobbly audio that decays.


190
00:09:38.512 --> 00:09:39.980 line:-1 align:center
[off notes]


191
00:09:39.980 --> 00:09:41.949 line:-1 align:center
Again, I can feel and hear


192
00:09:41,949 --> 00:09:44,618 line:-2
that the haptic and audio
don't really match.


193
00:09:44,618 --> 00:09:46,720 line:-1
But I like the haptic.


194
00:09:46.720 --> 00:09:48.355 line:-2 align:center
It feels like
a good transformation


195
00:09:48,355 --> 00:09:50,290 line:-1
for gaining a shield.


196
00:09:50.290 --> 00:09:52.326 line:-1 align:center
Let's hear the haptic again.


197
00:09:52,326 --> 00:09:53,393 line:-1
[tone]


198
00:09:53.393 --> 00:09:56.530 line:-2 align:center
My plan is to use that
continuous haptic pattern


199
00:09:56.530 --> 00:09:58.699 line:-2 align:center
but use the sound
from the first asset.


200
00:10:00,033 --> 00:10:02,836 line:-2
I'll use the two assets and take
the audio I like


201
00:10:02.836 --> 00:10:04.505 line:-1 align:center
from the first pattern


202
00:10:04.505 --> 00:10:07.274 line:-2 align:center
and use it in the second
continuous haptic pattern.


203
00:10:08,509 --> 00:10:10,777 line:-2
Let's see
how I do that in practice.


204
00:10:11,979 --> 00:10:15,282 line:-2
First I open the
ShieldContinuous.ahap file


205
00:10:15.282 --> 00:10:18.986 line:-2 align:center
in a text editor and scroll
to the end of the file.


206
00:10:18,986 --> 00:10:22,289 line:-2
You'll see this event where
we specify the audio file


207
00:10:22,289 --> 00:10:24,124 line:-1
to play with the haptics.


208
00:10:26,126 --> 00:10:29,196 line:-2
It's using
the EventType AudioCustom


209
00:10:29.196 --> 00:10:31.865 line:-2 align:center
with a filename
for the audio file.


210
00:10:31.865 --> 00:10:34.601 line:-2 align:center
You can specify and adjust
the volume


211
00:10:34.601 --> 00:10:36.403 line:-1 align:center
using a ParameterValue.


212
00:10:38.805 --> 00:10:41.175 line:-2 align:center
To use the preferred audio,
I change


213
00:10:41.175 --> 00:10:47.080 line:-2 align:center
the file reference from
ShieldB.wav to ShieldA.wav.


214
00:10:49.750 --> 00:10:52.853 line:-2 align:center
The revised and final asset
looks like this.


215
00:10:52,853 --> 00:10:55,189 line:-2
The haptic...
[tone]


216
00:10:55,189 --> 00:10:58,659 line:-1
and audio are coherent.


217
00:10:58.659 --> 00:11:01.295 line:-2 align:center
They support and reinforce
each other.


218
00:11:01.295 --> 00:11:05.165 line:-2 align:center
Let's listen to the combined
audio and haptics together.


219
00:11:05.165 --> 00:11:07.768 line:-1 align:center
[tone upswings]


220
00:11:07,768 --> 00:11:11,738 line:-2
The last change needed is to use
that final asset I just created.


221
00:11:11.738 --> 00:11:15.409 line:-2 align:center
I go back to
InitializeShieldHaptics function


222
00:11:15,409 --> 00:11:18,278 line:-2
and instead
of using ShieldTransient,


223
00:11:18,278 --> 00:11:21,248 line:-2
I specify and load
the ShieldContinuous file.


224
00:11:23,550 --> 00:11:26,019 line:-2
Voilà!
Here we have it.


225
00:11:26.019 --> 00:11:29.456 line:-1 align:center
I now compile and run on device.


226
00:11:29,456 --> 00:11:31,992 line:-1
[tone, notes upswing]


227
00:11:31.992 --> 00:11:34.461 line:-2 align:center
I end up with a harmonious
shield transformation


228
00:11:34,461 --> 00:11:36,396 line:-1
that feels just right.


229
00:11:36,396 --> 00:11:39,967 line:-2
The haptic, audio, and visual
are working well together


230
00:11:39,967 --> 00:11:43,437 line:-2
to convey the addition of shield
protection to the ball.


231
00:11:43,437 --> 00:11:47,975 line:-2
Next, I'll review how to add
the rolling texture to the app.


232
00:11:49,109 --> 00:11:52,546 align:center
HapticRicochet starts
with no rolling texture,


233
00:11:52,546 --> 00:11:55,148 line:0
just collision with the walls.


234
00:11:55,148 --> 00:11:58,585 align:center
If I tap on the background,
the polka dot texture shows up,


235
00:11:58,585 --> 00:12:01,088 line:0
and I get additional
haptic feedback


236
00:12:01,088 --> 00:12:03,690 line:0
as the ball rolls around.


237
00:12:03,690 --> 00:12:06,760 line:0
We'll encounter and resolve
two issues moving forward,


238
00:12:06,760 --> 00:12:09,062 align:center
one of a technical nature.


239
00:12:09,062 --> 00:12:12,366 line:0
The other one relates to
the design of the experience.


240
00:12:15,135 --> 00:12:17,437 line:-2
In the initializeTextureHaptics
function,


241
00:12:17.437 --> 00:12:22.176 line:-2 align:center
I first create a pattern
from the texture ahap file.


242
00:12:22,176 --> 00:12:26,213 line:-2
I then create a ShieldPlayer
with that pattern.


243
00:12:26,213 --> 00:12:28,615 line:-2
The function
updateTexturePlayer


244
00:12:28.615 --> 00:12:32.119 line:-2 align:center
is called on every frame
the texture is active.


245
00:12:32,119 --> 00:12:35,322 line:-2
We use it to update
the intensity of the haptic


246
00:12:35,322 --> 00:12:37,558 line:-2
based on
the speed of the ball.


247
00:12:37.558 --> 00:12:40.427 line:-1 align:center
Let's look at the results.


248
00:12:40,427 --> 00:12:43,597 line:-2
The issue I'm noticing
is the texture goes away


249
00:12:43.597 --> 00:12:45.199 line:-1 align:center
after a few seconds.


250
00:12:45,199 --> 00:12:48,468 line:-1
[bass thrumming, blooping]


251
00:12:48,468 --> 00:12:50,704 line:-2
I know why it's happening
like this.


252
00:12:50,704 --> 00:12:53,540 line:-2
There's an easy way
to fix that behavior.


253
00:12:53.540 --> 00:12:56.043 line:-2 align:center
The issue we have
is that the texture


254
00:12:56,043 --> 00:13:00,147 line:-2
of the .ahap files has only
2 seconds of haptic content.


255
00:13:00.147 --> 00:13:02.182 line:-2 align:center
There's a way to change
that behavior


256
00:13:02,182 --> 00:13:05,519 line:-1
and make it play endlessly.


257
00:13:05.519 --> 00:13:07.721 line:-2 align:center
The advanced variant
of the pattern player


258
00:13:07.721 --> 00:13:10.357 line:-2 align:center
offers additional
functionalities


259
00:13:10.357 --> 00:13:14.494 line:-2 align:center
like pause, resume,
and other callbacks.


260
00:13:14,494 --> 00:13:17,231 line:-2
In HapticRicochet,
I will use the advanced


261
00:13:17.231 --> 00:13:21.134 line:-2 align:center
pattern player only for
its looping capabilities.


262
00:13:21.134 --> 00:13:24.171 line:-1 align:center
Let's walk through this change.


263
00:13:24,171 --> 00:13:27,074 line:-2
I first modify
the declaration of texturePlayer


264
00:13:27.074 --> 00:13:29.910 line:-2 align:center
to be of
CHHapticAdvancedPatternPlayer


265
00:13:29,910 --> 00:13:32,112 line:-1
type.


266
00:13:32.112 --> 00:13:35.015 line:-2 align:center
Then I'll use the same
texture file,


267
00:13:35.015 --> 00:13:38.418 line:-2 align:center
but this time,
creating an AdvancedPlayer.


268
00:13:38,418 --> 00:13:43,123 line:-2
I can now enable the looping
behavior on that AdvancedPlayer.


269
00:13:43,123 --> 00:13:47,227 line:-2
The nice thing is that the rest
of the code stays all the same.


270
00:13:47,227 --> 00:13:51,198 line:-1
Let's look at the results.


271
00:13:51.198 --> 00:13:55.068 line:-2 align:center
[blooping sounds,
bass thrumming in background]


272
00:13:55,068 --> 00:13:58,038 line:-2
The rolling texture plays
in a loop this time


273
00:13:58.038 --> 00:14:00.908 line:-1 align:center
with no apparent pause or seam.


274
00:14:00,908 --> 00:14:04,244 line:-1
[blooping, thrumming]


275
00:14:04,244 --> 00:14:07,414 line:-2
The second issue I want
to address is related to


276
00:14:07,414 --> 00:14:09,616 line:-2
the look and feel
of the texture.


277
00:14:09,616 --> 00:14:13,320 align:center
We see that our haptic pattern
asset is quite dense,


278
00:14:13,320 --> 00:14:16,657 align:center
with nearly 100 entries
over 2 seconds.


279
00:14:16,657 --> 00:14:19,626 align:center
Our visual background
texture is very coarse,


280
00:14:19,626 --> 00:14:21,795 align:center
with just a few dots across.


281
00:14:21,795 --> 00:14:23,897 line:0
I think the experience
would be improved and more


282
00:14:23,897 --> 00:14:26,500 align:center
realistic if the dot pattern
would be more dense.


283
00:14:29,403 --> 00:14:31,338 line:-2
I'll change
the resource file we used


284
00:14:31,338 --> 00:14:35,475 line:-2
for the backgroundImage to use
the Fine version of this file.


285
00:14:35,475 --> 00:14:39,479 line:-2
If I run the app, the new denser
texture will be used.


286
00:14:39,479 --> 00:14:41,748 line:-1
Let's take a look.


287
00:14:41,748 --> 00:14:49,256 line:-1
[blooping, continuous thrumming]


288
00:14:50.924 --> 00:14:52.860 line:-2 align:center
If you run into issues
or problems,


289
00:14:52.860 --> 00:14:55.128 line:-2 align:center
we've included
the final version of the project


290
00:14:55,128 --> 00:14:57,831 line:-2
in the HapticRicochet-Final
folder.


291
00:14:57.831 --> 00:15:01.134 line:-2 align:center
It has all the changes
we've made during this session,


292
00:15:01,134 --> 00:15:06,006 line:-2
ready to compile
and feel on your iPhone.


293
00:15:06.006 --> 00:15:08.075 line:-2 align:center
There is still room
for you to explore


294
00:15:08.075 --> 00:15:10.010 line:-2 align:center
and design your own
haptic experiences.


295
00:15:10.010 --> 00:15:12.779 line:-2 align:center
I invite you to look at
the other transformation


296
00:15:12,779 --> 00:15:15,816 line:-2
in the game and try
to design your own


297
00:15:15.816 --> 00:15:18.418 line:-2 align:center
new haptic and sound feedback
for them.


298
00:15:18,418 --> 00:15:21,288 line:-2
To recap,
I introduced audio and haptic


299
00:15:21.288 --> 00:15:23.790 line:-2 align:center
design principles that can
guide you to design


300
00:15:23,790 --> 00:15:25,893 line:-2
great multimodal experiences
in your app.


301
00:15:26,827 --> 00:15:28,996 line:-2
I reviewed the fundamentals
of Core Haptics,


302
00:15:28.996 --> 00:15:32.499 line:-2 align:center
the API to add custom
feedback in iOS.


303
00:15:32,499 --> 00:15:36,103 line:-2
I've put them in practice using
the HapticRicochet project,


304
00:15:36,103 --> 00:15:39,506 line:-2
focusing on the shield
and rolling texture mechanics.


305
00:15:39.506 --> 00:15:42.643 line:-2 align:center
For additional information
and resources, please refer


306
00:15:42,643 --> 00:15:46,647 line:-2
to the Human Interface Guideline,
and the Developer documentation.


307
00:15:46,647 --> 00:15:51,518 line:0
Lastly, you can revisit
the WWDC 2019 session


308
00:15:51,518 --> 00:15:53,854 align:center
covering
the launch of Core Haptics.


309
00:15:53,854 --> 00:15:55,589 line:0
Thank you
for watching.


310
00:15:55.589 --> 00:15:57.624 line:-1 align:center
[percussive music]

