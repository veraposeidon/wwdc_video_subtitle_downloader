2
00:00:00,100 --> 00:00:01,869 line:-1
[MAC STARTUP CHIME]


3
00:00:01,869 --> 00:00:05,839 line:-1
♪ Bass music playing ♪


4
00:00:05.839 --> 00:00:07.841 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,841 --> 00:00:09,409 align:right size:2% position:90%
♪


6
00:00:09,409 --> 00:00:11,745 line:-1
Garrett Davidson: Hi,
I’m Garrett,


7
00:00:11.745 --> 00:00:15.015 line:-1 position:50%
an engineer on the
Authentication Experience team,


8
00:00:15,015 --> 00:00:17,084 line:-1
and I'm very excited
to give you a peek


9
00:00:17.084 --> 00:00:19.086 line:-1 position:50%
into what we’ve been working on:


10
00:00:19,086 --> 00:00:21,054 line:-1
the first step Apple is taking


11
00:00:21.054 --> 00:00:25.726 line:-1 position:50%
to support the industry-wide
transition away from passwords.


12
00:00:25,726 --> 00:00:29,162 line:-1
Every time you sign in
to an app or website today,


13
00:00:29.162 --> 00:00:31.598 line:-1 position:50%
you’re probably entering
a password.


14
00:00:31.598 --> 00:00:34.368 line:-1 position:50%
The iconic User name
and Password field pair


15
00:00:34.368 --> 00:00:37.905 line:-1 position:50%
is instantly recognizable
and really easy to use,


16
00:00:37.905 --> 00:00:40.307 line:-1 position:50%
and most people immediately
know what to do


17
00:00:40,307 --> 00:00:42,776 line:-1
when they encounter it.


18
00:00:42.776 --> 00:00:47.414 line:-1 position:50%
But developers, users,
and the industry as whole


19
00:00:47,414 --> 00:00:50,350 line:-1
have collectively learned
that this great convenience


20
00:00:50.350 --> 00:00:52.452 line:-1 position:50%
of being able
to quickly authenticate


21
00:00:52,452 --> 00:00:53,987 line:-1
to sign in to an account


22
00:00:53.987 --> 00:00:57.190 line:-1 position:50%
comes at a cost
to account security.


23
00:00:57.190 --> 00:01:00.594 line:-1 position:50%
As authentication technologies
have evolved over the years,


24
00:01:00,594 --> 00:01:02,095 line:-1
there are a few
fundamental lessons


25
00:01:02.095 --> 00:01:04.164 line:-1 position:50%
that the industry has learned.


26
00:01:04,164 --> 00:01:07,701 line:-1
First off,
protecting secrets is hard,


27
00:01:07.701 --> 00:01:10.370 line:-1 position:50%
especially when those secrets
are shared.


28
00:01:10,370 --> 00:01:13,307 line:-1
Most authentication today
relies on the user


29
00:01:13,307 --> 00:01:16,543 line:-1
and server sharing a secret --
like a password --


30
00:01:16,543 --> 00:01:18,345 line:-1
when the account is created,


31
00:01:18,345 --> 00:01:22,849 line:-1
and resharing that secret
during every authentication.


32
00:01:22,849 --> 00:01:26,086 line:-1
Each time that secret is shared,
there’s a risk


33
00:01:26,086 --> 00:01:28,555 line:-1
that someone other than
the intended recipient


34
00:01:28,555 --> 00:01:30,657 line:-1
learns that secret.


35
00:01:30,657 --> 00:01:33,527 line:-1
Phishing -- such as fake emails
and phone calls


36
00:01:33.527 --> 00:01:36.296 line:-1 position:50%
or misleading websites --
is the most common way


37
00:01:36,296 --> 00:01:38,865 line:-1
for the wrong party
to learn a secret.


38
00:01:38.865 --> 00:01:41.535 line:-1 position:50%
And if a secret like a password
does get out,


39
00:01:41.535 --> 00:01:44.972 line:-1 position:50%
using weak passwords
or reusing the same password


40
00:01:44,972 --> 00:01:48,742 line:-1
across multiple accounts can
quickly compound the problem.


41
00:01:48,742 --> 00:01:50,444 position:50%
In fact, according to


42
00:01:50,444 --> 00:01:53,647 position:50%
the 2020 Verizon Data Breach
Investigation Report,


43
00:01:53,647 --> 00:01:56,717 position:50%
more than 80 percent
of hacking-related data breaches


44
00:01:56,717 --> 00:01:58,919 line:0
involved the brute force
of credentials


45
00:01:58,919 --> 00:02:01,822 position:50%
or using lost
or stolen credentials.


46
00:02:01,822 --> 00:02:03,857 position:50%
It doesn’t have to be this way.


47
00:02:03.857 --> 00:02:06.493 line:-1 position:50%
Authentication technology
has continued to evolve


48
00:02:06,493 --> 00:02:09,062 line:-1
to try to mitigate
some of these risks.


49
00:02:09,062 --> 00:02:13,400 line:-1
At first, passwords were
mostly stored in people’s heads.


50
00:02:13,400 --> 00:02:15,635 line:0
But it turns out that people
generally aren’t good


51
00:02:15,635 --> 00:02:17,637 position:50%
at coming up with
and remembering


52
00:02:17,637 --> 00:02:21,375 line:0
strong and unique passwords
for every account.


53
00:02:21,375 --> 00:02:23,643 position:50%
Password managers
can create strong,


54
00:02:23,643 --> 00:02:25,912 position:50%
unique passwords per account,


55
00:02:25,912 --> 00:02:29,850 position:50%
and can provide hints about
some forms of possible phishing.


56
00:02:29,850 --> 00:02:31,785 position:50%
iCloud Keychain’s
password manager


57
00:02:31,785 --> 00:02:34,121 line:0
is built in
to your Apple devices,


58
00:02:34,121 --> 00:02:36,690 position:50%
and we’ve made APIs available
for third parties


59
00:02:36,690 --> 00:02:40,460 line:0
to integrate their own password
managers into the system.


60
00:02:40,460 --> 00:02:42,162 position:50%
Service owners can also add


61
00:02:42,162 --> 00:02:44,197 position:50%
additional steps
to the login flow,


62
00:02:44,197 --> 00:02:47,200 line:0
such as requiring a password
plus an additional factor


63
00:02:47,200 --> 00:02:51,071 position:50%
like an OTP;
for instance, an SMS


64
00:02:51,071 --> 00:02:54,875 position:50%
or a generated
one-time verification code.


65
00:02:54,875 --> 00:02:58,545 line:0
macOS Monterey and iOS 15
even have a code generator


66
00:02:58,545 --> 00:03:01,348 position:50%
built in to the iCloud Keychain
password manager,


67
00:03:01,348 --> 00:03:02,916 position:50%
which you can
learn more about


68
00:03:02,916 --> 00:03:06,153 line:0
in the “Secure login with iCloud
Keychain verification codes”


69
00:03:06,153 --> 00:03:09,823 line:0
video from my teammate Eryn.


70
00:03:09,823 --> 00:03:12,426 position:50%
Some apps and websites
alternatively choose


71
00:03:12,426 --> 00:03:15,562 line:0
to outsource authentication
entirely to a third party


72
00:03:15,562 --> 00:03:17,197 line:0
through federated
authentication,


73
00:03:17,197 --> 00:03:19,266 line:0
such as Sign in with Apple.


74
00:03:19,266 --> 00:03:21,968 position:50%
Federated authentication
lets people keep their trust


75
00:03:21,968 --> 00:03:27,140 position:50%
confined to a small number
of highly protected accounts.


76
00:03:27,140 --> 00:03:29,743 position:50%
But for this video,
I’m going to be focusing


77
00:03:29,743 --> 00:03:32,212 position:50%
on nonfederated
authentication options.


78
00:03:32,212 --> 00:03:34,648 line:-1
Let’s talk about
how these compare.


79
00:03:34,648 --> 00:03:40,187 line:-1
They’re all pretty easy to use,
they all work on most devices,


80
00:03:40,187 --> 00:03:43,223 line:-1
and they’re more or less
always with you.


81
00:03:43.223 --> 00:03:46.393 line:-1 position:50%
But the security level
could be better.


82
00:03:46,393 --> 00:03:48,295 line:-1
Passwords that can be remembered


83
00:03:48.295 --> 00:03:52.032 line:-1 position:50%
probably aren’t strong
and unique for every account.


84
00:03:52.032 --> 00:03:53.834 line:-1 position:50%
A password manager can be used


85
00:03:53,834 --> 00:03:56,136 line:-1
to create strong
and unique passwords,


86
00:03:56.136 --> 00:03:59.172 line:-1 position:50%
but it is only as strong
as the password --


87
00:03:59,172 --> 00:04:01,208 line:-1
and potentially
additional factors --


88
00:04:01.208 --> 00:04:03.176 line:-1 position:50%
that you use to protect it.


89
00:04:03,176 --> 00:04:05,745 line:-1
And single-use codes
can also help


90
00:04:05.745 --> 00:04:07.848 line:-1 position:50%
but are still subject
to many of the same problems


91
00:04:07,848 --> 00:04:09,116 line:-1
as passwords,


92
00:04:09.116 --> 00:04:13.453 line:-1 position:50%
since they’re still typeable,
phishable, shared secrets.


93
00:04:13.453 --> 00:04:16.089 line:-1 position:50%
Also, if passwords
are in your head,


94
00:04:16,089 --> 00:04:17,691 line:-1
you can forget them.


95
00:04:17.691 --> 00:04:21.228 line:-1 position:50%
This means apps and websites
need a separate recovery flow,


96
00:04:21,228 --> 00:04:24,965 line:-1
which today is usually a link
in an email.


97
00:04:24,965 --> 00:04:27,634 line:-1
This can reduce the entire
account’s security level


98
00:04:27.634 --> 00:04:30.103 line:-1 position:50%
to the level of security
of the email provider,


99
00:04:30.103 --> 00:04:32.606 line:-1 position:50%
which is generally not something
you control.


100
00:04:32,606 --> 00:04:35,442 line:-1
Some password managers
and second-factor solutions


101
00:04:35,442 --> 00:04:39,346 line:-1
can help with recovery but tend
to face similar problems.


102
00:04:39,346 --> 00:04:41,481 line:0
Remembered passwords
also don’t offer


103
00:04:41,481 --> 00:04:44,284 line:0
any kind of phishing resistance.


104
00:04:44,284 --> 00:04:47,287 position:50%
Password managers can provide
hints about phishing --


105
00:04:47,287 --> 00:04:50,290 line:0
such as not offering to fill
a password on a phishing site


106
00:04:50,290 --> 00:04:52,359 line:0
that looks otherwise
legitimate --


107
00:04:52,359 --> 00:04:54,194 line:0
but they still can’t prevent
someone


108
00:04:54,194 --> 00:04:56,396 position:50%
from manually entering
the password themselves


109
00:04:56,396 --> 00:04:58,431 line:0
and getting phished.


110
00:04:58,431 --> 00:05:00,734 line:0
One-time codes have
similar problems,


111
00:05:00,734 --> 00:05:02,869 line:0
though there are some
modern mitigations


112
00:05:02,869 --> 00:05:04,671 line:0
you can put in place.


113
00:05:04,671 --> 00:05:07,007 position:50%
And finally,
all of these methods


114
00:05:07,007 --> 00:05:10,844 position:50%
rely on a shared secret
between the user and a server,


115
00:05:10,844 --> 00:05:13,079 line:0
making them fundamentally
no stronger


116
00:05:13,079 --> 00:05:17,317 position:50%
than the weakest protection
of that shared secret.


117
00:05:17.317 --> 00:05:19.052 line:-1 position:50%
With that chart in mind,


118
00:05:19,052 --> 00:05:21,655 line:-1
let’s talk about the properties
of an actual solution


119
00:05:21,655 --> 00:05:23,890 line:-1
to the password problem.


120
00:05:23,890 --> 00:05:26,059 line:-1
First off, a replacement
for passwords


121
00:05:26,059 --> 00:05:29,563 line:-1
needs to be secure by design.


122
00:05:29,563 --> 00:05:32,499 line:-1
Passwords can be
reasonably secure,


123
00:05:32,499 --> 00:05:36,102 line:-1
if all of the best practices
are followed.


124
00:05:36.102 --> 00:05:39.506 line:-1 position:50%
However, experience has shown us
that that’s pretty hard


125
00:05:39,506 --> 00:05:42,576 line:-1
for everyone to do
all of the time.


126
00:05:42.576 --> 00:05:45.545 line:-1 position:50%
A replacement for passwords
should build that security in


127
00:05:45.545 --> 00:05:48.014 line:-1 position:50%
from the beginning.


128
00:05:48.014 --> 00:05:51.551 line:-1 position:50%
But we don’t want to go
backwards in usability either.


129
00:05:51,551 --> 00:05:54,387 line:-1
Passwords have been with us
for so long


130
00:05:54.387 --> 00:05:56.723 line:-1 position:50%
because they’re so easy to use.


131
00:05:56,723 --> 00:05:58,892 line:-1
We don’t want to lose that.


132
00:05:58,892 --> 00:06:01,728 line:-1
Being easy includes
always being available


133
00:06:01.728 --> 00:06:04.097 line:-1 position:50%
and being usable everywhere.


134
00:06:04,097 --> 00:06:07,467 line:-1
Today, as long as I know
or can look up my password,


135
00:06:07.467 --> 00:06:10.470 line:-1 position:50%
I can pretty much assume that
the device I want to sign into


136
00:06:10.470 --> 00:06:11.938 line:-1 position:50%
supports it.


137
00:06:11.938 --> 00:06:15.208 line:-1 position:50%
Any additional friction
to authenticating on new devices


138
00:06:15.208 --> 00:06:16.743 line:-1 position:50%
is going to hurt adoption


139
00:06:16.743 --> 00:06:20.080 line:-1 position:50%
from people who just want
to quickly get signed in.


140
00:06:20,080 --> 00:06:24,084 line:-1
And finally, recovery should be
a first-class feature


141
00:06:24.084 --> 00:06:27.320 line:-1 position:50%
not something that gets added
as an afterthought.


142
00:06:27.320 --> 00:06:30.423 line:-1 position:50%
People make mistakes,
bad things happen,


143
00:06:30.423 --> 00:06:33.827 line:-1 position:50%
and a solution to passwords
should be fault tolerant enough


144
00:06:33.827 --> 00:06:35.895 line:-1 position:50%
to handle humans being human


145
00:06:35,895 --> 00:06:40,033 line:-1
without compromising
the overall security.


146
00:06:40.033 --> 00:06:42.569 line:-1 position:50%
One of the strongest security
options out there today


147
00:06:42.569 --> 00:06:44.237 line:-1 position:50%
is security keys,


148
00:06:44,237 --> 00:06:47,140 line:-1
the hardware dongles or fobs
that are generally used


149
00:06:47,140 --> 00:06:50,944 line:-1
as a second factor in especially
high security contexts.


150
00:06:50,944 --> 00:06:53,446 line:-1
They are based
on the web authentication --


151
00:06:53.446 --> 00:06:57.317 line:-1 position:50%
or WebAuthn -- standard,
which is open to everyone.


152
00:06:57.317 --> 00:06:59.419 line:-1 position:50%
And most of them
are pretty easy to use


153
00:06:59,419 --> 00:07:01,921 line:-1
after the initial
learning curve.


154
00:07:01.921 --> 00:07:05.592 line:-1 position:50%
And they’re way more secure
than just a password.


155
00:07:05.592 --> 00:07:07.827 line:-1 position:50%
Most of this strength
comes from WebAuthn,


156
00:07:07.827 --> 00:07:10.330 line:-1 position:50%
which I’ll talk about more
in a bit.


157
00:07:10,330 --> 00:07:12,732 line:-1
Modern web browsers
also support security keys


158
00:07:12,732 --> 00:07:15,135 line:-1
on most modern devices.


159
00:07:15.135 --> 00:07:19.072 line:-1 position:50%
Safari on macOS and iOS
has supported USB,


160
00:07:19,072 --> 00:07:23,410 line:-1
NFC, and Lightning security keys
for a while.


161
00:07:23,410 --> 00:07:26,813 line:-1
Most security keys also support
more than one connection method,


162
00:07:26.813 --> 00:07:31.651 line:-1 position:50%
so a single hardware key can be
used on many different devices.


163
00:07:31.651 --> 00:07:35.388 line:-1 position:50%
Let’s compare WebAuthn
and passwords.


164
00:07:35,388 --> 00:07:37,624 line:-1
One of the biggest advantages
of WebAuthn


165
00:07:37.624 --> 00:07:39.859 line:-1 position:50%
is it uses public/private
key pairs


166
00:07:39.859 --> 00:07:41.928 line:-1 position:50%
instead of shared secrets.


167
00:07:41,928 --> 00:07:44,264 line:-1
If we examine how passwords
work today,


168
00:07:44.264 --> 00:07:47.400 line:-1 position:50%
first you enter your password.


169
00:07:47.400 --> 00:07:49.669 line:-1 position:50%
Then, it’s usually obfuscated


170
00:07:49.669 --> 00:07:52.639 line:-1 position:50%
through something
like hashing plus salting,


171
00:07:52,639 --> 00:07:57,310 line:-1
and the resulting salted hash
is sent to the server.


172
00:07:57,310 --> 00:08:01,314 line:-1
Now, both you and the server
have a copy of the secret,


173
00:08:01,314 --> 00:08:04,684 line:-1
even though the server’s copy
is obfuscated,


174
00:08:04,684 --> 00:08:06,786 line:-1
and you’re both
equally responsible


175
00:08:06,786 --> 00:08:09,122 line:-1
for protecting that secret.


176
00:08:09,122 --> 00:08:12,559 line:-1
This is what
we’re getting rid of.


177
00:08:12,559 --> 00:08:15,829 line:-1
With public/private key pairs,
instead of a password,


178
00:08:15,829 --> 00:08:18,798 line:-1
your device creates
a pair of keys.


179
00:08:18.798 --> 00:08:23.837 line:-1 position:50%
One of these keys is public;
just as public as your username.


180
00:08:23,837 --> 00:08:26,406 line:-1
It can be shared with anyone
and everyone,


181
00:08:26.406 --> 00:08:28.641 line:-1 position:50%
and is not a secret.


182
00:08:28.641 --> 00:08:30.877 line:-1 position:50%
The other key is private.


183
00:08:30,877 --> 00:08:35,148 line:-1
This private key is a secret
and is protected by your device.


184
00:08:35,148 --> 00:08:38,184 line:-1
Your device never shares
this key with anyone else,


185
00:08:38,184 --> 00:08:40,754 line:-1
not even the server.


186
00:08:40.754 --> 00:08:42.522 line:-1 position:50%
When you create an account,


187
00:08:42,522 --> 00:08:47,594 line:-1
your device generates
these two associated keys.


188
00:08:47.594 --> 00:08:51.097 line:-1 position:50%
It then shares the public key
with the server.


189
00:08:51.097 --> 00:08:54.234 line:-1 position:50%
Now, the server has a copy
of the public key,


190
00:08:54,234 --> 00:08:56,302 line:-1
which does not have the same
protection requirements


191
00:08:56.302 --> 00:08:59.906 line:-1 position:50%
as a password
because it’s public information.


192
00:08:59.906 --> 00:09:02.409 line:-1 position:50%
The private key
stays on your device,


193
00:09:02,409 --> 00:09:07,247 line:-1
and only that device is
responsible for protecting it.


194
00:09:07,247 --> 00:09:09,916 line:-1
Later, when you want to sign in,


195
00:09:09.916 --> 00:09:12.886 line:-1 position:50%
you don’t send the server
anything secret.


196
00:09:12.886 --> 00:09:15.688 line:-1 position:50%
Instead you prove
that it’s your account


197
00:09:15.688 --> 00:09:18.625 line:-1 position:50%
by proving that your device
knows the private key


198
00:09:18,625 --> 00:09:21,594 line:-1
associated with your account’s
public key.


199
00:09:21,594 --> 00:09:24,898 line:-1
That exchange works like this.


200
00:09:24,898 --> 00:09:28,501 line:-1
First, I go to sign in
to my account.


201
00:09:28,501 --> 00:09:31,571 line:-1
Then, the website asks my device


202
00:09:31,571 --> 00:09:34,441 line:-1
to prove that
it’s actually my account.


203
00:09:34,441 --> 00:09:37,177 line:-1
It does this by performing
what’s called a "challenge"


204
00:09:37.177 --> 00:09:40.380 line:-1 position:50%
for me to prove that my device
has the private key


205
00:09:40,380 --> 00:09:42,682 line:-1
associated with my account’s
public key


206
00:09:42.682 --> 00:09:45.885 line:-1 position:50%
without actually saying
what my private key is.


207
00:09:45.885 --> 00:09:50.390 line:-1 position:50%
To do so, the server sends back
a single-use challenge.


208
00:09:50.390 --> 00:09:52.692 line:-1 position:50%
My device has the private key,


209
00:09:52.692 --> 00:09:55.495 line:-1 position:50%
so it takes that challenge
and does something called


210
00:09:55.495 --> 00:09:59.032 line:-1 position:50%
“signing” of the challenge,
using my private key.


211
00:09:59,032 --> 00:10:02,001 line:-1
Only my private key can produce
a valid signature


212
00:10:02.001 --> 00:10:03.670 line:-1 position:50%
for my account.


213
00:10:03.670 --> 00:10:06.973 line:-1 position:50%
This signature then gets
sent back to the server.


214
00:10:06,973 --> 00:10:09,776 line:-1
The server already
has my public key,


215
00:10:09,776 --> 00:10:13,847 line:-1
so it can check this signature
against that public key.


216
00:10:13,847 --> 00:10:16,883 line:-1
Anyone who has my public key
can easily check


217
00:10:16.883 --> 00:10:19.452 line:-1 position:50%
if a signature matches that key.


218
00:10:19.452 --> 00:10:22.922 line:-1 position:50%
However, only I can create
a valid signature


219
00:10:22.922 --> 00:10:26.860 line:-1 position:50%
for the challenge because
only I have the private key.


220
00:10:26,860 --> 00:10:30,730 line:-1
Therefore, anyone can
easily verify my identity


221
00:10:30.730 --> 00:10:35.001 line:-1 position:50%
without ever learning
what my secret is.


222
00:10:35,001 --> 00:10:36,503 position:50%
And finally,


223
00:10:36,503 --> 00:10:40,006 position:50%
assuming the signature does
actually match my public key,


224
00:10:40,006 --> 00:10:43,076 line:0
the server tells me
I’m signed in!


225
00:10:43,076 --> 00:10:46,846 position:50%
Notice that my private key
never left my device.


226
00:10:46,846 --> 00:10:50,783 position:50%
The server was able to verify
that this is my account


227
00:10:50,783 --> 00:10:53,019 position:50%
without ever learning
what my secret --


228
00:10:53,019 --> 00:10:56,556 position:50%
my private key --
actually is.


229
00:10:58.825 --> 00:11:01.027 line:-1 position:50%
Because public/private key pairs


230
00:11:01,027 --> 00:11:04,197 line:-1
mean credentials are created
and managed by the device --


231
00:11:04.197 --> 00:11:06.933 line:-1 position:50%
and private keys are
never shared with a server --


232
00:11:06.933 --> 00:11:11.671 line:-1 position:50%
these keys are never going to be
guessable, reused, weak,


233
00:11:11.671 --> 00:11:14.941 line:-1 position:50%
or vulnerable to your server
being breached.


234
00:11:14,941 --> 00:11:18,344 line:-1
WebAuthn also roots its trust
in the browser


235
00:11:18,344 --> 00:11:21,147 line:-1
and operating system,
not the human.


236
00:11:21.147 --> 00:11:24.284 line:-1 position:50%
The software strictly enforces
that credentials


237
00:11:24,284 --> 00:11:27,287 line:-1
are only ever usable
on the websites and apps


238
00:11:27.287 --> 00:11:29.389 line:-1 position:50%
that they were created for,


239
00:11:29.389 --> 00:11:32.091 line:-1 position:50%
preventing someone from even
attempting to authenticate


240
00:11:32.091 --> 00:11:34.627 line:-1 position:50%
on the incorrect website.


241
00:11:34.627 --> 00:11:37.697 line:-1 position:50%
And because all credentials
in WebAuthn


242
00:11:37.697 --> 00:11:39.866 line:-1 position:50%
are public/private key pairs,


243
00:11:39,866 --> 00:11:42,602 line:-1
the server is no longer
responsible


244
00:11:42,602 --> 00:11:45,605 line:-1
for maintaining
authentication secrets.


245
00:11:45,605 --> 00:11:48,675 line:-1
This means less work
on the server side


246
00:11:48,675 --> 00:11:50,476 line:-1
to keep secrets safe,


247
00:11:50.476 --> 00:11:54.847 line:-1 position:50%
and servers are less valuable
targets for attackers


248
00:11:54,847 --> 00:11:57,450 line:-1
because there are
no authentication secrets


249
00:11:57.450 --> 00:11:59.986 line:-1 position:50%
for an attacker to steal.


250
00:11:59.986 --> 00:12:02.088 line:-1 position:50%
Let’s compare security keys
to the other items


251
00:12:02,088 --> 00:12:05,258 line:-1
in that chart.


252
00:12:05,258 --> 00:12:09,862 line:0
They’re fairly easy to use after
the initial learning curve.


253
00:12:09,862 --> 00:12:12,599 position:50%
They work on
all of your Apple devices


254
00:12:12,599 --> 00:12:16,569 position:50%
and many modern
non-Apple devices.


255
00:12:16,569 --> 00:12:19,939 position:50%
But they’re not necessarily
always with you.


256
00:12:19,939 --> 00:12:22,008 position:50%
You need to purchase
and carry around


257
00:12:22,008 --> 00:12:24,677 line:0
additional hardware
at all times.


258
00:12:24,677 --> 00:12:27,313 position:50%
This can be a barrier
to entry for adoption,


259
00:12:27,313 --> 00:12:31,851 position:50%
and is a step back in usability
compared to passwords.


260
00:12:31,851 --> 00:12:35,121 position:50%
The security level
is very good, though.


261
00:12:35,121 --> 00:12:37,924 line:0
Credentials on a security key
are guaranteed


262
00:12:37,924 --> 00:12:39,993 line:0
to never be easily guessable


263
00:12:39,993 --> 00:12:42,962 position:50%
or reused
across multiple accounts,


264
00:12:42,962 --> 00:12:48,368 position:50%
and have phishing protection
built in at the OS level.


265
00:12:48,368 --> 00:12:50,970 position:50%
That security
comes at a price, though.


266
00:12:50,970 --> 00:12:53,973 line:0
If credentials are tied
to single security key


267
00:12:53,973 --> 00:12:56,809 position:50%
and that security key
is ever lost, stolen,


268
00:12:56,809 --> 00:13:00,513 position:50%
or damaged,
so are all of those credentials.


269
00:13:00,513 --> 00:13:03,416 line:0
Adopters must have
a backup system in place,


270
00:13:03,416 --> 00:13:06,552 line:0
such as purchasing
an additional security key,


271
00:13:06,552 --> 00:13:08,054 line:0
storing it somewhere safe,


272
00:13:08,054 --> 00:13:11,791 position:50%
and hoping they never lose both
at the same time.


273
00:13:11,791 --> 00:13:13,526 line:0
Thanks to WebAuthn, though,


274
00:13:13,526 --> 00:13:16,896 line:0
they do provide
very strong phishing resistance


275
00:13:16,896 --> 00:13:21,834 position:50%
and remove the need
for server-stored secrets.


276
00:13:21.834 --> 00:13:25.972 line:-1 position:50%
In iOS 14.5, we extended
security key support


277
00:13:25.972 --> 00:13:28.975 line:-1 position:50%
to work in all browsers on iOS.


278
00:13:28,975 --> 00:13:32,145 line:-1
New in macOS Monterey
and iOS 15,


279
00:13:32,145 --> 00:13:34,580 line:-1
we’re also making
security key API


280
00:13:34.580 --> 00:13:40.787 line:-1 position:50%
available for the first time
for all apps on macOS and iOS.


281
00:13:40,787 --> 00:13:44,857 line:-1
This API is being added to
the ASAuthorization API family


282
00:13:44.857 --> 00:13:47.160 line:-1 position:50%
in the AuthenticationServices
framework,


283
00:13:47,160 --> 00:13:51,431 line:-1
as a native equivalent
to the WebAuthn API on the web.


284
00:13:51.431 --> 00:13:54.100 line:-1 position:50%
ASAuthorization
is your one-stop shop


285
00:13:54,100 --> 00:13:55,334 line:-1
for getting signed in


286
00:13:55,334 --> 00:13:57,904 line:-1
with whatever mechanisms
the system supports,


287
00:13:57,904 --> 00:14:00,773 line:-1
including passwords,
Sign in with Apple,


288
00:14:00.773 --> 00:14:03.676 line:-1 position:50%
and now security keys.


289
00:14:03.676 --> 00:14:05.144 line:-1 position:50%
Carrying around
additional hardware,


290
00:14:05.144 --> 00:14:06.446 line:-1 position:50%
like a security key,


291
00:14:06,446 --> 00:14:09,215 line:-1
isn’t necessarily for everyone,
though.


292
00:14:09.215 --> 00:14:11.718 line:-1 position:50%
We believe this API
will be useful for apps


293
00:14:11.718 --> 00:14:14.020 line:-1 position:50%
in especially
high-security contexts,


294
00:14:14,020 --> 00:14:16,489 line:-1
where the usability tradeoffs
for your users


295
00:14:16.489 --> 00:14:19.225 line:-1 position:50%
are outweighed
by special security needs,


296
00:14:19,225 --> 00:14:21,227 line:-1
and we’re excited
for you to try it out


297
00:14:21.227 --> 00:14:23.696 line:-1 position:50%
if you fall in that category.


298
00:14:23.696 --> 00:14:27.066 line:-1 position:50%
Now, passwordless authentication
using key pairs


299
00:14:27,066 --> 00:14:30,870 line:-1
is the next big thing
in authentication technology.


300
00:14:30.870 --> 00:14:33.206 line:-1 position:50%
The standard has been
a collaborative effort


301
00:14:33,206 --> 00:14:34,574 line:-1
across the industry


302
00:14:34.574 --> 00:14:37.477 line:-1 position:50%
from both platform vendors
and service owners


303
00:14:37.477 --> 00:14:40.646 line:-1 position:50%
with the goal of pushing
account security forward.


304
00:14:40,646 --> 00:14:45,118 line:-1
Support for WebAuthn is growing
across operating systems,


305
00:14:45.118 --> 00:14:49.956 line:-1 position:50%
app platforms, web browsers,
and websites.


306
00:14:49,956 --> 00:14:51,724 line:-1
What I’m going to be
talking about


307
00:14:51.724 --> 00:14:53.426 line:-1 position:50%
for the rest of this video,


308
00:14:53.426 --> 00:14:56.095 line:-1 position:50%
and what I’m really excited
to introduce here,


309
00:14:56.095 --> 00:14:58.731 line:-1 position:50%
is a preview
of Apple’s contribution


310
00:14:58,731 --> 00:15:00,933 line:-1
to a postpassword world;


311
00:15:00.933 --> 00:15:04.303 line:-1 position:50%
a new feature that builds
the security of WebAuthn


312
00:15:04,303 --> 00:15:08,007 line:-1
into every iPhone, iPad,
and Mac,


313
00:15:08.007 --> 00:15:13.045 line:-1 position:50%
so it can be used everywhere
as a replacement for passwords.


314
00:15:13,045 --> 00:15:17,049 line:-1
It’s called "passkeys
in iCloud Keychain".


315
00:15:17.049 --> 00:15:19.819 line:-1 position:50%
This new feature stores
a new type of credential,


316
00:15:19,819 --> 00:15:23,222 line:-1
called a "passkey",
in your iCloud Keychain.


317
00:15:23,222 --> 00:15:25,958 line:-1
Passkeys are WebAuthn
credentials


318
00:15:25.958 --> 00:15:28.961 line:-1 position:50%
with the amazing security
that the standard provides


319
00:15:28.961 --> 00:15:33.766 line:-1 position:50%
combined with the usability
of being backed up, synced,


320
00:15:33.766 --> 00:15:36.903 line:-1 position:50%
and working
on all of your devices.


321
00:15:36,903 --> 00:15:40,273 line:-1
We’re storing them
in iCloud Keychain.


322
00:15:40,273 --> 00:15:43,042 line:-1
Just like everything else
in your iCloud Keychain,


323
00:15:43,042 --> 00:15:47,013 line:-1
they’re end-to-end encrypted,
so not even Apple can read them.


324
00:15:47.013 --> 00:15:50.249 line:-1 position:50%
Your secrets are your secrets.


325
00:15:50.249 --> 00:15:53.219 line:-1 position:50%
And they’re very easy to use.


326
00:15:53.219 --> 00:15:54.554 line:-1 position:50%
In most cases,


327
00:15:54.554 --> 00:15:58.090 line:-1 position:50%
it just takes a single tap
or click to sign in.


328
00:15:58,090 --> 00:15:59,725 line:-1
And they’re stronger than most


329
00:15:59.725 --> 00:16:03.863 line:-1 position:50%
password-plus-second-factor
solutions out there today,


330
00:16:03,863 --> 00:16:09,068 line:-1
thanks to the combined security
of WebAuthn and iCloud Keychain.


331
00:16:09,068 --> 00:16:12,138 line:-1
And because it’s just
a single tap to sign in,


332
00:16:12,138 --> 00:16:17,043 line:-1
it’s simultaneously easier,
faster, and more secure


333
00:16:17,043 --> 00:16:21,013 line:-1
than almost all common forms
of authentication today.


334
00:16:21.013 --> 00:16:23.583 line:-1 position:50%
Let’s add it to that chart.


335
00:16:23.583 --> 00:16:26.519 line:-1 position:50%
As I just said,
it’s super easy to use;


336
00:16:26,519 --> 00:16:29,722 line:-1
usually just one tap, or click,
to sign in.


337
00:16:29,722 --> 00:16:33,292 position:50%
What we’re releasing as part
of macOS Monterey and iOS 15


338
00:16:33,292 --> 00:16:35,995 position:50%
works on all
of your Apple devices.


339
00:16:35,995 --> 00:16:38,898 position:50%
Of course, to replace passwords
for everyone,


340
00:16:38,898 --> 00:16:42,101 position:50%
this technology needs
to work on all of your devices,


341
00:16:42,101 --> 00:16:44,804 line:0
including those that
don’t support iCloud Keychain.


342
00:16:44,804 --> 00:16:46,439 position:50%
That functionality
is not present


343
00:16:46,439 --> 00:16:49,208 position:50%
in macOS Monterey and iOS 15.


344
00:16:49,208 --> 00:16:52,011 line:0
Because it’s built in
to all of your Apple devices,


345
00:16:52,011 --> 00:16:54,380 line:0
it’s available any time
you have your iPhone,


346
00:16:54,380 --> 00:16:56,816 position:50%
iPad, or Mac nearby.


347
00:16:56,816 --> 00:16:59,385 line:0
No additional hardware required.


348
00:16:59,385 --> 00:17:02,054 position:50%
It builds on all
of the advanced protections


349
00:17:02,054 --> 00:17:04,257 position:50%
that are part of both
the WebAuthn standard


350
00:17:04,257 --> 00:17:06,225 position:50%
and iCloud Keychain.


351
00:17:06,225 --> 00:17:08,861 line:0
And since it’s backed
by iCloud Keychain,


352
00:17:08,861 --> 00:17:10,830 position:50%
you can still get
your credentials back,


353
00:17:10,830 --> 00:17:13,699 position:50%
even if you lose
all of your Apple devices.


354
00:17:13,699 --> 00:17:15,902 line:0
It has the same
strong platform-provided


355
00:17:15,902 --> 00:17:18,537 position:50%
phishing resistance
as security keys.


356
00:17:18,537 --> 00:17:21,374 position:50%
And because it uses
public/private key pairs,


357
00:17:21,374 --> 00:17:24,644 position:50%
it also means servers
can get out of the business


358
00:17:24,644 --> 00:17:26,779 line:0
of storing
authentication secrets,


359
00:17:26,779 --> 00:17:31,284 line:0
making them less valuable
targets for attackers.


360
00:17:31,284 --> 00:17:34,453 line:-1
So here’s how it works.


361
00:17:34,453 --> 00:17:38,257 line:-1
This is Shiny, our favorite
authentication demo app,


362
00:17:38,257 --> 00:17:39,659 line:-1
whose source code you can find


363
00:17:39.659 --> 00:17:42.628 line:-1 position:50%
in the related links
for this video.


364
00:17:42,628 --> 00:17:45,865 line:-1
First, I need
to create my account.


365
00:17:45,865 --> 00:17:48,401 line:0
I’m going to type in my username


366
00:17:48,401 --> 00:17:51,637 line:0
and tap
the Create Account button.


367
00:17:51,637 --> 00:17:55,441 position:50%
Then, a trusted system sheet
comes up with some information


368
00:17:55,441 --> 00:17:58,878 position:50%
about the credential and where
I can expect to use it.


369
00:17:58,878 --> 00:18:03,916 line:0
I’m going to tap Continue,
Face ID, and I’m done.


370
00:18:03,916 --> 00:18:05,785 line:-1
I didn’t really have
to think about it,


371
00:18:05.785 --> 00:18:09.355 line:-1 position:50%
but I now have a very strong
public/private key credential


372
00:18:09.355 --> 00:18:10.856 line:-1 position:50%
for this account,


373
00:18:10,856 --> 00:18:14,560 line:-1
which is safely stored
in my iCloud Keychain.


374
00:18:14,560 --> 00:18:17,363 line:-1
When I come back to this app
and want to sign in,


375
00:18:17.363 --> 00:18:19.765 line:-1 position:50%
it’s just as easy.


376
00:18:19,765 --> 00:18:21,334 position:50%
When the sheet comes up,


377
00:18:21,334 --> 00:18:23,602 position:50%
I get asked
a very clear question,


378
00:18:23,602 --> 00:18:26,038 position:50%
including the name of the app
I’m signing into


379
00:18:26,038 --> 00:18:28,641 position:50%
and my account.


380
00:18:28,641 --> 00:18:31,744 position:50%
That’s what I want,
so I’m going to tap Continue,


381
00:18:31,744 --> 00:18:34,313 position:50%
Face ID, and I’m done.


382
00:18:34.313 --> 00:18:35.715 line:-1 position:50%
That’s it!


383
00:18:35.715 --> 00:18:38.384 line:-1 position:50%
This is all it takes for people
to create and use


384
00:18:38.384 --> 00:18:40.720 line:-1 position:50%
these new credentials.


385
00:18:40.720 --> 00:18:42.321 line:-1 position:50%
And because they’re
system-managed


386
00:18:42.321 --> 00:18:44.357 line:-1 position:50%
public/private key pairs,


387
00:18:44,357 --> 00:18:47,193 line:-1
they won’t be reused
or guessable,


388
00:18:47,193 --> 00:18:50,963 line:-1
they’re not vulnerable to
breaches of the app or website,


389
00:18:50,963 --> 00:18:53,099 line:-1
and very strong
phishing protections


390
00:18:53,099 --> 00:18:57,203 line:-1
are built in to the operating
system and browser.


391
00:18:57,203 --> 00:18:58,671 line:-1
Speaking of browsers,


392
00:18:58,671 --> 00:19:01,874 line:-1
these credentials also work
on the web.


393
00:19:01,874 --> 00:19:03,709 line:0
Here I am in Safari


394
00:19:03,709 --> 00:19:05,611 position:50%
on the Shiny website’s
home page,


395
00:19:05,611 --> 00:19:08,180 position:50%
which has adopted WebAuthn.


396
00:19:08,180 --> 00:19:10,583 line:0
When I tap the Sign In button,


397
00:19:10,583 --> 00:19:12,518 line:0
I get options here
to use the credential


398
00:19:12,518 --> 00:19:13,953 position:50%
that I just created


399
00:19:13,953 --> 00:19:17,523 line:0
or a security key
if I want to use that.


400
00:19:17,523 --> 00:19:20,593 position:50%
I can tap Continue here,
Face ID,


401
00:19:20,593 --> 00:19:23,662 position:50%
and I’m signed in,
just like in the app.


402
00:19:23,662 --> 00:19:27,867 line:-1
This also works in all
web browser apps on iOS.


403
00:19:27,867 --> 00:19:29,869 line:-1
And it works on Mac, too!


404
00:19:29,869 --> 00:19:32,705 line:-1
These credentials are stored
in iCloud Keychain,


405
00:19:32,705 --> 00:19:35,574 line:-1
so they sync across
all of your devices,


406
00:19:35,574 --> 00:19:37,710 line:-1
and they work
in all kinds of Mac apps,


407
00:19:37.710 --> 00:19:42.381 line:-1 position:50%
as well as on the web in Safari.


408
00:19:42,381 --> 00:19:46,018 line:-1
Now let’s take a peek
at the implementation.


409
00:19:46,018 --> 00:19:48,521 line:-1
First off, for that strong,
platform-provided


410
00:19:48.521 --> 00:19:51.057 line:-1 position:50%
phishing protection
to work for your apps,


411
00:19:51,057 --> 00:19:53,359 line:-1
the device needs
a strong association


412
00:19:53.359 --> 00:19:56.162 line:-1 position:50%
between your app and website.


413
00:19:56.162 --> 00:19:58.597 line:-1 position:50%
This is done through
associated domains,


414
00:19:58,597 --> 00:20:02,001 line:-1
using the “webcredentials”
association type.


415
00:20:02,001 --> 00:20:04,303 position:50%
I won’t go into
too much detail here,


416
00:20:04,303 --> 00:20:05,971 line:0
but you can learn more
by watching


417
00:20:05,971 --> 00:20:08,874 position:50%
the “Introducing Password
AutoFill for Apps” video


418
00:20:08,874 --> 00:20:10,709 position:50%
from a few years ago.


419
00:20:10.709 --> 00:20:13.646 line:-1 position:50%
Next, let’s talk about
creating an account.


420
00:20:13.646 --> 00:20:16.248 line:-1 position:50%
The code here is actually
pretty straightforward.


421
00:20:16,248 --> 00:20:18,517 line:-1
Let’s break it down.


422
00:20:18,517 --> 00:20:21,253 line:-1
Our createAccount function
needs three inputs:


423
00:20:21.253 --> 00:20:24.256 line:-1 position:50%
a single-use challenge
fetched from your server,


424
00:20:24.256 --> 00:20:27.526 line:-1 position:50%
the username for the account,
and the userID,


425
00:20:27,526 --> 00:20:29,095 line:-1
which is generally
the identifier


426
00:20:29.095 --> 00:20:31.697 line:-1 position:50%
for the account on your backend.


427
00:20:31,697 --> 00:20:33,766 line:-1
First, you need
a request provider


428
00:20:33.766 --> 00:20:36.202 line:-1 position:50%
to create request objects.


429
00:20:36.202 --> 00:20:39.472 line:-1 position:50%
The relyingPartyIdentifier
depends on your WebAuthn setup,


430
00:20:39.472 --> 00:20:41.507 line:-1 position:50%
but it’s usually
your domain name.


431
00:20:41,507 --> 00:20:45,511 line:-1
Use that provider to create
a registrationRequest


432
00:20:45.511 --> 00:20:49.081 line:-1 position:50%
and pass the request
to an authorization controller.


433
00:20:49,081 --> 00:20:52,318 line:-1
Finally, set the delegate
and presentationContextProvider


434
00:20:52.318 --> 00:20:55.688 line:-1 position:50%
on the authorization controller
and start your request.


435
00:20:55.688 --> 00:20:58.057 line:-1 position:50%
This will cause that sheet
from earlier to pop up


436
00:20:58,057 --> 00:21:00,759 line:-1
and ask you to create
a credential.


437
00:21:00.759 --> 00:21:02.461 line:-1 position:50%
When the transaction
is finished,


438
00:21:02.461 --> 00:21:04.096 line:-1 position:50%
you’ll receive
a delegate callback


439
00:21:04,096 --> 00:21:07,633 line:-1
with the details
of the new credential.


440
00:21:07,633 --> 00:21:10,302 line:-1
Now, signing in is very similar.


441
00:21:10,302 --> 00:21:12,972 line:-1
Just a few things
need to change.


442
00:21:12,972 --> 00:21:15,374 line:-1
Instead of creating
a registrationRequest,


443
00:21:15.374 --> 00:21:17.977 line:-1 position:50%
you now create
an assertionRequest,


444
00:21:17.977 --> 00:21:19.912 line:-1 position:50%
which is the WebAuthn
terminology used


445
00:21:19,912 --> 00:21:21,847 line:-1
when signing in.


446
00:21:21,847 --> 00:21:25,151 line:-1
The assertionRequest
only needs a challenge.


447
00:21:25,151 --> 00:21:27,786 line:-1
And that’s all you need
to change.


448
00:21:27.786 --> 00:21:29.421 line:-1 position:50%
I want to take a second
to highlight


449
00:21:29.421 --> 00:21:31.957 line:-1 position:50%
that this parameter
to the authorization controller


450
00:21:31.957 --> 00:21:33.792 line:-1 position:50%
is an array.


451
00:21:33,792 --> 00:21:35,861 line:-1
You can pass in a list here
of requests


452
00:21:35.861 --> 00:21:38.430 line:-1 position:50%
for all of the different
authentication mechanisms


453
00:21:38,430 --> 00:21:40,166 line:-1
that your app supports,


454
00:21:40,166 --> 00:21:43,035 line:-1
including passwords
and Sign in with Apple.


455
00:21:43,035 --> 00:21:45,104 line:-1
That sheet from earlier
will be populated


456
00:21:45.104 --> 00:21:48.440 line:-1 position:50%
with whatever credentials
are currently available.


457
00:21:48.440 --> 00:21:51.877 line:-1 position:50%
The only caveat is that
public key registration requests


458
00:21:51.877 --> 00:21:56.148 line:-1 position:50%
can’t be mixed
with nonregistration options.


459
00:21:56.148 --> 00:21:57.683 line:-1 position:50%
OK, so finally,


460
00:21:57,683 --> 00:21:59,785 line:-1
let’s talk about the callback
to your delegate object


461
00:21:59.785 --> 00:22:02.688 line:-1 position:50%
when the authorization
completes.


462
00:22:02.688 --> 00:22:03.989 line:-1 position:50%
The credential is a property


463
00:22:03,989 --> 00:22:07,493 line:-1
of the provided
authorization object.


464
00:22:07,493 --> 00:22:10,262 line:-1
If the user registered
a new platform credential,


465
00:22:10.262 --> 00:22:13.999 line:-1 position:50%
you’ll receive a platform
credential registration.


466
00:22:13,999 --> 00:22:16,702 line:-1
If they signed in with
an existing platform credential,


467
00:22:16,702 --> 00:22:21,106 line:-1
you’ll receive a platform
credential assertion.


468
00:22:21,106 --> 00:22:23,309 line:-1
Or if they signed in
with something else


469
00:22:23,309 --> 00:22:28,180 line:-1
that you support,
you can handle that here, too.


470
00:22:28.180 --> 00:22:31.050 line:-1 position:50%
In any case, you should read
the properties that you need


471
00:22:31.050 --> 00:22:34.353 line:-1 position:50%
from the credential object
just like you would on the web,


472
00:22:34.353 --> 00:22:36.855 line:-1 position:50%
send those values
off to your server,


473
00:22:36,855 --> 00:22:39,959 line:-1
verify them,
and finish the operation.


474
00:22:39,959 --> 00:22:41,694 line:-1
And that’s how it works.


475
00:22:41.694 --> 00:22:44.897 line:-1 position:50%
Now, I just want to mention
a few more details.


476
00:22:44.897 --> 00:22:48.167 line:-1 position:50%
A transition away from passwords
is going to take time,


477
00:22:48.167 --> 00:22:51.103 line:-1 position:50%
and it’s important
to get the details right.


478
00:22:51,103 --> 00:22:55,407 line:-1
In macOS Monterey and iOS 15,
passkeys in iCloud Keychain


479
00:22:55,407 --> 00:22:57,843 line:-1
is being released
as a technology preview


480
00:22:57.843 --> 00:23:00.179 line:-1 position:50%
and is off by default.


481
00:23:00,179 --> 00:23:02,081 line:-1
On iOS, there’s a new switch


482
00:23:02,081 --> 00:23:05,150 line:-1
in the Developer settings
section of the Settings app.


483
00:23:05.150 --> 00:23:08.187 line:-1 position:50%
Turning this on will allow you
to use these synced keys


484
00:23:08.187 --> 00:23:11.657 line:-1 position:50%
in both apps and on the web.


485
00:23:11.657 --> 00:23:15.561 line:-1 position:50%
And on macOS, the switch lives
in Safari’s Develop menu.


486
00:23:15,561 --> 00:23:17,863 line:-1
First, you’ll need to turn on
the Develop menu,


487
00:23:17.863 --> 00:23:20.366 line:-1 position:50%
in Safari’s Advanced settings.


488
00:23:20,366 --> 00:23:21,533 line:-1
You’ll find the setting for this


489
00:23:21,533 --> 00:23:22,868 line:-1
at the bottom
of the Advanced pane


490
00:23:22,868 --> 00:23:25,671 line:-1
in Safari’s preferences.


491
00:23:25.671 --> 00:23:27.573 line:-1 position:50%
Then, you can find the option


492
00:23:27.573 --> 00:23:29.675 line:-1 position:50%
to turn on the Syncing Platform
Authenticator


493
00:23:29,675 --> 00:23:32,077 line:-1
in the Develop menu.


494
00:23:32,077 --> 00:23:35,881 line:-1
Make sure to turn the feature on
when testing.


495
00:23:35,881 --> 00:23:37,983 line:-1
In macOS Monterey and iOS 15,


496
00:23:37.983 --> 00:23:40.052 line:-1 position:50%
these passkeys
are only meant for testing,


497
00:23:40.052 --> 00:23:42.321 line:-1 position:50%
not for production accounts.


498
00:23:42.321 --> 00:23:43.856 line:-1 position:50%
The emphasis of this preview


499
00:23:43.856 --> 00:23:45.958 line:-1 position:50%
is the authentication
technology,


500
00:23:45,958 --> 00:23:50,062 line:-1
an iCloud Keychain-backed
WebAuthn implementation.


501
00:23:50.062 --> 00:23:52.731 line:-1 position:50%
An industry-wide transition
away from passwords


502
00:23:52.731 --> 00:23:55.334 line:-1 position:50%
will need thoughtful
and consistently applied


503
00:23:55,334 --> 00:23:56,669 line:-1
design patterns,


504
00:23:56,669 --> 00:23:59,505 line:-1
which are not part
of this preview.


505
00:23:59.505 --> 00:24:02.107 line:-1 position:50%
And finally,
since this is a preview,


506
00:24:02.107 --> 00:24:05.744 line:-1 position:50%
we've made sure it behaves
gracefully when turned off.


507
00:24:05,744 --> 00:24:08,814 line:-1
Platform registration requests
will return an error,


508
00:24:08,814 --> 00:24:11,717 line:-1
and platform assertion requests
will be silently ignored


509
00:24:11,717 --> 00:24:13,285 line:-1
when the switch is off,


510
00:24:13,285 --> 00:24:16,422 line:-1
even when mixed with other
credential request types.


511
00:24:16.422 --> 00:24:19.258 line:-1 position:50%
So here’s what you can do next.


512
00:24:19,258 --> 00:24:21,994 line:-1
Public key-based,
phishing-resistant credentials


513
00:24:21.994 --> 00:24:25.297 line:-1 position:50%
are the next frontier
in account authentication.


514
00:24:25.297 --> 00:24:28.133 line:-1 position:50%
Go check out
our developer documentation


515
00:24:28.133 --> 00:24:30.069 line:-1 position:50%
and the sample code
linked from this video


516
00:24:30,069 --> 00:24:32,705 line:-1
to help you get started.


517
00:24:32,705 --> 00:24:34,973 line:-1
And if you don’t
already have one,


518
00:24:34.973 --> 00:24:38.043 line:-1 position:50%
bring up a WebAuthn
implementation on your server,


519
00:24:38.043 --> 00:24:42.247 line:-1 position:50%
so that you can start trying out
WebAuthn-based credentials.


520
00:24:42,247 --> 00:24:44,550 line:-1
Now, my favorite part:


521
00:24:44,550 --> 00:24:48,587 line:-1
try out this technology preview
of passkeys in iCloud Keychain


522
00:24:48.587 --> 00:24:51.390 line:-1 position:50%
to see how it fits into
your existing workflows


523
00:24:51.390 --> 00:24:54.426 line:-1 position:50%
in your websites and apps.


524
00:24:54.426 --> 00:24:55.828 line:-1 position:50%
As you’re trying it out,


525
00:24:55.828 --> 00:24:57.830 line:-1 position:50%
please let us know
what you think


526
00:24:57.830 --> 00:25:00.666 line:-1 position:50%
in the developer forums
and Feedback Assistant.


527
00:25:00,666 --> 00:25:02,968 line:-1
We really want to hear from you.


528
00:25:02,968 --> 00:25:04,370 line:-1
As I mentioned earlier,


529
00:25:04,370 --> 00:25:07,039 line:-1
this is the first step
of a multiyear effort


530
00:25:07.039 --> 00:25:08.674 line:-1 position:50%
in replacing passwords,


531
00:25:08.674 --> 00:25:12.111 line:-1 position:50%
and we’re very interested
in what you all have to say.


532
00:25:12.111 --> 00:25:14.513 line:-1 position:50%
Thank you for watching!


533
00:25:14,513 --> 00:25:17,516 position:90% align:right size:2%
♪

