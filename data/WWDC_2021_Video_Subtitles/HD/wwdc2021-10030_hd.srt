2
00:00:00.000 --> 00:00:02.236 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,236 --> 00:00:05,806 line:-1
♪ Bass music playing ♪


4
00:00:05.806 --> 00:00:07.908 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,908 --> 00:00:09,076 line:0 size:2% position:90%
♪


6
00:00:09.076 --> 00:00:12.512 line:-1 position:50%
Sihui Liu: Hello. Welcome to
“Develop advanced web content.”


7
00:00:12,512 --> 00:00:17,017 line:-1
I'm Sihui, and I am an engineer
on the Safari and WebKit team.


8
00:00:17,017 --> 00:00:19,419 line:-1
I am happy to share with you
the important updates


9
00:00:19,419 --> 00:00:21,421 line:-1
we have made in WebKit
and Safari


10
00:00:21,421 --> 00:00:23,857 line:-1
for web developers
in the past year.


11
00:00:23,857 --> 00:00:25,525 line:-1
The things I'm about to share


12
00:00:25.525 --> 00:00:28.095 line:-1 position:50%
generally fall
into three categories.


13
00:00:28,095 --> 00:00:31,465 line:-1
First, I will walk you through
new features and enhancements


14
00:00:31,465 --> 00:00:33,166 line:-1
in JavaScript.


15
00:00:33.166 --> 00:00:39.673 line:-1 position:50%
Then I will give you an overview
of the updates in WebAssembly.


16
00:00:39,673 --> 00:00:43,243 line:-1
And finally, I will introduce
you to some new web APIs


17
00:00:43.243 --> 00:00:45.545 line:-1 position:50%
that can add
additional capabilities


18
00:00:45.545 --> 00:00:47.114 line:-1 position:50%
to your web content.


19
00:00:47.114 --> 00:00:48.615 line:-1 position:50%
There is a lot to cover,


20
00:00:48.615 --> 00:00:51.818 line:-1 position:50%
so let’s begin with our news
in JavaScript.


21
00:00:51,818 --> 00:00:54,454 line:-1
Each year, there are
hundreds of changes made


22
00:00:54,454 --> 00:00:56,423 line:-1
in our JavaScript engine.


23
00:00:56,423 --> 00:00:58,859 line:-1
I will cover some
of the most important ones


24
00:00:58.859 --> 00:01:02.329 line:-1 position:50%
you need know if you work
with JavaScript.


25
00:01:02.329 --> 00:01:06.199 line:-1 position:50%
They are:
new class field syntax,


26
00:01:06.199 --> 00:01:10.871 line:-1 position:50%
weak references that enables
smarter memory management,


27
00:01:10,871 --> 00:01:15,042 line:-1
new usage of the await keyword,


28
00:01:15.042 --> 00:01:20.247 line:-1 position:50%
support for modules in workers,


29
00:01:20,247 --> 00:01:25,152 line:-1
and interfaces added to
Internationalization API family.


30
00:01:25.152 --> 00:01:28.088 line:-1 position:50%
To put you in the picture
of these new features,


31
00:01:28.088 --> 00:01:31.558 line:-1 position:50%
I'm going to use a simple
stopwatch as example.


32
00:01:31,558 --> 00:01:34,027 line:-1
The stopwatch
has only one button.


33
00:01:34.027 --> 00:01:36.563 line:-1 position:50%
Click it once,
it begins counting.


34
00:01:36.563 --> 00:01:38.298 line:-1 position:50%
Click it again, it will stop


35
00:01:38,298 --> 00:01:40,334 line:-1
and give you
the duration passed.


36
00:01:40,334 --> 00:01:42,002 line:-1
Keep this in mind


37
00:01:42.002 --> 00:01:46.373 line:-1 position:50%
and we will implement it later
in JavaScript.


38
00:01:46,373 --> 00:01:49,710 line:-1
Now, let’s take a look
at the new class field syntax.


39
00:01:49.710 --> 00:01:52.412 line:-1 position:50%
We have new private class fields
and methods


40
00:01:52,412 --> 00:01:56,149 line:-1
that let you define
real private members


41
00:01:56.149 --> 00:01:59.119 line:-1 position:50%
whose access is protected
by the language.


42
00:01:59,119 --> 00:02:02,689 line:-1
You will see an error
if you break the access rules.


43
00:02:02.689 --> 00:02:05.559 line:-1 position:50%
We also add support
for static fields,


44
00:02:05.559 --> 00:02:07.894 line:-1 position:50%
which allows you to declare
a class member


45
00:02:07.894 --> 00:02:09.129 line:-1 position:50%
that can be accessed


46
00:02:09.129 --> 00:02:12.933 line:-1 position:50%
without creating an instance
of the class.


47
00:02:12.933 --> 00:02:15.135 line:-1 position:50%
Now you have the basic idea.


48
00:02:15.135 --> 00:02:19.473 line:-1 position:50%
Let’s check how it can be used
with the stopwatch example.


49
00:02:19.473 --> 00:02:23.110 line:-1 position:50%
If you are asked to implement
the stopwatch class,


50
00:02:23,110 --> 00:02:26,213 line:-1
your implementation
may look like this.


51
00:02:26,213 --> 00:02:29,216 line:-1
StopwatchWithOneButton
has only one method


52
00:02:29,216 --> 00:02:30,951 line:-1
named click().


53
00:02:30.951 --> 00:02:33.887 line:-1 position:50%
It checks startTime variable.


54
00:02:33.887 --> 00:02:37.457 line:-1 position:50%
If start time is unset,
the click means to start,


55
00:02:37,457 --> 00:02:39,693 line:-1
so it will set the start time.


56
00:02:39.693 --> 00:02:43.230 line:-1 position:50%
If start time is already set,
the click means to stop,


57
00:02:43.230 --> 00:02:47.300 line:-1 position:50%
so it will calculate a duration
and reset the start time.


58
00:02:47,300 --> 00:02:51,238 line:-1
You can see startTime comes
with an underscore prefix.


59
00:02:51.238 --> 00:02:54.674 line:-1 position:50%
This is a naming convention
commonly used to denote


60
00:02:54,674 --> 00:02:58,612 line:-1
that the variable should only
be used inside of the class.


61
00:02:58.612 --> 00:03:01.048 line:-1 position:50%
But that does not actually
prevent the start time


62
00:03:01,048 --> 00:03:03,250 line:-1
from being accessed publicly.


63
00:03:03.250 --> 00:03:06.319 line:-1 position:50%
The new private syntax
can help fix this.


64
00:03:06,319 --> 00:03:08,622 line:-1
Just replace the underscore
with hash,


65
00:03:08,622 --> 00:03:11,858 line:-1
and you can declare
a real private instance field.


66
00:03:11.858 --> 00:03:15.729 line:-1 position:50%
The encapsulation is enforced
by the language.


67
00:03:15,729 --> 00:03:18,765 line:-1
There is also support
for private methods.


68
00:03:18.765 --> 00:03:22.436 line:-1 position:50%
For example, to make
click() methods more structured,


69
00:03:22.436 --> 00:03:24.571 line:-1 position:50%
we can create
two private methods


70
00:03:24.571 --> 00:03:26.006 line:-1 position:50%
start() and stop()


71
00:03:26.006 --> 00:03:30.844 line:-1 position:50%
to replace the highlighted
content, like this.


72
00:03:30,844 --> 00:03:33,180 line:-1
By adding the hash prefix
to methods,


73
00:03:33.180 --> 00:03:35.982 line:-1 position:50%
we make sure the member
functions can only be accessed


74
00:03:35.982 --> 00:03:39.453 line:-1 position:50%
from inside of the class.


75
00:03:39.453 --> 00:03:43.123 line:-1 position:50%
The new private syntax
also applies to static fields


76
00:03:43.123 --> 00:03:45.358 line:-1 position:50%
like startedStopwatchCount.


77
00:03:45,358 --> 00:03:48,595 line:-1
Here, startedStopwatchCount
can only be modified


78
00:03:48.595 --> 00:03:52.499 line:-1 position:50%
by stopwatch objects
at start or stop times.


79
00:03:52,499 --> 00:03:54,568 line:-1
Of course, if you want
startedStopwatchCount


80
00:03:54.568 --> 00:03:57.571 line:-1 position:50%
to be accessed everywhere,


81
00:03:57.571 --> 00:04:00.207 line:-1 position:50%
you can declare it
as public static field,


82
00:04:00,207 --> 00:04:02,275 line:-1
without the hash prefix.


83
00:04:02,275 --> 00:04:06,546 line:-1
Public static field
is also available in WebKit now.


84
00:04:06,546 --> 00:04:08,982 line:-1
Private instance fields,
methods,


85
00:04:08.982 --> 00:04:12.018 line:-1 position:50%
private static fields,
and public static fields;


86
00:04:12,018 --> 00:04:14,788 line:-1
that’s our new
class field support.


87
00:04:14,788 --> 00:04:17,190 line:-1
And let’s continue
to another feature,


88
00:04:17.190 --> 00:04:19.793 line:-1 position:50%
weak references.


89
00:04:19.793 --> 00:04:22.395 line:-1 position:50%
Weak references allow you
to hold reference


90
00:04:22.395 --> 00:04:24.097 line:-1 position:50%
to a JavaScript object in a way


91
00:04:24.097 --> 00:04:27.801 line:-1 position:50%
that does not prevent
garbage collection.


92
00:04:27.801 --> 00:04:30.403 line:-1 position:50%
Unlike WeakMap and WeakSet,


93
00:04:30.403 --> 00:04:32.072 line:-1 position:50%
you can get
the underlying object


94
00:04:32,072 --> 00:04:35,542 line:-1
without already having
a reference to it.


95
00:04:35,542 --> 00:04:37,310 line:-1
The support also includes


96
00:04:37,310 --> 00:04:39,513 line:-1
notification
on garbage collection,


97
00:04:39.513 --> 00:04:43.116 line:-1 position:50%
so you may perform some
cleanup task if you need to.


98
00:04:43.116 --> 00:04:45.852 line:-1 position:50%
And let’s see how
it can be used.


99
00:04:45.852 --> 00:04:48.622 line:-1 position:50%
We just implemented
the stopwatch class.


100
00:04:48,622 --> 00:04:52,159 line:-1
Now imagine you have created
multiple stopwatch objects


101
00:04:52.159 --> 00:04:54.027 line:-1 position:50%
for different tasks.


102
00:04:54,027 --> 00:04:57,430 line:-1
For testing, you need to click
all of them at a time.


103
00:04:57.430 --> 00:04:59.599 line:-1 position:50%
How would you do that?


104
00:04:59,599 --> 00:05:01,268 line:-1
An intuitive way is to keep


105
00:05:01,268 --> 00:05:04,070 line:-1
a set of all
stopwatch instances.


106
00:05:04.070 --> 00:05:07.674 line:-1 position:50%
When the stopwatch is created,
add it to the set.


107
00:05:07.674 --> 00:05:10.343 line:-1 position:50%
Then in clickAllStopwatches
function,


108
00:05:10,343 --> 00:05:14,147 line:-1
iterate the set
and click each stopwatch.


109
00:05:14,147 --> 00:05:17,684 line:-1
But there is an issue
with this approach.


110
00:05:17,684 --> 00:05:19,486 line:-1
We know JavaScript objects


111
00:05:19.486 --> 00:05:22.489 line:-1 position:50%
hold strong reference
by default, so in this case


112
00:05:22.489 --> 00:05:25.058 line:-1 position:50%
all stopwatch objects
cannot be garbage collected


113
00:05:25,058 --> 00:05:28,094 line:-1
because the set still has
reference to them.


114
00:05:28.094 --> 00:05:31.064 line:-1 position:50%
Of course, we don’t want to keep
all stopwatch objects around


115
00:05:31,064 --> 00:05:32,832 line:-1
just for testing.


116
00:05:32.832 --> 00:05:36.069 line:-1 position:50%
This is not great
for memory use.


117
00:05:36,069 --> 00:05:39,906 line:-1
Now, you may suggest
just replacing Set with WeakSet,


118
00:05:39.906 --> 00:05:42.375 line:-1 position:50%
but WeakSet is not iterable.


119
00:05:42.375 --> 00:05:44.110 line:-1 position:50%
So what would you do?


120
00:05:44.110 --> 00:05:47.514 line:-1 position:50%
We can solve it
with the new interface WeakRef,


121
00:05:47,514 --> 00:05:50,350 line:-1
which holds weak references
to an object.


122
00:05:50,350 --> 00:05:51,885 line:-1
We still have the set,


123
00:05:51.885 --> 00:05:56.389 line:-1 position:50%
but this time we add WeakRef
of stopwatch objects to the set.


124
00:05:56.389 --> 00:05:58.725 line:-1 position:50%
In clickAllStopwatches function,


125
00:05:58.725 --> 00:06:01.628 line:-1 position:50%
we check if the object
still exists


126
00:06:01,628 --> 00:06:04,664 line:-1
by dereferencing it
before clicking.


127
00:06:04.664 --> 00:06:08.768 line:-1 position:50%
This seems to solve our issue,
but there is another problem:


128
00:06:08.768 --> 00:06:11.204 line:-1 position:50%
we don’t remove
garbage-collected stopwatches


129
00:06:11,204 --> 00:06:13,506 line:-1
from the set in a timely manner,


130
00:06:13,506 --> 00:06:17,677 line:-1
and the set can grow quite large
before our next click test.


131
00:06:17,677 --> 00:06:21,047 line:-1
Now what should we do?


132
00:06:21,047 --> 00:06:24,217 line:-1
Another new interface --
FinalizationRegistry --


133
00:06:24,217 --> 00:06:25,986 line:-1
may help in this case.


134
00:06:25,986 --> 00:06:29,589 line:-1
With it, you can specify
a callback to be invoked


135
00:06:29.589 --> 00:06:32.559 line:-1 position:50%
at when some object
is garbage collected.


136
00:06:32,559 --> 00:06:35,962 line:-1
Here we create
a finalizationRegistry object


137
00:06:35,962 --> 00:06:39,866 line:-1
with removeStopwatch function,
so this function is called


138
00:06:39,866 --> 00:06:43,103 line:-1
every time an object
is collected.


139
00:06:43,103 --> 00:06:47,207 line:-1
Then, we register stopwatch
objects to the registry.


140
00:06:47,207 --> 00:06:50,310 line:-1
Each stopwatch is bound
with an identifier,


141
00:06:50.310 --> 00:06:54.481 line:-1 position:50%
so removeStopwatch knows
which stopwatch to remove.


142
00:06:54,481 --> 00:06:57,984 line:-1
Good, now garbage-collected
stopwatches will be removed


143
00:06:57.984 --> 00:07:00.186 line:-1 position:50%
from allStopwatches.


144
00:07:00.186 --> 00:07:05.592 line:-1 position:50%
The usage of weak references
sounds not that hard, right?


145
00:07:05,592 --> 00:07:08,628 line:-1
But be aware that garbage
collection in JavaScript


146
00:07:08,628 --> 00:07:10,096 line:-1
is very complicated,


147
00:07:10,096 --> 00:07:12,599 line:-1
and there is
a lot of uncertainty.


148
00:07:12.599 --> 00:07:13.900 line:-1 position:50%
For example,


149
00:07:13.900 --> 00:07:15.602 line:-1 position:50%
the object you think
should be collected


150
00:07:15,602 --> 00:07:19,639 line:-1
may not actually be collected
until a long time after,


151
00:07:19.639 --> 00:07:22.876 line:-1 position:50%
and you may not get the callback
from FinalizationRegistry


152
00:07:22.876 --> 00:07:26.680 line:-1 position:50%
right way because it runs
on event loop.


153
00:07:26.680 --> 00:07:30.083 line:-1 position:50%
Therefore, make sure
you fully understand the syntax


154
00:07:30.083 --> 00:07:33.253 line:-1 position:50%
and its expected behavior
before use.


155
00:07:33,253 --> 00:07:35,355 line:-1
Let’s move on
from weak references


156
00:07:35.355 --> 00:07:37.757 line:-1 position:50%
to the next feature,
top-level await.


157
00:07:37,757 --> 00:07:40,660 line:-1
This is a new feature
for modules.


158
00:07:40,660 --> 00:07:43,430 line:-1
It enables you to use
the await keyword


159
00:07:43,430 --> 00:07:46,333 line:-1
outside of the async function.


160
00:07:46.333 --> 00:07:50.437 line:-1 position:50%
In this case, the module itself
is like a big async function,


161
00:07:50.437 --> 00:07:52.405 line:-1 position:50%
so an async module can block


162
00:07:52.405 --> 00:07:55.909 line:-1 position:50%
the execution of the module
importing them.


163
00:07:55.909 --> 00:08:00.680 line:-1 position:50%
Let me show you an example
with our stopwatch class.


164
00:08:00.680 --> 00:08:03.149 line:-1 position:50%
This is the class
we just created.


165
00:08:03,149 --> 00:08:05,652 line:-1
To illustrate a use
of top-level await,


166
00:08:05,652 --> 00:08:09,622 line:-1
let’s make it a module
and export the class.


167
00:08:09,622 --> 00:08:13,860 line:-1
This is an HTML file
that contains an inline module.


168
00:08:13.860 --> 00:08:18.631 line:-1 position:50%
It imports the stopwatch module
using dynamic import.


169
00:08:18.631 --> 00:08:21.401 line:-1 position:50%
The import function
returns a promise,


170
00:08:21,401 --> 00:08:25,038 line:-1
so we can use then or catch
methods to perform actions


171
00:08:25,038 --> 00:08:27,674 line:-1
after import is done.


172
00:08:27,674 --> 00:08:29,843 line:-1
With top-level await,


173
00:08:29.843 --> 00:08:31.978 line:-1 position:50%
you can remove
the chaining methods


174
00:08:31.978 --> 00:08:34.547 line:-1 position:50%
and write the code
in a synchronous way.


175
00:08:34,547 --> 00:08:38,651 line:-1
This can make your code
easier to follow.


176
00:08:38.651 --> 00:08:42.989 line:-1 position:50%
Also, because imported modules
are evaluated at load time,


177
00:08:42.989 --> 00:08:46.493 line:-1 position:50%
so an async module can block
execution of modules


178
00:08:46.493 --> 00:08:48.128 line:-1 position:50%
depending on it.


179
00:08:48.128 --> 00:08:50.964 line:-1 position:50%
That means if stopwatch module
runs async operations


180
00:08:50.964 --> 00:08:52.699 line:-1 position:50%
and waits for result,


181
00:08:52.699 --> 00:08:55.468 line:-1 position:50%
the stopwatch variable here
will be initialized


182
00:08:55,468 --> 00:08:59,172 line:-1
after stopwatch module
finishes execution.


183
00:08:59,172 --> 00:09:01,274 line:-1
Top-level await
has made it easier


184
00:09:01.274 --> 00:09:03.243 line:-1 position:50%
to do dependency management.


185
00:09:03,243 --> 00:09:07,380 line:-1
But again, this feature
is only available in modules,


186
00:09:07.380 --> 00:09:12.218 line:-1 position:50%
so if the script
is not a module, like this...


187
00:09:14,220 --> 00:09:17,791 line:-1
...you will see a syntax error
in Web Inspector.


188
00:09:17,791 --> 00:09:21,027 line:-1
Speaking of modules,
there’s another related feature:


189
00:09:21,027 --> 00:09:22,328 line:-1
module workers.


190
00:09:22.328 --> 00:09:25.331 line:-1 position:50%
Workers has some
well-known benefits.


191
00:09:25,331 --> 00:09:27,767 line:-1
It can run scripts
in a background thread,


192
00:09:27.767 --> 00:09:31.871 line:-1 position:50%
so resources can be utilized
more efficiently.


193
00:09:31.871 --> 00:09:33.273 line:-1 position:50%
With this new support,


194
00:09:33,273 --> 00:09:36,242 line:-1
workers now share the benefits
of modules,


195
00:09:36.242 --> 00:09:40.647 line:-1 position:50%
including dynamic import,
optimized loading and execution,


196
00:09:40,647 --> 00:09:44,217 line:-1
and dependency management.


197
00:09:44,217 --> 00:09:47,854 line:-1
It is more beneficial and easier
for you to move heavy work


198
00:09:47.854 --> 00:09:51.925 line:-1 position:50%
from main thread
to background thread now.


199
00:09:51.925 --> 00:09:55.628 line:-1 position:50%
Modules is now available
in different types of workers,


200
00:09:55,628 --> 00:09:58,898 line:-1
including web worker,
service worker, and worklet.


201
00:09:58.898 --> 00:10:01.367 line:-1 position:50%
To create a module worker,


202
00:10:01.367 --> 00:10:03.736 line:-1 position:50%
for web workers
and service worker,


203
00:10:03.736 --> 00:10:07.740 line:-1 position:50%
you need to specify type
to be module in the options.


204
00:10:07,740 --> 00:10:09,809 line:0
For a worklet
like Audio Worklet,


205
00:10:09,809 --> 00:10:12,579 line:0
you can use addModule function.


206
00:10:12,579 --> 00:10:15,248 position:50%
It’s quite easy to create
a module worker


207
00:10:15,248 --> 00:10:18,017 position:50%
that helps speed up
your application.


208
00:10:18,017 --> 00:10:19,752 line:-1
Last in JavaScript section


209
00:10:19,752 --> 00:10:23,323 line:-1
is updates
on the Internationalization API.


210
00:10:23,323 --> 00:10:26,659 line:-1
This API provides
language-based formatting.


211
00:10:26.659 --> 00:10:29.629 line:-1 position:50%
It is useful if your web content
is built for users


212
00:10:29,629 --> 00:10:31,397 line:-1
in different locales.


213
00:10:31,397 --> 00:10:33,466 line:-1
To show you how it can be used,


214
00:10:33,466 --> 00:10:36,936 line:-1
I built this stopwatch records
page because, you know,


215
00:10:36,936 --> 00:10:39,005 line:-1
stopwatch needs to keep up
with times


216
00:10:39.005 --> 00:10:41.341 line:-1 position:50%
and our feature releases.


217
00:10:41,341 --> 00:10:45,178 line:-1
This page shows us details
about a single use of stopwatch,


218
00:10:45.178 --> 00:10:49.749 line:-1 position:50%
including duration,
start time, event, participants,


219
00:10:49,749 --> 00:10:53,119 line:-1
and the available languages
of the page.


220
00:10:53.119 --> 00:10:55.054 line:-1 position:50%
Now, let’s dive into
each section


221
00:10:55,054 --> 00:10:58,157 line:-1
and take a closer look
of each interface.


222
00:10:58,157 --> 00:11:00,326 line:-1
First is NumberFormat.


223
00:11:00.326 --> 00:11:01.828 line:-1 position:50%
NumberFormat provides


224
00:11:01,828 --> 00:11:03,897 line:-1
language-sensitive
number formatting,


225
00:11:03.897 --> 00:11:06.699 line:-1 position:50%
and it is used to format
the duration.


226
00:11:06.699 --> 00:11:10.937 line:-1 position:50%
Constructor of NumberFormat
takes two optional parameters:


227
00:11:10,937 --> 00:11:13,239 line:-1
language and options.


228
00:11:13,239 --> 00:11:15,842 line:-1
Here I set the language
to English


229
00:11:15,842 --> 00:11:18,211 line:-1
and I make two options object,


230
00:11:18,211 --> 00:11:22,148 line:-1
which specify different
minimum numbers of digits.


231
00:11:22,148 --> 00:11:24,918 line:-1
After creating
two NumberFormat objects


232
00:11:24.918 --> 00:11:26.753 line:-1 position:50%
with language and options,


233
00:11:26,753 --> 00:11:29,756 line:-1
we can use them to format
the duration numbers.


234
00:11:29.756 --> 00:11:32.625 line:-1 position:50%
Here, if number
is not milliseconds,


235
00:11:32.625 --> 00:11:35.461 line:-1 position:50%
I use Format1
to keep two digits;


236
00:11:35.461 --> 00:11:39.132 line:-1 position:50%
otherwise I use Format2
to keep three digits.


237
00:11:39,132 --> 00:11:41,367 line:-1
As you can see,
the format method


238
00:11:41.367 --> 00:11:44.771 line:-1 position:50%
automatically adds
padding zeroes for us.


239
00:11:44,771 --> 00:11:47,040 line:-1
There are many different options
you can utilize


240
00:11:47,040 --> 00:11:50,410 line:-1
to create formats you need,
such as style,


241
00:11:50,410 --> 00:11:54,814 line:-1
where you can specify value
to be currency or unit.


242
00:11:54.814 --> 00:11:57.016 line:-1 position:50%
Next is DateTimeFormat,


243
00:11:57,016 --> 00:12:01,087 line:-1
which enables language-sensitive
date and time formatting.


244
00:12:01.087 --> 00:12:03.823 line:-1 position:50%
The usage is similar
to NumberFormat.


245
00:12:03.823 --> 00:12:05.858 line:-1 position:50%
First, set the language.


246
00:12:05,858 --> 00:12:07,961 line:-1
Then, set the options.


247
00:12:07.961 --> 00:12:09.963 line:-1 position:50%
In the options,
I set different styles


248
00:12:09.963 --> 00:12:11.931 line:-1 position:50%
for date and time.


249
00:12:11,931 --> 00:12:13,633 line:-1
The DateTimeFormat object


250
00:12:13,633 --> 00:12:15,802 line:-1
provides a fine-grained
configuration


251
00:12:15,802 --> 00:12:20,573 line:-1
that even allows you to specify
style for second or millisecond.


252
00:12:20.573 --> 00:12:24.477 line:-1 position:50%
After that, we can create
a DateTimeFormat object


253
00:12:24.477 --> 00:12:25.912 line:-1 position:50%
with parameters,


254
00:12:25.912 --> 00:12:28.848 line:-1 position:50%
and use it to format
our start time.


255
00:12:28.848 --> 00:12:31.985 line:-1 position:50%
The result is represented
in English.


256
00:12:31,985 --> 00:12:33,853 line:-1
You can see date
is more detailed


257
00:12:33.853 --> 00:12:37.890 line:-1 position:50%
because it has the long style.


258
00:12:37.890 --> 00:12:39.993 line:-1 position:50%
Next one is Segmenter.


259
00:12:39.993 --> 00:12:41.361 line:-1 position:50%
It enables you to do


260
00:12:41.361 --> 00:12:43.863 line:-1 position:50%
language-sensitive
string splitting.


261
00:12:43,863 --> 00:12:48,134 line:-1
I used it to find keywords
in the event sentence.


262
00:12:48.134 --> 00:12:52.005 line:-1 position:50%
This is the Chinese version
of the stopwatch records page.


263
00:12:52.005 --> 00:12:56.376 line:-1 position:50%
First, I declare a short list
of keywords I want to highlight.


264
00:12:56,376 --> 00:12:58,978 line:-1
The event string
even includes a Unicode


265
00:12:58,978 --> 00:13:01,581 line:-1
for the Celsius degree symbol.


266
00:13:01.581 --> 00:13:04.550 line:-1 position:50%
Here we specify
Chinese as language.


267
00:13:04.550 --> 00:13:08.688 line:-1 position:50%
In options, the granularity
is set to be a word.


268
00:13:08.688 --> 00:13:12.492 line:-1 position:50%
The other possible values
are grapheme and sentence.


269
00:13:12,492 --> 00:13:14,460 line:-1
Then we create a Segmenter


270
00:13:14.460 --> 00:13:18.464 line:-1 position:50%
and use it to split the string
with segment method.


271
00:13:18,464 --> 00:13:22,869 line:-1
We can iterate the result
objects to get all segments.


272
00:13:22,869 --> 00:13:25,271 line:-1
Check and see if each segment


273
00:13:25,271 --> 00:13:28,941 line:-1
is contained in
the keyword list to mark it.


274
00:13:28.941 --> 00:13:31.911 line:-1 position:50%
Segmenter is quite useful
for interpreting languages,


275
00:13:31,911 --> 00:13:38,518 line:-1
like Chinese, where the word
boundary is not that obvious.


276
00:13:38,518 --> 00:13:40,353 line:-1
The next is ListFormat,


277
00:13:40.353 --> 00:13:43.589 line:-1 position:50%
which enables language-sensitive
list formatting.


278
00:13:43,589 --> 00:13:45,091 line:-1
The same as before,


279
00:13:45,091 --> 00:13:47,627 line:-1
we can specify language
and options.


280
00:13:47,627 --> 00:13:50,363 line:-1
ListFormat does not have
as many options


281
00:13:50.363 --> 00:13:52.365 line:-1 position:50%
as the other interfaces.


282
00:13:52,365 --> 00:13:56,436 line:-1
The most useful ones I found
are type and style.


283
00:13:56.436 --> 00:14:00.373 line:-1 position:50%
With language and options,
we can create a ListFormat


284
00:14:00,373 --> 00:14:03,743 line:-1
and format the participants list
we have.


285
00:14:03.743 --> 00:14:05.378 line:-1 position:50%
As you can see,


286
00:14:05,378 --> 00:14:08,448 line:-1
because the type is conjunction
and the style is long,


287
00:14:08.448 --> 00:14:13.753 line:-1 position:50%
the format method adds a comma
and a word “and” in the result.


288
00:14:13.753 --> 00:14:16.022 line:-1 position:50%
The last one is DisplayNames.


289
00:14:16.022 --> 00:14:18.524 line:-1 position:50%
It provides consistent
translation of display names


290
00:14:18.524 --> 00:14:21.360 line:-1 position:50%
for language, region,
and script.


291
00:14:21.360 --> 00:14:24.230 line:-1 position:50%
Here I specify language
to be Japanese.


292
00:14:24.230 --> 00:14:27.700 line:-1 position:50%
DisplayNames can take
language code as input.


293
00:14:27,700 --> 00:14:31,404 line:-1
In the options,
we set type as language.


294
00:14:31.404 --> 00:14:34.240 line:-1 position:50%
Then we can create
DisplayNames object.


295
00:14:34.240 --> 00:14:36.676 line:-1 position:50%
And here, using of method,


296
00:14:36,676 --> 00:14:39,545 line:-1
we can get
the translated result.


297
00:14:39.545 --> 00:14:41.881 line:-1 position:50%
Even though this page
is built in English,


298
00:14:41.881 --> 00:14:45.752 line:-1 position:50%
Japanese users can know
what languages are supported.


299
00:14:45,752 --> 00:14:49,055 line:-1
And this is how I built
the stopwatch records page


300
00:14:49.055 --> 00:14:52.091 line:-1 position:50%
with new internationalization
interfaces.


301
00:14:52.091 --> 00:14:55.328 line:-1 position:50%
To refresh your memory,
here is the list of things


302
00:14:55.328 --> 00:14:58.631 line:-1 position:50%
we’ve just looked at
in the JavaScript section.


303
00:14:58,631 --> 00:15:04,470 line:-1
Following that, our next stop
is updates in WebAssembly.


304
00:15:04,470 --> 00:15:06,606 line:-1
We’ve been shipping
our WebAssembly engine


305
00:15:06.606 --> 00:15:09.776 line:-1 position:50%
for a while, but in case you’re
not familiar with it,


306
00:15:09,776 --> 00:15:12,078 line:-1
let me begin by filling in
with some background


307
00:15:12.078 --> 00:15:13.846 line:-1 position:50%
of WebAssembly.


308
00:15:13,846 --> 00:15:16,682 line:-1
WebAssembly is
a binary instruction format


309
00:15:16.682 --> 00:15:20.319 line:-1 position:50%
for a stack-based
virtual machine.


310
00:15:20.319 --> 00:15:23.956 line:-1 position:50%
It is a type of a code that can
be run in modern web browsers


311
00:15:23,956 --> 00:15:26,893 line:-1
with performance
close to native code.


312
00:15:26.893 --> 00:15:30.963 line:-1 position:50%
WebAssembly is designed to be
a portable compilation target


313
00:15:30,963 --> 00:15:35,268 line:-1
for programming languages
like C, C++, or Rust,


314
00:15:35,268 --> 00:15:37,870 line:-1
so WebAssembly can help us
deploy applications


315
00:15:37.870 --> 00:15:42.508 line:-1 position:50%
written in those languages
on the web.


316
00:15:42.508 --> 00:15:45.178 line:-1 position:50%
In most use cases
of WebAssembly,


317
00:15:45,178 --> 00:15:47,713 line:-1
it runs alongside
with JavaScript.


318
00:15:47,713 --> 00:15:49,515 line:-1
They can communicate
with each other


319
00:15:49,515 --> 00:15:52,018 line:-1
through the WebAssembly API.


320
00:15:52.018 --> 00:15:54.921 line:-1 position:50%
WebAssembly can provide
near-native performance,


321
00:15:54.921 --> 00:15:59.525 line:-1 position:50%
and makes powerful frameworks
available on the web.


322
00:15:59.525 --> 00:16:01.761 line:-1 position:50%
JavaScript can manipulate
the DOM


323
00:16:01,761 --> 00:16:04,430 line:-1
and offers powerful web APIs.


324
00:16:04.430 --> 00:16:09.035 line:-1 position:50%
They can be good additions
to each other.


325
00:16:09,035 --> 00:16:12,672 line:-1
A good example of WebAssembly
use is Funky Karts.


326
00:16:12,672 --> 00:16:17,643 line:-1
It is a game converted from C++
to WebAssembly with Emscripten.


327
00:16:17,643 --> 00:16:22,748 line:-1
As you can see, it gets to run
very smoothly in Safari.


328
00:16:22.748 --> 00:16:25.985 line:-1 position:50%
This year, we’ve upgraded
our WebAssembly engine


329
00:16:25,985 --> 00:16:30,356 line:-1
with following features:
new memory instructions


330
00:16:30,356 --> 00:16:33,593 line:-1
that give you better performance
on bulk memory operations,


331
00:16:33.593 --> 00:16:37.830 line:-1 position:50%
like copying or initializing
blocks of memory;


332
00:16:37,830 --> 00:16:40,032 line:-1
new instructions
to tell user process


333
00:16:40.032 --> 00:16:43.769 line:-1 position:50%
not to trap on exception,
like positive overflow


334
00:16:43.769 --> 00:16:47.640 line:-1 position:50%
when converting
between float and int;


335
00:16:47.640 --> 00:16:49.909 line:-1 position:50%
new sign-extension operators


336
00:16:49,909 --> 00:16:54,080 line:-1
that let you extend
a signed integer;


337
00:16:54.080 --> 00:16:57.383 line:-1 position:50%
implementation of the latest
proposal to convert


338
00:16:57,383 --> 00:17:01,587 line:-1
between WebAssembly
type i64 and JavaScript BigInt,


339
00:17:01.587 --> 00:17:03.789 line:-1 position:50%
which is simpler
than previous solutions


340
00:17:03,789 --> 00:17:07,326 line:-1
and can make your code
run faster;


341
00:17:07.326 --> 00:17:10.429 line:-1 position:50%
new reference types that allows
WebAssembly modules


342
00:17:10,429 --> 00:17:13,666 line:-1
to hold references to JavaScript
and DOM objects,


343
00:17:13.666 --> 00:17:17.103 line:-1 position:50%
passing them as arguments
and storing them;


344
00:17:17,103 --> 00:17:21,173 position:50%
and finally, streaming download
and compilation of WebAssembly


345
00:17:21,173 --> 00:17:24,343 position:50%
that shortens
overall execution time.


346
00:17:24.343 --> 00:17:28.281 line:-1 position:50%
These are the highlights
of our new WebAssembly features.


347
00:17:28.281 --> 00:17:31.017 line:-1 position:50%
We hope they will help
your development.


348
00:17:31.017 --> 00:17:33.886 line:-1 position:50%
Now, let's move
from powerful low-level code


349
00:17:33.886 --> 00:17:37.790 line:-1 position:50%
to some high-level APIs.


350
00:17:37,790 --> 00:17:39,058 line:-1
In this section,


351
00:17:39,058 --> 00:17:42,528 line:-1
we are going to explore
the new web APIs.


352
00:17:42,528 --> 00:17:44,664 line:-1
My goal is to not only
let you know


353
00:17:44.664 --> 00:17:46.165 line:-1 position:50%
about the new features


354
00:17:46.165 --> 00:17:49.135 line:-1 position:50%
but also make you feel you are
ready to use them,


355
00:17:49,135 --> 00:17:52,138 line:-1
so you will see
some good examples.


356
00:17:52.138 --> 00:17:54.941 line:-1 position:50%
But this will not be
a complete tutorial,


357
00:17:54,941 --> 00:17:59,512 line:-1
so remember to check official
documentation before use.


358
00:17:59,512 --> 00:18:02,682 line:-1
This is a preview of features
I will talk about.


359
00:18:02,682 --> 00:18:04,984 line:-1
Some of them are
completely new


360
00:18:04,984 --> 00:18:06,218 line:-1
like Speech Recognition


361
00:18:06,218 --> 00:18:08,187 line:-1
and some of them
are already there,


362
00:18:08,187 --> 00:18:10,790 line:-1
but we have some updates
we’d like to share,


363
00:18:10.790 --> 00:18:12.792 line:-1 position:50%
like Storage Access.


364
00:18:12.792 --> 00:18:17.396 line:-1 position:50%
Now, let’s dig into
each of them.


365
00:18:17,396 --> 00:18:19,565 line:-1
We know to make
the web content attractive,


366
00:18:19.565 --> 00:18:24.570 line:-1 position:50%
it’s very important to provide
amazing visual experience.


367
00:18:24.570 --> 00:18:27.740 line:-1 position:50%
With WebGL2 being available
in WebKit and Safari,


368
00:18:27,740 --> 00:18:29,608 line:-1
it’s easier for you to create


369
00:18:29.608 --> 00:18:33.612 line:-1 position:50%
beautiful,
interactive web content.


370
00:18:33,612 --> 00:18:35,948 line:-1
Here is a good example
of what can be done


371
00:18:35,948 --> 00:18:37,550 line:-1
with WebGL2.


372
00:18:37,550 --> 00:18:39,585 line:-1
After the Flood
is an interactive demo


373
00:18:39,585 --> 00:18:42,355 line:-1
developed by PlayCanvas.


374
00:18:42.355 --> 00:18:45.358 line:-1 position:50%
You can see the gentle wind
sways the tree.


375
00:18:45.358 --> 00:18:48.127 line:-1 position:50%
It looks vivid in Safari.


376
00:18:48.127 --> 00:18:50.196 line:-1 position:50%
So what is WebGL2?


377
00:18:50.196 --> 00:18:53.332 line:-1 position:50%
WebGL is a very widely used
low-level API


378
00:18:53.332 --> 00:18:56.102 line:-1 position:50%
for rendering
2D and 3D graphics.


379
00:18:56,102 --> 00:18:58,871 line:-1
WebGL2 is an upgrade
of WebGL


380
00:18:58,871 --> 00:19:00,573 line:-1
that eliminates fallbacks


381
00:19:00.573 --> 00:19:03.275 line:-1 position:50%
and introduces
some cool new features.


382
00:19:03,275 --> 00:19:07,246 line:-1
It adds 3D textures to allow
rendering volumetric effects


383
00:19:07,246 --> 00:19:09,348 line:-1
like cloud.


384
00:19:09,348 --> 00:19:12,885 line:-1
It has sampler objects
that give you more flexibility


385
00:19:12.885 --> 00:19:16.288 line:-1 position:50%
about how to use textures
in shaders.


386
00:19:16.288 --> 00:19:19.992 line:-1 position:50%
It provides transform feedback
that helps you implement


387
00:19:19,992 --> 00:19:23,129 line:-1
performance particle systems
on the GPU.


388
00:19:23,129 --> 00:19:27,967 line:-1
There are so many great
new features in WebGL2.


389
00:19:27,967 --> 00:19:29,902 line:-1
And more importantly,


390
00:19:29.902 --> 00:19:34.006 line:-1 position:50%
WebGL2 is now available
in Safari on all Apple devices.


391
00:19:34,006 --> 00:19:36,075 line:-1
That means you can build
a beautiful site


392
00:19:36,075 --> 00:19:39,078 line:-1
that looks great everywhere.


393
00:19:39.078 --> 00:19:42.815 line:-1 position:50%
And let’s get more familiar with
WebGL2 with an example:


394
00:19:42,815 --> 00:19:46,919 line:-1
creating an orange square.


395
00:19:46,919 --> 00:19:50,623 line:-1
And this is the JavaScript code
you need to write for it.


396
00:19:50,623 --> 00:19:52,858 line:-1
If you have not used
WebGL before,


397
00:19:52,858 --> 00:19:57,129 line:-1
this may not be as easy
as you would have imagined.


398
00:19:57.129 --> 00:20:00.800 line:-1 position:50%
As I mentioned, because WebGL
is a low-level API,


399
00:20:00.800 --> 00:20:03.869 line:-1 position:50%
it can be very verbose.


400
00:20:03,869 --> 00:20:07,540 line:-1
But don’t worry; there are many
great libraries and frameworks


401
00:20:07.540 --> 00:20:10.209 line:-1 position:50%
that can help simplify
your development.


402
00:20:10,209 --> 00:20:13,679 line:-1
With them, it’s not that hard
to create a nice square


403
00:20:13.679 --> 00:20:17.183 line:-1 position:50%
or something more complicated
than that.


404
00:20:17,183 --> 00:20:20,386 line:-1
Now, if you already use WebGL
in you web content,


405
00:20:20.386 --> 00:20:23.589 line:-1 position:50%
there is also a good news.


406
00:20:23,589 --> 00:20:25,391 line:-1
We have improved our support


407
00:20:25,391 --> 00:20:29,028 line:-1
by migrating backend
from OpenGL to Metal.


408
00:20:29.028 --> 00:20:32.965 line:-1 position:50%
That means iOS Simulator
is now able to use the GPU


409
00:20:32.965 --> 00:20:34.433 line:-1 position:50%
for web content,


410
00:20:34,433 --> 00:20:37,670 line:-1
making it a much more accurate
representation


411
00:20:37.670 --> 00:20:40.306 line:-1 position:50%
of what your users will see.


412
00:20:40,306 --> 00:20:42,608 line:-1
Also, you can use Metal tools,


413
00:20:42,608 --> 00:20:45,044 line:-1
such as the Xcode
Frame Debugger,


414
00:20:45,044 --> 00:20:47,580 line:-1
to analyze your WebGL code now.


415
00:20:47,580 --> 00:20:50,149 line:-1
Besides creating content
with WebGL,


416
00:20:50,149 --> 00:20:53,152 line:-1
another common way to provide
great visual experience


417
00:20:53,152 --> 00:20:54,954 line:-1
is through video.


418
00:20:54,954 --> 00:20:57,957 line:-1
Not all browsers have
the same kind of support


419
00:20:57,957 --> 00:20:59,792 line:-1
for media formats,


420
00:20:59.792 --> 00:21:02.761 line:-1 position:50%
so sometimes it might be tricky
for you to decide


421
00:21:02,761 --> 00:21:06,232 line:-1
which format
you are going to use.


422
00:21:06.232 --> 00:21:09.034 line:-1 position:50%
To make things easier for you,
this year,


423
00:21:09,034 --> 00:21:11,737 line:-1
we have increased our support
for WebM,


424
00:21:11,737 --> 00:21:15,574 line:-1
a common media format
on the web.


425
00:21:15.574 --> 00:21:19.211 line:-1 position:50%
For a start, the support
is only for streaming playback.


426
00:21:19.211 --> 00:21:24.016 line:-1 position:50%
In macOS 11.3, we added support
for playing WebM files


427
00:21:24.016 --> 00:21:28.821 line:-1 position:50%
containing VP8 or VP9 video
and Vorbis audio.


428
00:21:28,821 --> 00:21:30,689 line:-1
And in macOS 12,


429
00:21:30.689 --> 00:21:34.527 line:-1 position:50%
we add support for files
containing Opus audio.


430
00:21:34,527 --> 00:21:37,796 line:-1
Last year, we started supporting
WebM played through


431
00:21:37,796 --> 00:21:40,699 line:-1
Media Source Extensions
on macOS.


432
00:21:40.699 --> 00:21:44.570 line:-1 position:50%
Now, we’re bringing that support
to iPadOS 15.


433
00:21:44,570 --> 00:21:47,606 line:0
To check if WebM is supported
in your code,


434
00:21:47,606 --> 00:21:50,276 position:50%
you can use
MediaCapabilities API,


435
00:21:50,276 --> 00:21:53,412 line:0
which lets you detect
the exact media configuration


436
00:21:53,412 --> 00:21:55,247 line:0
you want to use.


437
00:21:55,247 --> 00:21:56,982 line:0
The configuration on the screen


438
00:21:56,982 --> 00:21:59,051 line:0
is supported
in the latest Safari,


439
00:21:59,051 --> 00:22:03,989 position:50%
and that means VP9
is also supported now.


440
00:22:03,989 --> 00:22:06,792 line:-1
With support
for this video-coding format,


441
00:22:06,792 --> 00:22:09,562 line:-1
we expect more web content
to be available


442
00:22:09.562 --> 00:22:12.097 line:-1 position:50%
in Safari and WebKit apps.


443
00:22:12,097 --> 00:22:16,268 line:-1
You can use VP9 in both
streaming and WebRTC.


444
00:22:16.268 --> 00:22:19.939 line:-1 position:50%
It works on macOS and iPadOS.


445
00:22:19.939 --> 00:22:22.441 line:-1 position:50%
Regarding support
on different devices,


446
00:22:22.441 --> 00:22:26.178 line:-1 position:50%
it is available
on all Apple silicon Macs.


447
00:22:26,178 --> 00:22:30,115 line:-1
For the others, you can check
with MediaCapabilities API,


448
00:22:30,115 --> 00:22:33,419 line:-1
just like what we just saw
for WebM.


449
00:22:33.419 --> 00:22:37.122 line:-1 position:50%
Now, if your site has WebM
or VP9 content,


450
00:22:37,122 --> 00:22:39,258 line:-1
I encourage you to check
how it works


451
00:22:39,258 --> 00:22:41,527 line:-1
in the latest Safari and WebKit;


452
00:22:41.527 --> 00:22:45.831 line:-1 position:50%
but if you are still deciding
which media format to use,


453
00:22:45,831 --> 00:22:50,269 line:-1
we would recommend H.264
or HEVC.


454
00:22:50.269 --> 00:22:52.938 line:-1 position:50%
H.264 is mature
and well-supported


455
00:22:52,938 --> 00:22:54,673 line:-1
across browsers.


456
00:22:54.673 --> 00:22:58.611 line:-1 position:50%
HEVC has great support
for high-quality videos.


457
00:22:58,611 --> 00:23:01,780 line:-1
They both come with hardware
acceleration that can provide


458
00:23:01.780 --> 00:23:06.018 line:-1 position:50%
smoother playback and longer
playback battery life.


459
00:23:06,018 --> 00:23:08,454 line:-1
Talking about hosting
video content,


460
00:23:08,454 --> 00:23:11,257 line:-1
a common case is that
we don’t own the content;


461
00:23:11,257 --> 00:23:13,626 line:-1
instead, we get it
from a third party.


462
00:23:13.626 --> 00:23:18.130 line:-1 position:50%
For example, I see
this nice video on video.domain.


463
00:23:18,130 --> 00:23:21,700 line:-1
To make it appear on my site,
main.domain,


464
00:23:21.700 --> 00:23:24.903 line:-1 position:50%
I can load this video source
from video.domain,


465
00:23:24.903 --> 00:23:29.208 line:-1 position:50%
or I just create iframes
of video.domain.


466
00:23:29.208 --> 00:23:33.245 line:-1 position:50%
For security reasons,
third-party iframes or resources


467
00:23:33,245 --> 00:23:36,749 line:-1
do not have access to
first-party storage by default.


468
00:23:36.749 --> 00:23:38.817 line:-1 position:50%
And that means
if the resource request


469
00:23:38,817 --> 00:23:42,655 line:-1
for video.domain is initiated
from main.domain,


470
00:23:42,655 --> 00:23:46,191 line:-1
it will not include the cookies
of video.domain.


471
00:23:46.191 --> 00:23:49.561 line:-1 position:50%
This can be a problem when
web servers of video.domain


472
00:23:49,561 --> 00:23:53,499 line:-1
only want to serve content
to authenticated users.


473
00:23:53.499 --> 00:23:57.569 line:-1 position:50%
And no cookies
means no authentication.


474
00:23:57,569 --> 00:24:01,473 line:-1
The Storage Access API
solves this issue.


475
00:24:01.473 --> 00:24:05.444 line:-1 position:50%
It enables third-party iframes
to request permission


476
00:24:05.444 --> 00:24:08.447 line:-1 position:50%
to access first-party cookies.


477
00:24:08,447 --> 00:24:13,552 line:-1
If user grants the permission,
the third-party video.domain


478
00:24:13,552 --> 00:24:17,356 line:-1
will be able to access
its first-party cookies.


479
00:24:17,356 --> 00:24:20,859 line:-1
The Storage Access API has been
available in WebKit and Safari


480
00:24:20,859 --> 00:24:22,795 line:-1
for over three years.


481
00:24:22,795 --> 00:24:25,097 line:-1
To improve interoperability,


482
00:24:25,097 --> 00:24:29,001 line:-1
this year we have added
two new features.


483
00:24:29.001 --> 00:24:32.705 line:-1 position:50%
First, access is granted
on a per-page scope.


484
00:24:32,705 --> 00:24:35,874 line:-1
It means once permission
is granted for a third party,


485
00:24:35.874 --> 00:24:38.610 line:-1 position:50%
it is extended to all
its subresources


486
00:24:38.610 --> 00:24:40.679 line:-1 position:50%
on the same page.


487
00:24:40.679 --> 00:24:45.417 line:-1 position:50%
You don't have to make a request
for each iframe.


488
00:24:45.417 --> 00:24:49.121 line:-1 position:50%
Second, we allow nested iframes
to make requests.


489
00:24:49.121 --> 00:24:52.057 line:-1 position:50%
This means iframes
inside of iframes


490
00:24:52,057 --> 00:24:55,294 line:-1
can also request access
to first-party cookies,


491
00:24:55,294 --> 00:24:58,530 line:-1
which was not possible before.


492
00:24:58,530 --> 00:25:01,166 line:-1
To learn more
about the new usage,


493
00:25:01,166 --> 00:25:03,135 line:-1
please check our blog post


494
00:25:03,135 --> 00:25:08,040 line:-1
“Updates to the Storage
Access API” at webkit.org.


495
00:25:08.040 --> 00:25:11.877 line:-1 position:50%
Now we know how to load
or import video content


496
00:25:11,877 --> 00:25:15,414 line:-1
from a third party
with user permission if needed.


497
00:25:15.414 --> 00:25:18.450 line:-1 position:50%
How about creating
something on your own?


498
00:25:18.450 --> 00:25:23.622 line:-1 position:50%
With the new Media Recorder API,
it’s very easy to do that.


499
00:25:23.622 --> 00:25:26.725 line:-1 position:50%
Media Recorder API enables
you to capture data


500
00:25:26.725 --> 00:25:28.994 line:-1 position:50%
from media elements,
which includes


501
00:25:28.994 --> 00:25:31.830 line:-1 position:50%
HTML media elements
like video tag


502
00:25:31,830 --> 00:25:34,133 line:-1
or MediaStream objects.


503
00:25:34.133 --> 00:25:39.104 line:-1 position:50%
You can use it to record
from user’s input devices.


504
00:25:39.104 --> 00:25:41.540 line:-1 position:50%
You can specify desired options,


505
00:25:41.540 --> 00:25:43.942 line:-1 position:50%
such as the container's
MIME type


506
00:25:43.942 --> 00:25:47.112 line:-1 position:50%
or desired bit rates of tracks.


507
00:25:47.112 --> 00:25:49.415 line:-1 position:50%
The API is simple.


508
00:25:49,415 --> 00:25:52,251 line:-1
It is comprised
of a single major interface,


509
00:25:52.251 --> 00:25:54.887 line:-1 position:50%
MediaRecorder,
which does all the work


510
00:25:54,887 --> 00:25:58,757 line:-1
of collecting the data from
source and delivering it to you.


511
00:25:58.757 --> 00:26:02.494 line:-1 position:50%
Let me show you an example.


512
00:26:02.494 --> 00:26:05.798 line:-1 position:50%
I used MediaRecorder API
to build this web app


513
00:26:05,798 --> 00:26:07,132 line:-1
called "Voice Memo."


514
00:26:07.132 --> 00:26:09.768 line:-1 position:50%
This is my first voice memo.


515
00:26:09,768 --> 00:26:13,038 line:-1
Click the button, it starts
recording from microphone.


516
00:26:13,038 --> 00:26:16,341 line:-1
Click again, it stops recording
and offers playback.


517
00:26:16.341 --> 00:26:19.344 line:-1 position:50%
>> This is my first
voice memo.


518
00:26:19.344 --> 00:26:21.313 line:-1 position:50%
That is fun.


519
00:26:21,313 --> 00:26:25,083 line:-1
And now let’s check
the implementation.


520
00:26:25,083 --> 00:26:27,252 line:-1
We have two major functions:


521
00:26:27,252 --> 00:26:29,555 line:-1
startRecording
and stopRecording.


522
00:26:29.555 --> 00:26:30.823 line:-1 position:50%
In startRecording,


523
00:26:30.823 --> 00:26:33.559 line:-1 position:50%
we get the input media stream
for microphone.


524
00:26:33.559 --> 00:26:36.895 line:-1 position:50%
Then we create a MediaRecorder
object with that.


525
00:26:36.895 --> 00:26:40.299 line:-1 position:50%
We listen to two events
of the media recorder.


526
00:26:40.299 --> 00:26:43.769 line:-1 position:50%
And then we can start
the recorder with start method.


527
00:26:43,769 --> 00:26:46,638 line:0
To stop recording, we just need
to call stop method


528
00:26:46,638 --> 00:26:50,175 line:0
on mediaRecorder object.


529
00:26:50.175 --> 00:26:52.878 line:-1 position:50%
Here are the two event handlers.


530
00:26:52.878 --> 00:26:55.214 line:-1 position:50%
When some captured data
is available,


531
00:26:55.214 --> 00:26:57.249 line:-1 position:50%
we store it in an array.


532
00:26:57,249 --> 00:26:59,051 line:-1
When the recording is stopped,


533
00:26:59,051 --> 00:27:01,920 line:-1
we make a blob with
collected data in an array,


534
00:27:01,920 --> 00:27:05,824 line:-1
and send it to an existing
audio element for playback.


535
00:27:05,824 --> 00:27:09,628 line:-1
Just like that, you can create
a functional voice recorder.


536
00:27:09.628 --> 00:27:11.864 line:-1 position:50%
After you collect
the audio data,


537
00:27:11,864 --> 00:27:13,699 line:-1
you may want to edit it.


538
00:27:13.699 --> 00:27:16.802 line:-1 position:50%
In this case, you can put
the new Audio Worklet API


539
00:27:16,802 --> 00:27:18,437 line:-1
to good use.


540
00:27:18,437 --> 00:27:22,140 line:-1
The Audio Worklet interface
is part of Web Audio API,


541
00:27:22.140 --> 00:27:24.042 line:-1 position:50%
which you may
already be familiar with


542
00:27:24.042 --> 00:27:27.613 line:-1 position:50%
if you have done audio
processing on the web before.


543
00:27:27.613 --> 00:27:29.481 line:-1 position:50%
It allows us to run scripts


544
00:27:29.481 --> 00:27:32.084 line:-1 position:50%
such as JavaScript
or WebAssembly code


545
00:27:32,084 --> 00:27:35,153 line:-1
to process audio on
the audio-rendering thread


546
00:27:35.153 --> 00:27:37.756 line:-1 position:50%
supporting custom AudioNodes.


547
00:27:37,756 --> 00:27:40,425 line:-1
Compared with
ScriptProcessorNode


548
00:27:40.425 --> 00:27:42.861 line:-1 position:50%
the previous solution
to run custom script


549
00:27:42,861 --> 00:27:45,497 line:-1
it reduces the hopping
between rendering thread


550
00:27:45,497 --> 00:27:49,635 line:-1
and main thread
and ensures low latency.


551
00:27:49,635 --> 00:27:51,670 line:-1
With Audio Worklet,


552
00:27:51.670 --> 00:27:55.107 line:-1 position:50%
I added a new capability
to my Voice Memo.


553
00:27:55,107 --> 00:27:57,943 line:-1
>> This is
my distorted voice.


554
00:27:57,943 --> 00:28:00,679 line:-1
If Distortion box is checked
for recording,


555
00:28:00.679 --> 00:28:03.882 line:-1 position:50%
some distortion effect
will be applied to the audio.


556
00:28:03.882 --> 00:28:06.852 line:-1 position:50%
>> [DISTORTED]
This is my distorted voice


557
00:28:06.852 --> 00:28:08.353 line:-1 position:50%
That sounds cool,


558
00:28:08.353 --> 00:28:12.224 line:-1 position:50%
and let’s take a look
at how it is implemented.


559
00:28:12,224 --> 00:28:14,393 line:-1
I modified
the startRecording function


560
00:28:14,393 --> 00:28:16,228 line:-1
to add audio processing.


561
00:28:16,228 --> 00:28:18,230 line:-1
We still need to get
the MediaStream


562
00:28:18.230 --> 00:28:20.098 line:-1 position:50%
for audio input first.


563
00:28:20.098 --> 00:28:23.869 line:-1 position:50%
To use Audio Worklet API,
there are four basic steps.


564
00:28:23.869 --> 00:28:26.371 line:-1 position:50%
Step one: create a source.


565
00:28:26,371 --> 00:28:29,441 line:-1
Step two: create
an AudioWorkletNode


566
00:28:29.441 --> 00:28:31.677 line:-1 position:50%
and bind it with
an Audio Worklet processor


567
00:28:31,677 --> 00:28:34,012 line:-1
which performs audio processing.


568
00:28:34,012 --> 00:28:37,082 line:-1
The processor
is implemented in a module,


569
00:28:37,082 --> 00:28:39,051 line:-1
and we will look at it later.


570
00:28:39.051 --> 00:28:41.887 line:-1 position:50%
Step three:
create a destination.


571
00:28:41,887 --> 00:28:46,425 line:-1
Step four: connect the path
from source to destination.


572
00:28:46,425 --> 00:28:49,227 position:50%
This time, MediaRecorder
takes the output


573
00:28:49,227 --> 00:28:51,063 line:0
from AudioWorklet as source


574
00:28:51,063 --> 00:28:55,467 line:0
and it records
the distorted audio.


575
00:28:55.467 --> 00:28:58.270 line:-1 position:50%
This is the audio-processing
module.


576
00:28:58,270 --> 00:29:01,707 line:-1
We implement the
DistortionProcessor class here.


577
00:29:01.707 --> 00:29:05.777 line:-1 position:50%
It must extend the
AudioWorkletProcessor class


578
00:29:05,777 --> 00:29:07,713 line:-1
and must provide
the implementation


579
00:29:07.713 --> 00:29:09.648 line:-1 position:50%
for process function.


580
00:29:09,648 --> 00:29:14,019 line:-1
The inputs are the audio samples
coming into Audio Worklet,


581
00:29:14,019 --> 00:29:17,556 line:-1
and outputs are the resulting
samples after processing.


582
00:29:17.556 --> 00:29:21.193 line:-1 position:50%
You can use different algorithms
to create output.


583
00:29:21.193 --> 00:29:24.129 line:-1 position:50%
Here, I use a custom function
called distort()


584
00:29:24,129 --> 00:29:26,865 line:-1
to calculate a value
based on input.


585
00:29:26.865 --> 00:29:29.368 line:-1 position:50%
Process function returns true,


586
00:29:29.368 --> 00:29:32.270 line:-1 position:50%
meaning the processor node
is active.


587
00:29:32.270 --> 00:29:35.807 line:-1 position:50%
That’s the basic structure
of the process function.


588
00:29:35,807 --> 00:29:38,043 line:-1
After creating
the processor class,


589
00:29:38.043 --> 00:29:41.747 line:-1 position:50%
we need to globally register it
under a specified name,


590
00:29:41,747 --> 00:29:45,450 line:-1
so it can be used to construct
AudioWorkletNode.


591
00:29:45.450 --> 00:29:48.120 line:-1 position:50%
Just like that, you can apply
sound effects


592
00:29:48,120 --> 00:29:50,122 line:-1
to your audio data.


593
00:29:50.122 --> 00:29:51.657 line:-1 position:50%
So far we have discussed


594
00:29:51.657 --> 00:29:54.793 line:-1 position:50%
about producing
and processing audio data.


595
00:29:54.793 --> 00:29:57.729 line:-1 position:50%
How about storing it
or sharing it to somewhere else


596
00:29:57.729 --> 00:29:59.231 line:-1 position:50%
for your record?


597
00:29:59.231 --> 00:30:01.333 line:-1 position:50%
I guess you don’t want to lose
the recording


598
00:30:01.333 --> 00:30:04.336 line:-1 position:50%
after you quit the browser.


599
00:30:04.336 --> 00:30:06.905 line:-1 position:50%
With updates to Web Share API
this year,


600
00:30:06.905 --> 00:30:10.409 line:-1 position:50%
it’s quite easy to do that.


601
00:30:10,409 --> 00:30:13,645 line:-1
Web Share is not new
in WebKit and Safari.


602
00:30:13.645 --> 00:30:17.082 line:-1 position:50%
If you choose to share a link
on a web page in Safari,


603
00:30:17.082 --> 00:30:19.584 line:-1 position:50%
a share sheet will show up
with sharing targets


604
00:30:19.584 --> 00:30:24.222 line:-1 position:50%
like Messages, Mail, or AirDrop.


605
00:30:24,222 --> 00:30:27,926 line:-1
The share sheet that matches
well with the system style


606
00:30:27,926 --> 00:30:32,330 line:-1
is created with Web Share API.


607
00:30:32.330 --> 00:30:36.101 line:-1 position:50%
This year, we have added support
for file sharing.


608
00:30:36.101 --> 00:30:39.304 line:-1 position:50%
It means you can share image,
video, audio,


609
00:30:39,304 --> 00:30:43,542 line:-1
or other types of file
with this API now.


610
00:30:43.542 --> 00:30:47.279 line:-1 position:50%
Let’s add the sharing capability
to Voice Memo.


611
00:30:47,279 --> 00:30:49,514 position:50%
If the Save box is checked,


612
00:30:49,514 --> 00:30:53,418 line:0
Voice Memo will create
an audio file with captured data


613
00:30:53,418 --> 00:30:57,055 line:0
and display a Share button
to let us share the file.


614
00:30:57,055 --> 00:31:00,492 line:0
Here, I want to share
the memo file by email.


615
00:31:00,492 --> 00:31:03,829 position:50%
With just one click,
a nice draft is created


616
00:31:03,829 --> 00:31:06,331 position:50%
with the memo file attached.


617
00:31:06,331 --> 00:31:09,634 line:0
And let’s check the code.


618
00:31:09,634 --> 00:31:12,070 line:-1
This is the stop event handler
we saw


619
00:31:12.070 --> 00:31:14.272 line:-1 position:50%
in the MediaRecorder example.


620
00:31:14.272 --> 00:31:16.341 line:-1 position:50%
First, let’s make
the blob variable


621
00:31:16,341 --> 00:31:18,744 line:-1
in stop event handler global,


622
00:31:18,744 --> 00:31:21,279 line:-1
so it can be used
by the share function.


623
00:31:21.279 --> 00:31:23.582 line:-1 position:50%
The share function
is the click event handler


624
00:31:23,582 --> 00:31:25,183 line:-1
of the share button.


625
00:31:25.183 --> 00:31:29.988 line:-1 position:50%
It converts a blob to a file
and gives it a file name.


626
00:31:29.988 --> 00:31:32.023 line:-1 position:50%
The file is put in an array


627
00:31:32.023 --> 00:31:34.960 line:-1 position:50%
because that’s the expected
input type.


628
00:31:34.960 --> 00:31:37.596 line:-1 position:50%
Then we check if the API
is available


629
00:31:37,596 --> 00:31:40,899 line:-1
and if the file can be shared
with canShare method.


630
00:31:40.899 --> 00:31:42.367 line:-1 position:50%
If check is passed,


631
00:31:42.367 --> 00:31:46.738 line:-1 position:50%
we call navigator.share
with the file array.


632
00:31:46,738 --> 00:31:48,607 line:-1
There are options
you can specify,


633
00:31:48,607 --> 00:31:51,243 line:-1
like title and description text.


634
00:31:51.243 --> 00:31:54.780 line:-1 position:50%
It’s as easy as that to make
your web app to share files


635
00:31:54,780 --> 00:31:57,649 line:-1
like a native app does.


636
00:31:57.649 --> 00:32:01.386 line:-1 position:50%
Well, if you don’t actually want
to interact with audio data,


637
00:32:01,386 --> 00:32:03,021 line:-1
but just want the text of it


638
00:32:03.021 --> 00:32:05.457 line:-1 position:50%
for example, in the case
of voice command


639
00:32:05,457 --> 00:32:08,226 line:-1
there is also a new API for you.


640
00:32:08,226 --> 00:32:11,930 line:-1
That’s Speech Recognition.


641
00:32:11,930 --> 00:32:14,866 line:-1
Like its name suggested,
Speech Recognition API


642
00:32:14.866 --> 00:32:18.303 line:-1 position:50%
captures live audio
and transcribes it to text.


643
00:32:18.303 --> 00:32:23.108 line:-1 position:50%
It also gives you probabilities
and alternatives of transcript.


644
00:32:23.108 --> 00:32:26.244 line:-1 position:50%
It uses the same speech engine
as Siri,


645
00:32:26.244 --> 00:32:28.313 line:-1 position:50%
and it gets all the benefits:


646
00:32:28.313 --> 00:32:32.050 line:-1 position:50%
multiple languages support
and great accuracy.


647
00:32:32.050 --> 00:32:35.020 line:-1 position:50%
That also means your user
will need to turn on Siri


648
00:32:35.020 --> 00:32:38.156 line:-1 position:50%
or Dictation in
System Preferences or Settings


649
00:32:38.156 --> 00:32:41.660 line:-1 position:50%
to make the API available.


650
00:32:41.660 --> 00:32:43.829 line:-1 position:50%
Recognition can be server based,


651
00:32:43.829 --> 00:32:46.865 line:-1 position:50%
so we put up a privacy prompt
when recognition service


652
00:32:46,865 --> 00:32:49,634 line:-1
is used for the first time
in the app.


653
00:32:49,634 --> 00:32:51,269 line:-1
Users can change the permission


654
00:32:51.269 --> 00:32:55.574 line:-1 position:50%
in System Preferences
or Settings.


655
00:32:55.574 --> 00:32:59.711 line:-1 position:50%
Now, let’s update Voice Memo
with this new capability.


656
00:32:59,711 --> 00:33:01,746 line:-1
If the Recognition box is checked,


657
00:33:01.746 --> 00:33:04.716 line:-1 position:50%
it means generating a transcript
for the recording.


658
00:33:04,716 --> 00:33:07,986 line:-1
>> This is
my Voice Memo transcript.


659
00:33:07.986 --> 00:33:10.322 line:-1 position:50%
Period.


660
00:33:10.322 --> 00:33:13.291 line:-1 position:50%
And let’s check the code.


661
00:33:13.291 --> 00:33:16.728 line:-1 position:50%
The usage is a bit like
media recorder.


662
00:33:16.728 --> 00:33:18.964 line:-1 position:50%
Here we have
two major functions:


663
00:33:18,964 --> 00:33:21,800 line:-1
startRecognition
and stopRecognition.


664
00:33:21.800 --> 00:33:22.868 line:-1 position:50%
You need to create


665
00:33:22.868 --> 00:33:25.737 line:-1 position:50%
a webkitSpeechRecognition
object first.


666
00:33:25.737 --> 00:33:28.640 line:-1 position:50%
Yes, we still keep
the WebKit prefix for now


667
00:33:28,640 --> 00:33:32,244 line:-1
for compatibility,
so don’t forget to add it.


668
00:33:32.244 --> 00:33:36.081 line:-1 position:50%
Then you can set some properties
of the recognition,


669
00:33:36.081 --> 00:33:39.651 line:-1 position:50%
like continuous, which asks
recognition to keep going


670
00:33:39.651 --> 00:33:42.320 line:-1 position:50%
until it is stopped.


671
00:33:42,320 --> 00:33:45,857 line:-1
We listen to result
and end events.


672
00:33:45.857 --> 00:33:47.792 line:-1 position:50%
With recognition object,


673
00:33:47.792 --> 00:33:50.262 line:-1 position:50%
we can call start method
to start


674
00:33:50,262 --> 00:33:55,367 line:-1
and call stop method to stop.


675
00:33:55.367 --> 00:33:59.337 line:-1 position:50%
On result event, we collect
finalTranscript to a string.


676
00:33:59,337 --> 00:34:02,173 line:-1
Here, I only pick the first item
of the results


677
00:34:02,173 --> 00:34:05,443 line:-1
because the transcription
alternatives are sorted


678
00:34:05,443 --> 00:34:07,379 line:-1
based on probabilities.


679
00:34:07.379 --> 00:34:10.849 line:-1 position:50%
When recognition stops,
I use a custom log function


680
00:34:10.849 --> 00:34:13.351 line:-1 position:50%
to print the transcript
to the screen.


681
00:34:13,351 --> 00:34:16,655 line:-1
Like that, you can
add recognition capability


682
00:34:16.655 --> 00:34:20.625 line:-1 position:50%
to your web content
within just a few lines.


683
00:34:20.625 --> 00:34:22.360 line:-1 position:50%
It’s been a long journey,


684
00:34:22.360 --> 00:34:26.064 line:-1 position:50%
and there’s one last web API
I think worth mentioning.


685
00:34:26,064 --> 00:34:29,734 line:-1
You may have noticed
that on macOS and iOS,


686
00:34:29.734 --> 00:34:33.438 line:-1 position:50%
the Now Playing widget can show
you media states in Safari.


687
00:34:33.438 --> 00:34:35.106 line:-1 position:50%
It’s convenient,


688
00:34:35,106 --> 00:34:39,044 line:-1
but it usually does not contain
much information.


689
00:34:39.044 --> 00:34:43.281 line:-1 position:50%
For example, this only shows
the title of web page;


690
00:34:43,281 --> 00:34:46,918 line:-1
no information about
what audio is being played.


691
00:34:46.918 --> 00:34:52.857 line:-1 position:50%
There is a new web API that can
help you improve this situation:


692
00:34:52,857 --> 00:34:55,860 line:-1
the Media Session API.


693
00:34:55.860 --> 00:34:59.431 line:-1 position:50%
Media Session API lets you
communicate media states


694
00:34:59,431 --> 00:35:02,968 line:-1
between web page
and other platform components.


695
00:35:02,968 --> 00:35:05,904 position:50%
If you want your user
to view or control media states


696
00:35:05,904 --> 00:35:09,841 position:50%
outside of the web page,
like in the Now Playing widget,


697
00:35:09,841 --> 00:35:12,577 position:50%
this is the API
you need to know.


698
00:35:12,577 --> 00:35:15,447 position:50%
For more details about
Media Session API,


699
00:35:15,447 --> 00:35:18,149 line:0
please check our WWDC session


700
00:35:18,149 --> 00:35:24,022 line:0
"Coordinate media playback on
the web with GroupActivities."


701
00:35:24.022 --> 00:35:27.726 line:-1 position:50%
And these are the new features
we have just explored.


702
00:35:27.726 --> 00:35:30.462 line:-1 position:50%
I hope you feel you have learned
something of it.


703
00:35:30,462 --> 00:35:31,830 line:-1
And your homework today


704
00:35:31.830 --> 00:35:33.765 line:-1 position:50%
is to implement
your own Voice Memo


705
00:35:33.765 --> 00:35:36.201 line:-1 position:50%
with these new APIs.


706
00:35:36,201 --> 00:35:37,535 line:-1
I'm just kidding,


707
00:35:37.535 --> 00:35:40.505 line:-1 position:50%
but we do have a few things
we hope you can do


708
00:35:40.505 --> 00:35:43.575 line:-1 position:50%
to help us bring you
the best development experience


709
00:35:43.575 --> 00:35:45.944 line:-1 position:50%
in WebKit and Safari.


710
00:35:45.944 --> 00:35:49.948 line:-1 position:50%
Please try out the new features
in the latest WebKit and Safari


711
00:35:49,948 --> 00:35:53,885 line:-1
and file bug reports
at bugs.webkit.org.


712
00:35:53,885 --> 00:35:56,254 line:-1
You can take a sneak peek
of new features


713
00:35:56,254 --> 00:35:58,623 line:-1
or features
under active development


714
00:35:58,623 --> 00:36:01,126 line:-1
with Safari Technology Preview.


715
00:36:01,126 --> 00:36:03,628 line:-1
If you are interested
in web technologies


716
00:36:03.628 --> 00:36:05.830 line:-1 position:50%
that are used in WebKit
or Safari,


717
00:36:05.830 --> 00:36:08.833 line:-1 position:50%
or interested in joining
the WebKit community,


718
00:36:08.833 --> 00:36:11.803 line:-1 position:50%
webkit.org is a good source.


719
00:36:11.803 --> 00:36:14.606 line:-1 position:50%
If you want to get fresh updates
about WebKit,


720
00:36:14.606 --> 00:36:17.075 line:-1 position:50%
or if you have any question
for us,


721
00:36:17,075 --> 00:36:20,779 line:-1
don’t forget to follow us
or tag us on Twitter.


722
00:36:20.779 --> 00:36:22.747 line:-1 position:50%
Thanks for watching
this session,


723
00:36:22.747 --> 00:36:25.884 line:-1 position:50%
and I hope you have a great time
at WWDC!


724
00:36:25,884 --> 00:36:28,420 size:2% line:0 position:90%
♪

