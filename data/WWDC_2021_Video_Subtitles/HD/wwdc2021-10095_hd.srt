2
00:00:00,100 --> 00:00:02,236 line:-1
[MAC STARTUP CHIME]


3
00:00:02,236 --> 00:00:05,772 line:-1
♪ Bass music playing ♪


4
00:00:05.772 --> 00:00:07.241 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,241 --> 00:00:09,509 position:90% align:right line:0
♪


6
00:00:09,509 --> 00:00:11,345 line:-1
Guoye Zhang: Hi, I'm Guoye.


7
00:00:11,345 --> 00:00:16,550 line:-1
My coworker Zhenchao and I
work on HTTP frameworks.


8
00:00:16,550 --> 00:00:20,120 position:50%
I'm sure you've heard a lot
about Swift concurrency by now.


9
00:00:20,120 --> 00:00:24,091 line:0
If you haven't, check out
"Meet async/await in Swift".


10
00:00:24,091 --> 00:00:26,493 line:0
I'm going to jump into
how async/await works


11
00:00:26,493 --> 00:00:28,595 line:0
with URLSession.


12
00:00:28,595 --> 00:00:30,764 position:50%
What I like most
about Swift concurrency


13
00:00:30,764 --> 00:00:34,201 position:50%
is that it makes your code
linear, concise,


14
00:00:34,201 --> 00:00:38,305 line:0
and it supports
native Swift error handling.


15
00:00:38.305 --> 00:00:40.941 line:-1 position:50%
Networking is inherently
asynchronous,


16
00:00:40.941 --> 00:00:44.278 line:-1 position:50%
and in iOS 15 and macOS Monterey


17
00:00:44.278 --> 00:00:47.648 line:-1 position:50%
we introduced a set
of new APIs in URLSession


18
00:00:47,648 --> 00:00:52,352 line:-1
for you to take advantage
of Swift concurrency features.


19
00:00:52.352 --> 00:00:54.421 line:-1 position:50%
To show you our new APIs,


20
00:00:54.421 --> 00:00:58.258 line:-1 position:50%
here is an app we are working on
to adopt async/await.


21
00:00:58,258 --> 00:01:01,228 line:-1
It's a photo-sharing app
just for dog lovers,


22
00:01:01,228 --> 00:01:05,365 line:-1
and we can favorite
these photos.


23
00:01:05,365 --> 00:01:09,169 line:-1
Here is our existing code
that fetches a dog photo.


24
00:01:09,169 --> 00:01:11,138 line:-1
It's using the
completionHandler-based


25
00:01:11,138 --> 00:01:14,207 line:-1
convenience method
on URLSession.


26
00:01:14.207 --> 00:01:15.909 line:-1 position:50%
The code seems straightforward,


27
00:01:15.909 --> 00:01:17.844 line:-1 position:50%
and it worked in
my limited testing.


28
00:01:17,844 --> 00:01:20,981 line:-1
However, it has
at least three mistakes.


29
00:01:20.981 --> 00:01:23.750 line:-1 position:50%
Let's dive in.


30
00:01:23.750 --> 00:01:26.420 line:-1 position:50%
First, let's follow
the control flow.


31
00:01:26,420 --> 00:01:28,522 position:50%
We create a data task
and resume it.


32
00:01:28,522 --> 00:01:30,657 position:50%
Then once the task is done,


33
00:01:30,657 --> 00:01:32,960 position:50%
we jump into
the completion handler,


34
00:01:32,960 --> 00:01:35,662 line:0
we check the response,
create an image,


35
00:01:35,662 --> 00:01:38,532 position:50%
and that's where
the control flow ends.


36
00:01:38,532 --> 00:01:41,802 position:50%
Hm, we are jumping
back and forth.


37
00:01:41,802 --> 00:01:43,837 position:50%
What about threading?


38
00:01:43,837 --> 00:01:47,040 line:0
It is surprisingly complex
for this small piece of code.


39
00:01:47,040 --> 00:01:50,644 position:50%
We have three different
execution contexts in total.


40
00:01:50,644 --> 00:01:52,112 line:-1
The outmost layer runs on


41
00:01:52.112 --> 00:01:55.115 line:-1 position:50%
whatever thread or queue
of the caller,


42
00:01:55,115 --> 00:01:56,817 line:-1
URLSessionTask
completionHandler


43
00:01:56,817 --> 00:01:59,219 line:-1
runs on session's
delegate queue,


44
00:01:59.219 --> 00:02:02.689 line:-1 position:50%
and the final completion handler
runs on the main queue.


45
00:02:02,689 --> 00:02:04,891 line:-1
Since the compiler
cannot help us here,


46
00:02:04.891 --> 00:02:06.927 line:-1 position:50%
we have to use extreme caution


47
00:02:06,927 --> 00:02:11,732 line:-1
to avoid any threading issues
such as data races.


48
00:02:11.732 --> 00:02:13.633 line:-1 position:50%
Now, I noticed something wrong.


49
00:02:13,633 --> 00:02:15,502 line:-1
The calls to
the completionHandler


50
00:02:15.502 --> 00:02:18.438 line:-1 position:50%
are not consistently dispatched
to the main queue.


51
00:02:18,438 --> 00:02:20,774 line:-1
This could be a bug.


52
00:02:20,774 --> 00:02:23,710 line:-1
Also, we are missing
an early return here.


53
00:02:23,710 --> 00:02:27,814 line:-1
The completionHandler can be
called twice if we got an error.


54
00:02:27.814 --> 00:02:32.552 line:-1 position:50%
This could violate assumptions
made by the caller.


55
00:02:32.552 --> 00:02:34.988 line:-1 position:50%
Finally, this might
not be very obvious,


56
00:02:34.988 --> 00:02:37.657 line:-1 position:50%
but UIImage creation can fail.


57
00:02:37,657 --> 00:02:40,160 line:-1
If the data is in
an incorrect format,


58
00:02:40.160 --> 00:02:43.497 line:-1 position:50%
this UIImage initializer
returns nil,


59
00:02:43,497 --> 00:02:45,532 line:-1
so we would have called
the completionHandler


60
00:02:45,532 --> 00:02:48,402 line:-1
with both nil image
and nil error.


61
00:02:48,402 --> 00:02:51,605 line:-1
This is likely not expected.


62
00:02:51,605 --> 00:02:54,674 line:-1
Now this is the new version
using async/await.


63
00:02:54.674 --> 00:02:56.743 line:-1 position:50%
Wow, it's so much simpler!


64
00:02:56,743 --> 00:02:59,713 line:-1
The control flow is linear
from top to bottom,


65
00:02:59.713 --> 00:03:01.615 line:-1 position:50%
and we know that everything
in this function


66
00:03:01.615 --> 00:03:04.151 line:-1 position:50%
runs in the same
concurrency context,


67
00:03:04,151 --> 00:03:08,155 line:-1
so we no longer need to worry
about threading issues.


68
00:03:08,155 --> 00:03:13,060 line:-1
Here, we used the new async
data method on URLSession.


69
00:03:13.060 --> 00:03:15.662 line:-1 position:50%
It suspends the current
execution context


70
00:03:15.662 --> 00:03:17.030 line:-1 position:50%
without blocking,


71
00:03:17,030 --> 00:03:20,667 line:-1
and it returns data and response
on successful completion,


72
00:03:20.667 --> 00:03:23.837 line:-1 position:50%
or throws an error.


73
00:03:23.837 --> 00:03:26.940 line:-1 position:50%
We also used the throw keyword
to throw errors


74
00:03:26,940 --> 00:03:29,409 line:-1
when the response is unexpected.


75
00:03:29.409 --> 00:03:32.045 line:-1 position:50%
This allows the caller
to catch and handle the error


76
00:03:32,045 --> 00:03:35,816 line:-1
using Swift
native error handling.


77
00:03:35,816 --> 00:03:37,984 line:-1
Lastly, the compiler would bark


78
00:03:37.984 --> 00:03:41.388 line:-1 position:50%
if we try to return an optional
UIImage from this function,


79
00:03:41,388 --> 00:03:46,860 line:-1
so it essentially forces us
to handle nil correctly.


80
00:03:46.860 --> 00:03:49.496 line:-1 position:50%
Here are the signatures
of the methods we just used


81
00:03:49,496 --> 00:03:51,965 line:-1
to fetch data from the network.


82
00:03:51.965 --> 00:03:58.738 line:-1 position:50%
URLSession.data methods accept
either a URL or a URLRequest.


83
00:03:58,738 --> 00:04:03,844 line:-1
They are equivalent to existing
data task convenience methods.


84
00:04:03,844 --> 00:04:07,347 line:-1
We also provide upload methods
where you can upload data


85
00:04:07.347 --> 00:04:09.282 line:-1 position:50%
or upload a file.


86
00:04:09,282 --> 00:04:10,550 line:-1
They are equivalent to existing


87
00:04:10,550 --> 00:04:13,220 line:-1
upload task
convenience methods.


88
00:04:13.220 --> 00:04:15.789 line:-1 position:50%
Be sure to set
the correct HTTP method


89
00:04:15,789 --> 00:04:17,724 line:-1
before sending the request


90
00:04:17,724 --> 00:04:23,163 line:-1
since the default method GET
does not support upload.


91
00:04:23.163 --> 00:04:26.500 line:-1 position:50%
Download methods store
the response body as a file


92
00:04:26.500 --> 00:04:28.735 line:-1 position:50%
rather than in memory.


93
00:04:28,735 --> 00:04:31,238 line:-1
Different from download
task convenience methods,


94
00:04:31.238 --> 00:04:34.808 line:-1 position:50%
these new methods do not
automatically delete the file,


95
00:04:34,808 --> 00:04:38,245 line:-1
so don't forget
to do so yourself.


96
00:04:38,245 --> 00:04:40,447 line:0
In this example,
we are moving the file


97
00:04:40,447 --> 00:04:44,918 line:0
to a different location
for further processing.


98
00:04:44,918 --> 00:04:46,720 position:50%
Swift concurrency's cancellation


99
00:04:46,720 --> 00:04:49,389 line:0
works with URLSession
async methods.


100
00:04:49,389 --> 00:04:53,426 position:50%
One way to cancel is to use
a concurrency Task.Handle.


101
00:04:53,426 --> 00:04:56,530 position:50%
Here, we call async to create
a concurrency Task


102
00:04:56,530 --> 00:04:59,633 line:0
loading two resources
one by one.


103
00:04:59,633 --> 00:05:01,501 line:0
Later, we can use
the Task.Handle


104
00:05:01,501 --> 00:05:04,604 position:50%
to cancel its current
running operation.


105
00:05:04,604 --> 00:05:06,339 line:0
Please note that
concurrency Task


106
00:05:06,339 --> 00:05:08,675 position:50%
is unrelated to URLSessionTask,


107
00:05:08,675 --> 00:05:11,711 line:0
even though they share the name
"Task."


108
00:05:11.711 --> 00:05:13.713 line:-1 position:50%
The methods
we just talked about --


109
00:05:13.713 --> 00:05:15.882 line:-1 position:50%
data, upload, download --


110
00:05:15.882 --> 00:05:19.719 line:-1 position:50%
wait for the entire response
body to arrive before returning.


111
00:05:19.719 --> 00:05:23.657 line:-1 position:50%
What if we want to receive
the response body incrementally?


112
00:05:23.657 --> 00:05:27.627 line:-1 position:50%
I'm happy to introduce
URLSession.bytes methods.


113
00:05:27,627 --> 00:05:30,197 line:-1
They return when the response
headers have been received


114
00:05:30.197 --> 00:05:34.734 line:-1 position:50%
and deliver the response body
as an AsyncSequence of bytes.


115
00:05:34.734 --> 00:05:37.070 line:-1 position:50%
To show you how it works,
my colleague Zhenchao


116
00:05:37.070 --> 00:05:40.974 line:-1 position:50%
will demo how he's adopting it
in the Dogs app.


117
00:05:40.974 --> 00:05:44.077 line:-1 position:50%
Zhenchao Li: Thanks, Guoye!
Hi, I'm Zhenchao.


118
00:05:44,077 --> 00:05:47,247 line:-1
I have been working on
a new feature of the Dogs app


119
00:05:47,247 --> 00:05:51,518 line:-1
that shows how many people
favorited a dog photo.


120
00:05:54.354 --> 00:05:56.823 line:-1 position:50%
Right now, I can pull down
the scroll view


121
00:05:56,823 --> 00:06:00,126 line:-1
to refresh favorite counts.


122
00:06:00,126 --> 00:06:04,531 line:-1
I would like to update these
favorite counts in real time.


123
00:06:04.531 --> 00:06:08.435 line:-1 position:50%
That way, the app feels
much more interactive.


124
00:06:08.435 --> 00:06:11.571 line:-1 position:50%
To do that, our back-end
engineers have built


125
00:06:11,571 --> 00:06:13,607 line:-1
a real-time events endpoint


126
00:06:13,607 --> 00:06:17,143 line:-1
that gives us live updates
to photos.


127
00:06:17.143 --> 00:06:18.712 line:-1 position:50%
I'm going to check out
the endpoint


128
00:06:18.712 --> 00:06:23.483 line:-1 position:50%
to examine the response.


129
00:06:23,483 --> 00:06:27,120 line:-1
Each line of the response body
is a piece of JSON data


130
00:06:27,120 --> 00:06:29,589 line:-1
that describes updates
to a photo,


131
00:06:29.589 --> 00:06:32.792 line:-1 position:50%
such as updated favorite counts.


132
00:06:32.792 --> 00:06:35.695 line:-1 position:50%
Let's use the new
async sequence API


133
00:06:35,695 --> 00:06:38,298 line:-1
to consume the response
of the endpoint


134
00:06:38.298 --> 00:06:42.335 line:-1 position:50%
and update the favorite counts
as real-time events are parsed.


135
00:06:42.335 --> 00:06:46.573 line:-1 position:50%
We can kick off the live updates
in the onAppearHandler function,


136
00:06:46.573 --> 00:06:48.208 line:-1 position:50%
which is an action called


137
00:06:48,208 --> 00:06:50,944 line:-1
when the photo collection view
appears.


138
00:06:50,944 --> 00:06:52,379 line:-1
Within the function,


139
00:06:52.379 --> 00:06:56.182 line:-1 position:50%
I'm going to call
the new URLSession.bytes API


140
00:06:56,182 --> 00:07:00,186 line:-1
to fetch data
from our new endpoint.


141
00:07:06.359 --> 00:07:08.728 line:-1 position:50%
Note that the bytes
returned here


142
00:07:08,728 --> 00:07:12,932 line:-1
have a type of
URLSession.AsyncBytes.


143
00:07:12.932 --> 00:07:15.502 line:-1 position:50%
This gives us a way
to incrementally consume


144
00:07:15.502 --> 00:07:17.437 line:-1 position:50%
response body.


145
00:07:17.437 --> 00:07:19.706 line:-1 position:50%
I also added error checking here


146
00:07:19,706 --> 00:07:24,344 line:-1
to make sure that we did get a
successful response from server.


147
00:07:28.448 --> 00:07:30.884 line:-1 position:50%
We want to parse
each line of the response


148
00:07:30.884 --> 00:07:33.286 line:-1 position:50%
as a piece of JSON data.


149
00:07:33,286 --> 00:07:38,291 line:-1
To do that, we can use
the lines method on AsyncBytes.


150
00:07:42,696 --> 00:07:46,700 line:-1
This enables us to consume
the response line by line


151
00:07:46.700 --> 00:07:50.704 line:-1 position:50%
as data is received.


152
00:07:54.774 --> 00:07:58.712 line:-1 position:50%
Within the loop,
I can just parse the JSON data


153
00:07:58.712 --> 00:08:03.516 line:-1 position:50%
and update my UI by calling
updateFavoriteCount.


154
00:08:03.516 --> 00:08:08.021 line:-1 position:50%
Note that the UI updates need
to happen on the main actor,


155
00:08:08.021 --> 00:08:11.157 line:-1 position:50%
and that's why I'm using
await syntax


156
00:08:11,157 --> 00:08:18,565 line:-1
to call updateFavoriteCount,
which is an async function.


157
00:08:18,565 --> 00:08:23,603 line:-1
Great. Now these favorite counts
are updated in real time.


158
00:08:23.603 --> 00:08:25.071 line:-1 position:50%
Back to you, Guoye.


159
00:08:27.741 --> 00:08:29.242 line:-1 position:50%
Guoye: Zhenchao
just showed us how to use


160
00:08:29.242 --> 00:08:31.878 line:-1 position:50%
an AsyncSequence
built-in transformation --


161
00:08:31.878 --> 00:08:35.915 line:-1 position:50%
lines -- to parse response body
line by line.


162
00:08:35,915 --> 00:08:39,119 line:-1
AsyncSequence supports many
convenience transformations,


163
00:08:39,119 --> 00:08:41,221 line:-1
and you can also use
AsyncSequence


164
00:08:41.221 --> 00:08:46.860 line:-1 position:50%
with other system framework APIs
such as FileHandle.


165
00:08:46,860 --> 00:08:49,095 line:0
To learn more
about AsyncSequence,


166
00:08:49,095 --> 00:08:53,933 position:50%
I encourage you to watch
the video "Meet AsyncSequence".


167
00:08:53,933 --> 00:08:56,536 line:-1
URLSession is designed
around a delegate model


168
00:08:56,536 --> 00:08:58,905 line:-1
which provides callbacks
for events such as


169
00:08:58,905 --> 00:09:02,976 line:-1
authentication challenges,
metrics, and more.


170
00:09:02,976 --> 00:09:06,946 line:0
The new async methods no longer
expose the underlying task,


171
00:09:06,946 --> 00:09:09,282 position:50%
so how do we handle
authentication challenges


172
00:09:09,282 --> 00:09:12,619 line:0
specific to a task?


173
00:09:12,619 --> 00:09:16,156 position:50%
Yes, all of those methods can
take an additional argument --


174
00:09:16,156 --> 00:09:18,458 position:50%
a task-specific delegate --


175
00:09:18,458 --> 00:09:20,160 position:50%
allowing you
to provide an object


176
00:09:20,160 --> 00:09:24,497 position:50%
to handle delegate messages
specific to this data upload,


177
00:09:24,497 --> 00:09:27,333 position:50%
download, or bytes operation.


178
00:09:27,333 --> 00:09:29,536 line:0
We are also introducing
the delegate property


179
00:09:29,536 --> 00:09:32,839 line:0
on NSURLSessionTask
in Objective-C


180
00:09:32,839 --> 00:09:36,342 line:0
for you to take advantage of
the same capability.


181
00:09:36,342 --> 00:09:38,478 line:0
The delegate is
strongly held by a task


182
00:09:38,478 --> 00:09:42,048 position:50%
until it completes or fails.


183
00:09:42,048 --> 00:09:44,517 position:50%
It's worth noting
that task-specific delegate


184
00:09:44,517 --> 00:09:47,987 line:0
is not supported by
background URLSession.


185
00:09:47,987 --> 00:09:50,990 position:50%
If a method is implemented
on both session delegate


186
00:09:50,990 --> 00:09:57,430 line:0
and task delegate, the one
on task delegate will be called.


187
00:09:57,430 --> 00:09:58,598 line:-1
Now, Zhenchao will show us


188
00:09:58,598 --> 00:10:00,467 line:-1
how to use
a task-specific delegate


189
00:10:00.467 --> 00:10:03.870 line:-1 position:50%
to handle
authentication challenges.


190
00:10:03.870 --> 00:10:05.638 line:-1 position:50%
Zhenchao: Thanks, Guoye!


191
00:10:05,638 --> 00:10:08,875 line:-1
Our Dogs app has a
simple data-fetching layer


192
00:10:08.875 --> 00:10:11.878 line:-1 position:50%
written with the new async APIs.


193
00:10:11,878 --> 00:10:14,147 line:-1
For some of our
data-fetching tasks,


194
00:10:14.147 --> 00:10:16.716 line:-1 position:50%
such as marking a photo
as favorite


195
00:10:16,716 --> 00:10:19,219 line:-1
or fetching
all favorited photos,


196
00:10:19,219 --> 00:10:23,056 line:-1
the user needs
to be authenticated.


197
00:10:23,056 --> 00:10:25,859 line:-1
Right now,
when I tap to favorite a photo,


198
00:10:25.859 --> 00:10:29.229 line:-1 position:50%
I get an "Unauthorized" error.


199
00:10:29.229 --> 00:10:32.832 line:-1 position:50%
Let's go through how we can add
user authentication


200
00:10:32,832 --> 00:10:36,302 line:-1
by using
a task-specific delegate.


201
00:10:36.302 --> 00:10:40.907 line:-1 position:50%
First, let's write a
URLSessionTaskDelegate.


202
00:10:40.907 --> 00:10:44.811 line:-1 position:50%
Let's call it
AuthenticationDelegate.


203
00:10:44,811 --> 00:10:49,282 line:-1
[KEYSTROKES]


204
00:10:49.282 --> 00:10:51.551 line:-1 position:50%
The AuthenticationDelegate
conforms


205
00:10:51,551 --> 00:10:55,054 line:-1
to the
URLSessionTaskDelegate protocol,


206
00:10:55,054 --> 00:10:58,191 line:-1
and it accepts an instance of
signInController


207
00:10:58.191 --> 00:11:00.493 line:-1 position:50%
in its initializer.


208
00:11:00,493 --> 00:11:04,731 line:-1
The signInController class
we implemented already contains


209
00:11:04.731 --> 00:11:07.834 line:-1 position:50%
some nice helper functions
that we can use


210
00:11:07,834 --> 00:11:12,005 line:-1
to prompt the user
for credentials.


211
00:11:12.005 --> 00:11:15.575 line:-1 position:50%
Next, let's implement
the URLSession


212
00:11:15.575 --> 00:11:18.578 line:-1 position:50%
didReceive challenge
delegate method.


213
00:11:20,713 --> 00:11:22,482 line:0
Within the delegate method,


214
00:11:22,482 --> 00:11:27,820 position:50%
we can choose to respond to HTTP
basic authentication challenges


215
00:11:27,820 --> 00:11:30,590 line:0
by prompting the user
for credentials.


216
00:11:30,590 --> 00:11:35,628 position:50%
Of course, we should
not forget about error handling.


217
00:11:35.628 --> 00:11:38.932 line:-1 position:50%
Now let's use this
AuthenticationDelegate class


218
00:11:38.932 --> 00:11:41.968 line:-1 position:50%
as our task-specific delegate.


219
00:11:41.968 --> 00:11:46.739 line:-1 position:50%
To do that, I can just
instantiate an instance of it


220
00:11:46.739 --> 00:11:49.576 line:-1 position:50%
and parse it
as the delegate parameter


221
00:11:49.576 --> 00:11:53.613 line:-1 position:50%
to the URLSession.data method.


222
00:11:53,613 --> 00:11:58,284 line:-1
Note that the delegate object
is not an instance variable,


223
00:11:58.284 --> 00:12:00.553 line:-1 position:50%
and it's strongly held
by the task


224
00:12:00.553 --> 00:12:03.890 line:-1 position:50%
until the task
completes or fails.


225
00:12:03.890 --> 00:12:07.460 line:-1 position:50%
What's new here is that
the delegate can be used


226
00:12:07.460 --> 00:12:10.096 line:-1 position:50%
to handle events
that are specific


227
00:12:10,096 --> 00:12:12,899 line:-1
to an instance of
a URLSession task,


228
00:12:12.899 --> 00:12:16.536 line:-1 position:50%
which is handy when the logic
inside your delegate methods


229
00:12:16,536 --> 00:12:21,708 line:-1
only applies to certain
URLSession tasks and not others.


230
00:12:21.708 --> 00:12:25.144 line:-1 position:50%
Great. Now when we tap
to favorite the photo...


231
00:12:29.115 --> 00:12:32.118 line:-1 position:50%
...it pops up a login form.


232
00:12:40.727 --> 00:12:45.064 line:-1 position:50%
Once we log in,
the photo shows as favorited,


233
00:12:45,064 --> 00:12:53,573 line:-1
and that it has been added to
our favorited-photos collection.


234
00:12:53,573 --> 00:12:57,210 line:-1
Back to you, Guoye.


235
00:12:57,210 --> 00:12:59,412 line:-1
Guoye: Thank you, Zhenchao,
for the demo.


236
00:12:59.412 --> 00:13:03.850 line:-1 position:50%
We can't wait for you to try out
async/await with URLSession,


237
00:13:03,850 --> 00:13:06,819 line:-1
and we encourage you to apply
the same async concepts


238
00:13:06.819 --> 00:13:09.856 line:-1 position:50%
to improve your code,
including changing functions,


239
00:13:09,856 --> 00:13:13,059 line:-1
taking a completion handler
to async functions,


240
00:13:13.059 --> 00:13:18.297 line:-1 position:50%
and changing repeated events
handlers to AsyncSequences.


241
00:13:18,297 --> 00:13:21,234 position:50%
To learn more about advancements
in URLSession,


242
00:13:21,234 --> 00:13:23,503 line:0
we have a video about
a cool new instrument


243
00:13:23,503 --> 00:13:26,639 position:50%
inspecting your app's
HTTP traffic


244
00:13:26,639 --> 00:13:31,411 position:50%
and a video about HTTP/3 support
in URLSession.


245
00:13:31,411 --> 00:13:34,414 line:-1
Thank you
and have a great WWDC!


246
00:13:34,414 --> 00:13:38,151 line:0 align:right position:90%
♪

