2
00:00:00.334 --> 00:00:03.337
[upbeat music]


3
00:00:03.370 --> 00:00:09.443
♪ ♪


4
00:00:09.476 --> 00:00:11.979
[Xuerui] Hello, and welcome
to "Mitigate fraud


5
00:00:12.012 --> 00:00:15.048
with App Attest
and DeviceCheck."


6
00:00:15.082 --> 00:00:16.950
My name is Xuerui Yan,
and I work


7
00:00:16.984 --> 00:00:19.653
on the App Store Trust
and Safety team.


8
00:00:19.686 --> 00:00:23.290
I'm excited to talk
about protecting your apps


9
00:00:23.323 --> 00:00:26.093
using App Attest
and DeviceCheck.


10
00:00:26.159 --> 00:00:28.795
At Apple,
we're constantly working


11
00:00:28.829 --> 00:00:30.764
to ensure
that the App Store


12
00:00:30.797 --> 00:00:34.401
is a safe and trusted place
for customers and developers.


13
00:00:35.235 --> 00:00:38.939
In this video, we will cover
the engineering specifics.


14
00:00:39.873 --> 00:00:42.576
For business
and conceptual details,


15
00:00:42.609 --> 00:00:46.513
see "Safeguard your accounts,
promotions, and content" video


16
00:00:46.547 --> 00:00:49.583
from WWDC 2021.


17
00:00:50.984 --> 00:00:55.155
In iOS 11, we introduced
the DeviceCheck framework.


18
00:00:55.789 --> 00:00:59.793
DeviceCheck helps mitigate
fraud on promotional offerings.


19
00:01:00.494 --> 00:01:04.364
Suppose you are introducing
a new feature in your app.


20
00:01:04.398 --> 00:01:05.832
To promote the feature,


21
00:01:05.866 --> 00:01:09.303
you offer a free, single-use item.


22
00:01:09.336 --> 00:01:11.672
Someone might abuse
the promotion


23
00:01:11.705 --> 00:01:15.742
by reinstalling the app
over and over again


24
00:01:15.776 --> 00:01:18.478
just to claim the free item.


25
00:01:18.512 --> 00:01:21.849
Likely, you'll want
to limit promotional items


26
00:01:21.882 --> 00:01:24.985
to once per device,
instead of allowing the app


27
00:01:25.018 --> 00:01:29.656
to be installed repeatedly
and having the promotion reused.


28
00:01:30.724 --> 00:01:33.493
Now, DeviceCheck can
help you detect


29
00:01:33.527 --> 00:01:37.497
whether a device has received
a promotion offer,


30
00:01:37.531 --> 00:01:42.436
or if a device has participated
in fraudulent activity.


31
00:01:43.504 --> 00:01:47.541
It allows you to persistently
store two bits of information


32
00:01:47.574 --> 00:01:52.212
and a timestamp associated
with one device on Apple servers.


33
00:01:53.447 --> 00:01:58.118
It is up to you to decide what these bits
mean to your applications.


34
00:01:59.152 --> 00:02:01.355
The state will be
maintained by Apple


35
00:02:01.388 --> 00:02:03.657
for you to update and query.


36
00:02:05.259 --> 00:02:09.596
The bits are shared
by all apps from a developer.


37
00:02:09.630 --> 00:02:13.133
Please keep that in mind when
assigning meanings to the bits


38
00:02:13.166 --> 00:02:16.303
so they are applicable
across all your apps.


39
00:02:18.105 --> 00:02:21.975
The state persists
across app reinstallation,


40
00:02:22.009 --> 00:02:24.444
device transfer between users,


41
00:02:24.478 --> 00:02:27.848
and even "Erase all contents
and settings."


42
00:02:27.881 --> 00:02:31.185
Consider using the timestamp
to reset the bits


43
00:02:31.218 --> 00:02:33.253
on a period of your choosing,


44
00:02:33.287 --> 00:02:36.857
based on your promotional
and business strategies.


45
00:02:38.325 --> 00:02:40.394
To find out more
about DeviceCheck,


46
00:02:40.427 --> 00:02:42.696
see the "Privacy
and Your Apps" video


47
00:02:42.729 --> 00:02:45.766
from WWDC 2017


48
00:02:45.799 --> 00:02:48.402
and the DeviceCheck Framework
documentation.


49
00:02:49.970 --> 00:02:52.706
So that's DeviceCheck.


50
00:02:52.739 --> 00:02:56.176
Next, I'm going to talk
about App Attest,


51
00:02:56.210 --> 00:02:59.112
also available under
the DeviceCheck Framework.


52
00:03:00.781 --> 00:03:03.250
When your service
receives a request,


53
00:03:03.283 --> 00:03:06.920
it can be hard to know whether
it really is from your app.


54
00:03:08.722 --> 00:03:10.958
App Attest allows your app


55
00:03:10.991 --> 00:03:13.427
to attach
a hardware-backed assertion


56
00:03:13.460 --> 00:03:16.430
as a part of the request.


57
00:03:16.463 --> 00:03:19.867
Your server can use assertion
to verify the request came


58
00:03:19.900 --> 00:03:23.837
from your genuine app,
on a genuine Apple device.


59
00:03:23.871 --> 00:03:27.674
Imagine, you designed
a beautiful app


60
00:03:27.708 --> 00:03:31.345
that encourages travel
to discover collectibles,


61
00:03:31.378 --> 00:03:33.914
only to find
that a modified app allowed


62
00:03:33.947 --> 00:03:37.251
collecting everything
without ever leaving home.


63
00:03:38.852 --> 00:03:41.355
Or imagine players' frustration


64
00:03:41.388 --> 00:03:43.790
seeing others
racing up the leaderboards,


65
00:03:43.824 --> 00:03:46.894
by using cheats to get
unlimited boosts


66
00:03:46.927 --> 00:03:49.596
in a competitive multiplayer
racing game.


67
00:03:50.898 --> 00:03:54.101
Or imagine waking up
on a Saturday


68
00:03:54.134 --> 00:03:56.103
and, much to your delight,


69
00:03:56.136 --> 00:03:59.773
seeing a very high
request volume on your server,


70
00:03:59.806 --> 00:04:01.475
but after investigation,


71
00:04:01.508 --> 00:04:04.678
you find the calls aren't
coming from your app at all.


72
00:04:06.547 --> 00:04:09.683
App Attest can help you
identify genuine


73
00:04:09.716 --> 00:04:12.052
and modified versions
of your app,


74
00:04:12.085 --> 00:04:16.056
letting you protect your app
experience and your business.


75
00:04:17.524 --> 00:04:21.195
App Attest provides three
key properties that you can


76
00:04:21.228 --> 00:04:25.432
take advantage of to protect
you and your customers.


77
00:04:27.267 --> 00:04:30.704
App Attest lets your service
verify a request came


78
00:04:30.737 --> 00:04:33.273
from a legitimate instance
of your app


79
00:04:33.307 --> 00:04:36.176
by satisfying three conditions:


80
00:04:36.210 --> 00:04:39.613
the request came
from a genuine Apple device,


81
00:04:39.646 --> 00:04:42.115
running your genuine application,


82
00:04:42.149 --> 00:04:45.085
and that the payload
has not been tampered with.


83
00:04:46.787 --> 00:04:49.489
Let's go through how
App Attest provides


84
00:04:49.523 --> 00:04:51.491
each of these properties.


85
00:04:52.059 --> 00:04:55.829
At the heart of App Attest
is a secure key pair


86
00:04:55.863 --> 00:04:59.733
and an attestation,
signed by Apple,


87
00:04:59.766 --> 00:05:02.402
certifying that
the key pair originates


88
00:05:02.436 --> 00:05:05.906
from a genuine Apple device.


89
00:05:05.939 --> 00:05:09.009
The private key is stored
and accessible


90
00:05:09.042 --> 00:05:13.146
only through the Secure Enclave
using the App Attest API.


91
00:05:14.414 --> 00:05:18.118
Your app can sign requests
to your service with the key,


92
00:05:18.151 --> 00:05:21.088
and your service can then check
the signature to verify


93
00:05:21.121 --> 00:05:24.858
the request was generated
on a genuine Apple device.


94
00:05:26.994 --> 00:05:30.063
For an app to execute
on an Apple device,


95
00:05:30.097 --> 00:05:32.266
it must be signed.


96
00:05:32.299 --> 00:05:35.802
A person making unauthorized
modifications to your app


97
00:05:35.836 --> 00:05:39.806
must re-sign it
with an identity they control.


98
00:05:39.840 --> 00:05:43.443
This unavoidably modifies
the app identity.


99
00:05:45.078 --> 00:05:49.416
We include a hash of the app
identity in the attestation.


100
00:05:51.185 --> 00:05:54.788
By comparing your app identity
with the one included


101
00:05:54.821 --> 00:05:57.191
in the attestation,
you can determine


102
00:05:57.224 --> 00:06:00.227
whether the caller is using
a modified version.


103
00:06:01.995 --> 00:06:03.997
Now that you know
the request came


104
00:06:04.031 --> 00:06:07.668
from a genuine device
and your genuine app,


105
00:06:07.701 --> 00:06:10.270
let's talk about
the request payload.


106
00:06:12.206 --> 00:06:14.374
Before sending
a payload to your server,


107
00:06:14.408 --> 00:06:17.644
you can instruct App Attest
to sign a digest


108
00:06:17.678 --> 00:06:21.348
of the payload
using the attested key.


109
00:06:21.381 --> 00:06:24.218
This creates an assertion
of the payload.


110
00:06:26.053 --> 00:06:28.121
Your app should transmit
the payload


111
00:06:28.155 --> 00:06:30.858
and the assertion
to your service.


112
00:06:30.891 --> 00:06:33.293
By verifying the assertion
against the payload,


113
00:06:33.327 --> 00:06:37.798
you can trust that the payload
was not tampered with in transit.


114
00:06:39.466 --> 00:06:42.336
Those are three key properties.


115
00:06:42.369 --> 00:06:45.239
Now let's talk a bit
about privacy.


116
00:06:46.807 --> 00:06:51.211
Here at Apple,
we care deeply about privacy.


117
00:06:51.245 --> 00:06:54.448
We believe that privacy is
an essential foundation


118
00:06:54.481 --> 00:06:57.184
for a healthy app ecosystem.


119
00:06:57.217 --> 00:07:01.588
Each element of App Attest has
been built with privacy in mind.


120
00:07:03.056 --> 00:07:06.426
The attestations are designed
to provide assurance


121
00:07:06.460 --> 00:07:08.161
of a genuine device,


122
00:07:08.195 --> 00:07:11.398
while protecting
against tracking.


123
00:07:11.431 --> 00:07:13.700
The attestations are anonymous


124
00:07:13.734 --> 00:07:16.270
and include
no hardware identifiers.


125
00:07:17.905 --> 00:07:22.709
App Attest keys are unique
per installation of your app.


126
00:07:22.743 --> 00:07:26.647
This means that an App Attest
key will not survive


127
00:07:26.680 --> 00:07:30.284
app reinstallation,
is not backed up,


128
00:07:30.317 --> 00:07:33.687
and is not synced
across devices.


129
00:07:33.720 --> 00:07:36.523
Keep this in mind
when designing your app.


130
00:07:38.992 --> 00:07:42.763
Now that you understand
the value App Attest provides,


131
00:07:42.796 --> 00:07:44.698
let's dive into the details


132
00:07:44.731 --> 00:07:48.168
of incorporating it
into your app.


133
00:07:48.202 --> 00:07:50.871
There are three basic parts
to incorporate


134
00:07:50.904 --> 00:07:54.141
App Attest into your app.


135
00:07:54.174 --> 00:07:58.779
Creating an App Attest key,
attesting and verifying the key,


136
00:07:58.812 --> 00:08:02.649
and generating
and verifying assertions.


137
00:08:02.683 --> 00:08:06.620
Let's start with creating
an App Attest Key.


138
00:08:06.653 --> 00:08:09.189
All App Attest calls
should be guarded


139
00:08:09.223 --> 00:08:11.959
by the isSupported property.


140
00:08:11.992 --> 00:08:13.694
App Attest is supported


141
00:08:13.727 --> 00:08:17.130
on devices
that have a Secure Enclave,


142
00:08:17.164 --> 00:08:20.701
but there are cases,
such as App Extensions,


143
00:08:20.734 --> 00:08:24.505
where isSupported will
still return false.


144
00:08:24.538 --> 00:08:28.308
Your app must handle
these cases gracefully.


145
00:08:29.743 --> 00:08:32.479
Instead of
immediately blocking access,


146
00:08:32.513 --> 00:08:36.016
use failures as a risk signal.


147
00:08:36.049 --> 00:08:40.187
First, classify
the caller as untrusted.


148
00:08:40.220 --> 00:08:42.789
Then, based on your risk
assessment logic,


149
00:08:42.823 --> 00:08:45.292
evaluate whether to allow
the client


150
00:08:45.325 --> 00:08:47.227
to use sensitive features.


151
00:08:49.162 --> 00:08:51.131
Another approach is to monitor


152
00:08:51.164 --> 00:08:54.201
for a sudden increase in devices


153
00:08:54.234 --> 00:08:56.270
claiming they don't
support App Attest


154
00:08:56.303 --> 00:08:58.805
when calling your service.


155
00:08:58.839 --> 00:09:02.009
If the ratio of devices
supporting App Attest


156
00:09:02.042 --> 00:09:05.579
suddenly decreases, it may be a sign


157
00:09:05.612 --> 00:09:08.815
of modified apps trying
to bypass your checks.


158
00:09:09.650 --> 00:09:13.287
With an App Attest key
successfully generated,


159
00:09:13.320 --> 00:09:17.224
let's go ahead
and attest the key.


160
00:09:17.257 --> 00:09:20.561
To prevent man-in-the-middle
and replay attacks,


161
00:09:20.594 --> 00:09:24.264
we need a one-time server challenge.


162
00:09:24.298 --> 00:09:27.401
Let's have your server
issue the challenge to the app.


163
00:09:28.836 --> 00:09:31.705
To link the attestation
with a user account ID


164
00:09:31.738 --> 00:09:33.874
or other values,


165
00:09:33.941 --> 00:09:35.909
hash those values together


166
00:09:35.943 --> 00:09:40.414
with the challenge
to create the clientDataHash.


167
00:09:40.447 --> 00:09:43.917
Using the clientDataHash,
along with the keyId


168
00:09:43.951 --> 00:09:48.121
from the previous step,
we can now call attestKey API.


169
00:09:49.790 --> 00:09:52.593
attestKey will use
the private key to create


170
00:09:52.626 --> 00:09:56.997
a hardware attestation request
for the device,


171
00:09:57.030 --> 00:10:00.667
and submit the request
to Apple for verification.


172
00:10:00.701 --> 00:10:03.136
Once verified, Apple will return


173
00:10:03.170 --> 00:10:07.674
an anonymous attestation object
to your app.


174
00:10:07.708 --> 00:10:11.578
Send the attestation,
along with any custom payload,


175
00:10:11.612 --> 00:10:15.148
back to your server for verification.


176
00:10:15.215 --> 00:10:18.051
OK, now that your app
has sent the attestation


177
00:10:18.085 --> 00:10:21.088
to your server,
let's try to verify it.


178
00:10:22.289 --> 00:10:26.026
The attestation follows
the Web Authentication standard


179
00:10:26.059 --> 00:10:28.262
and contains three parts:


180
00:10:28.295 --> 00:10:31.164
a list of certificates
signed by Apple,


181
00:10:31.198 --> 00:10:35.702
an Authenticator Data structure,
and a risk metric receipt.


182
00:10:36.870 --> 00:10:40.807
Let's look at the important pieces
that you need to verify.


183
00:10:42.543 --> 00:10:44.978
The certificate section
contains the leaf


184
00:10:45.012 --> 00:10:48.048
and intermediate certificates.


185
00:10:48.081 --> 00:10:51.552
The App Attest root certificate
is available


186
00:10:51.585 --> 00:10:55.022
in the Apple Private PKI
repository.


187
00:10:55.055 --> 00:10:57.524
Validating the full certificate chain


188
00:10:57.558 --> 00:11:00.861
tells you the device is
a genuine Apple device.


189
00:11:02.129 --> 00:11:05.332
When you called attestKey,
a single-use hash,


190
00:11:05.365 --> 00:11:07.868
known as a nonce, was created


191
00:11:07.901 --> 00:11:12.039
from the clientDataHash
and other data.


192
00:11:12.072 --> 00:11:15.175
That nonce is included
in the leaf certificate.


193
00:11:16.543 --> 00:11:19.446
To prevent tampering,
you'll reconstruct the nonce


194
00:11:19.479 --> 00:11:22.449
on your server
and verify it matches.


195
00:11:24.318 --> 00:11:27.988
The authenticator data block
contains multiple properties,


196
00:11:28.021 --> 00:11:31.391
including a hash
of the app identity,


197
00:11:31.425 --> 00:11:34.962
that you can use to verify
it is your app calling you.


198
00:11:36.430 --> 00:11:39.666
The key attestation also
contains a receipt that you can


199
00:11:39.700 --> 00:11:44.171
store and use later to request
a risk metric from Apple.


200
00:11:44.204 --> 00:11:48.008
I will cover more information
about it later in the video.


201
00:11:49.443 --> 00:11:54.348
If everything checks out,
the App Attest Key is genuine.


202
00:11:54.381 --> 00:11:57.818
Store the key
associated with the client data


203
00:11:57.851 --> 00:12:00.387
for use to verify
subsequent requests.


204
00:12:02.022 --> 00:12:06.527
Not all failures are due
to an invalid attestation.


205
00:12:06.560 --> 00:12:08.495
Gracefully handle scenarios,


206
00:12:08.529 --> 00:12:11.098
such as isSupported returning false,


207
00:12:11.131 --> 00:12:13.233
being throttled during ramp up,


208
00:12:13.267 --> 00:12:16.003
or general network failures.


209
00:12:16.036 --> 00:12:17.871
You can then
incorporate failures


210
00:12:17.905 --> 00:12:21.241
as signals
in your overall risk assessment.


211
00:12:22.843 --> 00:12:26.146
For further details
on implementing the verification,


212
00:12:26.180 --> 00:12:28.448
please see the documentation.


213
00:12:28.515 --> 00:12:32.753
Calling the attest-Key API
generates a network call


214
00:12:32.786 --> 00:12:36.156
from your app
to App Attest service.


215
00:12:36.190 --> 00:12:39.026
This only happens
once per app instance.


216
00:12:39.059 --> 00:12:42.596
However, if you have
a large install base,


217
00:12:42.629 --> 00:12:47.134
collectively, your app may send
many requests to App Attest.


218
00:12:47.801 --> 00:12:52.139
In order to manage resources
and avoid being rate limited,


219
00:12:52.172 --> 00:12:54.508
make sure you gradually enable
this feature


220
00:12:54.541 --> 00:12:56.944
across your install base.


221
00:12:56.977 --> 00:12:58.846
For example,


222
00:12:58.879 --> 00:13:01.481
if you have
a million daily active users,


223
00:13:01.515 --> 00:13:05.519
you can probably ramp up
over a day or so.


224
00:13:05.552 --> 00:13:09.556
If you have a billion
daily active users, nice work!


225
00:13:09.590 --> 00:13:12.226
You should ramp up
over a month or more.


226
00:13:14.561 --> 00:13:17.431
Now that you have
the attested key, you can use


227
00:13:17.464 --> 00:13:20.167
the generateAssertion
API call to protect


228
00:13:20.200 --> 00:13:23.770
sensitive communication between
your app and your server.


229
00:13:25.405 --> 00:13:29.142
The assertion flow
is simpler than attestation,


230
00:13:29.176 --> 00:13:32.045
as the Apple servers
are no longer involved.


231
00:13:33.280 --> 00:13:36.116
All assertions using
the key are generated


232
00:13:36.149 --> 00:13:39.319
on-device
and validated on your server.


233
00:13:41.321 --> 00:13:45.292
Start by requesting a unique
challenge from the server,


234
00:13:45.325 --> 00:13:47.961
then generate a digest
of the payload


235
00:13:47.995 --> 00:13:51.098
and call generateAssertion.


236
00:13:51.131 --> 00:13:54.434
generateAssertion will use
the digest to compute


237
00:13:54.468 --> 00:13:58.071
a nonce and sign it
with the App Attest key.


238
00:13:59.873 --> 00:14:01.742
Your app can then
send the payload


239
00:14:01.775 --> 00:14:04.044
and the assertion
to your server.


240
00:14:04.077 --> 00:14:07.281
Finally, your server should
verify the payload.


241
00:14:09.616 --> 00:14:13.587
Assertion payloads contains
this high-level structure.


242
00:14:13.620 --> 00:14:16.890
Signature
and Authenticator Data.


243
00:14:18.525 --> 00:14:21.929
To validate the signature,
reverse the process


244
00:14:21.962 --> 00:14:24.731
to reconstruct the nonce
on your server.


245
00:14:24.765 --> 00:14:28.001
Then use the public key
to verify the signature.


246
00:14:29.236 --> 00:14:31.004
If the signature is valid,


247
00:14:31.038 --> 00:14:34.241
you can trust
the payload is unmodified.


248
00:14:36.109 --> 00:14:40.514
The authenticator data section
contains the app identity hash.


249
00:14:41.682 --> 00:14:44.451
Validate the hash
to ensure the assertion


250
00:14:44.484 --> 00:14:46.753
is from your genuine app.


251
00:14:48.455 --> 00:14:50.691
The authenticator data
also includes


252
00:14:50.724 --> 00:14:53.493
an ever-increasing counter.


253
00:14:53.527 --> 00:14:56.230
To help protect
against replay attacks,


254
00:14:56.263 --> 00:14:58.432
store the counter value
on your server,


255
00:14:58.465 --> 00:15:02.803
and expect it to increase
with each subsequent request.


256
00:15:04.705 --> 00:15:07.574
With the key,
you can now repeat this process


257
00:15:07.608 --> 00:15:10.244
as much as you need.


258
00:15:10.277 --> 00:15:13.380
While generating an assertion
doesn't call Apple servers,


259
00:15:13.413 --> 00:15:17.851
it's a cryptographic operation,
which adds some latency.


260
00:15:17.885 --> 00:15:20.153
You should factor this
into your design


261
00:15:20.187 --> 00:15:23.257
when incorporating
App Attest into your app.


262
00:15:25.259 --> 00:15:28.362
Assertions are
a good fit for important


263
00:15:28.395 --> 00:15:31.865
but infrequent calls,
and the calls that can deal


264
00:15:31.899 --> 00:15:35.169
with the additional latency
and the computation required.


265
00:15:36.503 --> 00:15:39.173
For frequent
real-time network commands,


266
00:15:39.206 --> 00:15:41.675
assertions may not be suitable.


267
00:15:42.943 --> 00:15:44.244
Congratulations!


268
00:15:44.278 --> 00:15:49.082
You have now completed the basic
implementation of App Attest.


269
00:15:49.116 --> 00:15:52.553
With this implementation alone,
you can start classifying


270
00:15:52.586 --> 00:15:56.790
your incoming server requests
as genuine and modified,


271
00:15:56.823 --> 00:15:59.459
and incorporate
this important fraud signal


272
00:15:59.493 --> 00:16:01.361
into your business logic.


273
00:16:02.196 --> 00:16:04.765
But there's more.


274
00:16:04.798 --> 00:16:08.235
An attacker may try
to work around App Attest


275
00:16:08.268 --> 00:16:13.440
by using a single device
to create many App Attest keys,


276
00:16:13.473 --> 00:16:16.610
and use that device
to serve communications


277
00:16:16.643 --> 00:16:20.581
between many modified apps
and your server.


278
00:16:20.614 --> 00:16:24.484
To help detect such behavior,
we offer a service


279
00:16:24.518 --> 00:16:27.821
called the App Attest
Risk Metric Service


280
00:16:27.855 --> 00:16:30.524
that provides
the approximate number of keys


281
00:16:30.557 --> 00:16:35.195
created on a device
for your app.


282
00:16:35.229 --> 00:16:37.564
Recall that attestKey
returns both


283
00:16:37.598 --> 00:16:41.835
the attestation
and a risk metric receipt.


284
00:16:41.869 --> 00:16:43.904
Your server can
submit that receipt


285
00:16:43.937 --> 00:16:48.475
to the service and redeem it
for a new receipt.


286
00:16:48.509 --> 00:16:52.312
The new receipt will
include the risk metric.


287
00:16:53.313 --> 00:16:56.617
Periodically, you can redeem
your latest receipt


288
00:16:56.650 --> 00:17:00.587
for updated metrics
for that app/device pair.


289
00:17:02.923 --> 00:17:06.727
Here is a high-level view
of the receipt structure.


290
00:17:06.760 --> 00:17:10.364
It is a PKCS7 container.


291
00:17:10.397 --> 00:17:13.500
For full details,
see "Assessing Fraud Risk"


292
00:17:13.534 --> 00:17:16.103
in the DeviceCheck Framework
documentation.


293
00:17:17.905 --> 00:17:22.776
App Clips is
an exciting feature in iOS.


294
00:17:22.809 --> 00:17:29.483
We've added App Attest support
to App Clips in iOS 15.


295
00:17:29.516 --> 00:17:33.620
To support a seamless upgrade
from App Clip to full app,


296
00:17:33.654 --> 00:17:37.457
the App Clip and full app
share the same app identity


297
00:17:37.491 --> 00:17:40.327
in the App Attest context.


298
00:17:40.360 --> 00:17:42.029
Make sure to keep this in mind


299
00:17:42.062 --> 00:17:45.599
when you verify the app identity
on your server side.


300
00:17:47.000 --> 00:17:49.870
When App Clips
are manually removed


301
00:17:49.903 --> 00:17:54.575
or expire,
their keys will be invalidated,


302
00:17:54.608 --> 00:17:57.344
just like when your full app
is uninstalled.


303
00:17:58.679 --> 00:18:01.982
OK, that's it for App Clips.


304
00:18:02.049 --> 00:18:07.721
Now, remember these key points
for success with App Attest.


305
00:18:07.754 --> 00:18:10.524
Validate on server,
not on-device.


306
00:18:10.557 --> 00:18:14.361
The app may be modified
to disable your validation code.


307
00:18:15.696 --> 00:18:18.765
Incorporate a one-time
server challenge in your flow


308
00:18:18.799 --> 00:18:21.702
to prevent
network replay attacks.


309
00:18:22.836 --> 00:18:24.705
Handle failure scenarios,


310
00:18:24.738 --> 00:18:27.107
such as isSupported
returning false,


311
00:18:27.140 --> 00:18:29.243
being throttled during ramp up,


312
00:18:29.276 --> 00:18:31.979
or general network failures.


313
00:18:32.579 --> 00:18:36.517
Incorporate failures as signals
in your risk assessment.


314
00:18:37.651 --> 00:18:41.588
App Attest and DeviceCheck
provide the information


315
00:18:41.622 --> 00:18:45.025
that you can integrate into
your overall fraud assessment.


316
00:18:45.726 --> 00:18:50.097
Use DeviceCheck to mitigate
fraud on promotional offerings.


317
00:18:51.365 --> 00:18:54.067
Take advantage
of App Attest to help you


318
00:18:54.101 --> 00:18:56.703
detect modified versions
of your app,


319
00:18:56.737 --> 00:19:00.107
protecting your content
and your user experience.


320
00:19:00.174 --> 00:19:01.742
Thanks for watching!


321
00:19:01.775 --> 00:19:04.077
I'm looking forward
to seeing your apps


322
00:19:04.111 --> 00:19:08.215
protected by App Attest
and DeviceCheck.


323
00:19:08.248 --> 00:19:09.950
Peace!

