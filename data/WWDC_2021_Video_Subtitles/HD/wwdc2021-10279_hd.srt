2
00:00:00.334 --> 00:00:03.337 line:-1
[upbeat music]


3
00:00:03.370 --> 00:00:09.343 line:-1
♪ ♪


4
00:00:09.376 --> 00:00:10.978 line:-1
[Caleb] Hi. My name is Caleb.


5
00:00:11.011 --> 00:00:14.014 line:-2
I'm a software engineer
on the tvOS team.


6
00:00:14.047 --> 00:00:16.383 line:-2
Today, I'm excited to share
some great improvements


7
00:00:16.416 --> 00:00:20.254 line:-2
we've made to sign-ins
in tvOS 15.


8
00:00:20.287 --> 00:00:22.489 line:-1
We want everyone using Apple TV


9
00:00:22.523 --> 00:00:24.525 line:-2
to be able to get
to their content quickly,


10
00:00:24.558 --> 00:00:27.060 line:-2
and with as little friction
as possible.


11
00:00:27.094 --> 00:00:29.630 line:-2
That means the process
of signing in to your apps


12
00:00:29.663 --> 00:00:32.332 line:-1
should be fluid and painless.


13
00:00:32.366 --> 00:00:34.301 line:-2
One of the most common ways
to sign in


14
00:00:34.334 --> 00:00:35.969 line:-1
is by using a password.


15
00:00:36.003 --> 00:00:39.606 line:-2
Users are encouraged to have
strong or unique passwords,


16
00:00:39.640 --> 00:00:41.275 line:-2
but these can be
frustrating to type.


17
00:00:41.308 --> 00:00:43.744 line:-2
In tvOS 15,
we have a great new feature


18
00:00:43.777 --> 00:00:45.946 line:-2
that makes it easier
than ever to perform


19
00:00:45.979 --> 00:00:48.382 line:-2
password-based sign-ins
in your apps.


20
00:00:48.415 --> 00:00:51.685 line:-2
It starts with the new
system sign-in view.


21
00:00:51.718 --> 00:00:54.021 line:-2
This view does a few
really important things.


22
00:00:54.054 --> 00:00:58.692 line:-2
First, it provides a consistent
sign-in experience across tvOS.


23
00:00:58.725 --> 00:01:01.762 line:-2
Second, it tells users
they can use their iPhone


24
00:01:01.795 --> 00:01:04.398 line:-1
or iPad to complete the sign-in.


25
00:01:04.431 --> 00:01:07.868 line:-2
Third, it gives users options
for other sign-in types


26
00:01:07.901 --> 00:01:09.369 line:-1
your app may support.


27
00:01:09.403 --> 00:01:11.171 line:-1
I'll talk more about that later.


28
00:01:11.205 --> 00:01:15.943 line:-2
For now, I wanna focus on using
your iPhone or iPad to sign in.


29
00:01:15.976 --> 00:01:18.345 line:-2
If a user begins
a sign-in in your app,


30
00:01:18.378 --> 00:01:19.947 line:-1
then wakes their iPhone,


31
00:01:19.980 --> 00:01:23.517 line:-2
they'll see a notification
like this from the Apple TV.


32
00:01:23,550 --> 00:01:26,587
When they tap the notification,
iPhone will guide them


33
00:01:26,620 --> 00:01:28,889
through the process
of signing in.


34
00:01:28,922 --> 00:01:32,125
It will suggest a credential
from iCloud Keychain.


35
00:01:32,159 --> 00:01:36,196
And they can use Face ID
to confirm the sign-in.


36
00:01:36.230 --> 00:01:39.533 line:-2
The credential is then
sent back to the Apple TV.


37
00:01:39.566 --> 00:01:41.702 line:-2
Now, the app can
finish the sign-in


38
00:01:41.735 --> 00:01:45.172 line:-2
and take the user
right to their content.


39
00:01:45.205 --> 00:01:46.740 line:-2
I want to take
a moment to point out


40
00:01:46.773 --> 00:01:50.010 line:-2
that this is not
a text-entry experience.


41
00:01:50.043 --> 00:01:52.679 line:-2
It's a first-class
sign-in experience,


42
00:01:52.713 --> 00:01:56.083 line:-2
where both the Apple TV
and the iPhone or iPad


43
00:01:56.116 --> 00:01:59.286 line:-2
cooperate to guide the user
through the sign-in process.


44
00:01:59.319 --> 00:02:03.190 line:-2
Adopting this new sign-in
experience is really easy.


45
00:02:03.223 --> 00:02:06.126 line:-2
There's a high-level API
on all Apple platforms


46
00:02:06.159 --> 00:02:09.496 line:-2
that's designed to help people
sign in to your apps.


47
00:02:09.530 --> 00:02:12.866 line:-2
It's especially powerful
in tvOS 15.


48
00:02:12.900 --> 00:02:16.136 line:-2
With just a little bit of code,
you can take full advantage


49
00:02:16.170 --> 00:02:19.640 line:-2
of the great sign-in experience
I just showed you.


50
00:02:19.673 --> 00:02:22.809 line:-2
I'd love
to walk you through it now.


51
00:02:22.843 --> 00:02:26.914 line:-2
Let's start with configuring
your app's associated domains.


52
00:02:26.947 --> 00:02:29.583 line:-2
Associated domains
establish a secure link


53
00:02:29.616 --> 00:02:32.719 line:-1
between your app and domain.


54
00:02:32.753 --> 00:02:35.989 line:-2
This allows the Apple TV
and the iPhone or iPad


55
00:02:36.023 --> 00:02:37.925 line:-2
to work together
to safely suggest


56
00:02:37.958 --> 00:02:41.762 line:-2
credentials to use
for signing in.


57
00:02:41.795 --> 00:02:45.532 line:-2
First, make sure the Apple
app site association file


58
00:02:45.566 --> 00:02:48.836 line:-2
hosted by your domain
lists your tvOS app's


59
00:02:48.869 --> 00:02:52.206 line:-2
application identifier
inside the web credentials key.


60
00:02:55.175 --> 00:02:58.245 line:-2
Next, add
the Associated Domain capability


61
00:02:58.278 --> 00:03:02.349 line:-1
to your tvOS app in Xcode.


62
00:03:02.382 --> 00:03:04.384 line:-1
And finally, add your domain


63
00:03:04.418 --> 00:03:06.453 line:-2
to the Associated Domains
capability


64
00:03:06.486 --> 00:03:09.723 line:-1
with the web credentials prefix.


65
00:03:09,756 --> 00:03:11,225
To learn more about configuring


66
00:03:11,258 --> 00:03:13,694
web credentials domains
in your apps,


67
00:03:13,727 --> 00:03:16,830
see the "Introducing Password
AutoFill for Apps" video


68
00:03:16,864 --> 00:03:19,666
from WWDC 2017.


69
00:03:19.700 --> 00:03:21.869 line:-2
Next, I'd like to show you
how to request


70
00:03:21.902 --> 00:03:25.472 line:-2
a credential using
AuthenticationServices.


71
00:03:25.506 --> 00:03:27.541 line:-1
Let's take a look at some code.


72
00:03:27.574 --> 00:03:29.243 line:-2
Here we have
the basic ingredients


73
00:03:29.276 --> 00:03:31.778 line:-1
needed to request a credential.


74
00:03:31.812 --> 00:03:34.715 line:-2
If you're already using
the AuthenticationServices API


75
00:03:34.748 --> 00:03:37.017 line:-1
in your iOS or macOS apps,


76
00:03:37.050 --> 00:03:39.253 line:-2
this code should look
very familiar.


77
00:03:39.286 --> 00:03:40.954 line:-2
I'll start by creating
an instance


78
00:03:40.988 --> 00:03:45.158 line:-2
of ASAuthorizationController
with a password request.


79
00:03:45.192 --> 00:03:47.361 line:-2
Something really powerful
about this API


80
00:03:47.394 --> 00:03:48.662 line:-1
is that it lets you specify


81
00:03:48.695 --> 00:03:51.932 line:-2
multiple different kinds
of requests.


82
00:03:51.965 --> 00:03:54.668 line:-2
If your app also supports
Sign in with Apple,


83
00:03:54.701 --> 00:03:56.803 line:-2
you may include
an Apple ID request


84
00:03:56.837 --> 00:03:59.940 line:-2
in the authorization
requests array.


85
00:03:59.973 --> 00:04:02.109 line:-2
When you specify
multiple requests,


86
00:04:02.142 --> 00:04:04.878 line:-2
iPhone and iPad will let
the user decide


87
00:04:04.912 --> 00:04:06.947 line:-2
which type of credential
they would like to use


88
00:04:06.980 --> 00:04:08.782 line:-1
to sign in.


89
00:04:08.815 --> 00:04:10.317 line:-1
Next, I'll set myself


90
00:04:10.350 --> 00:04:13.086 line:-2
as the delegate
of the authorization controller


91
00:04:13.120 --> 00:04:15.956 line:-2
and call performRequests
to start the sign-in.


92
00:04:17.691 --> 00:04:19.993 line:-2
Now, I need to implement
a few methods


93
00:04:20.027 --> 00:04:22.529 line:-2
from ASAuthorization-
ControllerDelegate.


94
00:04:24.398 --> 00:04:25.899 line:-2
When the user has
selected a credential


95
00:04:25.933 --> 00:04:28.502 line:-2
they want to use
on their iPhone or iPad,


96
00:04:28.535 --> 00:04:31.705 line:-2
the system will call
didCompleteWithAuthorization.


97
00:04:33.173 --> 00:04:36.376 line:-2
Now, I can use the user
and password properties


98
00:04:36.410 --> 00:04:40.280 line:-2
on the credential
to finish the sign-in.


99
00:04:40.314 --> 00:04:44.151 line:-2
If the sign-in fails, the system
will call didCompleteWithError.


100
00:04:45.652 --> 00:04:47.487 line:-2
If the user canceled
the sign-in,


101
00:04:47.521 --> 00:04:49.890 line:-2
I'll return from this method
so the app can go back


102
00:04:49.923 --> 00:04:52.159 line:-1
to the main sign-in UI.


103
00:04:52.192 --> 00:04:53.894 line:-2
Otherwise,
I should let the user know


104
00:04:53.927 --> 00:04:57.164 line:-2
something went wrong
and that they should try again.


105
00:04:57.197 --> 00:05:00.300 line:-2
Next, I'd like to show you
how you can customize


106
00:05:00.334 --> 00:05:02.035 line:-1
the system sign-in view.


107
00:05:02.069 --> 00:05:05.072 line:-2
The custom authorization
methods API allows you to show


108
00:05:05.105 --> 00:05:08.108 line:-2
buttons for other sign-in types
your apps may support.


109
00:05:10.077 --> 00:05:13.614 line:-2
The ".other" value provides
a great deal of flexibility.


110
00:05:13.647 --> 00:05:15.816 line:-2
You may use this option
to navigate directly


111
00:05:15.849 --> 00:05:17.384 line:-1
to a manual sign-in flow,


112
00:05:17.417 --> 00:05:20.420 line:-2
like asking for a username
and password.


113
00:05:20.454 --> 00:05:22.923 line:-2
Or you may use it to navigate
to your own UI


114
00:05:22.956 --> 00:05:24.258 line:-1
that allows the user to select


115
00:05:24.291 --> 00:05:27.528 line:-2
a different type of sign-in
to perform.


116
00:05:27.561 --> 00:05:29.363 line:-2
If your app allows users
to sign in


117
00:05:29.396 --> 00:05:32.132 line:-2
using their TV provider account,
you should use


118
00:05:32.165 --> 00:05:35.502 line:-2
the .videoSubscriberAccount
value.


119
00:05:35.536 --> 00:05:37.838 line:-2
And finally,
the .restorePurchase value


120
00:05:37.871 --> 00:05:41.842 line:-2
allows users to sign in
by restoring an in-app purchase.


121
00:05:41.875 --> 00:05:43.243 line:-2
When the user selects
one of these


122
00:05:43.277 --> 00:05:46.380 line:-2
custom authorization methods,
it is up to your app


123
00:05:46.413 --> 00:05:49.049 line:-2
to begin
the requested sign-in flow.


124
00:05:49.082 --> 00:05:52.419 line:-2
Let's take a look
at how this works.


125
00:05:52.452 --> 00:05:55.322 line:-2
First, I'll go back to the
ASAuthorizationController code


126
00:05:55.355 --> 00:05:56.890 line:-1
I showed you earlier.


127
00:05:56.924 --> 00:05:59.493 line:-2
In order to show
custom sign-in options,


128
00:05:59.526 --> 00:06:01.628 line:-2
I'll set
the customAuthorizationMethods


129
00:06:01.662 --> 00:06:04.932 line:-2
property on my
authorization controller.


130
00:06:04.965 --> 00:06:07.134 line:-2
In this example,
I'm using the .other


131
00:06:07.167 --> 00:06:10.737 line:-2
and .restorePurchase values
to display "Sign in Manually"


132
00:06:10.771 --> 00:06:14.508 line:-2
and "Restore Purchase" buttons
in the system sign-in view.


133
00:06:14.541 --> 00:06:15.876 line:-1
You should choose the values


134
00:06:15.909 --> 00:06:17.578 line:-2
that are appropriate
for your app.


135
00:06:19.379 --> 00:06:22.416 line:-2
When the user selects
a custom authorization method,


136
00:06:22.449 --> 00:06:24.918 line:-2
the system will call
didCompleteWithCustomMethod


137
00:06:24.952 --> 00:06:28.555 line:-2
on my authorizationController
delegate.


138
00:06:28.589 --> 00:06:31.825 line:-2
In this method, I can check
the value that was passed in


139
00:06:31.859 --> 00:06:34.528 line:-2
and perform the type of sign-in
that the user requested.


140
00:06:36.563 --> 00:06:38.131 line:-1
Finally, I want to take a moment


141
00:06:38.165 --> 00:06:40.901 line:-2
to talk about
some best practices.


142
00:06:40.934 --> 00:06:43.136 line:-2
The best sign-in experience
on tvOS


143
00:06:43.170 --> 00:06:45.873 line:-2
starts with
a single "Sign In" button.


144
00:06:45.906 --> 00:06:48.442 line:-2
It guides the user
through the sign-in process,


145
00:06:48.475 --> 00:06:52.546 line:-2
offering a limited number
of clear choices.


146
00:06:52.579 --> 00:06:55.048 line:-2
By replacing your existing
sign-in experience


147
00:06:55.082 --> 00:06:57.251 line:-2
with the new
system sign-in view,


148
00:06:57.284 --> 00:06:59.653 line:-2
users will always have
the option to sign in


149
00:06:59.686 --> 00:07:02.322 line:-1
with their iPhone or iPad.


150
00:07:02.356 --> 00:07:05.626 line:-2
And the custom authorization
methods API is a great way


151
00:07:05.659 --> 00:07:09.429 line:-2
for you to offer your users
additional sign-in options.


152
00:07:09.463 --> 00:07:12.299 line:-2
tvOS 15 makes it
easier than ever


153
00:07:12.332 --> 00:07:15.502 line:-2
to build
great sign-in experiences.


154
00:07:15.536 --> 00:07:17.404 line:-2
The system sign-in view
allows users


155
00:07:17.437 --> 00:07:20.774 line:-2
to sign-in
with their iPhone or iPad.


156
00:07:20.807 --> 00:07:23.477 line:-2
And the powerful new
API in AuthenticationServices


157
00:07:23.510 --> 00:07:25.512 line:-2
makes it easy
for you to get started.


158
00:07:27,548 --> 00:07:30,184
For a more in-depth look
at some of the examples I shared


159
00:07:30,217 --> 00:07:32,753
in this presentation,
see the sample code project


160
00:07:32,786 --> 00:07:35,455
for this session
in the developer app.


161
00:07:35,489 --> 00:07:37,624
To learn more about
how the AuthenticationServices


162
00:07:37,658 --> 00:07:40,027
framework can help you build
great sign-in experiences


163
00:07:40,060 --> 00:07:42,196
across all Apple platforms,


164
00:07:42,229 --> 00:07:44,398
see the "What's new
in Authentication" video


165
00:07:44,431 --> 00:07:47,234
from WWDC 2019.


166
00:07:47.267 --> 00:07:49.937 line:-2
Thanks for watching,
and enjoy the conference!


167
00:07:49.970 --> 00:07:52.973 line:-1
[upbeat music]

