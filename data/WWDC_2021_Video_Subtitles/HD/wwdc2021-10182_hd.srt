2
00:00:00.334 --> 00:00:03.337 line:-1
[upbeat music]


3
00:00:03.370 --> 00:00:10.043 line:-1
♪ ♪


4
00:00:10.077 --> 00:00:11.144 line:-1
[Johannes] Hi.


5
00:00:11.178 --> 00:00:14.214 line:-2
I’m Johannes Fortmann from
the Cloud File Providers team,


6
00:00:14.248 --> 00:00:18.185 line:-2
and I’m here to show you
file providers on macOS.


7
00:00:18.218 --> 00:00:20.988 line:-2
If you’re a cloud storage vendor
syncing your users’ files


8
00:00:21.021 --> 00:00:23.790 line:-2
to macOS,
you’re in the right talk.


9
00:00:23.824 --> 00:00:26.593 line:-2
After the introduction,
we’re going to talk about


10
00:00:26.627 --> 00:00:31.398 line:-2
some of the user flows
involved with syncing files.


11
00:00:31.431 --> 00:00:35.269 line:-2
We’ll then run through
one of the flows in Xcode


12
00:00:35.302 --> 00:00:36.970 line:-1
and discuss the order


13
00:00:37.004 --> 00:00:40.874 line:-2
in which you will implement
support for each of them.


14
00:00:40.908 --> 00:00:42.609 line:-1
We’ll have a quick overview


15
00:00:42.643 --> 00:00:45.779 line:-2
of additional optional
integration points


16
00:00:45.812 --> 00:00:48.682 line:-1
and your next steps.


17
00:00:48.715 --> 00:00:53.187 line:-2
First off, let’s talk about what
file providers can do for you.


18
00:00:54.454 --> 00:00:57.157 line:-2
The File Provider framework
allows you to integrate


19
00:00:57.191 --> 00:01:01.595 line:-2
your cloud storage
into the file system on macOS.


20
00:01:01.628 --> 00:01:04.264 line:-2
It uses new
APFS features to allow


21
00:01:04.298 --> 00:01:08.368 line:-2
on-demand downloads
of user files and folders.


22
00:01:08.402 --> 00:01:11.205 line:-2
The API is
entirely in user space.


23
00:01:11.238 --> 00:01:14.308 line:-2
We’re deprecating kernel
extensions on macOS,


24
00:01:14.341 --> 00:01:16.510 line:-2
so this is a good alternative
for you


25
00:01:16.543 --> 00:01:19.646 line:-2
if you were relying on FUSE
or KAUTH


26
00:01:19.680 --> 00:01:23.183 line:-2
to intercept syscalls
or download files on demand.


27
00:01:24.451 --> 00:01:27.187 line:-2
All you have to do
is handle uploads,


28
00:01:27.221 --> 00:01:31.325 line:-2
downloads, and tell us
what changed remotely.


29
00:01:31.358 --> 00:01:33.994 line:-2
The system will tell you
what changed locally


30
00:01:34.027 --> 00:01:36.129 line:-1
and handle all the rest.


31
00:01:36.163 --> 00:01:38.699 line:-2
All of this functionality
is well integrated


32
00:01:38.732 --> 00:01:43.003 line:-2
with the system
and in particular in Finder.


33
00:01:43.036 --> 00:01:45.672 line:-2
Your provider will
show up in the sidebar.


34
00:01:45.706 --> 00:01:49.009 line:-2
File status will be shown
and tracked in Finder,


35
00:01:49.042 --> 00:01:51.912 line:-2
and there are several
customizable integration points


36
00:01:51.945 --> 00:01:53.780 line:-1
with the UI.


37
00:01:53.814 --> 00:01:56.984 line:-1
You implement an app extension


38
00:01:57.017 --> 00:01:59.453 line:-1
that integrates with the system.


39
00:01:59.486 --> 00:02:03.924 line:-2
Its life cycle is driven
by user actions.


40
00:02:03.957 --> 00:02:07.628 line:-2
Initially, you create
a domain which represents


41
00:02:07.661 --> 00:02:11.999 line:-2
the file tree that the user can
access in your cloud storage.


42
00:02:12.032 --> 00:02:14.034 line:-2
The system will
expose that domain


43
00:02:14.067 --> 00:02:17.804 line:-2
in the Finder sidebar
and create a root directory


44
00:02:17.838 --> 00:02:21.041 line:-2
for the domain
in the file system.


45
00:02:21.074 --> 00:02:24.711 line:-2
At this point,
no actual data is on the device,


46
00:02:24.745 --> 00:02:29.149 line:-2
but the user can already
start interacting with the root.


47
00:02:29.183 --> 00:02:31.051 line:-1
How does this work?


48
00:02:31.084 --> 00:02:34.588 line:-2
The root is what we call
a dataless directory.


49
00:02:34.621 --> 00:02:37.457 line:-2
It’s a new kind
of object in APFS,


50
00:02:37.491 --> 00:02:42.229 line:-2
and there are APIs to recognize
them and interact with them.


51
00:02:42.262 --> 00:02:44.965 line:-2
But more importantly,
dataless objects are


52
00:02:44.998 --> 00:02:49.169 line:-2
fully transparent to processes
who happen upon them unprepared.


53
00:02:49.203 --> 00:02:51.505 line:-1
Reads trigger downloads,


54
00:02:51.538 --> 00:02:53.674 line:-2
and files lose
their dataless property


55
00:02:53.707 --> 00:02:56.977 line:-2
before the reads are
allowed to resume.


56
00:02:57.010 --> 00:02:59.947 line:-2
In this presentation,
we will see how the File Provider


57
00:02:59.980 --> 00:03:03.483 line:-2
framework allows you
to implement callbacks


58
00:03:03.517 --> 00:03:07.421 line:-2
that get called when processes
read dataless files.


59
00:03:08.322 --> 00:03:10.357 line:-2
Let’s have a look
at some user flows


60
00:03:10.390 --> 00:03:12.860 line:-1
to get sync up and running.


61
00:03:12.893 --> 00:03:15.996 line:-2
We’re going to look
at four key flows that cover


62
00:03:16.029 --> 00:03:19.099 line:-1
both sync down and sync up.


63
00:03:19.132 --> 00:03:21.969 line:-2
In each flow,
you’ll see that the system


64
00:03:22.002 --> 00:03:25.672 line:-2
calls your extension
whenever it needs new data.


65
00:03:27.074 --> 00:03:30.210 line:-2
We’ll show you that you can
talk to your cloud server


66
00:03:30.244 --> 00:03:32.613 line:-1
to pull that data and, finally,


67
00:03:32.646 --> 00:03:36.250 line:-2
call a completion handler
to reply.


68
00:03:36.283 --> 00:03:39.586 line:-2
First, we’re going to look
at what happens


69
00:03:39.620 --> 00:03:41.955 line:-1
when a dataless file is read.


70
00:03:44.057 --> 00:03:46.193 line:-2
When the kernel detects
a read access


71
00:03:46.226 --> 00:03:48.128 line:-1
to a dataless file,


72
00:03:48.161 --> 00:03:50.297 line:-1
that syscall is paused


73
00:03:50.330 --> 00:03:52.165 line:-1
while your extension is called


74
00:03:52.199 --> 00:03:55.469 line:-2
to fetch the contents
of the file.


75
00:03:55.502 --> 00:03:58.972 line:-2
Your extension’s
fetchContents method is called.


76
00:03:59.006 --> 00:04:02.876 line:-2
Typically, you will implement it
to perform a download.


77
00:04:02.910 --> 00:04:06.947 line:-2
When the download completes,
it calls a completion handler.


78
00:04:06.980 --> 00:04:08.815 line:-2
The contents
of the file are handed


79
00:04:08.849 --> 00:04:12.586 line:-2
to the system which fills in
the formerly dataless file


80
00:04:12.619 --> 00:04:15.923 line:-2
without invalidating
the open file descriptor.


81
00:04:15.956 --> 00:04:19.526 line:-2
The system then unpauses
the read access.


82
00:04:19.560 --> 00:04:22.229 line:-2
Now that the file
is no longer dataless,


83
00:04:22.262 --> 00:04:26.300 line:-2
subsequent reads won’t
have to involve your extension.


84
00:04:26.333 --> 00:04:29.937 line:-2
Enumerating a directory
works very similarly.


85
00:04:29.970 --> 00:04:33.941 line:-2
The kernel detects
a readdir call and pauses it.


86
00:04:33.974 --> 00:04:36.410 line:-2
It calls
your extension to enumerate


87
00:04:36.443 --> 00:04:38.846 line:-1
the items in that directory.


88
00:04:38.879 --> 00:04:42.549 line:-2
You fetch the metadata for these
items from your server.


89
00:04:42,583 --> 00:04:45,853
And you reply
with a number of items.


90
00:04:45,886 --> 00:04:48,255
The enumeration is paginated.


91
00:04:48,288 --> 00:04:51,124
You can return less
than the full set of items,


92
00:04:51,158 --> 00:04:54,061
and the system will
pick up enumerating


93
00:04:54,094 --> 00:04:56,496
from where it left off.


94
00:04:56,530 --> 00:04:59,800
Once all pages
have been enumerated,


95
00:04:59,833 --> 00:05:03,237
the system will allow
the original call to go through.


96
00:05:03,270 --> 00:05:05,138
Like in the file case,


97
00:05:05,172 --> 00:05:08,175
once the directory
has been enumerated,


98
00:05:08,208 --> 00:05:11,078
subsequent readdir calls
will use the contents


99
00:05:11,111 --> 00:05:14,615
from disk and not have
to involve your extension.


100
00:05:16.917 --> 00:05:20.187 line:-2
But what if those contents
change remotely?


101
00:05:20.220 --> 00:05:24.725 line:-2
Well, you will have to inform
the system of the remote change.


102
00:05:24.758 --> 00:05:27.427 line:-1
Let’s look at how that works.


103
00:05:27.461 --> 00:05:29.096 line:-1
If there’s a remote change,


104
00:05:29.129 --> 00:05:34.134 line:-2
your server can send
a push notification to the Mac.


105
00:05:34.168 --> 00:05:36.670 line:-2
In response
to that push notification,


106
00:05:36.703 --> 00:05:38.472 line:-1
you signal the system


107
00:05:38.505 --> 00:05:41.508 line:-2
that there are changes
that need to be enumerated


108
00:05:41.542 --> 00:05:45.045 line:-2
from a special enumerator,
the .workingSet.


109
00:05:45.078 --> 00:05:47.347 line:-2
The system will turn around
and enumerate


110
00:05:47.381 --> 00:05:51.785 line:-2
the items that have changed
in the .workingSet.


111
00:05:51.818 --> 00:05:54.888 line:-2
A continuation token
called the syncAnchor


112
00:05:54.922 --> 00:05:58.525 line:-2
is used to enumerate
only the new changes.


113
00:05:58.559 --> 00:06:01.395 line:-2
This token is defined
by your extension.


114
00:06:01.428 --> 00:06:03.197 line:-2
The system keeps track
of the syncAnchor


115
00:06:03.230 --> 00:06:05.065 line:-1
it last enumerated to.


116
00:06:05.098 --> 00:06:06.567 line:-1
It will call your enumerator


117
00:06:06.600 --> 00:06:09.937 line:-2
with the enumerateChanges(from
syncAnchor:) method.


118
00:06:09.970 --> 00:06:13.607 line:-2
In response,
you return changed items,


119
00:06:13,640 --> 00:06:16,743
and once you’re done,
give us a new syncAnchor


120
00:06:16,777 --> 00:06:19,146
that we can
use next time around.


121
00:06:19,179 --> 00:06:20,714
The system
will asynchronously go


122
00:06:20,747 --> 00:06:23,517
and update
the user-visible files.


123
00:06:23,550 --> 00:06:26,653
We use an APFS
compare-and-swap feature


124
00:06:26,687 --> 00:06:29,323
which makes sure
that local changes aren’t lost


125
00:06:29,356 --> 00:06:30,991
in the process.


126
00:06:31,024 --> 00:06:33,727
Furthermore,
the system integrates


127
00:06:33,760 --> 00:06:35,229
with file coordination


128
00:06:35,262 --> 00:06:37,764
and other advisory
locking mechanisms


129
00:06:37,798 --> 00:06:39,967
to coordinate with applications.


130
00:06:41.802 --> 00:06:45.205 line:-2
With these three mechanisms,
we are able to sync files


131
00:06:45.239 --> 00:06:47.875 line:-2
from the cloud
and keep them in sync


132
00:06:47.908 --> 00:06:50.177 line:-1
in case of remote changes.


133
00:06:50.210 --> 00:06:54.815 line:-2
The last flow deals with syncing
up local changes to the cloud.


134
00:06:54.848 --> 00:06:58.252 line:-2
The system detects
when local items have changed


135
00:06:58.285 --> 00:07:02.055 line:-2
and calls a modifyItem method
on your extension,


136
00:07:02.089 --> 00:07:06.493 line:-2
passing in the exact set
of fields that have changed.


137
00:07:06.527 --> 00:07:09.696 line:-2
It aggregates low-level events
into events


138
00:07:09.730 --> 00:07:11.965 line:-1
that are meaningful for sync.


139
00:07:11.999 --> 00:07:16.069 line:-2
For example, the kernel detects
safe saves and remaps


140
00:07:16.103 --> 00:07:20.607 line:-2
your item identifiers to the new
file IDs transparently.


141
00:07:20.641 --> 00:07:24.811 line:-2
The system will also zip package
files for you if you request


142
00:07:24.845 --> 00:07:27.714 line:-2
and present you with consistent
package-level changes.


143
00:07:29.349 --> 00:07:31.919 line:-2
In response
to the modifyItem call,


144
00:07:31.952 --> 00:07:35.622 line:-2
you will update the state
of the item server-side.


145
00:07:35.656 --> 00:07:38.325 line:-2
If the contents
of the file have changed,


146
00:07:38.358 --> 00:07:41.828 line:-2
the system will hand you a clone
of the changed file so you can


147
00:07:41.862 --> 00:07:46.099 line:-2
upload a consistent version even
in the event of further changes.


148
00:07:47.901 --> 00:07:51.104 line:-2
When done,
you call a completion handler.


149
00:07:51.138 --> 00:07:54.041 line:-2
The completion handler is used
to update the version identifier


150
00:07:54.074 --> 00:07:56.243 line:-2
of the item
and confirms delivery


151
00:07:56.276 --> 00:07:59.546 line:-1
of the change to your extension.


152
00:07:59.580 --> 00:08:02.249 line:-2
The completion handler
also takes the final state


153
00:08:02.282 --> 00:08:04.618 line:-1
of the item as a parameter.


154
00:08:04.651 --> 00:08:08.355 line:-2
Updating an item in the cloud
may change its state,


155
00:08:08.388 --> 00:08:11.358 line:-2
for example, if it conflicts
with a remote change.


156
00:08:11.391 --> 00:08:14.094 line:-2
Since you pass
the final state back,


157
00:08:14.127 --> 00:08:16.230 line:-2
the system is able
to update the local state


158
00:08:16.263 --> 00:08:19.266 line:-2
of the item to match
the truth in the cloud.


159
00:08:21.101 --> 00:08:24.771 line:-1
There is a fifth flow: eviction.


160
00:08:24.805 --> 00:08:27.875 line:-2
The system will evict
local files automatically


161
00:08:27.908 --> 00:08:30.811 line:-2
and without involving
your file provider extension


162
00:08:30.844 --> 00:08:34.748 line:-2
when there is an urgent need
for disk space.


163
00:08:34.781 --> 00:08:36.717 line:-1
That might happen, for example,


164
00:08:36.750 --> 00:08:38.919 line:-2
when the user is
recording a video


165
00:08:38.952 --> 00:08:41.221 line:-2
or downloading
a software update.


166
00:08:41.255 --> 00:08:43.457 line:-2
The system will evict
the minimum set


167
00:08:43.490 --> 00:08:47.060 line:-2
of least recently used files
necessary to free up


168
00:08:47.094 --> 00:08:51.398 line:-2
the disk space required
to write those new files.


169
00:08:51.431 --> 00:08:53.967 line:-1
Let’s review the transitions.


170
00:08:54,001 --> 00:08:57,905
Eviction turns a local file
into a dataless file,


171
00:08:57,938 --> 00:09:02,376
and download turns a dataless
file into a local file.


172
00:09:02,409 --> 00:09:06,580
Files can start dataless
if they are created remotely


173
00:09:06,613 --> 00:09:09,850
or not
if they are created locally.


174
00:09:09,883 --> 00:09:12,586
But not all files
can be evicted.


175
00:09:12,619 --> 00:09:14,588
The system will only
evict a file


176
00:09:14,621 --> 00:09:16,456
that you report as uploaded


177
00:09:16,490 --> 00:09:19,226
so that it can be
downloaded again.


178
00:09:19,259 --> 00:09:22,196
So there really are
two sorts of local files:


179
00:09:22,229 --> 00:09:25,866
uploaded and non-uploaded files.


180
00:09:25,899 --> 00:09:28,969
After a local edit,
the new version of the file


181
00:09:29,002 --> 00:09:32,773
needs to be uploaded, so we’re
back in a non-evictable state.


182
00:09:33.874 --> 00:09:35.976 line:-1
In this presentation so far,


183
00:09:36.009 --> 00:09:38.278 line:-2
we have seen how your file
provider extension is invoked


184
00:09:38.312 --> 00:09:41.515 line:-2
by the system to download files
upon access


185
00:09:41.548 --> 00:09:44.818 line:-2
and to upload files
after local edits.


186
00:09:44.852 --> 00:09:45.986 line:-1
While you’re not involved


187
00:09:46.019 --> 00:09:48.388 line:-2
in disk-pressure
triggered eviction,


188
00:09:48.422 --> 00:09:50.257 line:-1
there are methods to trigger


189
00:09:50.290 --> 00:09:52.860 line:-2
or prevent eviction
from your extension.


190
00:09:54.494 --> 00:09:56.163 line:-1
This was a lot of theory.


191
00:09:56.196 --> 00:09:58.432 line:-2
Let’s have a look at one
of the flows in practice.


192
00:10:00.634 --> 00:10:03.770 line:-2
We’ve written an app that runs
a small local file server


193
00:10:03.804 --> 00:10:05.672 line:-2
and embeds
a file provider extension


194
00:10:05.706 --> 00:10:08.175 line:-2
that operates
against that server.


195
00:10:08.208 --> 00:10:10.677 line:-1
It’s called FruitBasket.


196
00:10:10.711 --> 00:10:12.846 line:-2
I’ve already logged in
to that server,


197
00:10:12.880 --> 00:10:16.183 line:-2
so there’s an entry for the root
folder here in the sidebar.


198
00:10:16.216 --> 00:10:18.886 line:-2
I’ve also selected the root
folder which caused the system


199
00:10:18.919 --> 00:10:22.990 line:-2
to make dataless entries
for the items in that folder.


200
00:10:23.023 --> 00:10:25.158 line:-2
You can tell
that the items are dataless


201
00:10:25.192 --> 00:10:28.529 line:-2
from the cloud download icon
next to the file name.


202
00:10:31.598 --> 00:10:33.534 line:-2
We’re going to use
‘cat’ on the command line


203
00:10:33.567 --> 00:10:35.469 line:-1
to read a file.


204
00:10:35.502 --> 00:10:37.004 line:-1
Since the file is dataless,


205
00:10:37.037 --> 00:10:40.240 line:-2
this will cause a content fetch
in our extension.


206
00:10:40.274 --> 00:10:42.910 line:-2
I’ve already attached
to the extension in Xcode


207
00:10:42.943 --> 00:10:46.013 line:-2
and set a breakpoint
to intercept this content fetch.


208
00:10:52.486 --> 00:10:55.989 line:-2
‘cat’ is running,
and our breakpoint has hit.


209
00:10:56.023 --> 00:10:57.357 line:-2
Since we are blocking
the completion


210
00:10:57.391 --> 00:10:58.859 line:-1
of the content fetch,


211
00:10:58.892 --> 00:11:02.629 line:-2
the read in our Terminal window
is also blocked.


212
00:11:02.663 --> 00:11:06.066 line:-2
Note how in the Finder window,
the cloud icon has been replaced


213
00:11:06.099 --> 00:11:09.136 line:-1
by a progress indicator.


214
00:11:09.169 --> 00:11:13.340 line:-2
The system has a consistent view
of the download status.


215
00:11:13.373 --> 00:11:15.442 line:-2
Of course,
since we are actually blocked


216
00:11:15.475 --> 00:11:18.245 line:-2
in the debugger
rather than busy downloading,


217
00:11:18.278 --> 00:11:20.013 line:-1
the progress isn’t updating.


218
00:11:21.915 --> 00:11:23.483 line:-1
Let’s continue.


219
00:11:23.517 --> 00:11:24.751 line:-1
I’ve set a second breakpoint


220
00:11:24.785 --> 00:11:27.020 line:-2
just before we call
the completion handler.


221
00:11:30.891 --> 00:11:33.160 line:-2
At this time,
our provider has downloaded


222
00:11:33.193 --> 00:11:36.864 line:-2
the contents of the file
to a local URL on disk.


223
00:11:36.897 --> 00:11:38.398 line:-2
Once we call
the completion handler,


224
00:11:38.432 --> 00:11:39.967 line:-2
the system will swap out
the contents


225
00:11:40.000 --> 00:11:44.137 line:-2
of the user-visible file
with what we’ve downloaded.


226
00:11:44.171 --> 00:11:47.407 line:-2
Let’s unblock the system
by continuing in Xcode.


227
00:11:47.441 --> 00:11:51.812 line:-2
The status in Finder updates
to show the file as being local,


228
00:11:51.845 --> 00:11:55.115 line:-2
and the read that the cat
process was blocked on succeeds.


229
00:11:58.752 --> 00:12:00.587 line:-2
I’ve still got
the breakpoints set,


230
00:12:00.621 --> 00:12:02.456 line:-1
but now that the file is local,


231
00:12:02.489 --> 00:12:05.759 line:-2
I can run ‘cat’ again
without hitting the breakpoint.


232
00:12:05.792 --> 00:12:08.595 line:-2
Those reads are going
against a regular local file


233
00:12:08.629 --> 00:12:10.631 line:-1
and don’t involve our extension.


234
00:12:15.702 --> 00:12:17.704 line:-2
Of course,
this is just a small part


235
00:12:17.738 --> 00:12:20.974 line:-2
of the feature set
of our sample file provider.


236
00:12:21.008 --> 00:12:23.577 line:-2
We’ve covered the full
feature set of the API,


237
00:12:23.610 --> 00:12:26.780 line:-2
and we are publishing the source
code as part of this session.


238
00:12:26.813 --> 00:12:28.982 line:-2
Let’s talk about how
you can approach implementing


239
00:12:29.016 --> 00:12:30.984 line:-2
the flows
that we’ve talked about.


240
00:12:31.018 --> 00:12:32.619 line:-2
First of all,
we’re going to want


241
00:12:32.653 --> 00:12:35.522 line:-2
to tell the system
that we’re ready to sync.


242
00:12:35.556 --> 00:12:39.693 line:-2
This will make an entry show up
in the sidebar in Finder.


243
00:12:39.726 --> 00:12:43.096 line:-2
We call these entries domains,
and they usually correspond


244
00:12:43.130 --> 00:12:46.433 line:-2
to a login session
on your cloud server.


245
00:12:46.466 --> 00:12:48.635 line:-2
Each domain
has a unique identifier,


246
00:12:48.669 --> 00:12:51.538 line:-2
and to make it show up,
you create a new instance


247
00:12:51.572 --> 00:12:54.575 line:-2
and add it
via the manager object.


248
00:12:54.608 --> 00:12:56.643 line:-1
You can also remove a domain.


249
00:12:56.677 --> 00:12:59.780 line:-2
You’d usually do this
when the user logs out,


250
00:12:59.813 --> 00:13:01.381 line:-1
but it’s also going to be useful


251
00:13:01.415 --> 00:13:05.419 line:-2
during your initial
development and testing.


252
00:13:05.452 --> 00:13:07.788 line:-2
With the domain
showing up in Finder,


253
00:13:07.821 --> 00:13:10.591 line:-2
the system will request
enumeration of items


254
00:13:10.624 --> 00:13:14.061 line:-2
as soon as you navigate
to the entry.


255
00:13:14.094 --> 00:13:16.463 line:-1
So let’s implement that next.


256
00:13:16.496 --> 00:13:20.567 line:-2
Our first step here
is to implement an item class.


257
00:13:20.601 --> 00:13:23.470 line:-2
Its instances represent
the individual entries


258
00:13:23.504 --> 00:13:26.073 line:-1
that we’re going to enumerate.


259
00:13:26.106 --> 00:13:30.077 line:-2
Then we implement an enumerator
that calls the system


260
00:13:30.110 --> 00:13:33.614 line:-2
with our items
when the system requests it.


261
00:13:33.647 --> 00:13:36.517 line:-2
At this point,
we can look at directories


262
00:13:36.550 --> 00:13:39.152 line:-2
by navigating
to our sidebar entry.


263
00:13:39.186 --> 00:13:41.822 line:-2
Of course, all the files
in those directories


264
00:13:41.855 --> 00:13:43.790 line:-1
will be dataless.


265
00:13:43.824 --> 00:13:45.225 line:-2
Let’s change
that by implementing


266
00:13:45.259 --> 00:13:47.060 line:-1
content fetch.


267
00:13:47.094 --> 00:13:49.563 line:-2
The fetchContents method
is called by the system


268
00:13:49.596 --> 00:13:52.432 line:-2
when we open
one of the dataless files.


269
00:13:52.466 --> 00:13:56.904 line:-2
Our job is to download the file
contents to a location on disk,


270
00:13:56.937 --> 00:14:00.841 line:-2
then call the completion handler
with that location’s URL.


271
00:14:00.874 --> 00:14:04.778 line:-2
The system will use the contents
to fill the dataless file


272
00:14:04.811 --> 00:14:07.314 line:-1
and then clean them up for us.


273
00:14:07.347 --> 00:14:10.250 line:-2
To allow our directory structure
to stay in sync,


274
00:14:10.284 --> 00:14:13.053 line:-2
we’ll implement another type
of enumerator.


275
00:14:13.086 --> 00:14:15.355 line:-1
This one syncs remote changes.


276
00:14:15.389 --> 00:14:18.425 line:-2
The system calls the
currentSyncAnchor method first


277
00:14:18.458 --> 00:14:20.460 line:-1
to get a sync anchor.


278
00:14:20.494 --> 00:14:23.096 line:-2
You return a data object
that describes


279
00:14:23.130 --> 00:14:25.399 line:-2
a change cursor
for your database.


280
00:14:25.432 --> 00:14:28.302 line:-2
Whenever you signal
that something has changed,


281
00:14:28.335 --> 00:14:30.037 line:-1
the system will ask for changes


282
00:14:30.070 --> 00:14:32.606 line:-2
since the last anchor
you provided.


283
00:14:32.639 --> 00:14:37.211 line:-2
You can then return the changes
and finally a new anchor.


284
00:14:37.244 --> 00:14:41.648 line:-2
The last step is to allow
sync up of changes.


285
00:14:41.682 --> 00:14:44.885 line:-2
If the system detects
changes to the local files,


286
00:14:44.918 --> 00:14:47.921 line:-2
it will call one
of three methods to create,


287
00:14:47.955 --> 00:14:51.692 line:-2
modify, or delete
an existing item.


288
00:14:51.725 --> 00:14:54.928 line:-2
We’ll have a quick look
at the create method.


289
00:14:54.962 --> 00:15:00.133 line:-2
The system hands you the new
item that it asks you to create.


290
00:15:00.167 --> 00:15:02.636 line:-2
This is a system item,
although it follows


291
00:15:02.669 --> 00:15:06.273 line:-2
the same protocol
as your own items.


292
00:15:06.306 --> 00:15:08.775 line:-2
The system will also
hand you a set of fields


293
00:15:08.809 --> 00:15:11.445 line:-2
that are of interest
on the item.


294
00:15:11.478 --> 00:15:13.914 line:-2
For example,
the item may or may not


295
00:15:13.947 --> 00:15:16.617 line:-2
have extended attributes
attached to it,


296
00:15:16.650 --> 00:15:20.187 line:-2
and there are fields
to describe that.


297
00:15:20.220 --> 00:15:23.056 line:-2
If the content field is set,
the system will pass you


298
00:15:23.090 --> 00:15:26.426 line:-1
a file URL with the contents.


299
00:15:26.460 --> 00:15:28.929 line:-2
Items that describe folders
or symlinks


300
00:15:28.962 --> 00:15:31.632 line:-1
will not have contents.


301
00:15:31.665 --> 00:15:35.102 line:-2
Your job is to upload
the new local item’s data


302
00:15:35.135 --> 00:15:38.906 line:-2
to the server and then call
the completion handler


303
00:15:38.939 --> 00:15:40.941 line:-1
with the resulting remote item.


304
00:15:44.344 --> 00:15:46.280 line:-1
And that’s it.


305
00:15:46.313 --> 00:15:48.348 line:-2
At this point,
you have a functional


306
00:15:48.382 --> 00:15:52.653 line:-2
file provider on macOS
providing files on demand,


307
00:15:52.686 --> 00:15:55.589 line:-2
propagating local changes
to the cloud


308
00:15:55.622 --> 00:15:59.259 line:-1
and remote changes to the Mac.


309
00:15:59.293 --> 00:16:02.529 line:-2
There are a lot
of additional optional APIs


310
00:16:02.563 --> 00:16:04.198 line:-1
in the File Provider framework,


311
00:16:04.231 --> 00:16:07.201 line:-2
which allow finer integration
with the system.


312
00:16:07.234 --> 00:16:08.569 line:-1
Let’s have a have a look.


313
00:16:10.838 --> 00:16:14.141 line:-2
Icon decorations can
be used to visually decorate


314
00:16:14.174 --> 00:16:16.143 line:-1
items in Finder.


315
00:16:16.176 --> 00:16:18.045 line:-1
You can badge a file icon,


316
00:16:18.078 --> 00:16:22.449 line:-2
emboss a folder,
or indicate sharing status.


317
00:16:22.482 --> 00:16:25.252 line:-2
You provide custom artwork
for the decorations


318
00:16:25,285 --> 00:16:27,955
via a UTType
declared in your app.


319
00:16:29,957 --> 00:16:33,260
Contextual menu actions
allow the user to execute


320
00:16:33.293 --> 00:16:38.699 line:-2
custom actions on your files
via the contextual menu.


321
00:16:38.732 --> 00:16:42.769 line:-2
There are UI
and non-UI variants.


322
00:16:42.803 --> 00:16:45.639 line:-2
You can define which files
these actions apply to


323
00:16:45.672 --> 00:16:50.077 line:-2
with NSPredicates declared
in your extension’s Info.plist.


324
00:16:52.279 --> 00:16:55.282 line:-2
Pre-flight alerts allow you
to warn the user


325
00:16:55.315 --> 00:16:57.284 line:-1
before they take an action


326
00:16:57.317 --> 00:17:00.320 line:-2
which may have
unintended consequences.


327
00:17:00,354 --> 00:17:03,690
The alert UI and the criteria
to activate the alert


328
00:17:03,724 --> 00:17:06,426
are configured
in the Info.plist as well.


329
00:17:08.028 --> 00:17:10.063 line:-1
So what are your next steps?


330
00:17:10.097 --> 00:17:12.499 line:-2
Well, first of all,
you can download


331
00:17:12.533 --> 00:17:14.334 line:-1
the session’s sample code.


332
00:17:14.368 --> 00:17:15.702 line:-1
It’s very comprehensive,


333
00:17:15.736 --> 00:17:19.039 line:-2
and it’ll give you
a lot of pointers.


334
00:17:19.072 --> 00:17:23.510 line:-2
Add a target to your existing
app for the new extension.


335
00:17:23.544 --> 00:17:27.648 line:-2
There is an Xcode template
that will help you get going.


336
00:17:27.681 --> 00:17:30.984 line:-2
From there,
all you have to do is implement


337
00:17:31.018 --> 00:17:33.954 line:-2
the method stubs
in the order we’ve discussed,


338
00:17:33.987 --> 00:17:37.858 line:-2
and you’ll be up and running
in no time.


339
00:17:37.891 --> 00:17:39.793 line:-2
Thank you for watching
this session.


340
00:17:39.826 --> 00:17:40.827 line:-1
We look forward to seeing


341
00:17:40.861 --> 00:17:43.230 line:-2
your file provider
extensions on macOS.

