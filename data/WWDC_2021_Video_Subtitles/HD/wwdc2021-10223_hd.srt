2
00:00:00,334 --> 00:00:02,870 line:-1
[MAC STARTUP CHIME]


3
00:00:02,870 --> 00:00:05,839 line:-1
â™ª Bass music playing â™ª


4
00:00:05.839 --> 00:00:07.908 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,908 --> 00:00:09,176 position:90% size:2% line:0
â™ª


6
00:00:09,176 --> 00:00:11,545 line:-1
Daniel Sykes-Turner: Hi,
my name is Daniel Sykes-Turner


7
00:00:11,545 --> 00:00:14,548 line:-1
and I'm an accessibility
engineer.


8
00:00:14.548 --> 00:00:17.217 line:-1 position:50%
In this talk,
my colleague Virata and I


9
00:00:17,217 --> 00:00:18,252 line:-1
are going to go over


10
00:00:18,252 --> 00:00:20,954 line:-1
some of the accessibility
features on watchOS


11
00:00:20.954 --> 00:00:24.558 line:-1 position:50%
and how you as a developer
can build your watch apps


12
00:00:24,558 --> 00:00:27,661 line:-1
to support the people
who use these features.


13
00:00:27,661 --> 00:00:28,695 line:-1
In today's talk,


14
00:00:28,695 --> 00:00:33,166 line:-1
you'll first be introduced
to accessibility on watchOS.


15
00:00:33,166 --> 00:00:36,236 line:-1
Then I'll dive into
the accessibility APIs


16
00:00:36.236 --> 00:00:38.472 line:-1 position:50%
and show you
what you can do to support


17
00:00:38,472 --> 00:00:41,875 line:-1
different types
of visual accessibility.


18
00:00:41,875 --> 00:00:44,411 line:-1
And finally,
Virata will walk you through


19
00:00:44,411 --> 00:00:46,747 line:-1
how motor accessibility
works on the watch


20
00:00:46,747 --> 00:00:50,150 line:-1
and what you can do
to support it.


21
00:00:50,150 --> 00:00:54,454 line:-1
Let's get started with
accessibility on watchOS.


22
00:00:54,454 --> 00:00:57,257 line:-1
Accessibility is about people
using their devices


23
00:00:57.257 --> 00:00:59.660 line:-1 position:50%
in the way that's best for them.


24
00:00:59.660 --> 00:01:02.996 line:-1 position:50%
And that means, to give your app
the best user experience,


25
00:01:02,996 --> 00:01:07,000 line:-1
accessibility
must be considered.


26
00:01:07,000 --> 00:01:07,968 line:-1
On the Apple Watch,


27
00:01:07.968 --> 00:01:10.704 line:-1 position:50%
we have a large suite
of accessibility features


28
00:01:10.704 --> 00:01:13.073 line:-1 position:50%
that can make
using your app easier.


29
00:01:13,073 --> 00:01:16,777 line:-1
For example, assistive
technologies such as VoiceOver


30
00:01:16,777 --> 00:01:18,578 line:-1
allow people
with visual impairments


31
00:01:18.578 --> 00:01:20.514 line:-1 position:50%
full use of their Apple Watch


32
00:01:20.514 --> 00:01:24.484 line:-1 position:50%
by navigating a screen using
a series of gestures and taps


33
00:01:24,484 --> 00:01:27,821 line:-1
while content
is read back to them.


34
00:01:27,821 --> 00:01:31,525 line:-1
And brand new on watchOS
this year is AssistiveTouch,


35
00:01:31,525 --> 00:01:32,793 line:-1
which has been reimagined


36
00:01:32,793 --> 00:01:34,962 line:-1
specifically
for the Apple Watch.


37
00:01:34.962 --> 00:01:38.031 line:-1 position:50%
AssistiveTouch allows
those with motor impairments


38
00:01:38.031 --> 00:01:39.299 line:-1 position:50%
to use their Apple Watch


39
00:01:39,299 --> 00:01:42,235 line:-1
without the need
to touch the screen at all.


40
00:01:42.235 --> 00:01:44.304 line:-1 position:50%
Virata will show you
how this works later on


41
00:01:44,304 --> 00:01:47,307 line:-1
and what you can do
to support it.


42
00:01:47,307 --> 00:01:50,477 line:-1
watchOS also offers
several display accommodations


43
00:01:50.477 --> 00:01:54.114 line:-1 position:50%
such as Reduce Motion,
Bold Text,


44
00:01:54.114 --> 00:01:59.486 line:-1 position:50%
and also new this year,
large accessibility text sizes.


45
00:01:59.486 --> 00:02:03.857 line:-1 position:50%
Let's talk about visual
accessibility on watchOS.


46
00:02:03,857 --> 00:02:07,227 line:-1
Supporting accessibility
with the right APIs will ensure


47
00:02:07.227 --> 00:02:10.097 line:-1 position:50%
that VoiceOver functions
correctly for your users,


48
00:02:10,097 --> 00:02:11,965 line:-1
regardless of whether
your app is written


49
00:02:11.965 --> 00:02:14.701 line:-1 position:50%
with WatchKit or SwiftUI.


50
00:02:14,701 --> 00:02:17,938 line:-1
This talk will focus
on accessibility for SwiftUI.


51
00:02:17,938 --> 00:02:20,640 line:-1
However, know that all
the principles you learn here


52
00:02:20.640 --> 00:02:23.677 line:-1 position:50%
will apply to WatchKit as well.


53
00:02:23.677 --> 00:02:26.480 line:-1 position:50%
And when making your apps
accessible,


54
00:02:26.480 --> 00:02:29.583 line:-1 position:50%
don't forget about complications
and notifications.


55
00:02:29,583 --> 00:02:32,352 line:-1
Complications
and dynamic notifications


56
00:02:32,352 --> 00:02:35,122 line:-1
also need to support
our assistive technologies,


57
00:02:35,122 --> 00:02:36,990 line:-1
as they act as another path


58
00:02:36.990 --> 00:02:39.426 line:-1 position:50%
delivering content
from your app.


59
00:02:39,426 --> 00:02:42,029 line:-1
Now, isn't the best way
to learn something new


60
00:02:42.029 --> 00:02:43.663 line:-1 position:50%
to build an app?


61
00:02:43.663 --> 00:02:45.832 line:-1 position:50%
Luckily I've become
quite invested


62
00:02:45.832 --> 00:02:49.436 line:-1 position:50%
in growing plants at home
so I decided to go ahead


63
00:02:49.436 --> 00:02:52.839 line:-1 position:50%
and build an app
to help take care of them.


64
00:02:52.839 --> 00:02:56.576 line:-1 position:50%
Now, it's not quite finished,
but on the main screen here


65
00:02:56,576 --> 00:02:58,678 line:-1
I have all the information
on my plants,


66
00:02:58.678 --> 00:03:01.982 line:-1 position:50%
including an upcoming schedule
of plant care tasks:


67
00:03:01,982 --> 00:03:05,085 line:-1
water in five days,
fertilize in seven days,


68
00:03:05.085 --> 00:03:08.789 line:-1 position:50%
and keep in a medium amount
of sunlight.


69
00:03:08,789 --> 00:03:11,391 line:-1
I have a few other plants
in the list here, too.


70
00:03:11.391 --> 00:03:14.995 line:-1 position:50%
Then for each plant, I have
two buttons that I can use


71
00:03:14.995 --> 00:03:18.565 line:-1 position:50%
to log a task such
as when I water or fertilize.


72
00:03:18.565 --> 00:03:21.701 line:-1 position:50%
And by tapping on the cell,
I can adjust the number of days


73
00:03:21,701 --> 00:03:25,138 line:-1
between watering
and fertilizing.


74
00:03:25.138 --> 00:03:27.507 line:-1 position:50%
Since this is
an informative app,


75
00:03:27,507 --> 00:03:30,744 line:-1
each cell contains
a fair amount of text.


76
00:03:30,744 --> 00:03:33,013 line:0
Here I'm showing you
what the app looks like


77
00:03:33,013 --> 00:03:36,516 position:50%
when the system text size
is at its default size;


78
00:03:36,516 --> 00:03:38,819 line:0
it looks pretty good.


79
00:03:38,819 --> 00:03:42,556 line:0
But if I change the system
text size to extra small,


80
00:03:42,556 --> 00:03:44,858 position:50%
as shown on the left,
you'll notice that


81
00:03:44,858 --> 00:03:48,662 line:0
while the buttons
and the task list text resizes,


82
00:03:48,662 --> 00:03:52,332 position:50%
the plant name title
stays the same size.


83
00:03:52,332 --> 00:03:55,502 position:50%
Then when I move up
to accessibility extra large


84
00:03:55,502 --> 00:03:57,904 position:50%
on the right,
the task list text size


85
00:03:57,904 --> 00:04:00,707 line:0
has grown so large
that it has truncated


86
00:04:00,707 --> 00:04:03,710 line:0
and no longer fits all
the information on the screen.


87
00:04:03,710 --> 00:04:06,513 line:0
Let's take a look at how
our app can better support


88
00:04:06,513 --> 00:04:08,782 line:0
Dynamic Type.


89
00:04:08,782 --> 00:04:11,084 line:-1
If I inspect the code
for my PlantView,


90
00:04:11.084 --> 00:04:15.088 line:-1 position:50%
I have a VStack with the title
and other content inside.


91
00:04:15,088 --> 00:04:17,390 line:-1
Notice the font
I've used for my title


92
00:04:17.390 --> 00:04:19.593 line:-1 position:50%
is using a fixed font size.


93
00:04:19.593 --> 00:04:23.864 line:-1 position:50%
That's definitely going to stop
my title from changing size.


94
00:04:23,864 --> 00:04:25,999 line:-1
Rather than using
a fixed font size,


95
00:04:25,999 --> 00:04:29,402 line:-1
I should be using one
of the 11 text styles provided.


96
00:04:29,402 --> 00:04:31,605 line:-1
The text styles on the left
are displayed


97
00:04:31,605 --> 00:04:34,174 line:-1
at the default system text size.


98
00:04:34.174 --> 00:04:37.077 line:-1 position:50%
And when scaled up
to the largest text size,


99
00:04:37,077 --> 00:04:40,347 line:-1
they grow to the size
of the text styles on the right.


100
00:04:40.347 --> 00:04:42.115 line:-1 position:50%
By using a text style,


101
00:04:42.115 --> 00:04:44.751 line:-1 position:50%
the system will automatically
adjust the font size


102
00:04:44,751 --> 00:04:48,622 line:-1
with the system
text size settings.


103
00:04:48.622 --> 00:04:51.057 line:-1 position:50%
So if I take a look
at my PlantView code again,


104
00:04:51.057 --> 00:04:53.527 line:-1 position:50%
I can make that change
quickly and easily


105
00:04:53,527 --> 00:04:56,997 line:-1
by changing my title font
to the title3 text style


106
00:04:56.997 --> 00:05:00.567 line:-1 position:50%
for a smaller-sized title.


107
00:05:00.567 --> 00:05:04.838 line:-1 position:50%
Next let's fix the truncating
text in the task list.


108
00:05:04,838 --> 00:05:07,340 line:-1
In the code for
my PlantTaskLabel,


109
00:05:07,340 --> 00:05:11,244 line:-1
I'm assigning a lineLimit of 1
to everything in the HStack,


110
00:05:11.244 --> 00:05:16.049 line:-1 position:50%
which only allows the text
to expand over a single line.


111
00:05:16.049 --> 00:05:18.285 line:-1 position:50%
To give your UI
the flexibility to adjust


112
00:05:18.285 --> 00:05:20.887 line:-1 position:50%
to as many lines as needed,
set the lineLimit


113
00:05:20.887 --> 00:05:23.990 line:-1 position:50%
to the maximum number of lines
you need to support.


114
00:05:23,990 --> 00:05:28,061 line:-1
Or remove it to allow
an unlimited number of lines.


115
00:05:28.061 --> 00:05:29.663 line:-1 position:50%
Now we're making progress.


116
00:05:29,663 --> 00:05:32,232 line:-1
But while the UI
certainly is larger


117
00:05:32,232 --> 00:05:33,934 line:-1
and there's no more truncation,


118
00:05:33,934 --> 00:05:36,736 line:-1
in the process it's become
a lot more crowded.


119
00:05:36,736 --> 00:05:40,607 line:-1
And it's still not easy to read
the information on the screen.


120
00:05:40.607 --> 00:05:43.476 line:-1 position:50%
Sometimes layouts
for larger text styles


121
00:05:43,476 --> 00:05:46,980 line:-1
just need to be structured
differently.


122
00:05:46,980 --> 00:05:49,082 line:-1
So when building the layout,
I'll create


123
00:05:49.082 --> 00:05:51.751 line:-1 position:50%
an Environment property wrapper
on the sizeCategory


124
00:05:51,751 --> 00:05:54,020 line:-1
to get updates
whenever this changes.


125
00:05:54.020 --> 00:05:56.356 line:-1 position:50%
Next, I just need
to adjust my UI


126
00:05:56.356 --> 00:05:59.392 line:-1 position:50%
to depend on the sizeCategory.


127
00:05:59,392 --> 00:06:01,728 line:-1
In this case,
the text in the task list


128
00:06:01.728 --> 00:06:05.232 line:-1 position:50%
starts wrapping somewhere
around extraExtraLarge.


129
00:06:05.232 --> 00:06:08.268 line:-1 position:50%
So if the size category
is less than this,


130
00:06:08,268 --> 00:06:10,570 line:-1
I'll use the PlantView
we've seen before.


131
00:06:10,570 --> 00:06:14,507 line:-1
But if it's larger, I'll use
this new vertical plant view


132
00:06:14,507 --> 00:06:17,177 line:-1
that stacks each of my labels
and buttons,


133
00:06:17,177 --> 00:06:19,512 line:-1
giving them much more
space to grow.


134
00:06:19,512 --> 00:06:22,315 line:-1
That looks much better.


135
00:06:22.315 --> 00:06:25.252 line:-1 position:50%
With the introduction of large
accessibility text styles


136
00:06:25,252 --> 00:06:27,954 line:-1
on the watch, we expect to see
a lot more people


137
00:06:27,954 --> 00:06:29,789 line:-1
making use of Dynamic Type --


138
00:06:29.789 --> 00:06:31.591 line:-1 position:50%
and so should you!


139
00:06:31,591 --> 00:06:33,326 position:50%
For people setting up
their Apple Watch,


140
00:06:33,326 --> 00:06:36,162 line:0
they will now see the option
to customize the text size


141
00:06:36,162 --> 00:06:37,931 position:50%
when getting started.


142
00:06:37,931 --> 00:06:39,432 line:0
And if they don't
make any changes,


143
00:06:39,432 --> 00:06:41,001 line:0
the watch will
automatically pick


144
00:06:41,001 --> 00:06:46,239 line:0
the closest size to what is
used on the phone.


145
00:06:46.239 --> 00:06:49.809 line:-1 position:50%
So to recap Dynamic Type,
there are three key things


146
00:06:49.809 --> 00:06:52.178 line:-1 position:50%
to make sure watch apps
behave great


147
00:06:52.178 --> 00:06:54.381 line:-1 position:50%
with larger text sizes.


148
00:06:54.381 --> 00:06:58.618 line:-1 position:50%
First, you want to make sure
to always use a text style,


149
00:06:58.618 --> 00:07:00.720 line:-1 position:50%
not a fixed font size.


150
00:07:00,720 --> 00:07:05,258 line:-1
Second, allow your text to wrap
to avoid truncating.


151
00:07:05,258 --> 00:07:07,527 line:-1
And third,
when necessary,


152
00:07:07,527 --> 00:07:09,663 line:-1
switch to
a vertically stacked layout


153
00:07:09,663 --> 00:07:12,966 line:-1
when the content
becomes too crowded.


154
00:07:12,966 --> 00:07:16,269 line:0
Since this only scratches
the surface on large text,


155
00:07:16,269 --> 00:07:18,672 line:0
I'd strongly recommend
you check out the talk,


156
00:07:18,672 --> 00:07:20,607 line:0
"Building apps
with Dynamic Type"


157
00:07:20,607 --> 00:07:23,043 line:0
to really step up your game.


158
00:07:23,043 --> 00:07:26,579 line:0
And to learn even more about
making great visual experiences,


159
00:07:26,579 --> 00:07:28,348 line:0
be sure to check out the talk,


160
00:07:28,348 --> 00:07:31,217 line:0
"Make your app
visually accessible."


161
00:07:31.217 --> 00:07:34.087 line:-1 position:50%
OK, so visually,
that works great.


162
00:07:34,087 --> 00:07:36,656 line:-1
But what if I weren't
a visual user?


163
00:07:36,656 --> 00:07:38,158 line:-1
Let's turn on VoiceOver


164
00:07:38,158 --> 00:07:40,927 line:-1
and have a listen
to what the experience is like.


165
00:07:43.663 --> 00:07:46.599 line:-1 position:50%
VoiceOver: WWDaisy.


166
00:07:46,599 --> 00:07:50,003 line:-1
Daisy, image.


167
00:07:50.003 --> 00:07:53.573 line:-1 position:50%
Drop, image.


168
00:07:53,573 --> 00:07:55,442 line:-1
Five days.


169
00:07:55.442 --> 00:07:58.845 line:-1 position:50%
Leaf, image.


170
00:07:58,845 --> 00:08:01,014 line:-1
Seven days.


171
00:08:01.014 --> 00:08:04.651 line:-1 position:50%
Brightness higher, image.


172
00:08:04.651 --> 00:08:06.920 line:-1 position:50%
Medium.


173
00:08:06.920 --> 00:08:10.924 line:-1 position:50%
Drop, fill, button.


174
00:08:10.924 --> 00:08:14.294 line:-1 position:50%
Leaf, fill, button.


175
00:08:14.294 --> 00:08:15.762 line:-1 position:50%
Daniel: OK,
so there are definitely


176
00:08:15,762 --> 00:08:18,198 line:-1
some improvements we can make.


177
00:08:18.198 --> 00:08:20.800 line:-1 position:50%
The first would be to reduce
the number of elements


178
00:08:20,800 --> 00:08:22,635 line:-1
that can be interacted with.


179
00:08:22,635 --> 00:08:25,605 line:-1
At the moment,
this is a rather complex view.


180
00:08:25,605 --> 00:08:31,778 line:-1
Each cell has four labels,
four images, and two buttons.


181
00:08:31.778 --> 00:08:34.514 line:-1 position:50%
And currently,
to get to the second plant,


182
00:08:34.514 --> 00:08:38.818 line:-1 position:50%
I have to navigate past every
item in the first plant cell.


183
00:08:38,818 --> 00:08:43,423 line:-1
Also the image icons for water,
fertilize, and sunlight


184
00:08:43,423 --> 00:08:46,025 line:-1
were read out as
separate elements to the text,


185
00:08:46.025 --> 00:08:49.729 line:-1 position:50%
and their labels didn't even
make sense for our context.


186
00:08:49.729 --> 00:08:52.265 line:-1 position:50%
Lastly, the two buttons
at the bottom


187
00:08:52.265 --> 00:08:53.867 line:-1 position:50%
were using the default labels


188
00:08:53.867 --> 00:08:57.737 line:-1 position:50%
provided by the symbols
being used.


189
00:08:57.737 --> 00:08:59.172 line:-1 position:50%
So the first issue
we talked about


190
00:08:59.172 --> 00:09:02.208 line:-1 position:50%
is that I have to navigate
through too many items


191
00:09:02,208 --> 00:09:05,612 line:-1
just to move from plant one
to plant two.


192
00:09:05,612 --> 00:09:07,580 line:-1
When I created
my NavigationLink,


193
00:09:07.580 --> 00:09:09.182 line:-1 position:50%
I did this by specifying


194
00:09:09,182 --> 00:09:13,553 line:-1
accessibilityElement grouping
of the children as .contain,


195
00:09:13.553 --> 00:09:15.255 line:-1 position:50%
just to understand
the accessibility state


196
00:09:15.255 --> 00:09:17.257 line:-1 position:50%
of each element.


197
00:09:17.257 --> 00:09:19.025 line:-1 position:50%
But since this is looking good,


198
00:09:19,025 --> 00:09:21,594 line:-1
I'll remove this line,
and NavigationLink


199
00:09:21.594 --> 00:09:23.897 line:-1 position:50%
will combine all
the accessibility information


200
00:09:23,897 --> 00:09:26,633 line:-1
from the children automatically.


201
00:09:26,633 --> 00:09:29,335 line:0
Now the cell is treated
as a single element


202
00:09:29,335 --> 00:09:33,473 position:50%
and the content read out is,
"WWDaisy. Five days.


203
00:09:33,473 --> 00:09:37,877 line:0
Seven days. Medium. Button."


204
00:09:37,877 --> 00:09:42,248 line:-1
That task list still needs
some work so next,


205
00:09:42,248 --> 00:09:45,585 line:-1
let's provide some context
to the upcoming plant-care tasks


206
00:09:45,585 --> 00:09:48,221 line:-1
by giving each a better label.


207
00:09:48,221 --> 00:09:51,057 line:-1
The label is determined
by the PlantTask.


208
00:09:51.057 --> 00:09:53.560 line:-1 position:50%
So inside
my PlantTaskLabel struct,


209
00:09:53,560 --> 00:09:55,995 line:-1
I'll just alter
the accessibilityLabel


210
00:09:55,995 --> 00:09:59,499 line:-1
to return a different string
for each plant task.


211
00:09:59.499 --> 00:10:01.401 line:-1 position:50%
This is the same technique
that I'll use


212
00:10:01,401 --> 00:10:03,269 line:-1
to put labels on my buttons.


213
00:10:03,269 --> 00:10:04,971 position:50%
Now the content is read out as,


214
00:10:04,971 --> 00:10:10,176 position:50%
"WWDaisy. Watering in five days.
Fertilizing in seven days.


215
00:10:10,176 --> 00:10:13,980 line:0
Keep in medium sunlight.
Button."


216
00:10:13,980 --> 00:10:17,250 line:0
And the water and fertilize
buttons will be read out as,


217
00:10:17,250 --> 00:10:23,156 line:0
"Log watering, button"
and, "Log fertilizing, button."


218
00:10:23.156 --> 00:10:26.226 line:-1 position:50%
So far, a lot of work
is done for us automatically,


219
00:10:26,226 --> 00:10:29,496 line:-1
with only a few additional
modifiers being needed.


220
00:10:29.496 --> 00:10:31.431 line:-1 position:50%
In fact, with SwiftUI,


221
00:10:31,431 --> 00:10:34,067 line:-1
most of your accessibility
comes for free.


222
00:10:34.067 --> 00:10:36.369 line:-1 position:50%
You'll probably just write
a few lines of code.


223
00:10:36,369 --> 00:10:37,837 line:-1
But every now and then,


224
00:10:37,837 --> 00:10:40,507 line:-1
you might need
to build a custom control.


225
00:10:40.507 --> 00:10:42.909 line:-1 position:50%
I did by building
a custom counter


226
00:10:42.909 --> 00:10:44.911 line:-1 position:50%
so that I could adjust
the watering


227
00:10:44,911 --> 00:10:47,347 line:-1
and fertilizing frequency
for my plants.


228
00:10:47,347 --> 00:10:50,350 line:-1
Let's take a look.


229
00:10:50,350 --> 00:10:53,920 line:-1
VoiceOver: Watering frequency
in days, heading.


230
00:10:53.920 --> 00:10:56.623 line:-1 position:50%
Remove, button.


231
00:10:56.623 --> 00:10:59.292 line:-1 position:50%
Eight.


232
00:10:59.292 --> 00:11:03.062 line:-1 position:50%
Add, button.
Add.


233
00:11:03.062 --> 00:11:04.697 line:-1 position:50%
Daniel: So while this
technically works,


234
00:11:04,697 --> 00:11:07,400 line:-1
it's not the ideal experience.


235
00:11:07.400 --> 00:11:10.203 line:-1 position:50%
The goal here is
to turn these three items


236
00:11:10,203 --> 00:11:12,705 line:-1
into a single
accessible element.


237
00:11:12,705 --> 00:11:14,974 line:-1
To do this,
I'll begin by using


238
00:11:14,974 --> 00:11:17,677 line:-1
our accessibilityElement
modifier.


239
00:11:17,677 --> 00:11:20,346 line:-1
This will create
a new higher-level element;


240
00:11:20.346 --> 00:11:23.983 line:-1 position:50%
but this time, I will ignore
all the children.


241
00:11:23.983 --> 00:11:25.885 line:-1 position:50%
This is actually
the default behavior


242
00:11:25,885 --> 00:11:28,421 line:-1
for accessibilityElement.


243
00:11:28,421 --> 00:11:30,156 line:-1
So I can leave
the parameters blank


244
00:11:30.156 --> 00:11:32.392 line:-1 position:50%
to get the same behavior.


245
00:11:32,392 --> 00:11:34,294 line:-1
And because
I'm ignoring the children,


246
00:11:34.294 --> 00:11:37.630 line:-1 position:50%
this discards the Add
and Remove button labels


247
00:11:37,630 --> 00:11:39,532 line:-1
along with
the accessibility actions


248
00:11:39.532 --> 00:11:42.936 line:-1 position:50%
that were provided
automatically.


249
00:11:42.936 --> 00:11:46.539 line:-1 position:50%
Instead, I'll use
accessibilityAdjustableAction


250
00:11:46,539 --> 00:11:49,943 line:-1
to allow the user to increment
or decrement the value


251
00:11:49.943 --> 00:11:53.947 line:-1 position:50%
by swiping up or down
on the counter.


252
00:11:53,947 --> 00:11:56,149 position:50%
And now that
I've only got one element,


253
00:11:56,149 --> 00:11:59,986 line:0
I'll give it a single label
using the name of the task.


254
00:11:59,986 --> 00:12:02,455 position:50%
This will end up as
"Watering Frequency"


255
00:12:02,455 --> 00:12:05,959 position:50%
or "Fertilizing Frequency."


256
00:12:05,959 --> 00:12:08,161 line:0
Finally, I'll give it a value.


257
00:12:08,161 --> 00:12:11,564 position:50%
The accessibilityValue is
read out each time it changes,


258
00:12:11,564 --> 00:12:13,666 position:50%
while the label
will only be read out


259
00:12:13,666 --> 00:12:16,169 line:0
when navigating to the element.


260
00:12:18,972 --> 00:12:22,742 line:-1
VoiceOver: Watering frequency
in days, heading.


261
00:12:22,742 --> 00:12:27,046 line:-1
Watering frequency.
Eight days. Adjustable.


262
00:12:27,046 --> 00:12:28,681 line:-1
Nine days.


263
00:12:28,681 --> 00:12:32,051 line:-1
Daniel: Great.
That works much better.


264
00:12:32.051 --> 00:12:35.021 line:-1 position:50%
As you just saw,
SwiftUI made it easy


265
00:12:35,021 --> 00:12:37,957 line:-1
to make our watch app accessible
to VoiceOver.


266
00:12:37,957 --> 00:12:40,960 line:-1
And what's great is that
because this is SwiftUI,


267
00:12:40,960 --> 00:12:45,665 line:-1
the same code works
on macOS and iOS as well.


268
00:12:45,665 --> 00:12:47,066 line:0
To learn more about designing


269
00:12:47,066 --> 00:12:50,236 position:50%
a fantastic experience
with SwiftUI,


270
00:12:50,236 --> 00:12:54,207 line:0
be sure to check out the talk,
"Accessibility in SwiftUI."


271
00:12:54,207 --> 00:12:57,677 line:0
And to learn about the brand-new
tools and APIs when working


272
00:12:57,677 --> 00:13:00,313 position:50%
with SwiftUI accessibility,
check out the talk,


273
00:13:00,313 --> 00:13:04,984 position:50%
"SwiftUI accessibility:
Beyond the basics."


274
00:13:04.984 --> 00:13:08.454 line:-1 position:50%
Now, before we move on
from visual accessibility,


275
00:13:08.454 --> 00:13:10.890 line:-1 position:50%
I'd like to highlight
two more things:


276
00:13:10,890 --> 00:13:14,594 line:-1
complications and notifications.


277
00:13:14,594 --> 00:13:17,764 line:-1
Complications are a high-traffic
window into your app,


278
00:13:17,764 --> 00:13:20,833 line:-1
so, of course, they also
need to provide information


279
00:13:20.833 --> 00:13:23.102 line:-1 position:50%
in an accessible way.


280
00:13:23,102 --> 00:13:25,338 line:-1
There are many different
types of complications


281
00:13:25,338 --> 00:13:27,173 line:-1
but most of them
will be made up


282
00:13:27.173 --> 00:13:33.212 line:-1 position:50%
of three different components:
text, images, and symbols.


283
00:13:33.212 --> 00:13:36.315 line:-1 position:50%
Text will be picked up
by VoiceOver automatically,


284
00:13:36,315 --> 00:13:38,751 line:-1
but if your text contains
abbreviations,


285
00:13:38,751 --> 00:13:41,220 line:-1
make sure to add
accessibility labels


286
00:13:41,220 --> 00:13:43,823 line:-1
with the nonabbreviated
versions.


287
00:13:43,823 --> 00:13:48,361 line:-1
Here we expand the abbreviated,
"Wednesday Mar 9"


288
00:13:48.361 --> 00:13:52.999 line:-1 position:50%
to its full form of,
"Wednesday, March 9th."


289
00:13:52.999 --> 00:13:55.968 line:-1 position:50%
Image-based complications
are also very common.


290
00:13:55,968 --> 00:13:59,739 line:-1
Be sure to provide
accessibility labels here too;


291
00:13:59.739 --> 00:14:02.875 line:-1 position:50%
otherwise, the image name
will be used instead.


292
00:14:02,875 --> 00:14:05,378 line:-1
"Moon" isn't nearly
as descriptive as,


293
00:14:05,378 --> 00:14:10,016 line:-1
"A real-time view of the moon.
Third quarter."


294
00:14:10.016 --> 00:14:13.252 line:-1 position:50%
Certain iconography
such as SF Symbols


295
00:14:13,252 --> 00:14:15,955 line:-1
may come with
a default accessibility label


296
00:14:15.955 --> 00:14:19.492 line:-1 position:50%
such as "Drop, fill",
but just make sure


297
00:14:19,492 --> 00:14:21,627 line:-1
that the label
that comes with the symbol


298
00:14:21,627 --> 00:14:24,731 line:-1
is the one that makes
the most sense for you.


299
00:14:24,731 --> 00:14:28,401 line:-1
"Water in three days"
makes much more sense for me.


300
00:14:28,401 --> 00:14:31,304 line:-1
As for notifications,
these are another way your app


301
00:14:31.304 --> 00:14:34.006 line:-1 position:50%
may send a lot of information
to your user.


302
00:14:34,006 --> 00:14:37,143 line:-1
So while some notifications
are fairly straightforward,


303
00:14:37.143 --> 00:14:39.712 line:-1 position:50%
others such as
dynamic notifications


304
00:14:39,712 --> 00:14:41,447 line:-1
can have complex views


305
00:14:41,447 --> 00:14:44,183 line:-1
and so will need the same
accessibility support


306
00:14:44.183 --> 00:14:46.986 line:-1 position:50%
that you've provided
for your app.


307
00:14:46,986 --> 00:14:49,522 line:-1
And now I'll turn you over
to Virata


308
00:14:49.522 --> 00:14:53.259 line:-1 position:50%
to tell you all about
motor accessibility.


309
00:14:53.259 --> 00:14:54.927 line:-1 position:50%
Virata Yindeeyoungyeon:
Well, thank you, Daniel.


310
00:14:54,927 --> 00:14:57,563 line:-1
My name is
Virata Yindeeyoungyeon.


311
00:14:57,563 --> 00:15:00,166 line:-1
I am an engineer
on the Accessibility team.


312
00:15:00.166 --> 00:15:02.502 line:-1 position:50%
Today, I am very excited
to talk about


313
00:15:02,502 --> 00:15:05,338 line:-1
motor-accessibility support
on Apple Watch.


314
00:15:05,338 --> 00:15:07,874 line:-1
But before we dive into
the presentation,


315
00:15:07.874 --> 00:15:12.278 line:-1 position:50%
let me give you a quick glance
of our new feature.


316
00:15:12,278 --> 00:15:15,615 line:-1
Without touching the screen
and only using hand gesture,


317
00:15:15.615 --> 00:15:18.251 line:-1 position:50%
I am able to navigate
from the watch face


318
00:15:18,251 --> 00:15:24,323 line:-1
to the Control Center
to the Do Not Disturb button,


319
00:15:24,323 --> 00:15:27,960 line:-1
and then turn it on.


320
00:15:27,960 --> 00:15:30,363 line:-1
It is that simple.


321
00:15:30.363 --> 00:15:31.697 line:-1 position:50%
This year,
we are very excited


322
00:15:31.697 --> 00:15:34.467 line:-1 position:50%
to bring AssistiveTouch
to Apple Watch.


323
00:15:34,467 --> 00:15:36,936 line:-1
AssistiveTouch allows
full use of your Apple Watch


324
00:15:36.936 --> 00:15:37.970 line:-1 position:50%
without touch,


325
00:15:37,970 --> 00:15:41,440 line:-1
using only the hand
that the Apple Watch is on.


326
00:15:41,440 --> 00:15:44,343 line:-1
People can use
hand gestures or hand motions


327
00:15:44,343 --> 00:15:47,113 line:-1
to navigate a cursor
around the screen.


328
00:15:47,113 --> 00:15:50,416 line:-1
They can bring up a menu to
access additional functionality


329
00:15:50.416 --> 00:15:52.185 line:-1 position:50%
based on the screen content.


330
00:15:52.185 --> 00:15:54.420 line:-1 position:50%
For some people,
this may be the only way


331
00:15:54.420 --> 00:15:57.623 line:-1 position:50%
they can interact
with their Apple Watch.


332
00:15:57,623 --> 00:15:59,258 line:-1
For people
with motor impairments


333
00:15:59.258 --> 00:16:02.995 line:-1 position:50%
such as missing limbs, loss of
functions of hands or arms,


334
00:16:02.995 --> 00:16:05.031 line:-1 position:50%
AssistiveTouch
will enable more options


335
00:16:05.031 --> 00:16:08.801 line:-1 position:50%
to allow control and performing
actions on Apple Watch.


336
00:16:08.801 --> 00:16:10.169 line:-1 position:50%
Now let's see an example


337
00:16:10.169 --> 00:16:12.805 line:-1 position:50%
on how people can use
AssistiveTouch.


338
00:16:12.805 --> 00:16:14.907 line:-1 position:50%
The primary way
to use AssistiveTouch


339
00:16:14.907 --> 00:16:16.742 line:-1 position:50%
is through hand gestures.


340
00:16:16,742 --> 00:16:18,878 line:-1
People are able
to perform different gesture


341
00:16:18,878 --> 00:16:21,681 line:-1
such as clench to tap,


342
00:16:21,681 --> 00:16:24,183 position:50%
double-clench to bring up
the action menu,


343
00:16:24,183 --> 00:16:26,819 line:0
pinch to navigate
to the next element,


344
00:16:26,819 --> 00:16:31,390 position:50%
double-pinch to navigate
back to the previous element.


345
00:16:31.390 --> 00:16:33.960 line:-1 position:50%
For those who are not able
to use hand gestures,


346
00:16:33,960 --> 00:16:38,030 line:-1
an alternative
is using hand motions.


347
00:16:38.030 --> 00:16:39.799 line:-1 position:50%
By tilting their wrist,
people are able


348
00:16:39,799 --> 00:16:45,538 line:-1
to move the onscreen pointer and
interact with the UI elements.


349
00:16:45,538 --> 00:16:47,740 line:-1
Similar to AssistiveTouch
on iOS,


350
00:16:47.740 --> 00:16:49.942 line:-1 position:50%
with Dwell Control
you can perform an action


351
00:16:49,942 --> 00:16:51,878 line:-1
by resting the pointer
over an element


352
00:16:51,878 --> 00:16:54,180 line:-1
for a set amount of time.


353
00:16:56.382 --> 00:17:00.119 line:-1 position:50%
Now let's get into more detail
on how AssistiveTouch works.


354
00:17:00,119 --> 00:17:03,556 line:-1
AssistiveTouch is made up
of two main features:


355
00:17:03,556 --> 00:17:06,759 line:-1
the cursor
and the action menu.


356
00:17:06.759 --> 00:17:08.628 line:-1 position:50%
When you turn on AssistiveTouch,


357
00:17:08,628 --> 00:17:10,796 line:-1
you see a cursor
appear on the screen.


358
00:17:10,796 --> 00:17:13,833 line:-1
The cursor will focus on
each element on the screen


359
00:17:13.833 --> 00:17:17.603 line:-1 position:50%
one at a time, in order
from top left to bottom right.


360
00:17:17,603 --> 00:17:19,138 line:-1
The cursor
highlights the element


361
00:17:19,138 --> 00:17:21,941 line:-1
for further interactions.


362
00:17:21,941 --> 00:17:24,210 line:-1
For more actions
on the focused element,


363
00:17:24,210 --> 00:17:26,012 line:-1
you can bring up
the action menu


364
00:17:26,012 --> 00:17:28,581 line:-1
to perform system
or custom actions.


365
00:17:28.581 --> 00:17:30.383 line:-1 position:50%
AssistiveTouch action menu
comes with


366
00:17:30,383 --> 00:17:33,152 line:-1
default system actions
that allow control of the device


367
00:17:33,152 --> 00:17:35,621 line:-1
such as pressing
on the Digital Crown,


368
00:17:35,621 --> 00:17:38,190 line:-1
scrolling navigation,
gesture interactions,


369
00:17:38.190 --> 00:17:39.458 line:-1 position:50%
and much more.


370
00:17:39.458 --> 00:17:43.296 line:-1 position:50%
You can also add custom actions
to this menu as well.


371
00:17:43.296 --> 00:17:45.364 line:-1 position:50%
So now we know
how AssistiveTouch works.


372
00:17:45,364 --> 00:17:49,802 line:-1
Let's take a look at how we can
support it in your application.


373
00:17:49.802 --> 00:17:52.405 line:-1 position:50%
We'll go over
these following topics.


374
00:17:52,405 --> 00:17:55,107 line:-1
First, we'll learn what
focusable elements are


375
00:17:55,107 --> 00:17:57,843 line:-1
in your view
and how we can modify them.


376
00:17:57.843 --> 00:18:01.180 line:-1 position:50%
Then we'll take a look
at the cursor frame


377
00:18:01.180 --> 00:18:03.849 line:-1 position:50%
and how we can change
the frame size.


378
00:18:03.849 --> 00:18:08.487 line:-1 position:50%
Last, we'll talk more about how
to customize the action menu.


379
00:18:08,487 --> 00:18:12,191 line:-1
Let's begin with
focusable elements.


380
00:18:12.191 --> 00:18:14.260 line:-1 position:50%
This table gives
a general overview


381
00:18:14,260 --> 00:18:17,229 line:-1
of which elements are focusable
by AssistiveTouch.


382
00:18:17.229 --> 00:18:19.398 line:-1 position:50%
Only interactive elements
that respond


383
00:18:19,398 --> 00:18:22,735 line:-1
to user interaction
are focusable.


384
00:18:22,735 --> 00:18:25,371 line:-1
SwiftUI provides
built-in control elements


385
00:18:25,371 --> 00:18:27,073 line:-1
to handle user interactions;


386
00:18:27,073 --> 00:18:31,210 line:-1
these elements are interactive
and focusable.


387
00:18:31,210 --> 00:18:33,713 line:-1
In your view,
if you have a button,


388
00:18:33.713 --> 00:18:36.882 line:-1 position:50%
a toggle,
or a NavigationLink,


389
00:18:36,882 --> 00:18:40,386 line:-1
these elements
can be focused by default.


390
00:18:40,386 --> 00:18:43,389 line:-1
Actionable elements
are focusable by AssistiveTouch


391
00:18:43,389 --> 00:18:49,028 line:-1
because they have an action or
are defined to be interactive.


392
00:18:49.028 --> 00:18:52.231 line:-1 position:50%
A text element can become
interactive and focusable


393
00:18:52,231 --> 00:18:55,334 line:-1
by attaching
a tap gesture action.


394
00:18:55.334 --> 00:18:57.603 line:-1 position:50%
You can also add
an accessibilityAction


395
00:18:57.603 --> 00:19:00.439 line:-1 position:50%
to an element as well.


396
00:19:00.439 --> 00:19:03.776 line:-1 position:50%
If you define an element
to have an actionable trait,


397
00:19:03,776 --> 00:19:05,778 line:-1
like a button or adjustable,


398
00:19:05.778 --> 00:19:08.247 line:-1 position:50%
then it will be treated
as interactive


399
00:19:08,247 --> 00:19:11,717 line:-1
and would be focused
by AssistiveTouch.


400
00:19:11,717 --> 00:19:14,220 line:-1
Some elements
are not focusable.


401
00:19:14,220 --> 00:19:17,023 line:-1
Static elements
such as a label or a text


402
00:19:17,023 --> 00:19:19,191 line:-1
that do not respond
to user interaction


403
00:19:19,191 --> 00:19:22,461 line:-1
will not be focusable
by AssistiveTouch.


404
00:19:22,461 --> 00:19:27,700 line:-1
Elements with user interaction
disabled are also not focusable.


405
00:19:27,700 --> 00:19:29,668 line:-1
So let's see an example.


406
00:19:29,668 --> 00:19:32,138 line:-1
In this view,
we have a label header,


407
00:19:32,138 --> 00:19:33,739 line:-1
text with drink information,


408
00:19:33,739 --> 00:19:36,108 line:-1
Accept and Cancel
button elements.


409
00:19:36.108 --> 00:19:38.310 line:-1 position:50%
Only the two buttons
are focusable,


410
00:19:38,310 --> 00:19:42,648 line:-1
while the label and text
are not.


411
00:19:42,648 --> 00:19:45,518 line:0
Let's take a look at the code
for this view.


412
00:19:45,518 --> 00:19:48,220 line:0
A tap gesture is attached
to the main VStack,


413
00:19:48,220 --> 00:19:50,556 line:0
indicating that you can
tap on this view


414
00:19:50,556 --> 00:19:52,625 position:50%
to show the drink detailed view.


415
00:19:52,625 --> 00:19:55,928 position:50%
However, the static elements
inside the VStack


416
00:19:55,928 --> 00:19:59,899 line:0
do not become focusable
unless explicitly declared.


417
00:19:59,899 --> 00:20:03,869 line:0
Here, only the Accept and Cancel
buttons are focusable.


418
00:20:03,869 --> 00:20:06,839 position:50%
So how would a user know
that they can tap on the view


419
00:20:06,839 --> 00:20:09,475 line:0
to show the drink detail view?


420
00:20:09.475 --> 00:20:11.444 line:-1 position:50%
To provide
a better user experience,


421
00:20:11.444 --> 00:20:14.880 line:-1 position:50%
I would like to highlight the
drink information text element


422
00:20:14,880 --> 00:20:20,219 line:-1
to show that it is interactable
and a tap can be performed.


423
00:20:20,219 --> 00:20:22,054 line:-1
This can be done by
setting "true" to


424
00:20:22.054 --> 00:20:25.658 line:-1 position:50%
accessibilityRespondsToUser
Interaction modifier.


425
00:20:25.658 --> 00:20:27.493 line:-1 position:50%
After applying the modifier,


426
00:20:27,493 --> 00:20:30,796 line:-1
we now have three focusable
elements in this view:


427
00:20:30,796 --> 00:20:32,565 line:-1
the drink information text,


428
00:20:32.565 --> 00:20:35.334 line:-1 position:50%
Accept and Cancel
button elements.


429
00:20:35.334 --> 00:20:39.505 line:-1 position:50%
Now let's learn more about
AssistiveTouch cursor frame.


430
00:20:39,505 --> 00:20:41,373 line:-1
As you can see,
the focused elements


431
00:20:41,373 --> 00:20:44,910 line:-1
are important for AssistiveTouch
to highlight if the element


432
00:20:44,910 --> 00:20:49,115 line:-1
is intractable or an action
can be performed.


433
00:20:49,115 --> 00:20:50,716 line:-1
The AssistiveTouch cursor frame


434
00:20:50,716 --> 00:20:53,786 line:-1
is the same as
the element's tappable area;


435
00:20:53.786 --> 00:20:55.454 line:-1 position:50%
elements with
small tappable area


436
00:20:55,454 --> 00:20:57,723 line:-1
will have a small cursor frame


437
00:20:57.723 --> 00:21:00.292 line:-1 position:50%
and it might
clip the content inside.


438
00:21:00,292 --> 00:21:02,628 line:-1
We can make this cleaner
by adding padding


439
00:21:02,628 --> 00:21:05,498 line:-1
and having the borders
match the shape of the object


440
00:21:05.498 --> 00:21:08.634 line:-1 position:50%
to prevent clipping.


441
00:21:08,634 --> 00:21:09,768 line:-1
In this example,


442
00:21:09.768 --> 00:21:12.138 line:-1 position:50%
a NavigationLink
with the ellipsis image


443
00:21:12,138 --> 00:21:14,607 line:-1
is highlighted
with a small circle


444
00:21:14.607 --> 00:21:16.909 line:-1 position:50%
from the AssistiveTouch cursor.


445
00:21:16.909 --> 00:21:17.977 line:-1 position:50%
We can improve on this


446
00:21:17,977 --> 00:21:20,479 line:-1
by increasing the size
of the tappable area,


447
00:21:20.479 --> 00:21:24.817 line:-1 position:50%
which also changes the
AssistiveTouch cursor frame.


448
00:21:24,817 --> 00:21:28,287 line:-1
By providing a path
to the contentShape modifier,


449
00:21:28,287 --> 00:21:29,922 line:-1
you can change
the tappable area


450
00:21:29.922 --> 00:21:32.858 line:-1 position:50%
and the cursor frame
of the element.


451
00:21:32.858 --> 00:21:35.895 line:-1 position:50%
For this NavigationLink,
I set the tappable area shape


452
00:21:35.895 --> 00:21:40.533 line:-1 position:50%
to be a circle one-and-a-half
times the size of the element.


453
00:21:40.533 --> 00:21:44.236 line:-1 position:50%
As a result, the AssistiveTouch
cursor frame is larger


454
00:21:44.236 --> 00:21:48.774 line:-1 position:50%
and the element is much easier
to see on the screen.


455
00:21:48.774 --> 00:21:52.411 line:-1 position:50%
Now let's take a look at
AssistiveTouch action menu.


456
00:21:52,411 --> 00:21:53,879 line:-1
AssistiveTouch action menu


457
00:21:53.879 --> 00:21:57.850 line:-1 position:50%
surfaces default system actions
and custom actions in your view


458
00:21:57,850 --> 00:21:59,985 line:-1
to show in
the action menu lists.


459
00:21:59,985 --> 00:22:02,388 line:-1
If the focus element
has custom actions,


460
00:22:02.388 --> 00:22:04.590 line:-1 position:50%
those actions
will be prioritized


461
00:22:04,590 --> 00:22:07,159 line:-1
and shown at
the beginning of the list


462
00:22:07.159 --> 00:22:10.429 line:-1 position:50%
so it's more convenient
to interact.


463
00:22:10,429 --> 00:22:13,132 line:-1
If the element is adjustable,


464
00:22:13,132 --> 00:22:16,802 line:-1
the decrement and increment
actions are shown.


465
00:22:16.802 --> 00:22:20.306 line:-1 position:50%
If an accessibility group
element contains custom actions,


466
00:22:20,306 --> 00:22:22,374 line:-1
then those actions
will be surfaced


467
00:22:22,374 --> 00:22:25,344 line:-1
when focusing
on the group element.


468
00:22:25,344 --> 00:22:28,647 line:-1
If you have already added
custom actions for VoiceOver


469
00:22:28.647 --> 00:22:31.150 line:-1 position:50%
in the element,
that's great!


470
00:22:31,150 --> 00:22:33,152 line:-1
These actions will
automatically show up


471
00:22:33,152 --> 00:22:35,754 line:-1
in the AssistiveTouch
action menu as well.


472
00:22:35,754 --> 00:22:38,691 line:-1
The custom actions
will be shown as an icon.


473
00:22:38.691 --> 00:22:40.025 line:-1 position:50%
The default image will be


474
00:22:40.025 --> 00:22:43.696 line:-1 position:50%
the first letter of
the custom action name.


475
00:22:43,696 --> 00:22:47,266 line:-1
If you want to provide an image
for your custom action icon,


476
00:22:47.266 --> 00:22:49.702 line:-1 position:50%
you can add a label
with an image


477
00:22:49,702 --> 00:22:52,638 line:-1
to the accessibilityAction
modifier.


478
00:22:52.638 --> 00:22:54.340 line:-1 position:50%
Well, that's the end
of our session.


479
00:22:54.340 --> 00:22:55.841 line:-1 position:50%
Now you have
a better understanding


480
00:22:55.841 --> 00:22:58.811 line:-1 position:50%
of accessibility features
on Apple Watch.


481
00:22:58.811 --> 00:23:01.747 line:-1 position:50%
Remember to add
Dynamic Type, VoiceOver,


482
00:23:01.747 --> 00:23:04.683 line:-1 position:50%
and AssistiveTouch support
in your application.


483
00:23:04,683 --> 00:23:06,919 line:-1
You have the tools
to use these APIs


484
00:23:06,919 --> 00:23:08,420 line:-1
and make
your watchOS application


485
00:23:08,420 --> 00:23:10,189 line:-1
accessible for everyone.


486
00:23:10,189 --> 00:23:14,994 line:-1
Well, thank you for your time
and enjoy the rest of WWDC!


487
00:23:14,994 --> 00:23:20,866 line:0 size:2% position:90%
â™ª

