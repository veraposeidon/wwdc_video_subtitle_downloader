2
00:00:02.069 --> 00:00:07.074 line:-1 align:center
[music]


3
00:00:09,042 --> 00:00:13,013 line:-2
[Jake] Hello and welcome
to “What’s new in watchOS 8.”


4
00:00:13,046 --> 00:00:17,417 line:-2
My name is Jake Behrens, and
I’m Apple’s Watch Evangelist.


5
00:00:17,451 --> 00:00:20,921 line:-2
watchOS 7 opened up
many new opportunities,


6
00:00:20,954 --> 00:00:25,259 line:-2
with features like Family Setup,
allowing family members to stay


7
00:00:25,292 --> 00:00:29,463 line:-2
connected without an iPhone;
multiple complications,


8
00:00:29.496 --> 00:00:33.700 line:-2 align:center
allowing you to create richer
experiences for the watch face;


9
00:00:33.734 --> 00:00:36.703 line:-2 align:center
and watch face sharing,
which allows you to create


10
00:00:36.737 --> 00:00:40.207 line:-2 align:center
a watch face that’s all
your own with complications


11
00:00:40.240 --> 00:00:45.112 line:-2 align:center
that you love that you can share
with someone or post online.


12
00:00:45.145 --> 00:00:48.015 line:-2 align:center
In watchOS 8,
we’ve focused on some


13
00:00:48.048 --> 00:00:50.684 line:-2 align:center
of your top requests
to help you create


14
00:00:50,717 --> 00:00:53,887 line:-2
even more incredible
Watch app experiences.


15
00:00:53.921 --> 00:00:57.591 line:-2 align:center
There’s a lot to talk about,
so let’s dive in.


16
00:00:57.624 --> 00:01:00.694 line:-1 align:center
First is the Always-On Display.


17
00:01:00.727 --> 00:01:04.064 line:-2 align:center
Apple Watch Series 5
and watchOS 6 brought


18
00:01:04.097 --> 00:01:06.567 line:-2 align:center
the Always-On Display
to the watch face,


19
00:01:06.600 --> 00:01:08.969 line:-2 align:center
and now in watchOS 8,
we’re bringing


20
00:01:09.002 --> 00:01:12.506 line:-2 align:center
the Always-On Display
to your apps.


21
00:01:12.539 --> 00:01:15.742 line:-2 align:center
I’m also going to talk
about how you can take advantage


22
00:01:15,776 --> 00:01:17,277 line:-1
of background delivery


23
00:01:17.311 --> 00:01:19.980 line:-2 align:center
of HealthKit data
and Bluetooth scanning


24
00:01:20.013 --> 00:01:24.484 line:-2 align:center
to keep health-related
complications up to date.


25
00:01:24.518 --> 00:01:28.355 line:-2 align:center
Apple Watch has become
more independent over time.


26
00:01:28.388 --> 00:01:29.756 line:-1 align:center
With watchOS 8,


27
00:01:29.790 --> 00:01:33.694 line:-2 align:center
we’re bringing region-based
user notifications to the wrist.


28
00:01:33,727 --> 00:01:35,963 line:-2
I’m going to talk
about how these can bring


29
00:01:35,996 --> 00:01:39,333 line:-2
relevant information
to someone at the right time


30
00:01:39.366 --> 00:01:41.735 line:-1 align:center
in the right places.


31
00:01:41,768 --> 00:01:44,638 line:-2
Finally,
I’ll talk about some new system


32
00:01:44.671 --> 00:01:47.841 line:-2 align:center
and API enhancements
coming to watchOS 8


33
00:01:47.875 --> 00:01:52.546 line:-2 align:center
that make developing and using
Watch apps even better.


34
00:01:52.579 --> 00:01:55.916 line:-2 align:center
Let’s start
with the Always-On Display.


35
00:01:55.949 --> 00:01:59.152 line:-2 align:center
The Always-On Display
allows you to see content


36
00:01:59.186 --> 00:02:02.356 line:-2 align:center
on your watch without having
to raise your wrist.


37
00:02:02.389 --> 00:02:06.226 line:-2 align:center
When you raise your wrist,
the display is active again.


38
00:02:06,260 --> 00:02:08,462 line:-2
The Always-On Display
is supported


39
00:02:08.495 --> 00:02:12.366 line:-1 align:center
on Apple Watch Series 5 and 6.


40
00:02:12.399 --> 00:02:15.269 line:-2 align:center
In watchOS 7,
the always-on state


41
00:02:15.302 --> 00:02:19.072 line:-2 align:center
showed your app’s UI
blurred with the time overlaid.


42
00:02:19,106 --> 00:02:22,576 line:-2
When you rebuild your app
with the watchOS 8 SDK,


43
00:02:22,609 --> 00:02:26,880 line:-2
your app’s UI will now be
shown in a dimmed state instead


44
00:02:26,914 --> 00:02:31,618 line:-2
and is immediately interactive
if someone taps the UI.


45
00:02:31.652 --> 00:02:34.855 line:-2 align:center
In the always-on state,
the system automatically


46
00:02:34.888 --> 00:02:37.424 line:-2 align:center
reduces the overall brightness
of the display


47
00:02:37,457 --> 00:02:40,527 line:-2
while keeping it bright enough
for someone to see.


48
00:02:40.561 --> 00:02:42.863 line:-1 align:center
To help you adapt your app’s UI


49
00:02:42.896 --> 00:02:44.665 line:-1 align:center
to this reduced brightness,


50
00:02:44.698 --> 00:02:47.801 line:-2 align:center
we’re introducing
a SwiftUI environment property


51
00:02:47.835 --> 00:02:51.872 line:-1 align:center
called isLuminanceReduced.


52
00:02:51.905 --> 00:02:55.209 line:-2 align:center
You can respond to this state
by highlighting information


53
00:02:55,242 --> 00:02:56,844 line:-1
that’s especially important


54
00:02:56,877 --> 00:03:00,914 line:-2
and hiding information
that should stay private.


55
00:03:00,948 --> 00:03:02,816 line:-1
To help you iterate quickly,


56
00:03:02.850 --> 00:03:05.719 line:-2 align:center
we’ve included support
for this environment property


57
00:03:05,752 --> 00:03:09,656 line:-2
in Xcode previews
as well as in the simulator.


58
00:03:09.690 --> 00:03:11.959 line:-2 align:center
In the simulator,
you click a button


59
00:03:11.992 --> 00:03:14.995 line:-2 align:center
in the window
to simulate a wrist-down event.


60
00:03:15,028 --> 00:03:18,065 line:-2
This will be really helpful
when you want to see


61
00:03:18.098 --> 00:03:22.269 line:-2 align:center
how your app’s UI responds
to the always-on state.


62
00:03:22,302 --> 00:03:25,205 line:-2
Now let’s talk
about some guiding principles


63
00:03:25.239 --> 00:03:28.742 line:-2 align:center
for your app’s UI
in the always-on state.


64
00:03:28.775 --> 00:03:32.679 line:-2 align:center
The transition from active state
to the always-on state


65
00:03:32,713 --> 00:03:34,748 line:-1
should feel seamless.


66
00:03:34.781 --> 00:03:39.152 line:-2 align:center
Don’t drastically alter the UI
or reorganize information.


67
00:03:39.186 --> 00:03:42.289 line:-2 align:center
Otherwise the transition
from the always-on state


68
00:03:42.322 --> 00:03:45.058 line:-1 align:center
to being active will be jarring.


69
00:03:45.092 --> 00:03:50.030 line:-2 align:center
Maintaining the context
of the active UI is key.


70
00:03:50.063 --> 00:03:53.734 line:-2 align:center
In this example,
Fitbod keeps the UI grounded


71
00:03:53,767 --> 00:03:57,204 line:-2
and consistent between states
while further dimming some


72
00:03:57.237 --> 00:04:00.607 line:-2 align:center
of the brighter elements
and secondary text.


73
00:04:00.641 --> 00:04:01.708 line:-1 align:center
Next,


74
00:04:01.742 --> 00:04:05.078 line:-2 align:center
you should dim non-essential
information and elements.


75
00:04:05.112 --> 00:04:08.949 line:-2 align:center
If you have secondary text,
images, or fills,


76
00:04:08,982 --> 00:04:11,084 line:-2
you can further dim them
yourself


77
00:04:11,118 --> 00:04:13,987 line:-2
to give more prominence
to the piece of information


78
00:04:14,021 --> 00:04:17,024 line:-2
you want to stay highlighted
and visible.


79
00:04:17.057 --> 00:04:21.261 line:-2 align:center
AnyList, which helps you create
and share grocery shopping lists


80
00:04:21,295 --> 00:04:25,566 line:-2
and organize recipes, removes
the background of list items


81
00:04:25.599 --> 00:04:28.535 line:-2 align:center
and further dims
the secondary information,


82
00:04:28,569 --> 00:04:32,840 line:-2
like which flavor of Greek
yogurt or how much milk.


83
00:04:32.873 --> 00:04:35.576 line:-2 align:center
This allows
the main list item title


84
00:04:35,609 --> 00:04:38,512 line:-2
to be even more glanceable,
as you might be pushing


85
00:04:38,545 --> 00:04:42,482 line:-2
a shopping cart
or carrying a shopping basket.


86
00:04:42.516 --> 00:04:45.352 line:-2 align:center
If your UI has large elements
that are filled


87
00:04:45.385 --> 00:04:49.189 line:-2 align:center
with color or imagery, you may
want to reduce those elements


88
00:04:49,223 --> 00:04:52,759 line:-2
to be represented with a stroke
or dimmed color,


89
00:04:52,793 --> 00:04:55,762 line:-2
again maintaining
the UI’s grounding


90
00:04:55.796 --> 00:05:00.267 line:-2 align:center
but allowing your highlighted
information to still be visible.


91
00:05:00.300 --> 00:05:04.137 line:-2 align:center
In this example,
Pandora dims secondary controls


92
00:05:04.171 --> 00:05:07.207 line:-2 align:center
along the bottom
and removes the album artwork


93
00:05:07.241 --> 00:05:10.110 line:-2 align:center
and uses a similar
but dimmed color.


94
00:05:10.143 --> 00:05:13.480 line:-2 align:center
This works really well
to highlight the song name


95
00:05:13,514 --> 00:05:17,017 line:-2
and artist name
at a quick glance.


96
00:05:17.050 --> 00:05:20.153 line:-2 align:center
When luminance is reduced,
you may also want


97
00:05:20,187 --> 00:05:24,324 line:-2
to redact or remove
sensitive information.


98
00:05:24.358 --> 00:05:27.828 line:-2 align:center
Information like account
numbers, balances,


99
00:05:27,861 --> 00:05:31,164 line:-2
shown in this example,
and some personal health data


100
00:05:31.198 --> 00:05:33.333 line:-2 align:center
may be good candidates
to obscure


101
00:05:33.367 --> 00:05:36.837 line:-2 align:center
from prying eyes
while someone’s wrist is down.


102
00:05:36,870 --> 00:05:40,507 line:-2
To learn more
about redaction using SwiftUI,


103
00:05:40.541 --> 00:05:43.477 line:-2 align:center
see the “Principles
of great widgets” video


104
00:05:43.510 --> 00:05:44.778 line:-1 align:center
in the Developer app,


105
00:05:44,811 --> 00:05:48,582 line:-2
since widgets share
a similar redaction model.


106
00:05:48.615 --> 00:05:51.752 line:-2 align:center
Finally, if you have
animations happening,


107
00:05:51.785 --> 00:05:53.854 line:-2 align:center
you should reset them
to the first frame


108
00:05:53,887 --> 00:05:57,157 line:-2
of their loop or resolve them
to a rested state.


109
00:05:57.191 --> 00:06:00.761 line:-2 align:center
It’s best to not leave them
mid-animation.


110
00:06:00,794 --> 00:06:03,997 line:-2
Now that you know how
to make your UI look its best


111
00:06:04.031 --> 00:06:06.133 line:-2 align:center
in the always-on state,
let’s talk


112
00:06:06.166 --> 00:06:07.701 line:-1 align:center
about the technical side


113
00:06:07,734 --> 00:06:11,972 line:-2
of how you update your app's UI
while the wrist is down.


114
00:06:12.005 --> 00:06:15.142 line:-2 align:center
For apps with an ongoing,
active session


115
00:06:15,175 --> 00:06:17,978 line:-2
like a workout session
or audio session


116
00:06:18.011 --> 00:06:20.013 line:-2 align:center
that gives you
continuous runtime,


117
00:06:20,047 --> 00:06:23,550 line:-2
you can update your UI
up to once per second.


118
00:06:23.584 --> 00:06:25.886 line:-2 align:center
This allows you
to keep counters,


119
00:06:25.919 --> 00:06:28.789 line:-2 align:center
metrics,
and other data up to date,


120
00:06:28.822 --> 00:06:30.991 line:-2 align:center
though will require you
to remove


121
00:06:31.024 --> 00:06:35.128 line:-2 align:center
sub-second incrementing,
like tenths of seconds.


122
00:06:35.162 --> 00:06:37.564 line:-2 align:center
For apps
without an active session,


123
00:06:37.598 --> 00:06:41.401 line:-2 align:center
you may update
up to once per minute.


124
00:06:41.435 --> 00:06:44.638 line:-2 align:center
While the default timeout
before the system returns


125
00:06:44,671 --> 00:06:46,773 line:-2
to the clock face
is two minutes,


126
00:06:46,807 --> 00:06:50,377 line:-2
you should plan for your app
being visible longer than this,


127
00:06:50.410 --> 00:06:54.014 line:-2 align:center
as your customers may
change this setting.


128
00:06:54,047 --> 00:06:57,417 line:-2
So how do you tell us
that your inactive app needs


129
00:06:57,451 --> 00:06:59,052 line:-1
to update its UI?


130
00:06:59,086 --> 00:07:03,524 line:-2
For that, we’ve created
a TimelineView in SwiftUI.


131
00:07:03,557 --> 00:07:05,926 line:-1
TimelineView takes a schedule


132
00:07:05.959 --> 00:07:09.196 line:-2 align:center
and constructs a view dependent
on a date.


133
00:07:09,229 --> 00:07:11,698 line:-2
When it comes
to scheduling updates,


134
00:07:11.732 --> 00:07:15.068 line:-2 align:center
we’ve provided a handful
of TimelineSchedules


135
00:07:15,102 --> 00:07:18,805 line:-2
to help you do whatever
is right for your app.


136
00:07:18.839 --> 00:07:22.843 line:-2 align:center
There is Every minute,
which updates every minute.


137
00:07:22.876 --> 00:07:27.581 line:-2 align:center
This also aligns to the system
clock, meaning that each update


138
00:07:27.614 --> 00:07:31.385 line:-2 align:center
will occur at the top
of the minute on the device.


139
00:07:31,418 --> 00:07:34,788 line:-2
There’s Periodic, which allows
you to set an interval,


140
00:07:34.821 --> 00:07:36.490 line:-1 align:center
such as every two minutes


141
00:07:36.523 --> 00:07:39.927 line:-2 align:center
or whatever is appropriate
for your app.


142
00:07:39.960 --> 00:07:43.730 line:-2 align:center
If you use a periodic schedule
for one-minute intervals,


143
00:07:43.764 --> 00:07:46.700 line:-2 align:center
they are not aligned
to the system clock.


144
00:07:46.733 --> 00:07:50.037 line:-2 align:center
This can be really useful
if you need to time an update


145
00:07:50.070 --> 00:07:54.908 line:-2 align:center
in relation to a specific event,
like when a workout was started.


146
00:07:54,942 --> 00:07:57,878 line:-2
There’s Explicit,
if you have changes that occur


147
00:07:57.911 --> 00:08:02.482 line:-2 align:center
at specific times, such as
needing an update at 1.5 minutes


148
00:08:02,516 --> 00:08:07,287 line:-2
followed by an update
2.5 minutes later, and so on.


149
00:08:07.321 --> 00:08:09.089 line:-1 align:center
There’s also Custom.


150
00:08:09.122 --> 00:08:11.692 line:-2 align:center
This can work really well
if you have something


151
00:08:11.725 --> 00:08:15.462 line:-2 align:center
like a timer that updates
every minute but you’d like it


152
00:08:15,495 --> 00:08:20,367 line:-2
to update once per second
for the last 60 seconds.


153
00:08:20.400 --> 00:08:24.104 line:-2 align:center
If your app is not in an active
session and you tell us


154
00:08:24.137 --> 00:08:27.040 line:-2 align:center
that you need faster updates
for a short period,


155
00:08:27,074 --> 00:08:30,210 line:-2
as in the last 60
seconds of this timer,


156
00:08:30.244 --> 00:08:32.679 line:-2 align:center
the system will
attempt to do so,


157
00:08:32.713 --> 00:08:35.949 line:-2 align:center
but those updates
are not guaranteed.


158
00:08:35.983 --> 00:08:39.353 line:-2 align:center
Finally,
there’s an Animation schedule.


159
00:08:39,386 --> 00:08:42,656 line:-2
To learn more
about TimelineView, schedules,


160
00:08:42,689 --> 00:08:47,160 line:-2
animations, and more, watch
the “What’s new in SwiftUI"


161
00:08:47.194 --> 00:08:50.831 line:-2 align:center
and the “Add rich graphics
to your SwiftUI app” videos


162
00:08:50,864 --> 00:08:53,100 line:-1
in the Developer app.


163
00:08:53.133 --> 00:08:55.502 line:-1 align:center
We love the impact that health


164
00:08:55.536 --> 00:08:58.071 line:-2 align:center
and fitness apps have
made on Apple Watch.


165
00:08:58,105 --> 00:09:01,175 line:-2
In watchOS 8, we’ve brought
background delivery


166
00:09:01.208 --> 00:09:03.243 line:-1 align:center
of HealthKit data to Watch apps.


167
00:09:03.277 --> 00:09:06.413 line:-2 align:center
This opens up passive
health monitoring for apps


168
00:09:06,446 --> 00:09:09,850 line:-2
and can make a big impact
for standalone Watch apps


169
00:09:09.883 --> 00:09:13.654 line:-2 align:center
used
in Family Setup configurations.


170
00:09:13,687 --> 00:09:16,590 line:-2
Setting up background
delivery of HealthKit data


171
00:09:16,623 --> 00:09:19,560 line:-1
works similarly to iOS.


172
00:09:19,593 --> 00:09:23,530 line:-2
On watchOS, when the predicate
matches due to new health data


173
00:09:23,564 --> 00:09:26,567 line:-2
being collected and
your background observer query


174
00:09:26,600 --> 00:09:31,038 line:-2
gets handled, your app is woken
to receive results.


175
00:09:31.071 --> 00:09:35.509 line:-2 align:center
This can be up to once per hour
for a Watch app.


176
00:09:35,542 --> 00:09:38,145 line:-2
If someone has added
your app’s complications


177
00:09:38,178 --> 00:09:39,780 line:-1
to their active watch face,


178
00:09:39.813 --> 00:09:44.351 line:-2 align:center
you can receive results
up to four times per hour.


179
00:09:44,384 --> 00:09:47,554 line:-2
All of these opportunities
will count against your app’s


180
00:09:47.588 --> 00:09:51.124 line:-2 align:center
background app refresh budget,
so they will only add up


181
00:09:51,158 --> 00:09:55,362 line:-2
to a maximum of four results
being received per hour and


182
00:09:55.395 --> 00:09:59.967 line:-2 align:center
could impact background app
refresh wakes for other reasons.


183
00:10:00,000 --> 00:10:02,669 line:-2
Let’s talk
about update frequencies.


184
00:10:02.703 --> 00:10:04.972 line:-2 align:center
When we deliver results
to your app,


185
00:10:05,005 --> 00:10:08,775 line:-2
we will do it immediately
for various critical data types,


186
00:10:08.809 --> 00:10:11.011 line:-1 align:center
including fall events,


187
00:10:11.044 --> 00:10:16.216 line:-2 align:center
low blood oxygen saturation,
heart rate events, and more.


188
00:10:16.250 --> 00:10:18.352 line:-2 align:center
Look at the developer
documentation


189
00:10:18.385 --> 00:10:20.320 line:-1 align:center
on the Apple Developer website


190
00:10:20,354 --> 00:10:24,057 line:-2
for the full list
of affected data types.


191
00:10:24,091 --> 00:10:27,294 line:-2
All other data types
will be delivered hourly


192
00:10:27.327 --> 00:10:29.796 line:-1 align:center
or at longer intervals.


193
00:10:29.830 --> 00:10:32.132 line:-1 align:center
We’ve also added new information


194
00:10:32,165 --> 00:10:34,168 line:-2
in the HealthKit authorization
sheet


195
00:10:34.201 --> 00:10:36.970 line:-2 align:center
to let customers know
that your app has increased


196
00:10:37.004 --> 00:10:40.574 line:-2 align:center
awareness of their health data
on Apple Watch.


197
00:10:40,607 --> 00:10:43,610 line:-2
We think background delivery
of HealthKit data will


198
00:10:43,644 --> 00:10:45,679 line:-2
bring new possibilities
to health


199
00:10:45.712 --> 00:10:49.550 line:-2 align:center
and fitness related
complications on the watch face.


200
00:10:49.583 --> 00:10:53.820 line:-2 align:center
In watchOS 4, we enabled
Bluetooth devices to connect


201
00:10:53,854 --> 00:10:57,958 line:-2
directly to Apple Watch
and make use of Core Bluetooth.


202
00:10:57.991 --> 00:11:02.462 line:-2 align:center
We’ve seen some really
incredible uses of this.


203
00:11:02.496 --> 00:11:05.666 line:-2 align:center
In watchOS 8,
we’re taking another step


204
00:11:05,699 --> 00:11:08,502 line:-2
forward and allowing devices
to connect


205
00:11:08.535 --> 00:11:12.005 line:-2 align:center
during background app refresh
opportunities that your app’s


206
00:11:12.039 --> 00:11:16.210 line:-2 align:center
complications get when they’re
on the active watch face.


207
00:11:16,243 --> 00:11:20,447 line:-2
For instance, this is Qardio,
which allows people to monitor


208
00:11:20.480 --> 00:11:25.185 line:-2 align:center
their heart conditions
with Qardio’s medical grade ECG.


209
00:11:25,219 --> 00:11:28,822 line:-2
And this is Sonra Watch,
which allows soccer coaches,


210
00:11:28,856 --> 00:11:31,692 line:-2
or football, for those
of you outside of the U.S.,


211
00:11:31,725 --> 00:11:35,863 line:-2
to monitor up to 28 real-time
metrics of their players’


212
00:11:35,896 --> 00:11:40,501 line:-2
performance during training
using their GPS tracker.


213
00:11:40,534 --> 00:11:44,071 line:-2
With Bluetooth connections
during background app refresh,


214
00:11:44.104 --> 00:11:47.007 line:-2 align:center
this means that your app’s
complications can stay


215
00:11:47.040 --> 00:11:49.276 line:-2 align:center
up to date
with your Bluetooth device


216
00:11:49.309 --> 00:11:54.047 line:-2 align:center
and display updated
information throughout the day.


217
00:11:54.081 --> 00:11:57.518 line:-2 align:center
Background app refresh
gives your app’s complications


218
00:11:57.551 --> 00:12:01.221 line:-2 align:center
that are on the active watch
face up to four opportunities


219
00:12:01.255 --> 00:12:04.625 line:-1 align:center
per hour to connect and update.


220
00:12:04.658 --> 00:12:07.227 line:-2 align:center
Remember that these
opportunities will count


221
00:12:07.261 --> 00:12:11.798 line:-2 align:center
against your app’s overall
background app refresh budget.


222
00:12:11,832 --> 00:12:14,868 line:-2
Make sure to set up
your initial device connection


223
00:12:14,902 --> 00:12:16,970 line:-2
when the app is
in the foreground.


224
00:12:17.004 --> 00:12:20.073 line:-2 align:center
This can’t be done
from the background.


225
00:12:20,107 --> 00:12:23,010 line:-2
Once a connection
to the device is established,


226
00:12:23.043 --> 00:12:26.413 line:-2 align:center
background app refresh
gives your app the opportunity


227
00:12:26,446 --> 00:12:29,216 line:-1
to connect and get new data.


228
00:12:29.249 --> 00:12:32.519 line:-2 align:center
It’s also important to connect
and process your data


229
00:12:32.553 --> 00:12:35.355 line:-2 align:center
within a very short period
of time.


230
00:12:35.389 --> 00:12:37.324 line:-2 align:center
To help you with this,
we’ve added


231
00:12:37,357 --> 00:12:41,628 line:-2
a new expiration handler
on WKRefreshBackgroundTask


232
00:12:41.662 --> 00:12:44.898 line:-2 align:center
so you can be told when
you’re about to run out of time


233
00:12:44,932 --> 00:12:47,401 line:-2
and need to finish up
what you’re doing.


234
00:12:47.434 --> 00:12:50.537 line:-2 align:center
This allows your app to clean up
and degrade gracefully


235
00:12:50.571 --> 00:12:51.939 line:-1 align:center
if needed.


236
00:12:51.972 --> 00:12:55.676 line:-2 align:center
For more information, watch
“Connect Bluetooth devices


237
00:12:55.709 --> 00:12:58.979 line:-2 align:center
to Apple Watch”
in the Developer app.


238
00:12:59.012 --> 00:13:02.316 line:-2 align:center
Apple Watch is the device
that’s always on you.


239
00:13:02,349 --> 00:13:05,752 line:-2
With independent Watch apps
becoming more prevalent and


240
00:13:05.786 --> 00:13:09.456 line:-2 align:center
customers increasingly running
out for coffee or to the store


241
00:13:09.489 --> 00:13:12.526 line:-2 align:center
with only their watch,
location is a key part


242
00:13:12,559 --> 00:13:15,229 line:-2
of staying on top
of what’s important.


243
00:13:15,262 --> 00:13:16,530 line:-1
In watchOS 8,


244
00:13:16.563 --> 00:13:20.701 line:-2 align:center
we’re bringing region-based user
notifications to Apple Watch.


245
00:13:20,734 --> 00:13:23,971 line:-2
This means you can get notified
of important things


246
00:13:24,004 --> 00:13:27,307 line:-1
based on geofences.


247
00:13:27.341 --> 00:13:30.010 line:-2 align:center
For example,
you can be reminded to start


248
00:13:30.043 --> 00:13:33.780 line:-2 align:center
your skiing workout when you’re
at the lift, using Slopes.


249
00:13:33.814 --> 00:13:36.683 line:-2 align:center
Or you can receive
your flight information


250
00:13:36.717 --> 00:13:40.521 line:-2 align:center
when you get to the airport
using App in the Air.


251
00:13:40,554 --> 00:13:43,824 line:-2
Region-based user notifications
on watchOS


252
00:13:43.857 --> 00:13:46.493 line:-1 align:center
work similarly to iOS.


253
00:13:46.527 --> 00:13:48.929 line:-2 align:center
To preserve
your customers’ privacy,


254
00:13:48,962 --> 00:13:52,199 line:-2
they will first receive
a static notification where


255
00:13:52.232 --> 00:13:56.537 line:-2 align:center
they can tap a button to see
the full dynamic notification.


256
00:13:56,570 --> 00:14:00,674 line:-2
This allows you to deliver
pre-created local notifications


257
00:14:00.707 --> 00:14:04.978 line:-2 align:center
based on someone entering
or exiting a region you’ve set


258
00:14:05.012 --> 00:14:08.749 line:-2 align:center
for a notification trigger
based on location.


259
00:14:08.782 --> 00:14:12.619 line:-2 align:center
Keep in mind that the “When
in use” permission is required


260
00:14:12.653 --> 00:14:15.789 line:-2 align:center
for you to take advantage
of this.


261
00:14:15,822 --> 00:14:19,526 line:-2
You should also limit the number
of regions to only include


262
00:14:19.560 --> 00:14:22.229 line:-2 align:center
important points of interest
near someone


263
00:14:22.262 --> 00:14:25.532 line:-2 align:center
or locations they’ve
shown explicit intent for,


264
00:14:25,566 --> 00:14:28,635 line:-2
like setting
a favorite store location.


265
00:14:28.669 --> 00:14:31.538 line:-2 align:center
Regions are most power-effective
when they're


266
00:14:31.572 --> 00:14:35.209 line:-2 align:center
about a couple hundred meters
in radius.


267
00:14:35,242 --> 00:14:39,413 line:-2
Alongside region-based
user notifications, watchOS 8


268
00:14:39,446 --> 00:14:43,383 line:-2
supports the new location
button in Core Location.


269
00:14:43.417 --> 00:14:48.155 line:-2 align:center
This button gives a one-time
location authorization without


270
00:14:48.188 --> 00:14:52.392 line:-2 align:center
going through authorization
prompts each time it’s tapped.


271
00:14:52.426 --> 00:14:53.727 line:-1 align:center
Behind the scenes,


272
00:14:53.760 --> 00:14:58.065 line:-2 align:center
it acts like an "Allow once”
traditional authorization.


273
00:14:58,098 --> 00:15:01,235 line:-2
The location button
is an easy way to gain trust


274
00:15:01.268 --> 00:15:04.271 line:-2 align:center
from people by giving them
more control


275
00:15:04,304 --> 00:15:06,974 line:-2
of when they want
to share their location.


276
00:15:07.007 --> 00:15:09.977 line:-2 align:center
For more information
on Core Location updates


277
00:15:10.010 --> 00:15:15.549 line:-2 align:center
in watchOS 8 and iOS 15,
watch “Meet the location button"


278
00:15:15,582 --> 00:15:18,652 line:-1
available in the Developer app.


279
00:15:18.685 --> 00:15:22.723 line:-2 align:center
We’re also introducing
a new always-on altimeter API


280
00:15:22.756 --> 00:15:24.291 line:-1 align:center
in Core Motion.


281
00:15:24,324 --> 00:15:27,828 line:-2
This gives you access
to real-time elevation updates


282
00:15:27,861 --> 00:15:31,665 line:-2
with minimal impact to all-day
battery life and without


283
00:15:31.698 --> 00:15:34.968 line:-2 align:center
requiring someone to share
their location with the app.


284
00:15:35,002 --> 00:15:38,805 line:-2
Aside from new features
and APIs coming to watchOS 8,


285
00:15:38,839 --> 00:15:41,842 line:-2
we’ve made a lot of enhancements
to make developing


286
00:15:41,875 --> 00:15:44,912 line:-2
and using your Watch apps
easier than ever.


287
00:15:44.945 --> 00:15:47.714 line:-2 align:center
With watchOS 8,
Apple Watch can now


288
00:15:47,748 --> 00:15:50,684 line:-2
measure respiratory rate
while you sleep.


289
00:15:50,717 --> 00:15:54,521 line:-2
This allows apps
like Sleep Details to display


290
00:15:54.555 --> 00:15:57.691 line:-2 align:center
your respiratory rate data
and visualize changes


291
00:15:57.724 --> 00:16:00.194 line:-1 align:center
when you wake up in the morning.


292
00:16:00.227 --> 00:16:02.496 line:-2 align:center
We’re happy
to bring AssistiveTouch


293
00:16:02,529 --> 00:16:05,699 line:-2
to Apple Watch for those
with limb differences.


294
00:16:05.732 --> 00:16:09.703 line:-2 align:center
This is really exciting because
we can recognize a person’s hand


295
00:16:09,736 --> 00:16:14,775 line:-2
gestures to help them
perform actions and navigate UI.


296
00:16:14,808 --> 00:16:18,178 line:-2
We’re also bringing
a large accessibility text size


297
00:16:18,212 --> 00:16:20,280 line:-1
to watchOS 8.


298
00:16:20.314 --> 00:16:23.851 line:-2 align:center
To learn more on making
your Watch app more accessible,


299
00:16:23,884 --> 00:16:27,588 line:-2
watch “Create accessible
experiences for watchOS”


300
00:16:27.621 --> 00:16:30.924 line:-1 align:center
in the Developer app.


301
00:16:30.958 --> 00:16:33.994 line:-2 align:center
Unit testing and UI testing
for Watch apps


302
00:16:34.027 --> 00:16:37.030 line:-1 align:center
was introduced in Xcode 12.5.


303
00:16:37.064 --> 00:16:40.367 line:-2 align:center
But making your apps accessible
is what allows them


304
00:16:40.400 --> 00:16:43.604 line:-2 align:center
to be testable, so with new
accessibility features


305
00:16:43,637 --> 00:16:46,440 line:-2
on watchOS, the time
has never been better


306
00:16:46.473 --> 00:16:49.710 line:-2 align:center
to make your apps
more accessible.


307
00:16:49.743 --> 00:16:54.515 line:-2 align:center
watchOS 8 also adds large titles
at the top of scrolling views,


308
00:16:54.548 --> 00:16:56.250 line:-1 align:center
like you see in iOS,


309
00:16:56,283 --> 00:17:01,154 line:-2
allowing for a more consistent
feel across devices.


310
00:17:01,188 --> 00:17:04,324 line:-2
Text input has been revamped
in watchOS 8,


311
00:17:04.358 --> 00:17:06.927 line:-2 align:center
remembering if someone
prefers Scribble


312
00:17:06.960 --> 00:17:10.130 line:-2 align:center
or Dictation per app,
and giving quick access


313
00:17:10.163 --> 00:17:13.700 line:-2 align:center
to changing between input types
while entering text.


314
00:17:13.734 --> 00:17:17.271 line:-2 align:center
This allows much more text
to be easily entered,


315
00:17:17,304 --> 00:17:23,110 line:-2
and you get this functionality
free with SwiftUI text fields.


316
00:17:23.143 --> 00:17:27.381 line:-2 align:center
The new searchable API allows
you to easily add search fields


317
00:17:27,414 --> 00:17:30,717 line:-2
to your apps
with customized suggestions.


318
00:17:30,751 --> 00:17:33,187 line:-2
Customers will see
a button in the search field


319
00:17:33.220 --> 00:17:36.557 line:-2 align:center
indicating suggestions
are available.


320
00:17:36.590 --> 00:17:40.928 line:-2 align:center
When they tap on that, they’ll
see your customized suggestions.


321
00:17:40.961 --> 00:17:44.765 line:-2 align:center
You can also provide
customized UI for results.


322
00:17:44.798 --> 00:17:48.702 line:-2 align:center
You can learn more by watching
the “Craft search experiences


323
00:17:48.735 --> 00:17:53.540 line:-2 align:center
in SwiftUI” video
in the Developer app.


324
00:17:53.574 --> 00:17:58.111 line:-2 align:center
Lists now support swipe actions,
so in addition to removing


325
00:17:58,145 --> 00:18:02,983 line:-2
items, you can now perform
custom actions like favoriting.


326
00:18:03,016 --> 00:18:06,753 line:-2
Button roles let the system
know how to present and handle


327
00:18:06.787 --> 00:18:09.957 line:-2 align:center
specific button types,
like destructive ones,


328
00:18:09,990 --> 00:18:13,260 line:-2
but they also include
a controlProminence modifier,


329
00:18:13.293 --> 00:18:15.028 line:-1 align:center
which will give those buttons


330
00:18:15.062 --> 00:18:18.098 line:-2 align:center
an additional haptic
when tapped.


331
00:18:18,131 --> 00:18:22,803 line:-2
And the SwiftUI Canvas API
is also available on watchOS 8,


332
00:18:22,836 --> 00:18:25,639 line:-2
which means you can
do rich programmatic drawing


333
00:18:25,672 --> 00:18:30,010 line:-2
that uses the incredible GPU
found in Apple Watch.


334
00:18:30.043 --> 00:18:32.513 line:-2 align:center
There are many reasons
to be excited


335
00:18:32,546 --> 00:18:36,550 line:-2
about new possibilities
on Apple Watch with watchOS 8.


336
00:18:36.583 --> 00:18:40.487 line:-2 align:center
TimelineView can help you update
your UI when a person’s wrist


337
00:18:40.521 --> 00:18:43.824 line:-2 align:center
is down and they need
to get info at a quick glance.


338
00:18:43.857 --> 00:18:46.593 line:-2 align:center
This is something
all apps should adopt,


339
00:18:46.627 --> 00:18:48.896 line:-1 align:center
so check it out first.


340
00:18:48,929 --> 00:18:51,798 line:-2
Your app’s complications
have gained new ways


341
00:18:51.832 --> 00:18:55.202 line:-2 align:center
to get updated information
to them with background delivery


342
00:18:55.235 --> 00:18:58.205 line:-2 align:center
of HealthKit data
and Bluetooth connections.


343
00:18:58,238 --> 00:19:00,707 line:-2
This further supports
that complications


344
00:19:00.741 --> 00:19:04.378 line:-2 align:center
are a main way
some people use Watch apps.


345
00:19:04,411 --> 00:19:06,547 line:-2
If you can deliver more
at a glance,


346
00:19:06.580 --> 00:19:09.349 line:-1 align:center
you absolutely should.


347
00:19:09.383 --> 00:19:11.919 line:-2 align:center
Region-based
user notifications have


348
00:19:11,952 --> 00:19:15,155 line:-2
enhanced what location means
to Watch apps.


349
00:19:15,189 --> 00:19:18,859 line:-2
Adopting these where they make
sense can add that surprise


350
00:19:18,892 --> 00:19:23,530 line:-2
and delight moment that keeps
customers engaged in your app.


351
00:19:23,564 --> 00:19:27,267 line:-2
And finally, making
use of next-level capabilities


352
00:19:27,301 --> 00:19:30,737 line:-2
like AssistiveTouch and
the SwiftUI Canvas API can make


353
00:19:30.771 --> 00:19:35.209 line:-2 align:center
your Watch apps more useable
and more immersive than ever.


354
00:19:35.242 --> 00:19:38.745 line:-2 align:center
I’ll be watching
to see what you create.


355
00:19:38,779 --> 00:19:40,347 line:-1
Thank you.


356
00:19:40.380 --> 00:19:42.449 line:-1 align:center
[music]

