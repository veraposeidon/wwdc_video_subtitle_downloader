2
00:00:02.002 --> 00:00:05.005 line:-1 align:center
[percussive music]


3
00:00:09,309 --> 00:00:12,446 line:-2
[Manjeet]
Hello, and welcome to WWDC.


4
00:00:12,446 --> 00:00:15,516 line:-2
My name is Manjeet Chawla,
a technical program manager


5
00:00:15,516 --> 00:00:17,751 line:-2
at the App Store,
and I'm really excited


6
00:00:17,751 --> 00:00:20,721 line:-2
to talk about some new
features that will help you


7
00:00:20.721 --> 00:00:23.857 line:-2 align:center
support customers
and handle refunds.


8
00:00:23.857 --> 00:00:26.393 line:-2 align:center
This is the third session
of a three-part series


9
00:00:26,393 --> 00:00:28,862 line:-1
focusing on in-app purchases.


10
00:00:28.862 --> 00:00:31.665 line:-2 align:center
And if you haven't already
watched "Meet StoreKit 2"


11
00:00:31.665 --> 00:00:34.535 line:-2 align:center
or "Manage in-app purchases
on your server,"


12
00:00:34.535 --> 00:00:37.037 line:-2 align:center
I recommend you
take a look after this session


13
00:00:37.037 --> 00:00:39.640 line:-1 align:center
so you get the full story.


14
00:00:39,640 --> 00:00:42,643 line:-2
In this session, I'll first talk
about customer support


15
00:00:42.643 --> 00:00:45.078 line:-2 align:center
and how you can provide
contextual support


16
00:00:45,078 --> 00:00:47,080 line:-1
to your customers.


17
00:00:47,080 --> 00:00:49,550 line:-2
And because refunds are
a critical part of support,


18
00:00:49,550 --> 00:00:52,352 line:-2
my colleague, Joe,
will talk about handling refunds


19
00:00:52.352 --> 00:00:56.990 line:-2 align:center
and a new server API to inform
and improve the refund process.


20
00:00:56.990 --> 00:00:58.992 line:-2 align:center
Let's start with supporting
customers,


21
00:00:58.992 --> 00:01:02.996 line:-2 align:center
the benefits and the challenges
of providing scalable support


22
00:01:02.996 --> 00:01:06.633 line:-2 align:center
as your business
grows on the App Store.


23
00:01:06.633 --> 00:01:09.703 line:-2 align:center
Whether your app offers
auto-renewing subscriptions


24
00:01:09.703 --> 00:01:12.539 line:-2 align:center
or one-time in-app
purchases like consumables


25
00:01:12,539 --> 00:01:15,909 line:-2
or non-consumables,
we are introducing new StoreKit


26
00:01:15,909 --> 00:01:19,613 line:-2
and App Store server APIs
for you to help resolve


27
00:01:19,613 --> 00:01:23,584 line:-2
customer support issues in
a timely and efficient manner.


28
00:01:23,584 --> 00:01:25,686 line:-2
And in addition to providing
support,


29
00:01:25,686 --> 00:01:29,323 line:-2
these APIs will help you manage
your relationships


30
00:01:29.323 --> 00:01:33.460 line:-2 align:center
with existing customers after
you initially acquire them,


31
00:01:33.460 --> 00:01:36.063 line:-1 align:center
increase your overall retention,


32
00:01:36.063 --> 00:01:38.198 line:-1 align:center
improve customer satisfaction,


33
00:01:38,198 --> 00:01:41,068 line:-2
which can
lead to higher engagement,


34
00:01:41.068 --> 00:01:44.972 line:-2 align:center
and reduce churn that grows
your long-term revenue.


35
00:01:44.972 --> 00:01:48.008 line:-2 align:center
Today, if customers need help
for their in-app purchase,


36
00:01:48,008 --> 00:01:52,012 line:-2
they may either contact Apple
or you, the developer.


37
00:01:52,012 --> 00:01:53,680 line:-1
And based on the scenario,


38
00:01:53.680 --> 00:01:57.284 line:-2 align:center
customers can either use
Apple's self-service website,


39
00:01:57.284 --> 00:01:59.086 line:-1 align:center
"Report-A-Problem,"


40
00:01:59.086 --> 00:02:00.954 line:-1 align:center
or contact Apple Support


41
00:02:00,954 --> 00:02:05,759 line:-2
via phone, email, or chat
to address the issue.


42
00:02:05,759 --> 00:02:08,662 line:-2
Alternatively,
they may also contact you


43
00:02:08.662 --> 00:02:14.067 line:-2 align:center
via social media, forums,
or live-chat inside the app.


44
00:02:14,067 --> 00:02:16,937 line:-2
And when they contact you
about an in-app purchase,


45
00:02:16,937 --> 00:02:20,541 align:center
the issue may fall into
one of these scenarios.


46
00:02:20,541 --> 00:02:24,244 align:center
From identifying customer's
in-app purchases or refunds,


47
00:02:24,244 --> 00:02:26,880 line:0
to providing compensation
for a service issue


48
00:02:26,880 --> 00:02:29,583 align:center
or an outage,
or helping them manage


49
00:02:29,583 --> 00:02:32,653 align:center
their subscription
or request a refund,


50
00:02:32,653 --> 00:02:35,422 line:0
these questions cover most
of the support scenarios,


51
00:02:35,422 --> 00:02:39,426 line:0
and I'll walk through each
scenario in more detail.


52
00:02:39,426 --> 00:02:41,161 line:-2
Let's start with the first
scenario,


53
00:02:41,161 --> 00:02:44,198 line:-2
how do you identify
the purchases made by a customer


54
00:02:44.198 --> 00:02:46.900 line:-2 align:center
when they first contact you
for support?


55
00:02:46,900 --> 00:02:49,636 line:-2
Now, if you've purchased any
content on the App Store,


56
00:02:49,636 --> 00:02:51,872 line:-2
you may already have seen
this email.


57
00:02:51.872 --> 00:02:54.441 line:-2 align:center
Today, when customers
make an in-app purchase,


58
00:02:54.441 --> 00:02:58.345 line:-2 align:center
they receive an invoice
for that purchase via email.


59
00:02:58,345 --> 00:03:00,714 line:-2
This invoice contains
an order ID,


60
00:03:00,714 --> 00:03:03,750 line:-2
which is unique
for each invoice.


61
00:03:03.750 --> 00:03:07.087 line:-2 align:center
And customers have access
to this via email or by


62
00:03:07,087 --> 00:03:10,824 line:-2
looking at the purchase history
under account settings.


63
00:03:10,824 --> 00:03:13,360 line:-2
And now, when a customer
contacts you for support,


64
00:03:13,360 --> 00:03:16,263 line:-2
you can ask the customer
for the order ID


65
00:03:16.263 --> 00:03:20.567 line:-2 align:center
on their invoice and use a new
server-to-server API


66
00:03:20.567 --> 00:03:22.402 line:-1 align:center
to lookup in-app purchases


67
00:03:22.402 --> 00:03:25.839 line:-2 align:center
for the invoice
presented by the customer.


68
00:03:25.839 --> 00:03:28.242 line:-2 align:center
In addition to validating
the invoice,


69
00:03:28.242 --> 00:03:30.544 line:-1 align:center
this API also helps you identify


70
00:03:30.544 --> 00:03:32.713 line:-2 align:center
any issues
with the in-app purchase.


71
00:03:32.713 --> 00:03:35.382 line:-2 align:center
For example,
if the invoice contains


72
00:03:35.382 --> 00:03:40.020 line:-2 align:center
any purchases that have already
been refunded by the App Store.


73
00:03:40.020 --> 00:03:44.324 line:-2 align:center
Now, let's take a look
at how this API works.


74
00:03:44.324 --> 00:03:46.994 line:-2 align:center
So now, when a customer
contacts your support team,


75
00:03:46.994 --> 00:03:50.097 line:-2 align:center
you can ask the customer
for the invoice order ID,


76
00:03:50,097 --> 00:03:53,300 line:-2
and your server can call
the invoice lookup API,


77
00:03:53.300 --> 00:03:56.370 line:-2 align:center
and, in response,
the App Store returns a status


78
00:03:56,370 --> 00:04:01,241 line:-2
and the transactions for that
invoice signed in a JWS format.


79
00:04:01,241 --> 00:04:03,377 align:center
And finally,
using this information,


80
00:04:03,377 --> 00:04:04,745 align:center
you can provide support


81
00:04:04,745 --> 00:04:08,215 align:center
for the correct
in-app purchases.


82
00:04:08,215 --> 00:04:10,450 line:-2
To implement
this API on your server,


83
00:04:10.450 --> 00:04:12.819 line:-1 align:center
you can call the lookup endpoint


84
00:04:12.819 --> 00:04:15.956 line:-2 align:center
with the invoice order ID
in the URL


85
00:04:15.956 --> 00:04:20.527 line:-2 align:center
and the Apple ID
for the app in the request.


86
00:04:20,527 --> 00:04:24,198 line:-2
The response includes
a signedTransactions object,


87
00:04:24.198 --> 00:04:26.800 line:-2 align:center
which contains the transactions
for that invoice


88
00:04:26.800 --> 00:04:29.570 line:-1 align:center
signed in a JWS format.


89
00:04:29.570 --> 00:04:32.206 line:-2 align:center
You can decode the payload
for each transaction


90
00:04:32.206 --> 00:04:35.342 line:-2 align:center
to get the details
of the purchase.


91
00:04:35,342 --> 00:04:39,780 line:-2
Now, let's take a closer look
at the new status field.


92
00:04:39,780 --> 00:04:41,648 line:-2
This field
identifies the overall


93
00:04:41.648 --> 00:04:43.483 line:-1 align:center
status of the invoice.


94
00:04:43.483 --> 00:04:46.820 line:-2 align:center
The possible values are 0,
meaning the invoice is valid


95
00:04:46,820 --> 00:04:49,990 line:-2
and contains transactions
for this order ID,


96
00:04:49.990 --> 00:04:52.826 line:-2 align:center
1, meaning the order ID
is invalid,


97
00:04:52,826 --> 00:04:55,262 line:-2
and 2,
meaning the invoice is valid,


98
00:04:55.262 --> 00:04:59.366 line:-2 align:center
but no matching transactions
were found for this order ID.


99
00:04:59.366 --> 00:05:02.503 line:-2 align:center
Now, let's review an example
of how you can use


100
00:05:02,503 --> 00:05:05,239 line:-1
the response from this API.


101
00:05:05,239 --> 00:05:07,274 line:-2
Here's a sample customer
account database


102
00:05:07.274 --> 00:05:09.977 line:-2 align:center
where you might be storing
the originalTransactionId


103
00:05:09.977 --> 00:05:12.312 line:-2 align:center
for each customer's
in-app purchase,


104
00:05:12,312 --> 00:05:15,849 line:-2
along with the productID
and the purchase date.


105
00:05:15.849 --> 00:05:19.586 line:-2 align:center
Using this API, you can link
the invoice order ID


106
00:05:19.586 --> 00:05:21.822 line:-2 align:center
with the customer's
in-app purchases


107
00:05:21.822 --> 00:05:25.025 line:-2 align:center
when they
contact you about an issue.


108
00:05:25.025 --> 00:05:28.695 line:-2 align:center
For example, if this customer
purchased coins in your app,


109
00:05:28.695 --> 00:05:30.831 line:-2 align:center
and if they contact you
for support,


110
00:05:30,831 --> 00:05:36,470 line:-2
you can store the invoice order
ID for the purchased coins.


111
00:05:36,470 --> 00:05:38,539 line:-2
Now, let's take a scenario
where you have


112
00:05:38,539 --> 00:05:40,941 line:-2
the originalTransactionId
for a customer,


113
00:05:40.941 --> 00:05:43.911 line:-2 align:center
and you want to lookup
their past refunds.


114
00:05:43.911 --> 00:05:47.481 line:-2 align:center
Today, you might be relying
on verifyReceipt API


115
00:05:47.481 --> 00:05:49.816 line:-2 align:center
or App Store server
notifications


116
00:05:49.816 --> 00:05:52.786 line:-1 align:center
to get notified about refunds.


117
00:05:52,786 --> 00:05:55,989 line:-2
However, if there was an outage,
and your server did not


118
00:05:55,989 --> 00:05:58,692 line:-2
receive any notifications
from the App Store,


119
00:05:58,692 --> 00:06:02,262 line:-2
how do you lookup this
customer's past refunds?


120
00:06:02.262 --> 00:06:05.032 line:-2 align:center
We are introducing
a new server-to-server API


121
00:06:05.032 --> 00:06:08.035 line:-2 align:center
to lookup refunded transactions
for a customer


122
00:06:08.035 --> 00:06:10.237 line:-2 align:center
using the original
transaction ID


123
00:06:10.237 --> 00:06:14.141 line:-2 align:center
for any of their in-app
purchases within your app.


124
00:06:14.141 --> 00:06:17.144 line:-2 align:center
This API enables you
to handle an outage


125
00:06:17,144 --> 00:06:19,913 line:-2
or scheduled maintenance
by looking up refunds


126
00:06:19,913 --> 00:06:23,383 line:-2
at any time
in a quick and easy manner.


127
00:06:23.383 --> 00:06:26.320 line:-2 align:center
Additionally,
this API can also help you


128
00:06:26,320 --> 00:06:30,524 line:-2
identify the customer's entire
refund history for your app.


129
00:06:30,524 --> 00:06:32,759 line:-2
For example,
if your app offers


130
00:06:32,759 --> 00:06:35,395 line:-2
both subscriptions
and consumables,


131
00:06:35,395 --> 00:06:38,165 line:-2
this API returns all
the refunded transactions


132
00:06:38.165 --> 00:06:41.735 line:-1 align:center
across all your content types.


133
00:06:41,735 --> 00:06:44,071 line:-2
To implement this API
on your server,


134
00:06:44.071 --> 00:06:47.441 line:-2 align:center
you create the request
with original transaction ID


135
00:06:47.441 --> 00:06:50.444 line:-2 align:center
in the URL
and the Apple ID for the app


136
00:06:50.444 --> 00:06:53.313 line:-1 align:center
in the request parameters.


137
00:06:53.313 --> 00:06:56.850 line:-2 align:center
The response contains
a list of refunded transactions


138
00:06:56,850 --> 00:06:59,620 line:-1
signed in a JWS format.


139
00:06:59,620 --> 00:07:01,522 line:-2
You can get the all
the information needed


140
00:07:01,522 --> 00:07:04,224 line:-2
about the purchases
by decoding the payload


141
00:07:04,224 --> 00:07:07,361 line:-1
for each transaction.


142
00:07:07.361 --> 00:07:10.664 line:-2 align:center
So, going back to the sample
customer account database,


143
00:07:10.664 --> 00:07:14.301 line:-2 align:center
you can now use the information
returned by this API


144
00:07:14,301 --> 00:07:16,603 line:-2
to update
the refunded transactions


145
00:07:16,603 --> 00:07:19,973 line:-2
for this customer using
the original transaction ID.


146
00:07:22,242 --> 00:07:25,179 align:center
Now, after you've identified
there was a service issue,


147
00:07:25,179 --> 00:07:27,748 line:0
how do you compensate customers?


148
00:07:27.748 --> 00:07:30.717 line:-2 align:center
Today, there a few different
options to consider.


149
00:07:30,717 --> 00:07:33,220 line:-2
For games, you might
be providing some form


150
00:07:33,220 --> 00:07:34,788 line:-1
of in-app compensation


151
00:07:34.788 --> 00:07:38.225 line:-2 align:center
in the form of virtual currency
or content.


152
00:07:38,225 --> 00:07:40,727 line:-2
Or for subscriptions,
you may want to offer


153
00:07:40.727 --> 00:07:43.597 line:-2 align:center
a discount
on their next renewal.


154
00:07:43.597 --> 00:07:47.234 line:-2 align:center
So, how do you compensate
subscribers for a service issue?


155
00:07:47.234 --> 00:07:50.370 line:-2 align:center
In iOS 14,
we introduced a new feature


156
00:07:50,370 --> 00:07:53,574 line:-2
called Subscription Offer Codes
to help you acquire,


157
00:07:53,574 --> 00:07:55,709 line:-2
retain, and win back
subscribers


158
00:07:55.709 --> 00:07:58.545 line:-2 align:center
by providing a subscription
at a discount


159
00:07:58,545 --> 00:08:01,481 line:-1
or free for a limited time.


160
00:08:01.481 --> 00:08:04.051 line:-2 align:center
You can distribute these unique,
one-time codes


161
00:08:04.051 --> 00:08:07.554 line:-2 align:center
either using online
or offline channels.


162
00:08:07.554 --> 00:08:10.991 line:-2 align:center
And for customer service issues,
you can provide offer codes


163
00:08:10.991 --> 00:08:16.196 line:-2 align:center
as a compensation for the issue,
which helps improve retention.


164
00:08:16.196 --> 00:08:19.299 line:-2 align:center
You may also use this as
an opportunity to suggest


165
00:08:19.299 --> 00:08:21.168 line:-1 align:center
an alternative subscription.


166
00:08:21.168 --> 00:08:23.604 line:-2 align:center
For example,
a longer duration plan


167
00:08:23,604 --> 00:08:27,374 line:-2
that provides
more value at a lower price.


168
00:08:27,374 --> 00:08:31,445 line:-2
And customers on iOS
14 and iPadOS 14 and later


169
00:08:31.445 --> 00:08:34.181 line:-2 align:center
can redeem
offer codes on the App Store


170
00:08:34,181 --> 00:08:36,650 line:-2
through a one-time
code redemption URL


171
00:08:36.650 --> 00:08:39.019 line:-2 align:center
or within your app,
if you've implemented


172
00:08:39.019 --> 00:08:42.589 line:-2 align:center
the presentCodeRedemptionSheet
API in StoreKit.


173
00:08:42,589 --> 00:08:44,691 line:-2
Now, let's take a look
at a sample


174
00:08:44.691 --> 00:08:47.928 line:-2 align:center
code-redemption flow
within your app.


175
00:08:47.928 --> 00:08:51.064 line:-2 align:center
The only custom UI you
need to create is the one


176
00:08:51,064 --> 00:08:53,901 line:-2
that initiates
the redemption flow.


177
00:08:53.901 --> 00:08:57.471 line:-2 align:center
There are several natural
places to provide this UI.


178
00:08:57.471 --> 00:09:00.340 line:-2 align:center
For example,
in your app's settings screen


179
00:09:00,340 --> 00:09:02,676 line:-2
or inside a live-chat
functionality


180
00:09:02,676 --> 00:09:06,346 line:-2
when the customer is chatting
with your support agent.


181
00:09:06.346 --> 00:09:09.816 line:-2 align:center
After the customer taps
the redeem button,


182
00:09:09,816 --> 00:09:12,452 line:-2
the system automatically
provides a series


183
00:09:12.452 --> 00:09:15.989 line:-2 align:center
of code-redemption screens,
like the ones shown here,


184
00:09:15,989 --> 00:09:18,825 line:-2
for the customer to enter
the code and redeem the offer.


185
00:09:20.894 --> 00:09:22.462 line:-2 align:center
Now, let's take a look
at a scenario


186
00:09:22.462 --> 00:09:25.566 line:-2 align:center
where there was an outage
or an event was canceled,


187
00:09:25.566 --> 00:09:28.268 line:-2 align:center
which might be more common
for streaming-based apps,


188
00:09:28.268 --> 00:09:32.072 line:-2 align:center
such as sports, live TV,
or video.


189
00:09:32.072 --> 00:09:34.608 line:-2 align:center
For these
outages or canceled events,


190
00:09:34,608 --> 00:09:37,778 line:-1
how can you appease customers?


191
00:09:37,778 --> 00:09:40,547 line:-2
We are introducing a new
server-to-server API


192
00:09:40,547 --> 00:09:42,516 line:-2
for auto-renewable
subscriptions,


193
00:09:42,516 --> 00:09:46,653 line:-2
to extend the renewal date
for a paid active subscription.


194
00:09:46.653 --> 00:09:50.290 line:-2 align:center
With this API, you can offer
free service to your customers


195
00:09:50,290 --> 00:09:52,593 line:-2
for additional time,
which can be used


196
00:09:52,593 --> 00:09:57,764 line:-2
as an appeasement for temporary
outages or service issues.


197
00:09:57.764 --> 00:10:00.634 line:-2 align:center
You can move the renewal date
for a customer's subscription


198
00:10:00.634 --> 00:10:02.803 line:-1 align:center
twice per calendar year,


199
00:10:02.803 --> 00:10:05.205 line:-2 align:center
each up to 90 days
in the future,


200
00:10:05,205 --> 00:10:08,075 line:-2
giving you flexibility
to resolve service issues


201
00:10:08.075 --> 00:10:09.877 line:-1 align:center
or outages.


202
00:10:09,877 --> 00:10:12,513 line:-2
Note that the extension period
does not count towards


203
00:10:12,513 --> 00:10:14,515 line:-1
the one year of paid service


204
00:10:14.515 --> 00:10:18.552 line:-2 align:center
needed to receive
an 85% proceeds rate.


205
00:10:18.552 --> 00:10:20.053 line:-2 align:center
Now, let's see
how you can implement


206
00:10:20,053 --> 00:10:23,123 line:-1
this API on your server.


207
00:10:23.123 --> 00:10:26.093 line:-2 align:center
The request for this API
requires an original


208
00:10:26.093 --> 00:10:29.296 line:-2 align:center
transaction ID for the
customer's subscription,


209
00:10:29.296 --> 00:10:31.598 line:-1 align:center
the extension duration, in days,


210
00:10:31.598 --> 00:10:34.902 line:-2 align:center
and a reason code
for the extension.


211
00:10:34.902 --> 00:10:37.337 line:-2 align:center
The response contains
the transaction ID


212
00:10:37,337 --> 00:10:39,139 line:-2
that was
passed in the request,


213
00:10:39,139 --> 00:10:42,743 line:-2
the web order line item ID
for the extended renewal,


214
00:10:42,743 --> 00:10:46,547 line:-2
a success flag to indicate
whether the request succeeded


215
00:10:46,547 --> 00:10:48,682 line:-2
and an effective date
for the extension


216
00:10:48,682 --> 00:10:51,485 line:-1
if the request succeeded.


217
00:10:51.485 --> 00:10:53.654 line:-2 align:center
Now, let's take a look
at two different scenarios


218
00:10:53,654 --> 00:10:56,690 line:-1
where you can use this API.


219
00:10:56.690 --> 00:10:59.193 line:-2 align:center
In the first scenario,
when a customer contacts


220
00:10:59,193 --> 00:11:02,596 line:-2
your support team for
a service issue or an outage,


221
00:11:02,596 --> 00:11:05,632 line:-2
you can appease the customer
by calling this API,


222
00:11:05,632 --> 00:11:08,001 line:0
and, in response,
the App Store extends


223
00:11:08,001 --> 00:11:12,105 align:center
the subscription and notifies
the customer via email.


224
00:11:12,105 --> 00:11:15,075 line:0
Or a second scenario,
if there is a cancellation


225
00:11:15,075 --> 00:11:18,512 align:center
to a sports match due
to unforeseen situations,


226
00:11:18,512 --> 00:11:21,748 line:0
or an interruption
to a live-streamed event,


227
00:11:21,748 --> 00:11:25,052 align:center
your support team can
proactively use this API,


228
00:11:25,052 --> 00:11:27,120 line:0
and in response,
the App Store extends


229
00:11:27,120 --> 00:11:30,657 align:center
the subscription and notifies
the customers via email.


230
00:11:33.060 --> 00:11:35.095 line:-2 align:center
Now, for a scenario where
a customer wants


231
00:11:35,095 --> 00:11:37,064 line:-1
to manage their subscription,


232
00:11:37.064 --> 00:11:39.900 line:-2 align:center
how can you enable customers
to manage their subscription


233
00:11:39.900 --> 00:11:42.469 line:-1 align:center
right inside the app?


234
00:11:42.469 --> 00:11:45.239 line:-2 align:center
We are introducing
a new StoreKit 2 API


235
00:11:45.239 --> 00:11:47.574 line:-2 align:center
to display
the manage subscriptions page,


236
00:11:47,574 --> 00:11:49,543 line:-1
which enables you to provide


237
00:11:49.543 --> 00:11:51.712 line:-2 align:center
subscription management
functionality


238
00:11:51.712 --> 00:11:52.980 line:-1 align:center
right within your app,


239
00:11:52.980 --> 00:11:56.683 line:-2 align:center
without redirecting customers
to the App Store.


240
00:11:56.683 --> 00:12:00.787 line:-2 align:center
Optionally, you can also present
a save offer before they see


241
00:12:00.787 --> 00:12:04.057 line:-2 align:center
the manage subscriptions page,
or an exit survey


242
00:12:04.057 --> 00:12:08.495 line:-2 align:center
after they cancel to get
the cancellation reason.


243
00:12:08,495 --> 00:12:10,964 line:-2
And with this API,
you can also test


244
00:12:10.964 --> 00:12:14.568 line:-2 align:center
managing subscription purchases
in the sandbox environment.


245
00:12:16,370 --> 00:12:18,572 line:-2
This API is really
simple to implement,


246
00:12:18.572 --> 00:12:20.607 line:-1 align:center
and it takes one line of code.


247
00:12:20.607 --> 00:12:23.343 line:-2 align:center
You simply call the
showManageSubscriptions()


248
00:12:23.343 --> 00:12:28.582 line:-2 align:center
method in StoreKit 2 to display
the manage subscriptions page.


249
00:12:28.582 --> 00:12:31.785 line:-2 align:center
Now, let's take a look at a
sample manage subscription UI


250
00:12:31,785 --> 00:12:33,587 line:-1
in your app.


251
00:12:33,587 --> 00:12:35,989 line:-2
Under account settings,
we can add an option


252
00:12:35.989 --> 00:12:38.692 line:-2 align:center
for the user to manage
their subscription.


253
00:12:38,692 --> 00:12:42,229 line:-2
Once the customer
taps on this button,


254
00:12:42.229 --> 00:12:44.097 line:-2 align:center
the App Store will display
the existing


255
00:12:44,097 --> 00:12:45,766 line:-1
manage subscriptions page,


256
00:12:45.766 --> 00:12:47.901 line:-2 align:center
with the currently-active
subscription


257
00:12:47.901 --> 00:12:49.670 line:-1 align:center
and the renewal options.


258
00:12:49.670 --> 00:12:52.506 line:-2 align:center
This is the same view
customers are familiar with


259
00:12:52.506 --> 00:12:54.508 line:-2 align:center
with when they visit manage
subscriptions


260
00:12:54.508 --> 00:12:56.677 line:-2 align:center
under account
settings in the App Store,


261
00:12:56.677 --> 00:12:59.179 line:-2 align:center
where they can view,
upgrade, downgrade,


262
00:12:59,179 --> 00:13:01,348 line:-1
or cancel their subscription.


263
00:13:01,348 --> 00:13:04,284 line:-2
Now, if the customer selects
to cancel their subscription,


264
00:13:04.284 --> 00:13:06.220 line:-2 align:center
they will
see a confirmation screen


265
00:13:06,220 --> 00:13:10,390 line:-2
with the cancellation details
and the service expiration date.


266
00:13:10,390 --> 00:13:13,594 line:-2
And for any action the user
may take on this page,


267
00:13:13.594 --> 00:13:15.996 line:-2 align:center
your server
will receive an App Store


268
00:13:15,996 --> 00:13:19,199 line:-2
server notification,
and your app will be notified


269
00:13:19.199 --> 00:13:22.669 line:-2 align:center
if you've implemented
the new StoreKit 2 API.


270
00:13:22,669 --> 00:13:24,972 align:center
Finally,
if a customer is unhappy


271
00:13:24,972 --> 00:13:28,208 line:0
with their purchase and wants
to request a refund,


272
00:13:28,208 --> 00:13:31,011 align:center
they shouldn't have to leave
your app to get help.


273
00:13:31,011 --> 00:13:33,647 align:center
So, how can you enable
customers to request a refund


274
00:13:33,647 --> 00:13:36,250 align:center
inside your app?


275
00:13:36.250 --> 00:13:39.386 line:-2 align:center
We are now introducing a new
StoreKit 2 API called


276
00:13:39.386 --> 00:13:43.390 line:-2 align:center
beginRefundRequest that enables
customers to request a refund


277
00:13:43.390 --> 00:13:47.361 line:-2 align:center
for an in-app purchase
directly from within your app.


278
00:13:47.361 --> 00:13:48.996 line:-1 align:center
And if the refund is approved,


279
00:13:48,996 --> 00:13:51,999 line:-2
your app will be notified
and your server receives


280
00:13:51.999 --> 00:13:55.435 line:-2 align:center
a REFUND notification
from the App Store.


281
00:13:55,435 --> 00:13:58,472 line:-2
Or if the refund is denied,
your server receives


282
00:13:58.472 --> 00:14:02.609 line:-2 align:center
a new REFUND-DECLINED
notification.


283
00:14:02.609 --> 00:14:05.179 line:-2 align:center
And for the first time,
using this API,


284
00:14:05,179 --> 00:14:08,715 line:-2
you can now initiate
and test refunds in sandbox,


285
00:14:08,715 --> 00:14:11,985 line:-1
right within the app.


286
00:14:11,985 --> 00:14:14,454 line:-2
To implement this API,
you simply call


287
00:14:14.454 --> 00:14:16.623 line:-1 align:center
the beginRefundRequest method


288
00:14:16,623 --> 00:14:20,260 line:-2
with the transaction
ID for that purchase.


289
00:14:20.260 --> 00:14:22.162 line:-2 align:center
And after the request
is submitted,


290
00:14:22,162 --> 00:14:26,066 line:-2
you can handle errors using
the do-catch statement.


291
00:14:26.066 --> 00:14:28.936 line:-2 align:center
For example, if this was
a duplicate request


292
00:14:28.936 --> 00:14:31.939 line:-2 align:center
for a transaction
that was already refunded,


293
00:14:31.939 --> 00:14:34.975 line:-2 align:center
or if the request failed
for some other reason,


294
00:14:34.975 --> 00:14:39.613 line:-2 align:center
the error code reflects the
status of the refund request.


295
00:14:39,613 --> 00:14:43,417 line:-2
Here's a sample refund
request UI in your app.


296
00:14:43.417 --> 00:14:45.886 line:-2 align:center
In the Help page,
now there's a new option


297
00:14:45.886 --> 00:14:48.188 line:-1 align:center
to "Request a Refund."


298
00:14:48,188 --> 00:14:51,091 line:-2
Upon selection,
the app displays purchases


299
00:14:51.091 --> 00:14:54.761 line:-2 align:center
for that customer
to request a refund.


300
00:14:54.761 --> 00:14:58.432 line:-2 align:center
And if the power surge purchase
did not work as expected,


301
00:14:58.432 --> 00:15:01.535 line:-2 align:center
the customer can tap on that
purchase to invoke


302
00:15:01.535 --> 00:15:04.805 line:-2 align:center
a refund request sheet, which
contains the purchase details


303
00:15:04.805 --> 00:15:09.443 line:-2 align:center
and a list of reason codes
for the customer to select.


304
00:15:09.443 --> 00:15:11.979 line:-2 align:center
Once the request is submitted,
in addition to


305
00:15:11,979 --> 00:15:13,547 line:-1
the in-app confirmation screen,


306
00:15:13.547 --> 00:15:16.884 line:-2 align:center
the App Store also sends
the customer an email


307
00:15:16,884 --> 00:15:19,386 line:-2
with a link
to Apple's "Report a Problem,"


308
00:15:19.386 --> 00:15:23.490 line:-2 align:center
where they can check
the status of their refund.


309
00:15:23.490 --> 00:15:27.227 line:-2 align:center
So, with the new APIs,
you can now provide contextual


310
00:15:27.227 --> 00:15:29.830 line:-2 align:center
and seamless support
for in-app purchases


311
00:15:29,830 --> 00:15:34,301 line:-2
right within your app and across
other support channels.


312
00:15:34,301 --> 00:15:38,238 line:-2
Providing good support
increases overall retention,


313
00:15:38.238 --> 00:15:40.474 line:-1 align:center
improves customer satisfaction,


314
00:15:40.474 --> 00:15:43.210 line:-2 align:center
which leads
to higher engagement,


315
00:15:43.210 --> 00:15:47.347 line:-2 align:center
and ultimately, more positive
ratings and reviews.


316
00:15:47,347 --> 00:15:50,284 line:-2
In other words, it's a better
experience for everyone.


317
00:15:50.284 --> 00:15:53.520 line:-2 align:center
Now, we talked about how you can
offer customers a way


318
00:15:53.520 --> 00:15:57.558 line:-2 align:center
to request refunds using the new
refund request API,


319
00:15:57,558 --> 00:16:00,160 line:-2
but there is a lot
more to refunds that happens


320
00:16:00.160 --> 00:16:02.362 line:-1 align:center
after initiating a request.


321
00:16:02,362 --> 00:16:04,398 line:-2
So, I'm going to invite
my colleague, Joe,


322
00:16:04.398 --> 00:16:06.667 line:-2 align:center
to talk more about
handling refunds


323
00:16:06.667 --> 00:16:10.504 line:-2 align:center
and a new opportunity with
regards to refund decisioning.


324
00:16:10.504 --> 00:16:12.105 line:-1 align:center
[Joe] Thanks, Manjeet.


325
00:16:12,105 --> 00:16:14,041 line:-1
Hello, my name is Joe Mani,


326
00:16:14.041 --> 00:16:16.443 line:-2 align:center
and I'm a program manager
at the App Store.


327
00:16:16,443 --> 00:16:18,245 line:-1
Refunds are a sensitive topic,


328
00:16:18,245 --> 00:16:20,747 line:-2
and here at the App Store,
we take it seriously.


329
00:16:20.747 --> 00:16:23.517 line:-2 align:center
It affects a small
percentage of transactions,


330
00:16:23,517 --> 00:16:26,687 line:-2
but we understand the impact
it has on your apps.


331
00:16:26,687 --> 00:16:29,957 line:-2
I want to start with a quick
recap on refund notifications,


332
00:16:29.957 --> 00:16:32.159 line:-1 align:center
which was launched at WWDC20.


333
00:16:32.159 --> 00:16:35.596 line:-2 align:center
Then, I will give some insight
into how we handle refunds.


334
00:16:35,596 --> 00:16:38,432 line:-2
Finally, we will talk
about a new feature,


335
00:16:38.432 --> 00:16:42.269 line:-2 align:center
which will help you inform
and improve the refund process.


336
00:16:42.269 --> 00:16:46.073 line:-2 align:center
In WWDC20, we announced
a new notification type


337
00:16:46,073 --> 00:16:47,608 line:-1
called REFUND.


338
00:16:47,608 --> 00:16:49,843 line:-2
After a customer
is issued a refund,


339
00:16:49.843 --> 00:16:54.014 line:-2 align:center
the App Store sends the REFUND
notification to your server.


340
00:16:54.014 --> 00:16:57.417 line:-2 align:center
If you have configured a server
URL in App Store Connect,


341
00:16:57.417 --> 00:17:01.855 line:-2 align:center
you may already be receiving
REFUND notifications.


342
00:17:01,855 --> 00:17:04,458 line:-2
When your server receives
this notification,


343
00:17:04,458 --> 00:17:08,829 line:-2
respond with a successful
HTTP status code 200.


344
00:17:08.829 --> 00:17:10.998 line:-2 align:center
Then, you can take
appropriate action


345
00:17:10.998 --> 00:17:14.101 line:-1 align:center
for the refund in response.


346
00:17:14.101 --> 00:17:16.603 line:-2 align:center
Since the launch
of REFUND notifications,


347
00:17:16,603 --> 00:17:18,872 line:-2
we've had a chance
to hear your feedback,


348
00:17:18.872 --> 00:17:22.442 line:-2 align:center
and I'd like to share some
best practices with you.


349
00:17:22,442 --> 00:17:24,912 line:-2
Find the best response
strategy that works


350
00:17:24.912 --> 00:17:26.647 line:-1 align:center
for your business model.


351
00:17:26.647 --> 00:17:30.551 line:-2 align:center
For example, if a user purchases
in-game currency,


352
00:17:30,551 --> 00:17:32,152 line:-1
and then requests a refund,


353
00:17:32,152 --> 00:17:34,621 line:-2
you can deduct the balance
from their account


354
00:17:34.621 --> 00:17:38.158 line:-2 align:center
after your server receives
the REFUND notification.


355
00:17:38.158 --> 00:17:42.496 line:-2 align:center
While, for a subscription, you
can revoke access to the service


356
00:17:42,496 --> 00:17:46,834 line:-2
once the subscription has
been refunded and canceled.


357
00:17:46.834 --> 00:17:49.203 line:-2 align:center
Consider the impact
on game design


358
00:17:49,203 --> 00:17:52,139 line:-2
when identifying
your response strategy.


359
00:17:52.139 --> 00:17:54.575 line:-2 align:center
Use marketing
and promotional tools


360
00:17:54.575 --> 00:17:57.744 line:-2 align:center
to re-engage customers,
and always provide


361
00:17:57.744 --> 00:18:00.280 line:-2 align:center
clear messaging
to your customer across


362
00:18:00.280 --> 00:18:04.017 line:-2 align:center
your communication channels
on any actions you have taken.


363
00:18:05,619 --> 00:18:08,655 line:-2
Let's look at a sample
refund timeline for an app


364
00:18:08.655 --> 00:18:11.758 line:-2 align:center
that offers coins
as in-game currency.


365
00:18:11.758 --> 00:18:14.428 line:-2 align:center
After a customer purchases
100 coins,


366
00:18:14.428 --> 00:18:17.831 line:-2 align:center
they may immediately spend those
coins within your game.


367
00:18:17,831 --> 00:18:20,167 line:-2
If the customer then
requests a refund


368
00:18:20.167 --> 00:18:22.803 line:-2 align:center
using the new
request refund API,


369
00:18:22,803 --> 00:18:25,405 line:-1
or by contacting Apple Support.


370
00:18:25,405 --> 00:18:27,908 line:-2
And if the refund is approved,
the App Store will


371
00:18:27,908 --> 00:18:31,712 line:-2
issue a refund, send your server
a refund notification,


372
00:18:31,712 --> 00:18:33,647 line:0
and notifies the customer
as well.


373
00:18:33,647 --> 00:18:37,217 line:0
And this usually happens
within a 48-hour window.


374
00:18:37,217 --> 00:18:39,820 line:0
Now, let's take a look
into what happens


375
00:18:39,820 --> 00:18:41,922 line:0
after the refund is requested


376
00:18:41,922 --> 00:18:44,892 line:0
and before the App Store
issues a decision.


377
00:18:44,892 --> 00:18:47,861 align:center
At a high level, each refund
request will go through


378
00:18:47,861 --> 00:18:51,298 line:0
our Refund Decisioning System
to render a decision.


379
00:18:51,298 --> 00:18:54,101 line:-2
The Refund Decisioning System
includes information


380
00:18:54.101 --> 00:18:57.171 line:-2 align:center
about the transaction
at issue and other factors,


381
00:18:57.171 --> 00:19:00.974 line:-2 align:center
such as the customer's
purchase and refund history.


382
00:19:00,974 --> 00:19:02,809 align:center
Now, we've heard from you
that you like to have


383
00:19:02,809 --> 00:19:05,579 align:center
a more active role
in refund decisions,


384
00:19:05,579 --> 00:19:08,515 align:center
so we're excited to announce
a new feature that will


385
00:19:08,515 --> 00:19:12,786 align:center
you improve and inform
the refund process.


386
00:19:12,786 --> 00:19:16,089 line:-2
With the new Consumption API,
you can share information


387
00:19:16.089 --> 00:19:20.160 line:-2 align:center
about a customer's in-app
purchase with the App Store.


388
00:19:20.160 --> 00:19:22.196 line:-2 align:center
When a customer requests
a refund


389
00:19:22.196 --> 00:19:24.898 line:-2 align:center
for a consumable
in-app purchase,


390
00:19:24,898 --> 00:19:28,101 line:-2
the App Store will send your
server a new notification


391
00:19:28.101 --> 00:19:29.803 line:-1 align:center
called CONSUMPTION-REQUEST,


392
00:19:29.803 --> 00:19:33.073 line:-2 align:center
for you to respond back
with the consumption data.


393
00:19:33.073 --> 00:19:35.943 line:-2 align:center
In most cases, customers
start consuming content


394
00:19:35,943 --> 00:19:37,644 line:-1
soon after they purchase it,


395
00:19:37,644 --> 00:19:39,646 line:-2
and knowing this information
is helpful


396
00:19:39.646 --> 00:19:41.748 line:-2 align:center
in the refund
decision process.


397
00:19:41,748 --> 00:19:44,484 line:-2
Make sure to send consumption
information to the App Store


398
00:19:44,484 --> 00:19:47,721 line:-2
with 12 hours of receiving
the CONSUMPTION-REQUEST,


399
00:19:47,721 --> 00:19:50,791 line:-2
so that it can be used to inform
the refund decision.


400
00:19:50,791 --> 00:19:53,861 line:-2
Now, let's take a look
at what fields are included


401
00:19:53.861 --> 00:19:55.762 line:-1 align:center
within the consumption data.


402
00:19:55.762 --> 00:19:58.899 line:-2 align:center
The consumption payload contains
the following data points,


403
00:19:58.899 --> 00:20:01.835 line:-2 align:center
each of which helps to inform
the refund decision.


404
00:20:03.103 --> 00:20:05.772 line:-2 align:center
First, you include
the original transaction ID


405
00:20:05,772 --> 00:20:09,676 line:-2
for the in-app purchase
in the request URL.


406
00:20:09.676 --> 00:20:12.145 line:-2 align:center
Set the customerConsented
field to "true"


407
00:20:12,145 --> 00:20:15,382 line:-2
if the user has consented
to sending the requested


408
00:20:15.382 --> 00:20:17.718 line:-1 align:center
consumption API data to Apple,


409
00:20:17,718 --> 00:20:22,122 line:-2
in order for Apple to use that
data in decisioning.


410
00:20:22,122 --> 00:20:24,424 line:-2
The consumptionStatus
field is important.


411
00:20:24.424 --> 00:20:26.827 line:-2 align:center
Use it to indicate if
the user has consumed


412
00:20:26.827 --> 00:20:30.430 line:-2 align:center
the in-app purchase partially,
fully, or not at all.


413
00:20:30.430 --> 00:20:33.667 line:-2 align:center
For example, if your app has
an exchange platform


414
00:20:33.667 --> 00:20:36.436 line:-2 align:center
that has bartering
or has an in-app purchase


415
00:20:36.436 --> 00:20:39.039 line:-2 align:center
that has been transferred
from one account to another,


416
00:20:39.039 --> 00:20:41.508 line:-1 align:center
it is considered consumed.


417
00:20:41,508 --> 00:20:43,644 line:-2
The consumption platform
field identifies


418
00:20:43,644 --> 00:20:47,881 line:-2
if your app is cross platform
and where it was consumed.


419
00:20:47,881 --> 00:20:51,451 line:-2
Use the sampleContent field
to indicate if you provided


420
00:20:51.451 --> 00:20:53.654 line:-2 align:center
a free sample or trial
to the user,


421
00:20:53.654 --> 00:20:57.090 line:-2 align:center
or if the user was given
a similar in-app purchase


422
00:20:57,090 --> 00:20:58,425 line:-1
within the app.


423
00:20:58.425 --> 00:21:01.061 line:-2 align:center
Alternatively,
use this field to indicate


424
00:21:01.061 --> 00:21:03.096 line:-2 align:center
if the user
was provided information


425
00:21:03,096 --> 00:21:06,166 line:-2
about the in-app purchase
and the expected game play


426
00:21:06.166 --> 00:21:09.336 line:-2 align:center
or mechanics
prior to the purchase.


427
00:21:09,336 --> 00:21:11,605 line:-2
Use the deliveryStatus
field to indicate


428
00:21:11,605 --> 00:21:13,841 line:-2
the in-app purchase
was successfully delivered


429
00:21:13,841 --> 00:21:17,144 line:-2
to the customer and that
it functioned properly.


430
00:21:17.144 --> 00:21:20.681 line:-2 align:center
The appAccountToken is a new
field introduced in StoreKit 2.


431
00:21:20,681 --> 00:21:23,083 line:-2
This will be the UUID
associated with


432
00:21:23.083 --> 00:21:25.819 line:-2 align:center
the app's user account
that you create


433
00:21:25.819 --> 00:21:27.354 line:-1 align:center
that is initiating the purchase


434
00:21:27,354 --> 00:21:31,391 line:-2
and consuming the content
for the purchase.


435
00:21:31,391 --> 00:21:34,228 line:-2
The remaining fields include
information about how long


436
00:21:34.228 --> 00:21:36.029 line:-1 align:center
the user has had an account,


437
00:21:36.029 --> 00:21:38.632 line:-2 align:center
how much time they've
played in your app,


438
00:21:38.632 --> 00:21:40.133 line:-1 align:center
their total spend,


439
00:21:40,133 --> 00:21:43,871 line:-2
and the current status
of their account.


440
00:21:43.871 --> 00:21:46.773 line:-2 align:center
For a refund request, there are
three related App Store


441
00:21:46.773 --> 00:21:48.642 line:-1 align:center
server notifications:


442
00:21:48.642 --> 00:21:51.144 line:-2 align:center
the new CONSUMPTION-REQUEST
notification


443
00:21:51,144 --> 00:21:53,480 line:-2
to notify you
when a refund request


444
00:21:53.480 --> 00:21:57.484 line:-2 align:center
has been initiated for
a consumable in-app purchase.


445
00:21:57,484 --> 00:22:00,454 line:-2
For all content types,
the REFUND notification


446
00:22:00,454 --> 00:22:05,058 line:-2
notifies you when a refund
is issued to a customer.


447
00:22:05,058 --> 00:22:08,395 line:-2
And for all content types,
the REFUND-DECLINED notification


448
00:22:08,395 --> 00:22:10,664 line:-2
notifies you
when a refund was declined


449
00:22:10.664 --> 00:22:15.235 line:-2 align:center
for a request that was initiated
using the Store Kit API.


450
00:22:15,235 --> 00:22:17,905 line:-2
Now let's return
to the refund timeline.


451
00:22:17.905 --> 00:22:19.940 line:-2 align:center
When the customer requests
a refund


452
00:22:19,940 --> 00:22:22,075 line:-2
for a consumable
in-app purchase,


453
00:22:22.075 --> 00:22:25.112 line:-2 align:center
the App Store server will now
send your server


454
00:22:25,112 --> 00:22:28,148 line:-2
a consumption request
notification.


455
00:22:28,148 --> 00:22:30,851 line:-2
Your server responds
back within 12 hours


456
00:22:30,851 --> 00:22:34,121 line:-2
with the consumption data
back to the App Store server,


457
00:22:34.121 --> 00:22:36.890 line:-2 align:center
which will then be
used for decisioning.


458
00:22:36.890 --> 00:22:39.426 line:-2 align:center
If it is approved,
the App Store will send


459
00:22:39.426 --> 00:22:41.128 line:-1 align:center
the REFUND notification,


460
00:22:41,128 --> 00:22:42,796 align:center
and after
your server responds


461
00:22:42,796 --> 00:22:45,332 align:center
with an HTTP OK response,


462
00:22:45,332 --> 00:22:48,468 line:0
you can take appropriate
action for that refund.


463
00:22:50.070 --> 00:22:52.105 line:-2 align:center
And the consumption API
is available


464
00:22:52,105 --> 00:22:56,543 line:-2
both in production and to test
in sandbox as of today.


465
00:22:56.543 --> 00:22:58.278 line:-2 align:center
Now let's cover some
of the benefits


466
00:22:58,278 --> 00:23:00,247 line:-2
of sending
information to Apple


467
00:23:00,247 --> 00:23:02,583 line:-1
with the new Consumption API.


468
00:23:02.583 --> 00:23:05.719 line:-2 align:center
Obtaining these data points
will help increase transparency


469
00:23:05.719 --> 00:23:08.889 line:-2 align:center
and improve our overall
refund process.


470
00:23:08,889 --> 00:23:11,725 line:-2
This, in turn, provides
a better overall outcome


471
00:23:11.725 --> 00:23:13.493 line:-1 align:center
to your customers.


472
00:23:13,493 --> 00:23:16,363 line:-2
Also, with the new
REFUND notification,


473
00:23:16.363 --> 00:23:19.233 line:-2 align:center
you have more opportunities
to reach your customer,


474
00:23:19.233 --> 00:23:22.369 line:-2 align:center
thus increasing
the overall communication.


475
00:23:22.369 --> 00:23:25.239 line:-2 align:center
Now, I'd like to pass it back
to my colleague, Manjeet,


476
00:23:25,239 --> 00:23:28,509 line:-2
to share some key take-aways
from everything we've covered.


477
00:23:28.509 --> 00:23:31.111 line:-2 align:center
[Manjeet] So, we
covered a lot of topics today.


478
00:23:31.111 --> 00:23:34.414 line:-2 align:center
Let me go through the key
takeaways for this session.


479
00:23:34.414 --> 00:23:37.584 line:-2 align:center
With the new StoreKit APIs,
you can now implement


480
00:23:37.584 --> 00:23:39.620 line:-2 align:center
a custom help UI
in your app


481
00:23:39.620 --> 00:23:41.989 line:-2 align:center
for customers
to request a refund


482
00:23:41,989 --> 00:23:44,024 line:-2
and for subscriptions,
a way to manage


483
00:23:44,024 --> 00:23:46,860 line:-2
their subscription
within the app.


484
00:23:46,860 --> 00:23:50,197 line:-2
Review and optimize your
customer support journeys


485
00:23:50.197 --> 00:23:53.066 line:-2 align:center
by implementing the new
server-to-server APIs.


486
00:23:53,066 --> 00:23:56,103 line:-2
For example,
use the invoice lookup API


487
00:23:56,103 --> 00:24:00,541 line:-2
to identify and validate
a customer's in-app purchase.


488
00:24:00.541 --> 00:24:02.943 line:-2 align:center
And if you haven't already,
setup your server


489
00:24:02,943 --> 00:24:05,913 line:-2
to receive the refund,
consumption request,


490
00:24:05.913 --> 00:24:08.148 line:-2 align:center
and other
status update notifications


491
00:24:08.148 --> 00:24:10.417 line:-1 align:center
from the App Store.


492
00:24:10.417 --> 00:24:13.120 line:-2 align:center
Identify the response strategy
that works best


493
00:24:13.120 --> 00:24:17.991 line:-2 align:center
for your app's business model
to take action upon refunds.


494
00:24:17.991 --> 00:24:20.460 line:-2 align:center
And finally,
you can now inform Apple's


495
00:24:20,460 --> 00:24:22,196 line:-1
refund decisioning system


496
00:24:22.196 --> 00:24:25.132 line:-2 align:center
by responding to consumption
request notifications


497
00:24:25.132 --> 00:24:29.036 line:-2 align:center
from the App Store by sending
latest consumption data.


498
00:24:29,036 --> 00:24:32,539 line:0
So, this was "Support customers
and handle refunds."


499
00:24:32,539 --> 00:24:35,676 align:center
For more information on the new
StoreKit 2 APIs,


500
00:24:35,676 --> 00:24:37,678 align:center
watch "Meet StoreKit 2,"


501
00:24:37,678 --> 00:24:40,714 align:center
and for more information
on building server-side logic


502
00:24:40,714 --> 00:24:42,182 align:center
for in-app purchases,


503
00:24:42,182 --> 00:24:44,918 line:0
watch "Manage in-app purchases
on your server."


504
00:24:45,986 --> 00:24:49,423 line:-2
Thanks for listening today,
and enjoy the rest of WWDC.


505
00:24:49.423 --> 00:24:52.459 line:-1 align:center
[percussive music]

