2
00:00:00.534 --> 00:00:07.441 line:-1 align:center
[upbeat music]


3
00:00:09,042 --> 00:00:10,744 line:-2
[Baek] Hello.
My name is Baek San Chang,


4
00:00:10.744 --> 00:00:12.446 line:-1 align:center
and I work on Core Audio.


5
00:00:12,446 --> 00:00:15,415 line:-2
Today I will discuss a new way
to create audio drivers


6
00:00:15.415 --> 00:00:16.517 line:-1 align:center
with DriverKit.


7
00:00:16.550 --> 00:00:19.853 line:-2 align:center
But first let's review
how audio drivers work today.


8
00:00:19.887 --> 00:00:21.855 line:-1 align:center
Prior to macOS Big Sur,


9
00:00:21.855 --> 00:00:23.690 line:-2 align:center
an audio server plug-in
would need


10
00:00:23,690 --> 00:00:25,626 line:-2
to communicate
with a hardware device


11
00:00:25,626 --> 00:00:29,363 line:-2
through a user client
to a kernel extension.


12
00:00:29.363 --> 00:00:31.098 line:-1 align:center
In macOS Big Sur,


13
00:00:31,098 --> 00:00:33,000 line:-2
the CoreAudio HAL
provided support


14
00:00:33,000 --> 00:00:35,102 line:-2
to create
an audio server plug-in built


15
00:00:35.102 --> 00:00:38.005 line:-1 align:center
on top of a DriverKit Extension.


16
00:00:38.005 --> 00:00:40.908 line:-2 align:center
The layer between the plug-in
and the dext was the same


17
00:00:40.908 --> 00:00:43.610 line:-2 align:center
as with a kext,
but security was improved


18
00:00:43,610 --> 00:00:47,047 line:-2
by moving out of the kernel
and into user space.


19
00:00:47,047 --> 00:00:49,082 align:center
For more information
on DriverKit,


20
00:00:49,082 --> 00:00:53,420 align:center
please check out the previous
WWDC DriverKit videos.


21
00:00:53,453 --> 00:00:56,256 line:-2
While the current solution
allows audio driver development


22
00:00:56.256 --> 00:00:57.858 line:-1 align:center
to move out of the kernel,


23
00:00:57,858 --> 00:00:59,960 line:-2
two separate components
are still needed


24
00:00:59,960 --> 00:01:02,529 line:-2
to implement a functional
hardware audio driver:


25
00:01:02.563 --> 00:01:05.899 line:-2 align:center
An audio server plug-in
and a driver extension.


26
00:01:05.899 --> 00:01:09.169 line:-2 align:center
This complicates development,
increases resources,


27
00:01:09,169 --> 00:01:12,005 line:-2
and can increase overhead
and latency.


28
00:01:12.005 --> 00:01:15.242 line:-2 align:center
Starting in macOS Monterey,
you only need a dext,


29
00:01:15.242 --> 00:01:16.743 line:-1 align:center
no more plug-in.


30
00:01:17.678 --> 00:01:20.480 line:-2 align:center
AudioDriverKit is a new
DriverKit framework used


31
00:01:20.480 --> 00:01:24.017 line:-2 align:center
to write audio driver extensions
alongside USBDriverKit


32
00:01:24.017 --> 00:01:26.086 line:-1 align:center
or PCIDriverKit.


33
00:01:26.086 --> 00:01:29.590 line:-2 align:center
This new framework handles all
the inter process communication


34
00:01:29,590 --> 00:01:32,059 line:-1
to the CoreAudio HAL.


35
00:01:32.059 --> 00:01:34.628 line:-2 align:center
Since you only have a dext,
now you don't need


36
00:01:34.628 --> 00:01:37.731 line:-2 align:center
to communicate between your dext
and an audio server plug-in.


37
00:01:37.731 --> 00:01:40.334 line:-2 align:center
You can stay
focused within DriverKit.


38
00:01:41,668 --> 00:01:45,672 line:-2
Since AudioDriverKit extensions
are bundled inside a Mac app,


39
00:01:45,672 --> 00:01:48,509 line:-2
a separate installer is
no longer necessary.


40
00:01:50,143 --> 00:01:52,112 line:-2
And now your driver
is loaded immediately,


41
00:01:52,112 --> 00:01:54,081 line:-1
no reboot required.


42
00:01:55,148 --> 00:01:57,284 line:-2
Now that you know the benefits
of AudioDriverKit,


43
00:01:57.584 --> 00:02:00.621 line:-2 align:center
let's dive into making
a new audio driver.


44
00:02:00.654 --> 00:02:01.889 line:-2 align:center
I will start
with a brief overview


45
00:02:01.889 --> 00:02:05.025 line:-2 align:center
of the components involved
in an audio driver,


46
00:02:05.025 --> 00:02:08.395 line:-2 align:center
then cover some things you'll
need before writing your dext.


47
00:02:10,097 --> 00:02:11,632 line:-2
Once we're ready
to start writing code,


48
00:02:11,632 --> 00:02:13,166 line:-2
I will walk
through how to configure


49
00:02:13,166 --> 00:02:15,936 line:-1
and initialize your dext,


50
00:02:15.936 --> 00:02:19.806 line:-2 align:center
create devices, streams,
and other audio objects,


51
00:02:19.806 --> 00:02:22.876 line:-2 align:center
and deal with the IO path
and timestamps.


52
00:02:22.876 --> 00:02:26.446 line:-2 align:center
Lastly, I will discuss how
to handle configuration changes


53
00:02:26.446 --> 00:02:29.349 line:-2 align:center
and show you a demo of the dext
at the end.


54
00:02:30,417 --> 00:02:32,553 line:-2
So let's
start with architecture.


55
00:02:32,586 --> 00:02:35,122 align:center
The diagram shows
how the HAL communicates


56
00:02:35,122 --> 00:02:36,857 line:0
with Driver Extensions using


57
00:02:36,857 --> 00:02:39,026 align:center
the AudioDriverKit framework.


58
00:02:39,026 --> 00:02:40,994 line:0
The AudioDriverKit framework
will create


59
00:02:40,994 --> 00:02:43,430 line:0
a private user client
that will be used


60
00:02:43,430 --> 00:02:45,999 align:center
for all the communication
between CoreAudio


61
00:02:45,999 --> 00:02:47,734 align:center
and your audio dext.


62
00:02:47,734 --> 00:02:51,138 line:0
This user client is not
intended to be used directly


63
00:02:51,138 --> 00:02:53,307 line:0
and not exposed to your dext.


64
00:02:53,307 --> 00:02:57,244 line:0
Notice that there is no plug-in
or custom user client required


65
00:02:57,244 --> 00:03:00,080 line:0
to communicate
between your app and dext.


66
00:03:00,080 --> 00:03:03,617 align:center
Optionally, your app can
open a custom user client


67
00:03:03,617 --> 00:03:07,321 align:center
to communicate with
your dext directly if needed.


68
00:03:07,354 --> 00:03:09,623 line:-2
Now let's talk about
the entitlements you will need.


69
00:03:10,257 --> 00:03:12,392 line:-2
All DriverKit driver extensions
must have


70
00:03:12,960 --> 00:03:14,161 line:-1
the DriverKit entitlement.


71
00:03:14,795 --> 00:03:17,130 line:-2
AudioDriverKit dexts
must also have the entitlement


72
00:03:17.698 --> 00:03:19.700 line:-1 align:center
to allow any user client access.


73
00:03:20.534 --> 00:03:22.002 line:-2 align:center
This is available
to all developers


74
00:03:22.636 --> 00:03:24.671 line:-2 align:center
who have been approved
for any DriverKit entitlements.


75
00:03:25,572 --> 00:03:28,242 line:-2
Additionally, any transport
family entitlements should be


76
00:03:28,842 --> 00:03:30,077 line:-1
added as necessary.


77
00:03:30,978 --> 00:03:32,346 line:-2
If you have not yet
requested a USB


78
00:03:33.046 --> 00:03:34.414 line:-1 align:center
or PCI transport entitlement,


79
00:03:35.215 --> 00:03:37.951 line:-2 align:center
visit Apple's developer site
to submit a request.


80
00:03:38,585 --> 00:03:41,021 line:-2
Keep in mind that the sample
code presented is purely


81
00:03:41.755 --> 00:03:44.024 line:-2 align:center
for demonstration purposes and
creates a virtual audio driver


82
00:03:44.625 --> 00:03:46.827 line:-2 align:center
that is not associated
with a hardware device,


83
00:03:47.628 --> 00:03:49.630 line:-2 align:center
and so entitlements will not
be granted


84
00:03:50,230 --> 00:03:51,899 line:-1
for that kind of use case.


85
00:03:51.932 --> 00:03:55.636 line:-2 align:center
If a virtual audio driver
or device is all that is needed,


86
00:03:55,636 --> 00:03:58,138 line:-2
the audio server plug-in driver
model should continue


87
00:03:58,138 --> 00:03:59,139 line:-1
to be used.


88
00:03:59.173 --> 00:04:01.742 line:-2 align:center
Now let's look
at your dext's info.plist.


89
00:04:01.742 --> 00:04:03.310 line:-1 align:center
These settings need to be added


90
00:04:03,310 --> 00:04:05,579 line:-2
to the IOKitPersonalities
of the dext.


91
00:04:05.579 --> 00:04:07.481 line:-2 align:center
AudioDriverKit will
handle creation


92
00:04:07.481 --> 00:04:11.752 line:-2 align:center
of IOUserAudioDriverUserClient
required by the HAL.


93
00:04:11,752 --> 00:04:13,620 line:-2
The HAL has
the required entitlements


94
00:04:13,620 --> 00:04:15,656 line:-2
to connect to the user
client connection.


95
00:04:15.656 --> 00:04:18.392 line:-2 align:center
Here's an example
of a custom user client


96
00:04:18,392 --> 00:04:20,727 line:-1
for SimpleAudioDriverUserClient.


97
00:04:20,727 --> 00:04:22,896 align:center
See the AudioDriverKitTypes.h
header file


98
00:04:22,896 --> 00:04:24,364 line:0
for more information.


99
00:04:24,398 --> 00:04:26,700 line:-2
Next, let's talk
about configuration


100
00:04:26.700 --> 00:04:28.502 line:-1 align:center
and initialization.


101
00:04:28.535 --> 00:04:31.605 line:-2 align:center
The first step to configuring
an audio dext is


102
00:04:31,605 --> 00:04:33,874 line:-1
to subclass IOUserAudioDriver


103
00:04:33,874 --> 00:04:35,909 line:-2
and override
the virtual methods.


104
00:04:35,909 --> 00:04:40,314 line:-2
IOUserAudioDriver
is a subclass of IOService.


105
00:04:40,314 --> 00:04:42,983 line:-1
Subclass any IOUserAudio objects


106
00:04:42.983 --> 00:04:46.053 line:-2 align:center
that are needed
to implement custom behavior.


107
00:04:46,053 --> 00:04:50,257 line:-2
Then configure and add them
to IOUserAudioDriver.


108
00:04:50.257 --> 00:04:54.127 line:-2 align:center
The diagram shows an overview
of IOUserAudio objects


109
00:04:54,127 --> 00:04:55,495 line:-1
you will be creating.


110
00:04:55,495 --> 00:04:59,099 line:-2
SimpleAudioDriver is a subclass
of IOUserAudioDriver


111
00:04:59,099 --> 00:05:01,268 line:-2
and the entry
point into the dext.


112
00:05:01,268 --> 00:05:04,638 line:-2
SimpleAudioDriver will
create a SimpleAudioDevice,


113
00:05:04.638 --> 00:05:07.140 line:-2 align:center
which is a subclass
of IOUserAudioDevice.


114
00:05:07.140 --> 00:05:10.811 line:-2 align:center
The audio device handles all
start-stop IO-related messages,


115
00:05:10.811 --> 00:05:12.779 line:-2 align:center
timestamps,
and configuration changes.


116
00:05:12.779 --> 00:05:16.884 line:-2 align:center
SimpleAudioDevice will create
various IOUserAudioObjects.


117
00:05:16.884 --> 00:05:20.587 line:-2 align:center
The device object will also
create OSTimerDispatchSources,


118
00:05:20.587 --> 00:05:23.757 line:-2 align:center
OSActions,
and implement a tone generator


119
00:05:23,757 --> 00:05:26,360 line:-2
to simulate hardware interrupts
and IO.


120
00:05:26,360 --> 00:05:29,930 line:-2
IOUserAudioStream is a stream
owned by the device.


121
00:05:29.930 --> 00:05:32.799 line:-2 align:center
The stream will use
an IOMemoryDescriptor


122
00:05:32,799 --> 00:05:35,702 line:-2
for audio IO,
which will be mapped to the HAL.


123
00:05:35.702 --> 00:05:39.640 line:-2 align:center
IOUserAudioVolumeLevelControl
is a control object


124
00:05:39,640 --> 00:05:41,542 line:-1
that takes scalar or dB values.


125
00:05:41,542 --> 00:05:43,911 line:-2
The control value will
be used to apply gain


126
00:05:43.911 --> 00:05:45.512 line:-1 align:center
to the input audio buffer.


127
00:05:45,512 --> 00:05:50,184 line:-2
All IOUserAudioObjects can have
IOUserAudioCustomProperties.


128
00:05:50.184 --> 00:05:53.987 line:-2 align:center
SimpleAudioDevice will create
an example of a custom property


129
00:05:53.987 --> 00:05:57.724 line:-2 align:center
and a string as its qualifier
and data value.


130
00:05:57.724 --> 00:05:59.660 line:-1 align:center
Let's take a look at the code.


131
00:05:59,660 --> 00:06:03,096 line:-2
SimpleAudioDriver is a subclass
of IOUserAudioDriver.


132
00:06:03.096 --> 00:06:06.834 line:-2 align:center
Start, Stop, and NewUserClient
are virtual methods


133
00:06:06.834 --> 00:06:10.270 line:-2 align:center
from the IOService class that
the driver needs to override.


134
00:06:10,938 --> 00:06:14,675 line:-2
StartDevice and StopDevice
are IO-related virtual methods


135
00:06:14,675 --> 00:06:16,610 line:-1
from IOUserAudioDriver.


136
00:06:16.610 --> 00:06:19.947 line:-2 align:center
These will be called
when the HAL starts or stops IO


137
00:06:19,947 --> 00:06:21,215 line:-1
for an audio device.


138
00:06:21,248 --> 00:06:24,284 line:-2
I will discuss the IO
path after going over devices,


139
00:06:24.284 --> 00:06:26.420 line:-2 align:center
streams,
and other audio objects.


140
00:06:26.453 --> 00:06:29.890 line:-2 align:center
The example shows
how to override NewUserClient


141
00:06:29,890 --> 00:06:31,992 line:-2
to create
user client connections.


142
00:06:31.992 --> 00:06:35.529 line:-2 align:center
NewUserClient will be called
when a client process wants


143
00:06:35.529 --> 00:06:37.097 line:-1 align:center
to connect to the dext.


144
00:06:37.097 --> 00:06:39.566 line:-2 align:center
The AudioDriverKit framework
will handle creation


145
00:06:39,566 --> 00:06:41,668 line:-2
of the user client required
by the HAL


146
00:06:41,668 --> 00:06:43,570 line:-1
by calling NewUserClient


147
00:06:43,570 --> 00:06:45,873 line:-2
on the IOUserAudioDriver
base class.


148
00:06:45,873 --> 00:06:49,309 line:-2
This will create
the IOUserAudioDriverUserClient


149
00:06:49.309 --> 00:06:51.778 line:-1 align:center
that is needed by CoreAudio HAL.


150
00:06:51.778 --> 00:06:54.548 line:-2 align:center
A custom user client
can be created as well


151
00:06:54.548 --> 00:06:56.884 line:-1 align:center
by calling IOService Create,


152
00:06:56.884 --> 00:06:58.886 line:-2 align:center
which will
create the user client object


153
00:06:58,886 --> 00:07:02,556 line:-2
from the driver extensions
info.plist entry added earlier.


154
00:07:02,556 --> 00:07:04,992 line:-2
Let's take a look
at how to override Start


155
00:07:04.992 --> 00:07:08.295 line:-2 align:center
and create a custom
IOUserAudioDevice object.


156
00:07:08,295 --> 00:07:11,131 line:-2
First, call Start
on the super class.


157
00:07:11.131 --> 00:07:13.534 line:-2 align:center
Then allocate
the SimpleAudioDevice


158
00:07:13,534 --> 00:07:16,603 line:-2
and initialize it
with a few required parameters.


159
00:07:16,603 --> 00:07:19,072 line:-2
The initialized device
needs to then be added


160
00:07:19.072 --> 00:07:22.309 line:-2 align:center
to the audio driver
by calling AddObject.


161
00:07:22,309 --> 00:07:26,380 line:-2
Finally, register the service,
and the driver is ready to go.


162
00:07:26,813 --> 00:07:28,415 line:-2
Now that your driver
is initialized,


163
00:07:28.415 --> 00:07:32.886 line:-2 align:center
let's create a device, stream,
and a few other audio objects.


164
00:07:32,920 --> 00:07:36,423 line:-2
Subclass IOUserAudioDevice
to get custom behavior.


165
00:07:37,424 --> 00:07:40,060 line:-2
Let's create an input stream,
volume control,


166
00:07:40.060 --> 00:07:42.429 line:-1 align:center
and a custom property object.


167
00:07:42.429 --> 00:07:45.199 line:-2 align:center
The init method
for SimpleAudioDevice shows


168
00:07:45,199 --> 00:07:48,802 line:-2
how to configure the device and
create various audio objects.


169
00:07:48.802 --> 00:07:51.438 line:-2 align:center
The sample rate related
information of the device


170
00:07:51.438 --> 00:07:54.575 line:-2 align:center
is configured by calling
SetAvailableSampleRates


171
00:07:54.575 --> 00:07:56.710 line:-1 align:center
and SetSampleRate on the device.


172
00:07:56.710 --> 00:07:58.812 line:-2 align:center
Create
an IOBufferMemoryDescriptor


173
00:07:58,812 --> 00:08:01,448 line:-2
that will be passed
to the IOUserAudioStream.


174
00:08:01.448 --> 00:08:03.951 line:-2 align:center
The memory will be mapped
to CoreAudio HAL


175
00:08:03,951 --> 00:08:05,986 line:-1
and used for audio IO.


176
00:08:05.986 --> 00:08:09.089 line:-2 align:center
The memory should ideally
be the same IO memory used


177
00:08:09.089 --> 00:08:10.657 line:-1 align:center
for DMA to hardware.


178
00:08:10,657 --> 00:08:13,627 line:-2
IOUserAudioStream is
created by specifying it


179
00:08:13.627 --> 00:08:15.829 line:-2 align:center
with input stream direction
and passing in


180
00:08:15,829 --> 00:08:19,366 line:-2
the IO memory descriptor
that was created above.


181
00:08:19,366 --> 00:08:21,468 line:-2
A few additional things
need to be configured


182
00:08:21,468 --> 00:08:23,437 line:-2
on the stream
before it is functional.


183
00:08:23.437 --> 00:08:26.840 line:-2 align:center
The stream formats are defined
by creating a format list


184
00:08:26.840 --> 00:08:30.177 line:-2 align:center
of IOUserAudio
StreamBasicDescriptions.


185
00:08:30.177 --> 00:08:32.813 line:-2 align:center
Specify the sample rate,
format ID,


186
00:08:32.813 --> 00:08:35.382 line:-2 align:center
and the other required
format properties.


187
00:08:35.382 --> 00:08:37.551 line:-2 align:center
Set the available
formats by passing


188
00:08:37,551 --> 00:08:39,887 line:-2
in the stream format list
declared above.


189
00:08:39.887 --> 00:08:42.222 line:-2 align:center
And then set the current format
of the stream.


190
00:08:42.222 --> 00:08:44.091 line:-2 align:center
Finally,
add the configured stream


191
00:08:44,091 --> 00:08:46,827 line:-2
to the device
by calling AddStream.


192
00:08:46,860 --> 00:08:49,530 line:-2
Now let's go over creating
a volume level control.


193
00:08:49,563 --> 00:08:51,465 line:-2
To create
a volume control object,


194
00:08:51.465 --> 00:08:54.334 line:-2 align:center
call the
IOUserAudioLevelControl::Create


195
00:08:54,334 --> 00:08:56,370 line:-1
method.


196
00:08:56,370 --> 00:08:58,672 line:-2
The control is a settable
volume control


197
00:08:58,672 --> 00:09:04,344 line:-2
with initial level set to -6dB
and with a range of 96dB.


198
00:09:04.344 --> 00:09:06.980 line:-2 align:center
The element, scope,
and class of the control


199
00:09:06,980 --> 00:09:08,982 line:-1
also needs to be specified.


200
00:09:08.982 --> 00:09:11.952 line:-2 align:center
Finally, add the control object
to the device.


201
00:09:11.952 --> 00:09:15.222 line:-2 align:center
The volume control gain value
will be used in the IO path


202
00:09:15.222 --> 00:09:18.759 line:-2 align:center
by applying the gain
to the input stream's IO buffer.


203
00:09:18,792 --> 00:09:20,827 line:-2
Now let's go over creating
a custom property object


204
00:09:20,861 --> 00:09:21,795 line:-1
for the device.


205
00:09:21,828 --> 00:09:24,298 line:-2
A property address
needs to be provided


206
00:09:24,298 --> 00:09:26,733 line:-2
for every
custom property object.


207
00:09:26,733 --> 00:09:29,670 line:-2
Define a custom selector type
with a global scope


208
00:09:29,670 --> 00:09:31,071 line:-1
and main element.


209
00:09:31,071 --> 00:09:33,774 line:-2
Next, create
the custom property object


210
00:09:33.774 --> 00:09:36.743 line:-2 align:center
by providing the property
address defined above.


211
00:09:36,743 --> 00:09:38,912 line:-1
The custom property is settable,


212
00:09:38.912 --> 00:09:42.449 line:-2 align:center
and the qualifier and data value
types are both strings.


213
00:09:42,449 --> 00:09:45,986 line:-2
Now create an OSString for
the qualifier and data value.


214
00:09:45,986 --> 00:09:47,921 line:-2
Then set it
on the custom property.


215
00:09:47,921 --> 00:09:51,692 line:-2
Finally, add the custom property
to the device.


216
00:09:51,725 --> 00:09:55,562 line:-2
Now that you have created audio
objects, let's talk about IO.


217
00:09:55,562 --> 00:09:58,966 line:-2
The GetIOMemoryDescriptor
method will return


218
00:09:58,966 --> 00:10:02,936 line:-2
the IOMemoryDescriptor
used by the IOUserAudioStream.


219
00:10:02.936 --> 00:10:06.406 line:-2 align:center
The IOMemoryDescriptor
is passed into the init method


220
00:10:06,406 --> 00:10:09,376 line:-2
when creating a stream,
and the stream can be updated


221
00:10:09,376 --> 00:10:11,912 line:-2
with a new memory descriptor
as well.


222
00:10:11.912 --> 00:10:13.814 line:-2 align:center
The memory will be mapped
to the HAL


223
00:10:13,814 --> 00:10:16,183 line:-1
and used for audio IO.


224
00:10:16,183 --> 00:10:19,186 line:-2
The same memory descriptor
used by the stream should


225
00:10:19,186 --> 00:10:22,856 line:-2
ideally be the same one used
for DMA to the hardware device.


226
00:10:22,856 --> 00:10:25,726 line:-2
IOUserAudioClockDevice
is the base class


227
00:10:25.726 --> 00:10:27.794 line:-1 align:center
of IOUserAudioDevice.


228
00:10:27.794 --> 00:10:31.598 line:-2 align:center
UpdateCurrentZeroTimestamp and
GetCurrentZeroTimestamp should


229
00:10:31,598 --> 00:10:34,568 line:-2
be used to handle timestamps
from the hardware device.


230
00:10:34.568 --> 00:10:36.603 line:-2 align:center
The timestamps will be handled
atomically,


231
00:10:36,603 --> 00:10:39,373 line:-2
and the HAL will use
the sample time-host time pair


232
00:10:39,373 --> 00:10:41,708 line:-1
to run and synchronize IO.


233
00:10:41.708 --> 00:10:44.511 line:-2 align:center
It is vital to track
the hardware clock's timestamps


234
00:10:44,511 --> 00:10:45,946 line:-1
as close as possible.


235
00:10:45.946 --> 00:10:48.248 line:-2 align:center
Let's take a look
at the SimpleAudioDevice class


236
00:10:48.248 --> 00:10:51.618 line:-2 align:center
and focus
on the IO-related methods.


237
00:10:51.618 --> 00:10:55.122 line:-2 align:center
StartIO and StopIO will
be called from the driver


238
00:10:55.122 --> 00:10:58.025 line:-2 align:center
when the HAL is attempting
to run IO.


239
00:10:58.025 --> 00:10:59.927 line:-1 align:center
The private methods are shown


240
00:10:59.927 --> 00:11:02.229 line:-2 align:center
that use
IOTimerDispatchSource


241
00:11:02.229 --> 00:11:05.199 line:-2 align:center
and OSAction
to simulate hardware interrupts,


242
00:11:05.199 --> 00:11:07.935 line:-2 align:center
which will be used
to generate zero timestamps


243
00:11:07.935 --> 00:11:10.537 line:-2 align:center
and audio data
on the input IO buffer.


244
00:11:10.537 --> 00:11:12.272 line:-2 align:center
Since this example is
not running


245
00:11:12.272 --> 00:11:15.442 line:-2 align:center
against a hardware device,
timers and actions are used


246
00:11:15.442 --> 00:11:18.078 line:-2 align:center
in place of hardware interrupts
and DMA.


247
00:11:18,078 --> 00:11:20,581 line:-2
StartIO will be called
on the device object


248
00:11:20.581 --> 00:11:23.450 line:-2 align:center
when the HAL is attempting
to start IO on the device.


249
00:11:23,450 --> 00:11:25,686 line:-1
Any calls necessary to start IO


250
00:11:25,686 --> 00:11:27,788 line:-2
on the hardware should be done
here.


251
00:11:27,788 --> 00:11:31,024 line:-2
Afterwards, StartIO should
be called on the base class.


252
00:11:31,024 --> 00:11:34,661 line:-2
Next, get the input stream's
IOMemoryDescriptor


253
00:11:34,661 --> 00:11:38,732 line:-2
so an IOMemoryMap can be created
by calling CreateMapping.


254
00:11:38,732 --> 00:11:41,401 line:-2
The buffer address,
length, and offset


255
00:11:41,401 --> 00:11:43,570 line:-2
will be used
in the action occurred handler


256
00:11:43,570 --> 00:11:46,406 line:-2
to generate a tone
on the IO buffer.


257
00:11:46,406 --> 00:11:48,675 line:-2
StartTimers is called
to configure


258
00:11:48.675 --> 00:11:50.911 line:-2 align:center
and enable the time sources
and actions


259
00:11:50.911 --> 00:11:55.649 line:-2 align:center
to generate timestamps and fill
out the input audio buffer.


260
00:11:55,649 --> 00:11:58,118 line:-2
UpdateCurrentZeroTimestamp
is called


261
00:11:58,118 --> 00:12:01,288 line:-2
to atomically update
the sample time-host time pair


262
00:12:01.288 --> 00:12:03.724 line:-1 align:center
for the IOUserAudioDevice.


263
00:12:03.724 --> 00:12:06.760 line:-2 align:center
The timer source is enabled
and set with a wake-up time


264
00:12:06,760 --> 00:12:10,063 line:-2
based on mach_absolute_time
and host ticks configured


265
00:12:10,063 --> 00:12:11,164 line:-1
from the device.


266
00:12:11,164 --> 00:12:15,335 line:-2
The ZtsTimerOccurred action will
be called based on the wake time


267
00:12:15,335 --> 00:12:18,805 line:-2
so that a new timestamp
can be updated on the device.


268
00:12:18,839 --> 00:12:22,309 line:-2
Not shown here,
but the sample code also updates


269
00:12:22,309 --> 00:12:26,547 line:-2
the tone generation timer
and action in a similar way.


270
00:12:26.580 --> 00:12:29.082 line:-2 align:center
When the zero
timestamp action fires,


271
00:12:29,082 --> 00:12:32,686 line:-2
the last zero timestamp value
is obtained from the device


272
00:12:32.686 --> 00:12:35.289 line:-2 align:center
by calling
GetCurrentZeroTimestamp.


273
00:12:35.289 --> 00:12:38.325 line:-2 align:center
If this is the first timestamp,
use the mach_absolute_time


274
00:12:38.325 --> 00:12:40.827 line:-2 align:center
passed into the timer
as the anchor time.


275
00:12:40.827 --> 00:12:43.130 line:-2 align:center
Otherwise,
the timestamps are updated


276
00:12:43.130 --> 00:12:47.868 line:-2 align:center
by the zero timestamp period
and host ticks per buffer.


277
00:12:47,868 --> 00:12:50,204 line:-2
Calling
UpdateCurrentZeroTimestamp


278
00:12:50,204 --> 00:12:52,172 line:-2
will update
the device's timestamps


279
00:12:52,172 --> 00:12:55,709 line:-2
so that the HAL can
use the new values.


280
00:12:55.709 --> 00:12:58.879 line:-2 align:center
Set the ZTS timer
to wake up in the future


281
00:12:58,879 --> 00:13:00,881 line:-1
for the next zero timestamp.


282
00:13:02,182 --> 00:13:05,285 line:-2
To simulate DMA,
audio data will be written


283
00:13:05,285 --> 00:13:08,989 line:-2
to the input IO buffer
when the timer action runs.


284
00:13:08.989 --> 00:13:11.491 line:-2 align:center
First,
check if the input memory map


285
00:13:11.491 --> 00:13:15.195 line:-2 align:center
that was assigned when
start IO was called is valid.


286
00:13:15,195 --> 00:13:18,398 line:-2
Use the memory map buffer length
and stream format


287
00:13:18,398 --> 00:13:21,001 line:-2
to get the length in samples
for the IO buffer.


288
00:13:21,001 --> 00:13:25,472 line:-2
Since the stream only supports
signed 16 bit pcm sample format,


289
00:13:25.472 --> 00:13:27.708 line:-2 align:center
get the buffer address
and offset,


290
00:13:27,708 --> 00:13:30,377 line:-2
and assign it
as a int16_t buffer pointer.


291
00:13:30,377 --> 00:13:32,946 line:-2
Now the input IO buffer
can be filled out


292
00:13:32.946 --> 00:13:34.548 line:-1 align:center
by generating a sine tone.


293
00:13:34.548 --> 00:13:38.519 line:-2 align:center
First, get the input volume
control gain as a scalar value.


294
00:13:38.519 --> 00:13:40.587 line:-2 align:center
Then loop for the number
of samples needed


295
00:13:40,587 --> 00:13:42,155 line:-1
and generate a sine tone,


296
00:13:42.155 --> 00:13:43.790 line:-2 align:center
applying
the volume control gain.


297
00:13:43.790 --> 00:13:47.394 line:-2 align:center
Next, loop through the buffer
and fill in the sine tone sample


298
00:13:47,394 --> 00:13:49,897 line:-2
to the IO buffer based
on the channel count,


299
00:13:49,897 --> 00:13:51,765 line:-1
also accounting for wraparound.


300
00:13:51,798 --> 00:13:55,035 line:-2
Now that the audio dext
is configured and can run IO,


301
00:13:55,035 --> 00:13:57,871 line:-2
the next step is
to handle configuration changes


302
00:13:57.871 --> 00:14:01.575 line:-2 align:center
to update the device
and its IO-related state.


303
00:14:01.608 --> 00:14:04.278 line:-2 align:center
The device methods shown
can be used to request


304
00:14:04.278 --> 00:14:06.313 line:-2 align:center
and perform
configuration changes.


305
00:14:06.313 --> 00:14:08.315 line:-2 align:center
For changes
to an audio device's state


306
00:14:08.315 --> 00:14:10.817 line:-2 align:center
that will affect
IO or its structure,


307
00:14:10,817 --> 00:14:13,220 line:-2
the driver needs
to request a config change


308
00:14:13.220 --> 00:14:16.523 line:-2 align:center
by calling
RequestDeviceConfigurationChange


309
00:14:16,523 --> 00:14:18,926 line:-2
The HAL will
stop any running IO, and


310
00:14:18,926 --> 00:14:22,896 line:-2
PerformDeviceConfigurationChange
will be called on the driver.


311
00:14:22,896 --> 00:14:26,800 line:-2
Only then can the audio device
update its IO-related state.


312
00:14:26,800 --> 00:14:28,802 line:-2
A common scenario of this
would be


313
00:14:28,802 --> 00:14:31,205 line:-2
updating the audio device's
current sample rate


314
00:14:31,205 --> 00:14:33,340 line:-2
or changing
the current stream format


315
00:14:33.340 --> 00:14:36.109 line:-2 align:center
to correspond with changes
to the hardware device.


316
00:14:36,109 --> 00:14:38,979 line:-2
The diagram shows the sequence
of events


317
00:14:38,979 --> 00:14:41,114 line:-2
for device configuration
changes.


318
00:14:41,114 --> 00:14:44,585 line:-2
The driver should first
request a configuration change.


319
00:14:44.585 --> 00:14:46.486 line:-2 align:center
The HAL will
notify any listeners


320
00:14:46.486 --> 00:14:49.223 line:-2 align:center
that the config change
will begin for the device.


321
00:14:49,223 --> 00:14:52,893 line:-2
IO will be stopped on the device
if it is currently running.


322
00:14:52,893 --> 00:14:55,562 line:-2
The current state
of the device will be captured.


323
00:14:55,562 --> 00:14:59,099 line:-2
PerformDeviceConfigurationChange
will be called on the driver.


324
00:14:59.099 --> 00:15:01.001 line:-2 align:center
This is
when the driver is allowed


325
00:15:01,001 --> 00:15:03,470 line:-2
to change any state
on the device and hardware.


326
00:15:03.470 --> 00:15:05.405 line:-2 align:center
Once the config change is
performed,


327
00:15:05,405 --> 00:15:07,341 line:-2
the new state
of the device will be captured,


328
00:15:07,341 --> 00:15:10,344 line:-2
and all IO-related state,
such as IO buffers


329
00:15:10.344 --> 00:15:12.346 line:-2 align:center
or sample rate,
will be updated.


330
00:15:12,346 --> 00:15:14,281 line:-2
Any changes
to the device's state


331
00:15:14,281 --> 00:15:16,717 line:-2
will then be notified
to any client listeners.


332
00:15:16.717 --> 00:15:19.987 line:-2 align:center
If IO was previously running
prior to the config change,


333
00:15:19,987 --> 00:15:23,524 line:-2
IO will be restarted
on the device.


334
00:15:23.524 --> 00:15:26.126 line:-2 align:center
Finally, the HAL will
notify any listeners


335
00:15:26.126 --> 00:15:28.896 line:-2 align:center
that the config change has
now ended.


336
00:15:28.896 --> 00:15:32.266 line:-2 align:center
To simulate a hardware
bottom up config change request,


337
00:15:32,266 --> 00:15:34,368 line:-2
a custom user client command
is used


338
00:15:34,368 --> 00:15:36,837 line:-2
to trigger a sample rate change
on the dext.


339
00:15:36.837 --> 00:15:39.773 line:-2 align:center
RequestDeviceConfigurationChange
will notify the HAL


340
00:15:39.773 --> 00:15:43.243 line:-2 align:center
of a config change request
on the audio device.


341
00:15:43.243 --> 00:15:46.980 line:-2 align:center
Notice that the change info
can be any kind of OSObject.


342
00:15:46.980 --> 00:15:50.317 line:-2 align:center
This example provides
a custom config change action


343
00:15:50.317 --> 00:15:54.188 line:-2 align:center
and the change info
as an OSString.


344
00:15:54,188 --> 00:15:56,623 line:-2
To handle performing
the configuration change,


345
00:15:56.623 --> 00:15:58.625 line:-2 align:center
the SimpleAudioDevice class
needs


346
00:15:58.625 --> 00:16:02.963 line:-2 align:center
to override the method
PerformDeviceConfigurationChange


347
00:16:02.963 --> 00:16:05.632 line:-2 align:center
In
PerformDeviceConfigurationChange


348
00:16:05,632 --> 00:16:08,535 line:-2
handle the config change action
in the switch statement.


349
00:16:08.535 --> 00:16:11.471 line:-2 align:center
Log the same OSString object
that was supplied


350
00:16:11,471 --> 00:16:14,741 line:-2
as the change info when
the config change was requested.


351
00:16:14,741 --> 00:16:16,877 line:-2
Next,
get the current sample rate,


352
00:16:16,877 --> 00:16:19,379 line:-2
and set a new rate
on the device.


353
00:16:19.379 --> 00:16:20.848 line:-1 align:center
Make sure the audio stream


354
00:16:20.848 --> 00:16:22.583 line:-2 align:center
updates
its current stream format


355
00:16:22.583 --> 00:16:24.084 line:-1 align:center
to handle the sample rate change


356
00:16:24,084 --> 00:16:26,587 line:-2
by calling
DeviceSampleRateChanged


357
00:16:26,587 --> 00:16:28,155 line:-1
on the stream object.


358
00:16:28.155 --> 00:16:30.891 line:-2 align:center
Other config change actions
the device does not


359
00:16:30,891 --> 00:16:33,994 line:-2
handle directly can
be passed off to the base class.


360
00:16:34,027 --> 00:16:36,363 line:-2
Let's take a look
at this on the Mac.


361
00:16:36,396 --> 00:16:39,299 line:-2
So SimpleAudio is
the sample code application


362
00:16:39.299 --> 00:16:41.268 line:-2 align:center
that bundles
the driver extension.


363
00:16:41,268 --> 00:16:43,437 line:-2
To install
the audio driver extension,


364
00:16:43,437 --> 00:16:45,606 line:-1
simply press Install Driver,


365
00:16:45,606 --> 00:16:47,841 line:-2
and that should bring
up the security preferences.


366
00:16:47.841 --> 00:16:49.910 line:-1 align:center
So if we press Allow,


367
00:16:49,910 --> 00:16:53,881 line:-2
that should dynamically
load the audio driver extension.


368
00:16:53,881 --> 00:16:55,582 line:-2
Previously,
this was not possible


369
00:16:55.582 --> 00:16:58.285 line:-2 align:center
with the kext because
a reboot would be required.


370
00:16:58,318 --> 00:17:02,322 line:-2
So SimpleAudioDevice has
the sample rate formats


371
00:17:02,322 --> 00:17:06,193 line:-2
available and
the tone selection data source.


372
00:17:06.193 --> 00:17:09.229 line:-2 align:center
And the volume control
we added in the sample code.


373
00:17:09,263 --> 00:17:10,998 line:-1
Now we can open QuickTime


374
00:17:10.998 --> 00:17:13.734 line:-2 align:center
and do audio recording
on the audio device.


375
00:17:15.969 --> 00:17:18.338 line:-1 align:center
[tone]


376
00:17:18.372 --> 00:17:19.740 line:-1 align:center
[different tone]


377
00:17:19,773 --> 00:17:23,110 line:-2
And to test
the bottom-up config changes,


378
00:17:23,143 --> 00:17:25,913 line:-2
we can directly communicate
with the dext


379
00:17:25,946 --> 00:17:28,382 line:-2
to toggle the tone frequency
or the sample rate,


380
00:17:28.415 --> 00:17:30.284 line:-2 align:center
and the changes should also
be reflected


381
00:17:30,317 --> 00:17:31,885 line:-1
in Audio MIDI setup.


382
00:17:31,919 --> 00:17:33,954 line:-2
To get rid
of the driver extension,


383
00:17:33.987 --> 00:17:36.356 line:-1 align:center
simply delete the application.


384
00:17:42,796 --> 00:17:46,733 line:-2
And you can see it is no longer
available in Audio MIDI setup.


385
00:17:46,767 --> 00:17:49,136 line:-2
To wrap things up,
I did a recap of the state


386
00:17:49,136 --> 00:17:51,972 line:-2
of audio server plug-ins
and DriverKit extensions.


387
00:17:51,972 --> 00:17:54,007 line:-2
This will continue
to be supported


388
00:17:54.007 --> 00:17:57.544 line:-2 align:center
and the AudioServerPlugIn driver
interface is not deprecated.


389
00:17:57,544 --> 00:17:59,947 line:-2
I introduced
the new AudioDriverKit framework


390
00:17:59,947 --> 00:18:02,649 line:-2
and discussed the benefits
of the new driver model.


391
00:18:03.016 --> 00:18:05.118 line:-1 align:center
I went over an in-depth example


392
00:18:05.118 --> 00:18:07.588 line:-2 align:center
of how to adopt
the AudioDriverKit framework


393
00:18:07,588 --> 00:18:08,956 line:-1
and showed sample code


394
00:18:08,956 --> 00:18:11,992 line:-2
to create an IOUserService based
audio dext,


395
00:18:11,992 --> 00:18:15,062 line:-1
all running in user space.


396
00:18:15.095 --> 00:18:18.498 line:-2 align:center
Download the latest
Xcode and DriverKit SDK.


397
00:18:18.498 --> 00:18:21.468 line:-2 align:center
Adopt AudioDriverKit
for audio devices


398
00:18:21,468 --> 00:18:25,172 line:-2
that have DriverKit supported
hardware device families.


399
00:18:25.172 --> 00:18:27.407 line:-2 align:center
And please
provide any feedback


400
00:18:27,407 --> 00:18:30,878 line:-2
about AudioDriverKit through
Apple's Feedback Assistant.


401
00:18:30.878 --> 00:18:32.346 line:-1 align:center
Thanks.


402
00:18:32,379 --> 00:18:34,348 line:-1
[upbeat music]

