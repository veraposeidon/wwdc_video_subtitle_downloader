2
00:00:00.000 --> 00:00:02.002 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,002 --> 00:00:05,639 line:-1
♪ Bass music playing ♪


4
00:00:05,639 --> 00:00:07,608 line:-1
[KEYSTROKES]


5
00:00:07,608 --> 00:00:09,476 align:center size:2% position:89%
♪


6
00:00:09.476 --> 00:00:12.813 line:-1 position:50%
Edward: Hi,
and welcome to WWDC!


7
00:00:12.813 --> 00:00:15.649 line:-1 position:50%
I'm Edward, an engineer
on the Wallet team,


8
00:00:15,649 --> 00:00:18,418 line:-1
and later I'll be joined
by my colleague, Russ.


9
00:00:18,418 --> 00:00:20,020 line:-1
We're very excited
to be here today


10
00:00:20.020 --> 00:00:23.257 line:-1 position:50%
to talk to you about what's new
in Wallet and Apple Pay.


11
00:00:23,257 --> 00:00:26,093 line:-1
Today I'd like to talk
about three main areas.


12
00:00:26.093 --> 00:00:28.929 line:-1 position:50%
First, I'd like to share
some Wallet updates


13
00:00:28.929 --> 00:00:30.797 line:-1 position:50%
and tell you about
some exciting rollouts


14
00:00:30,797 --> 00:00:33,033 line:-1
we've had in the last year.


15
00:00:33,033 --> 00:00:36,937 line:-1
Second, we have made a lot of
exciting updates to Apple Pay.


16
00:00:36,937 --> 00:00:38,872 line:-1
We've also added
some new functionality,


17
00:00:38,872 --> 00:00:41,508 line:-1
making payments
even easier to use.


18
00:00:41.508 --> 00:00:44.611 line:-1 position:50%
Third, I want to go through
some new API enhancements


19
00:00:44.611 --> 00:00:46.246 line:-1 position:50%
that we've made.


20
00:00:46.246 --> 00:00:50.484 line:-1 position:50%
So let's get started with
some updates to Wallet.


21
00:00:50,484 --> 00:00:52,586 line:-1
As you may have heard
in the Keynote,


22
00:00:52,586 --> 00:00:55,389 line:-1
we're bringing identity cards
to Apple Wallet.


23
00:00:55.389 --> 00:00:58.258 line:-1 position:50%
Starting in the US,
with a few select states,


24
00:00:58.258 --> 00:00:59.960 line:-1 position:50%
you can just scan
your driver's license


25
00:00:59.960 --> 00:01:02.562 line:-1 position:50%
or state ID
and capture a selfie.


26
00:01:02,562 --> 00:01:05,599 line:-1
Your ID is protected
by the Secure Element.


27
00:01:05.599 --> 00:01:09.303 line:-1 position:50%
The TSA is working to enable
airport security checkpoints


28
00:01:09.303 --> 00:01:12.506 line:-1 position:50%
as the first place
you can use your digital ID.


29
00:01:12,506 --> 00:01:14,408 line:-1
For more information on this,


30
00:01:14.408 --> 00:01:18.111 line:-1 position:50%
check out the links associated
with this session.


31
00:01:18.111 --> 00:01:20.113 line:-1 position:50%
Also new in iOS 15,


32
00:01:20.113 --> 00:01:22.950 line:-1 position:50%
we've added support
for HomeKit-connected locks,


33
00:01:22.950 --> 00:01:27.087 line:-1 position:50%
so users can now tap to unlock
a door with a home key pass.


34
00:01:27,087 --> 00:01:29,089 line:-1
When it comes to adding passes,


35
00:01:29.089 --> 00:01:32.993 line:-1 position:50%
we know many of your users
install them right from the web.


36
00:01:32.993 --> 00:01:36.663 line:-1 position:50%
In iOS 14, if you wanted
to add four movie tickets,


37
00:01:36.663 --> 00:01:39.933 line:-1 position:50%
for example,
you would add them individually.


38
00:01:39,933 --> 00:01:41,134 line:-1
New this year,


39
00:01:41.134 --> 00:01:45.172 line:-1 position:50%
we've added multipass downloads
from Safari.


40
00:01:45,172 --> 00:01:48,942 line:-1
With a straightforward change,
you can bundle passes together,


41
00:01:48,942 --> 00:01:51,778 line:-1
making the experience smooth
for your users.


42
00:01:51,778 --> 00:01:55,015 line:-1
To do this,
you'll need to do three things.


43
00:01:55.015 --> 00:01:59.119 line:-1 position:50%
First, zip the PkPass files
together.


44
00:01:59.119 --> 00:02:03.690 line:-1 position:50%
Second, set the file extension
to .pkpasses.


45
00:02:03,690 --> 00:02:07,427 position:50%
And, finally,
use the correct mime type.


46
00:02:07,427 --> 00:02:10,664 position:50%
Now, all the passes
in the bundle will be downloaded


47
00:02:10,664 --> 00:02:14,668 position:50%
and processed by Wallet
in a single download.


48
00:02:14,668 --> 00:02:17,804 line:-1
And with all these passes,
it can sometimes be troublesome


49
00:02:17.804 --> 00:02:20.040 line:-1 position:50%
for you to keep track
of them all.


50
00:02:20.040 --> 00:02:23.610 line:-1 position:50%
We also know that many people
don't like to delete old passes,


51
00:02:23.610 --> 00:02:26.380 line:-1 position:50%
preferring instead
to have them as keepsakes,


52
00:02:26,380 --> 00:02:28,815 line:-1
but that can make Wallet
kind of cluttered.


53
00:02:28,815 --> 00:02:30,917 line:-1
So new in iOS 15,


54
00:02:30,917 --> 00:02:34,154 line:-1
Wallet will now automatically
hide your expired passes,


55
00:02:34.154 --> 00:02:37.057 line:-1 position:50%
keeping passes organized
and easy to find.


56
00:02:37,057 --> 00:02:38,291 line:-1
Let me show you an example


57
00:02:38,291 --> 00:02:41,461 line:-1
of how you can
take advantage of this.


58
00:02:41.461 --> 00:02:44.598 line:-1 position:50%
Here we see some JSON
from an example pass.


59
00:02:44,598 --> 00:02:47,234 line:-1
Wallet looks at three fields
to determine if a pass


60
00:02:47.234 --> 00:02:49.936 line:-1 position:50%
should be automatically hidden.


61
00:02:49.936 --> 00:02:52.939 line:-1 position:50%
Number one, the pass
has an expiration date


62
00:02:52,939 --> 00:02:56,076 line:-1
that is older
than the current date.


63
00:02:56.076 --> 00:03:00.814 line:-1 position:50%
Two, the relevant date
is older than one day.


64
00:03:00.814 --> 00:03:04.317 line:-1 position:50%
Or three,
the pass has been voided.


65
00:03:04.317 --> 00:03:07.020 line:-1 position:50%
To ensure a great experience
for your users,


66
00:03:07,020 --> 00:03:09,189 line:-1
you should ensure these fields
are set correctly


67
00:03:09,189 --> 00:03:11,491 line:-1
on your passes.


68
00:03:11,491 --> 00:03:14,761 line:-1
Now let me tell you about some
updates we've made to Apple Pay.


69
00:03:14.761 --> 00:03:16.963 line:-1 position:50%
Apple Pay continues to be
the easiest way


70
00:03:16.963 --> 00:03:21.435 line:-1 position:50%
to make payments on iPhone,
iPad, Apple Watch, and Mac.


71
00:03:21.435 --> 00:03:25.605 line:-1 position:50%
It allows users to make payments
in apps and on the web.


72
00:03:25,605 --> 00:03:28,708 line:-1
Apple Pay is supported
in iMessage and Business Chat,


73
00:03:28.708 --> 00:03:29.943 line:-1 position:50%
and also in App Clips


74
00:03:29.943 --> 00:03:32.979 line:-1 position:50%
for streamlined,
in-the-moment experiences.


75
00:03:32,979 --> 00:03:36,349 line:-1
Apple Pay usage around the world
continues to grow.


76
00:03:36.349 --> 00:03:38.585 line:-1 position:50%
We've added support
in Mexico, Israel,


77
00:03:38,585 --> 00:03:41,354 line:-1
and South Africa this year,
meaning Apple Pay


78
00:03:41.354 --> 00:03:46.326 line:-1 position:50%
is now available in 55 countries
and regions across the globe.


79
00:03:46,326 --> 00:03:48,495 line:-1
We've added support
for Express Transit


80
00:03:48.495 --> 00:03:50.197 line:-1 position:50%
in more locations.


81
00:03:50,197 --> 00:03:53,600 line:-1
And, we've included support for
combined credit and debit cards


82
00:03:53.600 --> 00:03:55.502 line:-1 position:50%
in places such as Brazil.


83
00:03:55.502 --> 00:03:57.304 line:-1 position:50%
Now, I'd like to show you
a few changes


84
00:03:57,304 --> 00:03:59,773 line:-1
that you can make
to your apps and websites


85
00:03:59.773 --> 00:04:02.642 line:-1 position:50%
to create a great
payment experience.


86
00:04:02.642 --> 00:04:05.612 line:-1 position:50%
Last year we added support
for more button types


87
00:04:05,612 --> 00:04:10,083 line:-1
such as Rent with Apple Pay
and Top Up with Apple Pay.


88
00:04:10.083 --> 00:04:12.986 line:-1 position:50%
Today we're introducing
one more:


89
00:04:12,986 --> 00:04:15,021 line:-1
Continue with Apple Pay.


90
00:04:15,021 --> 00:04:18,458 line:-1
You should use this button when
offering Apple Pay in a cart


91
00:04:18.458 --> 00:04:20.127 line:-1 position:50%
alongside other buttons.


92
00:04:20.127 --> 00:04:23.430 line:-1 position:50%
You can use Continue
as a call to action.


93
00:04:23.430 --> 00:04:26.333 line:-1 position:50%
We're also introducing a new
JavaScript implementation


94
00:04:26,333 --> 00:04:28,135 line:-1
for the Apple Pay button.


95
00:04:28.135 --> 00:04:31.638 line:-1 position:50%
This new button supports all
current button types and styles.


96
00:04:31,638 --> 00:04:34,040 line:-1
It's easy to implement,
and can be customized


97
00:04:34.040 --> 00:04:36.543 line:-1 position:50%
to match the design
of your sites.


98
00:04:36,543 --> 00:04:38,879 line:-1
Here is an example
implementation.


99
00:04:38.879 --> 00:04:39.846 line:-1 position:50%
As you can see,


100
00:04:39,846 --> 00:04:42,883 line:-1
the button size and style
can be configured easily.


101
00:04:42.883 --> 00:04:46.153 line:-1 position:50%
Note that the styles are
prefixed with "apple-pay".


102
00:04:46,153 --> 00:04:47,821 line:-1
For more information on this,


103
00:04:47,821 --> 00:04:52,192 line:-1
check out the documentation
on the Apple Developer Portal.


104
00:04:52,192 --> 00:04:54,928 line:-1
Next, I'd like to show you
the big changes we've made


105
00:04:54.928 --> 00:04:58.131 line:-1 position:50%
to Apple Pay
for iPhone and iPad.


106
00:04:58,131 --> 00:05:01,902 line:-1
For iOS 15, we're excited
to make payments even better


107
00:05:01,902 --> 00:05:04,204 line:-1
with a brand-new
Apple Pay experience.


108
00:05:04.204 --> 00:05:07.841 line:-1 position:50%
We rebuilt the Apple Pay sheet
from the ground up in SwiftUI


109
00:05:07.841 --> 00:05:09.576 line:-1 position:50%
with an all-new design.


110
00:05:09.576 --> 00:05:12.913 line:-1 position:50%
It gives users an even clearer
and smoother payment experience


111
00:05:12,913 --> 00:05:15,582 line:-1
with a great new look.


112
00:05:15,582 --> 00:05:17,684 line:-1
We also implemented
several new features


113
00:05:17,684 --> 00:05:19,553 line:-1
to improve conversion.


114
00:05:19.553 --> 00:05:21.588 line:-1 position:50%
For users new to Apple Pay,


115
00:05:21.588 --> 00:05:24.157 line:-1 position:50%
we simplified the flow
to add a card and addresses


116
00:05:24.157 --> 00:05:26.126 line:-1 position:50%
from the payment sheet.


117
00:05:26.126 --> 00:05:28.395 line:-1 position:50%
Existing users will be able
to add another card


118
00:05:28.395 --> 00:05:31.331 line:-1 position:50%
without leaving
the Apple Pay experience.


119
00:05:31,331 --> 00:05:33,300 line:-1
We also redesigned
the error handling


120
00:05:33.300 --> 00:05:36.436 line:-1 position:50%
for more clarity
when a problem does occur.


121
00:05:36,436 --> 00:05:39,272 line:-1
Once a user has finished adding
a new payment method,


122
00:05:39,272 --> 00:05:42,542 line:-1
they seamlessly resume
their transaction.


123
00:05:42.542 --> 00:05:44.444 line:-1 position:50%
We also added a new summary view


124
00:05:44,444 --> 00:05:46,680 line:-1
which shows
more detailed information,


125
00:05:46,680 --> 00:05:50,951 line:-1
such as payment items,
discounts, and subtotals.


126
00:05:50,951 --> 00:05:52,786 line:-1
New for iOS 15,


127
00:05:52.786 --> 00:05:57.257 line:-1 position:50%
we also display your app's icon
on the summary view.


128
00:05:57.257 --> 00:05:58.892 line:-1 position:50%
For payments on the web,


129
00:05:58,892 --> 00:06:01,161 line:-1
we're now showing
the Web Clip icon


130
00:06:01.161 --> 00:06:03.029 line:-1 position:50%
on the payment summary view.


131
00:06:03,029 --> 00:06:06,099 line:-1
In Apple Pay,
this was previously only visible


132
00:06:06,099 --> 00:06:09,970 line:-1
when using handoff from a Mac
to complete a transaction.


133
00:06:09,970 --> 00:06:11,304 line:-1
Now your website icon


134
00:06:11,304 --> 00:06:13,907 line:-1
is viewable within
the Apple Pay transaction


135
00:06:13.907 --> 00:06:16.443 line:-1 position:50%
to provide visual reassurance
for the user


136
00:06:16,443 --> 00:06:18,945 line:-1
that payment is going
to the right place.


137
00:06:18,945 --> 00:06:21,147 line:-1
If you accept Apple Pay
on the web


138
00:06:21.147 --> 00:06:23.650 line:-1 position:50%
and you haven't already set
a Web Clip icon,


139
00:06:23,650 --> 00:06:28,455 line:-1
we would strongly recommend you
make your icon visible to users.


140
00:06:28.455 --> 00:06:32.058 line:-1 position:50%
To do this, you should provide
a 2x and 3x icon


141
00:06:32,058 --> 00:06:35,762 line:-1
at the sizes shown
in your root document folder.


142
00:06:35,762 --> 00:06:38,098 line:-1
Apple Pay will then
automatically retrieve


143
00:06:38,098 --> 00:06:41,234 line:-1
and display this icon
with the payment request.


144
00:06:41.234 --> 00:06:43.703 line:-1 position:50%
Detailed information
on implementing this


145
00:06:43,703 --> 00:06:46,940 line:-1
is available in the Human
Interface Guidelines section


146
00:06:46.940 --> 00:06:49.476 line:-1 position:50%
of the Apple Developer site.


147
00:06:49.476 --> 00:06:52.012 line:-1 position:50%
While we're on the subject
of icon sizes,


148
00:06:52.012 --> 00:06:54.948 line:-1 position:50%
I wanted to remind you of the
new icon size requirements


149
00:06:54,948 --> 00:06:57,117 line:-1
for your PKPasses.


150
00:06:57.117 --> 00:07:02.255 line:-1 position:50%
Since notifications in iOS 15
now display a bigger icon,


151
00:07:02,255 --> 00:07:04,724 line:-1
you'll need to update
your PKPass icons


152
00:07:04,724 --> 00:07:09,963 line:-1
to a minimum of 38x38 at 1x
to ensure that your icons


153
00:07:09,963 --> 00:07:13,800 line:-1
are displayed without blurring.


154
00:07:13.800 --> 00:07:16.569 line:-1 position:50%
We're also pleased
to introduce more flexibility


155
00:07:16.569 --> 00:07:18.271 line:-1 position:50%
in the total line.


156
00:07:18,271 --> 00:07:20,407 line:-1
This will enable you
to add a date


157
00:07:20,407 --> 00:07:22,275 line:-1
if the payment occurs later;


158
00:07:22.275 --> 00:07:24.911 line:-1 position:50%
for example,
if you take pre-orders


159
00:07:24,911 --> 00:07:29,215 line:-1
or to add the frequency
for a recurring payment.


160
00:07:29.215 --> 00:07:31.818 line:-1 position:50%
Many of the new features
we've just observed can be added


161
00:07:31,818 --> 00:07:35,088 line:-1
to your apps with only
a few straightforward changes.


162
00:07:35.088 --> 00:07:36.556 line:-1 position:50%
So we'll now take a closer look


163
00:07:36,556 --> 00:07:40,660 line:-1
into the API enhancements
we're introducing in iOS 15.


164
00:07:40.660 --> 00:07:43.763 line:-1 position:50%
We're pleased to add support
for shipping date ranges.


165
00:07:43,763 --> 00:07:46,132 line:-1
Now you can present your users
with relevant shipping


166
00:07:46.132 --> 00:07:48.735 line:-1 position:50%
or pickup times
within Apple Pay.


167
00:07:48,735 --> 00:07:50,804 line:-1
These can be used
to set estimated shipping


168
00:07:50,804 --> 00:07:54,507 line:-1
or delivery dates or time
windows for in-store pickups.


169
00:07:54.507 --> 00:07:56.242 line:-1 position:50%
This extra information
is displayed


170
00:07:56.242 --> 00:07:59.045 line:-1 position:50%
right on the main
Apple Pay view.


171
00:07:59.045 --> 00:08:01.448 line:-1 position:50%
The new shipping date APIs
have built-in support


172
00:08:01,448 --> 00:08:03,717 line:-1
for calendars and time zones.


173
00:08:03.717 --> 00:08:05.485 line:-1 position:50%
This makes the handling
of shipping dates


174
00:08:05,485 --> 00:08:07,987 line:-1
or pick up times in your app
straightforward


175
00:08:07,987 --> 00:08:11,658 line:-1
and the relevant information is
displayed clearly to your users.


176
00:08:11,658 --> 00:08:15,095 line:-1
Now I'll briefly show you
how this works.


177
00:08:15,095 --> 00:08:17,797 line:-1
We start by defining
a normal shipping method


178
00:08:17.797 --> 00:08:21.468 line:-1 position:50%
using the same
PKShippingMethod as before.


179
00:08:21,468 --> 00:08:23,837 line:-1
Next, we choose a calendar.


180
00:08:23.837 --> 00:08:27.907 line:-1 position:50%
In this example, we use
the user's current calendar.


181
00:08:27.907 --> 00:08:31.444 line:-1 position:50%
We use today as a reference
and estimate the arrival


182
00:08:31,444 --> 00:08:34,447 line:-1
between three to seven days
from this date.


183
00:08:34,447 --> 00:08:37,317 line:-1
We then determine the start
and end date for our date range


184
00:08:37.317 --> 00:08:39.219 line:-1 position:50%
using the calendar.


185
00:08:39.219 --> 00:08:43.590 line:-1 position:50%
Finally, we convert the dates to
the appropriate date components


186
00:08:43.590 --> 00:08:46.459 line:-1 position:50%
and then we add them
to the shipping method.


187
00:08:46,459 --> 00:08:49,129 line:-1
We use date components
rather than simple dates


188
00:08:49.129 --> 00:08:51.765 line:-1 position:50%
so we can take advantage
of the rich calendar


189
00:08:51.765 --> 00:08:54.701 line:-1 position:50%
and time zone support
built into iOS.


190
00:08:54,701 --> 00:08:58,538 line:-1
This enables use cases that
would otherwise not be possible.


191
00:08:58.538 --> 00:09:01.074 line:-1 position:50%
For example, we can provide
the correct time zone


192
00:09:01,074 --> 00:09:05,545 line:-1
for a pickup time regardless
of the user's current time zone.


193
00:09:05.545 --> 00:09:08.248 line:-1 position:50%
This level of detail
also allows us to show


194
00:09:08.248 --> 00:09:11.651 line:-1 position:50%
the date and time information
most appropriate to the user,


195
00:09:11.651 --> 00:09:15.555 line:-1 position:50%
such as displaying
a specific pickup time.


196
00:09:15,555 --> 00:09:17,524 line:-1
We've included
a JavaScript equivalent


197
00:09:17.524 --> 00:09:19.359 line:-1 position:50%
for Apple Pay on the web.


198
00:09:19,359 --> 00:09:22,095 line:-1
You can see we specify
the date component range


199
00:09:22,095 --> 00:09:25,331 line:-1
a little differently
than we do in Swift.


200
00:09:25.331 --> 00:09:27.734 line:-1 position:50%
Your date components
can be used in conjunction


201
00:09:27.734 --> 00:09:30.336 line:-1 position:50%
with any of our supported
pickup types.


202
00:09:30.336 --> 00:09:35.008 line:-1 position:50%
For example, you could display
a pickup time in your app.


203
00:09:35.008 --> 00:09:36.709 line:-1 position:50%
In addition to date ranges,


204
00:09:36.709 --> 00:09:39.679 line:-1 position:50%
you can now declare
a read-only shipping address.


205
00:09:39.679 --> 00:09:41.614 line:-1 position:50%
You can use this
to inform the user


206
00:09:41.614 --> 00:09:44.884 line:-1 position:50%
of a specific pickup location.


207
00:09:44,884 --> 00:09:47,921 line:-1
To enable this,
you must provide address details


208
00:09:47.921 --> 00:09:50.590 line:-1 position:50%
as an instance of PKContact.


209
00:09:50.590 --> 00:09:51.958 line:-1 position:50%
In this example,


210
00:09:51.958 --> 00:09:56.029 line:-1 position:50%
we have created a postal address
as a CNMutablePostalAddress


211
00:09:56.029 --> 00:09:59.499 line:-1 position:50%
so we can set all the address
components that we need.


212
00:09:59,499 --> 00:10:01,568 position:50%
You can now add
the shipping contact


213
00:10:01,568 --> 00:10:03,536 position:50%
to payment request.


214
00:10:03,536 --> 00:10:06,072 position:50%
Finally we declare
the editing mode


215
00:10:06,072 --> 00:10:08,808 position:50%
and specify the required
shipping fields.


216
00:10:08,808 --> 00:10:11,778 position:50%
The address fields
included in the PKContact


217
00:10:11,778 --> 00:10:14,547 line:0
will be presented
to the user as read-only.


218
00:10:14,547 --> 00:10:18,084 line:0
In this example, we've provided
a pick up postal address,


219
00:10:18,084 --> 00:10:21,287 position:50%
which the user
won't be able to edit.


220
00:10:21,287 --> 00:10:23,523 line:-1
And here's the equivalent
in JavaScript


221
00:10:23,523 --> 00:10:25,391 line:-1
for Apple Pay on the web.


222
00:10:25,391 --> 00:10:28,127 line:-1
You setup
a shippingContact dictionary,


223
00:10:28.127 --> 00:10:32.365 line:-1 position:50%
set the shippingType,
the shippingContactEditingMode,


224
00:10:32.365 --> 00:10:35.235 line:-1 position:50%
and the
requiredShippingContactFields,


225
00:10:35,235 --> 00:10:36,703 line:0
and then you include
the other fields


226
00:10:36,703 --> 00:10:39,305 line:0
for a JavaScript
payment request.


227
00:10:39.305 --> 00:10:42.575 line:-1 position:50%
For more information, check out
the documentation available


228
00:10:42.575 --> 00:10:46.980 line:-1 position:50%
on the Apple Pay section
of the Developer Portal.


229
00:10:46,980 --> 00:10:49,849 line:-1
Another great new feature
for iOS 15


230
00:10:49.849 --> 00:10:51.985 line:-1 position:50%
is support for coupon codes.


231
00:10:51.985 --> 00:10:54.254 line:-1 position:50%
Now your users can enter
promotional codes


232
00:10:54,254 --> 00:10:56,990 line:-1
once they've initiated
a payment.


233
00:10:56.990 --> 00:10:58.658 line:-1 position:50%
This is intended so your users


234
00:10:58.658 --> 00:11:01.528 line:-1 position:50%
don't have to cancel
their Apple Pay transaction


235
00:11:01,528 --> 00:11:04,764 line:-1
if they forgot to apply
a discount code.


236
00:11:04,764 --> 00:11:07,100 line:-1
You might also consider
implementing this


237
00:11:07,100 --> 00:11:10,203 line:-1
if you have an express purchase
flow where users can check out


238
00:11:10.203 --> 00:11:13.072 line:-1 position:50%
from the product page
or the shopping cart,


239
00:11:13.072 --> 00:11:17.610 line:-1 position:50%
but the coupon entry field
is only presented at checkout.


240
00:11:17.610 --> 00:11:20.246 line:-1 position:50%
We've provided methods
to update the payment request,


241
00:11:20,246 --> 00:11:22,415 line:-1
so you can validate
the discount codes


242
00:11:22,415 --> 00:11:25,418 line:-1
or return error messages
when required.


243
00:11:25.418 --> 00:11:28.855 line:-1 position:50%
Let's dive in
and take a look at the code.


244
00:11:28,855 --> 00:11:31,424 line:-1
You can make changes
using the delegate method


245
00:11:31.424 --> 00:11:33.626 line:-1 position:50%
which performs updates
whenever the coupon code


246
00:11:33.626 --> 00:11:35.728 line:-1 position:50%
is changed by the user.


247
00:11:35,728 --> 00:11:38,264 line:-1
For example, you could use this
to validate a code


248
00:11:38,264 --> 00:11:41,534 line:-1
and then update
any payment totals.


249
00:11:41,534 --> 00:11:44,437 line:0
You also use the method
to return customized errors


250
00:11:44,437 --> 00:11:47,907 line:0
or update the payment summary
items and shipping methods.


251
00:11:47,907 --> 00:11:53,246 line:-1
Russ will show you an example
of this in more detail shortly.


252
00:11:53.246 --> 00:11:56.482 line:-1 position:50%
We recommend prepopulating
codes whenever possible,


253
00:11:56.482 --> 00:11:58.618 line:-1 position:50%
as well as displaying
relevant error messages


254
00:11:58.618 --> 00:12:01.387 line:-1 position:50%
for invalid codes.


255
00:12:01,387 --> 00:12:03,990 line:-1
I hope you've enjoyed these
exciting API enhancements


256
00:12:03.990 --> 00:12:06.092 line:-1 position:50%
for iOS 15.


257
00:12:06,092 --> 00:12:08,561 line:-1
Now that we have talked
all about this in theory,


258
00:12:08.561 --> 00:12:10.496 line:-1 position:50%
I'm going to hand you over
to Russ for a demo


259
00:12:10.496 --> 00:12:13.900 line:-1 position:50%
so you can see how to implement
all these great new features.


260
00:12:13,900 --> 00:12:16,035 line:-1
Russ Fenenga: Thanks, Edward.
Hello, everyone.


261
00:12:16,035 --> 00:12:17,236 line:-1
My name is Russ,


262
00:12:17.236 --> 00:12:19.939 line:-1 position:50%
and I'm a software engineer
on the Wallet team.


263
00:12:19.939 --> 00:12:21.941 line:-1 position:50%
And I'm thrilled to be able
to demonstrate to you


264
00:12:21,941 --> 00:12:23,977 line:-1
some of the amazing
new features we have added


265
00:12:23,977 --> 00:12:26,312 line:-1
to the payment sheet in iOS 15


266
00:12:26,312 --> 00:12:28,481 line:-1
and how you can integrate them
into your apps.


267
00:12:28,481 --> 00:12:30,350 line:-1
So let's get started!


268
00:12:30.350 --> 00:12:32.118 line:-1 position:50%
Here I have
my ticket purchasing app


269
00:12:32,118 --> 00:12:34,153 line:-1
for the food festival
I'm planning.


270
00:12:34,153 --> 00:12:37,123 line:-1
My app has already implemented
the existing protocol methods


271
00:12:37.123 --> 00:12:40.226 line:-1 position:50%
from PKPaymentAuthorization
ControllerDelegate


272
00:12:40,226 --> 00:12:43,162 line:-1
in order to take advantage
of the Apple Pay payment sheet.


273
00:12:43,162 --> 00:12:46,566 line:-1
With iOS 15, the payment sheet
will automatically be updated


274
00:12:46.566 --> 00:12:49.802 line:-1 position:50%
to the new look without
any additional work.


275
00:12:49.802 --> 00:12:52.438 line:-1 position:50%
I've decided that
with the update to iOS 15


276
00:12:52.438 --> 00:12:55.375 line:-1 position:50%
I want my festival attendees
to finally have the ability


277
00:12:55.375 --> 00:12:58.745 line:-1 position:50%
to request their tickets
in multiple ways.


278
00:12:58.745 --> 00:13:00.813 line:-1 position:50%
To do this,
I'll need to add support


279
00:13:00.813 --> 00:13:04.684 line:-1 position:50%
for multiple shipping methods,
so let's dive in!


280
00:13:04.684 --> 00:13:06.786 line:-1 position:50%
I'll head into
our PaymentHandler class


281
00:13:06.786 --> 00:13:08.888 line:-1 position:50%
where I build
the PKPaymentRequest


282
00:13:08.888 --> 00:13:12.859 line:-1 position:50%
to begin adding support
for multiple PKShippingMethods.


283
00:13:12,859 --> 00:13:15,628 line:-1
The first thing I'm going to add
is a helper function


284
00:13:15.628 --> 00:13:18.398 line:-1 position:50%
that returns me
an array of PKShippingMethods


285
00:13:18,398 --> 00:13:22,902 line:-1
representing the different
options available to my users.


286
00:13:22,902 --> 00:13:24,904 line:-1
The first
PKShippingMethod I create


287
00:13:24.904 --> 00:13:27.473 line:-1 position:50%
is a standard shipping method,
letting the user know


288
00:13:27.473 --> 00:13:30.009 line:-1 position:50%
they can collect their tickets
at the festival.


289
00:13:30.009 --> 00:13:33.346 line:-1 position:50%
New to iOS 15,
I want to provide the user


290
00:13:33,346 --> 00:13:35,181 line:-1
an estimated range
it will take the tickets


291
00:13:35,181 --> 00:13:36,449 line:-1
to be shipped to them.


292
00:13:36,449 --> 00:13:39,652 line:-1
To do this I create a Date
and Calendar object,


293
00:13:39,652 --> 00:13:43,022 line:-1
then define a shippingStart
and shippingEnd date


294
00:13:43,022 --> 00:13:44,924 line:-1
three to five days from now.


295
00:13:44,924 --> 00:13:47,627 position:50%
I'm then able to specify
the date components


296
00:13:47,627 --> 00:13:50,863 line:0
that I want to display to
the user in the payment sheet.


297
00:13:50,863 --> 00:13:53,433 line:0
Then I build my PKShippingMethod


298
00:13:53,433 --> 00:13:56,703 position:50%
making sure I set the new
property, dateComponentsRange,


299
00:13:56,703 --> 00:14:00,440 position:50%
and return the array
of the two shipping methods.


300
00:14:00,440 --> 00:14:03,142 line:0
The last thing I need to do
is set the shipping methods


301
00:14:03,142 --> 00:14:07,180 line:0
on the PKPaymentRequest like so.


302
00:14:10,183 --> 00:14:12,819 position:50%
With these simple changes,
I can build my app


303
00:14:12,819 --> 00:14:16,155 position:50%
and check out the new shipping
methods in the payment sheet.


304
00:14:16,155 --> 00:14:18,958 position:50%
A new row has automatically been
added to the payment sheet


305
00:14:18,958 --> 00:14:20,493 line:0
showing the shipping methods.


306
00:14:20,493 --> 00:14:21,761 position:50%
If I tap the row


307
00:14:21,761 --> 00:14:24,230 line:0
I'll see both shipping methods
that were just added,


308
00:14:24,230 --> 00:14:28,768 line:0
including the one
that supports date ranges.


309
00:14:28.768 --> 00:14:31.337 line:-1 position:50%
I've also decided that
for the festival this year


310
00:14:31.337 --> 00:14:34.006 line:-1 position:50%
I want to send out coupon codes
to all my attendees


311
00:14:34.006 --> 00:14:36.075 line:-1 position:50%
and add the functionality
to redeem them


312
00:14:36,075 --> 00:14:38,611 line:-1
directly through
the payment sheet in my app.


313
00:14:38.611 --> 00:14:41.581 line:-1 position:50%
To do this, there are two main
changes that I need to make.


314
00:14:41.581 --> 00:14:45.518 line:-1 position:50%
Let's head back into the code.


315
00:14:45,518 --> 00:14:48,187 line:0
The first is when building
the PKPaymentRequest.


316
00:14:48,187 --> 00:14:50,723 line:0
There is a new boolean,
supportsCouponCode,


317
00:14:50,723 --> 00:14:54,060 position:50%
that needs to be set to true.


318
00:14:54,060 --> 00:14:57,130 line:0
There also is a new
optional property, couponCode,


319
00:14:57,130 --> 00:14:59,532 position:50%
that you can set on
your PKPaymentRequest


320
00:14:59,532 --> 00:15:01,434 line:0
to prepopulate the coupon field


321
00:15:01,434 --> 00:15:04,670 line:0
with one of your already valid
coupon codes.


322
00:15:04,670 --> 00:15:07,874 position:50%
Next, let's jump down to my
class extension that conforms


323
00:15:07,874 --> 00:15:10,643 position:50%
to the PKPaymentAuthorization
ControllerDelegate


324
00:15:10,643 --> 00:15:12,578 position:50%
and implement
the new protocol method


325
00:15:12,578 --> 00:15:15,548 position:50%
paymentAuthorizationController
didChangeCouponCode


326
00:15:15,548 --> 00:15:18,351 position:50%
where I will be able to handle
updating my summary items


327
00:15:18,351 --> 00:15:21,020 line:0
and display errors related
to the coupon code entry


328
00:15:21,020 --> 00:15:23,589 position:50%
when a coupon code is entered.


329
00:15:23,589 --> 00:15:26,125 line:0
The first thing I'm going
to need is a helper function


330
00:15:26,125 --> 00:15:28,294 line:0
that updates our
PKPaymentSummaryItems


331
00:15:28,294 --> 00:15:31,531 line:0
if a valid coupon code
is entered.


332
00:15:31,531 --> 00:15:33,966 line:0
I grab a reference
to the first summary item


333
00:15:33,966 --> 00:15:36,035 line:0
which is our subtotal item.


334
00:15:36,035 --> 00:15:39,705 line:0
From there, I create a new
PKPaymentSummaryItem


335
00:15:39,705 --> 00:15:42,842 position:50%
that lets the user see
the discount that was applied.


336
00:15:42,842 --> 00:15:46,312 line:0
I then create a new summary
item for tax and total,


337
00:15:46,312 --> 00:15:49,048 line:0
and then return
the array of them.


338
00:15:49,048 --> 00:15:51,717 position:50%
Now that I have my discount
application logic written,


339
00:15:51,717 --> 00:15:57,423 line:0
I can then write my coupon code
validation logic.


340
00:15:57,423 --> 00:16:01,227 position:50%
I first check if my coupon code
that the user entered was empty


341
00:16:01,227 --> 00:16:03,362 line:0
and if it is,
just call our completion


342
00:16:03,362 --> 00:16:08,301 position:50%
passing in the unmodified
payment summary items.


343
00:16:08,301 --> 00:16:11,504 position:50%
If the entered coupon code
matches a valid coupon code,


344
00:16:11,504 --> 00:16:14,407 line:0
then I use the just created
applyDiscount function


345
00:16:14,407 --> 00:16:16,375 position:50%
to return the updated
summary items


346
00:16:16,375 --> 00:16:21,447 position:50%
into our CouponCodeUpdate
object.


347
00:16:21.447 --> 00:16:22.448 line:-1 position:50%
For your apps,


348
00:16:22,448 --> 00:16:24,851 line:-1
you'll most likely need to be
fetching valid coupon codes


349
00:16:24,851 --> 00:16:27,153 line:-1
from your server at this point.


350
00:16:27,153 --> 00:16:30,489 line:0
Finally, if the entered
coupon code was invalid,


351
00:16:30,489 --> 00:16:33,860 line:0
I use the new PKPaymentRequest
convenience initializer,


352
00:16:33,860 --> 00:16:37,430 line:0
paymentCouponCodeInvalidError,
and supply it a description


353
00:16:37,430 --> 00:16:39,866 position:50%
to be shown directly
in the payment sheet.


354
00:16:39.866 --> 00:16:41.868 line:-1 position:50%
We also have a second
convenience initializer


355
00:16:41,868 --> 00:16:43,536 line:-1
for expired coupon codes:


356
00:16:43.536 --> 00:16:47.006 line:-1 position:50%
paymentCouponCodeExpired
ErrorWithLocalizedDescription.


357
00:16:47,006 --> 00:16:50,142 position:50%
I then pass this error into our
coupon code update initializer


358
00:16:50,142 --> 00:16:54,280 line:0
as well as the original
SummaryItems.


359
00:16:54,280 --> 00:16:55,348 position:50%
Just like that,


360
00:16:55,348 --> 00:16:59,218 position:50%
I've added support
for coupon codes inside my app.


361
00:16:59,218 --> 00:17:03,656 line:0
Let's check it out.


362
00:17:03,656 --> 00:17:05,291 position:50%
To enter a coupon code,


363
00:17:05,291 --> 00:17:07,493 line:0
I just need to tap
into the summary view


364
00:17:07,493 --> 00:17:11,197 position:50%
and enter a coupon code
into the coupon code text field.


365
00:17:11,197 --> 00:17:14,467 position:50%
If I first enter an invalid
coupon code, Fest,


366
00:17:14,467 --> 00:17:15,735 position:50%
the error message I supplied


367
00:17:15,735 --> 00:17:17,870 line:0
is shown directly below
the text field.


368
00:17:17,870 --> 00:17:21,440 position:50%
Now if I enter a valid
coupon code, FESTIVAL,


369
00:17:21,440 --> 00:17:26,145 line:0
the payment summary items
are immediately updated.


370
00:17:26,145 --> 00:17:29,048 position:50%
Then I just need to select
the shipping contact


371
00:17:29,048 --> 00:17:30,483 line:0
as well as shipping address


372
00:17:30,483 --> 00:17:33,853 position:50%
and my payment request
is ready to go.


373
00:17:36,856 --> 00:17:38,891 line:-1
With these simple changes,
you're now ready


374
00:17:38,891 --> 00:17:40,793 line:-1
to test your updates
to the payment sheet


375
00:17:40.793 --> 00:17:43.629 line:-1 position:50%
on a device in our Apple Pay
sandbox environment.


376
00:17:43.629 --> 00:17:45.765 line:-1 position:50%
Now, back to Edward.


377
00:17:45,765 --> 00:17:46,732 line:-1
Edward: Thanks, Russ.


378
00:17:46.732 --> 00:17:48.367 line:-1 position:50%
Russ just showed us
how easy it is


379
00:17:48.367 --> 00:17:50.202 line:-1 position:50%
to implement multiple
shipping methods,


380
00:17:50.202 --> 00:17:54.507 line:-1 position:50%
the new date range,
and coupon code APIs.


381
00:17:54,507 --> 00:17:57,910 line:-1
This year we've delivered some
exciting new updates to Wallet


382
00:17:57,910 --> 00:18:01,180 line:-1
such as home key passes,
identification,


383
00:18:01,180 --> 00:18:05,017 line:-1
hiding expired passes,
and multiple pass ingestion.


384
00:18:05,017 --> 00:18:07,386 line:-1
We introduced the new
JavaScript payment button


385
00:18:07,386 --> 00:18:09,455 line:-1
for Apple Pay on the web,


386
00:18:09,455 --> 00:18:12,591 line:-1
and the new Apple Pay
experience on iOS.


387
00:18:12.591 --> 00:18:14.627 line:-1 position:50%
You learned about
the new shipping APIs,


388
00:18:14.627 --> 00:18:16.729 line:-1 position:50%
which include support
for date ranges


389
00:18:16,729 --> 00:18:19,966 line:-1
and read-only addresses,
as well as coupon codes


390
00:18:19,966 --> 00:18:22,935 line:-1
and how you can implement these
in your own apps.


391
00:18:22.935 --> 00:18:24.403 line:-1 position:50%
For more information,


392
00:18:24,403 --> 00:18:27,573 line:-1
check out the Apple Pay section
of the Developer Portal.


393
00:18:27,573 --> 00:18:29,508 line:-1
This includes
the Apple Pay sandbox


394
00:18:29,508 --> 00:18:33,412 line:-1
for testing payment requests
from your apps and websites.


395
00:18:33,412 --> 00:18:35,648 line:-1
Thank you for watching.


396
00:18:35,648 --> 00:18:37,616 position:89% line:0 size:2%
♪

