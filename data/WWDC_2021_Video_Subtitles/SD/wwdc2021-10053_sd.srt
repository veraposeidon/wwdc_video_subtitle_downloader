2
00:00:00,000 --> 00:00:02,135 line:-1
[MAC STARTUP CHIME]


3
00:00:02,135 --> 00:00:05,806 line:-1
♪ Bass music playing ♪


4
00:00:05,806 --> 00:00:07,641 line:-1
[KEYSTROKES]


5
00:00:07,641 --> 00:00:09,443 size:2% align:right position:90%
♪


6
00:00:09,443 --> 00:00:10,844 line:-1
Owen Monsma: Hello,
and welcome to


7
00:00:10.844 --> 00:00:13.747 line:-1 position:50%
"Qualities of a great
Mac Catalyst app."


8
00:00:13,747 --> 00:00:16,750 line:-1
My name is Owen Monsma,
and I'm a Cocoa engineer.


9
00:00:16,750 --> 00:00:18,385 line:-1
And I'll be joined later
by my colleague


10
00:00:18.385 --> 00:00:20.721 line:-1 position:50%
Dave Rahardja
from UIKit.


11
00:00:20.721 --> 00:00:24.224 line:-1 position:50%
Today we're going to go over
three important considerations


12
00:00:24,224 --> 00:00:27,427 line:-1
for making an amazing
Catalyst app.


13
00:00:27.427 --> 00:00:29.630 line:-1 position:50%
First, we'll cover some
high-level changes


14
00:00:29,630 --> 00:00:33,333 line:-1
that happen when you migrate
to a Mac Catalyst app.


15
00:00:33.333 --> 00:00:36.470 line:-1 position:50%
Next, we'll dive into some
specific code modifications


16
00:00:36.470 --> 00:00:40.440 line:-1 position:50%
you can make to improve
your app experience on Mac.


17
00:00:40.440 --> 00:00:44.945 line:-1 position:50%
And we'll end with information
about app distribution.


18
00:00:44,945 --> 00:00:49,416 line:-1
So let's begin with migrating
your app to Mac Catalyst.


19
00:00:49.416 --> 00:00:51.418 line:-1 position:50%
The first step toward
a great Catalyst app


20
00:00:51.418 --> 00:00:55.455 line:-1 position:50%
is having a great iPad app,
and your app already runs


21
00:00:55,455 --> 00:00:58,825 line:-1
with no additional changes
on Macs with M1.


22
00:00:58,825 --> 00:01:01,695 line:-1
If you have an M1 Mac,
you can try this right away


23
00:01:01.695 --> 00:01:05.499 line:-1 position:50%
with the Designed for iPad
run destination in Xcode.


24
00:01:05.499 --> 00:01:08.268 line:-1 position:50%
By adopting these features
on iPad,


25
00:01:08,268 --> 00:01:11,705 line:-1
your Mac app will have
a great head start.


26
00:01:11,705 --> 00:01:14,608 line:-1
If your app supports
multitasking on iPad,


27
00:01:14.608 --> 00:01:19.279 line:-1 position:50%
you can automatically get
multiple window support on Mac.


28
00:01:19.279 --> 00:01:21.281 line:-1 position:50%
And if you use UIMenuBuilder,


29
00:01:21,281 --> 00:01:23,483 line:-1
your menus
are automatically picked up


30
00:01:23.483 --> 00:01:26.553 line:-1 position:50%
in your app's menu bar,
and by contextual menus


31
00:01:26,553 --> 00:01:29,256 line:-1
with a secondary click
on your views.


32
00:01:29,256 --> 00:01:31,758 line:-1
We also automatically
bridge system behaviors


33
00:01:31,758 --> 00:01:34,962 line:-1
like copy/paste
and drag and drop.


34
00:01:34,962 --> 00:01:39,466 line:0
To learn more about how your
iPad app runs as-is on M1 Macs,


35
00:01:39,466 --> 00:01:41,001 position:50%
check out our video,


36
00:01:41,001 --> 00:01:46,173 line:0
"Qualities of great iPad and
iPhone apps on Macs with M1."


37
00:01:46,173 --> 00:01:49,810 line:-1
But you're here because
you want to take things further.


38
00:01:49.810 --> 00:01:51.578 line:-1 position:50%
By checking the Mac checkbox,


39
00:01:51.578 --> 00:01:54.648 line:-1 position:50%
you gain the ability
to distribute to all Macs,


40
00:01:54.648 --> 00:01:58.919 line:-1 position:50%
and get access to additional
APIs to further refine your app.


41
00:01:58.919 --> 00:02:02.255 line:-1 position:50%
So let's do it with our app,
Trip Planner!


42
00:02:02,255 --> 00:02:04,358 line:-1
In our Xcode project settings,


43
00:02:04,358 --> 00:02:08,195 line:-1
we check the Mac option
under Deployment Info.


44
00:02:08,195 --> 00:02:11,431 line:-1
Notice to the right,
an additional pop-up appears,


45
00:02:11.431 --> 00:02:14.401 line:-1 position:50%
letting us choose between
a scaled iPad interface


46
00:02:14.401 --> 00:02:16.837 line:-1 position:50%
and a Mac optimized interface.


47
00:02:16.837 --> 00:02:19.973 line:-1 position:50%
We will examine this choice more
in a little bit.


48
00:02:19.973 --> 00:02:24.411 line:-1 position:50%
For now, let's click build
and run in the Xcode toolbar.


49
00:02:24,411 --> 00:02:27,848 line:-1
And our app builds and runs!


50
00:02:27,848 --> 00:02:30,751 line:-1
Now, if your app
failed to build,


51
00:02:30.751 --> 00:02:33.420 line:-1 position:50%
there are a few things
to investigate.


52
00:02:33.420 --> 00:02:35.822 line:-1 position:50%
Certain deprecated frameworks
and classes


53
00:02:35,822 --> 00:02:38,025 line:-1
are unavailable
for Mac Catalyst,


54
00:02:38,025 --> 00:02:40,694 line:-1
so now is the time
to modernize.


55
00:02:40.694 --> 00:02:43.397 line:-1 position:50%
Not only will this get your app
running on Mac,


56
00:02:43,397 --> 00:02:46,166 line:-1
but it will improve
your iOS app, too.


57
00:02:46.166 --> 00:02:50.170 line:-1 position:50%
Moving from OpenGLES
to Apple's own Metal framework


58
00:02:50.170 --> 00:02:53.373 line:-1 position:50%
unlocks the full power
of the GPU.


59
00:02:53.373 --> 00:02:57.144 line:-1 position:50%
The Contacts framework replaced
the deprecated AddressBook


60
00:02:57,144 --> 00:02:59,579 line:-1
and is a forward-looking,
thread-safe way


61
00:02:59,579 --> 00:03:01,381 line:-1
to handle contacts.


62
00:03:01,381 --> 00:03:03,316 line:-1
And UIWebView is deprecated


63
00:03:03.316 --> 00:03:06.887 line:-1 position:50%
and has been superseded
by WKWebView.


64
00:03:06,887 --> 00:03:10,891 line:-1
Also, make sure to check
your third-party dependencies.


65
00:03:10,891 --> 00:03:12,826 line:-1
If those frameworks
are distributed


66
00:03:12.826 --> 00:03:14.995 line:-1 position:50%
as an XCFramework bundle,


67
00:03:14.995 --> 00:03:19.166 line:-1 position:50%
make sure that they provide
a Mac binary to link against.


68
00:03:19,166 --> 00:03:21,168 line:-1
As you begin work
on your Mac app,


69
00:03:21,168 --> 00:03:23,837 line:-1
watch for compiler warnings
when building your project,


70
00:03:23,837 --> 00:03:26,940 line:-1
and monitor the console log
for runtime messages.


71
00:03:26.940 --> 00:03:29.342 line:-1 position:50%
These warnings tell you
how to fix your code


72
00:03:29.342 --> 00:03:33.013 line:-1 position:50%
so it runs well
as a Mac Catalyst process.


73
00:03:33,013 --> 00:03:35,949 line:-1
And remember
to only use supported API


74
00:03:35.949 --> 00:03:40.353 line:-1 position:50%
so your app continues to run
on future macOS releases.


75
00:03:40,353 --> 00:03:43,623 line:-1
It's also important to be aware
of the lifecycle events


76
00:03:43.623 --> 00:03:46.526 line:-1 position:50%
that your app will receive
when running on a Mac.


77
00:03:46.526 --> 00:03:49.429 line:-1 position:50%
If your app currently
relies on lifecycle events


78
00:03:49.429 --> 00:03:51.298 line:-1 position:50%
called on your app delegate,


79
00:03:51,298 --> 00:03:54,167 line:-1
you should instead
monitor scene lifecycles


80
00:03:54,167 --> 00:03:56,470 line:-1
so your app can
respond to events


81
00:03:56.470 --> 00:04:01.174 line:-1 position:50%
specific to the content
of each window on the desktop.


82
00:04:01,174 --> 00:04:04,678 line:-1
Remember, a Mac Catalyst app
will not receive the


83
00:04:04,678 --> 00:04:09,049 line:-1
sceneDidEnterBackground event
as often as an iPad app.


84
00:04:09,049 --> 00:04:10,884 line:-1
Scenes enter
the background state


85
00:04:10,884 --> 00:04:14,287 line:-1
when a desktop window
is minimized or closed.


86
00:04:14.287 --> 00:04:17.357 line:-1 position:50%
If your app uses
sceneDidEnterBackground


87
00:04:17,357 --> 00:04:21,094 line:-1
to perform some routine work
like autosaving a document,


88
00:04:21.094 --> 00:04:22.596 line:-1 position:50%
using a timer instead


89
00:04:22.596 --> 00:04:25.699 line:-1 position:50%
will ensure this action
is taken regularly.


90
00:04:25,699 --> 00:04:28,034 line:-1
Finally, remember that
your Catalyst app


91
00:04:28.034 --> 00:04:30.036 line:-1 position:50%
may have zero scenes


92
00:04:30.036 --> 00:04:32.639 line:-1 position:50%
but continue
to run in the foreground.


93
00:04:32.639 --> 00:04:36.243 line:-1 position:50%
This state happens when all your
app's windows have been closed,


94
00:04:36,243 --> 00:04:40,347 line:-1
but your app's name remains
visible in the menu bar.


95
00:04:40,347 --> 00:04:44,317 line:-1
Now let's decide whether to
optimize our interface for Mac.


96
00:04:44.317 --> 00:04:47.053 line:-1 position:50%
This is one of the most
important decisions to make


97
00:04:47.053 --> 00:04:50.157 line:-1 position:50%
when you first begin
bringing your app over.


98
00:04:50,157 --> 00:04:53,026 line:-1
Using Mac idiom is recommended
to make your app


99
00:04:53.026 --> 00:04:55.428 line:-1 position:50%
feel the most at home on Mac,


100
00:04:55,428 --> 00:04:58,698 line:-1
but it does require
some additional work.


101
00:04:58,698 --> 00:05:03,069 line:-1
In the Mac idiom, your app
will run at 100 percent scale,


102
00:05:03,069 --> 00:05:05,505 line:-1
giving you pixel-perfect
text and images,


103
00:05:05,505 --> 00:05:08,441 line:-1
and native AppKit controls.


104
00:05:08,441 --> 00:05:12,012 line:-1
If you want, you can add
new Mac-specific assets


105
00:05:12.012 --> 00:05:13.446 line:-1 position:50%
in your asset catalog


106
00:05:13,446 --> 00:05:16,416 line:-1
to take advantage
of this additional detail.


107
00:05:16,416 --> 00:05:20,187 line:-1
It's good practice to provide
both 1x and 2x assets


108
00:05:20.187 --> 00:05:23.990 line:-1 position:50%
to support all monitor
resolutions.


109
00:05:23.990 --> 00:05:27.093 line:-1 position:50%
Be aware, the size metrics
of many of your controls


110
00:05:27.093 --> 00:05:30.263 line:-1 position:50%
will change, so it is important
to adjust your app's layout


111
00:05:30,263 --> 00:05:32,465 line:-1
to accommodate.


112
00:05:32.465 --> 00:05:36.269 line:-1 position:50%
For custom controls in your app,
you have an additional choice.


113
00:05:36,269 --> 00:05:39,539 line:-1
Automatically, you get
the Mac style of control.


114
00:05:39.539 --> 00:05:41.942 line:-1 position:50%
But now you can opt out
your buttons and sliders


115
00:05:41,942 --> 00:05:45,245 line:-1
from this conversion
to use customization APIs


116
00:05:45,245 --> 00:05:48,381 line:-1
that are unavailable
on Mac controls.


117
00:05:48,381 --> 00:05:50,517 line:-1
If you use any custom assets --


118
00:05:50.517 --> 00:05:53.353 line:-1 position:50%
like setting the thumb
on a UISlider --


119
00:05:53.353 --> 00:05:56.289 line:-1 position:50%
they will appear larger
than expected by default,


120
00:05:56.289 --> 00:06:00.627 line:-1 position:50%
so you may need to scale them
or provide new assets.


121
00:06:00.627 --> 00:06:04.764 line:-1 position:50%
Also keep in mind that Mac users
expect AppKit-style controls,


122
00:06:04,764 --> 00:06:08,868 line:-1
so custom controls
should be used sparingly.


123
00:06:08,868 --> 00:06:11,104 line:0
For more detail
on the Mac idiom,


124
00:06:11,104 --> 00:06:12,572 line:0
check out our video,


125
00:06:12,572 --> 00:06:16,543 position:50%
"Optimize the interface
of your Mac Catalyst app."


126
00:06:16,543 --> 00:06:18,678 line:-1
Because a Catalyst app
in the Mac idiom


127
00:06:18.678 --> 00:06:22.048 line:-1 position:50%
takes on AppKit control styles,
both the appearance


128
00:06:22.048 --> 00:06:25.785 line:-1 position:50%
and behavior of some
of your controls will change.


129
00:06:25,785 --> 00:06:28,688 position:50%
In our video,
"What's new in Mac Catalyst,"


130
00:06:28,688 --> 00:06:31,258 line:0
we introduced
the new pop-up button style


131
00:06:31,258 --> 00:06:34,995 position:50%
which rounds out
our suite of Mac button types.


132
00:06:34,995 --> 00:06:37,931 line:-1
Let's dive into what makes
these controls different


133
00:06:37,931 --> 00:06:40,900 line:-1
and how the system
picks which one to use.


134
00:06:40.900 --> 00:06:42.502 line:-1 position:50%
Understanding these controls


135
00:06:42.502 --> 00:06:44.571 line:-1 position:50%
and where they are
commonly found


136
00:06:44,571 --> 00:06:46,573 line:-1
will help you
make informed choices


137
00:06:46.573 --> 00:06:48.908 line:-1 position:50%
about their use in your app.


138
00:06:48.908 --> 00:06:53.046 line:-1 position:50%
The default UIButton type
is UIButton type .system.


139
00:06:53.046 --> 00:06:56.049 line:-1 position:50%
With this button type,
the button automatically


140
00:06:56.049 --> 00:06:59.319 line:-1 position:50%
takes on the expected appearance
for its context.


141
00:06:59,319 --> 00:07:00,720 line:-1
In the Mac idiom,


142
00:07:00,720 --> 00:07:04,024 line:-1
this means it becomes
a bordered push button.


143
00:07:04,024 --> 00:07:07,260 line:-1
Pull-down buttons
are a Mac-native control


144
00:07:07,260 --> 00:07:10,063 line:-1
used to provide
a list of possible actions,


145
00:07:10,063 --> 00:07:13,566 line:-1
and are drawn with
a single-arrow indicator.


146
00:07:13,566 --> 00:07:17,871 line:-1
A good example is the PDF
pull-down in the print dialog,


147
00:07:17.871 --> 00:07:22.909 line:-1 position:50%
which presents actions such as
Save as PDF or Send in Mail.


148
00:07:22.909 --> 00:07:24.711 line:-1 position:50%
To get a pull-down button,


149
00:07:24,711 --> 00:07:27,847 line:-1
make sure that you have assigned
a UI menu to your button


150
00:07:27.847 --> 00:07:30.850 line:-1 position:50%
via its menu property,
and additionally set


151
00:07:30,850 --> 00:07:34,487 line:-1
showsMenuAsPrimaryAction
to true.


152
00:07:34.487 --> 00:07:36.489 line:-1 position:50%
Your button will take on
the pull-down look


153
00:07:36.489 --> 00:07:39.159 line:-1 position:50%
and present the menu on a click.


154
00:07:39,159 --> 00:07:41,961 line:-1
And new to Catalyst
with macOS Monterey


155
00:07:41.961 --> 00:07:45.065 line:-1 position:50%
are pop-up buttons.


156
00:07:45.065 --> 00:07:47.600 line:-1 position:50%
Pop-up buttons look similar
to pull-down buttons


157
00:07:47,600 --> 00:07:49,536 line:-1
but have a double-arrow
indicator,


158
00:07:49.536 --> 00:07:52.138 line:-1 position:50%
and they do something
slightly different.


159
00:07:52,138 --> 00:07:53,973 line:-1
Where the pull-down
triggers an action,


160
00:07:53.973 --> 00:07:56.343 line:-1 position:50%
a pop-up button
is used to select


161
00:07:56,343 --> 00:08:00,046 line:-1
one of a set of mutually
exclusive options.


162
00:08:00.046 --> 00:08:03.350 line:-1 position:50%
For example,
selecting the day of the week.


163
00:08:03.350 --> 00:08:06.019 line:-1 position:50%
The title in the button
then updates


164
00:08:06,019 --> 00:08:07,954 line:-1
to reflect the selection.


165
00:08:07.954 --> 00:08:10.290 line:-1 position:50%
This is a good,
Mac-friendly choice


166
00:08:10,290 --> 00:08:13,026 line:-1
to replace a UIPickerView
in your app.


167
00:08:13.026 --> 00:08:15.862 line:-1 position:50%
Getting this control is similar
to a pull-down button,


168
00:08:15,862 --> 00:08:19,632 line:-1
but the property
changesSelectionAsPrimaryAction


169
00:08:19,632 --> 00:08:21,835 line:-1
must also be true.


170
00:08:21.835 --> 00:08:24.704 line:-1 position:50%
Finally, checkboxes
are used to represent


171
00:08:24.704 --> 00:08:27.340 line:-1 position:50%
a non-exclusive binary toggle,


172
00:08:27,340 --> 00:08:30,810 line:-1
and are a more mouse-friendly
alternative to a switch.


173
00:08:30.810 --> 00:08:32.345 line:-1 position:50%
And as it turns out,


174
00:08:32.345 --> 00:08:35.348 line:-1 position:50%
you get the checkbox
with no additional work!


175
00:08:35,348 --> 00:08:38,351 line:-1
Just make sure that
the switch has a title set,


176
00:08:38.351 --> 00:08:40.353 line:-1 position:50%
and keep in mind
the title property


177
00:08:40.353 --> 00:08:43.423 line:-1 position:50%
is only supported
in the Mac idiom.


178
00:08:43,423 --> 00:08:45,024 line:-1
By default, the switch


179
00:08:45,024 --> 00:08:47,594 line:-1
has a preferredStyle
of automatic,


180
00:08:47.594 --> 00:08:49.763 line:-1 position:50%
and you can verify at runtime


181
00:08:49,763 --> 00:08:52,365 line:-1
whether it is
a switch or a checkbox


182
00:08:52.365 --> 00:08:56.136 line:-1 position:50%
using the read-only
style property.


183
00:08:56.136 --> 00:08:59.205 line:-1 position:50%
Now, to dive into
some specific code changes,


184
00:08:59,205 --> 00:09:02,308 line:-1
let's hand things off
to my colleague, Dave.


185
00:09:02,308 --> 00:09:04,677 line:-1
Dave Rahardja: Hi everyone,
my name is Dave,


186
00:09:04,677 --> 00:09:07,347 line:-1
and I'm an engineer
on the UIKit team.


187
00:09:07.347 --> 00:09:10.250 line:-1 position:50%
Let's talk about some specific
things you can do


188
00:09:10,250 --> 00:09:13,486 line:-1
to make your Mac Catalyst app
feel more at home.


189
00:09:13.486 --> 00:09:15.622 line:-1 position:50%
A Mac Catalyst app
may have access


190
00:09:15,622 --> 00:09:18,358 line:-1
to a lot more
screen real estate.


191
00:09:18.358 --> 00:09:22.362 line:-1 position:50%
Your app's windows can be
resized much larger on a Mac


192
00:09:22.362 --> 00:09:26.065 line:-1 position:50%
than on an iPad,
and can be shown full screen.


193
00:09:26,065 --> 00:09:28,701 line:-1
Take a moment
to resize your app's windows


194
00:09:28.701 --> 00:09:31.304 line:-1 position:50%
and pay attention to its layout.


195
00:09:31.304 --> 00:09:33.706 line:-1 position:50%
Make sure you're using
the additional space


196
00:09:33,706 --> 00:09:36,209 line:-1
to show more content
and controls


197
00:09:36,209 --> 00:09:39,446 line:-1
to make your apps easier to use.


198
00:09:39,446 --> 00:09:42,248 line:-1
Live resizing will put
your app's layout performance


199
00:09:42.248 --> 00:09:43.750 line:-1 position:50%
to the test.


200
00:09:43.750 --> 00:09:46.519 line:-1 position:50%
Your app should do the least
amount of work possible


201
00:09:46,519 --> 00:09:49,923 line:-1
during layout to keep
your app's windows responsive


202
00:09:49,923 --> 00:09:51,925 line:-1
during resizing.


203
00:09:51.925 --> 00:09:54.260 line:-1 position:50%
Take special note of
interactions in your app


204
00:09:54,260 --> 00:09:58,231 line:-1
that rely on modal presentations
and popovers.


205
00:09:58.231 --> 00:10:00.266 line:-1 position:50%
With a larger display area,


206
00:10:00.266 --> 00:10:02.936 line:-1 position:50%
you can make these interactions
always available


207
00:10:02.936 --> 00:10:06.039 line:-1 position:50%
by showing them
as child views.


208
00:10:06.039 --> 00:10:09.809 line:-1 position:50%
Now, let's talk about
pointer input devices.


209
00:10:09.809 --> 00:10:13.246 line:-1 position:50%
Remember that not all Macs
have a trackpad,


210
00:10:13.246 --> 00:10:16.182 line:-1 position:50%
and some Macs are connected
to input devices


211
00:10:16,182 --> 00:10:18,485 line:-1
that don't support scrolling.


212
00:10:18,485 --> 00:10:22,555 line:-1
If your views rely on a pinch
or rotate gesture to work,


213
00:10:22,555 --> 00:10:25,825 line:-1
make sure that all of its
capabilities are accessible


214
00:10:25.825 --> 00:10:29.295 line:-1 position:50%
using a mouse
without scroll input.


215
00:10:29.295 --> 00:10:31.965 line:-1 position:50%
Add additional buttons
or other controls


216
00:10:31.965 --> 00:10:34.133 line:-1 position:50%
to your Mac Catalyst app's view


217
00:10:34.133 --> 00:10:38.505 line:-1 position:50%
to make sure all of its
functionality is accessible.


218
00:10:38.505 --> 00:10:41.207 line:-1 position:50%
Additionally,
detecting keyboard modifiers


219
00:10:41,207 --> 00:10:43,810 line:-1
on tap or pan
gesture recognizers


220
00:10:43.810 --> 00:10:46.412 line:-1 position:50%
can sometimes provide
faster access


221
00:10:46,412 --> 00:10:48,648 line:-1
to your view's functionality.


222
00:10:48.648 --> 00:10:54.087 line:-1 position:50%
For example,
allowing Shift-pan to zoom.


223
00:10:54,087 --> 00:10:57,690 line:-1
Let's talk about keyboard
shortcuts and the main menu.


224
00:10:57.690 --> 00:11:00.059 line:-1 position:50%
The main menu of a Mac app
is a great place


225
00:11:00.059 --> 00:11:03.229 line:-1 position:50%
to discover all the actions
available in your app,


226
00:11:03.229 --> 00:11:06.633 line:-1 position:50%
as well as their associated
keyboard shortcuts.


227
00:11:06.633 --> 00:11:09.335 line:-1 position:50%
If your app already supports
keyboard shortcuts


228
00:11:09.335 --> 00:11:12.105 line:-1 position:50%
by returning key commands
from its responders,


229
00:11:12,105 --> 00:11:14,340 line:-1
add these commands
to the main menu


230
00:11:14.340 --> 00:11:17.377 line:-1 position:50%
using the menu builder API
instead.


231
00:11:17,377 --> 00:11:20,413 line:-1
Moving all your keyboard
shortcuts to the main menu


232
00:11:20,413 --> 00:11:21,948 line:-1
makes them discoverable


233
00:11:21,948 --> 00:11:24,984 line:-1
even when they are not
currently enabled.


234
00:11:24.984 --> 00:11:27.987 line:-1 position:50%
What's more,
using the MenuBuilder API


235
00:11:27,987 --> 00:11:30,523 line:-1
to organize your shortcuts
on Mac Catalyst


236
00:11:30,523 --> 00:11:35,328 line:-1
also organizes them
on the iPad shortcuts overlay.


237
00:11:35,328 --> 00:11:37,630 line:-1
As you build out
your main menu,


238
00:11:37.630 --> 00:11:39.832 line:-1 position:50%
be sure to add
all the actions needed


239
00:11:39.832 --> 00:11:42.168 line:-1 position:50%
to interact with your app.


240
00:11:42,168 --> 00:11:44,637 line:-1
Actions performed
with gestures on an iPad


241
00:11:44,637 --> 00:11:46,072 line:-1
should also be accessible


242
00:11:46,072 --> 00:11:49,342 line:-1
by selecting items
from the main menu.


243
00:11:49,342 --> 00:11:52,278 line:-1
Adding keyboard shortcuts
to your menu items


244
00:11:52.278 --> 00:11:56.316 line:-1 position:50%
will provide even quicker
access to these actions.


245
00:11:56,316 --> 00:11:58,518 line:-1
Because menu bar
and key command actions


246
00:11:58,518 --> 00:12:01,554 line:-1
are routed starting
from the first responder,


247
00:12:01,554 --> 00:12:03,356 line:-1
make sure that the views


248
00:12:03,356 --> 00:12:05,692 line:-1
that would be
the target of those actions


249
00:12:05,692 --> 00:12:09,762 line:-1
can become first responder
and can accept focus.


250
00:12:09,762 --> 00:12:12,765 line:-1
You can do this by having
your views return true


251
00:12:12,765 --> 00:12:18,171 line:-1
for the canBecomeFirstResponder
and canBecomeFocused properties.


252
00:12:18.171 --> 00:12:22.508 line:-1 position:50%
Since a Mac app must rely less
on direct manipulation of views,


253
00:12:22,508 --> 00:12:25,144 line:-1
and more on the user
selecting a view


254
00:12:25,144 --> 00:12:27,847 line:-1
and then selecting an action
from the main menu,


255
00:12:27.847 --> 00:12:30.617 line:-1 position:50%
the ability for more
of your app's views


256
00:12:30,617 --> 00:12:33,419 line:-1
to become first responder
and focused


257
00:12:33,419 --> 00:12:37,390 line:-1
becomes more important
on Mac Catalyst.


258
00:12:37,390 --> 00:12:40,660 position:50%
For more information about
focus and first responders,


259
00:12:40,660 --> 00:12:45,298 line:0
check out the video, "Focus on
iPad keyboard navigation."


260
00:12:45,298 --> 00:12:47,433 line:-1
While we're on the subject
of responders,


261
00:12:47,433 --> 00:12:52,038 line:-1
be sure to leave the responder
chain unmodified in your app.


262
00:12:52,038 --> 00:12:56,542 line:-1
In other words,
don't override nextResponder.


263
00:12:56,542 --> 00:12:58,711 line:-1
Leaving the responder chain
unmodified


264
00:12:58.711 --> 00:13:01.948 line:-1 position:50%
ensures that Mac Catalyst
can route your actions


265
00:13:01,948 --> 00:13:04,017 line:-1
to the appropriate targets.


266
00:13:04.017 --> 00:13:06.185 line:-1 position:50%
If your app has to handle
certain actions


267
00:13:06.185 --> 00:13:09.589 line:-1 position:50%
using objects that are not
in its responder chain,


268
00:13:09,589 --> 00:13:12,759 line:-1
use the target(for Action:,
withSender:) function


269
00:13:12.759 --> 00:13:14.427 line:-1 position:50%
to delegate these actions


270
00:13:14.427 --> 00:13:17.130 line:-1 position:50%
to the appropriate object
instead.


271
00:13:17.130 --> 00:13:19.399 line:-1 position:50%
Let's go over the code.


272
00:13:19.399 --> 00:13:22.669 line:-1 position:50%
In this example,
our view delegates


273
00:13:22.669 --> 00:13:26.205 line:-1 position:50%
the setAsFavorite action
to a model object,


274
00:13:26.205 --> 00:13:27.674 line:-1 position:50%
while allowing other actions


275
00:13:27.674 --> 00:13:31.611 line:-1 position:50%
to continue to propagate
up the responder chain.


276
00:13:31,611 --> 00:13:33,279 line:-1
Now let's talk about scenes


277
00:13:33,279 --> 00:13:36,683 line:-1
and how they work
in a Mac Catalyst app.


278
00:13:36.683 --> 00:13:39.018 line:-1 position:50%
A Mac app may have
many desktop windows


279
00:13:39.018 --> 00:13:41.187 line:-1 position:50%
open at the same time.


280
00:13:41,187 --> 00:13:44,424 line:-1
In a Mac Catalyst app,
each of these windows


281
00:13:44.424 --> 00:13:48.161 line:-1 position:50%
is paired with a UIWindowScene.


282
00:13:48.161 --> 00:13:51.798 line:-1 position:50%
Your app may offer windows
that have different functions.


283
00:13:51,798 --> 00:13:54,534 line:-1
For example, it may have
a document window,


284
00:13:54.534 --> 00:13:57.837 line:-1 position:50%
a detail viewer window,
a message composer window,


285
00:13:57,837 --> 00:13:59,405 line:-1
and so on.


286
00:13:59.405 --> 00:14:02.075 line:-1 position:50%
The best way to organize
these different scene functions


287
00:14:02.075 --> 00:14:04.610 line:-1 position:50%
is by defining
a scene configuration


288
00:14:04,610 --> 00:14:07,313 line:-1
for each type of window.


289
00:14:07,313 --> 00:14:08,848 line:0
To define scene configurations,


290
00:14:08,848 --> 00:14:11,117 line:0
add them to your Info.plist


291
00:14:11,117 --> 00:14:14,821 line:0
under the Application Scene
Manifest entry.


292
00:14:14,821 --> 00:14:17,557 line:0
Under the Application
Session Role array,


293
00:14:17,557 --> 00:14:20,760 line:0
create one configuration
for each type of scene


294
00:14:20,760 --> 00:14:22,261 line:0
your app supports.


295
00:14:22,261 --> 00:14:25,164 position:50%
Give each of these
configurations a name


296
00:14:25,164 --> 00:14:28,201 position:50%
and choose the scene class,
delegate class,


297
00:14:28,201 --> 00:14:30,737 line:0
and storyboard
that will be instantiated


298
00:14:30,737 --> 00:14:33,072 line:0
when the scene is created.


299
00:14:33,072 --> 00:14:35,675 line:-1
Now that we've defined
our scene configurations,


300
00:14:35.675 --> 00:14:38.111 line:-1 position:50%
let's discuss
how we can use them


301
00:14:38,111 --> 00:14:42,115 line:-1
to create a new scene
of a particular configuration.


302
00:14:42,115 --> 00:14:46,319 line:-1
In this example, we want to
create a new detail viewer scene


303
00:14:46,319 --> 00:14:49,388 line:-1
when a view is double-clicked.


304
00:14:49.388 --> 00:14:53.292 line:-1 position:50%
The first thing we do is define
a new user activity type


305
00:14:53,292 --> 00:14:56,062 line:-1
for requesting
a detail viewer scene.


306
00:14:56.062 --> 00:14:59.832 line:-1 position:50%
We'll call it
viewDetailActivityType.


307
00:14:59,832 --> 00:15:02,568 line:-1
When we create
that new user activity,


308
00:15:02,568 --> 00:15:04,804 line:-1
we want to pass along
an identifier


309
00:15:04,804 --> 00:15:08,141 line:-1
for the item that we want
to show in detail.


310
00:15:08,141 --> 00:15:10,843 line:-1
To do that,
we define an itemIDKey


311
00:15:10,843 --> 00:15:15,181 line:-1
that will hold that information
in the user info dictionary.


312
00:15:15.181 --> 00:15:18.718 line:-1 position:50%
Then, in our double-click
event handler,


313
00:15:18.718 --> 00:15:23.055 line:-1 position:50%
we create a new NSUserActivity
object of the appropriate type,


314
00:15:23.055 --> 00:15:26.759 line:-1 position:50%
and set its userInfo property
to a dictionary


315
00:15:26,759 --> 00:15:30,797 line:-1
holding the itemID
that we want to show.


316
00:15:30,797 --> 00:15:33,733 line:-1
Finally, we call
the UIApplication


317
00:15:33,733 --> 00:15:36,402 line:-1
requestSceneSessionActivation
function,


318
00:15:36,402 --> 00:15:40,139 line:-1
passing in the user activity
we just created.


319
00:15:40,139 --> 00:15:44,243 line:-1
This will cause the system
to create our new scene.


320
00:15:44.243 --> 00:15:47.313 line:-1 position:50%
So now we know
how to request a new scene


321
00:15:47,313 --> 00:15:49,916 line:-1
for a particular
user activity type.


322
00:15:49,916 --> 00:15:52,852 line:-1
Now let's talk about
how to use that information


323
00:15:52,852 --> 00:15:56,088 line:-1
to load the appropriate
scene configuration.


324
00:15:56.088 --> 00:15:59.125 line:-1 position:50%
We respond to scene creation
requests by implementing


325
00:15:59,125 --> 00:16:01,627 line:-1
the application
configurationForConnecting


326
00:16:01.627 --> 00:16:05.031 line:-1 position:50%
function in the application
delegate.


327
00:16:05.031 --> 00:16:07.700 line:-1 position:50%
In our implementation,
we examine


328
00:16:07,700 --> 00:16:12,271 line:-1
if the incoming scene request
contains any user activities.


329
00:16:12.271 --> 00:16:15.408 line:-1 position:50%
The request can contain
multiple user activities,


330
00:16:15.408 --> 00:16:17.043 line:-1 position:50%
but for this code example,


331
00:16:17,043 --> 00:16:20,746 line:-1
we'll just examine
the first one.


332
00:16:20,746 --> 00:16:23,182 line:-1
If there is an activity
we need to handle,


333
00:16:23.182 --> 00:16:26.118 line:-1 position:50%
we then check its activityType.


334
00:16:26,118 --> 00:16:31,657 line:-1
Here, we test if it's equal
to the viewDetailActivityType.


335
00:16:31.657 --> 00:16:34.961 line:-1 position:50%
If so, we return the scene
configuration named


336
00:16:34.961 --> 00:16:36.729 line:-1 position:50%
DetailViewer.


337
00:16:36.729 --> 00:16:39.632 line:-1 position:50%
This will cause the system
to check in our Info.plist


338
00:16:39.632 --> 00:16:41.567 line:-1 position:50%
for a configuration
of that name,


339
00:16:41,567 --> 00:16:45,738 line:-1
and load the appropriate scene
and scene delegate classes,


340
00:16:45,738 --> 00:16:48,074 line:-1
and display
the specified storyboard


341
00:16:48,074 --> 00:16:51,510 line:-1
in a new desktop window.


342
00:16:51.510 --> 00:16:54.313 line:-1 position:50%
If no specific scene
configuration should be loaded,


343
00:16:54,313 --> 00:16:59,185 line:-1
we fall back to returning
the default configuration.


344
00:16:59.185 --> 00:17:01.387 line:-1 position:50%
There is one more thing to do.


345
00:17:01,387 --> 00:17:03,890 line:-1
Remember that
we saved the itemID


346
00:17:03.890 --> 00:17:05.958 line:-1 position:50%
for the item to be shown?


347
00:17:05.958 --> 00:17:08.895 line:-1 position:50%
We still need to set that value
on the view controller


348
00:17:08.895 --> 00:17:11.998 line:-1 position:50%
of the scene
that we just created.


349
00:17:11.998 --> 00:17:15.801 line:-1 position:50%
We do that in our
SceneDelegate class.


350
00:17:15.801 --> 00:17:18.537 line:-1 position:50%
The scene willConnectTo session
function is called


351
00:17:18.537 --> 00:17:23.209 line:-1 position:50%
just before the scene is about
to be shown on the desktop.


352
00:17:23,209 --> 00:17:24,911 line:-1
The user activity
that was passed


353
00:17:24,911 --> 00:17:28,314 line:-1
into our application delegate is
also passed into this function


354
00:17:28.314 --> 00:17:30.116 line:-1 position:50%
in the scene delegate.


355
00:17:30.116 --> 00:17:34.086 line:-1 position:50%
We can now extract the itemID
from its userInfo dictionary


356
00:17:34,086 --> 00:17:38,124 line:-1
and set it on our new
view controller.


357
00:17:38.124 --> 00:17:42.595 line:-1 position:50%
Using NSUserActivity
to configure new scenes also


358
00:17:42,595 --> 00:17:46,732 line:-1
makes it easier for your app
to support state restoration.


359
00:17:46.732 --> 00:17:48.868 line:-1 position:50%
If your scene delegate
responds to


360
00:17:48.868 --> 00:17:52.138 line:-1 position:50%
the stateRestorationActivity
(for Scene:) callback,


361
00:17:52,138 --> 00:17:55,508 line:-1
the returned user activity
will be saved by the system


362
00:17:55.508 --> 00:17:57.810 line:-1 position:50%
when your app exits.


363
00:17:57,810 --> 00:18:01,414 line:-1
If state restoration is enabled
in System Preferences,


364
00:18:01,414 --> 00:18:03,683 line:-1
the next time your app
is launched,


365
00:18:03,683 --> 00:18:05,818 line:-1
the system will recreate
your scenes


366
00:18:05.818 --> 00:18:08.921 line:-1 position:50%
and pass each scene's
user activity object


367
00:18:08.921 --> 00:18:11.090 line:-1 position:50%
to your app delegate's
application


368
00:18:11.090 --> 00:18:14.727 line:-1 position:50%
configurationForConnecting
SceneSession function.


369
00:18:14.727 --> 00:18:17.596 line:-1 position:50%
This is the same function
that is called when your app


370
00:18:17.596 --> 00:18:20.900 line:-1 position:50%
creates new scenes,
as covered earlier.


371
00:18:20.900 --> 00:18:23.903 line:-1 position:50%
By using a consistent set
of activity types,


372
00:18:23,903 --> 00:18:26,505 line:-1
you can use the same code
to select


373
00:18:26.505 --> 00:18:29.175 line:-1 position:50%
the appropriate scene
configuration when your app


374
00:18:29.175 --> 00:18:35.147 line:-1 position:50%
creates new desktop windows
and during state restoration.


375
00:18:35.147 --> 00:18:37.516 line:-1 position:50%
There is one thing you need
to add to your scene delegate


376
00:18:37.516 --> 00:18:40.252 line:-1 position:50%
so your app can handle
both new scene requests


377
00:18:40,252 --> 00:18:43,356 line:-1
and state restoration
with the same code,


378
00:18:43.356 --> 00:18:47.593 line:-1 position:50%
and that is to modify your scene
willConnect session function


379
00:18:47,593 --> 00:18:50,463 line:-1
in your scene delegate
so that it falls back


380
00:18:50.463 --> 00:18:52.598 line:-1 position:50%
to the stateRestorationActivity


381
00:18:52,598 --> 00:18:56,936 line:-1
if the activity in the scene
connection options is nil.


382
00:18:56.936 --> 00:18:59.538 line:-1 position:50%
Now your app is ready
to handle new scene requests


383
00:18:59.538 --> 00:19:02.174 line:-1 position:50%
and state restoration.


384
00:19:02,174 --> 00:19:04,677 line:0
For more information
on state restoration,


385
00:19:04,677 --> 00:19:09,482 position:50%
check out the "Introducing
Multiple Windows on iPad" video.


386
00:19:09,482 --> 00:19:13,019 line:-1
Next, let's talk about
your app's toolbar.


387
00:19:13,019 --> 00:19:16,155 line:-1
A great Mac app
uses its windows' toolbars


388
00:19:16.155 --> 00:19:18.557 line:-1 position:50%
to present frequently used
actions


389
00:19:18,557 --> 00:19:21,861 line:-1
and other navigation options
for quick access.


390
00:19:21,861 --> 00:19:23,996 line:-1
Unlike toolbars on iOS,


391
00:19:23,996 --> 00:19:27,033 line:-1
the toolbar on a Mac Catalyst
app's desktop window


392
00:19:27.033 --> 00:19:31.003 line:-1 position:50%
does not change as view
controllers appear and disappear


393
00:19:31,003 --> 00:19:34,774 line:-1
in the Split View controller
or a navigation controller.


394
00:19:34.774 --> 00:19:38.144 line:-1 position:50%
Because toolbars are
strongly associated with scenes,


395
00:19:38.144 --> 00:19:40.279 line:-1 position:50%
the best place
to configure your toolbar


396
00:19:40.279 --> 00:19:43.783 line:-1 position:50%
is in your scene delegate
subclass.


397
00:19:43,783 --> 00:19:47,053 line:-1
One important item
usually found on the toolbar


398
00:19:47,053 --> 00:19:49,588 line:-1
is the sharing button.


399
00:19:49,588 --> 00:19:54,226 line:-1
Adding an NSSharingServicePicker
ToolbarItem to your toolbar


400
00:19:54.226 --> 00:19:57.897 line:-1 position:50%
allows your app to share the
main content shown in your scene


401
00:19:57,897 --> 00:20:01,267 line:-1
using the Mac's
standard sharing menu.


402
00:20:01,267 --> 00:20:05,671 line:-1
In macOS Monterey, we have
added the ability for the button


403
00:20:05,671 --> 00:20:09,408 line:-1
to automatically use the
activity items configuration


404
00:20:09.408 --> 00:20:11.777 line:-1 position:50%
shared by your scene.


405
00:20:11,777 --> 00:20:14,513 line:-1
Notice that this is
the same configuration


406
00:20:14,513 --> 00:20:19,618 line:-1
that the new Share This function
of Siri uses on iOS.


407
00:20:19.618 --> 00:20:21.954 line:-1 position:50%
A good way to provide
a sharing configuration


408
00:20:21,954 --> 00:20:24,557 line:-1
for your scene
is to return an object


409
00:20:24,557 --> 00:20:26,258 line:-1
from your RootViewController's


410
00:20:26.258 --> 00:20:29.562 line:-1 position:50%
activityItemsConfiguration
property.


411
00:20:29.562 --> 00:20:30.696 line:-1 position:50%
On Mac Catalyst,


412
00:20:30,696 --> 00:20:33,199 line:-1
an NSSharingServicePicker
ToolbarItem


413
00:20:33.199 --> 00:20:34.433 line:-1 position:50%
in your app's toolbar


414
00:20:34.433 --> 00:20:37.203 line:-1 position:50%
automatically uses
this property.


415
00:20:37.203 --> 00:20:41.440 line:-1 position:50%
On iOS, Siri uses the same
property to share data


416
00:20:41.440 --> 00:20:43.409 line:-1 position:50%
using Share This.


417
00:20:43,409 --> 00:20:46,212 line:-1
Of course, the toolbar
is not the only place


418
00:20:46,212 --> 00:20:48,314 line:-1
your app can offer items
to share.


419
00:20:48,314 --> 00:20:51,817 line:-1
Often, you'd want to allow
sharing of images


420
00:20:51.817 --> 00:20:55.654 line:-1 position:50%
or other items
through a context menu.


421
00:20:55,654 --> 00:20:58,924 line:-1
To do this, return an
activityItemsConfiguration


422
00:20:58.924 --> 00:21:00.993 line:-1 position:50%
object from your view


423
00:21:00,993 --> 00:21:04,930 line:-1
then add a
contextMenuInteraction.


424
00:21:04.930 --> 00:21:09.902 line:-1 position:50%
Here are the results,
on both Mac Catalyst and iPad.


425
00:21:09,902 --> 00:21:13,906 line:0
On Mac Catalyst, note that
a Copy action and a Share menu


426
00:21:13,906 --> 00:21:16,041 line:0
are automatically added.


427
00:21:16,041 --> 00:21:18,377 line:0
And when your app
runs on iPad,


428
00:21:18,377 --> 00:21:21,180 line:0
a Copy and Share action
are added.


429
00:21:21,180 --> 00:21:22,615 line:0
Tapping the Share action


430
00:21:22,615 --> 00:21:25,518 line:0
automatically presents
the share sheet.


431
00:21:25,518 --> 00:21:28,320 position:50%
Using the Activity Items
Configuration API


432
00:21:28,320 --> 00:21:31,657 line:0
allows your app to declare
what its views can share


433
00:21:31,657 --> 00:21:36,829 line:0
so the system can display the
appropriate UI on each platform.


434
00:21:36,829 --> 00:21:39,798 line:-1
Now that we've talked about
how your app can share its data,


435
00:21:39,798 --> 00:21:42,535 line:-1
let's talk about how your app
can import images


436
00:21:42,535 --> 00:21:47,006 line:-1
from an iPhone or iPad
using Continuity Camera.


437
00:21:47.006 --> 00:21:51.277 line:-1 position:50%
If your app uses a UITextView
to display rich text,


438
00:21:51,277 --> 00:21:54,413 line:-1
Continuity Camera support
is automatically enabled


439
00:21:54,413 --> 00:21:56,749 line:-1
in macOS Monterey.


440
00:21:56.749 --> 00:21:59.919 line:-1 position:50%
A right-click on a text view
will show a context menu


441
00:21:59,919 --> 00:22:04,190 line:-1
with an option to take a photo
on your iPhone or iPad


442
00:22:04.190 --> 00:22:07.726 line:-1 position:50%
and automatically add it
as an attachment.


443
00:22:07,726 --> 00:22:11,363 line:-1
To add support for
Continuity Camera to any view,


444
00:22:11,363 --> 00:22:15,034 line:-1
simply return
a UIPasteConfiguration object


445
00:22:15.034 --> 00:22:17.403 line:-1 position:50%
that accepts images
from your view's


446
00:22:17,403 --> 00:22:20,072 line:-1
pasteConfiguration property,


447
00:22:20,072 --> 00:22:24,443 line:-1
then add a UI
contextMenuInteraction.


448
00:22:24,443 --> 00:22:27,846 line:0
Then implement the
paste(itemProviders:) function


449
00:22:27,846 --> 00:22:30,482 position:50%
to load and paste
the incoming objects --


450
00:22:30,482 --> 00:22:33,552 line:0
in this case, images.


451
00:22:33.552 --> 00:22:36.322 line:-1 position:50%
As a bonus, returning
a paste configuration


452
00:22:36.322 --> 00:22:39.592 line:-1 position:50%
from your view not only
enables Continuity Camera


453
00:22:39,592 --> 00:22:42,228 line:-1
when the configuration
accepts images,


454
00:22:42,228 --> 00:22:45,331 line:-1
it also automatically
enables a Paste action


455
00:22:45,331 --> 00:22:46,999 line:-1
in the context menu


456
00:22:46.999 --> 00:22:50.302 line:-1 position:50%
and allows your view
to accept incoming drags,


457
00:22:50,302 --> 00:22:53,339 line:-1
both on Mac Catalyst and iPad.


458
00:22:53,339 --> 00:22:56,342 line:-1
So those are some
specific things you can do


459
00:22:56,342 --> 00:23:00,479 line:-1
to help make your app
a great Mac Catalyst app.


460
00:23:00,479 --> 00:23:04,550 line:-1
Now let's go back to Owen
to talk about distribution.


461
00:23:04.550 --> 00:23:06.252 line:-1 position:50%
Owen: Thanks, Dave.


462
00:23:06.252 --> 00:23:08.153 line:-1 position:50%
When it comes
to releasing your app,


463
00:23:08.153 --> 00:23:10.990 line:-1 position:50%
the big thing to remember
is that Mac Catalyst apps


464
00:23:10.990 --> 00:23:13.692 line:-1 position:50%
are Mac apps,
and can be distributed


465
00:23:13,692 --> 00:23:17,830 line:-1
through all the same means
as any other Mac app.


466
00:23:17.830 --> 00:23:20.766 line:-1 position:50%
You can publish your app
on the Mac App Store,


467
00:23:20,766 --> 00:23:23,269 line:-1
with the option
for Universal Purchase


468
00:23:23,269 --> 00:23:28,040 line:-1
so your existing iOS customers
automatically get your Mac app.


469
00:23:28.040 --> 00:23:31.543 line:-1 position:50%
You have access to TestFlight
for beta releases of your app


470
00:23:31.543 --> 00:23:34.313 line:-1 position:50%
and to get early feedback
on new builds.


471
00:23:34,313 --> 00:23:36,482 line:-1
You can also use
App Notarization


472
00:23:36.482 --> 00:23:39.251 line:-1 position:50%
and distribute it yourself.


473
00:23:39.251 --> 00:23:41.320 line:-1 position:50%
And if you develop a framework,


474
00:23:41,320 --> 00:23:44,657 line:-1
use XCFrameworks
to distribute cross-platform,


475
00:23:44.657 --> 00:23:47.993 line:-1 position:50%
bundling together binaries
for all platforms.


476
00:23:47,993 --> 00:23:51,797 line:-1
Today, we've covered the process
of building your iOS app for Mac


477
00:23:51,797 --> 00:23:53,098 line:-1
with Mac Catalyst,


478
00:23:53.098 --> 00:23:55.267 line:-1 position:50%
and highlighted
some important decisions


479
00:23:55,267 --> 00:23:57,870 line:-1
and changes to make
along the way.


480
00:23:57.870 --> 00:24:00.973 line:-1 position:50%
Now it's time to consider
your own projects.


481
00:24:00,973 --> 00:24:03,075 line:-1
It's easy to get your app
running on Mac,


482
00:24:03,075 --> 00:24:05,477 line:-1
and with just a little bit
of work,


483
00:24:05,477 --> 00:24:07,479 line:-1
you can make your app
feel right at home


484
00:24:07.479 --> 00:24:12.117 line:-1 position:50%
and make it available to a whole
new set of excited customers.


485
00:24:12.117 --> 00:24:13.686 line:-1 position:50%
Thank you!


486
00:24:13,686 --> 00:24:16,922 line:0 size:2% align:right
♪

