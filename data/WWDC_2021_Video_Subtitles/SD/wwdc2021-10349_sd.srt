2
00:00:01,735 --> 00:00:04,738 line:-1
[upbeat music]


3
00:00:04.771 --> 00:00:09.009 line:-1 align:center
♪ ♪


4
00:00:09,042 --> 00:00:11,178 line:-1
[Jacob] Hey, I'm Jacob.


5
00:00:11,211 --> 00:00:14,114 line:-1
Welcome to "SF Symbols in SwiftUI."


6
00:00:14,147 --> 00:00:16,917 line:-2 align:start
We're going to look at a few topics
during this session.


7
00:00:16.950 --> 00:00:18.886 line:-1 align:center
First, some of the fundamentals


8
00:00:18,919 --> 00:00:21,588 line:-1
of using SF Symbols from SwiftUI.


9
00:00:21.622 --> 00:00:24.691 line:-1 align:center
Then, how to use variants of your symbols.


10
00:00:24,725 --> 00:00:27,594 line:-2 position:20%
And finally,
working with the new Rendering Modes.


11
00:00:27,628 --> 00:00:30,764 line:-2 align:start
One note on the availability
of these APIs:


12
00:00:30.797 --> 00:00:34.168 line:-2 align:start position:23%
everything we'll see in this session
is available on all Apple platforms,


13
00:00:34.201 --> 00:00:36.036 line:-1 align:center
and look for the new badge to know


14
00:00:36,069 --> 00:00:38,372 line:-2 position:33%
when something's new
in this year's releases.


15
00:00:38,405 --> 00:00:40,607 line:-1
Let's get into the fundamentals.


16
00:00:40.641 --> 00:00:42.876 line:-2 position:26% align:start
If you've already used Symbols
from SwiftUI,


17
00:00:42,910 --> 00:00:45,045 line:-1
this part should be a breeze.


18
00:00:46,113 --> 00:00:49,116 line:-1
To start, let's just show a Symbol.


19
00:00:50.184 --> 00:00:53.620 line:-2 align:start position:24%
The most simple way is to use one
of the system-provided symbols,


20
00:00:53.654 --> 00:00:56.290 line:-1 align:center
like "heart," in an Image.


21
00:00:56.323 --> 00:00:59.860 line:-2 align:start position:29%
A Label view is the other
main way to show symbols.


22
00:00:59,893 --> 00:01:03,730 position:31% line:-2
A Label is a combination
of a title with an icon,


23
00:01:03,764 --> 00:01:06,099 line:-1
which is most often a symbol.


24
00:01:06.133 --> 00:01:08.268 line:-1 align:center
The great thing about a label is


25
00:01:08,302 --> 00:01:10,370 position:28% line:-2
that it's a general description
of this pairing


26
00:01:10,404 --> 00:01:14,041 align:start line:-2
and will adapt its behavior
to the context where it's shown.


27
00:01:14.074 --> 00:01:16.310 line:-1 align:center
For example, in many components,


28
00:01:16.343 --> 00:01:19.813 line:-2 position:20% align:start
the label will be shown with the symbol,
and then the title.


29
00:01:19,847 --> 00:01:22,816 line:-2 position:28%
Sometimes, they'll be shown
in a different layout,


30
00:01:22,850 --> 00:01:25,118 line:-1
or sometimes, a component will show


31
00:01:25,152 --> 00:01:27,554 line:-1
only the symbol or only the title.


32
00:01:27.588 --> 00:01:29.957 line:-1 align:center
SwiftUI automatically makes these changes


33
00:01:29,990 --> 00:01:31,725 line:-1
for you in built-in views,


34
00:01:31,758 --> 00:01:35,128 position:27% line:-2
and you can use label styles
in your own views to do it, too.


35
00:01:36.096 --> 00:01:39.600 line:-2 align:start position:27%
You can show custom symbols
in both Image and Label


36
00:01:39,633 --> 00:01:42,769 line:-1
by just changing the initializer you use.


37
00:01:42,803 --> 00:01:45,606 line:-2 align:start
This is what each of these
configurations looks like,


38
00:01:45,639 --> 00:01:49,576 line:-2 position:27%
but their visual representation
isn't the only one that matters.


39
00:01:49,610 --> 00:01:51,545 line:-1
This is how each of these views


40
00:01:51,578 --> 00:01:53,981 line:-1
will appear to VoiceOver by default.


41
00:01:54.014 --> 00:01:55.983 line:-1 align:center
You can see that using Label


42
00:01:56,016 --> 00:01:58,619 line:-2 align:start
automatically gives us
great Accessibility support,


43
00:01:58,652 --> 00:02:01,154 position:35% line:-2
since the title gives
a textual description


44
00:02:01.188 --> 00:02:02.890 line:-1 align:center
of the content.


45
00:02:02,923 --> 00:02:06,527 line:-1
Let's look closer at the image-only cases.


46
00:02:06,560 --> 00:02:09,663 position:30% line:-2
When possible,
SwiftUI will provide a label


47
00:02:09,696 --> 00:02:12,232 line:-1
based on a system symbol's content.


48
00:02:12,266 --> 00:02:13,734 line:-1
This might be all you need,


49
00:02:13.767 --> 00:02:17.371 line:-2 position:28% align:start
like if you were using a heart
for a "love" button.


50
00:02:17.404 --> 00:02:20.574 line:-2 position:26% align:start
However, some symbols
don't have a standard meaning,


51
00:02:20.607 --> 00:02:21.942 line:-1 align:center
and in those cases,


52
00:02:21,975 --> 00:02:25,612 line:-2 position:23%
the default Accessibility description
won't be as useful.


53
00:02:25,646 --> 00:02:28,549 align:start line:-2
You also might be able to add
more specific information


54
00:02:28,582 --> 00:02:31,885 line:-1
about how your app is using the symbol.


55
00:02:31,919 --> 00:02:34,454 line:-1
You can always use an accessibilityLabel


56
00:02:34.488 --> 00:02:37.157 line:-1 align:center
to provide that information.


57
00:02:37,191 --> 00:02:39,660 line:-1
Our custom symbol is another case


58
00:02:39.693 --> 00:02:43.330 line:-2 align:start position:25%
where we're not getting
an ideal accessibility description.


59
00:02:43,363 --> 00:02:46,967 line:-2 align:start
A great way to improve that
is to provide a localization


60
00:02:47,000 --> 00:02:50,804 align:start line:-2
for the image's name
in a Localizable.strings file.


61
00:02:50.838 --> 00:02:54.074 line:-2 position:31% align:start
SwiftUI will automatically
use this localizable string


62
00:02:54,107 --> 00:02:57,511 position:25% line:-2
for the accessibility label
of this image anywhere it's used.


63
00:02:58.612 --> 00:03:02.015 line:-2 position:28% align:start
One last way to use symbols
is as part of Text.


64
00:03:02,049 --> 00:03:04,818 align:start line:-2
You can embed a symbol
inside a run of text


65
00:03:04.852 --> 00:03:06.954 line:-1 align:center
by using string interpolation.


66
00:03:06,987 --> 00:03:10,524 line:-2 position:24%
This is a good technique to use
when you want a symbol to reflow


67
00:03:10,557 --> 00:03:13,126 line:-1
along with your text, like this chevron.


68
00:03:15,095 --> 00:03:17,865 align:start line:-2
Okay, let's go back
to our Label with the heart


69
00:03:17,898 --> 00:03:19,967 line:-2 position:28%
and look at some
of the modifiers we can apply


70
00:03:20.000 --> 00:03:23.337 line:-1 align:start position:27%
to symbols to customize them.


71
00:03:23,370 --> 00:03:25,906 line:-1
Let's start by changing our symbols' color


72
00:03:25.939 --> 00:03:28.308 line:-1 align:center
with the foregroundStyle modifier.


73
00:03:28.342 --> 00:03:31.678 line:-1 align:center
Text and symbols default to black or white


74
00:03:31.712 --> 00:03:34.481 line:-1 align:center
in light mode or dark mode.


75
00:03:34,515 --> 00:03:38,285 line:-2 align:start
You can set the foregroundStyle
to a specific color, like red,


76
00:03:38,318 --> 00:03:40,320 line:-1
or to more semantic values,


77
00:03:40,354 --> 00:03:43,690 line:-1
like the current tint or secondary style.


78
00:03:43.724 --> 00:03:46.260 line:-2 align:start position:27%
We'll come back
to foregroundStyle again later


79
00:03:46,293 --> 00:03:48,996 line:-2 position:23%
to see some more advanced effects
we can do with it.


80
00:03:50,564 --> 00:03:54,034 align:start line:-2
You can use a font modifier
to change both the text size,


81
00:03:54.067 --> 00:03:56.970 line:-1 align:center
as well as the size of your symbols.


82
00:03:57,004 --> 00:04:00,240 line:-2 position:33%
If you use a text style,
like body or caption,


83
00:04:00,274 --> 00:04:03,911 line:-2 align:start
then the text and symbol will scale
with dynamic type,


84
00:04:03,944 --> 00:04:07,347 line:-2 align:start
and if you choose a fixed size,
then they stay constant.


85
00:04:09.183 --> 00:04:13.120 line:-2 align:start position:21%
The other axis where you can change
the size of symbols is their scale,


86
00:04:13,153 --> 00:04:15,989 line:-1
using the imageScale modifier.


87
00:04:16,023 --> 00:04:18,392 line:-2 align:start
This doesn't change
the font size that's used,


88
00:04:18,425 --> 00:04:21,628 line:-2 align:start
but how large a symbol appears
relative to text.


89
00:04:23,664 --> 00:04:26,366 line:-1
Next, let's take a look at variants.


90
00:04:26.400 --> 00:04:28.669 line:-1 align:center
You may have noticed that iOS tab bars


91
00:04:28,702 --> 00:04:31,104 line:-1
should use filled symbol variants.


92
00:04:31.138 --> 00:04:33.974 line:-2 position:26% align:start
In the past, this was something
that you had to do yourself


93
00:04:34.007 --> 00:04:37.144 line:-2 align:start position:21%
by carefully choosing the right symbol
from the Symbols app,


94
00:04:37,177 --> 00:04:39,780 line:-2 align:start
and knowing when a symbol
didn't have a fill variant,


95
00:04:39,813 --> 00:04:41,849 line:-1
like "sparkles" here.


96
00:04:41,882 --> 00:04:44,651 line:-1
New this year, tab bars and other views


97
00:04:44.685 --> 00:04:47.254 line:-2 align:start position:33%
now automatically opt
into specific variants,


98
00:04:47.287 --> 00:04:50.257 line:-2 align:start position:28%
like fill, to be applied
to any symbols they contain.


99
00:04:50,290 --> 00:04:53,293 align:start line:-2
This means you can just use
the base version of the symbol


100
00:04:53,327 --> 00:04:56,396 align:start line:-2
and get the right variant
without any extra work.


101
00:04:56,430 --> 00:05:00,100 align:start line:-2
And by not over-specifying
the exact configuration you want,


102
00:05:00.133 --> 00:05:02.669 line:-1 align:center
you also get code that's more reusable.


103
00:05:02,703 --> 00:05:05,939 align:start line:-2
For example,
if we run this same code on macOS,


104
00:05:05.973 --> 00:05:09.076 line:-2 position:30% align:start
we get the correct variant
for that platform: outlines.


105
00:05:10.911 --> 00:05:14.348 line:-2 align:start position:25%
We can use this variant support
in our own components, as well.


106
00:05:14,381 --> 00:05:16,617 line:-1
Here, I have a simple list of labels,


107
00:05:16,650 --> 00:05:19,419 line:-1
shown with the default outline variant.


108
00:05:19,453 --> 00:05:21,221 line:-1
To use filled variants here,


109
00:05:21,255 --> 00:05:24,124 line:-1
I can use the new symbolVariant modifier.


110
00:05:24,157 --> 00:05:27,728 position:20% line:-2
This modifier sets the specified variant
in the environment,


111
00:05:27,761 --> 00:05:30,130 align:start line:-2
so it's great to use
on a whole view hierarchy,


112
00:05:30,163 --> 00:05:32,432 line:-1
like we're doing here.


113
00:05:32,466 --> 00:05:34,868 line:-1
There's a large set of variants available:


114
00:05:34.902 --> 00:05:38.705 line:-2 position:23% align:start
fill, slash,
and a set of shape encapsulations.


115
00:05:38.739 --> 00:05:41.308 line:-2 position:29% align:start
And these can be combined
with each other, as well,


116
00:05:41.341 --> 00:05:43.177 line:-1 align:center
the same way they're combined in the names


117
00:05:43,210 --> 00:05:46,580 line:-2 position:29%
of the symbols themselves,
like .circle.fill.


118
00:05:47,781 --> 00:05:51,351 line:-2 position:25%
This same set of variants works
on your custom symbols, as well.


119
00:05:51,385 --> 00:05:54,087 position:29% line:-2
All you have to do is follow
the same naming patterns


120
00:05:54,121 --> 00:05:56,790 line:-1
used by system symbols.


121
00:05:56.823 --> 00:05:59.893 line:-1 align:center
Next, let's look at rendering modes.


122
00:05:59,927 --> 00:06:03,197 line:-2 position:27%
Symbols support four different
rendering modes to allow you


123
00:06:03,230 --> 00:06:06,200 position:30% line:-2
to customize the way
your symbols are colored.


124
00:06:06,233 --> 00:06:08,735 line:-2 align:start
Here are some examples
of each rendering mode.


125
00:06:08.769 --> 00:06:10.871 line:-1 align:center
We'll go over them one by one.


126
00:06:10.904 --> 00:06:12.172 line:-1 align:center
And if you want to learn more


127
00:06:12,206 --> 00:06:14,408 align:start line:-2
about the design
of the different rendering modes,


128
00:06:14,441 --> 00:06:17,778 line:-2 align:start
I highly recommend
"What's new in SF Symbols."


129
00:06:19.179 --> 00:06:21.615 line:-1 align:center
Okay, let's go back to our list of cards,


130
00:06:21,648 --> 00:06:23,784 line:-1
this time on macOS.


131
00:06:23,817 --> 00:06:27,254 position:22% line:-2
Right now, our symbols are showing
the default rendering mode,


132
00:06:27.287 --> 00:06:29.223 line:-1 align:center
which is monochrome.


133
00:06:29,256 --> 00:06:31,725 position:28% line:-2
This works well
for showing consistent colors


134
00:06:31,758 --> 00:06:33,994 line:-1
for a set of symbols.


135
00:06:34,027 --> 00:06:36,997 line:-2 align:start
However, in this case,
I'd like to show these symbols


136
00:06:37.030 --> 00:06:40.901 line:-2 align:start position:29%
using the colors associated
with each card.


137
00:06:40.934 --> 00:06:44.204 line:-2 align:start position:27%
The multicolor rendering mode
is a great way to show colors


138
00:06:44,238 --> 00:06:46,373 line:-1
for what each symbol represents.


139
00:06:46,406 --> 00:06:49,076 align:start line:-2
And we can change to it
by adding a symbolRenderingMode


140
00:06:49,109 --> 00:06:51,678 line:-1
modifier on multicolor.


141
00:06:51,712 --> 00:06:54,815 line:-2 align:start
If a symbol doesn't have
a multicolor representation,


142
00:06:54,848 --> 00:06:57,985 line:-2 position:22%
it will fall back
to the monochrome rendering mode.


143
00:06:58,018 --> 00:06:59,786 line:-1
You can use the SF Symbols app


144
00:06:59.820 --> 00:07:02.456 line:-2 align:start position:30%
to look up which symbols
have multicolor definitions


145
00:07:02,489 --> 00:07:06,426 line:-2 align:start
and to add multicolor support
to your custom symbols.


146
00:07:06,460 --> 00:07:10,063 line:-2 align:start
Check out the "SF Symbols App Overview"
to learn more.


147
00:07:10.097 --> 00:07:13.166 line:-2 align:start position:30%
In another part of this app,
we have some buttons


148
00:07:13,200 --> 00:07:16,036 position:25% line:-2
to shuffle cards to different parts
of the deck.


149
00:07:16,069 --> 00:07:18,605 align:start line:-2
I'd like to emphasize
the key parts of these symbols


150
00:07:18,639 --> 00:07:20,707 line:-1
with different levels of opacity.


151
00:07:20.741 --> 00:07:23.744 line:-2 position:25% align:start
Do you remember
which rendering mode does that?


152
00:07:23,777 --> 00:07:26,346 line:-2 align:start
That's right!
Hierarchical!


153
00:07:26,380 --> 00:07:29,283 align:start line:-2
We can use the same
symbolRenderingMode modifier


154
00:07:29,316 --> 00:07:30,584 line:-1
with hierarchical.


155
00:07:30,617 --> 00:07:32,719 line:-1
This uses the current foreground style


156
00:07:32,753 --> 00:07:35,622 line:-2 position:22%
to apply a single color to the symbol,
like monochrome,


157
00:07:35.656 --> 00:07:38.325 line:-1 align:center
but also adds multiple levels of opacity,


158
00:07:38,358 --> 00:07:41,461 line:-2 position:26%
to emphasize
the key elements of the symbol.


159
00:07:41.495 --> 00:07:43.363 line:-1 align:center
There's one last rendering mode,


160
00:07:43.397 --> 00:07:46.200 line:-2 align:start position:25%
and there's a button
in my app that it could help with.


161
00:07:46,233 --> 00:07:47,768 line:-1
I'm not very good at card games,


162
00:07:47,801 --> 00:07:50,103 line:-1
so I need this button to undo my mistakes.


163
00:07:50,137 --> 00:07:52,840 line:-2 align:start
Here, I'm showing
a symbol in a button


164
00:07:52.873 --> 00:07:54.875 line:-1 align:center
with a .circle.fill variant


165
00:07:54,908 --> 00:07:57,211 line:-1
to get this circular background.


166
00:07:57,244 --> 00:07:59,580 line:-2 align:start
But the coloring isn't exactly
what I want.


167
00:07:59.613 --> 00:08:03.550 line:-2 position:21% align:start
I'd like something that better matches
the color of our cards.


168
00:08:03,584 --> 00:08:06,386 line:-2 align:start
Remember that we can use
the foregroundStyle modifier


169
00:08:06,420 --> 00:08:07,955 line:-1
to set a color on a symbol.


170
00:08:07.988 --> 00:08:10.057 line:-1 align:center
But we can go further.


171
00:08:10.090 --> 00:08:12.459 line:-1 align:center
New this year, we can set multiple colors


172
00:08:12,492 --> 00:08:14,661 line:-1
to be used to draw our symbol.


173
00:08:14,695 --> 00:08:17,998 line:-2 align:start
This uses the palette rendering mode,
which allows maximum control


174
00:08:18,031 --> 00:08:20,400 align:start line:-2
over the coloring of the layers
of a symbol.


175
00:08:20.434 --> 00:08:23.070 line:-1 align:center
You can specify up to three styles


176
00:08:23,103 --> 00:08:25,706 line:-1
to control each level of the symbol.


177
00:08:25,739 --> 00:08:29,376 line:-2 align:start
This symbol has primary
and tertiary content,


178
00:08:29.409 --> 00:08:32.913 line:-2 align:start position:29%
so the first and third colors
will be used.


179
00:08:32.946 --> 00:08:36.583 line:-2 position:25% align:start
If we used a symbol that just has
primary and secondary content,


180
00:08:36.617 --> 00:08:38.719 line:-1 align:center
like the outline version of this symbol,


181
00:08:38,752 --> 00:08:41,288 line:-1
then only those colors would be used.


182
00:08:41.321 --> 00:08:44.424 line:-2 position:25% align:start
Because most individual symbols
only use two layers,


183
00:08:44,458 --> 00:08:45,826 line:-1
like both of these,


184
00:08:45,859 --> 00:08:48,762 align:start line:-2
you can specify two styles
instead of three,


185
00:08:48,795 --> 00:08:50,464 line:-1
and the last style is used


186
00:08:50,497 --> 00:08:53,267 line:-1
for everything from secondary onwards.


187
00:08:53.300 --> 00:08:56.637 line:-1 align:center
In many cases, this is all you need.


188
00:08:56,670 --> 00:08:58,705 line:-1
We've been using colors so far,


189
00:08:58.739 --> 00:09:00.941 line:-2 align:start position:32%
but this is a foreground
style modifier,


190
00:09:00,974 --> 00:09:03,844 line:-1
and it works with any ShapeStyle.


191
00:09:03.877 --> 00:09:05.913 line:-1 align:center
We can use a secondary style


192
00:09:05.946 --> 00:09:08.215 line:-1 align:center
to get a vibrant effect in front of blurs,


193
00:09:08,248 --> 00:09:10,951 position:33% line:-2
or even use a material
to blur the background


194
00:09:10,984 --> 00:09:12,486 line:-1
behind a symbol.


195
00:09:12,519 --> 00:09:15,789 position:21% line:-2
If you want to learn more
about foreground styles and materials,


196
00:09:15,822 --> 00:09:19,293 line:-2 position:28%
check out "Add rich graphics
to your SwiftUI app."


197
00:09:19.326 --> 00:09:23.063 line:-2 align:start position:27%
Let's look back at the full
set of rendering modes again.


198
00:09:24,198 --> 00:09:27,701 line:-2 position:25%
The best way to see and choose
which rendering modes to use


199
00:09:27,734 --> 00:09:31,071 line:-1
is the SF Symbols app and its inspector.


200
00:09:31.104 --> 00:09:33.040 line:-1 align:center
And these APIs to express


201
00:09:33,073 --> 00:09:36,043 line:-2 position:27%
these configurations in SwiftUI
work the same way,


202
00:09:36.076 --> 00:09:38.011 line:-1 align:center
so it's easy to go back and forth


203
00:09:38,045 --> 00:09:40,747 line:-1
between the Symbols app and your code.


204
00:09:40,781 --> 00:09:44,017 align:start line:-2
You also get the best behavior
with minimal configuration.


205
00:09:44.818 --> 00:09:47.020 line:-1 align:center
If you have only one foreground style,


206
00:09:47,054 --> 00:09:48,922 line:-1
and don't specify a rendering mode,


207
00:09:48,956 --> 00:09:52,259 line:-1
you'll automatically get monochrome.


208
00:09:52,292 --> 00:09:54,795 line:-2 align:start
And if you specify more
than one foreground style,


209
00:09:54,828 --> 00:09:56,563 line:-1
but don't specify a rendering mode,


210
00:09:56,597 --> 00:09:58,832 line:-1
you'll automatically get palette.


211
00:10:00.801 --> 00:10:03.904 line:-2 align:start position:25%
The Symbols app has a large set
of colors available to use


212
00:10:03,937 --> 00:10:06,573 line:-1
with these different rendering modes.


213
00:10:06,607 --> 00:10:10,143 align:start line:-2
And that full set of colors
is available in SwiftUI, as well,


214
00:10:10.177 --> 00:10:12.045 line:-1 align:center
including several colors and styles


215
00:10:12,079 --> 00:10:14,181 line:-1
that are new this year.


216
00:10:14,214 --> 00:10:15,916 line:-1
These colors are optimized


217
00:10:15.949 --> 00:10:18.051 line:-2 position:25% align:start
for all the different configurations
they appear in:


218
00:10:18,085 --> 00:10:21,021 position:28% line:-2
light and dark mode,
special rendering over blurs,


219
00:10:21.054 --> 00:10:23.991 line:-2 position:30% align:start
even the specific platform
they're shown on.


220
00:10:24.024 --> 00:10:26.393 line:-1 align:center
We just saw how to create symbols,


221
00:10:26,426 --> 00:10:29,062 line:-2 position:29%
a set of modifiers
to change their appearance,


222
00:10:29,096 --> 00:10:31,965 position:28% line:-2
how to change which variant
of a symbol is shown,


223
00:10:31,999 --> 00:10:33,700 line:-1
choosing different rendering modes,


224
00:10:33.734 --> 00:10:35.802 line:-1 align:center
and how to use foreground styles


225
00:10:35,836 --> 00:10:37,838 line:-1
to customize your symbol's coloring.


226
00:10:37,871 --> 00:10:41,475 line:-2 align:start
SF Symbols make it easy
to add beautiful graphics to your app


227
00:10:41,508 --> 00:10:44,611 line:-2 position:27%
and to customize them as little
or as much as you want.


228
00:10:44.645 --> 00:10:48.348 line:-2 position:22% align:start
See where you can adopt them
to make your apps look even better.


229
00:10:48,382 --> 00:10:51,485 line:-2 position:30%
Thanks for watching
and have a great WWDC.


230
00:10:51.518 --> 00:10:54.521 line:-1 align:center
[upbeat music]

