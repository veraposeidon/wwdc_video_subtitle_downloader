2
00:00:00.000 --> 00:00:01.902 line:-1 position:50%
[MAC ST ARTUP CHIME]


3
00:00:01,902 --> 00:00:05,505 line:-1
♪ Bass music playing ♪


4
00:00:05,505 --> 00:00:07,941 line:-1
[KEYSTROKES]


5
00:00:07,941 --> 00:00:09,776 line:0 align:center position:89%
♪


6
00:00:09.776 --> 00:00:10.978 line:-1 position:50%
Simon Goldrei: Hello.


7
00:00:10,978 --> 00:00:12,346 line:-1
This session is all about


8
00:00:12.346 --> 00:00:15.682 line:-1 position:50%
how to transition media
gaplessly with HLS.


9
00:00:15.682 --> 00:00:18.685 line:-1 position:50%
I'm Simon and I'm a member
of the Streaming Media team


10
00:00:18.685 --> 00:00:20.787 line:-1 position:50%
here at Apple!


11
00:00:20,787 --> 00:00:23,156 line:-1
Do you utilize AVQueuePlayer,


12
00:00:23.156 --> 00:00:25.125 line:-1 position:50%
or would like to offer
your customers


13
00:00:25,125 --> 00:00:28,729 line:-1
a seamless, Up Next-style
playback of HLS items


14
00:00:28,729 --> 00:00:30,697 line:-1
in your application?


15
00:00:30.697 --> 00:00:33.600 line:-1 position:50%
Do you want to present
your media with the continuity


16
00:00:33.600 --> 00:00:35.769 line:-1 position:50%
that the producer intended?


17
00:00:35.769 --> 00:00:38.839 line:-1 position:50%
Can we support our customers
by providing an experience


18
00:00:38,839 --> 00:00:40,874 line:-1
to enjoy our media for longer?


19
00:00:40,874 --> 00:00:44,144 line:-1
If yes, then you've tuned in
to the best session


20
00:00:44.144 --> 00:00:50.050 line:-1 position:50%
to learn how you can now
transition HLS items gaplessly.


21
00:00:50.050 --> 00:00:51.752 line:-1 position:50%
Here's our agenda.


22
00:00:51.752 --> 00:00:54.655 line:-1 position:50%
We'll survey some of
the engaging media experiences


23
00:00:54,655 --> 00:00:57,624 line:-1
you can deliver
with this new feature,


24
00:00:57,624 --> 00:01:01,528 line:-1
I'll detail the media
authoring requirements,


25
00:01:01.528 --> 00:01:03.397 line:-1 position:50%
I'll step through some
playlist examples


26
00:01:03.397 --> 00:01:05.699 line:-1 position:50%
highlighting best practices,


27
00:01:05.699 --> 00:01:08.635 line:-1 position:50%
and we'll end with a demo.


28
00:01:08,635 --> 00:01:12,906 line:-1
The benefits of transitioning
between HLS-backed AVPlayerItems


29
00:01:12.906 --> 00:01:15.709 line:-1 position:50%
in an AVQueuePlayer
are straightforward.


30
00:01:15.709 --> 00:01:17.210 line:-1 position:50%
Until now,
the point of transition


31
00:01:17,210 --> 00:01:18,779 line:-1
could be a little jarring;


32
00:01:18,779 --> 00:01:22,382 line:-1
anything from an audible glitch
to a momentary visual hiccup


33
00:01:22.382 --> 00:01:26.486 line:-1 position:50%
or even an indication
of indeterminate buffering.


34
00:01:26.486 --> 00:01:29.323 line:-1 position:50%
Gapless item transitions
maintain a bond


35
00:01:29.323 --> 00:01:32.559 line:-1 position:50%
that your application provides
between the customer


36
00:01:32.559 --> 00:01:35.262 line:-1 position:50%
and the content.


37
00:01:35,262 --> 00:01:38,332 line:-1
Perhaps you recall the phrase
"don't touch that dial."


38
00:01:38.332 --> 00:01:40.367 line:-1 position:50%
You can build
an episodic treatment


39
00:01:40,367 --> 00:01:43,370 line:-1
that seamlessly transitions
from the end of one episode


40
00:01:43,370 --> 00:01:46,273 line:-1
into the start of another.


41
00:01:46,273 --> 00:01:49,343 line:-1
Gapless transitions permit
the ability to replicate


42
00:01:49.343 --> 00:01:52.212 line:-1 position:50%
the seamless track-to-track
album experiences


43
00:01:52.212 --> 00:01:54.715 line:-1 position:50%
that we've long enjoyed.


44
00:01:54,715 --> 00:01:55,782 line:-1
When doing this,


45
00:01:55,782 --> 00:01:57,918 line:-1
we're delivering
a more correct reproduction


46
00:01:57.918 --> 00:02:01.888 line:-1 position:50%
of what may have been live
or intentionally authored.


47
00:02:01.888 --> 00:02:04.491 line:-1 position:50%
We can deliver an experience
that is unbroken


48
00:02:04,491 --> 00:02:07,561 line:-1
and uninterrupted.


49
00:02:07,561 --> 00:02:10,831 line:-1
We can replicate
linear programming.


50
00:02:10.831 --> 00:02:12.299 line:-1 position:50%
But we can also provide


51
00:02:12.299 --> 00:02:15.435 line:-1 position:50%
a dynamic and perhaps even
interactive experience


52
00:02:15.435 --> 00:02:17.804 line:-1 position:50%
that takes the viewer
from one task or scene


53
00:02:17,804 --> 00:02:21,875 line:-1
and directly segues
into the next.


54
00:02:21.875 --> 00:02:24.478 line:-1 position:50%
Consider a transition
between a set of workouts


55
00:02:24,478 --> 00:02:27,347 line:-1
or other instructional media.


56
00:02:27,347 --> 00:02:30,817 line:-1
With gapless transitions
we can now, programmatically,


57
00:02:30,817 --> 00:02:33,020 line:-1
stitch scenes
of an audiovisual sequence


58
00:02:33.020 --> 00:02:36.523 line:-1 position:50%
while maintaining
accurate continuity.


59
00:02:36.523 --> 00:02:39.026 line:-1 position:50%
You can add reps...


60
00:02:39,026 --> 00:02:41,862 line:-1
...or add a cooldown,
to the workout.


61
00:02:41,862 --> 00:02:43,163 line:-1
We can achieve all of this


62
00:02:43,163 --> 00:02:45,432 line:-1
while still delivering media
with all the benefits


63
00:02:45.432 --> 00:02:50.203 line:-1 position:50%
of adaptive bitrate media
streaming over HTTP.


64
00:02:50,203 --> 00:02:52,572 line:-1
Of course, we use this, too!


65
00:02:52,572 --> 00:02:55,942 line:-1
New features of Apple Music
deliver content via HLS


66
00:02:55.942 --> 00:02:58.912 line:-1 position:50%
and achieve a gapless
transition between each song.


67
00:02:58.912 --> 00:03:01.381 line:-1 position:50%
We're very excited to bring this
to our customers,


68
00:03:01.381 --> 00:03:05.152 line:-1 position:50%
and we'd like to offer this
to your customers, too.


69
00:03:05.152 --> 00:03:07.954 line:-1 position:50%
Let's now take detailed look
at the authoring requirements


70
00:03:07,954 --> 00:03:11,658 line:-1
you need to incorporate to
affect the same item transitions


71
00:03:11,658 --> 00:03:13,927 line:-1
in your HLS content.


72
00:03:13,927 --> 00:03:16,596 line:-1
By providing --
in your HLS manifests --


73
00:03:16.596 --> 00:03:18.832 line:-1 position:50%
variants that offer
audio-format continuity


74
00:03:18,832 --> 00:03:20,434 line:-1
between sequential items,


75
00:03:20,434 --> 00:03:23,537 line:-1
you're enabling
a gapless transition.


76
00:03:23,537 --> 00:03:25,439 line:-1
Your content should provide
variants that match


77
00:03:25,439 --> 00:03:28,508 line:-1
the following
audio media traits:


78
00:03:28.508 --> 00:03:32.679 line:-1 position:50%
the use of FairPlay Streaming,
the audio codec --


79
00:03:32.679 --> 00:03:37.217 line:-1 position:50%
specified by the codecs
attribute of the Stream tag --


80
00:03:37,217 --> 00:03:38,785 line:-1
and the channel count,


81
00:03:38.785 --> 00:03:43.490 line:-1 position:50%
as specified by the Channels
attribute of the Media tag.


82
00:03:43,490 --> 00:03:46,326 line:-1
Note that if you decide
to offer audio renditions,


83
00:03:46,326 --> 00:03:48,728 line:-1
at different sample
rates and bit depth,


84
00:03:48.728 --> 00:03:51.531 line:-1 position:50%
you may inhibit
the gapless transition.


85
00:03:51.531 --> 00:03:53.633 line:-1 position:50%
The same advice
to provide a match


86
00:03:53,633 --> 00:03:58,205 line:-1
and maintain continuity
applies to these traits, too.


87
00:03:58.205 --> 00:04:01.241 line:-1 position:50%
Which is to say,
to achieve a gapless transition,


88
00:04:01.241 --> 00:04:04.811 line:-1 position:50%
be sure to offer equivalent
audio media in each variant


89
00:04:04.811 --> 00:04:08.515 line:-1 position:50%
for consecutively
enqueued items.


90
00:04:08,515 --> 00:04:11,051 line:-1
Finally,
when authoring your media,


91
00:04:11,051 --> 00:04:15,355 line:-1
please adhere to CMAF
authoring guidance.


92
00:04:15,355 --> 00:04:19,960 line:-1
CMAF stands for "common media
application format."


93
00:04:19,960 --> 00:04:22,195 line:-1
In this MPEG specification,


94
00:04:22.195 --> 00:04:23.997 line:-1 position:50%
there is a specific
recommendation


95
00:04:23,997 --> 00:04:27,134 line:-1
to use an edit list to signal
the presence of priming


96
00:04:27.134 --> 00:04:30.036 line:-1 position:50%
and remainder frames.


97
00:04:30,036 --> 00:04:32,339 line:-1
Let's now look
at a simple example


98
00:04:32,339 --> 00:04:34,574 line:-1
by inspecting
the master variant playlists


99
00:04:34.574 --> 00:04:38.011 line:-1 position:50%
of two candidate items.


100
00:04:38,011 --> 00:04:39,746 line:-1
In this HLS manifest


101
00:04:39.746 --> 00:04:43.250 line:-1 position:50%
I've offered four
audiovisual variants:


102
00:04:43.250 --> 00:04:48.321 line:-1 position:50%
a pair of 720p variants
and a pair of 1080p variants.


103
00:04:48.321 --> 00:04:51.158 line:-1 position:50%
Within each pair,
I offer a variant encoded


104
00:04:51.158 --> 00:04:56.329 line:-1 position:50%
with the High-Efficiency
Advanced Audio Codec, HE_AAC,


105
00:04:56.329 --> 00:05:02.602 line:-1 position:50%
and another with AAC
Low Complexity, or AAC_LC.


106
00:05:02,602 --> 00:05:05,472 line:-1
In this example, consider that
playback conditions support


107
00:05:05.472 --> 00:05:11.178 line:-1 position:50%
the selection of the 720p video
paired with HE_AAC.


108
00:05:11,178 --> 00:05:14,447 position:50%
As playback nears the end,
the AVQueuePlayer will,


109
00:05:14,447 --> 00:05:17,417 line:0
at least initially, select
the similarly encoded variant


110
00:05:17,417 --> 00:05:20,754 position:50%
offered in the subsequent item.


111
00:05:20,754 --> 00:05:22,989 position:50%
This is true even
if network conditions


112
00:05:22,989 --> 00:05:25,992 position:50%
now support
a higher-quality tier.


113
00:05:25,992 --> 00:05:28,995 position:50%
Servicing the gapless transition
is a higher priority


114
00:05:28,995 --> 00:05:34,267 line:0
than choosing a high quality
when transitioning gaplessly.


115
00:05:34,267 --> 00:05:37,270 position:50%
As playback proceeds,
the adaptive bitrate heuristics


116
00:05:37,270 --> 00:05:40,774 line:0
are evaluated and,
if the conditions persist,


117
00:05:40,774 --> 00:05:43,944 position:50%
the player will seamlessly
switch to that higher quality.


118
00:05:43.944 --> 00:05:45.278 line:-1 position:50%
Fantastic!


119
00:05:45.278 --> 00:05:50.083 line:-1 position:50%
Now suppose we didn't
offer HE_AAC in item two.


120
00:05:50.083 --> 00:05:52.485 line:-1 position:50%
In that case, the AVQueuePlayer


121
00:05:52,485 --> 00:05:55,455 line:-1
is unable to maintain
audio continuity


122
00:05:55.455 --> 00:05:58.625 line:-1 position:50%
and the gapless transition
but is free to select


123
00:05:58.625 --> 00:06:00.627 line:-1 position:50%
the most appropriate
initial variant


124
00:06:00,627 --> 00:06:02,862 line:-1
for the playback conditions.


125
00:06:02.862 --> 00:06:04.831 line:-1 position:50%
Let's say that we have
authored our content


126
00:06:04,831 --> 00:06:07,300 line:-1
to support a gapless transition.


127
00:06:07.300 --> 00:06:09.402 line:-1 position:50%
In that case,
we should remind ourselves


128
00:06:09,402 --> 00:06:11,938 line:-1
how to use an AVQueuePlayer.


129
00:06:11,938 --> 00:06:14,541 line:-1
Here we have a short
code snippet.


130
00:06:14.541 --> 00:06:17.877 line:-1 position:50%
We create two AVPlayerItems
and enqueue them, in order,


131
00:06:17,877 --> 00:06:19,779 line:-1
ahead of playback.


132
00:06:19.779 --> 00:06:23.850 line:-1 position:50%
Note that our items
source from two different URLs.


133
00:06:23.850 --> 00:06:26.086 line:-1 position:50%
After creating
our AVQueuePlayer,


134
00:06:26.086 --> 00:06:28.288 line:-1 position:50%
we can use
the "insert after" method


135
00:06:28,288 --> 00:06:32,025 line:-1
to inform the queue player
of the intended sequence.


136
00:06:32,025 --> 00:06:34,928 line:-1
All that's left
is to message "play".


137
00:06:43,603 --> 00:06:46,339 line:-1
An advanced technique
I'd like to share with you


138
00:06:46,339 --> 00:06:49,943 line:-1
permits the use
of a single asset.


139
00:06:49,943 --> 00:06:50,977 line:-1
From this asset,


140
00:06:50,977 --> 00:06:54,447 line:-1
you can instantiate
multiple AVPlayerItems.


141
00:06:54.447 --> 00:06:57.117 line:-1 position:50%
We can define different
in and out points


142
00:06:57.117 --> 00:06:59.052 line:-1 position:50%
on each distinct AVPlayerItem,


143
00:06:59.052 --> 00:07:03.790 line:-1 position:50%
prior to enqueuing
in our AVQueuePlayer.


144
00:07:03.790 --> 00:07:06.993 line:-1 position:50%
Using the AVPlayerItem
seekToTime method,


145
00:07:06,993 --> 00:07:10,196 line:-1
we can define our in point.


146
00:07:10.196 --> 00:07:14.801 line:-1 position:50%
Then we can define our out point
with forwardPlaybackEndTime.


147
00:07:14.801 --> 00:07:17.504 line:-1 position:50%
Here's an illustration
of this concept.


148
00:07:17.504 --> 00:07:21.975 line:-1 position:50%
Item one, two, and three are all
sourced from the same AVAsset,


149
00:07:21,975 --> 00:07:24,911 line:-1
consisting of the same
three scenes.


150
00:07:24.911 --> 00:07:27.547 line:-1 position:50%
They are distinct in that
I have cued each


151
00:07:27.547 --> 00:07:30.417 line:-1 position:50%
with different in points,
using seekToTime,


152
00:07:30.417 --> 00:07:36.022 line:-1 position:50%
and defined distinct out points,
using forwardPlaybackEndTime.


153
00:07:36,022 --> 00:07:39,793 line:0
Now I can enqueue these
three otherwise identical items


154
00:07:39,793 --> 00:07:42,796 line:0
into my AVQueuePlayer,
and what I achieve


155
00:07:42,796 --> 00:07:46,166 line:0
is a customized,
dynamic sequence.


156
00:07:46,166 --> 00:07:49,502 line:-1
Now let's see and hear
gapless transitions in action


157
00:07:49,502 --> 00:07:50,904 line:-1
with a demo.


158
00:07:50.904 --> 00:07:54.474 line:-1 position:50%
In this demo, we will
interactively stitch together


159
00:07:54,474 --> 00:07:56,576 line:-1
three workout video streams.


160
00:07:56,576 --> 00:07:59,346 line:-1
I've left the AVKit controls
visible in each


161
00:07:59,346 --> 00:08:04,718 line:-1
so that you can really see these
are distinct stream resources.


162
00:08:04.718 --> 00:08:07.454 line:-1 position:50%
I'll start by showing
a seamless playback of all three


163
00:08:07.454 --> 00:08:09.856 line:-1 position:50%
and then we'll edit
the sequence interactively.


164
00:08:09.856 --> 00:08:12.559 line:-1 position:50%
In your software, you can
imagine offering the same --


165
00:08:12,559 --> 00:08:18,798 line:-1
or perhaps perform the
reordering -- programmatically.


166
00:08:18,798 --> 00:08:20,767 position:50%
>> [WHOOSHING]


167
00:08:20,767 --> 00:08:22,802 line:0
Right! Let's do a warm-up.


168
00:08:22,802 --> 00:08:25,605 position:50%
♪ Energetic electronic music ♪


169
00:08:25,605 --> 00:08:30,577 line:0 size:2% align:center
♪


170
00:08:30,577 --> 00:08:32,679 position:50%
Ready or not?
Let's do a hills run.


171
00:08:32,679 --> 00:08:35,548 line:0
♪ Lively hip-hop music ♪


172
00:08:35,548 --> 00:08:40,520 align:center position:89% line:0
♪


173
00:08:40,520 --> 00:08:43,256 line:0
That's it! We're done.
It's time for a cooldown.


174
00:08:43,256 --> 00:08:44,257 position:50%
[WHISTLE TRILLS]


175
00:08:44,257 --> 00:08:47,460 position:50%
♪ Calm electronic music ♪


176
00:08:47,460 --> 00:08:51,698 position:87%
♪ <


177
00:08:51,698 --> 00:08:54,300 line:-1
I can break a sweat
just watching that.


178
00:08:54.300 --> 00:08:57.237 line:-1 position:50%
I'm tempted to skip straight
to the "That's it, we're done,"


179
00:08:57,237 --> 00:08:58,805 line:-1
and skip the hills run.


180
00:08:58,805 --> 00:09:01,341 line:-1
There's a lot of that
here in San Francisco.


181
00:09:01,341 --> 00:09:05,779 line:-1
To do this, let's edit the order
of our exercise sets.


182
00:09:05,779 --> 00:09:08,381 line:-1
I'll move the hills exercise
to the top.


183
00:09:08.381 --> 00:09:10.884 line:-1 position:50%
This allows me
to just do the warm-up


184
00:09:10.884 --> 00:09:15.789 line:-1 position:50%
then immediately and gaplessly
segue into the cooldown.


185
00:09:15.789 --> 00:09:18.224 line:-1 position:50%
Then I'll start by selecting
the warm-up,


186
00:09:18,224 --> 00:09:21,294 line:-1
now in the second position,
as my first workout.


187
00:09:21,294 --> 00:09:23,263 position:50%
>> [WHOOSHING]


188
00:09:23,263 --> 00:09:25,298 position:50%
Right! Let's do a warm-up.


189
00:09:25,298 --> 00:09:28,835 line:0
♪ Energetic electronic music ♪


190
00:09:28,835 --> 00:09:33,072 align:center position:89% size:2%
♪


191
00:09:33,072 --> 00:09:35,842 position:50%
That's it! We're done.
It's time for a cooldown.


192
00:09:35,842 --> 00:09:36,910 line:0
[WHISTLE TRILLS]


193
00:09:36,910 --> 00:09:39,813 line:0
♪ Calm electronic music ♪


194
00:09:39,813 --> 00:09:43,283 line:0
♪ <


195
00:09:45.952 --> 00:09:47.587 line:-1 position:50%
Let's summarize the key points


196
00:09:47.587 --> 00:09:49.622 line:-1 position:50%
that we've learned
in this session.


197
00:09:49.622 --> 00:09:53.626 line:-1 position:50%
We've learned that to achieve
gapless transitions using HLS,


198
00:09:53.626 --> 00:09:55.995 line:-1 position:50%
we must provide variants
in each item


199
00:09:55.995 --> 00:09:58.665 line:-1 position:50%
that have matching
audio formats.


200
00:09:58,665 --> 00:10:02,202 line:0
Then we saw how easy it is
to instruct an AVQueuePlayer


201
00:10:02,202 --> 00:10:04,237 line:0
to perform
the gapless transition


202
00:10:04,237 --> 00:10:07,874 position:50%
just by enqueuing items
in sequence.


203
00:10:07,874 --> 00:10:09,609 position:50%
We have one related session,


204
00:10:09,609 --> 00:10:13,012 line:0
where we introduce new APIs
for variant discovery.


205
00:10:13,012 --> 00:10:16,115 position:50%
You may find that session useful
if your software or service


206
00:10:16,115 --> 00:10:19,419 position:50%
cannot guarantee the items
of matching audio format.


207
00:10:19.419 --> 00:10:21.354 line:-1 position:50%
I hope you've enjoyed
this session


208
00:10:21,354 --> 00:10:25,425 line:-1
and enjoy the rest
of this WWDC 2021.


209
00:10:25,425 --> 00:10:27,093 line:-1
Thank you.


210
00:10:27,093 --> 00:10:29,996 align:center line:0 size:2%
♪

