2
00:00:00.334 --> 00:00:07.341 line:-1
[upbeat music]


3
00:00:09.042 --> 00:00:11.345 line:-2
[Michael] Welcome to
"What's New in UIKit"


4
00:00:11.345 --> 00:00:12.880 line:-1
in iOS 15.


5
00:00:12.880 --> 00:00:14.815 line:-2
My name is Michael
and later I'll be joined


6
00:00:14.815 --> 00:00:16.083 line:-1
by my colleague Jamie.


7
00:00:17.217 --> 00:00:21.455 line:-2
iOS 15 is packed full of amazing
new technology and features.


8
00:00:21.455 --> 00:00:24.558 line:-2
We've updated UIKit in some
exciting ways to help you


9
00:00:24.558 --> 00:00:26.293 line:-1
adopt these new capabilities.


10
00:00:27.528 --> 00:00:30.430 line:-2
Together, Jamie and I will cover
productivity updates,


11
00:00:30.430 --> 00:00:33.534 line:-2
UI refinements,
API enhancements,


12
00:00:33.534 --> 00:00:35.369 line:-1
performance improvements,


13
00:00:35.369 --> 00:00:38.305 line:-2
as well as some
new security and privacy features.


14
00:00:39.406 --> 00:00:42.643 line:-2
Productivity is at the heart
of iPadOS,


15
00:00:42.643 --> 00:00:44.511 line:-2
and this year
is no exception,


16
00:00:44.511 --> 00:00:46.947 line:-2
with updates
to iPad Multitasking,


17
00:00:46.947 --> 00:00:50.083 line:-2
keyboard navigation,
keyboard shortcuts,


18
00:00:50.083 --> 00:00:53.453 line:-2
and iPad pointer,
just to name a few.


19
00:00:53.453 --> 00:00:56.190 line:-2
Let's start with a short
demo of how we've updated


20
00:00:56.190 --> 00:00:59.760 line:-2
Multitasking to take
iPad to the next level.


21
00:00:59.760 --> 00:01:02.129 line:-2
In Mail,
we are using the new


22
00:01:02.129 --> 00:01:04.798 line:-2
center scene Multitasking
feature to make it


23
00:01:04.798 --> 00:01:07.634 line:-2
easier than ever to focus
on a single message.


24
00:01:09.069 --> 00:01:10.971 line:-2
Just long press on
a message to open


25
00:01:10.971 --> 00:01:14.675 line:-2
the context menu and select
â€œOpen in New Window."


26
00:01:14.675 --> 00:01:17.544 line:-2
This will open the message
in its own UIWindowScene


27
00:01:17.544 --> 00:01:19.379 line:-1
in the center of the screen.


28
00:01:19.379 --> 00:01:22.482 line:-2
This is a great way to focus
on the task at hand.


29
00:01:22.482 --> 00:01:25.285 line:-2
The new center scene
can also be moved to Split View


30
00:01:25.285 --> 00:01:26.753 line:-1
using drag and drop,


31
00:01:26.753 --> 00:01:29.623 line:-2
or by choosing the Split View
option in the new


32
00:01:29.623 --> 00:01:32.159 line:-2
Multitasking menu at
the top of the window scene.


33
00:01:33.360 --> 00:01:37.164 line:-2
Alternately, you can swipe down
on the Multitasking menu


34
00:01:37.164 --> 00:01:39.700 line:-2
and dock the scene
in the new window shelf.


35
00:01:41.735 --> 00:01:44.271 line:-2
Adding this functionality
to your app is as simple


36
00:01:44.271 --> 00:01:48.141 line:-2
as creating a new window
scene activation action.


37
00:01:48.141 --> 00:01:50.077 line:-2
This action takes a closure
that returns


38
00:01:50.077 --> 00:01:53.847 line:-2
an activation configuration,
created with an NSUserActivity


39
00:01:53.847 --> 00:01:56.049 line:-1
that can be handled by your app.


40
00:01:56.049 --> 00:01:59.286 line:-2
Add this action to a context
menu and you're all set.


41
00:02:00.787 --> 00:02:04.858 line:-2
With iPadOS 13.4 we
introduced the Magic Keyboard


42
00:02:04.858 --> 00:02:06.660 line:-1
and a pointer.


43
00:02:06.660 --> 00:02:10.097 line:-2
In iPadOS 15 we've
improved pointer support


44
00:02:10.097 --> 00:02:11.765 line:-1
by adding band selection.


45
00:02:11,765 --> 00:02:13,867
In addition to providing
new API,


46
00:02:13,867 --> 00:02:16,537
we've enabled band
selection by default


47
00:02:16,537 --> 00:02:19,706
for UICollectionViews
that support multi-selection.


48
00:02:19,706 --> 00:02:22,709
We've also added pointer
accessories that allow you


49
00:02:22.709 --> 00:02:26.246 line:-2
to communicate additional
context or hint at functionality


50
00:02:26.246 --> 00:02:30.617 line:-2
by combining secondary shapes
with any pointer style.


51
00:02:30.617 --> 00:02:33.253 line:-2
Multiple accessories
can be displayed at a time


52
00:02:33.253 --> 00:02:35.889 line:-2
and positioned
around the pointer.


53
00:02:35.889 --> 00:02:38.625 line:-2
They have the same fluid
nature as the pointer,


54
00:02:38.625 --> 00:02:40.360 line:-2
and the system seamlessly
animates


55
00:02:40.360 --> 00:02:43.030 line:-2
between different accessory
shapes and positions.


56
00:02:44.665 --> 00:02:47.968 line:-2
In iPadOS 15,
we've completely redesigned


57
00:02:47.968 --> 00:02:49.837 line:-1
the keyboard shortcut menu.


58
00:02:49.837 --> 00:02:52.606 line:-2
With categorized shortcuts
and built-in search,


59
00:02:52.606 --> 00:02:54.842 line:-2
finding the shortcut
you're looking for


60
00:02:54.842 --> 00:02:56.844 line:-1
has never been easier.


61
00:02:56.844 --> 00:03:00.414 line:-2
The new Keyboard Shortcut menu
also provides increased parity


62
00:03:00.414 --> 00:03:03.517 line:-2
between iPad and Mac Catalyst
versions of your app.


63
00:03:05.052 --> 00:03:07.554 line:-2
To take full advantage
of these new features,


64
00:03:07,554 --> 00:03:10,257
you need to adopt UIMenuBuilder.


65
00:03:10,257 --> 00:03:12,593
Implement
buildMenuWithBuilder


66
00:03:12,593 --> 00:03:14,695
on your UIApplicationDelegate.


67
00:03:14,695 --> 00:03:17,831
Assign commands to one of the
pre-defined categories


68
00:03:17,831 --> 00:03:20,000
such as â€œView" or â€œFile"


69
00:03:20,000 --> 00:03:22,970
or even create your
own custom category.


70
00:03:22,970 --> 00:03:26,139
To use categories, you will need
to audit your application


71
00:03:26,139 --> 00:03:29,576
for uses of UIResponder's
keyCommands property.


72
00:03:29,576 --> 00:03:31,845
Move any commands
assigned to this property


73
00:03:31,845 --> 00:03:34,114
to the buildMenuWithBuilder
function.


74
00:03:34.114 --> 00:03:37.818 line:-2
To learn more about
Multitasking, iPad pointer,


75
00:03:37.818 --> 00:03:41.121 line:-2
and the new Keyboard Shortcut
menu, we have an amazing video


76
00:03:41,121 --> 00:03:43,023
all about taking your iPad apps


77
00:03:43,023 --> 00:03:44,424
to the next level.


78
00:03:44.424 --> 00:03:47.794 line:-2
We've also added rich
support for focus based


79
00:03:47.794 --> 00:03:51.064 line:-2
keyboard navigation
in iPadOS 15.


80
00:03:51.064 --> 00:03:54.368 line:-2
If you're already familiar
with the focus system on tvOS,


81
00:03:54.368 --> 00:03:55.869 line:-1
then you'll be happy to know


82
00:03:55.869 --> 00:03:58.338 line:-2
it's now available
in iPadOS as well.


83
00:03:58.338 --> 00:04:01.308 line:-2
In fact,
all focus navigation in tvOS,


84
00:04:01.308 --> 00:04:04.711 line:-1
CarPlay, iPadOS, and Mac Catalyst


85
00:04:04.711 --> 00:04:07.481 line:-1
are now built on UIFocusSystem.


86
00:04:07.481 --> 00:04:11.385 line:-2
With UIFocusSystem
on iPad and Mac Catalyst,


87
00:04:11.385 --> 00:04:14.888 line:-2
the arrow keys are used
to move between focus items


88
00:04:14.888 --> 00:04:18.825 line:-2
and the tab key
to move between focus groups.


89
00:04:18.825 --> 00:04:21.562 line:-2
In this example,
the Mail application is using


90
00:04:21.562 --> 00:04:24.698 line:-2
UISplitViewController
with a sidebar,


91
00:04:24.698 --> 00:04:26.967 line:-2
and when using
these standard UIKit components,


92
00:04:26.967 --> 00:04:29.436 line:-2
keyboard navigation
as demonstrated


93
00:04:29.436 --> 00:04:33.173 line:-2
will be enabled
by default in iPadOS 15.


94
00:04:33,173 --> 00:04:36,410
Check out "Focus on
keyboard navigation"


95
00:04:36,410 --> 00:04:38,779
to learn more about supporting
keyboard navigation


96
00:04:38,779 --> 00:04:40,214
in your app.


97
00:04:40.214 --> 00:04:43.217 line:-2
Another essential
productivity feature of iOS


98
00:04:43.217 --> 00:04:45.385 line:-1
is multi-touch Drag and Drop.


99
00:04:45.385 --> 00:04:47.821 line:-2
Introduced in iOS 11,
Drag and Drop


100
00:04:47.821 --> 00:04:50.657 line:-2
has been an essential
productivity enhancement.


101
00:04:50.657 --> 00:04:54.194 line:-2
With one simple gesture, you can seamlessly
move data within


102
00:04:54.194 --> 00:04:58.732 line:-2
the application and on iPadOS
even between applications.


103
00:04:58.732 --> 00:05:01.401 line:-1
With iOS 15, UIKit has enabled


104
00:05:01.401 --> 00:05:03.937 line:-2
inter-app drag and drop
on iPhone as well,


105
00:05:03.937 --> 00:05:06.707 line:-2
unlocking many
exciting new interactions.


106
00:05:08.008 --> 00:05:11.078 line:-2
For example, It's now
easier than ever to quickly


107
00:05:11.078 --> 00:05:14.882 line:-2
share an idea for a new
watch band with a friend.


108
00:05:14.882 --> 00:05:17.251 line:-2
With one gesture,
you can simply drag a photo


109
00:05:17.251 --> 00:05:20.320 line:-2
from Safari right into
a Messages conversation.


110
00:05:21.522 --> 00:05:24.424 line:-2
The Drag and Drop APIs have
not changed to support


111
00:05:24.424 --> 00:05:26.326 line:-1
this expanded capability.


112
00:05:26.326 --> 00:05:28.595 line:-2
For a refresh of the technical
details,


113
00:05:28.595 --> 00:05:31.598 line:-1
we have four great videos from 2017


114
00:05:31.598 --> 00:05:35.636 line:-2
that go in-depth on how to take
advantage of Drag and Drop.


115
00:05:35.636 --> 00:05:39.039 line:-2
Next, I'll show you some
of the UI refinements


116
00:05:39.039 --> 00:05:40.641 line:-1
in iOS 15.


117
00:05:40.641 --> 00:05:44.845 line:-2
We refined the appearance
of UIToolbar and UITabBar.


118
00:05:44.845 --> 00:05:48.815 line:-2
This updated look removes
the background material


119
00:05:48.815 --> 00:05:50.250 line:-1
when scrolled to bottom,


120
00:05:50.250 --> 00:05:53.587 line:-2
giving more visual
clarity to your content.


121
00:05:53.587 --> 00:05:57.090 line:-2
In UITabBar, we've enhanced
support for SF Symbols,


122
00:05:57.090 --> 00:06:00.827 line:-2
giving great results when using
any of your favorite symbols.


123
00:06:01.728 --> 00:06:04.431 line:-2
While UIKit does its best
to make this new appearance


124
00:06:04.431 --> 00:06:06.033 line:-1
seamless in your app,


125
00:06:06.033 --> 00:06:08.735 line:-2
there are a few issues
you may encounter.


126
00:06:08.735 --> 00:06:10.838 line:-2
You should audit your
code for places where you


127
00:06:10.838 --> 00:06:13.674 line:-2
may be setting a bar's
translucent property to false


128
00:06:13.674 --> 00:06:16.076 line:-2
and check
for any UIViewControllers


129
00:06:16.076 --> 00:06:19.713 line:-2
that have non-standard
edgesForExtendedLayout.


130
00:06:19.713 --> 00:06:22.349 line:-2
Both of these conditions
will cause visual issues


131
00:06:22.349 --> 00:06:23.951 line:-1
with the new appearance.


132
00:06:25,953 --> 00:06:29,456
If the new default behavior
is not appropriate for your app,


133
00:06:29,456 --> 00:06:31,792
just create a custom
appearance and assign it


134
00:06:31,792 --> 00:06:35,429
to the scrollEdgeAppearance
property on your bar.


135
00:06:35,429 --> 00:06:37,698
This property
was previously only available


136
00:06:37,698 --> 00:06:40,734
on UINavigationBar
but is now also available


137
00:06:40,734 --> 00:06:44,104
on UIToolbar and UITabBar.


138
00:06:44,104 --> 00:06:47,074
Setting a custom appearance will
avoid any of the visual issues


139
00:06:47,074 --> 00:06:50,210
causes by the previously
mentioned incompatible APIs.


140
00:06:51,545 --> 00:06:54,248
Additionally,
it is possible UIKit won't


141
00:06:54,248 --> 00:06:57,317
be able to infer the proper
scroll view for observation


142
00:06:57,317 --> 00:07:01,321
when performing the new scroll
edge appearance transitions.


143
00:07:01,321 --> 00:07:03,557
To directly
specify the scrollView,


144
00:07:03,557 --> 00:07:06,193
we've added a new function
on UIViewController â€”


145
00:07:06,193 --> 00:07:08,762
setContentScrollView for edge.


146
00:07:08,762 --> 00:07:10,030
Look at all your bars.


147
00:07:10.030 --> 00:07:12.833 line:-2
Make sure the appearance
is what you expect.


148
00:07:12.833 --> 00:07:15.035 line:-2
Be sure to check anywhere
you've done something


149
00:07:15.035 --> 00:07:17.538 line:-2
special â€”
it might need extra attention.


150
00:07:18.672 --> 00:07:22.476 line:-2
We have a new appearance
for headers in iOS 15.


151
00:07:22.476 --> 00:07:25.612 line:-2
For plain lists, section headers
now display seamlessly


152
00:07:25.612 --> 00:07:27.281 line:-1
in line with the content,


153
00:07:27.281 --> 00:07:30.117 line:-2
and only display a visible
background material


154
00:07:30.117 --> 00:07:33.687 line:-2
when becoming pinned
to the top as you scroll down.


155
00:07:33.687 --> 00:07:35.789 line:-2
In addition,
there's new padding inserted


156
00:07:35.789 --> 00:07:38.325 line:-2
above each section header
to visually separate


157
00:07:38.325 --> 00:07:40.360 line:-2
the sections
with this new design.


158
00:07:42.062 --> 00:07:45.599 line:-2
You should use this plain style
in conjunction with index bars


159
00:07:45.599 --> 00:07:47.935 line:-2
for fast scrubbing
when list content is long


160
00:07:47.935 --> 00:07:50.037 line:-2
as demonstrated
in the Contacts app.


161
00:07:51.972 --> 00:07:54.408 line:-2
UIKit also
offers a grouped style.


162
00:07:54.408 --> 00:07:56.977 line:-2
This is for use
in UI that doesn't contain


163
00:07:56.977 --> 00:08:00.347 line:-2
a lot of custom
or visually rich content.


164
00:08:00.347 --> 00:08:03.417 line:-2
This is a great choice
for configuration UI


165
00:08:03.417 --> 00:08:06.220 line:-2
or registration flows
similar to what you'd find


166
00:08:06.220 --> 00:08:07.988 line:-1
in the Settings app.


167
00:08:09.223 --> 00:08:12.392 line:-2
The prominent header style is
very similar to the existing


168
00:08:12.392 --> 00:08:17.064 line:-2
sidebar header style used
for sidebar lists on iPad.


169
00:08:17.064 --> 00:08:19.299 line:-2
Prominent headers
are a great choice to use


170
00:08:19.299 --> 00:08:22.603 line:-2
when adapting a .sidebar list
to an .insetGrouped list


171
00:08:22.603 --> 00:08:24.271 line:-1
in a compact size class.


172
00:08:25.472 --> 00:08:28.308 line:-2
The alarm tab in the Clock
app makes great use


173
00:08:28.308 --> 00:08:30.777 line:-1
of this new style.


174
00:08:30.777 --> 00:08:34.314 line:-2
And finally, we have a new extra
prominent grouped style


175
00:08:34.314 --> 00:08:36.850 line:-2
for use with content
that is visually rich


176
00:08:36.850 --> 00:08:38.852 line:-2
so that headers maintain
hierarchy


177
00:08:38.852 --> 00:08:40.354 line:-1
and avoid becoming lost.


178
00:08:41.755 --> 00:08:43.624 line:-2
Check out the Watch app's
Face Gallery


179
00:08:43.624 --> 00:08:46.360 line:-1
to see this style in action.


180
00:08:46.360 --> 00:08:48.695 line:-2
To access all of these
great header styles,


181
00:08:48.695 --> 00:08:51.698 line:-2
use the
UIListContentConfiguration API


182
00:08:51.698 --> 00:08:54.801 line:-1
introduced in iOS 14.


183
00:08:54.801 --> 00:09:00.340 line:-2
In iOS 14.5 we introduced
UIListSeparatorConfiguration


184
00:09:00.340 --> 00:09:04.478 line:-2
that allows full control over
separators in a list.


185
00:09:04.478 --> 00:09:07.714 line:-2
You can specify a configuration
for the entire list,


186
00:09:07.714 --> 00:09:10.617 line:-2
or you can override
the system-generated appearance


187
00:09:10.617 --> 00:09:15.989 line:-2
on a per-row basis, giving you
full control over separators.


188
00:09:15.989 --> 00:09:19.092 line:-2
Sheets in iOS 15 gain
the ability to only cover


189
00:09:19,092 --> 00:09:21,495
half the screen, displayed
at what we call


190
00:09:21,495 --> 00:09:23,964
the medium height detent.


191
00:09:23,964 --> 00:09:26,133
With this new half
height functionality,


192
00:09:26,133 --> 00:09:29,369
you can optionally disable
dimming behind this detent


193
00:09:29,369 --> 00:09:31,638
to create a non-modal
experience


194
00:09:31,638 --> 00:09:35,676
allowing interaction both within
and behind the sheet.


195
00:09:35,676 --> 00:09:38,679
Watch "Customize and resize
sheets in UIKit"


196
00:09:38,679 --> 00:09:42,349
to learn about all the ways
we've enhanced sheets in iOS 15.


197
00:09:43.884 --> 00:09:46.086 line:-1
Next up UIDatePicker.


198
00:09:46.086 --> 00:09:49.256 line:-2
And yes, In iOS 15,
we are reintroducing


199
00:09:49.256 --> 00:09:52.159 line:-1
the wheels of time.


200
00:09:52.159 --> 00:09:54.194 line:-2
But now,
you can simply tap the time


201
00:09:54.194 --> 00:09:56.897 line:-1
to use the keyboard for input.


202
00:09:56.897 --> 00:09:58.866 line:-1
And with Magic Keyboard on iPad,


203
00:09:58.866 --> 00:10:01.368 line:-2
you can even
edit the time right in-line.


204
00:10:01.368 --> 00:10:03.971 line:-2
Of course,
you can still tap the screen


205
00:10:03.971 --> 00:10:05.772 line:-2
to reveal those beautiful
wheels.


206
00:10:05.772 --> 00:10:09.443 line:-2
And with that, I'll hand it
off to my colleague Jamie.


207
00:10:09.443 --> 00:10:11.612 line:-1
[Jamie] Thanks, Mike!


208
00:10:11.612 --> 00:10:13.480 line:-2
I'm going to start out
looking at some more


209
00:10:13.480 --> 00:10:16.216 line:-2
enhancements to UIKit APIs
in iOS 15.


210
00:10:16.216 --> 00:10:19.453 line:-2
Our first API enhancements
is in many ways


211
00:10:19.453 --> 00:10:21.421 line:-1
also a UI refinement.


212
00:10:21.421 --> 00:10:23.957 line:-2
We've added new APIs
to UIButton, to allow you


213
00:10:23.957 --> 00:10:26.827 line:-2
to flexibly configure
your button's look and feel.


214
00:10:28.328 --> 00:10:31.932 line:-2
As well as the existing Plain
style, we've added Gray,


215
00:10:31.932 --> 00:10:34.935 line:-1
which has a gray background,


216
00:10:34.935 --> 00:10:38.305 line:-2
Tinted, which has a tinted
background,


217
00:10:38.305 --> 00:10:40.474 line:-2
and Filled,
which is entirely opaque.


218
00:10:41.942 --> 00:10:44.578 line:-2
In addition to the new styles,
buttons now better support


219
00:10:44.578 --> 00:10:47.281 line:-2
resizing in response to the
system "text size" setting


220
00:10:47.281 --> 00:10:49.883 line:-2
known as Dynamic Type,
and for the first time


221
00:10:49.883 --> 00:10:52.786 line:-2
formally support
multi-line text.


222
00:10:52.786 --> 00:10:55.989 line:-2
These changes, and the new
UIButton.Configuration API


223
00:10:55.989 --> 00:10:57.457 line:-1
that enables them,


224
00:10:57,457 --> 00:10:59,626
don't just make buttons
more powerful,


225
00:10:59,626 --> 00:11:02,095
they're also more customizable
and easy to update.


226
00:11:03.630 --> 00:11:06.066 line:-2
Together with the UIMenu
additions to buttons


227
00:11:06.066 --> 00:11:07.901 line:-1
released in iOS 14,


228
00:11:07.901 --> 00:11:10.637 line:-2
UIButtonConfiguration
allows you to make pop-up


229
00:11:10.637 --> 00:11:14.741 line:-2
and pull-down buttons natively
in UIKit for the first time.


230
00:11:16.777 --> 00:11:19.279 line:-2
And, of course,
if you're using UIKit on Mac,


231
00:11:19.279 --> 00:11:22.783 line:-2
and you've chosen in Xcode to
"Optimize Interface For Mac",


232
00:11:22.783 --> 00:11:24.918 line:-2
these buttons all look
and behave


233
00:11:24.918 --> 00:11:26.687 line:-2
just as
you'd expect them to.


234
00:11:28.422 --> 00:11:31.491 line:-2
Here's an example of how easy
the API is to use.


235
00:11:31.491 --> 00:11:34.261 line:-2
Just create a button
configuration.


236
00:11:34.261 --> 00:11:36.396 line:-2
This constructor
gives the Tinted style.


237
00:11:39.066 --> 00:11:40.634 line:-1
The configuration's properties


238
00:11:40.634 --> 00:11:43.770 line:-2
are used
to customize the button.


239
00:11:43.770 --> 00:11:46.974 line:-2
And then instantiate the button,
passing in the configuration.


240
00:11:46.974 --> 00:11:49.510 line:-2
It's not shown here,
but the only thing left


241
00:11:49.510 --> 00:11:53.380 line:-2
is to add an action,
and add the button to your view.


242
00:11:53,380 --> 00:11:56,350
There's a lot more to
UIButtonConfiguration than I


243
00:11:56,350 --> 00:11:59,086
can cover here, so there is
a full video covering it,


244
00:11:59,086 --> 00:12:02,055
and other improvements
to UIButton, in detail.


245
00:12:02,055 --> 00:12:04,358
Check out
"Meet the UIKit Button System"


246
00:12:04,358 --> 00:12:07,127
to learn
all about the button APIs.


247
00:12:07.127 --> 00:12:11.398 line:-2
UIContextMenuInteraction
on iOS and iPadOS


248
00:12:11.398 --> 00:12:14.401 line:-2
now supports collapsible
submenus.


249
00:12:14.401 --> 00:12:17.604 line:-2
They appear when you tap
on any item with a chevron


250
00:12:17.604 --> 00:12:19.840 line:-2
like the "Sort By" item
in this menu.


251
00:12:21.108 --> 00:12:22.709 line:-1
There's no new API for this.


252
00:12:22.709 --> 00:12:25.479 line:-2
The UIMenu API already
supports submenus,


253
00:12:25.479 --> 00:12:28.649 line:-2
but prior to iOS 15,
they replaced the current menu


254
00:12:28.649 --> 00:12:31.552 line:-2
entirely when you tapped
on them.


255
00:12:31,552 --> 00:12:33,587
This is also discussed
a little more in the


256
00:12:33,587 --> 00:12:35,556
"Meet the UIKit Button System"
video.


257
00:12:38.859 --> 00:12:41.562 line:-2
In iOS 13,
we introduced SF Symbols â€”


258
00:12:41.562 --> 00:12:44.431 line:-2
hundreds of scalable
symbols that look great


259
00:12:44.431 --> 00:12:47.267 line:-1
next to our San Francisco fonts.


260
00:12:47.267 --> 00:12:49.870 line:-2
In iOS 15,
these get even better.


261
00:12:49.870 --> 00:12:52.306 line:-2
Not only are there additional
symbols, but we've added


262
00:12:52.306 --> 00:12:55.075 line:-2
the ability to use colors
in three new ways:


263
00:12:55.075 --> 00:12:59.179 line:-2
Hierarchical, Palette,
and Multicolor.


264
00:12:59.179 --> 00:13:02.149 line:-2
Monochrome symbols are
the single-color tintable images


265
00:13:02.149 --> 00:13:04.518 line:-1
you already know and love.


266
00:13:04.518 --> 00:13:06.653 line:-2
Hierarchical symbols
apply a single


267
00:13:06.653 --> 00:13:11.525 line:-2
runtime-specified tint color
to a hierarchy of layers.


268
00:13:11.525 --> 00:13:13.393 line:-2
Palette symbols
allow multiple colors


269
00:13:13.393 --> 00:13:16.230 line:-1
to be explicitly specified.


270
00:13:16.230 --> 00:13:17.664 line:-1
And Multicolor symbols,


271
00:13:17.664 --> 00:13:20.734 line:-2
previously available
only in AppKit and SwiftUI,


272
00:13:20.734 --> 00:13:23.036 line:-2
have a fixed
multicolor representation.


273
00:13:24.571 --> 00:13:27.107 line:-2
New APIs for using all
these colorful modes


274
00:13:27.107 --> 00:13:30.310 line:-2
are available in UIKit,
SwiftUI, and AppKit.


275
00:13:32.179 --> 00:13:34.748 line:-1
The APIs are really easy to use.


276
00:13:34.781 --> 00:13:37.618 line:-2
This code sets
up a UIImageSymbolConfiguration


277
00:13:37.651 --> 00:13:41.922 line:-2
to use the system orange color
as a basis for hierarchical tinting,


278
00:13:41.955 --> 00:13:45.559 line:-2
and then uses that to create
this image of a hierarchically tinted


279
00:13:45.592 --> 00:13:46.994 line:-1
orange sun symbol.


280
00:13:49.196 --> 00:13:51.398 line:-1
If you regularly use SFSymbols,


281
00:13:51.431 --> 00:13:54.034 line:-2
you know they come
in a few style variants.


282
00:13:54.067 --> 00:13:57.804 line:-2
For example, filled,
on circles or on rectangles.


283
00:13:58.972 --> 00:14:04.044 line:-2
In previous releases, these
are selected by specifying dotted strings.


284
00:14:04.077 --> 00:14:07.080 line:-1
In iOS 15, there is a new UIImage API


285
00:14:07.114 --> 00:14:09.816 line:-2
that makes working with these variants
super easy,


286
00:14:09.850 --> 00:14:11.852 line:-2
whether you want
to specify the type up-front,


287
00:14:11.885 --> 00:14:15.289 line:-2
or to generate
a variant of an existing image.


288
00:14:15.322 --> 00:14:17.391 line:-2
This is the symbol
represented by the "heart" string,


289
00:14:17.424 --> 00:14:20.227 line:-2
and two of its variants,
which can now be selected in code.


290
00:14:21,628 --> 00:14:25,832
There are lots of videos about all aspects
of SF Symbols in the "Design and build


291
00:14:25,866 --> 00:14:29,736
SF Symbols" collection,
and I encourage you to check them all out.


292
00:14:30,804 --> 00:14:35,776
There's more on the UIKit API specifically
in "SF Symbols in UIKit and AppKit."


293
00:14:38,912 --> 00:14:42,249
UIContentSizeCategory traits
represent the system text


294
00:14:42.282 --> 00:14:46.520 line:-2
size setting, also called
the dynamic type size, in code.


295
00:14:46.553 --> 00:14:50.190 line:-2
You can set your labels, textfields,
textviews, and image views â€”


296
00:14:50.224 --> 00:14:53.927 line:-2
perhaps containing SFSymbols â€”
to automatically adjust to the setting.


297
00:14:54.895 --> 00:14:57.598 line:-2
In iOS 15,
we've added a new way to restrict


298
00:14:57.631 --> 00:15:00.033 line:-2
how the traits
are applied to view hierarchies.


299
00:15:00.067 --> 00:15:04.605 line:-2
This enables you to easily set
a floor or ceiling for the size.


300
00:15:04.638 --> 00:15:06.607 line:-2
This can be a great help when
you're making sure


301
00:15:06.640 --> 00:15:10.711 line:-2
your app's text and images look great
at every text size setting.


302
00:15:10.744 --> 00:15:14.114 line:-2
Here, Clock is limiting how
small its large time labels get.


303
00:15:15.382 --> 00:15:19.753 line:-2
Please do not use this API
to unduly limit text size.


304
00:15:19.786 --> 00:15:22.289 line:-2
These settings serve
an extremely important function,


305
00:15:22.322 --> 00:15:25.792 line:-2
and it's paramount that your app's
functionality is all available,


306
00:15:25.826 --> 00:15:30.230 line:-2
and everything is legible, to people
using the highest text size setting.


307
00:15:30.264 --> 00:15:32.766 line:-2
So as another example,
you might use this to limit


308
00:15:32.799 --> 00:15:36.103 line:-2
the growth of a headline that's
already very large at the default size.


309
00:15:38,472 --> 00:15:42,509
We've unified the system colors
across all of our platforms.


310
00:15:42,543 --> 00:15:44,044
What does this mean for UIKit?


311
00:15:44,077 --> 00:15:46,613
Well, there are some subtle
changes to some of the colors,


312
00:15:46,647 --> 00:15:49,850
and some colors previously
only available in other frameworks


313
00:15:49,883 --> 00:15:53,787
are now also available in UIKit
wherever your app is running.


314
00:15:53,820 --> 00:15:55,822
So if you've
been itching to use systemMint


315
00:15:55,856 --> 00:15:59,159
or systemBrown in your UIKit app,
now is the time.


316
00:16:00.194 --> 00:16:03.397 line:-1
Also new is UIColor.tintColor.


317
00:16:03.430 --> 00:16:06.633 line:-2
It's a color that's resolved at runtime,
based on the app


318
00:16:06.667 --> 00:16:09.770 line:-1
or trait hierarchy's current tint color.


319
00:16:09.803 --> 00:16:13.006 line:-2
It's perfect for using with the new
UIButton.Configuration,


320
00:16:13.040 --> 00:16:16.076 line:-1
and the new colorful SF Symbols APIs.


321
00:16:17.344 --> 00:16:19.947 line:-2
Along with UIColor,
there are also enhancements


322
00:16:19.980 --> 00:16:22.649 line:-1
to the UIColorPicker ViewController,


323
00:16:22.683 --> 00:16:26.420 line:-2
the standard interface
for mixing and picking colors.


324
00:16:26.453 --> 00:16:29.389 line:-1
In iOS 14.5, there's a new callback,


325
00:16:29.423 --> 00:16:32.993 line:-2
colorPickerViewController(didSelect:continuously:),


326
00:16:33.026 --> 00:16:36.964 line:-2
that allows app UI to be updated
as the color is mixed and changed,


327
00:16:36.997 --> 00:16:39.900 line:-1
as well as when the picking is complete.


328
00:16:39.933 --> 00:16:43.937 line:-2
TextKit 2 is the new,
next-generation text layout system


329
00:16:43.971 --> 00:16:48.642 line:-2
available in iOS,
iPadOS, tvOS, and macOS.


330
00:16:48.675 --> 00:16:50.911 line:-2
It's a powerful new system
that makes it easier


331
00:16:50.944 --> 00:16:53.080 line:-2
to express what you want to do
with text,


332
00:16:53.113 --> 00:16:56.817 line:-2
and it does it in a fast,
high performance way.


333
00:16:56.850 --> 00:17:00.521 line:-2
UIKit has adopted it behind the scenes
to power UITextField,


334
00:17:00.554 --> 00:17:02.222 line:-2
where it brings
better layout to text


335
00:17:02.256 --> 00:17:05.259 line:-2
in languages with complex scripts,
like Kannada


336
00:17:05.292 --> 00:17:06.760 line:-1
with no adoption required.


337
00:17:08.061 --> 00:17:11.198 line:-2
If you want to know more about TextKit 2,
what it can do,


338
00:17:11,231 --> 00:17:15,135
and how to use it in your apps,
watch "Meet TextKit 2."


339
00:17:16.503 --> 00:17:20.974 line:-2
A UISceneSession represents
an instance of your application's UI,


340
00:17:21.008 --> 00:17:25.879 line:-2
and corresponds to an app window
represented in the app switcher.


341
00:17:25.913 --> 00:17:30.417 line:-2
Interface state is represented
by an NSUserActivity.


342
00:17:30.450 --> 00:17:33.620 line:-2
Your app provides this
NSUserActivity to the system


343
00:17:33.654 --> 00:17:35.589 line:-1
when a scene enters the background,


344
00:17:35.622 --> 00:17:37.724 line:-2
and should use it to restore
the interface state


345
00:17:37.758 --> 00:17:40.394 line:-1
when the scene is reinstantiated.


346
00:17:40.427 --> 00:17:44.898 line:-2
In iPadOS 15, there are a few new
APIs to make this easier.


347
00:17:44.932 --> 00:17:46.733 line:-1
There's a new way to get and set


348
00:17:46.767 --> 00:17:49.970 line:-2
the transient state
of our text input views.


349
00:17:50.003 --> 00:17:52.372 line:-2
There's a new UIScene
callback that provides


350
00:17:52.406 --> 00:17:56.577 line:-2
a more convenient place to restore
state after a storyboard loads.


351
00:17:56.610 --> 00:17:59.613 line:-2
And there's an opportunity
to extend the app launch process


352
00:17:59.646 --> 00:18:02.082 line:-2
and delay when your app's UI
becomes active


353
00:18:02.115 --> 00:18:05.352 line:-2
if you have asynchronous
model code that returns state.


354
00:18:05.385 --> 00:18:09.389 line:-2
All our engineering efforts
are focused on the UIScene-based APIs.


355
00:18:09.423 --> 00:18:12.893 line:-2
If you're still using the old
UIApplication-based lifecycle


356
00:18:12.926 --> 00:18:16.196 line:-2
from before UIScene was introduced
in iPadOS 13,


357
00:18:16.230 --> 00:18:19.366 line:-1
now is the time to switch to UIScene.


358
00:18:19.399 --> 00:18:23.303 line:-2
All UIKit apps can use it. Supporting
multiple windows is not required,


359
00:18:23.337 --> 00:18:26.306 line:-2
although, for iPad and Mac apps,
it is a great idea.


360
00:18:27,774 --> 00:18:30,744
For a refresher on UIScene,
and more details on the enhanced


361
00:18:30,777 --> 00:18:35,482
state restoration APIs, watch
"Take your iPad apps to the next level."


362
00:18:35.516 --> 00:18:38.619 line:-2
Speaking of scenes,
in UIKit in iOS 15,


363
00:18:38.652 --> 00:18:41.421 line:-2
there are new APIs
that allow apps to represent


364
00:18:41.455 --> 00:18:46.360 line:-2
the currently sharable content that's
being interacted with in each scene.


365
00:18:46.393 --> 00:18:49.830 line:-2
They're used by the new Siri "Share
This" feature on iOS and Mac,


366
00:18:49.863 --> 00:18:53.267 line:-2
and by the
NSSharingServicePickerToolbarItem


367
00:18:53.300 --> 00:18:56.036 line:-1
on Mac Catalyst.


368
00:18:56,069 --> 00:18:59,973
There are a lot more details in the
"Design great actions for Shortcuts,


369
00:19:00,007 --> 00:19:01,642
Siri, and Suggestions,"


370
00:19:01,675 --> 00:19:05,479
and "Qualities of a great
Mac Catalyst app" videos.


371
00:19:06.513 --> 00:19:09.583 line:-2
For our last API enhancements,
we'll return to our dear friends,


372
00:19:09.616 --> 00:19:12.986 line:-1
UICollectionView and UITableView.


373
00:19:13.020 --> 00:19:16.623 line:-2
In iOS 14, we introduced new
APIs to allow you to configure


374
00:19:16.657 --> 00:19:21.295 line:-2
the look and feel of cells much more
easily and consistently than in the past.


375
00:19:22.629 --> 00:19:25.899 line:-2
In iOS 15, new
closure-based update handlers


376
00:19:25.933 --> 00:19:28.602 line:-2
make it easier than ever
to reconfigure your cells.


377
00:19:30.504 --> 00:19:33.640 line:-2
No longer do you need to create
a cell subclass and override


378
00:19:33.674 --> 00:19:35.742 line:-1
updateConfiguration using state.


379
00:19:35.776 --> 00:19:37.744 line:-2
You can now write
that code inline,


380
00:19:37.778 --> 00:19:40.547 line:-1
in the same place you create the cells.


381
00:19:40.581 --> 00:19:44.885 line:-2
Here, we're greying out our text
when the cell is disabled.


382
00:19:44.918 --> 00:19:47.354 line:-2
Similar closure-based functions
are available in


383
00:19:47.387 --> 00:19:50.557 line:-1
the new UIButtonConfiguration APIs too.


384
00:19:51.625 --> 00:19:54.695 line:-2
We've improved diffable data
source to make it easier to update


385
00:19:54.728 --> 00:19:56.864 line:-1
your collection and table views.


386
00:19:56.897 --> 00:20:00.801 line:-2
In iOS 15, when you apply a snapshot
without animating differences,


387
00:20:00.834 --> 00:20:06.273 line:-2
the UI updates based on those changes
without discarding all the existing cells.


388
00:20:06.306 --> 00:20:09.142 line:-2
And there's new API
to efficiently reconfigure items,


389
00:20:09.176 --> 00:20:12.212 line:-2
so you can update the content
displayed in existing cells


390
00:20:12.246 --> 00:20:15.549 line:-2
when the properties of items change
without their identity changing.


391
00:20:17.417 --> 00:20:21.054 line:-2
Every device that UIKit runs
on has multiple processor cores,


392
00:20:21.088 --> 00:20:23.657 line:-1
and powerful graphics hardware.


393
00:20:23.690 --> 00:20:28.695 line:-2
Things should happen fast. Animations
and scrolling should always be smooth.


394
00:20:28.729 --> 00:20:32.165 line:-2
In iOS 15, there are a few enhancements
and new APIs


395
00:20:32.199 --> 00:20:36.270 line:-2
that make buildings apps
with these characteristics even easier.


396
00:20:36.303 --> 00:20:39.273 line:-2
Let's talk about a few of the ones
that are available in UIKit.


397
00:20:40.140 --> 00:20:44.244 line:-2
First, we'll return
to UICollectionView and UITableView.


398
00:20:44.278 --> 00:20:48.015 line:-2
iOS 15 introduces
changes to cell prefetching.


399
00:20:48.048 --> 00:20:52.719 line:-2
These changes automatically
take effect when you build for iOS 15.


400
00:20:52.753 --> 00:20:55.088 line:-2
They can give apps up to twice
the amount of time â€”


401
00:20:55.122 --> 00:20:56.924 line:-1
almost two visual frame's worth â€”


402
00:20:56.957 --> 00:21:00.194 line:-2
to prepare cells
while keeping scrolling perfectly smooth.


403
00:21:01.328 --> 00:21:03.330 line:-1
Many cells show images.


404
00:21:03.363 --> 00:21:06.700 line:-2
In the past, you might have noticed
momentary interruptions in scrolling


405
00:21:06.733 --> 00:21:10.070 line:-2
when the main UI queue is tied up
decoding large images.


406
00:21:11.471 --> 00:21:15.609 line:-2
In iOS 15, app code can take
more control over this process.


407
00:21:15.642 --> 00:21:19.780 line:-2
There are new easy functions to prepare
images so they're completely ready


408
00:21:19.813 --> 00:21:21.648 line:-1
when your app needs to display them.


409
00:21:21.682 --> 00:21:24.251 line:-2
And these functions are easy to use
asynchronously,


410
00:21:24.284 --> 00:21:28.689 line:-2
so the UI queue can be free to process
events while the images are being decoded.


411
00:21:30.657 --> 00:21:35.128 line:-2
Many apps handle large images,
but display them at small sizes.


412
00:21:35.162 --> 00:21:38.131 line:-2
To help with this,
there are new UIImage APIs


413
00:21:38.165 --> 00:21:41.034 line:-2
that resize images more efficiently â€”
and save memory â€”


414
00:21:41.068 --> 00:21:44.671 line:-2
by using the system's knowledge
about the images and the display.


415
00:21:46,073 --> 00:21:49,910
For more details of these collection view
and image improvements, information about


416
00:21:49,943 --> 00:21:53,480
how you can take advantage them,
and some other great performance tips,


417
00:21:53,514 --> 00:21:56,884
check out "Make blazing fast
lists and collection views."


418
00:21:58,218 --> 00:22:00,087
Swift has introduced new features


419
00:22:00,120 --> 00:22:03,924
that make writing asynchronous code
easier than ever.


420
00:22:03,957 --> 00:22:07,461
Most UIKit APIs must be
called on the main UI queue,


421
00:22:07,494 --> 00:22:10,664
and we've annotated those APIs
as Main Actor to ensure


422
00:22:10,697 --> 00:22:14,768
that this is enforced,
for the first time, at compile time.


423
00:22:14,801 --> 00:22:18,238
In other areas,
like the new UIImage preparation features,


424
00:22:18,272 --> 00:22:22,242
we've tweaked our APIs to ensure
that UIKit is easy and safe to use


425
00:22:22,276 --> 00:22:25,779
with the new asynchronous
Swift language features.


426
00:22:25,812 --> 00:22:30,551
Check out "Meet async/await in Swift"
and "Meet AsyncSequence"


427
00:22:30,584 --> 00:22:33,620
to get going with this new way
of developing asynchronous code.


428
00:22:34.821 --> 00:22:37.858 line:-1
Now, security and privacy.


429
00:22:37.891 --> 00:22:41.328 line:-2
We've built some new technology
into iOS 15 that allows the system


430
00:22:41.361 --> 00:22:44.498 line:-2
to verify what interface is
really being interacted with.


431
00:22:45.566 --> 00:22:48.468 line:-2
We've integrated
this into UIKit in a few places,


432
00:22:48.502 --> 00:22:51.839 line:-2
and here, I'm going to talk
about three that might affect your app.


433
00:22:53,574 --> 00:22:56,243
First, the Location Button.


434
00:22:56,276 --> 00:23:02,349
OS 15 introduces a new APIs allow apps
to embed buttons that grant case-by-case,


435
00:23:02,382 --> 00:23:06,520
one-time access to the device's
current location.


436
00:23:06,553 --> 00:23:09,790
They do this when, and only when,
they are tapped on


437
00:23:09,823 --> 00:23:11,892
without lots of alerts or prompts.


438
00:23:12,926 --> 00:23:16,496
The API is flexible, so it can match
every app's look,


439
00:23:16,530 --> 00:23:19,766
but behind the scenes, it ensures buttons
are always clear and legible,


440
00:23:19,800 --> 00:23:22,236
or they won't work.


441
00:23:22,269 --> 00:23:25,672
There's a whole video discussing
how to embed this into any app,


442
00:23:25,706 --> 00:23:27,608
"Meet the Location Button"


443
00:23:30.978 --> 00:23:34.948 line:-2
I'm sure you've
noticed this banner, introduced in iOS 14.


444
00:23:34.982 --> 00:23:37.651 line:-2
It's shown when
an app access data that's been copied


445
00:23:37.684 --> 00:23:40.053 line:-2
onto the pasteboard
in a different app.


446
00:23:41.755 --> 00:23:46.493 line:-2
In iOS 15, we're eliminating the banner
any time the system can confirm


447
00:23:46.527 --> 00:23:49.496 line:-2
that the data was accessed
after deliberate interaction


448
00:23:49.530 --> 00:23:52.099 line:-2
with a standard
system paste interface.


449
00:23:52.132 --> 00:23:55.302 line:-2
For example, a tap on the paste button
in the editing menu,


450
00:23:55.335 --> 00:23:57.671 line:-1
or a Cmd-V on a hardware keyboard.


451
00:23:59.540 --> 00:24:03.710 line:-2
We've also added API to provide
few new standard Paste menu items.


452
00:24:04.611 --> 00:24:08.949 line:-2
When these are used, the notification
banner is also not displayed.


453
00:24:08.982 --> 00:24:12.719 line:-2
We provide new ways to specify "Paste,"
"Paste and Go,"


454
00:24:12.753 --> 00:24:16.190 line:-2
"Paste and Search,"
and "Paste and Match Style."


455
00:24:16.223 --> 00:24:19.660 line:-2
For each of these, there are standard
UIResponder selectors â€”


456
00:24:19.693 --> 00:24:22.796 line:-2
for use with UIMenuController
and UICommand â€”


457
00:24:22.829 --> 00:24:25.365 line:-2
and new identifiers â€”
for use with UIAction.


458
00:24:26.533 --> 00:24:28.635 line:-2
Sometimes an app
wants more information


459
00:24:28.669 --> 00:24:33.006 line:-2
about what's on the pasteboard,
but doesn't need full access.


460
00:24:33.040 --> 00:24:37.911 line:-2
In iOS 14, we introduced an API that apps
can use to check if there is a number,


461
00:24:37.945 --> 00:24:42.182 line:-2
probable web URL, or probable
web search term on the pasteboard.


462
00:24:42.216 --> 00:24:44.718 line:-2
And we use these ourselves
in Calculator and Safari.


463
00:24:45.719 --> 00:24:49.089 line:-2
In iOS 15,
this API has been greatly expanded


464
00:24:49.122 --> 00:24:52.492 line:-2
to cover all
the standard Data Detectors types.


465
00:24:52.526 --> 00:24:55.495 line:-2
None of these will show the notice,
because they don't grant access


466
00:24:55.529 --> 00:24:57.898 line:-1
to the data itself.


467
00:24:57.931 --> 00:25:01.368 line:-2
There are also APIs to retrieve
the data values without having to parse


468
00:25:01.401 --> 00:25:07.140 line:-2
the text yourself, although if these APIs
used at any time other than after the use


469
00:25:07.174 --> 00:25:11.478 line:-2
of a standard paste interface,
the system will show the paste notice.


470
00:25:13.213 --> 00:25:18.185 line:-2
Our last privacy enhancement was new
in iOS 14.5, and built on an early version


471
00:25:18.218 --> 00:25:22.422 line:-2
of the technology that powers
the location and paste interfaces.


472
00:25:22.456 --> 00:25:26.793 line:-2
UIEventAttribution was developed
in conjunction with the WebKit team.


473
00:25:26.827 --> 00:25:31.798 line:-2
WebKit's Private Click Measurement feature
provides Web-to-Web Click Measurement.


474
00:25:31.832 --> 00:25:37.304 line:-2
UIEventAttribution brings PCM to UIKit,
and provides App-to-Web Click Measurement.


475
00:25:37.337 --> 00:25:41.375 line:-2
This means privacy-preserving
measurement of ad clicks and taps.


476
00:25:41.408 --> 00:25:46.013 line:-2
It's easy to use â€” just cover your ads
with UIEventAttributionViews,


477
00:25:46.046 --> 00:25:48.482 line:-1
and pass a UIEventAttribution object


478
00:25:48.515 --> 00:25:51.552 line:-2
along with any URLs you open
in response to ad taps.


479
00:25:53,387 --> 00:25:58,425
To learn more about this, see the "Meet
privacy-preserving ad attribution" video.


480
00:25:58,458 --> 00:26:01,628
There's also a great WebKit.org
blog post entitled


481
00:26:01,662 --> 00:26:03,997
"Introducing Private Click Measurement."


482
00:26:04.965 --> 00:26:09.436 line:-2
Well, that was quite a whirlwind, and we
didn't even cover everything that's new.


483
00:26:09.469 --> 00:26:11.238 line:-1
What's next?


484
00:26:11.271 --> 00:26:16.143 line:-2
Please go and compile
your app using the iOS 15 SDK.


485
00:26:16.176 --> 00:26:21.748 line:-2
Test out new features like Drag and Drop
on iPhone and our enhanced system colors.


486
00:26:21.782 --> 00:26:25.285 line:-2
Adopt the new
iOS 15 look with new buttons,


487
00:26:25.319 --> 00:26:28.355 line:-1
bars, lists and symbols.


488
00:26:28.388 --> 00:26:31.592 line:-2
Adopt our new iPad features
for better multitasking,


489
00:26:31.625 --> 00:26:34.194 line:-1
keyboard, and trackpad support.


490
00:26:34.228 --> 00:26:38.298 line:-2
And use the new UIKit APIs
to respect user privacy,


491
00:26:38.332 --> 00:26:42.436 line:-2
and make even better,
even faster apps, even more easily.


492
00:26:42.469 --> 00:26:43.470 line:-1
Thank you.

