2
00:00:02.369 --> 00:00:09.009 line:-1
[music]


3
00:00:09.042 --> 00:00:09.877 line:-1
[Eryn] Hi.


4
00:00:09.910 --> 00:00:11.445 line:-1
I'm Eryn Wells, an engineer


5
00:00:11.478 --> 00:00:14.081 line:-2
on the Authentication
Experience Team.


6
00:00:14.114 --> 00:00:17.484 line:-2
If your app or website ever asks
someone for a password,


7
00:00:17.518 --> 00:00:19.186 line:-2
then you know
that account security


8
00:00:19.219 --> 00:00:20.888 line:-1
is critically important.


9
00:00:20.921 --> 00:00:22.990 line:-2
In this video,
I'm gonna talk about


10
00:00:23.023 --> 00:00:26.093 line:-2
how to keep your customer's
accounts more secure


11
00:00:26.126 --> 00:00:28.862 line:-2
and how to make signing in
with verification codes


12
00:00:28.896 --> 00:00:31.532 line:-2
even easier with the new
verification code generator


13
00:00:31.565 --> 00:00:33.400 line:-1
built into iCloud Keychain.


14
00:00:33.967 --> 00:00:35.435 line:-1
This is a big topic,


15
00:00:35.469 --> 00:00:39.439 line:-2
and I'm gonna break it down
into three important parts.


16
00:00:39.473 --> 00:00:42.009 line:-2
First, we'll talk
about passwords,


17
00:00:42.042 --> 00:00:44.111 line:-2
some of the security problems
they have,


18
00:00:44.144 --> 00:00:46.346 line:-1
and how multistep authentication


19
00:00:46.380 --> 00:00:49.716 line:-2
helps address
some of those problems.


20
00:00:49.750 --> 00:00:50.617 line:-1
Second,


21
00:00:50.651 --> 00:00:53.854 line:-2
I'll talk about time-based
verification codes,


22
00:00:53.887 --> 00:00:55.989 line:-2
including
a brand-new authenticator


23
00:00:56.023 --> 00:00:57.791 line:-1
we've built into iCloud Keychain


24
00:00:57.824 --> 00:01:02.029 line:-1
in iOS 15 and macOS Monterey.


25
00:01:02.062 --> 00:01:04.331 line:-1
Finally, I'll take a step back


26
00:01:04.364 --> 00:01:06.400 line:-2
to discuss the beginning
of a big change


27
00:01:06.433 --> 00:01:08.969 line:-2
happening in the world
of authentication,


28
00:01:09.002 --> 00:01:10.904 line:-2
as well as
some other opportunities


29
00:01:10.938 --> 00:01:14.942 line:-2
to improve how people sign in
with verification codes.


30
00:01:16.777 --> 00:01:21.014 line:-2
OK, let's talk about passwords
and multistep authentication.


31
00:01:21.682 --> 00:01:23.517 line:-1
Passwords are everywhere,


32
00:01:23.550 --> 00:01:26.453 line:-2
and people understand
how to use them.


33
00:01:26.486 --> 00:01:27.588 line:-1
However,


34
00:01:27.621 --> 00:01:30.324 line:-2
it turns out they're difficult
to use correctly.


35
00:01:30.357 --> 00:01:33.193 line:-2
In fact,
it's easier to misuse passwords


36
00:01:33.227 --> 00:01:35.095 line:-1
than to use them correctly.


37
00:01:35.128 --> 00:01:37.297 line:-2
People frequently
reuse passwords


38
00:01:37.331 --> 00:01:39.233 line:-1
across multiple websites


39
00:01:39.266 --> 00:01:42.369 line:-2
or choose passwords
that are easy to guess.


40
00:01:42.402 --> 00:01:44.705 line:-2
It's also pretty easy
for an attacker


41
00:01:44.738 --> 00:01:47.541 line:-2
to convince someone
to give up their password.


42
00:01:47.574 --> 00:01:50.377 line:-2
So services are faced
with a dilemma:


43
00:01:50.410 --> 00:01:52.679 line:-2
How do we add security
to our users' accounts


44
00:01:52.713 --> 00:01:54.882 line:-2
while still
making it easy to log in?


45
00:01:56.750 --> 00:02:00.120 line:-2
Many services add steps
to their log-in flows.


46
00:02:00.153 --> 00:02:02.589 line:-2
They ask for additional
pieces of information


47
00:02:02.623 --> 00:02:05.192 line:-1
to confirm someone's identity.


48
00:02:05.225 --> 00:02:07.561 line:-2
Adding steps like this
reduces the chance


49
00:02:07.594 --> 00:02:09.796 line:-2
that an attacker
with someone's password


50
00:02:09.830 --> 00:02:12.733 line:-2
will be able to access
that person's account.


51
00:02:12.766 --> 00:02:16.703 line:-2
It also means the attacker
won't automatically have access


52
00:02:16.737 --> 00:02:18.005 line:-1
to any other accounts


53
00:02:18.038 --> 00:02:21.375 line:-2
where that person used
the same password.


54
00:02:21.408 --> 00:02:24.545 line:-2
Verification codes
are a common additional step.


55
00:02:24.578 --> 00:02:26.146 line:-1
Services ask for these codes


56
00:02:26.180 --> 00:02:28.582 line:-2
after someone has entered
their user name and password.


57
00:02:28.615 --> 00:02:32.519 line:-2
These codes are either delivered
over SMS, email,


58
00:02:32.553 --> 00:02:34.021 line:-1
or a push notification,


59
00:02:34.054 --> 00:02:36.990 line:-2
or they're generated
by an authenticator app


60
00:02:37.024 --> 00:02:38.458 line:-1
on the person's phone


61
00:02:38.492 --> 00:02:40.327 line:-1
or with a hardware key fob.


62
00:02:41.395 --> 00:02:43.263 line:-2
An essential feature
of these codes


63
00:02:43.297 --> 00:02:45.365 line:-1
is that they're single use.


64
00:02:45.399 --> 00:02:48.735 line:-2
Since they're not intended
to be memorized or stored,


65
00:02:48.769 --> 00:02:52.372 line:-2
they're not susceptible to reuse
like passwords are.


66
00:02:52.406 --> 00:02:54.741 line:-2
Verification codes
do still require a human


67
00:02:54.775 --> 00:02:56.076 line:-1
to enter the code, though,


68
00:02:56.109 --> 00:02:57.444 line:-2
so they're still prone
to phishing


69
00:02:57.477 --> 00:02:58.979 line:-2
in the same way
that passwords are.


70
00:02:59.012 --> 00:03:01.548 line:-1
The most common way by far


71
00:03:01.582 --> 00:03:05.152 line:-2
that verification codes
are delivered is with SMS.


72
00:03:05.185 --> 00:03:07.287 line:-2
Almost everyone
who has a cell phone


73
00:03:07.321 --> 00:03:09.056 line:-1
can receive a text message,


74
00:03:09.089 --> 00:03:11.925 line:-2
and people understand
sending and receiving texts.


75
00:03:13.427 --> 00:03:16.663 line:-2
AutoFill made it even easier
to use these codes.


76
00:03:16.697 --> 00:03:20.300 line:-2
Just one tap fills a code
into any text field.


77
00:03:20.334 --> 00:03:22.336 line:-2
But there are still
real problems


78
00:03:22.369 --> 00:03:25.138 line:-2
with verification codes
delivered over SMS.


79
00:03:25.172 --> 00:03:28.175 line:-2
For one thing,
they're not very secure.


80
00:03:28.208 --> 00:03:30.644 line:-2
They're vulnerable to snooping
on carrier networks


81
00:03:30.677 --> 00:03:32.045 line:-1
and SIM-swapping attacks,


82
00:03:32.079 --> 00:03:34.014 line:-2
where an attacker
can receive messages


83
00:03:34.047 --> 00:03:35.315 line:-1
meant for someone else.


84
00:03:37.651 --> 00:03:38.986 line:-1
People tend to take for granted


85
00:03:39.019 --> 00:03:42.022 line:-2
that text messages
will come and go without error,


86
00:03:42.055 --> 00:03:44.391 line:-2
but they do require
network access.


87
00:03:44.424 --> 00:03:48.295 line:-2
So if someone's on an airplane
or away from strong service,


88
00:03:48.328 --> 00:03:51.431 line:-2
it might take a long time
for a message to arrive


89
00:03:51.465 --> 00:03:53.400 line:-1
or it may not arrive at all.


90
00:03:55.435 --> 00:03:56.570 line:-1
Finally,


91
00:03:56.603 --> 00:03:58.472 line:-1
SMS messages have a cost,


92
00:03:58.505 --> 00:04:00.807 line:-1
both to send and to receive.


93
00:04:00.841 --> 00:04:02.910 line:-2
So sending millions
of these messages


94
00:04:02.943 --> 00:04:04.511 line:-1
can really add up.


95
00:04:04.545 --> 00:04:06.914 line:-2
Another way
verification codes are done


96
00:04:06.947 --> 00:04:09.816 line:-2
is with on-device
code generators.


97
00:04:09.850 --> 00:04:13.887 line:-2
The algorithm for doing this
is defined in RFC 6238


98
00:04:13.921 --> 00:04:16.223 line:-2
and is called
"Time-Based One-Time Passwords,"


99
00:04:16.256 --> 00:04:18.625 line:-1
or "TOTP."


100
00:04:18.659 --> 00:04:21.195 line:-1
It takes a secret key and a time


101
00:04:21.228 --> 00:04:23.664 line:-2
and produces
a short numeric code


102
00:04:23.697 --> 00:04:25.899 line:-2
based on
those bits of information.


103
00:04:25.933 --> 00:04:26.800 line:-1
Typically,


104
00:04:26.834 --> 00:04:28.635 line:-2
an authenticator app
or hardware device


105
00:04:28.669 --> 00:04:30.304 line:-1
generates the codes.


106
00:04:30.337 --> 00:04:33.240 line:-2
It doesn't require any
communication with the service.


107
00:04:33.273 --> 00:04:35.709 line:-1
It all happens on the device.


108
00:04:36.176 --> 00:04:40.848 line:-2
This is a huge benefit in terms
of security and user experience.


109
00:04:40.881 --> 00:04:44.017 line:-2
Codes are valid
for a short amount of time,


110
00:04:44.051 --> 00:04:46.453 line:-1
typically 30 seconds or so.


111
00:04:46.486 --> 00:04:48.488 line:-1
And it results in lower costs


112
00:04:48.522 --> 00:04:50.691 line:-1
for both services and customers


113
00:04:50.724 --> 00:04:54.361 line:-2
because no one has to send
or receive SMS messages.


114
00:04:55.762 --> 00:04:57.664 line:-1
The challenge with TOTP


115
00:04:57.698 --> 00:05:00.968 line:-2
is that it tends to be a bit
more complicated to set up.


116
00:05:01.001 --> 00:05:03.570 line:-2
Services have to share
a secret key


117
00:05:03.604 --> 00:05:04.872 line:-1
with their customers,


118
00:05:04.905 --> 00:05:07.274 line:-2
along with several
other parameters,


119
00:05:07.307 --> 00:05:10.677 line:-2
so that the customer's device
can start generating codes.


120
00:05:10.711 --> 00:05:14.248 line:-2
A typical setup process
involves displaying a QR code


121
00:05:14.281 --> 00:05:15.649 line:-1
on one device,


122
00:05:15.682 --> 00:05:18.285 line:-2
downloading an authenticator app
on another device,


123
00:05:18.318 --> 00:05:21.121 line:-2
and then scanning
the QR code with that app.


124
00:05:21.154 --> 00:05:22.623 line:-1
This is a cumbersome process,


125
00:05:22.656 --> 00:05:25.125 line:-2
and it's difficult
to explain to people.


126
00:05:25.158 --> 00:05:28.128 line:-2
Generating codes on-device
is a better experience


127
00:05:28.161 --> 00:05:29.263 line:-1
for everyone,


128
00:05:29.296 --> 00:05:32.866 line:-2
but it does still have
some pesky issues around setup.


129
00:05:32.900 --> 00:05:35.536 line:-2
We took a careful look
at some of those difficulties


130
00:05:35.569 --> 00:05:38.305 line:-2
and developed
a new feature of iCloud Keychain


131
00:05:38.338 --> 00:05:40.574 line:-2
that brings a streamlined
setup experience


132
00:05:40.607 --> 00:05:42.109 line:-1
together with AutoFill


133
00:05:42.142 --> 00:05:44.678 line:-1
into something really fantastic.


134
00:05:45,546 --> 00:05:47,514
New in iOS 15


135
00:05:47,548 --> 00:05:49,116
and macOS Monterey,


136
00:05:49,149 --> 00:05:52,152
we've built time-based
verification code generators


137
00:05:52,186 --> 00:05:54,621
into iCloud Keychain
Password Manager,


138
00:05:54.655 --> 00:05:58.192 line:-2
and I am so excited
to show you how this works.


139
00:05:58.792 --> 00:06:00.460 line:-1
We started with the basics:


140
00:06:00.494 --> 00:06:02.262 line:-1
looking up and copying codes


141
00:06:02.296 --> 00:06:05.599 line:-2
to use on this device
or another device.


142
00:06:05.632 --> 00:06:08.702 line:-2
These are important features
of any authenticator app.


143
00:06:09.369 --> 00:06:13.173 line:-2
But AutoFill
really makes this shine.


144
00:06:13.207 --> 00:06:16.009 line:-2
Just like with codes
delivered over SMS,


145
00:06:16.043 --> 00:06:19.112 line:-2
AutoFill fills
generated verification codes


146
00:06:19.146 --> 00:06:21.181 line:-1
with a single tap.


147
00:06:21.215 --> 00:06:23.450 line:-2
Because codes
are immediately available,


148
00:06:23.483 --> 00:06:25.652 line:-2
your customers get
a more streamlined,


149
00:06:25.686 --> 00:06:27.554 line:-1
reliable sign-in experience,


150
00:06:27.588 --> 00:06:31.024 line:-2
and you get to reduce the costs
of sending SMS messages.


151
00:06:31.892 --> 00:06:34.094 line:-2
One of my favorite parts
of this feature


152
00:06:34.127 --> 00:06:38.198 line:-2
is how easy it can be to set up
a new verification code.


153
00:06:38.232 --> 00:06:40.534 line:-2
When you add
a special link or a button


154
00:06:40.567 --> 00:06:42.269 line:-1
to your TOTP setup pages,


155
00:06:42.302 --> 00:06:45.439 line:-2
someone using iOS 15
or macOS Monterey


156
00:06:45.472 --> 00:06:48.275 line:-2
will be able to set up
a new verification code


157
00:06:48.308 --> 00:06:50.911 line:-2
on the same device
with just a couple taps.


158
00:06:50.944 --> 00:06:53.647 line:-1
It's really, really easy.


159
00:06:54.548 --> 00:06:56.884 line:-2
Finally,
verification codes are synced


160
00:06:56.917 --> 00:06:59.386 line:-2
across all
of a person's devices,


161
00:06:59.419 --> 00:07:02.823 line:-2
and they're securely
backed up with iCloud Keychain.


162
00:07:02.856 --> 00:07:05.025 line:-2
So they don't have
to pull out their iPhone


163
00:07:05.058 --> 00:07:06.360 line:-1
to fill a verification code


164
00:07:06.393 --> 00:07:08.629 line:-2
when they're signing in
to an account on their Mac.


165
00:07:08.662 --> 00:07:11.131 line:-2
This is great
for account recovery too.


166
00:07:11.164 --> 00:07:14.334 line:-2
When verification codes
are safely backed up in iCloud,


167
00:07:14.368 --> 00:07:19.006 line:-2
losing a device no longer means
losing access to accounts.


168
00:07:19.039 --> 00:07:20.841 line:-1
As a reminder,


169
00:07:20.874 --> 00:07:24.678 line:-2
everything in iCloud Keychain
is end-to-end encrypted,


170
00:07:24.711 --> 00:07:27.581 line:-2
so no one except
the owner of the account--


171
00:07:27.614 --> 00:07:29.516 line:-1
not Apple or anyone else--


172
00:07:29.550 --> 00:07:30.784 line:-1
can access them.


173
00:07:33.220 --> 00:07:35.689 line:-2
Devices
with iCloud Keychain enabled


174
00:07:35.722 --> 00:07:40.294 line:-2
are protected by Face ID,
Touch ID, or a passcode.


175
00:07:40.327 --> 00:07:43.497 line:-2
And every Apple device has
the highest level of security


176
00:07:43.530 --> 00:07:45.799 line:-2
supported
by the operating system.


177
00:07:45.832 --> 00:07:47.634 line:-1
So Keychain data is safe,


178
00:07:47,668 --> 00:07:51,205
no matter which device
a person has in the moment.


179
00:07:51,238 --> 00:07:54,007
Apple's Platform Security Guide
describes all of this


180
00:07:54,041 --> 00:07:56,176
and a lot more in great detail.


181
00:07:59.046 --> 00:08:01.215 line:-2
There are a few
easy things you can do


182
00:08:01.248 --> 00:08:04.184 line:-2
to ensure your customers have
the best possible experience


183
00:08:04.218 --> 00:08:06.253 line:-1
setting up and filling codes.


184
00:08:06.286 --> 00:08:08.088 line:-2
For your setup flows,
there are two things,


185
00:08:08.121 --> 00:08:10.557 line:-2
and for your log-in flows,
there's just one.


186
00:08:10.591 --> 00:08:12.960 line:-2
Let's talk a little
about each one.


187
00:08:13.627 --> 00:08:16.129 line:-2
Being able to set up
a new verification code


188
00:08:16.163 --> 00:08:19.233 line:-2
with just a few taps
is a big deal.


189
00:08:19.266 --> 00:08:21.068 line:-2
Hundreds of millions
of iPhone users


190
00:08:21.101 --> 00:08:22.369 line:-1
are going to be able to do this


191
00:08:22.402 --> 00:08:25.372 line:-2
as soon as they update
to iOS 15.


192
00:08:25.405 --> 00:08:26.840 line:-1
You can make it super easy


193
00:08:26.874 --> 00:08:29.409 line:-2
to set up verification codes
on their devices


194
00:08:29.443 --> 00:08:31.378 line:-1
by adding a link or a button


195
00:08:31.411 --> 00:08:33.780 line:-2
that does this
to your setup screens.


196
00:08:35.048 --> 00:08:36.683 line:-2
If you already
have infrastructure


197
00:08:36.717 --> 00:08:39.286 line:-2
to support logging in
with TOTP codes,


198
00:08:39.319 --> 00:08:42.656 line:-2
you might be familiar
with otpauth: URLs.


199
00:08:42.689 --> 00:08:45.926 line:-2
These URLs contain
all of the information required


200
00:08:45.959 --> 00:08:47.594 line:-1
to set up a code generator,


201
00:08:47.628 --> 00:08:52.533 line:-2
including the base32-encoded
secret key,


202
00:08:52.566 --> 00:08:55.636 line:-2
the number of digits
in each code,


203
00:08:55.669 --> 00:08:59.873 line:-2
the period of time
that each code is valid for,


204
00:08:59.907 --> 00:09:01.275 line:-1
and an issuer field


205
00:09:01.308 --> 00:09:03.577 line:-2
that you should set
to your domain name.


206
00:09:03.610 --> 00:09:06.446 line:-2
iCloud Keychain uses this field
to suggest an account


207
00:09:06.480 --> 00:09:08.482 line:-1
to add the verification code to.


208
00:09:09.683 --> 00:09:13.487 line:-2
This is the same URL that
you encode into the QR codes


209
00:09:13.520 --> 00:09:16.990 line:-2
that are a common part
of the TOTP setup process.


210
00:09:17.024 --> 00:09:18.792 line:-1
You can link directly


211
00:09:18.825 --> 00:09:21.195 line:-2
to the iCloud Keychain
Password Manager


212
00:09:21.228 --> 00:09:24.498 line:-2
by prefixing the URL
with "apple-".


213
00:09:25.199 --> 00:09:28.235 line:-2
You can take
this apple otpauth: URL


214
00:09:28.268 --> 00:09:32.072 line:-2
and put it in an anchor tag
on your web page.


215
00:09:32.105 --> 00:09:34.341 line:-2
And in apps,
you have two options.


216
00:09:34.374 --> 00:09:36.777 line:-2
You can create a link
by adding the "link" attribute


217
00:09:36.810 --> 00:09:38.445 line:-1
to an NSAttributedString


218
00:09:38.478 --> 00:09:42.516 line:-2
that you assign to a textView's
attributedString property,


219
00:09:42.549 --> 00:09:46.453 line:-2
or you can open the URL
in response to a button tap


220
00:09:46.486 --> 00:09:49.523 line:-2
with the open API
on the window scene.


221
00:09:49.556 --> 00:09:50.390 line:-1
You can check


222
00:09:50.424 --> 00:09:53.560 line:-2
whether the system can open
apple otpauth: URLs


223
00:09:53.594 --> 00:09:55.295 line:-1
with an availability check.


224
00:09:55.329 --> 00:09:56.997 line:-1
On previous versions of iOS,


225
00:09:57.030 --> 00:10:00.367 line:-2
you should hide setup buttons
and remove setup URLs.


226
00:10:02.102 --> 00:10:04.438 line:-2
The second thing you can do
during setup


227
00:10:04.471 --> 00:10:08.575 line:-2
is to use raster images
like JPGs, PNGs, or GIFs


228
00:10:08.609 --> 00:10:12.546 line:-2
for QR codes intended to be
scanned by other TOTP apps.


229
00:10:12.579 --> 00:10:15.482 line:-2
Safari uses on-device
image analysis


230
00:10:15.516 --> 00:10:16.884 line:-1
to detect QR codes


231
00:10:16.917 --> 00:10:19.086 line:-2
and decode
the information they contain.


232
00:10:19.119 --> 00:10:20.654 line:-1
If Safari determines


233
00:10:20.687 --> 00:10:23.991 line:-2
that the QR code contains
an otpauth: URL,


234
00:10:24.024 --> 00:10:26.426 line:-2
it will offer
to set up the code generator


235
00:10:26.460 --> 00:10:29.663 line:-2
in the context menu
for the QR code image.


236
00:10:30.497 --> 00:10:32.833 line:-2
The last thing to do
concerns text fields


237
00:10:32.866 --> 00:10:35.502 line:-1
for entering generated codes.


238
00:10:35.536 --> 00:10:37.237 line:-1
To ensure that AutoFill knows


239
00:10:37.271 --> 00:10:39.773 line:-2
exactly where to fill
user names, passwords,


240
00:10:39.806 --> 00:10:41.642 line:-1
and verification codes,


241
00:10:41.675 --> 00:10:44.645 line:-2
annotate those text fields
with content types.


242
00:10:44.678 --> 00:10:46.613 line:-1
You can do this in SwiftUI


243
00:10:46.647 --> 00:10:49.383 line:-2
with the textContentType
view modifier,


244
00:10:49.416 --> 00:10:52.319 line:-2
in UIKit with
the textContentType property


245
00:10:52.352 --> 00:10:54.321 line:-1
on UITextFields,


246
00:10:54.354 --> 00:10:56.990 line:-2
in AppKit apps
with the contentType property


247
00:10:57.024 --> 00:10:58.625 line:-1
on NSTextFields,


248
00:10:58.659 --> 00:11:01.862 line:-2
and on the web, you can set
the auto-complete attribute


249
00:11:01.895 --> 00:11:05.165 line:-2
to "one-time-code"
on input elements.


250
00:11:05.199 --> 00:11:07.701 line:-2
So now,
I wanna take a step back.


251
00:11:07.734 --> 00:11:10.470 line:-2
Let's look at the big picture
of authentication


252
00:11:10.504 --> 00:11:11.505 line:-1
and talk a little about


253
00:11:11.538 --> 00:11:14.374 line:-2
how to make your existing
infrastructure more secure.


254
00:11:16.076 --> 00:11:18.912 line:-2
Authentication mechanisms
exist on a spectrum,


255
00:11:18.946 --> 00:11:22.516 line:-2
increasing in strength
and security as you move along.


256
00:11:22.549 --> 00:11:24.751 line:-2
Passwords are
the traditional baseline


257
00:11:24.785 --> 00:11:26.019 line:-1
for the industry,


258
00:11:26.053 --> 00:11:27.487 line:-1
and there are a number of ways


259
00:11:27.521 --> 00:11:31.225 line:-2
that services reinforce
password-based log-in flows.


260
00:11:31.258 --> 00:11:34.261 line:-2
Two of the most common
are Passwords + Codes


261
00:11:34.294 --> 00:11:35.996 line:-1
delivered over SMS


262
00:11:36.029 --> 00:11:39.633 line:-2
and Passwords + Codes
generated with TOTP.


263
00:11:42.002 --> 00:11:44.204 line:-2
An additional decision
services make


264
00:11:44.238 --> 00:11:46.940 line:-2
is whether to use
a federated sign-in provider


265
00:11:46.974 --> 00:11:49.910 line:-2
that delegates the entire
process of authentication


266
00:11:49.943 --> 00:11:51.712 line:-1
to another service.


267
00:11:51.745 --> 00:11:54.047 line:-2
Federated authentication
options are based


268
00:11:54.081 --> 00:11:57.351 line:-2
on all the same mechanisms
as traditional methods


269
00:11:57.384 --> 00:12:00.954 line:-2
but require people to keep track
of fewer passwords.


270
00:12:00.988 --> 00:12:04.491 line:-2
When implemented on robust,
secure infrastructure--


271
00:12:04.525 --> 00:12:06.894 line:-2
as is the case
with Sign in with Apple--


272
00:12:06.927 --> 00:12:08.862 line:-1
they can also be more secure


273
00:12:08.896 --> 00:12:10.931 line:-2
than those traditional
mechanisms.


274
00:12:12.599 --> 00:12:14.368 line:-1
A step beyond any of these


275
00:12:14.401 --> 00:12:16.537 line:-2
is to get rid of passwords
altogether.


276
00:12:16.570 --> 00:12:19.473 line:-2
The WebAuthentication standard,
or "WebAuthn,"


277
00:12:19.506 --> 00:12:21.074 line:-1
does exactly this.


278
00:12:21.108 --> 00:12:22.009 line:-1
Instead,


279
00:12:22.042 --> 00:12:26.547 line:-2
it uses public key cryptography
to keep accounts safe.


280
00:12:26.580 --> 00:12:29.850 line:-2
iOS 15 and macOS Monterey
contain a preview


281
00:12:29.883 --> 00:12:31.351 line:-1
of this technology


282
00:12:31.385 --> 00:12:34.655 line:-2
that offers a usable replacement
for passwords.


283
00:12:34,688 --> 00:12:37,191
My teammate Garrett
has a video about it


284
00:12:37,224 --> 00:12:39,092
that you should definitely
check out.


285
00:12:39.993 --> 00:12:42.296 line:-2
As our whole industry
continues to work


286
00:12:42.329 --> 00:12:44.431 line:-2
on building that future
without passwords,


287
00:12:44.464 --> 00:12:45.899 line:-1
there is still real value


288
00:12:45.933 --> 00:12:47.935 line:-2
in taking steps
to improve the security


289
00:12:47.968 --> 00:12:50.871 line:-2
of the infrastructure
you already have


290
00:12:50.904 --> 00:12:53.373 line:-2
and may continue
to have for a while.


291
00:12:53.407 --> 00:12:57.077 line:-2
Anything you can do to keep
people safer online is good.


292
00:12:59.012 --> 00:13:01.615 line:-2
One step you can take
concerns verification codes


293
00:13:01.648 --> 00:13:03.617 line:-1
delivered over SMS.


294
00:13:03.650 --> 00:13:06.987 line:-2
As you're evaluating adopting
time-based verification codes,


295
00:13:07.020 --> 00:13:09.556 line:-2
you might still need
to send codes with SMS.


296
00:13:11.058 --> 00:13:14.027 line:-1
In iOS 14 and macOS Big Sur,


297
00:13:14.061 --> 00:13:15.963 line:-1
we introduced a simple mechanism


298
00:13:15.996 --> 00:13:19.132 line:-2
for making your SMS codes
more resistant to phishing


299
00:13:19.166 --> 00:13:22.636 line:-2
by adding domain bindings
to your messages.


300
00:13:22.669 --> 00:13:26.340 line:-2
A domain binding is a way
of communicating with AutoFill


301
00:13:26.373 --> 00:13:30.811 line:-2
that the code in this message is
meant for a particular domain.


302
00:13:30.844 --> 00:13:32.546 line:-2
When the code is bound
in this way,


303
00:13:32.579 --> 00:13:34.348 line:-2
AutoFill will only offer
the code


304
00:13:34.381 --> 00:13:36.016 line:-1
if the domain it's bound to


305
00:13:36.049 --> 00:13:38.151 line:-2
matches the domain
of the web page


306
00:13:38.185 --> 00:13:41.588 line:-2
or one of your app's
associated domains.


307
00:13:41.622 --> 00:13:44.258 line:-2
In apps, this works
on the same mechanisms


308
00:13:44.291 --> 00:13:47.361 line:-2
as associated domains
and universal links.


309
00:13:47.394 --> 00:13:49.196 line:-2
So if you've already
configured your apps


310
00:13:49.229 --> 00:13:50.564 line:-1
for those technologies,


311
00:13:50.597 --> 00:13:53.033 line:-2
you're all set
to add domain bindings.


312
00:13:53,600 --> 00:13:56,103
You can learn more about this
in an article we published


313
00:13:56,136 --> 00:14:00,374
about enhancing the security of
SMS codes with domain bindings.


314
00:14:01.408 --> 00:14:03.877 line:-2
Now that you know
all about verification codes,


315
00:14:03.911 --> 00:14:06.246 line:-2
go and do
these two important things.


316
00:14:06.280 --> 00:14:07.181 line:-1
First,


317
00:14:07.214 --> 00:14:09.283 line:-2
adopt time-based
verification codes


318
00:14:09.316 --> 00:14:11.051 line:-1
in your apps and websites.


319
00:14:11.084 --> 00:14:12.419 line:-1
Add support to your back ends,


320
00:14:12.452 --> 00:14:14.188 line:-2
and encourage your customers
to use them


321
00:14:14.221 --> 00:14:16.924 line:-2
instead of getting codes
over SMS.


322
00:14:16.957 --> 00:14:17.958 line:-1
Second,


323
00:14:17.991 --> 00:14:21.295 line:-2
if you are continuing to support
SMS verification codes,


324
00:14:21.328 --> 00:14:23.664 line:-2
add domain bindings
to your messages.


325
00:14:24.431 --> 00:14:25.866 line:-1
Thank you for watching.


326
00:14:25.899 --> 00:14:28.602 line:-1
[music]

