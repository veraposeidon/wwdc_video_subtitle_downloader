2
00:00:01.969 --> 00:00:04.972 line:-1 align:center
[music]


3
00:00:09,476 --> 00:00:15,983 line:-2
[Paul]
[speaking Russian]


4
00:00:16,016 --> 00:00:21,054 line:-2
Hello, my name is Paul Borokhov, and I'm
an engineer on the SwiftUI Mac team.


5
00:00:21.088 --> 00:00:25.158 line:-2 align:center
I will be joined later by my colleague
Kate Kononenko on the Localization team,


6
00:00:25,192 --> 00:00:28,695 line:-2
and we will be talking to you about
how to localize your SwiftUI app.


7
00:00:29.463 --> 00:00:32.799 line:-2 align:center
To illustrate this process,
we will be using the Fruta sample app


8
00:00:32.833 --> 00:00:34.902 line:-1 align:center
that you might have seen before.


9
00:00:34.935 --> 00:00:37.804 line:-2 align:center
This application allows
you to browse a menu of smoothies,


10
00:00:37.838 --> 00:00:40.574 line:-2 align:center
order them, and also look at
the recipes to make them at home.


11
00:00:42.075 --> 00:00:46.246 line:-2 align:center
In this talk, we will be adding a Russian
localization to the app, since that's both


12
00:00:46,280 --> 00:00:50,450 line:-2
my and Kate's first language, and because
it is a good showcase for the different


13
00:00:50.484 --> 00:00:54.388 line:-2 align:center
localization best practices that you will
likely need to use in your own apps.


14
00:00:55.189 --> 00:00:58.058 line:-2 align:center
We'll go over some fundamentals
about how strings are localized


15
00:00:58.091 --> 00:01:02.729 line:-2 align:center
in SwiftUI and how easy it is
to avoid common design pitfalls.


16
00:01:02.763 --> 00:01:06.500 line:-2 align:center
We will discuss techniques
to style and format your strings and data,


17
00:01:06,533 --> 00:01:10,604 line:-2
and cover some improvements
to keyboard shortcuts localization.


18
00:01:10.637 --> 00:01:13.740 line:-2 align:center
Finally, Kate will give a demo
of the improvements we've made


19
00:01:13.774 --> 00:01:17.177 line:-2 align:center
to the localization workflow
in Xcode to make it easier than ever


20
00:01:17,211 --> 00:01:19,813 line:-1
to localize your apps.


21
00:01:19,847 --> 00:01:22,916 line:-2
One of the most critical parts
of localizing your application


22
00:01:22.950 --> 00:01:25.986 line:-2 align:center
is making sure that strings
in various pieces of your UI


23
00:01:26.019 --> 00:01:29.623 line:-2 align:center
are exposed to translators
and render correctly at runtime.


24
00:01:29,656 --> 00:01:33,927 line:-2
SwiftUI makes this easy for you, because
when you use a Text with a string literal,


25
00:01:33.961 --> 00:01:37.931 line:-2 align:center
it automatically performs a localized
string lookup in the main bundle.


26
00:01:37,965 --> 00:01:42,035 align:center
In this example, I have a Done button
that's automatically localized at runtime


27
00:01:42,069 --> 00:01:45,873 line:0
based on the translation
in my Russian strings file.


28
00:01:45.906 --> 00:01:49.810 line:-2 align:center
This also works for string interpolation,
so that you can embed variables into


29
00:01:49,843 --> 00:01:53,447 line:-2
your strings and they are automatically
converted to format specifiers


30
00:01:53,480 --> 00:01:56,383 line:-2
in the exported localizable
strings files and catalog.


31
00:01:56,416 --> 00:02:01,188 align:center
New in Xcode 13, we now infer the format
specifier type automatically


32
00:02:01,221 --> 00:02:05,325 align:center
based on the type of the variable
that is passed into the string.


33
00:02:05,359 --> 00:02:08,962 line:-2
Text accepts additional optional arguments
for table name and bundle,


34
00:02:08.996 --> 00:02:10.764 line:-1 align:center
in case you need more control.


35
00:02:10,797 --> 00:02:14,401 line:-2
In this example, we have placed
all of our ingredient-related strings


36
00:02:14.434 --> 00:02:17.437 line:-2 align:center
into a separate table called
"Ingredients."


37
00:02:17.471 --> 00:02:20.007 line:-2 align:center
Apart from the actual
ingredients of our smoothies,


38
00:02:20,040 --> 00:02:21,542 line:-1
we have also placed two variants


39
00:02:21.575 --> 00:02:24.478 line:-2 align:center
of the word "ingredients"
for two different contexts,


40
00:02:24,511 --> 00:02:28,382 line:-2
in the smoothie view and in
the recipe view, in this strings table.


41
00:02:28.415 --> 00:02:31.385 line:-2 align:center
We did this because Russian
requires these two words to be translated


42
00:02:31,418 --> 00:02:34,454 line:-2
differently based on the context,
as you can see.


43
00:02:34,488 --> 00:02:36,757 line:-2
You can learn more about
how to organize your strings


44
00:02:36,790 --> 00:02:39,927 line:-2
in the "Streamline
your localized strings" talk.


45
00:02:39.960 --> 00:02:45.632 line:-2 align:center
This all works because the first argument
to Text is the LocalizedStringKey type.


46
00:02:45,666 --> 00:02:49,403 line:-2
If you have custom views and methods
that accept string literals,


47
00:02:49.436 --> 00:02:53.106 line:-2 align:center
you can make them localizable
by using this type in place of String.


48
00:02:54.041 --> 00:02:57.644 line:-2 align:center
This way, literals that are passed as
arguments to these views and functions


49
00:02:57,678 --> 00:03:00,714 line:-2
are automatically extracted
during the Xcode localization


50
00:03:00,747 --> 00:03:04,117 line:-2
export process and then loaded
from the bundle at runtime.


51
00:03:05,052 --> 00:03:08,121 line:-2
An alternative approach, which we saw
earlier in the button example,


52
00:03:08.155 --> 00:03:11.358 line:-2 align:center
is to have your views
accept a Text argument instead.


53
00:03:11.391 --> 00:03:15.963 line:-2 align:center
Using LocalizedStringKey also allows
you to preview multiple locales at once


54
00:03:15.996 --> 00:03:19.633 line:-2 align:center
by specifying the locale of the
environment in your preview provider.


55
00:03:19.666 --> 00:03:22.903 line:-2 align:center
If you want to preview all
localized strings, including those


56
00:03:22,936 --> 00:03:26,106 line:-2
loaded with NSLocalizedString,
you can change the language


57
00:03:26,139 --> 00:03:29,243 line:-2
in the scheme editor,
as Kate will show you later.


58
00:03:29.276 --> 00:03:32.880 line:-2 align:center
New in Xcode 13,
exporting your project for localization


59
00:03:32.913 --> 00:03:36.483 line:-2 align:center
can actually build all targets
to find the localizable strings.


60
00:03:36.517 --> 00:03:39.853 line:-2 align:center
What this means in practice is
that Xcode can do a much better job


61
00:03:39.887 --> 00:03:43.624 line:-2 align:center
of finding localizable content
and extracting it for localization.


62
00:03:43,657 --> 00:03:46,527 line:-2
So imagine we had some code
with a multiline string.


63
00:03:47,361 --> 00:03:51,398 line:-2
Because the compiler is now
used in extracting the localized content,


64
00:03:51,431 --> 00:03:54,535 line:-2
this multiline string
literal is parsed correctly.


65
00:03:54,568 --> 00:03:58,038 line:-2
Now, let's take a look at
how SwiftUI makes it easy


66
00:03:58.071 --> 00:04:01.108 line:-2 align:center
for you to build apps
with localization-friendly layouts.


67
00:04:01.141 --> 00:04:04.111 line:-2 align:center
Just like with string lookup,
the default layout behaviors


68
00:04:04,144 --> 00:04:07,548 line:-2
provided by SwiftUI have been
designed with localization in mind,


69
00:04:07.581 --> 00:04:12.452 line:-2 align:center
and in most cases, should not require
any additional effort on your part.


70
00:04:12,486 --> 00:04:16,557 line:-2
For example, when appropriate,
controls with Text will wrap it


71
00:04:16.590 --> 00:04:20.827 line:-2 align:center
so that it does not clip or truncate
in languages with longer labels.


72
00:04:20.861 --> 00:04:24.531 line:-2 align:center
In this case, the smoothie name is wrapped
to a second line in Russian,


73
00:04:24.565 --> 00:04:26.800 line:-1 align:center
because it is longer.


74
00:04:26.834 --> 00:04:29.970 line:-2 align:center
Layouts are automatically flipped
for right-to-left languages, too.


75
00:04:30,003 --> 00:04:33,473 line:-2
You can see in the screenshot that the
table cell layout has been flipped,


76
00:04:33.507 --> 00:04:37.377 line:-2 align:center
and the symbols in the tab bar have been
mirrored when appropriate as well.


77
00:04:37,411 --> 00:04:41,582 line:-2
And even when you have to customize
something to deviate from the defaults,


78
00:04:41,615 --> 00:04:45,519 line:-2
the options we provide guide
you to localization-friendly solutions,


79
00:04:45.552 --> 00:04:49.957 line:-2 align:center
such as providing a leading,
rather than left, alignment in VStacks.


80
00:04:49.990 --> 00:04:53.360 line:-2 align:center
Next, in building your apps,
you might find yourself needing


81
00:04:53,393 --> 00:04:56,563 line:-2
to style the localized Text
that's displayed in your UI.


82
00:04:56.597 --> 00:04:59.099 line:-2 align:center
To make this easier,
we've introduced the ability


83
00:04:59,132 --> 00:05:02,503 line:-2
to style localizable strings
using markdown.


84
00:05:02,536 --> 00:05:06,473 line:-2
This significantly simplifies
applying styling to localized strings


85
00:05:06,507 --> 00:05:08,208 line:-1
and gives your translators the ability


86
00:05:08.242 --> 00:05:11.478 line:-2 align:center
to apply styling that's
sensible for their language.


87
00:05:11,512 --> 00:05:15,082 line:-2
For example, Arabic does not have
the concept of italics,


88
00:05:15.115 --> 00:05:17.784 line:-2 align:center
so even if you use
emphasis in your English strings,


89
00:05:17.818 --> 00:05:20.187 line:-2 align:center
your translator is able to use
a different treatment,


90
00:05:20.220 --> 00:05:22.856 line:-2 align:center
such as strong emphasis,
in their translation.


91
00:05:23,290 --> 00:05:26,426 line:-2
In this case, our Russian translator
was able to apply markup


92
00:05:26.460 --> 00:05:28.662 line:-2 align:center
around the most relevant
words in the string to match


93
00:05:28,695 --> 00:05:31,899 line:-2
the intent of the original
English description.


94
00:05:31.932 --> 00:05:34.735 line:-2 align:center
And while this
support exists in foundation,


95
00:05:34.768 --> 00:05:38.172 line:-2 align:center
SwiftUI makes it particularly
easy for you to take advantage of


96
00:05:38,205 --> 00:05:41,942 line:-2
by simply passing the styled
strings directly to texts for display.


97
00:05:41,975 --> 00:05:44,845 align:center
You can find out more about
styling Text by checking out


98
00:05:44,878 --> 00:05:48,916 line:0
the "What's New in Foundation"
and SwiftUI talks.


99
00:05:48.949 --> 00:05:52.786 line:-2 align:center
Another common scenario you'll
encounter in your apps is the need


100
00:05:52.819 --> 00:05:55.956 line:-2 align:center
to format data in a language
and region-appropriate manner.


101
00:05:55,989 --> 00:05:59,660 line:-2
New formatting APIs that are
easier to use and integrate


102
00:05:59,693 --> 00:06:03,463 line:-2
tightly with Text and TextField
will allow you to accomplish this task.


103
00:06:03,497 --> 00:06:07,568 line:-2
In Fruta, we show the number of calories
in a number of places in the UI.


104
00:06:07.601 --> 00:06:10.137 line:-2 align:center
In the past,
we had to create a measurement formatter


105
00:06:10,170 --> 00:06:14,408 line:-2
in order to display the formatted values,
similar to what's on the slide here.


106
00:06:14,441 --> 00:06:17,945 line:-2
Now, we can specify the format
in a declarative manner


107
00:06:17,978 --> 00:06:20,781 line:-2
directly inline with where
the value is being shown.


108
00:06:20,814 --> 00:06:24,451 line:-2
Not only is this easier to read,
it can also be more performant


109
00:06:24.484 --> 00:06:26.753 line:-1 align:center
than the code on the previous slide.


110
00:06:26,787 --> 00:06:29,923 line:0
You can learn more about
these new formatting APIs


111
00:06:29,957 --> 00:06:31,992 line:0
in the "What's New in Foundation" talk.


112
00:06:32,025 --> 00:06:34,795 line:-2
Finally, let's
consider keyboard shortcuts,


113
00:06:34,828 --> 00:06:37,698 line:-2
which allow novice and power
users alike to accomplish tasks


114
00:06:37.731 --> 00:06:41.635 line:-2 align:center
more quickly,
both on their Macs and their iPads.


115
00:06:41,668 --> 00:06:45,405 line:-2
New in macOS and iPadOS,
any keyboard shortcuts you define


116
00:06:45.439 --> 00:06:48.709 line:-2 align:center
in your SwiftUI app will now
be automatically adjusted


117
00:06:48,742 --> 00:06:52,513 line:-2
so that they can be typed on the user's
currently active keyboard layout.


118
00:06:52.546 --> 00:06:55.415 line:-2 align:center
For example,
if you want to add a smoothie to your list


119
00:06:55,449 --> 00:06:58,919 line:-2
of favorites,
you can type "Command plus" to do so.


120
00:06:58.952 --> 00:07:02.523 line:-2 align:center
This works great on the US layout,
where the combination requires


121
00:07:02,556 --> 00:07:07,060 line:-2
exactly two keypresses,
the Command and plus keys.


122
00:07:07,094 --> 00:07:10,197 line:-2
However, if you're using
a Lithuanian keyboard layout,


123
00:07:10.230 --> 00:07:12.599 line:-1 align:center
reaching the plus key is not so easy.


124
00:07:12.633 --> 00:07:17.538 line:-2 align:center
You must press the backtick key first,
then press "Shift equals."


125
00:07:17.571 --> 00:07:20.507 line:-2 align:center
Worse, this combination is actually
not typeable


126
00:07:20.541 --> 00:07:23.343 line:-1 align:center
while holding down the Command key.


127
00:07:23.377 --> 00:07:28.081 line:-2 align:center
But thanks to the remapping feature
of macOS Monterey and iPadOS 15,


128
00:07:28.115 --> 00:07:30.651 line:-2 align:center
when the Lithuanian keyboard layout
is active,


129
00:07:30,684 --> 00:07:33,086 line:-2
the shortcut is changed to
"Command ž"


130
00:07:33,120 --> 00:07:36,924 line:-2
and our users can add smoothies to their
favorites using keyboard shortcuts


131
00:07:36,957 --> 00:07:40,060 line:-2
no matter which keyboard
layout they are currently using.


132
00:07:40,093 --> 00:07:43,163 line:-2
And here's the best part,
you as the developer don't need


133
00:07:43,197 --> 00:07:45,499 line:-1
to do anything, it just works.


134
00:07:45,532 --> 00:07:48,268 line:-2
And with that,
let me turn it over to Kate,


135
00:07:48.302 --> 00:07:52.539 line:-2 align:center
who will show the improvements we've made
to the localization workflow in Xcode 13,


136
00:07:52,573 --> 00:07:57,177 line:-2
as well as demo some of the best
practices and new APIs I've just covered.


137
00:07:57.211 --> 00:07:58.212 line:-1 align:center
[Kate] Thanks, Paul.


138
00:07:58,245 --> 00:08:01,949 line:-2
Hi, I'm Kate,
an engineer on the Localization team.


139
00:08:01,982 --> 00:08:06,220 line:-2
Let's jump in to see how easy
it is to localize a SwiftUI app.


140
00:08:06.253 --> 00:08:08.789 line:-1 align:center
Here we have the Fruta sample app.


141
00:08:08,822 --> 00:08:13,227 line:-2
We want to make sure that people
all around the world can order smoothies


142
00:08:13,260 --> 00:08:15,162 line:-1
in their native language.


143
00:08:15.195 --> 00:08:18.398 line:-2 align:center
Today, I am going
to add a Russian localization.


144
00:08:18.432 --> 00:08:22.503 line:-2 align:center
So, first, I go to the project
in the project navigator,


145
00:08:22,536 --> 00:08:25,472 line:-2
then choose
"Fruta" in the project editor,


146
00:08:25,506 --> 00:08:29,676 line:-2
and under the Info tab,
I can add a localization.


147
00:08:29,710 --> 00:08:33,514 line:-2
All of the localizations
that macOS ships with are listed here


148
00:08:33.547 --> 00:08:35.415 line:-1 align:center
in alphabetical order.


149
00:08:35,849 --> 00:08:40,821 line:-2
In Xcode 12.5, we added hundreds
of more languages and regional variants


150
00:08:40.854 --> 00:08:44.591 line:-2 align:center
in the "More Languages" submenu
at the bottom of the list.


151
00:08:44,625 --> 00:08:47,528 line:-1
I'll just select "Russian."


152
00:08:47,561 --> 00:08:51,331 line:-2
As Paul mentioned,
Xcode 13 greatly simplifies


153
00:08:51.365 --> 00:08:56.436 line:-2 align:center
string extraction from Swift code by using
new technologies in the Swift compiler.


154
00:08:57.538 --> 00:09:02.809 line:-2 align:center
Fruta is written in SwiftUI, so I want to
make sure that the build setting


155
00:09:02.843 --> 00:09:05.078 line:-1 align:center
"Use Compiler to Extract Swift Strings"


156
00:09:05.112 --> 00:09:07.381 line:-1 align:center
is set to "Yes."


157
00:09:07.414 --> 00:09:10.951 line:-2 align:center
This is enabled by default
for new Swift projects,


158
00:09:10.984 --> 00:09:15.389 line:-2 align:center
but you can opt-in to this setting
if your existing project uses SwiftUI.


159
00:09:15,422 --> 00:09:19,726 line:-2
When I export for localization,
Xcode will build all the targets


160
00:09:19,760 --> 00:09:23,897 line:-2
in my project and use the compiler
type information to extract


161
00:09:23.931 --> 00:09:27.067 line:-1 align:center
LocalizedStringKeys from my SwiftUI code.


162
00:09:27.100 --> 00:09:30.270 line:-2 align:center
Before exporting,
I can use pseudolanguages


163
00:09:30,304 --> 00:09:36,410 line:-2
in SwiftUI Previews to see which strings
are localizable and which I've missed.


164
00:09:36,443 --> 00:09:39,746 line:-1
So, I'll go to the scheme editor,


165
00:09:39.780 --> 00:09:43.951 line:-2 align:center
and under the Options tab,
click App Language.


166
00:09:43,984 --> 00:09:48,889 line:-2
All of the languages that are supported by
my app are listed here at the top,


167
00:09:48.922 --> 00:09:53.660 line:-2 align:center
but I'll go all the way to the bottom
and choose Accented Pseudolanguage.


168
00:09:56,930 --> 00:10:00,200 line:-2
The accented pseudolanguage
adds different accent marks


169
00:10:00.234 --> 00:10:03.036 line:-1 align:center
to my source strings in the UI.


170
00:10:03.070 --> 00:10:07.441 line:-2 align:center
Now, I can see that all
of the ingredients are pseudolocalized.


171
00:10:07.474 --> 00:10:11.745 line:-2 align:center
The measurements are not pseudolocalized
because they are formatted,


172
00:10:11,778 --> 00:10:15,983 line:-2
but the StepperView should
have been pseudolocalized.


173
00:10:16,717 --> 00:10:19,586 line:-1
Let's make this string localizable.


174
00:10:19,620 --> 00:10:24,925 line:-2
StepperView is a custom SwiftUI
view that takes in a "label" string


175
00:10:24,958 --> 00:10:27,594 line:-1
and passes it down to a Text view.


176
00:10:27,628 --> 00:10:30,964 line:-2
In custom SwiftUI
views that require localization,


177
00:10:30.998 --> 00:10:33.800 line:-1 align:center
we need to use LocalizedStringKey.


178
00:10:33.834 --> 00:10:36.203 line:-1 align:center
Let's make sure it's pseudolocalized now.


179
00:10:41.441 --> 00:10:42.476 line:-1 align:center
Great!


180
00:10:42.509 --> 00:10:45.445 line:-2 align:center
Now that this string is localizable,
we need to make sure


181
00:10:45,479 --> 00:10:48,382 line:-1
it handles plurals properly.


182
00:10:48.415 --> 00:10:53.120 line:-2 align:center
This code works for pluralizing "smoothie"
in English, but it's not going to work


183
00:10:53.153 --> 00:10:57.157 line:-2 align:center
for all words and it's not
going to work for all languages.


184
00:10:57,191 --> 00:11:00,360 line:-1
Let's use a stringsdict instead.


185
00:11:00,394 --> 00:11:03,664 line:-2
A stringsdict file can
provide different translations


186
00:11:03.697 --> 00:11:06.800 line:-1 align:center
for a plural variant in a language.


187
00:11:06,834 --> 00:11:10,304 align:center
For more information about how
to use stringsdict, check out


188
00:11:10,337 --> 00:11:12,406 align:center
the "Streamline Your Localized Strings"
video.


189
00:11:14,308 --> 00:11:17,377 line:-1
I have a file prepared right here,


190
00:11:17,411 --> 00:11:20,247 line:-1
so I'll just drag it into my project...


191
00:11:26.053 --> 00:11:28.488 line:-1 align:center
and mark it for localization.


192
00:11:30,524 --> 00:11:33,760 line:-1
Now, let's export for localization.


193
00:11:33.794 --> 00:11:38.232 line:-2 align:center
Starting in Xcode 12.5,
you can export and import


194
00:11:38.265 --> 00:11:43.504 line:-2 align:center
localizations for projects
and workspaces in the Product menu.


195
00:11:43,537 --> 00:11:47,975 line:-2
So I'll just click Export Localizations,
and let's save it to the desktop.


196
00:11:50,210 --> 00:11:55,249 line:-2
Now, Xcode is building my project and will
create an Xcode Localization Catalog


197
00:11:55.282 --> 00:11:59.987 line:-2 align:center
ready to send to Paul, who has
volunteered to translate it to Russian.


198
00:12:00,020 --> 00:12:03,557 align:center
You can learn more about
Xcode Localization Catalogs


199
00:12:03,590 --> 00:12:09,296 align:center
in the "New Localization Workflows
in Xcode 10" talk from WWDC 2018.


200
00:12:10.430 --> 00:12:14.334 line:-2 align:center
Let's double-check what was exported
before sending it out for translation.


201
00:12:15,235 --> 00:12:19,873 line:-2
Starting with Xcode 13,
Xcode Localization Catalogs


202
00:12:19.907 --> 00:12:22.042 line:-1 align:center
are even more convenient to work with.


203
00:12:22.075 --> 00:12:27.648 line:-2 align:center
I can simply double-click on the catalog
in Finder and open it in Xcode.


204
00:12:27.681 --> 00:12:32.252 line:-2 align:center
This is super useful if you're
localizing your own app,


205
00:12:32.286 --> 00:12:36.056 line:-2 align:center
verifying strings or screenshots
before sending content out


206
00:12:36,089 --> 00:12:40,928 line:-2
for localization, or if fixing
translations for specific languages.


207
00:12:42.262 --> 00:12:48.068 line:-2 align:center
Here in the editor, I can see all
of the files that require localization.


208
00:12:48.101 --> 00:12:53.941 line:-2 align:center
When I select a file, I can see all
of the strings as the translator would.


209
00:12:53,974 --> 00:12:59,112 line:-2
The key, the source string,
the translation, and a comment.


210
00:12:59,146 --> 00:13:03,617 line:-2
I'm just going to skim through
here and see if everything looks good.


211
00:13:03.650 --> 00:13:06.987 line:-1 align:center
Right away, I can see a couple of issues.


212
00:13:07.020 --> 00:13:11.658 line:-2 align:center
First, we exported
the "%lf Calories" string.


213
00:13:11.692 --> 00:13:15.062 line:-2 align:center
That string should be formatted
because different regions


214
00:13:15.095 --> 00:13:17.764 line:-2 align:center
use different
units for measuring calories.


215
00:13:17.798 --> 00:13:20.367 line:-2 align:center
I'll need to make
a change in code to fix that.


216
00:13:21,535 --> 00:13:25,539 line:-2
Here in the NutritionFactView
where the string was extracted from,


217
00:13:25.572 --> 00:13:30.577 line:-2 align:center
instead of a string,
I can use the "formatted" method


218
00:13:30,611 --> 00:13:34,581 line:-2
in my Measurement type
on my NutritionFacts struct.


219
00:13:34,615 --> 00:13:38,452 line:-2
I'm going to use wide formatting
and set the usage to "food,"


220
00:13:38,485 --> 00:13:41,054 line:-1
since we're measuring food calories.


221
00:13:41,088 --> 00:13:45,325 line:-2
This will take care of formatting
the units for all regions.


222
00:13:45,359 --> 00:13:47,227 line:-1
That was an easy fix.


223
00:13:47.261 --> 00:13:49.196 line:-1 align:center
Let's go back to reviewing my strings.


224
00:13:53,467 --> 00:13:56,904 line:-2
Ooh, translators
do not see the variable name,


225
00:13:56,937 --> 00:14:01,642 line:-2
so a string like "Buy recipe
for %@" could be confusing.


226
00:14:01.675 --> 00:14:06.680 line:-2 align:center
Am I buying a recipe for a certain price,
or am I gifting it to a friend?


227
00:14:06,713 --> 00:14:09,616 line:-2
Let's see if there are any
other ambiguous strings.


228
00:14:12.186 --> 00:14:14.988 line:-2 align:center
"Favorite" has
a comment saying it's a verb,


229
00:14:15,022 --> 00:14:20,060 line:-2
but I should add a comment to "Favorites"
so it's clear that it's a noun.


230
00:14:20,093 --> 00:14:22,262 line:-2
I'll add comments
in code for both of those.


231
00:14:25,132 --> 00:14:27,734 line:-2
Let's take care of the "Buy
recipe for" string first.


232
00:14:31,638 --> 00:14:33,640 line:-1
There we go.


233
00:14:33,674 --> 00:14:39,713 line:-2
The "Favorites" string is in my tab bar
items, so let's add a comment for it, too.


234
00:14:41.081 --> 00:14:43.417 line:-1 align:center
Tab bar items are Label views.


235
00:14:43.450 --> 00:14:48.689 line:-2 align:center
In SwiftUI, to add comments I need
to initialize a Label with a Text view.


236
00:14:51.892 --> 00:14:55.262 line:-2 align:center
Adding comments like this is
really important for ensuring


237
00:14:55.295 --> 00:14:57.464 line:-1 align:center
high-quality localizations.


238
00:14:57,497 --> 00:15:01,802 line:-2
I don't want my translators to be
confused and have to guess what I meant.


239
00:15:01,835 --> 00:15:05,539 line:-1
Okay, I think I fixed everything.


240
00:15:05.572 --> 00:15:09.476 line:-2 align:center
Time to export a fresh
catalog and send it to Paul.


241
00:15:12.112 --> 00:15:16.617 line:-1 align:center
[email sent, received]


242
00:15:16,650 --> 00:15:18,886 line:-1
Wow, that was fast.


243
00:15:18,919 --> 00:15:22,122 line:-2
Paul is
the Apple Silicon of translators!


244
00:15:22.155 --> 00:15:24.691 line:-2 align:center
Let's take a quick
peek at what he sent back.


245
00:15:27.661 --> 00:15:31.231 line:-1 align:center
Here, I can see all of the translations.


246
00:15:31,265 --> 00:15:35,035 line:-2
There's the stringsdict for the smoothie
stepper that I've added.


247
00:15:36,103 --> 00:15:41,341 line:-2
Looks good. Let's import this
and see how the app looks like in Russian.


248
00:15:41.375 --> 00:15:46.647 line:-2 align:center
To import, I just go to the Product menu,
click Import Localizations,


249
00:15:46,680 --> 00:15:49,049 line:-1
and then choose the Catalog from Paul.


250
00:15:51,251 --> 00:15:53,654 line:-1
All my strings should be localized now.


251
00:15:53,687 --> 00:15:56,456 line:-2
Let's build and run
the app in Russian for macOS.


252
00:15:57,324 --> 00:16:02,062 line:-1
First, I'll change the scheme to macOS,


253
00:16:02.095 --> 00:16:05.566 line:-2 align:center
and then I can
change the language to Russian.


254
00:16:09.236 --> 00:16:11.305 line:-1 align:center
Okay, let's run it.


255
00:16:15,209 --> 00:16:18,412 line:-2
Wow,
the app looks awesome in Russian,


256
00:16:18,445 --> 00:16:21,281 line:-1
and all of the smoothies look delicious.


257
00:16:21,315 --> 00:16:27,621 line:-2
I can see the ingredients and all
of the nutritional value for all of them.


258
00:16:27,654 --> 00:16:30,824 line:-1
I think I actually will order this one.


259
00:16:33,627 --> 00:16:35,529 line:-1
Wow, what a great service.


260
00:16:38,365 --> 00:16:44,505 line:-2
Localization in SwiftUI was designed to be
easy, so you can focus on writing code.


261
00:16:44.538 --> 00:16:49.142 line:-2 align:center
Here are some key points to keep
in mind as you develop your app.


262
00:16:49,176 --> 00:16:52,980 line:-2
LocalizedStringKey is a special
type that signals SwiftUI


263
00:16:53,013 --> 00:16:56,016 line:-2
to look up localized strings
in your bundle.


264
00:16:56,049 --> 00:17:01,421 line:-2
Use it in custom SwiftUI views
to make them ready for localization.


265
00:17:01,455 --> 00:17:05,359 line:-2
Enable the "Use Compiler
to Extract Swift Strings" build setting


266
00:17:05.392 --> 00:17:11.832 line:-2 align:center
to extract LocalizedStringKeys from code
when exporting for localization in Xcode.


267
00:17:11.865 --> 00:17:16.837 line:-2 align:center
Format your strings to internationalize
your code, and style them with Markdown.


268
00:17:17,838 --> 00:17:21,508 line:-2
Use Text to add comments
for additional translation context.


269
00:17:22.776 --> 00:17:25.946 line:-2 align:center
Thanks for watching,
and enjoy the rest of WWDC!


270
00:17:27,314 --> 00:17:28,782 line:-1
[speaking Russian]


271
00:17:28.815 --> 00:17:31.318 line:-1 align:center
[music]

