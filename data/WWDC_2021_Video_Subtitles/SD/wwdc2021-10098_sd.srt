2
00:00:00.000 --> 00:00:02.269 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,269 --> 00:00:05,639 line:-1
♪ Bass music playing ♪


4
00:00:05.639 --> 00:00:07.674 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,674 --> 00:00:09,076 size:2% line:0 align:center
♪


6
00:00:09.076 --> 00:00:10.077 line:-1 position:50%
David Stites: Hi,


7
00:00:10.077 --> 00:00:13.280 line:-1 position:50%
and welcome to "Showcase
app data in Spotlight".


8
00:00:13.280 --> 00:00:14.715 line:-1 position:50%
My name is David Stites,


9
00:00:14,715 --> 00:00:17,451 line:-1
and I am an engineer
on the Core Data team.


10
00:00:17,451 --> 00:00:20,020 line:-1
In this session,
I am excited to show you


11
00:00:20,020 --> 00:00:23,023 line:-1
how to add Spotlight indexing
in your app


12
00:00:23.023 --> 00:00:26.660 line:-1 position:50%
using
NSCoreDataCoreSpotlightDelegate.


13
00:00:26.660 --> 00:00:28.762 line:-1 position:50%
The agenda for this session
is to learn about the


14
00:00:28.762 --> 00:00:31.632 line:-1 position:50%
NSCoreDataCoreSpotlightDelegate
object


15
00:00:31.632 --> 00:00:33.500 line:-1 position:50%
and why you should use it,


16
00:00:33.500 --> 00:00:36.436 line:-1 position:50%
setup a simple implementation,


17
00:00:36,436 --> 00:00:39,406 line:-1
learn how to customize
that implementation,


18
00:00:39.406 --> 00:00:43.911 line:-1 position:50%
and lastly, validate the code
by adding full-text search.


19
00:00:43,911 --> 00:00:48,348 line:-1
First, let's look at
Core Data and Spotlight.


20
00:00:48,348 --> 00:00:50,284 line:-1
People are going
to create and store


21
00:00:50.284 --> 00:00:53.420 line:-1 position:50%
a lot of great and important
content in your app.


22
00:00:53.420 --> 00:00:54.821 line:-1 position:50%
As their use of your app


23
00:00:54,821 --> 00:00:57,691 line:-1
and the size of their
data set increases,


24
00:00:57.691 --> 00:01:00.460 line:-1 position:50%
they're going to want to be able
to quickly find that data


25
00:01:00.460 --> 00:01:03.697 line:-1 position:50%
both inside the app using
standard search methods


26
00:01:03.697 --> 00:01:06.600 line:-1 position:50%
and outside the app,
for example,


27
00:01:06.600 --> 00:01:08.702 line:-1 position:50%
in Spotlight search.


28
00:01:08.702 --> 00:01:11.004 line:-1 position:50%
Wouldn't it be great
to have data inside your app


29
00:01:11,004 --> 00:01:13,440 line:-1
show up in Spotlight?


30
00:01:13.440 --> 00:01:17.110 line:-1 position:50%
Well, this is where Core Data
can help you.


31
00:01:17.110 --> 00:01:19.613 line:-1 position:50%
The NSCoreDataCore
SpotlightDelegate object


32
00:01:19.613 --> 00:01:23.116 line:-1 position:50%
does all the heavy lifting
and provides a set of APIs


33
00:01:23.116 --> 00:01:26.119 line:-1 position:50%
that quickly and efficiently
indexes content


34
00:01:26.119 --> 00:01:27.854 line:-1 position:50%
provided by your app.


35
00:01:27,854 --> 00:01:30,290 line:-1
You just have to turn it on!


36
00:01:30,290 --> 00:01:33,293 line:-1
Once indexed,
search results will also appear


37
00:01:33.293 --> 00:01:38.131 line:-1 position:50%
in the Spotlight search user
interface outside your app.


38
00:01:38,131 --> 00:01:41,301 line:-1
The Spotlight delegate
automatically processes changes


39
00:01:41.301 --> 00:01:43.437 line:-1 position:50%
to your graph's managed objects


40
00:01:43.437 --> 00:01:46.807 line:-1 position:50%
and then updates
the Spotlight index accordingly.


41
00:01:46,807 --> 00:01:50,978 line:-1
In addition, it provides robust
index management capabilities


42
00:01:50,978 --> 00:01:54,514 line:-1
to interact with the private,
on-device-only index


43
00:01:54,514 --> 00:01:58,952 line:-1
and allows you to tailor the
index results to your liking.


44
00:01:58.952 --> 00:02:02.956 line:-1 position:50%
In fact, any content
that is in your persistent store


45
00:02:02.956 --> 00:02:05.826 line:-1 position:50%
is eligible to be indexed.


46
00:02:05.826 --> 00:02:09.429 line:-1 position:50%
The reasons to use the Spotlight
delegate are threefold:


47
00:02:09.429 --> 00:02:13.266 line:-1 position:50%
(1) the Spotlight delegate
maintains feature parity


48
00:02:13.266 --> 00:02:16.403 line:-1 position:50%
with Core Spotlight APIs,


49
00:02:16,403 --> 00:02:21,641 line:-1
(2) it removes a lot of
necessary implementation code,


50
00:02:21.641 --> 00:02:25.545 line:-1 position:50%
and (3) it provides a great
additional feature set


51
00:02:25.545 --> 00:02:29.416 line:-1 position:50%
that we'll be discussing
later in this session.


52
00:02:29,416 --> 00:02:31,251 line:-1
To illustrate my previous point,


53
00:02:31,251 --> 00:02:33,387 line:-1
this is a very simple
implementation


54
00:02:33.387 --> 00:02:37.224 line:-1 position:50%
using the Core Spotlight APIs
that only adds items


55
00:02:37.224 --> 00:02:41.361 line:-1 position:50%
to a search index
and reduces it to... this!


56
00:02:41,361 --> 00:02:43,096 line:-1
Two lines!


57
00:02:43.096 --> 00:02:45.665 line:-1 position:50%
Simple, easy to read
and maintain.


58
00:02:45.665 --> 00:02:49.002 line:-1 position:50%
I mean, come on, who doesn't
prefer less code?


59
00:02:49.002 --> 00:02:53.340 line:-1 position:50%
Let's take a look at how to get
setup and running right away.


60
00:02:53.340 --> 00:02:56.443 line:-1 position:50%
This simple example will cover
deciding what to index


61
00:02:56,443 --> 00:02:58,712 line:-1
and creating the delegate.


62
00:02:58.712 --> 00:03:00.614 line:-1 position:50%
Throughout this session,
I will be referring


63
00:03:00,614 --> 00:03:04,117 line:-1
to an app called Tags
that I wrote for myself,


64
00:03:04.117 --> 00:03:07.287 line:-1 position:50%
which is a simple
photo tagging application.


65
00:03:07.287 --> 00:03:10.223 line:-1 position:50%
This sample app will incorporate
many of the APIs


66
00:03:10,223 --> 00:03:12,993 line:-1
I am discussing today.


67
00:03:12.993 --> 00:03:14.995 line:-1 position:50%
Prior to adding
Spotlight support,


68
00:03:14,995 --> 00:03:17,898 line:-1
you can see that all the tag
and photo data is trapped


69
00:03:17,898 --> 00:03:21,935 line:-1
inside Tags as there are no
Spotlight search query results


70
00:03:21.935 --> 00:03:24.037 line:-1 position:50%
for "Natural Bridges
State Park".


71
00:03:24.037 --> 00:03:25.972 line:-1 position:50%
Let's change that!


72
00:03:25,972 --> 00:03:27,941 line:-1
The first step
in any implementation


73
00:03:27.941 --> 00:03:30.377 line:-1 position:50%
using the
NSCoreDataCoreSpotlightDelegate


74
00:03:30,377 --> 00:03:34,114 line:-1
is to decide what you're going
to index in Spotlight.


75
00:03:34.114 --> 00:03:37.818 line:-1 position:50%
What gets indexed in Spotlight
is completely up to you.


76
00:03:37.818 --> 00:03:40.387 line:-1 position:50%
In Tags, I've decided to index


77
00:03:40.387 --> 00:03:44.257 line:-1 position:50%
the userSpecifiedName
attribute on the entity Photo


78
00:03:44,257 --> 00:03:48,128 line:-1
and the name attribute
on the entity Tag.


79
00:03:48.128 --> 00:03:50.097 line:-1 position:50%
To prepare the model
for indexing,


80
00:03:50.097 --> 00:03:52.766 line:-1 position:50%
I've opened the project's
Core Data model in Xcode,


81
00:03:52.766 --> 00:03:55.469 line:-1 position:50%
selected each attribute
I want to index,


82
00:03:55,469 --> 00:03:58,572 line:-1
and have ticked the
Index in Spotlight checkbox


83
00:03:58,572 --> 00:04:01,908 line:-1
in the attributes inspector.


84
00:04:01,908 --> 00:04:04,878 line:-1
Our work continues
in the Core Data model editor,


85
00:04:04.878 --> 00:04:06.146 line:-1 position:50%
as it's required to set


86
00:04:06.146 --> 00:04:09.683 line:-1 position:50%
the Core Data Spotlight
display name.


87
00:04:09.683 --> 00:04:13.987 line:-1 position:50%
The Core Data Spotlight display
name is an NSExpression.


88
00:04:13.987 --> 00:04:15.355 line:-1 position:50%
At indexing time,


89
00:04:15,355 --> 00:04:18,325 line:-1
this expression is evaluated
with each managed object


90
00:04:18,325 --> 00:04:20,894 line:-1
that has properties
indexed by Spotlight


91
00:04:20.894 --> 00:04:23.029 line:-1 position:50%
and the result is saved.


92
00:04:23,029 --> 00:04:27,400 line:-1
Later, when the Spotlight search
user interface is shown,


93
00:04:27.400 --> 00:04:30.704 line:-1 position:50%
these stored results are used
as the “display name”


94
00:04:30,704 --> 00:04:33,273 line:-1
for the search result.


95
00:04:33.273 --> 00:04:35.275 line:-1 position:50%
What is an NSExpression?


96
00:04:35.275 --> 00:04:39.913 line:-1 position:50%
Well, an expression can be as
simple as evaluating a key path,


97
00:04:39,913 --> 00:04:42,682 line:-1
in this case Tag.name.


98
00:04:42,682 --> 00:04:45,085 line:-1
This object has quite a few
more tricks it can do


99
00:04:45.085 --> 00:04:48.021 line:-1 position:50%
besides evaluating key paths,
however.


100
00:04:48.021 --> 00:04:51.625 line:-1 position:50%
In this example,
it is doing some math for you.


101
00:04:51,625 --> 00:04:54,227 line:-1
The expression can be
even more complex,


102
00:04:54.227 --> 00:04:56.763 line:-1 position:50%
such as calculating
the standard deviation


103
00:04:56.763 --> 00:04:59.999 line:-1 position:50%
of a set of numbers.


104
00:04:59.999 --> 00:05:02.435 line:-1 position:50%
In Tags,
the Spotlight display name


105
00:05:02,435 --> 00:05:06,473 line:-1
is set to userSpecifiedName
on the entity Photo,


106
00:05:06.473 --> 00:05:09.843 line:-1 position:50%
and name on the entity Tag.


107
00:05:09.843 --> 00:05:11.945 line:-1 position:50%
Now that the model
is prepared for indexing,


108
00:05:11,945 --> 00:05:15,815 line:-1
let's create
the Spotlight delegate.


109
00:05:15.815 --> 00:05:19.519 line:-1 position:50%
Beginning in iOS 15
and macOS Monterey,


110
00:05:19,519 --> 00:05:21,755 line:-1
the initializer
forStoreWith: model:


111
00:05:21,755 --> 00:05:24,057 line:-1
is now deprecated.


112
00:05:24,057 --> 00:05:26,259 line:-1
The new way initialize
a Spotlight delegate


113
00:05:26.259 --> 00:05:28.562 line:-1 position:50%
is using forStoreWith:
coordinator:.


114
00:05:28,562 --> 00:05:31,431 line:-1
By adopting the new
designated initializer,


115
00:05:31.431 --> 00:05:33.967 line:-1 position:50%
it is no longer required
to add an instance


116
00:05:33,967 --> 00:05:36,503 line:-1
of the Spotlight delegate
to the store options


117
00:05:36,503 --> 00:05:39,005 line:-1
prior to adding the store
to the coordinator.


118
00:05:39.005 --> 00:05:42.642 line:-1 position:50%
However, you must call
startSpotlightIndexing


119
00:05:42,642 --> 00:05:47,080 line:-1
for the Spotlight delegate
to start its work.


120
00:05:47,080 --> 00:05:48,715 line:-1
I want to call out
a couple requirements


121
00:05:48.715 --> 00:05:52.385 line:-1 position:50%
to using the
NSCoreDataCoreSpotlightDelegate.


122
00:05:52.385 --> 00:05:56.389 line:-1 position:50%
The store type of the store
to be indexed must be SQLite


123
00:05:56.389 --> 00:05:59.993 line:-1 position:50%
and must have persistent
history tracking enabled.


124
00:05:59.993 --> 00:06:01.895 line:-1 position:50%
And with that,
you're done!


125
00:06:01,895 --> 00:06:02,996 line:-1
That's it!


126
00:06:02,996 --> 00:06:04,831 line:-1
You don't need to do
anything else


127
00:06:04,831 --> 00:06:08,435 line:-1
and your data will be
indexed in Spotlight.


128
00:06:08,435 --> 00:06:12,172 line:-1
I just demonstrated how easy
it is to add Spotlight indexing


129
00:06:12,172 --> 00:06:13,740 line:-1
to my Tags app.


130
00:06:13,740 --> 00:06:15,508 line:-1
Now that I've described
the basics,


131
00:06:15,508 --> 00:06:18,812 line:-1
let's customize
that implementation a bit.


132
00:06:18,812 --> 00:06:21,114 line:-1
The first way to customize
the implementation


133
00:06:21,114 --> 00:06:24,884 line:-1
is by defining a domain
and index name.


134
00:06:24,884 --> 00:06:27,454 line:-1
To start off,
I'll define a class,


135
00:06:27.454 --> 00:06:30.190 line:-1 position:50%
TagsSpotlightDelegate,
which is a subclass of


136
00:06:30,190 --> 00:06:34,160 line:-1
NSCoreDataCoreSpotlightDelegate.


137
00:06:34.160 --> 00:06:37.564 line:-1 position:50%
Now, I'll override domainName
and indexName


138
00:06:37,564 --> 00:06:39,699 line:-1
with an implementation.


139
00:06:39,699 --> 00:06:42,435 line:-1
Overriding these selectors
tells Spotlight where to store


140
00:06:42.435 --> 00:06:46.139 line:-1 position:50%
the indexed data and allows you
to better identify it later,


141
00:06:46.139 --> 00:06:49.909 line:-1 position:50%
especially if you have
multiple indices.


142
00:06:49.909 --> 00:06:52.412 line:-1 position:50%
If you do not override
domainIdentifier,


143
00:06:52.412 --> 00:06:56.016 line:-1 position:50%
the default domain identifier
is the store identifier.


144
00:06:56.016 --> 00:06:58.118 line:-1 position:50%
If you do not override
indexName,


145
00:06:58.118 --> 00:07:02.389 line:-1 position:50%
the default index name is nil.


146
00:07:02.389 --> 00:07:05.091 line:-1 position:50%
The next step in customizing
the Spotlight delegate


147
00:07:05,091 --> 00:07:08,795 line:-1
is defining an attribute set.


148
00:07:08.795 --> 00:07:10.864 line:-1 position:50%
In the setup portion
of this session,


149
00:07:10.864 --> 00:07:13.333 line:-1 position:50%
the NSCoreDataCore
SpotlightDelegate object


150
00:07:13,333 --> 00:07:17,037 line:-1
defined the attribute set
returned to Spotlight for us,


151
00:07:17,037 --> 00:07:21,241 line:-1
simply by ticking the check box
Index in Spotlight.


152
00:07:21,241 --> 00:07:24,277 line:-1
Now, I am going to demonstrate
exactly how to specify


153
00:07:24.277 --> 00:07:28.348 line:-1 position:50%
the attributes that will be used
for indexing.


154
00:07:28,348 --> 00:07:31,618 line:-1
Specifying which attributes
that should be indexed


155
00:07:31,618 --> 00:07:34,988 line:-1
allows more explicit control
over what's indexed


156
00:07:34.988 --> 00:07:36.656 line:-1 position:50%
and how it's searched for.


157
00:07:36,656 --> 00:07:40,960 line:-1
To do that, use
CSSearchableItemAttributeSet.


158
00:07:40,960 --> 00:07:44,597 line:-1
An attribute set contains a
number of predefined properties


159
00:07:44.597 --> 00:07:47.267 line:-1 position:50%
allowing you to specify
the metadata to display


160
00:07:47.267 --> 00:07:49.569 line:-1 position:50%
about the specified
managed object


161
00:07:49.569 --> 00:07:52.272 line:-1 position:50%
when it appears
as a search result.


162
00:07:52.272 --> 00:07:56.810 line:-1 position:50%
The attributes you choose depend
completely on your domain.


163
00:07:56.810 --> 00:07:58.545 line:-1 position:50%
You can use
predefined properties


164
00:07:58,545 --> 00:08:02,515 line:-1
available in
CSSearchableItemAttributeSet


165
00:08:02.515 --> 00:08:05.552 line:-1 position:50%
or you can define
your own properties.


166
00:08:05.552 --> 00:08:08.054 line:-1 position:50%
The Tags app uses
the predefined properties


167
00:08:08,054 --> 00:08:13,059 line:-1
keywords, displayName,
and thumbnailData.


168
00:08:13.059 --> 00:08:15.729 line:-1 position:50%
It's important to note
that you should only modify


169
00:08:15,729 --> 00:08:18,498 line:-1
an attribute set
on one thread at a time


170
00:08:18.498 --> 00:08:21.568 line:-1 position:50%
as concurrent access to the
properties in an attribute set


171
00:08:21,568 --> 00:08:24,671 line:-1
has undefined behavior.


172
00:08:24.671 --> 00:08:26.806 line:-1 position:50%
Back in the
TagsSpotlightDelegate class,


173
00:08:26.806 --> 00:08:28.408 line:-1 position:50%
let's see how this works
by overriding


174
00:08:28.408 --> 00:08:31.044 line:-1 position:50%
attributeSet (for object:).


175
00:08:31,044 --> 00:08:33,880 line:-1
In the override implementation,
begin by determining


176
00:08:33,880 --> 00:08:36,883 line:-1
if the object is
a Photo type object.


177
00:08:36.883 --> 00:08:42.789 line:-1 position:50%
Next, initialize an attributeSet
with the content type .image.


178
00:08:42.789 --> 00:08:46.092 line:-1 position:50%
Then, set
the properties identifier,


179
00:08:46,092 --> 00:08:49,829 line:-1
displayName, and thumbnailData
on the attribute set


180
00:08:49.829 --> 00:08:55.368 line:-1 position:50%
using the appropriate attributes
from the Photo object.


181
00:08:55.368 --> 00:08:58.772 line:-1 position:50%
Now, append tags
from the Photo object tag set


182
00:08:58.772 --> 00:09:01.841 line:-1 position:50%
to the keywords array
on the attribute set.


183
00:09:01,841 --> 00:09:03,643 line:-1
It is worth mentioning
at this point


184
00:09:03,643 --> 00:09:06,112 line:-1
that if your model indexes
a relationship,


185
00:09:06,112 --> 00:09:09,182 line:-1
attributeSet (for object:)
must be overridden


186
00:09:09,182 --> 00:09:11,785 line:-1
so that it defines
what about that relationship


187
00:09:11.785 --> 00:09:15.221 line:-1 position:50%
in particular is indexed.


188
00:09:15,221 --> 00:09:19,092 line:-1
Lastly,
return the attribute set.


189
00:09:19,092 --> 00:09:22,228 line:-1
Since the model is also
indexing Tag objects,


190
00:09:22.228 --> 00:09:25.598 line:-1 position:50%
the code needs to handle
the case of a Tag.


191
00:09:25.598 --> 00:09:30.236 line:-1 position:50%
For that, create an attribute
set with the contentType .text,


192
00:09:30.236 --> 00:09:33.473 line:-1 position:50%
set the display name
to the name of the tag,


193
00:09:33,473 --> 00:09:37,043 line:-1
and then return
the attribute set.


194
00:09:37.043 --> 00:09:41.080 line:-1 position:50%
As a last step, remove the
Core Data Spotlight display name


195
00:09:41,080 --> 00:09:45,985 line:-1
that was set in the model editor
in a previous step.


196
00:09:45,985 --> 00:09:48,054 line:-1
Let's go further
and define an event loop


197
00:09:48.054 --> 00:09:52.058 line:-1 position:50%
for starting and stopping
indexing.


198
00:09:52.058 --> 00:09:54.928 line:-1 position:50%
Earlier, when we setup
the Spotlight delegate,


199
00:09:54,928 --> 00:09:58,031 line:-1
startSpotlightIndexing
was called immediately after


200
00:09:58.031 --> 00:10:00.667 line:-1 position:50%
creating the Spotlight delegate.


201
00:10:00.667 --> 00:10:02.535 line:-1 position:50%
To give you precise
control over when the


202
00:10:02,535 --> 00:10:04,904 line:-1
NSCoreDataCoreSpotlightDelegate


203
00:10:04,904 --> 00:10:08,374 line:-1
is performing indexing work,
stopSpotlightIndexing


204
00:10:08.374 --> 00:10:11.811 line:-1 position:50%
has also been added
to the framework.


205
00:10:11.811 --> 00:10:14.814 line:-1 position:50%
Using these two selectors
in concert gives you the ability


206
00:10:14,814 --> 00:10:18,218 line:-1
to start and stop indexing work
as necessary,


207
00:10:18,218 --> 00:10:21,554 line:-1
say, in the case where your app
is performing intense CPU


208
00:10:21,554 --> 00:10:25,225 line:-1
or disk activity operations.


209
00:10:25,225 --> 00:10:28,328 line:-1
Now, let's add some support
for being notified


210
00:10:28.328 --> 00:10:31.764 line:-1 position:50%
when index updates complete.


211
00:10:31.764 --> 00:10:34.767 line:-1 position:50%
When a change occurs
to an entity or entities


212
00:10:34.767 --> 00:10:37.504 line:-1 position:50%
that is indexed in Spotlight,


213
00:10:37,504 --> 00:10:41,140 line:-1
that index is updated
asynchronously.


214
00:10:41.140 --> 00:10:45.178 line:-1 position:50%
In iOS 15 and macOS Monterey,
the Core Data framework


215
00:10:45.178 --> 00:10:48.715 line:-1 position:50%
has added index update
notifications.


216
00:10:48,715 --> 00:10:52,552 line:-1
To be informed when the index
update is complete, subscribe to


217
00:10:52.552 --> 00:10:57.457 line:-1 position:50%
NSCoreDataCoreSpotlightDelegate
.indexDidUpdateNotification,


218
00:10:57.457 --> 00:11:01.594 line:-1 position:50%
which is posted
by the Spotlight delegate.


219
00:11:01.594 --> 00:11:04.597 line:-1 position:50%
These notifications will
be posted after processing


220
00:11:04,597 --> 00:11:07,901 line:-1
a call to save:
on NSManagedObjectContext


221
00:11:07.901 --> 00:11:11.804 line:-1 position:50%
or after the completion
of batch operations.


222
00:11:11,804 --> 00:11:14,107 line:-1
Let's see this in action.


223
00:11:14,107 --> 00:11:18,077 line:-1
First, check to see
if indexing is enabled.


224
00:11:18,077 --> 00:11:23,750 line:-1
If it is, then register for the
indexDidUpdateNotification.


225
00:11:23,750 --> 00:11:26,920 line:-1
Then, in the handler,
inspect the notification,


226
00:11:26,920 --> 00:11:29,422 line:-1
which will have
a userInfo dictionary


227
00:11:29,422 --> 00:11:31,991 line:-1
that contains
two key-value pairs,


228
00:11:31.991 --> 00:11:35.962 line:-1 position:50%
similar to a remote change
notification:


229
00:11:35.962 --> 00:11:38.898 line:-1 position:50%
an NSString UUID of the store
that for which


230
00:11:38.898 --> 00:11:42.101 line:-1 position:50%
the Spotlight delegate
updated its index,


231
00:11:42.101 --> 00:11:46.105 line:-1 position:50%
and the persistent history token
of the store for which


232
00:11:46.105 --> 00:11:50.009 line:-1 position:50%
the Spotlight delegate
updated its index.


233
00:11:50,009 --> 00:11:52,312 line:-1
You can use both of these keys
to determine


234
00:11:52.312 --> 00:11:55.315 line:-1 position:50%
if the store you're
interested in has been indexed


235
00:11:55,315 --> 00:11:59,352 line:-1
up to the latest persistent
history token.


236
00:11:59,352 --> 00:12:01,354 line:-1
If indexing is not enabled,


237
00:12:01,354 --> 00:12:03,957 line:-1
you can remove yourself
as an observer


238
00:12:03,957 --> 00:12:07,627 line:-1
from the notifications.


239
00:12:07.627 --> 00:12:10.363 line:-1 position:50%
Prior to this year,
the only way to delete data


240
00:12:10.363 --> 00:12:12.765 line:-1 position:50%
indexed by your app
was to either implement


241
00:12:12.765 --> 00:12:16.636 line:-1 position:50%
the Core Spotlight APIs
to remove the index entries


242
00:12:16.636 --> 00:12:21.374 line:-1 position:50%
or delete the entire
client graph in Core Data.


243
00:12:21.374 --> 00:12:25.578 line:-1 position:50%
Crucially, new in iOS 15
and macOS Monterey,


244
00:12:25,578 --> 00:12:28,982 line:-1
Core Data has given the
developer a new way to manage


245
00:12:28.982 --> 00:12:32.552 line:-1 position:50%
the Spotlight index without
deleting the client graph,


246
00:12:32,552 --> 00:12:36,022 line:-1
which is a great win
for user privacy!


247
00:12:36,022 --> 00:12:39,692 line:-1
First, the code
will stop indexing.


248
00:12:39,692 --> 00:12:43,496 line:-1
Then, call deleteSpotlightIndex.


249
00:12:43.496 --> 00:12:47.900 line:-1 position:50%
Lastly, handle any resulting
error in the completion handler.


250
00:12:47.900 --> 00:12:50.269 line:-1 position:50%
Note that calling this method
may return errors


251
00:12:50.269 --> 00:12:52.238 line:-1 position:50%
from lower-layer dependencies,


252
00:12:52,238 --> 00:12:54,741 line:-1
such as Core Data
and Core Spotlight,


253
00:12:54.741 --> 00:12:58.444 line:-1 position:50%
and you should be prepared
to handle those.


254
00:12:58.444 --> 00:13:01.247 line:-1 position:50%
Now that I've shown you how
to customize an implementation


255
00:13:01,247 --> 00:13:02,915 line:-1
of the Spotlight delegate,


256
00:13:02.915 --> 00:13:05.918 line:-1 position:50%
let's validate our setup
by adding full-text search


257
00:13:05.918 --> 00:13:09.455 line:-1 position:50%
to the Tags app using
the Core Spotlight APIs.


258
00:13:09,455 --> 00:13:13,259 line:-1
The results will be
what was previously indexed.


259
00:13:13,259 --> 00:13:16,529 line:-1
Start by defining an extension
for PhotosViewController


260
00:13:16.529 --> 00:13:20.166 line:-1 position:50%
that adopts the
UISearchResultsUpdating protocol


261
00:13:20.166 --> 00:13:21.901 line:-1 position:50%
and a function


262
00:13:21.901 --> 00:13:25.605 line:-1 position:50%
updateSearchResults
(for controller).


263
00:13:25.605 --> 00:13:29.208 line:-1 position:50%
The Tags user interface
has a UISearchController.


264
00:13:29.208 --> 00:13:30.410 line:-1 position:50%
We'll get the user input


265
00:13:30.410 --> 00:13:33.146 line:-1 position:50%
from that search controller's
search bar.


266
00:13:33.146 --> 00:13:35.314 line:-1 position:50%
If the user input is empty,


267
00:13:35,314 --> 00:13:37,850 line:-1
fetch all the images
from our data provider


268
00:13:37,850 --> 00:13:39,819 line:-1
and then reload
the collection view


269
00:13:39,819 --> 00:13:42,588 line:-1
as there is no search query.


270
00:13:42.588 --> 00:13:46.492 line:-1 position:50%
Now let's handle the case
where there is a search query.


271
00:13:46.492 --> 00:13:49.362 line:-1 position:50%
To start, sanitize
the user input string


272
00:13:49,362 --> 00:13:51,230 line:-1
by escaping it.


273
00:13:51,230 --> 00:13:53,499 line:-1
Next, define a query string


274
00:13:53.499 --> 00:13:56.969 line:-1 position:50%
using the user's
sanitized input string.


275
00:13:56.969 --> 00:13:59.572 line:-1 position:50%
Query strings operate
on the values associated


276
00:13:59.572 --> 00:14:00.773 line:-1 position:50%
with a property in a


277
00:14:00.773 --> 00:14:04.444 line:-1 position:50%
CSSearchableItemAttributeSet
object.


278
00:14:04.444 --> 00:14:07.046 line:-1 position:50%
In this case, the code will be
operating on the


279
00:14:07,046 --> 00:14:11,417 line:-1
Keywords attribute
that was set in a previous step.


280
00:14:11,417 --> 00:14:15,955 line:-1
In the search query,
the modifiers c, d, and w


281
00:14:15.955 --> 00:14:17.557 line:-1 position:50%
are being used.


282
00:14:17,557 --> 00:14:20,226 line:-1
c is for case insensitive.


283
00:14:20.226 --> 00:14:22.862 line:-1 position:50%
d is for diacritic insensitive.


284
00:14:22.862 --> 00:14:27.100 line:-1 position:50%
And w is for
a word-based search.


285
00:14:27.100 --> 00:14:30.837 line:-1 position:50%
Now, create a CSSearchQuery
object by specifying


286
00:14:30.837 --> 00:14:34.107 line:-1 position:50%
the formatted query string
that was just created


287
00:14:34.107 --> 00:14:37.076 line:-1 position:50%
and an array of attribute names
that correspond


288
00:14:37.076 --> 00:14:42.281 line:-1 position:50%
to properties defined by
CSSearchableItemAttributeSet.


289
00:14:42.281 --> 00:14:45.351 line:-1 position:50%
This search query object
manages the criteria


290
00:14:45.351 --> 00:14:47.620 line:-1 position:50%
to apply when searching
app content


291
00:14:47,620 --> 00:14:49,489 line:-1
that you have previously indexed


292
00:14:49.489 --> 00:14:53.126 line:-1 position:50%
using the Spotlight delegate
APIs.


293
00:14:53.126 --> 00:14:56.129 line:-1 position:50%
Following that,
set the foundItemsHandler.


294
00:14:56.129 --> 00:14:58.598 line:-1 position:50%
This handler will be called
repetitively with items


295
00:14:58.598 --> 00:15:02.068 line:-1 position:50%
that match the search query
previously defined.


296
00:15:02.068 --> 00:15:04.470 line:-1 position:50%
In the completionHandler
for the query,


297
00:15:04,470 --> 00:15:07,607 line:-1
which will be called once,
check for an error


298
00:15:07,607 --> 00:15:11,377 line:-1
and potentially perform
some error handling.


299
00:15:11.377 --> 00:15:13.780 line:-1 position:50%
Absent an error,
dispatch a block


300
00:15:13.780 --> 00:15:16.849 line:-1 position:50%
onto the main queue
to use our data provider


301
00:15:16,849 --> 00:15:20,253 line:-1
to perform a fetch for the items
Spotlight found


302
00:15:20.253 --> 00:15:23.289 line:-1 position:50%
and load them
in the user interface.


303
00:15:23,289 --> 00:15:28,427 line:0
Lastly, and most importantly,
don't forget to start the query.


304
00:15:28.427 --> 00:15:31.097 line:-1 position:50%
Now that the Tags app
has a Spotlight delegate


305
00:15:31,097 --> 00:15:32,865 line:-1
indexing its content,


306
00:15:32.865 --> 00:15:36.068 line:-1 position:50%
the data has been freed
from within the app!


307
00:15:36,068 --> 00:15:38,504 line:-1
When I go to Spotlight,
and I search for a tag


308
00:15:38,504 --> 00:15:42,408 line:-1
I have previously added,
it returns two results:


309
00:15:42.408 --> 00:15:46.179 line:-1 position:50%
the tag name itself and
the specific photo that I tagged


310
00:15:46.179 --> 00:15:51.117 line:-1 position:50%
with the keyword
"Natural Bridges State Park".


311
00:15:51,117 --> 00:15:52,451 line:-1
Wrapping up,
we've learned about the


312
00:15:52,451 --> 00:15:55,087 line:-1
NSCoreDataCoreSpotlightDelegate


313
00:15:55.087 --> 00:15:57.890 line:-1 position:50%
and how it can help your users
find their content


314
00:15:57,890 --> 00:16:00,126 line:-1
inside your app
and outside your app


315
00:16:00.126 --> 00:16:01.961 line:-1 position:50%
in Spotlight search,


316
00:16:01,961 --> 00:16:04,730 line:-1
setup the Spotlight
delegate quickly and easily


317
00:16:04,730 --> 00:16:07,834 line:-1
to start indexing
without a huge code burden,


318
00:16:07,834 --> 00:16:10,369 line:-1
and customized
our Spotlight delegate


319
00:16:10.369 --> 00:16:15.107 line:-1 position:50%
using some of the new APIs
available to you this release.


320
00:16:15,107 --> 00:16:17,543 line:-1
I hope you've found
this information useful


321
00:16:17,543 --> 00:16:19,011 line:-1
and that you'll consider
adopting


322
00:16:19.011 --> 00:16:22.315 line:-1 position:50%
NSCoreDataCoreSpotlightDelegate
in your project


323
00:16:22.315 --> 00:16:24.483 line:-1 position:50%
to help users
find their content.


324
00:16:24,483 --> 00:16:27,019 line:-1
Have a great WWDC!


325
00:16:27,019 --> 00:16:29,989 size:2% align:center position:89%
♪

