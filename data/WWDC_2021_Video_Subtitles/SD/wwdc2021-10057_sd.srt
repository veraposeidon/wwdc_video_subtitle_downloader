2
00:00:00.000 --> 00:00:02.002 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02.002 --> 00:00:05.639 line:-1 position:50%
♪ Bass music playing ♪


4
00:00:05,639 --> 00:00:07,574 line:-1
[KEYSTROKES]


5
00:00:07,574 --> 00:00:09,009 line:0 position:90% align:right
♪


6
00:00:09.009 --> 00:00:12.212 line:-1 position:50%
Chris Donegan: Hi, I'm Chris,
an engineer on UIKit.


7
00:00:12.212 --> 00:00:15.782 line:-1 position:50%
I'll be joined later by my
colleagues Anant and Mohammed.


8
00:00:15.782 --> 00:00:18.352 line:-1 position:50%
iPad is the primary device
for many people


9
00:00:18,352 --> 00:00:20,888 line:-1
due to its power
and capabilities.


10
00:00:20.888 --> 00:00:24.024 line:-1 position:50%
In this video, you'll learn
about some exciting new features


11
00:00:24.024 --> 00:00:28.328 line:-1 position:50%
you should use to take
your iPad app to the next level.


12
00:00:28,328 --> 00:00:30,597 line:-1
First, I'll show you
the latest advancements


13
00:00:30,597 --> 00:00:33,267 line:-1
in multitasking and scenes.


14
00:00:33.267 --> 00:00:35.135 line:-1 position:50%
Then, Anant
will walk you through


15
00:00:35,135 --> 00:00:38,472 line:-1
the powerful changes
to keyboard shortcuts.


16
00:00:38.472 --> 00:00:41.541 line:-1 position:50%
Finally, Mohammed will show you
the latest enhancements


17
00:00:41.541 --> 00:00:44.578 line:-1 position:50%
to the system pointer.


18
00:00:44.578 --> 00:00:47.047 line:-1 position:50%
Let's get right into
multitasking.


19
00:00:47,047 --> 00:00:49,216 line:-1
iPadOS 13 introduced the ability


20
00:00:49,216 --> 00:00:52,486 line:-1
to run multiple instances
of your app's UI.


21
00:00:52.486 --> 00:00:55.656 line:-1 position:50%
In iPadOS 15,
we're improving this experience


22
00:00:55,656 --> 00:00:58,225 line:-1
with new APIs
for scene presentation


23
00:00:58,225 --> 00:01:01,061 line:-1
as well as
enhanced state restoration.


24
00:01:01.061 --> 00:01:02.696 line:-1 position:50%
These enhancements build upon


25
00:01:02,696 --> 00:01:05,499 line:-1
the existing UIScene
infrastructure.


26
00:01:05,499 --> 00:01:07,935 position:50%
If you haven't adopted
UIScene,


27
00:01:07,935 --> 00:01:11,838 position:50%
check out "Introducing
Multiple Windows on iPad."


28
00:01:11,838 --> 00:01:15,409 line:-1
Let's briefly go over
the key concepts.


29
00:01:15,409 --> 00:01:20,180 line:-1
A scene represents a single
instance of your app's UI.


30
00:01:20.180 --> 00:01:22.249 line:-1 position:50%
The structure
of a scene's components


31
00:01:22,249 --> 00:01:25,852 line:-1
is defined by
a scene configuration.


32
00:01:25,852 --> 00:01:30,123 line:-1
At a minimum, it defines the
scene's role and delegate class.


33
00:01:30,123 --> 00:01:34,561 line:-1
You can also provide a name,
storyboard, and scene subclass.


34
00:01:34.561 --> 00:01:38.665 line:-1 position:50%
Scene configurations can either
be declared in your Info.plist,


35
00:01:38.665 --> 00:01:39.866 line:-1 position:50%
or created at runtime


36
00:01:39.866 --> 00:01:43.737 line:-1 position:50%
using the
UISceneConfiguration object.


37
00:01:43.737 --> 00:01:46.273 line:-1 position:50%
The content of a scene
is represented by


38
00:01:46,273 --> 00:01:48,141 line:-1
an NSUserActivity.


39
00:01:48,141 --> 00:01:50,410 line:-1
These activities are used
for requesting scenes


40
00:01:50.410 --> 00:01:52.980 line:-1 position:50%
as well as
for state restoration.


41
00:01:52.980 --> 00:01:56.183 line:-1 position:50%
A scene is managed
by a scene delegate.


42
00:01:56,183 --> 00:01:59,086 line:-1
The delegate is responsible
for setting up the UI,


43
00:01:59.086 --> 00:02:00.887 line:-1 position:50%
responding to lifecycle events,


44
00:02:00.887 --> 00:02:05.559 line:-1 position:50%
as well as saving
and restoring state.


45
00:02:05,559 --> 00:02:09,262 line:-1
Finally, a scene is tracked
by a scene session.


46
00:02:09,262 --> 00:02:12,399 line:-1
The scene itself can be
disconnected and reconnected


47
00:02:12,399 --> 00:02:15,569 line:-1
by the system
when it's in the background.


48
00:02:15,569 --> 00:02:17,871 line:-1
The scene session
tracks the scene


49
00:02:17.871 --> 00:02:19.706 line:-1 position:50%
regardless
of its connection state


50
00:02:19.706 --> 00:02:22.809 line:-1 position:50%
and persists between launches.


51
00:02:22.809 --> 00:02:25.245 line:-1 position:50%
The session can be thought of
as the representation


52
00:02:25.245 --> 00:02:27.381 line:-1 position:50%
in the system app switcher.


53
00:02:27.381 --> 00:02:31.184 line:-1 position:50%
Each item in the switcher
corresponds to a scene session.


54
00:02:31,184 --> 00:02:33,653 line:-1
When requesting a scene
from the system,


55
00:02:33,653 --> 00:02:35,255 line:-1
you can provide
an options object


56
00:02:35.255 --> 00:02:38.125 line:-1 position:50%
for customizing the request.


57
00:02:38.125 --> 00:02:40.560 line:-1 position:50%
iPadOS 15 has
a new options subclass


58
00:02:40.560 --> 00:02:42.929 line:-1 position:50%
specifically
for window scenes.


59
00:02:42.929 --> 00:02:45.465 line:-1 position:50%
Using this subclass
allows you to specify


60
00:02:45,465 --> 00:02:47,901 line:-1
a presentation style.


61
00:02:47.901 --> 00:02:49.603 line:-1 position:50%
Window scene
presentation styles


62
00:02:49,603 --> 00:02:51,171 line:-1
influence how
the scene is presented


63
00:02:51.171 --> 00:02:54.408 line:-1 position:50%
relative to other scenes
in the workspace.


64
00:02:54,408 --> 00:02:56,643 line:-1
There are three possible values:


65
00:02:56,643 --> 00:03:00,781 line:-1
prominent, standard,
and automatic.


66
00:03:00.781 --> 00:03:04.551 line:-1 position:50%
This is a scene using the
prominent presentation style.


67
00:03:04,551 --> 00:03:06,887 line:-1
It's presented modally
in the current workspace


68
00:03:06.887 --> 00:03:09.423 line:-1 position:50%
with the scenes behind it
dimmed.


69
00:03:09,423 --> 00:03:10,357 line:-1
Because it's modal,


70
00:03:10,357 --> 00:03:13,693 line:-1
it should provide
Cancel, Close, or Done buttons.


71
00:03:13,693 --> 00:03:15,695 line:-1
This new style
can be thought of


72
00:03:15.695 --> 00:03:18.265 line:-1 position:50%
as a staging ground
for new scenes.


73
00:03:18,265 --> 00:03:20,734 line:-1
It can be repositioned
like any other scene


74
00:03:20,734 --> 00:03:23,070 line:-1
using the new multitasking
controls,


75
00:03:23,070 --> 00:03:27,007 line:-1
and it can also be moved
into the app shelf for later.


76
00:03:27,007 --> 00:03:30,444 line:-1
When considering if this style
is appropriate for a scene,


77
00:03:30,444 --> 00:03:33,013 line:-1
there are some guidelines
to keep in mind.


78
00:03:33,013 --> 00:03:36,783 line:-1
First, prominent scenes
should be useful on their own.


79
00:03:36.783 --> 00:03:37.984 line:-1 position:50%
They should not be used


80
00:03:37,984 --> 00:03:41,488 line:-1
for providing options or tools
for another scene.


81
00:03:41.488 --> 00:03:44.791 line:-1 position:50%
They should provide
a Done or Close button,


82
00:03:44,791 --> 00:03:47,260 line:-1
and they should be dedicated
to specific content


83
00:03:47.260 --> 00:03:50.497 line:-1 position:50%
within your app
like a document or file.


84
00:03:50.497 --> 00:03:53.033 line:-1 position:50%
This dedicated content scope
must be defined


85
00:03:53,033 --> 00:03:56,603 line:-1
in the scene's
activation conditions.


86
00:03:56,603 --> 00:03:58,805 line:0
For more information
on activation conditions,


87
00:03:58,805 --> 00:04:03,376 line:0
check out "Targeting Content
with Multiple Windows."


88
00:04:03.376 --> 00:04:06.379 line:-1 position:50%
This example shows how Safari
is opening a new scene


89
00:04:06.379 --> 00:04:08.815 line:-1 position:50%
using the standard style.


90
00:04:08.815 --> 00:04:12.252 line:-1 position:50%
They are presented side by side,
allowing interaction with each,


91
00:04:12.252 --> 00:04:16.823 line:-1 position:50%
and both provide the full
functionality of the main scene.


92
00:04:16,823 --> 00:04:20,694 line:-1
You can also specify
automatic as the style.


93
00:04:20,694 --> 00:04:22,896 line:-1
This value tells the system
that it should choose


94
00:04:22.896 --> 00:04:26.333 line:-1 position:50%
the best style
based on how it was requested.


95
00:04:26.333 --> 00:04:28.201 line:-1 position:50%
iPadOS 15
not only provides


96
00:04:28,201 --> 00:04:31,371 line:-1
a way to customize presentation
using styles,


97
00:04:31.371 --> 00:04:34.174 line:-1 position:50%
it also makes it easier
for people to open their content


98
00:04:34,174 --> 00:04:37,043 line:-1
in new scenes.


99
00:04:37,043 --> 00:04:40,347 line:-1
On the Mac, it's common to find
an Open in New Window item


100
00:04:40.347 --> 00:04:42.816 line:-1 position:50%
in context menus.


101
00:04:42.816 --> 00:04:44.417 line:-1 position:50%
You should bring this
familiar experience


102
00:04:44,417 --> 00:04:49,589 line:-1
to your iPad app by using
UIWindowScene.ActivationAction.


103
00:04:49.589 --> 00:04:52.092 line:-1 position:50%
It's a new UIAction subclass
for requesting scenes


104
00:04:52,092 --> 00:04:56,630 line:-1
that can be used in menus,
buttons, and bar button items.


105
00:04:56,630 --> 00:04:58,732 line:-1
To add this functionality
to your app,


106
00:04:58,732 --> 00:05:03,603 line:-1
start by initializing a
UIWindowScene.ActivationAction.


107
00:05:03,603 --> 00:05:05,839 line:-1
It's initialized with a closure
that is executed


108
00:05:05.839 --> 00:05:08.642 line:-1 position:50%
when the item is selected.


109
00:05:08.642 --> 00:05:11.711 line:-1 position:50%
The closure should return
an activation configuration


110
00:05:11,711 --> 00:05:15,415 line:-1
with a user activity
for the new scene's content.


111
00:05:15,415 --> 00:05:20,587 line:-1
Finally, put the action in
a menu and you're good to go.


112
00:05:20.587 --> 00:05:22.522 line:-1 position:50%
On iPad and Mac Catalyst,


113
00:05:22,522 --> 00:05:24,724 line:-1
the menu shows
an Open in New Window item


114
00:05:24,724 --> 00:05:27,794 line:-1
that, when selected,
will present a new scene.


115
00:05:27.794 --> 00:05:30.630 line:-1 position:50%
On iPhone, the item
is automatically hidden


116
00:05:30.630 --> 00:05:34.067 line:-1 position:50%
because multiple scenes
are not supported.


117
00:05:34,067 --> 00:05:36,469 line:-1
If you would rather show
another item in its place,


118
00:05:36,469 --> 00:05:39,206 line:-1
you can provide
an alternate action.


119
00:05:39.206 --> 00:05:42.509 line:-1 position:50%
Let's update the previous
example to offer one.


120
00:05:42,509 --> 00:05:46,546 line:-1
To do this, start by creating
the alternate action.


121
00:05:46,546 --> 00:05:48,915 line:-1
The new action's title and image
are shown


122
00:05:48,915 --> 00:05:52,219 line:-1
when multiple windows
are not available.


123
00:05:52.219 --> 00:05:55.956 line:-1 position:50%
Then, update the initializer
of the scene activation action


124
00:05:55,956 --> 00:06:01,261 line:-1
by passing the new action
as the alternate.


125
00:06:01,261 --> 00:06:03,430 line:-1
With an alternate
action provided,


126
00:06:03.430 --> 00:06:05.765 line:-1 position:50%
the menus on iPad
and Mac Catalyst


127
00:06:05.765 --> 00:06:08.835 line:-1 position:50%
still show
the Open in New Window item


128
00:06:08,835 --> 00:06:12,372 line:-1
but on iPhone, the Show Details
item is visible;


129
00:06:12.372 --> 00:06:16.176 line:-1 position:50%
all done without
a single condition in your code.


130
00:06:16,176 --> 00:06:19,379 line:-1
Adding these menu items
is a clear and familiar way


131
00:06:19.379 --> 00:06:22.349 line:-1 position:50%
for people to open their content
in new scenes.


132
00:06:22.349 --> 00:06:24.517 line:-1 position:50%
But it's not the only way.


133
00:06:24.517 --> 00:06:26.219 line:-1 position:50%
iPad is a touch-first device


134
00:06:26,219 --> 00:06:30,056 line:-1
and it's easy to open scenes
with a single gesture.


135
00:06:30.056 --> 00:06:31.091 line:-1 position:50%
In the Notes app,


136
00:06:31.091 --> 00:06:34.761 line:-1 position:50%
pinching out on a cell
opens the note in a new scene.


137
00:06:34.761 --> 00:06:36.396 line:-1 position:50%
The scene interactively animates


138
00:06:36.396 --> 00:06:40.867 line:-1 position:50%
from the cell
to its final position.


139
00:06:40,867 --> 00:06:43,203 line:-1
There are two ways
of offering this functionality


140
00:06:43,203 --> 00:06:44,638 line:-1
in your app.


141
00:06:44,638 --> 00:06:46,239 line:-1
If you're using
a collection view,


142
00:06:46,239 --> 00:06:48,008 line:-1
there's a new delegate method.


143
00:06:48.008 --> 00:06:48.975 line:-1 position:50%
For other views,


144
00:06:48.975 --> 00:06:52.812 line:-1 position:50%
use UIWindowScene
ActivationInteraction.


145
00:06:52,812 --> 00:06:54,981 line:-1
Both of these are only
for presenting scenes


146
00:06:54,981 --> 00:06:57,717 line:-1
with a prominent style.


147
00:06:57,717 --> 00:07:00,520 line:-1
To support this gesture
in your collection view,


148
00:07:00,520 --> 00:07:02,689 line:-1
implement the new delegate
method named


149
00:07:02,689 --> 00:07:06,626 line:-1
sceneActivationConfiguration
ForItemAt indexPath.


150
00:07:06.626 --> 00:07:10.430 line:-1 position:50%
It's very similar to the context
menu example from earlier.


151
00:07:10,430 --> 00:07:14,301 line:-1
Create the user activity
for the new scene's content,


152
00:07:14.301 --> 00:07:16.670 line:-1 position:50%
then return
an activation configuration


153
00:07:16,670 --> 00:07:18,872 line:-1
with that activity.


154
00:07:18.872 --> 00:07:22.542 line:-1 position:50%
You may not want every cell
to support opening a new scene.


155
00:07:22,542 --> 00:07:24,411 line:-1
To prevent the gesture
from beginning,


156
00:07:24,411 --> 00:07:26,646 line:-1
just return nil.


157
00:07:26.646 --> 00:07:29.215 line:-1 position:50%
To support this gesture
on other views,


158
00:07:29,215 --> 00:07:32,619 line:-1
create a UIWindowScene
.ActivationInteraction.


159
00:07:32.619 --> 00:07:36.056 line:-1 position:50%
It's created with a closure
that accepts two arguments:


160
00:07:36,056 --> 00:07:37,691 line:-1
the interaction itself


161
00:07:37,691 --> 00:07:42,228 line:-1
and the point of the interaction
in the view's coordinate space.


162
00:07:42,228 --> 00:07:44,831 line:-1
These can be used to create
specific user activities


163
00:07:44.831 --> 00:07:47.634 line:-1 position:50%
for different regions
of the view.


164
00:07:47,634 --> 00:07:50,370 line:-1
The closure should return
an activation configuration


165
00:07:50,370 --> 00:07:53,139 line:-1
with the user activity.


166
00:07:53.139 --> 00:07:55.975 line:-1 position:50%
The interaction also
takes an error handler.


167
00:07:55,975 --> 00:07:58,345 line:-1
While the interaction
is disabled on platforms


168
00:07:58.345 --> 00:08:00.613 line:-1 position:50%
that don't support
multiple scenes,


169
00:08:00.613 --> 00:08:03.383 line:-1 position:50%
errors can still occur
due to configuration issues


170
00:08:03,383 --> 00:08:06,753 line:-1
or a lack of system resources.


171
00:08:06,753 --> 00:08:08,688 line:-1
You've probably noticed
that all of these ways


172
00:08:08.688 --> 00:08:10.256 line:-1 position:50%
of presenting window scenes


173
00:08:10.256 --> 00:08:14.060 line:-1 position:50%
use the same
activation configuration object.


174
00:08:14.060 --> 00:08:17.230 line:-1 position:50%
Its only requirement
is a user activity,


175
00:08:17.230 --> 00:08:20.300 line:-1 position:50%
but it also contains
scene request options


176
00:08:20,300 --> 00:08:22,669 line:-1
and a targeted preview.


177
00:08:22,669 --> 00:08:23,970 line:-1
If these are not provided,


178
00:08:23,970 --> 00:08:26,673 line:-1
the system will do its best
to create them for you.


179
00:08:26.673 --> 00:08:28.708 line:-1 position:50%
However, you can explicitly
provide them


180
00:08:28.708 --> 00:08:31.111 line:-1 position:50%
to refine the experience.


181
00:08:31,111 --> 00:08:33,680 line:-1
As an example,
these collection view cells


182
00:08:33.680 --> 00:08:36.683 line:-1 position:50%
have a thumbnail,
title, and caption.


183
00:08:36,683 --> 00:08:39,319 line:-1
When the cell is pinched out,
a scene is presented


184
00:08:39,319 --> 00:08:41,321 line:-1
which mainly displays
the larger version


185
00:08:41,321 --> 00:08:43,556 line:-1
of the thumbnail's content.


186
00:08:43.556 --> 00:08:44.991 line:-1 position:50%
Notice that the new scene


187
00:08:44,991 --> 00:08:47,627 line:-1
is transitioning
from the cell as a whole.


188
00:08:47.627 --> 00:08:48.595 line:-1 position:50%
It would look better


189
00:08:48.595 --> 00:08:51.865 line:-1 position:50%
if it transitioned
from just the thumbnail.


190
00:08:51,865 --> 00:08:53,633 line:-1
To achieve this effect,


191
00:08:53.633 --> 00:08:57.437 line:-1 position:50%
the activation configuration
is created as before.


192
00:08:57,437 --> 00:09:01,141 line:-1
Then, check if the cell
is a thumbnail cell.


193
00:09:01.141 --> 00:09:04.077 line:-1 position:50%
If so, use the cell's
thumbnail view


194
00:09:04.077 --> 00:09:09.282 line:-1 position:50%
to create a targeted preview
and set it on the configuration.


195
00:09:09.282 --> 00:09:12.852 line:-1 position:50%
By providing a custom preview
on the activation configuration,


196
00:09:12.852 --> 00:09:15.622 line:-1 position:50%
the transition
is much more polished.


197
00:09:15,622 --> 00:09:17,824 line:-1
Let's take a closer look.


198
00:09:17.824 --> 00:09:21.060 line:-1 position:50%
Now, rather than transitioning
from the cell itself,


199
00:09:21.060 --> 00:09:23.329 line:-1 position:50%
it transitions
from the thumbnail,


200
00:09:23.329 --> 00:09:27.634 line:-1 position:50%
leaving the rest of the cell
in place.


201
00:09:27,634 --> 00:09:30,270 line:-1
Activation configurations
allow you to request


202
00:09:30,270 --> 00:09:32,539 line:-1
any of your app's scenes.


203
00:09:32.539 --> 00:09:35.241 line:-1 position:50%
However, you may simply
want to display a file


204
00:09:35,241 --> 00:09:37,777 line:-1
without having to build
a scene yourself.


205
00:09:37.777 --> 00:09:41.014 line:-1 position:50%
iPadOS 15 makes this very easy.


206
00:09:41.014 --> 00:09:42.549 line:-1 position:50%
There's a special subclass


207
00:09:42,549 --> 00:09:45,285 line:-1
of UIWindowScene
.ActivationConfiguration


208
00:09:45,285 --> 00:09:50,256 line:-1
called "QLPreviewScene
ActivationConfiguration".


209
00:09:50,256 --> 00:09:52,459 line:-1
Returning a preview scene
configuration


210
00:09:52.459 --> 00:09:55.662 line:-1 position:50%
requests a system-managed
preview scene.


211
00:09:55,662 --> 00:09:58,932 line:-1
There's no scene delegate
and no callbacks to worry about,


212
00:09:58,932 --> 00:10:00,934 line:-1
but your app
must declare support


213
00:10:00,934 --> 00:10:04,437 line:-1
for multiple windows
in the Info.plist.


214
00:10:04,437 --> 00:10:06,473 line:-1
Providing polished
and convenient ways


215
00:10:06,473 --> 00:10:10,076 line:-1
for people to open content
in new scenes is important.


216
00:10:10,076 --> 00:10:11,444 line:-1
But it's equally as important


217
00:10:11.444 --> 00:10:13.746 line:-1 position:50%
to save and restore
the scene's state


218
00:10:13,746 --> 00:10:18,351 line:-1
so returning to them later on
is a seamless experience.


219
00:10:18,351 --> 00:10:19,919 line:-1
When a scene
moves to the background,


220
00:10:19,919 --> 00:10:22,021 line:-1
the system will ask
the scene's delegate


221
00:10:22.021 --> 00:10:26.159 line:-1 position:50%
for an NSUserActivity
to represent its state.


222
00:10:26,159 --> 00:10:29,262 line:-1
This activity could be the
root view controller's activity


223
00:10:29,262 --> 00:10:33,199 line:-1
if it supports Handoff,
or one created on the spot.


224
00:10:33.199 --> 00:10:35.635 line:-1 position:50%
Here, a user activity is created


225
00:10:35,635 --> 00:10:37,871 line:-1
saving the contents
of a text field


226
00:10:37.871 --> 00:10:42.375 line:-1 position:50%
in the activity's
user info dictionary.


227
00:10:42,375 --> 00:10:44,544 line:-1
To give the best experience,


228
00:10:44.544 --> 00:10:47.780 line:-1 position:50%
the scene state should go
beyond just the content.


229
00:10:47.780 --> 00:10:50.783 line:-1 position:50%
You should also save
the visual and interaction state


230
00:10:50.783 --> 00:10:52.986 line:-1 position:50%
like scroll position,
cursor position,


231
00:10:52,986 --> 00:10:55,255 line:-1
and first responder status.


232
00:10:55.255 --> 00:10:57.423 line:-1 position:50%
Rather than saving
each of these independently,


233
00:10:57.423 --> 00:11:00.460 line:-1 position:50%
UITextField and UITextView
now have


234
00:11:00.460 --> 00:11:03.096 line:-1 position:50%
an interactionState property.


235
00:11:03.096 --> 00:11:05.598 line:-1 position:50%
This property
provides a single object


236
00:11:05,598 --> 00:11:08,001 line:-1
containing all
of the interaction state.


237
00:11:08,001 --> 00:11:10,603 line:-1
The object doesn't contain
the content itself,


238
00:11:10.603 --> 00:11:12.038 line:-1 position:50%
it's additional information


239
00:11:12,038 --> 00:11:17,143 line:-1
for you to save
in the user activity.


240
00:11:17.143 --> 00:11:18.578 line:-1 position:50%
I've updated
the previous example


241
00:11:18,578 --> 00:11:21,981 line:-1
by saving the interaction state
of the text field.


242
00:11:21.981 --> 00:11:25.485 line:-1 position:50%
Now, by saving both the content
and the interaction state,


243
00:11:25.485 --> 00:11:28.021 line:-1 position:50%
the user activity
contains enough information


244
00:11:28,021 --> 00:11:32,325 line:-1
to be accurately restored.


245
00:11:32.325 --> 00:11:37.063 line:-1 position:50%
On iPadOS 14, restoring state
can be a little tricky.


246
00:11:37,063 --> 00:11:39,732 line:-1
If you tried to restore state
when the scene was connecting,


247
00:11:39,732 --> 00:11:44,070 line:-1
you'd notice that the storyboard
and views weren't fully loaded.


248
00:11:44,070 --> 00:11:45,305 line:-1
If you restored later,


249
00:11:45,305 --> 00:11:47,574 line:-1
when the scene was transitioning
to the foreground,


250
00:11:47,574 --> 00:11:51,711 line:-1
you had to track whether or not
it was for the first time.


251
00:11:51.711 --> 00:11:55.682 line:-1 position:50%
iPadOS 15 solves this problem
with a new delegate method


252
00:11:55,682 --> 00:11:58,217 line:-1
explicitly for restoring state.


253
00:11:58,217 --> 00:12:00,620 line:-1
It's called after
the scene is connected


254
00:12:00.620 --> 00:12:02.255 line:-1 position:50%
and the storyboard
has been loaded,


255
00:12:02.255 --> 00:12:06.225 line:-1 position:50%
but before the first transition
to foreground.


256
00:12:06.225 --> 00:12:08.928 line:-1 position:50%
Regardless of whether your app
uses storyboards,


257
00:12:08,928 --> 00:12:12,999 line:-1
you should use this new callback
for restoring state.


258
00:12:12.999 --> 00:12:14.734 line:-1 position:50%
Restoring state
from the activity


259
00:12:14,734 --> 00:12:16,502 line:-1
saved in the previous example


260
00:12:16,502 --> 00:12:20,673 line:-1
starts with the system calling
sceneRestoreInteractionState.


261
00:12:20.673 --> 00:12:24.010 line:-1 position:50%
Then, restoring the content
of the text field.


262
00:12:24.010 --> 00:12:27.246 line:-1 position:50%
Finally, restoring
its interaction state.


263
00:12:27.246 --> 00:12:29.916 line:-1 position:50%
It's critical that
the content be restored


264
00:12:29,916 --> 00:12:32,585 line:-1
before the interaction state.


265
00:12:32,585 --> 00:12:36,956 line:-1
Lastly, synchronously
restoring state can be complex.


266
00:12:36.956 --> 00:12:39.659 line:-1 position:50%
You may need to access
a database or load a file


267
00:12:39.659 --> 00:12:42.362 line:-1 position:50%
and don't want empty UI
during that time.


268
00:12:42,362 --> 00:12:43,463 line:-1
To account for this,


269
00:12:43,463 --> 00:12:48,701 line:-1
iPadOS 15 allows your app to
request a short-term extension.


270
00:12:48,701 --> 00:12:49,702 line:-1
During this extension,


271
00:12:49.702 --> 00:12:51.404 line:-1 position:50%
the launch image
will remain visible


272
00:12:51.404 --> 00:12:55.842 line:-1 position:50%
while still allowing
the main RunLoop to execute.


273
00:12:55,842 --> 00:12:57,410 line:-1
Once your content is loaded,


274
00:12:57.410 --> 00:13:01.614 line:-1 position:50%
the app should signal
to complete the restoration.


275
00:13:01.614 --> 00:13:04.384 line:-1 position:50%
This extension is short
and not intended to be used


276
00:13:04,384 --> 00:13:08,187 line:-1
for potentially long-running
tasks like network access.


277
00:13:08.187 --> 00:13:10.490 line:-1 position:50%
If your app
fails to signal completion,


278
00:13:10,490 --> 00:13:14,427 line:-1
or takes too long,
it will be closed by the system.


279
00:13:14.427 --> 00:13:16.596 line:-1 position:50%
To use extended state
restoration,


280
00:13:16.596 --> 00:13:19.465 line:-1 position:50%
start by requesting an extension
from the scene.


281
00:13:19,465 --> 00:13:22,502 line:-1
Then, kick off your
asynchronous work.


282
00:13:22,502 --> 00:13:23,870 line:-1
Once the content is loaded,


283
00:13:23.870 --> 00:13:28.107 line:-1 position:50%
restore it and tell the scene
to complete restoration.


284
00:13:28.107 --> 00:13:31.944 line:-1 position:50%
The scene will then display
your freshly restored UI.


285
00:13:31.944 --> 00:13:35.415 line:-1 position:50%
Supporting multitasking
in your app makes it shine,


286
00:13:35.415 --> 00:13:37.950 line:-1 position:50%
but to be a true
next-level iPad app,


287
00:13:37.950 --> 00:13:39.252 line:-1 position:50%
there's more to do.


288
00:13:39.252 --> 00:13:41.788 line:-1 position:50%
And now, over to Anant.


289
00:13:41.788 --> 00:13:43.823 line:-1 position:50%
Anant Jain: Thank you, Chris!


290
00:13:43,823 --> 00:13:47,994 line:-1
My name is Anant
and I'm a UIKit engineer.


291
00:13:47,994 --> 00:13:52,065 line:-1
People love that iPad is light
enough to hold in their hands


292
00:13:52,065 --> 00:13:55,802 line:-1
while still being able to attach
to a physical keyboard


293
00:13:55,802 --> 00:13:58,304 line:-1
at a moment's notice.


294
00:13:58.304 --> 00:14:00.540 line:-1 position:50%
They expect your app
to keep up with them


295
00:14:00,540 --> 00:14:03,509 line:-1
by having
great keyboard support.


296
00:14:03,509 --> 00:14:07,413 line:-1
iPadOS 15 introduces
several new features


297
00:14:07.413 --> 00:14:11.651 line:-1 position:50%
to bring your app's keyboard
shortcuts to the next level.


298
00:14:11,651 --> 00:14:15,121 line:-1
iPadOS 15 features
a totally new interface


299
00:14:15,121 --> 00:14:17,890 line:-1
for discovering
keyboard shortcuts.


300
00:14:17.890 --> 00:14:21.728 line:-1 position:50%
It structures each command
into familiar categories,


301
00:14:21,728 --> 00:14:22,895 line:-1
bringing increased parity


302
00:14:22,895 --> 00:14:25,765 line:-1
between the iPad
and Mac Catalyst versions


303
00:14:25,765 --> 00:14:27,100 line:-1
of your app.


304
00:14:27,100 --> 00:14:29,502 line:-1
The menu offers
a convenient search feature


305
00:14:29.502 --> 00:14:33.573 line:-1 position:50%
that can be brought up
from anywhere across the system.


306
00:14:33.573 --> 00:14:37.043 line:-1 position:50%
You can even tap
on a shortcut to trigger it.


307
00:14:37,043 --> 00:14:40,046 line:0
If you need a refresher on how
to support keyboard shortcuts


308
00:14:40,046 --> 00:14:42,782 line:0
with UIKeyCommand,
including how commands


309
00:14:42,782 --> 00:14:45,551 line:0
are dispatched
to the responder chain,


310
00:14:45,551 --> 00:14:49,255 line:0
check out "Support hardware
keyboards in your app."


311
00:14:49,255 --> 00:14:52,625 line:-1
On Mac Catalyst,
apps each have a global menu


312
00:14:52,625 --> 00:14:54,660 line:-1
called the main menu,
which is displayed


313
00:14:54,660 --> 00:14:57,997 line:-1
in the menu bar
at the top of the screen.


314
00:14:57,997 --> 00:15:01,234 line:-1
The main menu consists
of several category submenus,


315
00:15:01.234 --> 00:15:05.037 line:-1 position:50%
like File and Edit,
and these category menus


316
00:15:05.037 --> 00:15:11.210 line:-1 position:50%
in turn contain further submenus
with all the app's commands.


317
00:15:11,210 --> 00:15:13,246 line:-1
On iPadOS 15,
we've brought


318
00:15:13.246 --> 00:15:16.349 line:-1 position:50%
the main menu system
to iPad apps.


319
00:15:16,349 --> 00:15:17,817 line:-1
The new shortcut interface,


320
00:15:17,817 --> 00:15:20,686 line:-1
which appears by holding down
the Command key,


321
00:15:20,686 --> 00:15:23,322 line:-1
displays this menu.


322
00:15:23.322 --> 00:15:27.126 line:-1 position:50%
Now, the main menu system
is represented a bit differently


323
00:15:27.126 --> 00:15:29.428 line:-1 position:50%
on the iPad
compared to the Mac.


324
00:15:29,428 --> 00:15:32,098 line:-1
The Mac displays
the full submenu hierarchy


325
00:15:32.098 --> 00:15:33.900 line:-1 position:50%
within each category,


326
00:15:33,900 --> 00:15:37,170 line:-1
whereas the iPad
flattens those hierarchies.


327
00:15:37,170 --> 00:15:39,839 line:-1
Disabled and non-performable
commands


328
00:15:39,839 --> 00:15:42,041 line:-1
appear grayed out
on the Mac,


329
00:15:42,041 --> 00:15:44,977 line:-1
whereas they are hidden
on the iPad.


330
00:15:44.977 --> 00:15:47.413 line:-1 position:50%
Furthermore,
the iPad shortcut menu


331
00:15:47,413 --> 00:15:51,784 line:-1
is designed to help discover
keyboard shortcuts in an app.


332
00:15:51.784 --> 00:15:53.486 line:-1 position:50%
It won't display
keyless commands


333
00:15:53.486 --> 00:15:56.222 line:-1 position:50%
like the Mac menu bar does.


334
00:15:56.222 --> 00:15:58.324 line:-1 position:50%
By default,
the main menu contains


335
00:15:58.324 --> 00:16:03.229 line:-1 position:50%
all the system category menus
like File and Edit.


336
00:16:03,229 --> 00:16:05,364 line:-1
These include
all the system commands,


337
00:16:05.364 --> 00:16:07.066 line:-1 position:50%
like Undo and Redo,


338
00:16:07.066 --> 00:16:10.469 line:-1 position:50%
Paste and Match Style,
and so on.


339
00:16:10,469 --> 00:16:13,639 line:-1
iPadOS 15
adds the Print command


340
00:16:13,639 --> 00:16:17,476 line:-1
to this list of system commands,
which apps can get by adding


341
00:16:17,476 --> 00:16:20,580 line:-1
the UIApplication
SupportsPrintCommand key


342
00:16:20.580 --> 00:16:24.350 line:-1 position:50%
to their Info.plist.


343
00:16:24,350 --> 00:16:29,355 line:-1
Now that iPad apps on iPadOS 15
support the main menu system,


344
00:16:29.355 --> 00:16:31.991 line:-1 position:50%
they can use
the UIMenuBuilder API


345
00:16:31,991 --> 00:16:35,828 line:-1
to customize it,
just like Mac Catalyst apps.


346
00:16:35,828 --> 00:16:37,697 line:-1
In fact, if you already have


347
00:16:37,697 --> 00:16:39,799 line:-1
a Mac Catalyst version
of your app,


348
00:16:39,799 --> 00:16:43,402 line:-1
you've already done
most of the work.


349
00:16:43,402 --> 00:16:44,871 line:-1
Apps should use the builder


350
00:16:44.871 --> 00:16:48.507 line:-1 position:50%
to add all supported key
commands to their main menus.


351
00:16:48.507 --> 00:16:51.344 line:-1 position:50%
This is a change
from how apps would previously


352
00:16:51.344 --> 00:16:53.279 line:-1 position:50%
declare keyboard shortcuts:


353
00:16:53.279 --> 00:16:57.016 line:-1 position:50%
by overriding the keyCommands
property on UIResponder,


354
00:16:57.016 --> 00:17:01.921 line:-1 position:50%
or by calling addKeyCommand(_:)
on a view controller.


355
00:17:01.921 --> 00:17:04.390 line:-1 position:50%
Commands defined this way
do still work,


356
00:17:04.390 --> 00:17:06.125 line:-1 position:50%
but they'll appear
in a separate


357
00:17:06.125 --> 00:17:10.062 line:-1 position:50%
uncategorized section
of the new interface.


358
00:17:10.062 --> 00:17:13.332 line:-1 position:50%
Apps should remove key
command declarations like this


359
00:17:13,332 --> 00:17:16,836 line:-1
and instead add them
to the main menu.


360
00:17:16.836 --> 00:17:18.671 line:-1 position:50%
To customize the main menu,


361
00:17:18,671 --> 00:17:22,942 line:-1
override buildMenu(withbuilder:)
in your AppDelegate.


362
00:17:22,942 --> 00:17:25,711 line:-1
UIKit calls this method
at app launch


363
00:17:25.711 --> 00:17:29.181 line:-1 position:50%
and passes in
a UIMenuBuilder object.


364
00:17:29.181 --> 00:17:30.449 line:-1 position:50%
Apps should check if the builder


365
00:17:30,449 --> 00:17:33,286 line:-1
is modifying
the main menu system.


366
00:17:33,286 --> 00:17:38,424 line:-1
If so, they can use the builder
to make customizations.


367
00:17:38.424 --> 00:17:41.694 line:-1 position:50%
Suppose an app wants some
key commands in the File menu


368
00:17:41,694 --> 00:17:44,196 line:-1
for working with tabs.


369
00:17:44,196 --> 00:17:48,868 line:-1
The app simply creates a submenu
using the UIMenu API


370
00:17:48,868 --> 00:17:51,003 line:-1
and adds the desired
key commands


371
00:17:51.003 --> 00:17:53.105 line:-1 position:50%
as that menu's children.


372
00:17:53.105 --> 00:17:56.242 line:-1 position:50%
Then the app calls
the insertChild method


373
00:17:56.242 --> 00:17:58.077 line:-1 position:50%
on the builder object


374
00:17:58.077 --> 00:18:02.014 line:-1 position:50%
to insert the submenu
into the File menu.


375
00:18:02.014 --> 00:18:05.418 line:-1 position:50%
To reference an existing element
in the main menu system --


376
00:18:05,418 --> 00:18:08,120 line:-1
like the File menu,
in this case --


377
00:18:08,120 --> 00:18:11,757 line:-1
apps should specify
the element's identifier.


378
00:18:11,757 --> 00:18:14,226 line:-1
The built-in
system menu identifiers


379
00:18:14,226 --> 00:18:19,465 line:-1
are defined as constants
under UIMenu.Identifier.


380
00:18:19,465 --> 00:18:23,302 line:-1
Apps can easily create
their own menu categories, too.


381
00:18:23,302 --> 00:18:25,938 line:-1
Here, the app creates
a Bookmarks menu --


382
00:18:25,938 --> 00:18:29,241 line:-1
once again,
using the UIMenu API.


383
00:18:29,241 --> 00:18:31,177 line:-1
Then, the app uses the builder


384
00:18:31.177 --> 00:18:34.246 line:-1 position:50%
to insert that menu
into the root menu --


385
00:18:34,246 --> 00:18:37,416 line:-1
in this case,
after the system View menu.


386
00:18:37.416 --> 00:18:39.018 line:-1 position:50%
That's all it takes!


387
00:18:39,018 --> 00:18:41,187 line:-1
Now, the builder can be used


388
00:18:41,187 --> 00:18:44,457 line:-1
to make further insertions
into the Bookmarks menu,


389
00:18:44.457 --> 00:18:46.959 line:-1 position:50%
just as it would
with the File menu.


390
00:18:46.959 --> 00:18:49.762 line:-1 position:50%
Just pass in
the new menu's identifier,


391
00:18:49,762 --> 00:18:52,765 line:-1
which UIKit automatically
generates.


392
00:18:52,765 --> 00:18:55,334 line:-1
Now, I keep mentioning
identifiers.


393
00:18:55.334 --> 00:18:58.304 line:-1 position:50%
UIMenuBuilder will enforce
that each element


394
00:18:58.304 --> 00:19:02.108 line:-1 position:50%
in the main menu system
has a unique identifier,


395
00:19:02.108 --> 00:19:04.877 line:-1 position:50%
including individual commands.


396
00:19:04.877 --> 00:19:06.846 line:-1 position:50%
Suppose an app
inserts key commands


397
00:19:06,846 --> 00:19:11,751 line:-1
to display content
either as a list or as a grid.


398
00:19:11.751 --> 00:19:14.220 line:-1 position:50%
Both commands
share the same action:


399
00:19:14,220 --> 00:19:15,855 line:-1
changeViewMode(_:).


400
00:19:15.855 --> 00:19:17.690 line:-1 position:50%
In the main menu system,


401
00:19:17.690 --> 00:19:21.560 line:-1 position:50%
commands are implicitly
identified by their actions,


402
00:19:21,560 --> 00:19:25,297 line:-1
so both of these commands
share the same identifier.


403
00:19:25,297 --> 00:19:28,667 line:-1
UIMenuBuilder won't allow
both commands to be inserted


404
00:19:28.667 --> 00:19:31.804 line:-1 position:50%
unless they have
different identifiers.


405
00:19:31,804 --> 00:19:34,173 line:-1
One way to distinguish
these commands


406
00:19:34,173 --> 00:19:37,710 line:-1
is to give them different
propertyList values.


407
00:19:37,710 --> 00:19:40,513 line:-1
But a better way is to simply
give each command


408
00:19:40,513 --> 00:19:44,817 line:-1
a unique action describing
what it specifically does.


409
00:19:44.817 --> 00:19:48.320 line:-1 position:50%
The builder also enforces that
keyboard shortcut combinations


410
00:19:48.320 --> 00:19:51.290 line:-1 position:50%
in the main menu are unique.


411
00:19:51,290 --> 00:19:54,160 line:-1
Suppose an app inserts
a Get Info key command


412
00:19:54,160 --> 00:19:56,462 line:-1
on Command-I.


413
00:19:56.462 --> 00:19:59.999 line:-1 position:50%
Because the system Italic
shortcut in the text style menu


414
00:19:59,999 --> 00:20:05,671 line:-1
shares the same shortcut,
this insertion will also fail.


415
00:20:05.671 --> 00:20:08.441 line:-1 position:50%
Once again,
there are two solutions.


416
00:20:08.441 --> 00:20:11.210 line:-1 position:50%
The app can change the Get Info
shortcut to something


417
00:20:11.210 --> 00:20:13.846 line:-1 position:50%
that doesn't collide
with an existing shortcut,


418
00:20:13,846 --> 00:20:16,749 line:-1
such as Control-Command-I.


419
00:20:16.749 --> 00:20:19.285 line:-1 position:50%
Alternatively,
the app can tell the builder


420
00:20:19,285 --> 00:20:23,756 line:-1
to remove the text style
commands if they're not needed.


421
00:20:23,756 --> 00:20:26,058 line:-1
If an insertion
includes a duplicate,


422
00:20:26,058 --> 00:20:28,828 line:-1
then UIMenuBuilder
fails that insertion


423
00:20:28.828 --> 00:20:31.797 line:-1 position:50%
and logs an error in the console
showing either


424
00:20:31,797 --> 00:20:36,769 line:-1
the duplicated key commands
or the shared identifiers.


425
00:20:36.769 --> 00:20:39.872 line:-1 position:50%
If you're finding your
insertions aren't appearing,


426
00:20:39,872 --> 00:20:42,541 line:-1
chances are there's
a duplicate somewhere,


427
00:20:42,541 --> 00:20:46,512 line:-1
so look for logs like this
in the console.


428
00:20:46.512 --> 00:20:48.681 line:-1 position:50%
After the call to
buildMenu(with builder:)


429
00:20:48,681 --> 00:20:51,383 line:-1
finishes, the app's
main menu appears


430
00:20:51.383 --> 00:20:56.122 line:-1 position:50%
in the Mac menu bar
and the iPad shortcut overlay.


431
00:20:56,122 --> 00:20:58,824 line:-1
There is one problem,
though.


432
00:20:58,824 --> 00:21:01,360 line:-1
The app added a submenu
with commands


433
00:21:01.360 --> 00:21:05.397 line:-1 position:50%
to sort bookmarks
either by name or by date.


434
00:21:05.397 --> 00:21:07.032 line:-1 position:50%
But because
the iPad shortcut overlay


435
00:21:07,032 --> 00:21:09,735 line:-1
doesn't display
the submenu hierarchy,


436
00:21:09.735 --> 00:21:14.106 line:-1 position:50%
it's not clear what
these shortcuts do on iPadOS.


437
00:21:14.106 --> 00:21:17.143 line:-1 position:50%
For situations like this,
set a more descriptive


438
00:21:17.143 --> 00:21:20.913 line:-1 position:50%
discoverability title
on the key commands.


439
00:21:20,913 --> 00:21:23,582 line:-1
iPadOS prefers
the discoverability title


440
00:21:23.582 --> 00:21:27.553 line:-1 position:50%
over the regular title
if both are provided.


441
00:21:27,553 --> 00:21:31,490 line:-1
Now, I mentioned earlier
that individual responders


442
00:21:31.490 --> 00:21:34.260 line:-1 position:50%
should avoid declaring
keyboard shortcuts


443
00:21:34.260 --> 00:21:37.830 line:-1 position:50%
and instead declare them
in the main menu system.


444
00:21:37.830 --> 00:21:41.734 line:-1 position:50%
However, responders should
still implement action methods


445
00:21:41,734 --> 00:21:44,170 line:-1
for main menu commands.


446
00:21:44.170 --> 00:21:45.971 line:-1 position:50%
When key commands
are triggered,


447
00:21:45.971 --> 00:21:51.343 line:-1 position:50%
UIKit automatically dispatches
the action to a responder.


448
00:21:51,343 --> 00:21:56,115 line:-1
UIKit does this by traversing
the app's responder chain.


449
00:21:56,115 --> 00:22:00,419 line:-1
As soon as it finds a responder
that can perform the action,


450
00:22:00,419 --> 00:22:04,089 line:-1
it calls that responder's
action method.


451
00:22:04,089 --> 00:22:07,026 line:-1
If nothing in the chain
can perform the action,


452
00:22:07.026 --> 00:22:10.529 line:-1 position:50%
then the key command
isn't performable.


453
00:22:10,529 --> 00:22:13,199 line:0
If you're new to UIResponder
concepts,


454
00:22:13,199 --> 00:22:15,501 line:0
"Support hardware
keyboards in your app"


455
00:22:15,501 --> 00:22:19,238 position:50%
has a fantastic introduction
to how it works.


456
00:22:19,238 --> 00:22:21,707 line:0
"Qualities of
a great Mac Catalyst app"


457
00:22:21,707 --> 00:22:24,977 line:0
also dives into
a bit more detail.


458
00:22:24.977 --> 00:22:28.447 line:-1 position:50%
When UIKit performs a responder
search along the chain,


459
00:22:28.447 --> 00:22:31.984 line:-1 position:50%
it calls two useful
UIResponder methods.


460
00:22:31.984 --> 00:22:35.154 line:-1 position:50%
Apps can override these
methods in their responders


461
00:22:35,154 --> 00:22:37,990 line:-1
to improve their key commands.


462
00:22:37.990 --> 00:22:41.393 line:-1 position:50%
The first is canPerformAction
(_:withSender:),


463
00:22:41.393 --> 00:22:43.095 line:-1 position:50%
which UIKit uses to check


464
00:22:43,095 --> 00:22:46,398 line:-1
if a responder
can perform an action.


465
00:22:46,398 --> 00:22:49,068 line:-1
By default, this returns true


466
00:22:49,068 --> 00:22:52,504 line:-1
if the responder implements
that action method;


467
00:22:52,504 --> 00:22:55,507 line:-1
otherwise, it returns false.


468
00:22:55.507 --> 00:22:59.678 line:-1 position:50%
Responders can override this
to add custom logic.


469
00:22:59,678 --> 00:23:02,481 line:-1
For example,
a web browser can tell UIKit


470
00:23:02.481 --> 00:23:06.218 line:-1 position:50%
that the closeTab command
isn't performable


471
00:23:06.218 --> 00:23:09.255 line:-1 position:50%
if there are no open tabs.


472
00:23:09,255 --> 00:23:13,525 line:-1
Since UIKit can't find a target
responder for that action,


473
00:23:13,525 --> 00:23:16,395 line:-1
the command will be
non-performable


474
00:23:16,395 --> 00:23:20,366 line:-1
and it won't be shown
in the shortcut interface.


475
00:23:20.366 --> 00:23:22.568 line:-1 position:50%
Note that overrides
for this method


476
00:23:22,568 --> 00:23:26,772 line:-1
must call super
for unhandled cases.


477
00:23:26.772 --> 00:23:30.209 line:-1 position:50%
The other useful method
is validate(_ command:).


478
00:23:30,209 --> 00:23:33,679 line:-1
When UIKit finds a target
responder for a key command,


479
00:23:33.679 --> 00:23:36.482 line:-1 position:50%
it calls this method
on that responder


480
00:23:36.482 --> 00:23:39.852 line:-1 position:50%
and passes in
a copy of the command.


481
00:23:39.852 --> 00:23:42.488 line:-1 position:50%
Responders can override
validate(_ command:)


482
00:23:42,488 --> 00:23:44,690 line:-1
to update the appearance
of the command


483
00:23:44,690 --> 00:23:47,593 line:-1
for the current state
of the app.


484
00:23:47,593 --> 00:23:49,962 line:-1
Here, the app updates the title


485
00:23:49.962 --> 00:23:52.031 line:-1 position:50%
of the toggleBookmark(_:)
command


486
00:23:52.031 --> 00:23:55.734 line:-1 position:50%
based on whether or not
the current page is bookmarked.


487
00:23:55.734 --> 00:23:57.403 line:-1 position:50%
The title set in this method


488
00:23:57.403 --> 00:24:00.973 line:-1 position:50%
will reflect in the shortcut
interface when it appears.


489
00:24:00,973 --> 00:24:03,709 line:-1
In iPadOS 15,
UIKit is introducing


490
00:24:03,709 --> 00:24:06,512 line:-1
a major change
to the responder chain.


491
00:24:06.512 --> 00:24:08.747 line:-1 position:50%
When apps
adopt keyboard navigation


492
00:24:08,747 --> 00:24:10,215 line:-1
with the focus system,


493
00:24:10.215 --> 00:24:14.019 line:-1 position:50%
then responder traversal
will begin at the focused item


494
00:24:14.019 --> 00:24:16.855 line:-1 position:50%
rather than the first responder.


495
00:24:16,855 --> 00:24:21,193 line:-1
This change plays incredibly
well with key commands.


496
00:24:21.193 --> 00:24:23.429 line:-1 position:50%
Photos, for example,
allows users


497
00:24:23.429 --> 00:24:27.132 line:-1 position:50%
to work with their photo library
using just the keyboard.


498
00:24:27.132 --> 00:24:29.601 line:-1 position:50%
When users focus
a cell in the grid,


499
00:24:29.601 --> 00:24:32.571 line:-1 position:50%
they can hit the Space bar
to view that photo.


500
00:24:32,571 --> 00:24:35,207 line:-1
They can even hit
Command-C to copy that photo


501
00:24:35,207 --> 00:24:37,509 line:-1
for pasting into another app.


502
00:24:37.509 --> 00:24:40.779 line:-1 position:50%
Each cell implements
various key command actions,


503
00:24:40,779 --> 00:24:44,049 line:-1
and since responder traversal
starts at the focused item,


504
00:24:44.049 --> 00:24:47.453 line:-1 position:50%
then the key commands
target the cell.


505
00:24:47.453 --> 00:24:50.789 line:-1 position:50%
In short, the focus system
levels up key commands


506
00:24:50,789 --> 00:24:53,092 line:-1
and the responder chain.


507
00:24:53.092 --> 00:24:54.460 line:-1 position:50%
Take advantage of it to support


508
00:24:54,460 --> 00:24:58,464 line:-1
powerful contextual shortcuts
in your app.


509
00:24:58,464 --> 00:25:00,099 line:0
To learn more, check out


510
00:25:00,099 --> 00:25:03,569 position:50%
"Focus on iPad
keyboard navigation."


511
00:25:03,569 --> 00:25:06,705 line:-1
Finally, iPadOS 15
and macOS 12


512
00:25:06.705 --> 00:25:10.209 line:-1 position:50%
introduce keyboard shortcut
localization.


513
00:25:10,209 --> 00:25:12,511 line:-1
When you build your app
with these SDKs,


514
00:25:12.511 --> 00:25:15.781 line:-1 position:50%
the system automatically
localizes shortcut modifiers


515
00:25:15.781 --> 00:25:19.618 line:-1 position:50%
and inputs for each
keyboard layout.


516
00:25:19,618 --> 00:25:22,721 line:-1
Take the Command-backslash
shortcut, for example.


517
00:25:22,721 --> 00:25:25,357 line:-1
While the shortcut
works on a US keyboard,


518
00:25:25,357 --> 00:25:28,227 line:-1
it's impossible to perform
on a Japanese keyboard,


519
00:25:28,227 --> 00:25:31,096 line:-1
since that layout
has no backslash key.


520
00:25:31.096 --> 00:25:34.666 line:-1 position:50%
So the system will remap the
shortcut for Japanese keyboards.


521
00:25:34,666 --> 00:25:36,402 line:-1
This means apps should not


522
00:25:36,402 --> 00:25:39,471 line:-1
localize shortcut modifiers
or inputs,


523
00:25:39,471 --> 00:25:42,408 line:-1
and instead let the system
do the work.


524
00:25:42,408 --> 00:25:45,744 line:-1
Apps can also opt out
of automatic localization,


525
00:25:45,744 --> 00:25:50,983 line:-1
either at the app-wide level
or on a per-shortcut basis.


526
00:25:50.983 --> 00:25:53.652 line:-1 position:50%
When the system
localizes shortcuts,


527
00:25:53,652 --> 00:25:57,489 line:-1
it also mirrors them
for right-to-left layouts.


528
00:25:57.489 --> 00:26:00.292 line:-1 position:50%
For example, a shortcut
to navigate backwards


529
00:26:00.292 --> 00:26:02.060 line:-1 position:50%
with Command-left bracket


530
00:26:02.060 --> 00:26:05.097 line:-1 position:50%
is flipped
to Command-right bracket.


531
00:26:05,097 --> 00:26:07,099 line:-1
If a shortcut
shouldn't be mirrored,


532
00:26:07.099 --> 00:26:09.435 line:-1 position:50%
set the command's
allowsAutomaticMirroring


533
00:26:09,435 --> 00:26:12,337 line:-1
property to false
to disable mirroring


534
00:26:12,337 --> 00:26:17,042 line:-1
without disabling
automatic localization entirely.


535
00:26:17.042 --> 00:26:21.413 line:-1 position:50%
iPadOS 15 is a huge release
for keyboard shortcuts.


536
00:26:21,413 --> 00:26:23,015 line:-1
There's a ton
of other enhancements


537
00:26:23,015 --> 00:26:25,784 line:-1
on top of everything
we've covered today.


538
00:26:25.784 --> 00:26:28.921 line:-1 position:50%
So you've adopted all
the new Multitasking features,


539
00:26:28.921 --> 00:26:32.224 line:-1 position:50%
and you've built
great keyboard support.


540
00:26:32.224 --> 00:26:35.294 line:-1 position:50%
Now, Mohammed will give you
a few pointers


541
00:26:35,294 --> 00:26:39,731 line:-1
to take your iPad app
to the highest level.


542
00:26:39,731 --> 00:26:42,701 line:-1
Mohammed Jisrawi: Thanks, Anant!
Hi, I'm Mohammed.


543
00:26:42.701 --> 00:26:44.269 line:-1 position:50%
Let's talk about
the improvements


544
00:26:44.269 --> 00:26:48.574 line:-1 position:50%
iPadOS 15 brings
to the system pointer.


545
00:26:48,574 --> 00:26:52,744 line:-1
iPadOS 13.4 introduced
an adaptive system pointer


546
00:26:52.744 --> 00:26:56.615 line:-1 position:50%
that bridges between
the touch-based UI of the iPad


547
00:26:56.615 --> 00:27:00.619 line:-1 position:50%
and the precision
of a mouse or trackpad.


548
00:27:00,619 --> 00:27:02,554 position:50%
If you're new
to pointer interactions,


549
00:27:02,554 --> 00:27:05,357 line:0
take a moment to familiarize
yourself with them


550
00:27:05,357 --> 00:27:08,126 line:0
and check out
these previous videos.


551
00:27:08,126 --> 00:27:09,862 line:0
"Build for the iPadOS pointer"


552
00:27:09,862 --> 00:27:13,098 line:0
breaks down
the pointer interaction APIs.


553
00:27:13,098 --> 00:27:15,000 position:50%
"Design for the iPadOS Pointer"


554
00:27:15,000 --> 00:27:17,769 line:0
dives into the design philosophy
behind them


555
00:27:17,769 --> 00:27:22,140 line:0
and discusses best practices
when adopting them in your app.


556
00:27:22,140 --> 00:27:26,845 position:50%
iPadOS 15 brings over some
familiar Mac user interactions


557
00:27:26,845 --> 00:27:30,816 line:0
in a way that's consistent
with the iPad's design language.


558
00:27:30,816 --> 00:27:33,151 position:50%
It also introduces
some new concepts


559
00:27:33,151 --> 00:27:37,222 position:50%
that enhance usability
and clarity.


560
00:27:37.222 --> 00:27:40.058 line:-1 position:50%
The first of these additions
is band selection,


561
00:27:40,058 --> 00:27:44,096 line:-1
a new pointer-specific
multiselection experience


562
00:27:44.096 --> 00:27:48.133 line:-1 position:50%
that should be familiar
to anyone who's used a Mac.


563
00:27:48,133 --> 00:27:52,471 line:-1
In iPadOS 15, when you click
and drag in a collection view,


564
00:27:52,471 --> 00:27:55,474 line:-1
the pointer stretches
into a rectangle,


565
00:27:55,474 --> 00:27:57,676 line:-1
and the collection view
selects the items


566
00:27:57,676 --> 00:28:00,312 line:-1
that the rectangle encompasses.


567
00:28:00,312 --> 00:28:02,014 line:-1
Of course this
translates naturally


568
00:28:02.014 --> 00:28:06.051 line:-1 position:50%
to the familiar Mac UI
on Mac Catalyst apps.


569
00:28:06.051 --> 00:28:10.088 line:-1 position:50%
This interaction is built into
non-list UICollectionViews.


570
00:28:10.088 --> 00:28:13.425 line:-1 position:50%
Any UICollectionView
that supports the existing


571
00:28:13,425 --> 00:28:16,461 line:-1
one- and two-finger
multiselection gestures


572
00:28:16,461 --> 00:28:20,332 line:-1
via the shouldBeginMultiple
SelectionInteraction API


573
00:28:20,332 --> 00:28:25,003 line:-1
gets this behavior automatically
in iPadOS 15.


574
00:28:25.003 --> 00:28:27.072 line:-1 position:50%
For anything other than
a UICollectionView,


575
00:28:27,072 --> 00:28:30,609 line:-1
the new
UIBandSelectionInteraction API


576
00:28:30,609 --> 00:28:35,080 line:-1
allows you to easily adopt
this experience in your app.


577
00:28:35.080 --> 00:28:38.050 line:-1 position:50%
Since the selection logic
is completely up to you,


578
00:28:38,050 --> 00:28:41,119 line:-1
you're able to support
custom selection behaviors


579
00:28:41,119 --> 00:28:44,222 line:-1
and have your UI react
to the changing selection


580
00:28:44,222 --> 00:28:46,725 line:-1
in any way you choose.


581
00:28:46.725 --> 00:28:49.361 line:-1 position:50%
To get started,
instantiate the interaction


582
00:28:49.361 --> 00:28:53.532 line:-1 position:50%
with a selection handler to be
called as the pointer moves


583
00:28:53.532 --> 00:28:56.301 line:-1 position:50%
and the interaction's
state changes.


584
00:28:56,301 --> 00:28:59,304 line:-1
Once it's created,
add the interaction to your view


585
00:28:59.304 --> 00:29:02.541 line:-1 position:50%
as you would
any other UIInteraction.


586
00:29:02,541 --> 00:29:04,042 line:-1
In the handler,
you can implement


587
00:29:04.042 --> 00:29:07.179 line:-1 position:50%
your custom selection logic
by responding to changes


588
00:29:07,179 --> 00:29:11,283 line:-1
in the interaction's state
and selectionRect.


589
00:29:11.283 --> 00:29:13.785 line:-1 position:50%
Here we have
a simple implementation


590
00:29:13,785 --> 00:29:16,221 line:-1
that sets the selection
to the items


591
00:29:16.221 --> 00:29:18.390 line:-1 position:50%
within the interaction's
selectionRect


592
00:29:18,390 --> 00:29:21,326 line:-1
while the pointer is moving.


593
00:29:21.326 --> 00:29:23.695 line:-1 position:50%
It then finalizes
the selection session


594
00:29:23,695 --> 00:29:25,831 line:-1
when the primary mouse button
is released


595
00:29:25,831 --> 00:29:28,533 line:-1
and the interaction ends.


596
00:29:28,533 --> 00:29:30,836 line:-1
In addition to basic selection,


597
00:29:30,836 --> 00:29:33,438 line:-1
UICollectionView's
built-in band selection


598
00:29:33.438 --> 00:29:35.574 line:-1 position:50%
supports some common
keyboard shortcuts


599
00:29:35.574 --> 00:29:37.743 line:-1 position:50%
out of the box.


600
00:29:37,743 --> 00:29:40,812 line:0
Holding Shift at the start
of the drag, for example,


601
00:29:40,812 --> 00:29:43,982 position:50%
causes items to be added
to an existing selection


602
00:29:43,982 --> 00:29:46,852 position:50%
rather than replacing
the currently selected items.


603
00:29:46,852 --> 00:29:49,788 position:50%
Holding Command toggles
the selection state of items


604
00:29:49,788 --> 00:29:51,456 line:0
in the selection rect.


605
00:29:51,456 --> 00:29:53,625 line:-1
This can be implemented
in custom UI


606
00:29:53.625 --> 00:29:57.496 line:-1 position:50%
using the interaction's
initialModifierFlags property,


607
00:29:57.496 --> 00:30:01.233 line:-1 position:50%
which provides the keys
held at the start of the drag.


608
00:30:01.233 --> 00:30:03.735 line:-1 position:50%
Since it's a set of all
the pressed modifiers,


609
00:30:03.735 --> 00:30:06.638 line:-1 position:50%
you can respond
to arbitrary key combinations


610
00:30:06,638 --> 00:30:09,675 line:-1
to support custom
or more advanced behavior


611
00:30:09,675 --> 00:30:11,677 line:-1
that's specific to your app.


612
00:30:11,677 --> 00:30:13,445 line:-1
The second addition
to the system pointer


613
00:30:13.445 --> 00:30:16.882 line:-1 position:50%
is the ability
to attach accessories.


614
00:30:16,882 --> 00:30:19,818 line:-1
Accessories communicate
additional information


615
00:30:19.818 --> 00:30:24.122 line:-1 position:50%
and provide contextual hints
by combining secondary shapes


616
00:30:24,122 --> 00:30:26,158 line:-1
with the primary pointer.


617
00:30:26.158 --> 00:30:28.627 line:-1 position:50%
For instance,
in the example on the left,


618
00:30:28,627 --> 00:30:31,063 line:-1
the two arrows indicate
that this view


619
00:30:31.063 --> 00:30:32.864 line:-1 position:50%
can be dragged horizontally.


620
00:30:32,864 --> 00:30:34,199 line:-1
In the example on the right,


621
00:30:34.199 --> 00:30:36.535 line:-1 position:50%
the plus provides
some additional context


622
00:30:36,535 --> 00:30:39,171 line:-1
for this Add to Cart button.


623
00:30:39,171 --> 00:30:41,740 line:-1
There are a few key distinctions
between accessories


624
00:30:41.740 --> 00:30:44.342 line:-1 position:50%
and using a custom
pointer shape.


625
00:30:44.342 --> 00:30:46.812 line:-1 position:50%
Accessories
are visually separate


626
00:30:46.812 --> 00:30:49.781 line:-1 position:50%
and secondary
to the main pointer.


627
00:30:49.781 --> 00:30:53.018 line:-1 position:50%
This is emphasized by the fact
that they may be rendered


628
00:30:53.018 --> 00:30:54.386 line:-1 position:50%
with a different appearance


629
00:30:54,386 --> 00:30:58,356 line:-1
and animate separately
from the main pointer.


630
00:30:58.356 --> 00:31:01.359 line:-1 position:50%
They are independent units
which can be combined


631
00:31:01.359 --> 00:31:03.228 line:-1 position:50%
and positioned
around the pointer


632
00:31:03.228 --> 00:31:06.164 line:-1 position:50%
to communicate different ideas.


633
00:31:06,164 --> 00:31:07,899 line:-1
Since they are independent,


634
00:31:07,899 --> 00:31:11,236 line:-1
they can be combined
with any pointer style.


635
00:31:11,236 --> 00:31:15,040 line:-1
Here's a demonstration of how
the same set of accessories --


636
00:31:15.040 --> 00:31:17.275 line:-1 position:50%
two arrows indicating
draggability --


637
00:31:17.275 --> 00:31:20.779 line:-1 position:50%
can be combined
with different pointer styles.


638
00:31:20,779 --> 00:31:23,882 line:-1
On the left, they're combined
with a lift effect


639
00:31:23,882 --> 00:31:28,186 line:-1
where the pointer merges
with the view and lifts it up.


640
00:31:28,186 --> 00:31:31,356 line:-1
In the middle, they're
alongside a highlight effect,


641
00:31:31,356 --> 00:31:34,192 line:-1
where the pointer
turns into a rounded rectangle


642
00:31:34,192 --> 00:31:37,062 line:-1
and goes under the view.


643
00:31:37,062 --> 00:31:41,032 position:50%
On the right, they appear
with the default system pointer


644
00:31:41,032 --> 00:31:46,304 line:0
using the new
UIPointerStyle.system() API.


645
00:31:46,304 --> 00:31:49,407 line:0
So we're able to provide
this additional context


646
00:31:49,407 --> 00:31:53,078 position:50%
while still using the ideal
effect for the situation,


647
00:31:53,078 --> 00:31:56,214 position:50%
without sacrificing the
liveliness of the pointer,


648
00:31:56,214 --> 00:31:59,184 position:50%
and while still maintaining
its deep relationship


649
00:31:59,184 --> 00:32:00,919 position:50%
with the app's UI.


650
00:32:00.919 --> 00:32:03.421 line:-1 position:50%
Just like it animates
between pointer styles,


651
00:32:03,421 --> 00:32:06,424 line:-1
the system will automatically
animate the appearance


652
00:32:06.424 --> 00:32:09.327 line:-1 position:50%
and disappearance
of accessories.


653
00:32:09,327 --> 00:32:10,996 line:-1
It'll also seamlessly animate


654
00:32:10.996 --> 00:32:14.132 line:-1 position:50%
between accessory
shapes and position.


655
00:32:14,132 --> 00:32:15,901 line:-1
The act of transitioning
accessories


656
00:32:15.901 --> 00:32:19.070 line:-1 position:50%
while a given effect is active
can be meaningful.


657
00:32:19.070 --> 00:32:21.573 line:-1 position:50%
Such a transition can be
used to communicate


658
00:32:21,573 --> 00:32:26,444 line:-1
a change in state or
behavior in the underlying UI.


659
00:32:26.444 --> 00:32:28.113 line:-1 position:50%
In the example on the left,


660
00:32:28.113 --> 00:32:31.349 line:-1 position:50%
the transition
from a plus to a no sign


661
00:32:31.349 --> 00:32:34.619 line:-1 position:50%
may indicate that an operation
that was previously possible


662
00:32:34,619 --> 00:32:38,824 line:-1
is no longer permitted.


663
00:32:38,824 --> 00:32:42,961 line:-1
Pointer accessories are
composed of a UIPointerShape


664
00:32:42,961 --> 00:32:45,864 line:-1
and a
UIPointerAccessory.Position,


665
00:32:45.864 --> 00:32:48.133 line:-1 position:50%
which describes
the desired position


666
00:32:48.133 --> 00:32:50.502 line:-1 position:50%
as an offset from
the pointer's midpoint


667
00:32:50.502 --> 00:32:54.172 line:-1 position:50%
and an angle from the top.


668
00:32:54,172 --> 00:32:57,209 line:0
For convenience, UIKit
provides some predefined values


669
00:32:57,209 --> 00:33:00,645 line:0
for positions
around the pointer.


670
00:33:00,645 --> 00:33:03,782 line:0
If the predefined positions
don't quite fit your needs,


671
00:33:03,782 --> 00:33:05,584 line:0
you can use them
as a starting point


672
00:33:05,584 --> 00:33:08,787 position:50%
and customize individual
properties.


673
00:33:08,787 --> 00:33:11,723 position:50%
This example starts
with the topRight position


674
00:33:11,723 --> 00:33:14,226 line:0
and customizes the offset.


675
00:33:14,226 --> 00:33:17,662 position:50%
You can also define
entirely custom positions,


676
00:33:17,662 --> 00:33:18,730 position:50%
as in this example,


677
00:33:18,730 --> 00:33:23,535 position:50%
which creates a position
with a custom offset and angle.


678
00:33:23.535 --> 00:33:26.671 line:-1 position:50%
To set up the example we saw at
the beginning of this segment,


679
00:33:26.671 --> 00:33:30.408 line:-1 position:50%
we'll create a UITargetedPreview
with our view


680
00:33:30,408 --> 00:33:33,411 line:-1
and use that to create
a UIPointerStyle


681
00:33:33.411 --> 00:33:36.381 line:-1 position:50%
with a lift effect.


682
00:33:36,381 --> 00:33:39,417 line:-1
Then we'll set the style's
new accessories property


683
00:33:39.417 --> 00:33:44.055 line:-1 position:50%
to an array that contains
our two arrow accessories.


684
00:33:44.055 --> 00:33:46.758 line:-1 position:50%
UIKit provides a premade
arrow accessory,


685
00:33:46,758 --> 00:33:48,393 line:-1
so we can just create
two of those


686
00:33:48,393 --> 00:33:52,063 line:-1
positioned on the left and right
sides of the effect.


687
00:33:52,063 --> 00:33:54,666 line:-1
So now when the pointer
hovers over this view,


688
00:33:54.666 --> 00:33:58.703 line:-1 position:50%
the two arrows animate out
as the view lifts,


689
00:33:58.703 --> 00:34:01.106 line:-1 position:50%
hinting that it can be dragged.


690
00:34:01,106 --> 00:34:02,540 line:-1
If you've ever tried
to implement


691
00:34:02,540 --> 00:34:03,842 line:-1
this sort of interaction


692
00:34:03,842 --> 00:34:07,379 line:-1
where a view with
a pointer effect is draggable,


693
00:34:07.379 --> 00:34:10.582 line:-1 position:50%
you've probably noticed
something like this.


694
00:34:10.582 --> 00:34:13.885 line:-1 position:50%
When the pointer reaches
the edge of the pointer region,


695
00:34:13.885 --> 00:34:17.822 line:-1 position:50%
it disengages from the lifted
view and the effect ends.


696
00:34:17,822 --> 00:34:21,126 line:-1
This is usually desirable,
since it prevents the pointer


697
00:34:21,126 --> 00:34:25,096 line:-1
from sticking to views
as it moves around.


698
00:34:25.096 --> 00:34:28.466 line:-1 position:50%
However, in scenarios like this,
the ideal experience


699
00:34:28,466 --> 00:34:31,136 line:-1
would be for the pointer effect
to remain stable


700
00:34:31,136 --> 00:34:35,774 line:-1
and latch to the view and follow
it along as it's dragged.


701
00:34:35.774 --> 00:34:37.709 line:-1 position:50%
To better enable
these sorts of interactions,


702
00:34:37.709 --> 00:34:41.713 line:-1 position:50%
iPadOS 15 introduces
the concept of latchingAxes


703
00:34:41.713 --> 00:34:43.548 line:-1 position:50%
on UIPointerRegion.


704
00:34:43,548 --> 00:34:46,017 position:50%
When a region latches
along a given axis,


705
00:34:46,017 --> 00:34:49,354 line:0
its pointer effect follows
the pointer along the axis


706
00:34:49,354 --> 00:34:51,623 line:0
when the primary
mouse button is pressed.


707
00:34:51,623 --> 00:34:54,326 line:0
A horizontally latching region
lets you drag freely


708
00:34:54,326 --> 00:34:59,297 position:50%
along the x-axis while still
rubberbanding along the y-axis.


709
00:34:59,297 --> 00:35:00,665 line:0
A vertically latching one


710
00:35:00,665 --> 00:35:04,002 line:0
lets you drag freely
along the y-axis.


711
00:35:04,002 --> 00:35:05,971 line:0
And one that latches along both


712
00:35:05,971 --> 00:35:09,641 line:0
lets you drag freely
along both axes.


713
00:35:09,641 --> 00:35:11,276 line:-1
These new tools
can be used to build


714
00:35:11,276 --> 00:35:14,679 line:-1
some really powerful
new experiences.


715
00:35:14,679 --> 00:35:17,115 line:-1
Here they are combined
in a document editing app


716
00:35:17,115 --> 00:35:19,584 line:-1
like Pages or Keynote.


717
00:35:19.584 --> 00:35:23.989 line:-1 position:50%
This image can be selected
using band selection.


718
00:35:23,989 --> 00:35:27,292 line:-1
Selecting the image causes
dragging indicators to appear,


719
00:35:27,292 --> 00:35:30,128 line:-1
and when the pointer
hovers over an indicator,


720
00:35:30.128 --> 00:35:32.163 line:-1 position:50%
accessories appear
to hint at


721
00:35:32,163 --> 00:35:35,400 line:-1
how the image will be resized
if it's dragged.


722
00:35:35.400 --> 00:35:39.537 line:-1 position:50%
And finally, latching allows the
pointer effect and accessories


723
00:35:39,537 --> 00:35:43,508 line:-1
to follow the axis-locked
resize gesture.


724
00:35:43.508 --> 00:35:45.343 line:-1 position:50%
These are just some
of the enhancements


725
00:35:45.343 --> 00:35:48.246 line:-1 position:50%
iPadOS 15 brings to the iPad.


726
00:35:48,246 --> 00:35:50,148 line:-1
Take advantage of them
where applicable


727
00:35:50.148 --> 00:35:52.851 line:-1 position:50%
to really maximize
the utility of your app.


728
00:35:52.851 --> 00:35:55.754 line:-1 position:50%
Adopt prominent scenes
to give people a focused,


729
00:35:55,754 --> 00:35:58,223 line:-1
uninterrupted view
of your app's content.


730
00:35:58,223 --> 00:36:01,693 line:-1
Empower them to achieve
complex tasks quickly


731
00:36:01.693 --> 00:36:04.095 line:-1 position:50%
with the new
keyboard shortcuts menu,


732
00:36:04,095 --> 00:36:08,633 line:-1
and boost their productivity
with the new pointer features.


733
00:36:08,633 --> 00:36:10,268 line:-1
Thanks for watching!


734
00:36:10,268 --> 00:36:13,738 size:2% align:right position:90%
♪

