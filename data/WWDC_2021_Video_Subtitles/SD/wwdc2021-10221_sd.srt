2
00:00:00.000 --> 00:00:02.769 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02.769 --> 00:00:05.739 line:-1 position:50%
♪ Bass music playing ♪


4
00:00:05,739 --> 00:00:07,140 line:-1
[KEYSTROKES]


5
00:00:07,140 --> 00:00:09,209 position:89% align:center size:2%
♪


6
00:00:09,209 --> 00:00:12,346 line:-1
Thomas Naudet: Hello,
and welcome to WWDC.


7
00:00:12.346 --> 00:00:15.182 line:-1 position:50%
I'm Thomas from
the localization team at Apple,


8
00:00:15,182 --> 00:00:18,018 line:-1
and today I'll be showing you
how to streamline


9
00:00:18.018 --> 00:00:20.120 line:-1 position:50%
your localized strings.


10
00:00:20,120 --> 00:00:22,990 line:-1
You will see the easiest way
to make your app work


11
00:00:22,990 --> 00:00:25,158 line:-1
in many languages.


12
00:00:25.158 --> 00:00:28.528 line:-1 position:50%
We'll start by writing UI code.


13
00:00:28,528 --> 00:00:32,733 line:-1
Then we'll see how to organize
strings in your targets.


14
00:00:32,733 --> 00:00:38,005 line:-1
After that we'll let Xcode
do the heavy lifting for us.


15
00:00:38,005 --> 00:00:42,175 line:-1
Lastly, we'll learn new
techniques for advanced strings.


16
00:00:42,175 --> 00:00:44,311 line:-1
With all this,
we'll guarantee your app


17
00:00:44.311 --> 00:00:47.547 line:-1 position:50%
is prepared
for great translations.


18
00:00:47.547 --> 00:00:52.019 line:-1 position:50%
This is super important because
text is everywhere in our lives.


19
00:00:52.019 --> 00:00:53.820 line:-1 position:50%
We use text to communicate


20
00:00:53,820 --> 00:00:56,490 line:-1
and get information
in the real world.


21
00:00:56,490 --> 00:00:59,793 line:-1
It's obviously all the more true
on our connected devices


22
00:00:59.793 --> 00:01:02.462 line:-1 position:50%
with all the apps,
notifications,


23
00:01:02,462 --> 00:01:05,766 line:-1
and articles we read every day.


24
00:01:05,766 --> 00:01:08,902 line:-1
More than ever, it's crucial
the text can be read,


25
00:01:08.902 --> 00:01:12.439 line:-1 position:50%
be accurate, and be accessible.


26
00:01:12.439 --> 00:01:15.008 line:-1 position:50%
Imagine being completely lost
in this street


27
00:01:15,008 --> 00:01:18,578 line:-1
trying to find a small shop
among all those signs.


28
00:01:18.578 --> 00:01:21.581 line:-1 position:50%
It could be the same
for users of your app.


29
00:01:21,581 --> 00:01:23,617 line:-1
Text is such a core feature --


30
00:01:23,617 --> 00:01:27,254 line:-1
it guides users
and brings familiarity.


31
00:01:27.254 --> 00:01:30.424 line:-1 position:50%
In that way, localizing your app
is an opportunity


32
00:01:30.424 --> 00:01:33.026 line:-1 position:50%
to reach all users
around the world,


33
00:01:33,026 --> 00:01:37,030 line:-1
especially in all the markets
the App Store provides.


34
00:01:37.030 --> 00:01:40.834 line:-1 position:50%
As a developer, you are already
familiar with text,


35
00:01:40,834 --> 00:01:44,071 line:-1
since us developers
enjoy naming things.


36
00:01:44.071 --> 00:01:47.374 line:-1 position:50%
We called text "strings."


37
00:01:47,374 --> 00:01:50,844 line:-1
Strings are everywhere:
titles, buttons, user content,


38
00:01:50,844 --> 00:01:56,149 line:-1
online content, search queries,
graphics, accessibility labels,


39
00:01:56,149 --> 00:01:58,085 line:-1
and so on.


40
00:01:58.085 --> 00:02:02.289 line:-1 position:50%
Think about all the strings
in your app as movie subtitles.


41
00:02:02,289 --> 00:02:05,025 line:-1
In the movie you watch,
you want all subtitles


42
00:02:05.025 --> 00:02:07.928 line:-1 position:50%
to be in the right language,
at the right time,


43
00:02:07,928 --> 00:02:09,796 line:-1
with the right context,


44
00:02:09,796 --> 00:02:13,633 line:-1
and consistent
throughout the movie.


45
00:02:13.633 --> 00:02:15.669 line:-1 position:50%
This is the exact same here.


46
00:02:15.669 --> 00:02:19.740 line:-1 position:50%
Your strings convey meaning
to your visual content


47
00:02:19,740 --> 00:02:25,145 line:-1
and help the user navigate
through the streets of your app.


48
00:02:25.145 --> 00:02:28.081 line:-1 position:50%
Let's see now,
from a developer perspective,


49
00:02:28.081 --> 00:02:31.451 line:-1 position:50%
what the localization
process is.


50
00:02:31,451 --> 00:02:35,856 line:-1
Your user interface
presents strings in views.


51
00:02:35,856 --> 00:02:39,026 line:-1
Those strings
live in their own files.


52
00:02:39,026 --> 00:02:42,295 line:-1
This helps separate the concerns
between your visual content --


53
00:02:42.295 --> 00:02:44.831 line:-1 position:50%
which is generic
for all languages --


54
00:02:44.831 --> 00:02:48.201 line:-1 position:50%
and your specific translations.


55
00:02:48,201 --> 00:02:50,337 line:-1
In between,
the Foundation framework


56
00:02:50.337 --> 00:02:54.307 line:-1 position:50%
links your user interface
and all your strings.


57
00:02:54.307 --> 00:02:55.976 line:-1 position:50%
In this talk
I'll go into details


58
00:02:55.976 --> 00:02:58.812 line:-1 position:50%
about each of these components.


59
00:02:58.812 --> 00:02:59.880 line:-1 position:50%
That looks like a lot,


60
00:02:59,880 --> 00:03:04,084 line:-1
but we'll uncover everything
step by step.


61
00:03:04.084 --> 00:03:09.056 line:-1 position:50%
Then let's start by defining
strings in your user interface.


62
00:03:09,056 --> 00:03:11,324 line:-1
Displaying
localized strings is easy


63
00:03:11.324 --> 00:03:14.895 line:-1 position:50%
by combining the latest
Apple technologies.


64
00:03:14,895 --> 00:03:18,031 line:-1
I encourage you to use
these techniques in your app,


65
00:03:18,031 --> 00:03:22,302 line:-1
so that you never have to think
twice about localization again!


66
00:03:22,302 --> 00:03:26,573 line:-1
Well, any string you define
in UI needs to be localized.


67
00:03:26,573 --> 00:03:30,377 line:-1
There are two types
of visible strings.


68
00:03:30,377 --> 00:03:34,381 line:-1
One is directly defined
as you create your view.


69
00:03:34,381 --> 00:03:38,485 line:-1
Here, I've defined a label
in SwiftUI and Storyboard.


70
00:03:38,485 --> 00:03:41,288 line:-1
And yes! Both are localizable.


71
00:03:41.288 --> 00:03:43.890 line:-1 position:50%
I told you it was easy!


72
00:03:43,890 --> 00:03:47,094 line:-1
The second type of strings
is more general


73
00:03:47.094 --> 00:03:51.331 line:-1 position:50%
and can be found
in model code in SwiftUI


74
00:03:51,331 --> 00:03:54,067 line:-1
but also in AppKit or UIKit.


75
00:03:54,067 --> 00:03:56,103 line:-1
You might need to store a string
in a variable,


76
00:03:56.103 --> 00:03:59.139 line:-1 position:50%
or return it from a function.


77
00:03:59,139 --> 00:04:04,010 line:-1
In all these cases,
you can use NSLocalizedString.


78
00:04:04.010 --> 00:04:06.313 line:-1 position:50%
New in iOS 15
and macOS Monterey,


79
00:04:06,313 --> 00:04:12,252 line:-1
you can use our refined method
for Swift, String(localized:).


80
00:04:12.252 --> 00:04:17.357 line:-1 position:50%
Let's focus on the first method
in SwiftUI for a moment.


81
00:04:17,357 --> 00:04:21,895 line:-1
Everything you present in
the interface is indeed a view,


82
00:04:21.895 --> 00:04:24.731 line:-1 position:50%
whether this a text label
or a button,


83
00:04:24.731 --> 00:04:27.968 line:-1 position:50%
it's all localizable by default,


84
00:04:27.968 --> 00:04:31.872 line:-1 position:50%
ready to host your future
translated strings.


85
00:04:31,872 --> 00:04:33,840 line:-1
Since this is enabled
by default,


86
00:04:33.840 --> 00:04:36.676 line:-1 position:50%
if you have mock content
such as previews,


87
00:04:36,676 --> 00:04:40,280 line:-1
make sure you opt out
by using verbatim.


88
00:04:40,280 --> 00:04:44,618 line:-1
This will avoid unnecessary
work for translators.


89
00:04:44,618 --> 00:04:49,022 line:0
You can learn more techniques
in this related session.


90
00:04:49,022 --> 00:04:51,024 line:-1
Now that we've covered
the basics,


91
00:04:51,024 --> 00:04:54,628 line:-1
let's learn how to make
this string more dynamic.


92
00:04:54.628 --> 00:04:56.630 line:-1 position:50%
I'm currently showing
a localized button


93
00:04:56,630 --> 00:04:59,032 line:-1
to place an order.


94
00:04:59.032 --> 00:05:01.368 line:-1 position:50%
You might not know
I love concerts,


95
00:05:01.368 --> 00:05:06.072 line:-1 position:50%
and I love seeing artists live
with friends even more!


96
00:05:06,072 --> 00:05:09,442 line:0
In this app, it's not obvious
how many tickets


97
00:05:09,442 --> 00:05:12,245 position:50%
I'm ordering for all my friends.


98
00:05:12,245 --> 00:05:13,713 position:50%
So let's improve that button


99
00:05:13,713 --> 00:05:18,084 line:0
to include the number
of tickets I've selected.


100
00:05:18,084 --> 00:05:19,052 line:-1
That was easy.


101
00:05:19,052 --> 00:05:21,888 line:-1
I just inserted a variable
in the string


102
00:05:21,888 --> 00:05:24,658 line:-1
like I'm used to in Swift.


103
00:05:24,658 --> 00:05:28,128 line:0
Here, count will be replaced
at runtime


104
00:05:28,128 --> 00:05:31,431 position:50%
by the actual number, 3.


105
00:05:31,431 --> 00:05:33,833 position:50%
Now that we've seen
all our options,


106
00:05:33,833 --> 00:05:36,803 line:0
I want to call out
a common pitfall:


107
00:05:36,803 --> 00:05:38,972 line:0
String with (format:).


108
00:05:38,972 --> 00:05:40,507 line:0
String with (format:) is great,


109
00:05:40,507 --> 00:05:45,178 position:50%
but it's not intended to be used
for localized strings.


110
00:05:45,178 --> 00:05:48,448 line:0
Let's see why
with an example in Arabic


111
00:05:48,448 --> 00:05:52,786 line:0
where the text direction
and the digits can be different.


112
00:05:52,786 --> 00:05:55,855 line:0
The good news is both
are managed automatically


113
00:05:55,855 --> 00:05:58,892 line:0
when you use
String(localized:).


114
00:05:58,892 --> 00:06:02,395 line:0
Now, the number "three"
is correctly written in Arabic


115
00:06:02,395 --> 00:06:03,830 position:50%
in the button,


116
00:06:03,830 --> 00:06:07,534 line:0
according to the user's
preferred digits in Settings.


117
00:06:07,534 --> 00:06:10,303 line:0
String(localized:)
also supports plurals,


118
00:06:10,303 --> 00:06:13,306 line:0
and isolation of each part
of the string,


119
00:06:13,306 --> 00:06:19,412 position:50%
meaning words are not shuffled
around in bidirectional text.


120
00:06:19,412 --> 00:06:22,916 line:-1
Lastly, be careful not
to overuse variables.


121
00:06:22,916 --> 00:06:25,418 line:-1
Gluing strings together
is handy


122
00:06:25.418 --> 00:06:28.788 line:-1 position:50%
but could lead
to translation problems.


123
00:06:28.788 --> 00:06:32.626 line:-1 position:50%
Here the word “Order"
could be written differently


124
00:06:32.626 --> 00:06:36.096 line:-1 position:50%
in some languages
whether you order now


125
00:06:36.096 --> 00:06:39.432 line:-1 position:50%
or order later.


126
00:06:39.432 --> 00:06:43.536 line:-1 position:50%
It's safer to use
two separate strings.


127
00:06:43,536 --> 00:06:48,642 line:-1
All right. There's one major,
final aspect we need to see


128
00:06:48,642 --> 00:06:52,812 line:-1
that I secretly
kept from you until now.


129
00:06:52,812 --> 00:06:55,048 line:-1
The strings you've defined
will need to be translated


130
00:06:55.048 --> 00:06:57.884 line:-1 position:50%
by somebody other than you.


131
00:06:57.884 --> 00:07:01.755 line:-1 position:50%
Translators don't have
the full app UI in front of them


132
00:07:01,755 --> 00:07:04,424 line:-1
while they translate
string by string,


133
00:07:04,424 --> 00:07:08,061 line:-1
and they need to stay consistent
in all strings.


134
00:07:08.061 --> 00:07:10.363 line:-1 position:50%
So you need to help them,


135
00:07:10.363 --> 00:07:14.000 line:-1 position:50%
just like you help your
coworkers understand your code


136
00:07:14,000 --> 00:07:16,102 line:-1
by adding code comments.


137
00:07:16.102 --> 00:07:18.171 line:-1 position:50%
I insist, no matter the string,


138
00:07:18.171 --> 00:07:20.940 line:-1 position:50%
you should always
define a comment.


139
00:07:20.940 --> 00:07:22.842 line:-1 position:50%
And don't forget
your Storyboard files;


140
00:07:22.842 --> 00:07:27.480 line:-1 position:50%
they have a comment field
in the identity inspector.


141
00:07:27,480 --> 00:07:31,384 line:-1
Let me share some tips
to help translators.


142
00:07:31,384 --> 00:07:35,455 line:-1
First, comments should explain
where the string is visible.


143
00:07:35,455 --> 00:07:41,494 line:-1
For instance, is this a button?
A label? Some VoiceOver text?


144
00:07:41.494 --> 00:07:45.131 line:-1 position:50%
Knowing if this is an action --
to order --


145
00:07:45,131 --> 00:07:51,271 line:-1
or a statement --
an order -- is critical.


146
00:07:51.271 --> 00:07:54.607 line:-1 position:50%
Second, they should explain
the context.


147
00:07:54,607 --> 00:07:58,912 line:-1
If I press Order,
am I completing a transaction


148
00:07:58,912 --> 00:08:01,948 line:-1
or sorting a list?


149
00:08:01,948 --> 00:08:04,984 line:-1
Lastly, comments
should explain variables.


150
00:08:04,984 --> 00:08:06,820 line:-1
When localizers
see your strings,


151
00:08:06,820 --> 00:08:08,722 line:-1
they don't see your code,


152
00:08:08,722 --> 00:08:13,059 line:-1
so they don't see the name
of your variables to get a clue,


153
00:08:13.059 --> 00:08:16.329 line:-1 position:50%
only a generic
placeholder instead.


154
00:08:16,329 --> 00:08:18,465 line:-1
So for the last example here,


155
00:08:18,465 --> 00:08:22,469 line:-1
what does the number before
“Ordered" represent?


156
00:08:22,469 --> 00:08:25,338 line:-1
Is this the number
of past orders?


157
00:08:25,338 --> 00:08:28,608 line:-1
The number of tickets
I've just ordered?


158
00:08:28,608 --> 00:08:30,543 line:-1
Yes! Thanks to the comment,


159
00:08:30,543 --> 00:08:34,214 line:-1
I know it' s the total
number of tickets.


160
00:08:34,214 --> 00:08:37,083 line:-1
Translators in lots of languages


161
00:08:37.083 --> 00:08:39.586 line:-1 position:50%
will be able
to correctly translate


162
00:08:39.586 --> 00:08:44.391 line:-1 position:50%
according to the gender
of the word "tickets."


163
00:08:44,391 --> 00:08:48,428 line:-1
Sometimes the easiest is also
to write an example value


164
00:08:48,428 --> 00:08:51,965 line:-1
of the variable in the comment.


165
00:08:51.965 --> 00:08:53.700 line:-1 position:50%
With that in mind, there it is.


166
00:08:53.700 --> 00:08:59.005 line:-1 position:50%
You have your UI code
ready for localization.


167
00:08:59,005 --> 00:09:02,442 line:-1
Now, we'll learn how you can
maintain your UI code


168
00:09:02,442 --> 00:09:05,078 line:-1
separately from your strings.


169
00:09:05.078 --> 00:09:07.080 line:-1 position:50%
Basically,
you'll be able to organize


170
00:09:07.080 --> 00:09:10.617 line:-1 position:50%
where your strings will live.


171
00:09:10,617 --> 00:09:13,019 line:-1
In order to do this,
let's see how Foundation


172
00:09:13,019 --> 00:09:15,722 line:-1
will make sure that
your code loads


173
00:09:15.722 --> 00:09:18.892 line:-1 position:50%
the correct
localized strings files.


174
00:09:18,892 --> 00:09:22,796 line:-1
Of course, localization
starts with a language.


175
00:09:22,796 --> 00:09:27,267 line:-1
You can head into your project
settings to add a new one.


176
00:09:27,267 --> 00:09:29,369 line:-1
Let's take a look at Xcode.


177
00:09:29,369 --> 00:09:32,639 line:0
Select your project
and click the plus(+) button


178
00:09:32,639 --> 00:09:34,474 line:0
to add a localization.


179
00:09:34,474 --> 00:09:37,544 line:0
You will see the menu
gained lots of new languages


180
00:09:37,544 --> 00:09:39,946 line:0
in the latest version.


181
00:09:39.946 --> 00:09:43.082 line:-1 position:50%
Let's see... In our app list
of localizations,


182
00:09:43.082 --> 00:09:46.319 line:-1 position:50%
it starts with Base at the top.


183
00:09:46.319 --> 00:09:48.755 line:-1 position:50%
Indeed, this where
the UI elements live


184
00:09:48.755 --> 00:09:51.658 line:-1 position:50%
because they are shared
across languages.


185
00:09:51,658 --> 00:09:56,162 line:-1
For instance,
a Storyboard file is shared;


186
00:09:56,162 --> 00:10:00,066 line:-1
a Siri Intents file
is shared too.


187
00:10:00.066 --> 00:10:02.335 line:-1 position:50%
Then they need
to be added to Base.


188
00:10:02,335 --> 00:10:04,971 line:-1
So make sure you click
the Localize button


189
00:10:04.971 --> 00:10:08.508 line:-1 position:50%
for all shared assets.


190
00:10:08,508 --> 00:10:11,077 line:-1
OK but your strings,
on the other hand,


191
00:10:11.077 --> 00:10:12.545 line:-1 position:50%
are not shared.


192
00:10:12,545 --> 00:10:14,881 line:-1
Strings belongs to one language.


193
00:10:14.881 --> 00:10:17.317 line:-1 position:50%
So you will have
your strings in English


194
00:10:17,317 --> 00:10:21,154 line:-1
and all your strings in Arabic.


195
00:10:21,154 --> 00:10:24,224 line:-1
To test your app with strings
in a certain language,


196
00:10:24.224 --> 00:10:27.560 line:-1 position:50%
you can change the preview
environment in SwiftUI


197
00:10:27,560 --> 00:10:30,930 line:-1
or change the app
scheme settings.


198
00:10:30,930 --> 00:10:34,133 line:-1
If the device is in a language
your app doesn't support,


199
00:10:34.133 --> 00:10:37.604 line:-1 position:50%
Foundation tries to find
the best alternative.


200
00:10:37,604 --> 00:10:39,939 line:-1
If my phone
is in Mexican Spanish,


201
00:10:39,939 --> 00:10:44,244 line:-1
Foundation will try to fallback
on Latin American Spanish,


202
00:10:44,244 --> 00:10:45,879 line:-1
then to Spanish,


203
00:10:45,879 --> 00:10:47,714 line:-1
then to your app
development language --


204
00:10:47,714 --> 00:10:50,450 line:-1
for instance, English.


205
00:10:50,450 --> 00:10:53,086 line:-1
Lastly, when strings
come from a server,


206
00:10:53,086 --> 00:10:57,557 line:-1
make sure you respect
the user's preferred language.


207
00:10:57,557 --> 00:10:58,324 line:-1
Great.


208
00:10:58,324 --> 00:11:02,762 line:-1
We've seen that each language
has a collection of strings.


209
00:11:02,762 --> 00:11:06,799 line:-1
Those strings can be further
organized into files


210
00:11:06,799 --> 00:11:08,368 line:-1
called "tables."


211
00:11:08,368 --> 00:11:09,702 line:-1
You can use this feature


212
00:11:09,702 --> 00:11:12,171 line:-1
to organize every string
as you'd like.


213
00:11:12.171 --> 00:11:15.909 line:-1 position:50%
For instance, you could have
a table for each feature,


214
00:11:15,909 --> 00:11:18,678 line:-1
or each screen.


215
00:11:18,678 --> 00:11:20,947 line:-1
Since this is optional
by default,


216
00:11:20,947 --> 00:11:25,518 line:-1
all strings are put in a table
named Localizable.


217
00:11:25,518 --> 00:11:27,387 line:-1
Concretely, this means
all strings are stored


218
00:11:27.387 --> 00:11:31.891 line:-1 position:50%
in a file named
Localizable.strings.


219
00:11:31.891 --> 00:11:33.326 line:-1 position:50%
Let's look at an example


220
00:11:33,326 --> 00:11:36,829 line:-1
to recap what
we've learned so far.


221
00:11:36,829 --> 00:11:37,997 line:-1
I have the following code


222
00:11:37.997 --> 00:11:40.800 line:-1 position:50%
declaring a string
with a variable,


223
00:11:40.800 --> 00:11:45.071 line:-1 position:50%
a customized table name,
and a comment.


224
00:11:45,071 --> 00:11:48,107 line:-1
Let's say my app
supports French.


225
00:11:48,107 --> 00:11:52,645 line:-1
In Xcode, you will then need
a UserProfile.strings file


226
00:11:52,645 --> 00:11:56,182 line:-1
containing the
French translation from English.


227
00:11:56.182 --> 00:11:58.184 line:-1 position:50%
It will be stored
in a French resource folder


228
00:11:58,184 --> 00:12:03,289 line:-1
named by convention, fr.lproj.


229
00:12:03.289 --> 00:12:06.492 line:-1 position:50%
The comment was very useful
for the French translator.


230
00:12:06,492 --> 00:12:10,797 line:-1
They used an "e" to mark
the feminine, as "places;"


231
00:12:10,797 --> 00:12:15,535 line:-1
French for tickets is feminine.


232
00:12:15.535 --> 00:12:19.038 line:-1 position:50%
Let's spice things up a little
bit and talk about bundle.


233
00:12:19,038 --> 00:12:24,544 line:-1
This parameter allows loading
strings across targets.


234
00:12:24,544 --> 00:12:27,847 line:-1
The bundle parameter
is main by default.


235
00:12:27,847 --> 00:12:30,783 line:-1
In your own app,
you don't need it.


236
00:12:30.783 --> 00:12:32.585 line:-1 position:50%
Main is that app.


237
00:12:32,585 --> 00:12:34,320 line:-1
In your app extension,


238
00:12:34,320 --> 00:12:36,589 line:-1
main refers
to your own extension,


239
00:12:36.589 --> 00:12:39.726 line:-1 position:50%
so you don't need it either.


240
00:12:39.726 --> 00:12:41.327 line:-1 position:50%
But let's say
you want to share a string


241
00:12:41,327 --> 00:12:44,530 line:-1
between your app
and its extension.


242
00:12:44,530 --> 00:12:47,033 line:-1
In your extension,
you will need to provide


243
00:12:47,033 --> 00:12:49,669 line:-1
the bundle of the main app.


244
00:12:49.669 --> 00:12:54.774 line:-1 position:50%
Doing so avoids duplicating
the strings between the two.


245
00:12:54,774 --> 00:12:58,077 line:-1
You could also get your strings
from a framework.


246
00:12:58,077 --> 00:12:59,245 line:0
In that case,


247
00:12:59,245 --> 00:13:03,082 line:0
either you tap directly
into the framework's strings


248
00:13:03,082 --> 00:13:07,453 position:50%
by specifying its bundle
in your app code,


249
00:13:07,453 --> 00:13:12,959 line:0
or the framework vends you
variables you can directly use.


250
00:13:12,959 --> 00:13:15,795 line:0
Those localized string variables
have been defined


251
00:13:15,795 --> 00:13:17,196 line:0
in the framework


252
00:13:17,196 --> 00:13:21,734 position:50%
by specifying the framework's
own bundle.


253
00:13:21,734 --> 00:13:24,203 line:-1
Let's look back at our model,


254
00:13:24.203 --> 00:13:27.440 line:-1 position:50%
only now we'll update it
to make our app


255
00:13:27.440 --> 00:13:31.444 line:-1 position:50%
load the string
provided by the framework.


256
00:13:31.444 --> 00:13:33.479 line:-1 position:50%
The framework
defines the string


257
00:13:33,479 --> 00:13:37,150 line:-1
and informs Foundation
the translation is stored


258
00:13:37.150 --> 00:13:41.854 line:-1 position:50%
inside its own bundle
in a strings file.


259
00:13:41.854 --> 00:13:44.524 line:-1 position:50%
Without this parameter,
the string would be fetched


260
00:13:44.524 --> 00:13:49.228 line:-1 position:50%
from the hosting app instead
and not found.


261
00:13:49.228 --> 00:13:51.831 line:-1 position:50%
In practice,
it looks like this.


262
00:13:51.831 --> 00:13:55.535 line:-1 position:50%
You supply the bundle
where your text is stored.


263
00:13:55,535 --> 00:14:00,673 line:-1
The framework will look for
the strings into its own bundle.


264
00:14:00,673 --> 00:14:02,742 position:50%
Then it's easy for your app.


265
00:14:02,742 --> 00:14:06,913 position:50%
The string can be used
in a simple line of code.


266
00:14:06,913 --> 00:14:09,315 line:-1
Moreover, if you implement
localization


267
00:14:09,315 --> 00:14:12,819 line:-1
in your frameworks this way,
you won't even have to create


268
00:14:12.819 --> 00:14:18.558 line:-1 position:50%
the strings file presented here
containing “Complete.”


269
00:14:18.558 --> 00:14:19.992 line:-1 position:50%
Let's now see why.


270
00:14:19.992 --> 00:14:22.061 line:-1 position:50%
We've seen everything
you can do in code


271
00:14:22,061 --> 00:14:24,397 line:-1
to declare and organize strings.


272
00:14:24.397 --> 00:14:27.900 line:-1 position:50%
But we haven't seen how
to actually create the files


273
00:14:27.900 --> 00:14:30.570 line:-1 position:50%
that will hold
your translations.


274
00:14:30,570 --> 00:14:33,239 line:-1
It turns out you actually
don't need to create


275
00:14:33.239 --> 00:14:34.974 line:-1 position:50%
those strings files.


276
00:14:34,974 --> 00:14:36,609 line:-1
Xcode can take care of creating


277
00:14:36,609 --> 00:14:40,113 line:-1
all the .strings files
for you.


278
00:14:40.113 --> 00:14:41.948 line:-1 position:50%
When you use
Export Localizations


279
00:14:41,948 --> 00:14:46,152 line:-1
it reads your code
and extracts all your strings.


280
00:14:46,152 --> 00:14:49,455 line:-1
This is great because you don't
have to maintain strings files.


281
00:14:49.455 --> 00:14:51.457 line:-1 position:50%
If you used to forget
to localize the string


282
00:14:51.457 --> 00:14:55.428 line:-1 position:50%
you've just coded in your UI,
this is for you.


283
00:14:55,428 --> 00:14:57,163 line:-1
If you struggle
with ‘genstrings,’


284
00:14:57.163 --> 00:15:00.566 line:-1 position:50%
this is for you too.


285
00:15:00,566 --> 00:15:02,668 line:-1
This year, in Xcode 13,


286
00:15:02,668 --> 00:15:07,373 line:-1
we've added compiler support
for Swift strings extraction.


287
00:15:07.373 --> 00:15:11.377 line:-1 position:50%
Also, workspaces
are now fully supported.


288
00:15:11,377 --> 00:15:14,547 line:-1
This further separates
the concerns between your logic


289
00:15:14,547 --> 00:15:17,817 line:-1
and your translations.


290
00:15:17,817 --> 00:15:20,720 line:-1
Xcode will detect
and extract text from the Swift


291
00:15:20,720 --> 00:15:23,990 line:-1
and Foundation methods
we've seen earlier.


292
00:15:23.990 --> 00:15:26.225 line:-1 position:50%
Please be aware,
if you have custom code


293
00:15:26,225 --> 00:15:30,296 line:-1
that wraps those APIs,
this will not work by default.


294
00:15:30,296 --> 00:15:34,100 line:-1
You shouldn't have to use
a method or macro usually,


295
00:15:34,100 --> 00:15:35,368 line:-1
but if you really need to,


296
00:15:35,368 --> 00:15:37,303 line:-1
you can add them
to your build settings


297
00:15:37.303 --> 00:15:41.908 line:-1 position:50%
under Localized String
Macro Names.


298
00:15:41,908 --> 00:15:42,975 line:-1
For the rest,


299
00:15:42.975 --> 00:15:45.611 line:-1 position:50%
Xcode will extract for
localization your app name


300
00:15:45.611 --> 00:15:49.916 line:-1 position:50%
and privacy descriptions
defined in Info.plist,


301
00:15:49,916 --> 00:15:52,618 line:-1
and in general all assets
marked as Localized


302
00:15:52.618 --> 00:15:56.622 line:-1 position:50%
in Xcode's inspector.


303
00:15:56,622 --> 00:15:58,324 line:-1
If you have existing
localizations,


304
00:15:58.324 --> 00:16:01.260 line:-1 position:50%
you can already transition
to Xcode's export


305
00:16:01,260 --> 00:16:03,696 line:-1
for your new UIs.


306
00:16:03,696 --> 00:16:06,032 line:-1
The new strings will be
automatically added


307
00:16:06.032 --> 00:16:08.234 line:-1 position:50%
to your existing files.


308
00:16:08,234 --> 00:16:10,937 line:-1
This is great if you want
to convert your project


309
00:16:10.937 --> 00:16:14.407 line:-1 position:50%
at your own pace.


310
00:16:14,407 --> 00:16:19,712 line:-1
As a bonus, screenshots from
your UI tests are now included.


311
00:16:19.712 --> 00:16:21.314 line:-1 position:50%
It's great for your localizers


312
00:16:21,314 --> 00:16:24,550 line:-1
so that they get context
where a string is,


313
00:16:24.550 --> 00:16:27.987 line:-1 position:50%
and it's awesome for you to
showcase localized screenshots


314
00:16:27.987 --> 00:16:31.324 line:-1 position:50%
of your app on the App Store.


315
00:16:31.324 --> 00:16:36.028 line:-1 position:50%
All right, Xcode extracted
all the localization catalogs,


316
00:16:36,028 --> 00:16:41,133 line:-1
so you'd think it's the
translators' turn to work now.


317
00:16:41,133 --> 00:16:43,502 line:-1
Actually, you can do it too!


318
00:16:43.502 --> 00:16:46.939 line:-1 position:50%
New in Xcode 13,
exported localization catalogs


319
00:16:46,939 --> 00:16:51,310 line:-1
can be viewed and edited
directly in Xcode.


320
00:16:51,310 --> 00:16:53,179 line:-1
You can see
each generated file --


321
00:16:53,179 --> 00:16:56,883 line:-1
so each table --
in their bundles on the left.


322
00:16:56,883 --> 00:16:58,050 line:-1
And for your selection,


323
00:16:58,050 --> 00:17:03,256 line:-1
you can see all the contained
strings, images, and files.


324
00:17:03,256 --> 00:17:06,092 line:-1
You can filter strings,
sort them, see comments,


325
00:17:06,092 --> 00:17:10,196 line:-1
screenshots,
and even translate!


326
00:17:10.196 --> 00:17:11.464 line:-1 position:50%
This is very convenient


327
00:17:11.464 --> 00:17:14.367 line:-1 position:50%
if you develop
and translate your own app.


328
00:17:14.367 --> 00:17:19.906 line:-1 position:50%
It lets you review and bugfix
strings yourself, too.


329
00:17:19,906 --> 00:17:24,443 line:-1
When translators send you back
the translated string catalogs,


330
00:17:24,443 --> 00:17:26,679 line:-1
you can import them
into your project


331
00:17:26,679 --> 00:17:30,349 line:-1
using the Product menu
in Xcode.


332
00:17:30,349 --> 00:17:33,052 line:-1
And boom! Your strings files,
stringsdicts,


333
00:17:33,052 --> 00:17:37,223 line:-1
and other assets will be created
and updated.


334
00:17:37,223 --> 00:17:39,058 line:-1
Using the command line
equivalents,


335
00:17:39.058 --> 00:17:41.928 line:-1 position:50%
you can run an automated
export and import


336
00:17:41.928 --> 00:17:45.097 line:-1 position:50%
on a continuous integration
system.


337
00:17:45.097 --> 00:17:47.033 line:-1 position:50%
By calling them regularly,


338
00:17:47,033 --> 00:17:50,036 line:-1
your project gets
the most up-to-date strings,


339
00:17:50,036 --> 00:17:55,541 line:-1
and a fast turnaround at
getting your new UI translated.


340
00:17:55,541 --> 00:17:57,677 position:50%
You can see the enhanced
workflow in action


341
00:17:57,677 --> 00:18:01,614 position:50%
in this year's session,
"Localize your SwiftUI app"


342
00:18:01,614 --> 00:18:05,051 line:0
and learn more
in the introductry session.


343
00:18:05,051 --> 00:18:06,085 line:-1
That's it!


344
00:18:06.085 --> 00:18:10.156 line:-1 position:50%
You've witnessed how strings
are born and live in your app.


345
00:18:10.156 --> 00:18:11.257 line:-1 position:50%
To conclude,


346
00:18:11,257 --> 00:18:14,827 line:-1
I'll show you how to deal
with some more complex strings.


347
00:18:14,827 --> 00:18:18,965 line:-1
And I'm sure you'll love the new
features we have in store.


348
00:18:18,965 --> 00:18:20,433 line:-1
Let's start with a great one!


349
00:18:20.433 --> 00:18:22.134 line:-1 position:50%
We've improved
attributed strings


350
00:18:22,134 --> 00:18:25,204 line:-1
to have built-in localization.


351
00:18:25.204 --> 00:18:30.042 line:-1 position:50%
It's now possible with the
support of the Markdown syntax!


352
00:18:30,042 --> 00:18:31,911 line:-1
You can now
localize your strings


353
00:18:31,911 --> 00:18:34,513 line:-1
without losing any formatting.


354
00:18:34,513 --> 00:18:37,016 line:-1
No more risky
character operations,


355
00:18:37,016 --> 00:18:40,152 line:-1
just to make one word in bold.


356
00:18:40.152 --> 00:18:43.055 line:-1 position:50%
Speaking of which,
here I use asterisks


357
00:18:43,055 --> 00:18:47,793 line:-1
to put a strong emphasis
on “complete.”


358
00:18:47,793 --> 00:18:49,695 line:0
I encourage you to check
"What's new in Foundation"


359
00:18:49,695 --> 00:18:54,467 position:50%
to learn how you can add a link,
an emphasis, monospace text,


360
00:18:54,467 --> 00:18:57,069 position:50%
and so on.


361
00:18:57,069 --> 00:18:59,505 line:0
We've seen that one string
you define in code


362
00:18:59,505 --> 00:19:03,909 position:50%
will have one translation
in a strings file.


363
00:19:03,909 --> 00:19:06,379 line:0
But sometimes
you need your string


364
00:19:06,379 --> 00:19:09,582 position:50%
to have multiple
representations.


365
00:19:09,582 --> 00:19:12,385 line:0
This is possible
with a stringsdict file,


366
00:19:12,385 --> 00:19:17,156 line:0
a collection of strings
adapting to rules you define.


367
00:19:17,156 --> 00:19:19,425 line:-1
For instance,
remember our example


368
00:19:19,425 --> 00:19:22,762 line:-1
where we would like
to order several tickets?


369
00:19:22,762 --> 00:19:25,431 line:-1
In English, we would add
an "s" as a suffix


370
00:19:25,431 --> 00:19:31,337 line:-1
if there are multiple tickets
and no "s" for one ticket.


371
00:19:31,337 --> 00:19:33,372 line:-1
To keep your code
simple and correct,


372
00:19:33.372 --> 00:19:37.410 line:-1 position:50%
you need to define this
plural rule using a stringsdict.


373
00:19:37,410 --> 00:19:39,578 line:-1
Because if you localize
your app,


374
00:19:39.578 --> 00:19:43.749 line:-1 position:50%
those rules will be
different for each language.


375
00:19:43,749 --> 00:19:46,886 line:-1
Look at some of the cases
in Russian.


376
00:19:46,886 --> 00:19:49,355 line:-1
You don't want
to deal with that in code,


377
00:19:49,355 --> 00:19:50,923 line:-1
it's rather something
localization


378
00:19:50,923 --> 00:19:53,626 line:-1
should take care of.


379
00:19:53,626 --> 00:19:55,728 line:-1
Let's see how
we would implement that.


380
00:19:55.728 --> 00:19:57.329 line:-1 position:50%
No code change needed;


381
00:19:57.329 --> 00:20:01.200 line:-1 position:50%
we will still use our
existing code above.


382
00:20:01,200 --> 00:20:05,304 position:50%
First, compared to strings files
being made for you,


383
00:20:05,304 --> 00:20:08,574 position:50%
stringsdict is a manual opt-in.


384
00:20:08,574 --> 00:20:10,643 position:50%
So create one using
the Xcode template,


385
00:20:10,643 --> 00:20:15,714 line:0
and make sure you clicked
Localize in the inspector.


386
00:20:15.714 --> 00:20:18.217 line:-1 position:50%
All right, it all starts
with the string


387
00:20:18.217 --> 00:20:20.553 line:-1 position:50%
you've defined in code.


388
00:20:20,553 --> 00:20:22,521 line:-1
If you have multiple
plural strings in code,


389
00:20:22,521 --> 00:20:27,593 line:-1
you can add this root entry here
for each of them.


390
00:20:27.593 --> 00:20:30.996 line:-1 position:50%
Inside, you define
the actual value presented.


391
00:20:30.996 --> 00:20:34.834 line:-1 position:50%
This value follows a
search-replace mechanism.


392
00:20:34,834 --> 00:20:36,769 line:-1
Here in this example


393
00:20:36,769 --> 00:20:40,706 line:-1
I've defined one token
named "tickets."


394
00:20:40.706 --> 00:20:44.110 line:-1 position:50%
It will hold
the fulll final string.


395
00:20:44,110 --> 00:20:47,379 line:-1
It's best to include most
of the text inside tokens,


396
00:20:47.379 --> 00:20:50.249 line:-1 position:50%
but that field will be
localizable


397
00:20:50,249 --> 00:20:54,353 line:-1
in case translators need
to add a prefix, a suffix,


398
00:20:54,353 --> 00:20:56,021 line:-1
or move the tokens around


399
00:20:56.021 --> 00:20:59.959 line:-1 position:50%
in case you have
multiple variables.


400
00:20:59,959 --> 00:21:01,961 line:-1
OK, that token will vary


401
00:21:01,961 --> 00:21:04,263 line:-1
according to your
one variable in code.


402
00:21:04,263 --> 00:21:08,901 line:-1
Then let's define
that tickets token.


403
00:21:08.901 --> 00:21:13.405 line:-1 position:50%
First, we just confirm that
we're doing some pluralization.


404
00:21:13,405 --> 00:21:16,842 line:-1
Then we indicate
the variable is a number


405
00:21:16,842 --> 00:21:20,679 line:-1
with the C-style formatter d.


406
00:21:20,679 --> 00:21:24,316 line:-1
And finally, we can write
the plural rules.


407
00:21:24,316 --> 00:21:29,321 line:0
In English, we can just declare
the rule "one" and "other"


408
00:21:29,321 --> 00:21:31,624 line:0
and "zero", if you'd like.


409
00:21:31,624 --> 00:21:32,958 position:50%
For each entry,


410
00:21:32,958 --> 00:21:37,029 line:0
we write the actual value
of the tickets token.


411
00:21:37,029 --> 00:21:39,899 position:50%
Then, if we have three tickets,


412
00:21:39,899 --> 00:21:42,368 position:50%
in English it will use "other"


413
00:21:42,368 --> 00:21:45,971 line:0
and generate
“Order 3 Tickets".


414
00:21:45,971 --> 00:21:49,942 position:50%
by replacing %d
with the number 3.


415
00:21:49,942 --> 00:21:52,178 line:0
If a language needs more cases,
don't worry.


416
00:21:52,178 --> 00:21:55,814 line:0
Xcode will add them for you
at export time.


417
00:21:55,814 --> 00:21:59,351 line:0
In Russian it will add
“few” and “many”


418
00:21:59,351 --> 00:22:02,755 line:0
on top of the existing ones.


419
00:22:02.755 --> 00:22:03.689 line:-1 position:50%
That's it!


420
00:22:03,689 --> 00:22:07,059 line:-1
Our string will be pluralized
at runtime.


421
00:22:07.059 --> 00:22:10.796 line:-1 position:50%
Before we move on,
I want to call out one case.


422
00:22:10.796 --> 00:22:14.066 line:-1 position:50%
Although stringsdict
should be used for plurals,


423
00:22:14.066 --> 00:22:18.070 line:-1 position:50%
it's meant for strings
containing a number.


424
00:22:18,070 --> 00:22:21,307 line:-1
We've seen earlier the case
"one" for singular in English.


425
00:22:21.307 --> 00:22:25.578 line:-1 position:50%
It is indeed for the number one
in Russian as well,


426
00:22:25,578 --> 00:22:31,383 line:-1
but, it's also used for 21,
31, and so on.


427
00:22:31,383 --> 00:22:36,388 line:-1
Then in that case, using
stringsdict would not be correct


428
00:22:36.388 --> 00:22:42.127 line:-1 position:50%
as you just want
equals to one only.


429
00:22:42,127 --> 00:22:43,629 position:50%
In this example,


430
00:22:43,629 --> 00:22:47,600 position:50%
the plural varies on
this, both, or all.


431
00:22:47,600 --> 00:22:51,337 position:50%
There is no number;
please don't use a stringsdict.


432
00:22:51,337 --> 00:22:55,074 position:50%
Imagine me booking 21 tickets
for all my friends,


433
00:22:55.074 --> 00:22:58.911 line:-1 position:50%
and I would see in Russian,
"Order This Ticket"


434
00:22:58,911 --> 00:23:01,981 line:-1
instead of "Order All Tickets."


435
00:23:01,981 --> 00:23:05,050 line:-1
I would ask you,
"Where's my money?"


436
00:23:05,050 --> 00:23:09,054 position:50%
Instead use this simple
but effective if/else


437
00:23:09,054 --> 00:23:13,092 position:50%
for correct pluralization
of each of the three strings,


438
00:23:13,092 --> 00:23:15,761 line:0
in all languages.


439
00:23:15.761 --> 00:23:17.596 line:-1 position:50%
And that was plural support,


440
00:23:17,596 --> 00:23:21,800 line:-1
but stringsdict can handle many
more variant types of a string.


441
00:23:21,800 --> 00:23:26,338 line:0
I invite you to watch the
related sessions to learn more.


442
00:23:26,338 --> 00:23:32,077 position:50%
This is great, but we wanted
to provide you a simpler way.


443
00:23:32,077 --> 00:23:36,515 line:-1
Yes, Foundation learned this
year how to do grammar for you!


444
00:23:36.515 --> 00:23:39.918 line:-1 position:50%
With Markdown support
added to attributed strings,


445
00:23:39,918 --> 00:23:43,122 line:-1
use this new format
with the inflect attribute,


446
00:23:43.122 --> 00:23:46.292 line:-1 position:50%
and you'll get the right value
computed at runtime,


447
00:23:46,292 --> 00:23:49,028 line:-1
like on this button.


448
00:23:49.028 --> 00:23:54.166 line:-1 position:50%
This is a great new addition
to iOS 15 and macOS Monterey,


449
00:23:54.166 --> 00:23:57.369 line:-1 position:50%
currently available
in select languages.


450
00:23:57.369 --> 00:24:02.141 line:-1 position:50%
If you want more control,
you can use a stringsdict.


451
00:24:02.141 --> 00:24:05.177 line:-1 position:50%
We didn't stop at adding
plural support.


452
00:24:05.177 --> 00:24:10.015 line:-1 position:50%
We wanted our software strings
to be more inclusive.


453
00:24:10.015 --> 00:24:13.452 line:-1 position:50%
For instance,
when an app welcomes users,


454
00:24:13,452 --> 00:24:15,954 line:-1
it's pretty straightforward
in English.


455
00:24:15.954 --> 00:24:18.324 line:-1 position:50%
But it is not in Spanish


456
00:24:18,324 --> 00:24:23,062 line:-1
because it depends
on the user's term of address.


457
00:24:23,062 --> 00:24:26,565 line:-1
Up to now, you had to present
a nonpersonalized string,


458
00:24:26.565 --> 00:24:31.337 line:-1 position:50%
which is correct but stilted
to most Spanish users.


459
00:24:31.337 --> 00:24:35.507 line:-1 position:50%
Literally,
"We give you our welcome."


460
00:24:35.507 --> 00:24:39.812 line:-1 position:50%
So what if we could personalize
the string for the user?


461
00:24:39,812 --> 00:24:43,248 line:-1
With our new Markdown notation,
you can do that now!


462
00:24:43,248 --> 00:24:46,118 line:0
The string will now follow
the term of address you select


463
00:24:46,118 --> 00:24:49,888 line:0
in the language settings
of your device.


464
00:24:49,888 --> 00:24:51,457 position:50%
So “Bienvenida" for users


465
00:24:51,457 --> 00:24:54,793 position:50%
who want to be referred to
in the feminine,


466
00:24:54,793 --> 00:24:58,931 line:0
“Bienvenido" in the masculine,
and if we do not know,


467
00:24:58,931 --> 00:25:04,002 position:50%
we'll use the existing
inflection alternative.


468
00:25:04,002 --> 00:25:06,638 line:-1
Inline inflections for plural
and term of address


469
00:25:06.638 --> 00:25:08.974 line:-1 position:50%
can be defined either
in your code


470
00:25:08.974 --> 00:25:11.110 line:-1 position:50%
or your translations.


471
00:25:11,110 --> 00:25:13,645 line:0
We are super excited
about this new addition


472
00:25:13,645 --> 00:25:15,314 position:50%
to select languages,


473
00:25:15,314 --> 00:25:19,418 position:50%
and we can't wait
to see your app use it.


474
00:25:19.418 --> 00:25:22.154 line:-1 position:50%
Finally, we've seen today
all the ways


475
00:25:22,154 --> 00:25:25,624 line:-1
you can write
localizable strings.


476
00:25:25.624 --> 00:25:27.526 line:-1 position:50%
But if you want to present data,


477
00:25:27,526 --> 00:25:32,064 line:-1
you should actually let the
frameworks write them for you.


478
00:25:32.064 --> 00:25:35.200 line:-1 position:50%
Our formatters handle hundreds
of combinations of languages


479
00:25:35.200 --> 00:25:39.838 line:-1 position:50%
and regions, and a variety
of types and units.


480
00:25:39.838 --> 00:25:44.376 line:-1 position:50%
So don't hardcode;
let us do the hard work.


481
00:25:44,376 --> 00:25:47,413 line:-1
And this is easier than ever
starting this year


482
00:25:47,413 --> 00:25:49,915 line:-1
to adopt formatters in Swift.


483
00:25:49,915 --> 00:25:51,784 line:-1
We made them easy to use


484
00:25:51.784 --> 00:25:55.654 line:-1 position:50%
inline in your string
interpolation.


485
00:25:55,654 --> 00:25:57,623 position:50%
Check this year's
"What's new in Foundation"


486
00:25:57,623 --> 00:25:59,491 line:0
to find your new favorite API


487
00:25:59,491 --> 00:26:03,028 position:50%
and get details about
all those we've seen today.


488
00:26:03,028 --> 00:26:05,197 line:0
If you need to deploy
to previous releases


489
00:26:05,197 --> 00:26:10,102 line:0
or want details on formatters,
check last year's session.


490
00:26:10,102 --> 00:26:13,372 line:-1
All right, what I want you
to take away today


491
00:26:13.372 --> 00:26:17.409 line:-1 position:50%
is that if you write code
using modern APIs,


492
00:26:17,409 --> 00:26:21,046 line:-1
Xcode will generate
all the strings for you.


493
00:26:21,046 --> 00:26:24,750 line:-1
We saw how you can organize
your strings across bundles,


494
00:26:24.750 --> 00:26:28.587 line:-1 position:50%
and we discovered new APIs
to make grammar and formatting


495
00:26:28,587 --> 00:26:30,689 line:-1
easy for you.


496
00:26:30,689 --> 00:26:32,624 line:-1
If you follow
all these techniques,


497
00:26:32,624 --> 00:26:37,796 line:-1
adding a new language
won't require any code changes!


498
00:26:37.796 --> 00:26:40.098 line:-1 position:50%
Lastly, always test.


499
00:26:40,098 --> 00:26:42,334 line:-1
No matter how much effort
you put into


500
00:26:42,334 --> 00:26:46,238 line:-1
localizing your strings,
you should test your app


501
00:26:46,238 --> 00:26:49,942 line:-1
to make sure it runs great
in all languages.


502
00:26:49.942 --> 00:26:52.244 line:-1 position:50%
With that, I can't wait
to book concerts


503
00:26:52,244 --> 00:26:54,713 line:-1
with your fully localized app.


504
00:26:54,713 --> 00:26:58,217 line:-1
Enjoy the rest of WWDC,
thank you for watching.


505
00:26:58,217 --> 00:27:00,953 line:0 size:2% align:center
♪

