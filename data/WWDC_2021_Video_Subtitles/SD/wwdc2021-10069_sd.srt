2
00:00:00,000 --> 00:00:02,102 line:-1
[MAC STARTUP CHIME]


3
00:00:02,102 --> 00:00:05,772 line:-1
♪ Bass music playing ♪


4
00:00:05,772 --> 00:00:07,708 line:-1
[KEYSTROKES]


5
00:00:07,708 --> 00:00:09,676 size:2% align:right position:90%
♪


6
00:00:09.676 --> 00:00:10.811 line:-1 position:50%
Erik Hornberger: Welcome back


7
00:00:10,811 --> 00:00:12,846 line:-1
to the research and care app
code-along!


8
00:00:12.846 --> 00:00:15.182 line:-1 position:50%
This is part two
of our three-part series


9
00:00:15,182 --> 00:00:18,018 line:-1
where you and I will build out
a physical therapy app


10
00:00:18.018 --> 00:00:19.453 line:-1 position:50%
for our friend Jamie.


11
00:00:19.453 --> 00:00:20.888 line:-1 position:50%
If you'd like to follow along,


12
00:00:20.888 --> 00:00:24.458 line:-1 position:50%
you can find our project
in the session resources.


13
00:00:24.458 --> 00:00:27.361 line:-1 position:50%
I'll just go ahead
and get logged in here.


14
00:00:27.361 --> 00:00:29.096 line:-1 position:50%
If you joined us
for session one,


15
00:00:29,096 --> 00:00:33,400 line:-1
you'll recall that we just
finished onboarding and consent.


16
00:00:33,400 --> 00:00:36,136 line:-1
In this session --
Oh, hang on.


17
00:00:36,136 --> 00:00:38,972 line:-1
[LAUGHS] It looks like
we've got a message from Jamie.


18
00:00:38.972 --> 00:00:41.408 line:-1 position:50%
"Got some new ideas
for the app."


19
00:00:41.408 --> 00:00:43.644 line:-1 position:50%
"Did you see my last text?"


20
00:00:43,644 --> 00:00:45,979 line:-1
Additional app requirements.


21
00:00:45,979 --> 00:00:49,783 line:-1
Jamie has invited you to
collaborate on a Notes document.


22
00:00:49,783 --> 00:00:51,852 line:-1
OK, well, let's just see


23
00:00:51.852 --> 00:00:55.522 line:-1 position:50%
what we're going
to be doing this time!


24
00:00:55.522 --> 00:00:57.557 line:-1 position:50%
Displaying forms,
persisting some data,


25
00:00:57.557 --> 00:00:59.760 line:-1 position:50%
dynamic schedules,
range of motion. OK.


26
00:00:59,760 --> 00:01:01,795 line:-1
So it looks like Jamie wants us


27
00:01:01,795 --> 00:01:04,097 line:-1
to set up a daily
check-in survey


28
00:01:04,097 --> 00:01:07,167 line:-1
where we ask the participants
about how much sleep they got


29
00:01:07,167 --> 00:01:09,403 line:-1
and how much pain
they're experiencing.


30
00:01:09,403 --> 00:01:11,705 line:-1
We'll show you how to use
ResearchKit's form items


31
00:01:11,705 --> 00:01:15,142 line:-1
to put multiple questions
on a single page.


32
00:01:15.142 --> 00:01:17.277 line:-1 position:50%
Then, we'll need
to parse the results


33
00:01:17,277 --> 00:01:21,315 line:-1
from the ResearchKit survey
and persist them into CareKit.


34
00:01:21.315 --> 00:01:23.450 line:-1 position:50%
That'll cause
our completion rings to fill up


35
00:01:23.450 --> 00:01:26.053 line:-1 position:50%
and our task card UI to update.


36
00:01:26.053 --> 00:01:27.955 line:-1 position:50%
We'll also go into detail
on how to create


37
00:01:27,955 --> 00:01:30,824 line:-1
more advanced schedules
with CareKit,


38
00:01:30.824 --> 00:01:33.160 line:-1 position:50%
and then we'll use
one of those schedules --


39
00:01:33.160 --> 00:01:35.896 line:-1 position:50%
along with ResearchKit --
to prompt participants


40
00:01:35,896 --> 00:01:39,266 line:-1
to measure the range of motion
in their knees.


41
00:01:39,266 --> 00:01:43,670 line:-1
We've got a lot to cover here,
so let's jump in!


42
00:01:43,670 --> 00:01:46,273 line:-1
We'll get started with
the daily check-in survey.


43
00:01:46.273 --> 00:01:48.608 line:-1 position:50%
Just like we did
for our onboarding task,


44
00:01:48,608 --> 00:01:53,680 line:-1
we'll begin by defining
a schedule and a CareKit task.


45
00:01:53.680 --> 00:01:55.615 line:-1 position:50%
It's supposed to be
a daily check-in,


46
00:01:55,615 --> 00:01:57,751 line:-1
so let's just schedule it
to happen each morning


47
00:01:57.751 --> 00:02:00.787 line:-1 position:50%
at, say, 8:00 am.


48
00:02:00.787 --> 00:02:03.423 line:-1 position:50%
We'll create the check-in task
with a unique identifier


49
00:02:03.423 --> 00:02:05.859 line:-1 position:50%
and the schedule
we just defined.


50
00:02:05,859 --> 00:02:10,263 line:0
And of course, we'll need
to persist it here in our store.


51
00:02:10.263 --> 00:02:11.932 line:-1 position:50%
This is all exactly the same


52
00:02:11,932 --> 00:02:13,800 line:-1
as what we did
for the onboarding task.


53
00:02:13.800 --> 00:02:17.904 line:-1 position:50%
Hopefully it's starting
to feel familiar to you!


54
00:02:17.904 --> 00:02:19.940 line:-1 position:50%
And just like
the onboarding task,


55
00:02:19.940 --> 00:02:23.744 line:-1 position:50%
our next step will be to jump
over to CareFeedViewController


56
00:02:23.744 --> 00:02:26.980 line:-1 position:50%
and tell CareKit
how to display this task.


57
00:02:26,980 --> 00:02:28,081 position:50%
This time around,


58
00:02:28,081 --> 00:02:31,084 line:0
let's make our solution
a bit more generic.


59
00:02:31,084 --> 00:02:34,154 line:0
We'll fetch all the tasks
for the current date.


60
00:02:34,154 --> 00:02:36,423 line:0
Then for each task,
we'll create a view controller,


61
00:02:36,423 --> 00:02:39,426 position:50%
and append that view controller
into our list.


62
00:02:39,426 --> 00:02:42,796 line:-1
This should scale a bit more
nicely as we add more tasks.


63
00:02:42.796 --> 00:02:46.633 line:-1 position:50%
Now, we haven't actually
defined this fetchTasks method


64
00:02:46.633 --> 00:02:49.236 line:-1 position:50%
or this viewController method.


65
00:02:49,236 --> 00:02:51,538 line:-1
We'll need to drop down
a bit further in our file


66
00:02:51,538 --> 00:02:54,041 line:-1
and write them out.


67
00:02:54,041 --> 00:02:56,443 line:-1
So here's our fetchTasks method.


68
00:02:56,443 --> 00:03:00,080 line:-1
We start by creating a
task query for a specific date,


69
00:03:00,080 --> 00:03:03,150 line:-1
and we specify that
we want to exclude tasks


70
00:03:03.150 --> 00:03:05.585 line:-1 position:50%
that don't have
any scheduled events.


71
00:03:05.585 --> 00:03:07.087 line:-1 position:50%
This comes into play
when we have tasks


72
00:03:07.087 --> 00:03:09.156 line:-1 position:50%
that don't happen every day.


73
00:03:09,156 --> 00:03:10,590 line:-1
Let's say, for example,
you've been given


74
00:03:10.590 --> 00:03:13.994 line:-1 position:50%
a prescription to take
a medication every Monday.


75
00:03:13.994 --> 00:03:15.495 line:-1 position:50%
On Tuesdays and Wednesdays,


76
00:03:15.495 --> 00:03:17.664 line:-1 position:50%
that prescription
is still assigned to you,


77
00:03:17.664 --> 00:03:19.766 line:-1 position:50%
there just aren't
any pills to take.


78
00:03:19.766 --> 00:03:22.002 line:-1 position:50%
This property ensures
that such tasks


79
00:03:22.002 --> 00:03:24.404 line:-1 position:50%
are not returned from the query.


80
00:03:24.404 --> 00:03:26.139 line:-1 position:50%
Once the query comes back,


81
00:03:26.139 --> 00:03:31.378 line:-1 position:50%
we'll pass the tasks we fetched
to our completion handler.


82
00:03:31,378 --> 00:03:33,780 line:-1
We'll also need to fill out
a method that takes a task


83
00:03:33,780 --> 00:03:36,149 line:-1
and returns a view controller.


84
00:03:36,149 --> 00:03:38,351 line:-1
We'll inspect
the id of the task,


85
00:03:38,351 --> 00:03:40,420 line:-1
and if it's the checkIn task,


86
00:03:40,420 --> 00:03:42,956 line:-1
we'll use the new
SurveyTaskViewController


87
00:03:42.956 --> 00:03:45.992 line:-1 position:50%
we introduced in part one.


88
00:03:45.992 --> 00:03:49.563 line:-1 position:50%
Just like before,
we'll supply a task,


89
00:03:49.563 --> 00:03:50.764 line:-1 position:50%
an eventQuery,


90
00:03:50,764 --> 00:03:52,933 line:-1
and a reference
to the storeManager.


91
00:03:52,933 --> 00:03:55,802 line:-1
We'll also need to pass in
a ResearchKit survey


92
00:03:55,802 --> 00:03:58,472 line:-1
and a function for converting
the ResearchKit result


93
00:03:58.472 --> 00:04:00.974 line:-1 position:50%
into an array of CareKit
outcome values.


94
00:04:00,974 --> 00:04:03,677 line:-1
We'll write these two methods
in just a moment,


95
00:04:03.677 --> 00:04:07.714 line:-1 position:50%
but first let's take a look
at how our app,


96
00:04:07.714 --> 00:04:12.486 line:-1 position:50%
ResearchKit, and CareKit
are going to work together.


97
00:04:12,486 --> 00:04:16,123 line:-1
Our app will create
a ResearchKit survey.


98
00:04:16,123 --> 00:04:18,258 line:-1
ResearchKit will take over


99
00:04:18,258 --> 00:04:22,496 line:-1
and guide the participant
through the survey flow.


100
00:04:22,496 --> 00:04:25,565 line:-1
It will produce
an ORKTaskResult,


101
00:04:25,565 --> 00:04:28,668 line:-1
which it will hand back
to our app.


102
00:04:28,668 --> 00:04:31,771 line:-1
Then our app will convert
the ResearchKit result


103
00:04:31.771 --> 00:04:36.209 line:-1 position:50%
into CareKit outcome values to
be persisted in CareKit's store.


104
00:04:36.209 --> 00:04:39.679 line:-1 position:50%
Saving a new outcome will cause
our completion rings to fill up


105
00:04:39,679 --> 00:04:42,415 line:-1
and our task cards' UIs
to update.


106
00:04:42.415 --> 00:04:45.452 line:-1 position:50%
All right, so let's tackle
these two methods.


107
00:04:45,452 --> 00:04:49,523 line:-1
We'll define them
over in Surveys.swift.


108
00:04:49,523 --> 00:04:51,358 line:-1
I've prepared
a couple of identifiers


109
00:04:51,358 --> 00:04:53,760 line:-1
that we'll be using down below.


110
00:04:53,760 --> 00:04:57,430 line:-1
We need one method for
creating a ResearchKit survey


111
00:04:57.430 --> 00:04:59.266 line:-1 position:50%
and one for
converting the result


112
00:04:59.266 --> 00:05:01.468 line:-1 position:50%
into CareKit outcome values.


113
00:05:01.468 --> 00:05:03.336 line:-1 position:50%
We want to discover
if there is a link


114
00:05:03.336 --> 00:05:05.572 line:-1 position:50%
between the amount of sleep
a participant gets


115
00:05:05.572 --> 00:05:07.474 line:-1 position:50%
and how much pain
they experience,


116
00:05:07.474 --> 00:05:11.845 line:-1 position:50%
so we'll create a form
with two questions.


117
00:05:11.845 --> 00:05:15.115 line:-1 position:50%
The formStep requires
a unique identifier,


118
00:05:15.115 --> 00:05:17.817 line:-1 position:50%
a title, and some text.


119
00:05:17,817 --> 00:05:19,953 line:-1
We'll also mark it nonoptional,


120
00:05:19.953 --> 00:05:23.723 line:-1 position:50%
since we don't want
the form to be skippable.


121
00:05:23,723 --> 00:05:27,527 line:-1
Next, let's create our two items.


122
00:05:27.527 --> 00:05:29.729 line:-1 position:50%
The first will inquire
about pain,


123
00:05:29.729 --> 00:05:32.599 line:-1 position:50%
and we'll make it
a nonoptional question.


124
00:05:32.599 --> 00:05:36.536 line:-1 position:50%
What that means is that the form
itself cannot be skipped,


125
00:05:36.536 --> 00:05:38.772 line:-1 position:50%
nor can we submit the form


126
00:05:38.772 --> 00:05:42.809 line:-1 position:50%
without an answer
to this particular question.


127
00:05:42,809 --> 00:05:46,513 line:-1
You can see that we also need
to provide an answer format.


128
00:05:46,513 --> 00:05:48,448 line:-1
The answer format
tells ResearchKit


129
00:05:48.448 --> 00:05:50.283 line:-1 position:50%
what kind of answer to expect


130
00:05:50,283 --> 00:05:53,086 line:-1
and how to prompt the user
to enter it.


131
00:05:53.086 --> 00:05:56.256 line:-1 position:50%
Are they entering a weight,
are they selecting an image,


132
00:05:56.256 --> 00:05:58.792 line:-1 position:50%
or are they recording
their voice?


133
00:05:58,792 --> 00:06:00,827 line:-1
In this case,
we'll opt to use


134
00:06:00.827 --> 00:06:06.466 line:-1 position:50%
the ORKScaleAnswerFormat,
which creates a UISlider.


135
00:06:06.466 --> 00:06:09.569 line:-1 position:50%
Sliders are a familiar interface
to iOS users;


136
00:06:09,569 --> 00:06:12,539 line:-1
they're intuitive, and they
provide a much nicer experience


137
00:06:12,539 --> 00:06:15,075 line:-1
than filling in circles
on a paper survey.


138
00:06:15.075 --> 00:06:17.744 line:-1 position:50%
We'll specify a maximum
pain score of 10,


139
00:06:17.744 --> 00:06:20.046 line:-1 position:50%
a minimum value of 1,


140
00:06:20.046 --> 00:06:24.351 line:-1 position:50%
set the step size to 1 so that
only round numbers are allowed,


141
00:06:24.351 --> 00:06:31.224 line:-1 position:50%
and provide descriptions
of the min and the max values.


142
00:06:31,224 --> 00:06:33,226 line:-1
All right, let's drop down
a little further


143
00:06:33.226 --> 00:06:36.796 line:-1 position:50%
and create one more item:
a sleepItem.


144
00:06:36.796 --> 00:06:39.666 line:-1 position:50%
This is almost exactly the same
as the painItem,


145
00:06:39,666 --> 00:06:43,003 line:-1
and we'll use a nearly identical
answer format as well.


146
00:06:43,003 --> 00:06:44,938 line:-1
The only difference
is the identifier,


147
00:06:44,938 --> 00:06:47,507 line:-1
and that we've changed
the min to 0 hours of sleep


148
00:06:47,507 --> 00:06:50,577 line:-1
and the max
to 12 hours of sleep.


149
00:06:50,577 --> 00:06:54,614 position:50%
Now we just need to pass these
two items into our form item,


150
00:06:54,614 --> 00:07:01,021 line:0
then create an ORKOrderedTask
with a single formStep.


151
00:07:01,021 --> 00:07:02,889 position:50%
The second function
is supposed to take


152
00:07:02,889 --> 00:07:04,691 position:50%
a ResearchKit task result


153
00:07:04,691 --> 00:07:08,295 line:0
and create an array
of CareKit values to persist.


154
00:07:08,295 --> 00:07:10,897 line:-1
But before we write this code,
let's take a look


155
00:07:10,897 --> 00:07:13,667 line:-1
at the structure of
a ResearchKit task result


156
00:07:13,667 --> 00:07:17,404 line:-1
so that we have a better idea
of how to parse it.


157
00:07:17.404 --> 00:07:20.607 line:-1 position:50%
It's important to understand
that ORKTaskResults


158
00:07:20.607 --> 00:07:22.676 line:-1 position:50%
are nested types.


159
00:07:22.676 --> 00:07:26.546 line:-1 position:50%
We want to start at the root
result for the check-in survey


160
00:07:26,546 --> 00:07:30,684 line:-1
and then drill down
to the checkin.form.


161
00:07:30.684 --> 00:07:33.853 line:-1 position:50%
The checkin.form
has two children itself,


162
00:07:33.853 --> 00:07:37.357 line:-1 position:50%
and we'll need to dig down
to each of them.


163
00:07:37,357 --> 00:07:39,793 position:50%
First, we want to find
the answers given


164
00:07:39,793 --> 00:07:42,095 line:0
for the pain item identifier


165
00:07:42,095 --> 00:07:46,199 position:50%
and then for
the sleep item identifier.


166
00:07:46,199 --> 00:07:48,902 line:0
We know those are both
scale question results,


167
00:07:48,902 --> 00:07:51,905 position:50%
and we can get
the scale answers off of them.


168
00:07:51,905 --> 00:07:56,176 position:50%
In this example, 4 and 11.


169
00:07:56.176 --> 00:07:58.545 line:-1 position:50%
So that's what
it looks like visually,


170
00:07:58.545 --> 00:08:03.717 line:-1 position:50%
and this is what the same
process looks like in code.


171
00:08:03,717 --> 00:08:06,820 line:-1
Starting at the root result,
we find the first child


172
00:08:06.820 --> 00:08:09.489 line:-1 position:50%
that is marked
with the form identifier.


173
00:08:09.489 --> 00:08:11.658 line:-1 position:50%
That result will have
its own children,


174
00:08:11,658 --> 00:08:13,626 line:-1
and we can extract
all of the children


175
00:08:13,626 --> 00:08:16,563 line:-1
with the type
ORKScaleQuestionResult,


176
00:08:16.563 --> 00:08:18.798 line:-1 position:50%
of which we know
there will be two.


177
00:08:18.798 --> 00:08:22.335 line:-1 position:50%
The pain answer is the first one
marked with the pain identifier,


178
00:08:22,335 --> 00:08:24,003 line:-1
and the sleep answer
is the first one


179
00:08:24.003 --> 00:08:26.106 line:-1 position:50%
marked with
the sleep identifier.


180
00:08:26.106 --> 00:08:31.344 line:-1 position:50%
Both will have scaleAnswer
properties.


181
00:08:31,344 --> 00:08:33,079 line:-1
Once we have
the answers in hand,


182
00:08:33,079 --> 00:08:36,950 line:-1
we need to convert them
into a CareKit outcome value --


183
00:08:36.950 --> 00:08:39.619 line:-1 position:50%
one for sleep
and one for pain.


184
00:08:39.619 --> 00:08:42.188 line:-1 position:50%
The kind property here
is optional.


185
00:08:42,188 --> 00:08:43,790 line:-1
You don't need to set it,


186
00:08:43,790 --> 00:08:47,360 line:-1
but it can be helpful if you
want to look up a value later.


187
00:08:47,360 --> 00:08:50,764 line:-1
We'll see why this is useful
in part three!


188
00:08:50.764 --> 00:08:52.465 line:-1 position:50%
The last thing
that we need to do


189
00:08:52,465 --> 00:08:55,702 line:-1
is return our two values
from this function.


190
00:08:55.702 --> 00:08:57.237 line:-1 position:50%
With all that in place,


191
00:08:57,237 --> 00:08:59,606 line:-1
our daily check-in
should be good to go!


192
00:08:59.606 --> 00:09:04.177 line:-1 position:50%
Let's run the app
and see how we're doing.


193
00:09:04.177 --> 00:09:06.379 line:-1 position:50%
Note that we have
already completed onboarding


194
00:09:06,379 --> 00:09:07,380 line:-1
in part one,


195
00:09:07.380 --> 00:09:10.316 line:-1 position:50%
so we don't need to go through
the consent flow again.


196
00:09:10.316 --> 00:09:12.385 line:-1 position:50%
This is the true content
of our app,


197
00:09:12,385 --> 00:09:15,355 line:-1
and the CareKit check-in task
we've just created


198
00:09:15.355 --> 00:09:17.991 line:-1 position:50%
is right where
we expect it to be.


199
00:09:17,991 --> 00:09:22,262 line:-1
Tapping on the card takes us
into the ResearchKit survey.


200
00:09:22.262 --> 00:09:24.497 line:-1 position:50%
We'll just go ahead
and give some answers here.


201
00:09:24.497 --> 00:09:27.300 line:-1 position:50%
Let's go with,
like, say, a 4 for pain


202
00:09:27.300 --> 00:09:31.438 line:-1 position:50%
and we'll go with
8 hours of sleep.


203
00:09:31.438 --> 00:09:33.706 line:-1 position:50%
When we get back
to our Care Feed,


204
00:09:33.706 --> 00:09:36.643 line:-1 position:50%
we can see that the completion
ring at the top fills up,


205
00:09:36,643 --> 00:09:38,912 line:-1
indicating that the answers
from ResearchKit


206
00:09:38,912 --> 00:09:41,481 line:-1
were successfully
parsed into CareKit.


207
00:09:41.481 --> 00:09:43.950 line:-1 position:50%
This is looking really good.


208
00:09:43.950 --> 00:09:45.585 line:-1 position:50%
So we've finished
our check-in survey


209
00:09:45.585 --> 00:09:47.520 line:-1 position:50%
with its multiquestion form,


210
00:09:47,520 --> 00:09:50,757 line:-1
and we've verified that data
is persisted into CareKit


211
00:09:50.757 --> 00:09:52.325 line:-1 position:50%
the way that we want it to be.


212
00:09:52,325 --> 00:09:54,260 line:-1
That means we're about
halfway there!


213
00:09:54.260 --> 00:09:57.664 line:-1 position:50%
It's time to move on to
advanced schedules in CareKit,


214
00:09:57.664 --> 00:10:01.801 line:-1 position:50%
which we'll later apply
to our range of motion task.


215
00:10:01.801 --> 00:10:05.004 line:-1 position:50%
Like the check-in task and
the onboarding task before it,


216
00:10:05.004 --> 00:10:07.707 line:-1 position:50%
the first step
is to define a schedule.


217
00:10:07.707 --> 00:10:09.409 line:-1 position:50%
But we're going to do something


218
00:10:09.409 --> 00:10:12.045 line:-1 position:50%
a bit more involved
for this one.


219
00:10:12,045 --> 00:10:15,648 line:-1
Jamie has asked that we reduce
how often we ask participants


220
00:10:15,648 --> 00:10:19,419 line:-1
to measure their range of motion
as time goes on.


221
00:10:19,419 --> 00:10:22,188 line:-1
Specifically, we want
to set up a schedule


222
00:10:22.188 --> 00:10:25.325 line:-1 position:50%
that prompts the participant to
measure their range of motion


223
00:10:25,325 --> 00:10:27,660 line:-1
every day for the first week,


224
00:10:27,660 --> 00:10:31,231 line:-1
but then, only once a week
until the end of the month,


225
00:10:31,231 --> 00:10:33,500 line:-1
and then never again after that.


226
00:10:33.500 --> 00:10:35.768 line:-1 position:50%
So once a day
for the first week,


227
00:10:35.768 --> 00:10:39.372 line:-1 position:50%
then once a week
for the rest of the month.


228
00:10:39.372 --> 00:10:43.243 line:-1 position:50%
Let's begin by defining
a few key dates:


229
00:10:43.243 --> 00:10:47.747 line:-1 position:50%
thisMorning, nextWeek,
and nextMonth.


230
00:10:47.747 --> 00:10:49.482 line:-1 position:50%
Now, if you want to create


231
00:10:49,482 --> 00:10:51,451 line:-1
more nuanced schedules
in CareKit,


232
00:10:51,451 --> 00:10:55,121 line:-1
OCKScheduleElement
is the tool for the job.


233
00:10:55,121 --> 00:10:58,491 line:-1
Schedule elements
have a start date, an end date,


234
00:10:58.491 --> 00:11:02.195 line:-1 position:50%
and repeat at some interval
during that period.


235
00:11:02.195 --> 00:11:05.431 line:-1 position:50%
The dailyElement here
starts this morning,


236
00:11:05,431 --> 00:11:10,236 line:-1
ends next week,
and repeats every day.


237
00:11:10,236 --> 00:11:13,306 line:-1
The second element
is the weeklyElement.


238
00:11:13.306 --> 00:11:16.276 line:-1 position:50%
It starts next week,
ends next month,


239
00:11:16.276 --> 00:11:19.679 line:-1 position:50%
and repeats every week.


240
00:11:19,679 --> 00:11:21,514 position:50%
Now that we have
our two elements,


241
00:11:21,514 --> 00:11:25,885 position:50%
we can compose them together
to create a compound schedule,


242
00:11:25,885 --> 00:11:29,255 position:50%
and then we can create
a new range of motion task


243
00:11:29,255 --> 00:11:31,024 position:50%
using that schedule.


244
00:11:31.024 --> 00:11:34.327 line:-1 position:50%
Of course, we'll need to add it
into our store as well.


245
00:11:34,327 --> 00:11:35,962 line:-1
Just like our other tasks,


246
00:11:35.962 --> 00:11:39.532 line:-1 position:50%
the next step is to hop back
into our CareFeed


247
00:11:39.532 --> 00:11:43.436 line:-1 position:50%
and specify how we want CareKit
to display this task.


248
00:11:43.436 --> 00:11:47.140 line:-1 position:50%
Once again, we'll use
the SurveyTaskViewController,


249
00:11:47,140 --> 00:11:50,276 line:-1
and we'll need to supply
a survey, as well as functions,


250
00:11:50,276 --> 00:11:52,445 line:-1
to extract the answers.


251
00:11:52.445 --> 00:11:56.349 line:-1 position:50%
Let's jump back into
Surveys.swift and stub those out


252
00:11:56.349 --> 00:12:00.186 line:-1 position:50%
to provide a bit of structure
before we get started.


253
00:12:00,186 --> 00:12:04,390 line:-1
OK, so the range of motion task
is actually pretty simple.


254
00:12:04,390 --> 00:12:05,625 line:-1
As a matter of fact,


255
00:12:05,625 --> 00:12:09,262 line:-1
it's built into ResearchKit
as a predefined task.


256
00:12:09.262 --> 00:12:11.164 line:-1 position:50%
We just need to give it
an identifier


257
00:12:11.164 --> 00:12:15.468 line:-1 position:50%
and specify which knee
is to be measured.


258
00:12:15,468 --> 00:12:20,173 line:-1
Now the predefined task has
a completion step built into it,


259
00:12:20.173 --> 00:12:23.009 line:-1 position:50%
and the message it shows
is a reasonable default,


260
00:12:23.009 --> 00:12:26.145 line:-1 position:50%
but we'd really like to show
a custom message


261
00:12:26,145 --> 00:12:28,014 line:-1
tailored to our use case.


262
00:12:28.014 --> 00:12:29.415 line:-1 position:50%
So we're going
to tell ResearchKit


263
00:12:29,415 --> 00:12:32,552 line:-1
to omit the standard
completion step.


264
00:12:32.552 --> 00:12:34.287 line:-1 position:50%
Then, we'll define our own


265
00:12:34.287 --> 00:12:36.556 line:-1 position:50%
and give it
an encouraging message


266
00:12:36.556 --> 00:12:40.026 line:-1 position:50%
specifically related
to physical therapy.


267
00:12:40.026 --> 00:12:41.628 line:-1 position:50%
So that's the first function.


268
00:12:41.628 --> 00:12:43.463 line:-1 position:50%
The second one
is where we'll convert


269
00:12:43,463 --> 00:12:48,101 line:-1
from a ResearchKit result
to CareKit outcome values.


270
00:12:48.101 --> 00:12:52.472 line:-1 position:50%
Hopefully this is starting
to feel familiar now.


271
00:12:52.472 --> 00:12:54.607 line:-1 position:50%
There are a lot of ways
we can go about this,


272
00:12:54,607 --> 00:12:56,075 line:-1
but today we're going
to dig down


273
00:12:56,075 --> 00:12:58,978 line:-1
until we get to the first
range of motion result.


274
00:12:58,978 --> 00:13:01,014 line:-1
And we know
there will only be one.


275
00:13:01.014 --> 00:13:03.216 line:-1 position:50%
Range of motion results
actually have a bunch


276
00:13:03.216 --> 00:13:05.084 line:-1 position:50%
of useful properties on them,


277
00:13:05.084 --> 00:13:08.087 line:-1 position:50%
but the one we're most
interested in for our use case


278
00:13:08,087 --> 00:13:10,390 line:-1
is range, which measures how far


279
00:13:10.390 --> 00:13:14.060 line:-1 position:50%
the participant was able
to bend their knee in degrees.


280
00:13:14,060 --> 00:13:17,263 position:50%
We can use the kind field
along with key paths


281
00:13:17,263 --> 00:13:20,233 line:0
to make it easy to look up
this value later.


282
00:13:20,233 --> 00:13:24,771 line:0
That's foreshadowing
for part three, by the way.


283
00:13:24.771 --> 00:13:26.773 line:-1 position:50%
All right, and that wraps up
our function


284
00:13:26,773 --> 00:13:29,575 line:-1
for extracting
the outcome values.


285
00:13:29.575 --> 00:13:32.011 line:-1 position:50%
Nice!
I think we're all set up.


286
00:13:32,011 --> 00:13:35,214 line:-1
Let's run our app and
I'll show you how it all works.


287
00:13:35.214 --> 00:13:37.650 line:-1 position:50%
The first thing that we want
to check is that our schedule


288
00:13:37,650 --> 00:13:40,687 line:-1
is working the way
that we intend it to.


289
00:13:40,687 --> 00:13:43,189 line:-1
The Range Of Motion task
should show up


290
00:13:43,189 --> 00:13:45,858 line:-1
every day during the first week.


291
00:13:45.858 --> 00:13:49.696 line:-1 position:50%
As I page through the 8th,
and the 9th, and the 10th,


292
00:13:49.696 --> 00:13:53.366 line:-1 position:50%
the range of motion task
shows up every day.


293
00:13:53,366 --> 00:13:55,735 line:-1
But when I get out to next week,


294
00:13:55.735 --> 00:13:59.038 line:-1 position:50%
it stops showing up
except on Monday here,


295
00:13:59,038 --> 00:14:03,276 line:-1
which is the one day of the week
that we still want it to appear.


296
00:14:03,276 --> 00:14:06,379 line:-1
Here it's still showing up
only once per week.


297
00:14:06,379 --> 00:14:09,515 line:-1
But if we go out even further
into the future,


298
00:14:09,515 --> 00:14:11,350 line:-1
all the way to next month,


299
00:14:11.350 --> 00:14:14.587 line:-1 position:50%
it doesn't show up
at all anymore.


300
00:14:14.587 --> 00:14:16.723 line:-1 position:50%
CareKit schedules
are a great way


301
00:14:16.723 --> 00:14:19.425 line:-1 position:50%
to preprogram
regimens like this.


302
00:14:19,425 --> 00:14:22,829 line:-1
Let's jump back to today
and try this out.


303
00:14:27.834 --> 00:14:29.736 line:-1 position:50%
When I tap Begin,


304
00:14:29.736 --> 00:14:33.873 line:-1 position:50%
our instructions step helps me
understand what to do.


305
00:14:33.873 --> 00:14:36.876 line:-1 position:50%
When I start, Siri will give me
audio guidance,


306
00:14:36,876 --> 00:14:40,012 line:-1
so I'm just going to follow
her instructions.


307
00:14:40,012 --> 00:14:42,048 line:-1
Siri: Place your device
on your left knee.


308
00:14:42.048 --> 00:14:43.750 line:-1 position:50%
Tap the screen
and extend your left knee


309
00:14:43,750 --> 00:14:45,118 line:-1
as far as you can.


310
00:14:45,118 --> 00:14:50,256 line:-1
Touch anywhere to continue.


311
00:14:50,256 --> 00:14:52,291 line:-1
[BEEP] When you are done,
return your left knee


312
00:14:52,291 --> 00:14:55,995 line:-1
to the start position,
then tap anywhere.


313
00:14:55.995 --> 00:14:58.264 line:-1 position:50%
[BEEP]


314
00:14:58,264 --> 00:15:01,834 line:-1
Erik: Nice.


315
00:15:01,834 --> 00:15:04,804 line:-1
That's pretty neat, right?


316
00:15:04.804 --> 00:15:07.807 line:-1 position:50%
Usually you'd have to make
a visit to the doctor's office


317
00:15:07.807 --> 00:15:10.343 line:-1 position:50%
and a therapist would help you
take measurements like this,


318
00:15:10.343 --> 00:15:12.678 line:-1 position:50%
but ResearchKit
can help participants


319
00:15:12,678 --> 00:15:15,748 line:-1
take measurements
in their own homes.


320
00:15:15.748 --> 00:15:17.850 line:-1 position:50%
I think Jamie will be
really impressed


321
00:15:17,850 --> 00:15:19,318 line:-1
with the progress we've made.


322
00:15:19,318 --> 00:15:21,220 line:-1
I'll FaceTime him
right after this


323
00:15:21.220 --> 00:15:24.123 line:-1 position:50%
and send him the latest version
of our app on TestFlight.


324
00:15:24,123 --> 00:15:26,759 line:-1
While I'm bringing Jamie
up to speed on our progress,


325
00:15:26,759 --> 00:15:29,228 line:-1
you can find more info
about our frameworks


326
00:15:29.228 --> 00:15:31.030 line:-1 position:50%
on researchandcare.org,


327
00:15:31.030 --> 00:15:34.400 line:-1 position:50%
or read through
the source code on GitHub.


328
00:15:34,400 --> 00:15:37,103 position:50%
In session one,
we set up onboarding.


329
00:15:37,103 --> 00:15:40,239 line:0
In this session,
we scheduled a pair of tasks.


330
00:15:40,239 --> 00:15:43,109 line:-1
Join us again
for our third and final session


331
00:15:43.109 --> 00:15:45.178 line:-1 position:50%
to see how ResearchKit
and CareKit


332
00:15:45.178 --> 00:15:47.413 line:-1 position:50%
can help us finish up our app.


333
00:15:47,413 --> 00:15:49,115 line:-1
See you soon!


334
00:15:49,115 --> 00:15:52,251 line:0 align:right size:2%
♪

