2
00:00:00.000 --> 00:00:02.002 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02.002 --> 00:00:05.606 line:-1 position:50%
♪ Bass music playing ♪


4
00:00:05.606 --> 00:00:07.207 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,207 --> 00:00:09,476 size:2% position:89% align:center
♪


6
00:00:09.476 --> 00:00:11.044 line:-1 position:50%
Itai Rom: Welcome to
"Customize your advanced


7
00:00:11.044 --> 00:00:12.980 line:-1 position:50%
Xcode Cloud workflows."


8
00:00:12.980 --> 00:00:14.915 line:-1 position:50%
My name is Itai,
and I'll be joined later


9
00:00:14.915 --> 00:00:17.284 line:-1 position:50%
by my colleague, Yan.


10
00:00:17.284 --> 00:00:20.020 line:-1 position:50%
This year we're introducing
Xcode Cloud.


11
00:00:20,020 --> 00:00:23,257 line:-1
Xcode Cloud is a continuous
integration and delivery service


12
00:00:23.257 --> 00:00:24.725 line:-1 position:50%
built into Xcode


13
00:00:24.725 --> 00:00:27.761 line:-1 position:50%
and designed exclusively
for Apple developers.


14
00:00:27,761 --> 00:00:29,897 line:-1
In other sessions,
we've shown how you can set up


15
00:00:29.897 --> 00:00:32.766 line:-1 position:50%
end-to-end workflows
to continuously build, test,


16
00:00:32.766 --> 00:00:34.668 line:-1 position:50%
and distribute your apps.


17
00:00:34,668 --> 00:00:36,403 line:-1
In this session,
we're going to talk about


18
00:00:36.403 --> 00:00:38.639 line:-1 position:50%
some more advanced features
that you can use


19
00:00:38.639 --> 00:00:42.743 line:-1 position:50%
to customize Xcode Cloud
to better fit your team's needs.


20
00:00:42.743 --> 00:00:44.678 line:-1 position:50%
Xcode Cloud is designed
to integrate


21
00:00:44.678 --> 00:00:47.047 line:-1 position:50%
with Apple developer tools
and services --


22
00:00:47,047 --> 00:00:48,649 line:-1
like the developer website,


23
00:00:48.649 --> 00:00:50.617 line:-1 position:50%
TestFlight,
and App Store Connect --


24
00:00:50.617 --> 00:00:52.419 line:-1 position:50%
right out of the box.


25
00:00:52.419 --> 00:00:53.787 line:-1 position:50%
It also integrates
with your essential,


26
00:00:53,787 --> 00:00:55,289 line:-1
day-to-day development tools,


27
00:00:55.289 --> 00:00:58.058 line:-1 position:50%
like all major Git-based
source control providers,


28
00:00:58,058 --> 00:01:00,560 line:-1
and even Slack for messaging.


29
00:01:00.560 --> 00:01:03.730 line:-1 position:50%
However, you may have
in-house or proprietary tools


30
00:01:03,730 --> 00:01:07,301 line:-1
and other external services that
are a key part of your pipeline.


31
00:01:07,301 --> 00:01:08,936 line:-1
In this session,
we'll demonstrate


32
00:01:08.936 --> 00:01:10.971 line:-1 position:50%
how you can customize
Xcode Cloud


33
00:01:10.971 --> 00:01:15.175 line:-1 position:50%
to integrate well with
these tools and services.


34
00:01:15.175 --> 00:01:18.011 line:-1 position:50%
We're going to cover
four customization topics.


35
00:01:18.011 --> 00:01:20.447 line:-1 position:50%
First, we'll discuss using
environment variables


36
00:01:20.447 --> 00:01:23.817 line:-1 position:50%
to pass extra bits of
information into your builds.


37
00:01:23,817 --> 00:01:26,386 line:-1
We'll learn how to use scripts
to run custom commands


38
00:01:26,386 --> 00:01:29,122 line:-1
in the actions
you run in your build.


39
00:01:29.122 --> 00:01:31.425 line:-1 position:50%
And also how to add
other source repositories


40
00:01:31.425 --> 00:01:33.694 line:-1 position:50%
that you need during a build.


41
00:01:33,694 --> 00:01:35,562 line:-1
And finally,
how you can use webhooks


42
00:01:35.562 --> 00:01:39.299 line:-1 position:50%
to integrate Xcode Cloud with
other systems your team uses.


43
00:01:39,299 --> 00:01:40,334 line:-1
There's a lot to cover,


44
00:01:40.334 --> 00:01:44.204 line:-1 position:50%
so let's get straight into it
with environment variables.


45
00:01:44.204 --> 00:01:47.074 line:-1 position:50%
As you plan and configure
workflows for your project,


46
00:01:47,074 --> 00:01:49,676 line:-1
there may be times when you want
the behavior of your build


47
00:01:49.676 --> 00:01:50.777 line:-1 position:50%
to be slightly different


48
00:01:50.777 --> 00:01:53.380 line:-1 position:50%
depending on which
workflow is running.


49
00:01:53.380 --> 00:01:56.249 line:-1 position:50%
For example, if your app depends
on an API service,


50
00:01:56.249 --> 00:01:58.952 line:-1 position:50%
you may want your tests
to use a staging environment


51
00:01:58.952 --> 00:02:00.921 line:-1 position:50%
rather than production.


52
00:02:00,921 --> 00:02:03,357 line:-1
In this case, you'd want to pass
a different URL


53
00:02:03.357 --> 00:02:06.994 line:-1 position:50%
for the API service
into your tests.


54
00:02:06.994 --> 00:02:09.629 line:-1 position:50%
Environment variables
allow you to do just that.


55
00:02:09,629 --> 00:02:12,165 line:-1
They're simple key-value pairs
that allow you to define


56
00:02:12,165 --> 00:02:13,867 line:-1
some information
that you can use


57
00:02:13,867 --> 00:02:17,037 line:-1
to further control
the behavior of your build.


58
00:02:17.037 --> 00:02:19.706 line:-1 position:50%
You can configure any
environment variables you need


59
00:02:19,706 --> 00:02:22,576 line:-1
right in the Environment section
of your workflow.


60
00:02:22,576 --> 00:02:24,978 line:-1
Since they're part
of your workflow configuration,


61
00:02:24.978 --> 00:02:27.080 line:-1 position:50%
you don't have to commit
any additional information


62
00:02:27,080 --> 00:02:29,116 line:-1
to your source repository.


63
00:02:29,116 --> 00:02:31,752 line:-1
Every time your workflow runs,
the variables you've defined


64
00:02:31,752 --> 00:02:37,724 line:-1
will be set in the environments
that are running the actions.


65
00:02:37.724 --> 00:02:41.228 line:-1 position:50%
For sensitive information,
like API keys or access tokens,


66
00:02:41,228 --> 00:02:44,431 line:-1
you can configure
a secret environment variable.


67
00:02:44,431 --> 00:02:47,134 line:-1
Secret environment variables
are handled securely.


68
00:02:47,134 --> 00:02:49,703 line:-1
They're encrypted and stored
securely at all times,


69
00:02:49.703 --> 00:02:51.905 line:-1 position:50%
and their decrypted values
are only available


70
00:02:51,905 --> 00:02:53,507 line:-1
in the temporary environments


71
00:02:53.507 --> 00:02:55.842 line:-1 position:50%
that are used
to run your actions.


72
00:02:55.842 --> 00:02:58.045 line:-1 position:50%
The values are also
redacted from logs,


73
00:02:58,045 --> 00:03:00,013 line:-1
and you can't view them
in the workflow editor


74
00:03:00.013 --> 00:03:03.116 line:-1 position:50%
like you can for
a nonsecret variable.


75
00:03:03.116 --> 00:03:05.786 line:-1 position:50%
Making an environment variable
secret is easy.


76
00:03:05,786 --> 00:03:07,487 line:-1
Just check the "Secret" checkbox


77
00:03:07,487 --> 00:03:09,423 line:-1
in the environment variables
table.


78
00:03:09.423 --> 00:03:10.924 line:-1 position:50%
The value of your
environment variable


79
00:03:10.924 --> 00:03:13.660 line:-1 position:50%
will then be hidden from view
and once you save your change,


80
00:03:13,660 --> 00:03:15,162 line:-1
will be stored securely


81
00:03:15,162 --> 00:03:20,367 line:-1
and can no longer be viewed
in the workflow editor.


82
00:03:20,367 --> 00:03:22,502 line:-1
Environment variables provide
a handy mechanism


83
00:03:22.502 --> 00:03:25.272 line:-1 position:50%
to customize behavior
and pass additional information


84
00:03:25,272 --> 00:03:26,807 line:-1
into your workflows.


85
00:03:26.807 --> 00:03:28.008 line:-1 position:50%
They're even more powerful


86
00:03:28.008 --> 00:03:30.377 line:-1 position:50%
in conjunction with
our next advanced feature:


87
00:03:30,377 --> 00:03:32,813 line:-1
custom scripts.


88
00:03:32.813 --> 00:03:35.849 line:-1 position:50%
Between Xcode Cloud's workflows
and Xcode's schemes,


89
00:03:35,849 --> 00:03:38,752 line:-1
you have a lot of flexibility in
how you can set up the actions


90
00:03:38.752 --> 00:03:41.021 line:-1 position:50%
that you want to run
in your workflows.


91
00:03:41.021 --> 00:03:42.989 line:-1 position:50%
But sometimes you'll need
to run custom logic


92
00:03:42.989 --> 00:03:45.058 line:-1 position:50%
or additional commands
during an action,


93
00:03:45,058 --> 00:03:46,960 line:-1
and custom scripts
provide a powerful


94
00:03:46.960 --> 00:03:50.297 line:-1 position:50%
and flexible way
to achieve this.


95
00:03:50.297 --> 00:03:52.599 line:-1 position:50%
A custom script is
a shell script that you write


96
00:03:52.599 --> 00:03:55.202 line:-1 position:50%
and include in
your source repository.


97
00:03:55.202 --> 00:03:57.437 line:-1 position:50%
Your custom scripts are run
in each of the actions


98
00:03:57.437 --> 00:03:59.172 line:-1 position:50%
in your workflow.


99
00:03:59.172 --> 00:04:01.475 line:-1 position:50%
There are three types
of scripts available:


100
00:04:01.475 --> 00:04:05.145 line:-1 position:50%
the post-clone script,
the pre-Xcodebuild script,


101
00:04:05.145 --> 00:04:08.815 line:-1 position:50%
and the post-Xcodebuild script.


102
00:04:08,815 --> 00:04:11,318 line:-1
Each time Xcode Cloud
runs an action


103
00:04:11.318 --> 00:04:13.420 line:-1 position:50%
it performs a series of steps


104
00:04:13,420 --> 00:04:16,256 line:-1
and each of the custom scripts,
as hinted at by its name,


105
00:04:16.256 --> 00:04:19.960 line:-1 position:50%
is run as a step at
a particular point in an action.


106
00:04:19.960 --> 00:04:23.196 line:-1 position:50%
First, Xcode Cloud sets up
a temporary environment


107
00:04:23,196 --> 00:04:26,500 line:-1
and clones source code
from your primary repository.


108
00:04:26.500 --> 00:04:30.704 line:-1 position:50%
Afterwards, Xcode Cloud
runs the post-clone script.


109
00:04:30.704 --> 00:04:33.273 line:-1 position:50%
After resolving all other
source dependencies,


110
00:04:33.273 --> 00:04:36.810 line:-1 position:50%
Xcode cloud runs
the pre-Xcodebuild script.


111
00:04:36.810 --> 00:04:38.778 line:-1 position:50%
Next, Xcode Cloud
runs the action's


112
00:04:38.778 --> 00:04:41.047 line:-1 position:50%
corresponding
Xcodebuild command.


113
00:04:41,047 --> 00:04:42,983 line:-1
When the Xcodebuild step
finishes,


114
00:04:42,983 --> 00:04:45,819 line:-1
Xcode Cloud runs
the post-Xcodebuild script


115
00:04:45,819 --> 00:04:49,456 line:-1
and saves any artifacts
it generated earlier.


116
00:04:49,456 --> 00:04:51,558 line:-1
If your workflow includes
several actions --


117
00:04:51.558 --> 00:04:53.560 line:-1 position:50%
for example,
multiple build actions --


118
00:04:53.560 --> 00:04:56.496 line:-1 position:50%
or build, test, analyze,
and archive actions --


119
00:04:56.496 --> 00:04:58.431 line:-1 position:50%
Xcode Cloud runs
your custom scripts


120
00:04:58.431 --> 00:05:02.736 line:-1 position:50%
at the appropriate times
for each action.


121
00:05:02,736 --> 00:05:05,472 line:-1
Adding a custom script
to Xcode Cloud is easy.


122
00:05:05,472 --> 00:05:08,074 line:-1
You simply add a shell script
with the appropriate name


123
00:05:08.074 --> 00:05:10.710 line:-1 position:50%
into a folder
called "ci_scripts",


124
00:05:10,710 --> 00:05:13,580 line:-1
and place this folder at the
same level as the project file


125
00:05:13,580 --> 00:05:16,883 line:-1
or workspace you're
using in your workflow.


126
00:05:16,883 --> 00:05:19,352 line:-1
Since custom scripts
are part of your source code,


127
00:05:19.352 --> 00:05:21.821 line:-1 position:50%
you can test out script changes
in pull requests


128
00:05:21,821 --> 00:05:25,926 line:-1
or even customize their behavior
on different branches.


129
00:05:25,926 --> 00:05:27,961 line:-1
When Xcode Cloud
runs your actions,


130
00:05:27.961 --> 00:05:30.030 line:-1 position:50%
it looks for the existence
of each of the scripts


131
00:05:30,030 --> 00:05:31,298 line:-1
at the appropriate time


132
00:05:31.298 --> 00:05:33.567 line:-1 position:50%
and runs them
if they're present.


133
00:05:33,567 --> 00:05:35,001 line:-1
You don't need to configure
your workflow


134
00:05:35,001 --> 00:05:36,770 line:-1
to run your custom scripts.


135
00:05:36.770 --> 00:05:39.472 line:-1 position:50%
If the scripts are there,
they'll be run.


136
00:05:39.472 --> 00:05:42.275 line:-1 position:50%
Do note that the name
of the ci_scripts folder


137
00:05:42,275 --> 00:05:43,543 line:-1
and the scripts inside


138
00:05:43.543 --> 00:05:46.046 line:-1 position:50%
must exactly match
this naming convention


139
00:05:46.046 --> 00:05:52.052 line:-1 position:50%
in order for Xcode Cloud to find
and run your scripts.


140
00:05:52.052 --> 00:05:54.120 line:-1 position:50%
Environment variables
that you've configured


141
00:05:54,120 --> 00:05:57,591 line:-1
in your workflow are available
to use in your custom scripts,


142
00:05:57.591 --> 00:06:00.393 line:-1 position:50%
including secret
environment variables.


143
00:06:00,393 --> 00:06:02,762 line:-1
In addition,
Xcode Cloud also provides


144
00:06:02.762 --> 00:06:05.632 line:-1 position:50%
a variety of other useful
environment variables.


145
00:06:05,632 --> 00:06:07,067 line:-1
You can use these variables


146
00:06:07,067 --> 00:06:08,868 line:-1
to add flow control
to your scripts,


147
00:06:08.868 --> 00:06:11.104 line:-1 position:50%
so that you can ensure
the commands you want to run


148
00:06:11.104 --> 00:06:15.542 line:-1 position:50%
are run at the correct points
during your workflow.


149
00:06:15,542 --> 00:06:18,278 line:-1
For example, if you want to
check if your action is running


150
00:06:18,278 --> 00:06:21,848 line:-1
for iOS, macOS,
tvOS, or watchOS,


151
00:06:21.848 --> 00:06:26.653 line:-1 position:50%
you can use the value of the
CI_PRODUCT_PLATFORM variable.


152
00:06:26,653 --> 00:06:28,355 line:0
In a more targeted scenario --


153
00:06:28,355 --> 00:06:30,156 position:50%
perhaps there's a command
you only want to run


154
00:06:30,156 --> 00:06:33,593 position:50%
during the archive action
of a specific workflow --


155
00:06:33,593 --> 00:06:35,895 line:0
you can check that the
CI_XCODEBUILD_ACTION


156
00:06:35,895 --> 00:06:39,165 line:0
and CI_WORKFLOW variables
match the archive action


157
00:06:39,165 --> 00:06:43,770 position:50%
and the specific workflow
before running the command.


158
00:06:43,770 --> 00:06:46,106 position:50%
Let's see custom scripts
in action.


159
00:06:46,106 --> 00:06:49,409 position:50%
My team works on a smoothie
ordering app called Fruta.


160
00:06:49,409 --> 00:06:52,145 line:0
In the "Explore Xcode Cloud
workflows" session,


161
00:06:52,145 --> 00:06:54,514 line:0
you learned how to set up
workflows to build, test,


162
00:06:54,514 --> 00:06:57,584 position:50%
and distribute apps, like Fruta.


163
00:06:57,584 --> 00:06:59,486 line:-1
We use Xcode Cloud
to build and test


164
00:06:59,486 --> 00:07:02,255 line:-1
every time we create
a pull request.


165
00:07:02.255 --> 00:07:04.824 line:-1 position:50%
We also distribute builds
from our pull requests


166
00:07:04,824 --> 00:07:07,360 line:-1
to members of our team
via TestFlight,


167
00:07:07,360 --> 00:07:09,663 line:-1
allowing them to verify
and sign off on changes


168
00:07:09.663 --> 00:07:11.831 line:-1 position:50%
before the code is merged.


169
00:07:11,831 --> 00:07:14,034 line:-1
Today, I'd like to make it
easier for team members


170
00:07:14.034 --> 00:07:16.536 line:-1 position:50%
to tell if the build installed
on their device


171
00:07:16,536 --> 00:07:18,605 line:-1
is from a pull request.


172
00:07:18.605 --> 00:07:20.807 line:-1 position:50%
We can do that by using
a different app icon


173
00:07:20,807 --> 00:07:24,010 line:-1
when we're building
from a pull request.


174
00:07:24.010 --> 00:07:25.412 line:-1 position:50%
As you might've guessed,


175
00:07:25.412 --> 00:07:28.248 line:-1 position:50%
using a custom script makes
setting this up a breeze.


176
00:07:28.248 --> 00:07:30.250 line:-1 position:50%
Let's see how.


177
00:07:32,085 --> 00:07:35,955 line:-1
Over in Xcode, I already have
the Fruta project open.


178
00:07:35,955 --> 00:07:37,557 line:-1
Before I can add
a custom script,


179
00:07:37,557 --> 00:07:40,827 line:-1
I first need to add a
ci_scripts folder to my project.


180
00:07:40,827 --> 00:07:44,197 position:50%
I can do this by selecting my
project in the project navigator


181
00:07:44,197 --> 00:07:46,666 line:0
and clicking the plus button
at the bottom


182
00:07:46,666 --> 00:07:51,638 position:50%
and then selecting New Group.


183
00:07:51.638 --> 00:07:55.342 line:-1 position:50%
I'll type in the folder
name, ci_scripts.


184
00:07:55,342 --> 00:07:59,879 line:-1
[KEYSTROKES]


185
00:07:59.879 --> 00:08:02.282 line:-1 position:50%
Next, I'll add
the beta app icon set


186
00:08:02.282 --> 00:08:05.418 line:-1 position:50%
that our designer created
to the ci_scripts folder,


187
00:08:05.418 --> 00:08:07.987 line:-1 position:50%
so that my custom script
can swap it into place


188
00:08:07,987 --> 00:08:09,789 line:-1
during the build.


189
00:08:09.789 --> 00:08:12.592 line:-1 position:50%
To do that, I'll drag it in
to my ci_scripts folder


190
00:08:12,592 --> 00:08:17,130 line:-1
from Finder.


191
00:08:17.130 --> 00:08:19.699 line:-1 position:50%
In the sheet, I'll uncheck
any selected targets


192
00:08:19,699 --> 00:08:21,000 line:-1
and click Finish.


193
00:08:24.804 --> 00:08:27.941 line:-1 position:50%
Finally, let's add
a pre-Xcodebuild script.


194
00:08:27,941 --> 00:08:30,910 line:-1
This script will run prior
to the Xcodebuild command,


195
00:08:30,910 --> 00:08:33,680 line:-1
and I'll use it to swap
Fruta's default app icon set


196
00:08:33.680 --> 00:08:36.416 line:-1 position:50%
with the beta app icon set
when appropriate.


197
00:08:36,416 --> 00:08:38,318 line:-1
I've already created
a script to use,


198
00:08:38,318 --> 00:08:42,989 line:-1
so all I need to do is add it
into the ci_scripts folder.


199
00:08:48.995 --> 00:08:51.364 line:-1 position:50%
Again, I'll uncheck
any targets in the sheet


200
00:08:51.364 --> 00:08:54.267 line:-1 position:50%
and click Finish.


201
00:08:57,270 --> 00:08:58,738 line:-1
Now that my script is in place,


202
00:08:58,738 --> 00:09:03,843 line:-1
let's take a closer look
at what it does.


203
00:09:03.843 --> 00:09:05.812 line:-1 position:50%
First, I want to make sure
that the app icon


204
00:09:05.812 --> 00:09:08.047 line:-1 position:50%
is only swapped out
when the build is coming


205
00:09:08.047 --> 00:09:09.716 line:-1 position:50%
from a pull request.


206
00:09:09,716 --> 00:09:11,418 line:-1
I can use one of the
environment variables


207
00:09:11,418 --> 00:09:14,020 line:-1
that Xcode Cloud provides
to check at run time


208
00:09:14,020 --> 00:09:16,523 line:-1
if the build is
a pull request or not.


209
00:09:16,523 --> 00:09:18,291 line:-1
There are a variety
of environment variables


210
00:09:18.291 --> 00:09:20.727 line:-1 position:50%
related to pull requests
that I could use for this,


211
00:09:20,727 --> 00:09:22,562 line:-1
but in this case
I'm going to check that


212
00:09:22.562 --> 00:09:26.599 line:-1 position:50%
the CI_PULL_REQUEST_NUMBER
environment variable is set.


213
00:09:29.602 --> 00:09:32.105 line:-1 position:50%
Also, I only want
the beta app icon to be used


214
00:09:32,105 --> 00:09:34,974 line:-1
for builds that are distributed
to TestFlight.


215
00:09:34.974 --> 00:09:37.877 line:-1 position:50%
Whenever Xcode Cloud distributes
a build to TestFlight,


216
00:09:37,877 --> 00:09:40,847 line:-1
it always builds an archive
of the project first.


217
00:09:40,847 --> 00:09:42,882 line:-1
So a good way
to check this is to verify


218
00:09:42,882 --> 00:09:46,152 line:-1
if the CI_XCODEBUILD_ACTION
environment variable's value


219
00:09:46,152 --> 00:09:48,555 line:-1
is "archive".


220
00:09:51,558 --> 00:09:53,126 line:-1
If both of these
environment variables


221
00:09:53,126 --> 00:09:54,727 line:-1
have the expected values,


222
00:09:54,727 --> 00:09:57,230 line:-1
then I remove the existing
app icon set


223
00:09:57.230 --> 00:09:59.532 line:-1 position:50%
and replace it with
the beta app icon set


224
00:09:59.532 --> 00:10:06.072 line:-1 position:50%
using the rm and mv commands.


225
00:10:06,072 --> 00:10:08,441 line:-1
Also, take note that I'm using
the CI_WORKSPACE


226
00:10:08,441 --> 00:10:11,277 line:-1
environment variable
to construct the right path


227
00:10:11,277 --> 00:10:16,382 line:-1
for both the default
and the beta app icon sets.


228
00:10:16,382 --> 00:10:18,785 line:-1
All that's left to do
is to open up a pull request


229
00:10:18,785 --> 00:10:20,987 line:-1
with these changes
and wait for Xcode Cloud


230
00:10:20.987 --> 00:10:23.857 line:-1 position:50%
to build and distribute
Fruta to TestFlight.


231
00:10:23.857 --> 00:10:25.992 line:-1 position:50%
Rather than walk through
that process now,


232
00:10:25.992 --> 00:10:28.862 line:-1 position:50%
I've prepared a build
ahead of time.


233
00:10:28,862 --> 00:10:31,464 line:-1
Here, Xcode Cloud has built
and distributed Fruta


234
00:10:31,464 --> 00:10:33,533 line:-1
from my pull request branch.


235
00:10:33.533 --> 00:10:35.368 line:-1 position:50%
In the TestFlight app
on my phone,


236
00:10:35.368 --> 00:10:38.238 line:-1 position:50%
I can verify that my build
is using the new beta app icon


237
00:10:38,238 --> 00:10:39,906 line:-1
I just added.


238
00:10:39.906 --> 00:10:42.876 line:-1 position:50%
Now I can merge my pull request
and everyone on the team


239
00:10:42.876 --> 00:10:45.178 line:-1 position:50%
will start seeing the same
beta app icon


240
00:10:45,178 --> 00:10:48,915 line:-1
in builds of their own
pull requests.


241
00:10:48.915 --> 00:10:52.118 line:-1 position:50%
Now that we've seen how to use
custom scripts in Xcode Cloud,


242
00:10:52,118 --> 00:10:54,854 line:-1
there are a few important things
to note about them.


243
00:10:54.854 --> 00:10:58.625 line:-1 position:50%
The standard output and standard
error from your custom scripts


244
00:10:58.625 --> 00:11:01.261 line:-1 position:50%
are included in the logs
for the action they ran in,


245
00:11:01.261 --> 00:11:04.964 line:-1 position:50%
and they can also be downloaded
from the Artifacts tab.


246
00:11:04.964 --> 00:11:06.699 line:-1 position:50%
If your script doesn't appear
to be running


247
00:11:06.699 --> 00:11:08.101 line:-1 position:50%
when you expect it to,


248
00:11:08,101 --> 00:11:09,802 line:-1
double-check that
you've named it correctly


249
00:11:09.802 --> 00:11:12.005 line:-1 position:50%
and placed it
in a ci_scripts folder


250
00:11:12.005 --> 00:11:14.874 line:-1 position:50%
alongside your project
or workspace.


251
00:11:14.874 --> 00:11:17.977 line:-1 position:50%
Make sure to add helpful logging
and resiliency to aid you


252
00:11:17.977 --> 00:11:21.347 line:-1 position:50%
in troubleshooting any failures
in your custom scripts.


253
00:11:21,347 --> 00:11:23,850 line:-1
For example, if your script
makes network requests


254
00:11:23.850 --> 00:11:26.686 line:-1 position:50%
to external services,
you may want to include logic


255
00:11:26.686 --> 00:11:30.823 line:-1 position:50%
to retry those requests
with verbose logging enabled.


256
00:11:30.823 --> 00:11:33.326 line:-1 position:50%
Additionally, Xcode Cloud
respects the exit codes


257
00:11:33,326 --> 00:11:34,627 line:-1
of your scripts.


258
00:11:34.627 --> 00:11:37.163 line:-1 position:50%
So if your script exits
with a nonzero value,


259
00:11:37,163 --> 00:11:39,165 line:-1
Xcode Cloud will consider
this a failure


260
00:11:39,165 --> 00:11:41,768 line:-1
and will fail
the overall action.


261
00:11:41,768 --> 00:11:43,002 line:-1
You can take advantage of this


262
00:11:43.002 --> 00:11:45.004 line:-1 position:50%
to ensure that the commands
you need to run


263
00:11:45,004 --> 00:11:47,040 line:-1
in your script are successful


264
00:11:47.040 --> 00:11:51.578 line:-1 position:50%
before Xcode Cloud continues
on with the rest of the action.


265
00:11:51.578 --> 00:11:54.380 line:-1 position:50%
Lastly, it should be noted
that in a test action,


266
00:11:54.380 --> 00:11:57.817 line:-1 position:50%
multiple environments are used
to build and run your tests.


267
00:11:57.817 --> 00:12:00.286 line:-1 position:50%
Only the environment that
is used for building your tests


268
00:12:00.286 --> 00:12:03.356 line:-1 position:50%
will have your source code
cloned into it by default.


269
00:12:03.356 --> 00:12:05.191 line:-1 position:50%
The environments
that run your tests


270
00:12:05,191 --> 00:12:07,460 line:-1
won't have source code
cloned into them.


271
00:12:07,460 --> 00:12:10,897 line:-1
They'll only have the ci_scripts
folder made available on them.


272
00:12:10,897 --> 00:12:11,998 line:-1
As a result,


273
00:12:11,998 --> 00:12:14,734 line:-1
the post-clone script
won't run in these environments


274
00:12:14,734 --> 00:12:17,370 line:-1
and your custom scripts
and any of their dependencies,


275
00:12:17.370 --> 00:12:19.973 line:-1 position:50%
such as other shell scripts
and small tools,


276
00:12:19,973 --> 00:12:24,110 line:-1
must be entirely contained
within the ci_scripts folder.


277
00:12:24,110 --> 00:12:26,245 line:-1
With custom scripts
and environment variables,


278
00:12:26.245 --> 00:12:27.647 line:-1 position:50%
you have two powerful tools


279
00:12:27.647 --> 00:12:30.650 line:-1 position:50%
to customize the behavior
of your workflows.


280
00:12:30.650 --> 00:12:32.518 line:-1 position:50%
Next, my colleague Yan
will show you


281
00:12:32.518 --> 00:12:35.254 line:-1 position:50%
how to use additional
repositories with Xcode Cloud


282
00:12:35,254 --> 00:12:37,657 line:-1
so that you can make use
of Swift packages


283
00:12:37,657 --> 00:12:41,127 line:-1
and other dependencies
in your workflows.


284
00:12:41,127 --> 00:12:42,562 line:-1
Yan Huang: Thanks, Itai.


285
00:12:42,562 --> 00:12:44,897 line:-1
Many projects are built
using tools,


286
00:12:44.897 --> 00:12:46.966 line:-1 position:50%
libraries, and frameworks.


287
00:12:46.966 --> 00:12:50.637 line:-1 position:50%
Those dependencies are often
hosted in Git repositories


288
00:12:50,637 --> 00:12:54,207 line:-1
shared across projects,
and they need to be retrieved


289
00:12:54.207 --> 00:12:56.943 line:-1 position:50%
for your project
to build successfully.


290
00:12:56,943 --> 00:13:01,814 line:-1
Xcode Cloud automatically helps
adding these extra repositories.


291
00:13:01,814 --> 00:13:05,151 line:-1
For example, we want to add
a new feature to allow users


292
00:13:05.151 --> 00:13:07.620 line:-1 position:50%
to invite their friends
and share a drink


293
00:13:07,620 --> 00:13:09,255 line:-1
to the Fruta app.


294
00:13:09,255 --> 00:13:12,525 line:-1
Another team has implemented
a similar feature.


295
00:13:12,525 --> 00:13:16,529 line:-1
So we are going to reuse their
package called "InvitationsKit",


296
00:13:16,529 --> 00:13:19,666 line:-1
which is hosted
on a private Git repository


297
00:13:19,666 --> 00:13:21,434 line:-1
shared with my team.


298
00:13:21.434 --> 00:13:25.171 line:-1 position:50%
Let's see how to add
this package.


299
00:13:25,171 --> 00:13:29,475 line:-1
Here am I in Xcode
with the Fruta project.


300
00:13:29.475 --> 00:13:31.844 line:-1 position:50%
I can add a package
from the File menu


301
00:13:31,844 --> 00:13:35,682 line:-1
and select Add Package.


302
00:13:35,682 --> 00:13:39,318 line:-1
I already have the Nature Labs
shared packages collection,


303
00:13:39,318 --> 00:13:41,187 line:-1
which contains a list
of packages


304
00:13:41.187 --> 00:13:43.389 line:-1 position:50%
within our organization.


305
00:13:43.389 --> 00:13:45.558 line:-1 position:50%
I'm going to select
InvitationsKit


306
00:13:45,558 --> 00:13:49,862 line:-1
and click on Add Package.


307
00:13:49,862 --> 00:13:52,165 line:-1
Now that the dependency
is added,


308
00:13:52,165 --> 00:13:54,400 line:-1
I'm going to commit
this new dependency


309
00:13:54,400 --> 00:13:56,069 line:-1
from the Source Control menu


310
00:13:56.069 --> 00:13:59.839 line:-1 position:50%
and push my changes
to my branch.


311
00:14:11.751 --> 00:14:14.153 line:-1 position:50%
We setup a workflow
in Xcode Cloud


312
00:14:14,153 --> 00:14:17,123 line:-1
that will start a new build
when it receives a new commit


313
00:14:17,123 --> 00:14:18,725 line:-1
from any branch.


314
00:14:18.725 --> 00:14:21.861 line:-1 position:50%
So this new commit
should initiate a new build.


315
00:14:21.861 --> 00:14:23.262 line:-1 position:50%
Since this is the first time


316
00:14:23.262 --> 00:14:25.364 line:-1 position:50%
that we're adding
this dependency,


317
00:14:25.364 --> 00:14:27.200 line:-1 position:50%
I expect that the build
is going to fail


318
00:14:27.200 --> 00:14:29.435 line:-1 position:50%
because Xcode Cloud
does not have access


319
00:14:29,435 --> 00:14:32,472 line:-1
to the InvitationsKit
repository.


320
00:14:32,472 --> 00:14:37,143 line:-1
But Xcode Cloud provides an easy
UI to address this issue.


321
00:14:37.143 --> 00:14:39.846 line:-1 position:50%
Let's head to Xcode Cloud
in App Store Connect


322
00:14:39.846 --> 00:14:43.616 line:-1 position:50%
and take a look
at this new build.


323
00:14:43.616 --> 00:14:46.119 line:-1 position:50%
As expected,
the build has failed.


324
00:14:46,119 --> 00:14:48,154 line:-1
Xcode Cloud shows
a warning banner


325
00:14:48.154 --> 00:14:52.225 line:-1 position:50%
indicating that it has an issue
with accessing the repository


326
00:14:52.225 --> 00:14:56.229 line:-1 position:50%
and provides me with the option
to grant access to it.


327
00:14:56.229 --> 00:14:59.966 line:-1 position:50%
I go ahead and click on the
Manage Repositories button.


328
00:15:03.970 --> 00:15:05.772 line:-1 position:50%
It takes me
to the settings page,


329
00:15:05.772 --> 00:15:09.909 line:-1 position:50%
where I can hover over the
invitationsKit repository link


330
00:15:09,909 --> 00:15:12,712 line:-1
and then click on Grant.


331
00:15:16,716 --> 00:15:19,218 line:0
Depending on
your source control service,


332
00:15:19,218 --> 00:15:21,554 line:0
you might be directed
to approve Xcode Cloud


333
00:15:21,554 --> 00:15:23,556 position:50%
to access the repository.


334
00:15:23,556 --> 00:15:28,294 line:0
I went ahead and provided access
to InvitationsKit in Github.


335
00:15:38,905 --> 00:15:41,040 line:-1
Now, when I look back
in Xcode Cloud,


336
00:15:41.040 --> 00:15:43.109 line:-1 position:50%
it shows Access Granted.


337
00:15:43,109 --> 00:15:46,179 line:-1
I can now rerun the build.


338
00:15:50.183 --> 00:15:54.387 line:-1 position:50%
We expect this build
to pass this time.


339
00:15:54.387 --> 00:15:57.757 line:-1 position:50%
You can go back to the
Additional Repositories section


340
00:15:57.757 --> 00:16:00.493 line:-1 position:50%
under Settings to find out
all the repositories


341
00:16:00.493 --> 00:16:02.161 line:-1 position:50%
that have been connected.


342
00:16:02,161 --> 00:16:04,163 line:-1
You can also reject
access from there


343
00:16:04.163 --> 00:16:07.800 line:-1 position:50%
if they are no longer
being used.


344
00:16:07.800 --> 00:16:11.003 line:-1 position:50%
Xcode Cloud will detect
newly referenced repositories


345
00:16:11,003 --> 00:16:12,805 line:-1
during a build.


346
00:16:12,805 --> 00:16:14,240 line:-1
When we add a dependency


347
00:16:14.240 --> 00:16:17.176 line:-1 position:50%
that Xcode Cloud
does not have access to,


348
00:16:17.176 --> 00:16:22.081 line:-1 position:50%
the UI provides a quick and easy
way to fix this issue.


349
00:16:22,081 --> 00:16:25,184 line:-1
This is valid
for any Git operations


350
00:16:25,184 --> 00:16:29,222 line:-1
including cloning a repository
inside a custom script


351
00:16:29,222 --> 00:16:32,358 line:-1
or referencing a Git submodule.


352
00:16:32,358 --> 00:16:34,393 line:-1
This also applies
to all the other


353
00:16:34.393 --> 00:16:37.563 line:-1 position:50%
dependency management tools.


354
00:16:37,563 --> 00:16:38,764 position:50%
In this demo,


355
00:16:38,764 --> 00:16:42,268 position:50%
we used the new Swift Packages
Collection feature


356
00:16:42,268 --> 00:16:44,770 position:50%
to include
an additional package.


357
00:16:44,770 --> 00:16:46,906 line:0
If you want to learn
more about it, check out


358
00:16:46,906 --> 00:16:52,945 line:0
"Discover and curate Swift
Packages using Collections."


359
00:16:52,945 --> 00:16:56,682 line:-1
So far we have demonstrated to
you how to customize your build


360
00:16:56.682 --> 00:16:58.251 line:-1 position:50%
within Xcode Cloud.


361
00:16:58.251 --> 00:17:01.621 line:-1 position:50%
But sometimes you and your team
may also want to collaborate


362
00:17:01,621 --> 00:17:03,656 line:-1
through external services.


363
00:17:03,656 --> 00:17:06,993 line:-1
For example, you may want
to notify the beta testers


364
00:17:06.993 --> 00:17:08.995 line:-1 position:50%
when a new build is ready.


365
00:17:08.995 --> 00:17:12.098 line:-1 position:50%
This is where webhooks
can come to help.


366
00:17:12.098 --> 00:17:14.901 line:-1 position:50%
Webhooks provide
a way for Xcode Cloud


367
00:17:14.901 --> 00:17:17.303 line:-1 position:50%
to communicate
with your services.


368
00:17:17,303 --> 00:17:20,539 line:-1
With its rich payload that
is sent at different stages


369
00:17:20,539 --> 00:17:22,341 line:-1
of a build lifecycle,


370
00:17:22,341 --> 00:17:25,211 line:-1
you will be able to further
automate your workflow


371
00:17:25,211 --> 00:17:28,247 line:-1
and improve your teams'
collaborations.


372
00:17:28,247 --> 00:17:31,450 line:-1
Let's dive in
to find out more about it.


373
00:17:31.450 --> 00:17:33.853 line:-1 position:50%
You can set up webhooks
in Xcode Cloud


374
00:17:33.853 --> 00:17:36.055 line:-1 position:50%
to receive
your real-time updates


375
00:17:36.055 --> 00:17:39.458 line:-1 position:50%
at three different stages
of your build.


376
00:17:39.458 --> 00:17:42.061 line:-1 position:50%
First, when the build
is created,


377
00:17:42,061 --> 00:17:44,096 line:-1
either because
you pushed some code


378
00:17:44.096 --> 00:17:46.565 line:-1 position:50%
or manually started a build;


379
00:17:46,565 --> 00:17:49,802 line:-1
then, when the build
is starting;


380
00:17:49,802 --> 00:17:52,605 line:-1
finally, when the build
has completed,


381
00:17:52,605 --> 00:17:56,142 line:-1
no matter if the build failed
or succeeded.


382
00:17:56,142 --> 00:18:01,614 line:-1
Let's see how to add
a new webhook to our project


383
00:18:01,614 --> 00:18:05,484 line:-1
Adding webhooks is easy
in Xcode Cloud.


384
00:18:05.484 --> 00:18:08.888 line:-1 position:50%
Click on Settings tab
on the left column.


385
00:18:08,888 --> 00:18:14,260 line:-1
Click on Webhooks
and then the plus button.


386
00:18:14.260 --> 00:18:17.563 line:-1 position:50%
Then it will ask you to enter
the names of your webhook


387
00:18:17,563 --> 00:18:20,166 line:-1
and the URL
to an app or services


388
00:18:20.166 --> 00:18:25.271 line:-1 position:50%
that's capable of receiving
and handling HTTP requests.


389
00:18:25.271 --> 00:18:28.674 line:-1 position:50%
Then, click on Save.


390
00:18:28.674 --> 00:18:33.245 line:-1 position:50%
Xcode Cloud allows you to create
up to five webhooks per product.


391
00:18:33.245 --> 00:18:34.847 line:-1 position:50%
Make sure to provide
a unique name


392
00:18:34.847 --> 00:18:36.248 line:-1 position:50%
for each of your webhooks


393
00:18:36.248 --> 00:18:40.586 line:-1 position:50%
to ensure you can
easily identify them.


394
00:18:40.586 --> 00:18:44.090 line:-1 position:50%
The payload that is sent
to your endpoint is a JSON blob


395
00:18:44.090 --> 00:18:47.393 line:-1 position:50%
with information
about your build and product,


396
00:18:47.393 --> 00:18:53.199 line:-1 position:50%
such as your App Store Connect
application, your workflow,


397
00:18:53.199 --> 00:19:01.040 line:-1 position:50%
your product, your build,
and more.


398
00:19:01.040 --> 00:19:04.310 line:-1 position:50%
You need to set up an app
or a service to receive


399
00:19:04.310 --> 00:19:06.712 line:-1 position:50%
and handle the payload
that is sent over


400
00:19:06,712 --> 00:19:08,881 line:-1
via HttpRequest.


401
00:19:08,881 --> 00:19:10,683 line:-1
Let's take a look
at a sample code


402
00:19:10,683 --> 00:19:16,989 line:-1
on how to achieve that
using Swift on AWS Lambda.


403
00:19:16,989 --> 00:19:19,625 line:-1
First, we receive the request.


404
00:19:19.625 --> 00:19:23.396 line:-1 position:50%
Then decode its payload
to a JSON object.


405
00:19:23,396 --> 00:19:26,065 line:-1
Then we check the name
of the workflow


406
00:19:26.065 --> 00:19:27.633 line:-1 position:50%
and the build state.


407
00:19:27,633 --> 00:19:30,336 line:-1
If the workflow
is a release workflow


408
00:19:30,336 --> 00:19:32,638 line:-1
and the build state
has succeeded,


409
00:19:32,638 --> 00:19:35,741 line:-1
we'll post a message to Twitter
to let testers


410
00:19:35,741 --> 00:19:40,046 line:-1
or beta users know
it's available for testing.


411
00:19:40.046 --> 00:19:44.583 line:-1 position:50%
Finally, we will return a
200 status code to acknowledge


412
00:19:44.583 --> 00:19:48.988 line:-1 position:50%
that the webhook request
has been successfully handled.


413
00:19:48,988 --> 00:19:50,356 position:50%
If you wish to learn more


414
00:19:50,356 --> 00:19:53,159 position:50%
about running
Swift serverless functions,


415
00:19:53,159 --> 00:19:59,098 line:0
check out this session
in WWDC 2020.


416
00:19:59.098 --> 00:20:03.369 line:-1 position:50%
If your endpoint doesn't return
a successful status code,


417
00:20:03.369 --> 00:20:06.772 line:-1 position:50%
Xcode Cloud will try to send
the request again.


418
00:20:06,772 --> 00:20:09,809 line:-1
Xcode Cloud also makes it easy
to inspect the content


419
00:20:09,809 --> 00:20:11,744 line:-1
of the webhooks
that were delivered


420
00:20:11,744 --> 00:20:14,747 line:-1
to your endpoint.


421
00:20:14.747 --> 00:20:18.284 line:-1 position:50%
You can go to Xcode Cloud
in App Store Connect;


422
00:20:18.284 --> 00:20:21.353 line:-1 position:50%
click on your settings
and the webhooks;


423
00:20:21.353 --> 00:20:25.224 line:-1 position:50%
select the webhook
you wish to inspect.


424
00:20:25.224 --> 00:20:27.393 line:-1 position:50%
Then it shows you
a list of deliveries


425
00:20:27,393 --> 00:20:29,195 line:-1
at different time stamps,


426
00:20:29,195 --> 00:20:32,398 line:-1
and select the one
that interests you.


427
00:20:32.398 --> 00:20:35.568 line:-1 position:50%
It shows you the request
that was sent to your service


428
00:20:35.568 --> 00:20:39.405 line:-1 position:50%
and the response
that was received.


429
00:20:39.405 --> 00:20:43.309 line:-1 position:50%
There are so many things you can
do with Xcode Cloud webhooks.


430
00:20:43.309 --> 00:20:46.745 line:-1 position:50%
Here are a few
additional examples.


431
00:20:46.745 --> 00:20:50.015 line:-1 position:50%
You can automatically create
or resolve issues


432
00:20:50,015 --> 00:20:52,885 line:-1
from your bug-checking system;


433
00:20:52,885 --> 00:20:57,823 line:-1
send notifications to a paging
system when a build fails;


434
00:20:57.823 --> 00:20:59.425 line:-1 position:50%
initiate downstream builds


435
00:20:59.425 --> 00:21:03.395 line:-1 position:50%
as part of a complex
release workflow.


436
00:21:03,395 --> 00:21:05,464 line:-1
When it comes
to extending your workflow


437
00:21:05.464 --> 00:21:08.300 line:-1 position:50%
using the exhaustive content
of the webhook,


438
00:21:08,300 --> 00:21:11,203 line:-1
the sky is the limit.


439
00:21:11.203 --> 00:21:14.507 line:-1 position:50%
Let's recap on what we have
learned in this session.


440
00:21:14.507 --> 00:21:17.543 line:-1 position:50%
First, we learned about how to
pass in environment variables


441
00:21:17.543 --> 00:21:18.811 line:-1 position:50%
for your build.


442
00:21:18.811 --> 00:21:21.647 line:-1 position:50%
Then we demonstrated
how to set up scripts


443
00:21:21.647 --> 00:21:24.650 line:-1 position:50%
to customize your build process
and how to work


444
00:21:24,650 --> 00:21:28,254 line:-1
with additional repositories
in your project.


445
00:21:28.254 --> 00:21:31.123 line:-1 position:50%
Finally, we learned
how to set up webhooks


446
00:21:31.123 --> 00:21:33.392 line:-1 position:50%
to receive callbacks
from Xcode Cloud


447
00:21:33,392 --> 00:21:36,362 line:-1
at different stages
of build life cycle.


448
00:21:36.362 --> 00:21:37.530 line:-1 position:50%
We hope these features


449
00:21:37,530 --> 00:21:40,299 line:-1
can enhance your team's
day-to-day workflow.


450
00:21:40.299 --> 00:21:41.600 line:-1 position:50%
Thank you for watching.


451
00:21:41,600 --> 00:21:43,869 line:0 align:right size:2%
♪

