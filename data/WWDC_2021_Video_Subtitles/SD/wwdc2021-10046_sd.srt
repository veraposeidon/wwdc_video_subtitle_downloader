2
00:00:00.334 --> 00:00:03.337 line:-1
[upbeat music]


3
00:00:03.370 --> 00:00:10.277 line:-1
♪ ♪


4
00:00:10.310 --> 00:00:11.879 line:-1
[Justin] Hi. My name is Justin.


5
00:00:11.912 --> 00:00:13.514 line:-1
I'm a Photos engineer.


6
00:00:13.547 --> 00:00:15.749 line:-2
Together with my colleague,
Adam, we will talk about


7
00:00:15.782 --> 00:00:18.986 line:-2
ways to improve access
to Photos in your app.


8
00:00:19.019 --> 00:00:22.122 line:-2
First, I will talk about
the improvements we made


9
00:00:22.155 --> 00:00:24.625 line:-1
to the system Photos picker.


10
00:00:24.658 --> 00:00:28.562 line:-2
Then, Adam will show
the new cloud identifier APIs


11
00:00:28.595 --> 00:00:30.998 line:-2
and how you can use them
to identify the same asset


12
00:00:31.031 --> 00:00:33.400 line:-1
across different devices.


13
00:00:33.433 --> 00:00:35.936 line:-2
Lastly, he will
also discuss changes


14
00:00:35.969 --> 00:00:37.971 line:-2
to the limited
library access mode.


15
00:00:40.040 --> 00:00:42.276 line:-2
Let's start
with the Photos picker.


16
00:00:42.309 --> 00:00:46.146 line:-2
In iOS 14,
we introduced PHPicker,


17
00:00:46.180 --> 00:00:50.050 line:-2
the modern replacement
for UIImagePickerController.


18
00:00:50.083 --> 00:00:52.819 line:-1
The PHPicker API ensures privacy


19
00:00:52.853 --> 00:00:55.722 line:-2
while providing your app
the features you need,


20
00:00:55.756 --> 00:00:58.325 line:-2
like multiple image selection
and search.


21
00:01:00,527 --> 00:01:02,329
If you haven't heard
of PHPicker,


22
00:01:02,362 --> 00:01:06,300
you can watch our WWDC 2020
"Meet the new Photos picker"


23
00:01:06,333 --> 00:01:08,836
session to learn more about it.


24
00:01:09.970 --> 00:01:12.806 line:-2
In iOS 15,
the system Photos picker


25
00:01:12.840 --> 00:01:15.909 line:-1
has four major improvements.


26
00:01:15.943 --> 00:01:18.912 line:-1
First, privacy.


27
00:01:18.946 --> 00:01:21.748 line:-2
We believe it's important to let
people know what information


28
00:01:21.782 --> 00:01:26.220 line:-2
your app can access,
which increases trust.


29
00:01:26.253 --> 00:01:29.423 line:-2
In iOS 14,
some people may assume


30
00:01:29.456 --> 00:01:32.626 line:-2
that your app has access
to their entire photo library,


31
00:01:32.659 --> 00:01:36.196 line:-2
even if it only presents
the out-of-process Photos picker


32
00:01:36.230 --> 00:01:40.033 line:-2
and only has access
to photos they selected.


33
00:01:40.067 --> 00:01:42.236 line:-2
To help people
understand the difference,


34
00:01:42.269 --> 00:01:46.673 line:-2
we added a new section
to Settings > Privacy > Photos.


35
00:01:46.707 --> 00:01:49.943 line:-2
The new section contains apps
that only use the system


36
00:01:49.977 --> 00:01:52.646 line:-2
Photos picker,
explaining that those apps


37
00:01:52.679 --> 00:01:55.282 line:-2
only have access
to photos people selected.


38
00:01:55.315 --> 00:01:58.552 line:-2
We really encourage you
to replace your custom picker


39
00:01:58.585 --> 00:02:02.589 line:-2
with the system one
if you haven't done so already.


40
00:02:02.623 --> 00:02:06.827 line:-2
Next, let's talk about
ordered selection.


41
00:02:06.860 --> 00:02:09.096 line:-2
Sometimes,
people may want to control


42
00:02:09.129 --> 00:02:12.666 line:-2
the order of photos
when selecting them.


43
00:02:12.699 --> 00:02:15.969 line:-2
In iOS 15, your app can
configure the picker


44
00:02:16.003 --> 00:02:19.273 line:-2
to show the selection order,
as shown here.


45
00:02:20.674 --> 00:02:25.045 line:-2
By default, we will still show
the selection checkmark.


46
00:02:25.078 --> 00:02:28.182 line:-2
To opt in to the new
ordered selection behavior,


47
00:02:28.215 --> 00:02:30.918 line:-2
you only need to enable
multiple selection


48
00:02:30.951 --> 00:02:32.986 line:-2
and set "selection"
to "ordered."


49
00:02:34.888 --> 00:02:36.990 line:-1
The PHPicker API works great


50
00:02:37.024 --> 00:02:40.827 line:-2
when all someone needs to do
is to select new photos.


51
00:02:40.861 --> 00:02:43.163 line:-2
But what if people
also want to deselect photos


52
00:02:43.197 --> 00:02:45.132 line:-1
using the picker?


53
00:02:45.165 --> 00:02:50.337 line:-2
In iOS 15, a new preselection
API is available for you to use.


54
00:02:51.438 --> 00:02:54.341 line:-2
But before we talk about
the new API, let's revisit


55
00:02:54.374 --> 00:02:58.278 line:-2
how the PHPicker API
is used currently.


56
00:02:58.312 --> 00:03:02.649 line:-2
You just need to create
a PHPickerConfiguration object


57
00:03:02.683 --> 00:03:05.018 line:-2
and use it
to initialize the picker.


58
00:03:07.221 --> 00:03:09.623 line:-2
When the picker session
is completed,


59
00:03:09.656 --> 00:03:13.894 line:-2
selected photos will
be returned to your app.


60
00:03:13.927 --> 00:03:16.230 line:-2
Suppose the configuration
is initialized


61
00:03:16.263 --> 00:03:19.967 line:-2
with a PHPhotoLibrary object,
picker results will contain


62
00:03:20.000 --> 00:03:23.871 line:-2
both item providers
and asset identifiers.


63
00:03:23.904 --> 00:03:25.873 line:-2
Your app can use
the item provider


64
00:03:25.906 --> 00:03:28.509 line:-2
to load and display
selected photos.


65
00:03:30.010 --> 00:03:33.113 line:-2
In iOS 15,
you can also present the picker


66
00:03:33.146 --> 00:03:35.883 line:-2
with some photos
initially selected.


67
00:03:35.916 --> 00:03:38.218 line:-2
It allows people
to select more photos


68
00:03:38.252 --> 00:03:42.422 line:-2
or deselect those photos
preselected by your app.


69
00:03:43,724 --> 00:03:48,695
To do it, you need to create
a new configuration object.


70
00:03:48,729 --> 00:03:52,699
You can give the configuration
an array of asset identifiers


71
00:03:52,733 --> 00:03:57,404
you retrieved previously,
ID: 1 and ID: 2 in this case.


72
00:03:59,473 --> 00:04:01,441
When a new
PHPickerViewController


73
00:04:01,475 --> 00:04:04,178
is presented, photos with ID: 1


74
00:04:04,211 --> 00:04:07,347
and ID: 2 will be
selected by default.


75
00:04:07,381 --> 00:04:11,251
People can deselect them
or select additional photos.


76
00:04:13.253 --> 00:04:16.390 line:-2
You still want to keep
the old picker results for now


77
00:04:16.423 --> 00:04:19.092 line:-2
because you will
need to use them later.


78
00:04:20.627 --> 00:04:23.564 line:-2
Let's say the photo
with ID: 2 is deselected,


79
00:04:23.597 --> 00:04:26.733 line:-2
but a new photo with ID: 3
is added to the selection.


80
00:04:28.635 --> 00:04:30.904 line:-2
When the picker
session is completed,


81
00:04:30.938 --> 00:04:33.807 line:-2
selected photos
will be returned.


82
00:04:33.841 --> 00:04:37.477 line:-2
But the first result only has
the asset identifier


83
00:04:37.511 --> 00:04:39.680 line:-1
without the actual asset data.


84
00:04:39.713 --> 00:04:40.914 line:-1
Why?


85
00:04:40.948 --> 00:04:43.350 line:-2
Because it was selected
by your app.


86
00:04:43.383 --> 00:04:45.385 line:-2
All results
not selected by people


87
00:04:45.419 --> 00:04:48.789 line:-2
using your app have
empty item providers.


88
00:04:50.123 --> 00:04:53.293 line:-2
Old picker results
have actual asset data,


89
00:04:53.327 --> 00:04:55.829 line:-2
so you can use the old
ID: 1 result to replace


90
00:04:55.863 --> 00:04:59.633 line:-2
the one
with the empty item provider.


91
00:04:59.666 --> 00:05:02.102 line:-2
Because ID: 2
is no longer selected,


92
00:05:02.135 --> 00:05:04.505 line:-2
you can discard
the old ID: 2 result.


93
00:05:07.241 --> 00:05:08.342 line:-1
OK.


94
00:05:08.375 --> 00:05:13.013 line:-2
Now we can continue handling
selected photos like before.


95
00:05:13.046 --> 00:05:16.583 line:-2
To summarize: if a picker
session is completed,


96
00:05:16.617 --> 00:05:20.320 line:-2
all selected assets,
including preselected assets


97
00:05:20.354 --> 00:05:23.857 line:-2
that haven't been deselected,
will be returned.


98
00:05:23.891 --> 00:05:26.927 line:-2
And keep in mind,
returned item providers


99
00:05:26.960 --> 00:05:29.663 line:-2
for preselected assets
will be empty.


100
00:05:31.899 --> 00:05:34.568 line:-2
In the case
a picker session is canceled,


101
00:05:34.601 --> 00:05:37.838 line:-2
only preselected assets
will be returned.


102
00:05:37.871 --> 00:05:40.274 line:-2
All item providers
will be empty.


103
00:05:41.942 --> 00:05:46.113 line:-2
All right,
let's take a look at the code.


104
00:05:46.146 --> 00:05:49.950 line:-2
To set preselected assets,
you only need to initialize


105
00:05:49.983 --> 00:05:52.819 line:-2
the configuration
with a photoLibrary object


106
00:05:52.853 --> 00:05:56.190 line:-1
and enable multiple selection.


107
00:05:56.223 --> 00:05:58.825 line:-2
You can set preselected assets
using the new


108
00:05:58.859 --> 00:06:01.628 line:-1
preselectedAssetIdentifiers API.


109
00:06:04.865 --> 00:06:08.402 line:-2
In the delegate callback,
you need to retrieve


110
00:06:08.435 --> 00:06:12.806 line:-2
the existingSelection from
the previous picker session.


111
00:06:12.840 --> 00:06:14.942 line:-2
Then, you can iterate
through all


112
00:06:14.975 --> 00:06:17.945 line:-2
of the newly returned
picker results.


113
00:06:17.978 --> 00:06:20.714 line:-2
You should replace new results
with the old results


114
00:06:20.747 --> 00:06:24.184 line:-2
if they are part
of the existing selection.


115
00:06:24.218 --> 00:06:27.788 line:-2
Finally, you can save
the updated selection.


116
00:06:29.323 --> 00:06:33.627 line:-2
Last but not least, let's talk
about progress reporting.


117
00:06:33.660 --> 00:06:36.096 line:-2
It can take some time
to download a large asset


118
00:06:36.129 --> 00:06:39.533 line:-2
if it's not available
locally on the device,


119
00:06:39.566 --> 00:06:41.668 line:-2
which can happen
if iCloud Photos


120
00:06:41.702 --> 00:06:45.038 line:-2
and Optimize Storage
are turned on.


121
00:06:45.072 --> 00:06:48.775 line:-2
Previously, you can only
show a spinner while loading,


122
00:06:48.809 --> 00:06:53.280 line:-2
which is not always
the ideal user experience.


123
00:06:53.313 --> 00:06:57.050 line:-2
I'm happy to announce
that in iOS 15, your app can


124
00:06:57.084 --> 00:06:59.987 line:-2
retrieve the actual loading
progress from the picker.


125
00:07:02.256 --> 00:07:03.824 line:-2
The loading progress
is available


126
00:07:03.857 --> 00:07:07.160 line:-2
via the existing
NSItemProvider API.


127
00:07:07.194 --> 00:07:08.795 line:-2
You can use
the returned progress


128
00:07:08.829 --> 00:07:11.965 line:-2
to show
a loading UI accordingly.


129
00:07:11.999 --> 00:07:14.134 line:-2
That's all
for the Photos picker update.


130
00:07:14.168 --> 00:07:16.770 line:-2
Now I will hand over
to my colleague, Adam,


131
00:07:16.803 --> 00:07:19.940 line:-2
to talk more about the new
cloudIdentifier APIs.


132
00:07:21.408 --> 00:07:22.609 line:-1
[Adam] Thanks, Justin.


133
00:07:22.643 --> 00:07:24.845 line:-2
With the new features
and APIs we've added,


134
00:07:24.878 --> 00:07:27.247 line:-2
Photos picker is the best way
for most developers


135
00:07:27.281 --> 00:07:29.049 line:-1
to use Photos in their apps.


136
00:07:29.082 --> 00:07:31.752 line:-2
But we know there are special
categories of applications


137
00:07:31.785 --> 00:07:35.189 line:-2
that require a deeper level
of access and integration


138
00:07:35.222 --> 00:07:37.291 line:-1
for managing or editing photos,


139
00:07:37.324 --> 00:07:40.060 line:-2
custom cameras,
or apps that give people a way


140
00:07:40.093 --> 00:07:42.729 line:-2
to browse their photo library
in a unique way.


141
00:07:44,031 --> 00:07:46,033
For those apps,
PhotoKit provides a rich set


142
00:07:46,066 --> 00:07:48,602
of APIs for accessing
and updating photos,


143
00:07:48,635 --> 00:07:51,505
videos, and albums
stored in the photo library.


144
00:07:53,473 --> 00:07:56,043
Assets and albums
are given unique identifiers


145
00:07:56,076 --> 00:07:58,212
by PhotoKit that can be
saved in your app


146
00:07:58,245 --> 00:07:59,680
and then later used to retrieve


147
00:07:59,713 --> 00:08:01,615
the same records
from the photo library.


148
00:08:03.083 --> 00:08:05.919 line:-2
Every photo library
and its identifiers are specific


149
00:08:05.953 --> 00:08:07.988 line:-2
to the device
they are running on,


150
00:08:08.021 --> 00:08:09.857 line:-2
even when
those devices are syncing


151
00:08:09.890 --> 00:08:12.693 line:-1
libraries with iCloud Photos.


152
00:08:12.726 --> 00:08:15.495 line:-2
So let's turn our attention
back to your app.


153
00:08:15.529 --> 00:08:17.865 line:-2
People love the way
they can use apps on an iPhone


154
00:08:17.898 --> 00:08:20.968 line:-2
when they're out and about
and then, back at their desk,


155
00:08:21.001 --> 00:08:24.905 line:-2
use a laptop or iPad to take
advantage of the larger format.


156
00:08:24.938 --> 00:08:26.773 line:-2
Your customers want
a seamless experience


157
00:08:26.807 --> 00:08:29.877 line:-2
when switching
from one device to another.


158
00:08:29.910 --> 00:08:31.678 line:-2
For example,
let's say I've built


159
00:08:31.712 --> 00:08:33.247 line:-2
a photo journaling app
for people


160
00:08:33.280 --> 00:08:36.717 line:-2
to document experiences
with pictures and comments.


161
00:08:36.750 --> 00:08:41.321 line:-2
It's perfect as an iPhone app
for capturing content on the go.


162
00:08:41.355 --> 00:08:43.323 line:-2
They should be able to pick up
working on that journal


163
00:08:43.357 --> 00:08:45.325 line:-2
right where they left off
when they open my app


164
00:08:45.359 --> 00:08:47.528 line:-2
on an iPad or Mac,
with all the photos


165
00:08:47.561 --> 00:08:50.597 line:-2
and content they added
on their phone.


166
00:08:50.631 --> 00:08:52.299 line:-1
So how does that work?


167
00:08:52.332 --> 00:08:55.002 line:-2
How do you find the same
assets when each device has


168
00:08:55.035 --> 00:08:58.772 line:-2
its own photo library
and distinct identifiers?


169
00:08:58.805 --> 00:09:02.142 line:-2
It works by using the new
cloud identifier APIs.


170
00:09:02.176 --> 00:09:04.311 line:-2
They give you a way
to find the same assets


171
00:09:04.344 --> 00:09:07.447 line:-1
and albums between devices.


172
00:09:07.481 --> 00:09:10.751 line:-2
You use cloud identifiers
to look up the local identifiers


173
00:09:10.784 --> 00:09:13.554 line:-2
that are unique
to each photo library.


174
00:09:13.587 --> 00:09:16.657 line:-2
And these new APIs
are available on every platform


175
00:09:16.690 --> 00:09:22.329 line:-2
that supports PhotoKit: iOS,
iPadOS, macOS, and tvOS.


176
00:09:24.798 --> 00:09:27.467 line:-2
The goal is to give you
a simple way to map assets


177
00:09:27.501 --> 00:09:30.838 line:-2
between devices without
having to worry about the cloud.


178
00:09:30.871 --> 00:09:33.173 line:-2
It's designed to work best
when running on an account


179
00:09:33.207 --> 00:09:36.476 line:-2
signed in to iCloud Photos,
but cloud identifiers will work


180
00:09:36.510 --> 00:09:38.912 line:-2
even if the account is
signed out or running


181
00:09:38.946 --> 00:09:42.449 line:-2
on a system that has
never been signed in to iCloud.


182
00:09:42.482 --> 00:09:45.819 line:-2
It's all based on identifier
mapping, so let's be clear.


183
00:09:45.853 --> 00:09:47.721 line:-2
There are two kinds
of identifiers.


184
00:09:47.754 --> 00:09:50.324 line:-2
Local identifiers are what
I talked about earlier,


185
00:09:50.357 --> 00:09:52.326 line:-2
the identifiers
you use on the device


186
00:09:52.359 --> 00:09:54.461 line:-2
that are specific
to that library.


187
00:09:54.494 --> 00:09:56.463 line:-1
If you've used PhotoKit before,


188
00:09:56.496 --> 00:10:00.000 line:-2
you've seen them called
localIdentifiers in the API.


189
00:10:00.033 --> 00:10:02.903 line:-2
Cloud identifiers are
the new API, which are used


190
00:10:02.936 --> 00:10:06.607 line:-2
to look up local identifiers
on one device or another.


191
00:10:06.640 --> 00:10:08.942 line:-2
They are represented
by a newly available class


192
00:10:08.976 --> 00:10:12.546 line:-1
called PHCloudIdentifier.


193
00:10:12.579 --> 00:10:14.481 line:-1
Let's dig in to how to use them.


194
00:10:14.515 --> 00:10:16.984 line:-2
We'll start on the source
device, where your app has


195
00:10:17.017 --> 00:10:20.654 line:-2
gathered a list of local
identifiers for some assets.


196
00:10:20.687 --> 00:10:22.589 line:-2
From that array
of local identifiers,


197
00:10:22.623 --> 00:10:26.093 line:-2
we want to get the corresponding
cloud identifiers.


198
00:10:26.126 --> 00:10:29.830 line:-2
Here's an example of how to use
the API to get them.


199
00:10:29.863 --> 00:10:32.432 line:-2
This call to the photo library
returns a dictionary


200
00:10:32.466 --> 00:10:34.535 line:-2
with cloudIdentifierMapping
objects


201
00:10:34,568 --> 00:10:36,970
for each localIdentifier.


202
00:10:37,004 --> 00:10:39,239
We'll iterate through
that dictionary and get


203
00:10:39,273 --> 00:10:42,676
a cloudIdentifier
from the cloudMapping object.


204
00:10:42,709 --> 00:10:44,745
I'll talk about error handling
in a bit.


205
00:10:44,778 --> 00:10:46,813
For now, we should have
our cloud identifiers


206
00:10:46,847 --> 00:10:49,216
and we're ready to use them.


207
00:10:49,249 --> 00:10:51,451
And the biggest benefit
of cloud identifiers


208
00:10:51,485 --> 00:10:54,521
is using them everywhere,
so we need to share them


209
00:10:54,555 --> 00:10:56,456
to other
cloud-connected devices.


210
00:10:58.225 --> 00:10:59.726 line:-2
You want to make them
available to your app


211
00:10:59.760 --> 00:11:01.128 line:-1
when it runs on any device


212
00:11:01.161 --> 00:11:03.096 line:-2
connected to this
iCloud account.


213
00:11:03.130 --> 00:11:05.832 line:-2
You can archive
cloud identifiers to a string


214
00:11:05.866 --> 00:11:07.801 line:-2
and share that data
using CloudKit


215
00:11:07.835 --> 00:11:10.103 line:-1
or another network data service.


216
00:11:10.137 --> 00:11:12.573 line:-2
How you package up this data
is really up to you


217
00:11:12.606 --> 00:11:14.241 line:-1
and your app's needs.


218
00:11:14.274 --> 00:11:16.043 line:-2
Think about how you'll use
the information


219
00:11:16.076 --> 00:11:17.544 line:-1
on a second device.


220
00:11:17.578 --> 00:11:19.913 line:-2
How do you reconstruct
the application state to include


221
00:11:19.947 --> 00:11:22.783 line:-2
the content referenced
by those cloud identifiers?


222
00:11:24.451 --> 00:11:27.821 line:-2
Now, on a second device, once
you've downloaded and unarchived


223
00:11:27.855 --> 00:11:30.691 line:-2
the cloud identifiers,
we want to use them to look up


224
00:11:30.724 --> 00:11:33.126 line:-2
the library-specific
local identifiers.


225
00:11:35.028 --> 00:11:38.232 line:-2
Working in the other direction,
this call to the photo library


226
00:11:38.265 --> 00:11:41.502 line:-2
returns a dictionary with
localIdentifierMapping objects


227
00:11:41.535 --> 00:11:43.337 line:-1
for each cloudIdentifier.


228
00:11:44,805 --> 00:11:47,908
Again, we'll iterate through
the dictionary and this time get


229
00:11:47,941 --> 00:11:51,845
a localIdentifier
from the localMapping object.


230
00:11:51,879 --> 00:11:54,147
Once I have
all the localIdentifiers,


231
00:11:54,181 --> 00:11:55,782
I can use them
to fetch and display


232
00:11:55,816 --> 00:11:58,585
the assets I had
on the source device.


233
00:11:58.619 --> 00:12:01.722 line:-2
You can see how the API makes it
easy to look up identifiers


234
00:12:01.755 --> 00:12:04.758 line:-2
in both directions,
but the reality of different


235
00:12:04.791 --> 00:12:07.094 line:-2
device configurations,
account settings,


236
00:12:07.127 --> 00:12:10.030 line:-2
network states,
and countless other variables


237
00:12:10.063 --> 00:12:13.634 line:-2
can mean things aren't
always that simple.


238
00:12:13.667 --> 00:12:16.270 line:-2
To handle that complexity,
the API uses a pair


239
00:12:16.303 --> 00:12:19.373 line:-2
of helper objects
to hold a valid identifier


240
00:12:19.406 --> 00:12:21.642 line:-2
or an error indicating
why the mapping failed.


241
00:12:23.544 --> 00:12:25.512 line:-2
There are two kinds of errors
you should handle


242
00:12:25.546 --> 00:12:28.048 line:-2
when looking up
identifier mappings.


243
00:12:28.081 --> 00:12:31.485 line:-2
If the photo library isn't able
to resolve an identifier mapping


244
00:12:31.518 --> 00:12:34.087 line:-2
because the underlying record
isn't present or the app


245
00:12:34.121 --> 00:12:37.324 line:-2
doesn't have access to it,
the mapping object returned


246
00:12:37.357 --> 00:12:40.827 line:-2
by the API will contain
the Identifier Not Found error.


247
00:12:42.629 --> 00:12:44.865 line:-2
Here you can see
how we're getting the error code


248
00:12:44.898 --> 00:12:46.967 line:-2
from the
localIdentifierMapping object


249
00:12:47.000 --> 00:12:49.469 line:-1
if the identifier isn't set.


250
00:12:49.503 --> 00:12:52.139 line:-2
For an Identifier Not Found
error, it makes sense


251
00:12:52.172 --> 00:12:55.242 line:-2
to keep track of the unresolved
cloudIdentifier so we can put


252
00:12:55.275 --> 00:12:57.444 line:-2
a placeholder in the UI
to indicate the photo


253
00:12:57.477 --> 00:13:00.080 line:-2
couldn't be found
on this device.


254
00:13:00.113 --> 00:13:02.683 line:-2
The other type of error happens
if we can't resolve


255
00:13:02.716 --> 00:13:05.185 line:-1
an identifier mapping uniquely.


256
00:13:05.219 --> 00:13:07.321 line:-2
In other words,
there are multiple assets


257
00:13:07.354 --> 00:13:10.591 line:-2
that match
the provided cloud identifier.


258
00:13:10.624 --> 00:13:12.426 line:-2
This can happen
if the cloud state isn't


259
00:13:12.459 --> 00:13:15.262 line:-2
totally in sync on this device
and the library has to rely


260
00:13:15.295 --> 00:13:17.965 line:-2
on the image content
to find a match.


261
00:13:17.998 --> 00:13:20.434 line:-2
In this case,
the mapping object will have


262
00:13:20.467 --> 00:13:23.704 line:-2
a Multiple Identifiers Found
error, and the error


263
00:13:23.737 --> 00:13:26.740 line:-2
user info will contain
the matching identifiers.


264
00:13:28.909 --> 00:13:31.912 line:-2
With the Multiple Identifiers
Found error code,


265
00:13:31.945 --> 00:13:33.881 line:-2
we can get the matching
local identifiers


266
00:13:33.914 --> 00:13:39.052 line:-2
from the error user info using
the LocalIdentifiersErrorKey.


267
00:13:39.086 --> 00:13:40.921 line:-2
In this example,
we've stashed them


268
00:13:40.954 --> 00:13:42.689 line:-2
in a dictionary
so we can later fetch


269
00:13:42.723 --> 00:13:46.059 line:-2
and show the matching assets
and let the customer decide.


270
00:13:48.128 --> 00:13:51.832 line:-2
That's an overview of cloud
identifiers and how to use them.


271
00:13:51.865 --> 00:13:54.201 line:-2
Keep in mind
that looking up the mappings


272
00:13:54.234 --> 00:13:57.738 line:-2
between local and cloud
identifiers can be expensive,


273
00:13:57.771 --> 00:14:00.107 line:-2
so use local identifiers
in your app interactions


274
00:14:00.140 --> 00:14:03.076 line:-2
with the photo library,
perform the mapping work


275
00:14:03.110 --> 00:14:06.079 line:-2
at load and save points,
and then store and share


276
00:14:06.113 --> 00:14:10.784 line:-2
the cloud identifiers to make
them available on other devices.


277
00:14:10.817 --> 00:14:12.786 line:-1
Next up, limited library.


278
00:14:14,154 --> 00:14:16,990
Before we dive into
the updates to limited library,


279
00:14:17,024 --> 00:14:20,928
let's quickly review
how photo library access works.


280
00:14:20.961 --> 00:14:24.131 line:-2
When someone launches
an app and requests access


281
00:14:24.164 --> 00:14:26.466 line:-1
to photos data using PhotoKit,


282
00:14:26,500 --> 00:14:28,168
the system requires
their permission


283
00:14:28,202 --> 00:14:31,104
before granting the app access.


284
00:14:31.138 --> 00:14:33.006 line:-1
And the first time this happens,


285
00:14:33.040 --> 00:14:34.641 line:-2
they'll see an alert
like this one.


286
00:14:34.675 --> 00:14:37.311 line:-2
This is really important
to our customers.


287
00:14:37.344 --> 00:14:39.580 line:-2
It gives them the control
over how much access


288
00:14:39.613 --> 00:14:41.715 line:-1
to give this application:


289
00:14:41.748 --> 00:14:44.852 line:-2
to allow access to a limited
selection of photos,


290
00:14:44.885 --> 00:14:47.321 line:-2
full access
to their entire library,


291
00:14:47.354 --> 00:14:50.691 line:-1
or to deny access completely.


292
00:14:50.724 --> 00:14:53.126 line:-2
If they choose
the Select Photos option,


293
00:14:53.160 --> 00:14:55.896 line:-2
then the app is granted
limited library access.


294
00:14:57,531 --> 00:15:00,968
You can refer
to our WWDC '20 session


295
00:15:01,001 --> 00:15:03,871
"Handle the Limited Photos
Library in your app"


296
00:15:03,904 --> 00:15:06,907
for a more complete description
of limited library mode


297
00:15:06,940 --> 00:15:10,077
and how to design your app
to work best with it.


298
00:15:10.110 --> 00:15:12.980 line:-2
For now, it's enough to know
that limited library access


299
00:15:13.013 --> 00:15:16.517 line:-2
is designed to be transparent
to the app developer.


300
00:15:16.550 --> 00:15:18.652 line:-2
In general,
PhotoKit APIs should work


301
00:15:18.685 --> 00:15:20.954 line:-2
like normal,
behaving like the library


302
00:15:20.988 --> 00:15:24.558 line:-2
only contains the photos
that were selected.


303
00:15:24.591 --> 00:15:27.194 line:-2
It works conveniently
with common workflows.


304
00:15:27.227 --> 00:15:29.796 line:-2
For example,
when an app adds a photo


305
00:15:29.830 --> 00:15:32.065 line:-2
to the library,
that photo is automatically


306
00:15:32.099 --> 00:15:35.002 line:-2
included in the app's
limited library selection.


307
00:15:36.470 --> 00:15:38.705 line:-2
There is another workflow
we see in apps


308
00:15:38.739 --> 00:15:40.407 line:-2
using a custom album
to keep track


309
00:15:40.440 --> 00:15:42.643 line:-1
of the assets they've added.


310
00:15:42.676 --> 00:15:45.145 line:-2
But in iOS 14,
limited library mode


311
00:15:45.179 --> 00:15:48.549 line:-2
did not allow creation
or access to custom albums.


312
00:15:50.184 --> 00:15:52.753 line:-2
I'm happy to tell you
that in iOS 15, we've added


313
00:15:52.786 --> 00:15:55.789 line:-2
support for applications
to create, fetch,


314
00:15:55.822 --> 00:15:59.459 line:-2
and update their own albums when
running in limited library mode.


315
00:16:00.727 --> 00:16:03.630 line:-2
Now let's turn our attention
to a different workflow,


316
00:16:03.664 --> 00:16:05.399 line:-2
and for this,
I'm going to refer back


317
00:16:05.432 --> 00:16:08.402 line:-2
to my example
photo journaling app.


318
00:16:08.435 --> 00:16:11.238 line:-2
Since I want to give
my customers a great experience


319
00:16:11.271 --> 00:16:14.274 line:-2
when they've chosen limited
library access for my app,


320
00:16:14,308 --> 00:16:15,776
I've customized the interface


321
00:16:15,809 --> 00:16:17,845
to present
limited library picker


322
00:16:17,878 --> 00:16:19,813
as part of creating
a new journal.


323
00:16:21.915 --> 00:16:24.484 line:-2
This provides a natural step
during journal creation


324
00:16:24.518 --> 00:16:27.120 line:-1
for them to choose more photos.


325
00:16:27.154 --> 00:16:28.956 line:-2
But once the selection
is updated,


326
00:16:28.989 --> 00:16:31.058 line:-2
it would be great to know
what photos were added,


327
00:16:31.091 --> 00:16:32.926 line:-2
since they're the ones
my customer wants


328
00:16:32.960 --> 00:16:35.662 line:-1
to use in this journal.


329
00:16:35.696 --> 00:16:37.865 line:-2
With a new
presentLimitedLibraryPicker


330
00:16:37.898 --> 00:16:40.667 line:-1
API in iOS 15, I can pass in


331
00:16:40.701 --> 00:16:42.936 line:-2
a completion handler
that gives me the identifiers


332
00:16:42.970 --> 00:16:45.806 line:-2
of the photos they just selected
in the picker.


333
00:16:45.839 --> 00:16:48.775 line:-2
This lets me know when
the selection update is done


334
00:16:48.809 --> 00:16:50.310 line:-1
and which assets they added.


335
00:16:52.079 --> 00:16:54.548 line:-2
That covers our updates
for limited library,


336
00:16:54.581 --> 00:16:57.551 line:-2
support for apps to create
and work with their own albums,


337
00:16:57.584 --> 00:16:59.853 line:-2
and a new API to give apps
a way to track


338
00:16:59.887 --> 00:17:02.256 line:-2
what was added to the limited
library selection.


339
00:17:03.757 --> 00:17:06.159 line:-2
That's most of what we had
to talk about today,


340
00:17:06.193 --> 00:17:09.863 line:-2
but before we go, I'd like
to leave you with the following.


341
00:17:09.897 --> 00:17:12.199 line:-2
For those who haven't
updated your code in a while,


342
00:17:12.232 --> 00:17:14.701 line:-2
it's time to move away
from Assets Library.


343
00:17:14.735 --> 00:17:16.803 line:-2
It's been deprecated
since iOS 9,


344
00:17:16.837 --> 00:17:19.907 line:-2
and we're planning to remove it
in a future SDK.


345
00:17:19.940 --> 00:17:23.143 line:-2
This is the time to move
to the new Photos picker


346
00:17:23.177 --> 00:17:27.080 line:-2
or PhotoKit for a deeper
integration with photos.


347
00:17:27.114 --> 00:17:29.783 line:-2
And one more reason to make
the move to PhotoKit:


348
00:17:29.816 --> 00:17:32.252 line:-2
we know we've had long-standing
gaps in error handling,


349
00:17:32.286 --> 00:17:34.421 line:-2
and I'm so happy to tell you
that we've finally


350
00:17:34.454 --> 00:17:36.823 line:-2
addressed those with
new error codes to identify


351
00:17:36.857 --> 00:17:39.793 line:-2
the underlying issue during
change request processing,


352
00:17:39.826 --> 00:17:42.629 line:-2
resource requests,
and library access calls.


353
00:17:43.830 --> 00:17:46.466 line:-2
We can't wait for you to check
out all the great new features


354
00:17:46.500 --> 00:17:50.103 line:-2
we've added to Photos picker
and PhotoKit in iOS 15.


355
00:17:50.137 --> 00:17:51.371 line:-1
Thank you.

