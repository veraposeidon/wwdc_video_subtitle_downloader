2
00:00:00,667 --> 00:00:07,608 line:-1
[upbeat music]


3
00:00:09.042 --> 00:00:10.410 line:-2 align:center
[Sonia]
Hi, I am Sonia,


4
00:00:10,444 --> 00:00:12,513 line:-1
a performance tools engineer.


5
00:00:12,546 --> 00:00:14,581 line:-2
Today,
my colleague Shreyas and I


6
00:00:14,615 --> 00:00:16,350 line:-1
will show you how to diagnose


7
00:00:16.383 --> 00:00:18.151 line:-2 align:center
power
and performance regressions


8
00:00:18,185 --> 00:00:19,319 line:-1
in your app.


9
00:00:19.353 --> 00:00:21.622 line:-2 align:center
Every year,
you work hard to release


10
00:00:21,655 --> 00:00:23,657 line:-1
the best apps possible.


11
00:00:23.690 --> 00:00:26.793 line:-2 align:center
You want to invite users
to an amazing experience


12
00:00:26,827 --> 00:00:30,330 line:-2
in your apps, which is why
optimizing for power


13
00:00:30,364 --> 00:00:32,399 line:-1
and performance is so important.


14
00:00:32,432 --> 00:00:35,402 line:-2
This talk will cover
key metrics that affect


15
00:00:35,435 --> 00:00:37,538 line:-1
your app's performance,


16
00:00:37,571 --> 00:00:40,807 line:-2
tools to help you
discover regressions,


17
00:00:40,841 --> 00:00:44,211 line:-2
insights to help you
reduce disk writes,


18
00:00:44,244 --> 00:00:48,315 line:-2
and APIs to automate
your performance workflows.


19
00:00:48,348 --> 00:00:50,484 line:-2
To help you
optimize performance,


20
00:00:50,517 --> 00:00:53,754 line:-2
there's a comprehensive
set of metrics and diagnostics


21
00:00:53.787 --> 00:00:56.757 line:-2 align:center
available to you
through the Xcode Organizer


22
00:00:56.790 --> 00:01:01.094 line:-2 align:center
and App Store Connect API,
without any changes to your app.


23
00:01:01,128 --> 00:01:04,731 line:-2
As you know, performance
is not easy to optimize.


24
00:01:04.765 --> 00:01:07.868 line:-2 align:center
With so many metrics
and diagnostics available,


25
00:01:07,901 --> 00:01:11,305 line:-2
it can be easy to get lost
in a sea of information.


26
00:01:11,338 --> 00:01:14,508 line:-2
You want to make each release
better than the last,


27
00:01:14,541 --> 00:01:16,677 line:-2
but need a quick way
to summarize


28
00:01:16.710 --> 00:01:18.312 line:-1 align:center
your performance priorities.


29
00:01:18.345 --> 00:01:21.014 line:-2 align:center
The Xcode Organizer
is a great tool


30
00:01:21,048 --> 00:01:22,683 line:-1
to understand performance.


31
00:01:22,716 --> 00:01:26,386 line:-2
It currently collects data
across seven metric categories,


32
00:01:26,420 --> 00:01:30,691 line:-2
including battery, launches,
hangs, memory,


33
00:01:30.724 --> 00:01:34.061 line:-2 align:center
disk writes, scroll hitches,
and terminations.


34
00:01:34.094 --> 00:01:36.763 line:-2 align:center
That's a lot
of information to process.


35
00:01:36,797 --> 00:01:38,999 line:-2
Let's dive
into the Xcode Organizer next


36
00:01:39,032 --> 00:01:41,535 line:-2
and diagnose
a performance regression.


37
00:01:41.568 --> 00:01:44.805 line:-2 align:center
I'll start by viewing
different metrics for my app.


38
00:01:44,838 --> 00:01:47,407 line:-2
I can choose
from seven metric categories


39
00:01:47,441 --> 00:01:49,543 line:-1
on the left navigation bar.


40
00:01:49.576 --> 00:01:52.312 line:-2 align:center
Some categories,
like battery and terminations,


41
00:01:52,346 --> 00:01:55,682 line:-2
can have multiple sections,
as well as subcategories


42
00:01:55.716 --> 00:01:58.418 line:-1 align:center
detailing different event types.


43
00:01:58,452 --> 00:02:00,787 line:-2
I can optionally
choose between dozens


44
00:02:00.821 --> 00:02:02.222 line:-1 align:center
of different device types,


45
00:02:02,256 --> 00:02:06,326 line:-2
as well as percentiles for top
and typical users of my app.


46
00:02:06.360 --> 00:02:07.928 line:-1 align:center
The center of the organizer


47
00:02:07.961 --> 00:02:11.198 line:-2 align:center
shows a chart with data
for the last 16 releases.


48
00:02:11,231 --> 00:02:13,400 line:-2
In this case,
I want to investigate


49
00:02:13,433 --> 00:02:14,868 line:-1
terminations in my app.


50
00:02:16.370 --> 00:02:18.805 line:-2 align:center
The onscreen chart
shows terminations


51
00:02:18.839 --> 00:02:21.408 line:-2 align:center
increased significantly
in the latest version,


52
00:02:21.441 --> 00:02:24.478 line:-2 align:center
indicating there may be an issue
with the release,


53
00:02:24,511 --> 00:02:27,714 line:-2
specifically due to more
illegal instruction exits


54
00:02:27.748 --> 00:02:29.550 line:-1 align:center
highlighted in blue.


55
00:02:29,583 --> 00:02:32,753 line:-2
There's such a rich
and interesting set of metrics


56
00:02:32,786 --> 00:02:36,190 line:-2
available for me to understand
performance in the field,


57
00:02:36,223 --> 00:02:39,693 line:-2
but with so many device options,
metric categories,


58
00:02:39,726 --> 00:02:42,429 line:-2
and subcategories,
it's not clear


59
00:02:42,462 --> 00:02:44,831 line:-2
where I should
start to optimize performance.


60
00:02:44.865 --> 00:02:47.434 line:-2 align:center
That's why
there's now an insights section


61
00:02:47,467 --> 00:02:49,369 line:-1
in the organizer to highlight


62
00:02:49,403 --> 00:02:51,405 line:-2
all of your
performance priorities


63
00:02:51,438 --> 00:02:53,607 line:-1
and streamline your workflow.


64
00:02:53,640 --> 00:02:56,944 line:-2
The Xcode Organizer
now processes metrics data


65
00:02:56,977 --> 00:02:58,979 line:-2
and identifies
interesting trends


66
00:02:59,012 --> 00:03:01,114 line:-1
such as performance regressions.


67
00:03:01,148 --> 00:03:03,283 line:-1
Before I dive in, let's talk


68
00:03:03,317 --> 00:03:05,285 line:-2
about what
a performance regression is


69
00:03:05,319 --> 00:03:07,487 line:-1
and how they're detected.


70
00:03:07,521 --> 00:03:10,524 line:-2
Regressions occur when an app
performs poorly


71
00:03:10,557 --> 00:03:14,695 line:-2
in a power or performance area
relative to recent releases.


72
00:03:14.728 --> 00:03:16.830 line:-2 align:center
For example,
when it takes longer


73
00:03:16,864 --> 00:03:18,832 line:-1
to launch after a release.


74
00:03:18.866 --> 00:03:21.001 line:-2 align:center
In this example,
the metric is analyzed


75
00:03:21,034 --> 00:03:23,136 line:-2
over recent releases
to determine


76
00:03:23,170 --> 00:03:25,305 line:-1
if the value is trending up.


77
00:03:25.339 --> 00:03:28.008 line:-2 align:center
The metric is then averaged
over the last few releases


78
00:03:28.041 --> 00:03:30.477 line:-2 align:center
and compared
to the latest value.


79
00:03:30,511 --> 00:03:33,647 line:-2
If the metric is trending up
and the latest value is higher


80
00:03:33.680 --> 00:03:36.083 line:-2 align:center
than the average
over the last few releases,


81
00:03:36.116 --> 00:03:38.619 line:-2 align:center
it's flagged as a regression
and summarized


82
00:03:38,652 --> 00:03:40,420 line:-1
in the insights section.


83
00:03:40,454 --> 00:03:42,890 line:-2
In this example,
the app took on average


84
00:03:42.923 --> 00:03:45.225 line:-1 align:center
1.1 seconds to launch,


85
00:03:45,259 --> 00:03:47,895 line:-2
then suddenly jumped
to 2.5 seconds


86
00:03:47,928 --> 00:03:50,430 line:-2
in the last release,
causing it to be flagged


87
00:03:50,464 --> 00:03:52,232 line:-1
as a regression.


88
00:03:52.266 --> 00:03:54.568 line:-2 align:center
Now that you know
how regressions are flagged,


89
00:03:54.601 --> 00:03:58.372 line:-2 align:center
let's go back to the organizer
and dive in to a few examples.


90
00:03:58.405 --> 00:04:00.908 line:-2 align:center
Here's a look
at the regressions tab.


91
00:04:00,941 --> 00:04:03,076 line:-2
It's a one-stop shop
where you can discover


92
00:04:03,110 --> 00:04:05,479 line:-1
your top performance priorities.


93
00:04:05.512 --> 00:04:08.782 line:-2 align:center
Is your app suddenly crashing
after a recent release?


94
00:04:08,815 --> 00:04:12,519 line:-2
Is that cool new camera feature
draining the device battery?


95
00:04:12,553 --> 00:04:14,288 line:-2
You'll find the answer
to these questions


96
00:04:14,321 --> 00:04:16,790 line:-2
and more
in the insights section.


97
00:04:16,823 --> 00:04:19,326 line:-2
All the data you need
will be highlighted


98
00:04:19,359 --> 00:04:21,428 line:-2
in this go-to section
to understand


99
00:04:21.461 --> 00:04:23.063 line:-1 align:center
performance in the field.


100
00:04:23.096 --> 00:04:24.798 line:-2 align:center
Here you can discover
regressions


101
00:04:24.831 --> 00:04:27.501 line:-2 align:center
for different metric categories
and subcategories


102
00:04:27.534 --> 00:04:30.504 line:-2 align:center
across devices for typical
and top percentiles


103
00:04:30,537 --> 00:04:31,872 line:-1
grouped together.


104
00:04:31,905 --> 00:04:33,941 line:-2
The left-hand side
will summarize


105
00:04:33,974 --> 00:04:36,376 line:-2
which metric regressed,
by how much,


106
00:04:36.410 --> 00:04:37.945 line:-1 align:center
and for which percentiles,


107
00:04:37.978 --> 00:04:40.581 line:-2 align:center
highlighting exactly
what you need to focus on


108
00:04:40.614 --> 00:04:42.950 line:-1 align:center
to create even better apps.


109
00:04:42,983 --> 00:04:45,018 line:-1
My app has several regressions


110
00:04:45,052 --> 00:04:48,222 line:-2
across terminations,
memory, and disk writes.


111
00:04:48.255 --> 00:04:50.257 line:-1 align:center
Next, I'll go through an example


112
00:04:50,290 --> 00:04:52,960 line:-2
of each
and how to interpret them.


113
00:04:52,993 --> 00:04:55,662 line:-2
I'll start
with termination regressions.


114
00:04:55,696 --> 00:04:57,664 line:0
Before I go
through terminations,


115
00:04:57,698 --> 00:05:00,501 line:0
check out the video on
"Why is my app getting killed?"


116
00:05:00,534 --> 00:05:02,135 align:center
for more context.


117
00:05:02.169 --> 00:05:03.871 line:-1 align:center
Each regression will summarize


118
00:05:03.904 --> 00:05:07.107 line:-2 align:center
all the top issues
from my latest app release.


119
00:05:07,140 --> 00:05:10,110 line:-2
The top of the section
shows illegal instructions


120
00:05:10.143 --> 00:05:12.579 line:-2 align:center
are causing the crashes,
which can occur


121
00:05:12,613 --> 00:05:15,782 line:-2
when my app accesses
an invalid function pointer.


122
00:05:15.816 --> 00:05:19.219 line:-2 align:center
Further down, there's a chart
of illegal instruction exits


123
00:05:19.253 --> 00:05:21.922 line:-2 align:center
over the last four releases
of my app.


124
00:05:21,955 --> 00:05:24,558 line:-2
The top of the chart
shows which percentiles


125
00:05:24,591 --> 00:05:26,460 line:-1
and devices were affected.


126
00:05:26.493 --> 00:05:28.729 line:-2 align:center
In this case,
top percentile users


127
00:05:28.762 --> 00:05:31.865 line:-2 align:center
on all iPhones
are experiencing more crashes


128
00:05:31.899 --> 00:05:33.600 line:-1 align:center
in the latest release.


129
00:05:33,634 --> 00:05:37,271 line:-2
The average and latest number
of illegal instruction exits


130
00:05:37.304 --> 00:05:39.173 line:-1 align:center
are to the right of the chart.


131
00:05:39.206 --> 00:05:41.608 line:-2 align:center
In this case,
my app has started crashing


132
00:05:41.642 --> 00:05:44.444 line:-2 align:center
every ten days
in the latest version.


133
00:05:44,478 --> 00:05:47,347 line:-2
Onscreen terminations
are very disruptive


134
00:05:47,381 --> 00:05:49,917 line:0
because users will have to go
back to the Home screen


135
00:05:49,950 --> 00:05:52,419 line:0
and relaunch the app frequently.


136
00:05:52,452 --> 00:05:56,023 line:0
I'll want to remove references
to the invalid function pointer


137
00:05:56,056 --> 00:05:58,759 align:center
causing these crashes
and can dig in further


138
00:05:58,792 --> 00:06:02,095 line:0
by taking a look
at my crash diagnostics.


139
00:06:02,129 --> 00:06:06,333 line:0
Check out the "Triage TestFlight
crashes with Xcode" video


140
00:06:06,366 --> 00:06:09,036 line:0
to learn more
about crash diagnostics.


141
00:06:10.671 --> 00:06:13.473 line:-2 align:center
Using regressions
and crash diagnostics,


142
00:06:13,507 --> 00:06:15,409 line:-1
I now know I need to reduce


143
00:06:15,442 --> 00:06:18,412 line:-2
onscreen terminations
in the next app release.


144
00:06:18.445 --> 00:06:20.981 line:-2 align:center
I don't want to stop
at onscreen terminations


145
00:06:21,014 --> 00:06:22,916 line:-1
and know there's more I can do.


146
00:06:22.950 --> 00:06:25.185 line:-2 align:center
I'll check my app's regressions
to discover


147
00:06:25,219 --> 00:06:26,720 line:-1
other areas for improvement.


148
00:06:27.988 --> 00:06:31.525 line:-2 align:center
Looks like there's a regression
in task timeouts as well.


149
00:06:31,558 --> 00:06:34,294 line:-2
Some metrics
can regress for multiple devices


150
00:06:34.328 --> 00:06:35.729 line:-1 align:center
and percentiles.


151
00:06:35.762 --> 00:06:38.265 line:-2 align:center
In this case,
task timeouts have increased


152
00:06:38.298 --> 00:06:42.536 line:-2 align:center
across all iPhones on both
typical and top percentiles.


153
00:06:42.569 --> 00:06:46.106 line:-2 align:center
I can scroll through
each regression on the right,


154
00:06:46,139 --> 00:06:48,342 line:-1
viewing data for recent releases


155
00:06:48.375 --> 00:06:50.611 line:-2 align:center
as well as the latest
and average value


156
00:06:50,644 --> 00:06:51,945 line:-1
for the metric.


157
00:06:51,979 --> 00:06:53,747 line:-2
When apps are switched
to the background,


158
00:06:53,780 --> 00:06:56,016 line:-2
they have 30 seconds
to execute tasks


159
00:06:56.049 --> 00:06:58.452 line:-2 align:center
before the system
terminates them.


160
00:06:58,485 --> 00:07:01,889 line:-2
This means that failing to end
background tasks appropriately


161
00:07:01,922 --> 00:07:04,958 line:-2
can cause your app to terminate
more frequently,


162
00:07:04,992 --> 00:07:07,127 line:-2
leading to a slow launch
the next time


163
00:07:07,160 --> 00:07:08,795 line:-1
a user switches back.


164
00:07:08.829 --> 00:07:12.132 line:-2 align:center
My app is now getting terminated
every three days


165
00:07:12,165 --> 00:07:13,467 line:-1
in the background.


166
00:07:13,500 --> 00:07:16,470 line:-2
While not as disruptive
as an onscreen termination,


167
00:07:16.503 --> 00:07:19.506 line:-2 align:center
background terminations
can be much more common.


168
00:07:19,540 --> 00:07:23,010 line:-2
It's essential to have
a seamless launch experience,


169
00:07:23.043 --> 00:07:25.879 line:-2 align:center
even when my app is terminated
in the background.


170
00:07:25.913 --> 00:07:29.616 line:-2 align:center
I can integrate UIKit's
state restoration features


171
00:07:29,650 --> 00:07:33,687 line:-2
to ensure a smooth recovery
from any background exits.


172
00:07:33,720 --> 00:07:37,157 line:-2
Lastly, coming back
to my app's regressions,


173
00:07:37.191 --> 00:07:39.793 line:-2 align:center
there's one more
performance area


174
00:07:39.826 --> 00:07:41.595 line:-1 align:center
I need to focus on.


175
00:07:41.628 --> 00:07:45.699 line:-2 align:center
Disk writes have increased
by 28% in the last release,


176
00:07:45,732 --> 00:07:49,169 line:-2
but it's not clear
what's caused the issue.


177
00:07:49.203 --> 00:07:51.872 line:-2 align:center
It's great I know there's
a performance problem,


178
00:07:51,905 --> 00:07:54,441 line:-2
but I'll need more insight
on where to start


179
00:07:54.474 --> 00:07:56.510 line:-1 align:center
before I optimize my app.


180
00:07:56.543 --> 00:07:58.812 line:-2 align:center
Next up,
Shreyas will tell you


181
00:07:58.846 --> 00:08:02.149 line:-2 align:center
how to discover top causes
for disk write regressions.


182
00:08:03.417 --> 00:08:04.451 line:-2 align:center
[Shreyas]
Thanks, Sonia.


183
00:08:04.484 --> 00:08:06.253 line:-1 align:center
Hi, I'm Shreyas.


184
00:08:06.286 --> 00:08:08.689 line:-2 align:center
I'm a storage software engineer
at Apple,


185
00:08:08.722 --> 00:08:11.592 line:-2 align:center
and I'll cover how to debug
disk write regressions


186
00:08:11,625 --> 00:08:14,328 line:-2
and stay on top
of the app's performance.


187
00:08:14.361 --> 00:08:15.929 line:-1 align:center
But before diving into this,


188
00:08:15.963 --> 00:08:18.065 line:-2 align:center
why are disk writes
so important?


189
00:08:18,098 --> 00:08:20,868 line:-2
Storage,
very much like CPU and memory,


190
00:08:20.901 --> 00:08:22.569 line:-1 align:center
is a limited resource.


191
00:08:22,603 --> 00:08:24,438 line:-2
Unchecked disk writes
can wear out


192
00:08:24.471 --> 00:08:26.840 line:-2 align:center
and damage
the underlying device.


193
00:08:26,874 --> 00:08:30,277 line:-2
They're also a common cause
for annoying onscreen hangs


194
00:08:30,310 --> 00:08:31,945 line:-1
and UI hitches.


195
00:08:31.979 --> 00:08:33.780 line:-1 align:center
If we are not careful,


196
00:08:33,814 --> 00:08:36,250 line:-2
they can eat up
the battery life quickly.


197
00:08:36.283 --> 00:08:38.652 line:-2 align:center
These make
optimizing disk writes


198
00:08:38,685 --> 00:08:41,889 line:-2
a key component in ensuring
a great user experience.


199
00:08:41,922 --> 00:08:44,658 line:-2
With that in mind,
let's learn about the resources


200
00:08:44,691 --> 00:08:47,194 line:-2
available to diagnose
high disk writes.


201
00:08:47,227 --> 00:08:50,063 line:-2
The disk writes report pane
in Xcode Organizer


202
00:08:50,097 --> 00:08:51,932 line:-1
is a great starting point.


203
00:08:51,965 --> 00:08:53,867 line:-2
These reports are collected
from devices


204
00:08:53,901 --> 00:08:56,370 line:-2
which have consented
to share app analytics,


205
00:08:56,403 --> 00:08:57,971 line:-1
and they contain information


206
00:08:58.005 --> 00:09:00.674 line:-2 align:center
about the stack trace
that led to the writes.


207
00:09:00,707 --> 00:09:03,243 line:-2
The stack trace from each report
is broken down


208
00:09:03,277 --> 00:09:05,913 line:-2
into multiple signatures,
and the writes are tracked


209
00:09:05.946 --> 00:09:08.482 line:-2 align:center
for a signature
across all reports.


210
00:09:08,515 --> 00:09:11,418 line:-2
In this report list,
the signatures are shown


211
00:09:11,451 --> 00:09:13,954 line:-2
sorted based
on the total writes.


212
00:09:13,987 --> 00:09:18,025 line:-2
For each of the signatures,
we can find detailed stack trace


213
00:09:18,058 --> 00:09:20,127 line:-2
showing us
the cause of the writes,


214
00:09:20.160 --> 00:09:22.029 line:-1 align:center
and we can also find statistics


215
00:09:22,062 --> 00:09:24,198 line:-2
about how many logs
were received,


216
00:09:24,231 --> 00:09:25,933 line:-2
what OS version
and hardware model


217
00:09:25.966 --> 00:09:28.368 line:-1 align:center
breakdown looks like, and so on.


218
00:09:28.402 --> 00:09:30.437 line:-1 align:center
To identify the problem areas,


219
00:09:30.470 --> 00:09:32.940 line:-2 align:center
pay close attention
to your top signatures.


220
00:09:32.973 --> 00:09:34.942 line:-1 align:center
In this case, the top signature


221
00:09:34,975 --> 00:09:38,378 line:-2
is responsible
for 67% of the writes.


222
00:09:38,412 --> 00:09:40,147 line:-1
We can infer from the callstacks


223
00:09:40.180 --> 00:09:42.850 line:-2 align:center
that this is due
to an SQLite function.


224
00:09:42.883 --> 00:09:46.687 line:-2 align:center
A lot of times, knowing this,
the source of the problem,


225
00:09:46,720 --> 00:09:49,690 line:-2
can go a long way
towards solving the issue.


226
00:09:49.723 --> 00:09:54.127 line:-2 align:center
But often, like in this case,
the fix may not be obvious.


227
00:09:54.161 --> 00:09:57.197 line:-2 align:center
The code here is critical
to my new feature,


228
00:09:57,231 --> 00:09:59,800 line:-1
I don't spot any obvious bugs,


229
00:09:59.833 --> 00:10:03.270 line:-2 align:center
and it's not apparent
what my next steps should be.


230
00:10:03.303 --> 00:10:06.573 line:-2 align:center
Turns out, the answer
is present in the stack trace


231
00:10:06,607 --> 00:10:08,175 line:-1
if you know where to look.


232
00:10:08.876 --> 00:10:11.645 line:-2 align:center
There are functions
often deep in the stack


233
00:10:11,678 --> 00:10:14,181 line:-2
sometimes in the libraries
that you are using


234
00:10:14,214 --> 00:10:16,350 line:-1
that can tell you what's wrong


235
00:10:16,383 --> 00:10:18,652 line:-2
and, with enough research,
how to fix it.


236
00:10:18.685 --> 00:10:20.587 line:-1 align:center
But that can be very tricky.


237
00:10:20.621 --> 00:10:23.323 line:-2 align:center
It often requires
specific domain knowledge


238
00:10:23.357 --> 00:10:25.459 line:-2 align:center
and can be
extremely time consuming.


239
00:10:26.026 --> 00:10:28.695 line:-2 align:center
To save you all this effort,
in Xcode 13,


240
00:10:28.729 --> 00:10:32.399 line:-2 align:center
organizer has
a new field called insights.


241
00:10:32.432 --> 00:10:35.402 line:-2 align:center
Behind the scenes,
a repository is maintained


242
00:10:35,435 --> 00:10:38,939 line:-2
with known antipatterns
that cause high disk writes.


243
00:10:38.972 --> 00:10:42.676 line:-2 align:center
As reports are received,
they're scanned for functions


244
00:10:42,709 --> 00:10:45,345 line:-2
that indicate
these antipatterns.


245
00:10:45,379 --> 00:10:48,916 line:-2
When there's a match,
the problem is highlighted here


246
00:10:48.949 --> 00:10:50.817 line:-2 align:center
along with
the optimization suggestion


247
00:10:50,851 --> 00:10:52,786 line:-1
to fix the issue.


248
00:10:52.819 --> 00:10:55.055 line:-2 align:center
This will make it easy
to reduce the app's writes


249
00:10:55.088 --> 00:10:57.357 line:-1 align:center
and improve performance


250
00:10:57.391 --> 00:10:59.459 line:-2 align:center
while saving
a ton of debugging effort.


251
00:10:59.493 --> 00:11:02.129 line:-2 align:center
For example,
for our top signature,


252
00:11:02.162 --> 00:11:05.432 line:-2 align:center
I see an optimization suggestion
to add an index.


253
00:11:05,465 --> 00:11:07,935 line:-2
There's also a link
to the documentation page


254
00:11:07,968 --> 00:11:10,204 line:-2
that will explain
the problem in detail


255
00:11:10.237 --> 00:11:12.973 line:-2 align:center
and give steps to debug
and fix the issue.


256
00:11:13,006 --> 00:11:14,408 line:-1
Great.


257
00:11:14,441 --> 00:11:16,944 line:-2
Now, let's follow the advice
and see if it helps.


258
00:11:16,977 --> 00:11:21,281 line:-2
And to do that, let me fire up
file activities instruments.


259
00:11:21.315 --> 00:11:24.785 line:-2 align:center
File activities instruments
is a fantastic resource


260
00:11:24,818 --> 00:11:27,487 line:-2
to debug
all storage-related issues.


261
00:11:27.521 --> 00:11:29.723 line:-2 align:center
It gives me
detailed breakdown


262
00:11:29,756 --> 00:11:33,627 line:-2
of all the reads and writes
that the app performs.


263
00:11:33.660 --> 00:11:36.496 line:-2 align:center
It's the perfect tool
to validate my fix.


264
00:11:38.165 --> 00:11:42.002 line:-2 align:center
Before, the instruments showed
around 180 megabytes


265
00:11:42.035 --> 00:11:44.037 line:-1 align:center
of writes to temporary files.


266
00:11:45.138 --> 00:11:48.475 line:-2 align:center
This also introduces
a 780 milliseconds of latency.


267
00:11:49.610 --> 00:11:52.312 line:-1 align:center
And now, after the index,


268
00:11:52,346 --> 00:11:55,849 line:-2
the writes due to the function
drops to zero.


269
00:11:55.883 --> 00:11:58.852 line:-2 align:center
This is because SQLite
is more efficient now.


270
00:11:58.886 --> 00:12:02.222 line:-2 align:center
This means we no longer have
780 millisecond latency


271
00:12:02.256 --> 00:12:06.760 line:-2 align:center
slowing us down.
SQLite index is one example.


272
00:12:06,793 --> 00:12:09,863 line:-2
There are a range of other
optimization suggestions


273
00:12:09,897 --> 00:12:12,099 line:-2
to improve
your app's performance,


274
00:12:12.132 --> 00:12:15.736 line:-2 align:center
and there is constant work
to expand this list,


275
00:12:15,769 --> 00:12:18,172 line:-2
so check out the insights
for your app today.


276
00:12:19,473 --> 00:12:21,708 line:-2
Let's come back
to the insights pane.


277
00:12:21,742 --> 00:12:23,877 line:-2
We had three regressions
for our app.


278
00:12:23.911 --> 00:12:27.114 line:-2 align:center
We scrutinized each one of them,
and we have discovered


279
00:12:27.147 --> 00:12:29.983 line:-2 align:center
the resources available
to resolve all of them.


280
00:12:30,017 --> 00:12:31,151 line:-1
That's great.


281
00:12:31,185 --> 00:12:33,887 line:-2
There are a ton of power
and performance analytics


282
00:12:33.921 --> 00:12:37.057 line:-2 align:center
in Xcode Organizer,
and the insights should be


283
00:12:37,090 --> 00:12:38,492 line:-1
a go-to pane to discover


284
00:12:38,525 --> 00:12:40,727 line:-2
your app's
performance priorities.


285
00:12:40,761 --> 00:12:42,696 line:-1
Make the most of it.


286
00:12:42,729 --> 00:12:45,699 line:-2
Plan to check for regressions
and insights periodically,


287
00:12:45.732 --> 00:12:47.668 line:-2 align:center
and definitely
after every release.


288
00:12:48,535 --> 00:12:50,470 line:-2
In addition
to the Xcode Organizer,


289
00:12:50.504 --> 00:12:52.172 line:-2 align:center
there's another way
for you access


290
00:12:52,206 --> 00:12:54,141 line:-1
all the analytics covered today,


291
00:12:54,174 --> 00:12:56,577 line:-2
and that is
App Store Connect APIs.


292
00:12:57,477 --> 00:12:59,513 align:center
These are great
if you want to access


293
00:12:59,546 --> 00:13:03,417 align:center
data programmatically
and build custom solutions.


294
00:13:03,450 --> 00:13:05,886 line:0
Perhaps you already have
an analytics pipeline


295
00:13:05,919 --> 00:13:07,321 align:center
that you have set up.


296
00:13:07,354 --> 00:13:09,723 line:0
Then these APIs
are the perfect tool


297
00:13:09,756 --> 00:13:12,192 line:0
for you to integrate
all these cool analytics.


298
00:13:12,226 --> 00:13:15,796 line:-2
Check out the video
"Identify trends with Power


299
00:13:15.829 --> 00:13:18.999 line:-2 align:center
and Performance API"
from WWDC 2020.


300
00:13:19.032 --> 00:13:23.570 line:-2 align:center
It covers the API end points
and responses in great detail.


301
00:13:23,604 --> 00:13:27,941 line:-2
Let me give a quick overview
of some of the API responses.


302
00:13:27,975 --> 00:13:30,677 line:-2
For metrics,
you can make a GET request


303
00:13:30,711 --> 00:13:33,647 line:-2
to the perfPowerMetrics
end point.


304
00:13:33.680 --> 00:13:37.217 line:-2 align:center
This returns a JSON response
that has app's metrics


305
00:13:37.251 --> 00:13:39.920 line:-2 align:center
and insights
for your recent versions.


306
00:13:39.953 --> 00:13:42.556 line:-2 align:center
Let's jump
into the insights section.


307
00:13:42,589 --> 00:13:45,526 line:-2
Within insights,
you'll find all the regressions


308
00:13:45,559 --> 00:13:47,494 line:-1
identified for your app.


309
00:13:47,528 --> 00:13:50,364 line:-2
For each regression,
you'll find metric category


310
00:13:50,397 --> 00:13:52,399 line:-2
and a summary
of the identified regression.


311
00:13:53,734 --> 00:13:57,471 line:-2
This is the onscreen termination
due to an illegal instruction


312
00:13:57.504 --> 00:14:00.040 line:-2 align:center
that we discovered earlier
in Xcode Organizer.


313
00:14:01,742 --> 00:14:04,211 line:-2
Next, you'll find
the populations section.


314
00:14:04,244 --> 00:14:07,314 line:-2
This provides
a detailed, structured list


315
00:14:07.347 --> 00:14:10.317 line:-2 align:center
of impacted percentiles
and devices.


316
00:14:10.350 --> 00:14:12.819 line:-2 align:center
You can use these
to take focused action


317
00:14:12.853 --> 00:14:14.588 line:-2 align:center
to improve
your app's performance.


318
00:14:15,856 --> 00:14:18,258 line:-2
Similarly,
for diagnostic reports,


319
00:14:18.292 --> 00:14:19.860 line:-1 align:center
you can make a GET request


320
00:14:19,893 --> 00:14:22,329 line:-2
to the diagnosticSignatures
end point.


321
00:14:22,362 --> 00:14:25,666 line:-2
The responses will have
a list of top signatures,


322
00:14:25,699 --> 00:14:27,768 line:-2
and each signature
will have a link


323
00:14:27.801 --> 00:14:29.636 line:-2 align:center
to the details associated
with it.


324
00:14:30,671 --> 00:14:32,840 line:-2
A GET request to this link
will provide you


325
00:14:32,873 --> 00:14:34,975 line:-1
with detailed diagnostic logs


326
00:14:35,008 --> 00:14:38,212 line:-2
and the insights
associated with the signature.


327
00:14:38.245 --> 00:14:41.181 line:-2 align:center
Use these APIs
in your analytics pipelines,


328
00:14:41.215 --> 00:14:44.418 line:-2 align:center
and when you see an insight,
take action immediately.


329
00:14:44,451 --> 00:14:47,354 line:-2
Now you know what
performance regressions are,


330
00:14:47.387 --> 00:14:49.056 line:-1 align:center
and how you can diagnose them,


331
00:14:49,089 --> 00:14:51,925 line:-2
and where you can find
actionable data to fix them.


332
00:14:51,959 --> 00:14:54,094 line:-1
Here's what you need to do next.


333
00:14:54,127 --> 00:14:58,599 line:-2
Go open Xcode Organizer now.
Check out the regressions pane.


334
00:14:58.632 --> 00:15:01.768 line:-2 align:center
See what your app's
top performance regressions are.


335
00:15:01,802 --> 00:15:04,004 line:-2
Find out how much
your app writes.


336
00:15:04.037 --> 00:15:06.707 line:-2 align:center
Are the top disk write
callstacks what you expect?


337
00:15:06.740 --> 00:15:09.343 line:-2 align:center
Or are there hidden bugs
slowing down your app?


338
00:15:09,376 --> 00:15:12,346 line:-2
Finally,
make a plan to stay on top


339
00:15:12.379 --> 00:15:14.114 line:-1 align:center
of your app's performance.


340
00:15:14.147 --> 00:15:16.049 line:-2 align:center
Check Xcode Organizer
periodically,


341
00:15:16,083 --> 00:15:18,018 line:-2
and use
the App Store Connect APIs


342
00:15:18,051 --> 00:15:20,020 line:-2
in any custom
analytics pipeline.


343
00:15:20.053 --> 00:15:22.990 line:-2 align:center
Thank you for your time.
Happy regression hunting.


344
00:15:23.023 --> 00:15:25.759 line:-1 align:center
[upbeat music]

