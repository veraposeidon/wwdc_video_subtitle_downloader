2
00:00:00,000 --> 00:00:02,202 line:-1
[MAC STARTUP CHIME]


3
00:00:02,202 --> 00:00:05,739 line:-1
♪ Bass music playing ♪


4
00:00:05,739 --> 00:00:07,174 line:-1
[KEYSTROKES]


5
00:00:07,174 --> 00:00:09,309 line:0 size:2% position:90%
♪


6
00:00:09.309 --> 00:00:12.079 line:-1 position:50%
Daniel Li: Welcome to "Add
intelligence to your widgets."


7
00:00:12.079 --> 00:00:14.081 line:-1 position:50%
My name’s Daniel,
and I’m an engineer on


8
00:00:14.081 --> 00:00:17.150 line:-1 position:50%
the Proactive Intelligence team
at Apple.


9
00:00:17.150 --> 00:00:18.619 line:-1 position:50%
In this session,
I’ll show you


10
00:00:18.619 --> 00:00:20.254 line:-1 position:50%
how your widgets can
work with the system


11
00:00:20.254 --> 00:00:22.789 line:-1 position:50%
to provide intelligent
experiences for your users


12
00:00:22,789 --> 00:00:25,759 line:-1
so your widgets can show up
right when they need them.


13
00:00:25.759 --> 00:00:27.828 line:-1 position:50%
Widgets live in many places.


14
00:00:27,828 --> 00:00:32,266 line:-1
From the Home screen on iOS
to Notification Center on macOS,


15
00:00:32.266 --> 00:00:34.234 line:-1 position:50%
widgets provide users
with information


16
00:00:34,234 --> 00:00:37,304 line:-1
that they can quickly view
with just a glance.


17
00:00:37.304 --> 00:00:42.276 line:-1 position:50%
With iPadOS 15, widgets come
to the iPad Home screen as well.


18
00:00:42.276 --> 00:00:43.877 line:-1 position:50%
There are now
more places than ever


19
00:00:43,877 --> 00:00:45,946 line:-1
for your widgets to call home.


20
00:00:45.946 --> 00:00:47.481 line:-1 position:50%
I’ll first talk about
what it means


21
00:00:47,481 --> 00:00:50,217 line:-1
for widgets to be intelligent
in the system,


22
00:00:50,217 --> 00:00:52,753 line:-1
and then I’ll show you
how you can enable intelligence


23
00:00:52.753 --> 00:00:55.088 line:-1 position:50%
for your widgets by donating
relevant information


24
00:00:55,088 --> 00:00:57,124 line:-1
with the available APIs.


25
00:00:57,124 --> 00:00:59,726 line:-1
Let’s first go over
widget intelligence.


26
00:00:59.726 --> 00:01:01.395 line:-1 position:50%
On iPhone and iPad,


27
00:01:01,395 --> 00:01:03,697 line:-1
widgets can be placed together
in a Smart Stack,


28
00:01:03.697 --> 00:01:04.998 line:-1 position:50%
where they can be
scrolled through


29
00:01:04.998 --> 00:01:08.502 line:-1 position:50%
to provide different kinds
of information in one place.


30
00:01:08.502 --> 00:01:11.204 line:-1 position:50%
When a user edits a stack,
in addition to being able


31
00:01:11,204 --> 00:01:14,174 line:-1
to add, remove,
or reorder widgets,


32
00:01:14.174 --> 00:01:15.475 line:-1 position:50%
they can also view
and manage


33
00:01:15.475 --> 00:01:18.378 line:-1 position:50%
the stack’s
intelligent behaviors.


34
00:01:18,378 --> 00:01:22,783 line:0
iOS 14 introduced Smart Rotate.


35
00:01:22,783 --> 00:01:25,319 line:-1
Smart Rotate allows the system,
at the right time,


36
00:01:25,319 --> 00:01:27,054 line:-1
to automatically
scroll to a widget


37
00:01:27.054 --> 00:01:29.623 line:-1 position:50%
that is already in a stack.


38
00:01:29.623 --> 00:01:31.591 line:-1 position:50%
To know when to rotate
to a widget,


39
00:01:31.591 --> 00:01:33.226 line:-1 position:50%
the system uses
relevance signals


40
00:01:33.226 --> 00:01:36.697 line:-1 position:50%
that the widget provides
alongside its timeline entries.


41
00:01:36,697 --> 00:01:38,532 line:-1
It can also rotate to a widget


42
00:01:38.532 --> 00:01:41.735 line:-1 position:50%
by learning patterns
in the user’s behavior.


43
00:01:41.735 --> 00:01:44.338 line:-1 position:50%
It does so by receiving
donations from the app


44
00:01:44.338 --> 00:01:46.073 line:-1 position:50%
whenever the user
views information


45
00:01:46.073 --> 00:01:48.642 line:-1 position:50%
corresponding to the widget.


46
00:01:48.642 --> 00:01:51.244 line:-1 position:50%
With Smart Rotate,
if I have a Weather widget,


47
00:01:51.244 --> 00:01:55.315 line:-1 position:50%
a Reminders widget, and
a Calendar widget in a stack,


48
00:01:55,315 --> 00:01:56,883 line:-1
the Weather widget
might tell the system


49
00:01:56.883 --> 00:01:59.419 line:-1 position:50%
to suggest itself in the morning
when I wake up


50
00:01:59.419 --> 00:02:01.955 line:-1 position:50%
to give me
an overview of the day.


51
00:02:01.955 --> 00:02:04.858 line:-1 position:50%
At 9:30, the Calendar widget
may tell the system


52
00:02:04,858 --> 00:02:07,361 line:-1
that I have a meeting
coming up at 10,


53
00:02:07,361 --> 00:02:11,164 line:-1
so my stack might rotate
to Calendar.


54
00:02:11.164 --> 00:02:12.532 line:-1 position:50%
In the afternoon,


55
00:02:12,532 --> 00:02:15,302 line:-1
one of my reminders
has a due date of 3:00 p.m.,


56
00:02:15.302 --> 00:02:16.603 line:-1 position:50%
so the widget
might tell the stack


57
00:02:16,603 --> 00:02:18,972 line:-1
to rotate to Reminders.


58
00:02:18.972 --> 00:02:20.640 line:-1 position:50%
And in the evening,
the Weather widget


59
00:02:20.640 --> 00:02:23.143 line:-1 position:50%
might tell the system
to show me the weather again


60
00:02:23,143 --> 00:02:24,911 line:-1
because it just started raining,


61
00:02:24,911 --> 00:02:28,582 line:-1
so I know to take an umbrella
if I go out for dinner.


62
00:02:28,582 --> 00:02:32,185 position:50%
iOS 15 introduces a new feature
called Widget Suggestions,


63
00:02:32,185 --> 00:02:34,788 line:0
a brand-new way for users
to discover your widget


64
00:02:34,788 --> 00:02:38,458 position:50%
and receive proactive
and relevant information.


65
00:02:38.458 --> 00:02:40.961 line:-1 position:50%
For Smart Stacks with
Widget Suggestions enabled,


66
00:02:40,961 --> 00:02:43,764 line:-1
the system can insert
a new widget into a stack


67
00:02:43.764 --> 00:02:46.400 line:-1 position:50%
that doesn’t already contain it.


68
00:02:46,400 --> 00:02:50,737 line:-1
The system can do this given an
explicit donation from your app.


69
00:02:50.737 --> 00:02:52.506 line:-1 position:50%
And like with Smart Rotate,


70
00:02:52.506 --> 00:02:54.875 line:-1 position:50%
the system can also
make a Widget Suggestion


71
00:02:54.875 --> 00:02:59.079 line:-1 position:50%
by learning the user’s
behavioral patterns in your app.


72
00:02:59.079 --> 00:03:02.582 line:-1 position:50%
With Widget Suggestions,
if I only had a Weather widget


73
00:03:02,582 --> 00:03:04,451 line:-1
and a Reminders widget
in my stack,


74
00:03:04,451 --> 00:03:06,787 line:-1
I would still see
Smart Rotations to these widgets


75
00:03:06.787 --> 00:03:09.022 line:-1 position:50%
throughout the day.


76
00:03:09,022 --> 00:03:10,857 line:-1
But since I have
that meeting at 10:00,


77
00:03:10.857 --> 00:03:13.360 line:-1 position:50%
and I don’t have
the Calendar widget in my stack,


78
00:03:13,360 --> 00:03:15,162 line:-1
the Calendar app
may tell the system


79
00:03:15.162 --> 00:03:18.231 line:-1 position:50%
to proactively insert the widget
into my stack at 9:30


80
00:03:18,231 --> 00:03:20,534 line:-1
so I don’t forget.


81
00:03:20.534 --> 00:03:22.536 line:-1 position:50%
After the widget
is no longer relevant,


82
00:03:22,536 --> 00:03:25,205 line:-1
the system will remove it
from my stack.


83
00:03:25,205 --> 00:03:27,140 line:-1
When I finish
my evening workout,


84
00:03:27.140 --> 00:03:29.476 line:-1 position:50%
the system might show me
the Fitness widget


85
00:03:29,476 --> 00:03:31,545 line:-1
so I can get a quick summary
of my day’s progress


86
00:03:31.545 --> 00:03:33.447 line:-1 position:50%
in closing my rings.


87
00:03:33.447 --> 00:03:35.615 line:-1 position:50%
And afterward,
the stack will again return


88
00:03:35,615 --> 00:03:37,951 line:-1
to its original state.


89
00:03:37,951 --> 00:03:40,787 line:-1
Since apps tell the system
to temporarily insert widgets


90
00:03:40.787 --> 00:03:41.922 line:-1 position:50%
when they’re useful,


91
00:03:41.922 --> 00:03:43.557 line:-1 position:50%
they can help users
discover widgets


92
00:03:43.557 --> 00:03:45.692 line:-1 position:50%
that they may not
even know existed.


93
00:03:45.692 --> 00:03:47.928 line:-1 position:50%
Now let’s see how you can adopt
both Smart Rotate


94
00:03:47.928 --> 00:03:50.564 line:-1 position:50%
and Widget Suggestions
using the available APIs


95
00:03:50,564 --> 00:03:53,433 line:-1
to donate relevant signals
to the system.


96
00:03:53.433 --> 00:03:55.602 line:-1 position:50%
When donating,
you should consider


97
00:03:55,602 --> 00:03:58,105 line:-1
all the possible information
your widget can show


98
00:03:58,105 --> 00:04:00,774 line:-1
and determine which types are
more suitable for a suggestion


99
00:04:00,774 --> 00:04:02,642 line:-1
than others.


100
00:04:02,642 --> 00:04:04,878 line:-1
The end goal when choosing
how to make donations


101
00:04:04.878 --> 00:04:06.646 line:-1 position:50%
to the system
is to provide


102
00:04:06,646 --> 00:04:10,517 line:-1
timely, glanceable information
with obvious value to the user,


103
00:04:10,517 --> 00:04:12,719 line:-1
so you should consider
highlighting situations


104
00:04:12.719 --> 00:04:15.622 line:-1 position:50%
that users may find
more interesting than others.


105
00:04:15,622 --> 00:04:17,557 position:50%
A weather widget,
for example,


106
00:04:17,557 --> 00:04:20,127 position:50%
could consider imminent rainfall
to be a situation


107
00:04:20,127 --> 00:04:23,163 position:50%
suitable for suggestion
as opposed to,


108
00:04:23,163 --> 00:04:25,999 position:50%
say, a point in time where
only the temperature has changed


109
00:04:25,999 --> 00:04:27,567 line:0
by an unremarkable amount.


110
00:04:27,567 --> 00:04:30,170 line:-1
You can adopt Smart Rotate
and Widget Suggestions


111
00:04:30,170 --> 00:04:33,140 line:-1
for your widgets
in three separate ways.


112
00:04:33,140 --> 00:04:36,176 line:-1
First, your app can donate
an INRelevantShortcut


113
00:04:36,176 --> 00:04:37,911 line:-1
to tell the system
when it should create


114
00:04:37.911 --> 00:04:40.847 line:-1 position:50%
a Widget Suggestion
for one of your widgets.


115
00:04:40,847 --> 00:04:43,683 line:-1
Second, your widget can
provide relevance scores


116
00:04:43,683 --> 00:04:45,085 line:-1
through
TimelineEntryRelevance


117
00:04:45.085 --> 00:04:49.089 line:-1 position:50%
to enable Smart Rotations
when the widget is in a stack.


118
00:04:49,089 --> 00:04:51,224 position:50%
And third, if your widget
is configurable,


119
00:04:51,224 --> 00:04:53,760 position:50%
when your app donates
the configuration intent


120
00:04:53,760 --> 00:04:55,295 line:0
using INInteraction,


121
00:04:55,295 --> 00:04:58,131 position:50%
the system can learn
the user’s behavioral patterns


122
00:04:58,131 --> 00:04:59,232 position:50%
to promote your widget


123
00:04:59,232 --> 00:05:03,503 line:0
through both Smart Rotations
and Widget Suggestions.


124
00:05:03,503 --> 00:05:04,604 line:-1
Each of these APIs


125
00:05:04.604 --> 00:05:07.407 line:-1 position:50%
enhances your widget’s presence
in powerful ways


126
00:05:07.407 --> 00:05:09.009 line:-1 position:50%
but they all work
a bit differently,


127
00:05:09.009 --> 00:05:11.044 line:-1 position:50%
so let’s break it down.


128
00:05:11,044 --> 00:05:13,046 line:-1
Let’s start with donating
INRelevantShortcuts


129
00:05:13,046 --> 00:05:15,715 line:-1
for Widget Suggestions.


130
00:05:15,715 --> 00:05:18,752 line:-1
Whether you use an intent
to configure your widget or not,


131
00:05:18,752 --> 00:05:21,388 line:-1
when your app becomes aware
of a highly relevant situation


132
00:05:21,388 --> 00:05:26,493 line:-1
to show your widget to the user,
donating an INRelevantShortcut


133
00:05:26.493 --> 00:05:29.396 line:-1 position:50%
allows the system to proactively
insert your widget


134
00:05:29.396 --> 00:05:31.865 line:-1 position:50%
into one of the user’s stacks
if they don’t already


135
00:05:31,865 --> 00:05:34,801 line:-1
have your widget
on their Home screen.


136
00:05:34.801 --> 00:05:36.303 line:-1 position:50%
A relevant shortcut can either


137
00:05:36.303 --> 00:05:38.738 line:-1 position:50%
specify a period of time
that it’s relevant


138
00:05:38,738 --> 00:05:41,208 line:-1
or have the system determine
when to insert the widget


139
00:05:41,208 --> 00:05:44,244 line:-1
based on the user’s
behavioral patterns.


140
00:05:44,244 --> 00:05:46,780 line:-1
INRelevantShortcut
supports both static


141
00:05:46.780 --> 00:05:49.382 line:-1 position:50%
and intent-configured widgets
but the donation


142
00:05:49.382 --> 00:05:52.219 line:-1 position:50%
will look a little different
for each configuration type,


143
00:05:52.219 --> 00:05:55.789 line:-1 position:50%
so let’s take a look at
how to adopt for both types.


144
00:05:55.789 --> 00:05:58.158 line:-1 position:50%
If your widget supports
StaticConfiguration,


145
00:05:58.158 --> 00:06:00.093 line:-1 position:50%
simply create a new
INRelevantShortcut


146
00:06:00.093 --> 00:06:01.661 line:-1 position:50%
without an intent


147
00:06:01,661 --> 00:06:05,865 line:-1
and set the widgetKind property
to the widget’s kind string.


148
00:06:05.865 --> 00:06:10.737 line:-1 position:50%
This tells the system which of
your app’s widgets to suggest.


149
00:06:10.737 --> 00:06:13.440 line:-1 position:50%
Then, optionally set the
relevanceProviders property


150
00:06:13.440 --> 00:06:16.142 line:-1 position:50%
to an array of
INRelevanceProviders.


151
00:06:16.142 --> 00:06:19.179 line:-1 position:50%
This tells the system
when to suggest your widget.


152
00:06:19.179 --> 00:06:22.215 line:-1 position:50%
I’ll explain this
in more detail in a bit.


153
00:06:22.215 --> 00:06:24.684 line:-1 position:50%
If your widget supports
IntentConfiguration,


154
00:06:24.684 --> 00:06:27.020 line:-1 position:50%
create an instance of the intent
used for configuration


155
00:06:27,020 --> 00:06:29,556 line:-1
with the necessary parameters.


156
00:06:29.556 --> 00:06:31.424 line:-1 position:50%
Then create
the INRelevantShortcut


157
00:06:31,424 --> 00:06:34,828 line:-1
by passing in the intent
as an INShortcut.


158
00:06:34,828 --> 00:06:36,129 line:-1
And of course,


159
00:06:36.129 --> 00:06:38.865 line:-1 position:50%
set the widgetKind and
relevanceProviders properties


160
00:06:38.865 --> 00:06:41.001 line:-1 position:50%
just as you would
for a static widget.


161
00:06:41.001 --> 00:06:42.535 line:-1 position:50%
To donate a relevant shortcut,


162
00:06:42,535 --> 00:06:44,638 line:-1
include it in an array
of relevant shortcuts


163
00:06:44.638 --> 00:06:48.108 line:-1 position:50%
to set in the default
INRelevantShortcutStore.


164
00:06:48.108 --> 00:06:50.310 line:-1 position:50%
To update the donated shortcuts,


165
00:06:50.310 --> 00:06:53.079 line:-1 position:50%
you can replace the array of
relevant shortcuts in the store


166
00:06:53,079 --> 00:06:54,614 line:-1
to a new array.


167
00:06:54,614 --> 00:06:56,249 line:-1
This means that
you can invalidate


168
00:06:56.249 --> 00:06:58.151 line:-1 position:50%
a previously donated
relevant shortcut


169
00:06:58,151 --> 00:07:00,687 line:-1
by omitting it in the new array.


170
00:07:00,687 --> 00:07:03,690 line:0
And donating a relevant shortcut
that contains an intent


171
00:07:03,690 --> 00:07:06,960 position:50%
can also surface the intent
on the Siri watch face.


172
00:07:06,960 --> 00:07:09,663 line:-1
To tell the system
when it can insert your widget,


173
00:07:09,663 --> 00:07:11,598 line:-1
set an array
of INRelevanceProviders


174
00:07:11,598 --> 00:07:13,466 line:-1
on your relevant shortcut.


175
00:07:13.466 --> 00:07:15.402 line:-1 position:50%
There are two options here.


176
00:07:15,402 --> 00:07:18,104 line:-1
First, you can use
INDateRelevanceProvider


177
00:07:18,104 --> 00:07:19,706 line:-1
to supply start and end dates


178
00:07:19.706 --> 00:07:22.375 line:-1 position:50%
for a fixed, known time period
of relevance,


179
00:07:22,375 --> 00:07:25,745 line:-1
such as an upcoming event
or breaking news.


180
00:07:25.745 --> 00:07:27.781 line:-1 position:50%
You can even use
multiple providers


181
00:07:27.781 --> 00:07:31.084 line:-1 position:50%
to specify more than one
relevant time period.


182
00:07:31.084 --> 00:07:33.620 line:-1 position:50%
Second, you can also
choose to supply


183
00:07:33.620 --> 00:07:36.456 line:-1 position:50%
an empty array of relevance
providers to tell the system


184
00:07:36,456 --> 00:07:38,325 line:-1
that your widget
has something new to show,


185
00:07:38.325 --> 00:07:41.094 line:-1 position:50%
and the system will choose
a time to suggest the widget


186
00:07:41.094 --> 00:07:45.065 line:-1 position:50%
based on when the user
typically uses your app.


187
00:07:45,065 --> 00:07:48,168 line:-1
All other relevance providers
support INRelevantShortcuts


188
00:07:48.168 --> 00:07:49.402 line:-1 position:50%
for Siri watch face


189
00:07:49,402 --> 00:07:52,939 line:-1
and are not supported
by Widget Suggestions.


190
00:07:52.939 --> 00:07:55.442 line:-1 position:50%
Now I’ll walk you through
what an adoption might look like


191
00:07:55,442 --> 00:07:58,178 line:-1
using an example app.


192
00:07:58.178 --> 00:07:59.813 line:-1 position:50%
We built an app called Cards


193
00:07:59.813 --> 00:08:01.715 line:-1 position:50%
that lets you view
the transactions and balances


194
00:08:01.715 --> 00:08:03.383 line:-1 position:50%
on all of your credit cards


195
00:08:03.383 --> 00:08:06.653 line:-1 position:50%
and includes a widget
that shows recent purchases.


196
00:08:06.653 --> 00:08:08.688 line:-1 position:50%
Let’s see how we can
enable Widget Suggestions


197
00:08:08.688 --> 00:08:10.223 line:-1 position:50%
for the Recent Purchases widget


198
00:08:10.223 --> 00:08:13.426 line:-1 position:50%
by donating INRelevantShortcuts
in our app.


199
00:08:13,426 --> 00:08:15,562 line:-1
We want to suggest the widget
after a recent purchase


200
00:08:15.562 --> 00:08:18.431 line:-1 position:50%
has just been made
on one of our cards.


201
00:08:18,431 --> 00:08:21,000 line:-1
Since the widget is configured
with an intent,


202
00:08:21.000 --> 00:08:23.336 line:-1 position:50%
in order to allow
Widget Suggestions,


203
00:08:23.336 --> 00:08:25.338 line:-1 position:50%
we’re first going to make sure
that our intent


204
00:08:25.338 --> 00:08:28.875 line:-1 position:50%
supports donations
in our intent definition file.


205
00:08:28.875 --> 00:08:32.278 line:-1 position:50%
Here’s our intent editor for our
ViewRecentPurchases intent,


206
00:08:32,278 --> 00:08:34,514 line:-1
which tells our widget
which credit card to show


207
00:08:34.514 --> 00:08:38.318 line:-1 position:50%
and which merchant category
to filter the purchases by.


208
00:08:38,318 --> 00:08:39,986 line:-1
We want to make sure that


209
00:08:39.986 --> 00:08:43.823 line:-1 position:50%
"Intent is eligible for Siri
Suggestions" is checked.


210
00:08:43,823 --> 00:08:46,559 line:-1
This enables suggestions for
our widget on the Home screen


211
00:08:46,559 --> 00:08:49,195 line:-1
as well as suggestions
in other places around iOS


212
00:08:49,195 --> 00:08:51,064 line:-1
if we choose to donate them,


213
00:08:51,064 --> 00:08:54,200 line:-1
but we’ll get to that later
with INInteractions.


214
00:08:54.200 --> 00:08:56.803 line:-1 position:50%
Then we need to create
a parameter combination


215
00:08:56.803 --> 00:09:00.573 line:-1 position:50%
that includes the necessary
parameters to form the intent.


216
00:09:00.573 --> 00:09:02.342 line:-1 position:50%
Since we need both
the credit card


217
00:09:02,342 --> 00:09:05,211 line:-1
and the merchant category
to configure our widget,


218
00:09:05,211 --> 00:09:07,380 line:-1
we’ll create
a supported combination


219
00:09:07,380 --> 00:09:11,284 line:-1
with both card
and category parameters.


220
00:09:11.284 --> 00:09:14.621 line:-1 position:50%
Now we can create
the intent in our code.


221
00:09:14.621 --> 00:09:18.057 line:-1 position:50%
In this code, our app was
just notified that the user


222
00:09:18,057 --> 00:09:20,460 line:-1
has just made a purchase.


223
00:09:20.460 --> 00:09:21.828 line:-1 position:50%
To make a donation,


224
00:09:21.828 --> 00:09:25.398 line:-1 position:50%
we start by creating an empty
array of INRelevantShortcuts,


225
00:09:25.398 --> 00:09:29.102 line:-1 position:50%
in case we want
to donate multiple shortcuts.


226
00:09:29,102 --> 00:09:31,237 line:-1
We initialize the intent
that we used to configure


227
00:09:31,237 --> 00:09:32,872 line:-1
the Recent Purchases widget,


228
00:09:32,872 --> 00:09:36,176 line:-1
and set any parameters
that we might need.


229
00:09:36.176 --> 00:09:38.912 line:-1 position:50%
Here, we want to set
the card parameter on the intent


230
00:09:38,912 --> 00:09:41,448 line:-1
to a card object
referring to the card


231
00:09:41,448 --> 00:09:43,516 line:-1
that the recent purchase
was made on,


232
00:09:43.516 --> 00:09:45.351 line:-1 position:50%
and set the category to all


233
00:09:45,351 --> 00:09:49,355 line:-1
to have the widget show
all purchases on that card.


234
00:09:49,355 --> 00:09:52,358 line:-1
Then we create an INShortcut
with the intent


235
00:09:52,358 --> 00:09:55,995 line:-1
and create an INRelevantShortcut
with it.


236
00:09:55,995 --> 00:09:58,731 line:-1
We set the shortcut role to be
the information shortcut role,


237
00:09:58,731 --> 00:10:01,100 line:-1
since the user views information
in the widget,


238
00:10:01.100 --> 00:10:04.070 line:-1 position:50%
and set the widgetKind.


239
00:10:04,070 --> 00:10:06,239 position:50%
We provide
an INDateRelevanceProvider


240
00:10:06,239 --> 00:10:09,776 line:0
starting now and ending in
30 minutes, or 1800 seconds,


241
00:10:09,776 --> 00:10:11,411 position:50%
so that the system can remove it


242
00:10:11,411 --> 00:10:15,515 line:0
30 minutes right after
the purchase was made.


243
00:10:15,515 --> 00:10:20,320 line:0
Then we add the shortcut to
our array of relevantShortcuts.


244
00:10:20.320 --> 00:10:22.155 line:-1 position:50%
Finally, we donate the shortcut


245
00:10:22,155 --> 00:10:23,957 line:-1
by setting our
relevantShortcuts array


246
00:10:23.957 --> 00:10:26.392 line:-1 position:50%
in the default
INRelevantShortcutStore


247
00:10:26.392 --> 00:10:30.563 line:-1 position:50%
and handle any errors
in the completion handler.


248
00:10:30,563 --> 00:10:33,166 line:-1
Now whenever a recent
purchase is made,


249
00:10:33,166 --> 00:10:34,934 line:-1
the system can make
a Widget Suggestion


250
00:10:34,934 --> 00:10:39,005 line:-1
with the widget by proactively
inserting it into a Smart Stack.


251
00:10:39.005 --> 00:10:42.942 line:-1 position:50%
Now let’s talk about
TimelineEntryRelevance.


252
00:10:42.942 --> 00:10:45.378 line:-1 position:50%
When your widget provides
timelines to WidgetKit,


253
00:10:45,378 --> 00:10:47,347 line:-1
you can specify
the relevance of your widget


254
00:10:47,347 --> 00:10:49,249 line:-1
by providing
TimelineEntryRelevance


255
00:10:49.249 --> 00:10:52.852 line:-1 position:50%
in each timeline entry.


256
00:10:52,852 --> 00:10:54,954 line:-1
Annotating an entry
with relevance indicates


257
00:10:54,954 --> 00:10:57,423 line:-1
how worthy the widget is
of a Smart Rotation


258
00:10:57.423 --> 00:10:59.526 line:-1 position:50%
at the time of the entry.


259
00:10:59.526 --> 00:11:02.762 line:-1 position:50%
This worthiness of rotation
is relative to all other entries


260
00:11:02.762 --> 00:11:04.931 line:-1 position:50%
in the timelines
that the widget provides,


261
00:11:04,931 --> 00:11:06,866 line:-1
so you should determine
which entries


262
00:11:06.866 --> 00:11:10.537 line:-1 position:50%
may be more relevant
to the user than others.


263
00:11:10.537 --> 00:11:13.039 line:-1 position:50%
TimelineEntryRelevance
is an optional struct property


264
00:11:13,039 --> 00:11:17,343 line:-1
on TimelineEntry, along with
the date of the entry.


265
00:11:17.343 --> 00:11:21.548 line:-1 position:50%
The relevance struct
contains a score and duration.


266
00:11:21.548 --> 00:11:22.916 line:-1 position:50%
The struct’s float score
represents


267
00:11:22,916 --> 00:11:26,019 line:-1
how relevant this entry is
compared to others.


268
00:11:26,019 --> 00:11:28,655 line:-1
The higher the score,
the more likely the system is


269
00:11:28,655 --> 00:11:31,491 line:-1
to rotate to the widget.


270
00:11:31.491 --> 00:11:33.693 line:-1 position:50%
When determining
what scores to return,


271
00:11:33,693 --> 00:11:36,229 line:-1
know that positive scores
indicate timeline entries


272
00:11:36,229 --> 00:11:39,432 line:-1
that are eligible
for Smart Rotate.


273
00:11:39.432 --> 00:11:41.234 line:-1 position:50%
A score of zero tells the system


274
00:11:41,234 --> 00:11:43,369 line:-1
that the widget
should not be rotated to,


275
00:11:43,369 --> 00:11:44,938 line:-1
such as when the widget
doesn’t have


276
00:11:44,938 --> 00:11:47,373 line:-1
any information to show
and rotating to the widget


277
00:11:47.373 --> 00:11:50.443 line:-1 position:50%
would not be a positive
experience for the user.


278
00:11:50,443 --> 00:11:52,745 line:-1
Remember that the significance
of any provided score


279
00:11:52.745 --> 00:11:55.782 line:-1 position:50%
is relative to others
in the widget’s timelines.


280
00:11:55.782 --> 00:11:58.885 line:-1 position:50%
Whatever scaling you decide to
use for your relevance scores,


281
00:11:58.885 --> 00:12:00.420 line:-1 position:50%
just make sure
that it’s consistent


282
00:12:00.420 --> 00:12:02.555 line:-1 position:50%
across the timelines you return.


283
00:12:02,555 --> 00:12:06,192 line:-1
We’ll go over an example
in a just a bit.


284
00:12:06,192 --> 00:12:08,261 line:-1
The duration
in the relevance struct


285
00:12:08.261 --> 00:12:11.731 line:-1 position:50%
specifies how long
the relevance score is valid.


286
00:12:11,731 --> 00:12:14,701 line:-1
The system uses this,
along with the entry’s date,


287
00:12:14,701 --> 00:12:16,269 line:-1
to determine
the valid timeframe


288
00:12:16.269 --> 00:12:19.172 line:-1 position:50%
in which to rotate the stack
to the widget.


289
00:12:19,172 --> 00:12:21,140 line:-1
After the duration passes,


290
00:12:21.140 --> 00:12:22.809 line:-1 position:50%
the system will treat the score
as zero


291
00:12:22.809 --> 00:12:26.279 line:-1 position:50%
until relevance is provided
again in a future entry.


292
00:12:26.279 --> 00:12:29.115 line:-1 position:50%
You can specify a duration
of zero to keep the score valid


293
00:12:29.115 --> 00:12:31.884 line:-1 position:50%
until the next entry
that provides relevance.


294
00:12:31.884 --> 00:12:34.954 line:-1 position:50%
Let’s take a look
at what this looks like in code.


295
00:12:34,954 --> 00:12:38,157 line:-1
Here we have our
CardRecentPurchasesEntry struct,


296
00:12:38,157 --> 00:12:41,227 line:-1
which conforms
to the TimelineEntry protocol.


297
00:12:41,227 --> 00:12:44,564 line:-1
Since the protocol requires
an optional relevance property,


298
00:12:44,564 --> 00:12:48,134 line:-1
we can declare the relevance
property in our struct.


299
00:12:48.134 --> 00:12:50.036 line:-1 position:50%
Now when we create
the timeline entry,


300
00:12:50,036 --> 00:12:52,672 line:-1
we can attach a
TimelineEntryRelevance instance


301
00:12:52,672 --> 00:12:55,274 line:-1
to our entries
when we create our timeline.


302
00:12:55,274 --> 00:12:57,977 line:-1
Now let’s work through
what a timeline might look like


303
00:12:57.977 --> 00:13:00.446 line:-1 position:50%
for the Recent Purchases widget
and see some examples


304
00:13:00.446 --> 00:13:04.050 line:-1 position:50%
for scores we can provide
for our timeline relevance.


305
00:13:04,050 --> 00:13:05,385 line:-1
Here’s an example timeline


306
00:13:05,385 --> 00:13:09,355 line:-1
that the Recent Purchases widget
might return throughout a day.


307
00:13:09,355 --> 00:13:11,290 line:-1
We might think, perhaps,
that a user cares


308
00:13:11.290 --> 00:13:14.661 line:-1 position:50%
more about purchases
that involve higher spending.


309
00:13:14,661 --> 00:13:16,729 line:-1
We can then make our
scores for our purchases


310
00:13:16.729 --> 00:13:19.699 line:-1 position:50%
scale linearly
with the amount spent.


311
00:13:19.699 --> 00:13:23.670 line:-1 position:50%
Let’s leave the relevance
durations as 0 for now.


312
00:13:23,670 --> 00:13:26,606 line:-1
At 8:15, we would return
a score of 0,


313
00:13:26,606 --> 00:13:29,108 line:-1
since there’s no purchases
to show.


314
00:13:29.108 --> 00:13:32.712 line:-1 position:50%
At 9:41, our
52 dollar and 60 cent purchase


315
00:13:32,712 --> 00:13:36,449 line:-1
means that our score
would be 52.6, and so on.


316
00:13:36,449 --> 00:13:39,385 line:0
Plotting it on a graph,
we see that our shopping spree


317
00:13:39,385 --> 00:13:42,422 position:50%
has a relatively high score
compared to other scores,


318
00:13:42,422 --> 00:13:44,891 position:50%
so the system will prioritize
rotating to our widget


319
00:13:44,891 --> 00:13:48,294 line:0
more with this entry
than with other entries.


320
00:13:48,294 --> 00:13:50,530 line:-1
The other entries
still have positive scores,


321
00:13:50,530 --> 00:13:53,733 line:-1
so the system could still rotate
to the widget at those times,


322
00:13:53.733 --> 00:13:56.536 line:-1 position:50%
though with a lower priority.


323
00:13:56.536 --> 00:13:58.938 line:-1 position:50%
And since we set
our durations to 0,


324
00:13:58.938 --> 00:14:01.774 line:-1 position:50%
the relevance scores stay valid
until the next timeline entry


325
00:14:01.774 --> 00:14:03.309 line:-1 position:50%
with a relevance update.


326
00:14:03.309 --> 00:14:04.877 line:-1 position:50%
We could just as well
have chosen


327
00:14:04.877 --> 00:14:06.412 line:-1 position:50%
another scoring mechanism.


328
00:14:06.412 --> 00:14:08.314 line:-1 position:50%
Let’s say we return
a score of 50


329
00:14:08,314 --> 00:14:10,283 line:-1
if the purchase
is above 50 dollars,


330
00:14:10.283 --> 00:14:12.919 line:-1 position:50%
and 1 for purchases below.


331
00:14:12,919 --> 00:14:17,190 line:-1
Once again, we return 0
if there’s no purchases at all.


332
00:14:17,190 --> 00:14:18,825 line:-1
For our grocery
and shopping purchases


333
00:14:18.825 --> 00:14:20.259 line:-1 position:50%
we returned 50,


334
00:14:20.259 --> 00:14:21.961 line:-1 position:50%
and for our spending
at the Soup Diner


335
00:14:21.961 --> 00:14:25.465 line:-1 position:50%
and the movie theater,
we return 1.


336
00:14:25,465 --> 00:14:26,733 line:0
With the score graph,


337
00:14:26,733 --> 00:14:29,736 position:50%
we can see that the score
rises to 50 at 9:41


338
00:14:29,736 --> 00:14:32,605 line:0
and stays there until 6:52.


339
00:14:32,605 --> 00:14:36,209 line:-1
Since 50 is the highest possible
score in our timeline,


340
00:14:36.209 --> 00:14:40.646 line:-1 position:50%
the system is most likely
to show our widget at this time.


341
00:14:40.646 --> 00:14:42.849 line:-1 position:50%
Since our widget
shows recent purchases,


342
00:14:42,849 --> 00:14:45,017 line:-1
we don’t want the system
to rotate to our widget


343
00:14:45.017 --> 00:14:47.720 line:-1 position:50%
with purchases
made a long time ago.


344
00:14:47.720 --> 00:14:50.356 line:-1 position:50%
So let’s only allow the system
to rotate to our widget


345
00:14:50,356 --> 00:14:54,227 line:-1
within the 30 minutes
after the purchase was made.


346
00:14:54.227 --> 00:14:57.263 line:-1 position:50%
To achieve this, we can use
the duration property


347
00:14:57.263 --> 00:14:58.931 line:-1 position:50%
on the relevance struct.


348
00:14:58.931 --> 00:15:01.601 line:-1 position:50%
We set a relevance duration
of 30 minutes,


349
00:15:01.601 --> 00:15:04.771 line:-1 position:50%
or 1800 seconds,
for each entry.


350
00:15:04,771 --> 00:15:07,807 line:0
By setting the duration
of relevance to be half an hour,


351
00:15:07,807 --> 00:15:09,675 position:50%
we’re telling the system
to mark the entries


352
00:15:09,675 --> 00:15:11,978 position:50%
as eligible for rotation
for half an hour,


353
00:15:11,978 --> 00:15:14,947 line:0
and then mark them as ineligible
for rotation afterward.


354
00:15:14.947 --> 00:15:16.182 line:-1 position:50%
In these examples,


355
00:15:16.182 --> 00:15:18.885 line:-1 position:50%
we’re basing our score
off of the purchase amount,


356
00:15:18,885 --> 00:15:20,019 line:-1
but really,


357
00:15:20,019 --> 00:15:23,256 line:-1
timeline relevance scores
can be whatever you like.


358
00:15:23.256 --> 00:15:25.691 line:-1 position:50%
We could have also used
which credit card it is,


359
00:15:25.691 --> 00:15:28.895 line:-1 position:50%
where the purchase was made,
when the purchase was made,


360
00:15:28.895 --> 00:15:30.730 line:-1 position:50%
or something else entirely.


361
00:15:30.730 --> 00:15:32.999 line:-1 position:50%
There’s no one right way
to do it.


362
00:15:32.999 --> 00:15:36.068 line:-1 position:50%
Now onto donating
INInteractions.


363
00:15:36,068 --> 00:15:38,905 line:-1
In your app, you can create
and donate an intent


364
00:15:38,905 --> 00:15:40,540 line:-1
used to configure your widget


365
00:15:40.540 --> 00:15:43.543 line:-1 position:50%
to enable both Smart Rotations
and Widget Suggestions


366
00:15:43.543 --> 00:15:45.845 line:-1 position:50%
through INInteractions.


367
00:15:45,845 --> 00:15:49,315 line:-1
An app donates an INInteraction
every time the user


368
00:15:49.315 --> 00:15:52.218 line:-1 position:50%
views information in the app
corresponding to information


369
00:15:52,218 --> 00:15:55,021 line:-1
that the widget shows.


370
00:15:55.021 --> 00:15:56.789 line:-1 position:50%
Each donation is a data point


371
00:15:56,789 --> 00:15:58,691 line:-1
for the system’s
behavioral model


372
00:15:58.691 --> 00:16:00.493 line:-1 position:50%
that learns when the user
tends to view


373
00:16:00.493 --> 00:16:03.396 line:-1 position:50%
information in the app.


374
00:16:03,396 --> 00:16:05,631 line:-1
Whenever the model
predicts that the user


375
00:16:05,631 --> 00:16:07,900 line:-1
may want to perform
the interaction again,


376
00:16:07.900 --> 00:16:11.337 line:-1 position:50%
the system creates
a suggestion for the intent.


377
00:16:11,337 --> 00:16:13,005 position:50%
And as long as
the donated intent


378
00:16:13,005 --> 00:16:15,608 line:0
is the same one
used to configure your widget,


379
00:16:15,608 --> 00:16:18,477 line:-1
the system will automatically
produce both Smart Rotations


380
00:16:18.477 --> 00:16:20.613 line:-1 position:50%
and Widget Suggestions
from the prediction,


381
00:16:20,613 --> 00:16:23,015 line:-1
along with other suggestions
around the system.


382
00:16:23,015 --> 00:16:25,084 line:-1
To get going
with donating INInteraction


383
00:16:25.084 --> 00:16:26.652 line:-1 position:50%
in the Cards project,


384
00:16:26.652 --> 00:16:29.689 line:-1 position:50%
just as with donating
INRelevantShortcuts,


385
00:16:29.689 --> 00:16:31.457 line:-1 position:50%
we want to make sure
that our intent


386
00:16:31.457 --> 00:16:33.459 line:-1 position:50%
is eligible for suggestions,


387
00:16:33.459 --> 00:16:35.461 line:-1 position:50%
and create
a supported combination


388
00:16:35.461 --> 00:16:38.598 line:-1 position:50%
with the parameters necessary
to configure our widget.


389
00:16:38.598 --> 00:16:40.933 line:-1 position:50%
Here, also make sure
to eventually design


390
00:16:40.933 --> 00:16:43.536 line:-1 position:50%
the suggestion UI for
when your donation shows up


391
00:16:43.536 --> 00:16:46.372 line:-1 position:50%
in other locations
in the system.


392
00:16:46,372 --> 00:16:48,641 line:-1
In the Cards app,
whenever our user


393
00:16:48,641 --> 00:16:51,244 line:-1
views all of the recent
purchases for a card,


394
00:16:51,244 --> 00:16:54,080 line:-1
we can donate our widget’s
intent to let the system know


395
00:16:54.080 --> 00:16:56.749 line:-1 position:50%
that the user is currently
interested in the information


396
00:16:56.749 --> 00:16:58.951 line:-1 position:50%
that our widget shows.


397
00:16:58,951 --> 00:17:02,021 line:-1
First, we initialize our intent.


398
00:17:02.021 --> 00:17:04.090 line:-1 position:50%
We set the card parameter
to the card


399
00:17:04,090 --> 00:17:06,192 line:-1
that the user
is currently viewing,


400
00:17:06.192 --> 00:17:08.261 line:-1 position:50%
and set the category to be all,


401
00:17:08,261 --> 00:17:09,595 line:-1
since the user
is currently viewing


402
00:17:09.595 --> 00:17:13.065 line:-1 position:50%
all transactions for this card.


403
00:17:13,065 --> 00:17:16,402 line:-1
Then we’ll wrap our intent
with an INInteraction


404
00:17:16.402 --> 00:17:18.804 line:-1 position:50%
and call the donate method.


405
00:17:18.804 --> 00:17:20.907 line:-1 position:50%
Now the system
will know that the user


406
00:17:20.907 --> 00:17:23.109 line:-1 position:50%
has just looked at the
recent purchases for this card


407
00:17:23,109 --> 00:17:24,744 line:-1
in our app.


408
00:17:24,744 --> 00:17:26,746 line:-1
After a while,
the system can learn


409
00:17:26,746 --> 00:17:28,681 line:-1
when the user tends to do this,


410
00:17:28,681 --> 00:17:33,152 line:-1
and suggest the matching widget
at the most opportune times.


411
00:17:33.152 --> 00:17:35.621 line:-1 position:50%
Not only do the INInteraction
donations you make


412
00:17:35.621 --> 00:17:38.557 line:-1 position:50%
enable Smart Rotations
and Widget Suggestions,


413
00:17:38,557 --> 00:17:40,927 line:-1
but they also allow the system
to show your intent


414
00:17:40.927 --> 00:17:43.596 line:-1 position:50%
as a Siri Suggestion
on the Lock Screen,


415
00:17:43,596 --> 00:17:47,733 line:-1
in Spotlight, and in the Siri
Shortcut Suggestions widget.


416
00:17:47.733 --> 00:17:51.771 line:-1 position:50%
This is true even if your widget
doesn’t adopt intents.


417
00:17:51,771 --> 00:17:52,838 position:50%
To learn more about


418
00:17:52,838 --> 00:17:55,241 line:0
what donating INInteractions
can do for your app


419
00:17:55,241 --> 00:17:58,711 line:0
and getting even more out of
the on-device intelligence,


420
00:17:58,711 --> 00:18:00,279 line:0
be sure to check out the talk,


421
00:18:00,279 --> 00:18:04,016 position:50%
“Donate intents and expand
your app’s presence.”


422
00:18:04.016 --> 00:18:07.486 line:-1 position:50%
So, INRelevantShortcut,
TimelineEntryRelevance,


423
00:18:07,486 --> 00:18:10,723 line:-1
and INInteraction are the three
ways in which you can support


424
00:18:10.723 --> 00:18:14.160 line:-1 position:50%
Smart Rotate and Widget
Suggestions for your widgets.


425
00:18:14.160 --> 00:18:16.228 line:-1 position:50%
Due to other donations
in the system,


426
00:18:16.228 --> 00:18:18.097 line:-1 position:50%
along with performance
considerations,


427
00:18:18,097 --> 00:18:20,132 line:-1
a donation is not a guarantee


428
00:18:20.132 --> 00:18:22.101 line:-1 position:50%
that your widget
will be surfaced.


429
00:18:22.101 --> 00:18:25.104 line:-1 position:50%
But by adopting these APIs
in a cohesive manner,


430
00:18:25.104 --> 00:18:27.139 line:-1 position:50%
you can work with the system
to give your widget


431
00:18:27.139 --> 00:18:30.042 line:-1 position:50%
the best shot possible
at being shown.


432
00:18:30,042 --> 00:18:32,645 line:-1
While developing,
it may also be helpful to bypass


433
00:18:32.645 --> 00:18:35.214 line:-1 position:50%
the system’s limitations
for surfacing widgets


434
00:18:35.214 --> 00:18:37.450 line:-1 position:50%
by turning on WidgetKit
Developer Mode,


435
00:18:37,450 --> 00:18:40,720 line:-1
found in Developer Settings
in the Settings app.


436
00:18:40.720 --> 00:18:43.322 line:-1 position:50%
So to wrap up,
Widget Suggestions


437
00:18:43.322 --> 00:18:45.024 line:-1 position:50%
are a brand-new way
for your widgets


438
00:18:45,024 --> 00:18:47,760 line:-1
to proactively show up
right when your users need them,


439
00:18:47.760 --> 00:18:50.763 line:-1 position:50%
who may not even
know they existed.


440
00:18:50,763 --> 00:18:53,733 line:-1
And for your widgets
already added to a stack,


441
00:18:53,733 --> 00:18:55,735 line:-1
Smart Rotate
lets them be a reliable


442
00:18:55.735 --> 00:18:58.571 line:-1 position:50%
and dependable
part of your user’s day.


443
00:18:58.571 --> 00:18:59.739 line:-1 position:50%
By working with the system


444
00:18:59.739 --> 00:19:02.208 line:-1 position:50%
and leveraging
on-device intelligence,


445
00:19:02.208 --> 00:19:04.910 line:-1 position:50%
these features allow your widget
to be more discoverable


446
00:19:04.910 --> 00:19:06.145 line:-1 position:50%
and more proactive,


447
00:19:06,145 --> 00:19:09,181 line:-1
and contribute to an intelligent
Home screen experience.


448
00:19:09,181 --> 00:19:10,883 line:-1
We’re incredibly excited to see


449
00:19:10.883 --> 00:19:13.386 line:-1 position:50%
how you add intelligence
to your widgets.


450
00:19:13.386 --> 00:19:16.088 line:-1 position:50%
Thank you
and have a wonderful WWDC.


451
00:19:16,088 --> 00:19:17,590 line:-1
[HARMONICA SCALE]


452
00:19:17,590 --> 00:19:20,593 position:90% line:0 size:2%
♪

