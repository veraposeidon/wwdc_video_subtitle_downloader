2
00:00:00.000 --> 00:00:01.869 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:01,869 --> 00:00:05,472 line:-1
♪ Bass music playing ♪


4
00:00:05.472 --> 00:00:07.140 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,140 --> 00:00:09,443 line:0 position:90% size:2%
♪


6
00:00:09,443 --> 00:00:12,312 line:-1
Ross LeBeau: Hi,
and welcome to WWDC21.


7
00:00:12,312 --> 00:00:13,413 line:-1
My name is Ross LeBeau,


8
00:00:13.413 --> 00:00:16.183 line:-1 position:50%
and I'm an engineer
on the StoreKit team.


9
00:00:16,183 --> 00:00:18,318 line:-1
Today, we're going to be
talking about StoreKit,


10
00:00:18,318 --> 00:00:20,254 line:-1
and this is actually
one of three sessions


11
00:00:20.254 --> 00:00:22.456 line:-1 position:50%
designed to help you
implement client-side code,


12
00:00:22,456 --> 00:00:24,558 line:-1
build out your server
for in-app purchase,


13
00:00:24,558 --> 00:00:27,127 line:-1
and support your customers
and handle refunds.


14
00:00:27,127 --> 00:00:29,029 line:-1
This session is Meet StoreKit 2,


15
00:00:29.029 --> 00:00:33.700 line:-1 position:50%
and you can find the other
two sessions here at WWDC21.


16
00:00:33.700 --> 00:00:35.535 line:-1 position:50%
This session will focus on
client-side features


17
00:00:35.535 --> 00:00:36.870 line:-1 position:50%
and implementation.


18
00:00:36.870 --> 00:00:39.706 line:-1 position:50%
So let's get started!


19
00:00:39.706 --> 00:00:41.975 line:-1 position:50%
Since StoreKit was
introduced in iOS 3,


20
00:00:41,975 --> 00:00:44,878 line:-1
it's created great opportunities
for you and your businesses.


21
00:00:44.878 --> 00:00:47.447 line:-1 position:50%
Today, it exists on
four Apple platforms


22
00:00:47,447 --> 00:00:49,917 line:-1
and supports everything
from games to news apps,


23
00:00:49.917 --> 00:00:52.185 line:-1 position:50%
indie titles
to international hits.


24
00:00:52.185 --> 00:00:54.721 line:-1 position:50%
Over the years,
we've introduced great features


25
00:00:54,721 --> 00:00:56,957 line:-1
such as offer codes,
Family Sharing,


26
00:00:56,957 --> 00:00:58,992 line:-1
and StoreKit testing in Xcode.


27
00:00:58.992 --> 00:01:02.562 line:-1 position:50%
But this year, we decided to go
back to the beginning.


28
00:01:02,562 --> 00:01:06,600 line:-1
Today, I'm excited
to introduce you to StoreKit 2!


29
00:01:06.600 --> 00:01:10.904 line:-1 position:50%
StoreKit 2 is a brand new set of
modern and flexible Swift APIs


30
00:01:10,904 --> 00:01:12,806 line:-1
for working with
In-App Purchase


31
00:01:12.806 --> 00:01:17.411 line:-1 position:50%
across iOS, macOS,
tvOS, and watchOS.


32
00:01:17.411 --> 00:01:18.979 line:-1 position:50%
We've taken a new look
at StoreKit


33
00:01:18,979 --> 00:01:21,181 line:-1
with a Swift-first mindset.


34
00:01:21.181 --> 00:01:23.417 line:-1 position:50%
We embraced some of
the newest language features,


35
00:01:23.417 --> 00:01:26.086 line:-1 position:50%
like Swift concurrency
using the async/await pattern,


36
00:01:26,086 --> 00:01:29,790 line:-1
to create simple
yet powerful APIs.


37
00:01:29.790 --> 00:01:31.258 line:-1 position:50%
We've also made
some huge updates


38
00:01:31,258 --> 00:01:33,093 line:-1
to the in-app purchase transactions,


39
00:01:33,093 --> 00:01:35,162 line:-1
making them much easier
to work with,


40
00:01:35.162 --> 00:01:39.533 line:-1 position:50%
while also providing more
information and high security.


41
00:01:39,533 --> 00:01:41,768 line:-1
And we've added
more powerful APIs


42
00:01:41.768 --> 00:01:43.804 line:-1 position:50%
specifically for subscriptions


43
00:01:43.804 --> 00:01:45.872 line:-1 position:50%
in order to give you
deeper insight that you can use


44
00:01:45.872 --> 00:01:47.908 line:-1 position:50%
to grow your business.


45
00:01:47.908 --> 00:01:50.477 line:-1 position:50%
StoreKit 2 APIs live inside
the same StoreKit framework


46
00:01:50,477 --> 00:01:52,145 line:-1
that exists today


47
00:01:52.145 --> 00:01:54.648 line:-1 position:50%
and focus on the core in-app
purchase experience


48
00:01:54.648 --> 00:01:57.451 line:-1 position:50%
rather than replacing every API.


49
00:01:57.451 --> 00:02:01.321 line:-1 position:50%
The new StoreKit 2 APIs are
comprised of five major areas:


50
00:02:01,321 --> 00:02:05,659 line:-1
Products, Purchases,
Transaction info,


51
00:02:05.659 --> 00:02:09.663 line:-1 position:50%
Transaction history,
and subscription status.


52
00:02:09,663 --> 00:02:13,033 line:-1
Today I'm going to give you an
overview of each of these areas,


53
00:02:13.033 --> 00:02:15.068 line:-1 position:50%
and my colleague Jakob
will be showing you how to use


54
00:02:15.068 --> 00:02:18.372 line:-1 position:50%
the corresponding
StoreKit 2 APIs in real code.


55
00:02:18.372 --> 00:02:21.174 line:-1 position:50%
So first, let's start with
the building blocks of StoreKit:


56
00:02:21,174 --> 00:02:24,378 line:-1
products and purchases.


57
00:02:24.378 --> 00:02:27.114 line:-1 position:50%
The StoreKit 2 product struct
is a supercharged version


58
00:02:27.114 --> 00:02:29.449 line:-1 position:50%
of the StoreKit product object
you're used to.


59
00:02:29,449 --> 00:02:31,952 line:-1
To start, we've added
additional data to it,


60
00:02:31.952 --> 00:02:33.353 line:-1 position:50%
such as the product type


61
00:02:33,353 --> 00:02:36,189 line:-1
and extended
subscription information.


62
00:02:36,189 --> 00:02:38,625 position:50%
With StoreKit 2, we're making it
easier to do things


63
00:02:38,625 --> 00:02:40,727 line:0
like find out
if the customer is eligible


64
00:02:40,727 --> 00:02:43,196 line:0
for your introductory offer.


65
00:02:43,196 --> 00:02:44,631 line:0
We're also making
StoreKit 2 products


66
00:02:44,631 --> 00:02:47,300 line:0
forward-compatible
with new features.


67
00:02:47,300 --> 00:02:49,603 line:0
We've accomplished this
by adding a wrapping type


68
00:02:49,603 --> 00:02:51,171 position:50%
called BackingValue


69
00:02:51,171 --> 00:02:53,340 position:50%
that allows you to retrieve data
contained in the product


70
00:02:53,340 --> 00:02:56,309 line:0
by subscripting the products
directly.


71
00:02:56,309 --> 00:02:58,912 position:50%
This means that if we add data
to products in the future,


72
00:02:58,912 --> 00:03:01,348 position:50%
you'll always be able
to access them in StoreKit 2,


73
00:03:01,348 --> 00:03:03,950 position:50%
even on SDKs and devices
running operating systems


74
00:03:03,950 --> 00:03:06,753 line:0
that have older versions
of StoreKit 2.


75
00:03:06.753 --> 00:03:08.522 line:-1 position:50%
This means that you can
use the latest features


76
00:03:08,522 --> 00:03:09,823 line:-1
to provide new functionality


77
00:03:09,823 --> 00:03:13,293 line:-1
to a larger section
of your customer base.


78
00:03:13.293 --> 00:03:15.729 line:-1 position:50%
With StoreKit 2, you request
products by calling


79
00:03:15,729 --> 00:03:18,698 line:-1
a static function
on the product type itself.


80
00:03:18.698 --> 00:03:21.168 line:-1 position:50%
This requests product metadata
from the App Store


81
00:03:21.168 --> 00:03:24.004 line:-1 position:50%
just like the existing
SKProductsRequest does.


82
00:03:24,004 --> 00:03:27,207 line:-1
But thanks to the new Swift
concurrency async/await pattern,


83
00:03:27,207 --> 00:03:31,945 line:-1
the StoreKit 2 product request
requires just one line of code.


84
00:03:31,945 --> 00:03:34,748 line:-1
Similarly, purchasing a product
in StoreKit 2


85
00:03:34,748 --> 00:03:37,250 line:-1
is another simple,
one-line task.


86
00:03:37.250 --> 00:03:40.087 line:-1 position:50%
Purchase is now an instance
method on the product type,


87
00:03:40.087 --> 00:03:42.355 line:-1 position:50%
meaning you can take those
products you just retrieved


88
00:03:42,355 --> 00:03:44,791 line:-1
and call purchase
directly on them.


89
00:03:44,791 --> 00:03:47,527 line:-1
Since the purchase method
also uses async/await,


90
00:03:47.527 --> 00:03:51.531 line:-1 position:50%
you get the result of your
purchase inline in your code.


91
00:03:51,531 --> 00:03:54,634 line:0
Now we know that not every
purchase is the same.


92
00:03:54,634 --> 00:03:56,436 line:0
If you want to modify
purchase behavior


93
00:03:56,436 --> 00:04:01,308 line:0
beyond the default settings,
StoreKit 2 has Purchase options.


94
00:04:01.308 --> 00:04:03.176 line:-1 position:50%
A Purchase option is an item


95
00:04:03.176 --> 00:04:06.012 line:-1 position:50%
that describes a single property
of a purchase.


96
00:04:06,012 --> 00:04:08,615 line:-1
You can compose Purchase options
into a set


97
00:04:08,615 --> 00:04:11,651 line:-1
which you pass
into the purchase method.


98
00:04:11,651 --> 00:04:13,887 line:-1
StoreKit 2 includes
purchase options for things


99
00:04:13.887 --> 00:04:16.790 line:-1 position:50%
such as quantity
and promotional offers.


100
00:04:16,790 --> 00:04:18,391 line:-1
And in StoreKit 2,
we're adding a new option


101
00:04:18.391 --> 00:04:20.594 line:-1 position:50%
called App account token.


102
00:04:20,594 --> 00:04:22,929 line:-1
The App account token
is a way for you to keep track


103
00:04:22.929 --> 00:04:24.865 line:-1 position:50%
of which of your app's
user accounts


104
00:04:24.865 --> 00:04:27.801 line:-1 position:50%
began and completed
a transaction.


105
00:04:27.801 --> 00:04:30.370 line:-1 position:50%
It’s an opaque token
that you generate


106
00:04:30,370 --> 00:04:33,507 line:-1
which you can link to accounts
that your app owns.


107
00:04:33.507 --> 00:04:35.408 line:-1 position:50%
It's easy to generate
an App account token,


108
00:04:35.408 --> 00:04:37.077 line:-1 position:50%
because the only requirement
is that it conforms


109
00:04:37,077 --> 00:04:39,312 line:-1
to the UUID format.


110
00:04:39.312 --> 00:04:41.348 line:-1 position:50%
You send up an App account token
on the purchase


111
00:04:41.348 --> 00:04:42.916 line:-1 position:50%
as a Purchase option,


112
00:04:42.916 --> 00:04:44.918 line:-1 position:50%
and this token is returned
in the transaction info


113
00:04:44.918 --> 00:04:47.287 line:-1 position:50%
for that purchase.


114
00:04:47,287 --> 00:04:50,023 line:-1
The App account token stays in
the transaction info forever,


115
00:04:50.023 --> 00:04:51.925 line:-1 position:50%
even across devices.


116
00:04:51.925 --> 00:04:54.261 line:-1 position:50%
If your app supports
its own account system,


117
00:04:54,261 --> 00:04:56,730 line:-1
this can help you keep
track of which purchases


118
00:04:56.730 --> 00:04:58.498 line:-1 position:50%
each in-app account has made,


119
00:04:58.498 --> 00:05:00.333 line:-1 position:50%
regardless of the Apple ID
or device


120
00:05:00.333 --> 00:05:02.335 line:-1 position:50%
that was used to purchase them.


121
00:05:02.335 --> 00:05:04.471 line:-1 position:50%
So, we've talked about getting
products from the App Store


122
00:05:04.471 --> 00:05:06.506 line:-1 position:50%
and initiating a purchase;


123
00:05:06,506 --> 00:05:09,342 line:-1
now what happens
when that purchase completes?


124
00:05:09,342 --> 00:05:10,911 line:-1
As you might expect,


125
00:05:10,911 --> 00:05:13,413 line:-1
StoreKit is going to return
a successful transaction to you


126
00:05:13.413 --> 00:05:15.916 line:-1 position:50%
along with cryptographically
signed information.


127
00:05:15,916 --> 00:05:17,551 line:-1
Sounds familiar, right?


128
00:05:17,551 --> 00:05:20,053 line:-1
Well, StoreKit 2 is bringing
the biggest update


129
00:05:20.053 --> 00:05:22.689 line:-1 position:50%
to in-app purchase transactions
ever.


130
00:05:22,689 --> 00:05:24,791 line:-1
To start, StoreKit 2
will be providing


131
00:05:24,791 --> 00:05:28,195 line:-1
an individually signed object
for every transaction.


132
00:05:28.195 --> 00:05:31.097 line:-1 position:50%
Not only that,
but starting in StoreKit 2,


133
00:05:31.097 --> 00:05:33.667 line:-1 position:50%
in-app purchase transaction info
will now be provided


134
00:05:33.667 --> 00:05:37.971 line:-1 position:50%
in a very common,
easy-to-work-with format: JSON.


135
00:05:37.971 --> 00:05:40.273 line:-1 position:50%
And since we know that
secure cryptographic signing


136
00:05:40.273 --> 00:05:42.842 line:-1 position:50%
is an important part
of StoreKit purchases,


137
00:05:42,842 --> 00:05:45,412 position:50%
we're now using a common
standard used across the web


138
00:05:45,412 --> 00:05:47,647 position:50%
known as JSON Web Signature.


139
00:05:47,647 --> 00:05:50,817 line:0
Plus, all the information
contained in the signed object


140
00:05:50,817 --> 00:05:53,653 position:50%
will now be available
through native StoreKit APIs,


141
00:05:53,653 --> 00:05:56,823 line:0
making it easy to work with
this data in your app's code.


142
00:05:56.823 --> 00:05:59.426 line:-1 position:50%
In fact, we'll show you
just how easy it is.


143
00:05:59.426 --> 00:06:01.294 line:-1 position:50%
Here's Jakob with a
demonstration of these APIs


144
00:06:01.294 --> 00:06:03.096 line:-1 position:50%
in real code.


145
00:06:03.096 --> 00:06:04.998 line:-1 position:50%
Jakob Swank: Hi, I'm Jakob.


146
00:06:04.998 --> 00:06:07.300 line:-1 position:50%
I'm an engineer
on the StoreKit team.


147
00:06:07.300 --> 00:06:10.237 line:-1 position:50%
I'm really excited today
to be showing you how easy it is


148
00:06:10,237 --> 00:06:13,974 line:-1
to get up and running
with StoreKit 2 in your app.


149
00:06:13.974 --> 00:06:17.477 line:-1 position:50%
On the right, I have an app
I'm building called Pocket Cars.


150
00:06:17,477 --> 00:06:20,080 line:-1
You can download
the sample code for this app


151
00:06:20.080 --> 00:06:24.317 line:-1 position:50%
in the resources section of
this session and follow along.


152
00:06:24,317 --> 00:06:26,319 line:-1
The app has two main views.


153
00:06:26,319 --> 00:06:30,190 line:-1
There's a view for my collected
cars and a view for my store.


154
00:06:30.190 --> 00:06:33.893 line:-1 position:50%
Let's go over to the store.


155
00:06:33.893 --> 00:06:35.528 line:-1 position:50%
Currently, my store is empty


156
00:06:35.528 --> 00:06:38.565 line:-1 position:50%
because I have no products
available for sale.


157
00:06:38,565 --> 00:06:41,334 line:-1
I'm going to go ahead
and implement those now.


158
00:06:41.334 --> 00:06:42.836 line:-1 position:50%
To get up and running quickly,


159
00:06:42,836 --> 00:06:46,006 line:-1
I'm using StoreKit testing
in Xcode.


160
00:06:46,006 --> 00:06:48,275 line:-1
This allows me
to build and test my store


161
00:06:48.275 --> 00:06:53.847 line:-1 position:50%
before defining products
in App Store Connect.


162
00:06:53.847 --> 00:06:55.448 line:-1 position:50%
In my Xcode project,


163
00:06:55.448 --> 00:06:58.518 line:-1 position:50%
I've already created
a StoreKit configuration file


164
00:06:58,518 --> 00:07:02,589 line:-1
defining the products
I want to sell.


165
00:07:02.589 --> 00:07:06.860 line:-1 position:50%
This is the same configuration
file I was using for StoreKit;


166
00:07:06,860 --> 00:07:10,063 line:-1
I don't need to change
or migrate anything.


167
00:07:10.063 --> 00:07:13.333 line:-1 position:50%
Here, I also have a plist


168
00:07:13,333 --> 00:07:16,436 line:-1
containing all
my product identifiers.


169
00:07:16.436 --> 00:07:19.439 line:-1 position:50%
It's included as a resource file
built into my app


170
00:07:19.439 --> 00:07:23.443 line:-1 position:50%
so I can use it at runtime.


171
00:07:23.443 --> 00:07:25.545 line:-1 position:50%
To display these products
in my store,


172
00:07:25,545 --> 00:07:28,081 line:-1
I first need to make
a product request


173
00:07:28.081 --> 00:07:32.919 line:-1 position:50%
using a set of the product
identifiers I want to display.


174
00:07:32.919 --> 00:07:34.921 line:-1 position:50%
With StoreKit 2, I can do this


175
00:07:34.921 --> 00:07:39.392 line:-1 position:50%
simply by calling a static
method on the Product struct.


176
00:07:39.392 --> 00:07:44.798 line:-1 position:50%
[KEYSTROKES]


177
00:07:44,798 --> 00:07:47,200 line:-1
After I receive the products
from the App Store,


178
00:07:47.200 --> 00:07:50.236 line:-1 position:50%
I want to separate them by type.


179
00:07:50,236 --> 00:07:52,605 line:-1
I can do this easily
with StoreKit 2


180
00:07:52.605 --> 00:07:55.442 line:-1 position:50%
since the Product type
now provides a property


181
00:07:55,442 --> 00:08:04,084 line:-1
for the type as it's defined
on the App Store server.


182
00:08:04,084 --> 00:08:07,153 line:-1
In my app, I'm selling
three types of products:


183
00:08:07,153 --> 00:08:10,824 line:-1
fuel, cars,
and a navigation package.


184
00:08:10.824 --> 00:08:16.029 line:-1 position:50%
Fuel is a consumable product --
once I use it, it's gone --


185
00:08:16.029 --> 00:08:19.999 line:-1 position:50%
so I'll put all the consumables
in to the fuel array.


186
00:08:19.999 --> 00:08:26.740 line:-1 position:50%
[KEYSTROKES]


187
00:08:26.740 --> 00:08:29.075 line:-1 position:50%
Cars are a non-consumable.


188
00:08:29.075 --> 00:08:31.578 line:-1 position:50%
Once I purchase a car,
I own it forever.


189
00:08:31.578 --> 00:08:33.880 line:-1 position:50%
So I'll put
all the non-consumables


190
00:08:33,880 --> 00:08:36,483 line:-1
into the cars array.


191
00:08:36,483 --> 00:08:43,790 line:-1
[KEYSTROKES]


192
00:08:43,790 --> 00:08:46,860 line:-1
The navigation package
is a subscription product


193
00:08:46,860 --> 00:08:49,129 line:-1
with three levels of service.


194
00:08:49,129 --> 00:08:52,799 line:-1
My customers can subscribe to
one level of service at a time,


195
00:08:52.799 --> 00:08:55.168 line:-1 position:50%
and they are billed
periodically.


196
00:08:55.168 --> 00:08:57.971 line:-1 position:50%
Also, they can upgrade
or downgrade at any time


197
00:08:57,971 --> 00:09:00,907 line:-1
if they want to change
their level of service.


198
00:09:00,907 --> 00:09:02,976 line:-1
The App Store
will return a Product


199
00:09:02.976 --> 00:09:04.711 line:-1 position:50%
for each level of service,


200
00:09:04.711 --> 00:09:07.514 line:-1 position:50%
so I'll put all the
auto-renewable subscriptions


201
00:09:07,514 --> 00:09:10,216 line:-1
into the subscriptions array.


202
00:09:10,216 --> 00:09:16,356 line:0
[KEYSTROKES]


203
00:09:16,356 --> 00:09:19,993 position:50%
I also want to sort my products
within each type by price,


204
00:09:19,993 --> 00:09:21,895 line:0
lowest to highest.


205
00:09:21,895 --> 00:09:25,598 position:50%
[KEYSTROKES]


206
00:09:25,598 --> 00:09:29,569 line:0
Let's run my app and check out
what I've done so far.


207
00:09:34,340 --> 00:09:36,676 line:0
Now I'll navigate to the store.


208
00:09:36,676 --> 00:09:37,710 position:50%
Wow!


209
00:09:37,710 --> 00:09:39,546 position:50%
Before, my store was empty,


210
00:09:39,546 --> 00:09:41,047 position:50%
but now it's looking
pretty great


211
00:09:41,047 --> 00:09:43,416 position:50%
with all my products displayed.


212
00:09:43.416 --> 00:09:45.118 line:-1 position:50%
With just one line of code,


213
00:09:45.118 --> 00:09:48.588 line:-1 position:50%
I was able to request my app's
products from the App Store,


214
00:09:48,588 --> 00:09:51,357 line:-1
then I was able to group
and sort those products


215
00:09:51.357 --> 00:09:53.927 line:-1 position:50%
based only on the metadata
I received


216
00:09:53.927 --> 00:09:57.397 line:-1 position:50%
which made it easy
to build my store UI.


217
00:09:57,397 --> 00:09:59,199 position:50%
Now my products
are looking great,


218
00:09:59,199 --> 00:10:02,902 position:50%
but if I tap a buy button,
nothing happens.


219
00:10:02,902 --> 00:10:05,805 position:50%
That's because the purchase
method in my store


220
00:10:05,805 --> 00:10:07,540 position:50%
doesn't do anything.


221
00:10:07,540 --> 00:10:10,710 line:-1
It should initiate the purchase
with StoreKit.


222
00:10:10,710 --> 00:10:13,480 line:-1
We can do this simply
by calling the purchase method


223
00:10:13.480 --> 00:10:15.949 line:-1 position:50%
on the product.


224
00:10:15.949 --> 00:10:25.658 line:-1 position:50%
[KEYSTROKES]


225
00:10:25.658 --> 00:10:27.093 line:-1 position:50%
As Ross mentioned,


226
00:10:27,093 --> 00:10:29,162 line:-1
StoreKit 2 was built
from the ground up


227
00:10:29,162 --> 00:10:32,599 line:-1
to use the new concurrency
capabilities of Swift.


228
00:10:32,599 --> 00:10:35,835 line:-1
This allows my app
to keep the code for purchasing


229
00:10:35.835 --> 00:10:38.171 line:-1 position:50%
and processing
the result of that purchase


230
00:10:38,171 --> 00:10:40,039 line:-1
all within the same context


231
00:10:40.039 --> 00:10:43.510 line:-1 position:50%
in order to keep my code
easy to read.


232
00:10:43.510 --> 00:10:47.747 line:-1 position:50%
When a purchase completes,
a PurchaseResult is returned.


233
00:10:47.747 --> 00:10:49.916 line:-1 position:50%
This PurchaseResult
lets me know


234
00:10:49.916 --> 00:10:51.985 line:-1 position:50%
whether the purchase
was successful


235
00:10:51,985 --> 00:10:55,588 line:-1
or if it completed
in some other non-error state,


236
00:10:55,588 --> 00:10:58,224 line:-1
such as the user
cancelled the purchase


237
00:10:58.224 --> 00:11:01.294 line:-1 position:50%
or the purchase needs
some extra bank validation


238
00:11:01.294 --> 00:11:03.363 line:-1 position:50%
or approval from a parent.


239
00:11:03,363 --> 00:11:06,833 line:-1
To handle each case,
I'll just switch over them.


240
00:11:06,833 --> 00:11:12,438 line:0
[KEYSTROKES]


241
00:11:12,438 --> 00:11:15,842 position:50%
If the PurchaseResult
is in the success state,


242
00:11:15,842 --> 00:11:19,045 position:50%
I also get
a verification result.


243
00:11:19.045 --> 00:11:22.148 line:-1 position:50%
A verification result
contains two cases:


244
00:11:22.148 --> 00:11:25.051 line:-1 position:50%
verified and unverified.


245
00:11:25,051 --> 00:11:30,256 line:-1
In StoreKit 2, the transaction
type contains the JWS payload


246
00:11:30,256 --> 00:11:34,494 line:-1
which represents
the signed transaction.


247
00:11:34.494 --> 00:11:38.131 line:-1 position:50%
Every time my app receives
a transaction from StoreKit 2,


248
00:11:38.131 --> 00:11:41.734 line:-1 position:50%
the transaction has passed
through a verification process


249
00:11:41,734 --> 00:11:45,371 line:-1
to confirm whether the payload
is signed by the App Store


250
00:11:45.371 --> 00:11:48.441 line:-1 position:50%
for my app for this device.


251
00:11:48,441 --> 00:11:49,742 line:-1
You heard that right.


252
00:11:49.742 --> 00:11:53.680 line:-1 position:50%
StoreKit 2 does transaction
verification for you.


253
00:11:53,680 --> 00:11:56,983 line:-1
Of course, how I choose to
handle the verification result


254
00:11:56.983 --> 00:12:01.287 line:-1 position:50%
is entirely up to me
and the needs of my business.


255
00:12:01.287 --> 00:12:03.456 line:-1 position:50%
For my app,
I'm going to make sure


256
00:12:03,456 --> 00:12:07,427 line:-1
this transaction I received
from StoreKit has been verified.


257
00:12:07.427 --> 00:12:11.130 line:-1 position:50%
Here in my store, I'll create
a checkVerified method


258
00:12:11,130 --> 00:12:14,400 line:-1
I can use for any
VerificationResult.


259
00:12:14,400 --> 00:12:19,272 position:50%
[KEYSTROKES]


260
00:12:19,272 --> 00:12:21,240 position:50%
If the result is unverified,


261
00:12:21,240 --> 00:12:24,143 position:50%
I throw my own
failedVerification error


262
00:12:24,143 --> 00:12:26,679 position:50%
to alert other parts of my app.


263
00:12:26,679 --> 00:12:28,648 line:0
If the result is verified,


264
00:12:28,648 --> 00:12:32,585 position:50%
I unwrap the transaction
and return it to the caller.


265
00:12:32,585 --> 00:12:34,821 line:-1
Now I can use
this checkVerified method


266
00:12:34.821 --> 00:12:37.357 line:-1 position:50%
on the results of the purchase.


267
00:12:37.357 --> 00:12:49.836 line:-1 position:50%
[KEYSTROKES]


268
00:12:49,836 --> 00:12:52,472 line:-1
Finally,
with my transaction verified,


269
00:12:52,472 --> 00:12:55,008 line:-1
I deliver the content
to my user.


270
00:12:55.008 --> 00:13:03.049 line:-1 position:50%
[KEYSTROKES]


271
00:13:03,049 --> 00:13:05,051 line:-1
After the user has the content,


272
00:13:05.051 --> 00:13:07.120 line:-1 position:50%
I need to make sure
I tell StoreKit


273
00:13:07,120 --> 00:13:09,722 line:-1
to finish the transaction.


274
00:13:09.722 --> 00:13:15.428 line:-1 position:50%
[KEYSTROKES]


275
00:13:15,428 --> 00:13:19,399 line:-1
Then I need to return it
so my UI can get updated.


276
00:13:19,399 --> 00:13:23,169 line:-1
[KEYSTROKES]


277
00:13:23,169 --> 00:13:26,339 line:-1
My app has an account database
I maintain.


278
00:13:26.339 --> 00:13:29.609 line:-1 position:50%
I want to include my app's
current logged in user


279
00:13:29.609 --> 00:13:31.210 line:-1 position:50%
with the StoreKit purchase


280
00:13:31,210 --> 00:13:34,113 line:-1
so this information
is always available to my app


281
00:13:34,113 --> 00:13:37,550 line:-1
when it gets the App Store
signed transaction.


282
00:13:37.550 --> 00:13:41.554 line:-1 position:50%
I can do this by creating an
appAccountToken purchase option


283
00:13:41,554 --> 00:13:45,224 line:-1
using a tokenized version
of my logged-in account


284
00:13:45,224 --> 00:13:49,095 line:-1
and passing that option
to the purchase method.


285
00:13:49.095 --> 00:13:59.038 line:-1 position:50%
[KEYSTROKES]


286
00:13:59,038 --> 00:14:00,406 line:-1
OK.


287
00:14:00.406 --> 00:14:03.109 line:-1 position:50%
We're all set with my
purchase method implementation.


288
00:14:03,109 --> 00:14:05,111 line:-1
Let's run my app again.


289
00:14:13.086 --> 00:14:14.687 line:-1 position:50%
Now we're back in my store,


290
00:14:14.687 --> 00:14:16.522 line:-1 position:50%
and I'm feeling
pretty adventurous.


291
00:14:16,522 --> 00:14:18,691 line:-1
So I'm going to purchase
a motorcycle


292
00:14:18,691 --> 00:14:22,662 line:-1
because I've always wanted one.


293
00:14:22.662 --> 00:14:24.230 line:-1 position:50%
There's the payment sheet
from StoreKit


294
00:14:24,230 --> 00:14:27,300 line:-1
showing me the purchase
has been initiated properly.


295
00:14:27.300 --> 00:14:32.472 line:-1 position:50%
I'll tap to confirm
the purchase.


296
00:14:32.472 --> 00:14:34.207 line:-1 position:50%
StoreKit then displays an alert


297
00:14:34,207 --> 00:14:36,776 line:-1
showing the purchase
was successful.


298
00:14:36.776 --> 00:14:38.644 line:-1 position:50%
After I dismiss that alert,


299
00:14:38.644 --> 00:14:41.647 line:-1 position:50%
my buy button changes
to a green checkmark


300
00:14:41.647 --> 00:14:43.783 line:-1 position:50%
showing my app
trusts the transaction


301
00:14:43,783 --> 00:14:47,086 line:-1
and my motorcycle
has been delivered.


302
00:14:47,086 --> 00:14:50,022 line:-1
There's one more important
thing I want to note here.


303
00:14:50,022 --> 00:14:51,657 line:-1
As I said previously,


304
00:14:51.657 --> 00:14:53.693 line:-1 position:50%
sometimes a customer
will have to do


305
00:14:53.693 --> 00:14:56.295 line:-1 position:50%
some extra verification
on their account


306
00:14:56.295 --> 00:14:57.930 line:-1 position:50%
or they'll need
a parent's approval


307
00:14:57.930 --> 00:15:00.533 line:-1 position:50%
before a purchase will complete.


308
00:15:00,533 --> 00:15:01,801 line:-1
In these cases,


309
00:15:01.801 --> 00:15:05.371 line:-1 position:50%
the purchase result I receive
from product.purchase()


310
00:15:05.371 --> 00:15:08.441 line:-1 position:50%
will be in a pending state.


311
00:15:08,441 --> 00:15:10,743 position:50%
This means after
the customer completes


312
00:15:10,743 --> 00:15:14,781 position:50%
the account verification
or their parent gives approval,


313
00:15:14,781 --> 00:15:19,919 position:50%
my app should update the UI to
reflect the completed purchase.


314
00:15:19,919 --> 00:15:22,255 line:-1
To listen for these
transaction updates,


315
00:15:22.255 --> 00:15:24.924 line:-1 position:50%
I need to iterate
over a static property


316
00:15:24.924 --> 00:15:27.927 line:-1 position:50%
on the transaction type.


317
00:15:31,464 --> 00:15:35,034 line:0
[KEYSTROKES]


318
00:15:35,034 --> 00:15:38,471 position:50%
This property is
an infinite async sequence.


319
00:15:38,471 --> 00:15:40,506 line:0
That means
it will continue iterating


320
00:15:40,506 --> 00:15:43,976 position:50%
over transaction updates
as they come in from StoreKit


321
00:15:43,976 --> 00:15:48,347 position:50%
until I choose to cancel
or break out of the for loop.


322
00:15:48,347 --> 00:15:51,017 position:50%
Here I'm creating
a detach task


323
00:15:51,017 --> 00:15:53,586 position:50%
which will return
a task handle I can use


324
00:15:53,586 --> 00:15:56,522 line:0
to explicitly cancel
my update listener


325
00:15:56,522 --> 00:15:59,659 line:0
when the store is deallocated.


326
00:15:59,659 --> 00:16:02,929 line:-1
Just like all transactions
I receive from StoreKit 2,


327
00:16:02,929 --> 00:16:06,299 line:-1
I want to check if the
verification result is verified


328
00:16:06.299 --> 00:16:09.101 line:-1 position:50%
before delivering
content to the user.


329
00:16:09.101 --> 00:16:14.240 line:-1 position:50%
I can use my previously
defined checkVerified method.


330
00:16:14,240 --> 00:16:27,887 line:0
[KEYSTROKES]


331
00:16:27.887 --> 00:16:29.789 line:-1 position:50%
And, just like with
a purchase response,


332
00:16:29.789 --> 00:16:32.225 line:-1 position:50%
once I have
my verified transaction,


333
00:16:32.225 --> 00:16:35.161 line:-1 position:50%
I need to deliver
the content to my user.


334
00:16:35.161 --> 00:16:40.600 line:-1 position:50%
[KEYSTROKES]


335
00:16:40,600 --> 00:16:47,874 line:-1
And of course, I always need
to finish my transactions.


336
00:16:47.874 --> 00:16:51.110 line:-1 position:50%
It's very important I start
my transaction update listener


337
00:16:51.110 --> 00:16:54.981 line:-1 position:50%
as soon as my app launches
so I don't miss a single one.


338
00:16:54,981 --> 00:16:57,550 line:-1
I'm going to do this
as soon as my store is created,


339
00:16:57,550 --> 00:17:00,119 line:-1
which happens
right around app launch.


340
00:17:00,119 --> 00:17:09,262 line:-1
[KEYSTROKES]


341
00:17:09.262 --> 00:17:11.564 line:-1 position:50%
In order to test
my update listener,


342
00:17:11,564 --> 00:17:15,635 line:-1
I'm going to enable Ask To Buy
in my Xcode test environment


343
00:17:15.635 --> 00:17:19.839 line:-1 position:50%
to simulate a purchase response
in a pending state.


344
00:17:19.839 --> 00:17:24.010 line:-1 position:50%
To do this, I select
my StoreKit configuration file


345
00:17:24.010 --> 00:17:29.982 line:-1 position:50%
and in the Editor menu,
I select Enable Ask To Buy.


346
00:17:29.982 --> 00:17:33.853 line:-1 position:50%
Let's run my app again
and do a purchase.


347
00:17:43.996 --> 00:17:46.999 line:-1 position:50%
This time, after I confirm
on the payment sheet,


348
00:17:46.999 --> 00:17:50.703 line:-1 position:50%
I see a new alert from StoreKit
saying I need to ask permission


349
00:17:50,703 --> 00:17:52,405 line:-1
to complete the purchase.


350
00:17:52.405 --> 00:17:56.175 line:-1 position:50%
I'll go ahead and tap Ask.


351
00:17:56,175 --> 00:17:58,611 line:-1
The purchase response
is returned to my app


352
00:17:58.611 --> 00:18:00.346 line:-1 position:50%
in a pending state.


353
00:18:00.346 --> 00:18:02.782 line:-1 position:50%
To approve the purchase,
I'm going to open


354
00:18:02.782 --> 00:18:05.952 line:-1 position:50%
the StoreKit testing in Xcode
transaction manager


355
00:18:05.952 --> 00:18:10.089 line:-1 position:50%
and click the Approve button
in the top-right corner.


356
00:18:13.726 --> 00:18:14.794 line:-1 position:50%
Great!


357
00:18:14,794 --> 00:18:17,396 line:-1
Immediately after
I approved the transaction,


358
00:18:17,396 --> 00:18:20,766 line:-1
my update listener received
the verification result


359
00:18:20,766 --> 00:18:25,538 line:-1
and the UI immediately changed
to show the approved purchase.


360
00:18:25,538 --> 00:18:30,543 line:-1
Now I have a brand-new, standard
5-seater to cruise around in.


361
00:18:30,543 --> 00:18:33,879 line:-1
I just showed you how easy
it is to request products,


362
00:18:33.879 --> 00:18:35.448 line:-1 position:50%
start a purchase,


363
00:18:35,448 --> 00:18:37,984 line:-1
react to different
purchase results,


364
00:18:37.984 --> 00:18:40.753 line:-1 position:50%
verify the integrity
of a transaction,


365
00:18:40,753 --> 00:18:44,323 line:-1
and receive updates from the App
Store for pending transactions,


366
00:18:44,323 --> 00:18:46,892 line:-1
all using StoreKit 2.


367
00:18:46,892 --> 00:18:48,794 line:-1
Now let's go back to Ross
for an introduction


368
00:18:48.794 --> 00:18:51.263 line:-1 position:50%
on working with your
user's transaction history


369
00:18:51.263 --> 00:18:53.866 line:-1 position:50%
and subscription status.


370
00:18:53.866 --> 00:18:57.536 line:-1 position:50%
Ross: Wow!  It’s pretty amazing
to see these new APIs in action.


371
00:18:57.536 --> 00:19:01.307 line:-1 position:50%
And automatic validation,
what more could you want?


372
00:19:01.307 --> 00:19:02.141 line:-1 position:50%
What's that?


373
00:19:02.141 --> 00:19:03.409 line:-1 position:50%
You love cryptography


374
00:19:03,409 --> 00:19:05,945 line:-1
and you still want to validate
the data yourself?


375
00:19:05,945 --> 00:19:07,346 line:-1
Not to worry.


376
00:19:07,346 --> 00:19:09,148 line:-1
StoreKit 2's
automatic validation


377
00:19:09.148 --> 00:19:11.250 line:-1 position:50%
raises the bar for security,


378
00:19:11.250 --> 00:19:14.053 line:-1 position:50%
but it isn't meant to completely
replace your own validation.


379
00:19:14.053 --> 00:19:16.422 line:-1 position:50%
As always,
security lies on a spectrum


380
00:19:16.422 --> 00:19:19.425 line:-1 position:50%
of strength, time,
and complexity.


381
00:19:19.425 --> 00:19:22.261 line:-1 position:50%
I'll give you the scoop
on validation a bit later.


382
00:19:22.261 --> 00:19:25.231 line:-1 position:50%
First, if you're as excited
about StoreKit 2 transactions


383
00:19:25,231 --> 00:19:27,133 line:-1
as I am,
you'll love to hear


384
00:19:27,133 --> 00:19:30,036 line:-1
that we're giving you lots of
new ways to work with them.


385
00:19:30,036 --> 00:19:31,470 line:-1
We're adding a new set of APIs


386
00:19:31.470 --> 00:19:33.406 line:-1 position:50%
for querying
completed transactions


387
00:19:33,406 --> 00:19:36,142 line:-1
in the user's
transaction history.


388
00:19:36.142 --> 00:19:38.077 line:-1 position:50%
In StoreKit 2, you can access


389
00:19:38.077 --> 00:19:40.179 line:-1 position:50%
all of the user's
past transactions


390
00:19:40.179 --> 00:19:42.314 line:-1 position:50%
with a single API call.


391
00:19:42.314 --> 00:19:45.184 line:-1 position:50%
You can also access the latest
transaction for a product.


392
00:19:45.184 --> 00:19:47.219 line:-1 position:50%
So if you want to see
just the most recent renewal


393
00:19:47,219 --> 00:19:49,855 line:-1
of a subscription, you can.


394
00:19:49.855 --> 00:19:53.559 line:-1 position:50%
And we know that the number one
thing you need to know


395
00:19:53,559 --> 00:19:57,496 line:-1
is what products the user has
paid for access to right now.


396
00:19:57.496 --> 00:19:58.831 line:-1 position:50%
So we've distilled
that information


397
00:19:58.831 --> 00:20:02.101 line:-1 position:50%
into a single function
called CurrentEntitlements.


398
00:20:02.101 --> 00:20:04.737 line:-1 position:50%
Current entitlements contains
all of the non-consumables


399
00:20:04.737 --> 00:20:06.806 line:-1 position:50%
in the user's
transaction history,


400
00:20:06.806 --> 00:20:09.208 line:-1 position:50%
as well as all of
the subscription transactions


401
00:20:09,208 --> 00:20:10,709 line:-1
that are currently active.


402
00:20:10.709 --> 00:20:13.045 line:-1 position:50%
With this, you have all of
the information you need


403
00:20:13,045 --> 00:20:16,582 line:-1
to unlock everything the user
has paid for in your app.


404
00:20:16.582 --> 00:20:18.317 line:-1 position:50%
And since this represents
only things


405
00:20:18,317 --> 00:20:20,753 line:-1
that the user should
have access to right now,


406
00:20:20.753 --> 00:20:22.354 line:-1 position:50%
any transactions
that have been revoked


407
00:20:22.354 --> 00:20:24.957 line:-1 position:50%
are not included
in the response.


408
00:20:24,957 --> 00:20:26,926 line:-1
Consumables are also
not included,


409
00:20:26,926 --> 00:20:30,329 line:-1
since they’re not a persistent
part of the transaction history.


410
00:20:30.329 --> 00:20:32.932 line:-1 position:50%
Now, you must be thinking,
"I can't wait!


411
00:20:32,932 --> 00:20:35,000 line:-1
When can I start calling
these in my app?"


412
00:20:35,000 --> 00:20:36,569 line:-1
Well, with StoreKit 2,


413
00:20:36,569 --> 00:20:39,205 line:-1
every transaction
a user has ever completed


414
00:20:39.205 --> 00:20:41.941 line:-1 position:50%
is available to your app
as soon as you ask for it.


415
00:20:41.941 --> 00:20:44.376 line:-1 position:50%
This means that
when a user installs your app


416
00:20:44,376 --> 00:20:45,911 line:-1
on a new device,
you'll be able to tell


417
00:20:45.911 --> 00:20:47.980 line:-1 position:50%
which products they are
entitled to get access to


418
00:20:47.980 --> 00:20:50.583 line:-1 position:50%
on the very first time
your app is opened.


419
00:20:50.583 --> 00:20:54.520 line:-1 position:50%
Furthermore, transaction history
will automatically update


420
00:20:54.520 --> 00:20:56.755 line:-1 position:50%
across users' devices.


421
00:20:56,755 --> 00:20:59,625 line:-1
When your customer makes
a purchase on one device,


422
00:20:59.625 --> 00:21:01.060 line:-1 position:50%
your app will be able
to see the purchase


423
00:21:01.060 --> 00:21:04.130 line:-1 position:50%
on every other device
it's installed on.


424
00:21:04,130 --> 00:21:05,898 line:-1
In fact, if your app is running


425
00:21:05,898 --> 00:21:08,067 line:-1
when a purchase is made
on another device,


426
00:21:08.067 --> 00:21:10.269 line:-1 position:50%
you'll be notified
about the new transaction.


427
00:21:10.269 --> 00:21:12.037 line:-1 position:50%
Jakob mentioned
that it's important


428
00:21:12,037 --> 00:21:14,673 line:-1
to listen for transactions
as soon as your app starts,


429
00:21:14.673 --> 00:21:17.376 line:-1 position:50%
and this is just
one more reason that's true.


430
00:21:17.376 --> 00:21:18.477 line:-1 position:50%
So, all of this means


431
00:21:18.477 --> 00:21:21.046 line:-1 position:50%
that users won't need to restore
completed transactions


432
00:21:21.046 --> 00:21:24.483 line:-1 position:50%
when your app is reinstalled
or downloaded on a new device.


433
00:21:24,483 --> 00:21:26,852 line:-1
Everything should automatically
be fetched by StoreKit


434
00:21:26,852 --> 00:21:28,754 line:-1
and stay up to date.


435
00:21:28.754 --> 00:21:31.357 line:-1 position:50%
But people use their Apple
devices in millions of ways


436
00:21:31.357 --> 00:21:33.159 line:-1 position:50%
in millions of places.


437
00:21:33,159 --> 00:21:34,627 line:-1
In the rare case
that a user thinks


438
00:21:34.627 --> 00:21:37.296 line:-1 position:50%
they should have a transaction
but you don't see it,


439
00:21:37,296 --> 00:21:39,832 line:-1
you can use
the App Store sync API.


440
00:21:39.832 --> 00:21:44.203 line:-1 position:50%
This immediately resynchronizes
all StoreKit 2 transactions.


441
00:21:44.203 --> 00:21:45.471 line:-1 position:50%
This is a replacement for the


442
00:21:45,471 --> 00:21:47,806 line:-1
restoreCompletedTransactions
API,


443
00:21:47.806 --> 00:21:49.241 line:-1 position:50%
and you should provide UI
in your app


444
00:21:49.241 --> 00:21:51.810 line:-1 position:50%
that allows users
to initiate the sync.


445
00:21:51.810 --> 00:21:54.880 line:-1 position:50%
However, thanks to StoreKit 2's
automatic synchronization,


446
00:21:54.880 --> 00:21:56.015 line:-1 position:50%
it should be very rare


447
00:21:56,015 --> 00:21:58,784 line:-1
that a user needs to initiate
a sync manually.


448
00:21:58,784 --> 00:22:02,555 line:-1
Automatic synchronization should
cover the majority of cases.


449
00:22:02.555 --> 00:22:05.357 line:-1 position:50%
If a user does need
to initiate a manual sync,


450
00:22:05.357 --> 00:22:07.993 line:-1 position:50%
they will be required
to authenticate their account.


451
00:22:07.993 --> 00:22:09.161 line:-1 position:50%
For this reason,


452
00:22:09,161 --> 00:22:13,199 line:-1
you should only use this API
in response to user input.


453
00:22:13,199 --> 00:22:16,769 line:-1
Finally, all transactions
made using StoreKit 2 APIs


454
00:22:16.769 --> 00:22:19.104 line:-1 position:50%
are available
in the original StoreKit APIs,


455
00:22:19,104 --> 00:22:20,639 line:-1
and vice versa.


456
00:22:20.639 --> 00:22:22.608 line:-1 position:50%
So if your app has
existing transactions,


457
00:22:22.608 --> 00:22:25.010 line:-1 position:50%
you will be able to see them
in the StoreKit 2 APIs


458
00:22:25,010 --> 00:22:27,079 line:-1
as soon as you start using them.


459
00:22:27.079 --> 00:22:29.949 line:-1 position:50%
New purchases made
with the original StoreKit APIs


460
00:22:29,949 --> 00:22:32,718 line:-1
will be available via
StoreKit 2 APIs immediately,


461
00:22:32.718 --> 00:22:34.486 line:-1 position:50%
and purchases made
with StoreKit 2


462
00:22:34,486 --> 00:22:36,789 line:-1
will also be available
inside the unified receipt


463
00:22:36,789 --> 00:22:38,824 line:-1
when it is refreshed.


464
00:22:38,824 --> 00:22:40,659 line:-1
In addition to
transaction history,


465
00:22:40,659 --> 00:22:42,127 line:-1
StoreKit 2 is also adding ways


466
00:22:42.127 --> 00:22:43.596 line:-1 position:50%
for you to get
detailed information


467
00:22:43,596 --> 00:22:47,266 line:-1
about a user's
subscription status.


468
00:22:47.266 --> 00:22:50.469 line:-1 position:50%
The subscription status
has three parts.


469
00:22:50.469 --> 00:22:52.738 line:-1 position:50%
The first is
the latest transaction.


470
00:22:52.738 --> 00:22:55.207 line:-1 position:50%
This conveniently lets you
access the last transaction


471
00:22:55,207 --> 00:22:56,976 line:-1
that occurred
for this subscription,


472
00:22:56.976 --> 00:22:58.110 line:-1 position:50%
and it's the same
as if you called


473
00:22:58,110 --> 00:23:01,347 line:-1
the latest transaction
we talked about at earlier.


474
00:23:01.347 --> 00:23:03.415 line:-1 position:50%
The second is the renewal state.


475
00:23:03,415 --> 00:23:05,050 line:-1
This is an enumeration
that tells you


476
00:23:05.050 --> 00:23:07.052 line:-1 position:50%
the current state
of the subscription.


477
00:23:07,052 --> 00:23:08,354 line:-1
If you just want to know
what's going on


478
00:23:08,354 --> 00:23:12,191 line:-1
with the subscription right now,
just look at this value.


479
00:23:12.191 --> 00:23:14.493 line:-1 position:50%
It'll tell you if it's
currently subscribed,


480
00:23:14,493 --> 00:23:18,163 line:-1
expired, in the grace period,
and more.


481
00:23:18,163 --> 00:23:20,032 line:-1
We've designed it to give you
a single place to look


482
00:23:20.032 --> 00:23:24.336 line:-1 position:50%
in order to make it easy to base
app logic off this value.


483
00:23:24,336 --> 00:23:28,073 line:-1
And the final part of the subscription
status is the renewal info.


484
00:23:28.073 --> 00:23:30.142 line:-1 position:50%
This is where you can see
all of the details


485
00:23:30.142 --> 00:23:32.177 line:-1 position:50%
about a user's subscription.


486
00:23:32.177 --> 00:23:33.612 line:-1 position:50%
It contains all kinds
of information


487
00:23:33,612 --> 00:23:35,648 line:-1
that isn't in
the transaction info


488
00:23:35.648 --> 00:23:39.351 line:-1 position:50%
because this data can actually
change without a transaction.


489
00:23:39.351 --> 00:23:41.553 line:-1 position:50%
For example,
in the renewal info,


490
00:23:41.553 --> 00:23:43.455 line:-1 position:50%
you can find
the auto-renew status,


491
00:23:43,455 --> 00:23:46,592 line:-1
which tells you if the user has
auto-renew turned on or off


492
00:23:46,592 --> 00:23:48,560 line:-1
for this subscription.


493
00:23:48.560 --> 00:23:49.995 line:-1 position:50%
You can even see the product ID


494
00:23:49,995 --> 00:23:52,097 line:-1
that their auto-renewal
is set for.


495
00:23:52.097 --> 00:23:54.767 line:-1 position:50%
So if a user has recently
downgraded their subscription,


496
00:23:54,767 --> 00:23:56,035 line:-1
you can see that right here,


497
00:23:56,035 --> 00:23:58,370 line:-1
and maybe use that as
an opportunity to present them


498
00:23:58.370 --> 00:24:01.140 line:-1 position:50%
with a winback offer
to stay at the higher tier.


499
00:24:01,140 --> 00:24:03,142 line:-1
If the subscription
is already expired,


500
00:24:03.142 --> 00:24:06.512 line:-1 position:50%
you can use the renewal info
to see the expiration reason.


501
00:24:06.512 --> 00:24:09.214 line:-1 position:50%
And the full renewal info has
all this data and more,


502
00:24:09,214 --> 00:24:11,884 line:-1
plus another critical feature.


503
00:24:11,884 --> 00:24:13,986 line:-1
That's right,
all you cryptography buffs,


504
00:24:13,986 --> 00:24:16,755 line:-1
the renewal info is signed
using JWS!


505
00:24:16,755 --> 00:24:18,791 line:-1
Just like the transaction info,


506
00:24:18.791 --> 00:24:21.260 line:-1 position:50%
the renewal info is a critical
part of unlocking service


507
00:24:21,260 --> 00:24:22,995 line:-1
and making marketing decisions.


508
00:24:22.995 --> 00:24:24.430 line:-1 position:50%
So we're giving you
the confidence to know


509
00:24:24.430 --> 00:24:26.632 line:-1 position:50%
that it's valid
and directly from Apple.


510
00:24:26.632 --> 00:24:28.334 line:-1 position:50%
And, to answer the question


511
00:24:28.334 --> 00:24:30.536 line:-1 position:50%
that I'm sure is running through
your head right now,


512
00:24:30.536 --> 00:24:33.706 line:-1 position:50%
yes, StoreKit 2 will
automatically validate


513
00:24:33.706 --> 00:24:35.808 line:-1 position:50%
the renewal info for you.


514
00:24:35.808 --> 00:24:39.178 line:-1 position:50%
One final thing to know about
the subscription status APIs


515
00:24:39.178 --> 00:24:41.647 line:-1 position:50%
is that they return
an array of statuses.


516
00:24:41.647 --> 00:24:43.515 line:-1 position:50%
This is because, in some cases,


517
00:24:43.515 --> 00:24:45.117 line:-1 position:50%
users can have
multiple subscriptions


518
00:24:45,117 --> 00:24:46,752 line:-1
to the same product.


519
00:24:46.752 --> 00:24:49.822 line:-1 position:50%
For example, a user may have
subscribed to your product,


520
00:24:49.822 --> 00:24:51.490 line:-1 position:50%
and then also receive
a subscription


521
00:24:51.490 --> 00:24:53.292 line:-1 position:50%
through Family Sharing.


522
00:24:53.292 --> 00:24:54.126 line:-1 position:50%
You should check the array


523
00:24:54.126 --> 00:24:57.863 line:-1 position:50%
to see what the highest level of
service they're entitled to is.


524
00:24:57,863 --> 00:25:00,499 line:-1
Now I'll hand it back to Jakob
to show you what it looks like


525
00:25:00,499 --> 00:25:02,134 line:-1
to work with
these transaction history


526
00:25:02.134 --> 00:25:05.437 line:-1 position:50%
and subscription status APIs
in your app code.


527
00:25:05,437 --> 00:25:07,106 line:-1
Jakob: Thanks, Ross.


528
00:25:07.106 --> 00:25:09.074 line:-1 position:50%
Let's go back to the app
I've been working on


529
00:25:09.074 --> 00:25:11.677 line:-1 position:50%
and update it to use
the new transaction history


530
00:25:11,677 --> 00:25:15,781 line:-1
and subscription status APIs
Ross just talked about.


531
00:25:15,781 --> 00:25:18,217 line:-1
You'll notice the motorcycle
I previously purchased


532
00:25:18,217 --> 00:25:19,885 line:-1
doesn't have a green check,


533
00:25:19.885 --> 00:25:23.822 line:-1 position:50%
and after I navigate away
from my store view, then back,


534
00:25:23.822 --> 00:25:27.726 line:-1 position:50%
the standard 5-seater doesn't
have a green check either.


535
00:25:27.726 --> 00:25:31.196 line:-1 position:50%
As a user, I can't tell
what I've already purchased.


536
00:25:31.196 --> 00:25:34.900 line:-1 position:50%
This is a problem
easily solved with StoreKit 2.


537
00:25:34.900 --> 00:25:37.569 line:-1 position:50%
At any time,
my app can query StoreKit


538
00:25:37,569 --> 00:25:39,772 line:-1
for which products
have been purchased


539
00:25:39.772 --> 00:25:43.275 line:-1 position:50%
so I can keep my app's UI
always up to date.


540
00:25:43,275 --> 00:25:45,577 line:-1
Over in my Store.swift file,


541
00:25:45.577 --> 00:25:49.648 line:-1 position:50%
the isPurchased method
currently returns only false.


542
00:25:49,648 --> 00:25:51,717 line:-1
Let's fix that
with a simple call


543
00:25:51.717 --> 00:25:54.887 line:-1 position:50%
to Transaction.latest(for:).


544
00:25:54,887 --> 00:25:58,724 line:-1
[KEYSTROKES]


545
00:25:58,724 --> 00:26:00,559 line:-1
Then pass in
my product identifier


546
00:26:00.559 --> 00:26:03.595 line:-1 position:50%
to get the most recent
transaction.


547
00:26:03,595 --> 00:26:07,399 line:-1
This StoreKit method returns
another verification result


548
00:26:07.399 --> 00:26:09.701 line:-1 position:50%
telling me the transaction
has passed through


549
00:26:09.701 --> 00:26:12.638 line:-1 position:50%
StoreKit 2's verification check.


550
00:26:12.638 --> 00:26:15.774 line:-1 position:50%
I'll confirm the transaction
is verified and unwrap it


551
00:26:15.774 --> 00:26:19.678 line:-1 position:50%
using the checkVerified method
I wrote previously.


552
00:26:19.678 --> 00:26:30.155 line:-1 position:50%
[KEYSTROKES]


553
00:26:30.155 --> 00:26:32.925 line:-1 position:50%
Then, I'll make sure my app
doesn't deliver content


554
00:26:32,925 --> 00:26:35,227 line:-1
for a transaction
that has been refunded


555
00:26:35.227 --> 00:26:38.764 line:-1 position:50%
by checking
revocationDate equals nil.


556
00:26:38,764 --> 00:26:48,474 line:-1
[KEYSTROKES]


557
00:26:48.474 --> 00:26:51.410 line:-1 position:50%
Also, subscriptions where
my customer has upgraded


558
00:26:51,410 --> 00:26:54,513 line:-1
to a higher level of service
in the middle of the period


559
00:26:54.513 --> 00:26:58.083 line:-1 position:50%
will have the isUpgraded flag
set to true.


560
00:26:58.083 --> 00:27:00.085 line:-1 position:50%
I want to make sure
my app is delivering


561
00:27:00,085 --> 00:27:03,622 line:-1
the highest level of service
my customer has subscribed to,


562
00:27:03.622 --> 00:27:06.325 line:-1 position:50%
so the isPurchased method
should ignore


563
00:27:06.325 --> 00:27:08.694 line:-1 position:50%
any upgraded transactions.


564
00:27:08,694 --> 00:27:14,867 line:-1
[KEYSTROKES]


565
00:27:14.867 --> 00:27:16.535 line:-1 position:50%
For a subscription product,


566
00:27:16.535 --> 00:27:20.272 line:-1 position:50%
the transaction type
tells only part of the story.


567
00:27:20,272 --> 00:27:22,641 line:-1
In addition to the date
of the transaction


568
00:27:22.641 --> 00:27:25.244 line:-1 position:50%
and the expiration date
of the subscription,


569
00:27:25,244 --> 00:27:28,480 line:-1
I also want to know
when the next renewal date is,


570
00:27:28.480 --> 00:27:31.383 line:-1 position:50%
and whether my customer
has turned off the auto-renewal


571
00:27:31,383 --> 00:27:32,951 line:-1
for their subscription


572
00:27:32.951 --> 00:27:34.853 line:-1 position:50%
or whether their next
renewal period


573
00:27:34,853 --> 00:27:38,524 line:-1
will change the level of service
they're subscribed to.


574
00:27:38.524 --> 00:27:40.092 line:-1 position:50%
To get all this information,


575
00:27:40.092 --> 00:27:44.296 line:-1 position:50%
StoreKit 2 offers
a subscription status API.


576
00:27:44,296 --> 00:27:47,032 position:50%
In my SubscriptionsView.swift
file,


577
00:27:47,032 --> 00:27:49,768 position:50%
the updateSubscriptionStatus
method


578
00:27:49,768 --> 00:27:52,471 line:0
is responsible for getting
the subscription status


579
00:27:52,471 --> 00:27:56,241 position:50%
from StoreKit
and displaying it to the user.


580
00:27:56,241 --> 00:27:58,343 position:50%
Because all of
my subscription products


581
00:27:58,343 --> 00:28:01,446 position:50%
belong to the same group,
I can use any of them


582
00:28:01,446 --> 00:28:04,283 position:50%
to get the current status
for the group.


583
00:28:04,283 --> 00:28:06,552 position:50%
I'll just choose
the first subscription product


584
00:28:06,552 --> 00:28:08,720 line:0
from the store.


585
00:28:08,720 --> 00:28:12,558 line:0
[KEYSTROKES]


586
00:28:12,558 --> 00:28:13,792 line:0
Once I have a product,


587
00:28:13,792 --> 00:28:17,262 line:0
I can get the status property
from the subscription.


588
00:28:17,262 --> 00:28:20,532 line:0
[KEYSTROKES]


589
00:28:20,532 --> 00:28:22,000 line:0
It's that easy.


590
00:28:22,000 --> 00:28:24,703 line:-1
As Ross mentioned,
it's possible for a user


591
00:28:24.703 --> 00:28:27.539 line:-1 position:50%
to be paying for their own
personal subscription


592
00:28:27,539 --> 00:28:29,942 line:-1
while they also have
a subscription being shared


593
00:28:29,942 --> 00:28:31,410 line:-1
by a family member.


594
00:28:31.410 --> 00:28:34.212 line:-1 position:50%
So the status property
will return an array


595
00:28:34.212 --> 00:28:38.617 line:-1 position:50%
containing all the statuses
for each subscription.


596
00:28:38,617 --> 00:28:42,354 line:-1
Now, they could have
a standard tier shared with them


597
00:28:42,354 --> 00:28:46,425 line:-1
while they've personally
subscribed to the pro tier.


598
00:28:46.425 --> 00:28:48.760 line:-1 position:50%
I want to make sure my user
is able to get


599
00:28:48.760 --> 00:28:51.697 line:-1 position:50%
the highest level of service
they have access to,


600
00:28:51.697 --> 00:28:54.266 line:-1 position:50%
so I'll iterate
through each status.


601
00:28:54,266 --> 00:29:01,673 position:50%
[KEYSTROKES]


602
00:29:01,673 --> 00:29:03,675 position:50%
Next, I'll check
whether the status


603
00:29:03,675 --> 00:29:08,780 position:50%
has a state of expired
or revoked.


604
00:29:08,780 --> 00:29:10,816 position:50%
I want to ignore these cases


605
00:29:10,816 --> 00:29:13,619 position:50%
and not display anything
to the user.


606
00:29:13,619 --> 00:29:16,955 position:50%
For all other cases,
I'll get the renewalInfo


607
00:29:16,955 --> 00:29:18,323 position:50%
and make sure it's verified


608
00:29:18,323 --> 00:29:22,861 position:50%
using the checkVerified method
on my store.


609
00:29:22,861 --> 00:29:34,306 position:50%
[KEYSTROKES]


610
00:29:34,306 --> 00:29:37,209 line:0
Once I confirm
the renewalInfo is verified,


611
00:29:37,209 --> 00:29:39,344 line:0
I'll compare
the level of service


612
00:29:39,344 --> 00:29:45,784 position:50%
to the previous products.


613
00:29:45,784 --> 00:29:48,253 position:50%
This check will get
the corresponding product


614
00:29:48,253 --> 00:29:50,489 position:50%
for the subscription status,


615
00:29:50,489 --> 00:29:53,959 position:50%
then it will compare
with any previous product,


616
00:29:53,959 --> 00:29:57,963 line:0
and if it's a higher tier,
we set highestStatus


617
00:29:57,963 --> 00:30:01,433 line:0
and highestProduct
to the new subscription.


618
00:30:01,433 --> 00:30:03,168 line:0
Once I've checked
all my statuses


619
00:30:03,168 --> 00:30:05,671 position:50%
and I've determined
the highest level of service,


620
00:30:05,671 --> 00:30:10,542 line:0
I'll set the status and current
subscription of my view.


621
00:30:10,542 --> 00:30:23,388 line:0
[KEYSTROKES]


622
00:30:23,388 --> 00:30:25,824 line:0
Let's build and run now.


623
00:30:32,097 --> 00:30:33,498 position:50%
Over in my store view,


624
00:30:33,498 --> 00:30:35,467 position:50%
the products
I previously purchased


625
00:30:35,467 --> 00:30:39,037 position:50%
now show a green checkmark
to indicate I already own them


626
00:30:39,037 --> 00:30:41,206 line:0
and I don't need
to buy them again.


627
00:30:41,206 --> 00:30:42,240 position:50%
Let's see what happens


628
00:30:42,240 --> 00:30:45,844 position:50%
when I purchase one
of my subscription products.


629
00:30:49,715 --> 00:30:51,483 position:50%
After I confirm the purchase,


630
00:30:51,483 --> 00:30:54,553 line:0
the status is displayed
right in my store.


631
00:30:54,553 --> 00:30:57,355 position:50%
I can let my user know
what they're subscribed to


632
00:30:57,355 --> 00:30:59,224 line:0
and when their subscription
will renew


633
00:30:59,224 --> 00:31:03,128 line:0
all using APIs
built into StoreKit 2.


634
00:31:03,128 --> 00:31:06,398 position:50%
Now how about this
My Cars view?


635
00:31:06,398 --> 00:31:09,034 position:50%
It should show all
of my purchased products,


636
00:31:09,034 --> 00:31:11,503 position:50%
but currently it's empty.


637
00:31:11,503 --> 00:31:14,673 position:50%
To fill this in, I could
iterate through all my products,


638
00:31:14,673 --> 00:31:17,209 position:50%
then get the latest transaction
for each,


639
00:31:17,209 --> 00:31:19,678 line:0
check the transaction's
expiration date


640
00:31:19,678 --> 00:31:21,446 position:50%
and whether it
has been refunded,


641
00:31:21,446 --> 00:31:23,749 line:0
but that sounds like a lot.


642
00:31:23,749 --> 00:31:26,051 line:0
Thankfully, I can use
the power of StoreKit 2


643
00:31:26,051 --> 00:31:29,020 position:50%
and a new, simple,
and convenient API


644
00:31:29,020 --> 00:31:31,723 position:50%
to get all my user's
valid transactions


645
00:31:31,723 --> 00:31:34,359 position:50%
called currentEntitlements.


646
00:31:34,359 --> 00:31:36,728 line:-1
Over in the My Cars view,
I have this method


647
00:31:36.728 --> 00:31:41.133 line:-1 position:50%
to refresh my purchased products
when the view is loaded.


648
00:31:41.133 --> 00:31:43.368 line:-1 position:50%
Just like with
transaction updates,


649
00:31:43,368 --> 00:31:46,471 line:-1
I iterate over
the current entitlements.


650
00:31:46,471 --> 00:31:50,242 position:50%
[KEYSTROKES]


651
00:31:50,242 --> 00:31:52,177 line:0
But unlike transaction updates,


652
00:31:52,177 --> 00:31:55,781 line:0
the current entitlement's
async sequence is finite,


653
00:31:55,781 --> 00:31:58,049 line:0
so it won't wait
in the for loop forever,


654
00:31:58,049 --> 00:32:02,521 position:50%
delivering new entitlements as
the user makes more purchases.


655
00:32:02,521 --> 00:32:03,889 position:50%
For each entitlement,


656
00:32:03,889 --> 00:32:06,491 line:0
I want to check
the verification result


657
00:32:06,491 --> 00:32:09,327 line:0
as I do with every other
transaction.


658
00:32:09,327 --> 00:32:12,164 position:50%
[KEYSTROKES]


659
00:32:12,164 --> 00:32:13,799 line:0
Once I know they're verified,


660
00:32:13,799 --> 00:32:16,568 position:50%
I'll filter the entitlements
into different arrays


661
00:32:16,568 --> 00:32:18,970 position:50%
by switching over
the productType property,


662
00:32:18,970 --> 00:32:22,808 line:0
just like I did with my original
product request.


663
00:32:22,808 --> 00:32:26,211 line:0
[KEYSTROKES]


664
00:32:26,211 --> 00:32:28,980 position:50%
Current entitlements will
only return transactions


665
00:32:28,980 --> 00:32:32,984 position:50%
for non-consumable
and auto-renewable products.


666
00:32:32,984 --> 00:32:35,320 position:50%
I can ignore
any other product type


667
00:32:35,320 --> 00:32:37,022 position:50%
to complete my switch statement


668
00:32:37,022 --> 00:32:39,825 position:50%
and keep the Swift compiler
happy.


669
00:32:39,825 --> 00:32:41,259 line:0
Once I have the transaction,


670
00:32:41,259 --> 00:32:46,097 position:50%
I need to get the associated
product to display in my UI.


671
00:32:46.097 --> 00:32:48.200 line:-1 position:50%
For non-consumable
transactions,


672
00:32:48.200 --> 00:32:51.603 line:-1 position:50%
I'll search the cars product
array for the product identifier


673
00:32:51.603 --> 00:32:57.676 line:-1 position:50%
matching this transaction.


674
00:32:57,676 --> 00:33:00,779 position:50%
And likewise, I'll search
the subscriptions product array


675
00:33:00,779 --> 00:33:07,452 line:0
to match any auto-renewable
transactions.


676
00:33:07,452 --> 00:33:09,988 line:0
Let's run again
and check out my UI.


677
00:33:16,862 --> 00:33:19,664 position:50%
Now, when I go into
the My Cars view,


678
00:33:19,664 --> 00:33:21,700 position:50%
I see everything I've purchased.


679
00:33:21,700 --> 00:33:23,969 line:0
All my cars are grouped together
at the top


680
00:33:23,969 --> 00:33:26,671 position:50%
and my subscription is below.


681
00:33:26.671 --> 00:33:30.775 line:-1 position:50%
Now my app has a full working
store and it looks awesome!


682
00:33:30.775 --> 00:33:33.144 line:-1 position:50%
And that's how you can use
the transaction history


683
00:33:33,144 --> 00:33:36,848 line:-1
and subscription status APIs
to make informed decisions


684
00:33:36,848 --> 00:33:40,518 line:-1
in your app about what UI
your users see.


685
00:33:40.518 --> 00:33:42.988 line:-1 position:50%
Now let's go back to Ross
who will talk more in depth


686
00:33:42,988 --> 00:33:46,591 line:-1
on the JSON Web Signature
object.


687
00:33:46.591 --> 00:33:49.527 line:-1 position:50%
Ross: Thanks again
for the fantastic demo, Jakob.


688
00:33:49,527 --> 00:33:51,329 line:-1
You can really see
how the new transaction


689
00:33:51.329 --> 00:33:54.366 line:-1 position:50%
and subscription APIs
come in handy.


690
00:33:54.366 --> 00:33:55.567 line:-1 position:50%
Now that we've seen the two ways


691
00:33:55.567 --> 00:33:58.536 line:-1 position:50%
that StoreKit 2
uses JWS for security,


692
00:33:58.536 --> 00:34:00.238 line:-1 position:50%
I promised we'd take
a closer look at it


693
00:34:00.238 --> 00:34:03.108 line:-1 position:50%
and how you can do
your own validation.


694
00:34:03,108 --> 00:34:06,544 position:50%
JSON Web Signature
is comprised of three parts.


695
00:34:06,544 --> 00:34:08,079 line:0
The first is the header,


696
00:34:08,079 --> 00:34:10,782 line:0
which contains metadata
about the object.


697
00:34:10,782 --> 00:34:12,250 position:50%
This contains
crucial information


698
00:34:12,250 --> 00:34:14,853 line:0
such as which algorithm
is used for signing


699
00:34:14,853 --> 00:34:16,154 line:0
and where to find
the certificate


700
00:34:16,154 --> 00:34:18,590 line:0
used to validate
the signature.


701
00:34:18,590 --> 00:34:21,593 position:50%
StoreKit 2 currently
uses an ECDSA algorithm,


702
00:34:21,593 --> 00:34:25,130 line:0
which is supported natively
in Swift with CryptoKit.


703
00:34:25,130 --> 00:34:28,867 position:50%
For the certificate,
StoreKit 2 uses the x5c header,


704
00:34:28,867 --> 00:34:31,002 position:50%
which indicates that
the entire certificate chain


705
00:34:31,002 --> 00:34:33,672 line:0
is included in the JWS data.


706
00:34:33,672 --> 00:34:35,974 line:0
This means that no internet
connection is necessary


707
00:34:35,974 --> 00:34:40,045 position:50%
in order to validate
these JWS signatures.


708
00:34:40,045 --> 00:34:43,381 line:0
The next part of the JWS data
is the payload.


709
00:34:43,381 --> 00:34:46,451 line:0
This is the main information
such as transaction ID,


710
00:34:46,451 --> 00:34:50,055 position:50%
product ID, purchase date,
and so on.


711
00:34:50,055 --> 00:34:52,090 position:50%
Once you've validated
the signature,


712
00:34:52,090 --> 00:34:54,092 position:50%
this is where you go to read
all the data you want to know


713
00:34:54,092 --> 00:34:57,595 position:50%
about the transaction
or subscription.


714
00:34:57,595 --> 00:35:01,366 position:50%
And the final part of the JWS
data is the signature itself.


715
00:35:01,366 --> 00:35:05,470 line:0
This is generated using
both the header and the payload.


716
00:35:05,470 --> 00:35:07,439 position:50%
Validating the JWS signature


717
00:35:07,439 --> 00:35:09,541 position:50%
is a well-documented
part of the standard,


718
00:35:09,541 --> 00:35:11,643 position:50%
so I recommend going
straight to the original source


719
00:35:11,643 --> 00:35:14,412 position:50%
if you're interested in writing
your own implementation.


720
00:35:14,412 --> 00:35:16,448 position:50%
I've included a link to this
document in the resources


721
00:35:16,448 --> 00:35:18,650 position:50%
associated with this session.


722
00:35:18,650 --> 00:35:21,786 line:-1
Once you've validated
the signature from the JWS data,


723
00:35:21.786 --> 00:35:23.254 line:-1 position:50%
there are just a couple more
things you should do


724
00:35:23.254 --> 00:35:25.290 line:-1 position:50%
to make sure the signed info
is valid for your app


725
00:35:25,290 --> 00:35:27,325 line:-1
and the current device.


726
00:35:27.325 --> 00:35:29.427 line:-1 position:50%
First, you should make sure
that the bundle ID


727
00:35:29.427 --> 00:35:31.029 line:-1 position:50%
present in
the signed info payload


728
00:35:31,029 --> 00:35:33,698 line:-1
matches the bundle ID
of your app.


729
00:35:33,698 --> 00:35:35,834 line:-1
We recommend that
for added security,


730
00:35:35.834 --> 00:35:38.403 line:-1 position:50%
you embed your app's bundle ID
somewhere in the app,


731
00:35:38,403 --> 00:35:40,572 line:-1
rather than relying
on an API call,


732
00:35:40,572 --> 00:35:44,009 line:-1
and use that value to compare it
to the bundle ID in the payload.


733
00:35:44.009 --> 00:35:45.343 line:-1 position:50%
And the final thing
you should do


734
00:35:45,343 --> 00:35:48,213 line:-1
is perform a device validation
check.


735
00:35:48,213 --> 00:35:50,749 line:-1
This ensures that the signed
info was actually generated


736
00:35:50,749 --> 00:35:53,351 line:-1
for the device
it currently on.


737
00:35:53.351 --> 00:35:57.155 line:-1 position:50%
Use the StoreKit 2 API
AppStore.deviceVerificationID


738
00:35:57.155 --> 00:36:00.658 line:-1 position:50%
to retrieve the current device
verification identifier.


739
00:36:00.658 --> 00:36:02.927 line:-1 position:50%
Then, take the device
verification nonce


740
00:36:02.927 --> 00:36:04.329 line:-1 position:50%
from the signed info


741
00:36:04,329 --> 00:36:06,231 line:-1
and append the device
verification identifier


742
00:36:06,231 --> 00:36:08,967 line:-1
you just got from StoreKit.


743
00:36:08.967 --> 00:36:12.437 line:-1 position:50%
Perform a SHA384 hash on this
value and compare the result


744
00:36:12,437 --> 00:36:15,673 line:-1
to the device verification field
from the signed info.


745
00:36:15.673 --> 00:36:17.976 line:-1 position:50%
If they match, then the
signed info was generated


746
00:36:17.976 --> 00:36:21.946 line:-1 position:50%
for this device and your signed
info validation is complete.


747
00:36:21,946 --> 00:36:24,749 line:-1
One final thing to note
is that these new JWS objects


748
00:36:24.749 --> 00:36:26.651 line:-1 position:50%
are for in-app purchase only.


749
00:36:26.651 --> 00:36:28.920 line:-1 position:50%
So if you need to validate
the app receipt,


750
00:36:28.920 --> 00:36:32.057 line:-1 position:50%
you should use the existing API
and process for that.


751
00:36:32.057 --> 00:36:35.060 line:-1 position:50%
And of course, we are offering
new App Store server APIs


752
00:36:35.060 --> 00:36:37.062 line:-1 position:50%
for these new JWS objects,


753
00:36:37.062 --> 00:36:41.533 line:-1 position:50%
so you can retrieve and validate
them directly on your server.


754
00:36:41.533 --> 00:36:43.601 line:-1 position:50%
Well, I hope you were as excited
to meet StoreKit 2


755
00:36:43.601 --> 00:36:46.371 line:-1 position:50%
as we were to introduce it
to you today.


756
00:36:46,371 --> 00:36:48,973 line:-1
StoreKit 2 is making
in-app purchase even better


757
00:36:48.973 --> 00:36:51.142 line:-1 position:50%
with new APIs that
give you more information


758
00:36:51,142 --> 00:36:53,511 line:-1
and are easier to use than ever.


759
00:36:53,511 --> 00:36:55,880 line:-1
This includes new
JSON-based info objects


760
00:36:55.880 --> 00:36:57.549 line:-1 position:50%
for each transaction,


761
00:36:57,549 --> 00:37:00,151 line:-1
as well as APIs to give you
transaction details


762
00:37:00.151 --> 00:37:03.922 line:-1 position:50%
and historical transaction data
in your native code.


763
00:37:03,922 --> 00:37:06,724 line:-1
Combine that with the new
subscription status APIs,


764
00:37:06.724 --> 00:37:08.927 line:-1 position:50%
and StoreKit 2 unlocks
a wealth of possibilities


765
00:37:08,927 --> 00:37:11,496 line:-1
for your in-app purchases.


766
00:37:11,496 --> 00:37:13,598 position:50%
To learn even more
about in-app purchase,


767
00:37:13,598 --> 00:37:15,433 line:0
I encourage you to watch
these other sessions


768
00:37:15,433 --> 00:37:18,837 line:0
for server-side coding
and supporting customers.


769
00:37:18.837 --> 00:37:19.971 line:-1 position:50%
Jakob and I are thrilled


770
00:37:19,971 --> 00:37:21,806 line:-1
we could introduce you
to StoreKit 2.


771
00:37:21,806 --> 00:37:24,275 line:-1
Thanks for joining us
at WWDC21!


772
00:37:24,275 --> 00:37:28,246 align:right position:90% line:0
♪

