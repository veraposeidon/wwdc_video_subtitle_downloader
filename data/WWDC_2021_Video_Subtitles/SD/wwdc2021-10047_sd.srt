2
00:00:00.000 --> 00:00:02.069 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,069 --> 00:00:05,539 line:-1
♪ Bass music playing ♪


4
00:00:05,539 --> 00:00:07,274 line:-1
[KEYSTROKES]


5
00:00:07,274 --> 00:00:09,176 size:2% line:0 position:90%
♪


6
00:00:09.176 --> 00:00:13.647 line:-1 position:50%
Brad Ford: Hello and welcome to
"What's new in camera capture."


7
00:00:13,647 --> 00:00:16,283 line:-1
I'm Brad Ford from
the Camera Software team.


8
00:00:16,283 --> 00:00:18,752 line:-1
I'll be presenting
a host of new camera features


9
00:00:18,752 --> 00:00:22,356 line:-1
beginning with minimum
focus distance reporting;


10
00:00:22.356 --> 00:00:25.993 line:-1 position:50%
how to capture 10-bit HDR video;


11
00:00:25.993 --> 00:00:30.163 line:-1 position:50%
the main course, Video Effects
in Control Center;


12
00:00:30,163 --> 00:00:32,833 line:-1
and then -- a brief respite
from new features --


13
00:00:32,833 --> 00:00:34,935 line:-1
I'll review strategies
to get the best performance


14
00:00:34.935 --> 00:00:37.371 line:-1 position:50%
out of your camera app.


15
00:00:37,371 --> 00:00:40,340 line:-1
And lastly, I'll introduce
a brand-new performance trick


16
00:00:40,340 --> 00:00:44,111 line:-1
for your bag,
IOSurface compression.


17
00:00:44,111 --> 00:00:46,013 line:-1
All of the features
I'll be describing today


18
00:00:46,013 --> 00:00:48,982 line:-1
are found in the AVFoundation
framework --


19
00:00:48.982 --> 00:00:52.786 line:-1 position:50%
specifically, the classes
prefixed with AVCapture.


20
00:00:52.786 --> 00:00:57.791 line:-1 position:50%
To briefly review, the main
objects are AVCaptureDevices,


21
00:00:57,791 --> 00:01:00,928 line:-1
which represent cameras
or microphones;


22
00:01:00,928 --> 00:01:04,831 line:-1
AVCaptureDeviceInputs,
which wrap devices,


23
00:01:04.831 --> 00:01:08.669 line:-1 position:50%
allowing them to be plugged into
an AVCaptureSession,


24
00:01:08,669 --> 00:01:13,607 line:-1
which is the central control
object of the AVCapture graph.


25
00:01:13,607 --> 00:01:17,878 line:-1
AVCaptureOutputs render data
from inputs in various ways.


26
00:01:17,878 --> 00:01:21,682 position:50%
The MovieFileOutput
records QuickTime movies.


27
00:01:21,682 --> 00:01:24,117 position:50%
The PhotoOutput
captures high-quality stills


28
00:01:24,117 --> 00:01:26,153 position:50%
and Live Photos.


29
00:01:26,153 --> 00:01:28,822 position:50%
Data outputs,
such as the VideoDataOutput


30
00:01:28,822 --> 00:01:32,659 line:0
or AudioDataOutput,
deliver video or audio buffers


31
00:01:32,659 --> 00:01:35,829 position:50%
from the camera or mic
to your app.


32
00:01:35,829 --> 00:01:37,965 position:50%
There are several other kinds
of data outputs,


33
00:01:37,965 --> 00:01:43,236 line:0
such as Metadata and Depth.


34
00:01:43,236 --> 00:01:44,938 position:50%
For live camera preview,


35
00:01:44,938 --> 00:01:46,673 position:50%
there's a special
type of output,


36
00:01:46,673 --> 00:01:49,276 position:50%
the AVCaptureVideoPreviewLayer,


37
00:01:49,276 --> 00:01:53,513 line:0
which is a subclass of CALayer.


38
00:01:53,513 --> 00:01:55,749 line:0
Data flows from
the capture inputs


39
00:01:55,749 --> 00:01:59,920 line:0
to compatible capture outputs
through AVCaptureConnections,


40
00:01:59,920 --> 00:02:04,024 position:50%
represented here
by these arrows.


41
00:02:04.024 --> 00:02:06.793 line:-1 position:50%
If you're new to AVFoundation
camera capture,


42
00:02:06.793 --> 00:02:10.030 line:-1 position:50%
I invite you to learn more
at the Cameras and Media Capture


43
00:02:10.030 --> 00:02:13.500 line:-1 position:50%
start page
on developer.apple.com.


44
00:02:13,500 --> 00:02:17,471 line:-1
OK, let's dive right into
the first of our new features.


45
00:02:17.471 --> 00:02:21.441 line:-1 position:50%
Minimum focus distance
is the distance from the lens


46
00:02:21,441 --> 00:02:24,644 line:-1
to the closest point where
sharp focus can be attained.


47
00:02:24,644 --> 00:02:26,446 line:-1
It's an attribute of all lenses,


48
00:02:26.446 --> 00:02:29.883 line:-1 position:50%
be they on DSLR cameras
or smartphones.


49
00:02:29.883 --> 00:02:32.919 line:-1 position:50%
iPhone cameras have
a minimum focus distance too,


50
00:02:32.919 --> 00:02:36.089 line:-1 position:50%
we've just never
published it before...


51
00:02:36.089 --> 00:02:38.058 line:-1 position:50%
...until now, that is.


52
00:02:38,058 --> 00:02:41,628 line:-1
Beginning in iOS 15,
minimum focus distance


53
00:02:41,628 --> 00:02:46,266 line:-1
is a published property
of iPhone autofocus cameras.


54
00:02:46,266 --> 00:02:48,668 line:-1
Here's a sampling
of recent iPhones.


55
00:02:48.668 --> 00:02:51.071 line:-1 position:50%
The chart illustrates how
the minimum focus distance


56
00:02:51,071 --> 00:02:53,340 line:-1
of the Wide and telephoto
cameras


57
00:02:53,340 --> 00:02:56,410 line:-1
varies from model to model.


58
00:02:56,410 --> 00:02:59,112 position:50%
There's a notable difference
between the iPhone 12 Pro


59
00:02:59,112 --> 00:03:02,549 position:50%
and 12 Pro Max Wide cameras,


60
00:03:02,549 --> 00:03:05,218 line:0
the Pro Max focusing
at a minimum distance


61
00:03:05,218 --> 00:03:09,756 line:0
of 15 centimeters
compared to 12 on the Pro.


62
00:03:09,756 --> 00:03:12,926 line:0
This is due to the sensor shift
stabilization technology


63
00:03:12,926 --> 00:03:16,463 position:50%
in the iPhone 12 Pro Max.


64
00:03:16,463 --> 00:03:19,433 line:0
Likewise, the minimum focus
distance of the tele


65
00:03:19,433 --> 00:03:23,770 line:0
is farther on the 12 Pro Max
than the 12 Pro.


66
00:03:23,770 --> 00:03:27,240 line:0
This is due to the longer reach
of the telephoto lens.


67
00:03:27,240 --> 00:03:32,446 position:50%
It has a 2.5x versus a 2x zoom.


68
00:03:32,446 --> 00:03:34,014 line:-1
Let me show you a quick demo


69
00:03:34,014 --> 00:03:37,884 line:-1
of why minimum focus distance
reporting is important.


70
00:03:42,222 --> 00:03:45,158 line:-1
Here's a sample app
called AVCamBarcode.


71
00:03:45,158 --> 00:03:48,929 line:-1
It showcases our AVFoundation
barcode detection APIs.


72
00:03:48.929 --> 00:03:51.731 line:-1 position:50%
The UI guides the user
to position an object


73
00:03:51.731 --> 00:03:54.534 line:-1 position:50%
inside of a rectangle
for scanning.


74
00:03:54.534 --> 00:03:57.237 line:-1 position:50%
In this example, I've chosen
a fairly small QR code


75
00:03:57.237 --> 00:03:59.473 line:-1 position:50%
on a piece of paper.


76
00:03:59,473 --> 00:04:02,309 line:-1
The barcode is only
20 millimeters wide.


77
00:04:02,309 --> 00:04:04,711 line:-1
By tapping on
the Metadata button,


78
00:04:04,711 --> 00:04:07,314 line:-1
I see a list of all
the various object types


79
00:04:07.314 --> 00:04:10.717 line:-1 position:50%
supported by
AVCaptureMetadataOutput.


80
00:04:10,717 --> 00:04:12,652 line:-1
There are a lot of them.


81
00:04:12,652 --> 00:04:15,555 line:0
I'll choose QRCodes


82
00:04:15,555 --> 00:04:18,325 position:50%
and then position
my iPhone 12 Pro Max camera


83
00:04:18,325 --> 00:04:21,528 line:0
to fill the rectangle
with the QRCode.


84
00:04:21.528 --> 00:04:23.864 line:-1 position:50%
Unfortunately, it's so small


85
00:04:23.864 --> 00:04:27.501 line:-1 position:50%
that I have to get very close
to the page to fill the preview.


86
00:04:27,501 --> 00:04:30,637 line:-1
That's closer than the camera's
minimum focus distance.


87
00:04:30.637 --> 00:04:33.840 line:-1 position:50%
The code is blurry,
so it doesn't scan.


88
00:04:33,840 --> 00:04:36,109 line:-1
To guide the user
to back away,


89
00:04:36,109 --> 00:04:39,746 line:-1
I need to apply a zoom factor
to the camera preview...


90
00:04:42,315 --> 00:04:44,417 line:-1
...like so.


91
00:04:44,417 --> 00:04:46,086 line:-1
Seeing a zoomed image
on the screen


92
00:04:46.086 --> 00:04:47.787 line:-1 position:50%
will prompt them
to physically move the camera


93
00:04:47.787 --> 00:04:49.789 line:-1 position:50%
farther away from the paper.


94
00:04:49.789 --> 00:04:51.591 line:-1 position:50%
I can do that
with a slider button,


95
00:04:51.591 --> 00:04:52.926 line:-1 position:50%
but it would be much better


96
00:04:52.926 --> 00:04:56.029 line:-1 position:50%
if the app took care
of the zoom automatically.


97
00:04:58,698 --> 00:05:01,234 line:-1
That's where the new
minimumFocusDistance property


98
00:05:01,234 --> 00:05:03,637 line:-1
of AVCaptureDevice comes in.


99
00:05:03.637 --> 00:05:06.740 line:-1 position:50%
It's new in iOS 15.


100
00:05:06.740 --> 00:05:09.943 line:-1 position:50%
Given the camera's
horizontal field of view,


101
00:05:09,943 --> 00:05:12,946 line:-1
the minimum barcode size
you'd like to scan --


102
00:05:12,946 --> 00:05:15,315 line:-1
here I've set it
to 20 millimeters --


103
00:05:15,315 --> 00:05:19,719 line:-1
and the width of the camera
preview window as a percentage,


104
00:05:19.719 --> 00:05:21.721 line:-1 position:50%
we can do a little math
to calculate


105
00:05:21,721 --> 00:05:23,523 line:-1
the minimum subject
distance needed


106
00:05:23,523 --> 00:05:26,493 line:-1
to fill that preview width.


107
00:05:26,493 --> 00:05:29,429 line:-1
Then, using the
new minimumFocusDistance


108
00:05:29.429 --> 00:05:32.966 line:-1 position:50%
property of the camera,
we can detect when our camera


109
00:05:32.966 --> 00:05:36.169 line:-1 position:50%
can't focus that close
and calculate a zoom factor


110
00:05:36.169 --> 00:05:39.873 line:-1 position:50%
large enough
to guide the user to back away.


111
00:05:39,873 --> 00:05:43,043 line:-1
And finally, we apply it
to the camera by locking it


112
00:05:43.043 --> 00:05:45.946 line:-1 position:50%
for configuration,
setting the zoom factor,


113
00:05:45,946 --> 00:05:48,949 line:-1
and then unlocking it.


114
00:05:48.949 --> 00:05:53.119 line:-1 position:50%
After recompiling our demo app,
the UI now automatically


115
00:05:53,119 --> 00:05:55,589 line:-1
applies the correct zoom amount.


116
00:05:58,024 --> 00:05:59,459 position:50%
As the app launches,


117
00:05:59,459 --> 00:06:02,329 line:0
it's already zoomed
to the correct space.


118
00:06:02,329 --> 00:06:05,165 line:0
No more blurry barcodes!


119
00:06:05.165 --> 00:06:10.704 line:-1 position:50%
And if I tap on it, we can see
where it takes me.


120
00:06:10,704 --> 00:06:12,906 line:-1
Ah! "Capturing Depth
in iPhone Photography" --


121
00:06:12,906 --> 00:06:14,374 line:-1
an oldie but a goodie.


122
00:06:14,374 --> 00:06:17,244 line:-1
I deeply appreciate
that session.


123
00:06:20,247 --> 00:06:22,482 line:-1
Please check out the new
AVCamBarcode sample


124
00:06:22.482 --> 00:06:24.618 line:-1 position:50%
for best practices
on how to incorporate


125
00:06:24.618 --> 00:06:26.486 line:-1 position:50%
minimum focus distance,


126
00:06:26.486 --> 00:06:31.358 line:-1 position:50%
as well as a lot of other best
practices for scanning barcodes.


127
00:06:31,358 --> 00:06:35,262 line:-1
Next up is 10-bit HDR video.


128
00:06:35,262 --> 00:06:37,731 line:-1
HDR stands for
High Dynamic Range,


129
00:06:37,731 --> 00:06:39,833 line:-1
and it's been around
as a still image technology


130
00:06:39.833 --> 00:06:43.270 line:-1 position:50%
since way back in iOS 4.1.


131
00:06:43,270 --> 00:06:45,739 line:-1
Preserving High Dynamic Range
is usually accomplished


132
00:06:45.739 --> 00:06:48.475 line:-1 position:50%
by taking multiple exposures
of a scene


133
00:06:48.475 --> 00:06:50.510 line:-1 position:50%
and then blending them
to preserve


134
00:06:50,510 --> 00:06:53,513 line:-1
both highlights and shadows.


135
00:06:53.513 --> 00:06:56.383 line:-1 position:50%
But what about video HDR?


136
00:06:56,383 --> 00:06:58,418 line:-1
That's a challenge since
you've got to deliver


137
00:06:58.418 --> 00:07:02.289 line:-1 position:50%
30 or 60 frames a second.


138
00:07:02.289 --> 00:07:05.392 line:-1 position:50%
Not exactly Video HDR --
but close --


139
00:07:05,392 --> 00:07:10,597 line:-1
in 2018, Apple introduced EDR,
or Extended Dynamic Range,


140
00:07:10.597 --> 00:07:13.833 line:-1 position:50%
to the iPhone XS camera line.


141
00:07:13,833 --> 00:07:18,038 line:-1
EDR is an HDR-like solution
for video.


142
00:07:18.038 --> 00:07:20.473 line:-1 position:50%
It essentially doubles
the capture frame rate,


143
00:07:20.473 --> 00:07:25.645 line:-1 position:50%
alternating between standard
exposures and short exposures,


144
00:07:25,645 --> 00:07:27,714 line:-1
but timed so there's virtually
no vertical blanking


145
00:07:27,714 --> 00:07:30,116 line:-1
between the captures.


146
00:07:30,116 --> 00:07:32,852 line:-1
When nominally capturing
30 frames per second,


147
00:07:32,852 --> 00:07:35,121 line:-1
EDR video is actually
running the camera


148
00:07:35,121 --> 00:07:38,491 line:-1
at 60 frames a second.


149
00:07:38.491 --> 00:07:40.260 line:-1 position:50%
When required by the scene,


150
00:07:40.260 --> 00:07:43.663 line:-1 position:50%
the hue map from the EV-
is dynamically applied


151
00:07:43,663 --> 00:07:47,167 line:-1
to the EV0 image
to recover clipped highlights,


152
00:07:47.167 --> 00:07:50.337 line:-1 position:50%
but without sacrificing detail
in the shadow.


153
00:07:50,337 --> 00:07:52,706 line:-1
It's not a full HDR solution,


154
00:07:52.706 --> 00:07:55.475 line:-1 position:50%
as its effectiveness
diminishes in low light,


155
00:07:55,475 --> 00:08:00,513 line:-1
but it provides amazing results
in medium to good light.


156
00:08:00,513 --> 00:08:02,615 line:-1
Now here's the confusing part.


157
00:08:02.615 --> 00:08:06.786 line:-1 position:50%
EDR was presented as a suite
of AVCaptureDevice properties


158
00:08:06,786 --> 00:08:10,523 line:-1
under the moniker of videoHDR.


159
00:08:10,523 --> 00:08:13,159 line:-1
Wherever you see
videoHDRSupported


160
00:08:13,159 --> 00:08:16,863 line:-1
or videoHDREnabled
in the AVCapture API,


161
00:08:16.863 --> 00:08:19.599 line:-1 position:50%
you should mentally
substitute EDR.


162
00:08:19,599 --> 00:08:22,435 line:-1
That's what it is.


163
00:08:22,435 --> 00:08:24,471 line:-1
AVCaptureDevice
also has a property


164
00:08:24,471 --> 00:08:28,575 line:-1
called "automaticallyAdjusts
VideoHDREnabled",


165
00:08:28,575 --> 00:08:30,710 line:-1
which defaults to true.


166
00:08:30,710 --> 00:08:35,115 line:-1
So EDR is enabled automatically
whenever it's available.


167
00:08:35.115 --> 00:08:37.384 line:-1 position:50%
If for some reason
you wish to disable it,


168
00:08:37,384 --> 00:08:38,318 line:-1
you need to set


169
00:08:38,318 --> 00:08:42,555 line:-1
automaticallyAdjustsVideo
HDREnabled to false,


170
00:08:42,555 --> 00:08:48,762 line:-1
and then set videoHDREnabled
to false as well.


171
00:08:48.762 --> 00:08:50.997 line:-1 position:50%
Now the story gets even better.


172
00:08:50,997 --> 00:08:53,266 line:-1
I needed to tell you about EDR


173
00:08:53,266 --> 00:08:58,872 line:-1
so I could tell you
about 10-bit HDR Video.


174
00:08:58,872 --> 00:09:02,742 line:-1
10-bit HDR video
is truly High Dynamic Range


175
00:09:02,742 --> 00:09:04,744 line:-1
because it's got more bits!


176
00:09:04.744 --> 00:09:07.714 line:-1 position:50%
That means increased
editability.


177
00:09:07.714 --> 00:09:10.250 line:-1 position:50%
It's got EDR
for highlight recovery,


178
00:09:10.250 --> 00:09:12.152 line:-1 position:50%
and it's always on.


179
00:09:12.152 --> 00:09:14.921 line:-1 position:50%
It uses hybrid log gamma curves


180
00:09:14.921 --> 00:09:18.124 line:-1 position:50%
as well as the BT.2020
color space,


181
00:09:18,124 --> 00:09:20,960 line:-1
allowing for even greater
contrast of colors --


182
00:09:20,960 --> 00:09:23,997 line:-1
brighter brights than Rec 709.


183
00:09:23.997 --> 00:09:26.399 line:-1 position:50%
And whether you use
AVCaptureMovieFileOutput


184
00:09:26,399 --> 00:09:30,904 line:-1
or AVCaptureVideoDataOutput
plus AVAssetWriter,


185
00:09:30.904 --> 00:09:34.107 line:-1 position:50%
we automatically insert
per-frame Dolby Vision metadata


186
00:09:34,107 --> 00:09:35,708 line:-1
into your movies,


187
00:09:35,708 --> 00:09:39,879 line:-1
making them compatible
with Dolby Vision displays.


188
00:09:39,879 --> 00:09:45,452 line:-1
10-bit HDR video was first
introduced on the iPhone 12.


189
00:09:45,452 --> 00:09:47,420 line:-1
10-bit HDR video formats
can be identified


190
00:09:47.420 --> 00:09:50.190 line:-1 position:50%
by their unique
pixel format type.


191
00:09:50,190 --> 00:09:52,926 line:-1
On older iPhone models,
cameras have


192
00:09:52.926 --> 00:09:56.963 line:-1 position:50%
AVCaptureDeviceFormats
that always come in pairs.


193
00:09:56,963 --> 00:09:59,599 line:-1
For each resolution
and frame rate range,


194
00:09:59.599 --> 00:10:03.503 line:-1 position:50%
there's a 420v
and a 420f format.


195
00:10:03,503 --> 00:10:07,106 line:-1
These are 8-bit, biplanar,
YUV formats.


196
00:10:07,106 --> 00:10:13,012 line:-1
The V in 420v stands for
video range -- or 16 to 235 --


197
00:10:13,012 --> 00:10:21,054 line:-1
and the F in 420f stands for
full range -- or 0 to 255.


198
00:10:21.054 --> 00:10:23.056 line:-1 position:50%
On iPhone 12 models,


199
00:10:23.056 --> 00:10:26.159 line:-1 position:50%
some formats come in
clusters of three.


200
00:10:26,159 --> 00:10:31,264 line:-1
After the 420v and 420f formats
comes an x420 format


201
00:10:31,264 --> 00:10:34,267 line:-1
of the same resolution
and frame rate range.


202
00:10:34.267 --> 00:10:40.840 line:-1 position:50%
Like 420v, x420 is a biplanar
420 format in video range,


203
00:10:40,840 --> 00:10:46,946 line:-1
but the x in x420 stands for
10 bits instead of 8.


204
00:10:46,946 --> 00:10:50,884 line:-1
To find and select a 10-bit HDR
video format in code,


205
00:10:50.884 --> 00:10:53.653 line:-1 position:50%
simply iterate through
the AVCaptureDevice formats


206
00:10:53,653 --> 00:10:57,590 line:-1
until you find one whose
pixel format matches x420,


207
00:10:57.590 --> 00:11:06.900 line:-1 position:50%
or -- deep breath --
420YpCbCr10BiPlanarVideoRange.


208
00:11:06.900 --> 00:11:09.068 line:-1 position:50%
You can of course include
other search criteria,


209
00:11:09,068 --> 00:11:13,439 line:-1
such as width, height,
and max frame rate.


210
00:11:13,439 --> 00:11:15,341 line:-1
We've updated
our AVCam sample code


211
00:11:15,341 --> 00:11:18,678 line:-1
to support 10-bit HDR video
when available.


212
00:11:18.678 --> 00:11:20.480 line:-1 position:50%
There's a handy utility function
in it


213
00:11:20.480 --> 00:11:23.516 line:-1 position:50%
called "tenBitVariantOfFormat"


214
00:11:23.516 --> 00:11:25.785 line:-1 position:50%
which can find
the 10-bit HDR variant of


215
00:11:25.785 --> 00:11:29.355 line:-1 position:50%
whatever the currently selected
device active format is.


216
00:11:29,355 --> 00:11:32,358 line:-1
Please take a look.


217
00:11:32,358 --> 00:11:34,294 line:-1
10-bit HDR video is supported


218
00:11:34,294 --> 00:11:36,429 line:-1
in all the most popular
video formats,


219
00:11:36.429 --> 00:11:41.367 line:-1 position:50%
including 720p, 1080p, and 4K.


220
00:11:41.367 --> 00:11:43.870 line:-1 position:50%
And we included
a 4 by 3 format as well --


221
00:11:43.870 --> 00:11:48.107 line:-1 position:50%
1920 by 1440 -- which does
support 12 megapixel,


222
00:11:48,107 --> 00:11:50,176 line:-1
high-resolution photos.


223
00:11:53,046 --> 00:11:56,449 line:0
While capturing
10-bit HDR video is simple,


224
00:11:56,449 --> 00:12:00,520 line:0
editing and playing it back
properly is tricky.


225
00:12:00,520 --> 00:12:03,923 position:50%
I invite you to watch
a companion session from 2020


226
00:12:03,923 --> 00:12:10,063 line:0
entitled "Edit and play back HDR
video with AVFoundation."


227
00:12:10,063 --> 00:12:12,899 line:-1
All right, that's it
for HDR video.


228
00:12:14,901 --> 00:12:20,306 line:-1
Now on to the main event:
Video Effects in Control Center.


229
00:12:20,306 --> 00:12:24,077 line:-1
Put simply, these are
system-level camera features


230
00:12:24.077 --> 00:12:28.615 line:-1 position:50%
that are available in your apps
with no code changes.


231
00:12:28,615 --> 00:12:32,185 line:-1
And the user is in control.


232
00:12:32,185 --> 00:12:34,420 line:-1
This is a bit of a departure
for us.


233
00:12:34,420 --> 00:12:36,990 line:-1
Traditionally, when we introduce
a new camera feature


234
00:12:36,990 --> 00:12:42,495 line:-1
in iOS or macOS, Apple's apps
adopt it out of the box.


235
00:12:42,495 --> 00:12:45,498 line:-1
We expose new AVCapture APIs,


236
00:12:45,498 --> 00:12:48,835 line:-1
you learn about them --
just as you're doing now --


237
00:12:48,835 --> 00:12:51,804 line:-1
and then you adopt the feature
at your own pace.


238
00:12:51,804 --> 00:12:54,140 line:-1
This is a safe and conservative
approach,


239
00:12:54.140 --> 00:12:56.142 line:-1 position:50%
but often results
in a long lead time


240
00:12:56.142 --> 00:12:58.411 line:-1 position:50%
in which users miss out
on a great feature


241
00:12:58.411 --> 00:13:01.447 line:-1 position:50%
in their favorite camera apps.


242
00:13:01,447 --> 00:13:03,716 line:-1
With Video Effects
in Control Center,


243
00:13:03.716 --> 00:13:08.121 line:-1 position:50%
we are introducing system-level
prepackaged camera features


244
00:13:08.121 --> 00:13:11.290 line:-1 position:50%
that are available
to everyone right away


245
00:13:11.290 --> 00:13:16.362 line:-1 position:50%
with no code changes,
and the user is in control.


246
00:13:16,362 --> 00:13:19,866 line:-1
We do continue to expose
new APIs for these features,


247
00:13:19.866 --> 00:13:22.902 line:-1 position:50%
so you can tailor the experience
in your app


248
00:13:22,902 --> 00:13:26,139 line:-1
as soon as your release
schedule allows.


249
00:13:26,139 --> 00:13:28,141 line:-1
Let's take a look
at these effects.


250
00:13:28.141 --> 00:13:29.409 line:-1 position:50%
The first was announced
at our May


251
00:13:29,409 --> 00:13:34,747 line:-1
Spring Loaded Apple event
and it's called "Center Stage".


252
00:13:34.747 --> 00:13:38.785 line:-1 position:50%
It's available on the recently
released M1 iPad Pro models


253
00:13:38,785 --> 00:13:40,453 line:-1
and it makes use
of their incredible


254
00:13:40,453 --> 00:13:44,323 line:-1
12 megapixel Ultra Wide
front-facing cameras.


255
00:13:44.323 --> 00:13:45.925 line:-1 position:50%
Center Stage really enhances


256
00:13:45,925 --> 00:13:49,095 line:-1
the production value
of your FaceTime video calls.


257
00:13:49.095 --> 00:13:50.897 line:-1 position:50%
It also works great
out of the box


258
00:13:50.897 --> 00:13:53.099 line:-1 position:50%
in every other
video conferencing app.


259
00:13:53.099 --> 00:13:55.935 line:-1 position:50%
Here, let me show you.


260
00:13:55.935 --> 00:13:58.304 line:-1 position:50%
I've just downloaded Skype
from the App Store;


261
00:13:58.304 --> 00:14:00.573 line:-1 position:50%
this is a stock version
of the app.


262
00:14:03,409 --> 00:14:05,111 line:-1
When I start a Skype call,


263
00:14:05,111 --> 00:14:08,381 line:-1
you immediately see Center Stage
kick into action.


264
00:14:08,381 --> 00:14:12,385 line:-1
It's kind of like having your
own personal camera operator.


265
00:14:12,385 --> 00:14:14,721 line:-1
It frames you as you
move around the scene


266
00:14:14,721 --> 00:14:18,658 line:-1
to keep you perfectly framed,
whether you come in tight


267
00:14:18.658 --> 00:14:22.729 line:-1 position:50%
or you move back
and like to pace.


268
00:14:22,729 --> 00:14:24,764 line:-1
it can even track you
when you turn your face


269
00:14:24.764 --> 00:14:26.299 line:-1 position:50%
away from the camera.


270
00:14:26,299 --> 00:14:31,137 line:-1
That's because it tracks bodies,
not just faces.


271
00:14:31.137 --> 00:14:33.873 line:-1 position:50%
As a user,
I can control Center Stage


272
00:14:33,873 --> 00:14:37,710 line:-1
by simply swiping down
for Control Center,


273
00:14:37,710 --> 00:14:40,646 line:-1
tapping on the new
Video Effects module,


274
00:14:40,646 --> 00:14:43,049 line:-1
and making my selection.


275
00:14:43.049 --> 00:14:46.119 line:-1 position:50%
As I turn Center Stage off
and go back to the app,


276
00:14:46.119 --> 00:14:49.989 line:-1 position:50%
I no longer get the Center Stage effect.


277
00:14:49,989 --> 00:14:52,492 line:-1
No changes in the app.


278
00:14:52.492 --> 00:14:55.428 line:-1 position:50%
There's a companion new feature
that all video conferencing apps


279
00:14:55.428 --> 00:14:59.098 line:-1 position:50%
get as well,
and that's called "Portrait".


280
00:14:59.098 --> 00:15:01.267 line:-1 position:50%
Portrait mode offers me
a beautifully rendered


281
00:15:01,267 --> 00:15:03,569 line:-1
shallow depth-of-field effect.


282
00:15:03.569 --> 00:15:06.472 line:-1 position:50%
It's not just a simple
privacy blur;


283
00:15:06.472 --> 00:15:08.441 line:-1 position:50%
it uses
Apple's Neural Engine


284
00:15:08,441 --> 00:15:11,677 line:-1
plus a trained monocular
depth network


285
00:15:11,677 --> 00:15:16,382 line:-1
to approximate a real camera
with a wide-open lens.


286
00:15:16,382 --> 00:15:19,952 line:-1
Now let's take a look finally
at the mic modes


287
00:15:19.952 --> 00:15:26.759 line:-1 position:50%
by swiping down and picking
the Mic Mode module,


288
00:15:26,759 --> 00:15:31,264 line:-1
I can make my choice between
Standard, Voice Isolation,


289
00:15:31,264 --> 00:15:33,533 line:-1
or Wide Spectrum.


290
00:15:33.533 --> 00:15:37.436 line:-1 position:50%
Mic modes enhance the audio
quality in your video chats.


291
00:15:37.436 --> 00:15:39.739 line:-1 position:50%
More on these in a minute.


292
00:15:39,739 --> 00:15:42,775 line:-1
While Center Stage,
Portrait, and Mic Modes


293
00:15:42.775 --> 00:15:45.545 line:-1 position:50%
share screen real estate
in Control Center,


294
00:15:45.545 --> 00:15:48.381 line:-1 position:50%
they differ somewhat
in API treatment.


295
00:15:48,381 --> 00:15:50,750 line:-1
I'll introduce you
to Center Stage APIs first


296
00:15:50,750 --> 00:15:54,187 line:-1
and then to Portrait
and Mic Modes.


297
00:15:54.187 --> 00:15:56.722 line:-1 position:50%
Center Stage is available
on all the front cameras


298
00:15:56.722 --> 00:15:59.892 line:-1 position:50%
of the M1 iPad Pros.


299
00:15:59,892 --> 00:16:03,095 line:-1
Whether you're using the new
front-facing Ultra Wide camera,


300
00:16:03,095 --> 00:16:05,064 line:-1
the Virtual Wide camera --


301
00:16:05,064 --> 00:16:08,267 line:-1
which presents a cropped,
conventional field of view --


302
00:16:08.267 --> 00:16:13.406 line:-1 position:50%
or the Virtual TrueDepth camera,
Center Stage is available.


303
00:16:13.406 --> 00:16:15.775 line:-1 position:50%
The TrueDepth camera
comes with some conditions,


304
00:16:15,775 --> 00:16:19,278 line:-1
which I'll cover momentarily.


305
00:16:19,278 --> 00:16:21,113 line:-1
The Control Center
Video Effects module


306
00:16:21.113 --> 00:16:24.450 line:-1 position:50%
presents an on/off toggle
per app.


307
00:16:24,450 --> 00:16:27,086 line:-1
This allows you to default
Center Stage to on


308
00:16:27.086 --> 00:16:28.688 line:-1 position:50%
in a conferencing app,


309
00:16:28.688 --> 00:16:31.891 line:-1 position:50%
while defaulting it to off
in a pro photography app


310
00:16:31,891 --> 00:16:34,794 line:-1
where you want to frame
your shot manually.


311
00:16:34,794 --> 00:16:40,233 line:-1
There's one state per app,
not one state per camera.


312
00:16:40,233 --> 00:16:43,369 line:-1
Because the Center Stage
on/off toggle is per app,


313
00:16:43,369 --> 00:16:46,239 line:-1
not per camera,
it's presented in the API


314
00:16:46,239 --> 00:16:50,243 line:-1
as a set of class properties
on AVCaptureDevice.


315
00:16:50.243 --> 00:16:55.147 line:-1 position:50%
These are readable, writable,
and key-value observable.


316
00:16:55,147 --> 00:16:58,351 line:-1
centerStageEnabled
matches the on/off state


317
00:16:58.351 --> 00:17:01.954 line:-1 position:50%
of the Center Stage UI
in Control Center.


318
00:17:01,954 --> 00:17:05,258 line:-1
The Center Stage control mode
dictates who is allowed


319
00:17:05,258 --> 00:17:07,360 line:-1
to toggle the enabled state.


320
00:17:07.360 --> 00:17:10.363 line:-1 position:50%
More on that in a minute.


321
00:17:10.363 --> 00:17:13.933 line:-1 position:50%
Not all cameras or formats
support Center Stage.


322
00:17:13,933 --> 00:17:16,769 line:-1
You can iterate through
the formats array of any camera


323
00:17:16.769 --> 00:17:19.405 line:-1 position:50%
to find a format
that supports the feature


324
00:17:19.405 --> 00:17:22.575 line:-1 position:50%
and set it
as your activeFormat.


325
00:17:22.575 --> 00:17:24.577 line:-1 position:50%
Additionally, you can find out


326
00:17:24,577 --> 00:17:28,080 line:-1
if Center Stage is currently
active for a particular camera


327
00:17:28.080 --> 00:17:34.186 line:-1 position:50%
by querying or observing its
Center Stage active property.


328
00:17:34,186 --> 00:17:37,123 line:-1
You should be aware
of Center Stage's limitations.


329
00:17:37,123 --> 00:17:40,826 line:-1
Center Stage uses
the full 12-megapixel format


330
00:17:40,826 --> 00:17:44,730 line:-1
of the Ultra Wide camera,
which is a 30 fps format,


331
00:17:44.730 --> 00:17:48.167 line:-1 position:50%
so the max frame rate
is limited to 30.


332
00:17:48,167 --> 00:17:52,071 line:-1
Center Stage avoids upscaling
to preserve image quality,


333
00:17:52.071 --> 00:17:59.445 line:-1 position:50%
so it's limited to a max output
resolution of 1920 by 1440.


334
00:17:59,445 --> 00:18:03,115 line:-1
Pan and zoom must remain
under Center Stage control,


335
00:18:03,115 --> 00:18:07,620 line:-1
so video zoom factor
is locked at one.


336
00:18:07,620 --> 00:18:09,388 line:-1
Geometric distortion correction


337
00:18:09,388 --> 00:18:12,959 line:-1
is integral to Center Stage's
people framing,


338
00:18:12.959 --> 00:18:15.528 line:-1 position:50%
and depth delivery must be off,


339
00:18:15,528 --> 00:18:18,130 line:-1
since depth generation
requires matching


340
00:18:18.130 --> 00:18:23.970 line:-1 position:50%
full field of view images from
the RGB and infrared cameras.


341
00:18:23.970 --> 00:18:27.873 line:-1 position:50%
Now let's get into the concept
of control modes.


342
00:18:27.873 --> 00:18:30.810 line:-1 position:50%
Center Stage has three
supported modes:


343
00:18:30.810 --> 00:18:36.515 line:-1 position:50%
user, app, and cooperative.


344
00:18:36,515 --> 00:18:39,118 line:-1
User mode is the default
Center Stage control mode


345
00:18:39,118 --> 00:18:40,920 line:-1
for all apps.


346
00:18:40,920 --> 00:18:44,857 line:-1
In this mode, only the user
can turn the feature on and off.


347
00:18:44.857 --> 00:18:46.892 line:-1 position:50%
If your app tries
to programmatically change


348
00:18:46,892 --> 00:18:48,794 line:-1
the Center Stage
enabled state,


349
00:18:48,794 --> 00:18:52,098 line:-1
an exception is thrown.


350
00:18:52.098 --> 00:18:53.733 line:-1 position:50%
Next is the app mode,


351
00:18:53.733 --> 00:18:57.503 line:-1 position:50%
wherein only your app is allowed
to control the feature.


352
00:18:57,503 --> 00:18:59,338 line:-1
Users can't use Control Center


353
00:18:59,338 --> 00:19:02,208 line:-1
because the toggle
is grayed out there.


354
00:19:02,208 --> 00:19:04,443 line:-1
Use of this mode
is discouraged.


355
00:19:04,443 --> 00:19:06,145 line:-1
You should only use it
if Center Stage


356
00:19:06.145 --> 00:19:08.614 line:-1 position:50%
is incompatible
with your app.


357
00:19:08.614 --> 00:19:10.383 line:-1 position:50%
If you do need to opt out,


358
00:19:10.383 --> 00:19:13.886 line:-1 position:50%
you can set the control mode
to app,


359
00:19:13,886 --> 00:19:18,791 line:-1
then set isCenterStageEnabled
to false.


360
00:19:18,791 --> 00:19:21,727 line:-1
The best possible
user experience for Center Stage


361
00:19:21,727 --> 00:19:23,396 line:-1
is the cooperative mode,


362
00:19:23.396 --> 00:19:26.966 line:-1 position:50%
in which the user can control
the feature in Control Center,


363
00:19:26,966 --> 00:19:31,470 line:-1
and your app can control it
with your own UI.


364
00:19:31.470 --> 00:19:33.506 line:-1 position:50%
You need to do
some extra work, though.


365
00:19:33.506 --> 00:19:34.940 line:-1 position:50%
You must observe the


366
00:19:34,940 --> 00:19:38,677 line:-1
AVCaptureDevice
.isCenterStageEnabled property


367
00:19:38,677 --> 00:19:42,114 line:-1
and update your UI to make sure
Center Stage is on


368
00:19:42,114 --> 00:19:44,950 line:-1
when the user wants it on.


369
00:19:44,950 --> 00:19:47,319 position:50%
After setting the control mode
to cooperative,


370
00:19:47,319 --> 00:19:51,357 line:0
you can set center stage
enabled to true or false --


371
00:19:51,357 --> 00:19:54,193 line:0
based on a button
in your app, for instance.


372
00:19:54.193 --> 00:19:58.998 line:-1 position:50%
The poster child for
cooperative mode is FaceTime.


373
00:19:58.998 --> 00:20:00.666 line:-1 position:50%
While I'm in a FaceTime call,


374
00:20:00,666 --> 00:20:02,968 line:-1
I can use a button
right within the app


375
00:20:02,968 --> 00:20:07,873 line:-1
to turn Center Stage on
so that it tracks me,


376
00:20:07.873 --> 00:20:10.242 line:-1 position:50%
or I can use
the conventional method


377
00:20:10.242 --> 00:20:12.745 line:-1 position:50%
of swiping down
in Control Center


378
00:20:12,745 --> 00:20:16,549 line:-1
and turning Center Stage
on or off.


379
00:20:16,549 --> 00:20:18,951 line:-1
FaceTime and Control Center
cooperate


380
00:20:18,951 --> 00:20:20,753 line:-1
on the state of Center Stage


381
00:20:20,753 --> 00:20:23,489 line:-1
so that it's always matching
user intent.


382
00:20:23,489 --> 00:20:25,157 line:-1
FaceTime is also
smart enough to know


383
00:20:25,157 --> 00:20:27,893 line:-1
when features
are mutually incompatible.


384
00:20:27,893 --> 00:20:31,197 line:-1
So if, for instance,
I tried to turn on Animoji,


385
00:20:31,197 --> 00:20:33,199 line:-1
which requires depth...


386
00:20:38,771 --> 00:20:41,040 line:-1
...it knows to turn
Center Stage off,


387
00:20:41,040 --> 00:20:44,243 line:-1
because those two features
are mutually incompatible.


388
00:20:44.243 --> 00:20:47.480 line:-1 position:50%
If I tap to turn Center Stage
back on,


389
00:20:47.480 --> 00:20:52.051 line:-1 position:50%
FaceTime knows
to disable Animoji.


390
00:20:52,051 --> 00:20:54,487 line:-1
That wraps up
Center Stage API.


391
00:20:54.487 --> 00:20:56.222 line:-1 position:50%
Let's transition over
to Center Stage's


392
00:20:56,222 --> 00:21:00,793 line:-1
roommate in Control Center,
Portrait.


393
00:21:00,793 --> 00:21:02,828 line:-1
Put simply,
it's a beautifully rendered


394
00:21:02,828 --> 00:21:04,463 line:-1
shallow depth-of-field
effect,


395
00:21:04.463 --> 00:21:08.434 line:-1 position:50%
designed to look like
a wide-aperture lens.


396
00:21:08.434 --> 00:21:10.736 line:-1 position:50%
On iOS, Portrait is supported


397
00:21:10,736 --> 00:21:13,606 line:-1
on all devices
with Apple Neural Engine --


398
00:21:13,606 --> 00:21:17,409 line:-1
that's 2018 and newer
phones and pads.


399
00:21:17.409 --> 00:21:20.412 line:-1 position:50%
Only the front-facing camera
is supported.


400
00:21:20.412 --> 00:21:22.915 line:-1 position:50%
It's also supported
on all M1 Macs,


401
00:21:22.915 --> 00:21:27.086 line:-1 position:50%
which likewise contain
Apple's Neural Engine.


402
00:21:27.086 --> 00:21:30.689 line:-1 position:50%
Portrait is a computationally
complex algorithm.


403
00:21:30,689 --> 00:21:33,959 line:-1
Thus, to keep video rendering
performance responsive,


404
00:21:33,959 --> 00:21:38,764 line:-1
it's limited to a max resolution
of 1920 by 1440


405
00:21:38,764 --> 00:21:42,801 line:-1
and a max resolution
of 30 frames per second.


406
00:21:46.705 --> 00:21:48.174 line:-1 position:50%
Like Center Stage,


407
00:21:48.174 --> 00:21:52.645 line:-1 position:50%
the Portrait effect has
a sticky on/off state per app.


408
00:21:52,645 --> 00:21:55,681 line:-1
Its API is simpler than
Center Stage's,


409
00:21:55.681 --> 00:21:59.451 line:-1 position:50%
the user is always in control
through Control Center,


410
00:21:59,451 --> 00:22:01,253 line:-1
and it's only available
by default


411
00:22:01,253 --> 00:22:04,023 line:-1
in certain classes of apps.


412
00:22:04,023 --> 00:22:08,160 line:-1
On iOS, apps that use
the VoIP UIBackgroundMode


413
00:22:08,160 --> 00:22:10,396 line:-1
are automatically opted in --


414
00:22:10.396 --> 00:22:14.400 line:-1 position:50%
users can turn the effect
on or off in Control Center.


415
00:22:14.400 --> 00:22:17.636 line:-1 position:50%
All other iOS apps must opt in
to declare themselves


416
00:22:17.636 --> 00:22:19.672 line:-1 position:50%
eligible for the Portrait effect


417
00:22:19.672 --> 00:22:23.175 line:-1 position:50%
by adding a new key
to their app's Info.plist:


418
00:22:23,175 --> 00:22:26,512 line:-1
NSCameraPortraitEffectEnabled.


419
00:22:26,512 --> 00:22:29,815 line:-1
On macOS, all apps
are automatically opted in,


420
00:22:29,815 --> 00:22:33,219 line:-1
and can use the effect
out-of-the-box.


421
00:22:33.219 --> 00:22:36.055 line:-1 position:50%
The Portrait effect is always
under user control


422
00:22:36,055 --> 00:22:38,023 line:-1
through Control Center only.


423
00:22:38.023 --> 00:22:39.558 line:-1 position:50%
As with Center Stage,


424
00:22:39.558 --> 00:22:43.796 line:-1 position:50%
not all cameras or formats
support Portrait.


425
00:22:43,796 --> 00:22:46,599 line:-1
You can iterate through
the formats array of any camera


426
00:22:46,599 --> 00:22:49,168 line:-1
to find a format that supports
the feature,


427
00:22:49,168 --> 00:22:52,838 line:-1
and set it
as your active format.


428
00:22:52.838 --> 00:22:55.641 line:-1 position:50%
You can also find out
if Portrait is currently active


429
00:22:55,641 --> 00:22:58,577 line:-1
for a particular camera
by querying or observing


430
00:22:58.577 --> 00:23:03.249 line:-1 position:50%
its isPortraitEffectActive
property.


431
00:23:03,249 --> 00:23:06,385 line:-1
Mic Mode APIs
are analogous to Portrait.


432
00:23:08,053 --> 00:23:11,423 line:-1
User selection
is sticky per app.


433
00:23:11,423 --> 00:23:14,193 line:-1
Users are always in control;


434
00:23:14,193 --> 00:23:17,263 line:-1
your app can't
set the Mic Mode directly.


435
00:23:17,263 --> 00:23:21,500 line:-1
Some apps need to opt in
to use the feature.


436
00:23:21,500 --> 00:23:22,668 line:-1
Mic Modes are presented


437
00:23:22,668 --> 00:23:25,738 line:-1
in AVFoundation's
AVCaptureDevice interface,


438
00:23:25,738 --> 00:23:27,973 line:-1
and there are three flavors:


439
00:23:27,973 --> 00:23:32,077 line:-1
standard, which uses
standard audio DSP;


440
00:23:32.077 --> 00:23:34.880 line:-1 position:50%
wide spectrum,
which minimizes processing


441
00:23:34,880 --> 00:23:37,416 line:-1
to capture all sounds
around the device


442
00:23:37.416 --> 00:23:40.486 line:-1 position:50%
but it still includes
echo cancellation;


443
00:23:40.486 --> 00:23:44.123 line:-1 position:50%
and voice isolation,
which enhances speech


444
00:23:44.123 --> 00:23:46.458 line:-1 position:50%
and removes unwanted
background noise


445
00:23:46.458 --> 00:23:49.662 line:-1 position:50%
such as typing on keyboards,
mouse clicks,


446
00:23:49,662 --> 00:23:52,865 line:-1
or leaf blowers running
somewhere in the neighborhood.


447
00:23:52,865 --> 00:23:56,702 line:-1
These flavors can only be set
by the user in Control Center,


448
00:23:56,702 --> 00:23:58,871 line:-1
but you can read and observe
their state


449
00:23:58,871 --> 00:24:02,808 line:-1
using AVCaptureDevice's
preferredMicrophoneMode --


450
00:24:02,808 --> 00:24:05,577 line:-1
which is the mode
selected by the user --


451
00:24:05.577 --> 00:24:10.549 line:-1 position:50%
and activeMicrophoneMode --
which is the mode now in use,


452
00:24:10,549 --> 00:24:12,851 line:-1
taking into account
the current audio route,


453
00:24:12,851 --> 00:24:17,523 line:-1
which may not support
the user's preferred Mic Mode.


454
00:24:17,523 --> 00:24:19,325 line:-1
In order to use Mic Modes,


455
00:24:19,325 --> 00:24:24,296 line:-1
your app must adopt the
Core Audio AUVoiceIO audio unit.


456
00:24:24,296 --> 00:24:27,132 line:-1
This is a popular interface
in video conferencing apps,


457
00:24:27.132 --> 00:24:30.436 line:-1 position:50%
since it performs
echo cancellation.


458
00:24:30,436 --> 00:24:34,640 line:-1
And Mic Mode processing is only
available on 2018 and later


459
00:24:34,640 --> 00:24:38,444 line:-1
iOS and macOS devices.


460
00:24:38.444 --> 00:24:42.481 line:-1 position:50%
With Portrait and Mic Modes,
the user is always in control,


461
00:24:42,481 --> 00:24:45,718 line:-1
but you can prompt them
to turn the feature off or on


462
00:24:45,718 --> 00:24:48,287 line:-1
by calling the new
AVCaptureDevice


463
00:24:48.287 --> 00:24:51.156 line:-1 position:50%
.showSystemUserInterface
method.


464
00:24:51,156 --> 00:24:57,062 line:-1
And you can pass it either
videoEffects or microphoneModes.


465
00:24:57,062 --> 00:24:59,365 line:-1
Calling this API
opens Control Center


466
00:24:59,365 --> 00:25:02,668 line:-1
and deeplinks to the appropriate
submodule.


467
00:25:02,668 --> 00:25:05,571 line:-1
Here, we're drilling down
to the Video Effects module,


468
00:25:05,571 --> 00:25:09,141 line:-1
where the user can choose
to turn Portrait off.


469
00:25:12,177 --> 00:25:13,812 line:-1
That wraps up Portrait,


470
00:25:13,812 --> 00:25:17,049 line:-1
and wraps up Video Effects
in Control Center.


471
00:25:17.049 --> 00:25:19.852 line:-1 position:50%
I've just shown you examples
of system-level camera features


472
00:25:19,852 --> 00:25:23,789 line:-1
injected into your app without
you changing a line of code --


473
00:25:23,789 --> 00:25:26,125 line:-1
a pretty powerful concept!


474
00:25:26,125 --> 00:25:27,693 line:0
There's a companion session
to this one


475
00:25:27,693 --> 00:25:31,930 line:0
called "Capture high-quality
photos using video formats",


476
00:25:31,930 --> 00:25:33,632 position:50%
where you'll learn about
improvements we've made


477
00:25:33,632 --> 00:25:36,034 position:50%
to still image quality
in your apps


478
00:25:36,034 --> 00:25:38,370 line:0
without you changing
a line of code.


479
00:25:38,370 --> 00:25:41,540 line:0
Please check it out.


480
00:25:41,540 --> 00:25:43,909 line:-1
We've covered
a lot of new features.


481
00:25:43,909 --> 00:25:45,511 line:-1
At this point in the session,


482
00:25:45,511 --> 00:25:48,847 line:-1
I'd like to take a breather
and talk about performance.


483
00:25:48,847 --> 00:25:51,917 line:-1
Center Stage and Portrait
are great new user features,


484
00:25:51,917 --> 00:25:56,522 line:-1
but they do carry an added
performance cost.


485
00:25:56,522 --> 00:25:59,024 line:-1
So let's review
performance best practices


486
00:25:59,024 --> 00:26:01,894 line:-1
to make sure your camera apps
are ready for new features


487
00:26:01.894 --> 00:26:04.863 line:-1 position:50%
like Portrait and Center Stage.


488
00:26:04,863 --> 00:26:06,865 line:0
Camera apps
use AVCapture classes


489
00:26:06,865 --> 00:26:09,301 line:0
to deliver a wide array
of features.


490
00:26:09,301 --> 00:26:14,072 line:0
The most popular interface
is AVCaptureVideoDataOutput,


491
00:26:14,072 --> 00:26:16,942 position:50%
which allows you to get video
frames direct to your process


492
00:26:16,942 --> 00:26:21,013 line:0
for manipulating, displaying,
encoding, recording...


493
00:26:21,013 --> 00:26:23,816 position:50%
you name it.


494
00:26:23,816 --> 00:26:25,784 line:-1
When using VideoDataOutput,


495
00:26:25.784 --> 00:26:27.252 line:-1 position:50%
it's important
to ensure that your app


496
00:26:27,252 --> 00:26:29,288 line:-1
is keeping up
with real-time deadlines


497
00:26:29,288 --> 00:26:31,590 line:-1
so there are no frame drops.


498
00:26:31,590 --> 00:26:33,759 line:-1
By default, VideoDataOutput


499
00:26:33,759 --> 00:26:36,462 line:-1
prevents you from getting behind
by setting its


500
00:26:36,462 --> 00:26:40,365 line:-1
alwaysDiscardsLateVideoFrames
property to true.


501
00:26:40.365 --> 00:26:42.568 line:-1 position:50%
This enforces
a buffer queue size of one


502
00:26:42.568 --> 00:26:45.571 line:-1 position:50%
at the end of video data
output's processing pipeline


503
00:26:45,571 --> 00:26:49,107 line:-1
and saves you from periodic
or chronic slow processing


504
00:26:49,107 --> 00:26:51,577 line:-1
by always giving you
the freshest frame


505
00:26:51,577 --> 00:26:55,113 line:-1
and dropping frames
you weren't ready to process.


506
00:26:55.113 --> 00:26:57.282 line:-1 position:50%
It doesn't help you
if you need to record


507
00:26:57,282 --> 00:27:00,786 line:-1
the frames you're receiving,
such as with AVAssetWriter.


508
00:27:00,786 --> 00:27:03,889 line:-1
If you intend to record
your processed results,


509
00:27:03,889 --> 00:27:06,658 line:-1
you should turn
alwaysDiscardsLateVideoFrames


510
00:27:06.658 --> 00:27:12.130 line:-1 position:50%
off and pay close attention
to your processing times.


511
00:27:12.130 --> 00:27:15.133 line:-1 position:50%
VideoDataOutput tells you when
frame drops are occurring


512
00:27:15,133 --> 00:27:18,370 line:-1
by calling your provided
captureOutput didDrop


513
00:27:18,370 --> 00:27:21,840 line:-1
sampleBuffer delegate callback.


514
00:27:21,840 --> 00:27:23,876 line:-1
When you receive
a didDrop callback,


515
00:27:23,876 --> 00:27:26,812 line:-1
you can inspect the included
sampleBuffer's attachments


516
00:27:26.812 --> 00:27:29.414 line:-1 position:50%
for a droppedFrameReason.


517
00:27:29.414 --> 00:27:33.085 line:-1 position:50%
This can inform what to do
to mitigate further frame drops.


518
00:27:33.085 --> 00:27:36.321 line:-1 position:50%
There are three reasons:
FrameWasLate,


519
00:27:36,321 --> 00:27:40,025 line:-1
which means your processing
is taking too long;


520
00:27:40.025 --> 00:27:42.961 line:-1 position:50%
OutOfBuffers, which means
you may be holding on


521
00:27:42,961 --> 00:27:45,197 line:-1
to too many buffers;


522
00:27:45,197 --> 00:27:49,434 line:-1
and Discontinuity, which means
there is a system slow down


523
00:27:49.434 --> 00:27:53.305 line:-1 position:50%
or hardware failure
that's not your fault.


524
00:27:53.305 --> 00:27:56.441 line:-1 position:50%
Now let's talk about
how to react to frame drops.


525
00:27:56,441 --> 00:27:57,576 line:-1
One of the best ways


526
00:27:57,576 --> 00:28:00,345 line:-1
is to lower the device
frame rate dynamically.


527
00:28:00.345 --> 00:28:04.216 line:-1 position:50%
Doing so incurs no glitches
in preview or output.


528
00:28:04.216 --> 00:28:07.419 line:-1 position:50%
You simply set a new
activeMinVideoFrameDuration


529
00:28:07,419 --> 00:28:10,956 line:-1
on your AVCaptureDevice
at run time.


530
00:28:10,956 --> 00:28:13,592 line:-1
A second way
is to simplify your workload


531
00:28:13.592 --> 00:28:18.030 line:-1 position:50%
so you're not
taking so much time.


532
00:28:18.030 --> 00:28:20.566 line:-1 position:50%
Now let's talk about
system pressure,


533
00:28:20,566 --> 00:28:23,101 line:-1
another performance metric
that's crucially important


534
00:28:23.101 --> 00:28:26.138 line:-1 position:50%
to a good user experience
in your camera app.


535
00:28:26,138 --> 00:28:28,774 line:-1
System pressure
means just that,


536
00:28:28,774 --> 00:28:32,010 line:-1
the system is subject
to strain or pressure.


537
00:28:32.010 --> 00:28:35.581 line:-1 position:50%
AVCaptureDevice has a property
called systemPressureState,


538
00:28:35,581 --> 00:28:40,786 line:-1
which consists of factors
and an overall level.


539
00:28:40,786 --> 00:28:43,422 line:-1
The SystemPressureState
contributing factors


540
00:28:43.422 --> 00:28:47.092 line:-1 position:50%
are a bit mask of three
possible contributors.


541
00:28:47,092 --> 00:28:51,730 line:-1
systemTemperature refers to
how hot the device is getting.


542
00:28:51.730 --> 00:28:54.600 line:-1 position:50%
peakPower is all about
battery aging,


543
00:28:54,600 --> 00:28:57,202 line:-1
and whether the battery is
capable of ramping up voltage


544
00:28:57,202 --> 00:29:00,272 line:-1
quickly enough to meet
peak power demands.


545
00:29:00.272 --> 00:29:04.843 line:-1 position:50%
And the depthModuleTemperature,
which refers to how hot


546
00:29:04,843 --> 00:29:08,814 line:-1
the TrueDepth camera's
infrared sensor is getting.


547
00:29:08,814 --> 00:29:11,683 line:-1
The SystemPressureState's level
is an indicator


548
00:29:11,683 --> 00:29:13,018 line:-1
that can help you take action


549
00:29:13,018 --> 00:29:16,188 line:-1
before your user experience
is compromised.


550
00:29:16.188 --> 00:29:19.791 line:-1 position:50%
When it's nominal,
everything is copacetic.


551
00:29:19.791 --> 00:29:23.595 line:-1 position:50%
Fair indicates that system
pressure is slightly elevated.


552
00:29:23.595 --> 00:29:26.365 line:-1 position:50%
This might happen even if you're
doing very little processing


553
00:29:26,365 --> 00:29:29,434 line:-1
but the ambient
temperature is high.


554
00:29:29.434 --> 00:29:32.938 line:-1 position:50%
At serious, system pressure
is highly elevated;


555
00:29:32.938 --> 00:29:35.607 line:-1 position:50%
capture performance
may be impacted.


556
00:29:35,607 --> 00:29:38,710 line:-1
Frame rate throttling
is advised.


557
00:29:38,710 --> 00:29:40,445 line:-1
Once you reach critical,


558
00:29:40,445 --> 00:29:43,382 line:-1
system pressure
is critically elevated;


559
00:29:43,382 --> 00:29:47,252 line:-1
capture quality and performance
are significantly impacted.


560
00:29:47,252 --> 00:29:50,656 line:-1
Frame rate throttling
is highly advised.


561
00:29:50,656 --> 00:29:53,692 line:-1
And you never want to let things
escalate to shutdown,


562
00:29:53,692 --> 00:29:57,095 line:-1
where system pressure
is beyond critical.


563
00:29:57,095 --> 00:29:58,897 line:-1
At this level, AVCaptureSession


564
00:29:58,897 --> 00:30:02,934 line:-1
stops automatically to spare
the device from thermal trap.


565
00:30:05.971 --> 00:30:09.608 line:-1 position:50%
You can react to elevated
pressure in a variety of ways.


566
00:30:09,608 --> 00:30:11,576 line:-1
Lower the capture frame rate;


567
00:30:11,576 --> 00:30:14,112 line:-1
this will always
help system pressure.


568
00:30:14.112 --> 00:30:16.682 line:-1 position:50%
If lowering the frame rate
isn't an option,


569
00:30:16,682 --> 00:30:20,118 line:-1
consider lessening your
workload on the CPU or GPU,


570
00:30:20,118 --> 00:30:22,854 line:-1
such as turning off
certain features.


571
00:30:22,854 --> 00:30:26,525 line:-1
You might also keep features on
but degrade the quality,


572
00:30:26,525 --> 00:30:28,126 line:-1
perhaps by only processing


573
00:30:28,126 --> 00:30:31,463 line:-1
a smaller resolution
or less frequently.


574
00:30:31.463 --> 00:30:33.598 line:-1 position:50%
AVCaptureSession never
frame rate throttles


575
00:30:33,598 --> 00:30:35,667 line:-1
on your behalf,
since we don't know


576
00:30:35,667 --> 00:30:38,203 line:-1
if that's an acceptable
quality degradation strategy


577
00:30:38,203 --> 00:30:41,306 line:-1
for your app.


578
00:30:41,306 --> 00:30:43,875 line:-1
That wraps up
performance best practices.


579
00:30:43.875 --> 00:30:49.815 line:-1 position:50%
Now onto our dessert course,
IOSurface compression.


580
00:30:49.815 --> 00:30:52.217 line:-1 position:50%
I carefully avoided talking
about memory bandwidth


581
00:30:52,217 --> 00:30:54,252 line:-1
in the performance section,
since there's not much


582
00:30:54.252 --> 00:30:56.888 line:-1 position:50%
you can do about the overall
memory bandwidth


583
00:30:56,888 --> 00:30:59,658 line:-1
requirements of video
flowing through the ISP


584
00:30:59.658 --> 00:31:04.629 line:-1 position:50%
and eventually to your photos,
movies, preview, or buffers.


585
00:31:04.629 --> 00:31:07.466 line:-1 position:50%
But still, memory bandwidth
can be a crucial limiter


586
00:31:07,466 --> 00:31:09,301 line:-1
in determining
which camera features


587
00:31:09,301 --> 00:31:12,471 line:-1
can simultaneously run.


588
00:31:12.471 --> 00:31:16.408 line:-1 position:50%
When working with uncompressed
video on iOS and macOS,


589
00:31:16.408 --> 00:31:18.643 line:-1 position:50%
there are a lot of layers
involved.


590
00:31:18,643 --> 00:31:21,780 line:-1
It's a little like
a Russian nesting doll.


591
00:31:21,780 --> 00:31:25,117 line:-1
At the top level
is a CMSampleBuffer,


592
00:31:25,117 --> 00:31:27,319 line:-1
which can wrap
all kinds of media data,


593
00:31:27,319 --> 00:31:31,022 line:-1
as well as timing
and metadata.


594
00:31:31,022 --> 00:31:34,526 line:-1
Down one level,
there's the CVPixelBuffer,


595
00:31:34,526 --> 00:31:37,229 line:-1
which specifically
wraps pixel buffer data


596
00:31:37.229 --> 00:31:40.665 line:-1 position:50%
along with metadata attachments.


597
00:31:40.665 --> 00:31:44.002 line:-1 position:50%
Finally, you get to
that lowest level, IOSurface,


598
00:31:44,002 --> 00:31:46,972 line:-1
which allows the memory
to be wired to the kernel,


599
00:31:46,972 --> 00:31:48,306 line:-1
as well as provides an interface


600
00:31:48,306 --> 00:31:52,110 line:-1
for sharing large video buffers
across processes.


601
00:31:52.110 --> 00:31:54.713 line:-1 position:50%
IOSurfaces are huge.


602
00:31:54.713 --> 00:31:57.015 line:-1 position:50%
They account for the great
memory bandwidth requirements


603
00:31:57.015 --> 00:31:59.384 line:-1 position:50%
of uncompressed video.


604
00:31:59,384 --> 00:32:01,353 line:-1
Now thankfully,
IOSurface compression


605
00:32:01,353 --> 00:32:05,590 line:-1
offers a solution for memory
bandwidth problems.


606
00:32:05,590 --> 00:32:08,326 line:-1
New in iOS 15,
we're introducing support


607
00:32:08.326 --> 00:32:12.964 line:-1 position:50%
for a lossless in-memory
video compression format.


608
00:32:12,964 --> 00:32:15,267 line:-1
It's an optimization to lower
total memory bandwidth


609
00:32:15,267 --> 00:32:17,102 line:-1
for live video.


610
00:32:17,102 --> 00:32:18,570 line:-1
It's an interchange format


611
00:32:18.570 --> 00:32:23.809 line:-1 position:50%
understood by the major hardware
blocks on iOS devices and Macs.


612
00:32:23.809 --> 00:32:28.180 line:-1 position:50%
It's available
on all iPhone 12 variants,


613
00:32:28.180 --> 00:32:36.054 line:-1 position:50%
Fall 2020 iPad Airs,
and Spring 2021 M1 iPad Pros.


614
00:32:36,054 --> 00:32:40,058 line:-1
Which major hardware blocks
deal in compressed IOSurfaces?


615
00:32:40.058 --> 00:32:43.795 line:-1 position:50%
Well, there are a lot.


616
00:32:43.795 --> 00:32:46.531 line:-1 position:50%
All services listed here
understand


617
00:32:46,531 --> 00:32:51,803 line:-1
how to read or write
compressed IOSurfaces.


618
00:32:51.803 --> 00:32:56.441 line:-1 position:50%
At this point you may be saying,
"Great, how do I sign up?"


619
00:32:56.441 --> 00:32:57.642 line:-1 position:50%
Well, good news.


620
00:32:57.642 --> 00:32:59.778 line:-1 position:50%
If you're capturing video
on supported hardware


621
00:32:59,778 --> 00:33:02,314 line:-1
and the AVCaptureSession
doesn't need to deliver


622
00:33:02,314 --> 00:33:04,316 line:-1
any buffers to your process,


623
00:33:04,316 --> 00:33:06,551 line:0
congratulations,
your session is already


624
00:33:06,551 --> 00:33:09,020 line:0
taking advantage
of IOSurface compression


625
00:33:09,020 --> 00:33:12,624 position:50%
whenever it can to reduce
memory bandwidth.


626
00:33:12,624 --> 00:33:14,392 line:0
If you want compressed surfaces


627
00:33:14,392 --> 00:33:16,561 position:50%
delivered to your
video data output,


628
00:33:16,561 --> 00:33:20,632 position:50%
you need to know about
a few rules.


629
00:33:20,632 --> 00:33:24,069 line:-1
Physical memory layout
is opaque and may change,


630
00:33:24.069 --> 00:33:26.905 line:-1 position:50%
so don't write to disk,


631
00:33:26,905 --> 00:33:30,075 line:-1
don't assume the same layout
on all platforms,


632
00:33:30,075 --> 00:33:35,247 line:-1
don't read or write
using the CPU.


633
00:33:35.247 --> 00:33:38.016 line:-1 position:50%
AVCaptureVideoDataOutput
supports several flavors


634
00:33:38.016 --> 00:33:40.585 line:-1 position:50%
of IOSurface compression.


635
00:33:40.585 --> 00:33:43.121 line:-1 position:50%
Earlier in the talk,
you learned that iOS cameras


636
00:33:43,121 --> 00:33:46,691 line:-1
natively support
420v and 420f --


637
00:33:46.691 --> 00:33:51.730 line:-1 position:50%
8-bit YUV formats;
one video and one full range.


638
00:33:51,730 --> 00:33:57,969 line:-1
And later, you learned about
x420, a 10-bit HDR video format.


639
00:33:57.969 --> 00:34:00.272 line:-1 position:50%
Video data output
can also internally expand


640
00:34:00,272 --> 00:34:05,043 line:-1
to 16-bits-per-pixel BGRA
if requested.


641
00:34:05.043 --> 00:34:08.013 line:-1 position:50%
Each of these has an IOSurface
compressed equivalent


642
00:34:08.013 --> 00:34:11.349 line:-1 position:50%
which, beginning in iOS 15,
you can request


643
00:34:11,349 --> 00:34:14,586 line:-1
through
AVCaptureVideoDataOutput.


644
00:34:14.586 --> 00:34:17.656 line:-1 position:50%
If you're a fan of ampersands
in your four-character codes,


645
00:34:17.656 --> 00:34:20.058 line:-1 position:50%
this is your lucky day.


646
00:34:20,058 --> 00:34:23,094 line:-1
Here it is again
in eye chart format.


647
00:34:23.094 --> 00:34:28.233 line:-1 position:50%
These are the actual constants
you should use in your code.


648
00:34:28.233 --> 00:34:30.769 line:-1 position:50%
Two years ago we released
a piece of sample code


649
00:34:30,769 --> 00:34:33,738 line:-1
called "AVMultiCamPiP".


650
00:34:33,738 --> 00:34:36,508 line:-1
In this sample,
the front and back cameras


651
00:34:36,508 --> 00:34:39,377 line:-1
are streamed simultaneously
to VideoDataOutputs


652
00:34:39.377 --> 00:34:42.047 line:-1 position:50%
using a multicam session,


653
00:34:42,047 --> 00:34:45,116 line:-1
then composited
as a Picture in Picture


654
00:34:45.116 --> 00:34:50.021 line:-1 position:50%
using a Metal shader, which then
renders the composite to preview


655
00:34:50.021 --> 00:34:53.725 line:-1 position:50%
and writes to a movie
using AVAssetWriter.


656
00:34:53.725 --> 00:34:56.561 line:-1 position:50%
This is the perfect candidate
for IOSurface compression


657
00:34:56.561 --> 00:35:01.433 line:-1 position:50%
as all of these operations
are performed on hardware.


658
00:35:01,433 --> 00:35:03,935 line:-1
Here's the existing
VideoDataOutput setup code


659
00:35:03.935 --> 00:35:06.838 line:-1 position:50%
in AVMultiCamPiP.


660
00:35:06,838 --> 00:35:09,708 line:-1
It likes to work with BGRA,
so it configures


661
00:35:09,708 --> 00:35:12,177 line:-1
the VideoDataOutput's
videoSettings


662
00:35:12,177 --> 00:35:16,081 line:-1
to produce that
pixel format type.


663
00:35:16,081 --> 00:35:19,684 line:-1
The new code just incorporates
some checks.


664
00:35:19,684 --> 00:35:23,021 line:-1
First it sees if the IOSurface
compressed version


665
00:35:23,021 --> 00:35:25,090 line:-1
of BGRA is available.


666
00:35:25.090 --> 00:35:27.525 line:-1 position:50%
And if so, it picks that;


667
00:35:27.525 --> 00:35:31.730 line:-1 position:50%
the else clause is just there
as a fallback.


668
00:35:31,730 --> 00:35:35,633 line:-1
And just like that,
we've come to the end.


669
00:35:35,633 --> 00:35:39,738 line:-1
You learned about minimum
focus distance reporting,


670
00:35:39,738 --> 00:35:42,974 line:-1
how to capture
10-bit HDR video,


671
00:35:42,974 --> 00:35:47,312 line:-1
Video Effects and Mic Modes
in Control Center,


672
00:35:47.312 --> 00:35:52.584 line:-1 position:50%
performance best practices,
and IOSurface compression.


673
00:35:52.584 --> 00:35:54.119 line:-1 position:50%
I hope you enjoyed it!


674
00:35:54,119 --> 00:35:55,453 line:-1
Thanks for watching.


675
00:35:55,453 --> 00:35:58,790 position:90% align:right size:2%
♪

