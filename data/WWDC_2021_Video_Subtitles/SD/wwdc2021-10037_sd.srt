2
00:00:00,000 --> 00:00:02,102 line:-1
[MAC STARTUP CHIME]


3
00:00:02,102 --> 00:00:05,505 line:-1
♪ Bass music playing ♪


4
00:00:05,505 --> 00:00:06,840 line:-1
[KEYSTROKES]


5
00:00:06,840 --> 00:00:09,276 position:90% line:0 size:2%
♪


6
00:00:09.276 --> 00:00:11.211 line:-1 position:50%
Tao Jia: Hello, my name is Tao.


7
00:00:11,211 --> 00:00:14,581 line:-1
Today, my colleague Jack and I
are going to talk about


8
00:00:14.581 --> 00:00:18.952 line:-1 position:50%
building dynamic iOS apps
with the Create ML framework.


9
00:00:18,952 --> 00:00:21,889 line:-1
So what do I mean
by an app being dynamic?


10
00:00:21,889 --> 00:00:24,725 line:-1
Dynamic apps are those apps
that give their users


11
00:00:24.725 --> 00:00:28.762 line:-1 position:50%
the flexibility to customize
certain elements of the app.


12
00:00:28,762 --> 00:00:31,331 line:-1
Dynamic apps also
tailor their contents


13
00:00:31.331 --> 00:00:34.534 line:-1 position:50%
to best suit
different user needs.


14
00:00:34,534 --> 00:00:37,304 line:-1
These adaptable in-app features
give your users


15
00:00:37.304 --> 00:00:40.774 line:-1 position:50%
more intelligent
and personalized experiences


16
00:00:40,774 --> 00:00:42,943 line:-1
tailored just for them.


17
00:00:42.943 --> 00:00:45.279 line:-1 position:50%
You can deliver
certain such experiences


18
00:00:45.279 --> 00:00:48.382 line:-1 position:50%
by simple heuristics
and predefined rules.


19
00:00:48.382 --> 00:00:51.251 line:-1 position:50%
But often times,
these approaches may not render


20
00:00:51.251 --> 00:00:54.588 line:-1 position:50%
the best experience
for all of your app users


21
00:00:54.588 --> 00:00:58.258 line:-1 position:50%
as their backgrounds
and preferences can vary.


22
00:00:58,258 --> 00:01:00,961 line:-1
On the other hand,
machine learning techniques


23
00:01:00.961 --> 00:01:05.032 line:-1 position:50%
enable you to create models that
learn directly from user data.


24
00:01:05,032 --> 00:01:07,167 line:-1
This often is more
generalizable


25
00:01:07.167 --> 00:01:12.239 line:-1 position:50%
and likely suit more users than
heuristics and predefined rules.


26
00:01:12,239 --> 00:01:16,343 line:-1
So what tools can you use
to deliver such experience?


27
00:01:16.343 --> 00:01:19.379 line:-1 position:50%
The Create ML app,
available on your Mac,


28
00:01:19.379 --> 00:01:22.816 line:-1 position:50%
makes it easy to create models
by simply selecting


29
00:01:22.816 --> 00:01:26.420 line:-1 position:50%
some training data
and hitting the train button.


30
00:01:26.420 --> 00:01:28.956 line:-1 position:50%
It supports all sorts
of model types


31
00:01:28,956 --> 00:01:32,559 line:-1
through a rich set of templates.


32
00:01:32,559 --> 00:01:35,662 line:-1
The app is built on top
of the Create ML framework


33
00:01:35.662 --> 00:01:37.564 line:-1 position:50%
which provides
accelerated training


34
00:01:37.564 --> 00:01:40.901 line:-1 position:50%
of machine learning models.


35
00:01:40,901 --> 00:01:43,403 line:-1
The Create ML Framework
was originally introduced


36
00:01:43.403 --> 00:01:46.039 line:-1 position:50%
in macOS Mojave
allowing for models


37
00:01:46.039 --> 00:01:51.678 line:-1 position:50%
to be trained in Swift code
and from within your macOS app.


38
00:01:51,678 --> 00:01:53,547 line:-1
And now we're bringing
that framework


39
00:01:53,547 --> 00:01:58,452 line:-1
to iOS 15 and iPadOS 15.


40
00:01:58.452 --> 00:02:00.354 line:-1 position:50%
With it available on device,


41
00:02:00,354 --> 00:02:04,291 line:-1
your apps can do all sorts
of new and dynamic things.


42
00:02:04,291 --> 00:02:07,394 line:-1
In other words, you can access
programmatic APIs


43
00:02:07,394 --> 00:02:12,299 line:-1
directly from your application
for on-device model creation.


44
00:02:12.299 --> 00:02:14.968 line:-1 position:50%
It gives your app
the capability to learn from


45
00:02:14,968 --> 00:02:18,005 line:-1
and thus adapt to your users.


46
00:02:18,005 --> 00:02:20,040 line:-1
Last but most importantly,


47
00:02:20,040 --> 00:02:23,010 line:-1
user data never have
to leave their devices;


48
00:02:23.010 --> 00:02:25.712 line:-1 position:50%
therefore, user privacy
is preserved.


49
00:02:25,712 --> 00:02:27,080 line:-1
Now, let's dive in.


50
00:02:27,080 --> 00:02:30,183 line:-1
There are different tasks
available in Create ML.


51
00:02:30,183 --> 00:02:34,087 line:-1
Here are all the ones
available on macOS,


52
00:02:34,087 --> 00:02:38,425 line:-1
and these are now
available on iOS.


53
00:02:38,425 --> 00:02:41,962 line:-1
Among them are the popular tasks
such as image, sound,


54
00:02:41.962 --> 00:02:43.930 line:-1 position:50%
and text classifiers.


55
00:02:43,930 --> 00:02:47,000 line:-1
More recently added ones
include style transfer


56
00:02:47,000 --> 00:02:49,002 line:-1
as well as this year's
new addition


57
00:02:49,002 --> 00:02:52,472 line:-1
of hand pose
and hand action classifiers.


58
00:02:52,472 --> 00:02:54,041 line:-1
With these tools available,


59
00:02:54.041 --> 00:02:57.677 line:-1 position:50%
there are many interesting ideas
and use cases.


60
00:02:57.677 --> 00:02:59.946 line:-1 position:50%
Here are a few examples.


61
00:02:59,946 --> 00:03:02,849 line:-1
With image classification,
an app can learn


62
00:03:02,849 --> 00:03:06,019 line:-1
what a child's favorite
stuffed animals look like


63
00:03:06,019 --> 00:03:08,221 line:-1
and then help find
more photos of them


64
00:03:08,221 --> 00:03:13,794 line:-1
in order to help create a story
about their adventures together.


65
00:03:13.794 --> 00:03:16.296 line:-1 position:50%
Text classifier can be used
to help a user


66
00:03:16,296 --> 00:03:18,965 position:50%
quickly organize
a note they just wrote


67
00:03:18,965 --> 00:03:24,438 position:50%
with suggested tags and folders
learned from their past actions.


68
00:03:24,438 --> 00:03:27,908 line:-1
The hand action classifier,
which is new this year,


69
00:03:27.908 --> 00:03:31.978 line:-1 position:50%
could give your user the power
to trigger in-app visual effects


70
00:03:31.978 --> 00:03:34.781 line:-1 position:50%
with custom hand actions.


71
00:03:34,781 --> 00:03:38,518 line:-1
There are so many cool things
you can do with Create ML on iOS


72
00:03:38,518 --> 00:03:42,823 line:-1
but it's better to just show you
what I mean with a demo.


73
00:03:42.823 --> 00:03:46.226 line:-1 position:50%
I have an app that looks
a bit like a photo booth app,


74
00:03:46.226 --> 00:03:48.895 line:-1 position:50%
but more dynamic
as it allows me to create


75
00:03:48.895 --> 00:03:51.198 line:-1 position:50%
a customized photo filter.


76
00:03:51,198 --> 00:03:55,469 line:-1
Let me show you how that works.


77
00:03:55,469 --> 00:03:57,904 line:-1
Here on my iPad,
it shows at the top


78
00:03:57,904 --> 00:04:01,208 line:-1
a list of existing filters
I trained on my Mac


79
00:04:01,208 --> 00:04:04,077 line:-1
using a Create ML
style transfer task.


80
00:04:04,077 --> 00:04:07,514 line:-1
Each one of them is represented
by the particular style image


81
00:04:07.514 --> 00:04:09.783 line:-1 position:50%
used to create the filter.


82
00:04:09,783 --> 00:04:10,684 position:50%
On the bottom,


83
00:04:10,684 --> 00:04:14,121 line:0
the app is waiting for a photo
to try those filters,


84
00:04:14,121 --> 00:04:17,057 line:0
either by taking
or choosing a photo.


85
00:04:17,057 --> 00:04:19,059 line:-1
Let me take a photo now.


86
00:04:20.127 --> 00:04:22.762 line:-1 position:50%
How about a selfie?


87
00:04:22,762 --> 00:04:24,764 line:-1
[CAMERA SHUTTER]


88
00:04:26.466 --> 00:04:28.668 line:-1 position:50%
Let's see how
these filters look.


89
00:04:28,668 --> 00:04:32,139 line:-1
Let me first click
this first picture of wave form.


90
00:04:32,139 --> 00:04:35,509 line:-1
Oh, I got all these water drops
on my face and hair;


91
00:04:35,509 --> 00:04:40,013 line:-1
reminds me of my vacation
in Miami a long time ago.


92
00:04:40.013 --> 00:04:42.415 line:-1 position:50%
What about this picture
of birdies?


93
00:04:42.415 --> 00:04:45.485 line:-1 position:50%
Look how colorful I am.


94
00:04:45.485 --> 00:04:50.056 line:-1 position:50%
How about this third picture
that looks like cracked ice?


95
00:04:50,056 --> 00:04:54,728 line:-1
Oh, I look cool and icy.


96
00:04:54,728 --> 00:04:56,496 line:-1
Now these look really fun,


97
00:04:56,496 --> 00:04:59,399 line:-1
but I feel I am still
missing something.


98
00:04:59.399 --> 00:05:01.568 line:-1 position:50%
What if I could
just create a filter


99
00:05:01,568 --> 00:05:04,037 line:-1
using any photo of my choice?


100
00:05:04.037 --> 00:05:07.174 line:-1 position:50%
That would make this app
really fun to use.


101
00:05:07.174 --> 00:05:10.177 line:-1 position:50%
Let me give it a shot.


102
00:05:14,181 --> 00:05:16,082 line:-1
I have this drawing
from my daughter


103
00:05:16,082 --> 00:05:17,884 line:-1
when she was 3 years old.


104
00:05:17,884 --> 00:05:20,921 line:-1
I really love
the textures and colors.


105
00:05:20.921 --> 00:05:22.756 line:-1 position:50%
I'm curious to see
how I would look


106
00:05:22,756 --> 00:05:28,995 line:-1
in my daughter's artistic style.


107
00:05:28.995 --> 00:05:31.531 line:-1 position:50%
Let me click this
"+ Filter" button,


108
00:05:31,531 --> 00:05:37,537 line:-1
select Camera,
and take a picture.


109
00:05:37,537 --> 00:05:39,472 line:0
[CAMERA SHUTTER]


110
00:05:39,472 --> 00:05:43,577 line:0
"Use Photo."


111
00:05:43,577 --> 00:05:45,545 line:-1
Now the filter is being created.


112
00:05:45,545 --> 00:05:49,983 line:-1
Under the hood, it is training a
customized style transfer model.


113
00:05:49.983 --> 00:05:52.252 line:-1 position:50%
Let me explain how that works.


114
00:05:52,252 --> 00:05:55,522 line:-1
First, select a single
style image.


115
00:05:55,522 --> 00:05:59,159 line:-1
The style image I used
is my daughter's drawing.


116
00:05:59,159 --> 00:06:02,262 line:-1
Next, I need to provide
a set of content images


117
00:06:02.262 --> 00:06:05.699 line:-1 position:50%
for the model to learn
how to apply the style onto


118
00:06:05,699 --> 00:06:10,237 line:-1
while preserving the original
contents of these images.


119
00:06:10,237 --> 00:06:14,407 line:-1
In this demo, I used a few
tens of photos from my album,


120
00:06:14.407 --> 00:06:18.011 line:-1 position:50%
including scenic photos
and selfies.


121
00:06:18.011 --> 00:06:21.481 line:-1 position:50%
If you want to apply the style
on other photo types --


122
00:06:21,481 --> 00:06:23,950 line:-1
for example,
photos of your pet --


123
00:06:23.950 --> 00:06:26.086 line:-1 position:50%
you may also include
a few such photos


124
00:06:26.086 --> 00:06:29.356 line:-1 position:50%
in your content set as well.


125
00:06:29,356 --> 00:06:33,860 line:-1
Then, select your filter type
as either image or video,


126
00:06:33.860 --> 00:06:36.563 line:-1 position:50%
depending on your application
scenario.


127
00:06:36,563 --> 00:06:38,999 line:-1
For this demo, I chose image,


128
00:06:38,999 --> 00:06:43,503 line:-1
as I want to apply the style
on static photos.


129
00:06:43,503 --> 00:06:46,239 line:-1
You can also experiment
with style strength


130
00:06:46,239 --> 00:06:49,809 line:-1
and style density, as well as
the number of iterations


131
00:06:49,809 --> 00:06:52,879 line:-1
to get your favorite
combination of stylization


132
00:06:52.879 --> 00:06:56.416 line:-1 position:50%
and original contents.


133
00:06:56,416 --> 00:06:59,119 line:0
For details on how to set
these parameters,


134
00:06:59,119 --> 00:07:04,524 position:50%
please refer to last year's
WWDC session.


135
00:07:04,524 --> 00:07:09,896 line:-1
Now let's give the newly created
filter a try on my photo.


136
00:07:09.896 --> 00:07:13.800 line:-1 position:50%
Wow, that's how I would look
on my daughter's drawing.


137
00:07:13,800 --> 00:07:17,404 line:-1
It actually picked up
these textures and colors.


138
00:07:17,404 --> 00:07:24,077 line:-1
How about me trying
a different photo?


139
00:07:24,077 --> 00:07:24,911 line:-1
I have this bunny


140
00:07:24.911 --> 00:07:27.814 line:-1 position:50%
that my daughter
really loves to play with.


141
00:07:27.814 --> 00:07:30.083 line:-1 position:50%
How about me taking a selfie
with the bunny


142
00:07:30,083 --> 00:07:32,352 line:-1
and apply the filter?


143
00:07:32,352 --> 00:07:34,187 line:-1
[CAMERA SHUTTER]


144
00:07:36,956 --> 00:07:40,460 line:-1
The bunny has gotten stylized
by her drawing too.


145
00:07:40,460 --> 00:07:44,064 line:-1
I can't wait to show this to her
and try on her other drawings.


146
00:07:44.064 --> 00:07:46.366 line:-1 position:50%
It'll be a lot of fun.


147
00:07:46,366 --> 00:07:47,567 line:-1
In this demo,


148
00:07:47.567 --> 00:07:49.936 line:-1 position:50%
I showed you how to leverage
style transfer model


149
00:07:49.936 --> 00:07:52.605 line:-1 position:50%
available in the Create ML
framework on iOS


150
00:07:52.605 --> 00:07:55.675 line:-1 position:50%
to create a customized
photo filter.


151
00:07:55.675 --> 00:07:58.178 line:-1 position:50%
So what does that
look like in code?


152
00:07:58.178 --> 00:08:00.547 line:-1 position:50%
First, define training
data source


153
00:08:00,547 --> 00:08:05,952 line:-1
that specifies one style image
and a set of content images.


154
00:08:05.952 --> 00:08:08.722 line:-1 position:50%
Next, define your
session parameters,


155
00:08:08,722 --> 00:08:11,491 line:-1
to specify things like
where you want your checkpoints


156
00:08:11.491 --> 00:08:13.326 line:-1 position:50%
to be saved.


157
00:08:13,326 --> 00:08:18,164 line:-1
Next, define your training job
using these parameters.


158
00:08:18,164 --> 00:08:20,834 position:50%
Finally,
dispatch the training job,


159
00:08:20,834 --> 00:08:23,803 line:0
and once a successful
completion is received,


160
00:08:23,803 --> 00:08:26,306 line:0
save out the trained model


161
00:08:26,306 --> 00:08:30,844 line:-1
to stylize images, compile and
instantiate a Core ML model,


162
00:08:30.844 --> 00:08:33.413 line:-1 position:50%
start making predictions.


163
00:08:33.413 --> 00:08:34.514 line:-1 position:50%
And that's it.


164
00:08:34.514 --> 00:08:37.917 line:-1 position:50%
That's what I used to create
a customized photo filter,


165
00:08:37.917 --> 00:08:41.688 line:-1 position:50%
using style transfer API
from Create ML framework.


166
00:08:41,688 --> 00:08:45,225 line:-1
Other tasks follow
a similar API pattern.


167
00:08:45,225 --> 00:08:48,895 line:-1
So far I've talked about tasks
that enable model creation


168
00:08:48,895 --> 00:08:50,830 line:-1
from rich media data types,


169
00:08:50,830 --> 00:08:54,701 line:-1
such as image, text,
audio, and video.


170
00:08:54,701 --> 00:08:58,505 line:-1
But what if your app does not
interact with such data types?


171
00:08:58,505 --> 00:09:00,106 line:-1
Let me invite my colleague Jack


172
00:09:00.106 --> 00:09:05.178 line:-1 position:50%
to talk about how you can make
your app dynamic in these cases.


173
00:09:05.178 --> 00:09:06.212 line:-1 position:50%
Jack Cackler: Thank you, Tao.


174
00:09:06,212 --> 00:09:08,782 line:-1
In addition to the tasks
we've covered so far,


175
00:09:08,782 --> 00:09:11,017 line:-1
the Create ML framework on iOS


176
00:09:11,017 --> 00:09:13,586 line:-1
also supports classifiers
and regressors


177
00:09:13,586 --> 00:09:15,555 line:-1
for structured tabular data.


178
00:09:15.555 --> 00:09:18.625 line:-1 position:50%
Let's walk through an example
of how these could create


179
00:09:18,625 --> 00:09:20,760 line:-1
a more dynamic app experience.


180
00:09:20,760 --> 00:09:23,730 line:-1
First, some background
on classifiers and regressors.


181
00:09:23,730 --> 00:09:26,633 line:-1
A classifier learns to predict
particular classes


182
00:09:26.633 --> 00:09:29.035 line:-1 position:50%
from data in a training dataset.


183
00:09:29.035 --> 00:09:31.371 line:-1 position:50%
A regressor is similar,
but learns to predict


184
00:09:31,371 --> 00:09:35,141 line:-1
a numerical value instead
of a discrete class label.


185
00:09:35,141 --> 00:09:38,578 line:-1
Here are the APIs for training
classifiers and regressors


186
00:09:38.578 --> 00:09:40.413 line:-1 position:50%
from general tabular data,


187
00:09:40.413 --> 00:09:43.750 line:-1 position:50%
allowing them to be used
in many different scenarios.


188
00:09:43,750 --> 00:09:46,119 line:-1
In particular,
Create ML on iOS


189
00:09:46,119 --> 00:09:49,155 line:-1
offers four different algorithms
for each of these.


190
00:09:49,155 --> 00:09:51,124 line:-1
Working with
general tabular models


191
00:09:51.124 --> 00:09:53.593 line:-1 position:50%
can require
a little more work to use,


192
00:09:53,593 --> 00:09:56,529 line:-1
as you have to decide
which features and target values


193
00:09:56.529 --> 00:09:58.431 line:-1 position:50%
you want to use in the model.


194
00:09:58.431 --> 00:10:00.867 line:-1 position:50%
However, this can often
be straightforward.


195
00:10:00,867 --> 00:10:03,670 line:-1
Let's consider an app
using a tabular regressor


196
00:10:03.670 --> 00:10:07.173 line:-1 position:50%
to add a personalized
experience.


197
00:10:07,173 --> 00:10:10,343 line:-1
Here's a simple app for ordering
meals from restaurants.


198
00:10:10,343 --> 00:10:12,345 line:-1
The app has restaurants
in the area.


199
00:10:12.345 --> 00:10:15.515 line:-1 position:50%
Here's a local Thai restaurant
called Amazing Thai.


200
00:10:15,515 --> 00:10:18,351 line:-1
If I select it,
the app shows dishes I can order


201
00:10:18,351 --> 00:10:21,688 line:-1
from the restaurant
and information about each dish.


202
00:10:21.688 --> 00:10:24.657 line:-1 position:50%
It's a simple app, but what if
I can make it better?


203
00:10:24,657 --> 00:10:26,793 line:-1
What's really neat
is if over time


204
00:10:26.793 --> 00:10:29.429 line:-1 position:50%
my app learned my behavior
and helped surface


205
00:10:29,429 --> 00:10:32,866 line:-1
intelligent restaurant and dish
suggestions I might like.


206
00:10:32,866 --> 00:10:34,367 line:-1
This would take this
from a simple app


207
00:10:34.367 --> 00:10:37.403 line:-1 position:50%
into a really
dynamic experience.


208
00:10:37.403 --> 00:10:39.973 line:-1 position:50%
I can achieve this by training
a tabular regressor


209
00:10:39,973 --> 00:10:41,541 line:-1
right in the app.


210
00:10:41,541 --> 00:10:44,077 line:-1
I'm going to take
three kinds of information


211
00:10:44,077 --> 00:10:46,212 line:-1
and combine them
in a structured table


212
00:10:46.212 --> 00:10:50.650 line:-1 position:50%
to train the model and deliver
a new dynamic experience.


213
00:10:50,650 --> 00:10:51,985 line:-1
The first is the content,


214
00:10:51,985 --> 00:10:54,254 line:-1
which is data I've loaded
into the app.


215
00:10:54,254 --> 00:10:55,722 line:-1
In the case of
our restaurant app,


216
00:10:55.722 --> 00:10:57.857 line:-1 position:50%
it's information
about the dishes.


217
00:10:57.857 --> 00:10:59.759 line:-1 position:50%
The second is the context.


218
00:10:59.759 --> 00:11:03.229 line:-1 position:50%
In this case, the time
of the day the user is ordering.


219
00:11:03.229 --> 00:11:05.765 line:-1 position:50%
Finally, I add
the user's order history


220
00:11:05,765 --> 00:11:08,668 line:-1
and create an experience
that's tailored just for them


221
00:11:08.668 --> 00:11:10.937 line:-1 position:50%
right on their device.


222
00:11:10.937 --> 00:11:13.606 line:-1 position:50%
By combining
the content and the context,


223
00:11:13,606 --> 00:11:15,875 line:-1
as well as past user
interaction,


224
00:11:15,875 --> 00:11:17,844 line:-1
I can predict
future interaction;


225
00:11:17,844 --> 00:11:20,380 line:-1
a great opportunity
for personalization,


226
00:11:20.380 --> 00:11:22.282 line:-1 position:50%
in this case
to help predict dishes


227
00:11:22,282 --> 00:11:24,417 line:-1
a user might like in the future.


228
00:11:24.417 --> 00:11:27.487 line:-1 position:50%
Let's go back to the app
with the model added in.


229
00:11:27,487 --> 00:11:30,924 line:-1
I'm ordering lunch today
and I'm in the mood for pizza.


230
00:11:30,924 --> 00:11:36,329 line:-1
I set the meal to Lunch
and select the Pizza Parlor,


231
00:11:36,329 --> 00:11:39,899 line:-1
pick a margherita pizza,
and order it.


232
00:11:39,899 --> 00:11:42,201 line:-1
There's a few pieces of
information on this window


233
00:11:42,201 --> 00:11:44,871 line:-1
that are really what's training
our tabular regressor.


234
00:11:44.871 --> 00:11:47.674 line:-1 position:50%
The content is the keywords
for this dish;


235
00:11:47.674 --> 00:11:50.476 line:-1 position:50%
things like the ingredients --
tomato, mozzarella --


236
00:11:50.476 --> 00:11:52.745 line:-1 position:50%
as well as the restaurant
itself  -- Pizza Parlor --


237
00:11:52,745 --> 00:11:55,214 line:-1
and the genre of food --
pizza.


238
00:11:55,214 --> 00:11:58,251 line:-1
The context for this model
is the time of day.


239
00:11:58,251 --> 00:12:00,553 line:-1
This is from lunch,
and now I've taught my model


240
00:12:00,553 --> 00:12:03,256 line:-1
that these are things
I might like at lunch.


241
00:12:03,256 --> 00:12:06,292 line:-1
Finally, my interaction is
that I ordered this dish


242
00:12:06.292 --> 00:12:07.727 line:-1 position:50%
and not the others.


243
00:12:07,727 --> 00:12:10,563 line:-1
The regressor I'm training
is predicting a preference score


244
00:12:10,563 --> 00:12:12,599 line:-1
for each dish
that I might order,


245
00:12:12,599 --> 00:12:14,734 line:-1
and today it learned
that I did order this dish


246
00:12:14.734 --> 00:12:16.235 line:-1 position:50%
and not the others.


247
00:12:16,235 --> 00:12:20,573 line:-1
Going back to the main screen,


248
00:12:20.573 --> 00:12:22.709 line:-1 position:50%
the model has already trained
and there's a new window


249
00:12:22,709 --> 00:12:25,011 line:-1
that suggests dishes
just for me.


250
00:12:25.011 --> 00:12:27.647 line:-1 position:50%
The dish I actually ordered --
the margherita pizza --


251
00:12:27.647 --> 00:12:29.349 line:-1 position:50%
is the first recommendation,


252
00:12:29,349 --> 00:12:31,951 line:-1
but the next recommendation
is a caprese sandwich


253
00:12:31,951 --> 00:12:33,753 line:-1
from a completely
different restaurant.


254
00:12:33,753 --> 00:12:36,623 line:-1
Several other pizzas
are also near the top.


255
00:12:36,623 --> 00:12:38,157 line:-1
Let's try another example.


256
00:12:38.157 --> 00:12:41.160 line:-1 position:50%
Say I'm ordering dinner now.


257
00:12:42.495 --> 00:12:48.167 line:-1 position:50%
This time I order a yellow curry
from Amazing Thai.


258
00:12:48.167 --> 00:12:50.036 line:-1 position:50%
Now the model has updated again.


259
00:12:50.036 --> 00:12:51.571 line:-1 position:50%
It's learned my new preference,


260
00:12:51,571 --> 00:12:53,873 line:-1
contextual on the time of day
I'm ordering.


261
00:12:53,873 --> 00:12:57,010 line:-1
The yellow curry I just ordered
is now the top recommendation


262
00:12:57,010 --> 00:12:59,512 line:-1
and a similar curry
is the second recommendation.


263
00:12:59,512 --> 00:13:02,315 line:-1
The next recommendation
is the vegetarian pizza.


264
00:13:02,315 --> 00:13:03,650 line:-1
It has mushrooms and peppers


265
00:13:03,650 --> 00:13:05,418 line:-1
just like the curry
I just ordered,


266
00:13:05,418 --> 00:13:07,320 line:-1
and the app knows
I might like pizza


267
00:13:07.320 --> 00:13:10.223 line:-1 position:50%
even if it might not be
my first choice for dinner.


268
00:13:10.223 --> 00:13:13.393 line:-1 position:50%
If I then go to order lunch
the next day,


269
00:13:13,393 --> 00:13:14,761 line:-1
the model has learned
to distinguish


270
00:13:14.761 --> 00:13:16.262 line:-1 position:50%
what I might order for lunch


271
00:13:16,262 --> 00:13:18,665 line:-1
versus what I might order
for dinner.


272
00:13:18,665 --> 00:13:20,733 line:-1
This gives a really
personalized experience


273
00:13:20.733 --> 00:13:24.437 line:-1 position:50%
that helps me find exactly what
I want at the time I want it,


274
00:13:24.437 --> 00:13:26.806 line:-1 position:50%
and that's with just two orders.


275
00:13:26,806 --> 00:13:29,676 line:-1
There's three real steps
to adding a tabular classifier


276
00:13:29.676 --> 00:13:31.811 line:-1 position:50%
or regressor to an app:


277
00:13:31.811 --> 00:13:36.349 line:-1 position:50%
setting up the data,
training, and prediction.


278
00:13:36,349 --> 00:13:38,885 line:-1
The first function here
creates the features


279
00:13:38,885 --> 00:13:42,655 line:-1
leveraged in this regressor
from the meal and keywords.


280
00:13:42.655 --> 00:13:45.425 line:-1 position:50%
I take the keywords
associated with each dish,


281
00:13:45.425 --> 00:13:48.227 line:-1 position:50%
combine them with the current
meal (the context)


282
00:13:48.227 --> 00:13:49.429 line:-1 position:50%
to create a new keyword


283
00:13:49,429 --> 00:13:52,031 line:-1
that allows the model
to capture the interaction


284
00:13:52,031 --> 00:13:54,400 line:-1
between the content (dish)
keywords


285
00:13:54.400 --> 00:13:57.570 line:-1 position:50%
and the context (meal) keywords.


286
00:13:57.570 --> 00:14:00.206 line:-1 position:50%
We put in the value of 1.0
in the dictionary


287
00:14:00,206 --> 00:14:03,743 line:-1
to simply indicate that
a particular keyword is present


288
00:14:03,743 --> 00:14:07,013 line:-1
in the data entry.


289
00:14:07,013 --> 00:14:09,382 line:-1
First, for each dish
the user ordered,


290
00:14:09,382 --> 00:14:12,719 line:-1
I add in an entry with the
features generated previously


291
00:14:12.719 --> 00:14:14.854 line:-1 position:50%
and a positive target value.


292
00:14:14,854 --> 00:14:16,923 line:-1
However,
if I just included this,


293
00:14:16.923 --> 00:14:19.759 line:-1 position:50%
the model wouldn't learn
to discern what dishes I like


294
00:14:19.759 --> 00:14:21.761 line:-1 position:50%
and what dishes I don't.


295
00:14:21,761 --> 00:14:23,463 line:0
To do this,
I also add an entry


296
00:14:23,463 --> 00:14:26,432 position:50%
using all the keywords that
were not present in the dish


297
00:14:26,432 --> 00:14:29,402 line:0
with a negative target value
of -1.


298
00:14:29,402 --> 00:14:31,637 position:50%
This allows the model to learn
which keywords


299
00:14:31,637 --> 00:14:35,675 position:50%
best fit user preferences.


300
00:14:35.675 --> 00:14:39.245 line:-1 position:50%
I convert this combined
information into a DataFrame,


301
00:14:39,245 --> 00:14:42,515 line:-1
specifying both the keywords
and the target.


302
00:14:42,515 --> 00:14:44,383 line:-1
Finally, I train the model,


303
00:14:44.383 --> 00:14:47.620 line:-1 position:50%
specifying that the column
I'm trying to predict


304
00:14:47.620 --> 00:14:51.390 line:-1 position:50%
is the target column
that I had set to 1 or -1.


305
00:14:51.390 --> 00:14:53.893 line:-1 position:50%
In this case, the model is
a simple linear regressor


306
00:14:53.893 --> 00:14:58.197 line:-1 position:50%
which generates meaningful
results I can use in the app.


307
00:14:58,197 --> 00:14:59,265 line:-1
At prediction time,


308
00:14:59.265 --> 00:15:02.568 line:-1 position:50%
I simply take the data
I want to run an inference on


309
00:15:02.568 --> 00:15:06.506 line:-1 position:50%
and call a prediction
from the model I trained.


310
00:15:06.506 --> 00:15:10.143 line:-1 position:50%
So far we've shown how to train
a style transfer model


311
00:15:10.143 --> 00:15:14.380 line:-1 position:50%
and a tabular regressor
in iPadOS and iOS apps.


312
00:15:14,380 --> 00:15:16,249 line:-1
Let's talk about
some best practices


313
00:15:16.249 --> 00:15:19.519 line:-1 position:50%
to integrate machine learning
training into your app.


314
00:15:19,519 --> 00:15:21,254 line:-1
Don't forget to follow
best practices


315
00:15:21,254 --> 00:15:22,755 line:-1
for machine learning in general.


316
00:15:22,755 --> 00:15:25,625 line:-1
For example, always test
how your model performs


317
00:15:25.625 --> 00:15:28.027 line:-1 position:50%
on data not in
the training dataset.


318
00:15:28.027 --> 00:15:29.896 line:-1 position:50%
For long-running training tasks,


319
00:15:29,896 --> 00:15:32,098 line:-1
leverage the asynchronous
training control


320
00:15:32,098 --> 00:15:33,633 line:-1
and checkpointing mechanism


321
00:15:33.633 --> 00:15:36.669 line:-1 position:50%
to customize your
model creation workflow.


322
00:15:36.669 --> 00:15:38.471 line:-1 position:50%
Some aspects of model creation


323
00:15:38,471 --> 00:15:40,740 line:-1
can be computationally
intensive,


324
00:15:40,740 --> 00:15:42,341 line:-1
consume additional memory,


325
00:15:42.341 --> 00:15:45.244 line:-1 position:50%
or require additional assets
to be downloaded.


326
00:15:45,244 --> 00:15:49,015 line:-1
Do take these into consideration
when integrating into your app.


327
00:15:49.015 --> 00:15:53.519 line:-1 position:50%
Please refer to our APIs
and documentation for more info.


328
00:15:53,519 --> 00:15:55,822 position:50%
If you want to learn more
about best practices,


329
00:15:55,822 --> 00:15:59,158 line:0
I highly encourage you to check
our other WWDC sessions


330
00:15:59,158 --> 00:16:02,895 line:0
from past years on
"Designing Great ML Experiences"


331
00:16:02,895 --> 00:16:07,166 position:50%
and "Control training
in Create ML with Swift".


332
00:16:07,166 --> 00:16:09,769 line:-1
In this session, we have talked
about how you can use


333
00:16:09.769 --> 00:16:12.138 line:-1 position:50%
the Create ML framework on iOS.


334
00:16:12,138 --> 00:16:14,307 line:-1
We gave examples
using style transfer


335
00:16:14.307 --> 00:16:16.175 line:-1 position:50%
and a tabular regressor,


336
00:16:16.175 --> 00:16:18.845 line:-1 position:50%
and most of the Create ML
templates can now be trained


337
00:16:18.845 --> 00:16:21.314 line:-1 position:50%
directly on an iPhone or iPad.


338
00:16:21,314 --> 00:16:24,650 line:-1
Through training on iOS,
you can create dynamic apps


339
00:16:24,650 --> 00:16:28,054 line:-1
that give users customized
and personalized experiences


340
00:16:28,054 --> 00:16:30,423 line:-1
while preserving user privacy.


341
00:16:30.423 --> 00:16:33.492 line:-1 position:50%
Because training and inference
are entirely in-app,


342
00:16:33.492 --> 00:16:36.495 line:-1 position:50%
there's no model deployment
to worry about either.


343
00:16:36,495 --> 00:16:39,365 line:-1
We're really looking forward
to seeing what you come up with.


344
00:16:39,365 --> 00:16:42,702 line:-1
Thank you for listening
and enjoy the rest of WWDC.


345
00:16:42,702 --> 00:16:46,706 align:right line:0 size:2%
♪

