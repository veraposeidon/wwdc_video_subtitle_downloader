2
00:00:00,000 --> 00:00:01,969 line:-1
[MAC STARTUP CHIME]


3
00:00:01.969 --> 00:00:05.405 line:-1 position:50%
♪ Bass music playing ♪


4
00:00:05,405 --> 00:00:07,674 line:-1
[KEYSTROKES]


5
00:00:07,674 --> 00:00:09,343 align:right size:2% position:90%
♪


6
00:00:09,343 --> 00:00:12,246 line:-1
Matt Ricketson: Welcome
to “What’s New in SwiftUI.”


7
00:00:12,246 --> 00:00:15,349 line:-1
I’m Matt, and later on,
I’ll be joined by Taylor.


8
00:00:15,349 --> 00:00:18,318 line:-1
This session
is all about SwiftUI,


9
00:00:18.318 --> 00:00:20.954 line:-1 position:50%
Apple’s declarative
UI framework.


10
00:00:20,954 --> 00:00:25,592 line:-1
SwiftUI is still young,
but we’ve come so far already.


11
00:00:25,592 --> 00:00:28,562 line:-1
SwiftUI was first released
in 2019,


12
00:00:28,562 --> 00:00:32,532 line:-1
introducing a powerful new way
to build user interfaces


13
00:00:32.532 --> 00:00:36.069 line:-1 position:50%
in a declarative,
state-driven style.


14
00:00:36,069 --> 00:00:39,873 line:-1
We took the next big step
with SwiftUI’s second release,


15
00:00:39,873 --> 00:00:42,910 line:-1
enabling 100 percent
SwiftUI apps


16
00:00:42.910 --> 00:00:46.647 line:-1 position:50%
with the new App and Scene APIs.


17
00:00:46.647 --> 00:00:48.782 line:-1 position:50%
This year we’re focused
on supporting


18
00:00:48,782 --> 00:00:51,952 line:-1
even deeper adoption
of SwiftUI in your apps


19
00:00:51,952 --> 00:00:55,355 line:-1
with a great set
of rich new features.


20
00:00:55,355 --> 00:00:57,691 line:-1
Now if you haven’t yet
had a chance


21
00:00:57.691 --> 00:01:00.627 line:-1 position:50%
to try out SwiftUI yourself,
that’s OK!


22
00:01:00.627 --> 00:01:04.498 line:-1 position:50%
Only you know
what’s best for your app.


23
00:01:04,498 --> 00:01:06,533 line:-1
But here are a few tips
to keep in mind


24
00:01:06.533 --> 00:01:08.335 line:-1 position:50%
as you learn about
all the new features


25
00:01:08.335 --> 00:01:10.337 line:-1 position:50%
available this year.


26
00:01:10,337 --> 00:01:12,706 line:-1
A good way to dip your toes
into SwiftUI


27
00:01:12,706 --> 00:01:15,275 line:-1
is to use it to create
brand-new features


28
00:01:15.275 --> 00:01:16.476 line:-1 position:50%
in an existing app,


29
00:01:16.476 --> 00:01:19.513 line:-1 position:50%
like how it powers
the new activity stream in Notes


30
00:01:19.513 --> 00:01:23.784 line:-1 position:50%
for iOS, iPadOS, and macOS.


31
00:01:23,784 --> 00:01:25,986 line:-1
Or the new avatar picker
in macOS,


32
00:01:25,986 --> 00:01:28,889 line:-1
also built with SwiftUI.


33
00:01:28,889 --> 00:01:31,091 line:-1
Remember, you can mix in SwiftUI


34
00:01:31.091 --> 00:01:36.163 line:-1 position:50%
alongside your existing UIKit
or AppKit code.


35
00:01:36,163 --> 00:01:38,332 line:-1
SwiftUI is also a useful tool


36
00:01:38.332 --> 00:01:40.834 line:-1 position:50%
for expanding your app
to new platforms,


37
00:01:40,834 --> 00:01:42,369 line:-1
like how SwiftUI
was used to build


38
00:01:42,369 --> 00:01:44,905 line:-1
the new Shortcuts app
on macOS.


39
00:01:44.905 --> 00:01:46.039 line:-1 position:50%
With SwiftUI,


40
00:01:46,039 --> 00:01:49,242 line:-1
you can easily share common code
between platforms


41
00:01:49,242 --> 00:01:54,214 line:-1
while still crafting a unique
experience for each device.


42
00:01:54,214 --> 00:01:56,350 line:0
And when you’re ready
to redesign your app,


43
00:01:56,350 --> 00:01:59,853 line:0
that’s the perfect time
to bring in SwiftUI to help.


44
00:01:59,853 --> 00:02:01,755 line:0
The all-new
Apple Pay purchase flow


45
00:02:01,755 --> 00:02:03,890 position:50%
was redesigned using SwiftUI,


46
00:02:03,890 --> 00:02:06,727 line:0
which was also used to bring
a fresh coat of paint


47
00:02:06,727 --> 00:02:12,599 line:0
to the new Help Viewer on macOS
and the Tips app on watchOS.


48
00:02:12.599 --> 00:02:14.301 line:-1 position:50%
And finally, we can’t forget


49
00:02:14,301 --> 00:02:17,037 line:-1
the gorgeous new Weather app
for iOS,


50
00:02:17.037 --> 00:02:21.641 line:-1 position:50%
also rebuilt from the ground up
in SwiftUI.


51
00:02:21.641 --> 00:02:24.811 line:-1 position:50%
These are just several examples
of how SwiftUI


52
00:02:24.811 --> 00:02:28.582 line:-1 position:50%
is helping build
the next generation of apps.


53
00:02:28.582 --> 00:02:29.616 line:-1 position:50%
For this session,


54
00:02:29.616 --> 00:02:32.119 line:-1 position:50%
we’d like to share
some of the great new APIs


55
00:02:32.119 --> 00:02:34.121 line:-1 position:50%
that made it all possible.


56
00:02:34,121 --> 00:02:36,423 line:-1
We’ll start by walking through
improvements


57
00:02:36,423 --> 00:02:40,360 line:-1
to how we build collections
of content with lists and grids.


58
00:02:40,360 --> 00:02:43,964 line:-1
Next, we’ll go beyond lists,
introducing new features


59
00:02:43.964 --> 00:02:48.235 line:-1 position:50%
to take your data-driven apps
to the next level.


60
00:02:48.235 --> 00:02:51.071 line:-1 position:50%
Third, we’ll show off some
stunning new tools


61
00:02:51.071 --> 00:02:54.307 line:-1 position:50%
for driving graphics
and visual effects.


62
00:02:54,307 --> 00:02:57,177 line:-1
We’ll talk about enhancements
to text, keyboards,


63
00:02:57.177 --> 00:02:59.346 line:-1 position:50%
and focus-based navigation.


64
00:02:59,346 --> 00:03:03,617 line:-1
And finally,
we’ll give some love to buttons.


65
00:03:03,617 --> 00:03:07,254 line:-1
So let’s dive in,
beginning with lists and grids,


66
00:03:07,254 --> 00:03:09,289 line:-1
which are critical features
for organizing


67
00:03:09,289 --> 00:03:13,493 line:-1
and displaying data
within SwiftUI apps.


68
00:03:13.493 --> 00:03:15.962 line:-1 position:50%
This year,
we’re making it even easier


69
00:03:15.962 --> 00:03:20.467 line:-1 position:50%
to write rich,
interactive lists and grids.


70
00:03:20,467 --> 00:03:22,903 line:-1
Let’s start with a fun one.


71
00:03:22,903 --> 00:03:25,372 line:-1
SwiftUI now has built-in support


72
00:03:25.372 --> 00:03:28.642 line:-1 position:50%
for loading images
asynchronously.


73
00:03:28,642 --> 00:03:31,178 line:-1
SwiftUI makes loading
these images feel easy


74
00:03:31.178 --> 00:03:34.181 line:-1 position:50%
with the new AsyncImage view.


75
00:03:34,181 --> 00:03:35,549 line:-1
Just give it a URL,


76
00:03:35,549 --> 00:03:38,118 line:-1
and SwiftUI will automatically
fetch and display


77
00:03:38,118 --> 00:03:39,553 line:-1
the remote image for you,


78
00:03:39.553 --> 00:03:43.123 line:-1 position:50%
and even provide
a default placeholder.


79
00:03:43.123 --> 00:03:45.492 line:-1 position:50%
AsyncImage
can also be customized.


80
00:03:45.492 --> 00:03:48.795 line:-1 position:50%
For example, we can add
modifiers to the loaded image


81
00:03:48.795 --> 00:03:51.631 line:-1 position:50%
and also define
custom placeholders,


82
00:03:51,631 --> 00:03:55,001 line:-1
like I’m doing here
to add some fun colors.


83
00:03:55.001 --> 00:03:58.972 line:-1 position:50%
We can even add custom
animations and error handling!


84
00:03:58,972 --> 00:04:02,375 line:-1
And AsyncImage is available
on all platforms.


85
00:04:02.375 --> 00:04:05.412 line:-1 position:50%
We hope you check it out.


86
00:04:05.412 --> 00:04:08.381 line:-1 position:50%
AsyncImage loads
its content immediately,


87
00:04:08,381 --> 00:04:12,085 line:-1
but sometimes your app needs
to load content on-request,


88
00:04:12.085 --> 00:04:14.054 line:-1 position:50%
like when showing a feed.


89
00:04:14.054 --> 00:04:17.424 line:-1 position:50%
This is a great use case
for supporting pull-to-refresh


90
00:04:17,424 --> 00:04:20,360 line:-1
on iOS and iPadOS,


91
00:04:20,360 --> 00:04:23,597 line:-1
using the new refreshable
modifier.


92
00:04:23.597 --> 00:04:26.133 line:-1 position:50%
This modifier configures
a refresh action


93
00:04:26.133 --> 00:04:29.603 line:-1 position:50%
and passes down
through the environment.


94
00:04:29.603 --> 00:04:32.639 line:-1 position:50%
Lists on iOS and iPadOS
use this action


95
00:04:32.639 --> 00:04:34.975 line:-1 position:50%
to automatically add
pull-to-refresh,


96
00:04:34,975 --> 00:04:36,476 line:-1
but you can also use it to build


97
00:04:36.476 --> 00:04:40.280 line:-1 position:50%
your own custom
refresh behaviors.


98
00:04:40.280 --> 00:04:43.250 line:-1 position:50%
You may have noticed
this new await keyword,


99
00:04:43,250 --> 00:04:45,919 line:-1
which is one of the new
concurrency language features


100
00:04:45,919 --> 00:04:47,988 line:-1
in Swift 5.5.


101
00:04:47,988 --> 00:04:50,490 line:-1
This indicates that
the updateItems method


102
00:04:50.490 --> 00:04:52.526 line:-1 position:50%
is an async action,


103
00:04:52.526 --> 00:04:56.897 line:-1 position:50%
which lets us refresh our list
without blocking the UI.


104
00:04:56,897 --> 00:04:59,466 line:-1
Another new concurrency-related
SwiftUI feature


105
00:04:59.466 --> 00:05:02.302 line:-1 position:50%
is the task modifier.


106
00:05:02,302 --> 00:05:04,905 line:-1
This API lets you attach
an async task


107
00:05:04.905 --> 00:05:07.207 line:-1 position:50%
to the lifetime of your view.


108
00:05:07.207 --> 00:05:10.477 line:-1 position:50%
That means the task will kick off
when the view first loads


109
00:05:10,477 --> 00:05:14,748 line:-1
and automatically cancel itself
when the view is removed.


110
00:05:14,748 --> 00:05:16,583 line:-1
This is a great way for us


111
00:05:16.583 --> 00:05:19.853 line:-1 position:50%
to load the first batch
of photos automatically.


112
00:05:19.853 --> 00:05:23.323 line:-1 position:50%
These new concurrency modifiers
look simple on the surface,


113
00:05:23.323 --> 00:05:26.359 line:-1 position:50%
but can be used to build
sophisticated async behaviors


114
00:05:26,359 --> 00:05:28,428 line:-1
into your app.


115
00:05:28.428 --> 00:05:30.630 line:-1 position:50%
For example,
here I’ve set up a task


116
00:05:30,630 --> 00:05:35,235 line:-1
for loading the newest photos
as they become available.


117
00:05:35.235 --> 00:05:37.671 line:-1 position:50%
I’ve written just
a regular for loop,


118
00:05:37,671 --> 00:05:41,241 line:-1
but you’ll notice the await
keyword used here as well.


119
00:05:41,241 --> 00:05:43,243 line:-1
That’s because
newestCandidates


120
00:05:43,243 --> 00:05:45,779 line:-1
is actually an async sequence,


121
00:05:45.779 --> 00:05:49.416 line:-1 position:50%
which is another new concurrency
feature in Swift 5.5.


122
00:05:49,416 --> 00:05:52,752 line:-1
This means we’ll wait for the
newest candidate asynchronously,


123
00:05:52,752 --> 00:05:57,257 line:-1
iterating the loop only when
the next candidate is available.


124
00:05:57,257 --> 00:05:59,926 line:-1
That means we’re actually
packing a ton of functionality


125
00:05:59,926 --> 00:06:02,762 line:-1
into just this single modifier.


126
00:06:02,762 --> 00:06:05,765 line:-1
The view starts a task
that listens for candidates


127
00:06:05.765 --> 00:06:07.968 line:-1 position:50%
asynchronously
as soon as it appears,


128
00:06:07,968 --> 00:06:10,270 line:-1
updating the list every time
a new candidate


129
00:06:10,270 --> 00:06:13,807 line:-1
becomes available and then
automatically canceling the task


130
00:06:13.807 --> 00:06:15.375 line:-1 position:50%
when the view disappears,


131
00:06:15.375 --> 00:06:18.245 line:-1 position:50%
all without blocking
our app’s UI.


132
00:06:18,245 --> 00:06:20,547 position:50%
There’s a lot more to learn
about Swift concurrency


133
00:06:20,547 --> 00:06:22,882 line:0
and how to take advantage of it
in SwiftUI,


134
00:06:22,882 --> 00:06:26,853 position:50%
so we’ve prepared a few other
talks to dig into the details.


135
00:06:26,853 --> 00:06:28,588 position:50%
“Discover concurrency
in SwiftUI”


136
00:06:28,588 --> 00:06:30,690 position:50%
will explain
how concurrency relates


137
00:06:30,690 --> 00:06:32,459 position:50%
to SwiftUI’s update model


138
00:06:32,459 --> 00:06:35,562 position:50%
and demo some the new features
we just discussed.


139
00:06:35,562 --> 00:06:38,331 line:0
And in “Swift concurrency:
Update a sample app,”


140
00:06:38,331 --> 00:06:42,369 position:50%
we walk you step by step through
upgrading an existing project


141
00:06:42,369 --> 00:06:45,071 line:0
with async model code.


142
00:06:45,071 --> 00:06:48,108 line:-1
Next up, we’re giving you
new and better ways


143
00:06:48,108 --> 00:06:51,411 line:-1
to build interactivity
into your list content.


144
00:06:51.411 --> 00:06:54.014 line:-1 position:50%
In this example,
I’ve written a simple list


145
00:06:54,014 --> 00:06:58,151 line:-1
for sharing the directions
to my super secret hideout.


146
00:06:58.151 --> 00:07:00.720 line:-1 position:50%
This looks nice,
but the text isn’t editable.


147
00:07:00.720 --> 00:07:02.155 line:-1 position:50%
Let’s fix that.


148
00:07:02.155 --> 00:07:04.924 line:-1 position:50%
We can make text editable
by swapping it out


149
00:07:04.924 --> 00:07:07.294 line:-1 position:50%
for a text field instead.


150
00:07:07,294 --> 00:07:10,730 line:-1
However, a text field requires
a binding to the text.


151
00:07:10.730 --> 00:07:12.932 line:-1 position:50%
Within our list’s
content closure,


152
00:07:12.932 --> 00:07:15.368 line:-1 position:50%
we’re only given a plain value
for each element


153
00:07:15.368 --> 00:07:18.571 line:-1 position:50%
in our collection,
not a binding.


154
00:07:18,571 --> 00:07:21,574 line:-1
In situations like this,
it can be tricky to figure out


155
00:07:21.574 --> 00:07:24.311 line:-1 position:50%
how to get a binding
to the collection element


156
00:07:24,311 --> 00:07:26,346 line:-1
for each row.


157
00:07:26.346 --> 00:07:28.381 line:-1 position:50%
One common approach
is to iterate


158
00:07:28.381 --> 00:07:30.583 line:-1 position:50%
over the indices
of the collection instead,


159
00:07:30,583 --> 00:07:33,420 line:-1
using a subscript to get
a binding to the element


160
00:07:33.420 --> 00:07:35.555 line:-1 position:50%
at that index.


161
00:07:35,555 --> 00:07:38,158 line:-1
However, this technique
is not recommended,


162
00:07:38.158 --> 00:07:42.362 line:-1 position:50%
because SwiftUI will be forced
to reload the entire list


163
00:07:42,362 --> 00:07:45,098 line:-1
when anything changes.


164
00:07:45.098 --> 00:07:47.667 line:-1 position:50%
In fact, we’ve prepared
a whole talk


165
00:07:47.667 --> 00:07:50.603 line:-1 position:50%
discussing this topic
in much more detail.


166
00:07:50,603 --> 00:07:54,741 line:0
To learn more, I’d recommend
watching “Demystify SwiftUI.”


167
00:07:54.741 --> 00:07:56.976 line:-1 position:50%
For now, let’s undo
these changes


168
00:07:56,976 --> 00:07:59,379 line:-1
and take a look
at a better solution.


169
00:07:59.379 --> 00:08:03.383 line:-1 position:50%
This year, SwiftUI is providing
a much easier way


170
00:08:03.383 --> 00:08:05.885 line:-1 position:50%
to get access to bindings
for individual elements


171
00:08:05.885 --> 00:08:08.054 line:-1 position:50%
within a collection.


172
00:08:08.054 --> 00:08:11.157 line:-1 position:50%
Simply pass a binding to
your collection into the list,


173
00:08:11,157 --> 00:08:14,027 line:-1
using the normal
dollar sign operator,


174
00:08:14.027 --> 00:08:16.062 line:-1 position:50%
and SwiftUI will pass back
a binding


175
00:08:16,062 --> 00:08:19,999 line:-1
to each individual element
within the closure.


176
00:08:19,999 --> 00:08:22,001 line:-1
Code that only needs to read
the value


177
00:08:22.001 --> 00:08:24.037 line:-1 position:50%
can stay exactly the same
as before,


178
00:08:24,037 --> 00:08:26,973 line:-1
just like you’re used to.


179
00:08:26.973 --> 00:08:29.776 line:-1 position:50%
But now we can easily add
interactive controls


180
00:08:29,776 --> 00:08:32,746 line:-1
like a text field using
the normal binding syntax


181
00:08:32,746 --> 00:08:34,180 line:-1
that we’re used to,


182
00:08:34,180 --> 00:08:38,051 line:-1
which means I can finally fill
in the super secret door code


183
00:08:38.051 --> 00:08:40.520 line:-1 position:50%
I forgot to include earlier.


184
00:08:40.520 --> 00:08:43.223 line:-1 position:50%
This new syntax is part
of the Swift language,


185
00:08:43,223 --> 00:08:45,291 line:-1
so it works everywhere
you would expect,


186
00:08:45,291 --> 00:08:46,926 line:-1
not just lists.


187
00:08:46,926 --> 00:08:48,995 line:-1
For example, we can use
the same technique


188
00:08:48,995 --> 00:08:51,765 line:-1
in a ForEach view
within our list instead.


189
00:08:51,765 --> 00:08:54,434 line:-1
And better yet, you can even
back-deploy this code


190
00:08:54,434 --> 00:08:58,037 line:-1
to any prior release
supported by SwiftUI.


191
00:08:58,037 --> 00:09:00,039 line:-1
But we’re not just making
your existing code


192
00:09:00.039 --> 00:09:01.641 line:-1 position:50%
easier to write.


193
00:09:01,641 --> 00:09:04,778 line:-1
Lists are gaining some
great new features too!


194
00:09:04.778 --> 00:09:06.446 line:-1 position:50%
Let’s start with some new ways


195
00:09:06,446 --> 00:09:08,948 line:-1
to visually customize
your lists.


196
00:09:08,948 --> 00:09:12,085 line:0
With the new
listRowSeparatorTint modifier,


197
00:09:12,085 --> 00:09:15,121 position:50%
you can change the color
of individual row separators,


198
00:09:15,121 --> 00:09:18,658 line:0
like I’ve done here to align
the separator and icon colors


199
00:09:18,658 --> 00:09:19,826 position:50%
for each row.


200
00:09:19,826 --> 00:09:23,363 line:0
SwiftUI also has an equivalent
modifier for section separators.


201
00:09:23,363 --> 00:09:24,397 line:-1
For this app though,


202
00:09:24,397 --> 00:09:27,333 line:-1
all those separators
seem a little distracting.


203
00:09:27,333 --> 00:09:31,171 line:-1
I want my directions to feel
like a single, unified flow.


204
00:09:31.171 --> 00:09:33.139 line:-1 position:50%
Maybe we should try
removing them,


205
00:09:33,139 --> 00:09:34,207 line:-1
which we can now do


206
00:09:34.207 --> 00:09:36.609 line:-1 position:50%
with the new listRowSeparator
modifier,


207
00:09:36.609 --> 00:09:39.512 line:-1 position:50%
configuring our separators
to be hidden.


208
00:09:39.512 --> 00:09:42.449 line:-1 position:50%
Now our directions feel
much less cluttered.


209
00:09:42.449 --> 00:09:45.084 line:-1 position:50%
Let’s look at another app
I’m making...


210
00:09:47.086 --> 00:09:49.289 line:-1 position:50%
...which helps comic book
authors keep track


211
00:09:49,289 --> 00:09:52,559 line:-1
of all their superheroes
and villains.


212
00:09:52.559 --> 00:09:54.160 line:-1 position:50%
This app uses swipe actions


213
00:09:54,160 --> 00:09:57,597 line:-1
to quickly and conveniently
pin and delete characters,


214
00:09:57,597 --> 00:10:02,068 line:-1
but without cluttering up our UI
with extra controls.


215
00:10:02.068 --> 00:10:04.637 line:-1 position:50%
New this year,
SwiftUI allows you to define


216
00:10:04,637 --> 00:10:06,940 line:-1
completely custom swipe actions


217
00:10:06.940 --> 00:10:09.142 line:-1 position:50%
using the new swipeActions
modifier.


218
00:10:09.142 --> 00:10:10.810 line:-1 position:50%
You configure swipe actions


219
00:10:10.810 --> 00:10:13.179 line:-1 position:50%
just like any other
kind of menu in SwiftUI,


220
00:10:13.179 --> 00:10:15.482 line:-1 position:50%
defining actions using buttons.


221
00:10:15.482 --> 00:10:17.517 line:-1 position:50%
You can also customize
their color


222
00:10:17.517 --> 00:10:19.552 line:-1 position:50%
by adding
the new tint modifier,


223
00:10:19,552 --> 00:10:22,489 line:-1
which I’m using to make
my pin action yellow.


224
00:10:22.489 --> 00:10:24.858 line:-1 position:50%
By default, SwiftUI shows
swipe actions


225
00:10:24.858 --> 00:10:27.293 line:-1 position:50%
on the trailing edge of the row.


226
00:10:27.293 --> 00:10:29.662 line:-1 position:50%
But you can switch them
to the leading side


227
00:10:29,662 --> 00:10:32,031 line:-1
using modifier’s
edge parameter.


228
00:10:32,031 --> 00:10:33,299 line:0
You can even support


229
00:10:33,299 --> 00:10:36,202 position:50%
both leading and trailing
swipe actions


230
00:10:36,202 --> 00:10:38,004 line:0
by adding multiple modifiers


231
00:10:38,004 --> 00:10:40,173 position:50%
with different
edge configurations.


232
00:10:40.173 --> 00:10:42.342 line:-1 position:50%
And lastly,
the swipeActions modifier


233
00:10:42.342 --> 00:10:45.478 line:-1 position:50%
is available on every platform
that supports them,


234
00:10:45.478 --> 00:10:49.682 line:-1 position:50%
making it easy to share code
within your multiplatform app.


235
00:10:49.682 --> 00:10:51.050 line:-1 position:50%
Speaking of other platforms,


236
00:10:51.050 --> 00:10:53.887 line:-1 position:50%
let’s check in on the macOS
version of my app.


237
00:10:53.887 --> 00:10:56.489 line:-1 position:50%
It shows
a multicolumn interface,


238
00:10:56,489 --> 00:10:58,224 line:-1
which makes use
of the extra space


239
00:10:58,224 --> 00:10:59,759 line:-1
available on the Mac.


240
00:10:59,759 --> 00:11:02,295 line:-1
Instead of cramming
all of my data into the sidebar,


241
00:11:02.295 --> 00:11:05.832 line:-1 position:50%
I have an overview tab
that lists all of my characters.


242
00:11:05.832 --> 00:11:07.700 line:-1 position:50%
That lets me just keep
my pinned characters


243
00:11:07.700 --> 00:11:09.068 line:-1 position:50%
in the sidebar.


244
00:11:09.068 --> 00:11:11.371 line:-1 position:50%
This list does feel
a little plain though.


245
00:11:11.371 --> 00:11:13.573 line:-1 position:50%
Let’s try to spruce it up a bit.


246
00:11:13,573 --> 00:11:15,241 line:-1
Here’s my existing code.


247
00:11:15.241 --> 00:11:17.477 line:-1 position:50%
I’m currently using
the inset list style


248
00:11:17.477 --> 00:11:20.313 line:-1 position:50%
to smoothly fit the list
within my window.


249
00:11:20.313 --> 00:11:23.917 line:-1 position:50%
And we’re able to express
this style beautifully in code


250
00:11:23.917 --> 00:11:26.319 line:-1 position:50%
using the new
enum-like syntax available


251
00:11:26.319 --> 00:11:29.055 line:-1 position:50%
on all view styles this year.


252
00:11:29,055 --> 00:11:30,356 line:-1
Also new this year,


253
00:11:30.356 --> 00:11:33.326 line:-1 position:50%
the inset list style
is gaining a new trick.


254
00:11:33.326 --> 00:11:37.263 line:-1 position:50%
It is now able to alternate
the backgrounds of the rows


255
00:11:37,263 --> 00:11:38,898 line:-1
by just modifying the style


256
00:11:38.898 --> 00:11:41.601 line:-1 position:50%
with the
alternatesRowBackgrounds flag.


257
00:11:41,601 --> 00:11:43,336 line:-1
Our list is looking
a lot better now,


258
00:11:43.336 --> 00:11:46.940 line:-1 position:50%
with each row clearly
distinguished from the other.


259
00:11:46,940 --> 00:11:48,341 line:-1
But for a macOS app,


260
00:11:48.341 --> 00:11:51.077 line:-1 position:50%
it still feels like
we’re not taking full advantage


261
00:11:51.077 --> 00:11:53.079 line:-1 position:50%
of all that space in our window.


262
00:11:53.079 --> 00:11:54.614 line:-1 position:50%
So for the next section,


263
00:11:54.614 --> 00:11:58.418 line:-1 position:50%
let’s go beyond lists to get
even more out of your app.


264
00:11:58,418 --> 00:12:00,987 line:-1
To help us make better use
of all this space,


265
00:12:00.987 --> 00:12:05.858 line:-1 position:50%
let’s upgrade our list
to a rich, multicolumn table!


266
00:12:05.858 --> 00:12:06.926 line:-1 position:50%
With four columns,


267
00:12:06,926 --> 00:12:09,395 line:-1
I now get four lists
for the price of one!


268
00:12:09.395 --> 00:12:12.432 line:-1 position:50%
But the best part is that
a moderately complex table


269
00:12:12.432 --> 00:12:15.001 line:-1 position:50%
like this can be declared
with so little code


270
00:12:15,001 --> 00:12:18,171 line:-1
it fits on a single slide.


271
00:12:18.171 --> 00:12:19.439 line:-1 position:50%
That’s because tables use


272
00:12:19,439 --> 00:12:22,408 line:-1
the same kind of declarative
construction that you’re used to


273
00:12:22.408 --> 00:12:23.910 line:-1 position:50%
throughout SwiftUI.


274
00:12:23.910 --> 00:12:25.945 line:-1 position:50%
Just like with lists,
you can create a table


275
00:12:25.945 --> 00:12:28.848 line:-1 position:50%
from a single collection
of content.


276
00:12:28,848 --> 00:12:32,485 line:-1
But unlike a list, a table
is made up of TableColumns


277
00:12:32.485 --> 00:12:36.956 line:-1 position:50%
that define content
within each visual column.


278
00:12:36,956 --> 00:12:38,858 line:-1
Each of these columns
are visually labeled


279
00:12:38,858 --> 00:12:40,293 line:-1
and use data from the collection


280
00:12:40.293 --> 00:12:44.063 line:-1 position:50%
to define their visual content
with some shorthand conveniences


281
00:12:44,063 --> 00:12:46,766 line:-1
for common cases
like just displaying text.


282
00:12:46.766 --> 00:12:50.370 line:-1 position:50%
But tables are also interactive,
supporting row selection


283
00:12:50,370 --> 00:12:53,239 line:-1
both for single rows
and multiple rows,


284
00:12:53.239 --> 00:12:56.075 line:-1 position:50%
just like in regular lists.


285
00:12:56.075 --> 00:12:59.379 line:-1 position:50%
Tables also support sorting
with the help of key paths


286
00:12:59.379 --> 00:13:02.248 line:-1 position:50%
to sortable values
on the columns.


287
00:13:02.248 --> 00:13:04.450 line:-1 position:50%
Now, tables support
several other features,


288
00:13:04.450 --> 00:13:07.153 line:-1 position:50%
including multiple different
visual styles


289
00:13:07,153 --> 00:13:10,289 line:-1
as well as fine-tuning
the appearance of each column.


290
00:13:10.289 --> 00:13:12.558 line:-1 position:50%
But let’s talk more about
the data you provide


291
00:13:12,558 --> 00:13:14,027 line:-1
to a table or list.


292
00:13:14.027 --> 00:13:15.895 line:-1 position:50%
This year, we have several
new enhancements


293
00:13:15.895 --> 00:13:19.532 line:-1 position:50%
to SwiftUI’s support
for CoreData fetch requests.


294
00:13:19.532 --> 00:13:21.768 line:-1 position:50%
FetchRequests now provide
a binding


295
00:13:21.768 --> 00:13:23.503 line:-1 position:50%
to their sort descriptors,


296
00:13:23.503 --> 00:13:25.972 line:-1 position:50%
which we can pass on
to the Table,


297
00:13:25.972 --> 00:13:29.342 line:-1 position:50%
allowing us to write
a fully Core Data-driven table,


298
00:13:29,342 --> 00:13:31,544 line:-1
complete with selection
and sortable columns,


299
00:13:31.544 --> 00:13:33.813 line:-1 position:50%
in just a few lines of code.


300
00:13:33,813 --> 00:13:36,983 line:-1
SwiftUI now also offers
a sectioned fetch request,


301
00:13:36,983 --> 00:13:40,153 line:-1
allowing for complex,
multisection lists


302
00:13:40,153 --> 00:13:44,457 line:-1
like the one on the right to be
driven from a single request.


303
00:13:44.457 --> 00:13:47.627 line:-1 position:50%
In this example, we partition
our data into sections


304
00:13:47,627 --> 00:13:49,962 line:-1
based on whether or not
they're pinned.


305
00:13:49,962 --> 00:13:53,266 line:-1
We use multiple SortDescriptors
to arrange the data,


306
00:13:53.266 --> 00:13:56.269 line:-1 position:50%
first to split it into pinned
and unpinned sections,


307
00:13:56.269 --> 00:13:57.370 line:-1 position:50%
and second to order


308
00:13:57.370 --> 00:14:00.206 line:-1 position:50%
recently modified characters
last.


309
00:14:00.206 --> 00:14:03.910 line:-1 position:50%
Next we specify that any changes
should be animated.


310
00:14:03.910 --> 00:14:05.144 line:-1 position:50%
And finally we construct


311
00:14:05,144 --> 00:14:08,047 line:-1
the sections and rows
of our list dynamically,


312
00:14:08.047 --> 00:14:12.318 line:-1 position:50%
based on the results
of the request.


313
00:14:12,318 --> 00:14:14,687 line:-1
All together,
this single request


314
00:14:14.687 --> 00:14:18.057 line:-1 position:50%
is able to drive
the animated list on the right.


315
00:14:18,057 --> 00:14:20,827 position:50%
For more information
on building apps for macOS,


316
00:14:20,827 --> 00:14:22,061 line:0
working with tables,


317
00:14:22,061 --> 00:14:24,797 line:0
and integrating Core Data
with SwiftUI,


318
00:14:24,797 --> 00:14:28,034 line:0
be sure to check out
these other talks.


319
00:14:28,034 --> 00:14:29,268 position:50%
The “SwiftUI on the Mac”


320
00:14:29,268 --> 00:14:31,738 position:50%
two-part series will take you
step-by-step


321
00:14:31,738 --> 00:14:35,475 line:0
through building an app
that’s optimized for the Mac.


322
00:14:35,475 --> 00:14:38,845 position:50%
And “Bring Core Data concurrency
to Swift and SwiftUI”


323
00:14:38,845 --> 00:14:41,280 line:0
will cover the new Core Data
fetch request APIs


324
00:14:41,280 --> 00:14:44,450 position:50%
in much more detail.


325
00:14:44,450 --> 00:14:46,519 line:-1
Now it’s time to step back
and think about


326
00:14:46,519 --> 00:14:48,888 line:-1
how we can help users
find what they need


327
00:14:48,888 --> 00:14:50,957 line:-1
amidst all of this data.


328
00:14:50,957 --> 00:14:54,026 line:-1
Of course,
I’m talking about search.


329
00:14:54,026 --> 00:14:57,864 line:-1
Search is a critical part
of all of our platforms.


330
00:14:57.864 --> 00:14:59.932 line:-1 position:50%
It helps users find
what they need


331
00:14:59,932 --> 00:15:01,634 line:-1
exactly when they need it.


332
00:15:01,634 --> 00:15:04,537 line:-1
You’ll find it on large devices
like the Apple TV,


333
00:15:04.537 --> 00:15:06.906 line:-1 position:50%
even all the way down
to the smallest devices,


334
00:15:06.906 --> 00:15:08.474 line:-1 position:50%
like the Apple Watch.


335
00:15:08,474 --> 00:15:11,144 line:-1
So since search
is a multiplatform problem,


336
00:15:11,144 --> 00:15:13,246 line:-1
it needs
a multiplatform solution


337
00:15:13,246 --> 00:15:16,115 line:-1
that can scale across
all these devices.


338
00:15:16,115 --> 00:15:18,017 line:-1
Luckily,
adding search to your app


339
00:15:18.017 --> 00:15:19.652 line:-1 position:50%
couldn’t be easier;


340
00:15:19.652 --> 00:15:21.854 line:-1 position:50%
just add
the searchable modifier,


341
00:15:21.854 --> 00:15:24.423 line:-1 position:50%
like we’ve done here
on our NavigationView.


342
00:15:24.423 --> 00:15:25.892 line:-1 position:50%
With this one modifier,


343
00:15:25.892 --> 00:15:28.461 line:-1 position:50%
SwiftUI will automatically add
a search field


344
00:15:28.461 --> 00:15:30.763 line:-1 position:50%
to the appropriate location
in your app


345
00:15:30,763 --> 00:15:33,065 line:-1
and optionally show suggestions


346
00:15:33,065 --> 00:15:35,768 line:-1
in a platform- and
context-appropriate way.


347
00:15:35.768 --> 00:15:38.471 line:-1 position:50%
The modifier takes a binding
to the search text,


348
00:15:38,471 --> 00:15:41,841 line:-1
allowing you to filter your data
based on the current value.


349
00:15:41,841 --> 00:15:45,144 line:0
Now, there is a lot more
to say about search in SwiftUI,


350
00:15:45,144 --> 00:15:46,712 line:0
but luckily we have
a whole session


351
00:15:46,712 --> 00:15:49,715 position:50%
to walk you through how to think
about search capabilities


352
00:15:49,715 --> 00:15:51,517 line:0
on multiple platforms.


353
00:15:51,517 --> 00:15:54,287 position:50%
Check out “Craft search
experiences in SwiftUI”


354
00:15:54,287 --> 00:15:55,788 position:50%
to learn more.


355
00:15:55,788 --> 00:15:59,225 line:-1
So far we’ve explored
how to load, display, organize,


356
00:15:59.225 --> 00:16:04.130 line:-1 position:50%
and search through your app’s
data using lists and grids.


357
00:16:04,130 --> 00:16:06,199 line:-1
Now let’s talk about
how to share that data


358
00:16:06,199 --> 00:16:08,067 line:-1
beyond your app.


359
00:16:08.067 --> 00:16:10.636 line:-1 position:50%
One of the simplest methods
of sharing data


360
00:16:10.636 --> 00:16:13.406 line:-1 position:50%
is by just dragging it
out of your app.


361
00:16:13,406 --> 00:16:15,274 line:-1
In my Heroes & Villains app,


362
00:16:15.274 --> 00:16:18.177 line:-1 position:50%
I’ve configured the character
icon on the detail screen


363
00:16:18.177 --> 00:16:21.681 line:-1 position:50%
to be draggable using
the existing onDrag modifier.


364
00:16:21,681 --> 00:16:24,517 line:-1
New this year,
you can now add custom previews


365
00:16:24,517 --> 00:16:26,919 line:-1
to your draggable views.


366
00:16:26.919 --> 00:16:29.388 line:-1 position:50%
This preview is shown
instead of the view


367
00:16:29,388 --> 00:16:32,024 line:-1
while it’s being dragged.


368
00:16:32.024 --> 00:16:35.194 line:-1 position:50%
Drag and drop is powered
by item providers,


369
00:16:35,194 --> 00:16:37,630 line:-1
which allow data to be copied
and shared


370
00:16:37,630 --> 00:16:39,599 line:-1
between different processes.


371
00:16:39.599 --> 00:16:41.767 line:-1 position:50%
This year, SwiftUI is providing


372
00:16:41.767 --> 00:16:45.037 line:-1 position:50%
several more ways to use
item providers


373
00:16:45.037 --> 00:16:48.307 line:-1 position:50%
to integrate with other apps
and services


374
00:16:48,307 --> 00:16:50,743 line:-1
such as configuring your app
to support


375
00:16:50,743 --> 00:16:53,746 line:-1
importing item providers
from external services,


376
00:16:53,746 --> 00:16:57,550 line:-1
using the new
importsItemProviders modifier.


377
00:16:57.550 --> 00:16:58.918 line:-1 position:50%
In this example,


378
00:16:58.918 --> 00:17:02.188 line:-1 position:50%
we’ve configured our view
to be able to import images,


379
00:17:02,188 --> 00:17:05,858 line:-1
and add them as attachments
to our story characters.


380
00:17:05,858 --> 00:17:09,128 line:0
We can pair this capability
a new macOS feature:


381
00:17:09,128 --> 00:17:11,464 line:0
Continuity Camera.


382
00:17:11,464 --> 00:17:14,033 position:50%
By adding the
“Import from Devices” commands


383
00:17:14,033 --> 00:17:15,635 position:50%
to our app’s main menu,


384
00:17:15,635 --> 00:17:18,504 line:0
we’re now able to use
an iPhone or iPad


385
00:17:18,504 --> 00:17:21,741 position:50%
to just take photos
to import into our Mac app.


386
00:17:21.741 --> 00:17:23.175 line:-1 position:50%
Let’s try it out!


387
00:17:23.175 --> 00:17:26.946 line:-1 position:50%
The symbol of the View Builder
superhero is her trusty hammer.


388
00:17:26.946 --> 00:17:30.816 line:-1 position:50%
It would be great to attach
a picture of it to her profile.


389
00:17:30,816 --> 00:17:34,320 line:-1
Luckily, I happen to have it
right here!


390
00:17:34,320 --> 00:17:36,122 line:-1
[CLATTERING]


391
00:17:36,122 --> 00:17:37,890 line:-1
From within my app,
I can access


392
00:17:37,890 --> 00:17:42,828 line:-1
the “Import from devices”
commands in the File menu.


393
00:17:42.828 --> 00:17:46.465 line:-1 position:50%
Then, I can choose to take
a picture using my iPhone...


394
00:17:49,168 --> 00:17:51,904 line:-1
....which automatically opens
the Camera app


395
00:17:51.904 --> 00:17:54.307 line:-1 position:50%
so we can quickly
take a picture.


396
00:17:56.042 --> 00:17:58.878 line:-1 position:50%
And the new photo is imported
and added to my app,


397
00:17:58.878 --> 00:18:03.516 line:-1 position:50%
using the importsItemProviders
modifier we showed earlier.


398
00:18:03,516 --> 00:18:07,019 line:-1
SwiftUI also supports exporting
data out of our app.


399
00:18:07,019 --> 00:18:09,588 line:-1
Exporting data allows you
to take advantage


400
00:18:09,588 --> 00:18:10,990 line:-1
of other services,


401
00:18:10,990 --> 00:18:12,992 line:-1
such as being able
to trigger shortcuts


402
00:18:12.992 --> 00:18:15.261 line:-1 position:50%
from directly within your app.


403
00:18:15,261 --> 00:18:17,997 line:-1
In SwiftUI, you can export data
using the new


404
00:18:17,997 --> 00:18:20,366 line:-1
exportsItemProviders modifier.


405
00:18:20.366 --> 00:18:23.402 line:-1 position:50%
This exposes your app’s data
to the rest of the system,


406
00:18:23,402 --> 00:18:25,604 line:-1
for example,
allowing it to be used


407
00:18:25.604 --> 00:18:28.641 line:-1 position:50%
by services and shortcuts
on macOS.


408
00:18:28.641 --> 00:18:30.276 line:-1 position:50%
Let’s take a look
at how this appears


409
00:18:30.276 --> 00:18:33.079 line:-1 position:50%
for people using the app.


410
00:18:33.079 --> 00:18:35.381 line:-1 position:50%
I can now see quick actions
show up


411
00:18:35.381 --> 00:18:37.249 line:-1 position:50%
in my app’s Services menu


412
00:18:37,249 --> 00:18:39,685 line:-1
when I’ve selected
one of my pinned characters.


413
00:18:39.685 --> 00:18:42.254 line:-1 position:50%
This is a handy shortcut
for adding a title banner


414
00:18:42,254 --> 00:18:44,824 line:-1
to the most recent photo,
which I can use to share


415
00:18:44.824 --> 00:18:48.160 line:-1 position:50%
my latest superhero ideas
with my friends.


416
00:18:48.160 --> 00:18:52.064 line:-1 position:50%
I found this great photo to use
for my Stylizer superhero,


417
00:18:52.064 --> 00:18:54.900 line:-1 position:50%
who happens to also be
an adorable dog.


418
00:18:54.900 --> 00:18:58.070 line:-1 position:50%
My custom shortcut added
this fun banner to the top


419
00:18:58.070 --> 00:19:00.406 line:-1 position:50%
and overlaid the hero’s name.


420
00:19:00.406 --> 00:19:02.842 line:-1 position:50%
My shortcut also lets me
share the photo.


421
00:19:02.842 --> 00:19:04.377 line:-1 position:50%
I’d love to get
Taylor’s feedback,


422
00:19:04.377 --> 00:19:07.079 line:-1 position:50%
since he knows a thing or two
about cool graphics.


423
00:19:07,079 --> 00:19:09,081 line:-1
I can just add Taylor
as a recipient


424
00:19:09,081 --> 00:19:15,087 line:-1
and type in a quick message
and send it off!


425
00:19:15.087 --> 00:19:17.323 line:-1 position:50%
What do you think, Taylor?


426
00:19:17,323 --> 00:19:19,025 line:-1
Taylor Kelly: Thank you, Matt.
It looks perfect.


427
00:19:19.025 --> 00:19:22.161 line:-1 position:50%
And it's definitely going to be
your new contact photo.


428
00:19:22,161 --> 00:19:23,863 line:-1
This adorable image
is a great segue


429
00:19:23.863 --> 00:19:26.699 line:-1 position:50%
to the next section,
Advanced Graphics.


430
00:19:26,699 --> 00:19:28,534 line:-1
There's a bunch of
exciting enhancements this year:


431
00:19:28,534 --> 00:19:31,070 line:-1
from symbol updates, materials
and vibrancy,


432
00:19:31.070 --> 00:19:33.005 line:-1 position:50%
to a powerful new canvas view.


433
00:19:33,005 --> 00:19:34,440 line:-1
First up are symbols.


434
00:19:34.440 --> 00:19:36.409 line:-1 position:50%
SF Symbols are a great
and easy way of adding


435
00:19:36,409 --> 00:19:39,378 line:-1
beautiful iconography
throughout your app.


436
00:19:39.378 --> 00:19:41.313 line:-1 position:50%
Not only are there
many new ones this year,


437
00:19:41.313 --> 00:19:43.416 line:-1 position:50%
but they come with several
new features to make


438
00:19:43.416 --> 00:19:46.652 line:-1 position:50%
their use in your app even
easier and more expressive.


439
00:19:46.652 --> 00:19:48.287 line:-1 position:50%
There are two
new rendering modes


440
00:19:48.287 --> 00:19:51.757 line:-1 position:50%
that give you even more control
over how symbols are styled.


441
00:19:51,757 --> 00:19:54,060 line:-1
Hierarchical uses
the current foreground style


442
00:19:54,060 --> 00:19:56,295 line:-1
to color the symbol,
just like monochrome,


443
00:19:56.295 --> 00:19:59.131 line:-1 position:50%
but automatically adds
multiple levels of opacity


444
00:19:59.131 --> 00:20:02.134 line:-1 position:50%
to really emphasize
the key elements of the symbol.


445
00:20:02,134 --> 00:20:04,537 line:-1
And palette gives you even more
fine-grained control


446
00:20:04.537 --> 00:20:08.207 line:-1 position:50%
over individual layers
of a symbol with custom fills.


447
00:20:08,207 --> 00:20:09,475 position:50%
Check out
"What's new in SF Symbols"


448
00:20:09,475 --> 00:20:13,179 line:0
for more information and design
guidance on these new modes.


449
00:20:13.179 --> 00:20:14.413 line:-1 position:50%
Pairing perfectly with these


450
00:20:14.413 --> 00:20:17.550 line:-1 position:50%
is an update to the set
of colors available in SwiftUI.


451
00:20:17.550 --> 00:20:18.717 line:-1 position:50%
These colors are optimized


452
00:20:18,717 --> 00:20:21,087 line:-1
for all the different
configurations they appear in:


453
00:20:21.087 --> 00:20:23.889 line:-1 position:50%
light and Dark Mode,
specific appearances over blurs,


454
00:20:23.889 --> 00:20:26.826 line:-1 position:50%
and even the specific platform
they’re shown on.


455
00:20:26,826 --> 00:20:28,194 line:-1
In addition to different colors,


456
00:20:28,194 --> 00:20:30,362 line:-1
symbols come
in many different shapes.


457
00:20:30,362 --> 00:20:32,798 line:-1
Many symbols have modifiers
to show up as filled,


458
00:20:32.798 --> 00:20:34.600 line:-1 position:50%
circled, and more.


459
00:20:34.600 --> 00:20:36.769 line:-1 position:50%
Previously you had to hardcode
these variants.


460
00:20:36,769 --> 00:20:38,270 line:-1
But more than that,
you had to know


461
00:20:38.270 --> 00:20:41.507 line:-1 position:50%
which variant was right to use
in which context.


462
00:20:41,507 --> 00:20:43,175 position:50%
The iOS Human
Interface Guidelines


463
00:20:43,175 --> 00:20:44,677 position:50%
describes how in tab bars,


464
00:20:44,677 --> 00:20:47,413 line:0
filled variants should be
preferred, so you had to


465
00:20:47,413 --> 00:20:50,416 line:0
specifically include that .fill
modifier in the name.


466
00:20:50,416 --> 00:20:52,384 position:50%
This year,
you don’t have to worry that.


467
00:20:52,384 --> 00:20:54,954 line:0
SwiftUI will automatically
choose the right variant for you


468
00:20:54,954 --> 00:20:56,956 line:0
based on the context
you use it in.


469
00:20:56,956 --> 00:20:58,791 position:50%
All you have to do is provide
the base symbol


470
00:20:58,791 --> 00:21:00,459 position:50%
you’d like to use.


471
00:21:00,459 --> 00:21:01,694 line:0
And by not over-specifying


472
00:21:01,694 --> 00:21:03,129 position:50%
the exact configuration
you want,


473
00:21:03,129 --> 00:21:06,165 position:50%
you also get code
that is more reusable.


474
00:21:06,165 --> 00:21:09,034 position:50%
For example, if we run
this same code on macOS,


475
00:21:09,034 --> 00:21:13,105 position:50%
we get the correct variant
for that platform: outlines.


476
00:21:13,105 --> 00:21:15,141 position:50%
To learn how to take advantage
of this automatic support


477
00:21:15,141 --> 00:21:16,342 line:0
in your own custom views,


478
00:21:16,342 --> 00:21:18,144 position:50%
as well as more symbol
enhancements,


479
00:21:18,144 --> 00:21:21,680 line:0
check out
"SF Symbols in SwiftUI."


480
00:21:21.680 --> 00:21:23.315 line:-1 position:50%
There are now
a lot of SF Symbols,


481
00:21:23.315 --> 00:21:25.017 line:-1 position:50%
so I wanted to build
a cool visualizer


482
00:21:25.017 --> 00:21:26.986 line:-1 position:50%
to browse through all of them.


483
00:21:26,986 --> 00:21:30,189 line:-1
This is a great use
for SwiftUI's new Canvas view.


484
00:21:30,189 --> 00:21:32,091 line:-1
Canvas supports
immediate-mode drawing


485
00:21:32,091 --> 00:21:34,560 line:-1
similar to drawRect
from UIKit or AppKit.


486
00:21:34,560 --> 00:21:36,562 line:-1
When composing lots
of graphical elements


487
00:21:36.562 --> 00:21:39.165 line:-1 position:50%
that don't need individual
tracking or invalidation,


488
00:21:39.165 --> 00:21:41.300 line:-1 position:50%
this is a great tool.


489
00:21:41.300 --> 00:21:43.936 line:-1 position:50%
Here I have a canvas displaying
every single SF Symbol


490
00:21:43.936 --> 00:21:45.404 line:-1 position:50%
that comes with the OS.


491
00:21:45,404 --> 00:21:48,207 line:-1
And for all 3166 of them,


492
00:21:48.207 --> 00:21:50.843 line:-1 position:50%
it draws each of them
into their own frame.


493
00:21:50,843 --> 00:21:52,845 line:-1
Canvas works on every platform.


494
00:21:52.845 --> 00:21:54.780 line:-1 position:50%
And since Canvas
is a view like any other,


495
00:21:54,780 --> 00:21:57,550 line:-1
we can also attach gestures,
accessibility information,


496
00:21:57,550 --> 00:21:59,919 line:-1
and update it based on state
or the environment


497
00:21:59.919 --> 00:22:03.055 line:-1 position:50%
such as adapting to Dark Mode.


498
00:22:03,055 --> 00:22:06,091 position:50%
Here, I've added a gesture
that lets me set a focalPoint


499
00:22:06,091 --> 00:22:07,393 line:0
to zoom in on.


500
00:22:07,393 --> 00:22:09,895 line:0
And I'll update the frame
and opacity of each symbol


501
00:22:09,895 --> 00:22:11,463 position:50%
based on that.


502
00:22:11,463 --> 00:22:13,599 line:-1
Now I can click and drag around


503
00:22:13.599 --> 00:22:15.568 line:-1 position:50%
and every symbol
smoothly updates


504
00:22:15.568 --> 00:22:18.571 line:-1 position:50%
as the cursor moves
around the screen.


505
00:22:18,571 --> 00:22:20,573 line:-1
We can also make sure
this is fully accessible


506
00:22:20.573 --> 00:22:23.842 line:-1 position:50%
by taking advantage of a new
accessibilityChildren modifier.


507
00:22:23,842 --> 00:22:26,178 position:50%
What’s so cool is that
you reuse the same views


508
00:22:26,178 --> 00:22:29,215 line:0
you're used to using in SwiftUI
to refine how it comes across


509
00:22:29,215 --> 00:22:31,417 line:0
through accessibility features.


510
00:22:31,417 --> 00:22:33,552 position:50%
In this case, the symbols
can now be enumerated


511
00:22:33,552 --> 00:22:36,522 position:50%
like someone would otherwise
browse elements in a list,


512
00:22:36,522 --> 00:22:39,758 position:50%
speaking each element
as they navigate through.


513
00:22:39,758 --> 00:22:42,027 position:50%
This modifier isn’t restricted
to just Canvas,


514
00:22:42,027 --> 00:22:43,229 position:50%
but can be used with any view


515
00:22:43,229 --> 00:22:46,765 line:0
to really polish
its accessibility experience.


516
00:22:46.765 --> 00:22:48.300 line:-1 position:50%
One final thing we can add
to our canvas


517
00:22:48,300 --> 00:22:52,238 line:-1
is updating over time,
using the new TimelineView.


518
00:22:52.238 --> 00:22:54.540 line:-1 position:50%
A refinement to make for tvOS
is to have that focalPoint


519
00:22:54.540 --> 00:22:56.208 line:-1 position:50%
animatedly move around
the screen,


520
00:22:56.208 --> 00:22:58.377 line:-1 position:50%
acting like a screensaver.


521
00:22:58.377 --> 00:23:00.412 line:-1 position:50%
TimelineView is created
with a schedule --


522
00:23:00,412 --> 00:23:02,681 line:-1
in this case,
the animation schedule --


523
00:23:02.681 --> 00:23:05.184 line:-1 position:50%
and it provides the current time
it's rendering for.


524
00:23:05.184 --> 00:23:07.620 line:-1 position:50%
And so we can use that time
to update the focalPoint


525
00:23:07.620 --> 00:23:09.088 line:-1 position:50%
in the transform,


526
00:23:09.088 --> 00:23:11.790 line:-1 position:50%
creating our beautiful
symbol screensaver.


527
00:23:11,790 --> 00:23:14,760 line:-1
This TimelineView
can do so much more.


528
00:23:14.760 --> 00:23:16.362 line:-1 position:50%
A really cool feature
of the Apple Watch


529
00:23:16.362 --> 00:23:17.963 line:-1 position:50%
is its Always On display.


530
00:23:17,963 --> 00:23:20,666 line:-1
Previously your app would be
blurred with the time overlaid


531
00:23:20.666 --> 00:23:22.968 line:-1 position:50%
when it enters
the Always On state.


532
00:23:22,968 --> 00:23:25,771 position:50%
And with watchOS 8 your app
now dims by default,


533
00:23:25,771 --> 00:23:28,974 position:50%
and you have more control
over how it appears with SwiftUI


534
00:23:28,974 --> 00:23:32,678 position:50%
giving you the tools you need,
one of which is TimelineView.


535
00:23:32.678 --> 00:23:35.381 line:-1 position:50%
Once the watch goes
into its Always On state,


536
00:23:35.381 --> 00:23:37.716 line:-1 position:50%
TimelineView can preload
the display of your views


537
00:23:37.716 --> 00:23:39.251 line:-1 position:50%
at future dates.


538
00:23:39.251 --> 00:23:41.020 line:-1 position:50%
And as we move into the future,


539
00:23:41.020 --> 00:23:43.656 line:-1 position:50%
those view will automatically
be displayed onscreen


540
00:23:43,656 --> 00:23:46,992 line:-1
without ever taking your app
from the background.


541
00:23:46,992 --> 00:23:49,695 line:-1
A critical part of this
is the TimelineSchedule.


542
00:23:49,695 --> 00:23:52,531 line:-1
In this example, I'm using
the simple everyMinute schedule


543
00:23:52,531 --> 00:23:53,966 line:-1
so TimelineView will preload out


544
00:23:53,966 --> 00:23:56,168 line:-1
the display of each minute
on the minute,


545
00:23:56.168 --> 00:23:59.638 line:-1 position:50%
showing me the next symbol
in the browser.


546
00:23:59,638 --> 00:24:01,473 line:-1
There are several other kinds
of schedules as well


547
00:24:01,473 --> 00:24:03,509 line:-1
to help suit
the needs of your app,


548
00:24:03,509 --> 00:24:05,311 line:-1
such as a collection
of explicit of dates,


549
00:24:05,311 --> 00:24:07,146 line:-1
which works great
for when there will be events


550
00:24:07,146 --> 00:24:09,782 line:-1
at specific times.


551
00:24:09.782 --> 00:24:11.417 line:-1 position:50%
Now, another important aspect
of this mode


552
00:24:11.417 --> 00:24:13.652 line:-1 position:50%
is hiding user-sensitive
information


553
00:24:13.652 --> 00:24:15.354 line:-1 position:50%
since it could be visible
to others.


554
00:24:15.354 --> 00:24:17.890 line:-1 position:50%
I'd really like to keep
my favorite symbol private.


555
00:24:17,890 --> 00:24:20,559 line:-1
And by simply adding
the privacySensitive modifier,


556
00:24:20.559 --> 00:24:22.061 line:-1 position:50%
it will automatically
be redacted


557
00:24:22,061 --> 00:24:24,396 line:-1
when the watch enters
the Always On state.


558
00:24:24,396 --> 00:24:26,098 position:50%
Check out
"What's new in watchOS 8"


559
00:24:26,098 --> 00:24:29,368 position:50%
for more information on
the Always On display and more.


560
00:24:29.368 --> 00:24:31.303 line:-1 position:50%
And this privacy-sensitive
modifier


561
00:24:31.303 --> 00:24:33.605 line:-1 position:50%
also works in widgets as well.


562
00:24:33.605 --> 00:24:35.941 line:-1 position:50%
Widgets that are added
to the Lock screen will use this


563
00:24:35.941 --> 00:24:37.376 line:-1 position:50%
to hide sensitive information


564
00:24:37,376 --> 00:24:39,311 line:-1
while the device
is still locked,


565
00:24:39.311 --> 00:24:42.181 line:-1 position:50%
and reveal once the device
is unlocked.


566
00:24:42,181 --> 00:24:45,084 line:0
"Principals of great widgets"
will go into more detail on this


567
00:24:45,084 --> 00:24:48,354 position:50%
and other ways of building
wonderful widgets for your apps.


568
00:24:48.354 --> 00:24:51.623 line:-1 position:50%
Materials are used across all of
Apple’s platforms and apps


569
00:24:51.623 --> 00:24:53.359 line:-1 position:50%
to create beautiful
visual effects


570
00:24:53.359 --> 00:24:55.394 line:-1 position:50%
that really emphasize
their content,


571
00:24:55.394 --> 00:24:58.163 line:-1 position:50%
and now you can create them
directly in SwiftUI!


572
00:24:58.163 --> 00:25:00.265 line:-1 position:50%
I've been experimenting
with adding color and materials


573
00:25:00.265 --> 00:25:01.867 line:-1 position:50%
to my Symbol Browser,


574
00:25:01,867 --> 00:25:04,303 line:-1
and I'm adding
a material-backed overlay


575
00:25:04,303 --> 00:25:06,505 line:-1
to display
the number of symbols.


576
00:25:06.505 --> 00:25:09.408 line:-1 position:50%
Adding a material is as easy
as adding a background.


577
00:25:09,408 --> 00:25:11,043 line:-1
I'm using
the ultraThinMaterial,


578
00:25:11,043 --> 00:25:14,012 line:-1
and can give it
any custom shape to fill.


579
00:25:14,012 --> 00:25:16,448 line:-1
These materials automatically
come with the expected


580
00:25:16,448 --> 00:25:19,151 line:-1
vibrant blending of content
on top of them


581
00:25:19,151 --> 00:25:21,153 line:-1
when using primary,
secondary, tertiary,


582
00:25:21.153 --> 00:25:23.689 line:-1 position:50%
and now even quaternary
foreground styles.


583
00:25:23.689 --> 00:25:26.392 line:-1 position:50%
And emojis are automatically
excluded from that,


584
00:25:26,392 --> 00:25:29,328 line:-1
so they look exactly
as they should.


585
00:25:29.328 --> 00:25:32.765 line:-1 position:50%
On the Mac, system context
like sidebars and popovers


586
00:25:32,765 --> 00:25:35,200 line:-1
automatically have blur
material backgrounds


587
00:25:35,200 --> 00:25:37,970 line:-1
and will also now have that
expected vibrant appearance


588
00:25:37.970 --> 00:25:39.738 line:-1 position:50%
for the content within them.


589
00:25:39.738 --> 00:25:41.807 line:-1 position:50%
These new materials work great
in conjunction


590
00:25:41.807 --> 00:25:44.343 line:-1 position:50%
with the new safeAreaInset
modifier,


591
00:25:44,343 --> 00:25:45,644 line:-1
which allows you
to place content


592
00:25:45.644 --> 00:25:48.380 line:-1 position:50%
on top of a scrollable view
and have the content position


593
00:25:48,380 --> 00:25:50,883 line:-1
still start and end as expected.


594
00:25:50,883 --> 00:25:52,985 line:0
The "rich graphics" session
goes into a lot more detail


595
00:25:52,985 --> 00:25:55,487 position:50%
on canvas, materials, and more.


596
00:25:55.487 --> 00:25:56.388 line:-1 position:50%
And to wrap it up,


597
00:25:56,388 --> 00:25:59,658 line:-1
complementing new ways to define
these beautiful custom views


598
00:25:59,658 --> 00:26:03,629 line:-1
are a couple of enhancements
to SwiftUI previews in Xcode.


599
00:26:03.629 --> 00:26:05.831 line:-1 position:50%
First is a new preview
orientation modifier


600
00:26:05,831 --> 00:26:08,100 line:-1
that allows you to specify
the orientation


601
00:26:08,100 --> 00:26:09,902 line:-1
of the iOS device
in the previews,


602
00:26:09.902 --> 00:26:14.006 line:-1 position:50%
and even mix and match previews
across different orientations.


603
00:26:14,006 --> 00:26:16,675 line:-1
And second is a big improvement
to how you edit and view


604
00:26:16.675 --> 00:26:19.211 line:-1 position:50%
your app's accessibility
in previews.


605
00:26:19.211 --> 00:26:21.346 line:-1 position:50%
The property editor
now has a curated list


606
00:26:21,346 --> 00:26:22,915 line:-1
of accessibility modifiers,


607
00:26:22.915 --> 00:26:27.119 line:-1 position:50%
making it even easier to polish
views' accessibility behavior.


608
00:26:27.119 --> 00:26:29.922 line:-1 position:50%
And there is an entirely new way
of viewing your previews


609
00:26:29.922 --> 00:26:32.524 line:-1 position:50%
with a new
Accessibility Preview tab.


610
00:26:32,524 --> 00:26:34,927 line:-1
You'll be shown a live,
textual representation


611
00:26:34,927 --> 00:26:38,030 line:-1
of the accessibility elements
and their properties.


612
00:26:38.030 --> 00:26:39.131 line:-1 position:50%
This is the same information


613
00:26:39,131 --> 00:26:41,200 line:-1
that powers
accessibility features,


614
00:26:41.200 --> 00:26:43.068 line:-1 position:50%
but is now presented to you
in a format


615
00:26:43,068 --> 00:26:45,537 line:-1
that might be more familiar
to you.


616
00:26:45,537 --> 00:26:47,573 position:50%
Check out the
"SwiftUI Accessibility" session


617
00:26:47,573 --> 00:26:49,808 line:0
for more information on this
and much more


618
00:26:49,808 --> 00:26:52,544 line:0
about how to create an amazing
accessibility experience


619
00:26:52,544 --> 00:26:53,979 position:50%
for your app!


620
00:26:53.979 --> 00:26:56.915 line:-1 position:50%
Now, up next is a range
of enhancements to text,


621
00:26:56.915 --> 00:27:00.219 line:-1 position:50%
text-related controls,
and keyboard navigation.


622
00:27:00.219 --> 00:27:02.888 line:-1 position:50%
Text is so fundamental
to every app.


623
00:27:02,888 --> 00:27:05,491 line:-1
It’s one of the main ways
your app communicates to people;


624
00:27:05.491 --> 00:27:07.860 line:-1 position:50%
it’s often the very first view
you write.


625
00:27:07,860 --> 00:27:10,662 line:-1
And this year, its gaining
a lot of new exciting features


626
00:27:10.662 --> 00:27:15.200 line:-1 position:50%
from styling to localization,
to interactions and formatting.


627
00:27:15.200 --> 00:27:18.136 line:-1 position:50%
First up is Markdown support.


628
00:27:18.136 --> 00:27:21.573 line:-1 position:50%
Text can now contain Markdown
formatting directly inline.


629
00:27:21,573 --> 00:27:25,844 line:-1
This can be used to add
strong emphasis, links --


630
00:27:25,844 --> 00:27:28,480 line:-1
which can be interacted with --


631
00:27:28.480 --> 00:27:31.617 line:-1 position:50%
and even code-style
presentation.


632
00:27:31,617 --> 00:27:33,619 line:-1
And this is all built on top
of the new, powerful


633
00:27:33,619 --> 00:27:36,321 line:-1
Swift-based AttributedString
in Foundation.


634
00:27:36.321 --> 00:27:37.823 line:-1 position:50%
In addition to Markdown support,


635
00:27:37,823 --> 00:27:42,194 line:-1
it brings an entire suite
of rich, type-safe attributes,


636
00:27:42.194 --> 00:27:44.329 line:-1 position:50%
and the ability to define
your own attributes


637
00:27:44,329 --> 00:27:47,399 line:-1
and even use them
within Markdown syntax.


638
00:27:47,399 --> 00:27:48,734 line:0
For more information on this


639
00:27:48,734 --> 00:27:50,903 position:50%
and the amazing new
Automatic Grammar agreement,


640
00:27:50,903 --> 00:27:53,372 line:0
check out
"What's new in Foundation."


641
00:27:53.372 --> 00:27:56.275 line:-1 position:50%
Importantly, text also
localizes its content


642
00:27:56,275 --> 00:27:58,911 line:-1
so that people across the world
can use your app.


643
00:27:58,911 --> 00:28:01,380 line:-1
And this is true of the new
Markdown support as well,


644
00:28:01.380 --> 00:28:03.148 line:-1 position:50%
allowing language-sensitive
attributes


645
00:28:03.148 --> 00:28:05.551 line:-1 position:50%
to be properly localized.


646
00:28:05,551 --> 00:28:07,219 line:-1
Another great improvement
to localization


647
00:28:07,219 --> 00:28:09,221 line:-1
comes from Xcode 13.


648
00:28:09.221 --> 00:28:11.990 line:-1 position:50%
It now uses the Swift compiler
to generate strings


649
00:28:11,990 --> 00:28:15,928 line:-1
and localization catalogs from
every use of LocalizedStringKey


650
00:28:15,928 --> 00:28:20,332 line:-1
and the new localizedString and
attributedString initializers.


651
00:28:20,332 --> 00:28:21,266 position:50%
To learn more about this


652
00:28:21,266 --> 00:28:23,101 position:50%
and other localization
tips and tricks,


653
00:28:23,101 --> 00:28:26,371 position:50%
check out
"Localize Your SwiftUI app."


654
00:28:26,371 --> 00:28:28,874 position:50%
Now, in addition to these
new ways of displaying text,


655
00:28:28,874 --> 00:28:32,244 line:0
there are new ways of making
text even more dynamic.


656
00:28:32,244 --> 00:28:34,346 line:-1
The first is an important
accessibility feature:


657
00:28:34.346 --> 00:28:35.881 line:-1 position:50%
Dynamic Type.


658
00:28:35,881 --> 00:28:37,215 line:-1
SwiftUI has supported
Dynamic Type


659
00:28:37,215 --> 00:28:38,784 line:-1
since its inception,


660
00:28:38,784 --> 00:28:40,953 line:-1
and this year has a new API
to allow restricting


661
00:28:40,953 --> 00:28:43,555 line:-1
the range of type sizes
a UI supports


662
00:28:43,555 --> 00:28:47,192 line:-1
to keep it from getting too big
or too small.


663
00:28:47,192 --> 00:28:48,393 position:50%
This shows
what our header looks like


664
00:28:48,393 --> 00:28:50,963 position:50%
at the default large size.


665
00:28:50,963 --> 00:28:52,531 line:0
I personally use Dynamic Type


666
00:28:52,531 --> 00:28:55,367 position:50%
to get some extra information
density into my content,


667
00:28:55,367 --> 00:28:57,603 position:50%
and this shows how the header
stayed the same size


668
00:28:57,603 --> 00:28:59,237 position:50%
at the small type size,


669
00:28:59,237 --> 00:29:02,975 line:0
since it's restricted to be,
at minimum, the large size.


670
00:29:02,975 --> 00:29:04,443 position:50%
At the other end
of the spectrum,


671
00:29:04,443 --> 00:29:06,445 line:0
using the accessibility sizes
does result


672
00:29:06,445 --> 00:29:07,980 line:0
in our header growing larger,


673
00:29:07,980 --> 00:29:11,450 line:0
but only up to
the extra extra large size.


674
00:29:11,450 --> 00:29:13,652 line:-1
While macOS doesn't support
Dynamic Type,


675
00:29:13.652 --> 00:29:16.622 line:-1 position:50%
it does support another
important text interaction:


676
00:29:16.622 --> 00:29:18.223 line:-1 position:50%
selectable text.


677
00:29:18.223 --> 00:29:19.691 line:-1 position:50%
This allows people
to take action


678
00:29:19,691 --> 00:29:22,327 line:-1
on noneditable text from your
app, and that can


679
00:29:22.327 --> 00:29:25.297 line:-1 position:50%
now be enabled using
the textSelection modifier.


680
00:29:25,297 --> 00:29:27,833 line:-1
That modifier can be applied
to any view,


681
00:29:27.833 --> 00:29:30.469 line:-1 position:50%
and it applies
to all the text within it --


682
00:29:30,469 --> 00:29:33,438 line:-1
in this example, now applying to
the text in the header.


683
00:29:33.438 --> 00:29:36.708 line:-1 position:50%
And we also introduced
this modifier on iOS and iPadOS


684
00:29:36.708 --> 00:29:40.646 line:-1 position:50%
where it enables text to be
copied or shared on long-press.


685
00:29:40,646 --> 00:29:43,281 line:-1
Finally, Foundation's
new format-style APIs


686
00:29:43.281 --> 00:29:45.684 line:-1 position:50%
make formatting text
so much simpler,


687
00:29:45.684 --> 00:29:48.820 line:-1 position:50%
yet still allowing
precise presentation.


688
00:29:48.820 --> 00:29:51.757 line:-1 position:50%
Here we have a date that
applies the default formatting.


689
00:29:51.757 --> 00:29:54.092 line:-1 position:50%
And this is a variant
that displays only the time,


690
00:29:54,092 --> 00:29:56,395 line:-1
as used in the activity list.


691
00:29:56,395 --> 00:29:57,829 line:-1
And finally, an expanded format


692
00:29:57,829 --> 00:30:01,566 line:-1
that allows specifying
the exact components to display.


693
00:30:01.566 --> 00:30:04.870 line:-1 position:50%
Our activity list also featured
formatting an array of people


694
00:30:04,870 --> 00:30:07,606 line:-1
into a properly localized
presentation.


695
00:30:07.606 --> 00:30:09.708 line:-1 position:50%
Let's quickly walk through this.


696
00:30:09.708 --> 00:30:11.410 line:-1 position:50%
We're mapping our person values


697
00:30:11.410 --> 00:30:14.179 line:-1 position:50%
into an array
of PersonNameComponents


698
00:30:14,179 --> 00:30:17,149 line:-1
and formatting it
using a list format style.


699
00:30:17,149 --> 00:30:18,917 line:-1
And for each member in the list,


700
00:30:18.917 --> 00:30:22.020 line:-1 position:50%
using the PersonNameComponent
format with a short style,


701
00:30:22.020 --> 00:30:24.089 line:-1 position:50%
showing just the first name.


702
00:30:24,089 --> 00:30:27,392 line:-1
And finally, joining it
with an "and" conjunction.


703
00:30:27,392 --> 00:30:29,261 line:-1
All together,
creating a performant


704
00:30:29.261 --> 00:30:31.396 line:-1 position:50%
and type-safe expression
of formatting


705
00:30:31,396 --> 00:30:34,366 line:-1
that properly handles
any number of people.


706
00:30:34,366 --> 00:30:35,634 line:-1
TextField has also
gained support


707
00:30:35,634 --> 00:30:37,069 line:-1
for these new format styles,


708
00:30:37,069 --> 00:30:39,337 line:-1
allowing you to add editable
formatted text


709
00:30:39,337 --> 00:30:42,874 line:-1
with a type-safe binding
to some underlying value.


710
00:30:42,874 --> 00:30:46,945 line:-1
The new attendee field is bound
to a PersonNameComponents value,


711
00:30:46.945 --> 00:30:50.415 line:-1 position:50%
and it's formatted using
the standard name format.


712
00:30:50,415 --> 00:30:52,050 line:-1
This takes care
of parsing the input


713
00:30:52.050 --> 00:30:55.353 line:-1 position:50%
and producing
the resulting person name.


714
00:30:55,353 --> 00:30:57,756 line:0
"What’s new in Foundation"
also goes into detail


715
00:30:57,756 --> 00:31:00,792 position:50%
on the power
of these new format styles.


716
00:31:00,792 --> 00:31:03,495 line:-1
TextField now also supports
adding an explicit prompt,


717
00:31:03,495 --> 00:31:05,063 line:-1
separate from its label,


718
00:31:05.063 --> 00:31:09.000 line:-1 position:50%
to let users know what kind of
content a field is expecting.


719
00:31:09,000 --> 00:31:11,536 line:-1
And when adding TextField
to forms on macOS,


720
00:31:11,536 --> 00:31:14,272 line:-1
they’ll align their labels
similar to other controls


721
00:31:14.272 --> 00:31:17.642 line:-1 position:50%
and use the prompt
as its placeholder content.


722
00:31:17.642 --> 00:31:20.779 line:-1 position:50%
Now, the entire point
of a text field is adding text,


723
00:31:20.779 --> 00:31:23.648 line:-1 position:50%
and keyboards are our tool
to do that.


724
00:31:23,648 --> 00:31:26,551 line:-1
From software keyboards
on iPhone to the iPad,


725
00:31:26.551 --> 00:31:30.188 line:-1 position:50%
which supports both software
and hardware keyboards,


726
00:31:30.188 --> 00:31:31.456 line:-1 position:50%
and of course,
macOS,


727
00:31:31.456 --> 00:31:34.059 line:-1 position:50%
which always has
a hardware keyboard.


728
00:31:34,059 --> 00:31:35,527 line:-1
This year, there’s several
enhancements


729
00:31:35,527 --> 00:31:38,597 line:-1
to make the experience of using
a keyboard even better.


730
00:31:38.597 --> 00:31:40.632 line:-1 position:50%
With the new onSubmit modifier,


731
00:31:40,632 --> 00:31:42,534 line:-1
you can easily add
supplementary actions


732
00:31:42,534 --> 00:31:45,070 line:-1
for when the field’s text
is submitted by the user,


733
00:31:45.070 --> 00:31:47.439 line:-1 position:50%
such as by pressing
the Return key.


734
00:31:47.439 --> 00:31:49.941 line:-1 position:50%
This modifier provides
some extra flexibility


735
00:31:49.941 --> 00:31:53.745 line:-1 position:50%
in that it can even be applied
to an entire form of controls.


736
00:31:53.745 --> 00:31:55.313 line:-1 position:50%
And to help give users a hint


737
00:31:55.313 --> 00:31:56.381 line:-1 position:50%
of what kind of action
will occur


738
00:31:56,381 --> 00:31:57,783 line:-1
when submitting a field,


739
00:31:57.783 --> 00:32:00.886 line:-1 position:50%
there's the new submitLabel
modifier.


740
00:32:00,886 --> 00:32:01,887 line:-1
On software keyboards,


741
00:32:01,887 --> 00:32:04,990 line:-1
this will be used
as the label for the Return key.


742
00:32:04.990 --> 00:32:07.526 line:-1 position:50%
And finally, we’ve made it
possible to add accessory views


743
00:32:07.526 --> 00:32:10.962 line:-1 position:50%
to the keyboard using the new
keyboard toolbar placement.


744
00:32:10,962 --> 00:32:12,364 line:-1
These views will be shown
in a toolbar


745
00:32:12.364 --> 00:32:15.667 line:-1 position:50%
above the software keyboard
on iOS and iPadOS


746
00:32:15.667 --> 00:32:18.036 line:-1 position:50%
or in the Touch Bar on macOS.


747
00:32:18,036 --> 00:32:20,071 line:-1
This is a great way
to give users quick access


748
00:32:20,071 --> 00:32:22,941 line:-1
to actions above the keyboard
without dismissing it


749
00:32:22.941 --> 00:32:25.744 line:-1 position:50%
to avoid interrupting
your app’s editing experience.


750
00:32:25.744 --> 00:32:27.779 line:-1 position:50%
Keyboards also serve
another important role


751
00:32:27,779 --> 00:32:30,248 line:-1
of navigation and focus,


752
00:32:30.248 --> 00:32:33.185 line:-1 position:50%
and this functionality exists
on every platform;


753
00:32:33,185 --> 00:32:36,488 line:-1
from using focus on watchOS
to direct Digital Crown input,


754
00:32:36,488 --> 00:32:37,756 line:-1
to using the Siri Remote


755
00:32:37,756 --> 00:32:40,792 line:-1
to navigate around content
on tvOS.


756
00:32:40.792 --> 00:32:41.693 line:-1 position:50%
For most things,


757
00:32:41,693 --> 00:32:44,362 line:-1
SwiftUI just takes care
of what views are focusable


758
00:32:44,362 --> 00:32:46,364 line:-1
and how it moves between them.


759
00:32:46,364 --> 00:32:48,466 line:-1
But sometimes there are
extra refinements you can make


760
00:32:48.466 --> 00:32:51.837 line:-1 position:50%
to create even smoother
experiences in your app.


761
00:32:51.837 --> 00:32:52.904 line:-1 position:50%
To help with that,


762
00:32:52.904 --> 00:32:57.075 line:-1 position:50%
SwiftUI has a new, powerful
tool called FocusState.


763
00:32:57,075 --> 00:32:58,043 line:-1
This is a property wrapper


764
00:32:58,043 --> 00:33:00,145 line:-1
that both reflects
the state of focus


765
00:33:00.145 --> 00:33:02.514 line:-1 position:50%
and provides precise control
over it.


766
00:33:02,514 --> 00:33:06,084 line:-1
At its simplest, it can reflect
a Boolean value.


767
00:33:06,084 --> 00:33:09,921 line:-1
This can be tied to a focusable
view using the focused modifier.


768
00:33:09,921 --> 00:33:12,157 line:-1
When that view is focused,
the value will be true,


769
00:33:12.157 --> 00:33:13.491 line:-1 position:50%
and false when not.


770
00:33:13.491 --> 00:33:16.528 line:-1 position:50%
This value can also be
written to, to control focus.


771
00:33:16,528 --> 00:33:19,397 line:-1
For instance, in response
to someone pressing a button.


772
00:33:19,397 --> 00:33:21,633 line:-1
This example can act
as an accelerator,


773
00:33:21,633 --> 00:33:23,768 line:-1
allowing the user
to immediately start typing


774
00:33:23.768 --> 00:33:26.204 line:-1 position:50%
after performing
a related action.


775
00:33:26,204 --> 00:33:29,507 line:-1
This Boolean version is
a convenience for its full form,


776
00:33:29.507 --> 00:33:31.643 line:-1 position:50%
which is representing
any hashable type.


777
00:33:31,643 --> 00:33:34,246 line:-1
This code is functionally
equivalent to the previous slide


778
00:33:34.246 --> 00:33:36.381 line:-1 position:50%
but with some
increased flexibility.


779
00:33:36.381 --> 00:33:37.849 line:-1 position:50%
Let's walk through it.


780
00:33:37.849 --> 00:33:40.318 line:-1 position:50%
First, I've defined a simple
enumeration of the fields


781
00:33:40.318 --> 00:33:42.621 line:-1 position:50%
that I might want to know
are focused.


782
00:33:42.621 --> 00:33:44.522 line:-1 position:50%
The FocusState property
uses that type


783
00:33:44,522 --> 00:33:46,391 line:-1
to reflect the current state.


784
00:33:46,391 --> 00:33:47,492 line:-1
It's optional to indicate


785
00:33:47,492 --> 00:33:49,928 line:-1
potentially none of those
having focused.


786
00:33:49,928 --> 00:33:50,829 line:-1
Our focused modifier


787
00:33:50.829 --> 00:33:52.964 line:-1 position:50%
is still bound
to that same focus state,


788
00:33:52,964 --> 00:33:55,800 line:-1
but only when it equals
addAttendee.


789
00:33:55.800 --> 00:33:58.169 line:-1 position:50%
And finally, when we want
to focus that field,


790
00:33:58,169 --> 00:34:01,106 line:-1
we set our focus state value
to addAttendee.


791
00:34:01,106 --> 00:34:04,276 line:-1
This new flexibility allows
adding additional functionality,


792
00:34:04.276 --> 00:34:06.544 line:-1 position:50%
such as building the toolbar
buttons from before,


793
00:34:06.544 --> 00:34:08.346 line:-1 position:50%
moving focus
between each of the fields,


794
00:34:08.346 --> 00:34:11.983 line:-1 position:50%
and reflecting if focus reaches
the beginning or the end.


795
00:34:11.983 --> 00:34:14.653 line:-1 position:50%
Focus state also provides
a great way for iOS apps


796
00:34:14.653 --> 00:34:18.056 line:-1 position:50%
to dismiss the software keyboard
by clearing out its value.


797
00:34:18,056 --> 00:34:19,858 position:50%
If you're interested in learning
more about other ways


798
00:34:19,858 --> 00:34:22,427 position:50%
to refine the focus experience
in your app,


799
00:34:22,427 --> 00:34:23,695 line:0
check out this year’s session,


800
00:34:23,695 --> 00:34:26,698 line:0
"Direct and reflect focus
in SwiftUI."


801
00:34:26,698 --> 00:34:29,434 line:-1
Last, we’re going to focus in
on buttons


802
00:34:29.434 --> 00:34:31.670 line:-1 position:50%
because buttons are important.


803
00:34:31,670 --> 00:34:33,538 line:-1
We all know what
a typical button looks like;


804
00:34:33.538 --> 00:34:35.740 line:-1 position:50%
it varies from platform
to platform,


805
00:34:35.740 --> 00:34:37.008 line:-1 position:50%
and it is one
of the simplest ways


806
00:34:37,008 --> 00:34:39,778 line:-1
of allowing people
to interact with your app.


807
00:34:39,778 --> 00:34:40,979 line:-1
And especially in SwiftUI,


808
00:34:40.979 --> 00:34:43.348 line:-1 position:50%
buttons are used
for a lot of things.


809
00:34:43,348 --> 00:34:45,050 line:-1
Matt discussed earlier
how swipe actions


810
00:34:45,050 --> 00:34:46,985 line:-1
are composed out of buttons.


811
00:34:46,985 --> 00:34:51,022 line:-1
And this year,
there is a lot new with buttons.


812
00:34:51.022 --> 00:34:55.327 line:-1 position:50%
First, SwiftUI now has standard
bordered buttons on iOS.


813
00:34:55.327 --> 00:34:57.796 line:-1 position:50%
You can make a button bordered
just by adding


814
00:34:57.796 --> 00:34:59.531 line:-1 position:50%
a buttonStyle modifier,


815
00:34:59.531 --> 00:35:01.566 line:-1 position:50%
like I'm doing
with this Add button.


816
00:35:01.566 --> 00:35:03.034 line:-1 position:50%
Like other style modifiers,


817
00:35:03.034 --> 00:35:04.936 line:-1 position:50%
this can be added
to a group of controls


818
00:35:04,936 --> 00:35:06,638 line:-1
and applies to all of them.


819
00:35:06,638 --> 00:35:08,073 line:-1
It supports tinting for cases


820
00:35:08.073 --> 00:35:10.709 line:-1 position:50%
where you want a specific
appearance for a given button.


821
00:35:10.709 --> 00:35:11.943 line:-1 position:50%
But for this UI,


822
00:35:11.943 --> 00:35:15.647 line:-1 position:50%
I like the default appearance
that uses the accent color.


823
00:35:15.647 --> 00:35:18.817 line:-1 position:50%
There's more customization
built in as well.


824
00:35:18.817 --> 00:35:21.619 line:-1 position:50%
First up is control size
and prominence.


825
00:35:21.619 --> 00:35:23.455 line:-1 position:50%
I'm using these to customize
the buttons


826
00:35:23.455 --> 00:35:25.223 line:-1 position:50%
representing the tags.


827
00:35:25,223 --> 00:35:27,726 line:-1
They're using the new standard
small control size


828
00:35:27,726 --> 00:35:29,461 line:-1
and have a tint
with increased prominence


829
00:35:29,461 --> 00:35:32,030 line:-1
to really make them stand out.


830
00:35:32,030 --> 00:35:33,965 line:0
We can use
these same modifiers


831
00:35:33,965 --> 00:35:36,267 line:0
to create another common
kind of button:


832
00:35:36,267 --> 00:35:39,604 line:0
these large sized ones
now built in to SwiftUI.


833
00:35:39.604 --> 00:35:41.439 line:-1 position:50%
By specifying
the large control size,


834
00:35:41,439 --> 00:35:43,441 line:-1
you'll automatically get
these beautiful,


835
00:35:43.441 --> 00:35:45.343 line:-1 position:50%
rounded rectangle buttons.


836
00:35:45,343 --> 00:35:47,212 line:0
And to give them
a sense of hierarchy,


837
00:35:47,212 --> 00:35:48,747 line:0
I modified
the most important one


838
00:35:48,747 --> 00:35:50,248 line:0
to have increased prominence,


839
00:35:50,248 --> 00:35:53,618 line:0
filling it with a high-contrast
accent color.


840
00:35:53,618 --> 00:35:55,620 position:50%
And the secondary button
can still be tinted


841
00:35:55,620 --> 00:35:57,722 line:0
but has a lower contrast.


842
00:35:57,722 --> 00:35:59,057 line:0
These buttons have few modifiers


843
00:35:59,057 --> 00:36:02,327 position:50%
to make them great
on the iPad, too.


844
00:36:02.327 --> 00:36:04.195 line:-1 position:50%
The text labels have
a maximum width


845
00:36:04.195 --> 00:36:05.897 line:-1 position:50%
so that the overall button
is flexible


846
00:36:05,897 --> 00:36:08,566 line:-1
but doesn't get comically large.


847
00:36:08,566 --> 00:36:10,135 line:-1
And the primary button


848
00:36:10,135 --> 00:36:12,404 line:-1
has a default action
keyboard shortcut,


849
00:36:12.404 --> 00:36:13.938 line:-1 position:50%
so when using the app
with a keyboard,


850
00:36:13.938 --> 00:36:18.109 line:-1 position:50%
I can quickly hit the Return key
to add this button to my jar.


851
00:36:18.109 --> 00:36:21.146 line:-1 position:50%
Now, many of this API
has already existed on macOS,


852
00:36:21,146 --> 00:36:24,649 line:-1
making it even easier to build
apps for multiple platforms.


853
00:36:24.649 --> 00:36:28.319 line:-1 position:50%
The one new addition is adding
increased prominent tint support


854
00:36:28.319 --> 00:36:30.221 line:-1 position:50%
to let you tastefully
add these bright buttons


855
00:36:30,221 --> 00:36:31,990 line:-1
to your apps.


856
00:36:31.990 --> 00:36:34.692 line:-1 position:50%
Note that nonprominent buttons,
like these Add buttons,


857
00:36:34.692 --> 00:36:37.095 line:-1 position:50%
do not display any tint
since their chrome


858
00:36:37.095 --> 00:36:40.198 line:-1 position:50%
is what indicates their
interactivity on macOS.


859
00:36:40.198 --> 00:36:41.366 line:-1 position:50%
Having learned about prominence,


860
00:36:41,366 --> 00:36:42,801 line:-1
I might be tempted to go
and apply that


861
00:36:42.801 --> 00:36:44.636 line:-1 position:50%
to all of my Add buttons,


862
00:36:44.636 --> 00:36:46.438 line:-1 position:50%
but it can get overwhelming
and confusing


863
00:36:46,438 --> 00:36:49,407 line:-1
to have so many prominent
buttons onscreen.


864
00:36:49.407 --> 00:36:52.744 line:-1 position:50%
It's best to reserve it
for singular primary actions.


865
00:36:52.744 --> 00:36:54.913 line:-1 position:50%
The lower prominence tint
is a great alternative


866
00:36:54.913 --> 00:36:57.449 line:-1 position:50%
for adding a splash of color
on iOS.


867
00:36:57,449 --> 00:36:59,484 line:0
Now, my favorite thing
about these new button styles


868
00:36:59,484 --> 00:37:01,186 position:50%
is they automatically have
the expected


869
00:37:01,186 --> 00:37:04,322 line:0
pressed and disabled states,
Dark Mode support,


870
00:37:04,322 --> 00:37:06,858 position:50%
and of course are
fully accessible and compatible


871
00:37:06,858 --> 00:37:08,393 position:50%
with Dynamic Type.


872
00:37:08,393 --> 00:37:11,429 position:50%
And they help give consistency
between apps.


873
00:37:11.429 --> 00:37:13.531 line:-1 position:50%
And buttons' new API
doesn't stop here.


874
00:37:13,531 --> 00:37:15,900 line:-1
SwiftUI has also added
first-class support for buttons


875
00:37:15,900 --> 00:37:17,569 line:-1
with additional semantics,


876
00:37:17.569 --> 00:37:19.737 line:-1 position:50%
such as marking a button
as destructive,


877
00:37:19.737 --> 00:37:23.274 line:-1 position:50%
which will automatically
give them the expected red tint.


878
00:37:23,274 --> 00:37:25,310 line:-1
One new context
this can also be used in


879
00:37:25.310 --> 00:37:27.579 line:-1 position:50%
are confirmation dialogs,
which lets users


880
00:37:27,579 --> 00:37:30,915 line:-1
confirm actions that have
serious impact to their data.


881
00:37:30,915 --> 00:37:33,952 line:-1
On iOS, this shows
as an action sheet,


882
00:37:33.952 --> 00:37:37.956 line:-1 position:50%
on iPad as a popover,
and on macOS as an alert.


883
00:37:37,956 --> 00:37:39,257 line:-1
SwiftUI automatically handles


884
00:37:39,257 --> 00:37:42,894 line:-1
following the design
sensibilities of each platform.


885
00:37:42.894 --> 00:37:47.031 line:-1 position:50%
Next, let's talk about buttons
that aren't "capital B" buttons.


886
00:37:47.031 --> 00:37:48.533 line:-1 position:50%
Currently, the app's Add buttons


887
00:37:48.533 --> 00:37:50.802 line:-1 position:50%
just add to the user's
default jar.


888
00:37:50.802 --> 00:37:52.370 line:-1 position:50%
But for avid collectors,


889
00:37:52,370 --> 00:37:54,772 line:-1
I want to support adding
to specific jars.


890
00:37:54,772 --> 00:37:57,742 line:-1
This is a perfect use case
for a menu button.


891
00:37:57,742 --> 00:37:59,110 line:-1
We'll use the same "Add" label,


892
00:37:59.110 --> 00:38:01.746 line:-1 position:50%
but present a menu
of all of the possible jars


893
00:38:01.746 --> 00:38:03.314 line:-1 position:50%
once the button is clicked.


894
00:38:03,314 --> 00:38:04,883 line:-1
However, these menu buttons


895
00:38:04.883 --> 00:38:07.385 line:-1 position:50%
visually carry
a lot of prominence.


896
00:38:07.385 --> 00:38:08.786 line:-1 position:50%
We could hide the indicators


897
00:38:08.786 --> 00:38:12.257 line:-1 position:50%
using a new menuIndicator
modifier added this year.


898
00:38:12.257 --> 00:38:13.925 line:-1 position:50%
And even without an indicator,


899
00:38:13,925 --> 00:38:16,794 line:-1
this button still presents
a menu on click.


900
00:38:16,794 --> 00:38:17,729 line:-1
But for these buttons,


901
00:38:17.729 --> 00:38:20.064 line:-1 position:50%
ideally we'd get
the best of both worlds:


902
00:38:20,064 --> 00:38:22,834 line:-1
with a simple single click
to add to the default jar


903
00:38:22,834 --> 00:38:25,970 line:-1
and the flexibility of showing
the menu of others.


904
00:38:25,970 --> 00:38:27,639 line:-1
New this year is the ability
to customize


905
00:38:27,639 --> 00:38:30,775 line:-1
a menu's primary action
to help with this kind of case.


906
00:38:30,775 --> 00:38:32,810 line:-1
By default, a menu
with a primary action


907
00:38:32.810 --> 00:38:35.713 line:-1 position:50%
has a two-segmented appearance
on macOS.


908
00:38:35,713 --> 00:38:38,116 line:-1
The main part of the button
triggers the primary action


909
00:38:38.116 --> 00:38:40.785 line:-1 position:50%
in the indicator
presenting the menu.


910
00:38:40.785 --> 00:38:41.819 line:-1 position:50%
And when the indicator
is hidden,


911
00:38:41.819 --> 00:38:43.555 line:-1 position:50%
it again looks visually
just like the button


912
00:38:43,555 --> 00:38:47,158 line:-1
that I started with but has
a behavioral distinction.


913
00:38:47.158 --> 00:38:49.327 line:-1 position:50%
A click triggers
the primary action


914
00:38:49.327 --> 00:38:51.563 line:-1 position:50%
and a long-press shows the menu.


915
00:38:51.563 --> 00:38:54.899 line:-1 position:50%
And what's great is that this
same thing works on iOS, too!


916
00:38:54.899 --> 00:38:56.568 line:-1 position:50%
Now these menus
give a lot of flexibility,


917
00:38:56.568 --> 00:38:59.671 line:-1 position:50%
really catering to how your app
needs to use them.


918
00:38:59,671 --> 00:39:02,373 line:-1
Another new example of a control
gaining a button style


919
00:39:02.373 --> 00:39:03.641 line:-1 position:50%
is Toggle.


920
00:39:03,641 --> 00:39:05,577 line:-1
This creates a button
that when tapped,


921
00:39:05,577 --> 00:39:07,145 line:-1
visually turns on and off


922
00:39:07.145 --> 00:39:09.647 line:-1 position:50%
and can be used just like
any other toggle.


923
00:39:09,647 --> 00:39:11,282 line:-1
And joining these new
control styles


924
00:39:11,282 --> 00:39:14,586 line:-1
is a container that groups
related controls;


925
00:39:14.586 --> 00:39:16.421 line:-1 position:50%
aptly called ControlGroup.


926
00:39:16.421 --> 00:39:18.022 line:-1 position:50%
On iOS, the controls in a group


927
00:39:18,022 --> 00:39:20,558 line:-1
are organized a little tighter
in the toolbar.


928
00:39:20.558 --> 00:39:22.994 line:-1 position:50%
And on macOS,
there are visual affordances


929
00:39:22.994 --> 00:39:26.297 line:-1 position:50%
indicating the two grouped
buttons.


930
00:39:26,297 --> 00:39:27,599 position:50%
And to wrap this all up,


931
00:39:27,599 --> 00:39:30,635 position:50%
naturally all of these things
can be composed together.


932
00:39:30,635 --> 00:39:33,204 line:0
For instance, these standard
back/forward buttons


933
00:39:33,204 --> 00:39:35,607 position:50%
are a ControlGroup
of two menus.


934
00:39:35,607 --> 00:39:37,675 line:0
Each of these menus have
a primaryAction


935
00:39:37,675 --> 00:39:39,477 position:50%
that is performed when clicked.


936
00:39:39,477 --> 00:39:41,479 line:0
And once the menu
is long-pressed,


937
00:39:41.479 --> 00:39:44.616 line:-1 position:50%
they'll present their contents.


938
00:39:44.616 --> 00:39:47.218 line:-1 position:50%
Now, with just a few additional
customizations on buttons


939
00:39:47,218 --> 00:39:48,519 line:-1
and these new styles,


940
00:39:48.519 --> 00:39:50.054 line:-1 position:50%
a lot of flexibility
has opened up


941
00:39:50.054 --> 00:39:53.458 line:-1 position:50%
on how you can use
these controls in your apps.


942
00:39:53.458 --> 00:39:54.926 line:-1 position:50%
We ran through a lot
in this session,


943
00:39:54,926 --> 00:39:57,629 line:-1
and there’s even more that
we didn’t have time to cover.


944
00:39:57.629 --> 00:39:59.897 line:-1 position:50%
We’re excited for you to take
advantage of these new features


945
00:39:59.897 --> 00:40:01.332 line:-1 position:50%
in your own SwiftUI apps


946
00:40:01.332 --> 00:40:04.435 line:-1 position:50%
and adopt SwiftUI
in even more places.


947
00:40:04.435 --> 00:40:07.138 line:-1 position:50%
Thank you and have
a great rest of your 2021!


948
00:40:07,138 --> 00:40:10,408 line:0 position:90% size:2%
♪

