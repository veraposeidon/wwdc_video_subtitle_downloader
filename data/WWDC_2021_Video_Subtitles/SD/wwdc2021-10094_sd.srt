2
00:00:00,000 --> 00:00:02,102 line:-1
[MAC STARTUP CHIME]


3
00:00:02,102 --> 00:00:05,706 line:-1
♪ Bass music playing ♪


4
00:00:05.706 --> 00:00:07.708 line:-1 position:50%
[KEYSTROKES]


5
00:00:07,708 --> 00:00:09,243 align:center line:0 size:2%
♪


6
00:00:09,243 --> 00:00:11,678 line:-1
Rui Paulo: Hello, everyone,
I'm Rui.


7
00:00:11,678 --> 00:00:14,615 line:-1
Today, my colleague Eric
and I are going to talk about


8
00:00:14.615 --> 00:00:16.783 line:-1 position:50%
how you can speed up
your app's networking


9
00:00:16.783 --> 00:00:18.986 line:-1 position:50%
with HTTP/3 and QUIC --


10
00:00:18,986 --> 00:00:24,424 line:-1
two new protocols available
in iOS 15 and macOS Monterey.


11
00:00:24.424 --> 00:00:27.661 line:-1 position:50%
We'll begin by exploring
the evolution of HTTP


12
00:00:27.661 --> 00:00:30.998 line:-1 position:50%
and how HTTP/3
improves performance.


13
00:00:30,998 --> 00:00:32,599 line:-1
We'll also talk about QUIC,


14
00:00:32.599 --> 00:00:36.937 line:-1 position:50%
the new transport protocol
behind HTTP/3.


15
00:00:36.937 --> 00:00:41.308 line:-1 position:50%
After that, we'll explain how
you can use HTTP/3 in URLSession


16
00:00:41,308 --> 00:00:44,344 line:-1
and how you should
configure your HTTP server


17
00:00:44.344 --> 00:00:47.648 line:-1 position:50%
to support HTTP/3.


18
00:00:47,648 --> 00:00:51,551 line:-1
Finally, we'll take a deep dive
into the API for using QUIC


19
00:00:51.551 --> 00:00:55.155 line:-1 position:50%
and how you can implement
your custom networking protocols


20
00:00:55.155 --> 00:00:56.857 line:-1 position:50%
on top of QUIC.


21
00:00:56.857 --> 00:01:00.460 line:-1 position:50%
Let's then begin
with the evolution of HTTP.


22
00:01:00.460 --> 00:01:02.763 line:-1 position:50%
Let's say we need
to fetch a resource.


23
00:01:02,763 --> 00:01:05,465 position:50%
We set up a connection,
send the request,


24
00:01:05,465 --> 00:01:07,200 line:0
wait for the server
to process it,


25
00:01:07,200 --> 00:01:09,236 position:50%
and receive a response.


26
00:01:09,236 --> 00:01:11,371 position:50%
Now, if we want to fetch
another resource


27
00:01:11,371 --> 00:01:13,373 position:50%
before the first one finishes,


28
00:01:13,373 --> 00:01:16,009 position:50%
we have go through
the same process again:


29
00:01:16,009 --> 00:01:18,578 position:50%
setting up a connection,
sending the request,


30
00:01:18,578 --> 00:01:21,915 position:50%
waiting for processing,
and receiving the response,


31
00:01:21,915 --> 00:01:25,419 line:-1
this time indicated
in dark green.


32
00:01:25,419 --> 00:01:29,222 position:50%
Here's another example
for a third resource, in orange.


33
00:01:29,222 --> 00:01:30,891 position:50%
As outlined by the diagram,


34
00:01:30,891 --> 00:01:34,294 position:50%
a lot of time is spent
on connection setup.


35
00:01:34,294 --> 00:01:37,931 line:0
What if we reuse a single
HTTP/1 connection?


36
00:01:37,931 --> 00:01:39,733 line:0
We saved the connection
set up time,


37
00:01:39,733 --> 00:01:41,635 line:0
but a request can only be sent


38
00:01:41,635 --> 00:01:44,604 position:50%
after the previous
response has ended.


39
00:01:44,604 --> 00:01:47,541 line:-1
This is known
as head-of-line blocking.


40
00:01:47,541 --> 00:01:50,277 position:50%
In the past,
HTTP implementations


41
00:01:50,277 --> 00:01:54,081 position:50%
used many parallel connections
to overcome this problem.


42
00:01:54,081 --> 00:01:56,450 line:-1
The number of parallel
HTTP connections


43
00:01:56,450 --> 00:01:59,619 line:-1
was even configurable
by the app.


44
00:01:59.619 --> 00:02:02.856 line:-1 position:50%
However, this led to inefficient
networking behaviors


45
00:02:02,856 --> 00:02:05,492 line:-1
for both client and server.


46
00:02:05,492 --> 00:02:09,196 position:50%
HTTP/2 solves
head-of-line blocking


47
00:02:09,196 --> 00:02:12,833 position:50%
by multiplexing multiple streams
on a single connection.


48
00:02:12.833 --> 00:02:14.534 line:-1 position:50%
Requests are sent earlier,


49
00:02:14.534 --> 00:02:18.071 line:-1 position:50%
and data from different streams
can be interleaved.


50
00:02:18,071 --> 00:02:21,308 line:-1
This allows more efficient use
of a single TCP connection,


51
00:02:21,308 --> 00:02:24,878 line:-1
as idle waiting time
is drastically reduced.


52
00:02:24,878 --> 00:02:29,016 line:0
With HTTP/3, connection
set up is much faster,


53
00:02:29,016 --> 00:02:31,785 position:50%
so requests can go out sooner.


54
00:02:31,785 --> 00:02:36,690 line:0
However, that's not
the only benefit of HTTP/3.


55
00:02:36,690 --> 00:02:42,396 line:0
HTTP/3 streams are independent,
which is different from HTTP/2,


56
00:02:42,396 --> 00:02:46,466 line:0
where all streams share
a single TCP connection.


57
00:02:46,466 --> 00:02:49,569 line:0
On most networks,
packets are lost.


58
00:02:49,569 --> 00:02:52,139 line:0
This is a normal event
on wireless networks


59
00:02:52,139 --> 00:02:56,510 position:50%
and a natural part of detecting
the capacity of a network.


60
00:02:56.510 --> 00:03:00.313 line:-1 position:50%
In HTTP/2, packet loss
may affect many streams


61
00:03:00,313 --> 00:03:05,619 line:-1
since all of the HTTP/2 streams
share a single TCP connection.


62
00:03:05.619 --> 00:03:07.254 line:-1 position:50%
In HTTP/3,


63
00:03:07.254 --> 00:03:10.524 line:-1 position:50%
only the corresponding
HTTP stream is affected.


64
00:03:10.524 --> 00:03:12.492 line:-1 position:50%
Data that belongs
to other streams


65
00:03:12.492 --> 00:03:14.694 line:-1 position:50%
can be delivered earlier.


66
00:03:14,694 --> 00:03:19,633 position:50%
We've just shown how HTTP/3 can
establish a connection sooner


67
00:03:19,633 --> 00:03:22,335 position:50%
and how it can better cope
with packet loss.


68
00:03:22,335 --> 00:03:23,970 line:0
These improvements are enabled


69
00:03:23,970 --> 00:03:28,075 position:50%
by the underlying
transport protocol: QUIC.


70
00:03:28,075 --> 00:03:30,310 line:-1
QUIC is a new reliable
transport protocol


71
00:03:30.310 --> 00:03:31.378 line:-1 position:50%
that has been standardized


72
00:03:31.378 --> 00:03:34.281 line:-1 position:50%
by the
Internet Engineering Task Force.


73
00:03:34,281 --> 00:03:37,217 line:-1
It's based on
the same concepts of TCP


74
00:03:37,217 --> 00:03:39,586 line:-1
but provides
end-to-end encryption,


75
00:03:39.586 --> 00:03:42.856 line:-1 position:50%
multiplexed streams,
and authentication.


76
00:03:42,856 --> 00:03:48,161 line:-1
QUIC's security builds on top of
the well-known TLS 1.3 protocol.


77
00:03:48,161 --> 00:03:51,898 line:-1
The major benefit of QUIC
is improved performance.


78
00:03:51.898 --> 00:03:56.236 line:-1 position:50%
Let's explore how QUIC
achieves just that.


79
00:03:56.236 --> 00:04:00.474 line:-1 position:50%
QUIC relies on TLS 1.3
to perform a secure handshake


80
00:04:00,474 --> 00:04:01,808 line:-1
and does not require


81
00:04:01,808 --> 00:04:04,244 line:-1
the familiar TCP
three-way handshake,


82
00:04:04.244 --> 00:04:08.348 line:-1 position:50%
reducing the handshake time
to a single round trip.


83
00:04:08,348 --> 00:04:11,551 line:-1
Multiplexed streams
are a key concept of QUIC,


84
00:04:11,551 --> 00:04:14,788 line:-1
so it doesn't suffer
from head-of-line blocking.


85
00:04:14,788 --> 00:04:16,990 line:-1
A QUIC endpoint
is able to communicate


86
00:04:16.990 --> 00:04:20.594 line:-1 position:50%
more complex information
about packets it has received


87
00:04:20.594 --> 00:04:24.564 line:-1 position:50%
to the other endpoint and is not
encumbered by TCP's limits,


88
00:04:24.564 --> 00:04:28.101 line:-1 position:50%
so QUIC connections experience
improved loss recovery.


89
00:04:28.101 --> 00:04:31.371 line:-1 position:50%
The protocol also supports
connection migration


90
00:04:31.371 --> 00:04:33.673 line:-1 position:50%
which allows connections
to move seamlessly


91
00:04:33,673 --> 00:04:35,775 line:-1
across different
network interfaces


92
00:04:35.775 --> 00:04:38.145 line:-1 position:50%
without reestablishing
a session,


93
00:04:38.145 --> 00:04:42.182 line:-1 position:50%
for example, between
cellular networks and Wi-Fi.


94
00:04:42,182 --> 00:04:45,085 line:0
If you would like to learn more
about networking delays,


95
00:04:45,085 --> 00:04:49,623 position:50%
please watch the "Reduce network
delays for your app" session.


96
00:04:49.623 --> 00:04:54.294 line:-1 position:50%
Let's talk about how
you can use HTTP/3 in your app.


97
00:04:54,294 --> 00:04:56,296 line:-1
If you're using URLSession,


98
00:04:56.296 --> 00:04:59.099 line:-1 position:50%
you don't need to change
your app since iOS 15


99
00:04:59,099 --> 00:05:04,404 line:-1
and macOS Monterey ship
with HTTP/3 enabled by default.


100
00:05:04.404 --> 00:05:06.973 line:-1 position:50%
Once you enable HTTP/3
on your server,


101
00:05:06,973 --> 00:05:08,542 line:-1
you're good to go.


102
00:05:08,542 --> 00:05:11,645 line:-1
Both the upcoming
HTTP/3 RFC version


103
00:05:11,645 --> 00:05:16,816 line:-1
and the earlier HTTP/3
Draft version 29 are supported.


104
00:05:16,816 --> 00:05:20,687 line:-1
So how can you make sure
your app is using HTTP/3?


105
00:05:20.687 --> 00:05:23.456 line:-1 position:50%
Let's use Instruments
to find out!


106
00:05:23,456 --> 00:05:26,493 line:-1
In Xcode 13, we're introducing
a new instrument


107
00:05:26,493 --> 00:05:28,995 line:-1
within the networking
profiling template


108
00:05:28.995 --> 00:05:31.631 line:-1 position:50%
to inspect HTTP Traffic.


109
00:05:31.631 --> 00:05:33.366 line:-1 position:50%
It taps into URLSession
directly,


110
00:05:33,366 --> 00:05:35,468 line:-1
so there's no setup required.


111
00:05:35,468 --> 00:05:37,604 line:-1
We can use Instruments
to find out


112
00:05:37,604 --> 00:05:43,176 line:-1
if our app is using HTTP/3
or an earlier HTTP version.


113
00:05:43,176 --> 00:05:46,546 line:-1
We're going to launch
an iOS app that, upon starting,


114
00:05:46,546 --> 00:05:48,949 line:-1
fetches a set of dog pictures.


115
00:05:48.949 --> 00:05:51.618 line:-1 position:50%
We'll then inspect
HTTP headers to find out


116
00:05:51,618 --> 00:05:55,655 line:-1
how the server
is advertising HTTP/3.


117
00:05:55.655 --> 00:06:01.494 line:-1 position:50%
Let's go ahead and select
the Network profiling template.


118
00:06:05,498 --> 00:06:09,169 line:-1
Let's click Record
on the top left.


119
00:06:09.169 --> 00:06:11.171 line:-1 position:50%
A prompt will be displayed
indicating


120
00:06:11.171 --> 00:06:15.242 line:-1 position:50%
the privacy implications
of recording HTTP Traffic.


121
00:06:15.242 --> 00:06:16.243 line:-1 position:50%
After we agree,


122
00:06:16.243 --> 00:06:20.113 line:-1 position:50%
Instruments will begin recording
HTTP transactions.


123
00:06:29,089 --> 00:06:30,924 line:0
Next, Instruments
will show a plot


124
00:06:30,924 --> 00:06:35,295 line:0
with all HTTP transactions
per app and per domain.


125
00:06:35.295 --> 00:06:37.864 line:-1 position:50%
We have now captured
all the data that we need.


126
00:06:37.864 --> 00:06:42.102 line:-1 position:50%
We can click the Pause button
located on the top left.


127
00:06:44,471 --> 00:06:46,506 position:50%
Let's select the domain
that we're using.


128
00:06:46.506 --> 00:06:48.308 line:-1 position:50%
We can do that
by Option-clicking


129
00:06:48.308 --> 00:06:52.979 line:-1 position:50%
on the HTTP transactions
and then selecting the domain.


130
00:06:56,716 --> 00:06:58,051 line:0
We need to configure
Instruments


131
00:06:58,051 --> 00:07:01,588 line:0
to show the details
of the HTTP Transactions.


132
00:07:01.588 --> 00:07:05.458 line:-1 position:50%
To accomplish that, make sure
the menu on the left side shows


133
00:07:05.458 --> 00:07:08.094 line:-1 position:50%
HTTP Transactions.


134
00:07:12,599 --> 00:07:16,469 position:50%
Let's select the first request.


135
00:07:16,469 --> 00:07:19,906 position:50%
By scrolling right, we can find
the HTTP Version column


136
00:07:19,906 --> 00:07:25,278 line:0
which identifies the version of
HTTP that this transaction used.


137
00:07:25,278 --> 00:07:30,317 line:-1
Hm, we're still using HTTP/2,
but why is that?


138
00:07:30,317 --> 00:07:31,918 position:50%
On the right-hand side,
we can find


139
00:07:31,918 --> 00:07:35,622 position:50%
the extended detail view that
contains the response headers.


140
00:07:35.622 --> 00:07:37.324 line:-1 position:50%
This give us the answer:


141
00:07:37.324 --> 00:07:40.327 line:-1 position:50%
the server used
HTTP Alternative Services


142
00:07:40.327 --> 00:07:44.331 line:-1 position:50%
to advertise support for HTTP/3.


143
00:07:47,534 --> 00:07:51,805 line:-1
URLSession won't use HTTP/3
unless it was advertised.


144
00:07:51,805 --> 00:07:54,841 position:50%
In this example,
HTTP/3 was advertised


145
00:07:54,841 --> 00:07:57,944 line:0
through the Alt-Svc HTTP header.


146
00:07:57,944 --> 00:08:02,716 line:-1
It's common for HTTP servers
to advertise support for HTTP/3,


147
00:08:02.716 --> 00:08:04.417 line:-1 position:50%
using this header.


148
00:08:04,417 --> 00:08:07,220 position:50%
This information is remembered
for future connections,


149
00:08:07,220 --> 00:08:10,156 line:0
and we call this
"service discovery."


150
00:08:10,156 --> 00:08:13,360 line:-1
Now let's record the app again.


151
00:08:17,997 --> 00:08:20,266 line:-1
Once Instruments
relaunches the app,


152
00:08:20.266 --> 00:08:23.370 line:-1 position:50%
the same set of HTTP
transactions take place.


153
00:08:23,370 --> 00:08:28,241 position:50%
Again, we can now
pause Instruments.


154
00:08:30,276 --> 00:08:34,180 line:0
Let's zoom in again and inspect
the first transaction.


155
00:08:34,180 --> 00:08:37,917 line:0
Since we've remembered that
the server supported HTTP/3,


156
00:08:37,917 --> 00:08:41,054 line:0
we're now using HTTP/3.


157
00:08:41.054 --> 00:08:45.225 line:-1 position:50%
HTTP/3 service discovery
is transparent to your app.


158
00:08:45.225 --> 00:08:49.662 line:-1 position:50%
Discovery of HTTP/3 server
support happens in two ways.


159
00:08:49,662 --> 00:08:52,966 line:-1
The recommended approach
is to configure your DNS server


160
00:08:52.966 --> 00:08:55.969 line:-1 position:50%
to advertise support for HTTP/3


161
00:08:55,969 --> 00:08:59,472 line:-1
through the HTTPS
resource record.


162
00:08:59.472 --> 00:09:02.008 line:-1 position:50%
Simply configure
the application layer protocol


163
00:09:02.008 --> 00:09:07.080 line:-1 position:50%
to advertise HTTP/3
using the h3 string.


164
00:09:07,080 --> 00:09:08,782 line:-1
You should also configure
your server


165
00:09:08.782 --> 00:09:12.152 line:-1 position:50%
to add a new header
that advertises HTTP/3


166
00:09:12,152 --> 00:09:14,487 line:-1
using Alternative Services.


167
00:09:14,487 --> 00:09:17,323 line:-1
Your server should send
a Alt-Svc header


168
00:09:17,323 --> 00:09:19,592 line:-1
that advertises HTTP/3.


169
00:09:19,592 --> 00:09:23,163 line:-1
This includes the port number
and the max-age of the service,


170
00:09:23.163 --> 00:09:24.931 line:-1 position:50%
in seconds.


171
00:09:24.931 --> 00:09:27.133 line:-1 position:50%
The advantage
of the DNS record is that


172
00:09:27,133 --> 00:09:29,302 line:-1
since the information is in DNS,


173
00:09:29.302 --> 00:09:32.172 line:-1 position:50%
an HTTP/3 connection
can be established


174
00:09:32.172 --> 00:09:37.043 line:-1 position:50%
the very first time your app
tries to contact to your server.


175
00:09:37,043 --> 00:09:40,213 line:0
When you know that
your server supports HTTP/3,


176
00:09:40,213 --> 00:09:42,816 position:50%
and you would like to speed up
the discovery process,


177
00:09:42,816 --> 00:09:46,853 position:50%
you can use the
assumesHTTP3Capable property.


178
00:09:46,853 --> 00:09:49,389 line:0
This allows the HTTP stack


179
00:09:49,389 --> 00:09:52,125 line:0
to assume that you have
an HTTP/3 server


180
00:09:52,125 --> 00:09:56,429 line:0
but does not guarantee
that HTTP/3 will be used.


181
00:09:56,429 --> 00:09:59,132 line:0
Networks may still block
HTTP/3,


182
00:09:59,132 --> 00:10:02,635 position:50%
or your server may not
actually support HTTP/3.


183
00:10:02.635 --> 00:10:07.207 line:-1 position:50%
In that case,
we'll fall back to HTTP/2.


184
00:10:07,207 --> 00:10:12,245 line:-1
HTTP allows clients to specify
priorities for each resource.


185
00:10:12,245 --> 00:10:14,481 line:-1
Since resources
are often related,


186
00:10:14,481 --> 00:10:17,283 line:-1
priorities allow the server
to send some resources


187
00:10:17.283 --> 00:10:18.785 line:-1 position:50%
earlier than others,


188
00:10:18,785 --> 00:10:21,187 line:-1
based on the needs
of the client.


189
00:10:21,187 --> 00:10:25,225 line:-1
For example, user experience
for web browsing can be improved


190
00:10:25,225 --> 00:10:26,826 line:-1
by prioritizing resources


191
00:10:26,826 --> 00:10:30,230 line:-1
that affect web page rendering
the most.


192
00:10:30,230 --> 00:10:33,766 line:-1
A priority scheme
was introduced in HTTP/2


193
00:10:33.766 --> 00:10:37.003 line:-1 position:50%
but it was not often respected
due to its complexity.


194
00:10:37,003 --> 00:10:39,205 line:-1
For that reason,
the old priority model


195
00:10:39.205 --> 00:10:42.175 line:-1 position:50%
was removed from HTTP/3.


196
00:10:42,175 --> 00:10:46,312 line:-1
A new, simpler model,
which relies on HTTP headers,


197
00:10:46,312 --> 00:10:49,282 line:-1
is used by the HTTP/3 stack.


198
00:10:49.282 --> 00:10:51.651 line:-1 position:50%
In this model,
priority is specified


199
00:10:51,651 --> 00:10:54,254 line:-1
with an urgency parameter --
zero to seven --


200
00:10:54.254 --> 00:10:57.624 line:-1 position:50%
and an optional incremental
delivery parameter.


201
00:10:57,624 --> 00:10:59,392 line:-1
When using URLSession,


202
00:10:59.392 --> 00:11:02.762 line:-1 position:50%
the API to support priorities
remains the same.


203
00:11:02.762 --> 00:11:05.632 line:-1 position:50%
You still specify
the HTTP priority,


204
00:11:05,632 --> 00:11:07,901 line:-1
using the priority property,


205
00:11:07,901 --> 00:11:11,037 line:-1
which is communicated
to the server using urgency.


206
00:11:11.037 --> 00:11:13.506 line:-1 position:50%
You can enable
incremental delivery with


207
00:11:13,506 --> 00:11:16,409 line:-1
the prefersIncrementalDelivery
property.


208
00:11:16.409 --> 00:11:18.778 line:-1 position:50%
The default priority is 3.


209
00:11:18,778 --> 00:11:21,781 line:-1
URLSession infers
incremental delivery


210
00:11:21,781 --> 00:11:24,651 line:-1
depending on whether
a convenience API --


211
00:11:24.651 --> 00:11:28.254 line:-1 position:50%
like the async data method --
is used.


212
00:11:28,254 --> 00:11:31,925 position:50%
When your app is downloading
content that cannot be processed


213
00:11:31,925 --> 00:11:34,727 line:0
until the entire resource
is downloaded,


214
00:11:34,727 --> 00:11:37,497 position:50%
you should set this property
to false.


215
00:11:37,497 --> 00:11:40,700 position:50%
Dynamically changing
the priority of a resource


216
00:11:40,700 --> 00:11:44,437 line:0
after the request was sent
is also supported.


217
00:11:44,437 --> 00:11:48,207 line:-1
For example, you can prefetch
photos at a lower priority


218
00:11:48,207 --> 00:11:50,043 line:-1
and then raise that priority


219
00:11:50,043 --> 00:11:53,980 line:-1
as the user navigates
to that section of your app.


220
00:11:53,980 --> 00:11:56,783 line:-1
Next, my colleague Eric
is going to explain


221
00:11:56,783 --> 00:11:59,118 line:-1
how you can change
your custom networking protocols


222
00:11:59,118 --> 00:12:00,520 line:-1
to adopt QUIC.


223
00:12:00.520 --> 00:12:02.055 line:-1 position:50%
Thank you.


224
00:12:02.055 --> 00:12:04.023 line:-1 position:50%
Eric Kinnear: Thanks, Rui!


225
00:12:04.023 --> 00:12:08.661 line:-1 position:50%
As we discussed earlier,
HTTP/3 is built on top of QUIC,


226
00:12:08,661 --> 00:12:10,763 line:-1
which provides
multiplexed streams,


227
00:12:10,763 --> 00:12:13,766 line:-1
similar to those found
in HTTP/2,


228
00:12:13,766 --> 00:12:15,969 line:-1
but without the problems
introduced


229
00:12:15,969 --> 00:12:18,605 line:-1
by sharing a single
TCP connection


230
00:12:18,605 --> 00:12:20,707 line:-1
as the underlying transport.


231
00:12:20,707 --> 00:12:23,910 line:-1
A QUIC transport connection --
or QUIC tunnel --


232
00:12:23.910 --> 00:12:27.113 line:-1 position:50%
multiplexes data
for multiple unidirectional


233
00:12:27,113 --> 00:12:29,916 line:-1
or bidirectional QUIC streams.


234
00:12:29,916 --> 00:12:33,453 line:-1
Streams can be created
by either endpoint,


235
00:12:33,453 --> 00:12:37,457 line:-1
can concurrently send data
interleaved with other streams,


236
00:12:37,457 --> 00:12:40,627 line:-1
and have states similar
to the traditional streams


237
00:12:40,627 --> 00:12:42,962 line:-1
provided by TCP.


238
00:12:42,962 --> 00:12:47,900 line:-1
Best of all, QUIC has
TLS 1.3 security built right in


239
00:12:47,900 --> 00:12:51,170 line:-1
and can better respond
to changing network conditions.


240
00:12:51.170 --> 00:12:55.975 line:-1 position:50%
These capabilities are useful
for more than just HTTP.


241
00:12:55,975 --> 00:12:57,844 line:-1
If your application
is exchanging


242
00:12:57.844 --> 00:13:00.179 line:-1 position:50%
non-request/response based data,


243
00:13:00.179 --> 00:13:02.949 line:-1 position:50%
could benefit from having
multiplexed streams


244
00:13:02.949 --> 00:13:05.551 line:-1 position:50%
that share an underlying
transport context,


245
00:13:05,551 --> 00:13:08,554 line:-1
or is implementing
any other custom protocol --


246
00:13:08,554 --> 00:13:12,358 line:-1
such as peer-to-peer
communication or RPC calls --


247
00:13:12.358 --> 00:13:15.895 line:-1 position:50%
consider using QUIC transport
for your app.


248
00:13:15,895 --> 00:13:19,332 line:-1
In iOS 15 and macOS Monterey,


249
00:13:19,332 --> 00:13:22,902 line:0
NWProtocolQUIC joins
the other built-in protocols


250
00:13:22,902 --> 00:13:25,238 line:0
provided by Network.framework.


251
00:13:25.238 --> 00:13:29.676 line:-1 position:50%
Creating a connection
that uses QUIC is very familiar.


252
00:13:29,676 --> 00:13:31,477 line:-1
Simply provide your endpoint


253
00:13:31,477 --> 00:13:34,347 line:-1
and the newly available
QUIC parameters.


254
00:13:34.347 --> 00:13:37.850 line:-1 position:50%
These parameters specify
the ALPN string,


255
00:13:37,850 --> 00:13:42,755 line:-1
the application layer protocol
to negotiate with the server.


256
00:13:42.755 --> 00:13:45.825 line:-1 position:50%
Set a state update handler --
just like usual --


257
00:13:45,825 --> 00:13:48,928 line:-1
to be able to respond
as the connection makes progress


258
00:13:48,928 --> 00:13:50,363 line:-1
and becomes ready.


259
00:13:50,363 --> 00:13:53,966 position:50%
And, finally, start your
connection on a dispatch queue


260
00:13:53,966 --> 00:13:56,102 position:50%
that you'd like to use
for those state updates


261
00:13:56,102 --> 00:13:58,371 line:0
and other callbacks.


262
00:13:58,371 --> 00:14:00,807 line:-1
Now that you've got
a QUIC stream established,


263
00:14:00.807 --> 00:14:02.975 line:-1 position:50%
you can send and receive data


264
00:14:02,975 --> 00:14:05,678 line:-1
just like any other
NWConnection.


265
00:14:05,678 --> 00:14:08,915 line:-1
Use the send function to provide
the data you'd like to send


266
00:14:08.915 --> 00:14:10.216 line:-1 position:50%
to the remote endpoint,


267
00:14:10,216 --> 00:14:14,053 line:-1
and schedule subsequent sends
when complete.


268
00:14:14.053 --> 00:14:16.823 line:-1 position:50%
Use receive to handle
incoming data,


269
00:14:16,823 --> 00:14:20,693 line:-1
and schedule subsequent
receives when it completes.


270
00:14:20.693 --> 00:14:23.930 line:-1 position:50%
Last year, we introduced
the Connection Group object


271
00:14:23,930 --> 00:14:25,398 line:-1
in Network.framework


272
00:14:25.398 --> 00:14:27.934 line:-1 position:50%
to make it easier
to handle situations


273
00:14:27,934 --> 00:14:31,771 line:-1
where multiple connections
are related or grouped.


274
00:14:31,771 --> 00:14:34,173 line:-1
QUIC streams
that are multiplexed


275
00:14:34.173 --> 00:14:36.042 line:-1 position:50%
on an underlying
transport context --


276
00:14:36,042 --> 00:14:37,310 line:-1
or tunnel --


277
00:14:37,310 --> 00:14:40,179 line:-1
are logically grouped
based on that relationship


278
00:14:40,179 --> 00:14:42,849 line:-1
and can be used
with a new group type:


279
00:14:42,849 --> 00:14:45,351 line:-1
NWMultiplexGroup.


280
00:14:45.351 --> 00:14:47.653 line:-1 position:50%
A Connection Group
follows a lifecycle


281
00:14:47,653 --> 00:14:51,124 line:-1
similar to that of the other
Network.framework objects


282
00:14:51,124 --> 00:14:53,593 line:-1
and allows you to reason
about the state


283
00:14:53,593 --> 00:14:58,030 line:-1
of the underlying QUIC tunnel
shared by your QUIC streams.


284
00:14:58,030 --> 00:15:00,767 line:-1
It also allows you to create
new outgoing streams


285
00:15:00.767 --> 00:15:03.703 line:-1 position:50%
from a specific QUIC tunnel
as well as receive


286
00:15:03.703 --> 00:15:07.907 line:-1 position:50%
new incoming streams initiated
by the remote endpoint.


287
00:15:07.907 --> 00:15:10.943 line:-1 position:50%
To create a connection group
for a multiplexing protocol,


288
00:15:10.943 --> 00:15:13.679 line:-1 position:50%
use a multiplex
group descriptor.


289
00:15:13.679 --> 00:15:16.349 line:-1 position:50%
In this case,
we'll create a group descriptor


290
00:15:16,349 --> 00:15:19,752 line:-1
to example.com on port 443.


291
00:15:19.752 --> 00:15:22.789 line:-1 position:50%
Next, we create
a NWConnectionGroup


292
00:15:22.789 --> 00:15:25.858 line:-1 position:50%
with that descriptor
and QUIC parameters,


293
00:15:25,858 --> 00:15:29,495 line:-1
providing our ALPN string
when we create them.


294
00:15:29,495 --> 00:15:32,965 line:-1
Just like with an NWConnection,
we set a state update handler,


295
00:15:32,965 --> 00:15:33,999 line:-1
but this time,


296
00:15:33,999 --> 00:15:36,969 line:-1
it's tracking the state
of the underlying QUIC tunnel,


297
00:15:36,969 --> 00:15:40,373 line:-1
rather than the state
of an individual stream.


298
00:15:40,373 --> 00:15:42,875 position:50%
Finally, we start
the connection group,


299
00:15:42,875 --> 00:15:45,011 position:50%
providing our callback queue.


300
00:15:45,011 --> 00:15:48,648 line:-1
New outgoing streams can be
created by initializing


301
00:15:48,648 --> 00:15:51,717 line:-1
a NWConnection from the group


302
00:15:51,717 --> 00:15:55,555 line:-1
or by calling the extract
function on the group.


303
00:15:55.555 --> 00:15:58.691 line:-1 position:50%
Incoming streams initiated
by the remote endpoint


304
00:15:58.691 --> 00:16:01.460 line:-1 position:50%
can be handled by setting
the new connection handler


305
00:16:01,460 --> 00:16:03,129 line:-1
on the group.


306
00:16:03.129 --> 00:16:07.300 line:-1 position:50%
These connections can be set up
as usual with a state handler --


307
00:16:07,300 --> 00:16:10,069 line:-1
this time tracking
the stream state --


308
00:16:10.069 --> 00:16:14.240 line:-1 position:50%
and started with the queue
to use for callbacks.


309
00:16:14.240 --> 00:16:16.242 line:-1 position:50%
Just like with other protocols,


310
00:16:16.242 --> 00:16:19.078 line:-1 position:50%
you can use QUIC.Options
for configuration


311
00:16:19,078 --> 00:16:21,280 line:-1
when creating
your parameter's object.


312
00:16:21,280 --> 00:16:24,083 line:-1
For QUIC, you can configure
the transport parameters


313
00:16:24,083 --> 00:16:26,219 line:-1
listed in the QUIC
specification,


314
00:16:26,219 --> 00:16:30,323 position:50%
and you can also customize
properties of individual streams


315
00:16:30,323 --> 00:16:32,525 line:0
when creating them
from a connection group;


316
00:16:32,525 --> 00:16:38,130 position:50%
for example, if you want create
a new, unidirectional stream.


317
00:16:38.130 --> 00:16:42.034 line:-1 position:50%
If you're using NWListener
to run a server in your app,


318
00:16:42.034 --> 00:16:43.569 line:-1 position:50%
it has also been enhanced


319
00:16:43.569 --> 00:16:46.839 line:-1 position:50%
to allow you to receive
new incoming QUIC tunnels


320
00:16:46.839 --> 00:16:49.609 line:-1 position:50%
via the
newConnectionGroupHandler.


321
00:16:49.609 --> 00:16:51.844 line:-1 position:50%
Your newConnectionGroupHandler
will be called


322
00:16:51,844 --> 00:16:54,780 line:-1
every time someone establishes
a new QUIC tunnel


323
00:16:54.780 --> 00:16:56.382 line:-1 position:50%
to your server.


324
00:16:56.382 --> 00:16:59.552 line:-1 position:50%
Inside that handler, you can
set up the group as usual


325
00:16:59.552 --> 00:17:01.587 line:-1 position:50%
to receive state updates.


326
00:17:01.587 --> 00:17:04.724 line:-1 position:50%
This is also a good place to set
the new connection handler


327
00:17:04,724 --> 00:17:06,425 line:-1
we were just discussing.


328
00:17:06,425 --> 00:17:08,394 line:-1
If you'd like to receive
subsequent streams


329
00:17:08.394 --> 00:17:10.162 line:-1 position:50%
opened on this tunnel,


330
00:17:10.162 --> 00:17:12.965 line:-1 position:50%
start the group with the queue
to use for callbacks,


331
00:17:12,965 --> 00:17:15,167 line:-1
and you're all set!


332
00:17:15.167 --> 00:17:18.604 line:-1 position:50%
Finally, you can use
NWProtocolMetadata


333
00:17:18,604 --> 00:17:21,941 line:-1
to access information
about streams.


334
00:17:21,941 --> 00:17:25,144 line:-1
For example, you might want
to check the stream ID


335
00:17:25,144 --> 00:17:26,946 line:-1
of a newly created stream.


336
00:17:26,946 --> 00:17:28,481 line:-1
And when you're done
with a stream,


337
00:17:28.481 --> 00:17:31.851 line:-1 position:50%
if your custom protocol has
defined applicationError codes,


338
00:17:31,851 --> 00:17:34,820 line:-1
you can use the metadata
to communicate any errors


339
00:17:34,820 --> 00:17:38,324 line:-1
to the remote endpoint
before you cancel the stream.


340
00:17:38.324 --> 00:17:40.893 line:-1 position:50%
So we've just explored
how we can use


341
00:17:40.893 --> 00:17:43.429 line:-1 position:50%
the new NWMultiplexGroup type


342
00:17:43.429 --> 00:17:46.699 line:-1 position:50%
to create and manage
QUIC tunnels,


343
00:17:46,699 --> 00:17:48,000 line:-1
and from that group,


344
00:17:48.000 --> 00:17:52.138 line:-1 position:50%
create individual NWConnections
for each QUIC stream.


345
00:17:52.138 --> 00:17:55.975 line:-1 position:50%
We can use a NWListener
to listen for incoming tunnels,


346
00:17:55.975 --> 00:17:57.977 line:-1 position:50%
and use the resulting
connection groups


347
00:17:57.977 --> 00:18:00.479 line:-1 position:50%
to receive new incoming streams.


348
00:18:00.479 --> 00:18:03.849 line:-1 position:50%
On those streams,
we can send and receive data


349
00:18:03,849 --> 00:18:06,519 line:-1
just like on
any other connection,


350
00:18:06.519 --> 00:18:08.587 line:-1 position:50%
and we can use
QUIC protocol options


351
00:18:08.587 --> 00:18:11.557 line:-1 position:50%
to specify transport parameters
and configure streams,


352
00:18:11,557 --> 00:18:13,459 line:-1
while using
QUIC protocol metadata


353
00:18:13.459 --> 00:18:15.861 line:-1 position:50%
to inspect the streams
and communicate


354
00:18:15,861 --> 00:18:19,732 line:-1
QUIC-specific information
to the remote endpoint.


355
00:18:19,732 --> 00:18:22,168 line:-1
Now that we've improved
the networking in our app


356
00:18:22.168 --> 00:18:25.404 line:-1 position:50%
by adopting QUIC,
how do we tell if it's working?


357
00:18:25.404 --> 00:18:27.440 line:-1 position:50%
We can launch our app
while debugging,


358
00:18:27,440 --> 00:18:31,243 line:-1
with a new environment variable
that outputs qlog files.


359
00:18:31,243 --> 00:18:34,647 line:-1
qlog is a new standardized
logging format


360
00:18:34,647 --> 00:18:36,749 line:-1
proposed in the IETF,


361
00:18:36.749 --> 00:18:39.585 line:-1 position:50%
which allows you to export
even richer information


362
00:18:39.585 --> 00:18:42.054 line:-1 position:50%
about how your QUIC connections
are behaving


363
00:18:42,054 --> 00:18:45,157 line:-1
than would be present
in a traditional packet capture.


364
00:18:45,157 --> 00:18:48,828 line:-1
After your test run, you can use
the Devices window in Xcode


365
00:18:48,828 --> 00:18:50,696 line:-1
to download your app's container


366
00:18:50,696 --> 00:18:53,199 line:-1
with the qlog files
for analysis.


367
00:18:53.199 --> 00:18:54.367 line:-1 position:50%
And there are a number


368
00:18:54,367 --> 00:18:56,769 line:-1
of different open-source
visualizations


369
00:18:56.769 --> 00:18:58.337 line:-1 position:50%
that make it much easier


370
00:18:58,337 --> 00:19:02,174 line:-1
to introspect the behavior
of your QUIC connections.


371
00:19:02.174 --> 00:19:04.777 line:-1 position:50%
Today, we've examined
the improvements


372
00:19:04,777 --> 00:19:08,914 line:-1
that HTTP/3 provides
for your HTTP traffic.


373
00:19:08.914 --> 00:19:11.784 line:-1 position:50%
On the client,
it's already on by default


374
00:19:11,784 --> 00:19:14,420 line:-1
for users of the modern
networking APIs,


375
00:19:14,420 --> 00:19:18,090 line:-1
so enable HTTP/3 on your server
to take advantage


376
00:19:18,090 --> 00:19:20,493 line:-1
of its increased performance
and resilience


377
00:19:20.493 --> 00:19:22.395 line:-1 position:50%
to changing network conditions.


378
00:19:22.395 --> 00:19:26.365 line:-1 position:50%
If you're using a custom,
non-HTTP networking protocol,


379
00:19:26,365 --> 00:19:29,135 line:-1
use the new multiplexing
protocol support


380
00:19:29,135 --> 00:19:32,705 line:-1
built into Network.framework
to create QUIC connections


381
00:19:32.705 --> 00:19:35.107 line:-1 position:50%
with NWConnectionGroup.


382
00:19:35.107 --> 00:19:37.076 line:-1 position:50%
And whichever protocol
you're using,


383
00:19:37,076 --> 00:19:38,811 line:-1
you can use new debugging tools


384
00:19:38.811 --> 00:19:40.780 line:-1 position:50%
to visualize
the awesome benefits


385
00:19:40,780 --> 00:19:43,783 line:-1
of the next generation
of networking protocols.


386
00:19:43.783 --> 00:19:44.984 line:-1 position:50%
Thanks for watching.


387
00:19:44,984 --> 00:19:47,820 size:2% align:right position:90%
♪

