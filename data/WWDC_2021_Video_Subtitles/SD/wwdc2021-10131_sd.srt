2
00:00:00.000 --> 00:00:02.002 line:-1 position:50%
[MAC STARTUP CHIME]


3
00:00:02,002 --> 00:00:05,138 line:-1
♪ Bass music playing ♪


4
00:00:05,138 --> 00:00:09,076 position:89% line:0 align:center
♪


5
00:00:09,076 --> 00:00:10,210 line:-1
Melissa Nierle:
I'm Melissa Nierle,


6
00:00:10,210 --> 00:00:11,345 line:-1
a software engineer


7
00:00:11.345 --> 00:00:14.615 line:-1 position:50%
on the Enterprise and Education
Technologies team.


8
00:00:14.615 --> 00:00:16.216 line:-1 position:50%
At Apple, we're always working


9
00:00:16.216 --> 00:00:18.552 line:-1 position:50%
to create the best
device management features


10
00:00:18,552 --> 00:00:21,221 line:-1
and functionality to equip
our enterprise partners


11
00:00:21,221 --> 00:00:24,124 line:-1
and education organizations
with the tools they need


12
00:00:24,124 --> 00:00:27,661 line:-1
to connect their team members
and students.


13
00:00:27,661 --> 00:00:29,630 line:-1
The backbone of all
of these management features


14
00:00:29,630 --> 00:00:31,999 line:-1
is the MDM protocol itself.


15
00:00:31,999 --> 00:00:33,667 line:-1
The protocol is
a well-established,


16
00:00:33,667 --> 00:00:36,970 line:-1
heavily used solution
provided directly within iOS,


17
00:00:36.970 --> 00:00:38.672 line:-1 position:50%
macOS, and tvOS


18
00:00:38.672 --> 00:00:42.910 line:-1 position:50%
and has become a standard
across mobile device management.


19
00:00:42.910 --> 00:00:44.912 line:-1 position:50%
And while we add features
to it each year,


20
00:00:44,912 --> 00:00:47,180 line:-1
we also continually evaluate
the protocol


21
00:00:47.180 --> 00:00:49.149 line:-1 position:50%
against our device
management goals


22
00:00:49.149 --> 00:00:50.918 line:-1 position:50%
and evolve it to meet
the dynamic needs


23
00:00:50,918 --> 00:00:55,155 line:-1
of MDM solution developers,
admins, and users.


24
00:00:55.155 --> 00:00:57.557 line:-1 position:50%
Today, our MDM protocol
can be described


25
00:00:57.557 --> 00:01:00.594 line:-1 position:50%
as an imperative
and reactive protocol.


26
00:01:00.594 --> 00:01:03.730 line:-1 position:50%
Each management workflow takes
time and multiple round trips


27
00:01:03.730 --> 00:01:06.900 line:-1 position:50%
between the device and server.


28
00:01:06,900 --> 00:01:09,336 line:0
Then any performance challenge
is compounded


29
00:01:09,336 --> 00:01:11,171 position:50%
when you manage
a large number of devices


30
00:01:11,171 --> 00:01:13,173 line:0
across an organization.


31
00:01:13,173 --> 00:01:15,342 position:50%
This is an example
of where we want to ensure


32
00:01:15,342 --> 00:01:19,279 position:50%
our protocol is as performant
and scalable as possible.


33
00:01:19,279 --> 00:01:22,716 position:50%
And to achieve optimal
performance and scalability,


34
00:01:22,716 --> 00:01:26,086 line:0
we've reenvisioned
the MDM protocol itself.


35
00:01:26.086 --> 00:01:30.357 line:-1 position:50%
The future of device management
is declarative management;


36
00:01:30.357 --> 00:01:32.492 line:-1 position:50%
a transformative update
to the protocol


37
00:01:32,492 --> 00:01:36,797 line:-1
which brings policy management
to the device.


38
00:01:36.797 --> 00:01:39.566 line:-1 position:50%
Declarative management allows
the device to be autonomous


39
00:01:39,566 --> 00:01:40,600 line:-1
and proactive,


40
00:01:40,600 --> 00:01:43,036 line:-1
freeing up the server
to be lightweight, reactive,


41
00:01:43,036 --> 00:01:47,407 line:-1
and subscribe to updates
without constant polling.


42
00:01:47,407 --> 00:01:50,510 line:-1
An autonomous device reacts
to its own state changes


43
00:01:50.510 --> 00:01:52.679 line:-1 position:50%
and then applies
management logic to itself


44
00:01:52,679 --> 00:01:55,882 line:-1
without prompting
from the server.


45
00:01:55.882 --> 00:01:58.118 line:-1 position:50%
A proactive device
has a status channel


46
00:01:58,118 --> 00:02:00,120 line:-1
asynchronously reporting
to the server


47
00:02:00,120 --> 00:02:02,255 line:-1
when important
state changes occur,


48
00:02:02.255 --> 00:02:06.593 line:-1 position:50%
avoiding the need for servers
to poll devices.


49
00:02:06.593 --> 00:02:09.730 line:-1 position:50%
Enabling devices to be both
autonomous and proactive


50
00:02:09,730 --> 00:02:12,366 line:-1
is the foundation
of declarative management


51
00:02:12.366 --> 00:02:16.903 line:-1 position:50%
and allows for increased
performance and scalability.


52
00:02:16.903 --> 00:02:19.139 line:-1 position:50%
And the best part is,
while it's a new paradigm,


53
00:02:19.139 --> 00:02:21.241 line:-1 position:50%
it's not a new protocol.


54
00:02:21,241 --> 00:02:23,310 line:-1
We've built this new
declarative functionality


55
00:02:23,310 --> 00:02:25,779 line:-1
right into our existing
MDM protocol,


56
00:02:25.779 --> 00:02:28.715 line:-1 position:50%
starting with iOS devices.


57
00:02:28,715 --> 00:02:30,751 line:-1
We'll take a deep dive
into the data model


58
00:02:30,751 --> 00:02:33,854 line:-1
that powers the new
declarative paradigm.


59
00:02:33.854 --> 00:02:37.457 line:-1 position:50%
Then later, we'll talk
about integration with MDM.


60
00:02:37,457 --> 00:02:40,193 line:-1
We'll go through
a specific example


61
00:02:40,193 --> 00:02:43,263 line:-1
and learn how to get
yourself started.


62
00:02:43.263 --> 00:02:45.899 line:-1 position:50%
Let's begin with
the declarative data model.


63
00:02:45.899 --> 00:02:48.969 line:-1 position:50%
There are three pillars
to the declarative data model.


64
00:02:48.969 --> 00:02:51.438 line:-1 position:50%
Declarations, which are payloads
that the server defines


65
00:02:51.438 --> 00:02:53.740 line:-1 position:50%
and sends to devices;


66
00:02:53.740 --> 00:02:56.643 line:-1 position:50%
the status channel, which is
a new channel of communication


67
00:02:56,643 --> 00:02:58,912 line:-1
where the device proactively
updates the server


68
00:02:58.912 --> 00:03:01.615 line:-1 position:50%
with new information
about itself;


69
00:03:01.615 --> 00:03:03.216 line:-1 position:50%
and extensibility, so that,


70
00:03:03.216 --> 00:03:06.386 line:-1 position:50%
as Apple introduces new features
to declarative management,


71
00:03:06,386 --> 00:03:09,523 line:-1
your devices and servers
handle it seamlessly.


72
00:03:09,523 --> 00:03:11,758 line:-1
Understanding these three
pillars will prepare you


73
00:03:11.758 --> 00:03:13.527 line:-1 position:50%
to incorporate
declarative management


74
00:03:13.527 --> 00:03:16.830 line:-1 position:50%
into your MDM solution.


75
00:03:16.830 --> 00:03:19.433 line:-1 position:50%
Let's start with declarations.


76
00:03:19.433 --> 00:03:21.301 line:-1 position:50%
Declarations represent
the policy


77
00:03:21.301 --> 00:03:24.471 line:-1 position:50%
an organization wants
to enforce on devices --


78
00:03:24.471 --> 00:03:28.775 line:-1 position:50%
for example, accounts,
settings, and restrictions.


79
00:03:28.775 --> 00:03:30.777 line:-1 position:50%
Declarations can be created
for policy


80
00:03:30,777 --> 00:03:33,480 line:-1
that is common to all users,
as well as policy


81
00:03:33.480 --> 00:03:36.516 line:-1 position:50%
that is specific
to a single user or device.


82
00:03:36,516 --> 00:03:38,919 line:-1
Let's examine
the makeup of declarations.


83
00:03:38,919 --> 00:03:40,954 line:-1
The data representation
for declarations


84
00:03:40,954 --> 00:03:44,458 line:-1
is similar to profiles, where a
declaration is also a dictionary


85
00:03:44.458 --> 00:03:47.594 line:-1 position:50%
with a set of keys
and standard types for values.


86
00:03:47,594 --> 00:03:50,564 line:-1
Declarations, however,
are serialized as JSON objects


87
00:03:50.564 --> 00:03:54.067 line:-1 position:50%
when sent over the network,
instead of plists.


88
00:03:54.067 --> 00:03:57.170 line:-1 position:50%
All declarations have
three required properties:


89
00:03:57.170 --> 00:04:00.774 line:-1 position:50%
Type, Identifier
and ServerToken.


90
00:04:00,774 --> 00:04:05,112 line:-1
Type defines which policy
a configuration represents.


91
00:04:05,112 --> 00:04:08,348 line:-1
The Identifier key has a value
that uniquely identifies


92
00:04:08,348 --> 00:04:10,717 line:-1
the declaration within the set
of all declarations


93
00:04:10,717 --> 00:04:12,752 line:-1
sent to the device.


94
00:04:12,752 --> 00:04:16,256 line:-1
Typically, this will be a UUID
represented as a string.


95
00:04:16.256 --> 00:04:19.259 line:-1 position:50%
The device uses this value
when synchronizing declarations


96
00:04:19,259 --> 00:04:21,695 line:-1
with the server.


97
00:04:21,695 --> 00:04:24,331 line:-1
The ServerToken key
represents a unique revision


98
00:04:24,331 --> 00:04:27,734 line:-1
of the declaration
based on the Identifier key.


99
00:04:27.734 --> 00:04:30.137 line:-1 position:50%
This key is also used when
synchronizing declarations


100
00:04:30.137 --> 00:04:31.805 line:-1 position:50%
with the server.


101
00:04:31,805 --> 00:04:35,041 line:-1
The value is a string that must
be different for each revision.


102
00:04:35,041 --> 00:04:37,577 line:-1
It could be a simple counter
or a UUID string,


103
00:04:37,577 --> 00:04:39,813 line:-1
as shown in the example.


104
00:04:39,813 --> 00:04:42,916 line:-1
The payload is a data-specific
piece of the declaration,


105
00:04:42.916 --> 00:04:44.151 line:-1 position:50%
containing the keys and values


106
00:04:44,151 --> 00:04:46,653 line:-1
pertinent
to the declaration type.


107
00:04:46.653 --> 00:04:49.956 line:-1 position:50%
Just like with profile payloads,
some keys may be required,


108
00:04:49,956 --> 00:04:51,658 line:-1
and others may be optional.


109
00:04:51,658 --> 00:04:54,928 line:-1
Values can be strings, numbers,
booleans, arrays,


110
00:04:54.928 --> 00:04:57.831 line:-1 position:50%
or dictionaries and may be
constrained in range --


111
00:04:57,831 --> 00:05:00,934 line:-1
like numbers one through ten --
or to a specific set of values


112
00:05:00,934 --> 00:05:02,702 line:-1
like a string enumeration.


113
00:05:02.702 --> 00:05:05.772 line:-1 position:50%
There are four types of
declarations: configurations,


114
00:05:05,772 --> 00:05:08,942 line:-1
assets, activations,
and management.


115
00:05:08,942 --> 00:05:12,379 line:-1
The first type of declaration
is a configuration.


116
00:05:12,379 --> 00:05:14,714 line:-1
Configurations represent
the policies


117
00:05:14,714 --> 00:05:16,516 line:-1
to be applied to the device --


118
00:05:16.516 --> 00:05:20.153 line:-1 position:50%
for example, accounts,
settings, and restrictions.


119
00:05:20,153 --> 00:05:25,625 line:-1
Configurations are similar to
MDM's existing profile payloads.


120
00:05:25,625 --> 00:05:28,261 line:-1
Here is an example of
a configuration declaration


121
00:05:28,261 --> 00:05:32,866 line:-1
that applies restrictions
to the device passcode.


122
00:05:32.866 --> 00:05:34.034 line:-1 position:50%
The standard keys --


123
00:05:34,034 --> 00:05:36,136 line:-1
Type, Identifier,
and ServerToken --


124
00:05:36.136 --> 00:05:39.673 line:-1 position:50%
are present, as required
for all declarations.


125
00:05:39,673 --> 00:05:41,541 line:-1
The value of the Type
identifies this


126
00:05:41,541 --> 00:05:45,412 line:-1
as a passcode configuration
type of declaration.


127
00:05:45.412 --> 00:05:48.381 line:-1 position:50%
The Payload key contains
the passcode policy data


128
00:05:48,381 --> 00:05:51,251 line:-1
for the configuration.


129
00:05:51,251 --> 00:05:54,254 line:-1
The next type of declaration
is an asset.


130
00:05:54,254 --> 00:05:56,856 line:-1
Assets represent
references to ancillary data


131
00:05:56.856 --> 00:05:58.925 line:-1 position:50%
needed by configurations.


132
00:05:58.925 --> 00:06:01.127 line:-1 position:50%
This can be a shared item
of large data


133
00:06:01.127 --> 00:06:02.829 line:-1 position:50%
or a personalized one.


134
00:06:02,829 --> 00:06:06,566 line:-1
For large data items, the asset
declaration contains a URL


135
00:06:06,566 --> 00:06:09,269 line:-1
that the device uses to fetch
the actual asset data


136
00:06:09,269 --> 00:06:10,604 line:-1
from a server.


137
00:06:10,604 --> 00:06:13,974 line:-1
This server could be
your MDM server,


138
00:06:13,974 --> 00:06:17,944 line:-1
or it could be a separate
content delivery network server.


139
00:06:17,944 --> 00:06:21,348 line:-1
Serving assets from a separate
content delivery network


140
00:06:21,348 --> 00:06:23,917 line:-1
shifts the burden of supporting
large network bandwidth


141
00:06:23.917 --> 00:06:26.119 line:-1 position:50%
to a service
better suited for it.


142
00:06:26.119 --> 00:06:28.221 line:-1 position:50%
Assets can also be used
to represent data


143
00:06:28,221 --> 00:06:30,557 line:-1
specific to a user,
such as their name,


144
00:06:30,557 --> 00:06:34,294 line:-1
email address, passwords
for accounts, and certificates.


145
00:06:34,294 --> 00:06:36,396 line:-1
This takes the per-user
customized data


146
00:06:36,396 --> 00:06:39,266 line:-1
out of configurations
and moves it into smaller,


147
00:06:39,266 --> 00:06:41,935 line:-1
dedicated asset-type
declarations.


148
00:06:41,935 --> 00:06:43,903 position:50%
Assets have
a one-to-many relationship


149
00:06:43,903 --> 00:06:45,872 position:50%
with configurations.


150
00:06:45,872 --> 00:06:48,742 line:0
For example, one credential
asset can be referenced


151
00:06:48,742 --> 00:06:51,011 line:0
by several
account configurations,


152
00:06:51,011 --> 00:06:53,747 position:50%
avoiding the need to replicate
the same user information


153
00:06:53,747 --> 00:06:55,915 line:0
in each account configuration.


154
00:06:55,915 --> 00:06:58,818 position:50%
Then, if the user credential
needs to be updated,


155
00:06:58,818 --> 00:07:01,288 position:50%
only that asset
needs to be updated.


156
00:07:01,288 --> 00:07:03,757 position:50%
All the configurations
referencing that asset


157
00:07:03,757 --> 00:07:04,991 line:0
remain unchanged,


158
00:07:04,991 --> 00:07:08,194 position:50%
and the device updates
the policy accordingly.


159
00:07:08,194 --> 00:07:10,864 line:0
The ability to do incremental
updates like this,


160
00:07:10,864 --> 00:07:12,766 line:0
for many configurations
at a time,


161
00:07:12,766 --> 00:07:14,801 line:0
will improve the overall
responsiveness


162
00:07:14,801 --> 00:07:17,037 line:0
of the device management system.


163
00:07:17,037 --> 00:07:19,773 line:-1
Let's examine the makeup
of an asset declaration.


164
00:07:19,773 --> 00:07:21,808 line:-1
Here is an example
of an asset declaration


165
00:07:21.808 --> 00:07:23.877 line:-1 position:50%
that defines a user identity --


166
00:07:23,877 --> 00:07:26,880 line:-1
essentially the contact
information for a user.


167
00:07:26.880 --> 00:07:29.349 line:-1 position:50%
The three required standard keys
are present,


168
00:07:29,349 --> 00:07:31,351 line:-1
and the value of Type
defines this


169
00:07:31,351 --> 00:07:34,020 line:-1
as a user identity
asset declaration.


170
00:07:34.020 --> 00:07:36.623 line:-1 position:50%
The Payload key contains
the user identity properties


171
00:07:36,623 --> 00:07:38,291 line:-1
of this asset.


172
00:07:38,291 --> 00:07:41,328 line:-1
The next type of declaration
is an activation.


173
00:07:41,328 --> 00:07:43,730 line:0
Activations represent sets
of configurations


174
00:07:43,730 --> 00:07:46,466 position:50%
that the device will
atomically apply.


175
00:07:46,466 --> 00:07:48,635 line:0
This means all configurations
in the set,


176
00:07:48,635 --> 00:07:50,470 line:0
along with any
referenced assets,


177
00:07:50,470 --> 00:07:54,007 position:50%
must be valid in order
for all of them to be applied.


178
00:07:54,007 --> 00:07:55,575 line:0
If any are invalid,


179
00:07:55,575 --> 00:07:59,045 position:50%
the activation will fail
to apply the associated policy.


180
00:07:59,045 --> 00:08:01,081 line:0
Here is an example
of a simple activation


181
00:08:01,081 --> 00:08:03,450 line:0
that contains
two configurations.


182
00:08:03.450 --> 00:08:07.220 line:-1 position:50%
The three required
declaration keys are present,


183
00:08:07.220 --> 00:08:09.923 line:-1 position:50%
and the payload contains
the set of configurations


184
00:08:09,923 --> 00:08:12,692 line:-1
to be atomically applied
by the activation.


185
00:08:12.692 --> 00:08:15.929 line:-1 position:50%
Configurations are referenced
by their identifier key.


186
00:08:15,929 --> 00:08:17,831 position:50%
There is a many-to-many
relationship


187
00:08:17,831 --> 00:08:20,834 line:0
between activations
and configurations.


188
00:08:20,834 --> 00:08:24,738 line:0
Activations can refer
to multiple configurations,


189
00:08:24,738 --> 00:08:27,006 position:50%
and a configuration can have
multiple activations


190
00:08:27,006 --> 00:08:29,042 position:50%
reference it.


191
00:08:29,042 --> 00:08:30,577 line:0
This many-to-many relationship


192
00:08:30,577 --> 00:08:32,445 line:0
allows for complex
business logic


193
00:08:32,445 --> 00:08:36,549 line:0
to be handled autonomously
by the device.


194
00:08:36,549 --> 00:08:38,451 line:0
Activations can include
a predicate


195
00:08:38,451 --> 00:08:40,987 position:50%
that determines when
the activation state is active


196
00:08:40,987 --> 00:08:44,357 position:50%
or inactive on a device.


197
00:08:44,357 --> 00:08:47,360 line:-1
The device will only process
the configurations referenced


198
00:08:47,360 --> 00:08:51,765 line:-1
by an activation if
the predicate evaluates to true.


199
00:08:51.765 --> 00:08:53.967 line:-1 position:50%
As an example,
a predicate can declare


200
00:08:53.967 --> 00:08:56.336 line:-1 position:50%
that the particular activation
is only active


201
00:08:56.336 --> 00:09:00.306 line:-1 position:50%
on a specific device type,
such as an iPad.


202
00:09:00,306 --> 00:09:02,575 line:-1
Another example is wanting
a set of policies


203
00:09:02,575 --> 00:09:06,413 line:-1
to apply only to a particular
version of the OS.


204
00:09:06,413 --> 00:09:08,681 line:-1
This allows the server
to send all the declarations


205
00:09:08.681 --> 00:09:10.083 line:-1 position:50%
for any device states


206
00:09:10.083 --> 00:09:13.520 line:-1 position:50%
and lets the device itself
determine which ones to apply,


207
00:09:13,520 --> 00:09:16,890 line:-1
making the device
even more autonomous.


208
00:09:16.890 --> 00:09:19.559 line:-1 position:50%
As the device state changes,
the activation predicates


209
00:09:19.559 --> 00:09:23.163 line:-1 position:50%
are reevaluated without
intervention from the server.


210
00:09:23,163 --> 00:09:27,100 line:-1
Policy associated with the new
device state will be applied


211
00:09:27,100 --> 00:09:29,636 line:-1
and any outdated policy removed.


212
00:09:29,636 --> 00:09:33,940 line:-1
The device here becomes
increasingly proactive.


213
00:09:33,940 --> 00:09:36,976 position:50%
In the absence of a predicate,
the device will always process


214
00:09:36,976 --> 00:09:41,314 line:0
the configurations referenced
by the activation.


215
00:09:41,314 --> 00:09:44,017 line:-1
Here we have the activation
example from before,


216
00:09:44,017 --> 00:09:46,052 line:-1
but now there's a predicate
present,


217
00:09:46,052 --> 00:09:47,687 line:-1
indicating that this activation


218
00:09:47.687 --> 00:09:49.656 line:-1 position:50%
should only have
its policy applied


219
00:09:49.656 --> 00:09:53.159 line:-1 position:50%
when the device
is an iPad.


220
00:09:53.159 --> 00:09:57.464 line:-1 position:50%
The last type of declaration
is a management declaration.


221
00:09:57,464 --> 00:09:59,032 line:-1
Management declarations are used


222
00:09:59,032 --> 00:10:03,203 line:-1
to convey overall management
state to the device.


223
00:10:03.203 --> 00:10:05.405 line:-1 position:50%
This includes a declaration
describing details


224
00:10:05,405 --> 00:10:07,941 line:-1
about the organization
as well as a declaration


225
00:10:07,941 --> 00:10:10,977 line:-1
that describes
the capabilities of the server.


226
00:10:10,977 --> 00:10:12,412 line:-1
These declarations are helpful


227
00:10:12.412 --> 00:10:16.716 line:-1 position:50%
for conveying static information
to the device.


228
00:10:16,716 --> 00:10:18,852 line:-1
And those are the four types
of declarations


229
00:10:18,852 --> 00:10:23,556 line:-1
for applying organization policy
to your devices.


230
00:10:23.556 --> 00:10:24.491 line:-1 position:50%
The second pillar


231
00:10:24,491 --> 00:10:26,426 line:-1
of the new declarative
management data model


232
00:10:26,426 --> 00:10:29,295 line:-1
is the status channel.


233
00:10:29.295 --> 00:10:31.264 line:-1 position:50%
Given the way
that declarations work,


234
00:10:31,264 --> 00:10:33,533 line:-1
the declared state of the device
may not match


235
00:10:33.533 --> 00:10:36.803 line:-1 position:50%
the actual state of the device
at any point in time.


236
00:10:36,803 --> 00:10:40,607 line:-1
For instance, any declaration
that requires user interaction


237
00:10:40,607 --> 00:10:44,010 line:-1
will not apply
until that action is taken.


238
00:10:44.010 --> 00:10:46.779 line:-1 position:50%
A good example of this
is a passcode policy,


239
00:10:46.779 --> 00:10:48.348 line:-1 position:50%
where the user
has to take action


240
00:10:48,348 --> 00:10:53,152 line:-1
to create a new policy-compliant
passcode for the device.


241
00:10:53,152 --> 00:10:56,155 line:-1
To add visibility into
this device state transition,


242
00:10:56,155 --> 00:10:59,392 line:-1
we've created
the status channel.


243
00:10:59.392 --> 00:11:02.061 line:-1 position:50%
Updates of the device state
are sent in a status report


244
00:11:02,061 --> 00:11:04,397 line:-1
to the server.


245
00:11:04,397 --> 00:11:07,433 line:-1
The server can subscribe
to specific status items,


246
00:11:07,433 --> 00:11:12,105 line:-1
so it only receives updates
for the changes it cares about.


247
00:11:12,105 --> 00:11:14,541 line:-1
Status items are identified
by key-paths,


248
00:11:14,541 --> 00:11:17,877 line:-1
which consist of
period-separated string tokens.


249
00:11:17,877 --> 00:11:20,046 position:50%
Status items can be used
as expressions


250
00:11:20,046 --> 00:11:21,614 position:50%
in activation predicates,


251
00:11:21,614 --> 00:11:26,886 line:0
as shown in the earlier
activation predicate example.


252
00:11:26,886 --> 00:11:29,222 line:-1
The server subscribes
to specific status items


253
00:11:29,222 --> 00:11:33,359 line:-1
using status subscription
configurations.


254
00:11:33.359 --> 00:11:35.161 line:-1 position:50%
Upon receiving
this configuration,


255
00:11:35,161 --> 00:11:37,330 line:-1
the device will send
an initial status report


256
00:11:37.330 --> 00:11:39.432 line:-1 position:50%
for the subscribed status items,


257
00:11:39,432 --> 00:11:44,270 line:-1
and then send a report
if a subscribed item changes.


258
00:11:44.270 --> 00:11:46.039 line:-1 position:50%
The status reports
are incremental,


259
00:11:46.039 --> 00:11:49.375 line:-1 position:50%
so only the changed items
are reported.


260
00:11:49,375 --> 00:11:50,977 line:-1
The status of declarations --


261
00:11:50.977 --> 00:11:52.712 line:-1 position:50%
whether they are applied
or not --


262
00:11:52,712 --> 00:11:55,448 line:-1
is always reported
to the server when changed,


263
00:11:55,448 --> 00:11:58,384 line:-1
without the need
for the server to subscribe.


264
00:11:58,384 --> 00:11:59,986 line:-1
Let's inspect a configuration


265
00:11:59,986 --> 00:12:04,657 line:-1
that subscribes to specific
status item updates.


266
00:12:04.657 --> 00:12:07.660 line:-1 position:50%
This configuration subscribes
to three status items


267
00:12:07.660 --> 00:12:10.797 line:-1 position:50%
representing the device's
operating system version,


268
00:12:10,797 --> 00:12:12,732 line:-1
type, and model.


269
00:12:12,732 --> 00:12:15,535 line:-1
When this configuration
is activated on the device,


270
00:12:15,535 --> 00:12:17,270 line:-1
it will send
the initial status report


271
00:12:17.270 --> 00:12:20.773 line:-1 position:50%
for each of the newly
subscribed status items.


272
00:12:20,773 --> 00:12:23,509 line:-1
Status items are represented
as a JSON object,


273
00:12:23.509 --> 00:12:25.845 line:-1 position:50%
nested by the hierarchical
components


274
00:12:25,845 --> 00:12:29,182 line:-1
of that corresponding key-path.


275
00:12:29.182 --> 00:12:33.753 line:-1 position:50%
In this case, the device
reports it is on iOS 14.5.


276
00:12:33.753 --> 00:12:35.288 line:-1 position:50%
When the user updates
the software


277
00:12:35,288 --> 00:12:38,124 line:-1
to the latest iOS version,
the device will report


278
00:12:38,124 --> 00:12:41,694 line:-1
the status change for the
operating-system version item.


279
00:12:41.694 --> 00:12:43.062 line:-1 position:50%
The server now detects


280
00:12:43,062 --> 00:12:48,101 line:-1
that the device has been
upgraded to iOS 15.


281
00:12:48.101 --> 00:12:50.303 line:-1 position:50%
The third pillar
of the declarative data model


282
00:12:50,303 --> 00:12:53,239 line:-1
is extensibility.


283
00:12:53.239 --> 00:12:56.242 line:-1 position:50%
Given the long life cycle of
Apple products, it is essential


284
00:12:56.242 --> 00:12:58.911 line:-1 position:50%
to maintain compatibility
between different versions


285
00:12:58,911 --> 00:13:01,848 line:-1
of your MDM solution
with Apple devices,


286
00:13:01,848 --> 00:13:04,317 line:-1
especially as software updates
and new hardware models


287
00:13:04,317 --> 00:13:06,986 line:-1
are released.


288
00:13:06,986 --> 00:13:09,989 line:-1
With declarative management,
both the device and server


289
00:13:09,989 --> 00:13:13,393 line:-1
now advertise supported
capabilities to each other.


290
00:13:13.393 --> 00:13:16.195 line:-1 position:50%
Each knows when it can start
taking advantage of new features


291
00:13:16.195 --> 00:13:18.698 line:-1 position:50%
without having
to hardcode software version


292
00:13:18.698 --> 00:13:21.968 line:-1 position:50%
or hardware dependencies.


293
00:13:21.968 --> 00:13:25.038 line:-1 position:50%
The capabilities that the server
and client both advertise


294
00:13:25,038 --> 00:13:26,639 line:-1
includes a list
of supported features


295
00:13:26,639 --> 00:13:31,644 line:-1
representing both minor
and major protocol updates.


296
00:13:31,644 --> 00:13:34,347 line:-1
The client also advertises
supported payloads,


297
00:13:34,347 --> 00:13:37,617 line:-1
which lists the full set of
declarations and status items


298
00:13:37.617 --> 00:13:40.553 line:-1 position:50%
supported by the client.


299
00:13:40.553 --> 00:13:42.789 line:-1 position:50%
The server's capabilities
are sent to the device


300
00:13:42,789 --> 00:13:45,091 line:-1
via a management declaration.


301
00:13:45.091 --> 00:13:46.492 line:-1 position:50%
When the server is upgraded,


302
00:13:46,492 --> 00:13:49,529 line:-1
it synchronizes all new
capabilities to the device


303
00:13:49,529 --> 00:13:52,799 line:-1
just as it would
any other type of declaration.


304
00:13:52,799 --> 00:13:54,634 line:-1
The device is immediately
able to take advantage


305
00:13:54.634 --> 00:13:57.036 line:-1 position:50%
of the server's new features.


306
00:13:57,036 --> 00:13:59,272 position:50%
The client's capabilities
are sent to the server


307
00:13:59,272 --> 00:14:03,109 line:0
as a specific status item
any time capabilities change.


308
00:14:03,109 --> 00:14:04,010 position:50%
This way,


309
00:14:04,010 --> 00:14:06,412 position:50%
the server can immediately
start taking advantage


310
00:14:06,412 --> 00:14:10,049 position:50%
of the device's new features
and payloads.


311
00:14:10,049 --> 00:14:12,885 line:-1
Building extensibility
into the declarative data model


312
00:14:12.885 --> 00:14:14.620 line:-1 position:50%
ensures that
declarative management


313
00:14:14,620 --> 00:14:17,290 line:-1
is built for the present
and the future.


314
00:14:17,290 --> 00:14:19,292 line:-1
Now that you understand
the data model,


315
00:14:19.292 --> 00:14:21.461 line:-1 position:50%
let's dig into how
declarative management


316
00:14:21.461 --> 00:14:24.831 line:-1 position:50%
is seamlessly integrated
within the MDM protocol.


317
00:14:24,831 --> 00:14:28,101 line:-1
Existing MDM vendors can use
declarative management features


318
00:14:28,101 --> 00:14:29,802 line:-1
starting today.


319
00:14:29.802 --> 00:14:33.306 line:-1 position:50%
Declarative management is
integrated into the MDM protocol


320
00:14:33,306 --> 00:14:35,641 line:-1
and utilizes it
for managing the enrollment


321
00:14:35.641 --> 00:14:40.046 line:-1 position:50%
and unenrollment process and
for handling the HTTP transport


322
00:14:40.046 --> 00:14:42.749 line:-1 position:50%
and device and user
authentication.


323
00:14:42,749 --> 00:14:44,650 line:-1
Existing and mature MDM products


324
00:14:44.650 --> 00:14:47.320 line:-1 position:50%
can smoothly transition
to declarative management


325
00:14:47,320 --> 00:14:50,156 line:-1
without a disruptive change
to adopt a new protocol


326
00:14:50,156 --> 00:14:52,425 line:-1
or server infrastructure.


327
00:14:52,425 --> 00:14:54,894 line:-1
Declarations
and the status channel coexist


328
00:14:54,894 --> 00:14:58,097 line:-1
with your already in-use
MDM commands and profiles


329
00:14:58.097 --> 00:15:01.000 line:-1 position:50%
in an extensible way.


330
00:15:01,000 --> 00:15:03,603 line:-1
This allows you to gradually
adopt the different features


331
00:15:03,603 --> 00:15:05,204 line:-1
of declarative management


332
00:15:05,204 --> 00:15:08,708 line:-1
without having to update all of
your MDM workflows at once.


333
00:15:08.708 --> 00:15:10.610 line:-1 position:50%
For example,
a server could choose


334
00:15:10.610 --> 00:15:12.578 line:-1 position:50%
to only implement
status subscriptions,


335
00:15:12,578 --> 00:15:16,315 line:-1
effectively adding a status
channel to the MDM protocol


336
00:15:16,315 --> 00:15:20,887 line:-1
without having to adopt
all of declarative management.


337
00:15:20,887 --> 00:15:23,022 line:-1
When the device
is unenrolled from MDM,


338
00:15:23.022 --> 00:15:24.690 line:-1 position:50%
all declarations are removed,


339
00:15:24,690 --> 00:15:27,627 line:-1
and the device state
is adjusted accordingly.


340
00:15:27,627 --> 00:15:29,362 position:50%
Importantly,
declarative management


341
00:15:29,362 --> 00:15:32,899 line:0
does not impact existing
MDM behavior at all.


342
00:15:32,899 --> 00:15:34,467 position:50%
Actually, declarative management


343
00:15:34,467 --> 00:15:38,304 line:0
leverages existing MDM behaviors
using an MDM command


344
00:15:38,304 --> 00:15:41,073 position:50%
for activation
and an MDM CheckIn request


345
00:15:41,073 --> 00:15:44,076 line:0
for synchronization
and status reports.


346
00:15:44,076 --> 00:15:47,713 line:0
Let's zoom in
on each of these next.


347
00:15:47.713 --> 00:15:51.017 line:-1 position:50%
A DeclarativeManagement
command has been added to MDM.


348
00:15:51,017 --> 00:15:54,086 line:-1
This command serves
two purposes.


349
00:15:54,086 --> 00:15:56,722 line:-1
First, it activates the
declarative management features


350
00:15:56,722 --> 00:15:58,191 line:-1
on the device.


351
00:15:58.191 --> 00:15:59.659 line:-1 position:50%
Please note, once turned on,


352
00:15:59,659 --> 00:16:02,395 line:-1
declarative management
cannot be turned off.


353
00:16:02,395 --> 00:16:05,264 line:-1
However, the server
can remove all declarations


354
00:16:05,264 --> 00:16:08,201 line:-1
to effectively disable
declarative management.


355
00:16:08.201 --> 00:16:10.136 line:-1 position:50%
Second, the command
can include a payload


356
00:16:10,136 --> 00:16:12,171 line:-1
containing
synchronization tokens


357
00:16:12.171 --> 00:16:16.709 line:-1 position:50%
that will initiate a
synchronization flow if needed.


358
00:16:16.709 --> 00:16:19.979 line:-1 position:50%
There is also a new DeclarativeManagement
CheckIn request type


359
00:16:19,979 --> 00:16:22,548 line:-1
used by the device
when synchronizing declarations


360
00:16:22.548 --> 00:16:26.886 line:-1 position:50%
and to send status reports
to the server.


361
00:16:26,886 --> 00:16:30,857 line:-1
Here is an example
of the new CheckIn request type.


362
00:16:30.857 --> 00:16:32.258 line:-1 position:50%
The MessageType key is set


363
00:16:32,258 --> 00:16:34,927 line:-1
to the new
DeclarativeManagement value.


364
00:16:34,927 --> 00:16:36,729 line:-1
The endpoint key
is set to a value


365
00:16:36,729 --> 00:16:38,931 line:-1
indicating that the client
is making a request


366
00:16:38.931 --> 00:16:43.936 line:-1 position:50%
to retrieve the declaration
manifest data from the server.


367
00:16:43,936 --> 00:16:46,405 line:-1
Some requests --
such as this status report --


368
00:16:46,405 --> 00:16:51,177 line:-1
can also include
Base64-encoded data.


369
00:16:51,177 --> 00:16:54,547 line:-1
When using the CheckIn request
to synchronize declarations,


370
00:16:54,547 --> 00:16:57,316 line:-1
there will be a response
from the server.


371
00:16:57.316 --> 00:17:00.319 line:-1 position:50%
There are two types
of responses: a manifest,


372
00:17:00.319 --> 00:17:02.889 line:-1 position:50%
which lists the identifier
and server token properties


373
00:17:02,889 --> 00:17:06,425 line:-1
of all declarations
that the server defines;


374
00:17:06,425 --> 00:17:10,630 line:-1
and single declarations
for the device to apply.


375
00:17:10,630 --> 00:17:13,332 line:-1
Now that you've learned how to
activate declarative management


376
00:17:13.332 --> 00:17:16.202 line:-1 position:50%
and synchronize declarations
with a CheckIn request,


377
00:17:16,202 --> 00:17:19,038 line:-1
let's talk about how you can
migrate your policies gradually


378
00:17:19,038 --> 00:17:22,041 line:-1
from profiles to declarations.


379
00:17:22.041 --> 00:17:24.477 line:-1 position:50%
There's a declaration type
specifically for sending


380
00:17:24,477 --> 00:17:28,948 line:-1
and installing profiles
as configurations.


381
00:17:28,948 --> 00:17:32,518 line:-1
This enables you to utilize
the full suite of MDM profiles


382
00:17:32.518 --> 00:17:35.554 line:-1 position:50%
to immediately take advantage
of declarative management


383
00:17:35,554 --> 00:17:40,493 line:-1
by shifting profile-based
policy logic to the device.


384
00:17:40.493 --> 00:17:43.763 line:-1 position:50%
Here is an example
of a profile configuration.


385
00:17:43,763 --> 00:17:46,699 line:-1
The profile is referenced
via URL.


386
00:17:46.699 --> 00:17:48.601 line:-1 position:50%
When this configuration
is activated,


387
00:17:48,601 --> 00:17:53,839 line:-1
the profile is fetched from the
URL and installed on the device.


388
00:17:53,839 --> 00:17:56,142 line:-1
We've taken these steps to make
declarative management


389
00:17:56,142 --> 00:18:00,813 line:-1
easy to adopt today
with the iOS 15 beta.


390
00:18:00,813 --> 00:18:02,615 line:-1
Now let's go through an example


391
00:18:02,615 --> 00:18:05,952 line:-1
of how declarative management
interacts with the server.


392
00:18:05.952 --> 00:18:09.055 line:-1 position:50%
First, we activate
declarative management.


393
00:18:09.055 --> 00:18:13.192 line:-1 position:50%
This starts with the device
already enrolled in MDM.


394
00:18:13,192 --> 00:18:16,562 line:-1
The server sends a push
notification to the device.


395
00:18:16,562 --> 00:18:19,198 line:-1
The device responds
to the push in the usual way,


396
00:18:19,198 --> 00:18:21,500 line:-1
by sending a ServerURL
endpoint request


397
00:18:21.500 --> 00:18:23.602 line:-1 position:50%
with its status set to Idle.


398
00:18:23,602 --> 00:18:24,770 line:-1
The server then responds


399
00:18:24,770 --> 00:18:27,807 line:-1
with the DeclarativeManagement
command.


400
00:18:27,807 --> 00:18:28,908 line:-1
Upon receipt,


401
00:18:28.908 --> 00:18:32.645 line:-1 position:50%
the device activates
declarative management.


402
00:18:32,645 --> 00:18:35,314 line:-1
After processing the
DeclarativeManagement command,


403
00:18:35.314 --> 00:18:39.518 line:-1 position:50%
the device sends an Acknowledged
status back to the server.


404
00:18:39,518 --> 00:18:41,721 line:0
Then if the server
has no more commands,


405
00:18:41,721 --> 00:18:44,957 position:50%
it will return
an empty response.


406
00:18:44,957 --> 00:18:46,125 position:50%
The device then starts


407
00:18:46,125 --> 00:18:48,861 position:50%
its declarative management
synchronization process;


408
00:18:48,861 --> 00:18:51,364 line:0
let's go through that next.


409
00:18:51,364 --> 00:18:53,466 line:-1
The device first sends
a CheckIn request


410
00:18:53,466 --> 00:18:57,670 line:-1
with the endpoint key
set to declaration-items.


411
00:18:57.670 --> 00:18:59.538 line:-1 position:50%
The server responds
with a manifest


412
00:18:59,538 --> 00:19:03,109 line:-1
containing declaration metadata.


413
00:19:03.109 --> 00:19:05.578 line:-1 position:50%
The device then compares
the items in the manifest


414
00:19:05,578 --> 00:19:07,780 line:-1
to the set of declarations
it previously received


415
00:19:07.780 --> 00:19:10.216 line:-1 position:50%
from the server.


416
00:19:10.216 --> 00:19:12.218 line:-1 position:50%
Through this comparison,
the device can tell


417
00:19:12.218 --> 00:19:14.987 line:-1 position:50%
which declarations are new,
which have changed,


418
00:19:14,987 --> 00:19:18,024 line:-1
and which have
been removed.


419
00:19:18.024 --> 00:19:20.259 line:-1 position:50%
For each new
or changed declaration,


420
00:19:20,259 --> 00:19:22,361 line:-1
the device sends
a CheckIn request.


421
00:19:22.361 --> 00:19:24.764 line:-1 position:50%
This request's EndPoint key
is set to a path


422
00:19:24.764 --> 00:19:28.734 line:-1 position:50%
uniquely identifying
the declaration resource.


423
00:19:28,734 --> 00:19:31,203 line:-1
The server then responds
with the JSON object


424
00:19:31.203 --> 00:19:34.740 line:-1 position:50%
representing that declaration.


425
00:19:34,740 --> 00:19:37,209 position:50%
Once all declarations have been
fetched from the server,


426
00:19:37,209 --> 00:19:39,578 line:0
the device starts applying
the policy changes


427
00:19:39,578 --> 00:19:44,717 position:50%
represented by this updated
state of declarations.


428
00:19:44,717 --> 00:19:46,986 line:0
Once the policy changes
have been applied,


429
00:19:46,986 --> 00:19:49,488 position:50%
the device will send
a status report to the server,


430
00:19:49,488 --> 00:19:52,825 position:50%
with the corresponding
updated status items.


431
00:19:52,825 --> 00:19:54,026 line:-1
To help get you started,


432
00:19:54,026 --> 00:19:58,064 line:-1
let's go through
what we are shipping in iOS 15.


433
00:19:58,064 --> 00:20:00,833 line:-1
The declarative management
feature is supported on devices


434
00:20:00.833 --> 00:20:04.070 line:-1 position:50%
with iOS 15 and iPadOS 15.


435
00:20:04,070 --> 00:20:06,772 line:-1
It's also only available
when the MDM enrollment type


436
00:20:06,772 --> 00:20:09,675 line:-1
is a user enrollment --
either the new onboarding flow


437
00:20:09,675 --> 00:20:14,413 line:-1
introduced with iOS 15,
or the flow from iOS 13.


438
00:20:14.413 --> 00:20:16.182 line:-1 position:50%
For configurations,
we have account


439
00:20:16.182 --> 00:20:18.984 line:-1 position:50%
and passcode configurations
that cover the equivalent set


440
00:20:18,984 --> 00:20:22,121 line:-1
of MDM account
and passcode profile payloads.


441
00:20:22.121 --> 00:20:24.356 line:-1 position:50%
We also support profile
configurations


442
00:20:24,356 --> 00:20:26,892 line:-1
enabling you to start installing
the full suite


443
00:20:26.892 --> 00:20:30.763 line:-1 position:50%
of MDM-supported profiles
to your devices declaratively.


444
00:20:30,763 --> 00:20:32,398 line:-1
Status subscription
configurations


445
00:20:32,398 --> 00:20:35,734 line:-1
are also available today
and are used for the server


446
00:20:35.734 --> 00:20:37.870 line:-1 position:50%
to declare the specific status
item updates


447
00:20:37,870 --> 00:20:40,806 line:-1
it wants to receive.


448
00:20:40,806 --> 00:20:43,609 line:-1
There is one type
of activation available today.


449
00:20:43.609 --> 00:20:46.579 line:-1 position:50%
This simple activation
defines a list of configurations


450
00:20:46.579 --> 00:20:48.414 line:-1 position:50%
that must be applied atomically


451
00:20:48.414 --> 00:20:52.017 line:-1 position:50%
and may include
an optional predicate.


452
00:20:52.017 --> 00:20:54.954 line:-1 position:50%
For asset declarations,
there are two types available:


453
00:20:54,954 --> 00:20:56,422 line:-1
user identity assets,


454
00:20:56.422 --> 00:20:59.258 line:-1 position:50%
which represent a user's
contact information;


455
00:20:59,258 --> 00:21:01,093 line:-1
and user credential assets,


456
00:21:01,093 --> 00:21:05,898 line:-1
which contain user IDs and
passwords for user accounts.


457
00:21:05.898 --> 00:21:08.767 line:-1 position:50%
For management declarations,
we are supporting two types:


458
00:21:08.767 --> 00:21:13.305 line:-1 position:50%
organization details
and server capabilities.


459
00:21:13,305 --> 00:21:16,675 line:-1
Next, here are the status items
available today.


460
00:21:16.675 --> 00:21:18.878 line:-1 position:50%
Each declaration
has its own status item


461
00:21:18,878 --> 00:21:22,081 line:-1
that is automatically sent
to the server from the device.


462
00:21:22.081 --> 00:21:24.416 line:-1 position:50%
Also available
are a set of status items


463
00:21:24.416 --> 00:21:26.752 line:-1 position:50%
that cover basic properties
of the device,


464
00:21:26.752 --> 00:21:29.188 line:-1 position:50%
like details about a device's
hardware model


465
00:21:29,188 --> 00:21:31,423 line:-1
and its operating system.


466
00:21:31.423 --> 00:21:34.093 line:-1 position:50%
For more detail on these
declarations and status items,


467
00:21:34.093 --> 00:21:35.694 line:-1 position:50%
check out Apple's
Device Management


468
00:21:35.694 --> 00:21:38.063 line:-1 position:50%
developer documentation.


469
00:21:38,063 --> 00:21:40,099 line:-1
Today we covered
the new paradigm


470
00:21:40.099 --> 00:21:42.968 line:-1 position:50%
of declarative management
and its functionality,


471
00:21:42.968 --> 00:21:45.638 line:-1 position:50%
discovering how declarative
management empowers you


472
00:21:45.638 --> 00:21:49.308 line:-1 position:50%
to make devices more autonomous
and proactive.


473
00:21:49.308 --> 00:21:51.277 line:-1 position:50%
We learned how to integrate
declarative management


474
00:21:51.277 --> 00:21:53.646 line:-1 position:50%
into your MDM solution.


475
00:21:53.646 --> 00:21:55.014 line:-1 position:50%
We went through an example


476
00:21:55,014 --> 00:21:57,683 line:-1
showing how declarative
management works


477
00:21:57,683 --> 00:22:00,219 line:-1
and reviewed how declarative
management is ready for you


478
00:22:00.219 --> 00:22:02.388 line:-1 position:50%
to start using today.


479
00:22:02.388 --> 00:22:05.824 line:-1 position:50%
We can't wait to find out how
you'll reinvent MDM solutions


480
00:22:05,824 --> 00:22:08,060 line:-1
with declarative management.


481
00:22:08,060 --> 00:22:11,830 line:-1
Thanks for joining me
and have a great WWDC.


482
00:22:11,830 --> 00:22:14,333 line:0 position:89% size:2%
♪

