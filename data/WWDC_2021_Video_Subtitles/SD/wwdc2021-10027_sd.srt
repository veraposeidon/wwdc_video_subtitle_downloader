2
00:00:00.100 --> 00:00:03.670 line:-1
[ethereal percussion music]


3
00:00:03.670 --> 00:00:09.042 line:-1
♪ ♪


4
00:00:09.042 --> 00:00:11.345 line:-2
[Ellie] Hi.
My name is Ellie Epskamp-Hunt.


5
00:00:11.345 --> 00:00:13.180 line:-1
I work as a Safari engineer.


6
00:00:13.180 --> 00:00:14.581 line:-1
Today, I'm giving an overview


7
00:00:14.581 --> 00:00:17.551 line:-2
of some new Web Extensions API
avilable in Safari.


8
00:00:18.919 --> 00:00:20.354 line:-1
Last year, Safari added support


9
00:00:20.354 --> 00:00:22.723 line:-2
for the Web Extensions API
on macOS.


10
00:00:22.723 --> 00:00:25.125 line:-2
It's been amazing to see all
of the new Safari extensions


11
00:00:25.125 --> 00:00:26.760 line:-2
that have shipped
over the past year


12
00:00:26.760 --> 00:00:29.530 line:-1
that use this new API support.


13
00:00:29.530 --> 00:00:31.298 line:-2
And with this release,
we're really excited


14
00:00:31.298 --> 00:00:34.034 line:-2
to bring web extensions
to iOS and iPadOS.


15
00:00:35.669 --> 00:00:37.070 line:-2
You can learn more
about extensions


16
00:00:37.070 --> 00:00:40.140 line:-2
on these new platforms
in its own dedicated session,


17
00:00:40.140 --> 00:00:42.643 line:-2
"Meet Safari Web Extensions
on iOS."


18
00:00:42.643 --> 00:00:43.844 line:-1
And if you wanna learn more


19
00:00:43.844 --> 00:00:45.512 line:-2
about Safari Web Extensions
in general,


20
00:00:45.512 --> 00:00:47.247 line:-2
you can check out
last year's session.


21
00:00:47.247 --> 00:00:49.950 line:-2
Today, we're covering
three new extension APIs.


22
00:00:49.950 --> 00:00:52.619 line:-2
First, we'll talk about
non-persistent background pages,


23
00:00:52.619 --> 00:00:53.987 line:-2
which are a way
to structure your extension


24
00:00:53.987 --> 00:00:56.123 line:-1
for better performance.


25
00:00:56.123 --> 00:00:58.225 line:-2
Then, I'll introduce
a content-blocking API


26
00:00:58.225 --> 00:01:00.861 line:-2
for web extensions called
declarative net request.


27
00:01:00.861 --> 00:01:02.529 line:-2
And at the end,
we'll look at how extensions


28
00:01:02.529 --> 00:01:04.831 line:-2
can customize new tabs
in Safari.


29
00:01:04.831 --> 00:01:07.034 line:-2
Before we learn more
about this new API,


30
00:01:07.034 --> 00:01:09.336 line:-2
let's talk about persistent
background pages.


31
00:01:09.336 --> 00:01:10.704 line:-1
Web extensions are made


32
00:01:10.704 --> 00:01:13.674 line:-1
using JavaScript, HTML, and CSS.


33
00:01:13.674 --> 00:01:15.876 line:-2
Some extensions have a script
that run in the background


34
00:01:15.876 --> 00:01:18.111 line:-2
of the browser
called a background page.


35
00:01:18.111 --> 00:01:20.948 line:-2
It doesn't have any visible UI,
but it can react to events


36
00:01:20.948 --> 00:01:22.482 line:-1
like a tab opening or a message


37
00:01:22.482 --> 00:01:23.951 line:-2
from another part
of the extension.


38
00:01:24.451 --> 00:01:27.788 line:-2
A persistent background
page never closes.


39
00:01:27.788 --> 00:01:30.624 line:-2
So, if I have two extensions
turned on in my browser,


40
00:01:30.624 --> 00:01:33.927 line:-2
there'll be two background
pages constantly running.


41
00:01:33.927 --> 00:01:35.495 line:-1
And if I use eight extensions,


42
00:01:35.495 --> 00:01:37.231 line:-1
that's eight extension processes


43
00:01:37.231 --> 00:01:39.333 line:-2
running in the background
at all times.


44
00:01:39.333 --> 00:01:41.168 line:-2
We can see there's
a problem here.


45
00:01:41.168 --> 00:01:43.637 line:-2
Persistent background pages
are like these invisible tabs


46
00:01:43.637 --> 00:01:45.272 line:-1
that a user can never close,


47
00:01:45.272 --> 00:01:48.308 line:-2
and they eat up memory
and increase CPU usage.


48
00:01:48.308 --> 00:01:50.043 line:-2
Users shouldn't have
to make a compromise


49
00:01:50.043 --> 00:01:51.445 line:-1
between using their extensions


50
00:01:51.445 --> 00:01:53.647 line:-2
and getting great performance
out of their browser.


51
00:01:53.647 --> 00:01:55.349 line:-2
So instead,
extensions can adopt


52
00:01:55.349 --> 00:01:57.551 line:-2
a non-persistent
background page.


53
00:01:57.551 --> 00:01:59.887 line:-2
These types of pages
can come and go as needed,


54
00:01:59.887 --> 00:02:01.555 line:-2
making your extension
more performant


55
00:02:01.555 --> 00:02:04.424 line:-2
and giving your users a better
browsing experience overall.


56
00:02:05.993 --> 00:02:07.528 line:-1
If you're developing for iOS,


57
00:02:07.528 --> 00:02:10.030 line:-2
your extension must have
a non-persistent background page


58
00:02:10.030 --> 00:02:13.267 line:-2
because of the resource
constraints on iOS devices.


59
00:02:13.267 --> 00:02:15.068 line:-2
So now that we have
an understanding of the reasons


60
00:02:15.068 --> 00:02:17.037 line:-2
to use a non-persistent
background page,


61
00:02:17.037 --> 00:02:19.039 line:-2
let's take a look
at how they work.


62
00:02:19.039 --> 00:02:21.074 line:-2
The lifetime of a non-persistent
background page


63
00:02:21.074 --> 00:02:22.976 line:-1
is structured around events.


64
00:02:22.976 --> 00:02:25.345 line:-2
A background page
registers event listeners


65
00:02:25.345 --> 00:02:27.514 line:-2
in order to react to things
that happen in the browser


66
00:02:27.514 --> 00:02:28.849 line:-1
like a tab closing


67
00:02:28.849 --> 00:02:30.751 line:-2
or a message from another part
of the extension.


68
00:02:30.751 --> 00:02:33.020 line:-2
And those events help
the browser to determine


69
00:02:33.020 --> 00:02:35.556 line:-2
if your background page
should be loaded or unloaded.


70
00:02:35.556 --> 00:02:37.524 line:-1
Let's take a look at an example.


71
00:02:37.524 --> 00:02:39.560 line:-2
When your extension
is turned on or updated,


72
00:02:39.560 --> 00:02:41.094 line:-2
your background page
will be loaded,


73
00:02:41.094 --> 00:02:43.330 line:-2
and it will register
event listeners.


74
00:02:43.330 --> 00:02:44.698 line:-1
For the sake of this example,


75
00:02:44.698 --> 00:02:45.999 line:-2
let's say that
this background page


76
00:02:45.999 --> 00:02:47.401 line:-1
has exactly one listener


77
00:02:47.401 --> 00:02:49.069 line:-2
for a message
from a content script.


78
00:02:49.069 --> 00:02:51.004 line:-2
If time passes
and our content script


79
00:02:51.004 --> 00:02:52.673 line:-1
doesn't send any messages,


80
00:02:52.673 --> 00:02:54.842 line:-2
the background page
will be unloaded by the browser


81
00:02:54.842 --> 00:02:56.376 line:-1
because of that inactivity.


82
00:02:57.878 --> 00:03:00.314 line:-2
But if our content script
sends a message,


83
00:03:01.448 --> 00:03:02.916 line:-2
the background page
will be woken up


84
00:03:02.916 --> 00:03:05.552 line:-2
so it can receive
and react to that message.


85
00:03:06.854 --> 00:03:08.422 line:-1
And after the event happens,


86
00:03:08.422 --> 00:03:10.490 line:-2
the background page
will stay loaded.


87
00:03:11.892 --> 00:03:14.595 line:-2
But if time passes again
and no more events fire,


88
00:03:14.595 --> 00:03:16.463 line:-1
the background page will unload.


89
00:03:16.463 --> 00:03:18.165 line:-2
So with that mental model
in mind,


90
00:03:18.165 --> 00:03:19.900 line:-2
we can talk about how
to actually implement


91
00:03:19.900 --> 00:03:22.836 line:-2
a non-persistent
background page.


92
00:03:22.836 --> 00:03:24.605 line:-2
First, you'll add
the "persistent" key


93
00:03:24.605 --> 00:03:27.674 line:-2
to the background section
of your manifest.


94
00:03:27.674 --> 00:03:29.977 line:-2
And then you might have to make
a couple more changes


95
00:03:29.977 --> 00:03:31.311 line:-1
to your background script.


96
00:03:31.311 --> 00:03:33.580 line:-2
Because your background page
can be unloaded,


97
00:03:33.580 --> 00:03:35.148 line:-2
you'll need to use
the storage API


98
00:03:35.148 --> 00:03:37.251 line:-2
to write information
to disk as needed.


99
00:03:37.251 --> 00:03:39.553 line:-2
Use browser.storage
to maintain information


100
00:03:39.553 --> 00:03:41.755 line:-2
across the lifetime
of your background page.


101
00:03:41.755 --> 00:03:43.991 line:-2
Next, you'll need to register
your event listeners


102
00:03:43.991 --> 00:03:45.893 line:-2
at the top level
of your script.


103
00:03:45.893 --> 00:03:48.195 line:-2
Do not register listeners
in the completion handler


104
00:03:48.195 --> 00:03:50.097 line:-1
of another event listener.


105
00:03:50.097 --> 00:03:52.799 line:-2
And you'll want to use
the browser.alarms API


106
00:03:52.799 --> 00:03:53.967 line:-1
instead of timers.


107
00:03:53.967 --> 00:03:55.202 line:-1
A timer won't be invoked


108
00:03:55.202 --> 00:03:57.304 line:-2
if the background page
has unloaded.


109
00:03:57.304 --> 00:04:00.040 line:-2
Now let's talk about
some code you want to avoid.


110
00:04:00.040 --> 00:04:01.175 line:-1
Remove calls to


111
00:04:01.175 --> 00:04:03.710 line:-2
browser.extension.
getBackgroundPage.


112
00:04:03.710 --> 00:04:05.112 line:-2
It won't wake up
the background page


113
00:04:05.112 --> 00:04:07.247 line:-1
if it's already been unloaded.


114
00:04:07.247 --> 00:04:08.715 line:-2
And finally,
you'll need to remove


115
00:04:08.715 --> 00:04:10.317 line:-1
any webRequest listeners.


116
00:04:10.317 --> 00:04:13.554 line:-2
webRequest is an API that
lets you analyze web traffic,


117
00:04:13.554 --> 00:04:15.989 line:-2
and the frequency
at which webRequest events fire


118
00:04:15.989 --> 00:04:17.391 line:-1
make this API incompatible


119
00:04:17.391 --> 00:04:19.593 line:-2
with non-persistent
background pages.


120
00:04:19.593 --> 00:04:21.161 line:-2
So to see how this
all works together,


121
00:04:21.161 --> 00:04:22.729 line:-1
let's try it out in Safari.


122
00:04:22.729 --> 00:04:25.132 line:-2
I'm using a modified version
of the sample code


123
00:04:25.132 --> 00:04:27.701 line:-2
from last year's session
about Safari extensions.


124
00:04:27.701 --> 00:04:31.004 line:-2
This extension can replace words
in web pages with emoji


125
00:04:31.004 --> 00:04:34.208 line:-2
and reports how many total
replacements have happened.


126
00:04:34.208 --> 00:04:36.009 line:-2
First, let's see
what this extension does


127
00:04:36.009 --> 00:04:37.678 line:-1
without making any changes.


128
00:04:37.678 --> 00:04:39.680 line:-2
Because we have left out
the "persistent" key


129
00:04:39.680 --> 00:04:42.916 line:-2
in the manifest, the background
page is persistent by default.


130
00:04:42.916 --> 00:04:45.485 line:-2
I'll build and run the app
containing the extension.


131
00:04:45.485 --> 00:04:48.222 line:-2
And then I'll turn it on
in Safari's preferences.


132
00:04:48.222 --> 00:04:50.691 line:-2
Now I'll use the extension
on a web page.


133
00:04:50.691 --> 00:04:53.327 line:-2
Let's go to this Wikipedia
article about fish,


134
00:04:53.327 --> 00:04:56.129 line:-2
and I'll use the popover
to interact with the extension.


135
00:04:58.265 --> 00:05:00.067 line:-2
When I click
the "replace words" button,


136
00:05:00.067 --> 00:05:01.668 line:-2
every instance
of the word "fish"


137
00:05:01.668 --> 00:05:03.504 line:-1
was replaced with a fish emoji.


138
00:05:03.504 --> 00:05:05.372 line:-1
If I click the popover again,


139
00:05:05.372 --> 00:05:09.276 line:-2
I can see my total number
of words that've been replaced.


140
00:05:09.276 --> 00:05:11.712 line:-2
The background page
for this extension is in charge


141
00:05:11.712 --> 00:05:13.780 line:-2
of keeping track
of that replacement count.


142
00:05:13.780 --> 00:05:15.182 line:-1
Let's head to Activity Monitor


143
00:05:15.182 --> 00:05:17.584 line:-2
to take a look
at our extension process.


144
00:05:17.584 --> 00:05:19.152 line:-2
Here we can see
the web process


145
00:05:19.152 --> 00:05:21.088 line:-2
where all our extension code
is running.


146
00:05:21.088 --> 00:05:24.157 line:-2
Because our extension uses
a persistent background page,


147
00:05:24.157 --> 00:05:26.927 line:-2
this process will always be
running when Safari is running,


148
00:05:26.927 --> 00:05:30.197 line:-2
even when I stop using
this extension hours later.


149
00:05:30.197 --> 00:05:32.599 line:-2
So let's make this
extension a little better


150
00:05:32.599 --> 00:05:35.102 line:-2
and make its background
page non-persistent.


151
00:05:35.102 --> 00:05:37.571 line:-2
The first thing I'll do
is add the "persistent" key


152
00:05:37.571 --> 00:05:39.740 line:-2
to the background section
of my manifest.


153
00:05:39.740 --> 00:05:42.976 line:-2
And let's stop here and see
if our extension still works.


154
00:05:42.976 --> 00:05:45.846 line:-2
I'll build the app
containing my extension.


155
00:05:45.846 --> 00:05:48.448 line:-2
I'll come back to Safari
and reload the page.


156
00:05:48.448 --> 00:05:50.250 line:-1
Then I'll replace some words.


157
00:05:50.250 --> 00:05:51.885 line:-1
After that, I'll briefly wait,


158
00:05:51.885 --> 00:05:54.321 line:-2
giving the background page
some time to go idle.


159
00:05:54.321 --> 00:05:56.790 line:-2
For the purpose of this demo,
I've modified Safari


160
00:05:56.790 --> 00:05:59.793 line:-2
to unload background pages
much faster than normal.


161
00:05:59.793 --> 00:06:02.029 line:-2
We can verify that
the background page has,


162
00:06:02.029 --> 00:06:03.897 line:-2
in fact, unloaded
in the develop menu,


163
00:06:03.897 --> 00:06:06.266 line:-2
under Web Extension
Background Pages.


164
00:06:06.266 --> 00:06:09.136 line:-2
This is also where you can
inspect your background page.


165
00:06:09.136 --> 00:06:11.138 line:-2
Note that if you choose
to inspect the page


166
00:06:11.138 --> 00:06:13.407 line:-2
when it's unloaded,
it will immediately load.


167
00:06:13.407 --> 00:06:15.242 line:-2
Now that the background page
is unloaded,


168
00:06:15.242 --> 00:06:16.910 line:-1
let's open the popover again.


169
00:06:16.910 --> 00:06:19.680 line:-2
Instead of our expected count
of 564,


170
00:06:19.680 --> 00:06:21.515 line:-1
we see zero words replaced.


171
00:06:21.515 --> 00:06:23.483 line:-2
So we've got a bug
in our extension.


172
00:06:23.483 --> 00:06:25.419 line:-2
We need to go back
and make some more changes


173
00:06:25.419 --> 00:06:27.020 line:-2
so that our extension
works correctly


174
00:06:27.020 --> 00:06:29.122 line:-2
with a non-persistent
background page.


175
00:06:29.122 --> 00:06:30.357 line:-1
Here we are in the code


176
00:06:30.357 --> 00:06:32.492 line:-2
for the background page
of the extension.


177
00:06:32.492 --> 00:06:34.328 line:-2
This background page
does two things.


178
00:06:34.328 --> 00:06:36.496 line:-2
It either adds one
to the word replacement count,


179
00:06:36.496 --> 00:06:38.732 line:-1
or it reports the current count.


180
00:06:38.732 --> 00:06:41.335 line:-2
The global variable is
what's causing our bug.


181
00:06:41.335 --> 00:06:42.936 line:-2
When the background page
is reloaded,


182
00:06:42.936 --> 00:06:44.438 line:-1
the count is reset to 0.


183
00:06:44.438 --> 00:06:46.206 line:-2
So instead
of maintaining that state


184
00:06:46.206 --> 00:06:49.476 line:-2
that 564 words were replaced,
we lose it.


185
00:06:49.476 --> 00:06:52.579 line:-2
So to get around this, let's
use the browser.storage API


186
00:06:52.579 --> 00:06:55.182 line:-2
to save and load
our word count as needed.


187
00:06:55.182 --> 00:06:58.352 line:-2
First, we'll add some code
to load that count from storage.


188
00:07:00.988 --> 00:07:03.123 line:-2
I'll parse the result
from the storage API


189
00:07:03.123 --> 00:07:04.758 line:-1
to get the value that I want.


190
00:07:06.126 --> 00:07:08.495 line:-2
And I'll save that value
back to storage


191
00:07:08.495 --> 00:07:11.064 line:-1
whenever it's updated.


192
00:07:11.064 --> 00:07:13.367 line:-2
And then I'll bring
that onMessage listener


193
00:07:13.367 --> 00:07:15.869 line:-2
into the body
of the storage callback.


194
00:07:19.640 --> 00:07:22.242 line:-2
But wait.
We've got a problem.


195
00:07:22.242 --> 00:07:24.611 line:-2
We know that event listeners
must be registered


196
00:07:24.611 --> 00:07:26.246 line:-1
at the top level of our script,


197
00:07:26.246 --> 00:07:28.715 line:-1
so this isn't going to work.


198
00:07:28.715 --> 00:07:30.551 line:-1
So let's restructure things here


199
00:07:30.551 --> 00:07:34.021 line:-2
and bring the storage call
into the body of the listener.


200
00:07:37.057 --> 00:07:39.459 line:-2
And because we are using
the storage API,


201
00:07:39.459 --> 00:07:42.462 line:-2
we need to add the storage
permission to the manifest.


202
00:07:45.132 --> 00:07:48.435 line:-2
Now I'll rebuild the app
and test my extension again.


203
00:07:50.971 --> 00:07:53.640 line:-2
I'll do the exact
same thing as before.


204
00:07:53.640 --> 00:07:57.311 line:-2
I'll view that Wikipedia page
about fish and reload the page.


205
00:07:57.311 --> 00:07:59.780 line:-2
Then I'll replace some words
and wait for a moment,


206
00:07:59.780 --> 00:08:02.316 line:-2
giving our background
some time to unload.


207
00:08:05.853 --> 00:08:06.854 line:-1
Great.


208
00:08:06.854 --> 00:08:08.155 line:-1
Our popover now reports


209
00:08:08.155 --> 00:08:10.157 line:-2
the correct number
of words replaced.


210
00:08:10.157 --> 00:08:12.759 line:-2
We took an extension with
a persistent background page


211
00:08:12.759 --> 00:08:14.261 line:-1
and successfully converted it


212
00:08:14.261 --> 00:08:16.496 line:-2
to use a non-persistent
background page.


213
00:08:16.496 --> 00:08:18.298 line:-2
And if we go back
to Activity Monitor,


214
00:08:18.298 --> 00:08:20.667 line:-2
the extension process
is no longer present


215
00:08:20.667 --> 00:08:22.569 line:-2
after the background page
has unloaded


216
00:08:22.569 --> 00:08:23.704 line:-1
because we did this work


217
00:08:23.704 --> 00:08:26.240 line:-2
to adopt a non-persistent
background page.


218
00:08:26.240 --> 00:08:28.141 line:-2
That was an overview
of non-persistent


219
00:08:28.141 --> 00:08:30.043 line:-2
background page support
in Safari.


220
00:08:30.043 --> 00:08:32.646 line:-2
Remember, if you are developing
an extension for iOS,


221
00:08:32.646 --> 00:08:35.415 line:-2
you'll have to adopt a
non-persistent background page.


222
00:08:37.084 --> 00:08:39.319 line:-2
Next, let's take a look
at declarative net request,


223
00:08:39.319 --> 00:08:41.522 line:-1
a new content-blocking API.


224
00:08:41.522 --> 00:08:44.191 line:-2
Safari has supported
Content Blocker Extensions,


225
00:08:44.191 --> 00:08:47.661 line:-2
built using WebKit Content
Rule List, since 2015.


226
00:08:47.661 --> 00:08:49.530 line:-2
There are a couple improvements
to them this year,


227
00:08:49.530 --> 00:08:50.597 line:-1
which you can check out


228
00:08:50.597 --> 00:08:52.432 line:-2
in Apple's
updated documentation.


229
00:08:53.967 --> 00:08:55.969 line:-2
However,
web extensions haven't had


230
00:08:55.969 --> 00:08:58.172 line:-2
that kind of fast,
privacy-preserving,


231
00:08:58.172 --> 00:09:00.707 line:-2
content-blocking capability
until now.


232
00:09:00.707 --> 00:09:02.376 line:-1
The declarative net request API,


233
00:09:02.376 --> 00:09:04.144 line:-2
which was recently
introduced by Chrome,


234
00:09:04.144 --> 00:09:06.046 line:-1
checks all of those boxes.


235
00:09:06.046 --> 00:09:08.015 line:-1
Let's go over the basics.


236
00:09:10.217 --> 00:09:11.618 line:-1
The content-blocking rules


237
00:09:11.618 --> 00:09:14.188 line:-1
are written in a JSON format.


238
00:09:14.188 --> 00:09:16.023 line:-2
Those JSON rules
are logically grouped


239
00:09:16.023 --> 00:09:17.791 line:-1
into files called rulesets,


240
00:09:17.791 --> 00:09:19.226 line:-1
and there's JavaScript API


241
00:09:19.226 --> 00:09:22.829 line:-2
that lets you individually
toggle these rulesets on or off.


242
00:09:22.829 --> 00:09:25.199 line:-2
And because Chrome
supports this API as well,


243
00:09:25.199 --> 00:09:27.100 line:-2
you can write one
content blocker that can run


244
00:09:27.100 --> 00:09:29.736 line:-2
in multiple browsers
across multiple platforms.


245
00:09:29.736 --> 00:09:32.272 line:-2
Let's go over how to write
content-blocking rules


246
00:09:32.272 --> 00:09:34.575 line:-1
using declarative net request.


247
00:09:34.575 --> 00:09:36.877 line:-2
The first step is
to specify a ruleset


248
00:09:36.877 --> 00:09:38.779 line:-1
in the extension's manifest.


249
00:09:38.779 --> 00:09:41.014 line:-1
Here, I've declared one ruleset.


250
00:09:41.014 --> 00:09:42.316 line:-1
You'll also need to add


251
00:09:42.316 --> 00:09:44.585 line:-2
the declarative net
request permission.


252
00:09:44.585 --> 00:09:46.920 line:-2
Here's an example of
a declarative net request rule


253
00:09:46.920 --> 00:09:49.756 line:-2
that would go inside the file
we specified in the ruleset.


254
00:09:49.756 --> 00:09:51.325 line:-1
It has four pieces.


255
00:09:52.226 --> 00:09:55.596 line:-2
There's a unique ID
along with a priority,


256
00:09:55.596 --> 00:09:58.265 line:-2
which determines the order
in which the rules are applied.


257
00:09:59.433 --> 00:10:02.302 line:-2
The action piece of the rule
allows you to block, allow,


258
00:10:02.302 --> 00:10:04.605 line:-2
or upgrade the scheme
of a resource.


259
00:10:04.605 --> 00:10:06.840 line:-2
And the condition is
where you tell Safari where


260
00:10:06.840 --> 00:10:09.576 line:-2
and under what conditions
to run this rule.


261
00:10:09.576 --> 00:10:11.211 line:-2
In the condition dictionary
of this rule,


262
00:10:11.211 --> 00:10:12.679 line:-1
there are two keys.


263
00:10:12.679 --> 00:10:15.682 line:-2
"regexFilter" is matched
against the resource URL,


264
00:10:15.682 --> 00:10:18.051 line:-2
and the "resourceTypes" array
specifies the types


265
00:10:18.051 --> 00:10:20.420 line:-2
of resources
that will be blocked.


266
00:10:20.420 --> 00:10:22.589 line:-2
Let's go into more detail
about what's supported


267
00:10:22.589 --> 00:10:24.558 line:-1
in this condition dictionary.


268
00:10:25.859 --> 00:10:28.028 line:-2
Here are all the resource
types you can target


269
00:10:28.028 --> 00:10:30.297 line:-2
using a declarative
net request rule.


270
00:10:32.366 --> 00:10:35.102 line:-2
The "excludedResourceTypes" key
lets you specify the types


271
00:10:35.102 --> 00:10:37.371 line:-2
that you don't
wanna match against.


272
00:10:38.705 --> 00:10:41.241 line:-2
The "domainType key" allows you
to block a resource


273
00:10:41.241 --> 00:10:42.676 line:-2
based on the relation
of the domain


274
00:10:42.676 --> 00:10:44.077 line:-1
of the resource being loaded


275
00:10:44.077 --> 00:10:46.113 line:-1
and the domain of the document.


276
00:10:46.113 --> 00:10:48.482 line:-2
A "first-party" load
is any load where the URL


277
00:10:48.482 --> 00:10:51.251 line:-2
has the same security
origin as the document.


278
00:10:51.251 --> 00:10:53.287 line:-2
Every other case
is "third-party."


279
00:10:54.922 --> 00:10:56.790 line:-2
And finally,
the "Case-Sensitive" key


280
00:10:56.790 --> 00:10:58.659 line:-2
allows you to control
whether the regexFilter


281
00:10:58.659 --> 00:11:00.160 line:-1
is case sensitive or not.


282
00:11:00.160 --> 00:11:02.396 line:-1
By default, it's true.


283
00:11:03.463 --> 00:11:05.299 line:-2
So now, let's build
a web extension


284
00:11:05.299 --> 00:11:08.735 line:-2
that blocks content using
the declarative net request API.


285
00:11:08.735 --> 00:11:10.237 line:-1
The first thing I'll do is add


286
00:11:10.237 --> 00:11:13.140 line:-2
a declarative net request
section to the manifest.


287
00:11:13.140 --> 00:11:15.309 line:-2
Inside that declarative
net request section,


288
00:11:15.309 --> 00:11:17.477 line:-2
I'll add a ruleset
by writing an ID,


289
00:11:17.477 --> 00:11:19.146 line:-1
a bool to indicate that it's on,


290
00:11:19.146 --> 00:11:22.115 line:-2
and a path to the JSON file
containing my rules.


291
00:11:22.115 --> 00:11:23.550 line:-1
And while we're in the manifest,


292
00:11:23.550 --> 00:11:26.920 line:-2
I'll also add the declarative
net request permission.


293
00:11:26.920 --> 00:11:30.123 line:-2
From here, let's go
into the ruleset JSON file.


294
00:11:31.892 --> 00:11:35.696 line:-2
I'll write a rule to block
images on all web pages.


295
00:11:37.164 --> 00:11:40.667 line:-2
I'll build the app containing
the extension and open Safari.


296
00:11:43.136 --> 00:11:45.439 line:-2
Notice how this extension
doesn't have the ability


297
00:11:45.439 --> 00:11:48.075 line:-2
to see any browsing history
or web page contents,


298
00:11:48.075 --> 00:11:49.810 line:-2
even though it will be able
to block content


299
00:11:49.810 --> 00:11:51.712 line:-1
across all web pages.


300
00:11:51.712 --> 00:11:53.413 line:-1
Before I turn on the extension,


301
00:11:53.413 --> 00:11:56.717 line:-2
I'm going to open a WebKit blog
post with some images in it.


302
00:11:56.717 --> 00:12:00.254 line:-2
We can see that there are
two images on this web page.


303
00:12:00.254 --> 00:12:02.756 line:-2
If I come back to preferences,
and turn on the extension,


304
00:12:02.756 --> 00:12:04.491 line:-1
and then reload the page,


305
00:12:04.491 --> 00:12:06.426 line:-1
the images will be blocked.


306
00:12:10.330 --> 00:12:11.865 line:-2
Now let's go
to another web page


307
00:12:11.865 --> 00:12:14.568 line:-2
like this Wikipedia page
about fish.


308
00:12:14.568 --> 00:12:16.570 line:-1
Images are also blocked here,


309
00:12:16.570 --> 00:12:18.438 line:-2
but I'd actually prefer
if I could see images


310
00:12:18.438 --> 00:12:19.940 line:-1
on this particular page.


311
00:12:19.940 --> 00:12:21.542 line:-1
So let's modify our extension


312
00:12:21.542 --> 00:12:23.810 line:-2
so that images are blocked
everywhere except here.


313
00:12:24.378 --> 00:12:26.346 line:-2
I'll come back to Xcode
and write a rule


314
00:12:26.346 --> 00:12:29.283 line:-1
to allow images on this page.


315
00:12:29.283 --> 00:12:31.485 line:-2
The action type of this rule
will be "allow,"


316
00:12:31.485 --> 00:12:33.053 line:-2
and it will be
a higher-priority rule


317
00:12:33.053 --> 00:12:34.721 line:-1
than our first blocking rule.


318
00:12:34.721 --> 00:12:36.323 line:-1
I'll rebuild my app,


319
00:12:36.323 --> 00:12:38.792 line:-2
and then I'll come back
to Safari.


320
00:12:38.792 --> 00:12:40.827 line:-1
I'll reload the page.


321
00:12:42.896 --> 00:12:44.631 line:-1
But this new rule didn't work


322
00:12:44.631 --> 00:12:46.867 line:-2
because I'm still
not seeing any images.


323
00:12:49.269 --> 00:12:50.871 line:-2
I'll look
in extension preferences


324
00:12:50.871 --> 00:12:53.607 line:-1
for any error messages.


325
00:12:53.607 --> 00:12:56.310 line:-2
Okay, it looks like
I used an empty array


326
00:12:56.310 --> 00:12:57.811 line:-1
for the resource types key


327
00:12:57.811 --> 00:13:00.214 line:-2
instead of an array
with the string "image."


328
00:13:02.349 --> 00:13:04.918 line:-2
I'll come back to Xcode
to fix my mistake.


329
00:13:05.485 --> 00:13:07.955 line:-2
I'll rebuild and come back
to Safari's preferences


330
00:13:07.955 --> 00:13:10.390 line:-2
to verify
that the error message is gone.


331
00:13:17.598 --> 00:13:20.467 line:-1
Then, I'll reload the page.


332
00:13:20.467 --> 00:13:22.870 line:-2
And great, images are
no longer being blocked


333
00:13:22.870 --> 00:13:24.771 line:-1
on this Wikipedia page.


334
00:13:24.771 --> 00:13:27.107 line:-2
So that was an overview
of how to build a web extension


335
00:13:27.107 --> 00:13:29.142 line:-2
that can block content
on the web.


336
00:13:29.142 --> 00:13:31.144 line:-2
You can consult
Apple's documentation


337
00:13:31.144 --> 00:13:34.181 line:-2
for more information on how
to use declarative net request.


338
00:13:34.181 --> 00:13:36.149 line:-2
Finally, let's take a look
at how extensions


339
00:13:36.149 --> 00:13:38.585 line:-2
can customize new tabs
in Safari.


340
00:13:38.585 --> 00:13:41.054 line:-2
We know that users love
to personalize their browser,


341
00:13:41.054 --> 00:13:42.923 line:-2
and extensions are
a great way to do that.


342
00:13:42.923 --> 00:13:45.592 line:-2
The new tab override API
allows extensions


343
00:13:45.592 --> 00:13:47.427 line:-2
to take over the new tab page
in Safari


344
00:13:47.427 --> 00:13:49.263 line:-1
and customize it completely.


345
00:13:49.263 --> 00:13:51.565 line:-2
This API is already
publicly available


346
00:13:51.565 --> 00:13:53.800 line:-1
in Safari 14.1.


347
00:13:53.800 --> 00:13:57.070 line:-2
New tab overrides are
declared in the manifest.


348
00:13:57.070 --> 00:13:58.872 line:-2
And when the user
turns on an extension


349
00:13:58.872 --> 00:14:00.307 line:-1
with a new tab override,


350
00:14:00.307 --> 00:14:01.909 line:-2
they make a choice
on whether or not


351
00:14:01.909 --> 00:14:05.078 line:-2
to let that extension
take over new tabs in Safari.


352
00:14:06.547 --> 00:14:09.449 line:-2
Here's how you'd point out
your new tab override page


353
00:14:09.449 --> 00:14:10.918 line:-1
in the manifest.


354
00:14:10.918 --> 00:14:14.154 line:-2
Let's build an extension
that uses this new API together.


355
00:14:14.154 --> 00:14:16.290 line:-2
I'm going to add
a new tab override


356
00:14:16.290 --> 00:14:17.991 line:-1
to the Sea Creator extension.


357
00:14:17.991 --> 00:14:20.027 line:-2
Our goal is to have
a fun web page appear


358
00:14:20.027 --> 00:14:22.729 line:-2
every time we open a new tab
in Safari.


359
00:14:22.729 --> 00:14:25.232 line:-2
I'll start by declaring
that my HTML page


360
00:14:25.232 --> 00:14:27.701 line:-2
is a new tab override
in the manifest.


361
00:14:29.636 --> 00:14:32.072 line:-2
I have some existing HTML
and CSS files


362
00:14:32.072 --> 00:14:33.707 line:-1
that I'd like to use.


363
00:14:33.707 --> 00:14:36.844 line:-2
They are in my extension's
resources folder.


364
00:14:36.844 --> 00:14:39.179 line:-2
I just need to add them
to the Xcode project.


365
00:14:39.179 --> 00:14:41.782 line:-2
If you've never added
a file to an Xcode project,


366
00:14:41.782 --> 00:14:42.783 line:-1
don't worry.


367
00:14:42.783 --> 00:14:44.117 line:-1
It's pretty easy.


368
00:14:44.117 --> 00:14:46.453 line:-1
I'll click File,


369
00:14:46.453 --> 00:14:48.088 line:-1
Add Files to Sea Creator,


370
00:14:48.088 --> 00:14:50.424 line:-2
and then select
the files I want to add,


371
00:14:50.424 --> 00:14:51.758 line:-1
making sure they're a part


372
00:14:51.758 --> 00:14:54.361 line:-2
of the extension target
and not the app target.


373
00:14:58.298 --> 00:15:00.634 line:-2
This HTML creates
a colorful page


374
00:15:00.634 --> 00:15:02.169 line:-1
with a fun fact.


375
00:15:02.169 --> 00:15:03.670 line:-1
So let's run the app,


376
00:15:03.670 --> 00:15:06.006 line:-2
and in Safari,
I'll turn on the extension.


377
00:15:09.109 --> 00:15:11.778 line:-2
I get this prompt, asking me
if I want this extension


378
00:15:11.778 --> 00:15:14.081 line:-2
to be able to take over
my new tabs and windows.


379
00:15:14.081 --> 00:15:15.983 line:-1
I'll allow it to do so.


380
00:15:19.419 --> 00:15:21.388 line:-2
If I wanted to make changes
to this later,


381
00:15:21.388 --> 00:15:23.357 line:-2
I can come
into General settings.


382
00:15:25.526 --> 00:15:27.661 line:-2
But now, when I create
new tabs in Safari,


383
00:15:27.661 --> 00:15:29.263 line:-1
my new tab page appears.


384
00:15:29.263 --> 00:15:31.932 line:-1
It looks pretty good!


385
00:15:31.932 --> 00:15:34.268 line:-2
But I wanna make
a couple of tweaks.


386
00:15:34.268 --> 00:15:37.638 line:-2
My new tab override page
doesn't have a very nice title.


387
00:15:40.574 --> 00:15:42.876 line:-2
So back in Xcode,
I'll add a title


388
00:15:42.876 --> 00:15:45.512 line:-2
so my pages look good
in Safari's tab bar.


389
00:15:48.415 --> 00:15:50.684 line:-2
I can also pick
a different theme color


390
00:15:50.684 --> 00:15:51.919 line:-1
if I want something distinct


391
00:15:51.919 --> 00:15:54.521 line:-2
from the one Safari inferred
from the page.


392
00:15:54.521 --> 00:15:57.791 line:-2
This meta tag I'm using isn't
specific to new tab overrides.


393
00:15:57.791 --> 00:15:59.793 line:-1
It will work on any web page.


394
00:15:59.793 --> 00:16:00.861 line:-1
If you wanna learn more


395
00:16:00.861 --> 00:16:02.963 line:-2
about the changes
to Safari's UI,


396
00:16:02.963 --> 00:16:04.431 line:-2
be sure to checkout
the session called


397
00:16:04.431 --> 00:16:06.333 line:-1
"Design for Safari 15."


398
00:16:09.670 --> 00:16:11.705 line:-1
Let's see how that looks now.


399
00:16:11.705 --> 00:16:13.273 line:-1
I'll build again.


400
00:16:14.842 --> 00:16:17.511 line:-2
And back in Safari,
I'll create a new tab.


401
00:16:17.511 --> 00:16:19.112 line:-1
Great.


402
00:16:19.112 --> 00:16:21.582 line:-2
We successfully added
a new tab override


403
00:16:21.582 --> 00:16:23.483 line:-1
to the Sea Creator extension.


404
00:16:24.918 --> 00:16:26.587 line:-2
And that was a look
at how extensions


405
00:16:26.587 --> 00:16:29.056 line:-2
can customize new tabs
in Safari.


406
00:16:29.056 --> 00:16:31.658 line:-2
Today, we discussed
three new Web Extension APIs


407
00:16:31.658 --> 00:16:34.661 line:-2
available in Safari
on macOS and iOS.


408
00:16:34.661 --> 00:16:37.164 line:-2
I encourage you to download
the sample projects associated


409
00:16:37.164 --> 00:16:39.867 line:-2
with this session and play
around with the new APIs.


410
00:16:39.867 --> 00:16:42.202 line:-2
I showed you how these
extensions work on macOS,


411
00:16:42.202 --> 00:16:44.104 line:-1
but they work on iOS as well.


412
00:16:45.305 --> 00:16:47.007 line:-2
We'd also love to know
what you think.


413
00:16:47.007 --> 00:16:49.343 line:-2
You can use Feedback Assistant
to file bugs,


414
00:16:49.343 --> 00:16:50.544 line:-1
or you can come chat with us


415
00:16:50.544 --> 00:16:53.180 line:-1
on the Safari Developer Forums.


416
00:16:53.180 --> 00:16:54.848 line:-2
And finally,
check out the other sessions


417
00:16:54.848 --> 00:16:57.618 line:-2
I mentioned today
if you haven't already.

