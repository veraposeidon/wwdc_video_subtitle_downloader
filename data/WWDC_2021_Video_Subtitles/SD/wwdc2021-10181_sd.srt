2
00:00:00,334 --> 00:00:07,241 line:-1
[upbeat music]


3
00:00:09.042 --> 00:00:10.611 line:-1 align:center
[Shefali] Hi, everyone.


4
00:00:10.644 --> 00:00:12.112 line:-1 align:center
My name is Shefali Saboo,


5
00:00:12,112 --> 00:00:14,948 line:-2
and I'm a performance tools
engineer here at Apple.


6
00:00:15,616 --> 00:00:17,651 line:-2
I'll be your guide
as we navigate


7
00:00:17,684 --> 00:00:19,720 line:-2
application performance
together.


8
00:00:19,720 --> 00:00:21,889 line:-2
Today's journey will be
a thrilling tour


9
00:00:21,922 --> 00:00:23,690 line:-2
through the world
of performance.


10
00:00:23.690 --> 00:00:26.527 line:-2 align:center
Your apps play
a significant role


11
00:00:26.560 --> 00:00:29.530 line:-2 align:center
in the overall software
experience on our devices.


12
00:00:29.530 --> 00:00:33.133 line:-2 align:center
Continuing to optimize your apps
and improve performance


13
00:00:33.166 --> 00:00:36.270 line:-2 align:center
means your users will use
your app more often,


14
00:00:36.303 --> 00:00:37.671 line:-1 align:center
stay more engaged,


15
00:00:37,704 --> 00:00:40,407 line:-2
and will use your app
for a longer period of time.


16
00:00:40,407 --> 00:00:44,011 line:-2
Optimizing for performance
can seem like a daunting task


17
00:00:44,011 --> 00:00:46,780 line:-2
with many metrics to track
and tools to use.


18
00:00:46,813 --> 00:00:47,814 line:-1
But fear not.


19
00:00:47.814 --> 00:00:50.784 line:-2 align:center
This survival guide
will get you up to speed


20
00:00:50.784 --> 00:00:53.420 line:-2 align:center
on tooling, metrics,
and paradigms


21
00:00:53.420 --> 00:00:56.190 line:-2 align:center
that can help take your
development to the next level


22
00:00:56.190 --> 00:00:59.726 line:-2 align:center
and ensure the best possible
customer experience.


23
00:00:59,726 --> 00:01:02,529 line:-1
I'm so excited to be your guide


24
00:01:02.529 --> 00:01:04.665 line:-2 align:center
as we walk through
our performance tools


25
00:01:04,665 --> 00:01:07,267 line:-2
and the great things
that you can do with them.


26
00:01:07,267 --> 00:01:10,971 align:center
There will be five major tools
that we'll be covering today:


27
00:01:10,971 --> 00:01:13,774 line:0
the Xcode Organizer, MetricKit,


28
00:01:13,774 --> 00:01:15,809 line:0
Instruments, XCTest,


29
00:01:15,809 --> 00:01:18,312 align:center
and the App Store Connect API.


30
00:01:18,312 --> 00:01:22,449 line:-2
We'll start with a quick
introduction of the key metrics.


31
00:01:23,450 --> 00:01:25,519 line:-2
Then step through
some common problems


32
00:01:25,519 --> 00:01:27,221 line:-1
in each domain area


33
00:01:27,221 --> 00:01:30,090 line:-2
and ways to resolve
and prevent them.


34
00:01:31,692 --> 00:01:34,761 line:-2
And finally,
we'll end with some next steps.


35
00:01:34,761 --> 00:01:38,832 line:-2
Performance optimization is like
a long river with many stops.


36
00:01:38.832 --> 00:01:41.802 line:-2 align:center
There are a few different tools
needed for navigation,


37
00:01:41,802 --> 00:01:44,571 line:-2
and at each of the stops,
there's something new to learn.


38
00:01:44.571 --> 00:01:47.074 line:-2 align:center
Let's take a trip
down the river.


39
00:01:47.074 --> 00:01:49.676 line:-1 align:center
First, a quick introduction.


40
00:01:49.676 --> 00:01:52.546 line:-2 align:center
Let's take a look at the
different performance metrics


41
00:01:52,546 --> 00:01:54,414 line:-1
we'll cover today.


42
00:01:54,414 --> 00:01:57,084 line:-2
There are currently
eight key things to track


43
00:01:57,084 --> 00:01:58,886 line:-1
for application performance:


44
00:01:58,886 --> 00:02:00,921 line:-1
Battery Usage, Launch Time,


45
00:02:00,921 --> 00:02:02,789 line:-1
Hang Rate, Memory,


46
00:02:02,789 --> 00:02:04,791 line:-1
Disk Writes, Scrolling,


47
00:02:04,791 --> 00:02:07,361 line:-1
Terminations, and MXSignposts.


48
00:02:07,361 --> 00:02:09,563 line:-2
All of these can be tracked
through our toolset.


49
00:02:10.230 --> 00:02:12.032 line:-1 align:center
I'm a developer for an app


50
00:02:12.032 --> 00:02:14.635 line:-2 align:center
called MealPlanner
that allows users to track


51
00:02:14,635 --> 00:02:17,838 line:-2
their meals for the week
and save cool recipes.


52
00:02:19,873 --> 00:02:23,677 line:-2
Here's an example of a poor
user experience within my app,


53
00:02:23.677 --> 00:02:26.847 line:-2 align:center
specifically in the form
of scroll hitches.


54
00:02:26.847 --> 00:02:30.250 line:-2 align:center
Notice the slow, skipping,
and jittery scroll?


55
00:02:31.351 --> 00:02:34.221 line:-2 align:center
On the flip side,
here's the same application


56
00:02:34,221 --> 00:02:37,324 line:-2
with a seamless user
experience and no hitches.


57
00:02:38.959 --> 00:02:42.129 line:-2 align:center
We can already see that
there's quite a difference


58
00:02:42.129 --> 00:02:43.730 line:-1 align:center
between the two experiences,


59
00:02:43.730 --> 00:02:47.100 line:-2 align:center
and this smooth scroll is what
we want to help you achieve


60
00:02:47,100 --> 00:02:49,069 line:-2
through performance
optimizations.


61
00:02:49,069 --> 00:02:52,139 line:-2
Each performance metric
has its own unique set


62
00:02:52,139 --> 00:02:54,775 line:-1
of paradigms and common tooling.


63
00:02:54.775 --> 00:02:56.710 line:-2 align:center
Let's jump right
into some common problems


64
00:02:56.710 --> 00:02:58.512 line:-1 align:center
in each domain area


65
00:02:58.512 --> 00:03:00.848 line:-2 align:center
and ways to resolve
and prevent them.


66
00:03:00,848 --> 00:03:04,284 line:-2
Our first stop along
the river is battery usage.


67
00:03:05,118 --> 00:03:07,354 line:-2
If your app is draining
a lot of battery,


68
00:03:07,354 --> 00:03:09,623 line:-2
here's what a user
will see on their end.


69
00:03:09,623 --> 00:03:12,125 line:0
This is the Battery UI.


70
00:03:12,125 --> 00:03:15,629 align:center
It shows users how much
of their overall battery drain


71
00:03:15,629 --> 00:03:18,498 align:center
an app on their device
contributed towards,


72
00:03:18,498 --> 00:03:22,002 align:center
as well as its foreground
and background activity.


73
00:03:22,002 --> 00:03:24,638 align:center
Why should you care
about improving battery life?


74
00:03:24.638 --> 00:03:26.173 line:-1 align:center
Easy.


75
00:03:26.173 --> 00:03:28.008 line:-1 align:center
Users prioritize using apps


76
00:03:28,008 --> 00:03:29,943 line:-2
that allow them
to use their devices


77
00:03:29.943 --> 00:03:32.646 line:-2 align:center
throughout the day
without needing to recharge.


78
00:03:32.646 --> 00:03:35.115 line:-1 align:center
By optimizing for battery life,


79
00:03:35.115 --> 00:03:37.317 line:-2 align:center
users can use their devices
and your app


80
00:03:37,317 --> 00:03:38,919 line:-1
for a longer period of time.


81
00:03:38.919 --> 00:03:41.622 line:-1 align:center
That, in and of itself, is a win.


82
00:03:41,622 --> 00:03:43,857 line:-2
There are many
different subsystems


83
00:03:43,857 --> 00:03:45,692 line:-2
to pay attention to
when it comes


84
00:03:45,692 --> 00:03:47,628 line:-1
to optimizing battery life.


85
00:03:47,628 --> 00:03:49,663 line:0
The top three to make note of


86
00:03:49,663 --> 00:03:53,400 line:0
are CPU, Networking,
and Location.


87
00:03:53,400 --> 00:03:56,170 line:0
I can track and triage
the battery life of my app


88
00:03:56,170 --> 00:03:58,572 align:center
using a few different tools
during development


89
00:03:58.572 --> 00:04:01.942 line:-2 align:center
or after a version
has already released.


90
00:04:01,942 --> 00:04:05,279 line:-2
While I'm developing and testing
a new feature at my desk,


91
00:04:05.279 --> 00:04:07.681 line:-2 align:center
I'll build and run my code
through Xcode,


92
00:04:07,681 --> 00:04:10,184 line:-2
and click
on the Debug navigator,


93
00:04:10.184 --> 00:04:12.519 line:-2 align:center
which looks like
a little spray bottle,


94
00:04:12.519 --> 00:04:15.522 line:-2 align:center
to see the various gauges
Xcode has to offer.


95
00:04:15.522 --> 00:04:18.959 line:-2 align:center
The one I'll pay close attention
to is the Energy Gauge.


96
00:04:18.959 --> 00:04:22.629 line:-2 align:center
The Energy Gauge allows me
to track my CPU usage


97
00:04:22.629 --> 00:04:25.299 line:-2 align:center
as I'm testing my app
and shows me regions


98
00:04:25,299 --> 00:04:27,234 line:-1
of high CPU utilization


99
00:04:27,234 --> 00:04:30,537 line:-1
and CPU Wake Overhead.


100
00:04:30,537 --> 00:04:32,406 line:-1
High CPU utilization is


101
00:04:32,406 --> 00:04:35,209 line:-2
when CPU use
is greater than 20%,


102
00:04:35.209 --> 00:04:37.477 line:-1 align:center
and CPU Wake Overhead is regions


103
00:04:37.477 --> 00:04:39.980 line:-2 align:center
where the CPU wakes
from an idle state,


104
00:04:39.980 --> 00:04:42.583 line:-2 align:center
and there's
an incurred energy cost.


105
00:04:42,583 --> 00:04:44,651 line:-2
It's common to see
a spike in CPU


106
00:04:44.651 --> 00:04:47.120 line:-2 align:center
when my app is drawing
the user interface,


107
00:04:47,120 --> 00:04:49,156 line:-2
processing data
from the network,


108
00:04:49.156 --> 00:04:50.924 line:-1 align:center
or performing calculations,


109
00:04:50,924 --> 00:04:54,061 line:-2
but once those tasks are
complete and my app is waiting


110
00:04:54.061 --> 00:04:56.430 line:-2 align:center
for the user to perform
their next action,


111
00:04:56,430 --> 00:05:00,834 line:-2
I should see the CPU usage
be at, or near, zero.


112
00:05:00.834 --> 00:05:03.103 line:-2 align:center
From here, I can
also click Time Profile


113
00:05:03,103 --> 00:05:05,272 line:-1
to profile my app in Instruments


114
00:05:05,272 --> 00:05:08,041 line:-2
and see the thermal state,
CPU usage,


115
00:05:08.041 --> 00:05:11.144 line:-2 align:center
and active call stacks
for the profiled duration.


116
00:05:11,144 --> 00:05:13,847 line:-2
I can also use
the Location Energy Model


117
00:05:13.847 --> 00:05:16.250 line:-2 align:center
to measure the impact
of Core Location


118
00:05:16,250 --> 00:05:18,819 line:-2
and make sure my app
isn't using the location


119
00:05:18,819 --> 00:05:20,587 line:-1
when it shouldn't be.


120
00:05:20.587 --> 00:05:23.056 line:-2 align:center
Occasionally,
there might be a bug in a beta


121
00:05:23.056 --> 00:05:24.925 line:-1 align:center
or released version of my app


122
00:05:24,925 --> 00:05:27,261 line:-2
that's tough to reproduce
at my desk


123
00:05:27,261 --> 00:05:31,031 line:-2
or may need more logging
and context to debug.


124
00:05:31,031 --> 00:05:34,134 line:-2
MetricKit,
which operates on-device


125
00:05:34.134 --> 00:05:36.870 line:-2 align:center
as an all-in-one performance
telemetry framework,


126
00:05:36,870 --> 00:05:39,473 line:-2
can help me narrow down
the root cause


127
00:05:39,473 --> 00:05:42,176 line:-1
and provide me valuable insights


128
00:05:42,176 --> 00:05:45,112 line:-2
into problems my customers
are facing.


129
00:05:45,112 --> 00:05:48,115 line:-2
To use MetricKit,
all I need to do is add


130
00:05:48,115 --> 00:05:52,352 line:-2
and implement a custom class
called AppMetrics in my app


131
00:05:52.352 --> 00:05:53.887 line:-1 align:center
and conform this new class


132
00:05:53,887 --> 00:05:56,590 line:-2
to the MXMetricManagerSubscriber
protocol.


133
00:05:57.758 --> 00:06:00.160 line:-2 align:center
I can then add a reference
to my custom class


134
00:06:00,160 --> 00:06:02,196 line:-1
to the manager.


135
00:06:02.196 --> 00:06:05.265 line:-2 align:center
And remove a reference
to my custom class on deinit,


136
00:06:05.265 --> 00:06:07.201 line:-2 align:center
which is a recommended
best practice.


137
00:06:08,936 --> 00:06:10,337 line:0
I can process this data


138
00:06:10,337 --> 00:06:13,140 align:center
in the corresponding
didReceive methods.


139
00:06:13,140 --> 00:06:14,675 line:0
If done strategically,


140
00:06:14,675 --> 00:06:16,443 line:0
I can augment much
of the same data


141
00:06:16,443 --> 00:06:18,111 line:0
I'll find in the Organizer,


142
00:06:18,111 --> 00:06:20,480 line:0
such as the energy logs
and CPU metrics,


143
00:06:20,480 --> 00:06:22,716 line:0
with contextual data
from MetricKit


144
00:06:22,716 --> 00:06:25,719 line:0
about what may have been going
wrong when the problem occurred.


145
00:06:25.719 --> 00:06:28.856 line:-2 align:center
A simple version of this data
is available to you,


146
00:06:28.856 --> 00:06:30.123 line:-1 align:center
with no extra effort,


147
00:06:30,123 --> 00:06:33,126 line:-2
thanks to our
on-device analytics pipeline.


148
00:06:33,126 --> 00:06:34,695 line:-1
As users use your app,


149
00:06:34,695 --> 00:06:38,131 line:-2
we collect performance data
from consented devices.


150
00:06:38.131 --> 00:06:41.201 line:-2 align:center
This data is then aggregated
on our servers


151
00:06:41.201 --> 00:06:44.171 line:-2 align:center
and sent back to you
through one of our many tools,


152
00:06:44.171 --> 00:06:45.906 line:-1 align:center
like the Xcode Organizer.


153
00:06:45.906 --> 00:06:49.443 line:-2 align:center
Accessing the Xcode Organizer
to see performance data


154
00:06:49,443 --> 00:06:51,945 line:-2
for a version of my app
that's already in the app store


155
00:06:51,945 --> 00:06:54,648 line:-2
is as easy as navigating
to the menu bar


156
00:06:54,648 --> 00:06:57,618 line:-2
while Xcode is open,
going to window,


157
00:06:57,618 --> 00:06:59,486 line:-2
and clicking Organizer
to launch.


158
00:07:00,387 --> 00:07:03,190 line:-2
Once I'm here, I can click
on the battery usage metric


159
00:07:03.190 --> 00:07:05.626 line:-2 align:center
to view aggregated data
for my app


160
00:07:05,626 --> 00:07:07,861 line:-1
across the last 16 app versions,


161
00:07:07,861 --> 00:07:09,963 line:-1
as well as a detailed breakdown


162
00:07:09,963 --> 00:07:12,332 line:-2
by major subcomponent
to the right of the chart.


163
00:07:13,934 --> 00:07:16,503 line:-2
If the newest version of my app
has a major regression,


164
00:07:16.503 --> 00:07:18.105 line:-1 align:center
I'll know about it


165
00:07:18.105 --> 00:07:20.474 line:-2 align:center
right after a version shows up
in the Organizer,


166
00:07:20,474 --> 00:07:22,776 line:-2
if I navigate
to the Regression pane,


167
00:07:22,776 --> 00:07:25,112 line:-1
which is new in Xcode 13.


168
00:07:25,112 --> 00:07:28,015 line:-2
This new regressions pane
isolates all the metrics


169
00:07:28.015 --> 00:07:29.850 line:-2 align:center
that have increased
significantly


170
00:07:29.850 --> 00:07:32.619 line:-2 align:center
in the most recent version
of my app


171
00:07:32.619 --> 00:07:36.857 line:-2 align:center
so I can see all the things
I need to focus on in one place.


172
00:07:36,857 --> 00:07:39,960 line:-2
To determine what areas
of my app caused the issues,


173
00:07:39,960 --> 00:07:43,163 line:-2
I can also use
Energy Organizer under Reports


174
00:07:43,163 --> 00:07:45,632 line:-1
to view regions of high CPU use


175
00:07:45,632 --> 00:07:49,603 line:-2
and logs that were collected
from consented user devices.


176
00:07:49,603 --> 00:07:51,839 line:-2
This provides
a more detailed look


177
00:07:51.839 --> 00:07:53.907 line:-2 align:center
into what was happening
in my app.


178
00:07:53,907 --> 00:07:56,310 line:-1
I can get all of this data


179
00:07:56.310 --> 00:07:59.079 line:-2 align:center
by querying the App Store
Connect API as well


180
00:07:59,079 --> 00:08:02,115 line:-2
and running my own analysis
on the JSON payload


181
00:08:02,115 --> 00:08:04,985 line:-2
that is returned
with my requested data.


182
00:08:04,985 --> 00:08:08,322 line:-2
All of these tools will make it
easy for me to catch and resolve


183
00:08:08.322 --> 00:08:11.525 line:-2 align:center
a lot of the battery usage
regressions in my app.


184
00:08:11,525 --> 00:08:14,228 align:center
To learn more about
battery life optimizations,


185
00:08:14,228 --> 00:08:17,397 line:0
check out the "Improving Battery
Life and Performance" talk


186
00:08:17,397 --> 00:08:19,533 line:0
from 2019, and to learn more


187
00:08:19,533 --> 00:08:21,368 align:center
about using Instruments,
check out


188
00:08:21,368 --> 00:08:25,205 line:0
the "Analyze HTTP Traffic
in Instruments" talk this year.


189
00:08:25,205 --> 00:08:28,842 line:-2
Our next stop is
Hang Rate and Scrolling,


190
00:08:28.842 --> 00:08:32.746 line:-2 align:center
two metrics that convey
that my app wasn't responsive.


191
00:08:32,746 --> 00:08:35,115 line:-2
A hang is when
the app is unresponsive


192
00:08:35.115 --> 00:08:37.251 line:-1 align:center
to user input or actions


193
00:08:37,251 --> 00:08:40,220 line:-1
for at least 250 milliseconds.


194
00:08:40,220 --> 00:08:43,090 line:-2
Hangs in the app
can lead customers


195
00:08:43,090 --> 00:08:45,993 line:-2
to force quit the application
from the app switcher


196
00:08:45.993 --> 00:08:49.296 line:-2 align:center
and are a major impediment
to the user's experience


197
00:08:49,296 --> 00:08:52,299 line:-2
in your app
and should be prioritized.


198
00:08:54,168 --> 00:08:57,838 line:-2
Stuttering scrolls occur
when new content isn't ready


199
00:08:57.838 --> 00:09:00.040 line:-1 align:center
for the next screen refresh.


200
00:09:00,040 --> 00:09:03,010 line:-2
These will lead to an
unenjoyable user experience


201
00:09:03,010 --> 00:09:04,845 line:-1
and overall frustration,


202
00:09:04.845 --> 00:09:08.782 line:-2 align:center
resulting in users spending
less time in your app.


203
00:09:08,782 --> 00:09:10,350 line:-1
As an app developer,


204
00:09:10.350 --> 00:09:13.253 line:-2 align:center
the goal is to maximize
the amount of user engagement,


205
00:09:13.253 --> 00:09:15.956 line:-2 align:center
so this is a great place
to start optimizing.


206
00:09:18.258 --> 00:09:20.861 line:-2 align:center
Remember that smooth scroll
we showed you earlier?


207
00:09:20,861 --> 00:09:24,231 line:-2
Aiming for this is in
the best interest of your users.


208
00:09:24.231 --> 00:09:27.768 line:-2 align:center
I can track hangs
and my scrolling metrics


209
00:09:27,768 --> 00:09:29,703 line:-1
in the Xcode Organizer


210
00:09:29,703 --> 00:09:32,639 line:-2
by navigating
to their respective views.


211
00:09:32,639 --> 00:09:34,575 line:-2
A sign that I need
to pay close attention


212
00:09:34.575 --> 00:09:36.443 line:-1 align:center
to what my app is doing


213
00:09:36,443 --> 00:09:38,412 line:-2
is if I notice
either of the charts


214
00:09:38.412 --> 00:09:41.849 line:-2 align:center
trending upwards
or, in the case of scrolling,


215
00:09:41,849 --> 00:09:45,319 line:-2
if I notice that the graph is
showing more yellow and red bars


216
00:09:45,319 --> 00:09:48,689 line:-2
instead of green ones,
like in this graph here.


217
00:09:48,689 --> 00:09:51,024 line:-2
According to the key
to the right of the chart,


218
00:09:51.024 --> 00:09:54.261 line:-2 align:center
the red bar is indicative
of the poor scroll experience


219
00:09:54.261 --> 00:09:56.330 line:-1 align:center
we saw in the video earlier


220
00:09:56,330 --> 00:09:58,098 line:-1
and should be fixed immediately.


221
00:09:58,098 --> 00:10:00,601 line:-1
This data is now also available


222
00:10:00,601 --> 00:10:03,036 line:-2
through the App Store
Connect API.


223
00:10:03.036 --> 00:10:06.540 line:-2 align:center
I can use Instruments
to detect the cause of my hangs


224
00:10:06,540 --> 00:10:09,977 line:-2
by using the Thread State
or System Call Traces.


225
00:10:09,977 --> 00:10:12,880 line:-2
The Thread State Trace
instrument shows a timeline


226
00:10:12,880 --> 00:10:15,048 line:-2
of the thread's state
and when the OS


227
00:10:15.048 --> 00:10:17.150 line:-1 align:center
has scheduled the thread to run.


228
00:10:17.150 --> 00:10:19.520 line:-2 align:center
I can see how long
a thread was blocked for


229
00:10:19.520 --> 00:10:21.088 line:-1 align:center
in the details section.


230
00:10:22.656 --> 00:10:24.491 line:-2 align:center
The System Call Trace
shows a narrative


231
00:10:24.491 --> 00:10:26.493 line:-2 align:center
that details
the system calls entered


232
00:10:26,493 --> 00:10:29,596 line:-1
and how long they took.


233
00:10:29,596 --> 00:10:32,032 line:-2
To verify that I'm not
releasing app versions


234
00:10:32,032 --> 00:10:35,169 line:-2
with bugs that will affect
my users' scroll experience,


235
00:10:35,169 --> 00:10:37,871 line:-2
I can write a performance test
with XCTest


236
00:10:37.871 --> 00:10:41.175 line:-2 align:center
that launches and scrolls
through my app.


237
00:10:41.175 --> 00:10:43.343 line:-2 align:center
In this test,
I'm specifying that I want


238
00:10:43.343 --> 00:10:46.213 line:-2 align:center
to measure the
scrollDeceleration submetric,


239
00:10:46,213 --> 00:10:48,282 line:-2
and in the body
of the measure block,


240
00:10:48,282 --> 00:10:50,784 line:-2
I'm swiping up
with the scroll velocity


241
00:10:50,784 --> 00:10:52,886 line:-1
I expect in my app.


242
00:10:52,886 --> 00:10:55,422 line:-2
Since this measure block
runs five times by default,


243
00:10:55,422 --> 00:10:58,225 line:-2
I'll reset the application state
between runs


244
00:10:58,225 --> 00:11:01,395 line:-1
by using the XCTMeasureOptions.


245
00:11:01.395 --> 00:11:04.965 line:-2 align:center
I can pass this
into my measure block,


246
00:11:04,965 --> 00:11:06,800 line:-1
stop measuring,


247
00:11:06,800 --> 00:11:09,937 line:-2
and then reset
my application state.


248
00:11:09,937 --> 00:11:12,339 line:-2
Sometimes, reproducing
responsiveness issues


249
00:11:12.339 --> 00:11:14.808 line:-2 align:center
in forced test cases
may not be easy.


250
00:11:14,808 --> 00:11:16,777 align:center
Luckily, MetricKit,


251
00:11:16,777 --> 00:11:19,046 align:center
when deployed in my
production application,


252
00:11:19,046 --> 00:11:21,582 line:0
can allow me
to collect telemetry


253
00:11:21,582 --> 00:11:23,650 line:0
and diagnostics for these issues


254
00:11:23,650 --> 00:11:25,619 align:center
at the time they occur.


255
00:11:25,619 --> 00:11:27,888 align:center
In the case of hangs, in iOS 14,


256
00:11:27,888 --> 00:11:30,357 line:0
MetricKit would deliver
these diagnostics to me


257
00:11:30,357 --> 00:11:32,693 line:0
at a 24-hour cadence.


258
00:11:32,693 --> 00:11:35,395 align:center
New in iOS 15 and macOS 12,


259
00:11:35,395 --> 00:11:38,999 line:0
I will now receive all
diagnostics, including hangs,


260
00:11:38,999 --> 00:11:42,603 line:0
in my app immediately
after an issue occurs.


261
00:11:42,603 --> 00:11:44,438 line:-1
Using these instant diagnostics


262
00:11:44.438 --> 00:11:46.640 line:-2 align:center
in conjunction
with my own telemetry,


263
00:11:46,640 --> 00:11:48,275 line:-1
I can quickly root cause


264
00:11:48,275 --> 00:11:51,612 line:-2
and resolve the most pressing
responsiveness problems.


265
00:11:51,612 --> 00:11:54,081 align:center
In the case of scroll hitches,


266
00:11:54,081 --> 00:11:57,618 line:0
iOS 15 introduces a new API
within MetricKit


267
00:11:57,618 --> 00:12:00,754 line:0
to tag custom animations
using MXSignpost.


268
00:12:00,754 --> 00:12:04,591 align:center
MXSignpost is a wrapper API
shipped with MetricKit


269
00:12:04,591 --> 00:12:06,393 align:center
that allows me to mark


270
00:12:06,393 --> 00:12:08,362 align:center
critical code sections
for telemetry.


271
00:12:09,796 --> 00:12:13,166 align:center
Using the MXSignpostAnimation-
IntervalBegin API,


272
00:12:13,166 --> 00:12:15,135 align:center
I'll be able
to strategically mark


273
00:12:15,135 --> 00:12:17,804 line:0
the beginning
of custom animations.


274
00:12:17,804 --> 00:12:20,040 line:0
Using the MXSignpost end API,


275
00:12:20,040 --> 00:12:22,576 align:center
I can mark the end
of the animation


276
00:12:22,576 --> 00:12:26,079 align:center
and collect hitch-rate telemetry
during that interval.


277
00:12:26.079 --> 00:12:28.215 line:-2 align:center
These two functions
will not only capture


278
00:12:28.215 --> 00:12:30.751 line:-2 align:center
granular performance data
for this interval,


279
00:12:30,751 --> 00:12:34,054 line:-2
but will also capture
any hitches that occur.


280
00:12:34,054 --> 00:12:35,656 align:center
To learn more about how


281
00:12:35,656 --> 00:12:37,424 line:0
to understand
and eliminate hangs,


282
00:12:37,424 --> 00:12:39,560 line:0
I recommend checking out


283
00:12:39,560 --> 00:12:41,762 align:center
the "Understand and Eliminate
Hangs from your App" talk


284
00:12:41,762 --> 00:12:43,330 align:center
this year.


285
00:12:43,330 --> 00:12:45,332 align:center
For in-depth details
on how to identify


286
00:12:45,332 --> 00:12:48,001 align:center
scroll hitch issues,
I recommend checking out


287
00:12:48,001 --> 00:12:50,437 align:center
the "Eliminate Hitches
Using XCTest" talk


288
00:12:50,437 --> 00:12:54,741 line:0
and the "Explore UI Animation
Hitches and the Render Loop"


289
00:12:54,741 --> 00:12:56,810 align:center
tech talks from 2020.


290
00:12:56,810 --> 00:12:59,146 line:-2
We're approaching
the halfway mark now


291
00:12:59.146 --> 00:13:01.615 line:-2 align:center
as we now move on
to discussing Disk Writes.


292
00:13:01,615 --> 00:13:04,318 line:-2
Writing to disk can wear out
my users' NAND,


293
00:13:04.318 --> 00:13:06.954 line:-2 align:center
which will lead
to poor device health.


294
00:13:06,954 --> 00:13:09,056 line:-1
Writes also take a lot of time


295
00:13:09,056 --> 00:13:11,992 line:-2
and can lead
to poor user experience


296
00:13:11,992 --> 00:13:14,561 line:-2
and slow performance
if done frequently,


297
00:13:14.561 --> 00:13:17.531 line:-2 align:center
so it's important
to batch these writes.


298
00:13:18,031 --> 00:13:21,001 line:-2
Before releasing my app version,
I can profile my app


299
00:13:21.001 --> 00:13:24.204 line:-2 align:center
using the File Activity template
in Instruments.


300
00:13:24,204 --> 00:13:27,641 line:-2
This records file system use
in the form of system calls,


301
00:13:27.641 --> 00:13:30.677 line:-2 align:center
so I can easily identify
places in my app's code


302
00:13:30.677 --> 00:13:33.347 line:-2 align:center
where I'm accessing
the file system.


303
00:13:33.347 --> 00:13:35.282 line:-2 align:center
There are many ways
to be good citizens


304
00:13:35,282 --> 00:13:37,818 line:-2
of the system
and limit writing to disk.


305
00:13:37.818 --> 00:13:40.654 line:-2 align:center
Some common ones are
batching your write operations,


306
00:13:40.654 --> 00:13:43.423 line:-2 align:center
using Core Data
for frequently-changing data,


307
00:13:43,423 --> 00:13:46,593 line:-2
and avoiding rapid file
creation and deletion.


308
00:13:46.593 --> 00:13:49.496 line:-1 align:center
In addition to profiling my app,


309
00:13:49.496 --> 00:13:52.332 line:-2 align:center
I can also write
performance tests with XCTest


310
00:13:52,332 --> 00:13:54,368 line:-2
to measure the disk usage
of my app


311
00:13:54,368 --> 00:13:56,770 line:-2
to prevent code
with excessive Disk Writes


312
00:13:56.770 --> 00:13:59.206 line:-1 align:center
from running on user devices.


313
00:13:59.206 --> 00:14:01.575 line:-2 align:center
This is as simple
as passing an instance


314
00:14:01.575 --> 00:14:03.610 line:-1 align:center
of XCTStorageMetric


315
00:14:03,610 --> 00:14:05,979 line:-1
to the measureWithMetric API


316
00:14:05.979 --> 00:14:09.316 line:-2 align:center
and then invoking the code
that writes to disk.


317
00:14:09,316 --> 00:14:11,285 line:-2
The test measures
the amount of data


318
00:14:11,285 --> 00:14:13,587 line:-2
written to disk
by the code in the block


319
00:14:13.587 --> 00:14:16.490 line:-2 align:center
and shows me the result
within Xcode itself.


320
00:14:16,490 --> 00:14:19,459 line:-2
I can set a baseline
of the amount of data


321
00:14:19.459 --> 00:14:21.595 line:-1 align:center
I expect to be written to disk


322
00:14:21.595 --> 00:14:25.499 line:-2 align:center
so that the test fails if the
code in the block exceeds that.


323
00:14:25,499 --> 00:14:27,167 line:-1
This will help me ensure


324
00:14:27,167 --> 00:14:30,003 line:-2
that I'm not putting out
any buggy code.


325
00:14:30.637 --> 00:14:33.106 line:-2 align:center
If I've already released
a version of my app


326
00:14:33.106 --> 00:14:35.976 line:-2 align:center
with high Disk Writes,
I can use the Organizer


327
00:14:35.976 --> 00:14:39.213 line:-2 align:center
to track its performance
on user devices.


328
00:14:39.213 --> 00:14:41.348 line:-2 align:center
The Disk Writes metric
shows me the trend


329
00:14:41.348 --> 00:14:44.651 line:-2 align:center
of how many writes the current
version of my app is doing


330
00:14:44,651 --> 00:14:47,521 line:-2
compared to the previously
released versions.


331
00:14:47.521 --> 00:14:50.424 line:-2 align:center
Spikes in the graph can
indicate that my app has bugs


332
00:14:50,424 --> 00:14:52,893 line:-2
that are causing
a high amount of writes.


333
00:14:52,893 --> 00:14:55,629 line:-2
I should identify
the top sources of these writes,


334
00:14:55,629 --> 00:14:59,433 line:-2
understand them,
and look for ways reduce them.


335
00:15:00,200 --> 00:15:02,269 line:-2
I can look for the sources
of these writes


336
00:15:02.269 --> 00:15:05.372 line:-2 align:center
by taking a look
at the Disk Writes Reports.


337
00:15:05,372 --> 00:15:07,608 line:-2
These are a collection
of exception reports


338
00:15:07.608 --> 00:15:09.343 line:-1 align:center
that are generated when my app


339
00:15:09.343 --> 00:15:12.980 line:-2 align:center
writes more than 1 GB
in a 24-hour period.


340
00:15:12,980 --> 00:15:15,215 line:-2
The stack trace shows me
where in my code


341
00:15:15.215 --> 00:15:17.284 line:-1 align:center
I was doing excessive writes,


342
00:15:17,284 --> 00:15:20,120 line:-1
and, new in Xcode 13,


343
00:15:20,120 --> 00:15:23,490 line:-2
I can also get additional
details called Insights,


344
00:15:23,490 --> 00:15:26,193 line:-2
which point me
to some easy optimizations


345
00:15:26.193 --> 00:15:29.196 line:-2 align:center
I can make to be
a good citizen of the system


346
00:15:29.196 --> 00:15:31.732 line:-2 align:center
and reduce some
of the writes in my app.


347
00:15:31.732 --> 00:15:34.635 line:-2 align:center
All of this data
is now also available to me


348
00:15:34,635 --> 00:15:37,137 line:-2
through the App Store
Connect API.


349
00:15:37,137 --> 00:15:40,007 line:0
I can also obtain
these reports in MetricKit


350
00:15:40,007 --> 00:15:42,576 align:center
at the time they occur
in my application.


351
00:15:42,576 --> 00:15:45,612 align:center
If I'm using MetricKit
to monitor my app's disk usage,


352
00:15:45,612 --> 00:15:48,182 line:0
I can book-end
critical Disk Write paths


353
00:15:48,182 --> 00:15:50,150 line:0
with MXSignpost intervals


354
00:15:50,150 --> 00:15:52,286 align:center
to collect
more granular telemetry,


355
00:15:52,286 --> 00:15:56,023 align:center
which can help me discover
opportunities for optimization.


356
00:15:56,023 --> 00:15:58,825 line:0
To learn more about how
to seamlessly identify


357
00:15:58,825 --> 00:16:00,460 line:0
and resolve Disk Write issues,


358
00:16:00,460 --> 00:16:02,863 align:center
be sure to tune in
to the "Diagnose Power


359
00:16:02,863 --> 00:16:06,567 line:0
and Performance Regressions
in your App" talk this year.


360
00:16:06.567 --> 00:16:08.268 line:-1 align:center
As we approach the next stop,


361
00:16:08.268 --> 00:16:11.471 line:-2 align:center
we'll be discussing
launch time and terminations.


362
00:16:11,471 --> 00:16:13,440 line:-2
Launch time
is the amount of time


363
00:16:13,440 --> 00:16:16,443 line:-2
between when the user
taps your app icon


364
00:16:16.443 --> 00:16:19.446 line:-2 align:center
and when the first frame
gets rendered in your app.


365
00:16:20.814 --> 00:16:23.150 line:-1 align:center
If your user spends a long time


366
00:16:23.150 --> 00:16:24.918 line:-1 align:center
waiting for your app to launch,


367
00:16:24.918 --> 00:16:28.522 line:-2 align:center
that can lead to unintentional
frustration for the user,


368
00:16:28,522 --> 00:16:30,123 line:-1
and extended launch times


369
00:16:30,123 --> 00:16:33,060 line:-2
can lead to the system
terminating your app.


370
00:16:33.060 --> 00:16:35.462 line:-2 align:center
When the system
terminates your app,


371
00:16:35.462 --> 00:16:38.065 line:-2 align:center
your user will experience
the entire launch flow


372
00:16:38.065 --> 00:16:40.267 line:-2 align:center
from the beginning,
which takes much longer


373
00:16:40.267 --> 00:16:42.436 line:-2 align:center
than resuming
from a background running state.


374
00:16:44.204 --> 00:16:46.807 line:-2 align:center
Process exits can happen
for many different reasons,


375
00:16:46,807 --> 00:16:49,409 line:-2
like hitting and exceeding
the system memory limit


376
00:16:49,409 --> 00:16:51,512 line:-1
or timing out on launch.


377
00:16:53.080 --> 00:16:56.550 line:-2 align:center
Every time your app terminates
for one of these reasons,


378
00:16:56.550 --> 00:16:58.952 line:-2 align:center
it goes through
the full launch flow


379
00:16:58.952 --> 00:17:01.722 line:-2 align:center
the next time your user
taps your app icon,


380
00:17:01.722 --> 00:17:04.258 line:-2 align:center
and that not only
takes a long time,


381
00:17:04,258 --> 00:17:06,660 line:-2
but is also
a frustrating experience,


382
00:17:06.660 --> 00:17:08.929 line:-2 align:center
especially if it's
happening frequently.


383
00:17:11.231 --> 00:17:13.300 line:-1 align:center
If you're not restoring state,


384
00:17:13.300 --> 00:17:15.936 line:-2 align:center
this can also add
to the frustration of a user


385
00:17:15.936 --> 00:17:17.638 line:-1 align:center
having to find their place again


386
00:17:17.638 --> 00:17:19.373 line:-1 align:center
or recreate lost work.


387
00:17:20.807 --> 00:17:23.544 line:-2 align:center
I just released
a new version of my app


388
00:17:23.544 --> 00:17:25.379 line:-2 align:center
with a feature
that allows my users


389
00:17:25.379 --> 00:17:29.550 line:-2 align:center
to add pictures and detailed
recipes for their meals.


390
00:17:29,550 --> 00:17:32,186 line:-2
Let's see what the launch time
for my app looks like


391
00:17:32.186 --> 00:17:35.155 line:-2 align:center
with this new feature
and what it looked like before.


392
00:17:36.657 --> 00:17:39.159 line:-2 align:center
This is what the user will see
when they try to launch


393
00:17:39,159 --> 00:17:42,529 line:-2
my app now that it has
the new feature in it.


394
00:17:42,529 --> 00:17:44,798 line:-2
Notice how much time
was spent attempting


395
00:17:44.798 --> 00:17:47.100 line:-1 align:center
to render the first frame?


396
00:17:47.100 --> 00:17:48.735 line:-1 align:center
My app was suspended


397
00:17:48,735 --> 00:17:51,638 line:-2
before we even had
a chance to use it.


398
00:17:51,638 --> 00:17:54,241 line:-2
In comparison, here's what
the launch looked like


399
00:17:54,241 --> 00:17:56,643 line:-1
before that feature was added.


400
00:17:56,643 --> 00:17:58,979 line:-2
It's almost like my app
anticipated a launch


401
00:17:58.979 --> 00:18:01.815 line:-2 align:center
and had the first frame
ready to display.


402
00:18:01.815 --> 00:18:03.217 line:-1 align:center
From these two examples,


403
00:18:03,217 --> 00:18:06,453 line:-2
I already know that the first
incredibly slow launch


404
00:18:06,453 --> 00:18:08,488 line:-2
is not what I want
my users to remember


405
00:18:08.488 --> 00:18:10.657 line:-1 align:center
when they think of my app.


406
00:18:10.657 --> 00:18:14.261 line:-2 align:center
So I'll need to fix this
as soon as possible.


407
00:18:14.261 --> 00:18:16.597 line:-2 align:center
Since the launch issue
is already in a version


408
00:18:16.597 --> 00:18:18.599 line:-1 align:center
of my app that users are using,


409
00:18:18.599 --> 00:18:20.968 line:-2 align:center
I can start by going
to the Organizer


410
00:18:20,968 --> 00:18:22,970 line:-2
and taking a look
at the Launch Time


411
00:18:22,970 --> 00:18:25,606 line:-1
and new Terminations panes.


412
00:18:25.606 --> 00:18:27.741 line:-2 align:center
Looking at launch times
will give me an idea


413
00:18:27.741 --> 00:18:31.512 line:-2 align:center
of what the average "time
to first frame" of my app is


414
00:18:31,512 --> 00:18:33,413 line:-1
over the last 16 versions,


415
00:18:33.413 --> 00:18:35.449 line:-1 align:center
so I can see how fast it was


416
00:18:35,449 --> 00:18:37,784 line:-1
before my new feature was added.


417
00:18:37.784 --> 00:18:40.120 line:-2 align:center
I can also go
to the Terminations pane


418
00:18:40.120 --> 00:18:42.890 line:-2 align:center
to see how frequently
my app is being terminated


419
00:18:42.890 --> 00:18:46.126 line:-2 align:center
by the system because of
how long it's taking to launch.


420
00:18:47,728 --> 00:18:50,964 line:-2
After looking at the Organizer,
it actually looks like this is


421
00:18:50,964 --> 00:18:54,067 line:-2
a pretty bad bug that was
introduced with my new feature,


422
00:18:54.067 --> 00:18:56.303 line:-2 align:center
and it's hitting
a lot of my users.


423
00:18:56,303 --> 00:19:00,140 line:-2
Let's take a look at how
I can go about fixing this.


424
00:19:00.140 --> 00:19:02.442 line:-1 align:center
I can test this issue at my desk


425
00:19:02.442 --> 00:19:05.112 line:-2 align:center
by using the App Launch template
in Instruments


426
00:19:05,112 --> 00:19:07,948 line:-1
to profile my app's launch time.


427
00:19:07.948 --> 00:19:10.784 line:-2 align:center
This template runs my app
for five seconds,


428
00:19:10.784 --> 00:19:13.187 line:-2 align:center
during which it gathers
a time profile


429
00:19:13,187 --> 00:19:16,023 line:-2
and Thread State Trace
of what was going on


430
00:19:16,023 --> 00:19:18,892 line:-2
while the app was launching,
so I can figure out


431
00:19:18.892 --> 00:19:21.528 line:-2 align:center
why the threads were blocked
and fix that.


432
00:19:21.762 --> 00:19:25.365 line:-2 align:center
I can also measure launch times
in a performance XCTest


433
00:19:25.365 --> 00:19:28.735 line:-2 align:center
by using
the XCTApplicationsLaunchMetric


434
00:19:28.735 --> 00:19:31.839 line:-2 align:center
in a measure block similar
to what we saw earlier.


435
00:19:31,839 --> 00:19:34,241 line:-2
If I want to do
my own analytics,


436
00:19:34,241 --> 00:19:36,443 line:-2
with MetricKit implemented
in my app,


437
00:19:36.443 --> 00:19:38.645 line:-2 align:center
I'll receive
termination telemetry


438
00:19:38,645 --> 00:19:41,448 line:-2
as part of the daily
metric payload by default.


439
00:19:41,448 --> 00:19:44,384 align:center
For more information
on state restoration


440
00:19:44,384 --> 00:19:47,354 align:center
to avoid data loss
when your app is terminated,


441
00:19:47,354 --> 00:19:49,756 align:center
check out the "Why is my App
Getting Killed?" talk


442
00:19:49,756 --> 00:19:51,491 line:0
from 2020.


443
00:19:51,491 --> 00:19:53,460 line:-1
Yay, we've done it.


444
00:19:53.460 --> 00:19:56.129 line:-2 align:center
We're at our final stop
before we wrap up our journey.


445
00:19:56,129 --> 00:19:59,566 line:-1
Our final stop is Memory.


446
00:19:59.566 --> 00:20:01.668 line:-1 align:center
Memory is a shared resource


447
00:20:01,668 --> 00:20:04,771 line:-2
between apps, the OS,
and kernel.


448
00:20:04,771 --> 00:20:07,107 line:-2
If your app exceeds
the memory limit,


449
00:20:07.107 --> 00:20:09.243 line:-2 align:center
it will be terminated
by the system,


450
00:20:09,243 --> 00:20:11,645 line:-2
and the next time
the user goes to launch it,


451
00:20:11.645 --> 00:20:14.615 line:-2 align:center
it'll launch from the beginning,
which takes much longer


452
00:20:14.615 --> 00:20:17.050 line:-2 align:center
than resuming from
a background running state.


453
00:20:17,050 --> 00:20:20,153 line:-2
The new feature in my app
allows developers


454
00:20:20.153 --> 00:20:22.756 line:-2 align:center
to add pictures and descriptions
to their meals,


455
00:20:22,756 --> 00:20:24,391 line:-2
which means that
there's a chance


456
00:20:24.391 --> 00:20:26.727 line:-2 align:center
that the memory use
gets a little high.


457
00:20:26,727 --> 00:20:28,929 line:-2
If this happens,
there's a chance


458
00:20:28.929 --> 00:20:32.332 line:-2 align:center
that my app can get terminated
for exceeding the memory limit,


459
00:20:32.332 --> 00:20:34.468 line:-2 align:center
so I should keep an eye
on the Memory


460
00:20:34.468 --> 00:20:37.471 line:-2 align:center
and Terminations metrics
in the Organizer


461
00:20:37,471 --> 00:20:39,673 line:-2
to make sure
that isn't the case.


462
00:20:39,673 --> 00:20:42,109 line:-2
It looks like
it's not being terminated,


463
00:20:42.109 --> 00:20:44.077 line:-2 align:center
but there's a large spike
in memory use


464
00:20:44.077 --> 00:20:45.779 line:-1 align:center
in this new version of my app,


465
00:20:45.779 --> 00:20:47.614 line:-1 align:center
according to the peak memory


466
00:20:47,614 --> 00:20:50,584 line:-2
and memory at suspension
charts in the Organizer.


467
00:20:51.985 --> 00:20:54.188 line:-2 align:center
I can profile
the memory use of my app


468
00:20:54.188 --> 00:20:56.323 line:-1 align:center
by using the Leaks, Allocations,


469
00:20:56,323 --> 00:20:59,426 line:-2
and VM Tracker templates
in Instruments.


470
00:20:59.426 --> 00:21:01.628 line:-2 align:center
Leaks will examine
my process's heap


471
00:21:01.628 --> 00:21:04.598 line:-1 align:center
and check for leaked memory.


472
00:21:04,598 --> 00:21:06,266 line:-1
Allocations will analyze


473
00:21:06.266 --> 00:21:08.435 line:-1 align:center
the memory life cycle of my app.


474
00:21:08.435 --> 00:21:10.871 line:-2 align:center
And VM Tracker will show
the virtual memory space


475
00:21:10.871 --> 00:21:13.073 line:-1 align:center
of my app over time.


476
00:21:13.073 --> 00:21:16.610 line:-2 align:center
I can also use MetricKit
to get the same information


477
00:21:16.610 --> 00:21:18.212 line:-1 align:center
and run my own analysis on it.


478
00:21:18,212 --> 00:21:21,481 line:0
In addition to using
my daily metric payloads


479
00:21:21,481 --> 00:21:24,685 align:center
that contain termination
and memory telemetry,


480
00:21:24,685 --> 00:21:27,221 line:0
I can also
instrument MXSignposts


481
00:21:27,221 --> 00:21:29,423 line:0
around critical code sections


482
00:21:29,423 --> 00:21:32,926 align:center
to capture more granular
telemetry about memory usage.


483
00:21:33,694 --> 00:21:35,863 line:0
To learn more about detecting
and understanding


484
00:21:35,863 --> 00:21:37,764 line:0
how to resolve
memory regressions


485
00:21:37,764 --> 00:21:40,534 align:center
before they make it into
your application, check out


486
00:21:40,534 --> 00:21:44,204 align:center
the "Detect and Diagnose
Memory Issues" talk this year.


487
00:21:44.204 --> 00:21:46.106 line:-1 align:center
Before I send you on your way,


488
00:21:46.106 --> 00:21:48.242 line:-2 align:center
let's wrap up
what we've seen here today


489
00:21:48.242 --> 00:21:51.478 line:-1 align:center
and go over some next steps.


490
00:21:51.478 --> 00:21:54.114 line:-2 align:center
We understand
how challenging it can be


491
00:21:54,114 --> 00:21:56,950 line:-2
to identify
performance optimizations.


492
00:21:56,950 --> 00:21:58,585 line:-1
Over the last few years,


493
00:21:58.585 --> 00:22:00.687 line:-2 align:center
developers have used
these same tools


494
00:22:00.687 --> 00:22:02.356 line:-1 align:center
that we provide to you


495
00:22:02,356 --> 00:22:04,825 line:-2
to make significant
performance optimizations.


496
00:22:05,959 --> 00:22:08,195 line:-1
A great example is Snapchat,


497
00:22:08.195 --> 00:22:11.164 line:-2 align:center
an app that millions
of people use every day.


498
00:22:11.164 --> 00:22:13.867 line:-2 align:center
Snapchat has
a long-standing dedication


499
00:22:13.867 --> 00:22:16.570 line:-2 align:center
to improving the launch
experience of their app


500
00:22:16,570 --> 00:22:18,372 line:-1
and driving down terminations.


501
00:22:19,573 --> 00:22:22,643 line:-2
In the last year,
we've seen a 99% reduction


502
00:22:22,643 --> 00:22:25,979 line:-2
in undesirable terminations
for Snapchat.


503
00:22:25,979 --> 00:22:27,915 line:-1
We think that's incredible,


504
00:22:27.915 --> 00:22:29.650 line:-1 align:center
and using the performance tools


505
00:22:29.650 --> 00:22:31.685 line:-2 align:center
and data we've
discussed here today,


506
00:22:31.685 --> 00:22:33.921 line:-1 align:center
you can accomplish this too.


507
00:22:34,955 --> 00:22:36,857 align:center
If you're new
to performance tools,


508
00:22:36,857 --> 00:22:39,126 align:center
I recommend taking
a moment to check out


509
00:22:39,126 --> 00:22:42,262 align:center
the "Diagnose Performance Issues
with the Xcode Organizer"


510
00:22:42,262 --> 00:22:45,566 align:center
and "What's New in MetricKit"
talks from 2020,


511
00:22:45,566 --> 00:22:48,802 align:center
as well as the "Identify Trends
with the Power


512
00:22:48,802 --> 00:22:51,171 line:0
and Performance API" talk
from 2020


513
00:22:51,171 --> 00:22:53,440 line:0
and the "Getting Started
with Instruments" talk


514
00:22:53,440 --> 00:22:55,375 line:0
from 2019.


515
00:22:55.375 --> 00:22:58.145 line:-2 align:center
After digging into all
of these metrics and tools,


516
00:22:58,145 --> 00:23:00,180 line:-2
we're hoping that
you're well equipped


517
00:23:00,180 --> 00:23:01,915 line:-1
with the resources you'll need


518
00:23:01.915 --> 00:23:04.918 line:-2 align:center
to ship the most performant apps
in the App Store.


519
00:23:04,918 --> 00:23:07,054 line:-2
Your users will
thank you for this


520
00:23:07,054 --> 00:23:09,756 line:-2
as they enjoy
a seamless user experience.


521
00:23:09.756 --> 00:23:12.559 line:-2 align:center
There was a lot
of material covered here,


522
00:23:12,559 --> 00:23:14,795 line:-2
so as a fun exercise,
I recommend


523
00:23:14.795 --> 00:23:18.232 line:-1 align:center
you use the Xcode Organizer


524
00:23:18,232 --> 00:23:22,169 line:-2
to see trending data
on your app's performance.


525
00:23:22,169 --> 00:23:24,638 line:-2
Explore and play
with the different templates


526
00:23:24.638 --> 00:23:26.773 line:-1 align:center
offered in Instruments.


527
00:23:26.773 --> 00:23:29.309 line:-2 align:center
Challenge yourself
to write XCTests


528
00:23:29.309 --> 00:23:32.613 line:-2 align:center
to catch issues
before they're released.


529
00:23:32,613 --> 00:23:36,416 align:center
And broaden the scope of your
analytics with MetricKit.


530
00:23:37,417 --> 00:23:39,686 line:0
There's so much
our tools have to offer


531
00:23:39,686 --> 00:23:42,422 line:0
when it comes to optimizing
for performance,


532
00:23:42,422 --> 00:23:44,925 line:0
so don't hesitate
to get your hands dirty


533
00:23:44,925 --> 00:23:47,728 line:0
and explore all
that comes with them.


534
00:23:47,728 --> 00:23:50,497 line:-2
Thank you for joining me
on today's journey,


535
00:23:50.497 --> 00:23:54.201 line:-2 align:center
and I hope you have a wonderful
time at this year's conference.


536
00:23:54,201 --> 00:23:57,204 line:0
[upbeat music]

