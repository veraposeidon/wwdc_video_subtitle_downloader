2
00:00:02,002 --> 00:00:09,009 line:-1
[music]


3
00:00:09,042 --> 00:00:11,345 line:-1
[Egor] Hi! My name is Egor,


4
00:00:11,378 --> 00:00:13,914 line:-2
and today, I’d like to tell you
about all the improvements


5
00:00:13.947 --> 00:00:15.916 line:-2 align:center
and new features
in Metal Debugger.


6
00:00:15,949 --> 00:00:17,985 line:-2
This year,
we are bringing support


7
00:00:18,018 --> 00:00:19,486 line:-1
for more Metal features,


8
00:00:19,520 --> 00:00:22,356 line:-2
such as ray tracing
and function pointers.


9
00:00:23,357 --> 00:00:26,126 line:-2
We have added brand-new
profiling workflows,


10
00:00:26,159 --> 00:00:27,594 line:-1
like the GPU timeline


11
00:00:27,628 --> 00:00:30,130 line:-2
and consistent
GPU performance state,


12
00:00:30,163 --> 00:00:34,034 line:-2
to help you get the most out
of GPUs across Apple platforms.


13
00:00:35.035 --> 00:00:35.903 line:-1 align:center
We’ve made improvements


14
00:00:35.936 --> 00:00:38.906 line:-2 align:center
to other debugging workflows
you know and love,


15
00:00:38,939 --> 00:00:41,775 line:-2
including broader support
for shader validation,


16
00:00:41,808 --> 00:00:44,311 line:-1
and precise capture controls.


17
00:00:45.312 --> 00:00:48.649 line:-2 align:center
We are also introducing
advances in texture compression,


18
00:00:48.682 --> 00:00:53.554 line:-2 align:center
which my colleague
Amanda will talk about later.


19
00:00:53.587 --> 00:00:56.223 line:-2 align:center
First,
let’s talk about ray tracing.


20
00:00:56,957 --> 00:01:00,961 line:-2
Last year, we introduced
a new Metal ray tracing API,


21
00:01:00,994 --> 00:01:03,397 line:-1
and now, in Xcode 13,


22
00:01:03,430 --> 00:01:05,832 line:-1
we support it in Metal Debugger,


23
00:01:05,866 --> 00:01:08,635 line:-2
along with function pointers
and function tables,


24
00:01:08,669 --> 00:01:11,505 line:-2
which bring flexibility
to your shaders.


25
00:01:11.538 --> 00:01:13.140 line:-1 align:center
And dynamic libraries,


26
00:01:13,173 --> 00:01:16,109 line:-2
which give you a way to build
well-abstracted and reusable


27
00:01:16,143 --> 00:01:18,412 line:-1
shader library code.


28
00:01:18,445 --> 00:01:21,081 line:-2
Also, for ray tracing, we are
introducing


29
00:01:21.114 --> 00:01:22.349 line:-1 align:center
a brand-new tool,


30
00:01:22,382 --> 00:01:25,118 line:-2
the Acceleration
Structure Viewer.


31
00:01:25.152 --> 00:01:27.721 line:-2 align:center
Take a look at ray tracing
in the Metal Debugger.


32
00:01:28,555 --> 00:01:30,123 line:-1
I’ve opened a GPU trace


33
00:01:30.157 --> 00:01:33.961 line:-2 align:center
of the ModernRenderer
sample app.


34
00:01:33.994 --> 00:01:36.430 line:-2 align:center
It was modified
to use the Metal ray tracing


35
00:01:36,463 --> 00:01:41,201 line:-2
to achieve effects such as
shadows and ambient occlusion.


36
00:01:41,235 --> 00:01:45,138 line:-2
This encoder creates a beautiful
ray traced shadow map.


37
00:01:45.172 --> 00:01:46.807 line:-1 align:center
I’ve selected a dispatch call


38
00:01:46.840 --> 00:01:49.109 line:-2 align:center
so that you can see
the acceleration structure


39
00:01:49.142 --> 00:01:51.745 line:-1 align:center
in bound resources.


40
00:01:51.778 --> 00:01:53.013 line:-1 align:center
From here,


41
00:01:53.046 --> 00:01:55.082 line:-2 align:center
I will open the acceleration
structure


42
00:01:55.115 --> 00:01:58.886 line:-2 align:center
to go to our new
acceleration structure viewer.


43
00:01:58,919 --> 00:02:02,489 line:-2
Here, you can see the geometry
of the familiar bistro scene


44
00:02:02,523 --> 00:02:07,661 line:-2
on the right,
and its outline on the left.


45
00:02:07,694 --> 00:02:09,363 line:-2
Clicking on an instance
in the scene


46
00:02:09.396 --> 00:02:14.201 line:-2 align:center
will select it in the viewer
and also in the scene outline.


47
00:02:14,234 --> 00:02:16,069 line:-2
You can see the transformation
matrix


48
00:02:16,103 --> 00:02:20,107 line:-2
and other instance properties
by expanding it.


49
00:02:20,140 --> 00:02:22,776 line:-2
You can also select
an individual geometry


50
00:02:22.809 --> 00:02:24.344 line:-1 align:center
by holding the Option key


51
00:02:24.378 --> 00:02:26.914 line:-2 align:center
while clicking
in the scene viewer.


52
00:02:26.947 --> 00:02:29.616 line:-2 align:center
This will also select it
in the scene outline,


53
00:02:29,650 --> 00:02:30,984 line:-1
and vice versa.


54
00:02:32,986 --> 00:02:35,722 line:-2
You can also see the relevant
intersection functions


55
00:02:35.756 --> 00:02:37.424 line:-2 align:center
used with
the acceleration structure


56
00:02:37,457 --> 00:02:40,928 line:-1
right here in the viewer.


57
00:02:40,961 --> 00:02:42,629 line:-2
But the Acceleration
Structure Viewer


58
00:02:42.663 --> 00:02:46.200 line:-2 align:center
can do much more
than simply display geometry.


59
00:02:46,233 --> 00:02:47,568 line:-1
Here on the bottom-right,


60
00:02:47,601 --> 00:02:50,003 line:-2
you will also find
a number of highlighting modes


61
00:02:50.037 --> 00:02:52.072 line:-2 align:center
that will help you visualize
some of the properties


62
00:02:52,105 --> 00:02:54,408 line:-1
of your scene.


63
00:02:54.441 --> 00:02:55.742 line:-1 align:center
For example,


64
00:02:55.776 --> 00:02:57.744 line:-2 align:center
the bounding volume
traversals mode


65
00:02:57,778 --> 00:03:01,481 line:-2
can help you visualize
the complexity of your geometry.


66
00:03:01,515 --> 00:03:03,717 line:-1
A deeper blue color shows areas


67
00:03:03,750 --> 00:03:05,686 line:-2
where the bounding
volume hierarchy


68
00:03:05,719 --> 00:03:08,388 line:-2
is more computationally
expensive to traverse


69
00:03:08,422 --> 00:03:11,091 line:-1
relative to other parts of it.


70
00:03:11.124 --> 00:03:13.527 line:-2 align:center
For all of the modes,
we have this small view


71
00:03:13,560 --> 00:03:15,162 line:-2
that shows
the relevant information


72
00:03:15.195 --> 00:03:18.565 line:-2 align:center
when you hover over
different parts of your scene.


73
00:03:18,599 --> 00:03:22,102 line:-2
Here, it displays the number
of bounding box traversals


74
00:03:22,135 --> 00:03:24,271 line:-1
and primitive intersections.


75
00:03:25.272 --> 00:03:27.207 line:-1 align:center
To give you more flexibility,


76
00:03:27,241 --> 00:03:30,077 line:-2
we also included
traversal settings.


77
00:03:30.110 --> 00:03:31.912 line:-1 align:center
With them, you can configure


78
00:03:31,945 --> 00:03:34,181 line:-2
the acceleration
structure viewer,


79
00:03:34,214 --> 00:03:35,949 line:-2
using same properties
you can find


80
00:03:35,983 --> 00:03:39,086 line:-2
on an intersector object
inside your shaders.


81
00:03:40,087 --> 00:03:41,555 line:-2
There’s so much more
to talk about


82
00:03:41.588 --> 00:03:43.123 line:-1 align:center
when it comes to ray tracing.


83
00:03:43,690 --> 00:03:46,927 align:center
If you’d like to learn more,
check this year’s session


84
00:03:46,960 --> 00:03:50,664 line:0
“Explore hybrid rendering
with Metal ray tracing.”


85
00:03:50,697 --> 00:03:54,034 align:center
And if you want to know more
about the API in general,


86
00:03:54,067 --> 00:03:55,536 align:center
check out last year’s talk,


87
00:03:55,569 --> 00:03:58,005 line:0
“Discover ray tracing
with Metal.”


88
00:03:58,338 --> 00:04:00,841 line:-2
Next,
let’s talk about profiling.


89
00:04:01,408 --> 00:04:04,178 line:-2
Profiling your app
is an important step,


90
00:04:04,211 --> 00:04:07,814 line:-2
and we already have a lot
of great tools at your disposal.


91
00:04:07.848 --> 00:04:10.317 line:-2 align:center
For example,
using the Metal system


92
00:04:10,350 --> 00:04:11,752 line:-1
trace in instruments,


93
00:04:11,785 --> 00:04:13,420 line:-1
you can explore a timeline view


94
00:04:13,453 --> 00:04:15,622 line:-1
that shows CPU and GPU durations


95
00:04:15.656 --> 00:04:17.791 line:-1 align:center
for different rendering stages,


96
00:04:17,824 --> 00:04:20,961 line:-2
GPU counters,
and shader timelines.


97
00:04:20,994 --> 00:04:23,063 line:-1
And in the Metal Debugger,


98
00:04:23.096 --> 00:04:25.866 line:-2 align:center
GPU counters show a rich set of
measurements


99
00:04:25,899 --> 00:04:27,868 line:-1
directly from the GPU,


100
00:04:27.901 --> 00:04:31.338 line:-1 align:center
either per encoder or per draw.


101
00:04:31,371 --> 00:04:32,806 line:-1
Both are excellent tools,


102
00:04:32,840 --> 00:04:36,643 line:-2
which provide complementary
views of your app’s performance.


103
00:04:36,677 --> 00:04:40,614 line:-2
But aligning those views
may take additional effort.


104
00:04:40.647 --> 00:04:42.482 line:-2 align:center
So, that’s why
I’m excited to show you


105
00:04:42,516 --> 00:04:44,785 line:-1
a new GPU profiling tool


106
00:04:44,818 --> 00:04:46,854 line:-1
that combines Metal system trace


107
00:04:46,887 --> 00:04:49,623 line:-2
and GPU counters
in a unified experience.


108
00:04:50,457 --> 00:04:53,694 line:-2
Introducing GPU Timeline
in Metal Debugger,


109
00:04:53,727 --> 00:04:57,831 line:-2
a new tool designed
specifically for Apple GPUs.


110
00:04:57.865 --> 00:04:59.566 line:-2 align:center
It gives you
a different perspective


111
00:04:59.600 --> 00:05:01.301 line:-1 align:center
on the performance data,


112
00:05:01,335 --> 00:05:04,238 line:-2
and it can help you find
potential points of optimization


113
00:05:04,271 --> 00:05:06,707 line:-1
in your app.


114
00:05:06,740 --> 00:05:08,575 line:-2
Let’s walk through
this latest addition


115
00:05:08.609 --> 00:05:11.011 line:-1 align:center
to our suite of profiling tools.


116
00:05:12.012 --> 00:05:13.981 line:-1 align:center
The GPU Timeline is available


117
00:05:14.014 --> 00:05:16.283 line:-1 align:center
under the Performance panel.


118
00:05:16.316 --> 00:05:18.585 line:-2 align:center
You can find it
in the debug navigator


119
00:05:18.619 --> 00:05:21.955 line:-2 align:center
after you’ve captured
a frame from your app.


120
00:05:21,989 --> 00:05:24,224 line:-2
When you open
the Performance panel,


121
00:05:24,258 --> 00:05:26,393 line:-2
you’ll be greeted
by a set of different tracks


122
00:05:26.426 --> 00:05:28.495 line:-1 align:center
laid out in parallel.


123
00:05:28,529 --> 00:05:30,797 line:-2
Before we continue,
I want to explain


124
00:05:30.831 --> 00:05:33.133 line:-2 align:center
why encoder tracks
are in parallel.


125
00:05:33,166 --> 00:05:35,302 line:-1
On Apple GPUs,


126
00:05:35,335 --> 00:05:38,639 line:-2
vertex and fragment stages
of different render passes,


127
00:05:38,672 --> 00:05:42,843 line:-2
and also compute dispatches,
can run simultaneously.


128
00:05:42,876 --> 00:05:45,879 line:-2
This is enabled
by Apple GPU architecture


129
00:05:45.913 --> 00:05:47.514 line:-1 align:center
and use of rendering technique


130
00:05:47,548 --> 00:05:50,284 line:-2
called “tile-based
deferred rendering.”


131
00:05:50,317 --> 00:05:53,086 line:-2
We thought it is important
for you to be able to see this


132
00:05:53.120 --> 00:05:57.424 line:-2 align:center
parallel nature of Apple GPUs
in the context of your app.


133
00:05:57.457 --> 00:06:00.260 line:-2 align:center
And that’s where GPU Timeline
comes in handy.


134
00:06:00.961 --> 00:06:02.563 line:-1 align:center
At the top, you can see


135
00:06:02,596 --> 00:06:06,700 line:-2
the Vertex, Fragment,
and Compute encoder timelines,


136
00:06:06,733 --> 00:06:09,002 line:-2
with each encoder
showing the resources it uses


137
00:06:09,036 --> 00:06:10,404 line:-1
at a quick glance.


138
00:06:10,437 --> 00:06:12,372 line:-1
Below the encoders,


139
00:06:12,406 --> 00:06:17,110 line:-2
you will find Occupancy,
Bandwidth, and limiter counters.


140
00:06:17,144 --> 00:06:20,414 line:-2
Let’s take a closer look
at the encoder timeline.


141
00:06:21,415 --> 00:06:23,217 line:-2
You can expand
each encoder track


142
00:06:23.250 --> 00:06:26.320 line:-2 align:center
to see an aggregated
shader timeline.


143
00:06:27.321 --> 00:06:29.489 line:-2 align:center
Expanding the timeline
even further


144
00:06:29.523 --> 00:06:31.325 line:-2 align:center
will show you
each individual shader


145
00:06:31,358 --> 00:06:33,227 line:-1
in a waterfall-like fashion.


146
00:06:35,229 --> 00:06:38,232 line:-2
It’s easy to navigate
the encoders.


147
00:06:38.265 --> 00:06:40.033 line:-1 align:center
Select an encoder track


148
00:06:40.067 --> 00:06:43.337 line:-2 align:center
to see a list of all
the encoders on the right.


149
00:06:43.370 --> 00:06:48.075 line:-2 align:center
There, you can sort them
by their average duration.


150
00:06:48,108 --> 00:06:50,811 line:-2
Clicking on an individual
encoder in the timeline


151
00:06:50,844 --> 00:06:54,548 line:-2
will show you more information
about it in the sidebar.


152
00:06:54,581 --> 00:06:56,617 line:-1
For example, here you can see


153
00:06:56,650 --> 00:06:59,319 line:-2
the attachments
for this render command encoder.


154
00:07:01.321 --> 00:07:04.658 line:-2 align:center
You may have noticed
that when you select an encoder,


155
00:07:04.691 --> 00:07:06.126 line:-1 align:center
time ranges where it’s active


156
00:07:06,159 --> 00:07:09,463 line:-2
become highlighted
across all the tracks.


157
00:07:09.496 --> 00:07:11.698 line:-2 align:center
With this,
you can easily examine


158
00:07:11.732 --> 00:07:13.800 line:-1 align:center
how different stages overlap,


159
00:07:13,834 --> 00:07:17,037 line:-2
and also correlate
counter values for the encoder.


160
00:07:18,505 --> 00:07:20,774 line:-2
Moving away
from the timeline view,


161
00:07:20.807 --> 00:07:22.643 line:-1 align:center
you can access the GPU counters


162
00:07:22.676 --> 00:07:25.179 line:-2 align:center
by switching
to the Counters tab,


163
00:07:25.212 --> 00:07:28.382 line:-2 align:center
or you can just open encoder’s
context menu


164
00:07:28,415 --> 00:07:30,784 line:-2
and reveal it
in Counters from there.


165
00:07:31,985 --> 00:07:36,356 line:-2
And this is just a sneak
peek at the GPU Timeline.


166
00:07:36,390 --> 00:07:38,559 line:-2
To learn more
about using Metal Debugger


167
00:07:38,592 --> 00:07:40,627 line:-2
to understand
your app’s performance,


168
00:07:40,661 --> 00:07:42,429 line:-1
check out this year’s session


169
00:07:42,462 --> 00:07:45,098 line:-2
“Optimize high-end games
for Apple GPUs.”


170
00:07:47.100 --> 00:07:50.737 line:-2 align:center
Now that I’ve showed you
a new way to profile your app,


171
00:07:50.771 --> 00:07:52.606 line:-1 align:center
it’s important to understand


172
00:07:52,639 --> 00:07:55,142 line:-2
that its performance
depends on several factors.


173
00:07:56,476 --> 00:07:58,345 line:-1
When we are talking about Metal,


174
00:07:58.378 --> 00:08:02.616 line:-2 align:center
the GPU performance state
is a very important factor.


175
00:08:02,649 --> 00:08:04,885 line:-2
It’s managed
by the operating system,


176
00:08:04,918 --> 00:08:07,054 line:-2
which will lower
or raise the state


177
00:08:07,087 --> 00:08:09,022 line:-1
depending on device thermals,


178
00:08:09,056 --> 00:08:11,925 line:-2
system settings,
GPU utilization,


179
00:08:11,959 --> 00:08:13,527 line:-1
and other parameters.


180
00:08:14.528 --> 00:08:16.263 line:-1 align:center
These state changes can affect


181
00:08:16,296 --> 00:08:19,099 line:-2
profiling results
you are seeing.


182
00:08:20,100 --> 00:08:22,402 line:-2
This year,
we are introducing new ways


183
00:08:22,436 --> 00:08:26,073 line:-2
for you to profile your app
with more consistent results.


184
00:08:26,106 --> 00:08:29,009 line:-2
We have added ways
for you to see and change


185
00:08:29.042 --> 00:08:30.611 line:-1 align:center
the GPU performance state


186
00:08:30.644 --> 00:08:33.413 line:-2 align:center
across our whole suite
of Metal tools,


187
00:08:33.447 --> 00:08:36.316 line:-2 align:center
starting with Instruments
and Metal system trace


188
00:08:36.350 --> 00:08:39.286 line:-1 align:center
for live performance recordings,


189
00:08:39,319 --> 00:08:41,088 line:-1
continuing with Metal Debugger,


190
00:08:41,121 --> 00:08:43,857 line:-1
for profiling GPU traces,


191
00:08:43,891 --> 00:08:46,960 line:-2
and finally,
Device conditions in Xcode,


192
00:08:46,994 --> 00:08:49,730 line:-1
for general use cases.


193
00:08:49,763 --> 00:08:52,966 line:-2
First,
let’s talk about Instruments.


194
00:08:53,000 --> 00:08:56,870 line:-2
This year, we’ve added a track
for GPU performance state


195
00:08:56,904 --> 00:08:59,640 line:-1
to the Metal system trace.


196
00:08:59,673 --> 00:09:02,009 line:-2
Use it in conjunction
with the other tracks


197
00:09:02,042 --> 00:09:03,777 line:-2
to correlate
your app’s performance


198
00:09:03,810 --> 00:09:06,213 line:-2
with the device’s
performance state.


199
00:09:06,246 --> 00:09:07,314 line:-1
Keep in mind, though,


200
00:09:07.347 --> 00:09:09.616 line:-2 align:center
that being able to see
the performance state


201
00:09:09,650 --> 00:09:12,419 line:-1
is just part of the equation.


202
00:09:12.452 --> 00:09:14.321 line:-2 align:center
In order to get
profiling results


203
00:09:14.354 --> 00:09:16.857 line:-2 align:center
that are consistent
and reproducible,


204
00:09:16.890 --> 00:09:18.225 line:-1 align:center
you also need a way to set


205
00:09:18.258 --> 00:09:20.494 line:-2 align:center
a GPU performance state
on a device.


206
00:09:21.428 --> 00:09:23.363 line:-1 align:center
New this year is the ability


207
00:09:23,397 --> 00:09:26,099 line:-2
to induce a specific GPU
performance state


208
00:09:26,133 --> 00:09:29,369 line:-2
when you are recording
a trace in Instruments.


209
00:09:29,403 --> 00:09:31,605 line:-1
Simply go to Recording Options,


210
00:09:31,638 --> 00:09:35,742 line:-2
and choose a performance state
before the recording starts.


211
00:09:35.776 --> 00:09:40.147 line:-2 align:center
After that, you can record
the performance trace as usual.


212
00:09:40.180 --> 00:09:42.449 line:-2 align:center
Instruments will induce
the state you chose


213
00:09:42.482 --> 00:09:45.786 line:-2 align:center
for the duration of the trace,
if the device can sustain it.


214
00:09:45.819 --> 00:09:48.255 line:-2 align:center
Sometimes,
you might need to check


215
00:09:48,288 --> 00:09:51,825 line:-2
if an existing Instruments trace
had a GPU performance state


216
00:09:51,859 --> 00:09:54,261 line:-1
induced during recording.


217
00:09:54,294 --> 00:09:55,896 line:-1
You can find this information


218
00:09:55,929 --> 00:09:57,631 line:-2
in the “Recording Settings”
section


219
00:09:57,664 --> 00:10:00,200 line:-1
in the information popover.


220
00:10:01,201 --> 00:10:03,170 line:-1
And now, you know how to view


221
00:10:03,203 --> 00:10:06,573 line:-2
and induce the GPU performance
state from Instruments.


222
00:10:06.607 --> 00:10:08.141 line:-1 align:center
The second way to leverage


223
00:10:08,175 --> 00:10:10,611 line:-2
a consistent
GPU performance state


224
00:10:10.644 --> 00:10:12.779 line:-1 align:center
is by using Metal Debugger.


225
00:10:12.813 --> 00:10:17.150 line:-2 align:center
By default, when you capture
a GPU trace of your app,


226
00:10:17.184 --> 00:10:20.153 line:-2 align:center
Xcode will profile
the trace for you.


227
00:10:20.187 --> 00:10:22.890 line:-2 align:center
And it will do so using
the same performance state


228
00:10:22.923 --> 00:10:26.360 line:-2 align:center
the device was in
at the time of the capture.


229
00:10:26.393 --> 00:10:28.328 line:-1 align:center
That state may have fluctuated,


230
00:10:28.362 --> 00:10:31.031 line:-2 align:center
depending on the factors
we mentioned previously.


231
00:10:31.064 --> 00:10:32.533 line:-2 align:center
If, instead,
you would like to select


232
00:10:32,566 --> 00:10:35,335 line:-2
a certain performance state
yourself,


233
00:10:35.369 --> 00:10:38.972 line:-2 align:center
use the Stopwatch button
in the debug bar.


234
00:10:39.006 --> 00:10:40.674 line:-1 align:center
After you make a selection,


235
00:10:40.707 --> 00:10:44.878 line:-2 align:center
Metal Debugger will profile
your GPU trace again.


236
00:10:44.912 --> 00:10:47.381 line:-2 align:center
After it’s done,
the button is highlighted


237
00:10:47.414 --> 00:10:51.752 line:-2 align:center
to reflect that the consistent
performance state was achieved.


238
00:10:51,785 --> 00:10:54,721 line:-2
Also, “Performance”
section on the summary page


239
00:10:54,755 --> 00:10:57,324 line:-2
now shows new
performance data at a glance,


240
00:10:57,357 --> 00:11:00,627 line:-2
as well as the selected
performance state.


241
00:11:00,661 --> 00:11:04,531 line:-2
These two approaches are tied
to the suite of Metal tools.


242
00:11:04.565 --> 00:11:06.733 line:-2 align:center
But sometimes,
you might want to induce


243
00:11:06,767 --> 00:11:08,302 line:-1
a consistent performance state


244
00:11:08.335 --> 00:11:10.938 line:-1 align:center
outside of profiling workflows.


245
00:11:10,971 --> 00:11:13,874 line:-2
The third way to set
a GPU performance state


246
00:11:13.907 --> 00:11:16.043 line:-1 align:center
is through Device conditions.


247
00:11:17.411 --> 00:11:19.646 line:-2 align:center
If you want to test
how your app performs


248
00:11:19,680 --> 00:11:22,316 line:-2
under different
GPU performance states,


249
00:11:22,349 --> 00:11:24,885 line:-1
this is the option for you.


250
00:11:24,918 --> 00:11:27,154 line:-1
In Xcode 13, we have added


251
00:11:27,187 --> 00:11:30,691 line:-2
the GPU performance state
device condition.


252
00:11:30,724 --> 00:11:32,726 line:-1
It forces the operating system


253
00:11:32.759 --> 00:11:35.195 line:-2 align:center
to use the specified state on a
device,


254
00:11:35.229 --> 00:11:36.663 line:-1 align:center
as long as it can sustain it


255
00:11:36,697 --> 00:11:38,632 line:-2
and it stays connected
to the Xcode.


256
00:11:39.499 --> 00:11:41.902 line:-2 align:center
You can add this condition
from Xcode,


257
00:11:41,935 --> 00:11:45,372 line:-2
if you go to Window,
Devices and Simulators,


258
00:11:45,405 --> 00:11:47,341 line:-1
choose your device there,


259
00:11:47,374 --> 00:11:49,710 line:-2
then scroll to
the “Device Conditions” section,


260
00:11:49.743 --> 00:11:51.512 line:-2 align:center
and add
a “GPU Performance State”


261
00:11:51,545 --> 00:11:54,615 line:-2
condition
with the desired level.


262
00:11:54,648 --> 00:11:56,316 line:-2
Press Start
when you want to apply


263
00:11:56,350 --> 00:11:59,620 line:-2
the GPU performance state change
on the device.


264
00:11:59,653 --> 00:12:02,322 line:-2
Then, when you are done,
press Stop.


265
00:12:03.323 --> 00:12:06.627 line:-2 align:center
These new ways to see
and change GPU performance state


266
00:12:06.660 --> 00:12:07.895 line:-1 align:center
right from our tools


267
00:12:07.928 --> 00:12:11.365 line:-2 align:center
should help you with profiling
and testing your apps.


268
00:12:11.398 --> 00:12:12.966 line:-2 align:center
And I think
you are going to love


269
00:12:13,000 --> 00:12:14,935 line:-2
our latest additions
and improvements


270
00:12:14,968 --> 00:12:16,603 line:-1
to profiling workflows,


271
00:12:16,637 --> 00:12:20,240 line:-2
and I hope they will help you
make your apps even better.


272
00:12:20.274 --> 00:12:23.243 line:-2 align:center
Now, let’s talk about
some other improvements


273
00:12:23,277 --> 00:12:26,013 line:-2
we are bringing
to Metal Debugger this year.


274
00:12:26.046 --> 00:12:27.881 line:-1 align:center
First, I’ll tell you about


275
00:12:27,915 --> 00:12:30,984 line:-2
improvements
to shader validation.


276
00:12:31,018 --> 00:12:34,521 line:-2
Then, I’ll show you
precise capture controls.


277
00:12:34,555 --> 00:12:36,523 line:-2
And after that,
I’ll give you a look


278
00:12:36,557 --> 00:12:40,093 line:-2
at the new
pipeline state workflows.


279
00:12:40,127 --> 00:12:42,729 line:-2
Finally, I want to introduce
two new features


280
00:12:42,763 --> 00:12:45,566 line:-2
related to shader debugging
and profiling,


281
00:12:45,599 --> 00:12:49,336 line:-2
separate debug information
and selective shader debugging.


282
00:12:50.204 --> 00:12:52.406 line:-1 align:center
Last year, in Xcode 12,


283
00:12:52.439 --> 00:12:54.541 line:-1 align:center
we introduced shader validation,


284
00:12:54,575 --> 00:12:57,878 line:-2
which helps you diagnose
runtime errors on the GPU,


285
00:12:57.911 --> 00:13:00.781 line:-2 align:center
like out of bounds access,
and others.


286
00:13:02,749 --> 00:13:05,552 line:-2
Remember that if shader
validation is enabled,


287
00:13:05,586 --> 00:13:08,689 line:-2
and an encoder raises
a validation error,


288
00:13:08,722 --> 00:13:11,925 line:-2
you will get a runtime issue
in the issue navigator,


289
00:13:11.959 --> 00:13:14.761 line:-2 align:center
showing both
the CPU and GPU backtraces


290
00:13:14,795 --> 00:13:16,763 line:-1
for the call that faulted.


291
00:13:19.766 --> 00:13:23.604 line:-2 align:center
We already have a session that
covers this in a greater detail,


292
00:13:23.637 --> 00:13:26.440 line:-2 align:center
so to learn more about using
shader validation,


293
00:13:26.473 --> 00:13:28.308 line:-2 align:center
check out
last year’s talk, called


294
00:13:28,342 --> 00:13:31,111 line:-2
“Debugging GPU-side
errors in Metal.”


295
00:13:32.112 --> 00:13:34.848 line:-2 align:center
This year, we are extending
shader validation


296
00:13:34,882 --> 00:13:36,984 line:-1
to support more use cases,


297
00:13:37,017 --> 00:13:38,085 line:-1
making it available


298
00:13:38,118 --> 00:13:41,655 line:-2
when you are using
indirect command buffers,


299
00:13:41.688 --> 00:13:43.790 line:-1 align:center
dynamic libraries,


300
00:13:43,824 --> 00:13:46,827 line:-2
and function pointers
and tables.


301
00:13:46.860 --> 00:13:49.463 line:-2 align:center
This should allow you
to use shader validation


302
00:13:49,496 --> 00:13:51,498 line:-2
more extensively
throughout your app


303
00:13:51,532 --> 00:13:53,734 line:-1
during its development.


304
00:13:53,767 --> 00:13:55,802 line:-1
Next, I wanna show you


305
00:13:55,836 --> 00:13:58,138 line:-2
our new precise
capture controls.


306
00:13:58,172 --> 00:14:01,074 line:-2
But first, take a look
at the Capture button,


307
00:14:01,108 --> 00:14:04,444 line:-2
which now
looks like the Metal logo.


308
00:14:04,478 --> 00:14:06,246 line:-1
It’s located on the debug bar,


309
00:14:06.280 --> 00:14:09.016 line:-2 align:center
at the bottom
of the Xcode window.


310
00:14:09.049 --> 00:14:12.519 line:-2 align:center
When you click it,
a new menu appears.


311
00:14:12.553 --> 00:14:16.156 line:-2 align:center
This menu lets you choose
a scope for your capture.


312
00:14:16,190 --> 00:14:18,458 line:-2
The default
is to capture one frame,


313
00:14:18.492 --> 00:14:21.128 line:-2 align:center
but you can specify
how many you want to capture,


314
00:14:21.161 --> 00:14:23.230 line:-1 align:center
up to five.


315
00:14:23,263 --> 00:14:26,533 line:-2
You can also choose to capture
a number of command buffers


316
00:14:26,567 --> 00:14:29,369 line:-2
that have
the same parent device,


317
00:14:29,403 --> 00:14:31,572 line:-1
or a command queue,


318
00:14:31.605 --> 00:14:35.209 line:-2 align:center
as well as those that present
a certain Metal layer,


319
00:14:35,242 --> 00:14:37,744 line:-2
and even custom scopes
that you can define


320
00:14:37,778 --> 00:14:42,783 line:-2
in your app’s code
using MTLCaptureScope API.


321
00:14:42.816 --> 00:14:45.319 line:-2 align:center
These new controls
give you incredible power


322
00:14:45.352 --> 00:14:47.754 line:-2 align:center
out-of-the-box in deciding
how and when


323
00:14:47.788 --> 00:14:50.023 line:-1 align:center
your Metal calls are captured.


324
00:14:51.258 --> 00:14:56.096 line:-2 align:center
Next, let’s talk about Metal
libraries and pipeline states.


325
00:14:56.129 --> 00:15:00.067 line:-2 align:center
These are the essential building
blocks of your Metal app.


326
00:15:00.100 --> 00:15:02.035 line:-1 align:center
And in Xcode 13,


327
00:15:02,069 --> 00:15:03,537 line:-1
we’ve made it easier than ever


328
00:15:03.570 --> 00:15:06.006 line:-2 align:center
to examine all the
pipeline states and libraries


329
00:15:06.039 --> 00:15:07.941 line:-1 align:center
your app is using.


330
00:15:07,975 --> 00:15:10,911 line:-2
Now, let’s see
how it looks in practice.


331
00:15:11,812 --> 00:15:13,914 line:-1
Here, I’ve captured a GPU trace


332
00:15:13.947 --> 00:15:16.850 line:-2 align:center
from a ModernRenderer
sample app.


333
00:15:16,884 --> 00:15:20,287 line:-2
I wanted to see how the
GBuffer pipeline state works,


334
00:15:20,320 --> 00:15:23,290 line:-1
so I selected this draw call.


335
00:15:23,323 --> 00:15:25,292 line:-1
If I look in bound resources,


336
00:15:25,325 --> 00:15:28,562 line:-2
I can now see the pipeline state
which was used.


337
00:15:28,595 --> 00:15:32,432 line:-2
Opening it takes me to
the Pipeline State Viewer.


338
00:15:32,466 --> 00:15:35,169 line:-2
From here,
I can examine the functions


339
00:15:35.202 --> 00:15:39.373 line:-2 align:center
and see other properties the
pipeline state was created with.


340
00:15:39,406 --> 00:15:41,008 line:-1
Further, from the viewer,


341
00:15:41.041 --> 00:15:43.143 line:-2 align:center
I can either check out
the performance data


342
00:15:43,177 --> 00:15:44,945 line:-1
associated with the state,


343
00:15:44,978 --> 00:15:46,713 line:-1
or I can go to Memory Viewer


344
00:15:46,747 --> 00:15:49,016 line:-1
and reveal the state there.


345
00:15:49,049 --> 00:15:50,617 line:-1
In Xcode 13,


346
00:15:50,651 --> 00:15:51,985 line:-1
Memory Viewer now shows


347
00:15:52,019 --> 00:15:53,787 line:-2
how much memory
the pipeline states


348
00:15:53.820 --> 00:15:57.224 line:-1 align:center
are taking up in your app.


349
00:15:57,257 --> 00:15:59,159 line:-2
These are just
some of the additions


350
00:15:59,193 --> 00:16:01,461 line:-2
that make it easier to inspect
pipeline states


351
00:16:01.495 --> 00:16:02.996 line:-1 align:center
across the Metal Debugger


352
00:16:03.030 --> 00:16:06.166 line:-2 align:center
when you’re looking
at GPU traces of your app.


353
00:16:06,200 --> 00:16:09,703 line:-2
Next, let’s talk about
shader debugging and profiling


354
00:16:09,736 --> 00:16:11,605 line:-1
in Metal Debugger.


355
00:16:11,638 --> 00:16:14,408 line:-2
Right now,
if you wanna use these features,


356
00:16:14,441 --> 00:16:16,577 line:-1
you have two choices.


357
00:16:16.610 --> 00:16:18.946 line:-2 align:center
First option
is compiling your libraries


358
00:16:18.979 --> 00:16:20.981 line:-2 align:center
from source code
when the app is running.


359
00:16:21,682 --> 00:16:23,851 line:-1
A second, better option


360
00:16:23.884 --> 00:16:27.588 line:-2 align:center
is building Metallib files
with sources embedded offline,


361
00:16:27.621 --> 00:16:30.357 line:-2 align:center
and then loading those
at runtime.


362
00:16:30.390 --> 00:16:32.492 line:-1 align:center
But then, App Store rules


363
00:16:32.526 --> 00:16:34.094 line:-2 align:center
don’t allow you
to publish your apps


364
00:16:34.127 --> 00:16:37.064 line:-1 align:center
with these debug Metallibs.


365
00:16:37.097 --> 00:16:38.432 line:-1 align:center
All of that means


366
00:16:38,465 --> 00:16:40,934 line:-2
that if you compile
your libraries offline


367
00:16:40.968 --> 00:16:43.504 line:-2 align:center
and you want to be able
to debug your shaders,


368
00:16:43.537 --> 00:16:46.039 line:-1 align:center
you have to compile them twice:


369
00:16:46.073 --> 00:16:50.010 line:-2 align:center
once with sources embedded,
for use during development,


370
00:16:50,043 --> 00:16:54,147 line:-2
and once without sources,
for distribution.


371
00:16:54.181 --> 00:16:56.984 line:-1 align:center
This year, we are changing that.


372
00:16:57,017 --> 00:16:59,620 line:-2
You can now generate
a separate file with sources


373
00:16:59.653 --> 00:17:03.891 line:-2 align:center
and other debugging information
while compiling a Metallib.


374
00:17:03.924 --> 00:17:06.960 line:-2 align:center
These files
have a Metallibsym extension,


375
00:17:06.994 --> 00:17:09.563 line:-2 align:center
and they allow you to debug
and profile shaders


376
00:17:09.596 --> 00:17:11.832 line:-2 align:center
without embedding
additional information


377
00:17:11,865 --> 00:17:14,368 line:-1
in the libraries themselves.


378
00:17:14,401 --> 00:17:17,437 line:-2
The most important benefit
of having them separately,


379
00:17:17,471 --> 00:17:19,773 line:-2
is that now you don’t need
to have two versions


380
00:17:19,806 --> 00:17:21,909 line:-1
of the same Metallib.


381
00:17:21.942 --> 00:17:25.746 line:-2 align:center
Another benefit is that
with these Metallibsym files,


382
00:17:25,779 --> 00:17:27,514 line:-2
you will now be able
to debug shaders


383
00:17:27.548 --> 00:17:29.883 line:-2 align:center
even in release versions
of your app,


384
00:17:29.917 --> 00:17:33.086 line:-2 align:center
without having to compromise
your shader sources.


385
00:17:34,354 --> 00:17:35,956 line:-1
I’ll show you an example


386
00:17:35,989 --> 00:17:38,225 line:-2
of how to compile
a shader source file


387
00:17:38.258 --> 00:17:41.795 line:-2 align:center
into a Metallib with
Metallibsym file alongside it.


388
00:17:42.629 --> 00:17:45.065 line:-2 align:center
I’ll start with xcrun terminal
command


389
00:17:45.098 --> 00:17:48.001 line:-2 align:center
that compiles a Metallib
as normal.


390
00:17:48.035 --> 00:17:50.571 line:-1 align:center
To generate a Metallibsym file,


391
00:17:50.604 --> 00:17:52.339 line:-1 align:center
I simply need to add the flag


392
00:17:52.372 --> 00:17:55.342 line:-2 align:center
“record-sources”
with the “flat” option,


393
00:17:55,375 --> 00:17:58,111 line:-1
and then run the compiler.


394
00:17:58.145 --> 00:18:00.614 line:-2 align:center
Now, when I try
to debug a shader


395
00:18:00,647 --> 00:18:01,515 line:-1
that was compiled


396
00:18:01.548 --> 00:18:03.817 line:-2 align:center
with a separate debug
information file,


397
00:18:03,851 --> 00:18:07,120 line:-1
I’ll be prompted to import it.


398
00:18:07.154 --> 00:18:10.057 line:-2 align:center
Clicking on Import Sources
opens up a dialog


399
00:18:10,090 --> 00:18:11,825 line:-1
that lists all the libraries


400
00:18:11,859 --> 00:18:14,728 line:-2
and whether they have
their source files imported.


401
00:18:15,729 --> 00:18:19,633 line:-2
From here, I can import
any Metallibsym files,


402
00:18:19,666 --> 00:18:22,536 line:-2
and once imported,
the libraries and their sources


403
00:18:22.569 --> 00:18:24.905 line:-1 align:center
will be matched automatically.


404
00:18:25.906 --> 00:18:27.574 line:-1 align:center
When I’m done importing,


405
00:18:27.608 --> 00:18:29.076 line:-1 align:center
I can close the dialog,


406
00:18:29,109 --> 00:18:32,880 line:-2
and now I can see the sources
for the shader and debug it.


407
00:18:34.314 --> 00:18:38.018 line:-2 align:center
There is one last debugging
improvement I wanna show you.


408
00:18:38,051 --> 00:18:40,854 line:-2
It’s called
“selective shader debugging.”


409
00:18:40.888 --> 00:18:43.090 line:-1 align:center
If your app uses large shaders,


410
00:18:43.123 --> 00:18:44.391 line:-1 align:center
you might have noticed


411
00:18:44,424 --> 00:18:47,995 line:-2
that the shader debugging
may take a while to start.


412
00:18:48,028 --> 00:18:49,763 line:-1
To help in such cases,


413
00:18:49,796 --> 00:18:53,333 line:-2
this year, we are bringing
selective shader debugging.


414
00:18:53,367 --> 00:18:55,836 line:-2
It helps you narrow down
the debugging scopes,


415
00:18:55,869 --> 00:18:58,972 line:-2
so you can debug
your shaders quicker.


416
00:18:59,006 --> 00:19:02,709 line:-2
Let’s see it in action
with one of such large shaders.


417
00:19:03,911 --> 00:19:08,081 line:-2
I would like to debug
this GPU ASTCDecoder.


418
00:19:08.115 --> 00:19:11.218 line:-2 align:center
I know that if I tried
to debug this whole kernel,


419
00:19:11,251 --> 00:19:14,955 line:-2
Shader Debugger
would take a long time to start.


420
00:19:14,988 --> 00:19:16,890 line:-2
I wouldn’t want
to wait that long,


421
00:19:16.924 --> 00:19:17.758 line:-1 align:center
so instead,


422
00:19:17,791 --> 00:19:19,560 line:-2
I can narrow down
the debugging scope


423
00:19:19,593 --> 00:19:23,797 line:-2
to just this function,
decodeIntegerSequence.


424
00:19:23,830 --> 00:19:26,033 line:-1
To do so, I can right-click it


425
00:19:26,066 --> 00:19:28,402 line:-1
and select Debug Functions.


426
00:19:28.435 --> 00:19:30.838 line:-2 align:center
This opens
“functions to debug” menu,


427
00:19:30,871 --> 00:19:33,774 line:-2
with the function scope
already selected.


428
00:19:33,807 --> 00:19:37,845 line:-2
Now, the debugger
will start almost instantly.


429
00:19:40,547 --> 00:19:41,949 line:-1
Selective shader debugging


430
00:19:41,982 --> 00:19:43,884 line:-1
is a great way to pinpoint bugs


431
00:19:43,917 --> 00:19:45,853 line:-1
in huge shaders quickly.


432
00:19:45,886 --> 00:19:48,088 line:-2
These are all the Metal tools
improvements


433
00:19:48,121 --> 00:19:50,090 line:-1
I wanted to show you today.


434
00:19:50,123 --> 00:19:53,360 line:-2
And now, Amanda will tell you
about advances we’ve made


435
00:19:53.393 --> 00:19:54.962 line:-1 align:center
in texture compression.


436
00:19:54,995 --> 00:19:56,296 line:-1
Amanda?


437
00:19:56.330 --> 00:19:57.564 line:-1 align:center
[Amanda] Thanks, Egor.


438
00:19:57,598 --> 00:20:00,267 line:-2
I’m going to walk you through
the updates we’ve made this year


439
00:20:00,300 --> 00:20:02,469 line:-1
to texture compression tools.


440
00:20:02.503 --> 00:20:04.137 line:-1 align:center
Before I dive into the tools,


441
00:20:04.171 --> 00:20:05.405 line:-1 align:center
I’m going to briefly discuss


442
00:20:05,439 --> 00:20:08,709 line:-2
the basics of texture
compression on Apple platforms.


443
00:20:08,742 --> 00:20:10,310 line:-2
Texture compression,
in this case,


444
00:20:10.344 --> 00:20:13.480 line:-2 align:center
is fixed-rate, lossy compression
of texture data.


445
00:20:13,514 --> 00:20:15,816 line:-2
This is primarily intended
for offline compression


446
00:20:15,849 --> 00:20:17,184 line:-1
of static texture data,


447
00:20:17.217 --> 00:20:19.520 line:-1 align:center
such as decals or normal maps.


448
00:20:19,553 --> 00:20:22,389 line:-2
While you can compress
dynamic texture data at runtime,


449
00:20:22.422 --> 00:20:24.892 line:-2 align:center
that’s not something
I’m covering today.


450
00:20:24.925 --> 00:20:26.126 line:-1 align:center
Most texture compression


451
00:20:26,159 --> 00:20:28,328 line:-2
works by splitting a texture
into blocks


452
00:20:28,362 --> 00:20:30,998 line:-2
and compressing each block
as a pair of colors.


453
00:20:31,031 --> 00:20:32,666 line:-2
This pair defines
a localized palette,


454
00:20:32.699 --> 00:20:33.800 line:-1 align:center
including other colors


455
00:20:33.834 --> 00:20:35.636 line:-2 align:center
interpolated
from these endpoints,


456
00:20:35,669 --> 00:20:38,872 line:-2
and a per-pixel index
that selects from this palette.


457
00:20:38.906 --> 00:20:40.340 line:-2 align:center
Each format
has different strengths


458
00:20:40.374 --> 00:20:43.377 line:-2 align:center
that suit different kinds
of texture data.


459
00:20:43.410 --> 00:20:44.811 line:-1 align:center
Apple GPUs also support


460
00:20:44,845 --> 00:20:46,346 line:-2
lossless frame-buffer
compression


461
00:20:46.380 --> 00:20:48.048 line:-1 align:center
starting in our A12 devices,


462
00:20:48,081 --> 00:20:50,417 line:-2
and is great
for optimizing bandwidth.


463
00:20:50.450 --> 00:20:51.919 line:-1 align:center
Check out last year’s session


464
00:20:51,952 --> 00:20:54,655 line:-2
“Optimize Metal apps and games
with GPU counters”


465
00:20:54.688 --> 00:20:56.690 line:-2 align:center
to learn more about measuring
the memory bandwidth


466
00:20:56.723 --> 00:20:58.659 line:-1 align:center
the GPU is using for your app.


467
00:20:58.692 --> 00:21:01.495 line:-2 align:center
Another option is to perform
lossless compression


468
00:21:01,528 --> 00:21:02,930 line:-1
of texture files


469
00:21:02.963 --> 00:21:04.865 line:-2 align:center
on top of the GPU texture
compression


470
00:21:04,898 --> 00:21:07,167 line:-2
I’m covering
in this presentation.


471
00:21:07,201 --> 00:21:08,902 line:-2
This can give you additional
reductions


472
00:21:08.936 --> 00:21:11.371 line:-2 align:center
in the size
of your app download.


473
00:21:11.405 --> 00:21:13.240 line:-2 align:center
Now that I’ve defined
texture compression


474
00:21:13,273 --> 00:21:14,408 line:-1
for this talk,


475
00:21:14,441 --> 00:21:15,509 line:-1
I’ll talk about the benefits


476
00:21:15.542 --> 00:21:17.778 line:-2 align:center
texture compression
can bring to your app.


477
00:21:17.811 --> 00:21:19.947 line:-2 align:center
Texture compression
is an important step


478
00:21:19.980 --> 00:21:21.782 line:-1 align:center
in the development of your apps.


479
00:21:21.815 --> 00:21:22.816 line:-1 align:center
In general,


480
00:21:22.850 --> 00:21:24.518 line:-2 align:center
most of the memory footprint of
games


481
00:21:24,551 --> 00:21:26,653 line:-1
consists of textures.


482
00:21:26,687 --> 00:21:29,356 line:-2
Using texture compression
allows you to load more textures


483
00:21:29.389 --> 00:21:30.490 line:-1 align:center
into memory,


484
00:21:30,524 --> 00:21:31,925 line:-1
and use more detailed textures


485
00:21:31,959 --> 00:21:34,928 line:-2
to create more
visually compelling games.


486
00:21:34.962 --> 00:21:36.230 line:-1 align:center
Compression may also allow you


487
00:21:36.263 --> 00:21:39.433 line:-2 align:center
to reduce the size and memory
footprint of your app.


488
00:21:39.466 --> 00:21:41.201 line:-2 align:center
Now that I’ve covered
the basics,


489
00:21:41,235 --> 00:21:43,670 line:-2
I’ll discuss the current state
of texture compression tools


490
00:21:43.704 --> 00:21:45.072 line:-1 align:center
on Apple platforms.


491
00:21:45.105 --> 00:21:48.075 line:-2 align:center
The existing TextureTool
in the iOS SDK


492
00:21:48.108 --> 00:21:50.010 line:-2 align:center
has a relatively
simple pipeline.


493
00:21:50.043 --> 00:21:52.246 line:-2 align:center
TextureTool
reads the input image,


494
00:21:52.279 --> 00:21:54.381 line:-1 align:center
generates mipmaps if desired,


495
00:21:54.414 --> 00:21:56.750 line:-2 align:center
compresses the texture,
block by block,


496
00:21:56.783 --> 00:21:59.653 line:-2 align:center
then writes the results
to a new output file.


497
00:21:59,686 --> 00:22:02,389 line:-2
But as graphics algorithms
increase in complexity,


498
00:22:02,422 --> 00:22:05,125 line:-2
textures need more
advanced processing.


499
00:22:05.158 --> 00:22:07.928 line:-2 align:center
The core of these processes
is performing operations


500
00:22:07,961 --> 00:22:09,730 line:-1
in the correct color space,


501
00:22:09.763 --> 00:22:11.932 line:-2 align:center
while minimizing rounding from
transformations


502
00:22:11.965 --> 00:22:14.168 line:-1 align:center
between numeric precisions.


503
00:22:14.201 --> 00:22:15.335 line:-1 align:center
Understanding this,


504
00:22:15.369 --> 00:22:17.337 line:-2 align:center
we’ve designed a new compression
tool


505
00:22:17.371 --> 00:22:18.772 line:-1 align:center
called TextureConverter


506
00:22:18.805 --> 00:22:20.207 line:-1 align:center
to handle the necessary increase


507
00:22:20,240 --> 00:22:22,376 line:-2
in texture processing
sophistication,


508
00:22:22.409 --> 00:22:24.878 line:-2 align:center
and give you access
to a host of new options.


509
00:22:24,912 --> 00:22:26,280 line:-1
Let’s take a closer look


510
00:22:26.313 --> 00:22:27.247 line:-1 align:center
at how we’ve revamped


511
00:22:27.281 --> 00:22:28.715 line:-1 align:center
the texture processing pipeline


512
00:22:28,749 --> 00:22:30,284 line:-1
on Apple platforms.


513
00:22:31,051 --> 00:22:33,420 line:-2
The texture processing pipeline
has been rebuilt


514
00:22:33.453 --> 00:22:35.522 line:-2 align:center
from the ground up to give you
access


515
00:22:35.556 --> 00:22:37.925 line:-2 align:center
to a fully-featured
texture processing pipeline


516
00:22:37.958 --> 00:22:39.860 line:-1 align:center
with TextureConverter.


517
00:22:39.893 --> 00:22:41.028 line:-1 align:center
TextureConverter leverages


518
00:22:41,061 --> 00:22:43,063 line:-2
a set of industry-recognized
compressors


519
00:22:43,096 --> 00:22:45,766 line:-2
to support a wide range of
compression formats,


520
00:22:45.799 --> 00:22:47.334 line:-2 align:center
and give you the option to
tradeoff


521
00:22:47,367 --> 00:22:50,304 line:-2
between compression speed
and image quality.


522
00:22:50,337 --> 00:22:52,406 line:-2
You can specify
which compressor to use,


523
00:22:52,439 --> 00:22:54,341 line:-2
or allow TextureConverter
to select


524
00:22:54,374 --> 00:22:56,777 line:-2
based on the compression format,
quality level,


525
00:22:56.810 --> 00:22:58.612 line:-1 align:center
and other options.


526
00:22:58,645 --> 00:23:01,648 line:-2
Each stage is now
fully configurable by you,


527
00:23:01,682 --> 00:23:04,351 line:-2
and texture processing
is gamma-aware.


528
00:23:04.384 --> 00:23:07.454 line:-2 align:center
To support integration
into all your content pipelines,


529
00:23:07,487 --> 00:23:10,924 line:-2
TextureConverter is available
for both macOS and Windows,


530
00:23:10.958 --> 00:23:13.327 line:-2 align:center
and is optimized for use
with Apple Silicon.


531
00:23:13.727 --> 00:23:16.396 line:-2 align:center
Let’s step through each stage of
the expanded pipeline,


532
00:23:16,430 --> 00:23:17,564 line:-1
starting with gamma.


533
00:23:17,598 --> 00:23:20,167 line:-2
Gamma correction
is a nonlinear operation


534
00:23:20,200 --> 00:23:22,903 line:-2
to encode and decode
luminance in images.


535
00:23:22,936 --> 00:23:25,572 line:-2
Textures can be encoded
in many gamma spaces.


536
00:23:25.606 --> 00:23:27.708 line:-2 align:center
The best choice is dependent
on the type of data


537
00:23:27.741 --> 00:23:29.243 line:-1 align:center
that the texture represents.


538
00:23:29,276 --> 00:23:32,045 line:-2
Most visual data,
such as decals or light maps,


539
00:23:32,079 --> 00:23:34,381 line:-2
do best when encoded
in a non-linear space,


540
00:23:34,414 --> 00:23:36,283 line:-1
like sRGB.


541
00:23:36.316 --> 00:23:38.519 line:-2 align:center
Non-visual data,
like normal maps,


542
00:23:38.552 --> 00:23:41.088 line:-2 align:center
should be encoded
in linear space.


543
00:23:41.121 --> 00:23:42.623 line:-2 align:center
This choice gives you
more accuracy


544
00:23:42,656 --> 00:23:45,125 line:-2
in the dark areas
where it’s needed.


545
00:23:45,158 --> 00:23:47,227 line:-2
Non-visual data,
like normal maps,


546
00:23:47,261 --> 00:23:49,363 line:-2
should be encoded
in linear space.


547
00:23:49,396 --> 00:23:52,099 line:-2
Compression should be performed
in your target color space,


548
00:23:52.132 --> 00:23:55.602 line:-2 align:center
specified with the “gamma_in”
and “gamma_out” options.


549
00:23:55,636 --> 00:23:57,704 line:-2
You can either
input a float value


550
00:23:57.738 --> 00:23:59.173 line:-1 align:center
for linear gamma space,


551
00:23:59.206 --> 00:24:03.443 line:-2 align:center
or use the string “sRGB”
to specify that color space.


552
00:24:03.477 --> 00:24:05.913 line:-2 align:center
You also have the flexibility
to use these options


553
00:24:05,946 --> 00:24:08,715 line:-2
to convert to a different
target space.


554
00:24:08.749 --> 00:24:11.218 line:-2 align:center
Other operations,
such as mipmap generation,


555
00:24:11,251 --> 00:24:13,220 line:-2
should be performed
in linear space.


556
00:24:13,253 --> 00:24:16,223 line:-2
I’ll walk through the linear
space processing stages now.


557
00:24:17,257 --> 00:24:20,360 line:-2
Now that the input has been
converted to linear gamma space,


558
00:24:20,394 --> 00:24:22,429 line:-2
the linear space operations are
performed


559
00:24:22,462 --> 00:24:24,298 line:-2
before the input texture
is converted


560
00:24:24.331 --> 00:24:26.767 line:-2 align:center
to the specified target
gamma space.


561
00:24:26,800 --> 00:24:29,236 line:-2
The three stages
are physical transforms,


562
00:24:29.269 --> 00:24:30.537 line:-1 align:center
mipmap generation,


563
00:24:30.571 --> 00:24:31.939 line:-1 align:center
and alpha handling,


564
00:24:31.972 --> 00:24:34.274 line:-2 align:center
and some of these
have substages.


565
00:24:34,308 --> 00:24:36,176 line:-2
I’ll start
with physical transforms.


566
00:24:36.210 --> 00:24:39.079 line:-2 align:center
By defining
the maximum size in any axis,


567
00:24:39.112 --> 00:24:40.914 line:-2 align:center
you can downscale your image
as you need


568
00:24:40,948 --> 00:24:43,083 line:-1
for your top-level mipmap.


569
00:24:43.116 --> 00:24:44.885 line:-2 align:center
In this stage,
you also have control


570
00:24:44.918 --> 00:24:48.055 line:-2 align:center
over the resize filter
and resize rounding mode.


571
00:24:48.088 --> 00:24:50.557 line:-2 align:center
The resize filter options use
different algorithms


572
00:24:50,591 --> 00:24:52,793 line:-2
to help you reduce blurriness
of your mipmaps


573
00:24:52,826 --> 00:24:55,729 line:-2
as they go down
in dimension size.


574
00:24:55.762 --> 00:24:56.697 line:-1 align:center
Resize round mode


575
00:24:56,730 --> 00:24:59,066 line:-2
is used in conjunction
with max_extent


576
00:24:59.099 --> 00:25:00.968 line:-1 align:center
when resizing your image.


577
00:25:01.001 --> 00:25:03.036 line:-1 align:center
If max_extent is exceeded,


578
00:25:03.070 --> 00:25:04.571 line:-1 align:center
the source image is resized


579
00:25:04,605 --> 00:25:07,241 line:-2
by maintaining
the original image’s aspect.


580
00:25:07,274 --> 00:25:08,375 line:-1
The specified round mode


581
00:25:08,408 --> 00:25:11,411 line:-2
will be used when finding the
target dimensions.


582
00:25:11.445 --> 00:25:15.215 line:-2 align:center
If you’re unsure which resize
filter or rounding mode to use,


583
00:25:15,249 --> 00:25:19,453 line:-2
we’ve picked defaults
that work well in most cases.


584
00:25:19.486 --> 00:25:21.522 line:-2 align:center
And the flip options
in this stage


585
00:25:21,555 --> 00:25:23,690 line:-2
give you control over
linear transformations


586
00:25:23.724 --> 00:25:27.060 line:-1 align:center
on the X, Y, and Z axes.


587
00:25:27,094 --> 00:25:29,863 line:-2
After transforms
is mipmap generation,


588
00:25:29,897 --> 00:25:34,134 line:-2
used in the majority of common
texture processing situations.


589
00:25:34.168 --> 00:25:37.104 line:-2 align:center
Mipmaps are a precalculated
sequences of images


590
00:25:37.137 --> 00:25:39.606 line:-2 align:center
that reduce in resolution
over the sequence,


591
00:25:39,640 --> 00:25:43,177 line:-2
used to increase rendering speed
and reduce aliasing.


592
00:25:43,210 --> 00:25:44,745 line:-2
The height and width
of each level


593
00:25:44,778 --> 00:25:46,880 line:-2
is a power of two smaller
than the previous level.


594
00:25:48.782 --> 00:25:51.318 line:-2 align:center
When customizing
mipmap generation,


595
00:25:51,351 --> 00:25:53,487 line:-2
specify the maximum number
you want,


596
00:25:53,520 --> 00:25:55,756 line:-1
and which mip filter to use.


597
00:25:55.789 --> 00:25:58.158 line:-2 align:center
TextureConverter
defaults to Kaiser filtering,


598
00:25:58,192 --> 00:26:01,395 line:-2
with options for “box”
and “triangle” filtering.


599
00:26:03,197 --> 00:26:07,467 line:-2
The last stage in linear space
processing is alpha handling.


600
00:26:08,669 --> 00:26:10,971 line:-1
If alpha to coverage is enabled,


601
00:26:11,004 --> 00:26:12,272 line:-1
this is applied first,


602
00:26:12,306 --> 00:26:15,309 line:-2
using the specified
alpha reference value.


603
00:26:15.342 --> 00:26:16.310 line:-1 align:center
Alpha to coverage


604
00:26:16.343 --> 00:26:18.946 line:-2 align:center
replaces alpha blending
with a coverage mask.


605
00:26:18.979 --> 00:26:20.047 line:-1 align:center
When antialiasing


606
00:26:20,080 --> 00:26:22,282 line:-2
or semitransparent textures
are used


607
00:26:22.316 --> 00:26:24.852 line:-2 align:center
this gives you order-independent
transparency,


608
00:26:24,885 --> 00:26:26,787 line:-2
and is
a particularly useful tool


609
00:26:26,820 --> 00:26:29,857 line:-2
for rendering dense greenery
in your game.


610
00:26:29,890 --> 00:26:32,426 line:-2
Afterwards,
the option to discard,


611
00:26:32,459 --> 00:26:36,496 line:-2
preserve, or premultiply
the alpha channel is presented.


612
00:26:36.530 --> 00:26:38.298 line:-1 align:center
In premultiplied alpha,


613
00:26:38.332 --> 00:26:40.267 line:-2 align:center
partly transparent pixels
of your image


614
00:26:40,300 --> 00:26:43,237 line:-2
will be premultiplied
with a matting color.


615
00:26:44.238 --> 00:26:46.940 line:-2 align:center
At the end of the linear
space processing stages,


616
00:26:46.974 --> 00:26:49.142 line:-2 align:center
we’re ready to move back
to the target gamma space


617
00:26:49.176 --> 00:26:51.345 line:-2 align:center
and compress
the processed mip levels.


618
00:26:52,346 --> 00:26:55,916 line:-2
The last step in texture
processing is the compression.


619
00:26:55.949 --> 00:26:57.684 line:-2 align:center
The compression stage
can be divided


620
00:26:57,718 --> 00:27:01,622 line:-2
into two substages,
channel mapping and encoding.


621
00:27:01.655 --> 00:27:03.123 line:-1 align:center
Channel mapping is a technique


622
00:27:03.156 --> 00:27:06.159 line:-2 align:center
to optimize general purpose
texture compression algorithms


623
00:27:06.193 --> 00:27:07.394 line:-1 align:center
for particular data types.


624
00:27:08.495 --> 00:27:11.932 line:-2 align:center
Specifying a channel mapping
in TextureConverter is optional.


625
00:27:11.965 --> 00:27:13.400 line:-1 align:center
If you do want to use it,


626
00:27:13.433 --> 00:27:15.102 line:-2 align:center
TextureConverter
currently supports


627
00:27:15.135 --> 00:27:16.870 line:-1 align:center
two modes of channel mapping,


628
00:27:16.904 --> 00:27:19.940 line:-2 align:center
RGBM encoding
and normal map encoding.


629
00:27:19,973 --> 00:27:22,409 line:-2
I’m going to cover both of these
formats in more depth,


630
00:27:22,442 --> 00:27:24,678 line:-1
starting with RGBM encoding.


631
00:27:24,711 --> 00:27:27,915 line:-2
RGBM encoding is a technique
to compress HDR data


632
00:27:27.948 --> 00:27:29.550 line:-1 align:center
in LDR formats


633
00:27:29.583 --> 00:27:31.885 line:-2 align:center
by storing a multiplier
in the alpha channel


634
00:27:31.919 --> 00:27:35.355 line:-2 align:center
and scaling the RGB channels
by this multiplier.


635
00:27:35.389 --> 00:27:38.425 line:-2 align:center
Here’s an example
HDR image of a classroom.


636
00:27:38.458 --> 00:27:40.561 line:-2 align:center
And here’s the same classroom
image again


637
00:27:40,594 --> 00:27:42,729 line:-2
with the multiplier stored
in the alpha channel


638
00:27:42.763 --> 00:27:44.631 line:-1 align:center
visible in grayscale.


639
00:27:44,665 --> 00:27:46,466 line:-2
I’ll show you how to calculate
the multiplier


640
00:27:46.500 --> 00:27:49.636 line:-2 align:center
to encode to RGBM
with a code example.


641
00:27:49,670 --> 00:27:52,739 line:-2
EncodeRGBM is a simplified
pseudocode function


642
00:27:52.773 --> 00:27:54.842 line:-2 align:center
that I’ll walk you through
to help you understand


643
00:27:54,875 --> 00:27:57,477 line:-2
the mechanics
of encoding to RGBM.


644
00:27:57,511 --> 00:28:00,047 line:-2
This snippet includes
use of RGBM_Range,


645
00:28:00,080 --> 00:28:02,182 line:-2
the brand-new parameter
for setting the range


646
00:28:02,216 --> 00:28:05,252 line:-1
of RGBM and defaults to 6.0.


647
00:28:05.285 --> 00:28:08.088 line:-2 align:center
In order to calculate
the RGBM alpha value,


648
00:28:08,121 --> 00:28:09,723 line:-1
the multiplier,


649
00:28:09.756 --> 00:28:11.225 line:-2 align:center
first, I’ll determine
the maximum


650
00:28:11,258 --> 00:28:15,162 line:-2
of the input texture’s
red, green, and blue channels.


651
00:28:15.195 --> 00:28:18.098 line:-2 align:center
This is done
with Metal’s max3 function.


652
00:28:18,131 --> 00:28:21,568 line:-2
Then this maximum
is divided by RGBM_Range.


653
00:28:21.602 --> 00:28:24.137 line:-2 align:center
In order to calculate
the encoded RGBM’s


654
00:28:24.171 --> 00:28:26.773 line:-2 align:center
red, green, and blue channel
values,


655
00:28:26.807 --> 00:28:29.209 line:-2 align:center
first, the previously calculated
multiplier


656
00:28:29.243 --> 00:28:32.012 line:-2 align:center
is multiplied back
by RGBM_Range,


657
00:28:32.045 --> 00:28:33.714 line:-2 align:center
which was used
to scale the value


658
00:28:33.747 --> 00:28:36.049 line:-2 align:center
for storage
in the alpha channel.


659
00:28:36.083 --> 00:28:38.352 line:-2 align:center
Then, the input texture
is divided


660
00:28:38.385 --> 00:28:41.021 line:-1 align:center
by the final multiplier value.


661
00:28:41.054 --> 00:28:43.090 line:-1 align:center
To decode RGBM in your shader,


662
00:28:43.123 --> 00:28:45.158 line:-1 align:center
you multiply the sample’s RGB


663
00:28:45.192 --> 00:28:46.960 line:-1 align:center
by alpha and the fixed factor,


664
00:28:46,994 --> 00:28:49,096 line:-2
as I showed you
in the encoding function.


665
00:28:49.129 --> 00:28:51.932 line:-2 align:center
I’ll walk through the DecodeRGBM
code snippet


666
00:28:51.965 --> 00:28:53.600 line:-1 align:center
to show you how to do this.


667
00:28:53.634 --> 00:28:55.769 line:-2 align:center
The scaling factor
is recalculated


668
00:28:55.802 --> 00:28:58.438 line:-2 align:center
by multiplying
the RGBM alpha channel,


669
00:28:58,472 --> 00:29:02,075 line:-2
where the multiplier is stored,
by RGBM_Range.


670
00:29:02,109 --> 00:29:04,144 line:-1
The original texture’s RGB


671
00:29:04.178 --> 00:29:07.314 line:-2 align:center
is calculated by multiplying
the RGBM sample


672
00:29:07.347 --> 00:29:09.249 line:-1 align:center
by the calculated multiplier.


673
00:29:09.283 --> 00:29:11.752 line:-2 align:center
Now that I’ve introduced you
to RGBM encoding,


674
00:29:11,785 --> 00:29:14,054 line:-2
I’ll move on
to normal map encoding.


675
00:29:14,087 --> 00:29:16,890 line:-2
In most cases,
when referring to normal maps,


676
00:29:16.924 --> 00:29:20.093 line:-2 align:center
we’re specifically referring
to object-space normal maps.


677
00:29:20.127 --> 00:29:22.496 line:-2 align:center
When encoding our normals
in object-space,


678
00:29:22,529 --> 00:29:24,865 line:-2
we know that each normal
is a unit vector,


679
00:29:24,898 --> 00:29:26,867 line:-2
which has the benefit
that it can be represented


680
00:29:26,900 --> 00:29:31,638 line:-2
in two axes with the third axis
trivially derivable at runtime.


681
00:29:31,672 --> 00:29:33,874 line:-2
This allows us to remap
these two channels


682
00:29:33,907 --> 00:29:34,975 line:-1
to best take advantage


683
00:29:35.008 --> 00:29:36.777 line:-2 align:center
of texture compression
algorithms,


684
00:29:36,810 --> 00:29:39,146 line:-2
and achieve superior
compression quality


685
00:29:39,179 --> 00:29:42,382 line:-2
compared to compressing
XYZ as RGB.


686
00:29:42.416 --> 00:29:44.218 line:-2 align:center
How you remap channels varies
depending


687
00:29:44.251 --> 00:29:45.819 line:-1 align:center
on the compression format.


688
00:29:45,853 --> 00:29:49,690 line:-2
I’ll walk through an example
of encoding a normal with ASTC,


689
00:29:49.723 --> 00:29:51.692 line:-1 align:center
using this chart as a guide.


690
00:29:51.725 --> 00:29:53.660 line:-1 align:center
When encoding with ASTC,


691
00:29:53,694 --> 00:29:56,129 line:-2
the red, green,
and blue channels


692
00:29:56,163 --> 00:29:57,664 line:-1
are set to the X component,


693
00:29:57,698 --> 00:30:00,300 line:-2
and the alpha channel
is set to the Y component.


694
00:30:00.334 --> 00:30:02.503 line:-2 align:center
The colors correspond
to which channel


695
00:30:02,536 --> 00:30:05,539 line:-2
the X and Y components
will be reassigned back to


696
00:30:05,572 --> 00:30:07,774 line:-2
when sampling
the encoded normal.


697
00:30:07.808 --> 00:30:11.144 line:-2 align:center
TextureConverter takes care
of encoding remapping for you


698
00:30:11,178 --> 00:30:13,714 line:-2
by automatically remapping
to your chosen format


699
00:30:13,747 --> 00:30:16,750 line:-2
if you pass
the normal map parameter.


700
00:30:16,783 --> 00:30:19,019 line:-2
When sampling normal maps
in your shader,


701
00:30:19.052 --> 00:30:21.421 line:-2 align:center
it’s important to know
the channel mapping.


702
00:30:21,455 --> 00:30:24,725 line:-2
While the X component is read
from the red or alpha channel,


703
00:30:24,758 --> 00:30:27,294 line:-2
the Y component comes from
the alpha or green channel


704
00:30:27,327 --> 00:30:29,263 line:-2
depending on the compression
format.


705
00:30:29,296 --> 00:30:32,065 line:-1
Coming back to the ASTC example,


706
00:30:32.099 --> 00:30:34.268 line:-2 align:center
to sample a texture, the X
component


707
00:30:34.301 --> 00:30:35.936 line:-1 align:center
is sampled from the red channel,


708
00:30:35,969 --> 00:30:38,705 line:-2
and the Y component is sampled
from the alpha channel,


709
00:30:38,739 --> 00:30:41,208 line:-2
the reverse of how
the normal was encoded.


710
00:30:41.241 --> 00:30:43.110 line:-2 align:center
If you’re encoding
to multiple formats


711
00:30:43.143 --> 00:30:46.180 line:-2 align:center
to achieve the best possible
quality on any device,


712
00:30:46.213 --> 00:30:47.247 line:-1 align:center
then this mapping is something


713
00:30:47,281 --> 00:30:49,349 line:-2
that you’ll need to handle
at runtime.


714
00:30:49.383 --> 00:30:52.252 line:-2 align:center
I’ll walk through an example
of runtime normal sampling


715
00:30:52.286 --> 00:30:54.354 line:-1 align:center
using Metal texture swizzles.


716
00:30:55.022 --> 00:30:56.757 line:-1 align:center
Encoding to multiple formats


717
00:30:56.790 --> 00:30:58.992 line:-2 align:center
could lead to needing
multiple shader variants


718
00:30:59,026 --> 00:31:02,296 line:-2
if the different formats used
different channel mappings.


719
00:31:02.329 --> 00:31:03.497 line:-1 align:center
To avoid this,


720
00:31:03,530 --> 00:31:07,167 line:-2
Metal allows you to apply
custom swizzles to your texture.


721
00:31:07,201 --> 00:31:09,803 line:-2
Swizzles allow you
to remap X and Y components


722
00:31:09.837 --> 00:31:11.238 line:-1 align:center
to red and green channels


723
00:31:11,271 --> 00:31:14,441 line:-2
so your shaders can be
compression format neutral.


724
00:31:14.474 --> 00:31:16.610 line:-2 align:center
Here’s an example
of remapping channels


725
00:31:16.643 --> 00:31:17.711 line:-1 align:center
to red and green


726
00:31:17,744 --> 00:31:20,080 line:-2
for a normal map
compressed with ASTC,


727
00:31:20.113 --> 00:31:22.916 line:-2 align:center
as we saw
in the diagram previously.


728
00:31:22.950 --> 00:31:25.385 line:-2 align:center
After the texture descriptor
is initialized,


729
00:31:25,419 --> 00:31:28,322 line:-2
the red channel is set
to MTLTextureSwizzleRed,


730
00:31:28.355 --> 00:31:31.325 line:-2 align:center
and the green channel is set
to MTLTextureSwizzleAlpha.


731
00:31:32.326 --> 00:31:33.961 line:-1 align:center
Since this is a normal map,


732
00:31:33,994 --> 00:31:36,530 line:-2
only two channels
are needed for sampling.


733
00:31:36.563 --> 00:31:38.832 line:-2 align:center
Since the red and green channels
are now assigned


734
00:31:38,866 --> 00:31:40,334 line:-1
to the X and Y components


735
00:31:40,367 --> 00:31:43,670 line:-2
originally encoded
to the red and alpha channels,


736
00:31:43.704 --> 00:31:46.540 line:-2 align:center
the blue and alpha channels
are set to zero.


737
00:31:46.573 --> 00:31:47.774 line:-1 align:center
Once that’s done,


738
00:31:47,808 --> 00:31:50,444 line:-2
the last line is to assemble
the final swizzle


739
00:31:50,477 --> 00:31:51,945 line:-1
with the remapped channels


740
00:31:51,979 --> 00:31:55,015 line:-2
using
MTLTextureSwizzleChannelsMake.


741
00:31:55.048 --> 00:31:56.383 line:-1 align:center
Once the X and Y channels


742
00:31:56,416 --> 00:31:57,885 line:-1
are sampled in your shader,


743
00:31:57.918 --> 00:32:00.420 line:-2 align:center
you can reconstruct
the Z component.


744
00:32:00.454 --> 00:32:02.856 line:-2 align:center
I’ll walk you through
the ReconstructNormal function


745
00:32:02.890 --> 00:32:05.025 line:-1 align:center
to show you how.


746
00:32:06,026 --> 00:32:09,263 line:-2
First, the code rebiases
the X and Y components


747
00:32:09.296 --> 00:32:10.697 line:-1 align:center
into the correct range,


748
00:32:10,731 --> 00:32:14,468 line:-2
which is negative one to one
for a normal.


749
00:32:14,501 --> 00:32:16,870 line:-2
The next step is to subtract
the dot product


750
00:32:16,904 --> 00:32:19,606 line:-2
of the X and Y components
from one,


751
00:32:19.640 --> 00:32:23.243 line:-2 align:center
to ensure the result of the
dot product has the right sign.


752
00:32:23.277 --> 00:32:24.511 line:-1 align:center
The saturate function


753
00:32:24,545 --> 00:32:26,413 line:-2
is then used to clamp this
result


754
00:32:26.446 --> 00:32:29.449 line:-1 align:center
within the range of zero to one.


755
00:32:29.483 --> 00:32:31.718 line:-2 align:center
The last step to calculate
the Z component


756
00:32:31.752 --> 00:32:33.654 line:-2 align:center
is to take the square root
of the output


757
00:32:33,687 --> 00:32:35,889 line:-1
of the saturate function.


758
00:32:36,890 --> 00:32:37,925 line:-1
Now that I’ve explained


759
00:32:37.958 --> 00:32:40.227 line:-2 align:center
RGBM and normal map
encoding options


760
00:32:40.260 --> 00:32:42.162 line:-1 align:center
available for channel mapping,


761
00:32:42,196 --> 00:32:43,263 line:-1
I’ll finish the discussion


762
00:32:43,297 --> 00:32:44,898 line:-2
of the texture compression
pipeline


763
00:32:44,932 --> 00:32:46,733 line:-2
with the final
compression substate,


764
00:32:46,767 --> 00:32:48,135 line:-1
encoding.


765
00:32:48.168 --> 00:32:49.870 line:-2 align:center
All TextureConverter
command lines


766
00:32:49.903 --> 00:32:53.307 line:-2 align:center
require specification
of the target compression format


767
00:32:53,340 --> 00:32:55,642 line:-2
with the compression_format
argument.


768
00:32:55,676 --> 00:32:58,345 line:-2
You can also specify
which compressor to use


769
00:32:58,378 --> 00:33:00,547 line:-2
or let TextureConverter make the
selection


770
00:33:00.581 --> 00:33:02.082 line:-1 align:center
based on the compression format


771
00:33:02.115 --> 00:33:04.318 line:-2 align:center
and other options
you’ve selected.


772
00:33:04.351 --> 00:33:06.453 line:-2 align:center
You may also select
the compression quality


773
00:33:06.486 --> 00:33:08.155 line:-1 align:center
from these four options.


774
00:33:08,188 --> 00:33:10,691 line:-2
Note that there’s a tradeoff
between compression speed


775
00:33:10.724 --> 00:33:11.859 line:-1 align:center
and image quality,


776
00:33:11.892 --> 00:33:14.628 line:-2 align:center
and you may wish to select
a lower compression quality


777
00:33:14,661 --> 00:33:16,263 line:-1
while iterating on your game,


778
00:33:16.296 --> 00:33:20.000 line:-2 align:center
but use the highest quality
for released builds.


779
00:33:20,033 --> 00:33:22,102 line:-2
Now, I’ll cover the texture
compression formats


780
00:33:22,135 --> 00:33:23,904 line:-1
available for you to select.


781
00:33:25,405 --> 00:33:26,406 line:-1
Here’s an overview


782
00:33:26,440 --> 00:33:28,408 line:-2
of the texture compression
format families


783
00:33:28,442 --> 00:33:30,744 line:-1
supported on Apple platforms.


784
00:33:30,777 --> 00:33:32,846 line:-1
iOS and Apple Silicon platforms


785
00:33:32,880 --> 00:33:36,283 line:-1
support ASTC and PVRTC families,


786
00:33:36,316 --> 00:33:40,487 line:-2
and all macOS platforms
support BCn families.


787
00:33:40,521 --> 00:33:43,423 line:-2
I’ll go over each of these
format families in more detail,


788
00:33:43.457 --> 00:33:45.292 line:-2 align:center
and give you some guidelines to
help you choose


789
00:33:45,325 --> 00:33:46,860 line:-1
the best ones for your needs.


790
00:33:46.894 --> 00:33:49.630 line:-1 align:center
I’ll start with BCn formats.


791
00:33:49,663 --> 00:33:51,732 line:-1
BCn is a set of seven formats


792
00:33:51.765 --> 00:33:54.868 line:-2 align:center
that all operate using
four-by-four blocks of pixels,


793
00:33:54,902 --> 00:33:58,438 line:-2
and either use four
or eight bits per pixel.


794
00:33:58.472 --> 00:34:02.176 line:-2 align:center
Each compression format is ideal
for a different data format.


795
00:34:02.209 --> 00:34:07.881 line:-2 align:center
BC1 and BC3 are commonly used
for RGB and RGBA compression,


796
00:34:07.915 --> 00:34:10.817 line:-1 align:center
BC6 is ideal for HDR images,


797
00:34:10,851 --> 00:34:13,554 line:-2
and BC5, with its dual
independent channels,


798
00:34:13.587 --> 00:34:16.456 line:-2 align:center
is ideal for normal
map encoding.


799
00:34:16,490 --> 00:34:18,659 line:-1
Next is ASTC,


800
00:34:18,692 --> 00:34:21,695 line:-1
a family of RGBA formats in LDR,


801
00:34:21,728 --> 00:34:25,065 line:-1
sRGB, and HDR color spaces.


802
00:34:25.098 --> 00:34:28.101 line:-2 align:center
The ASTC family of formats
allows for the highest quality


803
00:34:28.135 --> 00:34:29.269 line:-1 align:center
at all sizes,


804
00:34:29.303 --> 00:34:33.040 line:-2 align:center
and is therefore more generally
recommended over PVRTC.


805
00:34:33,073 --> 00:34:34,708 line:-2
There’s a range
of bits per pixel


806
00:34:34.741 --> 00:34:36.710 line:-1 align:center
versus quality for each format.


807
00:34:37.711 --> 00:34:40.514 line:-2 align:center
With ASTC,
the byte size of each block


808
00:34:40.547 --> 00:34:42.950 line:-2 align:center
is the same
regardless of the format,


809
00:34:42,983 --> 00:34:45,419 line:-2
while the number
of texels it represents varies.


810
00:34:45,452 --> 00:34:47,020 line:-1
This gives you a continuum


811
00:34:47,054 --> 00:34:48,622 line:-2
between the highest quality
compression


812
00:34:48,655 --> 00:34:50,057 line:-1
but lowest compression rate


813
00:34:50.090 --> 00:34:52.259 line:-1 align:center
at the four-by-four block size


814
00:34:52.292 --> 00:34:54.394 line:-2 align:center
versus the lowest compression
quality


815
00:34:54,428 --> 00:34:58,298 line:-2
but highest compression rate
at the 12-by-12 block size.


816
00:34:58,332 --> 00:35:01,568 line:-1
The LDR, sRGB, and HDR variants


817
00:35:01.602 --> 00:35:05.539 line:-2 align:center
describe the color range
for compressed ASTC textures.


818
00:35:05.572 --> 00:35:09.276 line:-2 align:center
LDR and sRGB are both
in the zero-to-one range,


819
00:35:09.309 --> 00:35:11.879 line:-1 align:center
in either linear or sRGB space,


820
00:35:11.912 --> 00:35:13.080 line:-1 align:center
while the HDR variant


821
00:35:13,113 --> 00:35:16,049 line:-2
is for data outside
of the zero-to-one range.


822
00:35:17,050 --> 00:35:19,920 line:-2
Lastly,
PVRTC formats are available


823
00:35:19.953 --> 00:35:24.024 line:-2 align:center
in RGB and RGBA
in 2-bit or 4-bit mode.


824
00:35:24,057 --> 00:35:27,528 line:-2
A data block in this format
always occupies eight bytes,


825
00:35:27,561 --> 00:35:29,630 line:-2
so in 2-bit mode
there’ll be one block


826
00:35:29,663 --> 00:35:31,598 line:-1
for every eight-by-four pixels,


827
00:35:31,632 --> 00:35:32,533 line:-1
and in 4-bit mode,


828
00:35:32.566 --> 00:35:34.935 line:-2 align:center
there’s one block
for each four-by-four pixel.


829
00:35:36.603 --> 00:35:39.673 line:-2 align:center
Now that I’ve introduced
the supported format families,


830
00:35:39,706 --> 00:35:41,208 line:-2
I’m going to give some
recommendations


831
00:35:41.241 --> 00:35:42.843 line:-2 align:center
for choosing formats
for your app.


832
00:35:43.343 --> 00:35:46.213 line:-2 align:center
On iOS devices,
you should always be using


833
00:35:46,246 --> 00:35:48,582 line:-1
ASTC compression by default,


834
00:35:48.615 --> 00:35:50.984 line:-2 align:center
with the addition
of PVRTC compression


835
00:35:51.018 --> 00:35:52.553 line:-1 align:center
and per-device thinning


836
00:35:52.586 --> 00:35:55.956 line:-2 align:center
only if you’re supporting
A7 GPUs and earlier.


837
00:35:55.989 --> 00:35:58.058 line:-1 align:center
If you have any HDR textures,


838
00:35:58.091 --> 00:36:04.331 line:-2 align:center
you can take advantage of
ASTC HDR on A13 and later GPUs.


839
00:36:04.364 --> 00:36:08.202 line:-2 align:center
For macOS, BCn is available
across the board.


840
00:36:08,235 --> 00:36:09,636 line:-1
On Apple Silicon Macs,


841
00:36:09.670 --> 00:36:12.339 line:-2 align:center
you also have the option
of using ASTC,


842
00:36:12,372 --> 00:36:13,674 line:-2
and you should consider this
option


843
00:36:13,707 --> 00:36:16,677 line:-2
if you’re also targeting
iOS devices.


844
00:36:16.710 --> 00:36:19.813 line:-2 align:center
While PVRTC is available
on Apple Silicon,


845
00:36:19,847 --> 00:36:21,448 line:-1
we don’t recommend this option,


846
00:36:21,481 --> 00:36:24,451 line:-2
and it’s intended
only for iOS legacy support.


847
00:36:24.484 --> 00:36:26.386 line:-2 align:center
Since there are a lot
of different formats


848
00:36:26.420 --> 00:36:29.690 line:-2 align:center
within each compression
format family to choose between,


849
00:36:29.723 --> 00:36:31.458 line:-2 align:center
the guideline for selecting
the most effective


850
00:36:31.491 --> 00:36:33.760 line:-2 align:center
texture compression
formats for your app


851
00:36:33.794 --> 00:36:36.763 line:-2 align:center
is to select per-texture
and per-target when possible.


852
00:36:36.797 --> 00:36:40.601 line:-2 align:center
Unless all of your textures
are RGB or RGBA data,


853
00:36:40.634 --> 00:36:42.336 line:-2 align:center
you should select
the compression format


854
00:36:42.369 --> 00:36:44.438 line:-2 align:center
based on the type of data
you’re compressing,


855
00:36:44,471 --> 00:36:46,340 line:-2
like choosing a format
that allows compression


856
00:36:46.373 --> 00:36:49.843 line:-2 align:center
as two independent
channels for normal data.


857
00:36:49.877 --> 00:36:52.212 line:-2 align:center
When compressing
to an ASTC format,


858
00:36:52.246 --> 00:36:54.915 line:-2 align:center
you may want to select
a subset of the formats.


859
00:36:54,948 --> 00:36:56,250 line:-1
Consider bucketing textures


860
00:36:56,283 --> 00:36:58,352 line:-2
by those that require the
highest quality


861
00:36:58.385 --> 00:37:01.421 line:-2 align:center
versus those that are acceptable
at higher compression rates.


862
00:37:02.289 --> 00:37:04.024 line:-2 align:center
Now, let’s review
what we’ve covered.


863
00:37:04.758 --> 00:37:06.226 line:-1 align:center
We’ve completely remade


864
00:37:06.260 --> 00:37:08.829 line:-2 align:center
the texture processing pipeline
from TextureTool


865
00:37:08.862 --> 00:37:11.698 line:-2 align:center
to give you complete control
over every stage of the pipeline


866
00:37:11.732 --> 00:37:13.834 line:-2 align:center
with our new
TextureConverter tool.


867
00:37:13.867 --> 00:37:16.336 line:-2 align:center
I’ve walked through each
stage of this new pipeline


868
00:37:16.370 --> 00:37:18.705 line:-2 align:center
and explored all of the options
available for you to use


869
00:37:18.739 --> 00:37:19.973 line:-1 align:center
at each stage,


870
00:37:20,007 --> 00:37:21,642 line:-2
and introduced you
to the channel mapping


871
00:37:21,675 --> 00:37:23,610 line:-2
and texture compression format
families


872
00:37:23,644 --> 00:37:25,479 line:-1
supported on Apple platforms.


873
00:37:25,512 --> 00:37:27,481 line:-2
We want to make it
as easy as possible


874
00:37:27,514 --> 00:37:29,850 line:-2
to update your workflows
from using TextureTool


875
00:37:29.883 --> 00:37:31.385 line:-1 align:center
to TextureConverter,


876
00:37:31.418 --> 00:37:32.986 line:-2 align:center
so we’ve added a compatibility
mode


877
00:37:33,020 --> 00:37:35,189 line:-2
to help you switch over
your command lines.


878
00:37:35.222 --> 00:37:38.225 line:-2 align:center
Whether using TextureTool
compatibility mode


879
00:37:38.258 --> 00:37:40.861 line:-2 align:center
or calling TextureConverter
with native options,


880
00:37:40,894 --> 00:37:44,198 line:-2
invoke with xcrun
TextureConverter.


881
00:37:44,231 --> 00:37:46,667 line:-2
Here’s an example command line
of TextureConverter


882
00:37:46.700 --> 00:37:49.837 line:-2 align:center
being called
with TextureTool options.


883
00:37:49,870 --> 00:37:51,972 line:-2
TextureConverter
will translate the options


884
00:37:52.005 --> 00:37:54.107 line:-2 align:center
to native
TextureConverter options,


885
00:37:54.141 --> 00:37:55.342 line:-1 align:center
do the compression,


886
00:37:55.375 --> 00:37:57.778 line:-2 align:center
and then tell you
what the new native options are,


887
00:37:57.811 --> 00:38:00.414 line:-2 align:center
so that you can update
your build scripts easily.


888
00:38:01.415 --> 00:38:03.650 line:-2 align:center
That was an introduction
to TextureConverter.


889
00:38:03.684 --> 00:38:04.785 line:-1 align:center
Here’s how to get it.


890
00:38:04,818 --> 00:38:08,055 line:-2
TextureConverter ships
as a part of Xcode 13


891
00:38:08,088 --> 00:38:10,791 line:-2
and is available to use
in seed 1.


892
00:38:10.824 --> 00:38:12.893 line:-2 align:center
On Windows,
TextureConverter ships


893
00:38:12.926 --> 00:38:16.763 line:-2 align:center
as a part of the Metal Developer
Tools for Windows 2.0 package,


894
00:38:16,797 --> 00:38:19,700 line:-2
available from
developer.apple.com.


895
00:38:19,733 --> 00:38:21,935 line:-1
Seed 1 is available now.


896
00:38:21,969 --> 00:38:23,170 line:-1
Be aware that in Windows,


897
00:38:23.203 --> 00:38:26.540 line:-2 align:center
there’s no support for
compressing to PVRTC formats,


898
00:38:26.573 --> 00:38:28.909 line:-1 align:center
as PVRTC is available in macOS


899
00:38:28.942 --> 00:38:32.045 line:-2 align:center
for supporting
legacy iOS platforms.


900
00:38:32,079 --> 00:38:33,146 line:-1
Another important part


901
00:38:33.180 --> 00:38:35.215 line:-2 align:center
of the Metal Developer Tools for
Windows


902
00:38:35.249 --> 00:38:37.451 line:-2 align:center
is the Metal Compiler
for Windows.


903
00:38:37,484 --> 00:38:40,654 line:-2
The Metal Compiler for Windows
was introduced last year,


904
00:38:40.687 --> 00:38:44.091 line:-2 align:center
with support for Metal Shading
Language version 2.3.


905
00:38:44.124 --> 00:38:45.158 line:-1 align:center
Updates throughout the year


906
00:38:45,192 --> 00:38:47,027 line:-2
mirrored the updates
to the Metal compiler


907
00:38:47,060 --> 00:38:48,762 line:-1
shipped in Xcode.


908
00:38:48,795 --> 00:38:51,231 line:-2
The latest
release version is 1.2,


909
00:38:51.265 --> 00:38:53.233 line:-2 align:center
which includes support
for Metal Shading Language


910
00:38:53,267 --> 00:38:55,302 line:-1
on Apple Silicon Macs.


911
00:38:55,335 --> 00:38:58,572 line:-2
Seed 1 of version 2.0
is now available


912
00:38:58,605 --> 00:39:00,641 line:-2
with support for all
of the great new features


913
00:39:00.674 --> 00:39:03.043 line:-1 align:center
in Metal Shading Language 2.4.


914
00:39:05.045 --> 00:39:07.881 line:-2 align:center
Here’s a summary of everything
we’ve covered today:


915
00:39:07,915 --> 00:39:10,284 line:-2
Egor discussed support
for more Metal features,


916
00:39:10.317 --> 00:39:12.786 line:-2 align:center
like ray tracing
and function pointers.


917
00:39:12.819 --> 00:39:15.189 line:-2 align:center
He introduced brand-new
profiling workflows,


918
00:39:15.222 --> 00:39:18.592 line:-2 align:center
like GPU Timeline and consistent
GPU performance state,


919
00:39:18.625 --> 00:39:20.861 line:-2 align:center
to help you get the most
out of the GPUs


920
00:39:20,894 --> 00:39:23,163 line:-1
across all Apple platforms.


921
00:39:23,197 --> 00:39:25,566 line:-2
And he demonstrated improvements
to debugging workflows


922
00:39:25,599 --> 00:39:28,168 line:-2
you’re already familiar with
to give you more support


923
00:39:28.202 --> 00:39:31.805 line:-2 align:center
for shader validation
and precise capture controls.


924
00:39:31.839 --> 00:39:34.107 line:-2 align:center
And I introduced you
to TextureConverter,


925
00:39:34.141 --> 00:39:36.243 line:-2 align:center
a new tool to help you take
full advantage


926
00:39:36,276 --> 00:39:38,078 line:-2
of the texture
processing pipeline


927
00:39:38,111 --> 00:39:40,581 line:-2
and all of the supported texture
compression formats


928
00:39:40.614 --> 00:39:43.050 line:-1 align:center
available on Apple platforms.


929
00:39:43,083 --> 00:39:46,887 line:-2
Thanks, and have a great
rest of WWDC 2021.


930
00:39:46.920 --> 00:39:49.056 line:-1 align:center
[music]

