2
00:00:02.069 --> 00:00:07.074 line:-1 align:center
[music]


3
00:00:09,042 --> 00:00:10,410 line:-2
[Annie]
Hi.


4
00:00:10.444 --> 00:00:12.913 line:-2 align:center
My name is Annie,
and I'm a software engineer


5
00:00:12.946 --> 00:00:14.581 line:-1 align:center
on the Health Records team.


6
00:00:14.615 --> 00:00:16.517 line:-2 align:center
I'm joined
today by my colleague Cary


7
00:00:16,550 --> 00:00:18,819 line:-2
to show you
how you can empower people


8
00:00:18,852 --> 00:00:23,090 line:-2
to share their verifiable
health records using HealthKit.


9
00:00:23.123 --> 00:00:26.059 line:-2 align:center
Before we dive
into verifiable health records,


10
00:00:26.093 --> 00:00:29.229 line:-2 align:center
I want to briefly reintroduce
the Health Records feature


11
00:00:29,263 --> 00:00:33,634 line:-2
that we launched back
in 2018 for iOS 11.3.


12
00:00:33.667 --> 00:00:36.870 line:-2 align:center
Health Records allows users
to connect to their providers


13
00:00:36,904 --> 00:00:39,139 line:-2
and securely download
their clinical records


14
00:00:39.173 --> 00:00:41.308 line:-2 align:center
to the Health app
for easy storage


15
00:00:41.341 --> 00:00:43.076 line:-1 align:center
and visualization.


16
00:00:43,110 --> 00:00:45,913 line:-2
This is all built on top
of industry standards


17
00:00:45,946 --> 00:00:50,050 line:-2
like HL7's Fast Healthcare
Interoperability Resources,


18
00:00:50.083 --> 00:00:51.485 line:-1 align:center
or FHIR.


19
00:00:51,518 --> 00:00:53,320 line:-1
With user permission,


20
00:00:53.353 --> 00:00:55.255 line:-2 align:center
your app can
access these health records


21
00:00:55,289 --> 00:00:58,058 line:-2
that users have downloaded
with HealthKit.


22
00:00:58,091 --> 00:01:01,862 line:-2
For more details about
the existing Health Records API,


23
00:01:01.895 --> 00:01:06.166 line:-2 align:center
I encourage you to check out
our WWDC 2018 video,


24
00:01:06,200 --> 00:01:09,603 line:-2
"Accessing Health Records
with HealthKit" to learn more.


25
00:01:09,636 --> 00:01:13,807 line:-2
For iOS 15, we're leveraging
our Health Records work


26
00:01:13,841 --> 00:01:16,376 line:-2
to allow for the download,
storage,


27
00:01:16,410 --> 00:01:18,478 line:-2
and sharing
of verifiable records


28
00:01:18,512 --> 00:01:19,580 line:-1
in the Health app


29
00:01:19.613 --> 00:01:23.183 line:-2 align:center
implemented based on the SMART
Health Cards specification.


30
00:01:23.217 --> 00:01:26.253 line:-2 align:center
Let's explore what
verifiable health records are


31
00:01:26.286 --> 00:01:28.589 line:-2 align:center
and how they're different
from the health records data


32
00:01:28,622 --> 00:01:33,627 line:-2
you can currently query for
with HealthKit.


33
00:01:33,660 --> 00:01:36,797 line:-2
First, a verifiable
health record contains


34
00:01:36.830 --> 00:01:40.767 line:-2 align:center
multiple FHIR resources,
including a patient resource


35
00:01:40,801 --> 00:01:43,537 line:-2
and one
or more clinical resources.


36
00:01:43,570 --> 00:01:45,506 line:-1
These resources are bundled


37
00:01:45,539 --> 00:01:48,442 line:-2
in what we call
a SMART Health Card.


38
00:01:48,475 --> 00:01:51,345 line:-2
Issuers,
or institutions that create


39
00:01:51,378 --> 00:01:54,014 line:-2
verifiable health records,
such as a lab


40
00:01:54.047 --> 00:01:57.150 line:-2 align:center
or healthcare provider,
cryptographically sign


41
00:01:57,184 --> 00:02:02,289 line:-2
this SMART Health Card
as a JSON Web Signature, or JWS.


42
00:02:02.322 --> 00:02:06.159 line:-2 align:center
Finally, issuers generate
verifiable health records


43
00:02:06,193 --> 00:02:08,996 line:-2
such that they include
only necessary information


44
00:02:09,029 --> 00:02:12,065 line:-2
about the patient
and their clinical data.


45
00:02:12,099 --> 00:02:14,568 line:-2
To get a clearer
picture of these points,


46
00:02:14,601 --> 00:02:16,837 line:-1
let's look at an example.


47
00:02:16.870 --> 00:02:18.205 line:-1 align:center
For this example,


48
00:02:18,238 --> 00:02:21,808 line:-2
the record contains
two FHIR immunization resources,


49
00:02:21.842 --> 00:02:24.478 line:-1 align:center
one for each dose of a vaccine.


50
00:02:24.511 --> 00:02:26.914 line:-2 align:center
It also includes
a FHIR patient resource


51
00:02:26,947 --> 00:02:30,317 line:-2
to identify
who received the vaccine.


52
00:02:30,350 --> 00:02:32,619 line:-2
These resources
are then combined


53
00:02:32.653 --> 00:02:34.655 line:-1 align:center
into a SMART Health Card,


54
00:02:34,688 --> 00:02:37,658 line:-2
which, in its raw form,
looks like this.


55
00:02:37,691 --> 00:02:40,594 line:-2
The SMART Health Card payload
includes information


56
00:02:40.627 --> 00:02:44.565 line:-2 align:center
such as the type,
which contains URLs that declare


57
00:02:44.598 --> 00:02:47.568 line:-2 align:center
what types of data
to expect in the health card,


58
00:02:47,601 --> 00:02:51,338 line:-2
and the credential subject,
which includes the FHIR version


59
00:02:51,371 --> 00:02:54,608 line:-2
and a Bundle resource
that contains the immunization


60
00:02:54.641 --> 00:02:56.777 line:-1 align:center
and patient resources.


61
00:02:56.810 --> 00:03:00.614 line:-2 align:center
The SMART Health Card
is then signed as a JWS,


62
00:03:00,647 --> 00:03:04,384 line:-2
which has two components:
A header and a payload.


63
00:03:04.418 --> 00:03:08.155 line:-2 align:center
The JWS header
houses the algorithm used


64
00:03:08,188 --> 00:03:12,025 line:-2
to sign the JWS;
the public key thumbprint,


65
00:03:12.059 --> 00:03:15.295 line:-2 align:center
which specifies which
of the issuer's public keys was


66
00:03:15,329 --> 00:03:20,968 line:-2
used to sign; and the algorithm
used to compress the payload.


67
00:03:21.001 --> 00:03:23.270 line:-1 align:center
The compressed JWS payload,


68
00:03:23,303 --> 00:03:25,205 line:-2
along with
the credential subject,


69
00:03:25,239 --> 00:03:30,244 line:-2
contains other claims data,
including the issuer URL,


70
00:03:30,277 --> 00:03:33,247 line:-2
where the issuer's
public keys are located,


71
00:03:33.280 --> 00:03:38.418 line:-2 align:center
the issued date,
and an optional expiration date.


72
00:03:38,452 --> 00:03:39,953 line:-1
In its raw form,


73
00:03:39,987 --> 00:03:42,956 line:-2
this is what a Verifiable
Health Record looks like.


74
00:03:42,990 --> 00:03:45,459 line:-2
For more information,
we encourage you


75
00:03:45.492 --> 00:03:48.262 line:-2 align:center
to visit the SMART
Health Card specification


76
00:03:48,295 --> 00:03:51,431 line:-2
via the link
associated with this session.


77
00:03:51.465 --> 00:03:52.866 line:-1 align:center
Now that we've reviewed


78
00:03:52,900 --> 00:03:55,102 line:-2
what a verifiable health record
looks like,


79
00:03:55,135 --> 00:03:57,804 line:-2
let me show you how you can
import these records


80
00:03:57,838 --> 00:03:59,439 line:-1
into the Health app.


81
00:03:59.473 --> 00:04:03.277 line:-2 align:center
One option is to use the
existing Health Records feature.


82
00:04:03,310 --> 00:04:05,979 line:-2
Users can download
verifiable health records


83
00:04:06,013 --> 00:04:07,681 line:-1
to the Health app by connecting


84
00:04:07,714 --> 00:04:10,450 line:-2
to a Health Records-enabled
provider.


85
00:04:10,484 --> 00:04:13,187 line:-2
Note that this option is
only available


86
00:04:13,220 --> 00:04:15,689 line:-2
where the Health Records feature
is available,


87
00:04:15,722 --> 00:04:20,594 line:-2
which is currently in the US,
UK, and Canada.


88
00:04:20.627 --> 00:04:24.064 line:-2 align:center
Users also have the options
of downloading a file


89
00:04:24,097 --> 00:04:27,467 line:-2
with a .smart-health-cards
extension or scanning


90
00:04:27,501 --> 00:04:30,704 line:-2
a smart-health-card
file-embedded QR code.


91
00:04:30.737 --> 00:04:33.240 line:-2 align:center
This will display
the following sheet


92
00:04:33,273 --> 00:04:36,109 line:-2
in the Health app,
where users can view details


93
00:04:36,143 --> 00:04:39,046 line:-2
and choose whether
to download these records.


94
00:04:39,079 --> 00:04:42,816 line:-2
These two options
are available internationally.


95
00:04:42,850 --> 00:04:45,485 line:-2
Finally,
how can you request access


96
00:04:45.519 --> 00:04:47.354 line:-1 align:center
to this data with HealthKit?


97
00:04:47,387 --> 00:04:50,490 line:-2
We are introducing
a new HealthKit query,


98
00:04:50.524 --> 00:04:55.729 line:-2 align:center
HKVerifiableClinicalRecordQuery,
and a new HKSample subclass,


99
00:04:55.762 --> 00:04:59.967 line:-2 align:center
HKVerifiableClinicalRecord
for iOS 15.


100
00:05:00.000 --> 00:05:04.872 line:-2 align:center
Unlike other HKQuery subclasses,
in order to use this query,


101
00:05:04.905 --> 00:05:07.841 line:-2 align:center
you must request for
a HealthKit access entitlement


102
00:05:07.875 --> 00:05:09.977 line:-1 align:center
for Verifiable Health Records.


103
00:05:10,010 --> 00:05:11,945 line:-1
While you will still have access


104
00:05:11,979 --> 00:05:14,348 line:-2
to the public headers
in the SDK,


105
00:05:14.381 --> 00:05:18.051 line:-2 align:center
the results handler will return
an authorization denied error


106
00:05:18,085 --> 00:05:19,920 line:-1
without the entitlement.


107
00:05:19,953 --> 00:05:22,823 line:-2
Please refer to the links
associated with this session


108
00:05:22.856 --> 00:05:25.392 line:-2 align:center
for information
on how to get started.


109
00:05:25,425 --> 00:05:28,996 line:-2
Before we dive deeper into
the query and sample classes,


110
00:05:29,029 --> 00:05:32,399 line:-2
let's look at authorization
for Verifiable Health Records,


111
00:05:32.432 --> 00:05:35.068 line:-2 align:center
which is slightly different
from what you might be used to


112
00:05:35.102 --> 00:05:36.603 line:-1 align:center
with Health Records.


113
00:05:36.637 --> 00:05:39.106 line:-1 align:center
First, Verifiable Health Records


114
00:05:39.139 --> 00:05:41.975 line:-2 align:center
observes a per-sample
authorization pattern,


115
00:05:42.009 --> 00:05:44.511 line:-2 align:center
where the user
selects individual samples,


116
00:05:44,545 --> 00:05:47,181 line:-2
not types,
to share with your app.


117
00:05:47,214 --> 00:05:49,883 line:-2
This type of authorization
provides users


118
00:05:49,917 --> 00:05:52,386 line:-2
with more granular control
over their data


119
00:05:52,419 --> 00:05:56,290 line:-2
and is important
in protecting their privacy.


120
00:05:56,323 --> 00:05:58,592 line:-2
The current HealthKit
authorization pattern


121
00:05:58,625 --> 00:06:00,527 line:-1
consists of two steps:


122
00:06:00,561 --> 00:06:02,629 line:-2
First requesting
user authorization


123
00:06:02,663 --> 00:06:04,898 line:-1
for types to read and share,


124
00:06:04,932 --> 00:06:08,836 line:-2
and then querying for samples
once authorization is granted.


125
00:06:08,869 --> 00:06:12,506 line:-2
With Verifiable Health Records,
this first step is not needed.


126
00:06:12.539 --> 00:06:17.244 line:-2 align:center
Instead, once an instance of
HKVerifiableClinicalRecordQuery


127
00:06:17,277 --> 00:06:19,213 line:-1
is created and executed,


128
00:06:19.246 --> 00:06:21.849 line:-2 align:center
an authorization sheet will
be presented,


129
00:06:21.882 --> 00:06:25.018 line:-2 align:center
allowing the user to select
which individual records


130
00:06:25.052 --> 00:06:26.286 line:-1 align:center
to share with your app.


131
00:06:26,320 --> 00:06:27,855 line:-1
After sharing,


132
00:06:27.888 --> 00:06:29.756 line:-2 align:center
the chosen records are then
returned


133
00:06:29.790 --> 00:06:32.492 line:-1 align:center
to the query's results handler.


134
00:06:32,526 --> 00:06:34,394 line:-1
Furthermore, authorization


135
00:06:34,428 --> 00:06:37,664 line:-2
for Verifiable Health Records
is one-time only.


136
00:06:37,698 --> 00:06:40,133 line:-2
Sharing these records
with a third-party app


137
00:06:40.167 --> 00:06:43.971 line:-2 align:center
does not set up long-term
access authorization.


138
00:06:44.004 --> 00:06:48.909 line:-2 align:center
Each execution of a
HKVerifiableClinicalRecordQuery


139
00:06:48.942 --> 00:06:50.777 line:-1 align:center
will result in the presentation


140
00:06:50,811 --> 00:06:52,880 line:-2
of the following
authorization sheet


141
00:06:52,913 --> 00:06:55,148 line:-2
and the return
of user-selected records


142
00:06:55.182 --> 00:06:56.917 line:-1 align:center
to the results handler.


143
00:06:56.950 --> 00:06:59.253 line:-2 align:center
Now that we've gone
over authorization,


144
00:06:59.286 --> 00:07:02.422 line:-2 align:center
let's look at
HKVerifiableClinicalRecordQuery


145
00:07:02.456 --> 00:07:03.957 line:-1 align:center
in more detail.


146
00:07:03,991 --> 00:07:07,494 line:-2
To initialize the
HKVerifiableClinicalRecordQuery,


147
00:07:07.528 --> 00:07:11.131 line:-2 align:center
you will first have to provide
a string array of record types,


148
00:07:11.164 --> 00:07:14.268 line:-2 align:center
which we defined earlier
as the type of data present


149
00:07:14.301 --> 00:07:16.870 line:-1 align:center
in a verifiable health record.


150
00:07:16.904 --> 00:07:20.407 line:-2 align:center
Only records with all
provided record types present


151
00:07:20.440 --> 00:07:24.178 line:-2 align:center
will be shown
in the authorization sheet.


152
00:07:24.211 --> 00:07:26.079 line:-1 align:center
Like other HealthKit queries,


153
00:07:26.113 --> 00:07:28.482 line:-2 align:center
you also have the option
to add a predicate


154
00:07:28,515 --> 00:07:32,186 line:-2
to further filter the set
of samples for authorization.


155
00:07:32,219 --> 00:07:35,055 line:-2
We are providing
a convenience constructor


156
00:07:35,088 --> 00:07:37,191 line:-2
to create a predicate
for records


157
00:07:37.224 --> 00:07:40.961 line:-2 align:center
with relevant dates
within a date interval.


158
00:07:40,994 --> 00:07:44,932 line:-2
Once the query is executed
and the user taps "Share Once,"


159
00:07:44.965 --> 00:07:47.935 line:-2 align:center
the authorized
HKVerifiableClinicalRecords


160
00:07:47.968 --> 00:07:50.838 line:-2 align:center
are then returned
in the results handler.


161
00:07:50.871 --> 00:07:53.140 line:-2 align:center
The record includes
basic information


162
00:07:53.173 --> 00:07:55.576 line:-1 align:center
about the subject and issuer,


163
00:07:55.609 --> 00:07:57.978 line:-2 align:center
and, of course,
the JWS property,


164
00:07:58.011 --> 00:08:02.249 line:-2 align:center
which will contain the raw data
that you will verify and decode.


165
00:08:02,282 --> 00:08:05,052 line:-2
Now that we've gone through
the Verifiable Health Records


166
00:08:05.085 --> 00:08:07.588 line:-2 align:center
feature and
what its API looks like,


167
00:08:07,621 --> 00:08:09,656 line:-2
I'm going
to hand it off to Cary,


168
00:08:09.690 --> 00:08:12.326 line:-2 align:center
who will walk you
through how to import test data,


169
00:08:12.359 --> 00:08:17.998 line:-2 align:center
use the API to request records,
and verify a record's JWS.


170
00:08:18,031 --> 00:08:19,466 line:-2
[Cary]
Thanks, Annie.


171
00:08:19,499 --> 00:08:20,601 line:-1
Hi, everyone.


172
00:08:20.634 --> 00:08:22.269 line:-2 align:center
My name is Cary,
and I'm also an engineer


173
00:08:22,302 --> 00:08:23,704 line:-1
on the Health Records team.


174
00:08:23.737 --> 00:08:25.372 line:-2 align:center
Today, I'll be walking you
through how to work


175
00:08:25,405 --> 00:08:27,741 line:-1
with Verifiable Health Records.


176
00:08:27.774 --> 00:08:30.010 line:-2 align:center
So the best way to start working
with this new feature


177
00:08:30,043 --> 00:08:34,281 line:-2
is to load some test
data into HealthKit.


178
00:08:34,314 --> 00:08:36,783 line:-2
As Annie mentioned, there are
three different methods


179
00:08:36,817 --> 00:08:39,086 line:-1
you can use to get started.


180
00:08:39.119 --> 00:08:41.855 line:-2 align:center
If you're in the United States,
Canada, or the United Kingdom,


181
00:08:41.889 --> 00:08:44.191 line:-2 align:center
you can simply connect
to a provider using the existing


182
00:08:44.224 --> 00:08:49.429 line:-2 align:center
Health Records feature
in the Health App.


183
00:08:49.463 --> 00:08:51.298 line:-1 align:center
Another new way we've added


184
00:08:51.331 --> 00:08:53.767 line:-2 align:center
is by downloading
a .smart-health-card file,


185
00:08:53.800 --> 00:08:55.335 line:-1 align:center
an example of which you can find


186
00:08:55.369 --> 00:09:00.841 line:-2 align:center
on the smarthealth.cards
specification website.


187
00:09:00,874 --> 00:09:04,111 line:-2
The third method
is by scanning a QR code.


188
00:09:04,144 --> 00:09:06,013 line:-1
So let's go get some data.


189
00:09:06.046 --> 00:09:07.080 line:-1 align:center
For this demo,


190
00:09:07.114 --> 00:09:12.319 line:-2 align:center
you can start by trying out
the new QR code import.


191
00:09:12.352 --> 00:09:15.055 line:-2 align:center
You'll start
with a device running iOS 15


192
00:09:15.088 --> 00:09:17.391 line:-1 align:center
and scanning this QR code.


193
00:09:17,424 --> 00:09:19,359 line:-2
As soon as you scan it,
you will receive a prompt


194
00:09:19.393 --> 00:09:21.128 line:-2 align:center
to open directly
into the health app.


195
00:09:21.161 --> 00:09:22.596 line:-2 align:center
Once you switch
to the health app,


196
00:09:22.629 --> 00:09:24.064 line:-2 align:center
it will immediately begin
guiding you


197
00:09:24,097 --> 00:09:25,699 line:-2
through
importing this health card.


198
00:09:25.732 --> 00:09:27.935 line:-2 align:center
After selecting
the "Add to Health" option,


199
00:09:27.968 --> 00:09:30.003 line:-2 align:center
the import process
will complete.


200
00:09:30.037 --> 00:09:31.905 line:-2 align:center
You can scroll over
to the browse tab


201
00:09:31.939 --> 00:09:35.409 line:-2 align:center
and see the imported records
under the immunizations section.


202
00:09:35.442 --> 00:09:37.811 line:-2 align:center
If you go ahead
and tap into this category,


203
00:09:37.845 --> 00:09:39.479 line:-2 align:center
you can now
see that you have a vaccine


204
00:09:39,513 --> 00:09:44,852 line:-2
and that its signature has
been verified by the Health app.


205
00:09:44.885 --> 00:09:46.753 line:-2 align:center
Now that you have some
signed records imported


206
00:09:46,787 --> 00:09:48,589 line:-2
into the Health app,
you're ready to go ahead


207
00:09:48.622 --> 00:09:51.325 line:-2 align:center
and request these
records from your own app.


208
00:09:51.358 --> 00:09:52.793 line:-1 align:center
Now, let's look at an example


209
00:09:52.826 --> 00:09:56.029 line:-2 align:center
of how your app can
access this new API.


210
00:09:56.063 --> 00:09:58.899 line:-2 align:center
First, you'll start
by importing HealthKit.


211
00:09:58.932 --> 00:10:00.868 line:-2 align:center
Next,
you'll create a HealthStore,


212
00:10:00.901 --> 00:10:02.636 line:-2 align:center
which you may already
be familiar with doing


213
00:10:02.669 --> 00:10:06.540 line:-2 align:center
if you've used the standard
HealthKit authorization API.


214
00:10:06.573 --> 00:10:09.676 line:-2 align:center
You will also create a list of
record types to specify the type


215
00:10:09.710 --> 00:10:12.646 line:-2 align:center
of data that you would
like the user to share with you.


216
00:10:12,679 --> 00:10:15,048 line:-2
When authorizing, you will
be presented with a list


217
00:10:15,082 --> 00:10:18,552 line:-2
of data to share that only
match these record types.


218
00:10:18,585 --> 00:10:20,921 line:-2
Next, you will create
a predicate specifying


219
00:10:20,954 --> 00:10:23,457 line:-2
the valid date range
for samples to share.


220
00:10:23.490 --> 00:10:25.959 line:-2 align:center
In this example,
you can see labs conducted


221
00:10:25.993 --> 00:10:30.397 line:-2 align:center
in the past seven days are
being requested.


222
00:10:30.430 --> 00:10:32.466 line:-1 align:center
Then you will create a query


223
00:10:32.499 --> 00:10:34.768 line:-2 align:center
using the constructed
recordTypes and predicate,


224
00:10:34.801 --> 00:10:36.136 line:-1 align:center
using a completion to check


225
00:10:36,170 --> 00:10:39,573 line:-2
whether the samples presented
were shared with your app.


226
00:10:39.606 --> 00:10:41.909 line:-2 align:center
Finally,
executing the query will


227
00:10:41,942 --> 00:10:43,944 line:-2
cause an authorization
sheet to be presented


228
00:10:43,977 --> 00:10:47,080 line:-2
where results may be
selected to share with your app.


229
00:10:47.114 --> 00:10:49.383 line:-2 align:center
This dialogue will be
presented every time


230
00:10:49.416 --> 00:10:51.618 line:-1 align:center
this method is executed.


231
00:10:51,652 --> 00:10:54,087 line:-2
Now that you have retrieved
a piece of signed clinical data,


232
00:10:54,121 --> 00:10:55,989 line:-2
you can write some code
to verify its signature


233
00:10:56,023 --> 00:10:57,624 line:-1
within your app.


234
00:10:57.658 --> 00:11:00.260 line:-2 align:center
To review, digital signatures
are a mathematical way


235
00:11:00,294 --> 00:11:03,697 line:-2
to verify the authenticity
of digital information.


236
00:11:03.730 --> 00:11:06.099 line:-2 align:center
This process may be
performed by any device,


237
00:11:06,133 --> 00:11:07,968 line:-2
such as a server
or another mobile device,


238
00:11:08,001 --> 00:11:09,903 line:-2
but let's go ahead
and take a look at how to do it


239
00:11:09.937 --> 00:11:13.841 line:-1 align:center
from within your app.


240
00:11:13.874 --> 00:11:16.844 line:-2 align:center
You can accomplish this
using four main steps.


241
00:11:16,877 --> 00:11:19,980 line:-2
First, you will parse the
clinical data using a Codable.


242
00:11:20,013 --> 00:11:21,148 line:-1
Second,


243
00:11:21,181 --> 00:11:24,084 line:-2
you will decompress the signed
JSON Web Token payload.


244
00:11:24.117 --> 00:11:25.185 line:-1 align:center
Third,


245
00:11:25,219 --> 00:11:28,188 line:-2
you will download the issuer's
public key from their website.


246
00:11:28,222 --> 00:11:30,090 line:-2
And finally,
you will use CryptoKit


247
00:11:30.123 --> 00:11:32.025 line:-1 align:center
to verify the signature.


248
00:11:32.059 --> 00:11:34.962 line:-2 align:center
Let's start by looking
at how to define the data model


249
00:11:34.995 --> 00:11:38.031 line:-2 align:center
for a signed record,
which is formally defined


250
00:11:38.065 --> 00:11:40.968 line:-2 align:center
in the JSON Web Signature
specification.


251
00:11:41.001 --> 00:11:43.470 line:-2 align:center
This struct is defined
in three main parts:


252
00:11:43,504 --> 00:11:47,174 line:-2
A header, payload,
and signature.


253
00:11:47.207 --> 00:11:49.977 line:-2 align:center
You could use Swift Codable
to do the parsing for you,


254
00:11:50,010 --> 00:11:52,079 line:-2
and you should keep an original
representation of the header


255
00:11:52.112 --> 00:11:56.416 line:-2 align:center
and payload around for use
during signature verification.


256
00:11:56,450 --> 00:11:58,819 line:-2
Most importantly,
you'll add an initializer


257
00:11:58.852 --> 00:12:03.123 line:-2 align:center
to parse the JWS from
its compact serialized form.


258
00:12:03.156 --> 00:12:04.858 line:-1 align:center
Next, you'll create a struct


259
00:12:04,892 --> 00:12:07,528 line:-2
used to represent
the JWS Header.


260
00:12:07,561 --> 00:12:09,563 line:-2
You will need this
during the initialization


261
00:12:09,596 --> 00:12:11,031 line:-1
from compact serialization,


262
00:12:11,064 --> 00:12:14,401 line:-2
as well as during the signature
verification process.


263
00:12:14,434 --> 00:12:15,969 line:-1
You can see here in the header


264
00:12:16,003 --> 00:12:18,805 line:-2
that you can expect to find
a specified signature algorithm,


265
00:12:18,839 --> 00:12:22,009 line:-2
a key-ID field used to hold
a public key thumbprint,


266
00:12:22.042 --> 00:12:25.179 line:-1 align:center
and a compression algorithm.


267
00:12:25.212 --> 00:12:28.282 line:-2 align:center
The public key thumbprint
is used to identify which


268
00:12:28.315 --> 00:12:31.919 line:-2 align:center
of the issuer's keys was
used to sign the JWS.


269
00:12:31,952 --> 00:12:35,355 line:-2
This process requires
the ES256 Signature Algorithm


270
00:12:35,389 --> 00:12:37,291 line:-2
and the DEF
compression algorithm,


271
00:12:37.324 --> 00:12:41.128 line:-2 align:center
both of which are supported
by first-party Swift libraries.


272
00:12:41,161 --> 00:12:44,231 line:-2
Now let's look at the code
needed to parse the JWS


273
00:12:44,264 --> 00:12:46,466 line:-1
from its compact serialization.


274
00:12:46.500 --> 00:12:49.102 line:-2 align:center
You'll start by splitting
the serialized string


275
00:12:49.136 --> 00:12:50.871 line:-1 align:center
into its constituent pieces,


276
00:12:50.904 --> 00:12:55.142 line:-2 align:center
each of which is
Base64URL encoded.


277
00:12:55,175 --> 00:12:59,046 line:-2
After creating a JSONDecoder and
Base64URL decoding the header


278
00:12:59,079 --> 00:13:00,814 line:-2
and payload,
you can check to see


279
00:13:00,848 --> 00:13:05,586 line:-2
if the header indicates that the
payload is compressed correctly.


280
00:13:05,619 --> 00:13:08,655 line:-2
After checking the compression,
you will use a utility method


281
00:13:08.689 --> 00:13:10.891 line:-2 align:center
that you can find
in the provided sample project


282
00:13:10.924 --> 00:13:15.796 line:-1 align:center
to decompress the payload.


283
00:13:15.829 --> 00:13:17.998 line:-2 align:center
The next piece you'll
need is a struct


284
00:13:18.031 --> 00:13:20.400 line:-2 align:center
to model
the health card payload.


285
00:13:20.434 --> 00:13:23.537 line:-2 align:center
The two most important pieces
here are the issuer field,


286
00:13:23,570 --> 00:13:25,906 line:-2
which will hold
the issuer's web identifier


287
00:13:25.939 --> 00:13:27.708 line:-2 align:center
that you can use
to fetch their keys,


288
00:13:27,741 --> 00:13:29,676 line:-1
and the other is the VC field,


289
00:13:29,710 --> 00:13:32,613 line:-2
which holds
all the patient data.


290
00:13:32.646 --> 00:13:34.915 line:-2 align:center
For more information
on how to parse the VC field


291
00:13:34,948 --> 00:13:36,283 line:-1
and analyze its contents,


292
00:13:36.316 --> 00:13:38.886 line:-2 align:center
check out the "Handling FHIR
without getting burned" talk


293
00:13:38,919 --> 00:13:41,722 line:-1
from WWDC 2020.


294
00:13:41.755 --> 00:13:44.191 line:-2 align:center
Now that you've seen
how to parse a JWS,


295
00:13:44.224 --> 00:13:47.227 line:-2 align:center
you are ready
to verify its authenticity.


296
00:13:47.261 --> 00:13:49.329 line:-2 align:center
Let's look
at creating an extension


297
00:13:49,363 --> 00:13:52,699 line:-2
that will add a verification
method to your JWS struct.


298
00:13:52,733 --> 00:13:55,636 line:-2
Since you'll be reaching out
to the issuer's website directly


299
00:13:55.669 --> 00:13:58.505 line:-2 align:center
to retrieve their signing keys,
you can use Combine to help


300
00:13:58.539 --> 00:14:00.741 line:-2 align:center
with the asynchronous aspects
of this process,


301
00:14:00,774 --> 00:14:02,676 line:-2
and you can use CryptoKit
to help


302
00:14:02,709 --> 00:14:04,945 line:-1
with the signature verification.


303
00:14:04.978 --> 00:14:06.713 line:-1 align:center
Inside the verification method,


304
00:14:06,747 --> 00:14:09,149 line:-2
you'll begin by pulling out
the issuer's identifier,


305
00:14:09.183 --> 00:14:12.486 line:-2 align:center
which is always
the issuer's web address.


306
00:14:12,519 --> 00:14:15,055 line:-2
Here, you can add your own
method to check if the URL


307
00:14:15.088 --> 00:14:17.457 line:-2 align:center
is one that you personally
trust and abort if it's one


308
00:14:17.491 --> 00:14:20.761 line:-2 align:center
that you don't want to
accept results from.


309
00:14:20.794 --> 00:14:23.864 line:-2 align:center
Next, you will create a URL
to retrieve the issuer's keys


310
00:14:23.897 --> 00:14:30.003 line:-2 align:center
by appending the standard
.wellknown/jwks.json URL path.


311
00:14:30.037 --> 00:14:32.906 line:-2 align:center
This path suffix is defined
in the specification


312
00:14:32,940 --> 00:14:36,743 line:-2
and should be
the same for all issuers.


313
00:14:36,777 --> 00:14:39,246 line:-2
Now that you have constructed
the well-known URL,


314
00:14:39,279 --> 00:14:42,049 line:-2
you can connect to the issuer,
download their keys,


315
00:14:42,082 --> 00:14:45,986 line:-2
and finish
verifying the signature.


316
00:14:46,019 --> 00:14:48,288 line:-2
You'll finish writing
this method by creating


317
00:14:48.322 --> 00:14:50.424 line:-2 align:center
a URLSession
dataTaskPublisher that will


318
00:14:50,457 --> 00:14:54,161 line:-2
connect to the issuer's
well-known jwk endpoint.


319
00:14:54,194 --> 00:14:58,465 line:-2
You can then map it to data,
decode it using a jsonDecoder


320
00:14:58,498 --> 00:15:02,503 line:-2
to a set of JWKs,
and finally map it to a boolean,


321
00:15:02.536 --> 00:15:05.873 line:-2 align:center
indicating whether
or not the signature is valid.


322
00:15:05.906 --> 00:15:09.009 line:-2 align:center
Inside the final map block
you will select the issuer's key


323
00:15:09.042 --> 00:15:12.212 line:-2 align:center
based on what
the JWS header indicates.


324
00:15:12,246 --> 00:15:14,615 line:-2
The final piece
involves using CryptoKit


325
00:15:14,648 --> 00:15:17,084 line:-1
to verify the signature.


326
00:15:17,117 --> 00:15:19,419 line:-2
According
to the JWS specification,


327
00:15:19.453 --> 00:15:21.855 line:-2 align:center
the signed portion of
data is formed by concatenating


328
00:15:21.889 --> 00:15:27.194 line:-2 align:center
the Base64URL-encoded header
and payload joined by a period.


329
00:15:27,227 --> 00:15:30,664 line:-2
Next, you'll convert
the downloaded JWK keys


330
00:15:30,697 --> 00:15:34,735 line:-2
to CryptoKit P256 signing keys,
using a utility method


331
00:15:34,768 --> 00:15:39,306 line:-2
that you can find in the sample
project accompanying this talk.


332
00:15:39,339 --> 00:15:42,442 line:-2
Finally, you'll use CryptoKit's
isValidSignature method


333
00:15:42,476 --> 00:15:45,179 line:-2
to do the verification
of the signature.


334
00:15:45.212 --> 00:15:47.381 line:-2 align:center
Now that your data model
and all logic needed


335
00:15:47.414 --> 00:15:49.583 line:-2 align:center
to verify its authenticity is
defined,


336
00:15:49.616 --> 00:15:52.486 line:-1 align:center
you can put everything together.


337
00:15:52,519 --> 00:15:54,354 line:-2
Taking a look
at the earlier example


338
00:15:54.388 --> 00:15:57.357 line:-2 align:center
of how to call the new API,
you can replace this comment


339
00:15:57.391 --> 00:16:01.361 line:-2 align:center
with a call to your new
verification method.


340
00:16:01,395 --> 00:16:04,698 line:-2
Since the API returns
a list of all selected samples,


341
00:16:04.731 --> 00:16:07.167 line:-2 align:center
you can select the first one
from the list.


342
00:16:07.201 --> 00:16:10.337 line:-2 align:center
Next,
parse it from data to a String.


343
00:16:10.370 --> 00:16:14.308 line:-2 align:center
Then parse it using your compact
serialization initializer.


344
00:16:14,341 --> 00:16:16,677 line:-2
Finally, call your new
verification method,


345
00:16:16.710 --> 00:16:19.179 line:-2 align:center
and listen
for emitted boolean results.


346
00:16:19.213 --> 00:16:20.547 line:-1 align:center
And just like that,


347
00:16:20.581 --> 00:16:23.050 line:-2 align:center
we've seen how to take
a signed piece of clinical data


348
00:16:23.083 --> 00:16:24.818 line:-2 align:center
download the issuer's
signing keys,


349
00:16:24.852 --> 00:16:27.387 line:-2 align:center
and validate the signature
of these records.


350
00:16:27,421 --> 00:16:30,390 line:-2
Now, I'll hand things
back to Annie to summarize.


351
00:16:30,424 --> 00:16:31,925 line:-2
[Annie]
Thanks, Cary.


352
00:16:31.959 --> 00:16:34.094 line:-2 align:center
Before we wrap up,
I want to talk


353
00:16:34.127 --> 00:16:38.332 line:-2 align:center
about privacy with respect
to Verifiable Health Records.


354
00:16:38.365 --> 00:16:41.335 line:-2 align:center
Hopefully, I've made it clear
throughout this session


355
00:16:41.368 --> 00:16:43.437 line:-2 align:center
that the Verifiable
Health Records feature


356
00:16:43.470 --> 00:16:46.240 line:-2 align:center
is built with
user privacy in mind.


357
00:16:46.273 --> 00:16:47.574 line:-1 align:center
First of all,


358
00:16:47,608 --> 00:16:51,211 line:-2
the SMART Health Card
specification uses data profiles


359
00:16:51.245 --> 00:16:54.615 line:-2 align:center
that minimize the information
an issuer should include


360
00:16:54.648 --> 00:16:56.617 line:-1 align:center
in each record.


361
00:16:56.650 --> 00:16:59.987 line:-2 align:center
The Health app is designed to
protect sensitive health data,


362
00:17:00.020 --> 00:17:01.722 line:-1 align:center
so when a phone is locked,


363
00:17:01.755 --> 00:17:05.058 line:-2 align:center
all health and fitness data
in the Health app is encrypted,


364
00:17:05.092 --> 00:17:08.395 line:-2 align:center
which includes
verifiable health records.


365
00:17:08.428 --> 00:17:12.065 line:-2 align:center
Access to verifiable health
records requires an application


366
00:17:12.099 --> 00:17:15.536 line:-2 align:center
to an entitlement that will
come with additional obligations


367
00:17:15,569 --> 00:17:20,240 line:-2
to ensure that this sensitive
health data is not misused.


368
00:17:20,274 --> 00:17:24,244 line:-2
And finally, users will
have additional control over how


369
00:17:24.278 --> 00:17:28.382 line:-2 align:center
to share their verifiable
health records with your app.


370
00:17:28.415 --> 00:17:30.817 line:-2 align:center
Let's review what
we've covered today.


371
00:17:30,851 --> 00:17:34,454 line:-2
In iOS 15, building
on top of Health Records,


372
00:17:34,488 --> 00:17:37,591 line:-2
we are bringing the capability
to import verifiable records


373
00:17:37,624 --> 00:17:39,760 line:-2
into the Health app
and for developers


374
00:17:39.793 --> 00:17:42.729 line:-2 align:center
to read this data
with a new API.


375
00:17:42,763 --> 00:17:47,835 line:-2
To wrap up,
here's what you can do next.


376
00:17:47.868 --> 00:17:49.837 line:-1 align:center
First, to learn more


377
00:17:49.870 --> 00:17:52.339 line:-2 align:center
about the verifiable health data
ecosystem,


378
00:17:52.372 --> 00:17:55.809 line:-2 align:center
check out the SMART Health Cards
specification.


379
00:17:55,843 --> 00:17:58,278 line:-2
Import test records
into the Health app


380
00:17:58,312 --> 00:18:00,547 line:-1
to try it out yourself.


381
00:18:00,581 --> 00:18:02,649 line:-2
Download the sample app,
which shows


382
00:18:02,683 --> 00:18:06,353 line:-2
how you can query for
and verify those test records.


383
00:18:06.386 --> 00:18:09.256 line:-2 align:center
And finally, when
you're ready to ship your app,


384
00:18:09,289 --> 00:18:11,658 line:-2
request the HealthKit access
entitlement


385
00:18:11,692 --> 00:18:14,094 line:-1
for verifiable health records.


386
00:18:14,127 --> 00:18:18,498 line:-2
Thank you for watching,
and have a great WWDC.


387
00:18:18.532 --> 00:18:20.634 line:-1 align:center
[music]

