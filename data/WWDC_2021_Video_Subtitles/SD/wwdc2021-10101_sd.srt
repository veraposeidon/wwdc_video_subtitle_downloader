2
00:00:02,002 --> 00:00:05,005 line:-1
[percussive music]


3
00:00:09,042 --> 00:00:10,744 line:-2
[Ernest]
Hello, and welcome to


4
00:00:10,744 --> 00:00:12,880 line:-2
"Discover rolling clips
with ReplayKit."


5
00:00:12.880 --> 00:00:14.248 line:-1 align:center
My name is Ernest,


6
00:00:14.248 --> 00:00:17.150 line:-2 align:center
and I'm a software engineer
on the ReplayKit team.


7
00:00:17.150 --> 00:00:19.553 line:-2 align:center
Today, I'm really excited
to show you a new way


8
00:00:19.553 --> 00:00:22.055 line:-2 align:center
to capture
your application highlights.


9
00:00:22,055 --> 00:00:25,225 line:-2
Let me start by giving you
an overview of ReplayKit.


10
00:00:26,527 --> 00:00:29,196 line:-2
ReplayKit is a framework
that enables you to record


11
00:00:29,196 --> 00:00:32,065 line:-2
your application's screen
and audio.


12
00:00:32,065 --> 00:00:34,735 line:-2
When people want to make
an instructional video,


13
00:00:34.735 --> 00:00:37.104 line:-2 align:center
or simply just wanna
show off their gameplay,


14
00:00:37.104 --> 00:00:38.872 line:-2 align:center
in-app screen recording
creates a video


15
00:00:38.872 --> 00:00:41.575 line:-2 align:center
that they can save and share
with their friends.


16
00:00:41,575 --> 00:00:43,544 line:-2
And what if you wanted
more control over


17
00:00:43,544 --> 00:00:45,679 line:-1
the video content people create?


18
00:00:45.679 --> 00:00:48.782 line:-2 align:center
You may want to add additional
filters, or overlays.


19
00:00:48,782 --> 00:00:51,818 line:-2
You can do this
with in-app screen capture.


20
00:00:51.818 --> 00:00:55.022 line:-2 align:center
In-app screen capture will
give the audio and video samples


21
00:00:55,022 --> 00:00:57,157 line:-2
directly to your application
process,


22
00:00:57,157 --> 00:00:58,492 line:-1
so you'll have complete control


23
00:00:58.492 --> 00:01:02.062 line:-2 align:center
over the content
that is being created.


24
00:01:02.062 --> 00:01:04.798 line:-2 align:center
And we all know the next
best thing to playing a game


25
00:01:04.798 --> 00:01:07.067 line:-1 align:center
is watching gameplay live.


26
00:01:07,067 --> 00:01:08,969 line:-2
In-app broadcast makes it easy
for people


27
00:01:08,969 --> 00:01:12,506 line:-2
to stream your application to
third-party broadcast services,


28
00:01:12.506 --> 00:01:16.443 line:-2 align:center
to be viewed all around
the world.


29
00:01:16.443 --> 00:01:19.346 line:-2 align:center
While our current recording
features cover a wide variety


30
00:01:19.346 --> 00:01:23.016 line:-2 align:center
of use cases, there is one
that we currently don't.


31
00:01:23.016 --> 00:01:25.586 line:-2 align:center
So, imagine your players
just fought all the enemies


32
00:01:25,586 --> 00:01:27,955 line:-2
and unlocked the key
to a level in your game,


33
00:01:27.955 --> 00:01:30.457 line:-2 align:center
and now they wanna share that
moment with their friends.


34
00:01:30.457 --> 00:01:33.193 line:-2 align:center
But because it's their first
time playing this level,


35
00:01:33,193 --> 00:01:35,562 line:-2
they didn't know something
exciting was gonna happen,


36
00:01:35,562 --> 00:01:38,298 line:-2
and they weren't able
to capture that moment.


37
00:01:38.298 --> 00:01:39.967 line:-2 align:center
Currently, players will
need to record


38
00:01:39,967 --> 00:01:42,002 line:-2
their entire gameplay
in order to save


39
00:01:42.002 --> 00:01:44.137 line:-1 align:center
all their memorable highlights.


40
00:01:44,137 --> 00:01:46,273 line:-2
This results in a large
recording that will


41
00:01:46.273 --> 00:01:48.308 line:-1 align:center
not only take up a lot of space,


42
00:01:48,308 --> 00:01:52,980 align:center
but will require time to trim
into shorter clips.


43
00:01:52,980 --> 00:01:54,715 align:center
Wouldn't it be awesome
if you could record


44
00:01:54,715 --> 00:01:57,584 line:0
all the highlights
right when they happen?


45
00:01:57,584 --> 00:02:00,487 line:0
Or even better, what if
ReplayKit does this for you,


46
00:02:00,487 --> 00:02:04,191 align:center
and gives you the video
clip of each moment?


47
00:02:04,191 --> 00:02:06,493 align:center
This year,
I'm excited to show you


48
00:02:06,493 --> 00:02:09,129 align:center
a new feature
we've been working on,


49
00:02:09,129 --> 00:02:12,266 align:center
clips recording.


50
00:02:12,266 --> 00:02:14,368 align:center
Clips recording will
keep a rolling buffer


51
00:02:14,368 --> 00:02:16,837 line:0
of audio and video samples.


52
00:02:16,837 --> 00:02:21,208 line:0
When clip export is called, the
samples up to 15 seconds prior


53
00:02:21,208 --> 00:02:24,645 line:0
can be exported
into a short video clip.


54
00:02:24,645 --> 00:02:28,015 align:center
So now, instead of needing
to know when to Start Recording,


55
00:02:28,015 --> 00:02:30,450 line:0
you just need to know
when you want to export.


56
00:02:31,685 --> 00:02:33,987 line:-2
There are several ways
to export a video clip.


57
00:02:33.987 --> 00:02:36.957 line:-2 align:center
You can add UI buttons
or a game controller support


58
00:02:36,957 --> 00:02:38,292 line:-1
to your application,


59
00:02:38,292 --> 00:02:39,993 line:-2
so people can have
manual control


60
00:02:39.993 --> 00:02:42.596 line:-1 align:center
on when to capture clips.


61
00:02:42.596 --> 00:02:44.198 line:-2 align:center
With the tap of a button,
they can


62
00:02:44,198 --> 00:02:47,100 line:-2
get the clip exactly
when they want it.


63
00:02:47.100 --> 00:02:49.002 line:-2 align:center
You can also add triggers
in your application


64
00:02:49,002 --> 00:02:51,839 line:-2
that will automatically
capture clips.


65
00:02:51,839 --> 00:02:53,740 line:-2
With this,
you will always capture


66
00:02:53.740 --> 00:02:56.877 line:-2 align:center
those exciting moments when they
get a perfect combo,


67
00:02:56.877 --> 00:02:58.579 line:-1 align:center
defeat the final boss,


68
00:02:58,579 --> 00:03:00,747 line:-1
or beat their best speed run.


69
00:03:00.747 --> 00:03:03.083 line:-2 align:center
And with all of these clips,
you can create


70
00:03:03.083 --> 00:03:06.053 line:-1 align:center
personalized user experiences.


71
00:03:06,053 --> 00:03:07,855 line:-2
You could add a custom
overlay that opens


72
00:03:07.855 --> 00:03:09.923 line:-1 align:center
to a collection of recordings,


73
00:03:09.923 --> 00:03:11.425 line:-2 align:center
or you could present
a highlight reel


74
00:03:11,425 --> 00:03:13,827 line:-2
with all the clips captured
at the end of a level


75
00:03:13,827 --> 00:03:16,129 line:-2
for your players
to see and share.


76
00:03:17.497 --> 00:03:21.268 line:-2 align:center
Clips recording will be
available for iOS and macOS,


77
00:03:21,268 --> 00:03:23,570 line:-2
and is a powerful feature
that will sit alongside


78
00:03:23,570 --> 00:03:29,209 line:-2
our existing recording,
capture, and broadcast APIs.


79
00:03:29,209 --> 00:03:32,713 line:-2
Similar to our other features,
clips recording will provide


80
00:03:32.713 --> 00:03:34.448 line:-1 align:center
the same HD quality,


81
00:03:34.448 --> 00:03:36.216 line:-1 align:center
low-performance impact,


82
00:03:36,216 --> 00:03:38,585 line:-1
and built-in privacy safeguards.


83
00:03:38.585 --> 00:03:41.755 line:-2 align:center
How does clips recording
work under the hood?


84
00:03:41,755 --> 00:03:43,557 line:-1
Let's take a look.


85
00:03:43,557 --> 00:03:49,463 line:-2
Clips recording includes three
APIs: start, stop, and export.


86
00:03:49.463 --> 00:03:51.231 line:-1 align:center
To start clip buffering,


87
00:03:51,231 --> 00:03:53,734 line:-2
your application should
call into RPScreenRecorder


88
00:03:53.734 --> 00:03:56.870 line:-2 align:center
to get the sharedRecorder
singleton instance.


89
00:03:56,870 --> 00:03:58,305 align:center
With the shared instance,
you can


90
00:03:58,305 --> 00:04:01,341 align:center
call the startClipBuffering API.


91
00:04:01,341 --> 00:04:03,443 line:0
At which point,
ReplayKit will store screen


92
00:04:03,443 --> 00:04:07,814 align:center
and audio samples from your
application in a rolling buffer.


93
00:04:07,814 --> 00:04:10,484 line:0
Every time ReplayKit
receives new samples,


94
00:04:10,484 --> 00:04:14,755 line:0
any samples older than 15
seconds will be discarded.


95
00:04:14,755 --> 00:04:17,124 line:0
After the rolling buffer starts,
ReplayKit


96
00:04:17,124 --> 00:04:20,594 line:0
waits for your application
to tell it to export.


97
00:04:20,594 --> 00:04:24,031 line:0
When the application calls
the export clip API,


98
00:04:24,031 --> 00:04:26,667 align:center
ReplayKit takes care
of the rest and returns you


99
00:04:26,667 --> 00:04:29,570 align:center
the video clip of that moment.


100
00:04:29,570 --> 00:04:32,105 line:0
When you no longer need
the rolling buffer,


101
00:04:32,105 --> 00:04:34,708 align:center
or when you want to use
another ReplayKit feature,


102
00:04:34,708 --> 00:04:36,777 align:center
such as in-app broadcast,


103
00:04:36,777 --> 00:04:38,946 align:center
you can call the stop API,


104
00:04:38,946 --> 00:04:41,048 align:center
and ReplayKit will
tear down the session.


105
00:04:42.516 --> 00:04:44.351 line:-1 align:center
With this information in mind,


106
00:04:44,351 --> 00:04:45,786 line:-2
let me show you
a sample project


107
00:04:45,786 --> 00:04:48,622 line:-2
that implements
the new clips APIs.


108
00:04:49,456 --> 00:04:51,725 align:center
You may already be familiar
with this sample project


109
00:04:51,725 --> 00:04:53,660 align:center
from our session last year.


110
00:04:53,660 --> 00:04:57,531 align:center
The updated sample project
now includes code for clips.


111
00:04:57,531 --> 00:05:00,334 line:-1
Let's take a look at this code.


112
00:05:00.334 --> 00:05:02.436 line:-2 align:center
Just like the other
recording sessions,


113
00:05:02,436 --> 00:05:05,372 line:-2
here's the IBAction associated
with the "start clips" button


114
00:05:05,372 --> 00:05:07,608 line:-1
in the main storyboard.


115
00:05:07.608 --> 00:05:09.810 line:-2 align:center
This button is used to start
clip buffering


116
00:05:09,810 --> 00:05:11,778 line:-1
if you aren't already active,


117
00:05:11.778 --> 00:05:14.848 line:-2 align:center
and stop clip
buffering if you are active.


118
00:05:14,848 --> 00:05:16,683 line:-2
Now, let's go ahead
and take a look at


119
00:05:16,683 --> 00:05:20,287 line:-2
what happens when you start
clip buffering.


120
00:05:20.287 --> 00:05:22.923 line:-2 align:center
Here is the code
to start clip buffering.


121
00:05:22,923 --> 00:05:24,958 line:-2
You're going to get
the shared recorder instance


122
00:05:24.958 --> 00:05:28.061 line:-2 align:center
from RPScreenRecorder
and call startClipBuffering


123
00:05:28,061 --> 00:05:30,664 line:-2
with your
completion handler.


124
00:05:30.664 --> 00:05:32.132 line:-2 align:center
Here, within
the completion handler,


125
00:05:32,132 --> 00:05:34,334 line:-2
you will need to handle any
error that occurred


126
00:05:34,334 --> 00:05:35,836 line:-1
while attempting to start,


127
00:05:35,836 --> 00:05:38,672 line:-1
including updating the UI.


128
00:05:38,672 --> 00:05:41,241 line:-2
If there's no error, then you
should also update the UI


129
00:05:41,241 --> 00:05:43,677 line:-2
to show that the recording
is currently active.


130
00:05:45.646 --> 00:05:47.814 line:-2 align:center
Similar to start,
there's a stop clip


131
00:05:47,814 --> 00:05:50,384 line:-2
buffering method
in the sample project.


132
00:05:50.384 --> 00:05:52.953 line:-2 align:center
This is where you're going
to get the shared instance,


133
00:05:52.953 --> 00:05:56.757 line:-2 align:center
but this time, you'll call
the stopClipBuffering API.


134
00:05:56.757 --> 00:05:58.959 line:-2 align:center
In the completion handler,
you will need to handle


135
00:05:58,959 --> 00:06:01,728 line:-2
any error that occurred
while attempting to stop,


136
00:06:01.728 --> 00:06:04.665 line:-2 align:center
and should update the UI to show
that you're no longer recording.


137
00:06:06,533 --> 00:06:08,335 line:-2
Now that I went through
the code for start


138
00:06:08.335 --> 00:06:10.003 line:-1 align:center
and stop clip buffering,


139
00:06:10.003 --> 00:06:13.140 line:-2 align:center
let's look at the code
needed to export a clip.


140
00:06:13.140 --> 00:06:14.942 line:-2 align:center
This is
the code for the IBAction


141
00:06:14,942 --> 00:06:18,111 line:-2
associated
with the "export clip" button.


142
00:06:18.111 --> 00:06:20.113 line:-2 align:center
The action is triggered
when a person decides


143
00:06:20.113 --> 00:06:22.382 line:-1 align:center
they want to generate a clip.


144
00:06:22.382 --> 00:06:24.751 line:-2 align:center
Just a reminder that
you're not limited


145
00:06:24.751 --> 00:06:28.121 line:-2 align:center
by this approach and may
export clips automatically


146
00:06:28,121 --> 00:06:31,558 line:-2
based on your own
application triggers.


147
00:06:31,558 --> 00:06:34,728 line:-2
Here, if you're actively
recording and the button


148
00:06:34,728 --> 00:06:38,265 line:-2
is enabled from the previous
startClipBuffering method,


149
00:06:38,265 --> 00:06:41,802 line:-2
the exportClip function
will be called.


150
00:06:41,802 --> 00:06:43,904 line:-1
To call the exportClip API,


151
00:06:43,904 --> 00:06:48,242 line:-2
you will need to specify
a URL and a clip duration.


152
00:06:50,143 --> 00:06:52,813 line:-2
Similar to the start
and stop APIs,


153
00:06:52.813 --> 00:06:56.750 line:-2 align:center
you will then handle any
errors in the completionHandler.


154
00:06:56,750 --> 00:06:58,952 line:-2
If there's no error,
then you should have


155
00:06:58,952 --> 00:07:01,922 line:-1
the clip at the specified URL.


156
00:07:01.922 --> 00:07:04.992 line:-2 align:center
With access to the clips,
you can then build and organize


157
00:07:04.992 --> 00:07:07.828 line:-1 align:center
your own user experiences.


158
00:07:07.828 --> 00:07:11.732 line:-2 align:center
In my sample code here, the clip
is simply saved to Photos.


159
00:07:13,800 --> 00:07:15,235 align:center
And that's it!


160
00:07:15,235 --> 00:07:18,138 line:0
With these three APIs,
you can now add clips recording


161
00:07:18,138 --> 00:07:19,840 align:center
in your application.


162
00:07:19,840 --> 00:07:23,210 line:0
You will have direct access to
the clips in the specified URL,


163
00:07:23,210 --> 00:07:26,914 align:center
so you can build
your own in-app experiences.


164
00:07:26.914 --> 00:07:29.783 line:-2 align:center
As previously mentioned,
another way to get clips


165
00:07:29.783 --> 00:07:32.853 line:-2 align:center
is by adding game
controller support.


166
00:07:32,853 --> 00:07:35,055 line:-2
The game controller
framework will now have


167
00:07:35,055 --> 00:07:37,524 line:-1
built-in clips recording.


168
00:07:37,524 --> 00:07:40,227 line:-2
Keep in mind, clips exported
from the game controller


169
00:07:40.227 --> 00:07:43.564 line:-2 align:center
will save directly
to Photos or the Desktop.


170
00:07:43,564 --> 00:07:45,699 line:-2
So, to make your own
in-app experiences


171
00:07:45,699 --> 00:07:47,201 line:-1
with the generated clips,


172
00:07:47,201 --> 00:07:51,772 line:-2
you will need to implement
the ReplayKit clips API.


173
00:07:51.772 --> 00:07:53.807 line:-2 align:center
When integrating
both ReplayKit


174
00:07:53.807 --> 00:07:55.375 line:-2 align:center
and the game
controller framework,


175
00:07:55.375 --> 00:07:56.877 line:-1 align:center
it is good idea to make sure


176
00:07:56,877 --> 00:08:00,347 line:-2
you're using key value
observing for both available


177
00:08:00.347 --> 00:08:04.551 line:-2 align:center
and recording properties
on RPScreenRecorder.


178
00:08:04,551 --> 00:08:06,620 line:-2
Also be sure to follow
the protocol


179
00:08:06.620 --> 00:08:09.823 line:-2 align:center
RPScreenRecorderDelegate
so that you can update


180
00:08:09.823 --> 00:08:13.093 line:-2 align:center
your application's state
as needed.


181
00:08:13.093 --> 00:08:15.829 line:-2 align:center
And it's that simple
to integrate clips recording


182
00:08:15.829 --> 00:08:17.731 line:-1 align:center
in your applications.


183
00:08:17,731 --> 00:08:20,234 line:-2
With clips recording,
your application will be ready


184
00:08:20.234 --> 00:08:23.871 line:-2 align:center
to capture all of the exciting
moments when they happen.


185
00:08:23.871 --> 00:08:26.106 line:-2 align:center
I look forward to seeing
all of the clips


186
00:08:26,106 --> 00:08:29,343 line:-2
and the new user experiences
you will create.


187
00:08:29.343 --> 00:08:31.445 line:-2 align:center
Thank you so much
for watching our session.


188
00:08:31,445 --> 00:08:34,381 line:-2
I hope you
have a wonderful WWDC.


189
00:08:34.381 --> 00:08:37.184 line:-1 align:center
[percussive music]

