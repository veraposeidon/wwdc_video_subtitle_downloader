2
00:00:01.969 --> 00:00:07.975 line:-1 align:center
[music]


3
00:00:09.409 --> 00:00:10.244 line:-1 align:center
[Yann] Hi.


4
00:00:10,277 --> 00:00:11,478 line:-1
My name is Yann,


5
00:00:11,512 --> 00:00:12,479 line:-1
and I'd like to tell you about


6
00:00:12,513 --> 00:00:14,548 line:-2
a new way to connect
your Bluetooth devices


7
00:00:14,581 --> 00:00:16,283 line:-1
to Apple Watch.


8
00:00:16.316 --> 00:00:17.150 line:-1 align:center
First,


9
00:00:17.184 --> 00:00:20.854 line:-2 align:center
I'll review how Core Bluetooth
works on watchOS 7.


10
00:00:20,888 --> 00:00:25,459 line:-2
Then I'll talk about an exciting
new feature in watchOS 8.


11
00:00:25.492 --> 00:00:27.027 line:-1 align:center
And I'll discuss the best ways


12
00:00:27,060 --> 00:00:29,429 line:-2
to design your accessories
and your app


13
00:00:29,463 --> 00:00:31,665 line:-1
to work with Apple Watch.


14
00:00:31,698 --> 00:00:34,067 line:-2
Let's start with
how Core Bluetooth works today.


15
00:00:34.101 --> 00:00:36.703 line:-2 align:center
You can only connect
to Bluetooth devices


16
00:00:36,737 --> 00:00:39,273 line:-2
while your app
is in the foreground


17
00:00:39,306 --> 00:00:41,341 line:-1
or during a background session.


18
00:00:41,375 --> 00:00:44,645 line:-2
This is great when a person
wants to focus on your app


19
00:00:44.678 --> 00:00:46.947 line:-2 align:center
to get information
from their accessory.


20
00:00:46.980 --> 00:00:49.383 line:-2 align:center
But what if you wanted
to have a complication


21
00:00:49.416 --> 00:00:51.351 line:-2 align:center
with information
from your accessory?


22
00:00:52,186 --> 00:00:53,120 line:-1
Currently,


23
00:00:53,153 --> 00:00:55,322 line:-2
the complication
could not be updated


24
00:00:55,355 --> 00:00:57,658 line:-1
unless a person opened your app.


25
00:00:57,691 --> 00:00:59,426 line:-1
Now in watchOS 8,


26
00:00:59,459 --> 00:01:01,028 line:-2
you can connect
your Bluetooth accessory


27
00:01:01,061 --> 00:01:03,463 line:-1
during Background App Refresh.


28
00:01:03.497 --> 00:01:06.166 line:-2 align:center
This enables you to update
your complications


29
00:01:06.200 --> 00:01:08.602 line:-2 align:center
with information
from your accessory


30
00:01:08.635 --> 00:01:11.939 line:-2 align:center
or send local notification
if its battery is running low.


31
00:01:11,972 --> 00:01:14,942 line:-2
With my example
temperature sensor,


32
00:01:14,975 --> 00:01:18,445 line:-2
now I can update the temperature
in a complication,


33
00:01:18.478 --> 00:01:22.349 line:-2 align:center
so I can see it
whenever I glance at my watch.


34
00:01:22.382 --> 00:01:23.550 line:-2 align:center
We are using
a temperature sensor


35
00:01:23.584 --> 00:01:25.352 line:-1 align:center
in our example,


36
00:01:25,385 --> 00:01:27,054 line:-1
but it could be any accessory


37
00:01:27.087 --> 00:01:31.024 line:-2 align:center
that someone would want to see
at-a-glance information about.


38
00:01:32,192 --> 00:01:35,929 line:-2
To start using Bluetooth
during Background App Refresh,


39
00:01:35,963 --> 00:01:38,799 line:-1
simply add bluetooth-central


40
00:01:38.832 --> 00:01:42.836 line:-2 align:center
to UIBackgroundModes
in your Info.plist.


41
00:01:42,870 --> 00:01:46,740 line:-2
This may also appear
as "Required background modes"


42
00:01:46,773 --> 00:01:50,811 line:-2
and "App communicates
using CoreBluetooth."


43
00:01:50,844 --> 00:01:54,548 line:-2
Here's a table showing
differences between platforms.


44
00:01:54,581 --> 00:01:55,482 line:-1
These are the current


45
00:01:55.516 --> 00:01:56.817 line:-1 align:center
supported configurations


46
00:01:56,850 --> 00:01:59,453 line:-1
for Bluetooth Low Energy.


47
00:01:59.486 --> 00:02:02.289 line:-2 align:center
Let's dive into how
your accessory communicates


48
00:02:02,322 --> 00:02:03,557 line:-1
with Apple Watch.


49
00:02:04.291 --> 00:02:08.195 line:-2 align:center
Let's say a user has already
paired with your accessory


50
00:02:08,228 --> 00:02:10,998 line:-1
and they open your Watch app.


51
00:02:11.031 --> 00:02:13.767 line:-2 align:center
Your app tries to connect
to your accessory,


52
00:02:13.800 --> 00:02:16.003 line:-2 align:center
and as soon as
an advertisement is seen,


53
00:02:16,036 --> 00:02:19,239 line:-2
a Bluetooth LE connection
is established.


54
00:02:19,273 --> 00:02:22,109 line:-2
When a user exits
your watchOS app,


55
00:02:22.142 --> 00:02:24.611 line:-2 align:center
the Bluetooth
connection will terminate.


56
00:02:24,645 --> 00:02:26,713 line:-2
The Bluetooth connection
won't be available


57
00:02:26.747 --> 00:02:30.684 line:-2 align:center
until the next time your watchOS
app has runtime available.


58
00:02:30,717 --> 00:02:32,486 line:-1
Let's analyze what happens


59
00:02:32,519 --> 00:02:34,488 line:-2
during your next
background app refresh


60
00:02:34,521 --> 00:02:36,290 line:-1
on watchOS 8.


61
00:02:36,323 --> 00:02:39,226 line:-2
Your app initiate a connection
to a known peripheral,


62
00:02:39.259 --> 00:02:41.962 line:-2 align:center
and the next time
an advertisement is received,


63
00:02:41.995 --> 00:02:45.299 line:-2 align:center
Apple Watch will connect
to your accessory.


64
00:02:45.332 --> 00:02:47.835 line:-2 align:center
As soon as you're finished
retrieving data,


65
00:02:47,868 --> 00:02:50,137 line:-2
you can terminate
the Bluetooth connection


66
00:02:50,170 --> 00:02:52,873 line:-1
and process the data.


67
00:02:52.906 --> 00:02:55.843 line:-2 align:center
Background App Refresh
can happen at any time,


68
00:02:55,876 --> 00:02:59,146 line:-2
so your accessory should
advertise as often as possible


69
00:02:59.179 --> 00:03:02.583 line:-2 align:center
when it has an important update
to display on Apple Watch.


70
00:03:03,617 --> 00:03:04,451 line:-1
Now,


71
00:03:04.484 --> 00:03:06.386 line:-2 align:center
let's say your accessory
advertises very rarely


72
00:03:06,420 --> 00:03:08,455 line:-1
to conserve power.


73
00:03:08.488 --> 00:03:09.323 line:-1 align:center
It is possible


74
00:03:09.356 --> 00:03:11.124 line:-2 align:center
that no advertisement
will be received


75
00:03:11,158 --> 00:03:13,327 line:-2
during
the Background App Refresh


76
00:03:13.360 --> 00:03:15.896 line:-1 align:center
and no connection will occur.


77
00:03:15.929 --> 00:03:18.165 line:-2 align:center
Background App Refresh is
not guaranteed to happen


78
00:03:18.198 --> 00:03:20.000 line:-1 align:center
at a specific time,


79
00:03:20.033 --> 00:03:22.503 line:-2 align:center
so your accessory must advertise
frequently


80
00:03:22,536 --> 00:03:24,972 line:-2
whenever
it has important updates.


81
00:03:25,005 --> 00:03:26,607 line:-1
One possible strategy


82
00:03:26,640 --> 00:03:29,409 line:-2
is to buffer sensor data
on your accessory.


83
00:03:29,443 --> 00:03:31,512 line:-2
When it's close
to the buffer limit,


84
00:03:31,545 --> 00:03:33,080 line:-1
increase its advertisement rates


85
00:03:33.113 --> 00:03:37.718 line:-2 align:center
to increase the chances
of reconnection to Apple Watch.


86
00:03:37,751 --> 00:03:39,052 line:-1
As a guide,


87
00:03:39.086 --> 00:03:41.355 line:-2 align:center
you should advertise
at least every two seconds


88
00:03:41,388 --> 00:03:43,323 line:-1
in ideal RF conditions.


89
00:03:43.924 --> 00:03:45.559 line:-2 align:center
If you expect your device
to work


90
00:03:45.592 --> 00:03:47.995 line:-2 align:center
in a more challenging
RF condition,


91
00:03:48,028 --> 00:03:50,597 line:-2
your accessory should advertise
more frequently


92
00:03:50,631 --> 00:03:52,933 line:-2
to increase the chances
of reconnection.


93
00:03:52.966 --> 00:03:55.836 line:-2 align:center
Let's look at how
your app will interact


94
00:03:55.869 --> 00:03:57.471 line:-1 align:center
with Core Bluetooth


95
00:03:57,504 --> 00:04:02,075 line:-2
and how watchOS will interact
with your Bluetooth accessory.


96
00:04:02.109 --> 00:04:04.311 line:-1 align:center
This is a time diagram flow.


97
00:04:04.344 --> 00:04:08.282 line:-2 align:center
Time advances
from top to the bottom.


98
00:04:08,315 --> 00:04:10,050 line:-1
Let's start with what happens


99
00:04:10.083 --> 00:04:13.487 line:-2 align:center
when your app
is in the foreground.


100
00:04:13.520 --> 00:04:15.856 line:-1 align:center
Your accessory is advertising.


101
00:04:15,889 --> 00:04:17,591 line:-1
You can scan for a new device


102
00:04:17,624 --> 00:04:19,860 line:-2
to detect
your Bluetooth accessory.


103
00:04:19,893 --> 00:04:22,196 line:-2
Once your device has been
discovered,


104
00:04:22,229 --> 00:04:25,232 line:-2
you can initiate
a connection to it.


105
00:04:25,265 --> 00:04:28,468 line:-2
As soon as Apple Watch
receives an advertisement,


106
00:04:28.502 --> 00:04:30.704 line:-1 align:center
it will connect.


107
00:04:30,737 --> 00:04:32,773 line:-2
Once you're done
with the Bluetooth connection,


108
00:04:32.806 --> 00:04:36.310 line:-2 align:center
you can call
cancelPeripheralConnection,


109
00:04:36.343 --> 00:04:39.813 line:-2 align:center
which will disconnect
your Bluetooth device.


110
00:04:39.847 --> 00:04:42.182 line:-1 align:center
Then, at a later point,


111
00:04:42,216 --> 00:04:44,685 line:-2
when the Apple Watch screen
goes off,


112
00:04:44.718 --> 00:04:47.287 line:-2 align:center
your watchOS app
will be suspended.


113
00:04:47,321 --> 00:04:49,857 line:-2
Now, let's take a look
at what happens


114
00:04:49,890 --> 00:04:52,092 line:-2
in the next
Background App Refresh.


115
00:04:52,826 --> 00:04:56,496 line:-2
Note that the time elapsed
is not to scale.


116
00:04:56,530 --> 00:04:59,633 line:-2
If your app needs to reconnect
to your Bluetooth accessory,


117
00:04:59,666 --> 00:05:02,002 line:-1
it can initiate a connection.


118
00:05:02.035 --> 00:05:04.404 line:-2 align:center
Here the connection
gets established.


119
00:05:04,438 --> 00:05:06,106 line:-1
As mentioned before,


120
00:05:06.139 --> 00:05:09.276 line:-2 align:center
we highly recommend to only
connect to your accessory


121
00:05:09.309 --> 00:05:12.045 line:-2 align:center
for only the amount of time
you need.


122
00:05:12,079 --> 00:05:13,947 line:-2
You should retrieve
the data you need


123
00:05:13,981 --> 00:05:18,685 line:-2
and then request a disconnection
during Background App Refresh.


124
00:05:18.719 --> 00:05:20.287 line:-1 align:center
In this case,


125
00:05:20,320 --> 00:05:22,322 line:-1
data transfer completes


126
00:05:22.356 --> 00:05:24.925 line:-2 align:center
and the app cancel
the peripheral connection.


127
00:05:26.193 --> 00:05:28.462 line:-2 align:center
Let's look at another
potential user flow.


128
00:05:28,495 --> 00:05:30,030 line:-1
In this one,


129
00:05:30,063 --> 00:05:33,333 line:-2
the Bluetooth Accessory
is not near the Apple Watch


130
00:05:33.367 --> 00:05:37.271 line:-2 align:center
or not advertising during
the Background App Refresh.


131
00:05:37,304 --> 00:05:39,173 line:-2
Here's how
you should manage this


132
00:05:39,206 --> 00:05:42,543 line:-2
during
Background App Refresh period.


133
00:05:42.576 --> 00:05:45.512 line:-2 align:center
First, you will connect
to a peripheral,


134
00:05:45.546 --> 00:05:48.315 line:-1 align:center
but there are no advertisements.


135
00:05:48,348 --> 00:05:50,884 line:-2
When the expiration handler
is called,


136
00:05:50.918 --> 00:05:53.287 line:-2 align:center
you should
ask to cancel the connection.


137
00:05:53,320 --> 00:05:55,923 line:-2
This way,
you will have a clean slate


138
00:05:55,956 --> 00:05:57,424 line:-1
and can ask to reconnect


139
00:05:57.457 --> 00:06:01.261 line:-2 align:center
at the beginning of the next
Background App Refresh.


140
00:06:01.295 --> 00:06:04.031 line:-2 align:center
It is also a good practice
to cancel the connection


141
00:06:04.064 --> 00:06:06.733 line:-2 align:center
before the expiration handler
is called


142
00:06:06,767 --> 00:06:09,269 line:-1
in order to save battery.


143
00:06:09.303 --> 00:06:13.207 line:-2 align:center
If you need to reconnect at
the next Background App Refresh,


144
00:06:13,240 --> 00:06:16,810 line:-2
you can issue
a connectPeripheral again.


145
00:06:16,844 --> 00:06:20,047 line:-2
As soon as Apple Watch
sees the advertisement,


146
00:06:20,080 --> 00:06:22,583 line:-2
it will connect
to your accessory.


147
00:06:22.616 --> 00:06:23.884 line:-1 align:center
At this point,


148
00:06:23,917 --> 00:06:25,152 line:-1
you can fetch and download


149
00:06:25.185 --> 00:06:27.321 line:-1 align:center
all the data you need.


150
00:06:27,354 --> 00:06:28,622 line:-1
Then, you can disconnect


151
00:06:28.655 --> 00:06:29.756 line:-1 align:center
as soon as you are done


152
00:06:29,790 --> 00:06:31,992 line:-1
with the connection.


153
00:06:32.025 --> 00:06:33.827 line:-1 align:center
Let's look at the final flow,


154
00:06:33,861 --> 00:06:35,028 line:-1
where we see what happens


155
00:06:35.062 --> 00:06:39.433 line:-2 align:center
if you don't disconnect
during Background App Refresh.


156
00:06:39.466 --> 00:06:41.468 line:-1 align:center
Initiate a connection.


157
00:06:41,502 --> 00:06:44,004 line:-2
As soon as Apple Watch sees
advertisement,


158
00:06:44.037 --> 00:06:46.373 line:-1 align:center
it will establish a connection.


159
00:06:46,406 --> 00:06:47,241 line:-1
Here,


160
00:06:47,274 --> 00:06:50,244 line:-2
let's say your app didn't have
time to retrieve all the data


161
00:06:50,277 --> 00:06:53,080 line:-2
before Background App Refresh
expires.


162
00:06:53.113 --> 00:06:54.748 line:-1 align:center
In this case,


163
00:06:54.781 --> 00:06:56.550 line:-2 align:center
Core Bluetooth would
automatically terminate


164
00:06:56.583 --> 00:07:00.087 line:-2 align:center
the connection at the end of
the next Background App Refresh.


165
00:07:02,322 --> 00:07:04,124 line:-2
At the next
Background App Refresh,


166
00:07:04,157 --> 00:07:08,795 line:-2
your app will get the event
didDisconnectPeripheral.


167
00:07:08.829 --> 00:07:11.698 line:-2 align:center
At this point,
if your app needs to,


168
00:07:11,732 --> 00:07:14,401 line:-2
it can initiate
a Bluetooth connection


169
00:07:14,434 --> 00:07:17,471 line:-2
or it can wait till the next
Background App Refresh.


170
00:07:17,504 --> 00:07:20,474 line:-2
We highly recommend to only
connect to your accessory


171
00:07:20,507 --> 00:07:23,510 line:-2
for only
the amount of time it needs.


172
00:07:23,544 --> 00:07:25,612 line:-2
Your app should request
a disconnection


173
00:07:25.646 --> 00:07:27.481 line:-2 align:center
during
the Background App Refresh.


174
00:07:30,984 --> 00:07:33,954 line:-2
Let's take a closer look
at the code to implement this.


175
00:07:34,688 --> 00:07:37,291 line:-2
When someone launches
your app in the foreground,


176
00:07:37,324 --> 00:07:41,328 line:-2
it can discover peripheral
and connect to them.


177
00:07:41,361 --> 00:07:45,065 line:-2
The didDiscoverPeripheral
delegate method


178
00:07:45.098 --> 00:07:48.802 line:-2 align:center
is called when
an advertisement is detected.


179
00:07:48.836 --> 00:07:51.371 line:-2 align:center
If you have used CoreBluetooth
in the past, this is familiar.


180
00:07:53.574 --> 00:07:57.044 line:-2 align:center
Now let's look at what happens
during Background App Refresh.


181
00:07:58,779 --> 00:08:02,916 line:-2
The handleBackgroundTasks
delegate method is called.


182
00:08:02,950 --> 00:08:05,085 line:-2
You can start any
of your background work,


183
00:08:05.118 --> 00:08:06.320 line:-1 align:center
and in our case,


184
00:08:06.353 --> 00:08:09.790 line:-2 align:center
we want to connect
to our Bluetooth peripheral.


185
00:08:09,823 --> 00:08:11,925 line:-2
During
the Background App Refresh,


186
00:08:11.959 --> 00:08:13.727 line:-1 align:center
just before termination,


187
00:08:13.760 --> 00:08:15.362 line:-1 align:center
you also get a notification


188
00:08:15,395 --> 00:08:18,665 line:-2
that the Background App Refresh
is about to finish.


189
00:08:18,699 --> 00:08:21,568 line:-1
This is a new API in watchOS 8.


190
00:08:21,602 --> 00:08:24,438 line:-2
You can use this to cancel
any existing work


191
00:08:24,471 --> 00:08:28,675 line:-2
and prepare your application
to go into suspended mode.


192
00:08:28,709 --> 00:08:31,245 line:-1
Then set the task as completed.


193
00:08:31,278 --> 00:08:34,014 line:-2
Also, when getting
background runtime,


194
00:08:34,047 --> 00:08:36,717 line:-2
you need to determine
what will be the behavior


195
00:08:36.750 --> 00:08:39.586 line:-2 align:center
when your Bluetooth
device disconnects.


196
00:08:39.620 --> 00:08:43.023 line:-2 align:center
Remember that the callback
didDisconnectPeripheral


197
00:08:43,056 --> 00:08:45,425 line:-2
can happen
while in the foreground


198
00:08:45,459 --> 00:08:47,194 line:-1
or in Background App Refresh


199
00:08:47.227 --> 00:08:49.429 line:-1 align:center
and happens on all platforms.


200
00:08:50,230 --> 00:08:54,701 line:-2
Here, when we have
the didDisconnectPeripheral,


201
00:08:54.735 --> 00:08:58.605 line:-2 align:center
we call a function called
didCompleteDisconnection


202
00:08:58.639 --> 00:09:02.342 line:-2 align:center
that resides in your WatchKit
Extension delegate.


203
00:09:02,376 --> 00:09:03,243 line:-1
This way,


204
00:09:03.277 --> 00:09:07.548 line:-2 align:center
the behavior of this function
is specific to watchOS.


205
00:09:07,581 --> 00:09:11,518 line:-2
What the function
didCompleteDisconnection does


206
00:09:11.552 --> 00:09:14.388 line:-2 align:center
is verify that
we are in a Background App Refresh


207
00:09:14,421 --> 00:09:15,622 line:-1
and if so,


208
00:09:15.656 --> 00:09:18.825 line:-2 align:center
indicates that
the task is complete.


209
00:09:18.859 --> 00:09:20.928 line:-2 align:center
This will terminate
the Background App Refresh.


210
00:09:22.062 --> 00:09:23.931 line:-1 align:center
Let's talk about best practices


211
00:09:23,964 --> 00:09:26,533 line:-2
for using Core Bluetooth
on Apple Watch.


212
00:09:26,567 --> 00:09:29,002 line:-1
For first-time device setup,


213
00:09:29.036 --> 00:09:31.805 line:-2 align:center
your app must be running
in the foreground,


214
00:09:31,839 --> 00:09:35,609 line:-2
meaning the user is
actively using your Watch app.


215
00:09:35.642 --> 00:09:38.445 line:-2 align:center
Scan for new peripherals
at this time.


216
00:09:38,478 --> 00:09:40,848 line:-2
Once your app discovers
a peripheral,


217
00:09:40.881 --> 00:09:43.984 line:-2 align:center
it can set up the initial
Bluetooth connection.


218
00:09:44,017 --> 00:09:46,787 line:-2
It can also pair to your device
if needed.


219
00:09:46,820 --> 00:09:49,356 line:-2
Once your app exits
the foreground,


220
00:09:49,389 --> 00:09:51,725 line:-2
it cannot scan
for new peripheral.


221
00:09:51,758 --> 00:09:52,893 line:-1
Instead,


222
00:09:52.926 --> 00:09:54.294 line:-1 align:center
it should request a connection


223
00:09:54,328 --> 00:09:57,164 line:-2
to a previously discovered
peripheral.


224
00:09:57.197 --> 00:10:00.734 line:-2 align:center
Once connected,
retrieve the data needed.


225
00:10:00,767 --> 00:10:02,536 line:-2
Once finished retrieving
the data,


226
00:10:02,569 --> 00:10:04,404 line:-2
your app should disconnect
from the peripheral


227
00:10:04,438 --> 00:10:06,940 line:-1
to preserve battery.


228
00:10:06.974 --> 00:10:08.275 line:-1 align:center
If your app doesn't disconnect


229
00:10:08,308 --> 00:10:10,577 line:-2
before
Background App Refresh ends,


230
00:10:10.611 --> 00:10:12.713 line:-2 align:center
Core Bluetooth will
automatically disconnect


231
00:10:12,746 --> 00:10:14,781 line:-1
from your accessory.


232
00:10:14,815 --> 00:10:18,051 line:-2
You can only reconnect
when your app has runtime.


233
00:10:18,552 --> 00:10:20,687 line:-2
I encourage you
to join our lab this week


234
00:10:20,721 --> 00:10:22,890 line:-2
if you have any questions
about Core Bluetooth.


235
00:10:22,923 --> 00:10:23,991 line:-1
Thanks.


236
00:10:24.024 --> 00:10:25.993 line:-1 align:center
[music]

