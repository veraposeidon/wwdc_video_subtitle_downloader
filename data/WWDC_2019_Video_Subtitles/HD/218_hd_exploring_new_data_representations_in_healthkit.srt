1
00:00:00,506 --> 00:00:05,516
[ Music ]


2
00:00:06,516 --> 00:00:11,566
[ Cheering and Applause ]


3
00:00:12,066 --> 00:00:12,836
>> Good afternoon.


4
00:00:13,916 --> 00:00:15,856
My name is Luke Spicer and today


5
00:00:15,926 --> 00:00:17,706
my teammate Divya and I are very


6
00:00:17,706 --> 00:00:19,326
excited to show you how


7
00:00:19,326 --> 00:00:20,956
HealthKit has expanded our data


8
00:00:20,956 --> 00:00:22,956
representations in iOS 13.


9
00:00:23,446 --> 00:00:26,636
As many of you already know,


10
00:00:26,866 --> 00:00:29,166
HealthKit provides a centralized


11
00:00:29,206 --> 00:00:30,336
data store for health and


12
00:00:30,376 --> 00:00:31,936
fitness data while also


13
00:00:31,936 --> 00:00:33,466
providing interoperability for


14
00:00:33,466 --> 00:00:34,566
health and fitness apps and


15
00:00:34,566 --> 00:00:35,396
experiences.


16
00:00:36,296 --> 00:00:37,576
If you're not already excited


17
00:00:37,646 --> 00:00:39,366
about using HealthKit, let me


18
00:00:39,366 --> 00:00:40,786
remind you that there are over


19
00:00:40,786 --> 00:00:42,936
70,000 apps in the health and


20
00:00:42,936 --> 00:00:44,116
fitness category on the App


21
00:00:44,116 --> 00:00:45,876
Store and all of them can


22
00:00:45,876 --> 00:00:46,926
benefit from the


23
00:00:46,926 --> 00:00:48,336
interoperability and


24
00:00:48,336 --> 00:00:49,666
functionality provided by


25
00:00:49,666 --> 00:00:50,126
HealthKit.


26
00:00:51,526 --> 00:00:52,686
Today, we're going to show you a


27
00:00:52,686 --> 00:00:54,046
few things related to data


28
00:00:54,046 --> 00:00:55,256
representations in HealthKit,


29
00:00:55,776 --> 00:00:57,286
starting with a review of the


30
00:00:57,286 --> 00:00:58,206
HealthKit data model.


31
00:00:58,986 --> 00:01:00,706
Then I'll go into some specific


32
00:01:00,706 --> 00:01:02,386
APIs focused on quantity data.


33
00:01:03,656 --> 00:01:04,936
Later, Divya will come out to


34
00:01:04,936 --> 00:01:05,866
show you beat-to-beat


35
00:01:05,866 --> 00:01:07,656
measurements, heart rate events,


36
00:01:08,246 --> 00:01:10,776
and the brand new API's focused


37
00:01:10,776 --> 00:01:13,026
on hearing health.


38
00:01:13,206 --> 00:01:15,226
Let's jump right in and start


39
00:01:15,386 --> 00:01:16,376
with the HealthKit data model.


40
00:01:17,026 --> 00:01:19,206
In HealthKit, we represent our


41
00:01:19,206 --> 00:01:22,056
data-- in HealthKit we represent


42
00:01:22,056 --> 00:01:23,986
our data with samples, which are


43
00:01:23,986 --> 00:01:25,226
measurements taken at a


44
00:01:25,226 --> 00:01:27,536
particular time that span some


45
00:01:27,536 --> 00:01:28,146
time interval.


46
00:01:29,586 --> 00:01:30,916
Most of these measurements are


47
00:01:30,916 --> 00:01:33,336
simple measurements, like the


48
00:01:33,336 --> 00:01:34,906
heart rates measured with Apple


49
00:01:34,956 --> 00:01:38,576
Watch or body mass measurements


50
00:01:38,576 --> 00:01:40,906
taken with a connected Bluetooth


51
00:01:41,996 --> 00:01:42,126
scale.


52
00:01:42,516 --> 00:01:43,926
Other measurements are more rich


53
00:01:43,926 --> 00:01:46,106
and complex, like workouts or


54
00:01:46,106 --> 00:01:47,256
the clinical health records that


55
00:01:47,256 --> 00:01:48,826
can be downloaded directly to


56
00:01:48,866 --> 00:01:49,330
iPhone.


57
00:01:51,656 --> 00:01:54,026
All of these rich complex data


58
00:01:54,396 --> 00:01:55,716
representations share a common


59
00:01:55,716 --> 00:01:57,716
structure; a top-level sample


60
00:01:57,716 --> 00:01:58,576
that's backed by some


61
00:01:58,576 --> 00:02:00,156
specialized data representation.


62
00:02:01,076 --> 00:02:04,406
For example, a blood pressure


63
00:02:04,406 --> 00:02:05,776
measurement can be represented


64
00:02:05,776 --> 00:02:07,616
with a correlation sample, an


65
00:02:07,616 --> 00:02:09,346
allergy resource by clinical


66
00:02:09,346 --> 00:02:12,886
record, and a workout route by a


67
00:02:12,886 --> 00:02:13,646
series sample.


68
00:02:14,146 --> 00:02:15,256
All of these are examples of


69
00:02:15,256 --> 00:02:17,206
specialized sample types that


70
00:02:17,206 --> 00:02:18,546
all have their own unique


71
00:02:18,546 --> 00:02:19,666
backing data format.


72
00:02:20,306 --> 00:02:21,906
For example, the blood pressure


73
00:02:21,906 --> 00:02:23,276
correlation is a set of blood


74
00:02:23,276 --> 00:02:24,066
pressure measurements.


75
00:02:24,526 --> 00:02:25,786
The allergy resource is backed


76
00:02:25,886 --> 00:02:28,346
by a file resource, and the


77
00:02:28,346 --> 00:02:30,146
workout route is an array of CL


78
00:02:30,146 --> 00:02:30,816
location data.


79
00:02:31,606 --> 00:02:33,226
And just as HealthKit provides


80
00:02:33,276 --> 00:02:34,166
these specialized data


81
00:02:34,166 --> 00:02:35,396
representations for these


82
00:02:35,396 --> 00:02:36,566
special types of measurements,


83
00:02:37,196 --> 00:02:39,036
we've also expanded our data


84
00:02:39,036 --> 00:02:40,416
representations for our most


85
00:02:40,416 --> 00:02:41,556
common type of measurement,


86
00:02:41,826 --> 00:02:42,806
which are for quantity data.


87
00:02:43,416 --> 00:02:44,736
So, let's continue by talking


88
00:02:44,736 --> 00:02:46,486
about quantity data.


89
00:02:48,076 --> 00:02:50,616
To quickly review, quantity data


90
00:02:50,616 --> 00:02:51,866
in HealthKit applies to some


91
00:02:51,866 --> 00:02:53,666
very commonly-measured concepts,


92
00:02:54,896 --> 00:02:56,706
like walking distance, body


93
00:02:56,706 --> 00:02:58,166
mass, and heart rate.


94
00:02:59,036 --> 00:03:00,546
All of these concepts we refer


95
00:03:00,546 --> 00:03:02,976
to as quantity types and they


96
00:03:02,976 --> 00:03:03,876
have measurements that look


97
00:03:03,876 --> 00:03:07,056
something like this, where each


98
00:03:07,056 --> 00:03:08,596
of these measurements consists


99
00:03:08,596 --> 00:03:10,346
of a quantity that is a value


100
00:03:10,596 --> 00:03:12,676
and a unit as well as a date


101
00:03:12,676 --> 00:03:13,696
interval that tells us the


102
00:03:13,696 --> 00:03:14,636
interval over which the


103
00:03:14,636 --> 00:03:15,456
measurement was taken.


104
00:03:16,446 --> 00:03:17,376
We call each of these


105
00:03:17,376 --> 00:03:18,726
measurements a quantity sample.


106
00:03:20,046 --> 00:03:21,386
Throughout this presentation,


107
00:03:21,596 --> 00:03:22,536
we're going to talk about


108
00:03:23,216 --> 00:03:24,546
quantity types and quantity


109
00:03:24,546 --> 00:03:26,496
samples specifically focused on


110
00:03:26,496 --> 00:03:27,896
how we can efficiently represent


111
00:03:27,896 --> 00:03:29,706
large numbers of quantities, but


112
00:03:29,706 --> 00:03:30,476
if you'd like more of an


113
00:03:30,476 --> 00:03:31,836
introduction to these concepts,


114
00:03:31,906 --> 00:03:33,056
you can always refer back to our


115
00:03:33,056 --> 00:03:35,496
2014 presentation, Introducing


116
00:03:35,496 --> 00:03:35,866
HealthKit.


117
00:03:37,126 --> 00:03:38,126
To forward our discussion of


118
00:03:38,126 --> 00:03:39,146
quantity data, I'd like to


119
00:03:39,146 --> 00:03:40,016
describe a scenario.


120
00:03:40,956 --> 00:03:42,326
If you would, please imagine


121
00:03:42,436 --> 00:03:44,276
that together we're working on a


122
00:03:44,276 --> 00:03:45,086
brand-new app.


123
00:03:45,906 --> 00:03:47,096
This app connects to a


124
00:03:47,096 --> 00:03:48,416
never-before-seen heart rate


125
00:03:48,416 --> 00:03:49,916
sensor that's been built right


126
00:03:49,916 --> 00:03:51,236
into a video game controller.


127
00:03:51,956 --> 00:03:53,686
Our task is to take measurements


128
00:03:53,686 --> 00:03:55,286
from this heart sensor and save


129
00:03:55,286 --> 00:03:56,366
them to HealthKit so that our


130
00:03:56,366 --> 00:03:57,586
users can see what their heart


131
00:03:57,586 --> 00:03:58,956
rate was when they play any


132
00:03:58,956 --> 00:03:59,726
particular game.


133
00:04:00,276 --> 00:04:02,576
The heart rates that we're


134
00:04:02,576 --> 00:04:03,856
receiving from the sensor might


135
00:04:03,856 --> 00:04:05,276
look something like this; a


136
00:04:05,276 --> 00:04:06,436
sequence of measurements that


137
00:04:06,436 --> 00:04:07,956
are coming into our app over


138
00:04:07,956 --> 00:04:09,206
time while the user plays.


139
00:04:09,696 --> 00:04:10,746
And we have to decide how we


140
00:04:10,746 --> 00:04:12,076
want to represent this data so


141
00:04:12,076 --> 00:04:12,936
that we can save it to


142
00:04:12,936 --> 00:04:13,346
HealthKit.


143
00:04:14,656 --> 00:04:15,816
One approach that we could take


144
00:04:16,005 --> 00:04:17,286
would be to use a single


145
00:04:17,315 --> 00:04:19,156
quantity sample and that might


146
00:04:19,156 --> 00:04:20,336
look something like this.


147
00:04:21,326 --> 00:04:22,516
This single quantity sample


148
00:04:22,516 --> 00:04:23,866
spans the entire measurement


149
00:04:23,866 --> 00:04:25,546
interval, that is the entire


150
00:04:25,646 --> 00:04:27,156
duration of the game, and


151
00:04:27,156 --> 00:04:28,056
represents all of the


152
00:04:28,056 --> 00:04:29,116
measurements we received from


153
00:04:29,116 --> 00:04:30,246
our sensor with a single


154
00:04:30,246 --> 00:04:30,606
quantity.


155
00:04:30,936 --> 00:04:31,776
Maybe an average.


156
00:04:32,856 --> 00:04:34,606
This representation gives us an


157
00:04:34,606 --> 00:04:36,456
object to represent the


158
00:04:36,456 --> 00:04:37,456
measurement we took, which was


159
00:04:37,456 --> 00:04:38,546
the heart rate during this game,


160
00:04:39,206 --> 00:04:40,666
but if later we want to see


161
00:04:40,666 --> 00:04:41,826
changes in heart rate over the


162
00:04:41,826 --> 00:04:42,846
game, we won't have the


163
00:04:42,846 --> 00:04:44,166
resolution to do that with this


164
00:04:44,166 --> 00:04:44,856
representation.


165
00:04:46,436 --> 00:04:47,646
Another representation we could


166
00:04:47,646 --> 00:04:49,506
take is to use multiple quantity


167
00:04:49,506 --> 00:04:50,746
samples and that might look


168
00:04:50,746 --> 00:04:52,816
something like this, where every


169
00:04:52,816 --> 00:04:54,416
measurement is represented by a


170
00:04:54,416 --> 00:04:55,646
different quantity sample.


171
00:04:56,586 --> 00:04:57,996
This representation will allow


172
00:04:57,996 --> 00:04:59,536
us to keep the full resolution


173
00:04:59,536 --> 00:05:01,396
measured by our sensor, but it


174
00:05:01,396 --> 00:05:02,836
is not an efficient


175
00:05:02,836 --> 00:05:03,996
representation of this data


176
00:05:04,086 --> 00:05:05,336
because we have redundancy.


177
00:05:05,976 --> 00:05:07,276
All of these quantity samples


178
00:05:07,456 --> 00:05:08,786
have identical metadata and


179
00:05:08,786 --> 00:05:11,536
device information and we no


180
00:05:11,536 --> 00:05:12,606
longer have that single


181
00:05:12,606 --> 00:05:13,596
convenient object that


182
00:05:13,596 --> 00:05:14,716
represents the measurement that


183
00:05:14,716 --> 00:05:15,986
we actually took, which was the


184
00:05:15,986 --> 00:05:17,406
heart rate during the game.


185
00:05:18,476 --> 00:05:20,186
Thankfully, we have a third


186
00:05:20,186 --> 00:05:21,466
approach that we can take that


187
00:05:21,466 --> 00:05:23,146
we call quantity series.


188
00:05:23,926 --> 00:05:24,676
The quantity series


189
00:05:24,676 --> 00:05:26,436
representation looks something


190
00:05:26,436 --> 00:05:27,016
like this.


191
00:05:27,976 --> 00:05:29,736
Again, a single quantity sample


192
00:05:29,736 --> 00:05:30,816
that spans our entire


193
00:05:30,816 --> 00:05:32,606
measurement interval, but in


194
00:05:32,606 --> 00:05:33,936
this case, instead of holding a


195
00:05:34,006 --> 00:05:35,206
single quantity, it can be


196
00:05:35,206 --> 00:05:36,876
backed by multiple quantities.


197
00:05:37,926 --> 00:05:40,026
This representation gives us the


198
00:05:40,026 --> 00:05:41,236
best of both of the previous


199
00:05:41,236 --> 00:05:42,946
approaches; a single object to


200
00:05:42,946 --> 00:05:44,746
represent our measurement that


201
00:05:44,746 --> 00:05:46,076
keeps the full resolution


202
00:05:46,436 --> 00:05:47,606
measure-- taken by our sensor.


203
00:05:48,626 --> 00:05:50,116
And notice that we've moved


204
00:05:50,326 --> 00:05:51,396
those redundant pieces of


205
00:05:51,396 --> 00:05:53,006
information that were previously


206
00:05:53,006 --> 00:05:54,086
on the individual quantity


207
00:05:54,086 --> 00:05:55,276
samples, so we only store a


208
00:05:55,276 --> 00:05:56,896
single copy at the quantity


209
00:05:56,956 --> 00:05:57,836
series sample level.


210
00:05:58,626 --> 00:05:59,886
We all want to be respectful of


211
00:05:59,886 --> 00:06:01,956
our users' device storage and


212
00:06:01,956 --> 00:06:03,446
device performance and this


213
00:06:03,446 --> 00:06:04,886
representation allows us to do


214
00:06:05,526 --> 00:06:05,626
that.


215
00:06:06,536 --> 00:06:08,256
Because a quantity series sample


216
00:06:08,286 --> 00:06:10,316
is a quantity sample, we need a


217
00:06:10,316 --> 00:06:13,016
way to represent the sequence of


218
00:06:13,016 --> 00:06:14,636
quantities with a single value


219
00:06:15,116 --> 00:06:16,246
and in HealthKit we do that


220
00:06:16,246 --> 00:06:17,206
through a technique called


221
00:06:17,206 --> 00:06:17,866
aggregation.


222
00:06:19,076 --> 00:06:20,416
We have two primary aggregation


223
00:06:20,416 --> 00:06:22,726
styles; cumulative and discrete.


224
00:06:23,416 --> 00:06:24,826
The cumulative aggregation style


225
00:06:25,026 --> 00:06:26,206
applies to some very common


226
00:06:26,206 --> 00:06:27,886
quantity types, like distances,


227
00:06:28,016 --> 00:06:29,146
calories, and steps.


228
00:06:30,026 --> 00:06:31,326
All of these quantity types are


229
00:06:31,326 --> 00:06:32,916
constantly being accumulated by


230
00:06:32,916 --> 00:06:34,106
our users who are taking more


231
00:06:34,106 --> 00:06:35,676
steps and burning more calories


232
00:06:35,676 --> 00:06:37,966
and moving more distance and a


233
00:06:37,966 --> 00:06:39,836
natural way to accumulate-- to


234
00:06:39,836 --> 00:06:41,206
aggregate multiple quantities


235
00:06:41,206 --> 00:06:42,986
for these types is with a sum.


236
00:06:44,856 --> 00:06:46,546
On the other hand, we have some


237
00:06:46,576 --> 00:06:48,096
other common quantity types for


238
00:06:48,096 --> 00:06:49,456
which a sum doesn't make sense.


239
00:06:50,126 --> 00:06:51,976
For example, heart rate, body


240
00:06:51,976 --> 00:06:54,506
mass, and height won't mean


241
00:06:54,506 --> 00:06:55,796
anything when summed together.


242
00:06:55,876 --> 00:06:57,056
If you take multiple heart rates


243
00:06:57,056 --> 00:06:58,206
over a day and add them up,


244
00:06:58,806 --> 00:07:00,026
you'll get a nonsense value.


245
00:07:00,546 --> 00:07:01,616
It's much more natural to


246
00:07:01,616 --> 00:07:03,856
aggregate quantity types like


247
00:07:03,856 --> 00:07:05,396
this with an average and maybe


248
00:07:05,396 --> 00:07:06,786
some other aggregating


249
00:07:06,786 --> 00:07:08,606
statistics, like minimum,


250
00:07:08,606 --> 00:07:10,116
maximum, and most recent value.


251
00:07:10,686 --> 00:07:14,296
Again, we can see that a


252
00:07:14,296 --> 00:07:16,326
sequence of cumulative


253
00:07:16,326 --> 00:07:18,166
quantities can be represented


254
00:07:18,166 --> 00:07:20,316
and aggregated by a sum and a


255
00:07:20,316 --> 00:07:21,886
series of discrete quantities


256
00:07:21,976 --> 00:07:23,566
like heart rates are going to be


257
00:07:23,566 --> 00:07:25,606
aggregated to produce some


258
00:07:25,606 --> 00:07:27,196
rising statistics, like minimum,


259
00:07:27,536 --> 00:07:28,846
maximum, average, and most


260
00:07:28,846 --> 00:07:29,366
recent value.


261
00:07:29,956 --> 00:07:32,826
In HealthKit, we use quantity


262
00:07:32,826 --> 00:07:34,246
aggregation style to tell us the


263
00:07:34,246 --> 00:07:35,386
aggregation style for a


264
00:07:35,386 --> 00:07:36,456
particular quantity type.


265
00:07:37,156 --> 00:07:39,586
And in iOS 13, we've decided to


266
00:07:39,586 --> 00:07:40,716
deprecate the discrete


267
00:07:40,716 --> 00:07:43,716
aggregation style in favor of a


268
00:07:43,716 --> 00:07:45,216
new discrete arithmetic


269
00:07:45,276 --> 00:07:46,396
aggregation style.


270
00:07:46,786 --> 00:07:48,226
We've done this to make clear


271
00:07:48,226 --> 00:07:49,726
that the average calculated for


272
00:07:49,726 --> 00:07:51,476
this aggregation style is the


273
00:07:51,476 --> 00:07:52,646
simple arithmetic mean.


274
00:07:53,566 --> 00:07:55,356
We've also introduced a couple


275
00:07:55,356 --> 00:07:56,636
of new aggregation styles,


276
00:07:56,856 --> 00:07:57,526
starting with


277
00:07:57,846 --> 00:07:59,636
discreteTemporallyWeighted, a


278
00:07:59,636 --> 00:08:01,186
special aggregation style that


279
00:08:01,186 --> 00:08:02,726
uses a time-weighted average


280
00:08:02,906 --> 00:08:04,296
that we apply when aggregating


281
00:08:04,296 --> 00:08:05,146
heart rate quantities.


282
00:08:06,426 --> 00:08:07,266
We've also added


283
00:08:07,356 --> 00:08:08,526
discreteEquivalent


284
00:08:08,526 --> 00:08:10,546
ContinuousLevel, a special


285
00:08:10,546 --> 00:08:11,666
aggregation style that gets


286
00:08:11,666 --> 00:08:13,196
applied to audio exposure


287
00:08:13,196 --> 00:08:13,636
quantities.


288
00:08:14,346 --> 00:08:15,446
Divya's going to go into more


289
00:08:15,446 --> 00:08:16,776
detail about audio exposure


290
00:08:16,776 --> 00:08:17,256
later on.


291
00:08:17,846 --> 00:08:20,976
Now that we know how to


292
00:08:20,976 --> 00:08:23,176
aggregate multiple quantities to


293
00:08:23,176 --> 00:08:24,656
produce some rising statistics,


294
00:08:24,946 --> 00:08:26,226
we need somewhere to store this


295
00:08:26,226 --> 00:08:27,416
information on our quantity


296
00:08:27,416 --> 00:08:27,826
sample.


297
00:08:28,746 --> 00:08:30,346
And we've done this in iOS 13 by


298
00:08:30,346 --> 00:08:31,686
introducing two new quantity


299
00:08:31,686 --> 00:08:33,626
sample subclasses, starting with


300
00:08:33,626 --> 00:08:34,856
cumulative quantity sample,


301
00:08:34,936 --> 00:08:36,706
which has a sum property, and


302
00:08:36,706 --> 00:08:38,456
discrete quantity sample, which


303
00:08:38,456 --> 00:08:41,525
has a average, minimum, maximum,


304
00:08:41,525 --> 00:08:42,515
and most recent quantity


305
00:08:42,515 --> 00:08:42,956
properties.


306
00:08:43,926 --> 00:08:45,936
We've also made quantity sample


307
00:08:46,156 --> 00:08:48,006
an abstract base class, which


308
00:08:48,006 --> 00:08:49,476
means that from now on all


309
00:08:49,476 --> 00:08:50,966
instances of quantity sample


310
00:08:50,966 --> 00:08:52,486
that you interact with will be


311
00:08:52,486 --> 00:08:54,476
one of these two quantity sample


312
00:08:54,476 --> 00:08:56,156
subclasses, depending on the


313
00:08:56,156 --> 00:08:57,396
quantity type's aggregation


314
00:08:57,396 --> 00:08:57,746
style.


315
00:08:58,966 --> 00:09:01,056
And also I want to note that all


316
00:09:01,056 --> 00:09:02,296
quantity samples can be thought


317
00:09:02,296 --> 00:09:04,176
of as quantity series, some of


318
00:09:04,176 --> 00:09:05,686
which just happen to have a


319
00:09:05,686 --> 00:09:07,756
count of 1.


320
00:09:07,956 --> 00:09:09,096
We've also introduced


321
00:09:09,096 --> 00:09:10,786
corresponding predicate keypaths


322
00:09:10,946 --> 00:09:12,016
for both of these new sample


323
00:09:12,016 --> 00:09:15,156
types so that you can query for


324
00:09:15,156 --> 00:09:16,696
corresponding properties of both


325
00:09:16,696 --> 00:09:17,426
of these samples.


326
00:09:18,836 --> 00:09:19,766
Going back to our quantity


327
00:09:19,766 --> 00:09:21,876
series sample example, we can


328
00:09:21,946 --> 00:09:23,716
see that quantity series sample


329
00:09:23,776 --> 00:09:24,766
can be summarized with our


330
00:09:24,766 --> 00:09:26,476
aggregating statistics, average,


331
00:09:26,476 --> 00:09:27,776
min, max, and most recent value.


332
00:09:29,186 --> 00:09:30,236
Now I'd like to show you how we


333
00:09:30,236 --> 00:09:31,756
go about building this quantity


334
00:09:31,756 --> 00:09:32,106
series.


335
00:09:32,746 --> 00:09:35,026
We're going to start our


336
00:09:35,026 --> 00:09:36,406
quantity series at the time that


337
00:09:36,406 --> 00:09:37,346
our measurement starts.


338
00:09:37,806 --> 00:09:38,906
In this scenario, it's at the


339
00:09:38,906 --> 00:09:39,576
start of a game.


340
00:09:40,716 --> 00:09:42,426
Then, we'll receive measurements


341
00:09:42,426 --> 00:09:43,536
from our sensor which we can


342
00:09:43,536 --> 00:09:45,126
insert into this quantity series


343
00:09:45,276 --> 00:09:46,686
and we can continue to take


344
00:09:46,686 --> 00:09:47,836
measurements from our sensor and


345
00:09:47,836 --> 00:09:48,846
insert them into the quantity


346
00:09:48,846 --> 00:09:50,756
series as long as the game is


347
00:09:50,756 --> 00:09:51,256
being played.


348
00:09:52,506 --> 00:09:53,486
Finally, when we're done


349
00:09:53,486 --> 00:09:55,006
measuring, we can end the


350
00:09:55,006 --> 00:09:57,116
quantity series and get back the


351
00:09:57,116 --> 00:09:58,426
summarizing quantity series


352
00:09:58,426 --> 00:09:59,000
sample.


353
00:10:01,546 --> 00:10:02,446
Now let's see what this looks


354
00:10:02,446 --> 00:10:02,986
like in code.


355
00:10:03,576 --> 00:10:07,006
Our first step, as with all


356
00:10:07,006 --> 00:10:08,706
HealthKit interaction is to


357
00:10:08,706 --> 00:10:09,946
request authorization for the


358
00:10:09,946 --> 00:10:11,686
data types that we plan to read


359
00:10:11,686 --> 00:10:12,096
and write.


360
00:10:12,366 --> 00:10:13,416
In this case, we're going to


361
00:10:13,416 --> 00:10:14,836
request authorization for heart


362
00:10:14,836 --> 00:10:15,056
rate.


363
00:10:16,096 --> 00:10:16,736
Once we've requested


364
00:10:16,736 --> 00:10:19,096
authorization, we can create our


365
00:10:19,096 --> 00:10:20,496
quantity series sample builder


366
00:10:20,566 --> 00:10:21,866
with our healthStore, the data


367
00:10:21,866 --> 00:10:23,366
type, the start date of


368
00:10:23,366 --> 00:10:25,296
measurement, and an optional HK


369
00:10:25,856 --> 00:10:26,000
device.


370
00:10:27,376 --> 00:10:29,096
Then, as long as we're receiving


371
00:10:29,096 --> 00:10:30,376
measurements from our sensor, we


372
00:10:30,456 --> 00:10:31,756
can insert those into our


373
00:10:31,756 --> 00:10:33,036
quantity series sample builder.


374
00:10:33,536 --> 00:10:35,156
And, finally, at the end of the


375
00:10:35,156 --> 00:10:36,736
game, we can finish our quantity


376
00:10:36,736 --> 00:10:38,516
series sample builder with


377
00:10:38,516 --> 00:10:39,986
optional metadata and the end


378
00:10:39,986 --> 00:10:40,816
date for our measurement.


379
00:10:41,326 --> 00:10:44,276
Now that we've thought about how


380
00:10:44,276 --> 00:10:45,396
we can efficiently represent


381
00:10:45,396 --> 00:10:46,576
quantity data and save it to


382
00:10:46,576 --> 00:10:47,886
HealthKit as a quantity series,


383
00:10:48,156 --> 00:10:49,086
we can think about the


384
00:10:49,086 --> 00:10:50,776
experiences we can bring to our


385
00:10:50,776 --> 00:10:52,086
app with the data once it's


386
00:10:52,086 --> 00:10:52,806
saved to HealthKit.


387
00:10:53,836 --> 00:10:55,016
Maybe we want to give our app


388
00:10:55,016 --> 00:10:56,846
the ability to record calorie


389
00:10:56,846 --> 00:10:58,026
information in addition to heart


390
00:10:58,026 --> 00:10:59,706
rate so that we can show our


391
00:10:59,706 --> 00:11:01,806
users the total calories that


392
00:11:01,806 --> 00:11:02,766
they burned in some time


393
00:11:02,766 --> 00:11:04,746
interval or just present some


394
00:11:04,746 --> 00:11:06,276
amazing graphs and charts that


395
00:11:06,276 --> 00:11:07,346
highlight and help them


396
00:11:07,346 --> 00:11:08,156
visualize their data.


397
00:11:08,156 --> 00:11:10,406
Or we want to point out averages


398
00:11:10,406 --> 00:11:11,676
that have been recorded over a


399
00:11:11,676 --> 00:11:12,316
time period.


400
00:11:12,896 --> 00:11:15,736
Or help users see the minimum


401
00:11:15,736 --> 00:11:16,966
and maximum value that they hit


402
00:11:16,966 --> 00:11:17,916
during a particular game.


403
00:11:19,096 --> 00:11:20,786
Or we just want to keep our UI


404
00:11:20,926 --> 00:11:23,036
live and up to date as new data


405
00:11:23,036 --> 00:11:24,716
is being recorded as it's


406
00:11:24,716 --> 00:11:25,606
received from our sensor.


407
00:11:26,216 --> 00:11:29,526
We can do all of this and more


408
00:11:29,586 --> 00:11:30,966
with a single HealthKit query.


409
00:11:33,036 --> 00:11:35,156
HKStatisticsCollectionQuery.


410
00:11:36,586 --> 00:11:37,946
Many of you are already familiar


411
00:11:37,946 --> 00:11:39,276
with StatisticsCollectionQuery,


412
00:11:39,806 --> 00:11:41,576
but it's pretty amazing, so I


413
00:11:41,576 --> 00:11:43,196
just wanted to reiterate what


414
00:11:43,196 --> 00:11:43,836
it's capable of.


415
00:11:44,616 --> 00:11:46,336
StatisticsCollectionQuery can


416
00:11:46,336 --> 00:11:48,096
help you calculate multiple


417
00:11:48,096 --> 00:11:49,986
statistics that can be separated


418
00:11:49,986 --> 00:11:51,776
by the source of data and you


419
00:11:51,776 --> 00:11:53,296
can receive updates to those


420
00:11:53,296 --> 00:11:55,186
statistics as new data is saved


421
00:11:55,186 --> 00:11:55,636
to HealthKit.


422
00:11:56,956 --> 00:11:58,946
And if that wasn't enough, we've


423
00:11:58,946 --> 00:11:59,846
also updated


424
00:11:59,846 --> 00:12:01,236
StatisticsCollectionQuery to


425
00:12:01,236 --> 00:12:02,566
support all of our new


426
00:12:02,566 --> 00:12:04,346
aggregation styles and to


427
00:12:04,416 --> 00:12:06,126
automatically include all of the


428
00:12:06,126 --> 00:12:08,896
backing quantity data that is


429
00:12:09,066 --> 00:12:10,486
stored in quantity series


430
00:12:10,486 --> 00:12:10,896
samples.


431
00:12:11,886 --> 00:12:13,796
If you want more information on


432
00:12:13,896 --> 00:12:15,466
StatisticsCollectionQuery and


433
00:12:15,466 --> 00:12:17,136
HKStatistics, you can always


434
00:12:17,136 --> 00:12:18,556
refer back to Introducing


435
00:12:18,556 --> 00:12:18,936
HealthKit.


436
00:12:19,426 --> 00:12:21,066
Even though


437
00:12:21,756 --> 00:12:24,116
StatisticsCollectionQuery should


438
00:12:24,116 --> 00:12:25,996
be our go-to tool to efficiently


439
00:12:25,996 --> 00:12:27,166
interact with quantity data


440
00:12:27,166 --> 00:12:28,326
that's been saved to HealthKit,


441
00:12:29,546 --> 00:12:31,496
sometimes we really do want to


442
00:12:31,496 --> 00:12:33,076
enumerate every single quantity


443
00:12:33,256 --> 00:12:34,356
that are stored in quantity


444
00:12:34,356 --> 00:12:34,726
series.


445
00:12:35,516 --> 00:12:36,846
For example, if we want to do


446
00:12:36,846 --> 00:12:38,906
something like plot every single


447
00:12:38,906 --> 00:12:40,236
heart rate that was measured by


448
00:12:40,236 --> 00:12:41,316
our application while a user


449
00:12:41,316 --> 00:12:41,896
played the game.


450
00:12:43,046 --> 00:12:44,696
We can do this with


451
00:12:45,216 --> 00:12:46,926
QuantitySeriesSampleQuery.


452
00:12:48,056 --> 00:12:49,536
In iOS 13, we've enhanced


453
00:12:49,536 --> 00:12:51,156
QuantitySeriesSampleQuery by


454
00:12:51,156 --> 00:12:52,836
replacing the quantity sample


455
00:12:52,836 --> 00:12:55,026
argument with a quantity type in


456
00:12:55,636 --> 00:12:56,316
NSPredicate.


457
00:12:58,056 --> 00:12:59,356
Now, instead of simply


458
00:12:59,356 --> 00:13:00,876
enumerating the quantities for a


459
00:13:00,876 --> 00:13:02,406
single quantity sample, you can


460
00:13:02,406 --> 00:13:03,806
enumerate multiple quantity


461
00:13:03,806 --> 00:13:05,366
samples and all of their backing


462
00:13:05,366 --> 00:13:05,966
quantity data.


463
00:13:07,466 --> 00:13:08,976
We've also updated the date


464
00:13:08,976 --> 00:13:10,246
parameter with a date interval,


465
00:13:10,436 --> 00:13:11,356
so you get the full date


466
00:13:11,356 --> 00:13:12,446
interval for every single


467
00:13:12,446 --> 00:13:13,386
quantity while it's being


468
00:13:13,386 --> 00:13:13,856
enumerated.


469
00:13:14,426 --> 00:13:16,026
And we also have an optional


470
00:13:16,096 --> 00:13:17,746
quantity sample parameter which


471
00:13:17,746 --> 00:13:19,806
can give you the quantity series


472
00:13:19,836 --> 00:13:21,036
sample that is currently being


473
00:13:21,036 --> 00:13:21,506
enumerated.


474
00:13:22,006 --> 00:13:25,536
This query is best explained


475
00:13:25,536 --> 00:13:26,916
visually, so I'd like to show


476
00:13:26,916 --> 00:13:27,456
you this.


477
00:13:28,306 --> 00:13:30,096
Here we have two quantity series


478
00:13:30,126 --> 00:13:30,496
samples.


479
00:13:31,076 --> 00:13:32,636
The first quantity series sample


480
00:13:32,666 --> 00:13:33,846
consists of quantities that were


481
00:13:33,846 --> 00:13:35,346
measured with the heart sensor


482
00:13:35,466 --> 00:13:36,516
built into our video game


483
00:13:36,516 --> 00:13:36,976
controller.


484
00:13:38,206 --> 00:13:39,966
And the second series consists


485
00:13:39,966 --> 00:13:41,196
of quantities measured on Apple


486
00:13:41,196 --> 00:13:41,596
Watch.


487
00:13:42,126 --> 00:13:43,316
Because our user happened to be


488
00:13:43,316 --> 00:13:44,306
using both devices


489
00:13:44,306 --> 00:13:46,436
simultaneously, these series


490
00:13:46,436 --> 00:13:48,946
overlap each other in time.


491
00:13:49,006 --> 00:13:49,746
By default, the


492
00:13:49,746 --> 00:13:51,136
QuantitySeriesSampleQuery is


493
00:13:51,136 --> 00:13:52,346
going to enumerate all of the


494
00:13:52,346 --> 00:13:53,936
quantities from both of these


495
00:13:53,936 --> 00:13:55,026
quantity series in the


496
00:13:55,026 --> 00:13:56,326
quantity's start date order.


497
00:13:56,686 --> 00:13:57,226
Like this.


498
00:13:58,176 --> 00:13:59,616
And note that at the end of the


499
00:13:59,616 --> 00:14:02,036
quantity series, the done


500
00:14:02,036 --> 00:14:04,696
parameter is set to true.


501
00:14:04,846 --> 00:14:06,736
If you need access to properties


502
00:14:06,946 --> 00:14:08,306
on the quantity series samples


503
00:14:08,306 --> 00:14:09,656
themselves, like device


504
00:14:09,656 --> 00:14:10,866
information, source, revision,


505
00:14:10,866 --> 00:14:12,826
or metadata, you can set include


506
00:14:12,866 --> 00:14:14,676
sample to true on the query


507
00:14:14,676 --> 00:14:15,556
before executing it.


508
00:14:16,156 --> 00:14:17,296
And notice that, in this case,


509
00:14:17,406 --> 00:14:18,676
while enumerating these quantity


510
00:14:18,676 --> 00:14:20,266
series you can get the


511
00:14:20,266 --> 00:14:21,656
corresponding quantity series


512
00:14:21,696 --> 00:14:22,866
sample in the quantities


513
00:14:22,866 --> 00:14:23,186
handler.


514
00:14:26,966 --> 00:14:28,326
Now that we've seen how we can


515
00:14:28,326 --> 00:14:29,406
efficiently interact with


516
00:14:29,406 --> 00:14:30,696
quantity data using quantity


517
00:14:30,696 --> 00:14:31,966
series, I'd like to show you how


518
00:14:31,966 --> 00:14:33,236
easy it is to add support for


519
00:14:33,236 --> 00:14:34,586
this to the game that we've been


520
00:14:34,586 --> 00:14:35,426
talking about in this


521
00:14:35,426 --> 00:14:35,996
presentation.


522
00:14:36,836 --> 00:14:38,036
Follow me over to Xcode and I'll


523
00:14:38,036 --> 00:14:38,816
show you a brief demo.


524
00:14:44,486 --> 00:14:46,146
What I have here is our game in


525
00:14:46,146 --> 00:14:47,576
its current form.


526
00:14:48,136 --> 00:14:49,776
I don't actually have a heart


527
00:14:49,776 --> 00:14:51,506
rate sensor that's been built


528
00:14:51,506 --> 00:14:52,746
into a video game controller,


529
00:14:52,826 --> 00:14:53,746
but if any of you want to make


530
00:14:53,746 --> 00:14:55,006
one, come find me after.


531
00:14:55,696 --> 00:14:57,656
I do have another external heart


532
00:14:57,656 --> 00:14:59,186
sensor that I can use to get


533
00:14:59,186 --> 00:15:00,966
information into this app.


534
00:15:00,966 --> 00:15:02,486
And remember the quantity series


535
00:15:02,486 --> 00:15:04,106
can be applied to any quantity


536
00:15:04,106 --> 00:15:05,396
type, not just heart rate, and


537
00:15:05,766 --> 00:15:06,816
the data can come from an


538
00:15:06,816 --> 00:15:08,206
external sensor, an external


539
00:15:08,206 --> 00:15:10,796
database, a file on disk, or


540
00:15:11,296 --> 00:15:12,736
just be directly entered by your


541
00:15:13,906 --> 00:15:14,016
app.


542
00:15:14,376 --> 00:15:15,916
In this game, we have two tabs.


543
00:15:16,916 --> 00:15:18,346
First, the Play tab brings up


544
00:15:18,346 --> 00:15:19,536
the PlayViewController where we


545
00:15:19,536 --> 00:15:20,196
can play our game.


546
00:15:20,196 --> 00:15:22,446
And the second tab, the Last


547
00:15:22,446 --> 00:15:23,816
Game tab, brings up the


548
00:15:23,816 --> 00:15:24,886
ResultsViewController, which


549
00:15:24,886 --> 00:15:25,946
will show us the heart rates


550
00:15:25,946 --> 00:15:26,776
that were measured during the


551
00:15:26,776 --> 00:15:28,686
most recently played game.


552
00:15:30,786 --> 00:15:31,946
I'm going to go ahead and switch


553
00:15:31,946 --> 00:15:33,076
back to the PlayViewController


554
00:15:33,076 --> 00:15:34,446
to show you what a round of the


555
00:15:34,446 --> 00:15:35,116
game looks like.


556
00:15:35,716 --> 00:15:38,376
In this game, I'm trying to


557
00:15:38,376 --> 00:15:40,046
click these hot dogs and not hit


558
00:15:40,046 --> 00:15:40,516
the broccoli.


559
00:15:41,136 --> 00:15:42,266
Might seem a bit backwards for a


560
00:15:42,266 --> 00:15:43,796
health app, but this is what I


561
00:15:43,796 --> 00:15:44,000
have.


562
00:15:45,486 --> 00:15:47,226
Every hot dog that I get scores


563
00:15:47,226 --> 00:15:48,626
another point and my heart rate


564
00:15:48,626 --> 00:15:50,116
has a tendency to increase while


565
00:15:50,116 --> 00:15:51,236
I play.


566
00:15:51,426 --> 00:15:52,606
If I switch back to the Last


567
00:15:52,606 --> 00:15:53,776
Game tab, I can see we don't yet


568
00:15:53,776 --> 00:15:54,946
have any heart rate data being


569
00:15:54,946 --> 00:15:55,956
measured while I played that


570
00:15:55,956 --> 00:15:56,466
last game.


571
00:15:56,856 --> 00:15:57,916
We'd like to add that support to


572
00:15:57,916 --> 00:15:58,456
our app now.


573
00:15:59,626 --> 00:16:01,006
Our first step is going to


574
00:16:01,006 --> 00:16:02,646
have-- be to have our app


575
00:16:02,646 --> 00:16:04,136
request authorization, just like


576
00:16:04,136 --> 00:16:05,296
we saw in the presentation.


577
00:16:05,916 --> 00:16:07,666
And because our app is all about


578
00:16:08,126 --> 00:16:09,356
writing and reading heart rate


579
00:16:09,356 --> 00:16:11,026
data while users play, I want to


580
00:16:11,026 --> 00:16:12,096
do this request for


581
00:16:12,096 --> 00:16:14,396
authorization as soon as my app


582
00:16:14,436 --> 00:16:15,476
finishes launching, so I'm going


583
00:16:15,476 --> 00:16:17,086
to add this in application


584
00:16:17,086 --> 00:16:18,776
didFinishLaunchingWithOptions in


585
00:16:18,776 --> 00:16:19,500
my app delegate.


586
00:16:22,516 --> 00:16:24,646
Here I'm requesting-- I'm


587
00:16:24,646 --> 00:16:26,146
creating a set of quantity types


588
00:16:26,146 --> 00:16:28,026
specifically for heart rate so


589
00:16:28,026 --> 00:16:29,576
that I can request authorization


590
00:16:29,576 --> 00:16:31,256
within HK healthStore for these


591
00:16:31,256 --> 00:16:31,886
sample types.


592
00:16:32,426 --> 00:16:35,176
After we request authorization,


593
00:16:35,266 --> 00:16:36,426
we can get measurements from our


594
00:16:36,426 --> 00:16:38,466
sensor and save that data to a


595
00:16:38,466 --> 00:16:39,136
quantity series.


596
00:16:40,046 --> 00:16:41,246
I've already created a class


597
00:16:41,246 --> 00:16:42,726
that encapsulates the connection


598
00:16:42,996 --> 00:16:44,316
to my external sensor and, if


599
00:16:44,316 --> 00:16:45,416
you want to see how that works,


600
00:16:45,586 --> 00:16:46,496
you can always check out the


601
00:16:46,496 --> 00:16:47,976
sample project associated with


602
00:16:47,976 --> 00:16:48,436
this session.


603
00:16:49,396 --> 00:16:50,806
I'm going to switch over to the


604
00:16:50,806 --> 00:16:52,396
PlayViewController now because


605
00:16:52,396 --> 00:16:53,826
we want to add the connection to


606
00:16:53,826 --> 00:16:55,406
record heart rate while the user


607
00:16:55,406 --> 00:16:55,956
plays a game.


608
00:16:55,956 --> 00:16:57,446
I'm going to open the project


609
00:16:57,446 --> 00:16:58,956
navigator and switch over to our


610
00:16:58,956 --> 00:16:59,736
PlayViewController.


611
00:17:01,256 --> 00:17:02,216
In the PlayViewController, I


612
00:17:02,216 --> 00:17:03,566
have a function, startNewGame,


613
00:17:03,566 --> 00:17:04,536
that's called whenever that


614
00:17:04,536 --> 00:17:06,096
Start Game button is pressed in


615
00:17:06,096 --> 00:17:06,316
our app.


616
00:17:06,816 --> 00:17:08,146
This is a great place for us to


617
00:17:08,146 --> 00:17:09,076
create a connection to our


618
00:17:09,076 --> 00:17:11,165
external heart sensor and start


619
00:17:11,165 --> 00:17:12,406
our quantity series-- our


620
00:17:12,406 --> 00:17:13,806
quantity series sample builder.


621
00:17:14,606 --> 00:17:15,506
First, I'm going to create the


622
00:17:15,506 --> 00:17:17,000
connection to my sensor.


623
00:17:20,195 --> 00:17:21,915
This HeartSensorSession is the


624
00:17:21,915 --> 00:17:23,036
class that I mentioned earlier


625
00:17:23,036 --> 00:17:24,425
that I wrote that encapsulates


626
00:17:24,425 --> 00:17:25,816
the connection to my sensor and


627
00:17:25,816 --> 00:17:26,336
I'm setting the


628
00:17:26,336 --> 00:17:28,076
PlayViewController itself as the


629
00:17:28,076 --> 00:17:28,736
delegate of the


630
00:17:28,736 --> 00:17:30,000
HeartSensorSession.


631
00:17:31,046 --> 00:17:32,716
Now I can start my quantity


632
00:17:32,716 --> 00:17:34,356
series sample builder for heart


633
00:17:34,806 --> 00:17:35,000
rate.


634
00:17:36,636 --> 00:17:38,106
Here I'm creating a quantity


635
00:17:38,106 --> 00:17:39,296
series sample builder with my


636
00:17:39,296 --> 00:17:40,606
healthStore for the heart rate


637
00:17:40,606 --> 00:17:41,896
type where the start date of


638
00:17:41,896 --> 00:17:43,076
measurement is the current date


639
00:17:43,386 --> 00:17:44,906
and I'm getting my HK device


640
00:17:44,906 --> 00:17:45,706
information from the


641
00:17:45,706 --> 00:17:46,436
HeartSensorSession.


642
00:17:47,726 --> 00:17:48,626
The HeartSensorSession


643
00:17:48,626 --> 00:17:49,446
communicates to the


644
00:17:49,446 --> 00:17:50,486
PlayViewController through its


645
00:17:50,486 --> 00:17:52,216
delegate protocol,


646
00:17:53,216 --> 00:17:54,366
HeartSensorSessionDelegate,


647
00:17:54,606 --> 00:17:56,056
which has these two methods;


648
00:17:56,586 --> 00:17:57,916
sessionDidReceiveHeartRate and


649
00:17:57,916 --> 00:17:58,766
sessionDidEnd.


650
00:18:00,036 --> 00:18:01,026
With sessionDidEnd--


651
00:18:01,126 --> 00:18:02,006
DidReceiveHeartRate,


652
00:18:02,226 --> 00:18:03,826
HeartSensorSession provides


653
00:18:03,826 --> 00:18:05,516
heart rate measurements to its


654
00:18:05,516 --> 00:18:06,796
delegate and this is a great


655
00:18:06,796 --> 00:18:07,576
place for us to take these


656
00:18:07,576 --> 00:18:08,746
measurements and insert them


657
00:18:08,746 --> 00:18:09,976
into our quantity series sample


658
00:18:09,976 --> 00:18:10,330
builder.


659
00:18:16,536 --> 00:18:18,626
Here I'm inserting the heart


660
00:18:18,626 --> 00:18:19,926
rates and date intervals that


661
00:18:19,926 --> 00:18:20,696
I've received from the


662
00:18:20,696 --> 00:18:21,686
HeartSensorSession into my


663
00:18:21,686 --> 00:18:22,916
quantity series sample builder.


664
00:18:24,746 --> 00:18:26,626
And, finally, sessionDidEnd is


665
00:18:26,626 --> 00:18:28,616
called by the HeartSensorSession


666
00:18:28,866 --> 00:18:30,166
when a HeartSensorSession ends


667
00:18:30,166 --> 00:18:30,896
at the end of a game.


668
00:18:31,296 --> 00:18:32,646
This is the perfect place for us


669
00:18:32,646 --> 00:18:33,816
to end our quantity series


670
00:18:33,816 --> 00:18:35,826
sample builder to persist the


671
00:18:35,826 --> 00:18:36,966
heart rate quantities that we've


672
00:18:36,966 --> 00:18:37,796
inserted to HealthKit.


673
00:18:37,796 --> 00:18:40,056
And we can also associate the


674
00:18:40,056 --> 00:18:40,996
quantity series that we've


675
00:18:40,996 --> 00:18:42,366
created with metadata.


676
00:18:42,716 --> 00:18:43,886
In this case, I'd like to use


677
00:18:43,886 --> 00:18:45,326
metadata to associate these


678
00:18:45,326 --> 00:18:46,406
heart rates with the game


679
00:18:46,406 --> 00:18:48,006
session that we just played, so


680
00:18:48,006 --> 00:18:48,756
that in the


681
00:18:48,756 --> 00:18:50,036
ResultsViewController we can


682
00:18:50,036 --> 00:18:51,326
query for the heart data


683
00:18:51,546 --> 00:18:52,806
associated with the most recent


684
00:18:52,806 --> 00:18:53,000
game.


685
00:18:57,546 --> 00:18:58,976
Here I'm creating a metadata


686
00:18:58,976 --> 00:19:00,216
dictionary using the


687
00:19:00,216 --> 00:19:02,546
MetadataKeyExternalUUID, which I


688
00:19:02,546 --> 00:19:03,936
am setting to the heart sensor's


689
00:19:04,166 --> 00:19:04,896
UUID string.


690
00:19:05,506 --> 00:19:07,016
And finally, I am finishing my


691
00:19:07,016 --> 00:19:08,236
quantity series with that


692
00:19:08,236 --> 00:19:09,486
metadata and the end date of


693
00:19:09,486 --> 00:19:10,756
measurement that we receive from


694
00:19:10,756 --> 00:19:11,576
the HeartSensorSession.


695
00:19:12,186 --> 00:19:15,146
Now that we've saved our heart


696
00:19:15,146 --> 00:19:17,266
rate data to HealthKit, we want


697
00:19:17,266 --> 00:19:19,026
to-- we want to display that


698
00:19:19,026 --> 00:19:20,166
data to the users in the


699
00:19:20,166 --> 00:19:21,016
ResultsViewController.


700
00:19:21,126 --> 00:19:21,936
So, let's move over to the


701
00:19:21,936 --> 00:19:22,976
ResultsViewController now.


702
00:19:28,356 --> 00:19:29,946
In the ResultsViewController


703
00:19:29,946 --> 00:19:31,476
viewDidLoad function, I have a


704
00:19:31,476 --> 00:19:32,256
utility function,


705
00:19:32,786 --> 00:19:34,276
loadHeartRateQuanitites, that's


706
00:19:34,276 --> 00:19:35,416
going to query for the heart


707
00:19:35,416 --> 00:19:36,936
rate data associated with the


708
00:19:36,936 --> 00:19:39,136
most recent game session and


709
00:19:39,136 --> 00:19:40,946
generate a string representation


710
00:19:40,946 --> 00:19:42,086
of each of these quantities that


711
00:19:42,086 --> 00:19:43,326
can be displayed in a table


712
00:19:43,326 --> 00:19:43,536
view.


713
00:19:44,866 --> 00:19:46,916
Let's go ahead and start this by


714
00:19:46,916 --> 00:19:48,636
adding a quantity series sample


715
00:19:48,636 --> 00:19:50,406
query for heart rate associated


716
00:19:50,406 --> 00:19:51,966
with our most recent game, if we


717
00:19:51,966 --> 00:19:53,000
have one.


718
00:19:56,336 --> 00:19:57,536
Here I'm guarding against the


719
00:19:57,536 --> 00:19:59,006
case that no game has yet been


720
00:19:59,006 --> 00:19:59,266
played.


721
00:20:00,286 --> 00:20:01,806
If we have a game identifier, we


722
00:20:01,806 --> 00:20:03,706
can go ahead and create a query


723
00:20:03,706 --> 00:20:04,646
predicate for the


724
00:20:04,646 --> 00:20:07,376
MetadataExternalKeyUUID using


725
00:20:07,376 --> 00:20:08,156
that game identifier.


726
00:20:08,646 --> 00:20:10,136
Remember, we use this metadata


727
00:20:10,136 --> 00:20:11,286
so that we would later be able


728
00:20:11,286 --> 00:20:12,626
to query for the heart rate data


729
00:20:12,626 --> 00:20:13,916
associated with our most recent


730
00:20:13,916 --> 00:20:14,000
game.


731
00:20:16,416 --> 00:20:18,056
Then, I can create my quantity


732
00:20:18,056 --> 00:20:19,236
series sample query for the


733
00:20:19,236 --> 00:20:20,326
heart rate type using the


734
00:20:20,326 --> 00:20:21,476
predicate we created above.


735
00:20:22,886 --> 00:20:24,146
Inside of the query's handler,


736
00:20:24,336 --> 00:20:25,426
I'm going to be enumerating the


737
00:20:25,426 --> 00:20:26,566
quantities and date intervals


738
00:20:26,636 --> 00:20:29,446
associated with this-- with this


739
00:20:29,546 --> 00:20:30,796
latest game and I'm going to


740
00:20:31,146 --> 00:20:32,416
create a string representation


741
00:20:32,416 --> 00:20:32,916
for each of them.


742
00:20:33,326 --> 00:20:34,356
Let's go ahead and create an


743
00:20:34,356 --> 00:20:35,846
array of strings we can use to


744
00:20:36,556 --> 00:20:38,000
store these result strings.


745
00:20:41,066 --> 00:20:43,526
And then we can use this in our


746
00:20:43,916 --> 00:20:44,626
query handler.


747
00:20:45,116 --> 00:20:48,996
First, I'm going to guard


748
00:20:48,996 --> 00:20:50,226
against errors that might have


749
00:20:50,226 --> 00:20:51,306
been returned during


750
00:20:51,306 --> 00:20:51,936
enumeration.


751
00:20:52,406 --> 00:20:53,646
And if I don't have any errors,


752
00:20:53,826 --> 00:20:54,996
I can go ahead and create a


753
00:20:54,996 --> 00:20:56,916
heartRateDetailsStrings using


754
00:20:56,916 --> 00:20:58,236
the enumerated quantities and


755
00:20:58,236 --> 00:20:59,956
date intervals and I'll append


756
00:20:59,956 --> 00:21:01,326
these detail strings to my


757
00:21:01,326 --> 00:21:02,346
heartRateStrings array.


758
00:21:03,556 --> 00:21:05,616
Finally, when enumeration is


759
00:21:05,616 --> 00:21:07,026
complete, the done parameter


760
00:21:07,026 --> 00:21:08,596
will be set to true and this is


761
00:21:08,596 --> 00:21:09,956
the perfect place for me to


762
00:21:09,956 --> 00:21:11,366
dispatch back to the main queue


763
00:21:11,626 --> 00:21:12,496
to reload our


764
00:21:12,496 --> 00:21:14,056
ResultsViewController to display


765
00:21:14,226 --> 00:21:14,646
these strings.


766
00:21:16,986 --> 00:21:18,296
Now I'd like to re-run the app


767
00:21:18,416 --> 00:21:19,586
to show you what this looks like


768
00:21:19,586 --> 00:21:21,246
now that we've added support for


769
00:21:21,326 --> 00:21:22,606
writing and reading heart rate


770
00:21:22,606 --> 00:21:22,766
data.


771
00:21:24,066 --> 00:21:25,106
Remember, the first thing we're


772
00:21:25,106 --> 00:21:26,006
going to see when our app


773
00:21:26,006 --> 00:21:27,286
launches is that request for


774
00:21:27,286 --> 00:21:27,966
authorization.


775
00:21:28,536 --> 00:21:31,846
I'm going to go ahead and turn


776
00:21:31,846 --> 00:21:33,636
on authorization to read and


777
00:21:33,636 --> 00:21:34,296
write heart rate data.


778
00:21:35,596 --> 00:21:37,036
And now I'll play another round


779
00:21:37,036 --> 00:21:37,436
of our game.


780
00:21:38,826 --> 00:21:39,856
Remember, I'm trying to hit the


781
00:21:39,856 --> 00:21:41,306
hot dogs and miss the broccoli.


782
00:21:41,886 --> 00:21:42,786
Oh, scored zero.


783
00:21:42,786 --> 00:21:43,776
Let me play another round.


784
00:21:49,486 --> 00:21:50,906
Oh, scored two, but we can still


785
00:21:50,906 --> 00:21:51,936
see what my heart rate looked


786
00:21:51,936 --> 00:21:52,126
like.


787
00:21:52,756 --> 00:21:53,216
There we go.


788
00:21:53,216 --> 00:21:54,506
We have some heart rates that


789
00:21:54,506 --> 00:21:55,636
were measured during this most


790
00:21:55,636 --> 00:21:56,776
recent game.


791
00:21:58,516 --> 00:22:04,676
[ Applause ]


792
00:22:05,176 --> 00:22:06,936
What we just saw was how easy it


793
00:22:06,936 --> 00:22:09,606
is to efficiently save quantity


794
00:22:09,606 --> 00:22:10,896
data with a quantity series


795
00:22:10,896 --> 00:22:12,966
sample builder and how we can


796
00:22:12,966 --> 00:22:14,396
query for that data using


797
00:22:14,446 --> 00:22:15,746
QuantitySeriesSampleQuery.


798
00:22:16,536 --> 00:22:18,006
Now I'd like to invite up my


799
00:22:18,006 --> 00:22:19,736
teammate Divya, who is going to


800
00:22:20,016 --> 00:22:21,266
show you how HealthKit has


801
00:22:21,266 --> 00:22:22,906
expanded our representations in


802
00:22:22,906 --> 00:22:24,836
the area of heart and how we've


803
00:22:24,836 --> 00:22:25,956
moved into the brand-new health


804
00:22:26,006 --> 00:22:27,206
domain of hearing health.


805
00:22:27,816 --> 00:22:28,666
Thank you.


806
00:22:29,516 --> 00:22:34,546
[ Applause ]


807
00:22:35,046 --> 00:22:36,616
>> So, my colleague Luke just


808
00:22:36,616 --> 00:22:37,826
described to you the new


809
00:22:37,826 --> 00:22:39,596
efficient way to store HK


810
00:22:39,596 --> 00:22:42,586
quantities now in iOS 13 and


811
00:22:42,586 --> 00:22:43,846
HealthKit has become a


812
00:22:43,846 --> 00:22:46,006
repository for more and more of


813
00:22:46,006 --> 00:22:47,726
our users' daily health data.


814
00:22:47,726 --> 00:22:50,196
And in addition to storing more


815
00:22:50,196 --> 00:22:51,726
and more data, we're also


816
00:22:51,726 --> 00:22:53,206
storing more kinds of data.


817
00:22:54,106 --> 00:22:55,446
This year, we're adding on to


818
00:22:55,446 --> 00:22:57,086
our existing support for heart


819
00:22:57,086 --> 00:22:58,746
health and adding new support


820
00:22:58,746 --> 00:22:59,556
for hearing health.


821
00:22:59,996 --> 00:23:03,566
Our users have been interacting


822
00:23:03,566 --> 00:23:04,896
with heart-related features


823
00:23:04,896 --> 00:23:07,036
since iOS 8, where they've been


824
00:23:07,036 --> 00:23:08,406
able to get heart rate from


825
00:23:08,406 --> 00:23:10,466
Apple Watch, or from sensors


826
00:23:10,466 --> 00:23:12,426
connected to apps created by


827
00:23:12,426 --> 00:23:14,106
developers like you, and view


828
00:23:14,106 --> 00:23:15,566
that data all together in the


829
00:23:15,566 --> 00:23:16,666
Health app.


830
00:23:18,016 --> 00:23:20,126
HealthKit has always had heart


831
00:23:20,126 --> 00:23:22,296
rate support, so if you had a


832
00:23:22,296 --> 00:23:23,596
heart rate reading like the one


833
00:23:23,706 --> 00:23:25,546
here, you could determine that


834
00:23:25,546 --> 00:23:27,356
over a five-second period that


835
00:23:27,736 --> 00:23:29,996
the average heart rate was 68


836
00:23:30,186 --> 00:23:30,766
beats per minute.


837
00:23:30,766 --> 00:23:33,516
And in HealthKit, you would save


838
00:23:33,736 --> 00:23:35,416
that as an HK quantity sample.


839
00:23:35,976 --> 00:23:40,046
In iOS 11, we introduced heart


840
00:23:40,046 --> 00:23:41,606
rate variability SDNN.


841
00:23:42,446 --> 00:23:43,976
Heart rate variability is a


842
00:23:43,976 --> 00:23:45,846
measurement of the variation in


843
00:23:45,846 --> 00:23:47,446
the time intervals between


844
00:23:47,446 --> 00:23:49,636
heartbeats and SDNN stands for


845
00:23:49,636 --> 00:23:51,506
standard deviation normal to


846
00:23:51,506 --> 00:23:51,856
normal.


847
00:23:52,586 --> 00:23:54,196
So, Apple Watch would take the


848
00:23:54,196 --> 00:23:56,616
same heart rate reading and take


849
00:23:56,616 --> 00:23:58,386
the time intervals between each


850
00:23:58,386 --> 00:24:00,286
beat to calculate a standard


851
00:24:00,286 --> 00:24:02,386
deviation and save that as a


852
00:24:02,386 --> 00:24:03,906
quantity sample to HealthKit.


853
00:24:05,076 --> 00:24:06,516
Heart rate and heart rate


854
00:24:06,516 --> 00:24:08,596
variability are both important


855
00:24:08,596 --> 00:24:10,106
metrics for cardiovascular


856
00:24:10,106 --> 00:24:12,076
health and our users have loved


857
00:24:12,076 --> 00:24:13,616
looking at these at a glance


858
00:24:13,616 --> 00:24:15,126
throughout the day or in more


859
00:24:15,126 --> 00:24:16,356
detail, like when they do a


860
00:24:16,356 --> 00:24:16,876
workout.


861
00:24:18,036 --> 00:24:20,386
So, let's take a look at this


862
00:24:20,386 --> 00:24:21,696
same heart rate reading one more


863
00:24:21,696 --> 00:24:22,106
time.


864
00:24:22,916 --> 00:24:24,666
Thus far, I've described to you


865
00:24:24,666 --> 00:24:26,566
ways in which we can summarize


866
00:24:26,646 --> 00:24:28,346
this heart rate data, but


867
00:24:28,346 --> 00:24:29,866
sometimes you want the actual


868
00:24:29,866 --> 00:24:31,336
underlying data itself.


869
00:24:31,996 --> 00:24:33,616
So, let's say that I want the


870
00:24:33,896 --> 00:24:35,736
time-- to know the times at


871
00:24:35,736 --> 00:24:37,046
which each heartbeat occurred.


872
00:24:37,676 --> 00:24:39,536
And returning to our scenario,


873
00:24:39,866 --> 00:24:40,986
let's say that our game


874
00:24:40,986 --> 00:24:42,906
controller has a sensor capable


875
00:24:42,906 --> 00:24:44,546
of telling us any time a new


876
00:24:44,546 --> 00:24:46,276
beat comes in while the user is


877
00:24:46,276 --> 00:24:46,916
playing a game.


878
00:24:47,356 --> 00:24:49,496
So here, the first heartbeat


879
00:24:49,496 --> 00:24:51,716
occurs at 0.5 seconds from the


880
00:24:51,716 --> 00:24:53,166
start point of data collection,


881
00:24:53,496 --> 00:24:56,116
the second at 1.49 seconds, and


882
00:24:56,346 --> 00:24:57,906
we can get-- we can continue to


883
00:24:57,906 --> 00:24:59,486
get the rest of the times that


884
00:24:59,486 --> 00:25:00,856
these beats occurred since the


885
00:25:00,856 --> 00:25:01,946
start of data collection.


886
00:25:02,846 --> 00:25:04,496
So, you'll notice that each beat


887
00:25:04,606 --> 00:25:05,886
happens at a certain point of


888
00:25:05,886 --> 00:25:08,176
time and put together they form


889
00:25:08,216 --> 00:25:09,786
a series of heartbeats.


890
00:25:10,436 --> 00:25:12,136
To save this data to HealthKit,


891
00:25:12,456 --> 00:25:13,076
we have an


892
00:25:13,076 --> 00:25:15,666
HKHeartbeatSeriesSample that


893
00:25:15,666 --> 00:25:17,466
stores a series of heartbeats by


894
00:25:17,466 --> 00:25:18,936
the time stamps at which they


895
00:25:18,936 --> 00:25:19,316
occurred.


896
00:25:20,506 --> 00:25:22,256
Now, you might notice that this


897
00:25:22,256 --> 00:25:24,166
feels similar to the series API


898
00:25:24,166 --> 00:25:25,466
that Luke showed to you before,


899
00:25:26,246 --> 00:25:27,936
but it's important to note that


900
00:25:28,066 --> 00:25:29,446
heartbeat series samples


901
00:25:29,446 --> 00:25:31,746
encapsulate a type of data that


902
00:25:31,746 --> 00:25:33,316
deviates from our other sample


903
00:25:33,316 --> 00:25:34,296
types in HealthKit.


904
00:25:34,946 --> 00:25:36,996
There are no values or units


905
00:25:36,996 --> 00:25:38,706
like the HK quantities that are


906
00:25:38,706 --> 00:25:40,146
the underlying data behind a


907
00:25:40,146 --> 00:25:42,266
quantity series, and therefore


908
00:25:42,266 --> 00:25:43,836
we can more efficiently just


909
00:25:43,836 --> 00:25:46,166
store a series of timestamps to


910
00:25:46,166 --> 00:25:47,786
represent a heartbeat series.


911
00:25:48,366 --> 00:25:51,736
But because we're still storing


912
00:25:51,736 --> 00:25:53,366
a series of data that could get


913
00:25:53,396 --> 00:25:55,246
potentially large, we have in--


914
00:25:55,526 --> 00:25:57,926
we have designed the API to be


915
00:25:58,076 --> 00:25:59,676
familiar to the quantity series,


916
00:26:00,246 --> 00:26:01,316
so we've equipped this


917
00:26:01,316 --> 00:26:03,086
HeartbeatSeriesSample with its


918
00:26:03,086 --> 00:26:04,816
own builder and custom query.


919
00:26:05,366 --> 00:26:08,446
Like quantity series samples,


920
00:26:08,696 --> 00:26:10,056
heartbeat series samples get


921
00:26:10,056 --> 00:26:11,496
created with a builder and


922
00:26:11,536 --> 00:26:12,716
finished when you're done saving


923
00:26:12,716 --> 00:26:12,956
data.


924
00:26:13,646 --> 00:26:14,906
So, let's build one in code.


925
00:26:16,426 --> 00:26:18,316
Our first step, as always, is to


926
00:26:18,316 --> 00:26:19,406
request the proper


927
00:26:19,406 --> 00:26:20,316
authorizations.


928
00:26:20,946 --> 00:26:22,946
For this, you'll need to request


929
00:26:22,946 --> 00:26:25,066
the new heartbeat series type as


930
00:26:25,066 --> 00:26:26,346
well as the quantity type


931
00:26:26,346 --> 00:26:28,256
heartRateVariabilitySDNN


932
00:26:28,386 --> 00:26:30,106
introduced back in iOS 11.


933
00:26:30,896 --> 00:26:31,736
You'll need to request


934
00:26:31,736 --> 00:26:33,396
authorization for both of these


935
00:26:33,396 --> 00:26:34,556
types since heart rate


936
00:26:34,556 --> 00:26:36,436
variability is a metric that can


937
00:26:36,436 --> 00:26:37,846
be directly derived from


938
00:26:37,846 --> 00:26:39,716
heartbeat series and this way


939
00:26:39,716 --> 00:26:40,846
your users have a clear


940
00:26:40,846 --> 00:26:42,256
understanding of exactly the


941
00:26:42,256 --> 00:26:43,686
kind of data they're sharing


942
00:26:43,686 --> 00:26:45,266
with you.


943
00:26:45,486 --> 00:26:46,416
Once we've requested


944
00:26:46,416 --> 00:26:48,526
authorization, we can initialize


945
00:26:48,526 --> 00:26:50,036
a heartbeat series builder with


946
00:26:50,036 --> 00:26:52,016
a healthStore, gameDevice, and


947
00:26:52,016 --> 00:26:53,196
the gameStartDate that will


948
00:26:53,196 --> 00:26:54,586
indicate when we're starting


949
00:26:54,586 --> 00:26:55,366
data collection.


950
00:26:55,856 --> 00:26:58,476
And while the game is ongoing


951
00:26:58,596 --> 00:26:59,606
and our user is playing the


952
00:26:59,606 --> 00:27:01,466
game, we'll add heartbeats with


953
00:27:01,466 --> 00:27:02,906
the time interval since the


954
00:27:02,906 --> 00:27:04,236
series start date to our


955
00:27:04,236 --> 00:27:04,596
builder.


956
00:27:04,976 --> 00:27:08,266
But you might enter a case like


957
00:27:08,326 --> 00:27:10,486
this where your sensor goes down


958
00:27:10,686 --> 00:27:12,096
and here we have a gap in data


959
00:27:12,096 --> 00:27:13,936
collection between seconds two


960
00:27:13,966 --> 00:27:14,466
and three.


961
00:27:15,366 --> 00:27:16,806
Now, it might look like there is


962
00:27:16,806 --> 00:27:19,286
a 1.99 second gap between beats


963
00:27:19,286 --> 00:27:20,876
two and three that could lead to


964
00:27:20,876 --> 00:27:23,516
erroneous interpretation of this


965
00:27:23,516 --> 00:27:24,416
user's heart data.


966
00:27:25,486 --> 00:27:26,846
In order to account for this,


967
00:27:27,056 --> 00:27:28,856
we'll set precededByGap to YES,


968
00:27:29,366 --> 00:27:30,936
which you can set for each beat


969
00:27:30,936 --> 00:27:32,566
that you add if you're aware


970
00:27:32,566 --> 00:27:33,636
that there was a gap in data


971
00:27:33,636 --> 00:27:35,076
collection from a sensor going


972
00:27:35,076 --> 00:27:35,326
down.


973
00:27:35,326 --> 00:27:39,276
Now I can add metadata to my


974
00:27:39,276 --> 00:27:40,736
builder like I would to any


975
00:27:40,736 --> 00:27:41,996
other HK sample.


976
00:27:42,946 --> 00:27:44,816
And when I'm done saving data,


977
00:27:44,906 --> 00:27:46,396
I'll finish the series, which


978
00:27:46,396 --> 00:27:47,696
will save the Heartbeat series


979
00:27:47,696 --> 00:27:51,366
sample to HealthKit.


980
00:27:51,366 --> 00:27:52,936
Now we've added support for


981
00:27:52,936 --> 00:27:54,276
beat-to-beat measurements to our


982
00:27:54,276 --> 00:27:55,806
game and we're ready to start


983
00:27:55,806 --> 00:27:57,556
querying for the underlying beat


984
00:27:57,686 --> 00:27:58,446
measurements.


985
00:27:58,986 --> 00:28:02,056
Like what Luke described to you


986
00:28:02,056 --> 00:28:03,906
before, we can interact with our


987
00:28:03,906 --> 00:28:06,666
normal HK queries to fetch the


988
00:28:06,866 --> 00:28:09,126
high-level samples and then use


989
00:28:09,126 --> 00:28:11,176
the custom queries to interact


990
00:28:11,176 --> 00:28:12,156
with the finer-grain data.


991
00:28:13,536 --> 00:28:15,306
So, my first step will be to run


992
00:28:15,376 --> 00:28:17,326
a normal HK sample query to


993
00:28:17,326 --> 00:28:18,926
fetch my heartbeat series sample


994
00:28:18,926 --> 00:28:19,686
of interest.


995
00:28:20,116 --> 00:28:22,036
And once I've done that, I'll


996
00:28:22,036 --> 00:28:23,336
initialize a heartbeat series


997
00:28:23,336 --> 00:28:25,126
query with that sample, which


998
00:28:25,126 --> 00:28:26,576
will let me enumerate over the


999
00:28:26,576 --> 00:28:27,946
times for each beat.


1000
00:28:28,436 --> 00:28:30,866
And finally, I'll execute my


1001
00:28:30,866 --> 00:28:31,726
query.


1002
00:28:32,286 --> 00:28:35,136
Now, heartbeat series are a


1003
00:28:35,136 --> 00:28:36,856
powerful addition to HealthKit,


1004
00:28:36,976 --> 00:28:38,296
but that's not all we have


1005
00:28:38,526 --> 00:28:39,776
related to heart features.


1006
00:28:40,626 --> 00:28:42,696
Back in iOS 12, Apple Watch


1007
00:28:42,696 --> 00:28:44,326
started notifying users with


1008
00:28:44,326 --> 00:28:45,236
heart alerts.


1009
00:28:46,436 --> 00:28:47,776
A low heart rate alert when


1010
00:28:47,776 --> 00:28:49,806
Apple Watch detected a heart


1011
00:28:49,806 --> 00:28:51,656
rate below a given BPM


1012
00:28:51,656 --> 00:28:53,946
threshold, a high heart rate


1013
00:28:53,946 --> 00:28:55,856
alert for when heart rate rose


1014
00:28:55,856 --> 00:28:58,626
above a given BPM threshold, and


1015
00:28:58,626 --> 00:29:00,056
an irregular heart rate alert


1016
00:29:00,246 --> 00:29:01,776
for when Apple Watch detected a


1017
00:29:01,776 --> 00:29:03,326
rhythm that could be indicative


1018
00:29:03,426 --> 00:29:04,000
of AFib.


1019
00:29:05,876 --> 00:29:07,666
Well, in HealthKit, these alerts


1020
00:29:07,666 --> 00:29:09,086
now come in the form of three


1021
00:29:09,086 --> 00:29:11,266
new category types that will get


1022
00:29:11,266 --> 00:29:12,816
saved to HealthKit any time


1023
00:29:12,816 --> 00:29:14,436
Apple Watch detects an alert.


1024
00:29:15,006 --> 00:29:18,326
Now, in addition to all this


1025
00:29:18,326 --> 00:29:19,816
great heart support, there's


1026
00:29:19,816 --> 00:29:21,576
also this new area that we're


1027
00:29:21,576 --> 00:29:23,656
exposing in iOS 13 and I'm


1028
00:29:23,656 --> 00:29:25,846
excited to share with you that


1029
00:29:25,906 --> 00:29:27,026
hearing health has found its


1030
00:29:27,026 --> 00:29:28,036
place in HealthKit.


1031
00:29:28,036 --> 00:29:31,766
At some point in your life, you


1032
00:29:31,766 --> 00:29:33,196
might remember getting a hearing


1033
00:29:33,196 --> 00:29:35,006
test where you put on a pair of


1034
00:29:35,006 --> 00:29:36,696
headphones and listened to a


1035
00:29:36,696 --> 00:29:39,086
series of sounds and would raise


1036
00:29:39,086 --> 00:29:40,586
your hand as soon as a single


1037
00:29:40,586 --> 00:29:41,736
sound was loud enough for you to


1038
00:29:41,736 --> 00:29:42,056
hear it.


1039
00:29:42,056 --> 00:29:44,066
Well, this was an example of a


1040
00:29:44,066 --> 00:29:46,026
pure tone hearing test, where a


1041
00:29:46,026 --> 00:29:47,496
pure tone is a sound with a


1042
00:29:47,496 --> 00:29:48,506
single frequency.


1043
00:29:49,026 --> 00:29:52,706
Pure tone testing helps identify


1044
00:29:52,706 --> 00:29:54,266
the quietest sound that you can


1045
00:29:54,316 --> 00:29:55,456
hear at a set of different


1046
00:29:55,486 --> 00:29:57,996
frequencies and it can provide


1047
00:29:57,996 --> 00:29:59,236
assessment on the kind of


1048
00:29:59,236 --> 00:30:00,806
hearing impairment or loss that


1049
00:30:00,806 --> 00:30:01,546
you might have.


1050
00:30:03,046 --> 00:30:04,936
The results of pure tone testing


1051
00:30:04,986 --> 00:30:06,776
most commonly get displayed in


1052
00:30:06,776 --> 00:30:08,246
graphs called audiograms.


1053
00:30:08,636 --> 00:30:11,656
This here is an example of an


1054
00:30:11,656 --> 00:30:13,796
audiogram for someone with mild


1055
00:30:13,826 --> 00:30:15,576
hearing impairment and let's


1056
00:30:15,576 --> 00:30:17,456
just zoom into this graph to get


1057
00:30:17,456 --> 00:30:19,106
a better idea of the kind of


1058
00:30:19,106 --> 00:30:20,496
data that is stored in an


1059
00:30:20,496 --> 00:30:21,096
audiogram.


1060
00:30:21,666 --> 00:30:24,256
So, here you'll see two lines,


1061
00:30:24,716 --> 00:30:26,206
one corresponding to the pure


1062
00:30:26,206 --> 00:30:27,916
tone hearing test results from


1063
00:30:27,916 --> 00:30:29,306
the left ear and one for the


1064
00:30:29,306 --> 00:30:29,716
right ear.


1065
00:30:29,716 --> 00:30:31,406
And let's just take a look at


1066
00:30:31,406 --> 00:30:32,726
the first two data points at the


1067
00:30:32,726 --> 00:30:34,076
125-hertz line.


1068
00:30:35,456 --> 00:30:37,126
This shows that for this user to


1069
00:30:37,126 --> 00:30:39,256
hear a sound at a 125-hertz


1070
00:30:39,256 --> 00:30:41,466
frequency, they need around 11


1071
00:30:41,466 --> 00:30:43,086
decibel hearing level units in


1072
00:30:43,086 --> 00:30:45,116
their left ear and 31 in their


1073
00:30:45,116 --> 00:30:45,336
right.


1074
00:30:46,186 --> 00:30:47,696
The decibel hearing level unit


1075
00:30:47,696 --> 00:30:49,226
measures the intensity of a


1076
00:30:49,226 --> 00:30:51,016
sound relative to the quietest


1077
00:30:51,016 --> 00:30:52,416
sound that a young, healthy


1078
00:30:52,416 --> 00:30:53,556
individual would be able to


1079
00:30:53,556 --> 00:30:53,766
hear.


1080
00:30:55,156 --> 00:30:56,706
So, we can get the rest of the


1081
00:30:56,706 --> 00:30:58,516
data points associated with this


1082
00:30:58,516 --> 00:31:00,586
audiogram and in order to store


1083
00:31:00,586 --> 00:31:02,206
this data in HealthKit, we're


1084
00:31:02,206 --> 00:31:05,106
introducing an HKAudiogramSample


1085
00:31:05,346 --> 00:31:06,926
that stores an array of hearing


1086
00:31:06,926 --> 00:31:08,686
sensitivity points associated


1087
00:31:08,686 --> 00:31:09,706
with a hearing test.


1088
00:31:09,966 --> 00:31:11,576
So, let's create an audiogram


1089
00:31:11,576 --> 00:31:14,406
sample and code.


1090
00:31:14,406 --> 00:31:16,606
Our first step is to create an


1091
00:31:16,606 --> 00:31:18,706
HKAudiogramSensitivityPoint that


1092
00:31:18,706 --> 00:31:20,456
encapsulates the intensity of a


1093
00:31:20,456 --> 00:31:22,526
sound required for both ears to


1094
00:31:22,526 --> 00:31:23,676
hear a given frequency.


1095
00:31:24,606 --> 00:31:26,346
So, I'll create a frequency


1096
00:31:26,346 --> 00:31:28,646
quantity with my new HK unit


1097
00:31:28,646 --> 00:31:31,206
hertz unit and a left-ear and


1098
00:31:31,206 --> 00:31:32,786
right-ear sensitivity quantity


1099
00:31:32,786 --> 00:31:34,226
with my new decibel hearing


1100
00:31:34,226 --> 00:31:34,766
level unit.


1101
00:31:36,226 --> 00:31:37,506
Now I'm ready to create an


1102
00:31:37,506 --> 00:31:38,856
audiogram sensitivity point.


1103
00:31:39,786 --> 00:31:41,736
Once you've created an array of


1104
00:31:41,736 --> 00:31:43,336
audiogram sensitivity points,


1105
00:31:43,676 --> 00:31:44,826
you can store that in an


1106
00:31:44,826 --> 00:31:45,916
audiogramSample.


1107
00:31:46,516 --> 00:31:47,586
Now, you'll need to make sure


1108
00:31:47,586 --> 00:31:49,166
that the array of sensitivity


1109
00:31:49,166 --> 00:31:51,036
points are all unique and in


1110
00:31:51,086 --> 00:31:52,646
order, since that's how you


1111
00:31:52,646 --> 00:31:54,156
should expect to interact with


1112
00:31:54,156 --> 00:31:56,176
this data later on in analysis


1113
00:31:56,176 --> 00:31:56,816
or charting.


1114
00:31:58,136 --> 00:31:59,856
And finally, I'm ready to store


1115
00:31:59,856 --> 00:32:01,206
that data to HealthKit.


1116
00:32:02,156 --> 00:32:03,516
And that's how easy it is for


1117
00:32:03,516 --> 00:32:04,886
you to start creating audiogram


1118
00:32:04,886 --> 00:32:06,556
samples and to start building


1119
00:32:06,616 --> 00:32:07,576
hearing health apps with


1120
00:32:07,576 --> 00:32:07,996
HealthKit.


1121
00:32:07,996 --> 00:32:10,866
But an audiogram sample only


1122
00:32:10,866 --> 00:32:12,426
represents the health of your


1123
00:32:12,426 --> 00:32:13,846
ears at a given point of time


1124
00:32:13,886 --> 00:32:14,816
when you're taking a hearing


1125
00:32:14,816 --> 00:32:15,266
test.


1126
00:32:15,536 --> 00:32:17,906
Most of the day, we're exposed


1127
00:32:17,906 --> 00:32:19,556
to sounds through our headphones


1128
00:32:19,556 --> 00:32:21,036
or while we're walking down the


1129
00:32:21,036 --> 00:32:22,906
street in the environment and


1130
00:32:22,906 --> 00:32:24,346
all of that can impact our


1131
00:32:24,346 --> 00:32:25,666
hearing health for life.


1132
00:32:26,256 --> 00:32:28,456
To keep track of the audio


1133
00:32:28,456 --> 00:32:29,966
exposure that you're exposed to


1134
00:32:29,966 --> 00:32:31,456
through your headphones, we have


1135
00:32:31,456 --> 00:32:32,776
a read-write quantity type,


1136
00:32:32,926 --> 00:32:34,306
headphoneAudioExposure.


1137
00:32:34,876 --> 00:32:37,406
And for the rest of the day,


1138
00:32:37,526 --> 00:32:38,676
when we're walking down the


1139
00:32:38,676 --> 00:32:40,306
street exposed to construction


1140
00:32:40,306 --> 00:32:42,556
work sounds or traffic, Apple


1141
00:32:42,556 --> 00:32:44,216
Watch is capable of capturing


1142
00:32:44,216 --> 00:32:45,456
that environmental audio


1143
00:32:45,456 --> 00:32:47,046
exposure data and saving it to


1144
00:32:47,046 --> 00:32:48,846
HealthKit, and for that we have


1145
00:32:48,846 --> 00:32:50,326
an analogous read-write quantity


1146
00:32:50,326 --> 00:32:50,666
type,


1147
00:32:50,976 --> 00:32:52,496
environmentalAudioExposure.


1148
00:32:52,496 --> 00:32:55,516
And for times when environmental


1149
00:32:55,516 --> 00:32:57,326
audio exposure gets too high,


1150
00:32:57,856 --> 00:32:59,376
Apple Watch will generate an


1151
00:32:59,376 --> 00:33:00,926
audio exposure alert to make


1152
00:33:00,926 --> 00:33:02,226
sure that you're aware of the


1153
00:33:02,226 --> 00:33:04,216
possible impact that can have on


1154
00:33:04,216 --> 00:33:05,126
the health of your ears.


1155
00:33:05,836 --> 00:33:06,986
And it will save this as a


1156
00:33:06,986 --> 00:33:09,576
category sample using the new


1157
00:33:09,576 --> 00:33:11,466
audioExposureEvent category type


1158
00:33:11,466 --> 00:33:12,146
identifier.


1159
00:33:12,696 --> 00:33:16,016
So, we've covered a lot about


1160
00:33:16,016 --> 00:33:17,856
the new data representations now


1161
00:33:17,856 --> 00:33:19,596
available with HealthKit and iOS


1162
00:33:19,596 --> 00:33:22,146
13, from new efficient series


1163
00:33:22,146 --> 00:33:23,726
representations to the new


1164
00:33:23,726 --> 00:33:25,196
support with hearing health.


1165
00:33:25,476 --> 00:33:28,366
Now you can officially store


1166
00:33:28,516 --> 00:33:30,656
large numbers of HK quantities,


1167
00:33:30,916 --> 00:33:32,616
the most abundant kind of data


1168
00:33:32,616 --> 00:33:33,396
stored in HealthKit.


1169
00:33:33,396 --> 00:33:36,246
And you have the opportunity to


1170
00:33:36,246 --> 00:33:38,536
represent even more rich data


1171
00:33:38,536 --> 00:33:40,706
representations related to heart


1172
00:33:40,706 --> 00:33:41,406
and hearing health.


1173
00:33:42,676 --> 00:33:44,696
For more information as well as


1174
00:33:44,696 --> 00:33:46,096
our sample code projects you saw


1175
00:33:46,236 --> 00:33:47,896
here, you can visit our session


1176
00:33:47,896 --> 00:33:50,386
link listed or come talk to us


1177
00:33:50,386 --> 00:33:51,806
right after this session at the


1178
00:33:51,806 --> 00:33:53,076
Health and Fitness Technologies


1179
00:33:53,836 --> 00:33:53,926
Lab.


1180
00:33:54,496 --> 00:33:56,736
Thank you and have a great rest


1181
00:33:56,736 --> 00:33:57,976
of your WWDC.


1182
00:33:58,516 --> 00:34:04,500
[ Cheering and Applause ]

