1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:07,516 --> 00:00:13,046
[ Applause ]


3
00:00:13,546 --> 00:00:14,946
>> Hello everyone, my name is


4
00:00:14,946 --> 00:00:16,216
Spencer Lewson, and I'm an


5
00:00:16,216 --> 00:00:17,876
engineer on the Performance Team


6
00:00:18,046 --> 00:00:18,566
here at Apple.


7
00:00:19,446 --> 00:00:21,116
Today I'm very excited to tell


8
00:00:21,116 --> 00:00:22,666
you about how you can optimize


9
00:00:22,816 --> 00:00:23,786
your app's launch.


10
00:00:24,336 --> 00:00:27,196
We'll be covering these four


11
00:00:27,196 --> 00:00:28,006
main topics today.


12
00:00:28,746 --> 00:00:30,686
First, what is launch?


13
00:00:31,256 --> 00:00:32,076
What are the different types of


14
00:00:32,076 --> 00:00:33,516
launches and how do we break


15
00:00:33,516 --> 00:00:34,946
them down into their different


16
00:00:34,946 --> 00:00:35,486
subphases?


17
00:00:36,576 --> 00:00:37,906
Next, we'll be talking about how


18
00:00:37,906 --> 00:00:39,216
to properly measure your app's


19
00:00:39,216 --> 00:00:39,626
launch.


20
00:00:40,646 --> 00:00:42,356
Out in the field, iOS devices


21
00:00:42,356 --> 00:00:43,366
can be in a variety of different


22
00:00:43,436 --> 00:00:46,226
states and conditions, and these


23
00:00:46,226 --> 00:00:48,126
states and conditions can


24
00:00:48,126 --> 00:00:49,546
produce inconsistent launch


25
00:00:49,546 --> 00:00:49,886
results.


26
00:00:50,566 --> 00:00:51,656
So, it's important to understand


27
00:00:51,656 --> 00:00:53,136
these states and how to reduce


28
00:00:53,176 --> 00:00:54,236
their impact when you're taking


29
00:00:54,236 --> 00:00:54,596
measurements.


30
00:00:55,266 --> 00:00:58,826
Once you've done that, you can


31
00:00:58,826 --> 00:00:59,866
take a look at how to use


32
00:01:00,006 --> 00:01:02,106
Instruments to profile and


33
00:01:02,106 --> 00:01:03,476
understand your app to find


34
00:01:03,476 --> 00:01:04,806
opportunities to improve it.


35
00:01:06,026 --> 00:01:07,296
And finally, we'll leave you


36
00:01:07,346 --> 00:01:09,406
with some tips and some tricks on how


37
00:01:09,406 --> 00:01:10,616
to monitor your app's launch,


38
00:01:10,976 --> 00:01:12,856
both over time and in the field,


39
00:01:13,316 --> 00:01:14,806
to ensure that you consistently


40
00:01:14,806 --> 00:01:16,746
deliver a delightful experience


41
00:01:17,056 --> 00:01:17,866
to all of your users.


42
00:01:17,866 --> 00:01:21,356
So, what is that app launch I


43
00:01:21,616 --> 00:01:22,466
was talking about?


44
00:01:23,226 --> 00:01:25,626
Well, app launch is a user


45
00:01:25,626 --> 00:01:26,626
experience interruption.


46
00:01:27,966 --> 00:01:28,996
What do I mean by this?


47
00:01:29,536 --> 00:01:30,076
Let's take a look.


48
00:01:31,126 --> 00:01:34,136
Okay, ready, set, go.


49
00:01:38,186 --> 00:01:40,546
Wow, on the iPhone 6S Plus,


50
00:01:41,176 --> 00:01:43,366
launch took nearly 2.5 seconds,


51
00:01:44,176 --> 00:01:45,736
and this wasn't as delightful as


52
00:01:45,736 --> 00:01:46,946
our users expect it to be.


53
00:01:48,326 --> 00:01:49,736
You know, it's really important


54
00:01:49,736 --> 00:01:50,676
for launch to be delightful,


55
00:01:51,326 --> 00:01:52,396
because it happens a lot.


56
00:01:53,276 --> 00:01:55,746
In fact, across all iOS devices,


57
00:01:56,316 --> 00:01:58,176
it happens billions of times a


58
00:01:58,176 --> 00:01:58,436
day.


59
00:01:59,666 --> 00:02:00,336
So, we did some number


60
00:02:00,336 --> 00:02:02,286
crunching, and we figured out


61
00:02:02,286 --> 00:02:03,916
that with we save only one


62
00:02:03,916 --> 00:02:05,476
millisecond on each of those


63
00:02:05,476 --> 00:02:07,586
launches, we would save an


64
00:02:07,586 --> 00:02:12,186
astounding 162 days of launch


65
00:02:13,196 --> 00:02:15,026
time, yes, in other words,


66
00:02:16,506 --> 00:02:18,236
[applause] thank you, in other


67
00:02:18,236 --> 00:02:19,916
words, that's the amount of time


68
00:02:19,916 --> 00:02:22,356
it takes to send a rocket to


69
00:02:22,356 --> 00:02:22,886
Mars.


70
00:02:23,626 --> 00:02:26,246
But it's also important for a


71
00:02:26,246 --> 00:02:27,236
number of other reasons.


72
00:02:27,926 --> 00:02:31,626
First of all, your app's launch


73
00:02:31,706 --> 00:02:33,176
is your user, first experience


74
00:02:33,176 --> 00:02:35,216
with your app, and as such, it


75
00:02:35,216 --> 00:02:35,946
should be delightful.


76
00:02:37,236 --> 00:02:38,646
Now it's important to remember


77
00:02:38,646 --> 00:02:40,326
that as developers, we tend to


78
00:02:40,326 --> 00:02:41,796
gravitate towards newer devices.


79
00:02:42,706 --> 00:02:43,766
So, it's important to ensure


80
00:02:43,906 --> 00:02:45,126
that the experience that you see


81
00:02:45,126 --> 00:02:46,876
in your hand is the same


82
00:02:46,876 --> 00:02:48,146
experience that the customers,


83
00:02:48,626 --> 00:02:50,386
that your users, have in their


84
00:02:50,386 --> 00:02:52,506
hands on different iOS devices


85
00:02:53,016 --> 00:02:55,606
and under different conditions.


86
00:02:57,356 --> 00:02:59,726
Furthermore, launch covers a


87
00:02:59,726 --> 00:03:01,026
huge part of your code base,


88
00:03:01,716 --> 00:03:02,736
from primer coating, to


89
00:03:02,736 --> 00:03:04,476
initialization, to view


90
00:03:04,476 --> 00:03:05,646
creation, and more.


91
00:03:06,316 --> 00:03:08,076
And as such, if you're seen that


92
00:03:08,076 --> 00:03:09,976
your launch isn't as delightful


93
00:03:10,196 --> 00:03:11,546
as your users expected to be,


94
00:03:12,226 --> 00:03:13,436
this might be indicative that


95
00:03:13,436 --> 00:03:14,496
there's other parts of your code


96
00:03:14,496 --> 00:03:17,086
base that are delightful, as


97
00:03:17,776 --> 00:03:17,896
well.


98
00:03:18,066 --> 00:03:19,686
Finally, launch is a very


99
00:03:19,686 --> 00:03:20,726
intense time for the phone.


100
00:03:21,456 --> 00:03:23,326
Involves a lot of CPU work and a


101
00:03:23,326 --> 00:03:24,046
lot of memory work.


102
00:03:24,956 --> 00:03:25,846
So, you should try to reduce


103
00:03:25,906 --> 00:03:27,486
this as it impacts the system


104
00:03:27,486 --> 00:03:29,126
performance, and of course, your


105
00:03:29,316 --> 00:03:30,306
user's battery life.


106
00:03:30,736 --> 00:03:33,496
So, let's take a look at those


107
00:03:33,696 --> 00:03:34,886
launches I talked about before,


108
00:03:35,386 --> 00:03:38,216
there's a cold launch, a warm


109
00:03:38,216 --> 00:03:40,386
launch, and something is often


110
00:03:40,696 --> 00:03:42,056
referred to as launch, but isn't


111
00:03:42,056 --> 00:03:43,216
quite a launch, a resume.


112
00:03:45,616 --> 00:03:47,166
Cold launches occur after


113
00:03:47,166 --> 00:03:49,316
reboot, or when your app has not


114
00:03:49,316 --> 00:03:50,456
been launched for very long


115
00:03:50,456 --> 00:03:50,666
time.


116
00:03:52,116 --> 00:03:54,106
In order to launcher app, we


117
00:03:54,106 --> 00:03:55,436
need to bring it from disk into


118
00:03:55,436 --> 00:03:57,666
memory, startup system-side


119
00:03:57,666 --> 00:03:58,906
services that support your app,


120
00:03:58,906 --> 00:04:00,816
and then spawn your process.


121
00:04:02,266 --> 00:04:03,616
As you'd expect, this can take a


122
00:04:03,616 --> 00:04:05,886
little time, but fortunately,


123
00:04:05,916 --> 00:04:07,546
once it's happened once, you'll


124
00:04:07,546 --> 00:04:09,006
experience a warm launch.


125
00:04:09,576 --> 00:04:12,496
In this case, your app still


126
00:04:12,496 --> 00:04:14,516
needs to be spawned, but we've


127
00:04:14,516 --> 00:04:15,916
already brought your app into


128
00:04:15,916 --> 00:04:17,565
memory and started up some of


129
00:04:17,565 --> 00:04:18,896
those system-side services.


130
00:04:19,426 --> 00:04:20,255
So, this will be a little bit


131
00:04:20,255 --> 00:04:21,416
faster and a little bit more


132
00:04:21,416 --> 00:04:22,036
consistent.


133
00:04:23,676 --> 00:04:25,206
Finally, there's that resume.


134
00:04:26,256 --> 00:04:28,536
This occurs when a user reenters


135
00:04:28,536 --> 00:04:30,066
your app from either the home


136
00:04:30,066 --> 00:04:31,306
screen or the app switcher.


137
00:04:32,336 --> 00:04:33,926
As you know, the app is already


138
00:04:33,926 --> 00:04:35,546
launched at this point, so it's


139
00:04:35,546 --> 00:04:36,786
going to be very fast.


140
00:04:38,146 --> 00:04:39,066
What you need to remember from


141
00:04:39,066 --> 00:04:41,256
this is not to confuse resumes


142
00:04:41,396 --> 00:04:42,716
with launches when you're taking


143
00:04:42,716 --> 00:04:43,116
measurements.


144
00:04:43,906 --> 00:04:46,436
So, given this information,


145
00:04:46,936 --> 00:04:49,986
wouldn't it be great if launches


146
00:04:50,696 --> 00:04:56,006
were as quick and as delightful


147
00:04:56,516 --> 00:04:57,096
as resumes?


148
00:04:57,826 --> 00:05:00,676
How can we achieve that?


149
00:05:02,036 --> 00:05:04,146
Well, we need to hit the goal of


150
00:05:04,146 --> 00:05:05,486
rendering our first frame within


151
00:05:05,626 --> 00:05:06,906
400 milliseconds.


152
00:05:08,066 --> 00:05:09,266
That's so that we have pixels


153
00:05:09,266 --> 00:05:10,866
displayed to the user during the


154
00:05:10,866 --> 00:05:13,116
launch animation, and by the


155
00:05:13,116 --> 00:05:14,136
time that launch animation is


156
00:05:14,136 --> 00:05:15,796
complete, your app is


157
00:05:15,796 --> 00:05:17,506
interactive and responsive.


158
00:05:18,096 --> 00:05:20,346
The first step to doing that is


159
00:05:20,346 --> 00:05:21,676
understanding what is happening


160
00:05:21,676 --> 00:05:22,296
during launch.


161
00:05:22,866 --> 00:05:24,666
So, let's launch Maps.


162
00:05:26,496 --> 00:05:28,126
As you know, launch generally


163
00:05:28,126 --> 00:05:29,606
starts when the user taps your


164
00:05:29,606 --> 00:05:32,236
icon on your home screen.


165
00:05:32,406 --> 00:05:34,316
Then over the next 100 or so


166
00:05:34,316 --> 00:05:36,136
milliseconds, iOS will do the


167
00:05:36,136 --> 00:05:37,916
necessary system-side work in


168
00:05:37,916 --> 00:05:39,746
order to initialize your app.


169
00:05:40,456 --> 00:05:42,386
That leaves you as developers


170
00:05:42,786 --> 00:05:45,276
about 300 milliseconds to create


171
00:05:45,276 --> 00:05:46,846
your views, load your content,


172
00:05:46,846 --> 00:05:48,206
and generate your first frame.


173
00:05:49,716 --> 00:05:51,506
Now this frame doesn't


174
00:05:51,506 --> 00:05:52,876
necessarily need to be fully


175
00:05:52,876 --> 00:05:53,316
complete.


176
00:05:53,316 --> 00:05:55,056
It can have some placeholders


177
00:05:55,226 --> 00:05:56,456
for asynchronously loading data,


178
00:05:57,716 --> 00:05:58,996
but at this point, your app


179
00:05:58,996 --> 00:06:00,706
should be interactive and


180
00:06:00,706 --> 00:06:01,356
responsive.


181
00:06:02,536 --> 00:06:04,936
So, in the case of Maps, all the


182
00:06:04,936 --> 00:06:06,106
tiles have not yet loaded.


183
00:06:06,526 --> 00:06:07,586
You can still initiate your


184
00:06:07,586 --> 00:06:09,116
search and browse your


185
00:06:09,876 --> 00:06:10,086
favorites.


186
00:06:10,656 --> 00:06:11,986
Then over the next couple


187
00:06:11,986 --> 00:06:13,786
hundred milliseconds, you can


188
00:06:13,786 --> 00:06:15,006
display that asynchronously


189
00:06:15,006 --> 00:06:16,636
loaded data and generate your


190
00:06:16,636 --> 00:06:17,646
final frame for your user.


191
00:06:18,636 --> 00:06:19,646
Let's take a closer look at


192
00:06:19,646 --> 00:06:19,976
these phases.


193
00:06:24,156 --> 00:06:25,316
These six phases cover


194
00:06:25,316 --> 00:06:26,546
everything from system


195
00:06:26,546 --> 00:06:28,676
initialization to the app


196
00:06:28,676 --> 00:06:30,846
initialization to view creation


197
00:06:30,846 --> 00:06:32,716
and layout, and then depending


198
00:06:32,716 --> 00:06:34,576
on your app, potentially a


199
00:06:34,576 --> 00:06:36,736
asynchronous loading phase for


200
00:06:37,036 --> 00:06:37,976
your data, the extended phase.


201
00:06:42,086 --> 00:06:43,256
The first half of system


202
00:06:43,256 --> 00:06:44,666
interface is dyld.


203
00:06:44,726 --> 00:06:47,476
For those of you unfamiliar, a


204
00:06:47,476 --> 00:06:49,356
dynamic linker loads your shared


205
00:06:49,356 --> 00:06:50,536
libraries and frameworks.


206
00:06:52,156 --> 00:06:56,256
Now in 2017, we introduced dyld


207
00:06:56,296 --> 00:06:58,636
3, which added exciting


208
00:06:58,636 --> 00:07:00,026
optimizations to the system.


209
00:07:01,096 --> 00:07:02,026
Well, we're happy to announce


210
00:07:02,026 --> 00:07:03,906
that in iOS 13, we're bringing


211
00:07:03,906 --> 00:07:05,606
these optimizations to your


212
00:07:05,846 --> 00:07:05,966
apps.


213
00:07:07,176 --> 00:07:08,726
That means we are now caching


214
00:07:08,726 --> 00:07:10,166
your runtime dependencies, or


215
00:07:10,166 --> 00:07:11,766
warm launches, which should give


216
00:07:11,766 --> 00:07:13,106
them a significant speed


217
00:07:13,106 --> 00:07:13,486
improvement [applause].


218
00:07:13,956 --> 00:07:15,446
Thank you.


219
00:07:21,066 --> 00:07:22,566
Now with a new linker, comes


220
00:07:22,566 --> 00:07:23,606
some new recommendations.


221
00:07:24,846 --> 00:07:26,126
To take full advantage of these


222
00:07:26,126 --> 00:07:28,606
new improvements, we recommend


223
00:07:28,606 --> 00:07:30,276
that you avoid linking unused


224
00:07:30,276 --> 00:07:31,626
frameworks, as this can have


225
00:07:31,626 --> 00:07:32,786
hidden costs, which we'll show


226
00:07:32,786 --> 00:07:33,136
you later.


227
00:07:34,646 --> 00:07:37,186
We also recommend that you avoid


228
00:07:37,186 --> 00:07:39,236
dynamic library loading, such as


229
00:07:39,236 --> 00:07:42,086
DLOpen or NSbundleLoad, because


230
00:07:42,166 --> 00:07:43,666
this forfeits those wins you


231
00:07:43,666 --> 00:07:44,916
would have gotten by having


232
00:07:44,916 --> 00:07:46,516
those in your cache.


233
00:07:47,816 --> 00:07:49,216
Finally, that means that you


234
00:07:49,216 --> 00:07:51,386
should be hard linking all of


235
00:07:51,386 --> 00:07:52,786
your dependencies, as it's now


236
00:07:52,916 --> 00:07:54,676
even faster than it was before.


237
00:07:57,456 --> 00:07:58,886
The second half of system


238
00:07:58,886 --> 00:08:00,476
interface is libSystemInit.


239
00:08:01,616 --> 00:08:02,716
This is when we initialize the


240
00:08:02,716 --> 00:08:04,376
low-level system components


241
00:08:04,376 --> 00:08:05,336
within your application.


242
00:08:06,436 --> 00:08:08,106
Now this is mostly system-side


243
00:08:08,106 --> 00:08:09,556
work with a fixed cost.


244
00:08:10,336 --> 00:08:11,446
So, use developers don't need to


245
00:08:11,446 --> 00:08:11,976
focus on the section.


246
00:08:15,106 --> 00:08:16,286
Now we have static runtime


247
00:08:16,286 --> 00:08:16,956
initialization.


248
00:08:18,496 --> 00:08:19,406
This is when the system


249
00:08:19,406 --> 00:08:21,386
initializes your Objective-C and


250
00:08:21,386 --> 00:08:22,136
Swift run times.


251
00:08:23,666 --> 00:08:25,006
Now in general, your app


252
00:08:25,006 --> 00:08:26,136
shouldn't be doing any work here


253
00:08:26,706 --> 00:08:27,406
unless you have static


254
00:08:27,406 --> 00:08:29,416
initializer methods, which are


255
00:08:29,416 --> 00:08:30,816
possibly present in your code,


256
00:08:31,436 --> 00:08:33,446
or more likely, a surprise from


257
00:08:33,446 --> 00:08:35,246
the frameworks that you link.


258
00:08:36,056 --> 00:08:37,666
In general, we don't recommend


259
00:08:37,666 --> 00:08:38,626
static initialization.


260
00:08:38,626 --> 00:08:40,395
So, let's take a moment to talk


261
00:08:40,395 --> 00:08:42,186
about how to reduce its impact.


262
00:08:43,376 --> 00:08:45,016
If you own a framework which


263
00:08:45,016 --> 00:08:46,336
uses static initialization,


264
00:08:46,686 --> 00:08:48,916
consider exposing API to


265
00:08:48,916 --> 00:08:50,076
initialize your stack early.


266
00:08:50,716 --> 00:08:52,636
But if you must use static


267
00:08:52,636 --> 00:08:54,916
initialization, consider moving


268
00:08:54,916 --> 00:08:56,966
code out of class load which is


269
00:08:56,966 --> 00:08:59,366
invoked every time during launch


270
00:09:00,226 --> 00:09:01,906
to class initialize, which is


271
00:09:01,906 --> 00:09:03,646
lazily invoked the first time


272
00:09:03,646 --> 00:09:06,316
you use a method within your


273
00:09:07,936 --> 00:09:08,066
class.


274
00:09:08,246 --> 00:09:09,946
Next up is UIKit Initialization.


275
00:09:11,266 --> 00:09:12,156
This is when the system


276
00:09:12,186 --> 00:09:13,896
instantiates your UIApplication


277
00:09:13,896 --> 00:09:15,896
and your UIApplicationDelegate.


278
00:09:16,566 --> 00:09:18,646
For the most part, this is


279
00:09:18,646 --> 00:09:20,036
system-side work, setting up


280
00:09:20,036 --> 00:09:21,606
event processing and integration


281
00:09:21,606 --> 00:09:22,206
with the system.


282
00:09:23,256 --> 00:09:24,226
But you can still effect this


283
00:09:24,226 --> 00:09:26,996
phase if you subclass


284
00:09:26,996 --> 00:09:29,876
UIApplication or you do any work


285
00:09:30,056 --> 00:09:31,226
in UIApplicationDelegate


286
00:09:31,326 --> 00:09:31,926
initializers.


287
00:09:32,646 --> 00:09:35,746
Now we have application


288
00:09:35,746 --> 00:09:36,516
initialization.


289
00:09:37,436 --> 00:09:38,476
This is where the good stuff is.


290
00:09:38,896 --> 00:09:40,136
This is where you as developers


291
00:09:40,136 --> 00:09:40,996
can likely have the biggest


292
00:09:40,996 --> 00:09:42,226
impact on your app's


293
00:09:42,226 --> 00:09:42,706
launch.


294
00:09:43,246 --> 00:09:45,586
For those of you who have not


295
00:09:45,586 --> 00:09:47,826
yet adopted the new UIC in APIs


296
00:09:49,146 --> 00:09:50,326
or are targeting iOS 12 or


297
00:09:50,326 --> 00:09:53,356
earlier, Application Init works,


298
00:09:54,116 --> 00:09:55,766
again, with these delegate


299
00:09:55,766 --> 00:09:56,426
call-back methods.


300
00:09:57,186 --> 00:09:57,736
application:


301
00:09:57,736 --> 00:09:58,946
willFinishLaunchingwithOptions,


302
00:09:59,276 --> 00:09:59,966
and application:


303
00:10:00,096 --> 00:10:01,216
didFinishLaunchingwithOptions.


304
00:10:01,956 --> 00:10:04,196
As your app is displayed to the


305
00:10:04,196 --> 00:10:06,286
user, the further methods,


306
00:10:07,006 --> 00:10:08,626
applicationDidBecomeActive: will


307
00:10:08,626 --> 00:10:09,036
be invoked.


308
00:10:10,176 --> 00:10:11,356
Now it's important to know that


309
00:10:11,356 --> 00:10:13,316
if you have not UIScenes, you


310
00:10:13,316 --> 00:10:14,116
should be creating your view


311
00:10:14,116 --> 00:10:15,246
controllers and


312
00:10:15,246 --> 00:10:16,546
didFinishLaunchingwithOptions.


313
00:10:17,686 --> 00:10:19,276
That's because with UIScene,


314
00:10:19,666 --> 00:10:21,546
ApplicationInit works a little


315
00:10:22,206 --> 00:10:23,216
bit differently.


316
00:10:23,216 --> 00:10:24,276
Now you will still get


317
00:10:24,276 --> 00:10:25,456
willFinishLaunching and


318
00:10:25,456 --> 00:10:26,726
didFinishLaunchingwithOptions,


319
00:10:27,546 --> 00:10:28,736
but as your app is displayed to


320
00:10:28,736 --> 00:10:30,126
the user, you will get the


321
00:10:30,126 --> 00:10:32,436
UISceneDelegate lifecycle


322
00:10:32,436 --> 00:10:32,836
callbacks.


323
00:10:34,116 --> 00:10:35,256
Those are, of course scene:


324
00:10:35,256 --> 00:10:35,986
willConnectwithSession with


325
00:10:35,986 --> 00:10:36,426
options.


326
00:10:36,846 --> 00:10:38,586
ScenewillEnterForeground, and


327
00:10:38,586 --> 00:10:39,446
sceneDidBecomeActive.


328
00:10:40,106 --> 00:10:41,666
You should be creating your view


329
00:10:41,666 --> 00:10:43,446
controllers, and scene:


330
00:10:43,446 --> 00:10:44,866
willConnecttoSessionwithOptions.


331
00:10:46,266 --> 00:10:48,016
It's important to note that you


332
00:10:48,016 --> 00:10:49,206
should be only creating your


333
00:10:49,206 --> 00:10:50,256
view controllers, and scene:


334
00:10:50,256 --> 00:10:51,406
willConnectToSessionwithOptions,


335
00:10:51,666 --> 00:10:52,836
and that also, and


336
00:10:52,836 --> 00:10:53,956
didFinishLaunchingwithOptions.


337
00:10:54,416 --> 00:10:55,956
That the common pitfall, which,


338
00:10:55,956 --> 00:10:56,656
of course, results in


339
00:10:56,656 --> 00:10:59,176
performance losses and, likely,


340
00:10:59,476 --> 00:11:01,826
unpredictable bugs in your code


341
00:11:04,316 --> 00:11:04,426
base.


342
00:11:04,636 --> 00:11:05,716
Regardless of whether or not


343
00:11:05,846 --> 00:11:07,256
you've adopted the new UIScene


344
00:11:07,326 --> 00:11:09,196
APIs, our advice for this phase


345
00:11:09,196 --> 00:11:09,996
is generally the same.


346
00:11:09,996 --> 00:11:12,896
You should be deferring any


347
00:11:12,896 --> 00:11:14,456
unrelated work but it's not


348
00:11:14,456 --> 00:11:15,926
necessary to commit your first


349
00:11:15,926 --> 00:11:18,446
frame, by either pushing it to


350
00:11:18,446 --> 00:11:20,846
the background queues or just


351
00:11:20,846 --> 00:11:22,346
doing it later entirely.


352
00:11:25,096 --> 00:11:27,386
If you did adopt UIScenes, you


353
00:11:27,386 --> 00:11:28,886
can do one more thing, and


354
00:11:28,886 --> 00:11:29,746
that's make sure that you're


355
00:11:29,746 --> 00:11:31,056
sharing your resources between


356
00:11:31,056 --> 00:11:31,506
your Scenes.


357
00:11:32,126 --> 00:11:33,486
This is, of course, to reduce


358
00:11:33,486 --> 00:11:35,456
the overhead of doing any work


359
00:11:35,456 --> 00:11:37,766
unnecessarily multiple times.


360
00:11:38,696 --> 00:11:40,206
To learn more about UIScenes,


361
00:11:40,636 --> 00:11:41,446
please take a look at these two


362
00:11:41,446 --> 00:11:43,366
talks from earlier this week.


363
00:11:46,126 --> 00:11:47,156
Next is the first frame render


364
00:11:47,156 --> 00:11:47,456
phase.


365
00:11:48,446 --> 00:11:49,466
Now, this is relatively


366
00:11:49,466 --> 00:11:50,066
straightforward.


367
00:11:50,506 --> 00:11:51,776
This is when we create your


368
00:11:51,776 --> 00:11:53,666
views, perform layout, and then


369
00:11:53,666 --> 00:11:54,106
draw them.


370
00:11:55,236 --> 00:11:56,486
We then take that information,


371
00:11:56,956 --> 00:11:58,166
and we commit and render your


372
00:11:58,166 --> 00:11:59,586
first frame into nice, shiny


373
00:11:59,586 --> 00:11:59,956
pixels.


374
00:12:02,446 --> 00:12:03,816
You can affect this phase by


375
00:12:03,816 --> 00:12:05,876
reducing the number of views in


376
00:12:05,876 --> 00:12:06,406
your hierarchy.


377
00:12:06,446 --> 00:12:08,466
And you can do that by


378
00:12:08,656 --> 00:12:09,946
flattening your views to use


379
00:12:09,946 --> 00:12:13,156
less or by lazily loading views


380
00:12:13,546 --> 00:12:14,556
that are not shown during


381
00:12:14,556 --> 00:12:15,026
launch.


382
00:12:15,556 --> 00:12:17,616
You should also take a look at


383
00:12:17,616 --> 00:12:18,946
your auto layout and see if you


384
00:12:18,946 --> 00:12:19,966
can reduce the number of


385
00:12:19,966 --> 00:12:21,496
constraints you're using.


386
00:12:23,516 --> 00:12:25,096
Finally, we have the extended


387
00:12:25,096 --> 00:12:25,416
phase.


388
00:12:26,106 --> 00:12:27,776
This is the app-specific period


389
00:12:27,896 --> 00:12:29,786
from your first commit until


390
00:12:29,786 --> 00:12:31,386
when you show your final frame


391
00:12:31,386 --> 00:12:31,976
to your user.


392
00:12:33,016 --> 00:12:34,146
This is when you load that


393
00:12:34,146 --> 00:12:35,266
asynchronous data we talked


394
00:12:35,266 --> 00:12:35,506
about.


395
00:12:36,316 --> 00:12:38,086
Now not every app has this


396
00:12:38,706 --> 00:12:38,826
phase.


397
00:12:39,916 --> 00:12:41,546
But if you do have this phase,


398
00:12:42,736 --> 00:12:43,956
your app should be interactive


399
00:12:44,146 --> 00:12:44,876
and responsive.


400
00:12:45,436 --> 00:12:47,936
If you do have this phase, we


401
00:12:47,936 --> 00:12:49,366
only have general advice on how


402
00:12:49,366 --> 00:12:50,956
you should approach it, and that


403
00:12:50,956 --> 00:12:52,216
is to understand what is


404
00:12:52,216 --> 00:12:54,386
happening, and you can do that


405
00:12:54,386 --> 00:12:56,626
by leveraging OS signpost APIs


406
00:12:56,956 --> 00:12:58,506
to mark out and measure the work


407
00:12:58,506 --> 00:12:59,856
that occurs in between these two


408
00:12:59,856 --> 00:13:00,336
time periods.


409
00:13:04,476 --> 00:13:05,956
Now that we talked about what


410
00:13:05,956 --> 00:13:07,786
launch is, let's talk about how


411
00:13:07,786 --> 00:13:08,886
to get usable measurements.


412
00:13:11,556 --> 00:13:14,236
At any given time, an iOS device


413
00:13:14,236 --> 00:13:16,006
is under a variety of different


414
00:13:16,006 --> 00:13:17,836
states and conditions, and this


415
00:13:17,836 --> 00:13:19,066
can introduce substantial


416
00:13:19,066 --> 00:13:20,226
variance into launch.


417
00:13:21,166 --> 00:13:22,506
So, when we're analyzing and


418
00:13:22,506 --> 00:13:24,356
comparing our launch results,


419
00:13:24,846 --> 00:13:26,686
it's critical to ensure that


420
00:13:26,686 --> 00:13:27,896
we're making apples-to-apples


421
00:13:27,896 --> 00:13:30,106
comparisons, because how do you


422
00:13:30,106 --> 00:13:30,826
know if you're making any


423
00:13:30,876 --> 00:13:33,396
progress if before you make any


424
00:13:33,396 --> 00:13:35,146
changes, your launch results are


425
00:13:35,146 --> 00:13:36,356
completely unpredictable?


426
00:13:36,896 --> 00:13:38,866
The first step to making them


427
00:13:38,866 --> 00:13:40,546
predictable is removing those


428
00:13:40,546 --> 00:13:42,316
sources of variance, such as


429
00:13:42,316 --> 00:13:44,286
networking interference and


430
00:13:44,286 --> 00:13:45,236
interference in background


431
00:13:45,236 --> 00:13:45,816
processes.


432
00:13:47,126 --> 00:13:48,526
Now we realize that this sounds


433
00:13:48,576 --> 00:13:50,366
counterintuitive, as this may


434
00:13:50,366 --> 00:13:51,836
result in a launch that's not


435
00:13:51,836 --> 00:13:53,366
entirely representative of


436
00:13:53,366 --> 00:13:55,506
regular usage, but we wanted to


437
00:13:55,506 --> 00:13:57,276
let you know that that's okay.


438
00:13:58,356 --> 00:13:59,456
It's more important to have


439
00:13:59,566 --> 00:14:01,286
consistent results with which


440
00:14:01,286 --> 00:14:02,416
you can evaluate progress.


441
00:14:03,216 --> 00:14:05,366
At Apple, we've been using this


442
00:14:05,366 --> 00:14:07,186
technique to successfully detect


443
00:14:07,276 --> 00:14:08,666
regressions during development


444
00:14:09,186 --> 00:14:10,326
and drive down launch times.


445
00:14:11,106 --> 00:14:11,976
We then validate these


446
00:14:11,976 --> 00:14:13,736
performance improvements by


447
00:14:14,016 --> 00:14:15,626
using telemetry collected from


448
00:14:16,156 --> 00:14:17,406
the field.


449
00:14:17,586 --> 00:14:18,816
Fortunately, we have some tips


450
00:14:18,816 --> 00:14:20,076
on setting up that clean and


451
00:14:20,076 --> 00:14:21,066
consistent environment.


452
00:14:23,176 --> 00:14:25,146
First, reboot your device.


453
00:14:26,046 --> 00:14:26,976
This will clear out any


454
00:14:26,976 --> 00:14:28,616
unnecessary state, and then let


455
00:14:28,616 --> 00:14:29,996
it settle down over the next few


456
00:14:29,996 --> 00:14:31,506
minutes to clear up any boot


457
00:14:31,506 --> 00:14:31,956
time work.


458
00:14:34,256 --> 00:14:35,076
You could also reduce your


459
00:14:35,076 --> 00:14:37,126
dependence on the network by


460
00:14:37,126 --> 00:14:38,486
either turning on airplane mode


461
00:14:39,196 --> 00:14:40,306
or marking out your network


462
00:14:40,306 --> 00:14:41,446
dependencies in code.


463
00:14:42,496 --> 00:14:44,646
Networking can introduce a fair


464
00:14:44,646 --> 00:14:45,156
amount of variance.


465
00:14:45,926 --> 00:14:48,056
Next is iCloud.


466
00:14:49,176 --> 00:14:50,746
ICloud is a great feature which


467
00:14:50,776 --> 00:14:51,926
works in the background to


468
00:14:51,926 --> 00:14:53,436
deliver a seamless experience to


469
00:14:53,436 --> 00:14:55,726
our users, but that work in the


470
00:14:55,726 --> 00:14:57,116
background can interfere with


471
00:14:57,116 --> 00:14:57,776
app launch.


472
00:14:58,246 --> 00:14:59,236
So, during your measurements,


473
00:15:00,106 --> 00:15:01,536
using unchanging iCloud account


474
00:15:01,636 --> 00:15:04,446
with unchanging data, or log out


475
00:15:04,446 --> 00:15:05,746
of iCloud entirely.


476
00:15:06,296 --> 00:15:09,906
Next be sure to use the release


477
00:15:09,906 --> 00:15:12,456
build of your application when


478
00:15:12,456 --> 00:15:13,276
you're making measurements.


479
00:15:13,946 --> 00:15:17,646
This is, of course, to reduce


480
00:15:17,646 --> 00:15:19,306
the overhead of unnecessary


481
00:15:19,306 --> 00:15:20,536
debugging code during your


482
00:15:20,536 --> 00:15:22,796
measurements and to take


483
00:15:22,796 --> 00:15:24,196
advantage of the compile time


484
00:15:24,196 --> 00:15:24,946
optimizations.


485
00:15:26,276 --> 00:15:28,196
Finally, you should be measuring


486
00:15:28,246 --> 00:15:30,216
with warm launches, which as


487
00:15:30,216 --> 00:15:31,406
mentioned before, are more


488
00:15:31,406 --> 00:15:33,216
consistent, because some of your


489
00:15:33,216 --> 00:15:34,196
app may already be in memory,


490
00:15:34,996 --> 00:15:35,946
and some of those system-side


491
00:15:35,946 --> 00:15:37,506
services may already be running.


492
00:15:37,536 --> 00:15:41,786
Now we can set up some data to


493
00:15:41,786 --> 00:15:42,196
test with.


494
00:15:43,286 --> 00:15:44,716
It's important to create a mock


495
00:15:44,806 --> 00:15:46,136
data set which is consistent,


496
00:15:46,136 --> 00:15:48,296
and you might need a couple data


497
00:15:48,296 --> 00:15:49,366
sets for different types of


498
00:15:49,366 --> 00:15:51,376
users, such as users with small


499
00:15:51,376 --> 00:15:53,236
amounts of data and users with


500
00:15:53,336 --> 00:15:55,966
large amounts of data, though,


501
00:15:55,966 --> 00:15:58,406
in the ideal situation, your app


502
00:15:58,406 --> 00:15:59,906
should be able to scale to any


503
00:15:59,906 --> 00:16:00,486
amount of data.


504
00:16:01,546 --> 00:16:02,826
That's why loading only the data


505
00:16:02,826 --> 00:16:04,066
that is necessary to show your


506
00:16:04,066 --> 00:16:04,716
first frame.


507
00:16:08,076 --> 00:16:09,056
Now we're ready to pick out some


508
00:16:09,056 --> 00:16:09,526
devices.


509
00:16:10,656 --> 00:16:11,906
You should pick out a variety of


510
00:16:11,906 --> 00:16:13,126
devices that are important to


511
00:16:13,126 --> 00:16:14,636
your users and then stick to


512
00:16:14,636 --> 00:16:15,626
them force consistency.


513
00:16:16,876 --> 00:16:18,466
Be sure to include your oldest


514
00:16:18,466 --> 00:16:19,416
devices for your


515
00:16:19,416 --> 00:16:20,686
oldest-supported releases.


516
00:16:21,436 --> 00:16:22,496
This is because performance


517
00:16:22,496 --> 00:16:24,186
characteristics look different


518
00:16:24,186 --> 00:16:26,136
between older devices and newer


519
00:16:26,136 --> 00:16:28,716
devices, which have different


520
00:16:29,196 --> 00:16:31,636
amounts of RAM and CPU cores.


521
00:16:32,936 --> 00:16:33,856
This will ensure that your


522
00:16:33,856 --> 00:16:35,776
launch is delightful for all of


523
00:16:35,776 --> 00:16:37,606
your users on all of their


524
00:16:37,606 --> 00:16:38,046
devices.


525
00:16:41,046 --> 00:16:41,836
Now we're ready to take some


526
00:16:41,836 --> 00:16:42,276
measurements.


527
00:16:43,576 --> 00:16:45,076
We can leverage the new XCTest


528
00:16:45,286 --> 00:16:46,916
for app launce performance in


529
00:16:46,916 --> 00:16:47,636
Xcode 11.


530
00:16:48,686 --> 00:16:49,936
With just a few lines of code,


531
00:16:50,506 --> 00:16:51,446
Xcode will launch your app


532
00:16:51,496 --> 00:16:53,716
repeatedly and then provide


533
00:16:53,796 --> 00:16:55,226
statistical results about how it


534
00:16:55,226 --> 00:16:55,626
performs.


535
00:16:56,856 --> 00:16:58,326
We'll talk about this more


536
00:16:58,326 --> 00:16:58,626
later.


537
00:17:01,466 --> 00:17:03,026
So, now we've talked about what


538
00:17:03,026 --> 00:17:05,326
launch is and how to measure it,


539
00:17:06,306 --> 00:17:07,546
let's talk a little bit about


540
00:17:07,546 --> 00:17:09,126
how to improve it.


541
00:17:10,516 --> 00:17:11,715
When you're reviewing your app's


542
00:17:11,715 --> 00:17:13,556
launch both in code and in


543
00:17:13,556 --> 00:17:15,136
instruments, you should keep


544
00:17:15,136 --> 00:17:16,376
these three tips and tricks in


545
00:17:16,376 --> 00:17:16,756
mind.


546
00:17:18,205 --> 00:17:20,066
That is to first minimize your


547
00:17:20,066 --> 00:17:22,226
work, then prioritize your work,


548
00:17:23,006 --> 00:17:25,205
and finally, optimize your work.


549
00:17:27,016 --> 00:17:28,846
When minimizing work, you should


550
00:17:28,846 --> 00:17:30,696
be deferring anything unrelated


551
00:17:31,086 --> 00:17:32,536
to generating the first frame.


552
00:17:33,356 --> 00:17:34,746
That means deferring things like


553
00:17:34,746 --> 00:17:36,746
undisplayed views or pre-warming


554
00:17:36,746 --> 00:17:39,146
features that are not yet used.


555
00:17:41,216 --> 00:17:42,776
You should also avoid blocking


556
00:17:42,776 --> 00:17:44,666
the main thread, either with


557
00:17:44,666 --> 00:17:46,996
network I/O, file I/O, or more,


558
00:17:47,696 --> 00:17:48,836
as this will affect launch.


559
00:17:49,216 --> 00:17:50,826
Move it to a background thread.


560
00:17:51,756 --> 00:17:53,566
Finally, you should take care to


561
00:17:53,566 --> 00:17:54,906
reduce your memory usage.


562
00:17:55,426 --> 00:17:56,556
Allocating and manipulating


563
00:17:56,556 --> 00:18:00,686
memory can take time.


564
00:18:00,896 --> 00:18:02,286
Next, prioritize your work.


565
00:18:03,416 --> 00:18:04,206
This is when you should make


566
00:18:04,206 --> 00:18:05,736
sure that work is scheduled at


567
00:18:05,736 --> 00:18:06,976
the right quality of service.


568
00:18:08,296 --> 00:18:10,306
Now in iOS 13, we've made some


569
00:18:10,306 --> 00:18:11,456
exciting optimizations to the


570
00:18:11,456 --> 00:18:14,006
Scheduler to make your apps


571
00:18:14,006 --> 00:18:15,076
launch even faster.


572
00:18:15,076 --> 00:18:16,876
But that means it's more


573
00:18:16,876 --> 00:18:18,706
critical than ever to preserve


574
00:18:18,706 --> 00:18:20,816
priority issue propagate work


575
00:18:20,816 --> 00:18:21,456
across threads.


576
00:18:22,196 --> 00:18:24,456
You should take a look at


577
00:18:24,456 --> 00:18:25,536
Modernizing Grand Central


578
00:18:25,536 --> 00:18:28,236
Dispatch Usage from WW 2017,


579
00:18:28,566 --> 00:18:30,056
which goes into depth about how


580
00:18:30,056 --> 00:18:31,286
to handle concurrency correctly.


581
00:18:33,916 --> 00:18:35,396
Finally, we have optimizing


582
00:18:35,396 --> 00:18:35,566
work.


583
00:18:36,696 --> 00:18:37,966
Anything that's remaining after


584
00:18:37,966 --> 00:18:38,936
you've minimized it and


585
00:18:38,936 --> 00:18:40,236
prioritized it should be


586
00:18:40,236 --> 00:18:40,746
optimized.


587
00:18:41,366 --> 00:18:42,526
That is to say it should be


588
00:18:42,526 --> 00:18:43,976
simplified and limited.


589
00:18:44,726 --> 00:18:46,376
For example, limit the amount of


590
00:18:46,376 --> 00:18:48,016
data that you fetch only what


591
00:18:48,016 --> 00:18:50,306
you need during launch, or


592
00:18:50,306 --> 00:18:52,186
lazily compute any variables and


593
00:18:52,186 --> 00:18:53,406
results that you need.


594
00:18:55,016 --> 00:18:56,486
When you're doing this, take a


595
00:18:56,486 --> 00:18:57,556
look at your methods and


596
00:18:57,556 --> 00:18:59,056
algorithms and see if you can


597
00:18:59,056 --> 00:19:00,896
optimize them, as you could get


598
00:19:00,896 --> 00:19:02,196
significant improvements by


599
00:19:02,196 --> 00:19:03,596
calculating a result differently


600
00:19:04,066 --> 00:19:05,006
or using a different data


601
00:19:05,006 --> 00:19:05,426
structure.


602
00:19:06,006 --> 00:19:08,626
And finally, you should be


603
00:19:08,626 --> 00:19:09,936
caching your resources and your


604
00:19:09,936 --> 00:19:10,616
complications.


605
00:19:11,396 --> 00:19:12,476
This is, of course, to reduce


606
00:19:12,526 --> 00:19:14,386
the CPU and memory overhead by


607
00:19:14,386 --> 00:19:15,776
doing work multiple times


608
00:19:15,946 --> 00:19:16,646
unnecessarily.


609
00:19:17,246 --> 00:19:19,416
So, I'd love to hand the stage


610
00:19:19,416 --> 00:19:20,506
over to Dan, who is going to


611
00:19:20,506 --> 00:19:22,696
give you a great demo on how to


612
00:19:22,696 --> 00:19:24,236
use the new App Launch Template


613
00:19:24,236 --> 00:19:25,496
in Xcode Instruments to


614
00:19:25,496 --> 00:19:27,306
understand and improve our app's


615
00:19:27,306 --> 00:19:27,696
launch.


616
00:19:28,516 --> 00:19:34,176
[ Applause ]


617
00:19:34,676 --> 00:19:35,436
>> Thank you, Spencer.


618
00:19:36,336 --> 00:19:38,326
Hi, everyone, my name is Dan


619
00:19:38,376 --> 00:19:39,786
Sawada, and I'm also one of the


620
00:19:39,786 --> 00:19:41,476
performance engineers here at


621
00:19:41,476 --> 00:19:41,686
Apple.


622
00:19:42,666 --> 00:19:44,276
Today I will be going over a


623
00:19:44,356 --> 00:19:45,676
typical workflow of


624
00:19:45,846 --> 00:19:47,616
understanding your app's launch


625
00:19:48,156 --> 00:19:49,686
and looking for opportunities to


626
00:19:49,686 --> 00:19:52,116
minimize, prioritize, and


627
00:19:52,186 --> 00:19:53,886
optimize the work, so that you


628
00:19:53,886 --> 00:19:55,166
can actually deliver a


629
00:19:55,416 --> 00:19:57,056
delightful first user


630
00:19:57,056 --> 00:19:57,596
experience.


631
00:19:58,836 --> 00:19:59,606
So, let's get started.


632
00:19:59,606 --> 00:20:02,096
The app that I'm going to be


633
00:20:02,096 --> 00:20:03,626
demonstrating today is called


634
00:20:03,626 --> 00:20:04,496
Star Searcher.


635
00:20:04,856 --> 00:20:06,186
It's an example app that we


636
00:20:06,186 --> 00:20:07,946
specifically written for this


637
00:20:07,946 --> 00:20:08,366
session.


638
00:20:09,106 --> 00:20:10,856
As you can see, it's a very


639
00:20:10,856 --> 00:20:13,686
typical UI table view that lists


640
00:20:13,746 --> 00:20:14,976
all of my imaginary stars.


641
00:20:15,176 --> 00:20:17,556
If you click on the cell, or a


642
00:20:17,556 --> 00:20:19,936
star, it shows you a little


643
00:20:19,936 --> 00:20:21,436
description blurb, in addition


644
00:20:21,436 --> 00:20:22,026
to a picture.


645
00:20:23,116 --> 00:20:24,496
However, we have one problem,


646
00:20:25,496 --> 00:20:26,766
let's go ahead and launch it.


647
00:20:28,176 --> 00:20:29,676
Ready, go.


648
00:20:33,196 --> 00:20:36,766
So, that took an astounding 2.5


649
00:20:36,766 --> 00:20:38,926
seconds to launch, not sure if I


650
00:20:38,926 --> 00:20:40,546
could call that delightful.


651
00:20:40,896 --> 00:20:42,676
So, let's use Xcode and


652
00:20:43,016 --> 00:20:44,606
Instruments to see if there's


653
00:20:45,016 --> 00:20:46,786
anything we can do about this.


654
00:20:49,106 --> 00:20:51,326
So, here we have our Xcode


655
00:20:51,386 --> 00:20:52,726
project for Star Searcher.


656
00:20:53,456 --> 00:20:55,366
Now one important thing that we


657
00:20:55,366 --> 00:20:57,116
should do before we do any


658
00:20:57,666 --> 00:21:01,126
performance-related analysis is


659
00:21:01,956 --> 00:21:03,576
selecting the profile scheme in


660
00:21:03,576 --> 00:21:04,026
Xcode.


661
00:21:04,856 --> 00:21:08,076
This will ensure Xcode to


662
00:21:08,076 --> 00:21:09,496
recompile your app in release


663
00:21:09,496 --> 00:21:11,816
mode, so that you can take the


664
00:21:11,816 --> 00:21:13,836
advantages of compiler time


665
00:21:13,836 --> 00:21:14,646
optimizations.


666
00:21:15,716 --> 00:21:17,196
Once Xcode recompiles your app,


667
00:21:17,756 --> 00:21:19,026
it will install it on your


668
00:21:19,026 --> 00:21:21,936
device and launch Instruments.


669
00:21:22,736 --> 00:21:24,816
Now we are happy to announce


670
00:21:25,056 --> 00:21:28,416
that as of iOS 13, or Xcode 11,


671
00:21:28,796 --> 00:21:29,896
we now have the


672
00:21:29,896 --> 00:21:31,316
AppLaunchTemplate, which we can


673
00:21:31,316 --> 00:21:33,636
use specifically for triage


674
00:21:33,666 --> 00:21:35,496
purposes like this, figuring out


675
00:21:35,496 --> 00:21:36,616
what's wrong with AppLaunch.


676
00:21:37,366 --> 00:21:39,096
So, let's go ahead and


677
00:21:39,806 --> 00:21:42,256
double-click on AppLaunch.


678
00:21:42,826 --> 00:21:45,786
Now the first thing we want to


679
00:21:45,786 --> 00:21:49,496
do here is hit the record


680
00:21:49,496 --> 00:21:49,876
button.


681
00:21:52,776 --> 00:21:54,176
At this point, Instruments will


682
00:21:54,176 --> 00:21:55,516
automatically launch Star


683
00:21:55,516 --> 00:21:57,826
Searcher, our app, gather all of


684
00:21:57,826 --> 00:22:00,016
the metrics, telemetry data,


685
00:22:00,586 --> 00:22:02,176
analyze them, and create


686
00:22:02,176 --> 00:22:03,756
visualizations for all of the


687
00:22:03,756 --> 00:22:04,776
app launch phases.


688
00:22:05,686 --> 00:22:06,816
So, with take a look.


689
00:22:07,396 --> 00:22:09,906
The first few phases marked in


690
00:22:09,906 --> 00:22:12,836
purple are the phases that occur


691
00:22:12,836 --> 00:22:14,316
before your main function is


692
00:22:14,316 --> 00:22:15,506
invoked within your app.


693
00:22:17,656 --> 00:22:19,316
Onto the green phases, these


694
00:22:19,316 --> 00:22:21,356
phases of the early phases that


695
00:22:21,356 --> 00:22:22,916
occur at the very first of your


696
00:22:22,916 --> 00:22:24,426
main function, as your app


697
00:22:24,426 --> 00:22:26,556
finishes its launch and draws


698
00:22:26,556 --> 00:22:29,746
its first frame in UI.


699
00:22:29,906 --> 00:22:31,716
Let's go ahead and expand the


700
00:22:31,716 --> 00:22:32,166
lanes.


701
00:22:32,686 --> 00:22:34,566
As we expand the lanes, you can


702
00:22:34,716 --> 00:22:36,496
see the detailed states of all


703
00:22:36,496 --> 00:22:37,956
of the threads that respond


704
00:22:37,956 --> 00:22:39,126
within your app's process.


705
00:22:40,086 --> 00:22:41,966
Obviously, the most important


706
00:22:41,966 --> 00:22:44,256
one would be the main thread, or


707
00:22:44,296 --> 00:22:46,106
also known as the UI thread,


708
00:22:46,356 --> 00:22:47,936
which is responsible for handing


709
00:22:47,936 --> 00:22:51,016
user input and drawing your UI.


710
00:22:51,786 --> 00:22:53,416
Let's go ahead and pin down the


711
00:22:53,416 --> 00:22:54,646
lanes that are relevant for our


712
00:22:54,646 --> 00:22:56,206
purpose, starting with the app


713
00:22:56,386 --> 00:22:59,356
launch phases, our main thread,


714
00:22:59,786 --> 00:23:01,436
and there's one more worker


715
00:23:01,436 --> 00:23:02,616
thread that's doing a


716
00:23:02,826 --> 00:23:03,796
substantial amount of work


717
00:23:03,796 --> 00:23:04,546
during launch.


718
00:23:05,476 --> 00:23:08,086
So, let's go ahead and pin this


719
00:23:08,976 --> 00:23:10,136
down, too.


720
00:23:11,616 --> 00:23:13,426
Speaking of thread states --


721
00:23:13,426 --> 00:23:13,756
oops.


722
00:23:18,046 --> 00:23:18,226
Like that.


723
00:23:21,076 --> 00:23:23,596
Speaking of thread states, gray


724
00:23:23,596 --> 00:23:24,856
means it's blocked, meaning that


725
00:23:24,856 --> 00:23:26,336
the thread isn't doing any work.


726
00:23:27,856 --> 00:23:30,016
Red means it's runnable, meaning


727
00:23:30,016 --> 00:23:31,546
that there's work scheduled to


728
00:23:31,546 --> 00:23:33,666
be done, but lacking CPU


729
00:23:33,666 --> 00:23:34,326
resources.


730
00:23:35,256 --> 00:23:37,046
Orange means it's preempted,


731
00:23:37,166 --> 00:23:39,336
meaning that it was doing work


732
00:23:39,566 --> 00:23:41,376
but got interrupted in favor of


733
00:23:41,466 --> 00:23:43,366
other competing work that has a


734
00:23:43,366 --> 00:23:44,216
higher priority.


735
00:23:44,856 --> 00:23:47,046
And last but not least, blue


736
00:23:47,046 --> 00:23:48,376
means it's running, meaning that


737
00:23:48,376 --> 00:23:49,836
it's actually doing work on the


738
00:23:49,926 --> 00:23:50,676
CPU core.


739
00:23:50,676 --> 00:23:53,856
So, with that information, let's


740
00:23:53,856 --> 00:23:55,456
take a look phase by phase


741
00:23:56,106 --> 00:23:57,266
starting with the system


742
00:23:57,266 --> 00:23:58,516
interface initialization.


743
00:24:00,036 --> 00:24:01,736
As we triple-click on a phase,


744
00:24:02,706 --> 00:24:04,676
we can highlight the phase and


745
00:24:04,676 --> 00:24:06,016
get detailed information towards


746
00:24:06,016 --> 00:24:07,236
the bottom half of the screen.


747
00:24:08,026 --> 00:24:09,776
To your left, you can see the


748
00:24:09,776 --> 00:24:12,246
detailed stack trace of all the


749
00:24:12,246 --> 00:24:13,376
work that's being done during


750
00:24:13,376 --> 00:24:14,216
this time period.


751
00:24:14,926 --> 00:24:17,676
To your right, you can see a


752
00:24:17,676 --> 00:24:19,176
aggregated stack trace, which


753
00:24:19,176 --> 00:24:21,786
lists all of the symbols ordered


754
00:24:21,786 --> 00:24:23,456
by the number of CPU sample


755
00:24:23,456 --> 00:24:23,856
size.


756
00:24:24,826 --> 00:24:26,726
Now notice that this initial


757
00:24:26,726 --> 00:24:29,366
phase only took 6 milliseconds


758
00:24:29,736 --> 00:24:31,866
as it sets up its system


759
00:24:31,936 --> 00:24:32,576
interfaces.


760
00:24:33,316 --> 00:24:35,196
This is primarily due to the


761
00:24:35,196 --> 00:24:37,666
benefits of dyld3 introduction


762
00:24:37,946 --> 00:24:39,546
and third-party apps, in


763
00:24:39,546 --> 00:24:41,306
addition to other system layer


764
00:24:41,306 --> 00:24:42,086
enhancements.


765
00:24:42,996 --> 00:24:45,316
So, as developers, we can take


766
00:24:45,316 --> 00:24:46,706
advantage of all of those


767
00:24:46,706 --> 00:24:48,146
enhancements without writing a


768
00:24:48,146 --> 00:24:49,906
single line of code.


769
00:24:50,876 --> 00:24:54,386
Let's move on, but before we do


770
00:24:54,386 --> 00:24:55,986
so, there's one other thing I


771
00:24:55,986 --> 00:24:56,806
should point out here.


772
00:24:57,996 --> 00:25:00,156
Notice that while this phase


773
00:25:00,156 --> 00:25:02,206
only spent 6 milliseconds on the


774
00:25:02,206 --> 00:25:05,876
CPU clock for Star Searcher, it


775
00:25:05,876 --> 00:25:08,516
spent 149 milliseconds on the


776
00:25:08,516 --> 00:25:09,186
wall clock.


777
00:25:09,626 --> 00:25:11,366
This discrepancy comes from the


778
00:25:11,406 --> 00:25:13,016
overhead of the profiling


779
00:25:13,016 --> 00:25:15,376
mechanism itself, which does


780
00:25:15,376 --> 00:25:17,006
give us a lot of information and


781
00:25:17,006 --> 00:25:18,776
insight, but has a cost of its


782
00:25:18,776 --> 00:25:18,886
own.


783
00:25:19,056 --> 00:25:21,156
So, this is why it's very


784
00:25:21,156 --> 00:25:23,016
important to distinguish


785
00:25:23,176 --> 00:25:24,946
profiling with measurements,


786
00:25:25,186 --> 00:25:26,666
which I will explain more later


787
00:25:26,666 --> 00:25:26,866
on.


788
00:25:27,496 --> 00:25:30,506
On to the next phase, which is


789
00:25:30,506 --> 00:25:32,276
static runtime initialization.


790
00:25:32,856 --> 00:25:35,566
Now notice this phase took an


791
00:25:35,566 --> 00:25:38,616
astonishing 375 milliseconds.


792
00:25:39,046 --> 00:25:40,426
Now that's a little bit too


793
00:25:40,426 --> 00:25:40,866
long.


794
00:25:42,316 --> 00:25:43,126
So, let's take a look.


795
00:25:43,866 --> 00:25:45,056
Looking at the detailed stack


796
00:25:45,096 --> 00:25:47,566
trace, we see a highlighted


797
00:25:47,696 --> 00:25:50,576
symbol with a blue icon marking


798
00:25:50,686 --> 00:25:52,996
370 milliseconds' worth of work


799
00:25:53,156 --> 00:25:54,366
on the CPU.


800
00:25:54,716 --> 00:25:56,186
Now all of these highlighted


801
00:25:56,256 --> 00:25:58,336
symbols indicate code that's


802
00:25:58,376 --> 00:25:59,976
declared within our sources.


803
00:26:00,546 --> 00:26:02,796
Let's click on it.


804
00:26:08,046 --> 00:26:09,826
Now by expanding the stack


805
00:26:09,866 --> 00:26:12,426
trace, it points us to the


806
00:26:12,426 --> 00:26:14,046
SLSuperfastLogger.


807
00:26:14,456 --> 00:26:16,706
Now, if a library is calling


808
00:26:16,706 --> 00:26:18,496
itself superfast, that implies


809
00:26:18,596 --> 00:26:22,496
some fishiness, but let's take a


810
00:26:22,496 --> 00:26:22,706
look.


811
00:26:23,266 --> 00:26:26,266
So, SLSuperfastLogger is a


812
00:26:26,266 --> 00:26:27,786
external framework that we've


813
00:26:27,786 --> 00:26:29,926
imported specifically into Star


814
00:26:29,926 --> 00:26:32,506
Searcher to take the benefits of


815
00:26:32,786 --> 00:26:34,606
powerful and convenient logging.


816
00:26:35,556 --> 00:26:37,256
However, the only place we


817
00:26:37,256 --> 00:26:41,186
invoke this framework is within


818
00:26:41,186 --> 00:26:42,556
the table view controller.


819
00:26:43,016 --> 00:26:44,296
Specifically, within the


820
00:26:44,296 --> 00:26:46,146
didSelectRowAt callback.


821
00:26:47,236 --> 00:26:49,816
Now this callback is completely


822
00:26:49,816 --> 00:26:51,226
out of the launch path, because


823
00:26:51,406 --> 00:26:53,176
it's only invoked when the user


824
00:26:53,176 --> 00:26:54,026
taps on a cell.


825
00:26:54,326 --> 00:26:56,616
So, why is it doing over 300


826
00:26:56,616 --> 00:26:58,296
milliseconds' worth of work


827
00:26:58,716 --> 00:27:00,656
during early launch and even


828
00:27:00,656 --> 00:27:02,526
before our main function is


829
00:27:02,526 --> 00:27:02,976
invoked?


830
00:27:03,436 --> 00:27:04,836
Well, let's investigate.


831
00:27:08,476 --> 00:27:10,696
By searching the symbol, it


832
00:27:10,696 --> 00:27:13,336
points us to a plus-load method


833
00:27:13,376 --> 00:27:14,666
declared within the SL


834
00:27:14,756 --> 00:27:16,006
SuperfastLogger class.


835
00:27:16,796 --> 00:27:18,026
Now, this is a static


836
00:27:18,026 --> 00:27:20,816
initializer, meaning that all of


837
00:27:20,816 --> 00:27:23,296
this work would be done at very


838
00:27:23,296 --> 00:27:24,976
early in launch before a main


839
00:27:24,976 --> 00:27:26,486
function is invoked, given the


840
00:27:26,486 --> 00:27:27,886
fact that we link against it.


841
00:27:28,416 --> 00:27:30,636
Now, the take away here is that


842
00:27:30,636 --> 00:27:31,846
it's very important to


843
00:27:31,846 --> 00:27:33,686
understand the impact of your


844
00:27:33,686 --> 00:27:35,196
dependencies in the frameworks


845
00:27:35,196 --> 00:27:37,296
that you use.


846
00:27:38,016 --> 00:27:39,116
External libraries and


847
00:27:39,116 --> 00:27:40,676
frameworks may be convenient and


848
00:27:40,676 --> 00:27:42,976
may be powerful, but it may come


849
00:27:42,976 --> 00:27:44,076
with a heavy cost.


850
00:27:44,456 --> 00:27:48,316
So, if those costs justifies the


851
00:27:48,316 --> 00:27:49,796
benefits, great.


852
00:27:49,796 --> 00:27:51,606
But for our case, 300


853
00:27:51,606 --> 00:27:54,166
milliseconds during launch is a


854
00:27:54,166 --> 00:27:55,086
little bit too much for what


855
00:27:55,086 --> 00:27:55,536
it's worth.


856
00:27:56,316 --> 00:27:58,496
So, let's go ahead and pursue


857
00:27:58,496 --> 00:27:59,216
alternatives.


858
00:28:00,626 --> 00:28:02,296
In our case let's use os.log,


859
00:28:02,346 --> 00:28:03,956
which is a very lightweight and


860
00:28:03,956 --> 00:28:06,226
efficient logging mechanism that


861
00:28:06,226 --> 00:28:08,546
comes right with iOS as well as


862
00:28:08,716 --> 00:28:11,696
other Apple platforms.


863
00:28:11,696 --> 00:28:13,636
Now once we remove the


864
00:28:13,636 --> 00:28:15,076
dependency, there's one


865
00:28:15,076 --> 00:28:16,136
additional thing that we


866
00:28:16,136 --> 00:28:17,696
absolutely need to remember to


867
00:28:18,176 --> 00:28:21,976
do, which is to remove the


868
00:28:21,976 --> 00:28:23,426
actual linkage.


869
00:28:23,946 --> 00:28:26,616
Now because the cost here is


870
00:28:26,706 --> 00:28:28,476
with a static initializer, we


871
00:28:28,916 --> 00:28:31,936
need to make sure to remove the


872
00:28:31,936 --> 00:28:34,256
linkage in order for it not to


873
00:28:34,936 --> 00:28:36,766
impact us.


874
00:28:37,106 --> 00:28:39,616
So, with that, let's go back to


875
00:28:39,616 --> 00:28:40,066
our trace.


876
00:28:41,076 --> 00:28:44,706
The next phase is UIKit


877
00:28:44,706 --> 00:28:46,816
initialization, which took 28


878
00:28:46,816 --> 00:28:48,316
milliseconds on the wall clock.


879
00:28:48,746 --> 00:28:50,516
Now this is pretty much a fixed


880
00:28:50,516 --> 00:28:52,186
cost for all applications.


881
00:28:53,066 --> 00:28:57,056
So, unless you subclass UI


882
00:28:57,056 --> 00:28:58,596
application or do a custom


883
00:28:58,596 --> 00:28:59,966
initialization work in


884
00:28:59,966 --> 00:29:02,136
UIApplicationDelegate, it's


885
00:29:02,136 --> 00:29:03,196
pretty much something that we


886
00:29:03,196 --> 00:29:04,446
can disregard for now.


887
00:29:04,976 --> 00:29:06,856
So, let's move on.


888
00:29:08,416 --> 00:29:11,296
The next chunk of work is your


889
00:29:11,336 --> 00:29:13,046
applications initialization,


890
00:29:13,566 --> 00:29:15,096
which is pretty much what you


891
00:29:15,096 --> 00:29:15,586
control.


892
00:29:16,146 --> 00:29:18,296
Now notice there is a big amount


893
00:29:18,296 --> 00:29:20,116
of work being done with


894
00:29:20,266 --> 00:29:21,706
didFinishLaunchingWithOptions


895
00:29:21,706 --> 00:29:25,306
callback, which took 791


896
00:29:25,306 --> 00:29:26,736
milliseconds on the wall clock.


897
00:29:27,086 --> 00:29:28,706
Now that's very long.


898
00:29:29,546 --> 00:29:32,276
Let's take a look.


899
00:29:32,536 --> 00:29:35,056
So, this phase immediately


900
00:29:35,056 --> 00:29:36,846
points us to heavy amounts of


901
00:29:36,846 --> 00:29:39,416
work in the StarDataProvider


902
00:29:39,466 --> 00:29:39,986
class.


903
00:29:41,156 --> 00:29:42,276
It says, "loading stars."


904
00:29:42,796 --> 00:29:46,396
Okay, now, notice that there's a


905
00:29:46,396 --> 00:29:48,076
huge blockage in the main


906
00:29:48,076 --> 00:29:50,776
thread, which essentially is a


907
00:29:50,776 --> 00:29:52,066
delay in our launch.


908
00:29:52,596 --> 00:29:54,166
Our main thread was blocked for


909
00:29:54,166 --> 00:29:55,896
754 milliseconds.


910
00:29:56,306 --> 00:29:58,396
Now that's not nice.


911
00:29:59,606 --> 00:30:00,266
Let's take a look.


912
00:30:01,926 --> 00:30:03,126
So, in order to inspect the


913
00:30:03,126 --> 00:30:05,366
detailed states, we should look


914
00:30:05,366 --> 00:30:07,326
at the event list.


915
00:30:09,016 --> 00:30:11,096
By looking at the event list, we


916
00:30:11,096 --> 00:30:12,666
notice that it was blocked for


917
00:30:12,796 --> 00:30:15,756
754 milliseconds, and


918
00:30:15,796 --> 00:30:18,466
afterwards, it was unblocked, or


919
00:30:18,466 --> 00:30:20,376
made runnable, by thread


920
00:30:20,376 --> 00:30:22,576
0x12253.


921
00:30:23,396 --> 00:30:25,196
Now this corresponds to this


922
00:30:25,196 --> 00:30:27,616
worker thread that was doing a


923
00:30:27,616 --> 00:30:28,316
lot of work.


924
00:30:29,636 --> 00:30:31,106
So, there's some relationship


925
00:30:31,106 --> 00:30:31,386
here.


926
00:30:32,576 --> 00:30:34,096
Now going back to the main


927
00:30:34,096 --> 00:30:36,256
thread, notice that it's


928
00:30:36,296 --> 00:30:37,906
scheduled to do work at priority


929
00:30:37,906 --> 00:30:38,816
47.


930
00:30:39,376 --> 00:30:41,356
Forty-seven is equivalent to the


931
00:30:41,356 --> 00:30:45,066
user interactive QoS.


932
00:30:45,276 --> 00:30:47,016
Now look at all this red meeting


933
00:30:47,016 --> 00:30:49,606
there's a lot of work to do, but


934
00:30:49,646 --> 00:30:51,986
it's lacking CPU resources.


935
00:30:52,496 --> 00:30:54,196
Well, let's figure out why.


936
00:30:55,446 --> 00:30:58,476
As we click on the worker


937
00:30:58,476 --> 00:30:59,836
thread, we notice that there's a


938
00:30:59,836 --> 00:31:02,156
lot of work scheduled to do work


939
00:31:02,156 --> 00:31:03,456
at priority 4.


940
00:31:03,966 --> 00:31:05,056
This is equivalent to the


941
00:31:05,246 --> 00:31:06,106
background QoS.


942
00:31:06,106 --> 00:31:09,116
What we're actually seeing here


943
00:31:09,116 --> 00:31:11,326
is a symptom known as priority


944
00:31:11,326 --> 00:31:13,176
inversion, where a given thread


945
00:31:13,316 --> 00:31:15,186
is being blocked by a separate


946
00:31:15,186 --> 00:31:17,406
thread that has a lower QoS, or


947
00:31:17,906 --> 00:31:19,386
priority, than itself.


948
00:31:20,176 --> 00:31:21,676
Obviously, this isn't ideal,


949
00:31:21,936 --> 00:31:23,816
because it's still aimed to


950
00:31:23,816 --> 00:31:25,286
launch more than it should.


951
00:31:25,736 --> 00:31:27,306
So, let's go ahead and try to


952
00:31:28,206 --> 00:31:29,396
fix that.


953
00:31:29,606 --> 00:31:30,346
Looking back at the


954
00:31:30,346 --> 00:31:32,096
StarDataProvider, which is at


955
00:31:32,096 --> 00:31:34,826
the core of this issue, is a


956
00:31:34,826 --> 00:31:36,576
very simple class that's


957
00:31:36,576 --> 00:31:38,016
responsible for fetching data


958
00:31:38,506 --> 00:31:40,396
for our stars from SQLite


959
00:31:40,396 --> 00:31:42,516
database, has a dedicated


960
00:31:42,516 --> 00:31:44,456
dispatch queue with a background


961
00:31:45,296 --> 00:31:47,286
QoS, and note that this is to


962
00:31:47,286 --> 00:31:48,786
ensure that data fetching


963
00:31:48,786 --> 00:31:50,946
doesn't compete with the UI.


964
00:31:50,946 --> 00:31:53,956
And there's two API being


965
00:31:53,956 --> 00:31:54,556
exposed.


966
00:31:55,246 --> 00:31:56,556
One for loading data


967
00:31:56,556 --> 00:31:58,826
asynchronously using this


968
00:31:59,056 --> 00:32:00,846
GrandCentralDispatch's async


969
00:32:00,886 --> 00:32:02,506
primitive and another


970
00:32:02,656 --> 00:32:04,706
synchronous API that loads the


971
00:32:05,096 --> 00:32:06,866
data in a synchronous fashion.


972
00:32:08,446 --> 00:32:10,876
Now looking at the actual call


973
00:32:10,876 --> 00:32:12,026
sites within the


974
00:32:12,026 --> 00:32:13,686
didFinishLaunchingwithOptions,


975
00:32:14,776 --> 00:32:15,916
we are leveraging the


976
00:32:16,046 --> 00:32:19,486
asynchronous API, but also


977
00:32:19,486 --> 00:32:20,706
leveraging the dispatch


978
00:32:20,816 --> 00:32:23,346
semaphore to ensure that we wait


979
00:32:23,346 --> 00:32:24,506
for all of the data to be


980
00:32:24,506 --> 00:32:26,706
fetched before we proceed on to


981
00:32:26,706 --> 00:32:28,616
drawing the actual first frame


982
00:32:28,966 --> 00:32:29,816
of our table view.


983
00:32:29,816 --> 00:32:32,626
Now if we're going to be doing


984
00:32:32,626 --> 00:32:34,846
this, we should use the correct


985
00:32:35,246 --> 00:32:37,376
concurrency primitive, which is


986
00:32:37,696 --> 00:32:41,736
the sync primitive in GCD.


987
00:32:42,306 --> 00:32:44,136
Now using the correct


988
00:32:44,276 --> 00:32:45,436
concurrency primitives,


989
00:32:45,746 --> 00:32:47,376
GrandCentralDispatch will


990
00:32:47,376 --> 00:32:49,186
temporarily propagate the


991
00:32:49,246 --> 00:32:51,176
priority of the main thread to


992
00:32:51,176 --> 00:32:52,626
the worker thread and boost it


993
00:32:52,626 --> 00:32:55,206
up to user inactive so that it


994
00:32:57,376 --> 00:32:57,546
matches.


995
00:32:57,676 --> 00:32:59,986
So, at this point, I think we


996
00:32:59,986 --> 00:33:01,916
have the potential to resolve


997
00:33:01,916 --> 00:33:03,186
the priority inversion, but


998
00:33:03,186 --> 00:33:04,456
there's one more issue that I


999
00:33:04,456 --> 00:33:05,066
notice here.


1000
00:33:06,326 --> 00:33:09,006
LoadStarDataSync API accepts a


1001
00:33:09,006 --> 00:33:12,226
range of rows to load the data


1002
00:33:12,226 --> 00:33:12,576
for.


1003
00:33:13,196 --> 00:33:15,016
In our case, we're loading from


1004
00:33:15,296 --> 00:33:17,776
row 0 to the very last row,


1005
00:33:17,996 --> 00:33:19,766
which is essentially everything.


1006
00:33:20,646 --> 00:33:22,946
Now when you think about it, the


1007
00:33:22,946 --> 00:33:24,666
first frame can only fit just a


1008
00:33:24,666 --> 00:33:27,746
limited number of cells that may


1009
00:33:27,746 --> 00:33:28,706
be on the screen size.


1010
00:33:29,186 --> 00:33:30,506
In the case of Star Searcher,


1011
00:33:30,986 --> 00:33:32,386
perhaps around 10 to 15,


1012
00:33:32,736 --> 00:33:33,636
depending on the device.


1013
00:33:34,186 --> 00:33:36,186
So, let's go ahead and optimize


1014
00:33:36,186 --> 00:33:38,086
that, and instead of loading


1015
00:33:38,216 --> 00:33:41,336
everything, let's just load the


1016
00:33:41,496 --> 00:33:43,646
first 20 rows, just enough to


1017
00:33:43,646 --> 00:33:44,806
draw the first frame of the


1018
00:33:44,886 --> 00:33:46,526
table view in a synchronous


1019
00:33:46,526 --> 00:33:47,006
fashion.


1020
00:33:47,846 --> 00:33:49,606
Afterwards, we should load all


1021
00:33:49,606 --> 00:33:51,316
of the rest lazily in the


1022
00:33:51,316 --> 00:33:53,156
background and only update the


1023
00:33:53,156 --> 00:33:55,126
table view when finished after


1024
00:33:55,126 --> 00:33:55,566
launch.


1025
00:33:58,136 --> 00:33:58,916
Let's move on.


1026
00:33:59,696 --> 00:34:01,686
Back to the trace, last but not


1027
00:34:01,686 --> 00:34:02,006
least.


1028
00:34:02,396 --> 00:34:05,046
The last phase is our first


1029
00:34:05,046 --> 00:34:06,256
frame rendering.


1030
00:34:07,846 --> 00:34:11,126
Notice that this phase took 951


1031
00:34:11,126 --> 00:34:12,656
milliseconds, which is very


1032
00:34:12,656 --> 00:34:14,065
long, considering that this is


1033
00:34:14,065 --> 00:34:15,866
only responsible for doing the


1034
00:34:15,866 --> 00:34:17,556
layout work and the rendering of


1035
00:34:17,556 --> 00:34:18,186
our first frame.


1036
00:34:19,606 --> 00:34:22,656
Now let's taking a deeper dive,


1037
00:34:22,856 --> 00:34:25,755
it points us to the


1038
00:34:25,755 --> 00:34:28,206
StarTableviewController, and


1039
00:34:29,906 --> 00:34:31,896
looking at the detailed stack


1040
00:34:31,936 --> 00:34:36,916
trace, we see a lot of work and


1041
00:34:36,916 --> 00:34:39,755
a CellForRowAt callback, which


1042
00:34:39,755 --> 00:34:40,936
is responsible for doing the


1043
00:34:40,936 --> 00:34:42,485
layout work of the cells.


1044
00:34:42,485 --> 00:34:45,335
let's go ahead and expand that.


1045
00:34:46,216 --> 00:34:49,136
As we expand the stack trace, it


1046
00:34:49,176 --> 00:34:51,396
points us to a lot of


1047
00:34:51,396 --> 00:34:53,815
initialization work for the


1048
00:34:53,815 --> 00:34:56,565
StarDetailView controller which


1049
00:34:56,565 --> 00:34:58,746
took 882 milliseconds on the


1050
00:34:58,746 --> 00:34:59,386
CPU.


1051
00:34:59,466 --> 00:35:01,436
So, at this point, we've


1052
00:35:01,436 --> 00:35:02,586
identified this is pretty much


1053
00:35:02,586 --> 00:35:02,976
the bottleneck here.


1054
00:35:05,046 --> 00:35:06,626
Let's take a look at our code.


1055
00:35:06,676 --> 00:35:10,856
Now looking at the table view


1056
00:35:10,856 --> 00:35:12,416
controller within the


1057
00:35:12,556 --> 00:35:15,746
CellforRowAt callback, we create


1058
00:35:15,746 --> 00:35:17,406
the cells using our custom cell,


1059
00:35:18,576 --> 00:35:20,816
and at the same time, we put in


1060
00:35:20,816 --> 00:35:22,976
a speculative optimization which


1061
00:35:22,976 --> 00:35:25,226
is to pre-warm and cache the


1062
00:35:25,226 --> 00:35:26,846
DetailViewControllers of the


1063
00:35:27,036 --> 00:35:29,516
DetailVew, as we do the layout


1064
00:35:29,516 --> 00:35:29,806
work.


1065
00:35:30,306 --> 00:35:31,686
This is with the hopes to


1066
00:35:32,046 --> 00:35:33,806
streamline the transition from a


1067
00:35:33,806 --> 00:35:35,266
table view to a detail view.


1068
00:35:35,836 --> 00:35:38,456
But as we saw in the trace, this


1069
00:35:38,846 --> 00:35:40,126
doesn't create a high cost.


1070
00:35:41,196 --> 00:35:43,156
Now stepping back a little bit,


1071
00:35:43,306 --> 00:35:44,296
when you think about it, the


1072
00:35:44,296 --> 00:35:45,816
detailed view doesn't really


1073
00:35:45,816 --> 00:35:47,356
make sense for our first frame.


1074
00:35:47,816 --> 00:35:49,126
It only makes sense when the


1075
00:35:49,126 --> 00:35:50,376
user taps on a cell.


1076
00:35:51,276 --> 00:35:53,886
So, let's go ahead and defer


1077
00:35:53,886 --> 00:35:54,336
that work.


1078
00:35:57,356 --> 00:35:58,486
Where should we defer it to?


1079
00:35:59,216 --> 00:36:01,566
Perhaps the didSelectRowAt


1080
00:36:01,566 --> 00:36:06,606
callback, which is invoked when


1081
00:36:06,996 --> 00:36:07,966
the user taps on a cell.


1082
00:36:09,336 --> 00:36:11,156
So, at this point, we've made


1083
00:36:11,276 --> 00:36:12,526
several enhancements, or


1084
00:36:12,526 --> 00:36:14,316
optimizations, to Star Searcher.


1085
00:36:14,466 --> 00:36:15,616
So, let's go ahead and


1086
00:36:15,616 --> 00:36:15,976
re-profile it.


1087
00:36:23,086 --> 00:36:26,656
Now one thing to note here is


1088
00:36:26,656 --> 00:36:29,646
that as you make incremental


1089
00:36:29,646 --> 00:36:32,046
changes, you should consistently


1090
00:36:32,046 --> 00:36:34,076
remeasure and re-profile as you


1091
00:36:34,076 --> 00:36:35,006
make progress.


1092
00:36:35,356 --> 00:36:37,676
That way, you can actually


1093
00:36:37,746 --> 00:36:39,916
understand the exact impact of


1094
00:36:40,176 --> 00:36:41,776
your incremental change set.


1095
00:36:42,046 --> 00:36:43,416
But for the sake of his demo,


1096
00:36:43,696 --> 00:36:44,916
we've actually aggregated all


1097
00:36:44,916 --> 00:36:46,926
the changes into one for the


1098
00:36:46,926 --> 00:36:49,566
sake of time and boom.


1099
00:36:49,566 --> 00:36:51,086
There's a little UI glitch, but


1100
00:36:51,086 --> 00:36:54,016
we can immediately see that our


1101
00:36:54,406 --> 00:36:55,836
launch is under 500


1102
00:36:55,836 --> 00:36:56,456
milliseconds.


1103
00:36:57,186 --> 00:37:02,346
Now, as I said earlier, the


1104
00:37:02,346 --> 00:37:04,296
profiling mechanism does come


1105
00:37:04,296 --> 00:37:05,376
with a cost of its own.


1106
00:37:05,636 --> 00:37:06,896
So, to get a better


1107
00:37:06,896 --> 00:37:08,816
understanding of what our users


1108
00:37:08,816 --> 00:37:11,486
would experience, let's go ahead


1109
00:37:12,476 --> 00:37:15,656
and leverage the new XCTest APIs


1110
00:37:16,066 --> 00:37:17,626
to measure our launch


1111
00:37:17,626 --> 00:37:18,886
performance within our test.


1112
00:37:20,246 --> 00:37:21,986
With just a few lines of code,


1113
00:37:22,176 --> 00:37:23,886
we can actually integrate launch


1114
00:37:23,886 --> 00:37:25,876
performance tests, or any


1115
00:37:25,876 --> 00:37:27,136
performance tests, with an


1116
00:37:27,136 --> 00:37:27,766
XCTest.


1117
00:37:28,306 --> 00:37:31,946
Let's go ahead and kick this


1118
00:37:31,996 --> 00:37:32,446
off.


1119
00:37:33,886 --> 00:37:37,486
Now at this point, XCTest will


1120
00:37:37,486 --> 00:37:39,636
do one throwaway launch attempt,


1121
00:37:39,846 --> 00:37:41,936
which cancels out the variance


1122
00:37:42,536 --> 00:37:44,516
that would come about by cold


1123
00:37:44,516 --> 00:37:44,946
launches.


1124
00:37:45,466 --> 00:37:47,116
Afterwards, it will do the


1125
00:37:47,116 --> 00:37:48,676
specified number of iterations


1126
00:37:48,816 --> 00:37:51,326
or by default five iterations of


1127
00:37:51,436 --> 00:37:53,696
launches and measure the time it


1128
00:37:53,736 --> 00:37:54,016
took.


1129
00:37:54,856 --> 00:37:57,176
Afterwards, it will produce a


1130
00:37:57,176 --> 00:38:01,986
nice statistics of that data.


1131
00:38:02,186 --> 00:38:04,116
It's going to take a few minutes


1132
00:38:04,116 --> 00:38:06,236
for the test to complete, and


1133
00:38:06,236 --> 00:38:09,986
now we've taken the launch of


1134
00:38:10,106 --> 00:38:12,696
Star Searcher from 2.5 seconds


1135
00:38:13,066 --> 00:38:16,536
to just over 300 milliseconds.


1136
00:38:17,031 --> 00:38:19,031
[ Applause ]


1137
00:38:19,046 --> 00:38:21,346
And to wrap up the demo, I'd


1138
00:38:21,346 --> 00:38:22,136
like to show you what this


1139
00:38:22,686 --> 00:38:23,726
actually looks like on the UI.


1140
00:38:24,606 --> 00:38:26,276
So, let's make sure we kill Star


1141
00:38:26,276 --> 00:38:26,756
Searcher.


1142
00:38:27,366 --> 00:38:29,126
That was quick.


1143
00:38:30,516 --> 00:38:33,500
[ Applause ]


1144
00:38:38,056 --> 00:38:38,726
Thank you.


1145
00:38:39,056 --> 00:38:39,946
Back to you, Spencer.


1146
00:38:41,516 --> 00:38:45,376
[ Applause ]


1147
00:38:45,876 --> 00:38:47,066
>> Thanks, Dan, for that awesome


1148
00:38:47,066 --> 00:38:49,076
demo on how to use Xcode,


1149
00:38:49,486 --> 00:38:51,746
Instruments, AppLaunchTemplate


1150
00:38:52,006 --> 00:38:53,276
to improve our app launch


1151
00:38:53,276 --> 00:38:53,766
experience.


1152
00:38:54,526 --> 00:38:57,226
So, we realize that in your code


1153
00:38:57,226 --> 00:38:59,816
bases, you're not going to find


1154
00:38:59,816 --> 00:39:01,766
just a few couple places in your


1155
00:39:01,766 --> 00:39:03,356
code that you can fix with just


1156
00:39:03,356 --> 00:39:05,236
a few lines and get such


1157
00:39:05,356 --> 00:39:06,516
substantial improvements.


1158
00:39:07,546 --> 00:39:08,386
It's more likely that you're


1159
00:39:08,386 --> 00:39:10,356
going to have to find a bunch of


1160
00:39:10,356 --> 00:39:12,396
5 to 10 milliseconds wins and


1161
00:39:12,396 --> 00:39:13,586
then stack all those together.


1162
00:39:14,816 --> 00:39:15,866
We want to let you know that


1163
00:39:15,866 --> 00:39:16,396
we've got your back.


1164
00:39:17,746 --> 00:39:20,146
We've been making a ton of iOS


1165
00:39:20,146 --> 00:39:21,636
optimizations to improve your


1166
00:39:21,636 --> 00:39:23,146
app's launch and help you reach


1167
00:39:23,146 --> 00:39:26,076
your goal with very little to no


1168
00:39:26,076 --> 00:39:27,016
adoption from your side.


1169
00:39:28,016 --> 00:39:29,556
I want to call on a few in


1170
00:39:29,556 --> 00:39:30,396
particular.


1171
00:39:30,956 --> 00:39:34,766
As mentioned before, dyld3


1172
00:39:34,856 --> 00:39:36,256
brings caching of your runtime


1173
00:39:36,256 --> 00:39:38,056
dependencies to your apps, which


1174
00:39:38,056 --> 00:39:39,276
you saw in the demo, that


1175
00:39:39,426 --> 00:39:40,976
provided a huge improvement.


1176
00:39:41,496 --> 00:39:43,606
The Scheduler has also been


1177
00:39:43,606 --> 00:39:45,626
optimized to help prioritize the


1178
00:39:45,626 --> 00:39:47,236
work that happens during launch.


1179
00:39:48,026 --> 00:39:50,126
We also put Auto Layout and


1180
00:39:50,126 --> 00:39:51,646
Objective-C under the microscope


1181
00:39:51,956 --> 00:39:52,756
and made a bunch of


1182
00:39:52,756 --> 00:39:53,736
optimizations there.


1183
00:39:54,896 --> 00:39:56,526
And then finally, we have


1184
00:39:56,526 --> 00:39:57,566
exciting changes to app


1185
00:39:57,766 --> 00:39:59,076
packaging coming later this


1186
00:39:59,076 --> 00:39:59,386
year.


1187
00:40:00,436 --> 00:40:02,216
We think that altogether these


1188
00:40:02,216 --> 00:40:03,786
changes should result in a huge


1189
00:40:03,786 --> 00:40:05,726
improvement your apps with very


1190
00:40:05,726 --> 00:40:09,176
little to no adoption.


1191
00:40:09,316 --> 00:40:10,956
So, let's wrap things up with


1192
00:40:10,956 --> 00:40:12,316
some tips and tricks on how to


1193
00:40:12,316 --> 00:40:13,266
make sure your app stays


1194
00:40:13,306 --> 00:40:14,716
delightful once you've done all


1195
00:40:14,716 --> 00:40:14,976
this work.


1196
00:40:19,076 --> 00:40:20,276
First of all, don't let


1197
00:40:20,276 --> 00:40:21,546
performance be an afterthought.


1198
00:40:22,326 --> 00:40:24,136
You should start working on it


1199
00:40:24,136 --> 00:40:25,566
and thinking about it at the


1200
00:40:25,696 --> 00:40:27,036
beginning of every bug fix, at


1201
00:40:27,736 --> 00:40:28,366
the beginning of every


1202
00:40:28,366 --> 00:40:30,316
re-factor, and the beginning of


1203
00:40:30,316 --> 00:40:30,956
every feature.


1204
00:40:32,286 --> 00:40:33,746
This is because it's incredibly


1205
00:40:33,746 --> 00:40:35,316
easy to introduce regression,


1206
00:40:35,756 --> 00:40:37,536
especially a little one like 2


1207
00:40:37,536 --> 00:40:38,216
milliseconds.


1208
00:40:39,026 --> 00:40:40,616
The problem is these little ones


1209
00:40:40,616 --> 00:40:43,026
add up to a big problem, and if


1210
00:40:43,026 --> 00:40:43,556
you don't address them


1211
00:40:43,556 --> 00:40:45,576
immediately, it becomes very


1212
00:40:45,576 --> 00:40:46,336
hard to find them all.


1213
00:40:46,336 --> 00:40:49,536
In order to do that, to detect


1214
00:40:49,536 --> 00:40:51,096
those regressions, you should be


1215
00:40:51,096 --> 00:40:52,926
plotting your app's launch over


1216
00:40:52,926 --> 00:40:54,356
time and running tests


1217
00:40:54,356 --> 00:40:54,896
regularly.


1218
00:40:55,646 --> 00:40:56,546
This will ensure that you're


1219
00:40:56,546 --> 00:40:58,016
meeting your target and that you


1220
00:40:58,016 --> 00:40:59,446
immediately know if you've


1221
00:40:59,446 --> 00:41:03,896
regressed from that target.


1222
00:41:03,986 --> 00:41:05,946
You should also take a look at


1223
00:41:05,946 --> 00:41:08,416
the new Xcode organizer, which


1224
00:41:08,816 --> 00:41:09,736
lets you know how your app


1225
00:41:09,776 --> 00:41:10,586
performs in the field.


1226
00:41:11,666 --> 00:41:13,366
In iOS 13, for users that have


1227
00:41:13,366 --> 00:41:15,756
opted in, power and performance


1228
00:41:15,756 --> 00:41:16,976
metrics will be gathered about


1229
00:41:16,976 --> 00:41:17,256
your app.


1230
00:41:18,296 --> 00:41:19,816
They will then be aggregated


1231
00:41:19,816 --> 00:41:21,456
over 24-hour periods and sent


1232
00:41:21,456 --> 00:41:22,886
back to your organizer where you


1233
00:41:22,886 --> 00:41:23,936
can view them in the form of


1234
00:41:23,936 --> 00:41:25,936
histograms by software version


1235
00:41:25,936 --> 00:41:26,796
and device version.


1236
00:41:28,136 --> 00:41:29,726
However, if you desire a little


1237
00:41:29,726 --> 00:41:31,026
bit more control over that data,


1238
00:41:31,916 --> 00:41:33,236
you can adopt MetricKit.


1239
00:41:34,636 --> 00:41:36,406
MetricKit allows you to specify


1240
00:41:36,616 --> 00:41:38,056
custom power and performance


1241
00:41:38,056 --> 00:41:38,386
metrics.


1242
00:41:39,886 --> 00:41:41,236
Now like the organizer, this


1243
00:41:41,236 --> 00:41:42,486
data will be gathered up and


1244
00:41:42,486 --> 00:41:44,046
aggregated over 24-hour periods


1245
00:41:44,046 --> 00:41:46,226
of time and then delivered back


1246
00:41:46,266 --> 00:41:48,586
to you through a delegate method


1247
00:41:48,586 --> 00:41:49,276
in your app.


1248
00:41:50,066 --> 00:41:51,186
From there, you're free to


1249
00:41:51,186 --> 00:41:52,686
handle the data as you see fit.


1250
00:41:53,696 --> 00:41:54,976
To learn more about this, we


1251
00:41:54,976 --> 00:41:55,846
recommend you check out


1252
00:41:55,996 --> 00:41:57,066
Improving Battery Life and


1253
00:41:57,066 --> 00:41:59,846
Performance from WW 2019.


1254
00:42:03,096 --> 00:42:05,566
So, in summary, we'd love for


1255
00:42:05,756 --> 00:42:07,736
you today to start understanding


1256
00:42:07,736 --> 00:42:09,146
your app's launch with the new


1257
00:42:09,146 --> 00:42:10,596
AppLauchTemplate in Xcode


1258
00:42:10,596 --> 00:42:11,116
Instruments.


1259
00:42:11,916 --> 00:42:12,616
See if you can find


1260
00:42:12,616 --> 00:42:14,316
opportunities to minimize,


1261
00:42:14,926 --> 00:42:16,816
prioritize, and optimize your


1262
00:42:17,536 --> 00:42:17,626
work.


1263
00:42:18,836 --> 00:42:21,036
Next, although well intended,


1264
00:42:21,276 --> 00:42:22,786
not all optimizations work out,


1265
00:42:23,586 --> 00:42:24,596
such as the pre-warming


1266
00:42:24,596 --> 00:42:26,096
DetailView controllers that Dan


1267
00:42:26,096 --> 00:42:26,936
addressed in his demo.


1268
00:42:27,936 --> 00:42:30,026
So, be sure to measure, not


1269
00:42:30,026 --> 00:42:32,596
estimate, performance whenever


1270
00:42:32,596 --> 00:42:33,406
you're making changes.


1271
00:42:34,026 --> 00:42:35,646
Again, it's very easy to


1272
00:42:35,646 --> 00:42:36,906
introduce regressions


1273
00:42:36,906 --> 00:42:37,566
unintentionally.


1274
00:42:38,956 --> 00:42:40,496
Finally, you should be tracking


1275
00:42:40,496 --> 00:42:41,916
your performance in all phases


1276
00:42:41,916 --> 00:42:42,566
of development.


1277
00:42:43,576 --> 00:42:44,696
This means utilizing the new


1278
00:42:44,696 --> 00:42:46,426
XCTest app launch measurements


1279
00:42:47,006 --> 00:42:48,826
on a variety of devices and


1280
00:42:48,826 --> 00:42:50,156
possibly integrating this with


1281
00:42:50,156 --> 00:42:52,006
continuous integration.


1282
00:42:53,176 --> 00:42:54,216
This will ensure that you're


1283
00:42:54,216 --> 00:42:55,576
consistently delivering a


1284
00:42:55,576 --> 00:42:57,356
delightful app launch to all of


1285
00:42:57,356 --> 00:42:58,996
your users on all of their


1286
00:42:58,996 --> 00:42:59,546
devices.


1287
00:43:02,206 --> 00:43:03,896
For more information, please


1288
00:43:03,896 --> 00:43:04,646
view the talks that we


1289
00:43:04,646 --> 00:43:06,806
referenced today, and have a


1290
00:43:06,806 --> 00:43:07,756
great rest of your Friday


1291
00:43:07,756 --> 00:43:08,106
afternoon.


1292
00:43:08,416 --> 00:43:08,806
Thank you.


1293
00:43:09,516 --> 00:43:12,500
[ Applause ]

