1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:09,516 --> 00:00:17,616
[ Applause and Cheering ]


3
00:00:18,116 --> 00:00:19,866
>> Hello, everyone, and welcome


4
00:00:19,866 --> 00:00:21,276
to our session on Swift


5
00:00:21,276 --> 00:00:22,266
Playgrounds 3.


6
00:00:23,186 --> 00:00:24,606
My name is Grace Kendall.


7
00:00:25,026 --> 00:00:26,276
>> My name Joy Forbes.


8
00:00:26,406 --> 00:00:27,936
>> And my name is Jonathan Penn.


9
00:00:28,036 --> 00:00:29,346
We're all engineers working on


10
00:00:29,346 --> 00:00:30,896
Swift Playgrounds and we are so


11
00:00:30,896 --> 00:00:32,165
excited to talk about the new


12
00:00:32,226 --> 00:00:33,956
features that you can use to


13
00:00:33,956 --> 00:00:36,046
build ideas right on iPad with


14
00:00:36,046 --> 00:00:36,416
Swift.


15
00:00:36,756 --> 00:00:38,046
And we'll demonstrate some


16
00:00:38,046 --> 00:00:39,196
techniques that you can use to


17
00:00:39,196 --> 00:00:40,636
build even more engaging


18
00:00:40,686 --> 00:00:41,696
Playground experiences.


19
00:00:43,416 --> 00:00:44,576
>> Swift Playgrounds is an app


20
00:00:44,876 --> 00:00:46,486
that you can write Swift code in


21
00:00:46,486 --> 00:00:47,966
as well as learn from content


22
00:00:47,966 --> 00:00:49,236
that other authors have made.


23
00:00:50,466 --> 00:00:51,896
The code that you write is real


24
00:00:52,006 --> 00:00:54,056
Swift and it's compiled and run


25
00:00:54,266 --> 00:00:55,736
all on the iPad by the app.


26
00:00:57,826 --> 00:00:58,976
>> Playgrounds you've created or


27
00:00:58,976 --> 00:01:00,566
downloaded show up in your list


28
00:01:00,566 --> 00:01:02,056
of documents as shown here.


29
00:01:03,436 --> 00:01:04,786
And the more Playground section


30
00:01:04,786 --> 00:01:06,416
at the bottom shows other


31
00:01:06,476 --> 00:01:07,466
Playgrounds that are similar to


32
00:01:07,466 --> 00:01:08,806
the content you already have.


33
00:01:09,526 --> 00:01:11,056
If you tap the See All button,


34
00:01:12,226 --> 00:01:13,316
you'll see all the content


35
00:01:13,316 --> 00:01:14,866
available for download from


36
00:01:15,046 --> 00:01:16,976
Apple and the other feeds that


37
00:01:16,976 --> 00:01:17,806
you're subscribed to.


38
00:01:18,456 --> 00:01:19,706
You can also browse featured


39
00:01:19,706 --> 00:01:21,366
subscriptions in the From Other


40
00:01:21,416 --> 00:01:22,836
Publishers section at the


41
00:01:22,836 --> 00:01:23,116
bottom.


42
00:01:24,916 --> 00:01:26,466
>> Apple has published six new


43
00:01:26,466 --> 00:01:27,896
pieces of content in Swift


44
00:01:27,936 --> 00:01:28,746
Playgrounds 3.


45
00:01:30,046 --> 00:01:31,436
The Learn to Code family has


46
00:01:31,436 --> 00:01:32,756
expanded with Lights, Camera,


47
00:01:32,846 --> 00:01:34,786
Code, Assemble Your Camera, and


48
00:01:34,786 --> 00:01:35,616
Flashy Photos.


49
00:01:36,226 --> 00:01:37,626
These and the starting point


50
00:01:37,626 --> 00:01:39,776
Camera Create introduce the


51
00:01:39,836 --> 00:01:40,966
concept of building with


52
00:01:40,966 --> 00:01:42,496
components to create things like


53
00:01:42,586 --> 00:01:43,876
cameras and photo editors.


54
00:01:45,396 --> 00:01:46,806
This Sonic Workshop challenge


55
00:01:46,896 --> 00:01:48,476
and Sonic Create starting point


56
00:01:48,696 --> 00:01:50,516
use touch events on iPad to


57
00:01:50,516 --> 00:01:52,426
compose music and create visual


58
00:01:52,486 --> 00:01:53,056
soundscapes.


59
00:01:55,226 --> 00:01:56,416
>> Today, we'll be reviewing


60
00:01:56,416 --> 00:01:57,476
some of the exciting new


61
00:01:57,476 --> 00:01:59,266
features in Swift Playgrounds 3.


62
00:02:00,016 --> 00:02:01,016
I'll be going through the


63
00:02:01,016 --> 00:02:02,206
breadth of development that you


64
00:02:02,206 --> 00:02:04,346
can do just on iPad, and then


65
00:02:04,346 --> 00:02:05,566
Joy will talk about some of the


66
00:02:05,566 --> 00:02:06,936
new features available to


67
00:02:06,936 --> 00:02:08,036
authors on the Mac.


68
00:02:08,686 --> 00:02:10,045
But first, Jonathan is going to


69
00:02:10,045 --> 00:02:11,776
show us a demo that exemplifies


70
00:02:11,816 --> 00:02:13,756
the power of Swift Playgrounds 3


71
00:02:13,866 --> 00:02:14,656
for developers.


72
00:02:15,006 --> 00:02:15,406
Jonathan?


73
00:02:16,106 --> 00:02:16,646
>> Thank you, Grace.


74
00:02:17,516 --> 00:02:23,286
[ Applause and Cheering ]


75
00:02:23,786 --> 00:02:24,936
I would like to demonstrate how


76
00:02:24,936 --> 00:02:26,536
powerful this tool can be as a


77
00:02:26,536 --> 00:02:28,606
scratchpad for ideas with a


78
00:02:28,606 --> 00:02:29,716
little bit of fun.


79
00:02:30,116 --> 00:02:31,556
These devices are quite nifty.


80
00:02:31,966 --> 00:02:33,596
I am personally very excited


81
00:02:33,596 --> 00:02:34,986
about the sensors that it has


82
00:02:34,986 --> 00:02:36,236
like the accelerometer.


83
00:02:36,666 --> 00:02:39,076
I'm a big fun of games that use


84
00:02:39,116 --> 00:02:40,786
the accelerometer to do cool


85
00:02:40,786 --> 00:02:42,186
things and bring a sense of


86
00:02:42,326 --> 00:02:44,136
physicality to what's going on,


87
00:02:44,136 --> 00:02:44,766
on the screen.


88
00:02:45,566 --> 00:02:48,116
So, I'm going to show some steps


89
00:02:48,116 --> 00:02:50,096
that I took to build an infinite


90
00:02:50,216 --> 00:02:52,316
scrolling marble obstacle course


91
00:02:52,776 --> 00:02:55,776
from scratch on an iPad all in


92
00:02:55,776 --> 00:02:56,396
Swift Playgrounds.


93
00:02:56,806 --> 00:02:57,956
If you've ever played one of


94
00:02:57,956 --> 00:02:59,166
those tiny puzzle games where


95
00:02:59,166 --> 00:03:00,326
you've got a roll around a


96
00:03:00,326 --> 00:03:01,626
marble and not fall into any


97
00:03:01,626 --> 00:03:02,886
holes, it's just something like


98
00:03:02,886 --> 00:03:03,026
that.


99
00:03:04,086 --> 00:03:05,346
We need a few things to make


100
00:03:05,346 --> 00:03:07,376
this work like a marble that


101
00:03:07,376 --> 00:03:09,946
response to the tilting motion


102
00:03:09,946 --> 00:03:10,666
of an iPad.


103
00:03:11,966 --> 00:03:13,096
We'll need a procedurally


104
00:03:13,096 --> 00:03:14,476
generated map of holes that the


105
00:03:14,476 --> 00:03:16,216
player guides the marble pass.


106
00:03:16,756 --> 00:03:17,946
And to keep things simple, the


107
00:03:17,946 --> 00:03:19,356
goal is just to get as far as


108
00:03:19,356 --> 00:03:20,896
possible, as fast as possible


109
00:03:20,926 --> 00:03:23,196
without falling into a hole and


110
00:03:23,196 --> 00:03:23,866
out of the course.


111
00:03:25,596 --> 00:03:26,336
There's a bunch involved in


112
00:03:26,336 --> 00:03:27,276
building something like this.


113
00:03:27,276 --> 00:03:29,016
I'm going to focus on a few


114
00:03:29,016 --> 00:03:31,156
steps in the process using, of


115
00:03:31,156 --> 00:03:34,486
course, Swift Playgrounds to


116
00:03:34,486 --> 00:03:36,086
read the raw accelerometer data,


117
00:03:36,196 --> 00:03:37,536
experimenting with the in line


118
00:03:37,536 --> 00:03:39,346
results to do that, using the


119
00:03:39,346 --> 00:03:40,586
live view to learn about the


120
00:03:40,586 --> 00:03:42,116
SpriteKit game in physics


121
00:03:42,156 --> 00:03:44,596
engine, experiment with how to


122
00:03:44,596 --> 00:03:46,176
do this procedural hole


123
00:03:46,176 --> 00:03:47,606
generation placement throughout


124
00:03:47,606 --> 00:03:49,996
the course, and then, we'll add


125
00:03:49,996 --> 00:03:51,156
it all up and take a look at the


126
00:03:51,156 --> 00:03:51,756
full prototype.


127
00:03:52,456 --> 00:03:53,846
Let's get started.


128
00:03:57,356 --> 00:03:57,746
All right.


129
00:03:58,206 --> 00:04:00,246
Let's begin with a blank page.


130
00:04:00,706 --> 00:04:01,986
Every page in a Swift


131
00:04:02,096 --> 00:04:03,746
Playgrounds document is its own


132
00:04:03,796 --> 00:04:05,216
execution entry point.


133
00:04:05,366 --> 00:04:06,636
It's a main .SWF file.


134
00:04:06,946 --> 00:04:08,936
I love to use separate pages.


135
00:04:09,196 --> 00:04:10,386
It's like a journal of my


136
00:04:10,386 --> 00:04:12,146
travels as I'm trying to either


137
00:04:12,316 --> 00:04:13,946
solve a problem or learn a new


138
00:04:13,946 --> 00:04:15,486
API, just figuring something


139
00:04:15,486 --> 00:04:15,686
out.


140
00:04:16,206 --> 00:04:17,926
I'll start with one subsystem or


141
00:04:18,245 --> 00:04:19,236
working on a function or


142
00:04:19,236 --> 00:04:20,836
something over here, and then


143
00:04:20,836 --> 00:04:22,065
move to a new page.


144
00:04:22,065 --> 00:04:23,456
It's a completely blank slate


145
00:04:23,526 --> 00:04:24,546
where I can work on the next


146
00:04:24,546 --> 00:04:27,026
idea leaving behind a trail that


147
00:04:27,026 --> 00:04:28,206
I can return to further


148
00:04:28,206 --> 00:04:29,096
experimentation.


149
00:04:29,666 --> 00:04:31,396
Now, our chief mechanic is the


150
00:04:31,396 --> 00:04:32,886
tilting motion of the iPad.


151
00:04:32,886 --> 00:04:34,666
So, we should probably start by


152
00:04:34,666 --> 00:04:35,966
importing CoreMotion.


153
00:04:37,166 --> 00:04:39,206
We'll create a CMMotionManager.


154
00:04:39,486 --> 00:04:41,006
Now, I'm using the Tab key of


155
00:04:41,006 --> 00:04:43,176
the hardware keyboard to select


156
00:04:43,436 --> 00:04:45,346
the different options in this


157
00:04:45,346 --> 00:04:47,026
shortcuts bar at the bottom for


158
00:04:47,026 --> 00:04:47,706
code completion.


159
00:04:47,926 --> 00:04:50,006
And then I'm pressing the Return


160
00:04:50,006 --> 00:04:51,406
key to select it.


161
00:04:51,816 --> 00:04:53,306
We'll tell the manager to start


162
00:04:53,306 --> 00:04:54,206
up by saying


163
00:04:54,206 --> 00:04:55,676
startAccelerometerUpdates.


164
00:04:57,076 --> 00:04:59,036
Now, I don't know about you but


165
00:04:59,036 --> 00:05:00,946
I never remember which of the


166
00:05:00,946 --> 00:05:03,186
xyz coordinates of the


167
00:05:03,186 --> 00:05:05,206
accelerometer corresponds to how


168
00:05:05,206 --> 00:05:07,016
the iPad is supposed to move in


169
00:05:07,016 --> 00:05:07,806
this orientation.


170
00:05:07,806 --> 00:05:09,336
It's always confusing to me.


171
00:05:09,666 --> 00:05:11,286
But hey, let's figure it out


172
00:05:11,286 --> 00:05:11,806
right here.


173
00:05:12,886 --> 00:05:14,946
We need to wait a brief moment


174
00:05:14,946 --> 00:05:15,846
before we can start.


175
00:05:16,196 --> 00:05:17,486
The accelerometer has to take


176
00:05:17,536 --> 00:05:18,386
time to spin up.


177
00:05:18,986 --> 00:05:21,136
We'll worry about reading this


178
00:05:21,256 --> 00:05:22,476
thing regularly later.


179
00:05:22,476 --> 00:05:24,446
Right now, we just want to get


180
00:05:24,446 --> 00:05:25,956
an experiment going to see if we


181
00:05:25,956 --> 00:05:27,406
get a value out of this thing.


182
00:05:27,666 --> 00:05:30,776
So, I will tell the manager that


183
00:05:30,776 --> 00:05:32,236
I want the accelerometer data,


184
00:05:32,236 --> 00:05:34,296
the acceleration property, and


185
00:05:34,296 --> 00:05:35,026
the x-coordinate.


186
00:05:35,476 --> 00:05:36,986
By putting it on its own line,


187
00:05:37,356 --> 00:05:39,096
this line gets logged, the


188
00:05:39,096 --> 00:05:40,656
expression gets logged and turns


189
00:05:40,656 --> 00:05:42,186
into an inline result on the


190
00:05:42,186 --> 00:05:43,006
right-hand side.


191
00:05:43,056 --> 00:05:44,426
We can see this here when I tap


192
00:05:44,426 --> 00:05:45,026
around my code.


193
00:05:46,556 --> 00:05:47,826
All four lines get an inline


194
00:05:47,826 --> 00:05:48,216
result.


195
00:05:48,216 --> 00:05:49,386
I'm going to tap on the last


196
00:05:49,436 --> 00:05:50,996
icon here for the last line.


197
00:05:51,346 --> 00:05:53,426
Hey, we see a value, negative


198
00:05:53,426 --> 00:05:54,956
0.78.


199
00:05:55,476 --> 00:05:57,126
That means something.


200
00:05:57,516 --> 00:05:58,486
Well, let me try this here.


201
00:05:58,486 --> 00:05:59,716
I'll tilt the iPad and try


202
00:05:59,716 --> 00:06:00,816
running it again and see what


203
00:06:00,816 --> 00:06:02,316
value comes out now.


204
00:06:03,436 --> 00:06:06,916
It says, hey, negative 0.061.


205
00:06:07,246 --> 00:06:08,766
That's a different number.


206
00:06:09,266 --> 00:06:10,766
So somewhere in here, we're


207
00:06:10,766 --> 00:06:12,126
getting some sort of reaction


208
00:06:12,126 --> 00:06:13,216
that I think is related to the


209
00:06:13,216 --> 00:06:14,116
movement of the iPad.


210
00:06:14,186 --> 00:06:14,946
This is a start.


211
00:06:15,416 --> 00:06:16,576
But I'd really like to have some


212
00:06:16,576 --> 00:06:18,436
sort of real time feedback to


213
00:06:18,436 --> 00:06:20,276
give me an idea of what's going


214
00:06:20,276 --> 00:06:20,566
on.


215
00:06:21,136 --> 00:06:22,446
So let's fast forward to the


216
00:06:22,446 --> 00:06:24,166
next page where I've prepared an


217
00:06:24,166 --> 00:06:27,686
example to try out.


218
00:06:27,956 --> 00:06:29,226
Usually, when you run a


219
00:06:29,226 --> 00:06:30,966
Playground page, as the program


220
00:06:30,966 --> 00:06:32,556
counter reaches the very end,


221
00:06:32,846 --> 00:06:33,906
execution stops.


222
00:06:34,186 --> 00:06:35,216
You can restart whenever you


223
00:06:35,216 --> 00:06:36,366
want by just tapping around my


224
00:06:36,366 --> 00:06:36,716
code.


225
00:06:36,996 --> 00:06:38,386
And that's useful in many cases.


226
00:06:38,606 --> 00:06:39,966
But in this case, I would like


227
00:06:40,026 --> 00:06:41,766
the execution to continue so I


228
00:06:41,766 --> 00:06:43,426
can gather values over time.


229
00:06:43,686 --> 00:06:45,236
And because of that, I'm using


230
00:06:45,236 --> 00:06:46,796
the Playground Support API to


231
00:06:47,016 --> 00:06:48,726
tell the current page that I


232
00:06:48,726 --> 00:06:50,406
need indefinite execution.


233
00:06:51,406 --> 00:06:52,816
We create the CMMotionManager


234
00:06:52,816 --> 00:06:54,336
just like before, we tell the


235
00:06:54,336 --> 00:06:55,416
accelerometer to start.


236
00:06:56,046 --> 00:06:57,006
And here, I wrote a simple


237
00:06:57,006 --> 00:06:58,466
function, just to helper


238
00:06:58,466 --> 00:07:00,616
function called repeatEvery that


239
00:07:00,616 --> 00:07:02,866
takes a trailing closure, calls


240
00:07:02,866 --> 00:07:04,246
the closure immediately, and


241
00:07:04,246 --> 00:07:06,056
then schedules calling it again


242
00:07:06,056 --> 00:07:07,436
after the given time interval


243
00:07:07,686 --> 00:07:09,376
but using the asyncAfter method


244
00:07:09,376 --> 00:07:10,676
on the name dispatch queue.


245
00:07:11,146 --> 00:07:12,616
It's crude a way of repeating


246
00:07:12,616 --> 00:07:13,206
things, I know.


247
00:07:13,296 --> 00:07:14,906
But, you know what, we're just


248
00:07:14,906 --> 00:07:16,226
experimenting and it works


249
00:07:16,226 --> 00:07:16,546
great.


250
00:07:16,546 --> 00:07:17,916
I can reuse this wherever I need


251
00:07:17,916 --> 00:07:18,796
to on this page.


252
00:07:19,286 --> 00:07:20,366
And I'm using it right here.


253
00:07:21,116 --> 00:07:22,456
Every half a second, this


254
00:07:22,456 --> 00:07:24,116
trailing closure gets called and


255
00:07:24,116 --> 00:07:25,476
as soon as the accelerometer


256
00:07:25,476 --> 00:07:28,076
data is not nil, we log the


257
00:07:28,076 --> 00:07:29,876
x-coordinate using that


258
00:07:29,876 --> 00:07:31,146
expression on this line.


259
00:07:31,576 --> 00:07:32,626
Let's take a look and see what


260
00:07:32,626 --> 00:07:33,926
happens when I tap around my own


261
00:07:33,926 --> 00:07:34,176
code.


262
00:07:34,566 --> 00:07:36,256
All right, we have things


263
00:07:36,576 --> 00:07:37,376
happening on the screen.


264
00:07:37,376 --> 00:07:38,576
Let me tap on the inline result


265
00:07:38,576 --> 00:07:39,456
and look what happens here.


266
00:07:40,206 --> 00:07:41,896
A graph representation is


267
00:07:41,946 --> 00:07:43,216
automatically selected for us


268
00:07:43,256 --> 00:07:44,636
because this is a sequence of


269
00:07:44,636 --> 00:07:45,946
simple numeric values.


270
00:07:46,216 --> 00:07:47,076
I'm going to pick this up and


271
00:07:47,076 --> 00:07:47,736
move it around.


272
00:07:48,406 --> 00:07:50,746
Whoa, we have things, stuff.


273
00:07:50,986 --> 00:07:51,356
All right.


274
00:07:51,356 --> 00:07:52,406
I'm going to try to get a


275
00:07:52,406 --> 00:07:53,056
baseline here.


276
00:07:53,056 --> 00:07:55,206
I'm going to hold it flat and


277
00:07:55,206 --> 00:07:56,136
then I'm going to tilt it


278
00:07:56,776 --> 00:07:57,426
upright.


279
00:07:58,426 --> 00:08:00,016
I will tilt it down.


280
00:08:00,016 --> 00:08:02,656
OK. I think we've kind of


281
00:08:02,656 --> 00:08:03,556
figured this out.


282
00:08:03,556 --> 00:08:05,546
The x-coordinate of the


283
00:08:05,546 --> 00:08:06,976
accelerometer corresponds to


284
00:08:06,976 --> 00:08:09,496
movement along this axis of the


285
00:08:09,496 --> 00:08:10,966
iPad in this orientation.


286
00:08:11,136 --> 00:08:11,906
All right, there we go.


287
00:08:12,176 --> 00:08:13,346
I could do the same thing to


288
00:08:13,386 --> 00:08:15,536
figure out how y and z work as


289
00:08:15,536 --> 00:08:15,956
well.


290
00:08:16,206 --> 00:08:17,066
This is quite useful.


291
00:08:17,986 --> 00:08:19,626
Now, this repeatEvery function


292
00:08:19,626 --> 00:08:20,886
[applause].


293
00:08:20,886 --> 00:08:21,106
Thank you.


294
00:08:23,526 --> 00:08:25,166
This repeatEvery function is


295
00:08:25,166 --> 00:08:25,436
nice.


296
00:08:25,436 --> 00:08:27,456
It's is crude of course but it's


297
00:08:27,496 --> 00:08:27,896
terse.


298
00:08:28,136 --> 00:08:28,756
It's clear.


299
00:08:28,756 --> 00:08:29,926
And I'm going to use it other


300
00:08:29,926 --> 00:08:31,226
places until I figure out how to


301
00:08:31,226 --> 00:08:32,006
do it the right way.


302
00:08:32,006 --> 00:08:32,556
That's fine.


303
00:08:33,176 --> 00:08:35,775
Well, because I created this as


304
00:08:35,775 --> 00:08:37,385
a blank playground in Swift


305
00:08:37,466 --> 00:08:39,395
Playgrounds 3, I have access to


306
00:08:39,395 --> 00:08:40,666
the new tabbed editing


307
00:08:40,666 --> 00:08:41,366
experience.


308
00:08:41,686 --> 00:08:42,206
Let me show you.


309
00:08:42,876 --> 00:08:43,966
I'm going to tap on the File


310
00:08:43,966 --> 00:08:45,526
icon up in the Navigation bar,


311
00:08:45,526 --> 00:08:47,176
and then I'm going to tap on the


312
00:08:47,176 --> 00:08:48,216
Utilities Module.


313
00:08:48,516 --> 00:08:49,986
This brings up the user module


314
00:08:49,986 --> 00:08:50,926
and source file picker.


315
00:08:50,926 --> 00:08:51,856
And you can see I've already


316
00:08:51,856 --> 00:08:53,106
done a lot of things in here as


317
00:08:53,106 --> 00:08:54,446
I was working on this idea.


318
00:08:54,826 --> 00:08:56,146
Well, in the Utilities Module,


319
00:08:56,146 --> 00:08:57,136
I'm going to put that function


320
00:08:57,136 --> 00:08:59,196
in here, make a Timing.swift


321
00:08:59,196 --> 00:08:59,576
file.


322
00:09:01,116 --> 00:09:03,106
I'll tap on the Tab for the main


323
00:09:03,106 --> 00:09:04,406
file of the page to go back.


324
00:09:04,906 --> 00:09:06,286
I will tap on the repeatEvery


325
00:09:06,286 --> 00:09:07,506
function to select it.


326
00:09:07,996 --> 00:09:09,726
If I tap and hold, I can pick it


327
00:09:09,726 --> 00:09:09,866
up.


328
00:09:10,416 --> 00:09:12,066
And with my other hand, I will


329
00:09:12,066 --> 00:09:14,226
tap on the Timing Tab, and then


330
00:09:14,226 --> 00:09:16,136
let go to drop this piece of


331
00:09:16,186 --> 00:09:18,596
code as a copy in its place in


332
00:09:18,596 --> 00:09:19,136
this file.


333
00:09:20,206 --> 00:09:21,376
Because this is a new file,


334
00:09:21,746 --> 00:09:22,996
Swift has no idea what time


335
00:09:22,996 --> 00:09:24,126
interval or dispatch queue you


336
00:09:24,126 --> 00:09:25,536
are, I'm going to have to tell


337
00:09:25,536 --> 00:09:27,636
it by importing foundation so it


338
00:09:27,636 --> 00:09:28,486
knows what to do with those


339
00:09:28,486 --> 00:09:28,996
symbols.


340
00:09:29,846 --> 00:09:31,036
And because I want to use this


341
00:09:31,036 --> 00:09:32,356
function everywhere on every


342
00:09:32,356 --> 00:09:34,306
page and possibly even in other


343
00:09:34,306 --> 00:09:36,126
modules, I need to mark this


344
00:09:36,126 --> 00:09:37,736
function as public so it's


345
00:09:37,736 --> 00:09:38,026
visible.


346
00:09:38,786 --> 00:09:40,316
Now, I can go back to the main


347
00:09:40,316 --> 00:09:41,786
file, tap to select the


348
00:09:41,786 --> 00:09:44,796
function, delete it, and if I


349
00:09:44,796 --> 00:09:46,966
did it right, everything should


350
00:09:46,966 --> 00:09:47,366
work.


351
00:09:47,366 --> 00:09:48,496
All right, there we go.


352
00:09:48,776 --> 00:09:51,486
Yay. Now, I can open as many


353
00:09:51,486 --> 00:09:52,746
files as I need to, to


354
00:09:52,746 --> 00:09:54,186
experiment on different ideas.


355
00:09:54,186 --> 00:09:55,896
Like, let's try this one here,


356
00:09:56,086 --> 00:09:56,816
Math.swift.


357
00:09:57,076 --> 00:09:58,096
I threw a bunch of bits and


358
00:09:58,096 --> 00:09:59,016
pieces in here as I was going


359
00:09:59,016 --> 00:09:59,976
just to help me experiment.


360
00:10:00,796 --> 00:10:02,366
These are math helper functions


361
00:10:02,366 --> 00:10:04,126
and a few extensions on system


362
00:10:04,126 --> 00:10:06,076
types that made writing the code


363
00:10:06,076 --> 00:10:07,436
more fluent at the point that I


364
00:10:07,436 --> 00:10:09,316
was using it, just part of the


365
00:10:09,346 --> 00:10:09,706
process.


366
00:10:10,816 --> 00:10:14,346
I can tap and drag to reorder


367
00:10:14,346 --> 00:10:16,726
the tabs, tap the Close button


368
00:10:16,726 --> 00:10:17,276
to close them.


369
00:10:17,496 --> 00:10:18,586
And all of this code is


370
00:10:18,586 --> 00:10:20,576
available for use anywhere in


371
00:10:20,576 --> 00:10:21,166
this document.


372
00:10:21,606 --> 00:10:22,256
Quite convenient.


373
00:10:23,006 --> 00:10:25,336
Now, let's fast forward a bit


374
00:10:25,336 --> 00:10:26,406
more in this story.


375
00:10:26,606 --> 00:10:27,626
I've been poking around a bit


376
00:10:27,626 --> 00:10:28,876
with SpriteKit, refreshing my


377
00:10:28,876 --> 00:10:29,976
memory about how it works.


378
00:10:30,196 --> 00:10:32,356
Let's see how far I've gotten on


379
00:10:32,356 --> 00:10:33,206
the next page.


380
00:10:33,766 --> 00:10:35,206
I needed to bring up the


381
00:10:35,206 --> 00:10:36,906
documentation for SpriteKit.


382
00:10:36,906 --> 00:10:38,556
So I did that by tapping on the


383
00:10:38,556 --> 00:10:39,916
Tools Menu icon in the


384
00:10:39,916 --> 00:10:41,206
Navigation Bar and choosing


385
00:10:41,206 --> 00:10:42,006
Documentation.


386
00:10:42,616 --> 00:10:44,536
I searched for it by tapping on


387
00:10:44,536 --> 00:10:46,306
the magnifying glass and search


388
00:10:46,346 --> 00:10:47,216
for SpriteKit.


389
00:10:47,476 --> 00:10:48,886
By reading through this, I was


390
00:10:48,886 --> 00:10:50,296
able to refresh my memory of how


391
00:10:50,296 --> 00:10:52,346
this works, built up this body


392
00:10:52,346 --> 00:10:54,096
of code on the left-hand side of


393
00:10:54,096 --> 00:10:54,676
the screen.


394
00:10:55,046 --> 00:10:56,286
I learned about SpriteKit's


395
00:10:56,346 --> 00:10:58,826
scenes and nodes, that SpriteKit


396
00:10:58,826 --> 00:11:01,496
uses to layout everything in the


397
00:11:01,496 --> 00:11:02,746
game and render it on the


398
00:11:02,746 --> 00:11:03,186
screen.


399
00:11:03,476 --> 00:11:04,476
I learned about the physics


400
00:11:04,476 --> 00:11:05,756
engine and how you can apply


401
00:11:05,756 --> 00:11:07,316
forces to nodes so that the


402
00:11:07,316 --> 00:11:09,396
physics mechanism starts working


403
00:11:09,396 --> 00:11:09,966
over time.


404
00:11:10,356 --> 00:11:11,746
And I learned about the game


405
00:11:11,746 --> 00:11:13,666
loop when SpriteKit calls my


406
00:11:13,666 --> 00:11:15,796
code back on every frame so that


407
00:11:15,796 --> 00:11:17,186
I can affect changes in the


408
00:11:17,186 --> 00:11:17,646
environment.


409
00:11:17,956 --> 00:11:18,846
That last point is very


410
00:11:18,846 --> 00:11:19,276
important.


411
00:11:19,776 --> 00:11:22,416
Let me close the side panel and


412
00:11:22,416 --> 00:11:24,156
open up the Execution Controls


413
00:11:24,156 --> 00:11:25,006
Menu at the bottom.


414
00:11:25,536 --> 00:11:27,656
Because SpriteKit calls me back


415
00:11:27,656 --> 00:11:28,856
on every frame, I have to be


416
00:11:28,906 --> 00:11:30,296
quick, and I'm going to turn off


417
00:11:30,346 --> 00:11:31,196
the inline result.


418
00:11:31,546 --> 00:11:32,706
As we've seen, they're quite


419
00:11:32,706 --> 00:11:34,866
useful in many cases, but the


420
00:11:34,866 --> 00:11:36,206
logging of those expressions


421
00:11:36,456 --> 00:11:37,276
takes time.


422
00:11:37,586 --> 00:11:38,916
I don't want to slow SpriteKit


423
00:11:38,916 --> 00:11:40,326
down in this case, and I don't


424
00:11:40,326 --> 00:11:40,966
even need them.


425
00:11:41,206 --> 00:11:43,036
Because as you'll see, when I


426
00:11:43,036 --> 00:11:45,456
tap run my code, SpriteKit I set


427
00:11:45,456 --> 00:11:46,746
it up as the live view.


428
00:11:46,746 --> 00:11:48,246
SpriteKit itself is giving me


429
00:11:48,246 --> 00:11:49,526
the feedback that I needed while


430
00:11:49,526 --> 00:11:50,626
working on this part.


431
00:11:51,136 --> 00:11:53,866
And here you go, we have a


432
00:11:54,006 --> 00:11:55,876
circle shape thingy moving


433
00:11:55,876 --> 00:11:57,186
around in response to tilting


434
00:11:57,186 --> 00:11:57,576
the iPad.


435
00:11:57,576 --> 00:11:57,926
All right.


436
00:11:58,346 --> 00:11:59,526
Now, this is an important part


437
00:11:59,526 --> 00:12:00,396
of the story because--


438
00:12:01,436 --> 00:12:04,486
[applause] thank you-- once you


439
00:12:04,486 --> 00:12:05,656
get something like this going,


440
00:12:05,656 --> 00:12:06,636
once you've got this kind of


441
00:12:06,636 --> 00:12:07,706
physical stuff happening on the


442
00:12:07,706 --> 00:12:08,936
screen, you've got to take this


443
00:12:08,936 --> 00:12:10,036
out and do user testing, right?


444
00:12:10,506 --> 00:12:11,686
So I took this to my kids.


445
00:12:12,096 --> 00:12:13,166
And as I started to tell them,


446
00:12:13,166 --> 00:12:13,776
hey, do you want to see


447
00:12:13,776 --> 00:12:15,186
something cool, they interrupted


448
00:12:15,186 --> 00:12:16,486
me, grab the iPad out of my


449
00:12:16,486 --> 00:12:17,676
hands and started looking at it,


450
00:12:17,976 --> 00:12:19,276
and tilting it around to watch


451
00:12:19,276 --> 00:12:20,516
it bounce around the screen.


452
00:12:20,516 --> 00:12:21,636
And they were amused.


453
00:12:21,786 --> 00:12:22,856
They said, "This is nice,


454
00:12:22,856 --> 00:12:23,176
father.


455
00:12:23,176 --> 00:12:23,816
This is very nice."


456
00:12:24,016 --> 00:12:25,976
[Laughter]


457
00:12:25,976 --> 00:12:26,836
But it's missing something.


458
00:12:27,636 --> 00:12:28,726
You see, there are not enough


459
00:12:28,726 --> 00:12:29,686
marbles on the screen.


460
00:12:30,226 --> 00:12:32,066
We need more marbles, lots and


461
00:12:32,066 --> 00:12:33,006
lots of marbles.


462
00:12:34,446 --> 00:12:35,526
They have a future in project


463
00:12:35,526 --> 00:12:37,286
management, all right


464
00:12:37,286 --> 00:12:38,946
[laughter].


465
00:12:38,946 --> 00:12:40,216
This had nothing to do with my


466
00:12:40,216 --> 00:12:42,176
ultimate goal but it did sound


467
00:12:42,176 --> 00:12:42,746
kind of cool.


468
00:12:42,746 --> 00:12:43,766
We should get more marbles.


469
00:12:43,936 --> 00:12:45,266
So I added the tap, just to


470
00:12:45,266 --> 00:12:46,396
recognize and I sat down with


471
00:12:46,396 --> 00:12:46,526
them.


472
00:12:46,526 --> 00:12:47,326
We did this together.


473
00:12:47,326 --> 00:12:48,756
And so, every time you tap now


474
00:12:48,756 --> 00:12:50,516
on the screen, we insert a new


475
00:12:50,516 --> 00:12:52,346
SpriteKit node into the scene


476
00:12:52,506 --> 00:12:54,246
and add it to the physics engine


477
00:12:54,246 --> 00:12:55,666
so that it will participate in


478
00:12:55,666 --> 00:12:56,816
all the fun forces going on


479
00:12:56,816 --> 00:12:56,956
here.


480
00:12:57,256 --> 00:12:58,456
Now, this is usually how it


481
00:12:58,456 --> 00:12:58,646
went.


482
00:12:58,736 --> 00:13:00,616
The younger the child, the more


483
00:13:00,616 --> 00:13:02,156
furiously they would tap to try


484
00:13:02,156 --> 00:13:03,276
to fill this thing up as fast as


485
00:13:03,276 --> 00:13:04,246
they could and they wanted to


486
00:13:04,246 --> 00:13:04,986
see if it would crash.


487
00:13:05,336 --> 00:13:05,766
It didn't.


488
00:13:06,076 --> 00:13:07,186
And then they would just make


489
00:13:07,186 --> 00:13:08,636
this thing go and slosh it


490
00:13:08,636 --> 00:13:08,926
around.


491
00:13:08,926 --> 00:13:10,546
And I'm not going to lie, I find


492
00:13:10,546 --> 00:13:12,946
this absolutely mesmerizing.


493
00:13:12,946 --> 00:13:13,976
I can look at this all--


494
00:13:14,516 --> 00:13:18,986
[Sound Effect]


495
00:13:19,486 --> 00:13:20,196
I'll do that later.


496
00:13:21,016 --> 00:13:26,666
[ Laughter and Applause ]


497
00:13:27,166 --> 00:13:28,266
I would recommend you do it too.


498
00:13:28,266 --> 00:13:28,896
It's very relaxing.


499
00:13:29,286 --> 00:13:31,486
So anyway, we have SpriteKit now


500
00:13:31,716 --> 00:13:33,446
doing something in response to


501
00:13:33,446 --> 00:13:35,426
the accelerometer that's on the


502
00:13:35,426 --> 00:13:36,496
iPad as you tilt it around.


503
00:13:36,496 --> 00:13:37,156
This is close.


504
00:13:37,156 --> 00:13:38,596
We're getting a feel for how


505
00:13:38,596 --> 00:13:39,696
this game could work, and it's


506
00:13:39,696 --> 00:13:40,676
getting more and more exciting.


507
00:13:41,486 --> 00:13:42,966
But now, I need to figure out


508
00:13:42,966 --> 00:13:44,536
how to do this procedural whole


509
00:13:44,536 --> 00:13:45,056
generation.


510
00:13:45,056 --> 00:13:46,866
Now remember, this is a trench


511
00:13:46,866 --> 00:13:48,366
that has the holes laid out that


512
00:13:48,366 --> 00:13:49,336
the marble is supposed to go


513
00:13:49,336 --> 00:13:50,386
pass and avoid them.


514
00:13:50,686 --> 00:13:52,536
And we probably want to remember


515
00:13:52,536 --> 00:13:54,096
the holes that we put down.


516
00:13:54,096 --> 00:13:55,466
So if the user happens to scroll


517
00:13:55,466 --> 00:13:57,756
backwards for some reason, they


518
00:13:57,756 --> 00:13:59,036
can revisit the holes they saw


519
00:13:59,036 --> 00:13:59,466
before.


520
00:14:00,536 --> 00:14:01,786
So let's jump ahead to see an


521
00:14:01,786 --> 00:14:02,896
experiment that I was working


522
00:14:02,896 --> 00:14:03,056
on.


523
00:14:03,636 --> 00:14:05,236
Now, while building this page, I


524
00:14:05,236 --> 00:14:07,066
decided to go into my game


525
00:14:07,146 --> 00:14:12,446
module and create a MapStruct.


526
00:14:12,546 --> 00:14:15,206
This goal of this type was just


527
00:14:15,206 --> 00:14:17,316
to calculate and remember where


528
00:14:17,316 --> 00:14:18,946
the holes go as you're


529
00:14:18,946 --> 00:14:20,156
proceeding through the course.


530
00:14:20,346 --> 00:14:21,816
It basically breaks up the map


531
00:14:21,906 --> 00:14:23,756
into a grid of columns and then


532
00:14:23,756 --> 00:14:24,946
places the holes inside there.


533
00:14:25,236 --> 00:14:25,966
It's really simple.


534
00:14:26,236 --> 00:14:27,546
This could easily be swapped out


535
00:14:27,546 --> 00:14:28,566
for something more intricate or


536
00:14:28,566 --> 00:14:29,566
complicated if I want.


537
00:14:29,806 --> 00:14:31,006
Eh, it works for now.


538
00:14:31,926 --> 00:14:33,576
And also in the Game Engine


539
00:14:33,576 --> 00:14:36,736
Module, I created a MapNode that


540
00:14:36,736 --> 00:14:38,576
receives a map and knows how to


541
00:14:38,576 --> 00:14:40,456
layout the whole nodes at


542
00:14:40,456 --> 00:14:41,656
different points along the


543
00:14:41,656 --> 00:14:41,956
course.


544
00:14:42,096 --> 00:14:43,476
All you have to do is pass it a


545
00:14:43,476 --> 00:14:45,206
rectangle that represents where


546
00:14:45,206 --> 00:14:47,506
the camera is and the viewport


547
00:14:47,706 --> 00:14:49,146
of the-- that the user sees.


548
00:14:49,406 --> 00:14:51,306
As soon as you do that, it will


549
00:14:51,306 --> 00:14:52,846
render the holes in that spot


550
00:14:52,846 --> 00:14:54,326
reusing nodes if it needs to.


551
00:14:54,326 --> 00:14:55,536
It kind of acts like UI table


552
00:14:55,536 --> 00:14:56,416
view, stuff like that.


553
00:14:57,046 --> 00:14:58,436
So, let me run the code here and


554
00:14:58,436 --> 00:14:59,406
we'll see how this works.


555
00:15:00,026 --> 00:15:01,186
We get some inline results on


556
00:15:01,186 --> 00:15:02,156
the right-hand side, and I'm


557
00:15:02,156 --> 00:15:04,006
going to tap to view this


558
00:15:04,006 --> 00:15:04,506
preview.


559
00:15:04,676 --> 00:15:05,996
I wrote this preview method on


560
00:15:05,996 --> 00:15:07,836
the MathNode myself because I


561
00:15:08,116 --> 00:15:10,906
wanted to generate an SKView,


562
00:15:10,906 --> 00:15:12,926
the UIView subclass that shows


563
00:15:12,926 --> 00:15:13,816
SpriteKit scenes.


564
00:15:14,036 --> 00:15:15,066
I wanted to generate it and put


565
00:15:15,066 --> 00:15:16,296
it here so it can just show up


566
00:15:16,296 --> 00:15:17,606
as a static inline result.


567
00:15:17,606 --> 00:15:18,936
I didn't have to build any extra


568
00:15:18,936 --> 00:15:19,796
plumbing to show this up.


569
00:15:19,796 --> 00:15:21,426
It's just right there ready to


570
00:15:21,426 --> 00:15:21,626
go.


571
00:15:21,996 --> 00:15:23,826
And now, we see if the whole


572
00:15:23,826 --> 00:15:25,326
diameter is 20 points wide and


573
00:15:25,796 --> 00:15:26,766
we're at this point in the


574
00:15:26,766 --> 00:15:28,166
course, this is the map density


575
00:15:28,166 --> 00:15:28,446
you'll get.


576
00:15:28,446 --> 00:15:30,346
I can experiment with this


577
00:15:30,346 --> 00:15:32,146
density anyway I want and tweak


578
00:15:32,146 --> 00:15:33,446
the values here, jump into the


579
00:15:33,446 --> 00:15:34,886
other files and tweak those two.


580
00:15:35,156 --> 00:15:36,356
And the inline results gave me


581
00:15:36,356 --> 00:15:37,766
the feedback that I needed at


582
00:15:37,766 --> 00:15:38,236
this point.


583
00:15:40,276 --> 00:15:40,916
Now, we're ready.


584
00:15:41,046 --> 00:15:43,096
Let's skip ahead even further to


585
00:15:43,096 --> 00:15:45,646
the final point where we see the


586
00:15:45,646 --> 00:15:46,026
game.


587
00:15:46,316 --> 00:15:47,996
Now before I start, I have to


588
00:15:47,996 --> 00:15:49,226
turn off the inline results


589
00:15:49,226 --> 00:15:49,696
again.


590
00:15:49,856 --> 00:15:51,396
As before, we're doing a lot of


591
00:15:51,396 --> 00:15:52,246
work on every frame.


592
00:15:52,326 --> 00:15:53,886
And we don't need the expression


593
00:15:53,886 --> 00:15:54,896
logging and we don't want it to


594
00:15:54,896 --> 00:15:55,486
slow us down.


595
00:15:56,256 --> 00:15:57,296
I'll tap around my code, and


596
00:15:58,576 --> 00:15:59,826
there it is.


597
00:16:00,346 --> 00:16:02,366
We have a marble looking thing


598
00:16:02,366 --> 00:16:04,616
on top of a wall looking thing


599
00:16:05,216 --> 00:16:06,016
with parallax.


600
00:16:06,106 --> 00:16:07,376
Look at this, lovely stuff.


601
00:16:07,866 --> 00:16:09,196
Now, when I was working on this


602
00:16:09,196 --> 00:16:11,426
idea, Joy reminded me that


603
00:16:11,626 --> 00:16:12,986
there's a bunch of textures that


604
00:16:12,986 --> 00:16:14,596
I can grab out of the templates


605
00:16:14,676 --> 00:16:16,246
that you can download right in


606
00:16:16,246 --> 00:16:17,266
the app just, you know, grab


607
00:16:17,266 --> 00:16:18,346
those resources and have fun


608
00:16:18,346 --> 00:16:18,616
with them.


609
00:16:18,986 --> 00:16:20,406
So I pulled up the sensor create


610
00:16:20,406 --> 00:16:22,416
template, used the asset picker,


611
00:16:22,766 --> 00:16:23,496
pulled out some of these


612
00:16:23,496 --> 00:16:24,896
textures and dropped them in my


613
00:16:24,896 --> 00:16:25,066
app.


614
00:16:25,066 --> 00:16:25,656
And here they are.


615
00:16:26,156 --> 00:16:29,066
I even went over to a-- an image


616
00:16:29,066 --> 00:16:31,096
editing app to find-- there we


617
00:16:31,096 --> 00:16:32,776
go, make some fuzzy looking hole


618
00:16:32,776 --> 00:16:33,356
shape things.


619
00:16:33,446 --> 00:16:34,396
Oh, that's all right.


620
00:16:35,116 --> 00:16:36,086
It's amazing what radial


621
00:16:36,086 --> 00:16:36,886
gradients can do.


622
00:16:36,886 --> 00:16:37,616
It's so cool.


623
00:16:38,106 --> 00:16:39,186
Here, let me tap in the middle


624
00:16:39,186 --> 00:16:40,676
and make this full screen by


625
00:16:40,676 --> 00:16:42,796
dragging the midpoint all the


626
00:16:42,796 --> 00:16:43,676
way over to the left.


627
00:16:44,146 --> 00:16:45,276
And I'm going to try this again.


628
00:16:45,526 --> 00:16:47,026
I added the tap recognizer to


629
00:16:47,026 --> 00:16:49,316
start over if the game ends.


630
00:16:49,386 --> 00:16:50,896
And let's see how far I get.


631
00:16:51,266 --> 00:16:54,236
The faster you go, the faster it


632
00:16:54,236 --> 00:16:55,946
increases the score to add a


633
00:16:55,946 --> 00:16:57,546
little bit of recklessness to


634
00:16:57,546 --> 00:16:57,976
the fun here.


635
00:16:58,226 --> 00:16:58,876
Whoa, OK.


636
00:17:01,146 --> 00:17:01,946
It's really hard to do this in


637
00:17:01,946 --> 00:17:03,466
front of a crowd [laughs].


638
00:17:04,455 --> 00:17:06,156
But, hey, you know what, all of


639
00:17:06,156 --> 00:17:07,816
what you've seen here, each step


640
00:17:07,816 --> 00:17:08,965
leading up to this point was


641
00:17:08,965 --> 00:17:11,586
done entirely on this iPad.


642
00:17:12,205 --> 00:17:13,286
This was a lot of fun.


643
00:17:13,536 --> 00:17:15,076
My family had a great kick out


644
00:17:15,076 --> 00:17:15,286
of it.


645
00:17:15,806 --> 00:17:17,336
I learned more about SpriteKit.


646
00:17:17,336 --> 00:17:18,746
I had a chance to use the new


647
00:17:18,746 --> 00:17:20,205
user module and source file


648
00:17:20,205 --> 00:17:21,945
support in the app to break up


649
00:17:21,945 --> 00:17:23,306
what I was doing into different


650
00:17:23,306 --> 00:17:23,596
pieces.


651
00:17:23,886 --> 00:17:25,195
It was a fantastic experience.


652
00:17:25,876 --> 00:17:27,366
Swift Playgrounds on iPad is a


653
00:17:27,366 --> 00:17:29,376
great scratchpad to try out your


654
00:17:29,376 --> 00:17:32,136
ideas, maybe even look and use


655
00:17:32,136 --> 00:17:33,636
our APIs and see how they work,


656
00:17:34,306 --> 00:17:35,836
or even increase the stress in


657
00:17:35,836 --> 00:17:36,856
your life by building speed


658
00:17:36,856 --> 00:17:37,886
running games to play with your


659
00:17:37,886 --> 00:17:38,226
friends.


660
00:17:38,966 --> 00:17:40,526
And now, I would like to invite


661
00:17:40,806 --> 00:17:42,716
Grace back up to the stage so


662
00:17:42,716 --> 00:17:44,126
that she can talk about how this


663
00:17:44,126 --> 00:17:45,866
stuff works and do a deep dive


664
00:17:45,866 --> 00:17:47,306
into how you can use these new


665
00:17:47,306 --> 00:17:49,016
features to make the most of


666
00:17:49,016 --> 00:17:50,186
Swift Playgrounds 3.


667
00:17:50,666 --> 00:17:50,896
Thank you.


668
00:17:51,516 --> 00:17:59,046
[ Applause and Cheering ]


669
00:17:59,546 --> 00:18:00,536
>> Thanks, Jonathan.


670
00:18:02,216 --> 00:18:03,796
So, if you're already familiar


671
00:18:03,796 --> 00:18:05,136
with Swift Playgrounds, you


672
00:18:05,136 --> 00:18:06,386
might have noticed a couple of


673
00:18:06,386 --> 00:18:07,786
new things in Jonathan's demo.


674
00:18:08,216 --> 00:18:11,156
Let's go through those now.


675
00:18:11,396 --> 00:18:13,356
Most notably is the addition of


676
00:18:13,356 --> 00:18:14,866
Modules, which allow you to


677
00:18:14,866 --> 00:18:16,616
separate your code into multiple


678
00:18:16,696 --> 00:18:17,416
Swift files.


679
00:18:19,146 --> 00:18:20,506
Modules are represented as


680
00:18:20,536 --> 00:18:22,056
directories of Swift code that


681
00:18:22,056 --> 00:18:23,816
can be used by any page in a


682
00:18:23,816 --> 00:18:23,986
book.


683
00:18:24,436 --> 00:18:25,326
And you don't need to worry


684
00:18:25,326 --> 00:18:27,286
about setting targets or making


685
00:18:27,286 --> 00:18:30,046
new build settings.


686
00:18:30,166 --> 00:18:32,046
Users can add modules to books


687
00:18:32,046 --> 00:18:33,656
as well as Swift files to any


688
00:18:33,656 --> 00:18:34,116
module.


689
00:18:35,426 --> 00:18:36,726
Be aware though that if you


690
00:18:36,726 --> 00:18:38,416
reset a document, all of the


691
00:18:38,416 --> 00:18:40,156
user edits are reset as well.


692
00:18:40,396 --> 00:18:42,276
And this does include any added


693
00:18:42,276 --> 00:18:43,416
files or modules.


694
00:18:46,566 --> 00:18:48,286
So with the opportunity for all


695
00:18:48,286 --> 00:18:50,096
of these new files, let's go


696
00:18:50,096 --> 00:18:51,166
through the structure of a


697
00:18:51,266 --> 00:18:51,786
Playground.


698
00:18:52,396 --> 00:18:53,436
I'll be using the shapes


699
00:18:53,436 --> 00:18:54,656
template as an example.


700
00:18:56,436 --> 00:18:58,556
Each book has a set of pages,


701
00:19:00,026 --> 00:19:01,676
and each book can also have


702
00:19:01,676 --> 00:19:02,696
multiple modules.


703
00:19:03,426 --> 00:19:06,176
Each of these modules in turn


704
00:19:06,226 --> 00:19:07,936
can have multiple source files.


705
00:19:09,866 --> 00:19:11,646
So, let's quickly talk about the


706
00:19:11,806 --> 00:19:13,556
access levels between all of


707
00:19:13,556 --> 00:19:14,786
these different Swift files.


708
00:19:16,736 --> 00:19:19,246
Code in pages is not shared to


709
00:19:19,246 --> 00:19:20,516
other pages within a book.


710
00:19:21,136 --> 00:19:22,726
That is to say, the code on the


711
00:19:22,726 --> 00:19:24,726
Canvas page is not shared with


712
00:19:24,776 --> 00:19:26,306
the code on the Create page.


713
00:19:27,606 --> 00:19:29,326
However, every module is


714
00:19:29,386 --> 00:19:31,336
automatically imported into each


715
00:19:31,336 --> 00:19:31,916
page.


716
00:19:32,386 --> 00:19:33,626
This means that the code in your


717
00:19:33,626 --> 00:19:35,606
modules is accessible on every


718
00:19:35,636 --> 00:19:37,196
page as long as that code is


719
00:19:37,196 --> 00:19:40,996
marked as public.


720
00:19:41,096 --> 00:19:42,656
Files within the same module


721
00:19:42,656 --> 00:19:43,916
have access to each other


722
00:19:43,916 --> 00:19:45,566
without needing to mark code as


723
00:19:45,566 --> 00:19:45,896
public.


724
00:19:46,486 --> 00:19:47,956
However, if code is marked as


725
00:19:48,026 --> 00:19:49,526
private, it won't be visible to


726
00:19:49,526 --> 00:19:52,166
other files in other modules or


727
00:19:52,166 --> 00:19:52,666
pages.


728
00:19:52,886 --> 00:19:54,096
It'll just be private to that


729
00:19:54,096 --> 00:19:54,446
file.


730
00:19:57,036 --> 00:19:58,976
Code between modules is not


731
00:19:58,976 --> 00:20:00,046
shared by default.


732
00:20:01,146 --> 00:20:03,226
But let's say I have some code


733
00:20:03,226 --> 00:20:04,786
in my Graphics Module that I


734
00:20:04,786 --> 00:20:05,806
want to reference in my


735
00:20:05,806 --> 00:20:07,736
Calculus.swift file which is in


736
00:20:07,736 --> 00:20:08,756
my Math Module.


737
00:20:09,656 --> 00:20:11,046
All I have to do is make sure


738
00:20:11,046 --> 00:20:12,396
the Graphics code is marked as


739
00:20:12,446 --> 00:20:14,206
public, and then import the


740
00:20:14,206 --> 00:20:15,586
Graphics Module into my


741
00:20:15,586 --> 00:20:19,786
Calculus.swift file.


742
00:20:19,996 --> 00:20:21,526
With modules, you'll still have


743
00:20:21,526 --> 00:20:23,176
access to inline results and


744
00:20:23,176 --> 00:20:24,376
step through execution.


745
00:20:24,526 --> 00:20:25,956
So you can watch the path that


746
00:20:25,956 --> 00:20:27,506
your code takes between all of


747
00:20:27,506 --> 00:20:28,056
your files.


748
00:20:28,936 --> 00:20:30,086
As the app steps through your


749
00:20:30,086 --> 00:20:31,866
code, it automatically switches


750
00:20:31,916 --> 00:20:33,166
between the files where your


751
00:20:33,166 --> 00:20:34,166
code is executing.


752
00:20:36,156 --> 00:20:37,706
You can also turn off inline


753
00:20:37,706 --> 00:20:39,066
results which can speed up


754
00:20:39,066 --> 00:20:40,366
execution as we saw in


755
00:20:40,366 --> 00:20:41,216
Jonathan's demo.


756
00:20:42,156 --> 00:20:43,736
You can find this control within


757
00:20:43,736 --> 00:20:45,636
the Execution Control Menu along


758
00:20:45,636 --> 00:20:47,106
with Step Through My Code and


759
00:20:47,106 --> 00:20:47,806
Step Slowly.


760
00:20:50,596 --> 00:20:52,726
The new Issues popover can show


761
00:20:52,726 --> 00:20:54,116
you errors throughout all of


762
00:20:54,116 --> 00:20:55,736
your files in a document and


763
00:20:55,736 --> 00:20:57,066
allow you to easily navigate


764
00:20:57,096 --> 00:20:58,326
between them.


765
00:20:59,136 --> 00:21:00,926
If you tap on any of the errors,


766
00:21:01,336 --> 00:21:02,486
it'll take you right to the


767
00:21:02,486 --> 00:21:04,336
corresponding line, both for


768
00:21:04,336 --> 00:21:07,726
builds and for runtime errors.


769
00:21:09,676 --> 00:21:11,606
Swift Playgrounds support Swift


770
00:21:11,606 --> 00:21:14,186
5 and the iOS 12.2 SDK.


771
00:21:15,026 --> 00:21:15,766
This lets you play with


772
00:21:15,766 --> 00:21:18,046
frameworks like Core ML 2 and


773
00:21:18,046 --> 00:21:20,526
ARKit 2, developing for iOS


774
00:21:21,016 --> 00:21:23,086
right on iOS.


775
00:21:24,236 --> 00:21:26,256
So now, all from a blank


776
00:21:26,326 --> 00:21:28,936
Playground, you can add pages


777
00:21:28,936 --> 00:21:30,156
through the Table of Contents


778
00:21:30,206 --> 00:21:34,706
popover, add modules, and add


779
00:21:34,866 --> 00:21:36,446
Swift source files to those


780
00:21:36,446 --> 00:21:38,836
modules all without ever leaving


781
00:21:39,616 --> 00:21:39,826
the app.


782
00:21:41,236 --> 00:21:43,646
So there are also lots of ways


783
00:21:43,686 --> 00:21:45,616
to customize your content, like


784
00:21:45,676 --> 00:21:47,416
setting module modes, adding


785
00:21:47,416 --> 00:21:49,266
localizable code comments, and


786
00:21:49,266 --> 00:21:50,676
changing what files the user


787
00:21:50,676 --> 00:21:51,956
sees when they open your


788
00:21:51,956 --> 00:21:52,426
document.


789
00:21:53,046 --> 00:21:54,366
So I'd next like to invite my


790
00:21:54,366 --> 00:21:55,896
colleague Joy to the stage to


791
00:21:55,896 --> 00:21:56,406
tell you how.


792
00:21:57,516 --> 00:22:01,366
[ Applause and Cheering ]


793
00:22:01,866 --> 00:22:02,426
>> Thanks, Grace.


794
00:22:06,306 --> 00:22:07,606
Next, let's talk about all the


795
00:22:07,606 --> 00:22:09,016
new features authors can


796
00:22:09,016 --> 00:22:10,796
customize in Xcode whether


797
00:22:10,796 --> 00:22:11,766
you're sharing your Playground


798
00:22:11,766 --> 00:22:12,996
directly or through a


799
00:22:13,046 --> 00:22:13,716
subscription.


800
00:22:15,386 --> 00:22:16,496
When I'm teaching, it's


801
00:22:16,496 --> 00:22:17,916
important for the tools I give


802
00:22:17,916 --> 00:22:19,376
my students to be leveled


803
00:22:19,376 --> 00:22:20,916
appropriately and as user


804
00:22:20,986 --> 00:22:22,106
friendly as possible.


805
00:22:23,586 --> 00:22:24,546
In order to create the right


806
00:22:24,546 --> 00:22:26,286
tool for your audience at any


807
00:22:26,286 --> 00:22:28,006
level, there's several features


808
00:22:28,006 --> 00:22:29,586
you can take advantage of in


809
00:22:29,586 --> 00:22:31,696
Swift Playgrounds 3 to highlight


810
00:22:31,696 --> 00:22:32,796
the most important parts of your


811
00:22:32,826 --> 00:22:34,286
Playground and remove


812
00:22:34,286 --> 00:22:35,686
unnecessary complexity.


813
00:22:36,546 --> 00:22:37,876
All these new features can help


814
00:22:37,916 --> 00:22:39,716
you create more engaging content


815
00:22:40,056 --> 00:22:41,036
and give your learners a


816
00:22:41,166 --> 00:22:42,746
friendly experience in a real


817
00:22:42,746 --> 00:22:43,556
developer tool.


818
00:22:45,376 --> 00:22:46,236
First, let's dive into the


819
00:22:46,236 --> 00:22:46,936
Module Modes.


820
00:22:47,416 --> 00:22:48,576
Now, you've heard a lot about


821
00:22:48,576 --> 00:22:50,196
Module Modes in the app from


822
00:22:50,196 --> 00:22:51,316
both Jonathan and Grace.


823
00:22:52,286 --> 00:22:54,116
As an author, you can decide


824
00:22:54,116 --> 00:22:55,496
what Module Mode is right for


825
00:22:55,496 --> 00:22:55,956
your book.


826
00:22:57,066 --> 00:22:58,186
Because all modules are an


827
00:22:58,186 --> 00:23:00,166
exciting new feature, not all


828
00:23:00,166 --> 00:23:01,386
books will benefit from the use


829
00:23:01,386 --> 00:23:01,926
of modules.


830
00:23:02,526 --> 00:23:03,896
And for that purpose, we have


831
00:23:03,896 --> 00:23:06,066
three module modes: None,


832
00:23:06,166 --> 00:23:07,096
Limited, and Full.


833
00:23:07,656 --> 00:23:08,996
The Module Mode you choose will


834
00:23:08,996 --> 00:23:10,236
change the nature of your book


835
00:23:10,356 --> 00:23:12,086
fundamentally, and should be


836
00:23:12,086 --> 00:23:13,436
considered the foundation of


837
00:23:13,436 --> 00:23:14,486
your user experience.


838
00:23:16,046 --> 00:23:17,376
Let's start with the module


839
00:23:17,476 --> 00:23:18,706
called None.


840
00:23:19,736 --> 00:23:21,536
This mode gives your students


841
00:23:21,586 --> 00:23:22,756
the original Playground


842
00:23:22,756 --> 00:23:24,846
experience, not allowing any


843
00:23:24,916 --> 00:23:26,136
access to user modules.


844
00:23:26,926 --> 00:23:28,466
This mode relies completely on


845
00:23:28,466 --> 00:23:30,106
pages and chapters to advance


846
00:23:30,106 --> 00:23:30,946
the story and code.


847
00:23:31,556 --> 00:23:33,326
And each page works completely


848
00:23:33,326 --> 00:23:35,406
independently so no user code is


849
00:23:35,406 --> 00:23:37,706
shared between pages in any way.


850
00:23:39,316 --> 00:23:41,316
In the Module Mode None, all of


851
00:23:41,316 --> 00:23:42,466
the code in your book will go


852
00:23:42,466 --> 00:23:43,536
into the Modules folder.


853
00:23:44,626 --> 00:23:46,246
This will create private modules


854
00:23:46,606 --> 00:23:47,846
that can be referenced in your


855
00:23:47,886 --> 00:23:49,806
Playground book but not editable


856
00:23:49,806 --> 00:23:50,586
by your students.


857
00:23:51,666 --> 00:23:53,006
You can use private modules in


858
00:23:53,006 --> 00:23:53,976
any of the three modes.


859
00:23:54,406 --> 00:23:55,436
However, the difference in the


860
00:23:55,436 --> 00:23:57,356
Module Mode None is that all of


861
00:23:57,356 --> 00:23:59,226
your code will go into private


862
00:23:59,796 --> 00:24:00,006
modules.


863
00:24:01,046 --> 00:24:03,036
As you build your book, keep in


864
00:24:03,036 --> 00:24:04,416
mind that pages and chapters are


865
00:24:04,416 --> 00:24:06,046
intended to be experienced


866
00:24:06,046 --> 00:24:06,606
linearly.


867
00:24:07,406 --> 00:24:08,926
As the author, you should think


868
00:24:08,926 --> 00:24:10,276
about what the goal is for each


869
00:24:10,276 --> 00:24:11,716
page, and have each page


870
00:24:11,816 --> 00:24:13,336
culminate in something new, you


871
00:24:13,336 --> 00:24:15,256
can do or see in the live view.


872
00:24:16,246 --> 00:24:17,176
This will give your learners a


873
00:24:17,326 --> 00:24:19,106
tight feedback loop ensuring


874
00:24:19,106 --> 00:24:20,436
they know they've completed the


875
00:24:20,436 --> 00:24:22,076
task and they're ready to move


876
00:24:22,076 --> 00:24:22,376
on.


877
00:24:24,346 --> 00:24:26,096
To see examples in our library


878
00:24:26,096 --> 00:24:28,446
of Module Mode-- of this Module


879
00:24:28,446 --> 00:24:30,006
Mode books, you can check out


880
00:24:30,006 --> 00:24:31,596
Learn to Code 1, Learn to Code


881
00:24:31,676 --> 00:24:33,666
2, Lights, Camera, Code, and a


882
00:24:33,666 --> 00:24:37,676
variety of our challenges.


883
00:24:37,676 --> 00:24:39,146
Now, Limited Mode is your first


884
00:24:39,266 --> 00:24:40,806
foray into user modules and


885
00:24:40,806 --> 00:24:41,466
shared files.


886
00:24:42,356 --> 00:24:43,926
Limited Mode allows for a single


887
00:24:43,926 --> 00:24:44,656
user module.


888
00:24:45,036 --> 00:24:46,376
And unlike private modules.


889
00:24:46,886 --> 00:24:48,616
user modules are completely


890
00:24:48,616 --> 00:24:50,696
editable by your students.


891
00:24:51,916 --> 00:24:53,606
The shared files in a user


892
00:24:53,606 --> 00:24:54,926
module persist throughout the


893
00:24:54,966 --> 00:24:56,496
book and they're placed to build


894
00:24:56,496 --> 00:24:57,246
up code over time.


895
00:24:58,546 --> 00:25:00,156
With access to a single module,


896
00:25:00,546 --> 00:25:01,706
your students can learn how to


897
00:25:01,706 --> 00:25:04,186
manage multiple files and bugs


898
00:25:04,256 --> 00:25:05,566
coming from files they don't


899
00:25:05,566 --> 00:25:08,586
necessarily have open.


900
00:25:08,806 --> 00:25:10,606
Within your one module, you can


901
00:25:10,606 --> 00:25:12,266
provide as many shared files as


902
00:25:12,266 --> 00:25:14,586
you want and your learners can


903
00:25:14,586 --> 00:25:16,446
edit, create, or delete any of


904
00:25:16,446 --> 00:25:17,516
the shared files within their


905
00:25:17,516 --> 00:25:18,266
user module.


906
00:25:20,356 --> 00:25:21,806
As the author, you can also use


907
00:25:21,856 --> 00:25:24,916
private modules to include API


908
00:25:25,076 --> 00:25:26,616
you don't want to be editable by


909
00:25:26,616 --> 00:25:28,096
your students in the modules


910
00:25:28,096 --> 00:25:28,576
directory.


911
00:25:29,156 --> 00:25:31,986
As you saw in Jonathan's demo,


912
00:25:32,286 --> 00:25:34,196
he did several math functions to


913
00:25:34,266 --> 00:25:35,846
a single Math.swift file.


914
00:25:36,846 --> 00:25:38,336
Adding new shared files is a


915
00:25:38,546 --> 00:25:40,076
great learning opportunity to


916
00:25:40,076 --> 00:25:41,616
teach how to organize code in


917
00:25:41,616 --> 00:25:42,416
logical ways.


918
00:25:43,616 --> 00:25:44,806
You can teach your students to


919
00:25:44,806 --> 00:25:46,526
move code into a shared file


920
00:25:46,526 --> 00:25:47,676
they'll build up over several


921
00:25:47,676 --> 00:25:49,976
pages, or move aside code


922
00:25:49,976 --> 00:25:51,146
they'll change in frequently.


923
00:25:52,916 --> 00:25:54,676
To see examples in our library


924
00:25:54,676 --> 00:25:56,306
of Limited Mode books, you can


925
00:25:56,306 --> 00:25:57,526
check out Blu's Adventure,


926
00:25:57,686 --> 00:25:59,516
Assemble Your Camera, Flashy


927
00:25:59,516 --> 00:26:00,886
Photos, and a variety of the


928
00:26:00,936 --> 00:26:02,276
challenges, some of which you


929
00:26:02,276 --> 00:26:02,716
see here.


930
00:26:03,396 --> 00:26:06,346
And if you want all the bells


931
00:26:06,346 --> 00:26:07,736
and whistles, you have Full


932
00:26:07,736 --> 00:26:08,476
Module Mode.


933
00:26:09,326 --> 00:26:10,696
This mode gives you all the


934
00:26:10,696 --> 00:26:12,166
tools available, including


935
00:26:12,166 --> 00:26:14,476
making multiple modules, and new


936
00:26:14,476 --> 00:26:15,806
files within those modules.


937
00:26:16,436 --> 00:26:18,926
This mode is perfect for


938
00:26:18,926 --> 00:26:20,356
teaching code architecture and


939
00:26:20,356 --> 00:26:21,106
organization.


940
00:26:21,706 --> 00:26:23,826
In Full Module Mode, you cannot


941
00:26:23,826 --> 00:26:25,046
only teach how to manage


942
00:26:25,046 --> 00:26:26,666
multiple files, but multiple


943
00:26:26,666 --> 00:26:28,546
modules, and importing those


944
00:26:28,546 --> 00:26:29,906
modules into each other when


945
00:26:29,906 --> 00:26:30,546
necessary.


946
00:26:32,516 --> 00:26:34,516
In Full Module Mode, you can


947
00:26:34,516 --> 00:26:36,296
still use private modules and as


948
00:26:36,296 --> 00:26:38,206
many prebuilt user modules as


949
00:26:38,246 --> 00:26:38,536
you want.


950
00:26:39,846 --> 00:26:41,396
Full Module Mode also gives your


951
00:26:41,606 --> 00:26:43,676
students the freedom to extend


952
00:26:43,676 --> 00:26:45,916
those user modules and make user


953
00:26:45,916 --> 00:26:46,996
modules of their own.


954
00:26:48,376 --> 00:26:49,296
When you're authoring for


955
00:26:49,296 --> 00:26:50,896
modules, you should consider


956
00:26:51,076 --> 00:26:51,856
when you might want to use a


957
00:26:51,856 --> 00:26:53,786
private module versus a user


958
00:26:53,786 --> 00:26:54,196
module.


959
00:26:54,826 --> 00:26:57,416
By putting all the code into a


960
00:26:57,416 --> 00:26:59,356
user module, your students can


961
00:26:59,356 --> 00:27:01,076
go beyond simply just playing in


962
00:27:01,076 --> 00:27:02,896
your Playground to seeing how


963
00:27:02,896 --> 00:27:03,356
it's built.


964
00:27:04,316 --> 00:27:05,756
It also gives them complete


965
00:27:05,756 --> 00:27:07,456
control to tinker and remix,


966
00:27:08,256 --> 00:27:09,676
giving your students a chance to


967
00:27:09,676 --> 00:27:12,826
go beyond just being a student


968
00:27:12,826 --> 00:27:14,556
to getting that much closer to


969
00:27:14,716 --> 00:27:15,886
becoming app developers


970
00:27:15,886 --> 00:27:16,576
themselves.


971
00:27:18,896 --> 00:27:20,436
To see examples in our library


972
00:27:20,436 --> 00:27:22,236
of Full Module Mode books, check


973
00:27:22,236 --> 00:27:23,486
out any of the starting points.


974
00:27:24,556 --> 00:27:26,816
And to specify which module mode


975
00:27:26,816 --> 00:27:27,806
you want your book to full


976
00:27:27,806 --> 00:27:29,486
under, you must edit the key


977
00:27:29,956 --> 00:27:31,816
UserModuleMode in the book level


978
00:27:31,816 --> 00:27:32,256
Manifest.


979
00:27:34,966 --> 00:27:36,936
Another customization you can do


980
00:27:37,146 --> 00:27:39,256
when using modules in Limited


981
00:27:39,256 --> 00:27:41,506
and Full Mode is auto-opening


982
00:27:41,686 --> 00:27:43,606
and activating files on a page


983
00:27:43,636 --> 00:27:44,596
by page basis.


984
00:27:46,676 --> 00:27:47,736
Now, that you can expose


985
00:27:47,736 --> 00:27:49,356
multiple files in a tabbed


986
00:27:49,356 --> 00:27:51,266
editor experience, you can


987
00:27:51,366 --> 00:27:52,786
specify which files will be


988
00:27:52,786 --> 00:27:54,516
opened and which one will be


989
00:27:54,716 --> 00:27:55,636
active when you arrive on a


990
00:27:55,636 --> 00:27:56,076
page.


991
00:27:56,746 --> 00:27:59,846
To add open files means that


992
00:27:59,846 --> 00:28:01,326
main.swift will be the active


993
00:28:01,326 --> 00:28:02,856
file, but there may be other


994
00:28:02,856 --> 00:28:04,566
files open as tabs in the


995
00:28:04,566 --> 00:28:04,856
editor.


996
00:28:05,836 --> 00:28:07,206
Providing the user with open


997
00:28:07,206 --> 00:28:08,476
shared files when they arrive on


998
00:28:08,476 --> 00:28:10,306
a page will help them know which


999
00:28:10,306 --> 00:28:12,236
files they'll be editing or need


1000
00:28:12,236 --> 00:28:13,916
to reference without having to


1001
00:28:13,916 --> 00:28:15,586
locate those files themselves in


1002
00:28:15,586 --> 00:28:16,676
the files' popover.


1003
00:28:19,146 --> 00:28:20,706
You can specify which files will


1004
00:28:20,756 --> 00:28:23,356
be opened on a per page basis in


1005
00:28:23,356 --> 00:28:24,386
the page of a Manifest.


1006
00:28:26,396 --> 00:28:28,356
In the Manifest, used the key


1007
00:28:28,476 --> 00:28:30,496
UserModuleSourceFilesToOpen


1008
00:28:31,746 --> 00:28:33,086
followed by an array of shared


1009
00:28:33,126 --> 00:28:33,506
files.


1010
00:28:34,346 --> 00:28:35,776
The value of each item should be


1011
00:28:35,776 --> 00:28:37,276
the relative path to a shared


1012
00:28:37,276 --> 00:28:37,616
file.


1013
00:28:38,236 --> 00:28:41,706
In any case that you opened


1014
00:28:41,706 --> 00:28:43,686
files, the default action is for


1015
00:28:43,686 --> 00:28:45,896
main.swift to be the front most


1016
00:28:45,896 --> 00:28:47,326
file or the active file.


1017
00:28:48,746 --> 00:28:50,086
However, if one of the shared


1018
00:28:50,086 --> 00:28:51,486
files is going to be the first


1019
00:28:51,486 --> 00:28:52,736
or most prominent place your


1020
00:28:52,736 --> 00:28:54,506
user will be working, you can


1021
00:28:54,506 --> 00:28:56,266
set this file to be active when


1022
00:28:56,266 --> 00:28:57,276
they arrive on a page.


1023
00:28:59,116 --> 00:29:00,486
To declare a shared file to be


1024
00:29:00,676 --> 00:29:02,156
active, use the key


1025
00:29:02,596 --> 00:29:04,696
UserModuleSourceFileToActivate


1026
00:29:04,956 --> 00:29:05,956
again in the page level


1027
00:29:05,956 --> 00:29:06,396
Manifest.


1028
00:29:07,436 --> 00:29:08,616
The value of this key is the


1029
00:29:08,616 --> 00:29:10,416
path to a single shared file.


1030
00:29:11,946 --> 00:29:13,976
Now, Code Completion is


1031
00:29:13,976 --> 00:29:14,926
something you've always been


1032
00:29:14,926 --> 00:29:16,166
able to do in main files.


1033
00:29:16,916 --> 00:29:18,156
Now, in Swift Playgrounds, let's


1034
00:29:18,196 --> 00:29:20,496
see how Code Completion has been


1035
00:29:20,496 --> 00:29:22,706
extended to shared files.


1036
00:29:24,176 --> 00:29:25,686
Code Completion Directives


1037
00:29:25,736 --> 00:29:27,646
determine what API is exposed in


1038
00:29:27,646 --> 00:29:28,366
the Shortcut bar.


1039
00:29:29,256 --> 00:29:30,246
The Shortcut bar can be a


1040
00:29:30,246 --> 00:29:31,636
helpful tool to keep your


1041
00:29:31,636 --> 00:29:33,506
learners on track, minimize the


1042
00:29:33,576 --> 00:29:34,976
time they have to type, and


1043
00:29:34,976 --> 00:29:36,216
ensure they always know what to


1044
00:29:36,216 --> 00:29:36,516
do next.


1045
00:29:37,806 --> 00:29:39,426
In the introductory content, you


1046
00:29:39,426 --> 00:29:40,526
want to lower the barrier to


1047
00:29:40,586 --> 00:29:42,206
entry by enabling your students


1048
00:29:42,206 --> 00:29:43,406
to tap through most of their


1049
00:29:43,486 --> 00:29:43,736
code.


1050
00:29:44,586 --> 00:29:45,876
In more advanced content, you


1051
00:29:46,076 --> 00:29:47,786
want to expose API at the right


1052
00:29:47,786 --> 00:29:47,926
times.


1053
00:29:49,906 --> 00:29:51,916
As the author, you can control


1054
00:29:51,996 --> 00:29:53,376
what appears in the Shortcut bar


1055
00:29:53,606 --> 00:29:56,046
on a page by page basis in both


1056
00:29:56,096 --> 00:29:57,336
main and shared files.


1057
00:29:57,716 --> 00:30:00,706
In order to manage these


1058
00:30:00,776 --> 00:30:02,566
completions, Swift Playgrounds


1059
00:30:02,566 --> 00:30:04,636
now offers two places you can


1060
00:30:04,636 --> 00:30:05,846
provide Code Completion


1061
00:30:05,846 --> 00:30:06,366
Directives.


1062
00:30:07,856 --> 00:30:09,006
Let's start in a place you might


1063
00:30:09,006 --> 00:30:10,396
be familiar with in the


1064
00:30:10,396 --> 00:30:12,876
main.swift file.


1065
00:30:14,066 --> 00:30:15,406
Now, this is just the start of


1066
00:30:15,406 --> 00:30:16,916
what you'll see if you don't


1067
00:30:16,916 --> 00:30:18,066
have any Code Completion


1068
00:30:18,066 --> 00:30:19,906
Directives in the new content,


1069
00:30:19,906 --> 00:30:20,736
Assemble Your Camera.


1070
00:30:22,346 --> 00:30:23,776
To ensure you have full control


1071
00:30:23,776 --> 00:30:24,686
over what appears in the


1072
00:30:24,686 --> 00:30:26,626
Shortcut bar, you want to start


1073
00:30:26,626 --> 00:30:28,006
with a directive, everything,


1074
00:30:28,006 --> 00:30:28,336
hide.


1075
00:30:29,086 --> 00:30:30,516
Just as it sounds, this will


1076
00:30:30,516 --> 00:30:31,496
hide everything from the


1077
00:30:31,496 --> 00:30:33,346
Shortcut bar giving you a blank


1078
00:30:33,446 --> 00:30:34,966
slate to work from.


1079
00:30:35,896 --> 00:30:37,566
To start building suggestions


1080
00:30:37,636 --> 00:30:39,396
back into the Shortcut bar, you


1081
00:30:39,396 --> 00:30:40,846
can use currentmodule, show.


1082
00:30:41,386 --> 00:30:42,996
This is a special keyword that


1083
00:30:43,096 --> 00:30:45,076
you can use to ensure everything


1084
00:30:45,076 --> 00:30:46,786
you or your students create on


1085
00:30:46,786 --> 00:30:48,706
the main file is shown.


1086
00:30:50,076 --> 00:30:51,686
The directive module show,


1087
00:30:52,116 --> 00:30:53,626
followed by comma separated list


1088
00:30:53,626 --> 00:30:55,466
of modules will show everything


1089
00:30:55,466 --> 00:30:57,066
marked as public in those user


1090
00:30:57,066 --> 00:30:59,356
module files, as well as any new


1091
00:30:59,356 --> 00:31:00,536
code a user may write while


1092
00:31:00,616 --> 00:31:01,486
playing in your Playground.


1093
00:31:02,886 --> 00:31:04,126
This is the same directive you


1094
00:31:04,126 --> 00:31:05,246
would have used to expose a


1095
00:31:05,246 --> 00:31:06,596
library like UIKit.


1096
00:31:07,666 --> 00:31:08,756
For more information about the


1097
00:31:08,756 --> 00:31:10,236
various directives, please check


1098
00:31:10,236 --> 00:31:11,866
out the documentation for Swift


1099
00:31:12,666 --> 00:31:12,936
Playgrounds.


1100
00:31:14,476 --> 00:31:16,056
And newly added in Swift


1101
00:31:16,056 --> 00:31:18,226
Playgrounds 3 is how to add Code


1102
00:31:18,226 --> 00:31:19,446
Completion Directives in a


1103
00:31:19,446 --> 00:31:21,976
shared file in the page of a


1104
00:31:21,976 --> 00:31:22,486
Manifest.


1105
00:31:23,896 --> 00:31:25,196
This means that just like how


1106
00:31:25,196 --> 00:31:26,906
you can scaffold what API is


1107
00:31:26,906 --> 00:31:28,616
exposed in the main files as


1108
00:31:28,616 --> 00:31:29,586
your students move through your


1109
00:31:29,586 --> 00:31:31,526
book, you can do this in shared


1110
00:31:31,526 --> 00:31:33,346
files as well, ensuring you


1111
00:31:33,346 --> 00:31:34,696
won't overload your learners at


1112
00:31:34,696 --> 00:31:35,776
the start of their journey.


1113
00:31:36,426 --> 00:31:39,936
To do this, you'll use the key


1114
00:31:40,236 --> 00:31:40,976
UserModule


1115
00:31:40,976 --> 00:31:42,326
CodeCompletionDirectives


1116
00:31:43,086 --> 00:31:44,326
followed by an array of Code


1117
00:31:44,326 --> 00:31:46,106
Completion Directives similar to


1118
00:31:46,196 --> 00:31:47,376
how you would make them in the


1119
00:31:47,376 --> 00:31:47,946
main file.


1120
00:31:50,186 --> 00:31:51,696
Again, if using everything hide,


1121
00:31:51,946 --> 00:31:53,116
you want to use currentmodule


1122
00:31:53,116 --> 00:31:55,656
show and module show, to show


1123
00:31:55,656 --> 00:31:57,386
everything created on the main


1124
00:31:57,446 --> 00:31:59,466
and shared file.


1125
00:31:59,706 --> 00:32:01,026
Additionally, you can add


1126
00:32:01,116 --> 00:32:02,786
keywords like public and private


1127
00:32:02,786 --> 00:32:05,296
as identifiers to show these to


1128
00:32:05,456 --> 00:32:06,696
your students as they start new


1129
00:32:06,696 --> 00:32:07,776
functions, classes, and structs


1130
00:32:08,086 --> 00:32:08,846
in a shared file.


1131
00:32:10,076 --> 00:32:13,056
Next, let's talk about making


1132
00:32:13,056 --> 00:32:14,186
Cutscenes in Swift.


1133
00:32:16,686 --> 00:32:17,636
Several of the books in the


1134
00:32:17,696 --> 00:32:19,236
Swift Playground's library use


1135
00:32:19,336 --> 00:32:20,636
Cutscenes to introduce a new


1136
00:32:20,716 --> 00:32:22,816
skill, engage the user, or


1137
00:32:22,816 --> 00:32:23,836
summarize a concept.


1138
00:32:25,266 --> 00:32:27,006
What was previously only done in


1139
00:32:27,186 --> 00:32:29,536
HTML, you can now also write in


1140
00:32:29,576 --> 00:32:30,046
Swift.


1141
00:32:32,516 --> 00:32:36,226
[ Applause and Cheering ]


1142
00:32:36,726 --> 00:32:38,406
This offers loads of benefits to


1143
00:32:38,466 --> 00:32:39,316
you as a developer.


1144
00:32:40,226 --> 00:32:41,576
You can leverage frameworks like


1145
00:32:41,726 --> 00:32:42,926
SpriteKit, UIKit, and


1146
00:32:42,926 --> 00:32:43,676
CoreAnimation.


1147
00:32:44,776 --> 00:32:45,966
By using Swift, you don't have


1148
00:32:45,966 --> 00:32:47,106
to switch tools to create


1149
00:32:47,106 --> 00:32:50,366
Cutscenes which means you can


1150
00:32:50,366 --> 00:32:52,216
use the Interface Builder for


1151
00:32:52,216 --> 00:32:53,736
storyboards and auto layout.


1152
00:32:55,276 --> 00:32:56,526
And you can localize your


1153
00:32:56,526 --> 00:32:58,266
Cutscenes using the same tooling


1154
00:32:58,266 --> 00:32:59,356
you use to localize your


1155
00:32:59,426 --> 00:32:59,786
content.


1156
00:33:02,396 --> 00:33:03,916
Using Swift, you'll now add


1157
00:33:03,916 --> 00:33:05,466
Cutscenes to your book similar


1158
00:33:05,466 --> 00:33:06,806
to how you would a new page.


1159
00:33:08,286 --> 00:33:09,676
In the Pages folder, you'll


1160
00:33:09,676 --> 00:33:11,076
still need a folder ending in


1161
00:33:11,246 --> 00:33:13,146
.cutscenepage, only now you'll


1162
00:33:13,146 --> 00:33:15,006
need both a .swift file and a


1163
00:33:15,006 --> 00:33:15,366
Manifest.


1164
00:33:16,436 --> 00:33:17,956
The .swift file you include


1165
00:33:18,036 --> 00:33:19,586
behaves like a liveview.swift


1166
00:33:19,586 --> 00:33:21,436
file and should run and present


1167
00:33:21,476 --> 00:33:22,856
a live view.


1168
00:33:24,316 --> 00:33:25,776
In order for your Cutscene to


1169
00:33:25,776 --> 00:33:27,116
appear in the Table of Contents,


1170
00:33:27,526 --> 00:33:28,746
you add it to the chapter level


1171
00:33:28,746 --> 00:33:31,186
Manifest, just like you would a


1172
00:33:31,266 --> 00:33:32,626
new page.


1173
00:33:33,456 --> 00:33:35,996
Now, finally, I'm excited to


1174
00:33:35,996 --> 00:33:37,926
introduce you to Localized Code


1175
00:33:37,976 --> 00:33:38,396
Comments.


1176
00:33:40,546 --> 00:33:41,696
If you're distributing your


1177
00:33:41,776 --> 00:33:42,976
Playground book to multiple


1178
00:33:42,976 --> 00:33:44,936
locales, you can now localize


1179
00:33:45,066 --> 00:33:47,416
code comments and strings in any


1180
00:33:47,416 --> 00:33:48,676
main or shared files.


1181
00:33:49,466 --> 00:33:50,576
This means that your book will


1182
00:33:50,576 --> 00:33:52,346
be fully localized to your


1183
00:33:52,346 --> 00:33:52,676
students.


1184
00:33:54,516 --> 00:34:00,106
[ Applause ]


1185
00:34:00,606 --> 00:34:02,226
For code comments, you can have


1186
00:34:02,276 --> 00:34:04,416
a single or multiline comment in


1187
00:34:04,416 --> 00:34:05,556
a localizable-zone.


1188
00:34:06,016 --> 00:34:07,836
Each localizable-zone should


1189
00:34:07,836 --> 00:34:09,206
have a unique identifier.


1190
00:34:10,746 --> 00:34:11,966
You can also use inline


1191
00:34:11,966 --> 00:34:13,846
localizable-zones to make string


1192
00:34:13,846 --> 00:34:15,005
literals localizable.


1193
00:34:15,576 --> 00:34:18,045
The output of your Localized


1194
00:34:18,076 --> 00:34:19,716
Code Comments will be stored in


1195
00:34:19,716 --> 00:34:22,166
the LocalizableCode.strings file


1196
00:34:22,326 --> 00:34:23,596
in the book level Private


1197
00:34:23,596 --> 00:34:24,436
Resources folder.


1198
00:34:25,676 --> 00:34:27,656
That's a taste for all the


1199
00:34:27,656 --> 00:34:29,126
powerful new features in Swift


1200
00:34:29,126 --> 00:34:30,416
Playgrounds 3 for authors.


1201
00:34:31,085 --> 00:34:32,146
Next, let's see all these new


1202
00:34:32,146 --> 00:34:34,016
author and app features come


1203
00:34:34,016 --> 00:34:35,356
together with the demo from


1204
00:34:35,356 --> 00:34:35,616
Grace.


1205
00:34:37,516 --> 00:34:43,815
[ Applause ]


1206
00:34:44,315 --> 00:34:45,706
>> So with all of these new


1207
00:34:45,706 --> 00:34:47,246
features, I really wanted to


1208
00:34:47,246 --> 00:34:48,775
show off that you can create


1209
00:34:48,775 --> 00:34:50,946
something super robust and fun


1210
00:34:50,946 --> 00:34:52,376
for Swift Playgrounds on the


1211
00:34:52,585 --> 00:34:52,856
iPad.


1212
00:34:53,716 --> 00:34:55,666
So as you all know, the general


1213
00:34:55,666 --> 00:34:57,176
workflow for creating an app


1214
00:34:57,176 --> 00:34:58,926
that incorporates the iOS camera


1215
00:34:58,926 --> 00:35:01,146
on iPad is to start with a blank


1216
00:35:01,146 --> 00:35:03,136
app in Xcode on the Mac, write


1217
00:35:03,186 --> 00:35:05,246
some code, run it on your iPad,


1218
00:35:05,366 --> 00:35:06,716
see if it worked, and then


1219
00:35:06,716 --> 00:35:08,306
iterate back and forth between


1220
00:35:08,306 --> 00:35:09,136
your two devices.


1221
00:35:09,916 --> 00:35:11,386
But, you can iterate much more


1222
00:35:11,436 --> 00:35:12,766
quickly if you're writing the


1223
00:35:12,766 --> 00:35:14,676
code right on the iPad itself


1224
00:35:14,676 --> 00:35:15,466
with Swift Playgrounds.


1225
00:35:16,346 --> 00:35:18,146
So I wanted to use the Vision


1226
00:35:18,146 --> 00:35:19,656
framework which does use the


1227
00:35:19,656 --> 00:35:21,796
camera along with Core ML to do


1228
00:35:21,796 --> 00:35:23,086
object detection and live


1229
00:35:23,256 --> 00:35:23,836
capture.


1230
00:35:24,256 --> 00:35:25,376
So, Swift Playgrounds was


1231
00:35:25,376 --> 00:35:26,856
actually a great place for me to


1232
00:35:26,856 --> 00:35:27,946
build this app.


1233
00:35:29,136 --> 00:35:30,726
So there is a concept in


1234
00:35:30,726 --> 00:35:32,486
American Sign Language of name


1235
00:35:32,486 --> 00:35:34,596
signs which are special signs to


1236
00:35:34,596 --> 00:35:35,976
uniquely identify a person.


1237
00:35:35,976 --> 00:35:39,116
When I was little, my mom gave


1238
00:35:39,116 --> 00:35:41,006
me the name sign of this which


1239
00:35:41,006 --> 00:35:42,616
is the letter G and a smile.


1240
00:35:43,086 --> 00:35:45,186
But that is me on the left not


1241
00:35:45,186 --> 00:35:45,536
smiling.


1242
00:35:45,536 --> 00:35:46,546
So maybe it should have been


1243
00:35:46,636 --> 00:35:47,786
more like this.


1244
00:35:47,936 --> 00:35:50,666
So working off of this idea, I


1245
00:35:50,666 --> 00:35:52,216
created a piece of content that


1246
00:35:52,216 --> 00:35:54,046
incorporates some doodling and


1247
00:35:54,046 --> 00:35:55,636
some sign language recognition


1248
00:35:55,886 --> 00:35:56,686
which I want to show you now.


1249
00:36:03,856 --> 00:36:04,626
All right.


1250
00:36:04,906 --> 00:36:06,406
So, here's my piece of content


1251
00:36:06,826 --> 00:36:08,386
packaged up into a book that I


1252
00:36:08,386 --> 00:36:09,616
call Sign Me Up.


1253
00:36:10,026 --> 00:36:11,516
So what I wanted to do was make


1254
00:36:11,566 --> 00:36:13,586
something to let Jonathan, Joy


1255
00:36:13,586 --> 00:36:15,286
and I create a unique face


1256
00:36:15,376 --> 00:36:17,046
painting for ourselves and then


1257
00:36:17,046 --> 00:36:18,776
trigger those drawings with sign


1258
00:36:18,776 --> 00:36:19,156
language.


1259
00:36:20,016 --> 00:36:21,836
So, I'm doing touch recognition


1260
00:36:21,836 --> 00:36:23,926
to draw on live video output and


1261
00:36:23,966 --> 00:36:24,996
then I'm using the Vision


1262
00:36:24,996 --> 00:36:26,176
framework to track those


1263
00:36:26,176 --> 00:36:27,606
drawings to detected faces.


1264
00:36:27,606 --> 00:36:30,086
And then I'm using Core ML to do


1265
00:36:30,086 --> 00:36:31,426
object recognition and live


1266
00:36:31,486 --> 00:36:33,266
capture to rotate between those


1267
00:36:33,266 --> 00:36:34,776
drawings based on what's being


1268
00:36:35,766 --> 00:36:35,886
signed.


1269
00:36:37,196 --> 00:36:39,556
So I created my book and I put


1270
00:36:39,556 --> 00:36:41,226
it in Limited Mode so I can hide


1271
00:36:41,226 --> 00:36:42,586
away some of the implementation


1272
00:36:42,586 --> 00:36:43,146
details.


1273
00:36:43,566 --> 00:36:44,806
I really just want my users to


1274
00:36:44,806 --> 00:36:46,006
focus on a few of the Swift


1275
00:36:46,006 --> 00:36:47,646
files I've created in my user


1276
00:36:47,646 --> 00:36:48,056
module.


1277
00:36:48,636 --> 00:36:51,766
On the Mac, I trained a Core ML


1278
00:36:51,996 --> 00:36:54,296
model to recognize three signs.


1279
00:36:54,576 --> 00:36:58,646
So G, Y and N, then I imported


1280
00:36:58,646 --> 00:37:01,296
the model to my iPad into this


1281
00:37:01,296 --> 00:37:01,646
Playground.


1282
00:37:02,746 --> 00:37:05,026
So G is for Grace, and my


1283
00:37:05,026 --> 00:37:07,636
co-presenters Jonathan and Joy,


1284
00:37:07,746 --> 00:37:09,086
both have the same first two


1285
00:37:09,086 --> 00:37:10,946
letters of their names so I


1286
00:37:10,946 --> 00:37:11,916
settled for the third.


1287
00:37:11,916 --> 00:37:14,576
So Y for joy, and N for


1288
00:37:14,576 --> 00:37:15,176
Jonathan.


1289
00:37:15,916 --> 00:37:17,066
So I'd like to invite them both


1290
00:37:17,106 --> 00:37:18,356
back up now to demonstrate.


1291
00:37:22,516 --> 00:37:30,196
[ Applause ]


1292
00:37:30,696 --> 00:37:33,566
Alright. So on the first page, I


1293
00:37:33,566 --> 00:37:35,186
added some pros instructing the


1294
00:37:35,186 --> 00:37:35,986
user what to do.


1295
00:37:35,986 --> 00:37:38,246
And when Joy taps in the Source


1296
00:37:38,246 --> 00:37:39,976
Editor, you'll see that I've


1297
00:37:39,976 --> 00:37:40,916
added a code completion


1298
00:37:40,916 --> 00:37:42,246
directive to suggest the


1299
00:37:42,246 --> 00:37:43,446
setColors function.


1300
00:37:44,766 --> 00:37:46,266
Just by tapping, she can fill


1301
00:37:46,266 --> 00:37:47,786
this function out by selecting


1302
00:37:47,786 --> 00:37:49,976
color literal placeholders in


1303
00:37:49,976 --> 00:37:50,996
the Code Completion bar.


1304
00:37:51,636 --> 00:37:53,206
The quick editor for this makes


1305
00:37:53,206 --> 00:37:54,776
it super easy to see different


1306
00:37:54,776 --> 00:37:55,766
UI colors this way.


1307
00:37:57,236 --> 00:37:58,846
The setColors function sets some


1308
00:37:58,846 --> 00:38:00,096
of the different drawing colors


1309
00:38:00,096 --> 00:38:01,286
that will be available once she


1310
00:38:01,286 --> 00:38:01,946
runs the code.


1311
00:38:02,186 --> 00:38:03,126
So let's go ahead and do that


1312
00:38:03,126 --> 00:38:03,336
now.


1313
00:38:06,446 --> 00:38:06,596
Awesome.


1314
00:38:07,096 --> 00:38:08,456
And let's expand the live view


1315
00:38:08,456 --> 00:38:09,616
to full screen to get a better


1316
00:38:09,616 --> 00:38:10,246
perspective.


1317
00:38:11,756 --> 00:38:12,846
So she'll cycle through in the


1318
00:38:12,846 --> 00:38:14,526
bottom, left-hand corner to set


1319
00:38:14,526 --> 00:38:16,856
Y for Joy, and then can tap


1320
00:38:16,906 --> 00:38:18,016
through in the right hand color


1321
00:38:18,016 --> 00:38:19,266
to pick the color to draw with.


1322
00:38:20,076 --> 00:38:21,566
And then she can do some face


1323
00:38:21,566 --> 00:38:21,936
painting.


1324
00:38:24,356 --> 00:38:25,746
So what she draws is tracking to


1325
00:38:25,746 --> 00:38:26,946
her face using the Vision


1326
00:38:26,946 --> 00:38:28,466
framework which can return a


1327
00:38:28,466 --> 00:38:30,236
bounding box of a face and some


1328
00:38:30,236 --> 00:38:31,036
facial landmarks.


1329
00:38:31,126 --> 00:38:33,206
So I'm using the left pupil to


1330
00:38:33,206 --> 00:38:34,586
map all of these points to their


1331
00:38:34,586 --> 00:38:35,496
correct locations.


1332
00:38:36,406 --> 00:38:37,706
Once she's satisfied, she'll tap


1333
00:38:37,786 --> 00:38:39,686
Done and give Jonathan a turn.


1334
00:38:40,756 --> 00:38:42,666
So these drawings are then


1335
00:38:42,666 --> 00:38:44,336
represented as a set of colors


1336
00:38:44,336 --> 00:38:46,096
and x, y distances to the left


1337
00:38:46,156 --> 00:38:47,456
pupil and are then mapped to a


1338
00:38:47,456 --> 00:38:47,746
letter.


1339
00:38:48,456 --> 00:38:50,116
This information is then saved


1340
00:38:50,116 --> 00:38:51,256
to the Playground key value


1341
00:38:51,256 --> 00:38:52,416
store of this Playground.


1342
00:38:53,106 --> 00:38:54,296
And all of this code for the


1343
00:38:54,296 --> 00:38:56,216
mapping is in the FaceView.swift


1344
00:38:56,216 --> 00:38:57,906
file and is available for the


1345
00:38:57,906 --> 00:39:00,266
user to peruse without messing


1346
00:39:00,266 --> 00:39:01,876
up any of the cleanliness of my


1347
00:39:01,876 --> 00:39:02,496
main page.


1348
00:39:02,496 --> 00:39:04,306
So it looks like Jonathan's


1349
00:39:04,306 --> 00:39:04,516
done.


1350
00:39:04,516 --> 00:39:05,866
I'll follow suit.


1351
00:39:16,986 --> 00:39:17,396
Cool.


1352
00:39:18,516 --> 00:39:22,046
[Applause]


1353
00:39:22,546 --> 00:39:23,846
Awesome. So let's go to the next


1354
00:39:23,846 --> 00:39:25,566
page now which instructs us to


1355
00:39:25,566 --> 00:39:28,226
run the code and see what


1356
00:39:28,796 --> 00:39:29,016
happens.


1357
00:39:29,166 --> 00:39:30,516
And let's bring the live view to


1358
00:39:30,516 --> 00:39:31,496
full screen again to get a


1359
00:39:31,496 --> 00:39:32,176
better perspective.


1360
00:39:33,206 --> 00:39:34,796
So, so far, nothing is happening


1361
00:39:34,796 --> 00:39:36,306
except for our face detection.


1362
00:39:36,596 --> 00:39:38,596
But try signing the letter Y.


1363
00:39:40,236 --> 00:39:41,966
Awesome. So Swift Playgrounds is


1364
00:39:41,966 --> 00:39:44,016
recognizing-- [applause] Yeah.


1365
00:39:48,796 --> 00:39:50,396
Swift Playgrounds recognizes


1366
00:39:50,396 --> 00:39:51,916
that Joy is signing Y and is


1367
00:39:51,956 --> 00:39:53,456
projecting her drawing onto her


1368
00:39:53,516 --> 00:39:53,796
face.


1369
00:39:54,416 --> 00:39:55,176
So let's see if we try a


1370
00:39:55,176 --> 00:39:55,716
different letter.


1371
00:39:55,716 --> 00:39:56,486
Let's try G.


1372
00:39:57,956 --> 00:39:58,976
>> Oh, I don't know.


1373
00:39:59,046 --> 00:39:59,726
>> Rotate a little bit.


1374
00:40:01,626 --> 00:40:03,156
Oh, we're getting there.


1375
00:40:03,156 --> 00:40:03,976
Maybe N for Jonathan.


1376
00:40:04,756 --> 00:40:05,846
There we go.


1377
00:40:06,106 --> 00:40:07,326
Cool, cool.


1378
00:40:07,576 --> 00:40:08,876
And it can even switch between


1379
00:40:08,876 --> 00:40:09,406
faces.


1380
00:40:11,786 --> 00:40:12,946
Perfect. You've never looked


1381
00:40:12,946 --> 00:40:13,796
better [laughs].


1382
00:40:14,516 --> 00:40:18,096
[ Applause ]


1383
00:40:18,596 --> 00:40:20,246
So, all of this code was written


1384
00:40:20,246 --> 00:40:21,886
entirely in Swift Playgrounds


1385
00:40:21,886 --> 00:40:23,376
and is running on this iPad.


1386
00:40:23,786 --> 00:40:24,986
And you can customize it for


1387
00:40:24,986 --> 00:40:26,596
your students, your friends or


1388
00:40:26,596 --> 00:40:28,076
fellow developers on the Mac


1389
00:40:28,386 --> 00:40:30,266
making for unique and really fun


1390
00:40:30,346 --> 00:40:31,506
piece of content that makes


1391
00:40:31,506 --> 00:40:32,646
Swift Playgrounds accessible.


1392
00:40:39,036 --> 00:40:40,856
So both Jonathan and my


1393
00:40:40,926 --> 00:40:42,026
Playgrounds are available for


1394
00:40:42,026 --> 00:40:43,266
download online in a


1395
00:40:43,266 --> 00:40:44,116
subscription at


1396
00:40:44,216 --> 00:40:44,926
wwdcswiftplaygrounds


1397
00:40:44,926 --> 00:40:48,196
2019.github.io.


1398
00:40:49,056 --> 00:40:50,146
>> And for more information,


1399
00:40:50,146 --> 00:40:50,906
please check out our


1400
00:40:50,906 --> 00:40:51,866
documentation


1401
00:40:52,056 --> 00:40:53,956
developer.apple.com.


1402
00:40:54,386 --> 00:40:56,026
And please come to the labs


1403
00:40:56,026 --> 00:40:57,576
tomorrow morning, bright and


1404
00:40:57,576 --> 00:40:59,066
early at 9:00 a.m. We're going


1405
00:40:59,066 --> 00:41:00,046
to be there and we'd love to


1406
00:41:00,046 --> 00:41:01,136
talk with you.


1407
00:41:01,696 --> 00:41:03,086
>> Thank you all for coming and


1408
00:41:03,086 --> 00:41:03,886
have a great rest of your


1409
00:41:03,886 --> 00:41:04,346
conference.


1410
00:41:05,516 --> 00:41:09,500
[ Applause and Cheering ]

