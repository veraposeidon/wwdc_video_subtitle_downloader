1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:10,516 --> 00:00:17,556
[ Applause ]


3
00:00:18,056 --> 00:00:19,276
>> Good morning, everyone.


4
00:00:19,686 --> 00:00:21,916
Welcome to Session 203


5
00:00:22,246 --> 00:00:23,886
Introducing Desktop-class


6
00:00:23,926 --> 00:00:25,466
Browsing on iPad.


7
00:00:26,086 --> 00:00:28,246
My name is Charles Ying, and I'm


8
00:00:28,246 --> 00:00:30,816
joined today by Wenson Hsieh and


9
00:00:30,816 --> 00:00:32,676
Beth Dakin from the Safari


10
00:00:32,676 --> 00:00:33,376
WebKit teams.


11
00:00:35,166 --> 00:00:37,246
We are so thrilled to tell you


12
00:00:37,246 --> 00:00:39,566
about desktop-class browsing, a


13
00:00:39,566 --> 00:00:42,326
major new advancement to the web


14
00:00:42,326 --> 00:00:43,786
platform on iPad.


15
00:00:45,196 --> 00:00:46,276
As you heard in the keynote,


16
00:00:46,686 --> 00:00:49,076
Safari on iPadOS is now a


17
00:00:49,076 --> 00:00:50,296
desktop-class browser.


18
00:00:51,616 --> 00:00:52,616
Now, what does that mean?


19
00:00:53,956 --> 00:00:55,486
It means getting more done with


20
00:00:55,486 --> 00:00:56,016
Safari.


21
00:00:56,816 --> 00:00:59,016
You can now use Safari for all


22
00:00:59,016 --> 00:01:00,866
the great things you want to do


23
00:01:00,866 --> 00:01:02,916
on the web.


24
00:01:03,156 --> 00:01:04,376
Safari is the new download


25
00:01:04,376 --> 00:01:07,006
manager, so you can download and


26
00:01:07,006 --> 00:01:09,896
upload files while using other


27
00:01:09,896 --> 00:01:12,866
tabs and even other apps.


28
00:01:14,586 --> 00:01:16,696
Safari's new controls for


29
00:01:16,696 --> 00:01:18,776
full-page zoom, hiding the


30
00:01:18,776 --> 00:01:20,596
toolbar when you need more space


31
00:01:20,656 --> 00:01:22,926
to work and per-site preferences


32
00:01:22,926 --> 00:01:25,266
to tailor Safari to your


33
00:01:25,266 --> 00:01:25,706
workflow.


34
00:01:27,426 --> 00:01:29,946
And Safari now has all the


35
00:01:29,946 --> 00:01:31,926
keyboard shortcuts you expect


36
00:01:32,146 --> 00:01:34,146
from a desktop browser to get


37
00:01:34,146 --> 00:01:35,886
things done fast and stay


38
00:01:35,886 --> 00:01:37,526
focused on what you're doing.


39
00:01:37,526 --> 00:01:41,296
But at the heart of it all is


40
00:01:41,296 --> 00:01:42,506
browsing desktop websites.


41
00:01:47,616 --> 00:01:49,176
We've been working on web


42
00:01:49,176 --> 00:01:51,116
browsers for a long time.


43
00:01:52,176 --> 00:01:53,416
When the original iPhone was


44
00:01:53,416 --> 00:01:55,636
first introduced, all websites


45
00:01:55,636 --> 00:01:57,546
were big and made for mouse


46
00:01:57,546 --> 00:01:57,856
input.


47
00:01:59,606 --> 00:02:01,086
iPhone made these websites work


48
00:02:01,606 --> 00:02:04,196
out of the box without requiring


49
00:02:04,196 --> 00:02:06,296
them to change to work with a


50
00:02:06,296 --> 00:02:08,455
small screen and Multi-Touch.


51
00:02:09,916 --> 00:02:11,576
iPhone would scale websites to


52
00:02:11,626 --> 00:02:14,206
fit and boost text sizes so you


53
00:02:14,206 --> 00:02:14,726
could read them.


54
00:02:16,246 --> 00:02:18,836
Then you used new web APIs to


55
00:02:19,196 --> 00:02:21,296
make your websites take full


56
00:02:21,296 --> 00:02:22,696
advantage of iPhone's


57
00:02:22,696 --> 00:02:23,256
capabilities.


58
00:02:23,256 --> 00:02:26,926
And the results were fantastic.


59
00:02:27,676 --> 00:02:30,576
Some of you used responsive


60
00:02:30,576 --> 00:02:32,116
design techniques to make your


61
00:02:32,116 --> 00:02:34,246
websites flexible on screens of


62
00:02:34,246 --> 00:02:34,916
any size.


63
00:02:35,936 --> 00:02:38,676
Those websites look great on


64
00:02:39,396 --> 00:02:40,276
iPad today.


65
00:02:41,066 --> 00:02:43,776
But it was also common to have


66
00:02:43,776 --> 00:02:44,906
two different versions of the


67
00:02:44,906 --> 00:02:48,386
site, one for big screens and


68
00:02:48,386 --> 00:02:49,386
one for small screens.


69
00:02:49,386 --> 00:02:53,086
iPad used the mobile user agent


70
00:02:53,606 --> 00:02:54,966
which meant it got small screen


71
00:02:54,966 --> 00:02:55,416
websites.


72
00:02:56,906 --> 00:03:01,116
So new in iPadOS, iPad will now


73
00:03:01,116 --> 00:03:02,496
present itself to websites as a


74
00:03:02,856 --> 00:03:02,976
Mac.


75
00:03:05,576 --> 00:03:07,656
This is not just user agent


76
00:03:07,656 --> 00:03:09,676
change, but a set of deep


77
00:03:10,506 --> 00:03:13,116
fundamental changes to WebKit


78
00:03:13,666 --> 00:03:15,386
that add up to a great new


79
00:03:15,386 --> 00:03:15,976
experience.


80
00:03:16,776 --> 00:03:17,826
Let me walk you through two of


81
00:03:17,826 --> 00:03:18,466
these changes.


82
00:03:20,226 --> 00:03:21,766
Some desktop websites are


83
00:03:21,766 --> 00:03:23,236
designed to show lots of


84
00:03:23,236 --> 00:03:25,096
information on a large screen.


85
00:03:26,656 --> 00:03:28,206
These websites were zoomed in on


86
00:03:28,206 --> 00:03:29,896
big iPads, and you couldn't see


87
00:03:29,896 --> 00:03:31,156
as much information as the


88
00:03:31,156 --> 00:03:31,796
desktop browser.


89
00:03:32,996 --> 00:03:34,536
WebKit used a viewport to lay


90
00:03:34,536 --> 00:03:36,396
out websites that was the same


91
00:03:36,396 --> 00:03:38,626
on every iPad size, the iPad


92
00:03:38,626 --> 00:03:40,616
mini all the way up to the


93
00:03:40,616 --> 00:03:43,116
largest iPad Pro.


94
00:03:43,336 --> 00:03:47,136
So new in iPadOS, viewports will


95
00:03:47,136 --> 00:03:49,436
now match iPad screen size.


96
00:03:50,496 --> 00:03:52,036
Now websites can use all the


97
00:03:52,036 --> 00:03:53,626
space available on bigger iPads.


98
00:03:54,536 --> 00:03:56,456
With smaller iPads, we'll scale


99
00:03:56,456 --> 00:03:59,236
websites to fit everything on


100
00:03:59,236 --> 00:04:01,626
screen and boost text sizes for


101
00:04:01,626 --> 00:04:03,886
comfortable reading just like


102
00:04:03,886 --> 00:04:04,086
iPhone.


103
00:04:05,356 --> 00:04:06,746
You can now see more of the


104
00:04:06,746 --> 00:04:08,616
website at once just like a


105
00:04:08,616 --> 00:04:10,706
desktop computer, make it easier


106
00:04:10,706 --> 00:04:11,706
to get things done.


107
00:04:12,356 --> 00:04:14,886
Some desktop websites are


108
00:04:14,886 --> 00:04:16,636
designed for mouse input.


109
00:04:17,826 --> 00:04:21,206
New in iOS 13, iPad optimizes


110
00:04:21,346 --> 00:04:23,286
how touch input adapts to mouse


111
00:04:23,286 --> 00:04:23,576
input.


112
00:04:24,256 --> 00:04:25,986
So websites like this one using


113
00:04:25,986 --> 00:04:28,576
mouse hover now work out of the


114
00:04:28,576 --> 00:04:28,846
box.


115
00:04:29,676 --> 00:04:32,566
And for web apps that want full


116
00:04:32,566 --> 00:04:35,446
control, you can now use Pointer


117
00:04:35,446 --> 00:04:35,746
Events.


118
00:04:37,206 --> 00:04:38,786
This is just a taste of the


119
00:04:38,786 --> 00:04:42,026
dozens of web APIs and features


120
00:04:42,316 --> 00:04:46,056
new in iPadOS that you can take


121
00:04:46,056 --> 00:04:47,946
advantage of in your web apps.


122
00:04:49,006 --> 00:04:50,526
You'll hear more about them from


123
00:04:50,526 --> 00:04:51,676
Beth later on.


124
00:04:53,716 --> 00:04:55,256
All of this adds up to a


125
00:04:55,256 --> 00:04:56,556
powerful browsing experience


126
00:04:56,936 --> 00:04:58,606
that you expect from your iPad,


127
00:04:59,236 --> 00:05:00,896
and that's desktop-class


128
00:05:00,896 --> 00:05:04,986
browsing, new in iPadOS.


129
00:05:05,136 --> 00:05:05,476
Now --


130
00:05:06,516 --> 00:05:08,896
[ Applause ]


131
00:05:09,396 --> 00:05:11,336
Now, we want to show you how


132
00:05:11,336 --> 00:05:13,276
your apps and websites can take


133
00:05:13,406 --> 00:05:15,036
full advantage of these new


134
00:05:15,036 --> 00:05:15,626
capabilities.


135
00:05:16,696 --> 00:05:18,346
For app developers, we'll show


136
00:05:18,346 --> 00:05:19,826
you how to use desktop-class


137
00:05:19,826 --> 00:05:21,496
browsing in your app.


138
00:05:22,526 --> 00:05:24,136
And for web developers, we'll


139
00:05:24,136 --> 00:05:24,846
show you how to make your


140
00:05:24,846 --> 00:05:27,266
websites work even better on


141
00:05:27,266 --> 00:05:27,496
iPad.


142
00:05:28,896 --> 00:05:31,156
We'll start with apps.


143
00:05:33,576 --> 00:05:36,266
There are four common ways apps


144
00:05:36,266 --> 00:05:38,276
use web views; following links


145
00:05:38,276 --> 00:05:39,976
to web content and browsing


146
00:05:39,976 --> 00:05:42,596
within your app; web browsers,


147
00:05:42,936 --> 00:05:44,466
where browsing is the primary


148
00:05:44,466 --> 00:05:46,806
focus of your app; hybrid apps,


149
00:05:47,256 --> 00:05:48,646
where web technologies are a


150
00:05:48,646 --> 00:05:49,546
part of your app's user


151
00:05:49,546 --> 00:05:51,606
interface and authenticating


152
00:05:51,606 --> 00:05:53,076
users with a third-party


153
00:05:53,076 --> 00:05:54,076
services using OAuth.


154
00:05:55,326 --> 00:05:56,736
First up, link following.


155
00:05:57,376 --> 00:06:00,656
The best way to follow links and


156
00:06:00,656 --> 00:06:02,556
stay within your app is to use


157
00:06:02,556 --> 00:06:03,626
Safari View Controller.


158
00:06:04,496 --> 00:06:06,096
Just like Safari, Safari View


159
00:06:06,096 --> 00:06:07,456
Controller has great features,


160
00:06:07,736 --> 00:06:10,116
including Autofill and Reader.


161
00:06:10,936 --> 00:06:12,416
So I'm happy to say that if


162
00:06:12,416 --> 00:06:13,436
you're using Safari View


163
00:06:13,436 --> 00:06:14,656
Controller, you get


164
00:06:14,656 --> 00:06:16,696
desktop-class browsing for free.


165
00:06:17,456 --> 00:06:18,736
There's nothing for you to do.


166
00:06:19,806 --> 00:06:21,156
Safari and Safari View


167
00:06:21,156 --> 00:06:22,886
Controller automatically choose


168
00:06:22,886 --> 00:06:24,686
a browsing mode to give you the


169
00:06:24,686 --> 00:06:26,006
best experience for your


170
00:06:26,006 --> 00:06:26,566
situation.


171
00:06:27,606 --> 00:06:28,246
Let me explain.


172
00:06:28,896 --> 00:06:32,666
iPad is the perfect device for


173
00:06:32,666 --> 00:06:33,526
browsing the internet.


174
00:06:34,136 --> 00:06:35,456
It's like holding the web in


175
00:06:35,456 --> 00:06:35,916
your hands.


176
00:06:36,666 --> 00:06:37,496
And depending on what you're


177
00:06:37,496 --> 00:06:39,736
doing, iPad can be used in many


178
00:06:39,736 --> 00:06:41,146
different ways.


179
00:06:42,096 --> 00:06:44,046
For example, some desktop


180
00:06:44,046 --> 00:06:45,806
websites are pretty small on


181
00:06:45,806 --> 00:06:47,986
iPad mini and are more


182
00:06:47,986 --> 00:06:49,266
comfortable to read with a


183
00:06:49,266 --> 00:06:50,596
mobile browsing experience.


184
00:06:50,596 --> 00:06:53,516
When you look at a desktop


185
00:06:53,516 --> 00:06:55,866
website in narrow Split View or


186
00:06:55,866 --> 00:06:57,576
Slide Over, the same thing is


187
00:06:57,576 --> 00:06:57,806
true.


188
00:06:58,496 --> 00:07:01,226
In these cases for narrow


189
00:07:01,226 --> 00:07:03,706
windows, iPad mini mobile


190
00:07:03,706 --> 00:07:04,716
browsing can be better.


191
00:07:06,216 --> 00:07:06,936
Safari and Safari View


192
00:07:06,936 --> 00:07:08,246
Controller will automatically


193
00:07:08,246 --> 00:07:09,726
choose a browsing mode to give


194
00:07:09,926 --> 00:07:11,076
you the best experience.


195
00:07:11,646 --> 00:07:15,856
Safari View Controller takes


196
00:07:15,856 --> 00:07:17,286
care of everything you need to


197
00:07:17,286 --> 00:07:18,406
follow links within your app.


198
00:07:19,396 --> 00:07:20,396
What if your app is a web


199
00:07:20,396 --> 00:07:20,866
browser?


200
00:07:21,636 --> 00:07:22,386
Here's what you do.


201
00:07:23,556 --> 00:07:25,666
First, build your app with iOS


202
00:07:25,666 --> 00:07:28,276
13 SDK to turn on desktop-class


203
00:07:28,306 --> 00:07:28,696
browsing.


204
00:07:29,656 --> 00:07:31,806
Then look at how you're setting


205
00:07:31,806 --> 00:07:32,406
the user agent.


206
00:07:32,406 --> 00:07:35,106
If using the custom user agent


207
00:07:35,106 --> 00:07:37,556
property, we recommend instead


208
00:07:37,656 --> 00:07:39,886
to use WKWebView configurations


209
00:07:40,246 --> 00:07:41,916
applicationNameForUserAgent


210
00:07:41,916 --> 00:07:42,256
property.


211
00:07:43,346 --> 00:07:44,596
When you provide an application


212
00:07:44,596 --> 00:07:46,216
name, WebKit does the right


213
00:07:46,216 --> 00:07:47,536
thing to fill in the rest of the


214
00:07:47,536 --> 00:07:49,216
user agent for you.


215
00:07:51,056 --> 00:07:54,046
WKWebView also is the new


216
00:07:54,046 --> 00:07:55,596
WKWebpagePreferences API for


217
00:07:56,036 --> 00:07:57,726
setting a preferred content


218
00:07:57,726 --> 00:07:58,296
browsing mode.


219
00:07:59,646 --> 00:08:00,846
There are three modes;


220
00:08:01,376 --> 00:08:03,086
recommended, which does what


221
00:08:03,086 --> 00:08:05,496
Safari does; mobile; and desktop


222
00:08:05,496 --> 00:08:05,756
modes.


223
00:08:06,866 --> 00:08:08,686
In most cases, Safari's


224
00:08:08,686 --> 00:08:10,226
recommended mode is what you


225
00:08:10,226 --> 00:08:10,506
want.


226
00:08:11,166 --> 00:08:15,726
Your web browser might also want


227
00:08:15,726 --> 00:08:17,046
to let users switch between


228
00:08:17,046 --> 00:08:19,286
mobile and desktop modes or have


229
00:08:19,286 --> 00:08:20,416
per-site preferences.


230
00:08:21,126 --> 00:08:24,056
For these cases, WebKit has a


231
00:08:24,056 --> 00:08:26,706
new WKNavigationDelegate API to


232
00:08:27,686 --> 00:08:29,386
specify a content mode


233
00:08:29,386 --> 00:08:31,226
preference at navigation time.


234
00:08:34,956 --> 00:08:36,885
You'll see a demo from Wenson of


235
00:08:36,885 --> 00:08:40,076
these new APIs in a bit.


236
00:08:40,296 --> 00:08:42,116
In addition to web browsers, web


237
00:08:42,116 --> 00:08:43,515
technologies can be used to


238
00:08:43,515 --> 00:08:44,976
build parts of your app's


239
00:08:44,976 --> 00:08:46,346
content or user interface.


240
00:08:48,116 --> 00:08:49,776
If your app uses WKWebView this


241
00:08:49,776 --> 00:08:52,316
way, build your app with iOS 13


242
00:08:52,316 --> 00:08:53,856
SDK to turn on desktop-class


243
00:08:53,856 --> 00:08:54,266
browsing.


244
00:08:55,416 --> 00:08:57,336
Then test your app's use of


245
00:08:57,336 --> 00:08:57,936
WKWebView.


246
00:08:59,426 --> 00:09:00,556
In most cases, you're done.


247
00:09:00,556 --> 00:09:02,466
But in the rare case that you


248
00:09:02,466 --> 00:09:03,806
need to opt out of viewport


249
00:09:03,806 --> 00:09:05,016
sizing, you can set the


250
00:09:05,016 --> 00:09:07,356
preferred content mode to


251
00:09:08,096 --> 00:09:08,256
mobile.


252
00:09:08,416 --> 00:09:10,396
Overall, it's pretty easy.


253
00:09:10,956 --> 00:09:12,526
WKWebView does most of the work


254
00:09:12,526 --> 00:09:12,846
for you.


255
00:09:19,746 --> 00:09:22,416
Oops. Finally, web views are


256
00:09:22,416 --> 00:09:24,006
used to authenticate users with


257
00:09:24,006 --> 00:09:25,146
a third-party service using


258
00:09:25,146 --> 00:09:25,486
OAuth.


259
00:09:26,376 --> 00:09:27,756
If you're doing this,


260
00:09:27,756 --> 00:09:29,426
ASWebAuthenticationSession is


261
00:09:29,426 --> 00:09:30,556
the best way to authenticate.


262
00:09:31,906 --> 00:09:32,986
New in iPadOS,


263
00:09:33,486 --> 00:09:35,566
ASWebAuthenticationSession now


264
00:09:35,566 --> 00:09:37,726
presents a form sheet on iPad to


265
00:09:37,726 --> 00:09:38,616
show the authentication


266
00:09:38,616 --> 00:09:40,486
interface while staying within


267
00:09:40,486 --> 00:09:41,386
the context of your app.


268
00:09:42,316 --> 00:09:43,626
Given this new presentation,


269
00:09:44,236 --> 00:09:45,876
ASWebAuthenticationSession loads


270
00:09:45,876 --> 00:09:47,326
websites using a mobile content


271
00:09:47,326 --> 00:09:47,546
mode.


272
00:09:48,216 --> 00:09:48,896
Just like Safari View


273
00:09:48,896 --> 00:09:50,496
Controller, there's nothing for


274
00:09:50,496 --> 00:09:53,896
you to do if you're using this


275
00:09:53,896 --> 00:09:53,986
API.


276
00:09:54,166 --> 00:09:56,476
To recap, Safari View Controller


277
00:09:56,476 --> 00:09:58,196
and ASWebAuthenticationSession


278
00:09:58,536 --> 00:09:59,846
do the heavy lifting for you.


279
00:10:01,106 --> 00:10:03,256
And if using WKWebView, you have


280
00:10:03,256 --> 00:10:04,376
all the tools you need.


281
00:10:05,676 --> 00:10:06,566
And now I'd like to invite


282
00:10:06,566 --> 00:10:08,326
Wenson to the stage to show you


283
00:10:08,326 --> 00:10:09,596
a demo of how this works.


284
00:10:10,166 --> 00:10:10,666
That's it.


285
00:10:11,516 --> 00:10:16,500
[ Applause ]


286
00:10:20,476 --> 00:10:21,786
>> Thank you, Charles.


287
00:10:22,996 --> 00:10:24,816
So when I'm not busy working on


288
00:10:24,816 --> 00:10:26,606
a web browser, I like to take my


289
00:10:26,606 --> 00:10:28,126
mind off of things every now and


290
00:10:28,126 --> 00:10:29,886
then by writing more web


291
00:10:29,886 --> 00:10:30,426
browsers.


292
00:10:31,306 --> 00:10:33,146
So today, I'd like to introduce


293
00:10:33,476 --> 00:10:34,276
Shiny Browser.


294
00:10:34,976 --> 00:10:38,116
It's a WKWebView-based browser


295
00:10:38,116 --> 00:10:39,726
that I've written, and here it


296
00:10:39,726 --> 00:10:40,936
is on Google Docs.


297
00:10:41,976 --> 00:10:43,156
So sometimes I need to


298
00:10:43,156 --> 00:10:44,406
collaborate with my friends


299
00:10:44,566 --> 00:10:45,646
using Google Docs.


300
00:10:46,386 --> 00:10:47,816
For that, I'd like to be able to


301
00:10:47,816 --> 00:10:50,386
use my browser, but as you can


302
00:10:50,386 --> 00:10:52,016
see here, it just tells me to


303
00:10:52,016 --> 00:10:52,846
download the app.


304
00:10:53,666 --> 00:10:55,256
I'll bet that if I had requested


305
00:10:55,466 --> 00:10:56,656
a desktop version of this


306
00:10:56,656 --> 00:10:58,336
website, it would give me full


307
00:10:58,336 --> 00:10:58,936
access.


308
00:10:59,676 --> 00:11:00,716
So as I just learned from


309
00:11:00,716 --> 00:11:03,196
Charles a moment ago, WKWebView


310
00:11:03,196 --> 00:11:05,416
in iOS 13 should request the


311
00:11:05,416 --> 00:11:07,566
desktop version by default on my


312
00:11:07,566 --> 00:11:08,326
iPad Pro.


313
00:11:08,916 --> 00:11:10,216
So I'm going to recompile my


314
00:11:10,216 --> 00:11:12,476
browser against the iOS 13 SDK,


315
00:11:12,476 --> 00:11:14,146
and that should give me the


316
00:11:14,146 --> 00:11:15,006
desktop website.


317
00:11:15,766 --> 00:11:16,816
So I'm going to switch over to


318
00:11:16,816 --> 00:11:18,966
Xcode here, and I'm just going


319
00:11:18,966 --> 00:11:20,046
to hit Command-R to run.


320
00:11:20,046 --> 00:11:22,106
That's going to compile my app,


321
00:11:22,586 --> 00:11:24,016
and we should see the desktop


322
00:11:24,016 --> 00:11:24,516
website.


323
00:11:26,716 --> 00:11:28,196
Okay, well.


324
00:11:28,306 --> 00:11:29,366
Unfortunately, we're still


325
00:11:29,366 --> 00:11:30,326
getting the mobile version.


326
00:11:31,306 --> 00:11:32,276
Let's see if we can try to debug


327
00:11:32,276 --> 00:11:32,856
this together.


328
00:11:33,636 --> 00:11:35,096
Now, let's take a step back.


329
00:11:35,526 --> 00:11:37,226
Google Docs thinks I'm a mobile


330
00:11:37,226 --> 00:11:37,656
browser.


331
00:11:38,396 --> 00:11:39,916
It's probably using the user


332
00:11:39,916 --> 00:11:41,116
agent string to make that


333
00:11:41,116 --> 00:11:41,836
determination.


334
00:11:43,286 --> 00:11:44,546
What I'm going to do is connect


335
00:11:44,546 --> 00:11:45,706
to the web view using Web


336
00:11:45,706 --> 00:11:48,026
Inspector and print out the user


337
00:11:48,026 --> 00:11:48,556
agent string.


338
00:11:49,526 --> 00:11:50,926
Maybe that'll give me a hint as


339
00:11:50,926 --> 00:11:51,666
to what's going on.


340
00:11:52,626 --> 00:11:55,496
So now I'm going to launch


341
00:11:55,496 --> 00:11:58,626
Safari, go to Develop menu and


342
00:11:58,626 --> 00:11:59,726
target Shiny Browser here.


343
00:12:00,136 --> 00:12:02,566
So I'm going to switch over to


344
00:12:02,566 --> 00:12:04,776
Console tab, and I'm just going


345
00:12:04,776 --> 00:12:07,396
to type navigator.userAgent and


346
00:12:07,396 --> 00:12:07,956
hit Enter.


347
00:12:09,176 --> 00:12:10,406
So let's zoom in on this user


348
00:12:10,406 --> 00:12:10,726
agent.


349
00:12:12,056 --> 00:12:12,956
There's a couple of interesting


350
00:12:12,956 --> 00:12:14,106
things I want to point out here.


351
00:12:15,066 --> 00:12:16,406
First of all, the word iPad


352
00:12:16,406 --> 00:12:17,426
appears in the user agent


353
00:12:17,426 --> 00:12:19,386
string, so clearly it's not


354
00:12:19,386 --> 00:12:20,186
desktop-class.


355
00:12:20,826 --> 00:12:22,266
But what's more, there's this


356
00:12:22,266 --> 00:12:24,066
Version/1.0 ShinyBrowser/1.0


357
00:12:24,066 --> 00:12:24,156
here.


358
00:12:24,216 --> 00:12:25,166
It's kind of mysterious.


359
00:12:25,786 --> 00:12:26,826
Where is this coming from?


360
00:12:28,116 --> 00:12:29,886
Well, I like to know myself, so


361
00:12:29,886 --> 00:12:32,266
I'm going to copy and paste into


362
00:12:32,266 --> 00:12:33,616
the search field in Xcode.


363
00:12:33,616 --> 00:12:34,936
So I'm going to Command-F to


364
00:12:34,936 --> 00:12:38,266
find and just paste.


365
00:12:38,456 --> 00:12:40,606
Okay, well as it turns out, I


366
00:12:40,606 --> 00:12:42,496
had code to override the entire


367
00:12:42,496 --> 00:12:44,096
user agent string using the


368
00:12:44,096 --> 00:12:45,776
custom user agent property of


369
00:12:45,776 --> 00:12:46,516
WKWebView.


370
00:12:47,956 --> 00:12:49,006
I must have copied and pasted


371
00:12:49,006 --> 00:12:50,076
this from the internet at some


372
00:12:50,076 --> 00:12:52,066
point and forgot about it since.


373
00:12:52,866 --> 00:12:53,676
Maybe it was a reasonable


374
00:12:53,676 --> 00:12:56,566
solution at the time, but as


375
00:12:56,566 --> 00:12:57,646
I've just learned from Charles,


376
00:12:57,806 --> 00:12:59,106
there's an alternative.


377
00:12:59,866 --> 00:13:01,276
What I can use instead is the


378
00:13:01,306 --> 00:13:02,776
application name for user agent


379
00:13:02,776 --> 00:13:04,016
property on WKWebView


380
00:13:04,016 --> 00:13:04,756
configuration.


381
00:13:05,406 --> 00:13:07,516
So let's change this to use that


382
00:13:07,516 --> 00:13:07,996
instead.


383
00:13:08,826 --> 00:13:09,866
First thing I'm going to do is


384
00:13:09,996 --> 00:13:11,476
remove this custom user agent


385
00:13:11,476 --> 00:13:13,556
code and go up here where I'm


386
00:13:13,556 --> 00:13:14,376
creating my web view.


387
00:13:15,496 --> 00:13:19,206
So what I'm going to do here is


388
00:13:19,206 --> 00:13:20,346
first create a WKWebView


389
00:13:20,346 --> 00:13:22,206
configuration and then set the


390
00:13:22,206 --> 00:13:23,726
application name for user agent


391
00:13:24,256 --> 00:13:25,916
to what I want, Version/1.0


392
00:13:25,916 --> 00:13:26,786
ShinyBrowser/1.0.


393
00:13:27,196 --> 00:13:28,566
And finally, I'm going to create


394
00:13:28,566 --> 00:13:29,686
my web view using this


395
00:13:29,686 --> 00:13:30,376
configuration.


396
00:13:30,496 --> 00:13:32,156
So that was a very small tweak.


397
00:13:32,156 --> 00:13:34,086
I'm going to recompile my app


398
00:13:34,576 --> 00:13:39,446
and see what I get this time.


399
00:13:39,446 --> 00:13:40,906
All right, so as you can see,


400
00:13:40,906 --> 00:13:41,966
we're now getting the full


401
00:13:41,966 --> 00:13:43,556
version of Google Docs, and I


402
00:13:43,556 --> 00:13:44,776
can finally collaborate with my


403
00:13:44,776 --> 00:13:45,276
friends.


404
00:13:45,646 --> 00:13:46,856
That was pretty easy.


405
00:13:47,416 --> 00:13:48,436
But now let's take it one step


406
00:13:48,506 --> 00:13:48,816
further.


407
00:13:49,746 --> 00:13:50,686
One of the features that my


408
00:13:50,686 --> 00:13:51,986
users have been requesting for a


409
00:13:51,986 --> 00:13:54,166
while is the ability to switch


410
00:13:54,196 --> 00:13:55,766
between the desktop and mobile


411
00:13:55,766 --> 00:13:56,996
versions of a web page.


412
00:13:57,766 --> 00:14:00,316
With the new API in iOS 13, it's


413
00:14:00,316 --> 00:14:02,306
now fairly easy to implement, so


414
00:14:02,306 --> 00:14:03,026
let me show you how.


415
00:14:03,946 --> 00:14:05,576
First of all, notice I have this


416
00:14:05,636 --> 00:14:06,806
button in the top right-hand


417
00:14:06,806 --> 00:14:09,016
corner that contains some extra


418
00:14:09,016 --> 00:14:10,566
options like Add To Favorites


419
00:14:10,566 --> 00:14:10,956
and Share.


420
00:14:11,666 --> 00:14:12,706
What I'm going to do is I'm


421
00:14:12,706 --> 00:14:14,426
going to add a third option here


422
00:14:14,826 --> 00:14:16,286
to allow the user to change


423
00:14:16,506 --> 00:14:17,516
content modes.


424
00:14:18,036 --> 00:14:19,156
So that's going to either say


425
00:14:19,156 --> 00:14:20,766
Request Mobile Website or


426
00:14:20,766 --> 00:14:22,216
Request Desktop Website.


427
00:14:23,606 --> 00:14:25,196
Okay. So let's jump into Xcode


428
00:14:26,296 --> 00:14:27,006
and implement that.


429
00:14:27,006 --> 00:14:30,136
I'm going to go down here, add


430
00:14:30,136 --> 00:14:31,156
this helper function that


431
00:14:31,156 --> 00:14:33,206
presents a list of


432
00:14:33,206 --> 00:14:34,306
UIAlertActions.


433
00:14:34,926 --> 00:14:36,196
So far, as you can see, I've


434
00:14:36,196 --> 00:14:38,016
have Add to Favorites and Share.


435
00:14:38,756 --> 00:14:39,936
What I want to do is add a third


436
00:14:39,936 --> 00:14:40,476
action here.


437
00:14:40,836 --> 00:14:42,356
But before I do that, I'm going


438
00:14:42,356 --> 00:14:43,506
to make a new helper function.


439
00:14:43,506 --> 00:14:45,726
It's going to help me create the


440
00:14:45,726 --> 00:14:46,626
UIAlertAction.


441
00:14:47,066 --> 00:14:48,466
And of course, I'm just going to


442
00:14:48,466 --> 00:14:50,476
use it up here.


443
00:14:50,476 --> 00:14:51,736
Okay. So that should get my


444
00:14:51,736 --> 00:14:52,156
action.


445
00:14:52,696 --> 00:14:53,826
And now I want to draw your


446
00:14:53,826 --> 00:14:55,056
attention over to this


447
00:14:55,096 --> 00:14:56,366
currentContentMode instance


448
00:14:56,366 --> 00:14:56,796
variable.


449
00:14:57,526 --> 00:14:58,396
So what am I doing here?


450
00:14:58,816 --> 00:14:59,906
Well, I'm checking if the


451
00:14:59,906 --> 00:15:01,156
current content mode is equal to


452
00:15:01,156 --> 00:15:01,616
desktop.


453
00:15:02,246 --> 00:15:03,576
And if it's equal to desktop, I


454
00:15:03,886 --> 00:15:06,446
want the string to say "request


455
00:15:07,076 --> 00:15:09,616
mobile website" and vice versa.


456
00:15:09,616 --> 00:15:11,836
Okay, so that should make sense,


457
00:15:11,886 --> 00:15:13,176
but the question is "How do we


458
00:15:13,176 --> 00:15:14,196
keep track of


459
00:15:14,196 --> 00:15:15,006
currentContentMode?"


460
00:15:15,176 --> 00:15:16,126
How we know what it is?


461
00:15:17,046 --> 00:15:18,986
Well, I'm going to scroll down


462
00:15:18,986 --> 00:15:21,076
here where I've implemented my


463
00:15:21,076 --> 00:15:23,456
WKNavigation delegate, namely


464
00:15:23,456 --> 00:15:24,926
the didCommit navigation method,


465
00:15:25,646 --> 00:15:26,796
and what I'm going to do here is


466
00:15:27,346 --> 00:15:29,666
use a new API in iOS 13.


467
00:15:30,406 --> 00:15:32,716
So in iOS 13, the WKNavigation


468
00:15:32,966 --> 00:15:34,026
has a new property called


469
00:15:34,026 --> 00:15:35,366
effectiveContentMode.


470
00:15:36,046 --> 00:15:37,306
This is only ever going to be


471
00:15:37,516 --> 00:15:39,596
mobile or desktop and is perfect


472
00:15:39,596 --> 00:15:40,396
for my use case.


473
00:15:41,266 --> 00:15:42,496
What I can do is set


474
00:15:42,496 --> 00:15:43,976
currentContentMode equal to the


475
00:15:43,976 --> 00:15:45,446
navigation's effective content


476
00:15:45,446 --> 00:15:46,746
mode when I commit a navigation,


477
00:15:47,256 --> 00:15:48,076
and that should help me keep


478
00:15:48,076 --> 00:15:49,566
track of what content is


479
00:15:49,566 --> 00:15:50,386
currently being loaded.


480
00:15:51,436 --> 00:15:52,746
So now, I should be showing the


481
00:15:52,746 --> 00:15:53,226
right string.


482
00:15:54,556 --> 00:15:55,366
But I want to draw your


483
00:15:55,366 --> 00:15:56,626
attention back to this action


484
00:15:56,626 --> 00:15:56,986
handler.


485
00:15:58,146 --> 00:15:59,306
We still need a way to say,


486
00:15:59,456 --> 00:16:00,886
"Let's prefer to load mobile or


487
00:16:00,886 --> 00:16:02,456
desktop content for given host


488
00:16:02,456 --> 00:16:02,636
name."


489
00:16:03,476 --> 00:16:04,896
To do this, what we're going to


490
00:16:04,896 --> 00:16:07,226
do is save a dictionary of host


491
00:16:07,226 --> 00:16:10,346
names to content modes, be it


492
00:16:10,346 --> 00:16:12,216
mobile or desktop, whatever the


493
00:16:12,216 --> 00:16:13,396
user is tapping.


494
00:16:14,776 --> 00:16:15,936
So I'm going to implement the


495
00:16:15,936 --> 00:16:18,366
action handler now, and what I'm


496
00:16:18,366 --> 00:16:20,086
going to do here is simply get


497
00:16:20,086 --> 00:16:22,356
the host name and set that in


498
00:16:22,356 --> 00:16:23,536
the dictionary to either mobile


499
00:16:23,536 --> 00:16:24,156
or desktop.


500
00:16:24,826 --> 00:16:25,776
Then I'm going to tell the web


501
00:16:25,776 --> 00:16:26,436
view to reload.


502
00:16:27,406 --> 00:16:28,616
Okay, so this is where we


503
00:16:28,616 --> 00:16:29,246
properly are,


504
00:16:29,406 --> 00:16:30,866
contentModeToRequestForHost


505
00:16:30,996 --> 00:16:31,506
dictionary.


506
00:16:31,506 --> 00:16:32,716
But of course, we still have to


507
00:16:32,716 --> 00:16:33,336
use it somewhere.


508
00:16:34,036 --> 00:16:35,116
So I'm going to scroll down here


509
00:16:35,336 --> 00:16:36,446
back where I have the navigation


510
00:16:36,446 --> 00:16:38,526
delegate, and I'm going to add a


511
00:16:38,526 --> 00:16:39,146
new method.


512
00:16:40,216 --> 00:16:41,726
I'm going to implement, decide


513
00:16:41,726 --> 00:16:43,576
policy for navigationAction.


514
00:16:44,296 --> 00:16:45,586
This is very similar to the


515
00:16:45,786 --> 00:16:47,236
version you might be familiar


516
00:16:47,236 --> 00:16:49,376
with, except, in iOS 13, this


517
00:16:49,376 --> 00:16:50,786
one now contains web page


518
00:16:50,836 --> 00:16:52,186
preferences as a parameter.


519
00:16:52,186 --> 00:16:53,666
So this preferences right here.


520
00:16:54,196 --> 00:16:55,326
So what I can do with these


521
00:16:55,326 --> 00:16:57,166
preferences is set the preferred


522
00:16:57,166 --> 00:16:58,566
content mode equal to the


523
00:16:58,566 --> 00:16:59,836
content mode I would get by


524
00:16:59,836 --> 00:17:01,156
looking it up in my dictionary.


525
00:17:01,506 --> 00:17:03,166
And just as a refresher, this


526
00:17:03,166 --> 00:17:04,376
contentModeToRequestForHost


527
00:17:04,376 --> 00:17:06,266
dictionary is the same one that


528
00:17:06,266 --> 00:17:07,685
we populated up here in the


529
00:17:07,685 --> 00:17:09,925
action handler just a moment


530
00:17:09,925 --> 00:17:10,116
ago.


531
00:17:11,215 --> 00:17:13,496
Okay. Finally, last but not


532
00:17:13,496 --> 00:17:14,935
least, we have to remember to


533
00:17:15,286 --> 00:17:15,886
actually call our


534
00:17:15,886 --> 00:17:17,136
decisionHandler with these new


535
00:17:17,136 --> 00:17:18,756
preferences, and I should be


536
00:17:18,756 --> 00:17:19,146
good to go.


537
00:17:19,445 --> 00:17:20,866
So I'm going to recompile my


538
00:17:20,866 --> 00:17:22,866
app, and let's see how our


539
00:17:22,866 --> 00:17:23,586
feature works.


540
00:17:24,226 --> 00:17:26,556
I'm also going to switch it up


541
00:17:26,556 --> 00:17:26,935
this time.


542
00:17:27,435 --> 00:17:29,426
Instead of Google Docs, let's go


543
00:17:29,426 --> 00:17:30,456
to an image gallery.


544
00:17:31,476 --> 00:17:33,066
So this is the desktop version


545
00:17:33,066 --> 00:17:34,256
of Shiny Pics.


546
00:17:35,256 --> 00:17:36,646
And what I'm going to do here is


547
00:17:37,146 --> 00:17:39,436
use the Extras menu to request


548
00:17:39,436 --> 00:17:40,216
the mobile website.


549
00:17:41,776 --> 00:17:43,916
So this is what the mobile


550
00:17:43,916 --> 00:17:45,826
website looks like, the version


551
00:17:45,826 --> 00:17:46,676
of Shiny Pics.


552
00:17:47,646 --> 00:17:49,446
And, I mean, I can tell it's


553
00:17:49,446 --> 00:17:50,406
kind of the mobile version of


554
00:17:50,406 --> 00:17:51,486
the website, because it really


555
00:17:51,486 --> 00:17:52,556
looks like a page that was


556
00:17:52,556 --> 00:17:54,926
optimized for a phone, not so


557
00:17:54,926 --> 00:17:55,916
much my iPad Pro.


558
00:17:56,796 --> 00:17:58,186
I think on my iPad Pro, I


559
00:17:58,186 --> 00:17:59,216
actually prefer the desktop


560
00:17:59,256 --> 00:18:00,376
version of Shiny Pics.


561
00:18:01,006 --> 00:18:02,506
So I'm going to just tap Request


562
00:18:02,506 --> 00:18:04,486
Desktop Website, and I'm back to


563
00:18:04,486 --> 00:18:05,986
the desktop version of Shiny


564
00:18:05,986 --> 00:18:06,346
Pics.


565
00:18:07,286 --> 00:18:09,536
Okay, so to recap, I first


566
00:18:09,536 --> 00:18:10,806
ensured that my browser can load


567
00:18:10,806 --> 00:18:13,486
desktop content, and then I used


568
00:18:13,486 --> 00:18:15,536
new API to implement a Request


569
00:18:15,536 --> 00:18:16,806
Mobile or Desktop Website


570
00:18:16,856 --> 00:18:17,246
feature.


571
00:18:18,136 --> 00:18:19,916
But so far, we've only shown


572
00:18:19,916 --> 00:18:21,476
some new tools for you app


573
00:18:21,476 --> 00:18:22,576
developers in the crowd.


574
00:18:23,466 --> 00:18:25,406
Of course, we have news for web


575
00:18:25,406 --> 00:18:26,456
developers as well.


576
00:18:27,006 --> 00:18:28,076
And to tell you more about it,


577
00:18:28,556 --> 00:18:30,126
I'd like to invite Beth to the


578
00:18:30,126 --> 00:18:30,576
stage.


579
00:18:31,516 --> 00:18:35,406
[ Applause ]


580
00:18:35,906 --> 00:18:36,856
>> Thank you, Wenson.


581
00:18:37,416 --> 00:18:38,606
That was great.


582
00:18:39,706 --> 00:18:42,496
So what does all of this mean


583
00:18:42,586 --> 00:18:43,576
for web developers?


584
00:18:44,346 --> 00:18:45,666
If you have a responsive


585
00:18:45,666 --> 00:18:47,726
website, probably very little is


586
00:18:47,726 --> 00:18:48,326
different now.


587
00:18:48,626 --> 00:18:50,216
But we do have some new tools


588
00:18:50,216 --> 00:18:52,126
that you can use to maintain and


589
00:18:52,126 --> 00:18:53,586
improve your responsive website.


590
00:18:54,946 --> 00:18:56,836
I also have some best practices


591
00:18:56,836 --> 00:18:58,346
to share for web development on


592
00:18:58,496 --> 00:19:00,146
iPad so that whether your site


593
00:19:00,146 --> 00:19:02,016
is currently responsive or a


594
00:19:02,016 --> 00:19:03,436
big-screen website designed for


595
00:19:03,436 --> 00:19:05,396
desktop computers, you can make


596
00:19:05,396 --> 00:19:07,126
it a truly great experience on


597
00:19:08,066 --> 00:19:08,266
iPad.


598
00:19:08,996 --> 00:19:10,896
There are six new features I'd


599
00:19:10,896 --> 00:19:11,796
like to discuss.


600
00:19:12,376 --> 00:19:13,336
Some of these are purely


601
00:19:13,336 --> 00:19:14,896
developer features like pointer


602
00:19:14,896 --> 00:19:16,546
events, and some are more like


603
00:19:16,816 --> 00:19:18,266
new end user features that have


604
00:19:18,266 --> 00:19:19,766
developer implications like


605
00:19:19,766 --> 00:19:20,956
accelerated scrolling.


606
00:19:21,746 --> 00:19:23,556
Let's start with Pointer events.


607
00:19:24,926 --> 00:19:26,496
One of the biggest problems of


608
00:19:26,496 --> 00:19:28,196
loading desktop content on an


609
00:19:28,456 --> 00:19:30,596
iPad is reconciling mouse and


610
00:19:30,596 --> 00:19:31,286
touch input.


611
00:19:32,856 --> 00:19:34,406
Sometimes websites are written


612
00:19:34,406 --> 00:19:36,006
so that the small-screen version


613
00:19:36,236 --> 00:19:38,136
uses only touch events, and the


614
00:19:38,136 --> 00:19:39,756
big-screen version uses only


615
00:19:39,756 --> 00:19:40,446
mouse events.


616
00:19:41,086 --> 00:19:42,716
Our goal is to keep websites


617
00:19:42,716 --> 00:19:44,636
using only mouse events working


618
00:19:44,636 --> 00:19:46,576
as much as possible on iPad even


619
00:19:46,576 --> 00:19:47,766
though of course there's no


620
00:19:47,766 --> 00:19:47,996
mouse.


621
00:19:48,916 --> 00:19:51,136
So when a user taps, WebKit will


622
00:19:51,136 --> 00:19:52,686
send the mouse-down, mouse-up


623
00:19:52,686 --> 00:19:53,606
and click event for


624
00:19:53,606 --> 00:19:55,116
compatibility just like always.


625
00:19:55,806 --> 00:19:57,406
Most hover events get dispatched


626
00:19:57,406 --> 00:19:58,786
at that time too, and I'll dig


627
00:19:58,786 --> 00:19:59,716
into that more later.


628
00:20:01,386 --> 00:20:02,516
However, mouse move really


629
00:20:02,516 --> 00:20:04,286
doesn't make sense on iPad.


630
00:20:04,566 --> 00:20:06,326
The closest analogy is moving


631
00:20:06,326 --> 00:20:07,706
your finger on the screen, but


632
00:20:07,706 --> 00:20:08,796
that's how you scroll.


633
00:20:09,406 --> 00:20:12,116
So we did try to send mouse-move


634
00:20:12,116 --> 00:20:13,356
events at the same time that we


635
00:20:13,356 --> 00:20:15,096
send touch move, but it actually


636
00:20:15,096 --> 00:20:16,476
caused many more problems than


637
00:20:16,476 --> 00:20:18,486
it solved, so we decided not to


638
00:20:18,486 --> 00:20:18,996
do that.


639
00:20:18,996 --> 00:20:20,246
It conflicted with scrolling.


640
00:20:21,106 --> 00:20:23,046
If you need something like mouse


641
00:20:23,076 --> 00:20:24,506
move, then we have a great


642
00:20:24,506 --> 00:20:25,686
solution, and that's pointer


643
00:20:25,686 --> 00:20:26,156
events.


644
00:20:27,556 --> 00:20:28,696
We added support for pointer


645
00:20:28,696 --> 00:20:31,166
events in WebKit in iOS 13 and


646
00:20:31,256 --> 00:20:32,176
macOS Catalina.


647
00:20:32,846 --> 00:20:33,936
This is a web standard that


648
00:20:33,936 --> 00:20:35,556
provides a layer of abstraction


649
00:20:35,556 --> 00:20:37,276
between user input and your


650
00:20:37,276 --> 00:20:39,466
website, so the same API can be


651
00:20:39,466 --> 00:20:41,096
used for input that comes from a


652
00:20:41,096 --> 00:20:42,886
mouse, from touch, or from a


653
00:20:42,886 --> 00:20:43,356
pencil.


654
00:20:45,176 --> 00:20:46,246
Pointer Events are easy to


655
00:20:46,246 --> 00:20:46,656
adopt.


656
00:20:46,656 --> 00:20:48,136
If you have existing code to


657
00:20:48,136 --> 00:20:49,486
support mouse events on a


658
00:20:49,486 --> 00:20:50,976
desktop that looks like this,


659
00:20:51,406 --> 00:20:52,416
the code to support Pointer


660
00:20:52,416 --> 00:20:53,746
Events is really similar.


661
00:20:54,636 --> 00:20:55,596
Just the event name is


662
00:20:55,626 --> 00:20:55,946
different.


663
00:20:56,346 --> 00:20:57,976
But let me expand the context to


664
00:20:57,976 --> 00:20:59,596
show how I'll really use this.


665
00:20:59,596 --> 00:21:01,886
I'll actually use feature


666
00:21:01,886 --> 00:21:03,166
detection to determine if


667
00:21:03,216 --> 00:21:04,426
pointer events are supported.


668
00:21:04,426 --> 00:21:06,076
I'll keep the mouse-event


669
00:21:06,076 --> 00:21:07,696
listener in order to accommodate


670
00:21:07,696 --> 00:21:09,416
older clients only when pointer


671
00:21:09,416 --> 00:21:10,536
events aren't available.


672
00:21:11,756 --> 00:21:13,286
The PointerEvent object actually


673
00:21:13,286 --> 00:21:15,006
inherits from mouse event, so I


674
00:21:15,006 --> 00:21:16,206
literally don't have to change


675
00:21:16,206 --> 00:21:17,156
anything about my


676
00:21:17,286 --> 00:21:18,636
updateInteraction function to


677
00:21:18,636 --> 00:21:20,486
get this to work unless I want


678
00:21:20,486 --> 00:21:21,916
to take advantage of additional


679
00:21:21,966 --> 00:21:23,736
parameters on PointerEvent that


680
00:21:23,736 --> 00:21:25,096
are specific to mouse or pencil


681
00:21:25,096 --> 00:21:26,836
input, which is huge.


682
00:21:26,836 --> 00:21:28,946
It really is this easy to adopt


683
00:21:29,006 --> 00:21:30,456
pointer events.


684
00:21:31,456 --> 00:21:33,196
Pointer events can coexist with


685
00:21:33,196 --> 00:21:34,566
mouse and touch events.


686
00:21:34,606 --> 00:21:35,366
But be careful when


687
00:21:35,416 --> 00:21:37,026
intermingling event types that


688
00:21:37,026 --> 00:21:38,976
map to the same user action like


689
00:21:38,976 --> 00:21:39,266
here.


690
00:21:39,916 --> 00:21:41,416
There's no else clause, so both


691
00:21:41,416 --> 00:21:42,196
of these events will be


692
00:21:42,196 --> 00:21:44,156
registered, and my function will


693
00:21:44,156 --> 00:21:45,846
be called twice every time the


694
00:21:45,916 --> 00:21:47,296
pointer moves, which might mess


695
00:21:47,296 --> 00:21:48,266
up some of my state.


696
00:21:49,616 --> 00:21:51,526
Also, you don't need to register


697
00:21:51,526 --> 00:21:53,126
all three types of events if you


698
00:21:53,126 --> 00:21:54,766
want to distinguish between


699
00:21:54,766 --> 00:21:56,326
mouse and touch interaction on


700
00:21:56,326 --> 00:21:57,676
devices that support both,


701
00:21:58,096 --> 00:21:59,306
because pointer events allow you


702
00:21:59,306 --> 00:22:00,196
to know the difference.


703
00:22:01,576 --> 00:22:03,286
If you want to cancel default


704
00:22:03,286 --> 00:22:04,616
web browser behaviors like


705
00:22:04,686 --> 00:22:06,556
scrolling, then on Mac you'll


706
00:22:06,556 --> 00:22:08,246
use preventDefault just like you


707
00:22:08,246 --> 00:22:09,386
would for mouse events.


708
00:22:09,976 --> 00:22:12,836
On iOS, preventDefault won't


709
00:22:12,836 --> 00:22:14,896
lock all browser behaviors, so


710
00:22:14,896 --> 00:22:16,256
you should also use the


711
00:22:16,256 --> 00:22:18,086
touch-action CSS property.


712
00:22:18,086 --> 00:22:19,866
Touch-action is actually really


713
00:22:19,866 --> 00:22:20,486
awesome.


714
00:22:20,876 --> 00:22:22,046
It's easier than writing


715
00:22:22,046 --> 00:22:23,496
JavaScript and it allows you to


716
00:22:23,496 --> 00:22:25,136
make more granular decisions


717
00:22:25,136 --> 00:22:26,036
than preventDefault.


718
00:22:26,636 --> 00:22:28,636
Here I am using it to block all


719
00:22:28,636 --> 00:22:29,816
browser behaviors with the none


720
00:22:29,816 --> 00:22:31,566
value, but I could use it to,


721
00:22:31,566 --> 00:22:33,216
for example, prevent scrolling


722
00:22:33,356 --> 00:22:34,506
but still allow zooming.


723
00:22:35,436 --> 00:22:37,466
Touch-action also enables more


724
00:22:37,466 --> 00:22:38,786
efficient user interactions,


725
00:22:39,016 --> 00:22:40,576
because it's declarative, so


726
00:22:40,576 --> 00:22:42,446
using touch-action and pointer


727
00:22:42,446 --> 00:22:43,896
events on your website may


728
00:22:43,896 --> 00:22:45,146
actually be a performance


729
00:22:45,146 --> 00:22:45,506
improvement.


730
00:22:47,236 --> 00:22:49,716
So we have compatibility mouse


731
00:22:49,716 --> 00:22:51,366
events to keep desktop sites


732
00:22:51,366 --> 00:22:53,336
working, but that's a stopgap on


733
00:22:53,566 --> 00:22:54,896
the iOS, and the solution is


734
00:22:54,896 --> 00:22:55,466
pointer events.


735
00:22:56,076 --> 00:22:57,026
They're easy to adopt.


736
00:22:57,336 --> 00:22:58,576
They let you do everything you


737
00:22:58,576 --> 00:23:00,166
can do today with mouse or touch


738
00:23:00,166 --> 00:23:02,216
events, and they ensure quick


739
00:23:02,216 --> 00:23:03,636
responsive user interactions.


740
00:23:04,386 --> 00:23:05,866
This is a great solution to all


741
00:23:05,866 --> 00:23:07,506
of the problems that we face


742
00:23:07,506 --> 00:23:09,006
reconciling mouse and touch


743
00:23:09,006 --> 00:23:09,336
input.


744
00:23:11,276 --> 00:23:13,226
As I mentioned, WebKit also


745
00:23:13,226 --> 00:23:14,516
sends hover events for the sake


746
00:23:14,516 --> 00:23:15,376
of compatibility.


747
00:23:15,956 --> 00:23:17,706
Hover is tricky on touch screen


748
00:23:17,706 --> 00:23:19,386
since the hardware just doesn't


749
00:23:19,386 --> 00:23:20,496
support it.


750
00:23:20,586 --> 00:23:21,746
We've changed the way that mouse


751
00:23:21,746 --> 00:23:24,066
hover detection works in iOS 13


752
00:23:24,326 --> 00:23:26,846
to keep desktop sites that rely


753
00:23:26,846 --> 00:23:29,116
on it working well.


754
00:23:30,596 --> 00:23:32,306
If you tap on an element in a


755
00:23:32,306 --> 00:23:34,246
web page, the response to hover


756
00:23:34,486 --> 00:23:36,246
will perform that hover, and if


757
00:23:36,246 --> 00:23:37,786
a meaningful change has happened


758
00:23:37,786 --> 00:23:39,876
in a web page as a result of the


759
00:23:39,876 --> 00:23:41,196
hover, will stop there.


760
00:23:42,426 --> 00:23:44,426
The user can tap a second time


761
00:23:44,426 --> 00:23:47,416
if they wanted to click.


762
00:23:47,586 --> 00:23:50,286
In iOS 13, WebKit detects many


763
00:23:50,286 --> 00:23:52,046
more changes as meaningful than


764
00:23:52,216 --> 00:23:52,796
ever before.


765
00:23:53,206 --> 00:23:54,816
This adds critical functionality


766
00:23:54,816 --> 00:23:56,626
to many desktop websites that


767
00:23:56,626 --> 00:23:58,596
rely on hover for essential


768
00:23:58,596 --> 00:24:00,466
parts of the web page like this


769
00:24:00,466 --> 00:24:01,676
web page which uses it for


770
00:24:01,676 --> 00:24:02,086
menus.


771
00:24:02,836 --> 00:24:05,186
We're finding that this is


772
00:24:05,186 --> 00:24:06,626
working really well, but


773
00:24:06,626 --> 00:24:07,656
fundamentally this is a


774
00:24:07,656 --> 00:24:08,746
heuristic where the browser


775
00:24:08,746 --> 00:24:10,246
engine is trying to interpret


776
00:24:10,246 --> 00:24:11,716
design intent, so it won't


777
00:24:11,916 --> 00:24:12,966
always be perfect.


778
00:24:13,796 --> 00:24:15,116
We have some best practices to


779
00:24:15,116 --> 00:24:16,686
keep in mind when you're using


780
00:24:16,686 --> 00:24:17,096
hover.


781
00:24:18,486 --> 00:24:20,156
First, you should always provide


782
00:24:20,246 --> 00:24:22,576
another way to access meaningful


783
00:24:22,576 --> 00:24:24,346
content just in case WebKit


784
00:24:24,346 --> 00:24:25,186
misses something.


785
00:24:25,606 --> 00:24:26,406
This is important for


786
00:24:26,476 --> 00:24:27,536
accessibility too.


787
00:24:27,816 --> 00:24:29,286
Wenson will dig into this later


788
00:24:29,346 --> 00:24:31,226
with the demo.


789
00:24:31,636 --> 00:24:33,216
You should also avoid forcing


790
00:24:33,216 --> 00:24:35,026
the user to tap twice for the


791
00:24:35,026 --> 00:24:36,486
most common interactions.


792
00:24:37,346 --> 00:24:38,866
Remember, if WebKit detects that


793
00:24:38,866 --> 00:24:40,556
a meaningful change happened on


794
00:24:40,556 --> 00:24:42,106
hover, that means that the user


795
00:24:42,106 --> 00:24:43,876
has to tap a second time if they


796
00:24:43,876 --> 00:24:44,956
actually wanted to click.


797
00:24:45,416 --> 00:24:46,766
So if you have an element on


798
00:24:46,766 --> 00:24:48,576
your page where you think users


799
00:24:48,576 --> 00:24:50,066
will far more often want to


800
00:24:50,066 --> 00:24:51,406
perform that click than they


801
00:24:51,406 --> 00:24:53,266
will want to see or interact


802
00:24:53,266 --> 00:24:55,136
with the hover content, then


803
00:24:55,136 --> 00:24:56,776
consider making some changes to


804
00:24:56,776 --> 00:24:58,706
avoid that two-tap speed bump


805
00:24:58,746 --> 00:25:00,146
that you get from using hover on


806
00:25:00,146 --> 00:25:01,056
clickable elements.


807
00:25:02,556 --> 00:25:04,526
Speaking of efficiency, keep


808
00:25:04,526 --> 00:25:05,476
hover snappy.


809
00:25:05,766 --> 00:25:07,556
If you start timers in response


810
00:25:07,556 --> 00:25:09,366
to hover, WebKit will wait for


811
00:25:09,366 --> 00:25:11,176
those timers to fire in case


812
00:25:11,176 --> 00:25:12,936
meaningful content is added to


813
00:25:12,936 --> 00:25:14,536
the web page on a delay.


814
00:25:15,196 --> 00:25:16,706
In a worst-case scenario,


815
00:25:17,366 --> 00:25:19,386
something starts the timer, but


816
00:25:19,386 --> 00:25:21,116
then nothing meaningful happens,


817
00:25:21,286 --> 00:25:22,766
so WebKit automatically performs


818
00:25:22,766 --> 00:25:23,176
the click.


819
00:25:23,506 --> 00:25:24,676
But in the meantime, waited


820
00:25:24,676 --> 00:25:26,296
several 100 milliseconds longer


821
00:25:26,296 --> 00:25:27,676
than usual, and the tap feels


822
00:25:27,676 --> 00:25:28,606
slow to the user.


823
00:25:29,236 --> 00:25:32,596
We believe that we've made mouse


824
00:25:32,596 --> 00:25:34,086
hover detection better than ever


825
00:25:34,086 --> 00:25:34,866
on iOS.


826
00:25:35,186 --> 00:25:36,616
Still, we suggest that you use


827
00:25:36,616 --> 00:25:38,036
it only as progressive


828
00:25:38,036 --> 00:25:39,476
enhancement and make sure your


829
00:25:39,526 --> 00:25:41,006
site works great even without


830
00:25:41,006 --> 00:25:41,326
hover.


831
00:25:41,856 --> 00:25:45,666
WebKit on iOS has always had


832
00:25:45,666 --> 00:25:47,136
hardware accelerated scrolling


833
00:25:47,136 --> 00:25:48,676
for the mainframe, but I'm


834
00:25:48,676 --> 00:25:50,616
delighted to say that WebKit now


835
00:25:50,616 --> 00:25:51,806
has hardware accelerated


836
00:25:51,806 --> 00:25:53,636
scrolling everywhere, meaning


837
00:25:53,636 --> 00:25:55,136
that subframes and overflow


838
00:25:55,136 --> 00:25:57,286
scroll regions now have buttery


839
00:25:57,286 --> 00:25:59,096
smooth fast scrolling out of the


840
00:25:59,096 --> 00:26:00,616
box just like the mainframe.


841
00:26:01,516 --> 00:26:06,836
[ Applause ]


842
00:26:07,336 --> 00:26:07,916
That's right.


843
00:26:07,916 --> 00:26:09,346
Even subframes.


844
00:26:09,616 --> 00:26:11,676
On older versions of iOS, WebKit


845
00:26:11,676 --> 00:26:13,336
would force subframes to be the


846
00:26:13,336 --> 00:26:15,266
full size of their contents, so


847
00:26:15,266 --> 00:26:16,526
they didn't actually scroll


848
00:26:16,526 --> 00:26:18,106
individually and could end up


849
00:26:18,106 --> 00:26:19,516
being much larger than you


850
00:26:19,516 --> 00:26:21,336
defined them to be in your code.


851
00:26:21,766 --> 00:26:23,706
Now on iPad, frames will be the


852
00:26:23,776 --> 00:26:25,356
size that you specify, and


853
00:26:25,546 --> 00:26:27,126
they'll be able to scroll just


854
00:26:27,126 --> 00:26:28,566
like you expect from a desktop


855
00:26:28,566 --> 00:26:29,026
browser.


856
00:26:30,216 --> 00:26:32,286
This has been such a commonly


857
00:26:32,286 --> 00:26:34,076
requested feature that there


858
00:26:34,076 --> 00:26:35,706
were two popular ways to work


859
00:26:35,706 --> 00:26:37,476
around the fact that WebKit did


860
00:26:37,476 --> 00:26:38,856
not have support for this by


861
00:26:38,856 --> 00:26:39,286
default.


862
00:26:39,636 --> 00:26:42,056
First, we added a CSS property


863
00:26:42,306 --> 00:26:43,836
-webkit-overflow-scrolling:


864
00:26:43,906 --> 00:26:45,926
touch; that developers could opt


865
00:26:45,926 --> 00:26:47,506
into when fast scrolling made


866
00:26:47,506 --> 00:26:48,246
sense for them.


867
00:26:49,076 --> 00:26:51,056
We never made this the default,


868
00:26:51,056 --> 00:26:51,896
because it creates a CSS


869
00:26:51,896 --> 00:26:54,406
stacking context which affects


870
00:26:54,406 --> 00:26:55,896
the front to back layering of


871
00:26:55,896 --> 00:26:57,176
elements on your page.


872
00:26:57,586 --> 00:26:59,696
And second, some of you built or


873
00:26:59,696 --> 00:27:01,806
used JavaScript libraries that


874
00:27:01,806 --> 00:27:03,366
would use touch events to


875
00:27:03,366 --> 00:27:04,736
emulate fast scrolling.


876
00:27:05,406 --> 00:27:06,866
Neither of those techniques is


877
00:27:06,866 --> 00:27:07,526
needed now.


878
00:27:07,726 --> 00:27:09,236
And in fact, WebKit overflow


879
00:27:09,236 --> 00:27:13,166
scrolling touch a no-op on iPad.


880
00:27:13,376 --> 00:27:15,606
So you should test how hardware


881
00:27:15,606 --> 00:27:17,386
accelerated scrolling everywhere


882
00:27:17,386 --> 00:27:19,266
affects your content, and if you


883
00:27:19,266 --> 00:27:20,546
were using a technique to work


884
00:27:20,546 --> 00:27:21,836
around the absence of this


885
00:27:21,836 --> 00:27:23,526
feature in the past, you may not


886
00:27:23,526 --> 00:27:24,186
need it anymore.


887
00:27:24,416 --> 00:27:27,746
Next, I want to tell you about


888
00:27:27,746 --> 00:27:29,576
our new automatic viewport and


889
00:27:29,576 --> 00:27:31,046
text sizing behaviors.


890
00:27:31,776 --> 00:27:34,246
We developed our new automatic


891
00:27:34,246 --> 00:27:35,816
behaviors because web pages


892
00:27:35,816 --> 00:27:37,766
should fit with legible text on


893
00:27:38,626 --> 00:27:38,746
iPad.


894
00:27:39,076 --> 00:27:40,636
To elaborate, websites that


895
00:27:40,636 --> 00:27:42,036
weren't necessarily built for


896
00:27:42,256 --> 00:27:44,136
iPad should display to fit on


897
00:27:44,326 --> 00:27:45,656
iPad, meaning that they


898
00:27:45,656 --> 00:27:47,286
shouldn't scroll horizontally


899
00:27:47,286 --> 00:27:48,756
unless they were designed to do


900
00:27:48,756 --> 00:27:51,586
so, and all text should be


901
00:27:51,586 --> 00:27:53,506
comfortably legible for most


902
00:27:53,506 --> 00:27:54,656
people without additional


903
00:27:54,656 --> 00:27:55,076
zooming.


904
00:27:56,536 --> 00:27:58,396
We need automatic behaviors to


905
00:27:58,396 --> 00:27:59,906
achieve these goals, because


906
00:27:59,936 --> 00:28:01,466
some desktop websites are built


907
00:28:01,466 --> 00:28:02,956
in a fixed width that is wider


908
00:28:02,956 --> 00:28:03,866
than an iPad.


909
00:28:05,566 --> 00:28:07,056
We found that a number of sites


910
00:28:07,056 --> 00:28:08,506
that are very wide like this one


911
00:28:08,806 --> 00:28:10,966
also declare incorrectly to be


912
00:28:10,966 --> 00:28:12,416
responsive in the viewport meta


913
00:28:12,476 --> 00:28:13,796
tag, which is kind of


914
00:28:13,796 --> 00:28:14,296
unfortunate.


915
00:28:14,296 --> 00:28:16,136
Let me step back and explain


916
00:28:16,136 --> 00:28:17,666
what I mean by that.


917
00:28:18,296 --> 00:28:19,686
The viewport meta tag was


918
00:28:19,686 --> 00:28:21,306
originally created to address


919
00:28:21,516 --> 00:28:22,886
problems that can result from


920
00:28:22,886 --> 00:28:24,666
displaying content that was


921
00:28:24,786 --> 00:28:26,286
built for a desktop computer on


922
00:28:26,286 --> 00:28:27,036
a small screen.


923
00:28:27,436 --> 00:28:28,846
So it's perfect for this, right?


924
00:28:29,706 --> 00:28:31,476
Well, this particular viewport


925
00:28:31,476 --> 00:28:33,016
value is meant as a promise to


926
00:28:33,016 --> 00:28:34,416
the browser engine that the


927
00:28:34,416 --> 00:28:35,446
website was designed


928
00:28:35,446 --> 00:28:37,006
responsively, meaning that it


929
00:28:37,006 --> 00:28:39,256
will adaptively reflow as the


930
00:28:39,256 --> 00:28:40,446
window size changes.


931
00:28:41,426 --> 00:28:43,326
In previous versions of iOS, we


932
00:28:43,326 --> 00:28:44,416
would typically take this


933
00:28:44,416 --> 00:28:46,276
promise at face value, and we


934
00:28:46,276 --> 00:28:47,776
wouldn't apply any automatic


935
00:28:47,776 --> 00:28:49,786
viewport adjustments on websites


936
00:28:49,786 --> 00:28:51,336
with a meta tag of width equals


937
00:28:51,336 --> 00:28:52,816
device width and initial scale


938
00:28:52,816 --> 00:28:53,436
equals 1.


939
00:28:54,856 --> 00:28:56,546
But that led to a bad experience


940
00:28:56,546 --> 00:28:58,016
on many desktop websites on


941
00:28:58,216 --> 00:28:58,526
iPad.


942
00:28:59,166 --> 00:29:00,546
This site should be able to fit,


943
00:29:00,546 --> 00:29:01,136
but it didn't.


944
00:29:01,696 --> 00:29:05,906
So new in iPadOS, WebKit will


945
00:29:05,906 --> 00:29:07,496
ignore the meta tag if it


946
00:29:07,496 --> 00:29:09,316
promises to be responsive but


947
00:29:09,316 --> 00:29:10,646
then actually lays out to the


948
00:29:10,646 --> 00:29:11,886
width that is greater than the


949
00:29:11,886 --> 00:29:12,466
device width.


950
00:29:13,256 --> 00:29:14,446
We found that this results in a


951
00:29:14,446 --> 00:29:16,086
much better experience overall.


952
00:29:17,466 --> 00:29:18,836
If your website is designed to


953
00:29:18,836 --> 00:29:20,646
scroll horizontally and is


954
00:29:20,646 --> 00:29:22,236
incorrectly being scaled down,


955
00:29:22,466 --> 00:29:23,496
you have an easy fix.


956
00:29:24,686 --> 00:29:25,836
You just need to add one more


957
00:29:25,836 --> 00:29:27,376
value to your viewport meta tag,


958
00:29:27,716 --> 00:29:28,966
shrink-to-fit=no.


959
00:29:29,436 --> 00:29:30,806
This is not a new value.


960
00:29:31,016 --> 00:29:33,076
We added this in iOS 9 because


961
00:29:33,076 --> 00:29:34,556
we ran into the same problem


962
00:29:34,556 --> 00:29:35,876
with websites in Split View or


963
00:29:35,876 --> 00:29:36,566
Slide Over.


964
00:29:37,136 --> 00:29:38,976
So shrink-to-fit=no will now


965
00:29:38,976 --> 00:29:40,996
prevent automatic shrinking for


966
00:29:41,136 --> 00:29:43,066
websites in Split View, Slide


967
00:29:43,066 --> 00:29:44,816
Over and for wide desktop


968
00:29:44,816 --> 00:29:45,266
websites.


969
00:29:47,136 --> 00:29:48,436
You may have noticed that even


970
00:29:48,436 --> 00:29:50,016
though the boxes on this website


971
00:29:50,426 --> 00:29:51,576
shrank down to fit in the


972
00:29:51,576 --> 00:29:53,166
viewport, the text in the header


973
00:29:53,166 --> 00:29:54,866
actually got bigger, and that's


974
00:29:55,056 --> 00:29:56,256
because we'll automatically


975
00:29:56,256 --> 00:29:57,636
adjust the text size on web


976
00:29:57,636 --> 00:29:59,796
pages that have been shrunk down


977
00:29:59,796 --> 00:30:01,546
in this manner in order to keep


978
00:30:01,606 --> 00:30:02,826
the text legible.


979
00:30:04,116 --> 00:30:05,616
If you want to control the


980
00:30:05,616 --> 00:30:07,426
viewport and text size on your


981
00:30:07,426 --> 00:30:09,596
website, the very best thing you


982
00:30:09,596 --> 00:30:11,126
can do is to adopt responsive


983
00:30:11,126 --> 00:30:12,596
design and ensure that your


984
00:30:12,596 --> 00:30:14,676
content adaptively lays out to


985
00:30:14,676 --> 00:30:15,846
fit any window size.


986
00:30:16,476 --> 00:30:17,866
Responsive design is a dense


987
00:30:17,866 --> 00:30:19,456
topic, so I won't attempt to


988
00:30:19,456 --> 00:30:21,156
give a tutorial here, but there


989
00:30:21,156 --> 00:30:22,636
are lots of great ones online.


990
00:30:23,246 --> 00:30:26,526
So in summary, WebKit has new


991
00:30:26,526 --> 00:30:27,706
viewport and text sizing


992
00:30:27,706 --> 00:30:29,576
behaviors that make web pages


993
00:30:29,656 --> 00:30:30,816
fit with legible text.


994
00:30:31,696 --> 00:30:32,886
The best way to control this


995
00:30:32,886 --> 00:30:34,476
from your end is to adopt


996
00:30:34,476 --> 00:30:36,296
responsive design, and if you


997
00:30:36,296 --> 00:30:37,426
have a website that is meant to


998
00:30:37,426 --> 00:30:39,176
scroll horizontally, then you


999
00:30:39,176 --> 00:30:40,586
can get everything right with


1000
00:30:40,586 --> 00:30:41,316
the viewport meta tag.


1001
00:30:41,316 --> 00:30:45,336
Next, I want to tell you about


1002
00:30:45,336 --> 00:30:46,966
the visual viewport API.


1003
00:30:48,076 --> 00:30:49,336
To do that, I first want to make


1004
00:30:49,336 --> 00:30:51,096
a distinction between the visual


1005
00:30:51,096 --> 00:30:52,246
viewport and the layout


1006
00:30:52,306 --> 00:30:52,766
viewport.


1007
00:30:53,386 --> 00:30:54,646
We were just talking about our


1008
00:30:54,646 --> 00:30:56,436
automatic viewport sizing


1009
00:30:56,436 --> 00:30:58,326
behaviors and the viewport meta


1010
00:30:58,406 --> 00:30:58,706
tag.


1011
00:30:59,056 --> 00:31:00,366
Those are used to define the


1012
00:31:00,366 --> 00:31:01,986
layout viewport along with the


1013
00:31:01,986 --> 00:31:03,136
screen and window size.


1014
00:31:04,626 --> 00:31:06,126
The window size can change when


1015
00:31:06,126 --> 00:31:08,036
the user enters or adjusts split


1016
00:31:08,036 --> 00:31:08,456
screen.


1017
00:31:08,826 --> 00:31:10,646
Responsively designed websites


1018
00:31:10,646 --> 00:31:12,486
will react to that change using


1019
00:31:12,486 --> 00:31:14,276
media queries or perhaps by


1020
00:31:14,276 --> 00:31:15,526
listening to the resize event


1021
00:31:15,526 --> 00:31:16,276
and JavaScript.


1022
00:31:16,986 --> 00:31:18,766
Max and min with media queries


1023
00:31:18,926 --> 00:31:20,136
will be assessed whenever the


1024
00:31:20,136 --> 00:31:22,106
layout viewport changes, and the


1025
00:31:22,106 --> 00:31:23,476
resize event will fire then as


1026
00:31:23,476 --> 00:31:23,716
well.


1027
00:31:24,066 --> 00:31:25,526
So if the user rotates the


1028
00:31:25,526 --> 00:31:27,366
device, the layout viewport


1029
00:31:27,366 --> 00:31:29,056
changes again, and your content


1030
00:31:29,056 --> 00:31:30,066
can react to it with one of


1031
00:31:30,066 --> 00:31:30,706
these techniques.


1032
00:31:32,286 --> 00:31:33,376
But then there's the keyboard.


1033
00:31:34,136 --> 00:31:35,146
The keyboard presents us an


1034
00:31:35,146 --> 00:31:37,016
overlay, so it doesn't change


1035
00:31:37,016 --> 00:31:38,856
the layout viewport, and media


1036
00:31:38,856 --> 00:31:40,186
queries and the resize event


1037
00:31:40,276 --> 00:31:40,896
don't react.


1038
00:31:40,896 --> 00:31:43,816
So if the user taps on the name


1039
00:31:43,816 --> 00:31:46,576
field here, the keyboard comes


1040
00:31:46,576 --> 00:31:46,876
up.


1041
00:31:46,876 --> 00:31:48,526
And clearly, that's affected


1042
00:31:48,526 --> 00:31:49,976
what's visually onscreen.


1043
00:31:50,376 --> 00:31:51,446
That's what defined by the


1044
00:31:51,446 --> 00:31:52,436
visual viewport.


1045
00:31:53,376 --> 00:31:54,966
The layout viewport here is the


1046
00:31:54,966 --> 00:31:57,086
normal window size, and the


1047
00:31:57,086 --> 00:31:58,826
visual viewport is the section


1048
00:31:58,896 --> 00:32:00,286
that is currently visible and


1049
00:32:00,356 --> 00:32:01,216
unobscured.


1050
00:32:02,206 --> 00:32:03,476
We've heard for a long time that


1051
00:32:03,476 --> 00:32:04,806
developers want to react to


1052
00:32:04,856 --> 00:32:06,676
changes in the visual viewport.


1053
00:32:07,186 --> 00:32:08,526
In this sample web page, for


1054
00:32:08,526 --> 00:32:10,326
example, the Donate button is


1055
00:32:10,326 --> 00:32:11,756
now obscured, and the site would


1056
00:32:11,756 --> 00:32:13,206
be more useable if it always


1057
00:32:13,206 --> 00:32:13,996
stayed onscreen.


1058
00:32:14,926 --> 00:32:16,996
In iOS 13, we can finally


1059
00:32:16,996 --> 00:32:18,936
address this problem with a W3C


1060
00:32:18,936 --> 00:32:20,756
standard visual viewport API.


1061
00:32:21,536 --> 00:32:24,686
You can use this API to monitor


1062
00:32:24,686 --> 00:32:25,946
the resize of the visual


1063
00:32:25,946 --> 00:32:26,396
viewport.


1064
00:32:26,776 --> 00:32:27,956
This event will fire when the


1065
00:32:27,956 --> 00:32:29,736
keyboard goes on or off-screen.


1066
00:32:29,736 --> 00:32:31,866
And it will also fire in Safari


1067
00:32:32,076 --> 00:32:33,226
as the smart search field


1068
00:32:33,226 --> 00:32:34,606
collapses while scrolling.


1069
00:32:34,606 --> 00:32:38,196
Now I can keep the Donate button


1070
00:32:38,196 --> 00:32:38,686
visible.


1071
00:32:38,686 --> 00:32:42,626
We think the visual viewport API


1072
00:32:42,906 --> 00:32:44,276
is a great tool for taking


1073
00:32:44,276 --> 00:32:45,946
advantage of the big iPad


1074
00:32:45,946 --> 00:32:46,376
screen.


1075
00:32:46,946 --> 00:32:49,786
Let's talk about streaming


1076
00:32:49,786 --> 00:32:50,206
video.


1077
00:32:50,796 --> 00:32:52,496
Those of you who offer streaming


1078
00:32:52,496 --> 00:32:54,106
premium video content in web


1079
00:32:54,136 --> 00:32:56,496
browsers probably already know


1080
00:32:56,826 --> 00:32:59,716
that HTTP Live Streaming or HLS


1081
00:33:00,056 --> 00:33:03,736
is the best way to do it.


1082
00:33:03,736 --> 00:33:05,976
HLS is available on iPhone, iPad


1083
00:33:05,976 --> 00:33:06,456
and Mac.


1084
00:33:06,456 --> 00:33:08,526
It's an easy solution to a hard


1085
00:33:08,526 --> 00:33:10,036
problem, because it does all of


1086
00:33:10,036 --> 00:33:11,056
the heavy lifting for you.


1087
00:33:11,606 --> 00:33:13,396
It works well with CDNs, and you


1088
00:33:13,396 --> 00:33:14,416
get things like AirPlay


1089
00:33:14,416 --> 00:33:15,536
integration for free.


1090
00:33:16,746 --> 00:33:18,476
However, some desktop content


1091
00:33:18,476 --> 00:33:20,116
uses Media Source Extensions or


1092
00:33:20,346 --> 00:33:21,076
MSE instead.


1093
00:33:22,136 --> 00:33:24,256
MSE is an API that enables video


1094
00:33:24,256 --> 00:33:26,356
providers to have explicit


1095
00:33:26,356 --> 00:33:27,616
control of the data that is


1096
00:33:27,616 --> 00:33:28,476
served to the user.


1097
00:33:28,566 --> 00:33:30,306
For example, you can manually


1098
00:33:30,306 --> 00:33:31,976
upgrade or downgrade video


1099
00:33:31,976 --> 00:33:33,496
quality in response to bandwidth


1100
00:33:33,496 --> 00:33:34,016
changes.


1101
00:33:34,766 --> 00:33:36,076
If you have existing content


1102
00:33:36,076 --> 00:33:38,116
that uses MSE, I have great news


1103
00:33:38,116 --> 00:33:38,406
for you.


1104
00:33:39,336 --> 00:33:40,946
MSE is available for desktop


1105
00:33:40,946 --> 00:33:42,896
sites on iPad for the first time


1106
00:33:42,936 --> 00:33:43,686
in iPadOS.


1107
00:33:44,816 --> 00:33:46,496
If you have an existing engine


1108
00:33:46,796 --> 00:33:48,776
that uses MSE for your desktop


1109
00:33:48,776 --> 00:33:50,976
site, it just works on iPad.


1110
00:33:50,976 --> 00:33:52,116
And if you use a JavaScript


1111
00:33:52,116 --> 00:33:53,836
library that implements an MSE


1112
00:33:53,836 --> 00:33:57,136
engine, that will work too.


1113
00:33:57,366 --> 00:33:59,056
With both HLS and MSE as


1114
00:33:59,056 --> 00:34:00,966
options, streaming video is more


1115
00:34:00,966 --> 00:34:03,166
powerful than ever in Safari on


1116
00:34:03,666 --> 00:34:03,806
iPad.


1117
00:34:04,736 --> 00:34:06,476
These new features should help


1118
00:34:06,476 --> 00:34:08,196
you make your web content sing


1119
00:34:08,196 --> 00:34:08,866
on iPad.


1120
00:34:09,126 --> 00:34:10,235
I talked about some best


1121
00:34:10,235 --> 00:34:12,255
practices along the way, but I


1122
00:34:12,255 --> 00:34:13,426
have a few more to share.


1123
00:34:13,996 --> 00:34:16,926
Best practices help us zoom out.


1124
00:34:17,206 --> 00:34:18,396
They guide this platform


1125
00:34:18,396 --> 00:34:19,926
transition, but they take us


1126
00:34:19,926 --> 00:34:21,456
into the future as our platforms


1127
00:34:21,726 --> 00:34:23,126
continue to grow and evolve.


1128
00:34:24,815 --> 00:34:26,996
First and most importantly, we


1129
00:34:26,996 --> 00:34:28,065
believe that you should build


1130
00:34:28,226 --> 00:34:30,456
one responsive website instead


1131
00:34:30,456 --> 00:34:32,446
of building parallel desktop and


1132
00:34:32,446 --> 00:34:33,216
mobile sites.


1133
00:34:34,076 --> 00:34:35,516
I know this is easier said than


1134
00:34:35,516 --> 00:34:37,166
done, but we really believe in


1135
00:34:37,166 --> 00:34:38,466
using this suite of responsive


1136
00:34:38,466 --> 00:34:40,406
design techniques to build a


1137
00:34:40,406 --> 00:34:41,226
single site.


1138
00:34:41,926 --> 00:34:42,806
And you should use feature


1139
00:34:42,806 --> 00:34:44,766
detection instead of user agent


1140
00:34:44,766 --> 00:34:45,186
sniffing.


1141
00:34:45,186 --> 00:34:47,835
In the past, some developers


1142
00:34:47,835 --> 00:34:49,446
have wanted to know the user


1143
00:34:49,446 --> 00:34:51,206
agent to specifically identify


1144
00:34:51,206 --> 00:34:53,456
iPad, but our new desktop user


1145
00:34:53,456 --> 00:34:55,346
agent on iPad will prevent you


1146
00:34:55,346 --> 00:34:55,976
from doing this.


1147
00:34:55,976 --> 00:34:57,966
I want to convince you that you


1148
00:34:57,966 --> 00:34:59,336
don't need to know your content


1149
00:34:59,336 --> 00:35:00,256
is on an iPad.


1150
00:35:00,496 --> 00:35:01,706
You just need to use feature


1151
00:35:01,706 --> 00:35:02,296
detection.


1152
00:35:03,766 --> 00:35:05,306
And the reason is that iPad is a


1153
00:35:05,306 --> 00:35:05,986
chameleon.


1154
00:35:06,446 --> 00:35:07,726
With all of the new content mode


1155
00:35:07,726 --> 00:35:09,446
APIs that Charles told you


1156
00:35:09,446 --> 00:35:11,046
about, your website could be in


1157
00:35:11,046 --> 00:35:12,766
app that is in desktop mode or


1158
00:35:12,766 --> 00:35:13,536
in mobile mode.


1159
00:35:14,506 --> 00:35:15,686
Your web content could be in a


1160
00:35:15,686 --> 00:35:17,616
Split View on either the mobile


1161
00:35:17,616 --> 00:35:19,306
side or the desktop side.


1162
00:35:19,686 --> 00:35:21,046
So knowing that your content is


1163
00:35:21,046 --> 00:35:23,376
on an iPad specifically is not


1164
00:35:23,376 --> 00:35:24,496
really that useful.


1165
00:35:25,476 --> 00:35:26,636
And the confusion with user


1166
00:35:26,636 --> 00:35:28,546
agent doesn't end with iPad.


1167
00:35:28,546 --> 00:35:29,636
Anything is possible.


1168
00:35:29,636 --> 00:35:31,636
We now have UIKit apps running


1169
00:35:31,636 --> 00:35:34,246
on the Mac.


1170
00:35:34,506 --> 00:35:36,406
Really, if you step back, we


1171
00:35:36,406 --> 00:35:38,636
have web content on Apple Watch,


1172
00:35:38,816 --> 00:35:41,286
on iPhone, on iPad and all of


1173
00:35:41,286 --> 00:35:42,646
the different content modes and


1174
00:35:42,646 --> 00:35:44,166
configurations we already


1175
00:35:44,236 --> 00:35:46,596
covered, web content and UIKit


1176
00:35:46,596 --> 00:35:48,606
apps on Mac, web content on


1177
00:35:48,696 --> 00:35:49,756
AppKit apps on Mac.


1178
00:35:50,516 --> 00:35:51,686
Targeting each one of these


1179
00:35:51,686 --> 00:35:53,266
configurations and handing it


1180
00:35:53,556 --> 00:35:55,236
big-screen site or small-screen


1181
00:35:55,236 --> 00:35:57,256
site is going to be so much more


1182
00:35:57,256 --> 00:35:59,166
limiting, more fragile and less


1183
00:35:59,256 --> 00:36:01,086
future proof than using feature


1184
00:36:01,086 --> 00:36:02,506
detection to see what each


1185
00:36:02,636 --> 00:36:04,246
configuration is capable of.


1186
00:36:05,646 --> 00:36:07,046
We're going to stand up here and


1187
00:36:07,046 --> 00:36:08,546
tell you that responsive design


1188
00:36:08,756 --> 00:36:10,376
is best practices for whatever


1189
00:36:10,376 --> 00:36:12,136
the hot new product is year


1190
00:36:12,136 --> 00:36:13,796
after year after year until


1191
00:36:13,796 --> 00:36:15,296
finally we don't have to because


1192
00:36:15,296 --> 00:36:15,976
it's the norm.


1193
00:36:17,066 --> 00:36:18,656
Server-delivered content that's


1194
00:36:18,746 --> 00:36:20,826
agnostic to who asked for it but


1195
00:36:20,826 --> 00:36:22,656
adapted with responsive design


1196
00:36:22,986 --> 00:36:25,436
is awesome on every device.


1197
00:36:26,626 --> 00:36:28,806
And this device landscape has


1198
00:36:28,806 --> 00:36:29,786
not been shrinking.


1199
00:36:32,716 --> 00:36:34,156
We know this takes a lot of


1200
00:36:34,156 --> 00:36:35,836
work, but we also know it's


1201
00:36:35,836 --> 00:36:36,926
worth it.


1202
00:36:38,756 --> 00:36:40,116
When we say iPad has


1203
00:36:40,116 --> 00:36:42,056
desktop-class browsing, we mean


1204
00:36:42,056 --> 00:36:43,986
modern desktop-class browsing,


1205
00:36:43,986 --> 00:36:45,426
and that means no plug-ins.


1206
00:36:45,886 --> 00:36:47,376
We've never had plug-ins on iOS,


1207
00:36:47,636 --> 00:36:49,226
and we don't intend to add them


1208
00:36:49,226 --> 00:36:49,496
now.


1209
00:36:50,076 --> 00:36:51,616
Even on Mac, if you go out of


1210
00:36:51,616 --> 00:36:53,416
your way to install Flash, it's


1211
00:36:53,416 --> 00:36:55,126
still off by default, and we're


1212
00:36:55,126 --> 00:36:56,436
dropping support for it in


1213
00:36:56,436 --> 00:36:58,686
Safari altogether in 2020.


1214
00:36:59,566 --> 00:37:01,266
So if you still haven't migrated


1215
00:37:01,506 --> 00:37:03,806
your old video or games or


1216
00:37:03,806 --> 00:37:05,766
restaurant menus to standard web


1217
00:37:05,766 --> 00:37:08,176
technologies, now is the time to


1218
00:37:08,176 --> 00:37:09,486
say goodbye to Flash.


1219
00:37:09,486 --> 00:37:13,066
Safari on iPad is desktop-class,


1220
00:37:13,886 --> 00:37:15,386
but iPad is still a mobile


1221
00:37:15,386 --> 00:37:16,596
device, which means that we


1222
00:37:16,596 --> 00:37:18,466
expect it to be used on the go,


1223
00:37:18,606 --> 00:37:19,816
often in public places.


1224
00:37:20,606 --> 00:37:22,416
Therefore, WebKit will prevent


1225
00:37:22,416 --> 00:37:23,556
audio from playing


1226
00:37:23,616 --> 00:37:24,406
automatically.


1227
00:37:24,926 --> 00:37:26,216
We have found some desktop


1228
00:37:26,216 --> 00:37:27,696
websites that assume that


1229
00:37:27,696 --> 00:37:29,456
automatic playback will happen,


1230
00:37:29,676 --> 00:37:31,226
but it's best not to assume.


1231
00:37:31,926 --> 00:37:34,086
The standard media API allows


1232
00:37:34,086 --> 00:37:35,476
you to know the truths of what


1233
00:37:35,476 --> 00:37:37,106
actually happened, because the


1234
00:37:37,186 --> 00:37:38,386
play function has a promise.


1235
00:37:39,106 --> 00:37:40,506
You should catch that promise in


1236
00:37:40,506 --> 00:37:42,016
case playback was rejected.


1237
00:37:42,646 --> 00:37:43,876
But you should also consider


1238
00:37:43,876 --> 00:37:45,526
designing your website so that


1239
00:37:45,526 --> 00:37:47,756
all users on all devices can


1240
00:37:47,756 --> 00:37:49,166
decide for themselves when they


1241
00:37:49,166 --> 00:37:49,896
want audio.


1242
00:37:51,306 --> 00:37:53,146
Next, think beyond the mouse and


1243
00:37:53,146 --> 00:37:54,826
hardware keyboard when designing


1244
00:37:54,826 --> 00:37:56,066
user interaction flows.


1245
00:37:56,566 --> 00:37:58,006
Specifically, consider using


1246
00:37:58,006 --> 00:38:00,006
pointer events, and avoid using


1247
00:38:00,006 --> 00:38:01,486
mouse hover for anything other


1248
00:38:01,486 --> 00:38:02,766
than decorative auxiliary


1249
00:38:02,766 --> 00:38:03,276
changes.


1250
00:38:05,106 --> 00:38:07,516
And finally, use built-in APIs.


1251
00:38:07,926 --> 00:38:09,626
This is a broad topic, but I do


1252
00:38:09,626 --> 00:38:11,096
have a specific example.


1253
00:38:11,446 --> 00:38:13,306
We found many desktop websites


1254
00:38:13,566 --> 00:38:15,116
that will use mouse events in


1255
00:38:15,116 --> 00:38:16,786
order to customize text


1256
00:38:16,786 --> 00:38:18,896
selection or text input.


1257
00:38:19,326 --> 00:38:20,346
But there's a better tool for


1258
00:38:20,346 --> 00:38:20,816
the job.


1259
00:38:21,126 --> 00:38:22,666
Selection change events and


1260
00:38:22,666 --> 00:38:23,936
input events are designed for


1261
00:38:23,936 --> 00:38:25,016
this exact purpose.


1262
00:38:25,786 --> 00:38:26,826
You'll always get the better


1263
00:38:26,826 --> 00:38:28,936
behavior on every platform if


1264
00:38:28,936 --> 00:38:30,696
you utilize built-in APIs


1265
00:38:30,756 --> 00:38:32,356
instead of reverse engineering


1266
00:38:32,356 --> 00:38:34,036
them with basic interaction


1267
00:38:34,036 --> 00:38:34,396
events.


1268
00:38:35,106 --> 00:38:37,506
So that's a lot.


1269
00:38:38,216 --> 00:38:39,696
To help you digest all of this


1270
00:38:39,696 --> 00:38:41,346
information, I'd like to invite


1271
00:38:41,346 --> 00:38:43,206
Wenson back to the stage so that


1272
00:38:43,206 --> 00:38:44,386
he can show you some of these


1273
00:38:44,386 --> 00:38:46,166
new features and best practices


1274
00:38:46,246 --> 00:38:46,856
in action.


1275
00:38:48,146 --> 00:38:48,606
Wenson.


1276
00:38:49,516 --> 00:38:54,500
[ Applause ]


1277
00:38:57,456 --> 00:38:58,176
>> All right.


1278
00:38:58,596 --> 00:38:59,926
Thanks, Beth.


1279
00:39:00,556 --> 00:39:02,096
So you'll never be able to


1280
00:39:02,096 --> 00:39:03,566
guess, but when I'm not working


1281
00:39:03,566 --> 00:39:05,696
on web browsers in my spare time


1282
00:39:06,016 --> 00:39:08,146
and not-so-spare time, I also


1283
00:39:08,146 --> 00:39:09,156
like to work on web


1284
00:39:09,156 --> 00:39:09,906
applications.


1285
00:39:10,836 --> 00:39:11,836
Today, I'd like to share one


1286
00:39:11,836 --> 00:39:13,036
I've been working on recently


1287
00:39:13,726 --> 00:39:15,296
called Shiny Sketch.


1288
00:39:15,876 --> 00:39:19,336
Now, I've only ever tested this


1289
00:39:19,336 --> 00:39:21,186
against desktop browsers, so


1290
00:39:21,186 --> 00:39:22,396
it'll be interesting to see how


1291
00:39:22,396 --> 00:39:23,756
it behaves on my iPad.


1292
00:39:24,576 --> 00:39:25,996
But first, let me give you a


1293
00:39:25,996 --> 00:39:27,036
quick tour on my Mac.


1294
00:39:27,796 --> 00:39:29,646
And as I do, I'll point out some


1295
00:39:29,646 --> 00:39:31,236
potential areas that we may need


1296
00:39:31,236 --> 00:39:32,866
to adjust in order to make it


1297
00:39:32,866 --> 00:39:34,896
look and feel great on iPad.


1298
00:39:35,956 --> 00:39:37,036
Okay, so here's what it looks


1299
00:39:37,036 --> 00:39:37,966
like on macOS.


1300
00:39:38,646 --> 00:39:40,606
And first, this website has a


1301
00:39:40,606 --> 00:39:42,216
fixed four-column layout.


1302
00:39:42,846 --> 00:39:44,306
What that means is as I make my


1303
00:39:44,306 --> 00:39:45,966
window smaller, I just get


1304
00:39:45,966 --> 00:39:48,436
horizontal scrolling, okay?


1305
00:39:48,436 --> 00:39:49,286
So that's one thing to keep in


1306
00:39:49,286 --> 00:39:49,636
mind.


1307
00:39:50,916 --> 00:39:52,836
The next is that in order to


1308
00:39:52,836 --> 00:39:54,136
access the Edit or Delete


1309
00:39:54,136 --> 00:39:55,966
controls, I have to hover over


1310
00:39:55,966 --> 00:39:56,516
each drawing.


1311
00:39:57,456 --> 00:39:58,526
Of course, the Edit and Delete


1312
00:39:58,526 --> 00:39:59,986
controls are really critical


1313
00:39:59,986 --> 00:40:01,946
part of my web application.


1314
00:40:03,276 --> 00:40:04,496
And lastly, I'm going to go in


1315
00:40:04,496 --> 00:40:06,526
and try to scribble on one of


1316
00:40:06,526 --> 00:40:07,216
these drawings.


1317
00:40:07,826 --> 00:40:10,546
So I'm able to use my trackpad


1318
00:40:11,086 --> 00:40:13,076
to draw here, but the code that


1319
00:40:13,076 --> 00:40:14,796
I'm currently using to implement


1320
00:40:14,796 --> 00:40:16,416
this only listens for mouse


1321
00:40:16,416 --> 00:40:16,826
events.


1322
00:40:17,176 --> 00:40:18,886
I'm probably going to need to


1323
00:40:19,136 --> 00:40:20,846
adjust that for compatibility


1324
00:40:20,846 --> 00:40:21,346
with iPad.


1325
00:40:22,346 --> 00:40:23,336
Okay, so that's Mac.


1326
00:40:24,336 --> 00:40:25,366
What does it look like on iPad?


1327
00:40:25,366 --> 00:40:26,836
Let me show you.


1328
00:40:27,326 --> 00:40:29,326
I happen to have the same page


1329
00:40:29,326 --> 00:40:30,416
open in Safari.


1330
00:40:31,046 --> 00:40:33,666
And the first thing I notice is


1331
00:40:33,666 --> 00:40:34,766
that the four-column layout


1332
00:40:35,056 --> 00:40:36,436
works great in landscape mode.


1333
00:40:37,396 --> 00:40:39,996
However, once I rotate into


1334
00:40:39,996 --> 00:40:41,586
portrait mode, let's see what


1335
00:40:41,586 --> 00:40:42,036
happens.


1336
00:40:42,726 --> 00:40:45,556
So I still get a four-column


1337
00:40:45,556 --> 00:40:45,956
layout.


1338
00:40:46,456 --> 00:40:49,756
I bet if I made my website


1339
00:40:49,756 --> 00:40:51,426
responsive, I could avoid this


1340
00:40:51,426 --> 00:40:51,806
scaling.


1341
00:40:52,876 --> 00:40:54,286
What I'm going to do now is


1342
00:40:54,286 --> 00:40:56,176
return to my Mac and see if I


1343
00:40:56,176 --> 00:40:58,656
can figure out what's triggering


1344
00:40:58,916 --> 00:41:01,626
this horizontal scrolling in my


1345
00:41:01,626 --> 00:41:02,016
browser.


1346
00:41:03,426 --> 00:41:04,696
Okay, so first things first.


1347
00:41:05,136 --> 00:41:06,536
I'm going to resize the window


1348
00:41:06,536 --> 00:41:07,936
so I do get horizontal scrolling


1349
00:41:08,596 --> 00:41:09,076
like this.


1350
00:41:09,076 --> 00:41:11,306
And then I'm going to go to the


1351
00:41:11,306 --> 00:41:12,046
Develop menu.


1352
00:41:12,046 --> 00:41:16,256
So I'm going to go down to Start


1353
00:41:16,256 --> 00:41:18,606
Element Selection, and that


1354
00:41:18,606 --> 00:41:19,906
allows me to see how big each


1355
00:41:19,906 --> 00:41:20,506
element is.


1356
00:41:20,936 --> 00:41:23,326
As an example, right here, this


1357
00:41:23,326 --> 00:41:25,516
Edit button is 72 by 48 pixels.


1358
00:41:26,096 --> 00:41:28,066
Okay, so I'm just going to start


1359
00:41:28,066 --> 00:41:29,136
at the top of the page and try


1360
00:41:29,136 --> 00:41:30,616
to find a really wide element.


1361
00:41:32,056 --> 00:41:35,056
So this Shiny Sketch page banner


1362
00:41:35,056 --> 00:41:37,806
or title is about 760 pixels.


1363
00:41:38,666 --> 00:41:40,526
If I look at the window width


1364
00:41:40,526 --> 00:41:42,966
itself using this ruler, it's


1365
00:41:42,966 --> 00:41:45,166
also about 760 pixels, so this


1366
00:41:45,166 --> 00:41:46,206
is pretty well proportioned.


1367
00:41:47,566 --> 00:41:48,496
I'm going to move my cursor


1368
00:41:48,496 --> 00:41:52,076
down, and as you might have


1369
00:41:52,076 --> 00:41:53,916
guessed, the gallery section is


1370
00:41:53,916 --> 00:41:55,656
a whopping 1,300 pixels.


1371
00:41:56,246 --> 00:41:57,246
So I'm pretty sure this is


1372
00:41:57,246 --> 00:41:58,416
what's triggering the horizontal


1373
00:41:58,416 --> 00:41:59,676
scrolling in my web app.


1374
00:41:59,676 --> 00:42:01,866
But I want to find out more it,


1375
00:42:01,866 --> 00:42:02,816
so I'm just going to click.


1376
00:42:03,106 --> 00:42:04,036
That's going to open Web


1377
00:42:04,036 --> 00:42:06,416
Inspector where I can see more


1378
00:42:06,416 --> 00:42:07,216
about the gallery.


1379
00:42:08,286 --> 00:42:09,366
So in the Styles sidebar, there


1380
00:42:09,366 --> 00:42:11,436
is indeed a hard-coded width of


1381
00:42:11,526 --> 00:42:12,696
1,300 pixels.


1382
00:42:13,496 --> 00:42:14,096
Why is this here?


1383
00:42:14,926 --> 00:42:16,416
Well, when I added this, I think


1384
00:42:16,416 --> 00:42:17,626
I was trying to make my website


1385
00:42:17,966 --> 00:42:19,396
look good on really large


1386
00:42:19,396 --> 00:42:20,956
displays, really wide displays.


1387
00:42:21,266 --> 00:42:22,786
I didn't think that anyone would


1388
00:42:22,786 --> 00:42:24,716
actually load my web page with a


1389
00:42:24,716 --> 00:42:26,336
display of less than 1,300


1390
00:42:26,336 --> 00:42:26,926
pixels width.


1391
00:42:28,456 --> 00:42:29,246
Maybe it was a reasonable


1392
00:42:29,246 --> 00:42:30,366
assumption to make at the time,


1393
00:42:30,886 --> 00:42:32,606
but now I think I can do better.


1394
00:42:33,496 --> 00:42:35,646
So what I'm going to do now is


1395
00:42:35,886 --> 00:42:37,116
switch over and try to fix it.


1396
00:42:37,956 --> 00:42:38,806
I'm going to make my website


1397
00:42:38,806 --> 00:42:39,296
responsive.


1398
00:42:40,426 --> 00:42:42,786
By the way, the entire web


1399
00:42:42,786 --> 00:42:44,166
application is just three files,


1400
00:42:44,516 --> 00:42:46,776
an HTML file, CSS file, and a


1401
00:42:46,776 --> 00:42:47,386
JavaScript file.


1402
00:42:47,386 --> 00:42:48,636
So I'm going to start in the


1403
00:42:48,636 --> 00:42:50,836
HTML file where I'm going to add


1404
00:42:50,836 --> 00:42:52,506
a meta viewport tag.


1405
00:42:53,276 --> 00:42:54,876
So there's two important


1406
00:42:54,876 --> 00:42:55,546
components to this


1407
00:42:55,776 --> 00:42:57,296
width=device-width and


1408
00:42:57,296 --> 00:42:58,796
initial-scale=1.0.


1409
00:42:59,316 --> 00:43:00,366
This lets the browser know that


1410
00:43:00,366 --> 00:43:01,746
the page is responsive at any


1411
00:43:01,746 --> 00:43:02,326
device width.


1412
00:43:02,326 --> 00:43:04,136
So that's important, but now


1413
00:43:04,136 --> 00:43:05,116
let's actually make it


1414
00:43:05,116 --> 00:43:06,786
responsive at any device width.


1415
00:43:07,386 --> 00:43:09,266
So let's go to our CSS file.


1416
00:43:09,796 --> 00:43:11,286
And remember that 1,300 pixel


1417
00:43:11,286 --> 00:43:12,216
rule we saw earlier?


1418
00:43:12,216 --> 00:43:13,666
I'm going to search for that.


1419
00:43:15,076 --> 00:43:17,756
So here we go, width: 1300px.


1420
00:43:17,756 --> 00:43:19,636
It is indeed on the gallery.


1421
00:43:20,446 --> 00:43:21,866
And what I'm going to do is just


1422
00:43:21,866 --> 00:43:22,876
change this to a max-width.


1423
00:43:23,846 --> 00:43:25,086
What that means is that if my


1424
00:43:25,086 --> 00:43:26,416
window is less than 1,300


1425
00:43:26,416 --> 00:43:28,066
pixels, the drawings under my


1426
00:43:28,066 --> 00:43:29,196
gallery should be able to


1427
00:43:29,196 --> 00:43:29,586
reflow.


1428
00:43:30,226 --> 00:43:31,506
They're able to reflow, because


1429
00:43:31,756 --> 00:43:33,186
I conveniently set them as


1430
00:43:33,186 --> 00:43:34,206
display: inline-block.


1431
00:43:35,006 --> 00:43:38,416
Okay. So those were a couple of


1432
00:43:38,416 --> 00:43:39,166
small changes.


1433
00:43:39,526 --> 00:43:40,876
Let's see how it now behaves.


1434
00:43:41,056 --> 00:43:44,846
All right, so it's now a


1435
00:43:44,846 --> 00:43:46,026
three-column layout in portrait


1436
00:43:46,026 --> 00:43:47,666
mode, but if I rotate back into


1437
00:43:47,666 --> 00:43:50,746
landscape mode, it becomes four


1438
00:43:50,746 --> 00:43:51,196
columns.


1439
00:43:51,486 --> 00:43:52,496
That's because landscape mode is


1440
00:43:52,496 --> 00:43:53,726
wide enough to accommodate for


1441
00:43:53,726 --> 00:43:54,626
the four-column layout.


1442
00:43:55,926 --> 00:43:57,186
Either way, there's no more


1443
00:43:57,186 --> 00:43:58,576
scaling, and that's great.


1444
00:43:59,636 --> 00:44:01,656
Okay, so next let's talk about


1445
00:44:01,656 --> 00:44:02,016
drawing.


1446
00:44:02,776 --> 00:44:04,036
As Beth mentioned, there's no


1447
00:44:04,036 --> 00:44:06,116
mouse move on iPad, but luckily,


1448
00:44:06,386 --> 00:44:08,066
I can adopt pointer events, and


1449
00:44:08,066 --> 00:44:09,956
the touch-action CSS property to


1450
00:44:09,956 --> 00:44:10,426
make it work.


1451
00:44:11,426 --> 00:44:14,826
So let's return to the CSS file.


1452
00:44:15,056 --> 00:44:16,386
So over here, I'm going to add


1453
00:44:16,386 --> 00:44:18,426
touch-action none, or


1454
00:44:18,426 --> 00:44:19,456
specifically, I'm going to add


1455
00:44:19,456 --> 00:44:20,526
it to the .drawable-canvas


1456
00:44:20,776 --> 00:44:21,716
which, as its name might


1457
00:44:21,716 --> 00:44:23,366
suggest, is the element that I'm


1458
00:44:23,366 --> 00:44:24,466
going to be dragging my finger


1459
00:44:24,466 --> 00:44:25,366
over as I draw.


1460
00:44:26,156 --> 00:44:27,876
Of course, it's important that


1461
00:44:27,876 --> 00:44:30,376
as I drag my finger over, it


1462
00:44:30,376 --> 00:44:31,036
doesn't scroll.


1463
00:44:32,006 --> 00:44:32,916
That's why touch-action is


1464
00:44:32,916 --> 00:44:33,406
important.


1465
00:44:34,516 --> 00:44:36,196
Okay, next I'm going to go over


1466
00:44:36,196 --> 00:44:38,286
to the JavaScript file where I'm


1467
00:44:38,286 --> 00:44:40,816
going to look for mousemove.


1468
00:44:41,376 --> 00:44:44,216
Okay, so this is the code that


1469
00:44:44,216 --> 00:44:45,716
I'm currently using to listen


1470
00:44:45,716 --> 00:44:48,026
for mouse events so I can draw


1471
00:44:48,026 --> 00:44:48,476
on my Mac.


1472
00:44:49,696 --> 00:44:50,686
I'm going to adjust this a


1473
00:44:50,686 --> 00:44:51,726
little bit.


1474
00:44:52,336 --> 00:44:55,716
So instead, what I'm going to do


1475
00:44:55,966 --> 00:44:57,016
is check if pointer events are


1476
00:44:57,016 --> 00:44:57,456
supported.


1477
00:44:58,236 --> 00:44:59,506
If they are, I'm going to


1478
00:44:59,506 --> 00:45:00,946
register pointer event listeners


1479
00:45:00,946 --> 00:45:01,546
instead.


1480
00:45:02,556 --> 00:45:03,716
Otherwise, I'll fall back to the


1481
00:45:03,716 --> 00:45:04,736
mouse events that I'm currently


1482
00:45:04,736 --> 00:45:05,076
using.


1483
00:45:06,366 --> 00:45:09,296
Okay, so let's see these changes


1484
00:45:09,346 --> 00:45:10,016
in action though.


1485
00:45:10,586 --> 00:45:14,956
Let's give our canine friend


1486
00:45:14,956 --> 00:45:15,856
Sona [phonetic] here a little


1487
00:45:15,856 --> 00:45:15,976
hat.


1488
00:45:22,336 --> 00:45:24,316
Well, it's not best drawn, but


1489
00:45:24,316 --> 00:45:25,816
as you can see, I can clearly


1490
00:45:25,996 --> 00:45:28,136
able to draw now.


1491
00:45:28,376 --> 00:45:31,036
Okay, so one last minor detail.


1492
00:45:32,436 --> 00:45:33,886
As Beth mentioned, iPad is


1493
00:45:33,886 --> 00:45:36,116
compatible with mouse hover, but


1494
00:45:36,116 --> 00:45:37,486
it's not immediately clear to me


1495
00:45:37,736 --> 00:45:38,996
that the way to edit or delete,


1496
00:45:38,996 --> 00:45:42,016
or drawings rather, is to first


1497
00:45:42,296 --> 00:45:43,996
tap on each drawing in order to


1498
00:45:43,996 --> 00:45:46,736
show the controls and then tap


1499
00:45:46,736 --> 00:45:47,876
on the controls themselves.


1500
00:45:47,876 --> 00:45:49,636
It means that any meaningful


1501
00:45:49,636 --> 00:45:51,466
interaction with my app is going


1502
00:45:51,466 --> 00:45:53,926
to require two taps on iPad.


1503
00:45:53,926 --> 00:45:57,426
Let's make it easy to edit and


1504
00:45:57,426 --> 00:45:58,636
delete with a single tap.


1505
00:45:59,476 --> 00:46:00,866
What I'm going to do is add a


1506
00:46:00,866 --> 00:46:01,786
Delete button that's always


1507
00:46:01,786 --> 00:46:03,506
visible and just make tapping on


1508
00:46:03,506 --> 00:46:05,426
each drawing immediately go into


1509
00:46:05,426 --> 00:46:06,086
editing mode.


1510
00:46:07,126 --> 00:46:07,686
So let's do that.


1511
00:46:09,026 --> 00:46:10,546
First, I'm going to go over to


1512
00:46:10,546 --> 00:46:12,406
the HTML file where I'm going to


1513
00:46:12,406 --> 00:46:13,296
add a bit of markup.


1514
00:46:13,816 --> 00:46:15,806
It's a very simple button that


1515
00:46:15,806 --> 00:46:16,486
I'm going to add here.


1516
00:46:17,256 --> 00:46:18,386
But note that I'm putting the


1517
00:46:18,386 --> 00:46:19,566
class static-control here.


1518
00:46:20,406 --> 00:46:21,346
It's going to become important


1519
00:46:21,666 --> 00:46:22,656
very soon, because I'm going to


1520
00:46:22,656 --> 00:46:25,736
head over to the CSS file where


1521
00:46:25,736 --> 00:46:27,046
I'm going to add a media query.


1522
00:46:27,046 --> 00:46:31,446
So what I'm doing here is I'm


1523
00:46:31,446 --> 00:46:32,676
checking if hover is supported


1524
00:46:32,766 --> 00:46:34,356
by using this media query, and


1525
00:46:34,356 --> 00:46:35,646
if it is supported, we don't


1526
00:46:35,646 --> 00:46:36,386
actually need that


1527
00:46:36,386 --> 00:46:37,666
static-control, that static


1528
00:46:37,666 --> 00:46:38,696
Delete button that I just added.


1529
00:46:39,396 --> 00:46:41,596
So I can just set display: none


1530
00:46:41,836 --> 00:46:44,546
on that, and it should hide it.


1531
00:46:44,806 --> 00:46:46,016
Lastly, there's a small change


1532
00:46:46,016 --> 00:46:46,896
we have to make to our


1533
00:46:46,896 --> 00:46:47,546
JavaScript file.


1534
00:46:48,556 --> 00:46:49,696
So now I'm going to look for


1535
00:46:49,696 --> 00:46:52,326
mouseenter, and this is a code


1536
00:46:52,326 --> 00:46:54,016
I'm using to show or hide the


1537
00:46:54,016 --> 00:46:55,906
hover controls when the user's


1538
00:46:55,906 --> 00:46:57,296
mouse enters or leaves each


1539
00:46:57,296 --> 00:46:57,606
drawing.


1540
00:46:58,436 --> 00:46:59,596
We don't need to do this if


1541
00:46:59,596 --> 00:47:00,486
hover is not supported.


1542
00:47:01,316 --> 00:47:02,426
So what I'm going to do is add a


1543
00:47:02,426 --> 00:47:03,316
bit of logic up here.


1544
00:47:04,196 --> 00:47:05,266
It's going to use the same media


1545
00:47:05,266 --> 00:47:07,026
query as I did in the CSS file


1546
00:47:07,186 --> 00:47:09,096
to check if hover exists, and if


1547
00:47:09,096 --> 00:47:11,286
hover is not supported, I'm


1548
00:47:11,286 --> 00:47:12,986
going to instead add a click


1549
00:47:12,986 --> 00:47:14,366
event listener to the drawing


1550
00:47:14,366 --> 00:47:15,806
itself and allow it to


1551
00:47:15,806 --> 00:47:17,756
immediately start drawing mode.


1552
00:47:18,866 --> 00:47:21,126
Then this early return ensures


1553
00:47:21,126 --> 00:47:22,356
that I don't add the event


1554
00:47:22,356 --> 00:47:24,336
listeners I don't need in the


1555
00:47:24,336 --> 00:47:25,276
case where hover is not


1556
00:47:25,276 --> 00:47:25,636
supported.


1557
00:47:26,906 --> 00:47:28,176
Okay, so that was a lot of


1558
00:47:28,176 --> 00:47:28,596
changes.


1559
00:47:29,286 --> 00:47:30,226
But let's see it in action now.


1560
00:47:30,226 --> 00:47:33,556
All right, first thing I notice


1561
00:47:33,556 --> 00:47:35,636
is that Delete buttons are now


1562
00:47:35,636 --> 00:47:36,826
always visible and ready to be


1563
00:47:36,826 --> 00:47:37,066
tapped.


1564
00:47:38,566 --> 00:47:39,456
But if I tap on each of the


1565
00:47:39,456 --> 00:47:41,746
drawings, I'm able to edit them


1566
00:47:41,966 --> 00:47:42,606
immediately.


1567
00:47:43,886 --> 00:47:45,396
So it's one tap to do anything


1568
00:47:45,396 --> 00:47:46,506
in my app.


1569
00:47:48,626 --> 00:47:50,226
Okay, so with a few simple


1570
00:47:50,226 --> 00:47:52,166
steps, I've made my desktop web


1571
00:47:52,166 --> 00:47:54,306
app work great on iPad, and I


1572
00:47:54,306 --> 00:47:56,276
think you web developers out


1573
00:47:56,276 --> 00:47:57,266
there can as well.


1574
00:47:58,396 --> 00:47:59,406
I'd like to now hand it off to


1575
00:47:59,406 --> 00:48:01,176
Charles to summarize what we've


1576
00:48:01,176 --> 00:48:02,686
covered today, and I'll see you


1577
00:48:02,686 --> 00:48:03,306
at the labs.


1578
00:48:04,516 --> 00:48:12,896
[ Applause ]


1579
00:48:13,396 --> 00:48:14,986
>> Thanks, Wenson.


1580
00:48:14,986 --> 00:48:18,296
Your web app looks awesome.


1581
00:48:18,296 --> 00:48:21,066
In summary, iPad has made major


1582
00:48:21,066 --> 00:48:23,326
new advancements to make today's


1583
00:48:23,326 --> 00:48:25,406
desktop websites work great out


1584
00:48:25,406 --> 00:48:26,236
of the box.


1585
00:48:26,916 --> 00:48:28,866
We want you to take advantage of


1586
00:48:28,866 --> 00:48:31,016
these new features to make your


1587
00:48:31,246 --> 00:48:33,816
app or website even better on


1588
00:48:33,816 --> 00:48:35,736
iPad just like you did for


1589
00:48:35,736 --> 00:48:35,936
iPhone.


1590
00:48:39,156 --> 00:48:41,756
For our web developers, consider


1591
00:48:41,756 --> 00:48:43,736
building one responsive website


1592
00:48:44,206 --> 00:48:46,036
using the techniques we talked


1593
00:48:46,736 --> 00:48:47,846
about today.


1594
00:48:48,046 --> 00:48:50,306
For app developers, let Safari


1595
00:48:50,306 --> 00:48:51,326
View Controller and


1596
00:48:51,326 --> 00:48:53,126
ASWebAuthenticationSession do


1597
00:48:53,126 --> 00:48:55,076
the heavy lifting for you.


1598
00:48:55,636 --> 00:48:58,036
If using WKWebView, please test


1599
00:48:58,036 --> 00:48:58,406
your app.


1600
00:48:59,926 --> 00:49:01,746
And please file bugs and send us


1601
00:49:01,746 --> 00:49:02,216
your feedback.


1602
00:49:02,706 --> 00:49:05,316
We'd love to hear from you.


1603
00:49:05,536 --> 00:49:06,536
For more information about our


1604
00:49:06,536 --> 00:49:08,386
other exciting authentication


1605
00:49:08,526 --> 00:49:10,346
and web platform features, you


1606
00:49:10,346 --> 00:49:11,516
should definitely check out


1607
00:49:11,796 --> 00:49:13,856
Session 504, What's New in


1608
00:49:13,856 --> 00:49:15,696
Authentication, Safari, and


1609
00:49:15,696 --> 00:49:17,976
WebKit on Thursday at 11:00 am.


1610
00:49:18,916 --> 00:49:20,556
There are also two labs related


1611
00:49:20,556 --> 00:49:23,016
to the session today at 1:00 pm


1612
00:49:23,466 --> 00:49:25,066
and Thursday at 12:00 pm.


1613
00:49:25,826 --> 00:49:27,536
Please come to talk and learn


1614
00:49:27,536 --> 00:49:28,986
more about what you heard today.


1615
00:49:30,206 --> 00:49:31,846
Thank you and have a wonderful


1616
00:49:32,056 --> 00:49:32,976
WWDC.


1617
00:49:33,516 --> 00:49:38,500
[ Applause ]

