1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:09,516 --> 00:00:16,556
[ Applause ]


3
00:00:17,056 --> 00:00:18,106
>> Welcome to Advances in


4
00:00:18,106 --> 00:00:18,706
Networking.


5
00:00:18,756 --> 00:00:19,976
My name is Joshua Graessley.


6
00:00:20,126 --> 00:00:21,416
My coworkers and I from Internet


7
00:00:21,416 --> 00:00:22,896
Technologies are excited to talk


8
00:00:22,896 --> 00:00:23,706
to you about a number of


9
00:00:23,706 --> 00:00:24,946
improvements we've made in the


10
00:00:24,946 --> 00:00:26,196
area of networking on our


11
00:00:26,276 --> 00:00:28,076
platforms this last year.


12
00:00:29,206 --> 00:00:31,666
In part one, we're going to talk


13
00:00:31,666 --> 00:00:32,636
about Low Data Mode.


14
00:00:32,706 --> 00:00:34,156
This is an exciting new feature


15
00:00:34,156 --> 00:00:35,286
where we can work together to


16
00:00:35,286 --> 00:00:36,766
help save our user's network


17
00:00:36,766 --> 00:00:38,116
data when it really matters.


18
00:00:38,406 --> 00:00:39,896
We'll talk about how you can


19
00:00:39,896 --> 00:00:41,466
write asynchronous-- very


20
00:00:41,466 --> 00:00:42,926
elegant asynchronous networking


21
00:00:42,926 --> 00:00:44,696
code using Combine in


22
00:00:44,696 --> 00:00:45,486
URLSession.


23
00:00:46,396 --> 00:00:48,816
We'll also cover WebSocket APIs.


24
00:00:49,096 --> 00:00:50,056
Last year, this was one of the


25
00:00:50,056 --> 00:00:51,326
number one things you requested


26
00:00:51,326 --> 00:00:52,896
in the labs and we're excited


27
00:00:52,896 --> 00:00:53,846
this year to be providing a


28
00:00:53,846 --> 00:00:54,426
solution.


29
00:00:55,506 --> 00:00:56,866
Finally, we'll talk about a


30
00:00:56,866 --> 00:00:58,446
number of mobility improvements


31
00:00:58,526 --> 00:00:59,976
and we'll talk about how we can


32
00:00:59,976 --> 00:01:01,346
work together to provide our


33
00:01:01,346 --> 00:01:03,156
users a more seamless experience


34
00:01:03,156 --> 00:01:04,715
as devices move from one network


35
00:01:04,936 --> 00:01:05,396
to another.


36
00:01:07,036 --> 00:01:10,606
In part two, we'll cover a bunch


37
00:01:10,606 --> 00:01:11,476
of additional topics.


38
00:01:11,526 --> 00:01:12,596
That's at 5:00 today.


39
00:01:12,696 --> 00:01:13,736
I encourage you to come back and


40
00:01:13,736 --> 00:01:15,246
check that out.


41
00:01:15,936 --> 00:01:17,866
Now, before we dive into Low


42
00:01:17,866 --> 00:01:19,016
Data Mode, I want to take a


43
00:01:19,016 --> 00:01:20,546
minute to talk about networking


44
00:01:20,546 --> 00:01:22,036
APIs on our platform.


45
00:01:23,046 --> 00:01:25,376
The best networking APIs to use


46
00:01:25,376 --> 00:01:27,226
on our platform are URLSession


47
00:01:27,366 --> 00:01:28,226
and Network.framework.


48
00:01:28,696 --> 00:01:29,676
As you'll hear about in this


49
00:01:29,676 --> 00:01:31,526
session and in part two, there


50
00:01:31,526 --> 00:01:32,226
are a number of great


51
00:01:32,226 --> 00:01:33,936
improvements we've made and all


52
00:01:33,936 --> 00:01:34,736
of those improvements are


53
00:01:34,736 --> 00:01:35,966
available to your applications


54
00:01:36,166 --> 00:01:37,016
if you're using these


55
00:01:37,046 --> 00:01:37,516
frameworks.


56
00:01:38,936 --> 00:01:40,636
If you're using sockets, you're


57
00:01:40,636 --> 00:01:41,456
not going to be able to take


58
00:01:41,456 --> 00:01:42,146
advantage of this.


59
00:01:42,686 --> 00:01:44,106
Unfortunately, sockets just


60
00:01:44,106 --> 00:01:45,266
doesn't have the richness that


61
00:01:45,266 --> 00:01:46,706
we require in order to provide


62
00:01:46,706 --> 00:01:47,786
this functionality at that


63
00:01:47,786 --> 00:01:48,076
layer.


64
00:01:48,076 --> 00:01:49,876
Now, if you're doing something


65
00:01:49,876 --> 00:01:52,056
like a VPN or a content filter,


66
00:01:52,386 --> 00:01:53,686
NetworkExtension framework is a


67
00:01:53,686 --> 00:01:54,916
great solution and we've made a


68
00:01:54,916 --> 00:01:56,146
number of improvements there as


69
00:01:56,146 --> 00:01:57,386
well that we'll be talking about


70
00:01:57,386 --> 00:02:01,226
tomorrow at 9:00 a.m. Now with


71
00:02:01,386 --> 00:02:02,886
that, I'd like to talk about Low


72
00:02:02,886 --> 00:02:03,326
Data Mode.


73
00:02:03,946 --> 00:02:05,486
Low Data Mode is a really


74
00:02:05,486 --> 00:02:07,516
exciting new feature in iOS 13.


75
00:02:08,876 --> 00:02:10,166
I think the best way to


76
00:02:10,166 --> 00:02:11,526
introduce Low Data Mode is to


77
00:02:11,526 --> 00:02:12,736
have you think back to how you


78
00:02:12,736 --> 00:02:14,086
got here to WWDC.


79
00:02:14,086 --> 00:02:17,326
You probably got on an airplane


80
00:02:17,386 --> 00:02:20,006
to fly out to sunny San Jose.


81
00:02:21,046 --> 00:02:22,646
And on that airplane, there was


82
00:02:22,736 --> 00:02:24,786
probably a Wi-Fi network and


83
00:02:24,786 --> 00:02:26,686
that Wi-Fi network was probably


84
00:02:26,796 --> 00:02:28,786
kind of expensive of it may have


85
00:02:28,786 --> 00:02:30,656
been very congested and you may


86
00:02:30,656 --> 00:02:31,706
have been finding yourself


87
00:02:31,706 --> 00:02:33,646
wishing that you had some way to


88
00:02:33,646 --> 00:02:35,036
tell the applications and the


89
00:02:35,036 --> 00:02:37,036
system on your device that on


90
00:02:37,036 --> 00:02:38,696
this particular network it's


91
00:02:38,696 --> 00:02:39,946
really important to be very


92
00:02:39,946 --> 00:02:41,506
conservative in how you use


93
00:02:41,506 --> 00:02:42,116
network data.


94
00:02:43,066 --> 00:02:44,946
Low Data is all about solving


95
00:02:44,946 --> 00:02:45,776
that problem.


96
00:02:47,226 --> 00:02:48,936
Low Data gives users an


97
00:02:49,216 --> 00:02:51,176
ability-- a preference to signal


98
00:02:51,176 --> 00:02:52,546
to your application and to the


99
00:02:52,606 --> 00:02:54,436
system that you really want to


100
00:02:54,666 --> 00:02:56,556
be very careful in how you use


101
00:02:56,686 --> 00:02:57,826
data on this network.


102
00:02:59,256 --> 00:03:01,636
This can be set on a per Wi-Fi


103
00:03:01,636 --> 00:03:03,856
network based on SSID and a per


104
00:03:03,926 --> 00:03:05,506
cellular network based on SIM.


105
00:03:06,876 --> 00:03:09,416
When the device is on a Low Data


106
00:03:09,416 --> 00:03:10,696
Mode network, this has two


107
00:03:10,736 --> 00:03:11,686
primary impacts.


108
00:03:11,876 --> 00:03:12,986
There's a change to the system


109
00:03:12,986 --> 00:03:14,816
policy and a change to your


110
00:03:14,816 --> 00:03:16,296
applications that have adopted


111
00:03:16,296 --> 00:03:16,976
Low Data Mode.


112
00:03:17,536 --> 00:03:19,866
For the system policy, we will


113
00:03:19,866 --> 00:03:21,206
defer any background


114
00:03:21,206 --> 00:03:22,796
discretionary tasks while we're


115
00:03:22,796 --> 00:03:24,016
on a Low Data Mode network.


116
00:03:24,806 --> 00:03:26,016
So, if you were on your airplane


117
00:03:26,016 --> 00:03:27,166
and you had Low Data Mode turned


118
00:03:27,166 --> 00:03:28,986
on, we would defer all of those


119
00:03:29,016 --> 00:03:30,336
background discretionary tasks.


120
00:03:30,946 --> 00:03:31,616
And when you get off the


121
00:03:31,616 --> 00:03:32,766
airplane and check into your


122
00:03:32,806 --> 00:03:34,606
hotel and you get onto the Wi-Fi


123
00:03:34,606 --> 00:03:35,986
network there that's potentially


124
00:03:35,986 --> 00:03:37,386
less congested or less


125
00:03:37,386 --> 00:03:39,316
expensive, then we'd let all


126
00:03:39,316 --> 00:03:41,046
those background tasks resume


127
00:03:41,046 --> 00:03:43,026
and carry on.


128
00:03:43,616 --> 00:03:44,976
Another change we make is that


129
00:03:45,126 --> 00:03:46,266
Background App Refresh is


130
00:03:46,266 --> 00:03:46,776
disabled.


131
00:03:47,166 --> 00:03:48,686
This helps us avoid allowing


132
00:03:48,686 --> 00:03:49,656
applications that are in the


133
00:03:49,656 --> 00:03:51,386
background that may have nothing


134
00:03:51,386 --> 00:03:52,266
to do with what the user is


135
00:03:52,266 --> 00:03:53,856
actually interested in from


136
00:03:53,856 --> 00:03:54,856
consuming network data.


137
00:03:55,676 --> 00:03:56,786
This gets us some pretty big


138
00:03:56,786 --> 00:03:58,236
wins, but we think some of the


139
00:03:58,236 --> 00:03:59,566
biggest wins are going to come


140
00:03:59,566 --> 00:04:00,486
from the changes that you're


141
00:04:00,486 --> 00:04:01,266
going to make in your


142
00:04:01,266 --> 00:04:02,976
applications to adopt Low Data


143
00:04:02,976 --> 00:04:03,276
Mode.


144
00:04:04,166 --> 00:04:05,196
So, I'd like to spend some time


145
00:04:05,196 --> 00:04:06,286
talking about the techniques


146
00:04:06,346 --> 00:04:07,016
that you can use.


147
00:04:07,576 --> 00:04:10,126
It all starts with looking into


148
00:04:10,126 --> 00:04:11,746
how your application is actually


149
00:04:11,746 --> 00:04:12,906
using network data.


150
00:04:13,816 --> 00:04:15,856
As you start to dig in, it's


151
00:04:15,916 --> 00:04:17,266
really important to keep in mind


152
00:04:18,106 --> 00:04:20,766
any time you can save data and


153
00:04:20,815 --> 00:04:22,256
there's no impact on the user


154
00:04:22,256 --> 00:04:24,136
experience, you should always do


155
00:04:24,136 --> 00:04:24,636
that.


156
00:04:25,636 --> 00:04:26,496
I know this seems kind of


157
00:04:26,496 --> 00:04:27,356
obvious, but you might be


158
00:04:27,416 --> 00:04:28,406
surprised about the ways that


159
00:04:28,406 --> 00:04:29,796
you can make optimizations that


160
00:04:30,126 --> 00:04:31,076
will reduce the amount of


161
00:04:31,076 --> 00:04:34,026
network data that you're using.


162
00:04:35,366 --> 00:04:36,666
Now, once you've gotten through


163
00:04:36,666 --> 00:04:38,276
all of those low-hanging fruits


164
00:04:38,276 --> 00:04:39,356
where you can just get a win


165
00:04:39,356 --> 00:04:40,536
with no impact, then you're


166
00:04:40,656 --> 00:04:41,766
going to have to start making


167
00:04:41,766 --> 00:04:43,246
some decisions about tradeoffs.


168
00:04:44,506 --> 00:04:46,226
In a lot of cases, you have the


169
00:04:46,226 --> 00:04:48,116
opportunity to use some more


170
00:04:48,116 --> 00:04:49,396
data and give a really great


171
00:04:49,396 --> 00:04:51,206
experience or use a little bit


172
00:04:51,206 --> 00:04:52,906
less data and give a still great


173
00:04:52,986 --> 00:04:54,206
but maybe not quite as great


174
00:04:54,206 --> 00:04:54,846
experience.


175
00:04:55,406 --> 00:04:57,266
And Low Data Mode is all about a


176
00:04:57,266 --> 00:04:58,566
way for the user to signal to


177
00:04:58,566 --> 00:05:00,386
your application that they'd


178
00:05:00,386 --> 00:05:01,876
really prefer that you save that


179
00:05:01,876 --> 00:05:03,596
data and go with the option that


180
00:05:03,596 --> 00:05:04,806
still gives a great experience,


181
00:05:05,146 --> 00:05:08,076
but maybe not quite as great.


182
00:05:08,356 --> 00:05:09,156
So, let's talk about some


183
00:05:09,156 --> 00:05:10,116
techniques you can use.


184
00:05:10,556 --> 00:05:12,536
The first one is to reduce image


185
00:05:12,536 --> 00:05:12,956
quality.


186
00:05:13,386 --> 00:05:15,856
If your application isn't all


187
00:05:15,856 --> 00:05:17,546
about images, by reducing image


188
00:05:17,546 --> 00:05:18,866
quality, you can save a lot of


189
00:05:18,866 --> 00:05:20,396
data and you can still let the


190
00:05:20,396 --> 00:05:21,716
user do what they're trying to


191
00:05:21,716 --> 00:05:24,136
do, but save data in the


192
00:05:24,136 --> 00:05:24,676
process.


193
00:05:26,256 --> 00:05:28,296
You can reduce pre-fetching.


194
00:05:28,526 --> 00:05:29,986
Prefetching is a great technique


195
00:05:30,116 --> 00:05:31,766
for improving performance, but


196
00:05:31,766 --> 00:05:33,026
it has this downside that you


197
00:05:33,026 --> 00:05:34,436
may end up fetching resources


198
00:05:34,436 --> 00:05:36,046
that the user never needs.


199
00:05:36,236 --> 00:05:37,406
And in the event that they're


200
00:05:37,406 --> 00:05:38,636
really concerned about how much


201
00:05:38,636 --> 00:05:39,736
network data they're using,


202
00:05:39,986 --> 00:05:41,096
pre-fetching can actually be


203
00:05:41,096 --> 00:05:41,746
counterproductive.


204
00:05:43,056 --> 00:05:44,656
So, when you're in Low Data


205
00:05:44,656 --> 00:05:46,206
Mode, you can use-- you can


206
00:05:46,206 --> 00:05:47,606
eliminate your pre-fetching, you


207
00:05:47,606 --> 00:05:48,336
can save that data.


208
00:05:48,336 --> 00:05:49,526
And the user may have to wait a


209
00:05:49,526 --> 00:05:50,646
little bit longer if they scroll


210
00:05:50,646 --> 00:05:52,196
that content into view to wait


211
00:05:52,266 --> 00:05:54,126
for it to load.


212
00:05:54,746 --> 00:05:56,036
You can synchronize less often.


213
00:05:56,206 --> 00:05:57,266
The data will be stale for a


214
00:05:57,266 --> 00:05:58,496
little bit longer, but you'll


215
00:05:58,496 --> 00:05:59,206
still have data.


216
00:05:59,366 --> 00:06:00,576
The user can still accomplish


217
00:06:00,576 --> 00:06:04,366
what they've set out to do, but


218
00:06:04,366 --> 00:06:05,636
over a long period of time you


219
00:06:05,636 --> 00:06:06,816
can actually get some pretty big


220
00:06:06,876 --> 00:06:09,216
savings through reduced rate of


221
00:06:09,216 --> 00:06:09,886
synchronization.


222
00:06:10,536 --> 00:06:14,436
You can mark background tasks as


223
00:06:14,436 --> 00:06:15,306
discretionary.


224
00:06:15,896 --> 00:06:16,916
You'd be surprised how many of


225
00:06:16,916 --> 00:06:18,076
the background tasks you're


226
00:06:18,076 --> 00:06:19,916
setting up don't really need to


227
00:06:19,916 --> 00:06:20,876
be done immediately.


228
00:06:21,936 --> 00:06:23,216
By marking a background task as


229
00:06:23,216 --> 00:06:25,176
discretionary, it gives the


230
00:06:25,176 --> 00:06:26,756
system a lot of flexibility in


231
00:06:26,756 --> 00:06:27,936
when it actually schedules that


232
00:06:27,936 --> 00:06:28,586
operation.


233
00:06:28,716 --> 00:06:30,696
As I had mentioned in--


234
00:06:30,926 --> 00:06:32,246
previously-- when you're on the


235
00:06:32,246 --> 00:06:33,886
airplane, that gives the system


236
00:06:33,886 --> 00:06:35,156
the opportunity to put off that


237
00:06:35,156 --> 00:06:36,566
task until we get to a non-Low


238
00:06:36,566 --> 00:06:39,066
Data Mode network.


239
00:06:39,536 --> 00:06:40,836
Another great solution is to


240
00:06:40,836 --> 00:06:41,796
disable auto-play.


241
00:06:42,686 --> 00:06:44,076
This is really great because it


242
00:06:44,076 --> 00:06:45,326
doesn't prevent the user from


243
00:06:45,446 --> 00:06:46,466
playing the content that they're


244
00:06:46,466 --> 00:06:48,046
interested in, but it means the


245
00:06:48,046 --> 00:06:49,226
user doesn't have to pay for


246
00:06:49,226 --> 00:06:50,396
content that they really don't


247
00:06:50,396 --> 00:06:50,836
care about.


248
00:06:51,726 --> 00:06:54,356
That brings me to another really


249
00:06:54,356 --> 00:06:55,836
important point when you're


250
00:06:55,836 --> 00:06:56,646
choosing how you're going to


251
00:06:56,646 --> 00:06:57,676
implement Low Data Mode.


252
00:06:58,106 --> 00:06:59,236
Please don't block


253
00:06:59,236 --> 00:07:00,286
user-initiated work.


254
00:07:00,796 --> 00:07:02,346
Low Data Mode is all about


255
00:07:02,986 --> 00:07:04,486
telling the system to reduce the


256
00:07:04,486 --> 00:07:05,446
amount of network data that it


257
00:07:05,446 --> 00:07:07,326
uses, but to make sure that the


258
00:07:07,326 --> 00:07:08,886
user can still accomplish what


259
00:07:08,886 --> 00:07:09,846
they're setting out to do.


260
00:07:10,926 --> 00:07:11,916
As you're going through your


261
00:07:11,916 --> 00:07:13,286
application, you may realize


262
00:07:13,286 --> 00:07:14,316
that some of the operations you


263
00:07:14,316 --> 00:07:16,206
do do take a lot of network data


264
00:07:16,206 --> 00:07:17,226
and there's nothing you can do


265
00:07:17,226 --> 00:07:17,906
about that.


266
00:07:18,936 --> 00:07:20,646
It's great to reduce the amount


267
00:07:20,646 --> 00:07:21,686
of network data you're using for


268
00:07:21,686 --> 00:07:22,926
those operations any way you


269
00:07:22,926 --> 00:07:25,166
can, but we really don't want


270
00:07:25,166 --> 00:07:26,876
you to pop up a dialog that says


271
00:07:26,926 --> 00:07:28,016
are you sure you wanted to do


272
00:07:28,016 --> 00:07:28,176
this.


273
00:07:28,336 --> 00:07:29,586
I see you're in network data and


274
00:07:29,586 --> 00:07:30,426
this is going to use a lot of


275
00:07:30,426 --> 00:07:31,106
data.


276
00:07:31,256 --> 00:07:32,476
Don't second-guess the user.


277
00:07:32,586 --> 00:07:33,696
They've turned on Low Data Mode


278
00:07:34,666 --> 00:07:35,436
and they've asked your


279
00:07:35,436 --> 00:07:36,526
application to perform that


280
00:07:36,526 --> 00:07:37,226
operation.


281
00:07:37,266 --> 00:07:40,236
Go ahead and do that.


282
00:07:40,316 --> 00:07:41,596
So, let's talk a little bit


283
00:07:41,596 --> 00:07:43,346
about the APIs that your


284
00:07:43,346 --> 00:07:45,216
application can use to implement


285
00:07:45,216 --> 00:07:45,766
Low Data Mode.


286
00:07:47,266 --> 00:07:49,546
We've added APIs to URLSession


287
00:07:49,546 --> 00:07:50,936
and Network.framework.


288
00:07:51,746 --> 00:07:54,966
The thing to keep in mind is


289
00:07:54,966 --> 00:07:55,896
that when a network is in Low


290
00:07:55,896 --> 00:07:57,676
Data Mode, the constrained


291
00:07:57,676 --> 00:07:59,046
property is going to be set on


292
00:07:59,046 --> 00:07:59,756
that network.


293
00:08:00,876 --> 00:08:02,596
So, all of the APIs that we


294
00:08:02,596 --> 00:08:03,846
provide are based on the


295
00:08:03,846 --> 00:08:04,756
constrained property.


296
00:08:05,156 --> 00:08:07,016
In URLSession, we've added a


297
00:08:07,016 --> 00:08:07,906
property called


298
00:08:07,906 --> 00:08:09,546
allowsConstrainedNetworkAccess.


299
00:08:10,326 --> 00:08:11,706
By default, this is set to true.


300
00:08:12,096 --> 00:08:13,246
Your applications are allowed to


301
00:08:13,246 --> 00:08:14,436
use Low Data Mode networks by


302
00:08:14,436 --> 00:08:14,886
default.


303
00:08:15,506 --> 00:08:17,046
You can set this to false to opt


304
00:08:17,046 --> 00:08:17,236
out.


305
00:08:17,236 --> 00:08:18,936
You can set this on URLSession


306
00:08:18,936 --> 00:08:20,576
requests as well as your


307
00:08:20,576 --> 00:08:22,026
URLSession configuration.


308
00:08:23,036 --> 00:08:25,006
With URLSession, we really


309
00:08:25,006 --> 00:08:26,536
encourage you to go ahead and


310
00:08:26,536 --> 00:08:28,796
try that large resource fetch or


311
00:08:28,796 --> 00:08:29,926
pre-fetch and set


312
00:08:29,926 --> 00:08:31,376
allowsConstrainedNetworkAccess


313
00:08:31,376 --> 00:08:31,816
to false.


314
00:08:32,635 --> 00:08:33,936
If you get a failure and the


315
00:08:33,936 --> 00:08:35,876
error has a network unavailable


316
00:08:35,876 --> 00:08:37,486
reason of constrained, that


317
00:08:37,486 --> 00:08:38,876
indicates the operation failed


318
00:08:38,926 --> 00:08:40,076
because you're in Low Data Mode


319
00:08:40,076 --> 00:08:41,756
and the right thing to do there


320
00:08:41,926 --> 00:08:43,436
is to turn around and perform


321
00:08:43,436 --> 00:08:44,776
your Low Data Mode operation.


322
00:08:44,776 --> 00:08:46,576
In the case of a large resource


323
00:08:46,696 --> 00:08:48,016
fetch, that would be fetching a


324
00:08:48,016 --> 00:08:49,206
smaller resource instead.


325
00:08:49,206 --> 00:08:51,026
In the case of a pre-fetch, just


326
00:08:51,026 --> 00:08:52,076
wait until the user actually


327
00:08:52,076 --> 00:08:52,836
needs the content.


328
00:08:53,916 --> 00:08:55,936
This has the added benefit of


329
00:08:55,936 --> 00:08:56,856
letting you take advantage of


330
00:08:56,856 --> 00:08:57,926
anything that may actually


331
00:08:57,926 --> 00:08:58,946
already be in the cache.


332
00:08:59,876 --> 00:09:01,366
Now, with Network.framework, you


333
00:09:01,366 --> 00:09:02,446
have a similar property called


334
00:09:02,446 --> 00:09:03,646
prohibitConstrainedPaths.


335
00:09:04,136 --> 00:09:05,396
You can set this to true to


336
00:09:05,396 --> 00:09:06,666
block your connections and other


337
00:09:06,666 --> 00:09:08,526
networking objects from using


338
00:09:08,526 --> 00:09:09,556
Low Data Mode networks.


339
00:09:10,796 --> 00:09:12,276
With Network.framework you have


340
00:09:12,276 --> 00:09:13,056
another option, though.


341
00:09:13,376 --> 00:09:14,216
If you're going to connect to


342
00:09:14,216 --> 00:09:15,566
the same host whether you're in


343
00:09:15,566 --> 00:09:17,046
Low Data Mode or not, you can go


344
00:09:17,046 --> 00:09:17,946
ahead and establish that


345
00:09:17,946 --> 00:09:18,426
connection.


346
00:09:18,776 --> 00:09:19,736
And once the connection is


347
00:09:19,736 --> 00:09:21,196
established, you can get the


348
00:09:21,196 --> 00:09:23,016
current path and on the current


349
00:09:23,016 --> 00:09:23,996
path you can check to see if


350
00:09:23,996 --> 00:09:25,516
it's constrained and this will


351
00:09:25,516 --> 00:09:26,396
tell you whether or not this


352
00:09:26,426 --> 00:09:28,056
connection is established over a


353
00:09:28,056 --> 00:09:29,046
Low Data Mode network.


354
00:09:30,296 --> 00:09:32,216
Now, if you go this route, it's


355
00:09:32,216 --> 00:09:33,356
really important to make sure


356
00:09:33,356 --> 00:09:34,526
that you handle path updates.


357
00:09:35,876 --> 00:09:36,896
It's very possible that the


358
00:09:36,896 --> 00:09:38,346
constrained property can change


359
00:09:38,376 --> 00:09:39,316
over the lifetime of your


360
00:09:39,316 --> 00:09:40,616
connection.


361
00:09:43,176 --> 00:09:44,106
So, I spent a lot of time


362
00:09:44,106 --> 00:09:45,126
talking about the constrained


363
00:09:45,126 --> 00:09:46,406
property and Low Data Mode.


364
00:09:47,066 --> 00:09:48,236
There are a few other properties


365
00:09:48,236 --> 00:09:49,876
that your application can use to


366
00:09:49,876 --> 00:09:51,306
make decisions about what to do


367
00:09:51,586 --> 00:09:52,336
on a given network.


368
00:09:53,376 --> 00:09:54,946
There is the expensive property,


369
00:09:55,016 --> 00:09:55,746
which we introduced in


370
00:09:55,746 --> 00:09:56,936
Network.framework last year and


371
00:09:56,936 --> 00:09:58,336
we're bringing to URLSession


372
00:09:58,406 --> 00:09:58,656
with the


373
00:09:58,656 --> 00:09:59,976
allowsExpensiveNetworkAccess


374
00:09:59,976 --> 00:10:02,386
property this year.


375
00:10:03,656 --> 00:10:06,056
There's also checks for specific


376
00:10:06,056 --> 00:10:07,346
interface types, such as


377
00:10:07,346 --> 00:10:08,526
Cellular or Wi-Fi.


378
00:10:09,896 --> 00:10:11,006
If you haven't adopted any of


379
00:10:11,006 --> 00:10:12,226
these things yet, you're in a


380
00:10:12,226 --> 00:10:13,606
great position to focus on


381
00:10:13,606 --> 00:10:14,886
adopting Low Data Mode and


382
00:10:14,886 --> 00:10:16,046
that's definitely the way to go.


383
00:10:16,846 --> 00:10:18,006
With Low Data Mode, which


384
00:10:18,006 --> 00:10:19,196
correlates to the constrained


385
00:10:19,236 --> 00:10:22,646
property, the user has control.


386
00:10:22,776 --> 00:10:24,396
They have a setting they control


387
00:10:24,396 --> 00:10:25,466
that with.


388
00:10:25,466 --> 00:10:26,766
Expensive, on the other hand, is


389
00:10:26,766 --> 00:10:27,976
a property that's set by the


390
00:10:27,976 --> 00:10:29,946
system and it's almost always


391
00:10:29,996 --> 00:10:31,386
set for cellular networks and


392
00:10:31,386 --> 00:10:32,976
it's also set for Wi-Fi networks


393
00:10:33,016 --> 00:10:34,106
when they're associated with a


394
00:10:34,106 --> 00:10:35,196
Personal Hotspot.


395
00:10:36,316 --> 00:10:37,946
You can also check for cellular,


396
00:10:38,286 --> 00:10:39,536
but that also is something that


397
00:10:39,536 --> 00:10:40,916
the user has no control over.


398
00:10:41,896 --> 00:10:42,766
So, if you're currently doing


399
00:10:42,766 --> 00:10:44,086
any checks based on cellular


400
00:10:44,146 --> 00:10:45,386
interfaces or expensive


401
00:10:45,436 --> 00:10:47,116
properties, it's a really great


402
00:10:47,116 --> 00:10:49,406
idea to move over to doing-- to


403
00:10:49,406 --> 00:10:51,166
using constrained and taking


404
00:10:51,166 --> 00:10:52,226
advantage of Low Data Mode.


405
00:10:52,886 --> 00:10:54,606
If you've looked at these


406
00:10:54,606 --> 00:10:55,896
options and you've decided that


407
00:10:55,896 --> 00:10:57,166
you still want to be making


408
00:10:57,166 --> 00:10:58,126
decisions based on whether


409
00:10:58,126 --> 00:10:59,626
something's expensive or


410
00:10:59,626 --> 00:11:01,636
cellular, we strongly encourage


411
00:11:01,636 --> 00:11:02,566
you to use expensive.


412
00:11:03,746 --> 00:11:05,336
Expensive is a lot more flexible


413
00:11:05,336 --> 00:11:07,196
and in many ways it effectively


414
00:11:07,196 --> 00:11:09,026
futureproofs your application.


415
00:11:09,676 --> 00:11:11,186
Right now, cellular networks are


416
00:11:11,186 --> 00:11:12,046
almost always marked as


417
00:11:12,046 --> 00:11:13,426
expensive, but they may not be


418
00:11:13,426 --> 00:11:14,726
in the future and there are


419
00:11:14,726 --> 00:11:16,106
other interface types that may


420
00:11:16,106 --> 00:11:17,476
come around that may also be


421
00:11:17,476 --> 00:11:17,956
expensive.


422
00:11:18,456 --> 00:11:19,846
By using the expensive property,


423
00:11:19,956 --> 00:11:21,236
your application is going to do


424
00:11:21,236 --> 00:11:22,346
the right thing in the future


425
00:11:22,346 --> 00:11:23,346
with different interfaces.


426
00:11:23,996 --> 00:11:24,686
If you're checking for a


427
00:11:24,686 --> 00:11:25,726
specific interface such as


428
00:11:25,726 --> 00:11:27,326
cellular, you're not going to be


429
00:11:27,326 --> 00:11:29,316
able to take advantage of that.


430
00:11:29,916 --> 00:11:31,116
I'm really excited to see what


431
00:11:31,116 --> 00:11:32,606
you guys do adopting Low Data


432
00:11:32,606 --> 00:11:32,816
Mode.


433
00:11:33,146 --> 00:11:34,216
Thank you so much for your time.


434
00:11:34,456 --> 00:11:35,426
With that, I'd like to have


435
00:11:35,426 --> 00:11:36,936
Guoye come up to talk about


436
00:11:36,936 --> 00:11:38,566
Combine in URLSession.


437
00:11:39,516 --> 00:11:42,636
[ Applause ]


438
00:11:43,136 --> 00:11:43,726
>> Thank you, Josh.


439
00:11:45,096 --> 00:11:45,916
Good morning.


440
00:11:46,206 --> 00:11:48,346
I'm Guoye Zhang.


441
00:11:48,696 --> 00:11:50,616
I'm excited to tell you today


442
00:11:50,886 --> 00:11:52,366
about how we are supporting a


443
00:11:52,366 --> 00:11:54,026
new Swift framework, Combine in


444
00:11:54,026 --> 00:11:56,466
URLSession, and how you can use


445
00:11:56,466 --> 00:11:57,866
Combine to streamline your


446
00:11:57,866 --> 00:11:59,386
networking code.


447
00:12:00,976 --> 00:12:03,446
Combine brings decorative


448
00:12:03,766 --> 00:12:04,976
asynchronous programming to


449
00:12:04,976 --> 00:12:05,486
Swift.


450
00:12:06,446 --> 00:12:09,486
To explain what it is, let me


451
00:12:09,586 --> 00:12:11,266
start with an example of


452
00:12:11,266 --> 00:12:12,806
building a responsive search


453
00:12:12,806 --> 00:12:13,156
field.


454
00:12:13,786 --> 00:12:16,826
So, search field publishes


455
00:12:16,826 --> 00:12:19,676
values whenever user types and


456
00:12:19,676 --> 00:12:21,446
sink here subscribes and


457
00:12:21,446 --> 00:12:23,436
receives a URL to start a


458
00:12:23,436 --> 00:12:24,006
search.


459
00:12:24,556 --> 00:12:27,326
In-between, we use the map


460
00:12:27,326 --> 00:12:30,416
operator to map the value into a


461
00:12:30,416 --> 00:12:30,626
URL.


462
00:12:33,526 --> 00:12:35,496
Now, let's suppose I only want


463
00:12:35,496 --> 00:12:37,306
to start a search when there is


464
00:12:37,346 --> 00:12:38,316
enough content.


465
00:12:38,916 --> 00:12:42,406
We can use the filter operator.


466
00:12:43,896 --> 00:12:45,566
The filter operator in this case


467
00:12:45,946 --> 00:12:47,956
drops all strings shorter than


468
00:12:48,026 --> 00:12:48,916
three characters.


469
00:12:52,406 --> 00:12:54,926
Now we've eliminated the user's


470
00:12:54,926 --> 00:12:57,056
queries like a single H.


471
00:12:57,896 --> 00:13:00,066
However, the search still


472
00:13:00,066 --> 00:13:01,526
happens too frequently.


473
00:13:02,286 --> 00:13:04,526
What if I only want to search


474
00:13:04,806 --> 00:13:06,356
when user stops typing for a


475
00:13:06,356 --> 00:13:06,756
moment.


476
00:13:07,396 --> 00:13:11,426
We can use debounce operator.


477
00:13:12,516 --> 00:13:17,776
[ Applause ]


478
00:13:18,276 --> 00:13:20,576
So, debounce delays the value


479
00:13:20,896 --> 00:13:22,566
and only forwards it when there


480
00:13:22,566 --> 00:13:24,686
is a significant delay, in this


481
00:13:24,686 --> 00:13:26,486
case 0.2 seconds.


482
00:13:30,316 --> 00:13:33,296
However, with debounce, if user


483
00:13:33,296 --> 00:13:35,186
types something and deletes it,


484
00:13:35,646 --> 00:13:37,176
we might end up sending the same


485
00:13:37,176 --> 00:13:38,766
value down the chain and


486
00:13:38,766 --> 00:13:40,806
starting the same search over


487
00:13:40,806 --> 00:13:43,136
and over again.


488
00:13:43,356 --> 00:13:45,786
To solve this, we can add the


489
00:13:45,786 --> 00:13:47,416
removeDuplicates operator.


490
00:13:49,036 --> 00:13:51,836
removeDuplicates remembers the


491
00:13:51,836 --> 00:13:54,346
last value received and only


492
00:13:54,346 --> 00:13:55,616
forwards a new value when it


493
00:13:55,616 --> 00:13:56,526
changes.


494
00:14:01,356 --> 00:14:03,526
Now we have the final version of


495
00:14:03,526 --> 00:14:05,596
the search field by changing


496
00:14:05,596 --> 00:14:07,696
these powerful operators, your


497
00:14:07,696 --> 00:14:09,806
asynchronous code be linear and


498
00:14:09,806 --> 00:14:10,656
composable.


499
00:14:16,116 --> 00:14:19,726
Combine processes values over


500
00:14:19,726 --> 00:14:20,196
time.


501
00:14:21,336 --> 00:14:23,866
It consists of publishers,


502
00:14:24,146 --> 00:14:26,216
operators, and subscribers.


503
00:14:27,596 --> 00:14:30,166
The chain is driven by the


504
00:14:30,166 --> 00:14:31,466
request sent from the


505
00:14:31,466 --> 00:14:32,526
subscriber.


506
00:14:34,236 --> 00:14:36,136
In response to the request,


507
00:14:36,676 --> 00:14:38,236
publisher sends value down the


508
00:14:38,236 --> 00:14:38,536
chain.


509
00:14:39,486 --> 00:14:41,436
This is how that pressure is


510
00:14:41,436 --> 00:14:42,476
handled by Combine.


511
00:14:43,116 --> 00:14:46,376
If you want to learn more,


512
00:14:47,306 --> 00:14:48,866
Introducing Combine session


513
00:14:48,866 --> 00:14:50,596
video will be available shortly


514
00:14:51,076 --> 00:14:52,536
and I encourage you to attend


515
00:14:52,796 --> 00:14:54,676
Combine in Practice sessions


516
00:14:55,426 --> 00:14:58,276
this afternoon.


517
00:14:58,436 --> 00:15:00,326
Networking is inherently


518
00:15:00,326 --> 00:15:02,006
asynchronous, that's why it's


519
00:15:02,006 --> 00:15:03,356
perfect to adopt Combine.


520
00:15:05,396 --> 00:15:07,706
This year, we're introducing


521
00:15:07,706 --> 00:15:10,206
DataTaskPublisher in URLSession.


522
00:15:10,876 --> 00:15:13,076
It is a single value publisher


523
00:15:13,616 --> 00:15:14,936
and it works similarly to our


524
00:15:14,996 --> 00:15:16,276
existing closure based


525
00:15:16,276 --> 00:15:18,946
convenience methods, which means


526
00:15:18,946 --> 00:15:20,736
you can create it from a shared


527
00:15:20,736 --> 00:15:23,016
URLSession or from your own


528
00:15:23,016 --> 00:15:24,706
URLSession and receive


529
00:15:24,706 --> 00:15:26,386
authentication challenges and


530
00:15:26,386 --> 00:15:27,986
metrics on your delegate.


531
00:15:28,576 --> 00:15:31,386
This is the interface of


532
00:15:31,386 --> 00:15:32,556
DataTaskPublisher.


533
00:15:33,116 --> 00:15:35,746
It conforms to the publisher


534
00:15:35,746 --> 00:15:37,006
protocol.


535
00:15:37,806 --> 00:15:39,926
On success, it sends you a true


536
00:15:39,926 --> 00:15:41,906
pool of data and response.


537
00:15:42,196 --> 00:15:44,526
On failure, it sends you an URL


538
00:15:44,526 --> 00:15:44,976
error.


539
00:15:48,416 --> 00:15:50,206
Now, let me give you a demo on


540
00:15:50,206 --> 00:15:51,976
how Combine works in URLSession.


541
00:15:59,006 --> 00:16:00,186
So, for the purpose of this


542
00:16:00,186 --> 00:16:02,766
demo, I've disabled URL cache,


543
00:16:02,966 --> 00:16:04,536
so all the resources to fetch


544
00:16:04,536 --> 00:16:05,456
over the network.


545
00:16:06,296 --> 00:16:08,126
I've also used Network Link


546
00:16:08,226 --> 00:16:09,866
Conditioner to simulate a


547
00:16:09,866 --> 00:16:10,976
realistic 3G environment.


548
00:16:16,426 --> 00:16:18,396
So, I am building this for a bar


549
00:16:18,396 --> 00:16:19,286
called PubSocket.


550
00:16:20,636 --> 00:16:23,536
This app shows name, image, and


551
00:16:23,536 --> 00:16:25,546
item price of each item in the


552
00:16:25,546 --> 00:16:25,956
bar.


553
00:16:27,956 --> 00:16:29,676
So, after listening to Josh's


554
00:16:29,676 --> 00:16:31,326
talk about Low Data Mode, I've


555
00:16:31,326 --> 00:16:32,626
decided to provide a


556
00:16:32,626 --> 00:16:34,346
high-resolution image and a


557
00:16:34,346 --> 00:16:36,206
low-resolution image for Low


558
00:16:36,696 --> 00:16:37,756
Data Mode.


559
00:16:37,976 --> 00:16:39,336
Right now I'm in Low Data Mode,


560
00:16:39,336 --> 00:16:40,726
so you see these black and white


561
00:16:40,726 --> 00:16:40,976
images.


562
00:16:43,686 --> 00:16:45,296
And if I switch off Low Data


563
00:16:49,036 --> 00:16:50,676
Mode, these images are replaced


564
00:16:50,676 --> 00:16:51,656
with the high-resolution


565
00:16:51,656 --> 00:16:51,976
variant.


566
00:16:55,416 --> 00:16:56,896
Let's see how this is currently


567
00:16:56,896 --> 00:16:57,946
implemented without Combine.


568
00:17:04,876 --> 00:17:06,516
So the interface is built in


569
00:17:06,516 --> 00:17:09,396
UITableView and here we have the


570
00:17:09,396 --> 00:17:11,516
data source method cellForRowAt


571
00:17:11,516 --> 00:17:12,236
indexPath.


572
00:17:13,156 --> 00:17:15,675
In this method, we dequeue a


573
00:17:15,675 --> 00:17:18,266
reusable cell and configure the


574
00:17:18,266 --> 00:17:19,866
name and price of each item on


575
00:17:19,866 --> 00:17:20,366
the cell.


576
00:17:21,596 --> 00:17:25,626
Then we start a URL request to


577
00:17:25,626 --> 00:17:27,386
fetch the high-resolution image


578
00:17:27,516 --> 00:17:29,176
and disable constrained network


579
00:17:29,176 --> 00:17:29,816
access.


580
00:17:31,116 --> 00:17:33,196
pubSession here is the shared


581
00:17:33,196 --> 00:17:35,066
global session we use in


582
00:17:35,066 --> 00:17:37,496
PubSocket app and we use the


583
00:17:37,496 --> 00:17:39,296
pubSession to create a data task


584
00:17:39,296 --> 00:17:40,226
from the request.


585
00:17:44,376 --> 00:17:46,826
When task finishes, we check to


586
00:17:46,826 --> 00:17:48,546
see if the status code is 200.


587
00:17:48,546 --> 00:17:50,796
OK. We convert the data into the


588
00:17:50,796 --> 00:17:52,496
image and put the image on the


589
00:17:52,496 --> 00:17:52,946
cell.


590
00:17:59,496 --> 00:18:01,446
When task fails due to Low Data


591
00:18:01,446 --> 00:18:04,256
Mode, we create a new data task


592
00:18:04,556 --> 00:18:05,746
to fetch the low-resolution


593
00:18:05,746 --> 00:18:05,976
image.


594
00:18:09,556 --> 00:18:10,776
And we do the same thing here.


595
00:18:10,776 --> 00:18:13,406
We check the status code, we


596
00:18:13,406 --> 00:18:14,806
convert the image, and put it on


597
00:18:14,806 --> 00:18:14,976
the cell.


598
00:18:17,576 --> 00:18:18,686
Don't forget to resume these


599
00:18:18,686 --> 00:18:18,916
tasks.


600
00:18:23,696 --> 00:18:26,056
So, as a networking engineer, I


601
00:18:26,056 --> 00:18:27,616
know the networking logic here


602
00:18:27,616 --> 00:18:28,176
is solid.


603
00:18:29,216 --> 00:18:30,556
I'm adhering to the best


604
00:18:30,556 --> 00:18:31,686
practice of not doing any


605
00:18:31,686 --> 00:18:32,566
pre-fetch acts.


606
00:18:33,236 --> 00:18:36,046
However, I'm not very happy with


607
00:18:36,046 --> 00:18:38,196
the current code because it has


608
00:18:38,196 --> 00:18:39,566
lots of duplications.


609
00:18:40,476 --> 00:18:42,236
We are checking the status code,


610
00:18:42,236 --> 00:18:46,796
converting the image twice.


611
00:18:46,966 --> 00:18:48,796
Also, you might have noticed


612
00:18:49,056 --> 00:18:50,286
I've made the very common


613
00:18:50,286 --> 00:18:52,436
mistake of capturing the cell


614
00:18:52,436 --> 00:18:53,676
and putting the image on the


615
00:18:53,676 --> 00:18:54,976
cell asynchronously.


616
00:18:57,126 --> 00:18:58,596
The cell could have already been


617
00:18:58,596 --> 00:19:00,516
reused at this time by UIKit.


618
00:19:02,446 --> 00:19:03,926
So, I'm going to show you the


619
00:19:03,926 --> 00:19:04,256
bug.


620
00:19:04,256 --> 00:19:07,026
I'm going to scroll down very


621
00:19:07,026 --> 00:19:07,426
quickly.


622
00:19:07,426 --> 00:19:08,946
Please pay attention to the last


623
00:19:08,946 --> 00:19:10,236
few items on the menu.


624
00:19:10,796 --> 00:19:13,546
As you can see, hot dog and


625
00:19:13,546 --> 00:19:15,086
drumstick have the wrong image


626
00:19:15,086 --> 00:19:15,476
being placed.


627
00:19:19,086 --> 00:19:20,526
Let me do it again.


628
00:19:20,526 --> 00:19:21,636
I'm going to scroll up to the


629
00:19:21,636 --> 00:19:21,986
top.


630
00:19:21,986 --> 00:19:23,176
Please pay attention to the


631
00:19:23,176 --> 00:19:24,356
first few items.


632
00:19:27,436 --> 00:19:28,686
Yeah, root beer and fries have


633
00:19:28,686 --> 00:19:30,396
the wrong image being placed on


634
00:19:30,396 --> 00:19:31,456
them before they are replaced


635
00:19:31,456 --> 00:19:31,976
with the correct one.


636
00:19:37,506 --> 00:19:38,886
Now let's see how we can use


637
00:19:38,886 --> 00:19:40,746
Combine to fix all these issues.


638
00:19:42,676 --> 00:19:44,666
First, let me delete this code


639
00:19:44,666 --> 00:19:44,976
to fetch.


640
00:19:49,666 --> 00:19:50,446
Here we have the


641
00:19:50,446 --> 00:19:52,446
MenuItemTableViewCell class


642
00:19:52,446 --> 00:19:52,746
here.


643
00:19:53,146 --> 00:19:55,816
So, cell receives an image, so


644
00:19:55,816 --> 00:19:57,106
it's a good place to put a


645
00:19:57,106 --> 00:19:58,866
subscriber on it.


646
00:20:00,076 --> 00:20:02,186
The subscriber here conforms to


647
00:20:02,186 --> 00:20:03,526
any cancelable protocol.


648
00:20:04,796 --> 00:20:07,096
We can cancel the subscriber in


649
00:20:08,676 --> 00:20:10,486
prepare for reuse method.


650
00:20:11,036 --> 00:20:12,326
The cancellation happens


651
00:20:12,326 --> 00:20:13,886
immediately, which means we


652
00:20:13,886 --> 00:20:15,586
won't ever get the chance of any


653
00:20:15,586 --> 00:20:16,736
image being placed on the wrong


654
00:20:16,736 --> 00:20:17,106
cell.


655
00:20:18,996 --> 00:20:20,556
Now let's go back to the


656
00:20:20,556 --> 00:20:22,196
TableView data source method,


657
00:20:22,196 --> 00:20:23,776
cellForRowAt indexPath.


658
00:20:26,256 --> 00:20:28,046
We start by doing the same


659
00:20:28,046 --> 00:20:30,216
thing, create a URL request and


660
00:20:30,386 --> 00:20:31,916
fetch the high-resolution image


661
00:20:32,156 --> 00:20:33,626
and disable constrained network


662
00:20:33,626 --> 00:20:34,116
access.


663
00:20:34,926 --> 00:20:36,876
But instead of a data task, we


664
00:20:36,876 --> 00:20:38,756
create a data task publisher for


665
00:20:38,756 --> 00:20:39,446
the request.


666
00:20:44,156 --> 00:20:46,536
Then we use the new tryCatch


667
00:20:46,536 --> 00:20:47,766
operator in Combine.


668
00:20:48,336 --> 00:20:50,446
The tryCatch operator catches


669
00:20:50,446 --> 00:20:51,466
the error produced by


670
00:20:51,466 --> 00:20:53,856
DataTaskPublisher and if the


671
00:20:53,856 --> 00:20:55,506
task failed because of Low Data


672
00:20:55,506 --> 00:20:57,856
Mode, we replace the publisher


673
00:20:57,856 --> 00:20:59,236
with the new publisher to fetch


674
00:20:59,236 --> 00:21:01,146
the low-resolution image.


675
00:21:02,776 --> 00:21:04,486
Otherwise, we just rethrow the


676
00:21:04,486 --> 00:21:05,686
same error down the chain.


677
00:21:10,336 --> 00:21:13,226
Next, let's use tryMap operator


678
00:21:13,416 --> 00:21:15,036
to handle the success case where


679
00:21:15,036 --> 00:21:16,206
we receive the data and the


680
00:21:16,206 --> 00:21:16,956
response.


681
00:21:17,406 --> 00:21:18,986
We check the status code and


682
00:21:18,986 --> 00:21:20,566
create an image from the data.


683
00:21:21,876 --> 00:21:23,606
This map handles both


684
00:21:23,936 --> 00:21:25,286
high-resolution image and


685
00:21:25,286 --> 00:21:26,446
low-resolution image,


686
00:21:26,856 --> 00:21:27,896
eliminating the code


687
00:21:27,896 --> 00:21:28,646
duplication.


688
00:21:33,556 --> 00:21:35,926
Finally, we replace the error


689
00:21:35,926 --> 00:21:38,776
with a placeholder image, switch


690
00:21:38,776 --> 00:21:40,566
the main queue, and use the


691
00:21:40,566 --> 00:21:42,646
assigned subscriber to put the


692
00:21:42,646 --> 00:21:43,596
image on the cell.


693
00:21:51,096 --> 00:21:52,136
Now, this is pretty good.


694
00:21:52,396 --> 00:21:53,976
We've implemented the same logic


695
00:21:53,976 --> 00:21:55,396
with much shorter code and


696
00:21:55,396 --> 00:21:56,076
linear code.


697
00:21:57,436 --> 00:21:58,756
But can we do more?


698
00:21:59,726 --> 00:22:01,336
There is one more operator I


699
00:22:01,336 --> 00:22:02,226
want to show you.


700
00:22:02,786 --> 00:22:04,506
It is called retry.


701
00:22:06,936 --> 00:22:09,446
Imagine what you have to-- what


702
00:22:09,446 --> 00:22:11,426
you have to do before to support


703
00:22:11,426 --> 00:22:11,976
retry.


704
00:22:12,586 --> 00:22:16,276
You have to either call the data


705
00:22:16,276 --> 00:22:19,686
task creator recursively or


706
00:22:19,686 --> 00:22:20,996
maintain a state machine.


707
00:22:22,486 --> 00:22:24,976
Now in Combine, I can just put


708
00:22:24,976 --> 00:22:28,346
retry operator right here before


709
00:22:28,346 --> 00:22:29,596
we replace the error.


710
00:22:32,516 --> 00:22:37,826
[ Applause ]


711
00:22:38,326 --> 00:22:40,276
So, retry catches the errors


712
00:22:40,276 --> 00:22:43,116
thrown here and it retries by


713
00:22:43,116 --> 00:22:44,406
restarting the chain of


714
00:22:44,406 --> 00:22:46,466
operators and fetches the image


715
00:22:46,466 --> 00:22:46,906
again.


716
00:22:46,906 --> 00:22:49,656
In this case, I'm just retrying


717
00:22:49,656 --> 00:22:49,856
once.


718
00:22:53,816 --> 00:22:55,616
So, networking APIs on all


719
00:22:55,616 --> 00:22:57,166
platforms are designed to be


720
00:22:57,166 --> 00:22:59,576
very reliable, so in general you


721
00:22:59,576 --> 00:23:00,646
don't need to retry.


722
00:23:01,306 --> 00:23:03,466
However, your app might need to


723
00:23:03,466 --> 00:23:05,066
connect with some flaky server


724
00:23:05,066 --> 00:23:07,496
or meta boxes that gives you 500


725
00:23:07,496 --> 00:23:09,136
server errors frequently.


726
00:23:09,666 --> 00:23:12,906
In this case, this tryMap


727
00:23:12,906 --> 00:23:14,876
operator will throw an invalid


728
00:23:14,876 --> 00:23:16,756
server response error, which can


729
00:23:16,756 --> 00:23:17,956
be caught by retry.


730
00:23:21,536 --> 00:23:23,296
But please be aware that


731
00:23:23,296 --> 00:23:24,906
networking operation is very


732
00:23:24,906 --> 00:23:27,336
expensive; retry is no


733
00:23:27,336 --> 00:23:29,666
exception, so avoid retry if


734
00:23:29,666 --> 00:23:30,396
possible.


735
00:23:30,956 --> 00:23:32,996
If you have to retry, start with


736
00:23:32,996 --> 00:23:34,066
a very low number.


737
00:23:35,916 --> 00:23:37,826
Also, please pay attention to


738
00:23:37,826 --> 00:23:39,686
the idempotence of your request.


739
00:23:40,876 --> 00:23:43,206
In my app, downloading an image


740
00:23:43,206 --> 00:23:45,436
twice is fine, but if your app


741
00:23:45,436 --> 00:23:46,856
handles transaction like


742
00:23:46,856 --> 00:23:49,236
payment, blindly retrying could


743
00:23:49,236 --> 00:23:50,286
be very dangerous.


744
00:23:56,286 --> 00:23:57,806
Now let me turn on Low Data Mode


745
00:23:57,806 --> 00:23:57,976
again.


746
00:24:06,266 --> 00:24:07,606
And let's see the app running


747
00:24:07,606 --> 00:24:07,846
again.


748
00:24:23,286 --> 00:24:24,676
As you can see, we fetched the


749
00:24:24,676 --> 00:24:25,826
low-resolution images just like


750
00:24:25,826 --> 00:24:25,976
before.


751
00:24:29,066 --> 00:24:30,616
And if I turn off Low Data Mode,


752
00:24:34,416 --> 00:24:36,716
the same high-resolution images


753
00:24:36,976 --> 00:24:38,496
and we won't get any wrong


754
00:24:38,496 --> 00:24:39,976
images being placed on the cell.


755
00:24:44,516 --> 00:24:52,206
[ Applause ]


756
00:24:52,706 --> 00:24:55,646
OK. Let's go back to the slides.


757
00:24:59,046 --> 00:25:01,086
To recap, I've just shown you


758
00:25:01,086 --> 00:25:02,276
how Combine can make your


759
00:25:02,276 --> 00:25:05,306
networking code concise, linear,


760
00:25:05,516 --> 00:25:07,396
and less error-prone.


761
00:25:08,156 --> 00:25:09,646
I've also shown you how


762
00:25:09,646 --> 00:25:11,146
composable these Combine


763
00:25:11,146 --> 00:25:12,946
operators are, that you can


764
00:25:12,946 --> 00:25:14,396
support retry by just adding


765
00:25:14,396 --> 00:25:15,346
one-off code.


766
00:25:16,256 --> 00:25:18,536
But please pay attention to use


767
00:25:18,536 --> 00:25:20,636
low retry count and only retry


768
00:25:20,636 --> 00:25:22,036
idempotent requests.


769
00:25:23,026 --> 00:25:25,576
Finally, I've shown you how you


770
00:25:25,936 --> 00:25:28,056
can use Combine with Low Data


771
00:25:28,056 --> 00:25:30,166
Mode without doing any pre-fetch


772
00:25:30,166 --> 00:25:30,546
checks.


773
00:25:34,176 --> 00:25:35,736
Here is the code I extracted


774
00:25:35,736 --> 00:25:37,666
from my demo to do adaptive


775
00:25:37,666 --> 00:25:39,026
loading for Low Data Mode.


776
00:25:39,636 --> 00:25:43,276
It takes a regular URL and a low


777
00:25:43,276 --> 00:25:45,846
data URL and gives you back a


778
00:25:45,846 --> 00:25:48,696
publisher of data.


779
00:25:48,876 --> 00:25:51,906
First, we create a-- we create a


780
00:25:51,906 --> 00:25:53,946
request to fetch the regular URL


781
00:25:54,156 --> 00:25:55,696
and disable constrained network


782
00:25:55,696 --> 00:25:56,186
access.


783
00:25:57,196 --> 00:25:58,976
We use the URL-- we use the


784
00:25:58,976 --> 00:26:00,676
request to create a data task


785
00:26:00,676 --> 00:26:01,376
publisher.


786
00:26:03,116 --> 00:26:05,516
Then, immediately then we handle


787
00:26:05,516 --> 00:26:08,106
the error caused by Low Data


788
00:26:08,106 --> 00:26:09,916
Mode and then we replace the


789
00:26:09,916 --> 00:26:11,336
publisher with a new publisher


790
00:26:11,516 --> 00:26:13,376
to fetch the low data URL.


791
00:26:13,866 --> 00:26:17,466
Next, we handle both success


792
00:26:17,466 --> 00:26:19,486
cases together, checking the


793
00:26:19,556 --> 00:26:21,346
status code and give the data


794
00:26:21,346 --> 00:26:21,976
back to you.


795
00:26:25,796 --> 00:26:27,066
You can use this code as a


796
00:26:27,066 --> 00:26:29,076
starting point of Combine and


797
00:26:29,076 --> 00:26:31,156
Low Data Mode and customize this


798
00:26:31,156 --> 00:26:31,936
code to your needs.


799
00:26:34,096 --> 00:26:35,646
I have to mention that some of


800
00:26:35,646 --> 00:26:37,316
the APIs are not available yet


801
00:26:37,406 --> 00:26:38,216
in current SDK.


802
00:26:38,216 --> 00:26:40,166
We are working on getting them


803
00:26:40,166 --> 00:26:41,816
into a future beta.


804
00:26:45,486 --> 00:26:46,956
Next, I want to invite my


805
00:26:46,956 --> 00:26:49,236
colleague Jiten to talk about


806
00:26:49,236 --> 00:26:49,956
WebSocket.


807
00:26:50,726 --> 00:26:51,946
>> Thank you, Guoye.


808
00:26:51,946 --> 00:26:54,166
Good morning everyone.


809
00:26:54,606 --> 00:26:56,946
My name is Jiten Mehta and I'm


810
00:26:56,946 --> 00:26:58,506
excited to talk to you about the


811
00:26:58,506 --> 00:27:00,516
WebSocket protocol in Apple's


812
00:27:00,516 --> 00:27:03,026
networking frameworks new in iOS


813
00:27:03,076 --> 00:27:05,026
13 and macOS Catalina.


814
00:27:06,726 --> 00:27:08,696
In the past years, a large


815
00:27:08,696 --> 00:27:09,886
number of developers have asked


816
00:27:09,886 --> 00:27:11,446
us for the WebSocket protocol


817
00:27:11,446 --> 00:27:13,216
support in Apple's frameworks.


818
00:27:14,096 --> 00:27:15,516
In fact, it was the number one


819
00:27:15,516 --> 00:27:16,666
developer request from a


820
00:27:16,666 --> 00:27:18,066
networking survey that we


821
00:27:18,066 --> 00:27:18,976
conducted last year.


822
00:27:22,456 --> 00:27:24,526
WebSocket allows bidirectional


823
00:27:24,526 --> 00:27:26,816
communication over a single HTTP


824
00:27:26,816 --> 00:27:27,496
connection.


825
00:27:28,676 --> 00:27:30,346
This enables developers to write


826
00:27:30,346 --> 00:27:31,966
applications like chat,


827
00:27:32,736 --> 00:27:34,356
multiplayer games, and other


828
00:27:34,356 --> 00:27:36,166
real-time applications.


829
00:27:36,976 --> 00:27:38,606
WebSocket works over the


830
00:27:38,606 --> 00:27:41,386
well-known HTTP ports and is


831
00:27:41,446 --> 00:27:42,816
fully compatible with the


832
00:27:42,816 --> 00:27:44,426
existing web infrastructure,


833
00:27:44,796 --> 00:27:46,176
allowing you to connect to


834
00:27:46,246 --> 00:27:48,886
proxies, CDNs, and firewalls.


835
00:27:50,256 --> 00:27:52,156
Historically, the WebSocket


836
00:27:52,156 --> 00:27:54,316
protocol has been available as a


837
00:27:54,316 --> 00:27:56,686
JavaScript API in web browsers,


838
00:27:57,866 --> 00:27:59,146
but looking at the benefits that


839
00:27:59,146 --> 00:28:00,636
WebSocket brings to web apps,


840
00:28:00,936 --> 00:28:03,206
we've decided to extend this API


841
00:28:03,426 --> 00:28:05,446
to our networking framework in


842
00:28:05,446 --> 00:28:07,026
addition to the existing


843
00:28:07,026 --> 00:28:09,176
JavaScript API already available


844
00:28:09,176 --> 00:28:09,906
in web views.


845
00:28:11,226 --> 00:28:12,746
This enables you to use your


846
00:28:12,746 --> 00:28:14,856
existing web infrastructure and


847
00:28:14,856 --> 00:28:16,166
bring it to your native apps on


848
00:28:16,226 --> 00:28:16,976
Apple's platforms.


849
00:28:20,476 --> 00:28:22,106
Before we talk about WebSocket,


850
00:28:22,836 --> 00:28:24,186
let's take a look at a common


851
00:28:24,186 --> 00:28:26,516
technique used today to enable


852
00:28:26,516 --> 00:28:28,056
bidirectional communication.


853
00:28:29,136 --> 00:28:30,856
Let's take a chat application as


854
00:28:30,856 --> 00:28:31,456
an example.


855
00:28:31,956 --> 00:28:34,726
When a client wants to receive a


856
00:28:34,726 --> 00:28:36,096
response from the server, it


857
00:28:36,096 --> 00:28:37,056
sends out a request.


858
00:28:38,266 --> 00:28:40,046
The server responds with a 200


859
00:28:40,046 --> 00:28:42,006
status code immediately, but it


860
00:28:42,006 --> 00:28:43,496
does not send out the response


861
00:28:43,496 --> 00:28:45,116
body because it doesn't have one


862
00:28:45,116 --> 00:28:45,706
at this point.


863
00:28:46,866 --> 00:28:48,536
Sometime in the future, once the


864
00:28:48,536 --> 00:28:50,336
server has a response ready for


865
00:28:50,336 --> 00:28:52,146
the client, it sends it out to


866
00:28:52,146 --> 00:28:52,576
the client.


867
00:28:53,356 --> 00:28:55,116
At which point, the client sends


868
00:28:55,116 --> 00:28:56,656
a new request, indicating that


869
00:28:56,656 --> 00:28:58,066
it wants to receive the next


870
00:28:58,066 --> 00:28:58,536
message.


871
00:28:59,916 --> 00:29:01,606
This is known as long polling,


872
00:29:02,206 --> 00:29:03,666
but there are some disadvantages


873
00:29:03,666 --> 00:29:04,976
associated with long polling.


874
00:29:06,436 --> 00:29:08,176
Both the end points when they


875
00:29:08,176 --> 00:29:09,916
want to send messages have to


876
00:29:09,916 --> 00:29:12,396
either send an HTTP request or


877
00:29:12,396 --> 00:29:14,786
an HTTP response, which is a lot


878
00:29:14,786 --> 00:29:15,336
of overhead.


879
00:29:16,836 --> 00:29:18,536
Additionally, complexity has to


880
00:29:18,696 --> 00:29:19,936
be maintained at the server to


881
00:29:19,936 --> 00:29:21,176
enable long polling.


882
00:29:22,726 --> 00:29:24,226
Let's see how WebSockets can


883
00:29:24,226 --> 00:29:25,396
solve this problem for us.


884
00:29:25,936 --> 00:29:29,446
As the first part of the first


885
00:29:29,446 --> 00:29:31,086
step of the WebSocket handshake,


886
00:29:31,336 --> 00:29:33,586
the client sends out a request


887
00:29:33,766 --> 00:29:35,416
to the server, indicating that


888
00:29:35,416 --> 00:29:36,696
it wants to upgrade this


889
00:29:36,696 --> 00:29:37,766
connection to WebSocket.


890
00:29:39,206 --> 00:29:41,376
The server responds with the 101


891
00:29:41,456 --> 00:29:42,996
switching protocol to response,


892
00:29:43,566 --> 00:29:45,126
at which point we have a


893
00:29:45,126 --> 00:29:47,076
bidirectional stream between the


894
00:29:47,076 --> 00:29:47,966
two end points.


895
00:29:48,506 --> 00:29:51,286
Both the end points are now free


896
00:29:51,286 --> 00:29:52,956
to send messages in either


897
00:29:52,956 --> 00:29:53,526
direction.


898
00:29:54,096 --> 00:29:56,716
They can send messages like data


899
00:29:57,026 --> 00:29:59,246
string or ping and pong frames


900
00:29:59,566 --> 00:30:03,566
without any HTTP overhead.


901
00:30:03,566 --> 00:30:05,426
URLSession is Apple's


902
00:30:05,426 --> 00:30:07,056
recommended API for HTTP.


903
00:30:07,056 --> 00:30:09,986
And this year we are excited to


904
00:30:10,046 --> 00:30:10,816
announce


905
00:30:10,986 --> 00:30:13,216
URLSessionWebSocketTask, a new


906
00:30:13,216 --> 00:30:14,976
API in the foundation framework.


907
00:30:15,516 --> 00:30:20,816
[ Cheering and Applause ]


908
00:30:21,316 --> 00:30:22,906
To create a WebSocket task, you


909
00:30:22,906 --> 00:30:24,626
can simply pass in the URL that


910
00:30:24,626 --> 00:30:26,046
you want to connect to and call


911
00:30:26,046 --> 00:30:26,736
resume.


912
00:30:27,406 --> 00:30:28,996
We will start the handshake and


913
00:30:28,996 --> 00:30:29,936
you need not worry about


914
00:30:29,936 --> 00:30:31,026
handling any of the status


915
00:30:31,026 --> 00:30:31,426
codes.


916
00:30:31,956 --> 00:30:34,866
The first part of the WebSocket


917
00:30:34,866 --> 00:30:37,296
handshake uses HTTP semantics,


918
00:30:37,666 --> 00:30:38,996
which means your


919
00:30:39,036 --> 00:30:42,106
URLSessionWebSocketTask will use


920
00:30:42,106 --> 00:30:43,816
your existing URLSession


921
00:30:43,816 --> 00:30:45,016
configuration objects.


922
00:30:46,136 --> 00:30:47,576
It will also use your network


923
00:30:47,576 --> 00:30:48,996
storages to do cookie and


924
00:30:48,996 --> 00:30:50,766
convention look ups and we will


925
00:30:50,766 --> 00:30:52,186
honor your delegates for any


926
00:30:52,186 --> 00:30:52,826
challenges.


927
00:30:54,156 --> 00:30:55,566
Once you're connected, you can


928
00:30:55,616 --> 00:30:57,776
send data or string messages on


929
00:30:57,776 --> 00:30:58,336
the task.


930
00:30:59,556 --> 00:31:01,266
You can also receive messages on


931
00:31:01,266 --> 00:31:03,206
the task by passing a completion


932
00:31:03,206 --> 00:31:04,806
handler, which will be called


933
00:31:04,806 --> 00:31:06,706
asynchronously once we receive


934
00:31:06,706 --> 00:31:08,846
the entire message from the


935
00:31:09,196 --> 00:31:09,336
server.


936
00:31:10,396 --> 00:31:12,456
The URLSession API for


937
00:31:12,456 --> 00:31:14,186
WebSockets is closer to the


938
00:31:14,186 --> 00:31:16,576
JavaScript API, which is based


939
00:31:16,576 --> 00:31:18,796
around complete messages and


940
00:31:18,796 --> 00:31:19,466
callbacks.


941
00:31:20,706 --> 00:31:21,936
But some developers need more


942
00:31:21,936 --> 00:31:24,766
than this, like sever support or


943
00:31:24,766 --> 00:31:26,186
reading partial messages.


944
00:31:26,726 --> 00:31:28,616
And for that, we are excited to


945
00:31:28,616 --> 00:31:31,136
announce WebSocketSupport in


946
00:31:31,136 --> 00:31:32,756
Network.framework through the


947
00:31:32,756 --> 00:31:34,816
NWConnection and NWListener


948
00:31:34,816 --> 00:31:36,096
objects that give you both


949
00:31:36,096 --> 00:31:36,976
client and server support.


950
00:31:39,516 --> 00:31:43,066
[ Applause ]


951
00:31:43,566 --> 00:31:45,646
With this, you can have a


952
00:31:45,646 --> 00:31:47,066
message oriented transport


953
00:31:47,066 --> 00:31:48,826
protocol which can be extended


954
00:31:48,826 --> 00:31:50,306
for peer-to-peer communication.


955
00:31:51,646 --> 00:31:53,166
You can also receive partial


956
00:31:53,166 --> 00:31:54,566
messages by specifying the


957
00:31:54,566 --> 00:31:56,406
minimum and maximum bytes for a


958
00:31:56,406 --> 00:31:57,836
give and receive operation.


959
00:31:58,446 --> 00:32:00,816
To add WebSockets to your


960
00:32:00,816 --> 00:32:02,416
network frame of objects, you


961
00:32:02,416 --> 00:32:04,556
can simply create a parameters


962
00:32:04,556 --> 00:32:06,156
object with TLS enabled on it.


963
00:32:07,066 --> 00:32:09,686
Next, create a websocketOptions


964
00:32:09,956 --> 00:32:11,766
and set it on the default


965
00:32:11,766 --> 00:32:12,676
protocol stack of the


966
00:32:12,676 --> 00:32:12,966
parameters.


967
00:32:15,506 --> 00:32:16,766
Once you create the parameters,


968
00:32:17,196 --> 00:32:18,516
next you can pass in these


969
00:32:18,516 --> 00:32:20,206
parameters to the NWConnection


970
00:32:20,206 --> 00:32:21,886
constructor to create an


971
00:32:21,886 --> 00:32:22,916
NWConnection object.


972
00:32:23,826 --> 00:32:24,836
Or if you're looking to create a


973
00:32:24,836 --> 00:32:26,196
listener, just pass these


974
00:32:26,196 --> 00:32:27,506
parameters to the constructor of


975
00:32:27,506 --> 00:32:28,026
the listener.


976
00:32:29,446 --> 00:32:31,946
The send and receive APIs remain


977
00:32:31,946 --> 00:32:34,156
unchanged from last year and you


978
00:32:34,156 --> 00:32:36,346
can continue using those to send


979
00:32:36,346 --> 00:32:37,976
and receive WebSocket messages.


980
00:32:42,046 --> 00:32:43,156
Now, let's take a look at


981
00:32:43,156 --> 00:32:44,366
WebSockets in action.


982
00:32:44,976 --> 00:32:47,166
I'm going to build upon the


983
00:32:47,166 --> 00:32:48,476
application that Guoye just


984
00:32:48,476 --> 00:32:51,276
showed you, PubSocket, but I


985
00:32:51,276 --> 00:32:52,496
want to change the business


986
00:32:52,496 --> 00:32:54,406
model of PubSocket slightly.


987
00:32:54,876 --> 00:32:57,836
The price of items is now going


988
00:32:57,836 --> 00:33:00,076
to be dynamic and will change on


989
00:33:00,076 --> 00:33:00,486
demand.


990
00:33:01,266 --> 00:33:02,686
So, think about a stock market,


991
00:33:02,686 --> 00:33:05,126
but for food and drinks.


992
00:33:05,886 --> 00:33:06,896
So, on the left-hand side you


993
00:33:06,896 --> 00:33:08,366
see PubServer, which is the


994
00:33:08,366 --> 00:33:09,936
application that the bartender


995
00:33:09,936 --> 00:33:11,316
sees where they can edit the


996
00:33:11,316 --> 00:33:12,906
items or make changes to the


997
00:33:12,966 --> 00:33:13,246
price.


998
00:33:14,286 --> 00:33:15,286
On the right-hand side is the


999
00:33:15,326 --> 00:33:16,396
pub menu that we've already


1000
00:33:16,396 --> 00:33:17,886
seen, which is the application


1001
00:33:17,886 --> 00:33:19,516
that your clients or customers


1002
00:33:19,516 --> 00:33:20,766
walking into the bar can see.


1003
00:33:21,316 --> 00:33:24,096
The new feature with dynamic


1004
00:33:24,096 --> 00:33:25,716
pricing is going to be called


1005
00:33:25,716 --> 00:33:26,826
PubSocket+.


1006
00:33:27,246 --> 00:33:28,096
So, see-- let's see how


1007
00:33:28,096 --> 00:33:29,336
PubSocket+ works with our


1008
00:33:29,336 --> 00:33:30,706
current implementation of server


1009
00:33:30,706 --> 00:33:31,136
and client.


1010
00:33:31,726 --> 00:33:34,966
Let's suppose the bartender


1011
00:33:34,966 --> 00:33:36,476
wants to bump the price of root


1012
00:33:36,476 --> 00:33:39,226
beer to $6.99.


1013
00:33:39,226 --> 00:33:41,126
I click update.


1014
00:33:42,316 --> 00:33:43,826
And now the client has to pull


1015
00:33:43,826 --> 00:33:44,956
down to refresh.


1016
00:33:45,496 --> 00:33:47,836
And once they do that, they get


1017
00:33:47,836 --> 00:33:49,796
the updated price of root beer.


1018
00:33:50,936 --> 00:33:53,096
That's OK, but I'm sure we could


1019
00:33:53,096 --> 00:33:53,956
do better than this.


1020
00:33:54,806 --> 00:33:56,856
I want customers of PubSocket+


1021
00:33:56,856 --> 00:33:58,496
to have a seamless experience


1022
00:33:58,706 --> 00:33:59,746
where they don't have to pull


1023
00:33:59,746 --> 00:34:01,856
down to refresh and they can get


1024
00:34:01,856 --> 00:34:02,826
the price changes live.


1025
00:34:03,526 --> 00:34:06,156
Let's see how WebSockets can


1026
00:34:06,156 --> 00:34:07,496
help us achieve this.


1027
00:34:08,025 --> 00:34:11,275
Let's head over to Xcode and


1028
00:34:11,366 --> 00:34:13,476
first I'm going to stop the


1029
00:34:14,525 --> 00:34:18,466
server and the client.


1030
00:34:18,466 --> 00:34:20,775
And let's head over to our


1031
00:34:20,775 --> 00:34:22,576
server where I have an


1032
00:34:22,576 --> 00:34:24,916
NWListener which is acting as my


1033
00:34:24,916 --> 00:34:25,795
TCB server.


1034
00:34:27,156 --> 00:34:29,016
Here I have some parameters that


1035
00:34:29,016 --> 00:34:30,565
I've created with TLS options


1036
00:34:30,565 --> 00:34:31,096
set on them.


1037
00:34:32,156 --> 00:34:32,966
First, I'm going to make a


1038
00:34:32,966 --> 00:34:35,416
change here to create some


1039
00:34:35,416 --> 00:34:37,856
WebSocket options and set it on


1040
00:34:37,856 --> 00:34:39,226
the protocol stack of the


1041
00:34:39,226 --> 00:34:39,966
parameters.


1042
00:34:40,856 --> 00:34:43,876
This tells my server how to do a


1043
00:34:43,876 --> 00:34:45,716
WebSocket handshake with clients


1044
00:34:45,755 --> 00:34:46,876
that are trying to connect with


1045
00:34:47,456 --> 00:34:47,525
it.


1046
00:34:48,156 --> 00:34:49,985
The next change I would make on


1047
00:34:49,985 --> 00:34:53,056
my server is in this function


1048
00:34:53,056 --> 00:34:55,176
called sendPriceChanges.


1049
00:34:56,306 --> 00:34:58,556
This function is meant to send


1050
00:34:58,556 --> 00:35:00,686
out WebSocket messages to all


1051
00:35:00,686 --> 00:35:01,826
the clients that are connected


1052
00:35:01,826 --> 00:35:04,446
to it each time a price of an


1053
00:35:04,446 --> 00:35:07,146
item changes on the server.


1054
00:35:07,326 --> 00:35:09,216
Currently, I have a send


1055
00:35:09,216 --> 00:35:11,386
implemented with default stream


1056
00:35:11,386 --> 00:35:11,936
context.


1057
00:35:13,056 --> 00:35:15,166
This means that the data that I


1058
00:35:15,166 --> 00:35:17,086
pass to the send method is sent


1059
00:35:17,086 --> 00:35:18,626
out as a bag of bytes on this


1060
00:35:18,626 --> 00:35:20,416
TCB connection and it does not


1061
00:35:20,416 --> 00:35:21,876
have any message framing.


1062
00:35:21,876 --> 00:35:24,496
I'm going to change the context


1063
00:35:24,496 --> 00:35:28,246
here and create a new context


1064
00:35:28,606 --> 00:35:30,826
with some WebSocket metadata


1065
00:35:30,826 --> 00:35:32,876
associated with it.


1066
00:35:32,926 --> 00:35:34,946
Now, this tells my connection to


1067
00:35:34,946 --> 00:35:37,156
send the data as WebSocket


1068
00:35:37,216 --> 00:35:38,296
message frames.


1069
00:35:39,376 --> 00:35:40,586
With these two changes, my


1070
00:35:40,586 --> 00:35:42,456
server should be all set to send


1071
00:35:42,456 --> 00:35:43,906
out WebSocket messages to my


1072
00:35:43,906 --> 00:35:44,266
client.


1073
00:35:45,316 --> 00:35:48,216
Now, let's see-- I can keep the


1074
00:35:48,216 --> 00:35:49,656
server building while we head


1075
00:35:49,656 --> 00:35:50,336
over to the client.


1076
00:35:51,566 --> 00:35:52,956
So, on the client side, I'm


1077
00:35:54,086 --> 00:35:55,086
going to make changes to the


1078
00:35:55,086 --> 00:35:57,546
function connect first; connect


1079
00:35:58,116 --> 00:35:59,086
is going to connect to a new


1080
00:35:59,086 --> 00:36:01,936
server and for that I'm going to


1081
00:36:02,286 --> 00:36:05,316
use URLSessionWebSocketTask I'll


1082
00:36:05,316 --> 00:36:07,686
simply pass in the URL to the


1083
00:36:07,686 --> 00:36:09,836
task and then call resume so I


1084
00:36:09,836 --> 00:36:11,876
can start doing the handshake.


1085
00:36:12,866 --> 00:36:14,266
Once I'm connected, I'm going to


1086
00:36:14,266 --> 00:36:16,436
call readMessage, which will


1087
00:36:16,536 --> 00:36:17,966
receive a message back from the


1088
00:36:17,966 --> 00:36:18,196
server.


1089
00:36:18,196 --> 00:36:20,846
Now, let's see how readMessage


1090
00:36:20,846 --> 00:36:21,646
should be implemented.


1091
00:36:23,156 --> 00:36:26,386
Inside readMessage, I'll call


1092
00:36:26,386 --> 00:36:28,916
receive on the task and pass a


1093
00:36:28,916 --> 00:36:29,866
completion block.


1094
00:36:30,866 --> 00:36:34,276
On the success case, I'll update


1095
00:36:34,276 --> 00:36:36,616
my UI with the price change and


1096
00:36:36,616 --> 00:36:38,046
immediately after that I'll call


1097
00:36:38,046 --> 00:36:39,676
readMessage again so I can read


1098
00:36:39,676 --> 00:36:40,956
the next message coming back


1099
00:36:40,956 --> 00:36:41,696
from the server.


1100
00:36:42,646 --> 00:36:44,166
Once I make these two changes on


1101
00:36:44,166 --> 00:36:45,916
the client, I should be all set


1102
00:36:46,136 --> 00:36:47,806
to connect to my server and


1103
00:36:47,806 --> 00:36:49,246
receive WebSocket messages.


1104
00:36:50,576 --> 00:36:52,656
So, let's run a new server and a


1105
00:36:52,656 --> 00:36:54,386
client to see how they work.


1106
00:36:55,486 --> 00:36:57,406
First I'm going to run my


1107
00:37:00,936 --> 00:37:01,086
server.


1108
00:37:01,276 --> 00:37:02,416
And now our new client reads


1109
00:37:02,486 --> 00:37:04,456
PubSocket+, which has the new


1110
00:37:04,456 --> 00:37:06,836
and improved WebSocket ability.


1111
00:37:07,606 --> 00:37:09,396
Now, let's suppose it's happy


1112
00:37:09,396 --> 00:37:11,156
hour and the bartender wants to


1113
00:37:11,156 --> 00:37:12,516
reduce the price of root beer


1114
00:37:12,676 --> 00:37:14,556
down to $1.99.


1115
00:37:14,556 --> 00:37:16,326
So, let me make that change.


1116
00:37:20,076 --> 00:37:21,756
And I'm going to click update


1117
00:37:22,506 --> 00:37:23,606
and then you can see on the


1118
00:37:23,606 --> 00:37:25,296
client the price got updated


1119
00:37:25,346 --> 00:37:26,396
without the client having to--


1120
00:37:27,516 --> 00:37:29,586
[ Applause ]


1121
00:37:30,086 --> 00:37:32,386
So, for those of you who missed


1122
00:37:32,386 --> 00:37:33,306
it, I'm going to reduce the


1123
00:37:33,306 --> 00:37:34,386
fries to go with that root


1124
00:37:34,386 --> 00:37:35,716
beer-- now that's some happy


1125
00:37:35,716 --> 00:37:35,886
hour.


1126
00:37:36,556 --> 00:37:39,906
And once I click update, you'll


1127
00:37:39,906 --> 00:37:41,586
see the price of fries change on


1128
00:37:41,586 --> 00:37:42,886
the client without me having to


1129
00:37:42,886 --> 00:37:43,426
pull down.


1130
00:37:43,646 --> 00:37:45,926
And I'll do it once again and


1131
00:37:45,926 --> 00:37:47,286
there the price of fries


1132
00:37:47,286 --> 00:37:47,696
changes.


1133
00:37:48,516 --> 00:37:51,746
[ Applause ]


1134
00:37:52,246 --> 00:37:54,166
So, that is WebSockets


1135
00:37:54,386 --> 00:37:55,726
bidirectional communication


1136
00:37:55,726 --> 00:37:57,696
without any HTTP overhead.


1137
00:37:58,916 --> 00:38:00,766
Some of you might be wondering


1138
00:38:00,766 --> 00:38:02,366
what the Stats button on the top


1139
00:38:02,366 --> 00:38:02,926
right is for.


1140
00:38:03,376 --> 00:38:05,216
If I click that, here are some


1141
00:38:05,216 --> 00:38:06,446
new statistics that we are


1142
00:38:06,446 --> 00:38:07,866
collecting through our


1143
00:38:07,866 --> 00:38:09,886
URLSession metrics API.


1144
00:38:11,486 --> 00:38:13,216
Additionally, at the bottom, RTT


1145
00:38:13,216 --> 00:38:15,326
is the round-trip time between


1146
00:38:15,326 --> 00:38:17,006
my client and my server that I'm


1147
00:38:17,006 --> 00:38:19,116
calculating using pings and


1148
00:38:19,116 --> 00:38:20,256
pongs in WebSockets.


1149
00:38:21,126 --> 00:38:22,806
I'm currently using Network Link


1150
00:38:22,806 --> 00:38:24,906
Conditioner to simulate a busy


1151
00:38:24,906 --> 00:38:25,366
bar environment.


1152
00:38:25,366 --> 00:38:26,246
You could use something like


1153
00:38:26,246 --> 00:38:27,396
this to monitor the health of


1154
00:38:27,446 --> 00:38:29,126
your connection between your


1155
00:38:29,126 --> 00:38:29,866
client and server.


1156
00:38:30,886 --> 00:38:31,946
If you are interested in knowing


1157
00:38:31,946 --> 00:38:33,646
more about the new properties


1158
00:38:33,646 --> 00:38:35,966
added to the metrics API or how


1159
00:38:35,966 --> 00:38:37,686
to use Network Link Conditioner,


1160
00:38:37,946 --> 00:38:39,326
please join us for the second


1161
00:38:39,326 --> 00:38:40,836
networking session at 5:00 p.m.


1162
00:38:40,836 --> 00:38:41,116
today.


1163
00:38:42,266 --> 00:38:43,286
Now, let's head back to our


1164
00:38:43,286 --> 00:38:43,736
slides.


1165
00:38:47,496 --> 00:38:49,196
Let's do a quick recap of


1166
00:38:49,286 --> 00:38:51,706
PubSocket+.


1167
00:38:51,886 --> 00:38:53,406
For our server, we used


1168
00:38:53,406 --> 00:38:55,176
NWListener with WebSocket


1169
00:38:55,176 --> 00:38:56,486
options set on the protocol


1170
00:38:56,486 --> 00:38:56,836
stack.


1171
00:38:57,486 --> 00:38:59,846
For a client, we used


1172
00:38:59,846 --> 00:39:01,816
URLSessionWebSocketTask to


1173
00:39:01,816 --> 00:39:03,396
connect to our server and read


1174
00:39:03,396 --> 00:39:04,006
messages.


1175
00:39:04,006 --> 00:39:07,026
For our transport, we used


1176
00:39:07,026 --> 00:39:08,176
bidirectional WebSocket


1177
00:39:08,176 --> 00:39:08,736
messages.


1178
00:39:09,606 --> 00:39:11,076
And finally, the advantage of


1179
00:39:11,106 --> 00:39:12,496
doing everything was


1180
00:39:12,976 --> 00:39:14,556
bidirectional messaging with


1181
00:39:14,556 --> 00:39:18,586
very little HTTP overhead.


1182
00:39:18,706 --> 00:39:20,676
Let's review the APIs available


1183
00:39:20,676 --> 00:39:22,186
for you to add WebSockets to


1184
00:39:22,186 --> 00:39:23,026
your apps today.


1185
00:39:24,256 --> 00:39:26,136
WebKit gives you the ability to


1186
00:39:26,136 --> 00:39:28,266
add WebSockets with the existing


1187
00:39:28,266 --> 00:39:30,556
JavaScript API in your web apps


1188
00:39:30,556 --> 00:39:31,366
and web views.


1189
00:39:31,916 --> 00:39:34,626
New this year,


1190
00:39:34,626 --> 00:39:37,196
URLSessionWebSocketTask built on


1191
00:39:37,196 --> 00:39:39,376
top of Network.framework plugs


1192
00:39:39,376 --> 00:39:40,526
into URLSession.


1193
00:39:41,276 --> 00:39:42,976
It works with your existing


1194
00:39:42,976 --> 00:39:44,666
URLSession configuration objects


1195
00:39:44,896 --> 00:39:46,796
and offers automatic cookie and


1196
00:39:46,796 --> 00:39:47,836
authentication support.


1197
00:39:48,656 --> 00:39:50,896
It also offers a convenient way


1198
00:39:50,896 --> 00:39:52,736
to measure round-trip time using


1199
00:39:52,796 --> 00:39:53,746
ping and pong handling.


1200
00:39:55,606 --> 00:39:56,616
Also new this year,


1201
00:39:56,846 --> 00:39:58,226
WebSocketSupport in


1202
00:39:58,226 --> 00:39:59,686
Network.framework through the


1203
00:39:59,686 --> 00:40:01,546
NWConnection and NWListener


1204
00:40:01,546 --> 00:40:04,086
objects give you both client and


1205
00:40:04,086 --> 00:40:04,836
server support.


1206
00:40:06,046 --> 00:40:07,916
It gives you direct access to


1207
00:40:07,966 --> 00:40:09,706
complete and partial messages,


1208
00:40:10,006 --> 00:40:11,726
including ping and pong frames.


1209
00:40:12,636 --> 00:40:14,076
You can optionally set custom


1210
00:40:14,076 --> 00:40:16,226
headers like cookies or other


1211
00:40:16,226 --> 00:40:17,846
authentication headers through


1212
00:40:17,846 --> 00:40:19,536
the websocketOptions object.


1213
00:40:20,806 --> 00:40:21,916
We are happy to be opening up


1214
00:40:21,916 --> 00:40:23,056
this technology to all


1215
00:40:23,056 --> 00:40:24,656
developers and we're excited to


1216
00:40:24,656 --> 00:40:25,836
see what you do with this.


1217
00:40:26,806 --> 00:40:28,116
Next, I would like to invite


1218
00:40:28,176 --> 00:40:29,776
Christoph to talk about mobility


1219
00:40:29,776 --> 00:40:30,456
improvements.


1220
00:40:31,516 --> 00:40:35,826
[ Applause ]


1221
00:40:36,326 --> 00:40:36,986
>> Thank you, Jiten.


1222
00:40:37,606 --> 00:40:39,276
Hello everyone.


1223
00:40:40,386 --> 00:40:41,766
I am Christoph and I am going to


1224
00:40:41,766 --> 00:40:43,726
show you what mobility


1225
00:40:43,726 --> 00:40:45,526
improvements we did in iOS 13.


1226
00:40:46,986 --> 00:40:50,006
So, users are often experiencing


1227
00:40:50,006 --> 00:40:50,276
this.


1228
00:40:50,556 --> 00:40:51,966
When they are walking out of


1229
00:40:51,966 --> 00:40:53,696
their home, when they are far


1230
00:40:53,696 --> 00:40:54,976
away from their Wi-Fi access


1231
00:40:54,976 --> 00:40:57,476
point, the signal of Wi-Fi gets


1232
00:40:57,476 --> 00:40:59,666
worse and often the applications


1233
00:40:59,666 --> 00:41:00,906
become slower because the


1234
00:41:00,906 --> 00:41:02,876
networking becomes slower as


1235
00:41:02,876 --> 00:41:03,056
well.


1236
00:41:03,736 --> 00:41:04,826
Sometimes the applications


1237
00:41:04,826 --> 00:41:05,576
completely fail.


1238
00:41:06,326 --> 00:41:08,136
And so people have gotten used


1239
00:41:08,136 --> 00:41:08,976
to this that when they are


1240
00:41:08,976 --> 00:41:10,136
walking out of their home they


1241
00:41:10,136 --> 00:41:11,706
just swipe up to the Control


1242
00:41:11,706 --> 00:41:13,546
Center and turn off Wi-Fi.


1243
00:41:14,986 --> 00:41:16,836
Now, I am sure we have all


1244
00:41:16,836 --> 00:41:18,206
experienced this, right?


1245
00:41:19,066 --> 00:41:21,556
So, we want to change this.


1246
00:41:22,326 --> 00:41:23,526
We believe that users should


1247
00:41:23,526 --> 00:41:25,116
never have to turn off Wi-Fi


1248
00:41:25,556 --> 00:41:26,576
when they are walking out of


1249
00:41:26,576 --> 00:41:26,976
their home.


1250
00:41:27,416 --> 00:41:28,056
We believe that your


1251
00:41:28,056 --> 00:41:29,576
applications should just work


1252
00:41:29,576 --> 00:41:31,396
even when Wi-Fi is in a very bad


1253
00:41:31,396 --> 00:41:31,906
condition.


1254
00:41:33,106 --> 00:41:34,536
And I'm sure everybody here in


1255
00:41:34,536 --> 00:41:36,616
this room wants to achieve the


1256
00:41:36,616 --> 00:41:37,136
same goal.


1257
00:41:38,026 --> 00:41:39,746
So, let me show you how we can


1258
00:41:39,746 --> 00:41:39,976
get there.


1259
00:41:44,536 --> 00:41:46,836
This is the way we usually


1260
00:41:46,836 --> 00:41:47,686
represent Wi-Fi.


1261
00:41:48,316 --> 00:41:50,016
We have the Wi-Fi access point


1262
00:41:50,016 --> 00:41:51,586
in the middle, concentric


1263
00:41:51,586 --> 00:41:54,096
circles around it that show how


1264
00:41:54,096 --> 00:41:55,706
the Wi-Fi signal is gradually


1265
00:41:55,706 --> 00:41:57,536
fading away, getting weaker and


1266
00:41:57,536 --> 00:41:59,366
weaker as the phone gets farther


1267
00:41:59,366 --> 00:42:00,166
and farther away.


1268
00:42:01,216 --> 00:42:02,666
In this kind of scenario, it


1269
00:42:02,666 --> 00:42:04,676
would be very simple for a phone


1270
00:42:04,676 --> 00:42:06,216
to decide whether to use Wi-Fi


1271
00:42:06,626 --> 00:42:07,886
or switch over to cell.


1272
00:42:08,656 --> 00:42:11,846
Right? Now, the problem is that


1273
00:42:12,166 --> 00:42:13,526
this kind of representation of


1274
00:42:13,526 --> 00:42:15,716
how Wi-Fi looks is actually very


1275
00:42:15,716 --> 00:42:16,986
far away from reality.


1276
00:42:17,796 --> 00:42:20,386
In reality, it looks more like


1277
00:42:22,216 --> 00:42:22,316
this.


1278
00:42:22,536 --> 00:42:23,856
You have the Wi-Fi access point


1279
00:42:23,856 --> 00:42:25,786
in the middle and then a very


1280
00:42:25,786 --> 00:42:27,636
spotty Wi-Fi signal around it.


1281
00:42:28,556 --> 00:42:29,826
And the spottiness is because of


1282
00:42:29,826 --> 00:42:31,246
the objects in the room are


1283
00:42:31,246 --> 00:42:32,656
interfering with the signal.


1284
00:42:33,316 --> 00:42:35,546
The house, the walls, everything


1285
00:42:35,546 --> 00:42:37,406
is making the Wi-Fi signal a


1286
00:42:37,406 --> 00:42:40,826
very uncertain indicator of the


1287
00:42:40,826 --> 00:42:41,366
quality.


1288
00:42:42,216 --> 00:42:43,766
And a tiny little movement of


1289
00:42:43,766 --> 00:42:45,186
the phone could move the phone


1290
00:42:45,186 --> 00:42:47,046
from a good position to a bad


1291
00:42:47,046 --> 00:42:47,566
position.


1292
00:42:48,486 --> 00:42:49,536
So, for the phone, it's really


1293
00:42:49,536 --> 00:42:51,296
difficult to know whether Wi-Fi


1294
00:42:51,296 --> 00:42:53,196
is still good or bad.


1295
00:42:53,546 --> 00:42:54,576
It might still receive the


1296
00:42:54,576 --> 00:42:56,186
beacons from the access point,


1297
00:42:56,756 --> 00:42:57,636
but the signal might


1298
00:42:57,636 --> 00:42:59,196
nevertheless be too low to


1299
00:42:59,256 --> 00:43:01,576
actually send or receive any


1300
00:43:01,576 --> 00:43:01,916
data.


1301
00:43:03,076 --> 00:43:04,906
So, in this kind of environment,


1302
00:43:05,366 --> 00:43:06,656
the phone needs to decide


1303
00:43:06,866 --> 00:43:08,676
whether to use Wi-Fi or whether


1304
00:43:08,676 --> 00:43:09,246
to use cell.


1305
00:43:10,236 --> 00:43:11,726
It's this uncertainty around the


1306
00:43:11,726 --> 00:43:13,596
Wi-Fi signal that is the whole


1307
00:43:13,596 --> 00:43:15,146
challenge around mobility.


1308
00:43:17,696 --> 00:43:20,936
So, at Apple, we have been aware


1309
00:43:20,936 --> 00:43:22,106
of this problem for quite a


1310
00:43:22,106 --> 00:43:24,526
while and I will show you how in


1311
00:43:24,526 --> 00:43:27,456
the past we have done many steps


1312
00:43:27,456 --> 00:43:28,416
to improve this kind of


1313
00:43:28,416 --> 00:43:28,966
scenario.


1314
00:43:28,966 --> 00:43:32,696
All of it started back in iOS 7


1315
00:43:33,156 --> 00:43:33,706
with Siri.


1316
00:43:36,156 --> 00:43:38,066
In iOS 7, we introduced


1317
00:43:38,066 --> 00:43:39,766
Multipath TCP for Siri.


1318
00:43:40,516 --> 00:43:42,056
Multipath TCP allows to use


1319
00:43:42,056 --> 00:43:43,996
Wi-Fi and cell at the same time.


1320
00:43:44,496 --> 00:43:46,656
So, starting in iOS 7, whenever


1321
00:43:46,716 --> 00:43:48,226
people are using Siri and


1322
00:43:48,226 --> 00:43:49,366
walking out of their home,


1323
00:43:50,276 --> 00:43:52,276
Multipath TCP will make sure


1324
00:43:52,276 --> 00:43:53,426
that the traffic goes either


1325
00:43:53,426 --> 00:43:56,556
Wi-Fi over cell, reducing the


1326
00:43:56,556 --> 00:43:58,846
latency for Siri users and


1327
00:43:58,846 --> 00:44:00,046
reducing the error rates.


1328
00:44:01,316 --> 00:44:03,556
We are seeing great results


1329
00:44:03,776 --> 00:44:05,136
thank to Multipath TCP.


1330
00:44:06,346 --> 00:44:08,656
Now, a real end-to-end multipath


1331
00:44:08,836 --> 00:44:12,376
protocol, like Multipath TCP,


1332
00:44:12,376 --> 00:44:14,466
requires both the client and the


1333
00:44:14,466 --> 00:44:15,896
server to be aware of it.


1334
00:44:16,546 --> 00:44:17,986
Both need to work together,


1335
00:44:18,646 --> 00:44:18,926
right?


1336
00:44:19,236 --> 00:44:20,586
They need to work together to


1337
00:44:20,586 --> 00:44:21,776
decide whether to send the


1338
00:44:21,776 --> 00:44:23,516
traffic on Wi-Fi or on cell.


1339
00:44:24,566 --> 00:44:26,866
And so we asked ourselves how


1340
00:44:26,866 --> 00:44:29,436
can we improve mobility without


1341
00:44:29,436 --> 00:44:31,896
having both the client and the


1342
00:44:31,896 --> 00:44:33,586
server have to work together


1343
00:44:34,436 --> 00:44:36,306
without requiring the need to


1344
00:44:36,356 --> 00:44:37,186
modify the server


1345
00:44:37,186 --> 00:44:38,056
configurations.


1346
00:44:39,366 --> 00:44:41,126
And the answer came two years


1347
00:44:41,126 --> 00:44:42,786
later in iOS 9 with Wi-Fi


1348
00:44:42,786 --> 00:44:43,266
Assist.


1349
00:44:43,796 --> 00:44:47,516
Wi-Fi Assist handles mobility


1350
00:44:47,516 --> 00:44:49,536
for all applications, for all


1351
00:44:49,536 --> 00:44:51,226
flows, talking to any server.


1352
00:44:51,226 --> 00:44:53,986
And the way it does it is by


1353
00:44:53,986 --> 00:44:56,216
first starting on Wi-Fi and when


1354
00:44:56,216 --> 00:44:57,596
the signal is bad and the


1355
00:44:57,596 --> 00:44:59,326
connection doesn't, manages to


1356
00:44:59,326 --> 00:45:00,786
get established quickly enough,


1357
00:45:01,256 --> 00:45:02,406
we will just raise another


1358
00:45:02,406 --> 00:45:05,796
connection over the cellular


1359
00:45:05,866 --> 00:45:06,306
link.


1360
00:45:06,696 --> 00:45:08,406
Since iOS 9, since we are--


1361
00:45:08,406 --> 00:45:09,666
since we introduced Wi-Fi


1362
00:45:09,666 --> 00:45:11,456
Assist, all of your applications


1363
00:45:12,176 --> 00:45:13,506
that are using the high-level


1364
00:45:13,506 --> 00:45:14,976
APIs can benefit from Wi-Fi


1365
00:45:14,976 --> 00:45:17,566
Assist and are having a much


1366
00:45:17,606 --> 00:45:18,876
better experience when the user


1367
00:45:18,876 --> 00:45:19,346
is mobile.


1368
00:45:19,346 --> 00:45:21,916
And this works for any server


1369
00:45:22,246 --> 00:45:24,306
talking to any servers on the


1370
00:45:24,306 --> 00:45:24,726
internet.


1371
00:45:26,626 --> 00:45:28,186
Now, Wi-Fi Assist might still


1372
00:45:28,186 --> 00:45:30,276
get stuck on Wi-Fi, if for


1373
00:45:30,276 --> 00:45:31,556
example the connection managed


1374
00:45:31,556 --> 00:45:33,286
to get established, but then the


1375
00:45:33,286 --> 00:45:34,966
signal degraded afterwards.


1376
00:45:35,426 --> 00:45:37,256
And those flows would then still


1377
00:45:37,256 --> 00:45:37,676
be stuck.


1378
00:45:38,156 --> 00:45:39,416
In order to handle those kind of


1379
00:45:39,416 --> 00:45:42,016
scenarios better, one still


1380
00:45:42,016 --> 00:45:43,856
needs real end-to-end multipath,


1381
00:45:44,306 --> 00:45:45,496
the same way as we have it for


1382
00:45:45,496 --> 00:45:45,836
Siri.


1383
00:45:46,766 --> 00:45:48,466
So, after four years of


1384
00:45:48,466 --> 00:45:52,096
experience with Multipath TCP


1385
00:45:52,096 --> 00:45:54,616
for Siri, we decided to open up


1386
00:45:54,616 --> 00:45:55,736
the API for every one of you.


1387
00:45:56,616 --> 00:45:58,776
So, since iOS 11, you can start


1388
00:45:58,776 --> 00:46:00,616
using the handover or


1389
00:46:00,616 --> 00:46:02,886
interactive mode in URLSession


1390
00:46:03,276 --> 00:46:04,336
or the Network.framework.


1391
00:46:05,426 --> 00:46:07,076
So, when you are able to make


1392
00:46:07,076 --> 00:46:07,976
sure that your servers are


1393
00:46:07,976 --> 00:46:09,946
ready, you can enable Multipath


1394
00:46:09,946 --> 00:46:11,626
TCP and get the same benefits as


1395
00:46:11,626 --> 00:46:11,966
Siri.


1396
00:46:13,456 --> 00:46:15,836
So, in each of those releases,


1397
00:46:16,036 --> 00:46:19,596
iOS 7, iOS 9, iOS 11, we focused


1398
00:46:19,596 --> 00:46:21,786
on one specific area to improve


1399
00:46:21,786 --> 00:46:22,366
mobility.


1400
00:46:23,876 --> 00:46:25,736
We focused on Multipath TCP, we


1401
00:46:25,736 --> 00:46:27,526
focused on Siri, we focused on


1402
00:46:27,526 --> 00:46:28,416
Wi-Fi Assist.


1403
00:46:29,356 --> 00:46:31,166
And now comes iOS 13.


1404
00:46:32,326 --> 00:46:34,906
And in iOS 13, we improved so


1405
00:46:34,906 --> 00:46:36,986
many things they don't even fit


1406
00:46:36,986 --> 00:46:38,116
on this slide anymore.


1407
00:46:40,086 --> 00:46:43,436
In iOS 13, the mobility


1408
00:46:43,436 --> 00:46:44,976
improvements-- thank you.


1409
00:46:45,516 --> 00:46:48,276
[ Applause ]


1410
00:46:48,776 --> 00:46:49,146
Thank you.


1411
00:46:49,276 --> 00:46:50,866
In iOS 13, the mobility


1412
00:46:50,866 --> 00:46:52,276
improvements go throughout the


1413
00:46:52,276 --> 00:46:52,966
whole system.


1414
00:46:53,756 --> 00:46:55,206
Many different frameworks,


1415
00:46:55,316 --> 00:46:57,626
daemons, applications, from the


1416
00:46:57,626 --> 00:46:59,016
firmware to the driver.


1417
00:46:59,696 --> 00:47:01,656
Everything is now improved for


1418
00:47:01,656 --> 00:47:02,226
mobility.


1419
00:47:02,546 --> 00:47:04,256
And in this part of the session,


1420
00:47:04,436 --> 00:47:05,836
I am going to talk about two of


1421
00:47:05,836 --> 00:47:08,206
them; Wi-Fi Assist and Multipath


1422
00:47:08,206 --> 00:47:09,526
Transports.


1423
00:47:10,816 --> 00:47:13,716
So, first up, Wi-Fi Assist.


1424
00:47:14,636 --> 00:47:16,746
Traditionally, Wi-Fi assist has


1425
00:47:16,746 --> 00:47:18,656
only been taking very limited


1426
00:47:18,656 --> 00:47:20,356
amount of information into


1427
00:47:20,356 --> 00:47:22,536
account to decide whether Wi-Fi


1428
00:47:22,536 --> 00:47:23,266
is good enough.


1429
00:47:24,376 --> 00:47:26,596
Now in iOS 13, we changed that.


1430
00:47:27,946 --> 00:47:30,046
We made it such that all


1431
00:47:30,046 --> 00:47:31,766
components in the system are


1432
00:47:31,766 --> 00:47:33,476
providing information into Wi-Fi


1433
00:47:33,476 --> 00:47:35,526
Assist so that Wi-Fi Assist has


1434
00:47:35,526 --> 00:47:36,926
a full cross-layer mobility


1435
00:47:36,926 --> 00:47:37,396
detection.


1436
00:47:38,526 --> 00:47:40,316
The lower layers, Wi-Fi and


1437
00:47:40,316 --> 00:47:41,716
cell, are providing information


1438
00:47:41,716 --> 00:47:43,656
about the signal quality in a


1439
00:47:43,656 --> 00:47:45,256
much fine-- more fine-grained


1440
00:47:45,256 --> 00:47:47,236
way than in iOS 12.


1441
00:47:48,306 --> 00:47:49,526
And also, the higher-layer


1442
00:47:49,626 --> 00:47:50,476
frameworks like


1443
00:47:50,616 --> 00:47:52,596
Network.framework, URLSession,


1444
00:47:53,116 --> 00:47:54,516
other daemons of the system,


1445
00:47:54,736 --> 00:47:55,596
they are all providing


1446
00:47:55,596 --> 00:47:57,166
information into Wi-Fi Assist


1447
00:47:57,636 --> 00:47:59,266
about how their flows are making


1448
00:47:59,266 --> 00:47:59,826
progress.


1449
00:48:00,666 --> 00:48:02,796
All of this information going


1450
00:48:02,796 --> 00:48:04,206
into Wi-Fi Assist will then


1451
00:48:04,206 --> 00:48:06,136
allow it to detect whether we


1452
00:48:06,136 --> 00:48:08,076
are in a mobility scenario or


1453
00:48:08,076 --> 00:48:09,526
not and whether we should maybe


1454
00:48:09,526 --> 00:48:10,796
start trying to use cell.


1455
00:48:11,776 --> 00:48:13,416
So, all of this information,


1456
00:48:13,746 --> 00:48:15,086
then Wi-Fi Assist is going to


1457
00:48:15,086 --> 00:48:17,786
take its decisions and feeds it


1458
00:48:17,786 --> 00:48:19,106
back into the system.


1459
00:48:19,546 --> 00:48:21,326
It tells the lower layers, Wi-Fi


1460
00:48:21,326 --> 00:48:23,106
and cell, to make efforts to


1461
00:48:23,106 --> 00:48:24,346
improve the signal quality.


1462
00:48:25,246 --> 00:48:27,046
And it also communicates to the


1463
00:48:27,046 --> 00:48:27,936
other layers like


1464
00:48:28,406 --> 00:48:29,986
Network.framework and URLSession


1465
00:48:30,076 --> 00:48:31,406
to start recovering flows.


1466
00:48:31,406 --> 00:48:34,946
All of this leads to a much


1467
00:48:34,946 --> 00:48:36,306
improved flow recovery.


1468
00:48:37,796 --> 00:48:39,896
Now, even when a flow has


1469
00:48:39,896 --> 00:48:40,886
already been established on


1470
00:48:40,886 --> 00:48:42,416
Wi-Fi and has started to


1471
00:48:42,416 --> 00:48:44,936
exchange data, if later on the


1472
00:48:44,936 --> 00:48:47,636
signal quality is reducing, we


1473
00:48:47,636 --> 00:48:49,466
are able to move the next


1474
00:48:49,466 --> 00:48:50,786
request that would have been


1475
00:48:50,786 --> 00:48:53,396
used on Wi-Fi, we are able to


1476
00:48:53,396 --> 00:48:54,796
move that one over to cell.


1477
00:48:55,796 --> 00:48:57,476
So, your applications should now


1478
00:48:57,476 --> 00:48:59,246
much less be getting stuck on


1479
00:48:59,246 --> 00:48:59,686
Wi-Fi.


1480
00:49:00,286 --> 00:49:03,306
Now, the question for you, of


1481
00:49:03,306 --> 00:49:04,976
course, is how can you get the


1482
00:49:04,976 --> 00:49:06,676
benefits from Wi-Fi Assist?


1483
00:49:07,236 --> 00:49:08,366
How can you get the benefits


1484
00:49:08,366 --> 00:49:09,536
from all the improvements that


1485
00:49:09,536 --> 00:49:10,886
we did in iOS 13?


1486
00:49:12,346 --> 00:49:14,756
So, first of all, the way you


1487
00:49:14,756 --> 00:49:16,096
can get them is by using the


1488
00:49:16,096 --> 00:49:18,356
high-level APIs like URLSession


1489
00:49:18,356 --> 00:49:19,306
and Network.framework.


1490
00:49:20,206 --> 00:49:22,276
All of these APIs have been


1491
00:49:22,276 --> 00:49:23,886
built with Wi-Fi Assist in mind


1492
00:49:24,846 --> 00:49:25,746
and they are getting the full


1493
00:49:25,746 --> 00:49:26,586
benefit from it.


1494
00:49:27,396 --> 00:49:28,656
So, make sure that your


1495
00:49:28,656 --> 00:49:30,906
applications are using those


1496
00:49:32,526 --> 00:49:32,656
APIs.


1497
00:49:33,706 --> 00:49:36,966
Next up, some of you are doing


1498
00:49:36,966 --> 00:49:39,566
active interface management with


1499
00:49:39,566 --> 00:49:41,896
APIs like SCNetworkReachability.


1500
00:49:42,686 --> 00:49:43,996
You are maybe doing pre-flight


1501
00:49:43,996 --> 00:49:45,896
checks to know where is your


1502
00:49:46,016 --> 00:49:47,506
request going to end up on.


1503
00:49:47,506 --> 00:49:49,156
Is it going to go on Wi-Fi or on


1504
00:49:49,156 --> 00:49:49,476
cell?


1505
00:49:50,606 --> 00:49:51,666
The problem with those


1506
00:49:51,666 --> 00:49:53,766
pre-flight checks is that when


1507
00:49:53,766 --> 00:49:55,906
you do it and the moment when


1508
00:49:55,906 --> 00:49:57,326
you actually use the connection,


1509
00:49:58,816 --> 00:49:59,716
the interface might have


1510
00:49:59,776 --> 00:50:00,196
changed.


1511
00:50:00,316 --> 00:50:02,136
Wi-Fi Assist might have decided


1512
00:50:02,136 --> 00:50:03,396
to actually send your flow over


1513
00:50:03,396 --> 00:50:05,256
to cell or Wi-Fi might have


1514
00:50:05,346 --> 00:50:06,456
significantly improved.


1515
00:50:06,946 --> 00:50:08,806
So, the pre-flight check is a


1516
00:50:08,806 --> 00:50:10,636
very bad indicator of where your


1517
00:50:10,636 --> 00:50:11,966
flow is going to end up on.


1518
00:50:12,506 --> 00:50:14,696
So, we encourage you to rethink


1519
00:50:14,696 --> 00:50:16,166
your usage of the pre-flight


1520
00:50:16,166 --> 00:50:18,796
checks and come talk to us later


1521
00:50:18,796 --> 00:50:20,326
in the labs about why you need


1522
00:50:20,326 --> 00:50:22,286
it and we will work with you to


1523
00:50:22,286 --> 00:50:24,246
find an alternative.


1524
00:50:25,806 --> 00:50:28,656
Now, if you still need to steer


1525
00:50:28,756 --> 00:50:30,316
flows, for example, away from


1526
00:50:30,316 --> 00:50:32,216
cell because, for example, the


1527
00:50:32,216 --> 00:50:34,936
data transfer is way too big or


1528
00:50:34,936 --> 00:50:36,966
the traffic is not critical for


1529
00:50:36,966 --> 00:50:39,146
the user experience, you can use


1530
00:50:39,146 --> 00:50:40,206
helpers like


1531
00:50:40,296 --> 00:50:42,396
allowsExpensiveNetworkAccess and


1532
00:50:42,396 --> 00:50:43,346
set them to false.


1533
00:50:43,946 --> 00:50:46,116
That way, your request is not


1534
00:50:46,116 --> 00:50:47,956
going to go on the cellular


1535
00:50:48,416 --> 00:50:48,546
link.


1536
00:50:50,176 --> 00:50:53,076
So, this is Wi-Fi Assist and we


1537
00:50:53,076 --> 00:50:54,486
made a lot of efforts to make it


1538
00:50:54,486 --> 00:50:56,616
even better in iOS 13 and you


1539
00:50:56,616 --> 00:50:59,066
can get the benefits by using


1540
00:50:59,066 --> 00:51:01,356
the high-level APIs.


1541
00:51:01,356 --> 00:51:02,856
This brings me to the next one,


1542
00:51:03,186 --> 00:51:04,696
which is Multipath Transports.


1543
00:51:07,296 --> 00:51:09,716
Siri has been using it for quite


1544
00:51:09,716 --> 00:51:10,306
a while now.


1545
00:51:10,676 --> 00:51:12,366
We have opened up the API two


1546
00:51:12,366 --> 00:51:15,416
years ago and we have encouraged


1547
00:51:15,416 --> 00:51:18,336
you to look into your apps and


1548
00:51:18,336 --> 00:51:19,776
see which of your flows might


1549
00:51:19,776 --> 00:51:22,966
benefit the most from Multipath


1550
00:51:23,616 --> 00:51:23,716
TCP.


1551
00:51:23,926 --> 00:51:26,326
So, this year in iOS 13, we ran


1552
00:51:26,326 --> 00:51:27,946
this well and looked into our


1553
00:51:27,946 --> 00:51:31,246
own apps and decided to see


1554
00:51:31,556 --> 00:51:33,126
which one is going to benefit


1555
00:51:33,126 --> 00:51:34,266
from Multipath TCP.


1556
00:51:34,936 --> 00:51:36,196
Which one is often used when


1557
00:51:36,196 --> 00:51:37,736
mobile and has a very critical


1558
00:51:37,736 --> 00:51:39,046
flow for the user experience


1559
00:51:39,046 --> 00:51:40,206
that is hard to recover?


1560
00:51:41,256 --> 00:51:43,266
Well, one application is Apple


1561
00:51:43,266 --> 00:51:43,796
Maps.


1562
00:51:44,576 --> 00:51:46,306
Most users, well, when they are


1563
00:51:46,306 --> 00:51:47,666
getting their directions, they


1564
00:51:47,666 --> 00:51:48,816
are walking out of their home


1565
00:51:49,336 --> 00:51:50,526
and they are using search.


1566
00:51:50,956 --> 00:51:53,226
So, in iOS 13, we enabled


1567
00:51:53,226 --> 00:51:54,976
Multipath TCP for Apple Maps.


1568
00:51:55,516 --> 00:51:59,716
[ Applause ]


1569
00:52:00,216 --> 00:52:01,806
Now, whenever you are walking


1570
00:52:01,806 --> 00:52:03,576
out of the home and using Maps,


1571
00:52:03,876 --> 00:52:05,846
looking up your directions,


1572
00:52:05,916 --> 00:52:07,346
trying to search a restaurant,


1573
00:52:08,266 --> 00:52:10,016
MP TCP will be used and move


1574
00:52:10,016 --> 00:52:11,316
your flow over from Wi-Fi to


1575
00:52:11,316 --> 00:52:11,616
cell.


1576
00:52:12,456 --> 00:52:14,666
And since Monday, since the


1577
00:52:14,666 --> 00:52:15,836
first beta, we have been


1578
00:52:15,836 --> 00:52:17,846
enabling it and we are going to


1579
00:52:17,846 --> 00:52:19,506
see a much better responsiveness


1580
00:52:19,506 --> 00:52:20,286
for Apple Maps.


1581
00:52:22,086 --> 00:52:24,386
The next one where we are having


1582
00:52:24,386 --> 00:52:26,666
a very critical user experience


1583
00:52:27,326 --> 00:52:29,236
and that is also often used when


1584
00:52:29,236 --> 00:52:30,916
walking out of the home is when


1585
00:52:30,916 --> 00:52:31,856
you are streaming music.


1586
00:52:32,416 --> 00:52:33,616
Right? When you are streaming


1587
00:52:33,616 --> 00:52:34,796
music, you are downloading a


1588
00:52:34,796 --> 00:52:38,006
large file full of music content


1589
00:52:38,326 --> 00:52:40,286
and you don't want this music to


1590
00:52:40,286 --> 00:52:40,696
stall.


1591
00:52:41,116 --> 00:52:42,286
Because when it stalls, the user


1592
00:52:42,286 --> 00:52:43,646
will be disrupted.


1593
00:52:44,616 --> 00:52:46,836
So, since iOS 13, we enabled


1594
00:52:46,836 --> 00:52:48,716
Multipath TCP for Apple Music.


1595
00:52:49,516 --> 00:52:53,866
[ Applause ]


1596
00:52:54,366 --> 00:52:56,026
We are seeing much less music


1597
00:52:56,026 --> 00:52:58,616
streaming stalls because MP TCP


1598
00:52:58,616 --> 00:53:00,596
is now moving flows over to cell


1599
00:53:00,846 --> 00:53:02,206
whenever we are getting close to


1600
00:53:02,206 --> 00:53:02,806
stalling.


1601
00:53:03,616 --> 00:53:05,466
And so the user is going to have


1602
00:53:05,466 --> 00:53:06,666
a much better experience.


1603
00:53:07,266 --> 00:53:09,916
Now, the thing about this, we


1604
00:53:09,916 --> 00:53:11,816
have enabled it for Siri, Maps,


1605
00:53:11,876 --> 00:53:14,316
and Music, and you can do this


1606
00:53:14,316 --> 00:53:14,576
too.


1607
00:53:15,646 --> 00:53:17,536
We recommend-- we encourage you


1608
00:53:17,536 --> 00:53:19,146
to look into your applications.


1609
00:53:19,286 --> 00:53:20,566
Which one is often used when


1610
00:53:20,566 --> 00:53:21,646
walking out of the home?


1611
00:53:22,516 --> 00:53:24,746
Which one has a very critical


1612
00:53:24,746 --> 00:53:26,266
flow that is critical for the


1613
00:53:26,266 --> 00:53:27,676
user experience and that is hard


1614
00:53:27,676 --> 00:53:28,256
to recover?


1615
00:53:29,146 --> 00:53:30,376
Those kind of flows, they are


1616
00:53:30,376 --> 00:53:31,676
perfect for the multipath


1617
00:53:31,676 --> 00:53:33,316
service type and you can choose


1618
00:53:33,316 --> 00:53:35,056
them on handover or interactive


1619
00:53:35,516 --> 00:53:36,736
in the URLSession and


1620
00:53:36,736 --> 00:53:37,516
Network.framework.


1621
00:53:38,696 --> 00:53:40,966
Now, don't forget, if you do


1622
00:53:40,966 --> 00:53:42,596
enter in multipath, it still


1623
00:53:42,596 --> 00:53:44,446
requires both the client and the


1624
00:53:44,446 --> 00:53:47,046
server to work together, so go


1625
00:53:47,046 --> 00:53:49,076
and visit this URL to make sure


1626
00:53:49,076 --> 00:53:50,306
that your servers are configured


1627
00:53:50,306 --> 00:53:50,776
correctly.


1628
00:53:52,796 --> 00:53:56,566
So, this brings me to the end of


1629
00:53:56,626 --> 00:53:58,136
the mobility part of this


1630
00:53:58,136 --> 00:53:58,466
session.


1631
00:53:59,976 --> 00:54:01,146
If there is one thing that we


1632
00:54:01,146 --> 00:54:02,866
want you to remember, it's that


1633
00:54:03,626 --> 00:54:05,886
whenever a user is walking out


1634
00:54:05,886 --> 00:54:07,586
of their home, he should not


1635
00:54:07,676 --> 00:54:09,256
have a bad experience and turn


1636
00:54:09,256 --> 00:54:09,846
off Wi-Fi.


1637
00:54:10,786 --> 00:54:13,416
So, when you are developing your


1638
00:54:13,416 --> 00:54:14,666
applications, when you are


1639
00:54:14,666 --> 00:54:16,716
testing them and you are


1640
00:54:16,716 --> 00:54:19,336
configuring a bad Wi-Fi network


1641
00:54:19,336 --> 00:54:20,316
and you are walking out of the


1642
00:54:20,316 --> 00:54:22,266
home while testing it, don't


1643
00:54:22,266 --> 00:54:23,416
expect your applications to


1644
00:54:23,416 --> 00:54:25,556
become slow, to fail, or your


1645
00:54:25,556 --> 00:54:28,746
flows to basically-- to take


1646
00:54:28,746 --> 00:54:29,156
forever.


1647
00:54:29,916 --> 00:54:31,256
It should, in principle, just


1648
00:54:31,256 --> 00:54:31,476
work.


1649
00:54:31,956 --> 00:54:33,996
If it doesn't, make sure that


1650
00:54:33,996 --> 00:54:35,106
those flows that have been


1651
00:54:35,106 --> 00:54:37,266
failing are using the high-level


1652
00:54:37,586 --> 00:54:37,736
APIs.


1653
00:54:38,026 --> 00:54:39,356
These APIs are getting the full


1654
00:54:39,356 --> 00:54:41,356
benefit from Wi-Fi Assist from


1655
00:54:41,356 --> 00:54:42,856
all the improvements that we did


1656
00:54:42,856 --> 00:54:43,806
in iOS 13.


1657
00:54:44,376 --> 00:54:46,576
If you are doing active


1658
00:54:46,606 --> 00:54:48,826
interface management, come talk


1659
00:54:48,826 --> 00:54:50,726
to us in the lab or send us an


1660
00:54:50,726 --> 00:54:51,726
Apple Bug Report.


1661
00:54:52,296 --> 00:54:53,846
Tell us about your use case and


1662
00:54:53,846 --> 00:54:55,086
we will work together with you


1663
00:54:55,086 --> 00:54:57,056
to find an alternative so that


1664
00:54:57,516 --> 00:55:00,226
you can avoid doing this active


1665
00:55:00,226 --> 00:55:01,736
interface management and get the


1666
00:55:01,736 --> 00:55:03,666
full benefits from Wi-Fi assist.


1667
00:55:04,206 --> 00:55:07,026
And, finally, if you have flows


1668
00:55:07,026 --> 00:55:08,146
that are still getting stuck on


1669
00:55:08,146 --> 00:55:09,826
Wi-Fi and that are hard to


1670
00:55:09,826 --> 00:55:12,756
recover, try to see if you can


1671
00:55:12,756 --> 00:55:14,266
start using a multipath service


1672
00:55:14,266 --> 00:55:16,006
type, get your servers ready,


1673
00:55:16,006 --> 00:55:17,956
and get the same benefits as


1674
00:55:17,956 --> 00:55:20,056
Apple Music, Maps, and Siri.


1675
00:55:20,556 --> 00:55:22,506
So, this is the end of this part


1676
00:55:22,506 --> 00:55:23,186
of the session.


1677
00:55:24,126 --> 00:55:25,336
We have seen that with the Low


1678
00:55:25,336 --> 00:55:28,196
Data Mode users can now turn on


1679
00:55:28,196 --> 00:55:29,816
marked networks so that they


1680
00:55:29,816 --> 00:55:31,706
reduce the data usage on those


1681
00:55:31,706 --> 00:55:32,206
networks.


1682
00:55:32,696 --> 00:55:34,906
We have exposed a new API so


1683
00:55:34,906 --> 00:55:36,616
that your applications can


1684
00:55:36,616 --> 00:55:37,726
benefit from it as well.


1685
00:55:38,276 --> 00:55:41,246
If you are building a publisher


1686
00:55:41,246 --> 00:55:43,036
subscriber style application,


1687
00:55:43,766 --> 00:55:45,496
Combine in URLSession allows you


1688
00:55:45,496 --> 00:55:47,136
to build you a very elegant app,


1689
00:55:47,746 --> 00:55:49,386
the same way as Guoye has shown


1690
00:55:49,386 --> 00:55:49,936
you today.


1691
00:55:50,676 --> 00:55:52,706
Finally, WebSockets.


1692
00:55:53,106 --> 00:55:54,366
It has been the most requested


1693
00:55:54,406 --> 00:55:57,026
feature is making it into iOS 13


1694
00:55:57,596 --> 00:55:59,396
and so you can easily build


1695
00:55:59,396 --> 00:56:01,066
two-way communications into your


1696
00:56:01,066 --> 00:56:01,876
applications.


1697
00:56:02,436 --> 00:56:05,996
And, in iOS 13, we did a huge


1698
00:56:05,996 --> 00:56:08,486
push to improve the mobility for


1699
00:56:08,636 --> 00:56:11,306
your applications so you can get


1700
00:56:11,306 --> 00:56:12,986
the same benefits by using the


1701
00:56:12,986 --> 00:56:14,746
high-level APIs.


1702
00:56:15,816 --> 00:56:18,796
So, later this afternoon, there


1703
00:56:18,796 --> 00:56:20,446
is a part two of the Advances in


1704
00:56:20,446 --> 00:56:21,346
Networking session.


1705
00:56:21,836 --> 00:56:23,216
You will be seeing more exciting


1706
00:56:23,216 --> 00:56:25,396
new APIs that will benefit your


1707
00:56:25,396 --> 00:56:26,016
applications.


1708
00:56:26,836 --> 00:56:28,216
Tomorrow, for those among you


1709
00:56:28,216 --> 00:56:30,496
that are developing on macOS,


1710
00:56:30,906 --> 00:56:32,466
there are new APIs for network


1711
00:56:32,466 --> 00:56:35,046
extensions, and we also have the


1712
00:56:35,046 --> 00:56:36,636
lab at 9:00 a.m. starting at


1713
00:56:36,636 --> 00:56:38,016
9:00 a.m. tomorrow and you can


1714
00:56:38,016 --> 00:56:39,626
come there to ask us questions


1715
00:56:40,086 --> 00:56:41,586
and we will be very happy to


1716
00:56:41,586 --> 00:56:44,006
help you out.


1717
00:56:44,286 --> 00:56:45,676
So, this is the end.


1718
00:56:45,776 --> 00:56:46,986
I hope you had fun and you


1719
00:56:46,986 --> 00:56:47,906
enjoyed the session.


1720
00:56:50,046 --> 00:56:50,516
Thank you very much.


1721
00:56:51,508 --> 00:56:53,508
[ Applause ]

