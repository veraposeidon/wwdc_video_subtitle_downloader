1
00:00:00,506 --> 00:00:04,516
[ Music ]


2
00:00:05,116 --> 00:00:07,116
[ Applause ]


3
00:00:07,216 --> 00:00:07,966
>> Good morning.


4
00:00:08,516 --> 00:00:10,806
[ Applause ]


5
00:00:11,306 --> 00:00:12,166
My name's Nick Gillett.


6
00:00:12,256 --> 00:00:13,716
I'm an engineer here at Apple on


7
00:00:13,716 --> 00:00:15,246
the Core Data team, and it is my


8
00:00:15,346 --> 00:00:17,046
pleasure to welcome you to Using


9
00:00:17,046 --> 00:00:18,556
Core Data with CloudKit.


10
00:00:19,496 --> 00:00:20,826
Today, we're here to talk about


11
00:00:20,826 --> 00:00:22,746
a belief that I have that all of


12
00:00:22,746 --> 00:00:24,326
my data should be available to


13
00:00:24,326 --> 00:00:26,036
me on whatever device I have,


14
00:00:26,066 --> 00:00:27,516
wherever I am in the world.


15
00:00:28,166 --> 00:00:30,796
And to make this a reality, we


16
00:00:30,796 --> 00:00:32,756
have to make it a lot easier for


17
00:00:32,756 --> 00:00:34,286
you to add this functionality to


18
00:00:34,286 --> 00:00:35,346
your applications.


19
00:00:36,096 --> 00:00:37,346
I'm sure many of you came in


20
00:00:37,346 --> 00:00:39,016
today with an iPhone, and you


21
00:00:39,016 --> 00:00:40,716
may also have a Mac at home.


22
00:00:41,176 --> 00:00:42,826
You may even be toting around a


23
00:00:42,826 --> 00:00:44,506
MacBook or a MacBook Pro in your


24
00:00:44,506 --> 00:00:45,616
backpack while you're here at


25
00:00:45,616 --> 00:00:46,326
the conference.


26
00:00:46,906 --> 00:00:48,906
And the data that we create on


27
00:00:48,906 --> 00:00:50,816
all of these devices is


28
00:00:50,816 --> 00:00:52,106
naturally trapped.


29
00:00:52,766 --> 00:00:52,976
Right?


30
00:00:52,976 --> 00:00:54,656
There's no easy way for us to


31
00:00:54,656 --> 00:00:55,956
move it from one device to


32
00:00:55,956 --> 00:00:57,496
another without some type of


33
00:00:57,496 --> 00:00:58,546
user interaction.


34
00:00:59,196 --> 00:01:01,306
Now, to solve this, we typically


35
00:01:01,306 --> 00:01:03,066
want to turn to cloud storage.


36
00:01:03,446 --> 00:01:05,266
Because it offers us the promise


37
00:01:05,385 --> 00:01:06,756
of moving data that's on one


38
00:01:06,756 --> 00:01:08,556
device seamlessly and


39
00:01:08,556 --> 00:01:10,096
transparently to all of the


40
00:01:10,096 --> 00:01:11,496
other devices we own.


41
00:01:12,076 --> 00:01:13,956
And cloud storage has benefits


42
00:01:13,956 --> 00:01:15,726
even if we only happen to have a


43
00:01:15,726 --> 00:01:16,836
single device.


44
00:01:17,086 --> 00:01:17,306
Right?


45
00:01:17,306 --> 00:01:18,986
As our applications create data


46
00:01:18,986 --> 00:01:20,926
on this device, it can be backed


47
00:01:20,926 --> 00:01:22,466
up in the cloud and stored.


48
00:01:22,966 --> 00:01:24,136
So that when we get a new


49
00:01:24,136 --> 00:01:26,396
device, whether by choice or by


50
00:01:26,396 --> 00:01:28,176
accident -- ask me how I know --


51
00:01:28,336 --> 00:01:30,326
on the way out of the store,


52
00:01:30,326 --> 00:01:32,026
that device can be restored to


53
00:01:32,026 --> 00:01:33,626
the one that we always knew and


54
00:01:33,626 --> 00:01:33,976
loved.


55
00:01:34,546 --> 00:01:36,316
And it may surprise you to learn


56
00:01:36,316 --> 00:01:37,406
that there are some existing


57
00:01:37,406 --> 00:01:39,066
technologies on our platforms


58
00:01:39,066 --> 00:01:40,056
that can help us with this


59
00:01:40,056 --> 00:01:40,556
problem.


60
00:01:40,556 --> 00:01:43,406
For example, Core Data provides


61
00:01:43,406 --> 00:01:44,936
a robust set of APIs for


62
00:01:44,936 --> 00:01:46,526
managing data locally in your


63
00:01:46,526 --> 00:01:48,766
applications and on disc.


64
00:01:48,766 --> 00:01:50,076
And the CloudKit framework


65
00:01:50,306 --> 00:01:51,666
provides access to one of the


66
00:01:51,666 --> 00:01:53,246
world's largest distributed


67
00:01:53,246 --> 00:01:54,026
databases.


68
00:01:54,526 --> 00:01:55,726
Both of these frameworks are


69
00:01:55,726 --> 00:01:57,186
available on all of our Apple


70
00:01:57,276 --> 00:01:57,976
platforms.


71
00:01:58,236 --> 00:02:00,106
And because of that, enable us


72
00:02:00,106 --> 00:02:01,786
to build a wide variety of


73
00:02:01,786 --> 00:02:02,526
applications.


74
00:02:03,316 --> 00:02:04,806
In fact, these frameworks are


75
00:02:04,806 --> 00:02:06,116
actually quite similar.


76
00:02:06,666 --> 00:02:08,235
They even express themselves


77
00:02:08,235 --> 00:02:09,925
using a common set of patterns


78
00:02:09,925 --> 00:02:10,826
and paradigms.


79
00:02:11,276 --> 00:02:13,106
Modeling their APIs in terms of


80
00:02:13,106 --> 00:02:15,646
objects, models, and stores.


81
00:02:16,346 --> 00:02:18,726
Now, in Core Data, we call these


82
00:02:18,726 --> 00:02:20,126
objects instances of


83
00:02:20,156 --> 00:02:21,726
NSManagedObject, and they're


84
00:02:21,726 --> 00:02:23,096
what gives our application


85
00:02:23,096 --> 00:02:25,066
access to values that we store


86
00:02:25,296 --> 00:02:25,926
on disc.


87
00:02:26,636 --> 00:02:28,956
CloudKit similarly exposes a


88
00:02:29,076 --> 00:02:31,086
CKRecord, which is a key value


89
00:02:31,086 --> 00:02:32,606
like store for accessing data


90
00:02:32,606 --> 00:02:34,166
that you've stored in the cloud.


91
00:02:35,036 --> 00:02:37,026
These objects are described by


92
00:02:37,026 --> 00:02:38,466
what we like to call a model.


93
00:02:38,906 --> 00:02:40,736
And in Core Data we call that an


94
00:02:40,796 --> 00:02:42,856
NSManagedObjectModel, which you


95
00:02:42,856 --> 00:02:44,686
can create in code or using the


96
00:02:44,686 --> 00:02:46,106
model editor in Xcode.


97
00:02:46,926 --> 00:02:49,176
Quite similarly, CloudKit uses a


98
00:02:49,176 --> 00:02:49,586
Schema.


99
00:02:50,196 --> 00:02:51,696
And the CloudKit schema can be


100
00:02:51,696 --> 00:02:53,096
defined either by CloudKit


101
00:02:53,136 --> 00:02:55,626
dynamically as you use CKRecords


102
00:02:55,626 --> 00:02:56,846
in the development environment


103
00:02:57,246 --> 00:02:59,056
or using the CloudKit dashboard.


104
00:02:59,796 --> 00:03:01,776
Finally, objects are persisted


105
00:03:01,776 --> 00:03:03,686
to use the Core Data vernacular,


106
00:03:04,116 --> 00:03:05,856
in what we like to call a store.


107
00:03:06,266 --> 00:03:07,906
In Core Data those are instances


108
00:03:07,906 --> 00:03:09,396
of NSPersistentStore.


109
00:03:09,756 --> 00:03:12,436
But in CloudKit, CKRecord's are


110
00:03:12,436 --> 00:03:15,146
stored in a CKRecordZone or in a


111
00:03:15,246 --> 00:03:16,166
CKDatabase.


112
00:03:16,866 --> 00:03:18,696
And so, as you can see and


113
00:03:18,696 --> 00:03:19,956
indeed as many of you have


114
00:03:20,076 --> 00:03:20,976
pointed out to me over the


115
00:03:20,976 --> 00:03:22,926
years, it would be great if we


116
00:03:22,926 --> 00:03:24,786
could make it easier to combine


117
00:03:24,786 --> 00:03:26,416
these two conceptually similar


118
00:03:26,416 --> 00:03:27,106
frameworks.


119
00:03:27,776 --> 00:03:29,216
And so to show you just how much


120
00:03:29,276 --> 00:03:30,436
easier we've made that this


121
00:03:30,436 --> 00:03:31,586
year, I'd like to take you


122
00:03:31,626 --> 00:03:32,996
through what it's like to create


123
00:03:32,996 --> 00:03:34,526
a brand new application in


124
00:03:34,576 --> 00:03:34,996
Xcode.


125
00:03:35,296 --> 00:03:37,406
Here you can see, I have Xcode


126
00:03:37,406 --> 00:03:37,766
open.


127
00:03:38,176 --> 00:03:39,666
And I'm going to create a new


128
00:03:39,786 --> 00:03:42,216
iOS project as a Master Detail


129
00:03:42,216 --> 00:03:42,926
application.


130
00:03:43,416 --> 00:03:44,356
I like Master Detail


131
00:03:44,356 --> 00:03:45,636
applications because they give


132
00:03:45,636 --> 00:03:47,646
us a great UI to build on top of


133
00:03:47,646 --> 00:03:49,246
when exploring features of Core


134
00:03:49,246 --> 00:03:49,596
Data.


135
00:03:50,086 --> 00:03:51,896
So, I'll select it and click


136
00:03:51,896 --> 00:03:52,326
Next.


137
00:03:53,126 --> 00:03:54,636
And then give my application a


138
00:03:54,636 --> 00:03:54,956
name.


139
00:03:55,186 --> 00:03:57,436
In this case, just WWDC Demo.


140
00:03:58,106 --> 00:03:59,476
And, because we're here to hear


141
00:03:59,476 --> 00:04:01,246
about Core Data, we'll check the


142
00:04:01,246 --> 00:04:02,546
Core Data checkbox.


143
00:04:03,066 --> 00:04:05,176
New in Xcode 11 is this checkbox


144
00:04:05,176 --> 00:04:06,346
called Use CloudKit.


145
00:04:06,826 --> 00:04:08,346
And this tells Xcode that we


146
00:04:08,346 --> 00:04:09,746
want to generate an application


147
00:04:09,746 --> 00:04:11,336
that's designed to use both Core


148
00:04:11,336 --> 00:04:12,646
Data and CloudKit.


149
00:04:12,806 --> 00:04:14,876
So, let's check that, and then


150
00:04:14,876 --> 00:04:16,536
we'll click Next and find our


151
00:04:16,536 --> 00:04:17,946
application somewhere to live on


152
00:04:17,946 --> 00:04:18,676
the file system.


153
00:04:19,676 --> 00:04:21,495
After we tap Create, Xcode


154
00:04:21,495 --> 00:04:22,996
generates the application for


155
00:04:22,996 --> 00:04:23,196
us.


156
00:04:23,396 --> 00:04:24,716
And if you've ever built a


157
00:04:24,716 --> 00:04:26,246
CloudKit application before,


158
00:04:26,806 --> 00:04:27,716
you'll know that there are a


159
00:04:27,716 --> 00:04:29,266
couple additional things we need


160
00:04:29,266 --> 00:04:30,866
to add to this before it's ready


161
00:04:30,866 --> 00:04:31,986
to build and run.


162
00:04:32,476 --> 00:04:33,546
These come in the form of


163
00:04:33,546 --> 00:04:35,606
Capabilities, which we add using


164
00:04:35,606 --> 00:04:37,226
the Signing & Capabilities tab.


165
00:04:37,766 --> 00:04:38,786
We need to add two.


166
00:04:39,396 --> 00:04:40,796
The first is the iCloud


167
00:04:40,916 --> 00:04:41,516
capability.


168
00:04:41,706 --> 00:04:42,936
So, I'll add that by clicking


169
00:04:42,936 --> 00:04:43,776
this plus (+) next to


170
00:04:43,776 --> 00:04:46,206
Capability, type iCloud, and hit


171
00:04:46,206 --> 00:04:46,556
Enter.


172
00:04:47,256 --> 00:04:49,706
When I do that, I can hit the


173
00:04:49,706 --> 00:04:51,436
CloudKit checkbox and you'll see


174
00:04:51,436 --> 00:04:52,486
that that adds push


175
00:04:52,486 --> 00:04:54,366
notifications for me as well.


176
00:04:54,856 --> 00:04:56,556
Xcode has also automatically


177
00:04:56,556 --> 00:04:58,036
created an iCloud container


178
00:04:58,036 --> 00:05:00,076
identifier for my application to


179
00:05:00,076 --> 00:05:01,056
use.


180
00:05:01,276 --> 00:05:02,396
Next, we want to add a


181
00:05:02,476 --> 00:05:03,926
background mode capability.


182
00:05:04,446 --> 00:05:05,396
And to do that, I'll hit the


183
00:05:05,396 --> 00:05:06,636
plus (+) again, and type


184
00:05:06,696 --> 00:05:07,726
Background, and hit Enter.


185
00:05:08,266 --> 00:05:09,616
And the reason we do this is to


186
00:05:09,616 --> 00:05:11,276
enable remote notifications,


187
00:05:11,276 --> 00:05:12,836
which allow our application to


188
00:05:12,836 --> 00:05:14,756
receive push notifications when


189
00:05:14,756 --> 00:05:15,506
it's not running.


190
00:05:16,356 --> 00:05:18,086
So, let's run this application


191
00:05:18,126 --> 00:05:19,826
and see what Xcode has created


192
00:05:19,826 --> 00:05:20,316
for us.


193
00:05:21,506 --> 00:05:22,706
Here you can see that we have a


194
00:05:22,706 --> 00:05:24,636
very simple application with two


195
00:05:24,636 --> 00:05:25,446
view controllers.


196
00:05:25,556 --> 00:05:27,096
A table view on the left and a


197
00:05:27,096 --> 00:05:28,356
detail view controller on the


198
00:05:28,356 --> 00:05:28,636
right.


199
00:05:29,316 --> 00:05:30,836
And I can add some data to this


200
00:05:30,836 --> 00:05:32,296
application using the plus (+)


201
00:05:32,296 --> 00:05:33,346
button in the upper right-hand


202
00:05:33,346 --> 00:05:33,756
corner.


203
00:05:34,286 --> 00:05:35,746
By default, Xcode generates a


204
00:05:35,746 --> 00:05:37,596
very simple Core Data data model


205
00:05:37,686 --> 00:05:39,096
for us that's just a simple


206
00:05:39,136 --> 00:05:39,766
timestamp.


207
00:05:40,506 --> 00:05:42,276
But, we're here to see what it's


208
00:05:42,276 --> 00:05:43,806
like to add sync functionality.


209
00:05:44,076 --> 00:05:45,606
And to do that, we need another


210
00:05:45,606 --> 00:05:46,636
device.


211
00:05:46,766 --> 00:05:48,186
So, let's run the application on


212
00:05:48,236 --> 00:05:48,816
our iPhone.


213
00:05:49,246 --> 00:05:50,516
And you can see that we have the


214
00:05:50,516 --> 00:05:52,576
master view controller and all


215
00:05:52,576 --> 00:05:54,436
of the data that we added on our


216
00:05:54,436 --> 00:05:55,446
iPad.


217
00:05:55,976 --> 00:05:57,426
Now let's add some data using


218
00:05:57,426 --> 00:05:57,856
our phone.


219
00:05:58,376 --> 00:06:00,366
And of course, watch that sync


220
00:06:00,426 --> 00:06:01,796
back to the iPad.


221
00:06:02,306 --> 00:06:04,066
Now, because I have a magic push


222
00:06:04,066 --> 00:06:05,596
notification in this controller,


223
00:06:05,596 --> 00:06:06,996
I can make this happen whenever


224
00:06:06,996 --> 00:06:07,496
I want.


225
00:06:08,216 --> 00:06:09,566
But let's see something that's a


226
00:06:09,566 --> 00:06:11,106
little bit more realistic.


227
00:06:11,106 --> 00:06:13,156
I'm going to delete all the data


228
00:06:13,156 --> 00:06:14,336
from this application that was


229
00:06:14,336 --> 00:06:16,426
added on my iPhone from the


230
00:06:16,536 --> 00:06:17,016
iPad.


231
00:06:17,016 --> 00:06:18,206
These top four rows.


232
00:06:18,746 --> 00:06:20,346
And then, I'll do the same thing


233
00:06:20,446 --> 00:06:22,146
from the iPhone, deleting all


234
00:06:22,146 --> 00:06:23,736
the data that was added from the


235
00:06:23,816 --> 00:06:24,476
iPad.


236
00:06:25,326 --> 00:06:27,616
Now, previously I used a magic


237
00:06:27,686 --> 00:06:28,596
push notification.


238
00:06:28,816 --> 00:06:29,966
But I'm not going to touch the


239
00:06:29,966 --> 00:06:30,916
controller anymore.


240
00:06:31,056 --> 00:06:32,756
I'll just let this video play so


241
00:06:32,756 --> 00:06:34,326
that you can see what it was


242
00:06:34,326 --> 00:06:35,866
like to actually watch these two


243
00:06:35,866 --> 00:06:37,786
devices converge when I filmed


244
00:06:37,816 --> 00:06:38,846
this.


245
00:06:40,536 --> 00:06:40,796
Right?


246
00:06:41,806 --> 00:06:43,086
Now, as contrived as that might


247
00:06:43,146 --> 00:06:44,396
be, it's pretty awesome that in


248
00:06:44,396 --> 00:06:46,476
a few simple clicks we've built


249
00:06:46,476 --> 00:06:47,936
an application that syncs end to


250
00:06:47,936 --> 00:06:49,366
end using both Core Data and


251
00:06:49,366 --> 00:06:49,896
CloudKit.


252
00:06:50,486 --> 00:06:51,526
And I'd be doing you a


253
00:06:51,526 --> 00:06:52,666
disservice if somewhere in the


254
00:06:52,666 --> 00:06:54,236
application delegate I'd hidden


255
00:06:54,286 --> 00:06:55,806
15,000 lines of code.


256
00:06:56,366 --> 00:06:57,956
So, let's see what that looks


257
00:06:57,956 --> 00:06:58,126
like.


258
00:06:59,836 --> 00:07:01,526
Now, this is a pretty standard


259
00:07:01,526 --> 00:07:02,716
application delegate.


260
00:07:02,806 --> 00:07:04,086
In fact, if you've ever built a


261
00:07:04,086 --> 00:07:05,496
Core Data application before


262
00:07:05,496 --> 00:07:07,326
using Xcode, it'll look very


263
00:07:07,326 --> 00:07:09,246
familiar to you, including this


264
00:07:09,246 --> 00:07:10,726
area where we set up the Core


265
00:07:10,726 --> 00:07:11,766
Data stack.


266
00:07:12,166 --> 00:07:13,376
The only thing that's different


267
00:07:13,376 --> 00:07:14,996
about this application is some


268
00:07:14,996 --> 00:07:16,676
new API in Core Data this year


269
00:07:17,066 --> 00:07:17,426
called


270
00:07:17,426 --> 00:07:19,086
NSPersistentCloudKitContainer,


271
00:07:19,626 --> 00:07:20,786
which is designed to help you


272
00:07:20,786 --> 00:07:22,266
manage Core Data stores that are


273
00:07:22,266 --> 00:07:24,686
backed by a CloudKit database.


274
00:07:26,216 --> 00:07:28,236
Now, if you've ever built a Core


275
00:07:28,236 --> 00:07:29,626
Data application before using


276
00:07:29,766 --> 00:07:31,556
Xcode you will have seen


277
00:07:31,666 --> 00:07:33,216
NSPersistentContainer here


278
00:07:33,216 --> 00:07:34,466
instead, which is


279
00:07:34,616 --> 00:07:36,276
NSPersistentCloudKitContainer's


280
00:07:36,276 --> 00:07:37,606
superclass.


281
00:07:37,816 --> 00:07:39,636
Because of that, you can add


282
00:07:39,636 --> 00:07:41,086
CloudKit functionality to your


283
00:07:41,086 --> 00:07:42,736
existing Core Data applications


284
00:07:42,786 --> 00:07:44,426
by changing as little as one


285
00:07:44,426 --> 00:07:45,036
line of code.


286
00:07:45,336 --> 00:07:46,716
What exactly is


287
00:07:46,866 --> 00:07:48,576
NSPersistentCloudKitContainer?


288
00:07:49,426 --> 00:07:51,836
Well, it's an encapsulation of a


289
00:07:51,836 --> 00:07:53,466
set of really common patterns


290
00:07:53,466 --> 00:07:54,896
that we saw everyone have to


291
00:07:54,986 --> 00:07:56,346
build when they wanted to


292
00:07:56,346 --> 00:07:57,966
implement end-to-end sync using


293
00:07:57,966 --> 00:07:58,496
CloudKit.


294
00:07:58,976 --> 00:08:00,316
And it's designed to save you


295
00:08:00,316 --> 00:08:02,296
thousands of lines of code.


296
00:08:03,636 --> 00:08:05,276
It's also a foundation that we


297
00:08:05,276 --> 00:08:06,676
hope to be able to build on with


298
00:08:06,756 --> 00:08:08,366
you iteratively in the years to


299
00:08:08,366 --> 00:08:08,656
come.


300
00:08:09,066 --> 00:08:11,436
And of course, to do that -- get


301
00:08:11,436 --> 00:08:13,236
ready, here it comes -- we need


302
00:08:13,236 --> 00:08:13,596
your help.


303
00:08:15,376 --> 00:08:16,566
We're going to need feedback


304
00:08:16,566 --> 00:08:17,206
about how


305
00:08:17,356 --> 00:08:18,696
NSPersistentCloudKitContainer


306
00:08:18,696 --> 00:08:20,696
works for you and what features


307
00:08:20,696 --> 00:08:22,246
it's missing, or whether or not


308
00:08:22,246 --> 00:08:23,776
its existing features are enough


309
00:08:23,776 --> 00:08:24,786
to meet the needs of your


310
00:08:24,786 --> 00:08:25,626
applications.


311
00:08:25,856 --> 00:08:27,396
So, let's look at a little bit


312
00:08:27,666 --> 00:08:28,866
-- a few of those features in


313
00:08:28,866 --> 00:08:29,296
detail.


314
00:08:30,266 --> 00:08:31,796
NSPersistentCloudKitContainer


315
00:08:31,796 --> 00:08:33,566
provides your application with a


316
00:08:33,566 --> 00:08:34,385
local replica.


317
00:08:34,806 --> 00:08:36,936
A complete mirror if you will of


318
00:08:36,936 --> 00:08:38,126
the Core Data -- or the CloudKit


319
00:08:38,155 --> 00:08:39,486
database that backs it.


320
00:08:40,265 --> 00:08:42,596
And, it also implements a robust


321
00:08:42,596 --> 00:08:44,135
scheduling and error recovery


322
00:08:44,135 --> 00:08:45,076
event loop so that your


323
00:08:45,076 --> 00:08:46,116
application doesn't have to


324
00:08:46,116 --> 00:08:47,716
worry about any operations.


325
00:08:47,886 --> 00:08:49,986
Finally, it handles the


326
00:08:49,986 --> 00:08:51,876
transformation between instances


327
00:08:51,916 --> 00:08:53,096
of NSManagedObject, that I


328
00:08:53,096 --> 00:08:55,636
mentioned earlier, and CKRecord.


329
00:08:57,406 --> 00:08:58,596
Now, a local replica is


330
00:08:58,596 --> 00:08:59,676
important for a number of


331
00:08:59,676 --> 00:09:00,236
reasons.


332
00:09:01,096 --> 00:09:02,056
But it means that as your


333
00:09:02,056 --> 00:09:03,676
application works with objects,


334
00:09:03,866 --> 00:09:05,056
it will be writing them to a


335
00:09:05,056 --> 00:09:07,426
local store file managed by Core


336
00:09:07,426 --> 00:09:07,766
Data.


337
00:09:08,256 --> 00:09:09,626
And, it will be reading them


338
00:09:09,626 --> 00:09:11,006
from that file as well.


339
00:09:11,006 --> 00:09:13,216
And this is because of the


340
00:09:13,256 --> 00:09:14,176
difference between the


341
00:09:14,176 --> 00:09:15,956
performance profile of the local


342
00:09:15,956 --> 00:09:18,056
database versus cloud storage.


343
00:09:18,536 --> 00:09:18,706
Right?


344
00:09:18,706 --> 00:09:19,646
When we think in terms of


345
00:09:19,646 --> 00:09:21,116
latency of accessing a local


346
00:09:21,116 --> 00:09:23,396
file, we can read from a file on


347
00:09:23,396 --> 00:09:24,796
disc in milliseconds at the


348
00:09:24,796 --> 00:09:25,926
worst case.


349
00:09:26,126 --> 00:09:27,256
Whereas, over the network, it


350
00:09:27,256 --> 00:09:28,806
might take us seconds or minutes


351
00:09:28,806 --> 00:09:29,786
to fetch the data that our


352
00:09:29,786 --> 00:09:30,846
application needs.


353
00:09:31,496 --> 00:09:33,066
Likewise, the local store file


354
00:09:33,066 --> 00:09:34,396
can provide your application


355
00:09:34,396 --> 00:09:36,146
with much higher bandwidth,


356
00:09:36,146 --> 00:09:37,756
measured even on our iPhone


357
00:09:37,756 --> 00:09:39,606
devices in gigabytes per second,


358
00:09:40,096 --> 00:09:41,396
whereas the cloud is sometimes


359
00:09:41,396 --> 00:09:42,876
limited to megabytes or


360
00:09:42,876 --> 00:09:44,066
kilobytes per second of


361
00:09:44,066 --> 00:09:45,116
available bandwidth.


362
00:09:46,316 --> 00:09:47,816
Now, this local replica


363
00:09:47,816 --> 00:09:49,876
necessarily adds a significant


364
00:09:49,876 --> 00:09:51,926
amount of complexity, and that's


365
00:09:51,926 --> 00:09:52,056
why


366
00:09:52,146 --> 00:09:53,776
NSPersistentCloudKitContainer


367
00:09:53,776 --> 00:09:55,536
implements a robust scheduling


368
00:09:55,536 --> 00:09:56,826
and error recovery event loop


369
00:09:56,826 --> 00:09:57,336
for you.


370
00:09:57,796 --> 00:09:59,136
So that as your application


371
00:09:59,136 --> 00:10:00,666
writes data to the local store,


372
00:10:01,116 --> 00:10:02,736
NSPersistentCloudKitContainer


373
00:10:02,736 --> 00:10:04,046
automatically moves those


374
00:10:04,136 --> 00:10:04,956
objects up to the cloud.


375
00:10:06,376 --> 00:10:08,126
And, when something changes in


376
00:10:08,126 --> 00:10:08,846
CloudKit,


377
00:10:08,846 --> 00:10:10,336
NSPersistentCloudKitContainer


378
00:10:10,336 --> 00:10:11,816
will schedule work on the system


379
00:10:12,216 --> 00:10:14,086
to bring those objects down and


380
00:10:14,086 --> 00:10:15,136
import them into your local


381
00:10:15,136 --> 00:10:16,926
database, making them available


382
00:10:16,926 --> 00:10:17,846
to your application.


383
00:10:18,776 --> 00:10:20,846
Of course, during this process,


384
00:10:20,846 --> 00:10:22,546
your objects are necessarily


385
00:10:22,546 --> 00:10:24,116
transformed from instances of


386
00:10:24,116 --> 00:10:26,426
NSManagedObject into instances


387
00:10:26,426 --> 00:10:27,946
of CKRecord by


388
00:10:28,056 --> 00:10:29,726
NSPersistentCloudKitContainer.


389
00:10:30,736 --> 00:10:32,606
And likewise, when something


390
00:10:32,606 --> 00:10:34,016
changes in the cloud, those


391
00:10:34,016 --> 00:10:35,086
CKRecord's will be made


392
00:10:35,086 --> 00:10:37,106
available to you as instances of


393
00:10:37,196 --> 00:10:38,636
NSManagedObject in your local


394
00:10:38,636 --> 00:10:39,296
store file.


395
00:10:41,096 --> 00:10:41,726
And that's what


396
00:10:41,726 --> 00:10:43,146
NSPersistentCloudKitContainer


397
00:10:43,246 --> 00:10:44,486
brings to your application.


398
00:10:44,856 --> 00:10:46,406
It's a complete local replica of


399
00:10:46,406 --> 00:10:47,676
everything in the private


400
00:10:47,676 --> 00:10:49,106
database in CloudKit.


401
00:10:49,706 --> 00:10:50,706
You should know, though, that we


402
00:10:50,706 --> 00:10:53,116
do manage a specific custom zone


403
00:10:53,406 --> 00:10:54,506
for Core Data syncing.


404
00:10:55,096 --> 00:10:57,566
We implement automatic


405
00:10:57,566 --> 00:10:58,876
scheduling so that you don't


406
00:10:58,876 --> 00:11:00,576
have to worry about optimizing


407
00:11:00,576 --> 00:11:02,156
any operations or scheduling


408
00:11:02,156 --> 00:11:02,886
them in the system.


409
00:11:03,356 --> 00:11:04,856
And, I think more importantly,


410
00:11:04,916 --> 00:11:05,966
you don't have to worry about


411
00:11:05,966 --> 00:11:07,436
implementing any error recovery


412
00:11:07,436 --> 00:11:08,866
logic in your application.


413
00:11:10,066 --> 00:11:11,956
Finally, we implement automatic


414
00:11:11,956 --> 00:11:12,986
serialization from


415
00:11:12,986 --> 00:11:15,286
NSManagedObject to CKRecord.


416
00:11:15,626 --> 00:11:17,106
And we use your NSManagedObject


417
00:11:17,106 --> 00:11:18,576
model to figure out how to do


418
00:11:18,576 --> 00:11:18,916
this.


419
00:11:20,476 --> 00:11:22,876
But it'd be obtuse of me to


420
00:11:22,876 --> 00:11:24,256
stand up here and tell you that


421
00:11:24,256 --> 00:11:25,176
once you've adopted


422
00:11:25,236 --> 00:11:26,916
NSPersistentCloudKitContainer,


423
00:11:26,966 --> 00:11:28,066
you're done, and you have a


424
00:11:28,066 --> 00:11:29,616
fully functioning application.


425
00:11:29,696 --> 00:11:31,666
So, I'd like to spend the rest


426
00:11:31,666 --> 00:11:33,026
of the talk thinking about what


427
00:11:33,026 --> 00:11:34,736
it means for you to build on top


428
00:11:34,736 --> 00:11:34,866
of


429
00:11:34,936 --> 00:11:36,486
NSPersistentCloudKitContainer.


430
00:11:36,986 --> 00:11:38,216
And I think that starts with


431
00:11:38,266 --> 00:11:39,656
building great applications that


432
00:11:39,656 --> 00:11:40,886
are powered by Core Data.


433
00:11:41,836 --> 00:11:43,356
Later, we'll also look at how


434
00:11:43,356 --> 00:11:44,906
you can extend the foundation


435
00:11:44,906 --> 00:11:45,966
that we've built into


436
00:11:46,056 --> 00:11:48,026
NSPersistentCloudKitContainer to


437
00:11:48,026 --> 00:11:49,496
customize it to your needs.


438
00:11:50,746 --> 00:11:52,256
Now, for me, building great


439
00:11:52,256 --> 00:11:53,616
applications with Core Data


440
00:11:54,066 --> 00:11:55,746
starts by absorbing a lot of


441
00:11:55,746 --> 00:11:56,326
knowledge.


442
00:11:56,846 --> 00:11:58,396
And, to that end, we've written


443
00:11:58,396 --> 00:12:00,286
a ton of documentation this year


444
00:12:00,286 --> 00:12:00,956
about how


445
00:12:01,016 --> 00:12:02,496
NSPersistentCloudKitContainer


446
00:12:02,496 --> 00:12:04,476
works and how you can integrate


447
00:12:04,476 --> 00:12:05,806
it into your applications.


448
00:12:07,376 --> 00:12:08,526
There are some features of Core


449
00:12:08,526 --> 00:12:10,276
Data that I feel go really well


450
00:12:10,276 --> 00:12:10,376
with


451
00:12:10,416 --> 00:12:12,076
NSPersistentCloudKitContainer.


452
00:12:12,596 --> 00:12:13,266
Things like the


453
00:12:13,376 --> 00:12:14,776
FetchResultsController, which


454
00:12:14,776 --> 00:12:16,376
helps you build scalable user


455
00:12:16,376 --> 00:12:17,486
interfaces backed by a


456
00:12:17,486 --> 00:12:18,956
significant amount of data.


457
00:12:19,796 --> 00:12:21,726
And query generations which help


458
00:12:21,726 --> 00:12:23,446
you stabilize those user


459
00:12:23,446 --> 00:12:24,966
interfaces against changes that


460
00:12:24,966 --> 00:12:25,876
might be happening in the


461
00:12:25,876 --> 00:12:26,436
background.


462
00:12:27,196 --> 00:12:28,276
Like say from


463
00:12:28,316 --> 00:12:29,776
NSPersistentCloudKitContainer.


464
00:12:30,846 --> 00:12:32,866
And finally, there's history


465
00:12:32,866 --> 00:12:34,176
tracking, which we introduced a


466
00:12:34,176 --> 00:12:35,506
few years ago to help you


467
00:12:35,506 --> 00:12:36,956
understand what's changed in the


468
00:12:36,956 --> 00:12:37,576
database.


469
00:12:37,956 --> 00:12:38,226
And with


470
00:12:38,256 --> 00:12:39,756
NSPersistentCloudKitContainer,


471
00:12:39,756 --> 00:12:41,486
you can use it to decide whether


472
00:12:41,486 --> 00:12:42,816
or not any of those background


473
00:12:42,816 --> 00:12:44,636
updates are relevant to what


474
00:12:44,636 --> 00:12:46,146
your user's currently doing.


475
00:12:47,026 --> 00:12:48,216
We'll be covering these and a


476
00:12:48,216 --> 00:12:49,946
whole lot more in our session on


477
00:12:49,946 --> 00:12:51,326
Thursday at 3 pm.


478
00:12:51,966 --> 00:12:53,636
And, to go along with that,


479
00:12:53,636 --> 00:12:55,216
we're also introducing a new


480
00:12:55,216 --> 00:12:56,776
sample application this year


481
00:12:57,086 --> 00:12:58,136
that's designed to give you


482
00:12:58,136 --> 00:12:59,566
something to hold in your hands,


483
00:12:59,566 --> 00:13:00,306
to feel how


484
00:13:00,366 --> 00:13:01,846
NSPersistentCloudKitContainer


485
00:13:01,846 --> 00:13:03,816
works along with all these other


486
00:13:03,816 --> 00:13:04,926
features of Core Data.


487
00:13:05,546 --> 00:13:07,016
It's designed to manage a set of


488
00:13:07,116 --> 00:13:07,746
posts.


489
00:13:07,986 --> 00:13:09,506
And posts are a theme that we've


490
00:13:09,506 --> 00:13:10,806
been building on over the last


491
00:13:10,806 --> 00:13:11,896
few years in Core Data.


492
00:13:12,786 --> 00:13:13,046
Right?


493
00:13:13,096 --> 00:13:14,536
They're a great object for


494
00:13:14,536 --> 00:13:15,726
helping us understand how


495
00:13:15,876 --> 00:13:17,206
different pieces of your object


496
00:13:17,206 --> 00:13:18,716
graph will be affected by


497
00:13:18,716 --> 00:13:19,306
CloudKit.


498
00:13:19,836 --> 00:13:21,186
Here you can see that our data


499
00:13:21,186 --> 00:13:22,166
model is pretty simple.


500
00:13:22,476 --> 00:13:22,726
Right?


501
00:13:22,776 --> 00:13:24,046
We have a title and some


502
00:13:24,046 --> 00:13:24,426
content.


503
00:13:24,426 --> 00:13:26,116
And then, we have a set of tags


504
00:13:26,116 --> 00:13:27,406
that we can associate to each


505
00:13:27,446 --> 00:13:28,266
post.


506
00:13:28,326 --> 00:13:29,606
The application will even let


507
00:13:29,606 --> 00:13:31,016
you see what it's like to manage


508
00:13:31,016 --> 00:13:32,156
photos with CloudKit.


509
00:13:32,506 --> 00:13:34,286
Allowing you to attach files


510
00:13:34,286 --> 00:13:35,746
from the device's Photo Library


511
00:13:35,746 --> 00:13:39,716
to a post.


512
00:13:39,896 --> 00:13:42,376
Now, let's talk about what it's


513
00:13:42,376 --> 00:13:43,586
like to build on top of


514
00:13:43,656 --> 00:13:45,206
NSPersistentCloudKitContainer.


515
00:13:45,696 --> 00:13:47,606
And, as you might expect, this


516
00:13:47,606 --> 00:13:49,186
is a fairly dense section of the


517
00:13:49,186 --> 00:13:49,606
talk.


518
00:13:50,106 --> 00:13:51,236
But you should know that our


519
00:13:51,236 --> 00:13:52,966
documentation covers in more


520
00:13:52,966 --> 00:13:54,266
detail a lot of things that


521
00:13:54,266 --> 00:13:55,486
we're going to talk about today.


522
00:13:56,006 --> 00:13:57,776
So, don't worry if some of this


523
00:13:57,776 --> 00:13:58,676
goes right out the window.


524
00:13:58,796 --> 00:14:02,516
There are a number of ways that


525
00:14:02,516 --> 00:14:04,626
we see clients internally extend


526
00:14:04,786 --> 00:14:06,276
NSPersistentCloudKitContainer,


527
00:14:06,876 --> 00:14:08,086
beginning with working with


528
00:14:08,086 --> 00:14:09,096
multiple stores.


529
00:14:10,006 --> 00:14:11,916
And, we also see that clients


530
00:14:11,916 --> 00:14:13,306
like to customize the schema


531
00:14:13,306 --> 00:14:14,206
that they've been using with


532
00:14:14,206 --> 00:14:15,836
CloudKit, and indeed, the one


533
00:14:15,836 --> 00:14:16,586
that we use with


534
00:14:16,616 --> 00:14:18,216
NSPersistentCloudKitContainer.


535
00:14:18,826 --> 00:14:20,166
This of course, as you may know,


536
00:14:20,166 --> 00:14:21,756
is because CloudKit is available


537
00:14:21,756 --> 00:14:23,446
on a number of different


538
00:14:23,496 --> 00:14:25,436
platforms, not only at Apple but


539
00:14:25,436 --> 00:14:27,056
also using Web Services or


540
00:14:27,056 --> 00:14:27,706
JavaScript.


541
00:14:28,286 --> 00:14:29,466
And so, you should be able to


542
00:14:29,526 --> 00:14:30,006
work with


543
00:14:30,036 --> 00:14:31,496
NSPersistentCloudKitContainer's


544
00:14:31,496 --> 00:14:33,366
objects even if you're not doing


545
00:14:33,366 --> 00:14:34,736
so on one of our platforms.


546
00:14:35,686 --> 00:14:37,316
Finally, we'll take a look at


547
00:14:37,406 --> 00:14:39,146
Data Modeling for collaboration.


548
00:14:40,656 --> 00:14:42,176
Now, there are a number of great


549
00:14:42,176 --> 00:14:43,606
reasons why we might want to use


550
00:14:43,606 --> 00:14:44,626
multiple stores in our


551
00:14:44,626 --> 00:14:45,486
application.


552
00:14:45,486 --> 00:14:46,856
Especially when working with


553
00:14:46,856 --> 00:14:48,126
network backed stores.


554
00:14:48,816 --> 00:14:50,086
Multiple stores can help us


555
00:14:50,186 --> 00:14:51,676
segregate our data between


556
00:14:51,676 --> 00:14:53,046
distinct use cases in our


557
00:14:53,046 --> 00:14:53,636
application.


558
00:14:54,206 --> 00:14:56,926
And, they can help us provide


559
00:14:57,086 --> 00:14:58,646
different types of constraints.


560
00:14:59,536 --> 00:14:59,786
Right?


561
00:14:59,786 --> 00:15:01,146
So, if we wanted to have one


562
00:15:01,146 --> 00:15:02,786
store file that manages a very


563
00:15:02,786 --> 00:15:04,126
specific set of validation


564
00:15:04,126 --> 00:15:05,786
constraints, maybe to validate


565
00:15:05,786 --> 00:15:07,476
user input, we can use a


566
00:15:07,476 --> 00:15:09,266
separate store for that.


567
00:15:10,766 --> 00:15:12,316
Multiple stores are also a great


568
00:15:12,316 --> 00:15:14,426
way to throttle or coalesce data


569
00:15:14,426 --> 00:15:15,856
that's written very frequently


570
00:15:15,856 --> 00:15:16,526
on device.


571
00:15:17,446 --> 00:15:18,586
And this can happen when you're


572
00:15:18,586 --> 00:15:19,426
reading something from the


573
00:15:19,426 --> 00:15:21,066
device that's generated maybe by


574
00:15:21,066 --> 00:15:22,556
the device itself or by an


575
00:15:22,556 --> 00:15:23,776
algorithm that you have which


576
00:15:23,856 --> 00:15:24,546
creates data.


577
00:15:25,206 --> 00:15:26,726
If this algorithm generates data


578
00:15:26,726 --> 00:15:28,216
at a very high rate, it can be


579
00:15:28,216 --> 00:15:29,866
very expensive to constantly


580
00:15:29,866 --> 00:15:31,286
sync all of that data up to


581
00:15:31,286 --> 00:15:31,796
CloudKit.


582
00:15:32,406 --> 00:15:34,006
And so, we see clients inject


583
00:15:34,006 --> 00:15:36,136
another store file into the mix


584
00:15:36,136 --> 00:15:37,866
and use that to coalesce this


585
00:15:37,866 --> 00:15:39,606
data until its ready to be


586
00:15:39,606 --> 00:15:41,366
analyzed and then uploaded to


587
00:15:41,366 --> 00:15:42,186
CloudKit later.


588
00:15:42,936 --> 00:15:46,316
To show you how this works and


589
00:15:46,316 --> 00:15:47,566
how Core Data can make this easy


590
00:15:47,566 --> 00:15:49,186
for you, we're going to leverage


591
00:15:49,186 --> 00:15:50,316
a feature of


592
00:15:50,346 --> 00:15:51,786
NSManagedObjectModel called


593
00:15:51,786 --> 00:15:52,706
Configurations.


594
00:15:53,366 --> 00:15:55,856
And here you can see we have our


595
00:15:55,856 --> 00:15:56,656
sample apps,


596
00:15:56,906 --> 00:15:58,626
NSManagedObjectModel in the


597
00:15:58,626 --> 00:15:59,886
model editor in Xcode.


598
00:16:00,526 --> 00:16:02,016
Now, let's say that I want to


599
00:16:02,016 --> 00:16:04,056
add locations to the post.


600
00:16:04,156 --> 00:16:04,396
Right?


601
00:16:04,396 --> 00:16:05,836
I want to record the location


602
00:16:05,836 --> 00:16:06,966
where a post was created


603
00:16:07,376 --> 00:16:08,476
whenever that happens.


604
00:16:08,976 --> 00:16:10,806
But locations can be generated


605
00:16:10,806 --> 00:16:12,716
at a high rate by the system and


606
00:16:12,716 --> 00:16:14,616
I don't need them unless a post


607
00:16:14,616 --> 00:16:16,106
is actually being created at


608
00:16:16,106 --> 00:16:16,866
that location.


609
00:16:16,966 --> 00:16:19,036
So, let's separate them from the


610
00:16:19,036 --> 00:16:20,036
rest of the data model.


611
00:16:21,416 --> 00:16:22,996
I'll start off by adding a new


612
00:16:22,996 --> 00:16:24,706
entity by clicking this plus (+)


613
00:16:24,706 --> 00:16:26,496
in the lower left-hand corner to


614
00:16:26,496 --> 00:16:28,156
store my location information.


615
00:16:28,786 --> 00:16:30,176
Now, my location's going to be


616
00:16:30,176 --> 00:16:30,796
pretty simple.


617
00:16:30,796 --> 00:16:31,796
It's just going to include a


618
00:16:31,796 --> 00:16:34,036
latitude and longitude that are


619
00:16:34,036 --> 00:16:35,416
both doubles that are exposed to


620
00:16:35,416 --> 00:16:36,476
me by the Core Location


621
00:16:36,476 --> 00:16:36,946
framework.


622
00:16:37,296 --> 00:16:38,546
Of course, yours may include


623
00:16:38,546 --> 00:16:39,986
other things like altitude or


624
00:16:39,986 --> 00:16:41,000
accuracy.


625
00:16:45,126 --> 00:16:46,336
Now we want to segregate these


626
00:16:46,336 --> 00:16:47,836
locations from the rest of our


627
00:16:47,836 --> 00:16:48,166
data.


628
00:16:48,406 --> 00:16:50,006
And to do that I'll create a new


629
00:16:50,006 --> 00:16:52,326
configuration, again, by hitting


630
00:16:52,326 --> 00:16:53,526
this plus (+) button, but this


631
00:16:53,526 --> 00:16:55,496
time holding down my click to


632
00:16:55,496 --> 00:16:56,886
expose a menu that allows me to


633
00:16:56,886 --> 00:16:58,036
add a configuration.


634
00:16:58,916 --> 00:17:00,106
I'll call this configuration


635
00:17:00,106 --> 00:17:01,946
Cloud and add all four of the


636
00:17:01,946 --> 00:17:03,196
entities that I actually want to


637
00:17:03,196 --> 00:17:05,165
sync to it.


638
00:17:06,036 --> 00:17:07,376
Here you can see that now the


639
00:17:07,376 --> 00:17:09,396
Cloud configuration has just the


640
00:17:09,396 --> 00:17:10,566
entities that I want to be


641
00:17:10,566 --> 00:17:11,445
synced with CloudKit.


642
00:17:12,076 --> 00:17:13,526
Let's create a new one called


643
00:17:13,526 --> 00:17:14,915
Local that will store our


644
00:17:14,915 --> 00:17:15,886
location objects.


645
00:17:22,566 --> 00:17:23,925
And, in just a few lines of


646
00:17:24,026 --> 00:17:25,205
code, we can put this to work


647
00:17:25,205 --> 00:17:27,406
for us, empowering Core Data to


648
00:17:27,406 --> 00:17:28,986
tell our stores automatically


649
00:17:28,986 --> 00:17:30,056
what types of objects they


650
00:17:30,056 --> 00:17:30,526
stored.


651
00:17:30,526 --> 00:17:32,506
At the top you can see we create


652
00:17:32,506 --> 00:17:33,186
an instance of


653
00:17:33,186 --> 00:17:34,686
NSPersistentCloudKitContainer,


654
00:17:35,166 --> 00:17:36,506
and then, we leverage something


655
00:17:36,506 --> 00:17:36,796
called


656
00:17:36,856 --> 00:17:38,396
NSPersistentStoreDescription,


657
00:17:38,896 --> 00:17:39,566
which tells


658
00:17:39,566 --> 00:17:41,126
NSPersistentCloudKitContainer


659
00:17:41,126 --> 00:17:42,506
about the types of stores that


660
00:17:42,506 --> 00:17:43,196
it's managing.


661
00:17:43,946 --> 00:17:45,036
We create an instance of


662
00:17:45,036 --> 00:17:46,526
NSPersistentStoreDescription


663
00:17:46,936 --> 00:17:48,296
that points at the file called


664
00:17:48,296 --> 00:17:49,936
local.sqlite to hold our


665
00:17:49,936 --> 00:17:51,056
location information.


666
00:17:51,526 --> 00:17:52,866
And, we assign it the


667
00:17:52,866 --> 00:17:54,486
configuration of local that we


668
00:17:54,486 --> 00:17:55,286
just created.


669
00:17:56,066 --> 00:17:57,856
Then we set up our cloud store.


670
00:17:58,366 --> 00:18:00,346
Similarly, we create an instance


671
00:18:00,386 --> 00:18:01,946
of NSPersistentStoreDescription


672
00:18:02,316 --> 00:18:03,706
and we point it to a different


673
00:18:03,706 --> 00:18:05,416
file; cloud.sqlite.


674
00:18:06,056 --> 00:18:06,706
Then we give it the


675
00:18:06,706 --> 00:18:08,786
configuration Cloud, which tells


676
00:18:08,786 --> 00:18:10,306
NSPersistentCloudKitContainer


677
00:18:10,306 --> 00:18:12,766
that only the entities like


678
00:18:12,766 --> 00:18:14,596
post, and tags, and attachments,


679
00:18:14,596 --> 00:18:16,256
and image data should be stored


680
00:18:16,256 --> 00:18:16,906
in the store.


681
00:18:17,936 --> 00:18:19,996
Finally, we assign it an


682
00:18:19,996 --> 00:18:21,356
instance of NSPersistent


683
00:18:21,356 --> 00:18:23,706
CloudKitContainerOptions, which


684
00:18:23,706 --> 00:18:24,086
tells


685
00:18:24,226 --> 00:18:25,776
NSPersistentCloudKitContainer


686
00:18:25,916 --> 00:18:27,916
what iCloud container identifier


687
00:18:28,286 --> 00:18:29,596
this store should be synced


688
00:18:29,596 --> 00:18:29,776
with.


689
00:18:30,386 --> 00:18:32,336
Last but not least, we assign


690
00:18:32,336 --> 00:18:33,736
these two store descriptions to


691
00:18:33,736 --> 00:18:35,256
the PersistentStoreDescription's


692
00:18:35,486 --> 00:18:36,366
property of


693
00:18:36,466 --> 00:18:37,866
NSPersistentCloudKitContainer.


694
00:18:38,886 --> 00:18:39,196
And with


695
00:18:39,306 --> 00:18:40,806
NSPersistentCloudKitContainer we


696
00:18:40,806 --> 00:18:42,246
can take this even further.


697
00:18:42,946 --> 00:18:44,766
We already have local store and


698
00:18:44,766 --> 00:18:45,396
a cloud store.


699
00:18:45,396 --> 00:18:47,066
But what if we want to share


700
00:18:47,066 --> 00:18:48,666
some data in CloudKit across


701
00:18:48,666 --> 00:18:50,156
multiple applications we happen


702
00:18:50,156 --> 00:18:50,676
to work on?


703
00:18:51,226 --> 00:18:51,516
Well,


704
00:18:51,546 --> 00:18:53,006
NSPersistentCloudKitContainer


705
00:18:53,006 --> 00:18:54,196
supports that as well.


706
00:18:54,856 --> 00:18:56,356
In fact, because you're using


707
00:18:56,356 --> 00:18:57,876
Core Data, your application will


708
00:18:57,946 --> 00:18:59,636
easily be able to handle all the


709
00:18:59,636 --> 00:19:01,156
data from these stores at the


710
00:19:01,156 --> 00:19:01,876
same time.


711
00:19:02,456 --> 00:19:04,216
And, Core Data will


712
00:19:04,216 --> 00:19:05,556
automatically help you write


713
00:19:05,796 --> 00:19:07,186
data that you insert into the


714
00:19:07,186 --> 00:19:08,216
correct store file


715
00:19:08,416 --> 00:19:09,196
automatically.


716
00:19:10,476 --> 00:19:11,846
We can do this by just adding


717
00:19:11,916 --> 00:19:12,896
three lines of code.


718
00:19:13,386 --> 00:19:13,586
Right?


719
00:19:13,586 --> 00:19:15,056
We create a new StoreDescription


720
00:19:15,056 --> 00:19:16,266
that points to our shared store


721
00:19:16,266 --> 00:19:17,636
file and give it a new


722
00:19:17,636 --> 00:19:18,856
configuration that we might


723
00:19:18,856 --> 00:19:20,046
create called shared.


724
00:19:20,736 --> 00:19:22,466
Finally, we assign it a new


725
00:19:22,466 --> 00:19:23,846
instance of NSPersistent


726
00:19:23,846 --> 00:19:25,546
CloudKitContainer Options that


727
00:19:25,546 --> 00:19:27,406
identifies the container we want


728
00:19:27,406 --> 00:19:28,956
our shared data to be stored in;


729
00:19:29,296 --> 00:19:29,826
in this case,


730
00:19:29,826 --> 00:19:32,696
iCloud.com.wwdc.shared.


731
00:19:33,366 --> 00:19:34,626
And of course, last but not


732
00:19:34,626 --> 00:19:36,776
least, we assign it to


733
00:19:36,776 --> 00:19:38,116
PersistentStoreDescriptions.


734
00:19:38,486 --> 00:19:40,246
Now let's talk about the schema.


735
00:19:41,036 --> 00:19:43,586
And, I want to cover a few


736
00:19:43,686 --> 00:19:44,956
points about the schema that I


737
00:19:44,956 --> 00:19:45,886
think are sort of the


738
00:19:45,886 --> 00:19:46,436
highlights.


739
00:19:46,436 --> 00:19:47,476
The most important things that


740
00:19:47,476 --> 00:19:48,486
you need to know when you're


741
00:19:48,566 --> 00:19:49,686
looking at the records that we


742
00:19:49,686 --> 00:19:50,576
create in CloudKit.


743
00:19:51,556 --> 00:19:52,816
I'll start off by talking about


744
00:19:52,816 --> 00:19:54,736
how we manage record types and


745
00:19:54,736 --> 00:19:56,416
how we manage entities, which


746
00:19:56,416 --> 00:19:57,526
are what you create in your


747
00:19:57,526 --> 00:19:58,776
NSManagedObjectModel.


748
00:19:59,466 --> 00:20:01,126
Then, we'll look at how we


749
00:20:01,126 --> 00:20:02,616
implement a feature called Asset


750
00:20:02,616 --> 00:20:04,546
Externalization, which allows


751
00:20:04,546 --> 00:20:05,826
you to seamlessly store


752
00:20:05,826 --> 00:20:07,566
arbitrarily large values in


753
00:20:07,566 --> 00:20:08,626
CloudKit using


754
00:20:08,656 --> 00:20:09,936
NSPersistentCloudKitContainer.


755
00:20:10,436 --> 00:20:12,846
Finally, we'll talk about how we


756
00:20:12,846 --> 00:20:14,916
manage relationships and how


757
00:20:14,916 --> 00:20:16,166
that might be different from the


758
00:20:16,166 --> 00:20:17,566
CloudKit experience you're used


759
00:20:17,566 --> 00:20:17,766
to.


760
00:20:18,726 --> 00:20:20,976
To do that, we're going to use


761
00:20:20,976 --> 00:20:22,526
the ManageObjectModel for our


762
00:20:22,526 --> 00:20:23,596
sample application.


763
00:20:23,966 --> 00:20:25,106
And I'm going to start off by


764
00:20:25,106 --> 00:20:26,816
focusing on the post entity.


765
00:20:27,356 --> 00:20:28,546
You can see that it has two


766
00:20:28,546 --> 00:20:30,746
attributes; a title string and a


767
00:20:30,746 --> 00:20:31,486
content string.


768
00:20:31,946 --> 00:20:33,066
And it also has two


769
00:20:33,066 --> 00:20:35,326
relationships to the attachment


770
00:20:35,326 --> 00:20:36,386
and tag entities.


771
00:20:37,386 --> 00:20:39,206
Core Data generates an actual


772
00:20:39,206 --> 00:20:40,906
class for you to use in code as


773
00:20:40,906 --> 00:20:42,586
a subclass of NSManagedObject


774
00:20:42,586 --> 00:20:43,596
that looks like this.


775
00:20:44,216 --> 00:20:45,736
And you can see that all of the


776
00:20:45,736 --> 00:20:47,406
attributes and relationships are


777
00:20:47,406 --> 00:20:49,756
represented on that class.


778
00:20:49,756 --> 00:20:51,636
Now, this is the record that we


779
00:20:51,636 --> 00:20:53,266
will generate in CloudKit that


780
00:20:53,266 --> 00:20:55,146
goes along with this post.


781
00:20:55,936 --> 00:20:57,156
And these are some example


782
00:20:57,156 --> 00:20:58,326
values that I've used to


783
00:20:58,756 --> 00:21:00,396
populate this record and make it


784
00:21:00,396 --> 00:21:02,496
what we call fully materialized.


785
00:21:03,436 --> 00:21:04,836
Now, there are some things that


786
00:21:04,836 --> 00:21:05,786
I want to highlight to you


787
00:21:05,786 --> 00:21:06,236
first.


788
00:21:06,716 --> 00:21:07,466
The record ID.


789
00:21:07,996 --> 00:21:09,956
Core Data owns the record ID for


790
00:21:09,956 --> 00:21:11,286
all of the objects that it


791
00:21:11,286 --> 00:21:12,436
creates in CloudKit.


792
00:21:12,866 --> 00:21:14,356
And, for each one, we will


793
00:21:14,356 --> 00:21:16,836
generate a simple UUID to use as


794
00:21:16,836 --> 00:21:17,776
its record name.


795
00:21:18,336 --> 00:21:19,806
When the Record Name is combined


796
00:21:19,806 --> 00:21:21,816
with a zone identifier you get a


797
00:21:21,816 --> 00:21:22,806
CKRecord ID.


798
00:21:23,076 --> 00:21:26,126
At the bottom, you'll see how


799
00:21:26,126 --> 00:21:27,446
Core Data manages type


800
00:21:27,446 --> 00:21:28,156
information.


801
00:21:28,826 --> 00:21:30,556
And, there are two interesting


802
00:21:30,556 --> 00:21:31,126
things here.


803
00:21:31,656 --> 00:21:33,516
The first is, what the heck are


804
00:21:33,516 --> 00:21:34,866
all these CD under bars?


805
00:21:35,906 --> 00:21:37,276
This is Core Data's way of


806
00:21:37,276 --> 00:21:38,776
segregating the things that it


807
00:21:38,776 --> 00:21:41,296
manages to be separate from ones


808
00:21:41,296 --> 00:21:42,706
that either CloudKit implements


809
00:21:42,706 --> 00:21:44,386
for you -- you wouldn't believe


810
00:21:44,386 --> 00:21:46,166
how many people add modify date


811
00:21:46,166 --> 00:21:47,236
to their CKRecord.


812
00:21:48,006 --> 00:21:49,386
Or, ones that you might add


813
00:21:49,386 --> 00:21:49,906
yourself.


814
00:21:50,056 --> 00:21:51,906
And so, we prefix everything;


815
00:21:51,906 --> 00:21:53,576
the record type and all of our


816
00:21:53,676 --> 00:21:55,466
field names with CD under bar.


817
00:21:56,386 --> 00:21:58,666
But, in the CD entityName field,


818
00:21:59,046 --> 00:22:01,096
we keep the real entity name of


819
00:22:01,096 --> 00:22:03,786
the object that this record goes


820
00:22:03,786 --> 00:22:03,966
with.


821
00:22:04,896 --> 00:22:06,206
And we do this so that we can


822
00:22:06,206 --> 00:22:07,386
implement a feature called


823
00:22:07,386 --> 00:22:09,346
entityInheritance, wherein you


824
00:22:09,346 --> 00:22:11,406
could have subclasses of a post,


825
00:22:11,406 --> 00:22:11,936
let's say.


826
00:22:12,456 --> 00:22:15,056
Perhaps an image post, or a


827
00:22:15,056 --> 00:22:15,946
video post.


828
00:22:16,556 --> 00:22:18,186
The actual entities will always


829
00:22:18,186 --> 00:22:19,826
be identified by the CD under


830
00:22:19,826 --> 00:22:21,156
bar entityName field.


831
00:22:22,096 --> 00:22:23,296
And we do this so that you can


832
00:22:23,296 --> 00:22:26,156
implement CK queries that get at


833
00:22:26,156 --> 00:22:28,156
all of the entity hierarchies


834
00:22:28,156 --> 00:22:30,126
you're interested in by querying


835
00:22:30,126 --> 00:22:31,196
a single record type.


836
00:22:32,456 --> 00:22:33,486
Now let's look at how we


837
00:22:33,486 --> 00:22:35,016
implement these two strings.


838
00:22:35,066 --> 00:22:36,576
Because these are variable


839
00:22:36,576 --> 00:22:38,166
length fields and our


840
00:22:38,166 --> 00:22:39,666
translation of them to CloudKit


841
00:22:39,666 --> 00:22:41,696
has some interesting quirks.


842
00:22:43,336 --> 00:22:44,516
You'll see that we've inflated


843
00:22:44,516 --> 00:22:46,246
them to four total fields.


844
00:22:46,586 --> 00:22:48,306
And the reason for this, is that


845
00:22:48,366 --> 00:22:49,946
this is how we implement asset


846
00:22:49,946 --> 00:22:51,006
externalization.


847
00:22:51,716 --> 00:22:52,816
Here you can see that we have


848
00:22:52,866 --> 00:22:54,506
both a CD under bar content


849
00:22:54,576 --> 00:22:56,796
field and a CD under bar content


850
00:22:56,796 --> 00:22:58,326
under bar CKAsset.


851
00:22:58,806 --> 00:23:00,416
This allows us to store strings


852
00:23:00,456 --> 00:23:02,106
that are arbitrarily large.


853
00:23:02,466 --> 00:23:04,666
Anywhere from simple kilobytes


854
00:23:04,666 --> 00:23:06,146
all the way up to hundreds of


855
00:23:06,146 --> 00:23:08,006
megabytes or even gigabytes in


856
00:23:08,006 --> 00:23:08,356
length.


857
00:23:09,626 --> 00:23:11,036
And when I said that this record


858
00:23:11,036 --> 00:23:11,976
is what we call fully


859
00:23:11,976 --> 00:23:13,446
materialized, what I mean is


860
00:23:13,446 --> 00:23:15,516
that you won't ever actually see


861
00:23:15,516 --> 00:23:16,716
all four of these fields at the


862
00:23:16,746 --> 00:23:17,586
same time.


863
00:23:18,206 --> 00:23:19,286
If the strings are all very


864
00:23:19,286 --> 00:23:20,676
short, then you'll just see CD


865
00:23:20,676 --> 00:23:22,406
under bar content and CD under


866
00:23:22,406 --> 00:23:23,686
bar title in the record.


867
00:23:24,216 --> 00:23:25,456
But, if one of them grows to be


868
00:23:25,456 --> 00:23:27,656
very large, approximately larger


869
00:23:27,656 --> 00:23:30,446
than 750 kilobytes, or if the


870
00:23:30,446 --> 00:23:32,316
total size of the record exceeds


871
00:23:32,566 --> 00:23:34,296
CloudKit's maximum 1 megabyte


872
00:23:34,296 --> 00:23:36,706
limit, you'll begin to see asset


873
00:23:36,706 --> 00:23:38,686
fields, or in this case, CD


874
00:23:38,686 --> 00:23:40,106
under bar content under bar


875
00:23:40,246 --> 00:23:42,276
CKAsset in the record instead.


876
00:23:43,016 --> 00:23:44,326
If you're consuming our records


877
00:23:44,326 --> 00:23:45,546
on your own, then you'll need to


878
00:23:45,576 --> 00:23:47,316
check both places to see whether


879
00:23:47,316 --> 00:23:48,946
or not a value has been set for


880
00:23:48,946 --> 00:23:50,000
a specific attribute.


881
00:23:54,066 --> 00:23:55,356
Now let's take a look at the


882
00:23:55,356 --> 00:23:57,016
relationships on a post.


883
00:23:57,546 --> 00:23:58,576
You can see here that they're


884
00:23:58,576 --> 00:24:00,796
both instances of NSSet in the


885
00:24:00,796 --> 00:24:02,356
object that Core Data generates


886
00:24:02,356 --> 00:24:03,626
for you to use in your code.


887
00:24:04,126 --> 00:24:05,976
And this is because a post has


888
00:24:06,086 --> 00:24:07,536
to-- what we call too many


889
00:24:07,536 --> 00:24:08,456
relationships.


890
00:24:08,936 --> 00:24:10,226
That means that a post can be


891
00:24:10,226 --> 00:24:12,406
assigned too many attachments or


892
00:24:12,616 --> 00:24:14,366
it can have many tags associated


893
00:24:14,366 --> 00:24:14,946
with it.


894
00:24:15,446 --> 00:24:16,846
The attachments relationship is


895
00:24:16,846 --> 00:24:17,686
what we like to call a


896
00:24:17,686 --> 00:24:19,126
Many-To-One, because an


897
00:24:19,126 --> 00:24:20,656
attachment can only be assigned


898
00:24:20,656 --> 00:24:21,646
to one post.


899
00:24:23,266 --> 00:24:24,686
When we generate code for this,


900
00:24:24,686 --> 00:24:26,016
you'll see that there's an NSSet


901
00:24:26,016 --> 00:24:27,876
on the post, but there's only a


902
00:24:27,876 --> 00:24:30,346
single post object declared on


903
00:24:30,566 --> 00:24:32,406
the attachment ManageObject.


904
00:24:33,506 --> 00:24:35,126
And this is the record they will


905
00:24:35,156 --> 00:24:36,876
generate for an attachment.


906
00:24:37,366 --> 00:24:39,316
You can see that it has a UUID,


907
00:24:39,316 --> 00:24:40,526
an entity name, and a record


908
00:24:40,526 --> 00:24:42,576
type just like a post does, but


909
00:24:42,576 --> 00:24:43,886
you'll also see an additional


910
00:24:43,886 --> 00:24:46,196
field called CD under bar post.


911
00:24:46,576 --> 00:24:47,546
This is how we store the


912
00:24:47,546 --> 00:24:49,576
relationship for a Two-One


913
00:24:49,576 --> 00:24:50,316
relationship.


914
00:24:51,046 --> 00:24:53,446
The UUID of the related record


915
00:24:53,446 --> 00:24:55,076
in CloudKit will always be


916
00:24:55,076 --> 00:24:56,916
stored on the object it's linked


917
00:24:56,916 --> 00:24:57,236
to.


918
00:24:57,806 --> 00:24:59,696
And, you might be wondering why


919
00:24:59,696 --> 00:25:00,726
we don't do this with


920
00:25:00,726 --> 00:25:02,006
CKReference instead.


921
00:25:02,006 --> 00:25:04,076
And that's because CKReference


922
00:25:04,076 --> 00:25:05,536
has some limitations that we


923
00:25:05,536 --> 00:25:07,116
don't think work well for Core


924
00:25:07,116 --> 00:25:07,906
Data clients.


925
00:25:08,386 --> 00:25:11,036
Namely that it's limited to 750


926
00:25:11,036 --> 00:25:11,996
total objects.


927
00:25:12,376 --> 00:25:13,686
But by storing a relationship


928
00:25:13,756 --> 00:25:15,426
this way, you can hold as many


929
00:25:15,426 --> 00:25:16,496
will fit in your CloudKit


930
00:25:16,496 --> 00:25:17,006
container.


931
00:25:17,626 --> 00:25:20,166
Now let's look at a Many-To-Many


932
00:25:20,166 --> 00:25:20,866
relationship.


933
00:25:21,156 --> 00:25:22,336
In this case, the one between a


934
00:25:22,336 --> 00:25:23,736
post and its tags.


935
00:25:24,976 --> 00:25:26,226
You can see that there are two


936
00:25:26,306 --> 00:25:29,146
NSSet's on this object and this


937
00:25:29,146 --> 00:25:31,326
is because both objects can be


938
00:25:31,326 --> 00:25:33,156
related to many of the other


939
00:25:33,156 --> 00:25:33,436
type.


940
00:25:33,436 --> 00:25:35,586
But when we generate the records


941
00:25:35,586 --> 00:25:37,186
for these objects, there aren't


942
00:25:37,186 --> 00:25:39,116
any fields that we materialized


943
00:25:39,116 --> 00:25:40,426
to hold this relationship.


944
00:25:41,176 --> 00:25:43,556
Instead, Core Data materializes


945
00:25:43,556 --> 00:25:44,976
a custom join record.


946
00:25:45,406 --> 00:25:46,626
Now, if you're familiar with


947
00:25:46,656 --> 00:25:48,566
relational databases, you'll


948
00:25:48,566 --> 00:25:49,866
recognize this concept.


949
00:25:50,026 --> 00:25:51,816
It's basically an extrapolation


950
00:25:51,816 --> 00:25:53,876
of a row in a join table.


951
00:25:54,466 --> 00:25:57,276
And it's called a CDMR or Core


952
00:25:57,276 --> 00:25:58,466
Data Mirrored Relationship.


953
00:25:59,176 --> 00:26:01,426
A CDMR contains a set of twoples


954
00:26:01,426 --> 00:26:02,736
that are designed to describe


955
00:26:02,736 --> 00:26:04,166
the two objects that are linked,


956
00:26:04,566 --> 00:26:06,106
beginning with the entity names


957
00:26:06,106 --> 00:26:07,306
of the two objects that are


958
00:26:07,306 --> 00:26:09,446
linked, and their record names.


959
00:26:09,916 --> 00:26:11,856
Now, as I said before, this is


960
00:26:11,856 --> 00:26:13,216
not the record ID.


961
00:26:13,596 --> 00:26:15,156
This is the record name that you


962
00:26:15,156 --> 00:26:16,576
have to combine with a zone


963
00:26:16,576 --> 00:26:18,436
identifier to get the identity


964
00:26:18,436 --> 00:26:20,716
of the records that have been


965
00:26:20,716 --> 00:26:22,536
linked by the CDMR.


966
00:26:22,946 --> 00:26:25,536
Finally, we also encapsulate the


967
00:26:25,536 --> 00:26:27,306
exact relationships that were


968
00:26:27,306 --> 00:26:28,546
used to make this link.


969
00:26:30,996 --> 00:26:32,496
So why am I spending so much


970
00:26:32,536 --> 00:26:33,396
time talking about


971
00:26:33,396 --> 00:26:34,126
relationships?


972
00:26:35,486 --> 00:26:38,326
Well, they have a huge impact on


973
00:26:38,416 --> 00:26:39,846
how we model our data for


974
00:26:39,846 --> 00:26:40,676
collaboration.


975
00:26:41,346 --> 00:26:42,926
And I need to be very clear


976
00:26:42,926 --> 00:26:45,586
here, collaboration is not


977
00:26:45,586 --> 00:26:46,676
conflict resolution.


978
00:26:47,296 --> 00:26:49,006
Conflict resolution is


979
00:26:49,006 --> 00:26:50,586
implemented automatically by


980
00:26:50,586 --> 00:26:52,246
NSPersistentCloudKitContainer


981
00:26:52,296 --> 00:26:53,956
using a last writer wins merge


982
00:26:53,956 --> 00:26:54,486
policy.


983
00:26:55,166 --> 00:26:56,546
And the reason we do this, is


984
00:26:56,546 --> 00:26:57,796
that the job of conflict


985
00:26:57,796 --> 00:27:00,036
resolution is to keep the object


986
00:27:00,086 --> 00:27:01,726
graph and the data in CloudKit


987
00:27:02,086 --> 00:27:03,546
consistent with how you've


988
00:27:03,546 --> 00:27:04,466
modeled your data.


989
00:27:05,286 --> 00:27:07,806
But, over the years we've heard


990
00:27:07,806 --> 00:27:08,716
that this can be a little


991
00:27:08,716 --> 00:27:09,396
frustrating.


992
00:27:09,936 --> 00:27:12,686
So, let's take a look at how you


993
00:27:12,686 --> 00:27:13,966
can implement better merge


994
00:27:13,966 --> 00:27:15,726
behavior and align that merge


995
00:27:15,766 --> 00:27:17,136
behavior with your specific


996
00:27:17,136 --> 00:27:19,296
customer use cases using


997
00:27:19,296 --> 00:27:20,846
relationships.


998
00:27:22,436 --> 00:27:24,176
To do that, we're going to use


999
00:27:24,176 --> 00:27:25,616
our post application again.


1000
00:27:26,016 --> 00:27:27,456
And I'm going to create a post,


1001
00:27:27,906 --> 00:27:29,066
but I'm not going to assign it


1002
00:27:29,066 --> 00:27:29,826
any content.


1003
00:27:30,866 --> 00:27:32,516
I'll let it sync over to another


1004
00:27:32,516 --> 00:27:34,726
device let's say, and then I'll


1005
00:27:34,726 --> 00:27:36,406
make some edits on each device


1006
00:27:36,406 --> 00:27:37,436
at the same time.


1007
00:27:38,016 --> 00:27:39,316
Now, this is what we would


1008
00:27:39,316 --> 00:27:40,816
traditionally term to be a


1009
00:27:40,816 --> 00:27:41,406
conflict.


1010
00:27:41,936 --> 00:27:44,116
But, actually, this is a great


1011
00:27:44,116 --> 00:27:45,446
example of two devices


1012
00:27:45,446 --> 00:27:47,156
attempting to collaborate on a


1013
00:27:47,156 --> 00:27:47,676
value.


1014
00:27:48,416 --> 00:27:48,866
Now,


1015
00:27:48,936 --> 00:27:50,606
NSPersistentCloudKitContainer


1016
00:27:51,036 --> 00:27:52,196
seeing that something has


1017
00:27:52,196 --> 00:27:53,686
changed in CloudKit while it was


1018
00:27:53,686 --> 00:27:55,796
away, will resolve this to


1019
00:27:55,796 --> 00:27:57,656
preserve one of the two values.


1020
00:27:57,656 --> 00:27:57,856
Right?


1021
00:27:57,956 --> 00:27:59,326
Using a last writer wins merge


1022
00:27:59,326 --> 00:27:59,876
policy.


1023
00:28:00,366 --> 00:28:01,276
Which means that we'll either


1024
00:28:01,276 --> 00:28:03,376
get collaboration is great or


1025
00:28:03,826 --> 00:28:04,806
everyone should do it.


1026
00:28:05,156 --> 00:28:05,956
And it's true.


1027
00:28:07,446 --> 00:28:09,056
Of course, you might be thinking


1028
00:28:09,056 --> 00:28:10,586
that -- well, this is kind of


1029
00:28:10,586 --> 00:28:10,896
dumb.


1030
00:28:11,436 --> 00:28:12,566
Why don't you just concatenate


1031
00:28:12,596 --> 00:28:13,776
the two strings together, Core


1032
00:28:13,776 --> 00:28:14,056
Data?


1033
00:28:14,696 --> 00:28:15,576
And we could.


1034
00:28:16,026 --> 00:28:17,346
Except that if you took our


1035
00:28:17,346 --> 00:28:18,906
advice over the years and


1036
00:28:18,906 --> 00:28:20,506
implemented incremental saving


1037
00:28:20,856 --> 00:28:21,806
you might end up with something


1038
00:28:21,806 --> 00:28:23,966
like this, which is not what


1039
00:28:23,966 --> 00:28:25,016
anyone expects.


1040
00:28:25,556 --> 00:28:26,796
And it's not even English.


1041
00:28:28,446 --> 00:28:30,206
So, how can we do better?


1042
00:28:30,206 --> 00:28:30,496
Right?


1043
00:28:30,536 --> 00:28:31,966
Clearly this is a problem that's


1044
00:28:31,966 --> 00:28:33,426
very important to us and it's


1045
00:28:33,426 --> 00:28:35,056
very dear to our customers.


1046
00:28:35,806 --> 00:28:37,716
Well, let's look at our post


1047
00:28:37,716 --> 00:28:38,866
entity and see if there's some


1048
00:28:38,866 --> 00:28:40,356
changes we can make that would


1049
00:28:40,356 --> 00:28:41,046
make this better.


1050
00:28:41,716 --> 00:28:44,936
The first thing to do is to stop


1051
00:28:44,936 --> 00:28:46,536
creating collisions on flat


1052
00:28:46,536 --> 00:28:47,126
values.


1053
00:28:47,676 --> 00:28:49,986
Content is simply a flat string


1054
00:28:50,026 --> 00:28:51,156
and there's nothing that we can


1055
00:28:51,156 --> 00:28:52,806
infer about the merge behavior


1056
00:28:52,806 --> 00:28:54,096
that you want for that string,


1057
00:28:54,096 --> 00:28:55,236
simply from looking at it.


1058
00:28:56,356 --> 00:28:58,716
But, if we break it up as a


1059
00:28:58,716 --> 00:29:01,406
relationship, multiple devices


1060
00:29:01,406 --> 00:29:03,636
can contribute contributions to


1061
00:29:03,636 --> 00:29:05,096
the content field all by


1062
00:29:05,096 --> 00:29:05,816
themselves.


1063
00:29:06,336 --> 00:29:07,846
And because of the way we store


1064
00:29:07,846 --> 00:29:10,096
Two-One relationships, many


1065
00:29:10,096 --> 00:29:11,416
devices can contribute these


1066
00:29:11,416 --> 00:29:13,246
objects at the same time without


1067
00:29:13,246 --> 00:29:14,946
creating a collision on the post


1068
00:29:14,946 --> 00:29:15,836
object itself.


1069
00:29:16,936 --> 00:29:18,566
So, here I've broken it up as a


1070
00:29:18,566 --> 00:29:20,776
very simple post content entity


1071
00:29:21,126 --> 00:29:22,366
with a simple string.


1072
00:29:23,556 --> 00:29:25,756
Now, because of how we store


1073
00:29:25,756 --> 00:29:27,536
Two-One relationships, these


1074
00:29:27,536 --> 00:29:29,456
will be combined by devices on


1075
00:29:29,456 --> 00:29:29,986
their own.


1076
00:29:30,176 --> 00:29:30,366
Right?


1077
00:29:30,366 --> 00:29:31,796
We need to traverse them in


1078
00:29:31,796 --> 00:29:33,066
order to assemble the final


1079
00:29:33,066 --> 00:29:33,546
value.


1080
00:29:34,056 --> 00:29:35,726
And we call this eventual


1081
00:29:35,726 --> 00:29:36,506
consistency.


1082
00:29:36,926 --> 00:29:38,896
As both devices contribute post


1083
00:29:38,896 --> 00:29:40,026
content objects, they'll


1084
00:29:40,026 --> 00:29:41,186
download the post content


1085
00:29:41,186 --> 00:29:42,736
objects from the other device


1086
00:29:42,736 --> 00:29:45,026
and concatenate them or merge


1087
00:29:45,026 --> 00:29:46,516
them, or whatever topology you


1088
00:29:46,516 --> 00:29:48,326
want to apply to this problem to


1089
00:29:48,326 --> 00:29:49,606
assemble the final value.


1090
00:29:50,926 --> 00:29:52,786
But we want that to be the same


1091
00:29:52,786 --> 00:29:54,766
across all devices and a


1092
00:29:54,836 --> 00:29:56,136
difference in download order


1093
00:29:56,136 --> 00:29:57,526
could create a different final


1094
00:29:57,526 --> 00:29:57,966
value.


1095
00:29:58,476 --> 00:30:00,536
So, we can order them say with


1096
00:30:00,536 --> 00:30:02,216
something as trivial as a date.


1097
00:30:02,806 --> 00:30:04,306
In this way, the devices can


1098
00:30:04,306 --> 00:30:05,876
order the post content objects


1099
00:30:05,876 --> 00:30:07,466
before they do a concatenation


1100
00:30:07,466 --> 00:30:08,966
using a simple sort descriptor


1101
00:30:08,966 --> 00:30:10,716
in Core Data, giving them a


1102
00:30:10,716 --> 00:30:12,186
consistent ordering and merge


1103
00:30:12,186 --> 00:30:14,336
behavior across all devices.


1104
00:30:15,216 --> 00:30:17,106
But, I'm a bit of a distributed


1105
00:30:17,106 --> 00:30:20,166
systems nerd and time is evil.


1106
00:30:21,296 --> 00:30:22,826
In fact, a devices notion of


1107
00:30:22,826 --> 00:30:24,276
time might not even line up if


1108
00:30:24,276 --> 00:30:24,976
they're in your house together.


1109
00:30:26,716 --> 00:30:28,716
So, we can take this a step


1110
00:30:28,716 --> 00:30:30,256
further and implement a full


1111
00:30:30,256 --> 00:30:32,306
causal tree by leveraging a


1112
00:30:32,306 --> 00:30:33,546
relationship to a parent


1113
00:30:33,546 --> 00:30:35,446
contribution and giving the


1114
00:30:35,446 --> 00:30:37,226
entity some information about


1115
00:30:37,226 --> 00:30:38,476
the device that's making the


1116
00:30:38,476 --> 00:30:39,626
actual contribution.


1117
00:30:40,326 --> 00:30:42,006
In this way, we've implemented a


1118
00:30:42,006 --> 00:30:43,326
rough sketch of something called


1119
00:30:43,326 --> 00:30:44,956
the conflict-free replicated


1120
00:30:44,956 --> 00:30:45,526
data type.


1121
00:30:46,026 --> 00:30:47,626
And this is an awesome emerging


1122
00:30:47,626 --> 00:30:49,376
field of computer science that


1123
00:30:49,376 --> 00:30:51,246
allows us to deploy algorithms


1124
00:30:51,526 --> 00:30:52,866
to create consistent merge


1125
00:30:52,866 --> 00:30:54,426
behavior across different


1126
00:30:54,426 --> 00:30:55,806
user-user scenarios.


1127
00:30:56,316 --> 00:31:00,006
And that has been Using Core


1128
00:31:00,006 --> 00:31:02,216
Data with CloudKit.


1129
00:31:02,216 --> 00:31:03,206
It's been my pleasure to show


1130
00:31:03,206 --> 00:31:03,386
you


1131
00:31:03,516 --> 00:31:05,046
NSPersistentCloudKitContainer


1132
00:31:05,116 --> 00:31:06,846
and how you can easily implement


1133
00:31:06,846 --> 00:31:07,886
sync functionality in your


1134
00:31:07,886 --> 00:31:08,886
applications with it.


1135
00:31:09,726 --> 00:31:10,876
We've also got some great new


1136
00:31:10,876 --> 00:31:12,316
sample code and documentation


1137
00:31:12,386 --> 00:31:13,546
for you this year that I hope


1138
00:31:13,636 --> 00:31:15,046
gives you a great experience


1139
00:31:15,046 --> 00:31:16,466
with all of these new APIs.


1140
00:31:17,076 --> 00:31:19,516
And finally, I can't wait to see


1141
00:31:19,516 --> 00:31:20,396
what you build with


1142
00:31:20,396 --> 00:31:21,946
NSPersistentCloudKitContainer


1143
00:31:22,266 --> 00:31:24,476
and how you extend it.


1144
00:31:24,626 --> 00:31:26,356
We'll be in a ton of labs this


1145
00:31:26,356 --> 00:31:26,556
year.


1146
00:31:27,356 --> 00:31:28,366
Every day this week.


1147
00:31:28,546 --> 00:31:30,026
And as you know, we have a talk


1148
00:31:30,026 --> 00:31:31,846
on 3 o'clock that covers a lot


1149
00:31:31,846 --> 00:31:33,316
more features in Core Data in


1150
00:31:33,316 --> 00:31:33,846
Thursday.


1151
00:31:35,196 --> 00:31:36,246
Thanks a lot, and I hope you


1152
00:31:36,246 --> 00:31:37,976
have an awesome WWDC.


1153
00:31:38,516 --> 00:31:42,500
[ Applause ]

