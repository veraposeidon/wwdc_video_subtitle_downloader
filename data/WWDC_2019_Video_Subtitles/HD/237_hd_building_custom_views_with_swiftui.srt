1
00:00:00,506 --> 00:00:04,516
[ Music ]


2
00:00:11,516 --> 00:00:14,936
[ Applause ]


3
00:00:15,436 --> 00:00:16,556
>> Hi everybody.


4
00:00:16,886 --> 00:00:18,086
It's so great to be with you all


5
00:00:18,086 --> 00:00:19,396
again at WWDC.


6
00:00:20,556 --> 00:00:23,526
I'm Dave. If you've seen the


7
00:00:23,526 --> 00:00:25,756
other sessions on SwiftUI, you


8
00:00:25,756 --> 00:00:28,366
know how easy it is to assemble


9
00:00:28,366 --> 00:00:29,806
all the parts of an application


10
00:00:29,806 --> 00:00:30,816
and get it working.


11
00:00:31,776 --> 00:00:34,196
Today, John and I are going to


12
00:00:34,196 --> 00:00:36,526
show you how to go from creating


13
00:00:36,526 --> 00:00:39,056
a functional app to one with


14
00:00:40,226 --> 00:00:42,486
fine-tuned layout, beautiful


15
00:00:42,486 --> 00:00:44,906
graphics, and some really cool


16
00:00:44,906 --> 00:00:45,566
animations.


17
00:00:47,336 --> 00:00:49,346
We're going to present two


18
00:00:49,346 --> 00:00:52,396
SwiftUI subsystems and then


19
00:00:52,396 --> 00:00:53,206
John's going to use them


20
00:00:53,206 --> 00:00:54,576
together to build a custom


21
00:00:54,576 --> 00:00:55,016
control.


22
00:00:55,726 --> 00:00:57,016
So let's get started.


23
00:00:57,706 --> 00:01:00,346
Now from the moment you get


24
00:01:00,346 --> 00:01:02,426
started with SwiftUI you're


25
00:01:02,426 --> 00:01:04,206
already experiencing the layout


26
00:01:04,206 --> 00:01:04,546
system.


27
00:01:05,275 --> 00:01:06,986
So that blue box you see around


28
00:01:06,986 --> 00:01:08,536
the text in your preview editor,


29
00:01:09,176 --> 00:01:11,426
that's its bounds and layout's


30
00:01:11,426 --> 00:01:12,936
all about deciding the bounds of


31
00:01:12,936 --> 00:01:13,756
things on the screen.


32
00:01:15,006 --> 00:01:16,436
But let's take a look under the


33
00:01:16,486 --> 00:01:18,146
hood and see what's happening


34
00:01:18,456 --> 00:01:19,226
with this example.


35
00:01:21,576 --> 00:01:23,626
Technically, there are three


36
00:01:23,626 --> 00:01:24,446
views at work here.


37
00:01:25,006 --> 00:01:26,976
There's the text at the bottom


38
00:01:26,976 --> 00:01:27,916
of the view hierarchy.


39
00:01:28,466 --> 00:01:31,876
Your content view which always


40
00:01:31,876 --> 00:01:33,986
has the same bounds as its body,


41
00:01:34,096 --> 00:01:34,696
the text.


42
00:01:36,026 --> 00:01:39,136
And finally, the root view which


43
00:01:39,136 --> 00:01:40,986
in this case has the dimensions


44
00:01:40,986 --> 00:01:43,066
of the device minus the safe


45
00:01:43,066 --> 00:01:43,986
area insets.


46
00:01:44,566 --> 00:01:45,956
So if you see something like


47
00:01:46,016 --> 00:01:47,456
this at the top of your phone,


48
00:01:47,846 --> 00:01:49,166
for example, it's not included.


49
00:01:49,786 --> 00:01:54,306
Pro tip, you can still lay stuff


50
00:01:54,306 --> 00:01:56,046
out in that area by using this


51
00:01:56,046 --> 00:01:57,616
modifier, okay?


52
00:01:57,956 --> 00:01:59,506
But by default you're in the


53
00:01:59,506 --> 00:02:00,126
safety zone.


54
00:02:01,396 --> 00:02:04,396
Now, the top layer of any view


55
00:02:04,476 --> 00:02:06,216
with a body is always what we


56
00:02:06,216 --> 00:02:07,536
call layout neutral.


57
00:02:08,235 --> 00:02:10,856
So its bounds are defined by the


58
00:02:10,856 --> 00:02:11,906
bounds of its body.


59
00:02:11,966 --> 00:02:13,346
They act the same.


60
00:02:13,776 --> 00:02:15,306
So you can really treat them as


61
00:02:15,356 --> 00:02:17,036
the same view for the purposes


62
00:02:17,036 --> 00:02:17,726
of layout.


63
00:02:18,536 --> 00:02:20,076
So there are really only two


64
00:02:20,076 --> 00:02:22,546
views of interest here and the


65
00:02:22,546 --> 00:02:24,946
layout process has three steps.


66
00:02:25,956 --> 00:02:28,646
First, the root view offers the


67
00:02:28,646 --> 00:02:31,606
text a proposed size and that's


68
00:02:31,606 --> 00:02:32,816
represented by those two big


69
00:02:32,816 --> 00:02:33,556
wide arrows.


70
00:02:34,276 --> 00:02:36,276
And because it's at the root, it


71
00:02:36,276 --> 00:02:37,566
offers the size of the whole


72
00:02:37,566 --> 00:02:38,266
safe area.


73
00:02:40,446 --> 00:02:42,496
Next, the text replies, well


74
00:02:42,496 --> 00:02:43,706
that's mighty generous of you


75
00:02:43,706 --> 00:02:46,286
but I'm really, I'm only this


76
00:02:46,286 --> 00:02:46,466
big.


77
00:02:47,126 --> 00:02:50,046
And in SwiftUI there's no way to


78
00:02:50,046 --> 00:02:52,356
force a size on your child, the


79
00:02:52,356 --> 00:02:54,726
parent has to respect that


80
00:02:55,816 --> 00:02:55,946
choice.


81
00:02:56,206 --> 00:02:57,786
And now the root view says


82
00:02:58,306 --> 00:02:59,646
alrighty, I need to put you


83
00:02:59,646 --> 00:03:01,546
somewhere so I'm putting you in


84
00:03:01,546 --> 00:03:01,866
the middle.


85
00:03:02,686 --> 00:03:04,346
So that's it.


86
00:03:04,346 --> 00:03:07,566
This was a simple example but


87
00:03:07,716 --> 00:03:09,416
every layout interaction plays


88
00:03:09,416 --> 00:03:11,136
out in the same way between


89
00:03:11,536 --> 00:03:12,636
parents and children.


90
00:03:13,366 --> 00:03:14,976
And the behavior of your whole


91
00:03:14,976 --> 00:03:17,446
layout emerges from these parent


92
00:03:17,446 --> 00:03:18,526
child interactions.


93
00:03:20,576 --> 00:03:22,466
But I want to highlight the


94
00:03:22,466 --> 00:03:24,766
second step because it's


95
00:03:24,806 --> 00:03:26,036
different from what you might be


96
00:03:26,036 --> 00:03:28,116
used to, and it has an important


97
00:03:28,116 --> 00:03:29,446
consequence for you.


98
00:03:30,626 --> 00:03:32,636
It means that your views have


99
00:03:32,636 --> 00:03:33,586
sizing behavior.


100
00:03:35,356 --> 00:03:37,416
Since every view controls its


101
00:03:37,416 --> 00:03:39,536
own size, it means when you


102
00:03:39,536 --> 00:03:41,746
build a view, you get to decide


103
00:03:41,786 --> 00:03:43,566
how and when it resizes.


104
00:03:44,396 --> 00:03:46,636
For example, this view is a


105
00:03:46,636 --> 00:03:49,716
non-negotiable 50 by 10 points


106
00:03:50,086 --> 00:03:51,666
by virtue of the fixed size


107
00:03:51,666 --> 00:03:53,046
frame at its root.


108
00:03:54,496 --> 00:03:58,446
And this one is flexible but the


109
00:03:58,446 --> 00:03:59,386
height and width are always the


110
00:03:59,386 --> 00:03:59,806
same.


111
00:04:00,586 --> 00:04:02,056
So it's always got a one to one


112
00:04:02,056 --> 00:04:02,906
aspect ratio.


113
00:04:03,526 --> 00:04:05,836
So sizing is encapsulated in the


114
00:04:05,836 --> 00:04:06,616
view definition.


115
00:04:08,436 --> 00:04:09,926
We also saw this in action with


116
00:04:09,966 --> 00:04:10,396
text.


117
00:04:11,486 --> 00:04:13,716
So in SwiftUI, the bounds of


118
00:04:13,786 --> 00:04:15,936
text never stretch beyond the


119
00:04:16,166 --> 00:04:17,196
height and width of its


120
00:04:17,196 --> 00:04:19,375
displayed lines, and we'll see


121
00:04:19,375 --> 00:04:20,586
why that's important when we


122
00:04:20,586 --> 00:04:23,416
talk about stacks in a minute.


123
00:04:23,566 --> 00:04:27,086
Now, there's one final step in


124
00:04:27,086 --> 00:04:29,106
layout that's crucial for


125
00:04:29,106 --> 00:04:32,516
getting UIs to look good and you


126
00:04:32,516 --> 00:04:34,256
don't really have to think about


127
00:04:34,256 --> 00:04:36,026
it in SwiftUI because we take


128
00:04:36,026 --> 00:04:38,026
care of it, but it's worth


129
00:04:38,026 --> 00:04:40,536
knowing that SwiftUI rounds the


130
00:04:40,536 --> 00:04:42,026
corners of your view to the


131
00:04:42,026 --> 00:04:42,746
nearest pixel.


132
00:04:43,486 --> 00:04:45,586
So instead of anti-aliasing like


133
00:04:45,656 --> 00:04:48,626
this, you always get crisp,


134
00:04:49,166 --> 00:04:49,936
clear edges.


135
00:04:50,796 --> 00:04:52,956
So this is just one of many


136
00:04:52,956 --> 00:04:55,036
details every great app needs to


137
00:04:55,036 --> 00:04:55,536
get right.


138
00:04:56,206 --> 00:04:57,846
But SwiftUI takes care of--


139
00:04:58,946 --> 00:04:59,496
[applause] just takes out of


140
00:04:59,546 --> 00:04:59,836
your way.


141
00:04:59,876 --> 00:04:59,976
Yeah.


142
00:05:00,516 --> 00:05:03,056
[ Applause ]


143
00:05:03,556 --> 00:05:05,096
So you can focus on the things


144
00:05:05,096 --> 00:05:07,936
that make your app special.


145
00:05:08,066 --> 00:05:10,186
Okay, now that we have the


146
00:05:10,226 --> 00:05:12,456
basics in hand, let's see if we


147
00:05:12,456 --> 00:05:14,576
can't make things a little more


148
00:05:14,576 --> 00:05:15,236
appetizing.


149
00:05:17,156 --> 00:05:18,826
I'll change the text in our


150
00:05:18,826 --> 00:05:21,316
example to something random


151
00:05:21,316 --> 00:05:24,816
like, I don't know, avocado


152
00:05:24,816 --> 00:05:25,196
toast.


153
00:05:26,756 --> 00:05:27,416
Are you hungry yet?


154
00:05:28,956 --> 00:05:31,246
No? Okay. Let me try to make it


155
00:05:31,246 --> 00:05:32,596
a little bit more appealing.


156
00:05:33,016 --> 00:05:34,866
I'll add a nice green background


157
00:05:34,896 --> 00:05:35,076
here.


158
00:05:35,946 --> 00:05:38,526
Now, this background modifier


159
00:05:39,056 --> 00:05:41,276
wraps the text view in a


160
00:05:41,276 --> 00:05:43,296
background view with the color


161
00:05:43,296 --> 00:05:44,816
view as a secondary child.


162
00:05:47,156 --> 00:05:49,306
So now the green background


163
00:05:49,356 --> 00:05:51,086
exactly matches the bounds of


164
00:05:51,116 --> 00:05:51,706
the text.


165
00:05:52,886 --> 00:05:55,266
So pro tip number two, throwing


166
00:05:55,596 --> 00:05:57,856
a background or border color on


167
00:05:57,856 --> 00:06:00,286
a view is a really useful trick


168
00:06:00,286 --> 00:06:01,416
if you want to observe the


169
00:06:01,416 --> 00:06:03,576
view's bounds and you don't have


170
00:06:03,576 --> 00:06:04,896
a preview canvas handy.


171
00:06:06,306 --> 00:06:09,036
Okay, now I want a little bit


172
00:06:09,036 --> 00:06:10,676
more space around the text in


173
00:06:10,766 --> 00:06:13,356
the edge of the green box so I'm


174
00:06:13,356 --> 00:06:14,996
going to insert some padding


175
00:06:15,726 --> 00:06:15,816
there.


176
00:06:17,436 --> 00:06:20,106
Now, SwiftUI chooses an amount


177
00:06:20,106 --> 00:06:21,866
of padding that's appropriate to


178
00:06:21,866 --> 00:06:24,416
our platform, dynamic type size,


179
00:06:24,606 --> 00:06:25,316
and environment.


180
00:06:26,456 --> 00:06:27,786
And when you don't pass any


181
00:06:27,826 --> 00:06:29,576
parameters, you get adaptive


182
00:06:29,706 --> 00:06:31,926
padding in exactly the same way


183
00:06:31,926 --> 00:06:34,916
that SwiftUI adaptively styles a


184
00:06:35,036 --> 00:06:37,146
picker or a button depending on


185
00:06:37,146 --> 00:06:37,946
the context it's in.


186
00:06:39,226 --> 00:06:41,116
And if we want to adaptively pad


187
00:06:41,116 --> 00:06:42,276
just the leading and trailing


188
00:06:42,276 --> 00:06:46,376
edges, well we can do that too.


189
00:06:46,616 --> 00:06:48,656
Adaptive modifiers are the best


190
00:06:48,936 --> 00:06:50,326
way to adjust your layout


191
00:06:50,746 --> 00:06:52,236
because you avoid complicating


192
00:06:52,236 --> 00:06:54,276
the code, wasting time on


193
00:06:54,276 --> 00:06:55,976
details early in your process,


194
00:06:56,386 --> 00:06:57,776
and hard coding constants that


195
00:06:57,776 --> 00:06:58,696
might be inappropriate


196
00:06:58,696 --> 00:06:59,126
elsewhere.


197
00:06:59,666 --> 00:07:02,066
But since we're here to get


198
00:07:02,066 --> 00:07:05,106
control over details, let's say


199
00:07:05,106 --> 00:07:06,466
we have a specification that


200
00:07:06,466 --> 00:07:08,926
calls for exactly 10 points of


201
00:07:08,996 --> 00:07:10,236
padding on all sides.


202
00:07:11,746 --> 00:07:12,556
Okay you can write that


203
00:07:12,556 --> 00:07:13,156
explicitly.


204
00:07:14,626 --> 00:07:16,866
Now this example's a little more


205
00:07:16,866 --> 00:07:18,636
interesting than hello world.


206
00:07:19,376 --> 00:07:20,846
So let's see how the layout


207
00:07:20,876 --> 00:07:22,686
process works in this case.


208
00:07:23,536 --> 00:07:26,736
First, the root view proposes


209
00:07:27,016 --> 00:07:28,206
its entire size to the


210
00:07:28,206 --> 00:07:28,876
background view.


211
00:07:29,716 --> 00:07:31,856
And much like our toast view


212
00:07:31,856 --> 00:07:34,276
itself, the background view is


213
00:07:34,276 --> 00:07:36,236
layout neutral so it's just


214
00:07:36,236 --> 00:07:38,056
going to pass that size proposal


215
00:07:38,296 --> 00:07:41,136
along to the padding view.


216
00:07:42,696 --> 00:07:45,176
Now, the padding view knows it's


217
00:07:45,176 --> 00:07:47,306
going to add 10 points on a side


218
00:07:47,306 --> 00:07:50,806
to its child so it offers that


219
00:07:50,806 --> 00:07:52,576
much less to its child-- the


220
00:07:52,576 --> 00:07:56,656
text-- and the text takes the


221
00:07:56,656 --> 00:07:58,476
width it needs and returns that


222
00:07:58,476 --> 00:08:01,136
to the padding view which knows


223
00:08:01,136 --> 00:08:02,856
it should be bigger than its


224
00:08:02,856 --> 00:08:04,626
child by 10 points on each side


225
00:08:04,916 --> 00:08:06,296
and it situates the text


226
00:08:06,296 --> 00:08:08,186
appropriately in its coordinate


227
00:08:08,186 --> 00:08:08,586
space.


228
00:08:11,156 --> 00:08:13,086
Now, we said the background view


229
00:08:13,086 --> 00:08:14,616
was layout neutral so it's just


230
00:08:14,616 --> 00:08:15,676
going to report that size


231
00:08:15,676 --> 00:08:16,156
upwards.


232
00:08:16,556 --> 00:08:19,686
But before it does, it offers


233
00:08:19,686 --> 00:08:21,426
that size to its secondary


234
00:08:21,426 --> 00:08:24,436
child, the color.


235
00:08:24,606 --> 00:08:27,366
Now, colors are very compliant


236
00:08:27,516 --> 00:08:28,516
when it comes to layout.


237
00:08:29,166 --> 00:08:31,006
The accept the size offered to


238
00:08:31,536 --> 00:08:31,886
them.


239
00:08:31,886 --> 00:08:33,836
So the color of the size is just


240
00:08:33,836 --> 00:08:35,236
the same as that of the padding


241
00:08:35,236 --> 00:08:35,426
view.


242
00:08:36,635 --> 00:08:38,726
Finally, the background reports


243
00:08:38,726 --> 00:08:41,046
its size to the root view and


244
00:08:41,796 --> 00:08:44,116
the root view centers it as


245
00:08:44,116 --> 00:08:44,526
before.


246
00:08:44,526 --> 00:08:46,296
And that's the whole process.


247
00:08:47,746 --> 00:08:48,776
Ready for another example?


248
00:08:49,296 --> 00:08:51,736
This one's even simpler but it's


249
00:08:51,736 --> 00:08:52,116
important.


250
00:08:53,746 --> 00:08:56,456
So in this case the view's body


251
00:08:56,536 --> 00:08:59,496
is just a fixed size 20 by 20


252
00:08:59,496 --> 00:08:59,886
image.


253
00:09:01,286 --> 00:09:03,936
In SwiftUI, unless you mark an


254
00:09:03,936 --> 00:09:06,086
image as resizable, either in


255
00:09:06,086 --> 00:09:08,256
the asset catalog or in code,


256
00:09:08,776 --> 00:09:09,706
it's fixed sized.


257
00:09:10,936 --> 00:09:13,236
Now, I'd like our view, our


258
00:09:13,236 --> 00:09:14,566
whole view to be about half


259
00:09:14,566 --> 00:09:17,126
again as big so let's add a 30


260
00:09:17,126 --> 00:09:20,166
by 30 frame modifier like this.


261
00:09:21,496 --> 00:09:24,986
Now, you might have noticed that


262
00:09:25,076 --> 00:09:27,946
the image, though undeniably


263
00:09:27,946 --> 00:09:29,836
appetizing, has not changed its


264
00:09:29,836 --> 00:09:30,226
size.


265
00:09:30,836 --> 00:09:33,866
But that shouldn't be surprising


266
00:09:33,866 --> 00:09:34,536
should it?


267
00:09:34,536 --> 00:09:37,116
We said it was fixed sized.


268
00:09:37,286 --> 00:09:39,946
Around it you'll find a 30 by 30


269
00:09:39,946 --> 00:09:42,616
frame and that's the size of the


270
00:09:42,616 --> 00:09:43,686
body of our view.


271
00:09:44,016 --> 00:09:45,666
So the view we've defined is in


272
00:09:45,666 --> 00:09:48,016
fact 50 percent bigger than it


273
00:09:48,016 --> 00:09:49,016
was before we added the


274
00:09:49,016 --> 00:09:49,576
modifier.


275
00:09:51,416 --> 00:09:54,326
So, is it a contradiction that


276
00:09:54,326 --> 00:09:55,826
the size of the frame doesn't


277
00:09:55,826 --> 00:09:59,016
match the size of our image?


278
00:09:59,146 --> 00:09:59,976
Actually, no.


279
00:10:00,956 --> 00:10:02,676
This is the layout system doing


280
00:10:02,676 --> 00:10:03,586
what it's supposed to do.


281
00:10:04,796 --> 00:10:06,526
See it's important to recognize


282
00:10:06,876 --> 00:10:08,926
that the frame is not a


283
00:10:08,926 --> 00:10:11,746
constraint in SwiftUI, it's just


284
00:10:11,746 --> 00:10:13,486
a view which you can think of


285
00:10:13,796 --> 00:10:14,906
like a picture frame.


286
00:10:16,436 --> 00:10:18,816
It proposes fixed dimensions for


287
00:10:18,816 --> 00:10:21,436
its child, but like every other


288
00:10:21,436 --> 00:10:23,326
view, the child ultimately


289
00:10:23,356 --> 00:10:24,776
chooses its own size.


290
00:10:26,116 --> 00:10:29,606
So in that sense, SwiftUI layout


291
00:10:29,706 --> 00:10:31,526
uses a lighter touch than you


292
00:10:31,526 --> 00:10:32,216
might be used to.


293
00:10:33,596 --> 00:10:35,616
The payoff, though, is that


294
00:10:35,616 --> 00:10:37,716
there are no underconstrained or


295
00:10:37,716 --> 00:10:39,046
overconstrained systems in


296
00:10:39,046 --> 00:10:41,606
SwiftUI which means everything


297
00:10:41,606 --> 00:10:42,596
you can express has a


298
00:10:42,596 --> 00:10:43,696
well-defined effect.


299
00:10:45,066 --> 00:10:46,976
So there's no such thing as an


300
00:10:46,976 --> 00:10:49,116
incorrect layout unless you


301
00:10:49,116 --> 00:10:49,956
don't like the result you're


302
00:10:49,956 --> 00:10:50,256
getting.


303
00:10:52,486 --> 00:10:54,066
Okay, now that we have the


304
00:10:54,066 --> 00:10:56,346
basics under our belts, let's


305
00:10:56,346 --> 00:10:58,126
discuss the power tools-- the


306
00:10:58,126 --> 00:10:58,856
stacks.


307
00:11:00,496 --> 00:11:04,306
Now, HStack and VStack arrange


308
00:11:04,346 --> 00:11:06,566
their children in a row or


309
00:11:06,566 --> 00:11:07,616
column respectively.


310
00:11:08,626 --> 00:11:10,306
I threw this list cell together


311
00:11:10,626 --> 00:11:12,446
with four stacks and just a few


312
00:11:12,446 --> 00:11:13,056
lines of code.


313
00:11:13,676 --> 00:11:15,586
And here's the code for that


314
00:11:15,586 --> 00:11:15,946
layout.


315
00:11:17,096 --> 00:11:18,566
At the top level you got an


316
00:11:18,566 --> 00:11:22,376
HStack with two children, the


317
00:11:22,376 --> 00:11:24,886
first of which is a VStack


318
00:11:24,886 --> 00:11:26,066
containing the star rating.


319
00:11:26,696 --> 00:11:30,676
And the other child is also a


320
00:11:30,676 --> 00:11:34,066
VStack that leading aligns its


321
00:11:34,066 --> 00:11:37,316
two children, the first of which


322
00:11:37,876 --> 00:11:40,676
is yet another HStack containing


323
00:11:40,826 --> 00:11:43,756
the title, a stretchy spacer,


324
00:11:44,956 --> 00:11:46,816
and our avocado image.


325
00:11:47,876 --> 00:11:49,496
So there you go.


326
00:11:50,286 --> 00:11:51,196
Four stacks.


327
00:11:51,896 --> 00:11:53,786
Let's put it back together.


328
00:11:54,766 --> 00:11:54,956
Now--


329
00:11:55,516 --> 00:12:01,056
[ Applause ]


330
00:12:01,556 --> 00:12:02,926
So I want you to notice that


331
00:12:02,926 --> 00:12:05,066
SwiftUI didn't slam all of the


332
00:12:05,066 --> 00:12:06,526
stacks children against each


333
00:12:06,526 --> 00:12:06,776
other.


334
00:12:07,346 --> 00:12:09,006
It left some space between these


335
00:12:09,006 --> 00:12:11,806
two because adaptive spacing is


336
00:12:11,806 --> 00:12:12,296
in effect.


337
00:12:13,826 --> 00:12:15,336
You'll also find that the


338
00:12:15,336 --> 00:12:18,176
baseline to baseline spacing for


339
00:12:18,176 --> 00:12:20,486
adjacent text exactly matches


340
00:12:20,556 --> 00:12:22,146
Apple's human interface


341
00:12:22,146 --> 00:12:25,446
guidelines, as does the baseline


342
00:12:25,446 --> 00:12:26,356
to edge spacing.


343
00:12:26,956 --> 00:12:28,316
Because we've encoded these


344
00:12:28,396 --> 00:12:30,336
rules into SwiftUI's layout


345
00:12:30,336 --> 00:12:33,526
system, the general principle


346
00:12:33,526 --> 00:12:35,866
here is that the simplest,


347
00:12:36,376 --> 00:12:38,756
easiest code is also well on its


348
00:12:38,756 --> 00:12:40,476
way to producing a beautiful


349
00:12:40,476 --> 00:12:40,806
result.


350
00:12:42,506 --> 00:12:45,316
But, if you need control, as


351
00:12:45,316 --> 00:12:48,906
always, SwiftUI has your back


352
00:12:49,166 --> 00:12:50,806
with knobs you can turn to get


353
00:12:50,806 --> 00:12:51,976
exactly the result you want.


354
00:12:54,696 --> 00:12:56,826
Oh, I almost forgot another


355
00:12:56,946 --> 00:12:58,846
thing that SwiftUI handles for


356
00:12:58,846 --> 00:12:59,056
you.


357
00:12:59,776 --> 00:13:02,716
If your app is localized for a


358
00:13:02,716 --> 00:13:04,166
right to left writing system


359
00:13:04,166 --> 00:13:06,076
like Arabic and you change the


360
00:13:06,076 --> 00:13:08,926
system language, well SwiftUI


361
00:13:08,926 --> 00:13:10,046
flips your horizontal


362
00:13:10,046 --> 00:13:12,106
coordinates for you so you don't


363
00:13:12,106 --> 00:13:12,976
have to recode the layout.


364
00:13:13,516 --> 00:13:19,016
[ Applause ]


365
00:13:19,516 --> 00:13:21,676
So if you've been wondering why


366
00:13:21,676 --> 00:13:23,006
we talk about leading and


367
00:13:23,006 --> 00:13:24,836
trailing alignments instead of


368
00:13:24,926 --> 00:13:26,676
left and right, now you know.


369
00:13:27,336 --> 00:13:28,626
It's so that your layouts are


370
00:13:28,696 --> 00:13:29,846
automatically ready for


371
00:13:29,846 --> 00:13:30,976
internationalization.


372
00:13:32,746 --> 00:13:35,246
Okay, so let's get an inside


373
00:13:35,246 --> 00:13:36,356
look at stack layouts.


374
00:13:37,616 --> 00:13:40,156
Now, most views we've looked at


375
00:13:40,156 --> 00:13:42,406
so far have effectively been a


376
00:13:42,406 --> 00:13:44,096
linear chain of children.


377
00:13:44,686 --> 00:13:46,276
But stacks are interesting


378
00:13:46,696 --> 00:13:48,336
because the children have to


379
00:13:48,576 --> 00:13:50,446
compete for space on an equal


380
00:13:50,446 --> 00:13:50,786
footing.


381
00:13:52,186 --> 00:13:55,876
In this stack we've said the


382
00:13:55,876 --> 00:13:58,076
text shouldn't wrap to more than


383
00:13:58,076 --> 00:14:02,236
one line, which means that if


384
00:14:02,236 --> 00:14:04,546
the stack is asked to fit in


385
00:14:04,546 --> 00:14:08,436
less space, well the text will


386
00:14:08,436 --> 00:14:09,896
just be truncated to fit.


387
00:14:11,186 --> 00:14:12,926
But let's start with the case


388
00:14:13,006 --> 00:14:14,736
where there's plenty of space


389
00:14:14,736 --> 00:14:16,776
offered by the parent, okay?


390
00:14:18,166 --> 00:14:20,296
So first the stack figures out


391
00:14:20,346 --> 00:14:21,566
the internal spacing


392
00:14:21,566 --> 00:14:24,856
requirements and subtracts that


393
00:14:24,856 --> 00:14:27,706
from the proposed width to give


394
00:14:27,706 --> 00:14:29,536
us an amount of unallocated


395
00:14:29,606 --> 00:14:30,086
space.


396
00:14:30,426 --> 00:14:32,656
And now we have three children


397
00:14:32,926 --> 00:14:34,296
whose size we don't know.


398
00:14:36,206 --> 00:14:38,536
So we divide the remaining space


399
00:14:38,856 --> 00:14:42,576
in three equal parts and then we


400
00:14:42,576 --> 00:14:44,546
propose one of those as the size


401
00:14:44,546 --> 00:14:45,876
for the least flexible child.


402
00:14:47,206 --> 00:14:49,496
Now, we said the image was fixed


403
00:14:49,496 --> 00:14:50,216
sized right?


404
00:14:50,586 --> 00:14:52,896
So that's the least flexible.


405
00:14:54,586 --> 00:14:57,906
So this-- the image takes this


406
00:14:57,906 --> 00:15:00,596
much, and whatever size it


407
00:15:00,746 --> 00:15:03,986
claimed, we deduct that from the


408
00:15:03,986 --> 00:15:05,216
unallocated space.


409
00:15:05,736 --> 00:15:07,876
And repeat.


410
00:15:08,716 --> 00:15:10,626
Okay? We now have two unsized


411
00:15:10,626 --> 00:15:13,186
children so we divide the


412
00:15:13,186 --> 00:15:14,906
remaining proposed size in two


413
00:15:15,146 --> 00:15:17,526
and offer one half to the least


414
00:15:17,526 --> 00:15:18,806
flexible child that doesn't have


415
00:15:18,806 --> 00:15:20,876
a size which is delicious.


416
00:15:22,486 --> 00:15:24,336
So delicious claims this much,


417
00:15:24,686 --> 00:15:26,546
which you can see is less than


418
00:15:26,546 --> 00:15:27,036
the offer.


419
00:15:27,716 --> 00:15:28,766
Remember that.


420
00:15:29,146 --> 00:15:32,926
And again, that is deducted from


421
00:15:33,086 --> 00:15:36,116
the unallocated space and that


422
00:15:36,116 --> 00:15:38,636
leave this much room for avocado


423
00:15:38,636 --> 00:15:40,516
toast which, as you can see, is


424
00:15:40,566 --> 00:15:40,826
plenty.


425
00:15:42,586 --> 00:15:44,976
Okay, last steps.


426
00:15:46,396 --> 00:15:48,006
Now that all of the children


427
00:15:48,006 --> 00:15:51,706
have sizes, the stack lines them


428
00:15:51,706 --> 00:15:53,276
up with the spacing from


429
00:15:53,276 --> 00:15:53,686
earlier.


430
00:15:54,936 --> 00:15:56,146
And since the code didn't


431
00:15:56,146 --> 00:15:58,246
specify an alignment, the


432
00:15:58,246 --> 00:15:59,676
default of centering is in


433
00:15:59,676 --> 00:16:00,016
effect.


434
00:16:00,846 --> 00:16:02,956
So the stack uses center


435
00:16:02,956 --> 00:16:04,466
alignment to arrange the centers


436
00:16:04,466 --> 00:16:05,266
of all of the children


437
00:16:05,266 --> 00:16:05,706
vertically.


438
00:16:07,416 --> 00:16:09,866
Finally, the stack chooses its


439
00:16:09,866 --> 00:16:11,986
own size so that it exactly


440
00:16:11,986 --> 00:16:14,976
encloses the children.


441
00:16:15,086 --> 00:16:17,406
Now, if you think about it, you


442
00:16:17,406 --> 00:16:19,316
might be able to visualize why


443
00:16:19,316 --> 00:16:20,956
the bounds of text don't stretch


444
00:16:20,956 --> 00:16:22,216
beyond their displayed width.


445
00:16:23,586 --> 00:16:26,146
See if delicious had accepted


446
00:16:26,266 --> 00:16:27,956
all of its offer, that would


447
00:16:27,956 --> 00:16:29,786
leave less for avocado toast


448
00:16:30,096 --> 00:16:31,126
which would have forced it to


449
00:16:31,126 --> 00:16:33,416
truncate despite the fact that


450
00:16:33,416 --> 00:16:35,486
everything could have fit, there


451
00:16:35,876 --> 00:16:38,586
was plenty of room.


452
00:16:38,796 --> 00:16:40,436
Actually, of the two pieces of


453
00:16:40,476 --> 00:16:42,706
text here, avocado toast is


454
00:16:42,786 --> 00:16:44,336
clearly the more important,


455
00:16:44,476 --> 00:16:44,736
right?


456
00:16:45,216 --> 00:16:45,976
It's the subject.


457
00:16:46,936 --> 00:16:48,736
Delicious is just an adjective.


458
00:16:48,736 --> 00:16:49,696
It'd kind of expendable.


459
00:16:50,546 --> 00:16:52,986
So this wouldn't be a good


460
00:16:52,986 --> 00:16:53,366
result.


461
00:16:54,496 --> 00:16:56,696
But, now that I think about it,


462
00:16:57,196 --> 00:16:59,286
that means the amount of space-


463
00:16:59,346 --> 00:17:01,226
when the amount of space offered


464
00:17:01,226 --> 00:17:03,706
is less than the ideal, the


465
00:17:03,706 --> 00:17:05,226
truncation behavior we saw


466
00:17:05,226 --> 00:17:07,006
earlier probably isn't quite


467
00:17:07,006 --> 00:17:07,935
what we want either.


468
00:17:09,546 --> 00:17:11,356
With a narrow offer like this,


469
00:17:11,356 --> 00:17:12,435
we'd rather keep all of the


470
00:17:12,435 --> 00:17:15,665
subject intact and let the


471
00:17:15,665 --> 00:17:16,766
adjective truncate.


472
00:17:17,336 --> 00:17:19,976
Okay, to achieve that we have


473
00:17:19,976 --> 00:17:20,915
another power tool.


474
00:17:21,496 --> 00:17:24,185
We can raise the layout priority


475
00:17:24,185 --> 00:17:26,016
of avocado toast from the


476
00:17:26,016 --> 00:17:27,976
default of zero, to one.


477
00:17:28,516 --> 00:17:34,366
[ Applause ]


478
00:17:34,866 --> 00:17:36,626
So when children in a stack have


479
00:17:36,706 --> 00:17:38,706
different layout priorities, the


480
00:17:38,706 --> 00:17:40,316
stack takes the unallocated


481
00:17:40,316 --> 00:17:43,886
space, it sets aside the minimum


482
00:17:43,886 --> 00:17:45,486
widths of all of the lower


483
00:17:45,516 --> 00:17:47,486
priority children, and then it


484
00:17:47,486 --> 00:17:49,856
divides the rest among children


485
00:17:49,856 --> 00:17:51,276
with the highest priority value.


486
00:17:52,986 --> 00:17:54,216
So in this case there's just one


487
00:17:54,216 --> 00:17:55,686
of those, it's avocado toast.


488
00:17:56,286 --> 00:17:59,786
And so that'll be offered all of


489
00:17:59,836 --> 00:18:01,966
the available space minus the


490
00:18:01,966 --> 00:18:05,216
widths of the image and the


491
00:18:05,336 --> 00:18:06,886
three dots that remain after


492
00:18:06,886 --> 00:18:08,706
shrinking delicious to its


493
00:18:08,706 --> 00:18:08,976
minimum.


494
00:18:11,086 --> 00:18:13,886
Okay, after sizing all of the


495
00:18:13,886 --> 00:18:15,186
children with the highest layout


496
00:18:15,186 --> 00:18:17,196
priority, the stack moves on to


497
00:18:17,196 --> 00:18:19,716
divide the remaining space among


498
00:18:19,716 --> 00:18:21,266
children with the next highest


499
00:18:21,266 --> 00:18:23,756
layout priority, and so on.


500
00:18:24,686 --> 00:18:27,256
Okay, there's one last power


501
00:18:27,256 --> 00:18:29,006
tool I want to show you.


502
00:18:30,046 --> 00:18:30,606
Alignments.


503
00:18:31,836 --> 00:18:34,036
Now, I know you won't be


504
00:18:34,036 --> 00:18:36,026
surprised that we can bottom


505
00:18:36,026 --> 00:18:39,846
align this stack.


506
00:18:40,056 --> 00:18:41,186
Looks pretty good that way


507
00:18:41,186 --> 00:18:41,446
right?


508
00:18:43,016 --> 00:18:45,956
But, consider what happens when


509
00:18:45,956 --> 00:18:48,746
we change the font of delicious


510
00:18:48,746 --> 00:18:49,716
to something smaller.


511
00:18:50,266 --> 00:18:54,446
Well, it looks okay to me, but


512
00:18:54,446 --> 00:18:54,976
what do I know?


513
00:18:55,796 --> 00:18:56,906
I'm just an app developer.


514
00:18:57,766 --> 00:18:59,726
I'm pretty sure Crusty, my UI


515
00:18:59,726 --> 00:19:01,046
designer is going to have a


516
00:19:01,046 --> 00:19:01,976
problem with it though.


517
00:19:02,516 --> 00:19:06,546
[ Applause ]


518
00:19:07,046 --> 00:19:08,456
Yeah he's going to zoom all the


519
00:19:08,456 --> 00:19:09,796
way in and start picking at the


520
00:19:09,796 --> 00:19:10,956
details like this.


521
00:19:12,276 --> 00:19:14,606
Bucky, he'll say, first you got


522
00:19:14,606 --> 00:19:16,136
the baseline of delicious which


523
00:19:16,136 --> 00:19:18,096
is here and then you got the


524
00:19:18,096 --> 00:19:20,346
bottom of the image down here.


525
00:19:20,566 --> 00:19:22,726
And then there's the baseline of


526
00:19:22,726 --> 00:19:25,546
avocado toast way up here, and


527
00:19:25,546 --> 00:19:27,076
none of them line up.


528
00:19:27,416 --> 00:19:28,216
What have I taught you?


529
00:19:29,516 --> 00:19:33,096
[Laughter]


530
00:19:33,596 --> 00:19:35,336
Fortunately we have an answer


531
00:19:35,336 --> 00:19:36,446
for that in SwiftUI.


532
00:19:37,906 --> 00:19:39,716
The first and last text-based


533
00:19:39,716 --> 00:19:41,616
line positions are alignments


534
00:19:41,646 --> 00:19:45,406
just like top and bottom.


535
00:19:45,536 --> 00:19:47,536
So if we align the text on its


536
00:19:47,616 --> 00:19:51,006
baseline, it solves the problem


537
00:19:51,566 --> 00:19:51,736
neatly.


538
00:19:52,516 --> 00:19:56,736
[ Applause ]


539
00:19:57,236 --> 00:19:58,766
But what about the image?


540
00:19:59,516 --> 00:20:01,346
See the image has no text in it


541
00:20:01,826 --> 00:20:03,516
but every alignment has a


542
00:20:03,516 --> 00:20:05,696
default value and the default


543
00:20:05,746 --> 00:20:08,036
value for last text baseline is


544
00:20:08,036 --> 00:20:09,916
just the bottom edge of the


545
00:20:09,916 --> 00:20:11,986
view, so that gets me exactly


546
00:20:11,986 --> 00:20:13,196
what I'm thinking Crusty will


547
00:20:13,196 --> 00:20:13,746
ask me for.


548
00:20:15,566 --> 00:20:19,716
Oh. Oh. Looking again, I'm


549
00:20:19,716 --> 00:20:21,806
pretty sure-- I got a bad


550
00:20:21,806 --> 00:20:22,856
feeling about this-- I'm pretty


551
00:20:22,856 --> 00:20:23,896
sure he's going to tell me


552
00:20:24,176 --> 00:20:26,136
there's a visual baseline that's


553
00:20:26,136 --> 00:20:29,076
up here, 87.4% of the way to the


554
00:20:29,076 --> 00:20:29,376
bottom.


555
00:20:30,016 --> 00:20:31,366
[Laughter]


556
00:20:31,366 --> 00:20:33,346
We can handle that by telling


557
00:20:33,346 --> 00:20:36,796
SwiftUI how to compute a last


558
00:20:36,796 --> 00:20:40,196
text baseline for the image in


559
00:20:40,196 --> 00:20:41,766
terms of its other alignments.


560
00:20:41,906 --> 00:20:42,936
Pretty cool, right?


561
00:20:43,516 --> 00:20:48,306
[ Applause ]


562
00:20:48,806 --> 00:20:49,906
But we're not done with the


563
00:20:49,906 --> 00:20:51,456
power of alignments yet.


564
00:20:52,106 --> 00:20:53,336
Let's go back to our nested


565
00:20:53,336 --> 00:20:54,216
stack example.


566
00:20:55,766 --> 00:20:57,806
Suppose we wanted to align the


567
00:20:57,806 --> 00:21:00,136
center of these stars and the


568
00:21:00,136 --> 00:21:01,566
title, like this.


569
00:21:05,416 --> 00:21:07,506
Now remember the text in


570
00:21:07,506 --> 00:21:09,786
question is nested in two


571
00:21:09,926 --> 00:21:11,936
different branches of the view


572
00:21:11,936 --> 00:21:12,496
hierarchy.


573
00:21:14,516 --> 00:21:17,266
So, well center aligning the


574
00:21:17,666 --> 00:21:19,046
children of that top level


575
00:21:19,046 --> 00:21:20,166
HStack isn't going to cut it


576
00:21:20,686 --> 00:21:23,396
because that's the default,


577
00:21:23,806 --> 00:21:24,046
right?


578
00:21:24,046 --> 00:21:25,716
And so we're already there.


579
00:21:25,716 --> 00:21:26,736
You can see those children are


580
00:21:26,736 --> 00:21:27,506
already aligned.


581
00:21:28,236 --> 00:21:30,706
Now what we need is an alignment


582
00:21:31,216 --> 00:21:33,626
other than center that marks the


583
00:21:33,626 --> 00:21:36,396
middle of these stars and of the


584
00:21:36,396 --> 00:21:36,776
title.


585
00:21:38,336 --> 00:21:39,806
We need to define our own


586
00:21:39,806 --> 00:21:42,506
alignment which is actually this


587
00:21:42,506 --> 00:21:42,836
easy.


588
00:21:43,526 --> 00:21:45,466
It's just six lines that we put


589
00:21:45,466 --> 00:21:47,086
in an extension on vertical


590
00:21:47,086 --> 00:21:47,706
alignment.


591
00:21:49,606 --> 00:21:52,256
So first we define an enum


592
00:21:52,896 --> 00:21:55,366
conforming to alignment ID which


593
00:21:55,366 --> 00:21:58,076
has one requirement, tell


594
00:21:58,076 --> 00:22:00,076
SwiftUI how to compute the


595
00:22:00,076 --> 00:22:00,846
default value.


596
00:22:03,746 --> 00:22:06,046
Now, it doesn't really matter


597
00:22:06,046 --> 00:22:07,976
what we choose here in this case


598
00:22:08,046 --> 00:22:09,936
because defaults aren't going to


599
00:22:09,936 --> 00:22:10,976
project out of those inner


600
00:22:10,976 --> 00:22:11,576
stacks.


601
00:22:12,126 --> 00:22:14,436
But I defined this default to be


602
00:22:14,496 --> 00:22:16,116
bottom just so that you could


603
00:22:16,116 --> 00:22:18,836
see that it's just like defining


604
00:22:18,926 --> 00:22:23,176
an alignment guide modifier.


605
00:22:24,016 --> 00:22:26,356
And last of all, we define a


606
00:22:26,356 --> 00:22:28,196
static instance of vertical


607
00:22:28,196 --> 00:22:31,096
alignment that takes the enum


608
00:22:31,096 --> 00:22:32,626
type as its argument.


609
00:22:35,156 --> 00:22:37,426
And now we can use it to align


610
00:22:37,576 --> 00:22:41,546
the stack, explicitly setting it


611
00:22:41,676 --> 00:22:43,256
to the center of the stars and


612
00:22:43,766 --> 00:22:45,496
of the title.


613
00:22:48,776 --> 00:22:50,266
Now the explicit alignment


614
00:22:50,266 --> 00:22:52,366
values we've set, they project


615
00:22:52,366 --> 00:22:53,726
all the way out through two


616
00:22:53,726 --> 00:22:56,196
layers of nested stack allowing


617
00:22:56,386 --> 00:22:58,056
the outer HStack to align those


618
00:22:58,056 --> 00:22:58,756
inner parts.


619
00:23:00,016 --> 00:23:00,976
So that's custom alignments.


620
00:23:01,516 --> 00:23:07,296
[ Applause ]


621
00:23:07,796 --> 00:23:09,626
A power tool that will help you


622
00:23:09,626 --> 00:23:11,066
satisfy even the most


623
00:23:11,116 --> 00:23:12,466
persnickety UI designer.


624
00:23:13,496 --> 00:23:15,506
Now, I'd like to invite John


625
00:23:15,506 --> 00:23:17,226
Harper to the stage to tell you


626
00:23:17,446 --> 00:23:18,826
about graphical effects in


627
00:23:18,826 --> 00:23:19,286
SwiftUI.


628
00:23:19,286 --> 00:23:19,536
John.


629
00:23:20,516 --> 00:23:25,556
[ Applause ]


630
00:23:26,056 --> 00:23:27,536
>> Thanks Dave.


631
00:23:27,596 --> 00:23:28,856
So yeah I'm going to talk about,


632
00:23:28,856 --> 00:23:30,566
describe some of the graphics


633
00:23:30,566 --> 00:23:32,196
features of SwiftUI and how you


634
00:23:32,196 --> 00:23:33,156
can use them to create


635
00:23:33,156 --> 00:23:35,786
interactive controls in your


636
00:23:35,786 --> 00:23:36,306
applications.


637
00:23:36,866 --> 00:23:39,396
So here's an example of the kind


638
00:23:39,396 --> 00:23:40,646
of thing we'd like to create


639
00:23:40,646 --> 00:23:41,046
potentially.


640
00:23:41,046 --> 00:23:42,616
You know you've seen this before


641
00:23:42,616 --> 00:23:45,126
but, you know, it's several


642
00:23:45,126 --> 00:23:46,346
normal controls but then in the


643
00:23:46,346 --> 00:23:48,526
center there's this big kind of


644
00:23:48,526 --> 00:23:50,386
graphical ring with a gradient


645
00:23:50,386 --> 00:23:51,656
around it and at the bottom


646
00:23:51,656 --> 00:23:52,366
there's a bar chart.


647
00:23:52,486 --> 00:23:53,836
And so you know if you wanted to


648
00:23:53,836 --> 00:23:56,156
do this in your apps you'd have


649
00:23:56,186 --> 00:23:57,506
to dive into the graphics system


650
00:23:57,506 --> 00:23:58,036
to some degree.


651
00:23:58,036 --> 00:23:59,556
You know core animation or core


652
00:23:59,556 --> 00:24:00,096
graphics.


653
00:24:00,556 --> 00:24:03,246
And so we think we've got a good


654
00:24:03,246 --> 00:24:04,356
way to do things like this in


655
00:24:04,866 --> 00:24:07,876
SwiftUI and so we're going to


656
00:24:07,876 --> 00:24:09,176
look at a little example.


657
00:24:09,366 --> 00:24:10,246
But before we can do anything


658
00:24:10,246 --> 00:24:11,636
complex we need to cover the


659
00:24:11,636 --> 00:24:12,186
basics.


660
00:24:12,576 --> 00:24:14,016
So if we wanted to draw a red


661
00:24:14,016 --> 00:24:15,476
circle, how would we do that?


662
00:24:15,476 --> 00:24:16,776
Well we'd first of all we'd


663
00:24:16,776 --> 00:24:17,786
create a custom view type


664
00:24:18,066 --> 00:24:19,176
because you know everything is a


665
00:24:19,176 --> 00:24:19,486
view.


666
00:24:20,296 --> 00:24:21,646
And then we'd put something like


667
00:24:21,646 --> 00:24:22,106
this in there.


668
00:24:22,106 --> 00:24:23,906
And here we're saying if you


669
00:24:23,906 --> 00:24:25,696
give me a shape and the color we


670
00:24:25,696 --> 00:24:27,206
can fill it with-- fill those


671
00:24:27,336 --> 00:24:28,886
two things together and get, you


672
00:24:28,916 --> 00:24:29,796
know, a red circle on the


673
00:24:29,796 --> 00:24:30,146
screen.


674
00:24:30,706 --> 00:24:32,386
But there's something really


675
00:24:32,386 --> 00:24:33,566
interesting here which is that


676
00:24:33,606 --> 00:24:34,856
we didn't give it a positional


677
00:24:34,856 --> 00:24:37,206
size and that's because we're


678
00:24:37,206 --> 00:24:38,426
relying on the layout system,


679
00:24:38,426 --> 00:24:39,626
all that stuff Dave described,


680
00:24:39,946 --> 00:24:41,276
to kind of position our views


681
00:24:41,276 --> 00:24:42,476
for us even though we're in this


682
00:24:42,526 --> 00:24:43,816
drawing model.


683
00:24:44,506 --> 00:24:47,896
And so, you know, shapes will


684
00:24:47,896 --> 00:24:49,146
just kind of react to the layout


685
00:24:49,146 --> 00:24:51,226
system and produce views.


686
00:24:51,226 --> 00:24:52,436
And in fact, you know now that


687
00:24:52,436 --> 00:24:54,096
our draw views, if you think of


688
00:24:54,096 --> 00:24:55,006
them that way are really just


689
00:24:55,036 --> 00:24:56,646
views, then that really means


690
00:24:56,676 --> 00:24:57,716
that everything in SwiftUI


691
00:24:57,716 --> 00:24:59,556
applies to drawing because


692
00:24:59,556 --> 00:25:01,016
everything in SwiftUI is views.


693
00:25:01,366 --> 00:25:02,546
And so all the modifiers you've


694
00:25:02,546 --> 00:25:04,296
seen about layout and animation,


695
00:25:04,796 --> 00:25:06,406
filter effects-- you know, just


696
00:25:06,406 --> 00:25:07,846
everything-- it all applies to


697
00:25:07,846 --> 00:25:08,706
drawing in the same way it


698
00:25:08,706 --> 00:25:09,606
applies to views.


699
00:25:10,006 --> 00:25:11,196
But similarly we've added a lot


700
00:25:11,196 --> 00:25:13,886
of kind of new custom modifiers


701
00:25:14,156 --> 00:25:15,086
purely for graphics.


702
00:25:15,296 --> 00:25:16,766
Things like blurs and shadows.


703
00:25:17,536 --> 00:25:18,776
But because drawing is just


704
00:25:18,776 --> 00:25:21,026
views, they all apply to regular


705
00:25:21,026 --> 00:25:22,196
views as well as the graphics


706
00:25:22,196 --> 00:25:22,526
views.


707
00:25:23,286 --> 00:25:24,816
And so we think this unification


708
00:25:24,816 --> 00:25:26,486
of kind of normal control like


709
00:25:26,486 --> 00:25:27,856
views and graphics is going to


710
00:25:27,856 --> 00:25:29,566
be incredibly powerful as we go


711
00:25:29,566 --> 00:25:30,006
forwards.


712
00:25:30,596 --> 00:25:32,526
Okay but let's look at this a


713
00:25:32,526 --> 00:25:33,686
little more.


714
00:25:34,296 --> 00:25:35,916
So the basic pattern is that we


715
00:25:35,916 --> 00:25:38,426
have a shape and a style-- kind


716
00:25:38,476 --> 00:25:40,126
of a color or something-- and


717
00:25:40,126 --> 00:25:41,076
the combination of those two


718
00:25:41,076 --> 00:25:42,216
things produces a view.


719
00:25:42,976 --> 00:25:44,176
As we have a few shapes here and


720
00:25:44,286 --> 00:25:47,536
as we saw I can fill with red


721
00:25:47,536 --> 00:25:48,426
and get a red circle.


722
00:25:49,426 --> 00:25:50,316
But also we could use a


723
00:25:50,316 --> 00:25:51,936
different operation and say a


724
00:25:51,936 --> 00:25:52,686
different shape-- you know a


725
00:25:52,686 --> 00:25:54,606
capsule-- and say stroke it with


726
00:25:54,606 --> 00:25:54,906
red.


727
00:25:55,586 --> 00:25:56,776
And in that case we won't get a


728
00:25:56,776 --> 00:25:58,186
filled shape, we'll get a filled


729
00:25:58,186 --> 00:25:59,036
outline of the shape.


730
00:25:59,576 --> 00:26:02,226
And that's often what we want,


731
00:26:02,336 --> 00:26:03,776
but you know sometimes we find


732
00:26:03,776 --> 00:26:04,756
we might want a slightly


733
00:26:04,756 --> 00:26:06,526
different kind of stroke, so we


734
00:26:06,526 --> 00:26:08,086
could also say stroke the border


735
00:26:08,086 --> 00:26:09,316
of the shape rather than the


736
00:26:09,316 --> 00:26:10,236
kind of on the shape.


737
00:26:10,306 --> 00:26:11,676
And that's just a variant.


738
00:26:11,676 --> 00:26:14,266
And this is also showing that,


739
00:26:14,266 --> 00:26:15,566
you know, all of these stroke


740
00:26:15,566 --> 00:26:17,156
operations all can either just


741
00:26:17,156 --> 00:26:18,076
take a line width as in the


742
00:26:18,076 --> 00:26:20,836
first example, or effectively


743
00:26:20,836 --> 00:26:21,706
all of the standard stroking


744
00:26:21,706 --> 00:26:23,286
parameters like dashes and end


745
00:26:23,286 --> 00:26:24,636
caps and the line joints, that


746
00:26:25,016 --> 00:26:25,856
you've probably seen in other


747
00:26:25,856 --> 00:26:26,766
graphs APIs.


748
00:26:28,556 --> 00:26:29,736
Okay so we've seen the shapes


749
00:26:29,736 --> 00:26:30,926
and we've seen filling them.


750
00:26:31,626 --> 00:26:32,586
But to this point we've only


751
00:26:32,586 --> 00:26:33,396
been using colors.


752
00:26:34,156 --> 00:26:34,876
But there are actually other


753
00:26:34,876 --> 00:26:36,556
things we can use to fill shapes


754
00:26:36,556 --> 00:26:36,756
with.


755
00:26:37,286 --> 00:26:37,976
You know we can use tiled images


756
00:26:37,976 --> 00:26:40,066
images and we can use various


757
00:26:40,066 --> 00:26:41,766
kinds of gradients to kind of


758
00:26:42,136 --> 00:26:43,626
fill the shape with.


759
00:26:44,636 --> 00:26:46,236
So here's an example of using a


760
00:26:46,236 --> 00:26:48,686
gradient and all of the gradient


761
00:26:48,686 --> 00:26:50,616
styles all use this base kind of


762
00:26:50,886 --> 00:26:52,886
type which is just providing the


763
00:26:52,886 --> 00:26:53,966
one dimensional color ramp.


764
00:26:54,446 --> 00:26:56,076
And in this case we've given it


765
00:26:56,076 --> 00:26:56,776
seven colors.


766
00:26:56,776 --> 00:26:58,106
It'll equally space them along


767
00:26:58,106 --> 00:26:59,726
the continuum and that just


768
00:26:59,726 --> 00:27:00,616
gives us our ramp.


769
00:27:01,286 --> 00:27:03,046
Once we have that, we can pick


770
00:27:03,046 --> 00:27:04,256
one of those gradient styles.


771
00:27:04,316 --> 00:27:05,336
You know, in this case we're


772
00:27:05,336 --> 00:27:06,076
going to use an angular


773
00:27:06,076 --> 00:27:06,536
gradient.


774
00:27:07,276 --> 00:27:08,786
We give it the color ramp and


775
00:27:08,786 --> 00:27:09,956
then we, in this case, for the


776
00:27:09,956 --> 00:27:11,176
angular gradient we give it the


777
00:27:11,176 --> 00:27:12,936
center point and a starting


778
00:27:12,936 --> 00:27:13,306
angle.


779
00:27:13,346 --> 00:27:14,716
And then it can just fill the


780
00:27:14,716 --> 00:27:15,826
colors around that circle


781
00:27:16,176 --> 00:27:18,216
effectively pushing them to


782
00:27:18,216 --> 00:27:21,626
infinity to give us our kind of


783
00:27:21,936 --> 00:27:22,626
color fill.


784
00:27:22,926 --> 00:27:24,276
But obviously then we can take


785
00:27:24,346 --> 00:27:26,496
the style we just made and apply


786
00:27:26,496 --> 00:27:28,176
it to a circle, in this case


787
00:27:28,176 --> 00:27:29,636
doing a fill as we saw before.


788
00:27:29,636 --> 00:27:30,526
And now we've got, instead of a


789
00:27:30,526 --> 00:27:31,746
red circle we've got this nice


790
00:27:31,746 --> 00:27:32,386
kind of color wheel.


791
00:27:33,406 --> 00:27:34,816
But of course filling is just


792
00:27:34,816 --> 00:27:36,546
one of our operations so we


793
00:27:36,546 --> 00:27:37,876
could equally have just said


794
00:27:37,876 --> 00:27:39,036
stroke border and got a filled


795
00:27:39,036 --> 00:27:39,356
ring.


796
00:27:40,516 --> 00:27:47,236
[ Applause ]


797
00:27:47,736 --> 00:27:49,646
Okay so that's the basics and


798
00:27:49,646 --> 00:27:50,936
we've seen drawing individual


799
00:27:50,936 --> 00:27:52,816
things, but now we want to go on


800
00:27:52,816 --> 00:27:53,656
and build something a little


801
00:27:53,656 --> 00:27:54,926
more complex out of multiple


802
00:27:55,046 --> 00:27:56,106
drawing operations, multiple


803
00:27:56,106 --> 00:27:56,316
views.


804
00:27:56,316 --> 00:27:58,036
And so this is the example we're


805
00:27:58,036 --> 00:27:59,346
going to use for the rest of the


806
00:27:59,346 --> 00:27:59,816
session.


807
00:27:59,816 --> 00:28:01,346
It's actually a sample code you


808
00:28:01,346 --> 00:28:03,246
can download and it's just kind


809
00:28:03,246 --> 00:28:04,986
of an interactive pie chart kind


810
00:28:04,986 --> 00:28:06,826
of thing and it's made up of a


811
00:28:06,826 --> 00:28:08,276
bunch of color wedges where you


812
00:28:08,276 --> 00:28:09,406
can add them and remove them.


813
00:28:09,406 --> 00:28:10,656
They can animate in and out.


814
00:28:12,276 --> 00:28:15,266
Okay, so before we can figure


815
00:28:15,266 --> 00:28:16,276
out how to draw it, we need to


816
00:28:16,276 --> 00:28:16,956
look at the data.


817
00:28:17,566 --> 00:28:18,726
And so our sample app is


818
00:28:18,726 --> 00:28:21,116
providing us a data model and


819
00:28:21,286 --> 00:28:22,676
it's very simple.


820
00:28:22,676 --> 00:28:24,076
It's just a clasp representing


821
00:28:24,076 --> 00:28:25,106
one of these kind of wedge--


822
00:28:25,206 --> 00:28:26,106
ring of wedge things.


823
00:28:26,736 --> 00:28:27,976
And each wedge is a few


824
00:28:28,326 --> 00:28:29,666
properties representing the


825
00:28:29,706 --> 00:28:31,006
geometry and the color of the


826
00:28:31,456 --> 00:28:32,046
view.


827
00:28:32,356 --> 00:28:33,406
And then we've got a dictionary


828
00:28:33,406 --> 00:28:35,876
of the wedges tracked by ID and


829
00:28:35,876 --> 00:28:38,166
then finally an array of the IDs


830
00:28:38,166 --> 00:28:39,096
just so we know which order to


831
00:28:39,096 --> 00:28:39,566
draw them in.


832
00:28:40,376 --> 00:28:41,406
And so we can go on and think


833
00:28:41,406 --> 00:28:42,156
about how we're going to draw


834
00:28:42,156 --> 00:28:42,506
this now.


835
00:28:44,676 --> 00:28:46,726
Just as we saw before, we really


836
00:28:46,726 --> 00:28:47,596
want this to interact with the


837
00:28:47,596 --> 00:28:49,566
layout system so we're going to


838
00:28:49,566 --> 00:28:50,956
assume that there's a layout


839
00:28:50,956 --> 00:28:52,706
bounds for the entire control.


840
00:28:53,386 --> 00:28:54,706
You know because we want it to


841
00:28:54,706 --> 00:28:56,146
resize and move around as


842
00:28:56,146 --> 00:28:56,656
expected.


843
00:28:57,336 --> 00:28:59,056
And if you think about how this


844
00:28:59,056 --> 00:29:00,576
will work, you know, we can draw


845
00:29:00,576 --> 00:29:01,986
each of these colored things


846
00:29:01,986 --> 00:29:02,586
separately.


847
00:29:02,926 --> 00:29:03,996
And as long as they all fit


848
00:29:03,996 --> 00:29:05,416
within that same layout bounds,


849
00:29:05,416 --> 00:29:06,296
we can then composite them


850
00:29:06,296 --> 00:29:08,436
together and they'll all align


851
00:29:08,436 --> 00:29:08,956
seamlessly.


852
00:29:09,826 --> 00:29:11,336
So that really means we can just


853
00:29:11,336 --> 00:29:12,236
think about one of these.


854
00:29:13,556 --> 00:29:14,856
And so, you know, we've seen


855
00:29:14,856 --> 00:29:15,726
things like this before.


856
00:29:15,726 --> 00:29:17,266
It's really some shape filled


857
00:29:17,266 --> 00:29:17,966
with some gradient.


858
00:29:18,886 --> 00:29:20,076
In this case, a shape kind of


859
00:29:20,076 --> 00:29:20,596
like this.


860
00:29:21,386 --> 00:29:22,626
But we don't actually have this


861
00:29:22,626 --> 00:29:24,436
shape in the toolkit of the


862
00:29:24,636 --> 00:29:25,876
built in shapes in SwiftUI, but


863
00:29:26,456 --> 00:29:27,586
that's not a problem.


864
00:29:27,586 --> 00:29:28,966
We can go on and define a custom


865
00:29:28,966 --> 00:29:29,546
shape for this.


866
00:29:31,046 --> 00:29:33,216
So custom shapes are really like


867
00:29:33,216 --> 00:29:35,146
custom views in that they're,


868
00:29:35,246 --> 00:29:36,446
you know, types conforming to a


869
00:29:36,446 --> 00:29:36,886
protocol.


870
00:29:37,396 --> 00:29:38,346
Except in this case we're not


871
00:29:38,346 --> 00:29:39,706
conforming to a view protocol,


872
00:29:39,706 --> 00:29:41,066
we're using the shape protocol.


873
00:29:41,586 --> 00:29:43,086
And the shape protocol has a


874
00:29:43,086 --> 00:29:44,696
single requirement which is this


875
00:29:44,736 --> 00:29:45,836
path and rect function.


876
00:29:46,396 --> 00:29:47,916
And the rect you see here is the


877
00:29:47,916 --> 00:29:49,586
layout bounds or the frame of


878
00:29:49,586 --> 00:29:50,246
reference I guess.


879
00:29:50,246 --> 00:29:51,876
And then it's returning


880
00:29:51,876 --> 00:29:52,236
bézier path.


881
00:29:53,116 --> 00:29:55,976
So for our custom shape we'll


882
00:29:56,036 --> 00:29:57,146
give it a single property which


883
00:29:57,146 --> 00:29:58,306
is the wedge description, the


884
00:29:58,306 --> 00:29:59,416
thing containing the geometry.


885
00:30:00,116 --> 00:30:01,156
And then additionally we'll just


886
00:30:01,156 --> 00:30:02,326
create an empty path because


887
00:30:02,326 --> 00:30:03,236
we're going to put some things


888
00:30:03,236 --> 00:30:04,116
in that and then return it


889
00:30:04,116 --> 00:30:04,366
later.


890
00:30:05,526 --> 00:30:07,256
Just to kind of simplify this a


891
00:30:07,256 --> 00:30:09,756
little bit, I would also use a


892
00:30:09,756 --> 00:30:10,596
helper tiles which


893
00:30:10,676 --> 00:30:11,916
effectively abstracts some of


894
00:30:11,916 --> 00:30:14,016
the geometry of the shape we're


895
00:30:14,016 --> 00:30:15,326
drawing just to kind of hide the


896
00:30:15,326 --> 00:30:16,656
sines and cosines because, you


897
00:30:16,656 --> 00:30:18,976
know, this is circles and things


898
00:30:18,976 --> 00:30:19,316
like that.


899
00:30:19,316 --> 00:30:20,776
But this is really just defining


900
00:30:20,776 --> 00:30:22,926
some variables, you know, that


901
00:30:22,926 --> 00:30:24,266
we can then use in the rest of


902
00:30:24,266 --> 00:30:25,096
this function.


903
00:30:25,706 --> 00:30:28,216
So first of all we'll add the--


904
00:30:28,216 --> 00:30:29,226
one of the inner arcs.


905
00:30:30,276 --> 00:30:31,846
Then we can add a line to the


906
00:30:31,846 --> 00:30:33,716
path joining the inner and outer


907
00:30:33,716 --> 00:30:33,976
rings.


908
00:30:35,046 --> 00:30:36,176
And then another arc to kind of


909
00:30:36,176 --> 00:30:37,466
wind back around the circle.


910
00:30:38,306 --> 00:30:39,426
And finally we can just tell the


911
00:30:39,426 --> 00:30:40,806
path, hey close this current sub


912
00:30:40,806 --> 00:30:43,306
path which will join the last


913
00:30:43,306 --> 00:30:44,586
point to the start point, and


914
00:30:44,776 --> 00:30:45,486
we've got our shape.


915
00:30:45,486 --> 00:30:46,506
Excuse me.


916
00:30:47,476 --> 00:30:48,816
So now we can go on and actually


917
00:30:48,816 --> 00:30:49,516
draw this shape.


918
00:30:50,046 --> 00:30:50,626
We could fill it with our


919
00:30:50,626 --> 00:30:53,536
gradient and that's most of the


920
00:30:53,536 --> 00:30:53,996
way there.


921
00:30:54,786 --> 00:30:55,786
There is one thing we still need


922
00:30:55,786 --> 00:30:56,176
to do though.


923
00:30:56,756 --> 00:30:58,046
We saw in the movie that we'd


924
00:30:58,046 --> 00:30:59,256
like the shapes to animate.


925
00:30:59,256 --> 00:31:01,576
And if we just use this shape as


926
00:31:01,576 --> 00:31:03,376
it is, there is no way that


927
00:31:03,406 --> 00:31:04,936
SwiftUI can animate this because


928
00:31:05,016 --> 00:31:06,256
it doesn't know enough about the


929
00:31:06,336 --> 00:31:06,736
types.


930
00:31:07,396 --> 00:31:08,616
And so we can go on and add one


931
00:31:08,616 --> 00:31:10,666
extra property to our custom


932
00:31:10,666 --> 00:31:12,836
shape called animatable data and


933
00:31:12,836 --> 00:31:14,526
this is really providing a


934
00:31:14,526 --> 00:31:16,146
vector of floating point numbers


935
00:31:16,806 --> 00:31:18,996
that the system is able to


936
00:31:19,846 --> 00:31:20,226
interpolate.


937
00:31:20,226 --> 00:31:22,116
In this case we're going to


938
00:31:22,116 --> 00:31:23,386
delegate the responsibility for


939
00:31:23,386 --> 00:31:24,946
this to data model because it's


940
00:31:24,946 --> 00:31:27,056
implemented this property for


941
00:31:27,056 --> 00:31:27,246
us.


942
00:31:27,726 --> 00:31:28,946
But really it's very simple.


943
00:31:28,946 --> 00:31:31,336
It's taking the three properties


944
00:31:31,336 --> 00:31:32,966
and the wedge description and


945
00:31:32,966 --> 00:31:34,066
then combining them into one


946
00:31:34,066 --> 00:31:35,346
value that can be interpolated.


947
00:31:36,956 --> 00:31:38,926
Okay so now our shape really is


948
00:31:38,926 --> 00:31:40,166
complete, we can go up and draw


949
00:31:40,166 --> 00:31:40,266
it.


950
00:31:41,206 --> 00:31:42,036
And so we can get back to


951
00:31:42,036 --> 00:31:43,376
thinking about how we layer


952
00:31:43,376 --> 00:31:44,386
together our diagram.


953
00:31:45,986 --> 00:31:47,576
So as we saw we can get a


954
00:31:47,576 --> 00:31:48,946
gradient, an angular


955
00:31:48,946 --> 00:31:50,646
gradient again and just fill our


956
00:31:50,646 --> 00:31:50,916
shape.


957
00:31:50,946 --> 00:31:52,936
But that's one of them.


958
00:31:52,936 --> 00:31:53,976
We really want, you know, eight


959
00:31:53,976 --> 00:31:54,526
of these things.


960
00:31:55,696 --> 00:31:57,036
And composite them together.


961
00:31:57,286 --> 00:31:58,246
And so we can do that with


962
00:31:58,316 --> 00:32:01,506
something called a Zstack which


963
00:32:01,506 --> 00:32:02,706
is very similar to the H and


964
00:32:02,706 --> 00:32:03,896
Vstacks Dave was talking about


965
00:32:03,896 --> 00:32:05,146
but it layers things together


966
00:32:05,146 --> 00:32:06,756
kind of depth-wise versus


967
00:32:07,116 --> 00:32:07,756
spatially.


968
00:32:08,656 --> 00:32:09,846
So we'll create another custom


969
00:32:09,846 --> 00:32:12,486
view and this time our view will


970
00:32:12,596 --> 00:32:13,776
grab the data model via the


971
00:32:13,806 --> 00:32:14,366
environment.


972
00:32:14,366 --> 00:32:15,356
We've set that up somewhere


973
00:32:15,356 --> 00:32:15,606
else.


974
00:32:16,326 --> 00:32:17,516
And we'll start off by creating


975
00:32:17,516 --> 00:32:17,966
the Zstack.


976
00:32:18,966 --> 00:32:20,266
Now we saw on our data model


977
00:32:20,266 --> 00:32:22,586
that the, you know, it's giving


978
00:32:22,586 --> 00:32:23,656
this array of wedge IDs.


979
00:32:23,656 --> 00:32:26,976
And so we can use that with the


980
00:32:27,046 --> 00:32:28,986
ForEach view in SwiftUI.


981
00:32:28,986 --> 00:32:31,186
And really what that's doing is


982
00:32:31,776 --> 00:32:33,926
mapping over that array of IDs


983
00:32:34,326 --> 00:32:35,626
and effectively creating one


984
00:32:35,626 --> 00:32:37,166
view for each wedge we want to


985
00:32:37,166 --> 00:32:37,456
create.


986
00:32:38,296 --> 00:32:39,416
And so this wedge view thing is


987
00:32:39,416 --> 00:32:40,216
very simple.


988
00:32:40,216 --> 00:32:42,506
It's really just a single


989
00:32:43,396 --> 00:32:44,846
statement view that, you know,


990
00:32:44,846 --> 00:32:46,096
creates the custom shape, fills


991
00:32:46,096 --> 00:32:46,756
it with a gradient.


992
00:32:47,436 --> 00:32:49,976
Okay so this is fairly complete


993
00:32:50,586 --> 00:32:50,866
now.


994
00:32:50,866 --> 00:32:52,146
You know, because of how SwiftUI


995
00:32:52,146 --> 00:32:53,776
tracks dependencies, when our


996
00:32:53,776 --> 00:32:55,176
data model updates the view will


997
00:32:55,176 --> 00:32:56,716
update, you know, because Zstack


998
00:32:57,186 --> 00:32:58,436
handles insertion and removal


999
00:32:58,436 --> 00:32:59,126
transitions.


1000
00:32:59,366 --> 00:33:01,166
They will fade in and out


1001
00:33:01,166 --> 00:33:02,856
cleanly and that's pretty good


1002
00:33:02,856 --> 00:33:04,616
for an application like this.


1003
00:33:04,616 --> 00:33:05,766
But there are a few more things


1004
00:33:05,766 --> 00:33:06,636
we can go on and do now.


1005
00:33:07,086 --> 00:33:08,396
You know we saw in the movie


1006
00:33:08,396 --> 00:33:10,286
that we'd like the wedges to be


1007
00:33:10,286 --> 00:33:11,676
deleted when you tap on them.


1008
00:33:12,486 --> 00:33:14,056
So we can add something called a


1009
00:33:14,056 --> 00:33:15,646
tap action and this is kind of


1010
00:33:15,646 --> 00:33:16,686
like an event handler for the


1011
00:33:16,686 --> 00:33:18,306
view and it's really saying if


1012
00:33:18,306 --> 00:33:20,106
you tap inside this view's


1013
00:33:20,106 --> 00:33:21,696
shape, then run the closure.


1014
00:33:21,696 --> 00:33:23,256
And in our case the closure


1015
00:33:23,256 --> 00:33:25,946
we're going to use is enable


1016
00:33:25,946 --> 00:33:27,236
animations and then ask the data


1017
00:33:27,236 --> 00:33:28,996
model, hey remove this wedge ID.


1018
00:33:29,746 --> 00:33:30,756
So once we've done that we can


1019
00:33:30,756 --> 00:33:31,436
tap on the wedges.


1020
00:33:32,066 --> 00:33:33,926
Now there's one other final


1021
00:33:33,926 --> 00:33:34,796
thing we'd like to do here.


1022
00:33:35,206 --> 00:33:36,466
I said that the default


1023
00:33:36,466 --> 00:33:37,806
transition is a fade in fade out


1024
00:33:37,806 --> 00:33:39,316
effect and that's great for a


1025
00:33:39,316 --> 00:33:40,576
lot of things but in our case we


1026
00:33:40,576 --> 00:33:42,026
want something a little more fun


1027
00:33:42,226 --> 00:33:43,456
so we're going to scale the


1028
00:33:43,636 --> 00:33:44,856
wedges down towards the center


1029
00:33:44,856 --> 00:33:45,726
as well as fading them.


1030
00:33:46,536 --> 00:33:47,896
And we can do that by adding a


1031
00:33:47,896 --> 00:33:49,416
custom transition called scale


1032
00:33:49,416 --> 00:33:49,776
and fade.


1033
00:33:49,776 --> 00:33:51,096
And this is something we're


1034
00:33:51,096 --> 00:33:51,906
going to have to create for


1035
00:33:51,906 --> 00:33:52,316
ourselves.


1036
00:33:53,656 --> 00:33:55,586
Okay, so we think about what


1037
00:33:55,586 --> 00:33:56,926
this transition's going to do.


1038
00:33:57,326 --> 00:33:58,476
You know we want the-- when the


1039
00:33:58,476 --> 00:33:59,806
views are added, we want them to


1040
00:33:59,806 --> 00:34:01,476
start off scaled down and faded


1041
00:34:01,476 --> 00:34:03,496
out, and as they, you know, kind


1042
00:34:03,496 --> 00:34:04,746
of animate in, they'll come in,


1043
00:34:05,296 --> 00:34:06,566
scale up to the normal state.


1044
00:34:07,246 --> 00:34:07,956
While they're sitting in the


1045
00:34:07,956 --> 00:34:08,916
view hierarchy they'll just kind


1046
00:34:08,916 --> 00:34:10,926
of sit there and then finally


1047
00:34:10,926 --> 00:34:11,786
they'll reverse that transition


1048
00:34:11,786 --> 00:34:13,255
to kind of get removed.


1049
00:34:14,216 --> 00:34:15,616
And so if you think about that,


1050
00:34:15,786 --> 00:34:16,666
you know we don't need to define


1051
00:34:16,666 --> 00:34:17,735
all those frames obviously


1052
00:34:17,735 --> 00:34:19,096
because we have an animation


1053
00:34:19,096 --> 00:34:19,505
system.


1054
00:34:20,036 --> 00:34:21,636
And so we defined the end states


1055
00:34:21,636 --> 00:34:23,416
the animation system will take


1056
00:34:23,416 --> 00:34:24,096
care of the rest.


1057
00:34:24,976 --> 00:34:26,815
But of course in this case


1058
00:34:26,815 --> 00:34:28,646
there's actually a symmetric


1059
00:34:28,646 --> 00:34:30,386
transition here so we only


1060
00:34:30,386 --> 00:34:31,466
actually have two end states.


1061
00:34:31,686 --> 00:34:33,616
We have the transition kind of


1062
00:34:33,616 --> 00:34:36,746
set up and remove state and we


1063
00:34:36,746 --> 00:34:37,596
have the normal state where


1064
00:34:37,596 --> 00:34:39,516
nothing is really going on.


1065
00:34:40,235 --> 00:34:41,926
So now we know what states to


1066
00:34:41,926 --> 00:34:43,376
define we can define them in


1067
00:34:43,376 --> 00:34:43,646
code.


1068
00:34:43,646 --> 00:34:45,576
And the way we do that in


1069
00:34:45,576 --> 00:34:46,866
SwiftUI is with something called


1070
00:34:46,866 --> 00:34:47,606
a view modifier.


1071
00:34:48,176 --> 00:34:49,985
Now a view modifier is a little


1072
00:34:49,985 --> 00:34:51,076
bit like a view in that it's


1073
00:34:51,076 --> 00:34:52,235
defining some piece of the view


1074
00:34:52,235 --> 00:34:54,315
hierarchy but it's defining it


1075
00:34:54,315 --> 00:34:55,835
in, as a function of some other


1076
00:34:55,835 --> 00:34:56,196
view.


1077
00:34:56,896 --> 00:34:59,456
And that's what this thing is


1078
00:34:59,456 --> 00:34:59,886
representing.


1079
00:34:59,886 --> 00:35:01,756
You know it has a body method


1080
00:35:01,866 --> 00:35:02,876
just like the view has a body


1081
00:35:02,916 --> 00:35:03,416
property.


1082
00:35:03,956 --> 00:35:05,156
But in this case the body method


1083
00:35:05,156 --> 00:35:06,926
is a function of another view.


1084
00:35:06,926 --> 00:35:07,846
That's what the content


1085
00:35:07,846 --> 00:35:08,516
parameter is.


1086
00:35:09,176 --> 00:35:10,406
And so what we can do here is


1087
00:35:10,406 --> 00:35:12,526
apply this to any other view and


1088
00:35:12,526 --> 00:35:13,276
apply some changes.


1089
00:35:13,756 --> 00:35:15,476
And so in our case we want the


1090
00:35:15,476 --> 00:35:17,706
transition-- we have the two


1091
00:35:17,706 --> 00:35:18,656
transition states.


1092
00:35:18,656 --> 00:35:19,926
We'll give it a single Boolean


1093
00:35:19,926 --> 00:35:20,706
property saying is the


1094
00:35:20,706 --> 00:35:21,586
transition active.


1095
00:35:22,196 --> 00:35:23,546
And when the transition's active


1096
00:35:23,546 --> 00:35:25,126
we'll, you know, apply two


1097
00:35:25,346 --> 00:35:27,696
existing modifiers to kind of


1098
00:35:27,696 --> 00:35:29,816
change the incoming view to take


1099
00:35:29,856 --> 00:35:31,186
the effect of the transition.


1100
00:35:31,186 --> 00:35:32,816
That is, we'll, you know, we'll


1101
00:35:32,816 --> 00:35:34,476
scale it down and we'll fade it


1102
00:35:34,476 --> 00:35:37,226
out when the thing is set.


1103
00:35:38,066 --> 00:35:40,726
Okay so that's our transition


1104
00:35:40,726 --> 00:35:41,526
mostly defined.


1105
00:35:41,526 --> 00:35:43,806
We have one final step though.


1106
00:35:44,446 --> 00:35:46,256
We have the view modifier now


1107
00:35:46,256 --> 00:35:47,236
but we need to give the system


1108
00:35:47,236 --> 00:35:48,676
two values of the view modifier,


1109
00:35:48,676 --> 00:35:50,266
both the active and the inactive


1110
00:35:50,646 --> 00:35:53,526
values, so that SwiftUI can kind


1111
00:35:53,526 --> 00:35:54,996
of package that up as a single


1112
00:35:54,996 --> 00:35:56,866
transition and then as things


1113
00:35:56,866 --> 00:35:57,896
are added or removed, pick the


1114
00:35:57,896 --> 00:35:59,006
right value to apply at the


1115
00:35:59,006 --> 00:36:00,756
right time and then interpolate


1116
00:36:01,156 --> 00:36:02,466
between them during animations.


1117
00:36:03,686 --> 00:36:05,436
So that's the thing we can go on


1118
00:36:05,436 --> 00:36:05,916
and use.


1119
00:36:06,636 --> 00:36:07,726
So having done all that we can


1120
00:36:07,726 --> 00:36:09,256
now see what we've built as a


1121
00:36:09,256 --> 00:36:09,696
demo.


1122
00:36:11,536 --> 00:36:13,866
Okay, so here's the app you can


1123
00:36:13,866 --> 00:36:15,926
download, and I'll run it.


1124
00:36:16,206 --> 00:36:17,486
And hopefully-- yeah so we've


1125
00:36:17,486 --> 00:36:19,576
got our window here.


1126
00:36:20,096 --> 00:36:21,106
It's empty right now because the


1127
00:36:21,106 --> 00:36:22,906
data model is empty but I can


1128
00:36:22,906 --> 00:36:23,746
add things.


1129
00:36:24,176 --> 00:36:25,356
You can see they take on the


1130
00:36:25,356 --> 00:36:26,436
transition we just created.


1131
00:36:26,436 --> 00:36:27,446
They're kind of scaling up and


1132
00:36:27,936 --> 00:36:28,396
filling in.


1133
00:36:28,396 --> 00:36:31,176
The nice thing is, you know, we


1134
00:36:31,176 --> 00:36:32,736
can tap on them and remove the


1135
00:36:32,736 --> 00:36:33,106
items.


1136
00:36:33,636 --> 00:36:34,906
As you see as I remove something


1137
00:36:34,906 --> 00:36:35,836
from the middle it'll kind of


1138
00:36:35,936 --> 00:36:37,376
rotate around nicely because of


1139
00:36:37,376 --> 00:36:38,846
the way we defined the shapes.


1140
00:36:38,846 --> 00:36:40,566
And then I can turn on the kind


1141
00:36:40,566 --> 00:36:41,726
of background animation here.


1142
00:36:42,886 --> 00:36:44,466
And then, you know, we have kind


1143
00:36:44,466 --> 00:36:45,796
of a physics simulation running


1144
00:36:45,796 --> 00:36:46,116
on this.


1145
00:36:46,496 --> 00:36:47,686
And it's just effectively kind


1146
00:36:47,686 --> 00:36:49,066
of random walking through the


1147
00:36:49,066 --> 00:36:49,776
parameter space.


1148
00:36:50,296 --> 00:36:52,066
And this is, you know, it's a


1149
00:36:52,066 --> 00:36:52,676
nice little app.


1150
00:36:52,676 --> 00:36:54,216
And even while it's animating


1151
00:36:54,216 --> 00:36:55,376
it's obviously still all


1152
00:36:55,426 --> 00:36:57,436
interactive and, you know,


1153
00:36:57,516 --> 00:36:58,206
testing, it is working


1154
00:36:58,206 --> 00:36:58,556
correctly.


1155
00:36:59,216 --> 00:37:00,046
The interesting thing here


1156
00:37:00,046 --> 00:37:02,516
though is when you think about


1157
00:37:02,516 --> 00:37:03,466
how we're rendering this,


1158
00:37:03,986 --> 00:37:05,886
SwiftUI effectively creates a


1159
00:37:06,306 --> 00:37:07,766
native platform view such as a


1160
00:37:07,766 --> 00:37:08,996
UI viewer NSView for


1161
00:37:08,996 --> 00:37:10,716
every element that appears on


1162
00:37:10,716 --> 00:37:11,146
the screen.


1163
00:37:11,826 --> 00:37:13,046
And so that's the things like


1164
00:37:13,046 --> 00:37:13,606
the buttons.


1165
00:37:14,396 --> 00:37:15,486
And so typically that's exactly


1166
00:37:15,486 --> 00:37:17,076
what we want because, you know,


1167
00:37:17,076 --> 00:37:18,376
we are mostly dealing with


1168
00:37:18,376 --> 00:37:19,586
normal controls and things like


1169
00:37:19,586 --> 00:37:19,856
that.


1170
00:37:20,936 --> 00:37:22,806
But for things like this kind of


1171
00:37:22,806 --> 00:37:26,006
graphic display, you know this


1172
00:37:26,006 --> 00:37:27,386
is, if you were drawing this in


1173
00:37:27,646 --> 00:37:29,486
UIkit or AppKit this is probably


1174
00:37:29,486 --> 00:37:30,116
not what you would do.


1175
00:37:30,116 --> 00:37:31,816
You probably would not create a


1176
00:37:31,816 --> 00:37:33,326
single NSView for every one of


1177
00:37:33,326 --> 00:37:33,686
these things.


1178
00:37:33,686 --> 00:37:35,786
And the reason being that once


1179
00:37:35,786 --> 00:37:36,876
you start creating lots of them,


1180
00:37:37,496 --> 00:37:38,436
you know, the performance isn't


1181
00:37:38,546 --> 00:37:39,296
quite what you'd like.


1182
00:37:39,296 --> 00:37:40,806
And that's really not a problem


1183
00:37:40,806 --> 00:37:41,646
because, you know, we're not


1184
00:37:41,646 --> 00:37:42,806
supposed to use NSView in this


1185
00:37:42,806 --> 00:37:42,976
way.


1186
00:37:44,126 --> 00:37:45,506
So we have a solution for that


1187
00:37:45,506 --> 00:37:47,976
in SwiftUI and that is we can


1188
00:37:47,976 --> 00:37:49,016
effectively put everything in


1189
00:37:49,016 --> 00:37:51,326
the ZStack here-- whoops--


1190
00:37:51,946 --> 00:37:52,746
inside something called a


1191
00:37:52,746 --> 00:37:53,286
drawing group.


1192
00:37:54,256 --> 00:37:55,516
And a drawing group is a special


1193
00:37:55,516 --> 00:37:57,366
way of rendering but only for


1194
00:37:57,366 --> 00:37:58,246
things like graphics.


1195
00:37:58,536 --> 00:37:59,766
So you know shapes and text and


1196
00:37:59,766 --> 00:38:00,816
images, things like that.


1197
00:38:00,966 --> 00:38:02,246
And when we do that we'll


1198
00:38:02,246 --> 00:38:04,216
actually flatten all of the


1199
00:38:04,216 --> 00:38:05,946
SwiftUI views into a single


1200
00:38:05,946 --> 00:38:08,366
NSViewer UI view ad render them


1201
00:38:08,366 --> 00:38:08,826
with metal.


1202
00:38:09,516 --> 00:38:10,846
And so when I start doing this,


1203
00:38:10,846 --> 00:38:11,916
you can see it acts exactly the


1204
00:38:11,916 --> 00:38:12,936
same because, you know, it's not


1205
00:38:12,936 --> 00:38:14,686
a behavioral change.


1206
00:38:14,996 --> 00:38:16,666
But once I start ramping up the


1207
00:38:16,666 --> 00:38:18,156
numbers of elements, hopefully


1208
00:38:18,156 --> 00:38:19,346
you can see that the performance


1209
00:38:19,346 --> 00:38:19,976
was a lot better because--


1210
00:38:20,516 --> 00:38:27,736
[ Applause ]


1211
00:38:28,236 --> 00:38:29,366
And that's simply because you


1212
00:38:29,366 --> 00:38:31,056
know now there is one view which


1213
00:38:31,056 --> 00:38:32,486
is kind of what the view system


1214
00:38:32,486 --> 00:38:35,626
wants but you know the drawing's


1215
00:38:36,066 --> 00:38:36,796
happening using hardware


1216
00:38:36,796 --> 00:38:38,716
acceleration once only.


1217
00:38:38,716 --> 00:38:41,736
So I think that's about it.


1218
00:38:41,866 --> 00:38:43,366
Cool. Okay.


1219
00:38:49,516 --> 00:38:55,126
[ Applause ]


1220
00:38:55,626 --> 00:38:57,016
Okay so we've seen a few of the


1221
00:38:57,016 --> 00:38:59,036
graphic modifiers in this talk


1222
00:38:59,606 --> 00:39:00,956
but I want to point out that


1223
00:39:00,956 --> 00:39:02,266
there really are many more.


1224
00:39:02,266 --> 00:39:04,566
We've done a lot of work to


1225
00:39:04,566 --> 00:39:05,656
basically implement everything


1226
00:39:05,656 --> 00:39:06,826
you'd find in a normal 2D


1227
00:39:06,826 --> 00:39:07,506
drawing system.


1228
00:39:08,046 --> 00:39:09,586
And as we said, they all apply


1229
00:39:09,586 --> 00:39:10,306
to views as well.


1230
00:39:10,746 --> 00:39:12,416
So, you know, if this is, if you


1231
00:39:12,416 --> 00:39:13,266
need something from here, just


1232
00:39:13,346 --> 00:39:14,356
go look in the documentation.


1233
00:39:14,766 --> 00:39:17,606
And I think this really kind of


1234
00:39:17,766 --> 00:39:18,956
brings home the power of the


1235
00:39:18,956 --> 00:39:19,666
model we've built.


1236
00:39:19,666 --> 00:39:23,796
And the-- you know we want, we


1237
00:39:23,796 --> 00:39:24,946
want to kind of use these


1238
00:39:24,946 --> 00:39:26,116
graphic things but in


1239
00:39:26,216 --> 00:39:28,166
cooperation with all the rest of


1240
00:39:28,166 --> 00:39:29,866
the APIs like layout and


1241
00:39:29,866 --> 00:39:31,646
animations and interaction.


1242
00:39:31,646 --> 00:39:32,816
And the whole point of SwiftUI


1243
00:39:32,816 --> 00:39:34,916
is that we've unified all of


1244
00:39:34,916 --> 00:39:36,696
these areas around the one view


1245
00:39:36,696 --> 00:39:38,346
protocol to kind of give you


1246
00:39:38,346 --> 00:39:39,676
everything in the same package.


1247
00:39:39,676 --> 00:39:41,656
We think this is going to be


1248
00:39:41,706 --> 00:39:43,756
incredibly powerful and we


1249
00:39:43,756 --> 00:39:44,886
really can't wait to see where


1250
00:39:44,886 --> 00:39:45,696
you take it in the future.


1251
00:39:45,696 --> 00:39:46,976
So thank you very much.


1252
00:39:47,516 --> 00:39:54,166
[ Applause ]


1253
00:39:54,666 --> 00:39:55,946
We do have one more lab today.


1254
00:39:56,116 --> 00:39:57,886
It's, I think in an hour, so if


1255
00:39:57,886 --> 00:39:58,796
you have any questions about


1256
00:39:58,796 --> 00:40:00,006
this or anything else, please


1257
00:40:00,006 --> 00:40:01,256
come along and find us.


1258
00:40:01,776 --> 00:40:01,976
Thanks.


1259
00:40:02,508 --> 00:40:04,508
[ Applause ]

