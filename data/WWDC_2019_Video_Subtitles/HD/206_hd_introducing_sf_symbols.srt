1
00:00:01,516 --> 00:00:04,500
[ Music ]


2
00:00:08,516 --> 00:00:12,106
[ Applause and Cheers ]


3
00:00:12,606 --> 00:00:12,976
>> All right.


4
00:00:14,086 --> 00:00:14,806
Let's do this.


5
00:00:16,896 --> 00:00:18,636
Hi, I'm Paolo, and later on,


6
00:00:18,636 --> 00:00:20,256
I'll be joined by my colleague,


7
00:00:20,356 --> 00:00:21,346
Tom here on stage.


8
00:00:21,676 --> 00:00:23,636
And we are here today to


9
00:00:23,636 --> 00:00:27,476
introduce you to SF symbols.


10
00:00:27,606 --> 00:00:28,886
Symbols play a very important


11
00:00:28,886 --> 00:00:30,296
role in interfaces.


12
00:00:30,796 --> 00:00:31,966
They are effective at


13
00:00:31,966 --> 00:00:33,136
communicating meaning.


14
00:00:34,156 --> 00:00:35,866
They can indicate which items


15
00:00:35,866 --> 00:00:36,556
you have selected.


16
00:00:37,336 --> 00:00:39,216
They can be used to visually


17
00:00:39,216 --> 00:00:40,476
differentiate one type of


18
00:00:40,476 --> 00:00:42,266
content from another, and


19
00:00:42,956 --> 00:00:44,496
symbols appears in -- appear in


20
00:00:44,496 --> 00:00:45,576
various contexts throughout the


21
00:00:45,576 --> 00:00:45,826
system.


22
00:00:50,696 --> 00:00:52,396
This creates a sense of


23
00:00:52,396 --> 00:00:55,046
familiarity throughout the user


24
00:00:55,046 --> 00:00:55,576
interface.


25
00:00:56,786 --> 00:00:57,866
Symbols are used in a variety of


26
00:00:57,866 --> 00:00:59,966
ways, and designing symbols


27
00:00:59,966 --> 00:01:01,916
comes with an inherent


28
00:01:01,916 --> 00:01:03,936
challenge, which is pairing them


29
00:01:03,936 --> 00:01:06,696
nicely with the other essential


30
00:01:06,696 --> 00:01:08,686
element of any UI, which is


31
00:01:09,556 --> 00:01:09,726
text.


32
00:01:10,616 --> 00:01:12,286
Text is used in a variety of


33
00:01:12,336 --> 00:01:13,326
point sizes in the UI, and so


34
00:01:13,326 --> 00:01:14,976
are symbols.


35
00:01:19,456 --> 00:01:21,876
We use symbols a lot, and so do


36
00:01:21,876 --> 00:01:22,206
you.


37
00:01:23,296 --> 00:01:24,976
We want to make your job easier.


38
00:01:27,086 --> 00:01:30,116
Now in iOS 13, we redesigned all


39
00:01:30,116 --> 00:01:30,736
our symbols.


40
00:01:31,936 --> 00:01:33,186
You'll notice how the symbols


41
00:01:33,186 --> 00:01:34,906
have a rounder look, and how


42
00:01:34,906 --> 00:01:36,676
generally they are a bit heavier


43
00:01:36,676 --> 00:01:38,436
in weight, making them more


44
00:01:38,436 --> 00:01:38,716
visible.


45
00:01:38,716 --> 00:01:40,996
They're also designed to


46
00:01:41,166 --> 00:01:43,296
perfectly match and align with


47
00:01:43,296 --> 00:01:43,966
text.


48
00:01:47,126 --> 00:01:49,206
And while we took great care in


49
00:01:49,206 --> 00:01:51,136
redesigning all the symbols in


50
00:01:51,136 --> 00:01:52,566
the system that you may already


51
00:01:52,566 --> 00:01:54,796
be familiar with, we are


52
00:01:54,796 --> 00:01:56,586
thrilled to announce that we've


53
00:01:56,586 --> 00:01:58,606
extended this list, and designed


54
00:01:58,606 --> 00:02:03,166
many more, which we call SF


55
00:02:03,366 --> 00:02:03,806
symbols.


56
00:02:04,296 --> 00:02:07,206
They are a platform-consistent,


57
00:02:07,526 --> 00:02:09,816
high-quality set designed by


58
00:02:09,816 --> 00:02:11,766
Apple for you to use in your


59
00:02:12,736 --> 00:02:12,836
apps.


60
00:02:14,776 --> 00:02:17,456
They come in vector form, which


61
00:02:17,456 --> 00:02:19,506
means they are scalable, and


62
00:02:19,506 --> 00:02:22,236
will render great at small and


63
00:02:22,236 --> 00:02:22,956
large point sizes.


64
00:02:25,936 --> 00:02:27,926
They come in weights that match


65
00:02:27,926 --> 00:02:29,776
our family of system fonts, San


66
00:02:29,776 --> 00:02:33,266
Francisco -- all the weights.


67
00:02:39,676 --> 00:02:42,396
And there's over 1,000 to choose


68
00:02:42,446 --> 00:02:42,706
from.


69
00:02:43,356 --> 00:02:46,066
If these are still not enough,


70
00:02:46,416 --> 00:02:48,706
you can even customize them and


71
00:02:48,706 --> 00:02:49,596
create your own.


72
00:02:49,596 --> 00:02:52,426
Let's look at them in more


73
00:02:52,426 --> 00:02:52,806
detail.


74
00:02:53,826 --> 00:02:55,136
They're designed to work with


75
00:02:55,136 --> 00:02:55,596
text.


76
00:02:56,036 --> 00:02:57,776
They're specified in typographic


77
00:02:57,876 --> 00:03:00,106
points, like text.


78
00:03:02,256 --> 00:03:03,806
When symbols appear next to


79
00:03:03,806 --> 00:03:05,636
text, they all sit nicely on the


80
00:03:05,636 --> 00:03:06,586
same baseline.


81
00:03:08,796 --> 00:03:10,416
When symbols and text are


82
00:03:10,416 --> 00:03:12,366
positioned vertically, there are


83
00:03:12,366 --> 00:03:14,726
two most common cases -- whether


84
00:03:14,726 --> 00:03:17,216
the text supports the symbol, or


85
00:03:18,596 --> 00:03:20,796
the symbol supports the text.


86
00:03:21,596 --> 00:03:23,136
Horizontal alignment ensures


87
00:03:23,136 --> 00:03:25,086
that everything looks great, and


88
00:03:26,996 --> 00:03:28,686
this is possible thanks to their


89
00:03:28,686 --> 00:03:29,316
margins,


90
00:03:31,616 --> 00:03:32,676
which are not necessarily the


91
00:03:32,766 --> 00:03:34,586
same, as you can see in the


92
00:03:35,076 --> 00:03:37,326
bottom-right blue rectangle.


93
00:03:37,746 --> 00:03:40,906
Margins are invisible, but


94
00:03:40,906 --> 00:03:42,266
they're always considered when


95
00:03:42,266 --> 00:03:43,746
laying out elements on the


96
00:03:43,746 --> 00:03:44,026
screen.


97
00:03:44,586 --> 00:03:47,266
Let's look at weights.


98
00:03:47,766 --> 00:03:50,336
SF symbols have been carefully


99
00:03:50,336 --> 00:03:52,886
drawn to look great at different


100
00:03:52,886 --> 00:03:54,686
weights, from ultra-light to


101
00:03:54,686 --> 00:03:56,336
black, just like our system


102
00:03:56,336 --> 00:03:56,656
fonts.


103
00:03:57,846 --> 00:03:59,346
Every weight has been drawn


104
00:03:59,346 --> 00:04:00,686
manually, and special


105
00:04:00,686 --> 00:04:02,256
consideration went into each


106
00:04:02,316 --> 00:04:02,696
design.


107
00:04:03,456 --> 00:04:04,456
Thinner weights have a


108
00:04:04,456 --> 00:04:06,206
distinctive, beautiful elegance,


109
00:04:07,336 --> 00:04:09,876
while the heavier ones strive to


110
00:04:09,876 --> 00:04:11,716
maintain detail and visibility.


111
00:04:11,716 --> 00:04:16,836
There is a need for using


112
00:04:16,836 --> 00:04:19,356
symbols at different sizes when


113
00:04:19,356 --> 00:04:21,456
they are next to text, even if


114
00:04:21,456 --> 00:04:23,976
the text size doesn't change.


115
00:04:25,336 --> 00:04:26,756
This is something that many of


116
00:04:26,756 --> 00:04:29,386
us already do, depending on the


117
00:04:29,386 --> 00:04:31,406
amount of emphasis that the


118
00:04:31,406 --> 00:04:33,856
symbol may need, and how much


119
00:04:33,976 --> 00:04:34,886
space is available.


120
00:04:36,216 --> 00:04:38,386
So with iOS 13, we turned this


121
00:04:38,386 --> 00:04:39,286
into a system.


122
00:04:40,756 --> 00:04:44,156
We call these scales -- small,


123
00:04:44,636 --> 00:04:46,186
medium, and large.


124
00:04:46,796 --> 00:04:49,806
It's important to notice here


125
00:04:49,806 --> 00:04:51,216
that the point size of the


126
00:04:51,216 --> 00:04:52,446
symbol is still the same.


127
00:04:52,886 --> 00:04:54,026
It's just the scale that


128
00:04:54,026 --> 00:04:54,436
changes.


129
00:04:56,016 --> 00:04:56,966
Each scale remains


130
00:04:56,966 --> 00:04:58,336
weight-matched with the text,


131
00:04:59,056 --> 00:05:00,476
and, mind you, it's not just


132
00:05:00,476 --> 00:05:02,906
linearly-scaled, the stroke


133
00:05:02,906 --> 00:05:04,266
thickness is adjusted to the


134
00:05:04,266 --> 00:05:07,066
weight of the text, and the


135
00:05:07,276 --> 00:05:08,896
other great benefit is that


136
00:05:08,896 --> 00:05:10,746
using scales means that


137
00:05:10,746 --> 00:05:13,346
automatically they're optically


138
00:05:13,346 --> 00:05:15,056
vertically-centered to the cap


139
00:05:15,056 --> 00:05:15,436
height.


140
00:05:17,266 --> 00:05:19,736
This way, vertical layout


141
00:05:20,866 --> 00:05:22,386
between symbols and text is


142
00:05:22,386 --> 00:05:25,106
automatic for all three scales.


143
00:05:27,156 --> 00:05:28,986
So where are these scales used,


144
00:05:28,986 --> 00:05:30,346
and when should you use a


145
00:05:30,376 --> 00:05:31,176
particular scale?


146
00:05:32,086 --> 00:05:33,716
Well, here are 3 UI examples.


147
00:05:34,686 --> 00:05:37,896
They all use 17-point text, but


148
00:05:37,896 --> 00:05:40,326
the container for each of these


149
00:05:40,326 --> 00:05:43,466
symbols have different heights.


150
00:05:44,046 --> 00:05:47,606
So the text is the same size in


151
00:05:47,606 --> 00:05:49,206
all 3, and the symbols are as


152
00:05:49,206 --> 00:05:51,276
well, but the symbols use a


153
00:05:51,336 --> 00:05:53,376
different scale in order to best


154
00:05:53,506 --> 00:05:54,206
fit their space.


155
00:05:54,846 --> 00:05:58,136
And in some places, like


156
00:05:58,136 --> 00:06:00,066
toolbars, your kit will do the


157
00:06:00,066 --> 00:06:01,716
right thing, and will pick the


158
00:06:01,716 --> 00:06:03,146
correct scale for the control


159
00:06:03,556 --> 00:06:03,976
automatically.


160
00:06:07,376 --> 00:06:09,376
So when we put all this together


161
00:06:09,656 --> 00:06:11,746
-- resizing, scaling, and weight


162
00:06:11,746 --> 00:06:13,506
-- it means you can use them


163
00:06:13,506 --> 00:06:14,586
with dynamic type, and


164
00:06:14,876 --> 00:06:16,056
everything just works.


165
00:06:16,566 --> 00:06:20,346
And of course, symbols can be


166
00:06:20,346 --> 00:06:21,126
localized, too.


167
00:06:21,656 --> 00:06:23,006
Here's an example of the Voice


168
00:06:23,006 --> 00:06:25,206
Memos app, running in English,


169
00:06:25,726 --> 00:06:28,166
and running in Arabic.


170
00:06:28,346 --> 00:06:30,136
Notice how the time control


171
00:06:30,506 --> 00:06:31,846
reflect the numeral system of


172
00:06:31,846 --> 00:06:32,676
the locale.


173
00:06:33,246 --> 00:06:36,296
If you're wondering how to make


174
00:06:36,296 --> 00:06:37,616
sense of all these symbols,


175
00:06:37,986 --> 00:06:39,496
well, each symbol has a unique


176
00:06:39,496 --> 00:06:39,836
name,


177
00:06:43,206 --> 00:06:44,806
and most symbols come in


178
00:06:44,806 --> 00:06:47,546
variants that can be outlined or


179
00:06:47,546 --> 00:06:47,846
filled.


180
00:06:48,476 --> 00:06:52,126
They can be enclosed in a circle


181
00:06:52,606 --> 00:06:55,556
or a square, and may come with a


182
00:06:55,556 --> 00:06:56,976
standardized system of badges.


183
00:07:00,086 --> 00:07:01,626
And we made it convenient for


184
00:07:01,626 --> 00:07:02,726
you to use these symbols.


185
00:07:04,086 --> 00:07:06,006
First, they are included in the


186
00:07:06,006 --> 00:07:07,366
San Francisco fonts available


187
00:07:07,426 --> 00:07:08,766
for download, so you can use


188
00:07:08,766 --> 00:07:09,976
them in your design prompts.


189
00:07:11,196 --> 00:07:12,446
The scales are accessible by


190
00:07:12,446 --> 00:07:13,626
open Type Features.


191
00:07:14,296 --> 00:07:16,246
The default scale is medium, and


192
00:07:16,246 --> 00:07:17,796
small and large can be selected


193
00:07:17,796 --> 00:07:20,156
through the Typography panel, or


194
00:07:20,686 --> 00:07:22,386
application-specific UI.


195
00:07:24,016 --> 00:07:25,436
And as a reminder, these fonts


196
00:07:25,436 --> 00:07:27,006
are for design only, not for


197
00:07:27,006 --> 00:07:27,556
deployment.


198
00:07:28,066 --> 00:07:31,296
So how do you use these symbols?


199
00:07:31,546 --> 00:07:33,196
How do you access them and get


200
00:07:33,196 --> 00:07:34,076
them into your designs?


201
00:07:35,186 --> 00:07:37,356
Well, to help you with that, we


202
00:07:37,426 --> 00:07:39,536
created a new app, which is


203
00:07:39,586 --> 00:07:42,116
called SF Symbols, and this is


204
00:07:42,116 --> 00:07:43,406
what it looks like.


205
00:07:44,066 --> 00:07:45,396
It will let you browse symbols,


206
00:07:45,396 --> 00:07:48,906
either in a collection view or


207
00:07:48,906 --> 00:07:49,946
in a table view.


208
00:07:51,356 --> 00:07:52,696
It will let you search them by


209
00:07:52,696 --> 00:07:56,476
name, and preview them in


210
00:07:56,916 --> 00:07:59,346
different weights that the fonts


211
00:07:59,346 --> 00:07:59,686
come in.


212
00:08:03,876 --> 00:08:05,706
You can download the SF Symbols


213
00:08:05,706 --> 00:08:07,136
app with the new fonts from


214
00:08:07,136 --> 00:08:10,126
developer.apple.com/design, and


215
00:08:10,936 --> 00:08:12,826
speaking of design, design


216
00:08:12,826 --> 00:08:14,446
resources -- the new design


217
00:08:14,446 --> 00:08:17,416
resources on developer.apple.com


218
00:08:17,416 --> 00:08:18,516
also use symbols.


219
00:08:19,206 --> 00:08:21,366
They reference them by name, and


220
00:08:24,996 --> 00:08:27,406
some of the system icons are now


221
00:08:27,466 --> 00:08:28,186
symbols, too.


222
00:08:28,186 --> 00:08:29,616
So if you were using some of


223
00:08:29,616 --> 00:08:31,476
these, they will automatically


224
00:08:31,766 --> 00:08:32,716
use the new designs.


225
00:08:33,405 --> 00:08:37,035
Now that we've seen how to


226
00:08:37,035 --> 00:08:38,246
discover the symbols available


227
00:08:38,246 --> 00:08:39,676
to you, let's look at a real


228
00:08:39,676 --> 00:08:40,236
example.


229
00:08:40,655 --> 00:08:43,926
Here's a spec that you might


230
00:08:43,926 --> 00:08:45,016
have put together for your app.


231
00:08:46,476 --> 00:08:47,966
You can see how before maybe you


232
00:08:47,966 --> 00:08:50,866
had to do something like this --


233
00:08:51,016 --> 00:08:52,166
specify your images, the


234
00:08:52,616 --> 00:08:54,756
rectangular bounds, and explicit


235
00:08:54,756 --> 00:08:57,986
pad and insets, and now, symbols


236
00:08:58,076 --> 00:08:59,536
greatly simplify the paradigm.


237
00:09:00,236 --> 00:09:01,696
You just have to specify a name,


238
00:09:01,696 --> 00:09:03,136
its point size, and alignment,


239
00:09:04,286 --> 00:09:06,416
maybe its weight and scale if


240
00:09:06,416 --> 00:09:06,956
appropriate.


241
00:09:09,756 --> 00:09:11,006
So I'm working on this app with


242
00:09:11,036 --> 00:09:13,076
Tom, and here the symbol in the


243
00:09:13,076 --> 00:09:14,536
second row is a bit too generic.


244
00:09:14,536 --> 00:09:16,606
It's a list of beverages, so I


245
00:09:16,606 --> 00:09:17,706
want to replace it with


246
00:09:17,706 --> 00:09:18,686
something more appropriate,


247
00:09:18,686 --> 00:09:20,106
something that conveys that


248
00:09:20,106 --> 00:09:21,516
these are tasty, hot beverages.


249
00:09:22,636 --> 00:09:23,966
So I think I'm going to change


250
00:09:23,966 --> 00:09:25,586
it, and I want to go for a


251
00:09:26,286 --> 00:09:27,306
teacup.


252
00:09:28,956 --> 00:09:30,206
That teacup looks great.


253
00:09:30,856 --> 00:09:32,776
I'm sure Tom will love it, but


254
00:09:33,256 --> 00:09:34,866
it's not included in the set of


255
00:09:34,866 --> 00:09:36,836
symbols that we provide.


256
00:09:38,046 --> 00:09:39,986
Well, the SF Symbols app lets


257
00:09:39,986 --> 00:09:41,686
you customize and create your


258
00:09:41,686 --> 00:09:42,286
own symbols.


259
00:09:43,756 --> 00:09:45,596
In order for you to do that, you


260
00:09:45,596 --> 00:09:47,096
need to start by exporting the


261
00:09:47,096 --> 00:09:50,236
symbol from the app, and symbols


262
00:09:50,236 --> 00:09:52,106
can be exported through their


263
00:09:52,106 --> 00:09:52,586
template.


264
00:09:54,676 --> 00:09:56,136
This is what a template looks


265
00:09:56,136 --> 00:09:56,306
like.


266
00:09:57,516 --> 00:09:59,056
It has all the weights, and all


267
00:09:59,056 --> 00:10:00,166
the scales for the symbol.


268
00:10:00,696 --> 00:10:04,766
The template is in SVG format,


269
00:10:05,636 --> 00:10:07,416
which means it can be edited by


270
00:10:07,416 --> 00:10:08,506
most design tools.


271
00:10:09,056 --> 00:10:12,776
It's specially constructed to be


272
00:10:12,776 --> 00:10:14,366
navigable and usable through any


273
00:10:14,366 --> 00:10:17,476
of the design stage, and the


274
00:10:17,696 --> 00:10:19,856
very same template is also


275
00:10:19,856 --> 00:10:21,886
directly used by Xcode as a


276
00:10:21,966 --> 00:10:22,936
source artifact.


277
00:10:24,026 --> 00:10:25,316
No more tens of hundreds of


278
00:10:25,406 --> 00:10:26,496
files floating around.


279
00:10:27,916 --> 00:10:29,156
So let's look at how we did our


280
00:10:29,266 --> 00:10:29,586
teacup.


281
00:10:30,056 --> 00:10:32,926
First, we went to the SF Symbols


282
00:10:32,926 --> 00:10:34,806
app, and we looked for a good


283
00:10:34,806 --> 00:10:35,606
starting point.


284
00:10:36,306 --> 00:10:37,806
Our teacup is enclosed in a


285
00:10:37,836 --> 00:10:39,336
circle, so I think the circle is


286
00:10:39,336 --> 00:10:40,346
a great starting point.


287
00:10:40,996 --> 00:10:42,826
And so, I searched for circle,


288
00:10:43,306 --> 00:10:44,766
and it's there.


289
00:10:44,826 --> 00:10:46,706
So I can select it and export


290
00:10:46,706 --> 00:10:48,176
its template from the File menu.


291
00:10:48,786 --> 00:10:52,506
I can save it, and now it's


292
00:10:52,506 --> 00:10:53,496
ready to be customized.


293
00:10:54,146 --> 00:10:56,726
I can open it in my editor and


294
00:10:57,176 --> 00:10:59,716
notice here how the layers have


295
00:10:59,826 --> 00:11:00,536
unique names.


296
00:11:01,306 --> 00:11:02,576
These names are important.


297
00:11:02,666 --> 00:11:04,516
They help identify each


298
00:11:04,516 --> 00:11:05,736
individual configuration of the


299
00:11:05,736 --> 00:11:06,946
symbol, the weight, and their


300
00:11:06,946 --> 00:11:09,026
scale, so you've got to be


301
00:11:09,026 --> 00:11:10,386
careful when you're drawing to


302
00:11:10,456 --> 00:11:12,366
make sure that your outlines are


303
00:11:12,366 --> 00:11:14,016
actually inside the appropriate


304
00:11:14,066 --> 00:11:14,416
layer.


305
00:11:14,416 --> 00:11:17,256
So I start my customization


306
00:11:17,256 --> 00:11:19,676
work, and I put my teacup inside


307
00:11:19,796 --> 00:11:21,426
the regular at the medium scale.


308
00:11:22,246 --> 00:11:24,156
I make sure that it's centered,


309
00:11:24,156 --> 00:11:27,756
and optically balanced, and then


310
00:11:27,756 --> 00:11:30,526
I scale it down, just for stroke


311
00:11:30,526 --> 00:11:33,676
thicknesses, and I put it in the


312
00:11:33,676 --> 00:11:34,966
small regular scale.


313
00:11:35,016 --> 00:11:37,166
And then I repeat the process,


314
00:11:37,386 --> 00:11:39,076
and I scale it up just for


315
00:11:39,076 --> 00:11:40,826
thickness, center it, make sure


316
00:11:40,826 --> 00:11:43,006
it's looking good for a large


317
00:11:43,156 --> 00:11:45,046
regular scale, and so forth


318
00:11:45,176 --> 00:11:47,216
until the template is complete.


319
00:11:48,416 --> 00:11:50,466
At this point, I'm ready to


320
00:11:50,466 --> 00:11:53,246
export the SVG from the design


321
00:11:54,256 --> 00:11:54,366
tool.


322
00:11:54,556 --> 00:11:56,166
I can hand it off to Tom, and


323
00:11:56,236 --> 00:11:57,836
I'm sure he'll take great care


324
00:11:58,346 --> 00:11:59,356
of it.


325
00:11:59,356 --> 00:12:01,186
In fact, he doesn't have to do


326
00:12:01,186 --> 00:12:01,626
much.


327
00:12:01,836 --> 00:12:03,546
It's ready to be dropped in


328
00:12:03,546 --> 00:12:04,456
Xcode as-is.


329
00:12:10,516 --> 00:12:12,056
So if you want -- don't want to


330
00:12:12,056 --> 00:12:14,086
provide all the weights for your


331
00:12:14,086 --> 00:12:16,536
symbol, you have to provide


332
00:12:16,656 --> 00:12:18,716
regular at medium scale at


333
00:12:19,456 --> 00:12:22,026
least, then the scales for


334
00:12:22,026 --> 00:12:22,526
regular.


335
00:12:24,006 --> 00:12:26,046
Then same bold for the bold text


336
00:12:26,356 --> 00:12:28,986
feature, and if you want to


337
00:12:28,986 --> 00:12:30,586
support all dynamic-type styles,


338
00:12:30,886 --> 00:12:33,346
then include medium and bold as


339
00:12:34,716 --> 00:12:34,836
well.


340
00:12:35,486 --> 00:12:36,846
Of course, you should take into


341
00:12:36,846 --> 00:12:38,376
consideration the typographic


342
00:12:38,376 --> 00:12:39,166
palette of your app.


343
00:12:39,586 --> 00:12:41,856
You may need thinner or heavier


344
00:12:41,856 --> 00:12:42,156
weights.


345
00:12:43,026 --> 00:12:47,156
So to recap, we got to know a


346
00:12:47,156 --> 00:12:49,116
new library of symbols that


347
00:12:49,116 --> 00:12:50,016
match San Francisco.


348
00:12:51,036 --> 00:12:53,806
They are vector-based and come


349
00:12:53,806 --> 00:12:55,316
in different weights and scales.


350
00:12:56,506 --> 00:12:58,366
You can browse them through the


351
00:12:58,366 --> 00:12:59,106
SF Symbols app.


352
00:13:00,626 --> 00:13:01,966
We saw how to use them in your


353
00:13:01,966 --> 00:13:03,806
specs, referenced them by name,


354
00:13:03,966 --> 00:13:05,056
and how to specify their


355
00:13:05,106 --> 00:13:07,796
positioning, and finally, you


356
00:13:07,796 --> 00:13:09,606
can customize symbols using the


357
00:13:09,606 --> 00:13:11,546
SVG template exported from the


358
00:13:11,546 --> 00:13:12,076
SF Symbols app.


359
00:13:14,116 --> 00:13:15,376
Now, I'd like to invite Tom to


360
00:13:15,376 --> 00:13:16,826
the stage, so he can tell you


361
00:13:16,856 --> 00:13:18,206
all about how to use these


362
00:13:18,206 --> 00:13:18,886
symbols in code.


363
00:13:19,516 --> 00:13:21,546
[ Applause ]


364
00:13:22,046 --> 00:13:22,346
>> Thank you, Paolo.


365
00:13:23,516 --> 00:13:26,156
[ Applause ]


366
00:13:26,656 --> 00:13:28,856
Well, I'm really excited, and


367
00:13:28,986 --> 00:13:30,396
the first thing I would want to


368
00:13:30,396 --> 00:13:32,736
do is see if I can use one of


369
00:13:32,736 --> 00:13:34,226
these symbols in my own apps.


370
00:13:34,756 --> 00:13:36,386
And I have this simple slideshow


371
00:13:36,386 --> 00:13:38,596
app, and it has some UI that


372
00:13:38,706 --> 00:13:39,956
allows you to change the speed.


373
00:13:40,406 --> 00:13:42,236
But I'm really not very happy


374
00:13:42,316 --> 00:13:43,296
with these images.


375
00:13:43,716 --> 00:13:45,276
They're very basic, so let's see


376
00:13:45,436 --> 00:13:46,526
-- they're a good candidate for


377
00:13:46,866 --> 00:13:48,136
changing, and let's see what it


378
00:13:48,136 --> 00:13:50,616
does if we have a symbol in the


379
00:13:50,616 --> 00:13:51,136
Symbols app.


380
00:13:51,136 --> 00:13:53,856
So let's fire up SF Symbols, and


381
00:13:53,856 --> 00:13:55,506
search for tortoise, because


382
00:13:56,096 --> 00:13:58,056
maybe we can use the classic


383
00:13:58,056 --> 00:13:59,006
[inaudible] style tortoise and


384
00:13:59,006 --> 00:13:59,226
hare.


385
00:14:00,416 --> 00:14:01,686
Turns out, there is one, so I


386
00:14:01,686 --> 00:14:02,266
can use this.


387
00:14:02,266 --> 00:14:02,746
That's great.


388
00:14:04,086 --> 00:14:05,056
And the hare is there, too.


389
00:14:05,316 --> 00:14:07,576
Perfect. Now, how do I use them?


390
00:14:07,916 --> 00:14:08,686
It's very simple.


391
00:14:08,686 --> 00:14:10,316
We're introducing new API called


392
00:14:10,316 --> 00:14:12,266
UIImage(systemName that works


393
00:14:12,316 --> 00:14:14,406
very similar to the existing


394
00:14:14,536 --> 00:14:15,376
APIs.


395
00:14:15,836 --> 00:14:18,016
You just pass in the name you


396
00:14:18,016 --> 00:14:19,376
copy from the SF Symbols app,


397
00:14:19,376 --> 00:14:20,546
and that's it.


398
00:14:20,546 --> 00:14:22,706
If we build and run -- wow, bam,


399
00:14:23,516 --> 00:14:25,526
that looks amazing, and it was


400
00:14:25,886 --> 00:14:26,896
just two lines of code.


401
00:14:27,146 --> 00:14:30,426
Perfect. Now, Paolo sent me a


402
00:14:30,536 --> 00:14:31,496
spec, because we're working


403
00:14:31,496 --> 00:14:33,106
together on this app, and he


404
00:14:33,106 --> 00:14:34,556
really has to stop putting hot


405
00:14:34,596 --> 00:14:35,616
Belgian chocolate there, because


406
00:14:35,676 --> 00:14:36,726
now I really feel like hot


407
00:14:36,786 --> 00:14:37,436
Belgian chocolate.


408
00:14:38,306 --> 00:14:40,316
But he gave me this spec, and it


409
00:14:40,316 --> 00:14:41,326
looks very different than the


410
00:14:41,326 --> 00:14:43,846
one that I got before.


411
00:14:43,846 --> 00:14:44,656
It's -- there's less


412
00:14:44,656 --> 00:14:45,206
information.


413
00:14:45,206 --> 00:14:45,706
I like that.


414
00:14:45,736 --> 00:14:47,356
That's less work for me, but


415
00:14:47,356 --> 00:14:49,816
let's focus on this image,


416
00:14:49,816 --> 00:14:50,926
because there's a new teacup


417
00:14:51,716 --> 00:14:51,896
there.


418
00:14:52,026 --> 00:14:53,566
He also gave me a file,


419
00:14:53,966 --> 00:14:55,946
teacup.svg file that I need to


420
00:14:55,946 --> 00:14:57,446
import into my asset catalog.


421
00:14:57,446 --> 00:15:00,576
Well, it's definitely a teacup.


422
00:15:00,696 --> 00:15:01,426
There's a lot of them.


423
00:15:01,426 --> 00:15:02,686
He really put some effort into


424
00:15:02,686 --> 00:15:04,226
it, and that's what I like about


425
00:15:04,266 --> 00:15:04,676
Paolo.


426
00:15:04,746 --> 00:15:06,336
He has, like, great attention to


427
00:15:06,336 --> 00:15:06,816
detail.


428
00:15:09,056 --> 00:15:10,516
So now, my image is there, and I


429
00:15:10,516 --> 00:15:12,366
can just use UIImage(named to


430
00:15:12,366 --> 00:15:13,226
get to my teacup.


431
00:15:13,226 --> 00:15:15,186
If we run this, I get this.


432
00:15:15,606 --> 00:15:17,256
This is a real nice and sharp


433
00:15:17,316 --> 00:15:18,916
teacup, exactly what I wanted,


434
00:15:20,106 --> 00:15:21,146
but I'm not sure if you have


435
00:15:21,146 --> 00:15:22,386
noticed, when I imported the


436
00:15:22,386 --> 00:15:26,106
file, there are now two teacups


437
00:15:26,106 --> 00:15:27,146
in my asset catalog.


438
00:15:27,476 --> 00:15:29,516
It turns out you can now have


439
00:15:29,826 --> 00:15:31,256
two images with the same name,


440
00:15:31,376 --> 00:15:32,946
but they are -- have a different


441
00:15:33,156 --> 00:15:33,386
type.


442
00:15:34,216 --> 00:15:35,686
So let's step back for a moment


443
00:15:35,686 --> 00:15:36,976
and explain what's happening.


444
00:15:36,976 --> 00:15:37,986
We're going to use envelope,


445
00:15:38,076 --> 00:15:39,336
because the teacup is not a good


446
00:15:39,336 --> 00:15:39,776
example.


447
00:15:41,276 --> 00:15:43,106
Up until now, UIImage(named was


448
00:15:43,396 --> 00:15:44,246
pretty straightforward.


449
00:15:44,286 --> 00:15:45,486
You have an image in your asset


450
00:15:45,486 --> 00:15:47,216
catalog, and you can get it out


451
00:15:47,296 --> 00:15:47,876
using the API.


452
00:15:48,996 --> 00:15:50,266
Now, with symbols, it becomes


453
00:15:50,266 --> 00:15:51,106
more complicated.


454
00:15:52,336 --> 00:15:53,676
You can actually have an image


455
00:15:53,676 --> 00:15:54,856
with the same name, and there


456
00:15:54,916 --> 00:15:56,196
might be three versions of it.


457
00:15:56,196 --> 00:15:57,916
You might have a system symbol


458
00:15:57,916 --> 00:15:58,566
with this name.


459
00:15:58,566 --> 00:16:00,126
You might have a custom symbol


460
00:16:00,126 --> 00:16:01,386
with the name, and your old


461
00:16:01,546 --> 00:16:03,826
non-symbol image might still be


462
00:16:05,016 --> 00:16:05,206
there.


463
00:16:05,326 --> 00:16:07,556
For system images, there's no


464
00:16:07,556 --> 00:16:07,936
problem.


465
00:16:09,006 --> 00:16:10,136
They're in a separate name


466
00:16:10,136 --> 00:16:10,926
space, because there's a


467
00:16:10,926 --> 00:16:12,076
separate API for them.


468
00:16:12,076 --> 00:16:13,236
And so they are -- there's no


469
00:16:13,236 --> 00:16:13,876
conflict there.


470
00:16:14,346 --> 00:16:15,966
It also means you can never get


471
00:16:15,966 --> 00:16:17,546
a custom symbol using this API,


472
00:16:17,546 --> 00:16:19,446
and you can never get a system


473
00:16:19,446 --> 00:16:21,566
symbol using the UIImage(named


474
00:16:21,616 --> 00:16:21,796
API.


475
00:16:21,796 --> 00:16:23,096
They are totally separate.


476
00:16:23,566 --> 00:16:25,996
For custom symbols, it's a


477
00:16:25,996 --> 00:16:28,676
little bit different.


478
00:16:28,776 --> 00:16:30,526
We prioritize things now, so


479
00:16:30,526 --> 00:16:32,376
we'll first look for a symbol


480
00:16:32,376 --> 00:16:32,796
image.


481
00:16:32,896 --> 00:16:34,126
And if we can find one, we will


482
00:16:34,126 --> 00:16:35,806
return that, and otherwise,


483
00:16:35,836 --> 00:16:37,006
we'll look for a non-symbol


484
00:16:37,006 --> 00:16:38,286
image, and then you get that


485
00:16:38,286 --> 00:16:38,486
back.


486
00:16:39,096 --> 00:16:39,906
Now, you might say, "Well,


487
00:16:39,906 --> 00:16:41,126
that's really annoying, because


488
00:16:41,306 --> 00:16:42,616
what if I want both?"


489
00:16:43,056 --> 00:16:44,066
But there's a good story for


490
00:16:44,066 --> 00:16:44,366
this.


491
00:16:45,706 --> 00:16:48,006
With the same line of code, I


492
00:16:48,076 --> 00:16:50,256
can run my app on iOS 12 or


493
00:16:50,256 --> 00:16:51,546
earlier, and I get the old


494
00:16:51,546 --> 00:16:53,916
image, the bitmap image in this


495
00:16:54,426 --> 00:16:54,546
case.


496
00:16:55,156 --> 00:16:57,656
And if I run my app on iOS 13 or


497
00:16:57,656 --> 00:16:59,046
later, I get the symbol image.


498
00:16:59,046 --> 00:17:00,546
So I don't have to write any


499
00:17:00,606 --> 00:17:01,986
version-checking code to get a


500
00:17:01,986 --> 00:17:02,986
different image for the


501
00:17:02,986 --> 00:17:03,696
different OSs.


502
00:17:04,366 --> 00:17:06,816
Just provide 2 images with the


503
00:17:06,886 --> 00:17:08,496
same name, and it works out of


504
00:17:08,496 --> 00:17:08,915
the box.


505
00:17:10,016 --> 00:17:11,945
If you do want to use the old


506
00:17:11,945 --> 00:17:13,665
image on iOS 13 or later, you


507
00:17:13,665 --> 00:17:15,665
have to duplicate or rename it.


508
00:17:19,076 --> 00:17:20,925
So let's -- going back to our


509
00:17:20,986 --> 00:17:23,236
slides, and one other thing that


510
00:17:23,236 --> 00:17:25,695
we have is the configuration on


511
00:17:25,695 --> 00:17:26,356
this teacup.


512
00:17:26,646 --> 00:17:27,816
It should be large.


513
00:17:28,836 --> 00:17:29,536
How do we do this?


514
00:17:29,536 --> 00:17:31,646
We create a new type that we


515
00:17:31,646 --> 00:17:33,286
introduced, SymbolConfiguration,


516
00:17:33,836 --> 00:17:35,376
and we create one with a large


517
00:17:35,376 --> 00:17:35,726
scale.


518
00:17:36,376 --> 00:17:38,536
The other configuration


519
00:17:38,536 --> 00:17:39,496
properties that are on the


520
00:17:39,496 --> 00:17:41,326
object are unspecified.


521
00:17:41,496 --> 00:17:42,836
We only have a large scale here,


522
00:17:42,836 --> 00:17:44,356
and then we can use the


523
00:17:44,356 --> 00:17:46,136
imageView to display our image.


524
00:17:46,376 --> 00:17:47,336
There's a new property on


525
00:17:47,336 --> 00:17:48,286
UIImageView called


526
00:17:48,416 --> 00:17:49,866
preferredSymbolConfiguration


527
00:17:50,426 --> 00:17:51,556
that will tell the imageView to


528
00:17:51,556 --> 00:17:53,246
use this configuration to render


529
00:17:53,616 --> 00:17:54,446
a symbol image.


530
00:17:54,676 --> 00:17:56,256
It will have no effect on


531
00:17:56,256 --> 00:17:57,296
non-symbol images.


532
00:17:57,836 --> 00:18:01,266
If we run this, what a


533
00:18:01,516 --> 00:18:02,946
difference a scale makes.


534
00:18:06,456 --> 00:18:07,736
Now, you can also use this


535
00:18:07,736 --> 00:18:11,436
configuration to change the size


536
00:18:11,486 --> 00:18:12,056
of a symbol.


537
00:18:12,516 --> 00:18:14,206
You specify a point size, and


538
00:18:14,206 --> 00:18:15,776
optionally, a weight or a scale.


539
00:18:16,386 --> 00:18:19,356
Now, an important point here is


540
00:18:19,356 --> 00:18:22,056
that symbol point sizes are not


541
00:18:22,236 --> 00:18:23,126
screen point sizes.


542
00:18:23,686 --> 00:18:26,686
Symbol point sizes are expressed


543
00:18:26,686 --> 00:18:27,916
as font point sizes.


544
00:18:27,916 --> 00:18:29,336
They're typographical in nature.


545
00:18:30,086 --> 00:18:31,446
The screen point sizes describe


546
00:18:31,446 --> 00:18:32,736
the dimension of the image, the


547
00:18:32,736 --> 00:18:35,966
width and the height.


548
00:18:36,216 --> 00:18:37,636
Now, a picture says 1,000 words,


549
00:18:37,756 --> 00:18:39,626
so let's see that and visualize


550
00:18:39,686 --> 00:18:39,916
this.


551
00:18:39,916 --> 00:18:41,396
Like, we have this -- our circle


552
00:18:41,456 --> 00:18:42,646
symbol next to the "Favorite"


553
00:18:42,646 --> 00:18:44,156
text, and they are both


554
00:18:44,556 --> 00:18:45,996
specified using the system font


555
00:18:46,056 --> 00:18:47,196
at 28 points.


556
00:18:47,966 --> 00:18:49,396
Now, you might expect this image


557
00:18:49,396 --> 00:18:51,256
to be 28 x 28 points.


558
00:18:51,366 --> 00:18:53,226
Well, it turns out, it isn't,


559
00:18:53,366 --> 00:18:54,806
and these values are the actual


560
00:18:54,856 --> 00:18:56,366
correct values for this symbol


561
00:18:56,366 --> 00:18:57,376
at this configuration.


562
00:18:57,646 --> 00:18:59,156
And the image is not even


563
00:18:59,236 --> 00:19:03,186
square, and it's a circle.


564
00:19:03,336 --> 00:19:04,806
So for symbols, you have to let


565
00:19:04,856 --> 00:19:07,376
go of describing the image using


566
00:19:07,376 --> 00:19:07,936
a dimension.


567
00:19:07,936 --> 00:19:10,016
You have to use the symbol


568
00:19:10,066 --> 00:19:11,396
points, and you can think of it


569
00:19:11,396 --> 00:19:12,356
as a piece of text.


570
00:19:12,356 --> 00:19:13,326
Because if you have a piece of


571
00:19:13,386 --> 00:19:15,026
text, you describe it using the


572
00:19:15,026 --> 00:19:16,966
font point size, and not using


573
00:19:16,966 --> 00:19:17,646
its dimensions.


574
00:19:18,276 --> 00:19:22,216
It's the same.


575
00:19:22,426 --> 00:19:23,616
Another way to configure a


576
00:19:23,686 --> 00:19:25,296
symbol is using a text style,


577
00:19:25,296 --> 00:19:27,536
and that means that the symbol


578
00:19:27,536 --> 00:19:28,836
will behave according to the


579
00:19:28,836 --> 00:19:30,096
dynamic text style rules.


580
00:19:30,096 --> 00:19:31,486
It will behave the same as a


581
00:19:31,486 --> 00:19:32,936
piece of text with the text


582
00:19:32,936 --> 00:19:33,206
style.


583
00:19:34,106 --> 00:19:35,816
So it matches great with text


584
00:19:36,166 --> 00:19:36,676
styles.


585
00:19:37,506 --> 00:19:39,596
And imageView will automatically


586
00:19:39,646 --> 00:19:41,646
change the size of the image,


587
00:19:41,646 --> 00:19:43,646
and look up the right size at


588
00:19:43,646 --> 00:19:45,026
run time, depending on the


589
00:19:45,066 --> 00:19:46,366
preferred content size category


590
00:19:46,426 --> 00:19:46,946
of the app.


591
00:19:47,446 --> 00:19:50,506
You can see this in practice.


592
00:19:50,546 --> 00:19:52,236
Like, the text is nice and


593
00:19:52,236 --> 00:19:53,746
large, and the symbols scaled


594
00:19:53,806 --> 00:19:54,326
accordingly.


595
00:19:54,326 --> 00:19:55,846
And they have the nice -- the


596
00:19:55,846 --> 00:19:56,306
same weight.


597
00:19:59,176 --> 00:20:00,796
So images can change size


598
00:20:00,796 --> 00:20:01,756
dynamically, and we have to talk


599
00:20:01,756 --> 00:20:02,896
about this, because you usually


600
00:20:02,896 --> 00:20:04,706
want to constrain an image by


601
00:20:04,706 --> 00:20:05,256
width and height.


602
00:20:06,186 --> 00:20:08,826
And since a symbol renders


603
00:20:09,126 --> 00:20:11,106
always -- it's a vector.


604
00:20:12,136 --> 00:20:13,706
You could be inclined to always


605
00:20:13,756 --> 00:20:14,816
specify this width and height,


606
00:20:14,946 --> 00:20:16,046
but it's actually not a good


607
00:20:16,046 --> 00:20:16,396
idea.


608
00:20:17,056 --> 00:20:18,586
First of all, it's not really


609
00:20:18,586 --> 00:20:18,876
correct.


610
00:20:19,516 --> 00:20:21,126
You can see on the screenshot


611
00:20:21,126 --> 00:20:23,046
that the symbol is described as


612
00:20:23,046 --> 00:20:24,776
a 17-point symbol, which is


613
00:20:24,776 --> 00:20:27,456
really small, but it still


614
00:20:27,456 --> 00:20:28,996
renders as a very large image,


615
00:20:29,666 --> 00:20:30,806
because the width and height are


616
00:20:30,806 --> 00:20:31,046
there.


617
00:20:31,806 --> 00:20:32,836
But you can also see that it's


618
00:20:32,836 --> 00:20:34,496
not entirely correctly centered.


619
00:20:34,496 --> 00:20:35,486
Like, it's a little bit off to


620
00:20:35,486 --> 00:20:36,546
the left, and a little bit off


621
00:20:36,546 --> 00:20:37,436
to the top.


622
00:20:37,576 --> 00:20:40,856
And secondly, it's not


623
00:20:40,856 --> 00:20:41,916
performance -- this is not the


624
00:20:41,916 --> 00:20:43,776
most performance way to display


625
00:20:43,776 --> 00:20:44,626
a symbol image.


626
00:20:45,636 --> 00:20:49,676
So what you want to do is not


627
00:20:49,706 --> 00:20:50,936
constrain the symbol image at


628
00:20:50,936 --> 00:20:52,336
all, and have it be its natural


629
00:20:52,336 --> 00:20:52,696
size.


630
00:20:53,416 --> 00:20:57,526
In this case, we changed the


631
00:20:57,526 --> 00:20:59,736
size of the symbol to 500 points


632
00:20:59,796 --> 00:21:00,756
to match the size that we had


633
00:21:00,756 --> 00:21:02,496
before, and it looks a lot


634
00:21:02,496 --> 00:21:04,006
better, because it -- the


635
00:21:04,166 --> 00:21:06,596
centering is better than before,


636
00:21:07,336 --> 00:21:08,846
and the size is more correct.


637
00:21:10,356 --> 00:21:11,626
This will also be more


638
00:21:11,626 --> 00:21:12,296
performance.


639
00:21:16,076 --> 00:21:17,806
So if you do need a fixed size,


640
00:21:18,136 --> 00:21:19,256
set the point size, but


641
00:21:19,256 --> 00:21:21,616
otherwise have the symbol react


642
00:21:21,776 --> 00:21:23,606
to the symbol configuration,


643
00:21:23,606 --> 00:21:25,336
because even a large symbol


644
00:21:25,336 --> 00:21:26,616
configuration or a small-scale


645
00:21:26,616 --> 00:21:27,756
configuration may make a big


646
00:21:27,756 --> 00:21:29,446
difference for the size of the


647
00:21:29,446 --> 00:21:30,096
same symbol.


648
00:21:30,726 --> 00:21:35,456
Now, there's a lot of


649
00:21:35,516 --> 00:21:38,426
configurations here, and we've


650
00:21:38,426 --> 00:21:39,916
established that symbols are --


651
00:21:39,916 --> 00:21:41,106
Paolo mentioned before that


652
00:21:41,176 --> 00:21:42,646
symbols are really made to work


653
00:21:42,646 --> 00:21:44,406
with San Francisco, our system


654
00:21:44,436 --> 00:21:45,966
font, but they work with any


655
00:21:45,966 --> 00:21:46,286
font.


656
00:21:46,486 --> 00:21:48,646
So you can use this API,


657
00:21:49,826 --> 00:21:51,406
SymbolConfiguration(font, to


658
00:21:51,406 --> 00:21:52,526
create a configuration that


659
00:21:52,586 --> 00:21:53,806
matches the font you give it,


660
00:21:54,606 --> 00:21:56,056
and it works with system fonts.


661
00:21:56,526 --> 00:21:58,396
It works with dynamic type


662
00:21:58,396 --> 00:21:59,626
fonts, but it also works with


663
00:21:59,626 --> 00:22:00,346
custom fonts.


664
00:22:00,686 --> 00:22:02,616
And especially for custom fonts,


665
00:22:02,996 --> 00:22:04,046
it will create a more


666
00:22:04,046 --> 00:22:06,716
high-fidelity configuration than


667
00:22:06,716 --> 00:22:07,896
the one you can create manually


668
00:22:07,896 --> 00:22:09,346
by copying the values from the


669
00:22:09,346 --> 00:22:10,716
font into your configuration.


670
00:22:11,446 --> 00:22:12,756
So it's better to use this for


671
00:22:13,176 --> 00:22:13,926
custom fonts.


672
00:22:14,326 --> 00:22:16,416
And when you already have a


673
00:22:16,416 --> 00:22:17,796
piece of text or a label that


674
00:22:17,796 --> 00:22:19,266
has a font configured, this is


675
00:22:19,356 --> 00:22:20,246
an easy way to create a


676
00:22:20,246 --> 00:22:21,736
configuration that matches that


677
00:22:22,216 --> 00:22:22,726
font.


678
00:22:26,766 --> 00:22:27,656
And the last thing about


679
00:22:27,696 --> 00:22:29,386
configurations is that they are


680
00:22:29,386 --> 00:22:29,896
immutable.


681
00:22:29,896 --> 00:22:30,826
You can't change them.


682
00:22:30,876 --> 00:22:32,266
So what if you do want to change


683
00:22:32,266 --> 00:22:32,406
them?


684
00:22:32,796 --> 00:22:33,826
Well, you have to combine them.


685
00:22:34,576 --> 00:22:35,346
There's a method called


686
00:22:35,396 --> 00:22:37,396
applying, and it applies the


687
00:22:37,446 --> 00:22:38,866
specified configuration to the


688
00:22:38,866 --> 00:22:40,656
one that you're calling it on.


689
00:22:40,656 --> 00:22:42,746
So we'll take the configuration


690
00:22:43,386 --> 00:22:44,416
you're calling it on, and then


691
00:22:44,416 --> 00:22:46,896
take all the specified values in


692
00:22:46,896 --> 00:22:47,986
the other configuration, and


693
00:22:47,986 --> 00:22:50,506
override, or set them on the


694
00:22:50,506 --> 00:22:51,236
base configuration.


695
00:22:51,236 --> 00:22:52,396
And you get a new configuration


696
00:22:52,396 --> 00:22:54,066
that you can use somewhere else.


697
00:22:54,486 --> 00:22:56,166
But they are immutable, and the


698
00:22:56,196 --> 00:22:57,546
configuration themselves won't


699
00:22:57,546 --> 00:22:57,976
change.


700
00:23:00,096 --> 00:23:01,526
Now, let's talk about layout.


701
00:23:03,166 --> 00:23:04,756
We have this simple comments


702
00:23:04,756 --> 00:23:06,676
section in our app, and we want


703
00:23:06,676 --> 00:23:08,476
to expand a little bit for our


704
00:23:08,696 --> 00:23:11,406
next version, and also start


705
00:23:11,406 --> 00:23:12,236
using symbols here.


706
00:23:12,426 --> 00:23:13,446
And we have this avatar


707
00:23:13,446 --> 00:23:14,266
placeholder.


708
00:23:14,266 --> 00:23:15,676
I'm going to focus on just one


709
00:23:15,676 --> 00:23:18,086
row, and Paolo suggested


710
00:23:18,206 --> 00:23:19,606
switching to a new symbol.


711
00:23:19,606 --> 00:23:20,386
So let's try that.


712
00:23:21,636 --> 00:23:25,696
That looks a lot better.


713
00:23:25,876 --> 00:23:27,396
So normally, if you would align


714
00:23:27,396 --> 00:23:28,746
images with a piece of text, you


715
00:23:28,746 --> 00:23:30,166
would use center alignment --


716
00:23:30,856 --> 00:23:32,716
vertical center alignment, and


717
00:23:32,796 --> 00:23:34,036
in most cases, that would look


718
00:23:34,036 --> 00:23:35,696
like you would expect, and it


719
00:23:35,696 --> 00:23:36,566
would be the easiest.


720
00:23:36,656 --> 00:23:37,696
Now, for symbols, there's


721
00:23:37,696 --> 00:23:39,176
actually no difference.


722
00:23:39,446 --> 00:23:40,826
You can still use vertical


723
00:23:40,896 --> 00:23:42,026
center alignments, and it's


724
00:23:42,026 --> 00:23:42,816
actually preferred.


725
00:23:44,756 --> 00:23:46,466
UIKit will actually take the


726
00:23:46,466 --> 00:23:48,376
typographic information in the


727
00:23:48,436 --> 00:23:50,546
symbol and use it to properly


728
00:23:50,546 --> 00:23:52,606
visually align the symbol versus


729
00:23:52,806 --> 00:23:53,746
the piece of text, and that


730
00:23:53,746 --> 00:23:55,706
might actually happen that the


731
00:23:55,706 --> 00:23:59,136
frames of the two elements are


732
00:23:59,136 --> 00:24:00,096
not matching up together.


733
00:24:00,096 --> 00:24:01,786
So the center is optically and


734
00:24:01,786 --> 00:24:05,066
not absolute, but you don't have


735
00:24:05,066 --> 00:24:05,656
to do anything.


736
00:24:05,816 --> 00:24:07,476
The system does it for you.


737
00:24:09,536 --> 00:24:11,156
There's, of course, also cases


738
00:24:11,156 --> 00:24:13,436
where labels have more than one


739
00:24:13,436 --> 00:24:15,516
line, and vertical centering


740
00:24:15,516 --> 00:24:16,496
works great here, too.


741
00:24:17,306 --> 00:24:18,416
Same for symbols, we'll still


742
00:24:18,416 --> 00:24:19,326
use the typographical


743
00:24:19,326 --> 00:24:20,836
information to properly align


744
00:24:20,836 --> 00:24:22,746
for the center of the label.


745
00:24:23,446 --> 00:24:24,996
This is great for disclosure


746
00:24:24,996 --> 00:24:26,206
indicators, for example.


747
00:24:27,346 --> 00:24:29,236
And looking back at our view,


748
00:24:29,936 --> 00:24:31,256
the disclosure indicator sits at


749
00:24:31,256 --> 00:24:32,366
the right place where I want it,


750
00:24:32,366 --> 00:24:35,196
but I actually want that avatar


751
00:24:35,196 --> 00:24:36,646
placeholder to be next to my


752
00:24:36,646 --> 00:24:37,226
first line.


753
00:24:37,316 --> 00:24:39,806
So let's move it.


754
00:24:39,806 --> 00:24:42,076
In this case, you can use


755
00:24:42,166 --> 00:24:44,106
baseline alignment, and up until


756
00:24:44,106 --> 00:24:45,686
now, it would be a bit hard to


757
00:24:45,686 --> 00:24:46,386
make this happen.


758
00:24:46,756 --> 00:24:48,046
You could do edge alignment,


759
00:24:48,046 --> 00:24:48,956
because you know the text and


760
00:24:48,956 --> 00:24:50,686
the label would be there, or you


761
00:24:50,686 --> 00:24:52,146
could do baseline alignment, but


762
00:24:52,146 --> 00:24:53,716
have to calculate offsets, so it


763
00:24:53,716 --> 00:24:54,336
would be weird.


764
00:24:54,676 --> 00:24:55,746
And in this case, for symbols,


765
00:24:55,746 --> 00:24:58,016
we can just baseline align, and


766
00:24:58,016 --> 00:24:58,976
that's it.


767
00:25:02,066 --> 00:25:02,426
Thank you.


768
00:25:03,516 --> 00:25:07,956
[ Applause ]


769
00:25:08,456 --> 00:25:09,576
And you can actually inspect


770
00:25:09,576 --> 00:25:11,926
this baseline because we


771
00:25:12,156 --> 00:25:14,716
introduced a new property on UI


772
00:25:14,716 --> 00:25:15,396
Image called


773
00:25:15,986 --> 00:25:17,566
baselineOffsetFromBottom, and it


774
00:25:17,566 --> 00:25:19,686
expresses, like it says, the


775
00:25:19,686 --> 00:25:21,526
offset to the baseline from the


776
00:25:21,526 --> 00:25:22,706
bottom of the image.


777
00:25:23,416 --> 00:25:25,186
And it's an optional CG float.


778
00:25:25,706 --> 00:25:27,236
Why? Because not all images have


779
00:25:27,296 --> 00:25:27,906
baselines.


780
00:25:28,046 --> 00:25:29,116
Symbols come with one by


781
00:25:29,166 --> 00:25:31,966
default, but other images don't


782
00:25:31,966 --> 00:25:32,326
have one.


783
00:25:32,906 --> 00:25:34,356
So you have to check if the


784
00:25:34,386 --> 00:25:36,356
image has a baseline in order to


785
00:25:36,356 --> 00:25:37,406
see if you can use it.


786
00:25:38,666 --> 00:25:39,486
In Objective-C, there's a


787
00:25:39,486 --> 00:25:40,336
separate method for it,


788
00:25:40,706 --> 00:25:41,456
because they don't have


789
00:25:41,826 --> 00:25:42,206
optionals.


790
00:25:44,826 --> 00:25:46,456
Now, these baselines might be --


791
00:25:46,576 --> 00:25:47,846
have unexpected values.


792
00:25:47,846 --> 00:25:49,576
In this case, we have two symbol


793
00:25:49,576 --> 00:25:49,966
images.


794
00:25:50,536 --> 00:25:51,356
They're right next to a piece of


795
00:25:51,416 --> 00:25:51,646
text.


796
00:25:51,886 --> 00:25:53,056
They have the same size, and


797
00:25:53,056 --> 00:25:54,286
they share the same baseline.


798
00:25:54,426 --> 00:25:56,136
But if we visualize their


799
00:25:56,136 --> 00:25:57,476
bounds, you can see that the


800
00:25:57,476 --> 00:25:58,836
chevron is sitting high above


801
00:25:58,836 --> 00:26:01,556
the baseline, and the cloud sits


802
00:26:01,556 --> 00:26:02,426
over the baseline.


803
00:26:03,316 --> 00:26:05,276
And looking at their values, you


804
00:26:05,276 --> 00:26:07,226
can see that expressing the


805
00:26:07,226 --> 00:26:08,456
offset from the bottom means


806
00:26:08,456 --> 00:26:10,046
that going up is a positive


807
00:26:10,046 --> 00:26:11,726
offset and going down is a


808
00:26:11,726 --> 00:26:13,266
negative offset.


809
00:26:14,326 --> 00:26:16,726
It also means that it's valid


810
00:26:16,726 --> 00:26:18,046
for an image to have a baseline


811
00:26:18,046 --> 00:26:19,516
that is outside of its bounds,


812
00:26:20,056 --> 00:26:21,036
in this case, the chevron.


813
00:26:21,886 --> 00:26:23,516
And if you have a baseline value


814
00:26:23,516 --> 00:26:24,636
of zero, it doesn't mean that


815
00:26:24,636 --> 00:26:25,766
you don't have a baseline.


816
00:26:25,896 --> 00:26:27,066
It means that the baseline is


817
00:26:27,066 --> 00:26:28,266
the same as the bottom of the


818
00:26:28,266 --> 00:26:28,686
image.


819
00:26:29,236 --> 00:26:30,566
It's a bit surprising, but it


820
00:26:30,566 --> 00:26:30,976
works.


821
00:26:33,196 --> 00:26:35,646
Now, the good thing is, we also


822
00:26:35,646 --> 00:26:38,366
added API to add baselines to


823
00:26:38,366 --> 00:26:38,876
images.


824
00:26:39,386 --> 00:26:41,076
You would use


825
00:26:41,116 --> 00:26:42,716
withBaselineOffsetFromBottom,


826
00:26:42,716 --> 00:26:43,936
and you would get a new image


827
00:26:44,006 --> 00:26:45,446
that has a baseline configured


828
00:26:45,446 --> 00:26:46,886
like you asked for.


829
00:26:47,146 --> 00:26:48,516
Again, this is an offset in


830
00:26:48,516 --> 00:26:50,626
screen points from the bottom of


831
00:26:50,626 --> 00:26:51,116
the image.


832
00:26:52,006 --> 00:26:53,196
Now, the nice thing is, the


833
00:26:53,196 --> 00:26:54,596
image will start behaving like a


834
00:26:54,666 --> 00:26:54,966
symbol.


835
00:26:54,966 --> 00:26:56,036
It's not a symbol, but will


836
00:26:56,036 --> 00:26:58,096
behave like a symbol, because it


837
00:26:58,096 --> 00:26:59,496
has some typographical


838
00:26:59,496 --> 00:27:00,136
information.


839
00:27:00,726 --> 00:27:02,156
And so, you can use the same


840
00:27:02,156 --> 00:27:04,216
layout for symbol images as for


841
00:27:04,216 --> 00:27:05,146
regular images.


842
00:27:05,506 --> 00:27:06,796
You don't have to check does


843
00:27:06,796 --> 00:27:07,876
this image have a baseline?


844
00:27:07,876 --> 00:27:09,926
Then I use this layout, or the


845
00:27:09,926 --> 00:27:11,456
other way around, and this makes


846
00:27:11,456 --> 00:27:12,496
that a lot easier.


847
00:27:12,816 --> 00:27:15,216
And looking at our example, we


848
00:27:15,216 --> 00:27:17,486
now have actual avatars, and


849
00:27:17,806 --> 00:27:20,176
some rows without avatars, and


850
00:27:20,236 --> 00:27:21,046
it looks much better.


851
00:27:21,046 --> 00:27:22,836
And I only had to do baseline


852
00:27:22,836 --> 00:27:24,486
alignment for this first line.


853
00:27:24,676 --> 00:27:26,026
It's really easy.


854
00:27:27,816 --> 00:27:29,516
I also want to touch briefly on


855
00:27:29,516 --> 00:27:30,566
horizontal alignments.


856
00:27:30,696 --> 00:27:32,096
You can see that the images are


857
00:27:32,516 --> 00:27:34,116
horizontally aligned on the same


858
00:27:34,116 --> 00:27:36,696
column, and you do this by


859
00:27:36,696 --> 00:27:38,246
specifying an offset that you


860
00:27:38,246 --> 00:27:40,146
want to align to, and then


861
00:27:40,196 --> 00:27:41,386
center the images on that


862
00:27:41,386 --> 00:27:41,696
offset.


863
00:27:41,696 --> 00:27:42,786
It's pretty easy.


864
00:27:43,106 --> 00:27:44,736
And then you can go from that


865
00:27:44,736 --> 00:27:46,766
offset to the text, or from the


866
00:27:46,766 --> 00:27:47,496
edge to the text.


867
00:27:47,496 --> 00:27:49,896
So you should actually center


868
00:27:49,896 --> 00:27:51,796
align, even horizontally, the


869
00:27:51,796 --> 00:27:53,986
images instead of applying a


870
00:27:53,986 --> 00:27:55,856
leading or a trailing constraint


871
00:27:55,856 --> 00:27:56,026
there.


872
00:27:59,976 --> 00:28:02,416
Now, let's go back to our spec.


873
00:28:02,416 --> 00:28:04,356
What I wanted to say is that,


874
00:28:04,356 --> 00:28:06,076
like, by default, it's probably


875
00:28:06,076 --> 00:28:07,366
a good idea to start with center


876
00:28:07,366 --> 00:28:09,126
alignment, both horizontally and


877
00:28:09,126 --> 00:28:09,576
vertically.


878
00:28:10,216 --> 00:28:11,356
In most cases, that's what you


879
00:28:11,356 --> 00:28:12,726
want, and the system will handle


880
00:28:12,726 --> 00:28:13,506
everything for you.


881
00:28:13,506 --> 00:28:14,676
It will use typographical


882
00:28:14,676 --> 00:28:16,486
information if it's available,


883
00:28:16,656 --> 00:28:18,166
and otherwise, it will use the


884
00:28:18,166 --> 00:28:19,526
old-style just centering.


885
00:28:19,726 --> 00:28:22,816
And in this case, Paolo


886
00:28:22,816 --> 00:28:24,966
specified baseline alignment,


887
00:28:24,966 --> 00:28:26,256
because the second line -- the


888
00:28:26,256 --> 00:28:27,526
second item has two lines.


889
00:28:27,576 --> 00:28:28,396
So we'd need to use the


890
00:28:28,396 --> 00:28:28,966
baseline.


891
00:28:29,516 --> 00:28:30,736
Then we can fall back to


892
00:28:30,736 --> 00:28:32,116
baseline alignment, but that's


893
00:28:32,116 --> 00:28:33,036
also very easy.


894
00:28:33,556 --> 00:28:35,876
And this spec also properly


895
00:28:35,876 --> 00:28:38,726
specifies horizontal alignment


896
00:28:38,766 --> 00:28:39,506
of the images.


897
00:28:40,646 --> 00:28:42,176
It makes the spec a lot easier


898
00:28:42,176 --> 00:28:43,206
to read.


899
00:28:44,576 --> 00:28:46,826
Now, let's go back to buttons.


900
00:28:47,836 --> 00:28:48,686
Buttons -- there's a lot of


901
00:28:48,686 --> 00:28:49,436
buttons in UIKit.


902
00:28:50,566 --> 00:28:51,776
We have two types of buttons,


903
00:28:52,156 --> 00:28:53,786
system buttons and regular


904
00:28:53,786 --> 00:28:54,066
buttons.


905
00:28:54,066 --> 00:28:55,066
Let's start with the system


906
00:28:55,066 --> 00:28:55,526
buttons.


907
00:28:58,186 --> 00:28:59,466
First of all, all buttons in


908
00:28:59,466 --> 00:29:01,736
UIKit come with a preset symbol


909
00:29:01,736 --> 00:29:04,006
configuration, and for system


910
00:29:04,006 --> 00:29:05,736
buttons, it's body large.


911
00:29:06,066 --> 00:29:07,836
That means that it reacts to


912
00:29:07,836 --> 00:29:09,326
dynamic type changes, has a body


913
00:29:09,326 --> 00:29:11,136
text style, and a large scale.


914
00:29:11,136 --> 00:29:13,886
Now, wouldn't it be great if you


915
00:29:13,886 --> 00:29:15,376
could create system buttons,


916
00:29:16,106 --> 00:29:17,556
like the info button in the


917
00:29:17,556 --> 00:29:19,086
available Wi-Fi networks list,


918
00:29:19,766 --> 00:29:21,086
but to create your own system


919
00:29:21,086 --> 00:29:22,366
buttons that looked exactly the


920
00:29:22,366 --> 00:29:23,426
same, with your own symbol


921
00:29:23,426 --> 00:29:23,706
image?


922
00:29:23,706 --> 00:29:25,056
Well, we thought it was a good


923
00:29:25,056 --> 00:29:26,736
idea, and we added some, an


924
00:29:26,736 --> 00:29:28,706
initializer on UIButton that


925
00:29:28,706 --> 00:29:29,856
allows you to create a system


926
00:29:29,856 --> 00:29:31,586
button with any symbol image.


927
00:29:31,826 --> 00:29:35,606
And it will behave like an --


928
00:29:35,676 --> 00:29:36,676
like a regular symbol image.


929
00:29:37,516 --> 00:29:41,466
[ Applause ]


930
00:29:41,966 --> 00:29:43,676
Now, let's go to regular


931
00:29:43,676 --> 00:29:44,106
buttons.


932
00:29:44,256 --> 00:29:45,956
In this case, I have a pop-over,


933
00:29:45,956 --> 00:29:49,796
and they're used as actions in


934
00:29:49,796 --> 00:29:50,596
this view.


935
00:29:50,906 --> 00:29:53,216
And symbols really shine here.


936
00:29:53,216 --> 00:29:54,616
They're really in their place.


937
00:29:55,886 --> 00:29:57,296
A regular button comes with a


938
00:29:57,296 --> 00:29:59,476
medium-scale preset.


939
00:30:00,796 --> 00:30:02,586
Now, having said -- talking


940
00:30:02,586 --> 00:30:03,996
about these preset scales, what


941
00:30:03,996 --> 00:30:05,026
if you want to change them?


942
00:30:05,026 --> 00:30:06,636
Well, there's similar API on


943
00:30:06,636 --> 00:30:08,716
UIButton, as on UIImageView,


944
00:30:08,716 --> 00:30:08,926
called


945
00:30:09,016 --> 00:30:10,986
PreferredSymbolConfiguration


946
00:30:11,036 --> 00:30:11,546
forState.


947
00:30:12,176 --> 00:30:13,596
That works exactly like the


948
00:30:13,596 --> 00:30:14,986
other content accessors on


949
00:30:14,986 --> 00:30:15,516
UIButton.


950
00:30:15,516 --> 00:30:17,176
You can set a configuration for


951
00:30:17,176 --> 00:30:18,016
certain states.


952
00:30:18,436 --> 00:30:19,586
And it gives you maximum


953
00:30:19,586 --> 00:30:21,536
flexibility because you can set


954
00:30:21,536 --> 00:30:22,366
an image, you can set a


955
00:30:22,366 --> 00:30:23,526
configuration, or you can set


956
00:30:23,526 --> 00:30:24,866
both, and it will work


957
00:30:24,926 --> 00:30:25,376
perfectly.


958
00:30:26,466 --> 00:30:27,916
Another button example is this


959
00:30:27,916 --> 00:30:28,146
one.


960
00:30:28,676 --> 00:30:30,636
It kind of shows what we mean


961
00:30:30,636 --> 00:30:32,696
with symbols and text really


962
00:30:32,696 --> 00:30:34,266
shine together, but it doesn't


963
00:30:34,266 --> 00:30:35,476
mean that they're always close


964
00:30:35,516 --> 00:30:35,876
together.


965
00:30:36,046 --> 00:30:37,546
These two buttons really belong


966
00:30:37,546 --> 00:30:39,406
together, and they're configured


967
00:30:39,406 --> 00:30:41,756
in the same way, both the left


968
00:30:41,756 --> 00:30:42,896
button and the right button.


969
00:30:43,406 --> 00:30:44,206
The preferred symbol


970
00:30:44,206 --> 00:30:45,816
configuration is matched with


971
00:30:45,816 --> 00:30:47,296
the font of that right button,


972
00:30:47,296 --> 00:30:48,416
and the only difference between


973
00:30:48,416 --> 00:30:50,416
the two is that the left one has


974
00:30:50,416 --> 00:30:52,196
a symbol, and the right one has


975
00:30:52,196 --> 00:30:52,816
a piece of text.


976
00:30:53,776 --> 00:30:54,866
And you can see that they share


977
00:30:54,866 --> 00:30:57,496
the same baseline, and because


978
00:30:57,496 --> 00:30:58,686
their configuration is exactly


979
00:30:58,686 --> 00:31:00,246
the same, they also share the


980
00:31:00,246 --> 00:31:01,486
same metrics, and it makes


981
00:31:01,546 --> 00:31:02,556
layout a lot easier.


982
00:31:06,116 --> 00:31:07,396
And to round off our button


983
00:31:07,396 --> 00:31:08,716
story -- I mentioned there's a


984
00:31:08,716 --> 00:31:09,696
lot of buttons in UIKit.


985
00:31:10,046 --> 00:31:11,576
We'll go to bar buttons.


986
00:31:12,386 --> 00:31:14,616
We have updated all the artwork


987
00:31:14,616 --> 00:31:16,046
in UIKit to use symbols.


988
00:31:16,046 --> 00:31:17,486
It not only applies to bar


989
00:31:17,486 --> 00:31:20,136
buttons, but everywhere, and bar


990
00:31:20,346 --> 00:31:22,176
buttons feel right in place with


991
00:31:22,176 --> 00:31:22,866
the new artwork.


992
00:31:23,226 --> 00:31:25,906
Now, if you do back-deploy to


993
00:31:26,506 --> 00:31:27,886
older systems, you have to keep


994
00:31:27,886 --> 00:31:28,866
in mind that if you create


995
00:31:28,866 --> 00:31:30,756
custom artwork, on older


996
00:31:30,756 --> 00:31:32,186
systems, you still get the


997
00:31:32,186 --> 00:31:34,626
previous, thinner artwork than


998
00:31:34,906 --> 00:31:36,226
the new, updated artwork.


999
00:31:36,226 --> 00:31:37,586
So keep that in mind if you


1000
00:31:37,586 --> 00:31:40,176
create assets for your


1001
00:31:40,296 --> 00:31:40,986
back-deployment.


1002
00:31:42,616 --> 00:31:45,806
You can use symbols in bar


1003
00:31:46,356 --> 00:31:47,316
buttons with images.


1004
00:31:47,426 --> 00:31:48,866
We have existing API for this,


1005
00:31:49,306 --> 00:31:51,046
and you just put a symbol in


1006
00:31:51,046 --> 00:31:51,256
there.


1007
00:31:51,256 --> 00:31:52,556
And it will feel right in place


1008
00:31:52,596 --> 00:31:53,926
with the system buttons.


1009
00:31:54,046 --> 00:31:54,936
You don't have to do anything


1010
00:31:54,936 --> 00:31:55,176
here.


1011
00:31:56,086 --> 00:31:59,776
That's all you have to do.


1012
00:31:59,776 --> 00:32:01,156
And again, like regular buttons,


1013
00:32:01,156 --> 00:32:03,036
bar buttons come with the preset


1014
00:32:03,076 --> 00:32:03,806
configuration.


1015
00:32:04,446 --> 00:32:05,996
And in any non-compact size


1016
00:32:05,996 --> 00:32:07,786
class, like in portrait mode on


1017
00:32:07,786 --> 00:32:10,276
your phone, the configuration


1018
00:32:10,276 --> 00:32:11,026
will be large.


1019
00:32:11,736 --> 00:32:15,096
If you then rotate your phone,


1020
00:32:15,096 --> 00:32:16,576
and end up in a compact size


1021
00:32:16,636 --> 00:32:17,656
class, we will change that


1022
00:32:17,656 --> 00:32:19,126
configuration on the button to


1023
00:32:19,126 --> 00:32:19,766
be medium.


1024
00:32:20,236 --> 00:32:21,456
And this will call the symbol to


1025
00:32:21,816 --> 00:32:23,836
slightly be smaller, and to fit


1026
00:32:23,836 --> 00:32:25,256
perfectly in the more compact


1027
00:32:25,296 --> 00:32:25,696
bars.


1028
00:32:26,506 --> 00:32:27,696
It also means that you don't


1029
00:32:27,696 --> 00:32:29,016
have to provide a secondary


1030
00:32:29,016 --> 00:32:30,856
image anymore, because the


1031
00:32:30,856 --> 00:32:31,736
system does all the work.


1032
00:32:31,736 --> 00:32:34,076
It will scale using the built-in


1033
00:32:34,116 --> 00:32:34,736
symbol scales.


1034
00:32:35,516 --> 00:32:39,596
[ Applause ]


1035
00:32:40,096 --> 00:32:41,906
And on the iPad, we're -- we


1036
00:32:41,906 --> 00:32:43,766
always have a large, because of


1037
00:32:43,766 --> 00:32:45,046
the things I mentioned before.


1038
00:32:45,626 --> 00:32:49,376
Now, another thing about symbols


1039
00:32:49,546 --> 00:32:51,086
is rendering modes.


1040
00:32:51,816 --> 00:32:53,156
Any regular image has, like,


1041
00:32:54,186 --> 00:32:56,356
color data built into it, but


1042
00:32:56,356 --> 00:32:57,586
for a symbol, it's different.


1043
00:32:57,586 --> 00:32:58,766
It has an intrinsic mode.


1044
00:32:59,236 --> 00:33:00,066
It doesn't have an intrinsic


1045
00:33:00,066 --> 00:33:00,326
color.


1046
00:33:00,326 --> 00:33:02,096
So we use the tint color to


1047
00:33:02,096 --> 00:33:06,146
render the symbol, and if we


1048
00:33:06,146 --> 00:33:07,206
don't have a tint color, we'll


1049
00:33:07,206 --> 00:33:07,716
use black.


1050
00:33:08,026 --> 00:33:09,056
But don't rely on that black,


1051
00:33:09,056 --> 00:33:10,416
because it don't want -- work


1052
00:33:10,496 --> 00:33:12,646
nice with dark mode, and it


1053
00:33:12,706 --> 00:33:14,136
might be subject to change.


1054
00:33:14,666 --> 00:33:16,896
How does this work?


1055
00:33:17,696 --> 00:33:20,186
The rendering mode on any image


1056
00:33:20,186 --> 00:33:22,656
is automatic, and up until now,


1057
00:33:22,856 --> 00:33:23,866
for any image, that would


1058
00:33:24,046 --> 00:33:25,486
usually resolve to always


1059
00:33:25,486 --> 00:33:25,946
original.


1060
00:33:26,526 --> 00:33:30,826
Now, in -- with symbols, that


1061
00:33:30,826 --> 00:33:31,216
changes.


1062
00:33:31,726 --> 00:33:33,346
Non-symbol images still usually


1063
00:33:33,346 --> 00:33:35,176
resolve to always original, but


1064
00:33:35,176 --> 00:33:36,986
symbol images will resolve to


1065
00:33:36,986 --> 00:33:37,746
always template.


1066
00:33:37,906 --> 00:33:39,166
And that means that we'll use


1067
00:33:39,166 --> 00:33:40,976
the tint color to give them a


1068
00:33:41,016 --> 00:33:43,106
color, and that's all there is


1069
00:33:43,146 --> 00:33:43,356
to it.


1070
00:33:43,936 --> 00:33:44,856
You can change the rendering


1071
00:33:44,856 --> 00:33:46,816
mode on an image with the


1072
00:33:46,816 --> 00:33:47,686
existing API.


1073
00:33:48,756 --> 00:33:50,206
Now, I've covered the basic


1074
00:33:50,206 --> 00:33:52,086
UIKit controls, but sometimes,


1075
00:33:52,086 --> 00:33:53,716
you do want to draw an image in


1076
00:33:53,716 --> 00:33:54,596
a graphic context.


1077
00:33:55,136 --> 00:33:56,476
And you would probably use


1078
00:33:56,766 --> 00:33:57,316
draw(in Rect.


1079
00:33:58,716 --> 00:34:00,446
Now, for symbols, like I


1080
00:34:00,446 --> 00:34:01,696
mentioned before, that's


1081
00:34:01,696 --> 00:34:02,706
probably not a good idea,


1082
00:34:02,706 --> 00:34:03,666
because they want to be their


1083
00:34:03,666 --> 00:34:04,406
natural size.


1084
00:34:04,486 --> 00:34:05,866
So it's better to use draw(at


1085
00:34:06,356 --> 00:34:08,045
and have the image decide how


1086
00:34:08,045 --> 00:34:09,005
large it wants to be.


1087
00:34:10,186 --> 00:34:11,016
But we have a problem.


1088
00:34:11,016 --> 00:34:12,335
We have this image, but it's too


1089
00:34:12,335 --> 00:34:12,726
small.


1090
00:34:13,775 --> 00:34:15,516
By default, images come with an


1091
00:34:15,556 --> 00:34:16,946
unspecified configuration.


1092
00:34:16,946 --> 00:34:18,896
Nothing is specified, and if


1093
00:34:18,896 --> 00:34:20,166
we're just -- if you have to


1094
00:34:20,166 --> 00:34:21,696
render it, and we don't find a


1095
00:34:21,696 --> 00:34:23,496
specific value, we'll fall back


1096
00:34:23,496 --> 00:34:24,636
to the system defaults.


1097
00:34:24,766 --> 00:34:26,356
And in this case, that ends up


1098
00:34:26,436 --> 00:34:27,726
with a pretty small image.


1099
00:34:28,306 --> 00:34:31,646
Now, I can create a


1100
00:34:31,646 --> 00:34:32,956
configuration to make it larger


1101
00:34:33,505 --> 00:34:36,266
-- 34 points, and a bold weight,


1102
00:34:36,505 --> 00:34:37,786
and then use new API


1103
00:34:38,416 --> 00:34:40,326
withConfiguration to apply that


1104
00:34:40,386 --> 00:34:41,755
configuration to the image, and


1105
00:34:42,416 --> 00:34:43,746
get a new image with that


1106
00:34:43,746 --> 00:34:44,916
configuration built in.


1107
00:34:45,565 --> 00:34:46,996
Which results in this larger,


1108
00:34:47,156 --> 00:34:48,906
slightly more bold teacup, which


1109
00:34:48,906 --> 00:34:49,976
is exactly what I wanted.


1110
00:34:54,476 --> 00:34:56,436
Going back to our pop-over,


1111
00:34:57,005 --> 00:34:59,856
Paolo also asked me to change


1112
00:35:00,296 --> 00:35:01,676
the text here, because symbols


1113
00:35:02,036 --> 00:35:02,896
feel at home in text.


1114
00:35:03,586 --> 00:35:05,636
Can we replace some words with


1115
00:35:05,756 --> 00:35:06,216
symbols?


1116
00:35:07,056 --> 00:35:10,036
Well, we can, but symbols are


1117
00:35:10,036 --> 00:35:11,926
typographic in nature, but they


1118
00:35:11,926 --> 00:35:12,756
are still images.


1119
00:35:12,806 --> 00:35:14,236
So we have to use an attributed


1120
00:35:14,236 --> 00:35:16,756
string with an NSTextAttachment.


1121
00:35:18,196 --> 00:35:19,206
Now, this code will look


1122
00:35:19,206 --> 00:35:20,856
familiar, but we have a new


1123
00:35:20,996 --> 00:35:22,506
piece of API,


1124
00:35:22,506 --> 00:35:24,426
NSTextAttachment(image that will


1125
00:35:24,426 --> 00:35:25,956
create a text attachment with


1126
00:35:25,956 --> 00:35:27,136
the image attached.


1127
00:35:28,306 --> 00:35:31,036
Now, this text attachment is a


1128
00:35:31,036 --> 00:35:32,206
bit smarter than the regular


1129
00:35:32,206 --> 00:35:32,416
one.


1130
00:35:32,996 --> 00:35:35,656
It knows about symbols, and it


1131
00:35:35,656 --> 00:35:37,316
will actually inspect the string


1132
00:35:37,316 --> 00:35:40,116
around the symbol to complete


1133
00:35:40,116 --> 00:35:41,686
the configuration of that symbol


1134
00:35:42,396 --> 00:35:43,286
as much as it can.


1135
00:35:43,286 --> 00:35:44,566
It will look at the font size.


1136
00:35:44,566 --> 00:35:45,696
It will look at the font weight,


1137
00:35:45,696 --> 00:35:46,626
but it will also look at the


1138
00:35:46,656 --> 00:35:48,546
color, and then the completed


1139
00:35:48,546 --> 00:35:49,446
image will be drawn.


1140
00:35:53,516 --> 00:35:57,176
[ Applause ]


1141
00:35:57,676 --> 00:36:00,036
The old API, or the existing API


1142
00:36:00,426 --> 00:36:01,646
creating a text attachment and


1143
00:36:01,646 --> 00:36:02,606
then assigning the image still


1144
00:36:02,606 --> 00:36:03,576
works, but it won't get the


1145
00:36:03,576 --> 00:36:04,326
matching behavior.


1146
00:36:04,886 --> 00:36:06,326
And of course, you can also use


1147
00:36:06,326 --> 00:36:07,636
this new API with any regular


1148
00:36:07,636 --> 00:36:08,016
image.


1149
00:36:09,396 --> 00:36:11,296
Paolo also wanted some color


1150
00:36:11,296 --> 00:36:11,526
here.


1151
00:36:12,666 --> 00:36:13,816
Looks better.


1152
00:36:16,176 --> 00:36:18,926
Yeah. And we created some new


1153
00:36:18,926 --> 00:36:19,526
API to do this.


1154
00:36:20,686 --> 00:36:22,216
You can tint an image now.


1155
00:36:22,836 --> 00:36:25,246
So withTintColor applies a color


1156
00:36:25,246 --> 00:36:26,906
to the image, and it does so


1157
00:36:26,906 --> 00:36:27,846
very efficiently.


1158
00:36:28,116 --> 00:36:30,066
It will only render the color


1159
00:36:30,126 --> 00:36:31,526
when it needs to, and then it


1160
00:36:31,526 --> 00:36:32,696
will look at the most efficient


1161
00:36:32,696 --> 00:36:33,526
way to do this.


1162
00:36:34,386 --> 00:36:35,386
And before, you would probably


1163
00:36:35,386 --> 00:36:37,066
have to rasterize an image, and


1164
00:36:37,066 --> 00:36:38,446
render into a graphics context,


1165
00:36:38,446 --> 00:36:39,436
and then apply a color.


1166
00:36:39,766 --> 00:36:40,436
You don't have to do that


1167
00:36:40,436 --> 00:36:40,796
anymore.


1168
00:36:41,296 --> 00:36:43,276
This takes care of this.


1169
00:36:44,516 --> 00:36:48,546
[ Applause ]


1170
00:36:49,046 --> 00:36:50,376
And it's especially important


1171
00:36:50,376 --> 00:36:51,496
for symbols, because they don't


1172
00:36:51,496 --> 00:36:52,766
have an intrinsic color, and


1173
00:36:52,766 --> 00:36:53,706
this will give them a color.


1174
00:36:54,196 --> 00:36:55,496
Now, symbols also have a


1175
00:36:55,496 --> 00:36:56,376
different rendering mode.


1176
00:36:56,376 --> 00:36:57,666
So if you really want that color


1177
00:36:57,726 --> 00:36:59,726
to pop out, you have to change


1178
00:36:59,726 --> 00:37:00,656
the rendering mode, and you can


1179
00:37:00,656 --> 00:37:01,926
do it in one go with this


1180
00:37:01,976 --> 00:37:02,946
optional parameter.


1181
00:37:03,586 --> 00:37:07,556
Now, these two APIs are not in


1182
00:37:07,556 --> 00:37:09,096
the first beta, but they will


1183
00:37:09,096 --> 00:37:09,506
come soon.


1184
00:37:13,226 --> 00:37:16,076
So we've seen a lot of API, and


1185
00:37:16,786 --> 00:37:18,356
we think we provided you with a


1186
00:37:18,356 --> 00:37:20,216
great tool set to make your apps


1187
00:37:20,506 --> 00:37:22,206
really shine in iOS 13.


1188
00:37:22,726 --> 00:37:25,076
But there's a few tips.


1189
00:37:25,736 --> 00:37:28,416
Prefer horizontal and vertical


1190
00:37:28,466 --> 00:37:30,106
centering over edge alignment.


1191
00:37:30,786 --> 00:37:31,926
It's a bit of a mental shift,


1192
00:37:32,176 --> 00:37:33,906
but once you figure it out, it


1193
00:37:33,906 --> 00:37:34,606
really works out.


1194
00:37:36,016 --> 00:37:37,476
And try to build your layouts


1195
00:37:37,476 --> 00:37:40,316
from the smallest element up to


1196
00:37:40,316 --> 00:37:41,126
the largest element.


1197
00:37:41,126 --> 00:37:42,256
It's pretty easy to start with


1198
00:37:42,256 --> 00:37:43,866
something small and then use it


1199
00:37:43,866 --> 00:37:44,786
as a building block to make


1200
00:37:44,826 --> 00:37:45,476
something larger.


1201
00:37:45,556 --> 00:37:47,946
And be flexible.


1202
00:37:48,026 --> 00:37:49,576
Image sizes can change.


1203
00:37:50,396 --> 00:37:52,516
Allow your image views to be the


1204
00:37:52,516 --> 00:37:54,646
size of their image but be aware


1205
00:37:54,646 --> 00:37:55,486
of the fact that they can


1206
00:37:55,486 --> 00:37:55,946
change.


1207
00:37:56,526 --> 00:37:58,686
It can be at run time, or it can


1208
00:37:58,686 --> 00:38:01,606
be over app launches, or even


1209
00:38:01,606 --> 00:38:02,966
over system updates.


1210
00:38:05,116 --> 00:38:06,946
Caching images usually doesn't


1211
00:38:06,946 --> 00:38:07,156
help.


1212
00:38:08,436 --> 00:38:09,816
It's a great source of bugs, and


1213
00:38:09,816 --> 00:38:11,306
the system already does its best


1214
00:38:11,356 --> 00:38:13,006
to provide the best performance


1215
00:38:13,166 --> 00:38:13,936
that it can.


1216
00:38:14,016 --> 00:38:16,186
And caching really gives you an


1217
00:38:16,186 --> 00:38:17,736
override, so there's no need to


1218
00:38:17,736 --> 00:38:18,086
do that.


1219
00:38:19,756 --> 00:38:22,026
And finally, rasterizing is, in


1220
00:38:22,026 --> 00:38:25,886
most cases, the worst solution,


1221
00:38:25,886 --> 00:38:27,586
or the least-optimal solution to


1222
00:38:27,586 --> 00:38:28,366
fix the problem.


1223
00:38:28,426 --> 00:38:32,386
So save your CPU cycles for


1224
00:38:32,386 --> 00:38:34,616
something useful, and let the


1225
00:38:34,616 --> 00:38:36,496
system rasterize an image.


1226
00:38:36,816 --> 00:38:38,316
So try to avoid rasterizing


1227
00:38:38,316 --> 00:38:40,486
images, especially symbol


1228
00:38:40,486 --> 00:38:40,946
images.


1229
00:38:43,556 --> 00:38:45,096
The accessibility and


1230
00:38:45,096 --> 00:38:46,206
localization sessions this


1231
00:38:46,206 --> 00:38:47,896
morning were -- are very


1232
00:38:48,066 --> 00:38:49,146
interesting to check out,


1233
00:38:49,146 --> 00:38:51,046
because symbols make adaptation


1234
00:38:51,046 --> 00:38:52,636
in those areas a lot simpler.


1235
00:38:52,636 --> 00:38:55,026
And there's the Implementing


1236
00:38:55,026 --> 00:38:56,376
Dark Mode tomorrow, where


1237
00:38:56,376 --> 00:38:57,576
symbols also really shine


1238
00:38:57,616 --> 00:39:00,576
because of dark tint color.


1239
00:39:01,676 --> 00:39:04,886
There are two labs you might be


1240
00:39:04,886 --> 00:39:05,486
interested in.


1241
00:39:05,486 --> 00:39:07,766
There's a text and SF symbols


1242
00:39:07,766 --> 00:39:09,796
lab, and fonts lab on Thursday,


1243
00:39:10,136 --> 00:39:11,446
and there's a design lab on


1244
00:39:11,446 --> 00:39:12,306
Friday afternoon.


1245
00:39:12,826 --> 00:39:15,256
And of course, you're welcome at


1246
00:39:15,256 --> 00:39:16,306
any of the UIKit labs.


1247
00:39:17,126 --> 00:39:18,266
Thank you so much for listening


1248
00:39:18,266 --> 00:39:19,576
and enjoy the rest of your WWDC.


1249
00:39:20,516 --> 00:39:26,500
[ Applause ]

