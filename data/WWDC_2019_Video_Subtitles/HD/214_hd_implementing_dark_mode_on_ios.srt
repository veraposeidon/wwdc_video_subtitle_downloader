1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:10,516 --> 00:00:15,096
[ Applause ]


3
00:00:15,596 --> 00:00:16,126
>> Good morning.


4
00:00:16,976 --> 00:00:18,406
Welcome to Implementing Dark


5
00:00:18,406 --> 00:00:19,546
Mode in iOS.


6
00:00:19,776 --> 00:00:20,956
I'm Kurt. I'll be presenting


7
00:00:20,956 --> 00:00:21,416
with Tyler.


8
00:00:22,826 --> 00:00:24,356
Now, when we added Dark Mode to


9
00:00:24,356 --> 00:00:26,626
iOS 13, we looked at every piece


10
00:00:26,626 --> 00:00:28,396
of the UI and made it look great


11
00:00:28,856 --> 00:00:30,156
in this new dark appearance.


12
00:00:30,456 --> 00:00:31,776
It's a whole new look for iOS.


13
00:00:32,846 --> 00:00:33,946
Now it's your turn.


14
00:00:34,136 --> 00:00:35,546
We're here to help you implement


15
00:00:35,546 --> 00:00:36,846
Dark Mode in your apps.


16
00:00:37,476 --> 00:00:39,246
It's easy and we'll demonstrate


17
00:00:39,246 --> 00:00:40,296
that to you with some live


18
00:00:40,296 --> 00:00:40,766
demos.


19
00:00:41,856 --> 00:00:43,556
It's also built on top of a very


20
00:00:43,556 --> 00:00:45,216
flexible and powerful system.


21
00:00:45,686 --> 00:00:46,896
So whatever you imagine that


22
00:00:46,896 --> 00:00:47,946
your app should look like in


23
00:00:47,946 --> 00:00:49,606
Dark Mode, you can achieve it.


24
00:00:51,056 --> 00:00:52,096
First, let's talk about the


25
00:00:52,096 --> 00:00:53,236
design of Dark Mode.


26
00:00:53,236 --> 00:00:54,616
Now, I'll start by showing an


27
00:00:54,616 --> 00:00:55,106
example.


28
00:00:56,116 --> 00:00:57,286
Here's settings of a very


29
00:00:57,286 --> 00:00:58,116
familiar app.


30
00:00:58,836 --> 00:01:00,176
You see that in Dark Mode, it's


31
00:01:00,176 --> 00:01:01,966
the same app in the same layout.


32
00:01:02,446 --> 00:01:03,496
It works the same way.


33
00:01:03,906 --> 00:01:04,796
It just has a different


34
00:01:04,796 --> 00:01:05,086
appearance.


35
00:01:06,006 --> 00:01:07,506
So, we've taken the iOS design


36
00:01:07,506 --> 00:01:09,226
system and extended it for the


37
00:01:09,226 --> 00:01:09,876
dark appearance.


38
00:01:10,846 --> 00:01:12,156
When we did that, we considered


39
00:01:12,156 --> 00:01:12,676
three things.


40
00:01:14,106 --> 00:01:15,776
First and most important,


41
00:01:16,056 --> 00:01:16,576
colors.


42
00:01:17,226 --> 00:01:19,116
iOS apps traditionally have hard


43
00:01:19,116 --> 00:01:20,716
coded all of their colors.


44
00:01:20,956 --> 00:01:22,776
You specify the RGB value of


45
00:01:22,886 --> 00:01:24,596
every piece of your UI.


46
00:01:25,286 --> 00:01:26,476
Now that we have Dark Mode,


47
00:01:26,476 --> 00:01:27,936
almost every one of those colors


48
00:01:27,936 --> 00:01:28,806
needs to change.


49
00:01:29,356 --> 00:01:30,496
And since there are so many


50
00:01:30,496 --> 00:01:31,526
colors, we need to keep


51
00:01:31,526 --> 00:01:32,116
organized.


52
00:01:33,576 --> 00:01:35,206
We do that using semantic


53
00:01:35,206 --> 00:01:35,746
colors.


54
00:01:35,986 --> 00:01:36,976
These are colors that have a


55
00:01:36,976 --> 00:01:38,666
name that explains what they


56
00:01:38,666 --> 00:01:39,206
signify.


57
00:01:40,026 --> 00:01:41,426
Our text label here uses the


58
00:01:41,426 --> 00:01:42,466
color label.


59
00:01:42,766 --> 00:01:44,136
That's a default color for text


60
00:01:44,136 --> 00:01:44,636
and labels.


61
00:01:45,836 --> 00:01:47,426
Our background is system grouped


62
00:01:47,426 --> 00:01:48,016
background.


63
00:01:48,076 --> 00:01:49,126
That's because we're in a


64
00:01:49,126 --> 00:01:51,316
grouped table view, and UI table


65
00:01:51,316 --> 00:01:52,516
view gives us that by default.


66
00:01:53,866 --> 00:01:55,076
Finally for this icon, we're


67
00:01:55,076 --> 00:01:56,356
using system blue.


68
00:01:56,896 --> 00:01:58,826
It's not just pure blue, but


69
00:01:58,826 --> 00:02:00,306
it's tweaked to fit with the


70
00:02:00,306 --> 00:02:01,216
rest of the colors.


71
00:02:02,156 --> 00:02:04,246
So, when we implement UI, we


72
00:02:04,246 --> 00:02:05,766
pick an appropriate semantic


73
00:02:05,766 --> 00:02:06,976
color for each piece.


74
00:02:08,836 --> 00:02:09,786
When we switch back to light


75
00:02:09,786 --> 00:02:11,226
mode, we're still using the same


76
00:02:11,276 --> 00:02:11,536
colors.


77
00:02:12,186 --> 00:02:13,116
But because these colors are


78
00:02:13,116 --> 00:02:14,886
dynamic, they can have different


79
00:02:14,886 --> 00:02:16,336
values in light and dark.


80
00:02:17,576 --> 00:02:19,116
The great thing is when you use


81
00:02:19,116 --> 00:02:21,076
these semantic dynamic colors,


82
00:02:21,376 --> 00:02:22,986
UI kit does the work for you.


83
00:02:22,986 --> 00:02:24,646
You don't have to think about


84
00:02:24,646 --> 00:02:26,166
what mode you're in and you


85
00:02:26,166 --> 00:02:27,456
don't have to do any work when


86
00:02:27,456 --> 00:02:28,216
the mode changes.


87
00:02:29,676 --> 00:02:30,846
Now, our design system provides


88
00:02:30,846 --> 00:02:32,426
a whole new palette of colors.


89
00:02:32,716 --> 00:02:33,716
I'll give some examples.


90
00:02:34,676 --> 00:02:35,906
We have a stack of background


91
00:02:35,906 --> 00:02:37,286
colors here designed to work


92
00:02:37,316 --> 00:02:37,686
together.


93
00:02:38,676 --> 00:02:40,526
System background is the base


94
00:02:40,566 --> 00:02:42,246
background color, it's pure


95
00:02:42,246 --> 00:02:43,246
white in light mode.


96
00:02:43,246 --> 00:02:44,926
That's very familiar, and pure


97
00:02:44,926 --> 00:02:46,046
black in dark mode.


98
00:02:47,296 --> 00:02:48,356
On top of that, there's


99
00:02:48,356 --> 00:02:50,566
secondary and tertiary system


100
00:02:50,566 --> 00:02:52,196
background colors, and these


101
00:02:52,196 --> 00:02:53,496
allow you to structure the


102
00:02:53,576 --> 00:02:55,216
information hierarchy of your


103
00:02:55,776 --> 00:02:55,856
app.


104
00:02:56,396 --> 00:02:58,146
Note that dark mode is not just


105
00:02:58,146 --> 00:02:59,616
a simple inversion of light


106
00:02:59,616 --> 00:02:59,856
mode.


107
00:03:00,006 --> 00:03:00,916
It's more subtle than that.


108
00:03:02,276 --> 00:03:03,706
We use this idea of hierarchy


109
00:03:03,706 --> 00:03:04,776
for text as well.


110
00:03:05,466 --> 00:03:06,676
There's four levels of text


111
00:03:06,676 --> 00:03:07,876
colors and they let you


112
00:03:07,876 --> 00:03:09,276
emphasize which elements are


113
00:03:09,276 --> 00:03:11,036
important relative to others.


114
00:03:11,946 --> 00:03:13,376
For instance, the primary color


115
00:03:13,376 --> 00:03:14,526
might be used for things like


116
00:03:14,576 --> 00:03:14,926
titles.


117
00:03:15,736 --> 00:03:16,986
The secondary color might be


118
00:03:16,986 --> 00:03:19,386
used for subtitles and so on.


119
00:03:20,436 --> 00:03:22,546
The full catalog of colors is in


120
00:03:22,546 --> 00:03:23,856
the human interface guidelines,


121
00:03:24,396 --> 00:03:25,976
what they are and when to use


122
00:03:25,976 --> 00:03:26,136
them.


123
00:03:26,896 --> 00:03:28,456
And we provide a lot of colors


124
00:03:28,806 --> 00:03:30,066
but you will need to make your


125
00:03:30,066 --> 00:03:30,236
own.


126
00:03:30,946 --> 00:03:32,016
You can make your own dynamic


127
00:03:32,016 --> 00:03:33,146
colors and we'll show you how to


128
00:03:33,146 --> 00:03:34,066
do that a little later.


129
00:03:35,476 --> 00:03:36,656
Now, let's move on to the second


130
00:03:36,656 --> 00:03:37,816
part of our design system -


131
00:03:37,886 --> 00:03:38,516
materials.


132
00:03:39,126 --> 00:03:40,456
Here's an example in photos.


133
00:03:41,346 --> 00:03:43,196
Materials are more than just


134
00:03:43,196 --> 00:03:43,666
colors.


135
00:03:44,126 --> 00:03:45,826
There are blur effects that look


136
00:03:45,826 --> 00:03:47,616
like a translucent material on


137
00:03:47,616 --> 00:03:48,536
top of a background.


138
00:03:49,446 --> 00:03:51,176
On top of that, there's vibrancy


139
00:03:51,426 --> 00:03:53,016
that cuts through the blur and


140
00:03:53,016 --> 00:03:53,586
stands out.


141
00:03:53,586 --> 00:03:55,796
Of course these look good on top


142
00:03:55,796 --> 00:03:58,026
of any photo that we have, and


143
00:03:58,026 --> 00:03:59,916
they work in dark and in light


144
00:03:59,916 --> 00:04:00,156
mode.


145
00:04:01,716 --> 00:04:03,206
The third part of the design


146
00:04:03,206 --> 00:04:05,686
system is the built-in views and


147
00:04:05,686 --> 00:04:07,366
controls provided by UIKit.


148
00:04:08,136 --> 00:04:09,406
These are made using the same


149
00:04:09,406 --> 00:04:10,966
colors and the same materials.


150
00:04:11,226 --> 00:04:12,706
Everything has been designed to


151
00:04:12,706 --> 00:04:13,406
fit together.


152
00:04:15,156 --> 00:04:16,755
So, when you design your app for


153
00:04:16,755 --> 00:04:18,276
Dark Mode, before you touch a


154
00:04:18,276 --> 00:04:20,375
single line of code, learn this


155
00:04:20,406 --> 00:04:22,256
design system and figure out how


156
00:04:22,256 --> 00:04:23,376
to take advantage of what it


157
00:04:23,416 --> 00:04:23,866
provides.


158
00:04:25,036 --> 00:04:26,896
Then, figure out what you'd like


159
00:04:26,896 --> 00:04:27,596
to customize.


160
00:04:28,536 --> 00:04:30,616
iOS apps have so much diversity


161
00:04:30,856 --> 00:04:32,166
that we can't provide everything


162
00:04:32,246 --> 00:04:33,766
for you, but we do give you the


163
00:04:33,766 --> 00:04:35,926
power to do anything you need.


164
00:04:37,056 --> 00:04:38,126
So, now that you've thought


165
00:04:38,126 --> 00:04:39,486
about your design, let's talk


166
00:04:39,486 --> 00:04:40,906
about how to implement it.


167
00:04:41,456 --> 00:04:44,256
As soon as you build using the


168
00:04:44,256 --> 00:04:47,236
iOS 13 SDK, your app can appear


169
00:04:47,236 --> 00:04:48,336
in Light and Dark.


170
00:04:49,196 --> 00:04:50,806
Switch the device to Dark Mode,


171
00:04:51,426 --> 00:04:52,826
run your app, and see what it


172
00:04:52,826 --> 00:04:53,316
looks like.


173
00:04:53,816 --> 00:04:55,126
The first thing you'll find is


174
00:04:55,126 --> 00:04:56,546
that you do have work to do.


175
00:04:57,166 --> 00:04:58,256
We can't do this for you


176
00:04:58,256 --> 00:04:58,936
automatically.


177
00:04:59,546 --> 00:05:00,766
And ultimately it is your


178
00:05:00,766 --> 00:05:02,086
responsibility to make the


179
00:05:02,086 --> 00:05:04,206
choices to make your app look


180
00:05:04,206 --> 00:05:05,216
good in Dark Mode.


181
00:05:06,236 --> 00:05:07,096
The first thing you'll need to


182
00:05:07,096 --> 00:05:08,746
do is start with colors.


183
00:05:10,066 --> 00:05:11,696
Now in the past, each UI color


184
00:05:11,696 --> 00:05:13,486
had only one single value.


185
00:05:13,686 --> 00:05:14,776
It was always the same.


186
00:05:15,566 --> 00:05:16,896
Now they can be dynamic.


187
00:05:17,956 --> 00:05:19,066
The color can have a different


188
00:05:19,066 --> 00:05:20,946
value in Light Mode and in Dark


189
00:05:20,946 --> 00:05:21,136
Mode.


190
00:05:22,086 --> 00:05:23,046
And when you set one of these


191
00:05:23,046 --> 00:05:24,716
dynamic colors on a view, for


192
00:05:24,716 --> 00:05:26,286
instance, as a background color


193
00:05:26,526 --> 00:05:28,566
or a text color, UIKit will


194
00:05:28,566 --> 00:05:29,826
automatically use the correct


195
00:05:29,826 --> 00:05:31,876
value and will update when the


196
00:05:31,876 --> 00:05:32,476
mode changes.


197
00:05:33,496 --> 00:05:34,986
So, you just set the color once.


198
00:05:36,006 --> 00:05:37,356
If you're familiar with macOS


199
00:05:37,356 --> 00:05:38,966
Dark Mode, this is how NSColor


200
00:05:38,966 --> 00:05:39,386
works.


201
00:05:39,386 --> 00:05:41,016
We're following the exact same


202
00:05:41,816 --> 00:05:41,966
pattern.


203
00:05:43,046 --> 00:05:43,946
So, let's get started.


204
00:05:43,946 --> 00:05:45,216
Let's implement Dark Mode in an


205
00:05:45,216 --> 00:05:45,316
app.


206
00:05:45,686 --> 00:05:47,006
Over to Tyler for a demo.


207
00:05:48,516 --> 00:05:53,946
[ Applause ]


208
00:05:54,446 --> 00:05:55,706
>> Thanks, Kurt.


209
00:05:58,456 --> 00:05:59,896
So, we have a simple demo app


210
00:05:59,896 --> 00:06:01,216
that we put together which was


211
00:06:01,216 --> 00:06:02,586
originally written against iOS


212
00:06:02,636 --> 00:06:04,186
12, and we want to walk you


213
00:06:04,186 --> 00:06:05,426
through some of the changes that


214
00:06:05,426 --> 00:06:06,666
we'll make to update this to


215
00:06:06,666 --> 00:06:08,636
support Dark Mode in iOS 13.


216
00:06:10,556 --> 00:06:11,326
This should hopefully give you


217
00:06:11,326 --> 00:06:12,456
an idea of some of the types of


218
00:06:12,456 --> 00:06:13,536
changes that you'll be making in


219
00:06:13,536 --> 00:06:14,266
your own apps.


220
00:06:14,676 --> 00:06:15,996
So, here's our app running in a


221
00:06:15,996 --> 00:06:16,966
simulator on the right.


222
00:06:17,756 --> 00:06:18,386
It's pretty simple.


223
00:06:18,386 --> 00:06:20,066
So, why don't we just start by


224
00:06:20,066 --> 00:06:21,516
flipping it into Dark Mode and


225
00:06:21,516 --> 00:06:22,446
seeing how things look.


226
00:06:23,356 --> 00:06:24,626
We can do that using the new


227
00:06:24,626 --> 00:06:26,466
environment overrides feature in


228
00:06:26,506 --> 00:06:26,916
Xcode.


229
00:06:27,206 --> 00:06:28,306
So, we're running from Xcode


230
00:06:28,306 --> 00:06:28,576
here.


231
00:06:29,006 --> 00:06:30,896
We can just apply a dark user


232
00:06:30,896 --> 00:06:32,346
interface dial override by


233
00:06:32,346 --> 00:06:33,406
toggling that switch.


234
00:06:33,936 --> 00:06:35,746
And if you noticed, our app


235
00:06:35,746 --> 00:06:36,666
reacted right away.


236
00:06:36,736 --> 00:06:37,676
It turned into Dark Mode.


237
00:06:38,706 --> 00:06:39,936
Now, you might've noticed that


238
00:06:39,986 --> 00:06:41,236
for example the tab bar at the


239
00:06:41,236 --> 00:06:42,886
bottom of the screen changed.


240
00:06:43,446 --> 00:06:44,446
And that's because we're using a


241
00:06:44,446 --> 00:06:46,156
UIKit standard tab bar, so we


242
00:06:46,156 --> 00:06:47,156
got all of that for free.


243
00:06:48,066 --> 00:06:49,606
But of course our app didn't


244
00:06:49,606 --> 00:06:51,236
rally get very dark and that's


245
00:06:51,236 --> 00:06:52,336
because we have some work to do.


246
00:06:52,336 --> 00:06:54,586
So, why don't we switch over and


247
00:06:54,586 --> 00:06:56,156
take a look at how our UI is


248
00:06:56,226 --> 00:06:57,196
built in the storyboard.


249
00:06:58,856 --> 00:07:00,226
So, here's our home screen of


250
00:07:00,226 --> 00:07:00,556
our app.


251
00:07:01,096 --> 00:07:02,116
And the first thing that we


252
00:07:02,116 --> 00:07:03,036
should probably take a look at


253
00:07:03,036 --> 00:07:04,066
is why we have this white


254
00:07:04,126 --> 00:07:05,306
background sitting behind


255
00:07:05,306 --> 00:07:05,756
everything.


256
00:07:06,846 --> 00:07:09,056
We can select that view in our


257
00:07:09,056 --> 00:07:09,846
storyboard here.


258
00:07:10,046 --> 00:07:11,036
And if you look in the


259
00:07:11,036 --> 00:07:12,096
attributes inspector on the


260
00:07:12,096 --> 00:07:13,016
right, you can see that we're


261
00:07:13,016 --> 00:07:14,276
setting a hard-coded white


262
00:07:14,316 --> 00:07:14,706
color.


263
00:07:15,306 --> 00:07:17,026
That might've been fine before,


264
00:07:17,366 --> 00:07:18,396
but we now want to switch to


265
00:07:18,396 --> 00:07:19,926
using one of these new dynamic


266
00:07:19,926 --> 00:07:21,206
colors that Kurt talked about.


267
00:07:21,806 --> 00:07:23,816
So, a great choice is the system


268
00:07:23,816 --> 00:07:24,556
background color.


269
00:07:24,886 --> 00:07:26,086
So, you can find all these


270
00:07:26,186 --> 00:07:27,636
system colors in this new list


271
00:07:27,636 --> 00:07:27,896
here.


272
00:07:27,896 --> 00:07:29,406
We'll choose system background.


273
00:07:30,276 --> 00:07:31,676
And nothing actually changed


274
00:07:31,676 --> 00:07:32,486
when we did that, and that's


275
00:07:32,486 --> 00:07:33,686
because system background color


276
00:07:33,686 --> 00:07:35,376
is still white in light mode.


277
00:07:35,716 --> 00:07:37,506
But what we can do is write in


278
00:07:37,506 --> 00:07:38,876
the storyboard editor, switch


279
00:07:38,876 --> 00:07:40,616
our preview to see what it's


280
00:07:40,616 --> 00:07:41,906
going to look like in Dark Mode.


281
00:07:42,466 --> 00:07:44,706
So, if we do that, we can now


282
00:07:44,706 --> 00:07:46,676
see that we're getting a dark


283
00:07:46,776 --> 00:07:47,666
background color here.


284
00:07:48,266 --> 00:07:50,626
But of course, our text just


285
00:07:50,626 --> 00:07:51,176
disappeared.


286
00:07:51,176 --> 00:07:51,706
What happened?


287
00:07:52,946 --> 00:07:54,366
Well, we have black text drawing


288
00:07:54,366 --> 00:07:55,576
on top of a black background.


289
00:07:56,326 --> 00:07:57,516
So, we need to actually go in


290
00:07:57,516 --> 00:07:59,026
here and we can choose, let's


291
00:07:59,026 --> 00:08:00,276
start with the title label.


292
00:08:01,326 --> 00:08:03,036
And we can see on the right that


293
00:08:03,036 --> 00:08:04,386
we have this configured also


294
00:08:04,386 --> 00:08:05,816
with a hard-coded black color


295
00:08:05,816 --> 00:08:06,206
for the text.


296
00:08:07,086 --> 00:08:07,906
So, once again, we need to


297
00:08:07,906 --> 00:08:08,906
switch that to one of these new


298
00:08:08,906 --> 00:08:09,786
dynamic colors.


299
00:08:10,426 --> 00:08:12,296
In this case, we have a great


300
00:08:12,296 --> 00:08:13,836
choice with the label color.


301
00:08:14,566 --> 00:08:16,456
That's going to give us white in


302
00:08:16,456 --> 00:08:16,836
Dark Mode.


303
00:08:18,176 --> 00:08:19,456
Similarly, we select our text


304
00:08:19,456 --> 00:08:19,746
view.


305
00:08:20,536 --> 00:08:22,336
It's also set to black, so we'll


306
00:08:22,336 --> 00:08:23,356
need to update that as well.


307
00:08:26,156 --> 00:08:27,306
So, now that we've made those


308
00:08:27,306 --> 00:08:28,696
changes, how about we run in the


309
00:08:28,696 --> 00:08:29,916
simulator and see how things are


310
00:08:29,916 --> 00:08:33,626
actually starting to look.


311
00:08:33,866 --> 00:08:35,385
Here's our app running in light


312
00:08:35,385 --> 00:08:35,616
mode.


313
00:08:36,405 --> 00:08:37,466
We'll once again go to those


314
00:08:37,466 --> 00:08:39,395
environment overrides and toggle


315
00:08:39,395 --> 00:08:39,966
it into dark.


316
00:08:40,686 --> 00:08:42,826
And now we're seeing a lot more


317
00:08:42,826 --> 00:08:43,256
updating.


318
00:08:43,395 --> 00:08:44,796
And so it's looking pretty good.


319
00:08:45,266 --> 00:08:46,396
But what if we want to go a


320
00:08:46,396 --> 00:08:47,096
little bit further?


321
00:08:47,796 --> 00:08:49,476
So, at the top we have this star


322
00:08:49,476 --> 00:08:49,796
image.


323
00:08:49,796 --> 00:08:50,786
That's our app's logo.


324
00:08:51,176 --> 00:08:52,656
And we want to customize that


325
00:08:52,656 --> 00:08:54,446
with a different color in Dark


326
00:08:54,446 --> 00:08:54,676
Mode.


327
00:08:55,816 --> 00:08:57,346
So, this is easily possible.


328
00:08:57,826 --> 00:09:00,316
We can select the image in our


329
00:09:00,316 --> 00:09:00,866
storyboard.


330
00:09:01,266 --> 00:09:02,156
You'll see this is an image


331
00:09:02,156 --> 00:09:02,436
view.


332
00:09:02,516 --> 00:09:04,006
It's configured with an image


333
00:09:04,006 --> 00:09:04,886
that comes from our asset


334
00:09:04,886 --> 00:09:05,406
catalog.


335
00:09:06,046 --> 00:09:07,336
And this image is set up to


336
00:09:07,336 --> 00:09:08,536
render as a template image,


337
00:09:08,536 --> 00:09:10,016
which means that any tint color


338
00:09:10,016 --> 00:09:12,086
set on the image view is going


339
00:09:12,086 --> 00:09:13,166
to tint the image.


340
00:09:13,776 --> 00:09:14,886
So, here we're tinting it with


341
00:09:14,936 --> 00:09:16,496
this custom logo color that


342
00:09:16,496 --> 00:09:17,516
we've already defined in our


343
00:09:17,516 --> 00:09:18,256
asset catalog.


344
00:09:18,786 --> 00:09:19,916
Let's click this little arrow


345
00:09:19,916 --> 00:09:21,316
right here to jump straight to


346
00:09:21,316 --> 00:09:23,596
that color and see how it's set


347
00:09:23,596 --> 00:09:23,736
up.


348
00:09:24,346 --> 00:09:25,406
So, here's that color.


349
00:09:25,406 --> 00:09:27,116
It's this custom green color.


350
00:09:27,906 --> 00:09:29,276
If we want to add a different


351
00:09:29,276 --> 00:09:30,956
appearance for Dark Mode, we can


352
00:09:30,956 --> 00:09:32,886
do that now by opening up a new


353
00:09:32,886 --> 00:09:34,836
slot specific for the dark


354
00:09:34,836 --> 00:09:35,436
appearance.


355
00:09:36,706 --> 00:09:38,256
Once we've done that, we can


356
00:09:38,366 --> 00:09:39,496
select the dark appearance and


357
00:09:39,496 --> 00:09:41,016
change it, let's say to a nice


358
00:09:41,186 --> 00:09:42,876
yellow perhaps, something like


359
00:09:42,906 --> 00:09:43,166
that.


360
00:09:44,196 --> 00:09:45,766
And now we have a color set up


361
00:09:45,826 --> 00:09:47,556
to automatically switch between


362
00:09:47,556 --> 00:09:48,446
two different appearances in


363
00:09:48,446 --> 00:09:48,916
light and dark.


364
00:09:50,096 --> 00:09:52,026
So, if I save and switch back to


365
00:09:52,026 --> 00:09:55,076
our storyboard, you can see that


366
00:09:55,076 --> 00:09:57,516
as we toggle between light and


367
00:09:57,516 --> 00:09:59,466
dark in the preview, we're


368
00:09:59,466 --> 00:10:00,816
getting that automatic updating,


369
00:10:00,986 --> 00:10:01,446
which is great.


370
00:10:03,516 --> 00:10:06,516
[ Applause ]


371
00:10:07,016 --> 00:10:07,606
But there's more.


372
00:10:08,416 --> 00:10:09,336
What if we want to actually


373
00:10:09,336 --> 00:10:10,636
update that background image?


374
00:10:10,636 --> 00:10:11,606
So right now it's a nice


375
00:10:11,606 --> 00:10:12,896
tropical beach scene during the


376
00:10:12,896 --> 00:10:13,286
day.


377
00:10:13,466 --> 00:10:14,596
Wouldn't it be cool if it kind


378
00:10:14,596 --> 00:10:16,646
of got to a nice sunset-darkened


379
00:10:16,646 --> 00:10:18,956
appearance in Dark Mode?


380
00:10:19,746 --> 00:10:20,856
We can select that image view


381
00:10:20,856 --> 00:10:22,096
and do something really similar


382
00:10:22,096 --> 00:10:23,206
to what we did with the color.


383
00:10:23,786 --> 00:10:25,066
So, here we have an image view,


384
00:10:25,066 --> 00:10:26,396
it's configured with this header


385
00:10:26,396 --> 00:10:27,846
image in our asset catalog.


386
00:10:27,846 --> 00:10:29,216
We'll click the arrow to jump


387
00:10:29,216 --> 00:10:29,896
directly to that.


388
00:10:31,376 --> 00:10:32,266
Here's where that image is set


389
00:10:32,266 --> 00:10:32,396
up.


390
00:10:33,066 --> 00:10:34,066
And just like you saw with the


391
00:10:34,066 --> 00:10:35,776
color, it's really just the same


392
00:10:35,776 --> 00:10:36,116
thing.


393
00:10:36,196 --> 00:10:38,216
You can open up a new slot for


394
00:10:38,216 --> 00:10:39,936
the dark appearance and then all


395
00:10:39,936 --> 00:10:42,096
we need to do is grab that


396
00:10:42,896 --> 00:10:45,126
sunset image, drag that in.


397
00:10:46,046 --> 00:10:47,836
I'll save and just let's run for


398
00:10:47,876 --> 00:10:48,846
real and see what everything


399
00:10:48,846 --> 00:10:50,536
looks like in the simulator now.


400
00:10:52,976 --> 00:10:54,446
So, this is light mode.


401
00:10:54,606 --> 00:10:55,476
Nothing has changed.


402
00:10:55,476 --> 00:10:56,806
It's all what we started with,


403
00:10:56,806 --> 00:10:57,816
even with all these changes.


404
00:10:58,326 --> 00:11:00,116
But once we flip into Dark using


405
00:11:00,116 --> 00:11:02,496
our environment overrides, now


406
00:11:02,716 --> 00:11:04,076
everything on this screen has


407
00:11:04,076 --> 00:11:05,936
been updated to support Dark


408
00:11:05,936 --> 00:11:06,136
Mode.


409
00:11:07,516 --> 00:11:10,406
[ Applause ]


410
00:11:10,906 --> 00:11:12,356
So the really cool thing that


411
00:11:12,356 --> 00:11:13,946
you've seen here is that by


412
00:11:13,946 --> 00:11:15,076
using all of these dynamic


413
00:11:15,076 --> 00:11:16,666
colors and taking advantage of


414
00:11:16,666 --> 00:11:18,436
these dynamic images and custom


415
00:11:18,436 --> 00:11:20,296
colors in the asset catalog, we


416
00:11:20,296 --> 00:11:21,456
were able to get Dark Mode


417
00:11:21,456 --> 00:11:23,456
working without any code.


418
00:11:24,106 --> 00:11:25,416
This is the advantage of taking


419
00:11:25,416 --> 00:11:26,266
advantage of all of this


420
00:11:26,336 --> 00:11:27,796
infrastructure that we provide


421
00:11:27,796 --> 00:11:29,536
for you in Xcode and UIKit.


422
00:11:30,386 --> 00:11:31,596
You can also make these same


423
00:11:31,596 --> 00:11:33,036
sorts of changes to your app's


424
00:11:33,186 --> 00:11:34,476
Launch storyboard to support


425
00:11:34,476 --> 00:11:36,046
Dark Mode when your app is


426
00:11:36,046 --> 00:11:38,156
launching as well.


427
00:11:38,366 --> 00:11:40,386
So, now why don't we take a look


428
00:11:40,386 --> 00:11:41,846
at another screen in our app.


429
00:11:42,396 --> 00:11:43,866
If you tap this Learn More


430
00:11:43,866 --> 00:11:45,736
button, we present a view


431
00:11:45,856 --> 00:11:47,556
controller here in this new


432
00:11:47,556 --> 00:11:48,746
card-style presentation.


433
00:11:48,746 --> 00:11:49,996
And of course we're going to


434
00:11:49,996 --> 00:11:51,166
want to make this support Dark


435
00:11:51,166 --> 00:11:51,696
Mode as well.


436
00:11:52,066 --> 00:11:53,556
The interesting thing here is


437
00:11:53,556 --> 00:11:54,916
that on the bottom half, you can


438
00:11:54,916 --> 00:11:56,176
see we're taking advantage of


439
00:11:56,176 --> 00:11:57,336
some materials.


440
00:11:57,746 --> 00:11:59,406
So, we have a blur over this


441
00:11:59,446 --> 00:12:00,746
background image and then we


442
00:12:00,746 --> 00:12:02,306
have a vibrant label sitting on


443
00:12:02,306 --> 00:12:02,856
top of that.


444
00:12:03,416 --> 00:12:04,506
I'll hand things back over to


445
00:12:04,556 --> 00:12:05,996
Kurt to talk a little bit more


446
00:12:05,996 --> 00:12:07,316
about how you can use these


447
00:12:07,316 --> 00:12:09,276
visual effects to automatically


448
00:12:09,276 --> 00:12:10,586
update for Dark Mode as well.


449
00:12:14,196 --> 00:12:15,156
>> Thank you, Tyler.


450
00:12:16,016 --> 00:12:18,426
[ Applause ]


451
00:12:18,926 --> 00:12:20,516
So, let me show some examples of


452
00:12:20,516 --> 00:12:21,216
these materials.


453
00:12:21,936 --> 00:12:23,256
Here's some new blur effects.


454
00:12:24,046 --> 00:12:26,356
There's thick, regular, thin,


455
00:12:26,816 --> 00:12:27,976
and ultra thin styles.


456
00:12:28,376 --> 00:12:29,276
And of course these work in


457
00:12:29,276 --> 00:12:30,686
light and in dark.


458
00:12:31,656 --> 00:12:32,736
Now here's how to use them.


459
00:12:33,846 --> 00:12:35,156
Let's say in my app I have some


460
00:12:35,156 --> 00:12:36,806
views in the background and I


461
00:12:36,806 --> 00:12:38,456
want a blur on top of them.


462
00:12:39,206 --> 00:12:40,636
First thing we do is create a


463
00:12:40,636 --> 00:12:43,106
UIBlur effect, and we specify a


464
00:12:43,106 --> 00:12:43,906
style.


465
00:12:44,136 --> 00:12:45,126
In this case, we're going to use


466
00:12:45,126 --> 00:12:46,086
system material.


467
00:12:46,146 --> 00:12:47,396
That's a good default choice.


468
00:12:48,636 --> 00:12:51,046
Next, we create a UIVisual


469
00:12:51,046 --> 00:12:52,756
effect view using that effect.


470
00:12:53,956 --> 00:12:55,346
We make sure its size and


471
00:12:55,346 --> 00:12:56,886
position are appropriate, then


472
00:12:56,886 --> 00:12:58,176
we put the visual effect view


473
00:12:58,286 --> 00:12:59,456
into our view hierarchy.


474
00:13:00,756 --> 00:13:02,196
You see that it blurs everything


475
00:13:02,196 --> 00:13:02,736
underneath it.


476
00:13:02,936 --> 00:13:03,606
It's pretty simple.


477
00:13:05,446 --> 00:13:06,946
Now, on top of Blur effects, you


478
00:13:06,946 --> 00:13:08,286
can have vibrant content.


479
00:13:08,866 --> 00:13:10,166
The vibrancy effect let's some


480
00:13:10,166 --> 00:13:11,416
of the background material pass


481
00:13:11,416 --> 00:13:12,036
through.


482
00:13:12,676 --> 00:13:13,886
And in the past, there was only


483
00:13:13,886 --> 00:13:16,066
one style of vibrancy but now


484
00:13:16,066 --> 00:13:16,756
there are several.


485
00:13:17,286 --> 00:13:18,746
There's four styles for text,


486
00:13:19,456 --> 00:13:21,106
three styles for larger filled


487
00:13:21,106 --> 00:13:23,486
areas, and even a style for thin


488
00:13:23,566 --> 00:13:24,346
separator lines.


489
00:13:25,086 --> 00:13:26,056
Of course, these work in light


490
00:13:26,156 --> 00:13:26,786
and in dark.


491
00:13:28,236 --> 00:13:29,326
So, here's how to implement


492
00:13:29,326 --> 00:13:29,846
vibrancy.


493
00:13:30,726 --> 00:13:32,396
Now, vibrancy's always added on


494
00:13:32,476 --> 00:13:33,946
top of Blur, so, we're starting


495
00:13:33,946 --> 00:13:35,306
with the same setup from before.


496
00:13:36,406 --> 00:13:38,396
We'll make a vibrancy effect and


497
00:13:38,396 --> 00:13:39,776
we specify a style.


498
00:13:40,206 --> 00:13:41,316
In this case, I'm using fill


499
00:13:41,316 --> 00:13:42,186
because I'm going to show a


500
00:13:42,186 --> 00:13:43,116
larger filled area.


501
00:13:44,306 --> 00:13:45,626
Note that when you create a


502
00:13:45,626 --> 00:13:46,976
vibrancy effect, you give it a


503
00:13:46,976 --> 00:13:48,316
reference to a Blur effect.


504
00:13:48,636 --> 00:13:50,156
The two things operate together.


505
00:13:51,606 --> 00:13:52,866
To show the vibrancy effect, we


506
00:13:52,866 --> 00:13:54,456
make another visual effect view,


507
00:13:55,266 --> 00:13:56,576
and then we'll put that inside


508
00:13:56,616 --> 00:13:57,216
the Blur effect.


509
00:13:57,216 --> 00:13:58,626
Now, there's something a little


510
00:13:58,626 --> 00:13:59,776
subtle here, is that we don't


511
00:13:59,776 --> 00:14:01,886
ever add views directly as


512
00:14:01,886 --> 00:14:03,466
subviews of a visual effect


513
00:14:03,556 --> 00:14:03,806
view.


514
00:14:04,186 --> 00:14:05,406
Instead, we go through its


515
00:14:05,406 --> 00:14:06,196
content view.


516
00:14:07,566 --> 00:14:08,866
Now we'll add the views that


517
00:14:08,866 --> 00:14:09,786
become vibrant.


518
00:14:10,326 --> 00:14:11,916
So again, I get the content view


519
00:14:12,506 --> 00:14:13,656
and then I add the views that


520
00:14:13,656 --> 00:14:15,026
will become vibrant and you see


521
00:14:15,026 --> 00:14:15,686
how it looks.


522
00:14:16,546 --> 00:14:18,086
In this case, our view has an


523
00:14:18,086 --> 00:14:19,596
opaque background color.


524
00:14:20,256 --> 00:14:21,606
But instead of its normal color,


525
00:14:21,606 --> 00:14:23,056
you see the vibrancy effect


526
00:14:23,056 --> 00:14:23,546
instead.


527
00:14:24,216 --> 00:14:25,006
That's because with this


528
00:14:25,006 --> 00:14:27,096
vibrancy style, the color is


529
00:14:27,096 --> 00:14:29,036
ignored and only the alpha is


530
00:14:29,036 --> 00:14:29,446
used.


531
00:14:30,456 --> 00:14:31,676
So, over to Tyler again to


532
00:14:31,676 --> 00:14:33,136
finish adding materials to our


533
00:14:33,136 --> 00:14:34,426
demo app.


534
00:14:36,516 --> 00:14:41,500
[ Applause ]


535
00:14:44,946 --> 00:14:47,046
>> Okay. So, we're back on this


536
00:14:47,086 --> 00:14:48,926
learn more screen and the


537
00:14:48,926 --> 00:14:50,256
difference between this screen


538
00:14:50,326 --> 00:14:51,366
and the last screen that we


539
00:14:51,366 --> 00:14:52,966
worked on is that this one is


540
00:14:52,966 --> 00:14:54,566
actually built entirely in code.


541
00:14:55,536 --> 00:14:56,936
So, here we are in our view


542
00:14:56,936 --> 00:14:58,476
controller, and you can see that


543
00:14:58,476 --> 00:14:59,556
everything's assembled in this


544
00:14:59,556 --> 00:15:00,296
Load View method.


545
00:15:00,896 --> 00:15:01,966
Before we actually get started,


546
00:15:01,966 --> 00:15:03,196
why don't we just try flipping


547
00:15:03,196 --> 00:15:04,266
on Dark Mode and seeing how


548
00:15:04,266 --> 00:15:04,676
things look.


549
00:15:06,006 --> 00:15:07,606
We'll go here to our environment


550
00:15:07,606 --> 00:15:10,186
overrides, switch to Dark, and


551
00:15:10,466 --> 00:15:11,476
if you notice, there's actually


552
00:15:11,476 --> 00:15:12,516
a few things that changed.


553
00:15:12,806 --> 00:15:14,136
We got the navigation bar this


554
00:15:14,186 --> 00:15:15,296
time for free, because that's


555
00:15:15,296 --> 00:15:16,216
coming from UIKit.


556
00:15:16,906 --> 00:15:18,886
We also already have our dynamic


557
00:15:19,066 --> 00:15:20,986
custom color and the custom


558
00:15:20,986 --> 00:15:22,366
image set up, and it's the same


559
00:15:22,366 --> 00:15:23,656
ones that we updated before, so


560
00:15:23,656 --> 00:15:24,656
those are already working as


561
00:15:24,656 --> 00:15:24,846
well.


562
00:15:25,396 --> 00:15:26,406
But of course, you can see we


563
00:15:26,406 --> 00:15:27,576
still have a white background


564
00:15:27,936 --> 00:15:29,336
and those materials don't look


565
00:15:29,416 --> 00:15:30,876
particularly great in the dark


566
00:15:31,006 --> 00:15:31,676
appearance here.


567
00:15:31,676 --> 00:15:32,306
So, we're going to make some


568
00:15:32,306 --> 00:15:32,676
changes.


569
00:15:33,546 --> 00:15:35,216
So, let's take a look at how all


570
00:15:35,216 --> 00:15:35,796
of this is built.


571
00:15:36,556 --> 00:15:38,206
The first thing that we do is


572
00:15:38,236 --> 00:15:39,466
set up this view in the


573
00:15:39,466 --> 00:15:39,976
background.


574
00:15:39,976 --> 00:15:41,066
This is where the white is


575
00:15:41,066 --> 00:15:41,556
coming from.


576
00:15:41,886 --> 00:15:42,526
Just like you saw in the


577
00:15:42,526 --> 00:15:44,156
storyboard, we need to switch to


578
00:15:44,156 --> 00:15:45,666
use one of the new system


579
00:15:45,666 --> 00:15:46,416
background colors.


580
00:15:46,826 --> 00:15:47,886
Let's choose system background


581
00:15:47,886 --> 00:15:49,306
again, just like we did before.


582
00:15:49,846 --> 00:15:52,746
Next we're setting up the star


583
00:15:52,746 --> 00:15:54,216
image, and again, that's using


584
00:15:54,266 --> 00:15:55,636
our asset catalog color.


585
00:15:55,636 --> 00:15:56,796
So, nothing to do there.


586
00:15:57,876 --> 00:16:00,006
Here is the learn more label


587
00:16:00,006 --> 00:16:01,126
that you can see, the title of


588
00:16:01,186 --> 00:16:02,016
this screen.


589
00:16:02,016 --> 00:16:02,946
We're going to need to make a


590
00:16:02,946 --> 00:16:04,706
change because we have the black


591
00:16:05,066 --> 00:16:06,076
hard-coded color here.


592
00:16:06,696 --> 00:16:07,626
And once again, we can just


593
00:16:07,626 --> 00:16:09,106
switch to something like label.


594
00:16:11,576 --> 00:16:13,516
Now, for the bottom half, what


595
00:16:13,516 --> 00:16:15,316
we have going on is an image


596
00:16:15,316 --> 00:16:16,626
view sitting at the very back.


597
00:16:17,626 --> 00:16:18,366
That's right here.


598
00:16:19,006 --> 00:16:20,556
Layered on top of the image view


599
00:16:20,936 --> 00:16:22,136
is a visual effect view


600
00:16:22,206 --> 00:16:23,536
configured with a Blur.


601
00:16:24,596 --> 00:16:26,146
So, that's this light-style


602
00:16:26,146 --> 00:16:26,496
blur.


603
00:16:27,446 --> 00:16:28,726
Then on top of that, we have


604
00:16:28,726 --> 00:16:29,956
another visual effect view


605
00:16:30,046 --> 00:16:31,576
configured with vibrancy.


606
00:16:32,476 --> 00:16:33,056
That's right here.


607
00:16:33,816 --> 00:16:35,236
And finally, inside of the


608
00:16:35,236 --> 00:16:37,116
content view of that vibrancy


609
00:16:37,116 --> 00:16:38,656
view, we have the label.


610
00:16:39,806 --> 00:16:40,766
So, the changes that we need to


611
00:16:40,766 --> 00:16:42,286
make to update these materials


612
00:16:42,696 --> 00:16:44,346
are first of all to switch to a


613
00:16:44,346 --> 00:16:45,566
dynamic blur effect.


614
00:16:45,566 --> 00:16:47,286
This light effect is not


615
00:16:47,286 --> 00:16:48,076
actually dynamic.


616
00:16:48,076 --> 00:16:49,246
It's not going to update for us


617
00:16:49,246 --> 00:16:50,186
when we switch to Dark Mode.


618
00:16:50,886 --> 00:16:51,886
So, we can take advantage of


619
00:16:51,886 --> 00:16:53,716
this brand-new system material


620
00:16:53,776 --> 00:16:55,726
palette that we have in iOS 13.


621
00:16:56,326 --> 00:16:57,756
Great choice, because the system


622
00:16:57,756 --> 00:16:59,696
thin material for this


623
00:16:59,696 --> 00:17:00,866
particular use case, it'll look


624
00:17:00,866 --> 00:17:01,926
very similar to what we had


625
00:17:01,926 --> 00:17:02,296
before.


626
00:17:02,886 --> 00:17:04,746
And then we also want to update


627
00:17:04,746 --> 00:17:06,546
our vibrancy to take advantage


628
00:17:06,546 --> 00:17:07,695
of the new system vibrancy


629
00:17:07,695 --> 00:17:08,266
styles.


630
00:17:08,636 --> 00:17:09,976
And these vibrancy styles now


631
00:17:09,976 --> 00:17:11,586
come in a nice hierarchy.


632
00:17:11,766 --> 00:17:13,685
So, we can add a style


633
00:17:13,766 --> 00:17:14,266
parameter.


634
00:17:14,766 --> 00:17:16,016
And in this case it's kind of


635
00:17:16,016 --> 00:17:17,546
secondary content, so we can


636
00:17:17,546 --> 00:17:20,205
choose the secondary label and


637
00:17:20,955 --> 00:17:22,766
with those few changes, why


638
00:17:22,766 --> 00:17:24,715
don't we run and see how things


639
00:17:24,715 --> 00:17:24,876
look.


640
00:17:26,256 --> 00:17:26,886
Let's bring up that


641
00:17:26,886 --> 00:17:27,506
presentation.


642
00:17:28,376 --> 00:17:29,686
So, here we are in light mode.


643
00:17:29,686 --> 00:17:30,726
It looks pretty similar to what


644
00:17:30,726 --> 00:17:33,456
we had before, but we'll now


645
00:17:33,456 --> 00:17:34,246
switch into Dark.


646
00:17:35,486 --> 00:17:37,716
And bam. Everything has been


647
00:17:37,716 --> 00:17:39,336
updated with nice, new Dark


648
00:17:39,336 --> 00:17:39,816
Materials.


649
00:17:41,516 --> 00:17:44,276
[ Applause ]


650
00:17:44,776 --> 00:17:46,266
So, one point here is that even


651
00:17:46,266 --> 00:17:47,246
though we did write some code


652
00:17:47,246 --> 00:17:48,486
this time, there's nothing wrong


653
00:17:48,486 --> 00:17:50,006
with that, we didn't actually


654
00:17:50,006 --> 00:17:51,236
need to write any code that


655
00:17:51,236 --> 00:17:53,046
explicitly checked which mode we


656
00:17:53,046 --> 00:17:55,566
were in, or handled changes from


657
00:17:55,566 --> 00:17:56,656
Light to Dark Mode or vice


658
00:17:56,656 --> 00:17:57,156
versa.


659
00:17:57,926 --> 00:17:59,306
This is also the advantage of


660
00:17:59,336 --> 00:18:01,406
taking-- of using these dynamic


661
00:18:01,546 --> 00:18:03,416
system colors and materials in


662
00:18:03,416 --> 00:18:04,426
your app.


663
00:18:04,426 --> 00:18:05,656
I'll had it back over to Kurt to


664
00:18:05,656 --> 00:18:06,566
tell you a little bit more of


665
00:18:06,566 --> 00:18:07,856
how all of this works behind the


666
00:18:07,856 --> 00:18:08,216
scenes.


667
00:18:12,566 --> 00:18:12,976
>> Thank you.


668
00:18:13,516 --> 00:18:16,256
[ Applause ]


669
00:18:16,756 --> 00:18:17,786
So, here's something subtle that


670
00:18:17,786 --> 00:18:18,966
you might not have noticed.


671
00:18:19,886 --> 00:18:21,696
We used system background color


672
00:18:21,746 --> 00:18:23,066
as the main background in our


673
00:18:23,066 --> 00:18:24,396
app, that was black.


674
00:18:24,746 --> 00:18:26,416
And then we used it again in


675
00:18:26,416 --> 00:18:27,296
that presented view.


676
00:18:27,856 --> 00:18:29,016
And if you look carefully, you


677
00:18:29,016 --> 00:18:30,416
can see it's a lighter shade of


678
00:18:30,416 --> 00:18:30,726
grey.


679
00:18:31,986 --> 00:18:33,486
That's because the design for


680
00:18:33,486 --> 00:18:35,046
Dark Mode has two different


681
00:18:35,046 --> 00:18:35,536
levels.


682
00:18:36,076 --> 00:18:37,256
When the view fills the whole


683
00:18:37,256 --> 00:18:38,896
screen edge to edge, we call


684
00:18:38,896 --> 00:18:39,896
that the base level.


685
00:18:40,696 --> 00:18:41,876
And then when content appears in


686
00:18:41,876 --> 00:18:43,996
a separate layer above that, we


687
00:18:43,996 --> 00:18:45,336
call that the elevated level.


688
00:18:46,236 --> 00:18:47,446
So, in Dark Mode, the


689
00:18:47,446 --> 00:18:48,886
system-provided background


690
00:18:48,886 --> 00:18:50,756
colors have lighter values in


691
00:18:50,756 --> 00:18:51,606
the elevated level.


692
00:18:51,856 --> 00:18:53,086
This helps distinguish them from


693
00:18:53,086 --> 00:18:54,546
the black background underneath.


694
00:18:55,426 --> 00:18:56,706
But foreground colors don't


695
00:18:56,706 --> 00:18:57,246
change.


696
00:18:58,276 --> 00:18:59,476
Now on iPhone, this can happen


697
00:18:59,476 --> 00:19:00,816
with presentations, as you see


698
00:19:00,816 --> 00:19:01,036
here.


699
00:19:01,946 --> 00:19:03,366
On iPad, this can also happen


700
00:19:03,366 --> 00:19:04,866
when the app is in multitasking


701
00:19:04,866 --> 00:19:06,446
split view, so it doesn't fill


702
00:19:06,446 --> 00:19:07,046
the whole screen.


703
00:19:08,626 --> 00:19:09,646
So, we've learned the essentials


704
00:19:09,646 --> 00:19:10,836
about implementing Dark Mode.


705
00:19:11,626 --> 00:19:13,646
And we've both been saying that


706
00:19:13,676 --> 00:19:14,746
things just work.


707
00:19:14,936 --> 00:19:15,796
It's just automatic.


708
00:19:16,276 --> 00:19:18,066
So, let's dive deeper into how


709
00:19:18,066 --> 00:19:19,756
dynamic colors and images work.


710
00:19:20,176 --> 00:19:21,166
And this will help you take


711
00:19:21,166 --> 00:19:22,516
advantage of all this power and


712
00:19:22,516 --> 00:19:23,126
flexibility.


713
00:19:24,526 --> 00:19:25,656
So, we've seen how dynamic


714
00:19:25,656 --> 00:19:27,126
colors automatically resolve


715
00:19:27,126 --> 00:19:28,746
their appearance, but how does


716
00:19:28,746 --> 00:19:29,946
the color know whether it's


717
00:19:29,946 --> 00:19:30,546
light or dark?


718
00:19:31,466 --> 00:19:32,476
This is done with trait


719
00:19:32,476 --> 00:19:32,886
collections.


720
00:19:33,506 --> 00:19:34,886
So, each view and view


721
00:19:34,886 --> 00:19:36,316
controller in your app has a


722
00:19:36,316 --> 00:19:38,156
trait collection, and this helps


723
00:19:38,846 --> 00:19:40,416
determine the appearance of the


724
00:19:40,416 --> 00:19:41,016
views.


725
00:19:41,836 --> 00:19:42,966
In this case, all of our views


726
00:19:42,966 --> 00:19:44,096
have the same trait collection.


727
00:19:44,796 --> 00:19:46,246
The idiom is phone, because


728
00:19:46,246 --> 00:19:47,536
we're running on a phone and not


729
00:19:47,536 --> 00:19:48,446
an iPad or CarPlay.


730
00:19:49,406 --> 00:19:50,726
The user interface style is


731
00:19:50,766 --> 00:19:51,946
dark, because we're in Dark


732
00:19:51,946 --> 00:19:52,206
Mode.


733
00:19:52,826 --> 00:19:54,266
And the user interface level is


734
00:19:54,396 --> 00:19:55,806
base, because we're full screen.


735
00:19:56,866 --> 00:19:58,496
So, if you want to find out what


736
00:19:58,496 --> 00:20:00,116
appearance to use, get the trait


737
00:20:00,116 --> 00:20:01,406
collection, we'll look at the


738
00:20:01,406 --> 00:20:03,036
user interface style, and also


739
00:20:03,036 --> 00:20:04,436
the other traits.


740
00:20:05,416 --> 00:20:07,396
Now, dynamic colors are resolved


741
00:20:07,546 --> 00:20:08,726
using a trait collection.


742
00:20:08,966 --> 00:20:10,376
So, it's the combination of a


743
00:20:10,426 --> 00:20:11,946
dynamic color and a trait


744
00:20:11,946 --> 00:20:13,306
collection that determine the


745
00:20:13,426 --> 00:20:14,516
final resolved color.


746
00:20:15,396 --> 00:20:16,246
And normally this happens


747
00:20:16,246 --> 00:20:17,746
automatically but if you need


748
00:20:17,786 --> 00:20:19,726
resolve a color yourself, you


749
00:20:19,726 --> 00:20:20,246
can do that.


750
00:20:21,286 --> 00:20:22,346
Let's say we have a dynamic


751
00:20:22,346 --> 00:20:23,916
color and we've gotten a trait


752
00:20:23,916 --> 00:20:24,926
collection from a view.


753
00:20:26,076 --> 00:20:27,056
If we want to resolve that


754
00:20:27,056 --> 00:20:29,356
color, we just say dynamic color


755
00:20:29,356 --> 00:20:31,446
resolved color with trait


756
00:20:31,446 --> 00:20:31,946
collection.


757
00:20:32,296 --> 00:20:34,146
It will return a fully resolved


758
00:20:34,146 --> 00:20:35,496
color that isn't dynamic


759
00:20:35,496 --> 00:20:35,896
anymore.


760
00:20:37,086 --> 00:20:38,486
So, this is safe to call on any


761
00:20:38,486 --> 00:20:38,796
color.


762
00:20:38,956 --> 00:20:40,446
If that color wasn't dynamic, it


763
00:20:40,446 --> 00:20:41,626
would've just returned itself.


764
00:20:43,056 --> 00:20:44,886
You can also make custom dynamic


765
00:20:44,936 --> 00:20:45,426
colors.


766
00:20:45,786 --> 00:20:46,726
We showed how to do that in the


767
00:20:46,726 --> 00:20:48,246
asset catalog, but you can do


768
00:20:48,246 --> 00:20:49,186
that in code as well.


769
00:20:50,496 --> 00:20:52,076
Initialize a color with a


770
00:20:52,076 --> 00:20:54,146
closure, and the argument is a


771
00:20:54,146 --> 00:20:54,946
trait collection.


772
00:20:55,856 --> 00:20:57,006
Then our closure will return


773
00:20:57,096 --> 00:20:57,896
another color.


774
00:20:58,766 --> 00:21:00,536
So, each time this dynamic color


775
00:21:00,536 --> 00:21:01,966
needs to be resolved, that


776
00:21:01,966 --> 00:21:03,856
closure will be called with the


777
00:21:03,856 --> 00:21:04,896
appropriate trait collection.


778
00:21:05,686 --> 00:21:07,146
And in the closure, you can use


779
00:21:07,146 --> 00:21:08,386
that trait collection to


780
00:21:08,386 --> 00:21:09,706
determine another color to


781
00:21:09,706 --> 00:21:10,056
return.


782
00:21:10,846 --> 00:21:12,326
This example is implementing the


783
00:21:12,326 --> 00:21:13,356
diagram that we just saw.


784
00:21:14,576 --> 00:21:16,056
So another question.


785
00:21:16,436 --> 00:21:17,546
You might be wondering since


786
00:21:17,616 --> 00:21:18,976
dynamic colors can be used


787
00:21:18,976 --> 00:21:20,346
directly like any other color,


788
00:21:20,886 --> 00:21:21,756
how did they get resolved


789
00:21:21,756 --> 00:21:22,386
automatically?


790
00:21:23,286 --> 00:21:24,956
If I have a dynamic color and I


791
00:21:24,956 --> 00:21:26,556
ask it for its RGB components,


792
00:21:27,076 --> 00:21:28,046
it'll return a result.


793
00:21:28,636 --> 00:21:30,656
If I have black, I'll get 000.


794
00:21:31,286 --> 00:21:32,846
Well, when I ask it, I don't


795
00:21:32,926 --> 00:21:33,916
pass in a Trait Collection.


796
00:21:34,386 --> 00:21:35,246
How does it know?


797
00:21:36,826 --> 00:21:38,046
Well, there's a new property on


798
00:21:38,046 --> 00:21:39,176
UITrait Collection called


799
00:21:39,286 --> 00:21:41,336
current, and this is set for you


800
00:21:41,336 --> 00:21:42,066
by UIKit.


801
00:21:43,196 --> 00:21:45,186
And the color is resolved using


802
00:21:45,186 --> 00:21:46,556
that current Trait Collection.


803
00:21:47,296 --> 00:21:48,456
And again, we're following the


804
00:21:48,456 --> 00:21:49,486
same pattern from the mac.


805
00:21:49,766 --> 00:21:51,026
This is the same concept as


806
00:21:51,146 --> 00:21:52,656
NSAppearance.current.


807
00:21:54,106 --> 00:21:55,396
Now, UIKit sets the current


808
00:21:55,396 --> 00:21:56,636
Trait Collection for you when it


809
00:21:56,636 --> 00:21:57,446
calls certain methods.


810
00:21:58,086 --> 00:21:58,796
Here's an example.


811
00:21:59,476 --> 00:22:01,366
I have a UIVIew Subclass and


812
00:22:01,366 --> 00:22:02,626
I've overridden the draw method.


813
00:22:02,726 --> 00:22:03,866
So, this view will do all of its


814
00:22:03,866 --> 00:22:04,386
own drawing.


815
00:22:06,336 --> 00:22:07,896
Before it calls this method,


816
00:22:08,386 --> 00:22:10,366
UIKit will set the current Trait


817
00:22:10,366 --> 00:22:11,866
Collection to the Views Trait


818
00:22:11,866 --> 00:22:12,286
Collection.


819
00:22:13,166 --> 00:22:14,986
So that inside this code when a


820
00:22:14,986 --> 00:22:16,366
dynamic color needs to be


821
00:22:16,366 --> 00:22:18,356
resolved, it will use the Views


822
00:22:18,356 --> 00:22:18,966
Trait Collection.


823
00:22:20,376 --> 00:22:22,176
In fact, when the mode changes,


824
00:22:22,176 --> 00:22:23,856
UIKit knows that you overrode


825
00:22:23,856 --> 00:22:24,476
the draw method.


826
00:22:24,506 --> 00:22:26,206
So, it will automatically call


827
00:22:26,206 --> 00:22:27,766
set needs display on your view


828
00:22:27,866 --> 00:22:29,296
and will draw again with new


829
00:22:29,296 --> 00:22:29,816
colors.


830
00:22:31,306 --> 00:22:32,666
UIKit also sets the current


831
00:22:32,666 --> 00:22:33,926
Trait Collection for you before


832
00:22:33,926 --> 00:22:35,266
it calls several other methods.


833
00:22:36,296 --> 00:22:38,676
I'm-- subclasses of view, view


834
00:22:38,676 --> 00:22:39,916
controller, and presentation


835
00:22:39,916 --> 00:22:41,826
controller, explain draw.


836
00:22:42,946 --> 00:22:44,516
But UIKit also sets the current


837
00:22:44,516 --> 00:22:45,816
Trait Collection during layout.


838
00:22:46,646 --> 00:22:48,566
So, override layout subviews in


839
00:22:48,566 --> 00:22:50,356
your view subclass and then add


840
00:22:50,356 --> 00:22:51,576
code that resolves dynamic


841
00:22:51,576 --> 00:22:52,016
colors.


842
00:22:52,746 --> 00:22:54,626
When the mode changes, set needs


843
00:22:54,626 --> 00:22:55,826
layout will be called.


844
00:22:55,826 --> 00:22:56,736
Layout will happen again.


845
00:22:56,736 --> 00:22:58,376
And this includes the


846
00:22:58,376 --> 00:22:59,716
corresponding calls on view


847
00:22:59,716 --> 00:23:01,276
controller and presentation


848
00:23:01,276 --> 00:23:01,656
controller.


849
00:23:03,076 --> 00:23:04,846
Finally, all three kinds of


850
00:23:04,846 --> 00:23:05,876
these objects get trait


851
00:23:05,876 --> 00:23:07,616
collection did change, when a


852
00:23:07,616 --> 00:23:08,346
trait changes.


853
00:23:08,666 --> 00:23:10,266
And views get tint color did


854
00:23:10,266 --> 00:23:11,296
change when the tint color


855
00:23:11,326 --> 00:23:11,636
changes.


856
00:23:12,306 --> 00:23:13,656
So inside all of these methods,


857
00:23:13,656 --> 00:23:14,696
it's convenient to be able to


858
00:23:14,696 --> 00:23:16,316
use dynamic colors right away.


859
00:23:17,696 --> 00:23:19,186
Now, here's a big point to keep


860
00:23:19,186 --> 00:23:19,536
in mind.


861
00:23:20,546 --> 00:23:21,926
Outside of these methods, the


862
00:23:21,926 --> 00:23:23,466
current trait collection is not


863
00:23:23,836 --> 00:23:25,006
guaranteed to have any


864
00:23:25,006 --> 00:23:27,246
particular value, so if you need


865
00:23:27,246 --> 00:23:28,706
to resolve a dynamic color


866
00:23:28,906 --> 00:23:30,446
outside of these methods, you


867
00:23:30,446 --> 00:23:31,146
need to manage it.


868
00:23:31,886 --> 00:23:33,046
Here's an example of why you


869
00:23:33,046 --> 00:23:33,666
might need to.


870
00:23:35,076 --> 00:23:37,126
Lower-level classes, like CA


871
00:23:37,126 --> 00:23:39,126
Layer and CG Color, don't


872
00:23:39,126 --> 00:23:40,416
understand dynamic colors.


873
00:23:40,416 --> 00:23:41,546
It's a UIKit concept.


874
00:23:42,696 --> 00:23:43,856
So in this case, we're creating


875
00:23:43,856 --> 00:23:45,056
a layer and then setting its


876
00:23:45,136 --> 00:23:45,756
border color.


877
00:23:46,496 --> 00:23:48,656
That takes a CG Color which


878
00:23:48,656 --> 00:23:49,496
can't be dynamic.


879
00:23:50,566 --> 00:23:52,886
So, calling CG Color on a UIKit


880
00:23:52,966 --> 00:23:54,556
dynamic color needs to resolve


881
00:23:54,556 --> 00:23:54,626
it.


882
00:23:55,636 --> 00:23:56,836
Now, let's imagine, we're not in


883
00:23:56,836 --> 00:23:58,006
one of those methods I mentioned


884
00:23:58,006 --> 00:23:58,356
earlier.


885
00:23:58,526 --> 00:23:59,546
That means it's our


886
00:23:59,546 --> 00:24:01,036
responsibility to manage this


887
00:24:01,036 --> 00:24:01,526
process.


888
00:24:02,296 --> 00:24:03,256
The first thing we need is a


889
00:24:03,256 --> 00:24:04,826
Trait Collection and we'll get


890
00:24:04,826 --> 00:24:05,466
it from a view.


891
00:24:06,536 --> 00:24:07,816
Now we need to use that Trait


892
00:24:07,816 --> 00:24:09,036
Collection, and I'll show three


893
00:24:09,036 --> 00:24:09,756
ways to do this.


894
00:24:09,756 --> 00:24:12,096
The first way we've already


895
00:24:12,096 --> 00:24:12,366
seen.


896
00:24:12,926 --> 00:24:15,256
Ask the color to resolve itself


897
00:24:15,436 --> 00:24:16,516
using that Trait Collection.


898
00:24:17,516 --> 00:24:18,646
Now this is fine if you have


899
00:24:18,646 --> 00:24:20,436
only a single color, but it can


900
00:24:20,436 --> 00:24:21,636
be awkward if you've got more.


901
00:24:22,126 --> 00:24:23,296
And you have to remember to do


902
00:24:23,296 --> 00:24:23,906
it every time.


903
00:24:24,696 --> 00:24:25,836
The second way is easier.


904
00:24:26,396 --> 00:24:29,086
Just call perform as current on


905
00:24:29,086 --> 00:24:29,856
the Trait Collection.


906
00:24:30,866 --> 00:24:32,146
That makes that Trait Collection


907
00:24:32,296 --> 00:24:33,176
become the current Trait


908
00:24:33,176 --> 00:24:34,936
Collection, and then it runs the


909
00:24:34,936 --> 00:24:36,176
code in the closure that you


910
00:24:36,176 --> 00:24:36,646
provide.


911
00:24:37,536 --> 00:24:38,526
So, since we're resolving the


912
00:24:38,526 --> 00:24:39,936
color inside that closure, you


913
00:24:39,936 --> 00:24:42,436
get the right value.


914
00:24:42,636 --> 00:24:43,816
Finally, the third option,


915
00:24:44,186 --> 00:24:46,186
directly set the current Trait


916
00:24:46,186 --> 00:24:46,586
Collection.


917
00:24:47,406 --> 00:24:48,616
This looks a little intimidating


918
00:24:48,616 --> 00:24:50,086
but it's absolutely safe.


919
00:24:50,236 --> 00:24:50,946
It's lightweight.


920
00:24:51,046 --> 00:24:52,446
There are no side effects.


921
00:24:53,286 --> 00:24:54,746
This is even safe to do on a


922
00:24:54,746 --> 00:24:55,616
background thread.


923
00:24:55,616 --> 00:24:57,846
It will only affect the specific


924
00:24:57,916 --> 00:24:58,886
thread that you're running on,


925
00:24:59,336 --> 00:25:00,526
so it won't affect your main


926
00:25:00,526 --> 00:25:00,786
thread.


927
00:25:02,016 --> 00:25:03,096
If you're going to do this, it's


928
00:25:03,096 --> 00:25:04,876
a good idea to save the current


929
00:25:04,876 --> 00:25:05,806
Trait Collection and then


930
00:25:05,806 --> 00:25:07,156
restore it afterwards in case


931
00:25:07,206 --> 00:25:08,566
any other code was relying on


932
00:25:08,566 --> 00:25:08,633
it.


933
00:25:09,506 --> 00:25:10,516
And note that performance


934
00:25:10,516 --> 00:25:11,806
current does that for you, it


935
00:25:11,806 --> 00:25:14,276
does this exact same thing.


936
00:25:14,516 --> 00:25:15,966
So, if you are doing this sort


937
00:25:15,966 --> 00:25:17,366
of thing, you will also want to


938
00:25:17,366 --> 00:25:18,966
know when the dynamic color


939
00:25:19,066 --> 00:25:20,196
needs to be resolved again.


940
00:25:21,186 --> 00:25:22,826
That usually happens when traits


941
00:25:22,866 --> 00:25:23,336
change.


942
00:25:23,986 --> 00:25:25,296
When traits change, Trait


943
00:25:25,296 --> 00:25:26,666
Collection did change as called.


944
00:25:27,626 --> 00:25:29,546
But not all trait changes will


945
00:25:29,546 --> 00:25:30,346
affect colors.


946
00:25:30,726 --> 00:25:31,946
If the user interface style


947
00:25:31,946 --> 00:25:33,466
changes from light to dark, that


948
00:25:33,466 --> 00:25:34,846
will obviously affect colors.


949
00:25:35,296 --> 00:25:36,276
But if something like a size


950
00:25:36,366 --> 00:25:38,106
class changes because your app


951
00:25:38,106 --> 00:25:39,836
was resized, that won't affect


952
00:25:39,956 --> 00:25:40,336
colors.


953
00:25:41,306 --> 00:25:43,176
So, it's best to use this method


954
00:25:43,626 --> 00:25:45,376
has different color appearance


955
00:25:45,376 --> 00:25:46,696
to see if the relevant traits


956
00:25:46,696 --> 00:25:47,206
have changed.


957
00:25:48,136 --> 00:25:49,246
If it didn't, then you should


958
00:25:49,246 --> 00:25:50,446
resolve those dynamic colors


959
00:25:50,446 --> 00:25:50,666
again.


960
00:25:52,336 --> 00:25:53,856
Finally, let's talk about


961
00:25:53,856 --> 00:25:54,326
images.


962
00:25:54,916 --> 00:25:56,596
As you saw, you can create


963
00:25:56,596 --> 00:25:58,246
dynamic images in the asset


964
00:25:58,326 --> 00:25:58,736
catalog.


965
00:25:59,406 --> 00:26:00,466
And when you show one of these


966
00:26:00,466 --> 00:26:02,586
images with UIImage view, it


967
00:26:02,586 --> 00:26:04,786
uses its Trait Collection to


968
00:26:04,786 --> 00:26:06,046
determine which image to


969
00:26:06,046 --> 00:26:06,516
display.


970
00:26:07,896 --> 00:26:09,536
Now, UIImage view is doing the


971
00:26:09,536 --> 00:26:10,016
work here.


972
00:26:10,646 --> 00:26:13,116
Unlike UIColor, UIImage doesn't


973
00:26:13,116 --> 00:26:14,426
pay attention to the current


974
00:26:14,426 --> 00:26:14,986
Trait Collection.


975
00:26:15,996 --> 00:26:17,156
So, we recommend most of the


976
00:26:17,156 --> 00:26:18,666
time use UIImage view.


977
00:26:19,466 --> 00:26:20,786
But if you need to resolve the


978
00:26:20,786 --> 00:26:22,096
color yourself, you can.


979
00:26:23,296 --> 00:26:25,276
Given an image, just ask for its


980
00:26:25,406 --> 00:26:26,166
image asset.


981
00:26:26,516 --> 00:26:27,746
That's that collection of all


982
00:26:27,746 --> 00:26:29,196
the different image variations.


983
00:26:31,066 --> 00:26:33,176
Next, ask for a specific image


984
00:26:33,306 --> 00:26:34,976
that matches a specific Trait


985
00:26:34,976 --> 00:26:35,376
Collection.


986
00:26:36,946 --> 00:26:38,426
You can also use the image asset


987
00:26:38,556 --> 00:26:40,556
to register new variations of an


988
00:26:40,556 --> 00:26:41,306
image at runtime.


989
00:26:41,906 --> 00:26:43,296
So, if you draw your own image,


990
00:26:43,386 --> 00:26:45,106
you can add variations for light


991
00:26:45,136 --> 00:26:45,626
and dark.


992
00:26:46,516 --> 00:26:47,586
Just put that in in an image


993
00:26:47,586 --> 00:26:47,886
view.


994
00:26:48,206 --> 00:26:49,366
It will automatically show the


995
00:26:49,366 --> 00:26:49,716
right one.


996
00:26:50,916 --> 00:26:51,986
So, let's talk about some things


997
00:26:51,986 --> 00:26:53,306
to keep in mind when adopting


998
00:26:53,306 --> 00:26:53,756
Dark Mode.


999
00:26:54,216 --> 00:26:55,500
Over to Tyler.


1000
00:26:57,516 --> 00:27:02,926
[ Applause ]


1001
00:27:03,426 --> 00:27:03,956
>> Thanks, Kurt.


1002
00:27:04,726 --> 00:27:06,286
So, let's take a few minutes to


1003
00:27:06,286 --> 00:27:07,536
review some more things about


1004
00:27:07,536 --> 00:27:08,786
how Trait Collections work.


1005
00:27:08,896 --> 00:27:10,256
Because as you've seen, these


1006
00:27:10,306 --> 00:27:12,176
play a really key role in Dark


1007
00:27:12,176 --> 00:27:12,386
Mode.


1008
00:27:13,046 --> 00:27:14,566
The most important thing to


1009
00:27:14,566 --> 00:27:15,806
remember about Trait Collections


1010
00:27:15,856 --> 00:27:17,766
is that there is not just one in


1011
00:27:17,766 --> 00:27:19,306
your entire app.


1012
00:27:19,706 --> 00:27:20,826
Trait Collections actually


1013
00:27:20,866 --> 00:27:22,936
cascade through the hierarchy of


1014
00:27:22,936 --> 00:27:24,836
your app, starting at the root


1015
00:27:24,836 --> 00:27:27,436
level with the screen, then down


1016
00:27:27,436 --> 00:27:28,636
to the window scene, which is


1017
00:27:28,636 --> 00:27:30,426
new this year in iOS 13.


1018
00:27:30,706 --> 00:27:32,016
From there, down to the window.


1019
00:27:32,696 --> 00:27:34,496
At that point, traits start to


1020
00:27:34,496 --> 00:27:36,096
flow into any presentations in


1021
00:27:36,096 --> 00:27:37,426
your app and then the view


1022
00:27:37,426 --> 00:27:38,636
controllers inside those


1023
00:27:38,636 --> 00:27:39,256
presentations.


1024
00:27:40,966 --> 00:27:42,406
And finally, traits cascade


1025
00:27:42,406 --> 00:27:43,606
through the view hierarchy


1026
00:27:43,696 --> 00:27:44,886
inside each of your view


1027
00:27:44,886 --> 00:27:45,596
controllers.


1028
00:27:46,696 --> 00:27:47,926
Because of this hierarchy, you


1029
00:27:47,926 --> 00:27:49,206
always want to use the trait


1030
00:27:49,206 --> 00:27:51,266
collection of the most specific


1031
00:27:51,266 --> 00:27:52,906
view or view controller you can.


1032
00:27:54,346 --> 00:27:55,376
And when the value of a trait


1033
00:27:55,376 --> 00:27:57,176
changes, you're going to receive


1034
00:27:57,176 --> 00:27:58,756
trait collection did change on


1035
00:27:58,836 --> 00:28:00,446
all of these objects inside of


1036
00:28:00,446 --> 00:28:01,676
your app when they get that


1037
00:28:01,676 --> 00:28:02,206
change.


1038
00:28:02,876 --> 00:28:04,046
So, if the system Dark Mode


1039
00:28:04,046 --> 00:28:05,406
setting changes, for example,


1040
00:28:05,806 --> 00:28:06,926
you'll see that trait change


1041
00:28:06,926 --> 00:28:08,596
just cascade right through.


1042
00:28:09,036 --> 00:28:10,636
But I want to talk a little bit


1043
00:28:10,636 --> 00:28:12,206
more about Trait Changes,


1044
00:28:12,436 --> 00:28:13,706
because we have some new


1045
00:28:13,706 --> 00:28:15,596
behavior this year in iOS 13.


1046
00:28:16,236 --> 00:28:17,586
Let's zoom into the bottom half


1047
00:28:17,586 --> 00:28:18,816
of this diagram and walk through


1048
00:28:18,816 --> 00:28:20,566
an example about what's changed.


1049
00:28:22,236 --> 00:28:23,936
So, here's a view that we want


1050
00:28:23,936 --> 00:28:25,516
to add into the view hierarchy.


1051
00:28:25,576 --> 00:28:26,806
It's going to become the view


1052
00:28:26,806 --> 00:28:28,116
inside of this view controller


1053
00:28:28,116 --> 00:28:28,636
right above it.


1054
00:28:30,116 --> 00:28:32,016
The first thing that we'll do is


1055
00:28:32,016 --> 00:28:32,826
create that view.


1056
00:28:33,626 --> 00:28:34,716
Now, when a view is being


1057
00:28:34,716 --> 00:28:36,626
initialized, it hasn't yet been


1058
00:28:36,756 --> 00:28:38,276
added inside of this trait


1059
00:28:38,276 --> 00:28:38,736
hierarchy.


1060
00:28:39,306 --> 00:28:41,256
So, when the view's created, in


1061
00:28:41,396 --> 00:28:43,736
iOS 13, UIKit is going to make a


1062
00:28:43,736 --> 00:28:45,366
prediction about where it


1063
00:28:45,366 --> 00:28:46,846
expects that view will end up,


1064
00:28:47,926 --> 00:28:49,636
and populate that view's Trait


1065
00:28:49,636 --> 00:28:51,376
Collection right from the start


1066
00:28:51,696 --> 00:28:52,936
based on the predicted


1067
00:28:52,936 --> 00:28:53,626
destination.


1068
00:28:54,496 --> 00:28:56,666
So, now let's add this view


1069
00:28:56,956 --> 00:28:57,936
and-- yeah, it's pretty cool


1070
00:28:57,936 --> 00:28:59,016
[laughter].


1071
00:28:59,311 --> 00:29:01,311
[ Applause ]


1072
00:29:01,606 --> 00:29:02,826
So, let's add this view into the


1073
00:29:02,826 --> 00:29:03,666
hierarchy now.


1074
00:29:04,446 --> 00:29:06,426
So, we'll do that by calling out


1075
00:29:06,516 --> 00:29:07,106
subview.


1076
00:29:07,896 --> 00:29:08,846
It moves over.


1077
00:29:09,526 --> 00:29:10,626
And once the view's actually


1078
00:29:10,696 --> 00:29:12,586
added, it's going to inherit its


1079
00:29:12,586 --> 00:29:14,316
actually traits from its parent


1080
00:29:14,316 --> 00:29:15,666
trait environment, in this case


1081
00:29:15,666 --> 00:29:17,526
the view controller above it.


1082
00:29:17,846 --> 00:29:19,256
But in this case, since the


1083
00:29:19,256 --> 00:29:20,656
Trait Collection was correctly


1084
00:29:20,656 --> 00:29:23,046
predicted up front, there wasn't


1085
00:29:23,046 --> 00:29:24,426
a trait change that happened


1086
00:29:24,656 --> 00:29:26,136
when that view moved into the


1087
00:29:26,136 --> 00:29:26,976
view controller and view


1088
00:29:26,976 --> 00:29:27,396
hierarchy.


1089
00:29:27,916 --> 00:29:29,626
So, what you've seen is some new


1090
00:29:29,626 --> 00:29:30,956
behavior in iOS 13.


1091
00:29:31,666 --> 00:29:33,396
To recap, traits are now


1092
00:29:33,396 --> 00:29:35,586
predicted during initialization.


1093
00:29:36,956 --> 00:29:38,386
View controllers and views will


1094
00:29:38,386 --> 00:29:40,056
all receive a pretty complete


1095
00:29:40,056 --> 00:29:41,246
Trait Collection right up front,


1096
00:29:41,246 --> 00:29:42,086
which is really useful.


1097
00:29:42,086 --> 00:29:43,426
And then Trait Collection did


1098
00:29:43,426 --> 00:29:44,766
change will only be called


1099
00:29:44,766 --> 00:29:46,226
afterwards if any of those


1100
00:29:46,226 --> 00:29:47,506
initial traits change.


1101
00:29:48,126 --> 00:29:49,706
So, when you're updating your


1102
00:29:49,706 --> 00:29:52,586
existing apps for iOS 13, keep


1103
00:29:52,586 --> 00:29:53,876
an eye out for existing code


1104
00:29:53,876 --> 00:29:55,306
that you might have inside of


1105
00:29:55,346 --> 00:29:56,456
methods like Trait Collection


1106
00:29:56,456 --> 00:29:58,216
did change that expected the


1107
00:29:58,216 --> 00:29:59,916
older behavior where there was


1108
00:29:59,916 --> 00:30:01,196
often a trait change that


1109
00:30:01,196 --> 00:30:02,716
occurred when you moved into the


1110
00:30:02,716 --> 00:30:03,146
hierarchy.


1111
00:30:03,876 --> 00:30:05,066
Now, to make it a little bit


1112
00:30:05,066 --> 00:30:06,596
easier to see when some of these


1113
00:30:06,596 --> 00:30:07,896
trait changes are occurring in


1114
00:30:07,986 --> 00:30:10,486
iOS 13, we have some helpful new


1115
00:30:10,486 --> 00:30:11,586
debug logging this year.


1116
00:30:11,746 --> 00:30:13,316
You can enable using this launch


1117
00:30:13,316 --> 00:30:14,786
argument and it'll tell you


1118
00:30:14,786 --> 00:30:16,116
exactly when Trait Collection


1119
00:30:16,116 --> 00:30:17,886
did change is called and the


1120
00:30:17,886 --> 00:30:19,226
details of each of those


1121
00:30:19,226 --> 00:30:19,726
changes.


1122
00:30:19,786 --> 00:30:20,866
It's really cool and you should


1123
00:30:20,866 --> 00:30:21,486
give it a try.


1124
00:30:22,946 --> 00:30:23,876
Now, as you're updating your


1125
00:30:23,876 --> 00:30:25,916
existing code or adding new code


1126
00:30:25,916 --> 00:30:28,086
that uses traits, the best


1127
00:30:28,086 --> 00:30:29,976
practice is to wait until layout


1128
00:30:30,336 --> 00:30:31,446
to actually read the Trait


1129
00:30:31,446 --> 00:30:32,916
Collection from the view or view


1130
00:30:32,916 --> 00:30:34,386
controller and perform work


1131
00:30:34,386 --> 00:30:35,386
based on it.


1132
00:30:35,996 --> 00:30:37,916
Traits are always updated before


1133
00:30:37,916 --> 00:30:38,756
layout occurs.


1134
00:30:39,286 --> 00:30:40,396
And so if you get the Trait


1135
00:30:40,396 --> 00:30:41,526
Collection from inside of one of


1136
00:30:41,526 --> 00:30:42,926
these methods, you can rest


1137
00:30:42,926 --> 00:30:44,476
assured that it's not going to


1138
00:30:44,476 --> 00:30:45,566
be a prediction anymore.


1139
00:30:45,656 --> 00:30:47,396
It'll reflect the actual values


1140
00:30:47,396 --> 00:30:48,826
that it was inheriting from its


1141
00:30:48,826 --> 00:30:49,096
parent.


1142
00:30:50,656 --> 00:30:51,696
Just remember that if you put


1143
00:30:51,696 --> 00:30:52,796
code in any of these layout


1144
00:30:52,796 --> 00:30:54,466
methods, they can be called


1145
00:30:54,466 --> 00:30:56,196
often when the view is visible.


1146
00:30:56,826 --> 00:30:58,116
Anytime something calls, a set


1147
00:30:58,116 --> 00:30:58,646
needs layout.


1148
00:30:59,066 --> 00:31:01,046
So, be sure that you handle this


1149
00:31:01,106 --> 00:31:02,476
by not repeating work


1150
00:31:02,476 --> 00:31:03,156
unnecessarily.


1151
00:31:04,276 --> 00:31:05,696
So, that's what you should keep


1152
00:31:05,696 --> 00:31:07,296
in mind when using Trait


1153
00:31:07,296 --> 00:31:08,136
Collections.


1154
00:31:08,426 --> 00:31:09,926
But it turns out that we can


1155
00:31:09,926 --> 00:31:11,566
also modify these trait


1156
00:31:11,566 --> 00:31:12,976
collections inside of our app as


1157
00:31:12,976 --> 00:31:13,116
well.


1158
00:31:14,526 --> 00:31:15,676
Here's an example of why you


1159
00:31:15,676 --> 00:31:17,516
might want to do this.


1160
00:31:17,706 --> 00:31:19,026
Let's say that we want the learn


1161
00:31:19,026 --> 00:31:20,636
more screen that we showed you


1162
00:31:20,636 --> 00:31:22,486
in our app to always be dark,


1163
00:31:23,016 --> 00:31:24,346
even when the rest of our app is


1164
00:31:24,346 --> 00:31:25,296
in light appearance.


1165
00:31:26,196 --> 00:31:27,346
We can do this by taking


1166
00:31:27,346 --> 00:31:28,616
advantage of the trait


1167
00:31:28,616 --> 00:31:29,156
hierarchy.


1168
00:31:30,376 --> 00:31:31,886
So if this diagram represents


1169
00:31:31,886 --> 00:31:33,666
our app, normally with the


1170
00:31:33,666 --> 00:31:35,476
system in light mode, everything


1171
00:31:35,476 --> 00:31:36,436
will have the light user


1172
00:31:36,436 --> 00:31:37,756
interface style, just like you


1173
00:31:37,816 --> 00:31:38,196
see here.


1174
00:31:39,536 --> 00:31:40,906
But if we just want let's say


1175
00:31:40,906 --> 00:31:42,796
that one view controller on the


1176
00:31:42,796 --> 00:31:44,106
bottom right and everything on


1177
00:31:44,106 --> 00:31:46,196
the side of it to be dark, we


1178
00:31:46,196 --> 00:31:47,696
can do that by overriding the


1179
00:31:47,696 --> 00:31:49,846
user interface style trait with


1180
00:31:49,846 --> 00:31:50,156
dark.


1181
00:31:50,876 --> 00:31:52,316
And now everything inside that


1182
00:31:52,316 --> 00:31:53,506
view controller will be dark,


1183
00:31:54,016 --> 00:31:55,296
even the rest of our app and


1184
00:31:55,296 --> 00:31:56,426
even the system is running in


1185
00:31:56,426 --> 00:31:56,756
light mode.


1186
00:31:57,486 --> 00:31:58,606
So, how do you actually do this


1187
00:31:58,606 --> 00:31:59,086
override?


1188
00:32:00,146 --> 00:32:01,926
We have some new API this year


1189
00:32:01,926 --> 00:32:03,736
in iOS 13 to make this really


1190
00:32:03,736 --> 00:32:04,146
easy.


1191
00:32:04,986 --> 00:32:06,256
There are new properties on view


1192
00:32:06,256 --> 00:32:07,716
controller and view so that you


1193
00:32:07,716 --> 00:32:09,246
can just set the user interface


1194
00:32:09,246 --> 00:32:10,786
style that you want and it'll


1195
00:32:10,866 --> 00:32:12,776
apply to everything inside that


1196
00:32:12,776 --> 00:32:13,586
and all of its children.


1197
00:32:14,436 --> 00:32:15,776
Now, you should use the view


1198
00:32:15,776 --> 00:32:17,076
controller property whenever


1199
00:32:17,076 --> 00:32:17,796
possible.


1200
00:32:17,796 --> 00:32:19,816
The view one should only be used


1201
00:32:19,816 --> 00:32:20,816
if you don't have a view


1202
00:32:20,816 --> 00:32:22,376
controller around for that


1203
00:32:22,376 --> 00:32:23,356
particular thing you're trying


1204
00:32:23,356 --> 00:32:24,036
to change.


1205
00:32:24,566 --> 00:32:25,646
And there are some caveats if


1206
00:32:25,646 --> 00:32:27,116
you use that view property, so


1207
00:32:27,116 --> 00:32:27,866
be sure to read the


1208
00:32:27,866 --> 00:32:29,066
documentation if you do.


1209
00:32:29,956 --> 00:32:31,916
Finally, if your entire app


1210
00:32:32,096 --> 00:32:33,456
should always just be light or


1211
00:32:33,506 --> 00:32:35,386
dark, we have an info p list key


1212
00:32:35,386 --> 00:32:37,276
you can set to make this really


1213
00:32:37,846 --> 00:32:37,966
easy.


1214
00:32:39,376 --> 00:32:40,446
There's also some existing API


1215
00:32:40,446 --> 00:32:41,916
that you can use to override


1216
00:32:41,916 --> 00:32:42,446
traits.


1217
00:32:42,796 --> 00:32:44,586
This will let you override any


1218
00:32:44,586 --> 00:32:45,826
trait on a view controller or


1219
00:32:45,826 --> 00:32:46,806
presentation controller.


1220
00:32:46,806 --> 00:32:48,346
And the key thing to remember


1221
00:32:48,346 --> 00:32:49,886
when you use this is that the


1222
00:32:49,886 --> 00:32:51,066
override trait collection that


1223
00:32:51,066 --> 00:32:52,986
you set should only contain


1224
00:32:52,986 --> 00:32:54,856
values for the specific traits


1225
00:32:54,856 --> 00:32:56,066
you care about overriding.


1226
00:32:56,866 --> 00:32:58,346
Leave all of the other traits


1227
00:32:58,386 --> 00:33:00,186
unspecified - just don't touch


1228
00:33:00,186 --> 00:33:01,596
them - so that UIKit will


1229
00:33:01,596 --> 00:33:03,566
automatically fill in the normal


1230
00:33:03,566 --> 00:33:04,896
inherited values for those


1231
00:33:04,896 --> 00:33:05,376
traits.


1232
00:33:06,556 --> 00:33:07,706
That's pretty much all you need


1233
00:33:07,706 --> 00:33:09,056
to know to successfully use


1234
00:33:09,056 --> 00:33:10,726
Trait Collections in iOS 13.


1235
00:33:12,186 --> 00:33:13,586
Let's talk about some of the


1236
00:33:13,586 --> 00:33:15,016
other API updates that we have


1237
00:33:15,066 --> 00:33:16,616
this year and some other things


1238
00:33:16,616 --> 00:33:17,606
to keep in mind as you're


1239
00:33:17,606 --> 00:33:19,046
updating your apps to support


1240
00:33:19,046 --> 00:33:19,456
Dark Mode.


1241
00:33:20,306 --> 00:33:21,236
And how about we'll start with


1242
00:33:21,236 --> 00:33:21,946
the status bar.


1243
00:33:23,536 --> 00:33:25,666
Prior to iOS 13, we had two


1244
00:33:25,666 --> 00:33:27,056
existing status bar styles.


1245
00:33:27,636 --> 00:33:29,566
We had the default style and


1246
00:33:29,566 --> 00:33:30,196
light content.


1247
00:33:32,046 --> 00:33:34,176
New in iOS 13, we have a new


1248
00:33:34,176 --> 00:33:36,296
dark content style, which is


1249
00:33:36,386 --> 00:33:38,336
sort of taking over the place of


1250
00:33:38,336 --> 00:33:39,856
what used to be default, and


1251
00:33:39,856 --> 00:33:41,276
we've repurposed default to


1252
00:33:41,276 --> 00:33:43,316
become an automatic style


1253
00:33:43,316 --> 00:33:43,916
switching mode.


1254
00:33:45,326 --> 00:33:46,466
Now, the automatic switching is


1255
00:33:46,556 --> 00:33:47,906
based on the user interface


1256
00:33:47,906 --> 00:33:49,226
style of the view controller


1257
00:33:49,226 --> 00:33:50,596
that controls the status bar


1258
00:33:50,596 --> 00:33:51,156
appearance.


1259
00:33:51,556 --> 00:33:53,326
And as always, you can override


1260
00:33:53,446 --> 00:33:55,526
a specific preferred status bar


1261
00:33:55,526 --> 00:33:56,856
style on a view controller and


1262
00:33:56,856 --> 00:33:58,336
recurrent a particular style if


1263
00:33:58,336 --> 00:33:58,806
you desire.


1264
00:33:59,916 --> 00:34:02,076
Finally, it's not shown here but


1265
00:34:02,076 --> 00:34:03,436
just a quick note that we also


1266
00:34:03,436 --> 00:34:04,916
updated UIScroll view's


1267
00:34:05,006 --> 00:34:06,866
indicator style to behave in a


1268
00:34:06,866 --> 00:34:08,275
really similar way to this.


1269
00:34:09,826 --> 00:34:11,886
Next, let's talk about activity


1270
00:34:11,886 --> 00:34:12,536
indicators.


1271
00:34:13,235 --> 00:34:15,636
In iOS 13, these existing styles


1272
00:34:15,636 --> 00:34:16,436
are now deprecating.


1273
00:34:16,726 --> 00:34:17,926
And that's because they were


1274
00:34:17,926 --> 00:34:19,656
implying a very specific color


1275
00:34:19,656 --> 00:34:20,666
appearance, which doesn't really


1276
00:34:20,666 --> 00:34:21,436
make sense anymore.


1277
00:34:22,456 --> 00:34:23,366
But in their place, we've


1278
00:34:23,366 --> 00:34:24,706
introduced a handful of new


1279
00:34:24,706 --> 00:34:26,416
styles, which are just based on


1280
00:34:26,416 --> 00:34:27,536
the size of the activity


1281
00:34:27,536 --> 00:34:27,936
indicator.


1282
00:34:29,116 --> 00:34:30,906
They also use a nice dynamic


1283
00:34:31,056 --> 00:34:32,735
grey color by default, so they


1284
00:34:32,735 --> 00:34:34,146
look great in light and dark


1285
00:34:34,146 --> 00:34:35,306
mode without any changes.


1286
00:34:35,966 --> 00:34:37,536
But you can use the existing


1287
00:34:37,656 --> 00:34:39,696
color property to set a custom,


1288
00:34:39,696 --> 00:34:41,656
dynamic color, or even just a


1289
00:34:41,656 --> 00:34:43,266
static color like white, if you


1290
00:34:43,266 --> 00:34:44,606
want a particular fixed


1291
00:34:44,606 --> 00:34:44,976
appearance.


1292
00:34:47,505 --> 00:34:49,376
Next, here are a few things to


1293
00:34:49,376 --> 00:34:51,096
keep in mind when you're dealing


1294
00:34:51,096 --> 00:34:52,315
with text in your app.


1295
00:34:53,416 --> 00:34:54,946
Now, by default, text classes


1296
00:34:54,946 --> 00:34:57,126
like UILabel, UIText field, and


1297
00:34:57,126 --> 00:34:59,766
UIText view use the label color.


1298
00:35:00,206 --> 00:35:01,476
So, if you're just setting the


1299
00:35:01,476 --> 00:35:03,596
text on a new text field or text


1300
00:35:03,636 --> 00:35:05,596
view, or a label, you'll just


1301
00:35:05,596 --> 00:35:07,056
get a nice, correct appearance


1302
00:35:07,146 --> 00:35:08,366
in both light and dark by


1303
00:35:08,366 --> 00:35:08,796
default.


1304
00:35:09,616 --> 00:35:11,266
But if you use attributed


1305
00:35:11,266 --> 00:35:12,976
strings in your app, and you set


1306
00:35:12,976 --> 00:35:14,346
the attributed text of one of


1307
00:35:14,346 --> 00:35:16,516
these text classes, or if you


1308
00:35:16,516 --> 00:35:17,976
draw that attributed string


1309
00:35:17,976 --> 00:35:20,026
yourself manually, you should


1310
00:35:20,026 --> 00:35:21,206
keep in mind that you need to


1311
00:35:21,206 --> 00:35:22,646
specify a foreground color.


1312
00:35:23,726 --> 00:35:25,206
Drawing an attributed string


1313
00:35:25,316 --> 00:35:26,686
without any foreground color


1314
00:35:26,686 --> 00:35:28,536
attribute like this, is actually


1315
00:35:28,536 --> 00:35:30,316
defined to yield black text.


1316
00:35:31,456 --> 00:35:33,296
So, if you see black text in


1317
00:35:33,296 --> 00:35:34,856
your app in Dark Mode, and


1318
00:35:34,856 --> 00:35:36,016
you're using attributed strings,


1319
00:35:36,126 --> 00:35:37,516
just make sure you're specifying


1320
00:35:37,576 --> 00:35:39,536
a dynamic color like label, just


1321
00:35:39,536 --> 00:35:40,866
as you see here for that


1322
00:35:40,946 --> 00:35:42,166
foreground color attribute.


1323
00:35:42,506 --> 00:35:44,706
It's really quite easy.


1324
00:35:45,506 --> 00:35:47,476
Now, for those of you who have


1325
00:35:47,666 --> 00:35:49,486
embedded web content in your


1326
00:35:49,486 --> 00:35:51,466
app, you should know that Dark


1327
00:35:51,466 --> 00:35:52,596
Mode is opt in.


1328
00:35:53,576 --> 00:35:54,656
You can do this by using the


1329
00:35:54,656 --> 00:35:56,826
color scheme style property, or


1330
00:35:56,826 --> 00:35:58,076
a meta tag with the same name.


1331
00:35:59,006 --> 00:36:00,666
And then you can use the prefers


1332
00:36:00,666 --> 00:36:02,496
color scheme media query to


1333
00:36:02,496 --> 00:36:03,796
actually customize different


1334
00:36:03,796 --> 00:36:05,276
colors and images in both light


1335
00:36:05,276 --> 00:36:05,816
and dark mode.


1336
00:36:07,096 --> 00:36:08,136
You can learn more about all


1337
00:36:08,136 --> 00:36:09,516
these details in the Supporting


1338
00:36:09,516 --> 00:36:11,366
Dark Mode in Web Content video


1339
00:36:11,666 --> 00:36:12,946
from WWDC this year.


1340
00:36:14,626 --> 00:36:16,706
Now for those of you with tvOS


1341
00:36:16,706 --> 00:36:19,466
apps, there's a good chance that


1342
00:36:19,466 --> 00:36:20,766
you already support Dark Mode


1343
00:36:21,426 --> 00:36:22,516
since we've had that available


1344
00:36:22,516 --> 00:36:23,326
for a few years now.


1345
00:36:24,476 --> 00:36:26,346
Now, this year, your tvOS 13


1346
00:36:26,346 --> 00:36:27,806
apps will be expected to support


1347
00:36:27,806 --> 00:36:29,936
Dark Mode by default, just like


1348
00:36:29,936 --> 00:36:30,546
on iOS.


1349
00:36:31,796 --> 00:36:33,006
Most of the new API that we've


1350
00:36:33,066 --> 00:36:34,466
covered today, such as all the


1351
00:36:34,466 --> 00:36:36,746
dynamic colors and image assets,


1352
00:36:37,056 --> 00:36:37,836
it's all available.


1353
00:36:38,546 --> 00:36:39,986
But a few things like the new


1354
00:36:39,986 --> 00:36:41,726
system materials, are available


1355
00:36:41,756 --> 00:36:42,496
on iOS only.


1356
00:36:43,816 --> 00:36:45,076
Now, if you do already support


1357
00:36:45,076 --> 00:36:47,786
Dark Mode on your tvOS app, you


1358
00:36:47,786 --> 00:36:49,356
can feel free to adopt all of


1359
00:36:49,356 --> 00:36:51,086
these new features and new APIs


1360
00:36:51,086 --> 00:36:51,966
anywhere that you'd like.


1361
00:36:53,076 --> 00:36:54,246
But if your existing Dark Mode


1362
00:36:54,246 --> 00:36:55,426
implementation already is


1363
00:36:55,426 --> 00:36:56,746
working well, you don't need to


1364
00:36:56,746 --> 00:36:57,576
throw any of that away.


1365
00:37:00,256 --> 00:37:01,606
Now, if you'll be bringing your


1366
00:37:01,606 --> 00:37:03,206
iPad app to the Mac this year,


1367
00:37:03,836 --> 00:37:05,196
you can support Dark Mode on the


1368
00:37:05,196 --> 00:37:07,446
Mac in the exact same way, using


1369
00:37:07,526 --> 00:37:09,066
all the same API that we just


1370
00:37:09,066 --> 00:37:10,556
talked about for iOS.


1371
00:37:11,456 --> 00:37:13,456
Now, your Mac app will follow


1372
00:37:13,456 --> 00:37:14,696
the Dark Mode setting that the


1373
00:37:14,696 --> 00:37:16,106
user selects in system


1374
00:37:16,106 --> 00:37:16,636
preferences.


1375
00:37:17,156 --> 00:37:18,766
Very simple, just like on iOS.


1376
00:37:19,346 --> 00:37:20,916
But the only difference that you


1377
00:37:20,916 --> 00:37:22,456
actually will notice is that in


1378
00:37:22,456 --> 00:37:25,186
some cases, on the Mac, UIKit


1379
00:37:25,186 --> 00:37:26,686
will automatically provide


1380
00:37:26,846 --> 00:37:28,436
slightly different versions of


1381
00:37:28,436 --> 00:37:30,006
dynamic colors for those system


1382
00:37:30,006 --> 00:37:31,486
colors, and also some of the


1383
00:37:31,486 --> 00:37:33,356
materials, to better match the


1384
00:37:33,356 --> 00:37:34,696
ones that would normally be


1385
00:37:34,696 --> 00:37:36,096
provided by a framework like


1386
00:37:36,096 --> 00:37:36,846
AppKit on the Mac.


1387
00:37:37,476 --> 00:37:38,826
So, your app will look great


1388
00:37:38,926 --> 00:37:40,566
right alongside other AppKit


1389
00:37:40,566 --> 00:37:41,926
apps on the Mac as well.


1390
00:37:44,856 --> 00:37:46,516
Believe it or not, that's about


1391
00:37:46,516 --> 00:37:47,866
all you need to know so that you


1392
00:37:47,866 --> 00:37:49,666
can start updating all of your


1393
00:37:49,666 --> 00:37:51,576
apps for Dark Mode in iOS 13


1394
00:37:51,576 --> 00:37:51,936
today.


1395
00:37:53,696 --> 00:37:55,166
Once you build against the iOS


1396
00:37:55,166 --> 00:37:57,146
13 SCK, your app will


1397
00:37:57,146 --> 00:37:58,446
participate in Dark Mode by


1398
00:37:58,446 --> 00:37:58,846
default.


1399
00:37:59,726 --> 00:38:00,846
But you might have some work to


1400
00:38:00,846 --> 00:38:03,696
do, as you saw in our demos.


1401
00:38:03,836 --> 00:38:05,516
Now, we've made it really easy


1402
00:38:05,666 --> 00:38:06,826
to take advantage of all of


1403
00:38:06,826 --> 00:38:08,566
these new features and quickly


1404
00:38:08,566 --> 00:38:10,216
get your app going with Dark


1405
00:38:10,216 --> 00:38:10,446
Mode.


1406
00:38:11,176 --> 00:38:13,196
So be sure to start by using all


1407
00:38:13,196 --> 00:38:14,946
of the new dynamic system colors


1408
00:38:14,946 --> 00:38:16,036
and materials that we've made


1409
00:38:16,036 --> 00:38:16,926
available this year.


1410
00:38:17,376 --> 00:38:19,146
And then of course, create your


1411
00:38:19,146 --> 00:38:20,566
own custom appearances for


1412
00:38:20,566 --> 00:38:22,126
custom colors, custom images,


1413
00:38:22,126 --> 00:38:22,576
and more.


1414
00:38:23,366 --> 00:38:24,746
Finally, don't forget to take


1415
00:38:24,746 --> 00:38:27,396
advantage of all of the powerful


1416
00:38:27,396 --> 00:38:29,026
customizations and flexibility


1417
00:38:29,136 --> 00:38:31,126
built into UIKit to make your


1418
00:38:31,126 --> 00:38:32,836
apps really shine in Dark Mode.


1419
00:38:33,776 --> 00:38:34,946
We're really looking forward to


1420
00:38:34,946 --> 00:38:36,886
seeing how all of your apps look


1421
00:38:36,886 --> 00:38:38,906
in Dark Mode later this year.


1422
00:38:39,836 --> 00:38:41,216
For more information, we have


1423
00:38:41,216 --> 00:38:42,756
some more content available and


1424
00:38:42,756 --> 00:38:43,886
a little bit of sample code up


1425
00:38:43,886 --> 00:38:45,076
on our session page.


1426
00:38:45,596 --> 00:38:46,846
And with that, thank you very


1427
00:38:46,846 --> 00:38:46,976
much.


1428
00:38:47,516 --> 00:38:54,500
[ Applause ]

