1
00:00:00,506 --> 00:00:06,516
[ Music ]


2
00:00:07,516 --> 00:00:13,036
[ Applause ]


3
00:00:13,536 --> 00:00:14,596
>> Good afternoon.


4
00:00:14,796 --> 00:00:16,116
Welcome to Introducing


5
00:00:16,116 --> 00:00:16,636
PencilKit.


6
00:00:17,326 --> 00:00:20,396
I'm Will Thimbleby, and I want


7
00:00:20,396 --> 00:00:22,776
to talk about this fantastic


8
00:00:22,776 --> 00:00:23,426
little device.


9
00:00:24,116 --> 00:00:26,026
This is the Apple Pencil and it


10
00:00:26,026 --> 00:00:28,556
can truly transform your user's


11
00:00:28,556 --> 00:00:31,026
experience on iPad.


12
00:00:33,416 --> 00:00:35,646
In fact, it's the most unique


13
00:00:35,646 --> 00:00:37,696
aspect of iPad.


14
00:00:39,076 --> 00:00:42,416
From preschoolers to Isaac


15
00:00:42,416 --> 00:00:45,146
Newton, from your To-Do list to


16
00:00:45,146 --> 00:00:48,026
fine art, the Pencil is often


17
00:00:48,026 --> 00:00:48,706
where it starts.


18
00:00:50,786 --> 00:00:53,526
It's available on the fantastic


19
00:00:53,526 --> 00:00:56,896
iPad Pros and across our entire


20
00:00:56,896 --> 00:00:58,406
lineup of iPads, from the


21
00:00:58,406 --> 00:01:00,826
smallest Mini to the largest


22
00:01:01,416 --> 00:01:01,526
Pro.


23
00:01:02,626 --> 00:01:05,436
It's fantastic for photo


24
00:01:05,436 --> 00:01:07,656
retouching, annotating,


25
00:01:07,656 --> 00:01:09,816
doodling, in fact, anything you


26
00:01:09,816 --> 00:01:11,126
want to do that requires


27
00:01:11,126 --> 00:01:11,686
precision.


28
00:01:15,196 --> 00:01:18,616
In iOS 13, we've made great


29
00:01:18,616 --> 00:01:21,626
strides in latency, we've added


30
00:01:21,626 --> 00:01:23,796
a fantastic new tool palette.


31
00:01:24,456 --> 00:01:27,916
We're introducing PencilKit to


32
00:01:27,916 --> 00:01:30,206
enable you to add Pencil to your


33
00:01:30,206 --> 00:01:32,846
apps that much easier.


34
00:01:33,046 --> 00:01:34,206
And we're also introducing


35
00:01:34,206 --> 00:01:36,126
Markup Everywhere to allow users


36
00:01:36,186 --> 00:01:38,716
to annotate and markup your


37
00:01:38,716 --> 00:01:41,166
app's content even if your app


38
00:01:41,216 --> 00:01:42,616
doesn't do anything with Pencil.


39
00:01:43,406 --> 00:01:44,776
We're going to talk about great


40
00:01:44,966 --> 00:01:47,116
Pencil experiences, how


41
00:01:47,116 --> 00:01:48,686
PencilKit can help you make a


42
00:01:48,686 --> 00:01:49,916
great Pencil experience.


43
00:01:50,156 --> 00:01:51,906
And finally, with Markup


44
00:01:51,906 --> 00:01:53,436
Everywhere, how you can provide


45
00:01:53,436 --> 00:01:55,556
the content to users so that


46
00:01:55,556 --> 00:01:58,146
they can mark it up.


47
00:01:58,416 --> 00:02:00,226
What makes a great Pencil


48
00:02:00,226 --> 00:02:00,766
experience?


49
00:02:02,086 --> 00:02:03,846
Well, a great Pencil experience


50
00:02:03,846 --> 00:02:05,496
is one that fully uses


51
00:02:05,656 --> 00:02:07,556
everything the Apple Pencil has


52
00:02:07,556 --> 00:02:08,136
to offer.


53
00:02:09,616 --> 00:02:12,176
And that means fully using the


54
00:02:12,176 --> 00:02:13,886
precision the Apple Pencil has


55
00:02:13,946 --> 00:02:14,326
to offer.


56
00:02:15,296 --> 00:02:17,466
It lets you touch a pixel and it


57
00:02:17,466 --> 00:02:18,776
gives you that information at


58
00:02:18,826 --> 00:02:20,596
240 times a second.


59
00:02:21,626 --> 00:02:23,406
It's uniquely expressive, giving


60
00:02:23,406 --> 00:02:25,856
you force, azimuth, and


61
00:02:25,856 --> 00:02:27,386
altitude, allowing you to create


62
00:02:27,706 --> 00:02:29,656
real expressive marks on your


63
00:02:29,656 --> 00:02:31,306
app that bring your apps to


64
00:02:31,306 --> 00:02:31,686
life.


65
00:02:33,126 --> 00:02:33,886
And finally, the


66
00:02:34,216 --> 00:02:36,006
second-generation Apple Pencil


67
00:02:36,326 --> 00:02:38,436
has Pencil taps, that allow the


68
00:02:38,436 --> 00:02:40,476
user to change modes in your app


69
00:02:41,056 --> 00:02:42,356
without ever putting the Pencil


70
00:02:42,356 --> 00:02:42,656
down.


71
00:02:44,696 --> 00:02:46,586
There are now three different


72
00:02:46,616 --> 00:02:47,416
types of Pencil.


73
00:02:47,936 --> 00:02:49,116
The first-generation Apple


74
00:02:49,116 --> 00:02:50,886
Pencil, the second-generation,


75
00:02:50,946 --> 00:02:52,096
and the Logitech Crayon.


76
00:02:53,366 --> 00:02:54,586
These all have slightly


77
00:02:54,586 --> 00:02:55,656
different capabilities.


78
00:02:55,656 --> 00:02:57,546
They all have that same great


79
00:02:57,826 --> 00:02:58,486
precision.


80
00:02:59,706 --> 00:03:01,916
They all have the same azimuth


81
00:03:01,916 --> 00:03:03,136
and altitude that allow you to


82
00:03:03,166 --> 00:03:04,286
create your expressive marks.


83
00:03:05,766 --> 00:03:08,256
The first-generation Pencil adds


84
00:03:08,836 --> 00:03:09,586
force to that.


85
00:03:10,346 --> 00:03:12,036
And the second-generation Pencil


86
00:03:12,606 --> 00:03:13,656
adds tap gestures.


87
00:03:17,056 --> 00:03:18,266
I'm going to talk about a few of


88
00:03:18,266 --> 00:03:19,916
the more complicated aspects of


89
00:03:19,916 --> 00:03:21,556
supporting Apple Pencil well.


90
00:03:21,556 --> 00:03:24,416
But if you're just starting and


91
00:03:24,416 --> 00:03:25,556
you're wanting to build a custom


92
00:03:25,556 --> 00:03:27,396
drawing experience, I especially


93
00:03:27,396 --> 00:03:29,546
recommend ''Leveraging Touch


94
00:03:29,546 --> 00:03:35,146
Input on iOS'' in WWDC 2016.


95
00:03:35,226 --> 00:03:37,796
Understanding how a Pencil works


96
00:03:38,376 --> 00:03:41,296
is key to understanding what it


97
00:03:41,296 --> 00:03:41,666
does.


98
00:03:43,006 --> 00:03:43,996
And so, I'm going to take you a


99
00:03:43,996 --> 00:03:45,846
little bit behind the scenes and


100
00:03:45,846 --> 00:03:46,866
tell you how the Pencil


101
00:03:46,866 --> 00:03:47,386
functions.


102
00:03:49,176 --> 00:03:50,906
The Pencil creates a uniquely


103
00:03:50,906 --> 00:03:52,526
precise touch location on the


104
00:03:52,526 --> 00:03:55,216
screen and gives you that 240


105
00:03:55,216 --> 00:03:55,506
hits.


106
00:03:56,736 --> 00:03:57,776
As you know, it gives you


107
00:03:57,776 --> 00:03:59,256
azimuth, which is the angle


108
00:03:59,256 --> 00:04:01,566
around the perpendicular of the


109
00:04:01,566 --> 00:04:01,806
iPad.


110
00:04:06,046 --> 00:04:07,976
And it gives you altitude or


111
00:04:08,046 --> 00:04:10,476
tilt, which is the steepness at


112
00:04:10,476 --> 00:04:11,706
which you're holding the Pencil.


113
00:04:12,716 --> 00:04:14,286
What you may not know is how it


114
00:04:14,286 --> 00:04:14,706
does this.


115
00:04:15,686 --> 00:04:17,185
The Pencil generates a second


116
00:04:17,336 --> 00:04:18,636
hit and touchpoint on the


117
00:04:18,636 --> 00:04:19,536
surface of the iPad.


118
00:04:20,166 --> 00:04:22,106
And using trigonometry, it uses


119
00:04:22,106 --> 00:04:24,546
that to calculate azimuth and


120
00:04:24,546 --> 00:04:25,066
altitude.


121
00:04:27,696 --> 00:04:30,816
Finally, the Pencil has an axial


122
00:04:30,906 --> 00:04:32,596
force sensor that detects the


123
00:04:32,596 --> 00:04:34,676
pressure and it sends that data


124
00:04:34,676 --> 00:04:35,386
over Bluetooth.


125
00:04:36,026 --> 00:04:39,456
There are a few consequences of


126
00:04:39,456 --> 00:04:39,666
this.


127
00:04:40,916 --> 00:04:43,146
The first is azimuth and


128
00:04:43,146 --> 00:04:45,516
altitude may be estimated when


129
00:04:45,516 --> 00:04:46,686
that second touchpoint is


130
00:04:46,686 --> 00:04:49,516
obscured, perhaps by a finger or


131
00:04:49,516 --> 00:04:50,316
the edge of the screen.


132
00:04:52,396 --> 00:04:54,706
Azimuth is emphasized when the


133
00:04:54,706 --> 00:04:56,246
Pencil is nearly perpendicular


134
00:04:56,246 --> 00:04:56,876
to the iPad.


135
00:04:58,126 --> 00:05:00,496
And finally, the force data


136
00:05:00,496 --> 00:05:01,836
which comes via a different


137
00:05:01,836 --> 00:05:03,866
mechanism is delayed from the


138
00:05:03,866 --> 00:05:04,866
touch location data.


139
00:05:06,186 --> 00:05:08,976
Handling these more complicated


140
00:05:08,976 --> 00:05:11,036
aspects of the Pencil is key to


141
00:05:11,036 --> 00:05:12,206
building a great Pencil


142
00:05:12,206 --> 00:05:12,726
experience.


143
00:05:15,626 --> 00:05:17,376
As I draw in from the edge of


144
00:05:17,376 --> 00:05:19,636
the screen, I'm getting


145
00:05:19,636 --> 00:05:21,516
estimated azimuth and altitude.


146
00:05:23,926 --> 00:05:26,036
As I continue to draw into the


147
00:05:26,036 --> 00:05:28,166
screen, as a second touchpoint


148
00:05:28,166 --> 00:05:29,236
comes onto the surface of the


149
00:05:29,236 --> 00:05:31,506
screen, you get the correct


150
00:05:31,506 --> 00:05:31,906
values.


151
00:05:32,666 --> 00:05:33,636
Now, instead of leaving it


152
00:05:33,636 --> 00:05:35,836
looking something like this, you


153
00:05:35,836 --> 00:05:36,966
should be back-filling those


154
00:05:37,056 --> 00:05:38,246
correct values to correct the


155
00:05:38,246 --> 00:05:39,966
estimated ones.


156
00:05:45,166 --> 00:05:48,406
Second, as you draw, there's a


157
00:05:48,466 --> 00:05:50,896
region behind the Pencil that is


158
00:05:50,896 --> 00:05:52,266
using estimated force.


159
00:05:52,266 --> 00:05:56,526
You should be continuously


160
00:05:56,526 --> 00:05:58,566
listening to force updates so


161
00:05:58,616 --> 00:05:59,706
you can be drawing the correct


162
00:05:59,706 --> 00:06:00,156
values.


163
00:06:01,636 --> 00:06:04,066
This remains true even after the


164
00:06:04,136 --> 00:06:05,706
Pencil is lifted off the surface


165
00:06:05,706 --> 00:06:06,306
of the iPad.


166
00:06:07,546 --> 00:06:09,186
There's a region of the stroke


167
00:06:09,976 --> 00:06:11,296
that's still waiting for those


168
00:06:11,296 --> 00:06:12,226
final force values.


169
00:06:12,786 --> 00:06:13,986
You need to keep listening to


170
00:06:13,986 --> 00:06:16,036
them even after touch has ended.


171
00:06:19,446 --> 00:06:22,846
Now, one aspect of this is that


172
00:06:23,326 --> 00:06:25,156
it means that the user can start


173
00:06:25,156 --> 00:06:27,786
drawing the next stroke before


174
00:06:27,786 --> 00:06:30,096
the last stroke has got all the


175
00:06:30,096 --> 00:06:30,806
final values.


176
00:06:33,396 --> 00:06:35,076
I would recommend using a serial


177
00:06:35,076 --> 00:06:37,176
queue to only be handling one


178
00:06:37,176 --> 00:06:37,996
stroke at a time.


179
00:06:38,916 --> 00:06:41,416
The time is short enough that


180
00:06:41,416 --> 00:06:42,566
the user is not going to notice.


181
00:06:42,566 --> 00:06:44,636
But you want to handle the data


182
00:06:44,636 --> 00:06:45,146
correctly.


183
00:06:48,216 --> 00:06:50,186
Another part of handling Pencil


184
00:06:50,186 --> 00:06:51,926
well is latency.


185
00:06:52,466 --> 00:06:55,066
With physical pencils, the


186
00:06:55,116 --> 00:06:57,096
pencil is intrinsically tied to


187
00:06:57,096 --> 00:06:59,186
the line that's being drawn.


188
00:07:00,306 --> 00:07:02,696
On a digital device, there's


189
00:07:02,696 --> 00:07:04,606
often a gap between where the


190
00:07:05,366 --> 00:07:07,056
implement is and where the line


191
00:07:07,056 --> 00:07:08,506
on screen is.


192
00:07:09,056 --> 00:07:10,766
Keeping this as small as


193
00:07:10,836 --> 00:07:13,196
possible is critical to


194
00:07:13,196 --> 00:07:14,776
maintaining that feeling of


195
00:07:14,876 --> 00:07:15,836
drawing on paper.


196
00:07:21,586 --> 00:07:24,326
We care so much about latency at


197
00:07:24,326 --> 00:07:25,726
Apple, that we have robots


198
00:07:25,796 --> 00:07:27,456
testing it continuously.


199
00:07:28,776 --> 00:07:30,116
This is a high-speed capture


200
00:07:30,116 --> 00:07:31,296
from one of our tests.


201
00:07:31,856 --> 00:07:33,466
It's at 800 frames per second


202
00:07:33,466 --> 00:07:35,946
and you can see just how small


203
00:07:35,946 --> 00:07:37,316
the distance between the pencil


204
00:07:37,316 --> 00:07:38,826
and the line is.


205
00:07:40,066 --> 00:07:41,746
Let me show you that in real


206
00:07:41,746 --> 00:07:42,056
time.


207
00:07:42,606 --> 00:07:44,976
Did you get it?


208
00:07:45,326 --> 00:07:46,316
I'll show it to you again.


209
00:07:49,976 --> 00:07:52,586
So, a few tips for providing the


210
00:07:52,646 --> 00:07:53,536
best latency.


211
00:07:54,636 --> 00:07:56,236
First, you need to be rendering


212
00:07:56,236 --> 00:07:56,666
in Metal.


213
00:07:57,836 --> 00:07:59,566
You only have a few milliseconds


214
00:07:59,566 --> 00:08:00,946
each frame and you need to be


215
00:08:00,946 --> 00:08:02,726
doing so consistently frame


216
00:08:02,726 --> 00:08:04,546
after frame to provide good


217
00:08:04,546 --> 00:08:04,976
latency.


218
00:08:06,636 --> 00:08:08,826
In iOS 13, we've made great


219
00:08:08,886 --> 00:08:10,266
strides improving prediction.


220
00:08:10,686 --> 00:08:11,916
You should be using predicted


221
00:08:11,966 --> 00:08:13,936
touches to reduce your latency


222
00:08:13,936 --> 00:08:15,246
even further.


223
00:08:17,296 --> 00:08:19,236
Finally, if you're building a


224
00:08:19,236 --> 00:08:22,226
drawing app, for absolute best


225
00:08:22,226 --> 00:08:24,386
latency you should avoid things


226
00:08:24,386 --> 00:08:26,436
like transparent Metal layers.


227
00:08:26,846 --> 00:08:27,736
And you should be avoiding


228
00:08:27,736 --> 00:08:29,246
things like UI effects views


229
00:08:29,746 --> 00:08:32,206
with blurs and overlays on top


230
00:08:32,206 --> 00:08:33,155
of your Metal layers.


231
00:08:34,606 --> 00:08:36,556
And one aspect of this that gets


232
00:08:36,556 --> 00:08:38,336
overlooked sometimes is the


233
00:08:38,446 --> 00:08:40,566
default navigation bar and, in


234
00:08:40,566 --> 00:08:42,336
fact, the home affordance can


235
00:08:42,336 --> 00:08:45,016
add extra cost to the rendering.


236
00:08:46,066 --> 00:08:47,456
The final part of supporting the


237
00:08:47,456 --> 00:08:49,306
Pencil is the Pencil Tap


238
00:08:49,306 --> 00:08:49,726
gesture.


239
00:08:50,356 --> 00:08:52,196
And this is a great way to let


240
00:08:52,196 --> 00:08:54,846
the user switch modes without


241
00:08:54,846 --> 00:08:56,456
having to put the Pencil down.


242
00:09:00,136 --> 00:09:01,676
To do so, you should use


243
00:09:01,676 --> 00:09:03,826
UIPencilInteraction, set


244
00:09:04,436 --> 00:09:06,056
yourself as the delegate, and


245
00:09:06,816 --> 00:09:08,316
when the user taps, you'll get


246
00:09:08,316 --> 00:09:08,956
called back.


247
00:09:10,436 --> 00:09:12,206
When you do so, you should be


248
00:09:12,206 --> 00:09:13,816
respecting the user's preferred


249
00:09:14,076 --> 00:09:14,766
tap action.


250
00:09:15,416 --> 00:09:16,536
And this is something the user


251
00:09:16,536 --> 00:09:17,956
will have chosen in Settings.


252
00:09:18,976 --> 00:09:21,316
If you can, you should be


253
00:09:21,316 --> 00:09:22,086
respecting this.


254
00:09:23,496 --> 00:09:24,786
If it doesn't make sense for


255
00:09:24,786 --> 00:09:27,636
your app, Pencil Tap should be


256
00:09:27,636 --> 00:09:29,346
used for nondestructive mode


257
00:09:29,346 --> 00:09:29,816
switching.


258
00:09:33,156 --> 00:09:35,786
So, up until today, building a


259
00:09:35,786 --> 00:09:38,216
great Pencil experience was a


260
00:09:38,216 --> 00:09:38,926
lot of work.


261
00:09:38,926 --> 00:09:41,826
We provide some great APIs and


262
00:09:41,976 --> 00:09:45,436
fantastic hardware and you have


263
00:09:45,436 --> 00:09:46,576
created some of the best drawing


264
00:09:46,576 --> 00:09:47,746
experiences in the world.


265
00:09:48,726 --> 00:09:50,126
I've highlighted a few of the


266
00:09:50,126 --> 00:09:51,496
more complicated aspects of


267
00:09:51,496 --> 00:09:52,806
supporting Apple Pencil well.


268
00:09:53,606 --> 00:09:55,056
And if you haven't already,


269
00:09:55,726 --> 00:09:57,016
consider these as polish.


270
00:09:57,896 --> 00:09:59,136
But for those of you who are


271
00:09:59,136 --> 00:10:01,126
just getting started, we'd love


272
00:10:02,836 --> 00:10:04,856
to make your lives a whole lot


273
00:10:04,856 --> 00:10:05,506
easier today.


274
00:10:06,856 --> 00:10:09,166
So, I'm very happy to introduce


275
00:10:10,096 --> 00:10:10,946
PencilKit.


276
00:10:12,516 --> 00:10:19,116
[ Applause ]


277
00:10:19,616 --> 00:10:21,476
PencilKit is the framework that


278
00:10:21,476 --> 00:10:22,846
we use across our entire


279
00:10:22,846 --> 00:10:23,856
operating system.


280
00:10:24,796 --> 00:10:26,626
We use it in Notes for providing


281
00:10:26,626 --> 00:10:28,206
low latency drawing and


282
00:10:28,206 --> 00:10:28,736
notetaking.


283
00:10:29,426 --> 00:10:31,766
We use it in Pages for marking


284
00:10:31,766 --> 00:10:32,516
up documents.


285
00:10:33,116 --> 00:10:34,146
And we use it in Markup


286
00:10:34,146 --> 00:10:35,486
Everywhere for annotating


287
00:10:35,486 --> 00:10:37,296
screenshots and PDFs of your


288
00:10:37,296 --> 00:10:38,136
app's content.


289
00:10:39,196 --> 00:10:40,776
We gave it to a few developers


290
00:10:40,856 --> 00:10:43,026
and Pinterest and Canvas added


291
00:10:43,136 --> 00:10:44,906
features to their apps in just


292
00:10:45,236 --> 00:10:46,426
such little time.


293
00:10:48,716 --> 00:10:50,366
You can add it to your app in


294
00:10:50,366 --> 00:10:51,926
just three lines of code.


295
00:10:55,526 --> 00:10:58,256
Here, we create a canvas, add it


296
00:10:58,256 --> 00:10:59,426
to your view hierarchy, and


297
00:10:59,426 --> 00:11:00,766
choose an ink.


298
00:11:01,626 --> 00:11:04,236
And with that, you get the same


299
00:11:04,446 --> 00:11:06,916
industry-leading, low latency


300
00:11:07,286 --> 00:11:08,326
that we have across our


301
00:11:08,326 --> 00:11:09,086
operating system.


302
00:11:09,566 --> 00:11:11,696
The same great expressive inks


303
00:11:11,846 --> 00:11:13,026
that we've spent hours


304
00:11:13,026 --> 00:11:13,686
perfecting.


305
00:11:14,726 --> 00:11:17,376
And the same fantastic UI and


306
00:11:17,376 --> 00:11:17,976
tool palette.


307
00:11:20,096 --> 00:11:21,476
With a few more lines of code,


308
00:11:21,476 --> 00:11:22,306
you can create something a


309
00:11:22,306 --> 00:11:23,576
little bit more comprehensive


310
00:11:23,996 --> 00:11:24,896
like our sample app.


311
00:11:25,876 --> 00:11:26,876
I'd love to show that to you,


312
00:11:26,876 --> 00:11:26,976
now.


313
00:11:30,256 --> 00:11:32,646
So, here we have our sample app.


314
00:11:33,046 --> 00:11:35,736
It's a little, little drawing


315
00:11:35,736 --> 00:11:35,956
app.


316
00:11:36,186 --> 00:11:37,436
It's got a few thumbnails of


317
00:11:37,436 --> 00:11:38,336
things I've been working on


318
00:11:38,336 --> 00:11:38,606
earlier.


319
00:11:39,496 --> 00:11:40,776
And to give you an idea of the


320
00:11:40,896 --> 00:11:42,776
breadth of what PencilKit can


321
00:11:42,776 --> 00:11:45,056
do, I'll just show you some of


322
00:11:45,056 --> 00:11:45,266
these.


323
00:11:45,456 --> 00:11:46,426
Here're some notes that have


324
00:11:46,426 --> 00:11:47,576
been taken and we can scroll


325
00:11:47,576 --> 00:11:50,306
through these beautiful notes.


326
00:11:52,436 --> 00:11:54,536
And here's a beautiful flower my


327
00:11:54,536 --> 00:11:55,396
friend Andy drew.


328
00:11:55,946 --> 00:11:58,456
This gives me an opportunity to


329
00:11:58,456 --> 00:12:00,496
also show how PencilKit reacts


330
00:12:00,566 --> 00:12:01,156
to Dark Mode.


331
00:12:01,156 --> 00:12:03,636
If I bring down Control Center,


332
00:12:05,016 --> 00:12:07,726
I can switch into Dark, and the


333
00:12:07,846 --> 00:12:09,116
flower that looked great in


334
00:12:09,116 --> 00:12:11,686
Light looks just as stunning in


335
00:12:11,686 --> 00:12:12,886
Dark Mode.


336
00:12:14,826 --> 00:12:16,786
As I come out, the thumbnails


337
00:12:16,786 --> 00:12:18,636
are rerendered and you can see


338
00:12:18,636 --> 00:12:19,766
that the notes are just a


339
00:12:19,766 --> 00:12:20,216
legible.


340
00:12:22,116 --> 00:12:24,406
But luckily for me, I get to do


341
00:12:24,406 --> 00:12:25,826
what every engineer dreams of


342
00:12:25,936 --> 00:12:29,046
and that is drawing on stage.


343
00:12:31,076 --> 00:12:33,836
So, I'm going to switch back to


344
00:12:33,836 --> 00:12:36,506
Light Mode and I'm going to


345
00:12:36,506 --> 00:12:38,546
continue drawing a logo I was


346
00:12:38,546 --> 00:12:39,846
drawing earlier.


347
00:12:41,476 --> 00:12:43,036
At the bottom here, you can see


348
00:12:43,036 --> 00:12:45,936
our great new tool palette UI.


349
00:12:46,046 --> 00:12:46,966
And with a single finger, I can


350
00:12:46,966 --> 00:12:48,206
drag it around the screen to


351
00:12:48,206 --> 00:12:48,976
where it's comfortable.


352
00:12:51,616 --> 00:12:52,936
For now, I'm going to leave it


353
00:12:52,936 --> 00:12:53,876
at the bottom of the screen.


354
00:12:53,876 --> 00:12:55,746
To finish this, I'm going to use


355
00:12:55,746 --> 00:12:57,246
the Ruler and marker to add some


356
00:12:57,246 --> 00:12:57,556
color.


357
00:12:58,666 --> 00:13:00,256
So, I can tap the Ruler to bring


358
00:13:00,256 --> 00:13:00,766
the Ruler in.


359
00:13:01,166 --> 00:13:02,916
And with two fingers, I can


360
00:13:02,916 --> 00:13:03,686
position the Ruler.


361
00:13:05,056 --> 00:13:06,486
I can draw a straight line along


362
00:13:06,486 --> 00:13:08,276
the Ruler but I can also use the


363
00:13:08,276 --> 00:13:09,336
Ruler to mask.


364
00:13:10,686 --> 00:13:12,446
So, I'll do that.


365
00:13:15,056 --> 00:13:17,316
Let me add some more color.


366
00:13:26,406 --> 00:13:27,896
I'll tap the Ruler to dismiss


367
00:13:27,896 --> 00:13:28,096
it.


368
00:13:28,946 --> 00:13:30,146
And I'll add some color in at


369
00:13:30,146 --> 00:13:30,666
the bottom.


370
00:13:32,466 --> 00:13:34,196
Now, one of the most exciting


371
00:13:34,196 --> 00:13:36,216
things PencilKit is doing, is


372
00:13:36,216 --> 00:13:37,516
it's starting to bring together


373
00:13:37,516 --> 00:13:39,506
the worlds of bitmap and vector,


374
00:13:40,236 --> 00:13:41,276
object and pixel.


375
00:13:42,486 --> 00:13:43,616
And one of the areas you see


376
00:13:43,616 --> 00:13:44,526
there is the Eraser.


377
00:13:44,526 --> 00:13:45,906
So, I'm going to use the


378
00:13:46,506 --> 00:13:47,886
double-tap gesture on the Apple


379
00:13:47,886 --> 00:13:49,326
Pencil to change the Eraser.


380
00:13:51,776 --> 00:13:53,116
Just like that, I've switched


381
00:13:53,116 --> 00:13:53,466
modes.


382
00:13:54,416 --> 00:13:55,856
And this is the Pixel Eraser


383
00:13:55,856 --> 00:13:58,716
which lets me draw around and


384
00:13:58,716 --> 00:14:00,366
cut out parts of this logo.


385
00:14:12,276 --> 00:14:14,116
Now, if I tap the Eraser, I


386
00:14:14,116 --> 00:14:15,456
switch to the Object Eraser.


387
00:14:15,946 --> 00:14:17,506
And using Object Eraser, I can


388
00:14:17,506 --> 00:14:20,006
draw around this and I can just


389
00:14:20,066 --> 00:14:21,656
delete the bits that I've cut


390
00:14:21,656 --> 00:14:21,886
out.


391
00:14:26,186 --> 00:14:28,016
Just like that, I've used vector


392
00:14:28,016 --> 00:14:31,176
and bitmap operations to create


393
00:14:31,176 --> 00:14:31,606
a drawing.


394
00:14:31,606 --> 00:14:32,896
Let me show you that again.


395
00:14:33,166 --> 00:14:34,626
I'll tap. I'll get the Pixel


396
00:14:34,626 --> 00:14:34,976
Eraser.


397
00:14:38,346 --> 00:14:39,326
I'll take a cutout.


398
00:14:39,656 --> 00:14:40,766
And this time, I'll use the


399
00:14:40,766 --> 00:14:43,066
Lasso Tool, which is next to the


400
00:14:43,066 --> 00:14:43,436
Eraser.


401
00:14:48,156 --> 00:14:50,886
I can move that where I want, or


402
00:14:50,886 --> 00:14:53,626
I can tap on it and delete it.


403
00:14:54,336 --> 00:14:56,026
Now, that I've created my work


404
00:14:56,026 --> 00:14:58,526
of art, I really ought to sign


405
00:14:58,526 --> 00:14:58,686
this.


406
00:14:58,786 --> 00:15:00,976
Luckily, our sample app has a


407
00:15:00,976 --> 00:15:01,876
signature feature.


408
00:15:02,736 --> 00:15:03,916
And up here in the top right,


409
00:15:03,916 --> 00:15:06,306
I'm going to tap Signature and


410
00:15:06,306 --> 00:15:07,496
you'll notice as I do so, the


411
00:15:07,496 --> 00:15:09,596
tool palette goes away and we


412
00:15:09,596 --> 00:15:11,416
have a custom picker up here


413
00:15:11,416 --> 00:15:12,786
which lets me take just a black


414
00:15:12,846 --> 00:15:13,506
or blue ink.


415
00:15:14,686 --> 00:15:16,466
For now, I'm going to stick with


416
00:15:16,466 --> 00:15:16,736
black.


417
00:15:17,476 --> 00:15:20,256
I'm going to add my signature.


418
00:15:20,256 --> 00:15:22,946
Now that I've done that, I'm


419
00:15:22,946 --> 00:15:25,776
going to tap to sign my drawing.


420
00:15:27,846 --> 00:15:27,946
There.


421
00:15:28,156 --> 00:15:29,786
I think that's a great place to


422
00:15:29,786 --> 00:15:29,976
leave it.


423
00:15:30,046 --> 00:15:31,676
I think I could frame that.


424
00:15:33,516 --> 00:15:36,686
That's cool.


425
00:15:37,516 --> 00:15:43,266
[ Applause ]


426
00:15:43,766 --> 00:15:44,566
So let's talk about the


427
00:15:44,596 --> 00:15:46,456
architecture of PencilKit.


428
00:15:48,106 --> 00:15:49,106
The main thing you'll be using


429
00:15:49,106 --> 00:15:50,316
is the PKCanvasView.


430
00:15:50,716 --> 00:15:52,056
This provides the drawable


431
00:15:52,056 --> 00:15:52,956
region for your app.


432
00:15:55,396 --> 00:15:58,366
PKDrawing is the data model.


433
00:15:59,346 --> 00:16:01,096
It captures all those beautiful


434
00:16:01,786 --> 00:16:01,966
strokes.


435
00:16:03,276 --> 00:16:06,256
PKToolPicker provides the UI


436
00:16:06,696 --> 00:16:09,976
that floats around the screen.


437
00:16:10,046 --> 00:16:12,356
And PKTools are the tools that


438
00:16:12,356 --> 00:16:14,236
provide those inks and


439
00:16:14,236 --> 00:16:16,316
interactions that happen on your


440
00:16:16,316 --> 00:16:16,686
canvas.


441
00:16:21,266 --> 00:16:23,386
PKCanvasView is a UI scroll view


442
00:16:23,876 --> 00:16:25,576
that lets you pan and zoom.


443
00:16:26,456 --> 00:16:27,776
It lets you choose how the


444
00:16:27,776 --> 00:16:29,066
user-- what the user's


445
00:16:29,066 --> 00:16:30,566
interaction does to it by


446
00:16:30,566 --> 00:16:31,286
setting the tool.


447
00:16:31,576 --> 00:16:32,766
And it allows you to get the


448
00:16:32,766 --> 00:16:35,596
data model from it and set the


449
00:16:35,596 --> 00:16:37,216
data model on it using the


450
00:16:37,216 --> 00:16:38,676
drawing property.


451
00:16:40,596 --> 00:16:42,696
PKDrawing is the data model of


452
00:16:42,696 --> 00:16:43,066
PencilKit.


453
00:16:43,066 --> 00:16:44,816
And this is the one piece of


454
00:16:44,856 --> 00:16:46,156
PencilKit that is available on


455
00:16:46,156 --> 00:16:46,726
macOS.


456
00:16:47,456 --> 00:16:50,326
It has a data format and it


457
00:16:50,326 --> 00:16:52,136
allows you to load and store


458
00:16:52,136 --> 00:16:53,536
drawings to data.


459
00:16:54,106 --> 00:16:56,246
You can use these drawings to


460
00:16:56,246 --> 00:16:58,446
generate images for sharing or


461
00:16:58,446 --> 00:16:58,936
thumbnails.


462
00:17:01,386 --> 00:17:03,116
Let's take a look at how the


463
00:17:03,116 --> 00:17:04,606
sample app generates thumbnails.


464
00:17:07,215 --> 00:17:09,846
Because all of these values have


465
00:17:09,846 --> 00:17:11,976
value types, we can safely do


466
00:17:11,976 --> 00:17:13,976
this work on a background queue.


467
00:17:15,576 --> 00:17:17,205
Because we want to generate


468
00:17:17,746 --> 00:17:19,056
those thumbnails in Light or


469
00:17:19,056 --> 00:17:20,906
Dark Mode depending on where the


470
00:17:20,906 --> 00:17:22,906
app is, we can use


471
00:17:22,906 --> 00:17:24,136
UITraitCollections


472
00:17:24,246 --> 00:17:25,256
performAsCurrent.


473
00:17:29,286 --> 00:17:31,106
We use the drawing to generate


474
00:17:31,106 --> 00:17:31,646
that image.


475
00:17:32,756 --> 00:17:34,796
And then, finally, we can set


476
00:17:34,796 --> 00:17:36,386
that image back on the main


477
00:17:36,386 --> 00:17:36,646
thread.


478
00:17:39,596 --> 00:17:41,806
So, now I'd love to hand over to


479
00:17:41,806 --> 00:17:44,136
Jenny who'll talk more about the


480
00:17:44,136 --> 00:17:46,826
fantastic tools and Tool Picker


481
00:17:46,826 --> 00:17:48,346
and the great things that


482
00:17:48,346 --> 00:17:49,326
PencilKit can do.


483
00:17:50,516 --> 00:17:55,500
[ Applause ]


484
00:17:58,336 --> 00:17:58,976
>> Thanks, Will.


485
00:17:59,156 --> 00:18:01,356
Hi. I'm Jenny and I'm going to--


486
00:18:01,356 --> 00:18:02,936
let's continue our tour through


487
00:18:02,936 --> 00:18:04,706
PencilKit by walking through


488
00:18:04,756 --> 00:18:06,326
some of the great tools that


489
00:18:06,326 --> 00:18:07,526
PencilKit offers you.


490
00:18:08,376 --> 00:18:10,046
These tools are located in a


491
00:18:10,046 --> 00:18:11,586
brand-new Tool Picker.


492
00:18:11,846 --> 00:18:12,676
It's dynamic.


493
00:18:13,106 --> 00:18:14,296
It floats above everything.


494
00:18:14,296 --> 00:18:16,506
I can drag it from edge to edge


495
00:18:16,696 --> 00:18:18,886
or even dock it to the bottom to


496
00:18:18,886 --> 00:18:20,456
really let it get out of my way.


497
00:18:22,446 --> 00:18:24,456
As Will mentioned, these tools


498
00:18:24,456 --> 00:18:25,716
are PKTool types.


499
00:18:26,316 --> 00:18:27,946
And for the marking tools,


500
00:18:27,946 --> 00:18:29,636
they're PKInkingTool types.


501
00:18:30,186 --> 00:18:31,776
You can specify one of the three


502
00:18:31,776 --> 00:18:36,126
types, either pen, marker, or


503
00:18:36,126 --> 00:18:36,726
pencil.


504
00:18:39,816 --> 00:18:42,066
Each of these tools are super


505
00:18:42,066 --> 00:18:43,796
dynamic and expressive.


506
00:18:43,996 --> 00:18:45,886
And you can see how within even


507
00:18:45,926 --> 00:18:48,336
a single stroke, the width and


508
00:18:48,336 --> 00:18:50,256
opacity change based on


509
00:18:50,256 --> 00:18:52,586
different Pencil properties like


510
00:18:52,586 --> 00:18:55,436
force, azimuth, altitude, or


511
00:18:55,436 --> 00:18:56,866
velocity.


512
00:18:59,086 --> 00:18:59,986
You can set this tool on the


513
00:18:59,986 --> 00:19:03,196
canvasView to set what ink is


514
00:19:03,236 --> 00:19:04,156
set on the canvas.


515
00:19:04,566 --> 00:19:06,276
If you set the canvasView as an


516
00:19:06,276 --> 00:19:07,956
observer of the Tool Picker,


517
00:19:08,486 --> 00:19:09,906
underneath the hood will set the


518
00:19:09,906 --> 00:19:11,746
ink on the canvasView for you.


519
00:19:12,476 --> 00:19:13,816
However, if you have the


520
00:19:13,816 --> 00:19:15,406
signature pane and you don't


521
00:19:15,406 --> 00:19:17,896
want the Tool Picker, you'll set


522
00:19:17,896 --> 00:19:19,156
this in your application


523
00:19:19,156 --> 00:19:19,646
yourself.


524
00:19:20,746 --> 00:19:22,236
For the PKInkingTool, you'll


525
00:19:22,236 --> 00:19:24,546
specify either the type, pen,


526
00:19:24,706 --> 00:19:28,216
marker, pencil, the color, or


527
00:19:28,216 --> 00:19:29,386
the width.


528
00:19:30,786 --> 00:19:33,546
For the width value, each of ink


529
00:19:33,546 --> 00:19:35,176
type has a default width.


530
00:19:35,916 --> 00:19:37,816
However, as we saw before, this


531
00:19:37,816 --> 00:19:40,026
width isn't a fixed value and it


532
00:19:40,026 --> 00:19:41,196
changes based on different


533
00:19:41,196 --> 00:19:42,096
pencil properties.


534
00:19:42,676 --> 00:19:43,866
And so, rather this width


535
00:19:43,866 --> 00:19:46,476
represents a base value based on


536
00:19:46,476 --> 00:19:48,576
an average pencil user pencil


537
00:19:48,576 --> 00:19:49,386
characteristic.


538
00:19:50,806 --> 00:19:52,206
You can also query the valid


539
00:19:52,206 --> 00:19:53,816
width range for each of those


540
00:19:53,816 --> 00:19:55,436
ink types.


541
00:19:56,876 --> 00:19:58,786
You can see this here as I use


542
00:19:58,786 --> 00:19:59,676
the pencil tool.


543
00:20:00,156 --> 00:20:01,496
As I hold the pencil more


544
00:20:01,496 --> 00:20:04,076
vertically, the pencil stroke is


545
00:20:04,166 --> 00:20:04,636
thinner.


546
00:20:05,066 --> 00:20:05,916
But as I hold it more


547
00:20:05,916 --> 00:20:07,666
horizontally, the stroke is


548
00:20:07,666 --> 00:20:08,746
actually thicker.


549
00:20:09,716 --> 00:20:11,296
As I change the thickness in the


550
00:20:11,296 --> 00:20:13,266
Tool Picker, the thickness


551
00:20:13,266 --> 00:20:14,476
scales accordingly.


552
00:20:18,266 --> 00:20:20,706
We also have a PKEraser tool in


553
00:20:20,706 --> 00:20:22,336
which you can specify either a


554
00:20:22,336 --> 00:20:25,526
vector or bitmap, where vector


555
00:20:25,526 --> 00:20:27,246
corresponds to objects and


556
00:20:27,246 --> 00:20:28,956
bitmap corresponds to pixel.


557
00:20:29,746 --> 00:20:30,916
We've actually worked really


558
00:20:30,916 --> 00:20:33,116
hard to unify the two worlds of


559
00:20:33,116 --> 00:20:34,566
vector and bitmap together,


560
00:20:35,136 --> 00:20:36,786
where vector is object and


561
00:20:36,786 --> 00:20:37,766
bitmap is pixel.


562
00:20:38,526 --> 00:20:40,196
Instead of just erasing the


563
00:20:40,246 --> 00:20:42,206
pixels on the screen, we also


564
00:20:42,396 --> 00:20:44,286
sliced through those strokes so


565
00:20:44,286 --> 00:20:45,566
that you can separate them out


566
00:20:45,566 --> 00:20:47,316
or object erase them later.


567
00:20:51,076 --> 00:20:52,826
We also have for selection, the


568
00:20:52,826 --> 00:20:54,126
PKLasso Tool.


569
00:20:55,436 --> 00:20:57,416
With the Lasso Tool, any strokes


570
00:20:57,416 --> 00:20:58,466
that you intersect will be


571
00:20:58,466 --> 00:21:00,636
selected and then, you can drag


572
00:21:00,636 --> 00:21:02,846
them around, cut, copy, paste


573
00:21:02,846 --> 00:21:04,886
it, or even drag and drop them


574
00:21:04,886 --> 00:21:06,276
to different applications.


575
00:21:08,386 --> 00:21:11,206
New to iOS 13, we also have a


576
00:21:11,206 --> 00:21:12,476
great Ruler Tool.


577
00:21:12,996 --> 00:21:15,606
And it's important to note that


578
00:21:15,606 --> 00:21:17,466
the Ruler is not a tool--


579
00:21:17,536 --> 00:21:18,466
PKTool.


580
00:21:18,466 --> 00:21:19,996
But rather, it's a property that


581
00:21:19,996 --> 00:21:22,696
you toggle on the canvas to show


582
00:21:22,696 --> 00:21:23,956
or hide the Ruler.


583
00:21:25,196 --> 00:21:27,486
You can either draw against it


584
00:21:27,536 --> 00:21:28,946
to snap your lines to draw


585
00:21:28,946 --> 00:21:30,706
straight lines, or you can mask


586
00:21:30,906 --> 00:21:32,476
against it like Will did with


587
00:21:32,476 --> 00:21:34,846
the apple in here with the water


588
00:21:34,846 --> 00:21:35,406
and the grass.


589
00:21:38,476 --> 00:21:39,256
Now, that we've gone through


590
00:21:39,256 --> 00:21:41,216
some of the amazing tools, let's


591
00:21:41,216 --> 00:21:43,426
look at the PKToolPicker and how


592
00:21:43,426 --> 00:21:45,116
we can get it on the screen.


593
00:21:47,166 --> 00:21:49,026
An important thing to note with


594
00:21:49,026 --> 00:21:50,896
the Tool Picker is that it's not


595
00:21:50,946 --> 00:21:51,566
a view.


596
00:21:52,156 --> 00:21:53,776
Rather, it's an object that


597
00:21:53,776 --> 00:21:55,146
shows or hides the view and it's


598
00:21:55,146 --> 00:21:56,706
separate from the Canvas View.


599
00:21:57,726 --> 00:21:59,016
It's also important to note that


600
00:21:59,016 --> 00:22:01,546
it floats above everything and


601
00:22:01,546 --> 00:22:02,526
it's very similar to the


602
00:22:02,526 --> 00:22:04,266
keyboard in that its visibility


603
00:22:04,266 --> 00:22:05,346
is based off of first


604
00:22:05,346 --> 00:22:06,046
responders.


605
00:22:06,906 --> 00:22:08,416
So, let's walk through some code


606
00:22:08,416 --> 00:22:10,526
and see how we can do that.


607
00:22:10,946 --> 00:22:12,836
First, we'll ask for the shared


608
00:22:12,836 --> 00:22:14,916
Tool Picker for the window.


609
00:22:16,106 --> 00:22:17,856
We'll add the Canvas View as an


610
00:22:17,896 --> 00:22:18,366
observer.


611
00:22:18,366 --> 00:22:20,096
And by doing so, whenever you


612
00:22:20,096 --> 00:22:21,236
change the tool in the Tool


613
00:22:21,236 --> 00:22:23,316
Picker, you'll also change the


614
00:22:23,316 --> 00:22:24,826
tool on the Canvas View.


615
00:22:27,736 --> 00:22:29,846
The Tool Picker also has a list


616
00:22:29,846 --> 00:22:30,796
of responders.


617
00:22:31,506 --> 00:22:32,776
If your object becomes first


618
00:22:32,776 --> 00:22:34,586
responder and it's in this lest


619
00:22:34,586 --> 00:22:36,526
by setting visible to true, the


620
00:22:36,526 --> 00:22:37,556
palette will show up.


621
00:22:38,376 --> 00:22:40,176
If setVisible is false, it'll


622
00:22:40,176 --> 00:22:41,746
remove it from that list and


623
00:22:41,746 --> 00:22:42,746
then the palette will hide.


624
00:22:44,236 --> 00:22:46,096
And so, when the Canvas View


625
00:22:46,136 --> 00:22:47,746
becomes first responder, we want


626
00:22:47,746 --> 00:22:48,536
the palette to show.


627
00:22:48,786 --> 00:22:52,036
So, we'll set visible to true.


628
00:22:52,206 --> 00:22:53,636
Finally, we'll make the Canvas


629
00:22:53,636 --> 00:22:55,496
View becomeFirstResponder so the


630
00:22:55,496 --> 00:22:56,976
palette will show up.


631
00:22:57,876 --> 00:22:59,516
You can see this in our sample


632
00:22:59,766 --> 00:22:59,866
app.


633
00:23:00,046 --> 00:23:01,626
Once we set the Canvas View to


634
00:23:01,626 --> 00:23:03,116
becomeFirstResponder, the


635
00:23:03,166 --> 00:23:04,356
palette will be visible.


636
00:23:05,666 --> 00:23:07,196
However, in our sample app, we


637
00:23:07,196 --> 00:23:08,576
also have a case with at


638
00:23:08,576 --> 00:23:10,306
signature pane where we only


639
00:23:10,306 --> 00:23:12,806
want to offer you blue or black


640
00:23:12,916 --> 00:23:13,226
ink.


641
00:23:13,766 --> 00:23:15,036
And we don't want the palette to


642
00:23:15,036 --> 00:23:15,606
be shown.


643
00:23:16,436 --> 00:23:18,176
And so, in order to handle that,


644
00:23:18,446 --> 00:23:19,656
we actually make the canvas--


645
00:23:19,986 --> 00:23:21,506
the signature's Canvas View


646
00:23:21,506 --> 00:23:23,786
becomeFirstResponder, which will


647
00:23:23,786 --> 00:23:25,596
then make the Tool Picker go


648
00:23:26,406 --> 00:23:26,546
away.


649
00:23:28,416 --> 00:23:29,836
When you dismiss that Signature


650
00:23:29,836 --> 00:23:31,136
View Controller, underneath the


651
00:23:31,136 --> 00:23:32,756
hood you'll automatically resign


652
00:23:32,756 --> 00:23:34,606
first responder which will then


653
00:23:34,606 --> 00:23:36,006
cause the tool palette to show


654
00:23:36,006 --> 00:23:37,246
up again.


655
00:23:38,236 --> 00:23:39,696
One of the other things you'll


656
00:23:39,696 --> 00:23:40,856
want to keep in mind with this


657
00:23:40,856 --> 00:23:42,766
responder-based visibility is


658
00:23:42,766 --> 00:23:43,856
that you may already have


659
00:23:43,946 --> 00:23:45,546
objects in your application that


660
00:23:45,626 --> 00:23:46,676
take first responder.


661
00:23:47,166 --> 00:23:48,436
Like, for example, for edit and


662
00:23:48,436 --> 00:23:49,136
the new controllers.


663
00:23:49,136 --> 00:23:50,886
And you'll basically want the


664
00:23:50,886 --> 00:23:52,826
palette to show even when your


665
00:23:52,906 --> 00:23:53,756
Edit menu is up.


666
00:23:54,526 --> 00:23:55,856
To do this, you'll simply set


667
00:23:55,856 --> 00:23:57,966
visible to true for your object


668
00:23:58,816 --> 00:23:59,766
so that the palette stays


669
00:23:59,766 --> 00:24:00,256
visible.


670
00:24:02,246 --> 00:24:03,516
Another thing you'll want to


671
00:24:03,516 --> 00:24:05,816
consider with the Tool Picker is


672
00:24:06,066 --> 00:24:08,086
regular versus compact size


673
00:24:08,186 --> 00:24:08,766
classes.


674
00:24:09,836 --> 00:24:10,766
You'll notice in the regular


675
00:24:10,766 --> 00:24:13,246
size class that it floats above


676
00:24:13,246 --> 00:24:14,556
everything, you can move it


677
00:24:14,556 --> 00:24:15,226
around.


678
00:24:16,136 --> 00:24:17,466
However, in the compact size


679
00:24:17,546 --> 00:24:19,426
class, it's actually fixed and


680
00:24:19,426 --> 00:24:20,456
docked to the bottom.


681
00:24:21,226 --> 00:24:23,016
And so, what does that mean in


682
00:24:23,016 --> 00:24:23,956
your application?


683
00:24:25,476 --> 00:24:27,316
Well, let's say you have a


684
00:24:27,316 --> 00:24:27,986
full-size app.


685
00:24:28,696 --> 00:24:30,176
The photo spans mostly edge to


686
00:24:30,176 --> 00:24:30,716
edge.


687
00:24:31,206 --> 00:24:32,456
And maybe it's obscuring some of


688
00:24:32,456 --> 00:24:33,686
the photo in the regular size


689
00:24:33,766 --> 00:24:34,076
class.


690
00:24:34,646 --> 00:24:36,036
But you can just move the Tool


691
00:24:36,036 --> 00:24:37,286
Picker out of the way, so it's


692
00:24:37,286 --> 00:24:37,736
fine.


693
00:24:39,166 --> 00:24:40,826
However, in the compact size


694
00:24:40,916 --> 00:24:43,926
class, it actually obscures kind


695
00:24:43,926 --> 00:24:45,006
of the most interesting part of


696
00:24:45,006 --> 00:24:45,736
this photo.


697
00:24:46,686 --> 00:24:47,896
And so, what you'll need to do


698
00:24:48,366 --> 00:24:49,726
in the compact size class is to


699
00:24:49,726 --> 00:24:51,506
make sure to adjust your view's


700
00:24:51,506 --> 00:24:53,446
frame or your scroll view insets


701
00:24:54,016 --> 00:24:55,296
to account for the obscured


702
00:24:55,296 --> 00:24:56,546
frame from the Tool Picker.


703
00:24:58,196 --> 00:24:59,876
You can do this by just


704
00:24:59,876 --> 00:25:01,176
listening for the Tool Picker's


705
00:25:01,176 --> 00:25:02,936
frame changes with the Observer


706
00:25:02,936 --> 00:25:05,516
method toolPickerFramesObscured


707
00:25:05,626 --> 00:25:06,466
DidChange.


708
00:25:06,846 --> 00:25:07,846
You'll get this whenever you


709
00:25:07,846 --> 00:25:10,166
move from floating to docked.


710
00:25:10,876 --> 00:25:12,256
At that point, you can adjust


711
00:25:12,256 --> 00:25:13,636
your content accordingly by


712
00:25:13,886 --> 00:25:15,806
asking for the frame obscured in


713
00:25:15,856 --> 00:25:16,876
your view.


714
00:25:19,446 --> 00:25:20,526
Another thing you'll want to


715
00:25:20,526 --> 00:25:21,796
consider with the Tool Picker


716
00:25:21,796 --> 00:25:23,976
are your undo and redo buttons.


717
00:25:25,336 --> 00:25:27,066
You'll notice how in the regular


718
00:25:27,066 --> 00:25:29,736
size class that undo/redo


719
00:25:29,736 --> 00:25:31,116
buttons are actually baked


720
00:25:31,116 --> 00:25:32,366
inside of the palette and


721
00:25:32,366 --> 00:25:33,466
provided for you.


722
00:25:34,186 --> 00:25:35,636
However, in the compact size


723
00:25:35,636 --> 00:25:36,506
class, they're not in the


724
00:25:36,506 --> 00:25:37,436
palette at all.


725
00:25:37,436 --> 00:25:38,726
So, you'll need to make sure in


726
00:25:38,726 --> 00:25:40,296
the compact size classes that


727
00:25:40,296 --> 00:25:42,116
you show your own undo and redo


728
00:25:42,116 --> 00:25:42,696
buttons.


729
00:25:45,376 --> 00:25:46,986
Now that we've walked through


730
00:25:46,986 --> 00:25:48,586
how you can get a basic Canvas


731
00:25:48,586 --> 00:25:49,816
View and Tool Picker on the


732
00:25:49,816 --> 00:25:52,156
screen, let's walk through some


733
00:25:52,156 --> 00:25:53,866
more of the advanced behaviors


734
00:25:54,016 --> 00:25:55,906
that you can have in PencilKit,


735
00:25:56,486 --> 00:25:57,926
starting with some of the Canvas


736
00:25:57,926 --> 00:25:58,696
View delegates.


737
00:26:00,346 --> 00:26:01,486
You might want to update your


738
00:26:01,666 --> 00:26:03,206
app based on what the user is


739
00:26:03,206 --> 00:26:03,796
drawing.


740
00:26:04,426 --> 00:26:05,756
You can do so by listening to


741
00:26:05,756 --> 00:26:07,856
the pencil or touch down, in


742
00:26:07,856 --> 00:26:08,846
which case you'll get a


743
00:26:08,846 --> 00:26:11,366
canvasViewDidBeginUsingTool


744
00:26:11,366 --> 00:26:11,736
callback.


745
00:26:13,296 --> 00:26:15,086
On pencil or touch up, you'll


746
00:26:15,086 --> 00:26:17,516
get a canvasViewDidEndUsingTool


747
00:26:17,516 --> 00:26:17,886
callback.


748
00:26:18,616 --> 00:26:20,096
However, at this point, your


749
00:26:20,096 --> 00:26:22,246
drawing is not yet fully updated


750
00:26:22,636 --> 00:26:23,956
because as Will mentioned, it's


751
00:26:23,956 --> 00:26:25,406
not until those final force


752
00:26:25,486 --> 00:26:27,716
values come in, that you get a


753
00:26:27,716 --> 00:26:28,126
final


754
00:26:28,256 --> 00:26:30,576
canvasViewDrawingDidChange.


755
00:26:31,066 --> 00:26:32,216
Only at this point, you're


756
00:26:32,216 --> 00:26:34,136
guaranteed to have a final


757
00:26:34,136 --> 00:26:35,226
finished drawing.


758
00:26:35,716 --> 00:26:36,876
And so, at this point, you can


759
00:26:36,876 --> 00:26:37,946
query the drawing from the


760
00:26:37,946 --> 00:26:40,336
canvas and update your model


761
00:26:40,336 --> 00:26:42,156
objects, generate thumbnails, or


762
00:26:42,156 --> 00:26:43,646
save if necessary.


763
00:26:45,276 --> 00:26:47,046
You might also want to load a


764
00:26:47,046 --> 00:26:49,006
drawing into your Canvas View.


765
00:26:49,906 --> 00:26:51,516
You can do so by calling set


766
00:26:51,516 --> 00:26:52,096
drawing.


767
00:26:52,346 --> 00:26:53,936
At that point, we'll start


768
00:26:54,016 --> 00:26:55,816
loading in the tiles.


769
00:26:57,376 --> 00:26:58,816
However, it's not until those


770
00:26:58,816 --> 00:27:00,556
tiles are done loading that


771
00:27:00,556 --> 00:27:01,066
you'll get a


772
00:27:01,066 --> 00:27:03,086
canvasViewDidFinishRendering


773
00:27:03,086 --> 00:27:03,466
callback.


774
00:27:04,416 --> 00:27:06,696
You'll also get this callback


775
00:27:07,016 --> 00:27:09,036
after scrolling or zooming.


776
00:27:10,186 --> 00:27:12,666
Speaking of scrolling, we not


777
00:27:12,666 --> 00:27:14,906
only have let you draw with your


778
00:27:14,906 --> 00:27:16,846
Pencil, but we also let you draw


779
00:27:16,846 --> 00:27:17,656
with your finger.


780
00:27:18,266 --> 00:27:20,136
And since PKCanvasView is a


781
00:27:20,196 --> 00:27:22,746
scroll view, that means that one


782
00:27:22,746 --> 00:27:24,446
finger actually lets you draw.


783
00:27:31,106 --> 00:27:33,046
And two fingers scroll.


784
00:27:35,256 --> 00:27:36,796
This is toggled via the


785
00:27:36,796 --> 00:27:38,846
allowsFingerDrawing property on


786
00:27:38,846 --> 00:27:39,776
the Canvas View.


787
00:27:40,676 --> 00:27:42,386
When this is set to true, one


788
00:27:42,386 --> 00:27:44,376
finger and pencil draw while two


789
00:27:44,376 --> 00:27:45,276
fingers scroll.


790
00:27:45,706 --> 00:27:47,066
Now, this is the default


791
00:27:47,066 --> 00:27:48,706
behavior on the Canvas View.


792
00:27:48,706 --> 00:27:49,946
And if this is not what you


793
00:27:49,946 --> 00:27:51,666
want, you can actually set this


794
00:27:51,666 --> 00:27:52,736
property to false.


795
00:27:53,326 --> 00:27:55,476
In which case, only Pencil will


796
00:27:55,476 --> 00:27:58,206
draw and one finger will scroll.


797
00:27:58,766 --> 00:27:59,996
However, you should keep in mind


798
00:28:00,056 --> 00:28:01,816
contexts like iPhone where


799
00:28:01,816 --> 00:28:03,196
Pencil is not available.


800
00:28:05,156 --> 00:28:06,756
If you have some more complex


801
00:28:06,756 --> 00:28:08,296
interactions in your app, we've


802
00:28:08,296 --> 00:28:09,246
also exposed the


803
00:28:09,246 --> 00:28:10,976
drawingGestureRecognizer for


804
00:28:10,976 --> 00:28:11,306
you.


805
00:28:11,916 --> 00:28:13,036
With that, you can set up


806
00:28:13,356 --> 00:28:15,096
gesture recognizer exclusions or


807
00:28:15,096 --> 00:28:16,506
failure requirements.


808
00:28:17,416 --> 00:28:19,076
There's a great talk from WWDC


809
00:28:19,076 --> 00:28:21,956
2017 for ''Modern User


810
00:28:22,346 --> 00:28:24,966
Interaction on iOS''.


811
00:28:26,516 --> 00:28:28,446
As Will mentioned, we also use


812
00:28:28,446 --> 00:28:30,576
PencilKit across all create


813
00:28:30,576 --> 00:28:32,726
parts including screenshots and


814
00:28:32,726 --> 00:28:33,226
markup.


815
00:28:33,746 --> 00:28:35,246
And in these contexts, you can


816
00:28:35,246 --> 00:28:36,816
draw over contents.


817
00:28:37,326 --> 00:28:38,606
You can easily achieve this in


818
00:28:38,606 --> 00:28:40,596
your app as well, by setting the


819
00:28:40,596 --> 00:28:43,276
opaque flag to false and setting


820
00:28:43,276 --> 00:28:44,746
the background color to clear.


821
00:28:47,636 --> 00:28:49,936
In iOS 13, we also introduce


822
00:28:50,016 --> 00:28:51,916
Dark Mode which is a fantastic


823
00:28:51,986 --> 00:28:53,956
way to see your content in a


824
00:28:53,956 --> 00:28:55,376
completely different way.


825
00:28:55,976 --> 00:28:57,686
Your PencilKit canvases also


826
00:28:57,686 --> 00:28:59,636
still look amazing as the colors


827
00:28:59,636 --> 00:29:02,286
dynamically adjust to maintain


828
00:29:02,286 --> 00:29:03,046
legibility.


829
00:29:03,046 --> 00:29:04,906
You can see how I originally


830
00:29:04,906 --> 00:29:06,486
wrote this note with black ink


831
00:29:06,486 --> 00:29:07,766
over a white background.


832
00:29:08,236 --> 00:29:10,016
But in Dark Mode, it changes to


833
00:29:10,106 --> 00:29:11,756
mostly white ink over a black


834
00:29:11,836 --> 00:29:12,466
background.


835
00:29:12,816 --> 00:29:14,586
Not only do my notes still


836
00:29:14,586 --> 00:29:16,106
maintain legibility, but they


837
00:29:16,106 --> 00:29:17,856
also still look fantastic.


838
00:29:18,926 --> 00:29:21,546
By default, your canvases will


839
00:29:21,546 --> 00:29:23,166
also dynamically adjust their


840
00:29:23,166 --> 00:29:24,696
colors if they're in Dark Mode.


841
00:29:25,966 --> 00:29:27,306
However, if this is not what you


842
00:29:27,306 --> 00:29:30,296
want, you can set the


843
00:29:30,296 --> 00:29:32,276
overrideUserInterfaceStyle to


844
00:29:32,376 --> 00:29:33,406
always be light.


845
00:29:34,196 --> 00:29:35,456
You'll especially want to do


846
00:29:35,456 --> 00:29:37,286
this if your content that you're


847
00:29:37,286 --> 00:29:38,926
marking up doesn't change, like


848
00:29:38,926 --> 00:29:40,216
if you're marking up over an


849
00:29:40,216 --> 00:29:44,516
image or a PDF.


850
00:29:44,726 --> 00:29:45,676
Now that we've walked through


851
00:29:45,676 --> 00:29:47,676
PencilKit and shown you how you


852
00:29:47,676 --> 00:29:49,596
can make an amazing drawing


853
00:29:49,596 --> 00:29:51,146
experience in your application,


854
00:29:51,736 --> 00:29:53,276
let's look at Markup Everywhere,


855
00:29:53,676 --> 00:29:55,286
a new feature which allows your


856
00:29:55,286 --> 00:29:57,836
application to pass any content


857
00:29:57,916 --> 00:29:58,756
to be marked up.


858
00:29:59,636 --> 00:30:00,786
This has surfaced through a new


859
00:30:00,786 --> 00:30:04,596
API on Screenshots, where we let


860
00:30:04,596 --> 00:30:07,406
you provide full content that


861
00:30:07,406 --> 00:30:08,766
whenever you take a screenshot


862
00:30:08,766 --> 00:30:10,206
over your app.


863
00:30:11,596 --> 00:30:13,236
You can see this adopted in


864
00:30:13,236 --> 00:30:13,916
Safari.


865
00:30:14,386 --> 00:30:16,196
Here, I have apple.com.


866
00:30:16,776 --> 00:30:18,156
I'm going to take a screenshot


867
00:30:18,156 --> 00:30:19,606
by using the new pencil gesture


868
00:30:19,606 --> 00:30:20,956
by pulling in from the corner.


869
00:30:20,956 --> 00:30:22,936
And so, I have the screenshot I


870
00:30:22,936 --> 00:30:24,506
know and love but I can't see


871
00:30:24,506 --> 00:30:25,616
the rest of the page.


872
00:30:26,106 --> 00:30:27,406
So, I'll tap that full-page


873
00:30:27,466 --> 00:30:29,656
segment at the top and now I


874
00:30:29,656 --> 00:30:31,796
have the full scrolling webpage


875
00:30:31,856 --> 00:30:33,866
for me to markup and share.


876
00:30:34,016 --> 00:30:35,546
[ Applause ]


877
00:30:35,546 --> 00:30:35,626
Yeah.


878
00:30:36,516 --> 00:30:39,500
[ Applause ]


879
00:30:41,316 --> 00:30:42,806
You can also see this


880
00:30:43,526 --> 00:30:45,796
implemented in our sample app.


881
00:30:45,796 --> 00:30:47,206
Again, with the new Screenshot


882
00:30:47,416 --> 00:30:49,556
gesture, I'll tap that full-page


883
00:30:49,556 --> 00:30:51,286
segment and now I have the whole


884
00:30:51,286 --> 00:30:53,866
note for me to send off.


885
00:30:56,256 --> 00:30:57,156
You can also see this in


886
00:30:57,156 --> 00:30:58,886
interesting use cases like maps.


887
00:31:00,216 --> 00:31:01,666
Again, using the new Screenshot


888
00:31:01,666 --> 00:31:02,716
gesture, I'm going to take a


889
00:31:02,816 --> 00:31:03,486
screenshot.


890
00:31:03,976 --> 00:31:05,096
But you can see my screenshot is


891
00:31:05,196 --> 00:31:06,406
kind of covered up by the


892
00:31:06,406 --> 00:31:07,056
chrome.


893
00:31:07,756 --> 00:31:09,606
When I tap the full-page segment


894
00:31:09,606 --> 00:31:11,596
at the top, I'll be able to see


895
00:31:11,596 --> 00:31:13,236
my map without any of the chrome


896
00:31:13,236 --> 00:31:13,806
in the way.


897
00:31:13,876 --> 00:31:14,926
I can see the roads and


898
00:31:14,926 --> 00:31:16,276
restaurants underneath.


899
00:31:18,316 --> 00:31:20,526
You can easily adopt this in


900
00:31:20,526 --> 00:31:22,626
your application with only a few


901
00:31:22,626 --> 00:31:23,526
lines of code.


902
00:31:24,306 --> 00:31:25,616
You'll start by setting yourself


903
00:31:25,616 --> 00:31:26,736
as the delegate of the


904
00:31:26,736 --> 00:31:28,896
UIScreenshotService on


905
00:31:28,896 --> 00:31:30,056
UIWindowScene.


906
00:31:30,776 --> 00:31:32,556
UIWindowScene is a new API to


907
00:31:32,676 --> 00:31:33,486
UIKit this year.


908
00:31:33,486 --> 00:31:34,786
And you can learn more by


909
00:31:34,786 --> 00:31:36,126
referencing the ''Introducing


910
00:31:36,126 --> 00:31:37,976
Multiple Windows on iPad'' talk.


911
00:31:39,346 --> 00:31:40,606
Once you've set yourself as the


912
00:31:40,606 --> 00:31:41,796
delegate, you'll deliver as the


913
00:31:41,796 --> 00:31:43,776
full content, which is expressed


914
00:31:43,776 --> 00:31:44,406
as PDF data.


915
00:31:45,836 --> 00:31:46,956
You might already have this


916
00:31:46,956 --> 00:31:48,326
information generated for


917
00:31:48,426 --> 00:31:49,816
actions like sharing or


918
00:31:49,816 --> 00:31:50,446
printing.


919
00:31:50,866 --> 00:31:52,086
But in case you don't, there's a


920
00:31:52,086 --> 00:31:55,626
great talk from WWDC 2017 from


921
00:31:55,626 --> 00:31:57,176
''Introducing PDFKit on iOS''.


922
00:31:58,806 --> 00:32:00,486
So, once you have that PDF data,


923
00:32:00,896 --> 00:32:01,926
you'll implement the delegate


924
00:32:01,926 --> 00:32:03,496
method screenshotService,


925
00:32:03,576 --> 00:32:05,256
generatePDFRepresentation


926
00:32:05,256 --> 00:32:06,036
WithCompletion.


927
00:32:06,036 --> 00:32:08,626
You'll pass that PDF data to us


928
00:32:08,676 --> 00:32:10,446
in the completion handler along


929
00:32:10,446 --> 00:32:11,626
with two other pieces of


930
00:32:11,626 --> 00:32:12,336
metadata.


931
00:32:13,056 --> 00:32:14,256
Which will help us ensure that


932
00:32:14,256 --> 00:32:15,996
when you go from screen to full


933
00:32:15,996 --> 00:32:17,826
page, that we have a smooth


934
00:32:17,966 --> 00:32:18,936
seamless transition.


935
00:32:21,166 --> 00:32:22,266
The first piece of metadata is


936
00:32:22,266 --> 00:32:23,886
the indexOfCurrentPage.


937
00:32:24,276 --> 00:32:25,966
This is useful in cases like


938
00:32:26,096 --> 00:32:26,546
Keynote.


939
00:32:27,016 --> 00:32:29,306
Let's say I take a screenshot of


940
00:32:29,416 --> 00:32:30,226
slide seven.


941
00:32:30,556 --> 00:32:32,156
When I switch to the full-page


942
00:32:32,216 --> 00:32:33,516
segment, it'll automatically


943
00:32:33,516 --> 00:32:35,506
jump me to page seven.


944
00:32:37,636 --> 00:32:39,926
The second piece of metadata is


945
00:32:39,956 --> 00:32:41,746
the rectInCurrentPage.


946
00:32:42,246 --> 00:32:43,666
This is useful in cases like


947
00:32:43,726 --> 00:32:44,386
Safari.


948
00:32:44,846 --> 00:32:46,546
Here, I have this long scrolling


949
00:32:46,546 --> 00:32:47,196
page.


950
00:32:47,496 --> 00:32:48,896
And I'm going to scroll to the


951
00:32:48,896 --> 00:32:50,096
bottom because I'm really


952
00:32:50,376 --> 00:32:51,606
feeling excited about the new


953
00:32:51,776 --> 00:32:52,586
iPad Pro.


954
00:32:53,156 --> 00:32:54,246
So, I'll take a screenshot at


955
00:32:54,246 --> 00:32:57,406
the bottom there.


956
00:32:57,606 --> 00:32:59,566
Now, when I tap the full-page


957
00:32:59,596 --> 00:33:01,646
segment at the top, instead of


958
00:33:01,886 --> 00:33:03,606
awkwardly jumping me to the top,


959
00:33:03,916 --> 00:33:04,906
it'll actually take me to the


960
00:33:04,906 --> 00:33:06,906
same page-- same RECT that I


961
00:33:06,906 --> 00:33:08,766
took the screenshot in.


962
00:33:09,936 --> 00:33:11,486
The one important thing to note


963
00:33:11,486 --> 00:33:13,236
about this RECT is that we


964
00:33:13,236 --> 00:33:15,016
expect it in PDF coordinates.


965
00:33:15,776 --> 00:33:17,066
And so, what does this mean?


966
00:33:17,816 --> 00:33:19,196
In View Coordinates the origin


967
00:33:19,196 --> 00:33:20,706
is actually the top left.


968
00:33:21,636 --> 00:33:23,326
However, in PDF coordinates,


969
00:33:23,376 --> 00:33:24,526
it's actually in the bottom


970
00:33:24,666 --> 00:33:24,836
left.


971
00:33:25,286 --> 00:33:26,456
So, you'll need to make sure to


972
00:33:26,456 --> 00:33:27,816
do the appropriate coordinate


973
00:33:27,816 --> 00:33:29,586
transformations and send us that


974
00:33:29,586 --> 00:33:30,526
RECT in the appropriate


975
00:33:30,526 --> 00:33:31,466
coordinates space.


976
00:33:34,316 --> 00:33:36,606
And so, we've shown you how with


977
00:33:36,606 --> 00:33:38,196
existing Pencil APIs, you can


978
00:33:38,676 --> 00:33:41,496
build your own powerful custom


979
00:33:41,496 --> 00:33:42,506
drawing engine.


980
00:33:42,996 --> 00:33:44,716
But it will require a little bit


981
00:33:44,716 --> 00:33:45,646
of elbow grease.


982
00:33:45,926 --> 00:33:46,846
You'll need to listen to


983
00:33:46,996 --> 00:33:48,846
estimated touches, delayed


984
00:33:48,996 --> 00:33:51,016
force, all while rendering


985
00:33:51,056 --> 00:33:53,296
quickly and asynchronously.


986
00:33:54,266 --> 00:33:56,616
But now, with the new PencilKit


987
00:33:56,616 --> 00:33:59,106
APIs, we've made it super easy


988
00:33:59,106 --> 00:34:00,286
for you to integrate drawing


989
00:34:00,286 --> 00:34:01,286
into your application.


990
00:34:01,286 --> 00:34:02,766
And you'll get the same


991
00:34:02,816 --> 00:34:04,776
expressive low-latency


992
00:34:04,776 --> 00:34:06,106
experience that we have across


993
00:34:06,106 --> 00:34:07,056
all of iOS.


994
00:34:08,716 --> 00:34:10,795
Finally, you can also adopt


995
00:34:10,795 --> 00:34:13,036
other great Pencil APIs in UIKit


996
00:34:13,585 --> 00:34:15,156
such as UIPencil interaction to


997
00:34:15,156 --> 00:34:16,485
handle double-taps on the new


998
00:34:16,485 --> 00:34:17,356
Apple Pencil.


999
00:34:17,886 --> 00:34:19,735
Or the new UIScreenshotService


1000
00:34:19,735 --> 00:34:21,606
API so that you can deliver full


1001
00:34:21,606 --> 00:34:22,856
content to be marked up


1002
00:34:22,856 --> 00:34:23,466
everywhere.


1003
00:34:24,926 --> 00:34:26,136
For more information, you can


1004
00:34:26,136 --> 00:34:27,545
reference the URL at this


1005
00:34:27,616 --> 00:34:27,966
session.


1006
00:34:29,386 --> 00:34:30,716
Now, go off and build some


1007
00:34:30,716 --> 00:34:32,636
amazing great Pencil


1008
00:34:32,636 --> 00:34:33,406
applications.


1009
00:34:33,696 --> 00:34:34,886
And we hope you have a great


1010
00:34:34,886 --> 00:34:36,676
WWDC 2019.


1011
00:34:37,516 --> 00:34:44,505
[ Applause ]

