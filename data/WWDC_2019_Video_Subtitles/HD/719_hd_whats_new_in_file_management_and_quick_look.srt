1
00:00:00,506 --> 00:00:06,436
[ Music ]


2
00:00:06,936 --> 00:00:08,616
>> Welcome to What's New in File


3
00:00:08,616 --> 00:00:09,616
Management and Quick Look.


4
00:00:09,956 --> 00:00:11,286
We have a lot of great new API


5
00:00:11,446 --> 00:00:12,946
for managing documents and file


6
00:00:12,946 --> 00:00:13,856
previews to share with you


7
00:00:13,856 --> 00:00:13,976
today.


8
00:00:16,046 --> 00:00:16,996
Here are the areas that we're


9
00:00:16,996 --> 00:00:18,166
going to cover in this session.


10
00:00:19,076 --> 00:00:21,126
First, we'll show how your app


11
00:00:21,126 --> 00:00:22,366
can use the document picker to


12
00:00:22,366 --> 00:00:23,756
access a directory and its


13
00:00:23,756 --> 00:00:24,256
content.


14
00:00:24,676 --> 00:00:27,056
We'll also show how your app can


15
00:00:27,056 --> 00:00:28,836
properly support files stored on


16
00:00:28,836 --> 00:00:30,596
external USB drives or SMB


17
00:00:30,596 --> 00:00:31,246
servers.


18
00:00:32,586 --> 00:00:34,176
Then also, see how your app can


19
00:00:34,176 --> 00:00:35,426
fetch and display rich


20
00:00:35,426 --> 00:00:36,086
thumbnails.


21
00:00:37,796 --> 00:00:39,356
And you'll see how your app can


22
00:00:39,356 --> 00:00:40,616
provide quick editing support


23
00:00:40,616 --> 00:00:42,676
for images, PDFs, and videos via


24
00:00:42,676 --> 00:00:43,146
Quick Look.


25
00:00:43,146 --> 00:00:46,586
We've made it easy to port your


26
00:00:46,706 --> 00:00:48,746
iOS app to macOS as the Quick


27
00:00:48,746 --> 00:00:50,306
Look Extension APIs are now


28
00:00:50,306 --> 00:00:51,306
cross platform.


29
00:00:51,736 --> 00:00:54,246
And finally, we'll talk about


30
00:00:54,246 --> 00:00:56,656
supporting iPad apps on Mac.


31
00:00:58,426 --> 00:00:59,986
So who is this session for?


32
00:01:00,256 --> 00:01:02,246
If you are writing a new app or


33
00:01:02,246 --> 00:01:03,216
already have an app that


34
00:01:03,216 --> 00:01:04,616
presents documents or performs


35
00:01:04,616 --> 00:01:06,056
file operations, you're in the


36
00:01:06,056 --> 00:01:06,706
right session.


37
00:01:06,846 --> 00:01:08,726
You want to learn the best


38
00:01:08,726 --> 00:01:10,226
practices to support files


39
00:01:10,226 --> 00:01:11,886
stored on removable drives, such


40
00:01:11,886 --> 00:01:13,416
as USB and SMB.


41
00:01:14,086 --> 00:01:15,446
You may also need your app to


42
00:01:15,446 --> 00:01:16,886
recursively access multiple


43
00:01:16,886 --> 00:01:18,286
documents within a folder and


44
00:01:18,286 --> 00:01:20,156
perform batch file operations.


45
00:01:21,546 --> 00:01:22,726
Stick around if you want to


46
00:01:22,726 --> 00:01:24,096
learn more about displaying file


47
00:01:24,096 --> 00:01:25,496
thumbnails or if you want to


48
00:01:25,496 --> 00:01:26,946
provide simple image and video


49
00:01:26,946 --> 00:01:28,566
editing in your app.


50
00:01:29,766 --> 00:01:31,126
By the way, if you haven't


51
00:01:31,126 --> 00:01:32,236
checked it out yet, you should


52
00:01:32,236 --> 00:01:33,076
definitely take a look at


53
00:01:33,076 --> 00:01:34,846
Managing Documents in Your iOS


54
00:01:34,846 --> 00:01:38,296
Apps session from WWDC 2018 in


55
00:01:38,296 --> 00:01:39,816
which we detailed step-by-step


56
00:01:40,176 --> 00:01:40,676
how to use the


57
00:01:40,676 --> 00:01:42,336
UIDocumentBrowserViewController


58
00:01:42,416 --> 00:01:42,626
and the


59
00:01:42,626 --> 00:01:44,086
UIDocumentPickerViewController.


60
00:01:45,216 --> 00:01:46,746
There's also a session, Quick


61
00:01:46,746 --> 00:01:48,296
Look Previews from the Ground Up


62
00:01:48,456 --> 00:01:50,866
from WWDC 2018, which we highly


63
00:01:50,866 --> 00:01:51,896
encourage you to watch if you're


64
00:01:52,206 --> 00:01:54,006
interested in presenting file


65
00:01:54,006 --> 00:01:56,286
previews on iOS and now macOS.


66
00:01:56,786 --> 00:02:00,526
One of the most requested


67
00:02:00,526 --> 00:02:01,906
features has been to access an


68
00:02:01,906 --> 00:02:03,046
entire directory and its


69
00:02:03,046 --> 00:02:03,716
contents.


70
00:02:04,126 --> 00:02:05,616
We're really excited that an iOS


71
00:02:05,616 --> 00:02:06,906
13 you now can.


72
00:02:07,846 --> 00:02:09,485
Features of your app may need to


73
00:02:09,485 --> 00:02:11,306
access content of a directory


74
00:02:11,306 --> 00:02:12,626
for reading, writing, or


75
00:02:12,626 --> 00:02:13,636
creating documents.


76
00:02:14,286 --> 00:02:15,626
For instance, an image editor


77
00:02:15,696 --> 00:02:16,836
that needs to apply the same


78
00:02:16,836 --> 00:02:18,396
change on a batch of images


79
00:02:18,396 --> 00:02:20,216
would read every image, apply


80
00:02:20,216 --> 00:02:21,926
modifications, and save a new


81
00:02:21,926 --> 00:02:23,016
image right next to the


82
00:02:23,016 --> 00:02:23,386
original.


83
00:02:23,826 --> 00:02:27,396
Prior to iOS 13, an app could


84
00:02:27,396 --> 00:02:28,736
access files outside of its


85
00:02:28,736 --> 00:02:30,216
application container via the


86
00:02:30,216 --> 00:02:31,886
UIDocumentPickerViewController


87
00:02:32,126 --> 00:02:33,396
but the user had to pick one


88
00:02:33,396 --> 00:02:34,166
file at a time.


89
00:02:34,956 --> 00:02:37,066
New in iOS 13, your app can


90
00:02:37,066 --> 00:02:37,426
present a


91
00:02:37,426 --> 00:02:38,976
UIDocumentPickerViewController


92
00:02:38,976 --> 00:02:40,386
to let the user pick a folder.


93
00:02:40,606 --> 00:02:42,836
After validation, your app will


94
00:02:42,836 --> 00:02:44,336
be granted recursive access to


95
00:02:44,336 --> 00:02:45,806
the directory as well as all of


96
00:02:45,806 --> 00:02:46,566
its contents.


97
00:02:47,376 --> 00:02:48,846
Additionally, you can now set


98
00:02:48,846 --> 00:02:50,196
the default directory that is


99
00:02:50,196 --> 00:02:51,236
shown on the document picker


100
00:02:51,236 --> 00:02:51,976
when presented.


101
00:02:55,176 --> 00:02:56,526
Now let's take a look at how you


102
00:02:56,526 --> 00:02:57,976
can do that now using a few


103
00:02:57,976 --> 00:02:59,236
examples of how to configure the


104
00:02:59,236 --> 00:03:00,836
UIDocumentPickerViewController.


105
00:03:01,496 --> 00:03:03,296
To allow folder selection,


106
00:03:03,596 --> 00:03:05,136
creating instance initialized


107
00:03:05,136 --> 00:03:07,126
with an array containing only


108
00:03:07,126 --> 00:03:09,076
the kUTTypeFolder type and then


109
00:03:09,076 --> 00:03:10,176
present it.


110
00:03:11,586 --> 00:03:13,316
To set the default directory of


111
00:03:13,316 --> 00:03:14,676
UIDocumentPickerViewController


112
00:03:14,676 --> 00:03:16,396
instance, set its directoryURL


113
00:03:16,396 --> 00:03:18,246
property and then present.


114
00:03:18,286 --> 00:03:21,596
Now let's take a look at this


115
00:03:21,596 --> 00:03:22,046
example.


116
00:03:22,326 --> 00:03:23,406
We show you how to enumerate the


117
00:03:23,406 --> 00:03:25,326
contents of a folder, but you


118
00:03:25,326 --> 00:03:26,586
can use the same example to


119
00:03:26,586 --> 00:03:28,036
write a file here using standard


120
00:03:28,036 --> 00:03:29,006
File Manager API.


121
00:03:30,466 --> 00:03:33,096
Also, make sure to use URL start


122
00:03:33,096 --> 00:03:34,126
and stopAccessing


123
00:03:34,126 --> 00:03:36,806
SecurityScopedResource calls and


124
00:03:36,996 --> 00:03:39,066
use NSFileCoordinator API for


125
00:03:39,066 --> 00:03:40,466
reading and writing operations


126
00:03:40,536 --> 00:03:41,786
as you can see in the example.


127
00:03:45,986 --> 00:03:48,526
In iOS 13, users are in control


128
00:03:48,526 --> 00:03:49,546
of which applications have


129
00:03:49,546 --> 00:03:50,676
access to folders.


130
00:03:51,276 --> 00:03:53,136
This access is listed and can be


131
00:03:53,136 --> 00:03:54,596
revoked in the privacy pane


132
00:03:54,596 --> 00:03:55,806
under the Files and Folder


133
00:03:55,806 --> 00:03:56,336
section.


134
00:03:57,306 --> 00:03:58,946
Be aware that because users can


135
00:03:58,946 --> 00:04:00,916
revoke access at any time, you


136
00:04:00,916 --> 00:04:01,976
need to make sure that your code


137
00:04:01,976 --> 00:04:03,466
gracefully handles errors when


138
00:04:03,466 --> 00:04:04,926
attempting to open documents or


139
00:04:04,926 --> 00:04:06,166
when enumerating folders.


140
00:04:06,606 --> 00:04:10,636
In this example, you can see how


141
00:04:10,636 --> 00:04:11,756
you can maintain persistent


142
00:04:11,756 --> 00:04:13,036
access to a folder across


143
00:04:13,036 --> 00:04:14,916
application launches by storing


144
00:04:15,456 --> 00:04:17,016
bookmark data and then


145
00:04:17,016 --> 00:04:19,755
recreating the URL using the URL


146
00:04:19,926 --> 00:04:21,776
resolvingBookmarkData options


147
00:04:21,776 --> 00:04:22,176
call.


148
00:04:26,676 --> 00:04:29,166
New in iOS 13, we've added


149
00:04:29,166 --> 00:04:30,936
support for external USB drives,


150
00:04:31,056 --> 00:04:33,016
thumb drives, and SMB servers.


151
00:04:34,756 --> 00:04:37,936
Drives formatted as APFS, HFS+,


152
00:04:38,006 --> 00:04:40,046
FAT and ExFAT are supported.


153
00:04:42,516 --> 00:04:44,306
Drives can be plugged in either


154
00:04:44,306 --> 00:04:45,686
on the USBC connector on the


155
00:04:45,736 --> 00:04:47,956
iPad Pro or via the SD card


156
00:04:47,956 --> 00:04:48,716
reader attachment.


157
00:04:49,976 --> 00:04:51,526
They are automatically listed in


158
00:04:51,526 --> 00:04:53,286
the sidebar of the files app or


159
00:04:53,436 --> 00:04:54,416
in your app with the


160
00:04:54,416 --> 00:04:55,996
UIDocumentPickerViewController


161
00:04:56,126 --> 00:04:57,256
or document browser.


162
00:05:00,046 --> 00:05:01,886
Users can also connect to SMB


163
00:05:01,886 --> 00:05:03,376
servers using the Connect to


164
00:05:03,376 --> 00:05:05,296
Server action using the same


165
00:05:05,296 --> 00:05:06,996
keyboard shortcut as finder or


166
00:05:07,046 --> 00:05:08,076
using the sidebar menu.


167
00:05:12,126 --> 00:05:13,206
Any client of


168
00:05:13,206 --> 00:05:14,716
UIDocumentBrowserViewController


169
00:05:14,716 --> 00:05:15,776
API or


170
00:05:15,836 --> 00:05:17,286
UIDocumentPickerViewController


171
00:05:17,286 --> 00:05:18,786
API get the same support for


172
00:05:18,786 --> 00:05:20,876
free as long as the app was


173
00:05:20,876 --> 00:05:23,166
built using the iOS 13 SDK or


174
00:05:23,166 --> 00:05:23,586
later.


175
00:05:24,586 --> 00:05:26,066
However, there are few things


176
00:05:26,066 --> 00:05:27,286
you need to check to make sure


177
00:05:27,286 --> 00:05:29,536
your app has great support for


178
00:05:29,536 --> 00:05:30,716
USB and SMB.


179
00:05:32,346 --> 00:05:33,796
There are few assumptions that


180
00:05:33,796 --> 00:05:34,616
are no longer true.


181
00:05:35,386 --> 00:05:36,996
File access is no longer on a


182
00:05:36,996 --> 00:05:38,386
single volume because they can


183
00:05:38,386 --> 00:05:39,466
now be stored on external


184
00:05:39,466 --> 00:05:41,466
volumes, such as USB drives or


185
00:05:41,466 --> 00:05:42,346
SMB servers.


186
00:05:43,396 --> 00:05:45,096
Volumes can disappear if the USB


187
00:05:45,096 --> 00:05:47,266
drive is unplugged or if the


188
00:05:47,266 --> 00:05:48,516
network connection to an SMB


189
00:05:48,516 --> 00:05:50,006
server volume is lost.


190
00:05:51,276 --> 00:05:52,826
Disk access can be slower than


191
00:05:52,826 --> 00:05:54,146
what you expected in the past.


192
00:05:55,136 --> 00:05:56,186
An operation that you would


193
00:05:56,186 --> 00:05:57,706
assume is instant can now take


194
00:05:57,706 --> 00:05:59,396
several seconds or even minutes


195
00:05:59,396 --> 00:06:00,296
depending on the network


196
00:06:00,296 --> 00:06:01,766
conditions or the speed of the


197
00:06:01,766 --> 00:06:02,546
USB device.


198
00:06:03,556 --> 00:06:05,356
Also, don't assume the


199
00:06:05,356 --> 00:06:07,176
underlying file system is always


200
00:06:07,176 --> 00:06:08,926
APFS or HFS+.


201
00:06:10,186 --> 00:06:11,386
So how does this affect your


202
00:06:12,096 --> 00:06:12,163
app?


203
00:06:14,456 --> 00:06:16,246
If you need to move a file from


204
00:06:16,246 --> 00:06:18,106
one location to another, use the


205
00:06:18,106 --> 00:06:20,866
FileManager.moveItem at API and


206
00:06:21,066 --> 00:06:22,256
this will take care of moving


207
00:06:22,256 --> 00:06:23,826
files across volumes for you.


208
00:06:25,026 --> 00:06:26,546
In the past, move and clone


209
00:06:26,546 --> 00:06:28,036
operations were always fast.


210
00:06:28,876 --> 00:06:30,336
When moving across volumes, the


211
00:06:30,336 --> 00:06:32,326
operation can become slower copy


212
00:06:32,326 --> 00:06:32,836
and delete.


213
00:06:33,296 --> 00:06:36,176
If you use NSTemporaryDirectory


214
00:06:36,346 --> 00:06:37,866
to save a temporary version of a


215
00:06:37,866 --> 00:06:39,906
file, you should update your


216
00:06:39,906 --> 00:06:41,626
code to choose the location of


217
00:06:41,626 --> 00:06:42,906
the temporary folder based on


218
00:06:42,906 --> 00:06:44,166
the ultimate destination of the


219
00:06:44,166 --> 00:06:45,136
files written in it.


220
00:06:46,446 --> 00:06:47,276
You can do this with the


221
00:06:47,276 --> 00:06:48,776
following File Manager call,


222
00:06:50,176 --> 00:06:52,156
File Manager URL for


223
00:06:52,156 --> 00:06:54,336
itemReplacementDirectory in


224
00:06:54,476 --> 00:06:56,816
userDomainMask appropriateFor


225
00:06:56,946 --> 00:06:57,456
URL.


226
00:06:58,426 --> 00:06:59,316
This will always give you the


227
00:06:59,316 --> 00:07:00,656
right temporary directory to


228
00:07:00,656 --> 00:07:01,516
write files, to.


229
00:07:02,076 --> 00:07:05,136
In the past, your app may have


230
00:07:05,136 --> 00:07:06,756
assumed that a file may never


231
00:07:06,756 --> 00:07:08,936
disappear while it is open and


232
00:07:08,936 --> 00:07:10,356
this is no longer true because


233
00:07:10,356 --> 00:07:12,106
USB drives can be unplugged and


234
00:07:12,106 --> 00:07:13,686
SMB server connections can be


235
00:07:13,686 --> 00:07:14,296
interrupted.


236
00:07:15,126 --> 00:07:16,516
This may cause your app to fail


237
00:07:16,516 --> 00:07:17,656
while reading or writing file


238
00:07:17,656 --> 00:07:18,276
contents.


239
00:07:19,216 --> 00:07:20,926
Your app should check for errors


240
00:07:20,926 --> 00:07:21,876
and fail gracefully.


241
00:07:22,876 --> 00:07:24,446
One suggestion is if your app


242
00:07:24,446 --> 00:07:26,096
fails to write a file, it could


243
00:07:26,096 --> 00:07:26,556
present a


244
00:07:26,556 --> 00:07:28,126
UIDocumentPickerViewController


245
00:07:28,256 --> 00:07:29,296
to let the user choose an


246
00:07:29,296 --> 00:07:31,596
alternate location to save the


247
00:07:32,406 --> 00:07:32,516
file.


248
00:07:32,726 --> 00:07:34,186
Reading or writing a file stored


249
00:07:34,186 --> 00:07:35,986
on a USB drive or on a distant


250
00:07:35,986 --> 00:07:38,496
SMB server can be slow so you


251
00:07:38,496 --> 00:07:39,546
need to make sure your app


252
00:07:39,546 --> 00:07:40,846
doesn't hang while performing a


253
00:07:40,846 --> 00:07:41,736
file operation.


254
00:07:42,196 --> 00:07:43,956
Always perform file system


255
00:07:43,956 --> 00:07:45,286
operations on a background


256
00:07:45,286 --> 00:07:45,526
queue.


257
00:07:46,736 --> 00:07:47,946
We also recommend that you add


258
00:07:47,946 --> 00:07:50,076
UI like an activity indicator to


259
00:07:50,076 --> 00:07:51,236
let the user know something is


260
00:07:51,236 --> 00:07:53,966
happening, and offering a way


261
00:07:54,046 --> 00:07:55,456
for your user to cancel the


262
00:07:55,456 --> 00:07:56,756
operation is a great idea.


263
00:07:57,876 --> 00:07:59,326
Otherwise the user might feel


264
00:07:59,326 --> 00:08:00,366
like the application is


265
00:08:00,366 --> 00:08:00,976
unresponsive.


266
00:08:01,426 --> 00:08:05,186
When a document is stored on a


267
00:08:05,186 --> 00:08:07,216
USB drive or remote SMB server,


268
00:08:07,616 --> 00:08:09,686
LIFS is reported instead of the


269
00:08:09,686 --> 00:08:10,936
file system the media is


270
00:08:10,936 --> 00:08:11,736
formatted as.


271
00:08:12,546 --> 00:08:13,606
It's likely that your app should


272
00:08:13,606 --> 00:08:14,696
not worry about the underlying


273
00:08:14,696 --> 00:08:15,406
file system.


274
00:08:16,046 --> 00:08:17,236
Instead you should check the


275
00:08:17,236 --> 00:08:18,766
file system capabilities to know


276
00:08:18,766 --> 00:08:20,396
which file system operations are


277
00:08:20,396 --> 00:08:20,906
supported.


278
00:08:21,916 --> 00:08:23,676
LIFS is a file system


279
00:08:23,676 --> 00:08:24,986
abstraction and it do not look


280
00:08:24,986 --> 00:08:26,196
for its presence directly.


281
00:08:27,076 --> 00:08:28,786
To know more about LIFS, we


282
00:08:28,786 --> 00:08:30,076
recommend that you look at the


283
00:08:30,076 --> 00:08:31,276
What's New in File Systems


284
00:08:31,276 --> 00:08:31,756
session.


285
00:08:36,116 --> 00:08:38,176
New in iOS 13, there's


286
00:08:38,176 --> 00:08:39,756
additional customization support


287
00:08:39,756 --> 00:08:39,823
in


288
00:08:39,823 --> 00:08:41,395
UIDocumentBrowserViewController.


289
00:08:41,556 --> 00:08:45,536
Let's take a look at this now.


290
00:08:45,536 --> 00:08:47,016
Now, you can choose to always


291
00:08:47,016 --> 00:08:48,486
show file extensions by setting


292
00:08:48,486 --> 00:08:49,896
the shouldShowFileExtensions


293
00:08:49,896 --> 00:08:50,716
property to true.


294
00:08:51,296 --> 00:08:54,066
The Create Document button can


295
00:08:54,066 --> 00:08:55,876
now also be customized to adjust


296
00:08:55,876 --> 00:08:57,146
the aspect ratio of the button


297
00:08:57,146 --> 00:08:58,356
icon by setting the


298
00:08:58,356 --> 00:09:00,126
defaultDocumentAspectRatio


299
00:09:00,126 --> 00:09:00,646
property.


300
00:09:01,626 --> 00:09:03,536
And the button titled Text can


301
00:09:03,536 --> 00:09:04,906
now be changed by setting the


302
00:09:04,906 --> 00:09:05,826
localizedCreate


303
00:09:05,826 --> 00:09:07,466
DocumentActionTitle property.


304
00:09:07,916 --> 00:09:10,206
And now Lyn will talk about


305
00:09:10,206 --> 00:09:11,786
What's New in Quick Look.


306
00:09:14,476 --> 00:09:16,076
>> Fetching File Thumbnails in


307
00:09:16,076 --> 00:09:17,116
Your App.


308
00:09:17,386 --> 00:09:18,626
This is for those of you who


309
00:09:18,626 --> 00:09:19,976
want to enhance the appearance


310
00:09:19,976 --> 00:09:21,166
of your application by


311
00:09:21,166 --> 00:09:22,886
displaying rich file thumbnails.


312
00:09:24,476 --> 00:09:26,186
So instead of something like


313
00:09:26,186 --> 00:09:29,106
this, you could have something


314
00:09:29,106 --> 00:09:29,786
like this.


315
00:09:31,556 --> 00:09:33,306
Quick Look thumbnailing is a new


316
00:09:33,306 --> 00:09:34,956
cross platform framework for


317
00:09:34,956 --> 00:09:36,666
retrieving thumbnail images for


318
00:09:36,666 --> 00:09:37,606
file URLs.


319
00:09:38,276 --> 00:09:40,196
This is new functionality on iOS


320
00:09:40,196 --> 00:09:42,106
and replaces the C API for


321
00:09:42,106 --> 00:09:43,856
QLThumbnail on macOS.


322
00:09:44,656 --> 00:09:45,766
It also replaces


323
00:09:45,766 --> 00:09:47,936
NSURLThumbnailDictionaryKey.


324
00:09:49,216 --> 00:09:51,326
iOS and macOS provide built-in


325
00:09:51,326 --> 00:09:52,846
support for several file types,


326
00:09:52,986 --> 00:09:54,986
such as images, PDFs, text


327
00:09:54,986 --> 00:09:56,486
files, videos, et cetera.


328
00:09:56,806 --> 00:09:59,246
You can also provide support for


329
00:09:59,246 --> 00:10:00,486
your own file types with


330
00:10:00,486 --> 00:10:01,626
thumbnail extensions.


331
00:10:04,356 --> 00:10:05,696
Quick Look thumbnailing is


332
00:10:05,696 --> 00:10:06,936
non-UI framework.


333
00:10:07,576 --> 00:10:09,526
We don't import UIKit or AppKit


334
00:10:09,526 --> 00:10:10,086
by default.


335
00:10:10,796 --> 00:10:12,526
We can get CGImages of your


336
00:10:12,526 --> 00:10:14,176
thumbnail without either but you


337
00:10:14,176 --> 00:10:16,476
can also obtain UIImages on iOS


338
00:10:16,476 --> 00:10:18,836
or NSImages on macOS by


339
00:10:18,836 --> 00:10:20,746
explicitly linking UIKit or


340
00:10:20,746 --> 00:10:22,016
AppKit respectively.


341
00:10:23,226 --> 00:10:25,286
It is asynchronous so it won't


342
00:10:25,286 --> 00:10:26,206
block while retrieving the


343
00:10:26,206 --> 00:10:28,706
thumbnail and it supports


344
00:10:28,706 --> 00:10:30,366
cancellation in case you decide


345
00:10:30,366 --> 00:10:31,366
you don't want that thumbnail


346
00:10:31,366 --> 00:10:31,896
after all.


347
00:10:34,996 --> 00:10:36,556
Let's start with a big picture


348
00:10:36,556 --> 00:10:37,086
overview.


349
00:10:37,536 --> 00:10:39,336
To get a thumbnail, you start by


350
00:10:39,336 --> 00:10:40,266
creating a


351
00:10:40,266 --> 00:10:42,626
QLThumbnailGenerator.Request and


352
00:10:42,626 --> 00:10:43,566
then pass it to a


353
00:10:43,566 --> 00:10:46,316
QLThumbnailGenerator specifying


354
00:10:46,316 --> 00:10:47,736
if you would like to be notified


355
00:10:47,736 --> 00:10:49,406
every time a new representation


356
00:10:49,406 --> 00:10:51,336
of the thumbnail is available or


357
00:10:51,336 --> 00:10:52,156
only when the best


358
00:10:52,156 --> 00:10:53,796
representation you requested is


359
00:10:53,796 --> 00:10:54,376
complete.


360
00:10:54,416 --> 00:10:58,366
You can request different


361
00:10:58,366 --> 00:10:59,806
representations of thumbnails


362
00:10:59,926 --> 00:11:01,066
which will have different


363
00:11:01,066 --> 00:11:02,636
quality and performance costs.


364
00:11:04,066 --> 00:11:05,506
Icon is the generic image


365
00:11:05,506 --> 00:11:06,986
associated with that file type.


366
00:11:07,586 --> 00:11:08,716
This will be the same for all


367
00:11:08,716 --> 00:11:10,016
files of a given type.


368
00:11:10,436 --> 00:11:13,306
Low quality thumbnail is a


369
00:11:13,306 --> 00:11:14,556
faster thumbnail that we were


370
00:11:14,556 --> 00:11:16,456
able to provide that may not be


371
00:11:16,456 --> 00:11:18,066
exactly the size you specified.


372
00:11:19,026 --> 00:11:20,166
This typically comes from a


373
00:11:20,166 --> 00:11:21,886
cached version of the thumbnail


374
00:11:21,956 --> 00:11:23,636
or possibly thumbnails embedded


375
00:11:23,636 --> 00:11:24,776
in the file itself.


376
00:11:26,176 --> 00:11:27,956
The last representation type


377
00:11:28,216 --> 00:11:29,796
thumbnail is a full quality


378
00:11:29,796 --> 00:11:30,836
version of the thumbnail,


379
00:11:31,316 --> 00:11:32,886
matching the request exactly.


380
00:11:33,436 --> 00:11:35,196
This will take the longest to


381
00:11:35,196 --> 00:11:35,676
generate.


382
00:11:37,426 --> 00:11:38,986
For convenience, you can also


383
00:11:38,986 --> 00:11:41,196
specify all to get any type of


384
00:11:41,196 --> 00:11:42,166
available thumbnail.


385
00:11:42,596 --> 00:11:46,426
When you create a QLThumbnail


386
00:11:46,426 --> 00:11:48,296
generation request, you specify


387
00:11:48,296 --> 00:11:50,486
size, scale and representation


388
00:11:50,486 --> 00:11:51,376
types you would like.


389
00:11:51,866 --> 00:11:53,926
You may only care about the full


390
00:11:53,926 --> 00:11:55,986
quality thumbnail or you may be


391
00:11:55,986 --> 00:11:58,176
OK with an icon or lower quality


392
00:11:58,176 --> 00:11:58,726
version.


393
00:11:58,986 --> 00:12:00,886
It's best to specify all


394
00:12:00,916 --> 00:12:02,476
representation types that will


395
00:12:02,476 --> 00:12:04,496
work for you as not all three


396
00:12:04,586 --> 00:12:06,086
types may be available for a


397
00:12:06,086 --> 00:12:06,876
given thumbnail.


398
00:12:09,786 --> 00:12:10,576
You will get a


399
00:12:10,576 --> 00:12:12,386
QLThumbnailRepresentation back


400
00:12:13,096 --> 00:12:14,386
which will specify the type of


401
00:12:14,386 --> 00:12:16,346
thumbnail it is, icon, low


402
00:12:16,346 --> 00:12:18,546
quality or thumbnail and an


403
00:12:18,546 --> 00:12:20,296
image which can either be


404
00:12:20,296 --> 00:12:22,716
accessed as a CGImage, or if


405
00:12:22,716 --> 00:12:24,096
you've linked UIKit on iOS or


406
00:12:24,096 --> 00:12:26,876
AppKit on macOS, you can get a


407
00:12:26,876 --> 00:12:28,466
UIImage or NS Image


408
00:12:28,566 --> 00:12:29,186
respectively.


409
00:12:29,546 --> 00:12:32,246
To get that


410
00:12:32,246 --> 00:12:34,396
QLThumbnailRepresentation, you


411
00:12:34,396 --> 00:12:35,926
pass your thumbnail request to a


412
00:12:35,926 --> 00:12:37,326
QLThumbnailGenerator.


413
00:12:37,676 --> 00:12:39,646
If you just want the best


414
00:12:39,646 --> 00:12:41,696
quality thumbnail available, use


415
00:12:41,696 --> 00:12:43,296
generateBestRepresentation.


416
00:12:43,916 --> 00:12:45,116
This will call your completion


417
00:12:45,116 --> 00:12:46,626
handler with the best version of


418
00:12:46,626 --> 00:12:47,716
your thumbnail request that


419
00:12:47,716 --> 00:12:50,796
could be created.


420
00:12:50,796 --> 00:12:52,296
Or you may prefer to get


421
00:12:52,296 --> 00:12:54,336
incremental updates by providing


422
00:12:54,336 --> 00:12:55,896
an updateHandler to generate


423
00:12:55,896 --> 00:12:57,396
representations that will be


424
00:12:57,396 --> 00:12:59,326
called as each representation


425
00:12:59,326 --> 00:13:00,206
becomes available.


426
00:13:00,676 --> 00:13:02,566
You can use this, for example,


427
00:13:02,566 --> 00:13:04,436
to update your UI quickly and


428
00:13:04,506 --> 00:13:05,946
then improve the quality of what


429
00:13:05,946 --> 00:13:07,636
is shown as better thumbnails


430
00:13:07,916 --> 00:13:08,256
arrive.


431
00:13:08,826 --> 00:13:12,446
So that's enough about thumbnail


432
00:13:12,446 --> 00:13:13,026
retrieval.


433
00:13:13,146 --> 00:13:14,486
Let's talk about using Quick


434
00:13:14,486 --> 00:13:16,496
Look to edit images, PDFs and


435
00:13:16,496 --> 00:13:17,136
videos.


436
00:13:20,146 --> 00:13:21,886
Quick Look provides API to


437
00:13:21,886 --> 00:13:23,336
preview documents of various


438
00:13:23,336 --> 00:13:24,606
types of files on iOS.


439
00:13:25,406 --> 00:13:26,616
It also allows you to provide


440
00:13:26,616 --> 00:13:28,156
custom previews for your own


441
00:13:28,156 --> 00:13:29,646
documents via extensions.


442
00:13:31,116 --> 00:13:33,386
Now in iOS 13, we've also added


443
00:13:33,386 --> 00:13:35,186
support to quickly edit images,


444
00:13:35,346 --> 00:13:36,906
PDFs and videos with the


445
00:13:36,906 --> 00:13:38,236
QLPreviewController.


446
00:13:38,616 --> 00:13:42,516
The QLPreviewController is what


447
00:13:42,516 --> 00:13:43,956
you use to preview a file.


448
00:13:44,316 --> 00:13:46,366
To make use if it simply


449
00:13:46,366 --> 00:13:47,526
allocate an instance of


450
00:13:47,526 --> 00:13:49,246
QLPreviewController and set a


451
00:13:49,246 --> 00:13:50,846
data source and delegate before


452
00:13:50,846 --> 00:13:51,486
presenting it.


453
00:13:52,416 --> 00:13:53,686
To learn more about Quick Look


454
00:13:53,686 --> 00:13:55,386
and the QLPreviewController, we


455
00:13:55,386 --> 00:13:56,586
highly encourage you to check


456
00:13:56,586 --> 00:13:59,036
out our WWDC presentation from


457
00:13:59,036 --> 00:14:01,296
2018 Quick Look Previews from


458
00:14:01,296 --> 00:14:01,906
the Ground Up.


459
00:14:02,486 --> 00:14:05,886
New to iOS 13, the


460
00:14:05,886 --> 00:14:07,376
QLPreviewController also


461
00:14:07,376 --> 00:14:09,016
provides access to Markup, the


462
00:14:09,426 --> 00:14:11,046
editing tools available when you


463
00:14:11,046 --> 00:14:13,376
preview a document and files or


464
00:14:13,666 --> 00:14:14,916
edit an attachment in mail.


465
00:14:15,426 --> 00:14:18,416
This is available for images and


466
00:14:21,016 --> 00:14:21,146
PDFs.


467
00:14:21,336 --> 00:14:22,746
QLPreviewController also


468
00:14:22,746 --> 00:14:24,146
provides support for trimming


469
00:14:24,146 --> 00:14:25,186
and rotating videos.


470
00:14:25,596 --> 00:14:28,086
To use these features, you just


471
00:14:28,086 --> 00:14:29,406
have to enable editing mode.


472
00:14:29,806 --> 00:14:33,836
All you have to do is implement


473
00:14:33,836 --> 00:14:35,216
an optional delegate method


474
00:14:35,686 --> 00:14:37,416
editing mode for preview item.


475
00:14:37,866 --> 00:14:40,336
By default, editing is disabled


476
00:14:40,716 --> 00:14:43,046
but it is possible to enable it


477
00:14:43,046 --> 00:14:44,646
on a per item basis.


478
00:14:45,166 --> 00:14:46,536
This delegate method allows you


479
00:14:46,536 --> 00:14:48,516
to specify both if you want


480
00:14:48,516 --> 00:14:50,556
editing capabilities and how you


481
00:14:50,556 --> 00:14:51,776
want to handle the resulting


482
00:14:51,776 --> 00:14:52,286
file.


483
00:14:52,816 --> 00:14:56,146
You can have the


484
00:14:56,146 --> 00:14:57,886
QLPreviewController overwrite


485
00:14:57,886 --> 00:14:59,036
the original file with the


486
00:14:59,036 --> 00:15:00,486
user's edited version.


487
00:15:00,706 --> 00:15:03,426
To do so, return updateContents


488
00:15:03,426 --> 00:15:05,206
from editing mode for preview


489
00:15:05,206 --> 00:15:05,666
item.


490
00:15:07,556 --> 00:15:09,246
If you need to react to edits


491
00:15:09,246 --> 00:15:11,156
being successfully saved, you


492
00:15:11,156 --> 00:15:12,796
can also implement the optional


493
00:15:12,796 --> 00:15:15,266
didUpdateContentsof previewItem


494
00:15:17,806 --> 00:15:18,026
method.


495
00:15:18,116 --> 00:15:19,816
Or you may prefer to use


496
00:15:19,816 --> 00:15:21,556
QLPreviewController to create


497
00:15:21,556 --> 00:15:23,336
edited copies of the files being


498
00:15:23,336 --> 00:15:24,716
previewed and manage them


499
00:15:24,716 --> 00:15:25,226
yourself.


500
00:15:25,826 --> 00:15:28,526
To do so return createCopy from


501
00:15:28,526 --> 00:15:30,306
editing mode for preview item


502
00:15:30,846 --> 00:15:32,796
and implement the delegate


503
00:15:32,796 --> 00:15:35,226
method that saved edited copy of


504
00:15:35,316 --> 00:15:36,786
preview item at modified


505
00:15:36,786 --> 00:15:37,906
contents URL.


506
00:15:42,316 --> 00:15:44,456
Quick Look Extension APIs on


507
00:15:44,456 --> 00:15:45,056
macOS.


508
00:15:46,556 --> 00:15:47,716
So we've just talked about


509
00:15:47,716 --> 00:15:49,476
getting and using thumbnails and


510
00:15:49,476 --> 00:15:50,476
previews for files.


511
00:15:51,476 --> 00:15:52,466
Now let's talk about how to


512
00:15:52,466 --> 00:15:54,046
provide thumbnails and previews


513
00:15:54,046 --> 00:15:55,316
for your own file types.


514
00:15:55,646 --> 00:15:58,406
Already on iOS, an app can


515
00:15:58,406 --> 00:15:59,936
implement a Quick Look thumbnail


516
00:15:59,936 --> 00:16:01,626
and preview extension to provide


517
00:16:01,626 --> 00:16:03,416
systemwide thumbnail and preview


518
00:16:03,416 --> 00:16:05,086
support for its own documents.


519
00:16:05,716 --> 00:16:06,626
Now the same Quick Look


520
00:16:06,626 --> 00:16:08,536
extension API is available on


521
00:16:08,536 --> 00:16:09,286
macOS.


522
00:16:11,116 --> 00:16:12,806
Thumbnails are used throughout


523
00:16:12,806 --> 00:16:14,946
macOS and iOS to allow users to


524
00:16:14,946 --> 00:16:16,356
identify files quickly.


525
00:16:17,176 --> 00:16:18,626
For instance, you can see on the


526
00:16:18,626 --> 00:16:20,306
screenshot how macOS makes use


527
00:16:20,306 --> 00:16:21,246
of them in Finder.


528
00:16:21,506 --> 00:16:23,686
MacOS can generate thumbnails


529
00:16:23,686 --> 00:16:26,176
for many common file types, but


530
00:16:26,176 --> 00:16:27,276
implementing a thumbnail


531
00:16:27,276 --> 00:16:28,766
extension allows you to also


532
00:16:28,766 --> 00:16:30,126
provide thumbnails for your own


533
00:16:30,126 --> 00:16:31,996
file types so that they can have


534
00:16:31,996 --> 00:16:33,826
a rich representation in Finder


535
00:16:33,826 --> 00:16:35,026
and elsewhere a thumbnail might


536
00:16:35,026 --> 00:16:35,386
show.


537
00:16:35,946 --> 00:16:38,546
The extension API replaces the


538
00:16:38,546 --> 00:16:40,446
old CF plug-in based generator


539
00:16:40,446 --> 00:16:40,976
system.


540
00:16:41,116 --> 00:16:42,566
If you have a Quick Look


541
00:16:42,566 --> 00:16:44,506
generator, consider migrating


542
00:16:44,506 --> 00:16:44,876
soon.


543
00:16:45,206 --> 00:16:47,866
I say Quick Look extension in a


544
00:16:47,866 --> 00:16:49,176
general sense here as the


545
00:16:49,176 --> 00:16:50,756
thumbnail extension point comes


546
00:16:50,756 --> 00:16:51,936
from Quick Look thumbnailing.


547
00:16:52,566 --> 00:16:53,996
This was previously vended from


548
00:16:53,996 --> 00:16:55,466
the Quick Look framework on iOS


549
00:16:56,276 --> 00:16:57,516
but you might want to consider


550
00:16:57,516 --> 00:16:58,896
importing it from the Quick Look


551
00:16:58,896 --> 00:17:00,126
thumbnailing instead if you do


552
00:17:00,126 --> 00:17:02,406
not need UIKit as this will make


553
00:17:02,406 --> 00:17:03,626
your extension leaner.


554
00:17:06,116 --> 00:17:07,915
To create a thumbnail extension,


555
00:17:07,996 --> 00:17:09,816
add a new target in your Xcode


556
00:17:09,816 --> 00:17:11,156
project using the thumbnail


557
00:17:11,156 --> 00:17:12,246
extension template.


558
00:17:13,976 --> 00:17:15,586
After setting up your extension


559
00:17:15,586 --> 00:17:17,146
target, you will be able to


560
00:17:17,146 --> 00:17:18,516
start implementing your


561
00:17:18,516 --> 00:17:21,026
QLThumbnailProvider subclass.


562
00:17:21,126 --> 00:17:22,316
You can draw your thumbnail


563
00:17:22,316 --> 00:17:24,316
using either a CG context, an


564
00:17:24,316 --> 00:17:26,106
AppKit context, or you can


565
00:17:26,106 --> 00:17:28,415
provide a file URL to an image.


566
00:17:31,116 --> 00:17:32,846
Here's a quick example where we


567
00:17:32,846 --> 00:17:34,316
overwrite the provide thumbnail


568
00:17:34,316 --> 00:17:35,776
for request handler method.


569
00:17:36,206 --> 00:17:37,986
We extensively cover this part


570
00:17:37,986 --> 00:17:39,466
of the Quick Look API in our


571
00:17:39,466 --> 00:17:43,016
session from WWDC 2017 "Building


572
00:17:43,016 --> 00:17:44,996
Great Document-based Apps in iOS


573
00:17:44,996 --> 00:17:45,496
11".


574
00:17:46,016 --> 00:17:47,336
We highly encourage you to check


575
00:17:47,336 --> 00:17:47,666
it out.


576
00:17:47,996 --> 00:17:50,106
In a nutshell, you will get a


577
00:17:50,106 --> 00:17:52,006
QLFileThumbnailRequest which


578
00:17:52,006 --> 00:17:54,146
will have the URL of the file,


579
00:17:54,356 --> 00:17:56,596
the maximum and minimum sizes of


580
00:17:56,596 --> 00:17:58,226
the thumbnail, and its scale.


581
00:17:58,766 --> 00:18:00,896
Use these to create a thumbnail


582
00:18:00,896 --> 00:18:02,466
matching those specifications.


583
00:18:04,306 --> 00:18:06,216
For each thumbnail request, the


584
00:18:06,216 --> 00:18:07,846
API expects you to create a


585
00:18:07,846 --> 00:18:10,006
QLThumbnailReply which will be


586
00:18:10,006 --> 00:18:11,286
used to generate the thumbnail.


587
00:18:11,526 --> 00:18:13,476
Pass the QLThumbnailReply to the


588
00:18:13,476 --> 00:18:14,716
completion handler above.


589
00:18:18,346 --> 00:18:19,536
To debug your thumbnail


590
00:18:19,536 --> 00:18:21,616
extension on macOS, you can use


591
00:18:21,616 --> 00:18:22,436
QLManage.


592
00:18:22,466 --> 00:18:24,506
If you have written Quick Look


593
00:18:24,506 --> 00:18:26,096
generators in the past, you may


594
00:18:26,096 --> 00:18:27,036
recognize this tool.


595
00:18:27,036 --> 00:18:29,066
Build and run your extension


596
00:18:29,066 --> 00:18:30,746
target in Xcode to register your


597
00:18:30,746 --> 00:18:32,106
extension with the system.


598
00:18:32,856 --> 00:18:34,606
Then use QLManage to generate a


599
00:18:34,606 --> 00:18:36,176
thumbnail of your file type and


600
00:18:36,176 --> 00:18:37,536
attach to your extension in


601
00:18:37,566 --> 00:18:37,976
Xcode.


602
00:18:40,096 --> 00:18:41,866
Preview Extensions for Files.


603
00:18:42,196 --> 00:18:44,266
New this year, Quick Look on


604
00:18:44,266 --> 00:18:46,286
macOS also allows you to provide


605
00:18:46,286 --> 00:18:48,276
previews for your own file types


606
00:18:48,276 --> 00:18:49,896
by implementing a preview


607
00:18:49,896 --> 00:18:50,646
extension.


608
00:18:51,956 --> 00:18:53,406
Quick Look preview extensions


609
00:18:53,406 --> 00:18:54,946
already existed to support Core


610
00:18:54,946 --> 00:18:55,966
Spotlight previews.


611
00:18:56,326 --> 00:18:59,306
See WWDC 2017's What's New in


612
00:18:59,306 --> 00:19:00,846
Core Spotlight for iOS and


613
00:19:00,846 --> 00:19:01,456
macOS.


614
00:19:02,406 --> 00:19:03,596
This year we've also added


615
00:19:03,596 --> 00:19:04,826
support for file previews.


616
00:19:05,236 --> 00:19:07,906
With the extension, you can now


617
00:19:07,906 --> 00:19:09,136
directly provide a view to


618
00:19:09,136 --> 00:19:10,196
display your preview.


619
00:19:11,146 --> 00:19:12,236
This is different from the old


620
00:19:12,236 --> 00:19:13,686
Quick Look generators in which


621
00:19:13,686 --> 00:19:15,596
you provided data or a URL for


622
00:19:15,596 --> 00:19:16,766
the system to present.


623
00:19:17,146 --> 00:19:19,436
The new extension API allows you


624
00:19:19,436 --> 00:19:20,556
greater control over the


625
00:19:20,556 --> 00:19:21,846
appearance of your preview.


626
00:19:22,546 --> 00:19:23,966
We recommend you migrate off the


627
00:19:23,966 --> 00:19:25,336
old Quick Look generators as


628
00:19:25,336 --> 00:19:26,776
they will be deprecated in a


629
00:19:26,776 --> 00:19:27,606
future release.


630
00:19:30,436 --> 00:19:32,206
To create a Preview Extension,


631
00:19:32,206 --> 00:19:33,826
add a new target in your project


632
00:19:33,826 --> 00:19:35,636
and select the Preview Extension


633
00:19:35,636 --> 00:19:36,186
template.


634
00:19:38,756 --> 00:19:41,066
The API is identical to iOS


635
00:19:41,066 --> 00:19:41,996
Preview extensions.


636
00:19:41,996 --> 00:19:44,886
See WWDC 2018's Quick Look


637
00:19:44,886 --> 00:19:46,036
Previews from the Ground Up.


638
00:19:46,436 --> 00:19:48,646
As a quick summary, you will


639
00:19:48,646 --> 00:19:49,766
want to declare the list of


640
00:19:49,766 --> 00:19:51,006
supported UTIs in


641
00:19:51,006 --> 00:19:53,036
QLSupportedContentTypes in your


642
00:19:53,036 --> 00:19:53,826
Info.plist.


643
00:19:54,966 --> 00:19:57,026
This must exactly match the UTIs


644
00:19:57,026 --> 00:19:58,706
of the files you want previewed.


645
00:19:59,216 --> 00:20:01,186
Matching by parent UTI is not


646
00:20:01,186 --> 00:20:01,726
supported.


647
00:20:02,136 --> 00:20:03,986
The template will provide a view


648
00:20:03,986 --> 00:20:05,246
controller which will be what


649
00:20:05,246 --> 00:20:06,756
you prepare your preview in.


650
00:20:07,216 --> 00:20:10,366
Here's a quick example of the


651
00:20:10,366 --> 00:20:11,466
view controller template.


652
00:20:12,176 --> 00:20:14,156
Implement, preparePreviewofFile


653
00:20:14,156 --> 00:20:16,126
at URL to prepare your view


654
00:20:16,126 --> 00:20:16,696
controller.


655
00:20:16,996 --> 00:20:18,356
And once you're ready, call the


656
00:20:18,356 --> 00:20:19,256
completion handler.


657
00:20:20,026 --> 00:20:21,556
The QLPreviewView presenting you


658
00:20:21,556 --> 00:20:23,096
preview will show a spinning


659
00:20:23,096 --> 00:20:24,476
wheel until this completion


660
00:20:24,476 --> 00:20:25,406
handler is called.


661
00:20:25,816 --> 00:20:27,046
So get your preview ready as


662
00:20:27,046 --> 00:20:28,166
quickly as possible.


663
00:20:30,276 --> 00:20:32,176
Keep in mind, your preview can


664
00:20:32,176 --> 00:20:34,036
be shown in any QLPreviewView


665
00:20:34,726 --> 00:20:36,166
which may be the Preview panel,


666
00:20:36,336 --> 00:20:37,636
the Column View sidebar,


667
00:20:37,876 --> 00:20:39,556
Spotlight or any client of the


668
00:20:39,556 --> 00:20:41,236
QLPreviewView at all.


669
00:20:45,716 --> 00:20:47,546
To debug, launch your extension


670
00:20:47,546 --> 00:20:48,486
target with Xcode.


671
00:20:48,756 --> 00:20:51,146
Note that Xcode will lunch the


672
00:20:51,146 --> 00:20:52,616
Quick Look simulator by default.


673
00:20:53,076 --> 00:20:54,586
This is to aid in debugging Core


674
00:20:54,586 --> 00:20:55,966
Spotlight previews which are


675
00:20:55,966 --> 00:20:57,386
extension can also provide


676
00:20:57,386 --> 00:20:57,966
support for.


677
00:20:58,516 --> 00:21:00,796
To debug regular file previews,


678
00:21:00,796 --> 00:21:02,136
you can ignore the simulator and


679
00:21:02,136 --> 00:21:03,616
invoke your preview with finder


680
00:21:03,616 --> 00:21:04,496
or QLManage.


681
00:21:04,746 --> 00:21:05,976
As long as your preview


682
00:21:05,976 --> 00:21:07,066
extension is launched through


683
00:21:07,066 --> 00:21:09,016
Xcode, Xcode will automatically


684
00:21:09,016 --> 00:21:10,306
attach to it.


685
00:21:14,416 --> 00:21:16,036
Let's talk about supporting iPad


686
00:21:16,176 --> 00:21:17,936
apps on Mac.


687
00:21:17,936 --> 00:21:19,586
Our document handling APIs are


688
00:21:19,586 --> 00:21:22,066
supported in iPad apps on Mac so


689
00:21:22,066 --> 00:21:22,646
you can bring your


690
00:21:22,646 --> 00:21:24,616
document-based iOS apps to


691
00:21:24,616 --> 00:21:25,236
macOS.


692
00:21:28,036 --> 00:21:28,486
For


693
00:21:28,486 --> 00:21:30,316
UIDocumentPickerViewController


694
00:21:30,456 --> 00:21:32,216
use it as you would on iOS and


695
00:21:32,216 --> 00:21:33,946
users will automatically get and


696
00:21:33,946 --> 00:21:35,846
experience that feels native to


697
00:21:36,266 --> 00:21:37,196
macOS.


698
00:21:37,196 --> 00:21:38,786
Specifically, the .import and


699
00:21:38,786 --> 00:21:41,066
.open modes show an NSOpenPanel


700
00:21:41,326 --> 00:21:43,736
and the .exportToService and


701
00:21:43,736 --> 00:21:45,306
.moveToService modes show an


702
00:21:45,306 --> 00:21:46,426
NSSavePanel.


703
00:21:48,296 --> 00:21:49,816
Similarly, for


704
00:21:49,816 --> 00:21:51,676
UIDocumentBrowserViewController,


705
00:21:52,176 --> 00:21:53,706
users will get an experience


706
00:21:53,706 --> 00:21:54,656
that feels native for a


707
00:21:54,656 --> 00:21:56,456
document-based app on macOS.


708
00:21:56,826 --> 00:21:59,336
The user will get an NSOpenPanel


709
00:21:59,336 --> 00:22:00,716
in a separate window just like


710
00:22:00,716 --> 00:22:01,666
they do in TextEdit.


711
00:22:02,176 --> 00:22:04,406
There are a few minor runtime


712
00:22:04,406 --> 00:22:06,456
differences due to differences


713
00:22:06,456 --> 00:22:08,146
between the interfaces on iOS


714
00:22:08,146 --> 00:22:08,926
and macOS.


715
00:22:09,606 --> 00:22:11,016
A good example of this is the


716
00:22:11,016 --> 00:22:12,916
UIDocumentBrowserViewControllers


717
00:22:12,916 --> 00:22:14,876
navigation bar which doesn't


718
00:22:14,876 --> 00:22:15,996
exist on macOS.


719
00:22:16,596 --> 00:22:17,776
Check the documentation for


720
00:22:17,776 --> 00:22:19,286
details on what to do for these


721
00:22:19,286 --> 00:22:20,376
particular cases.


722
00:22:21,296 --> 00:22:23,106
In some cases, you can use new


723
00:22:23,106 --> 00:22:25,206
APIs, such as the menu bar API,


724
00:22:25,356 --> 00:22:26,736
to help you address these UI


725
00:22:26,806 --> 00:22:27,576
differences.


726
00:22:30,196 --> 00:22:32,226
Quick Look is also available on


727
00:22:32,226 --> 00:22:34,186
iPad apps on Mac.


728
00:22:34,356 --> 00:22:36,186
Presenting a QLPreviewController


729
00:22:36,186 --> 00:22:38,216
will launch a QLPreviewPanel on


730
00:22:38,216 --> 00:22:40,476
macOS to provide a more native


731
00:22:40,476 --> 00:22:41,466
Mac experience.


732
00:22:42,436 --> 00:22:44,316
Since the QLPreviewPanel is a


733
00:22:44,316 --> 00:22:45,306
separate window, you're


734
00:22:45,306 --> 00:22:46,536
presenting view controllers


735
00:22:46,536 --> 00:22:48,656
content will be visible but it


736
00:22:48,656 --> 00:22:49,696
will be great out and


737
00:22:49,696 --> 00:22:50,596
non-interactive.


738
00:22:52,436 --> 00:22:54,376
Test your iPad apps on Mac to


739
00:22:54,376 --> 00:22:55,406
make sure it looks great.


740
00:22:58,096 --> 00:22:59,716
One limitation to note of


741
00:22:59,716 --> 00:23:01,946
QLPreviewController in iPad apps


742
00:23:01,946 --> 00:23:03,706
on Mac is that embedding the


743
00:23:03,706 --> 00:23:05,326
QLPreviewController's view is


744
00:23:05,326 --> 00:23:07,336
not fully supported and we will


745
00:23:07,336 --> 00:23:08,896
provide a thumbnail instead of a


746
00:23:08,896 --> 00:23:09,976
live preview in this case.


747
00:23:13,046 --> 00:23:14,076
So what have we learned today?


748
00:23:14,926 --> 00:23:16,046
First, we've shown you how to


749
00:23:16,046 --> 00:23:18,076
leverage new features of iOS 13


750
00:23:18,076 --> 00:23:20,066
in your app, such as accessing


751
00:23:20,066 --> 00:23:21,826
multiple files in a directory,


752
00:23:22,116 --> 00:23:24,356
supporting USB drives and SMB


753
00:23:24,356 --> 00:23:24,866
servers.


754
00:23:25,806 --> 00:23:27,526
Then we've taken a look at using


755
00:23:27,526 --> 00:23:29,136
Quick Look to display the same


756
00:23:29,136 --> 00:23:31,196
rich thumbnails as in the files


757
00:23:31,196 --> 00:23:33,116
app, provide Quick Look editing


758
00:23:33,116 --> 00:23:34,866
support for images and videos,


759
00:23:34,906 --> 00:23:36,396
and provide previews and


760
00:23:36,396 --> 00:23:37,856
thumbnails with modern extension


761
00:23:37,856 --> 00:23:40,266
API on the Mac.


762
00:23:40,456 --> 00:23:41,386
Thank you for watching.

