1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:09,516 --> 00:00:12,616
[ Applause ]


3
00:00:13,116 --> 00:00:14,076
>> My name is Joe.


4
00:00:14,076 --> 00:00:15,666
And later, I'll be joined by my


5
00:00:15,666 --> 00:00:17,276
colleagues Simon and Scott.


6
00:00:17,696 --> 00:00:19,766
We're from the Core OS Group and


7
00:00:19,766 --> 00:00:21,246
we'd like to tell you about some


8
00:00:21,296 --> 00:00:22,816
new developments with Kernel


9
00:00:22,816 --> 00:00:25,526
Extensions in macOS 10.15


10
00:00:25,526 --> 00:00:26,046
Catalina.


11
00:00:28,276 --> 00:00:31,266
Kernel Extensions or Kexts, are


12
00:00:31,266 --> 00:00:32,896
a technology that's been part of


13
00:00:32,896 --> 00:00:34,786
macOS from the very beginning.


14
00:00:36,046 --> 00:00:37,796
Using Kexts, you can build


15
00:00:37,846 --> 00:00:39,846
powerful and innovative apps


16
00:00:40,246 --> 00:00:41,656
that extend the built-in


17
00:00:41,656 --> 00:00:43,446
functionality of the operating


18
00:00:43,446 --> 00:00:43,816
system.


19
00:00:44,406 --> 00:00:47,386
This power to extend the system


20
00:00:47,836 --> 00:00:49,556
is an important part of what


21
00:00:49,556 --> 00:00:51,246
makes the Mac the Mac.


22
00:00:51,806 --> 00:00:54,866
But there are some problems with


23
00:00:54,866 --> 00:00:55,926
Kernel Extensions.


24
00:00:57,326 --> 00:00:59,166
They can be difficult to develop


25
00:00:59,166 --> 00:01:02,406
and to debug, they can be a risk


26
00:01:02,456 --> 00:01:04,846
to security and privacy on the


27
00:01:04,846 --> 00:01:07,086
machine, and they can be a risk


28
00:01:07,086 --> 00:01:08,216
to the reliability of the


29
00:01:08,216 --> 00:01:08,676
system.


30
00:01:09,756 --> 00:01:11,356
It's time for an upgrade.


31
00:01:12,816 --> 00:01:15,076
MacOS Catalina introduces two


32
00:01:15,076 --> 00:01:17,066
new technologies called System


33
00:01:17,066 --> 00:01:18,916
Extensions and DriverKit.


34
00:01:20,106 --> 00:01:22,566
Using them, your apps can extend


35
00:01:22,736 --> 00:01:24,486
the operating system in ways


36
00:01:24,486 --> 00:01:26,656
that are more reliable, more


37
00:01:26,656 --> 00:01:29,436
secure, and easier to develop


38
00:01:29,706 --> 00:01:30,536
than ever before.


39
00:01:31,056 --> 00:01:34,516
Here's what we'll talk about


40
00:01:34,516 --> 00:01:34,936
today.


41
00:01:35,466 --> 00:01:37,136
First, I'll introduce these new


42
00:01:37,136 --> 00:01:40,196
technologies and show you how


43
00:01:40,196 --> 00:01:41,626
they avoid the problems of


44
00:01:41,666 --> 00:01:42,676
Kernel Extensions.


45
00:01:43,896 --> 00:01:46,166
Then, Simon will come up and


46
00:01:46,166 --> 00:01:47,586
show us how to build Driver


47
00:01:47,586 --> 00:01:49,366
Extensions using DriverKit.


48
00:01:51,056 --> 00:01:53,176
Scott will show us how to write


49
00:01:53,236 --> 00:01:55,526
and debug a simple USB driver.


50
00:01:57,016 --> 00:01:58,346
And then, I'll tell you how to


51
00:01:58,346 --> 00:01:59,946
include System Extensions in


52
00:01:59,946 --> 00:02:02,166
your apps.


53
00:02:02,166 --> 00:02:04,576
Let's get started.


54
00:02:04,656 --> 00:02:07,466
System Extensions are our first


55
00:02:07,466 --> 00:02:08,895
new technology in macOS


56
00:02:08,946 --> 00:02:09,425
Catalina.


57
00:02:10,126 --> 00:02:12,686
A System Extension is part of


58
00:02:12,686 --> 00:02:14,326
your app that extends the


59
00:02:14,326 --> 00:02:15,926
functionality of the operating


60
00:02:15,926 --> 00:02:18,176
system in ways similar to a


61
00:02:18,176 --> 00:02:20,176
Kernel Extension but running in


62
00:02:20,176 --> 00:02:22,456
user space outside the kernel.


63
00:02:24,376 --> 00:02:26,256
There are three kinds of System


64
00:02:26,256 --> 00:02:27,696
Extensions that you can build in


65
00:02:27,696 --> 00:02:28,266
Catalina.


66
00:02:28,956 --> 00:02:30,656
They are Network Extensions,


67
00:02:31,246 --> 00:02:33,696
Driver Extensions, and Endpoint


68
00:02:33,696 --> 00:02:34,936
Security Extensions.


69
00:02:36,826 --> 00:02:38,136
Network Extensions are a


70
00:02:38,136 --> 00:02:40,176
replacement for Network Kernel


71
00:02:40,176 --> 00:02:40,956
Extensions.


72
00:02:42,616 --> 00:02:44,316
They can filter and reroute


73
00:02:44,316 --> 00:02:46,706
network traffic or connect to a


74
00:02:47,246 --> 00:02:47,330
VPN.


75
00:02:48,516 --> 00:02:50,026
For more information on Network


76
00:02:50,026 --> 00:02:51,866
Extensions, there's a session


77
00:02:51,866 --> 00:02:53,306
dedicated to them on Friday


78
00:02:53,306 --> 00:02:53,726
morning.


79
00:02:56,596 --> 00:02:59,446
Endpoint Security Extensions are


80
00:02:59,446 --> 00:03:01,656
a replacement for Kexts that


81
00:03:01,846 --> 00:03:03,066
intercept and monitor


82
00:03:03,066 --> 00:03:05,346
security-related events with the


83
00:03:05,346 --> 00:03:06,636
KAUTH interfaces.


84
00:03:07,616 --> 00:03:08,836
Some of the apps you can build


85
00:03:08,836 --> 00:03:10,866
this way are Endpoint Detection


86
00:03:10,866 --> 00:03:12,306
and Response and Data Loss


87
00:03:12,306 --> 00:03:13,306
Prevention apps.


88
00:03:14,406 --> 00:03:15,706
If you're interested in Endpoint


89
00:03:15,706 --> 00:03:17,456
Security Extensions, please,


90
00:03:17,456 --> 00:03:18,956
come to the Security Labs.


91
00:03:19,476 --> 00:03:20,966
There's one happening right now


92
00:03:20,966 --> 00:03:22,566
and continuing after this talk


93
00:03:23,056 --> 00:03:24,696
and one on Thursday afternoon.


94
00:03:25,276 --> 00:03:29,796
The third type of extension is


95
00:03:29,796 --> 00:03:31,826
Driver Extensions which are a


96
00:03:31,826 --> 00:03:33,526
replacement for Device Driver


97
00:03:33,526 --> 00:03:34,856
Kexts using IOKit.


98
00:03:35,576 --> 00:03:38,326
In Catalina, you can control


99
00:03:38,446 --> 00:03:41,396
USB, Serial, Network Interface,


100
00:03:41,526 --> 00:03:43,206
and Human Interface devices.


101
00:03:45,056 --> 00:03:47,146
Driver Extensions are built with


102
00:03:47,186 --> 00:03:49,196
DriverKit which is our second


103
00:03:49,196 --> 00:03:51,146
new technology in Catalina.


104
00:03:52,566 --> 00:03:56,636
DriverKit is a new SDK with all


105
00:03:56,636 --> 00:03:59,896
new frameworks based on IOKit


106
00:03:59,976 --> 00:04:01,726
but updated and modernized,


107
00:04:03,106 --> 00:04:04,566
designed for building Driver


108
00:04:04,566 --> 00:04:07,256
Extensions in user space outside


109
00:04:07,256 --> 00:04:07,836
the kernel.


110
00:04:08,446 --> 00:04:11,386
Now, that we've met these new


111
00:04:11,386 --> 00:04:15,056
technologies let's see how they


112
00:04:15,056 --> 00:04:16,716
avoid the problems of Kernel


113
00:04:16,716 --> 00:04:17,396
Extensions.


114
00:04:19,036 --> 00:04:20,826
There's a phrase I used in both


115
00:04:20,826 --> 00:04:23,046
of those definitions; in user


116
00:04:23,046 --> 00:04:24,946
space, outside the kernel.


117
00:04:26,016 --> 00:04:27,046
Why does this matter?


118
00:04:28,386 --> 00:04:30,136
The kernel is a very unforgiving


119
00:04:30,136 --> 00:04:31,896
and difficult environment to


120
00:04:31,896 --> 00:04:32,806
program within.


121
00:04:33,286 --> 00:04:36,816
The kernel is the conductor of


122
00:04:36,926 --> 00:04:38,146
everything that happens on the


123
00:04:38,146 --> 00:04:40,946
machine, so it must never stop


124
00:04:40,946 --> 00:04:43,016
running, must never wait for


125
00:04:43,016 --> 00:04:44,466
anything to happen, and must


126
00:04:44,466 --> 00:04:45,386
never crash.


127
00:04:46,776 --> 00:04:49,216
Code in the kernel has to be


128
00:04:49,216 --> 00:04:53,186
fast, has to be predictable, has


129
00:04:53,186 --> 00:04:54,626
to be frugal with its use of


130
00:04:54,626 --> 00:04:56,706
resources like memory, and has


131
00:04:56,706 --> 00:04:58,116
to be essentially bug-free.


132
00:04:59,316 --> 00:05:00,796
It's very difficult to write


133
00:05:00,856 --> 00:05:02,526
code that meets all of these


134
00:05:02,576 --> 00:05:03,256
restrictions.


135
00:05:05,236 --> 00:05:07,326
System Extensions run in user


136
00:05:07,326 --> 00:05:09,516
space outside the kernel which


137
00:05:09,516 --> 00:05:11,246
means they run in a comfortable


138
00:05:11,246 --> 00:05:13,046
modern programming environment.


139
00:05:14,516 --> 00:05:16,596
This makes them easier to


140
00:05:16,596 --> 00:05:19,606
develop than Kexts where kernel


141
00:05:19,606 --> 00:05:21,816
code has restrictions on when


142
00:05:21,816 --> 00:05:23,556
and how it can allocate memory


143
00:05:23,556 --> 00:05:25,186
or synchronize between threads.


144
00:05:26,326 --> 00:05:27,736
This means it cannot use most


145
00:05:27,736 --> 00:05:29,526
system frameworks such as


146
00:05:29,526 --> 00:05:31,106
Foundation since they are not


147
00:05:31,106 --> 00:05:32,106
designed to run in this


148
00:05:32,106 --> 00:05:32,656
environment.


149
00:05:33,946 --> 00:05:35,416
The only supported language for


150
00:05:35,416 --> 00:05:38,526
Kext development is C and C++.


151
00:05:39,906 --> 00:05:41,536
System Extensions, on the other


152
00:05:41,536 --> 00:05:43,456
hand, have no such restrictions


153
00:05:44,006 --> 00:05:45,206
which means they can be built


154
00:05:45,566 --> 00:05:49,006
using any framework in the macOS


155
00:05:49,416 --> 00:05:49,506
SDK


156
00:05:50,026 --> 00:05:51,496
and can be written in any


157
00:05:51,496 --> 00:05:53,056
language including Swift.


158
00:05:54,516 --> 00:05:58,446
[ Applause ]


159
00:05:58,946 --> 00:06:00,266
There is one exception to this.


160
00:06:00,926 --> 00:06:02,706
Driver Extensions, because of


161
00:06:02,706 --> 00:06:04,046
their close relationship with


162
00:06:04,076 --> 00:06:06,106
hardware, still have some


163
00:06:06,106 --> 00:06:06,866
restrictions.


164
00:06:08,026 --> 00:06:09,386
They must use the DriverKit


165
00:06:09,386 --> 00:06:11,526
frameworks and run in a tailored


166
00:06:11,526 --> 00:06:13,476
runtime which isolates them from


167
00:06:13,576 --> 00:06:16,026
the rest of the system.


168
00:06:16,216 --> 00:06:18,356
Driver Extensions must be


169
00:06:18,356 --> 00:06:20,126
written in C or C++.


170
00:06:20,206 --> 00:06:22,736
However, the default is C++17.


171
00:06:23,516 --> 00:06:27,586
[ Applause ]


172
00:06:28,086 --> 00:06:29,436
System Extensions are also


173
00:06:29,436 --> 00:06:31,086
easier to debug than Kernel


174
00:06:31,086 --> 00:06:31,796
Extensions.


175
00:06:32,716 --> 00:06:34,326
Attaching a debugger to the


176
00:06:34,326 --> 00:06:36,296
kernel halts the kernel and the


177
00:06:36,296 --> 00:06:38,676
entire machine including the


178
00:06:38,676 --> 00:06:39,166
debugger.


179
00:06:40,126 --> 00:06:41,456
This means you usually need a


180
00:06:41,456 --> 00:06:43,616
second machine to debug and you


181
00:06:43,616 --> 00:06:44,886
may need special cables or


182
00:06:44,886 --> 00:06:46,566
network configuration to connect


183
00:06:46,566 --> 00:06:47,286
the machines.


184
00:06:47,816 --> 00:06:50,756
The cycle of building, testing,


185
00:06:50,926 --> 00:06:53,376
and debugging a Kext can be slow


186
00:06:53,496 --> 00:06:55,146
because any crash in the Kext


187
00:06:55,146 --> 00:06:56,556
means the whole system has to


188
00:06:56,556 --> 00:06:57,006
restart.


189
00:06:57,656 --> 00:07:00,716
And the kernel debugger has


190
00:07:00,716 --> 00:07:01,646
limited support.


191
00:07:01,976 --> 00:07:02,956
It cannot do things like


192
00:07:02,956 --> 00:07:04,646
evaluate expressions or print


193
00:07:04,646 --> 00:07:05,906
the value of objects.


194
00:07:06,346 --> 00:07:09,686
System Extensions, on the other


195
00:07:09,686 --> 00:07:13,946
hand, can be debugged and the


196
00:07:14,196 --> 00:07:15,396
kernel keeps running.


197
00:07:16,966 --> 00:07:18,526
There's no need to restart if an


198
00:07:18,526 --> 00:07:19,706
extension crashes.


199
00:07:20,836 --> 00:07:22,796
You can build, test, and debug


200
00:07:23,016 --> 00:07:25,196
all on one machine with full


201
00:07:25,196 --> 00:07:25,966
debugger support.


202
00:07:26,556 --> 00:07:30,246
But the biggest improvements of


203
00:07:30,246 --> 00:07:32,246
System Extensions over Kernel


204
00:07:32,246 --> 00:07:34,406
Extensions are in the areas of


205
00:07:34,406 --> 00:07:36,646
security, privacy, and


206
00:07:36,646 --> 00:07:37,316
reliability.


207
00:07:37,936 --> 00:07:42,436
The kernel has many jobs, but


208
00:07:42,436 --> 00:07:44,196
one of the most important is to


209
00:07:44,196 --> 00:07:46,746
define and enforce the rules of


210
00:07:46,746 --> 00:07:48,276
the system's Security Policy.


211
00:07:49,266 --> 00:07:51,186
The kernel separates apps from


212
00:07:51,186 --> 00:07:52,806
each other and from direct


213
00:07:52,806 --> 00:07:53,836
access to hardware.


214
00:07:54,606 --> 00:07:56,126
Then, it allows them to share


215
00:07:56,126 --> 00:07:57,816
data and system services


216
00:07:58,036 --> 00:07:59,716
following the rules of the


217
00:07:59,716 --> 00:08:00,706
Security Policy.


218
00:08:01,226 --> 00:08:04,436
When a Kernel Extension loads,


219
00:08:04,846 --> 00:08:06,786
it becomes part of the kernel.


220
00:08:07,896 --> 00:08:09,686
It has access to everything on


221
00:08:09,686 --> 00:08:10,186
the machine.


222
00:08:11,066 --> 00:08:12,666
This is where a Kext's power


223
00:08:12,666 --> 00:08:13,186
comes from.


224
00:08:13,686 --> 00:08:16,566
But it can also be a danger.


225
00:08:16,716 --> 00:08:18,886
Because the Kernel Extension is


226
00:08:18,886 --> 00:08:20,416
part of the kernel which makes


227
00:08:20,416 --> 00:08:22,936
the security rules, it is above


228
00:08:22,936 --> 00:08:23,686
the rules.


229
00:08:24,256 --> 00:08:27,576
If a Kext has a bug that allows


230
00:08:27,576 --> 00:08:30,396
it to be compromised, it can


231
00:08:30,396 --> 00:08:32,116
take over the entire machine


232
00:08:33,155 --> 00:08:34,576
doing things its developers


233
00:08:34,576 --> 00:08:36,556
never intended and its users


234
00:08:36,556 --> 00:08:37,176
don't want.


235
00:08:37,916 --> 00:08:39,716
There are no security rules that


236
00:08:39,716 --> 00:08:40,486
can restrain it.


237
00:08:41,626 --> 00:08:43,166
This means that any bug in a


238
00:08:43,166 --> 00:08:45,606
Kext can be a critical security


239
00:08:45,606 --> 00:08:45,996
problem.


240
00:08:46,546 --> 00:08:51,406
Any bug in a Kext can also be a,


241
00:08:52,416 --> 00:08:55,226
can also be a, what's happening?


242
00:08:55,226 --> 00:08:56,166
Where are my slides?


243
00:08:57,376 --> 00:09:01,066
Any bug in a Kext can also be a


244
00:09:01,066 --> 00:09:02,746
critical reliability problem.


245
00:09:03,516 --> 00:09:05,596
[ Applause ]


246
00:09:06,096 --> 00:09:08,116
Because the kernel does not just


247
00:09:08,116 --> 00:09:09,956
crash, it panics, and the entire


248
00:09:09,956 --> 00:09:11,236
machine has to restart.


249
00:09:11,916 --> 00:09:13,846
If you're a Kext developer,


250
00:09:13,846 --> 00:09:15,476
you've surely seen this dialog a


251
00:09:15,476 --> 00:09:15,826
lot.


252
00:09:15,976 --> 00:09:18,136
And unfortunately, so have too


253
00:09:18,136 --> 00:09:19,186
many of our users.


254
00:09:19,726 --> 00:09:22,166
Let's see how the picture


255
00:09:22,166 --> 00:09:23,876
changes with System Extensions.


256
00:09:25,136 --> 00:09:27,036
A System Extension runs in


257
00:09:27,036 --> 00:09:27,776
userspace.


258
00:09:28,386 --> 00:09:30,406
Like other apps, it has to


259
00:09:30,406 --> 00:09:31,786
follow the rules of the System


260
00:09:31,786 --> 00:09:32,796
Security Policy.


261
00:09:33,746 --> 00:09:35,476
Unlike other apps, System


262
00:09:35,476 --> 00:09:37,166
Extensions are granted special


263
00:09:37,166 --> 00:09:39,106
privileges to do special jobs.


264
00:09:40,126 --> 00:09:41,566
For example, they may have


265
00:09:41,566 --> 00:09:42,726
direct access to their


266
00:09:42,726 --> 00:09:44,786
associated hardware devices or


267
00:09:44,786 --> 00:09:46,706
use special APIs to communicate


268
00:09:46,706 --> 00:09:48,256
directly with kernel systems.


269
00:09:49,706 --> 00:09:51,356
If a System Extension crashes,


270
00:09:52,016 --> 00:09:53,636
the rest of the system and apps


271
00:09:53,636 --> 00:09:58,736
are unaffected and keep running.


272
00:09:58,966 --> 00:10:00,906
For all these reasons, we think


273
00:10:00,906 --> 00:10:02,916
that System Extensions are a big


274
00:10:02,916 --> 00:10:04,466
step forward for the Mac


275
00:10:04,466 --> 00:10:04,976
platform.


276
00:10:05,566 --> 00:10:08,216
In fact, we think they're such


277
00:10:08,216 --> 00:10:09,906
an improvement that we recommend


278
00:10:09,906 --> 00:10:11,426
you adopt them immediately.


279
00:10:12,016 --> 00:10:14,726
As Sebastian said in the State


280
00:10:14,726 --> 00:10:17,006
of the Union yesterday, "We are


281
00:10:17,006 --> 00:10:18,526
beginning the process of


282
00:10:18,556 --> 00:10:20,196
deprecating Kernel Extensions.


283
00:10:20,926 --> 00:10:23,256
MacOS 10.15 Catalina will be the


284
00:10:23,256 --> 00:10:25,446
last release to fully support


285
00:10:25,446 --> 00:10:26,726
Kernel Extensions without


286
00:10:26,726 --> 00:10:27,416
compromises."


287
00:10:28,516 --> 00:10:32,036
[ Applause ]


288
00:10:32,536 --> 00:10:33,946
Specifically, for the


289
00:10:33,946 --> 00:10:35,876
capabilities supported by System


290
00:10:35,876 --> 00:10:37,296
Extensions and the device


291
00:10:37,296 --> 00:10:39,036
families supported by DriverKit,


292
00:10:39,646 --> 00:10:41,246
using a Kernel Extension to do


293
00:10:41,246 --> 00:10:43,506
that same job is now deprecated


294
00:10:44,336 --> 00:10:46,026
and a future release of macOS


295
00:10:46,026 --> 00:10:47,826
will not load Kernel Extensions


296
00:10:47,826 --> 00:10:48,846
of these kinds.


297
00:10:49,416 --> 00:10:53,326
In future releases, we will add


298
00:10:53,326 --> 00:10:55,196
more kinds of System Extensions


299
00:10:55,446 --> 00:10:56,776
and more device families to


300
00:10:56,776 --> 00:10:57,406
DriverKit.


301
00:10:58,576 --> 00:11:00,536
In turn, Kernel Extensions of


302
00:11:00,536 --> 00:11:02,366
those kinds will also be


303
00:11:02,366 --> 00:11:02,976
deprecated.


304
00:11:07,046 --> 00:11:09,056
So, that's a brief introduction


305
00:11:09,056 --> 00:11:10,356
to System Extensions.


306
00:11:11,726 --> 00:11:13,566
They avoid the difficulties of


307
00:11:13,566 --> 00:11:15,406
kernel programming by running in


308
00:11:15,406 --> 00:11:17,336
user space which lets your apps


309
00:11:17,336 --> 00:11:19,266
extend the system in ways that


310
00:11:19,266 --> 00:11:22,176
are easier to develop and debug,


311
00:11:22,866 --> 00:11:25,856
that protect the security and


312
00:11:25,856 --> 00:11:28,766
reliability of our users' data.


313
00:11:29,246 --> 00:11:32,666
And now, I'd like to turn it


314
00:11:32,666 --> 00:11:34,136
over to Simon, who will show you


315
00:11:34,136 --> 00:11:35,696
how to build Driver Extensions


316
00:11:35,956 --> 00:11:37,606
using the new DriverKit Runtime.


317
00:11:38,516 --> 00:11:44,546
[ Applause ]


318
00:11:45,046 --> 00:11:46,986
Well, thanks, Joe.


319
00:11:47,696 --> 00:11:50,006
As Joe just said, a Driver


320
00:11:50,006 --> 00:11:51,276
Extension is a new type of


321
00:11:51,276 --> 00:11:53,296
System Extension that controls


322
00:11:53,296 --> 00:11:55,236
the hardware device and makes


323
00:11:55,236 --> 00:11:56,616
its services available across


324
00:11:56,616 --> 00:11:57,386
the whole OS.


325
00:11:58,726 --> 00:11:59,676
We call these new Driver


326
00:11:59,676 --> 00:12:01,346
Extensions a Dext.


327
00:12:02,726 --> 00:12:03,726
And our goal is to make the


328
00:12:03,726 --> 00:12:05,046
transition from our Kernel


329
00:12:05,046 --> 00:12:07,066
Extension to a Driver Extension


330
00:12:07,486 --> 00:12:08,496
as easy as possible.


331
00:12:10,306 --> 00:12:11,286
To show you how Driver


332
00:12:11,286 --> 00:12:12,826
Extensions work and how you can


333
00:12:12,826 --> 00:12:14,356
build your own or transition


334
00:12:14,356 --> 00:12:16,396
from a Kext, we're going to talk


335
00:12:16,396 --> 00:12:17,000
about four things.


336
00:12:19,736 --> 00:12:21,466
We're going to talk about their


337
00:12:21,806 --> 00:12:22,126
lifecycle


338
00:12:22,976 --> 00:12:25,000
and how they match and start.


339
00:12:31,266 --> 00:12:32,766
And how they compete with Kexts,


340
00:12:33,246 --> 00:12:34,616
and we're going to talk about


341
00:12:34,616 --> 00:12:36,056
how to build them with the new


342
00:12:36,056 --> 00:12:36,856
DriverKit SDK.


343
00:12:36,856 --> 00:12:39,596
And we're going to go over some


344
00:12:39,596 --> 00:12:40,856
security features such as


345
00:12:40,856 --> 00:12:41,656
entitlements.


346
00:12:42,206 --> 00:12:44,486
And finally, we'll talk about


347
00:12:44,486 --> 00:12:45,816
some compatibility questions


348
00:12:45,816 --> 00:12:47,146
about how you can deploy an app


349
00:12:47,726 --> 00:12:49,546
to macOS Catalina and Mojave.


350
00:12:55,596 --> 00:12:56,276
So, let's talk about the


351
00:12:56,276 --> 00:12:57,526
lifecycle of a Kext.


352
00:13:02,066 --> 00:13:03,186
Let's look at the process that


353
00:13:03,186 --> 00:13:04,396
happens when a device appears


354
00:13:04,396 --> 00:13:05,626
that has a Driver Extension.


355
00:13:06,566 --> 00:13:07,956
We start with IOKit Matching


356
00:13:07,956 --> 00:13:09,596
creating a kernel service to


357
00:13:09,596 --> 00:13:10,746
represent your service.


358
00:13:11,406 --> 00:13:12,386
This is written by Apple.


359
00:13:13,076 --> 00:13:17,856
We then start a process hosting


360
00:13:17,856 --> 00:13:19,236
your driver with your DriverKit


361
00:13:19,236 --> 00:13:20,266
class instantiated.


362
00:13:20,876 --> 00:13:23,936
And the process also as proxy


363
00:13:23,936 --> 00:13:26,896
objects for any services it uses


364
00:13:27,116 --> 00:13:28,096
such as its provider.


365
00:13:29,446 --> 00:13:31,476
This device is using a USB


366
00:13:31,476 --> 00:13:32,636
device or device.


367
00:13:33,136 --> 00:13:34,776
This, this device is using a USB


368
00:13:34,776 --> 00:13:36,846
device so it has a proxy object


369
00:13:36,846 --> 00:13:37,876
to call that represents the


370
00:13:37,876 --> 00:13:38,706
kernel device.


371
00:13:39,246 --> 00:13:41,796
This means that DriverKit


372
00:13:42,306 --> 00:13:43,866
drivers appears to Kernel


373
00:13:43,866 --> 00:13:45,876
Extensions and can compete in


374
00:13:45,876 --> 00:13:47,286
matching with kernel drivers.


375
00:13:47,956 --> 00:13:50,126
You can see them in the registry


376
00:13:50,496 --> 00:13:52,186
with tools like IOReg and you


377
00:13:52,186 --> 00:13:54,286
can use the IOKit Framework APIs


378
00:13:54,966 --> 00:13:56,986
with them.


379
00:13:57,186 --> 00:13:58,966
Since DriverKit drivers are


380
00:13:58,966 --> 00:14:00,566
separated from the kernel and


381
00:14:00,566 --> 00:14:02,606
from each other, another device


382
00:14:02,606 --> 00:14:03,946
will have its own process and


383
00:14:03,946 --> 00:14:08,256
another instance of the driver.


384
00:14:08,416 --> 00:14:11,326
In macOS Catalina, Apple has


385
00:14:11,326 --> 00:14:12,596
started to move several of its


386
00:14:12,596 --> 00:14:13,696
own drivers to Driver


387
00:14:13,696 --> 00:14:14,256
Extensions.


388
00:14:15,566 --> 00:14:16,886
Here, you can see a process that


389
00:14:16,886 --> 00:14:18,526
is hosting a USB networking


390
00:14:18,526 --> 00:14:21,006
device which is visible in the


391
00:14:21,006 --> 00:14:22,736
registry as a normal ethernet


392
00:14:22,736 --> 00:14:26,896
device to the rest of the OS.


393
00:14:26,896 --> 00:14:27,966
And you can also see some other


394
00:14:27,966 --> 00:14:29,366
processes in the registry


395
00:14:29,926 --> 00:14:31,516
hosting several HID and serial


396
00:14:31,516 --> 00:14:31,936
drivers.


397
00:14:31,936 --> 00:14:35,806
So, now we're going to talk


398
00:14:35,806 --> 00:14:36,896
about building your Driver


399
00:14:36,896 --> 00:14:39,206
Extension with the DriverKit


400
00:14:39,916 --> 00:14:40,006
SDK.


401
00:14:42,056 --> 00:14:43,456
We wanted to make building


402
00:14:43,456 --> 00:14:44,756
Driver Extensions an easy


403
00:14:44,756 --> 00:14:46,136
transition for those of you who


404
00:14:46,136 --> 00:14:47,866
currently build Kexts so we


405
00:14:48,276 --> 00:14:50,396
started with the IOKit C++ APIs


406
00:14:50,396 --> 00:14:52,406
that you are familiar with.


407
00:14:53,556 --> 00:14:55,206
The DriverKit APIs are an


408
00:14:55,206 --> 00:14:57,036
extension of the IOKit APIs to


409
00:14:57,036 --> 00:14:57,816
userspace.


410
00:14:58,366 --> 00:14:59,436
And we have collected them into


411
00:14:59,436 --> 00:15:01,496
a new DriverKit SDK that is


412
00:15:01,496 --> 00:15:04,916
separate to the macOS SDK.


413
00:15:05,166 --> 00:15:07,456
This SDK has a limited API


414
00:15:07,646 --> 00:15:09,186
surface for reliability and


415
00:15:09,186 --> 00:15:12,036
security and there is no direct


416
00:15:12,036 --> 00:15:13,536
access to the file system,


417
00:15:14,086 --> 00:15:15,536
networking, or mock messaging.


418
00:15:16,166 --> 00:15:19,306
This allows Apple to tailor the


419
00:15:19,306 --> 00:15:21,066
userspace process to running


420
00:15:21,066 --> 00:15:24,666
drivers and can give it elevated


421
00:15:24,666 --> 00:15:25,726
priority and increased


422
00:15:25,726 --> 00:15:26,306
capabilities.


423
00:15:27,026 --> 00:15:30,006
So, let's talk about some of the


424
00:15:30,006 --> 00:15:31,536
classes in the DriverKit SDK.


425
00:15:32,326 --> 00:15:35,686
First, the IOService class


426
00:15:35,686 --> 00:15:37,146
exists in DriverKit and is very


427
00:15:37,146 --> 00:15:40,736
similar to the IOKit class.


428
00:15:40,916 --> 00:15:42,706
There also IOMemoryDescriptor


429
00:15:42,706 --> 00:15:44,056
and IOBufferMemoryDescriptor


430
00:15:44,056 --> 00:15:45,356
classes available that are,


431
00:15:45,356 --> 00:15:49,556
again, very similar to IOKit.


432
00:15:49,656 --> 00:15:50,886
We also have replacements for


433
00:15:50,886 --> 00:15:52,286
the IOWorkLoop and EventSource


434
00:15:52,286 --> 00:15:53,376
classes in IOKit.


435
00:15:54,176 --> 00:15:57,546
And finally, there's a new class


436
00:15:57,546 --> 00:15:59,746
called OSAction that is required


437
00:15:59,746 --> 00:16:00,966
to represent a C Function


438
00:16:00,966 --> 00:16:01,316
Pointer.


439
00:16:04,716 --> 00:16:06,246
So, let's take a look, closer


440
00:16:06,246 --> 00:16:11,396
look at some of these classes.


441
00:16:11,466 --> 00:16:13,196
The IOService class has the


442
00:16:13,196 --> 00:16:14,876
lifecycle APIs from IOKit like


443
00:16:14,876 --> 00:16:16,186
Start, Stop, and Terminate.


444
00:16:17,596 --> 00:16:22,096
For synchronization, every


445
00:16:22,256 --> 00:16:23,846
IOService has a default


446
00:16:23,846 --> 00:16:26,366
DispatchQueue and all methods


447
00:16:26,366 --> 00:16:27,816
are invoked on a queue including


448
00:16:27,816 --> 00:16:28,856
interrupts, timers, and


449
00:16:28,856 --> 00:16:29,556
completions.


450
00:16:30,876 --> 00:16:33,246
IODispatchQueue is built on the


451
00:16:33,246 --> 00:16:34,136
pre-run Grand Central


452
00:16:34,136 --> 00:16:36,286
Dispatch code and is a special


453
00:16:36,286 --> 00:16:37,666
version optimized for running in


454
00:16:37,666 --> 00:16:38,846
the restricted DriverKit


455
00:16:38,846 --> 00:16:39,406
environment.


456
00:16:40,876 --> 00:16:42,556
Drivers do have control over


457
00:16:42,556 --> 00:16:44,746
their queues and which methods


458
00:16:44,746 --> 00:16:46,266
are invoked on which queues for


459
00:16:46,266 --> 00:16:47,086
advanced use.


460
00:16:47,656 --> 00:16:52,336
The event APIs are similar to


461
00:16:52,336 --> 00:16:53,776
the IOWorkLoop model in IOKit


462
00:16:53,776 --> 00:16:56,286
but are now based on the Grand


463
00:16:56,286 --> 00:17:00,136
Central Dispatch APIs with


464
00:17:00,336 --> 00:17:01,876
queues and dispatch sources for


465
00:17:01,876 --> 00:17:02,936
interrupts and timers.


466
00:17:04,256 --> 00:17:05,935
The block API is replaced by a


467
00:17:05,935 --> 00:17:09,056
command gate and GCD provides


468
00:17:09,056 --> 00:17:10,866
synchronization parameters that


469
00:17:10,866 --> 00:17:12,296
are easy to use and very likely


470
00:17:12,296 --> 00:17:13,736
familiar to you.


471
00:17:15,056 --> 00:17:16,146
There is also an


472
00:17:16,146 --> 00:17:18,006
IOSharedDataQueueDispatchSource


473
00:17:18,006 --> 00:17:19,806
class that provides a shared


474
00:17:19,806 --> 00:17:23,425
memory ring buffer for fast, for


475
00:17:23,425 --> 00:17:24,476
low overhead message passing.


476
00:17:24,776 --> 00:17:28,556
The last class we'll talk about


477
00:17:28,556 --> 00:17:31,636
is OSAction which encapsulates


478
00:17:31,636 --> 00:17:32,906
what would be a callback in the


479
00:17:32,906 --> 00:17:34,986
IOKit APIs.


480
00:17:35,576 --> 00:17:38,196
They are always asynchronous and


481
00:17:38,196 --> 00:17:39,686
they hold the callback client's


482
00:17:39,686 --> 00:17:40,566
state privately.


483
00:17:41,236 --> 00:17:43,806
And they allow the callback to


484
00:17:43,806 --> 00:17:45,086
be defined with arbitrary


485
00:17:45,086 --> 00:17:46,936
arguments and with type checking


486
00:17:46,936 --> 00:17:48,166
in compile and runtime.


487
00:17:48,806 --> 00:17:51,036
So, there were some of the


488
00:17:51,036 --> 00:17:52,136
classes in DriverKit.


489
00:17:52,366 --> 00:17:53,396
Let's look at how we define


490
00:17:53,396 --> 00:17:55,046
these classes which is a little


491
00:17:55,046 --> 00:17:56,726
different from IOKit.


492
00:17:58,576 --> 00:17:59,996
DriverKit interfaces are


493
00:17:59,996 --> 00:18:01,656
described with a new file type


494
00:18:01,656 --> 00:18:04,876
with the .iig extension and they


495
00:18:04,876 --> 00:18:06,396
are processed by a tool also


496
00:18:06,396 --> 00:18:08,000
called IIG.


497
00:18:09,116 --> 00:18:11,376
The IIG file is a class


498
00:18:11,376 --> 00:18:12,976
definition that is compiled by


499
00:18:12,976 --> 00:18:15,086
Clang and can import C and


500
00:18:15,086 --> 00:18:17,986
C++ headers for common types and


501
00:18:17,986 --> 00:18:18,596
structures.


502
00:18:19,166 --> 00:18:21,796
But it does have some extra


503
00:18:21,796 --> 00:18:23,006
attributes to its class and


504
00:18:23,006 --> 00:18:25,016
method definitions that allow it


505
00:18:25,016 --> 00:18:27,396
to be used, to be used for


506
00:18:27,396 --> 00:18:28,526
calling from separate address


507
00:18:28,526 --> 00:18:29,046
spaces.


508
00:18:29,516 --> 00:18:34,046
Here, you can see a basic class


509
00:18:34,046 --> 00:18:35,346
definition that looks mostly


510
00:18:35,346 --> 00:18:37,356
normal but it has some extra


511
00:18:37,356 --> 00:18:39,296
attributes such as kernel on the


512
00:18:39,296 --> 00:18:40,706
class, which means the class is


513
00:18:40,706 --> 00:18:41,696
defined in the kernel.


514
00:18:42,856 --> 00:18:44,146
And local on some method


515
00:18:44,146 --> 00:18:45,846
declarations which means the


516
00:18:45,846 --> 00:18:47,156
method is implemented in a user


517
00:18:47,156 --> 00:18:47,576
driver.


518
00:18:47,576 --> 00:18:51,646
Some of the families that are


519
00:18:51,646 --> 00:18:54,006
available in the macOS Catalina


520
00:18:54,006 --> 00:18:56,266
developer preview today are


521
00:18:56,266 --> 00:18:57,826
NetworkingDriverKit for creating


522
00:18:57,826 --> 00:18:58,836
network interfaces.


523
00:19:00,276 --> 00:19:01,936
HIDDriverKit for creating HID


524
00:19:01,936 --> 00:19:02,606
devices,


525
00:19:04,836 --> 00:19:07,336
USBSerialDriverKit to make a USB


526
00:19:07,476 --> 00:19:09,306
serial device available to the


527
00:19:09,306 --> 00:19:12,756
OS, and USB DriverKit to make


528
00:19:12,786 --> 00:19:14,486
use of USB device providers in


529
00:19:14,486 --> 00:19:15,166
your drivers.


530
00:19:17,326 --> 00:19:18,226
Shortly, Scott will be


531
00:19:18,226 --> 00:19:20,016
demonstrating what a USB device


532
00:19:20,536 --> 00:19:21,926
support looks like with


533
00:19:21,926 --> 00:19:22,506
USBDriverKit.


534
00:19:22,506 --> 00:19:26,456
So, now we're going to talk


535
00:19:26,456 --> 00:19:28,376
about some security aspects of


536
00:19:28,596 --> 00:19:30,186
developing Driver Extensions.


537
00:19:30,866 --> 00:19:34,196
There are a few types of driver,


538
00:19:34,276 --> 00:19:36,006
of, of entitlement that your


539
00:19:36,006 --> 00:19:37,236
Driver Extension will need to


540
00:19:37,236 --> 00:19:37,636
obtain.


541
00:19:38,976 --> 00:19:40,346
There's one for all Driver


542
00:19:40,346 --> 00:19:42,886
Extensions and there's one to


543
00:19:42,886 --> 00:19:44,466
take control of, of a device


544
00:19:44,466 --> 00:19:45,886
called the transport entitlement


545
00:19:46,626 --> 00:19:47,826
which is specific to the kind of


546
00:19:47,826 --> 00:19:48,376
device.


547
00:19:48,926 --> 00:19:51,806
And there is also a family


548
00:19:51,806 --> 00:19:53,206
entitlement that is required to


549
00:19:53,206 --> 00:19:54,806
make available a service into


550
00:19:54,806 --> 00:19:56,086
the OS.


551
00:19:56,786 --> 00:19:58,256
And Joe will talk later in this


552
00:19:58,296 --> 00:19:59,716
session about code signing and


553
00:19:59,716 --> 00:20:00,776
the approval process for


554
00:20:00,776 --> 00:20:01,976
obtaining these entitlements.


555
00:20:02,716 --> 00:20:07,466
Now, we'll have a quick word on


556
00:20:07,466 --> 00:20:08,686
shipping products that work on


557
00:20:08,686 --> 00:20:10,276
all versions of macOS.


558
00:20:11,866 --> 00:20:14,266
Shipping a product for both


559
00:20:14,266 --> 00:20:15,806
macOS Catalina and earlier


560
00:20:15,806 --> 00:20:17,756
releases will require you to


561
00:20:17,756 --> 00:20:19,836
install a Kernel Extension for


562
00:20:19,836 --> 00:20:21,806
older releases but use the


563
00:20:21,806 --> 00:20:23,476
System Extensions Framework and


564
00:20:23,476 --> 00:20:25,366
provide a Driver Extension on


565
00:20:25,366 --> 00:20:26,356
macOS Catalina.


566
00:20:27,026 --> 00:20:29,876
So, now Scott will be


567
00:20:29,876 --> 00:20:31,256
demonstrating how to make use of


568
00:20:31,256 --> 00:20:33,096
the new USBDriverKit Framework.


569
00:20:34,096 --> 00:20:34,556
Thanks, Scott.


570
00:20:35,516 --> 00:20:41,936
[ Applause ]


571
00:20:42,436 --> 00:20:43,366
>> Thanks, Simon.


572
00:20:43,686 --> 00:20:45,116
So, today I'm going to show you


573
00:20:45,116 --> 00:20:47,396
how to build a simple USB driver


574
00:20:47,396 --> 00:20:48,356
that reads data from an


575
00:20:48,356 --> 00:20:50,156
interrupt endpoint using the new


576
00:20:50,156 --> 00:20:52,016
USBDriverKit Framework.


577
00:20:52,316 --> 00:20:53,786
We'll briefly go over how to


578
00:20:53,786 --> 00:20:55,396
create a new project in Xcode


579
00:20:55,396 --> 00:20:56,626
using the DriverKit Template.


580
00:20:57,376 --> 00:20:58,636
After that, we'll take a look at


581
00:20:58,636 --> 00:20:59,966
a kernel class versus a


582
00:20:59,966 --> 00:21:00,916
DriverKit class.


583
00:21:01,786 --> 00:21:02,816
Then, next, I'll go into the


584
00:21:02,816 --> 00:21:04,176
details of the implementation in


585
00:21:04,176 --> 00:21:04,966
DriverKit.


586
00:21:05,326 --> 00:21:06,566
And finally, I'll give a short


587
00:21:06,566 --> 00:21:08,056
demonstration of the driver in


588
00:21:08,056 --> 00:21:09,326
action and how you can debug


589
00:21:09,326 --> 00:21:10,676
your Dext live with LLDB.


590
00:21:10,676 --> 00:21:15,776
Creating a new DriverKit project


591
00:21:15,776 --> 00:21:17,556
with Xcode is as simple as


592
00:21:17,556 --> 00:21:18,746
selecting the proper template


593
00:21:18,746 --> 00:21:20,386
during Xcode's new Project


594
00:21:20,386 --> 00:21:20,836
Workflow.


595
00:21:21,516 --> 00:21:23,126
Once completed, Xcode will have


596
00:21:23,126 --> 00:21:24,316
autogenerated a few files to


597
00:21:24,316 --> 00:21:24,876
help you begin.


598
00:21:25,416 --> 00:21:28,906
The generated project includes


599
00:21:28,906 --> 00:21:29,956
the standard files needed to


600
00:21:29,956 --> 00:21:30,896
successfully build.


601
00:21:30,896 --> 00:21:33,316
As with the Kernel Extension,


602
00:21:33,416 --> 00:21:34,996
the project includes the C++


603
00:21:34,996 --> 00:21:36,616
implementation, entitlements,


604
00:21:36,616 --> 00:21:37,666
and an info.pist.


605
00:21:38,866 --> 00:21:41,076
In addition to those, Xcode has


606
00:21:41,076 --> 00:21:43,106
also generated the IIG file that


607
00:21:43,106 --> 00:21:44,286
Simon mentioned earlier.


608
00:21:45,106 --> 00:21:46,206
This file contains the class


609
00:21:46,256 --> 00:21:47,806
definition for your driver.


610
00:21:49,026 --> 00:21:49,996
So, let's take a look at the


611
00:21:49,996 --> 00:21:51,056
class definition for


612
00:21:51,056 --> 00:21:53,146
MyUserUSBInterfaceDriver.


613
00:21:53,686 --> 00:21:56,916
You can see how this looks very


614
00:21:56,916 --> 00:21:58,486
similar to a kernel driver.


615
00:21:59,116 --> 00:22:01,016
For example, the same public


616
00:22:01,016 --> 00:22:02,476
IOKit Lifecycle method, start


617
00:22:02,476 --> 00:22:03,786
and stop existing DriverKit


618
00:22:03,786 --> 00:22:04,786
would have been capitalized.


619
00:22:05,976 --> 00:22:07,866
That said, there are a few small


620
00:22:07,866 --> 00:22:08,966
but important differences.


621
00:22:10,746 --> 00:22:12,346
First, the DriverKit class


622
00:22:12,346 --> 00:22:13,766
requires a different callback


623
00:22:13,766 --> 00:22:14,936
with an additional attribute.


624
00:22:15,416 --> 00:22:17,246
This attribute indicates that


625
00:22:17,306 --> 00:22:18,346
this method conforms to the


626
00:22:18,346 --> 00:22:20,276
callback type defined by the


627
00:22:20,276 --> 00:22:21,766
IOUSBHostPipe object and


628
00:22:21,766 --> 00:22:23,596
enforces compile-time type


629
00:22:23,636 --> 00:22:23,986
checking.


630
00:22:24,816 --> 00:22:26,486
And second, there are no


631
00:22:26,486 --> 00:22:28,006
instance variables declared in a


632
00:22:28,006 --> 00:22:28,996
DriverKit class.


633
00:22:29,816 --> 00:22:31,786
This is because all instance


634
00:22:31,786 --> 00:22:33,296
variables must be allocated by


635
00:22:33,296 --> 00:22:34,306
the driver during


636
00:22:34,306 --> 00:22:35,086
initialization.


637
00:22:35,636 --> 00:22:36,836
So, let's take a look at how


638
00:22:36,836 --> 00:22:37,466
that's done for


639
00:22:37,466 --> 00:22:39,556
MyUserUSBInterfaceDriver.


640
00:22:41,116 --> 00:22:42,876
First, you need to declare a


641
00:22:42,876 --> 00:22:44,446
structure to hold all of your


642
00:22:44,446 --> 00:22:45,166
instance variables.


643
00:22:45,926 --> 00:22:47,046
All instance variables that


644
00:22:47,046 --> 00:22:48,496
would have previously been part


645
00:22:48,496 --> 00:22:49,916
of your kernel class should be


646
00:22:49,916 --> 00:22:50,796
part of this structure.


647
00:22:51,656 --> 00:22:53,096
For this class, we have pointers


648
00:22:53,096 --> 00:22:54,586
to the same USB kernel types


649
00:22:55,066 --> 00:22:55,726
that a Kext would.


650
00:22:56,326 --> 00:22:58,296
Such as an IOUSBHostInterface


651
00:22:58,296 --> 00:23:01,226
provider and IOUSBHostPipe


652
00:23:01,226 --> 00:23:02,396
object for performing IO.


653
00:23:02,396 --> 00:23:05,086
And there's also an OSAction


654
00:23:05,086 --> 00:23:06,186
object that will be used to


655
00:23:06,186 --> 00:23:07,346
encapsulate the callback for


656
00:23:07,346 --> 00:23:08,196
asynchronous IO.


657
00:23:08,776 --> 00:23:10,646
Then, you simply need to


658
00:23:10,646 --> 00:23:11,886
allocate the structure during


659
00:23:11,886 --> 00:23:12,576
your INIT routine.


660
00:23:13,126 --> 00:23:16,536
And here's the INIT routine for


661
00:23:16,536 --> 00:23:18,516
MyUserUSBInterfaceDriver.


662
00:23:19,016 --> 00:23:21,136
It calls INIT on the superclass


663
00:23:21,136 --> 00:23:22,246
in the same way a Kext would.


664
00:23:22,596 --> 00:23:24,046
And then, it allocates the IVAR


665
00:23:24,046 --> 00:23:24,486
structure.


666
00:23:25,826 --> 00:23:27,546
It should be noted that the


667
00:23:27,546 --> 00:23:29,116
superclass defines an IVAR's


668
00:23:29,646 --> 00:23:31,156
member that must be used to


669
00:23:31,156 --> 00:23:32,106
assign the result of the


670
00:23:32,106 --> 00:23:32,706
allocation.


671
00:23:33,726 --> 00:23:35,436
So, next, we'll take a look at


672
00:23:35,436 --> 00:23:37,206
the implementation of Start.


673
00:23:38,136 --> 00:23:40,216
This portion of Start is


674
00:23:40,216 --> 00:23:41,386
responsible for calling into the


675
00:23:41,386 --> 00:23:42,786
superclass and validating the


676
00:23:42,786 --> 00:23:43,256
provider.


677
00:23:44,476 --> 00:23:45,756
Here, things are slightly


678
00:23:45,756 --> 00:23:46,746
different than the kernel


679
00:23:46,746 --> 00:23:47,466
implementation.


680
00:23:49,596 --> 00:23:50,946
You can see the definition is


681
00:23:50,946 --> 00:23:52,156
wrapped in a macro IMPL.


682
00:23:52,156 --> 00:23:53,986
And this macro is required to


683
00:23:53,986 --> 00:23:55,706
support the IPC communication


684
00:23:55,706 --> 00:23:57,386
between the user process and the


685
00:23:57,386 --> 00:23:58,556
kernel proxy object.


686
00:23:59,736 --> 00:24:01,616
And you can also see that


687
00:24:01,616 --> 00:24:03,586
calling super start takes a


688
00:24:04,036 --> 00:24:06,266
different form.


689
00:24:07,236 --> 00:24:09,806
Next, using the USB DriverKit


690
00:24:09,806 --> 00:24:11,596
APIs, you open your IOUSB host


691
00:24:11,596 --> 00:24:15,116
interface provider and you


692
00:24:15,246 --> 00:24:16,666
allocate your Pipe object.


693
00:24:18,826 --> 00:24:19,806
And then, allocate a memory


694
00:24:19,806 --> 00:24:20,976
descriptor to be used for IO.


695
00:24:22,096 --> 00:24:23,286
This should be a fairly familiar


696
00:24:23,286 --> 00:24:24,606
paradigm and is basically


697
00:24:24,606 --> 00:24:25,716
identical to what's done in a


698
00:24:25,716 --> 00:24:26,000
Kext.


699
00:24:30,096 --> 00:24:31,196
In this case, we're performing


700
00:24:31,296 --> 00:24:32,926
asynchronous IO, so we need to


701
00:24:32,926 --> 00:24:34,766
allocate an OS attribute object


702
00:24:34,856 --> 00:24:35,926
to encapsulate the callback.


703
00:24:37,566 --> 00:24:38,636
And then, finally, all that


704
00:24:38,636 --> 00:24:40,136
remains is to enqueue the IO.


705
00:24:41,756 --> 00:24:43,576
At this point, assuming the


706
00:24:43,576 --> 00:24:45,846
setup was successful, there's an


707
00:24:45,846 --> 00:24:47,136
asynchronous read which we'll


708
00:24:47,136 --> 00:24:48,736
call ReadComplete when finished.


709
00:24:49,026 --> 00:24:50,406
And the ReadComplete method for


710
00:24:50,406 --> 00:24:51,616
this driver just prints the


711
00:24:51,616 --> 00:24:53,206
number of bytes transferred and


712
00:24:53,206 --> 00:24:53,866
the status.


713
00:24:54,116 --> 00:24:55,556
If successful, it re-enqueues


714
00:24:55,556 --> 00:24:55,916
the IO.


715
00:24:56,356 --> 00:24:58,456
So, next, let's take a look at


716
00:24:58,456 --> 00:25:01,536
the driver in action.


717
00:25:02,246 --> 00:25:04,026
So, in this demo, you'll see


718
00:25:04,026 --> 00:25:05,186
some logging I've added to


719
00:25:05,186 --> 00:25:07,516
MyUserUSBInterfaceDriver that


720
00:25:07,516 --> 00:25:11,076
will print some of the lifecycle


721
00:25:11,076 --> 00:25:11,646
methods.


722
00:25:15,426 --> 00:25:17,966
I've also added an infinite loop


723
00:25:18,556 --> 00:25:20,536
which we'll debug using LDB.


724
00:25:20,536 --> 00:25:23,856
And then, I've also introduced a


725
00:25:23,856 --> 00:25:27,946
crash which we can see how is


726
00:25:27,986 --> 00:25:29,236
recoverable now using the new


727
00:25:29,236 --> 00:25:30,326
DriverKit Framework.


728
00:25:30,956 --> 00:25:32,676
So, if I plug in the device you


729
00:25:32,676 --> 00:25:34,396
can see INIT and start run just


730
00:25:34,396 --> 00:25:35,416
like they would in a Kext.


731
00:25:35,726 --> 00:25:37,226
And ReadComplete is being called


732
00:25:37,326 --> 00:25:39,176
as data is being transferred to


733
00:25:39,246 --> 00:25:41,236
and from the device.


734
00:25:41,236 --> 00:25:46,396
Using PS, we can see that our


735
00:25:46,956 --> 00:25:47,926
driver is running.


736
00:25:48,826 --> 00:25:50,506
And now, we've hit my infinite


737
00:25:50,506 --> 00:25:51,506
loop that I added and we can


738
00:25:51,506 --> 00:25:53,326
take a look with LDB at what's


739
00:25:53,326 --> 00:25:54,976
happening in the driver.


740
00:26:02,356 --> 00:26:03,616
So, from earlier, we can see our


741
00:26:03,616 --> 00:26:06,086
PID is 2572, so we need to


742
00:26:06,086 --> 00:26:07,586
attach to that process.


743
00:26:15,116 --> 00:26:16,456
We need to find the thread


744
00:26:16,456 --> 00:26:17,906
running the ReadComplete method.


745
00:26:19,386 --> 00:26:22,286
You can see, that's thread two.


746
00:26:24,436 --> 00:26:26,656
And here, we've definitely got


747
00:26:26,656 --> 00:26:27,436
an infinite loop.


748
00:26:27,496 --> 00:26:28,356
And because we're running in


749
00:26:28,356 --> 00:26:30,266
userspace, we can modify our


750
00:26:30,266 --> 00:26:30,976
loop variable.


751
00:26:36,306 --> 00:26:37,726
And before I continue, if you


752
00:26:37,726 --> 00:26:39,316
look closely, you can see


753
00:26:39,836 --> 00:26:41,506
there's definitely a null


754
00:26:41,506 --> 00:26:43,346
pointer D reference, which will


755
00:26:43,346 --> 00:26:44,276
crash the driver.


756
00:26:44,796 --> 00:26:48,206
And you can see it's crashed.


757
00:26:49,646 --> 00:26:51,146
But then, immediately restarted


758
00:26:51,576 --> 00:26:52,566
without affecting the rest of


759
00:26:52,566 --> 00:26:53,036
the system.


760
00:26:53,956 --> 00:26:55,716
And then, on unplug you can see


761
00:26:55,716 --> 00:26:57,156
your stop and free methods would


762
00:26:57,156 --> 00:26:58,206
run as normal.


763
00:27:01,516 --> 00:27:04,086
[ Applause ]


764
00:27:04,586 --> 00:27:05,106
And so, that's--


765
00:27:06,516 --> 00:27:08,826
[ Applause ]


766
00:27:09,326 --> 00:27:10,476
-- that's how easy it is to


767
00:27:10,476 --> 00:27:12,626
build and debug a new driver


768
00:27:12,826 --> 00:27:13,796
with the new DriverKit


769
00:27:13,796 --> 00:27:14,236
Framework.


770
00:27:14,426 --> 00:27:16,046
Now, I'll hand it back to Joe to


771
00:27:16,516 --> 00:27:17,936
talk about how to deliver System


772
00:27:17,936 --> 00:27:19,056
Extensions in your apps.


773
00:27:21,546 --> 00:27:22,586
>> Thank you, Scott.


774
00:27:23,886 --> 00:27:24,946
Now, that we've seen how to


775
00:27:24,946 --> 00:27:26,526
build a Driver Extension, I'd


776
00:27:26,526 --> 00:27:27,986
like to tell you how to ship a


777
00:27:27,986 --> 00:27:30,176
driver or other type of System


778
00:27:30,176 --> 00:27:32,326
Extension in your app.


779
00:27:33,816 --> 00:27:35,476
We'll talk about how your


780
00:27:35,476 --> 00:27:36,926
extension relates to your app,


781
00:27:38,486 --> 00:27:39,976
how to build and package the


782
00:27:39,976 --> 00:27:41,196
extension bundle.


783
00:27:42,056 --> 00:27:43,406
We'll talk about code signing


784
00:27:43,446 --> 00:27:45,886
and entitlements and how to


785
00:27:45,886 --> 00:27:48,056
install, update, and uninstall


786
00:27:48,056 --> 00:27:49,066
your System Extension.


787
00:27:49,666 --> 00:27:54,526
A System Extension is always


788
00:27:54,666 --> 00:27:55,436
part of an app.


789
00:27:56,196 --> 00:27:57,836
This is a basic principle of the


790
00:27:57,836 --> 00:27:58,326
design.


791
00:27:58,926 --> 00:28:00,286
There's no such thing as a


792
00:28:00,286 --> 00:28:02,056
standalone System Extension.


793
00:28:03,586 --> 00:28:05,426
This is because users think in


794
00:28:05,426 --> 00:28:06,326
terms of apps.


795
00:28:06,806 --> 00:28:09,056
They purchase apps, install


796
00:28:09,056 --> 00:28:11,196
apps, and run apps.


797
00:28:12,116 --> 00:28:14,066
Your System Extension should be


798
00:28:14,066 --> 00:28:16,026
an implementation detail of your


799
00:28:16,026 --> 00:28:16,206
app.


800
00:28:17,566 --> 00:28:18,986
The app is how the user


801
00:28:19,616 --> 00:28:21,596
interacts with and controls your


802
00:28:21,596 --> 00:28:22,166
extension.


803
00:28:22,736 --> 00:28:25,986
Once you've packaged your System


804
00:28:25,986 --> 00:28:28,226
Extension into an app, you can


805
00:28:28,226 --> 00:28:29,666
distribute that app directly to


806
00:28:29,666 --> 00:28:32,816
your users using Developer ID or


807
00:28:32,816 --> 00:28:34,366
through the Mac App Store, which


808
00:28:34,366 --> 00:28:35,646
has never been possible with


809
00:28:35,646 --> 00:28:36,386
Kernel Extensions.


810
00:28:37,516 --> 00:28:41,256
[ Applause ]


811
00:28:41,756 --> 00:28:42,716
Because of the close


812
00:28:42,716 --> 00:28:44,266
relationship between your app


813
00:28:44,266 --> 00:28:46,556
and its extensions, your System


814
00:28:46,556 --> 00:28:48,646
Extension should be identifiable


815
00:28:48,646 --> 00:28:51,026
by the user as related to your


816
00:28:52,046 --> 00:28:52,116
app.


817
00:28:52,336 --> 00:28:52,956
You should use the


818
00:28:52,956 --> 00:28:55,476
CFBundleDisplayName key in the


819
00:28:55,476 --> 00:28:57,386
extension's info.plist to give


820
00:28:57,386 --> 00:28:59,456
it a good localized name and


821
00:28:59,456 --> 00:29:00,686
give it a custom icon that


822
00:29:00,686 --> 00:29:02,496
relates to your app's main icon.


823
00:29:03,246 --> 00:29:04,696
This way, if the extension is


824
00:29:04,696 --> 00:29:06,106
ever shown in the user


825
00:29:06,106 --> 00:29:08,156
interface, a user will recognize


826
00:29:08,156 --> 00:29:09,796
it as part of an app that they


827
00:29:09,796 --> 00:29:10,330
use.


828
00:29:13,096 --> 00:29:14,826
You should also include a usage


829
00:29:14,826 --> 00:29:16,466
description string in your


830
00:29:16,466 --> 00:29:18,926
extension's info.pList that


831
00:29:18,926 --> 00:29:20,536
explains simply what the


832
00:29:20,536 --> 00:29:22,956
extension is and does and why a


833
00:29:22,956 --> 00:29:23,866
user would run it.


834
00:29:24,626 --> 00:29:26,076
Think of this as similar to the


835
00:29:26,076 --> 00:29:27,516
usage stings required for


836
00:29:27,516 --> 00:29:31,816
calendar or camera access.


837
00:29:33,336 --> 00:29:35,896
For Driver Extensions, use the


838
00:29:35,896 --> 00:29:38,256
key OSBundleUsageDescription.


839
00:29:38,526 --> 00:29:39,716
And for other types of System


840
00:29:39,716 --> 00:29:41,616
Extensions, use the key


841
00:29:41,616 --> 00:29:43,356
NSSystemExtensionUsage


842
00:29:43,356 --> 00:29:43,896
Description.


843
00:29:45,056 --> 00:29:46,656
Remember to localize these and


844
00:29:46,656 --> 00:29:48,206
all other strings for all the


845
00:29:48,206 --> 00:29:49,846
languages your app supports.


846
00:29:50,416 --> 00:29:54,546
The System Extension itself is a


847
00:29:54,586 --> 00:29:56,466
separate sub-bundle of your app


848
00:29:56,466 --> 00:29:58,176
with its own executable and


849
00:29:58,176 --> 00:30:00,626
info.plist embedded within your


850
00:30:00,626 --> 00:30:00,906
application.


851
00:30:01,986 --> 00:30:03,436
Here's a peek inside a sample


852
00:30:03,436 --> 00:30:05,206
application showing a System


853
00:30:05,206 --> 00:30:06,906
Extension in its Contents


854
00:30:07,006 --> 00:30:08,676
Library System Extension's


855
00:30:08,746 --> 00:30:09,176
folder.


856
00:30:11,606 --> 00:30:14,066
Driver Extension bundles use the


857
00:30:14,066 --> 00:30:16,286
.dext filename suffix and the


858
00:30:16,286 --> 00:30:17,866
package type DEXT.


859
00:30:18,806 --> 00:30:21,066
They use OSBundle keys in their


860
00:30:21,066 --> 00:30:23,046
info.plist similarly to Kernel


861
00:30:23,046 --> 00:30:24,026
Extension bundles.


862
00:30:25,516 --> 00:30:27,036
Driver Extension bundles should


863
00:30:27,036 --> 00:30:30,016
be flat bundles with no contents


864
00:30:30,016 --> 00:30:32,756
folder, similar to iOS apps.


865
00:30:34,156 --> 00:30:35,976
System Extension bundles of


866
00:30:35,976 --> 00:30:38,186
other types use the .system


867
00:30:38,186 --> 00:30:40,216
extension filename suffix and


868
00:30:40,216 --> 00:30:43,576
the CFBundlePackageType SYSX,


869
00:30:44,386 --> 00:30:45,846
System X tension.


870
00:30:46,476 --> 00:30:50,496
In Xcode, your System Extension


871
00:30:50,496 --> 00:30:51,606
is a separate target.


872
00:30:52,206 --> 00:30:56,046
Xcode has templates for Network


873
00:30:56,046 --> 00:30:58,306
Extensions and DriverKit drivers


874
00:30:58,566 --> 00:30:59,806
built in.


875
00:31:01,986 --> 00:31:03,606
When you create such a target,


876
00:31:03,606 --> 00:31:05,026
Xcode will ask if you want to


877
00:31:05,026 --> 00:31:06,686
embed it in an application


878
00:31:06,686 --> 00:31:07,806
that's already part of your


879
00:31:07,806 --> 00:31:08,186
project.


880
00:31:08,806 --> 00:31:11,016
If you do, it will create a Copy


881
00:31:11,016 --> 00:31:13,056
Files phase that copies the


882
00:31:13,056 --> 00:31:14,706
extension build product into


883
00:31:14,706 --> 00:31:15,566
your application.


884
00:31:16,166 --> 00:31:20,946
Once you've built your System


885
00:31:20,946 --> 00:31:23,346
Extension, you sign it with the


886
00:31:23,346 --> 00:31:24,886
same certificate that you sign


887
00:31:24,886 --> 00:31:25,336
your app.


888
00:31:25,776 --> 00:31:27,486
There is no need for a special


889
00:31:27,486 --> 00:31:29,936
Kext certificate, Kext specific


890
00:31:29,936 --> 00:31:31,346
signing certificate, anymore.


891
00:31:32,516 --> 00:31:36,146
[ Applause ]


892
00:31:36,646 --> 00:31:39,056
Normally, the Team ID used to


893
00:31:39,056 --> 00:31:40,526
sign your System Extension and


894
00:31:40,526 --> 00:31:41,936
your main app must match.


895
00:31:42,266 --> 00:31:43,486
This is a security measure.


896
00:31:44,206 --> 00:31:45,976
However, you may be building an


897
00:31:45,976 --> 00:31:47,676
extension that's intended to be


898
00:31:47,676 --> 00:31:49,336
packaged in other developers'


899
00:31:49,336 --> 00:31:49,786
apps.


900
00:31:50,036 --> 00:31:52,026
For example, a Driver Extension


901
00:31:52,276 --> 00:31:54,596
for a common type of USB serial


902
00:31:54,596 --> 00:31:56,036
interface chip that's included


903
00:31:56,036 --> 00:31:56,956
in many products.


904
00:31:57,676 --> 00:31:59,206
If so, there is an entitlement


905
00:31:59,246 --> 00:32:00,356
you can use on the System


906
00:32:00,356 --> 00:32:02,166
Extension to allow it to be


907
00:32:02,166 --> 00:32:03,216
packaged in a different


908
00:32:03,276 --> 00:32:04,866
developer's app.


909
00:32:08,196 --> 00:32:09,436
If you sign your System


910
00:32:09,436 --> 00:32:11,546
Extension with Developer ID, it


911
00:32:11,546 --> 00:32:13,296
must be notarized before it will


912
00:32:13,296 --> 00:32:15,386
run on a user's system.


913
00:32:16,416 --> 00:32:17,316
For more information on


914
00:32:17,316 --> 00:32:19,236
notarization, please watch the


915
00:32:19,236 --> 00:32:21,986
session from last year or come


916
00:32:21,986 --> 00:32:23,606
to the Notarization Lab later


917
00:32:23,606 --> 00:32:24,296
this afternoon.


918
00:32:26,976 --> 00:32:29,136
Your System Extension uses


919
00:32:29,136 --> 00:32:31,296
entitlements to describe its


920
00:32:31,296 --> 00:32:32,846
capabilities to the operating


921
00:32:32,846 --> 00:32:35,026
system; what type of extension


922
00:32:35,026 --> 00:32:36,366
it is and what it can do.


923
00:32:37,236 --> 00:32:39,506
For example, DriverKit Drive--


924
00:32:39,506 --> 00:32:41,626
Extensions use the Transport and


925
00:32:41,626 --> 00:32:43,296
Family entitlements that Simon


926
00:32:43,296 --> 00:32:44,000
showed.


927
00:32:46,076 --> 00:32:47,536
Your app that contains System


928
00:32:47,536 --> 00:32:49,686
Extensions also should use the


929
00:32:49,686 --> 00:32:51,476
com-apple-developer-system


930
00:32:51,476 --> 00:32:53,256
extension-install entitlement.


931
00:32:55,256 --> 00:32:56,866
For more information on these


932
00:32:56,866 --> 00:32:58,706
entitlements and to request the


933
00:32:58,706 --> 00:33:00,146
use of them by your development


934
00:33:00,146 --> 00:33:03,596
team, visit developer.apple.com


935
00:33:03,596 --> 00:33:05,096
/system-extensions.


936
00:33:05,636 --> 00:33:09,106
In the Developer Seed of


937
00:33:09,106 --> 00:33:12,276
Catalina for local development,


938
00:33:12,926 --> 00:33:14,386
you can turn System Integrity


939
00:33:14,386 --> 00:33:16,346
Protection off to disable some


940
00:33:16,346 --> 00:33:17,766
of the checks for code signing


941
00:33:17,766 --> 00:33:19,386
and entitlements while you are


942
00:33:19,386 --> 00:33:19,796
testing.


943
00:33:21,046 --> 00:33:22,316
Please, remember to turn System


944
00:33:22,316 --> 00:33:23,836
Integrity Protection on again


945
00:33:23,836 --> 00:33:24,806
when you're finished testing.


946
00:33:25,446 --> 00:33:28,856
Now that you've built your app


947
00:33:29,216 --> 00:33:30,786
with the System Extension, how


948
00:33:31,556 --> 00:33:33,466
does the extension get installed


949
00:33:33,466 --> 00:33:35,066
on a user's system?


950
00:33:35,796 --> 00:33:38,096
There's no need for an installer


951
00:33:38,096 --> 00:33:38,836
or a package.


952
00:33:39,316 --> 00:33:41,236
Your System Extension stays in


953
00:33:41,476 --> 00:33:43,546
your app bundle.


954
00:33:43,676 --> 00:33:45,316
Your app uses the new System


955
00:33:45,316 --> 00:33:47,426
Extensions Framework and creates


956
00:33:47,426 --> 00:33:50,076
an activation request to request


957
00:33:50,076 --> 00:33:51,136
that the extension be made


958
00:33:51,136 --> 00:33:52,866
available for the system to use.


959
00:33:52,866 --> 00:33:55,206
A system administrator will


960
00:33:55,206 --> 00:33:58,586
approve this request.


961
00:33:59,026 --> 00:34:00,876
Most apps should probably create


962
00:34:00,876 --> 00:34:02,746
an activation request during app


963
00:34:02,746 --> 00:34:04,536
launch so the extension is made


964
00:34:04,536 --> 00:34:05,636
available right away.


965
00:34:06,306 --> 00:34:08,266
If your extension has previously


966
00:34:08,466 --> 00:34:10,716
been activated and approved, the


967
00:34:10,716 --> 00:34:12,206
activation request will return


968
00:34:12,206 --> 00:34:13,335
quickly with success.


969
00:34:14,235 --> 00:34:16,106
However, you may wish to


970
00:34:16,106 --> 00:34:17,746
activate your System Extensions


971
00:34:17,746 --> 00:34:18,706
at different points in your


972
00:34:18,706 --> 00:34:20,676
app's lifecycle such as after a


973
00:34:20,676 --> 00:34:22,346
user has agreed to a license


974
00:34:22,346 --> 00:34:24,166
agreement or made an in-app


975
00:34:24,266 --> 00:34:25,576
purchase if that's required for


976
00:34:25,576 --> 00:34:26,156
your extension.


977
00:34:28,956 --> 00:34:30,476
Once your extension has been


978
00:34:30,476 --> 00:34:32,306
activated, the system will


979
00:34:32,306 --> 00:34:34,366
manage its lifecycle starting it


980
00:34:34,436 --> 00:34:35,936
automatically when it is needed.


981
00:34:36,676 --> 00:34:38,376
For example, a Driver Extension


982
00:34:38,376 --> 00:34:40,005
will start when a matching


983
00:34:40,005 --> 00:34:41,366
hardware device is connected.


984
00:34:45,126 --> 00:34:47,116
To update your System Extension,


985
00:34:47,806 --> 00:34:49,166
update your app bundle.


986
00:34:50,206 --> 00:34:52,406
A user may install a new version


987
00:34:52,406 --> 00:34:53,496
that they download from your


988
00:34:53,496 --> 00:34:56,156
website, your auto-updater may


989
00:34:56,156 --> 00:34:57,616
update the app bundle in place,


990
00:34:58,156 --> 00:34:59,846
or if you release a new version


991
00:34:59,846 --> 00:35:01,156
on the app store it will be


992
00:35:01,156 --> 00:35:02,096
updated for the user.


993
00:35:02,716 --> 00:35:06,226
The next time your app runs and


994
00:35:06,226 --> 00:35:07,746
submits an activation request,


995
00:35:08,406 --> 00:35:09,766
the system will notice that the


996
00:35:09,766 --> 00:35:11,906
extension's version has changed.


997
00:35:12,336 --> 00:35:13,816
It will ask your activation


998
00:35:13,816 --> 00:35:15,826
request delegate to compare the


999
00:35:15,826 --> 00:35:17,686
version numbers following your


1000
00:35:17,686 --> 00:35:19,426
own version number rules.


1001
00:35:20,756 --> 00:35:22,146
If your delegate determines that


1002
00:35:22,146 --> 00:35:24,456
this is an upgrade, the system


1003
00:35:24,456 --> 00:35:25,936
will stop the old version of the


1004
00:35:25,936 --> 00:35:27,616
System Extension and start the


1005
00:35:27,616 --> 00:35:27,986
new one.


1006
00:35:28,616 --> 00:35:32,546
If a user wishes to uninstall


1007
00:35:32,546 --> 00:35:35,126
your application, when they move


1008
00:35:35,126 --> 00:35:36,716
it to the Trash, all of its


1009
00:35:36,716 --> 00:35:38,276
extensions will automatically be


1010
00:35:38,276 --> 00:35:39,606
deactivated, as well.


1011
00:35:40,686 --> 00:35:42,226
There is a deactivationRequest


1012
00:35:42,286 --> 00:35:44,766
API if you wish to use it, but


1013
00:35:44,766 --> 00:35:46,296
there's no need for a dedicated


1014
00:35:46,296 --> 00:35:47,086
uninstaller.


1015
00:35:53,536 --> 00:35:56,146
So, today we introduced System


1016
00:35:56,146 --> 00:35:58,276
Extensions, the replacement for


1017
00:35:58,276 --> 00:35:59,746
Kernel Extensions that lets your


1018
00:35:59,746 --> 00:36:02,246
apps extend the system in ways


1019
00:36:02,246 --> 00:36:04,426
that are more reliable, more


1020
00:36:04,426 --> 00:36:07,066
secure, and easier to develop


1021
00:36:07,066 --> 00:36:07,736
than ever before.


1022
00:36:09,256 --> 00:36:11,406
We saw how to use the DriverKit


1023
00:36:11,406 --> 00:36:14,256
SDK and frameworks, which are a


1024
00:36:14,256 --> 00:36:16,986
modernized update of IOKit to


1025
00:36:16,986 --> 00:36:17,796
build a driver.


1026
00:36:18,386 --> 00:36:21,306
And we saw how to write and then


1027
00:36:21,306 --> 00:36:23,696
debug an example USB driver all


1028
00:36:23,696 --> 00:36:24,456
on one machine.


1029
00:36:25,786 --> 00:36:27,156
Finally, we talked about how to


1030
00:36:27,156 --> 00:36:28,766
include System Extensions in


1031
00:36:28,766 --> 00:36:30,036
your apps.


1032
00:36:32,776 --> 00:36:34,626
If you have any questions, we


1033
00:36:34,626 --> 00:36:36,446
would love to answer them at the


1034
00:36:36,446 --> 00:36:37,726
Core OS Labs.


1035
00:36:37,946 --> 00:36:39,576
There's one later today and one


1036
00:36:39,576 --> 00:36:40,486
Thursday morning.


1037
00:36:41,946 --> 00:36:43,066
You may also wish to visit the


1038
00:36:43,066 --> 00:36:45,466
Security Lab happening now or on


1039
00:36:45,466 --> 00:36:46,796
Thursday afternoon or the


1040
00:36:46,796 --> 00:36:48,146
Networking Lab on Friday


1041
00:36:48,146 --> 00:36:48,456
morning.


1042
00:36:48,996 --> 00:36:51,726
Thanks, very much, and enjoy the


1043
00:36:51,726 --> 00:36:52,756
rest of WWDC.


1044
00:36:53,516 --> 00:36:58,506
[ Applause ]

