1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:09,516 --> 00:00:11,576
[ Applause ]


3
00:00:12,076 --> 00:00:13,866
>> Thanks, everyone.


4
00:00:14,946 --> 00:00:15,966
Hi, how are you all doing?


5
00:00:16,046 --> 00:00:17,246
Welcome to WWDC.


6
00:00:17,436 --> 00:00:18,936
My name is Phillip Azar and I'm


7
00:00:18,936 --> 00:00:20,206
proud and happy to be able to


8
00:00:20,206 --> 00:00:21,606
share with you our talk on


9
00:00:21,606 --> 00:00:22,726
Improving Battery Life and


10
00:00:22,726 --> 00:00:25,466
Performance today.


11
00:00:25,656 --> 00:00:27,026
Your apps are the backbone of


12
00:00:27,026 --> 00:00:28,166
our software experience.


13
00:00:28,496 --> 00:00:29,826
They enable our users to do so


14
00:00:29,826 --> 00:00:31,346
many things and engage in so


15
00:00:31,346 --> 00:00:32,676
many experiences that without


16
00:00:32,676 --> 00:00:33,916
your apps, they could never do.


17
00:00:34,706 --> 00:00:36,996
And so you can imagine when your


18
00:00:36,996 --> 00:00:38,376
apps don't give good battery


19
00:00:38,376 --> 00:00:39,446
life and don't give good


20
00:00:39,446 --> 00:00:40,606
performance, this really


21
00:00:40,606 --> 00:00:41,736
disappoints your users.


22
00:00:42,086 --> 00:00:43,506
And so today we want to talk


23
00:00:43,506 --> 00:00:44,356
about a few things.


24
00:00:44,986 --> 00:00:46,426
We want to go over a set of


25
00:00:46,426 --> 00:00:48,286
tools that you can use that are


26
00:00:48,286 --> 00:00:50,136
both new and old to be able to


27
00:00:50,136 --> 00:00:51,596
optimize your application for


28
00:00:51,596 --> 00:00:53,306
battery life and performance.


29
00:00:53,826 --> 00:00:55,296
We want to go over a set of


30
00:00:55,296 --> 00:00:56,816
metrics that you can collect


31
00:00:57,066 --> 00:00:59,016
using those tools to be able to


32
00:00:59,016 --> 00:01:00,916
understand and quantify your


33
00:01:00,916 --> 00:01:02,256
application's impact on battery


34
00:01:02,256 --> 00:01:03,146
life and performance.


35
00:01:03,756 --> 00:01:04,775
And then I'm going to hand it


36
00:01:04,775 --> 00:01:06,056
over to my colleagues, who are


37
00:01:06,056 --> 00:01:07,296
going to go into these tools in


38
00:01:07,296 --> 00:01:08,916
more depth and go through some


39
00:01:08,916 --> 00:01:10,396
demos with you and show you how


40
00:01:10,396 --> 00:01:11,826
you can use these tools in your


41
00:01:11,826 --> 00:01:13,666
application to improve battery


42
00:01:13,666 --> 00:01:14,546
life and performance.


43
00:01:14,766 --> 00:01:15,856
And then I'll come back and


44
00:01:15,856 --> 00:01:16,496
we'll wrap it up.


45
00:01:16,986 --> 00:01:19,566
So, let's get started by talking


46
00:01:19,566 --> 00:01:20,336
about some tools.


47
00:01:20,846 --> 00:01:22,876
And in order to get started


48
00:01:22,876 --> 00:01:23,866
talking about tools, we need to


49
00:01:23,866 --> 00:01:24,776
talk about the development


50
00:01:24,776 --> 00:01:26,146
process and get all familiar


51
00:01:26,146 --> 00:01:27,196
with it.


52
00:01:27,366 --> 00:01:28,666
Development comes in phases.


53
00:01:29,106 --> 00:01:30,396
We've set it up into three


54
00:01:30,396 --> 00:01:31,126
different phases.


55
00:01:31,456 --> 00:01:32,866
Development and testing is the


56
00:01:32,866 --> 00:01:33,516
first phase.


57
00:01:33,946 --> 00:01:35,136
And at this stage, we're


58
00:01:35,136 --> 00:01:36,666
ideating and creating, and it's


59
00:01:36,666 --> 00:01:38,056
a very iterative process.


60
00:01:38,486 --> 00:01:39,716
We're either at our desks or


61
00:01:39,716 --> 00:01:40,846
maybe in the park, and we're


62
00:01:40,846 --> 00:01:41,846
really trying to understand


63
00:01:42,416 --> 00:01:43,376
what's going to make our app


64
00:01:43,376 --> 00:01:43,616
great.


65
00:01:45,066 --> 00:01:46,876
The next phase is called beta.


66
00:01:47,436 --> 00:01:48,546
After we've solidified the


67
00:01:48,546 --> 00:01:49,846
features in our application and


68
00:01:49,846 --> 00:01:52,876
we're ready for a test run, we


69
00:01:52,876 --> 00:01:54,556
give it to a few people, our


70
00:01:54,556 --> 00:01:56,146
beta users, and we try to get


71
00:01:56,146 --> 00:01:56,516
feedback.


72
00:01:56,986 --> 00:01:59,286
And then finally, when we're


73
00:01:59,286 --> 00:02:00,546
really proud of our application,


74
00:02:00,546 --> 00:02:01,396
when we've collected all the


75
00:02:01,396 --> 00:02:02,696
feedback, we're ready for


76
00:02:02,696 --> 00:02:03,206
primetime.


77
00:02:03,766 --> 00:02:04,686
It's public release.


78
00:02:05,286 --> 00:02:06,186
And this is when it's on the


79
00:02:06,186 --> 00:02:07,226
AppStore and available to


80
00:02:07,226 --> 00:02:08,416
millions of customers around the


81
00:02:08,416 --> 00:02:08,606
world.


82
00:02:09,996 --> 00:02:10,705
For battery life and


83
00:02:10,705 --> 00:02:12,886
performance, every step is


84
00:02:12,886 --> 00:02:13,976
critically important.


85
00:02:14,846 --> 00:02:16,146
We need to optimize at every


86
00:02:16,146 --> 00:02:17,546
step of the way to make sure


87
00:02:17,546 --> 00:02:18,756
that we're fixing bugs and


88
00:02:18,756 --> 00:02:20,186
making our experience as good as


89
00:02:20,186 --> 00:02:21,286
possible for our customers.


90
00:02:22,516 --> 00:02:24,246
And so with that in mind, before


91
00:02:24,246 --> 00:02:26,356
iOS 13 and Xcode 11, we offered


92
00:02:26,356 --> 00:02:27,456
a great set of tools for you to


93
00:02:27,456 --> 00:02:28,966
understand the impact of your


94
00:02:28,966 --> 00:02:30,266
application's battery life and


95
00:02:30,266 --> 00:02:30,806
performance.


96
00:02:31,876 --> 00:02:33,246
During development and testing,


97
00:02:33,246 --> 00:02:34,506
we have Xcode and all the tools


98
00:02:34,506 --> 00:02:35,436
it contains within it.


99
00:02:35,686 --> 00:02:36,956
Things like Instruments, the


100
00:02:36,956 --> 00:02:38,446
Energy Gauges, and Profiling


101
00:02:38,446 --> 00:02:38,846
tools.


102
00:02:40,026 --> 00:02:41,726
And then in beta, you can


103
00:02:41,726 --> 00:02:43,206
collect traces directly on beta


104
00:02:43,206 --> 00:02:44,496
devices using the developer


105
00:02:44,496 --> 00:02:45,906
settings and open those up in


106
00:02:45,906 --> 00:02:46,476
Instruments.


107
00:02:46,846 --> 00:02:47,616
And these are great for


108
00:02:47,616 --> 00:02:48,786
understanding problems that may


109
00:02:48,786 --> 00:02:50,816
not occur in your development


110
00:02:50,816 --> 00:02:52,096
environment but occur in the


111
00:02:52,096 --> 00:02:53,786
field such as when you don't


112
00:02:53,786 --> 00:02:54,546
have good cell reception.


113
00:02:55,006 --> 00:02:57,336
And then finally, the Xcode


114
00:02:57,336 --> 00:02:58,716
organizer gives you access to a


115
00:02:58,716 --> 00:03:00,226
powerful set of logs that you


116
00:03:00,226 --> 00:03:01,856
can see from your public release


117
00:03:01,966 --> 00:03:03,596
such as crashes and CPU energy


118
00:03:03,596 --> 00:03:04,066
reports.


119
00:03:04,406 --> 00:03:05,426
And these help you understand


120
00:03:05,426 --> 00:03:06,786
problems that are maybe specific


121
00:03:06,786 --> 00:03:08,746
to certain regions or specific


122
00:03:08,746 --> 00:03:09,856
to certain customers that may


123
00:03:09,856 --> 00:03:11,016
not have the same conditions as


124
00:03:11,016 --> 00:03:11,186
you.


125
00:03:11,666 --> 00:03:14,756
And so with these tools, we


126
00:03:14,946 --> 00:03:16,026
thought to ourselves long and


127
00:03:16,026 --> 00:03:17,156
hard over the last few years and


128
00:03:17,436 --> 00:03:18,876
wondered there are probably some


129
00:03:18,876 --> 00:03:19,656
gaps we can fill.


130
00:03:20,396 --> 00:03:21,936
And we spoke to many of you,


131
00:03:22,416 --> 00:03:23,606
both indirectly and directly,


132
00:03:23,926 --> 00:03:24,986
and the feedback that we got


133
00:03:24,986 --> 00:03:26,896
that was most of the gaps are in


134
00:03:26,896 --> 00:03:27,426
metrics.


135
00:03:27,926 --> 00:03:29,576
How do we quantify our


136
00:03:29,856 --> 00:03:31,056
application's battery life and


137
00:03:31,056 --> 00:03:31,636
performance?


138
00:03:31,956 --> 00:03:32,976
How do we make a decision about


139
00:03:32,976 --> 00:03:34,466
feature A versus feature B?


140
00:03:35,516 --> 00:03:37,426
Well today, as a part of Xcode


141
00:03:37,426 --> 00:03:39,736
11 and iOS 13, I'm super happy


142
00:03:39,736 --> 00:03:41,296
to announce that we think we've


143
00:03:41,296 --> 00:03:42,446
solved that gap and we've


144
00:03:42,446 --> 00:03:44,036
bridged it with three new tools


145
00:03:44,036 --> 00:03:45,196
that you can start using today,


146
00:03:46,536 --> 00:03:48,116
starting with XCTest Metrics.


147
00:03:48,576 --> 00:03:49,956
This is the first new tool that


148
00:03:49,956 --> 00:03:51,786
we've shipped with Xcode 11 and


149
00:03:51,786 --> 00:03:52,816
this is going to allow you to


150
00:03:52,816 --> 00:03:54,086
collect directly within your


151
00:03:54,086 --> 00:03:56,406
XCTest performance and battery


152
00:03:56,406 --> 00:03:58,166
life metrics of measure blocks.


153
00:03:58,646 --> 00:03:59,716
This is going to give you some


154
00:03:59,716 --> 00:04:01,376
critical advantage when you're


155
00:04:01,376 --> 00:04:02,686
running XCTest and trying to


156
00:04:02,686 --> 00:04:04,416
understand at a very early stage


157
00:04:04,776 --> 00:04:06,306
what is the impact of a certain


158
00:04:06,306 --> 00:04:06,576
feature.


159
00:04:07,796 --> 00:04:10,026
The next is MetricKit, and this


160
00:04:10,026 --> 00:04:11,266
is a powerful new framework that


161
00:04:11,266 --> 00:04:12,766
we've built specifically for


162
00:04:12,766 --> 00:04:14,076
battery and performance metric


163
00:04:14,076 --> 00:04:14,496
collection.


164
00:04:14,946 --> 00:04:15,896
And this is going to give you


165
00:04:15,896 --> 00:04:17,036
metrics directly in your


166
00:04:17,036 --> 00:04:18,426
application and help you


167
00:04:18,426 --> 00:04:20,016
understand from all different


168
00:04:20,016 --> 00:04:21,466
users how your application is


169
00:04:21,466 --> 00:04:22,366
doing in the field.


170
00:04:23,516 --> 00:04:25,126
And then finally, we've beefed


171
00:04:25,126 --> 00:04:27,626
up the Xcode Organizer with


172
00:04:27,626 --> 00:04:28,876
Xcode Metrics Organizer.


173
00:04:29,126 --> 00:04:30,346
And this is going to be a


174
00:04:30,346 --> 00:04:31,966
high-level aggregated set of


175
00:04:31,966 --> 00:04:33,176
metrics that you're going to be


176
00:04:33,176 --> 00:04:34,876
able to look at directly in the


177
00:04:34,876 --> 00:04:36,496
Xcode Organizer without changing


178
00:04:36,496 --> 00:04:37,026
any code.


179
00:04:37,026 --> 00:04:38,426
And this is going to give you a


180
00:04:38,426 --> 00:04:39,896
great high-level overview of how


181
00:04:39,896 --> 00:04:41,006
your application is doing across


182
00:04:41,006 --> 00:04:42,116
the world for all your


183
00:04:42,116 --> 00:04:42,636
customers.


184
00:04:43,126 --> 00:04:44,966
And so looking back at this


185
00:04:44,966 --> 00:04:46,276
graph we just talked about, you


186
00:04:46,276 --> 00:04:47,606
can imagine all these tools fit


187
00:04:47,606 --> 00:04:48,986
really well in the development


188
00:04:48,986 --> 00:04:50,906
process, starting with XCTest


189
00:04:50,906 --> 00:04:52,086
Metrics during development and


190
00:04:52,126 --> 00:04:52,346
testing.


191
00:04:53,276 --> 00:04:54,926
Then, MetricKit, as you might


192
00:04:54,926 --> 00:04:56,576
imagine, falls really well into


193
00:04:56,576 --> 00:04:57,956
beta and public release when you


194
00:04:57,956 --> 00:04:58,906
may not have access to the


195
00:04:58,906 --> 00:04:59,906
devices that you're interested


196
00:04:59,906 --> 00:05:01,386
in collecting metrics about.


197
00:05:01,896 --> 00:05:04,086
And then finally, the Xcode


198
00:05:04,086 --> 00:05:06,056
Metrics Organizer beefs up your


199
00:05:06,056 --> 00:05:06,936
knowledge about the public


200
00:05:06,936 --> 00:05:08,266
release and helps you understand


201
00:05:08,266 --> 00:05:10,826
problems from primetime users.


202
00:05:11,206 --> 00:05:13,706
And so when you put these all


203
00:05:13,706 --> 00:05:14,776
together, we see that we have


204
00:05:14,816 --> 00:05:17,176
more metrics to quantify battery


205
00:05:17,176 --> 00:05:18,726
life and performance at every


206
00:05:18,726 --> 00:05:19,686
stage in development.


207
00:05:19,976 --> 00:05:21,096
And we think this is awesome.


208
00:05:21,276 --> 00:05:24,476
So, we've talked about these


209
00:05:24,476 --> 00:05:26,106
tools then a little bit and my


210
00:05:26,106 --> 00:05:27,076
colleagues will go into depth


211
00:05:27,076 --> 00:05:28,166
later about each of them.


212
00:05:28,816 --> 00:05:29,656
But right now I want to talk


213
00:05:29,656 --> 00:05:30,526
about the metrics that they


214
00:05:30,526 --> 00:05:30,916
provide.


215
00:05:31,726 --> 00:05:32,766
Because without these metrics,


216
00:05:32,766 --> 00:05:33,866
we wouldn't be able to quantify


217
00:05:33,866 --> 00:05:34,426
our impact.


218
00:05:35,016 --> 00:05:36,586
So, let's go through them now.


219
00:05:37,556 --> 00:05:38,776
This year we're providing two


220
00:05:38,776 --> 00:05:41,116
sets of metrics - battery and


221
00:05:41,116 --> 00:05:41,716
performance.


222
00:05:42,816 --> 00:05:44,866
Who would've guessed?


223
00:05:45,046 --> 00:05:45,766
Starting with the battery


224
00:05:45,766 --> 00:05:47,036
metrics, we're providing a


225
00:05:47,036 --> 00:05:48,196
really great set this year that


226
00:05:48,196 --> 00:05:49,266
are going to help you quantify


227
00:05:49,266 --> 00:05:50,556
your impact on battery life.


228
00:05:51,836 --> 00:05:55,656
Processing, location, display,


229
00:05:56,476 --> 00:05:59,016
networking, Bluetooth and


230
00:05:59,016 --> 00:06:01,366
accessory metrics, multimedia


231
00:06:01,366 --> 00:06:03,366
metrics, and camera metrics.


232
00:06:04,386 --> 00:06:05,646
This is a huge set of metrics


233
00:06:05,646 --> 00:06:06,956
that are really powerful but I


234
00:06:06,956 --> 00:06:08,076
want to go through a certain


235
00:06:08,346 --> 00:06:09,636
subset of these that we think


236
00:06:09,636 --> 00:06:10,786
are really important for


237
00:06:10,786 --> 00:06:11,146
everyone.


238
00:06:12,136 --> 00:06:13,056
Starting with the processing


239
00:06:13,056 --> 00:06:13,516
metrics.


240
00:06:14,906 --> 00:06:15,956
Processing metrics, as you might


241
00:06:15,956 --> 00:06:17,476
imagine, are things like CPU and


242
00:06:17,476 --> 00:06:19,326
GPU time, and we want you to use


243
00:06:19,326 --> 00:06:21,056
these metrics to quantify and


244
00:06:21,056 --> 00:06:22,236
understand the workload of your


245
00:06:22,236 --> 00:06:22,746
application.


246
00:06:23,136 --> 00:06:24,716
So for example, you can do


247
00:06:24,716 --> 00:06:26,706
things like find CPU spinners in


248
00:06:26,706 --> 00:06:27,796
areas where you might not expect


249
00:06:27,796 --> 00:06:28,166
them to be.


250
00:06:28,916 --> 00:06:30,446
Additionally, you can use, you


251
00:06:30,446 --> 00:06:31,706
can find unexpected rendering in


252
00:06:31,706 --> 00:06:32,616
your application using these


253
00:06:32,616 --> 00:06:33,106
metrics.


254
00:06:34,436 --> 00:06:35,456
And critically, we want you to


255
00:06:35,456 --> 00:06:37,006
use the processing metrics to


256
00:06:37,006 --> 00:06:38,106
compare the algorithmic


257
00:06:38,106 --> 00:06:39,276
efficiency of your features,


258
00:06:39,506 --> 00:06:40,606
just like we discussed before.


259
00:06:40,606 --> 00:06:41,626
If you have feature A and


260
00:06:41,626 --> 00:06:43,066
feature B, you can use these


261
00:06:43,066 --> 00:06:44,146
metrics to determine which one


262
00:06:44,146 --> 00:06:45,476
is better for battery life.


263
00:06:45,916 --> 00:06:48,636
Next up we have the location


264
00:06:48,636 --> 00:06:49,116
metrics.


265
00:06:49,376 --> 00:06:50,666
And these are going to be


266
00:06:50,666 --> 00:06:51,756
metrics that are going to help


267
00:06:51,756 --> 00:06:52,816
you understand and quantify your


268
00:06:52,816 --> 00:06:54,236
location usage, such as your


269
00:06:54,236 --> 00:06:55,896
cumulative usage, different


270
00:06:55,896 --> 00:06:57,356
accuracy buckets, and your


271
00:06:57,356 --> 00:06:58,476
background location usage.


272
00:06:58,746 --> 00:07:01,636
Use these metrics to understand


273
00:07:01,636 --> 00:07:02,816
your location usage, because


274
00:07:02,816 --> 00:07:04,126
it's a common pitfall when it


275
00:07:04,126 --> 00:07:04,886
comes to battery life.


276
00:07:05,436 --> 00:07:06,936
For example, you might find


277
00:07:06,936 --> 00:07:08,116
cases where you leave location


278
00:07:08,116 --> 00:07:09,206
running when you don't expect it


279
00:07:09,206 --> 00:07:09,606
to be running.


280
00:07:10,266 --> 00:07:12,376
Or you may use an accuracy


281
00:07:12,376 --> 00:07:13,906
bucket that's too powerful for


282
00:07:13,906 --> 00:07:14,716
the use case that you've


283
00:07:15,136 --> 00:07:16,516
implemented location for.


284
00:07:17,086 --> 00:07:18,236
So, these measures are going to


285
00:07:18,236 --> 00:07:19,596
help you understand and optimize


286
00:07:19,596 --> 00:07:20,326
those scenarios.


287
00:07:20,786 --> 00:07:24,166
Next, we're providing display


288
00:07:24,166 --> 00:07:24,636
metrics.


289
00:07:25,316 --> 00:07:26,326
And this year we're giving you a


290
00:07:26,326 --> 00:07:27,516
variety of display metrics but I


291
00:07:27,516 --> 00:07:28,226
want to talk about one in


292
00:07:28,226 --> 00:07:30,026
particular called average pixel


293
00:07:30,026 --> 00:07:30,506
luminance.


294
00:07:31,856 --> 00:07:33,696
On your OLED devices such as the


295
00:07:33,696 --> 00:07:35,856
iPhone X and XS, the color of


296
00:07:35,856 --> 00:07:37,376
your UI in your application has


297
00:07:37,376 --> 00:07:38,836
a direct impact on the amount of


298
00:07:38,836 --> 00:07:40,316
energy that you consume on the


299
00:07:40,316 --> 00:07:40,706
display.


300
00:07:40,706 --> 00:07:43,306
And we represent this through a


301
00:07:43,306 --> 00:07:44,416
metric called average pixel


302
00:07:44,416 --> 00:07:45,496
luminance or APL.


303
00:07:46,096 --> 00:07:48,936
And in a nutshell, the lighter


304
00:07:48,936 --> 00:07:50,446
colors that you use in your UI,


305
00:07:51,076 --> 00:07:52,196
the more energy you'll consume


306
00:07:52,196 --> 00:07:53,316
on OLED devices, and this is


307
00:07:53,316 --> 00:07:54,476
what we call a higher APL.


308
00:07:55,546 --> 00:07:56,886
And the darker colors you use in


309
00:07:56,886 --> 00:07:59,296
your UI, this is what you call a


310
00:07:59,336 --> 00:08:01,046
lower APL, and this will consume


311
00:08:01,046 --> 00:08:03,336
less energy, so keep an eye on


312
00:08:03,336 --> 00:08:04,246
average pixel luminance this


313
00:08:04,246 --> 00:08:04,386
year.


314
00:08:04,896 --> 00:08:06,796
Last but not least, we have the


315
00:08:06,796 --> 00:08:07,676
networking metrics.


316
00:08:08,476 --> 00:08:09,766
And as you might already


317
00:08:09,766 --> 00:08:11,146
imagine, these are going to be


318
00:08:11,146 --> 00:08:12,676
metrics such as upload and


319
00:08:12,676 --> 00:08:14,146
download bytes over cellular and


320
00:08:14,146 --> 00:08:15,826
wifi and connectivity metrics.


321
00:08:16,346 --> 00:08:18,456
We want you to optimize


322
00:08:18,456 --> 00:08:19,466
networking usage whenever


323
00:08:19,466 --> 00:08:20,366
possible because it is a


324
00:08:20,366 --> 00:08:21,336
high-energy subsystem.


325
00:08:22,246 --> 00:08:23,556
So do things with these metrics


326
00:08:23,656 --> 00:08:25,106
such as validating your expected


327
00:08:25,106 --> 00:08:26,186
upload and download counts.


328
00:08:26,996 --> 00:08:27,796
Maybe you have an upload that


329
00:08:27,796 --> 00:08:29,106
should've occurred at a later


330
00:08:29,106 --> 00:08:29,406
time.


331
00:08:29,756 --> 00:08:30,556
You can use these metrics to


332
00:08:30,556 --> 00:08:31,156
figure that out.


333
00:08:31,576 --> 00:08:33,976
And more importantly, we want


334
00:08:33,976 --> 00:08:34,946
you to understand the impact of


335
00:08:34,946 --> 00:08:36,316
connectivity on your network


336
00:08:36,316 --> 00:08:36,876
transfers.


337
00:08:37,346 --> 00:08:38,336
It plays a huge role in the


338
00:08:38,336 --> 00:08:39,166
amount of energy that you


339
00:08:39,166 --> 00:08:40,556
consume when doing networking.


340
00:08:40,556 --> 00:08:41,996
So, these metrics will help you


341
00:08:41,996 --> 00:08:43,556
understand if you're staying in


342
00:08:43,556 --> 00:08:45,016
poor connectivity condition for


343
00:08:45,016 --> 00:08:45,996
long periods of time.


344
00:08:46,386 --> 00:08:49,146
And those are the battery


345
00:08:49,146 --> 00:08:49,616
metrics.


346
00:08:50,156 --> 00:08:51,436
We think these are a great set


347
00:08:51,646 --> 00:08:52,496
of metrics that are going to


348
00:08:52,496 --> 00:08:54,046
help you quantify the impact of


349
00:08:54,046 --> 00:08:55,156
your application on battery


350
00:08:55,156 --> 00:08:55,476
life.


351
00:08:55,986 --> 00:08:57,946
Let's move onto the performance


352
00:08:57,946 --> 00:08:59,786
metrics and this year we're


353
00:08:59,786 --> 00:09:02,646
providing hangs, disk metrics,


354
00:09:03,736 --> 00:09:05,026
application launch metrics,


355
00:09:06,036 --> 00:09:08,406
memory metrics, and custom


356
00:09:08,406 --> 00:09:09,096
interval metrics.


357
00:09:10,226 --> 00:09:11,406
And as with the battery metrics,


358
00:09:11,406 --> 00:09:12,666
I want to focus on a subset of


359
00:09:12,666 --> 00:09:13,756
these that are going to be


360
00:09:13,756 --> 00:09:14,956
really important for all of us


361
00:09:14,956 --> 00:09:17,046
here, starting with the hang


362
00:09:17,046 --> 00:09:17,536
metrics.


363
00:09:18,036 --> 00:09:21,066
Hang metrics this year are going


364
00:09:21,066 --> 00:09:22,376
to be a histogram of the amount


365
00:09:22,376 --> 00:09:23,546
of time your application spends


366
00:09:23,586 --> 00:09:24,906
unresponsive to user input.


367
00:09:25,936 --> 00:09:27,906
And this is a huge user impact.


368
00:09:28,396 --> 00:09:29,576
You can imagine if your user is


369
00:09:29,576 --> 00:09:30,596
user your application and


370
00:09:30,596 --> 00:09:31,816
suddenly it stops working,


371
00:09:32,186 --> 00:09:32,766
that's not good.


372
00:09:33,996 --> 00:09:36,206
So, use these metrics to work,


373
00:09:36,206 --> 00:09:37,496
to understand where you can move


374
00:09:37,496 --> 00:09:38,376
work off the main thread of


375
00:09:38,376 --> 00:09:40,466
possible and utilize things like


376
00:09:40,466 --> 00:09:41,976
dispatches and asynchronous cues


377
00:09:42,286 --> 00:09:43,366
to reduce your hang rates.


378
00:09:43,806 --> 00:09:46,486
Next we have the disk metrics.


379
00:09:47,196 --> 00:09:48,486
And this year we're going to be


380
00:09:48,486 --> 00:09:50,306
focusing on disc logical writes.


381
00:09:50,836 --> 00:09:52,956
And we want you to quantify disk


382
00:09:52,956 --> 00:09:54,546
usage whenever possible because


383
00:09:54,546 --> 00:09:55,556
disk usage, as with all


384
00:09:55,556 --> 00:09:57,316
subsystems, is a resource that


385
00:09:57,316 --> 00:09:58,346
you should only use when you


386
00:09:58,346 --> 00:09:58,936
really need to.


387
00:09:59,776 --> 00:10:01,286
So, use these metrics to verify


388
00:10:01,286 --> 00:10:02,236
if you have instances of


389
00:10:02,236 --> 00:10:04,076
unexpected disk writes and if


390
00:10:04,076 --> 00:10:05,516
you're employing any coalescing


391
00:10:05,516 --> 00:10:06,706
strategies for your disk writes,


392
00:10:06,706 --> 00:10:07,846
you can use these disk metrics


393
00:10:07,846 --> 00:10:08,986
to verify those as well.


394
00:10:11,016 --> 00:10:12,366
Next are the application launch


395
00:10:12,366 --> 00:10:12,806
metrics.


396
00:10:13,826 --> 00:10:15,146
And this is super great, because


397
00:10:15,146 --> 00:10:16,596
this year we're providing launch


398
00:10:16,666 --> 00:10:18,496
and resume time histograms to


399
00:10:18,496 --> 00:10:19,556
help you understand your launch


400
00:10:19,556 --> 00:10:20,576
and resume times of your


401
00:10:20,576 --> 00:10:21,056
application.


402
00:10:22,656 --> 00:10:24,016
We want you to quantify the


403
00:10:24,016 --> 00:10:26,276
impact on performance that


404
00:10:26,276 --> 00:10:27,276
launch and resume have using


405
00:10:27,276 --> 00:10:27,896
these metrics.


406
00:10:28,436 --> 00:10:31,146
And we want you to understand


407
00:10:31,146 --> 00:10:31,976
the impact of the launch


408
00:10:31,976 --> 00:10:33,696
activities, so when you do


409
00:10:33,696 --> 00:10:34,916
things before your application


410
00:10:34,916 --> 00:10:35,956
launches such as a database


411
00:10:35,956 --> 00:10:37,546
update, this can directly impact


412
00:10:37,546 --> 00:10:38,556
your launch and resume times.


413
00:10:39,016 --> 00:10:39,996
These metrics will help you see


414
00:10:39,996 --> 00:10:40,616
that in real time.


415
00:10:41,156 --> 00:10:44,086
And we also want you to see the


416
00:10:44,086 --> 00:10:45,396
difference between launch and


417
00:10:45,396 --> 00:10:47,026
resume, because they're two very


418
00:10:47,026 --> 00:10:47,866
different paths.


419
00:10:48,746 --> 00:10:49,866
And for more information on


420
00:10:49,866 --> 00:10:51,336
that, and how to optimize App


421
00:10:51,336 --> 00:10:52,816
Lauch, I recommend that you go


422
00:10:52,816 --> 00:10:53,846
see the talk tomorrow on


423
00:10:53,846 --> 00:10:55,536
Optimizing App Launch at 4:20


424
00:10:55,536 --> 00:10:55,776
pm.


425
00:10:56,286 --> 00:10:58,886
Last but not least, we have the


426
00:10:58,886 --> 00:10:59,646
memory metrics.


427
00:10:59,746 --> 00:11:01,586
And for memory this year, we're


428
00:11:01,586 --> 00:11:02,626
going to be providing things


429
00:11:02,626 --> 00:11:04,506
like average suspended memory


430
00:11:05,056 --> 00:11:06,966
and peak memory.


431
00:11:06,966 --> 00:11:08,076
Memory management can really


432
00:11:08,076 --> 00:11:10,226
impact launch times, and so we


433
00:11:10,226 --> 00:11:11,256
want you to use these metrics to


434
00:11:11,256 --> 00:11:12,356
keep an eye and keep tabs on


435
00:11:12,356 --> 00:11:13,966
your memory usage, which is a


436
00:11:13,966 --> 00:11:15,416
critical metric for performance.


437
00:11:15,906 --> 00:11:18,426
Use these metrics to understand


438
00:11:18,426 --> 00:11:19,746
your memory usage and if you


439
00:11:19,746 --> 00:11:20,846
have spikes of peak memory that


440
00:11:20,846 --> 00:11:21,636
are way higher than your


441
00:11:21,636 --> 00:11:23,076
expectation, this could be


442
00:11:23,076 --> 00:11:24,846
indicative of a problem such a


443
00:11:24,846 --> 00:11:26,086
hard-to-reproduce memory leak.


444
00:11:27,606 --> 00:11:28,766
If you focus on reducing your


445
00:11:28,766 --> 00:11:30,156
average memory on suspend, which


446
00:11:30,156 --> 00:11:30,936
you can quantify with these


447
00:11:30,936 --> 00:11:32,356
metrics, you'll also be able to


448
00:11:32,356 --> 00:11:33,546
reduce your launch times and


449
00:11:33,546 --> 00:11:34,406
your susceptibility to


450
00:11:34,406 --> 00:11:35,306
background termination.


451
00:11:35,856 --> 00:11:38,466
And so those are the performance


452
00:11:38,466 --> 00:11:41,106
metrics or subset of them, and


453
00:11:41,276 --> 00:11:42,016
we think these are going to be


454
00:11:42,016 --> 00:11:42,926
really key I helping you


455
00:11:42,926 --> 00:11:44,426
understand your performance both


456
00:11:44,426 --> 00:11:45,336
on and off device.


457
00:11:45,856 --> 00:11:49,706
And so to recap, we talked about


458
00:11:49,706 --> 00:11:50,876
the tools that you had before


459
00:11:50,876 --> 00:11:52,786
Xcode 11 and iOS 13 to


460
00:11:52,786 --> 00:11:54,246
understand and quantify power


461
00:11:54,246 --> 00:11:54,846
and performance.


462
00:11:56,016 --> 00:11:57,026
Then we talked about the new set


463
00:11:57,026 --> 00:11:58,056
of tools that we're offering you


464
00:11:58,056 --> 00:11:59,376
this year to be able to take


465
00:11:59,376 --> 00:12:00,626
that quantification one step


466
00:12:00,626 --> 00:12:02,236
further and help you optimize


467
00:12:02,236 --> 00:12:02,886
your application.


468
00:12:03,786 --> 00:12:05,016
And these great set of metrics


469
00:12:05,016 --> 00:12:06,326
that they provide that are going


470
00:12:06,326 --> 00:12:07,506
to really help you take your app


471
00:12:07,506 --> 00:12:08,246
to the next level.


472
00:12:08,806 --> 00:12:09,876
And so without further ado, I


473
00:12:09,876 --> 00:12:10,726
want to hand it off to my


474
00:12:10,726 --> 00:12:12,056
colleagues who are going to go


475
00:12:12,056 --> 00:12:13,166
into some deep dives with each


476
00:12:13,166 --> 00:12:14,226
of the tools that we discussed,


477
00:12:14,756 --> 00:12:16,046
starting with Sastry, who's


478
00:12:16,046 --> 00:12:16,866
going to talk to you about


479
00:12:16,866 --> 00:12:18,146
measuring app impact during


480
00:12:18,146 --> 00:12:19,466
development and testing with


481
00:12:19,466 --> 00:12:20,356
XCTest Metrics.


482
00:12:20,856 --> 00:12:21,246
Sastry?


483
00:12:23,516 --> 00:12:26,500
[ Applause ]


484
00:12:29,176 --> 00:12:30,126
>> Thank you, Phil.


485
00:12:30,926 --> 00:12:31,566
Hello, everyone.


486
00:12:31,676 --> 00:12:33,196
My name is Sastry Vadlamari.


487
00:12:33,446 --> 00:12:34,836
I'm a software engineer here at


488
00:12:34,836 --> 00:12:35,286
Apple.


489
00:12:35,936 --> 00:12:37,366
Let's recap some of the tools at


490
00:12:37,366 --> 00:12:38,486
your disposal to measure


491
00:12:38,486 --> 00:12:39,886
application impact during


492
00:12:39,886 --> 00:12:40,946
development and testing.


493
00:12:41,936 --> 00:12:43,366
Right inside the debug navigator


494
00:12:43,366 --> 00:12:44,946
of XCode, you can get a


495
00:12:44,946 --> 00:12:46,816
high-level overview of the CPU


496
00:12:46,816 --> 00:12:48,566
memory and energy subsystems.


497
00:12:48,566 --> 00:12:50,816
And when you want to dig into


498
00:12:50,816 --> 00:12:52,556
the details or diagnose some


499
00:12:52,556 --> 00:12:54,616
issues, Instruments is a real


500
00:12:54,616 --> 00:12:55,346
useful tool.


501
00:12:55,906 --> 00:12:57,106
It comes with templates that


502
00:12:57,106 --> 00:12:59,306
help you diagnose memory issues,


503
00:13:00,096 --> 00:13:03,526
system unresponsiveness, and


504
00:13:03,526 --> 00:13:06,636
excessive disk usage, and energy


505
00:13:06,636 --> 00:13:07,066
issues.


506
00:13:08,446 --> 00:13:10,376
You can also use XCTest to


507
00:13:10,376 --> 00:13:11,536
measure performance.


508
00:13:12,116 --> 00:13:13,886
XCTest is a program that lets


509
00:13:13,886 --> 00:13:15,986
you write UI and unit tests that


510
00:13:15,986 --> 00:13:18,006
are seamlessly integrated into


511
00:13:18,176 --> 00:13:19,886
XCode testing workflow.


512
00:13:21,326 --> 00:13:22,316
You can not only measure


513
00:13:22,316 --> 00:13:23,666
performance, but you can catch


514
00:13:23,666 --> 00:13:25,356
regressions who have baselines.


515
00:13:25,986 --> 00:13:29,446
But then until last year, the


516
00:13:29,446 --> 00:13:31,136
only metric you could measure


517
00:13:31,136 --> 00:13:32,216
was world clock time.


518
00:13:32,816 --> 00:13:34,526
Performance has more dimensions.


519
00:13:34,836 --> 00:13:36,386
So this year we've added new


520
00:13:36,386 --> 00:13:40,286
performance metrics into XCTest.


521
00:13:40,366 --> 00:13:41,896
So, let's take a look into the


522
00:13:41,896 --> 00:13:42,346
details.


523
00:13:42,696 --> 00:13:44,946
This is how a sample performance


524
00:13:44,946 --> 00:13:46,016
XCTest looks like.


525
00:13:46,396 --> 00:13:47,846
You need to pattern a block of


526
00:13:47,936 --> 00:13:49,386
code where you specify the


527
00:13:49,386 --> 00:13:50,916
actions you want to perform into


528
00:13:50,916 --> 00:13:52,376
the measure method and it would


529
00:13:52,376 --> 00:13:53,936
measure the time it takes to


530
00:13:53,936 --> 00:13:55,406
perform - to execute this


531
00:13:55,406 --> 00:13:56,176
this block of code.


532
00:13:56,666 --> 00:13:58,306
Now, in order to convert this


533
00:13:58,306 --> 00:13:59,556
into the new style of


534
00:13:59,556 --> 00:14:01,536
performance test and to get more


535
00:14:01,536 --> 00:14:03,646
details, we just need to pattern


536
00:14:03,766 --> 00:14:05,536
your time, memory, and CPU


537
00:14:05,536 --> 00:14:07,246
objects, pack them into a list


538
00:14:07,246 --> 00:14:08,816
and pass them in as a parameter


539
00:14:08,816 --> 00:14:09,776
to the measure method.


540
00:14:10,296 --> 00:14:11,986
And with such minor changes,


541
00:14:11,986 --> 00:14:13,376
your existing performance test


542
00:14:13,376 --> 00:14:15,026
can measure multiple dimensions.


543
00:14:16,076 --> 00:14:18,396
We've gone a little further.


544
00:14:18,396 --> 00:14:21,286
With every new UI testing target


545
00:14:21,286 --> 00:14:22,856
that you create using XCTest,


546
00:14:23,426 --> 00:14:24,516
we're going to give you an


547
00:14:24,516 --> 00:14:25,746
application launch test for


548
00:14:25,746 --> 00:14:25,986
free.


549
00:14:26,156 --> 00:14:27,796
So, without writing any code,


550
00:14:27,796 --> 00:14:29,486
you will have a test that'll


551
00:14:29,486 --> 00:14:30,716
measure your application's


552
00:14:30,716 --> 00:14:32,886
launch time.


553
00:14:33,056 --> 00:14:33,976
Let's jump into a demo.


554
00:14:39,156 --> 00:14:40,976
So, for the purpose of this


555
00:14:41,036 --> 00:14:42,236
session, we created an


556
00:14:42,296 --> 00:14:44,026
application that we call an


557
00:14:44,126 --> 00:14:46,596
Awesome Photo App.


558
00:14:46,656 --> 00:14:48,026
Now, it has a few features.


559
00:14:48,416 --> 00:14:49,506
Let me walk you through that.


560
00:14:49,506 --> 00:14:51,026
So, it lets you take images.


561
00:14:52,646 --> 00:14:54,946
And when you take an image, it


562
00:14:55,046 --> 00:14:56,526
geotags it so you can see the


563
00:14:56,526 --> 00:14:57,436
location below.


564
00:14:58,076 --> 00:14:59,696
And then you can apply some


565
00:14:59,766 --> 00:15:01,246
fancy effects to the picture.


566
00:15:02,226 --> 00:15:03,156
We'll be referencing this


567
00:15:03,156 --> 00:15:04,886
application tool for the rest of


568
00:15:04,886 --> 00:15:05,296
the demo.


569
00:15:05,886 --> 00:15:07,176
You also have standard features


570
00:15:07,176 --> 00:15:08,236
like being able to load a


571
00:15:08,236 --> 00:15:09,406
picture from your photo screen,


572
00:15:09,536 --> 00:15:11,036
save the picture, and upload the


573
00:15:11,036 --> 00:15:12,666
picture to the server.


574
00:15:13,046 --> 00:15:14,226
So, what does this mean?


575
00:15:14,226 --> 00:15:16,196
How do you test this application


576
00:15:16,196 --> 00:15:16,796
from Xcode?


577
00:15:17,746 --> 00:15:19,786
Well, as I mentioned earlier,


578
00:15:20,436 --> 00:15:24,996
every new XCTest UI target that


579
00:15:25,046 --> 00:15:26,016
you create comes with an


580
00:15:26,086 --> 00:15:27,276
application launch test for


581
00:15:27,276 --> 00:15:27,626
free.


582
00:15:28,216 --> 00:15:29,416
So, I've already taken the


583
00:15:29,416 --> 00:15:30,916
liberty of running this test


584
00:15:31,376 --> 00:15:33,326
prior to this presentation and


585
00:15:33,326 --> 00:15:34,716
here's how the results look


586
00:15:34,716 --> 00:15:34,866
like.


587
00:15:34,866 --> 00:15:38,086
As you can see, it takes about


588
00:15:38,086 --> 00:15:39,746
.2 seconds for launching my


589
00:15:39,746 --> 00:15:40,386
application.


590
00:15:40,456 --> 00:15:41,546
That's acceptable.


591
00:15:42,066 --> 00:15:43,496
You can see the results of the


592
00:15:43,496 --> 00:15:45,536
multiple iterations and all of


593
00:15:45,536 --> 00:15:46,376
them are around the same


594
00:15:46,376 --> 00:15:46,826
numbers.


595
00:15:47,586 --> 00:15:49,306
And this is an interesting fact.


596
00:15:49,306 --> 00:15:50,636
You can set your baseline.


597
00:15:51,156 --> 00:15:53,316
The baselines are a mechanism


598
00:15:53,316 --> 00:15:54,906
wherein you set guidelines for


599
00:15:54,906 --> 00:15:56,166
what you expect your performance


600
00:15:56,166 --> 00:15:56,916
numbers to be.


601
00:15:57,266 --> 00:15:58,286
So, whenever your performance


602
00:15:58,286 --> 00:16:00,236
numbers go off them, your tests


603
00:16:00,236 --> 00:16:01,386
would fail and that's how you


604
00:16:01,386 --> 00:16:02,316
catch regressions.


605
00:16:02,366 --> 00:16:04,156
So, you can set the average, you


606
00:16:04,156 --> 00:16:05,636
can set the standard deviation,


607
00:16:06,776 --> 00:16:08,796
and whenever you run your test


608
00:16:08,796 --> 00:16:10,176
next time, if any of the numbers


609
00:16:10,176 --> 00:16:11,816
exceed these conditions, your


610
00:16:11,816 --> 00:16:12,436
tests would fail.


611
00:16:13,236 --> 00:16:14,556
So, I've made a change in the


612
00:16:14,616 --> 00:16:17,736
code and I want to ensure that


613
00:16:17,736 --> 00:16:18,976
my application launch time


614
00:16:18,976 --> 00:16:20,286
hasn't regressed.


615
00:16:20,316 --> 00:16:21,746
So, let me just run the test


616
00:16:21,746 --> 00:16:21,976
again.


617
00:16:23,356 --> 00:16:25,486
There's a couple of points you


618
00:16:25,486 --> 00:16:26,396
need to keep in mind when


619
00:16:26,396 --> 00:16:27,836
running performance tests.


620
00:16:28,076 --> 00:16:29,696
It's a good idea to not have the


621
00:16:29,846 --> 00:16:31,066
debugger attached to your


622
00:16:31,066 --> 00:16:32,806
process at it adds some overhead


623
00:16:32,806 --> 00:16:34,246
and it's also a good idea to


624
00:16:34,246 --> 00:16:35,996
turn off all diagnostic options


625
00:16:35,996 --> 00:16:36,836
like sanitizers.


626
00:16:36,836 --> 00:16:39,516
You can do this easily by either


627
00:16:39,516 --> 00:16:41,156
creating a separate scheme or


628
00:16:41,156 --> 00:16:42,696
you could use the test plan


629
00:16:42,896 --> 00:16:44,106
feature that was recently


630
00:16:44,106 --> 00:16:45,526
introduced to turn it off


631
00:16:45,526 --> 00:16:45,876
easily.


632
00:16:46,506 --> 00:16:47,406
So, now you can see that the


633
00:16:47,406 --> 00:16:49,336
test has run and it has failed.


634
00:16:49,406 --> 00:16:50,306
If you were to dig into the


635
00:16:50,306 --> 00:16:51,966
details, you will see that's


636
00:16:51,966 --> 00:16:53,566
becuase the average has


637
00:16:53,566 --> 00:16:54,706
really exceeded.


638
00:16:54,706 --> 00:16:56,466
I mean, what was .2 seconds has


639
00:16:56,466 --> 00:16:58,406
now become about 1.2 seconds.


640
00:16:59,036 --> 00:17:00,676
So, in order to debug this, you


641
00:17:00,676 --> 00:17:02,396
can attach this to Instruments


642
00:17:02,396 --> 00:17:03,696
and use the Timer Profiler


643
00:17:03,696 --> 00:17:05,616
template and find out why your


644
00:17:05,616 --> 00:17:06,896
app launch time has gone so bad.


645
00:17:07,465 --> 00:17:09,165
I'll spare you the mystery and


646
00:17:09,165 --> 00:17:10,506
I'll tell you what I did.


647
00:17:10,616 --> 00:17:12,026
So, I'm actually trying to look


648
00:17:12,026 --> 00:17:13,316
for a database, checking for


649
00:17:13,316 --> 00:17:14,915
database updates in my main


650
00:17:14,915 --> 00:17:15,185
thread.


651
00:17:15,185 --> 00:17:16,435
And as Phil mentioned earlier,


652
00:17:16,616 --> 00:17:17,746
it's a real bad thing to do.


653
00:17:18,326 --> 00:17:19,886
So, the right solution for this


654
00:17:19,886 --> 00:17:21,185
is to dispatch this into a


655
00:17:21,185 --> 00:17:24,195
background queue and hopefully


656
00:17:24,195 --> 00:17:25,226
this fixes our problem.


657
00:17:25,576 --> 00:17:27,286
Let's run the test again and


658
00:17:27,286 --> 00:17:29,646
ensure that the numbers are well


659
00:17:29,646 --> 00:17:31,356
within what we expect it to be.


660
00:17:32,266 --> 00:17:34,536
The point here is you can,


661
00:17:34,536 --> 00:17:35,656
XCTest not only helps you


662
00:17:35,656 --> 00:17:37,256
measure but it also helps you


663
00:17:37,256 --> 00:17:38,506
ensure things don't regress.


664
00:17:38,656 --> 00:17:40,206
So, it's more for you write your


665
00:17:40,206 --> 00:17:41,676
test once and you can forget


666
00:17:41,676 --> 00:17:43,076
about it and keep running it in


667
00:17:43,196 --> 00:17:44,996
your CI system and ensure that,


668
00:17:45,056 --> 00:17:46,346
you know your performance


669
00:17:46,346 --> 00:17:47,026
doesn't degrade.


670
00:17:47,026 --> 00:17:49,476
As you can see, the test passed


671
00:17:49,666 --> 00:17:50,896
and yay, we fixed our bug.


672
00:17:51,516 --> 00:17:56,896
[ Applause ]


673
00:17:57,396 --> 00:17:59,566
So, it's pretty easy to convert


674
00:17:59,566 --> 00:18:01,536
your existing XCTest performance


675
00:18:01,576 --> 00:18:03,526
tests into to have more


676
00:18:03,526 --> 00:18:04,566
dimensions, as I mentioned


677
00:18:04,566 --> 00:18:04,856
earlier.


678
00:18:05,306 --> 00:18:06,826
So, all you need to do is


679
00:18:06,936 --> 00:18:09,186
pattern the objects in a list of


680
00:18:09,186 --> 00:18:10,406
what you intend to measure.


681
00:18:10,586 --> 00:18:11,726
Like for instance, I had a


682
00:18:11,726 --> 00:18:13,056
performance test that was


683
00:18:13,056 --> 00:18:14,586
measuring the time it took to


684
00:18:14,656 --> 00:18:17,836
take a picture and, you know,


685
00:18:17,836 --> 00:18:20,346
use the photo and apply an


686
00:18:20,486 --> 00:18:20,696
effect.


687
00:18:20,696 --> 00:18:21,766
And earlier, this would've just


688
00:18:21,766 --> 00:18:22,686
measured the amount of time.


689
00:18:23,206 --> 00:18:25,016
But now, by just passing the


690
00:18:25,016 --> 00:18:26,986
additional memory metric object,


691
00:18:27,316 --> 00:18:28,496
I can now even measure the


692
00:18:28,496 --> 00:18:30,196
memory, in fact, of performing


693
00:18:30,196 --> 00:18:30,776
these actions.


694
00:18:32,266 --> 00:18:34,176
XCTest doesn't have to be


695
00:18:34,176 --> 00:18:35,846
restricted to only UI tests.


696
00:18:35,846 --> 00:18:37,236
You can also use it for unit


697
00:18:37,236 --> 00:18:37,496
tests.


698
00:18:38,216 --> 00:18:40,226
And I'll give you an example


699
00:18:40,226 --> 00:18:40,466
here.


700
00:18:40,466 --> 00:18:42,036
So I have the Apply Effects


701
00:18:42,036 --> 00:18:43,296
feature, and I have an option of


702
00:18:43,296 --> 00:18:44,506
selecting whether I want to use


703
00:18:44,506 --> 00:18:46,386
one photo or multiple photos.


704
00:18:46,936 --> 00:18:48,636
It adds very little value from a


705
00:18:48,716 --> 00:18:51,296
feature perspective but if the


706
00:18:51,296 --> 00:18:52,376
overhead isn't much, I would


707
00:18:52,376 --> 00:18:53,196
rather like to do it.


708
00:18:53,686 --> 00:18:54,906
So, I took the liberty of


709
00:18:54,906 --> 00:18:56,896
running this test and measuring


710
00:18:56,896 --> 00:18:59,326
the time it takes to run this,


711
00:18:59,326 --> 00:19:00,956
to apply the effect with one


712
00:19:00,956 --> 00:19:01,156
photo.


713
00:19:01,156 --> 00:19:03,176
And it's about 1000KB.


714
00:19:03,666 --> 00:19:05,596
But now it's really easy to


715
00:19:05,596 --> 00:19:08,096
measure the impact of adding, of


716
00:19:08,556 --> 00:19:09,486
a different scenario.


717
00:19:09,486 --> 00:19:10,646
All you need to do is change the


718
00:19:10,646 --> 00:19:10,936
code.


719
00:19:10,936 --> 00:19:11,966
I've changed the code to choose


720
00:19:12,006 --> 00:19:13,636
filters, and you run the test


721
00:19:13,636 --> 00:19:13,946
again.


722
00:19:14,516 --> 00:19:16,516
And the test runs and you'll get


723
00:19:16,516 --> 00:19:18,566
back your numbers immediately.


724
00:19:18,766 --> 00:19:20,716
And when that happens, you can


725
00:19:20,796 --> 00:19:22,816
check your impact.


726
00:19:23,096 --> 00:19:26,656
So, as you can see, the impact


727
00:19:27,066 --> 00:19:29,936
is, the test failed because this


728
00:19:29,936 --> 00:19:32,796
one is about 100% worse.


729
00:19:32,796 --> 00:19:34,286
It's about 2000KB.


730
00:19:34,366 --> 00:19:35,866
So probably I'm going to stick


731
00:19:35,866 --> 00:19:37,886
with one photo.


732
00:19:38,446 --> 00:19:43,216
So, to summarize, I gave you a


733
00:19:43,216 --> 00:19:45,806
demo of using a few metrics like


734
00:19:45,806 --> 00:19:46,166
memory.


735
00:19:46,436 --> 00:19:48,136
But we added a whole bunch of


736
00:19:48,136 --> 00:19:48,296
them.


737
00:19:48,296 --> 00:19:49,176
We added memory.


738
00:19:49,176 --> 00:19:50,126
We added storage.


739
00:19:50,126 --> 00:19:50,916
We added CPU.


740
00:19:50,916 --> 00:19:52,376
We added OS Signpost.


741
00:19:52,606 --> 00:19:54,396
But we didn't stop there.


742
00:19:54,396 --> 00:19:56,386
We put away generic underlying


743
00:19:56,386 --> 00:19:57,956
system, so you can actually


744
00:19:57,956 --> 00:19:59,316
implement your own custom


745
00:19:59,316 --> 00:20:00,636
metrics and use the underlying


746
00:20:00,636 --> 00:20:01,946
reporting system to catch


747
00:20:01,946 --> 00:20:02,466
regressions.


748
00:20:03,116 --> 00:20:03,746
Please look into the


749
00:20:03,746 --> 00:20:05,286
documentation for more details.


750
00:20:06,326 --> 00:20:07,836
And then as I demonstrated in


751
00:20:07,836 --> 00:20:09,526
the last example, you can also


752
00:20:09,526 --> 00:20:11,796
use XCTest to do some sort of AB


753
00:20:11,796 --> 00:20:12,076
testing.


754
00:20:12,076 --> 00:20:14,386
It's really a low-cost, easy way


755
00:20:14,816 --> 00:20:16,536
to check if algorithm A is


756
00:20:16,536 --> 00:20:17,586
better than algorithm B.


757
00:20:17,786 --> 00:20:19,166
Just wrap them around on simple


758
00:20:19,166 --> 00:20:20,736
unit tests and you can have your


759
00:20:20,736 --> 00:20:20,996
numbers.


760
00:20:21,966 --> 00:20:25,176
And because XCTest works so well


761
00:20:25,176 --> 00:20:26,716
with both Xcode and Xcode


762
00:20:26,716 --> 00:20:28,646
server, you could use this


763
00:20:28,646 --> 00:20:30,866
performance test, both in your


764
00:20:30,866 --> 00:20:32,256
development and testing phase


765
00:20:32,256 --> 00:20:33,376
and also as part of your


766
00:20:33,376 --> 00:20:34,846
continuous integration system


767
00:20:34,956 --> 00:20:36,456
and ensure that your app doesn't


768
00:20:36,456 --> 00:20:37,586
regress on the performance


769
00:20:37,586 --> 00:20:37,806
front.


770
00:20:38,356 --> 00:20:40,346
So, that's what's new with


771
00:20:40,406 --> 00:20:42,386
performance testing with XCTest.


772
00:20:42,816 --> 00:20:43,836
Next, I'd like to call upon


773
00:20:43,926 --> 00:20:45,016
Ashish, who's going to talk to


774
00:20:45,016 --> 00:20:46,026
you about measuring your


775
00:20:46,026 --> 00:20:47,526
application's impact out in the


776
00:20:47,526 --> 00:20:47,796
field.


777
00:20:49,516 --> 00:20:54,500
[ Applause ]


778
00:20:59,586 --> 00:21:00,266
>> Thanks, Sastry.


779
00:21:00,976 --> 00:21:02,566
So, after your initial testing


780
00:21:02,566 --> 00:21:04,256
and development phase, there are


781
00:21:04,256 --> 00:21:05,546
many benefits of collecting


782
00:21:05,546 --> 00:21:06,616
field metrics to further


783
00:21:06,616 --> 00:21:08,016
optimize your battery life and


784
00:21:08,016 --> 00:21:09,396
performance of your application.


785
00:21:10,456 --> 00:21:11,726
This includes leveraging your


786
00:21:11,726 --> 00:21:13,486
beta population of a few users


787
00:21:13,916 --> 00:21:15,256
as well as your broader customer


788
00:21:15,256 --> 00:21:15,876
population.


789
00:21:16,456 --> 00:21:18,786
In the field, your application


790
00:21:18,786 --> 00:21:19,746
goes through a wide range of


791
00:21:19,746 --> 00:21:21,516
user scenarios such as different


792
00:21:21,516 --> 00:21:22,876
cellular networks, signal


793
00:21:22,876 --> 00:21:24,666
conditions, different types of


794
00:21:24,666 --> 00:21:26,216
devices, as well as different


795
00:21:26,216 --> 00:21:26,726
locations.


796
00:21:27,396 --> 00:21:29,076
These help identify issues that


797
00:21:29,076 --> 00:21:30,406
may not have been caught during


798
00:21:30,406 --> 00:21:31,326
on-desk testing.


799
00:21:31,836 --> 00:21:34,106
You can also use this field


800
00:21:34,106 --> 00:21:35,596
metrics to compare the battery


801
00:21:35,596 --> 00:21:36,666
life and performance with


802
00:21:36,666 --> 00:21:37,716
previous operations.


803
00:21:38,176 --> 00:21:39,496
You can use this data to figure


804
00:21:39,496 --> 00:21:40,716
out whether there are any new


805
00:21:40,716 --> 00:21:42,966
regressions or egregious issues.


806
00:21:43,536 --> 00:21:45,056
These field metrics already


807
00:21:45,056 --> 00:21:46,286
helps you to also understand the


808
00:21:46,286 --> 00:21:48,326
impact of new features and do AB


809
00:21:48,326 --> 00:21:49,396
testing in the field with a


810
00:21:49,396 --> 00:21:50,486
broader set of users.


811
00:21:51,156 --> 00:21:53,956
To solve this problem, I am very


812
00:21:53,956 --> 00:21:55,166
happy to announce we are


813
00:21:55,166 --> 00:21:56,936
releasing MetricKit, which is an


814
00:21:56,976 --> 00:21:58,556
on-device framework to collect


815
00:21:58,556 --> 00:21:59,906
battery life and performance


816
00:21:59,906 --> 00:22:01,116
metrics for your application.


817
00:22:02,436 --> 00:22:04,236
We also added a capability in


818
00:22:04,236 --> 00:22:05,746
MetricKit to collect metrics


819
00:22:05,746 --> 00:22:07,116
around the critical sections in


820
00:22:07,116 --> 00:22:07,956
your application.


821
00:22:08,396 --> 00:22:10,226
We have built all these features


822
00:22:10,226 --> 00:22:11,936
into MetricKit while protecting


823
00:22:11,936 --> 00:22:13,676
your users' privacy in our data


824
00:22:13,706 --> 00:22:14,856
collection aggregation


825
00:22:14,856 --> 00:22:15,446
mechanisms.


826
00:22:16,116 --> 00:22:18,946
It's very easy to adopt


827
00:22:18,946 --> 00:22:20,516
MetricKit and get started, as


828
00:22:20,516 --> 00:22:21,266
I'll show you next.


829
00:22:21,866 --> 00:22:24,256
So, the code here is all you


830
00:22:24,256 --> 00:22:25,176
need to get started.


831
00:22:25,636 --> 00:22:27,276
First, you import the MetricKit


832
00:22:27,336 --> 00:22:29,256
framework and create a class in


833
00:22:29,256 --> 00:22:30,616
your application which conforms


834
00:22:30,616 --> 00:22:32,086
to the metric manager subscriber


835
00:22:32,086 --> 00:22:32,566
protocol.


836
00:22:33,146 --> 00:22:35,956
And inside the class, you have


837
00:22:35,956 --> 00:22:37,026
the subscribe for metrics.


838
00:22:37,686 --> 00:22:39,016
This lets the device know that


839
00:22:39,016 --> 00:22:40,366
your application is interested


840
00:22:40,366 --> 00:22:41,416
in receiving metrics for the


841
00:22:41,416 --> 00:22:43,196
metric kit so that it can start


842
00:22:43,196 --> 00:22:46,756
collecting that on the device.


843
00:22:46,896 --> 00:22:48,596
Finally, as a developer, you


844
00:22:48,596 --> 00:22:49,666
have to implement a delegate


845
00:22:49,666 --> 00:22:50,776
method called didReceive.


846
00:22:51,316 --> 00:22:52,866
This method is involved whenever


847
00:22:52,866 --> 00:22:54,266
there is a metric payload to be


848
00:22:54,266 --> 00:22:55,656
delivered to your application on


849
00:22:55,656 --> 00:22:56,006
the device.


850
00:22:56,716 --> 00:22:58,086
And it's up to you to take any


851
00:22:58,086 --> 00:22:59,386
actions once you receive this


852
00:22:59,386 --> 00:23:00,196
payload on the device.


853
00:23:00,796 --> 00:23:02,356
For example, you can choose to


854
00:23:02,356 --> 00:23:03,946
save it to a file, or you can


855
00:23:03,946 --> 00:23:05,126
also upload to your server so


856
00:23:05,206 --> 00:23:06,176
you can collect this from the


857
00:23:06,176 --> 00:23:07,496
field for multiple users.


858
00:23:09,576 --> 00:23:11,306
After using metric, after


859
00:23:11,306 --> 00:23:12,636
adopting MetricKit, as your


860
00:23:12,636 --> 00:23:13,996
application gets used during the


861
00:23:13,996 --> 00:23:15,856
day, we automatically collect an


862
00:23:15,856 --> 00:23:17,006
aggregate metrics for our


863
00:23:17,006 --> 00:23:17,506
application.


864
00:23:18,756 --> 00:23:20,476
And at the end of a 24-hour


865
00:23:20,476 --> 00:23:22,226
period, we generate a metric


866
00:23:22,226 --> 00:23:23,796
summary for the entire day, the


867
00:23:23,796 --> 00:23:25,716
last 24 hours, and return this


868
00:23:25,716 --> 00:23:28,776
payload back on the device.


869
00:23:28,926 --> 00:23:30,246
Now, let's understand how we can


870
00:23:30,246 --> 00:23:31,436
measure the impact of critical


871
00:23:31,436 --> 00:23:32,556
code sections in our


872
00:23:32,556 --> 00:23:33,096
applications.


873
00:23:34,516 --> 00:23:35,576
Going back to the awesome


874
00:23:35,576 --> 00:23:37,076
PhotoApp example which Sastry


875
00:23:37,076 --> 00:23:38,716
described earlier, users can


876
00:23:38,716 --> 00:23:39,926
perform any activities in there.


877
00:23:40,796 --> 00:23:42,286
For example, they can choose to


878
00:23:42,286 --> 00:23:44,386
take a photo and on that photo,


879
00:23:44,386 --> 00:23:45,366
they can apply many cool


880
00:23:45,366 --> 00:23:45,866
effects.


881
00:23:46,486 --> 00:23:47,996
If they like the effect that


882
00:23:47,996 --> 00:23:49,556
they took, they can choose to


883
00:23:49,556 --> 00:23:50,586
save the photo on the device.


884
00:23:51,656 --> 00:23:52,966
MetricKit provides the ability


885
00:23:52,966 --> 00:23:54,236
to capture the precise battery


886
00:23:54,236 --> 00:23:56,036
life and performance impact of


887
00:23:56,036 --> 00:23:57,216
each of these features of your


888
00:23:57,216 --> 00:23:57,776
application.


889
00:23:59,436 --> 00:24:00,776
Now, let's see how we can do


890
00:24:00,776 --> 00:24:01,016
that.


891
00:24:01,716 --> 00:24:03,316
We are happy to introduce a new


892
00:24:03,316 --> 00:24:04,776
API inside MetricKit called


893
00:24:04,776 --> 00:24:06,856
mxSignposts which is implemented


894
00:24:06,856 --> 00:24:08,596
as a wraparound OS Signpost.


895
00:24:09,426 --> 00:24:10,596
By bookending the critical


896
00:24:10,596 --> 00:24:11,926
sections in your application


897
00:24:11,926 --> 00:24:13,686
with mxSignpost, you can capture


898
00:24:13,686 --> 00:24:14,626
the precise impact.


899
00:24:15,206 --> 00:24:16,136
Let's take an example.


900
00:24:17,736 --> 00:24:20,026
So, to use mxSignpost, all you


901
00:24:20,026 --> 00:24:22,756
need to do is to use MetricKit's


902
00:24:22,756 --> 00:24:25,166
make log handle maker and create


903
00:24:25,166 --> 00:24:26,166
a log handle with it.


904
00:24:26,866 --> 00:24:28,506
And use that log handle to drop


905
00:24:28,506 --> 00:24:30,276
mxSignpost around critical code


906
00:24:30,276 --> 00:24:30,786
sections.


907
00:24:31,696 --> 00:24:32,876
In this example, I want to


908
00:24:32,876 --> 00:24:34,066
measure the impact of the save


909
00:24:34,066 --> 00:24:35,396
photo feature that we have in


910
00:24:35,396 --> 00:24:36,236
our awesome photo app.


911
00:24:36,646 --> 00:24:37,956
So, I've dropped in mxSignpost


912
00:24:37,956 --> 00:24:38,986
just before and after this


913
00:24:38,986 --> 00:24:39,796
application code.


914
00:24:40,776 --> 00:24:42,396
MetricKit will automatically


915
00:24:42,396 --> 00:24:44,006
collect metrics and process them


916
00:24:44,116 --> 00:24:46,976
for you on the device.


917
00:24:47,136 --> 00:24:48,296
Now, let's jump into a demo


918
00:24:48,296 --> 00:24:49,386
where I'll show you how to adopt


919
00:24:49,386 --> 00:24:50,216
MetricKit in your own


920
00:24:50,216 --> 00:24:52,000
application.


921
00:24:59,966 --> 00:25:01,396
So, now I'm back in the Xcode


922
00:25:01,396 --> 00:25:03,566
project of my application and


923
00:25:04,066 --> 00:25:05,666
I'm in the view controller.swift


924
00:25:05,666 --> 00:25:07,266
file after my application.


925
00:25:07,466 --> 00:25:08,576
As you can see, I have already


926
00:25:08,576 --> 00:25:10,156
adopted the MetricKit framework


927
00:25:10,156 --> 00:25:12,056
here and created a class which


928
00:25:12,056 --> 00:25:13,376
conforms to the metric manager


929
00:25:13,376 --> 00:25:14,366
subscriber protocol.


930
00:25:14,956 --> 00:25:16,606
And inside that class, I've


931
00:25:16,606 --> 00:25:18,046
added some code already for the


932
00:25:18,046 --> 00:25:19,006
didReceive method.


933
00:25:19,476 --> 00:25:20,586
So, this method is involved


934
00:25:20,586 --> 00:25:21,516
whenever there's a metric


935
00:25:21,516 --> 00:25:22,256
payload available.


936
00:25:23,116 --> 00:25:24,606
For my application, I've decided


937
00:25:24,606 --> 00:25:26,156
to save the data to a file so


938
00:25:26,156 --> 00:25:27,466
that I can do some on-device


939
00:25:27,466 --> 00:25:28,426
processing later.


940
00:25:29,026 --> 00:25:30,276
For the purposes of today's


941
00:25:30,276 --> 00:25:31,156
demo, I've also written a


942
00:25:31,156 --> 00:25:33,166
function to print this data so I


943
00:25:33,166 --> 00:25:33,886
can walk you through the


944
00:25:33,886 --> 00:25:34,946
contents of the payload.


945
00:25:35,866 --> 00:25:36,946
Finally, I have written this


946
00:25:37,006 --> 00:25:38,616
function to upload this data to


947
00:25:38,616 --> 00:25:40,266
my own server so that it can


948
00:25:40,266 --> 00:25:41,526
collect this data from multiple


949
00:25:41,526 --> 00:25:43,356
users during beta testing as


950
00:25:43,596 --> 00:25:45,916
well as customers.


951
00:25:45,966 --> 00:25:48,026
Now, as this method is only


952
00:25:48,026 --> 00:25:49,446
involved at most once per day,


953
00:25:49,806 --> 00:25:50,756
whenever there's a payload


954
00:25:50,756 --> 00:25:52,056
available for our application,


955
00:25:52,426 --> 00:25:54,026
we built a new feature in Xcode


956
00:25:54,026 --> 00:25:55,016
to help you test this out.


957
00:25:55,426 --> 00:25:56,386
So, let me show you how that


958
00:25:56,386 --> 00:25:56,746
works.


959
00:25:57,556 --> 00:25:58,806
We're first going to run this


960
00:25:58,806 --> 00:25:59,836
application on my test device


961
00:25:59,836 --> 00:25:59,976
here.


962
00:26:05,096 --> 00:26:06,546
So the application is running


963
00:26:06,546 --> 00:26:06,716
now.


964
00:26:07,196 --> 00:26:08,816
Now, I'm going to go into debug


965
00:26:08,816 --> 00:26:10,286
and click on select MetricKit


966
00:26:10,286 --> 00:26:10,736
payloads.


967
00:26:11,696 --> 00:26:12,936
What this does is it sends a


968
00:26:12,936 --> 00:26:13,796
dummy payload to your


969
00:26:13,796 --> 00:26:15,346
application so that you can test


970
00:26:15,346 --> 00:26:16,986
the code inside the did receive


971
00:26:16,986 --> 00:26:17,356
method.


972
00:26:17,996 --> 00:26:18,846
Now, let's walk through some of


973
00:26:18,846 --> 00:26:19,936
the contents in MetricKit


974
00:26:19,976 --> 00:26:21,366
payload that is available today.


975
00:26:22,656 --> 00:26:23,946
So, the first example here shows


976
00:26:23,946 --> 00:26:25,196
a meta data related to the


977
00:26:25,196 --> 00:26:26,786
application such as the build


978
00:26:26,786 --> 00:26:28,696
version, device type, and the OS


979
00:26:28,696 --> 00:26:29,186
version.


980
00:26:29,846 --> 00:26:31,216
Then we get a few histographs


981
00:26:31,216 --> 00:26:32,236
related to very useful


982
00:26:32,236 --> 00:26:33,456
performance metrics such as


983
00:26:33,456 --> 00:26:35,246
application launch, resume, and


984
00:26:35,246 --> 00:26:35,566
hangs.


985
00:26:36,686 --> 00:26:38,226
Then we get metrics related to


986
00:26:38,226 --> 00:26:39,716
the application usage such as


987
00:26:39,716 --> 00:26:40,986
foreground and background times


988
00:26:41,666 --> 00:26:43,126
and a few background metrics


989
00:26:43,126 --> 00:26:44,576
such as CPU time and GPU time.


990
00:26:45,336 --> 00:26:46,356
Then there are metrics around


991
00:26:46,356 --> 00:26:48,616
location usage as well as


992
00:26:48,616 --> 00:26:50,826
networking, disk IO memory, and


993
00:26:50,826 --> 00:26:51,246
disk play.


994
00:26:52,176 --> 00:26:53,426
And finally we have a section


995
00:26:53,426 --> 00:26:55,246
around the mxSignpost summary


996
00:26:55,466 --> 00:26:56,356
for your application.


997
00:26:56,946 --> 00:26:57,826
As you can see, there are a lot


998
00:26:57,826 --> 00:26:59,166
of metrics that are available


999
00:26:59,166 --> 00:27:00,376
right now in MetricKit.


1000
00:27:00,376 --> 00:27:01,486
So, I would highly recommend you


1001
00:27:01,486 --> 00:27:02,846
to check out our documentation


1002
00:27:02,846 --> 00:27:04,436
to learn more about the details


1003
00:27:05,086 --> 00:27:05,196
here.


1004
00:27:05,196 --> 00:27:06,566
So, let's go back to the slides


1005
00:27:06,566 --> 00:27:06,716
now.


1006
00:27:10,166 --> 00:27:12,066
So, as you see, as we saw during


1007
00:27:12,066 --> 00:27:13,226
the demo, it's very easy to get


1008
00:27:13,226 --> 00:27:15,146
started with using MetricKit and


1009
00:27:15,146 --> 00:27:16,296
start getting metrics on your


1010
00:27:16,296 --> 00:27:16,976
devices right now.


1011
00:27:19,556 --> 00:27:20,776
So, for the, also for the


1012
00:27:20,776 --> 00:27:22,476
application, we decided to take


1013
00:27:22,476 --> 00:27:24,026
a road trip and collect some


1014
00:27:24,026 --> 00:27:25,256
field metrics as well as some


1015
00:27:25,256 --> 00:27:25,866
fun photos.


1016
00:27:27,416 --> 00:27:28,816
The next day after using


1017
00:27:28,816 --> 00:27:30,176
MetricKit in the field with our


1018
00:27:30,176 --> 00:27:31,766
awesome photo application, we


1019
00:27:31,766 --> 00:27:33,146
get, we got a payload on the


1020
00:27:33,146 --> 00:27:34,786
device which is uploaded to my


1021
00:27:34,826 --> 00:27:35,766
own service using the


1022
00:27:35,766 --> 00:27:37,026
application code that I showed


1023
00:27:37,026 --> 00:27:37,556
you earlier.


1024
00:27:39,286 --> 00:27:40,936
Now, let's use this data that we


1025
00:27:40,936 --> 00:27:42,076
received from the field to


1026
00:27:42,076 --> 00:27:43,476
identify some hotspots in our


1027
00:27:43,476 --> 00:27:44,636
awesome photo application.


1028
00:27:45,946 --> 00:27:47,166
Following the first example,


1029
00:27:47,746 --> 00:27:48,936
this data shows the overall


1030
00:27:48,936 --> 00:27:49,786
foreground time and the


1031
00:27:49,786 --> 00:27:50,476
background time of the


1032
00:27:50,476 --> 00:27:52,026
application as well as the


1033
00:27:52,026 --> 00:27:53,416
overall location sage by


1034
00:27:53,416 --> 00:27:54,746
different accuracy markets.


1035
00:27:55,566 --> 00:27:57,396
It shows that the location uses


1036
00:27:57,396 --> 00:27:58,246
by the application which is


1037
00:27:58,246 --> 00:27:59,756
around 720 seconds, is very


1038
00:27:59,756 --> 00:28:00,816
close to the foreground time,


1039
00:28:01,446 --> 00:28:02,666
which is very unexpected.


1040
00:28:03,306 --> 00:28:04,816
All I'm using the location for


1041
00:28:04,816 --> 00:28:06,436
is to geotag a photo whenever I


1042
00:28:06,436 --> 00:28:08,706
capture it on the device.


1043
00:28:08,706 --> 00:28:10,686
Going back to the application, I


1044
00:28:10,686 --> 00:28:11,936
found that if I'm going to close


1045
00:28:11,936 --> 00:28:13,266
the location after I started


1046
00:28:13,266 --> 00:28:13,756
taking it.


1047
00:28:14,336 --> 00:28:15,616
So, this is a very good example


1048
00:28:15,616 --> 00:28:16,956
of how you can use MetricKit to


1049
00:28:16,956 --> 00:28:18,576
identify an expected application


1050
00:28:18,576 --> 00:28:19,006
behavior.


1051
00:28:19,926 --> 00:28:21,136
Another thing we can optimize


1052
00:28:21,136 --> 00:28:23,096
using this data is to reduce the


1053
00:28:23,096 --> 00:28:24,726
location usage if it works for


1054
00:28:24,726 --> 00:28:25,276
our use case.


1055
00:28:25,796 --> 00:28:27,076
Because the higher the location


1056
00:28:27,076 --> 00:28:28,566
accuracy, the more the battery


1057
00:28:29,096 --> 00:28:29,216
drain.


1058
00:28:30,156 --> 00:28:31,646
The next example shows the


1059
00:28:31,646 --> 00:28:33,056
histogram of application hang


1060
00:28:33,056 --> 00:28:33,536
durations.


1061
00:28:33,906 --> 00:28:35,366
So, the data shows there are


1062
00:28:35,366 --> 00:28:36,776
many instances of hang durations


1063
00:28:36,776 --> 00:28:38,476
of more than 5 seconds, which is


1064
00:28:38,476 --> 00:28:39,966
very bad for user experience.


1065
00:28:40,926 --> 00:28:42,406
So, one of the ways you can


1066
00:28:42,406 --> 00:28:43,606
solve this as Phil described


1067
00:28:43,606 --> 00:28:44,626
earlier is to avoid long


1068
00:28:44,626 --> 00:28:45,906
blocking calls in the mainframe,


1069
00:28:46,296 --> 00:28:47,626
so we can reduce any hang


1070
00:28:47,626 --> 00:28:48,276
instances.


1071
00:28:48,856 --> 00:28:51,706
The final example shows how you


1072
00:28:51,706 --> 00:28:53,286
can use the mxSignpost data in


1073
00:28:53,286 --> 00:28:55,536
MetricKit to identify hotspots


1074
00:28:55,536 --> 00:28:57,036
from a specific application code


1075
00:28:57,036 --> 00:28:57,386
region.


1076
00:28:58,866 --> 00:29:00,456
In my application, I decided to


1077
00:29:00,456 --> 00:29:01,796
put mxSignpost around all the


1078
00:29:01,796 --> 00:29:02,416
main features.


1079
00:29:02,416 --> 00:29:04,706
For example, load photo, apply


1080
00:29:04,706 --> 00:29:06,206
effect, date photo, save photo,


1081
00:29:06,206 --> 00:29:06,936
and upload photo.


1082
00:29:07,646 --> 00:29:09,236
Using mxSignpost, MetricKit was


1083
00:29:09,236 --> 00:29:10,456
able to figure out how many


1084
00:29:10,456 --> 00:29:12,126
times each of these instances


1085
00:29:12,126 --> 00:29:14,086
run in the field as well as a


1086
00:29:14,086 --> 00:29:15,396
few back to life and performance


1087
00:29:15,396 --> 00:29:17,336
metrics such as this CPU time,


1088
00:29:18,176 --> 00:29:19,856
and the overall CPU time for the


1089
00:29:19,856 --> 00:29:20,786
entire application.


1090
00:29:22,296 --> 00:29:23,436
This data shows that there were


1091
00:29:23,436 --> 00:29:25,886
many, so the CP usage by the


1092
00:29:25,886 --> 00:29:27,516
ApplyEffect feature was more


1093
00:29:27,516 --> 00:29:28,446
than 50%.


1094
00:29:28,976 --> 00:29:30,756
So, now I know where I can go


1095
00:29:30,756 --> 00:29:31,676
and further optimize my


1096
00:29:31,676 --> 00:29:33,526
application so that I can reduce


1097
00:29:33,526 --> 00:29:34,776
the battery usage overall.


1098
00:29:36,876 --> 00:29:38,166
So, following are the key


1099
00:29:38,166 --> 00:29:39,466
takeaways from this section.


1100
00:29:40,576 --> 00:29:42,276
You can use MetricKit to collect


1101
00:29:42,276 --> 00:29:43,286
field battery life and


1102
00:29:43,286 --> 00:29:44,536
performance metrics for your


1103
00:29:44,536 --> 00:29:45,956
application starting from iOS


1104
00:29:45,956 --> 00:29:46,366
13.


1105
00:29:46,906 --> 00:29:49,546
You can use MetricKit to


1106
00:29:49,546 --> 00:29:50,976
identify hotspots early from


1107
00:29:50,976 --> 00:29:51,986
your application, such as the


1108
00:29:51,986 --> 00:29:53,246
example I showed today with the


1109
00:29:53,246 --> 00:29:55,076
beta population, and you can do


1110
00:29:55,076 --> 00:29:56,396
so in the customer population,


1111
00:29:56,396 --> 00:29:56,566
too.


1112
00:29:56,936 --> 00:30:00,046
Another example we saw today is


1113
00:30:00,046 --> 00:30:01,666
how I use MetricKit data from a


1114
00:30:01,716 --> 00:30:02,806
single user to identify


1115
00:30:02,806 --> 00:30:03,396
hotspots.


1116
00:30:03,706 --> 00:30:05,276
Aggregating the same data from


1117
00:30:05,276 --> 00:30:06,586
multiple users can provide you


1118
00:30:06,586 --> 00:30:08,136
much deeper insights about


1119
00:30:08,136 --> 00:30:09,306
improving your application.


1120
00:30:11,226 --> 00:30:12,616
So, now I hand over the stage to


1121
00:30:12,616 --> 00:30:13,676
Anshul, who's going to talk


1122
00:30:13,676 --> 00:30:14,576
about an out-of-the-box


1123
00:30:14,576 --> 00:30:16,016
telemetry solution in Xcode.


1124
00:30:16,236 --> 00:30:16,596
Anshul?


1125
00:30:17,516 --> 00:30:21,756
[ Applause ]


1126
00:30:22,256 --> 00:30:23,366
>> Thank you very much, Ashish.


1127
00:30:23,936 --> 00:30:25,096
Hi, I'm Anshul Davra.


1128
00:30:25,096 --> 00:30:26,656
I'm here to talk about Xcode


1129
00:30:26,656 --> 00:30:27,906
Metric Core Organizer.


1130
00:30:28,006 --> 00:30:29,676
That's a new cool tool that we


1131
00:30:29,676 --> 00:30:31,576
are introducing this year with


1132
00:30:31,616 --> 00:30:32,546
Xcode 11.


1133
00:30:33,796 --> 00:30:35,506
Xcode Metrics Organizer is an


1134
00:30:35,506 --> 00:30:37,036
out-of-box solution that we are


1135
00:30:37,196 --> 00:30:40,236
providing with Xcode 11 to view


1136
00:30:40,236 --> 00:30:42,206
your power and performance app


1137
00:30:42,466 --> 00:30:43,096
analytics.


1138
00:30:43,606 --> 00:30:45,366
You can see how your app is


1139
00:30:45,366 --> 00:30:47,276
doing on the customer devices in


1140
00:30:47,276 --> 00:30:49,126
terms of battery life and


1141
00:30:49,126 --> 00:30:49,716
performance.


1142
00:30:49,816 --> 00:30:52,736
There is no change required to


1143
00:30:52,736 --> 00:30:53,176
your app.


1144
00:30:53,386 --> 00:30:55,716
It is available as-is in Xcode


1145
00:30:55,716 --> 00:30:56,426
11 for you.


1146
00:30:57,486 --> 00:30:59,696
We have built in privacy into


1147
00:30:59,696 --> 00:31:01,666
this whole process right from


1148
00:31:01,856 --> 00:31:03,026
collecting the data on the


1149
00:31:03,026 --> 00:31:05,696
device to aggregating the data


1150
00:31:05,696 --> 00:31:06,646
on the server.


1151
00:31:07,006 --> 00:31:09,086
So, you can start using this


1152
00:31:09,086 --> 00:31:11,996
data as of today.


1153
00:31:12,186 --> 00:31:14,436
The way it works is when


1154
00:31:14,436 --> 00:31:16,636
somebody, when a user uses your


1155
00:31:16,636 --> 00:31:19,716
app, we collect metrics around


1156
00:31:19,716 --> 00:31:20,156
your app.


1157
00:31:21,096 --> 00:31:22,826
These metrics are aggregated on


1158
00:31:22,826 --> 00:31:24,736
the device and then sent over to


1159
00:31:24,736 --> 00:31:25,296
our server.


1160
00:31:25,646 --> 00:31:27,436
On the server side, we run


1161
00:31:27,436 --> 00:31:28,966
analytics on this data and


1162
00:31:28,966 --> 00:31:30,146
extract insights.


1163
00:31:30,666 --> 00:31:32,676
These insights are what show up


1164
00:31:32,676 --> 00:31:34,086
in metrics organizer.


1165
00:31:35,396 --> 00:31:37,016
Please note that insights only


1166
00:31:37,016 --> 00:31:38,856
show up in metrics organizer if


1167
00:31:38,856 --> 00:31:40,436
there is enough usage of your


1168
00:31:40,706 --> 00:31:41,816
app that meet our threshold.


1169
00:31:43,186 --> 00:31:45,176
And all of this is available


1170
00:31:45,176 --> 00:31:47,396
out-of-the-box with no changes


1171
00:31:47,396 --> 00:31:49,486
to your app or your development


1172
00:31:49,486 --> 00:31:51,286
process, and is available for


1173
00:31:51,286 --> 00:31:51,846
you today.


1174
00:31:52,736 --> 00:31:55,396
Now, without further ado, let's


1175
00:31:55,436 --> 00:31:56,226
jump into the demo.


1176
00:31:57,516 --> 00:32:02,846
[ Applause ]


1177
00:32:03,346 --> 00:32:05,496
So, to open Metrics Organizer,


1178
00:32:05,646 --> 00:32:07,686
go to window, organizer.


1179
00:32:08,226 --> 00:32:10,566
That brings up a familiar


1180
00:32:10,566 --> 00:32:12,356
organizer window with archive,


1181
00:32:12,476 --> 00:32:14,096
crashes, and energy tab, and


1182
00:32:14,096 --> 00:32:16,106
brand-new tab called metrics.


1183
00:32:16,826 --> 00:32:19,416
If you click on metrics, you see


1184
00:32:19,476 --> 00:32:21,006
all your apps on the left-hand


1185
00:32:21,006 --> 00:32:23,066
side that you have published to


1186
00:32:23,066 --> 00:32:24,516
the iOS app store.


1187
00:32:25,426 --> 00:32:27,286
Let's say our awesome photo app


1188
00:32:27,356 --> 00:32:29,666
that we publish shows up here.


1189
00:32:29,666 --> 00:32:31,366
When we click that awesome photo


1190
00:32:31,366 --> 00:32:33,516
app, metrics around that app


1191
00:32:33,806 --> 00:32:35,256
show up in the middle pane.


1192
00:32:35,366 --> 00:32:37,286
So, metrics like battery life,


1193
00:32:37,286 --> 00:32:38,836
launch time, hang rate memory,


1194
00:32:38,836 --> 00:32:39,466
and disk write.


1195
00:32:39,886 --> 00:32:41,556
Metrics that we think that you


1196
00:32:41,556 --> 00:32:43,196
should consider for an awesome


1197
00:32:43,196 --> 00:32:44,996
app experience show up here.


1198
00:32:46,306 --> 00:32:47,666
When you click on a metrics,


1199
00:32:47,806 --> 00:32:49,376
details about the metrics show


1200
00:32:49,376 --> 00:32:50,556
up on the right-hand side.


1201
00:32:50,986 --> 00:32:52,466
You can look at the metrics for


1202
00:32:52,466 --> 00:32:55,276
a given version of an app or you


1203
00:32:55,276 --> 00:32:56,766
can compare it with a previous


1204
00:32:56,766 --> 00:32:57,176
version.


1205
00:32:57,176 --> 00:32:58,176
So, X axis is here.


1206
00:32:58,176 --> 00:33:00,456
It represents app version and Y


1207
00:33:00,456 --> 00:33:02,466
axis represent the metric value.


1208
00:33:03,486 --> 00:33:05,666
Let's start by looking at the


1209
00:33:05,666 --> 00:33:06,826
battery metrics.


1210
00:33:07,376 --> 00:33:10,136
Two kinds of metrics show up for


1211
00:33:10,136 --> 00:33:10,526
a battery.


1212
00:33:10,526 --> 00:33:11,946
The first one is onscreen


1213
00:33:11,946 --> 00:33:13,166
battery usage.


1214
00:33:13,516 --> 00:33:15,576
That is the amount of energy


1215
00:33:15,576 --> 00:33:18,186
that is drained when a user is


1216
00:33:18,186 --> 00:33:19,446
interacting with your app


1217
00:33:20,276 --> 00:33:20,896
onscreen.


1218
00:33:20,896 --> 00:33:22,526
And then background battery


1219
00:33:22,526 --> 00:33:23,896
usage is amount of battery


1220
00:33:23,896 --> 00:33:26,226
drained when, if the app is


1221
00:33:26,226 --> 00:33:27,266
running in the background.


1222
00:33:28,006 --> 00:33:30,326
Now, and each of these metrics


1223
00:33:30,326 --> 00:33:32,476
are further subdivided by system


1224
00:33:32,476 --> 00:33:34,466
components like processing,


1225
00:33:34,466 --> 00:33:37,056
networking, display location, so


1226
00:33:37,056 --> 00:33:38,906
that you get an idea of which of


1227
00:33:38,906 --> 00:33:40,536
these components are consuming


1228
00:33:40,786 --> 00:33:41,736
most of the energy.


1229
00:33:42,066 --> 00:33:44,826
Let's start with the background


1230
00:33:45,006 --> 00:33:47,086
battery usage, because we know


1231
00:33:47,086 --> 00:33:48,876
our awesome photo app is


1232
00:33:48,876 --> 00:33:49,786
foreground only.


1233
00:33:50,676 --> 00:33:52,406
But looking at the background,


1234
00:33:52,566 --> 00:33:53,876
it seems like it's consuming


1235
00:33:53,876 --> 00:33:56,006
around 10% of the user battery


1236
00:33:56,006 --> 00:33:57,796
daily, which is pretty high.


1237
00:33:59,006 --> 00:34:00,606
Out of this, it seems like


1238
00:34:00,686 --> 00:34:03,526
processing is consuming 5% and


1239
00:34:03,526 --> 00:34:06,336
networking is consuming 3.66%,


1240
00:34:06,646 --> 00:34:08,096
which is quite high and we need


1241
00:34:08,096 --> 00:34:09,696
to debug it further to figure


1242
00:34:09,696 --> 00:34:12,295
out why the app is consuming


1243
00:34:12,295 --> 00:34:13,906
battery in the background.


1244
00:34:17,426 --> 00:34:18,906
Let's look at the latest version


1245
00:34:18,906 --> 00:34:20,505
of the app when it is onscreen.


1246
00:34:21,216 --> 00:34:22,295
The latest version of the app


1247
00:34:22,525 --> 00:34:24,585
when it is onscreen seems like


1248
00:34:24,585 --> 00:34:27,656
there is a 10% degradation in


1249
00:34:27,656 --> 00:34:29,166
the latest version as compared


1250
00:34:29,166 --> 00:34:30,196
to the prior version.


1251
00:34:30,826 --> 00:34:32,985
Of which, display seems to be


1252
00:34:33,755 --> 00:34:34,226
static.


1253
00:34:34,656 --> 00:34:35,786
There is a slight increase in


1254
00:34:35,786 --> 00:34:37,016
networking and decrease in


1255
00:34:37,016 --> 00:34:38,775
other, but the main culprit here


1256
00:34:38,775 --> 00:34:40,146
is processing.


1257
00:34:40,946 --> 00:34:42,815
We can look at this data for the


1258
00:34:42,815 --> 00:34:44,186
90 the percentile user


1259
00:34:44,186 --> 00:34:46,746
population or look at the 50th


1260
00:34:46,786 --> 00:34:48,286
percentile user population to


1261
00:34:48,286 --> 00:34:49,786
see if the user population is


1262
00:34:49,846 --> 00:34:52,065
playing any role in battery


1263
00:34:52,065 --> 00:34:52,335
drain.


1264
00:34:53,186 --> 00:34:55,206
We can also look at this data


1265
00:34:55,606 --> 00:34:59,326
for all iPhone categories or all


1266
00:34:59,326 --> 00:35:01,546
iPad categories, or we can jump


1267
00:35:01,586 --> 00:35:03,016
to individual devices.


1268
00:35:03,496 --> 00:35:04,696
Let's jump to, let's say,


1269
00:35:04,696 --> 00:35:06,346
individual device called iPhone


1270
00:35:06,346 --> 00:35:06,786
6.


1271
00:35:07,546 --> 00:35:10,446
For iPhone 6, it seems like the


1272
00:35:10,446 --> 00:35:11,996
battery drain is pretty static.


1273
00:35:12,376 --> 00:35:15,996
Slight decrease in 1.0.8 as


1274
00:35:16,156 --> 00:35:17,886
compared to 1.0.7.


1275
00:35:18,776 --> 00:35:20,196
Let's look at a newer version of


1276
00:35:20,196 --> 00:35:21,916
the device like iPhone X.


1277
00:35:22,506 --> 00:35:24,986
Ah, iPhone X has a big jump.


1278
00:35:25,156 --> 00:35:28,256
If you see here, there's a 14.4%


1279
00:35:28,256 --> 00:35:30,956
jump from the prior version and


1280
00:35:30,956 --> 00:35:32,326
the main culprit here is


1281
00:35:32,376 --> 00:35:32,886
processing.


1282
00:35:32,886 --> 00:35:34,716
There are a couple of ways we


1283
00:35:34,716 --> 00:35:36,456
can debug this further.


1284
00:35:36,456 --> 00:35:39,146
We can directly jump to our code


1285
00:35:39,566 --> 00:35:41,896
or we can jump to our familiar


1286
00:35:41,896 --> 00:35:43,446
energy tab that we saw last


1287
00:35:43,446 --> 00:35:43,666
year.


1288
00:35:44,456 --> 00:35:46,616
Energy tab shows you energy


1289
00:35:46,616 --> 00:35:47,876
exception reports from the


1290
00:35:47,966 --> 00:35:48,346
field.


1291
00:35:49,006 --> 00:35:50,526
You can look at the stack frame


1292
00:35:50,526 --> 00:35:52,426
to figure out where it is


1293
00:35:52,426 --> 00:35:54,026
consuming the most energy.


1294
00:35:54,546 --> 00:35:58,466
I know Ashish was talking about


1295
00:35:58,466 --> 00:36:00,626
a new feature that he added only


1296
00:36:00,626 --> 00:36:03,136
for the newer devices and 1.0.8


1297
00:36:03,136 --> 00:36:05,596
version of our app,


1298
00:36:05,596 --> 00:36:07,296
applyFilter caused it so we can go


1299
00:36:07,296 --> 00:36:08,726
there and start debugging it.


1300
00:36:09,056 --> 00:36:10,886
So, this is one way we have


1301
00:36:10,886 --> 00:36:13,736
shown you can use metrics and


1302
00:36:13,736 --> 00:36:15,656
energy tab to figure out the


1303
00:36:15,656 --> 00:36:17,086
problem and fix the problem.


1304
00:36:17,626 --> 00:36:20,646
Now, let's look at the other


1305
00:36:20,646 --> 00:36:21,986
metrics that are available.


1306
00:36:22,446 --> 00:36:24,616
Launch time is pretty important


1307
00:36:24,616 --> 00:36:26,796
to our users because apps that


1308
00:36:26,796 --> 00:36:28,756
are slow to launch can frustrate


1309
00:36:28,756 --> 00:36:29,536
our users.


1310
00:36:29,816 --> 00:36:31,796
Ideally, a launch time should be


1311
00:36:31,796 --> 00:36:32,736
in low seconds.


1312
00:36:33,166 --> 00:36:36,286
Our awesome photo app for all


1313
00:36:36,286 --> 00:36:38,596
iPhones is taking around 6


1314
00:36:38,596 --> 00:36:39,556
seconds to launch.


1315
00:36:39,856 --> 00:36:41,616
You can use the tools that


1316
00:36:41,616 --> 00:36:43,306
Sastry talked about in his


1317
00:36:43,306 --> 00:36:45,536
earlier demo to debug it


1318
00:36:45,586 --> 00:36:45,956
further.


1319
00:36:47,246 --> 00:36:49,806
Hang time is unresponsive time


1320
00:36:49,806 --> 00:36:51,786
of your app, in seconds per


1321
00:36:51,786 --> 00:36:52,136
hour.


1322
00:36:52,606 --> 00:36:54,446
Ideally, the hang time should be


1323
00:36:54,446 --> 00:36:56,516
0 to avoid user frustration.


1324
00:36:57,056 --> 00:37:00,316
We showed two kinds of memory -


1325
00:37:00,386 --> 00:37:02,286
peak memory and average memory.


1326
00:37:02,796 --> 00:37:04,156
Memory is a resource and we


1327
00:37:04,156 --> 00:37:06,546
should be, we should only use


1328
00:37:06,546 --> 00:37:07,916
what is absolutely needed.


1329
00:37:09,136 --> 00:37:12,316
Disk write is the logical writes


1330
00:37:12,316 --> 00:37:13,396
your app is doing.


1331
00:37:14,026 --> 00:37:15,466
we need to be mindful of how


1332
00:37:15,466 --> 00:37:19,206
much write we are doing and we


1333
00:37:19,206 --> 00:37:20,746
can use Instruments to debug it


1334
00:37:20,746 --> 00:37:20,976
further.


1335
00:37:24,046 --> 00:37:26,166
Now, that was Xcode Metrics


1336
00:37:26,166 --> 00:37:28,426
Organizer, an out-of-the-box


1337
00:37:28,566 --> 00:37:30,856
tool to view your battery and


1338
00:37:30,906 --> 00:37:33,116
performance analytics and start


1339
00:37:33,196 --> 00:37:34,946
debugging the problems around


1340
00:37:35,086 --> 00:37:38,346
high battery drain, performance


1341
00:37:38,786 --> 00:37:40,956
like high launch time.


1342
00:37:41,226 --> 00:37:44,186
You can detect, you can look at


1343
00:37:44,186 --> 00:37:46,146
the data for the latest version


1344
00:37:46,146 --> 00:37:47,786
of the app, compare it with the


1345
00:37:47,786 --> 00:37:49,606
prior version, and create a


1346
00:37:49,606 --> 00:37:50,096
baseline.


1347
00:37:50,686 --> 00:37:53,026
And this tool is available today


1348
00:37:53,026 --> 00:37:54,826
to you without any changes to


1349
00:37:54,826 --> 00:37:56,826
your app or your development


1350
00:37:56,826 --> 00:37:57,346
lifecycle.


1351
00:37:57,726 --> 00:38:00,286
So, please, try to use it and


1352
00:38:00,286 --> 00:38:01,246
let us know the feedback.


1353
00:38:01,446 --> 00:38:02,256
Thank you very much for


1354
00:38:02,256 --> 00:38:03,526
listening, and back to Phil.


1355
00:38:04,516 --> 00:38:08,156
[ Applause ]


1356
00:38:08,656 --> 00:38:09,206
>> Thank you, Anshul.


1357
00:38:09,206 --> 00:38:12,746
We saw those great tools and I


1358
00:38:12,746 --> 00:38:13,626
want to talk quickly about a


1359
00:38:13,626 --> 00:38:14,706
summary of everything we spoke


1360
00:38:14,706 --> 00:38:15,136
about today.


1361
00:38:16,456 --> 00:38:17,236
We talked about the tools that


1362
00:38:17,236 --> 00:38:18,906
were available before Xcode 11


1363
00:38:19,256 --> 00:38:20,686
to debug and understand your


1364
00:38:20,686 --> 00:38:22,276
power and performance impact on


1365
00:38:22,406 --> 00:38:22,946
device.


1366
00:38:23,676 --> 00:38:25,166
And then we showed you some new


1367
00:38:25,166 --> 00:38:26,126
tools that we think are really


1368
00:38:26,126 --> 00:38:27,286
powerful and are going to help


1369
00:38:27,286 --> 00:38:29,146
take your quantification of your


1370
00:38:29,146 --> 00:38:30,026
performance and battery life


1371
00:38:30,026 --> 00:38:31,296
impact to the next level.


1372
00:38:31,766 --> 00:38:32,936
And a set of metrics that you'll


1373
00:38:32,936 --> 00:38:34,126
be able to collect from those


1374
00:38:34,126 --> 00:38:35,696
tools to be able to understand


1375
00:38:36,056 --> 00:38:37,326
and debug your code further.


1376
00:38:37,916 --> 00:38:39,806
If you take anything away from


1377
00:38:39,806 --> 00:38:41,616
this demo, I want you to leave


1378
00:38:41,616 --> 00:38:43,056
knowing that we've built three


1379
00:38:43,056 --> 00:38:44,656
great tools for you and we'd


1380
00:38:44,656 --> 00:38:45,846
love to hear your feedback about


1381
00:38:45,846 --> 00:38:46,046
them.


1382
00:38:46,486 --> 00:38:47,576
And these tools are going to


1383
00:38:47,576 --> 00:38:49,106
help you quantify the impact


1384
00:38:49,376 --> 00:38:50,466
that your application has on


1385
00:38:50,466 --> 00:38:51,656
battery life and performance.


1386
00:38:52,716 --> 00:38:54,146
And that quantification is going


1387
00:38:54,146 --> 00:38:55,196
to be able to help you make


1388
00:38:55,196 --> 00:38:56,586
decisions about your application


1389
00:38:56,986 --> 00:38:58,076
to better your experience for


1390
00:38:58,076 --> 00:38:58,876
all your users.


1391
00:39:00,146 --> 00:39:02,386
For more information, go online


1392
00:39:02,386 --> 00:39:03,406
and check out our session


1393
00:39:03,406 --> 00:39:04,136
documentation.


1394
00:39:05,066 --> 00:39:06,906
Or, visit us at the Power and


1395
00:39:06,906 --> 00:39:09,286
Performance Lab tomorrow, and


1396
00:39:09,286 --> 00:39:10,316
we'd love to see you there and


1397
00:39:10,316 --> 00:39:10,946
walk you through how to


1398
00:39:10,946 --> 00:39:12,026
implement these tools in your


1399
00:39:12,026 --> 00:39:13,616
application and use them to make


1400
00:39:13,616 --> 00:39:14,696
your experiences great for your


1401
00:39:14,696 --> 00:39:15,146
users.


1402
00:39:15,786 --> 00:39:16,406
Don't forget about the


1403
00:39:16,406 --> 00:39:17,526
Optimizing App Launch talk


1404
00:39:17,526 --> 00:39:18,716
tomorrow, where they'll go in


1405
00:39:18,716 --> 00:39:19,796
depth about app launch


1406
00:39:19,796 --> 00:39:20,406
performance.


1407
00:39:21,256 --> 00:39:22,166
Thanks again for coming and


1408
00:39:22,246 --> 00:39:22,976
enjoy the rest of your WWDC.


1409
00:39:23,516 --> 00:39:27,500
[ Applause ]

