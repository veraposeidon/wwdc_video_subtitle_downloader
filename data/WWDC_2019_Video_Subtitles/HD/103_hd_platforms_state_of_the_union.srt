1
00:00:01,516 --> 00:00:06,546
[ Music ]


2
00:00:07,046 --> 00:00:07,626
>> Good afternoon, ladies and


3
00:00:07,626 --> 00:00:07,966
gentlemen.


4
00:00:08,786 --> 00:00:10,206
Please welcome Vice President of


5
00:00:10,206 --> 00:00:12,366
Software Sebastien Marineau-Mes.


6
00:00:13,516 --> 00:00:23,756
[ Applause ]


7
00:00:24,256 --> 00:00:25,626
>> Good afternoon, everyone, and


8
00:00:25,626 --> 00:00:28,046
welcome to WWDC.


9
00:00:28,046 --> 00:00:29,536
Did we love the morning keynote?


10
00:00:30,161 --> 00:00:32,161
[ Applause ]


11
00:00:32,305 --> 00:00:32,886
There you go.


12
00:00:33,016 --> 00:00:34,556
[ Applause ]


13
00:00:34,556 --> 00:00:36,206
Now this year is one of our


14
00:00:36,256 --> 00:00:38,156
biggest for developers and we're


15
00:00:38,156 --> 00:00:39,366
really excited to show you what


16
00:00:39,366 --> 00:00:40,926
we've been working on and see


17
00:00:40,926 --> 00:00:41,816
what you think.


18
00:00:42,636 --> 00:00:44,126
This morning's keynote was just


19
00:00:44,176 --> 00:00:45,656
a taste of what's happening this


20
00:00:45,756 --> 00:00:45,986
year.


21
00:00:46,406 --> 00:00:47,836
There is so much more that we


22
00:00:47,836 --> 00:00:49,026
want to share, and this


23
00:00:49,026 --> 00:00:50,076
afternoon we're going to focus


24
00:00:50,116 --> 00:00:51,506
on the areas that matter most to


25
00:00:51,586 --> 00:00:52,956
you as developers.


26
00:00:53,516 --> 00:00:54,586
Are you ready to hear more?


27
00:00:55,016 --> 00:00:56,386
[ Applause ]


28
00:00:56,386 --> 00:00:56,626
There we go.


29
00:00:58,046 --> 00:00:59,616
Now we've taken a huge step in


30
00:00:59,616 --> 00:01:01,036
terms of developer experience


31
00:01:01,036 --> 00:01:03,136
this year with the new SwiftUI


32
00:01:03,416 --> 00:01:05,096
framework as well as great


33
00:01:05,146 --> 00:01:07,176
interactive tools in Xcode.


34
00:01:08,316 --> 00:01:09,696
And we've really seen each of


35
00:01:09,696 --> 00:01:11,976
our platforms get even deeper at


36
00:01:11,976 --> 00:01:12,916
what they do best.


37
00:01:13,326 --> 00:01:14,366
We have powerful new pro


38
00:01:14,366 --> 00:01:16,326
capabilities for Mac, and new


39
00:01:16,326 --> 00:01:18,256
Dark Mode and rich updates --


40
00:01:18,836 --> 00:01:20,526
sorry, independence for watchOS.


41
00:01:21,546 --> 00:01:23,776
On iOS, a new Dark Mode and


42
00:01:23,776 --> 00:01:24,636
great app updates.


43
00:01:25,906 --> 00:01:27,806
And finally, on iPadOS, a


44
00:01:27,806 --> 00:01:29,476
powerful operating system that


45
00:01:29,476 --> 00:01:30,626
now stands on its own.


46
00:01:31,176 --> 00:01:33,036
Sorry, the monitors aren't


47
00:01:33,036 --> 00:01:33,576
working down here.


48
00:01:34,516 --> 00:01:36,856
[ Laughter ]


49
00:01:37,356 --> 00:01:37,746
There we go.


50
00:01:38,016 --> 00:01:38,986
One of those is working, so I


51
00:01:38,986 --> 00:01:39,866
will go over to the left.


52
00:01:40,606 --> 00:01:42,096
Now these platforms represent a


53
00:01:42,276 --> 00:01:44,246
diverse range of devices and


54
00:01:44,246 --> 00:01:45,416
building great support for them


55
00:01:45,416 --> 00:01:47,176
is easy, thanks to a choice of


56
00:01:47,176 --> 00:01:48,666
many tools and APIs like


57
00:01:49,166 --> 00:01:51,616
AutoLayout, Size Classes and


58
00:01:51,676 --> 00:01:52,076
SwiftUI.


59
00:01:53,026 --> 00:01:54,416
So no more letterbox.


60
00:01:54,416 --> 00:01:55,606
Your users get the best


61
00:01:55,606 --> 00:01:57,266
experience when your app works


62
00:01:57,386 --> 00:01:59,096
well on a wide range of device


63
00:01:59,166 --> 00:01:59,626
sizes.


64
00:02:00,166 --> 00:02:01,586
And starting next spring, it


65
00:02:01,676 --> 00:02:03,126
will be an app store requirement


66
00:02:03,126 --> 00:02:05,196
to deliver UI that adapts to


67
00:02:05,196 --> 00:02:06,126
different screen sizes.


68
00:02:06,706 --> 00:02:09,876
Now tvOS is offering cool new


69
00:02:09,876 --> 00:02:10,316
capabilities --


70
00:02:12,016 --> 00:02:14,016
[ Laughter ]


71
00:02:14,016 --> 00:02:15,566
[ Applause ]


72
00:02:15,566 --> 00:02:15,776
There we go.


73
00:02:17,516 --> 00:02:20,776
[ Applause ]


74
00:02:21,276 --> 00:02:22,646
Now tvOS is offering cool new


75
00:02:22,646 --> 00:02:24,126
capabilities for developers this


76
00:02:24,226 --> 00:02:25,946
year, including multi-user


77
00:02:26,016 --> 00:02:27,726
support for third-party apps,


78
00:02:27,856 --> 00:02:29,316
new UI elements and options,


79
00:02:29,716 --> 00:02:31,946
SwiftUI and of course support


80
00:02:31,946 --> 00:02:34,126
for Xbox and PlayStation game


81
00:02:34,126 --> 00:02:34,936
controllers.


82
00:02:35,191 --> 00:02:37,191
[ Applause ]


83
00:02:37,366 --> 00:02:39,146
Now this morning we announced an


84
00:02:39,146 --> 00:02:41,196
incredible new hardware platform


85
00:02:41,196 --> 00:02:42,336
with the new Mac Pro.


86
00:02:42,336 --> 00:02:42,976
Do we love it?


87
00:02:43,516 --> 00:02:45,546
[ Applause ]


88
00:02:46,046 --> 00:02:47,346
It is incredible, and it will


89
00:02:47,346 --> 00:02:49,036
really unlock amazing new kinds


90
00:02:49,036 --> 00:02:49,396
of apps.


91
00:02:50,846 --> 00:02:52,316
And we also built technologies


92
00:02:52,626 --> 00:02:54,436
that span all of our platforms,


93
00:02:54,436 --> 00:02:56,006
and we'll have a look at a few


94
00:02:56,006 --> 00:02:58,066
of these areas today, including


95
00:02:58,066 --> 00:03:00,646
accessibility, privacy, machine


96
00:03:00,646 --> 00:03:02,666
learning, Siri, augmented


97
00:03:02,666 --> 00:03:04,756
reality and finally Metal.


98
00:03:06,166 --> 00:03:07,576
Now we want to focus on these


99
00:03:07,576 --> 00:03:08,986
three big areas this afternoon,


100
00:03:08,986 --> 00:03:09,926
and we're going to start with


101
00:03:09,926 --> 00:03:11,046
developer productivity.


102
00:03:11,956 --> 00:03:13,836
Now everyone in this room knows


103
00:03:13,836 --> 00:03:15,186
that great tools can


104
00:03:15,186 --> 00:03:16,366
dramatically improve your


105
00:03:16,366 --> 00:03:17,036
productivity.


106
00:03:17,596 --> 00:03:19,466
Great tools give you more time


107
00:03:19,516 --> 00:03:21,136
to be creative and they let you


108
00:03:21,136 --> 00:03:22,376
build better apps.


109
00:03:23,296 --> 00:03:24,316
And the foundation of that


110
00:03:24,316 --> 00:03:26,106
experience is the programming


111
00:03:26,106 --> 00:03:26,606
language.


112
00:03:27,256 --> 00:03:29,226
Over the last five years, Swift


113
00:03:29,226 --> 00:03:31,326
has matured and is built into


114
00:03:31,326 --> 00:03:32,706
every Apple platform.


115
00:03:33,256 --> 00:03:34,386
And Swift gives us the


116
00:03:34,386 --> 00:03:36,156
foundation for SwiftUI.


117
00:03:37,226 --> 00:03:39,446
And Xcode is so much more than a


118
00:03:39,446 --> 00:03:41,456
code debugger -- sorry, code


119
00:03:41,456 --> 00:03:42,646
editor and debugger.


120
00:03:43,176 --> 00:03:44,456
It includes everything that you


121
00:03:44,456 --> 00:03:46,736
need to build an app, including


122
00:03:47,036 --> 00:03:48,186
support for continuous


123
00:03:48,186 --> 00:03:49,486
integration and testing.


124
00:03:49,736 --> 00:03:52,166
And it gives you tools that let


125
00:03:52,166 --> 00:03:54,026
you explore new technologies


126
00:03:54,396 --> 00:03:55,906
such as machine learning and


127
00:03:55,906 --> 00:03:56,826
augmented reality.


128
00:03:57,766 --> 00:03:59,536
And finally, built on the strong


129
00:03:59,606 --> 00:04:01,416
foundation of our platforms, the


130
00:04:01,516 --> 00:04:02,826
SwiftUI framework will


131
00:04:02,826 --> 00:04:04,996
revolutionize how you build user


132
00:04:04,996 --> 00:04:05,656
interfaces.


133
00:04:05,836 --> 00:04:07,116
And together, these three


134
00:04:07,116 --> 00:04:08,716
elements deliver a whole new


135
00:04:08,716 --> 00:04:10,486
level of productivity and they


136
00:04:10,486 --> 00:04:12,546
will fundamentally transform how


137
00:04:12,546 --> 00:04:14,006
all of you build apps.


138
00:04:14,926 --> 00:04:16,755
Now, are you ready to dive right


139
00:04:16,755 --> 00:04:17,446
into SwiftUI?


140
00:04:18,036 --> 00:04:20,036
[ Applause ]


141
00:04:20,055 --> 00:04:21,786
Let's have Josh come up and tell


142
00:04:21,786 --> 00:04:22,186
us more.


143
00:04:22,266 --> 00:04:22,506
Josh?


144
00:04:23,516 --> 00:04:25,806
[ Applause ]


145
00:04:26,306 --> 00:04:27,116
>> Thanks, Sebastien.


146
00:04:27,916 --> 00:04:31,336
Okay, so SwiftUI, as you saw


147
00:04:31,336 --> 00:04:32,536
this morning, is a brand-new


148
00:04:32,536 --> 00:04:33,926
user interface framework built


149
00:04:34,016 --> 00:04:36,526
from the ground up in Swift for


150
00:04:36,526 --> 00:04:36,876
Swift.


151
00:04:37,756 --> 00:04:38,816
We designed it to let you write


152
00:04:38,976 --> 00:04:40,696
less code and have the code that


153
00:04:40,696 --> 00:04:42,346
you do write be better code,


154
00:04:42,886 --> 00:04:44,186
while letting you use more of


155
00:04:44,186 --> 00:04:46,046
that code across all Apple


156
00:04:46,046 --> 00:04:46,576
platforms.


157
00:04:47,646 --> 00:04:49,086
Now first of all, there's so


158
00:04:49,086 --> 00:04:50,436
much functionality built into


159
00:04:50,436 --> 00:04:52,056
each individual line that you


160
00:04:52,106 --> 00:04:53,286
write that you're just going to


161
00:04:53,286 --> 00:04:54,636
write way less code.


162
00:04:55,516 --> 00:04:56,356
So let's take the app for


163
00:04:56,466 --> 00:04:57,806
choosing macOS release names


164
00:04:57,806 --> 00:04:58,796
that we looked at this morning,


165
00:04:59,246 --> 00:05:00,026
but without the animated


166
00:05:00,026 --> 00:05:00,556
transitions.


167
00:05:01,476 --> 00:05:02,376
If you've written an app with


168
00:05:02,376 --> 00:05:04,276
UIKit before, you know the types


169
00:05:04,276 --> 00:05:05,896
of pieces that you need in order


170
00:05:05,896 --> 00:05:06,786
to build this interface.


171
00:05:07,606 --> 00:05:09,476
It's not a lot of views, but


172
00:05:09,476 --> 00:05:10,686
there are many individual


173
00:05:10,686 --> 00:05:11,836
details that you need to get


174
00:05:11,836 --> 00:05:12,016
right.


175
00:05:12,886 --> 00:05:15,136
With SwiftUI, it is way less


176
00:05:15,236 --> 00:05:15,536
code.


177
00:05:16,156 --> 00:05:18,256
Fewer than 20 lines focused on


178
00:05:18,256 --> 00:05:19,706
just three key things.


179
00:05:20,666 --> 00:05:22,636
First, a few lines to define the


180
00:05:22,696 --> 00:05:23,766
structure and layout of your


181
00:05:23,766 --> 00:05:24,126
views.


182
00:05:24,766 --> 00:05:27,456
Then some image and text views


183
00:05:27,866 --> 00:05:28,836
to display your content.


184
00:05:30,346 --> 00:05:31,726
And finally, parameters and


185
00:05:31,726 --> 00:05:33,366
modifiers to adjust how it all


186
00:05:33,366 --> 00:05:33,506
looks.


187
00:05:34,636 --> 00:05:35,706
Now let' stake a look a little


188
00:05:35,706 --> 00:05:36,896
bit more closely at just a few


189
00:05:36,896 --> 00:05:37,456
of these lines.


190
00:05:38,456 --> 00:05:39,726
The scrolling list itself is


191
00:05:39,786 --> 00:05:41,536
barely any code at all.


192
00:05:41,846 --> 00:05:43,556
You just declare the list and


193
00:05:43,666 --> 00:05:45,076
then describe the model objects


194
00:05:45,076 --> 00:05:46,476
to be used in each row.


195
00:05:46,796 --> 00:05:48,146
There's no setup, there's no


196
00:05:48,146 --> 00:05:49,656
configuration and there's no


197
00:05:49,656 --> 00:05:50,116
callbacks.


198
00:05:50,116 --> 00:05:52,596
Now the image at the top is just


199
00:05:52,596 --> 00:05:53,106
as simple.


200
00:05:53,456 --> 00:05:54,896
You display an image, clip it to


201
00:05:54,896 --> 00:05:56,416
a circle and add a shadow.


202
00:05:56,416 --> 00:05:58,906
And it's not just less code.


203
00:05:59,026 --> 00:05:59,846
It's better code.


204
00:06:00,656 --> 00:06:02,716
We designed the API to make the


205
00:06:02,716 --> 00:06:04,336
obvious approach be the right


206
00:06:04,336 --> 00:06:04,846
approach.


207
00:06:05,796 --> 00:06:07,096
The right way to create this


208
00:06:07,096 --> 00:06:09,036
label is exactly the one line of


209
00:06:09,086 --> 00:06:09,986
code that you would think to


210
00:06:09,986 --> 00:06:10,186
write.


211
00:06:10,786 --> 00:06:12,506
It supports dynamic type, Dark


212
00:06:12,506 --> 00:06:13,216
Mode and more.


213
00:06:13,856 --> 00:06:15,006
In fact, even the string


214
00:06:15,006 --> 00:06:16,826
interpolation used here is fully


215
00:06:16,826 --> 00:06:17,516
localizable.


216
00:06:18,706 --> 00:06:19,906
This simplicity eliminates


217
00:06:19,906 --> 00:06:21,576
entire categories of errors.


218
00:06:22,436 --> 00:06:23,646
Looking at our list again, its


219
00:06:23,646 --> 00:06:25,476
rows update automatically if the


220
00:06:25,476 --> 00:06:27,256
model changes, ensuring that


221
00:06:27,256 --> 00:06:28,996
your UI is always up to date and


222
00:06:28,996 --> 00:06:30,276
never displaying out-of-date


223
00:06:30,276 --> 00:06:30,396
data.


224
00:06:30,526 --> 00:06:33,496
And it's easy to read too.


225
00:06:33,596 --> 00:06:34,676
The code for this image with a


226
00:06:34,676 --> 00:06:36,336
corner radius of three says


227
00:06:36,366 --> 00:06:37,226
exactly that.


228
00:06:38,296 --> 00:06:39,946
Reading SwiftUI is like having


229
00:06:39,976 --> 00:06:41,306
someone explain that interface


230
00:06:41,416 --> 00:06:41,776
to you.


231
00:06:42,556 --> 00:06:44,296
And SwiftUi's code is available


232
00:06:44,296 --> 00:06:46,626
everywhere, helping you reuse


233
00:06:46,626 --> 00:06:48,156
more of your code across all


234
00:06:48,156 --> 00:06:48,886
Apple platforms.


235
00:06:48,886 --> 00:06:50,586
Now you've long been able to


236
00:06:50,586 --> 00:06:52,116
share your model and low-level


237
00:06:52,196 --> 00:06:53,556
drawing and compositing code,


238
00:06:54,256 --> 00:06:55,596
but higher-level UI code has


239
00:06:55,596 --> 00:06:56,306
remained mostly


240
00:06:56,306 --> 00:06:57,106
platform-specific.


241
00:06:57,926 --> 00:06:59,306
With SwiftUI, we're raising that


242
00:06:59,336 --> 00:07:01,076
bar, enabling you to share far


243
00:07:01,076 --> 00:07:01,416
more.


244
00:07:02,046 --> 00:07:03,116
Now of course you're still going


245
00:07:03,116 --> 00:07:04,076
to want to tailor your


246
00:07:04,076 --> 00:07:05,776
interfaces for each individual


247
00:07:05,776 --> 00:07:07,606
platform to ensure that your app


248
00:07:07,606 --> 00:07:09,116
feels great everywhere that you


249
00:07:09,116 --> 00:07:10,436
deploy it.


250
00:07:10,556 --> 00:07:12,106
But with SwiftUI's common set of


251
00:07:12,106 --> 00:07:13,756
API patterns, you can learn


252
00:07:13,756 --> 00:07:15,636
those tools once and then apply


253
00:07:15,636 --> 00:07:17,326
them everywhere, getting you a


254
00:07:17,326 --> 00:07:18,896
native interface on each


255
00:07:18,956 --> 00:07:19,926
platform you deploy to.


256
00:07:20,946 --> 00:07:22,206
SwiftUI is designed with a


257
00:07:22,446 --> 00:07:24,086
strong set of four core


258
00:07:24,086 --> 00:07:24,566
principles.


259
00:07:25,346 --> 00:07:27,336
First, a declarative syntax


260
00:07:27,336 --> 00:07:29,146
shifts UI programming away from


261
00:07:29,296 --> 00:07:31,096
how to update the screen and


262
00:07:31,096 --> 00:07:32,556
instead lets you just focus on


263
00:07:32,556 --> 00:07:33,466
what you want to display.


264
00:07:34,566 --> 00:07:35,626
For example, let's say that you


265
00:07:35,626 --> 00:07:36,586
want to build a label with a


266
00:07:36,626 --> 00:07:38,366
headline font and a gray color.


267
00:07:39,096 --> 00:07:40,856
Describing how to get that is a


268
00:07:40,856 --> 00:07:42,816
multi-step process with many


269
00:07:42,816 --> 00:07:44,086
steps having to happen in a


270
00:07:44,156 --> 00:07:44,916
specific order.


271
00:07:45,646 --> 00:07:48,146
But describing what you want


272
00:07:48,236 --> 00:07:49,466
requires no translation.


273
00:07:50,046 --> 00:07:52,776
Text that says Done with a font


274
00:07:52,776 --> 00:07:54,186
for a headline that's colored


275
00:07:54,226 --> 00:07:54,506
gray.


276
00:07:55,316 --> 00:07:57,106
SwiftUI lets you say exactly


277
00:07:57,106 --> 00:07:58,606
that with a great new


278
00:07:58,606 --> 00:07:59,616
declarative syntax.


279
00:07:59,616 --> 00:08:01,326
And it's the minimum code


280
00:08:01,326 --> 00:08:03,106
necessary to describe exactly


281
00:08:03,106 --> 00:08:03,616
your idea.


282
00:08:03,616 --> 00:08:05,396
And iteration becomes


283
00:08:05,396 --> 00:08:06,846
significantly faster as well.


284
00:08:07,316 --> 00:08:08,776
If you later need to change that


285
00:08:08,826 --> 00:08:10,516
label to become a button, that's


286
00:08:10,516 --> 00:08:11,536
a one-line change.


287
00:08:12,081 --> 00:08:14,081
[ Applause ]


288
00:08:14,146 --> 00:08:15,026
I know, it's pretty great.


289
00:08:16,516 --> 00:08:19,546
[ Applause ]


290
00:08:20,046 --> 00:08:20,626
All right, so our second


291
00:08:20,626 --> 00:08:21,846
principle is that we should


292
00:08:21,846 --> 00:08:23,246
provide automatic functionality


293
00:08:23,246 --> 00:08:24,316
whenever it's possible.


294
00:08:24,816 --> 00:08:25,996
This eliminates the need for a


295
00:08:26,126 --> 00:08:27,106
huge amount of code that you


296
00:08:27,166 --> 00:08:28,456
used to have to write by hand.


297
00:08:29,316 --> 00:08:30,456
Our app for naming macOS


298
00:08:30,456 --> 00:08:32,066
releases is pretty simple, yet


299
00:08:32,066 --> 00:08:34,015
it does include a huge amount of


300
00:08:34,015 --> 00:08:35,186
automatic functionality.


301
00:08:35,885 --> 00:08:37,645
We get default handling of


302
00:08:37,706 --> 00:08:39,756
spacing and safe area insets.


303
00:08:40,186 --> 00:08:41,826
Localizability and layout


304
00:08:41,895 --> 00:08:43,116
adjustments for right-to-left


305
00:08:43,116 --> 00:08:43,676
languages.


306
00:08:44,226 --> 00:08:47,206
Dynamic type, Dark Mode and so


307
00:08:47,206 --> 00:08:48,986
much more, all from that one


308
00:08:48,986 --> 00:08:49,776
minimal description.


309
00:08:50,376 --> 00:08:51,796
It's an incredible amount of


310
00:08:51,796 --> 00:08:53,106
automatic functionality for a


311
00:08:53,216 --> 00:08:54,776
small amount of code, but there


312
00:08:54,776 --> 00:08:56,476
is one more thing that is just


313
00:08:56,716 --> 00:08:57,936
so important that it really


314
00:08:57,936 --> 00:08:59,106
deserves special attention.


315
00:09:00,036 --> 00:09:01,396
Our modern interfaces are


316
00:09:01,396 --> 00:09:02,606
interactive and they're


317
00:09:02,606 --> 00:09:03,146
animated.


318
00:09:03,506 --> 00:09:05,026
And with SwiftUI, that same


319
00:09:05,026 --> 00:09:06,936
interface declaration is also


320
00:09:06,936 --> 00:09:08,776
automatically fully animatable.


321
00:09:09,876 --> 00:09:11,106
Animations can be enabled for


322
00:09:11,106 --> 00:09:12,856
the entire hierarchy with just


323
00:09:12,926 --> 00:09:13,786
one line of code.


324
00:09:14,406 --> 00:09:15,906
There's no bookkeeping, there's


325
00:09:15,906 --> 00:09:17,486
no preparation and there's never


326
00:09:17,486 --> 00:09:18,006
any cleanup.


327
00:09:18,636 --> 00:09:19,876
If you've used Keynote Magic


328
00:09:19,876 --> 00:09:21,766
Move animations before, SwiftUI


329
00:09:21,906 --> 00:09:24,126
animations are that easy and


330
00:09:24,126 --> 00:09:25,036
even more powerful.


331
00:09:26,556 --> 00:09:27,706
And for views that are added and


332
00:09:27,706 --> 00:09:29,726
removed, you can specify how


333
00:09:29,726 --> 00:09:31,166
they transition in and out with


334
00:09:31,166 --> 00:09:34,086
just one more line of code.


335
00:09:34,306 --> 00:09:35,086
While animations are in


336
00:09:35,126 --> 00:09:36,866
progress, your app remains fully


337
00:09:36,866 --> 00:09:38,386
interactive and responsive and


338
00:09:38,386 --> 00:09:39,756
ready to handle user input at


339
00:09:39,756 --> 00:09:40,366
any time.


340
00:09:40,816 --> 00:09:41,996
And if the user ever interrupts


341
00:09:41,996 --> 00:09:43,546
one of those animations or if


342
00:09:43,546 --> 00:09:44,716
you need to move to a new


343
00:09:44,716 --> 00:09:46,846
location, SwiftUI handles all of


344
00:09:46,846 --> 00:09:47,986
that automatically too.


345
00:09:49,506 --> 00:09:51,956
Now our third principle is that


346
00:09:51,956 --> 00:09:53,906
compositional APIs are easier to


347
00:09:53,906 --> 00:09:55,676
learn and let you iterate a lot


348
00:09:55,786 --> 00:09:56,236
faster.


349
00:09:57,276 --> 00:09:58,086
We've looked at how we can


350
00:09:58,086 --> 00:09:59,526
declare an individual view like


351
00:09:59,526 --> 00:10:00,246
this text label.


352
00:10:00,676 --> 00:10:02,146
But declaring more complex views


353
00:10:02,146 --> 00:10:02,956
is just as easy.


354
00:10:03,176 --> 00:10:04,336
You just compose together


355
00:10:04,426 --> 00:10:05,466
multiple smaller pieces.


356
00:10:06,386 --> 00:10:07,716
Containers like horizontal and


357
00:10:07,716 --> 00:10:09,516
vertical stacks let you easily


358
00:10:09,516 --> 00:10:11,006
build powerful layouts by just


359
00:10:11,006 --> 00:10:12,476
combining together multiple


360
00:10:12,546 --> 00:10:13,256
simple pieces.


361
00:10:14,286 --> 00:10:16,196
And SwiftUI applies composition


362
00:10:16,196 --> 00:10:17,596
to view properties as well,


363
00:10:17,906 --> 00:10:19,026
using a standard modifier


364
00:10:19,026 --> 00:10:19,596
syntax.


365
00:10:20,186 --> 00:10:21,636
A common set of modifiers can be


366
00:10:21,696 --> 00:10:23,886
applied to any view, like color


367
00:10:23,886 --> 00:10:25,046
applied here to make this text


368
00:10:25,106 --> 00:10:25,416
gray.


369
00:10:26,446 --> 00:10:27,786
This compositional approach lets


370
00:10:27,786 --> 00:10:29,696
you learn a small set of views


371
00:10:29,696 --> 00:10:31,436
and modifiers and then combine


372
00:10:31,436 --> 00:10:32,536
them together to create


373
00:10:32,536 --> 00:10:33,956
progressively more powerful


374
00:10:33,956 --> 00:10:34,486
interfaces.


375
00:10:35,466 --> 00:10:37,456
And our final principle is that


376
00:10:37,456 --> 00:10:39,306
your interface should always be


377
00:10:39,306 --> 00:10:40,406
in a consistent state.


378
00:10:41,266 --> 00:10:42,556
Your UI is a reflection of your


379
00:10:42,866 --> 00:10:44,136
app's data, so the two should


380
00:10:44,136 --> 00:10:45,856
always be in synch at all times.


381
00:10:46,666 --> 00:10:48,276
With traditional APIs, this can


382
00:10:48,276 --> 00:10:49,026
be error-prone.


383
00:10:49,026 --> 00:10:51,216
But with SwiftUI, your interface


384
00:10:51,216 --> 00:10:53,096
updates automatically any time


385
00:10:53,096 --> 00:10:53,996
the data changes.


386
00:10:55,196 --> 00:10:56,696
Now there are two common places


387
00:10:56,696 --> 00:10:57,856
that your data might likely come


388
00:10:57,856 --> 00:10:58,106
from.


389
00:10:58,496 --> 00:10:59,876
Now the first are your model


390
00:10:59,876 --> 00:11:00,246
objects.


391
00:11:00,616 --> 00:11:01,856
And you can use your existing


392
00:11:01,856 --> 00:11:03,706
model objects directly by simply


393
00:11:03,706 --> 00:11:04,746
conforming them to a new


394
00:11:04,746 --> 00:11:06,266
bindable object protocol.


395
00:11:06,776 --> 00:11:08,206
Its only requirement is that you


396
00:11:08,256 --> 00:11:09,496
specify when the data in your


397
00:11:09,496 --> 00:11:10,116
model changes.


398
00:11:10,116 --> 00:11:12,016
Now the second place is


399
00:11:12,016 --> 00:11:13,786
temporary UI state, like whether


400
00:11:13,786 --> 00:11:15,006
the view is currently in editing


401
00:11:15,006 --> 00:11:15,256
mode.


402
00:11:15,876 --> 00:11:16,816
These are declared using a


403
00:11:16,916 --> 00:11:18,806
simple state wrapper applied to


404
00:11:18,806 --> 00:11:19,956
any property on your view.


405
00:11:20,816 --> 00:11:22,406
We're all used to every property


406
00:11:22,406 --> 00:11:24,586
on every view being mutable, but


407
00:11:25,096 --> 00:11:26,156
once you start using SwiftUI,


408
00:11:26,156 --> 00:11:27,886
you're going to be shocked to


409
00:11:27,886 --> 00:11:29,616
realize how little mutable state


410
00:11:29,616 --> 00:11:31,596
your app actually needs.


411
00:11:32,356 --> 00:11:34,586
Now whenever your model or state


412
00:11:34,586 --> 00:11:36,616
changes, that UI is going to


413
00:11:36,616 --> 00:11:37,696
update automatically.


414
00:11:38,226 --> 00:11:39,456
And because it's all Swift code,


415
00:11:39,696 --> 00:11:40,696
you get this behavior while


416
00:11:40,766 --> 00:11:41,856
still being able to use your


417
00:11:41,856 --> 00:11:43,746
model objects directly within


418
00:11:43,746 --> 00:11:44,866
that interface declaration.


419
00:11:45,776 --> 00:11:46,886
You can even transform and


420
00:11:46,946 --> 00:11:48,936
format values in line with no


421
00:11:48,936 --> 00:11:50,136
additional indirection needed.


422
00:11:51,026 --> 00:11:51,976
For example, this string


423
00:11:51,976 --> 00:11:53,016
interpolation can be used to


424
00:11:53,016 --> 00:11:54,546
format a date, resulting in


425
00:11:54,706 --> 00:11:58,256
fully localized formatted text.


426
00:11:58,416 --> 00:11:59,466
All of this means that with


427
00:11:59,536 --> 00:12:01,116
Swift UI, you're going to write


428
00:12:01,116 --> 00:12:02,566
less code and get a more


429
00:12:02,566 --> 00:12:03,216
consistent UI.


430
00:12:04,616 --> 00:12:05,666
Those are the four core


431
00:12:05,666 --> 00:12:06,666
principles of SwiftUI.


432
00:12:07,296 --> 00:12:08,946
A powerful declarative syntax


433
00:12:09,306 --> 00:12:10,506
enabling a huge amount of


434
00:12:10,506 --> 00:12:12,336
automatic functionality with a


435
00:12:12,336 --> 00:12:14,086
compositional API that ensures


436
00:12:14,086 --> 00:12:15,636
your interface is always in a


437
00:12:15,636 --> 00:12:16,536
consistent state.


438
00:12:17,806 --> 00:12:19,006
And a great new framework


439
00:12:19,086 --> 00:12:20,906
deserves incredible tools.


440
00:12:21,196 --> 00:12:22,306
And we've created a whole


441
00:12:22,306 --> 00:12:23,726
brand-new workflow within Xcode


442
00:12:23,726 --> 00:12:25,476
designed from the ground up for


443
00:12:25,476 --> 00:12:25,956
SwiftUI.


444
00:12:26,946 --> 00:12:27,966
You get the power and


445
00:12:28,006 --> 00:12:29,946
flexibility of code combined


446
00:12:30,036 --> 00:12:31,676
with the ease of use and rapid


447
00:12:31,676 --> 00:12:33,346
iteration of a UI tool.


448
00:12:34,266 --> 00:12:35,346
You always have access to both


449
00:12:35,346 --> 00:12:36,796
at all times, so you'll never


450
00:12:36,796 --> 00:12:37,876
have to choose between them


451
00:12:37,876 --> 00:12:38,086
again.


452
00:12:39,026 --> 00:12:40,346
And because the tools work on


453
00:12:40,346 --> 00:12:41,676
your actual existing source


454
00:12:41,676 --> 00:12:43,816
code, you have a truly live


455
00:12:43,876 --> 00:12:44,936
development experience.


456
00:12:45,796 --> 00:12:47,196
Now to really understand how


457
00:12:47,196 --> 00:12:48,456
amazing this workflow is, you


458
00:12:48,456 --> 00:12:49,826
just need to see it again live.


459
00:12:49,826 --> 00:12:51,516
And to show it to you now, I'll


460
00:12:51,516 --> 00:12:52,516
invite Kevin up to give you a


461
00:12:52,516 --> 00:12:52,796
demo.


462
00:12:53,516 --> 00:12:58,696
[ Applause ]


463
00:12:59,196 --> 00:12:59,816
>> Thanks, Josh.


464
00:13:00,666 --> 00:13:02,156
You guys ready to have some fun?


465
00:13:02,376 --> 00:13:03,446
All right, so I'm building a


466
00:13:03,446 --> 00:13:04,736
hiking app and I want to add a


467
00:13:04,856 --> 00:13:06,586
view to my table view cell that


468
00:13:06,586 --> 00:13:08,376
tells me how difficult a trail


469
00:13:08,376 --> 00:13:08,566
is.


470
00:13:08,626 --> 00:13:10,616
So we're going to start in the


471
00:13:10,616 --> 00:13:11,206
library.


472
00:13:11,206 --> 00:13:12,196
We're going to have some text.


473
00:13:12,196 --> 00:13:14,206
And as I'm dragging, Xcode is


474
00:13:14,206 --> 00:13:15,986
suggesting layouts for me.


475
00:13:16,336 --> 00:13:17,446
Now I just tell Xcode where I


476
00:13:17,446 --> 00:13:19,056
want it and Xcode figures out


477
00:13:19,116 --> 00:13:20,476
the layout for me.


478
00:13:21,336 --> 00:13:22,226
And now we can edit the


479
00:13:22,226 --> 00:13:23,226
properties of this view.


480
00:13:23,226 --> 00:13:24,556
So I'm just going to command


481
00:13:24,556 --> 00:13:26,156
click in the canvas here and get


482
00:13:26,226 --> 00:13:28,116
custom-tailored inspectors right


483
00:13:28,176 --> 00:13:28,456
here.


484
00:13:28,926 --> 00:13:30,056
Let's make this text a little


485
00:13:30,056 --> 00:13:30,616
bit smaller.


486
00:13:30,616 --> 00:13:32,256
Now watch -- watch the code


487
00:13:32,256 --> 00:13:33,296
while I do this.


488
00:13:33,476 --> 00:13:35,006
You'll see it writes the code


489
00:13:35,006 --> 00:13:35,556
for me.


490
00:13:37,136 --> 00:13:39,086
Now, we can do the same thing


491
00:13:39,086 --> 00:13:40,706
over here in the source editor


492
00:13:40,706 --> 00:13:42,656
by just editing the code.


493
00:13:42,656 --> 00:13:44,406
And you can see Xcode builds and


494
00:13:44,406 --> 00:13:45,906
runs my code and updates the


495
00:13:45,906 --> 00:13:47,236
canvas on the right.


496
00:13:48,726 --> 00:13:50,046
Now no matter where I'm working,


497
00:13:50,326 --> 00:13:52,396
I get access to all of my design


498
00:13:52,396 --> 00:13:52,616
tools.


499
00:13:53,116 --> 00:13:54,046
So I'm just going to command


500
00:13:54,046 --> 00:13:55,596
click on this V stack, going to


501
00:13:55,596 --> 00:13:56,586
open up the inspectors.


502
00:13:56,826 --> 00:13:58,326
And again I can just modify the


503
00:13:58,326 --> 00:13:59,576
properties that I want.


504
00:13:59,826 --> 00:14:02,046
It's just so fast to iterate.


505
00:14:02,726 --> 00:14:05,116
Now, you might notice that this


506
00:14:05,116 --> 00:14:06,656
view has a couple inputs like


507
00:14:06,706 --> 00:14:08,756
this title and this difficulty.


508
00:14:08,996 --> 00:14:11,396
So how does Xcode know what data


509
00:14:11,716 --> 00:14:13,066
to show in the preview?


510
00:14:13,066 --> 00:14:13,916
This has always been one of the


511
00:14:13,916 --> 00:14:15,286
challenges with UI development:


512
00:14:15,366 --> 00:14:17,156
what data do we show during


513
00:14:17,156 --> 00:14:17,826
design time?


514
00:14:18,166 --> 00:14:19,906
And this is why we invented


515
00:14:20,046 --> 00:14:21,296
Xcode previews.


516
00:14:21,296 --> 00:14:22,346
What is a preview?


517
00:14:22,346 --> 00:14:23,106
I'll show you.


518
00:14:23,526 --> 00:14:24,676
So let me scroll down here.


519
00:14:25,866 --> 00:14:27,256
This snippet of code here -- a


520
00:14:27,336 --> 00:14:28,846
preview is just a snippet of


521
00:14:28,846 --> 00:14:30,506
code in my application that


522
00:14:30,506 --> 00:14:32,306
configures it for design time.


523
00:14:32,846 --> 00:14:34,216
Because it's in my application,


524
00:14:34,216 --> 00:14:36,236
I get access to all the code in


525
00:14:36,236 --> 00:14:36,926
my project.


526
00:14:37,056 --> 00:14:38,296
And because it's in my project,


527
00:14:38,296 --> 00:14:40,266
I can check it in and share it


528
00:14:40,266 --> 00:14:41,146
with my team members.


529
00:14:41,646 --> 00:14:42,696
And it's so easy to try


530
00:14:42,696 --> 00:14:43,526
different data.


531
00:14:43,526 --> 00:14:44,926
Now actually here Half Dome is


532
00:14:44,976 --> 00:14:45,546
pretty hard.


533
00:14:45,546 --> 00:14:46,986
So let's see what it looks like


534
00:14:46,986 --> 00:14:47,456
at hard.


535
00:14:47,456 --> 00:14:49,156
And that's because it's 16


536
00:14:49,156 --> 00:14:50,466
miles, not 6.


537
00:14:50,566 --> 00:14:51,806
And that's really compiling


538
00:14:51,896 --> 00:14:52,516
code.


539
00:14:53,806 --> 00:14:54,956
Now because this is SwiftUI


540
00:14:54,956 --> 00:14:57,276
code, I get access to all the


541
00:14:57,276 --> 00:14:58,736
modifiers that I would use for


542
00:14:58,736 --> 00:15:00,436
the rest of my UI development.


543
00:15:01,056 --> 00:15:02,276
So we can see what it looks like


544
00:15:02,426 --> 00:15:03,436
in Dark Mode.


545
00:15:04,406 --> 00:15:05,886
And I also have preview-specific


546
00:15:05,886 --> 00:15:06,796
modifiers as well.


547
00:15:06,796 --> 00:15:08,636
So by default previews are the


548
00:15:08,726 --> 00:15:10,596
size of a device, but since


549
00:15:10,596 --> 00:15:11,546
we're working on a table view


550
00:15:11,546 --> 00:15:13,346
cell, let's just focus in on


551
00:15:13,466 --> 00:15:13,846
that content.


552
00:15:13,846 --> 00:15:15,746
So I'll just make that the size


553
00:15:15,986 --> 00:15:16,516
that fits.


554
00:15:17,326 --> 00:15:18,546
Okay, now here is the really


555
00:15:18,546 --> 00:15:19,496
cool thing about previews.


556
00:15:19,846 --> 00:15:21,506
You can have as many as you


557
00:15:21,506 --> 00:15:21,846
want.


558
00:15:22,546 --> 00:15:24,156
So let's add a second preview


559
00:15:24,696 --> 00:15:26,216
with completely different data.


560
00:15:26,216 --> 00:15:28,346
But let's not stop there.


561
00:15:28,936 --> 00:15:31,146
Let's command click, repeat it a


562
00:15:31,146 --> 00:15:31,886
couple of times.


563
00:15:32,526 --> 00:15:34,786
Let's enumerate over some common


564
00:15:34,836 --> 00:15:36,756
dynamic type sizes and then


565
00:15:36,756 --> 00:15:38,606
let's configure our cell to use


566
00:15:38,606 --> 00:15:39,536
that dynamic type size.


567
00:15:39,536 --> 00:15:41,106
And there at a glance I can see


568
00:15:41,106 --> 00:15:42,726
my cell with light mode, Dark


569
00:15:42,726 --> 00:15:44,186
Mode, multiple different dynamic


570
00:15:44,186 --> 00:15:44,956
type sizes all at the same time.


571
00:15:45,516 --> 00:15:55,566
[ Applause ]


572
00:15:56,066 --> 00:15:57,256
Now when I tap on this cell, I


573
00:15:57,256 --> 00:15:58,666
want to go to a detailed view.


574
00:15:59,186 --> 00:16:00,106
So let's switch over to that


575
00:16:00,106 --> 00:16:02,146
file now and take a look.


576
00:16:02,796 --> 00:16:04,796
Now I've learned through the


577
00:16:04,796 --> 00:16:05,966
years of hiking that you should


578
00:16:05,966 --> 00:16:08,896
never judge a trail by its name.


579
00:16:08,896 --> 00:16:10,276
So it's really important to me


580
00:16:10,276 --> 00:16:12,726
that we can configure our detail


581
00:16:12,726 --> 00:16:14,586
view to make that image really


582
00:16:14,586 --> 00:16:15,036
large.


583
00:16:15,036 --> 00:16:16,356
And I've already done that with


584
00:16:16,356 --> 00:16:18,056
some SwiftUI state here.


585
00:16:18,056 --> 00:16:19,566
So when we tap the banner, we


586
00:16:19,856 --> 00:16:21,626
want to toggle that expansion


587
00:16:21,626 --> 00:16:21,986
state.


588
00:16:22,546 --> 00:16:24,206
Now I can test that right here


589
00:16:24,206 --> 00:16:26,106
in the UI just by clicking this


590
00:16:26,196 --> 00:16:26,676
play button.


591
00:16:27,446 --> 00:16:28,666
This takes any preview that I


592
00:16:28,746 --> 00:16:30,326
have and makes it fully


593
00:16:30,326 --> 00:16:30,946
interactive.


594
00:16:31,856 --> 00:16:33,406
So I can just click and test out


595
00:16:33,986 --> 00:16:35,106
those different expansion


596
00:16:35,106 --> 00:16:35,436
states.


597
00:16:36,056 --> 00:16:38,176
Now we can really polish this up


598
00:16:38,176 --> 00:16:38,956
with an animation.


599
00:16:38,956 --> 00:16:39,866
It's so easy.


600
00:16:40,416 --> 00:16:41,726
So I can just wrap my state


601
00:16:41,726 --> 00:16:43,706
change in a whip animation


602
00:16:43,706 --> 00:16:46,896
block, and now I get a beautiful


603
00:16:46,896 --> 00:16:47,936
default animation.


604
00:16:50,516 --> 00:16:56,546
[ Applause ]


605
00:16:57,046 --> 00:16:58,346
And it's just as easy to


606
00:16:58,346 --> 00:16:59,346
customize that.


607
00:16:59,566 --> 00:17:01,126
So let's slow it down for some


608
00:17:01,126 --> 00:17:03,806
dramatic effect, and now I get a


609
00:17:03,806 --> 00:17:05,136
beautiful animation opening it


610
00:17:05,136 --> 00:17:05,306
up.


611
00:17:05,955 --> 00:17:07,296
Now what's so cool about SwiftUI


612
00:17:07,406 --> 00:17:09,036
is that every animation is


613
00:17:09,066 --> 00:17:10,546
cancellable and reversible,


614
00:17:10,675 --> 00:17:11,715
leaving my application


615
00:17:11,715 --> 00:17:13,356
responsive the whole time.


616
00:17:14,766 --> 00:17:16,205
Okay, so we have a table view


617
00:17:16,236 --> 00:17:17,996
cell and we have a detail view.


618
00:17:18,175 --> 00:17:19,816
So let's put it all together.


619
00:17:19,816 --> 00:17:21,656
So I'm going to switch over to


620
00:17:21,656 --> 00:17:23,876
my last value here, which has a


621
00:17:23,876 --> 00:17:25,486
bunch of different trails and a


622
00:17:25,486 --> 00:17:25,746
list.


623
00:17:26,736 --> 00:17:27,996
So what I want to do is I


624
00:17:27,996 --> 00:17:29,066
actually want to see what this


625
00:17:29,126 --> 00:17:30,476
looks like on a real device.


626
00:17:31,166 --> 00:17:32,346
So with the click of a button --


627
00:17:32,346 --> 00:17:33,466
let's click this -- Xcode is


628
00:17:33,466 --> 00:17:34,866
going to build my project for


629
00:17:34,866 --> 00:17:35,246
the device.


630
00:17:35,246 --> 00:17:36,476
It's going to install it and


631
00:17:36,476 --> 00:17:38,066
it's going to launch my preview


632
00:17:38,066 --> 00:17:38,906
right here on the device.


633
00:17:38,906 --> 00:17:39,996
And you can see it's fully


634
00:17:39,996 --> 00:17:41,316
interactive right here.


635
00:17:41,796 --> 00:17:43,776
So first let's use that cell


636
00:17:43,776 --> 00:17:44,296
that we built.


637
00:17:44,876 --> 00:17:46,376
So I'll just change this text to


638
00:17:46,376 --> 00:17:48,596
be a trail cell.


639
00:17:49,366 --> 00:17:50,446
Now you can see we're seeing our


640
00:17:50,446 --> 00:17:51,596
trails show up there.


641
00:17:51,596 --> 00:17:53,496
And now when I tap on this, I


642
00:17:53,496 --> 00:17:54,646
want it to go to our detail view


643
00:17:54,646 --> 00:17:55,096
that we built.


644
00:17:55,396 --> 00:17:56,796
This is so easy with SwiftUI.


645
00:17:56,796 --> 00:17:58,836
It's just going to wrap this in


646
00:17:58,836 --> 00:18:00,816
a navigation button, and that


647
00:18:00,816 --> 00:18:02,106
tells us to go to our detailed


648
00:18:02,106 --> 00:18:02,396
view.


649
00:18:02,396 --> 00:18:03,786
And now you can see the chevron


650
00:18:03,836 --> 00:18:04,186
shows up.


651
00:18:04,186 --> 00:18:05,486
So let's check out Snow Creek


652
00:18:05,486 --> 00:18:07,026
and let's move in on that


653
00:18:07,026 --> 00:18:07,766
picture.


654
00:18:07,766 --> 00:18:10,346
And okay, snowy and difficult.


655
00:18:10,346 --> 00:18:11,536
That does not sound like a fun


656
00:18:11,536 --> 00:18:11,896
trail.


657
00:18:12,476 --> 00:18:13,546
So what I'm going to do with


658
00:18:13,546 --> 00:18:15,516
just one line of SwiftUI code is


659
00:18:15,516 --> 00:18:16,816
add swipe to delete.


660
00:18:16,816 --> 00:18:19,266
And now we can say, "We don't


661
00:18:19,266 --> 00:18:20,636
want to do that trail."


662
00:18:20,636 --> 00:18:23,476
And now lastly, let's see what


663
00:18:23,476 --> 00:18:24,756
it looks like in Dark Mode.


664
00:18:24,946 --> 00:18:27,026
Without any work, it's going to


665
00:18:27,026 --> 00:18:28,406
put my preview in Dark Mode and


666
00:18:28,406 --> 00:18:29,916
you can see it looks beautiful.


667
00:18:30,516 --> 00:18:38,696
[ Applause ]


668
00:18:39,196 --> 00:18:41,226
We can tap on our valley floor,


669
00:18:41,226 --> 00:18:41,916
zoom in.


670
00:18:42,036 --> 00:18:44,056
And that looks like a great way


671
00:18:44,106 --> 00:18:44,876
to end the week.


672
00:18:45,036 --> 00:18:46,176
So we just built an app with


673
00:18:46,176 --> 00:18:47,836
navigation, dynamic type size,


674
00:18:47,916 --> 00:18:49,386
light mode, Dark Mode, multiple


675
00:18:49,386 --> 00:18:51,126
different data and saw on the


676
00:18:51,206 --> 00:18:53,246
real device all without ever


677
00:18:53,246 --> 00:18:54,006
building and running.


678
00:18:54,346 --> 00:18:55,156
Now that's fun.


679
00:18:55,156 --> 00:18:56,746
All right, Josh, back to you.


680
00:18:57,516 --> 00:19:04,706
[ Applause ]


681
00:19:05,206 --> 00:19:05,576
>> Thanks, Kevin.


682
00:19:06,206 --> 00:19:07,266
All right, this is really an


683
00:19:07,266 --> 00:19:08,626
incredible new workflow for


684
00:19:08,706 --> 00:19:09,476
fully native code.


685
00:19:10,016 --> 00:19:10,776
What you do in the tool is


686
00:19:10,776 --> 00:19:12,596
always debuggable, diffable,


687
00:19:12,796 --> 00:19:14,556
searchable, and understandable.


688
00:19:15,036 --> 00:19:16,296
And because you can always edit


689
00:19:16,296 --> 00:19:17,726
the code directly, you get


690
00:19:17,726 --> 00:19:19,226
incredible flexibility in your


691
00:19:19,226 --> 00:19:19,776
workflow.


692
00:19:20,116 --> 00:19:21,786
And SwiftUI is deeply integrated


693
00:19:21,786 --> 00:19:23,076
in all of our operating systems,


694
00:19:23,136 --> 00:19:25,046
so using it results in a fully


695
00:19:25,046 --> 00:19:26,356
native app for whichever


696
00:19:26,416 --> 00:19:27,226
platforms you target.


697
00:19:27,756 --> 00:19:28,756
You get the same performance,


698
00:19:28,996 --> 00:19:30,596
the same behavior and the same


699
00:19:30,596 --> 00:19:32,086
controls as any other native


700
00:19:32,086 --> 00:19:32,596
app.


701
00:19:33,056 --> 00:19:34,406
And you can adopt SwiftUI at


702
00:19:34,596 --> 00:19:35,296
your own pace.


703
00:19:35,846 --> 00:19:36,776
You can use it for anything,


704
00:19:36,776 --> 00:19:38,576
from just one view in your app


705
00:19:38,576 --> 00:19:39,866
all the way up to the entire


706
00:19:39,866 --> 00:19:40,546
application.


707
00:19:41,066 --> 00:19:42,416
It works seamlessly with all of


708
00:19:42,416 --> 00:19:44,146
your existing UIKit, AppKit and


709
00:19:44,146 --> 00:19:45,906
WatchKit code so you don't need


710
00:19:45,906 --> 00:19:47,116
to rewrite anything.


711
00:19:47,116 --> 00:19:48,856
And to get you up to speed


712
00:19:48,856 --> 00:19:50,346
quickly, our documentation team


713
00:19:50,346 --> 00:19:51,926
has developed a brand-new style


714
00:19:51,926 --> 00:19:53,296
of interactive documentation.


715
00:19:53,816 --> 00:19:54,616
It quickly takes you


716
00:19:54,686 --> 00:19:56,596
step-by-step from creating a new


717
00:19:56,596 --> 00:19:57,846
project all the way up to


718
00:19:57,846 --> 00:19:59,086
building a fully interactive


719
00:19:59,086 --> 00:19:59,516
interface.


720
00:20:00,036 --> 00:20:00,876
So you'll be up to speed in no


721
00:20:00,876 --> 00:20:00,976
time.


722
00:20:01,516 --> 00:20:07,946
[ Applause ]


723
00:20:08,446 --> 00:20:09,856
So that's SwiftUI and some of


724
00:20:09,856 --> 00:20:11,086
the new tools in Xcode.


725
00:20:11,526 --> 00:20:13,166
Of course, this is a huge year


726
00:20:13,166 --> 00:20:15,116
for Swift and Xcode, so there's


727
00:20:15,116 --> 00:20:16,166
even more to this story.


728
00:20:16,436 --> 00:20:17,416
And to tell you more about it,


729
00:20:17,416 --> 00:20:18,576
I'll hand things off to Matthew.


730
00:20:19,066 --> 00:20:19,296
Thanks.


731
00:20:20,516 --> 00:20:24,866
[ Applause ]


732
00:20:25,366 --> 00:20:26,016
>> Thank you, Josh.


733
00:20:26,806 --> 00:20:28,106
Our tools released this year


734
00:20:28,106 --> 00:20:29,526
bring together innovations in


735
00:20:29,636 --> 00:20:32,236
Swift and Xcode to deliver some


736
00:20:32,236 --> 00:20:32,966
awesome results.


737
00:20:33,876 --> 00:20:34,796
So let's start with Swift.


738
00:20:36,106 --> 00:20:38,016
Now in our fifth year, Swift has


739
00:20:38,016 --> 00:20:39,686
matured and is continuing to


740
00:20:39,686 --> 00:20:40,326
leap forward.


741
00:20:40,696 --> 00:20:42,096
Where our newest and flagship


742
00:20:42,176 --> 00:20:43,636
technologies, from machine


743
00:20:43,636 --> 00:20:45,116
learning to augmented reality


744
00:20:45,496 --> 00:20:46,906
are possible only because of


745
00:20:46,906 --> 00:20:48,896
Swift and it now being part of


746
00:20:48,896 --> 00:20:49,126
our OS.


747
00:20:50,446 --> 00:20:51,576
To achieve this, earlier this


748
00:20:51,576 --> 00:20:53,226
spring we introduced ABI


749
00:20:53,536 --> 00:20:55,356
stability which reduces the size


750
00:20:55,356 --> 00:20:56,956
of your apps by using a single


751
00:20:57,106 --> 00:20:57,946
shared Swift runtime.


752
00:20:58,516 --> 00:21:04,546
[ Applause ]


753
00:21:05,046 --> 00:21:05,836
And we are following that up


754
00:21:05,836 --> 00:21:07,936
today with module stability


755
00:21:08,006 --> 00:21:09,146
which ensures compatibility --


756
00:21:09,196 --> 00:21:09,316
yes.


757
00:21:10,516 --> 00:21:14,046
[ Applause ]


758
00:21:14,546 --> 00:21:15,626
This completes the picture by


759
00:21:15,626 --> 00:21:17,266
ensuring compatibility for your


760
00:21:17,266 --> 00:21:18,846
binaries with the current and


761
00:21:18,846 --> 00:21:20,176
future versions of the Swift


762
00:21:20,176 --> 00:21:20,626
compiler.


763
00:21:21,656 --> 00:21:22,726
And these come alongside a


764
00:21:22,726 --> 00:21:24,066
number of other language


765
00:21:24,066 --> 00:21:26,116
features, tools editions and


766
00:21:26,116 --> 00:21:27,706
performance and code size


767
00:21:27,776 --> 00:21:29,236
improvements, all which further


768
00:21:29,236 --> 00:21:30,566
extend the potential Swift


769
00:21:30,566 --> 00:21:31,936
brings to your projects.


770
00:21:33,436 --> 00:21:35,276
So Swift is already the language


771
00:21:35,276 --> 00:21:37,106
for your apps and now more than


772
00:21:37,106 --> 00:21:38,836
ever for common code to share


773
00:21:38,836 --> 00:21:40,416
across all Apple platforms.


774
00:21:41,616 --> 00:21:42,906
In fact, sharing is the reason


775
00:21:42,906 --> 00:21:45,016
we created Swift Packages which


776
00:21:45,016 --> 00:21:46,426
are the best way to develop and


777
00:21:46,426 --> 00:21:48,346
share your own code and reuse


778
00:21:48,346 --> 00:21:49,096
code from others.


779
00:21:49,776 --> 00:21:51,436
And today we have two big


780
00:21:51,436 --> 00:21:51,776
announcements.


781
00:21:53,636 --> 00:21:54,896
GitHub will be adding support


782
00:21:54,896 --> 00:21:56,556
for Swift packages to the GitHub


783
00:21:56,556 --> 00:21:57,876
Package Registry.


784
00:21:58,516 --> 00:22:05,546
[ Applause ]


785
00:22:06,046 --> 00:22:07,396
Which is perfect because Xcode


786
00:22:07,396 --> 00:22:08,946
now seamlessly supports Swift


787
00:22:09,066 --> 00:22:10,216
packages for apps on iOS, iPadOS


788
00:22:10,216 --> 00:22:11,876
and all of our platforms.


789
00:22:12,516 --> 00:22:19,736
[ Applause ]


790
00:22:20,236 --> 00:22:21,446
Swift packages are top-level


791
00:22:21,446 --> 00:22:23,346
items in your workspaces, always


792
00:22:23,346 --> 00:22:25,576
visible, always accessible, and


793
00:22:25,576 --> 00:22:26,556
deeply integrated.


794
00:22:27,386 --> 00:22:28,796
Packages from the community and


795
00:22:28,796 --> 00:22:30,376
those packages you create get


796
00:22:30,376 --> 00:22:32,176
instant access to all of Xcode's


797
00:22:32,176 --> 00:22:33,716
work flows for source control,


798
00:22:33,766 --> 00:22:35,836
debugging, testing, the works.


799
00:22:36,806 --> 00:22:38,176
So Swift packages built into


800
00:22:38,176 --> 00:22:40,716
Xcode, it's sharing code the way


801
00:22:40,716 --> 00:22:41,436
you've always wanted.


802
00:22:43,076 --> 00:22:44,386
Now that's just the start of our


803
00:22:44,486 --> 00:22:45,846
Xcode release this year, which


804
00:22:45,846 --> 00:22:47,726
is focused on maximizing your


805
00:22:47,726 --> 00:22:48,326
productivity.


806
00:22:48,956 --> 00:22:49,726
And we have a number of


807
00:22:49,726 --> 00:22:50,796
improvements today to share with


808
00:22:50,826 --> 00:22:53,396
you as we take Xcode up to 11.


809
00:22:54,506 --> 00:22:56,896
So let's get started with one of


810
00:22:56,896 --> 00:22:58,556
our biggest changes which is the


811
00:22:58,556 --> 00:22:59,356
Xcode Workspace.


812
00:23:00,086 --> 00:23:02,006
We are giving you full editorial


813
00:23:02,006 --> 00:23:02,526
control.


814
00:23:02,826 --> 00:23:04,106
You can now create and manage


815
00:23:04,106 --> 00:23:05,996
editors however you like.


816
00:23:06,896 --> 00:23:08,296
Whatever your preferred style


817
00:23:08,296 --> 00:23:09,716
and layout is, you can simply


818
00:23:09,716 --> 00:23:11,676
add and remove editors whenever


819
00:23:11,816 --> 00:23:13,476
and wherever you see fit.


820
00:23:14,516 --> 00:23:19,826
[ Applause ]


821
00:23:20,326 --> 00:23:22,886
And even better, your workspaces


822
00:23:22,886 --> 00:23:24,246
can now focus too.


823
00:23:24,246 --> 00:23:28,116
So you can take any editor and


824
00:23:28,166 --> 00:23:32,246
maximize it, and then when


825
00:23:32,246 --> 00:23:33,136
you're done, just put it back


826
00:23:33,136 --> 00:23:34,176
and it will go right back to


827
00:23:34,176 --> 00:23:34,936
where you started.


828
00:23:35,516 --> 00:23:40,606
[ Applause ]


829
00:23:41,106 --> 00:23:41,916
So whether you're working on the


830
00:23:41,976 --> 00:23:43,766
smallest of laptops or with the


831
00:23:43,766 --> 00:23:45,436
largest of displays, your


832
00:23:45,436 --> 00:23:47,176
workspace now works for you.


833
00:23:49,396 --> 00:23:50,886
Now the related content in our


834
00:23:50,886 --> 00:23:53,146
editors, the smart selections


835
00:23:53,146 --> 00:23:54,676
like counterparts, are also


836
00:23:54,676 --> 00:23:55,866
getting a huge boost.


837
00:23:57,246 --> 00:23:58,536
There are new options like


838
00:23:58,646 --> 00:24:01,236
previews, canvas, live views and


839
00:24:01,236 --> 00:24:01,476
more.


840
00:24:02,356 --> 00:24:03,736
You can use the related content


841
00:24:03,736 --> 00:24:05,586
in any editor in your workspace.


842
00:24:06,546 --> 00:24:07,626
And you'll like this one best of


843
00:24:07,626 --> 00:24:07,996
all.


844
00:24:08,126 --> 00:24:09,596
When there is no content, they


845
00:24:09,596 --> 00:24:11,466
automatically disappear so you


846
00:24:11,466 --> 00:24:12,706
no longer need to manager their


847
00:24:12,706 --> 00:24:13,276
visibility.


848
00:24:14,516 --> 00:24:18,686
[ Applause ]


849
00:24:19,186 --> 00:24:20,446
Now once you get your workspace


850
00:24:20,506 --> 00:24:22,146
set up, it's all about the


851
00:24:22,146 --> 00:24:23,306
editing, and I'd like to show


852
00:24:23,306 --> 00:24:24,596
you a quick demonstration of


853
00:24:24,596 --> 00:24:25,626
some of the new source editing


854
00:24:25,626 --> 00:24:26,706
features we have for you this


855
00:24:26,706 --> 00:24:26,846
year.


856
00:24:39,046 --> 00:24:39,956
To help you configure each


857
00:24:39,956 --> 00:24:41,596
editor the way you like, there's


858
00:24:41,596 --> 00:24:43,106
a new Options menu in the upper


859
00:24:43,106 --> 00:24:43,276
right.


860
00:24:44,186 --> 00:24:45,426
You can see here I can enable


861
00:24:45,426 --> 00:24:46,456
the assistants or any of the


862
00:24:46,456 --> 00:24:47,226
related content.


863
00:24:47,856 --> 00:24:49,076
I could turn on code coverage or


864
00:24:49,126 --> 00:24:50,106
source control authors.


865
00:24:50,106 --> 00:24:51,616
I'm going to turn on our newest


866
00:24:51,616 --> 00:24:52,806
feature, Mini map.


867
00:24:54,676 --> 00:24:55,646
So the mini map gives you a


868
00:24:55,646 --> 00:24:57,776
structural overview of your file


869
00:24:57,926 --> 00:24:58,726
to help you navigate.


870
00:24:59,326 --> 00:25:00,586
You can see documentations,


871
00:25:00,586 --> 00:25:01,656
method and functions.


872
00:25:02,226 --> 00:25:03,256
It makes it really easy to move


873
00:25:03,256 --> 00:25:04,176
about the file.


874
00:25:05,216 --> 00:25:06,216
If you'd like to leave yourself


875
00:25:06,256 --> 00:25:07,476
some other landmarks, you can


876
00:25:07,476 --> 00:25:09,216
use the mark syntax to add


877
00:25:09,216 --> 00:25:10,826
labels and horizontal dividers


878
00:25:11,126 --> 00:25:12,586
that show up in your source and


879
00:25:12,586 --> 00:25:13,496
in the mini map.


880
00:25:15,516 --> 00:25:19,756
[ Applause ]


881
00:25:20,256 --> 00:25:21,536
Now if I hover over the mini


882
00:25:21,536 --> 00:25:22,806
map, you'll see the symbolic


883
00:25:22,806 --> 00:25:24,256
landmarks for the file.


884
00:25:24,996 --> 00:25:26,606
Here's a pro tip: hold down the


885
00:25:26,606 --> 00:25:28,166
command key and you'll see all


886
00:25:28,166 --> 00:25:29,646
of the landmarks for the file to


887
00:25:29,676 --> 00:25:30,846
make it really easy to navigate


888
00:25:30,846 --> 00:25:31,826
to exactly where you want to go.


889
00:25:32,516 --> 00:25:36,546
[ Applause ]


890
00:25:37,046 --> 00:25:37,836
And the mini map will show you


891
00:25:37,876 --> 00:25:39,736
issues, test failures, even


892
00:25:39,736 --> 00:25:40,836
in-file find results.


893
00:25:41,396 --> 00:25:42,386
And we've made it fully


894
00:25:42,386 --> 00:25:42,846
accessible.


895
00:25:44,366 --> 00:25:45,366
You'll find our source editor


896
00:25:45,366 --> 00:25:46,756
now pops and your code is more


897
00:25:46,756 --> 00:25:47,906
vivid as we've deepened our


898
00:25:47,906 --> 00:25:48,686
syntax coloring.


899
00:25:49,506 --> 00:25:50,236
You'll also see that we've


900
00:25:50,236 --> 00:25:51,386
increased our documentation


901
00:25:51,426 --> 00:25:53,766
support here with italics, bold


902
00:25:53,766 --> 00:25:54,686
and code voice in the


903
00:25:54,686 --> 00:25:55,416
documentation.


904
00:25:56,326 --> 00:25:57,296
You'll also see that when you


905
00:25:57,296 --> 00:25:58,646
add documentation, it


906
00:25:58,646 --> 00:25:59,906
automatically adds in missing


907
00:25:59,906 --> 00:26:00,856
parameters that you may have


908
00:26:00,856 --> 00:26:02,546
added after you typed your


909
00:26:02,546 --> 00:26:02,976
documentation.


910
00:26:03,516 --> 00:26:09,556
[ Applause ]


911
00:26:10,056 --> 00:26:10,926
And what's even better is to


912
00:26:10,926 --> 00:26:12,056
help you keep your documentation


913
00:26:12,056 --> 00:26:12,826
and code in synch.


914
00:26:13,066 --> 00:26:14,126
You'll find Edit All and Scope


915
00:26:14,126 --> 00:26:15,676
now changes both, all at the


916
00:26:15,676 --> 00:26:15,976
same time.


917
00:26:16,516 --> 00:26:21,626
[ Applause ]


918
00:26:22,126 --> 00:26:23,206
Now we also wanted to add some


919
00:26:23,206 --> 00:26:24,336
additional help to help you keep


920
00:26:24,336 --> 00:26:25,376
track of your changes.


921
00:26:26,166 --> 00:26:27,476
If I'd like to review all of the


922
00:26:27,476 --> 00:26:29,286
changes for this file, I can


923
00:26:29,286 --> 00:26:30,596
open up the new Source Control


924
00:26:30,596 --> 00:26:32,126
History Inspector which shows me


925
00:26:32,156 --> 00:26:33,196
all the changes that have been


926
00:26:33,196 --> 00:26:34,406
made to this file, and I can


927
00:26:34,406 --> 00:26:35,626
quickly jump to any commit.


928
00:26:35,626 --> 00:26:37,066
And because it's in the


929
00:26:37,066 --> 00:26:38,336
inspector, this now works for


930
00:26:38,336 --> 00:26:39,816
any file type in your project.


931
00:26:40,866 --> 00:26:42,776
To help you review local


932
00:26:42,776 --> 00:26:44,376
changes, we've also improved the


933
00:26:44,376 --> 00:26:45,076
change bar.


934
00:26:45,846 --> 00:26:46,746
When I hover over the change


935
00:26:46,746 --> 00:26:47,836
bar, it shows me the local


936
00:26:47,836 --> 00:26:48,356
changes.


937
00:26:48,666 --> 00:26:49,756
But I can now have it show me


938
00:26:49,756 --> 00:26:51,626
the code before the change that


939
00:26:51,626 --> 00:26:52,926
I made to get a quick snippet.


940
00:26:53,516 --> 00:26:58,916
[ Applause ]


941
00:26:59,416 --> 00:27:01,176
And of course it's live, so as I


942
00:27:01,266 --> 00:27:04,226
start typing, it will update to


943
00:27:04,226 --> 00:27:04,976
keep me up-to-date.


944
00:27:05,796 --> 00:27:07,006
So those are just some of the


945
00:27:07,006 --> 00:27:08,286
many source editing features


946
00:27:08,286 --> 00:27:09,696
you'll find in Xcode 11.


947
00:27:11,516 --> 00:27:17,836
[ Applause ]


948
00:27:18,336 --> 00:27:20,106
Okay, so testing is another key


949
00:27:20,106 --> 00:27:21,046
development workflow.


950
00:27:21,536 --> 00:27:23,346
And Xcode already has great


951
00:27:23,346 --> 00:27:25,086
support for writing tests, which


952
00:27:25,086 --> 00:27:26,716
of course you all already know


953
00:27:26,976 --> 00:27:27,906
because you're writing lots of


954
00:27:27,936 --> 00:27:28,346
them, right?


955
00:27:28,346 --> 00:27:28,546
>> Yep.


956
00:27:28,816 --> 00:27:28,976
>> Yeah.


957
00:27:30,046 --> 00:27:30,686
>> Excellent.


958
00:27:30,686 --> 00:27:31,886
That's what we like to hear.


959
00:27:32,536 --> 00:27:33,846
Now what you may not know is


960
00:27:33,846 --> 00:27:35,356
that Xcode can do even more with


961
00:27:35,356 --> 00:27:37,016
your tests by using fantastic


962
00:27:37,016 --> 00:27:38,386
tools like runtime issues,


963
00:27:38,776 --> 00:27:40,336
sanitizers, localization


964
00:27:40,336 --> 00:27:40,846
simulation.


965
00:27:41,246 --> 00:27:42,376
And we add more of these every


966
00:27:42,376 --> 00:27:42,566
year.


967
00:27:43,486 --> 00:27:44,886
With so many options, what's


968
00:27:44,886 --> 00:27:46,296
been missing is a way to combine


969
00:27:46,296 --> 00:27:48,576
them all in one place to be used


970
00:27:48,576 --> 00:27:49,176
in parallel.


971
00:27:49,906 --> 00:27:51,466
And for that we are adding test


972
00:27:51,576 --> 00:27:51,736
plans.


973
00:27:53,486 --> 00:27:54,526
Now the power of test plans


974
00:27:54,626 --> 00:27:56,396
comes from running your tests in


975
00:27:56,396 --> 00:27:57,496
many configurations.


976
00:27:58,556 --> 00:27:59,876
With a few simple selections,


977
00:27:59,876 --> 00:28:01,656
you can instantly test for your


978
00:28:01,656 --> 00:28:02,266
global audience.


979
00:28:03,266 --> 00:28:04,386
And this configuration is also


980
00:28:04,456 --> 00:28:05,596
perfect for capturing


981
00:28:05,596 --> 00:28:07,266
screenshots for the App Store or


982
00:28:07,266 --> 00:28:08,316
collecting details for your


983
00:28:08,316 --> 00:28:09,036
localizers.


984
00:28:10,056 --> 00:28:11,226
Yeah, it's okay to applaud for


985
00:28:11,226 --> 00:28:11,386
that.


986
00:28:11,386 --> 00:28:11,886
This is a big deal.


987
00:28:12,516 --> 00:28:16,706
[ Applause ]


988
00:28:17,206 --> 00:28:18,566
You can then see your app from


989
00:28:18,566 --> 00:28:20,196
every angle by adding in other


990
00:28:20,196 --> 00:28:21,796
diagnostics, tools and


991
00:28:21,796 --> 00:28:22,356
parameters.


992
00:28:23,356 --> 00:28:24,786
And your coverage increases even


993
00:28:24,856 --> 00:28:25,986
further when you run your test


994
00:28:26,086 --> 00:28:28,066
plans against many devices and


995
00:28:28,066 --> 00:28:30,036
OS combinations to get a fully


996
00:28:30,036 --> 00:28:31,516
comprehensive view of how your


997
00:28:31,626 --> 00:28:32,006
app is doing.


998
00:28:32,006 --> 00:28:34,576
Now for testing at this scale,


999
00:28:34,616 --> 00:28:36,196
test plans work perfectly with


1000
00:28:36,196 --> 00:28:38,026
Xcode Server which can take full


1001
00:28:38,026 --> 00:28:40,366
advantage of the new Mac Pro and


1002
00:28:40,366 --> 00:28:41,226
with Xcode's new parallel


1003
00:28:41,316 --> 00:28:43,026
testing on simulators and


1004
00:28:43,026 --> 00:28:43,356
devices.


1005
00:28:44,436 --> 00:28:45,756
The result with test plans is


1006
00:28:45,756 --> 00:28:47,326
you now have one command that


1007
00:28:47,326 --> 00:28:48,906
does all of the testing for your


1008
00:28:48,906 --> 00:28:49,196
apps.


1009
00:28:49,896 --> 00:28:51,096
So this is a major advancement.


1010
00:28:52,516 --> 00:28:58,556
[ Applause ]


1011
00:28:59,056 --> 00:28:59,866
Now often when testing and


1012
00:28:59,866 --> 00:29:01,376
debugging, it's necessary to


1013
00:29:01,376 --> 00:29:02,696
replicate user scenarios.


1014
00:29:03,106 --> 00:29:04,286
And our new Device Conditions


1015
00:29:04,676 --> 00:29:05,276
answers the call.


1016
00:29:06,296 --> 00:29:07,276
You can now set varied


1017
00:29:07,276 --> 00:29:08,426
conditions for network


1018
00:29:08,426 --> 00:29:10,046
throughput and thermal states on


1019
00:29:10,046 --> 00:29:11,656
your devices and see how your


1020
00:29:11,656 --> 00:29:12,316
apps respond.


1021
00:29:13,216 --> 00:29:14,226
Now rest assured these are


1022
00:29:14,226 --> 00:29:15,636
actually just simulations.


1023
00:29:15,816 --> 00:29:16,696
We're not actually going to make


1024
00:29:16,696 --> 00:29:17,856
your devices get super-hot here.


1025
00:29:19,006 --> 00:29:20,726
You can enable the conditions in


1026
00:29:20,726 --> 00:29:21,926
Xcode's Devices window.


1027
00:29:22,276 --> 00:29:23,376
And the devices will display


1028
00:29:23,376 --> 00:29:24,596
banners when the conditions are


1029
00:29:24,736 --> 00:29:24,946
active.


1030
00:29:25,816 --> 00:29:26,766
You can tap the banner to


1031
00:29:26,766 --> 00:29:28,976
disable the conditions and Xcode


1032
00:29:28,976 --> 00:29:30,166
will automatically terminate the


1033
00:29:30,166 --> 00:29:31,536
conditions when you disconnect


1034
00:29:31,676 --> 00:29:32,076
the devices.


1035
00:29:33,976 --> 00:29:34,976
Now for all the testing you're


1036
00:29:34,976 --> 00:29:36,576
going to be doing, we've also


1037
00:29:36,576 --> 00:29:37,776
improved our result bundles


1038
00:29:37,866 --> 00:29:39,256
which are now standalone.


1039
00:29:39,826 --> 00:29:41,066
Whether you create them in Xcode


1040
00:29:41,066 --> 00:29:42,416
or from the command line, you


1041
00:29:42,416 --> 00:29:43,786
can share them via email, attach


1042
00:29:43,786 --> 00:29:45,056
them to bugs and then just


1043
00:29:45,056 --> 00:29:46,236
double-click on them to open


1044
00:29:46,236 --> 00:29:48,246
them back in Xcode to review all


1045
00:29:48,246 --> 00:29:48,706
of the details.


1046
00:29:49,516 --> 00:29:56,176
[ Applause ]


1047
00:29:56,676 --> 00:29:57,786
Now to help you improve your


1048
00:29:57,786 --> 00:29:59,176
apps even further, we are


1049
00:29:59,176 --> 00:30:01,046
introducing two new feedback


1050
00:30:01,096 --> 00:30:01,276
tools.


1051
00:30:02,246 --> 00:30:04,336
First, app performance metrics


1052
00:30:04,366 --> 00:30:06,816
for iOS and iPadOS App Store


1053
00:30:06,816 --> 00:30:06,966
apps.


1054
00:30:08,426 --> 00:30:09,766
When users opt into sharing


1055
00:30:09,766 --> 00:30:11,176
analytics, you'll received


1056
00:30:11,176 --> 00:30:13,226
anonymized metrics for battery


1057
00:30:13,226 --> 00:30:15,056
life, launch time, memory use


1058
00:30:15,316 --> 00:30:15,886
and more.


1059
00:30:16,806 --> 00:30:18,106
These metrics are aggregated and


1060
00:30:18,106 --> 00:30:19,376
displayed in the organizer


1061
00:30:19,656 --> 00:30:21,436
alongside the crash and energy


1062
00:30:21,536 --> 00:30:22,706
logs, and are a great way to


1063
00:30:22,706 --> 00:30:23,916
monitor and improve the


1064
00:30:23,916 --> 00:30:25,256
performance of your app with


1065
00:30:25,256 --> 00:30:25,726
each build.


1066
00:30:27,226 --> 00:30:28,776
These aggregated metrics, we


1067
00:30:28,776 --> 00:30:29,876
started collecting them in the


1068
00:30:29,966 --> 00:30:32,396
spring with iOS 12.2.


1069
00:30:32,506 --> 00:30:33,556
So many of your apps will


1070
00:30:33,556 --> 00:30:35,136
already have data to review.


1071
00:30:36,626 --> 00:30:37,636
Now another great source of


1072
00:30:37,636 --> 00:30:39,016
feedback is directly from your


1073
00:30:39,016 --> 00:30:40,816
users, and Test Flight will now


1074
00:30:40,816 --> 00:30:42,416
let users share what they think.


1075
00:30:43,936 --> 00:30:45,286
Test Flight apps automatically


1076
00:30:45,286 --> 00:30:46,756
enable user feedback.


1077
00:30:47,796 --> 00:30:49,316
When a user takes a screenshot


1078
00:30:49,316 --> 00:30:50,156
in your app, they will have a


1079
00:30:50,156 --> 00:30:52,066
new option to share it as beta


1080
00:30:52,066 --> 00:30:53,576
feedback, optionally adding in


1081
00:30:53,576 --> 00:30:53,976
their comments.


1082
00:30:54,516 --> 00:31:00,876
[ Applause ]


1083
00:31:01,376 --> 00:31:02,866
You can review all the feedback


1084
00:31:02,866 --> 00:31:04,286
on App Store Connect and


1085
00:31:04,286 --> 00:31:05,616
download all the details for


1086
00:31:05,616 --> 00:31:06,526
your bug tracking systems.


1087
00:31:08,746 --> 00:31:10,286
So all these features today are


1088
00:31:10,366 --> 00:31:12,086
just a small taste of our Xcode


1089
00:31:12,086 --> 00:31:13,326
release, which brings together


1090
00:31:13,326 --> 00:31:14,966
innovations in Swift, the SDK


1091
00:31:14,966 --> 00:31:16,756
and across all of our tools.


1092
00:31:17,546 --> 00:31:18,646
All this to help you do your


1093
00:31:18,646 --> 00:31:20,296
best work faster than ever.


1094
00:31:20,996 --> 00:31:21,976
And that is Xcode 11.


1095
00:31:22,516 --> 00:31:30,906
[ Applause ]


1096
00:31:31,406 --> 00:31:32,086
>> And now I'd like to invite


1097
00:31:32,156 --> 00:31:33,476
Sebastien back to tell us more


1098
00:31:33,476 --> 00:31:34,406
about Apple's platforms.


1099
00:31:34,876 --> 00:31:35,276
Sebastien?


1100
00:31:36,121 --> 00:31:38,121
[ Applause ]


1101
00:31:38,226 --> 00:31:39,096
>> Thank you, Matthew.


1102
00:31:39,796 --> 00:31:41,106
Wasn't that amazing?


1103
00:31:42,436 --> 00:31:43,956
Really, really great features to


1104
00:31:43,956 --> 00:31:45,896
help all of you build better


1105
00:31:45,896 --> 00:31:46,556
apps.


1106
00:31:46,906 --> 00:31:47,806
So now let's switch to our


1107
00:31:47,806 --> 00:31:48,446
platforms.


1108
00:31:48,866 --> 00:31:49,886
And of course our platforms


1109
00:31:49,886 --> 00:31:51,356
themselves are tailored to


1110
00:31:51,356 --> 00:31:53,276
provide great experiences and


1111
00:31:53,276 --> 00:31:54,536
they really reflect the unique


1112
00:31:54,536 --> 00:31:55,926
way in which each of them is


1113
00:31:55,926 --> 00:31:56,306
used.


1114
00:31:56,946 --> 00:31:58,186
So some of what we're doing this


1115
00:31:58,186 --> 00:31:59,536
year is unique to each of them,


1116
00:31:59,896 --> 00:32:00,836
and what we're going to do now


1117
00:32:01,186 --> 00:32:03,366
is dive right in to macOS and


1118
00:32:03,366 --> 00:32:05,226
tell you what we're doing there.


1119
00:32:05,786 --> 00:32:09,126
macOS Catalina is a great


1120
00:32:09,126 --> 00:32:10,616
release with a rich set of


1121
00:32:10,616 --> 00:32:12,476
compelling new features such as


1122
00:32:12,536 --> 00:32:14,176
screen time and the new Music


1123
00:32:14,176 --> 00:32:14,386
app.


1124
00:32:14,386 --> 00:32:16,616
And the Mac takes another great


1125
00:32:16,716 --> 00:32:17,986
step forward with amazing


1126
00:32:18,086 --> 00:32:19,926
productivity features such as


1127
00:32:19,926 --> 00:32:20,936
Sidecar.


1128
00:32:20,936 --> 00:32:22,036
We're going to love Sidecar,


1129
00:32:22,886 --> 00:32:22,976
right?


1130
00:32:23,516 --> 00:32:26,566
[ Applause ]


1131
00:32:27,066 --> 00:32:27,216
All right.


1132
00:32:27,606 --> 00:32:28,696
Well, with an active installed


1133
00:32:28,726 --> 00:32:30,916
base of over 100 million users,


1134
00:32:31,256 --> 00:32:33,176
the Mac is a vibrant platform


1135
00:32:33,276 --> 00:32:34,636
with a rich app ecosystem.


1136
00:32:34,746 --> 00:32:37,006
And the Mac ecosystem is full of


1137
00:32:37,006 --> 00:32:38,646
powerful native apps that you


1138
00:32:38,646 --> 00:32:40,376
have created using our AppKit


1139
00:32:40,446 --> 00:32:40,856
framework.


1140
00:32:40,856 --> 00:32:42,886
And a great example of this is


1141
00:32:42,976 --> 00:32:43,876
Pixelmator Pro.


1142
00:32:44,946 --> 00:32:46,076
Now AppKit is the powerful


1143
00:32:46,186 --> 00:32:47,716
framework that enables the full


1144
00:32:47,716 --> 00:32:48,626
capabilities of the Mac.


1145
00:32:48,896 --> 00:32:50,766
But we also recognize that there


1146
00:32:50,766 --> 00:32:52,146
are a number of apps available


1147
00:32:52,146 --> 00:32:53,906
for iPad that would be great to


1148
00:32:53,986 --> 00:32:55,886
run on the Mac, but you have not


1149
00:32:55,886 --> 00:32:57,786
always had time to use AppKit to


1150
00:32:57,786 --> 00:32:58,476
bring that to the Mac.


1151
00:32:59,226 --> 00:33:01,096
And so this year we're adding an


1152
00:33:01,096 --> 00:33:02,826
additional way to create native


1153
00:33:02,826 --> 00:33:04,426
Mac apps with the technology


1154
00:33:04,426 --> 00:33:05,756
that allows you to take an


1155
00:33:05,756 --> 00:33:07,116
iPadOS app and bring it to the


1156
00:33:07,116 --> 00:33:08,696
Mac with minimal effort.


1157
00:33:09,736 --> 00:33:09,976
We --


1158
00:33:15,086 --> 00:33:16,256
Can you go back two slides?


1159
00:33:16,446 --> 00:33:16,646
Sorry.


1160
00:33:20,046 --> 00:33:21,506
One more. All right.


1161
00:33:22,466 --> 00:33:23,936
This is a huge opportunity for


1162
00:33:23,936 --> 00:33:26,086
the Mac to tap into the world's


1163
00:33:26,086 --> 00:33:27,556
largest app ecosystem.


1164
00:33:28,186 --> 00:33:29,716
There are over a million iPad


1165
00:33:29,716 --> 00:33:31,806
apps out there and we think many


1166
00:33:31,806 --> 00:33:33,386
of them would be really great on


1167
00:33:33,386 --> 00:33:34,306
the Mac as well.


1168
00:33:35,606 --> 00:33:37,176
Now to achieve this, we've


1169
00:33:37,176 --> 00:33:38,566
ported more than 40 frameworks


1170
00:33:38,566 --> 00:33:39,966
and libraries from iOS to the


1171
00:33:39,966 --> 00:33:40,176
Mac.


1172
00:33:40,346 --> 00:33:42,556
And if you're an existing iOS


1173
00:33:42,666 --> 00:33:43,876
developer that doesn't have a


1174
00:33:44,136 --> 00:33:45,376
Mac app yet, you're going to


1175
00:33:45,376 --> 00:33:47,006
love having the same APIs


1176
00:33:47,246 --> 00:33:48,946
available on both platforms.


1177
00:33:49,496 --> 00:33:50,426
In fact, we've made available


1178
00:33:50,426 --> 00:33:53,516
almost the entire iOS API set


1179
00:33:53,516 --> 00:33:54,686
with only a small number of


1180
00:33:54,686 --> 00:33:56,606
exceptions for unique mobile


1181
00:33:56,606 --> 00:33:57,066
features.


1182
00:33:58,066 --> 00:34:00,016
Now we achieved this by adapting


1183
00:34:00,016 --> 00:34:01,556
UI Kit as a native framework.


1184
00:34:01,896 --> 00:34:03,596
That enables iPad apps to run on


1185
00:34:03,596 --> 00:34:05,746
the Mac and feel just as fast


1186
00:34:05,746 --> 00:34:07,486
and fluid as other apps on the


1187
00:34:07,576 --> 00:34:08,065
platform.


1188
00:34:09,335 --> 00:34:10,795
And by integrating UI Kit


1189
00:34:10,795 --> 00:34:13,085
directly into macOS, many of the


1190
00:34:13,085 --> 00:34:14,835
fundamentals are automatic.


1191
00:34:15,585 --> 00:34:16,775
So many Mac desktop and


1192
00:34:16,775 --> 00:34:18,386
windowing features are added


1193
00:34:18,656 --> 00:34:20,156
without any work on your part,


1194
00:34:21,096 --> 00:34:22,335
and we adapt platform-unique


1195
00:34:22,335 --> 00:34:24,275
elements like touch controls to


1196
00:34:24,275 --> 00:34:26,326
keyboard and mouse input, saving


1197
00:34:26,326 --> 00:34:28,166
you a ton of work and giving you


1198
00:34:28,166 --> 00:34:29,376
a huge head start in your


1199
00:34:29,376 --> 00:34:29,846
development.


1200
00:34:30,505 --> 00:34:32,326
Now we've been working on this


1201
00:34:32,396 --> 00:34:33,815
technology for a number of years


1202
00:34:33,815 --> 00:34:35,065
and we're using it for our own


1203
00:34:35,065 --> 00:34:36,666
apps, which has allowed us to


1204
00:34:36,766 --> 00:34:37,826
prove out and refine the


1205
00:34:37,876 --> 00:34:39,565
technology before we make it


1206
00:34:39,565 --> 00:34:41,446
available to you in macOS


1207
00:34:41,446 --> 00:34:42,295
Catalina this year.


1208
00:34:43,376 --> 00:34:45,266
If you have an iPadOS app,


1209
00:34:45,266 --> 00:34:47,186
targeting the Mac is super easy.


1210
00:34:47,656 --> 00:34:49,346
There are basically three steps.


1211
00:34:50,525 --> 00:34:52,916
First, click the checkbox in


1212
00:34:52,916 --> 00:34:53,646
Xcode -- here we go.


1213
00:34:54,031 --> 00:34:56,031
[ Laughter ]


1214
00:34:56,045 --> 00:34:56,286
That easy.


1215
00:34:56,946 --> 00:34:58,556
In Xcode's Project Editor, and


1216
00:34:58,556 --> 00:34:59,886
turn on Mac support for your


1217
00:34:59,886 --> 00:35:00,306
project.


1218
00:35:00,406 --> 00:35:00,786
There you go.


1219
00:35:00,876 --> 00:35:02,036
As easy as that.


1220
00:35:02,146 --> 00:35:02,916
And here's the magic.


1221
00:35:03,376 --> 00:35:04,786
That single project and target


1222
00:35:04,786 --> 00:35:06,566
builds apps for all three


1223
00:35:06,646 --> 00:35:07,176
platforms.


1224
00:35:07,736 --> 00:35:08,716
And when you make a change to


1225
00:35:08,716 --> 00:35:10,716
your source, all three apps


1226
00:35:10,716 --> 00:35:12,056
update automatically.


1227
00:35:13,446 --> 00:35:14,766
The second step is to ensure


1228
00:35:14,766 --> 00:35:16,626
that your app is great on the


1229
00:35:16,626 --> 00:35:17,296
iPad.


1230
00:35:18,196 --> 00:35:20,546
Better iPad apps make better Mac


1231
00:35:20,586 --> 00:35:21,076
apps as well.


1232
00:35:21,076 --> 00:35:23,056
So the work that you put in to


1233
00:35:23,056 --> 00:35:24,616
adopting the newest technologies


1234
00:35:24,946 --> 00:35:26,756
and optimizing for larger iPad


1235
00:35:26,806 --> 00:35:28,626
screens translates wonderfully


1236
00:35:28,626 --> 00:35:29,016
to the Mac.


1237
00:35:31,316 --> 00:35:32,816
Just following best practices


1238
00:35:33,216 --> 00:35:34,376
such as supporting external


1239
00:35:34,466 --> 00:35:36,496
keyboards will also result in


1240
00:35:36,496 --> 00:35:38,036
richer Mac experiences.


1241
00:35:39,596 --> 00:35:41,146
The third step is to take


1242
00:35:41,146 --> 00:35:42,646
advantage of specific Mac


1243
00:35:42,696 --> 00:35:43,356
capabilities.


1244
00:35:44,186 --> 00:35:45,036
And this is where you make


1245
00:35:45,036 --> 00:35:47,026
customizations that take full


1246
00:35:47,066 --> 00:35:48,166
advantage of typical


1247
00:35:49,086 --> 00:35:50,436
Mac-specific user interface


1248
00:35:50,436 --> 00:35:52,076
elements like full menus and


1249
00:35:52,076 --> 00:35:52,626
toolbars.


1250
00:35:52,626 --> 00:35:55,306
And if applicable, sidebars and


1251
00:35:55,306 --> 00:35:56,326
their special materials.


1252
00:35:56,996 --> 00:35:58,196
Now to show you how easy this


1253
00:35:58,266 --> 00:35:59,806
is, I'd like to invite Matthew


1254
00:35:59,806 --> 00:36:01,356
back onstage for a demo.


1255
00:36:01,666 --> 00:36:01,976
Matthew?


1256
00:36:02,516 --> 00:36:07,946
[ Applause ]


1257
00:36:08,446 --> 00:36:09,106
>> Thank you, Sebastien.


1258
00:36:10,246 --> 00:36:11,186
Here we have our travel


1259
00:36:11,186 --> 00:36:12,586
application running in the iPad


1260
00:36:12,886 --> 00:36:13,306
Simulator.


1261
00:36:13,886 --> 00:36:15,306
It's a list view of locations.


1262
00:36:15,886 --> 00:36:17,116
When I select a location, the


1263
00:36:17,116 --> 00:36:17,846
globe will rotate.


1264
00:36:18,646 --> 00:36:19,866
And we have a logging area where


1265
00:36:19,866 --> 00:36:21,006
I can start keeping track of my


1266
00:36:21,116 --> 00:36:22,246
trips in a journal.


1267
00:36:23,266 --> 00:36:24,336
Let's follow Sebastien's three


1268
00:36:24,336 --> 00:36:25,666
steps and bring this app to the


1269
00:36:25,666 --> 00:36:25,756
Mac.


1270
00:36:26,756 --> 00:36:28,416
Step one, check the box.


1271
00:36:29,436 --> 00:36:31,236
I'll quit the simulator and here


1272
00:36:31,236 --> 00:36:32,976
in the target editor I'll check


1273
00:36:32,976 --> 00:36:34,766
the box for Mac support to


1274
00:36:34,766 --> 00:36:35,216
enable it.


1275
00:36:36,756 --> 00:36:37,686
That's it.


1276
00:36:37,686 --> 00:36:38,836
I can now build and run my


1277
00:36:38,836 --> 00:36:39,616
application for the Mac.


1278
00:36:40,626 --> 00:36:41,846
By checking the box, we added


1279
00:36:41,846 --> 00:36:43,156
the Mac as a destination.


1280
00:36:43,606 --> 00:36:44,786
So just like I can pick between


1281
00:36:44,786 --> 00:36:46,286
devices and simulators for my


1282
00:36:46,286 --> 00:36:47,706
app, I can now choose the Mac.


1283
00:36:48,816 --> 00:36:49,546
And here's the Mac app.


1284
00:36:50,346 --> 00:36:52,486
List View on the left, select


1285
00:36:52,486 --> 00:36:54,536
the location and log in.


1286
00:36:55,516 --> 00:37:02,066
[ Applause ]


1287
00:37:02,566 --> 00:37:03,356
I know, pretty powerful


1288
00:37:03,356 --> 00:37:03,716
checkbox.


1289
00:37:03,716 --> 00:37:06,826
All right, let's move on to step


1290
00:37:06,886 --> 00:37:08,266
two, make a great iPad app.


1291
00:37:09,376 --> 00:37:10,786
I've not implemented any actions


1292
00:37:10,786 --> 00:37:12,426
from my List View, things like


1293
00:37:12,426 --> 00:37:13,776
Adding to Favorites or to Share.


1294
00:37:14,686 --> 00:37:15,636
When I implement those for the


1295
00:37:15,846 --> 00:37:16,656
iPad, they'll show up as a


1296
00:37:16,736 --> 00:37:17,896
context menu on the Mac.


1297
00:37:18,666 --> 00:37:19,326
It's a double win.


1298
00:37:20,376 --> 00:37:22,076
So I'll quit the Mac app and


1299
00:37:22,076 --> 00:37:23,606
change to my sidebar controller


1300
00:37:23,606 --> 00:37:25,246
here, and I'll just add a table


1301
00:37:25,246 --> 00:37:26,676
view delegate method that sets


1302
00:37:26,676 --> 00:37:27,796
up those menus for each item.


1303
00:37:29,216 --> 00:37:30,526
Okay. Let's move on to step


1304
00:37:30,616 --> 00:37:30,846
three.


1305
00:37:31,956 --> 00:37:33,556
I'd like the sidebar on my Mac


1306
00:37:33,556 --> 00:37:34,676
app to be vibrant.


1307
00:37:35,586 --> 00:37:36,626
Now this change doesn't happen


1308
00:37:36,666 --> 00:37:37,666
automatically because it's


1309
00:37:37,666 --> 00:37:38,926
something you should review to


1310
00:37:38,926 --> 00:37:39,886
make sure it's appropriate.


1311
00:37:40,746 --> 00:37:41,856
When you do find it's what you'd


1312
00:37:41,856 --> 00:37:43,526
like, it's a simple one-line


1313
00:37:43,526 --> 00:37:44,846
change to set the background


1314
00:37:45,046 --> 00:37:45,906
style to sidebar.


1315
00:37:47,536 --> 00:37:48,916
Okay, for our final change, I'd


1316
00:37:48,916 --> 00:37:50,356
like to add a menu bar to our


1317
00:37:50,356 --> 00:37:50,906
application.


1318
00:37:51,806 --> 00:37:53,706
So here in the storyboard I'll


1319
00:37:53,706 --> 00:37:55,646
bring up the library and I'll


1320
00:37:55,706 --> 00:37:56,376
search for a menu.


1321
00:37:57,246 --> 00:37:58,516
I'll grab a main menu and I'll


1322
00:37:58,516 --> 00:38:00,036
drag it out into my storyboard


1323
00:38:00,716 --> 00:38:01,966
and we'll open up the file menu.


1324
00:38:03,306 --> 00:38:04,476
I'd like to add a menu command


1325
00:38:04,476 --> 00:38:06,126
in here for the login action.


1326
00:38:06,746 --> 00:38:07,626
So we'll call this Login.


1327
00:38:08,366 --> 00:38:09,416
We'll give it a key equivalent


1328
00:38:09,416 --> 00:38:10,046
of Command-L.


1329
00:38:10,856 --> 00:38:12,066
And I just now need to connect


1330
00:38:12,146 --> 00:38:14,156
the menu item up to the action


1331
00:38:14,426 --> 00:38:15,596
that I'm already using for


1332
00:38:15,596 --> 00:38:15,836
Login.


1333
00:38:16,886 --> 00:38:18,146
Okay? That's it.


1334
00:38:18,436 --> 00:38:19,726
Let's build and run our changes.


1335
00:38:20,656 --> 00:38:22,006
I'm going to go up and hide


1336
00:38:22,246 --> 00:38:23,696
Xcode for the moment so we can


1337
00:38:23,806 --> 00:38:24,906
see our application.


1338
00:38:25,936 --> 00:38:27,616
Okay, so now we have the vibrant


1339
00:38:27,666 --> 00:38:28,116
sidebar.


1340
00:38:28,656 --> 00:38:29,856
When I select an item, I can


1341
00:38:29,856 --> 00:38:32,026
bring up a context menu and up


1342
00:38:32,056 --> 00:38:34,216
here in the File menu I now have


1343
00:38:34,496 --> 00:38:35,186
the Login action.


1344
00:38:36,046 --> 00:38:37,306
So just like that, three easy


1345
00:38:37,356 --> 00:38:37,806
steps.


1346
00:38:38,516 --> 00:38:45,266
[ Applause ]


1347
00:38:45,766 --> 00:38:46,856
Three easy steps to bring our


1348
00:38:46,856 --> 00:38:48,666
app to the Mac and make a great


1349
00:38:48,666 --> 00:38:49,656
user experience for all our


1350
00:38:49,656 --> 00:38:49,996
users.


1351
00:38:50,446 --> 00:38:51,206
Back to you, Sebastien.


1352
00:38:52,041 --> 00:38:54,041
[ Applause ]


1353
00:38:54,066 --> 00:38:54,646
>> Thank you, Matthew.


1354
00:38:55,266 --> 00:38:56,246
That was really amazing.


1355
00:38:56,486 --> 00:38:57,706
Doesn't this make you want to go


1356
00:38:57,706 --> 00:38:58,616
and try it out?


1357
00:38:59,396 --> 00:39:01,336
Yes. All right, in fact, over


1358
00:39:01,336 --> 00:39:02,786
the last few weeks we invited a


1359
00:39:02,786 --> 00:39:04,226
number of developers to take


1360
00:39:04,226 --> 00:39:05,256
this for a spin.


1361
00:39:05,456 --> 00:39:06,576
And the progress that they have


1362
00:39:06,636 --> 00:39:08,406
made in a few short weeks is


1363
00:39:08,466 --> 00:39:09,276
truly impressive.


1364
00:39:09,746 --> 00:39:11,116
Here's a sample of the iPad apps


1365
00:39:11,116 --> 00:39:12,856
that they already have running


1366
00:39:13,036 --> 00:39:13,436
on the Mac.


1367
00:39:14,606 --> 00:39:17,316
Now once you've built a Mac app,


1368
00:39:17,316 --> 00:39:18,456
the best way to distribute it to


1369
00:39:18,456 --> 00:39:19,776
your users is through the Mac


1370
00:39:19,776 --> 00:39:20,346
App Store.


1371
00:39:21,216 --> 00:39:22,736
It features the biggest catalog


1372
00:39:22,736 --> 00:39:23,686
of Mac Apps.


1373
00:39:23,846 --> 00:39:25,986
It's available in 155 countries


1374
00:39:26,146 --> 00:39:28,186
throughout the world and the Mac


1375
00:39:28,246 --> 00:39:29,486
App Store allows you to reach


1376
00:39:29,646 --> 00:39:31,206
every single Mac user.


1377
00:39:31,906 --> 00:39:34,156
Now we also built Gatekeeper to


1378
00:39:34,156 --> 00:39:35,556
give users flexibility and


1379
00:39:35,556 --> 00:39:36,726
choice on how they get their


1380
00:39:36,726 --> 00:39:38,336
apps while helping protect them


1381
00:39:38,336 --> 00:39:39,336
from malicious software.


1382
00:39:39,856 --> 00:39:41,056
And in macOS Catalina,


1383
00:39:41,526 --> 00:39:42,656
Gatekeeper will validate the


1384
00:39:42,656 --> 00:39:43,576
apps that you run from the


1385
00:39:43,576 --> 00:39:45,426
internet both at first launch


1386
00:39:45,656 --> 00:39:47,496
and periodically thereafter to


1387
00:39:47,496 --> 00:39:48,966
confirm that they're free of


1388
00:39:48,966 --> 00:39:49,596
known malware.


1389
00:39:50,556 --> 00:39:51,536
This is accomplished by


1390
00:39:51,536 --> 00:39:52,816
requiring developers to use the


1391
00:39:52,816 --> 00:39:54,556
notarization service that we


1392
00:39:54,556 --> 00:39:56,866
announced last year for both new


1393
00:39:56,866 --> 00:39:57,716
and updated apps.


1394
00:39:58,286 --> 00:40:00,336
So now you and your users can


1395
00:40:00,336 --> 00:40:01,816
safely get apps from both the


1396
00:40:01,816 --> 00:40:03,716
Mac App Store and the internet.


1397
00:40:04,736 --> 00:40:06,236
Notarization has already seen


1398
00:40:06,236 --> 00:40:07,076
broad adoption.


1399
00:40:07,636 --> 00:40:09,416
It's simple and fast with over


1400
00:40:09,416 --> 00:40:11,836
98% of submissions completing


1401
00:40:11,836 --> 00:40:12,936
within 15 minutes.


1402
00:40:13,956 --> 00:40:15,656
Now speaking of security, we're


1403
00:40:15,656 --> 00:40:16,836
continuing to invest in the


1404
00:40:16,896 --> 00:40:18,726
foundations of macOS and I'd


1405
00:40:18,726 --> 00:40:20,486
like to focus on three areas.


1406
00:40:21,696 --> 00:40:23,106
First, a new technology called


1407
00:40:23,106 --> 00:40:24,746
Driver Kit which allows you to


1408
00:40:24,746 --> 00:40:26,106
move your kernel extensions out


1409
00:40:26,106 --> 00:40:27,696
of the kernel and into user


1410
00:40:27,696 --> 00:40:28,056
space.


1411
00:40:28,666 --> 00:40:31,116
And by running these drivers and


1412
00:40:31,116 --> 00:40:33,336
extensions as user processes, we


1413
00:40:33,336 --> 00:40:35,256
improve the stability of macOS


1414
00:40:35,256 --> 00:40:36,156
for all of our users.


1415
00:40:37,266 --> 00:40:38,586
We identified the most common


1416
00:40:38,586 --> 00:40:39,976
use cases that have required


1417
00:40:39,976 --> 00:40:41,206
kernel extensions in the past,


1418
00:40:41,206 --> 00:40:42,756
and now we have a user space


1419
00:40:42,786 --> 00:40:45,376
alternative for over 75% of them


1420
00:40:45,626 --> 00:40:46,706
in macOS Catalina.


1421
00:40:47,616 --> 00:40:48,926
We encourage you to adopt Driver


1422
00:40:49,006 --> 00:40:50,746
Kit as future versions of macOS


1423
00:40:50,746 --> 00:40:52,676
will no longer run these types


1424
00:40:52,766 --> 00:40:53,716
of kernel extensions.


1425
00:40:54,216 --> 00:40:57,106
Next, we're improving the


1426
00:40:57,106 --> 00:40:58,886
stability of macOS by making the


1427
00:40:58,986 --> 00:41:00,736
system volume read-only.


1428
00:41:01,596 --> 00:41:02,426
Here's how it works.


1429
00:41:03,146 --> 00:41:04,726
Today there's a single volume


1430
00:41:04,726 --> 00:41:06,416
that includes user data, apps


1431
00:41:06,816 --> 00:41:07,836
and the operating system.


1432
00:41:08,526 --> 00:41:09,706
And to further isolate macOS


1433
00:41:09,706 --> 00:41:11,726
from changes, the Mac will now


1434
00:41:11,726 --> 00:41:13,226
be divided into two logical


1435
00:41:13,226 --> 00:41:13,616
volumes.


1436
00:41:14,576 --> 00:41:15,806
One for the operating system


1437
00:41:15,876 --> 00:41:17,746
files which will be read-only,


1438
00:41:18,006 --> 00:41:20,056
and the other for user data and


1439
00:41:20,056 --> 00:41:20,286
apps.


1440
00:41:21,051 --> 00:41:23,051
[ Applause ]


1441
00:41:23,086 --> 00:41:23,296
There you go.


1442
00:41:24,126 --> 00:41:26,126
[ Applause ]


1443
00:41:26,236 --> 00:41:27,306
This will further protect the


1444
00:41:27,306 --> 00:41:28,736
operating system from changes,


1445
00:41:29,006 --> 00:41:30,956
increase stability and set us up


1446
00:41:30,956 --> 00:41:32,266
to deliver future security


1447
00:41:32,266 --> 00:41:32,706
benefits.


1448
00:41:33,286 --> 00:41:34,716
Now some of you may have made


1449
00:41:34,716 --> 00:41:36,476
assumptions in your app or your


1450
00:41:36,476 --> 00:41:37,826
installer, and you'll want to


1451
00:41:37,826 --> 00:41:39,786
check that it works seamlessly


1452
00:41:39,786 --> 00:41:40,896
on macOS Catalina.


1453
00:41:42,286 --> 00:41:44,436
Finally, enhancements to app and


1454
00:41:44,436 --> 00:41:45,136
data protection.


1455
00:41:45,816 --> 00:41:47,816
We have spent the last few years


1456
00:41:47,816 --> 00:41:48,996
adding additional data


1457
00:41:48,996 --> 00:41:50,646
protection categories so that


1458
00:41:50,646 --> 00:41:52,186
users are in control of which


1459
00:41:52,186 --> 00:41:54,676
apps can access important files


1460
00:41:54,676 --> 00:41:57,246
like your photos or sensitive


1461
00:41:57,336 --> 00:41:59,246
sensors like your camera and


1462
00:41:59,246 --> 00:42:01,046
microphone on your Mac.


1463
00:42:01,596 --> 00:42:03,496
In macOS Catalina, we're


1464
00:42:03,496 --> 00:42:05,116
continuing this work by ensuring


1465
00:42:05,116 --> 00:42:06,736
that apps seek permission before


1466
00:42:06,736 --> 00:42:08,356
capturing input events, so


1467
00:42:08,356 --> 00:42:09,896
things like key presses or


1468
00:42:09,896 --> 00:42:10,786
screen recordings.


1469
00:42:14,046 --> 00:42:15,636
And we're also going to protect


1470
00:42:15,636 --> 00:42:17,266
user data on your Mac, so apps


1471
00:42:17,266 --> 00:42:18,546
will now have to seek permission


1472
00:42:18,786 --> 00:42:20,116
before accessing the files that


1473
00:42:20,116 --> 00:42:22,256
users keep on their desktop,


1474
00:42:22,256 --> 00:42:24,636
downloads, documents, iCloud


1475
00:42:24,636 --> 00:42:26,316
drive and external drives.


1476
00:42:27,056 --> 00:42:27,126
Yeah.


1477
00:42:28,516 --> 00:42:31,576
[ Applause ]


1478
00:42:32,076 --> 00:42:33,196
We are really excited about all


1479
00:42:33,196 --> 00:42:34,116
the enhancements that we're


1480
00:42:34,116 --> 00:42:35,476
bringing in macOS Catalina.


1481
00:42:36,296 --> 00:42:37,766
Now another platform that's got


1482
00:42:37,836 --> 00:42:39,046
some really big changes this


1483
00:42:39,076 --> 00:42:40,326
year is watchOS.


1484
00:42:40,886 --> 00:42:42,366
And to tell you more, I'd like


1485
00:42:42,366 --> 00:42:44,006
to invite Lori up on stage.


1486
00:42:44,056 --> 00:42:44,336
Lori?


1487
00:42:45,516 --> 00:42:47,666
[ Applause ]


1488
00:42:48,166 --> 00:42:48,786
>> Thanks, Sebastien.


1489
00:42:50,056 --> 00:42:52,056
[ Applause ]


1490
00:42:52,096 --> 00:42:53,126
This morning we introduced a


1491
00:42:53,186 --> 00:42:54,656
bunch of cool new features in


1492
00:42:54,656 --> 00:42:56,496
watchOS 6, including new health


1493
00:42:56,496 --> 00:42:57,976
apps like noise and cycle


1494
00:42:58,036 --> 00:42:59,436
tracking, activity trends,


1495
00:42:59,606 --> 00:43:00,606
audiobooks and more.


1496
00:43:01,286 --> 00:43:03,236
But the real story for watchOS 6


1497
00:43:03,466 --> 00:43:04,956
is that it's now possible to


1498
00:43:04,956 --> 00:43:07,386
declare independence from the


1499
00:43:07,456 --> 00:43:08,766
phone and build fully


1500
00:43:08,766 --> 00:43:10,956
watch-focused experiences.


1501
00:43:11,516 --> 00:43:15,606
[ Applause ]


1502
00:43:16,106 --> 00:43:17,186
Thanks to cellular connectivity,


1503
00:43:17,186 --> 00:43:18,326
customers are increasingly


1504
00:43:18,326 --> 00:43:19,766
leaving their phones behind and


1505
00:43:19,766 --> 00:43:21,366
enjoying the freedom using just


1506
00:43:21,516 --> 00:43:22,516
their Apple Watch to stay


1507
00:43:22,516 --> 00:43:23,006
connected.


1508
00:43:23,566 --> 00:43:25,116
From running errands to running


1509
00:43:25,166 --> 00:43:26,596
workouts, from listening to


1510
00:43:26,596 --> 00:43:27,696
music to chatting with friends,


1511
00:43:28,146 --> 00:43:29,996
we want all users to enjoy great


1512
00:43:29,996 --> 00:43:31,566
Apple Watch experiences without


1513
00:43:31,566 --> 00:43:32,206
limitations.


1514
00:43:32,606 --> 00:43:34,206
And independent watch apps make


1515
00:43:34,296 --> 00:43:34,956
that possible.


1516
00:43:36,606 --> 00:43:38,106
We've taken a good look at the


1517
00:43:38,146 --> 00:43:39,326
challenges of developing for


1518
00:43:39,456 --> 00:43:41,016
Apple Watch and worked hard not


1519
00:43:41,116 --> 00:43:42,916
only to bring you new APIs that


1520
00:43:42,916 --> 00:43:44,066
make it possible to support


1521
00:43:44,066 --> 00:43:46,056
independent experiences, but


1522
00:43:46,056 --> 00:43:47,616
also to completely revamp the


1523
00:43:47,666 --> 00:43:48,896
experience of being an Apple


1524
00:43:48,896 --> 00:43:49,716
Watch developer.


1525
00:43:52,156 --> 00:43:53,866
What if I told you it was


1526
00:43:53,866 --> 00:43:55,786
possible to create a watch app


1527
00:43:56,026 --> 00:43:57,246
that's only a watch app?


1528
00:43:59,286 --> 00:44:00,316
If you've got an idea for a


1529
00:44:00,376 --> 00:44:01,926
great watch-only experience,


1530
00:44:02,066 --> 00:44:03,426
Xcode now makes it simple to


1531
00:44:03,426 --> 00:44:04,896
create a watch app that's just a


1532
00:44:04,896 --> 00:44:05,366
watch app.


1533
00:44:05,366 --> 00:44:07,306
So you can pursue your idea


1534
00:44:07,336 --> 00:44:08,626
without also having to build an


1535
00:44:08,776 --> 00:44:09,186
iOS app.


1536
00:44:11,506 --> 00:44:13,056
And if you already have an iOS


1537
00:44:13,176 --> 00:44:14,776
app, you can still build your


1538
00:44:14,776 --> 00:44:16,846
app to be completely independent


1539
00:44:16,846 --> 00:44:18,266
of its companion thanks to a


1540
00:44:18,266 --> 00:44:19,836
couple key changes we made in


1541
00:44:19,836 --> 00:44:21,506
watchOS 6 to support watch-only


1542
00:44:21,506 --> 00:44:24,196
apps, including making Apple


1543
00:44:24,196 --> 00:44:25,626
Watch a standalone push target.


1544
00:44:26,236 --> 00:44:27,306
You now have the option of


1545
00:44:27,356 --> 00:44:28,536
sending notifications directly


1546
00:44:28,656 --> 00:44:30,346
to the watch so you can update


1547
00:44:30,426 --> 00:44:31,866
both your users and your apps


1548
00:44:31,946 --> 00:44:33,256
data without relying on the


1549
00:44:33,346 --> 00:44:34,096
phone to mediate.


1550
00:44:35,516 --> 00:44:39,796
[ Applause ]


1551
00:44:40,296 --> 00:44:41,596
We're also supporting Cloud Kit


1552
00:44:41,636 --> 00:44:43,406
subscriptions and complication


1553
00:44:43,406 --> 00:44:44,766
pushes to help you keep your app


1554
00:44:44,766 --> 00:44:45,296
up-to-date.


1555
00:44:46,576 --> 00:44:48,056
And since asking users to sign


1556
00:44:48,056 --> 00:44:49,696
in on iPhone is not an option


1557
00:44:49,816 --> 00:44:50,716
when you don't have an iPhone


1558
00:44:50,906 --> 00:44:52,786
app, in watchOS 6 we're giving


1559
00:44:52,786 --> 00:44:54,386
you text fields so you can offer


1560
00:44:54,386 --> 00:44:55,746
account creation and sign-in


1561
00:44:55,746 --> 00:44:57,366
options directly on Apple Watch.


1562
00:45:01,046 --> 00:45:01,806
If you want to make account


1563
00:45:01,836 --> 00:45:03,376
creation really easy, you can


1564
00:45:03,376 --> 00:45:04,696
even add an Assign with Apple


1565
00:45:04,696 --> 00:45:05,986
button to your app to let your


1566
00:45:05,986 --> 00:45:07,776
users set up an account and sign


1567
00:45:07,776 --> 00:45:08,746
in with the Apple ID they


1568
00:45:08,786 --> 00:45:09,236
already have.


1569
00:45:09,976 --> 00:45:11,736
No new passwords or text entry


1570
00:45:11,736 --> 00:45:12,226
required.


1571
00:45:13,306 --> 00:45:14,536
With watchOS 6 we're also


1572
00:45:14,536 --> 00:45:15,826
addressing a common watch-only


1573
00:45:15,866 --> 00:45:17,596
use case by bringing streaming


1574
00:45:17,596 --> 00:45:18,826
audio to watchOS.


1575
00:45:19,966 --> 00:45:21,206
We introduced background audio


1576
00:45:21,256 --> 00:45:23,106
playback in watchOS 5 for local


1577
00:45:23,106 --> 00:45:23,246
files.


1578
00:45:24,226 --> 00:45:26,056
And now in watchOS 6, we've


1579
00:45:26,056 --> 00:45:27,536
brought three ways to stream


1580
00:45:27,536 --> 00:45:29,436
audio directly to Apple Watch by


1581
00:45:29,436 --> 00:45:30,636
making Network, framework,


1582
00:45:31,156 --> 00:45:33,496
NSURLsessionStreamTask, and even


1583
00:45:33,496 --> 00:45:35,186
more of AVFoundation available


1584
00:45:35,186 --> 00:45:35,486
to you.


1585
00:45:36,836 --> 00:45:38,046
We also recognize that there are


1586
00:45:38,046 --> 00:45:39,616
use cases beyond audio playback,


1587
00:45:39,916 --> 00:45:41,906
workouts and navigation where


1588
00:45:41,906 --> 00:45:43,336
you need to keep your app


1589
00:45:43,516 --> 00:45:44,286
running order to complete a


1590
00:45:44,286 --> 00:45:44,436
task.


1591
00:45:45,046 --> 00:45:46,556
For example, a meditation


1592
00:45:46,556 --> 00:45:46,856
session.


1593
00:45:47,756 --> 00:45:49,406
In watchOS 6, we're introducing


1594
00:45:49,406 --> 00:45:51,406
a new extended runtime API that


1595
00:45:51,686 --> 00:45:53,416
gives more apps a way to stay


1596
00:45:53,416 --> 00:45:54,816
running even after the user


1597
00:45:54,816 --> 00:45:55,496
lowers their wrist.


1598
00:45:56,896 --> 00:45:58,546
This enables new app experiences


1599
00:45:58,546 --> 00:46:00,586
in self-care, mindfulness,


1600
00:46:01,076 --> 00:46:03,406
physical therapy, smart alarms


1601
00:46:03,976 --> 00:46:04,936
and health monitoring.


1602
00:46:05,866 --> 00:46:07,396
That's a lot of new APIs and


1603
00:46:07,446 --> 00:46:08,056
capabilities.


1604
00:46:08,626 --> 00:46:10,446
If only you had more options for


1605
00:46:10,506 --> 00:46:11,556
creating a compelling user


1606
00:46:11,556 --> 00:46:12,646
interface, right?


1607
00:46:13,946 --> 00:46:15,156
We know you've been asking for a


1608
00:46:15,156 --> 00:46:17,016
more advanced UI framework on


1609
00:46:17,016 --> 00:46:17,936
the watch for years.


1610
00:46:18,616 --> 00:46:20,546
And in watchOS 6 we finally have


1611
00:46:20,616 --> 00:46:21,626
one with SwiftUI.


1612
00:46:23,516 --> 00:46:27,546
[ Applause ]


1613
00:46:28,046 --> 00:46:29,286
You've already seen SwiftUI on


1614
00:46:29,626 --> 00:46:29,816
iOS.


1615
00:46:30,396 --> 00:46:31,876
That same declarative language


1616
00:46:31,876 --> 00:46:33,196
for defining beautiful user


1617
00:46:33,196 --> 00:46:34,666
interfaces is available for


1618
00:46:34,666 --> 00:46:36,506
watchOS as well, expanding


1619
00:46:36,506 --> 00:46:37,806
what's possible on the platform.


1620
00:46:38,926 --> 00:46:40,466
From lists with swipe to delete,


1621
00:46:40,866 --> 00:46:42,836
reordering and carousel filing,


1622
00:46:43,166 --> 00:46:44,826
to direct access, the digital


1623
00:46:44,826 --> 00:46:46,626
crown, it's easier than ever to


1624
00:46:46,676 --> 00:46:47,626
create a compelling watch


1625
00:46:47,626 --> 00:46:48,156
experience.


1626
00:46:50,086 --> 00:46:51,096
Let me show you how to start


1627
00:46:51,096 --> 00:46:52,876
making use of some of the new


1628
00:46:52,876 --> 00:46:54,446
independent app features with


1629
00:46:54,526 --> 00:46:54,916
SwiftUI.


1630
00:47:06,196 --> 00:47:07,826
Okay, so I've got my travel app


1631
00:47:07,826 --> 00:47:08,926
running here in the Simulator


1632
00:47:08,926 --> 00:47:09,776
and I've already started


1633
00:47:09,776 --> 00:47:11,686
updating it using SwiftUI, so


1634
00:47:11,686 --> 00:47:12,906
it's starting to look great.


1635
00:47:13,246 --> 00:47:14,446
But I still have some work to do


1636
00:47:14,446 --> 00:47:16,306
beyond layout because my Sign In


1637
00:47:16,306 --> 00:47:17,686
button currently just asks users


1638
00:47:17,716 --> 00:47:18,526
to sign in on iPhone.


1639
00:47:19,116 --> 00:47:20,256
And my users have told me that


1640
00:47:20,256 --> 00:47:21,116
is not what they want.


1641
00:47:21,116 --> 00:47:21,776
They want to be able to do


1642
00:47:21,776 --> 00:47:22,956
everything right on their wrist.


1643
00:47:23,896 --> 00:47:24,436
So I'm going to quit the


1644
00:47:24,476 --> 00:47:25,806
simulator and go over to my


1645
00:47:25,806 --> 00:47:26,576
project file.


1646
00:47:27,106 --> 00:47:28,406
And I'll move to my travel watch


1647
00:47:28,406 --> 00:47:30,436
extension target and declare


1648
00:47:30,436 --> 00:47:32,356
independence from phone by


1649
00:47:32,426 --> 00:47:33,556
checking the Supports Running


1650
00:47:33,646 --> 00:47:35,356
Without iOS App Installation


1651
00:47:35,356 --> 00:47:35,626
box.


1652
00:47:37,136 --> 00:47:38,406
Next I'm going to go to the Sign


1653
00:47:38,406 --> 00:47:39,176
In view that I've already


1654
00:47:39,176 --> 00:47:39,646
started.


1655
00:47:40,346 --> 00:47:41,406
I'll resume my previews.


1656
00:47:42,516 --> 00:47:43,786
Great. And you can see I have a


1657
00:47:43,846 --> 00:47:44,856
Sign In button here and two


1658
00:47:44,916 --> 00:47:45,556
previews.


1659
00:47:45,716 --> 00:47:47,266
The top one is for English which


1660
00:47:47,266 --> 00:47:48,806
is the language that I speak and


1661
00:47:48,806 --> 00:47:50,006
the bottom one I'm starting to


1662
00:47:50,006 --> 00:47:51,466
experiment with localizing my


1663
00:47:51,466 --> 00:47:52,666
app into Arabic which is a


1664
00:47:52,666 --> 00:47:53,566
right-to-left language.


1665
00:47:54,736 --> 00:47:55,736
So the first thing I'm going to


1666
00:47:55,736 --> 00:47:56,916
do is add a field for my


1667
00:47:56,916 --> 00:47:57,616
Username button.


1668
00:47:58,036 --> 00:48:00,936
And I'm going to bind this to my


1669
00:48:00,976 --> 00:48:01,126
-- oops.


1670
00:48:03,216 --> 00:48:04,726
To my username state so that the


1671
00:48:04,726 --> 00:48:06,146
field updates as the value


1672
00:48:06,146 --> 00:48:06,606
changes.


1673
00:48:07,436 --> 00:48:08,756
Notice I've set the placeholder


1674
00:48:08,756 --> 00:48:10,086
text to username so I give the


1675
00:48:10,086 --> 00:48:11,406
user a chance to figure out what


1676
00:48:11,476 --> 00:48:12,226
to do with this field.


1677
00:48:12,596 --> 00:48:13,916
And I've also set the content


1678
00:48:13,966 --> 00:48:15,506
type to username so that


1679
00:48:15,616 --> 00:48:17,016
password and username autofill


1680
00:48:17,216 --> 00:48:19,356
works when using continuity


1681
00:48:19,356 --> 00:48:19,656
keyboard.


1682
00:48:20,796 --> 00:48:21,906
Next I'm going to add a password


1683
00:48:21,966 --> 00:48:23,206
field, and for this I want to


1684
00:48:23,206 --> 00:48:24,566
use a secure field so that


1685
00:48:24,676 --> 00:48:27,166
people can't spy on me when I'm


1686
00:48:27,166 --> 00:48:27,916
typing my password.


1687
00:48:28,016 --> 00:48:28,916
And again, I'm going to bind


1688
00:48:28,916 --> 00:48:30,676
this to my password state.


1689
00:48:31,756 --> 00:48:34,286
I've got a password placeholder


1690
00:48:34,286 --> 00:48:35,646
text and again I'm using the


1691
00:48:35,706 --> 00:48:37,346
content type of Password for


1692
00:48:37,346 --> 00:48:37,966
autofill purposes.


1693
00:48:37,966 --> 00:48:39,826
So that looks great in both


1694
00:48:39,826 --> 00:48:40,676
English and Arabic.


1695
00:48:40,676 --> 00:48:41,806
And for Arabic it's pulling the


1696
00:48:41,806 --> 00:48:42,726
strings right out of my


1697
00:48:42,726 --> 00:48:43,886
localizable strings file.


1698
00:48:43,946 --> 00:48:45,256
This is not placeholder content.


1699
00:48:46,626 --> 00:48:48,676
Okay. Above this, what I want to


1700
00:48:48,676 --> 00:48:50,526
do is add a Sign In With Apple


1701
00:48:50,526 --> 00:48:51,486
button because I think that's


1702
00:48:51,486 --> 00:48:52,376
how users are really going to


1703
00:48:52,376 --> 00:48:53,036
want to sign in.


1704
00:48:54,716 --> 00:48:55,636
So now I put that right at the


1705
00:48:55,696 --> 00:48:57,356
top and then add a separator so


1706
00:48:57,356 --> 00:48:58,706
it's clear that users have an


1707
00:48:58,706 --> 00:48:59,606
option of signing in with their


1708
00:48:59,606 --> 00:49:01,926
Apple ID or creating a customer


1709
00:49:01,926 --> 00:49:03,066
username and password for my


1710
00:49:03,066 --> 00:49:03,196
app.


1711
00:49:03,716 --> 00:49:04,226
That looks great.


1712
00:49:05,286 --> 00:49:06,396
So the last step is to go over


1713
00:49:06,396 --> 00:49:08,826
to my hosting controller and


1714
00:49:08,826 --> 00:49:10,476
change my destination for my


1715
00:49:10,546 --> 00:49:13,466
presentation button to the Sign


1716
00:49:13,466 --> 00:49:14,526
In view that I just created


1717
00:49:14,526 --> 00:49:16,006
instead of the Sign In on iPhone


1718
00:49:16,006 --> 00:49:16,136
view.


1719
00:49:16,136 --> 00:49:19,236
So I got that going and now I


1720
00:49:19,236 --> 00:49:20,996
want to turn on Live Preview, so


1721
00:49:20,996 --> 00:49:21,696
all my buttons become


1722
00:49:21,696 --> 00:49:22,006
interactive.


1723
00:49:22,076 --> 00:49:24,726
And then when I click on my Sign


1724
00:49:24,726 --> 00:49:26,026
In button, I get my form.


1725
00:49:26,796 --> 00:49:28,426
Sign In With Apple, or sign in


1726
00:49:28,426 --> 00:49:29,416
with a username and password.


1727
00:49:29,626 --> 00:49:30,606
That looks great.


1728
00:49:31,126 --> 00:49:32,576
And that is creating a sign-in


1729
00:49:32,646 --> 00:49:33,766
form on the Apple Watch with


1730
00:49:33,766 --> 00:49:33,976
SwiftUI.


1731
00:49:34,516 --> 00:49:41,546
[ Applause ]


1732
00:49:42,046 --> 00:49:43,906
Okay. So you've got the tools to


1733
00:49:43,906 --> 00:49:45,156
build a great independent Apple


1734
00:49:45,156 --> 00:49:46,076
Watch experience.


1735
00:49:46,666 --> 00:49:47,526
How are you going to get your


1736
00:49:47,526 --> 00:49:50,146
app in front of customers with


1737
00:49:51,006 --> 00:49:52,606
the least friction possible?


1738
00:49:54,286 --> 00:49:55,246
The App Store and Apple Watch


1739
00:49:55,386 --> 00:49:56,516
will be highlighting great


1740
00:49:56,516 --> 00:49:58,026
independent apps through curated


1741
00:49:58,026 --> 00:49:59,256
collections and editorial


1742
00:49:59,306 --> 00:50:00,886
selections at the top level of


1743
00:50:00,886 --> 00:50:01,456
the App Store.


1744
00:50:02,196 --> 00:50:03,696
We're emphasizing independent


1745
00:50:03,696 --> 00:50:05,166
apps here so users can get the


1746
00:50:05,166 --> 00:50:06,706
instant gratification of being


1747
00:50:06,706 --> 00:50:08,176
able to download and start using


1748
00:50:08,296 --> 00:50:10,376
your awesome apps right away,


1749
00:50:10,596 --> 00:50:11,636
whether they have the phone with


1750
00:50:11,636 --> 00:50:12,926
them or not.


1751
00:50:15,046 --> 00:50:15,826
And when you dive into


1752
00:50:15,826 --> 00:50:17,016
individual product pages, you'll


1753
00:50:17,086 --> 00:50:18,336
see that this isn't just a pared


1754
00:50:18,336 --> 00:50:19,086
down experience.


1755
00:50:19,496 --> 00:50:21,046
Users will see full featured app


1756
00:50:21,226 --> 00:50:22,366
descriptions, screenshots,


1757
00:50:22,546 --> 00:50:23,546
reviews and more.


1758
00:50:25,306 --> 00:50:26,636
They can search for apps with


1759
00:50:26,636 --> 00:50:27,656
dictation or scribble.


1760
00:50:28,956 --> 00:50:30,336
And they'll be able to download


1761
00:50:30,536 --> 00:50:32,306
your apps directly to their


1762
00:50:32,306 --> 00:50:34,356
wrists, thanks to app and asset


1763
00:50:34,356 --> 00:50:35,936
thinning which make it possible


1764
00:50:35,936 --> 00:50:37,516
to deliver a small bundle with


1765
00:50:37,516 --> 00:50:39,566
only the architecture and assets


1766
00:50:39,566 --> 00:50:40,836
that makes sense for the current


1767
00:50:40,836 --> 00:50:41,276
watch.


1768
00:50:42,186 --> 00:50:43,776
If you have both an iOS and a


1769
00:50:43,776 --> 00:50:45,266
watchOS app, this will make your


1770
00:50:45,406 --> 00:50:47,556
iOS app smaller too, as we're no


1771
00:50:47,556 --> 00:50:48,666
longer downloading the watch


1772
00:50:48,756 --> 00:50:50,226
bundle to the phone and then


1773
00:50:50,226 --> 00:50:50,956
shuttling it over.


1774
00:50:52,316 --> 00:50:53,846
This is truly a whole new era


1775
00:50:53,996 --> 00:50:55,526
for Apple Watch apps to be more


1776
00:50:55,596 --> 00:50:57,476
functional, more beautiful and


1777
00:50:57,476 --> 00:50:58,686
more independent than ever.


1778
00:50:59,186 --> 00:51:00,426
We think both you and your


1779
00:51:00,506 --> 00:51:01,646
customers are going to love


1780
00:51:01,706 --> 00:51:01,806
this.


1781
00:51:03,226 --> 00:51:04,386
And now to talk about the


1782
00:51:04,386 --> 00:51:05,546
platform that we just declared


1783
00:51:05,546 --> 00:51:07,216
independence from, I'd like to


1784
00:51:07,216 --> 00:51:08,276
welcome Cindy to the stage.


1785
00:51:09,516 --> 00:51:15,556
[ Applause ]


1786
00:51:16,056 --> 00:51:16,866
>> Thank you, Lori.


1787
00:51:17,086 --> 00:51:20,236
iOS 13 is a big release.


1788
00:51:21,476 --> 00:51:22,636
You saw this morning that we


1789
00:51:22,636 --> 00:51:24,186
have a ton of new features and


1790
00:51:24,486 --> 00:51:26,946
enhancements like a redesigned


1791
00:51:26,946 --> 00:51:28,506
share sheet, a Quick Type


1792
00:51:28,646 --> 00:51:30,606
keyboard and a brand-new CarPlay


1793
00:51:30,606 --> 00:51:31,066
experience.


1794
00:51:32,426 --> 00:51:34,156
In addition to all of that, we


1795
00:51:34,156 --> 00:51:35,586
took a good long look at our UI


1796
00:51:36,216 --> 00:51:38,696
and gave iOS 13 a brand new


1797
00:51:38,696 --> 00:51:38,796
look.


1798
00:51:39,956 --> 00:51:41,346
This new look includes Dark


1799
00:51:41,426 --> 00:51:44,196
Mode, cards, contextual actions


1800
00:51:44,196 --> 00:51:44,856
and symbols.


1801
00:51:46,056 --> 00:51:47,466
Let's dive into the incredibly


1802
00:51:47,576 --> 00:51:48,686
cool new Dark Mode.


1803
00:51:50,456 --> 00:51:51,596
Dark mode keeps the brightness


1804
00:51:51,676 --> 00:51:53,436
down and gets Chrome out of the


1805
00:51:53,436 --> 00:51:55,146
way so you can focus on just


1806
00:51:55,426 --> 00:51:55,956
content.


1807
00:51:56,786 --> 00:51:58,276
The entire system has been


1808
00:51:58,276 --> 00:51:59,726
really thoughtfully updated and


1809
00:51:59,726 --> 00:52:00,856
refined to look amazing.


1810
00:52:00,856 --> 00:52:03,336
Your users are definitely going


1811
00:52:03,336 --> 00:52:03,876
to want this.


1812
00:52:04,406 --> 00:52:05,906
And to help you bring these same


1813
00:52:05,906 --> 00:52:08,106
refinements to your apps, we've


1814
00:52:08,106 --> 00:52:10,206
created some new APIs designed


1815
00:52:10,286 --> 00:52:11,706
specifically with Dark Mode in


1816
00:52:11,706 --> 00:52:11,976
mind.


1817
00:52:13,326 --> 00:52:15,266
But first it's semantic colors.


1818
00:52:16,626 --> 00:52:17,646
There are new colors for


1819
00:52:17,646 --> 00:52:19,586
backgrounds, fills and text.


1820
00:52:20,426 --> 00:52:21,686
And in Dark Mode, they have


1821
00:52:21,686 --> 00:52:23,686
multiple variants to give your


1822
00:52:23,686 --> 00:52:25,126
app a visual hierarchy.


1823
00:52:25,916 --> 00:52:26,806
Now what does that mean?


1824
00:52:27,626 --> 00:52:28,686
Well, when your app is


1825
00:52:28,796 --> 00:52:30,376
full-screen, its background is


1826
00:52:30,546 --> 00:52:30,966
pure black.


1827
00:52:31,896 --> 00:52:33,346
To ensure sufficient contrast,


1828
00:52:34,016 --> 00:52:36,066
UI presented above it takes on a


1829
00:52:36,156 --> 00:52:37,166
brighter color palette.


1830
00:52:38,136 --> 00:52:40,126
When multitasking on iPad, the


1831
00:52:40,216 --> 00:52:42,146
slide-over app and side-by-side


1832
00:52:42,356 --> 00:52:43,626
apps also render in these


1833
00:52:43,626 --> 00:52:44,976
lighter layer colors.


1834
00:52:46,286 --> 00:52:47,686
There is a lot of nuance to this


1835
00:52:47,786 --> 00:52:49,276
design, but you'll get it


1836
00:52:49,356 --> 00:52:50,556
automatically with semantic


1837
00:52:50,556 --> 00:52:50,786
colors.


1838
00:52:52,686 --> 00:52:54,156
And for when you need a pop,


1839
00:52:54,156 --> 00:52:55,086
there's a bright palette of


1840
00:52:55,236 --> 00:52:56,776
system colors that all have


1841
00:52:56,776 --> 00:52:58,106
variants for the increased


1842
00:52:58,106 --> 00:53:00,076
contrast accessibility mode as


1843
00:53:00,076 --> 00:53:01,706
well variants for Dark Mode.


1844
00:53:05,046 --> 00:53:07,326
There's also a brand-new set of


1845
00:53:07,326 --> 00:53:09,276
materials and vibrant content


1846
00:53:09,366 --> 00:53:10,946
filters with varying levels of


1847
00:53:10,946 --> 00:53:12,936
transparency so you can create


1848
00:53:12,936 --> 00:53:14,576
UI that looks great over any


1849
00:53:14,636 --> 00:53:14,866
content.


1850
00:53:15,596 --> 00:53:17,116
And just like semantic colors,


1851
00:53:17,586 --> 00:53:19,116
these materials support both


1852
00:53:19,246 --> 00:53:20,936
light and dark variants.


1853
00:53:21,886 --> 00:53:23,246
And they will automatically


1854
00:53:23,426 --> 00:53:24,996
update based on changes to the


1855
00:53:25,046 --> 00:53:26,336
UI Kit trait collection.


1856
00:53:27,676 --> 00:53:29,126
Adopting semantic colors and


1857
00:53:29,126 --> 00:53:30,696
adaptive materials will help you


1858
00:53:30,696 --> 00:53:32,496
provide a unified look that


1859
00:53:32,496 --> 00:53:33,986
automatically adapts to your


1860
00:53:33,986 --> 00:53:34,416
environment.


1861
00:53:36,826 --> 00:53:38,736
Another component of iOS 13's


1862
00:53:38,736 --> 00:53:39,836
new look is cards.


1863
00:53:41,496 --> 00:53:43,196
Since the original SDK, the


1864
00:53:43,196 --> 00:53:45,286
default presentation style on


1865
00:53:45,286 --> 00:53:46,346
iPhone has covered the full


1866
00:53:46,426 --> 00:53:46,846
screen.


1867
00:53:47,696 --> 00:53:49,286
We're changing that default to a


1868
00:53:49,286 --> 00:53:50,526
much more fluid card


1869
00:53:50,576 --> 00:53:51,286
presentation.


1870
00:53:52,326 --> 00:53:54,086
Cards provide a visual stack so


1871
00:53:54,086 --> 00:53:55,416
you can see at a glance that


1872
00:53:55,416 --> 00:53:56,606
you're in a presentation.


1873
00:53:56,926 --> 00:53:58,006
And even better, they're


1874
00:53:58,006 --> 00:53:59,416
dismissible with just a single


1875
00:53:59,416 --> 00:53:59,956
downward swipe.


1876
00:54:03,196 --> 00:54:05,196
[ Applause ]


1877
00:54:05,376 --> 00:54:08,386
Yeah. Swiping.


1878
00:54:08,656 --> 00:54:10,276
We've also updated the Peek and


1879
00:54:10,276 --> 00:54:11,256
Pop experience.


1880
00:54:12,106 --> 00:54:14,196
It's now quicker and easier to


1881
00:54:14,196 --> 00:54:15,726
access contextual actions


1882
00:54:15,816 --> 00:54:16,666
throughout the system.


1883
00:54:17,306 --> 00:54:18,136
And they're backed by a


1884
00:54:18,196 --> 00:54:20,126
brand-new API designed to work


1885
00:54:20,126 --> 00:54:21,276
across all devices.


1886
00:54:21,616 --> 00:54:22,636
So not only are they better than


1887
00:54:22,636 --> 00:54:24,616
ever on iPhone, but they look


1888
00:54:24,666 --> 00:54:25,816
great on iPad as well.


1889
00:54:26,836 --> 00:54:28,036
And when you bring your iPad app


1890
00:54:28,456 --> 00:54:29,806
to macOS, they'll look great


1891
00:54:29,806 --> 00:54:29,976
there too.


1892
00:54:33,516 --> 00:54:36,506
[ Applause ]


1893
00:54:37,006 --> 00:54:38,146
Yeah. While we were going


1894
00:54:38,146 --> 00:54:39,316
through the system, making all


1895
00:54:39,316 --> 00:54:41,276
those thoughtful refinements, we


1896
00:54:41,276 --> 00:54:42,496
started thinking about symbols.


1897
00:54:44,556 --> 00:54:45,756
Most apps use symbols.


1898
00:54:46,276 --> 00:54:47,556
They are a really useful way to


1899
00:54:47,556 --> 00:54:48,626
convey information.


1900
00:54:48,626 --> 00:54:50,966
And symbols are very often used


1901
00:54:50,966 --> 00:54:51,286
with text.


1902
00:54:51,536 --> 00:54:53,176
But text has some great


1903
00:54:53,256 --> 00:54:54,856
properties that in iOS 12 our


1904
00:54:54,976 --> 00:54:55,846
symbols just didn't have.


1905
00:54:57,566 --> 00:54:59,536
So as you can see here, the text


1906
00:54:59,796 --> 00:55:01,566
is scaling nicely as the dynamic


1907
00:55:01,566 --> 00:55:03,316
type size increases, but the


1908
00:55:03,316 --> 00:55:04,436
symbols stayed the same.


1909
00:55:05,276 --> 00:55:06,666
Ideally, we'd want the symbols


1910
00:55:06,716 --> 00:55:07,996
to scale along with the text.


1911
00:55:09,906 --> 00:55:11,246
So we created SF Symbols.


1912
00:55:12,766 --> 00:55:13,916
SF Symbols have all the


1913
00:55:13,916 --> 00:55:15,646
expressiveness and behavior of a


1914
00:55:15,796 --> 00:55:17,786
font but packaged up as a UI


1915
00:55:17,996 --> 00:55:19,136
image so they're really easy to


1916
00:55:19,136 --> 00:55:19,896
use in your apps.


1917
00:55:20,616 --> 00:55:23,326
iOS 13 includes an absolutely


1918
00:55:23,596 --> 00:55:25,966
massive catalog of over 1,500 SF


1919
00:55:26,086 --> 00:55:27,076
Symbols for you to use.


1920
00:55:27,076 --> 00:55:29,136
And they're easily searchable


1921
00:55:29,266 --> 00:55:31,796
right within Xcode and using


1922
00:55:31,796 --> 00:55:33,396
standalone SF Symbols app on


1923
00:55:33,396 --> 00:55:33,636
your Mac.


1924
00:55:35,516 --> 00:55:43,106
[ Applause ]


1925
00:55:43,606 --> 00:55:45,316
Symbols. [Laughs] So now you can


1926
00:55:45,316 --> 00:55:47,206
see the symbols scale along with


1927
00:55:47,316 --> 00:55:49,576
the text for better legibility


1928
00:55:49,576 --> 00:55:51,246
and a more consistent layout at


1929
00:55:51,246 --> 00:55:51,906
larger sizes.


1930
00:55:51,906 --> 00:55:54,696
And because they behave just


1931
00:55:54,696 --> 00:55:56,286
like a font, they're available


1932
00:55:56,286 --> 00:55:57,656
in all of these weights as well.


1933
00:56:00,516 --> 00:56:03,586
[ Applause ]


1934
00:56:04,086 --> 00:56:05,206
All of this just scratches the


1935
00:56:05,286 --> 00:56:06,486
surface of what's available in


1936
00:56:06,666 --> 00:56:07,476
iOS 13.


1937
00:56:08,026 --> 00:56:09,786
There's a new share sheet API to


1938
00:56:09,786 --> 00:56:11,116
let apps have recipient


1939
00:56:11,236 --> 00:56:11,556
suggestions.


1940
00:56:11,996 --> 00:56:13,596
A new compositional layout API


1941
00:56:13,896 --> 00:56:15,066
to make collection views easier


1942
00:56:15,066 --> 00:56:15,906
to work with than ever.


1943
00:56:15,906 --> 00:56:17,976
And a screenshot enhancement so


1944
00:56:18,136 --> 00:56:19,946
apps can provide full page views


1945
00:56:19,946 --> 00:56:20,846
of long content.


1946
00:56:21,086 --> 00:56:22,046
And so much more.


1947
00:56:24,686 --> 00:56:26,916
And in addition to all of that,


1948
00:56:27,556 --> 00:56:28,866
we really wanted to bring iOS


1949
00:56:29,016 --> 00:56:29,746
forward this year.


1950
00:56:31,486 --> 00:56:32,716
So we gave it its own operating


1951
00:56:32,796 --> 00:56:34,336
system complete with major


1952
00:56:34,336 --> 00:56:36,296
enhancements to multitasking, a


1953
00:56:36,296 --> 00:56:38,086
new PencilKit framework and a


1954
00:56:38,086 --> 00:56:39,876
whole suite of productivity


1955
00:56:39,876 --> 00:56:40,336
gestures.


1956
00:56:42,416 --> 00:56:43,926
Let's start with multitasking.


1957
00:56:45,176 --> 00:56:47,586
At iPadOS, your app can be open


1958
00:56:47,586 --> 00:56:49,346
in multiple spaces at the same


1959
00:56:49,346 --> 00:56:50,946
time, as well as in the


1960
00:56:51,006 --> 00:56:52,786
slide-over stack, and display


1961
00:56:52,786 --> 00:56:54,516
different content in each space.


1962
00:56:56,466 --> 00:56:57,726
To enable this, we're


1963
00:56:57,726 --> 00:56:59,226
introducing a new UI window


1964
00:56:59,226 --> 00:57:00,066
scene API.


1965
00:57:01,286 --> 00:57:02,796
Each window scene represents a


1966
00:57:02,896 --> 00:57:04,416
single instance of your app's


1967
00:57:04,416 --> 00:57:04,536
UI.


1968
00:57:06,266 --> 00:57:08,016
Prior to iPadOS, your app


1969
00:57:08,236 --> 00:57:09,656
delegate was responsible for


1970
00:57:09,656 --> 00:57:11,356
both its process and UI


1971
00:57:11,586 --> 00:57:12,236
lifecycle.


1972
00:57:13,246 --> 00:57:14,136
With window scene, we're


1973
00:57:14,136 --> 00:57:15,856
splitting out the UI portion of


1974
00:57:15,856 --> 00:57:17,706
that into a new scene delegate


1975
00:57:17,826 --> 00:57:19,416
object so it can be managed


1976
00:57:19,506 --> 00:57:20,316
independently.


1977
00:57:21,236 --> 00:57:22,516
And since they're completely


1978
00:57:22,516 --> 00:57:23,796
independent, your app can now


1979
00:57:23,796 --> 00:57:25,506
manage multiple at the same


1980
00:57:26,416 --> 00:57:26,526
time.


1981
00:57:27,056 --> 00:57:30,276
Your users can even use drag and


1982
00:57:30,276 --> 00:57:32,156
drop to allow individual items


1983
00:57:32,156 --> 00:57:33,726
from your apps such as a single


1984
00:57:33,726 --> 00:57:35,466
window or message to be opened


1985
00:57:35,466 --> 00:57:36,816
in a brand-new window scene.


1986
00:57:38,966 --> 00:57:40,866
With this new capability, it's


1987
00:57:40,866 --> 00:57:42,506
really important that your users


1988
00:57:42,656 --> 00:57:43,806
can resume whatever they were


1989
00:57:43,806 --> 00:57:46,066
doing in any scene at any time.


1990
00:57:46,926 --> 00:57:48,226
To make this easy, we've built a


1991
00:57:48,226 --> 00:57:49,836
new state restoration system


1992
00:57:49,946 --> 00:57:51,566
based on NSUserActivity.


1993
00:57:52,786 --> 00:57:54,116
You're probably already familiar


1994
00:57:54,116 --> 00:57:55,386
with this versatile API.


1995
00:57:55,936 --> 00:57:57,766
It's used for handoff, search,


1996
00:57:57,906 --> 00:58:00,636
indexing, Siri, and now for


1997
00:58:00,636 --> 00:58:02,386
window scene state restoration.


1998
00:58:06,326 --> 00:58:07,456
One of the things that really


1999
00:58:07,456 --> 00:58:09,886
sets -- you can clap, it's fine.


2000
00:58:10,516 --> 00:58:15,546
[ Applause ]


2001
00:58:16,046 --> 00:58:16,746
One of the things that really


2002
00:58:16,746 --> 00:58:18,286
sets iPads apart is Apple


2003
00:58:18,356 --> 00:58:18,806
Pencil.


2004
00:58:20,136 --> 00:58:21,336
We're introducing PencilKit


2005
00:58:21,486 --> 00:58:22,686
which allows you to easily add


2006
00:58:23,076 --> 00:58:24,866
smooth low-latency drawing to


2007
00:58:24,926 --> 00:58:25,706
your apps.


2008
00:58:26,696 --> 00:58:28,436
This is the same engine used in


2009
00:58:28,436 --> 00:58:30,696
Apple apps like Notes, Markup


2010
00:58:30,696 --> 00:58:31,476
and Screenshots.


2011
00:58:31,476 --> 00:58:33,106
So you get all of those same


2012
00:58:33,146 --> 00:58:34,566
features and tools right in your


2013
00:58:36,116 --> 00:58:36,226
apps.


2014
00:58:36,616 --> 00:58:38,276
You can even use the canvas and


2015
00:58:38,276 --> 00:58:39,996
palette functionality separately


2016
00:58:40,316 --> 00:58:41,476
and just pick and choose which


2017
00:58:41,516 --> 00:58:43,146
pieces make sense for your use


2018
00:58:44,226 --> 00:58:44,326
case.


2019
00:58:45,076 --> 00:58:47,046
Finally, let's talk about


2020
00:58:47,046 --> 00:58:48,396
productivity gestures.


2021
00:58:50,266 --> 00:58:51,596
We've made text selection much


2022
00:58:51,596 --> 00:58:52,026
easier.


2023
00:58:52,506 --> 00:58:53,596
You can now just drag your


2024
00:58:53,656 --> 00:58:55,336
finger along text to select it.


2025
00:58:56,286 --> 00:58:57,716
Text views and web views are


2026
00:58:57,766 --> 00:58:59,406
automatically updated with this


2027
00:58:59,406 --> 00:59:00,976
new selection gesture.


2028
00:59:03,006 --> 00:59:04,356
And there are new three-finger


2029
00:59:04,486 --> 00:59:05,646
gestures for undo and redo.


2030
00:59:07,056 --> 00:59:08,226
Swipe three fingers left for


2031
00:59:08,356 --> 00:59:09,666
undo and right for redo.


2032
00:59:10,436 --> 00:59:11,866
These new gestures use the


2033
00:59:11,956 --> 00:59:13,546
existing NSUndoManager so you


2034
00:59:13,546 --> 00:59:14,766
don't have to do anything at all


2035
00:59:14,766 --> 00:59:14,976
to adopt.


2036
00:59:19,046 --> 00:59:20,046
If you'd like easy text


2037
00:59:20,156 --> 00:59:21,796
selection outside of text or web


2038
00:59:21,796 --> 00:59:23,796
views, or if your app already


2039
00:59:23,796 --> 00:59:25,226
uses three-finger gestures and


2040
00:59:25,226 --> 00:59:26,906
you have a conflict, you can use


2041
00:59:26,906 --> 00:59:29,016
the UITexInteraction API to fix


2042
00:59:29,066 --> 00:59:29,756
up those issues.


2043
00:59:32,276 --> 00:59:33,466
And for scroll views, you can


2044
00:59:33,466 --> 00:59:35,156
now drag the scroll indicator to


2045
00:59:35,156 --> 00:59:36,916
jump directly to a location in


2046
00:59:36,916 --> 00:59:37,526
the scroll view.


2047
00:59:38,736 --> 00:59:40,006
To enable this behavior, just


2048
00:59:40,046 --> 00:59:41,796
turn on Show Scroll Indicators.


2049
00:59:42,396 --> 00:59:43,476
For this one it's really


2050
00:59:43,476 --> 00:59:44,676
important that your scrolling is


2051
00:59:44,766 --> 00:59:46,196
performant as we might have to


2052
00:59:46,196 --> 00:59:48,076
load all of the cells in a frame


2053
00:59:48,076 --> 00:59:50,186
at the same time.


2054
00:59:50,956 --> 00:59:52,246
We think our users are going to


2055
00:59:52,246 --> 00:59:53,796
love the powerful new things


2056
00:59:53,796 --> 00:59:56,236
iPadOS gives them, and we cannot


2057
00:59:56,236 --> 00:59:57,566
wait to see what you do with it.


2058
00:59:58,536 --> 00:59:59,756
So I'd like to welcome Sebastien


2059
00:59:59,756 --> 01:00:00,576
back to the stage.


2060
01:00:01,516 --> 01:00:06,666
[ Applause ]


2061
01:00:07,166 --> 01:00:07,966
>> Thank you, Cindy.


2062
01:00:08,676 --> 01:00:10,146
Now as you've seen, each of our


2063
01:00:10,146 --> 01:00:11,546
platforms has incredible new


2064
01:00:11,616 --> 01:00:13,036
features that refine the


2065
01:00:13,036 --> 01:00:14,866
experience that each offers and


2066
01:00:14,866 --> 01:00:15,696
gives them great new


2067
01:00:15,696 --> 01:00:16,436
capabilities.


2068
01:00:16,816 --> 01:00:18,336
And across all of our platforms


2069
01:00:18,686 --> 01:00:20,226
we build a range of technologies


2070
01:00:20,226 --> 01:00:21,186
that are designed to give your


2071
01:00:21,186 --> 01:00:23,746
apps a huge head start so that


2072
01:00:23,746 --> 01:00:24,846
you can build the latest


2073
01:00:24,846 --> 01:00:26,956
technologies right into your


2074
01:00:26,956 --> 01:00:27,206
app.


2075
01:00:28,156 --> 01:00:28,936
There are a few of these that


2076
01:00:28,936 --> 01:00:29,946
we'd like to focus on this


2077
01:00:29,986 --> 01:00:31,426
afternoon and they cover a


2078
01:00:31,426 --> 01:00:32,206
pretty wide range of


2079
01:00:32,246 --> 01:00:34,096
capabilities from how we open


2080
01:00:34,096 --> 01:00:36,216
our platforms and apps to all


2081
01:00:36,216 --> 01:00:37,936
users to how we combine the


2082
01:00:37,936 --> 01:00:39,386
virtual and real-world with


2083
01:00:39,386 --> 01:00:40,296
augmented reality.


2084
01:00:40,876 --> 01:00:41,596
And so we start with


2085
01:00:41,596 --> 01:00:43,026
accessibility, and to do that


2086
01:00:43,026 --> 01:00:44,456
I'd like to welcome Eric Seymour


2087
01:00:44,676 --> 01:00:45,156
on stage.


2088
01:00:45,156 --> 01:00:45,586
Eric?


2089
01:00:46,516 --> 01:00:48,596
[ Applause ]


2090
01:00:49,096 --> 01:00:49,826
>> Thank you, Sebastien.


2091
01:00:52,646 --> 01:00:54,156
So we all know that technology


2092
01:00:54,246 --> 01:00:55,636
plays a powerful role in


2093
01:00:55,636 --> 01:00:55,936
people's lives.


2094
01:00:55,936 --> 01:00:59,696
But this is especially true for


2095
01:00:59,696 --> 01:01:00,936
people with disabilities.


2096
01:01:01,456 --> 01:01:03,126
Technology can be instrumental


2097
01:01:03,126 --> 01:01:04,456
in fostering independence,


2098
01:01:04,456 --> 01:01:06,176
employment and empowerment.


2099
01:01:06,176 --> 01:01:08,026
At Apple, we're guided by a few


2100
01:01:08,026 --> 01:01:09,866
key principles for accessibility


2101
01:01:09,866 --> 01:01:11,396
and it begins with accessibility


2102
01:01:11,396 --> 01:01:12,226
being built in.


2103
01:01:12,816 --> 01:01:14,066
People should be able to use our


2104
01:01:14,066 --> 01:01:15,926
products out of the box, and


2105
01:01:15,926 --> 01:01:17,296
that includes people of all


2106
01:01:17,296 --> 01:01:17,826
abilities.


2107
01:01:19,276 --> 01:01:20,206
Accessibility should be


2108
01:01:20,256 --> 01:01:20,986
comprehensive.


2109
01:01:21,366 --> 01:01:23,336
People should have access to the


2110
01:01:23,336 --> 01:01:25,836
whole platform, every corner of


2111
01:01:25,836 --> 01:01:26,736
the OS, every corner of your


2112
01:01:26,736 --> 01:01:27,216
apps.


2113
01:01:28,006 --> 01:01:30,176
And perhaps most important, we


2114
01:01:30,176 --> 01:01:32,216
want to surprise and delight all


2115
01:01:32,216 --> 01:01:34,036
users regardless of ability.


2116
01:01:34,136 --> 01:01:35,586
And so this is more than just


2117
01:01:35,626 --> 01:01:37,426
about fixing accessibility bugs.


2118
01:01:37,466 --> 01:01:39,276
This is about using your


2119
01:01:39,276 --> 01:01:41,016
features with accessibility and


2120
01:01:41,016 --> 01:01:42,366
striving for an experience


2121
01:01:42,366 --> 01:01:43,736
that's great, that's just as


2122
01:01:43,736 --> 01:01:44,976
inspired as your original


2123
01:01:44,976 --> 01:01:45,386
design.


2124
01:01:45,386 --> 01:01:48,366
When we think about


2125
01:01:49,176 --> 01:01:51,126
accessibility, we're really


2126
01:01:51,126 --> 01:01:53,226
talking about a broad continuum


2127
01:01:53,226 --> 01:01:53,886
of abilities.


2128
01:01:54,646 --> 01:01:56,696
Hearing, vision, physical,


2129
01:01:56,696 --> 01:01:57,726
learning.


2130
01:01:57,836 --> 01:01:59,606
And within each of these areas,


2131
01:01:59,606 --> 01:02:00,446
we're focused on different


2132
01:02:00,446 --> 01:02:01,196
conditions.


2133
01:02:02,116 --> 01:02:03,796
So for example, for vision, we


2134
01:02:03,836 --> 01:02:05,906
of course have Voiceover, our


2135
01:02:05,906 --> 01:02:06,966
screen reader for people who


2136
01:02:06,966 --> 01:02:07,846
can't see the screen.


2137
01:02:07,846 --> 01:02:11,586
But we also have over a dozen


2138
01:02:11,586 --> 01:02:13,096
vision-related features from


2139
01:02:13,096 --> 01:02:15,116
zoom to large text.


2140
01:02:15,696 --> 01:02:17,156
And when we take this approach


2141
01:02:17,366 --> 01:02:18,866
and we apply it to that broad


2142
01:02:18,866 --> 01:02:20,846
continuum of abilities, we're


2143
01:02:20,846 --> 01:02:22,676
talking about dozens of


2144
01:02:22,676 --> 01:02:23,776
accessibility features.


2145
01:02:23,776 --> 01:02:24,956
And it really underscores the


2146
01:02:24,956 --> 01:02:28,396
notion that accessibility is for


2147
01:02:28,396 --> 01:02:29,006
everyone.


2148
01:02:30,456 --> 01:02:32,036
Probably most of you use at


2149
01:02:32,036 --> 01:02:33,706
least one accessibility feature.


2150
01:02:33,706 --> 01:02:34,666
And if you don't already,


2151
01:02:35,136 --> 01:02:36,196
there's a good chance you will


2152
01:02:36,196 --> 01:02:36,786
eventually.


2153
01:02:37,306 --> 01:02:40,836
This year we're introducing


2154
01:02:40,916 --> 01:02:42,076
several new accessibility


2155
01:02:42,076 --> 01:02:43,476
features and enhancements, and


2156
01:02:43,476 --> 01:02:44,616
today I'm going to talk about


2157
01:02:44,616 --> 01:02:46,036
two, starting with


2158
01:02:46,526 --> 01:02:47,466
discoverability.


2159
01:02:48,026 --> 01:02:49,636
In the spirit of accessibility


2160
01:02:49,636 --> 01:02:51,116
being for everyone, we wanted to


2161
01:02:51,116 --> 01:02:52,426
make it easier to find.


2162
01:02:52,986 --> 01:02:55,156
And so to that end we've added


2163
01:02:55,206 --> 01:02:56,976
accessibility to iOS Quick


2164
01:02:56,976 --> 01:02:58,646
Start, making the out-of-box


2165
01:02:58,646 --> 01:03:00,886
experience even more accessible.


2166
01:03:01,686 --> 01:03:04,566
Also we've moved accessibility


2167
01:03:04,566 --> 01:03:06,726
to the top level of settings.


2168
01:03:07,516 --> 01:03:12,606
[ Applause ]


2169
01:03:13,106 --> 01:03:14,576
And we've reorganized it to make


2170
01:03:14,576 --> 01:03:15,796
things easier to find.


2171
01:03:16,236 --> 01:03:17,216
We think it's going to go a long


2172
01:03:17,216 --> 01:03:18,576
way to help people discover and


2173
01:03:18,576 --> 01:03:19,756
use these great features.


2174
01:03:19,756 --> 01:03:23,216
Now let's talk about voice


2175
01:03:23,216 --> 01:03:23,916
control, right?


2176
01:03:24,026 --> 01:03:25,256
We saw this this morning during


2177
01:03:25,256 --> 01:03:25,836
the keynote.


2178
01:03:26,196 --> 01:03:27,606
Voice control is this full voice


2179
01:03:27,606 --> 01:03:29,556
experience from macOS, iOS and


2180
01:03:29,556 --> 01:03:31,476
iPadOS and we think it's going


2181
01:03:31,476 --> 01:03:33,596
to be really helpful for people


2182
01:03:33,596 --> 01:03:34,856
with physical challenges.


2183
01:03:35,656 --> 01:03:36,596
Voice control provides


2184
01:03:36,746 --> 01:03:38,406
comprehensive platform access.


2185
01:03:38,636 --> 01:03:40,556
You can speak to items by name.


2186
01:03:40,556 --> 01:03:41,866
You can refer to items by


2187
01:03:41,866 --> 01:03:42,266
number.


2188
01:03:42,426 --> 01:03:43,846
You can even speak to regions of


2189
01:03:43,846 --> 01:03:46,306
the screen using a grid.


2190
01:03:46,916 --> 01:03:48,216
Voice control has got great text


2191
01:03:48,216 --> 01:03:48,516
editing.


2192
01:03:48,516 --> 01:03:50,016
So of course I can dictate text


2193
01:03:50,276 --> 01:03:51,986
but I can also make selections


2194
01:03:51,986 --> 01:03:53,756
and corrections using only my


2195
01:03:53,756 --> 01:03:54,206
voice.


2196
01:03:54,926 --> 01:03:56,896
And it also has awareness.


2197
01:03:57,296 --> 01:03:59,036
So effectively even when I'm


2198
01:03:59,166 --> 01:04:00,756
dictating text, it hears


2199
01:04:00,756 --> 01:04:02,196
commands and it doesn't make me


2200
01:04:02,196 --> 01:04:03,166
manage that distinction.


2201
01:04:03,166 --> 01:04:05,066
I can just talk to it.


2202
01:04:05,066 --> 01:04:06,646
And using the true depth camera,


2203
01:04:06,886 --> 01:04:08,926
if I look away, it knows that it


2204
01:04:08,926 --> 01:04:09,546
can ignore me.


2205
01:04:10,976 --> 01:04:12,516
Voice control's got great spoken


2206
01:04:12,516 --> 01:04:13,506
gestures so of course I can do


2207
01:04:13,506 --> 01:04:15,036
simple things like taps and


2208
01:04:15,036 --> 01:04:15,486
swipes.


2209
01:04:15,886 --> 01:04:17,906
But I can also pre-record more


2210
01:04:17,906 --> 01:04:19,216
complex gestures that I might


2211
01:04:19,216 --> 01:04:20,596
want to use in an app or a game,


2212
01:04:20,596 --> 01:04:21,846
like this rotate gesture.


2213
01:04:23,326 --> 01:04:25,196
And of course voice control


2214
01:04:25,196 --> 01:04:27,486
speech recognition runs fully on


2215
01:04:27,486 --> 01:04:28,106
device.


2216
01:04:28,716 --> 01:04:30,576
And so now I'd like to show you


2217
01:04:30,576 --> 01:04:31,596
voice control in action.


2218
01:04:32,516 --> 01:04:37,786
[ Applause ]


2219
01:04:38,286 --> 01:04:39,476
And for this demo I'm going to


2220
01:04:39,476 --> 01:04:41,996
be talking to my iPhone.


2221
01:04:47,566 --> 01:04:48,446
Open messages.


2222
01:04:49,016 --> 01:04:53,436
Hey Chris, let's grab dinner


2223
01:04:54,506 --> 01:04:55,406
tonight.


2224
01:04:56,256 --> 01:04:57,976
I'm thinking pizza.


2225
01:04:58,086 --> 01:04:59,306
Pizza emoji.


2226
01:05:00,466 --> 01:05:03,206
Change tonight to this weekend.


2227
01:05:04,956 --> 01:05:06,286
Tap send.


2228
01:05:09,516 --> 01:05:10,476
Undo that.


2229
01:05:11,576 --> 01:05:12,486
Tap send.


2230
01:05:15,016 --> 01:05:16,136
[ Laughter ]


2231
01:05:16,136 --> 01:05:17,156
Undo that.


2232
01:05:20,376 --> 01:05:21,436
Tap send.


2233
01:05:23,516 --> 01:05:25,576
[ Applause ]


2234
01:05:26,076 --> 01:05:26,516
Open Maps.


2235
01:05:30,166 --> 01:05:31,066
Tap search field.


2236
01:05:31,786 --> 01:05:35,366
San Pedro Square.


2237
01:05:36,826 --> 01:05:37,606
Show numbers.


2238
01:05:39,196 --> 01:05:43,666
Five. Show grid continuously.


2239
01:05:44,616 --> 01:05:49,516
15. Zoom at one.


2240
01:05:49,716 --> 01:05:50,886
Repeat four times.


2241
01:05:53,516 --> 01:06:02,546
[ Applause ]


2242
01:06:03,046 --> 01:06:05,916
Swipe up at 27.


2243
01:06:05,916 --> 01:06:06,696
Hide grid.


2244
01:06:08,116 --> 01:06:09,106
Tap share.


2245
01:06:09,626 --> 01:06:12,266
Tap Chris Adams.


2246
01:06:13,026 --> 01:06:17,446
Lots of options around here,


2247
01:06:17,926 --> 01:06:18,106
period.


2248
01:06:18,916 --> 01:06:20,816
See you later.


2249
01:06:21,476 --> 01:06:22,406
Peace emoji.


2250
01:06:24,286 --> 01:06:26,926
Ah, look at that.


2251
01:06:27,476 --> 01:06:28,776
Undo that.


2252
01:06:30,076 --> 01:06:30,976
Peace emoji.


2253
01:06:31,706 --> 01:06:32,846
Tap send.


2254
01:06:35,516 --> 01:06:39,546
[ Laughter ]


2255
01:06:40,046 --> 01:06:40,866
Undo that.


2256
01:06:43,016 --> 01:06:43,736
Tap send.


2257
01:06:46,516 --> 01:06:53,976
[ Applause ]


2258
01:06:54,476 --> 01:06:55,906
Go home. Go to sleep.


2259
01:06:56,936 --> 01:06:59,186
Okay. So that's voice control.


2260
01:07:00,296 --> 01:07:00,616
Now --


2261
01:07:02,516 --> 01:07:05,546
[ Applause ]


2262
01:07:06,046 --> 01:07:07,306
Now we can also use voice


2263
01:07:07,306 --> 01:07:09,246
control as developers to test


2264
01:07:09,246 --> 01:07:10,856
the accessibility of our apps.


2265
01:07:11,036 --> 01:07:12,246
And so let's do that now with


2266
01:07:12,246 --> 01:07:13,276
the travel app that you saw


2267
01:07:13,276 --> 01:07:13,676
earlier.


2268
01:07:14,406 --> 01:07:17,946
Wake up. Open Travel.


2269
01:07:21,456 --> 01:07:23,006
Tap San Francisco.


2270
01:07:23,746 --> 01:07:26,526
Tap San Francisco.


2271
01:07:26,636 --> 01:07:27,666
Show names.


2272
01:07:28,956 --> 01:07:33,246
All right, here's the problem.


2273
01:07:33,576 --> 01:07:35,166
So I'm trying to tap on San


2274
01:07:35,166 --> 01:07:37,286
Francisco, this element, but it


2275
01:07:37,286 --> 01:07:38,066
doesn't have a good


2276
01:07:38,066 --> 01:07:39,516
accessibility label yet and it's


2277
01:07:39,516 --> 01:07:40,646
a really common problem.


2278
01:07:40,646 --> 01:07:41,906
It means I can't speak to this


2279
01:07:41,906 --> 01:07:43,446
element with voice control, and


2280
01:07:43,446 --> 01:07:44,966
even worse, if I couldn't see


2281
01:07:44,966 --> 01:07:46,516
the screen and Voiceover were


2282
01:07:46,516 --> 01:07:48,086
reading this to me, I'd be


2283
01:07:48,086 --> 01:07:49,496
completely out of luck, stopped


2284
01:07:49,496 --> 01:07:50,056
in my tracks.


2285
01:07:50,056 --> 01:07:51,376
I would not be able to use this


2286
01:07:51,376 --> 01:07:51,696
app.


2287
01:07:52,046 --> 01:07:55,276
So fortunately these things are


2288
01:07:55,326 --> 01:07:56,266
pretty easy to fix.


2289
01:07:56,266 --> 01:07:57,786
And so let's talk about what you


2290
01:07:57,786 --> 01:07:59,426
can do to make your apps more


2291
01:07:59,426 --> 01:07:59,966
accessible.


2292
01:08:04,046 --> 01:08:05,596
The good news is, most


2293
01:08:05,596 --> 01:08:07,166
accessibility features just


2294
01:08:07,236 --> 01:08:07,546
work.


2295
01:08:08,046 --> 01:08:09,056
But some of them, indeed the


2296
01:08:09,056 --> 01:08:10,326
most transformative features


2297
01:08:10,326 --> 01:08:11,576
like Voice Control and Switch


2298
01:08:11,576 --> 01:08:14,046
Control and Voiceover, they need


2299
01:08:14,046 --> 01:08:14,676
your support.


2300
01:08:14,676 --> 01:08:16,345
And so here's what you can do.


2301
01:08:16,345 --> 01:08:18,515
First, do what we just did.


2302
01:08:18,515 --> 01:08:19,265
Just try it.


2303
01:08:19,395 --> 01:08:21,386
Use your apps with accessibility


2304
01:08:21,386 --> 01:08:21,916
features.


2305
01:08:22,216 --> 01:08:23,426
You might actually be surprised


2306
01:08:23,426 --> 01:08:24,336
at what already works.


2307
01:08:24,406 --> 01:08:25,876
But more importantly, you're


2308
01:08:25,876 --> 01:08:27,376
going to gain valuable insight


2309
01:08:27,376 --> 01:08:30,426
into how some users actually


2310
01:08:30,426 --> 01:08:31,406
experience your app.


2311
01:08:31,406 --> 01:08:32,716
And you're probably going to


2312
01:08:32,716 --> 01:08:33,856
want to make some changes.


2313
01:08:34,725 --> 01:08:37,145
Next, use the tools.


2314
01:08:37,145 --> 01:08:38,716
Xcode's got great built-in


2315
01:08:38,716 --> 01:08:39,786
accessibility support for


2316
01:08:39,786 --> 01:08:40,426
developers.


2317
01:08:40,426 --> 01:08:41,636
You can edit accessibility


2318
01:08:41,685 --> 01:08:43,055
properties right in the Xcode


2319
01:08:43,055 --> 01:08:43,845
inspector.


2320
01:08:44,036 --> 01:08:45,156
And with new Environment


2321
01:08:45,156 --> 01:08:47,036
Overrides, you can preview


2322
01:08:47,036 --> 01:08:48,345
visual accessibility


2323
01:08:48,345 --> 01:08:49,456
accommodations during your


2324
01:08:49,456 --> 01:08:51,475
development lifecycle right in


2325
01:08:51,475 --> 01:08:52,326
your app.


2326
01:08:52,716 --> 01:08:53,636
It's really cool.


2327
01:08:54,515 --> 01:08:56,606
Finally, implement the


2328
01:08:56,606 --> 01:08:57,786
Accessibility API.


2329
01:08:57,786 --> 01:08:59,986
It's the best way to ensure an


2330
01:08:59,986 --> 01:09:01,326
accessible experience.


2331
01:09:01,326 --> 01:09:02,606
It's the essential way.


2332
01:09:02,966 --> 01:09:04,816
Doing this well is like putting


2333
01:09:04,816 --> 01:09:06,216
out a welcome mat to your app


2334
01:09:06,506 --> 01:09:08,386
for users of all abilities.


2335
01:09:08,526 --> 01:09:09,975
It's how Voiceover and Switch


2336
01:09:09,975 --> 01:09:11,316
Control and the rest talk to


2337
01:09:11,316 --> 01:09:12,716
your app to offer an adapted


2338
01:09:12,716 --> 01:09:13,456
experience.


2339
01:09:14,196 --> 01:09:15,586
The Accessibility APIs work on


2340
01:09:15,586 --> 01:09:17,265
all platform, and while they're


2341
01:09:17,265 --> 01:09:18,796
easy to implement, they're super


2342
01:09:18,796 --> 01:09:19,326
powerful.


2343
01:09:19,326 --> 01:09:20,776
So even the most sophisticated


2344
01:09:20,776 --> 01:09:22,845
apps and experiences can be made


2345
01:09:22,845 --> 01:09:23,765
fully accessible.


2346
01:09:24,406 --> 01:09:26,916
And of course, SwiftUI has great


2347
01:09:26,916 --> 01:09:28,696
accessibility support built


2348
01:09:28,756 --> 01:09:29,196
right in.


2349
01:09:29,986 --> 01:09:31,265
And so that's our accessibility


2350
01:09:31,265 --> 01:09:32,265
update today.


2351
01:09:32,616 --> 01:09:34,416
Now another thing we care deeply


2352
01:09:34,416 --> 01:09:35,895
about at Apple is privacy.


2353
01:09:35,996 --> 01:09:37,036
And so to tell you more about


2354
01:09:37,036 --> 01:09:38,206
that, I'd like to hand things


2355
01:09:38,206 --> 01:09:39,395
over to Katie.


2356
01:09:39,395 --> 01:09:39,975
Thanks very much.


2357
01:09:40,515 --> 01:09:47,046
[ Applause ]


2358
01:09:47,546 --> 01:09:48,456
>> Thanks, Eric.


2359
01:09:48,616 --> 01:09:50,386
Privacy is a topic that isn't


2360
01:09:50,386 --> 01:09:51,046
going away.


2361
01:09:51,046 --> 01:09:52,805
And it's something that everyone


2362
01:09:52,805 --> 01:09:53,935
needs to pay attention to.


2363
01:09:53,935 --> 01:09:56,316
It's something you have to


2364
01:09:56,316 --> 01:09:59,096
design in from the beginning and


2365
01:09:59,096 --> 01:10:00,656
it shapes how your product


2366
01:10:00,706 --> 01:10:01,076
works.


2367
01:10:02,086 --> 01:10:03,276
When you're designing a new


2368
01:10:03,276 --> 01:10:05,086
feature, here are a few steps


2369
01:10:05,086 --> 01:10:07,776
that you can take to design for


2370
01:10:07,846 --> 01:10:08,426
privacy.


2371
01:10:09,866 --> 01:10:11,366
Process on the user's device.


2372
01:10:12,096 --> 01:10:14,226
Wherever you can keep user data


2373
01:10:14,226 --> 01:10:16,136
on-device, do it.


2374
01:10:16,946 --> 01:10:19,016
And this helps you to collect as


2375
01:10:19,016 --> 01:10:20,586
little data as you can.


2376
01:10:21,196 --> 01:10:22,996
If you don't have the data, it


2377
01:10:23,446 --> 01:10:25,696
can't be abused or stolen.


2378
01:10:26,366 --> 01:10:27,206
Ask first.


2379
01:10:27,416 --> 01:10:32,356
Ask permission from your user


2380
01:10:32,536 --> 01:10:34,276
for the data and how you plan to


2381
01:10:34,386 --> 01:10:34,916
use it.


2382
01:10:35,276 --> 01:10:38,066
And if you do collect data, use


2383
01:10:38,116 --> 01:10:39,236
random identifiers.


2384
01:10:39,976 --> 01:10:41,466
And scope them down from an


2385
01:10:41,686 --> 01:10:43,976
account to a device, to a


2386
01:10:44,136 --> 01:10:45,506
session where possible.


2387
01:10:46,036 --> 01:10:49,136
And encrypt to keep your users'


2388
01:10:49,136 --> 01:10:50,126
data secure.


2389
01:10:51,506 --> 01:10:53,266
Applying these principles in


2390
01:10:53,266 --> 01:10:55,356
your design process will help


2391
01:10:55,356 --> 01:10:57,746
you build great features and


2392
01:10:57,916 --> 01:10:58,626
great privacy.


2393
01:10:58,626 --> 01:11:01,676
I want to talk about two areas


2394
01:11:01,676 --> 01:11:04,026
where we've made it easier for


2395
01:11:04,026 --> 01:11:06,276
you to take these steps.


2396
01:11:06,456 --> 01:11:08,316
First, location.


2397
01:11:10,786 --> 01:11:12,876
Where you go can reveal a lot


2398
01:11:12,876 --> 01:11:13,736
about your life.


2399
01:11:14,606 --> 01:11:16,536
Where you live, where you work,


2400
01:11:17,276 --> 01:11:18,576
what doctor's office you might


2401
01:11:18,576 --> 01:11:21,166
go to, or how often you're


2402
01:11:21,166 --> 01:11:23,476
hitting the gym versus maybe the


2403
01:11:23,476 --> 01:11:23,896
bar.


2404
01:11:25,656 --> 01:11:27,356
Because of this, some users are


2405
01:11:27,486 --> 01:11:29,686
hesitant to share location with


2406
01:11:29,686 --> 01:11:30,866
you and your apps.


2407
01:11:31,846 --> 01:11:33,366
So they might miss out on some


2408
01:11:33,366 --> 01:11:34,836
of your key features.


2409
01:11:35,826 --> 01:11:37,606
So this year, we're adding a new


2410
01:11:37,606 --> 01:11:40,156
option: Allow Once.


2411
01:11:41,876 --> 01:11:43,646
This provides location access


2412
01:11:43,646 --> 01:11:45,946
for just that session and will


2413
01:11:45,946 --> 01:11:49,516
ask the user again next time.


2414
01:11:49,736 --> 01:11:51,986
But let's say your app is even


2415
01:11:51,986 --> 01:11:53,546
better with Always Allow


2416
01:11:53,546 --> 01:11:54,526
Location permission.


2417
01:11:55,456 --> 01:11:57,136
Here's how this will now work.


2418
01:11:58,506 --> 01:11:59,866
First the user needs to select


2419
01:12:00,366 --> 01:12:00,996
While In Use.


2420
01:12:02,586 --> 01:12:05,246
Then you request location while


2421
01:12:05,246 --> 01:12:06,846
your app is in the background.


2422
01:12:07,996 --> 01:12:09,296
Then the user will be presented


2423
01:12:09,296 --> 01:12:11,766
with an alert, letting them know


2424
01:12:11,766 --> 01:12:13,646
that you're requesting location


2425
01:12:13,996 --> 01:12:16,506
in the background.


2426
01:12:16,506 --> 01:12:18,276
If they change to Always Allow,


2427
01:12:19,056 --> 01:12:20,446
you'll have background location


2428
01:12:20,776 --> 01:12:22,186
access moving forward.


2429
01:12:22,816 --> 01:12:26,196
Finally, we're giving users more


2430
01:12:26,196 --> 01:12:28,236
transparency into how their


2431
01:12:28,236 --> 01:12:29,576
location is being accessed.


2432
01:12:30,876 --> 01:12:32,486
For all apps with background


2433
01:12:32,486 --> 01:12:34,556
location permission, from time


2434
01:12:34,556 --> 01:12:36,356
to time we'll show them where


2435
01:12:36,356 --> 01:12:37,866
your app accessed their


2436
01:12:37,866 --> 01:12:38,606
location.


2437
01:12:39,516 --> 01:12:47,546
[ Applause ]


2438
01:12:48,046 --> 01:12:48,726
With these changes to


2439
01:12:48,726 --> 01:12:50,256
permissions, users will feel


2440
01:12:50,256 --> 01:12:52,456
more comfortable in how they're


2441
01:12:52,546 --> 01:12:54,566
sharing location with you.


2442
01:12:55,726 --> 01:12:57,766
Now, let's talk about login.


2443
01:13:00,276 --> 01:13:01,886
We've all seen or maybe


2444
01:13:01,886 --> 01:13:03,416
implemented buttons like these.


2445
01:13:03,416 --> 01:13:05,496
And they can be really


2446
01:13:05,496 --> 01:13:07,186
convenient, but they can come at


2447
01:13:07,186 --> 01:13:09,326
the cost of your user's privacy.


2448
01:13:10,586 --> 01:13:11,826
They also might share more


2449
01:13:11,826 --> 01:13:14,116
information about your company's


2450
01:13:14,186 --> 01:13:16,236
business than you really want to


2451
01:13:16,236 --> 01:13:17,116
be disclosing.


2452
01:13:18,416 --> 01:13:20,166
So we want to offer a better


2453
01:13:20,166 --> 01:13:20,586
option.


2454
01:13:20,586 --> 01:13:23,676
And it's called Sign In With


2455
01:13:23,836 --> 01:13:23,976
Apple.


2456
01:13:24,516 --> 01:13:31,026
[ Applause ]


2457
01:13:31,526 --> 01:13:33,606
It offers fast, easy sign-in


2458
01:13:33,816 --> 01:13:35,076
without all the tracking.


2459
01:13:35,996 --> 01:13:37,936
This isn't just about privacy


2460
01:13:37,936 --> 01:13:40,756
for our users, but also for your


2461
01:13:40,756 --> 01:13:41,306
company.


2462
01:13:42,456 --> 01:13:44,036
It's not our business to know


2463
01:13:44,036 --> 01:13:45,706
how users engage with your app,


2464
01:13:46,676 --> 01:13:48,446
so Apple simply won't track


2465
01:13:49,706 --> 01:13:49,806
that.


2466
01:13:50,516 --> 01:13:56,546
[ Applause ]


2467
01:13:57,046 --> 01:13:58,546
It's easy to add a Sign In With


2468
01:13:58,546 --> 01:14:00,026
Apple button to your app with a


2469
01:14:00,126 --> 01:14:00,776
simple API.


2470
01:14:01,916 --> 01:14:03,986
Users can set up an account and


2471
01:14:04,016 --> 01:14:05,676
sign into your app with a tap


2472
01:14:06,026 --> 01:14:08,806
and a quick Face ID.


2473
01:14:09,036 --> 01:14:11,786
So why is this great for all of


2474
01:14:13,026 --> 01:14:13,093
you?


2475
01:14:13,486 --> 01:14:15,836
First off, more trust and less


2476
01:14:15,966 --> 01:14:18,006
friction equals more engaged


2477
01:14:18,006 --> 01:14:18,616
users.


2478
01:14:19,776 --> 01:14:21,246
Sign In With Apple can shorten


2479
01:14:21,246 --> 01:14:24,366
the distance between a user


2480
01:14:24,606 --> 01:14:27,686
considering your application and


2481
01:14:27,686 --> 01:14:29,466
really embracing it.


2482
01:14:31,396 --> 01:14:33,736
Second, verify email addresses.


2483
01:14:34,836 --> 01:14:36,976
Apple has already done the work


2484
01:14:37,436 --> 01:14:39,546
of verifying email addresses for


2485
01:14:39,546 --> 01:14:40,176
you.


2486
01:14:41,516 --> 01:14:47,596
[ Applause ]


2487
01:14:48,096 --> 01:14:49,046
And we're removing the incentive


2488
01:14:49,046 --> 01:14:51,686
for users to share made-up email


2489
01:14:51,796 --> 01:14:54,096
addresses by offering a private


2490
01:14:54,196 --> 01:14:55,596
email relay service.


2491
01:14:55,676 --> 01:14:59,436
So even if a user chooses to


2492
01:14:59,606 --> 01:15:01,406
hide their email address when


2493
01:15:01,406 --> 01:15:03,006
setting up an account, your


2494
01:15:03,006 --> 01:15:04,626
email will arrive in their


2495
01:15:04,626 --> 01:15:07,886
verified account, their verified


2496
01:15:07,886 --> 01:15:08,346
inbox.


2497
01:15:08,836 --> 01:15:12,036
And then there's security.


2498
01:15:12,036 --> 01:15:14,546
With Sign Into Apple, you don't


2499
01:15:14,546 --> 01:15:15,746
need to deal with storing


2500
01:15:15,746 --> 01:15:18,796
passwords or password reset


2501
01:15:18,796 --> 01:15:19,286
issues.


2502
01:15:19,636 --> 01:15:21,796
And every single account is


2503
01:15:21,796 --> 01:15:23,836
protected with two-factor


2504
01:15:23,886 --> 01:15:24,756
authentication.


2505
01:15:27,516 --> 01:15:31,546
[ Applause ]


2506
01:15:32,046 --> 01:15:33,346
This can really improve your


2507
01:15:33,346 --> 01:15:34,146
security.


2508
01:15:35,536 --> 01:15:36,886
We've also integrated some


2509
01:15:36,976 --> 01:15:39,096
interesting innovations around


2510
01:15:40,946 --> 01:15:42,006
anti-fraud.


2511
01:15:42,206 --> 01:15:44,096
We all know that along with some


2512
01:15:44,096 --> 01:15:46,286
real users, sometimes you get


2513
01:15:46,346 --> 01:15:48,296
some not so real users.


2514
01:15:49,676 --> 01:15:51,566
Nobody wants bots or farmed


2515
01:15:51,566 --> 01:15:52,016
accounts.


2516
01:15:52,716 --> 01:15:54,326
And we work hard to filter them


2517
01:15:54,396 --> 01:15:55,706
out of our systems.


2518
01:15:56,106 --> 01:15:58,636
And we want to help you do the


2519
01:15:58,716 --> 01:15:59,066
same.


2520
01:15:59,826 --> 01:16:03,136
So we built what we call a real


2521
01:16:03,216 --> 01:16:04,166
user indicator.


2522
01:16:04,166 --> 01:16:06,516
It can tell you if an incoming


2523
01:16:06,516 --> 01:16:09,676
account is a real user or if you


2524
01:16:09,676 --> 01:16:11,116
might want to do some additional


2525
01:16:11,116 --> 01:16:12,006
verification.


2526
01:16:13,286 --> 01:16:15,276
So how does this work?


2527
01:16:16,396 --> 01:16:17,926
First off, the whole system is


2528
01:16:17,926 --> 01:16:19,686
built from the ground up to


2529
01:16:19,686 --> 01:16:21,396
maintain user privacy.


2530
01:16:21,396 --> 01:16:24,326
It uses on-device intelligence


2531
01:16:24,566 --> 01:16:26,786
to determine if the originating


2532
01:16:26,786 --> 01:16:28,966
device is behaving in a normal


2533
01:16:29,906 --> 01:16:29,973
way.


2534
01:16:30,686 --> 01:16:32,206
The device generates a value


2535
01:16:32,306 --> 01:16:33,626
without sharing any specifics


2536
01:16:33,626 --> 01:16:35,026
with Apple.


2537
01:16:36,126 --> 01:16:38,156
This is combined with select


2538
01:16:38,156 --> 01:16:39,656
account information and then


2539
01:16:39,656 --> 01:16:41,646
boiled down into a single value


2540
01:16:42,166 --> 01:16:46,586
that's shared with your app at


2541
01:16:46,876 --> 01:16:48,236
account setup time.


2542
01:16:48,236 --> 01:16:49,696
Then depending on the value that


2543
01:16:49,806 --> 01:16:50,866
you receive, you can be


2544
01:16:50,866 --> 01:16:52,596
confident that your new user is


2545
01:16:52,596 --> 01:16:55,166
a real user or get a signal that


2546
01:16:55,166 --> 01:16:56,706
you might want to take a second


2547
01:16:56,706 --> 01:16:56,826
look.


2548
01:17:00,296 --> 01:17:01,916
And all of this comes with great


2549
01:17:01,916 --> 01:17:03,226
cross-platform support.


2550
01:17:03,996 --> 01:17:05,796
It's available on iOS, iPadOS,


2551
01:17:05,966 --> 01:17:12,016
macOS, watchOS, tvOS and it even


2552
01:17:12,016 --> 01:17:12,956
works on the web.


2553
01:17:14,106 --> 01:17:16,196
So it can work on Android and


2554
01:17:16,196 --> 01:17:17,306
Windows devices.


2555
01:17:18,516 --> 01:17:26,926
[ Applause ]


2556
01:17:27,426 --> 01:17:27,976
So there you go.


2557
01:17:29,286 --> 01:17:31,276
A super-fast and easy way to


2558
01:17:31,276 --> 01:17:33,836
engage new users, two-factor


2559
01:17:33,986 --> 01:17:36,236
authentication and anti-fraud


2560
01:17:36,576 --> 01:17:37,406
built in.


2561
01:17:38,286 --> 01:17:39,686
You can implement it virtually


2562
01:17:39,846 --> 01:17:42,266
anywhere, and most importantly,


2563
01:17:42,936 --> 01:17:45,066
it respects everyone's privacy.


2564
01:17:46,286 --> 01:17:48,506
So this is a solution both you


2565
01:17:48,506 --> 01:17:50,706
and your users can trust.


2566
01:17:56,046 --> 01:17:57,076
We've already had a number of


2567
01:17:57,076 --> 01:17:59,016
developers working with us and


2568
01:17:59,016 --> 01:18:01,026
we're excited to see many more


2569
01:18:01,076 --> 01:18:02,096
of you adopt.


2570
01:18:02,096 --> 01:18:06,346
So that's Sign In With Apple.


2571
01:18:07,516 --> 01:18:15,696
[ Applause ]


2572
01:18:16,196 --> 01:18:18,106
As I mentioned earlier, a great


2573
01:18:18,106 --> 01:18:20,046
way to preserve user privacy is


2574
01:18:20,046 --> 01:18:21,306
to work with the users' data


2575
01:18:21,756 --> 01:18:22,376
on-device.


2576
01:18:22,376 --> 01:18:24,886
And we've built some great


2577
01:18:24,886 --> 01:18:27,146
technologies for doing just


2578
01:18:28,216 --> 01:18:28,326
that.


2579
01:18:28,486 --> 01:18:30,136
To tell you more about machine


2580
01:18:30,136 --> 01:18:31,816
learning, I'd like to hand it


2581
01:18:31,816 --> 01:18:32,676
over to Bill.


2582
01:18:34,516 --> 01:18:36,546
[ Applause ]


2583
01:18:37,046 --> 01:18:37,516
>> Thank you, Katie.


2584
01:18:38,516 --> 01:18:40,906
[ Applause ]


2585
01:18:41,406 --> 01:18:42,696
Machine learning is a key


2586
01:18:42,696 --> 01:18:44,356
technology for so many of the


2587
01:18:44,356 --> 01:18:46,316
experiences in your apps.


2588
01:18:46,746 --> 01:18:48,846
And at Apple, we use on-device


2589
01:18:48,946 --> 01:18:50,086
machine learning to power


2590
01:18:50,086 --> 01:18:52,046
features from stunning camera


2591
01:18:52,236 --> 01:18:54,456
and photos capabilities to ARKit


2592
01:18:54,456 --> 01:18:55,526
and more.


2593
01:18:55,526 --> 01:18:57,756
And we can do this because of


2594
01:18:57,756 --> 01:18:58,806
our cutting-edge silicon.


2595
01:19:00,106 --> 01:19:01,926
With powerful CPUs, GPUs and


2596
01:19:01,926 --> 01:19:04,746
dedicated ML processors like the


2597
01:19:04,746 --> 01:19:06,686
Neural Engine, we can deliver


2598
01:19:06,686 --> 01:19:08,256
incredible real-time


2599
01:19:08,256 --> 01:19:09,196
experiences.


2600
01:19:10,576 --> 01:19:12,276
The Neural Engine is optimized


2601
01:19:12,366 --> 01:19:13,856
to accelerate convolutional


2602
01:19:13,856 --> 01:19:14,846
neural networks with


2603
01:19:14,846 --> 01:19:16,766
multi-precision support and a


2604
01:19:16,916 --> 01:19:18,036
Smart Compute system.


2605
01:19:19,456 --> 01:19:20,576
What does that mean?


2606
01:19:21,106 --> 01:19:24,196
It means it's an absolute beast.


2607
01:19:24,876 --> 01:19:27,496
In fact, the Neural Engine is


2608
01:19:27,646 --> 01:19:29,646
capable of up to 5 trillion


2609
01:19:29,696 --> 01:19:31,536
operations per second.


2610
01:19:31,926 --> 01:19:33,346
Best of all, we've built our


2611
01:19:33,346 --> 01:19:35,106
machine learning APIs on top of


2612
01:19:35,106 --> 01:19:37,976
this so that your apps can take


2613
01:19:38,096 --> 01:19:40,146
full advantage of this blazing


2614
01:19:40,146 --> 01:19:40,786
performance.


2615
01:19:41,796 --> 01:19:43,286
And we have some great updates,


2616
01:19:43,466 --> 01:19:45,536
starting with our out-of-the-box


2617
01:19:45,536 --> 01:19:47,746
APIs like Vision, Natural


2618
01:19:47,746 --> 01:19:49,156
Language, and Speech.


2619
01:19:50,266 --> 01:19:51,886
Today these APIs deliver rich


2620
01:19:51,946 --> 01:19:53,766
features such as face detection,


2621
01:19:54,156 --> 01:19:56,066
object tracking and named entity


2622
01:19:56,066 --> 01:19:56,696
recognition.


2623
01:19:57,316 --> 01:19:59,466
And this year, we're adding even


2624
01:19:59,466 --> 01:19:59,846
more.


2625
01:20:00,586 --> 01:20:01,446
Let's have a look at a few of


2626
01:20:01,446 --> 01:20:03,436
these, starting with image


2627
01:20:03,436 --> 01:20:05,216
saliency which gives you a


2628
01:20:05,216 --> 01:20:06,546
heat map for an image,


2629
01:20:06,876 --> 01:20:08,496
highlighting important objects


2630
01:20:08,496 --> 01:20:10,306
and where users are likely to


2631
01:20:10,366 --> 01:20:11,316
focus their attention.


2632
01:20:12,416 --> 01:20:14,126
We use this today in photos to


2633
01:20:14,126 --> 01:20:16,016
help intelligently crop images


2634
01:20:16,016 --> 01:20:17,176
as part of the curation


2635
01:20:17,176 --> 01:20:17,796
experience.


2636
01:20:18,486 --> 01:20:20,776
We're also releasing text


2637
01:20:20,776 --> 01:20:22,606
recognition where you can search


2638
01:20:22,606 --> 01:20:24,836
text from images like posters,


2639
01:20:25,136 --> 01:20:25,976
signs and documents.


2640
01:20:26,516 --> 01:20:33,546
[ Applause ]


2641
01:20:34,046 --> 01:20:35,456
And take advantage of the


2642
01:20:35,456 --> 01:20:37,106
document camera capability we


2643
01:20:37,106 --> 01:20:37,706
use in Notes.


2644
01:20:38,686 --> 01:20:40,466
For Natural Language, you can


2645
01:20:40,466 --> 01:20:42,156
make use of word embeddings


2646
01:20:42,516 --> 01:20:44,186
which help to identify words or


2647
01:20:44,296 --> 01:20:46,246
sentences with similar meanings.


2648
01:20:47,106 --> 01:20:49,106
We use this today for search in


2649
01:20:49,176 --> 01:20:50,646
photos so that if you search for


2650
01:20:50,646 --> 01:20:52,326
an unknown term like musician,


2651
01:20:52,736 --> 01:20:54,386
we can suggest alternatives like


2652
01:20:54,386 --> 01:20:55,876
entertainer or singer.


2653
01:20:57,386 --> 01:20:59,826
And this year, our Speech API is


2654
01:20:59,826 --> 01:21:02,246
now on-device and works on


2655
01:21:02,246 --> 01:21:04,916
iPhone, iPad and Mac with


2656
01:21:04,986 --> 01:21:06,686
support for 10 languages.


2657
01:21:07,516 --> 01:21:12,546
[ Applause ]


2658
01:21:13,046 --> 01:21:13,946
And with features like Speech


2659
01:21:13,986 --> 01:21:15,656
Saliency, you can understand the


2660
01:21:15,656 --> 01:21:18,076
pronunciation, pitch and the


2661
01:21:18,076 --> 01:21:19,346
cadence of speech.


2662
01:21:21,086 --> 01:21:22,206
Now for those of you who want to


2663
01:21:22,206 --> 01:21:23,716
go deeper with machine learning,


2664
01:21:24,266 --> 01:21:26,346
you can make use of Core ML, our


2665
01:21:26,346 --> 01:21:28,646
on-device technology designed to


2666
01:21:28,646 --> 01:21:30,316
run machine learning models with


2667
01:21:30,416 --> 01:21:32,746
high performance and privacy.


2668
01:21:34,266 --> 01:21:36,146
Today Core ML has great support


2669
01:21:36,146 --> 01:21:37,176
for many machine learning


2670
01:21:37,176 --> 01:21:39,176
models, from neural networks to


2671
01:21:39,176 --> 01:21:40,866
boosted trees and more.


2672
01:21:41,836 --> 01:21:42,726
But as you know, the field of


2673
01:21:42,726 --> 01:21:44,416
machine learning is constantly


2674
01:21:44,416 --> 01:21:45,116
evolving.


2675
01:21:45,466 --> 01:21:46,756
And so this year we set out to


2676
01:21:46,756 --> 01:21:48,586
support the most advanced neural


2677
01:21:48,586 --> 01:21:50,536
networks by adding more layer


2678
01:21:50,536 --> 01:21:52,136
types than ever before.


2679
01:21:52,976 --> 01:21:55,066
In fact, Core ML now supports


2680
01:21:55,066 --> 01:21:57,676
over 100 model layer types.


2681
01:21:59,006 --> 01:22:00,216
This enables you to run some of


2682
01:22:00,216 --> 01:22:01,906
the most cutting-edge machine


2683
01:22:01,906 --> 01:22:03,336
learning models on Apple


2684
01:22:03,376 --> 01:22:03,906
devices.


2685
01:22:04,916 --> 01:22:07,526
Models like ELMO or WaveNet or


2686
01:22:07,526 --> 01:22:08,886
some very recently published


2687
01:22:08,886 --> 01:22:11,096
ones like BERT, bringing


2688
01:22:11,096 --> 01:22:12,496
breakthrough natural language


2689
01:22:12,536 --> 01:22:14,236
processing to your apps.


2690
01:22:16,226 --> 01:22:18,126
Now running models like these in


2691
01:22:18,126 --> 01:22:19,936
your apps is only part of the


2692
01:22:19,936 --> 01:22:20,246
story.


2693
01:22:21,166 --> 01:22:22,106
There are times when you may


2694
01:22:22,106 --> 01:22:23,656
want to update the models in


2695
01:22:23,656 --> 01:22:26,006
your apps on-device based on


2696
01:22:26,006 --> 01:22:26,776
user data.


2697
01:22:27,876 --> 01:22:29,056
We do this today for features


2698
01:22:29,056 --> 01:22:31,156
like Face ID where a user's


2699
01:22:31,156 --> 01:22:32,956
appearance may be evolving over


2700
01:22:33,016 --> 01:22:33,286
time.


2701
01:22:33,906 --> 01:22:35,396
They change their hair, wear a


2702
01:22:35,396 --> 01:22:35,606
hat.


2703
01:22:36,436 --> 01:22:37,996
Or for features like our Siri


2704
01:22:37,996 --> 01:22:40,096
Watch Face where the set of


2705
01:22:40,096 --> 01:22:41,706
recommendations is constantly


2706
01:22:41,706 --> 01:22:42,956
evolving to deliver a


2707
01:22:42,956 --> 01:22:44,646
personalized experience for each


2708
01:22:44,646 --> 01:22:45,006
user.


2709
01:22:45,006 --> 01:22:48,096
To achieve these experiences, we


2710
01:22:48,096 --> 01:22:49,726
use on-device personalization.


2711
01:22:50,426 --> 01:22:51,826
And this year we're bringing


2712
01:22:51,826 --> 01:22:53,766
that capability to Core ML.


2713
01:22:55,466 --> 01:22:56,666
This means you can update the


2714
01:22:56,666 --> 01:22:59,156
Core ML models in your app with


2715
01:22:59,156 --> 01:23:01,046
data from individual users.


2716
01:23:02,106 --> 01:23:02,956
This creates --


2717
01:23:03,516 --> 01:23:07,716
[ Applause ]


2718
01:23:08,216 --> 01:23:09,736
This creates an updated and


2719
01:23:09,786 --> 01:23:11,796
personalized model for the user.


2720
01:23:12,786 --> 01:23:14,576
With model personalization, your


2721
01:23:14,576 --> 01:23:16,196
apps can now update models in


2722
01:23:16,196 --> 01:23:17,586
the background without


2723
01:23:17,686 --> 01:23:19,086
compromising user privacy.


2724
01:23:20,886 --> 01:23:22,206
Core ML delivers the most


2725
01:23:22,206 --> 01:23:23,976
advanced platform for machine


2726
01:23:23,976 --> 01:23:25,836
learning models, and building


2727
01:23:25,836 --> 01:23:27,386
Core ML models has never been


2728
01:23:27,386 --> 01:23:30,256
easier with Create ML, our


2729
01:23:30,256 --> 01:23:31,956
framework designed to help all


2730
01:23:31,956 --> 01:23:34,036
of you build models with just a


2731
01:23:34,096 --> 01:23:35,156
few lines of code.


2732
01:23:36,086 --> 01:23:36,976
And this year we're taking


2733
01:23:36,976 --> 01:23:38,506
Create ML even further.


2734
01:23:39,036 --> 01:23:41,026
It's now a macOS app that lets


2735
01:23:41,026 --> 01:23:42,416
you build models with zero code


2736
01:23:42,416 --> 01:23:42,926
right from your Mac.


2737
01:23:45,516 --> 01:23:50,586
[ Applause ]


2738
01:23:51,086 --> 01:23:51,956
You can choose from many


2739
01:23:51,956 --> 01:23:53,746
different model templates to fit


2740
01:23:53,746 --> 01:23:54,196
your data.


2741
01:23:54,456 --> 01:23:55,936
You can build multiple models


2742
01:23:55,936 --> 01:23:57,556
with different datasets and


2743
01:23:57,556 --> 01:23:59,086
define the parameters for each


2744
01:23:59,176 --> 01:24:00,236
of them.


2745
01:24:00,566 --> 01:24:02,306
You get real-time feedback on


2746
01:24:02,306 --> 01:24:03,126
model training.


2747
01:24:04,116 --> 01:24:06,046
And Create ML supports transfer


2748
01:24:06,046 --> 01:24:07,756
learning for tasks like image


2749
01:24:07,756 --> 01:24:09,846
classification or text analysis.


2750
01:24:10,496 --> 01:24:12,056
This speeds up training since


2751
01:24:12,056 --> 01:24:13,646
you need very little data and


2752
01:24:13,646 --> 01:24:15,506
can leverage Apple's optimized


2753
01:24:15,506 --> 01:24:17,296
and heavily pre-trained models.


2754
01:24:18,816 --> 01:24:20,946
And you get to experiment and


2755
01:24:20,986 --> 01:24:21,916
preview the models.


2756
01:24:22,476 --> 01:24:23,626
So for example, you can get


2757
01:24:23,626 --> 01:24:25,376
predictions for images by using


2758
01:24:25,376 --> 01:24:26,976
your iPhone's camera with


2759
01:24:27,056 --> 01:24:29,826
continuity on your Mac.


2760
01:24:30,116 --> 01:24:31,786
Or you can use the microphone on


2761
01:24:31,786 --> 01:24:33,126
your Mac to test your sound


2762
01:24:33,186 --> 01:24:34,216
classification model.


2763
01:24:35,646 --> 01:24:37,486
So that's a ton of new stuff and


2764
01:24:37,486 --> 01:24:39,166
we're super excited to see what


2765
01:24:39,166 --> 01:24:40,846
you can do with all these


2766
01:24:40,846 --> 01:24:42,016
awesome new machine learning


2767
01:24:42,076 --> 01:24:42,676
capabilities.


2768
01:24:43,546 --> 01:24:45,046
In fact, we invited a few


2769
01:24:45,046 --> 01:24:46,426
developers to try out all the


2770
01:24:46,426 --> 01:24:47,776
new stuff and we've seen some


2771
01:24:47,776 --> 01:24:49,426
amazing results.


2772
01:24:50,256 --> 01:24:53,686
One in particular was so cool we


2773
01:24:53,686 --> 01:24:54,816
decided we had to share it with


2774
01:24:54,816 --> 01:24:55,096
you.


2775
01:24:55,556 --> 01:24:57,386
So please welcome Ben Harroway


2776
01:24:57,616 --> 01:24:59,366
from Lumen Digital to give you a


2777
01:24:59,366 --> 01:25:00,916
preview of his new app


2778
01:25:00,916 --> 01:25:01,706
NoisyBook.


2779
01:25:02,516 --> 01:25:06,686
[ Applause ]


2780
01:25:07,186 --> 01:25:07,746
>> Thanks, Bill.


2781
01:25:08,296 --> 01:25:10,026
Hi, everyone, I'm Ben from Lumen


2782
01:25:10,026 --> 01:25:11,586
Digital and I've been working on


2783
01:25:11,586 --> 01:25:14,286
a brand-new app, NoisyBook.


2784
01:25:18,156 --> 01:25:21,116
Let me tell you a story.


2785
01:25:21,306 --> 01:25:24,856
Once upon a time, on a beautiful


2786
01:25:24,856 --> 01:25:27,536
meadow lived a boy called Jack


2787
01:25:27,946 --> 01:25:31,576
and his cow Daisy.


2788
01:25:31,756 --> 01:25:32,446
Daisy.


2789
01:25:34,016 --> 01:25:35,046
[ Cow mooing ]


2790
01:25:35,046 --> 01:25:37,006
A mysterious man gave them some


2791
01:25:37,006 --> 01:25:39,116
magic beans which grew into a


2792
01:25:39,116 --> 01:25:41,436
giant beanstalk, high into the


2793
01:25:41,436 --> 01:25:41,796
clouds.


2794
01:25:44,016 --> 01:25:45,286
[ Mystical music ]


2795
01:25:45,286 --> 01:25:46,396
Okay, I think everybody knows


2796
01:25:46,396 --> 01:25:47,266
this story.


2797
01:25:47,266 --> 01:25:48,666
Let's try something really


2798
01:25:48,666 --> 01:25:49,116
different.


2799
01:25:50,306 --> 01:25:53,086
Suddenly an exploding chicken


2800
01:25:55,126 --> 01:25:56,946
and his friend the golden tiger


2801
01:25:56,946 --> 01:26:00,516
[growling] jumped into their


2802
01:26:00,516 --> 01:26:04,406
helicopter [whirring] and flew


2803
01:26:04,406 --> 01:26:06,976
into the forest.


2804
01:26:07,016 --> 01:26:08,046
[ Crickets and bird sounds ]


2805
01:26:08,046 --> 01:26:09,376
And of course, guess what?


2806
01:26:09,886 --> 01:26:11,446
They all lived happily ever


2807
01:26:12,666 --> 01:26:12,976
after.


2808
01:26:13,016 --> 01:26:14,126
[ Music ]


2809
01:26:14,126 --> 01:26:14,193
>> Yay.


2810
01:26:15,086 --> 01:26:16,516
>> Can you make animal noises


2811
01:26:16,516 --> 01:26:19,056
you heard in the story?


2812
01:26:19,146 --> 01:26:20,136
>> Okay, we've had some fun.


2813
01:26:20,326 --> 01:26:22,446
Now NoisyBook wants us to repeat


2814
01:26:22,446 --> 01:26:23,666
some of the animal noises that


2815
01:26:23,666 --> 01:26:25,336
we heard during the story.


2816
01:26:25,866 --> 01:26:27,416
I think we heard a cow in this


2817
01:26:27,466 --> 01:26:28,536
story, so let's try this.


2818
01:26:29,566 --> 01:26:32,336
Moo. There he is.


2819
01:26:32,726 --> 01:26:34,076
I really cannot believe I'm


2820
01:26:34,076 --> 01:26:35,876
standing here making animal


2821
01:26:35,876 --> 01:26:37,666
noises in front of all of these


2822
01:26:37,666 --> 01:26:38,306
people.


2823
01:26:39,126 --> 01:26:41,016
Mad. But how amazing, the app


2824
01:26:41,206 --> 01:26:43,056
has used a sound classification


2825
01:26:43,056 --> 01:26:45,336
model to actually recognize that


2826
01:26:45,336 --> 01:26:46,636
noise and acknowledge it.


2827
01:26:48,326 --> 01:26:49,656
You likely also noticed


2828
01:26:50,036 --> 01:26:51,526
NoisyBook was able to work with


2829
01:26:51,566 --> 01:26:53,556
both traditional stories and


2830
01:26:53,686 --> 01:26:55,486
stories straight from our own


2831
01:26:55,486 --> 01:26:56,396
imaginations.


2832
01:26:56,766 --> 01:26:57,716
It's super powerful.


2833
01:26:58,516 --> 01:27:00,026
And thanks to the new features


2834
01:27:00,026 --> 01:27:02,906
of speech, sound and Core ML in


2835
01:27:02,906 --> 01:27:06,516
iOS 13 and Create ML, this is


2836
01:27:06,516 --> 01:27:08,166
all happening entirely


2837
01:27:08,196 --> 01:27:08,766
on-device.


2838
01:27:09,766 --> 01:27:11,086
It's all happening in real time


2839
01:27:11,416 --> 01:27:12,306
and it's running through a


2840
01:27:12,306 --> 01:27:13,706
natural language model that I've


2841
01:27:13,866 --> 01:27:16,036
trained on over 90,000 lines of


2842
01:27:16,036 --> 01:27:16,206
text.


2843
01:27:17,146 --> 01:27:19,886
And thanks to these features,


2844
01:27:20,506 --> 01:27:21,716
I've been able to take an idea


2845
01:27:21,716 --> 01:27:22,866
that I've struggled with for


2846
01:27:22,866 --> 01:27:24,666
around two years and really


2847
01:27:24,666 --> 01:27:26,146
implement some of these magical


2848
01:27:26,146 --> 01:27:27,596
new features in just a couple of


2849
01:27:27,656 --> 01:27:27,936
days.


2850
01:27:29,136 --> 01:27:30,696
I'm super proud of it and I do


2851
01:27:30,696 --> 01:27:31,896
hope that you'll remember to


2852
01:27:31,896 --> 01:27:33,256
check out NoisyBook when it


2853
01:27:33,256 --> 01:27:34,896
lands on the App Store later


2854
01:27:34,896 --> 01:27:35,706
this year.


2855
01:27:35,706 --> 01:27:35,976
Thank you.


2856
01:27:36,516 --> 01:27:43,686
[ Applause ]


2857
01:27:44,186 --> 01:27:44,636
>> Thanks, Ben.


2858
01:27:45,366 --> 01:27:46,596
That was really cool.


2859
01:27:46,596 --> 01:27:48,556
I know my kids are going to love


2860
01:27:49,426 --> 01:27:49,493
it.


2861
01:27:50,256 --> 01:27:52,266
Now one of the biggest uses of


2862
01:27:52,266 --> 01:27:54,216
machine learning at Apple is


2863
01:27:54,296 --> 01:27:54,826
Siri.


2864
01:27:55,556 --> 01:27:57,916
Siri is by far the world's most


2865
01:27:57,916 --> 01:27:59,586
popular intelligent assistant


2866
01:27:59,976 --> 01:28:02,176
with over 500 million monthly


2867
01:28:02,176 --> 01:28:05,156
active devices, making over 15


2868
01:28:05,156 --> 01:28:06,666
billion requests.


2869
01:28:07,286 --> 01:28:09,176
These are staggering numbers.


2870
01:28:09,766 --> 01:28:11,636
And Siri works across all of


2871
01:28:11,636 --> 01:28:12,686
Apple's devices.


2872
01:28:13,396 --> 01:28:15,226
With Siri, your users can


2873
01:28:15,226 --> 01:28:17,076
interact with your apps in new


2874
01:28:17,076 --> 01:28:17,596
ways.


2875
01:28:18,166 --> 01:28:19,566
On the go, with Air Pods,


2876
01:28:20,266 --> 01:28:22,296
hands-free from across the room,


2877
01:28:22,626 --> 01:28:24,396
or even while in the car.


2878
01:28:25,046 --> 01:28:27,066
And thousands of apps are now


2879
01:28:27,116 --> 01:28:29,146
integrated with Siri through


2880
01:28:29,486 --> 01:28:30,416
Siri Shortcuts.


2881
01:28:31,466 --> 01:28:33,196
We built Siri Shortcuts to allow


2882
01:28:33,356 --> 01:28:35,136
you to expose the capabilities


2883
01:28:35,136 --> 01:28:37,196
you already have in your apps


2884
01:28:37,666 --> 01:28:39,746
with very little work and in a


2885
01:28:39,746 --> 01:28:41,936
discoverable way for your users.


2886
01:28:43,026 --> 01:28:44,186
You can make your shortcuts


2887
01:28:44,226 --> 01:28:46,016
discoverable using the Add to


2888
01:28:46,106 --> 01:28:48,016
Siri button, educating your


2889
01:28:48,016 --> 01:28:49,726
users on how they can use your


2890
01:28:49,966 --> 01:28:50,676
app with voice.


2891
01:28:51,766 --> 01:28:52,936
That matters because voice


2892
01:28:52,936 --> 01:28:54,436
functionality can otherwise be


2893
01:28:54,436 --> 01:28:55,926
really hard to discover.


2894
01:28:56,906 --> 01:28:58,396
And we've simplified setup so


2895
01:28:58,396 --> 01:29:00,216
that the user no longer needs to


2896
01:29:00,216 --> 01:29:01,326
record a phrase.


2897
01:29:01,326 --> 01:29:03,726
You suggest a phrase and they


2898
01:29:03,726 --> 01:29:05,036
add it with a tap.


2899
01:29:06,516 --> 01:29:11,556
[ Applause ]


2900
01:29:12,056 --> 01:29:12,906
And the biggest request we had


2901
01:29:12,906 --> 01:29:14,236
this year was to support


2902
01:29:14,236 --> 01:29:16,016
parameters in Shortcuts.


2903
01:29:16,586 --> 01:29:20,566
So we've made Shortcuts


2904
01:29:20,916 --> 01:29:22,906
conversational which allows


2905
01:29:22,966 --> 01:29:24,596
users to interact with your app


2906
01:29:24,966 --> 01:29:26,766
through questions in Siri.


2907
01:29:27,606 --> 01:29:28,816
So for example, if I'm choosing


2908
01:29:28,816 --> 01:29:29,986
what to cook, I could run a


2909
01:29:29,986 --> 01:29:31,936
Shortcut with Pana, my recipes


2910
01:29:31,936 --> 01:29:33,736
app, and see a list of all my


2911
01:29:33,736 --> 01:29:34,296
favorites.


2912
01:29:34,946 --> 01:29:36,476
When I choose from the list, it


2913
01:29:36,476 --> 01:29:37,966
takes me to the recipe and


2914
01:29:37,966 --> 01:29:38,746
starts playing.


2915
01:29:39,386 --> 01:29:42,306
And this year the Shortcuts app


2916
01:29:42,306 --> 01:29:45,376
is built into iOS and iPadOS,


2917
01:29:46,326 --> 01:29:47,896
which means that every user will


2918
01:29:47,896 --> 01:29:49,286
have an opportunity to try it


2919
01:29:49,286 --> 01:29:49,466
out.


2920
01:29:49,466 --> 01:29:52,566
And the app is now the home for


2921
01:29:52,566 --> 01:29:54,446
shortcuts from your apps too.


2922
01:29:55,816 --> 01:29:57,906
And by popular request, we're


2923
01:29:57,906 --> 01:29:59,976
adding support for automation.


2924
01:30:00,516 --> 01:30:05,976
[ Applause ]


2925
01:30:06,476 --> 01:30:08,146
Which allows users to set


2926
01:30:08,146 --> 01:30:09,906
specific triggers for when to


2927
01:30:09,906 --> 01:30:11,286
run any shortcut.


2928
01:30:12,106 --> 01:30:13,726
And there's plenty of options to


2929
01:30:13,726 --> 01:30:14,536
choose from.


2930
01:30:14,806 --> 01:30:16,016
You can trigger a shortcut based


2931
01:30:16,016 --> 01:30:18,056
on time of day, when you start a


2932
01:30:18,056 --> 01:30:19,646
workout on your Apple Watch,


2933
01:30:19,956 --> 01:30:21,456
when you connect to CarPlay and


2934
01:30:21,516 --> 01:30:22,346
many more.


2935
01:30:24,006 --> 01:30:26,086
And the editor now enables full


2936
01:30:26,086 --> 01:30:27,586
configuration of your app's


2937
01:30:27,616 --> 01:30:29,416
actions, including the ability


2938
01:30:29,416 --> 01:30:32,026
to pass information in or out of


2939
01:30:32,026 --> 01:30:33,936
your action through parameters.


2940
01:30:34,866 --> 01:30:36,436
With this, your app's actions


2941
01:30:36,486 --> 01:30:38,016
can be combined with actions


2942
01:30:38,016 --> 01:30:39,956
from other apps in multi-step


2943
01:30:39,956 --> 01:30:40,606
shortcuts.


2944
01:30:42,726 --> 01:30:43,836
Let's say you need to get dinner


2945
01:30:43,836 --> 01:30:44,626
for the family.


2946
01:30:44,946 --> 01:30:46,726
The kids are hungry, you need it


2947
01:30:46,726 --> 01:30:47,366
fast.


2948
01:30:47,986 --> 01:30:48,996
You could have a shortcut that


2949
01:30:48,996 --> 01:30:50,666
uses the Caviar app that lets


2950
01:30:50,666 --> 01:30:52,586
you choose a restaurant, choose


2951
01:30:53,516 --> 01:30:59,766
a meal, place the order and then


2952
01:30:59,766 --> 01:31:02,046
text the whole family with


2953
01:31:02,046 --> 01:31:03,556
what's for dinner and when it


2954
01:31:03,556 --> 01:31:04,246
will arrive.


2955
01:31:05,246 --> 01:31:06,786
That's combining the power of


2956
01:31:06,786 --> 01:31:09,106
your apps with Siri Shortcuts to


2957
01:31:09,106 --> 01:31:11,736
make everyday tasks really easy.


2958
01:31:13,466 --> 01:31:13,976
And of course --


2959
01:31:14,516 --> 01:31:18,636
[ Applause ]


2960
01:31:19,136 --> 01:31:20,416
And of course Shortcuts work


2961
01:31:20,416 --> 01:31:23,416
across iPhone, iPad, Apple Watch


2962
01:31:23,736 --> 01:31:25,096
and HomePod too.


2963
01:31:25,616 --> 01:31:27,716
And that's our update for Siri.


2964
01:31:28,516 --> 01:31:34,546
[ Applause ]


2965
01:31:35,046 --> 01:31:35,746
Now I'd like to invite Jeff to


2966
01:31:35,746 --> 01:31:36,566
tell you about the latest


2967
01:31:36,566 --> 01:31:38,416
advances in augmented reality.


2968
01:31:38,946 --> 01:31:39,316
Thank you.


2969
01:31:40,516 --> 01:31:42,606
[ Applause ]


2970
01:31:43,106 --> 01:31:43,546
>> Thanks, Bill.


2971
01:31:43,546 --> 01:31:44,886
I am thrilled to be here today


2972
01:31:44,886 --> 01:31:46,246
to talk about augmented reality.


2973
01:31:47,276 --> 01:31:49,136
AR helps you visualize things


2974
01:31:49,136 --> 01:31:51,496
that are difficult, expensive or


2975
01:31:51,496 --> 01:31:53,056
impossible to do otherwise.


2976
01:31:53,686 --> 01:31:55,516
And since introducing ARKit,


2977
01:31:55,836 --> 01:31:57,846
we've seen amazing growth in


2978
01:31:58,026 --> 01:31:58,746
applications.


2979
01:31:59,296 --> 01:32:02,296
One may think of AR as only for


2980
01:32:02,336 --> 01:32:04,736
entertainment, but we've seen


2981
01:32:04,736 --> 01:32:06,576
great applications in education,


2982
01:32:06,986 --> 01:32:09,636
enterprise, commerce and more.


2983
01:32:11,106 --> 01:32:13,026
Commerce is a particularly


2984
01:32:13,426 --> 01:32:15,546
impressive use case with Home


2985
01:32:15,546 --> 01:32:17,126
Depot, Target and Wayfair all


2986
01:32:17,126 --> 01:32:19,856
having tens of thousands of


2987
01:32:19,856 --> 01:32:21,476
products available to preview in


2988
01:32:21,476 --> 01:32:21,756
AR.


2989
01:32:21,756 --> 01:32:26,206
ARKit hosts the USDZ file


2990
01:32:26,306 --> 01:32:28,926
format and Quick Look together,


2991
01:32:29,846 --> 01:32:31,596
make the world's first mass


2992
01:32:31,846 --> 01:32:33,436
market augmented reality


2993
01:32:33,536 --> 01:32:34,476
commerce solution.


2994
01:32:34,766 --> 01:32:37,156
In fact, Wayfair is seeing more


2995
01:32:37,156 --> 01:32:39,226
than a threefold increase in


2996
01:32:39,276 --> 01:32:41,476
purchasing when folks view their


2997
01:32:41,476 --> 01:32:43,486
products in augmented reality.


2998
01:32:45,316 --> 01:32:46,806
And we love that this is a real


2999
01:32:46,806 --> 01:32:47,566
business use case.


3000
01:32:47,566 --> 01:32:48,716
This is a great real business


3001
01:32:48,716 --> 01:32:50,536
use case for augmented reality


3002
01:32:50,536 --> 01:32:51,046
in commerce.


3003
01:32:52,476 --> 01:32:53,386
We'd like to continue this


3004
01:32:53,386 --> 01:32:55,006
momentum by announcing that


3005
01:32:55,166 --> 01:32:56,316
Apple Pay will be integrated


3006
01:32:56,316 --> 01:32:58,806
directly with AR Quick Look this


3007
01:32:58,836 --> 01:32:59,356
fall.


3008
01:32:59,606 --> 01:33:00,866
This makes it easier for


3009
01:33:00,946 --> 01:33:03,636
consumers to try on and buy


3010
01:33:04,276 --> 01:33:05,486
items like these glasses,


3011
01:33:05,976 --> 01:33:07,406
directly from augmented reality.


3012
01:33:07,506 --> 01:33:12,366
ARKit for iOS and iPadOS are


3013
01:33:12,916 --> 01:33:16,896
the world's largest augmented


3014
01:33:16,896 --> 01:33:18,746
reality platform with hundreds


3015
01:33:18,746 --> 01:33:20,986
of millions of enabled devices.


3016
01:33:21,046 --> 01:33:22,946
And we've heard from many


3017
01:33:22,946 --> 01:33:24,016
developers, they love to take


3018
01:33:24,016 --> 01:33:25,196
advantage of this great


3019
01:33:25,196 --> 01:33:27,236
opportunity but may not be sure


3020
01:33:27,236 --> 01:33:27,746
where to start.


3021
01:33:28,376 --> 01:33:29,806
Or 3D can be a little bit


3022
01:33:29,806 --> 01:33:31,096
intimidating if you've never


3023
01:33:31,156 --> 01:33:31,676
used it before.


3024
01:33:31,676 --> 01:33:33,646
Well, we've been listening and


3025
01:33:33,816 --> 01:33:35,576
we're really excited to announce


3026
01:33:36,346 --> 01:33:38,376
three technologies that make it


3027
01:33:38,376 --> 01:33:40,726
much easier to develop augmented


3028
01:33:40,726 --> 01:33:41,806
reality applications.


3029
01:33:42,846 --> 01:33:45,916
ARKit, RealityKit and Reality


3030
01:33:45,916 --> 01:33:47,816
Composer together provide the


3031
01:33:48,026 --> 01:33:50,336
frameworks and tools you need to


3032
01:33:50,336 --> 01:33:51,646
quickly and easily develop


3033
01:33:51,946 --> 01:33:53,786
augmented reality applications


3034
01:33:55,206 --> 01:33:57,136
and experiences.


3035
01:33:57,136 --> 01:33:58,526
Starting with Reality Composer,


3036
01:33:59,036 --> 01:34:00,656
you can create compelling AR


3037
01:34:00,656 --> 01:34:02,456
experiences even if you've never


3038
01:34:02,456 --> 01:34:03,706
worked with 3D before.


3039
01:34:03,966 --> 01:34:05,766
It provides an intuitive, what


3040
01:34:05,766 --> 01:34:06,626
you see is what you get


3041
01:34:06,626 --> 01:34:08,856
interface that integrates


3042
01:34:09,226 --> 01:34:11,166
seamlessly with Xcode.


3043
01:34:12,336 --> 01:34:13,326
And to show you Reality


3044
01:34:13,326 --> 01:34:14,796
Composer, I'd like to invite one


3045
01:34:14,796 --> 01:34:16,276
of my colleagues, Shrudi, up to


3046
01:34:16,276 --> 01:34:16,736
the stage.


3047
01:34:17,516 --> 01:34:22,636
[ Applause ]


3048
01:34:23,136 --> 01:34:23,956
>> Thank you, Jeff.


3049
01:34:24,426 --> 01:34:25,206
Happy to be here.


3050
01:34:25,206 --> 01:34:27,656
I have this great travel app


3051
01:34:27,656 --> 01:34:29,376
which shows some activities


3052
01:34:29,636 --> 01:34:30,826
offered on the main island of


3053
01:34:30,826 --> 01:34:31,326
Hawaii.


3054
01:34:31,976 --> 01:34:33,696
If the user opts for helicopter


3055
01:34:33,696 --> 01:34:36,356
tours, the app shows the path of


3056
01:34:36,356 --> 01:34:37,136
the helicopter.


3057
01:34:37,136 --> 01:34:40,226
How about we use AR to provide


3058
01:34:40,226 --> 01:34:41,736
users a better sense of the


3059
01:34:41,736 --> 01:34:42,746
actual tour?


3060
01:34:42,746 --> 01:34:44,846
I can do that by adding a button


3061
01:34:44,846 --> 01:34:46,626
to the existing app to launch my


3062
01:34:46,696 --> 01:34:47,396
AR experience.


3063
01:34:47,946 --> 01:34:48,976
Let's see how to do that.


3064
01:34:49,776 --> 01:34:52,146
First, we create a button using


3065
01:34:52,146 --> 01:34:52,566
SwiftUI.


3066
01:34:53,626 --> 01:34:55,616
Followed by adding that button


3067
01:34:55,876 --> 01:34:57,016
to my existing view.


3068
01:34:58,006 --> 01:34:59,356
Then I open an empty project


3069
01:34:59,416 --> 01:35:01,286
file in Reality Composer and


3070
01:35:01,286 --> 01:35:02,946
integrate it to my Xcode project


3071
01:35:03,296 --> 01:35:05,296
by simply dragging and dropping


3072
01:35:05,296 --> 01:35:06,216
it in Xcode.


3073
01:35:06,856 --> 01:35:09,946
To load my AR scene from this


3074
01:35:09,946 --> 01:35:11,886
Reality Composer project file, I


3075
01:35:12,106 --> 01:35:14,796
import RealityKit and then


3076
01:35:14,796 --> 01:35:17,526
create a new view for AR.


3077
01:35:18,016 --> 01:35:18,886
Oops. Sorry.


3078
01:35:19,116 --> 01:35:21,746
Create a new view for AR using


3079
01:35:21,746 --> 01:35:22,186
SwiftUI.


3080
01:35:22,356 --> 01:35:25,736
And that's all the code you need


3081
01:35:26,206 --> 01:35:30,746
to add an AR experience to your


3082
01:35:31,136 --> 01:35:31,706
existing app.


3083
01:35:31,706 --> 01:35:33,166
Moving on to the fun part of


3084
01:35:33,166 --> 01:35:34,576
creating my AR scene with


3085
01:35:34,576 --> 01:35:35,496
Reality Composer.


3086
01:35:36,106 --> 01:35:37,926
I open my empty Reality project


3087
01:35:38,986 --> 01:35:40,836
and start by loading a custom


3088
01:35:40,836 --> 01:35:42,536
USTZ of the Hawaii model.


3089
01:35:47,046 --> 01:35:49,676
Sweet. Next I'd like to mark the


3090
01:35:49,676 --> 01:35:51,256
beginning of my helicopter tour.


3091
01:35:51,506 --> 01:35:53,366
For that I can use Reality


3092
01:35:53,366 --> 01:35:54,956
Composer's built-in content


3093
01:35:54,956 --> 01:35:57,536
library which offers hundreds of


3094
01:35:57,536 --> 01:35:58,996
professional-grade 3D content to


3095
01:35:58,996 --> 01:35:59,476
developers.


3096
01:35:59,476 --> 01:36:02,976
I'll use a simple sphere.


3097
01:36:08,046 --> 01:36:09,356
I can change the content's look,


3098
01:36:09,776 --> 01:36:11,276
by applying a different material


3099
01:36:11,276 --> 01:36:12,206
to it.


3100
01:36:14,086 --> 01:36:16,736
As you can see, placing content


3101
01:36:16,736 --> 01:36:18,306
in 3D is pretty simple and


3102
01:36:18,306 --> 01:36:20,246
intuitive with Reality Composer.


3103
01:36:21,616 --> 01:36:24,106
Let's see what else we can do


3104
01:36:24,106 --> 01:36:24,196
here.


3105
01:36:24,196 --> 01:36:25,646
How about adding a cool fading


3106
01:36:25,646 --> 01:36:26,746
effect to the scene when the


3107
01:36:26,926 --> 01:36:27,446
scene starts.


3108
01:36:27,526 --> 01:36:29,886
I can do that by opening the


3109
01:36:29,886 --> 01:36:31,986
Behaviors panel and creating a


3110
01:36:31,986 --> 01:36:34,336
custom behavior which gets


3111
01:36:34,336 --> 01:36:35,956
triggered when the scene starts.


3112
01:36:35,956 --> 01:36:39,806
I first add an action to hide


3113
01:36:39,806 --> 01:36:41,216
all the content in the scene.


3114
01:36:41,706 --> 01:36:45,666
Then the scene starts, and then


3115
01:36:45,666 --> 01:36:47,316
add another action to make all


3116
01:36:47,316 --> 01:36:49,286
the content appear after a


3117
01:36:49,286 --> 01:36:50,096
certain duration.


3118
01:36:50,096 --> 01:36:52,286
How about we preview it right


3119
01:36:52,286 --> 01:36:52,916
here?


3120
01:36:53,286 --> 01:36:58,086
Awesome. Developing AR on Mac is


3121
01:36:58,086 --> 01:37:01,116
convenient, but it poses the


3122
01:37:01,166 --> 01:37:02,626
challenge of guessing the


3123
01:37:02,626 --> 01:37:05,086
content scale and look when


3124
01:37:05,086 --> 01:37:06,176
placed in real world.


3125
01:37:06,726 --> 01:37:08,016
That's why we created Reality


3126
01:37:08,016 --> 01:37:11,956
Composer for macOS as well as


3127
01:37:11,956 --> 01:37:13,266
iPadOS and iOS to remove the


3128
01:37:13,266 --> 01:37:14,186
guesswork out of development.


3129
01:37:14,186 --> 01:37:17,226
So I'll hand this off to Jeff to


3130
01:37:17,226 --> 01:37:18,976
see what we have so far on an


3131
01:37:18,976 --> 01:37:19,176
iPad.


3132
01:37:20,866 --> 01:37:21,896
>> Thanks very much, Shrudi.


3133
01:37:22,426 --> 01:37:25,006
So this is Reality Composer for


3134
01:37:25,006 --> 01:37:25,386
the iPad.


3135
01:37:27,146 --> 01:37:29,236
It has the same great features


3136
01:37:29,236 --> 01:37:30,456
that you see in the Reality


3137
01:37:30,506 --> 01:37:31,256
Composer for the Mac.


3138
01:37:31,426 --> 01:37:32,376
And we can take the seen that


3139
01:37:32,376 --> 01:37:33,936
Shrudi handed off and finish it


3140
01:37:33,936 --> 01:37:34,996
out with our final artwork.


3141
01:37:35,466 --> 01:37:37,066
So we've had someone create with


3142
01:37:37,066 --> 01:37:39,736
Adobe Arrow our final file or


3143
01:37:39,736 --> 01:37:41,116
our final artwork, and we'll put


3144
01:37:41,116 --> 01:37:41,986
it into the scene.


3145
01:37:41,986 --> 01:37:43,206
So I'm going to take the proxy


3146
01:37:43,206 --> 01:37:43,996
art that Shrudi had.


3147
01:37:43,996 --> 01:37:46,176
I'm going to replace that with


3148
01:37:46,176 --> 01:37:46,846
our new artwork.


3149
01:37:46,846 --> 01:37:48,036
Let me check to see if that's


3150
01:37:48,036 --> 01:37:48,666
the right thing.


3151
01:37:48,736 --> 01:37:49,316
Fantastic.


3152
01:37:49,366 --> 01:37:51,346
That is our final helicopter.


3153
01:37:51,566 --> 01:37:52,906
And I also want to bring in the


3154
01:37:52,936 --> 01:37:54,396
animation that goes with that.


3155
01:37:54,466 --> 01:37:55,256
That's super easy.


3156
01:37:55,256 --> 01:37:56,266
If you remember, she created


3157
01:37:56,266 --> 01:37:57,826
that behavior, so we're going to


3158
01:37:57,826 --> 01:37:58,796
look at that behavior and all


3159
01:37:58,796 --> 01:37:59,646
we're going to do is add an


3160
01:37:59,646 --> 01:38:01,406
additional action.


3161
01:38:03,136 --> 01:38:05,396
So we look for USDZ animation


3162
01:38:05,396 --> 01:38:06,186
which is bringing in the


3163
01:38:06,186 --> 01:38:07,046
animation that went with the


3164
01:38:07,096 --> 01:38:07,466
file.


3165
01:38:08,876 --> 01:38:09,646
Fantastic.


3166
01:38:09,796 --> 01:38:10,286
Looks good.


3167
01:38:10,286 --> 01:38:12,226
Let's preview that.


3168
01:38:12,956 --> 01:38:15,496
Great. So hide our Behaviors


3169
01:38:15,496 --> 01:38:15,966
tab.


3170
01:38:16,086 --> 01:38:17,346
That looks like what we want.


3171
01:38:19,216 --> 01:38:20,786
Perfect. Let's preview this in


3172
01:38:20,786 --> 01:38:22,326
AR, but you can do it with the


3173
01:38:22,496 --> 01:38:22,816
iPad.


3174
01:38:25,166 --> 01:38:27,356
Wow. Let's try that again.


3175
01:38:34,046 --> 01:38:34,396
Fantastic.


3176
01:38:34,396 --> 01:38:35,536
That's exactly what I wanted it


3177
01:38:35,536 --> 01:38:36,026
to look like.


3178
01:38:36,026 --> 01:38:37,276
And we can also play that.


3179
01:38:39,766 --> 01:38:40,916
Perfect. We have the animation


3180
01:38:40,916 --> 01:38:42,176
of the helicopter touring the


3181
01:38:42,176 --> 01:38:42,376
island.


3182
01:38:42,636 --> 01:38:43,636
That will look great in our


3183
01:38:43,706 --> 01:38:44,656
travel application.


3184
01:38:49,456 --> 01:38:50,526
So that's Reality Composer for


3185
01:38:50,526 --> 01:38:50,836
the iPad.


3186
01:38:51,926 --> 01:38:53,606
And you're going to love how you


3187
01:38:53,606 --> 01:38:55,736
can have the same great ease of


3188
01:38:55,736 --> 01:38:57,466
use and seamless experience


3189
01:38:57,606 --> 01:38:59,476
between macOS, iPadOS and iOS


3190
01:38:59,616 --> 01:39:00,766
with Reality Composer.


3191
01:39:01,516 --> 01:39:08,576
[ Applause ]


3192
01:39:09,076 --> 01:39:09,836
Now RealityKit.


3193
01:39:10,066 --> 01:39:11,146
RealityKit is a modern


3194
01:39:11,296 --> 01:39:12,856
high-performance 3D engine


3195
01:39:12,856 --> 01:39:15,076
designed from the ground up for


3196
01:39:15,076 --> 01:39:16,606
augmented reality rendering and


3197
01:39:16,606 --> 01:39:17,176
simulation.


3198
01:39:18,056 --> 01:39:19,236
And because it's delivered as a


3199
01:39:19,376 --> 01:39:20,916
framework, it's very easy for


3200
01:39:20,916 --> 01:39:22,606
all of you to take your 2D apps


3201
01:39:22,606 --> 01:39:24,536
and extend them into 3D.


3202
01:39:25,546 --> 01:39:26,876
RealityKit uses modern


3203
01:39:26,966 --> 01:39:28,296
visibly-based rendering and


3204
01:39:28,296 --> 01:39:28,736
materials.


3205
01:39:29,536 --> 01:39:30,816
It is a data-driven rendering


3206
01:39:30,876 --> 01:39:31,996
system and a fully


3207
01:39:31,996 --> 01:39:35,456
multi-threaded renderer that's


3208
01:39:35,456 --> 01:39:37,116
highly optimized for Apple's


3209
01:39:37,116 --> 01:39:37,666
GPUs.


3210
01:39:39,466 --> 01:39:41,426
And also, really importantly,


3211
01:39:41,466 --> 01:39:43,046
we've integrated ARKit scene


3212
01:39:43,046 --> 01:39:45,236
understanding into RealityKit.


3213
01:39:45,936 --> 01:39:48,486
Which means as ARKit leans more


3214
01:39:48,486 --> 01:39:49,736
about the environment, it


3215
01:39:49,856 --> 01:39:50,986
synchronizes this to your


3216
01:39:50,986 --> 01:39:52,596
virtual scene automatically.


3217
01:39:52,686 --> 01:39:55,996
We saw RealityKit in action this


3218
01:39:55,996 --> 01:39:56,366
morning.


3219
01:39:57,116 --> 01:39:58,166
Let's take a closer look.


3220
01:39:59,586 --> 01:40:00,436
Let's see what's really going


3221
01:40:00,436 --> 01:40:00,676
on.


3222
01:40:01,876 --> 01:40:03,996
The reality you see is based on


3223
01:40:03,996 --> 01:40:05,086
things like image-based


3224
01:40:05,086 --> 01:40:07,416
lighting, motion blur and camera


3225
01:40:07,416 --> 01:40:09,376
effects like depth of field and


3226
01:40:09,376 --> 01:40:11,076
camera noise that really blur


3227
01:40:11,076 --> 01:40:13,016
the line between what is reality


3228
01:40:13,016 --> 01:40:14,096
and what is virtual.


3229
01:40:14,876 --> 01:40:15,956
And you get these features with


3230
01:40:15,956 --> 01:40:17,736
RealityKit automatically.


3231
01:40:20,006 --> 01:40:21,546
You access RealityKit through a


3232
01:40:21,546 --> 01:40:22,906
new framework which is a native


3233
01:40:22,906 --> 01:40:23,386
Swift API.


3234
01:40:23,386 --> 01:40:25,186
It takes many advantages of the


3235
01:40:25,186 --> 01:40:26,936
key features of Swift to allow


3236
01:40:26,936 --> 01:40:28,096
you to write clear, compact


3237
01:40:28,326 --> 01:40:28,686
code.


3238
01:40:30,536 --> 01:40:31,866
Concepts Log and Rally are


3239
01:40:31,926 --> 01:40:33,766
directly integrated.


3240
01:40:33,916 --> 01:40:35,596
For example, it's easy to load


3241
01:40:35,706 --> 01:40:37,646
your AR assets and directly


3242
01:40:38,006 --> 01:40:40,326
attach them to anchors.


3243
01:40:40,996 --> 01:40:43,146
Protocol extensions provide easy


3244
01:40:43,236 --> 01:40:44,606
access to entity property which


3245
01:40:44,606 --> 01:40:46,666
allow you to quickly access


3246
01:40:46,726 --> 01:40:48,696
components such as lights or


3247
01:40:48,696 --> 01:40:50,706
shadows in this case and reduce


3248
01:40:50,706 --> 01:40:51,776
the need for runtime checks.


3249
01:40:53,296 --> 01:40:54,366
This also means that you're able


3250
01:40:54,366 --> 01:40:55,726
to work with entities in a


3251
01:40:55,726 --> 01:40:57,006
strongly-typed manner.


3252
01:40:57,446 --> 01:40:58,856
Here we're applying an angular


3253
01:40:58,966 --> 01:41:00,156
force to an entity that


3254
01:41:00,156 --> 01:41:00,966
participates in physics.


3255
01:41:00,966 --> 01:41:03,386
And that's all the code you need


3256
01:41:03,386 --> 01:41:03,976
for this scene.


3257
01:41:08,226 --> 01:41:09,496
Last but definitely not least


3258
01:41:09,566 --> 01:41:11,836
today is a new version of our


3259
01:41:11,836 --> 01:41:13,186
augmented reality framework AR


3260
01:41:13,436 --> 01:41:14,406
Kit 3.


3261
01:41:15,666 --> 01:41:17,236
We've taken the most capable AR


3262
01:41:17,356 --> 01:41:18,686
platform in the world and made


3263
01:41:18,686 --> 01:41:20,756
it even more powerful with new


3264
01:41:20,756 --> 01:41:22,126
in-depth reverse features.


3265
01:41:24,036 --> 01:41:26,076
Since introducing ARKit, we've


3266
01:41:26,076 --> 01:41:27,306
had many developers ask to be


3267
01:41:27,306 --> 01:41:28,346
able to use the front and back


3268
01:41:28,486 --> 01:41:29,896
cameras simultaneously.


3269
01:41:30,326 --> 01:41:32,346
Well, in ARKit 3 you can.


3270
01:41:32,436 --> 01:41:34,776
So you can -- that's right, both


3271
01:41:34,776 --> 01:41:35,966
cameras at the same time.


3272
01:41:36,186 --> 01:41:38,186
[ Applause ]


3273
01:41:38,356 --> 01:41:39,666
This allows you to use face


3274
01:41:39,666 --> 01:41:41,406
tracking to drive your augmented


3275
01:41:41,406 --> 01:41:42,936
reality experiences directly.


3276
01:41:44,356 --> 01:41:45,416
And as Craig talked about this


3277
01:41:45,416 --> 01:41:47,176
morning, properly occluding


3278
01:41:47,176 --> 01:41:49,506
people in an AR scene is an


3279
01:41:49,606 --> 01:41:50,846
extremely tough problem.


3280
01:41:51,076 --> 01:41:52,296
You see it every time someone


3281
01:41:52,296 --> 01:41:53,226
walks in front of a virtual


3282
01:41:53,226 --> 01:41:53,586
object.


3283
01:41:55,636 --> 01:41:56,816
To solve this, we've built an


3284
01:41:56,816 --> 01:41:57,946
advanced machine-learning


3285
01:41:57,946 --> 01:41:59,726
algorithm that figures out which


3286
01:41:59,796 --> 01:42:01,606
pixels are a person, the depth


3287
01:42:01,736 --> 01:42:03,326
of that person in the scene and


3288
01:42:03,326 --> 01:42:05,826
uses its information to allow us


3289
01:42:05,826 --> 01:42:07,806
to properly render the scene in


3290
01:42:07,806 --> 01:42:08,606
the virtual objects.


3291
01:42:09,236 --> 01:42:10,546
With people occlusion, entirely


3292
01:42:10,546 --> 01:42:12,526
new experiences like Minecraft


3293
01:42:12,526 --> 01:42:13,706
Earth Demo you saw this morning


3294
01:42:13,776 --> 01:42:15,976
are possible.


3295
01:42:16,516 --> 01:42:20,546
[ Applause ]


3296
01:42:21,046 --> 01:42:21,666
Absolutely amazing.


3297
01:42:22,366 --> 01:42:23,696
And finally, we built a system


3298
01:42:23,696 --> 01:42:24,916
that allows humans to interact


3299
01:42:25,026 --> 01:42:27,066
with virtual content.


3300
01:42:27,066 --> 01:42:28,506
ARKit 3 is able to capture a


3301
01:42:28,566 --> 01:42:30,786
person's motion in real time


3302
01:42:31,256 --> 01:42:33,176
with just the single RGB camera


3303
01:42:33,396 --> 01:42:34,966
in an iPad or iPhone.


3304
01:42:35,906 --> 01:42:37,426
We again use a machine learned


3305
01:42:37,846 --> 01:42:39,226
algorithm to track the person,


3306
01:42:39,226 --> 01:42:42,246
building a 2D stick figure and


3307
01:42:42,586 --> 01:42:44,706
take that figure and then infer


3308
01:42:44,706 --> 01:42:47,356
a 3D motion from them or lift it


3309
01:42:47,356 --> 01:42:48,366
into 3D.


3310
01:42:49,256 --> 01:42:50,796
Both the 2D skeleton and the 3D


3311
01:42:50,796 --> 01:42:51,536
skeleton are available to


3312
01:42:51,536 --> 01:42:52,146
developers.


3313
01:42:52,656 --> 01:42:54,436
The 3D has over 90 articulated


3314
01:42:54,436 --> 01:42:55,566
joints and provides the same


3315
01:42:55,566 --> 01:42:57,946
ease of use as Face Kit.


3316
01:43:01,046 --> 01:43:01,546
So those are our new


3317
01:43:01,546 --> 01:43:02,206
technologies.


3318
01:43:02,206 --> 01:43:05,836
ARKit 3, RealityKit, and


3319
01:43:05,836 --> 01:43:08,436
Reality Composer are tools and


3320
01:43:08,486 --> 01:43:10,226
frameworks that make it easy for


3321
01:43:10,306 --> 01:43:14,366
anyone, anyone, to build amazing


3322
01:43:14,366 --> 01:43:15,226
AR experiences.


3323
01:43:15,226 --> 01:43:18,346
And we'd like to do something


3324
01:43:18,396 --> 01:43:19,656
fun today, so we have a fun new


3325
01:43:19,726 --> 01:43:20,786
application at the conference.


3326
01:43:21,396 --> 01:43:22,146
You may have seen it,


3327
01:43:22,146 --> 01:43:22,706
SwiftStrike.


3328
01:43:23,696 --> 01:43:25,036
We're making a tabletop version


3329
01:43:25,036 --> 01:43:26,396
of this as a developer sample


3330
01:43:26,396 --> 01:43:27,116
available today.


3331
01:43:27,206 --> 01:43:30,906
It uses RealityKit, ARKit 3 and


3332
01:43:30,906 --> 01:43:32,206
Reality Composer and provides a


3333
01:43:32,246 --> 01:43:33,606
great starting point for your


3334
01:43:33,606 --> 01:43:35,476
applications.


3335
01:43:36,516 --> 01:43:39,116
[ Music ]


3336
01:43:39,616 --> 01:43:40,976
Lots of fun.


3337
01:43:41,516 --> 01:43:44,036
[ Applause ]


3338
01:43:44,536 --> 01:43:44,976
Thank you.


3339
01:43:45,516 --> 01:43:47,546
[ Applause ]


3340
01:43:48,046 --> 01:43:49,286
And of course Metal powers a lot


3341
01:43:49,286 --> 01:43:51,176
of what we do in AR on our


3342
01:43:51,176 --> 01:43:51,686
devices.


3343
01:43:51,686 --> 01:43:52,706
And to tell you more about


3344
01:43:52,706 --> 01:43:54,216
what's new in Metal, I'd like to


3345
01:43:54,216 --> 01:43:55,576
welcome Jeremy to the stage.


3346
01:43:56,516 --> 01:43:58,836
[ Applause ]


3347
01:43:59,336 --> 01:44:01,556
>> Thank you, Jeff.


3348
01:44:02,446 --> 01:44:04,096
So Metal is Apple's modern


3349
01:44:04,346 --> 01:44:06,176
high-performance GPU programming


3350
01:44:06,176 --> 01:44:08,056
API for graphics and compute.


3351
01:44:08,186 --> 01:44:09,586
It's also incredibly easy to


3352
01:44:09,586 --> 01:44:11,416
use, both for beginners and


3353
01:44:11,416 --> 01:44:12,106
experts alike.


3354
01:44:12,106 --> 01:44:14,156
And it brings stunning


3355
01:44:14,316 --> 01:44:15,356
performance increases,


3356
01:44:15,416 --> 01:44:17,226
supporting up to 100 times more


3357
01:44:17,226 --> 01:44:18,896
draw calls than OpenGL and


3358
01:44:18,896 --> 01:44:20,606
enabling a whole new generation


3359
01:44:20,656 --> 01:44:21,856
of advanced graphics


3360
01:44:21,956 --> 01:44:22,476
performance.


3361
01:44:23,696 --> 01:44:25,006
This is because Metal gives your


3362
01:44:25,186 --> 01:44:27,746
app direct control over the GPUs


3363
01:44:27,746 --> 01:44:29,516
that are at the core of Apple's


3364
01:44:29,516 --> 01:44:30,046
products.


3365
01:44:30,526 --> 01:44:33,116
And those GPUs now power over


3366
01:44:33,116 --> 01:44:35,856
1.4 billion Metal-capable system


3367
01:44:36,206 --> 01:44:38,396
from iPhones to iPads to the


3368
01:44:38,396 --> 01:44:39,786
all-new Mac Pro.


3369
01:44:40,536 --> 01:44:41,606
In fact, all of Apple's


3370
01:44:41,666 --> 01:44:42,986
platforms now run on Metal.


3371
01:44:43,546 --> 01:44:45,006
From our smooth user interface


3372
01:44:45,006 --> 01:44:47,026
to the latest 3D rendering in


3373
01:44:47,026 --> 01:44:48,856
RealityKit, to our advanced


3374
01:44:48,856 --> 01:44:50,126
camera processing pipeline,


3375
01:44:50,436 --> 01:44:51,906
we're using Metal everywhere.


3376
01:44:52,446 --> 01:44:53,196
And you can too.


3377
01:44:53,196 --> 01:44:56,006
To help you do just that, this


3378
01:44:56,006 --> 01:44:57,496
year we focused on three key


3379
01:44:57,496 --> 01:44:57,946
areas.


3380
01:44:58,496 --> 01:44:59,926
We've made Metal even easier to


3381
01:44:59,926 --> 01:45:00,446
use.


3382
01:45:00,996 --> 01:45:02,766
We've enabled all-new levels of


3383
01:45:02,766 --> 01:45:04,986
high-performance GPU compute.


3384
01:45:05,256 --> 01:45:07,036
And we've enhanced Metal for our


3385
01:45:07,036 --> 01:45:08,286
most demanding pro app


3386
01:45:08,356 --> 01:45:10,046
developers and customers.


3387
01:45:10,986 --> 01:45:13,386
First, with Metal's incredibly


3388
01:45:13,386 --> 01:45:15,606
approachable API and GPU shading


3389
01:45:15,606 --> 01:45:17,276
language, you can get started


3390
01:45:17,276 --> 01:45:18,476
with our powerful suite of


3391
01:45:18,476 --> 01:45:19,866
developer tools for GPU


3392
01:45:19,866 --> 01:45:21,996
debugging, profiling and


3393
01:45:21,996 --> 01:45:23,156
performance optimizing.


3394
01:45:23,576 --> 01:45:25,326
And we've made those tools even


3395
01:45:25,326 --> 01:45:25,886
better.


3396
01:45:26,516 --> 01:45:28,356
We have added full Metal support


3397
01:45:28,356 --> 01:45:30,626
to the iOS Simulator in Xcode.


3398
01:45:31,041 --> 01:45:33,041
[ Applause ]


3399
01:45:33,066 --> 01:45:34,286
We're glad you're excited about


3400
01:45:34,286 --> 01:45:34,366
it.


3401
01:45:34,366 --> 01:45:35,256
We're really excited about it


3402
01:45:35,316 --> 01:45:35,546
too.


3403
01:45:35,906 --> 01:45:37,186
You can now use Metal directly


3404
01:45:37,186 --> 01:45:38,476
in the simulator and you


3405
01:45:38,476 --> 01:45:39,736
automatically get major


3406
01:45:39,736 --> 01:45:41,236
performance improvements when


3407
01:45:41,236 --> 01:45:43,726
using UI Kits, Maps and all of


3408
01:45:43,726 --> 01:45:45,216
those system frameworks built on


3409
01:45:45,216 --> 01:45:45,676
Metal.


3410
01:45:45,676 --> 01:45:46,896
And this is because the iOS


3411
01:45:46,946 --> 01:45:48,436
Simulator is now using the


3412
01:45:48,436 --> 01:45:50,216
native Metal support built right


3413
01:45:50,216 --> 01:45:50,836
into your Mac.


3414
01:45:52,506 --> 01:45:53,976
We've also added an all-new


3415
01:45:53,976 --> 01:45:55,096
Metal memory debugger.


3416
01:45:55,446 --> 01:45:56,966
You can now identify exactly how


3417
01:45:56,966 --> 01:45:58,666
much memory your app is using


3418
01:45:58,666 --> 01:46:00,656
for Metal textures, buffers and


3419
01:46:00,656 --> 01:46:02,436
heats and you can optimize your


3420
01:46:02,436 --> 01:46:04,196
games and apps to use every last


3421
01:46:04,196 --> 01:46:05,876
byte for even more advanced


3422
01:46:05,926 --> 01:46:06,516
graphics.


3423
01:46:07,936 --> 01:46:08,986
Now over the past few years,


3424
01:46:09,026 --> 01:46:10,336
Metal has grown to support the


3425
01:46:10,336 --> 01:46:12,006
advanced features of dozens of


3426
01:46:12,006 --> 01:46:13,566
GPUs, each with their own


3427
01:46:13,566 --> 01:46:15,806
hardware from every major GPU


3428
01:46:15,806 --> 01:46:17,566
vendor and across all of our


3429
01:46:17,566 --> 01:46:19,516
platforms and OS releases.


3430
01:46:19,746 --> 01:46:20,496
And as a developer you


3431
01:46:20,496 --> 01:46:21,726
previously had to manage all of


3432
01:46:21,726 --> 01:46:22,746
this complexity of these


3433
01:46:22,746 --> 01:46:23,916
different hardware feature sets


3434
01:46:24,066 --> 01:46:24,646
yourself.


3435
01:46:26,116 --> 01:46:26,986
Well this year we've made it


3436
01:46:26,986 --> 01:46:28,706
much simpler with just three


3437
01:46:28,706 --> 01:46:29,756
Metal GPU families.


3438
01:46:30,056 --> 01:46:31,526
A Metal common GPU family,


3439
01:46:31,746 --> 01:46:33,346
identifying the vast majority of


3440
01:46:33,586 --> 01:46:34,666
Metal features that you can use


3441
01:46:34,666 --> 01:46:36,096
across all of our platforms.


3442
01:46:36,546 --> 01:46:38,216
A second family for the advanced


3443
01:46:38,216 --> 01:46:40,706
unique features of our Apple


3444
01:46:40,706 --> 01:46:43,426
Design GPUs and our iOS, iPadOS


3445
01:46:43,426 --> 01:46:44,716
and tvOS products.


3446
01:46:44,716 --> 01:46:47,216
And a third family for the


3447
01:46:47,216 --> 01:46:48,746
powerful GPUs on our Mac


3448
01:46:48,996 --> 01:46:49,566
systems.


3449
01:46:50,326 --> 01:46:51,776
And it makes it that much easier


3450
01:46:51,776 --> 01:46:54,406
to bring your apps from iOS to


3451
01:46:54,406 --> 01:46:56,086
macOS or the other way around.


3452
01:46:57,486 --> 01:46:59,076
Now, in addition to enabling


3453
01:46:59,076 --> 01:47:00,426
immersive games and advanced


3454
01:47:00,426 --> 01:47:02,046
graphics, Metal also gives your


3455
01:47:02,046 --> 01:47:03,616
app the ability to harness the


3456
01:47:03,616 --> 01:47:05,366
GPU for compute.


3457
01:47:05,986 --> 01:47:07,516
So what is GPU compute?


3458
01:47:08,116 --> 01:47:09,176
Well, GPUs were originally


3459
01:47:09,176 --> 01:47:10,586
designed to process large


3460
01:47:10,586 --> 01:47:12,106
numbers of pixels requiring the


3461
01:47:12,106 --> 01:47:13,466
execution of complex


3462
01:47:13,466 --> 01:47:15,096
mathematical computations in a


3463
01:47:15,096 --> 01:47:16,566
massively parallel fashion.


3464
01:47:16,966 --> 01:47:18,526
And it turns out we can apply


3465
01:47:18,526 --> 01:47:20,136
that computational horsepower to


3466
01:47:20,136 --> 01:47:22,556
a wide variety of tasks besides


3467
01:47:22,646 --> 01:47:23,546
traditional graphics.


3468
01:47:24,306 --> 01:47:25,676
So Metal provides all of the


3469
01:47:25,676 --> 01:47:27,086
building blocks that you need


3470
01:47:27,086 --> 01:47:28,726
for general purpose computation


3471
01:47:28,926 --> 01:47:29,976
on the GPU.


3472
01:47:30,206 --> 01:47:32,706
A familiar C++ based GPU


3473
01:47:32,706 --> 01:47:34,716
programming language, compute


3474
01:47:34,716 --> 01:47:35,966
command encoding, API and


3475
01:47:35,966 --> 01:47:38,256
runtime, a full-feature compiler


3476
01:47:38,256 --> 01:47:40,036
and debugger and a rich library


3477
01:47:40,036 --> 01:47:41,526
of shaders and kernels called


3478
01:47:41,526 --> 01:47:42,766
the Metal performance shaders.


3479
01:47:44,336 --> 01:47:45,876
This MPS library provides you


3480
01:47:45,876 --> 01:47:48,296
valuable compute functions all


3481
01:47:48,656 --> 01:47:50,306
pre-optimized for all of those


3482
01:47:50,306 --> 01:47:51,786
GPUs and all of those Apple


3483
01:47:51,786 --> 01:47:52,816
systems and it's all fully


3484
01:47:52,816 --> 01:47:54,506
integrated right into your Metal


3485
01:47:54,506 --> 01:47:54,756
code.


3486
01:47:56,436 --> 01:47:58,086
And on our Apple Design GPUs,


3487
01:47:58,236 --> 01:47:59,646
Metal also provides advanced


3488
01:47:59,726 --> 01:48:01,076
compute features like tile


3489
01:48:01,076 --> 01:48:02,806
shading, enabling you to combine


3490
01:48:02,806 --> 01:48:04,006
your compute shaders and your


3491
01:48:04,066 --> 01:48:05,686
fragment processing into one


3492
01:48:05,856 --> 01:48:07,236
simple, highly-efficient render


3493
01:48:08,316 --> 01:48:08,426
pass.


3494
01:48:09,666 --> 01:48:12,106
And this year we're also


3495
01:48:12,106 --> 01:48:13,526
introducing Metal indirect


3496
01:48:13,526 --> 01:48:14,736
compute command encoding.


3497
01:48:14,736 --> 01:48:16,156
It allows you to build your GPU


3498
01:48:16,156 --> 01:48:17,566
compute commands right on the


3499
01:48:17,566 --> 01:48:19,486
GPU itself, unlocking all-new


3500
01:48:19,486 --> 01:48:20,456
algorithms for compute


3501
01:48:20,456 --> 01:48:22,096
efficiency and freeing the CPU


3502
01:48:22,096 --> 01:48:23,516
for other activities in your


3503
01:48:24,596 --> 01:48:24,666
app.


3504
01:48:25,306 --> 01:48:27,676
And with the Radeon Pro Vega II,


3505
01:48:27,676 --> 01:48:30,386
the new Mac Pro is a GPU compute


3506
01:48:30,386 --> 01:48:33,916
monster, capable of up to 56


3507
01:48:33,916 --> 01:48:35,786
teraflops of GPU compute all


3508
01:48:35,786 --> 01:48:38,026
made available to you via Metal.


3509
01:48:38,116 --> 01:48:39,226
Now that's a heck of a lot of


3510
01:48:39,226 --> 01:48:39,666
flops.


3511
01:48:39,666 --> 01:48:40,876
I mean, look at them all.


3512
01:48:41,486 --> 01:48:42,876
They barely fit on the screen.


3513
01:48:43,166 --> 01:48:45,166
[ Applause ]


3514
01:48:45,316 --> 01:48:45,726
That's a lot.


3515
01:48:46,016 --> 01:48:47,676
[ Applause ]


3516
01:48:47,676 --> 01:48:49,086
So what can you do with all of


3517
01:48:49,086 --> 01:48:50,616
those flops of GPU compute?


3518
01:48:51,456 --> 01:48:52,276
Well, with Metal you can use


3519
01:48:52,276 --> 01:48:53,346
them for advanced compute


3520
01:48:53,346 --> 01:48:53,996
processing.


3521
01:48:54,256 --> 01:48:55,816
For your videos, you can improve


3522
01:48:55,816 --> 01:48:57,276
the quality of your photos.


3523
01:48:57,646 --> 01:48:59,806
You can train your ML models and


3524
01:48:59,806 --> 01:49:01,526
you can use them to accelerate


3525
01:49:01,526 --> 01:49:02,956
interactive ray tracing.


3526
01:49:04,016 --> 01:49:05,096
So we have further improved


3527
01:49:05,096 --> 01:49:06,386
Metal support for ray tracing


3528
01:49:06,386 --> 01:49:08,366
this year, now enabling dynamic


3529
01:49:08,496 --> 01:49:10,036
scenes by moving the bounding


3530
01:49:10,036 --> 01:49:11,346
volume hierarchy construction


3531
01:49:11,346 --> 01:49:13,536
from the CPU to the GPU, and


3532
01:49:13,536 --> 01:49:15,206
added all-new optimized MPS


3533
01:49:15,206 --> 01:49:17,086
de-noising filters to further


3534
01:49:17,086 --> 01:49:18,146
improve image quality.


3535
01:49:18,146 --> 01:49:21,376
Now ray tracing, it uses the GPU


3536
01:49:21,376 --> 01:49:23,046
to computationally model the


3537
01:49:23,136 --> 01:49:24,746
physical properties of lights


3538
01:49:25,116 --> 01:49:27,166
and surfaces and reflections and


3539
01:49:27,166 --> 01:49:28,796
it can be so complex, people


3540
01:49:28,796 --> 01:49:30,206
actually earn PhD's in this


3541
01:49:30,266 --> 01:49:30,576
topic.


3542
01:49:31,306 --> 01:49:32,596
So to show you how you can use


3543
01:49:32,596 --> 01:49:35,396
Metal and GPU Compute for ray


3544
01:49:35,396 --> 01:49:36,886
tracing, we decided to put


3545
01:49:36,886 --> 01:49:37,966
together a pretty simple


3546
01:49:37,966 --> 01:49:38,686
example.


3547
01:49:38,776 --> 01:49:39,966
And I'd now like to invite Rav


3548
01:49:39,966 --> 01:49:41,356
to the stage to give you a quick


3549
01:49:41,386 --> 01:49:42,006
demonstration.


3550
01:49:42,496 --> 01:49:42,686
Rav?


3551
01:49:43,516 --> 01:49:48,716
[ Applause ]


3552
01:49:49,216 --> 01:49:49,926
>> Thank you, Jeremy.


3553
01:49:51,266 --> 01:49:53,096
So we built a prototype hybrid


3554
01:49:53,096 --> 01:49:54,666
ray tracing engine to see what


3555
01:49:54,666 --> 01:49:56,316
we could do with Metal Compute


3556
01:49:56,506 --> 01:49:58,296
on the powerful new Mac Pro.


3557
01:50:00,106 --> 01:50:03,056
Now this toy city that we built


3558
01:50:03,146 --> 01:50:04,466
looks simple, but we're using


3559
01:50:04,466 --> 01:50:06,876
Metal to process over 1 billion


3560
01:50:06,876 --> 01:50:08,876
rays per second at 4K


3561
01:50:08,876 --> 01:50:09,536
resolution.


3562
01:50:10,336 --> 01:50:11,366
Let me walk you through what


3563
01:50:11,366 --> 01:50:11,976
we're doing here.


3564
01:50:13,396 --> 01:50:15,446
So we start by using Metal draw


3565
01:50:15,446 --> 01:50:17,616
commands to render the geometry


3566
01:50:17,616 --> 01:50:18,936
and material information that


3567
01:50:18,936 --> 01:50:21,736
we're going to use later, and


3568
01:50:21,736 --> 01:50:23,086
then switch to using Metal


3569
01:50:23,126 --> 01:50:25,566
Compute and the MPS ray triangle


3570
01:50:25,566 --> 01:50:28,056
intersection APIs to do all the


3571
01:50:28,056 --> 01:50:28,756
heavy lifting.


3572
01:50:29,366 --> 01:50:30,716
This includes calculating


3573
01:50:30,806 --> 01:50:32,316
ambient light at every surface


3574
01:50:32,356 --> 01:50:33,656
point, as you can see in this


3575
01:50:33,656 --> 01:50:33,886
image.


3576
01:50:34,406 --> 01:50:36,086
But also to simulate light


3577
01:50:36,166 --> 01:50:37,836
bouncing between objects in our


3578
01:50:37,836 --> 01:50:40,466
scene at increasing ray depth to


3579
01:50:40,466 --> 01:50:44,146
generate shadows, reflections


3580
01:50:44,866 --> 01:50:46,616
and even reflections within


3581
01:50:46,616 --> 01:50:47,596
those reflections.


3582
01:50:48,256 --> 01:50:49,606
And then we end by using the


3583
01:50:49,606 --> 01:50:51,636
optimized MPS or optimize


3584
01:50:51,676 --> 01:50:53,376
compute kernels in the new MPS


3585
01:50:53,376 --> 01:50:56,556
de-noiser to produce this really


3586
01:50:56,556 --> 01:50:57,746
high-quality image.


3587
01:50:58,776 --> 01:51:00,976
So traditional CPU renderers


3588
01:51:01,506 --> 01:51:02,916
would take over a minute to


3589
01:51:02,916 --> 01:51:04,236
generate a frame like this.


3590
01:51:04,726 --> 01:51:06,046
With Metal, we've been able to


3591
01:51:06,046 --> 01:51:07,946
reduce this to under 30


3592
01:51:07,946 --> 01:51:09,516
milliseconds, which is a


3593
01:51:09,746 --> 01:51:12,016
staggering 1,000 times faster.


3594
01:51:13,746 --> 01:51:15,376
So pro app developers -- thank


3595
01:51:15,376 --> 01:51:15,566
you.


3596
01:51:15,786 --> 01:51:16,976
We think it's pretty great too.


3597
01:51:17,516 --> 01:51:20,776
[ Applause ]


3598
01:51:21,276 --> 01:51:22,906
So pro app developers can now


3599
01:51:23,026 --> 01:51:25,446
use Metal Compute to build new


3600
01:51:25,446 --> 01:51:27,676
interactive tools to visualize


3601
01:51:27,676 --> 01:51:29,136
these physically accurate


3602
01:51:29,136 --> 01:51:30,936
lighting effects like these


3603
01:51:30,996 --> 01:51:33,856
dramatic shadows that are cast


3604
01:51:33,856 --> 01:51:36,936
by the buildings and also by


3605
01:51:36,936 --> 01:51:37,776
that fire escape.


3606
01:51:41,106 --> 01:51:42,586
Or if we pan over here to this


3607
01:51:42,586 --> 01:51:45,266
roof, the realistic way that


3608
01:51:45,376 --> 01:51:47,466
green light bounces onto this


3609
01:51:47,466 --> 01:51:48,606
neighboring building.


3610
01:51:50,646 --> 01:51:51,616
That just looks great.


3611
01:51:51,736 --> 01:51:51,956
Thank you.


3612
01:51:52,516 --> 01:51:56,696
[ Applause ]


3613
01:51:57,196 --> 01:51:58,666
Another great effect that we can


3614
01:51:58,956 --> 01:52:00,956
simulate or model is accurate


3615
01:52:00,956 --> 01:52:02,336
reflections, as you can see in


3616
01:52:02,336 --> 01:52:03,836
the windshields of this bus.


3617
01:52:04,046 --> 01:52:06,086
In fact, you can see the shadows


3618
01:52:06,176 --> 01:52:07,846
moving in that windshield or in


3619
01:52:07,846 --> 01:52:09,656
those reflections as I change


3620
01:52:09,656 --> 01:52:10,666
the position of the sun.


3621
01:52:10,786 --> 01:52:14,426
So that looks great, but


3622
01:52:14,476 --> 01:52:16,246
animating objects in a ray trace


3623
01:52:16,246 --> 01:52:17,776
scene can be very


3624
01:52:17,776 --> 01:52:19,146
computationally expensive


3625
01:52:19,426 --> 01:52:20,936
because we have to update the


3626
01:52:20,936 --> 01:52:22,536
bounding volume hierarchy that's


3627
01:52:22,686 --> 01:52:24,156
associated with the geometry.


3628
01:52:25,376 --> 01:52:27,496
Fortunately, with Metal Compute


3629
01:52:27,496 --> 01:52:29,776
and the MPS APIs, we're able to


3630
01:52:29,776 --> 01:52:32,306
move all of this work onto the


3631
01:52:32,476 --> 01:52:33,476
GPUs and achieve this great


3632
01:52:33,576 --> 01:52:34,186
animation.


3633
01:52:35,546 --> 01:52:36,636
And there go our trains.


3634
01:52:37,466 --> 01:52:40,666
So that was just an example of


3635
01:52:40,746 --> 01:52:42,476
what's possible when you use


3636
01:52:42,476 --> 01:52:44,086
Metal Compute for accelerated


3637
01:52:44,136 --> 01:52:46,646
ray tracing on the new Mac Pro.


3638
01:52:46,646 --> 01:52:47,286
It's a beast.


3639
01:52:47,396 --> 01:52:48,016
Thank you.


3640
01:52:48,186 --> 01:52:49,456
Back to you, Jeremy.


3641
01:52:50,516 --> 01:52:52,636
[ Applause ]


3642
01:52:53,136 --> 01:52:53,696
>> Thank you, Rav.


3643
01:52:54,456 --> 01:52:56,516
So that's what we did in just a


3644
01:52:56,516 --> 01:52:57,436
short bit of time.


3645
01:52:57,666 --> 01:52:59,416
But high-performance ray tracing


3646
01:52:59,416 --> 01:53:00,776
can be even more powerful in the


3647
01:53:00,776 --> 01:53:02,536
hands of our most expert


3648
01:53:02,776 --> 01:53:03,816
third-party developers.


3649
01:53:03,816 --> 01:53:05,876
Which is why we are so excited


3650
01:53:05,876 --> 01:53:07,496
that OTOY has announced they're


3651
01:53:07,496 --> 01:53:09,426
using Metal Compute to build


3652
01:53:09,426 --> 01:53:11,756
OctaneX, an all-new version of


3653
01:53:11,756 --> 01:53:12,946
Octane Renderer, their


3654
01:53:12,946 --> 01:53:14,606
interactive path tracing engine


3655
01:53:14,716 --> 01:53:16,376
optimized for Metal and the


3656
01:53:16,376 --> 01:53:17,186
Apple platforms.


3657
01:53:18,556 --> 01:53:20,386
And we are incredibly thrilled


3658
01:53:20,386 --> 01:53:21,766
to be working with Maxon who's


3659
01:53:21,806 --> 01:53:22,976
bringing their powerful


3660
01:53:22,976 --> 01:53:24,356
GPU-accelerated renderer


3661
01:53:24,356 --> 01:53:26,196
Redshift to the Mac with an


3662
01:53:26,316 --> 01:53:28,766
all-new version optimized for


3663
01:53:28,766 --> 01:53:30,716
Metal and the new Mac Pro.


3664
01:53:30,716 --> 01:53:33,106
So with advanced Metal Compute


3665
01:53:33,106 --> 01:53:34,916
APIs and incredibly powerful


3666
01:53:34,916 --> 01:53:37,016
hardware, we've built Metal to


3667
01:53:37,286 --> 01:53:38,526
power the most advanced


3668
01:53:38,526 --> 01:53:40,116
professional content creation


3669
01:53:40,116 --> 01:53:40,666
tools.


3670
01:53:41,256 --> 01:53:42,286
And we've been working really


3671
01:53:42,286 --> 01:53:43,886
closely with the leading app


3672
01:53:43,886 --> 01:53:45,186
developers who have all


3673
01:53:45,186 --> 01:53:46,216
announced that the upcoming


3674
01:53:46,216 --> 01:53:48,246
versions of these professional


3675
01:53:48,356 --> 01:53:50,096
content creation tools and apps


3676
01:53:50,436 --> 01:53:51,946
will be fully optimized for


3677
01:53:51,946 --> 01:53:53,726
Metal and the Apple platforms.


3678
01:53:55,116 --> 01:53:57,066
For instance, Serif has just


3679
01:53:57,066 --> 01:53:58,856
announced an all-new version of


3680
01:53:58,856 --> 01:54:00,766
Affinity Photo for Mac using


3681
01:54:00,766 --> 01:54:02,726
Metal's graphics and Compute


3682
01:54:02,956 --> 01:54:04,356
APIs to hypercharge their


3683
01:54:04,356 --> 01:54:06,006
advanced photo processing engine


3684
01:54:06,406 --> 01:54:07,906
in achieving stunning


3685
01:54:08,056 --> 01:54:09,066
performance increases.


3686
01:54:09,346 --> 01:54:10,656
More than 10 times better


3687
01:54:10,656 --> 01:54:12,686
performance and jaw-dropping


3688
01:54:12,686 --> 01:54:14,436
increases of 50 times better


3689
01:54:14,436 --> 01:54:16,096
performance using Metal with


3690
01:54:16,096 --> 01:54:18,126
multiple GPUs on the new Mac


3691
01:54:18,206 --> 01:54:18,756
Pro.


3692
01:54:20,016 --> 01:54:21,346
So to enable these kinds of pro


3693
01:54:21,346 --> 01:54:22,236
apps and this kind of


3694
01:54:22,236 --> 01:54:23,716
performance, we work really


3695
01:54:23,716 --> 01:54:25,476
closely with our GPU hardware


3696
01:54:25,476 --> 01:54:26,986
and software partner teams to


3697
01:54:26,986 --> 01:54:28,536
add all-new features to Metal.


3698
01:54:28,956 --> 01:54:30,766
To support the new AMD Infinity


3699
01:54:30,766 --> 01:54:32,626
Fabric link in the new Mac Pro,


3700
01:54:32,626 --> 01:54:33,966
we added the Metal Peer Group


3701
01:54:33,966 --> 01:54:34,306
API.


3702
01:54:35,136 --> 01:54:36,206
So what does this do?


3703
01:54:36,446 --> 01:54:37,786
Well, previously sharing


3704
01:54:37,786 --> 01:54:40,076
workloads across multiple GPUs


3705
01:54:40,076 --> 01:54:41,416
would require moving large


3706
01:54:41,416 --> 01:54:43,636
amounts of data in a round trip


3707
01:54:43,636 --> 01:54:44,766
across the PCI bus.


3708
01:54:44,766 --> 01:54:46,896
But with the Metal Peer Group


3709
01:54:46,896 --> 01:54:49,506
API, apps can use multiple GPUs


3710
01:54:49,506 --> 01:54:51,286
much more efficiently, directly


3711
01:54:51,286 --> 01:54:52,836
sharing data across the Infinity


3712
01:54:52,836 --> 01:54:54,426
Fabric link and without taking


3713
01:54:54,426 --> 01:54:56,096
that long and scenic route


3714
01:54:56,276 --> 01:54:57,086
through system memory.


3715
01:54:58,536 --> 01:55:00,446
Now finally, you've seen how you


3716
01:55:00,446 --> 01:55:02,876
can use Metal Compute and the


3717
01:55:02,876 --> 01:55:05,726
new Mac Pro to process a whole


3718
01:55:05,726 --> 01:55:06,936
lot more pixels.


3719
01:55:06,936 --> 01:55:09,026
But we also want you to produce


3720
01:55:09,026 --> 01:55:10,406
even more beautiful pixels.


3721
01:55:10,476 --> 01:55:11,946
So we've introduced the gorgeous


3722
01:55:12,006 --> 01:55:15,376
new Pro Display XDR with all-new


3723
01:55:15,376 --> 01:55:17,706
HDR software support in macOS.


3724
01:55:18,396 --> 01:55:19,356
You can now use the AV


3725
01:55:19,356 --> 01:55:21,826
Foundation APIs to decode HDR


3726
01:55:21,826 --> 01:55:24,226
videos or you can render native


3727
01:55:24,226 --> 01:55:25,976
HDR content directly with Metal.


3728
01:55:26,626 --> 01:55:28,266
You can manage the HDR display


3729
01:55:28,266 --> 01:55:29,966
tone mapping yourself or you can


3730
01:55:29,966 --> 01:55:31,536
let the window system and our


3731
01:55:31,536 --> 01:55:33,306
advanced display system software


3732
01:55:33,546 --> 01:55:34,796
handle it all for you.


3733
01:55:34,946 --> 01:55:37,046
And with these same APIs, you


3734
01:55:37,046 --> 01:55:38,536
can also access a far greater


3735
01:55:38,536 --> 01:55:40,676
range of brightness levels on


3736
01:55:40,676 --> 01:55:41,826
many of our existing Mac


3737
01:55:41,866 --> 01:55:42,706
displays as well.


3738
01:55:43,366 --> 01:55:45,476
So that's our Metal update for


3739
01:55:45,476 --> 01:55:45,846
today.


3740
01:55:45,846 --> 01:55:47,576
It's even easier to use Metal


3741
01:55:47,576 --> 01:55:48,986
across all of our platforms with


3742
01:55:48,986 --> 01:55:50,596
Metal in the iOS Simulator and


3743
01:55:50,706 --> 01:55:52,356
simplified GPU families.


3744
01:55:52,406 --> 01:55:53,706
We have all-new features and


3745
01:55:53,756 --> 01:55:55,746
powerful hardware to unleash


3746
01:55:55,806 --> 01:55:57,356
all-new levels of GPU compute


3747
01:55:57,356 --> 01:55:57,926
performance.


3748
01:55:58,426 --> 01:55:59,856
And we built Metal to be the


3749
01:55:59,966 --> 01:56:02,076
best GPU programming API to


3750
01:56:02,076 --> 01:56:03,346
drive modern professional


3751
01:56:03,446 --> 01:56:05,576
content creation tools and apps.


3752
01:56:06,276 --> 01:56:07,186
So thank you very much.


3753
01:56:07,486 --> 01:56:08,736
I'll hand it back to Sebastien


3754
01:56:08,736 --> 01:56:08,916
now.


3755
01:56:09,146 --> 01:56:09,436
Thank you.


3756
01:56:10,516 --> 01:56:13,546
[ Applause ]


3757
01:56:14,046 --> 01:56:15,436
>> Thank you, Jeremy.


3758
01:56:15,436 --> 01:56:16,596
Don't you love Metal?


3759
01:56:16,756 --> 01:56:17,736
Don't you love the power of


3760
01:56:17,736 --> 01:56:18,066
Metal?


3761
01:56:18,446 --> 01:56:19,506
Really, really amazing.


3762
01:56:20,226 --> 01:56:21,726
Now what you've seen this


3763
01:56:21,726 --> 01:56:23,536
afternoon is a huge amount of


3764
01:56:23,576 --> 01:56:25,236
new technology that's new for


3765
01:56:25,276 --> 01:56:26,896
all of you as developers.


3766
01:56:27,486 --> 01:56:28,936
And what we've shown covering


3767
01:56:28,936 --> 01:56:30,486
developer tools, the Apple


3768
01:56:30,596 --> 01:56:32,486
platforms and core technologies


3769
01:56:32,856 --> 01:56:34,546
is just some of the highlights.


3770
01:56:34,896 --> 01:56:36,336
We actually have so much more to


3771
01:56:36,336 --> 01:56:37,136
show you this week.


3772
01:56:37,336 --> 01:56:39,516
And so ahead of us are 109


3773
01:56:39,746 --> 01:56:40,466
different sessions.


3774
01:56:40,466 --> 01:56:42,156
And it turns out that that


3775
01:56:42,156 --> 01:56:43,476
wasn't enough to cover


3776
01:56:43,476 --> 01:56:44,106
everything.


3777
01:56:44,496 --> 01:56:45,886
So this year we added an


3778
01:56:45,886 --> 01:56:48,286
additional 27 video-only


3779
01:56:48,356 --> 01:56:48,726
sessions.


3780
01:56:50,016 --> 01:56:51,146
And when you want to dive even


3781
01:56:51,146 --> 01:56:53,346
deeper, you could sit down with


3782
01:56:53,426 --> 01:56:55,106
some of the over 1,000 Apple


3783
01:56:55,106 --> 01:56:56,746
engineers that are here at WWDC


3784
01:56:56,846 --> 01:57:00,566
in 229 different lab sessions


3785
01:57:00,886 --> 01:57:01,676
throughout the week.


3786
01:57:03,266 --> 01:57:05,426
So get out there and prepare to


3787
01:57:05,496 --> 01:57:06,526
have your minds blown.


3788
01:57:06,526 --> 01:57:07,816
It's going to be a great week.


3789
01:57:07,816 --> 01:57:08,526
Thank you.


3790
01:57:09,516 --> 01:57:16,500
[ Applause ]

