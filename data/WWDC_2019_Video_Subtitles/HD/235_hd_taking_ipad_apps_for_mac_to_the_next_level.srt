1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:10,886 --> 00:00:11,736
>> Good afternoon.


3
00:00:12,516 --> 00:00:16,046
[ Applause ]


4
00:00:16,546 --> 00:00:17,616
So, my name is Jamie


5
00:00:17,616 --> 00:00:18,106
Montgomerie.


6
00:00:18,256 --> 00:00:19,496
I work in the UIKit team.


7
00:00:19,496 --> 00:00:20,386
I'm going to be joined by


8
00:00:20,466 --> 00:00:22,336
colleagues Glen, Nils and Chris.


9
00:00:23,056 --> 00:00:24,276
Together, we're going to tell


10
00:00:24,276 --> 00:00:25,946
you about taking iPad apps on


11
00:00:26,036 --> 00:00:27,206
the Mac to the next level.


12
00:00:28,086 --> 00:00:30,916
In our first talk Introducing


13
00:00:30,916 --> 00:00:32,526
iPad Apps for the Mac, we


14
00:00:32,526 --> 00:00:33,416
covered the basics.


15
00:00:33,536 --> 00:00:34,486
We showed you how to get your


16
00:00:34,486 --> 00:00:36,096
app building and discuss some of


17
00:00:36,296 --> 00:00:37,896
the key API differences that you


18
00:00:37,896 --> 00:00:38,566
should be aware of.


19
00:00:39,566 --> 00:00:40,696
In this talk, we're going to


20
00:00:40,696 --> 00:00:42,366
show how to go further and make


21
00:00:42,366 --> 00:00:44,316
your app better for Mac, cover


22
00:00:44,316 --> 00:00:46,196
multiplatform differences, talk


23
00:00:46,196 --> 00:00:47,246
a little about some design


24
00:00:47,246 --> 00:00:49,316
considerations, talk about how


25
00:00:49,316 --> 00:00:50,646
the application life cycle


26
00:00:50,796 --> 00:00:52,786
differs for Mac and discuss how


27
00:00:52,786 --> 00:00:54,746
you can distribute your app.


28
00:00:57,146 --> 00:00:58,356
So let's talk about making your


29
00:00:58,356 --> 00:01:00,146
UIKit app a better Mac app.


30
00:01:01,256 --> 00:01:03,416
The first thing to remember is


31
00:01:03,416 --> 00:01:06,296
that better iPad apps are better


32
00:01:06,296 --> 00:01:06,926
Mac apps.


33
00:01:07,936 --> 00:01:08,896
So we'll talk about some of the


34
00:01:08,896 --> 00:01:10,176
things you can do to make your


35
00:01:10,176 --> 00:01:12,316
app better on iPad and on Mac.


36
00:01:15,866 --> 00:01:17,766
On iPad, your app runs in


37
00:01:17,766 --> 00:01:19,146
everything, from Slide Over in


38
00:01:19,236 --> 00:01:20,796
iPad mini to our beautiful


39
00:01:20,936 --> 00:01:22,706
12.9-inch iPad Pros.


40
00:01:23,936 --> 00:01:25,336
But now running on Mac, that's


41
00:01:25,336 --> 00:01:25,756
not all.


42
00:01:25,926 --> 00:01:27,086
Your app could be running full


43
00:01:27,166 --> 00:01:28,896
screen on a 27-inch iMac, and


44
00:01:29,816 --> 00:01:32,296
that's with a 77% skill factor.


45
00:01:33,676 --> 00:01:35,856
In fact, the 27-inch display is


46
00:01:35,856 --> 00:01:37,446
more like a 35-inch iPad.


47
00:01:38,466 --> 00:01:40,106
So you can fit a lot in that


48
00:01:40,106 --> 00:01:40,446
window.


49
00:01:41,446 --> 00:01:43,156
So use best practices, support


50
00:01:43,156 --> 00:01:44,396
dynamic type and use Auto


51
00:01:44,396 --> 00:01:46,236
Layout, and lastly, remember


52
00:01:46,446 --> 00:01:48,446
that on the Mac app resize fast.


53
00:01:49,516 --> 00:01:51,126
Can your layout code run at 60


54
00:01:51,126 --> 00:01:51,886
frames per second?


55
00:01:52,686 --> 00:01:54,196
If not, you should check it out


56
00:01:54,196 --> 00:01:55,116
using our Instruments


57
00:01:55,116 --> 00:01:55,766
performance tool.


58
00:01:58,816 --> 00:02:00,476
Next, implement great keyboard


59
00:02:00,476 --> 00:02:00,876
support.


60
00:02:01,646 --> 00:02:03,466
All Macs have a keyboard and Mac


61
00:02:03,466 --> 00:02:04,766
users' hands are always near


62
00:02:04,766 --> 00:02:04,946
them.


63
00:02:05,646 --> 00:02:06,886
It's increasingly common for


64
00:02:06,886 --> 00:02:08,126
iPads to have keyboards too.


65
00:02:09,186 --> 00:02:10,455
You can use our UIKeyCommand


66
00:02:10,455 --> 00:02:11,856
class to respond to keyboard


67
00:02:11,856 --> 00:02:12,336
shortcuts.


68
00:02:13,456 --> 00:02:14,546
You can respond to standard


69
00:02:14,546 --> 00:02:15,896
responder actions in your view


70
00:02:15,896 --> 00:02:17,556
controllers, things like the


71
00:02:17,556 --> 00:02:19,466
cut, copy and paste methods.


72
00:02:20,786 --> 00:02:22,326
And look after your responder


73
00:02:22,326 --> 00:02:22,596
ping.


74
00:02:23,446 --> 00:02:24,996
Set first responder so that key


75
00:02:24,996 --> 00:02:26,226
commands go to the right places.


76
00:02:26,446 --> 00:02:29,076
And this will help at iPad too.


77
00:02:29,316 --> 00:02:31,046
If your app is a game, consider


78
00:02:31,046 --> 00:02:32,676
supporting game controllers that


79
00:02:32,676 --> 00:02:33,796
will make the experience better


80
00:02:33,796 --> 00:02:35,586
for your iOS and your Mac users.


81
00:02:39,576 --> 00:02:40,966
So a couple of years ago, we


82
00:02:41,106 --> 00:02:42,686
introduced some great drag and


83
00:02:42,686 --> 00:02:43,846
drop APIs in UIKit.


84
00:02:44,466 --> 00:02:46,386
IPad users now expect drag and


85
00:02:46,386 --> 00:02:47,736
drop, and Mac users have


86
00:02:47,736 --> 00:02:49,436
expected it for a long time.


87
00:02:50,826 --> 00:02:52,066
Making great use of UI drag


88
00:02:52,066 --> 00:02:53,226
interaction and UI drop


89
00:02:53,226 --> 00:02:54,636
interaction will make your Mac


90
00:02:54,836 --> 00:02:56,026
and your iPad users happy.


91
00:02:59,936 --> 00:03:01,316
Now this one is always good


92
00:03:01,316 --> 00:03:01,786
advice.


93
00:03:02,066 --> 00:03:02,956
Use the latest APIs.


94
00:03:02,956 --> 00:03:05,266
If you haven't done it for a


95
00:03:05,266 --> 00:03:06,976
while, now is the time to


96
00:03:06,976 --> 00:03:08,456
examine your app and look at


97
00:03:08,456 --> 00:03:09,866
your use of deprecated APIs.


98
00:03:10,006 --> 00:03:12,896
I said it's always good advice


99
00:03:12,896 --> 00:03:14,496
but it's even better advice this


100
00:03:14,496 --> 00:03:16,196
year as we discussed in our


101
00:03:16,196 --> 00:03:17,926
introductory talk many of the


102
00:03:17,926 --> 00:03:19,936
deprecated iOS APIs are simply


103
00:03:19,936 --> 00:03:21,186
not available on Mac.


104
00:03:22,206 --> 00:03:24,736
So use WKWebView not UIWebView,


105
00:03:25,136 --> 00:03:26,876
use Metal not OpenGL ES.


106
00:03:27,556 --> 00:03:29,046
We've been working hard on these


107
00:03:29,046 --> 00:03:30,516
modern alternatives and using


108
00:03:30,516 --> 00:03:31,376
them enables you to take


109
00:03:31,376 --> 00:03:32,786
advantage of all that work in


110
00:03:32,886 --> 00:03:34,556
iPad and on Mac.


111
00:03:38,756 --> 00:03:41,326
Lastly, support our new iOS 13


112
00:03:41,326 --> 00:03:41,726
features.


113
00:03:42,936 --> 00:03:44,426
For example, if you support


114
00:03:44,426 --> 00:03:45,926
multiple windows in your iPad


115
00:03:45,926 --> 00:03:47,966
app, every UI window scene will


116
00:03:47,966 --> 00:03:49,806
be a window on Mac.


117
00:03:50,826 --> 00:03:54,006
Support Dark Mode on iPad and


118
00:03:54,006 --> 00:03:55,626
you'll support Dark Mode on Mac


119
00:03:55,626 --> 00:03:55,846
too.


120
00:03:56,746 --> 00:03:58,206
I could call it some specific


121
00:03:58,206 --> 00:03:59,956
talks here but there are a lot


122
00:03:59,956 --> 00:04:00,396
this year.


123
00:04:00,646 --> 00:04:02,056
So go and have a browse and


124
00:04:02,056 --> 00:04:02,816
watch the ones that you're


125
00:04:02,816 --> 00:04:04,426
interested in, remembering


126
00:04:04,586 --> 00:04:06,316
better iPad apps make better Mac


127
00:04:07,216 --> 00:04:07,306
apps.


128
00:04:10,356 --> 00:04:12,066
So, better iPad apps or better


129
00:04:12,066 --> 00:04:13,706
Mac apps but better Mac apps


130
00:04:13,786 --> 00:04:15,326
also contain refinements just


131
00:04:15,326 --> 00:04:15,786
for Mac.


132
00:04:17,076 --> 00:04:18,245
So we'll take a look about what


133
00:04:18,245 --> 00:04:19,656
you can do to make your UIKit


134
00:04:19,656 --> 00:04:21,755
app feel even more at home on


135
00:04:21,755 --> 00:04:22,046
Mac.


136
00:04:23,366 --> 00:04:24,456
There are a whole range of


137
00:04:24,456 --> 00:04:25,016
things here.


138
00:04:25,236 --> 00:04:27,006
They spend the gamut from making


139
00:04:27,116 --> 00:04:29,446
more use of existing UIKit APIs


140
00:04:29,446 --> 00:04:32,206
to enable unique Mac features to


141
00:04:32,206 --> 00:04:33,626
some APIs that are completely


142
00:04:33,626 --> 00:04:35,216
new on Mac, or at least


143
00:04:35,506 --> 00:04:36,756
completely new to UIKit


144
00:04:36,756 --> 00:04:37,216
developers.


145
00:04:38,726 --> 00:04:39,956
We're going to take a quick look


146
00:04:39,956 --> 00:04:41,396
at the breadth of APIs available


147
00:04:41,396 --> 00:04:43,336
to you now.


148
00:04:43,566 --> 00:04:44,886
So what's the first thing that


149
00:04:44,886 --> 00:04:46,226
you think of that's unique to


150
00:04:46,226 --> 00:04:46,526
Mac?


151
00:04:47,386 --> 00:04:49,596
For me, it's the Menu Bar.


152
00:04:50,956 --> 00:04:52,156
Global Menu Bars are unique to


153
00:04:52,156 --> 00:04:52,446
Mac.


154
00:04:52,706 --> 00:04:54,316
They store all the possible


155
00:04:54,316 --> 00:04:55,686
actions your user can take in


156
00:04:55,686 --> 00:04:57,176
one place and neatly tucked away


157
00:04:57,176 --> 00:04:57,986
at the top of the screen.


158
00:04:58,956 --> 00:05:01,096
They're global to the app and


159
00:05:01,096 --> 00:05:03,326
the items in them are enabled or


160
00:05:03,326 --> 00:05:04,776
disabled based on what the user


161
00:05:04,776 --> 00:05:05,096
is doing.


162
00:05:05,866 --> 00:05:08,506
So for your iPad app on Mac, you


163
00:05:08,506 --> 00:05:09,656
can just accept the default Menu


164
00:05:09,656 --> 00:05:09,936
Bar.


165
00:05:09,936 --> 00:05:11,386
No extra work is required.


166
00:05:11,976 --> 00:05:15,106
You can also compose a Menu Bar


167
00:05:15,106 --> 00:05:16,866
in Interface Builder as we saw


168
00:05:16,866 --> 00:05:17,616
in our first session.


169
00:05:18,896 --> 00:05:20,476
Or for field control, you can


170
00:05:20,476 --> 00:05:21,346
customize in code.


171
00:05:21,966 --> 00:05:24,376
So I spoke about UIKeyCommand


172
00:05:24,376 --> 00:05:24,716
earlier.


173
00:05:24,966 --> 00:05:27,076
If you're a sharp-eyed API dev


174
00:05:27,076 --> 00:05:28,316
reader, you'll have noticed that


175
00:05:28,406 --> 00:05:30,206
this year has a new UI command


176
00:05:30,326 --> 00:05:30,886
super class.


177
00:05:32,126 --> 00:05:35,636
And this along with UIMenu and


178
00:05:35,636 --> 00:05:37,796
UIMenuBuilder enable you to take


179
00:05:37,886 --> 00:05:39,496
full control over the Mac Menu


180
00:05:39,496 --> 00:05:39,746
Bar.


181
00:05:40,476 --> 00:05:41,336
We're going to see a demo of


182
00:05:41,336 --> 00:05:41,916
this in a moment.


183
00:05:43,306 --> 00:05:45,476
One neat thing about this API is


184
00:05:45,476 --> 00:05:46,796
that UIKeyCommands that you use


185
00:05:46,796 --> 00:05:48,676
in Menus will be available in


186
00:05:48,676 --> 00:05:49,196
iPad too.


187
00:05:49,396 --> 00:05:50,466
They'll be shown in the


188
00:05:50,466 --> 00:05:51,806
discovery builder you get when


189
00:05:51,806 --> 00:05:52,996
you hold on the Command key.


190
00:05:53,696 --> 00:05:55,716
So if you use this API to make


191
00:05:55,716 --> 00:05:57,156
your app a better Mac app,


192
00:05:57,686 --> 00:05:58,606
you'll be making it a better


193
00:05:58,606 --> 00:06:02,816
iPad app too.


194
00:06:02,896 --> 00:06:03,756
Now, there's another kind of


195
00:06:03,756 --> 00:06:05,416
menu in Mac, the Context Menu.


196
00:06:05,746 --> 00:06:06,896
It's shown in the Control click


197
00:06:06,896 --> 00:06:07,536
or right click.


198
00:06:07,976 --> 00:06:09,506
And unlike the Main Menu, its


199
00:06:09,506 --> 00:06:10,486
contents are dynamic.


200
00:06:10,826 --> 00:06:11,716
They're based on what's under


201
00:06:11,716 --> 00:06:12,406
the mouse pointer.


202
00:06:13,446 --> 00:06:15,436
We have a great new UIKit API


203
00:06:15,436 --> 00:06:17,156
for this available on iOS 2,


204
00:06:17,516 --> 00:06:18,926
UIContextMenuInteraction.


205
00:06:19,946 --> 00:06:21,506
It uses UICommands and its


206
00:06:21,506 --> 00:06:22,716
sibling, UIAction.


207
00:06:23,346 --> 00:06:25,006
UIAction is block base, so maybe


208
00:06:25,006 --> 00:06:26,076
more suitable for this kind of


209
00:06:26,076 --> 00:06:26,386
menu.


210
00:06:27,176 --> 00:06:28,766
And this cross platform API


211
00:06:28,896 --> 00:06:30,546
works uniquely on Mac showing


212
00:06:30,546 --> 00:06:31,756
the context menu that we're all


213
00:06:31,756 --> 00:06:32,836
used to.


214
00:06:33,396 --> 00:06:34,726
To learn more about this API,


215
00:06:34,726 --> 00:06:36,116
you should check out our


216
00:06:36,316 --> 00:06:38,666
Modernizing Your UI for iOS 13


217
00:06:38,746 --> 00:06:39,096
session.


218
00:06:43,456 --> 00:06:44,706
So we've talked about some new


219
00:06:44,706 --> 00:06:45,706
UIKit APIs.


220
00:06:45,786 --> 00:06:47,426
Here's an old UIKit API,


221
00:06:47,846 --> 00:06:48,816
UISplitViewController.


222
00:06:49,806 --> 00:06:51,706
So the familiar sidebars on Mac


223
00:06:51,706 --> 00:06:53,296
are very similar to Split Views


224
00:06:53,296 --> 00:06:53,966
in iOS.


225
00:06:54,326 --> 00:06:55,386
They're often used for master


226
00:06:55,386 --> 00:06:56,456
detail kinds of UI.


227
00:06:56,456 --> 00:06:59,566
On Mac, UISplitViewController


228
00:06:59,566 --> 00:07:01,026
manage views are automatically


229
00:07:01,066 --> 00:07:02,596
drag resizable from the minimum


230
00:07:02,596 --> 00:07:03,656
to maximum column width.


231
00:07:04,156 --> 00:07:05,446
And you can use our new


232
00:07:05,676 --> 00:07:07,156
primaryBackgroundStyle property


233
00:07:07,386 --> 00:07:08,576
to have the left-hand column


234
00:07:08,746 --> 00:07:10,826
take on a Mac sidebar look.


235
00:07:11,536 --> 00:07:12,796
When you're using the sidebar


236
00:07:12,796 --> 00:07:14,726
background style, embedded table


237
00:07:14,726 --> 00:07:16,226
views using either of our group


238
00:07:16,226 --> 00:07:17,696
styles will take on a source


239
00:07:17,696 --> 00:07:18,966
list like appearance and look


240
00:07:18,966 --> 00:07:20,236
right at home on Mac.


241
00:07:20,826 --> 00:07:21,696
We're going to see this in a


242
00:07:21,696 --> 00:07:23,236
second in the demo too.


243
00:07:26,776 --> 00:07:28,776
Hover, it doesn't exist on iPad


244
00:07:29,076 --> 00:07:30,236
but it's an instantly familiar


245
00:07:30,236 --> 00:07:31,386
idea to Mac users.


246
00:07:32,316 --> 00:07:33,716
We've added a new easy to use


247
00:07:33,716 --> 00:07:34,616
gesture recognizer,


248
00:07:34,736 --> 00:07:36,206
UIHoverGestureRecognizer.


249
00:07:36,726 --> 00:07:38,176
It allows you to use Hover in


250
00:07:38,176 --> 00:07:39,216
you UIKit apps.


251
00:07:39,846 --> 00:07:41,646
On screen here, you can see our


252
00:07:41,646 --> 00:07:43,736
stocks app making great use of


253
00:07:43,736 --> 00:07:45,276
this to display prices as the


254
00:07:45,316 --> 00:07:47,266
user moves the most plunger over


255
00:07:47,266 --> 00:07:47,876
the price chart.


256
00:07:54,336 --> 00:07:55,686
Now for some things that differ


257
00:07:55,686 --> 00:07:56,956
completely on Mac, we already


258
00:07:56,956 --> 00:07:58,326
have some great Mac APIs.


259
00:07:59,026 --> 00:08:00,236
One example of this is the


260
00:08:00,236 --> 00:08:00,686
Toolbar.


261
00:08:01,216 --> 00:08:02,886
Mac apps often have Toolbars at


262
00:08:02,886 --> 00:08:03,856
the top of the window.


263
00:08:05,176 --> 00:08:06,196
Because this is a Mac only


264
00:08:06,196 --> 00:08:07,556
feature, we've exposed the


265
00:08:07,556 --> 00:08:10,316
regular Mac only API, NSToolbar.


266
00:08:11,256 --> 00:08:12,246
You can get to it via your


267
00:08:12,246 --> 00:08:14,236
UIWindowScene's titlebar


268
00:08:14,346 --> 00:08:14,746
property.


269
00:08:15,816 --> 00:08:18,046
There's a demo of this coming up


270
00:08:20,976 --> 00:08:21,316
soon too.


271
00:08:21,316 --> 00:08:22,646
Another kind of bar unique to


272
00:08:22,646 --> 00:08:23,806
Mac is the Touch Bar.


273
00:08:24,386 --> 00:08:25,966
Touch Bars are on Mac harder


274
00:08:25,966 --> 00:08:26,336
feature.


275
00:08:26,546 --> 00:08:27,926
On MacBook Pros, they sit just


276
00:08:27,926 --> 00:08:29,076
above the keyboard, unlike


277
00:08:29,106 --> 00:08:30,926
context menus, what's in them


278
00:08:30,926 --> 00:08:31,856
changes based on the what the


279
00:08:31,856 --> 00:08:32,466
user is doing.


280
00:08:33,846 --> 00:08:34,905
To allow you to support Touch


281
00:08:34,905 --> 00:08:36,556
Bar, we've exposed the existing


282
00:08:36,556 --> 00:08:38,535
NSTouchBar class to UIKit apps.


283
00:08:39,086 --> 00:08:40,356
And it's available via new


284
00:08:40,356 --> 00:08:42,775
UIResponder and UIViewController


285
00:08:43,395 --> 00:08:43,546
APIs.


286
00:08:46,436 --> 00:08:48,506
So there are of course the whole


287
00:08:48,506 --> 00:08:49,566
host of other Mac features you


288
00:08:49,566 --> 00:08:50,066
could adopt.


289
00:08:50,806 --> 00:08:52,236
You can have some control over


290
00:08:52,236 --> 00:08:54,366
window sizing, you could use the


291
00:08:54,366 --> 00:08:56,086
iOS printing APIs to implement


292
00:08:56,086 --> 00:08:58,456
print support on Mac, you can


293
00:08:58,456 --> 00:08:59,626
author a Help Book which will


294
00:08:59,626 --> 00:09:01,066
give your users help accessible


295
00:09:01,066 --> 00:09:03,356
directly from the Help Menu, and


296
00:09:03,356 --> 00:09:04,536
you can customize your Assets


297
00:09:04,536 --> 00:09:06,076
And Strings to make how your app


298
00:09:06,076 --> 00:09:07,736
looks or what your app says


299
00:09:08,056 --> 00:09:08,756
unique to Mac.


300
00:09:09,146 --> 00:09:13,396
Now, last but not the least, I'd


301
00:09:13,396 --> 00:09:14,486
like to give a mention to the


302
00:09:14,486 --> 00:09:15,156
app icon.


303
00:09:16,246 --> 00:09:18,026
If you do nothing, your icon for


304
00:09:18,026 --> 00:09:19,116
the iPad app will be used for


305
00:09:19,116 --> 00:09:20,356
your Mac app.


306
00:09:20,356 --> 00:09:21,956
But Mac style differs from iPad


307
00:09:21,956 --> 00:09:23,906
style so you can also create an


308
00:09:23,906 --> 00:09:25,426
icon for your app that's just


309
00:09:25,426 --> 00:09:26,996
for Mac.


310
00:09:27,096 --> 00:09:28,616
This may seem pretty trivial but


311
00:09:28,616 --> 00:09:29,826
it's the first thing that your


312
00:09:29,826 --> 00:09:30,386
users see.


313
00:09:30,716 --> 00:09:31,846
So I encourage you to put some


314
00:09:31,846 --> 00:09:33,026
time and effort into it.


315
00:09:33,026 --> 00:09:37,566
Now, I'd like to introduce my


316
00:09:37,566 --> 00:09:38,366
colleague Glen.


317
00:09:38,536 --> 00:09:40,056
He'll show you firsthand how to


318
00:09:40,056 --> 00:09:41,486
make an iPad app into a better


319
00:09:41,486 --> 00:09:42,766
Mac app.


320
00:09:43,266 --> 00:09:45,766
[Applause]


321
00:09:46,266 --> 00:09:48,566
>> Thanks, Jaime.


322
00:09:49,276 --> 00:09:51,896
As my colleague had said, better


323
00:09:51,896 --> 00:09:53,486
iPad apps make for better Mac


324
00:09:53,486 --> 00:09:53,906
apps.


325
00:09:54,206 --> 00:09:55,816
Let's take an example of this.


326
00:09:56,976 --> 00:09:58,856
So here, we have an app called


327
00:09:58,856 --> 00:09:59,646
ChocolateChip.


328
00:09:59,766 --> 00:10:01,256
It's an iPad app that shows


329
00:10:01,536 --> 00:10:02,406
yummy recipes.


330
00:10:03,356 --> 00:10:06,916
In previous demos, all we did


331
00:10:06,916 --> 00:10:11,066
was-- OK, let's and wait for it


332
00:10:11,066 --> 00:10:11,776
to load.


333
00:10:12,276 --> 00:10:13,936
In previous demos, we just


334
00:10:13,966 --> 00:10:16,606
checked the Mac-- checkbox here,


335
00:10:16,606 --> 00:10:19,316
fix any build issues and just


336
00:10:19,316 --> 00:10:22,406
built and ran the app like so.


337
00:10:22,996 --> 00:10:27,426
OK. Just taking a while.


338
00:10:28,836 --> 00:10:30,246
As you can see, we have a


339
00:10:30,246 --> 00:10:32,256
brand-new Mac app with all the


340
00:10:32,256 --> 00:10:33,916
niceties you expect for a Mac


341
00:10:33,916 --> 00:10:34,176
app.


342
00:10:34,766 --> 00:10:36,556
For example, all your content


343
00:10:36,556 --> 00:10:38,246
appears in a window that you can


344
00:10:38,246 --> 00:10:38,846
drag around.


345
00:10:40,046 --> 00:10:41,356
And if you have supported


346
00:10:41,836 --> 00:10:43,996
varying screen sizes and


347
00:10:43,996 --> 00:10:45,896
optimize drawing like Jamie


348
00:10:45,896 --> 00:10:47,816
suggested, you will also be able


349
00:10:47,816 --> 00:10:50,186
to get resizing windows fast and


350
00:10:50,186 --> 00:10:51,956
smooth, like so.


351
00:10:52,526 --> 00:10:55,246
Now, if you will implement it,


352
00:10:55,246 --> 00:10:57,416
the existing move callback in


353
00:10:57,416 --> 00:10:59,156
the table view controller, you


354
00:10:59,156 --> 00:11:01,536
can also reorder rows in the


355
00:11:01,536 --> 00:11:03,816
table view controller like so


356
00:11:04,686 --> 00:11:06,046
without going through a separate


357
00:11:06,176 --> 00:11:06,846
editing mode.


358
00:11:07,366 --> 00:11:08,426
So this is a Mac feature.


359
00:11:08,986 --> 00:11:12,126
Next, we've used the new


360
00:11:12,126 --> 00:11:14,886
UIContextMenuInteraction API


361
00:11:15,046 --> 00:11:16,306
which we introduced this year,


362
00:11:17,366 --> 00:11:18,446
configure it with the right


363
00:11:18,496 --> 00:11:21,876
UIActions and UICommands, then


364
00:11:21,996 --> 00:11:23,926
your context menus carry over to


365
00:11:23,926 --> 00:11:25,256
the Mac seamlessly.


366
00:11:26,256 --> 00:11:27,636
So here I've got Add to


367
00:11:27,636 --> 00:11:28,326
Favorites.


368
00:11:28,956 --> 00:11:30,636
I can make Donuts my favorites


369
00:11:30,786 --> 00:11:32,166
or I can take that away as well.


370
00:11:32,746 --> 00:11:35,436
Now talking about menus.


371
00:11:36,616 --> 00:11:38,676
You also get a default menu bar


372
00:11:38,676 --> 00:11:41,016
that start with all the default


373
00:11:41,016 --> 00:11:45,196
items that you're used to.


374
00:11:45,346 --> 00:11:47,396
For example, cut, copy, past,


375
00:11:47,396 --> 00:11:48,246
undo and redo.


376
00:11:48,696 --> 00:11:51,176
And these items, menu items are


377
00:11:51,176 --> 00:11:52,676
enabled or disabled depending on


378
00:11:52,676 --> 00:11:54,626
what's on the responder chain.


379
00:11:56,356 --> 00:12:00,316
Finally, if you use the new Dark


380
00:12:00,316 --> 00:12:04,166
Mode API in iOS and specify your


381
00:12:04,166 --> 00:12:05,646
colors using these system


382
00:12:05,646 --> 00:12:08,896
colors, then Dark Mode works


383
00:12:09,096 --> 00:12:10,236
really well as well.


384
00:12:11,106 --> 00:12:12,746
As you can see, everything goes


385
00:12:12,746 --> 00:12:15,546
dark and all your colors are set


386
00:12:15,546 --> 00:12:16,496
and your highlights are set


387
00:12:16,496 --> 00:12:18,516
correctly as well.


388
00:12:19,346 --> 00:12:20,426
And all of this without a single


389
00:12:20,426 --> 00:12:20,976
line of code.


390
00:12:23,516 --> 00:12:25,666
[ Applause ]


391
00:12:26,166 --> 00:12:26,606
Yeah. Thank you.


392
00:12:30,616 --> 00:12:32,876
But what if you want it to


393
00:12:32,876 --> 00:12:35,046
catalyze your app to the next


394
00:12:35,046 --> 00:12:35,386
level?


395
00:12:36,116 --> 00:12:37,496
If you want it to make it look


396
00:12:37,496 --> 00:12:38,846
and feel like it really belongs


397
00:12:38,846 --> 00:12:41,476
in a Mac, what can we do?


398
00:12:41,586 --> 00:12:44,126
Well, let's fix three things


399
00:12:44,576 --> 00:12:46,756
today, sidebars, toolbars and


400
00:12:46,856 --> 00:12:47,676
menu bars.


401
00:12:48,766 --> 00:12:49,836
So it looks like I'll be your


402
00:12:49,836 --> 00:12:51,836
friendly bartender for today.


403
00:12:52,466 --> 00:12:54,546
Yeah, thanks [laughter].


404
00:12:55,956 --> 00:13:02,346
OK. First order of business is


405
00:13:02,346 --> 00:13:06,126
you look at this master view


406
00:13:06,126 --> 00:13:06,416
here.


407
00:13:06,416 --> 00:13:07,936
This is a master view of the


408
00:13:07,936 --> 00:13:10,296
regular Split View controller.


409
00:13:10,876 --> 00:13:13,066
But it really should look like a


410
00:13:13,066 --> 00:13:13,846
Mac toolbar.


411
00:13:14,346 --> 00:13:16,546
So let's set-- Let's figure out


412
00:13:16,546 --> 00:13:17,886
how to set the toolbar style.


413
00:13:18,426 --> 00:13:20,996
First, we go to the


414
00:13:21,066 --> 00:13:23,156
RecipeSplitViewController and we


415
00:13:23,156 --> 00:13:25,346
need to hook on to the


416
00:13:25,346 --> 00:13:28,976
viewDidLoad delegate call.


417
00:13:29,786 --> 00:13:31,526
And here, our call has to be


418
00:13:31,526 --> 00:13:33,336
conditionalized for UIKit for


419
00:13:33,336 --> 00:13:36,846
Mac so that it only applies for


420
00:13:36,846 --> 00:13:37,546
Mac builds.


421
00:13:38,726 --> 00:13:41,876
And we only need to insert a


422
00:13:42,286 --> 00:13:44,776
primaryBackgroundStyle and a


423
00:13:44,776 --> 00:13:46,366
new, you know, enumeration of


424
00:13:47,046 --> 00:13:47,456
sidebar.


425
00:13:47,456 --> 00:13:49,416
So with this single line of


426
00:13:49,416 --> 00:13:53,946
code, we now have a-- and we


427
00:13:54,176 --> 00:13:55,526
have a quick rebuild.


428
00:13:55,586 --> 00:13:59,346
We now have the sidebar style.


429
00:14:00,336 --> 00:14:02,106
So just to show you how it looks


430
00:14:02,106 --> 00:14:04,496
like and to convince you it


431
00:14:04,496 --> 00:14:06,486
really does look like a sidebar.


432
00:14:06,486 --> 00:14:07,216
You can see it has the


433
00:14:07,216 --> 00:14:09,416
translucency of a sidebar as I


434
00:14:09,416 --> 00:14:10,096
move it around.


435
00:14:11,386 --> 00:14:12,996
The other things about sidebars


436
00:14:12,996 --> 00:14:15,146
are you can also set in the


437
00:14:15,146 --> 00:14:16,906
general preferences the sidebar


438
00:14:16,906 --> 00:14:17,746
icon size.


439
00:14:18,436 --> 00:14:19,986
So here I'm setting it to small.


440
00:14:20,406 --> 00:14:21,406
And as you can see, it


441
00:14:21,406 --> 00:14:22,496
dynamically updates.


442
00:14:22,496 --> 00:14:24,206
You can also set it to large.


443
00:14:25,606 --> 00:14:26,546
I will leave it at medium.


444
00:14:26,876 --> 00:14:30,166
And as before, reordering what's


445
00:14:30,326 --> 00:14:36,676
-- just as what I did before.


446
00:14:36,826 --> 00:14:38,036
OK. Sorry.


447
00:14:38,266 --> 00:14:40,406
Back to the app.


448
00:14:41,736 --> 00:14:43,386
Next, we should really put in a


449
00:14:43,386 --> 00:14:43,746
toolbar.


450
00:14:44,616 --> 00:14:45,586
We have various widgets


451
00:14:45,586 --> 00:14:47,456
integrated into the title bar


452
00:14:47,456 --> 00:14:52,166
chrome so that users can click


453
00:14:52,166 --> 00:14:53,706
on their commonly used commands.


454
00:14:54,476 --> 00:14:56,586
Now, this is different from iOS


455
00:14:56,586 --> 00:14:58,026
where toolbars are typically


456
00:14:58,026 --> 00:15:00,946
found at the bottom of the app.


457
00:15:01,286 --> 00:15:03,086
We'll have a widget to filter


458
00:15:03,086 --> 00:15:03,776
the recipes.


459
00:15:04,296 --> 00:15:06,116
We'll also have a widget to add


460
00:15:06,466 --> 00:15:07,206
a new recipe.


461
00:15:07,706 --> 00:15:08,906
So let's see how to do that.


462
00:15:09,406 --> 00:15:12,966
We'll go over to the scene


463
00:15:12,966 --> 00:15:13,386
delegate.


464
00:15:13,386 --> 00:15:15,396
And here in the scene delegate,


465
00:15:15,396 --> 00:15:18,016
we're hooking on to the scene


466
00:15:18,016 --> 00:15:19,416
willConnect callback.


467
00:15:19,746 --> 00:15:22,876
And again, we also have to


468
00:15:22,876 --> 00:15:24,376
conditionalize this for


469
00:15:24,376 --> 00:15:26,066
UIKitForMac so that it only


470
00:15:26,066 --> 00:15:26,806
applies in the Mac.


471
00:15:28,216 --> 00:15:30,176
We're digging into the object


472
00:15:30,176 --> 00:15:32,276
model of the scene-- windowScene


473
00:15:32,846 --> 00:15:32,966
here.


474
00:15:33,106 --> 00:15:35,176
And we grab this object called


475
00:15:35,176 --> 00:15:35,806
the titlebar.


476
00:15:36,026 --> 00:15:37,646
The titlebar allows us to set


477
00:15:38,136 --> 00:15:41,256
toolbars as well as change title


478
00:15:41,256 --> 00:15:44,156
bar visibility.


479
00:15:45,666 --> 00:15:49,716
So let's create a new toolbar.


480
00:15:49,876 --> 00:15:53,576
So, notice now that I'm using NS


481
00:15:53,576 --> 00:15:54,066
prefix.


482
00:15:54,156 --> 00:15:56,016
This is actually AppKit object.


483
00:15:56,016 --> 00:15:59,736
And I need to give it identifier


484
00:16:01,186 --> 00:16:04,076
which I have one previously set.


485
00:16:05,296 --> 00:16:08,486
And all I need to do now is a


486
00:16:08,486 --> 00:16:09,216
title bar.


487
00:16:09,216 --> 00:16:11,516
I want to set the toolbar to the


488
00:16:11,516 --> 00:16:12,646
toolbar I just created.


489
00:16:13,396 --> 00:16:14,616
So with these two lines of code,


490
00:16:14,986 --> 00:16:16,456
I've now created a toolbar


491
00:16:17,116 --> 00:16:18,206
that's attached to the title


492
00:16:18,206 --> 00:16:18,436
bar.


493
00:16:19,276 --> 00:16:21,096
But this code is not


494
00:16:21,176 --> 00:16:22,486
particularly interesting, or the


495
00:16:22,486 --> 00:16:23,756
result is not particularly


496
00:16:23,816 --> 00:16:25,626
interesting because we actually


497
00:16:25,626 --> 00:16:26,726
need to configure the toolbar of


498
00:16:26,726 --> 00:16:27,576
the actual items.


499
00:16:28,026 --> 00:16:28,976
So let's see how to do that.


500
00:16:35,516 --> 00:16:37,006
I'll leave you to assign this


501
00:16:37,006 --> 00:16:37,846
code.


502
00:16:38,206 --> 00:16:39,896
First, we're grabbing-- we need


503
00:16:39,896 --> 00:16:41,746
to grab the rootViewController,


504
00:16:42,416 --> 00:16:44,116
and then we pass it to an


505
00:16:44,116 --> 00:16:45,126
initializer of the


506
00:16:45,126 --> 00:16:47,246
ToolbarDelegate which is a class


507
00:16:47,246 --> 00:16:47,966
we've created.


508
00:16:48,826 --> 00:16:50,516
And we set up the delegate.


509
00:16:51,196 --> 00:16:52,736
We want to allow user


510
00:16:52,736 --> 00:16:54,726
customization of the toolbar.


511
00:16:55,446 --> 00:16:57,336
We also want to center the


512
00:16:57,336 --> 00:16:59,036
navigationItem which is the


513
00:16:59,036 --> 00:17:00,276
filter that I talked about.


514
00:17:01,056 --> 00:17:03,666
And finally, I want to set the


515
00:17:03,666 --> 00:17:06,636
titleVisibility to hidden so


516
00:17:06,636 --> 00:17:09,965
that the title doesn't overlap


517
00:17:10,256 --> 00:17:11,965
the navigation item that I've


518
00:17:12,126 --> 00:17:12,786
just created.


519
00:17:14,106 --> 00:17:18,376
So, with a quick recompile and


520
00:17:18,376 --> 00:17:20,586
build, we now have a toolbar.


521
00:17:21,156 --> 00:17:23,396
And you can see the toolbar has


522
00:17:23,396 --> 00:17:26,665
filters for various meals.


523
00:17:26,726 --> 00:17:29,376
So, you know, for breakfast I


524
00:17:29,376 --> 00:17:30,536
think I'm having donuts.


525
00:17:31,816 --> 00:17:33,466
For lunch, I'm having pizzas.


526
00:17:34,656 --> 00:17:35,506
For dinner, I'm having


527
00:17:35,506 --> 00:17:36,096
spaghetti.


528
00:17:36,716 --> 00:17:37,896
Hopefully for desert I'm not


529
00:17:37,896 --> 00:17:39,016
having spaghetti again.


530
00:17:39,596 --> 00:17:41,666
Wow, it's chocolate chip


531
00:17:41,666 --> 00:17:41,976
cookies.


532
00:17:44,946 --> 00:17:47,486
Yes. And we also have a plus


533
00:17:47,486 --> 00:17:49,296
widget or the add item widget


534
00:17:49,996 --> 00:17:55,336
which allows us to add new


535
00:17:55,446 --> 00:17:55,976
recipes.


536
00:17:56,516 --> 00:18:00,256
OK. Finally, we should actually


537
00:18:00,256 --> 00:18:02,186
also customize the menu bar so


538
00:18:02,186 --> 00:18:04,166
that users can find all the


539
00:18:04,846 --> 00:18:05,966
commands they want in a


540
00:18:05,966 --> 00:18:06,876
convenient place.


541
00:18:07,366 --> 00:18:08,736
Now, menu bars are great places


542
00:18:08,736 --> 00:18:10,366
to put all the commands you want


543
00:18:10,536 --> 00:18:11,716
and the system will enable or


544
00:18:11,716 --> 00:18:13,796
disable them accordingly, in


545
00:18:13,796 --> 00:18:16,026
contrast to toolbars where you


546
00:18:16,026 --> 00:18:17,426
might only put commonly used


547
00:18:17,426 --> 00:18:17,866
commands.


548
00:18:18,396 --> 00:18:21,096
In the introduction session, we


549
00:18:21,096 --> 00:18:22,766
showed you how to do this by


550
00:18:23,146 --> 00:18:25,536
dragging out a menu bar in Xcode


551
00:18:25,536 --> 00:18:26,346
Interface Builder.


552
00:18:27,216 --> 00:18:28,406
But sometimes you want to better


553
00:18:28,406 --> 00:18:30,466
control your menus at runtime.


554
00:18:30,466 --> 00:18:32,426
So I'll show you how to do this


555
00:18:32,486 --> 00:18:32,946
in code.


556
00:18:33,466 --> 00:18:35,686
What are we going to do?


557
00:18:35,686 --> 00:18:36,556
We are going to remove the


558
00:18:36,556 --> 00:18:37,896
Format menu because having a


559
00:18:38,476 --> 00:18:40,666
Format menu doesn't make a lot


560
00:18:40,666 --> 00:18:43,196
of sense because this app has no


561
00:18:43,196 --> 00:18:43,956
editable text.


562
00:18:44,636 --> 00:18:46,426
So not a lot of sense to have a


563
00:18:46,426 --> 00:18:49,136
font menu or even text


564
00:18:49,176 --> 00:18:49,706
alignment.


565
00:18:50,896 --> 00:18:54,126
We also want to add two items to


566
00:18:54,126 --> 00:18:54,896
the File menu.


567
00:18:55,496 --> 00:18:58,346
So here, I want to add a new


568
00:18:58,346 --> 00:19:00,566
recipe command which is similar


569
00:19:00,566 --> 00:19:04,776
to the add recipe widget here.


570
00:19:04,996 --> 00:19:06,716
And we also want to add a


571
00:19:06,716 --> 00:19:08,296
command to add or remove


572
00:19:08,336 --> 00:19:10,306
favorite status which is similar


573
00:19:11,036 --> 00:19:12,916
to the context menu here.


574
00:19:15,056 --> 00:19:15,226
All right.


575
00:19:15,226 --> 00:19:15,976
Let's see how to do that.


576
00:19:20,156 --> 00:19:21,246
We'll go over to the app


577
00:19:21,246 --> 00:19:21,706
delegate.


578
00:19:21,706 --> 00:19:23,436
And here in the app delegate, we


579
00:19:23,436 --> 00:19:25,206
need to override a single


580
00:19:25,206 --> 00:19:25,616
method.


581
00:19:29,896 --> 00:19:32,136
And this method is buildCommands


582
00:19:32,786 --> 00:19:34,736
with builder, and it gets passed


583
00:19:34,736 --> 00:19:35,766
a UICommandBuilder.


584
00:19:36,426 --> 00:19:38,736
In subsequent seeds, this will


585
00:19:38,736 --> 00:19:40,816
be called buildMenu and


586
00:19:41,566 --> 00:19:44,086
buildMenu with builder and that


587
00:19:44,086 --> 00:19:46,006
will be passed a UIMenuBuilder.


588
00:19:46,006 --> 00:19:48,796
So be aware of that if you are


589
00:19:48,796 --> 00:19:50,846
working with the current seed.


590
00:19:51,906 --> 00:19:53,246
First thing you need to do is to


591
00:19:53,246 --> 00:19:54,936
make sure that we're actually


592
00:19:54,936 --> 00:19:56,196
building for the Main menu.


593
00:19:56,916 --> 00:19:58,256
So here we're guarding against


594
00:19:58,966 --> 00:20:00,176
checking to see that the system


595
00:20:00,176 --> 00:20:00,976
is the main system.


596
00:20:01,556 --> 00:20:04,036
Sometimes you'll get a .context


597
00:20:04,136 --> 00:20:05,596
if you're building for the-- a


598
00:20:05,596 --> 00:20:06,266
context menu.


599
00:20:06,806 --> 00:20:09,606
With that, we need to talk to


600
00:20:09,606 --> 00:20:09,986
the builder.


601
00:20:10,566 --> 00:20:14,826
So builder, I want to remove a


602
00:20:15,596 --> 00:20:16,666
particular menu.


603
00:20:18,076 --> 00:20:20,066
So here, this menu that I wanted


604
00:20:20,066 --> 00:20:21,156
to remove is a Format menu.


605
00:20:21,156 --> 00:20:22,536
So as you can see, code


606
00:20:22,536 --> 00:20:24,116
completion helps you out a lot


607
00:20:24,636 --> 00:20:28,386
and suggests what kinds of menus


608
00:20:28,386 --> 00:20:31,936
you can actually remove.


609
00:20:32,056 --> 00:20:35,646
So quick build and run.


610
00:20:36,236 --> 00:20:37,586
You can see we've removed the


611
00:20:37,586 --> 00:20:39,096
Format menu from between the


612
00:20:39,096 --> 00:20:39,846
Edit and View.


613
00:20:40,426 --> 00:20:43,866
So, let's go back to this.


614
00:20:44,486 --> 00:20:45,926
So the builder is actually


615
00:20:45,926 --> 00:20:46,666
pretty flexible.


616
00:20:46,666 --> 00:20:47,936
You can do anything from


617
00:20:47,936 --> 00:20:49,386
replacing an entire menu


618
00:20:49,386 --> 00:20:51,416
structure to making selective


619
00:20:51,416 --> 00:20:52,516
edits like what I'm doing.


620
00:20:53,856 --> 00:20:56,536
OK. So next thing I want to do


621
00:20:56,606 --> 00:20:58,606
is I actually want to insert the


622
00:20:58,606 --> 00:20:59,046
content.


623
00:20:59,796 --> 00:21:01,806
So let's do a talk to the


624
00:21:01,806 --> 00:21:04,196
builder and say insert a child


625
00:21:04,816 --> 00:21:08,486
at the start here of the File


626
00:21:08,586 --> 00:21:08,896
menu.


627
00:21:09,426 --> 00:21:12,976
So, what about this content?


628
00:21:16,776 --> 00:21:21,736
I have a little commands here


629
00:21:21,736 --> 00:21:23,416
that will be added.


630
00:21:23,776 --> 00:21:24,926
The first one is


631
00:21:24,926 --> 00:21:25,846
newRecipeCommand.


632
00:21:26,336 --> 00:21:28,746
And this is a key command which


633
00:21:28,746 --> 00:21:31,606
is hooked on to the createRecipe


634
00:21:32,416 --> 00:21:33,286
method.


635
00:21:33,876 --> 00:21:36,126
And it's a key command so it


636
00:21:36,126 --> 00:21:39,816
will take a input of f and a


637
00:21:39,816 --> 00:21:41,016
command and option.


638
00:21:41,016 --> 00:21:42,406
So if you press Command option


639
00:21:42,406 --> 00:21:44,646
f, you'll also be able to invoke


640
00:21:44,646 --> 00:21:45,656
this UIKeyCommand.


641
00:21:46,186 --> 00:21:47,066
The nice thing about having a


642
00:21:47,066 --> 00:21:50,036
UIKeyCommand here is this is


643
00:21:50,306 --> 00:21:51,526
perfectly cross platform.


644
00:21:51,656 --> 00:21:53,316
This will also appear, you know,


645
00:21:53,476 --> 00:21:55,126
discoverability view or


646
00:21:55,126 --> 00:21:57,386
discoverability had that you get


647
00:21:57,386 --> 00:21:57,916
on the iPad.


648
00:21:58,356 --> 00:22:00,266
So without conditionalizing any


649
00:22:00,266 --> 00:22:01,076
code.


650
00:22:01,276 --> 00:22:03,146
This works on both Mac as well


651
00:22:03,896 --> 00:22:05,356
as iOS.


652
00:22:05,526 --> 00:22:08,166
Next, we can create a


653
00:22:08,166 --> 00:22:09,106
makeFavoriteCommand.


654
00:22:09,606 --> 00:22:10,606
And this is just a regular


655
00:22:10,606 --> 00:22:12,126
command without any key


656
00:22:12,126 --> 00:22:12,606
equivalence.


657
00:22:13,596 --> 00:22:17,006
And this goes to toggleSelected


658
00:22:17,316 --> 00:22:18,476
RecipeFavoriteState.


659
00:22:19,056 --> 00:22:21,866
And finally, we make a menu


660
00:22:21,866 --> 00:22:24,236
which is a construct that groups


661
00:22:24,776 --> 00:22:25,946
both the new command--


662
00:22:25,946 --> 00:22:27,076
newRecipeCommand and the


663
00:22:27,076 --> 00:22:27,976
makeFavoriteCommand.


664
00:22:28,606 --> 00:22:30,496
One thing to highlight here is


665
00:22:30,496 --> 00:22:32,386
we're passing the options of


666
00:22:32,896 --> 00:22:35,056
displayInline so that the menu


667
00:22:35,056 --> 00:22:37,186
will be displayed-- the contents


668
00:22:37,186 --> 00:22:38,166
in the menu will be displayed


669
00:22:38,166 --> 00:22:40,366
together with the parent.


670
00:22:40,606 --> 00:22:42,296
If you omitted these options,


671
00:22:42,356 --> 00:22:43,956
what will happen is the menu


672
00:22:43,956 --> 00:22:44,976
will be displayed as a


673
00:22:44,976 --> 00:22:46,646
hierarchical menu which is what


674
00:22:46,646 --> 00:22:49,756
you might be used to on the Mac.


675
00:22:49,806 --> 00:22:51,696
OK. Let's see what this looks


676
00:22:51,696 --> 00:22:52,896
like here.


677
00:22:55,046 --> 00:22:56,746
So we insert this into the-- at


678
00:22:56,786 --> 00:22:57,736
the beginning of File menu.


679
00:22:58,356 --> 00:23:01,656
OK. We have a quick rebuild and


680
00:23:01,656 --> 00:23:01,906
run.


681
00:23:02,676 --> 00:23:05,876
As you can see, it now has a New


682
00:23:05,876 --> 00:23:08,766
Recipe command which does the


683
00:23:08,766 --> 00:23:10,096
same thing as that plus widget.


684
00:23:10,636 --> 00:23:13,066
It also has a Make Favorite


685
00:23:13,856 --> 00:23:16,596
which does-- it gives a love


686
00:23:16,596 --> 00:23:18,186
heart on the chocolate chips.


687
00:23:18,966 --> 00:23:20,316
And we can remove favorites as


688
00:23:20,346 --> 00:23:20,526
well.


689
00:23:21,276 --> 00:23:23,856
In summary, what I've shown you


690
00:23:23,856 --> 00:23:26,736
is how much you get for free


691
00:23:27,166 --> 00:23:30,316
just by rebuilding your iPad app


692
00:23:30,316 --> 00:23:31,056
on the Mac.


693
00:23:31,546 --> 00:23:34,376
I've also shown you sidebars,


694
00:23:34,666 --> 00:23:37,176
toolbars and menu bars to take


695
00:23:37,176 --> 00:23:38,736
you all-- to catalyze your app


696
00:23:39,056 --> 00:23:39,826
to the next level.


697
00:23:40,486 --> 00:23:42,206
So it's over to you, Jamie, for


698
00:23:42,206 --> 00:23:42,976
some design considerations.


699
00:23:43,516 --> 00:23:46,866
[ Applause ]


700
00:23:47,366 --> 00:23:47,676
>> Thanks, Glen.


701
00:23:52,726 --> 00:23:54,836
So, now we've talked about some


702
00:23:54,836 --> 00:23:55,886
of the technical details of


703
00:23:55,886 --> 00:23:57,496
adapting your iPad app for Mac,


704
00:23:58,136 --> 00:23:59,816
let's take a short dip into some


705
00:23:59,816 --> 00:24:00,876
design considerations.


706
00:24:03,256 --> 00:24:04,906
First, Navigation.


707
00:24:05,686 --> 00:24:07,806
Think about how your users find


708
00:24:07,806 --> 00:24:08,716
their way around your app.


709
00:24:09,596 --> 00:24:10,756
If you're not already think


710
00:24:10,756 --> 00:24:12,606
about using a sidebar on Mac and


711
00:24:12,606 --> 00:24:14,416
maybe a Split View on iPad too,


712
00:24:15,766 --> 00:24:17,466
and reconsider your use of tab


713
00:24:17,506 --> 00:24:17,846
bars.


714
00:24:17,936 --> 00:24:19,356
On the Mac, you should consider


715
00:24:19,356 --> 00:24:20,696
using a segmented control in the


716
00:24:20,696 --> 00:24:21,736
toolbar instead.


717
00:24:26,336 --> 00:24:27,226
Next, layout.


718
00:24:27,886 --> 00:24:29,086
We've talked about screen sizes


719
00:24:29,116 --> 00:24:29,556
already.


720
00:24:29,716 --> 00:24:31,256
It should be flexible in your


721
00:24:31,256 --> 00:24:32,636
layout and take advantage of the


722
00:24:32,636 --> 00:24:33,296
big window.


723
00:24:34,356 --> 00:24:35,876
You can reflow and redesign your


724
00:24:35,876 --> 00:24:37,416
user interface and you can sue


725
00:24:37,416 --> 00:24:39,276
custom assets to reword hardware


726
00:24:39,276 --> 00:24:40,996
related content or just to take


727
00:24:40,996 --> 00:24:41,956
advantage of the space.


728
00:24:46,106 --> 00:24:48,706
iPad design is larger than Mac


729
00:24:48,706 --> 00:24:49,086
design.


730
00:24:49,086 --> 00:24:50,226
It's optimized for touch.


731
00:24:51,076 --> 00:24:52,426
So baseline font sizes are not


732
00:24:52,426 --> 00:24:52,776
the same.


733
00:24:52,976 --> 00:24:55,456
On iOS, most text is 17 points


734
00:24:55,646 --> 00:24:57,456
and on Mac it's 13 points.


735
00:24:58,486 --> 00:25:00,476
So we scale UIKit content for


736
00:25:00,476 --> 00:25:02,736
you by 77% compared to how it


737
00:25:02,736 --> 00:25:04,346
would appear in an AppKit app.


738
00:25:05,336 --> 00:25:07,246
This means that UIKit points are


739
00:25:07,246 --> 00:25:08,936
smaller than AppKit points on


740
00:25:08,936 --> 00:25:09,276
screen.


741
00:25:09,876 --> 00:25:11,576
Even bitmap graphics in UIKit


742
00:25:11,576 --> 00:25:14,286
apps will be shown at 77% of the


743
00:25:14,286 --> 00:25:15,416
size that they would be in an


744
00:25:15,416 --> 00:25:16,016
AppKit app.


745
00:25:17,326 --> 00:25:18,346
Now because the scaling is


746
00:25:18,346 --> 00:25:19,816
global to the app, in most


747
00:25:19,816 --> 00:25:20,836
cases, you don't need to worry


748
00:25:20,836 --> 00:25:21,166
about it.


749
00:25:22,366 --> 00:25:23,806
If you do want some more direct


750
00:25:23,806 --> 00:25:25,346
control especially over font


751
00:25:25,346 --> 00:25:27,226
scaling, you should look at the


752
00:25:27,226 --> 00:25:28,906
Font Management and Text Scaling


753
00:25:28,906 --> 00:25:33,526
session to learn all about it.


754
00:25:33,576 --> 00:25:34,516
And menu bars.


755
00:25:35,046 --> 00:25:36,406
We talked about the how already,


756
00:25:36,406 --> 00:25:38,056
but what should you put in it?


757
00:25:39,366 --> 00:25:40,386
So I mentioned that the menu


758
00:25:40,386 --> 00:25:42,246
contains all possible actions in


759
00:25:42,246 --> 00:25:44,086
one place that is global to the


760
00:25:44,086 --> 00:25:45,706
app and that items are enabled


761
00:25:45,706 --> 00:25:47,126
or disabled based on what the


762
00:25:47,126 --> 00:25:47,696
user is doing.


763
00:25:48,546 --> 00:25:49,446
This means that what's in the


764
00:25:49,446 --> 00:25:51,016
menus shouldn't change.


765
00:25:51,016 --> 00:25:53,026
You should build it only once at


766
00:25:53,026 --> 00:25:53,536
launch time.


767
00:25:54,616 --> 00:25:55,626
And you really should think


768
00:25:55,626 --> 00:25:56,946
about all the functions your app


769
00:25:56,946 --> 00:25:58,506
has and make sure they're all


770
00:25:58,506 --> 00:25:59,896
available via the menu bar.


771
00:26:04,166 --> 00:26:05,246
And we just talked about how the


772
00:26:05,246 --> 00:26:06,426
iPad is optimized for touch.


773
00:26:07,206 --> 00:26:08,666
One thing that's unique to iPad


774
00:26:08,666 --> 00:26:09,896
is direct multitouch.


775
00:26:10,606 --> 00:26:12,186
The Mac doesn't have this but it


776
00:26:12,186 --> 00:26:13,886
does always have a keyboard and


777
00:26:13,886 --> 00:26:14,756
the mouse or trackpad.


778
00:26:15,346 --> 00:26:17,066
You should think about how you


779
00:26:17,066 --> 00:26:18,496
can map the gestures used in


780
00:26:18,496 --> 00:26:20,246
your app to these input devices,


781
00:26:20,686 --> 00:26:22,536
reimplementing them for mouse


782
00:26:22,536 --> 00:26:23,206
and trackpad on Mac.


783
00:26:23,206 --> 00:26:23,776
And when you're doing this,


784
00:26:24,576 --> 00:26:25,476
remember to consider


785
00:26:25,476 --> 00:26:25,976
accessibility.


786
00:26:29,356 --> 00:26:31,026
Now that really was just a short


787
00:26:31,026 --> 00:26:32,146
dip into design topics.


788
00:26:32,466 --> 00:26:33,636
There's lots of useful


789
00:26:33,636 --> 00:26:35,296
information on device in the Mac


790
00:26:35,296 --> 00:26:36,496
Human Interface Guidelines.


791
00:26:37,106 --> 00:26:38,086
You should look at it while


792
00:26:38,086 --> 00:26:38,846
you're designing your app.


793
00:26:38,846 --> 00:26:41,046
And I encourage you to check out


794
00:26:41,246 --> 00:26:42,946
the Design for iPad Apps on Mac


795
00:26:42,946 --> 00:26:43,246
talk.


796
00:26:43,786 --> 00:26:45,576
It contains lots of great advice


797
00:26:45,676 --> 00:26:47,036
on how to make your UIKit app a


798
00:26:47,036 --> 00:26:50,726
great Mac app.


799
00:26:50,976 --> 00:26:52,886
So now we've talked about making


800
00:26:53,006 --> 00:26:54,616
your iPad app into a better Mac


801
00:26:54,616 --> 00:26:56,556
app, I'd like to introduce Nils


802
00:26:56,706 --> 00:26:57,846
who'll talk about another thing


803
00:26:57,846 --> 00:26:59,286
that's unique to UIKit apps on


804
00:26:59,286 --> 00:27:01,126
Mac, the application lifecycle.


805
00:27:02,351 --> 00:27:04,351
[ Applause ]


806
00:27:04,686 --> 00:27:05,226
>> Thank you Jamie.


807
00:27:06,306 --> 00:27:07,256
Good afternoon, everyone.


808
00:27:07,706 --> 00:27:08,716
My name is Nils Beck.


809
00:27:08,856 --> 00:27:10,526
I'm an engineer with the AppKit


810
00:27:10,606 --> 00:27:12,076
framework team and I'm excited


811
00:27:12,136 --> 00:27:13,806
to talk to you today about the


812
00:27:13,806 --> 00:27:15,456
application lifecycle of your


813
00:27:15,456 --> 00:27:17,346
iPad app for the Mac.


814
00:27:18,476 --> 00:27:19,656
When we compare the app


815
00:27:19,656 --> 00:27:21,636
lifecycle on iOS to that on


816
00:27:21,636 --> 00:27:23,376
macOS, we find that there are


817
00:27:23,376 --> 00:27:24,006
differences.


818
00:27:24,546 --> 00:27:26,396
In some iOS, specific behaviors


819
00:27:26,506 --> 00:27:28,066
are reflected in the UIKit API.


820
00:27:29,546 --> 00:27:30,856
This presents a challenge when


821
00:27:30,856 --> 00:27:32,606
running iPad apps on the Mac.


822
00:27:33,666 --> 00:27:36,026
How do we map macOS app states


823
00:27:36,436 --> 00:27:37,506
to the iOS API?


824
00:27:41,316 --> 00:27:42,656
Let's start by first reviewing


825
00:27:42,656 --> 00:27:44,366
the app lifecycle states as they


826
00:27:44,366 --> 00:27:45,326
exist on iOS.


827
00:27:46,146 --> 00:27:47,146
You can follow along in the


828
00:27:47,146 --> 00:27:48,746
chart that I'll be showing here


829
00:27:48,826 --> 00:27:50,796
on the right-hand side.


830
00:27:51,006 --> 00:27:52,466
When your app is on screen and


831
00:27:52,466 --> 00:27:53,396
the person is normally


832
00:27:53,396 --> 00:27:54,736
interacting with your app on


833
00:27:54,776 --> 00:27:56,126
iPad, it is both in the


834
00:27:56,126 --> 00:27:57,496
foreground and active.


835
00:27:58,176 --> 00:28:01,416
Your app is inactive but still


836
00:28:01,416 --> 00:28:03,016
in the foreground when something


837
00:28:03,016 --> 00:28:04,266
is occluding it and it is


838
00:28:04,266 --> 00:28:05,826
therefore not receiving events.


839
00:28:06,926 --> 00:28:08,706
This is usually temporary, for


840
00:28:08,706 --> 00:28:10,146
example when control center is


841
00:28:10,146 --> 00:28:13,266
visible on top of your app.


842
00:28:14,176 --> 00:28:14,846
Once your app is in the


843
00:28:14,846 --> 00:28:16,646
background, the user is not


844
00:28:16,646 --> 00:28:17,466
interacting with it.


845
00:28:18,246 --> 00:28:19,506
For example, they may have used


846
00:28:19,506 --> 00:28:20,936
the task switcher and swiped


847
00:28:20,936 --> 00:28:23,416
sideways to a different app, but


848
00:28:23,836 --> 00:28:25,326
you may still perform background


849
00:28:25,326 --> 00:28:26,986
task completion and your app is


850
00:28:26,986 --> 00:28:28,416
suspended when no background


851
00:28:28,416 --> 00:28:29,206
tasks remain.


852
00:28:29,716 --> 00:28:32,866
Once suspended, your app is


853
00:28:32,866 --> 00:28:34,486
frozen and gets no more CPU


854
00:28:34,486 --> 00:28:35,016
cycles.


855
00:28:35,706 --> 00:28:37,436
At this point, it may be killed


856
00:28:37,436 --> 00:28:38,766
by the system at any moment


857
00:28:38,816 --> 00:28:40,206
without further notification.


858
00:28:40,836 --> 00:28:43,756
And finally, your app is not


859
00:28:43,756 --> 00:28:45,196
running when it is no longer


860
00:28:45,256 --> 00:28:48,496
even in memory.


861
00:28:49,016 --> 00:28:49,996
Putting all of this together,


862
00:28:50,206 --> 00:28:51,716
let's look at the possible state


863
00:28:51,716 --> 00:28:53,216
changes you will see whether


864
00:28:53,216 --> 00:28:55,256
running an iOS or a macOS.


865
00:28:55,636 --> 00:28:56,956
I will walk you through these in


866
00:28:56,956 --> 00:28:59,206
a second but first I'd like to


867
00:28:59,206 --> 00:29:00,656
note that to keep simple--


868
00:29:00,656 --> 00:29:02,746
things simple for you, iPad apps


869
00:29:02,746 --> 00:29:04,466
on the Mac will get the same


870
00:29:04,466 --> 00:29:06,816
delegate calls and notifications


871
00:29:06,816 --> 00:29:07,676
as an iOS.


872
00:29:08,416 --> 00:29:11,486
You may be used to handling


873
00:29:11,486 --> 00:29:12,806
these state changes in app


874
00:29:12,806 --> 00:29:14,566
delegate methods, but they also


875
00:29:14,566 --> 00:29:16,496
existed and NSNotification shown


876
00:29:16,496 --> 00:29:16,716
here.


877
00:29:18,436 --> 00:29:19,426
We recommend using these


878
00:29:19,426 --> 00:29:21,806
notifications as they work even


879
00:29:21,806 --> 00:29:23,216
when you are opted into the new


880
00:29:23,216 --> 00:29:25,596
multi-window API where some app


881
00:29:25,596 --> 00:29:27,096
delegate calls are omitted.


882
00:29:27,856 --> 00:29:29,196
It's the same on iOS by the way.


883
00:29:30,616 --> 00:29:33,116
Also, the overall app state in a


884
00:29:33,116 --> 00:29:34,816
multi-window app depends on the


885
00:29:34,816 --> 00:29:36,126
activation states of the


886
00:29:36,126 --> 00:29:37,226
individual scenes.


887
00:29:37,786 --> 00:29:39,156
So you will likely want to


888
00:29:39,156 --> 00:29:41,026
handle state changes per scene.


889
00:29:42,106 --> 00:29:43,276
But in this talk, we'll just


890
00:29:43,276 --> 00:29:44,866
focus on the overall app


891
00:29:44,866 --> 00:29:45,486
lifecycle.


892
00:29:46,886 --> 00:29:48,376
In addition to the delegate


893
00:29:48,376 --> 00:29:50,426
calls and notifications, on


894
00:29:50,426 --> 00:29:52,336
macOS, the sequences of these


895
00:29:52,336 --> 00:29:53,976
state changes are also the same


896
00:29:53,976 --> 00:29:54,616
as an iPad.


897
00:29:56,346 --> 00:29:57,926
As I promised a second ago,


898
00:29:58,016 --> 00:29:59,296
let's take a closer look at


899
00:29:59,296 --> 00:30:00,606
these sequences of state change


900
00:30:00,606 --> 00:30:00,976
notifications.


901
00:30:03,316 --> 00:30:05,036
On the launch, you will see


902
00:30:05,246 --> 00:30:06,866
didFinishLaunching and


903
00:30:06,866 --> 00:30:07,716
didBecomeActive.


904
00:30:08,416 --> 00:30:12,186
On the way out, you will see


905
00:30:12,186 --> 00:30:13,726
willResignActive and


906
00:30:13,726 --> 00:30:14,646
didEnterBackground.


907
00:30:17,156 --> 00:30:19,116
You may also get willTerminate


908
00:30:19,576 --> 00:30:20,996
if we are certain that the app


909
00:30:20,996 --> 00:30:22,936
is exiting and your app is not


910
00:30:22,936 --> 00:30:23,756
already suspended.


911
00:30:24,426 --> 00:30:27,716
And finally, on the way back in


912
00:30:27,716 --> 00:30:28,856
from the background state, you


913
00:30:28,856 --> 00:30:30,946
will see willEnterForeground and


914
00:30:30,946 --> 00:30:31,816
didBecomeActive.


915
00:30:32,466 --> 00:30:35,666
While the notifications and


916
00:30:35,666 --> 00:30:37,176
sequences are the same on both


917
00:30:37,176 --> 00:30:39,496
platforms, we did alter when


918
00:30:39,586 --> 00:30:40,596
these transitions occur on


919
00:30:40,596 --> 00:30:41,206
macOS.


920
00:30:42,286 --> 00:30:43,156
We'll get back to that in a


921
00:30:43,156 --> 00:30:43,546
moment.


922
00:30:44,286 --> 00:30:48,196
Now, back in iOS, we recommend


923
00:30:48,276 --> 00:30:49,716
that your code should respond to


924
00:30:49,716 --> 00:30:51,266
these state changes in certain


925
00:30:51,266 --> 00:30:51,716
ways.


926
00:30:52,316 --> 00:30:53,846
For example, when you learn


927
00:30:53,846 --> 00:30:55,476
about the deactivation of your


928
00:30:55,646 --> 00:30:56,186
app through


929
00:30:56,186 --> 00:30:57,826
willResignActiveNotification,


930
00:30:58,516 --> 00:31:00,076
you're expected to among other


931
00:31:00,076 --> 00:31:02,636
things, reduce the frame rate of


932
00:31:02,636 --> 00:31:05,486
on-screen content, stop various


933
00:31:05,486 --> 00:31:07,006
types of nonessential work, for


934
00:31:07,266 --> 00:31:09,676
example, timers, queues and


935
00:31:09,676 --> 00:31:12,076
queries, and there may also be


936
00:31:12,076 --> 00:31:12,946
other side effects.


937
00:31:13,126 --> 00:31:14,856
For example, you may want to


938
00:31:14,856 --> 00:31:18,546
pause game play in your game.


939
00:31:18,766 --> 00:31:20,466
Similarly, when your app enters


940
00:31:20,466 --> 00:31:21,786
the background state through


941
00:31:21,786 --> 00:31:23,366
didEnterBackgroundNotification,


942
00:31:23,816 --> 00:31:26,096
on iOS, your app is expected to


943
00:31:26,436 --> 00:31:28,706
cease all rendering, reduce your


944
00:31:28,776 --> 00:31:30,626
CPU usage to the bare minimum


945
00:31:30,626 --> 00:31:33,186
necessary, and free up as much


946
00:31:33,186 --> 00:31:34,136
memory as possible.


947
00:31:35,336 --> 00:31:36,596
Again, there may also be other


948
00:31:36,596 --> 00:31:37,296
side effects.


949
00:31:38,156 --> 00:31:39,716
For example, if the content


950
00:31:39,716 --> 00:31:40,796
shown on screen should be


951
00:31:40,796 --> 00:31:42,676
private, you may want to obscure


952
00:31:42,676 --> 00:31:43,826
it before the screenshot is


953
00:31:43,826 --> 00:31:44,126
taken.


954
00:31:44,516 --> 00:31:48,436
Now, we don't want you to have


955
00:31:48,436 --> 00:31:49,706
to change all of the state


956
00:31:49,706 --> 00:31:51,126
change handling code when


957
00:31:51,126 --> 00:31:53,006
bringing your iPad app to macOS.


958
00:31:54,056 --> 00:31:55,656
But your iPad app running on


959
00:31:55,656 --> 00:31:57,506
macOS is now a Mac app.


960
00:31:57,506 --> 00:31:59,556
How does that change things?


961
00:32:00,646 --> 00:32:01,726
Here are some Mac specific


962
00:32:01,726 --> 00:32:02,586
considerations.


963
00:32:03,156 --> 00:32:06,116
It is common for many Mac apps


964
00:32:06,116 --> 00:32:07,416
to share the screen at the same


965
00:32:07,466 --> 00:32:07,756
time.


966
00:32:07,756 --> 00:32:11,476
One of those applications is


967
00:32:11,476 --> 00:32:13,966
Frontmost which just means that


968
00:32:13,966 --> 00:32:16,186
it receives key events and its


969
00:32:16,186 --> 00:32:17,006
menu bar is shown.


970
00:32:17,596 --> 00:32:21,696
Many things may affect the


971
00:32:21,696 --> 00:32:23,696
visibility of an app's contents.


972
00:32:24,136 --> 00:32:26,006
For example, a window may be


973
00:32:26,006 --> 00:32:28,616
occluded by another window, or


974
00:32:28,936 --> 00:32:30,126
the window may be minimized to


975
00:32:30,126 --> 00:32:32,636
the dock, or it could even be in


976
00:32:32,636 --> 00:32:33,906
another space entirely.


977
00:32:36,346 --> 00:32:38,696
It is also possible that the app


978
00:32:38,696 --> 00:32:40,516
isn't showing contents on screen


979
00:32:40,606 --> 00:32:41,386
for other reasons.


980
00:32:42,156 --> 00:32:43,716
For example, the whole app could


981
00:32:43,716 --> 00:32:46,156
be hidden, or it might just not


982
00:32:46,156 --> 00:32:48,776
have any windows right now, or


983
00:32:49,296 --> 00:32:50,926
it's even possible that your app


984
00:32:50,926 --> 00:32:52,056
could be running in an


985
00:32:52,056 --> 00:32:53,766
off-screen log in session that


986
00:32:53,766 --> 00:32:55,756
only exists on a virtual screen


987
00:32:56,136 --> 00:32:57,736
which you might be accessing via


988
00:32:57,736 --> 00:32:59,406
VNC during one of those late


989
00:32:59,406 --> 00:33:00,426
night debugging sessions.


990
00:33:02,866 --> 00:33:04,266
Regardless of their frontmost


991
00:33:04,266 --> 00:33:05,936
state and content feasibility,


992
00:33:06,216 --> 00:33:07,846
Mac apps are generally not


993
00:33:08,036 --> 00:33:09,196
expected to change their


994
00:33:09,196 --> 00:33:13,006
behavior as drastically as iOS


995
00:33:13,646 --> 00:33:13,756
apps.


996
00:33:13,976 --> 00:33:16,076
All running apps are expected to


997
00:33:16,076 --> 00:33:17,406
be doing valuable work for the


998
00:33:17,406 --> 00:33:17,816
user.


999
00:33:19,166 --> 00:33:21,346
Also, you want apps that are not


1000
00:33:21,436 --> 00:33:23,126
frontmost to still receive


1001
00:33:23,126 --> 00:33:25,156
scroll events, click-throughs


1002
00:33:25,366 --> 00:33:26,386
and hover events.


1003
00:33:27,716 --> 00:33:29,136
And a Mac user would not


1004
00:33:29,136 --> 00:33:30,786
necessarily expect game play to


1005
00:33:30,786 --> 00:33:32,096
pause when they switch to a


1006
00:33:32,096 --> 00:33:33,936
different app, or rendering to


1007
00:33:33,936 --> 00:33:35,796
be disabled entirely while


1008
00:33:35,796 --> 00:33:37,376
trying to use your app through


1009
00:33:37,376 --> 00:33:38,846
one of those VNC sessions on a


1010
00:33:38,846 --> 00:33:40,246
virtual screen.


1011
00:33:42,256 --> 00:33:44,616
I told you earlier that we had


1012
00:33:44,616 --> 00:33:46,316
altered when these state changes


1013
00:33:46,316 --> 00:33:47,976
occur compared to iOS.


1014
00:33:48,126 --> 00:33:48,816
And here it is.


1015
00:33:49,596 --> 00:33:50,756
Based on what I just told you,


1016
00:33:50,756 --> 00:33:52,356
we have decided that on macOS,


1017
00:33:52,356 --> 00:33:55,316
we will simultaneously keep all


1018
00:33:55,316 --> 00:33:57,496
iPad apps foreground and active


1019
00:33:57,876 --> 00:33:58,806
almost all the time.


1020
00:33:59,656 --> 00:34:01,196
We will only enter the


1021
00:34:01,256 --> 00:34:02,766
foreground inactive and


1022
00:34:02,836 --> 00:34:04,676
background states during app


1023
00:34:04,676 --> 00:34:06,276
termination and background


1024
00:34:06,276 --> 00:34:06,796
launches.


1025
00:34:07,826 --> 00:34:09,626
In other words, as long as the


1026
00:34:09,626 --> 00:34:11,196
user perceives your app to be


1027
00:34:11,196 --> 00:34:13,396
running, it is foreground active


1028
00:34:13,775 --> 00:34:15,786
to avoid any unMac like side


1029
00:34:15,786 --> 00:34:16,226
effects.


1030
00:34:16,766 --> 00:34:19,016
Let me repeat that.


1031
00:34:19,815 --> 00:34:21,085
The UIKit state change


1032
00:34:21,085 --> 00:34:22,886
notifications are not going to


1033
00:34:22,886 --> 00:34:24,846
be called for example when your


1034
00:34:24,846 --> 00:34:26,795
app gains or loses the menu bar,


1035
00:34:27,056 --> 00:34:28,315
or a window becomes occluded.


1036
00:34:29,005 --> 00:34:33,346
That means that your app won't


1037
00:34:33,346 --> 00:34:34,795
reduce its resource consumption


1038
00:34:34,866 --> 00:34:36,396
as eagerly as on iOS.


1039
00:34:36,926 --> 00:34:38,676
However, the AppNap heuristics


1040
00:34:38,676 --> 00:34:40,226
are applied to all Mac apps


1041
00:34:40,446 --> 00:34:41,985
including your iPad app.


1042
00:34:42,916 --> 00:34:44,295
AppNap is a feature of macOS


1043
00:34:44,295 --> 00:34:46,206
where the system constantly


1044
00:34:46,206 --> 00:34:47,716
observes various properties of


1045
00:34:47,716 --> 00:34:49,396
the app for indications that it


1046
00:34:49,396 --> 00:34:50,295
is not in use.


1047
00:34:50,295 --> 00:34:52,226
For example, whether it is


1048
00:34:52,226 --> 00:34:54,416
visible, actively drawing,


1049
00:34:54,656 --> 00:34:56,346
playing audio and so on.


1050
00:34:57,966 --> 00:34:59,356
AppNap then automatically


1051
00:34:59,356 --> 00:35:01,426
applies throttling when it is


1052
00:35:01,426 --> 00:35:02,736
deemed safe to do so.


1053
00:35:03,356 --> 00:35:07,146
As I mentioned earlier, we do


1054
00:35:07,146 --> 00:35:08,206
enter the other app states


1055
00:35:08,246 --> 00:35:09,496
during termination and


1056
00:35:09,496 --> 00:35:10,446
background launches.


1057
00:35:11,666 --> 00:35:12,556
Let's start with app


1058
00:35:12,556 --> 00:35:13,116
termination.


1059
00:35:14,656 --> 00:35:16,256
Something developers need to be


1060
00:35:16,256 --> 00:35:18,386
aware of when moving their iPad


1061
00:35:18,386 --> 00:35:21,246
apps to macOS is that switching


1062
00:35:21,246 --> 00:35:23,486
between apps in iOS has no


1063
00:35:23,486 --> 00:35:25,656
single equivalent on macOS.


1064
00:35:26,536 --> 00:35:28,486
For example, switching to


1065
00:35:28,486 --> 00:35:30,126
another app in iOS while


1066
00:35:30,126 --> 00:35:31,226
background audio is still


1067
00:35:31,226 --> 00:35:33,016
playing is like changing a


1068
00:35:33,016 --> 00:35:34,876
frontmost Mac app to a different


1069
00:35:34,876 --> 00:35:36,786
frontmost Mac app, because your


1070
00:35:36,786 --> 00:35:38,886
app continues to be perceived as


1071
00:35:38,886 --> 00:35:39,816
running by the user.


1072
00:35:41,296 --> 00:35:42,746
But when the user doesn't return


1073
00:35:42,746 --> 00:35:45,306
to your app on iOS and no audio


1074
00:35:45,306 --> 00:35:47,166
was playing, this might be more


1075
00:35:47,166 --> 00:35:49,116
similar to terminating a Mac on


1076
00:35:49,116 --> 00:35:51,166
macOS because your app is out of


1077
00:35:51,166 --> 00:35:52,976
sight and out of mind and exits


1078
00:35:52,976 --> 00:35:53,556
eventually.


1079
00:35:54,156 --> 00:35:59,376
On macOS, user initiated app


1080
00:35:59,406 --> 00:36:01,306
termination of your iPad app


1081
00:36:01,566 --> 00:36:03,366
gets the same state transitions


1082
00:36:03,586 --> 00:36:05,056
as switching to a different app


1083
00:36:05,246 --> 00:36:07,446
in iOS, for example by using the


1084
00:36:07,446 --> 00:36:08,176
task switcher.


1085
00:36:09,796 --> 00:36:11,286
The state change notifications


1086
00:36:11,286 --> 00:36:12,856
will take you from foreground


1087
00:36:12,856 --> 00:36:14,306
active through foreground


1088
00:36:14,306 --> 00:36:15,926
inactive to the background.


1089
00:36:17,276 --> 00:36:18,546
To the user, however, the app


1090
00:36:18,546 --> 00:36:20,466
will immediately appear as no


1091
00:36:20,466 --> 00:36:22,566
longer running, the app's


1092
00:36:22,566 --> 00:36:23,656
remaining windows are made


1093
00:36:23,656 --> 00:36:26,086
invisible, it is no longer in


1094
00:36:26,086 --> 00:36:27,416
control of the menu bar, there


1095
00:36:27,846 --> 00:36:29,396
will be no indicator light in


1096
00:36:29,396 --> 00:36:32,136
the dock, and your app is no


1097
00:36:32,136 --> 00:36:33,926
longer available in the macOS


1098
00:36:33,976 --> 00:36:35,556
command tab task switcher.


1099
00:36:36,146 --> 00:36:39,716
But behind the scenes, we give


1100
00:36:39,786 --> 00:36:41,096
background tasks a chance to


1101
00:36:41,096 --> 00:36:42,836
finish if they are created


1102
00:36:42,836 --> 00:36:44,396
through the usual API on


1103
00:36:44,396 --> 00:36:45,786
UIApplication that I've shown


1104
00:36:45,786 --> 00:36:46,316
here.


1105
00:36:46,596 --> 00:36:50,366
Just like in iOS, end your


1106
00:36:50,366 --> 00:36:52,206
background tasks quickly or risk


1107
00:36:52,206 --> 00:36:53,226
task expiration.


1108
00:36:54,636 --> 00:36:55,916
There is one exception to this


1109
00:36:55,916 --> 00:36:56,146
rule.


1110
00:36:57,036 --> 00:36:58,486
Background audio plist entries


1111
00:36:58,536 --> 00:36:59,156
are ignored.


1112
00:36:59,846 --> 00:37:01,346
The process will terminate in


1113
00:37:01,346 --> 00:37:02,546
spite of background audio


1114
00:37:02,546 --> 00:37:03,086
requests.


1115
00:37:03,846 --> 00:37:05,406
After all, to the user, the app


1116
00:37:05,406 --> 00:37:06,456
already looks terminated.


1117
00:37:07,626 --> 00:37:09,256
So your media frameworks will


1118
00:37:09,256 --> 00:37:10,606
pause your-- our media


1119
00:37:10,606 --> 00:37:11,836
frameworks will pause your


1120
00:37:11,836 --> 00:37:13,496
playback for you upon entering


1121
00:37:13,496 --> 00:37:14,266
the background state.


1122
00:37:15,496 --> 00:37:17,226
However, keep in mind that


1123
00:37:17,226 --> 00:37:18,746
background audio is not needed


1124
00:37:18,746 --> 00:37:19,486
on macOS.


1125
00:37:20,306 --> 00:37:21,476
Your app will remain foreground


1126
00:37:21,476 --> 00:37:23,136
active even when the user


1127
00:37:23,136 --> 00:37:24,886
switches to a different app.


1128
00:37:26,856 --> 00:37:29,306
Additionally, if the user tries


1129
00:37:29,306 --> 00:37:30,566
to launch the app while it is


1130
00:37:30,566 --> 00:37:32,406
still backgrounded, we simply


1131
00:37:32,406 --> 00:37:33,436
return your app to the


1132
00:37:33,436 --> 00:37:34,496
foreground active state.


1133
00:37:35,466 --> 00:37:37,086
This is similar to returning to


1134
00:37:37,086 --> 00:37:38,706
your app in the iOS task


1135
00:37:38,706 --> 00:37:39,126
switcher.


1136
00:37:40,086 --> 00:37:42,216
This sort of relaunch is only


1137
00:37:42,216 --> 00:37:43,836
possible while your app is still


1138
00:37:43,836 --> 00:37:46,346
processing background tasks, not


1139
00:37:46,386 --> 00:37:47,856
once the synchronous handling of


1140
00:37:47,856 --> 00:37:49,136
willTerminate has begun.


1141
00:37:50,116 --> 00:37:51,616
So try to minimize this phase


1142
00:37:51,836 --> 00:37:53,396
where your app ignores user


1143
00:37:53,396 --> 00:37:54,546
attempts to relaunch it.


1144
00:37:54,996 --> 00:37:58,776
Once the last background task


1145
00:37:58,776 --> 00:38:00,586
completes or expires, the


1146
00:38:00,586 --> 00:38:01,936
process exits without


1147
00:38:01,936 --> 00:38:02,456
suspension.


1148
00:38:03,866 --> 00:38:05,316
As mentioned before, you will


1149
00:38:05,316 --> 00:38:06,966
get the same delegate calls and


1150
00:38:06,966 --> 00:38:08,906
notifications as on iOS.


1151
00:38:10,036 --> 00:38:10,976
In thid case, that means you


1152
00:38:10,976 --> 00:38:12,876
will see willResignActive,


1153
00:38:13,326 --> 00:38:15,216
didEnterBackground, and


1154
00:38:15,216 --> 00:38:17,036
willTerminate because we will


1155
00:38:17,036 --> 00:38:18,646
exit the process rather than


1156
00:38:18,646 --> 00:38:21,026
just suspending it like on iOS.


1157
00:38:22,916 --> 00:38:24,596
So, that was iPad app


1158
00:38:24,596 --> 00:38:25,686
termination on Mac.


1159
00:38:27,056 --> 00:38:28,416
As I mentioned earlier, the


1160
00:38:28,416 --> 00:38:29,766
other way for your iPad app on


1161
00:38:29,766 --> 00:38:31,756
Mac to enter the background


1162
00:38:31,756 --> 00:38:33,476
state is when it is launched


1163
00:38:33,476 --> 00:38:34,766
directly into the background.


1164
00:38:36,056 --> 00:38:38,016
iOS has quite a few APIs that


1165
00:38:38,016 --> 00:38:40,106
allow you to opt into some form


1166
00:38:40,106 --> 00:38:41,536
of background launch for your


1167
00:38:42,396 --> 00:38:42,566
app.


1168
00:38:42,866 --> 00:38:43,826
To learn much more about this


1169
00:38:43,826 --> 00:38:45,416
topic, check out the session


1170
00:38:45,776 --> 00:38:47,226
Advances in App Background


1171
00:38:47,226 --> 00:38:48,936
Execution, also from this year.


1172
00:38:49,516 --> 00:38:53,166
The following subset of these


1173
00:38:53,166 --> 00:38:55,566
APIs is supported for your iPad


1174
00:38:56,436 --> 00:38:58,306
apps for Mac.


1175
00:38:58,306 --> 00:39:00,016
URL sessions configured for


1176
00:39:00,016 --> 00:39:03,556
background downloads, silent


1177
00:39:03,556 --> 00:39:05,356
remote user notifications with


1178
00:39:05,356 --> 00:39:07,226
the content available specified


1179
00:39:07,226 --> 00:39:08,426
in the APS dictionary.


1180
00:39:08,426 --> 00:39:10,496
You could use this, for example,


1181
00:39:10,496 --> 00:39:12,006
to update your app's contents


1182
00:39:12,276 --> 00:39:13,196
when a new content arrives


1183
00:39:13,196 --> 00:39:17,636
server-side, also when our user


1184
00:39:17,636 --> 00:39:18,986
invokes a notification action


1185
00:39:18,986 --> 00:39:20,346
that does not specify the


1186
00:39:20,346 --> 00:39:21,146
foreground option.


1187
00:39:21,766 --> 00:39:23,506
For example, they might like a


1188
00:39:23,506 --> 00:39:25,046
post thorugh a user notification


1189
00:39:25,636 --> 00:39:27,076
and we could background launch


1190
00:39:27,076 --> 00:39:28,586
your app to let the server know


1191
00:39:28,586 --> 00:39:29,046
about this.


1192
00:39:30,156 --> 00:39:32,506
And finally, we also support the


1193
00:39:32,506 --> 00:39:34,166
new BackgroundTasks framework


1194
00:39:34,656 --> 00:39:35,706
including the new


1195
00:39:35,706 --> 00:39:38,246
BGProcessingTask as well as


1196
00:39:38,546 --> 00:39:41,016
BGAppRefreshTask for traditional


1197
00:39:41,116 --> 00:39:42,366
background app refresh.


1198
00:39:43,416 --> 00:39:45,256
Note that for iPad apps for Mac,


1199
00:39:45,416 --> 00:39:47,036
the app refresh feature is only


1200
00:39:47,036 --> 00:39:48,636
supported through this new API.


1201
00:39:54,416 --> 00:39:55,706
The usual restrictions on


1202
00:39:55,706 --> 00:39:57,436
background runtime and process


1203
00:39:57,436 --> 00:39:59,766
priority apply same as on iOS.


1204
00:40:00,236 --> 00:40:01,576
So if your task takes too much


1205
00:40:01,576 --> 00:40:03,096
time, your app risks being


1206
00:40:03,096 --> 00:40:04,426
suspended or even killed.


1207
00:40:06,086 --> 00:40:07,456
If the user attempts to launch


1208
00:40:07,456 --> 00:40:08,756
the app while it is already


1209
00:40:08,756 --> 00:40:10,276
running in the background, we


1210
00:40:10,526 --> 00:40:11,956
will simply transition it to


1211
00:40:11,956 --> 00:40:13,966
foreground active similar to the


1212
00:40:13,966 --> 00:40:15,456
previously discussed relaunch


1213
00:40:15,906 --> 00:40:16,626
during termination.


1214
00:40:18,026 --> 00:40:19,896
For background launches as well,


1215
00:40:20,266 --> 00:40:21,676
all state transitions will match


1216
00:40:21,676 --> 00:40:22,536
those on iOS.


1217
00:40:23,546 --> 00:40:24,666
In this case, that means you


1218
00:40:24,666 --> 00:40:26,486
will only see didFinishLaunching


1219
00:40:26,856 --> 00:40:28,566
and whatever callback was


1220
00:40:28,566 --> 00:40:30,036
specific to the background


1221
00:40:30,036 --> 00:40:31,686
launch API that was used.


1222
00:40:32,156 --> 00:40:34,726
Only during the full launch by


1223
00:40:34,726 --> 00:40:36,476
the user will you additionally


1224
00:40:36,476 --> 00:40:37,316
see willEnterForeground and


1225
00:40:37,316 --> 00:40:37,976
didBecomeActive.


1226
00:40:41,976 --> 00:40:43,176
A word on app suspension.


1227
00:40:43,766 --> 00:40:45,586
iPad apps are rarely suspended


1228
00:40:45,586 --> 00:40:47,546
on macOS compared to iOS.


1229
00:40:48,576 --> 00:40:50,446
During regular termination, the


1230
00:40:50,716 --> 00:40:52,566
app will exit exclusively


1231
00:40:52,656 --> 00:40:53,506
without suspension.


1232
00:40:54,566 --> 00:40:55,676
And during app switching on


1233
00:40:55,676 --> 00:40:57,616
macOS, this does not cause


1234
00:40:57,616 --> 00:40:58,846
backgrounding or suspension.


1235
00:40:59,856 --> 00:41:01,876
But you will likely still see it


1236
00:41:01,876 --> 00:41:03,936
occur if an app is launched


1237
00:41:03,986 --> 00:41:05,216
directly into the background.


1238
00:41:06,886 --> 00:41:09,006
Now on iPad, your app may be


1239
00:41:09,006 --> 00:41:10,506
terminated when resources are


1240
00:41:10,506 --> 00:41:12,056
needed elsewhere especially if


1241
00:41:12,056 --> 00:41:12,976
it's already suspended.


1242
00:41:13,516 --> 00:41:15,826
But on macOS, if your iPad app


1243
00:41:15,826 --> 00:41:17,906
is suspended, it is always


1244
00:41:17,906 --> 00:41:20,206
terminated immediately even if


1245
00:41:20,206 --> 00:41:21,566
no memory pressure exists.


1246
00:41:23,196 --> 00:41:24,956
Speaking of memory, the Mac


1247
00:41:24,956 --> 00:41:27,056
memory model applies which means


1248
00:41:27,056 --> 00:41:28,506
there are no enforced memory


1249
00:41:28,506 --> 00:41:28,916
limits.


1250
00:41:29,576 --> 00:41:31,016
Your app won't risk being killed


1251
00:41:31,016 --> 00:41:31,976
while doing heavy lifting.


1252
00:41:32,586 --> 00:41:34,896
But this is a double-edged


1253
00:41:34,896 --> 00:41:35,266
sword.


1254
00:41:36,086 --> 00:41:37,436
Because your app runs longer,


1255
00:41:37,876 --> 00:41:40,096
user may notice degraded system


1256
00:41:40,096 --> 00:41:41,366
performance from leaks piling


1257
00:41:41,366 --> 00:41:42,006
up.


1258
00:41:42,726 --> 00:41:44,536
This is specially the case if it


1259
00:41:44,536 --> 00:41:46,196
causes VM swapping on hard disk


1260
00:41:46,236 --> 00:41:46,926
base systems.


1261
00:41:49,366 --> 00:41:51,096
So please, use the allocations


1262
00:41:51,126 --> 00:41:52,016
profiling template and


1263
00:41:52,016 --> 00:41:53,826
instruments to find and fix your


1264
00:41:53,826 --> 00:41:54,236
leaks.


1265
00:41:55,076 --> 00:41:56,206
This will also benefit your app


1266
00:41:56,206 --> 00:41:56,726
on iPad.


1267
00:41:59,516 --> 00:42:00,806
Now, that was a lot of


1268
00:42:00,806 --> 00:42:02,146
information, so let's recap.


1269
00:42:03,576 --> 00:42:05,856
On macOs, your iPad app will


1270
00:42:05,856 --> 00:42:07,416
spend most of its time in the


1271
00:42:07,416 --> 00:42:08,546
foreground active state.


1272
00:42:09,096 --> 00:42:11,746
App termination and background


1273
00:42:11,746 --> 00:42:13,696
launches do allow your app to


1274
00:42:13,696 --> 00:42:15,276
get into the foreground inactive


1275
00:42:15,346 --> 00:42:17,146
and background states though.


1276
00:42:17,896 --> 00:42:20,176
Don't expect audio playback to


1277
00:42:20,176 --> 00:42:21,846
continue while your app is


1278
00:42:21,846 --> 00:42:23,026
backgrounded even if you


1279
00:42:23,026 --> 00:42:23,926
requested it.


1280
00:42:25,036 --> 00:42:26,696
And finally, you can just


1281
00:42:26,696 --> 00:42:28,036
continue to respond to these


1282
00:42:28,036 --> 00:42:29,796
state changes the same way as


1283
00:42:29,796 --> 00:42:30,716
you do on iOS.


1284
00:42:31,286 --> 00:42:33,276
And now, I'm going to hand it


1285
00:42:33,276 --> 00:42:34,816
over to Chris who will talk to


1286
00:42:34,816 --> 00:42:36,436
you about distributing your iPad


1287
00:42:36,436 --> 00:42:37,206
app to the Mac.


1288
00:42:37,636 --> 00:42:37,976
Thank you.


1289
00:42:38,516 --> 00:42:43,726
[ Applause ]


1290
00:42:44,226 --> 00:42:44,966
>> Thank you, Nils.


1291
00:42:50,066 --> 00:42:51,746
You've been building iOS apps


1292
00:42:51,746 --> 00:42:53,336
for a while now.


1293
00:42:54,666 --> 00:42:56,296
You know how to distribute on


1294
00:42:56,296 --> 00:42:58,326
the App Store, how to use


1295
00:42:58,326 --> 00:43:00,906
TestFlight, how to distribute


1296
00:43:00,906 --> 00:43:02,386
yourself using development


1297
00:43:02,386 --> 00:43:04,576
signing, ad hoc or enterprise.


1298
00:43:05,676 --> 00:43:08,126
But now, you're going to be


1299
00:43:08,126 --> 00:43:10,196
building and selling a second


1300
00:43:10,196 --> 00:43:12,836
app on the Mac all from the same


1301
00:43:12,836 --> 00:43:13,496
code base.


1302
00:43:14,846 --> 00:43:15,876
How are you going to do that?


1303
00:43:15,876 --> 00:43:17,826
What will be different about the


1304
00:43:17,826 --> 00:43:18,196
Mac?


1305
00:43:19,366 --> 00:43:20,296
How will you ensure that your


1306
00:43:20,296 --> 00:43:21,596
customers have a seamless


1307
00:43:21,596 --> 00:43:23,596
experience using both apps?


1308
00:43:23,596 --> 00:43:25,186
That's what we're going to


1309
00:43:25,186 --> 00:43:25,466
cover.


1310
00:43:26,786 --> 00:43:27,846
Let's go back to the beginning.


1311
00:43:29,076 --> 00:43:30,566
You opened up the project editor


1312
00:43:30,566 --> 00:43:31,106
in Xcode.


1313
00:43:32,076 --> 00:43:33,196
You enabled the Mac support.


1314
00:43:34,016 --> 00:43:35,346
You've been working very hard.


1315
00:43:35,346 --> 00:43:36,526
You've got your app perfectly


1316
00:43:36,526 --> 00:43:38,596
tuned and you think to yourself,


1317
00:43:38,876 --> 00:43:40,106
gosh, I haven't had to worry


1318
00:43:40,106 --> 00:43:41,356
about code signing once.


1319
00:43:42,476 --> 00:43:43,096
Well, that's great.


1320
00:43:43,656 --> 00:43:45,436
But when you want to know more


1321
00:43:45,436 --> 00:43:46,766
about how signing is working,


1322
00:43:47,236 --> 00:43:48,896
you can head over to the Signing


1323
00:43:48,896 --> 00:43:50,016
and Capabilities tab.


1324
00:43:50,986 --> 00:43:52,306
There you can see there is a lot


1325
00:43:52,336 --> 00:43:54,036
going on under the hood to sign


1326
00:43:54,036 --> 00:43:55,356
your iOS and Mac app.


1327
00:43:56,206 --> 00:43:57,116
Let's take a closer look.


1328
00:43:58,086 --> 00:44:00,366
First off, if you enable


1329
00:44:00,366 --> 00:44:02,326
automatic signing, all of the


1330
00:44:02,326 --> 00:44:03,816
maintenance of code signing is


1331
00:44:03,816 --> 00:44:05,156
taken care of by Xcode.


1332
00:44:05,266 --> 00:44:06,296
It will make this transition


1333
00:44:06,296 --> 00:44:07,106
super easy.


1334
00:44:07,506 --> 00:44:08,816
I highly recommend using


1335
00:44:08,816 --> 00:44:10,136
automatic signing.


1336
00:44:11,606 --> 00:44:13,176
Now, using automatic signing,


1337
00:44:13,176 --> 00:44:15,166
Xcode will create a necessary


1338
00:44:15,166 --> 00:44:16,696
provisioning profile for the Mac


1339
00:44:17,216 --> 00:44:18,386
and one for iOS.


1340
00:44:19,436 --> 00:44:20,716
And we've modernized things a


1341
00:44:20,716 --> 00:44:20,956
bit.


1342
00:44:21,676 --> 00:44:22,996
Instead of using an iOs


1343
00:44:22,996 --> 00:44:24,156
certificate and a Mac


1344
00:44:24,156 --> 00:44:25,576
certificate, we're going to use


1345
00:44:25,576 --> 00:44:27,056
one unified Apple developer


1346
00:44:27,056 --> 00:44:27,336
certificate.


1347
00:44:27,336 --> 00:44:27,976
So, that's a nice improvement.


1348
00:44:28,516 --> 00:44:32,806
[ Applause ]


1349
00:44:33,306 --> 00:44:35,066
Now, when you add Mac support,


1350
00:44:35,836 --> 00:44:38,526
Xcode will use automatic signing


1351
00:44:38,526 --> 00:44:40,496
to register a reserved bundle


1352
00:44:40,496 --> 00:44:42,256
identifier for your app, for


1353
00:44:42,256 --> 00:44:44,796
your Mac app prefixed with UIKit


1354
00:44:44,796 --> 00:44:45,296
for Mac.


1355
00:44:45,836 --> 00:44:46,756
Now, this is important.


1356
00:44:47,246 --> 00:44:48,786
If you have been making use of


1357
00:44:48,786 --> 00:44:50,146
your bundle identifier in your


1358
00:44:50,146 --> 00:44:51,926
code or in your entitlements,


1359
00:44:52,196 --> 00:44:53,176
you need to think about how that


1360
00:44:53,176 --> 00:44:54,996
may affect both apps.


1361
00:44:56,416 --> 00:44:58,476
The entitlements file which you


1362
00:44:58,476 --> 00:44:59,906
have been using for your iOS app


1363
00:45:00,466 --> 00:45:01,776
is shared when signing for the


1364
00:45:01,776 --> 00:45:02,066
Mac.


1365
00:45:02,066 --> 00:45:02,956
So there's no issue there.


1366
00:45:03,516 --> 00:45:06,406
And when you enable Mac support,


1367
00:45:07,046 --> 00:45:08,436
Xcode will add those


1368
00:45:08,436 --> 00:45:09,916
capabilities that are required


1369
00:45:09,916 --> 00:45:12,206
on the Mac, Hardened Runtime and


1370
00:45:12,206 --> 00:45:13,116
App Sandbox.


1371
00:45:13,706 --> 00:45:14,836
So for instance, if you've


1372
00:45:14,876 --> 00:45:17,476
provided a usage description for


1373
00:45:17,476 --> 00:45:19,046
the camera in your info.plist,


1374
00:45:19,526 --> 00:45:20,646
Xcode will update your


1375
00:45:20,646 --> 00:45:22,026
entitlements file so that your


1376
00:45:22,066 --> 00:45:23,496
app can make use of the camera


1377
00:45:23,496 --> 00:45:26,006
on the Mac.


1378
00:45:26,206 --> 00:45:27,416
If you're using an iCloud


1379
00:45:27,416 --> 00:45:29,546
default container, that is based


1380
00:45:29,546 --> 00:45:30,716
on your bundle identifier.


1381
00:45:31,286 --> 00:45:33,406
So, Xcode will adjust your


1382
00:45:33,406 --> 00:45:35,026
entitlements file so that your


1383
00:45:35,026 --> 00:45:36,716
iOS app and your Mac app point


1384
00:45:36,716 --> 00:45:38,196
explicitly to your existing


1385
00:45:38,446 --> 00:45:38,926
container.


1386
00:45:39,456 --> 00:45:40,456
If you've been using the default


1387
00:45:40,456 --> 00:45:41,816
container API, you may continue


1388
00:45:41,816 --> 00:45:42,306
doing so.


1389
00:45:42,836 --> 00:45:46,456
Now, Xcode will migrate a lot


1390
00:45:46,456 --> 00:45:46,826
for you.


1391
00:45:47,076 --> 00:45:49,286
But if you want to share


1392
00:45:49,286 --> 00:45:50,926
functionality between your iOS


1393
00:45:50,926 --> 00:45:52,806
app and your Mac app, there may


1394
00:45:52,806 --> 00:45:54,076
be some manual steps that you


1395
00:45:54,076 --> 00:45:54,586
need to take.


1396
00:45:55,946 --> 00:45:57,776
If you're using the Keychain in


1397
00:45:57,776 --> 00:45:59,716
your app, you should add the


1398
00:45:59,716 --> 00:46:01,586
Keychain Sharing Capability in


1399
00:46:01,636 --> 00:46:02,056
Xcode.


1400
00:46:03,176 --> 00:46:04,226
iCloud Keychain is made


1401
00:46:04,226 --> 00:46:06,256
available by default on iOS.


1402
00:46:06,706 --> 00:46:07,796
But on the Mac, you need to


1403
00:46:07,796 --> 00:46:09,006
declare your intent to use it


1404
00:46:09,036 --> 00:46:09,926
through this capability.


1405
00:46:11,756 --> 00:46:12,906
If you're using push


1406
00:46:12,906 --> 00:46:14,746
notifications, continue sending


1407
00:46:14,746 --> 00:46:16,316
notifications to your iOS app.


1408
00:46:16,846 --> 00:46:17,946
Those notifications will be


1409
00:46:17,946 --> 00:46:20,566
received by your iOS and Mac


1410
00:46:21,226 --> 00:46:21,306
app.


1411
00:46:21,576 --> 00:46:21,926
All right.


1412
00:46:22,266 --> 00:46:23,306
That's what you need to know to


1413
00:46:23,306 --> 00:46:24,956
get your project set up properly


1414
00:46:24,956 --> 00:46:25,566
for development.


1415
00:46:27,176 --> 00:46:28,686
Now, when you're ready to share


1416
00:46:28,686 --> 00:46:30,536
your app with others, you begin


1417
00:46:30,536 --> 00:46:32,346
in Xcode by building an archive.


1418
00:46:33,196 --> 00:46:35,336
And on iOS, you use that archive


1419
00:46:35,336 --> 00:46:37,016
to export for the store as an


1420
00:46:37,266 --> 00:46:37,836
IPA.


1421
00:46:38,556 --> 00:46:39,676
But things are a bit different


1422
00:46:39,676 --> 00:46:40,126
on the Mac.


1423
00:46:41,156 --> 00:46:43,106
When Xcode uploads your app to


1424
00:46:43,106 --> 00:46:44,876
the App Store, it sends it as a


1425
00:46:44,876 --> 00:46:47,046
Mac package behind the scenes.


1426
00:46:48,256 --> 00:46:49,756
Now, uploading to the App Store


1427
00:46:49,756 --> 00:46:51,296
is very similar to how it is for


1428
00:46:51,406 --> 00:46:51,856
iOS.


1429
00:46:51,856 --> 00:46:52,466
Let me show you.


1430
00:46:53,766 --> 00:46:55,106
When you have your project open,


1431
00:46:55,346 --> 00:46:57,136
you can use the Product menu to


1432
00:46:57,136 --> 00:46:58,536
switch your Run Destination to


1433
00:46:58,536 --> 00:46:59,126
My Mac.


1434
00:46:59,916 --> 00:47:00,846
then you Archive.


1435
00:47:01,726 --> 00:47:03,256
The organizer will open up and


1436
00:47:03,256 --> 00:47:04,676
show you your brand-new Mac app


1437
00:47:04,676 --> 00:47:05,136
archive.


1438
00:47:06,086 --> 00:47:07,126
From there, you can click the


1439
00:47:07,126 --> 00:47:08,936
Distribute App button and follow


1440
00:47:08,936 --> 00:47:10,266
that same upload workflow that


1441
00:47:10,266 --> 00:47:10,746
you're used to.


1442
00:47:11,296 --> 00:47:13,646
Of course, you can do all of


1443
00:47:13,646 --> 00:47:14,616
this from the command line


1444
00:47:15,706 --> 00:47:17,746
including uploading from Xcode


1445
00:47:18,236 --> 00:47:18,366
build.


1446
00:47:19,016 --> 00:47:20,666
For more on how to automate all


1447
00:47:20,666 --> 00:47:22,346
of this, I recommend checking


1448
00:47:22,346 --> 00:47:24,036
out the session from 2017,


1449
00:47:24,036 --> 00:47:25,966
What's New in Signing for Xcode


1450
00:47:25,966 --> 00:47:26,766
and Xcode Server.


1451
00:47:30,536 --> 00:47:32,006
OK. So you've built your app,


1452
00:47:32,676 --> 00:47:34,496
but there are some steps to take


1453
00:47:34,536 --> 00:47:35,716
before sending your app to the


1454
00:47:35,716 --> 00:47:36,276
App Store.


1455
00:47:37,166 --> 00:47:39,816
First, this is a new Mac app, so


1456
00:47:39,816 --> 00:47:41,736
you need to create a new app


1457
00:47:41,736 --> 00:47:43,326
record in App Store Connect just


1458
00:47:43,326 --> 00:47:45,116
like you did for iOS, then


1459
00:47:45,116 --> 00:47:46,446
before and now once more.


1460
00:47:47,946 --> 00:47:49,656
Now when you do this, you're


1461
00:47:49,656 --> 00:47:51,386
going to associate that App


1462
00:47:51,386 --> 00:47:52,996
Record with the app identifier


1463
00:47:52,996 --> 00:47:54,486
that Xcode synthesized for you,


1464
00:47:54,686 --> 00:47:56,606
the one prefix with UIKit for


1465
00:47:57,316 --> 00:47:57,426
Mac.


1466
00:47:58,166 --> 00:47:59,926
And whenever you upload to the


1467
00:47:59,926 --> 00:48:00,836
App Store, you should always


1468
00:48:00,836 --> 00:48:01,866
increment your build number.


1469
00:48:01,866 --> 00:48:03,666
This is a little different from


1470
00:48:03,786 --> 00:48:04,276
iOS.


1471
00:48:04,966 --> 00:48:06,776
macOS uses the build number to


1472
00:48:06,776 --> 00:48:07,796
determine the order of your


1473
00:48:07,796 --> 00:48:08,326
releases.


1474
00:48:09,666 --> 00:48:11,546
And if you've done all that, you


1475
00:48:11,546 --> 00:48:13,686
can upload from Xcode and


1476
00:48:13,686 --> 00:48:15,646
release your app on the App


1477
00:48:17,916 --> 00:48:18,046
Store.


1478
00:48:18,266 --> 00:48:20,476
Now, a cool thing about the Mac


1479
00:48:20,566 --> 00:48:22,266
is that you have more control


1480
00:48:22,266 --> 00:48:23,646
over how you install apps.


1481
00:48:24,696 --> 00:48:26,456
When a customer downloads your


1482
00:48:26,456 --> 00:48:28,266
app from the App Store, it is


1483
00:48:28,316 --> 00:48:29,796
perfectly possible to copy that


1484
00:48:29,796 --> 00:48:31,436
app to another Mac and run it,


1485
00:48:32,696 --> 00:48:33,946
which brings up a few things.


1486
00:48:35,076 --> 00:48:36,576
App Thinning isn't used on


1487
00:48:36,576 --> 00:48:37,276
macOS.


1488
00:48:38,626 --> 00:48:39,786
Your app will always contain the


1489
00:48:39,786 --> 00:48:40,976
complete set of resources


1490
00:48:40,976 --> 00:48:43,046
necessary to run on any Mac.


1491
00:48:43,846 --> 00:48:45,276
And because your app can be


1492
00:48:45,276 --> 00:48:46,596
dragged and dropped to any Mac,


1493
00:48:46,986 --> 00:48:48,296
it is up to you to add receipt


1494
00:48:48,296 --> 00:48:49,676
validation logic to your app.


1495
00:48:50,446 --> 00:48:51,666
So whenever your app launches,


1496
00:48:51,666 --> 00:48:52,786
it should be checking that it


1497
00:48:52,786 --> 00:48:54,646
was legitimately purchased and


1498
00:48:54,646 --> 00:48:56,096
is allowed to run.


1499
00:48:56,736 --> 00:48:58,416
For more on how to add receipt


1500
00:48:58,416 --> 00:49:00,316
validation to your app, I


1501
00:49:00,316 --> 00:49:01,346
recommend checking out the


1502
00:49:01,346 --> 00:49:02,966
Advanced StoreKit talk from


1503
00:49:02,966 --> 00:49:04,526
2017.


1504
00:49:05,936 --> 00:49:08,106
The good news is that once your


1505
00:49:08,106 --> 00:49:09,966
app is on the App Store, you


1506
00:49:09,966 --> 00:49:11,196
have access to the same great


1507
00:49:11,226 --> 00:49:13,666
tools, like App Store Connect,


1508
00:49:13,666 --> 00:49:14,846
App Analytics to track your


1509
00:49:14,846 --> 00:49:17,116
sales and marketing efforts, and


1510
00:49:17,116 --> 00:49:18,916
the Xcode Crashes Organizer to


1511
00:49:18,916 --> 00:49:20,316
triage any crashes that may be


1512
00:49:20,316 --> 00:49:21,436
affecting your customers.


1513
00:49:21,936 --> 00:49:23,846
Your app can use the same


1514
00:49:23,846 --> 00:49:25,746
StoreKit and GameKit APIs.


1515
00:49:26,696 --> 00:49:27,606
Now, if you're using those


1516
00:49:27,606 --> 00:49:29,396
API's, there is some additional


1517
00:49:29,396 --> 00:49:30,666
set up required on App Store


1518
00:49:30,666 --> 00:49:31,016
Connect.


1519
00:49:31,926 --> 00:49:33,916
If you're using In-App Purchases


1520
00:49:34,266 --> 00:49:36,276
or subscriptions, you will need


1521
00:49:36,276 --> 00:49:37,936
to recreate those in App Store


1522
00:49:37,936 --> 00:49:39,356
Connect for your new Mac app.


1523
00:49:40,366 --> 00:49:41,296
And if you want to share the


1524
00:49:41,296 --> 00:49:42,856
same purchase history between


1525
00:49:42,856 --> 00:49:44,536
both apps, that will require


1526
00:49:44,536 --> 00:49:45,566
that you maintain your own


1527
00:49:45,566 --> 00:49:46,916
server-side synching solution.


1528
00:49:47,476 --> 00:49:50,666
If you have a game, you should


1529
00:49:50,666 --> 00:49:52,286
begin using Game Center Groups


1530
00:49:52,416 --> 00:49:53,726
to share your leaderboard and


1531
00:49:53,726 --> 00:49:54,946
achievement data between both


1532
00:49:54,946 --> 00:49:55,306
apps.


1533
00:49:56,226 --> 00:49:57,796
And if you have a multiplayer


1534
00:49:57,796 --> 00:49:59,376
game, you should update the


1535
00:49:59,376 --> 00:50:00,666
Multiplayer Compatibility


1536
00:50:00,666 --> 00:50:02,236
section in App Store Connect


1537
00:50:02,696 --> 00:50:03,496
that will ensure that your


1538
00:50:03,496 --> 00:50:04,496
players are matched with the


1539
00:50:04,496 --> 00:50:05,866
appropriate versions of your app


1540
00:50:06,216 --> 00:50:06,956
across iOS and Mac.


1541
00:50:09,976 --> 00:50:10,276
All right.


1542
00:50:10,276 --> 00:50:11,346
So you can begin playing with


1543
00:50:11,346 --> 00:50:12,996
all of this now, but a heads-up.


1544
00:50:13,336 --> 00:50:15,406
For the time being, the App


1545
00:50:15,406 --> 00:50:16,746
Store will not be accepting


1546
00:50:16,856 --> 00:50:18,746
uploads with the prefix UIKit


1547
00:50:18,746 --> 00:50:19,206
for Mac.


1548
00:50:19,526 --> 00:50:20,906
You can still create an App


1549
00:50:20,906 --> 00:50:22,776
record and experiment with those


1550
00:50:22,776 --> 00:50:24,386
StoreKit and GameKit APIs in the


1551
00:50:24,386 --> 00:50:24,916
meantime.


1552
00:50:25,986 --> 00:50:27,456
Over the summer, we will begin


1553
00:50:27,456 --> 00:50:28,966
accepting uploads and this would


1554
00:50:28,966 --> 00:50:30,046
be a good time to practice


1555
00:50:30,046 --> 00:50:30,796
uploading your app.


1556
00:50:31,806 --> 00:50:33,676
And finally, when Xcode 11 is


1557
00:50:33,676 --> 00:50:35,066
released, you can begin


1558
00:50:35,066 --> 00:50:35,876
submitting for app review.


1559
00:50:38,566 --> 00:50:40,176
And that is distribution on the


1560
00:50:40,176 --> 00:50:40,556
App Store.


1561
00:50:42,516 --> 00:50:46,526
[Applause]


1562
00:50:47,026 --> 00:50:48,666
Now, there are other options if


1563
00:50:48,666 --> 00:50:49,996
you'd like to distribute outside


1564
00:50:49,996 --> 00:50:50,706
of the App Store.


1565
00:50:51,706 --> 00:50:53,206
You can serve you app directly


1566
00:50:53,256 --> 00:50:56,336
to your customers if you sign


1567
00:50:56,336 --> 00:50:57,696
your app with a developer ID


1568
00:50:57,696 --> 00:50:59,686
certificate and get it notarized


1569
00:50:59,686 --> 00:51:00,126
by Apple.


1570
00:51:01,806 --> 00:51:03,076
Notarized apps are a great


1571
00:51:03,076 --> 00:51:04,316
evolution and security for the


1572
00:51:04,316 --> 00:51:04,666
Mac.


1573
00:51:05,356 --> 00:51:06,786
We can all take comfort that the


1574
00:51:06,786 --> 00:51:08,476
apps that we download and run on


1575
00:51:08,476 --> 00:51:10,186
our Mac have been signed by the


1576
00:51:10,186 --> 00:51:12,116
developer that wrote it and that


1577
00:51:12,116 --> 00:51:13,376
signature has been vetted by


1578
00:51:13,376 --> 00:51:13,756
Apple.


1579
00:51:14,996 --> 00:51:16,416
There's no app review for these


1580
00:51:16,416 --> 00:51:17,906
apps, but we enforce good


1581
00:51:17,906 --> 00:51:19,176
policies like requiring that


1582
00:51:19,176 --> 00:51:20,506
Hardened Runtime be turned on in


1583
00:51:20,506 --> 00:51:21,406
your app.


1584
00:51:22,786 --> 00:51:24,146
And there's great command line


1585
00:51:24,146 --> 00:51:25,296
tool support to sign and


1586
00:51:25,296 --> 00:51:26,646
notarize your app.


1587
00:51:27,506 --> 00:51:28,856
And sharing a notarized app with


1588
00:51:28,856 --> 00:51:30,086
your team is a great alternative


1589
00:51:30,086 --> 00:51:31,136
to TestFlight which is not


1590
00:51:31,136 --> 00:51:32,026
available on the Mac.


1591
00:51:32,896 --> 00:51:34,666
One caveat though, signing this


1592
00:51:34,666 --> 00:51:35,866
way doesn't allow you to use


1593
00:51:35,866 --> 00:51:37,316
those App Store based features


1594
00:51:37,316 --> 00:51:38,696
like GameKit and StoreKit.


1595
00:51:40,936 --> 00:51:43,546
Now, signing a notarized app is


1596
00:51:43,546 --> 00:51:44,756
not as scary as it sounds.


1597
00:51:44,756 --> 00:51:45,716
You can do all of this from


1598
00:51:45,716 --> 00:51:46,066
Xcode.


1599
00:51:46,776 --> 00:51:48,716
The first step is uploading your


1600
00:51:48,716 --> 00:51:49,366
app to Apple.


1601
00:51:50,406 --> 00:51:53,186
In this process, Xcode will sign


1602
00:51:53,186 --> 00:51:54,366
your app with the developer ID


1603
00:51:54,366 --> 00:51:56,206
certificate and Apple will scan


1604
00:51:56,206 --> 00:51:56,816
it for malware.


1605
00:51:58,166 --> 00:51:59,726
After a few minutes, Xcode will


1606
00:51:59,726 --> 00:52:01,896
receive a notification, notarize


1607
00:52:01,896 --> 00:52:03,316
the app, at which point you can


1608
00:52:03,316 --> 00:52:05,476
export it, you can zip it up or


1609
00:52:05,476 --> 00:52:07,316
put it in a disk image and make


1610
00:52:07,316 --> 00:52:07,976
it available on your server.


1611
00:52:11,686 --> 00:52:12,706
If you want to know more about


1612
00:52:12,706 --> 00:52:14,046
the security model or how to use


1613
00:52:14,046 --> 00:52:15,476
it in your app, I recommend


1614
00:52:15,476 --> 00:52:16,426
checking out the session from


1615
00:52:16,426 --> 00:52:17,556
this year, All About


1616
00:52:17,556 --> 00:52:17,976
Notarization.


1617
00:52:20,636 --> 00:52:20,956
All right.


1618
00:52:21,096 --> 00:52:22,106
Those are your options for


1619
00:52:22,106 --> 00:52:24,236
distribution to your customers.


1620
00:52:25,416 --> 00:52:26,526
There is a third distribution


1621
00:52:26,526 --> 00:52:28,286
option worth mentioning and that


1622
00:52:28,286 --> 00:52:29,516
is development signing.


1623
00:52:30,986 --> 00:52:32,216
Now, development signing is just


1624
00:52:32,216 --> 00:52:33,296
the same as you're used to on


1625
00:52:33,436 --> 00:52:33,916
iOS.


1626
00:52:34,426 --> 00:52:36,176
It is great for sharing a build


1627
00:52:36,176 --> 00:52:37,246
with your team to test.


1628
00:52:37,856 --> 00:52:39,406
And remember, when you share


1629
00:52:39,576 --> 00:52:41,456
with a new Mac, remember to


1630
00:52:41,456 --> 00:52:42,836
register any new devices on the


1631
00:52:42,836 --> 00:52:43,526
developer portal.


1632
00:52:44,036 --> 00:52:46,906
And development signing is what


1633
00:52:46,906 --> 00:52:48,496
you should use to test those


1634
00:52:48,496 --> 00:52:50,116
StoreKit and GameKit APIs.


1635
00:52:50,636 --> 00:52:51,506
You can-- When you use


1636
00:52:51,506 --> 00:52:53,166
development signing, you can use


1637
00:52:53,166 --> 00:52:55,286
Sandbox test accounts instead of


1638
00:52:55,286 --> 00:52:56,266
spending your own money


1639
00:52:56,266 --> 00:52:57,696
exercising receipt validation.


1640
00:53:00,556 --> 00:53:01,556
And those are your options for


1641
00:53:01,556 --> 00:53:05,486
distribution on the Mac.


1642
00:53:05,686 --> 00:53:08,736
Now, to be sure, this has all


1643
00:53:08,736 --> 00:53:09,596
been a lot to take in.


1644
00:53:10,776 --> 00:53:13,246
But consider if you will how far


1645
00:53:13,246 --> 00:53:13,656
we've come.


1646
00:53:14,926 --> 00:53:15,666
Maybe you're like me.


1647
00:53:16,816 --> 00:53:17,846
You began as an iPhone


1648
00:53:17,846 --> 00:53:18,316
developer.


1649
00:53:19,546 --> 00:53:21,076
You mastered table views and


1650
00:53:21,076 --> 00:53:23,566
screen rotation, then you


1651
00:53:23,566 --> 00:53:24,746
graduated to something a bit


1652
00:53:24,816 --> 00:53:25,086
bigger.


1653
00:53:26,076 --> 00:53:28,036
You sought opportunity on iPad.


1654
00:53:29,366 --> 00:53:30,736
You challenged yourself with a


1655
00:53:30,736 --> 00:53:32,486
new form factor adding


1656
00:53:32,486 --> 00:53:35,766
multitasking and drag and drop.


1657
00:53:35,956 --> 00:53:37,486
Your next adventure will be the


1658
00:53:37,486 --> 00:53:37,856
Mac.


1659
00:53:38,876 --> 00:53:40,266
You'll conquer window resizing


1660
00:53:40,266 --> 00:53:40,916
and menu bars.


1661
00:53:42,176 --> 00:53:43,386
I am delighted to see what you


1662
00:53:43,386 --> 00:53:44,136
bring to the Mac.


1663
00:53:44,756 --> 00:53:46,146
We all stand to share greatly in


1664
00:53:46,146 --> 00:53:46,716
its growth.


1665
00:53:47,606 --> 00:53:48,836
Now, go check that checkbox.


1666
00:53:50,106 --> 00:53:50,976
Please, join us in the labs.


1667
00:53:51,016 --> 00:53:52,326
[Applause]


1668
00:53:52,326 --> 00:53:53,196
Please watch the related


1669
00:53:53,196 --> 00:53:53,616
sessions.


1670
00:53:54,106 --> 00:53:55,366
Please, have a fantastic WWDC.


1671
00:53:55,366 --> 00:53:55,796
Thank you.


1672
00:53:56,516 --> 00:54:00,500
[ Applause ]

