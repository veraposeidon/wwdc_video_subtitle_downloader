1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:10,516 --> 00:00:14,396
[ Applause ]


3
00:00:14,896 --> 00:00:15,806
>> Hello everybody.


4
00:00:16,806 --> 00:00:19,816
This is modernizing your UI for


5
00:00:19,816 --> 00:00:20,796
iOS 13.


6
00:00:22,126 --> 00:00:23,046
I'm David Duncan.


7
00:00:23,666 --> 00:00:25,006
I'll be joined on stage shortly


8
00:00:25,006 --> 00:00:27,486
by my colleagues Russell, Kyle,


9
00:00:28,786 --> 00:00:30,496
James, and Mohammed.


10
00:00:32,026 --> 00:00:34,306
In this section, we're going to


11
00:00:34,306 --> 00:00:35,566
talk about six things.


12
00:00:36,446 --> 00:00:38,076
Preparing your applications for


13
00:00:38,116 --> 00:00:38,736
Flexible UI.


14
00:00:40,156 --> 00:00:41,736
Improvements that we've made the


15
00:00:41,736 --> 00:00:43,166
appearance of Bars and


16
00:00:43,166 --> 00:00:46,006
Presentations, new Features


17
00:00:46,006 --> 00:00:47,466
available to your applications


18
00:00:47,816 --> 00:00:50,806
for searching, and new Gestures


19
00:00:50,806 --> 00:00:53,026
that you can adopt to make your


20
00:00:53,026 --> 00:00:55,936
apps more productive and to take


21
00:00:55,936 --> 00:00:57,036
care of cases that you haven't


22
00:00:57,036 --> 00:00:58,456
been able to do before.


23
00:00:59,306 --> 00:01:00,446
And finally, we're going to go


24
00:01:00,446 --> 00:01:02,176
over those new contextual menu


25
00:01:02,176 --> 00:01:03,506
APIs that were hinted at earlier


26
00:01:03,506 --> 00:01:03,936
this week.


27
00:01:04,446 --> 00:01:07,116
And so with this, let's talk


28
00:01:07,116 --> 00:01:10,636
about Flexible UI.


29
00:01:11,006 --> 00:01:13,146
So, the first step to being


30
00:01:13,196 --> 00:01:15,656
flexible is what your users


31
00:01:15,656 --> 00:01:17,356
first see when they launch your


32
00:01:17,356 --> 00:01:17,956
application.


33
00:01:19,236 --> 00:01:20,246
Storyboards have been the


34
00:01:20,246 --> 00:01:22,176
preferred way to specify your


35
00:01:22,176 --> 00:01:24,196
Launch UI since iOS 8.


36
00:01:25,516 --> 00:01:26,466
But there's also been another


37
00:01:26,466 --> 00:01:27,336
alternative that we've been


38
00:01:27,336 --> 00:01:28,566
supporting since the beginning


39
00:01:28,566 --> 00:01:31,416
of iOS, and that's Launch


40
00:01:31,416 --> 00:01:31,856
Images.


41
00:01:32,786 --> 00:01:34,316
Launch Images require you to


42
00:01:34,316 --> 00:01:35,746
specify an image for every


43
00:01:35,746 --> 00:01:37,586
screen size you support and


44
00:01:37,586 --> 00:01:39,286
revise whenever we introduce new


45
00:01:39,286 --> 00:01:40,056
screen sizes.


46
00:01:41,176 --> 00:01:42,366
And that's not very flexible.


47
00:01:43,546 --> 00:01:45,996
And so, this spring, April 2020,


48
00:01:46,516 --> 00:01:48,926
applications that linked iOS 13


49
00:01:49,036 --> 00:01:51,456
SDK must provide a Launch


50
00:01:51,456 --> 00:01:52,726
Storyboard in order to be


51
00:01:52,726 --> 00:01:53,666
accepted at the app store.


52
00:01:54,146 --> 00:01:55,416
You will no longer be able to


53
00:01:55,596 --> 00:01:57,326
submit with only Launch images.


54
00:01:58,246 --> 00:01:59,316
So, if you haven't adopted


55
00:01:59,316 --> 00:02:01,076
Launch Storyboards yet, now is a


56
00:02:01,116 --> 00:02:03,496
fantastic time to do so, and


57
00:02:03,496 --> 00:02:05,156
that leads on to the next change


58
00:02:05,206 --> 00:02:06,226
that you may have also already


59
00:02:06,226 --> 00:02:08,906
heard of, which is that in the


60
00:02:08,976 --> 00:02:11,306
past if we introduce new


61
00:02:11,306 --> 00:02:12,866
hardware with a new screen size,


62
00:02:13,306 --> 00:02:14,436
your apps were letterboxed.


63
00:02:15,266 --> 00:02:16,956
Well, we're not going to be


64
00:02:16,956 --> 00:02:17,766
doing that anymore either.


65
00:02:18,556 --> 00:02:20,076
So, if you application is built


66
00:02:20,076 --> 00:02:23,016
against the iOS 13 SDK, then it


67
00:02:23,016 --> 00:02:24,956
will always be displayed at the


68
00:02:24,956 --> 00:02:26,806
native full-screen resolution of


69
00:02:26,806 --> 00:02:27,186
the screen.


70
00:02:28,156 --> 00:02:29,296
So we expect that any


71
00:02:29,296 --> 00:02:30,976
application built against iOS13


72
00:02:31,096 --> 00:02:33,866
will use the appropriate APIs to


73
00:02:33,866 --> 00:02:35,846
ensure correct layout at any


74
00:02:35,846 --> 00:02:36,196
size.


75
00:02:37,446 --> 00:02:39,656
Now, for those of you building


76
00:02:39,656 --> 00:02:42,206
iPad applications, this also


77
00:02:42,206 --> 00:02:43,646
applies to split screen


78
00:02:43,646 --> 00:02:44,416
multitasking.


79
00:02:45,446 --> 00:02:48,096
So, we are going to expect that


80
00:02:48,096 --> 00:02:49,696
most applications, unless you


81
00:02:49,696 --> 00:02:50,606
need to provide a truly


82
00:02:50,606 --> 00:02:52,896
immersive experience, are going


83
00:02:52,896 --> 00:02:53,916
to support split screen


84
00:02:53,916 --> 00:02:55,946
multitasking, so that you can


85
00:02:55,946 --> 00:02:58,056
have your app in any size next


86
00:02:58,056 --> 00:02:59,966
to any other application that


87
00:02:59,966 --> 00:03:01,246
might be running that the user


88
00:03:01,246 --> 00:03:02,036
has chosen.


89
00:03:03,206 --> 00:03:06,266
Now, if you're not certain if


90
00:03:06,266 --> 00:03:07,186
you can support all these


91
00:03:07,186 --> 00:03:08,696
resizing modes and everything


92
00:03:08,696 --> 00:03:10,136
else, another thing you might


93
00:03:10,136 --> 00:03:11,406
want to try, especially if you


94
00:03:11,406 --> 00:03:12,746
have an iPad app, is just


95
00:03:12,746 --> 00:03:14,026
building for the Mac, with new


96
00:03:14,026 --> 00:03:15,716
supports that we're adding in


97
00:03:15,826 --> 00:03:16,986
macOS Catalina.


98
00:03:17,536 --> 00:03:18,596
And you can just do that at your


99
00:03:18,596 --> 00:03:19,626
desk to make sure that you


100
00:03:19,626 --> 00:03:21,606
resize nicely for any size.


101
00:03:22,526 --> 00:03:25,556
So, to sum up all that before,


102
00:03:26,296 --> 00:03:27,856
adopt Launch Storyboards.


103
00:03:28,026 --> 00:03:29,626
They're going to be the way to


104
00:03:29,626 --> 00:03:31,856
get that Launch UI when the user


105
00:03:31,966 --> 00:03:33,316
first launches your application.


106
00:03:34,156 --> 00:03:35,746
Make sure your application


107
00:03:35,746 --> 00:03:37,726
properly lays out to support any


108
00:03:37,726 --> 00:03:40,346
size, whether it is the smallest


109
00:03:40,346 --> 00:03:42,536
iPhone to the largest iPad.


110
00:03:43,036 --> 00:03:44,686
And finally, make sure that your


111
00:03:44,686 --> 00:03:46,606
iPad applications also support


112
00:03:46,696 --> 00:03:47,936
Split Screen Multitasking.


113
00:03:48,446 --> 00:03:49,566
Because all of this is going to


114
00:03:49,566 --> 00:03:51,636
be required by April 2020.


115
00:03:52,886 --> 00:03:54,886
And so with that, let's


116
00:03:54,886 --> 00:03:56,716
transition to Bars.


117
00:03:58,736 --> 00:04:03,846
So, if you look at your phone


118
00:04:03,846 --> 00:04:04,886
after installing the beta,


119
00:04:06,056 --> 00:04:08,126
you'll see this is how


120
00:04:08,316 --> 00:04:08,906
nav bars now appears.


121
00:04:09,436 --> 00:04:10,566
When you scroll all the way up


122
00:04:10,566 --> 00:04:12,206
to the top, we drop out the


123
00:04:12,206 --> 00:04:14,196
background, and when we scroll


124
00:04:14,196 --> 00:04:15,556
something underneath, we bring


125
00:04:15,556 --> 00:04:16,836
it back in smoothly and


126
00:04:17,156 --> 00:04:17,946
transparently.


127
00:04:19,505 --> 00:04:22,776
Similarly, on iPad, if you have


128
00:04:22,776 --> 00:04:24,866
split view controller, we do


129
00:04:24,866 --> 00:04:26,256
this independently for both


130
00:04:26,256 --> 00:04:27,906
sides regardless of if the


131
00:04:27,906 --> 00:04:30,226
details support large titles or


132
00:04:30,226 --> 00:04:32,926
not, and they independently


133
00:04:32,926 --> 00:04:33,406
respond.


134
00:04:33,476 --> 00:04:35,016
So, one background comes in or


135
00:04:35,016 --> 00:04:35,956
the other, depending on the


136
00:04:35,956 --> 00:04:36,656
scroll position.


137
00:04:38,256 --> 00:04:40,396
Now, you might be asking, how do


138
00:04:40,396 --> 00:04:41,106
I adopt this?


139
00:04:41,106 --> 00:04:42,076
How do I make sure this works


140
00:04:42,226 --> 00:04:43,686
cleanly in my application?


141
00:04:44,746 --> 00:04:46,236
Well, the adoption story is


142
00:04:46,236 --> 00:04:46,876
easy.


143
00:04:47,126 --> 00:04:49,576
You link against iOS 13, you get


144
00:04:49,576 --> 00:04:50,106
this for free.


145
00:04:51,586 --> 00:04:52,796
But how to make that work


146
00:04:53,016 --> 00:04:54,916
beautifully in your application


147
00:04:54,916 --> 00:04:56,576
might require a little work, and


148
00:04:56,576 --> 00:04:57,916
that's where we have new


149
00:04:57,916 --> 00:04:59,506
appearance customization APIs to


150
00:04:59,976 --> 00:05:00,816
help you do this.


151
00:05:02,086 --> 00:05:03,416
So, let's take a look at what it


152
00:05:03,416 --> 00:05:04,546
might look like to customize a


153
00:05:04,546 --> 00:05:06,146
navigation bar in the new


154
00:05:06,146 --> 00:05:08,566
appearance API.


155
00:05:08,806 --> 00:05:11,076
So, first thing we're going to


156
00:05:11,176 --> 00:05:13,846
do is create the object that


157
00:05:13,846 --> 00:05:14,676
actually represents the


158
00:05:14,676 --> 00:05:15,156
appearance,


159
00:05:15,786 --> 00:05:17,276
UINavigationBarAppearance .


160
00:05:17,536 --> 00:05:19,266
This is a subclass of


161
00:05:19,266 --> 00:05:21,436
UIBarAppearance, and it


162
00:05:21,436 --> 00:05:22,376
encapsulates all the


163
00:05:22,376 --> 00:05:23,556
customization options for


164
00:05:23,556 --> 00:05:24,326
UINavigationBar.


165
00:05:25,156 --> 00:05:26,166
In this case, we're going to


166
00:05:26,166 --> 00:05:27,376
actually make the navigation bar


167
00:05:27,376 --> 00:05:29,576
use an opaque color, and so


168
00:05:29,576 --> 00:05:30,716
we're going to use the default


169
00:05:30,716 --> 00:05:32,006
values provided by


170
00:05:32,006 --> 00:05:33,636
configureWithOpaqueBackground.


171
00:05:33,706 --> 00:05:35,716
That will make your navigation


172
00:05:35,716 --> 00:05:37,576
bar's background conform to


173
00:05:37,626 --> 00:05:38,596
light and dark mode with an


174
00:05:38,596 --> 00:05:40,036
appropriate opaque color.


175
00:05:41,556 --> 00:05:43,836
Now, in this particular case, we


176
00:05:43,836 --> 00:05:45,166
also wanted to change the label


177
00:05:45,166 --> 00:05:45,516
color.


178
00:05:45,966 --> 00:05:47,806
And so, we can set


179
00:05:47,806 --> 00:05:48,976
titleTextAttributes and


180
00:05:48,976 --> 00:05:50,916
largeTitleTextAttributes, and


181
00:05:50,916 --> 00:05:52,686
we'll just give them a custom


182
00:05:52,686 --> 00:05:54,606
color that we'll use, another


183
00:05:54,606 --> 00:05:55,936
dynamic color, just so that we


184
00:05:55,936 --> 00:05:57,126
work great in light and dark


185
00:05:57,186 --> 00:05:57,506
modes.


186
00:05:58,866 --> 00:06:00,676
And finally, we will attach the


187
00:06:00,806 --> 00:06:02,156
navigation bar's standard


188
00:06:02,156 --> 00:06:02,866
appearance.


189
00:06:03,656 --> 00:06:04,726
So, what is that


190
00:06:04,726 --> 00:06:05,786
standardAppearance?


191
00:06:06,426 --> 00:06:08,166
Well, let's take a look.


192
00:06:09,516 --> 00:06:11,636
The navigation bar, when it's in


193
00:06:11,636 --> 00:06:12,906
its size without a large title


194
00:06:13,176 --> 00:06:14,946
is in the standard size, and


195
00:06:14,946 --> 00:06:16,036
that's what standardAppearance


196
00:06:16,036 --> 00:06:16,616
represents.


197
00:06:17,576 --> 00:06:18,766
In addition, if you don't


198
00:06:18,766 --> 00:06:20,126
specify any other appearance


199
00:06:20,126 --> 00:06:22,386
configuration, we'll use that as


200
00:06:22,386 --> 00:06:24,296
the basis to form defaults for


201
00:06:24,296 --> 00:06:25,846
the other two, which I'll talk


202
00:06:25,846 --> 00:06:29,336
about in a moment.


203
00:06:29,466 --> 00:06:31,226
So, if you use a smaller iPhone


204
00:06:31,226 --> 00:06:32,596
in Landscape, you get the


205
00:06:32,596 --> 00:06:34,716
compactAppearance, and that's


206
00:06:34,716 --> 00:06:36,786
what that represents, quantities


207
00:06:36,786 --> 00:06:37,136
for that.


208
00:06:37,136 --> 00:06:40,736
And we saw earlier that in iOS


209
00:06:40,796 --> 00:06:43,396
13 the navigation bar dropped


210
00:06:43,426 --> 00:06:44,956
its background to transparent


211
00:06:44,956 --> 00:06:46,556
when you pull down at the top of


212
00:06:46,556 --> 00:06:47,066
a scroll view.


213
00:06:47,966 --> 00:06:49,036
And so that is the


214
00:06:49,036 --> 00:06:50,436
scrollEdgeAppearance.


215
00:06:51,076 --> 00:06:52,646
Whenever a navigation bar is


216
00:06:52,646 --> 00:06:53,716
associated with a scroll view,


217
00:06:53,826 --> 00:06:54,896
which is pretty common in your


218
00:06:54,896 --> 00:06:56,576
apps, if you're at the top of


219
00:06:56,576 --> 00:06:58,326
that scroll view, then we'll use


220
00:06:58,326 --> 00:06:59,636
the scrollEdgeAppearance instead


221
00:06:59,636 --> 00:07:00,606
of the standard appearance.


222
00:07:01,016 --> 00:07:02,336
The default is to use a


223
00:07:02,336 --> 00:07:03,616
transparent background, and


224
00:07:03,616 --> 00:07:05,636
that's why you get the seamless


225
00:07:05,636 --> 00:07:07,316
appearance that we've got new in


226
00:07:07,396 --> 00:07:08,636
iOS 13.


227
00:07:09,476 --> 00:07:11,886
In addition, you can also


228
00:07:11,886 --> 00:07:12,996
customize the appearance of your


229
00:07:12,996 --> 00:07:14,446
bar button items, and so the


230
00:07:14,446 --> 00:07:16,286
buttonAppearance for plain items


231
00:07:16,286 --> 00:07:18,406
and the doneButtonAppearance for


232
00:07:18,406 --> 00:07:19,026
done items.


233
00:07:21,016 --> 00:07:22,276
Now, we could have stopped


234
00:07:22,276 --> 00:07:22,436
there.


235
00:07:22,686 --> 00:07:23,796
You got your navigation bar.


236
00:07:23,856 --> 00:07:24,576
It's customized.


237
00:07:24,576 --> 00:07:24,986
It's great.


238
00:07:24,986 --> 00:07:27,656
But we decided to also bring


239
00:07:27,656 --> 00:07:29,236
this to Toolbar and TabBar so


240
00:07:29,386 --> 00:07:30,846
that you can customize all your


241
00:07:30,846 --> 00:07:33,286
bars in a very similar way with


242
00:07:33,286 --> 00:07:34,726
each of those classes using


243
00:07:34,726 --> 00:07:35,736
their own subclass of


244
00:07:35,736 --> 00:07:38,146
UIBarAppearance to do their own


245
00:07:38,146 --> 00:07:39,006
customized work.


246
00:07:39,776 --> 00:07:40,946
Now, ToolbarAppearance is


247
00:07:40,946 --> 00:07:41,806
actually just a subset of


248
00:07:41,806 --> 00:07:42,696
properties relative to


249
00:07:42,696 --> 00:07:44,656
navigationBarAppearance, so it's


250
00:07:44,656 --> 00:07:46,046
not too interesting to continue


251
00:07:46,046 --> 00:07:47,346
further with, but


252
00:07:47,346 --> 00:07:48,706
TabBarAppearance is a little bit


253
00:07:48,706 --> 00:07:49,616
different, and that's because


254
00:07:49,936 --> 00:07:51,066
TabBar is also a little


255
00:07:52,086 --> 00:07:52,296
different.


256
00:07:52,866 --> 00:07:55,036
So, with a TabBar, you have


257
00:07:55,036 --> 00:07:56,846
additional customization options


258
00:07:57,326 --> 00:07:58,616
for these three layout


259
00:07:58,616 --> 00:07:59,136
appearance, the


260
00:07:59,136 --> 00:08:00,956
stackedLayoutAppearance, the


261
00:08:00,996 --> 00:08:02,136
inlineAppearance, which you'll


262
00:08:02,136 --> 00:08:04,076
see on iPads, and the


263
00:08:04,076 --> 00:08:05,366
compactInlineAppearance, which


264
00:08:05,366 --> 00:08:06,446
you'll see on smaller phones.


265
00:08:07,206 --> 00:08:09,566
And so, you can put all that


266
00:08:09,566 --> 00:08:12,256
together and get new appearance


267
00:08:12,256 --> 00:08:13,506
customization for all of your


268
00:08:13,506 --> 00:08:13,836
bars.


269
00:08:15,116 --> 00:08:15,746
But there's one more thing.


270
00:08:16,996 --> 00:08:19,466
If you look at the new reminders


271
00:08:19,466 --> 00:08:21,286
app, when you navigate into a


272
00:08:21,286 --> 00:08:24,306
list, this title color changes


273
00:08:24,366 --> 00:08:25,346
to match the list.


274
00:08:26,736 --> 00:08:29,206
The way they do this is they use


275
00:08:29,466 --> 00:08:30,936
per navigation item appearance


276
00:08:30,936 --> 00:08:32,996
customization, which allows you


277
00:08:32,996 --> 00:08:34,466
to specify an appearance based


278
00:08:34,466 --> 00:08:35,966
on the navigation item that you


279
00:08:35,966 --> 00:08:37,426
pushed onto the navigationBar.


280
00:08:37,426 --> 00:08:39,356
Navigation items are also


281
00:08:39,356 --> 00:08:40,506
associated with navigation, or


282
00:08:40,546 --> 00:08:42,025
with view controllers, and so


283
00:08:42,025 --> 00:08:42,936
pushing onto a navigation


284
00:08:42,936 --> 00:08:44,336
controller will naturally use


285
00:08:44,336 --> 00:08:44,566
that.


286
00:08:45,646 --> 00:08:47,266
So what does that look like?


287
00:08:48,076 --> 00:08:50,746
Well, the navigation item has


288
00:08:50,746 --> 00:08:52,756
the same properties that the


289
00:08:52,756 --> 00:08:53,816
navigationBar has.


290
00:08:54,356 --> 00:08:55,956
So a common thing to do is to


291
00:08:55,956 --> 00:08:57,566
just take the standard


292
00:08:57,566 --> 00:08:58,956
appearance from a navigationBar,


293
00:08:59,806 --> 00:09:01,456
make a copy of it so that we are


294
00:09:01,576 --> 00:09:02,956
disassociated from that


295
00:09:02,956 --> 00:09:05,446
appearance, and make whatever


296
00:09:05,446 --> 00:09:06,516
changes you want.


297
00:09:06,616 --> 00:09:07,206
If you want this to be


298
00:09:07,206 --> 00:09:08,806
transparent, there's a configure


299
00:09:08,806 --> 00:09:10,226
transparency that you can use.


300
00:09:10,226 --> 00:09:11,916
You can change bar button item


301
00:09:11,916 --> 00:09:15,026
appearances, etc., etc. And then


302
00:09:15,026 --> 00:09:16,256
you assign it to the navigation


303
00:09:16,256 --> 00:09:16,486
item.


304
00:09:16,566 --> 00:09:18,276
And once you've done that,


305
00:09:18,396 --> 00:09:20,186
whenever the view controller and


306
00:09:20,186 --> 00:09:21,646
navigation item is current, we


307
00:09:21,846 --> 00:09:23,346
will use that appearance instead


308
00:09:23,346 --> 00:09:24,476
of the navigationBar's base


309
00:09:24,476 --> 00:09:25,936
appearance to make sure that you


310
00:09:25,936 --> 00:09:27,526
can customize your navigationBar


311
00:09:27,796 --> 00:09:29,596
for whatever view controller


312
00:09:29,596 --> 00:09:30,066
gets pushed.


313
00:09:30,566 --> 00:09:34,656
And so with that, I'm going to


314
00:09:34,656 --> 00:09:36,216
bring on Russell to talk about


315
00:09:36,216 --> 00:09:36,886
presentations.


316
00:09:37,516 --> 00:09:44,466
[ Applause ]


317
00:09:44,966 --> 00:09:46,006
>> Thanks David.


318
00:09:46,976 --> 00:09:47,766
Hi everyone.


319
00:09:48,106 --> 00:09:50,706
I'm Russell, and new in iOS 13


320
00:09:51,036 --> 00:09:52,446
we have a standard design for


321
00:09:52,446 --> 00:09:54,066
presentations that I am so


322
00:09:54,066 --> 00:09:55,186
excited to tell you all about.


323
00:09:56,796 --> 00:09:58,456
For example, if I'm here in the


324
00:09:58,456 --> 00:10:00,866
contacts app and I tap plus to


325
00:10:00,866 --> 00:10:02,976
add a new contact, we have a new


326
00:10:02,976 --> 00:10:04,506
presentation style that looks


327
00:10:04,506 --> 00:10:06,206
like this, rather than the full


328
00:10:06,206 --> 00:10:07,326
screen presentation that we had


329
00:10:07,326 --> 00:10:07,716
before.


330
00:10:08,666 --> 00:10:09,726
You can see that the root view


331
00:10:09,726 --> 00:10:11,786
controller's view is not as


332
00:10:11,866 --> 00:10:13,956
scaled down and not removed from


333
00:10:13,956 --> 00:10:14,576
the view hierarchy.


334
00:10:15,936 --> 00:10:17,296
The layering of this design


335
00:10:17,636 --> 00:10:18,886
gives your users a sense of


336
00:10:18,926 --> 00:10:20,446
context about where they are in


337
00:10:20,446 --> 00:10:22,186
your applications, and the


338
00:10:22,186 --> 00:10:23,856
rounded top appearance serves as


339
00:10:23,856 --> 00:10:25,556
a signifier that these


340
00:10:25,556 --> 00:10:26,806
presentations can be


341
00:10:26,986 --> 00:10:29,436
interactively dismissed anywhere


342
00:10:29,776 --> 00:10:31,886
in the system [applause].


343
00:10:32,116 --> 00:10:32,366
Thanks.


344
00:10:33,516 --> 00:10:37,116
[ Applause ]


345
00:10:37,616 --> 00:10:38,936
So what is this new presentation


346
00:10:38,936 --> 00:10:39,256
style?


347
00:10:40,096 --> 00:10:41,806
These presentations are called


348
00:10:42,586 --> 00:10:45,136
Sheets, and Sheets aren't new at


349
00:10:45,136 --> 00:10:45,576
all.


350
00:10:45,906 --> 00:10:47,226
These presentations are just a


351
00:10:47,226 --> 00:10:49,506
new design for the existing


352
00:10:49,786 --> 00:10:51,436
UIModalPresentationStyle


353
00:10:51,656 --> 00:10:53,286
pageSheet and its sibling,


354
00:10:53,756 --> 00:10:54,166
formSheet.


355
00:10:55,636 --> 00:10:57,426
Previously, these styles would


356
00:10:57,426 --> 00:10:58,416
adapt to a full screen


357
00:10:58,416 --> 00:10:59,926
presentation in a compact width


358
00:10:59,926 --> 00:11:00,466
environment.


359
00:11:00,666 --> 00:11:03,076
And now, they just stay Sheets


360
00:11:03,276 --> 00:11:04,626
with their own special layout


361
00:11:04,626 --> 00:11:06,426
and compact width different from


362
00:11:06,426 --> 00:11:09,466
their regular width layout.


363
00:11:09,546 --> 00:11:10,546
So, let's look at a few examples


364
00:11:10,546 --> 00:11:11,316
of this in action.


365
00:11:12,436 --> 00:11:13,846
In phones and portrait, you get


366
00:11:13,846 --> 00:11:14,566
the appearance that you just


367
00:11:14,566 --> 00:11:14,886
saw.


368
00:11:15,476 --> 00:11:16,946
In phone in landscape, you get a


369
00:11:16,946 --> 00:11:18,216
full screen layout like before.


370
00:11:18,806 --> 00:11:21,446
But iPads aren't left out.


371
00:11:21,786 --> 00:11:22,936
We've rethought Sheets here as


372
00:11:22,936 --> 00:11:23,196
well.


373
00:11:23,896 --> 00:11:25,526
Page Sheets float in a stack in


374
00:11:25,526 --> 00:11:28,106
the middle of the screen, and if


375
00:11:28,106 --> 00:11:29,386
multiple are presented on top of


376
00:11:29,386 --> 00:11:30,946
each other, they'll form a stack


377
00:11:30,946 --> 00:11:32,146
on top the review controller.


378
00:11:33,536 --> 00:11:36,776
And specifically, this new size


379
00:11:37,026 --> 00:11:38,566
follows the readable width, so


380
00:11:38,566 --> 00:11:39,706
it's perfect for textual


381
00:11:39,706 --> 00:11:40,156
content.


382
00:11:40,836 --> 00:11:42,276
And because the readable width


383
00:11:42,276 --> 00:11:43,366
changes with the user's


384
00:11:43,406 --> 00:11:44,836
currently selected dynamic type


385
00:11:44,836 --> 00:11:46,646
size, these page sheets can


386
00:11:46,646 --> 00:11:48,576
change size as well, like this


387
00:11:49,226 --> 00:11:49,916
or even like this.


388
00:11:50,836 --> 00:11:51,986
Or they can take on a stacked


389
00:11:51,986 --> 00:11:54,016
appearance if their preferred


390
00:11:54,016 --> 00:11:55,126
width is wider than the


391
00:11:55,126 --> 00:11:56,456
available width.


392
00:11:56,886 --> 00:12:00,676
So, what do you all need to do


393
00:12:00,676 --> 00:12:02,026
to get this new appearance in


394
00:12:02,026 --> 00:12:02,806
your app?


395
00:12:03,086 --> 00:12:04,196
Well very little because you've


396
00:12:04,196 --> 00:12:05,546
done a lot of work to make this


397
00:12:05,586 --> 00:12:08,286
transition as easy as possible.


398
00:12:09,056 --> 00:12:12,106
The default UIViewController


399
00:12:12,106 --> 00:12:13,576
ModalPresentationStyle has


400
00:12:13,576 --> 00:12:15,936
changed to a new style called


401
00:12:15,936 --> 00:12:16,446
Automatic.


402
00:12:17,736 --> 00:12:19,376
Automatic is a dynamic


403
00:12:19,476 --> 00:12:20,956
presentation style, which is


404
00:12:20,956 --> 00:12:22,296
resolved at the time of


405
00:12:22,366 --> 00:12:23,026
presentation.


406
00:12:23,876 --> 00:12:25,006
To illustrate its behavior,


407
00:12:25,416 --> 00:12:26,806
let's walk through a few


408
00:12:26,806 --> 00:12:29,486
examples together.


409
00:12:29,626 --> 00:12:32,026
So, here I have a custom view


410
00:12:32,026 --> 00:12:33,306
controller, and it's going to


411
00:12:33,306 --> 00:12:35,276
present UIImagePickerController


412
00:12:35,486 --> 00:12:36,336
showing the user's photo


413
00:12:36,336 --> 00:12:36,826
library.


414
00:12:36,936 --> 00:12:38,516
And note that there's no modal


415
00:12:38,826 --> 00:12:40,886
presentation style set.


416
00:12:41,196 --> 00:12:42,676
This same code that worked on


417
00:12:42,676 --> 00:12:44,416
iOS 12 and presented the image


418
00:12:44,416 --> 00:12:45,956
picker full screen will now


419
00:12:45,956 --> 00:12:48,106
present as a sheet with no code


420
00:12:48,106 --> 00:12:49,106
change required on your part.


421
00:12:49,796 --> 00:12:53,126
On the other hand, if I


422
00:12:53,126 --> 00:12:53,706
configure the


423
00:12:53,706 --> 00:12:54,856
UIImagePickerController to


424
00:12:54,856 --> 00:12:56,706
present in camera mode, this


425
00:12:56,706 --> 00:12:58,046
code will present the camera


426
00:12:58,336 --> 00:13:00,446
full screen in iOS 13, just like


427
00:13:00,446 --> 00:13:01,486
it did in iOS 12.


428
00:13:02,506 --> 00:13:03,956
This is automatic at work,


429
00:13:04,176 --> 00:13:05,496
resolving to different styles


430
00:13:05,816 --> 00:13:07,146
depending on how a system


431
00:13:07,146 --> 00:13:08,576
provided view controller is


432
00:13:08,576 --> 00:13:09,866
configured so that you don't


433
00:13:09,866 --> 00:13:10,976
have to make any code change.


434
00:13:11,546 --> 00:13:15,096
Now, what about presenting our


435
00:13:15,096 --> 00:13:16,126
own view controllers?


436
00:13:16,876 --> 00:13:18,456
If I simply instantiate and


437
00:13:18,456 --> 00:13:20,196
present a custom subclass of


438
00:13:20,196 --> 00:13:21,916
UIViewController it will present


439
00:13:21,996 --> 00:13:22,426
as a Sheet.


440
00:13:23,016 --> 00:13:24,796
In other words, by default,


441
00:13:25,256 --> 00:13:27,236
automatic resolves to pageSheet.


442
00:13:27,786 --> 00:13:29,846
And this is great because it's


443
00:13:29,846 --> 00:13:31,226
the right style for most


444
00:13:31,226 --> 00:13:31,886
presentations.


445
00:13:32,916 --> 00:13:34,576
Again, no code change required.


446
00:13:36,366 --> 00:13:38,506
But, what about this last case?


447
00:13:39,196 --> 00:13:40,156
If you have a custom view


448
00:13:40,156 --> 00:13:41,596
controller that should be


449
00:13:41,596 --> 00:13:43,066
presented full screen, such as


450
00:13:43,066 --> 00:13:44,706
your own custom camera or other


451
00:13:44,706 --> 00:13:46,566
immersive experience, you may


452
00:13:46,566 --> 00:13:47,646
find that when you build this


453
00:13:47,646 --> 00:13:49,416
code, your immersive experience


454
00:13:49,416 --> 00:13:50,326
has been turned into a Sheet.


455
00:13:51,096 --> 00:13:52,756
But don't worry, all you have to


456
00:13:52,756 --> 00:13:55,316
do to fix it is explicitly set


457
00:13:55,316 --> 00:13:56,676
the modalPresentationStyle of


458
00:13:56,676 --> 00:13:58,046
this view controller to full


459
00:13:58,046 --> 00:13:58,356
screen.


460
00:13:59,706 --> 00:14:01,476
In general, it's good to leave


461
00:14:01,476 --> 00:14:02,836
properties at their default


462
00:14:02,836 --> 00:14:04,686
values and only specify an


463
00:14:04,686 --> 00:14:06,056
explicit value when you're


464
00:14:06,056 --> 00:14:07,656
intentionally deviating from the


465
00:14:07,656 --> 00:14:08,376
default behavior.


466
00:14:08,916 --> 00:14:14,066
And what about Popovers?


467
00:14:14,566 --> 00:14:16,246
Well, Popovers always adapt to


468
00:14:16,246 --> 00:14:16,756
sheets now.


469
00:14:17,336 --> 00:14:18,606
So, if you want a Popover in


470
00:14:18,606 --> 00:14:21,036
regular width and a Sheet in


471
00:14:21,036 --> 00:14:23,606
compact width, all you have to


472
00:14:23,606 --> 00:14:24,556
do is set your modal


473
00:14:24,556 --> 00:14:25,646
presentation style to be a


474
00:14:25,646 --> 00:14:27,086
Popover, and you're done.


475
00:14:27,416 --> 00:14:29,366
You'll get exactly that


476
00:14:31,436 --> 00:14:31,656
behavior.


477
00:14:32,136 --> 00:14:35,306
Now, what do you all have to do


478
00:14:35,416 --> 00:14:40,346
to support Pull to Dismiss?


479
00:14:40,476 --> 00:14:41,756
In general, nothing.


480
00:14:42,446 --> 00:14:43,526
If you present something as a


481
00:14:43,526 --> 00:14:45,286
Sheet, the ability to pull it


482
00:14:45,286 --> 00:14:46,566
down comes for free.


483
00:14:47,266 --> 00:14:48,176
We will place a gesture


484
00:14:48,176 --> 00:14:49,476
recognizer on your entire


485
00:14:49,476 --> 00:14:51,156
presented view, so pulling down


486
00:14:51,156 --> 00:14:52,876
in any noninteractive area will


487
00:14:52,876 --> 00:14:54,076
trigger a pulldown on a Sheet.


488
00:14:55,156 --> 00:14:57,086
And, if the user pulls down past


489
00:14:57,266 --> 00:14:58,716
the top in any contained


490
00:14:58,716 --> 00:15:00,636
scrollView, that will also pull


491
00:15:00,636 --> 00:15:01,516
the sheet down as well


492
00:15:01,896 --> 00:15:03,446
completely for free.


493
00:15:04,996 --> 00:15:07,996
However, there are times when


494
00:15:07,996 --> 00:15:09,186
pulling down a sheet maybe


495
00:15:09,186 --> 00:15:10,016
undesirable.


496
00:15:10,666 --> 00:15:13,026
For example, if we present this


497
00:15:13,026 --> 00:15:15,006
same Sheet and enter some data,


498
00:15:15,636 --> 00:15:16,676
the Sheet should not be allowed


499
00:15:16,676 --> 00:15:18,056
to be pulled down, because it's


500
00:15:18,106 --> 00:15:19,916
unclear if the user intends to


501
00:15:20,116 --> 00:15:22,336
discard or save their changes,


502
00:15:23,106 --> 00:15:24,526
and if the user does attempt to


503
00:15:24,526 --> 00:15:26,316
pull down, the Sheet should


504
00:15:26,496 --> 00:15:28,096
rubber band, and an action sheet


505
00:15:28,096 --> 00:15:29,446
should be presented, showing


506
00:15:29,446 --> 00:15:31,026
what actions the user can take


507
00:15:31,346 --> 00:15:32,486
to escape this context.


508
00:15:36,226 --> 00:15:37,366
So, to create this experience,


509
00:15:37,676 --> 00:15:39,146
we have two new APIs.


510
00:15:40,056 --> 00:15:41,786
The first is modal and


511
00:15:41,786 --> 00:15:43,946
presentation, is a property on


512
00:15:43,946 --> 00:15:45,666
UIViewController, and when you


513
00:15:45,666 --> 00:15:46,876
set this to true on your


514
00:15:46,876 --> 00:15:48,256
presented View Controller, it


515
00:15:48,696 --> 00:15:51,076
will put the Sheet in a modal


516
00:15:51,076 --> 00:15:52,646
state where it cannot be


517
00:15:53,326 --> 00:15:53,566
dismissed,


518
00:15:54,356 --> 00:15:55,116
and you'll get the


519
00:15:55,116 --> 00:15:56,246
rubber-banding effect, just like


520
00:15:56,246 --> 00:15:56,576
you saw.


521
00:15:57,406 --> 00:15:58,736
This property supersedes the


522
00:15:58,736 --> 00:16:00,406
existing isModal and Popover


523
00:16:00,406 --> 00:16:02,416
property to prevent both Sheets


524
00:16:02,476 --> 00:16:03,836
and Popovers from being


525
00:16:04,466 --> 00:16:04,686
dismissed.


526
00:16:06,016 --> 00:16:08,286
The second is a new


527
00:16:08,286 --> 00:16:10,186
UIAdaptivePresentationController


528
00:16:10,186 --> 00:16:11,996
DelegateMethod called


529
00:16:11,996 --> 00:16:13,816
presentationControllerDidAttempt


530
00:16:13,846 --> 00:16:14,276
ToDismiss.


531
00:16:15,366 --> 00:16:16,956
So if you set the delegate on


532
00:16:16,956 --> 00:16:17,996
the presentation controller


533
00:16:17,996 --> 00:16:20,076
involved, UIKit will call this


534
00:16:20,076 --> 00:16:22,036
method when the user pulls down


535
00:16:22,036 --> 00:16:23,646
while in a modal state, at which


536
00:16:23,646 --> 00:16:25,226
point you can present the action


537
00:16:25,226 --> 00:16:25,426
sheet.


538
00:16:28,556 --> 00:16:29,866
Here, you can see the


539
00:16:29,866 --> 00:16:31,576
relationship between these APIs.


540
00:16:32,356 --> 00:16:34,066
DidAttemptToDismiss is only


541
00:16:34,066 --> 00:16:36,126
called if isModalInPpresentation


542
00:16:36,126 --> 00:16:38,856
is true and the user pulls and


543
00:16:38,856 --> 00:16:40,286
releases with the intent to


544
00:16:40,286 --> 00:16:41,926
dismiss, so with some force or


545
00:16:41,926 --> 00:16:42,496
velocity.


546
00:16:43,546 --> 00:16:45,306
We call this the Modal Flow, and


547
00:16:45,306 --> 00:16:46,606
we have a sample project that


548
00:16:46,606 --> 00:16:48,136
shows exactly how to implement


549
00:16:48,136 --> 00:16:49,296
an example like this.


550
00:16:50,086 --> 00:16:51,166
See the link in the description


551
00:16:51,336 --> 00:16:53,266
for how to download that.


552
00:16:53,816 --> 00:16:55,356
But, we have more.


553
00:16:56,086 --> 00:16:58,096
We also have a few more delegate


554
00:16:58,096 --> 00:16:58,566
callbacks.


555
00:16:59,096 --> 00:17:00,016
PresentationController


556
00:17:00,016 --> 00:17:01,626
ShouldDismiss, which is useful


557
00:17:01,626 --> 00:17:02,666
for preventing dismiss from the


558
00:17:02,666 --> 00:17:04,925
delegate, WillDismiss, which is


559
00:17:04,925 --> 00:17:06,756
a great place to grab one of the


560
00:17:06,756 --> 00:17:07,925
view controller's transition


561
00:17:07,925 --> 00:17:09,435
coordinators, which you can use


562
00:17:09,435 --> 00:17:11,496
to set up alongside animations,


563
00:17:11,556 --> 00:17:12,415
interaction change


564
00:17:12,415 --> 00:17:13,646
notifications, and animation


565
00:17:13,646 --> 00:17:15,536
completion blocks and


566
00:17:15,536 --> 00:17:17,236
DidDismiss, which is great for


567
00:17:17,236 --> 00:17:18,246
cleaning up state because it's


568
00:17:18,246 --> 00:17:20,486
only called once if the user


569
00:17:20,636 --> 00:17:21,915
actually pulls the Sheet down


570
00:17:21,915 --> 00:17:23,016
and completes the transition.


571
00:17:25,136 --> 00:17:26,715
These three callbacks supersede


572
00:17:26,715 --> 00:17:28,106
similarly named UI Popover


573
00:17:28,106 --> 00:17:29,366
presentationControllerDelegate


574
00:17:29,366 --> 00:17:31,976
Callbacks because these APIs are


575
00:17:31,976 --> 00:17:33,186
called for both Sheets and


576
00:17:33,186 --> 00:17:33,766
Popovers.


577
00:17:34,346 --> 00:17:37,586
Now, keep in mind that if a user


578
00:17:37,636 --> 00:17:39,496
were to repeatedly tug on a


579
00:17:39,496 --> 00:17:41,396
Sheet without pulling it down,


580
00:17:41,716 --> 00:17:43,546
the delegate will receive,


581
00:17:44,646 --> 00:17:46,626
Should and WillDismiss multiple


582
00:17:46,626 --> 00:17:49,076
times before calling DidDismiss,


583
00:17:49,286 --> 00:17:51,606
if it receives DidDismiss at


584
00:17:54,616 --> 00:17:54,716
all.


585
00:17:54,936 --> 00:17:56,406
Now, let's shift to Share


586
00:17:56,406 --> 00:17:57,246
Extensions for a moment.


587
00:17:58,526 --> 00:18:00,166
When you build with the iOS 13


588
00:18:00,296 --> 00:18:02,986
SDK, your Share Extensions, just


589
00:18:02,986 --> 00:18:05,176
like mail here, will become


590
00:18:05,176 --> 00:18:07,426
Sheets, and Pull to Dismiss will


591
00:18:07,426 --> 00:18:08,096
work here as well.


592
00:18:09,266 --> 00:18:10,176
So, on the principle view


593
00:18:10,176 --> 00:18:12,406
controller of your extension,


594
00:18:12,406 --> 00:18:13,316
which is like the main view


595
00:18:13,316 --> 00:18:14,526
controller you specify in the


596
00:18:14,526 --> 00:18:17,146
Info P List, be sure to set


597
00:18:17,146 --> 00:18:19,296
isModalInPresentation once the


598
00:18:19,296 --> 00:18:20,706
user has started entering data,


599
00:18:21,566 --> 00:18:23,186
and if you make your principle


600
00:18:23,186 --> 00:18:24,986
view controller conform to


601
00:18:24,986 --> 00:18:26,396
UIAdaptivePresentation


602
00:18:26,396 --> 00:18:28,296
ControllerDelegate and implement


603
00:18:28,736 --> 00:18:30,726
DidAttemptToDismiss, we will


604
00:18:30,726 --> 00:18:32,236
call that method when the user


605
00:18:32,236 --> 00:18:34,076
pulls down in this case, but


606
00:18:34,076 --> 00:18:35,746
note that we will not call any


607
00:18:35,746 --> 00:18:36,866
of the other delegate methods.


608
00:18:37,516 --> 00:18:39,656
And this behavior will be


609
00:18:39,656 --> 00:18:40,726
available in a future seed.


610
00:18:41,276 --> 00:18:45,426
Moving right along, I have a few


611
00:18:45,426 --> 00:18:46,646
things for you to consider.


612
00:18:47,636 --> 00:18:49,096
The first has to do with


613
00:18:49,096 --> 00:18:50,266
UIViewController Appearance


614
00:18:50,266 --> 00:18:50,696
Callbacks.


615
00:18:51,766 --> 00:18:53,576
Specifically, the difference


616
00:18:53,686 --> 00:18:55,156
between the appearance callbacks


617
00:18:55,416 --> 00:18:56,306
that the presenting view


618
00:18:56,306 --> 00:18:58,256
controller receives during a


619
00:18:58,256 --> 00:18:59,936
full screen presentation as


620
00:18:59,936 --> 00:19:00,986
compared to a sheet


621
00:19:00,986 --> 00:19:01,596
presentation.


622
00:19:02,996 --> 00:19:03,696
During a full screen


623
00:19:03,696 --> 00:19:05,346
presentation, the presenting


624
00:19:05,346 --> 00:19:06,756
view controller's view is


625
00:19:06,756 --> 00:19:08,376
removed from the view hierarchy,


626
00:19:09,236 --> 00:19:10,926
and as a result, it receives


627
00:19:11,146 --> 00:19:13,476
viewWillDisappear when the


628
00:19:13,536 --> 00:19:15,406
presentation transition begins


629
00:19:15,466 --> 00:19:17,376
and then viewDidDisappear when


630
00:19:17,376 --> 00:19:18,466
the presentation transition


631
00:19:18,466 --> 00:19:18,876
finishes.


632
00:19:19,676 --> 00:19:20,856
And similarly, during the


633
00:19:20,856 --> 00:19:22,246
dismissal transition when its


634
00:19:22,246 --> 00:19:23,486
view moves back into the view


635
00:19:23,486 --> 00:19:25,046
hierarchy, it receives viewWill


636
00:19:25,046 --> 00:19:25,616
and DidAppear.


637
00:19:27,116 --> 00:19:29,296
But, for Sheet Presentations,


638
00:19:30,146 --> 00:19:31,036
the presenting view controller's


639
00:19:31,036 --> 00:19:32,396
view is not removed from the


640
00:19:32,396 --> 00:19:34,496
view hierarchy, and so it's


641
00:19:34,496 --> 00:19:36,126
view, or the view controller


642
00:19:36,126 --> 00:19:37,436
does not receive any of these


643
00:19:37,436 --> 00:19:38,426
appearance callbacks.


644
00:19:39,346 --> 00:19:40,476
So, if you have code in these


645
00:19:40,476 --> 00:19:41,786
callbacks that you need to be


646
00:19:41,786 --> 00:19:43,196
executed when a Sheet dismisses,


647
00:19:43,616 --> 00:19:44,276
you should look at the


648
00:19:44,276 --> 00:19:45,796
presentation controller Will and


649
00:19:45,796 --> 00:19:47,436
DidDismiss methods that we just


650
00:19:47,436 --> 00:19:48,486
talked about.


651
00:19:50,256 --> 00:19:52,556
The second thing I want you all


652
00:19:52,556 --> 00:19:53,946
to consider is that we have


653
00:19:53,996 --> 00:19:55,946
inserted some private views in


654
00:19:55,946 --> 00:19:57,856
the view hierarchy in between


655
00:19:57,856 --> 00:19:59,176
UIWindow and its


656
00:19:59,176 --> 00:20:00,166
rootViewController's view.


657
00:20:01,576 --> 00:20:03,196
This change should not affect


658
00:20:03,196 --> 00:20:03,366
you.


659
00:20:03,896 --> 00:20:04,696
We just don't want you to be


660
00:20:04,696 --> 00:20:05,946
surprised when you see these


661
00:20:05,946 --> 00:20:06,826
views it the View Debugger.


662
00:20:07,906 --> 00:20:08,866
The relationship between


663
00:20:08,866 --> 00:20:10,286
UIWindow and it Root View


664
00:20:10,286 --> 00:20:11,536
Controller's View is an


665
00:20:11,536 --> 00:20:13,166
implementation detail of UIKit,


666
00:20:13,166 --> 00:20:15,056
and because it is UIWindow's


667
00:20:15,056 --> 00:20:17,526
responsibility to manage and add


668
00:20:17,826 --> 00:20:18,926
this view to the view hierarchy.


669
00:20:20,096 --> 00:20:21,686
In general, the structure of a


670
00:20:21,686 --> 00:20:23,396
view hierarchy not owned by your


671
00:20:23,626 --> 00:20:25,256
app is liable to change without


672
00:20:25,256 --> 00:20:26,266
notice in any release.


673
00:20:27,326 --> 00:20:28,856
So, always ensure that you're


674
00:20:28,856 --> 00:20:30,556
writing your code in a way that


675
00:20:30,556 --> 00:20:32,476
doesn't make assumptions about


676
00:20:32,886 --> 00:20:36,626
private view hierarchies.


677
00:20:36,686 --> 00:20:39,526
So, use Sheet presentations in


678
00:20:39,526 --> 00:20:39,926
your apps.


679
00:20:40,546 --> 00:20:41,886
They're meant to be used for


680
00:20:41,886 --> 00:20:45,136
most UI with few exceptions, and


681
00:20:45,136 --> 00:20:46,706
implement the modal flow when


682
00:20:46,706 --> 00:20:48,226
pulling down requires the user's


683
00:20:48,226 --> 00:20:48,596
intent.


684
00:20:49,426 --> 00:20:50,856
And remember, there's a sample


685
00:20:50,856 --> 00:20:52,386
project that illustrates exactly


686
00:20:52,386 --> 00:20:54,196
how to do that in more detail in


687
00:20:54,196 --> 00:20:55,126
the session's description.


688
00:20:57,306 --> 00:20:58,596
Thanks everyone, and now I'm


689
00:20:58,596 --> 00:20:59,706
going to hand it off to Kyle to


690
00:20:59,706 --> 00:21:00,616
tell you more about Search.


691
00:21:01,516 --> 00:21:05,966
[ Applause ]


692
00:21:06,466 --> 00:21:06,766
>> Good job.


693
00:21:08,736 --> 00:21:09,976
Thank you, Russell.


694
00:21:16,066 --> 00:21:16,526
Hello everybody.


695
00:21:16,866 --> 00:21:17,556
My name is Kyle.


696
00:21:17,826 --> 00:21:19,856
I work on UIKit, and I'm going


697
00:21:19,856 --> 00:21:21,436
to tell you some new things in


698
00:21:21,516 --> 00:21:23,206
iOS 13 about Search.


699
00:21:23,906 --> 00:21:25,886
Now this isn't new.


700
00:21:25,886 --> 00:21:28,356
This is the existing interface


701
00:21:28,356 --> 00:21:29,566
for searching in the mail


702
00:21:29,566 --> 00:21:31,916
application, and it is provided


703
00:21:32,176 --> 00:21:32,876
by UIKit.


704
00:21:33,406 --> 00:21:34,206
Specifically, the


705
00:21:34,206 --> 00:21:36,666
UISearchController subclass of


706
00:21:36,756 --> 00:21:37,676
UIViewController.


707
00:21:38,726 --> 00:21:40,146
It's familiar to all of our


708
00:21:40,146 --> 00:21:42,276
users, and it's available in


709
00:21:42,276 --> 00:21:44,396
your applications too, and it


710
00:21:44,526 --> 00:21:46,296
consists of a number of parts.


711
00:21:47,606 --> 00:21:48,656
The biggest piece is a


712
00:21:48,656 --> 00:21:50,606
UISearchBar, which you can see


713
00:21:50,606 --> 00:21:51,676
here at the top of the screen.


714
00:21:53,036 --> 00:21:54,606
The search bar has a couple of


715
00:21:54,606 --> 00:21:56,526
components including a Cancel


716
00:21:56,526 --> 00:21:58,286
button and what we call the


717
00:21:58,286 --> 00:21:59,906
Scope Bar, which is that row of


718
00:21:59,906 --> 00:22:01,206
buttons underneath the search


719
00:22:01,916 --> 00:22:02,046
field.


720
00:22:02,956 --> 00:22:05,266
Now, you may notice the updated


721
00:22:05,466 --> 00:22:07,846
visual appearance of the Scope


722
00:22:07,846 --> 00:22:13,166
Bar in iOS 13, but now we're


723
00:22:13,166 --> 00:22:15,876
allowing our application to hide


724
00:22:15,876 --> 00:22:18,076
elements of the Search Bar even


725
00:22:18,076 --> 00:22:19,156
if it's managed by a


726
00:22:19,156 --> 00:22:20,136
UISearchController.


727
00:22:20,876 --> 00:22:22,446
So, if your application doesn't


728
00:22:22,446 --> 00:22:24,416
need a Scope Bar or a Cancel


729
00:22:24,416 --> 00:22:25,816
Button but wants to make them


730
00:22:25,816 --> 00:22:27,836
available perhaps depending on


731
00:22:27,836 --> 00:22:28,576
the UI state.


732
00:22:29,056 --> 00:22:30,506
You can control that directly


733
00:22:31,096 --> 00:22:31,936
with new properties on


734
00:22:31,936 --> 00:22:32,736
UISearchController.


735
00:22:34,776 --> 00:22:37,856
Also, we're exposing the


736
00:22:37,856 --> 00:22:39,816
SearchTextField as a public


737
00:22:39,816 --> 00:22:42,116
property on UISearchBar, which


738
00:22:42,116 --> 00:22:43,256
means that it's really easy to


739
00:22:43,256 --> 00:22:43,916
customize.


740
00:22:44,516 --> 00:22:52,666
[ Applause ]


741
00:22:53,166 --> 00:22:55,316
So to customize the appearance


742
00:22:55,316 --> 00:22:57,126
of your SearchController, set


743
00:22:57,796 --> 00:22:59,856
these properties to false on


744
00:22:59,856 --> 00:23:01,926
UISearchController and use the


745
00:23:01,926 --> 00:23:02,986
existing properties on


746
00:23:02,986 --> 00:23:04,296
UISearchBar to control the


747
00:23:04,296 --> 00:23:05,936
visibility of the Cancel Button


748
00:23:06,246 --> 00:23:06,936
and the Scope Bar.


749
00:23:08,686 --> 00:23:10,956
Use the searchTextField Property


750
00:23:11,436 --> 00:23:13,146
to get a reference to the


751
00:23:13,216 --> 00:23:15,526
UISearchTextField instance and


752
00:23:15,526 --> 00:23:17,366
change all the properties on the


753
00:23:17,366 --> 00:23:18,466
Text Field that you'd like to


754
00:23:18,466 --> 00:23:18,926
change.


755
00:23:19,206 --> 00:23:20,786
It's a subclass of UITextField


756
00:23:20,976 --> 00:23:21,836
and all of the styling


757
00:23:21,836 --> 00:23:26,226
properties are available there.


758
00:23:27,666 --> 00:23:29,266
UISearchController's behavior


759
00:23:29,266 --> 00:23:30,896
extends to the appearance and


760
00:23:30,896 --> 00:23:32,846
dismissal of Search as well, so


761
00:23:32,846 --> 00:23:35,086
the standard behavior is that


762
00:23:35,086 --> 00:23:36,426
when you activate the Search Bar


763
00:23:36,826 --> 00:23:38,126
by tapping on its Search Field,


764
00:23:39,296 --> 00:23:40,496
it gets hoisted to the top of


765
00:23:40,496 --> 00:23:42,596
the screen, but the content that


766
00:23:42,596 --> 00:23:44,186
was visible on the screen before


767
00:23:44,806 --> 00:23:45,606
remains visible.


768
00:23:46,216 --> 00:23:49,526
As you type, in this case the


769
00:23:49,526 --> 00:23:51,316
photos application displays


770
00:23:51,316 --> 00:23:53,056
results that match your partial


771
00:23:53,056 --> 00:23:55,956
search term, and this is


772
00:23:56,066 --> 00:23:57,206
implemented with a


773
00:23:57,206 --> 00:23:58,446
UIViewController that your


774
00:23:58,446 --> 00:24:00,346
application provides called the


775
00:24:00,346 --> 00:24:01,366
Search Results Controller.


776
00:24:01,806 --> 00:24:05,336
Not every application behaves


777
00:24:05,336 --> 00:24:05,726
this way.


778
00:24:06,406 --> 00:24:07,336
For example, the mail


779
00:24:07,336 --> 00:24:09,246
application, as soon as you tap


780
00:24:09,246 --> 00:24:11,436
on the Search Field provides a


781
00:24:11,436 --> 00:24:12,826
list of suggested searches.


782
00:24:15,336 --> 00:24:16,346
This is still a


783
00:24:16,346 --> 00:24:17,886
UISearchController's Search


784
00:24:17,886 --> 00:24:19,726
Results Controller, and we're


785
00:24:19,726 --> 00:24:20,756
making this functionality


786
00:24:20,756 --> 00:24:22,916
available to you in iOS 13 as


787
00:24:22,916 --> 00:24:23,216
well.


788
00:24:24,516 --> 00:24:29,396
[ Applause ]


789
00:24:29,896 --> 00:24:30,456
Just set the


790
00:24:30,456 --> 00:24:32,016
showsSearchResultsController


791
00:24:32,016 --> 00:24:34,216
property on your Search


792
00:24:34,216 --> 00:24:36,326
Controller to true, and you can


793
00:24:36,326 --> 00:24:37,746
manage the automatic behavior


794
00:24:38,016 --> 00:24:39,296
with automatically shows search


795
00:24:39,296 --> 00:24:40,316
results controller property.


796
00:24:42,356 --> 00:24:43,996
There's another big feature in


797
00:24:43,996 --> 00:24:44,496
Search.


798
00:24:46,576 --> 00:24:48,536
In Mail and Photos and other


799
00:24:48,536 --> 00:24:49,886
applications on the system,


800
00:24:50,546 --> 00:24:53,146
these suggested searches result


801
00:24:54,066 --> 00:24:56,066
in what we call a token, which


802
00:24:56,066 --> 00:24:58,756
is a visual representation of a


803
00:24:58,756 --> 00:25:00,176
more complicated search query.


804
00:25:00,766 --> 00:25:04,136
This functionality is available


805
00:25:04,136 --> 00:25:05,986
in your application on any


806
00:25:05,986 --> 00:25:07,526
instance of UISearchTextField


807
00:25:08,316 --> 00:25:10,296
via the new UISearchTokenAPI.


808
00:25:10,296 --> 00:25:12,836
And these tokens support Copy


809
00:25:12,836 --> 00:25:14,856
and Paste and Drag and Drop.


810
00:25:15,376 --> 00:25:16,686
It's the same implementation


811
00:25:16,776 --> 00:25:18,316
that we use for all of our


812
00:25:18,316 --> 00:25:18,976
applications.


813
00:25:19,516 --> 00:25:24,676
[ Applause ]


814
00:25:25,176 --> 00:25:27,716
For example, Photos uses it to


815
00:25:27,716 --> 00:25:29,956
provide saved or predicted


816
00:25:29,956 --> 00:25:32,816
searches for people, places, and


817
00:25:32,816 --> 00:25:33,366
objects.


818
00:25:34,756 --> 00:25:36,686
Tap on any of the entries in the


819
00:25:36,686 --> 00:25:39,106
SearchResultsController, and


820
00:25:39,106 --> 00:25:41,086
Photos transforms even a partial


821
00:25:41,086 --> 00:25:44,826
input into a token.


822
00:25:45,576 --> 00:25:47,216
As this is a subclass of


823
00:25:47,276 --> 00:25:49,156
UITextField, the tokens do


824
00:25:49,156 --> 00:25:50,596
interact with the text.


825
00:25:51,336 --> 00:25:53,626
In fact, they're always prior to


826
00:25:53,626 --> 00:25:54,296
the text.


827
00:25:55,726 --> 00:25:57,226
For example, if I pace the token


828
00:25:57,616 --> 00:25:59,376
into the search field, even


829
00:25:59,376 --> 00:26:00,856
though my insertion point is at


830
00:26:00,856 --> 00:26:02,626
the end of the search field, the


831
00:26:02,626 --> 00:26:03,906
token appears at the beginning,


832
00:26:05,436 --> 00:26:06,436
and as you can see here, the


833
00:26:06,436 --> 00:26:07,476
token is now selected.


834
00:26:08,716 --> 00:26:10,106
And I can extend the selection


835
00:26:10,576 --> 00:26:13,196
to include both the token and


836
00:26:14,096 --> 00:26:15,936
some text.


837
00:26:16,296 --> 00:26:18,506
Creating tokens is pretty easy.


838
00:26:19,716 --> 00:26:22,476
First, grab the selected text


839
00:26:22,476 --> 00:26:24,076
range to figure out what text


840
00:26:24,076 --> 00:26:25,766
you want to convert into a


841
00:26:26,416 --> 00:26:26,586
token.


842
00:26:26,726 --> 00:26:28,716
Create a UISearchToken object,


843
00:26:30,166 --> 00:26:31,746
and call this method on the


844
00:26:31,746 --> 00:26:33,836
SearchTextField to replace the


845
00:26:33,836 --> 00:26:35,496
textual portion of that range


846
00:26:35,856 --> 00:26:36,436
with a token.


847
00:26:37,706 --> 00:26:39,216
Your app is in complete control


848
00:26:39,446 --> 00:26:41,226
over the insertion and removal


849
00:26:41,226 --> 00:26:43,836
of tokens, so you can attach any


850
00:26:43,996 --> 00:26:48,746
meaning to them that you want.


851
00:26:48,746 --> 00:26:51,096
Now, UITextField conforms to a


852
00:26:51,096 --> 00:26:52,996
protocol called UITextInput.


853
00:26:54,026 --> 00:26:55,026
If you're doing programmatic


854
00:26:55,026 --> 00:26:57,266
selection, it's important to


855
00:26:57,266 --> 00:26:58,576
understand some aspects of


856
00:26:58,576 --> 00:27:01,956
UITextInput, namely ranges and


857
00:27:01,956 --> 00:27:02,616
positions.


858
00:27:03,986 --> 00:27:05,976
In a normal text field, every


859
00:27:05,976 --> 00:27:07,616
character is assigned a


860
00:27:07,616 --> 00:27:10,266
UITextPosition, and these


861
00:27:10,266 --> 00:27:12,396
positions are relative to two


862
00:27:12,396 --> 00:27:13,846
well-known positions at the


863
00:27:13,846 --> 00:27:16,126
beginning and the end of what we


864
00:27:16,126 --> 00:27:17,546
call the document, which is the


865
00:27:17,546 --> 00:27:18,546
search field's content.


866
00:27:19,136 --> 00:27:22,486
And you can use these positions


867
00:27:22,856 --> 00:27:24,876
to create UITextRanges.


868
00:27:25,396 --> 00:27:26,936
For example, to programmatically


869
00:27:26,936 --> 00:27:28,756
select a portion of the field's


870
00:27:28,756 --> 00:27:29,256
content.


871
00:27:31,316 --> 00:27:33,696
Because tokens are selectable,


872
00:27:34,096 --> 00:27:36,686
they too get UITextPositions.


873
00:27:37,246 --> 00:27:40,996
But the length of the text of a


874
00:27:40,996 --> 00:27:43,546
search field is now different


875
00:27:43,936 --> 00:27:45,556
from the distance from the


876
00:27:45,556 --> 00:27:47,246
beginning of the document to the


877
00:27:47,246 --> 00:27:48,956
last character's position.


878
00:27:50,096 --> 00:27:51,696
If this matters to you, for


879
00:27:51,696 --> 00:27:53,306
example, to programmatically


880
00:27:53,306 --> 00:27:55,046
select a portion of the text,


881
00:27:55,656 --> 00:27:58,166
UISearchTextField exports this


882
00:27:58,166 --> 00:28:00,136
new property, textualRange.


883
00:28:01,516 --> 00:28:02,076
The beginning of the


884
00:28:02,076 --> 00:28:04,046
textualRange is the first


885
00:28:04,416 --> 00:28:06,336
nontoken character in the field,


886
00:28:07,056 --> 00:28:08,436
and its end is the end of the


887
00:28:08,436 --> 00:28:08,866
document.


888
00:28:09,656 --> 00:28:10,986
These match up with character


889
00:28:10,986 --> 00:28:13,056
indexes in the text property.


890
00:28:13,686 --> 00:28:16,196
So, to take advantage of all of


891
00:28:16,196 --> 00:28:17,376
this new functionality in your


892
00:28:17,376 --> 00:28:19,066
application, take a look at the


893
00:28:19,066 --> 00:28:20,836
new properties and customization


894
00:28:20,836 --> 00:28:22,066
options available on


895
00:28:22,066 --> 00:28:22,946
UISearchController.


896
00:28:24,136 --> 00:28:26,316
Use UISearchTextField either


897
00:28:26,316 --> 00:28:27,906
inside the UISearchBar or


898
00:28:27,906 --> 00:28:29,196
anywhere else you can use a


899
00:28:29,196 --> 00:28:31,996
UITextField today, and customize


900
00:28:31,996 --> 00:28:33,246
it with all of the customization


901
00:28:33,246 --> 00:28:34,876
options that are available on


902
00:28:34,876 --> 00:28:35,516
UITextField.


903
00:28:36,696 --> 00:28:39,136
Adopt UISearchToken to represent


904
00:28:39,136 --> 00:28:41,106
complicated queries in a concise


905
00:28:41,106 --> 00:28:42,896
editable fashion that supports


906
00:28:42,896 --> 00:28:44,706
Copy and Paste and Drag and


907
00:28:45,336 --> 00:28:45,466
Drop.


908
00:28:46,176 --> 00:28:47,416
There's a lot of advanced


909
00:28:47,416 --> 00:28:48,696
techniques you can do with this,


910
00:28:49,016 --> 00:28:50,026
so we're going to have a sample


911
00:28:50,026 --> 00:28:51,916
project available soon at this


912
00:28:51,916 --> 00:28:53,246
session's website, that


913
00:28:53,246 --> 00:28:54,586
demonstrates how to use tokens


914
00:28:54,586 --> 00:28:55,146
effectively.


915
00:29:00,026 --> 00:29:00,596
Now, I'm going to hand it over


916
00:29:00,596 --> 00:29:01,276
to James, who's going to talk


917
00:29:01,276 --> 00:29:01,786
about Gestures.


918
00:29:02,516 --> 00:29:08,856
[ Applause ]


919
00:29:09,356 --> 00:29:10,016
>> Thanks Kyle.


920
00:29:10,806 --> 00:29:11,426
Hey everybody.


921
00:29:11,786 --> 00:29:13,836
I'm James Magahern, and I'm here


922
00:29:13,836 --> 00:29:15,186
to show you some new Gestures


923
00:29:15,186 --> 00:29:16,936
that we've added in iOS 13


924
00:29:17,266 --> 00:29:18,636
themed around selection,


925
00:29:18,716 --> 00:29:20,246
organization, and some common


926
00:29:20,246 --> 00:29:21,056
editing shortcuts.


927
00:29:21,846 --> 00:29:24,096
So this is everything I'm going


928
00:29:24,096 --> 00:29:25,226
to be talking about today.


929
00:29:25,576 --> 00:29:26,406
The best news you're going to


930
00:29:26,406 --> 00:29:27,576
hear all day is that a lot of


931
00:29:27,576 --> 00:29:28,696
this behavior is actually


932
00:29:28,696 --> 00:29:29,796
automatic, stuff that you're


933
00:29:29,796 --> 00:29:31,396
going to get for free, but I'm


934
00:29:31,396 --> 00:29:32,376
here to tell you about what's


935
00:29:32,376 --> 00:29:33,766
different and what you need to


936
00:29:33,766 --> 00:29:35,226
do in order to take full


937
00:29:35,226 --> 00:29:36,626
advantage of these new features


938
00:29:36,856 --> 00:29:37,906
inside of your application.


939
00:29:38,736 --> 00:29:39,696
So, let's start with some new


940
00:29:39,696 --> 00:29:41,336
features regarding text


941
00:29:41,336 --> 00:29:42,916
selection gestures in custom


942
00:29:42,916 --> 00:29:43,546
text views.


943
00:29:44,266 --> 00:29:46,606
So, as you know, there's a lot


944
00:29:46,606 --> 00:29:48,326
of really great existing ways to


945
00:29:48,326 --> 00:29:50,496
select text on iOS using


946
00:29:50,496 --> 00:29:50,956
Gestures.


947
00:29:51,726 --> 00:29:53,286
You can tap and hold to start


948
00:29:53,286 --> 00:29:54,846
highlighting right away, that's


949
00:29:54,846 --> 00:29:56,066
a new thing in iOS 13.


950
00:29:56,796 --> 00:29:57,936
You can long press to get the


951
00:29:57,936 --> 00:29:59,206
selection loop and move the


952
00:29:59,206 --> 00:30:01,036
insertion point around, and you


953
00:30:01,036 --> 00:30:02,886
can triple tap on a paragraph to


954
00:30:02,886 --> 00:30:04,066
select the entire paragraph all


955
00:30:04,066 --> 00:30:04,706
at once.


956
00:30:06,216 --> 00:30:08,086
So, these Gestures work great in


957
00:30:08,086 --> 00:30:09,736
native text widgets like


958
00:30:09,876 --> 00:30:11,776
UITextView and UITextField.


959
00:30:12,096 --> 00:30:12,846
You already get those.


960
00:30:14,346 --> 00:30:16,576
But, there might be some cases


961
00:30:16,906 --> 00:30:18,636
where you need to go beyond what


962
00:30:18,636 --> 00:30:19,996
TextView and TextField are


963
00:30:19,996 --> 00:30:20,596
capable of.


964
00:30:21,226 --> 00:30:22,256
Some of you need to implement


965
00:30:22,386 --> 00:30:24,066
highly customized text drawing


966
00:30:24,236 --> 00:30:24,746
in your apps.


967
00:30:26,156 --> 00:30:27,396
So, here's books as an example,


968
00:30:27,396 --> 00:30:28,696
where they use a completely


969
00:30:28,696 --> 00:30:30,326
customed text view to control


970
00:30:30,326 --> 00:30:32,126
the margins, character spacing,


971
00:30:32,126 --> 00:30:36,196
etc. So, currently, in order to


972
00:30:36,196 --> 00:30:37,766
get selection behavior like this


973
00:30:38,006 --> 00:30:40,166
in a custom text view, you had


974
00:30:40,166 --> 00:30:41,736
to manually add all of the


975
00:30:42,006 --> 00:30:43,586
system text selection Gestures


976
00:30:43,776 --> 00:30:45,496
to your app just to get parity


977
00:30:45,496 --> 00:30:46,506
with the native text widgets.


978
00:30:47,916 --> 00:30:48,846
Many of you also had to


979
00:30:48,846 --> 00:30:49,986
implement you own UI for


980
00:30:50,206 --> 00:30:51,886
selection, like the selection


981
00:30:51,886 --> 00:30:53,146
rectangles, the blue selection


982
00:30:53,146 --> 00:30:54,536
rectangles or the selection


983
00:30:54,536 --> 00:30:56,176
handles just to offer this


984
00:30:56,216 --> 00:30:56,706
behavior.


985
00:30:57,326 --> 00:30:59,586
So, I'm pleased to announce in


986
00:30:59,586 --> 00:31:01,956
iOS 13 this can be accomplished


987
00:31:01,956 --> 00:31:03,796
much easier with a new type of


988
00:31:03,796 --> 00:31:05,276
UIInteraction called


989
00:31:05,276 --> 00:31:06,326
UITextInteraction.


990
00:31:07,736 --> 00:31:08,616
So, in case you're not familiar


991
00:31:08,616 --> 00:31:10,106
with UIInteractions, you can


992
00:31:10,106 --> 00:31:10,856
think of them as a way to


993
00:31:10,856 --> 00:31:12,496
encapsulate sort of a set of


994
00:31:12,656 --> 00:31:14,786
behaviors and Gestures related


995
00:31:14,786 --> 00:31:15,916
to UIKit widgets.


996
00:31:16,386 --> 00:31:17,256
Think of Drag and Drop


997
00:31:17,256 --> 00:31:18,516
interactions, similar to that.


998
00:31:19,676 --> 00:31:21,166
So it's only three lines of code


999
00:31:21,846 --> 00:31:23,216
to add all of the system test


1000
00:31:23,216 --> 00:31:24,766
selection Gestures to your app,


1001
00:31:25,146 --> 00:31:26,106
the ones that your users are


1002
00:31:26,106 --> 00:31:26,936
already familiar with.


1003
00:31:27,966 --> 00:31:30,066
We provide a set of Gestures for


1004
00:31:30,066 --> 00:31:32,346
editable and noneditable text


1005
00:31:32,346 --> 00:31:34,726
interactions, and you can use


1006
00:31:34,726 --> 00:31:37,096
the UITextInputProtocol to get


1007
00:31:37,096 --> 00:31:39,326
more fine grain control over the


1008
00:31:39,326 --> 00:31:40,786
selection UI, like the


1009
00:31:40,876 --> 00:31:42,686
rectangles and the handles that


1010
00:31:42,686 --> 00:31:43,526
I was mentioning before.


1011
00:31:44,106 --> 00:31:47,176
So here's what you need to do to


1012
00:31:47,176 --> 00:31:48,236
get started with


1013
00:31:48,456 --> 00:31:50,266
UITextInteraction in your Custom


1014
00:31:50,266 --> 00:31:50,686
Text View.


1015
00:31:51,566 --> 00:31:52,656
So, as I said, it's only three


1016
00:31:52,656 --> 00:31:53,946
lines of code to do this, minus


1017
00:31:53,946 --> 00:31:54,406
the comments.


1018
00:31:55,676 --> 00:31:56,796
So you create the interaction


1019
00:31:56,866 --> 00:31:58,956
using UITextInteraction 4, and


1020
00:31:58,956 --> 00:31:59,926
let us know if you want the set


1021
00:31:59,926 --> 00:32:01,376
of Gestures for editable or


1022
00:32:01,376 --> 00:32:02,636
noneditable text fields.


1023
00:32:04,006 --> 00:32:05,506
Then assign the text input


1024
00:32:05,506 --> 00:32:06,946
property to your view that


1025
00:32:07,006 --> 00:32:07,646
implements the


1026
00:32:07,646 --> 00:32:09,116
UITextInputProtocol.


1027
00:32:09,666 --> 00:32:11,176
We keep this separate in case


1028
00:32:11,176 --> 00:32:12,296
you want Gestures to work on a


1029
00:32:12,296 --> 00:32:13,656
container view, like a scroll


1030
00:32:13,656 --> 00:32:15,236
view, but you want all of the


1031
00:32:15,236 --> 00:32:17,616
text selection behavior to get


1032
00:32:17,616 --> 00:32:19,176
handled by some contained view,


1033
00:32:19,226 --> 00:32:20,056
like the one that's actually


1034
00:32:20,056 --> 00:32:20,986
drawing the text.


1035
00:32:22,276 --> 00:32:23,206
And finally, just add the


1036
00:32:23,206 --> 00:32:24,706
interaction to your view with


1037
00:32:24,936 --> 00:32:25,596
Add Interaction.


1038
00:32:26,166 --> 00:32:29,966
Well, take a trip--


1039
00:32:30,516 --> 00:32:32,966
[ Applause ]


1040
00:32:33,466 --> 00:32:34,526
Take a trip with me over to this


1041
00:32:34,526 --> 00:32:35,376
side of the stage, and we'll


1042
00:32:35,376 --> 00:32:37,256
talk about multiple selection


1043
00:32:37,386 --> 00:32:39,186
Gestures in TableViews and


1044
00:32:39,186 --> 00:32:39,716
CollectionViews.


1045
00:32:40,526 --> 00:32:44,616
So we've long supported Multiple


1046
00:32:44,616 --> 00:32:45,916
Selection Mode in


1047
00:32:45,916 --> 00:32:47,146
UICollectionView and


1048
00:32:47,146 --> 00:32:47,896
UITableView.


1049
00:32:48,726 --> 00:32:50,226
Apps like Notes here have a


1050
00:32:50,226 --> 00:32:51,876
Select button on the top right


1051
00:32:51,876 --> 00:32:54,166
corner where users can tap it to


1052
00:32:54,166 --> 00:32:55,676
enter multiple selection mode


1053
00:32:56,096 --> 00:32:57,466
and then individually select


1054
00:32:57,736 --> 00:32:59,436
each individual note one by one


1055
00:32:59,656 --> 00:33:01,706
to group them together and then


1056
00:33:01,836 --> 00:33:03,276
organize them with Drag and Drop


1057
00:33:03,276 --> 00:33:04,556
or one of those action buttons


1058
00:33:04,556 --> 00:33:05,236
at the bottom there.


1059
00:33:05,766 --> 00:33:07,616
Well, I'm pleased to announce in


1060
00:33:07,616 --> 00:33:09,106
iOS 13 we're introducing a


1061
00:33:09,106 --> 00:33:11,316
totally new way of quickly


1062
00:33:11,316 --> 00:33:13,056
selecting a contiguous batch of


1063
00:33:13,056 --> 00:33:14,636
items in collection views and


1064
00:33:14,636 --> 00:33:15,016
table views.


1065
00:33:15,976 --> 00:33:16,606
So, let me show you what that


1066
00:33:16,606 --> 00:33:17,776
looks like here on this giant


1067
00:33:17,776 --> 00:33:18,006
iPad.


1068
00:33:19,026 --> 00:33:20,646
So now, users will be able to


1069
00:33:20,696 --> 00:33:22,576
instantly jump into multiple


1070
00:33:22,576 --> 00:33:24,376
selection mode by simply placing


1071
00:33:24,376 --> 00:33:25,996
two fingers down anywhere on a


1072
00:33:25,996 --> 00:33:28,066
table or collection view and pan


1073
00:33:28,066 --> 00:33:30,246
across to start selecting right


1074
00:33:30,246 --> 00:33:30,456
away.


1075
00:33:34,316 --> 00:33:36,296
Thanks, that's really awesome.


1076
00:33:36,296 --> 00:33:37,646
So, here you can see taking two


1077
00:33:37,646 --> 00:33:38,876
fingers and sliding down the


1078
00:33:38,876 --> 00:33:40,026
list view in files will


1079
00:33:40,076 --> 00:33:41,386
instantly put it into edit mode


1080
00:33:41,386 --> 00:33:42,436
and start selecting cells.


1081
00:33:43,916 --> 00:33:45,496
Even cooler, the same works for


1082
00:33:45,496 --> 00:33:46,576
a grid of items in a


1083
00:33:46,576 --> 00:33:48,596
UICollectionView flow layout, so


1084
00:33:48,596 --> 00:33:49,996
your users will be able to pan


1085
00:33:49,996 --> 00:33:51,376
two fingers across a grid of


1086
00:33:51,376 --> 00:33:52,656
items and select a bunch of


1087
00:33:52,656 --> 00:33:53,796
things all at once.


1088
00:33:54,446 --> 00:33:55,726
This is absolutely a dream come


1089
00:33:55,726 --> 00:33:56,716
true for Drag and Drop.


1090
00:33:57,226 --> 00:34:01,316
Not to mention, if your users


1091
00:34:01,316 --> 00:34:02,266
have a hardware keyboard


1092
00:34:02,266 --> 00:34:03,966
attached, they can also hold the


1093
00:34:03,966 --> 00:34:05,956
shift or command key to tap on


1094
00:34:05,956 --> 00:34:07,416
other items, and it behaves just


1095
00:34:07,416 --> 00:34:08,966
like it does on macOS.


1096
00:34:10,246 --> 00:34:10,396
Thanks.


1097
00:34:11,516 --> 00:34:14,656
[ Applause ]


1098
00:34:15,156 --> 00:34:16,556
And now especially that your


1099
00:34:16,556 --> 00:34:18,106
iPad apps can run on the Mac,


1100
00:34:18,346 --> 00:34:19,966
your table views can feel right


1101
00:34:20,696 --> 00:34:22,406
at home.


1102
00:34:22,626 --> 00:34:24,326
So, these awesome new behaviors


1103
00:34:24,326 --> 00:34:26,216
are currently opt in, and the


1104
00:34:26,216 --> 00:34:27,576
reason why is because your app


1105
00:34:27,666 --> 00:34:29,216
might need to adapt around the


1106
00:34:29,216 --> 00:34:30,786
fact that your user intends to


1107
00:34:30,786 --> 00:34:32,216
enter multiple selection mode.


1108
00:34:33,036 --> 00:34:33,876
For instance, you might want to


1109
00:34:33,876 --> 00:34:35,696
change the select or edit button


1110
00:34:35,696 --> 00:34:37,335
to say cancel or done instead.


1111
00:34:38,146 --> 00:34:39,136
You might want to show action


1112
00:34:39,136 --> 00:34:40,076
buttons at the bottom of the


1113
00:34:40,076 --> 00:34:41,826
screen for stuff to do with the


1114
00:34:41,826 --> 00:34:43,085
things that your user selected,


1115
00:34:43,735 --> 00:34:44,886
or you might to disable some UI


1116
00:34:44,886 --> 00:34:46,676
like the add not button in this


1117
00:34:46,716 --> 00:34:47,005
case.


1118
00:34:47,786 --> 00:34:50,216
So, to account for this, we're


1119
00:34:50,216 --> 00:34:51,626
adding just a couple of new APIs


1120
00:34:51,766 --> 00:34:53,186
to help you adapt to these new


1121
00:34:53,186 --> 00:34:53,726
behaviors.


1122
00:34:54,516 --> 00:34:55,376
It's really easy.


1123
00:34:55,446 --> 00:34:56,516
There's only two delegate


1124
00:34:56,516 --> 00:34:57,736
methods to implement, and


1125
00:34:57,996 --> 00:34:59,296
there's roughly equivalent


1126
00:34:59,296 --> 00:35:01,186
versions on both Table View and


1127
00:35:01,186 --> 00:35:01,826
Collection View.


1128
00:35:02,406 --> 00:35:04,546
So here they are.


1129
00:35:05,656 --> 00:35:06,956
The first one to implement is


1130
00:35:06,956 --> 00:35:08,256
just Should Begin Multiple


1131
00:35:08,256 --> 00:35:09,756
Selection Interaction at Index


1132
00:35:09,756 --> 00:35:10,346
Path.


1133
00:35:10,346 --> 00:35:11,836
Or you can return true if you


1134
00:35:11,836 --> 00:35:12,886
would like to allow the gesture


1135
00:35:12,886 --> 00:35:13,346
to begin.


1136
00:35:14,196 --> 00:35:15,456
And we give you the index path


1137
00:35:15,456 --> 00:35:17,066
here in case you'd like to


1138
00:35:17,066 --> 00:35:18,366
prevent the selection from


1139
00:35:18,366 --> 00:35:19,486
beginning on a part of your


1140
00:35:19,486 --> 00:35:20,336
table view that's not


1141
00:35:20,336 --> 00:35:21,686
selectable, in which case you


1142
00:35:21,686 --> 00:35:22,746
can just return false.


1143
00:35:23,336 --> 00:35:25,576
And the second method to


1144
00:35:25,576 --> 00:35:27,106
implement is did begin multiple


1145
00:35:27,106 --> 00:35:28,546
selection interaction at index


1146
00:35:28,546 --> 00:35:30,566
path, where you can adapt your


1147
00:35:30,566 --> 00:35:32,046
surrounding UI to account for


1148
00:35:32,046 --> 00:35:34,256
the fact that the TableView was


1149
00:35:34,256 --> 00:35:35,806
automatically put into Multiple


1150
00:35:35,806 --> 00:35:37,086
Selection Mode, just like we're


1151
00:35:37,086 --> 00:35:38,496
talking about on the previous


1152
00:35:38,976 --> 00:35:39,106
slide.


1153
00:35:41,736 --> 00:35:43,636
So moving on, the last thing I


1154
00:35:43,636 --> 00:35:44,526
want to talk about is just


1155
00:35:44,526 --> 00:35:46,176
briefly cover some enhancements


1156
00:35:46,176 --> 00:35:47,606
that we've made to some common


1157
00:35:47,606 --> 00:35:49,256
editing tasks using some new


1158
00:35:49,256 --> 00:35:49,726
gestures.


1159
00:35:50,486 --> 00:35:53,776
So, in iOS 13, we're introducing


1160
00:35:53,776 --> 00:35:55,446
a standard set of Gestures to


1161
00:35:55,446 --> 00:35:56,746
make it easier to do some common


1162
00:35:56,746 --> 00:35:57,626
editing tasks.


1163
00:35:58,316 --> 00:35:59,806
For example, using three


1164
00:35:59,806 --> 00:36:01,466
fingers, users can now swipe


1165
00:36:01,616 --> 00:36:04,346
back to undo and then swipe the


1166
00:36:04,346 --> 00:36:05,936
other way to redo.


1167
00:36:07,876 --> 00:36:10,036
Pinching three fingers in will


1168
00:36:10,036 --> 00:36:12,856
copy, and then pinching them out


1169
00:36:13,236 --> 00:36:14,506
will paste.


1170
00:36:17,676 --> 00:36:19,526
So, we're bringing this standard


1171
00:36:19,526 --> 00:36:21,346
set of productivity gestures to


1172
00:36:21,346 --> 00:36:22,716
the system so that you don't


1173
00:36:22,716 --> 00:36:24,006
have to worry about implementing


1174
00:36:24,006 --> 00:36:25,446
UI for these common editing


1175
00:36:25,446 --> 00:36:25,936
commands.


1176
00:36:26,566 --> 00:36:27,866
It's unified across the whole


1177
00:36:27,866 --> 00:36:29,746
system so your customers will be


1178
00:36:29,746 --> 00:36:31,176
able to discover right away


1179
00:36:31,176 --> 00:36:32,416
within your app, and they'll be


1180
00:36:32,416 --> 00:36:33,456
instantly familiar with it.


1181
00:36:34,176 --> 00:36:35,376
It's really great for drawing


1182
00:36:35,376 --> 00:36:36,496
apps because you don't need to


1183
00:36:36,496 --> 00:36:38,076
show any floating panels or


1184
00:36:38,076 --> 00:36:39,446
Toolbars in order to offer this


1185
00:36:39,446 --> 00:36:39,936
behavior.


1186
00:36:40,626 --> 00:36:42,356
And best of all, it's completely


1187
00:36:42,356 --> 00:36:43,976
free if you're already using


1188
00:36:43,976 --> 00:36:46,216
undo manager or NS undo manager.


1189
00:36:47,616 --> 00:36:49,536
So, my call to action here is


1190
00:36:49,536 --> 00:36:51,516
for you to try these gestures in


1191
00:36:51,516 --> 00:36:53,156
your app when you get a chance


1192
00:36:53,156 --> 00:36:54,136
and make sure that they work


1193
00:36:54,136 --> 00:36:54,746
really well.


1194
00:36:56,036 --> 00:36:57,966
But just in case, I can see some


1195
00:36:57,966 --> 00:36:59,506
of you are nervous, so just in


1196
00:36:59,506 --> 00:37:01,516
case they conflict with other


1197
00:37:01,516 --> 00:37:02,736
three-finger gestures that you


1198
00:37:02,736 --> 00:37:03,746
might have within your app,


1199
00:37:04,516 --> 00:37:06,096
we're offering an escape hatch


1200
00:37:06,096 --> 00:37:07,186
via some new API.


1201
00:37:07,966 --> 00:37:10,656
It's just a simple property that


1202
00:37:10,656 --> 00:37:12,396
you override on UIResponder


1203
00:37:12,606 --> 00:37:12,956
called


1204
00:37:12,956 --> 00:37:14,446
EditingInteractionConfiguration,


1205
00:37:14,966 --> 00:37:16,286
where you can return none if


1206
00:37:16,286 --> 00:37:17,586
you'd like to opt out of these


1207
00:37:17,586 --> 00:37:18,016
gestures.


1208
00:37:19,456 --> 00:37:21,166
So here's the takeaway, I hope,


1209
00:37:21,366 --> 00:37:21,866
for today.


1210
00:37:22,486 --> 00:37:24,116
Finally offer system-wide


1211
00:37:24,186 --> 00:37:25,766
standard text selection gestures


1212
00:37:26,316 --> 00:37:27,626
in your customized text widgets.


1213
00:37:28,076 --> 00:37:29,836
Change the way your users


1214
00:37:29,836 --> 00:37:31,516
organize information in your app


1215
00:37:31,946 --> 00:37:33,076
using multiple selection


1216
00:37:33,076 --> 00:37:33,456
gestures.


1217
00:37:33,456 --> 00:37:34,576
I really hope you adopt that


1218
00:37:34,576 --> 00:37:34,776
one.


1219
00:37:36,236 --> 00:37:37,546
And finally, allow your users to


1220
00:37:37,546 --> 00:37:39,296
stop shaking their iPad and


1221
00:37:39,296 --> 00:37:41,316
control the undo stack with a


1222
00:37:41,316 --> 00:37:42,376
standard set of gestures.


1223
00:37:43,336 --> 00:37:45,336
[ Applause ]


1224
00:37:45,696 --> 00:37:47,216
Yeah, it hurts.


1225
00:37:48,136 --> 00:37:49,026
So, thanks.


1226
00:37:49,026 --> 00:37:49,916
Now I'd like to hand it off to


1227
00:37:49,916 --> 00:37:51,326
Mohammed to talk about menus.


1228
00:37:52,516 --> 00:37:57,726
[ Applause ]


1229
00:37:58,226 --> 00:37:58,456
>> All right.


1230
00:37:58,456 --> 00:37:59,086
Thanks James.


1231
00:38:00,946 --> 00:38:01,826
Hi everyone.


1232
00:38:01,826 --> 00:38:03,556
I'm Mohammed, and I'm excited to


1233
00:38:03,556 --> 00:38:05,196
talk to you about some powerful


1234
00:38:05,196 --> 00:38:06,956
new APIs we're introducing in


1235
00:38:07,106 --> 00:38:09,546
iOS 13 that allow you to present


1236
00:38:09,896 --> 00:38:12,236
fluid interactive menus with


1237
00:38:12,236 --> 00:38:14,436
rich previews in your apps.


1238
00:38:15,696 --> 00:38:17,706
The first of these APIs is


1239
00:38:17,706 --> 00:38:19,616
UIContextMenuInteraction.


1240
00:38:21,936 --> 00:38:24,076
UIContextMenuInteraction is a


1241
00:38:24,076 --> 00:38:26,266
UIInteraction that lets you


1242
00:38:26,266 --> 00:38:28,246
present menus with rich previews


1243
00:38:28,546 --> 00:38:30,146
and complex hierarchies.


1244
00:38:31,076 --> 00:38:32,166
These hierarchies can have


1245
00:38:32,196 --> 00:38:34,436
nested sub-menus and in-line


1246
00:38:34,436 --> 00:38:35,066
sections.


1247
00:38:35,216 --> 00:38:36,346
We'll see what that means later


1248
00:38:37,076 --> 00:38:37,146
on.


1249
00:38:38,416 --> 00:38:40,046
The menu presented by the center


1250
00:38:40,046 --> 00:38:41,676
action is highly adaptive,


1251
00:38:42,386 --> 00:38:44,086
meaning it'll do the right thing


1252
00:38:44,086 --> 00:38:45,416
depending on the context in


1253
00:38:45,416 --> 00:38:46,156
which it's presented.


1254
00:38:47,216 --> 00:38:48,976
So, here we see it on an iPhone


1255
00:38:48,976 --> 00:38:49,536
in portrait.


1256
00:38:49,756 --> 00:38:51,226
We have the preview and the


1257
00:38:51,226 --> 00:38:52,436
actions kind of vertically


1258
00:38:52,436 --> 00:38:53,646
stacked above one another.


1259
00:38:54,216 --> 00:38:57,526
On an iPhone in landscape, we


1260
00:38:57,526 --> 00:38:58,866
get the preview and the action


1261
00:38:58,866 --> 00:39:00,596
side by side to better take


1262
00:39:00,596 --> 00:39:01,656
advantage of the available


1263
00:39:01,656 --> 00:39:02,216
space.


1264
00:39:02,666 --> 00:39:06,796
And on an iPad, it reconfigures


1265
00:39:06,796 --> 00:39:08,376
itself depending on the


1266
00:39:08,376 --> 00:39:10,166
available space and size of its


1267
00:39:10,216 --> 00:39:11,536
preview and actions list.


1268
00:39:12,026 --> 00:39:15,026
And since this is a


1269
00:39:15,026 --> 00:39:16,996
cross-platform API, if you're


1270
00:39:16,996 --> 00:39:19,366
running your app on the Mac, it


1271
00:39:19,366 --> 00:39:21,046
turns into a familiar macOS


1272
00:39:21,246 --> 00:39:21,916
context menu.


1273
00:39:25,616 --> 00:39:27,066
The interaction provides a


1274
00:39:27,066 --> 00:39:29,586
consistent experience by


1275
00:39:29,756 --> 00:39:31,556
presenting the menu using the


1276
00:39:31,556 --> 00:39:33,816
same gesture throughout iOS.


1277
00:39:35,156 --> 00:39:36,556
So users will come to expect


1278
00:39:36,636 --> 00:39:38,436
that this gesture brings up a


1279
00:39:38,436 --> 00:39:41,846
menu anywhere in the system.


1280
00:39:41,976 --> 00:39:43,726
The gesture will adapt to the


1281
00:39:43,726 --> 00:39:44,866
device's capabilities.


1282
00:39:45,596 --> 00:39:48,026
So, on phones with 3D touch, we


1283
00:39:48,026 --> 00:39:49,306
will use 3D touch to bring up


1284
00:39:49,306 --> 00:39:50,896
the menu quickly and provide


1285
00:39:50,896 --> 00:39:51,596
some nice feedback.


1286
00:39:52,356 --> 00:39:54,736
On phones without 3D touch


1287
00:39:54,736 --> 00:39:56,136
capability, we'll use Haptic


1288
00:39:56,206 --> 00:39:57,806
Touch, and we'll keep that nice


1289
00:39:57,836 --> 00:39:59,156
feedback whenever the menu pops


1290
00:39:59,876 --> 00:39:59,946
up.


1291
00:40:00,496 --> 00:40:02,586
On other iOS devices, we'll use


1292
00:40:02,586 --> 00:40:05,086
a long press, and on the Mac,


1293
00:40:05,256 --> 00:40:06,736
it'll be your user's secondary


1294
00:40:06,736 --> 00:40:07,466
click setting.


1295
00:40:07,466 --> 00:40:09,336
So, a right click or a command


1296
00:40:09,336 --> 00:40:12,946
click or two-finger tap.


1297
00:40:15,636 --> 00:40:17,366
The interaction is automatically


1298
00:40:17,366 --> 00:40:18,756
integrated with other system


1299
00:40:18,756 --> 00:40:20,536
behaviors like Drag and Drop.


1300
00:40:21,516 --> 00:40:22,476
So if you've adopted


1301
00:40:22,526 --> 00:40:24,616
UIDragInteraction in your app


1302
00:40:24,786 --> 00:40:26,036
and you choose to adopt


1303
00:40:26,036 --> 00:40:27,666
UIContextMenuInteraction


1304
00:40:27,806 --> 00:40:30,286
alongside it, users will be able


1305
00:40:30,286 --> 00:40:32,136
to transition into dragging at


1306
00:40:32,186 --> 00:40:32,696
any point.


1307
00:40:33,886 --> 00:40:35,926
So, here we see as soon as that


1308
00:40:35,926 --> 00:40:37,476
initial threshold for dragging


1309
00:40:37,476 --> 00:40:39,436
is met, you're able to move your


1310
00:40:39,436 --> 00:40:42,126
finger to drag the photo over to


1311
00:40:42,126 --> 00:40:43,386
the files app.


1312
00:40:44,336 --> 00:40:45,986
However, if you wait a little


1313
00:40:45,986 --> 00:40:47,726
bit longer under the menu is


1314
00:40:47,766 --> 00:40:49,676
presented, you're still able to


1315
00:40:49,896 --> 00:40:51,936
transition smoothly into a drag


1316
00:40:52,376 --> 00:40:53,746
without removing your finger


1317
00:40:53,746 --> 00:40:54,396
from the screen.


1318
00:40:55,536 --> 00:40:57,356
So users have this nice fluid


1319
00:40:57,356 --> 00:40:58,536
continuous experience.


1320
00:40:59,056 --> 00:41:03,856
The second part of our API


1321
00:41:03,936 --> 00:41:06,306
package today is UIMenu and


1322
00:41:06,306 --> 00:41:07,186
UIAction.


1323
00:41:08,866 --> 00:41:11,666
UIMenu and UIAction are a


1324
00:41:12,096 --> 00:41:14,076
hierarchical menu construction


1325
00:41:14,176 --> 00:41:16,936
system that allows us to define


1326
00:41:17,086 --> 00:41:18,496
and describe the menu


1327
00:41:18,496 --> 00:41:20,536
hierarchies that we're going to


1328
00:41:21,106 --> 00:41:22,876
want to display.


1329
00:41:22,876 --> 00:41:24,116
UIMenus are composable.


1330
00:41:24,176 --> 00:41:25,456
They're basically like building


1331
00:41:25,456 --> 00:41:26,856
blocks that we can put together


1332
00:41:27,116 --> 00:41:28,456
in different configurations to


1333
00:41:28,456 --> 00:41:29,736
describe different menu


1334
00:41:29,736 --> 00:41:30,366
hierarchies.


1335
00:41:33,486 --> 00:41:35,166
So, in a simple example here,


1336
00:41:35,166 --> 00:41:37,796
I've created a two action menu


1337
00:41:38,036 --> 00:41:40,646
by creating a UIMenu and passing


1338
00:41:40,646 --> 00:41:43,386
it to UIAction children, a share


1339
00:41:43,386 --> 00:41:45,156
action and a delete action.


1340
00:41:45,156 --> 00:41:47,776
If I want to add a little bit


1341
00:41:47,816 --> 00:41:49,576
more functionality to my menu by


1342
00:41:49,576 --> 00:41:51,676
say adding a sub-menu, all I


1343
00:41:51,676 --> 00:41:54,056
need to do is create another


1344
00:41:54,056 --> 00:41:56,656
UIMenu, give it some descriptive


1345
00:41:56,706 --> 00:41:58,726
title to display at the previous


1346
00:41:58,756 --> 00:42:01,176
level in the hierarchy, and pass


1347
00:42:01,176 --> 00:42:02,456
it the desired children.


1348
00:42:02,536 --> 00:42:04,166
So here I've chose to include a


1349
00:42:04,216 --> 00:42:06,226
copy and a duplicate action.


1350
00:42:09,326 --> 00:42:10,986
So, when we present it, the menu


1351
00:42:10,986 --> 00:42:11,996
looks something like this.


1352
00:42:12,586 --> 00:42:16,346
We have a Share action at the


1353
00:42:16,346 --> 00:42:18,686
top, our edit action for our


1354
00:42:18,686 --> 00:42:21,176
sub-menu in the middle, and a


1355
00:42:21,176 --> 00:42:22,796
delete action at the bottom.


1356
00:42:23,506 --> 00:42:26,676
When the user taps edit, our


1357
00:42:26,676 --> 00:42:28,176
sub-menu is presented, and our


1358
00:42:28,226 --> 00:42:30,686
copy and duplicate actions pop


1359
00:42:33,256 --> 00:42:33,356
in.


1360
00:42:33,576 --> 00:42:34,796
Adopting the interaction in your


1361
00:42:34,796 --> 00:42:36,036
app is pretty straightforward.


1362
00:42:37,266 --> 00:42:39,136
If you've adopted other


1363
00:42:39,136 --> 00:42:40,616
UIInteractions in your app like


1364
00:42:40,616 --> 00:42:42,386
UIDragInteraction or some of the


1365
00:42:42,386 --> 00:42:43,686
TextInteractions that are being


1366
00:42:43,686 --> 00:42:45,056
introduced this year, this


1367
00:42:45,056 --> 00:42:46,096
pattern should be really


1368
00:42:46,096 --> 00:42:46,776
familiar to you.


1369
00:42:46,776 --> 00:42:48,856
The first thing well need to do


1370
00:42:48,856 --> 00:42:49,866
is just create a


1371
00:42:49,866 --> 00:42:51,806
UIContextMenuInteraction with


1372
00:42:51,806 --> 00:42:53,486
some object as its delegate.


1373
00:42:53,836 --> 00:42:54,706
So, this could be our View


1374
00:42:54,706 --> 00:42:55,626
Controller, for example.


1375
00:42:57,126 --> 00:42:58,576
Then we'll need to attach it to


1376
00:42:58,576 --> 00:43:00,486
some view using UIView's


1377
00:43:00,486 --> 00:43:02,226
addInteraction method.


1378
00:43:04,056 --> 00:43:05,566
Once we've done that, we'll need


1379
00:43:05,566 --> 00:43:07,076
to conform to the interaction's


1380
00:43:07,146 --> 00:43:07,976
delegate protocol.


1381
00:43:08,536 --> 00:43:10,866
The protocol has a single


1382
00:43:10,866 --> 00:43:12,776
required method that is called


1383
00:43:12,776 --> 00:43:14,306
when the interaction is about to


1384
00:43:14,306 --> 00:43:14,676
begin.


1385
00:43:15,886 --> 00:43:17,316
It's the app's job at this point


1386
00:43:17,366 --> 00:43:19,416
to either return a configuration


1387
00:43:19,466 --> 00:43:21,376
to start the interaction or


1388
00:43:21,376 --> 00:43:23,516
return nil to indicate that


1389
00:43:23,516 --> 00:43:25,116
there's no menu to be presented


1390
00:43:25,166 --> 00:43:26,296
for the current location.


1391
00:43:30,196 --> 00:43:31,886
The configuration object is how


1392
00:43:31,886 --> 00:43:32,846
we're going to describe our


1393
00:43:32,846 --> 00:43:33,206
menu.


1394
00:43:34,216 --> 00:43:36,476
It has an identifier.


1395
00:43:36,916 --> 00:43:38,166
The identifier is optional.


1396
00:43:38,166 --> 00:43:39,936
It's for you to use to be able


1397
00:43:39,936 --> 00:43:42,516
to identify the interaction


1398
00:43:42,576 --> 00:43:43,746
throughout its lifecycle,


1399
00:43:44,716 --> 00:43:46,616
throughout the various delegate


1400
00:43:46,616 --> 00:43:48,266
callbacks that you might get.


1401
00:43:49,326 --> 00:43:51,586
It also has a previewProvider


1402
00:43:51,586 --> 00:43:52,946
and action provider closure.


1403
00:43:53,726 --> 00:43:55,486
Both of these are called when


1404
00:43:55,486 --> 00:43:56,396
the menu is about to be


1405
00:43:56,396 --> 00:43:56,866
presented.


1406
00:43:57,406 --> 00:43:58,916
This allows us to defer the


1407
00:43:58,916 --> 00:44:00,626
potentially expensive work of


1408
00:44:00,626 --> 00:44:01,976
actually building up the menu


1409
00:44:01,976 --> 00:44:03,496
and the preview until they're


1410
00:44:03,496 --> 00:44:04,846
actually needed.


1411
00:44:06,666 --> 00:44:07,886
So, in the example that we just


1412
00:44:07,886 --> 00:44:10,206
looked at, our menu doesn't have


1413
00:44:10,206 --> 00:44:11,346
that large rich preview.


1414
00:44:11,346 --> 00:44:13,276
It just has some actions, so


1415
00:44:13,276 --> 00:44:15,636
we're going to focus on creating


1416
00:44:15,636 --> 00:44:16,606
an actionProvider in our


1417
00:44:16,606 --> 00:44:17,706
implementation of the delegate


1418
00:44:17,706 --> 00:44:18,006
method.


1419
00:44:18,626 --> 00:44:22,906
So the actionProvider, when


1420
00:44:22,906 --> 00:44:26,316
called, has a list of suggested


1421
00:44:26,316 --> 00:44:27,676
actions that are passed to it by


1422
00:44:27,676 --> 00:44:28,186
the system.


1423
00:44:28,706 --> 00:44:32,486
This can be a mix of UIMenus and


1424
00:44:32,486 --> 00:44:34,646
UIActions, so potentially a


1425
00:44:34,646 --> 00:44:36,536
fully constructed hierarchy that


1426
00:44:36,536 --> 00:44:38,156
are picked up from the system.


1427
00:44:38,626 --> 00:44:40,006
These could be things that you


1428
00:44:40,006 --> 00:44:41,476
defined in your responder chain


1429
00:44:41,476 --> 00:44:43,166
using the new UI command API


1430
00:44:43,306 --> 00:44:46,196
being introduced in iOS 13 or


1431
00:44:46,196 --> 00:44:47,856
things that are offered by other


1432
00:44:47,856 --> 00:44:48,906
system components.


1433
00:44:49,466 --> 00:44:52,696
So we're doing a fully custom


1434
00:44:52,696 --> 00:44:53,976
menu here, so we're going to put


1435
00:44:53,976 --> 00:44:55,236
the suggested actions aside.


1436
00:44:56,746 --> 00:44:58,276
First, we'll create our edit


1437
00:44:58,276 --> 00:44:58,716
menu.


1438
00:44:58,956 --> 00:45:01,286
We'll just create a UIMenu with


1439
00:45:01,286 --> 00:45:03,146
the title Edit, and we'll pass


1440
00:45:03,146 --> 00:45:05,076
the two children that want it to


1441
00:45:05,076 --> 00:45:07,306
have, a UIAction, with the title


1442
00:45:07,306 --> 00:45:09,046
Copy, and a UIAction with the


1443
00:45:09,046 --> 00:45:09,776
title Duplicate.


1444
00:45:12,836 --> 00:45:15,826
Then we'll define our root menu.


1445
00:45:16,876 --> 00:45:18,996
It often doesn't make sense for


1446
00:45:19,196 --> 00:45:20,846
a root menu to have a title, so


1447
00:45:20,846 --> 00:45:21,966
we'll skip it here.


1448
00:45:22,846 --> 00:45:24,146
However, if you do want to pass


1449
00:45:24,146 --> 00:45:25,726
it a title, it'll be displayed


1450
00:45:25,726 --> 00:45:27,146
as a header above the actions


1451
00:45:27,146 --> 00:45:27,556
list.


1452
00:45:28,006 --> 00:45:30,806
And we'll pass it three children


1453
00:45:30,806 --> 00:45:33,246
here, a share action, the edit


1454
00:45:33,246 --> 00:45:34,866
menu that we just created, and


1455
00:45:34,916 --> 00:45:36,736
finally a delete action with a


1456
00:45:36,736 --> 00:45:38,736
destructive style to indicate to


1457
00:45:38,736 --> 00:45:40,696
our users that the action has


1458
00:45:40,726 --> 00:45:41,866
destructive consequences.


1459
00:45:44,076 --> 00:45:45,626
Finally, we'll create a


1460
00:45:45,626 --> 00:45:47,146
configuration with some


1461
00:45:47,146 --> 00:45:49,036
identifier and pass it our


1462
00:45:49,036 --> 00:45:49,746
action provider.


1463
00:45:49,746 --> 00:45:51,436
And that's it.


1464
00:45:51,436 --> 00:45:53,806
That's really all it takes to


1465
00:45:53,806 --> 00:45:56,006
create and display menus using


1466
00:45:56,006 --> 00:45:57,606
UIContextMenuInteraction.


1467
00:45:58,186 --> 00:46:02,066
But with a little bit more work,


1468
00:46:03,346 --> 00:46:04,846
we can take advantage of some of


1469
00:46:04,846 --> 00:46:06,606
the animation customization APIs


1470
00:46:07,376 --> 00:46:08,616
offered by the interaction


1471
00:46:08,616 --> 00:46:10,596
delegate to build some really


1472
00:46:10,596 --> 00:46:11,806
great, highly polished


1473
00:46:11,806 --> 00:46:13,486
animations that really


1474
00:46:13,486 --> 00:46:14,526
communicate meaning to our


1475
00:46:14,526 --> 00:46:15,066
users.


1476
00:46:18,296 --> 00:46:19,786
So, in this example here, I've


1477
00:46:19,786 --> 00:46:21,116
taken the same menu that we had


1478
00:46:21,116 --> 00:46:23,356
earlier, and I've used the


1479
00:46:23,356 --> 00:46:24,746
source presentation


1480
00:46:24,826 --> 00:46:27,176
customization API to make the


1481
00:46:27,176 --> 00:46:30,016
menu appear from the cell's icon


1482
00:46:30,016 --> 00:46:32,626
instead of from the entire cell,


1483
00:46:32,626 --> 00:46:34,886
and I've even customized the


1484
00:46:34,886 --> 00:46:36,486
background color and even given


1485
00:46:36,756 --> 00:46:38,896
the preview a nice circular


1486
00:46:39,806 --> 00:46:39,906
shape.


1487
00:46:41,276 --> 00:46:43,276
These customization APIs are


1488
00:46:43,276 --> 00:46:45,426
built on a UITargetedPreview.


1489
00:46:45,796 --> 00:46:47,366
This is a new API that's being


1490
00:46:47,366 --> 00:46:49,386
introduced in iOS 13.


1491
00:46:50,066 --> 00:46:50,866
Now, if you've adopted


1492
00:46:50,866 --> 00:46:52,066
UIDragInteraction and


1493
00:46:52,066 --> 00:46:53,796
UIDropInteraction, and you built


1494
00:46:53,796 --> 00:46:55,386
some custom Drag or Drop


1495
00:46:55,436 --> 00:46:57,046
Previews in your app, then this


1496
00:46:57,046 --> 00:46:58,196
is probably very familiar.


1497
00:46:59,316 --> 00:47:00,276
We've essentially taken


1498
00:47:00,276 --> 00:47:02,106
UITargetedDragPreview and


1499
00:47:02,106 --> 00:47:03,756
generalized it into a more


1500
00:47:04,136 --> 00:47:05,836
general API that can be used by


1501
00:47:05,896 --> 00:47:06,856
other interactions.


1502
00:47:08,326 --> 00:47:10,096
UITargetedDragPreview is now a


1503
00:47:10,156 --> 00:47:12,136
subclass of UITargetedPreview.


1504
00:47:12,416 --> 00:47:14,096
So, if you already have


1505
00:47:14,416 --> 00:47:16,416
meaningful drag previews that


1506
00:47:16,526 --> 00:47:17,756
make sense for your menus


1507
00:47:17,756 --> 00:47:19,236
because they're triggered from


1508
00:47:19,236 --> 00:47:21,116
the same item, then you can


1509
00:47:21,116 --> 00:47:22,426
reuse that code without doing


1510
00:47:22,426 --> 00:47:23,786
any extra work.


1511
00:47:27,176 --> 00:47:29,106
To make adopting this in your


1512
00:47:29,106 --> 00:47:30,656
apps even easier, to make it


1513
00:47:30,656 --> 00:47:31,986
easier for you to bring up menus


1514
00:47:31,986 --> 00:47:32,796
in some of the most common


1515
00:47:32,796 --> 00:47:34,656
cases, we're also introducing


1516
00:47:34,656 --> 00:47:36,176
some convenience API for


1517
00:47:36,176 --> 00:47:37,346
UICollectionView and


1518
00:47:37,346 --> 00:47:38,246
UITableView.


1519
00:47:39,436 --> 00:47:40,816
All that's needed to bring up a


1520
00:47:40,816 --> 00:47:42,916
menu from your app, from your


1521
00:47:42,916 --> 00:47:45,706
Table View on all the platforms


1522
00:47:45,706 --> 00:47:47,056
that your app runs on is to


1523
00:47:47,056 --> 00:47:48,766
implement a single extra method


1524
00:47:48,766 --> 00:47:49,526
on its delegate.


1525
00:47:50,556 --> 00:47:52,296
Here, you'll once again return a


1526
00:47:52,296 --> 00:47:53,566
configuration if you have a menu


1527
00:47:53,566 --> 00:47:56,246
to display or return nil to


1528
00:47:56,246 --> 00:47:57,216
indicate that there's nothing to


1529
00:47:57,216 --> 00:47:57,586
be shown.


1530
00:47:59,416 --> 00:48:00,946
So, out of the box, these


1531
00:48:00,946 --> 00:48:02,366
convenience APIs give you some


1532
00:48:02,366 --> 00:48:04,956
polished default animations with


1533
00:48:04,956 --> 00:48:06,766
menus presenting from Table or


1534
00:48:06,766 --> 00:48:07,896
Collection View cells and then


1535
00:48:07,896 --> 00:48:09,116
returning back to them when


1536
00:48:09,116 --> 00:48:09,646
dismissed.


1537
00:48:10,266 --> 00:48:11,736
We're also providing the same


1538
00:48:11,736 --> 00:48:12,866
custom presentation and


1539
00:48:12,866 --> 00:48:14,366
dismissal hooks so you could


1540
00:48:14,366 --> 00:48:17,336
build your custom appearance and


1541
00:48:17,336 --> 00:48:18,756
disappearance animations.


1542
00:48:21,406 --> 00:48:22,346
Now, you're probably thinking to


1543
00:48:22,346 --> 00:48:24,136
yourself, this sounds a lot like


1544
00:48:24,216 --> 00:48:25,566
Peek and Pop in some ways.


1545
00:48:26,656 --> 00:48:29,926
Well, we noticed that too.


1546
00:48:32,546 --> 00:48:33,856
However, since this new API


1547
00:48:34,186 --> 00:48:35,856
provides a much larger feature


1548
00:48:35,856 --> 00:48:37,606
set and works on multiple


1549
00:48:37,606 --> 00:48:40,486
platforms, we are deprecating


1550
00:48:40,486 --> 00:48:41,926
UIViewController previewing in


1551
00:48:42,096 --> 00:48:42,806
iOS 13.


1552
00:48:43,676 --> 00:48:45,046
So, go and replace your


1553
00:48:45,046 --> 00:48:46,526
implementation of Peek and Pop


1554
00:48:46,526 --> 00:48:48,346
with UIContextMenuInteraction


1555
00:48:48,966 --> 00:48:50,566
and give your users a consistent


1556
00:48:50,566 --> 00:48:53,366
experience in your app across


1557
00:48:53,366 --> 00:48:54,256
all devices.


1558
00:48:54,796 --> 00:48:58,326
You might also want to consider


1559
00:48:58,326 --> 00:48:59,986
replacing any long-press driven


1560
00:48:59,986 --> 00:49:02,606
menus in your apps with this new


1561
00:49:02,606 --> 00:49:04,826
interaction to take advantage of


1562
00:49:04,826 --> 00:49:06,286
the new feature set.


1563
00:49:07,316 --> 00:49:09,556
And if you have menus that


1564
00:49:09,556 --> 00:49:10,616
you're currently displaying


1565
00:49:10,616 --> 00:49:12,736
alongside Drag and Drop, this is


1566
00:49:12,736 --> 00:49:15,576
a great fluid solution that has


1567
00:49:15,576 --> 00:49:17,566
coordinated gestures and a fully


1568
00:49:17,566 --> 00:49:18,926
integrated experience that your


1569
00:49:19,456 --> 00:49:20,566
users are going to come to


1570
00:49:20,566 --> 00:49:24,636
expect starting in iOS 13.


1571
00:49:25,086 --> 00:49:26,156
All right, so now that you're


1572
00:49:26,266 --> 00:49:27,776
equipped with all this great new


1573
00:49:27,776 --> 00:49:29,196
knowledge, you should go and get


1574
00:49:29,196 --> 00:49:30,986
your apps ready for iOS 13.


1575
00:49:31,616 --> 00:49:32,706
Ensure that they're ready for


1576
00:49:32,706 --> 00:49:33,726
the future by making them


1577
00:49:33,726 --> 00:49:35,986
flexible, take advantage of the


1578
00:49:35,986 --> 00:49:37,126
new bar appearance and


1579
00:49:37,126 --> 00:49:39,046
presentation APIs to give your


1580
00:49:39,386 --> 00:49:41,336
apps that polished modern look


1581
00:49:41,336 --> 00:49:42,306
that users are going to come to


1582
00:49:42,306 --> 00:49:42,566
expect.


1583
00:49:43,856 --> 00:49:45,596
Go build the search experience


1584
00:49:45,596 --> 00:49:46,876
you've always wanted to build


1585
00:49:47,176 --> 00:49:48,706
using the great new search APIs,


1586
00:49:48,706 --> 00:49:51,256
and give your apps some great


1587
00:49:51,256 --> 00:49:52,466
features with the new


1588
00:49:52,466 --> 00:49:53,836
productivity gestures and


1589
00:49:53,836 --> 00:49:54,666
context menus.


1590
00:49:55,216 --> 00:49:57,826
If you have any questions about


1591
00:49:57,866 --> 00:50:00,466
these topics or anything else


1592
00:50:00,466 --> 00:50:02,246
related to UIKit, please come to


1593
00:50:02,246 --> 00:50:03,966
the labs tomorrow, and for


1594
00:50:03,966 --> 00:50:04,946
additional information about the


1595
00:50:05,006 --> 00:50:07,156
session, you can find it at the


1596
00:50:07,156 --> 00:50:07,916
session's website.


1597
00:50:08,936 --> 00:50:09,936
Thanks for coming by, and I hope


1598
00:50:09,936 --> 00:50:10,636
you enjoy the rest of the


1599
00:50:10,636 --> 00:50:10,936
conference.


1600
00:50:11,516 --> 00:50:20,560
[ Applause ]

