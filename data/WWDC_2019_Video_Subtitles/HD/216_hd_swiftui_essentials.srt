1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:08,321 --> 00:00:10,321
[ Applause ]


3
00:00:10,626 --> 00:00:10,896
>> Good morning.


4
00:00:11,516 --> 00:00:15,736
[ Applause ]


5
00:00:16,236 --> 00:00:16,826
Good morning.


6
00:00:17,016 --> 00:00:18,316
And welcome to SwiftUI


7
00:00:18,436 --> 00:00:19,136
Essentials.


8
00:00:19,696 --> 00:00:21,376
My name is Matt Ricketson and I


9
00:00:21,376 --> 00:00:23,276
work on SwiftUI and later I'll


10
00:00:23,276 --> 00:00:24,296
be joined by my colleague


11
00:00:24,296 --> 00:00:24,676
Taylor.


12
00:00:25,276 --> 00:00:26,326
So what do you all think of


13
00:00:26,326 --> 00:00:26,906
SwiftUI so far?


14
00:00:27,516 --> 00:00:32,396
[ Applause ]


15
00:00:32,896 --> 00:00:34,566
Me too. I'm incredibly excited


16
00:00:34,566 --> 00:00:36,016
to talk to you today about


17
00:00:36,016 --> 00:00:36,436
SwiftUI.


18
00:00:37,266 --> 00:00:38,126
Now we have a lot to cover in


19
00:00:38,126 --> 00:00:39,476
this session, so let's dive


20
00:00:39,476 --> 00:00:39,846
right in.


21
00:00:42,036 --> 00:00:44,606
SwiftUI is a new framework that


22
00:00:45,066 --> 00:00:46,876
is designed to give you the


23
00:00:46,876 --> 00:00:49,266
shortest path to building a


24
00:00:49,266 --> 00:00:49,686
great app.


25
00:00:50,456 --> 00:00:51,736
And that means giving you the


26
00:00:51,736 --> 00:00:53,846
shortest path to building great


27
00:00:54,006 --> 00:00:55,026
user interfaces.


28
00:00:55,886 --> 00:00:57,876
But even though SwiftUI is a new


29
00:00:57,876 --> 00:00:59,846
framework, a lot of it will


30
00:00:59,846 --> 00:01:01,156
already look familiar to you.


31
00:01:01,766 --> 00:01:04,056
And that's because it has all of


32
00:01:04,056 --> 00:01:05,626
the basic components that you'd


33
00:01:05,626 --> 00:01:06,916
expect from a UI framework.


34
00:01:07,846 --> 00:01:10,356
It has controls like buttons and


35
00:01:10,356 --> 00:01:10,966
text fields.


36
00:01:11,856 --> 00:01:13,896
It has layout containers like


37
00:01:13,896 --> 00:01:15,236
stacks and lists.


38
00:01:15,886 --> 00:01:18,586
It has drawing, animations and


39
00:01:18,586 --> 00:01:19,106
gestures.


40
00:01:19,476 --> 00:01:21,236
And SwiftUI even embraces


41
00:01:21,536 --> 00:01:23,586
platform-specific concepts like


42
00:01:23,586 --> 00:01:25,756
menus on the Mac, the Digital


43
00:01:25,756 --> 00:01:27,946
Crown on Apple Watch, and the


44
00:01:27,946 --> 00:01:29,596
Siri remote on Apple TV.


45
00:01:29,596 --> 00:01:33,066
And so the takeaway here is that


46
00:01:33,066 --> 00:01:34,596
we're not trying to reinvent the


47
00:01:34,596 --> 00:01:35,546
wheel with SwiftUI.


48
00:01:36,776 --> 00:01:39,196
But as we all know, the reality


49
00:01:39,196 --> 00:01:40,666
is that just knowing how to use


50
00:01:40,666 --> 00:01:42,906
these kinds of components is not


51
00:01:42,906 --> 00:01:45,026
what it takes to build a great


52
00:01:45,916 --> 00:01:48,186
app, because a great app also


53
00:01:48,186 --> 00:01:50,186
needs to account for these kinds


54
00:01:50,186 --> 00:01:50,636
of things.


55
00:01:51,346 --> 00:01:53,326
It needs to be accessible and


56
00:01:53,326 --> 00:01:54,916
work with features like dynamic


57
00:01:55,046 --> 00:01:55,246
type.


58
00:01:56,366 --> 00:01:57,546
It needs to adapt to different


59
00:01:57,546 --> 00:02:00,216
devices and screen sizes and


60
00:02:00,216 --> 00:02:00,936
input types.


61
00:02:01,366 --> 00:02:03,216
And it needs to come alive with


62
00:02:03,466 --> 00:02:04,386
things like interactive


63
00:02:04,386 --> 00:02:06,636
animations and support for


64
00:02:06,636 --> 00:02:08,066
system features like Dark Mode


65
00:02:08,526 --> 00:02:09,256
and Drag and Drop.


66
00:02:10,795 --> 00:02:12,216
These are the kinds of things


67
00:02:12,646 --> 00:02:14,386
that help your app to reach the


68
00:02:14,386 --> 00:02:16,146
largest possible audience and


69
00:02:16,146 --> 00:02:18,056
also help keep it feeling


70
00:02:18,056 --> 00:02:18,436
modern.


71
00:02:19,046 --> 00:02:23,206
Now we all know that even this


72
00:02:23,206 --> 00:02:24,916
though is not the whole picture,


73
00:02:26,056 --> 00:02:27,516
because of course you also add


74
00:02:27,516 --> 00:02:29,346
in your own unique features that


75
00:02:29,346 --> 00:02:31,016
make your apps stand out from


76
00:02:31,016 --> 00:02:31,416
the crowd.


77
00:02:32,476 --> 00:02:34,206
So I just want to take a moment


78
00:02:34,206 --> 00:02:35,756
to step back and acknowledge


79
00:02:36,546 --> 00:02:38,156
that this is a lot of stuff to


80
00:02:38,156 --> 00:02:38,756
have to learn.


81
00:02:39,796 --> 00:02:40,706
It's a lot of stuff to have to


82
00:02:40,706 --> 00:02:43,116
code and maintain, and so how


83
00:02:43,116 --> 00:02:45,496
can SwiftUI help you with all


84
00:02:47,416 --> 00:02:47,526
this?


85
00:02:48,036 --> 00:02:49,136
Well, think about your own apps


86
00:02:49,136 --> 00:02:49,586
for a moment.


87
00:02:50,606 --> 00:02:51,636
First, you have those basic


88
00:02:51,636 --> 00:02:53,546
features that everyone expects


89
00:02:53,546 --> 00:02:55,596
from your app, like controls and


90
00:02:55,596 --> 00:02:57,576
navigation, being accessible and


91
00:02:57,696 --> 00:02:58,786
adapting your layout to


92
00:02:58,786 --> 00:02:59,536
different devices.


93
00:03:00,856 --> 00:03:02,956
We need to do these things and


94
00:03:02,956 --> 00:03:04,596
we need to do them right in


95
00:03:04,596 --> 00:03:06,136
order to build a really great


96
00:03:06,136 --> 00:03:06,206
app.


97
00:03:08,606 --> 00:03:09,296
But then there are those


98
00:03:09,296 --> 00:03:11,636
exciting custom features that


99
00:03:11,636 --> 00:03:12,476
are unique to your app.


100
00:03:12,476 --> 00:03:14,776
And these are also the fun


101
00:03:14,776 --> 00:03:16,996
features, the features that we


102
00:03:16,996 --> 00:03:19,046
pour our passion into, the


103
00:03:19,046 --> 00:03:20,886
features that make us feel proud


104
00:03:20,886 --> 00:03:21,606
of what we've built.


105
00:03:22,856 --> 00:03:24,816
And so the goal of SwiftUI is


106
00:03:24,896 --> 00:03:27,376
pretty simple: we want you to


107
00:03:27,376 --> 00:03:28,736
spend as much of your time as


108
00:03:28,736 --> 00:03:30,966
possible on that fun stuff and


109
00:03:30,966 --> 00:03:32,666
less time on the basic stuff,


110
00:03:32,756 --> 00:03:35,236
but without compromising on


111
00:03:35,236 --> 00:03:35,746
quality.


112
00:03:36,856 --> 00:03:38,986
And this is what we mean by


113
00:03:38,986 --> 00:03:40,846
giving you the shortest path to


114
00:03:40,846 --> 00:03:41,956
a great app.


115
00:03:42,176 --> 00:03:43,346
Because all of you are building


116
00:03:43,346 --> 00:03:44,346
great apps already.


117
00:03:45,116 --> 00:03:46,056
We just want to help you get


118
00:03:46,096 --> 00:03:47,956
there a little bit faster.


119
00:03:50,056 --> 00:03:51,536
This session is about giving you


120
00:03:51,576 --> 00:03:52,856
a better understanding of


121
00:03:52,856 --> 00:03:53,206
SwiftUI.


122
00:03:53,206 --> 00:03:54,986
We're going to look at some


123
00:03:54,986 --> 00:03:56,736
code, but we're also going to


124
00:03:56,736 --> 00:03:58,796
talk about SwiftUI's design and


125
00:03:58,796 --> 00:04:00,356
how it helps you build better


126
00:04:00,506 --> 00:04:00,746
apps.


127
00:04:01,846 --> 00:04:02,816
By the end of this session,


128
00:04:03,586 --> 00:04:04,916
you'll be able to build a


129
00:04:04,916 --> 00:04:06,826
complete user interface with


130
00:04:06,826 --> 00:04:07,176
SwiftUI.


131
00:04:07,916 --> 00:04:10,886
And we're going to start by


132
00:04:10,886 --> 00:04:12,866
covering the basics of views and


133
00:04:12,866 --> 00:04:13,646
modifiers.


134
00:04:14,636 --> 00:04:16,266
And for that we'll need an


135
00:04:16,266 --> 00:04:16,796
example.


136
00:04:17,055 --> 00:04:18,166
And I always try to pick an


137
00:04:18,166 --> 00:04:20,446
example that I care about to


138
00:04:20,755 --> 00:04:21,546
help motivate me.


139
00:04:22,896 --> 00:04:24,726
Now if any of you have been on


140
00:04:24,726 --> 00:04:26,416
the internet lately, you've


141
00:04:26,416 --> 00:04:27,446
probably read about what


142
00:04:27,506 --> 00:04:30,576
Millennials like myself consider


143
00:04:30,756 --> 00:04:33,766
to be the most important part of


144
00:04:33,766 --> 00:04:34,266
our lives.


145
00:04:35,956 --> 00:04:38,876
That's right, avocado toast.


146
00:04:39,016 --> 00:04:41,016
[ Laughter ]


147
00:04:41,516 --> 00:04:44,566
[ Applause ]


148
00:04:45,066 --> 00:04:45,966
We've got some Millennials in


149
00:04:45,966 --> 00:04:46,806
the audience.


150
00:04:47,116 --> 00:04:49,196
So today we're going to build an


151
00:04:49,196 --> 00:04:51,306
app for ordering avocado toast.


152
00:04:51,896 --> 00:04:53,136
And I've already done a little


153
00:04:53,136 --> 00:04:54,416
bit of work on it already and it


154
00:04:54,416 --> 00:04:55,496
looks a little like this.


155
00:04:56,616 --> 00:04:58,596
It's a simple form that lets me


156
00:04:58,596 --> 00:04:59,896
quickly order just what I want


157
00:04:59,896 --> 00:05:01,066
right from my phone.


158
00:05:02,096 --> 00:05:03,536
Now this is not much so far,


159
00:05:03,536 --> 00:05:04,876
clearly, but we're going to


160
00:05:04,876 --> 00:05:05,616
build on this throughout the


161
00:05:05,616 --> 00:05:06,016
talk.


162
00:05:07,026 --> 00:05:07,866
But before we dive into the


163
00:05:07,866 --> 00:05:09,456
code, I want to talk a little


164
00:05:09,456 --> 00:05:11,016
bit about views.


165
00:05:11,586 --> 00:05:15,346
And that's because views are the


166
00:05:15,346 --> 00:05:17,146
basic building blocks of user


167
00:05:17,146 --> 00:05:17,746
interfaces.


168
00:05:18,636 --> 00:05:19,856
And they're important to


169
00:05:19,856 --> 00:05:21,596
everything that we do in


170
00:05:21,596 --> 00:05:21,996
SwiftUI.


171
00:05:23,776 --> 00:05:25,586
If you've ever used another UI


172
00:05:25,586 --> 00:05:27,806
framework before like UIKit or


173
00:05:27,806 --> 00:05:30,066
AppKit, you've probably already


174
00:05:30,136 --> 00:05:31,196
heard of the term view.


175
00:05:32,676 --> 00:05:34,756
SwiftUI also has views and they


176
00:05:34,756 --> 00:05:36,726
serve the same primary role as


177
00:05:36,726 --> 00:05:38,146
they do in those frameworks.


178
00:05:39,676 --> 00:05:42,146
Which is that at a high level, a


179
00:05:42,146 --> 00:05:43,506
view is just something that


180
00:05:43,506 --> 00:05:47,306
defines a piece of your UI.


181
00:05:47,566 --> 00:05:49,146
When you look at an app,


182
00:05:49,146 --> 00:05:50,826
everything that you see is


183
00:05:50,826 --> 00:05:52,096
defined by a view.


184
00:05:53,656 --> 00:05:55,116
Individual controls are views.


185
00:05:56,426 --> 00:05:58,616
The containers holding them are


186
00:05:58,616 --> 00:05:59,306
also views.


187
00:05:59,656 --> 00:06:02,026
And in fact, every single pixel


188
00:06:02,026 --> 00:06:03,616
that you see onscreen can be


189
00:06:03,616 --> 00:06:05,316
traced back in some way to a


190
00:06:05,316 --> 00:06:05,606
view.


191
00:06:06,206 --> 00:06:09,306
And we build user interfaces by


192
00:06:09,306 --> 00:06:11,226
composing these views into a


193
00:06:11,226 --> 00:06:12,826
hierarchy of containment.


194
00:06:13,306 --> 00:06:16,026
From the containers at the root,


195
00:06:16,866 --> 00:06:20,906
to the text, images and shapes


196
00:06:21,136 --> 00:06:21,776
that are at the bottom.


197
00:06:24,076 --> 00:06:25,446
Now if you've used UIKit or


198
00:06:25,446 --> 00:06:26,826
AppKit before, this picture


199
00:06:26,826 --> 00:06:28,176
should look familiar to you.


200
00:06:28,316 --> 00:06:29,526
And the important thing to


201
00:06:29,526 --> 00:06:31,666
understand is that this is also


202
00:06:31,666 --> 00:06:33,706
true of views in SwiftUI.


203
00:06:33,706 --> 00:06:36,636
Where SwiftUI may be different


204
00:06:36,636 --> 00:06:38,316
than what you're used to is in


205
00:06:38,316 --> 00:06:40,256
the way that views are expressed


206
00:06:40,556 --> 00:06:41,166
in code.


207
00:06:42,116 --> 00:06:44,966
So let's look at some code.


208
00:06:45,516 --> 00:06:47,356
In our example app, we just have


209
00:06:47,356 --> 00:06:49,176
a vertical stack of controls and


210
00:06:49,176 --> 00:06:49,676
text.


211
00:06:50,276 --> 00:06:51,936
And it's easy to see that just


212
00:06:51,936 --> 00:06:52,656
by reading the code.


213
00:06:55,186 --> 00:06:56,236
But in fact you'll notice how


214
00:06:56,286 --> 00:06:57,886
closely the code on the left


215
00:06:58,776 --> 00:07:00,086
matches the equivalent view


216
00:07:00,086 --> 00:07:01,666
hierarchy diagram on the right.


217
00:07:03,276 --> 00:07:04,586
We see that in the stack at the


218
00:07:04,586 --> 00:07:07,866
root, to the text and controls


219
00:07:07,866 --> 00:07:09,506
contained in the stack.


220
00:07:10,276 --> 00:07:12,316
To the individual text labels


221
00:07:12,646 --> 00:07:13,716
contained in each of our


222
00:07:13,716 --> 00:07:14,306
controls.


223
00:07:18,046 --> 00:07:19,816
Now what you don't see is calls


224
00:07:19,816 --> 00:07:21,526
to functions like Add subviews


225
00:07:21,526 --> 00:07:21,936
anywhere.


226
00:07:23,146 --> 00:07:24,356
Because instead of building up


227
00:07:24,356 --> 00:07:25,426
our view hierarchy piece by


228
00:07:25,426 --> 00:07:27,636
piece, we initialize it as a


229
00:07:27,636 --> 00:07:29,976
complete, composed structure.


230
00:07:31,626 --> 00:07:34,006
This is because SwiftUI defines


231
00:07:34,006 --> 00:07:36,926
its views declaratively as


232
00:07:36,926 --> 00:07:38,266
opposed to imperatively.


233
00:07:39,136 --> 00:07:41,126
And I can't think of a better


234
00:07:41,126 --> 00:07:42,286
analogy to help explain these


235
00:07:42,286 --> 00:07:44,376
concepts than of course with


236
00:07:44,376 --> 00:07:45,526
avocado toast.


237
00:07:45,776 --> 00:07:47,036
So let's try making avocado


238
00:07:47,036 --> 00:07:47,976
toast imperatively.


239
00:07:50,556 --> 00:07:51,956
Imperative code involves


240
00:07:51,956 --> 00:07:53,676
building a result by sending


241
00:07:53,676 --> 00:07:54,826
explicit commands.


242
00:07:55,966 --> 00:07:57,116
That's sort of like teaching a


243
00:07:57,116 --> 00:07:58,696
friend how to make avocado toast


244
00:07:58,836 --> 00:07:59,686
over the phone.


245
00:08:01,186 --> 00:08:02,186
You start by telling them what


246
00:08:02,186 --> 00:08:03,766
ingredients to get and what


247
00:08:03,766 --> 00:08:06,496
equipment they'll need, then you


248
00:08:06,496 --> 00:08:07,496
start guiding them through


249
00:08:07,496 --> 00:08:08,876
making the toast and cutting the


250
00:08:08,876 --> 00:08:10,506
avocado and all these


251
00:08:10,506 --> 00:08:12,466
instructions start getting a


252
00:08:12,466 --> 00:08:13,366
little tedious.


253
00:08:13,666 --> 00:08:16,126
And if your friend messes up any


254
00:08:16,126 --> 00:08:17,956
little step like forgetting to


255
00:08:17,956 --> 00:08:20,146
toast the bread, then the final


256
00:08:20,206 --> 00:08:21,686
result is ruined.


257
00:08:24,216 --> 00:08:25,626
Now let's compare that to making


258
00:08:25,626 --> 00:08:27,606
avocado toast declaratively.


259
00:08:29,466 --> 00:08:30,526
Declarative code involves


260
00:08:30,526 --> 00:08:32,546
building a result by describing


261
00:08:32,546 --> 00:08:33,655
what you want but letting


262
00:08:33,655 --> 00:08:35,306
someone else figure out how to


263
00:08:35,306 --> 00:08:36,126
make it for you.


264
00:08:36,696 --> 00:08:39,476
That's sort of like ordering


265
00:08:39,476 --> 00:08:41,746
avocado toast from an avocado


266
00:08:42,155 --> 00:08:42,655
artisan.


267
00:08:45,596 --> 00:08:47,236
Luckily, we have a lot of those


268
00:08:47,236 --> 00:08:47,766
in California.


269
00:08:49,726 --> 00:08:50,936
Now all you have to do is say


270
00:08:50,936 --> 00:08:51,886
exactly what you want.


271
00:08:52,416 --> 00:08:54,876
You can even throw in a custom


272
00:08:54,876 --> 00:08:55,336
instruction.


273
00:08:55,936 --> 00:08:58,156
And that's all there is to it.


274
00:08:58,416 --> 00:08:59,826
And because an expert is making


275
00:08:59,826 --> 00:09:01,326
it for us, we're guaranteed to


276
00:09:01,326 --> 00:09:02,766
get a high-quality result.


277
00:09:03,446 --> 00:09:06,006
Now going back to our code,


278
00:09:06,176 --> 00:09:08,476
SwiftUI is serving that role of


279
00:09:08,476 --> 00:09:10,426
the expert ready to assist you.


280
00:09:11,376 --> 00:09:13,506
In code, we declare the


281
00:09:13,506 --> 00:09:15,046
hierarchical relationships


282
00:09:15,236 --> 00:09:17,136
between our views by


283
00:09:17,136 --> 00:09:19,176
initializing a structure that


284
00:09:19,176 --> 00:09:20,976
encodes those relationships.


285
00:09:23,416 --> 00:09:25,726
And SwiftUI does the hard work


286
00:09:26,086 --> 00:09:29,326
of translating your views into a


287
00:09:29,326 --> 00:09:30,736
rendered result onscreen.


288
00:09:33,166 --> 00:09:34,186
Now there's a lot more to say


289
00:09:34,186 --> 00:09:35,776
about that, but for now let's


290
00:09:35,776 --> 00:09:37,456
just get used to the syntax in


291
00:09:37,456 --> 00:09:37,876
the code.


292
00:09:38,326 --> 00:09:39,966
And we'll start with container


293
00:09:39,966 --> 00:09:40,326
views.


294
00:09:43,356 --> 00:09:44,706
container views are declared as


295
00:09:44,706 --> 00:09:46,686
a composition of other views


296
00:09:46,746 --> 00:09:47,816
serving as their content.


297
00:09:49,806 --> 00:09:51,096
Those Content views are declared


298
00:09:51,096 --> 00:09:53,066
within a special kind of closer


299
00:09:53,146 --> 00:09:54,366
known as a view builder.


300
00:09:55,946 --> 00:09:57,156
For example, we already saw


301
00:09:57,156 --> 00:09:59,916
VStack or Vertical Stack which


302
00:09:59,916 --> 00:10:01,066
is an example of one of these


303
00:10:01,066 --> 00:10:01,686
containers.


304
00:10:02,206 --> 00:10:04,586
view Builders allow us to write


305
00:10:04,586 --> 00:10:06,646
declarative code in the body of


306
00:10:06,646 --> 00:10:07,206
the closure.


307
00:10:08,186 --> 00:10:09,466
Instead of calling a function


308
00:10:09,466 --> 00:10:11,446
like AddSubViews, we can just


309
00:10:11,446 --> 00:10:13,346
list out our contents within the


310
00:10:13,346 --> 00:10:13,726
closure.


311
00:10:14,476 --> 00:10:16,716
To see a little bit more about


312
00:10:16,716 --> 00:10:17,916
how this works, let's take a


313
00:10:17,916 --> 00:10:19,226
look at the actual API for


314
00:10:19,226 --> 00:10:19,876
VStack.


315
00:10:20,366 --> 00:10:23,306
You can see the content


316
00:10:23,306 --> 00:10:25,776
parameter defined as a closure


317
00:10:26,296 --> 00:10:27,706
but marked with this ViewBuilder


318
00:10:27,706 --> 00:10:28,176
attribute.


319
00:10:29,446 --> 00:10:31,426
The Swift Compiler knows how to


320
00:10:31,426 --> 00:10:33,196
translate a closure marked by


321
00:10:33,236 --> 00:10:35,076
this attribute into a new


322
00:10:35,076 --> 00:10:37,166
closure that returns a single


323
00:10:37,166 --> 00:10:38,846
view representing all of the


324
00:10:38,886 --> 00:10:40,576
contents within our stack.


325
00:10:42,106 --> 00:10:43,636
This is an example of SwiftUI


326
00:10:44,256 --> 00:10:46,046
using the power of Swift to help


327
00:10:46,046 --> 00:10:47,966
you write less code.


328
00:10:51,416 --> 00:10:53,066
views like VStack can also take


329
00:10:53,066 --> 00:10:54,436
other parameters in addition to


330
00:10:54,436 --> 00:10:55,006
their content.


331
00:10:55,426 --> 00:10:57,136
For example, we could configure


332
00:10:57,136 --> 00:10:59,136
our VStack to align its content


333
00:10:59,136 --> 00:11:00,856
along its leading edge instead


334
00:11:00,856 --> 00:11:02,306
of using the default center


335
00:11:02,306 --> 00:11:02,696
alignment.


336
00:11:06,486 --> 00:11:08,356
Taken together, this is a really


337
00:11:08,356 --> 00:11:10,986
nice and natural syntax that


338
00:11:10,986 --> 00:11:12,676
lets us use braces and


339
00:11:12,676 --> 00:11:15,416
indentation to differentiate our


340
00:11:15,416 --> 00:11:17,336
container views and their


341
00:11:17,336 --> 00:11:19,726
configuration from the contents


342
00:11:19,726 --> 00:11:21,076
inside of them.


343
00:11:24,046 --> 00:11:24,966
And we also follow the syntax


344
00:11:24,966 --> 00:11:26,506
for many controls since most


345
00:11:26,506 --> 00:11:28,526
controls in SwiftUI are also


346
00:11:28,526 --> 00:11:28,976
containers.


347
00:11:31,046 --> 00:11:32,476
You saw this in our example app.


348
00:11:32,476 --> 00:11:34,566
In each case here, our controls


349
00:11:34,566 --> 00:11:36,776
define a piece of text serving


350
00:11:36,776 --> 00:11:38,786
as their label which describes


351
00:11:38,786 --> 00:11:39,396
their purpose.


352
00:11:42,046 --> 00:11:43,026
Now we can put more than just


353
00:11:43,086 --> 00:11:43,516
text here.


354
00:11:43,516 --> 00:11:44,516
We can put any kind of view.


355
00:11:45,396 --> 00:11:46,886
And we'll go into more depth on


356
00:11:46,886 --> 00:11:47,716
that later in the talk.


357
00:11:49,636 --> 00:11:51,466
Now another kind of syntax you


358
00:11:51,466 --> 00:11:53,266
see here are those dollar signs


359
00:11:53,676 --> 00:11:54,946
preceding the arguments to our


360
00:11:54,946 --> 00:11:55,976
Toggles and stepper.


361
00:11:57,426 --> 00:11:58,466
The leading dollar sign


362
00:11:58,546 --> 00:12:00,206
indicates that we're passing a


363
00:12:00,316 --> 00:12:02,166
binding to the control instead


364
00:12:02,166 --> 00:12:03,366
of just a normal value.


365
00:12:04,796 --> 00:12:05,886
So what are bindings?


366
00:12:06,356 --> 00:12:09,366
In our example app, our stepper


367
00:12:09,366 --> 00:12:11,106
is contained within a view that


368
00:12:11,106 --> 00:12:12,606
depends on persistent state to


369
00:12:12,606 --> 00:12:13,676
track the current order.


370
00:12:13,966 --> 00:12:15,786
It declares a property for its


371
00:12:15,786 --> 00:12:18,386
order using a state attribute.


372
00:12:19,536 --> 00:12:21,116
When SwiftUI sees a property


373
00:12:21,116 --> 00:12:22,926
marked with this attribute, it


374
00:12:22,926 --> 00:12:24,346
automatically creates and


375
00:12:24,346 --> 00:12:26,226
manages persistent state behind


376
00:12:26,226 --> 00:12:28,336
the scenes and then exposes the


377
00:12:28,336 --> 00:12:30,606
value of that state through this


378
00:12:30,606 --> 00:12:30,976
property.


379
00:12:34,106 --> 00:12:36,096
In this case, our state contains


380
00:12:36,096 --> 00:12:37,656
a struct that I defined myself


381
00:12:38,746 --> 00:12:40,176
that represents all of our order


382
00:12:40,176 --> 00:12:40,696
information.


383
00:12:43,096 --> 00:12:45,276
If we just want to read or write


384
00:12:45,336 --> 00:12:46,996
to the data in our state, it's


385
00:12:46,996 --> 00:12:47,616
really easy.


386
00:12:47,806 --> 00:12:49,106
We can just read or write to a


387
00:12:49,106 --> 00:12:50,116
property directly.


388
00:12:51,316 --> 00:12:52,376
And we did that here when we


389
00:12:52,376 --> 00:12:53,806
made the label for our stepper.


390
00:12:56,136 --> 00:12:58,016
However, a stepper also needs to


391
00:12:58,016 --> 00:12:59,896
be able to edit the state when


392
00:12:59,896 --> 00:13:01,056
its buttons are tapped.


393
00:13:02,306 --> 00:13:03,946
And we use this dollar sign


394
00:13:03,946 --> 00:13:05,886
prefix to indicate that we


395
00:13:05,886 --> 00:13:08,306
should pass a binding to that


396
00:13:08,306 --> 00:13:09,846
Quantity Property in our state


397
00:13:10,656 --> 00:13:12,146
instead of just passing a


398
00:13:12,186 --> 00:13:13,296
read-only value.


399
00:13:14,836 --> 00:13:17,056
A binding is a kind of managed


400
00:13:17,136 --> 00:13:19,106
reference that allows one view


401
00:13:19,506 --> 00:13:21,266
to edit the state of another


402
00:13:21,266 --> 00:13:21,456
view.


403
00:13:24,456 --> 00:13:26,016
Now to learn more about state


404
00:13:26,016 --> 00:13:27,976
and bindings and how to manage


405
00:13:28,146 --> 00:13:29,196
all other kinds of data


406
00:13:29,196 --> 00:13:31,056
dependencies that you'll use in


407
00:13:31,056 --> 00:13:32,796
your app, I highly recommend


408
00:13:32,796 --> 00:13:34,216
that you watch the Data Flow


409
00:13:34,216 --> 00:13:35,296
Through SwiftUI talk.


410
00:13:35,906 --> 00:13:38,066
But for now, the important thing


411
00:13:38,066 --> 00:13:40,496
to remember is that if you ever


412
00:13:40,496 --> 00:13:41,866
see a property attribute like


413
00:13:41,866 --> 00:13:44,536
state that usually represents


414
00:13:44,986 --> 00:13:46,616
some kind of data dependency


415
00:13:47,016 --> 00:13:48,806
that SwiftUI is managing on your


416
00:13:48,806 --> 00:13:50,546
behalf behind the scenes.


417
00:13:52,156 --> 00:13:53,726
And if you ever see a dollar


418
00:13:53,726 --> 00:13:55,876
sign prefix, that usually means


419
00:13:55,876 --> 00:13:57,596
that we're passing a binding to


420
00:13:57,676 --> 00:13:57,976
another view.


421
00:14:03,046 --> 00:14:04,106
Now going back to our example


422
00:14:04,106 --> 00:14:06,256
app, there's one more important


423
00:14:06,256 --> 00:14:07,866
piece of syntax that we haven't


424
00:14:07,866 --> 00:14:08,236
covered yet.


425
00:14:08,516 --> 00:14:09,556
And you can see it up there at


426
00:14:09,556 --> 00:14:11,446
the top where we set the font


427
00:14:11,876 --> 00:14:12,476
for our title.


428
00:14:14,016 --> 00:14:14,726
Let's zoom in on that.


429
00:14:18,046 --> 00:14:19,676
First we initialized our text,


430
00:14:21,106 --> 00:14:22,476
which again is just another kind


431
00:14:22,476 --> 00:14:23,466
of view in SwiftUI.


432
00:14:26,046 --> 00:14:27,556
Then we called a method on the


433
00:14:27,556 --> 00:14:29,906
text named font and passed it a


434
00:14:29,906 --> 00:14:32,296
system-defined text style.


435
00:14:32,936 --> 00:14:35,116
This kind of method is known as


436
00:14:35,116 --> 00:14:36,736
a modifier in SwiftUI.


437
00:14:37,526 --> 00:14:39,626
And a modifier is just a method


438
00:14:40,076 --> 00:14:42,076
that creates a new view from an


439
00:14:42,076 --> 00:14:42,766
existing view.


440
00:14:45,086 --> 00:14:46,406
Let's see what I mean.


441
00:14:47,516 --> 00:14:48,846
This is what our UI would have


442
00:14:48,846 --> 00:14:49,976
looked like without the font


443
00:14:49,976 --> 00:14:52,046
modifier, in which case our


444
00:14:52,046 --> 00:14:53,176
title would have rendered with


445
00:14:53,176 --> 00:14:55,146
just the default body font.


446
00:14:56,356 --> 00:14:57,966
This is what the view hierarchy


447
00:14:57,966 --> 00:14:58,746
diagram looks like.


448
00:14:59,536 --> 00:15:01,226
We just see our text contained


449
00:15:01,446 --> 00:15:02,806
by our VStack.


450
00:15:06,076 --> 00:15:07,766
When the text is modified, a new


451
00:15:07,766 --> 00:15:10,076
view is inserted that wraps our


452
00:15:10,076 --> 00:15:10,826
existing text.


453
00:15:11,656 --> 00:15:13,616
The new view tells SwiftUI to


454
00:15:13,616 --> 00:15:15,256
render that text with its new


455
00:15:15,256 --> 00:15:15,586
font.


456
00:15:17,396 --> 00:15:18,436
These modifiers can even be


457
00:15:18,436 --> 00:15:18,996
chained together.


458
00:15:20,076 --> 00:15:21,356
For example, we could change the


459
00:15:21,356 --> 00:15:22,886
text color of our title by


460
00:15:22,886 --> 00:15:23,986
adding a foreground color


461
00:15:23,986 --> 00:15:24,506
modifier.


462
00:15:25,986 --> 00:15:27,436
This adds another view into the


463
00:15:27,436 --> 00:15:29,556
view Tree that wraps our font


464
00:15:29,686 --> 00:15:30,386
modifier view.


465
00:15:34,286 --> 00:15:35,866
Now clearly our view hierarchy


466
00:15:36,426 --> 00:15:37,886
is starting to get bigger pretty


467
00:15:37,886 --> 00:15:38,236
quickly.


468
00:15:38,236 --> 00:15:40,546
And for the experienced UI


469
00:15:40,546 --> 00:15:42,236
programmers among you, this may


470
00:15:42,236 --> 00:15:43,506
be setting off some internal


471
00:15:43,596 --> 00:15:44,186
alarm bells.


472
00:15:45,006 --> 00:15:46,586
Because over the years we've


473
00:15:46,716 --> 00:15:48,606
trained ourselves to optimize


474
00:15:48,606 --> 00:15:50,396
the performance of our apps by


475
00:15:50,396 --> 00:15:52,046
keeping our view hierarchies as


476
00:15:52,046 --> 00:15:54,506
small and light as possible.


477
00:15:55,046 --> 00:15:58,366
But remember, we're writing


478
00:15:58,506 --> 00:15:59,556
declarative code.


479
00:16:00,976 --> 00:16:03,486
And SwiftUI is our expert chef


480
00:16:03,876 --> 00:16:05,786
taking our views and skillfully


481
00:16:05,786 --> 00:16:07,366
producing a rendered result


482
00:16:07,766 --> 00:16:09,086
according to just what we


483
00:16:09,086 --> 00:16:09,426
ordered.


484
00:16:10,326 --> 00:16:11,326
And so even though we had to


485
00:16:11,326 --> 00:16:13,236
wrap our text in multiple


486
00:16:13,236 --> 00:16:16,026
wrapper views, SwiftUI collapses


487
00:16:16,026 --> 00:16:17,916
that down behind the scenes into


488
00:16:17,966 --> 00:16:20,376
an efficient data structure that


489
00:16:20,376 --> 00:16:21,856
is then used by the render


490
00:16:21,856 --> 00:16:22,236
system.


491
00:16:23,786 --> 00:16:25,066
And without having to worry


492
00:16:25,066 --> 00:16:26,506
about the performance impact,


493
00:16:27,376 --> 00:16:29,526
you'll find that this chaining


494
00:16:29,526 --> 00:16:31,596
modifier syntax actually


495
00:16:31,596 --> 00:16:32,746
provides a lot of really nice


496
00:16:32,746 --> 00:16:33,236
benefits.


497
00:16:34,836 --> 00:16:37,406
For example, modifier chains


498
00:16:37,686 --> 00:16:40,006
enforce a deterministic ordering


499
00:16:40,366 --> 00:16:41,476
of visual effects.


500
00:16:43,586 --> 00:16:44,856
So here we have a piece of text


501
00:16:44,856 --> 00:16:45,796
with a green background.


502
00:16:46,736 --> 00:16:48,726
But the text is looking a little


503
00:16:48,726 --> 00:16:50,446
cramped, so let's try expanding


504
00:16:50,446 --> 00:16:51,906
that background by adding some


505
00:16:52,226 --> 00:16:53,496
padding around our text.


506
00:16:56,046 --> 00:16:57,436
So we added the padding modifier


507
00:16:57,436 --> 00:16:59,606
and you can see it adding a new


508
00:16:59,606 --> 00:17:00,766
view to our view hierarchy.


509
00:17:01,896 --> 00:17:02,976
But nothing changed onscreen.


510
00:17:06,046 --> 00:17:07,406
In fact, the padding is there;


511
00:17:07,406 --> 00:17:08,415
we just can't see it.


512
00:17:09,996 --> 00:17:11,195
Looking at the code, our


513
00:17:11,195 --> 00:17:12,876
background modifier is only


514
00:17:12,876 --> 00:17:14,586
wrapping our text, not our


515
00:17:14,586 --> 00:17:15,036
padding.


516
00:17:15,586 --> 00:17:16,935
Which means that the padding


517
00:17:16,935 --> 00:17:18,336
gets applied outside of our


518
00:17:18,336 --> 00:17:18,786
background.


519
00:17:21,046 --> 00:17:22,646
And luckily, it's really easy to


520
00:17:22,646 --> 00:17:23,976
fix this by just moving that


521
00:17:23,976 --> 00:17:25,656
background modifier to wrap both


522
00:17:25,656 --> 00:17:26,996
the text and the padding


523
00:17:27,046 --> 00:17:27,455
instead.


524
00:17:32,046 --> 00:17:32,856
Now let's take a step back and


525
00:17:32,856 --> 00:17:33,806
appreciate what we just did


526
00:17:33,806 --> 00:17:34,026
there.


527
00:17:35,466 --> 00:17:36,716
Imagine if padding and


528
00:17:36,716 --> 00:17:38,116
background were properties on


529
00:17:38,116 --> 00:17:40,226
our text instead of separate


530
00:17:40,226 --> 00:17:40,946
modifiers.


531
00:17:42,206 --> 00:17:43,726
In that case, we would have no


532
00:17:43,726 --> 00:17:45,416
way to know which order they get


533
00:17:45,416 --> 00:17:47,366
applied in without trial and


534
00:17:47,366 --> 00:17:49,246
error or reading documentation.


535
00:17:50,416 --> 00:17:52,566
Instead, by chaining modifiers


536
00:17:52,566 --> 00:17:54,656
together like this, we make that


537
00:17:54,656 --> 00:17:55,646
order explicit.


538
00:17:56,686 --> 00:17:57,976
And we also make it super easy


539
00:17:57,976 --> 00:17:59,966
to customize like we just did.


540
00:18:02,096 --> 00:18:03,036
Now another benefit of these


541
00:18:03,036 --> 00:18:04,476
modifiers is that they can be


542
00:18:04,476 --> 00:18:06,056
shared across views.


543
00:18:06,486 --> 00:18:08,686
For example, here we've applied


544
00:18:08,796 --> 00:18:11,256
an opacity effect to multiple


545
00:18:11,256 --> 00:18:12,566
different kinds of controls.


546
00:18:13,836 --> 00:18:14,846
And we can even apply that


547
00:18:14,846 --> 00:18:16,376
opacity to the entire stack


548
00:18:17,356 --> 00:18:18,386
instead of each individual


549
00:18:18,386 --> 00:18:18,786
control.


550
00:18:19,906 --> 00:18:21,466
None of these views had to


551
00:18:21,466 --> 00:18:23,036
define their own opacity


552
00:18:23,036 --> 00:18:23,476
property.


553
00:18:24,146 --> 00:18:25,766
Which means that they're free to


554
00:18:25,766 --> 00:18:28,156
have simpler, more focused


555
00:18:28,416 --> 00:18:29,526
interfaces of their own.


556
00:18:30,576 --> 00:18:31,866
And this gets at a general


557
00:18:31,866 --> 00:18:33,316
principle of SwiftUI.


558
00:18:36,046 --> 00:18:37,196
Which is to prefer smaller,


559
00:18:37,936 --> 00:18:39,216
single-purpose views.


560
00:18:40,446 --> 00:18:42,106
These kinds of simpler views are


561
00:18:42,106 --> 00:18:44,296
easier to understand and also


562
00:18:44,296 --> 00:18:45,966
easier to maintain over time.


563
00:18:47,436 --> 00:18:48,296
And once you have all of these


564
00:18:48,296 --> 00:18:50,076
little views, you can compose


565
00:18:50,076 --> 00:18:51,376
them together to create bigger,


566
00:18:51,476 --> 00:18:52,556
more complex views.


567
00:18:54,016 --> 00:18:56,986
The entire SwiftUI framework is


568
00:18:57,086 --> 00:18:59,336
oriented around composition of


569
00:18:59,336 --> 00:19:01,466
small pieces and you should


570
00:19:01,466 --> 00:19:02,796
organize your code in the same


571
00:19:02,796 --> 00:19:02,976
way.


572
00:19:05,246 --> 00:19:06,446
So you can start with something


573
00:19:06,446 --> 00:19:07,636
simple like our text.


574
00:19:09,086 --> 00:19:10,086
You can modify that into


575
00:19:10,086 --> 00:19:10,786
something better.


576
00:19:10,896 --> 00:19:12,666
And you can compose that


577
00:19:12,666 --> 00:19:14,006
together to build something


578
00:19:14,006 --> 00:19:14,316
great.


579
00:19:15,406 --> 00:19:17,066
You know, like an app for


580
00:19:17,066 --> 00:19:18,766
avocado toast.


581
00:19:18,766 --> 00:19:20,216
And personally I can't wait to


582
00:19:20,216 --> 00:19:21,966
see the kinds of user interfaces


583
00:19:22,046 --> 00:19:23,226
that all of you are going to


584
00:19:23,226 --> 00:19:23,976
build with SwiftUI.


585
00:19:26,466 --> 00:19:27,506
But before you can do that,


586
00:19:27,506 --> 00:19:28,366
we're first going to need to


587
00:19:28,366 --> 00:19:30,586
know how to build our own custom


588
00:19:30,586 --> 00:19:31,056
views.


589
00:19:31,056 --> 00:19:32,226
And so let's build something new


590
00:19:32,226 --> 00:19:32,456
now.


591
00:19:35,616 --> 00:19:37,296
Looking at our app, I'd really


592
00:19:37,296 --> 00:19:38,726
love to be able to see a history


593
00:19:38,726 --> 00:19:39,666
of my previous orders.


594
00:19:40,856 --> 00:19:41,806
I've already sketched out a


595
00:19:41,806 --> 00:19:42,266
design.


596
00:19:42,896 --> 00:19:44,346
It's just a simple list showing


597
00:19:44,346 --> 00:19:46,186
a summary of each order and some


598
00:19:46,186 --> 00:19:47,716
icons for the toppings that I


599
00:19:47,716 --> 00:19:48,446
chose to include.


600
00:19:50,136 --> 00:19:51,516
I've already gotten started on


601
00:19:51,516 --> 00:19:53,306
the code, so let's just go


602
00:19:53,306 --> 00:19:54,306
through this quickly step by


603
00:19:54,306 --> 00:19:54,566
step.


604
00:19:55,926 --> 00:19:58,286
First, I declared a new view


605
00:19:58,896 --> 00:20:01,296
called OrderHistory as a struct


606
00:20:01,366 --> 00:20:02,446
that conforms to the view


607
00:20:02,446 --> 00:20:02,926
protocol.


608
00:20:04,176 --> 00:20:05,436
We'll come back to that.


609
00:20:06,466 --> 00:20:07,716
My view has a single input


610
00:20:07,716 --> 00:20:09,956
property, previousOrders, which


611
00:20:09,956 --> 00:20:11,196
is just a collection of all of


612
00:20:11,196 --> 00:20:12,066
my order information.


613
00:20:14,726 --> 00:20:16,136
My view has a computed property


614
00:20:16,136 --> 00:20:17,926
called body returning the


615
00:20:17,926 --> 00:20:18,856
contents of the view.


616
00:20:19,936 --> 00:20:21,246
And the sum keyword that we use


617
00:20:21,246 --> 00:20:22,956
here is a Swift feature that


618
00:20:22,956 --> 00:20:25,726
lets Swift infer our return type


619
00:20:25,726 --> 00:20:26,306
automatically.


620
00:20:30,046 --> 00:20:32,216
Our body property returns a list


621
00:20:32,466 --> 00:20:34,676
which generates its contents by


622
00:20:34,676 --> 00:20:36,056
mapping each of our previous


623
00:20:36,056 --> 00:20:39,036
orders into a collection of new


624
00:20:39,036 --> 00:20:41,736
views, one for each order using


625
00:20:41,956 --> 00:20:43,286
another one of those trailing


626
00:20:43,286 --> 00:20:43,976
ViewBuilders.


627
00:20:48,046 --> 00:20:49,566
So now that we understand this


628
00:20:49,726 --> 00:20:51,316
code, let's go back and take a


629
00:20:51,316 --> 00:20:52,786
deeper dive and learn why


630
00:20:52,786 --> 00:20:55,416
SwiftUI defines custom views in


631
00:20:55,416 --> 00:20:55,766
this way.


632
00:20:57,286 --> 00:20:58,736
And let's start with how views


633
00:20:58,796 --> 00:21:00,816
are structs that conform to the


634
00:21:00,816 --> 00:21:01,716
view protocol.


635
00:21:02,466 --> 00:21:04,066
If you're coming from UIKit or


636
00:21:04,066 --> 00:21:06,456
AppKitt, you've probably gotten


637
00:21:06,456 --> 00:21:07,786
used to views being defined as


638
00:21:07,786 --> 00:21:09,696
classes that inherit from a


639
00:21:09,696 --> 00:21:12,176
common view superclass instead


640
00:21:12,256 --> 00:21:13,506
of as structs conforming to


641
00:21:13,506 --> 00:21:14,076
protocols.


642
00:21:14,546 --> 00:21:17,686
For example, custom views in


643
00:21:17,686 --> 00:21:20,616
UIKit inherit from the UIView


644
00:21:20,866 --> 00:21:21,546
superclass.


645
00:21:22,556 --> 00:21:24,736
And UIView defines storage for


646
00:21:24,736 --> 00:21:26,076
common view properties like


647
00:21:26,076 --> 00:21:27,356
alpha and backgroundColor.


648
00:21:27,906 --> 00:21:30,886
Let's imagine we built our


649
00:21:30,886 --> 00:21:33,186
OrderHistory using UIKit instead


650
00:21:33,186 --> 00:21:33,636
of SwiftUI.


651
00:21:33,636 --> 00:21:36,586
Our Custom View would inherit


652
00:21:36,586 --> 00:21:38,316
the stored properties of UIView


653
00:21:38,556 --> 00:21:39,856
as well as adding more


654
00:21:39,856 --> 00:21:41,096
properties for its own custom


655
00:21:41,096 --> 00:21:41,506
behavior.


656
00:21:43,116 --> 00:21:44,816
So how is SwiftUI different than


657
00:21:46,246 --> 00:21:46,346
this?


658
00:21:46,676 --> 00:21:47,736
Well, remember that in SwiftUI


659
00:21:48,486 --> 00:21:50,146
we represent those same kinds of


660
00:21:50,146 --> 00:21:51,816
common view properties as


661
00:21:51,816 --> 00:21:53,836
separate modifiers instead, like


662
00:21:53,836 --> 00:21:54,976
we did for opacity and


663
00:21:54,976 --> 00:21:55,416
background.


664
00:21:55,986 --> 00:21:58,116
And each of these modifiers


665
00:21:58,306 --> 00:21:59,286
creates their own view.


666
00:22:00,536 --> 00:22:02,216
And this means that the storage


667
00:22:02,546 --> 00:22:03,856
for those properties is


668
00:22:03,906 --> 00:22:05,456
distributed across our view


669
00:22:05,456 --> 00:22:07,206
hierarchy in each of these


670
00:22:07,206 --> 00:22:09,416
modifier views instead of being


671
00:22:09,416 --> 00:22:11,736
inherited by every individual


672
00:22:11,736 --> 00:22:12,046
view.


673
00:22:13,576 --> 00:22:14,936
Now this allows our views to be


674
00:22:14,936 --> 00:22:16,856
lighter weight, optimizing their


675
00:22:16,856 --> 00:22:18,916
storage for just their unique


676
00:22:19,126 --> 00:22:19,636
purpose.


677
00:22:22,046 --> 00:22:23,366
And in this world, it makes a


678
00:22:23,366 --> 00:22:25,336
lot of sense that view just


679
00:22:25,336 --> 00:22:27,126
becomes a protocol because it's


680
00:22:27,126 --> 00:22:28,956
no longer needing to serve a


681
00:22:28,956 --> 00:22:30,506
common storage template for all


682
00:22:30,506 --> 00:22:31,066
of your views.


683
00:22:31,176 --> 00:22:33,626
But what does this view protocol


684
00:22:33,626 --> 00:22:34,126
actually do?


685
00:22:34,626 --> 00:22:35,976
Well, let's remember our


686
00:22:35,976 --> 00:22:37,796
conceptual definition of a view.


687
00:22:38,946 --> 00:22:41,296
Which is that a view defines a


688
00:22:41,356 --> 00:22:43,306
piece of our UI and we build


689
00:22:43,306 --> 00:22:45,076
bigger views by composing


690
00:22:45,076 --> 00:22:46,716
together smaller views.


691
00:22:47,216 --> 00:22:49,706
And that's all that the view


692
00:22:49,706 --> 00:22:50,506
protocol does.


693
00:22:51,306 --> 00:22:52,716
It defines a piece of our view


694
00:22:52,716 --> 00:22:54,446
hierarchy, giving it a name so


695
00:22:54,446 --> 00:22:55,986
that it can be composed and


696
00:22:55,986 --> 00:22:58,366
reused across your entire app.


697
00:22:59,026 --> 00:23:00,956
And each concrete type of view


698
00:23:01,266 --> 00:23:03,506
is just an encapsulation of some


699
00:23:03,506 --> 00:23:04,886
other view representing its


700
00:23:04,886 --> 00:23:06,616
contents in its body property


701
00:23:07,776 --> 00:23:09,516
and all of the inputs required


702
00:23:09,666 --> 00:23:11,566
to create that view represented


703
00:23:11,566 --> 00:23:12,386
by its properties.


704
00:23:15,116 --> 00:23:16,916
Now the actual protocol just


705
00:23:16,916 --> 00:23:18,906
defines that one body property


706
00:23:19,176 --> 00:23:20,606
returning just another kind of


707
00:23:20,606 --> 00:23:20,916
view.


708
00:23:23,076 --> 00:23:24,736
But looking at this definition


709
00:23:24,736 --> 00:23:26,416
for a second, some of you may be


710
00:23:26,416 --> 00:23:28,936
asking yourselves, isn't that


711
00:23:28,936 --> 00:23:29,726
kind of recursive?


712
00:23:31,336 --> 00:23:33,246
If I have some view and it


713
00:23:33,246 --> 00:23:35,186
defines as body as another kind


714
00:23:35,186 --> 00:23:38,256
of view, well, then that view is


715
00:23:38,256 --> 00:23:39,306
going to define its body as


716
00:23:39,306 --> 00:23:41,976
another kind of view.


717
00:23:42,196 --> 00:23:44,526
And it has to end somewhere,


718
00:23:44,526 --> 00:23:44,686
right?


719
00:23:44,686 --> 00:23:47,746
It can't just go on forever.


720
00:23:50,046 --> 00:23:51,176
So the reason this works is


721
00:23:51,176 --> 00:23:52,806
because SwiftUI provides many


722
00:23:52,806 --> 00:23:54,746
kinds of primitive views,


723
00:23:55,616 --> 00:23:56,756
meaning views that don't have


724
00:23:56,756 --> 00:23:59,756
any contents of their own and


725
00:23:59,756 --> 00:24:01,736
that represent those atomic


726
00:24:01,736 --> 00:24:03,676
building blocks on which all


727
00:24:03,676 --> 00:24:04,976
other views are built.


728
00:24:07,046 --> 00:24:09,046
We've already seen text.


729
00:24:09,046 --> 00:24:10,626
An image is another example of a


730
00:24:10,626 --> 00:24:11,876
primitive view.


731
00:24:13,336 --> 00:24:15,426
SwiftUI also offers primitives


732
00:24:15,586 --> 00:24:16,596
for drawing like Color and


733
00:24:16,596 --> 00:24:18,246
Shape, as well as layout


734
00:24:18,246 --> 00:24:19,276
primitives like Spacer.


735
00:24:19,676 --> 00:24:23,096
In fact, you can do some pretty


736
00:24:23,096 --> 00:24:25,196
sophisticated drawing just using


737
00:24:25,196 --> 00:24:26,736
primitive views in SwiftUI.


738
00:24:27,766 --> 00:24:28,936
And to learn more about that,


739
00:24:29,206 --> 00:24:30,166
you should definitely watch


740
00:24:30,366 --> 00:24:31,826
Building Custom Views in SwiftUI


741
00:24:31,826 --> 00:24:31,976
talk.


742
00:24:35,066 --> 00:24:36,156
Our example uses text.


743
00:24:37,256 --> 00:24:38,866
But our list actually adds in


744
00:24:38,866 --> 00:24:40,836
its own primitive views that you


745
00:24:40,836 --> 00:24:42,326
can see as the dividers in


746
00:24:42,326 --> 00:24:42,976
between each of our rows.


747
00:24:46,066 --> 00:24:46,976
Now we also saw that our Custom


748
00:24:46,976 --> 00:24:48,246
View is defined as a struct


749
00:24:48,446 --> 00:24:49,416
instead of a class.


750
00:24:49,496 --> 00:24:51,166
And this goes back to how views


751
00:24:51,166 --> 00:24:52,776
are defined declaratively in


752
00:24:52,776 --> 00:24:53,176
SwiftUI.


753
00:24:54,346 --> 00:24:55,606
In this case, that means our


754
00:24:55,606 --> 00:24:58,106
views are not persistent objects


755
00:24:58,356 --> 00:25:00,346
that we update over time using


756
00:25:00,346 --> 00:25:02,976
imperative event-based code.


757
00:25:05,556 --> 00:25:07,756
Instead, our views are defined


758
00:25:07,886 --> 00:25:10,376
declaratively as a function of


759
00:25:10,376 --> 00:25:10,876
their inputs.


760
00:25:13,046 --> 00:25:14,096
So whenever one of our inputs


761
00:25:14,096 --> 00:25:16,506
changes, SwiftUI will call our


762
00:25:16,506 --> 00:25:18,746
body property again to fetch an


763
00:25:18,746 --> 00:25:19,976
updated version of our view.


764
00:25:23,096 --> 00:25:24,766
Now List that we're using here


765
00:25:25,536 --> 00:25:26,896
-- List is a great example of


766
00:25:26,896 --> 00:25:29,576
the power of declarative code.


767
00:25:29,766 --> 00:25:31,126
If our previousOrders collection


768
00:25:31,126 --> 00:25:33,716
changes, SwiftUI will compare


769
00:25:33,876 --> 00:25:35,116
the old and new versions of our


770
00:25:35,116 --> 00:25:37,096
list and efficiently update the


771
00:25:37,096 --> 00:25:39,506
rendered result onscreen just


772
00:25:39,546 --> 00:25:40,646
based on what's changed.


773
00:25:42,066 --> 00:25:43,996
For example, I've been working


774
00:25:43,996 --> 00:25:45,416
on cloud sync for my app.


775
00:25:45,736 --> 00:25:47,196
And it's really important to me


776
00:25:47,196 --> 00:25:48,776
that all of my avocado toast


777
00:25:48,776 --> 00:25:50,996
data is available on all of my


778
00:25:50,996 --> 00:25:51,536
devices.


779
00:25:52,586 --> 00:25:53,486
So let's see what happens if


780
00:25:53,486 --> 00:25:55,586
another device starts adding and


781
00:25:55,586 --> 00:25:56,566
removing orders from our


782
00:25:56,566 --> 00:25:56,916
history.


783
00:25:59,356 --> 00:26:00,946
What you see on the right is


784
00:26:00,946 --> 00:26:03,056
SwiftUI automatically diffing


785
00:26:03,306 --> 00:26:04,506
the changes in our collection


786
00:26:05,086 --> 00:26:07,036
and synthesizing insertions and


787
00:26:07,036 --> 00:26:08,636
deletions and then rendering


788
00:26:08,636 --> 00:26:10,496
them with appropriate default


789
00:26:10,496 --> 00:26:11,216
animations.


790
00:26:12,126 --> 00:26:13,676
And this is all functionality


791
00:26:13,676 --> 00:26:15,426
that you get for free without


792
00:26:15,426 --> 00:26:16,956
writing any additional code.


793
00:26:17,516 --> 00:26:25,546
[ Applause ]


794
00:26:26,046 --> 00:26:26,566
It's pretty awesome.


795
00:26:26,966 --> 00:26:29,556
And the reason this works is


796
00:26:29,556 --> 00:26:31,306
because you don't have to manage


797
00:26:31,306 --> 00:26:32,456
that persistent render state


798
00:26:32,456 --> 00:26:33,076
yourselves.


799
00:26:34,136 --> 00:26:36,086
Instead, you can just generate


800
00:26:36,146 --> 00:26:38,426
new values for your view based


801
00:26:38,426 --> 00:26:40,106
on your current data in that


802
00:26:40,286 --> 00:26:40,896
body property.


803
00:26:43,046 --> 00:26:44,666
And you can let SwiftUI generate


804
00:26:44,666 --> 00:26:46,646
the necessary changes between


805
00:26:46,646 --> 00:26:47,676
those two versions on your


806
00:26:47,676 --> 00:26:47,966
behalf.


807
00:26:50,066 --> 00:26:51,036
And that's the power of


808
00:26:51,036 --> 00:26:51,706
declarative code.


809
00:26:54,236 --> 00:26:55,126
So let's build out the rest of


810
00:26:55,126 --> 00:26:55,946
our orderHistory view.


811
00:26:56,156 --> 00:26:57,536
And if you recall, our original


812
00:26:57,536 --> 00:26:59,466
design included these icons for


813
00:26:59,466 --> 00:27:00,776
any extra toppings that I


814
00:27:01,206 --> 00:27:02,956
included in my order, like salt


815
00:27:03,096 --> 00:27:04,166
and red pepper flakes.


816
00:27:05,136 --> 00:27:06,256
So let's start by showing that


817
00:27:06,256 --> 00:27:07,026
icon for salt.


818
00:27:07,906 --> 00:27:09,396
First, we'll add a horizontal


819
00:27:09,396 --> 00:27:10,916
stack with a Spacer after our


820
00:27:10,916 --> 00:27:11,266
text.


821
00:27:12,826 --> 00:27:14,826
And then I'll show my SaltIcon


822
00:27:14,826 --> 00:27:16,746
view but only if our order


823
00:27:16,826 --> 00:27:17,536
contains salt.


824
00:27:20,176 --> 00:27:21,306
As you can see in the code here,


825
00:27:22,166 --> 00:27:23,406
that ViewBuilder syntax that we


826
00:27:23,406 --> 00:27:25,316
talked about earlier, it lets us


827
00:27:25,316 --> 00:27:27,676
use natural control flow like if


828
00:27:27,676 --> 00:27:29,426
statements to declaratively


829
00:27:29,426 --> 00:27:31,356
define when a view should be


830
00:27:31,356 --> 00:27:32,316
included in our stack.


831
00:27:35,476 --> 00:27:36,656
And using if statements like


832
00:27:36,686 --> 00:27:38,616
this in our declarative code


833
00:27:38,956 --> 00:27:39,946
feels really natural.


834
00:27:40,666 --> 00:27:42,296
But there are also other ways to


835
00:27:42,296 --> 00:27:43,446
write conditional code within


836
00:27:43,446 --> 00:27:43,976
your views.


837
00:27:44,386 --> 00:27:45,686
And it's important to choose the


838
00:27:45,686 --> 00:27:47,006
right tool to get the correct


839
00:27:47,006 --> 00:27:48,006
result onscreen.


840
00:27:48,316 --> 00:27:49,986
So let's look at a quick example


841
00:27:49,986 --> 00:27:50,696
to see what I mean.


842
00:27:51,286 --> 00:27:53,976
I built another screen for our


843
00:27:53,976 --> 00:27:55,486
app which lets you choose


844
00:27:55,486 --> 00:27:57,456
between a normal and flipped


845
00:27:57,456 --> 00:27:57,976
AppIcon.


846
00:27:59,726 --> 00:28:01,676
And my first pass at this was


847
00:28:01,676 --> 00:28:04,066
writing a custom view that takes


848
00:28:04,066 --> 00:28:05,846
a flipped state as an input and


849
00:28:05,846 --> 00:28:07,466
conditionally applies a rotation


850
00:28:07,466 --> 00:28:11,246
modifier based on my state.


851
00:28:13,386 --> 00:28:15,186
However, this produces an ugly


852
00:28:15,186 --> 00:28:16,556
crossfade animation when we


853
00:28:16,556 --> 00:28:19,886
actually try to flip that icon.


854
00:28:20,116 --> 00:28:21,686
This is because our code is


855
00:28:21,736 --> 00:28:23,546
telling SwiftUI to switch


856
00:28:23,546 --> 00:28:25,106
between two different kinds of


857
00:28:25,106 --> 00:28:25,606
views.


858
00:28:26,716 --> 00:28:28,816
A view wrapped in that rotation


859
00:28:28,816 --> 00:28:32,196
modifier versus our AppIcon just


860
00:28:32,196 --> 00:28:32,756
by itself.


861
00:28:33,326 --> 00:28:37,426
And by default, SwiftUI fades in


862
00:28:37,426 --> 00:28:39,936
and out views when they're added


863
00:28:39,936 --> 00:28:40,676
and removed.


864
00:28:41,596 --> 00:28:42,506
Which is why we get this


865
00:28:42,506 --> 00:28:43,966
crossfade effect.


866
00:28:46,156 --> 00:28:47,426
Now instead I'd really like that


867
00:28:47,426 --> 00:28:48,876
icon to rotate when it's


868
00:28:48,876 --> 00:28:49,156
flipped.


869
00:28:50,136 --> 00:28:52,556
And so to do that, I define a


870
00:28:52,556 --> 00:28:54,096
single view with a single


871
00:28:54,096 --> 00:28:56,786
rotationEffect modifier and


872
00:28:57,126 --> 00:28:59,086
conditonalize its input based on


873
00:28:59,086 --> 00:28:59,526
our state.


874
00:29:00,116 --> 00:29:02,986
By defining our condition inside


875
00:29:02,986 --> 00:29:05,026
of our modifier, SwiftUI can


876
00:29:05,026 --> 00:29:06,136
provide a better default


877
00:29:06,136 --> 00:29:08,266
animation, rotating our icon to


878
00:29:08,266 --> 00:29:09,186
the new orientation.


879
00:29:10,396 --> 00:29:11,856
And the lesson here is that you


880
00:29:11,856 --> 00:29:12,736
should try to push your


881
00:29:12,736 --> 00:29:15,066
conditions into your modifiers


882
00:29:15,066 --> 00:29:16,306
as much as possible.


883
00:29:16,996 --> 00:29:18,286
Because that will help SwiftUI


884
00:29:19,126 --> 00:29:20,476
detect those changes and give


885
00:29:20,476 --> 00:29:21,566
you better animations.


886
00:29:23,116 --> 00:29:24,926
That if statement syntax that we


887
00:29:24,926 --> 00:29:26,806
saw earlier, that's really great


888
00:29:27,106 --> 00:29:28,666
if your intention is to actually


889
00:29:28,706 --> 00:29:30,916
add or remove views from your


890
00:29:30,916 --> 00:29:31,316
hierarchy.


891
00:29:36,046 --> 00:29:37,136
So going back to our example


892
00:29:37,316 --> 00:29:39,886
app, our orderHistory view is


893
00:29:40,006 --> 00:29:40,966
starting to get a little bit


894
00:29:40,966 --> 00:29:41,166
big.


895
00:29:41,526 --> 00:29:42,686
So it would be nice to start


896
00:29:42,686 --> 00:29:43,656
breaking this down into some


897
00:29:43,656 --> 00:29:44,446
smaller pieces.


898
00:29:45,226 --> 00:29:46,346
So let's try factoring out the


899
00:29:46,346 --> 00:29:48,096
code for each List row into its


900
00:29:48,096 --> 00:29:48,936
own custom view.


901
00:29:51,116 --> 00:29:52,166
First, I'm going to create a new


902
00:29:52,166 --> 00:29:53,506
custom view called OrderCell.


903
00:29:53,506 --> 00:29:56,356
Now I'll need a body for this


904
00:29:56,356 --> 00:29:58,436
view, and luckily we've pretty


905
00:29:58,436 --> 00:30:00,326
much already built that just


906
00:30:00,326 --> 00:30:01,606
within our lists in our


907
00:30:01,606 --> 00:30:02,296
OrderHistory view.


908
00:30:02,366 --> 00:30:03,936
So let's move that code over.


909
00:30:06,316 --> 00:30:09,176
Our OrderCell requires input


910
00:30:09,176 --> 00:30:10,516
data in order to generate its


911
00:30:10,516 --> 00:30:10,836
body.


912
00:30:11,416 --> 00:30:12,616
So we're also going to need to


913
00:30:12,616 --> 00:30:14,216
add a property to represent


914
00:30:14,886 --> 00:30:14,976
that.


915
00:30:16,156 --> 00:30:18,096
And finally, we'll finish up by


916
00:30:18,096 --> 00:30:19,396
creating an instance of our new


917
00:30:19,396 --> 00:30:21,386
view for each row within our


918
00:30:21,386 --> 00:30:21,736
list.


919
00:30:24,076 --> 00:30:25,746
And the takeaway here is that


920
00:30:25,746 --> 00:30:27,896
it's really easy to break down


921
00:30:27,896 --> 00:30:29,406
your UI into smaller pieces and


922
00:30:29,406 --> 00:30:31,016
to factor out code into new


923
00:30:31,016 --> 00:30:31,466
views.


924
00:30:32,106 --> 00:30:34,056
And remember, with declarative


925
00:30:34,056 --> 00:30:36,046
code, adding a new wrapper view


926
00:30:36,306 --> 00:30:38,436
is effectively free since


927
00:30:38,436 --> 00:30:40,526
SwiftUI will optimize it down


928
00:30:40,926 --> 00:30:41,766
behind the scenes.


929
00:30:42,366 --> 00:30:44,656
And so the important thing here


930
00:30:44,856 --> 00:30:46,136
is that you no longer have to


931
00:30:46,136 --> 00:30:48,096
compromise between organizing


932
00:30:48,096 --> 00:30:49,416
your view code the way that


933
00:30:49,416 --> 00:30:51,566
makes the most sense to you and


934
00:30:51,566 --> 00:30:52,886
getting the best performance


935
00:30:53,126 --> 00:30:53,796
from your app.


936
00:30:54,516 --> 00:31:01,736
[ Applause ]


937
00:31:02,236 --> 00:31:03,386
So let's finish by including


938
00:31:03,386 --> 00:31:05,136
that final icon for red pepper


939
00:31:05,136 --> 00:31:05,526
flakes.


940
00:31:06,126 --> 00:31:07,486
And it's easy to do that just by


941
00:31:07,486 --> 00:31:08,936
adding another condition like we


942
00:31:08,936 --> 00:31:09,446
did before.


943
00:31:10,616 --> 00:31:12,476
Now this works but it doesn't


944
00:31:12,476 --> 00:31:13,396
seem very scalable.


945
00:31:13,896 --> 00:31:15,286
If we add new toppings in the


946
00:31:15,286 --> 00:31:17,306
future, we'll have to add them


947
00:31:17,306 --> 00:31:18,476
with new conditions into our


948
00:31:18,476 --> 00:31:18,726
code.


949
00:31:18,726 --> 00:31:20,686
What would be really great


950
00:31:20,686 --> 00:31:22,896
instead would be to


951
00:31:22,896 --> 00:31:24,406
conditionally generate a


952
00:31:24,406 --> 00:31:26,256
collection of icons from our


953
00:31:26,256 --> 00:31:26,716
order data.


954
00:31:29,306 --> 00:31:30,226
To generate a collection of


955
00:31:30,226 --> 00:31:32,306
views, we can use a ForEach


956
00:31:32,306 --> 00:31:32,576
view.


957
00:31:34,086 --> 00:31:35,976
Just like our List, ForEach


958
00:31:36,376 --> 00:31:38,316
takes a collection of data and a


959
00:31:38,316 --> 00:31:40,266
ViewBuilder that maps each data


960
00:31:40,316 --> 00:31:42,076
item into its own view.


961
00:31:43,366 --> 00:31:46,056
But unlike List, ForEach doesn't


962
00:31:46,056 --> 00:31:47,716
add any visual effects of its


963
00:31:47,716 --> 00:31:47,976
own.


964
00:31:49,056 --> 00:31:51,116
Instead, it just adds its own


965
00:31:51,116 --> 00:31:53,076
contents to its container.


966
00:31:56,106 --> 00:31:57,206
So this code is a lot better


967
00:31:57,476 --> 00:31:58,626
because now our order history


968
00:31:58,746 --> 00:32:00,046
will automatically support new


969
00:32:00,046 --> 00:32:01,446
toppings in the future without


970
00:32:01,486 --> 00:32:03,316
us having to add any more code


971
00:32:03,316 --> 00:32:03,776
to our view.


972
00:32:06,066 --> 00:32:07,116
For example, we could add a


973
00:32:07,116 --> 00:32:08,686
third icon for eggs.


974
00:32:11,286 --> 00:32:13,236
So taking a step back, it's


975
00:32:13,236 --> 00:32:14,806
pretty amazing how much


976
00:32:14,806 --> 00:32:16,096
functionality we were able to


977
00:32:16,096 --> 00:32:18,066
just build with just about a


978
00:32:18,066 --> 00:32:19,306
dozen or so lines of code.


979
00:32:20,476 --> 00:32:22,386
And what's even more amazing is


980
00:32:22,456 --> 00:32:24,346
all of the code that we didn't


981
00:32:24,346 --> 00:32:25,226
have to write.


982
00:32:26,776 --> 00:32:28,026
We already saw how SwiftUI


983
00:32:28,256 --> 00:32:29,866
automatically handled changing


984
00:32:29,866 --> 00:32:31,956
data, even inserting default


985
00:32:31,956 --> 00:32:33,476
animations when our data is


986
00:32:33,476 --> 00:32:34,396
added and removed.


987
00:32:37,046 --> 00:32:38,736
But I didn't mention that our


988
00:32:38,736 --> 00:32:40,496
app also adapts to dynamic type.


989
00:32:41,686 --> 00:32:43,066
And it even supports Dark Mode.


990
00:32:43,266 --> 00:32:44,896
And we got all of this support


991
00:32:44,896 --> 00:32:46,346
for free without writing any


992
00:32:46,346 --> 00:32:46,976
additional code.


993
00:32:48,516 --> 00:32:55,226
[ Applause ]


994
00:32:55,726 --> 00:32:57,566
This is pretty great and this is


995
00:32:57,566 --> 00:32:59,566
what we mean by SwiftUI giving


996
00:32:59,566 --> 00:33:01,746
you that shorter path to a great


997
00:33:01,746 --> 00:33:01,886
app.


998
00:33:04,106 --> 00:33:05,716
So that's a lesson on building


999
00:33:05,716 --> 00:33:07,426
custom views with SwiftUI.


1000
00:33:08,786 --> 00:33:10,256
And now I'd like to invite up my


1001
00:33:10,256 --> 00:33:12,116
colleague Taylor to talk to you


1002
00:33:12,306 --> 00:33:13,716
about how to take full advantage


1003
00:33:13,996 --> 00:33:15,416
of the views that SwiftUI


1004
00:33:15,416 --> 00:33:17,616
provides for you out of the box.


1005
00:33:18,276 --> 00:33:18,596
Thanks.


1006
00:33:19,516 --> 00:33:24,656
[ Applause ]


1007
00:33:25,156 --> 00:33:25,716
>> Thank you, Matt.


1008
00:33:28,046 --> 00:33:28,646
Hello, everybody.


1009
00:33:29,396 --> 00:33:31,376
At this point, we have a pretty


1010
00:33:31,376 --> 00:33:33,216
good start to our app, with Matt


1011
00:33:33,216 --> 00:33:34,276
building out the initial order


1012
00:33:34,276 --> 00:33:35,586
form and history screens.


1013
00:33:35,586 --> 00:33:37,516
But one thing that stands out is


1014
00:33:37,516 --> 00:33:38,746
that this doesn't quite look


1015
00:33:39,006 --> 00:33:40,536
like iOS apps we're used to.


1016
00:33:40,886 --> 00:33:41,986
They're usually not these simple


1017
00:33:41,986 --> 00:33:43,866
vertical stacks of controls.


1018
00:33:44,756 --> 00:33:46,246
And typically, this type of UI


1019
00:33:46,246 --> 00:33:47,096
looks something more like you'd


1020
00:33:47,096 --> 00:33:47,616
see on the right.


1021
00:33:47,796 --> 00:33:49,456
And one of the biggest


1022
00:33:49,456 --> 00:33:51,126
differences is the container


1023
00:33:51,206 --> 00:33:52,796
around the controls themselves


1024
00:33:54,006 --> 00:33:55,636
having this standardized group


1025
00:33:55,636 --> 00:33:56,176
list style.


1026
00:33:57,056 --> 00:33:58,836
Now in SwiftUI we refer to this


1027
00:33:59,236 --> 00:33:59,816
as a form.


1028
00:33:59,816 --> 00:34:02,406
And a form is a container just


1029
00:34:02,406 --> 00:34:03,926
like VStack, but one built


1030
00:34:03,926 --> 00:34:05,536
specifically for building these


1031
00:34:05,596 --> 00:34:06,696
sections of heterogeneous


1032
00:34:06,726 --> 00:34:08,616
controls, giving the overall


1033
00:34:08,616 --> 00:34:10,436
result a standard look and feel


1034
00:34:10,786 --> 00:34:11,956
no matter what the platform.


1035
00:34:14,045 --> 00:34:15,916
Now we've already defined the


1036
00:34:15,916 --> 00:34:17,476
exact set of functionalities we


1037
00:34:17,476 --> 00:34:18,376
want in our app.


1038
00:34:19,025 --> 00:34:21,446
The title, Toggles, stepper and


1039
00:34:21,446 --> 00:34:21,726
button.


1040
00:34:23,036 --> 00:34:24,616
And all we're doing is changing


1041
00:34:24,616 --> 00:34:26,186
the container itself from the


1042
00:34:26,186 --> 00:34:29,005
existing VStack into a form.


1043
00:34:29,005 --> 00:34:30,936
And then we can easily add in


1044
00:34:30,936 --> 00:34:32,795
some sections to divide up that


1045
00:34:32,795 --> 00:34:33,255
content.


1046
00:34:34,565 --> 00:34:35,596
Now just as Matt previously


1047
00:34:35,596 --> 00:34:37,596
discussed, our code continues to


1048
00:34:37,596 --> 00:34:39,206
reflect the resulting UI.


1049
00:34:40,346 --> 00:34:41,646
And since the core definition of


1050
00:34:41,646 --> 00:34:43,696
our controls didn't change, our


1051
00:34:43,696 --> 00:34:44,626
code really didn't have to


1052
00:34:44,626 --> 00:34:44,946
either.


1053
00:34:45,985 --> 00:34:47,106
Just by changing the container


1054
00:34:47,106 --> 00:34:49,356
from a VStack to a form resulted


1055
00:34:49,356 --> 00:34:50,596
in the controls automatically


1056
00:34:50,596 --> 00:34:52,156
adapting to that context.


1057
00:34:52,966 --> 00:34:54,045
From the overall background and


1058
00:34:54,045 --> 00:34:55,666
scrollability to the lines


1059
00:34:55,806 --> 00:34:57,256
separating each of the controls,


1060
00:34:57,566 --> 00:34:58,766
to even the styling of things


1061
00:34:58,766 --> 00:34:59,196
like button.


1062
00:35:00,316 --> 00:35:02,316
This is yet again SwiftUI taking


1063
00:35:02,316 --> 00:35:03,816
care of the details for what


1064
00:35:03,816 --> 00:35:05,626
exactly it takes to render those


1065
00:35:05,626 --> 00:35:07,786
elements, and allowing us to


1066
00:35:07,786 --> 00:35:09,356
focus on the functionality of


1067
00:35:09,356 --> 00:35:09,846
our app.


1068
00:35:11,676 --> 00:35:12,986
Now one subtle change that


1069
00:35:12,986 --> 00:35:14,706
happened isn't visible from this


1070
00:35:14,706 --> 00:35:15,546
static screenshot.


1071
00:35:16,556 --> 00:35:17,966
Focusing on the buttons, you can


1072
00:35:17,966 --> 00:35:19,216
see that the alignment, padding


1073
00:35:19,216 --> 00:35:20,486
and decoration has all changed


1074
00:35:20,486 --> 00:35:22,646
around the button, but the press


1075
00:35:22,646 --> 00:35:24,436
state has even taken on the


1076
00:35:24,436 --> 00:35:25,996
special full bleed effect that


1077
00:35:25,996 --> 00:35:27,346
you would expect from this type


1078
00:35:27,346 --> 00:35:30,516
of UI, all the while showing the


1079
00:35:30,516 --> 00:35:32,276
same exact definition of being a


1080
00:35:32,276 --> 00:35:32,546
button.


1081
00:35:34,116 --> 00:35:35,536
Like you might expect, this same


1082
00:35:35,536 --> 00:35:36,516
definition works in other


1083
00:35:36,516 --> 00:35:37,936
contexts or other platforms,


1084
00:35:38,306 --> 00:35:39,316
having a wide variety of


1085
00:35:39,316 --> 00:35:41,896
possible looks and feel.


1086
00:35:42,126 --> 00:35:43,076
button also demonstrates the


1087
00:35:43,076 --> 00:35:44,556
same inherent ability for


1088
00:35:44,556 --> 00:35:46,086
composability that we've seen in


1089
00:35:46,086 --> 00:35:46,816
other views.


1090
00:35:47,396 --> 00:35:48,286
The label is of course not


1091
00:35:48,286 --> 00:35:49,586
constrained to just being a text


1092
00:35:49,586 --> 00:35:51,016
but could also be an image.


1093
00:35:51,016 --> 00:35:52,696
It really could be any type of


1094
00:35:52,696 --> 00:35:54,996
view that we could define, even


1095
00:35:54,996 --> 00:35:56,656
an explicit vertical stack of an


1096
00:35:56,656 --> 00:35:58,876
image and a text.


1097
00:35:59,516 --> 00:36:05,846
[ Applause ]


1098
00:36:06,346 --> 00:36:07,856
And this inherent composability


1099
00:36:07,856 --> 00:36:08,946
enables a wide variety of


1100
00:36:08,946 --> 00:36:10,826
possibilities while at the same


1101
00:36:10,826 --> 00:36:12,186
time enabling button to be


1102
00:36:12,186 --> 00:36:13,636
distilled down to two


1103
00:36:13,636 --> 00:36:14,556
fundamental properties.


1104
00:36:15,576 --> 00:36:16,556
The action it performs when


1105
00:36:16,556 --> 00:36:18,036
activated and the label


1106
00:36:18,176 --> 00:36:19,256
describing what that action is.


1107
00:36:20,596 --> 00:36:21,756
And that's the entire API


1108
00:36:21,756 --> 00:36:22,886
surface of button.


1109
00:36:24,046 --> 00:36:25,176
This is of course not to say


1110
00:36:25,176 --> 00:36:26,496
that these are the only two ways


1111
00:36:26,546 --> 00:36:27,996
that buttons can be customized.


1112
00:36:28,736 --> 00:36:29,556
Like we saw before and will


1113
00:36:29,556 --> 00:36:31,426
continue to see, both context


1114
00:36:31,476 --> 00:36:33,346
and modifiers enable adding many


1115
00:36:33,346 --> 00:36:35,036
more rich behaviors from


1116
00:36:35,036 --> 00:36:36,716
disabled state to the styling of


1117
00:36:36,716 --> 00:36:38,446
the button to even control sizes


1118
00:36:38,446 --> 00:36:39,196
on macOS.


1119
00:36:40,016 --> 00:36:41,826
But this core definition plus


1120
00:36:41,826 --> 00:36:43,776
adaptive behaviors enables any


1121
00:36:43,776 --> 00:36:44,336
type of button.


1122
00:36:45,196 --> 00:36:46,366
And over time and across the


1123
00:36:46,366 --> 00:36:48,186
different platforms, we've seen


1124
00:36:48,186 --> 00:36:49,166
a lot of different buttons.


1125
00:36:49,956 --> 00:36:51,006
Not only did they vary based on


1126
00:36:51,006 --> 00:36:52,756
how they look but also in how we


1127
00:36:52,756 --> 00:36:54,686
interact with them, from a click


1128
00:36:54,686 --> 00:36:56,376
to a tap, to being selected


1129
00:36:56,376 --> 00:36:57,726
using the switch control or the


1130
00:36:57,726 --> 00:37:00,206
Siri Remote, but they can all be


1131
00:37:00,206 --> 00:37:02,016
distilled down to having an


1132
00:37:02,016 --> 00:37:03,296
action and a label.


1133
00:37:05,096 --> 00:37:07,116
Now just like button, every


1134
00:37:07,116 --> 00:37:08,736
control in SwiftUI carries the


1135
00:37:08,736 --> 00:37:10,666
same ability to have this


1136
00:37:10,666 --> 00:37:11,966
adaptive behavior.


1137
00:37:13,276 --> 00:37:15,066
Controls describe the purpose or


1138
00:37:15,066 --> 00:37:16,466
the role that they serve instead


1139
00:37:16,466 --> 00:37:17,126
of just how they look.


1140
00:37:17,126 --> 00:37:18,816
And this allows them to be


1141
00:37:18,816 --> 00:37:19,896
reused across these different


1142
00:37:19,896 --> 00:37:21,886
contexts and platforms and adapt


1143
00:37:21,886 --> 00:37:22,716
to those situations.


1144
00:37:23,696 --> 00:37:24,606
And this also helps them have


1145
00:37:24,606 --> 00:37:26,716
that smaller API surface catered


1146
00:37:26,716 --> 00:37:27,606
to that exact role.


1147
00:37:27,606 --> 00:37:29,726
And at the same time still


1148
00:37:29,726 --> 00:37:31,426
having fewer controls rather


1149
00:37:31,426 --> 00:37:32,746
than need a control for every


1150
00:37:32,746 --> 00:37:33,926
context you might need to use it


1151
00:37:33,926 --> 00:37:34,206
in.


1152
00:37:35,726 --> 00:37:37,386
And all the while still enabling


1153
00:37:37,386 --> 00:37:38,766
really powerful customization


1154
00:37:39,046 --> 00:37:40,356
such as completely redefining


1155
00:37:40,356 --> 00:37:41,836
how buttons should look in your


1156
00:37:42,736 --> 00:37:42,826
app.


1157
00:37:43,756 --> 00:37:46,016
Now we saw how this adaptivity


1158
00:37:46,016 --> 00:37:47,406
allowed us to quickly transform


1159
00:37:47,406 --> 00:37:49,206
from a simple stack of controls


1160
00:37:49,486 --> 00:37:50,576
into the standard look and feel


1161
00:37:50,746 --> 00:37:51,546
of a system form.


1162
00:37:52,416 --> 00:37:53,666
But this same adaptivity also


1163
00:37:53,666 --> 00:37:54,516
enables us to take these


1164
00:37:54,516 --> 00:37:55,996
controls to other platforms such


1165
00:37:56,446 --> 00:37:58,126
as the Watch, so we can quickly


1166
00:37:58,126 --> 00:37:59,316
order our toast on the go.


1167
00:38:01,596 --> 00:38:02,456
Now the other control we're


1168
00:38:02,456 --> 00:38:04,236
already using is Toggle.


1169
00:38:04,956 --> 00:38:06,126
And you've already seen how


1170
00:38:06,126 --> 00:38:07,916
Toggle in SwiftUI is more than


1171
00:38:07,916 --> 00:38:09,006
just a literal switch.


1172
00:38:09,696 --> 00:38:11,586
And this is true regardless of


1173
00:38:11,586 --> 00:38:12,686
the platform it's on.


1174
00:38:13,616 --> 00:38:15,086
And like button, Toggle has two


1175
00:38:15,086 --> 00:38:16,926
fundamental properties, whether


1176
00:38:16,926 --> 00:38:18,486
it's on or off, and the label


1177
00:38:18,486 --> 00:38:19,766
describing the overall purpose


1178
00:38:20,156 --> 00:38:20,596
of the Toggle.


1179
00:38:21,656 --> 00:38:22,736
And again, that's reflected in


1180
00:38:22,876 --> 00:38:23,926
the construction itself.


1181
00:38:26,046 --> 00:38:26,916
Now one notable difference from


1182
00:38:26,916 --> 00:38:28,226
button is that it doesn't take


1183
00:38:28,226 --> 00:38:30,086
an action, but instead takes a


1184
00:38:30,086 --> 00:38:31,816
binding to a Boolean value.


1185
00:38:32,336 --> 00:38:33,876
And this binding is a direct


1186
00:38:33,916 --> 00:38:35,176
read/write connection to some


1187
00:38:35,176 --> 00:38:36,706
piece of state or model in your


1188
00:38:36,706 --> 00:38:38,176
application and allows the


1189
00:38:38,176 --> 00:38:39,706
Toggle to reflect and update


1190
00:38:39,706 --> 00:38:41,366
that without manually needing to


1191
00:38:41,366 --> 00:38:42,966
respond to an action, pull the


1192
00:38:42,966 --> 00:38:44,136
value out and then set it in


1193
00:38:44,136 --> 00:38:44,636
your model.


1194
00:38:45,246 --> 00:38:46,616
It takes care of it all for


1195
00:38:46,616 --> 00:38:46,956
yourself.


1196
00:38:48,516 --> 00:38:54,566
[ Applause ]


1197
00:38:55,066 --> 00:38:56,446
Now Toggle and the other


1198
00:38:56,446 --> 00:38:58,426
controls are also adaptive in


1199
00:38:58,426 --> 00:38:59,616
one other very important way.


1200
00:39:00,606 --> 00:39:01,986
For some people, UI's are a


1201
00:39:01,986 --> 00:39:03,816
visual experience while others


1202
00:39:03,816 --> 00:39:04,906
might predominantly use their


1203
00:39:04,906 --> 00:39:06,736
other senses to experience that


1204
00:39:06,736 --> 00:39:07,846
exact same UI.


1205
00:39:07,846 --> 00:39:10,436
For instance, people with


1206
00:39:10,436 --> 00:39:11,926
impaired vision are able to use


1207
00:39:11,926 --> 00:39:13,306
VoiceOver to navigate and


1208
00:39:13,306 --> 00:39:14,746
interact with your app using


1209
00:39:14,746 --> 00:39:15,106
audio.


1210
00:39:15,106 --> 00:39:16,996
And for those of you who haven't


1211
00:39:16,996 --> 00:39:18,116
heard it, this is what it sounds


1212
00:39:18,116 --> 00:39:19,566
like to begin using VoiceOver.


1213
00:39:19,956 --> 00:39:21,016
>> VoiceOver On.


1214
00:39:22,406 --> 00:39:23,876
>> Now VoiceOver is just one of


1215
00:39:23,876 --> 00:39:25,196
the system-wide features that


1216
00:39:25,196 --> 00:39:26,896
are able to take your UI and


1217
00:39:26,896 --> 00:39:28,166
surface it in these alternate


1218
00:39:28,166 --> 00:39:28,706
forms.


1219
00:39:29,326 --> 00:39:30,766
And because Toggle and the other


1220
00:39:30,766 --> 00:39:32,056
controls are defined based on


1221
00:39:32,056 --> 00:39:34,216
their purpose and include that


1222
00:39:34,216 --> 00:39:35,816
human interpretable label, they


1223
00:39:35,816 --> 00:39:37,026
can automatically adapt for


1224
00:39:37,396 --> 00:39:38,206
these features.


1225
00:39:39,216 --> 00:39:40,176
So when we navigate to this


1226
00:39:40,176 --> 00:39:41,236
Toggle using VoiceOver --


1227
00:39:41,946 --> 00:39:44,126
>> Include Salt, Switch button,


1228
00:39:44,516 --> 00:39:48,236
On Double-Tap to Toggle Setting.


1229
00:39:48,806 --> 00:39:50,386
>> It is able to reflect that


1230
00:39:50,386 --> 00:39:50,846
same label.


1231
00:39:50,846 --> 00:39:52,766
And this is true even when the


1232
00:39:52,766 --> 00:39:53,716
label isn't text.


1233
00:39:54,606 --> 00:39:56,166
Now for images, if the image


1234
00:39:56,166 --> 00:39:57,476
name isn't descriptive enough,


1235
00:39:57,696 --> 00:39:58,806
you can explicitly provide a


1236
00:39:58,806 --> 00:40:00,406
label directly alongside the


1237
00:40:00,406 --> 00:40:00,886
image.


1238
00:40:03,046 --> 00:40:03,956
And of course even for


1239
00:40:03,956 --> 00:40:04,746
completely custom --


1240
00:40:05,151 --> 00:40:07,151
[ Applause ]


1241
00:40:07,286 --> 00:40:08,216
It's really exciting, yeah.


1242
00:40:09,041 --> 00:40:11,041
[ Applause ]


1243
00:40:11,066 --> 00:40:11,696
And of course even for


1244
00:40:11,696 --> 00:40:13,386
completely custom views, you can


1245
00:40:13,386 --> 00:40:14,426
always explicitly provide the


1246
00:40:14,426 --> 00:40:15,846
label using the accessibility


1247
00:40:15,846 --> 00:40:16,706
label modifier.


1248
00:40:18,086 --> 00:40:19,176
Now in addition to VoiceOver,


1249
00:40:19,376 --> 00:40:20,706
this information also admits use


1250
00:40:20,706 --> 00:40:22,186
for other features, like the new


1251
00:40:22,186 --> 00:40:24,276
Voice Control on iOS and macOS


1252
00:40:24,736 --> 00:40:26,096
so that we can say, "Tap Include


1253
00:40:26,146 --> 00:40:28,046
Salt," and our UI behaves as we


1254
00:40:28,046 --> 00:40:28,416
expect.


1255
00:40:29,676 --> 00:40:30,646
And making sure your app is


1256
00:40:30,646 --> 00:40:32,016
accessible means it will work


1257
00:40:32,016 --> 00:40:32,906
with all these different


1258
00:40:32,906 --> 00:40:34,236
technologies and means that


1259
00:40:34,236 --> 00:40:36,026
everyone can use your app.


1260
00:40:36,026 --> 00:40:38,086
And SwiftUI is here to help.


1261
00:40:39,676 --> 00:40:40,666
There's a great talk this year


1262
00:40:40,666 --> 00:40:41,626
that will go into a lot more


1263
00:40:41,626 --> 00:40:43,116
detail about how you can make


1264
00:40:43,116 --> 00:40:45,306
sure that your SwiftUI app is


1265
00:40:45,306 --> 00:40:45,976
fully accessible.


1266
00:40:48,656 --> 00:40:49,766
Now at this point we've been


1267
00:40:49,766 --> 00:40:50,916
able to quickly build up this


1268
00:40:50,916 --> 00:40:52,566
initial basic interface that has


1269
00:40:52,566 --> 00:40:53,636
all the behaviors we expect:


1270
00:40:54,466 --> 00:40:56,356
dynamic type, Dark Mode and


1271
00:40:56,356 --> 00:40:57,066
accessibility.


1272
00:40:57,066 --> 00:40:58,956
But we've really only added a


1273
00:40:58,956 --> 00:41:00,576
few customization options for


1274
00:41:00,576 --> 00:41:01,466
the toast itself.


1275
00:41:02,476 --> 00:41:04,256
And of course everyone knows


1276
00:41:04,316 --> 00:41:05,636
that a professional artisanal


1277
00:41:05,636 --> 00:41:07,076
toast repertoire comes with a


1278
00:41:07,076 --> 00:41:08,026
variety of different bread


1279
00:41:08,026 --> 00:41:09,716
types, methods to prepare the


1280
00:41:09,716 --> 00:41:11,676
avocado and of course a variety


1281
00:41:11,676 --> 00:41:13,056
of spreads and add-ons.


1282
00:41:13,786 --> 00:41:15,826
To add in these more advanced


1283
00:41:15,826 --> 00:41:17,986
configuration options, we can


1284
00:41:17,986 --> 00:41:19,386
look for some inspiration from


1285
00:41:19,386 --> 00:41:21,786
the flexibility that is macOS.


1286
00:41:22,016 --> 00:41:23,026
Or we might want to have a


1287
00:41:23,026 --> 00:41:24,496
little utility window to allow


1288
00:41:24,496 --> 00:41:26,206
us to order toast right from our


1289
00:41:26,206 --> 00:41:26,546
desk.


1290
00:41:28,276 --> 00:41:29,576
You can see here that the


1291
00:41:29,576 --> 00:41:30,706
existing controls we're already


1292
00:41:30,706 --> 00:41:32,396
using take on the expected look


1293
00:41:32,586 --> 00:41:34,376
for macOS -- the Toggles, the


1294
00:41:34,376 --> 00:41:35,446
stepper, the button.


1295
00:41:35,446 --> 00:41:37,036
But we also have a few


1296
00:41:37,036 --> 00:41:38,666
additional controls that allow


1297
00:41:38,666 --> 00:41:39,646
us to pick from the type of


1298
00:41:39,686 --> 00:41:42,676
bread, the spread to add, and


1299
00:41:42,706 --> 00:41:43,976
how to prepare the avocado.


1300
00:41:46,436 --> 00:41:48,046
Now these are all examples of


1301
00:41:48,046 --> 00:41:49,436
the Picker control in SwiftUI.


1302
00:41:50,206 --> 00:41:51,906
Picker is built for the purpose


1303
00:41:51,906 --> 00:41:53,666
of selecting one value out of a


1304
00:41:53,666 --> 00:41:54,316
set of options.


1305
00:41:55,606 --> 00:41:56,796
Now Picker is obviously a little


1306
00:41:56,796 --> 00:41:58,206
more complicated than the other


1307
00:41:58,206 --> 00:42:00,196
controls and in fact has three


1308
00:42:00,196 --> 00:42:01,416
core properties instead of two.


1309
00:42:02,596 --> 00:42:03,456
The options that you can pick


1310
00:42:03,456 --> 00:42:05,356
from, the current selection from


1311
00:42:05,356 --> 00:42:06,816
those options and the label


1312
00:42:06,946 --> 00:42:08,146
describing the overall purpose


1313
00:42:08,436 --> 00:42:11,006
of the Picker.


1314
00:42:11,186 --> 00:42:13,216
Now the selection is a binding,


1315
00:42:13,796 --> 00:42:14,896
just like Toggles is on


1316
00:42:14,896 --> 00:42:15,276
property.


1317
00:42:15,856 --> 00:42:17,016
Which allows us to directly


1318
00:42:17,016 --> 00:42:18,896
connect it again to our modeler


1319
00:42:18,896 --> 00:42:19,256
state.


1320
00:42:19,346 --> 00:42:21,416
And the type of this binding


1321
00:42:21,656 --> 00:42:23,376
corresponds to the tag values


1322
00:42:23,456 --> 00:42:24,506
associated with each of these


1323
00:42:24,506 --> 00:42:24,886
options.


1324
00:42:25,926 --> 00:42:26,746
When one of the options is


1325
00:42:26,746 --> 00:42:28,636
selected, that tag value is


1326
00:42:28,636 --> 00:42:29,826
written back into the selection


1327
00:42:30,096 --> 00:42:31,556
and back into our model, all


1328
00:42:31,556 --> 00:42:32,946
with no work.


1329
00:42:35,046 --> 00:42:36,676
Now of course Pickers on macOS


1330
00:42:36,776 --> 00:42:38,366
don't always manifest as pop-up


1331
00:42:38,366 --> 00:42:38,656
buttons.


1332
00:42:39,416 --> 00:42:40,736
In this single window, we can


1333
00:42:40,736 --> 00:42:41,766
see two different styles of


1334
00:42:41,766 --> 00:42:44,356
Picker, both a pop-up button and


1335
00:42:44,356 --> 00:42:45,726
a radio group.


1336
00:42:46,396 --> 00:42:47,926
While SwiftUI automatically


1337
00:42:47,926 --> 00:42:49,476
provides a default style that's


1338
00:42:49,476 --> 00:42:50,686
adaptive to where controls are


1339
00:42:50,686 --> 00:42:53,176
used, controls also inherently


1340
00:42:53,176 --> 00:42:54,756
have the ability to customize


1341
00:42:54,756 --> 00:42:56,486
their styling, both to


1342
00:42:56,486 --> 00:42:58,136
system-provided styles and even


1343
00:42:58,136 --> 00:42:59,246
custom-built ones.


1344
00:43:00,336 --> 00:43:01,436
In this case, we want to


1345
00:43:01,436 --> 00:43:02,996
override the default style and


1346
00:43:02,996 --> 00:43:04,636
impose an explicit radio group


1347
00:43:04,976 --> 00:43:05,946
since we know that we are only


1348
00:43:05,946 --> 00:43:07,106
picking from two options.


1349
00:43:08,986 --> 00:43:10,336
Now we can consider doing the


1350
00:43:10,336 --> 00:43:11,386
same for our spreads.


1351
00:43:12,566 --> 00:43:13,636
But what might start out as a


1352
00:43:13,636 --> 00:43:14,786
humble set of four possible


1353
00:43:14,786 --> 00:43:16,916
spreads could quickly grow into


1354
00:43:16,916 --> 00:43:17,716
a wide variety.


1355
00:43:18,466 --> 00:43:20,486
So when it comes to building our


1356
00:43:20,486 --> 00:43:22,826
Picker, we obviously wouldn't


1357
00:43:22,826 --> 00:43:23,716
want to splay out each of these


1358
00:43:23,716 --> 00:43:26,236
options one by one, just as we


1359
00:43:26,236 --> 00:43:27,516
wouldn't want to build a UI that


1360
00:43:27,516 --> 00:43:29,046
displays them all as radio


1361
00:43:29,046 --> 00:43:29,356
buttons.


1362
00:43:31,006 --> 00:43:32,406
We've already seen using ForEach


1363
00:43:32,406 --> 00:43:33,826
to build data-driven views.


1364
00:43:34,476 --> 00:43:35,666
And since each of these options


1365
00:43:35,776 --> 00:43:37,576
are views themselves, we can use


1366
00:43:37,576 --> 00:43:38,206
it here as well.


1367
00:43:39,836 --> 00:43:40,546
This is a lot better.


1368
00:43:41,876 --> 00:43:42,846
Here we're going through each of


1369
00:43:42,846 --> 00:43:44,406
the cases of spread and creating


1370
00:43:44,406 --> 00:43:45,666
a new option with the spread's


1371
00:43:45,666 --> 00:43:47,456
name and the spread itself as


1372
00:43:47,456 --> 00:43:47,836
the tag.


1373
00:43:50,236 --> 00:43:50,546
Now --


1374
00:43:51,516 --> 00:43:56,676
[ Applause ]


1375
00:43:57,176 --> 00:43:58,946
Now obviously Pickers exist on


1376
00:43:58,946 --> 00:43:59,906
more than just macOS.


1377
00:44:00,306 --> 00:44:02,066
And then isolation -- a Picker


1378
00:44:02,066 --> 00:44:03,096
on iOS looks like the


1379
00:44:03,096 --> 00:44:04,456
traditional wheel-style Picker.


1380
00:44:05,446 --> 00:44:06,806
However, since we're building up


1381
00:44:06,806 --> 00:44:08,406
a form, SwiftUI will


1382
00:44:08,406 --> 00:44:09,816
automatically adapt Picker to


1383
00:44:09,816 --> 00:44:11,226
take on another really common


1384
00:44:11,226 --> 00:44:12,696
style of this type of UI.


1385
00:44:14,686 --> 00:44:16,276
Here we can see that the spread


1386
00:44:16,276 --> 00:44:18,006
Picker is now represented by a


1387
00:44:18,006 --> 00:44:19,866
navigation row displaying both


1388
00:44:19,866 --> 00:44:21,396
its label and currently selected


1389
00:44:21,396 --> 00:44:21,786
value.


1390
00:44:22,936 --> 00:44:24,266
Tapping on that row brings us to


1391
00:44:24,266 --> 00:44:25,636
a list of all of our options.


1392
00:44:26,076 --> 00:44:27,326
And tapping one of those selects


1393
00:44:27,326 --> 00:44:28,146
it and brings us back.


1394
00:44:29,516 --> 00:44:36,646
[ Applause ]


1395
00:44:37,146 --> 00:44:38,096
You stole my punch line.


1396
00:44:38,286 --> 00:44:39,856
This is SwiftUI taking care and


1397
00:44:39,856 --> 00:44:41,266
creating that entire interaction


1398
00:44:41,526 --> 00:44:43,166
just with our simple creation of


1399
00:44:43,166 --> 00:44:43,726
a Picker.


1400
00:44:44,516 --> 00:44:49,646
[ Applause ]


1401
00:44:50,146 --> 00:44:51,246
Making it trivial to build out


1402
00:44:51,246 --> 00:44:52,306
the rest of our three Pickers.


1403
00:44:53,196 --> 00:44:54,666
And just like in macOS, we still


1404
00:44:54,666 --> 00:44:56,206
have explicit control over the


1405
00:44:56,206 --> 00:44:56,866
ultimate style.


1406
00:44:57,406 --> 00:44:58,426
If we wanted a wheel-style


1407
00:44:58,426 --> 00:44:59,796
Picker here, we could again just


1408
00:44:59,796 --> 00:45:00,976
impose that.


1409
00:45:04,046 --> 00:45:06,376
Now we have a pretty nice set of


1410
00:45:06,376 --> 00:45:07,086
apps at this point.


1411
00:45:07,836 --> 00:45:08,906
But it's one thing to order


1412
00:45:08,906 --> 00:45:10,866
toast at our desk or while on


1413
00:45:10,866 --> 00:45:12,946
the go, and it's another thing


1414
00:45:12,946 --> 00:45:14,526
entirely to have heated debates


1415
00:45:14,696 --> 00:45:16,096
with friends and family about


1416
00:45:16,096 --> 00:45:17,546
what exactly makes the best


1417
00:45:17,546 --> 00:45:18,366
avocado toast.


1418
00:45:21,066 --> 00:45:21,736
The form on the right side


1419
00:45:21,736 --> 00:45:23,026
consists of the same content


1420
00:45:23,026 --> 00:45:24,556
that we saw in the other apps


1421
00:45:25,136 --> 00:45:26,186
and taking a look at the code


1422
00:45:26,186 --> 00:45:27,846
that's used to build it, it's


1423
00:45:27,846 --> 00:45:28,896
not a surprise that it's using


1424
00:45:28,896 --> 00:45:30,296
the same structure and control


1425
00:45:30,296 --> 00:45:31,666
creation that we used before.


1426
00:45:32,406 --> 00:45:33,556
And again, the difference is


1427
00:45:33,556 --> 00:45:34,726
that automatic adaptation.


1428
00:45:35,436 --> 00:45:36,536
For instance, Toggle being


1429
00:45:36,536 --> 00:45:37,916
represented using on/off buttons


1430
00:45:38,266 --> 00:45:38,976
instead of switches.


1431
00:45:41,286 --> 00:45:42,146
And this gets to the heart of


1432
00:45:42,146 --> 00:45:43,146
something really important


1433
00:45:43,356 --> 00:45:44,266
across all of SwiftUI.


1434
00:45:44,266 --> 00:45:46,886
The idea that you can learn a


1435
00:45:46,886 --> 00:45:48,726
concept once and apply it


1436
00:45:48,726 --> 00:45:49,136
anywhere.


1437
00:45:50,456 --> 00:45:51,986
SwiftUI is not just a means to


1438
00:45:51,986 --> 00:45:53,676
write once and run anywhere, but


1439
00:45:53,676 --> 00:45:54,726
it's a framework that enables


1440
00:45:54,726 --> 00:45:56,086
you to learn these core concepts


1441
00:45:56,376 --> 00:45:57,376
and use them in a variety of


1442
00:45:57,376 --> 00:45:58,366
different contexts and


1443
00:45:58,366 --> 00:45:58,866
platforms.


1444
00:45:59,966 --> 00:46:01,386
This scales from the modifiers


1445
00:46:01,386 --> 00:46:02,906
and ViewBuilder syntax to the


1446
00:46:02,906 --> 00:46:04,686
shared core types like color,


1447
00:46:04,686 --> 00:46:06,776
image and ForEach, to even these


1448
00:46:06,836 --> 00:46:07,886
higher-level controls.


1449
00:46:08,476 --> 00:46:11,056
One example that really


1450
00:46:11,056 --> 00:46:12,366
illustrates to me this reuse of


1451
00:46:12,366 --> 00:46:14,096
knowledge is a slightly


1452
00:46:14,096 --> 00:46:16,726
platform-specific example of


1453
00:46:16,726 --> 00:46:17,786
building a contextMenu.


1454
00:46:18,376 --> 00:46:20,696
The contextMenu itself can be


1455
00:46:20,696 --> 00:46:22,526
attached to an associated view


1456
00:46:22,526 --> 00:46:23,326
using a modifier.


1457
00:46:23,416 --> 00:46:25,446
And this modifier uses the


1458
00:46:25,446 --> 00:46:27,136
ViewBuilder syntax to define its


1459
00:46:27,136 --> 00:46:27,816
menu contents.


1460
00:46:28,586 --> 00:46:29,516
Now if we take a look at the


1461
00:46:29,516 --> 00:46:31,066
menu, we can see a few familiar


1462
00:46:31,066 --> 00:46:31,746
concepts.


1463
00:46:32,636 --> 00:46:33,806
Some elements that on click


1464
00:46:34,136 --> 00:46:35,456
perform an action and have a


1465
00:46:35,456 --> 00:46:36,656
label describing that action,


1466
00:46:37,356 --> 00:46:38,946
and others that specifically get


1467
00:46:38,946 --> 00:46:39,756
turned on and off.


1468
00:46:39,756 --> 00:46:42,186
So it's not a surprise that the


1469
00:46:42,186 --> 00:46:43,896
contents themselves are built up


1470
00:46:43,996 --> 00:46:45,456
using the same controls we've


1471
00:46:45,456 --> 00:46:46,406
already learned how to use.


1472
00:46:47,026 --> 00:46:48,576
buttons, dividers and Toggles.


1473
00:46:49,636 --> 00:46:51,516
But still, automatically taking


1474
00:46:51,516 --> 00:46:52,766
on the expected look and feel


1475
00:46:53,066 --> 00:46:54,906
for our macOS menu, from the


1476
00:46:54,906 --> 00:46:56,316
hover and accelerated gesture


1477
00:46:56,316 --> 00:46:57,506
handling, to the special


1478
00:46:57,506 --> 00:46:58,976
highlight and selection styling.


1479
00:47:01,516 --> 00:47:03,016
From these few examples, you can


1480
00:47:03,016 --> 00:47:04,266
already tell that controls in


1481
00:47:04,266 --> 00:47:05,606
SwiftUI are a little bit


1482
00:47:05,606 --> 00:47:05,936
special.


1483
00:47:06,796 --> 00:47:07,556
They're defined based on their


1484
00:47:07,556 --> 00:47:08,836
purpose, the role that they


1485
00:47:08,836 --> 00:47:10,506
serve, their connection to your


1486
00:47:10,506 --> 00:47:11,936
app's model, rather than


1487
00:47:11,936 --> 00:47:12,936
specifically to their visual


1488
00:47:12,936 --> 00:47:13,266
appearance.


1489
00:47:14,236 --> 00:47:14,866
And this means that they're


1490
00:47:14,866 --> 00:47:16,506
inherently reusable across a


1491
00:47:16,506 --> 00:47:17,746
variety of historic contexts,


1492
00:47:18,236 --> 00:47:19,076
and the appropriate look and


1493
00:47:19,076 --> 00:47:20,466
feel can be determined based on


1494
00:47:20,466 --> 00:47:22,436
that context, platform or other


1495
00:47:22,436 --> 00:47:23,016
information.


1496
00:47:23,936 --> 00:47:25,306
And at the same time, they're


1497
00:47:25,426 --> 00:47:27,636
customizable, both in their use


1498
00:47:27,636 --> 00:47:29,546
of views as labels and options


1499
00:47:29,626 --> 00:47:30,506
as well as being able to


1500
00:47:30,506 --> 00:47:32,386
arbitrarily style these controls


1501
00:47:32,696 --> 00:47:33,856
from the system styles like you


1502
00:47:33,856 --> 00:47:35,066
saw with Picker to even


1503
00:47:35,066 --> 00:47:36,406
completely custom-built styles.


1504
00:47:37,216 --> 00:47:38,176
And no matter what the style,


1505
00:47:38,616 --> 00:47:39,616
still having accessibility


1506
00:47:39,616 --> 00:47:40,976
support built right in.


1507
00:47:44,046 --> 00:47:45,236
Now earlier Matt showed a few


1508
00:47:45,236 --> 00:47:47,126
examples of using modifiers to


1509
00:47:47,126 --> 00:47:49,406
impose additional behavior on


1510
00:47:49,406 --> 00:47:49,846
views.


1511
00:47:50,296 --> 00:47:51,596
And the same is true for


1512
00:47:51,596 --> 00:47:52,746
controls as well.


1513
00:47:54,606 --> 00:47:55,846
One example that those of you on


1514
00:47:55,846 --> 00:47:56,776
iOS will already be familiar


1515
00:47:56,776 --> 00:47:58,226
with is changing the tint or


1516
00:47:58,296 --> 00:48:00,556
accent color for your UI, which


1517
00:48:00,556 --> 00:48:01,356
affects how many different


1518
00:48:01,356 --> 00:48:02,236
system controls appear.


1519
00:48:03,016 --> 00:48:04,346
And if we want to apply this to


1520
00:48:04,346 --> 00:48:06,156
our entire app, we can apply the


1521
00:48:06,156 --> 00:48:07,696
accentColor modifier to our


1522
00:48:07,696 --> 00:48:09,126
outermost view and it will be


1523
00:48:09,126 --> 00:48:10,106
inherited by the entire


1524
00:48:10,106 --> 00:48:11,666
hierarchy such as this button.


1525
00:48:11,666 --> 00:48:14,486
Now when it comes to disabling


1526
00:48:14,486 --> 00:48:15,956
controls, we can use the


1527
00:48:15,956 --> 00:48:16,846
disabled modifier.


1528
00:48:17,686 --> 00:48:18,736
For instance, disabling the


1529
00:48:18,736 --> 00:48:19,846
Order button when maybe there


1530
00:48:19,846 --> 00:48:21,086
are no toasts being ordered.


1531
00:48:21,086 --> 00:48:23,016
But there also might be


1532
00:48:23,016 --> 00:48:24,106
scenarios when we need to


1533
00:48:24,106 --> 00:48:25,236
disable entire groups of


1534
00:48:25,236 --> 00:48:25,836
controls.


1535
00:48:26,536 --> 00:48:27,616
For instance, when we're unable


1536
00:48:27,616 --> 00:48:28,646
to connect to the toast network


1537
00:48:28,876 --> 00:48:30,606
to even place our order, we


1538
00:48:30,606 --> 00:48:32,146
probably want to disable each


1539
00:48:32,146 --> 00:48:33,596
and every control in our form.


1540
00:48:34,726 --> 00:48:36,046
But this looks a little tedious


1541
00:48:36,046 --> 00:48:37,566
and error-prone if we ever add


1542
00:48:37,566 --> 00:48:38,456
additional controls.


1543
00:48:39,066 --> 00:48:40,146
But like you saw with modifiers


1544
00:48:40,146 --> 00:48:41,986
in general, we can instead lift


1545
00:48:41,986 --> 00:48:43,696
this modifier up and apply the


1546
00:48:43,696 --> 00:48:45,126
modifier to our entire form,


1547
00:48:45,536 --> 00:48:46,226
just like we did with the


1548
00:48:46,226 --> 00:48:47,226
accentColor modifier.


1549
00:48:48,516 --> 00:48:54,546
[ Applause ]


1550
00:48:55,046 --> 00:48:56,226
Now all the controls in our form


1551
00:48:56,226 --> 00:48:57,236
will be disabled based on this


1552
00:48:57,236 --> 00:48:58,126
single statement.


1553
00:48:59,156 --> 00:49:01,286
And all of this adaptivity and


1554
00:49:01,286 --> 00:49:03,176
inherited behavior is pretty


1555
00:49:03,176 --> 00:49:04,976
powerful and potentially comes


1556
00:49:04,976 --> 00:49:06,516
as a surprise since we're using


1557
00:49:06,516 --> 00:49:08,686
these simple value-type views.


1558
00:49:09,316 --> 00:49:10,286
But let's take a little look


1559
00:49:10,336 --> 00:49:11,666
under the hood for how some of


1560
00:49:11,666 --> 00:49:12,336
this works.


1561
00:49:12,866 --> 00:49:15,116
These examples are built on top


1562
00:49:15,116 --> 00:49:16,146
of something called the


1563
00:49:16,146 --> 00:49:16,686
environment.


1564
00:49:17,706 --> 00:49:18,976
And the environment consists of


1565
00:49:18,976 --> 00:49:20,436
all the context for where your


1566
00:49:20,436 --> 00:49:21,056
views appear in.


1567
00:49:22,486 --> 00:49:23,256
These are things that you might


1568
00:49:23,256 --> 00:49:24,276
have previously thought of as


1569
00:49:24,276 --> 00:49:26,066
being shared global state, part


1570
00:49:26,066 --> 00:49:26,936
of our trait collection or


1571
00:49:26,936 --> 00:49:28,256
properties on your view, or


1572
00:49:28,256 --> 00:49:29,346
maybe even had to reach up to


1573
00:49:29,346 --> 00:49:30,796
some ancestor object to pull the


1574
00:49:30,796 --> 00:49:31,326
value out.


1575
00:49:32,376 --> 00:49:33,866
But now this is all packaged up


1576
00:49:34,026 --> 00:49:34,796
into the environment.


1577
00:49:35,326 --> 00:49:36,916
And it's accessible to any of


1578
00:49:36,916 --> 00:49:38,076
you that might want to access


1579
00:49:38,076 --> 00:49:38,276
it.


1580
00:49:39,246 --> 00:49:40,286
And each view inherits that


1581
00:49:40,286 --> 00:49:41,696
environment from its parent.


1582
00:49:43,076 --> 00:49:44,826
Now as an example, when running


1583
00:49:44,826 --> 00:49:46,196
in an Arabic locale, the


1584
00:49:46,196 --> 00:49:47,476
environment at the root of our


1585
00:49:47,476 --> 00:49:48,776
app has a right-to-left layout


1586
00:49:48,776 --> 00:49:49,166
direction.


1587
00:49:49,886 --> 00:49:51,156
And every view inherits that


1588
00:49:51,156 --> 00:49:51,746
layout direction.


1589
00:49:52,716 --> 00:49:54,136
But at any given point, the


1590
00:49:54,136 --> 00:49:55,086
environment can also be


1591
00:49:55,086 --> 00:49:56,526
overridden for a subtree of


1592
00:49:56,526 --> 00:49:57,016
views.


1593
00:49:58,176 --> 00:49:59,046
So if we were building up some


1594
00:49:59,046 --> 00:50:00,526
media playback controls, we'd


1595
00:50:00,526 --> 00:50:01,616
want to ensure that they're laid


1596
00:50:01,616 --> 00:50:02,686
out left-to-right.


1597
00:50:03,546 --> 00:50:04,636
And so by using the environment


1598
00:50:04,636 --> 00:50:06,216
modifier, we can impose that on


1599
00:50:06,216 --> 00:50:06,976
that hierarchy.


1600
00:50:10,046 --> 00:50:11,666
Now the environment is also one


1601
00:50:11,666 --> 00:50:12,776
of the important technologies


1602
00:50:12,956 --> 00:50:14,596
that helps make previews so


1603
00:50:14,596 --> 00:50:15,156
powerful.


1604
00:50:15,756 --> 00:50:16,836
It enables showing the same


1605
00:50:16,836 --> 00:50:18,466
exact UI in a variety of these


1606
00:50:18,466 --> 00:50:19,936
different contexts so we can


1607
00:50:19,936 --> 00:50:21,206
really preview our app against


1608
00:50:21,206 --> 00:50:22,516
all the ways people might be


1609
00:50:22,516 --> 00:50:22,976
using them.


1610
00:50:25,276 --> 00:50:26,196
Now you've seen how the


1611
00:50:26,196 --> 00:50:26,986
environment automatically


1612
00:50:26,986 --> 00:50:28,416
affects various system views,


1613
00:50:28,416 --> 00:50:29,696
and custom views are able to use


1614
00:50:29,696 --> 00:50:30,986
the environment as well.


1615
00:50:31,746 --> 00:50:32,516
So I've been working on a little


1616
00:50:32,516 --> 00:50:33,886
control for our next update,


1617
00:50:34,696 --> 00:50:36,406
which allows deciding exactly


1618
00:50:36,406 --> 00:50:38,076
where on top of our toast an egg


1619
00:50:38,076 --> 00:50:38,766
should be placed.


1620
00:50:39,646 --> 00:50:41,156
You can see it's built up using


1621
00:50:41,156 --> 00:50:43,116
a simple ZStack of two images: a


1622
00:50:43,116 --> 00:50:44,676
toast on the bottom and an image


1623
00:50:44,676 --> 00:50:45,436
being positioned with a


1624
00:50:45,436 --> 00:50:46,666
dragGesture on top.


1625
00:50:47,526 --> 00:50:48,686
With that, we can tap and drag


1626
00:50:48,686 --> 00:50:50,066
the egg into just the right


1627
00:50:50,066 --> 00:50:50,426
spot.


1628
00:50:51,756 --> 00:50:53,466
Now if we go to use our Egg


1629
00:50:53,466 --> 00:50:55,476
View, there may be some cases we


1630
00:50:55,476 --> 00:50:56,246
need to disable it.


1631
00:50:56,466 --> 00:50:57,766
Maybe the shop ran out of eggs.


1632
00:50:58,986 --> 00:51:00,106
But since we're using a system


1633
00:51:00,106 --> 00:51:01,416
dragGesture, it will


1634
00:51:01,466 --> 00:51:03,176
automatically be disabled by the


1635
00:51:03,176 --> 00:51:04,036
disabled modifier.


1636
00:51:04,036 --> 00:51:05,316
So if somebody comes in and


1637
00:51:05,316 --> 00:51:06,946
tries to drag that egg, it won't


1638
00:51:06,946 --> 00:51:07,306
budge.


1639
00:51:08,496 --> 00:51:09,826
Of course, we should also offer


1640
00:51:09,826 --> 00:51:10,956
some visual feedback that it's


1641
00:51:10,986 --> 00:51:12,526
disabled as well, and thankfully


1642
00:51:12,526 --> 00:51:13,206
that's pretty easy.


1643
00:51:14,606 --> 00:51:15,706
We can add an environment


1644
00:51:15,706 --> 00:51:17,506
property that's connected to the


1645
00:51:17,506 --> 00:51:18,586
isEnabled value from the


1646
00:51:18,586 --> 00:51:19,036
environment.


1647
00:51:19,886 --> 00:51:21,276
And we can use its value just


1648
00:51:21,276 --> 00:51:22,146
like any other property.


1649
00:51:22,966 --> 00:51:24,206
For instance, reducing the


1650
00:51:24,206 --> 00:51:25,276
saturation of our overall


1651
00:51:25,276 --> 00:51:26,976
construction when it's disabled.


1652
00:51:30,066 --> 00:51:30,766
And if the egg placement view


1653
00:51:30,766 --> 00:51:32,126
ever becomes no longer disabled,


1654
00:51:32,446 --> 00:51:33,816
SwiftUI will automatically


1655
00:51:33,816 --> 00:51:35,286
recall our view's body and


1656
00:51:35,286 --> 00:51:36,606
re-render it to the now


1657
00:51:37,026 --> 00:51:37,896
undisabled state.


1658
00:51:37,976 --> 00:51:41,126
And again, this is SwiftUI


1659
00:51:41,126 --> 00:51:42,026
automatically managing our


1660
00:51:42,026 --> 00:51:43,106
dependencies on the environment


1661
00:51:43,106 --> 00:51:44,276
so we can just express our


1662
00:51:44,276 --> 00:51:45,676
view's relationship to it and


1663
00:51:45,676 --> 00:51:46,846
not have to worry about


1664
00:51:46,846 --> 00:51:47,966
observing for when things


1665
00:51:47,966 --> 00:51:48,416
change.


1666
00:51:51,436 --> 00:51:53,236
Now we've covered a number of


1667
00:51:53,236 --> 00:51:54,396
controls and how to compose


1668
00:51:54,396 --> 00:51:55,096
those all together.


1669
00:51:55,096 --> 00:51:56,766
But we're still missing one


1670
00:51:56,766 --> 00:51:58,376
really important piece of every


1671
00:51:58,376 --> 00:52:00,286
app, and that's navigating


1672
00:52:00,286 --> 00:52:02,246
between these screens, from the


1673
00:52:02,246 --> 00:52:03,896
order form to the egg placement


1674
00:52:03,896 --> 00:52:05,496
Picker to the order history.


1675
00:52:06,236 --> 00:52:06,946
Now let's start in with the


1676
00:52:06,946 --> 00:52:07,456
order form.


1677
00:52:07,456 --> 00:52:09,166
Now a problem that some of you


1678
00:52:09,166 --> 00:52:10,186
might have already noticed is


1679
00:52:10,186 --> 00:52:11,276
the look of the title in the


1680
00:52:11,276 --> 00:52:11,606
form.


1681
00:52:12,196 --> 00:52:13,086
It doesn't use the standard


1682
00:52:13,086 --> 00:52:14,106
navigation bar styling.


1683
00:52:14,106 --> 00:52:16,286
So we can first wrap our


1684
00:52:16,286 --> 00:52:17,976
Orderform in a NavigationView as


1685
00:52:17,976 --> 00:52:18,836
the content of our app.


1686
00:52:19,606 --> 00:52:20,596
NavigationView provides the


1687
00:52:20,596 --> 00:52:21,776
ability to navigate through


1688
00:52:21,776 --> 00:52:23,326
screens of our app revealing


1689
00:52:23,326 --> 00:52:24,446
more nested or detailed


1690
00:52:24,446 --> 00:52:24,946
information.


1691
00:52:25,696 --> 00:52:27,646
On iOS, NavigationView also adds


1692
00:52:27,646 --> 00:52:28,796
in the standard navigation bar


1693
00:52:28,796 --> 00:52:29,146
Chrome.


1694
00:52:29,146 --> 00:52:31,096
And then we can use the


1695
00:52:31,096 --> 00:52:32,846
NavigationBarTitle modifier to


1696
00:52:32,846 --> 00:52:34,056
produce that large beautiful


1697
00:52:34,056 --> 00:52:35,156
title for our form.


1698
00:52:35,976 --> 00:52:37,196
Now this modifier is a little


1699
00:52:37,196 --> 00:52:37,706
bit special.


1700
00:52:38,306 --> 00:52:39,336
It provides information that's


1701
00:52:39,336 --> 00:52:40,716
able to be interpreted by a


1702
00:52:40,716 --> 00:52:41,976
NavigationView ancestor.


1703
00:52:43,006 --> 00:52:44,056
We saw earlier examples of


1704
00:52:44,056 --> 00:52:46,136
modifiers that have information


1705
00:52:46,136 --> 00:52:47,316
flow down the view hierarchy


1706
00:52:47,516 --> 00:52:49,066
using the environment, and this


1707
00:52:49,066 --> 00:52:50,386
is an example of one that flows


1708
00:52:50,386 --> 00:52:51,816
information upwards using


1709
00:52:51,816 --> 00:52:52,696
something called preferences.


1710
00:52:52,696 --> 00:52:54,576
Now we're not going to go into


1711
00:52:54,576 --> 00:52:55,646
too much detail on that, but


1712
00:52:55,646 --> 00:52:56,456
you'll see other similar


1713
00:52:56,456 --> 00:52:57,596
examples later.


1714
00:52:59,336 --> 00:53:00,816
So focusing on the form, the


1715
00:53:00,816 --> 00:53:01,726
next thing we want to do is add


1716
00:53:01,726 --> 00:53:03,296
support for including an egg in


1717
00:53:03,296 --> 00:53:03,656
our order.


1718
00:53:04,276 --> 00:53:05,476
So we can add a little Toggle


1719
00:53:05,476 --> 00:53:06,966
here and then whenever somebody


1720
00:53:06,966 --> 00:53:08,946
opts into including an egg, we


1721
00:53:08,946 --> 00:53:10,426
can add a navigation row which


1722
00:53:10,426 --> 00:53:11,706
takes us to our


1723
00:53:11,706 --> 00:53:12,466
EggLocationPicker.


1724
00:53:13,156 --> 00:53:14,456
So let's expand out the form to


1725
00:53:14,456 --> 00:53:15,396
see how this works.


1726
00:53:16,506 --> 00:53:18,226
It's built using a Toggle bound


1727
00:53:18,226 --> 00:53:19,246
to whether or not our order


1728
00:53:19,246 --> 00:53:19,856
includes an egg.


1729
00:53:19,856 --> 00:53:21,546
And then it uses the same


1730
00:53:21,546 --> 00:53:22,456
ViewBuilder conditional that


1731
00:53:22,456 --> 00:53:23,756
Matt showed us earlier to


1732
00:53:23,756 --> 00:53:24,796
optionally include that


1733
00:53:24,796 --> 00:53:25,506
navigation row.


1734
00:53:26,446 --> 00:53:28,516
Now the really cool thing is


1735
00:53:28,516 --> 00:53:29,926
that we provided an animated


1736
00:53:29,926 --> 00:53:31,196
binding to the Toggle.


1737
00:53:31,796 --> 00:53:32,936
So whenever somebody taps that


1738
00:53:32,936 --> 00:53:34,836
switch, our navigation row will


1739
00:53:34,836 --> 00:53:36,336
be animatedly inserted in for


1740
00:53:36,336 --> 00:53:37,676
the formList just with the


1741
00:53:37,676 --> 00:53:37,976
setup.


1742
00:53:40,046 --> 00:53:40,976
And expressing the navigation


1743
00:53:40,976 --> 00:53:42,536
row is also amazingly simple.


1744
00:53:43,246 --> 00:53:44,556
It's using a specialized control


1745
00:53:44,556 --> 00:53:46,776
called a Navigationbutton which


1746
00:53:47,116 --> 00:53:48,346
allows us to provide some


1747
00:53:48,346 --> 00:53:49,986
destination content to navigate


1748
00:53:49,986 --> 00:53:50,816
to when interacted.


1749
00:53:51,636 --> 00:53:52,786
Navigationbutton automatically


1750
00:53:52,786 --> 00:53:53,826
comes with all of the right look


1751
00:53:53,826 --> 00:53:55,366
and feel such as the disclosure


1752
00:53:55,366 --> 00:53:56,866
indicator on the trailing edge.


1753
00:53:57,446 --> 00:53:58,966
Now because views are


1754
00:53:58,966 --> 00:54:00,156
lightweight, we don't have to


1755
00:54:00,156 --> 00:54:01,276
worry about having created the


1756
00:54:01,276 --> 00:54:02,416
EggLocationPicker here.


1757
00:54:03,106 --> 00:54:04,426
SwiftUI takes care to only


1758
00:54:04,426 --> 00:54:06,046
render these views once they're


1759
00:54:06,046 --> 00:54:07,446
actually presented.


1760
00:54:08,596 --> 00:54:10,256
Now inside the EggLocationPicker


1761
00:54:10,256 --> 00:54:11,516
we can use our PlacementView,


1762
00:54:12,146 --> 00:54:13,526
customize the navigation bar so


1763
00:54:13,526 --> 00:54:14,546
that once it's presented, the


1764
00:54:14,546 --> 00:54:15,936
title reflects its current


1765
00:54:15,936 --> 00:54:16,346
state.


1766
00:54:16,966 --> 00:54:17,936
We could also add a trailing


1767
00:54:17,936 --> 00:54:19,416
BarItem to quickly reset the egg


1768
00:54:19,416 --> 00:54:20,756
back to its start state.


1769
00:54:21,726 --> 00:54:22,686
Like you hopefully expect at


1770
00:54:22,686 --> 00:54:24,176
this point, the items here are


1771
00:54:24,176 --> 00:54:25,176
the same views we've already


1772
00:54:25,176 --> 00:54:26,466
learned how to use, so we can


1773
00:54:26,466 --> 00:54:27,326
just provide a button.


1774
00:54:28,346 --> 00:54:29,046
And that's all it takes to


1775
00:54:29,046 --> 00:54:30,436
create this complete navigation


1776
00:54:30,436 --> 00:54:30,976
experience.


1777
00:54:33,096 --> 00:54:34,376
Now we can turn our attention to


1778
00:54:34,376 --> 00:54:35,176
the OrderHistory.


1779
00:54:36,116 --> 00:54:37,346
Now we want to navigate to this,


1780
00:54:37,456 --> 00:54:38,646
but it isn't more detailed or


1781
00:54:38,646 --> 00:54:39,966
nested information of the form,


1782
00:54:40,436 --> 00:54:41,756
but it's instead an entirely


1783
00:54:41,756 --> 00:54:43,316
different section of our app.


1784
00:54:44,556 --> 00:54:45,406
This is more appropriate for the


1785
00:54:45,406 --> 00:54:46,576
use of a TabbedView.


1786
00:54:47,796 --> 00:54:49,186
As such, we can wrap our form in


1787
00:54:49,186 --> 00:54:50,596
a TabbedView just like we did


1788
00:54:50,596 --> 00:54:52,856
NavigationView and then add the


1789
00:54:52,856 --> 00:54:54,436
OrderHistory as another child.


1790
00:54:55,616 --> 00:54:56,976
Both have tabItemLabel modifiers


1791
00:54:56,976 --> 00:54:57,896
that it described to the


1792
00:54:57,896 --> 00:54:59,636
TabbedView how to label them in


1793
00:54:59,636 --> 00:55:00,096
the TabBar.


1794
00:55:03,046 --> 00:55:03,996
Now we can quickly jump over to


1795
00:55:03,996 --> 00:55:04,746
our OrderHistory.


1796
00:55:04,916 --> 00:55:06,196
But at this point we've a pretty


1797
00:55:06,196 --> 00:55:07,596
simple level of detail for the


1798
00:55:07,596 --> 00:55:09,226
OrderHistory and we might want


1799
00:55:09,226 --> 00:55:10,316
to expand this into a much more


1800
00:55:10,316 --> 00:55:12,046
detailed set of information that


1801
00:55:12,046 --> 00:55:13,446
we navigate to from our history


1802
00:55:13,446 --> 00:55:13,736
list.


1803
00:55:14,646 --> 00:55:15,796
This is another case of nesting


1804
00:55:15,796 --> 00:55:16,676
or showing more detailed


1805
00:55:16,676 --> 00:55:18,236
information like we saw earlier


1806
00:55:18,236 --> 00:55:19,626
with NavigationView and button.


1807
00:55:19,626 --> 00:55:22,156
So we can replace the contents


1808
00:55:22,156 --> 00:55:23,356
of our OrderHistory list so


1809
00:55:23,646 --> 00:55:24,896
instead of it being in list with


1810
00:55:24,896 --> 00:55:25,896
the OrderDetail displayed


1811
00:55:25,896 --> 00:55:27,646
inline, we can instead use this


1812
00:55:27,646 --> 00:55:28,926
new OrderDetail as the


1813
00:55:28,926 --> 00:55:30,066
destination for our


1814
00:55:30,066 --> 00:55:30,856
NavigationButtons.


1815
00:55:31,786 --> 00:55:32,986
And really it's this simple to


1816
00:55:32,986 --> 00:55:34,516
build a data-driven list that's


1817
00:55:34,516 --> 00:55:35,846
able to navigate to additional


1818
00:55:35,846 --> 00:55:36,336
content.


1819
00:55:37,606 --> 00:55:38,796
This works great on the iPhone


1820
00:55:38,796 --> 00:55:40,206
but if we take a look at the


1821
00:55:40,206 --> 00:55:41,736
iPad, we want this to be set up


1822
00:55:41,736 --> 00:55:43,176
using a master detail with a


1823
00:55:43,176 --> 00:55:43,726
SplitView.


1824
00:55:44,486 --> 00:55:45,926
Unlike NavigationStacks on


1825
00:55:45,926 --> 00:55:47,456
iPhone that push onto a single


1826
00:55:47,456 --> 00:55:49,226
RootView, here we know we have


1827
00:55:49,226 --> 00:55:50,966
two points of navigation: the


1828
00:55:50,966 --> 00:55:52,336
Master which is able to push


1829
00:55:52,336 --> 00:55:55,476
content onto the Detail.


1830
00:55:55,646 --> 00:55:56,716
So while our NavigationView


1831
00:55:56,716 --> 00:55:57,626
behaved correctly with just the


1832
00:55:57,626 --> 00:55:59,776
single RootContent on iPhone, we


1833
00:55:59,776 --> 00:56:00,606
want to indicate that it


1834
00:56:00,606 --> 00:56:01,826
intrinsically has these two


1835
00:56:01,826 --> 00:56:03,656
pieces of content: the


1836
00:56:03,656 --> 00:56:05,326
OrderHistory Master and the


1837
00:56:05,326 --> 00:56:05,936
DetailView.


1838
00:56:06,696 --> 00:56:07,636
Here we can use an


1839
00:56:07,636 --> 00:56:09,276
OrderDetailPlaceholder View to


1840
00:56:09,276 --> 00:56:10,456
act as the placeholder for when


1841
00:56:10,456 --> 00:56:11,276
nothing is selected.


1842
00:56:12,196 --> 00:56:12,956
Now with this, when a


1843
00:56:12,956 --> 00:56:14,516
Navigationbutton is interacted


1844
00:56:14,516 --> 00:56:15,566
with in the OrderHistory, it


1845
00:56:15,746 --> 00:56:17,016
will automatically get pushed


1846
00:56:17,336 --> 00:56:18,286
onto the OrderDetail.


1847
00:56:18,286 --> 00:56:20,196
This will behave as we expect on


1848
00:56:20,196 --> 00:56:21,406
the iPad and other wide-size


1849
00:56:21,436 --> 00:56:23,306
classes using a SplitView.


1850
00:56:23,776 --> 00:56:24,966
And for narrow-size classes,


1851
00:56:25,276 --> 00:56:26,566
will automatically collapse into


1852
00:56:26,566 --> 00:56:27,606
a single NavigationStack.


1853
00:56:28,176 --> 00:56:30,656
And of course, this works on


1854
00:56:30,656 --> 00:56:32,376
macOS as well, resulting in a


1855
00:56:32,376 --> 00:56:32,946
SplitView there.


1856
00:56:32,946 --> 00:56:35,606
And this isn't really write once


1857
00:56:35,606 --> 00:56:36,596
and run anywhere; there are


1858
00:56:36,596 --> 00:56:37,706
still these additional design


1859
00:56:37,706 --> 00:56:38,906
considerations such as the


1860
00:56:38,906 --> 00:56:40,666
increased information density on


1861
00:56:40,666 --> 00:56:41,276
macOS.


1862
00:56:42,656 --> 00:56:43,936
But SwiftUI is automatically


1863
00:56:43,936 --> 00:56:45,606
taking care of a base level of


1864
00:56:45,606 --> 00:56:47,206
platform look and feel from how


1865
00:56:47,206 --> 00:56:48,656
the SplitView behaves to the


1866
00:56:48,656 --> 00:56:50,086
height of the table rows, et


1867
00:56:50,086 --> 00:56:50,396
cetera.


1868
00:56:51,426 --> 00:56:52,436
So that we can learn how to use


1869
00:56:52,436 --> 00:56:53,526
these different concepts once


1870
00:56:53,526 --> 00:56:55,306
and then apply them anywhere.


1871
00:56:56,406 --> 00:56:57,556
And then we can focus our time


1872
00:56:57,826 --> 00:56:59,206
on those exciting and custom


1873
00:56:59,206 --> 00:57:00,706
features that make each of your


1874
00:57:00,706 --> 00:57:00,976
apps great.


1875
00:57:03,256 --> 00:57:04,436
Now we've covered a reasonable


1876
00:57:04,436 --> 00:57:05,516
amount of breadth in this last


1877
00:57:05,516 --> 00:57:06,966
hour and there are a number of


1878
00:57:06,966 --> 00:57:07,946
other talks that go into a lot


1879
00:57:07,946 --> 00:57:08,486
more detail.


1880
00:57:09,366 --> 00:57:10,456
We showed how state and bindings


1881
00:57:10,456 --> 00:57:11,426
will change how you interact


1882
00:57:11,426 --> 00:57:12,926
with controls, but data flow in


1883
00:57:12,926 --> 00:57:14,266
SwiftUI will make you rethink


1884
00:57:14,266 --> 00:57:16,226
altogether about data-driven UI


1885
00:57:16,226 --> 00:57:16,506
updates.


1886
00:57:17,916 --> 00:57:19,056
We built up a few custom views


1887
00:57:19,056 --> 00:57:20,346
using layout adjusters, but


1888
00:57:20,346 --> 00:57:21,636
Custom Controls in SwiftUI will


1889
00:57:21,636 --> 00:57:23,266
go into a deep dive on advanced


1890
00:57:23,266 --> 00:57:24,826
used of layout, graphics and


1891
00:57:24,826 --> 00:57:26,226
animations and has the most


1892
00:57:26,226 --> 00:57:26,886
awesome demo.


1893
00:57:28,256 --> 00:57:29,116
We know that many of you are


1894
00:57:29,116 --> 00:57:30,116
going to be eager to jump into


1895
00:57:30,116 --> 00:57:31,546
SwiftUI right away and might be


1896
00:57:31,546 --> 00:57:32,486
wondering if you can integrate


1897
00:57:32,486 --> 00:57:33,426
this into your existing app.


1898
00:57:33,426 --> 00:57:34,706
And the good news is yes,


1899
00:57:35,036 --> 00:57:36,106
SwiftUI is designed to be


1900
00:57:36,106 --> 00:57:37,616
integrated seamlessly alongside


1901
00:57:37,616 --> 00:57:39,116
your existing views and models.


1902
00:57:39,766 --> 00:57:40,686
And we have an entire talk


1903
00:57:40,776 --> 00:57:41,626
showing you how to do that.


1904
00:57:43,026 --> 00:57:44,036
We touched upon how SwiftUI is


1905
00:57:44,036 --> 00:57:44,906
designed to make your app


1906
00:57:44,906 --> 00:57:46,426
accessible to everyone out of


1907
00:57:46,426 --> 00:57:46,926
the box.


1908
00:57:47,446 --> 00:57:48,166
Of course, there will always be


1909
00:57:48,166 --> 00:57:49,236
some additional considerations


1910
00:57:49,346 --> 00:57:50,296
and this talk will go into


1911
00:57:50,296 --> 00:57:51,186
additional detail.


1912
00:57:52,086 --> 00:57:53,096
And finally, last but certainly


1913
00:57:53,096 --> 00:57:54,446
not least, we've shown how


1914
00:57:54,446 --> 00:57:56,066
SwiftUI raises the bar for how


1915
00:57:56,066 --> 00:57:57,196
much you can share across


1916
00:57:57,196 --> 00:57:57,746
platforms.


1917
00:57:58,616 --> 00:57:59,986
SwiftUI on all devices takes


1918
00:57:59,986 --> 00:58:01,426
that as a baseline and goes into


1919
00:58:01,426 --> 00:58:02,786
additional detail on how you can


1920
00:58:02,786 --> 00:58:04,156
make a great app on any


1921
00:58:04,156 --> 00:58:04,646
platform.


1922
00:58:05,606 --> 00:58:06,756
There are a few additional talks


1923
00:58:06,756 --> 00:58:08,526
such as WatchOS Specifics for


1924
00:58:08,526 --> 00:58:09,706
more details on what's driving


1925
00:58:09,706 --> 00:58:11,416
this and What's New in Swift.


1926
00:58:12,266 --> 00:58:13,666
And finally, thank all of you


1927
00:58:13,666 --> 00:58:14,216
for watching.


1928
00:58:14,566 --> 00:58:15,526
We are so excited.


1929
00:58:16,516 --> 00:58:23,500
[ Applause ]

