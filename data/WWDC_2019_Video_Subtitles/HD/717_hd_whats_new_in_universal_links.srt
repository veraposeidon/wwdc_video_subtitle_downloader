1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:07,356 --> 00:00:08,586
>> Welcome to our session on


3
00:00:08,586 --> 00:00:09,586
Universal Links.


4
00:00:10,096 --> 00:00:11,946
My name is Jonathan Grynspan and


5
00:00:11,946 --> 00:00:13,146
I work on the Core Frameworks


6
00:00:13,146 --> 00:00:13,876
Team at Apple.


7
00:00:14,966 --> 00:00:16,556
Today, I'll be showing you how


8
00:00:16,556 --> 00:00:18,116
to use universal links in your


9
00:00:18,116 --> 00:00:18,366
app.


10
00:00:19,246 --> 00:00:20,426
We introduced the universal


11
00:00:20,426 --> 00:00:22,566
links in iOS 9 as a great way to


12
00:00:22,566 --> 00:00:24,436
provide rich content both on the


13
00:00:24,436 --> 00:00:25,506
web and in your app.


14
00:00:26,496 --> 00:00:27,986
Today, I'll be showing you the


15
00:00:27,986 --> 00:00:29,196
enhancements we've made to this


16
00:00:29,196 --> 00:00:29,586
feature.


17
00:00:30,436 --> 00:00:31,676
Whether you've already adopted


18
00:00:31,676 --> 00:00:33,306
universal links in your iOS app


19
00:00:33,606 --> 00:00:34,846
or you're adding them to your


20
00:00:34,846 --> 00:00:36,676
macOS app, you will want to pay


21
00:00:36,676 --> 00:00:37,936
close attention to the changes


22
00:00:37,936 --> 00:00:38,726
I'll be discussing.


23
00:00:40,436 --> 00:00:42,466
To begin, let's talk about what


24
00:00:42,466 --> 00:00:43,626
universal links are.


25
00:00:45,566 --> 00:00:47,966
Universal links are HTTP or


26
00:00:47,966 --> 00:00:50,606
HTTPS URLs that Apple's


27
00:00:50,606 --> 00:00:52,516
operating systems recognize as


28
00:00:52,516 --> 00:00:54,146
pointing to resources either on


29
00:00:54,146 --> 00:00:55,876
the web or in your app.


30
00:00:56,756 --> 00:00:58,616
This means that a single URL can


31
00:00:58,616 --> 00:01:00,166
represent that content, whether


32
00:01:00,166 --> 00:01:01,246
your users have your app


33
00:01:01,246 --> 00:01:03,056
installed or it just haven't


34
00:01:03,056 --> 00:01:03,876
downloaded it yet.


35
00:01:04,575 --> 00:01:05,816
They are great way to increase


36
00:01:05,816 --> 00:01:07,216
user engagement within your app.


37
00:01:08,396 --> 00:01:09,896
Universal links are introduced


38
00:01:09,896 --> 00:01:11,926
in iOS 9 and tvOS 10.


39
00:01:12,346 --> 00:01:13,936
I'm happy to announce that we


40
00:01:13,936 --> 00:01:15,256
are introducing them to the Mac


41
00:01:15,256 --> 00:01:17,796
with macOS 10.15, whether you're


42
00:01:17,796 --> 00:01:19,676
using AppKit or UIKit.


43
00:01:20,026 --> 00:01:21,756
I'll tell you more about that in


44
00:01:21,756 --> 00:01:22,176
a moment.


45
00:01:23,166 --> 00:01:24,666
Universal links are securely


46
00:01:24,666 --> 00:01:26,406
associated between your app and


47
00:01:26,406 --> 00:01:27,096
your website.


48
00:01:27,836 --> 00:01:29,236
Your app adopts an entitlement


49
00:01:29,236 --> 00:01:30,936
in Xcode that indicates which


50
00:01:30,936 --> 00:01:32,926
domains it can represent and


51
00:01:32,926 --> 00:01:34,436
your web server adopts a single


52
00:01:34,436 --> 00:01:36,016
JSON file that contains more


53
00:01:36,016 --> 00:01:37,806
details about what parts of its


54
00:01:37,806 --> 00:01:39,506
domain are representable in your


55
00:01:39,506 --> 00:01:39,746
app.


56
00:01:40,596 --> 00:01:42,226
These two ways secure handshake


57
00:01:42,226 --> 00:01:43,866
ensures nobody can redirect your


58
00:01:43,866 --> 00:01:45,526
users into their apps instead of


59
00:01:45,526 --> 00:01:46,026
yours.


60
00:01:47,536 --> 00:01:48,916
We recommend that where you are


61
00:01:48,916 --> 00:01:50,436
currently using custom URL


62
00:01:50,436 --> 00:01:52,326
schemes, you begin migrating to


63
00:01:52,326 --> 00:01:53,486
universal links today.


64
00:01:54,306 --> 00:01:55,606
Custom URL schemes are


65
00:01:55,606 --> 00:01:57,656
inherently insecure and can be


66
00:01:57,656 --> 00:01:59,186
abused by malicious developers.


67
00:01:59,726 --> 00:02:01,626
New uses of custom URL schemes


68
00:02:01,626 --> 00:02:02,746
are highly discouraged.


69
00:02:05,106 --> 00:02:06,626
Now that we know what universal


70
00:02:06,626 --> 00:02:08,515
links are, let's talk about how


71
00:02:08,515 --> 00:02:09,205
to build them.


72
00:02:09,645 --> 00:02:10,596
We'll start with your web


73
00:02:10,596 --> 00:02:10,996
server.


74
00:02:12,816 --> 00:02:14,606
Your web server must have a


75
00:02:14,606 --> 00:02:17,016
valid HTTPS certificate.


76
00:02:17,526 --> 00:02:19,886
HTTP is not secure and cannot be


77
00:02:19,886 --> 00:02:21,646
used to validate an association


78
00:02:21,806 --> 00:02:23,026
between your app and your


79
00:02:23,026 --> 00:02:23,546
website.


80
00:02:23,846 --> 00:02:25,936
The root certificate used to


81
00:02:25,936 --> 00:02:28,226
sign your HTTPS certificate must


82
00:02:28,226 --> 00:02:29,626
be recognized by the operating


83
00:02:29,626 --> 00:02:30,126
system.


84
00:02:30,646 --> 00:02:32,126
Custom root certificates are not


85
00:02:32,126 --> 00:02:32,606
supported.


86
00:02:33,816 --> 00:02:34,986
After generating your


87
00:02:34,986 --> 00:02:36,366
certificate and configuring your


88
00:02:36,366 --> 00:02:37,596
server, add your


89
00:02:37,596 --> 00:02:39,636
apple-app-site-association file.


90
00:02:40,226 --> 00:02:41,586
This is a JSON file.


91
00:02:41,586 --> 00:02:42,776
We'll discuss this format in a


92
00:02:42,776 --> 00:02:43,206
moment.


93
00:02:43,556 --> 00:02:45,446
When your app is installed on an


94
00:02:45,446 --> 00:02:46,896
Apple device, the operating


95
00:02:46,896 --> 00:02:48,326
system downloads this file to


96
00:02:48,326 --> 00:02:49,916
determine what services the


97
00:02:49,916 --> 00:02:51,306
server will let your app use.


98
00:02:51,616 --> 00:02:53,666
The system also periodically


99
00:02:53,666 --> 00:02:55,496
downloads updates for this file.


100
00:02:56,246 --> 00:02:57,626
Universal links are one of many


101
00:02:57,626 --> 00:02:59,086
services that may be included in


102
00:02:59,086 --> 00:02:59,606
this file.


103
00:03:00,606 --> 00:03:02,376
This file should be located at


104
00:03:02,506 --> 00:03:06,126
HTTPS://your domain name/


105
00:03:07,286 --> 00:03:10,216
.well-known/apple-app-site-


106
00:03:10,216 --> 00:03:11,036
association.


107
00:03:11,956 --> 00:03:13,346
Other paths are deprecated.


108
00:03:14,226 --> 00:03:15,566
In the past, we've discussed


109
00:03:15,566 --> 00:03:16,056
signing your


110
00:03:16,056 --> 00:03:17,816
apple-app-site-association file.


111
00:03:18,356 --> 00:03:19,666
This has never been a necessary


112
00:03:19,666 --> 00:03:21,376
step to support universal links


113
00:03:21,416 --> 00:03:22,696
so it is now deprecated.


114
00:03:23,926 --> 00:03:25,936
Support for sign JSON files and


115
00:03:25,936 --> 00:03:27,606
JSON files at other paths will


116
00:03:27,606 --> 00:03:29,156
be removed in a future release.


117
00:03:29,446 --> 00:03:32,676
With that out of the way, let's


118
00:03:32,676 --> 00:03:33,426
take a look at your


119
00:03:33,426 --> 00:03:35,316
apple-app-site-association file.


120
00:03:36,156 --> 00:03:37,336
If you already have one of these


121
00:03:37,336 --> 00:03:38,776
files on your web server this


122
00:03:38,776 --> 00:03:41,336
probably looks familiar, but we


123
00:03:41,336 --> 00:03:42,786
have a few changes to introduce


124
00:03:42,786 --> 00:03:42,996
today.


125
00:03:43,686 --> 00:03:45,556
At the top level is a dictionary


126
00:03:45,556 --> 00:03:47,036
whose keys are service types.


127
00:03:47,036 --> 00:03:48,976
For universal links, the key is


128
00:03:48,976 --> 00:03:50,896
applinks like you see here but


129
00:03:50,896 --> 00:03:52,316
other services are also


130
00:03:52,316 --> 00:03:52,766
available.


131
00:03:53,586 --> 00:03:54,966
We'll be focusing solely on


132
00:03:54,966 --> 00:03:55,886
Universal Links.


133
00:03:56,316 --> 00:03:58,336
Under that top level key are the


134
00:03:58,336 --> 00:03:59,976
apps key and the details key.


135
00:04:00,576 --> 00:04:02,276
If you are targeting iOS 13,


136
00:04:02,606 --> 00:04:05,926
tvOS 13 and macOS 10.15, you do


137
00:04:05,926 --> 00:04:07,636
not need the apps key, so you


138
00:04:07,636 --> 00:04:08,266
can remove it.


139
00:04:09,066 --> 00:04:10,376
If you are continuing to provide


140
00:04:10,376 --> 00:04:12,956
support for iOS 12, tvOS 12 or


141
00:04:12,956 --> 00:04:14,526
earlier, you'll still need it.


142
00:04:14,816 --> 00:04:16,125
For universal links, it should


143
00:04:16,125 --> 00:04:17,456
always be an empty array.


144
00:04:18,846 --> 00:04:20,146
The details key contains an


145
00:04:20,146 --> 00:04:21,736
array of dictionaries, each of


146
00:04:21,736 --> 00:04:23,416
which represents a specific apps


147
00:04:23,416 --> 00:04:24,926
universal links configuration.


148
00:04:25,306 --> 00:04:27,326
In the past, we supported using


149
00:04:27,326 --> 00:04:28,596
a dictionary structure here


150
00:04:28,626 --> 00:04:30,126
instead of an array but that


151
00:04:30,126 --> 00:04:31,626
configuration is obsolete.


152
00:04:33,136 --> 00:04:34,536
Under the details key is an


153
00:04:34,536 --> 00:04:36,556
appID key whose value is your


154
00:04:36,556 --> 00:04:37,346
app identifier.


155
00:04:38,006 --> 00:04:39,676
Your app identifier consists of


156
00:04:39,676 --> 00:04:41,196
an alphanumeric, 10 character


157
00:04:41,196 --> 00:04:43,316
prefix provided by Apple, a


158
00:04:43,316 --> 00:04:44,996
period, and your bundle


159
00:04:44,996 --> 00:04:45,516
identifier.


160
00:04:46,936 --> 00:04:48,536
The prefix may or may not be


161
00:04:48,536 --> 00:04:49,876
equal to your team identifier.


162
00:04:50,146 --> 00:04:51,486
Check the developer portal to


163
00:04:51,486 --> 00:04:52,776
confirm your app identifier.


164
00:04:52,776 --> 00:04:55,086
If you have multiple apps with


165
00:04:55,086 --> 00:04:56,296
the same universal links


166
00:04:56,296 --> 00:04:58,316
configuration, you may not want


167
00:04:58,316 --> 00:04:59,726
to repeat the relevant JSON.


168
00:05:00,056 --> 00:05:01,776
If you are targeting this year's


169
00:05:01,776 --> 00:05:03,296
releases, you can reduce the


170
00:05:03,296 --> 00:05:04,926
size of this file by using the


171
00:05:04,926 --> 00:05:06,226
plural appIDs key.


172
00:05:06,656 --> 00:05:08,316
The value of that key is an


173
00:05:08,316 --> 00:05:09,816
array of app identifiers.


174
00:05:10,486 --> 00:05:11,906
If you need to support previous


175
00:05:11,906 --> 00:05:13,466
releases, you should keep using


176
00:05:13,466 --> 00:05:15,346
the singular appID key for each


177
00:05:15,346 --> 00:05:15,606
app.


178
00:05:16,646 --> 00:05:17,826
Next is the paths key.


179
00:05:18,326 --> 00:05:19,736
This key contains an array of


180
00:05:19,736 --> 00:05:20,526
path patterns.


181
00:05:20,586 --> 00:05:22,246
Pattern matching is performed


182
00:05:22,246 --> 00:05:23,566
the same way it is in terminal.


183
00:05:24,026 --> 00:05:25,676
The asterisk is used to indicate


184
00:05:25,676 --> 00:05:27,216
multiple wildcard characters


185
00:05:27,216 --> 00:05:28,696
while the question mark matches


186
00:05:28,696 --> 00:05:29,666
just one character.


187
00:05:30,636 --> 00:05:31,856
Beginning this year, we are


188
00:05:31,856 --> 00:05:33,486
replacing the paths key with the


189
00:05:33,486 --> 00:05:34,266
components key.


190
00:05:35,346 --> 00:05:36,966
This key's value is an array of


191
00:05:36,966 --> 00:05:38,366
dictionaries, each of which


192
00:05:38,366 --> 00:05:40,066
contains zero or more URL


193
00:05:40,066 --> 00:05:41,526
components to pattern match


194
00:05:41,526 --> 00:05:42,046
against.


195
00:05:42,396 --> 00:05:44,546
As before, you can match against


196
00:05:44,546 --> 00:05:45,936
the URL's path component whose


197
00:05:45,936 --> 00:05:47,116
key is the forward slash.


198
00:05:47,486 --> 00:05:49,446
If you need to support previous


199
00:05:49,446 --> 00:05:50,986
releases, you can keep the paths


200
00:05:50,986 --> 00:05:51,206
key.


201
00:05:52,026 --> 00:05:55,766
iOS 13, tvOS 13 and macOS 10.15


202
00:05:55,766 --> 00:05:57,296
will ignore it if the components


203
00:05:57,296 --> 00:05:58,016
key is present.


204
00:05:58,556 --> 00:06:00,346
And now you can match against


205
00:06:00,346 --> 00:06:01,596
the URL's fragment component


206
00:06:01,956 --> 00:06:03,646
whose key is the hash mark and


207
00:06:03,646 --> 00:06:04,436
you can match the query


208
00:06:04,436 --> 00:06:05,566
component whose key is the


209
00:06:05,566 --> 00:06:06,236
question mark.


210
00:06:07,076 --> 00:06:09,466
Now many, if not most URLs out


211
00:06:09,466 --> 00:06:10,616
there divide their query


212
00:06:10,616 --> 00:06:12,056
component up into key value


213
00:06:12,056 --> 00:06:13,496
pairs called query items.


214
00:06:13,496 --> 00:06:15,386
For the query component, you can


215
00:06:15,386 --> 00:06:17,016
specify a dictionary instead of


216
00:06:17,016 --> 00:06:19,026
a string as its value and


217
00:06:19,026 --> 00:06:20,556
pattern match individual query


218
00:06:20,556 --> 00:06:20,946
items.


219
00:06:21,686 --> 00:06:23,636
URLs may repeat query item names


220
00:06:23,706 --> 00:06:24,826
and the operating system will


221
00:06:24,826 --> 00:06:26,586
require that all instances of a


222
00:06:26,586 --> 00:06:28,276
given query item name match your


223
00:06:28,276 --> 00:06:28,626
pattern.


224
00:06:29,486 --> 00:06:31,216
Query items with no value and


225
00:06:31,216 --> 00:06:32,736
absent query items are treated


226
00:06:32,736 --> 00:06:34,406
by the operating system as if


227
00:06:34,406 --> 00:06:35,746
they have a value equal to the


228
00:06:35,746 --> 00:06:36,416
empty string.


229
00:06:37,986 --> 00:06:39,306
For a components dictionary to


230
00:06:39,306 --> 00:06:41,206
match a candidate URL, all the


231
00:06:41,206 --> 00:06:42,866
specified components must match.


232
00:06:43,466 --> 00:06:44,456
If you don't specify a


233
00:06:44,456 --> 00:06:45,596
component, the operating


234
00:06:45,596 --> 00:06:47,356
system's default behavior is to


235
00:06:47,356 --> 00:06:48,876
simply ignore that component.


236
00:06:49,456 --> 00:06:51,266
So if, for example, your app


237
00:06:51,326 --> 00:06:52,576
doesn't care about the fragment


238
00:06:52,576 --> 00:06:54,426
component of a URL, you don't


239
00:06:54,426 --> 00:06:55,846
need to specify it in this file.


240
00:06:56,556 --> 00:06:57,706
You may have sections of your


241
00:06:57,706 --> 00:06:59,196
website that are not able to be


242
00:06:59,196 --> 00:07:00,606
represented in your app yet.


243
00:07:01,266 --> 00:07:03,086
You can exclude such subsections


244
00:07:03,086 --> 00:07:04,796
by specifying the exclude key


245
00:07:05,016 --> 00:07:06,386
with a Boolean value of true.


246
00:07:07,276 --> 00:07:08,826
This key has the same behavior


247
00:07:08,826 --> 00:07:10,466
as a not keyword that you used


248
00:07:10,466 --> 00:07:11,536
in the old paths key.


249
00:07:12,056 --> 00:07:13,436
That key word is not supported


250
00:07:13,436 --> 00:07:14,436
when using the component's


251
00:07:14,436 --> 00:07:14,876
dictionary.


252
00:07:16,626 --> 00:07:18,486
Here we have a few examples of


253
00:07:18,486 --> 00:07:19,906
URLs that we need to pattern


254
00:07:19,906 --> 00:07:20,286
match.


255
00:07:20,726 --> 00:07:22,286
I'm working on a meal ordering


256
00:07:22,286 --> 00:07:23,726
app and I'm using universal


257
00:07:23,726 --> 00:07:25,436
links to bring users into my app


258
00:07:25,436 --> 00:07:26,186
from Safari.


259
00:07:26,616 --> 00:07:28,316
On the left, you can see some


260
00:07:28,316 --> 00:07:30,146
JSON from my server and on the


261
00:07:30,146 --> 00:07:31,936
right, you can see some URLs.


262
00:07:32,806 --> 00:07:34,606
First, I want to match all the


263
00:07:34,606 --> 00:07:36,626
order forms on my website which


264
00:07:36,626 --> 00:07:38,436
are all located on a path where


265
00:07:38,436 --> 00:07:39,576
the first component can be


266
00:07:39,576 --> 00:07:40,076
anything.


267
00:07:40,496 --> 00:07:42,086
The second component is order


268
00:07:42,086 --> 00:07:43,656
and there are no further path


269
00:07:43,656 --> 00:07:44,656
components afterward.


270
00:07:45,806 --> 00:07:47,336
This pattern will match a URL


271
00:07:47,336 --> 00:07:48,786
such as these two on the right.


272
00:07:49,136 --> 00:07:49,856
Time for lunch.


273
00:07:51,396 --> 00:07:52,746
Next, I know a lot of my


274
00:07:52,746 --> 00:07:54,126
customers are going to want to


275
00:07:54,126 --> 00:07:56,026
put cheese on their tacos so I'm


276
00:07:56,026 --> 00:07:57,726
going to match any URL where the


277
00:07:57,726 --> 00:07:59,246
path starts with the path


278
00:07:59,246 --> 00:08:01,866
component taco and where a query


279
00:08:01,866 --> 00:08:03,986
item named cheese is specified.


280
00:08:04,626 --> 00:08:05,916
You'll notice that I specify a


281
00:08:05,916 --> 00:08:07,946
question mark and an asterisk as


282
00:08:07,946 --> 00:08:09,286
the pattern from the query items


283
00:08:09,286 --> 00:08:09,676
value.


284
00:08:09,966 --> 00:08:12,046
A pattern consisting of a single


285
00:08:12,046 --> 00:08:13,696
asterisk matches any string,


286
00:08:13,826 --> 00:08:15,066
including the empty string.


287
00:08:15,156 --> 00:08:16,966
And a missing query item has a


288
00:08:16,966 --> 00:08:18,236
value equivalent to the empty


289
00:08:18,236 --> 00:08:18,556
string.


290
00:08:19,076 --> 00:08:20,766
So to match against the string


291
00:08:20,766 --> 00:08:22,016
that's at least one character


292
00:08:22,016 --> 00:08:24,416
long, I specify a question mark


293
00:08:24,416 --> 00:08:25,446
and then any additional


294
00:08:25,446 --> 00:08:26,626
characters are matched by the


295
00:08:26,626 --> 00:08:27,256
asterisk.


296
00:08:28,096 --> 00:08:29,436
That matches our third URL.


297
00:08:31,266 --> 00:08:33,006
The fourth and fifth URLs look


298
00:08:33,006 --> 00:08:35,206
very similar but there's a good


299
00:08:35,206 --> 00:08:35,956
reason for that.


300
00:08:36,535 --> 00:08:38,206
My website also has lots of


301
00:08:38,206 --> 00:08:39,576
four-digit coupon codes that the


302
00:08:39,576 --> 00:08:40,326
app can handle.


303
00:08:40,395 --> 00:08:42,866
But if they start with a 1, I


304
00:08:43,006 --> 00:08:43,936
want them to stay in the


305
00:08:43,936 --> 00:08:44,446
browser.


306
00:08:45,216 --> 00:08:46,706
Because the operating system is


307
00:08:46,706 --> 00:08:47,916
going to look at the available


308
00:08:47,916 --> 00:08:49,446
patterns from top to bottom,


309
00:08:49,846 --> 00:08:51,266
we'll first mark coupon code


310
00:08:51,266 --> 00:08:52,566
starting with the one as


311
00:08:52,566 --> 00:08:53,176
excluded.


312
00:08:54,236 --> 00:08:55,846
This tells the system to stop


313
00:08:55,846 --> 00:08:57,446
looking here if it finds a match


314
00:08:57,646 --> 00:08:59,496
but not to open the URL as a


315
00:08:59,496 --> 00:09:00,356
universal link.


316
00:09:00,926 --> 00:09:02,866
Then any other coupon will match


317
00:09:02,866 --> 00:09:04,366
the fourth and final components


318
00:09:04,366 --> 00:09:04,886
dictionary.


319
00:09:08,116 --> 00:09:09,486
Before we move on to your app,


320
00:09:09,686 --> 00:09:11,226
let's discuss how to support an


321
00:09:11,226 --> 00:09:12,386
international audience.


322
00:09:13,456 --> 00:09:15,946
URLs are always ASCII coded so


323
00:09:15,946 --> 00:09:17,206
component matching is done in


324
00:09:17,206 --> 00:09:17,926
ASCII as well.


325
00:09:18,866 --> 00:09:20,036
If you need to match Unicode


326
00:09:20,036 --> 00:09:21,816
characters present and code them


327
00:09:21,816 --> 00:09:23,026
like you would in your URL.


328
00:09:23,866 --> 00:09:25,186
Because components are present


329
00:09:25,186 --> 00:09:26,766
and coded, a Unicode character


330
00:09:26,766 --> 00:09:28,406
may be represented by more than


331
00:09:28,406 --> 00:09:30,166
one ASCII character, so keep


332
00:09:30,166 --> 00:09:31,196
that in mind when using the


333
00:09:31,196 --> 00:09:32,526
question mark in your patterns.


334
00:09:33,636 --> 00:09:35,036
When you build your JSON, you


335
00:09:35,036 --> 00:09:36,226
may be tempted to provide


336
00:09:36,226 --> 00:09:37,556
country-specific patterns for


337
00:09:37,556 --> 00:09:38,826
every country you support.


338
00:09:39,426 --> 00:09:40,716
This increases the size of your


339
00:09:40,716 --> 00:09:41,826
JSON significantly.


340
00:09:42,646 --> 00:09:43,616
If your pattern-matching is


341
00:09:43,616 --> 00:09:45,096
consistent between countries,


342
00:09:45,286 --> 00:09:46,646
you can reduce the traffic to


343
00:09:46,646 --> 00:09:47,596
and from your server by


344
00:09:47,596 --> 00:09:48,736
simplifying you JSON.


345
00:09:49,526 --> 00:09:50,816
For instance, if you separate


346
00:09:50,816 --> 00:09:51,926
your content by two-letter


347
00:09:51,926 --> 00:09:53,406
country code, you need to only


348
00:09:53,406 --> 00:09:55,266
specify two question marks where


349
00:09:55,266 --> 00:09:56,516
you are previously using those


350
00:09:56,516 --> 00:09:57,226
country codes.


351
00:09:57,926 --> 00:09:59,456
Other more complex patterns like


352
00:09:59,456 --> 00:10:01,216
you see here can also be matched


353
00:10:01,216 --> 00:10:01,596
easily.


354
00:10:02,506 --> 00:10:04,216
If you encounter a URL with an


355
00:10:04,216 --> 00:10:05,736
invalid country code or locale


356
00:10:05,736 --> 00:10:07,636
specific identifier, just treat


357
00:10:07,636 --> 00:10:08,646
it like the user's current


358
00:10:08,646 --> 00:10:09,046
locale.


359
00:10:10,476 --> 00:10:11,876
Beginning in this release, the


360
00:10:11,876 --> 00:10:13,426
operating system will prioritize


361
00:10:13,426 --> 00:10:15,036
apple-app-site-association


362
00:10:15,036 --> 00:10:16,926
downloads based on where a user


363
00:10:16,926 --> 00:10:18,226
is most likely to browse.


364
00:10:18,786 --> 00:10:19,946
We'll still download them all


365
00:10:19,946 --> 00:10:21,406
when an app is installed but at


366
00:10:21,406 --> 00:10:22,466
different priorities.


367
00:10:22,826 --> 00:10:24,856
The top-level domains .com,


368
00:10:24,976 --> 00:10:27,046
.net, and .org, are high


369
00:10:27,046 --> 00:10:28,476
priority domains because they


370
00:10:28,476 --> 00:10:29,746
account for so much internet


371
00:10:29,746 --> 00:10:30,856
traffic worldwide.


372
00:10:31,666 --> 00:10:33,676
Country code TLDs also known as


373
00:10:33,676 --> 00:10:36,056
ccTLDs and internationalized


374
00:10:36,056 --> 00:10:38,036
TLDs are also prioritized if


375
00:10:38,036 --> 00:10:39,266
they match the user's current


376
00:10:39,266 --> 00:10:40,126
locale settings.


377
00:10:40,586 --> 00:10:42,386
For example, the average user in


378
00:10:42,386 --> 00:10:43,986
China is more likely to visit a


379
00:10:43,986 --> 00:10:46,316
domain under a Chinese ccTLD


380
00:10:46,476 --> 00:10:47,826
than under, for example, an


381
00:10:47,826 --> 00:10:49,676
Italian or Russian ccTLD.


382
00:10:52,506 --> 00:10:53,956
So now your server is ready to


383
00:10:53,956 --> 00:10:55,266
support universal links.


384
00:10:55,496 --> 00:10:58,776
Let's update your app.


385
00:10:58,776 --> 00:11:00,246
Open your project in Xcode and


386
00:11:00,246 --> 00:11:01,416
navigate to your project


387
00:11:01,416 --> 00:11:01,966
settings.


388
00:11:02,266 --> 00:11:03,836
Add the Associated Domains


389
00:11:03,836 --> 00:11:04,486
capability.


390
00:11:05,106 --> 00:11:06,516
This adds a new entitlement to


391
00:11:06,516 --> 00:11:07,506
the selected target.


392
00:11:08,106 --> 00:11:09,406
You can modify this entitlement


393
00:11:09,406 --> 00:11:10,396
directly from this view.


394
00:11:13,336 --> 00:11:15,106
The value of this entitlement is


395
00:11:15,106 --> 00:11:16,726
an array of strings of the form


396
00:11:16,796 --> 00:11:18,856
service type: domain name.


397
00:11:18,856 --> 00:11:20,936
For universal links, the service


398
00:11:20,936 --> 00:11:22,626
type is applinks like it was in


399
00:11:22,626 --> 00:11:24,326
your apple-app-site-association


400
00:11:24,326 --> 00:11:24,556
file.


401
00:11:25,326 --> 00:11:26,586
The order of values in this


402
00:11:26,586 --> 00:11:28,106
array is ignored by the system.


403
00:11:29,006 --> 00:11:30,586
Here, we declare that your app


404
00:11:30,586 --> 00:11:31,976
supports universal links for


405
00:11:31,976 --> 00:11:34,176
www.example.com.


406
00:11:34,956 --> 00:11:36,336
When your app is then installed,


407
00:11:36,466 --> 00:11:37,686
the operating system will visit


408
00:11:37,686 --> 00:11:40,836
www.example.com looking for the


409
00:11:40,836 --> 00:11:42,616
apple-app-site-association file


410
00:11:42,616 --> 00:11:43,536
we just discussed.


411
00:11:44,066 --> 00:11:45,536
If it's present and it contains


412
00:11:45,536 --> 00:11:47,066
information for these apps, app


413
00:11:47,066 --> 00:11:48,796
identifier, then the association


414
00:11:48,796 --> 00:11:49,476
is confirmed.


415
00:11:50,376 --> 00:11:51,886
It's also possible to indicate


416
00:11:51,886 --> 00:11:53,426
wildcard support for subdomains


417
00:11:53,426 --> 00:11:55,026
of a given domain as shown here.


418
00:11:55,726 --> 00:11:56,916
In this case, the operating


419
00:11:56,916 --> 00:11:58,696
system will visit example.com.


420
00:11:58,996 --> 00:12:00,846
No www at this time.


421
00:12:02,036 --> 00:12:03,256
Exact domains have higher


422
00:12:03,256 --> 00:12:04,756
priority during universal links


423
00:12:04,756 --> 00:12:06,436
look up than wildcard domains.


424
00:12:07,126 --> 00:12:08,516
In this case, that means when


425
00:12:08,516 --> 00:12:09,966
the system opens a URL at


426
00:12:09,966 --> 00:12:13,226
www.example.com, it will try to


427
00:12:13,226 --> 00:12:14,696
match patterns from that domain


428
00:12:14,966 --> 00:12:16,266
before the ones it got from the


429
00:12:16,266 --> 00:12:17,016
parent domain.


430
00:12:17,736 --> 00:12:19,076
Patterns from the parent domain


431
00:12:19,076 --> 00:12:20,606
will only be matched if no match


432
00:12:20,606 --> 00:12:22,036
was found at the fully qualified


433
00:12:22,036 --> 00:12:22,596
subdomain.


434
00:12:23,956 --> 00:12:25,806
Finally, here's an example of an


435
00:12:25,806 --> 00:12:27,016
internationalized domain.


436
00:12:27,716 --> 00:12:29,426
Since URLs are always ASCII,


437
00:12:29,736 --> 00:12:30,966
your internationalized domain


438
00:12:30,966 --> 00:12:32,416
names will need to be encoded


439
00:12:32,416 --> 00:12:33,266
using Punycode.


440
00:12:33,356 --> 00:12:34,836
For more information on


441
00:12:34,836 --> 00:12:37,696
Punycode, see RFC 3492.


442
00:12:40,126 --> 00:12:41,276
Now that your app declares


443
00:12:41,276 --> 00:12:42,646
support for certain domains,


444
00:12:42,766 --> 00:12:44,066
you'll need to actually parse


445
00:12:44,066 --> 00:12:45,346
the URLs as they come in.


446
00:12:46,236 --> 00:12:47,496
Universal links are based on


447
00:12:47,496 --> 00:12:49,126
foundations and as user activity


448
00:12:49,126 --> 00:12:50,696
class and are handled by your


449
00:12:50,696 --> 00:12:51,406
app delegate.


450
00:12:52,356 --> 00:12:53,346
You'll need a handler for


451
00:12:53,346 --> 00:12:54,716
incoming user activities.


452
00:12:55,286 --> 00:12:56,706
If you already support hand-off


453
00:12:56,706 --> 00:12:58,266
or other similar technologies,


454
00:12:58,516 --> 00:12:59,876
you may already have this method


455
00:12:59,876 --> 00:13:00,786
in your app delegate.


456
00:13:01,416 --> 00:13:02,646
This method returns a bool.


457
00:13:02,896 --> 00:13:03,996
Return true if you could


458
00:13:03,996 --> 00:13:05,226
successfully open the user


459
00:13:05,226 --> 00:13:06,576
activity and false if you


460
00:13:06,576 --> 00:13:06,996
couldn't.


461
00:13:07,786 --> 00:13:09,846
If you're using UI scene, then a


462
00:13:09,846 --> 00:13:11,076
similar delegate method is


463
00:13:11,076 --> 00:13:11,506
available.


464
00:13:12,126 --> 00:13:13,526
If you're using AppKit, the


465
00:13:13,526 --> 00:13:14,656
signature of this method is


466
00:13:14,656 --> 00:13:15,706
almost identical.


467
00:13:15,706 --> 00:13:18,086
Just replace UI with NS like you


468
00:13:18,086 --> 00:13:18,586
see here.


469
00:13:19,396 --> 00:13:20,976
We'll use UI application for the


470
00:13:20,976 --> 00:13:22,076
remainder of this session.


471
00:13:23,296 --> 00:13:24,626
Next, we'll check that the


472
00:13:24,626 --> 00:13:25,786
activityType is


473
00:13:25,786 --> 00:13:27,896
NSUserActivityTypeBrowsingWeb.


474
00:13:28,546 --> 00:13:30,046
This helps distinguish universal


475
00:13:30,046 --> 00:13:31,466
links from other incoming user


476
00:13:31,466 --> 00:13:32,616
activities that your app may


477
00:13:32,616 --> 00:13:33,106
support.


478
00:13:33,916 --> 00:13:35,346
Even if you don't support other


479
00:13:35,346 --> 00:13:37,206
activity types now, it's a good


480
00:13:37,206 --> 00:13:38,766
idea to check the activity type


481
00:13:38,996 --> 00:13:40,266
in case you need to support


482
00:13:40,266 --> 00:13:41,376
other types in the future.


483
00:13:41,976 --> 00:13:43,846
The activity type looks good.


484
00:13:44,186 --> 00:13:45,866
Let's grab the webpage URL from


485
00:13:45,866 --> 00:13:47,126
the user activity object.


486
00:13:47,526 --> 00:13:48,726
This will never be nil for a


487
00:13:48,726 --> 00:13:51,486
universal link and let's build a


488
00:13:51,486 --> 00:13:52,966
URL components draft from the


489
00:13:52,966 --> 00:13:53,306
URL.


490
00:13:53,996 --> 00:13:55,576
You should always parse URLs


491
00:13:55,576 --> 00:13:56,856
using URL components.


492
00:13:57,296 --> 00:13:58,716
Using regular expressions or


493
00:13:58,716 --> 00:14:00,366
manually parsing a URL string


494
00:14:00,366 --> 00:14:01,566
may leave you vulnerable to


495
00:14:01,566 --> 00:14:02,546
security issues.


496
00:14:03,576 --> 00:14:04,896
We're past the guard statement


497
00:14:04,996 --> 00:14:06,356
so let's examine the contents of


498
00:14:06,356 --> 00:14:06,956
the URL.


499
00:14:07,696 --> 00:14:09,116
In this case I'm interested in


500
00:14:09,116 --> 00:14:10,546
the query items of the URL but


501
00:14:10,546 --> 00:14:11,936
you can use any of the URL's


502
00:14:11,936 --> 00:14:13,536
components to root activities at


503
00:14:13,536 --> 00:14:14,056
this point.


504
00:14:14,816 --> 00:14:16,186
If you support universal links


505
00:14:16,186 --> 00:14:17,586
from multiple domains, don't


506
00:14:17,586 --> 00:14:18,556
forget to check the host


507
00:14:18,556 --> 00:14:19,056
component.


508
00:14:21,376 --> 00:14:22,836
Our code is complete and our


509
00:14:22,836 --> 00:14:24,176
server is configured but there


510
00:14:24,176 --> 00:14:25,606
are few differences when using


511
00:14:25,606 --> 00:14:27,116
universal links on macOS.


512
00:14:28,006 --> 00:14:29,216
Universal links open in the


513
00:14:29,216 --> 00:14:30,896
browser by default on macOS.


514
00:14:31,406 --> 00:14:32,876
When they do, Safari will give


515
00:14:32,876 --> 00:14:34,376
the user the option to open them


516
00:14:34,376 --> 00:14:35,026
in your app.


517
00:14:35,146 --> 00:14:37,356
If the user selects this option,


518
00:14:37,356 --> 00:14:38,856
your links will continue to open


519
00:14:38,856 --> 00:14:39,966
in your app afterward.


520
00:14:41,186 --> 00:14:43,106
Unlike iOS, macOS supports


521
00:14:43,106 --> 00:14:44,646
launching apps present on remote


522
00:14:44,646 --> 00:14:45,246
volumes.


523
00:14:45,566 --> 00:14:47,256
Apps on remote volumes cannot


524
00:14:47,256 --> 00:14:48,456
use universal links.


525
00:14:48,616 --> 00:14:50,036
They must be installed locally.


526
00:14:50,266 --> 00:14:52,596
If the user downloads your app


527
00:14:52,596 --> 00:14:54,086
from the App Store, the system


528
00:14:54,086 --> 00:14:55,106
will begin downloading


529
00:14:55,106 --> 00:14:57,046
apple-app-site-association files


530
00:14:57,046 --> 00:14:58,106
as soon as soon as your app is


531
00:14:58,106 --> 00:14:59,216
installed or updated.


532
00:15:00,036 --> 00:15:01,026
If your app is developer


533
00:15:01,026 --> 00:15:02,616
ID-signed, the system will not


534
00:15:02,616 --> 00:15:03,946
begin these downloads until the


535
00:15:03,946 --> 00:15:05,266
user has launched your app at


536
00:15:05,266 --> 00:15:06,006
least once.


537
00:15:07,176 --> 00:15:08,416
Because a universal link is


538
00:15:08,416 --> 00:15:10,176
backed by a secure association


539
00:15:10,176 --> 00:15:12,236
with an app identifier, only one


540
00:15:12,236 --> 00:15:13,726
copy of a given app will be able


541
00:15:13,726 --> 00:15:15,166
to handle universal links on a


542
00:15:15,166 --> 00:15:15,536
Mac.


543
00:15:16,176 --> 00:15:17,676
Typically, this will be the copy


544
00:15:17,676 --> 00:15:19,066
of the app present in slash


545
00:15:19,066 --> 00:15:19,826
applications.


546
00:15:20,306 --> 00:15:21,586
Keep that in mind anytime you


547
00:15:21,586 --> 00:15:22,816
need to test changes to your


548
00:15:22,816 --> 00:15:24,386
associated domains entitlement.


549
00:15:25,226 --> 00:15:26,606
If you are on the other end of


550
00:15:26,606 --> 00:15:28,176
an operation and want to open a


551
00:15:28,176 --> 00:15:30,426
universal link, UIApplication


552
00:15:30,556 --> 00:15:31,916
and NSWorkspace and launch


553
00:15:31,916 --> 00:15:33,556
services will all automatically


554
00:15:33,556 --> 00:15:34,756
open them when available.


555
00:15:35,816 --> 00:15:37,236
If you want to require opening a


556
00:15:37,236 --> 00:15:38,816
universal link in an app rather


557
00:15:38,816 --> 00:15:40,316
than the default browser, you


558
00:15:40,316 --> 00:15:42,066
can use UIApplication or


559
00:15:42,206 --> 00:15:44,276
NSWorkspace API as appropriate.


560
00:15:44,796 --> 00:15:46,356
If these open operations fail,


561
00:15:46,476 --> 00:15:47,806
it means that a universal link


562
00:15:47,806 --> 00:15:48,866
was not available for the


563
00:15:48,866 --> 00:15:49,726
supplied URL.


564
00:15:50,786 --> 00:15:51,846
If you're developing a web


565
00:15:51,846 --> 00:15:53,646
browser from macOS, additional


566
00:15:53,646 --> 00:15:55,246
API will be made available to


567
00:15:55,246 --> 00:15:56,456
help you support universal


568
00:15:56,456 --> 00:15:56,866
links.


569
00:15:58,676 --> 00:16:00,346
To help you make the best apps


570
00:16:00,346 --> 00:16:01,546
and to provide the best user


571
00:16:01,546 --> 00:16:03,186
experience, I've got a few final


572
00:16:03,186 --> 00:16:04,156
tips to share with you.


573
00:16:05,836 --> 00:16:07,896
The first is to fail gracefully.


574
00:16:08,546 --> 00:16:09,906
It's possible you'll be provided


575
00:16:09,906 --> 00:16:11,246
with URLs that represent


576
00:16:11,246 --> 00:16:12,746
outdated, invalid, or


577
00:16:12,746 --> 00:16:13,986
nonexistent content.


578
00:16:14,666 --> 00:16:15,566
If you determine that a


579
00:16:15,566 --> 00:16:16,986
universal link can't be opened


580
00:16:16,986 --> 00:16:18,716
by your app, you can often open


581
00:16:18,716 --> 00:16:19,966
it in Safari View Controller.


582
00:16:20,396 --> 00:16:21,776
This keeps the user engaged in


583
00:16:21,776 --> 00:16:22,156
your app.


584
00:16:22,836 --> 00:16:24,176
If Safari View Controller is not


585
00:16:24,176 --> 00:16:26,006
an option, consider opening the


586
00:16:26,006 --> 00:16:28,126
URL in Safari, or at a minimum,


587
00:16:28,336 --> 00:16:29,696
prompting with details about the


588
00:16:29,696 --> 00:16:30,146
issue.


589
00:16:30,606 --> 00:16:31,946
Avoid sending the user to a


590
00:16:31,946 --> 00:16:32,686
blank screen.


591
00:16:33,716 --> 00:16:35,316
If the user is visiting your


592
00:16:35,316 --> 00:16:37,016
website, use the Smart App


593
00:16:37,016 --> 00:16:38,506
Banner to provide a link either


594
00:16:38,506 --> 00:16:39,806
to the App Store or to your


595
00:16:39,806 --> 00:16:40,346
content.


596
00:16:40,816 --> 00:16:42,116
The Smart App Banner integrates


597
00:16:42,116 --> 00:16:43,616
seamlessly with Safari and looks


598
00:16:43,616 --> 00:16:44,016
great.


599
00:16:44,436 --> 00:16:45,666
And there's no JavaScript or


600
00:16:45,666 --> 00:16:47,146
custom URL schemes required to


601
00:16:47,146 --> 00:16:47,676
support it.


602
00:16:48,756 --> 00:16:50,306
Finally, if you have feedback on


603
00:16:50,306 --> 00:16:51,426
how we can improve universal


604
00:16:51,426 --> 00:16:53,016
links, I would love to hear it.


605
00:16:53,366 --> 00:16:54,396
Please use the feedback


606
00:16:54,396 --> 00:16:55,786
assistant and let us know what


607
00:16:55,786 --> 00:16:56,966
we can do to make universal


608
00:16:56,966 --> 00:16:57,836
links even better.


609
00:16:58,466 --> 00:16:59,176
Thank you.

