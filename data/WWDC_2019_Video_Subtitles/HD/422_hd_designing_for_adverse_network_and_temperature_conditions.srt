1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:11,696 --> 00:00:12,696
>> Good evening, hello.


3
00:00:14,066 --> 00:00:16,136
Welcome to Designing for Adverse


4
00:00:16,136 --> 00:00:17,156
Network and Temperature


5
00:00:17,156 --> 00:00:17,856
Conditions.


6
00:00:18,716 --> 00:00:19,986
Whether you're just starting out


7
00:00:19,986 --> 00:00:21,536
with your first app or if you're


8
00:00:21,536 --> 00:00:23,336
a seasoned app developer, we


9
00:00:23,336 --> 00:00:25,036
want you to design for a world


10
00:00:25,036 --> 00:00:26,136
class experience.


11
00:00:27,016 --> 00:00:28,366
Your apps have the potential to


12
00:00:28,366 --> 00:00:30,136
be used by millions of people in


13
00:00:30,136 --> 00:00:31,626
so many different situations.


14
00:00:32,566 --> 00:00:34,526
Many of those people will not be


15
00:00:34,526 --> 00:00:37,106
on a superfast 4G network, and


16
00:00:37,106 --> 00:00:38,096
others may be in warmer


17
00:00:38,096 --> 00:00:38,806
environments.


18
00:00:39,966 --> 00:00:41,166
Now, we all do some level of


19
00:00:41,196 --> 00:00:43,346
testing, but are you doing


20
00:00:43,346 --> 00:00:44,806
enough to know what it's like to


21
00:00:44,806 --> 00:00:46,506
interact with your app the way


22
00:00:46,506 --> 00:00:48,346
those users would, and if you


23
00:00:48,346 --> 00:00:50,086
are, are you providing the best


24
00:00:50,086 --> 00:00:51,146
experience that you can?


25
00:00:52,326 --> 00:00:54,266
Great apps continue to work well


26
00:00:54,326 --> 00:00:55,436
even under challenging


27
00:00:55,436 --> 00:00:57,006
real-world situations, which


28
00:00:57,006 --> 00:00:58,216
might be difficult to design


29
00:00:58,286 --> 00:00:58,496
for.


30
00:00:59,046 --> 00:01:00,396
That's why we're here to share


31
00:01:00,396 --> 00:01:02,046
some tips with you and brand-new


32
00:01:02,086 --> 00:01:03,656
tools in Xcode to help with


33
00:01:03,656 --> 00:01:03,856
that.


34
00:01:04,366 --> 00:01:05,215
I'm Alex Kara.


35
00:01:05,596 --> 00:01:06,546
>> And I'm Ilya Veygman.


36
00:01:07,206 --> 00:01:08,446
We work in iOS system


37
00:01:08,446 --> 00:01:10,196
performance so that the system


38
00:01:10,196 --> 00:01:11,626
works well and reliably and


39
00:01:11,626 --> 00:01:13,106
consistently in the real world.


40
00:01:13,826 --> 00:01:15,286
IOS reacts to changing network


41
00:01:15,286 --> 00:01:16,866
and temperature conditions, and


42
00:01:16,866 --> 00:01:18,386
we want you to be able to do the


43
00:01:18,386 --> 00:01:20,036
same thing with your app so that


44
00:01:20,036 --> 00:01:21,156
you just can experience your app


45
00:01:21,376 --> 00:01:22,436
the way that you designed it.


46
00:01:23,856 --> 00:01:24,956
>> We have some exciting things


47
00:01:24,956 --> 00:01:25,806
to talk about today.


48
00:01:26,146 --> 00:01:28,116
First, we're going to dive into


49
00:01:28,116 --> 00:01:29,746
real-world device conditions and


50
00:01:29,746 --> 00:01:31,256
where they fit in to your design


51
00:01:31,256 --> 00:01:31,906
process.


52
00:01:33,066 --> 00:01:34,906
Next, we'll show you how to


53
00:01:34,906 --> 00:01:36,286
improve your app's behavior


54
00:01:36,466 --> 00:01:37,866
under different network links


55
00:01:38,186 --> 00:01:39,736
with new and existing developer


56
00:01:39,736 --> 00:01:40,186
tools.


57
00:01:41,366 --> 00:01:42,846
And finally, we'll reveal a


58
00:01:42,846 --> 00:01:44,506
brand-new way to optimize your


59
00:01:44,506 --> 00:01:46,126
app with varying temperature


60
00:01:46,126 --> 00:01:46,666
conditions.


61
00:01:52,016 --> 00:01:54,166
>> I want you to picture how and


62
00:01:54,166 --> 00:01:55,736
where you use iOS.


63
00:01:56,226 --> 00:01:57,646
You don't simply use your


64
00:01:57,646 --> 00:01:58,686
devices at home or at the


65
00:01:58,686 --> 00:01:59,176
office.


66
00:02:00,156 --> 00:02:00,766
You take them with you


67
00:02:00,766 --> 00:02:01,176
everywhere.


68
00:02:01,636 --> 00:02:04,826
To the beach, to the park, on


69
00:02:04,826 --> 00:02:06,736
the subway, in your car on a


70
00:02:06,736 --> 00:02:07,336
long road trip.


71
00:02:08,716 --> 00:02:09,826
These might be places with a lot


72
00:02:09,826 --> 00:02:12,146
of sunlight or heat or with weak


73
00:02:12,146 --> 00:02:12,926
network connectivity.


74
00:02:14,106 --> 00:02:15,186
Now, picture your users.


75
00:02:15,966 --> 00:02:17,326
Chances are, they'll be using


76
00:02:17,326 --> 00:02:18,586
your app in environments just


77
00:02:18,586 --> 00:02:19,106
like these.


78
00:02:19,606 --> 00:02:20,746
It's important for you to


79
00:02:20,746 --> 00:02:22,356
consider how that compares with


80
00:02:22,356 --> 00:02:23,276
your development and test


81
00:02:23,276 --> 00:02:23,736
environment.


82
00:02:25,106 --> 00:02:26,896
Now, you're probably doing most


83
00:02:26,976 --> 00:02:28,976
or all of your development and


84
00:02:28,976 --> 00:02:30,366
testing in your office or in a


85
00:02:30,366 --> 00:02:31,116
lab.


86
00:02:31,536 --> 00:02:32,796
These are all certainly going to


87
00:02:32,796 --> 00:02:34,066
have fast, reliable internet


88
00:02:34,066 --> 00:02:35,506
connectivity and climate


89
00:02:35,506 --> 00:02:37,066
control, and that's a good


90
00:02:37,066 --> 00:02:37,326
thing.


91
00:02:37,326 --> 00:02:38,746
We all want a good controlled


92
00:02:38,746 --> 00:02:39,216
place to work.


93
00:02:40,526 --> 00:02:41,416
But these won't be the same


94
00:02:41,416 --> 00:02:42,846
conditions your users around the


95
00:02:42,846 --> 00:02:44,376
world face when interacting with


96
00:02:44,376 --> 00:02:45,986
your app.


97
00:02:46,026 --> 00:02:47,176
This difference can be a big


98
00:02:47,176 --> 00:02:48,226
reason why you might be seeing


99
00:02:48,226 --> 00:02:49,736
complaints about your app but


100
00:02:49,736 --> 00:02:51,266
dismissing them as one-offs or


101
00:02:51,266 --> 00:02:51,996
corner cases.


102
00:02:52,556 --> 00:02:55,686
In addition to this, these


103
00:02:55,686 --> 00:02:56,656
devices can multitask.


104
00:02:57,696 --> 00:02:58,996
Your users might be in the


105
00:02:58,996 --> 00:03:00,536
passenger seat of a car, getting


106
00:03:00,536 --> 00:03:01,766
turn-by-turn directions while


107
00:03:01,766 --> 00:03:03,196
streaming music even wirelessly


108
00:03:03,196 --> 00:03:03,756
to CarPlay.


109
00:03:04,706 --> 00:03:05,636
They might be at a coffee shop


110
00:03:06,176 --> 00:03:07,816
charging their iPhone and using


111
00:03:07,816 --> 00:03:09,526
it as a hotspot for their Mac.


112
00:03:10,116 --> 00:03:11,496
Or, they might be using ARKit to


113
00:03:11,496 --> 00:03:12,726
recognize objects in your app


114
00:03:12,726 --> 00:03:14,316
through the camera while the app


115
00:03:14,316 --> 00:03:15,686
runs 3D rendering or some other


116
00:03:15,686 --> 00:03:17,026
kind of complicated background


117
00:03:17,026 --> 00:03:17,506
processing.


118
00:03:18,116 --> 00:03:21,176
The point of all this is all of


119
00:03:21,176 --> 00:03:22,736
these scenarios can cause your


120
00:03:22,736 --> 00:03:24,896
device to work harder and get


121
00:03:24,896 --> 00:03:25,096
warm.


122
00:03:26,486 --> 00:03:27,706
While your app's features may


123
00:03:27,706 --> 00:03:28,906
work well in your test weaves


124
00:03:28,996 --> 00:03:30,976
under isolation, are you taking


125
00:03:30,976 --> 00:03:32,506
into account how the performance


126
00:03:32,506 --> 00:03:33,676
of your app might be different


127
00:03:33,676 --> 00:03:34,636
during these very real and


128
00:03:34,636 --> 00:03:35,496
common use cases?


129
00:03:36,286 --> 00:03:38,326
A potential pain point for your


130
00:03:38,326 --> 00:03:40,536
users is when they try to


131
00:03:40,536 --> 00:03:41,866
interact with an app designed


132
00:03:41,866 --> 00:03:42,996
only for the conditions you've


133
00:03:42,996 --> 00:03:43,556
been working in.


134
00:03:44,456 --> 00:03:45,256
How might that look like to


135
00:03:45,256 --> 00:03:45,426
them?


136
00:03:46,456 --> 00:03:48,806
>> Well, we noticed some reviews


137
00:03:48,806 --> 00:03:50,116
on the App Store which mentioned


138
00:03:50,116 --> 00:03:51,896
worsened behavior in certain


139
00:03:51,896 --> 00:03:52,676
situations.


140
00:03:53,276 --> 00:03:54,686
Great apps, which would


141
00:03:54,686 --> 00:03:55,836
sometimes feel short.


142
00:03:56,586 --> 00:03:57,706
Whether it's on the train,


143
00:03:58,146 --> 00:03:59,956
places with a bit of heat, or on


144
00:03:59,956 --> 00:04:02,076
a road trip, this might end up


145
00:04:02,076 --> 00:04:03,546
being the biggest way your users


146
00:04:03,546 --> 00:04:04,856
remember your app, and they


147
00:04:04,856 --> 00:04:06,206
might not want to come back to


148
00:04:06,206 --> 00:04:07,266
it after an egregious


149
00:04:07,266 --> 00:04:07,996
experience.


150
00:04:08,636 --> 00:04:10,176
Now, we know that people use


151
00:04:10,176 --> 00:04:11,386
their phones in direct sunlight


152
00:04:11,386 --> 00:04:13,206
and that people go into tunnels


153
00:04:13,206 --> 00:04:14,436
and expect your app to continue


154
00:04:14,436 --> 00:04:16,446
to work, and we know that people


155
00:04:16,446 --> 00:04:17,526
aren't always in the best


156
00:04:17,526 --> 00:04:18,606
network situations.


157
00:04:19,606 --> 00:04:20,896
It's easy to overlook this when


158
00:04:20,896 --> 00:04:22,416
your development conditions are


159
00:04:22,416 --> 00:04:24,076
less representative or clean


160
00:04:24,076 --> 00:04:24,306
room.


161
00:04:25,476 --> 00:04:26,926
So we want to take these


162
00:04:26,956 --> 00:04:28,496
conditions into account, and we


163
00:04:28,496 --> 00:04:30,226
want you to provide a consistent


164
00:04:30,226 --> 00:04:32,266
experience, not one that's worse


165
00:04:32,266 --> 00:04:33,086
than it needs to be.


166
00:04:33,906 --> 00:04:35,246
You'll find users connected to


167
00:04:35,306 --> 00:04:37,226
3G networks in your feedback, or


168
00:04:37,226 --> 00:04:38,456
you might find a problem in your


169
00:04:38,456 --> 00:04:40,266
app and notice that your device


170
00:04:40,266 --> 00:04:41,386
was warmer to the touch.


171
00:04:42,066 --> 00:04:43,246
Now you might be tempted to


172
00:04:43,246 --> 00:04:44,826
think of these as expected bad


173
00:04:44,856 --> 00:04:46,816
behavior, but these are not edge


174
00:04:46,816 --> 00:04:47,316
cases.


175
00:04:47,706 --> 00:04:49,046
These are real situations that


176
00:04:49,046 --> 00:04:51,036
you and your users will face.


177
00:04:51,626 --> 00:04:52,766
To be able to handle them


178
00:04:52,766 --> 00:04:54,476
better, you're going to need the


179
00:04:54,476 --> 00:04:56,096
right developer tools and the


180
00:04:56,176 --> 00:04:57,656
process that lets you apply them


181
00:04:57,656 --> 00:04:57,876
well.


182
00:04:58,186 --> 00:04:59,636
So, let's get started with


183
00:04:59,636 --> 00:05:00,316
network link.


184
00:05:00,966 --> 00:05:03,256
If you're using the network


185
00:05:03,586 --> 00:05:04,896
either for primary functions in


186
00:05:04,896 --> 00:05:06,406
your app or for background work,


187
00:05:07,186 --> 00:05:08,426
you might have made decisions in


188
00:05:08,426 --> 00:05:10,086
your code to act on the type of


189
00:05:10,086 --> 00:05:11,026
network that you're on.


190
00:05:12,096 --> 00:05:13,266
You might be choosing to time


191
00:05:13,266 --> 00:05:14,846
out if network calls take long.


192
00:05:15,846 --> 00:05:17,766
Now, for your users, some of


193
00:05:17,766 --> 00:05:19,286
them might be on 3G networks.


194
00:05:20,186 --> 00:05:21,786
If that's their reality, they


195
00:05:21,786 --> 00:05:23,096
might be happy to wait for a


196
00:05:23,096 --> 00:05:24,726
download to finish even if it


197
00:05:24,726 --> 00:05:25,306
takes longer.


198
00:05:26,436 --> 00:05:28,046
But your decision to timeout


199
00:05:28,756 --> 00:05:30,546
will not respect their wishes,


200
00:05:31,126 --> 00:05:32,236
and they'll be surprised when


201
00:05:32,236 --> 00:05:33,776
the app makes no progress even


202
00:05:33,776 --> 00:05:34,736
when they're happy to wait.


203
00:05:35,246 --> 00:05:37,066
It's these decisions that add up


204
00:05:37,116 --> 00:05:38,376
to become part of your user's


205
00:05:38,376 --> 00:05:39,066
experience.


206
00:05:42,836 --> 00:05:45,416
When users launch your app, they


207
00:05:45,416 --> 00:05:46,566
don't want to see a network


208
00:05:46,566 --> 00:05:48,026
spinner that looks like it's


209
00:05:48,026 --> 00:05:50,116
perpetually downloading or one


210
00:05:50,116 --> 00:05:51,236
that totally stops.


211
00:05:52,206 --> 00:05:53,566
This might be the experience you


212
00:05:53,566 --> 00:05:55,406
provide if you're doing network


213
00:05:55,406 --> 00:05:56,686
calls during your app launch,


214
00:05:56,936 --> 00:05:58,586
but it might look fine to you if


215
00:05:58,586 --> 00:06:00,416
you ran this on LTE or fast


216
00:06:00,416 --> 00:06:01,906
Wi-Fi even if you were doing


217
00:06:01,906 --> 00:06:02,816
performance testing.


218
00:06:03,296 --> 00:06:04,796
After some time, your users


219
00:06:04,796 --> 00:06:06,296
might give up on this screen and


220
00:06:06,296 --> 00:06:08,166
maybe even on your app entirely,


221
00:06:08,376 --> 00:06:09,766
especially if there are other


222
00:06:09,766 --> 00:06:11,426
apps performing under the same


223
00:06:11,426 --> 00:06:11,976
conditions.


224
00:06:12,796 --> 00:06:13,916
Your app should continue to be


225
00:06:13,916 --> 00:06:15,416
launchable even without a


226
00:06:15,416 --> 00:06:16,206
network connection.


227
00:06:16,746 --> 00:06:19,266
And if I'm trying to catch on


228
00:06:19,316 --> 00:06:21,126
important news with an app that


229
00:06:21,126 --> 00:06:22,966
times out early, I might notice


230
00:06:22,966 --> 00:06:24,636
that content fails to load on a


231
00:06:24,636 --> 00:06:25,916
slower network connection.


232
00:06:26,426 --> 00:06:28,086
Now, if I use other apps and


233
00:06:28,086 --> 00:06:29,546
notice that they don't fail in


234
00:06:29,546 --> 00:06:31,236
the same way, I would think that


235
00:06:31,236 --> 00:06:33,176
this app is frozen or that it's


236
00:06:33,176 --> 00:06:33,566
buggy.


237
00:06:34,406 --> 00:06:35,926
This situation could escape your


238
00:06:35,926 --> 00:06:37,726
development or testing if you're


239
00:06:37,726 --> 00:06:39,486
mocking out network calls or


240
00:06:39,486 --> 00:06:40,976
explicitly skipping them in your


241
00:06:40,976 --> 00:06:41,376
tests.


242
00:06:42,556 --> 00:06:43,756
So, you should go and take a


243
00:06:43,756 --> 00:06:45,236
look at Xcode's Scheme Editor


244
00:06:45,556 --> 00:06:46,526
and see if you're setting an


245
00:06:46,526 --> 00:06:48,006
environment variable for unit


246
00:06:48,006 --> 00:06:48,906
testing purposes.


247
00:06:50,106 --> 00:06:51,066
When you're running your app as


248
00:06:51,066 --> 00:06:52,886
a unit test host, you might be


249
00:06:52,886 --> 00:06:54,506
using this to prevent unneeded


250
00:06:54,506 --> 00:06:55,816
work happening during your app's


251
00:06:55,816 --> 00:06:56,226
launch.


252
00:06:56,816 --> 00:06:58,656
For unit tests, it's okay to


253
00:06:58,656 --> 00:06:59,976
skip work such as kicking off


254
00:06:59,976 --> 00:07:01,716
background network requests in


255
00:07:01,716 --> 00:07:03,206
order to optimize for execution


256
00:07:03,206 --> 00:07:05,006
speed, but you need to make sure


257
00:07:05,006 --> 00:07:05,966
you're still covering those


258
00:07:05,966 --> 00:07:06,886
cases elsewhere.


259
00:07:08,196 --> 00:07:09,866
XC tests will wait


260
00:07:09,866 --> 00:07:11,196
until your app delegates did


261
00:07:11,196 --> 00:07:12,756
finish launching method returns


262
00:07:13,046 --> 00:07:14,666
before it begins running tests.


263
00:07:15,336 --> 00:07:16,386
If you're using an environment


264
00:07:16,386 --> 00:07:18,066
variable here, do check that the


265
00:07:18,066 --> 00:07:19,356
code you skip is truly


266
00:07:19,356 --> 00:07:21,016
nonessential for your unit tests


267
00:07:21,076 --> 00:07:21,926
to run properly.


268
00:07:22,796 --> 00:07:23,666
If you're mocking out or


269
00:07:23,666 --> 00:07:25,166
skipping network calls entirely,


270
00:07:25,486 --> 00:07:26,306
you need to make sure you're


271
00:07:26,306 --> 00:07:27,966
covering those cases along with


272
00:07:27,966 --> 00:07:29,336
realistic network types


273
00:07:29,546 --> 00:07:30,406
somewhere else in the


274
00:07:30,406 --> 00:07:32,226
development process, and to do


275
00:07:32,226 --> 00:07:33,776
that, we need to consider what a


276
00:07:33,776 --> 00:07:35,196
good testing model looks like.


277
00:07:35,596 --> 00:07:39,436
Earlier this week in the testing


278
00:07:39,436 --> 00:07:40,966
and Xcode session, we heard


279
00:07:40,966 --> 00:07:42,336
about the Pyramid model as a


280
00:07:42,336 --> 00:07:43,956
guide for how to structure a


281
00:07:43,956 --> 00:07:45,606
maintainable automation test


282
00:07:45,606 --> 00:07:45,856
suite.


283
00:07:46,966 --> 00:07:48,596
A good testing model balances


284
00:07:48,676 --> 00:07:50,596
thoroughness, quality, and


285
00:07:50,596 --> 00:07:52,886
execution speed and consists of


286
00:07:52,886 --> 00:07:54,456
a large number of focused unit


287
00:07:55,586 --> 00:07:55,766
tests.


288
00:07:56,146 --> 00:07:57,406
These are where it's okay to


289
00:07:57,406 --> 00:07:58,936
optimize for fast execution


290
00:07:58,936 --> 00:08:00,566
times, and because we want to


291
00:08:00,566 --> 00:08:02,796
isolate features here, it's okay


292
00:08:02,796 --> 00:08:03,936
to run these in clean room


293
00:08:03,936 --> 00:08:04,516
conditions.


294
00:08:05,346 --> 00:08:06,416
You might be using these to look


295
00:08:06,416 --> 00:08:07,526
for functional regressions.


296
00:08:08,876 --> 00:08:10,196
These are complemented by a


297
00:08:10,196 --> 00:08:11,696
smaller number of integration


298
00:08:11,696 --> 00:08:13,606
tests targeting a discrete set


299
00:08:13,606 --> 00:08:15,676
of classes in your app.


300
00:08:15,846 --> 00:08:17,706
Integration tests check that


301
00:08:17,706 --> 00:08:19,146
your app's subsystems work


302
00:08:19,146 --> 00:08:20,766
together from the perspective of


303
00:08:20,766 --> 00:08:21,176
a user.


304
00:08:22,176 --> 00:08:23,556
Since these test results will


305
00:08:23,556 --> 00:08:25,026
more closely reflect real-world


306
00:08:25,026 --> 00:08:26,766
use, they may come with an


307
00:08:26,766 --> 00:08:27,876
increase variance.


308
00:08:28,196 --> 00:08:29,356
So you should be prepared to


309
00:08:29,356 --> 00:08:30,736
triage the failure reasons in


310
00:08:30,736 --> 00:08:32,596
more depth and not just consider


311
00:08:32,596 --> 00:08:34,166
these tests flaky.


312
00:08:34,746 --> 00:08:38,976
And finally, the suite is topped


313
00:08:38,976 --> 00:08:40,775
off with user interface tests or


314
00:08:40,775 --> 00:08:42,876
UI tests, which exercise the app


315
00:08:42,946 --> 00:08:44,256
in a way very similar to how


316
00:08:44,256 --> 00:08:46,176
users would interact with it.


317
00:08:46,396 --> 00:08:48,226
This is your place to validate


318
00:08:48,226 --> 00:08:49,586
that all the pieces of your app


319
00:08:49,586 --> 00:08:51,346
are hooked up and interact


320
00:08:51,346 --> 00:08:52,496
correctly with external


321
00:08:52,496 --> 00:08:53,696
resources like the network.


322
00:08:54,336 --> 00:08:55,556
So this is where your most


323
00:08:55,556 --> 00:08:56,916
representative tests might be.


324
00:08:57,856 --> 00:08:59,586
At the same time, this is where


325
00:08:59,586 --> 00:09:00,526
you might see the highest


326
00:09:00,526 --> 00:09:02,456
variance in your results, and


327
00:09:02,456 --> 00:09:04,106
because of that, it might feel


328
00:09:04,226 --> 00:09:06,246
tempting to place more focus on


329
00:09:06,246 --> 00:09:08,826
unit tests, and that might lead


330
00:09:08,826 --> 00:09:10,086
you into a false sense of


331
00:09:10,086 --> 00:09:11,176
security about your app's


332
00:09:11,176 --> 00:09:11,636
behavior.


333
00:09:12,726 --> 00:09:14,406
When applied well, this testing


334
00:09:14,406 --> 00:09:15,306
model can provide a


335
00:09:15,306 --> 00:09:17,026
comprehensive picture of how


336
00:09:17,026 --> 00:09:17,986
your app's code base is


337
00:09:17,986 --> 00:09:18,556
functioning.


338
00:09:19,656 --> 00:09:20,896
This is great for the testing


339
00:09:20,896 --> 00:09:22,376
coverage enables you to do, but


340
00:09:22,596 --> 00:09:24,096
you need to be mindful of the


341
00:09:24,146 --> 00:09:25,356
testing you might be leaving out


342
00:09:25,646 --> 00:09:26,986
in your integration and UI


343
00:09:26,986 --> 00:09:27,526
suites.


344
00:09:28,676 --> 00:09:30,026
Putting your focus entirely on


345
00:09:30,026 --> 00:09:31,286
unit testing comes with clean


346
00:09:31,286 --> 00:09:32,886
room conditions, and while that


347
00:09:32,886 --> 00:09:34,766
helps you find regressions, you


348
00:09:34,766 --> 00:09:36,046
might be leaving out real-world


349
00:09:36,046 --> 00:09:37,316
behavior that you can make


350
00:09:37,356 --> 00:09:38,556
progressions under for your


351
00:09:38,556 --> 00:09:39,016
users.


352
00:09:39,636 --> 00:09:44,556
Now, it's easy to fall into the


353
00:09:44,556 --> 00:09:46,106
habit of clean room testing


354
00:09:46,356 --> 00:09:47,416
because it gives us many of the


355
00:09:47,416 --> 00:09:48,746
qualities we like to see,


356
00:09:48,996 --> 00:09:50,906
repeatable results, low


357
00:09:50,906 --> 00:09:51,586
variance.


358
00:09:51,966 --> 00:09:53,296
These translate into reduced


359
00:09:53,376 --> 00:09:54,416
test flakiness.


360
00:09:55,276 --> 00:09:56,586
Now we want your functionality


361
00:09:56,586 --> 00:09:57,496
and performance wins to


362
00:09:57,496 --> 00:09:58,866
translate into the real world,


363
00:09:58,866 --> 00:10:00,016
so you're going to need the


364
00:10:00,056 --> 00:10:01,216
right developer tools that also


365
00:10:01,216 --> 00:10:01,966
have these qualities.


366
00:10:04,216 --> 00:10:05,946
Variance can be a consequence of


367
00:10:05,946 --> 00:10:07,476
realism, and it deserves the


368
00:10:07,476 --> 00:10:09,176
same attention you would give to


369
00:10:09,176 --> 00:10:10,876
testing and triaging those tough


370
00:10:10,876 --> 00:10:12,096
edge case in your source.


371
00:10:13,216 --> 00:10:14,636
As you apply the Pyramid model


372
00:10:14,816 --> 00:10:16,016
to different parts of your


373
00:10:16,016 --> 00:10:17,416
development workflow, you'll


374
00:10:17,416 --> 00:10:19,246
find the right places to create


375
00:10:19,246 --> 00:10:20,676
quality checkpoints that work


376
00:10:20,676 --> 00:10:22,636
for you and your team, like


377
00:10:22,636 --> 00:10:24,106
making sure that all unit tests


378
00:10:24,156 --> 00:10:25,766
pass before you merge, so you


379
00:10:25,766 --> 00:10:26,946
can find regressions early.


380
00:10:28,016 --> 00:10:29,386
Now, while integration and UI


381
00:10:29,386 --> 00:10:30,936
tests might not fit in well as


382
00:10:30,936 --> 00:10:32,286
an early checkpoint because of


383
00:10:32,286 --> 00:10:33,556
the variance that's incurred


384
00:10:33,906 --> 00:10:35,066
when you bring in real-world


385
00:10:35,066 --> 00:10:36,856
conditions, they must still have


386
00:10:36,856 --> 00:10:38,086
a place in your process.


387
00:10:38,906 --> 00:10:40,006
If you make sure you're running


388
00:10:40,006 --> 00:10:41,226
them at appropriate times,


389
00:10:41,556 --> 00:10:42,896
you'll be able to characterize


390
00:10:42,896 --> 00:10:44,356
your app's behavior and find


391
00:10:44,356 --> 00:10:45,916
areas of improvement and


392
00:10:45,916 --> 00:10:47,076
behavioral progressions that you


393
00:10:47,076 --> 00:10:47,976
can make.


394
00:10:48,876 --> 00:10:50,266
So, now that we've made room for


395
00:10:50,266 --> 00:10:51,656
real-world conditions, you can


396
00:10:51,656 --> 00:10:53,016
bring back and focus on the


397
00:10:53,016 --> 00:10:54,186
testing you might have skipped


398
00:10:54,186 --> 00:10:55,836
earlier, like those network


399
00:10:56,396 --> 00:10:56,546
ones.


400
00:10:57,916 --> 00:10:59,376
So, we've seen some approaches


401
00:10:59,376 --> 00:11:02,276
to do this like using custom


402
00:11:02,276 --> 00:11:03,446
routers that condition the


403
00:11:03,446 --> 00:11:05,166
network infrastructure, and this


404
00:11:05,166 --> 00:11:06,646
can be really successful when


405
00:11:06,646 --> 00:11:07,156
done right.


406
00:11:08,076 --> 00:11:09,416
But this can also be really


407
00:11:09,416 --> 00:11:11,036
difficult to do, especially if


408
00:11:11,036 --> 00:11:12,256
you're a developer just starting


409
00:11:12,256 --> 00:11:12,476
out.


410
00:11:13,406 --> 00:11:14,676
Even with a good testing model


411
00:11:14,736 --> 00:11:16,636
and a strong focus on triage, to


412
00:11:16,636 --> 00:11:18,086
conduct real-world testing,


413
00:11:18,336 --> 00:11:19,816
you'll need good and reliable


414
00:11:19,816 --> 00:11:20,536
developer tools.


415
00:11:21,526 --> 00:11:23,666
So, if you're targeting macOS


416
00:11:23,666 --> 00:11:24,886
with your app, you should


417
00:11:24,886 --> 00:11:26,316
download and use the Network


418
00:11:26,316 --> 00:11:27,546
Link Conditioner Preference


419
00:11:27,546 --> 00:11:27,866
pane.


420
00:11:28,476 --> 00:11:29,636
You can use it to vary the


421
00:11:29,636 --> 00:11:31,356
network type and see how your


422
00:11:31,356 --> 00:11:32,976
app behaves under networks like


423
00:11:33,056 --> 00:11:34,766
3G or EDGE.


424
00:11:37,636 --> 00:11:39,386
The Network Link Conditioner is


425
00:11:39,386 --> 00:11:41,226
available on iOS from the


426
00:11:41,226 --> 00:11:43,116
developer settings menu on


427
00:11:43,116 --> 00:11:44,226
devices that you're using for


428
00:11:44,226 --> 00:11:44,746
development.


429
00:11:45,336 --> 00:11:46,856
From here, you can vary the


430
00:11:46,856 --> 00:11:48,796
network type between contended


431
00:11:48,796 --> 00:11:50,516
or more representative presets


432
00:11:50,936 --> 00:11:52,196
and design your app for them


433
00:11:52,336 --> 00:11:53,756
without the need to set up or


434
00:11:53,756 --> 00:11:54,576
change the network


435
00:11:54,576 --> 00:11:55,236
infrastructure.


436
00:11:56,176 --> 00:11:57,446
This is a reliable and


437
00:11:57,446 --> 00:11:59,226
repeatable device supported way


438
00:11:59,486 --> 00:12:00,826
to run your app under different


439
00:12:00,826 --> 00:12:01,316
networks.


440
00:12:02,406 --> 00:12:03,716
And if you have custom needs,


441
00:12:03,926 --> 00:12:05,356
you can also create customized


442
00:12:05,356 --> 00:12:07,236
presets for specific types of


443
00:12:07,296 --> 00:12:09,206
bandwidth, packet loss, and


444
00:12:09,206 --> 00:12:10,306
latency that you would like to


445
00:12:10,306 --> 00:12:10,966
design for.


446
00:12:11,836 --> 00:12:13,146
This is great to check how your


447
00:12:13,146 --> 00:12:14,626
app behaves in specific


448
00:12:14,626 --> 00:12:15,316
environments.


449
00:12:15,856 --> 00:12:18,686
In Xcode 11, we've brought the


450
00:12:18,686 --> 00:12:20,506
ability to activate and vary


451
00:12:20,506 --> 00:12:21,856
different network types to the


452
00:12:21,856 --> 00:12:23,806
devices and simulators window so


453
00:12:23,806 --> 00:12:25,316
that you can start easily and


454
00:12:25,316 --> 00:12:27,226
reliably including realism in


455
00:12:27,226 --> 00:12:28,316
your design process.


456
00:12:28,796 --> 00:12:31,066
You'll see a new device


457
00:12:31,066 --> 00:12:32,826
condition section on the lower


458
00:12:32,826 --> 00:12:33,606
part of the window.


459
00:12:34,256 --> 00:12:35,696
From here, you can put your


460
00:12:35,696 --> 00:12:36,736
device into a more


461
00:12:36,736 --> 00:12:37,636
representative state.


462
00:12:38,846 --> 00:12:40,046
If you want a network link,


463
00:12:40,256 --> 00:12:41,306
you'll see all of the network


464
00:12:41,306 --> 00:12:42,636
types from earlier as well as


465
00:12:42,636 --> 00:12:44,066
new profiles to vary the network


466
00:12:44,066 --> 00:12:45,076
quality itself.


467
00:12:46,436 --> 00:12:47,786
This means you can have your


468
00:12:47,786 --> 00:12:49,706
device and your app behave as if


469
00:12:49,706 --> 00:12:51,686
it's running on networks like 2G


470
00:12:51,686 --> 00:12:54,576
or EDGE, 3G or LTE, or different


471
00:12:54,576 --> 00:12:55,356
types of Wi-Fi.


472
00:12:56,046 --> 00:12:57,396
You can even choose the quality


473
00:12:57,396 --> 00:12:58,896
of the network type like a good


474
00:12:58,896 --> 00:13:00,926
EDGE network or an average 3G


475
00:13:00,926 --> 00:13:01,166
one.


476
00:13:01,846 --> 00:13:03,486
Now, people do use connections


477
00:13:03,486 --> 00:13:05,176
like these, so I hope you find


478
00:13:05,176 --> 00:13:06,866
it helpful to see how your apps


479
00:13:06,866 --> 00:13:08,606
work with them too and look for


480
00:13:08,606 --> 00:13:09,696
where you can find behavioral


481
00:13:09,696 --> 00:13:10,296
progressions.


482
00:13:11,466 --> 00:13:12,546
Once you've picked a condition


483
00:13:12,546 --> 00:13:13,826
you want to activate, click


484
00:13:13,826 --> 00:13:15,176
start from the devices window.


485
00:13:16,116 --> 00:13:18,256
Now, these conditions are system


486
00:13:18,256 --> 00:13:19,946
wide, so you can expect


487
00:13:19,946 --> 00:13:21,156
everything to start reacting


488
00:13:21,156 --> 00:13:23,346
differently, including your app.


489
00:13:24,386 --> 00:13:26,246
On devices which have conditions


490
00:13:26,246 --> 00:13:28,186
active, you'll see a new gray


491
00:13:28,186 --> 00:13:29,266
status indicator.


492
00:13:31,056 --> 00:13:32,626
Although activating a network


493
00:13:32,626 --> 00:13:34,186
type affects the whole system,


494
00:13:34,396 --> 00:13:35,656
the UI indicators for your


495
00:13:35,656 --> 00:13:37,126
network will remain unchanged.


496
00:13:38,276 --> 00:13:39,316
You should also know that an


497
00:13:39,316 --> 00:13:41,106
activated network condition is a


498
00:13:41,106 --> 00:13:43,456
ceiling or a cap on your network


499
00:13:43,556 --> 00:13:45,166
type, and it cannot upgrade your


500
00:13:45,166 --> 00:13:46,376
network performance from where


501
00:13:46,376 --> 00:13:47,456
it actually is in the real


502
00:13:47,456 --> 00:13:47,816
world.


503
00:13:49,516 --> 00:13:50,996
From the device, if you tap the


504
00:13:50,996 --> 00:13:52,706
gray status icon, you'll see a


505
00:13:52,706 --> 00:13:54,046
prompt telling you about the


506
00:13:54,046 --> 00:13:55,726
active condition as well as an


507
00:13:55,726 --> 00:13:57,756
option to stop it, and if your


508
00:13:57,756 --> 00:13:59,496
device is disconnected from


509
00:13:59,496 --> 00:14:00,716
Xcode, the condition is


510
00:14:00,716 --> 00:14:01,756
automatically stopped.


511
00:14:03,076 --> 00:14:04,426
To show you how you can use


512
00:14:04,426 --> 00:14:06,026
network link device conditions


513
00:14:06,246 --> 00:14:07,696
to find areas of progression in


514
00:14:07,696 --> 00:14:08,936
your app, I'm going to bring


515
00:14:08,936 --> 00:14:09,976
Ilya back on stage.


516
00:14:10,516 --> 00:14:12,656
[ Applause ]


517
00:14:13,156 --> 00:14:14,406
>> We often expect our apps to


518
00:14:14,406 --> 00:14:16,006
behave slightly worse on a


519
00:14:16,006 --> 00:14:17,026
slightly worse network link.


520
00:14:17,056 --> 00:14:18,656
But it's important for you to be


521
00:14:18,656 --> 00:14:19,716
asking yourselves whether the


522
00:14:19,716 --> 00:14:21,136
behavior is as bad as it really


523
00:14:21,136 --> 00:14:21,606
needs to be.


524
00:14:22,156 --> 00:14:23,266
Could it be better?


525
00:14:23,626 --> 00:14:24,616
Are there progression we could


526
00:14:24,616 --> 00:14:25,876
make under an adverse or


527
00:14:25,876 --> 00:14:27,246
different network.


528
00:14:28,436 --> 00:14:30,016
Here's a mind-blowing example


529
00:14:30,576 --> 00:14:30,676
app.


530
00:14:30,936 --> 00:14:31,876
We can launch this to look at


531
00:14:31,876 --> 00:14:33,066
baseline behavior for a network


532
00:14:33,066 --> 00:14:34,386
connection with an ideal lab


533
00:14:34,386 --> 00:14:34,856
condition.


534
00:14:36,016 --> 00:14:38,006
This app probes an endpoint we


535
00:14:38,006 --> 00:14:39,636
set up just for this demo to see


536
00:14:39,636 --> 00:14:40,456
how long it takes to make the


537
00:14:40,456 --> 00:14:40,866
connection.


538
00:14:41,646 --> 00:14:43,956
We see that on average this


539
00:14:43,956 --> 00:14:45,176
connection takes around 150


540
00:14:45,176 --> 00:14:45,786
milliseconds.


541
00:14:46,346 --> 00:14:46,946
We can think of this as


542
00:14:46,946 --> 00:14:48,506
analogous to something like


543
00:14:48,576 --> 00:14:49,756
requiring secure login or


544
00:14:49,756 --> 00:14:50,466
streaming content from a


545
00:14:50,466 --> 00:14:50,866
website.


546
00:14:51,606 --> 00:14:52,636
And this looks great.


547
00:14:52,636 --> 00:14:54,516
If we're doing UI testing in our


548
00:14:54,516 --> 00:14:55,746
lab, we would assume that


549
00:14:55,746 --> 00:14:56,826
everything is working smoothly,


550
00:14:56,826 --> 00:14:57,846
and we have no problems.


551
00:14:58,716 --> 00:15:00,656
Now let's see what happens if we


552
00:15:00,656 --> 00:15:01,416
turn on the Network Link


553
00:15:01,416 --> 00:15:02,466
Conditioner from the Xcode


554
00:15:02,466 --> 00:15:03,116
devices window.


555
00:15:04,616 --> 00:15:07,856
This is an average 3G network


556
00:15:07,856 --> 00:15:08,846
connection in this example.


557
00:15:10,266 --> 00:15:11,856
Let's see what happens now.


558
00:15:13,436 --> 00:15:15,886
When we run the probe again, we


559
00:15:15,886 --> 00:15:17,746
see it takes longer, in this


560
00:15:17,746 --> 00:15:19,766
case, on average around a little


561
00:15:19,766 --> 00:15:21,476
over 750 milliseconds.


562
00:15:22,406 --> 00:15:23,226
This might not be all that


563
00:15:23,226 --> 00:15:24,676
surprising because after all a


564
00:15:24,676 --> 00:15:26,326
3G network is slower when


565
00:15:26,326 --> 00:15:27,666
compared to something like LTE


566
00:15:27,666 --> 00:15:28,156
or Wi-Fi.


567
00:15:29,156 --> 00:15:30,456
But the important thing to note


568
00:15:30,456 --> 00:15:32,436
is as we said before this is the


569
00:15:32,536 --> 00:15:34,186
actual network many of your


570
00:15:34,186 --> 00:15:34,826
users will see.


571
00:15:35,526 --> 00:15:36,916
What can we do to improve this


572
00:15:36,916 --> 00:15:38,236
experience for them?


573
00:15:39,216 --> 00:15:41,156
So you probably noticed just


574
00:15:41,156 --> 00:15:42,406
above the run probe button we


575
00:15:42,406 --> 00:15:43,526
have these two switches which


576
00:15:43,526 --> 00:15:45,356
are disabled for Optimistic DNS and


577
00:15:45,356 --> 00:15:46,206
TLS 1.3.


578
00:15:46,886 --> 00:15:47,996
Let's turn them on and see what


579
00:15:47,996 --> 00:15:48,426
happens.


580
00:15:48,916 --> 00:15:53,106
And now as we turn them on and


581
00:15:53,106 --> 00:15:54,426
run the probe again, we see an


582
00:15:54,426 --> 00:15:56,166
immediate improvement, around 33


583
00:15:56,166 --> 00:15:58,776
percent faster.


584
00:15:58,876 --> 00:16:00,826
Simply by testing this app with


585
00:16:00,826 --> 00:16:01,666
the Network Link Conditioner


586
00:16:01,666 --> 00:16:03,876
active, we explicitly noted that


587
00:16:03,876 --> 00:16:04,816
there is a significant


588
00:16:04,816 --> 00:16:06,036
performance loss when we have a


589
00:16:06,036 --> 00:16:08,266
slower network like 3G or when


590
00:16:08,266 --> 00:16:09,486
compared to a faster one like


591
00:16:09,486 --> 00:16:10,366
Wi-Fi or LTE.


592
00:16:11,716 --> 00:16:13,006
This told us that we should take


593
00:16:13,006 --> 00:16:14,386
into account these new features


594
00:16:14,716 --> 00:16:15,956
and use them to proactively


595
00:16:16,046 --> 00:16:17,646
improve performance even under


596
00:16:17,816 --> 00:16:18,966
realistic network conditions.


597
00:16:21,756 --> 00:16:22,906
By running Network Link


598
00:16:22,906 --> 00:16:24,296
Conditioner, you'll notice some


599
00:16:24,296 --> 00:16:25,306
behaviors are worse than they


600
00:16:25,306 --> 00:16:26,966
need to be whereas previously


601
00:16:26,966 --> 00:16:27,536
you might not have.


602
00:16:28,246 --> 00:16:29,426
Here are just a few things you


603
00:16:29,426 --> 00:16:30,716
can do to proactively improve


604
00:16:30,716 --> 00:16:31,656
the overall experience.


605
00:16:32,756 --> 00:16:34,306
First, do set reasonable


606
00:16:34,306 --> 00:16:34,806
timeouts.


607
00:16:35,726 --> 00:16:37,316
That is, timeout when you stop


608
00:16:37,316 --> 00:16:38,876
making progress, not just when


609
00:16:38,876 --> 00:16:39,776
progress takes too long.


610
00:16:40,366 --> 00:16:42,576
As we said before, if your users


611
00:16:42,576 --> 00:16:44,056
are at 3G network, you might be


612
00:16:44,056 --> 00:16:45,376
happy to wait longer for content


613
00:16:45,376 --> 00:16:45,676
to load.


614
00:16:46,356 --> 00:16:47,576
An arbitrary timeout will be a


615
00:16:47,576 --> 00:16:49,516
worse user experience for them.


616
00:16:49,786 --> 00:16:52,786
Additionally, do use HTTP/2 and


617
00:16:52,786 --> 00:16:53,966
do avoid reachability checks


618
00:16:54,046 --> 00:16:54,796
whenever possible.


619
00:16:55,306 --> 00:16:56,556
Instead, just try to use a


620
00:16:56,556 --> 00:16:57,956
network and do what you can to


621
00:16:57,956 --> 00:16:59,366
make sure your app works well


622
00:16:59,366 --> 00:17:00,406
under as many network conditions


623
00:17:00,406 --> 00:17:00,946
as possible.


624
00:17:01,636 --> 00:17:03,096
To learn more about what else


625
00:17:03,096 --> 00:17:04,586
you can do, please see these two


626
00:17:04,586 --> 00:17:06,646
sessions from last year's WWDC


627
00:17:06,646 --> 00:17:07,846
as well as Advances in


628
00:17:07,846 --> 00:17:08,976
Networking parts one and two


629
00:17:09,046 --> 00:17:09,776
from earlier this week.


630
00:17:11,876 --> 00:17:14,096
>> So, get conditioning.


631
00:17:14,126 --> 00:17:16,665
You want to start considering


632
00:17:16,665 --> 00:17:18,136
real-world network usage in your


633
00:17:18,646 --> 00:17:18,713
app.


634
00:17:18,906 --> 00:17:20,076
You want to use network link


635
00:17:20,076 --> 00:17:21,226
device conditions to


636
00:17:21,226 --> 00:17:22,915
characterize your app's behavior


637
00:17:23,026 --> 00:17:24,626
under that usage and ask


638
00:17:24,626 --> 00:17:26,346
yourselves, is this acceptable


639
00:17:26,346 --> 00:17:28,336
performance or can it be better.


640
00:17:29,066 --> 00:17:30,456
We recommend that you test with


641
00:17:30,456 --> 00:17:32,206
at least 3G networks and look


642
00:17:32,206 --> 00:17:33,156
for the progressions that you


643
00:17:33,156 --> 00:17:33,566
can make.


644
00:17:34,216 --> 00:17:35,176
You want to vary both the


645
00:17:35,176 --> 00:17:37,246
network type and its quality to


646
00:17:37,246 --> 00:17:38,626
see if you're still providing a


647
00:17:38,626 --> 00:17:40,326
good experience and then you can


648
00:17:40,326 --> 00:17:41,666
lock in those performance wins


649
00:17:41,876 --> 00:17:43,196
by making this a part of your


650
00:17:43,196 --> 00:17:45,146
integration and UI test runs.


651
00:17:45,506 --> 00:17:49,426
Now, I want to talk about


652
00:17:49,966 --> 00:17:51,136
varying temperatures.


653
00:17:52,216 --> 00:17:53,946
People like to go outdoors and


654
00:17:53,946 --> 00:17:55,146
use their devices on a sunny


655
00:17:55,146 --> 00:17:55,476
day.


656
00:17:56,216 --> 00:17:57,636
They might head to coffee shops


657
00:17:57,636 --> 00:17:59,106
and use personal hotspot while


658
00:17:59,106 --> 00:18:00,546
iPhone is wirelessly charging.


659
00:18:01,546 --> 00:18:03,366
In these situations, devices


660
00:18:03,366 --> 00:18:05,056
will start to feel warmer, and


661
00:18:05,056 --> 00:18:05,976
that's normal behavior.


662
00:18:06,536 --> 00:18:08,056
Some thermal conditions can


663
00:18:08,056 --> 00:18:09,996
cause iOS devices to change


664
00:18:09,996 --> 00:18:12,016
their behavior or performance in


665
00:18:12,016 --> 00:18:12,916
order to regulate their


666
00:18:12,916 --> 00:18:13,476
temperature.


667
00:18:14,006 --> 00:18:16,786
And temperature can vary for any


668
00:18:16,786 --> 00:18:18,336
number of reasons, whether it's


669
00:18:18,336 --> 00:18:19,846
an increase in work done by the


670
00:18:19,846 --> 00:18:22,396
device or environmental effects


671
00:18:22,616 --> 00:18:24,186
like exposure to direct sunlight


672
00:18:25,086 --> 00:18:25,756
and many more.


673
00:18:27,156 --> 00:18:28,246
All of these are normal


674
00:18:28,246 --> 00:18:30,846
scenarios, and iOS subsystems


675
00:18:30,846 --> 00:18:32,546
react to changing temperatures


676
00:18:32,836 --> 00:18:34,276
to regulate the impact of those


677
00:18:34,276 --> 00:18:34,816
effects.


678
00:18:35,366 --> 00:18:37,406
But what's missing is for your


679
00:18:37,406 --> 00:18:38,716
app to work well under changing


680
00:18:38,716 --> 00:18:40,706
temperatures and how you react


681
00:18:40,706 --> 00:18:41,296
to them too.


682
00:18:42,836 --> 00:18:44,356
Now, when certain thresholds are


683
00:18:44,356 --> 00:18:45,746
exceeded, for example, if the


684
00:18:45,746 --> 00:18:47,436
device is left in a hot car for


685
00:18:47,436 --> 00:18:49,376
a prolonged time, users might


686
00:18:49,376 --> 00:18:50,586
see this temperature warning


687
00:18:50,586 --> 00:18:50,956
screen.


688
00:18:51,916 --> 00:18:53,546
At this point, they can no


689
00:18:53,546 --> 00:18:55,066
longer interact with your apps.


690
00:18:55,946 --> 00:18:57,496
Part of the reason this happens


691
00:18:57,776 --> 00:18:58,986
is to provide users with the


692
00:18:58,986 --> 00:19:00,676
crucial ability to make


693
00:19:00,676 --> 00:19:02,066
emergency calls should they need


694
00:19:02,066 --> 00:19:02,636
to do so.


695
00:19:04,076 --> 00:19:05,856
Now, the system is doing what it


696
00:19:05,856 --> 00:19:07,596
can to limit its energy impact,


697
00:19:07,856 --> 00:19:09,606
which effects heat and battery


698
00:19:09,606 --> 00:19:11,796
life, and your app is a resident


699
00:19:11,796 --> 00:19:13,316
of the system as well, and it's


700
00:19:13,316 --> 00:19:14,576
important that you take into


701
00:19:14,576 --> 00:19:16,396
account its energy impact too.


702
00:19:17,416 --> 00:19:18,886
To do this, you can start


703
00:19:18,886 --> 00:19:20,076
changing your app's behavior


704
00:19:20,076 --> 00:19:21,446
dynamically when you're in a


705
00:19:21,446 --> 00:19:23,106
different thermal state.


706
00:19:23,916 --> 00:19:25,846
By designing defensively, you


707
00:19:25,846 --> 00:19:27,396
can reduce your app's energy


708
00:19:27,396 --> 00:19:29,156
impact by turning off background


709
00:19:29,156 --> 00:19:30,276
work, which contributes to


710
00:19:30,276 --> 00:19:31,416
higher thermal states.


711
00:19:32,446 --> 00:19:33,936
You can register for thermal


712
00:19:33,936 --> 00:19:35,906
state change notifications and


713
00:19:35,906 --> 00:19:37,256
look up which state the device


714
00:19:37,256 --> 00:19:39,916
reports to your app and consider


715
00:19:39,916 --> 00:19:41,646
scenarios that are normal like


716
00:19:41,646 --> 00:19:44,246
device warming, because the


717
00:19:44,246 --> 00:19:45,596
system knows how it should react


718
00:19:45,696 --> 00:19:46,836
to an increase in temperature.


719
00:19:47,696 --> 00:19:49,056
But your app knows more details


720
00:19:49,056 --> 00:19:50,546
about the work it's doing and


721
00:19:50,546 --> 00:19:52,366
how that work should react to a


722
00:19:52,366 --> 00:19:53,726
higher thermal state while


723
00:19:53,726 --> 00:19:55,266
maintaining a good experience.


724
00:19:56,916 --> 00:19:57,886
So, let's take a look at these


725
00:19:57,886 --> 00:19:58,486
thermal states that you might


726
00:19:58,486 --> 00:19:58,976
see reported.


727
00:20:00,156 --> 00:20:02,706
At the nominal state, the device


728
00:20:02,706 --> 00:20:03,676
is at normal operating


729
00:20:03,676 --> 00:20:04,886
temperatures, and there's no


730
00:20:04,886 --> 00:20:06,126
need for any corrective action


731
00:20:06,126 --> 00:20:07,246
from your app.


732
00:20:07,906 --> 00:20:09,966
At the first state, we recommend


733
00:20:10,006 --> 00:20:11,516
that you proactively start some


734
00:20:11,516 --> 00:20:13,116
energy saving measures so that


735
00:20:13,116 --> 00:20:14,226
you're not contributing


736
00:20:14,356 --> 00:20:15,666
significantly to an overall


737
00:20:15,666 --> 00:20:16,216
increase.


738
00:20:17,216 --> 00:20:18,896
When iOS sees thermal state


739
00:20:18,896 --> 00:20:20,446
fair, we start to pause


740
00:20:20,446 --> 00:20:21,806
discretionary background work


741
00:20:22,006 --> 00:20:23,256
like photos analysis.


742
00:20:23,726 --> 00:20:26,406
When the device reports a


743
00:20:26,406 --> 00:20:28,146
serious thermal state, system


744
00:20:28,146 --> 00:20:29,566
performance will be impacted,


745
00:20:29,906 --> 00:20:30,946
and your app should start


746
00:20:30,946 --> 00:20:32,446
stronger energy saving measures


747
00:20:32,656 --> 00:20:34,546
and reduce heavy CPU usage,


748
00:20:34,846 --> 00:20:36,316
graphics, and I/O.


749
00:20:37,056 --> 00:20:38,546
At this point, you should use


750
00:20:38,546 --> 00:20:40,816
lower quality visual effects.


751
00:20:41,536 --> 00:20:43,016
Some measures we take on the


752
00:20:43,016 --> 00:20:44,366
system include lowering the


753
00:20:44,366 --> 00:20:46,126
frame rate of ARKit apps and


754
00:20:46,126 --> 00:20:47,746
Facetime so that they're less


755
00:20:47,746 --> 00:20:48,306
intensive.


756
00:20:48,956 --> 00:20:50,456
And if a user is restoring from


757
00:20:50,456 --> 00:20:52,096
an iCloud backup, they'll find


758
00:20:52,096 --> 00:20:53,166
that it will be paused at this


759
00:20:53,166 --> 00:20:54,536
state until the device cools


760
00:20:54,536 --> 00:20:54,816
down.


761
00:20:55,906 --> 00:20:57,706
And at thermal state critical,


762
00:20:58,076 --> 00:20:59,246
your app should stop using


763
00:20:59,246 --> 00:21:00,536
peripherals such as the camera.


764
00:21:01,236 --> 00:21:02,696
If you're ending up on the top


765
00:21:02,696 --> 00:21:03,886
of the list on the battery


766
00:21:03,886 --> 00:21:05,636
impact screen, users might even


767
00:21:05,636 --> 00:21:08,036
consider deleting your app.


768
00:21:08,096 --> 00:21:09,886
Together with the system, your


769
00:21:09,886 --> 00:21:11,556
app should dynamically react to


770
00:21:11,556 --> 00:21:13,116
these changes so that you can


771
00:21:13,116 --> 00:21:14,446
continue to maintain a good


772
00:21:14,446 --> 00:21:16,096
experience while keeping your


773
00:21:16,096 --> 00:21:17,776
energy impact low.


774
00:21:18,796 --> 00:21:20,276
To learn more about the state


775
00:21:20,276 --> 00:21:21,706
cases and our recommendations,


776
00:21:22,076 --> 00:21:22,966
you can take a look at our


777
00:21:22,966 --> 00:21:23,716
documentation.


778
00:21:24,266 --> 00:21:27,276
And Ilya is now going to show


779
00:21:27,276 --> 00:21:28,426
you how you can dynamically


780
00:21:28,426 --> 00:21:29,666
react to these states in an


781
00:21:29,666 --> 00:21:30,116
example.


782
00:21:30,776 --> 00:21:34,106
>> I'm going to show you a


783
00:21:34,106 --> 00:21:35,936
sample ARKit app based on a


784
00:21:35,936 --> 00:21:37,256
modified version of our existing


785
00:21:37,256 --> 00:21:38,836
sample code handling 3D


786
00:21:38,836 --> 00:21:40,326
interaction and UI controls in


787
00:21:40,366 --> 00:21:41,126
augmented reality.


788
00:21:41,126 --> 00:21:43,666
I took it for a stroll in Apple Park


789
00:21:43,666 --> 00:21:44,986
and it's performing some heavy


790
00:21:44,986 --> 00:21:47,116
background work too.


791
00:21:47,346 --> 00:21:48,376
Here you'll see the app running


792
00:21:48,376 --> 00:21:49,506
under nominal conditions.


793
00:21:49,506 --> 00:21:51,146
You can see the red focus square


794
00:21:51,216 --> 00:21:52,906
turn solid, finding a


795
00:21:52,906 --> 00:21:54,966
surface, and letting me drop a


796
00:21:54,966 --> 00:21:56,706
nice chair and a lamp for myself


797
00:21:56,706 --> 00:21:57,796
to sit in and do some reading.


798
00:21:58,676 --> 00:22:01,346
Now you can see the camera


799
00:22:01,346 --> 00:22:02,856
movement is quite smooth.


800
00:22:02,926 --> 00:22:03,446
Everything stays in place.


801
00:22:03,446 --> 00:22:04,456
Everything stays in place.


802
00:22:04,616 --> 00:22:05,996
Everything is behaving just like


803
00:22:05,996 --> 00:22:08,426
it should be.


804
00:22:08,686 --> 00:22:09,656
Now, let's look at this same app


805
00:22:09,656 --> 00:22:11,656
again, but now I've been outside


806
00:22:11,706 --> 00:22:12,796
for a long time.


807
00:22:12,796 --> 00:22:13,856
I've been sitting in the sun.


808
00:22:13,996 --> 00:22:15,406
It's warm out, and the device


809
00:22:15,406 --> 00:22:15,876
has warmed up.


810
00:22:17,356 --> 00:22:18,346
You'll notice two things.


811
00:22:18,656 --> 00:22:20,446
First, the frame rate is not


812
00:22:20,446 --> 00:22:22,146
quite as good as before, and


813
00:22:22,146 --> 00:22:23,896
second is that despite the fact


814
00:22:23,896 --> 00:22:25,216
that I'm aiming almost straight


815
00:22:25,216 --> 00:22:26,756
at the ground, the focus square


816
00:22:26,756 --> 00:22:27,756
does not have time to find a


817
00:22:27,756 --> 00:22:28,246
surface.


818
00:22:28,936 --> 00:22:30,136
This would not be a great


819
00:22:30,136 --> 00:22:31,596
experience for your users, and


820
00:22:31,596 --> 00:22:32,806
it might be a little frustrating


821
00:22:33,386 --> 00:22:33,926
for them.


822
00:22:34,096 --> 00:22:35,156
So, what can we do about this?


823
00:22:36,446 --> 00:22:39,216
First, you should register for


824
00:22:39,216 --> 00:22:40,566
the ProcessInfo.theremalStateDid


825
00:22:40,566 --> 00:22:41,356
ChangeNotification.


826
00:22:42,476 --> 00:22:43,636
When you receive a thermal state


827
00:22:43,636 --> 00:22:46,386
change notification, read the


828
00:22:46,386 --> 00:22:48,576
actual thermal state and then


829
00:22:48,576 --> 00:22:49,396
react accordingly.


830
00:22:50,156 --> 00:22:51,246
Depending on your state, you


831
00:22:51,246 --> 00:22:53,156
should enable or disable certain


832
00:22:53,156 --> 00:22:54,996
features to ensure smooth


833
00:22:54,996 --> 00:22:57,796
functionality or whatever metric


834
00:22:57,796 --> 00:22:58,586
you find is important.


835
00:22:59,046 --> 00:23:02,036
Here's an example of how you can


836
00:23:02,036 --> 00:23:03,096
register for the thermal state


837
00:23:03,096 --> 00:23:04,516
and then read the thermal state.


838
00:23:04,516 --> 00:23:07,736
And here is how you might choose


839
00:23:07,796 --> 00:23:08,876
to react to the thermal state.


840
00:23:10,156 --> 00:23:11,946
In this scenario, under nominal


841
00:23:11,946 --> 00:23:13,596
and fair, I have all my features


842
00:23:13,596 --> 00:23:13,966
enabled.


843
00:23:14,616 --> 00:23:16,106
In this example, I have face


844
00:23:16,106 --> 00:23:18,046
tracking, person segmentation,


845
00:23:18,176 --> 00:23:19,606
and motion blur all turned on.


846
00:23:19,606 --> 00:23:23,196
As the thermal state increases


847
00:23:23,196 --> 00:23:25,056
to serious, I disable face


848
00:23:25,056 --> 00:23:26,306
tracking and frame semantics,


849
00:23:26,826 --> 00:23:27,736
but I leave motion blur on.


850
00:23:27,736 --> 00:23:31,396
And at critical, I turn off


851
00:23:31,396 --> 00:23:31,716
everything.


852
00:23:32,566 --> 00:23:34,996
Now that we actually react to


853
00:23:34,996 --> 00:23:36,246
thermal states, let's see how


854
00:23:36,246 --> 00:23:37,766
this app behaves again in the


855
00:23:37,766 --> 00:23:38,836
same scenario where we've been


856
00:23:38,836 --> 00:23:41,926
outside for a long time, and we


857
00:23:41,926 --> 00:23:42,746
see it's much better now.


858
00:23:43,496 --> 00:23:44,346
The focus square finds a


859
00:23:44,346 --> 00:23:44,886
surface.


860
00:23:45,016 --> 00:23:46,916
I can drop my chair and my lamp


861
00:23:46,916 --> 00:23:48,486
just like before, and I can get


862
00:23:48,486 --> 00:23:48,996
some reading done.


863
00:23:49,706 --> 00:23:52,496
Now, it's good to code


864
00:23:52,496 --> 00:23:53,986
defensively and to react to


865
00:23:53,986 --> 00:23:55,606
thermal state changes, but you


866
00:23:55,606 --> 00:23:57,036
want to know ahead of time if


867
00:23:57,036 --> 00:23:58,016
this works as you expect.


868
00:23:59,666 --> 00:24:01,826
In general, we can do better by


869
00:24:01,826 --> 00:24:03,516
testing how we expect our app to


870
00:24:03,516 --> 00:24:04,406
behave under varying


871
00:24:04,406 --> 00:24:05,266
temperatures ahead of time.


872
00:24:06,056 --> 00:24:08,006
In other words, you should test


873
00:24:08,006 --> 00:24:08,656
your defenses.


874
00:24:10,096 --> 00:24:12,096
But for something like this, how


875
00:24:12,096 --> 00:24:13,726
do we even go about that?


876
00:24:15,076 --> 00:24:15,966
>> Thanks Ilya.


877
00:24:15,966 --> 00:24:17,806
But the thing is, not all of us


878
00:24:17,806 --> 00:24:18,666
are going to have access to


879
00:24:18,746 --> 00:24:19,416
thermal imaging.


880
00:24:20,616 --> 00:24:22,286
So, just like with network


881
00:24:22,286 --> 00:24:23,716
conditions, we recognize the


882
00:24:23,716 --> 00:24:25,386
challenge in trying to verify


883
00:24:25,386 --> 00:24:26,926
your app's behavior and that


884
00:24:26,926 --> 00:24:28,716
there's high variance in


885
00:24:28,716 --> 00:24:29,766
existing approaches.


886
00:24:30,656 --> 00:24:32,106
We've noticed some methods that


887
00:24:32,106 --> 00:24:33,346
people are taking which we would


888
00:24:33,346 --> 00:24:34,996
not recommend like running a


889
00:24:34,996 --> 00:24:36,456
dummy CPU load to warm the


890
00:24:36,456 --> 00:24:38,226
device, throwing away the first


891
00:24:38,226 --> 00:24:39,566
hour of results, and then


892
00:24:39,566 --> 00:24:41,396
profiling app behavior when the


893
00:24:41,396 --> 00:24:42,126
device is hot.


894
00:24:42,776 --> 00:24:44,526
So, we've been hard at work to


895
00:24:44,526 --> 00:24:45,816
provide a developer tool for


896
00:24:45,816 --> 00:24:47,536
this, and we came up with a way


897
00:24:47,536 --> 00:24:49,306
to reliably change the reported


898
00:24:49,336 --> 00:24:50,676
thermal state on the device


899
00:24:51,056 --> 00:24:52,396
without physically warming it


900
00:24:52,566 --> 00:24:53,836
and still keeping it safe to


901
00:24:53,836 --> 00:24:54,216
use.


902
00:24:54,786 --> 00:24:56,206
And we built that way into


903
00:24:56,206 --> 00:24:58,136
device conditions in Xcode 11.


904
00:24:59,346 --> 00:25:00,806
From the same devices and


905
00:25:00,806 --> 00:25:02,346
simulators window, you can


906
00:25:02,346 --> 00:25:03,986
activate elevated temperature


907
00:25:03,986 --> 00:25:05,806
conditions and have your device


908
00:25:05,806 --> 00:25:07,416
reach different thermal states


909
00:25:07,646 --> 00:25:08,626
without it needing to be


910
00:25:08,626 --> 00:25:09,406
physically warm.


911
00:25:10,346 --> 00:25:11,816
So now, you can quickly and


912
00:25:11,816 --> 00:25:13,436
easily have your device report


913
00:25:13,436 --> 00:25:15,056
the fair state, to test your


914
00:25:15,056 --> 00:25:16,136
proactive energy-saving


915
00:25:16,136 --> 00:25:16,516
measures.


916
00:25:17,346 --> 00:25:19,156
Thermal state serious, to check


917
00:25:19,156 --> 00:25:20,386
that you're reliably lowering


918
00:25:20,386 --> 00:25:21,776
your resource usage and energy


919
00:25:21,776 --> 00:25:23,886
impact, and thermal state


920
00:25:23,886 --> 00:25:25,586
critical, to see that your use


921
00:25:25,586 --> 00:25:27,526
of peripherals do actually stop.


922
00:25:28,546 --> 00:25:29,876
Running one of these causes the


923
00:25:29,876 --> 00:25:31,676
device to behave exactly as if


924
00:25:31,676 --> 00:25:32,906
it were really in that thermal


925
00:25:32,906 --> 00:25:34,986
state, but before you start


926
00:25:34,986 --> 00:25:36,256
using these, there's more you


927
00:25:36,256 --> 00:25:37,736
need to know about how they work


928
00:25:37,736 --> 00:25:38,306
on your device.


929
00:25:38,606 --> 00:25:39,016
Ilya.


930
00:25:39,566 --> 00:25:40,416
>> Thanks Alex.


931
00:25:40,646 --> 00:25:43,426
I'm going to show you more about


932
00:25:43,426 --> 00:25:44,876
how this condition works under


933
00:25:44,876 --> 00:25:45,196
the hood.


934
00:25:45,196 --> 00:25:47,026
You can see a graph here


935
00:25:47,026 --> 00:25:48,246
representing the actual thermal


936
00:25:48,246 --> 00:25:50,396
state of the device, the active


937
00:25:50,396 --> 00:25:52,656
condition if there is any, and


938
00:25:52,656 --> 00:25:53,836
how warm the device actually


939
00:25:53,836 --> 00:25:55,356
feels to the touch, also


940
00:25:55,356 --> 00:25:56,646
represented by a thermometer at


941
00:25:56,646 --> 00:25:57,116
the top right.


942
00:25:57,116 --> 00:25:59,816
Imagine a baseline device on


943
00:25:59,816 --> 00:26:00,186
your desk.


944
00:26:00,726 --> 00:26:01,776
It's at room temperature.


945
00:26:01,776 --> 00:26:03,126
You have no condition active,


946
00:26:03,126 --> 00:26:03,916
and you haven't been using it


947
00:26:03,916 --> 00:26:04,396
for a while.


948
00:26:05,096 --> 00:26:06,526
Here, the thermal state is at


949
00:26:06,526 --> 00:26:06,946
nominal.


950
00:26:07,556 --> 00:26:10,796
If you now activate the serious


951
00:26:10,796 --> 00:26:12,686
thermal profile, the device will


952
00:26:12,686 --> 00:26:14,366
ramp up over time to serious


953
00:26:14,366 --> 00:26:16,956
starting from nominal, reaching


954
00:26:16,956 --> 00:26:19,366
fair, and eventually reaching


955
00:26:19,366 --> 00:26:19,926
serious.


956
00:26:20,676 --> 00:26:21,586
This process will take a few


957
00:26:21,586 --> 00:26:22,056
seconds.


958
00:26:22,876 --> 00:26:24,166
Just like in real life, if you


959
00:26:24,166 --> 00:26:25,256
are subscribed to thermal state


960
00:26:25,256 --> 00:26:26,976
notifications, you'll receive a


961
00:26:26,976 --> 00:26:28,246
notification at fair and at


962
00:26:28,246 --> 00:26:28,816
serious.


963
00:26:29,396 --> 00:26:30,646
Now, there are two important


964
00:26:30,646 --> 00:26:31,986
things to note about this.


965
00:26:32,896 --> 00:26:34,506
The first is that your devices


966
00:26:34,506 --> 00:26:35,796
has not actually warmed up or


967
00:26:35,796 --> 00:26:36,786
changed in temperature as a


968
00:26:36,786 --> 00:26:37,106
result.


969
00:26:37,106 --> 00:26:39,746
The second is that this does not


970
00:26:39,936 --> 00:26:41,606
fix your thermal state, but it


971
00:26:41,606 --> 00:26:42,456
rather acts like a floor.


972
00:26:42,496 --> 00:26:44,776
Let me explain what that means.


973
00:26:45,626 --> 00:26:47,586
Imagine you have your device in


974
00:26:47,586 --> 00:26:49,606
this condition, and you ran some


975
00:26:49,606 --> 00:26:51,376
heavy computational load, or you


976
00:26:51,376 --> 00:26:52,546
just left it out in the sun for


977
00:26:52,546 --> 00:26:52,836
a while.


978
00:26:53,956 --> 00:26:55,666
And now the underlying


979
00:26:55,666 --> 00:26:56,496
temperature is actually


980
00:26:56,496 --> 00:26:56,916
increased.


981
00:26:57,016 --> 00:26:57,816
The device feels warm to the


982
00:26:57,816 --> 00:26:58,096
touch.


983
00:26:59,146 --> 00:27:00,786
Regardless of why, the thermal


984
00:27:00,786 --> 00:27:02,456
state will actually also


985
00:27:02,456 --> 00:27:03,876
increase from serious to


986
00:27:03,876 --> 00:27:04,276
critical.


987
00:27:06,176 --> 00:27:08,026
This is a precaution to ensure


988
00:27:08,026 --> 00:27:09,496
your system still behaves safely


989
00:27:09,976 --> 00:27:10,986
even if you do very heavy


990
00:27:10,986 --> 00:27:11,996
testing under the thermal


991
00:27:11,996 --> 00:27:12,396
condition.


992
00:27:13,046 --> 00:27:14,226
If you then stop using your


993
00:27:14,226 --> 00:27:18,796
device or let it cool down, the


994
00:27:18,796 --> 00:27:20,006
thermal state will return back


995
00:27:20,006 --> 00:27:22,936
down to serious and remain there


996
00:27:23,386 --> 00:27:24,246
until you tear down the


997
00:27:24,246 --> 00:27:26,896
condition, at which point, the


998
00:27:27,026 --> 00:27:28,246
device will ramp from serious to


999
00:27:28,246 --> 00:27:30,116
fair and down to nominal.


1000
00:27:30,966 --> 00:27:32,136
In all these situations, you


1001
00:27:32,276 --> 00:27:33,846
will receive thermal state user


1002
00:27:33,846 --> 00:27:34,546
notifications.


1003
00:27:35,076 --> 00:27:38,656
In Xcode 11, this thermal state


1004
00:27:38,656 --> 00:27:40,326
information is visible in an


1005
00:27:40,326 --> 00:27:41,426
energy gauge in the debugging


1006
00:27:41,426 --> 00:27:41,946
navigator.


1007
00:27:43,196 --> 00:27:44,826
There are two thermal state


1008
00:27:44,826 --> 00:27:46,656
tracks here, both located toward


1009
00:27:46,656 --> 00:27:47,776
the bottom of the energy impact


1010
00:27:47,776 --> 00:27:48,106
section.


1011
00:27:48,596 --> 00:27:50,206
The bottommost track shows the


1012
00:27:50,286 --> 00:27:51,206
actual thermal state of the


1013
00:27:51,206 --> 00:27:52,916
device, color coded for easy


1014
00:27:52,916 --> 00:27:53,596
interpretation.


1015
00:27:54,526 --> 00:27:55,596
Here, you can see the thermal


1016
00:27:55,596 --> 00:27:57,186
state ramping up and then down


1017
00:27:57,236 --> 00:27:59,096
in reaction to the active


1018
00:27:59,096 --> 00:27:59,506
condition.


1019
00:27:59,506 --> 00:28:01,536
You can see in this scenario it


1020
00:28:01,536 --> 00:28:03,146
took around 10 seconds in each


1021
00:28:03,146 --> 00:28:03,486
direction.


1022
00:28:04,616 --> 00:28:06,796
The top track shows the active


1023
00:28:06,796 --> 00:28:08,146
thermal device condition, if


1024
00:28:08,146 --> 00:28:08,536
there is one.


1025
00:28:09,766 --> 00:28:11,816
To show you more about debugging


1026
00:28:11,816 --> 00:28:13,196
and optimizing with Xcode and


1027
00:28:13,196 --> 00:28:13,876
what tools you have at your


1028
00:28:13,876 --> 00:28:15,346
disposal, I'm going to call Jay


1029
00:28:15,346 --> 00:28:15,836
on stage.


1030
00:28:17,516 --> 00:28:25,036
[ Applause ]


1031
00:28:25,536 --> 00:28:26,626
>> Hi everyone.


1032
00:28:27,136 --> 00:28:29,006
I'm Jay. I'm part of the Energy


1033
00:28:29,006 --> 00:28:31,136
TechnologyTteam in Core OS, and


1034
00:28:31,136 --> 00:28:32,446
I'm here to show you how an app


1035
00:28:32,446 --> 00:28:33,906
behaves when the device is


1036
00:28:33,906 --> 00:28:35,336
thermally constrained and what


1037
00:28:35,336 --> 00:28:36,166
can you do about it.


1038
00:28:37,496 --> 00:28:38,706
For the purpose of the demo,


1039
00:28:38,706 --> 00:28:40,036
we're going to use a modified


1040
00:28:40,036 --> 00:28:41,926
version of the Fox 2 app that's


1041
00:28:41,926 --> 00:28:43,226
a publicly released sample for


1042
00:28:43,226 --> 00:28:44,606
SceneKit from a few years back.


1043
00:28:45,816 --> 00:28:46,646
Let's get started.


1044
00:28:47,056 --> 00:28:48,656
I have a device that's running


1045
00:28:48,656 --> 00:28:49,966
the app without any thermal


1046
00:28:49,966 --> 00:28:50,786
condition active.


1047
00:28:51,356 --> 00:28:52,236
Let's see how it loads.


1048
00:28:53,346 --> 00:28:55,106
This is how the app looks.


1049
00:28:56,346 --> 00:28:57,616
First, let's look at the bottom


1050
00:28:57,616 --> 00:28:58,706
left corner of the screen.


1051
00:29:00,026 --> 00:29:01,096
That's the FPS.


1052
00:29:01,356 --> 00:29:02,256
We can look the FPS is


1053
00:29:02,256 --> 00:29:04,056
consistently hitting more than


1054
00:29:04,056 --> 00:29:04,316
30.


1055
00:29:04,766 --> 00:29:08,056
Let's look at the details on the


1056
00:29:08,056 --> 00:29:08,366
app.


1057
00:29:09,296 --> 00:29:11,276
There's a nice vignetting around the app for


1058
00:29:11,276 --> 00:29:12,286
a cinematic effect.


1059
00:29:12,476 --> 00:29:15,106
Let's look at all the details


1060
00:29:15,106 --> 00:29:15,756
inside the app.


1061
00:29:15,756 --> 00:29:17,016
There's just tons of details.


1062
00:29:18,406 --> 00:29:19,466
If you look at the green


1063
00:29:19,466 --> 00:29:20,226
gem on the right side,


1064
00:29:20,706 --> 00:29:21,896
there's a light source on top of


1065
00:29:21,946 --> 00:29:23,166
it, and it's doing a great


1066
00:29:23,166 --> 00:29:23,626
shadow.


1067
00:29:24,906 --> 00:29:25,676
If you look at the moving


1068
00:29:25,676 --> 00:29:27,286
objects, they have light sources


1069
00:29:27,286 --> 00:29:28,776
coming out of them, and they're


1070
00:29:28,776 --> 00:29:30,036
doing great shadows on the fox


1071
00:29:30,036 --> 00:29:30,356
as well.


1072
00:29:30,996 --> 00:29:33,116
Let's look at the lava.


1073
00:29:33,236 --> 00:29:34,586
There's smoke coming out of it,


1074
00:29:34,586 --> 00:29:35,516
and the GPU is doing a


1075
00:29:35,516 --> 00:29:37,066
great job of blending in with


1076
00:29:37,066 --> 00:29:37,716
the background.


1077
00:29:38,556 --> 00:29:39,856
There's a lot of tiny fire


1078
00:29:39,856 --> 00:29:42,466
particles coming out as well.


1079
00:29:42,666 --> 00:29:44,416
This is a great user experience.


1080
00:29:45,276 --> 00:29:46,726
Users really like to use apps


1081
00:29:46,726 --> 00:29:47,206
like these.


1082
00:29:48,116 --> 00:29:49,116
If you're running performance


1083
00:29:49,146 --> 00:29:51,426
tests, they're going to be all


1084
00:29:52,536 --> 00:29:52,666
green.


1085
00:29:52,866 --> 00:29:54,176
Let's switch gears and see what


1086
00:29:54,176 --> 00:29:55,286
happens when you run a thermal


1087
00:29:55,286 --> 00:29:55,836
condition.


1088
00:29:56,406 --> 00:29:59,096
I have another device running


1089
00:29:59,096 --> 00:30:00,596
the same app but with a serious


1090
00:30:00,646 --> 00:30:02,296
thermal condition active, and


1091
00:30:02,296 --> 00:30:03,016
let's see what happens.


1092
00:30:03,736 --> 00:30:06,156
I'm going to switch over to the


1093
00:30:06,156 --> 00:30:06,506
device.


1094
00:30:06,506 --> 00:30:12,396
Now, if you look at the bottom


1095
00:30:12,396 --> 00:30:14,636
left corner of the screen, the


1096
00:30:14,886 --> 00:30:16,436
FPS is down to 17.


1097
00:30:16,966 --> 00:30:18,506
We lost almost half of our


1098
00:30:18,506 --> 00:30:19,136
performance.


1099
00:30:19,696 --> 00:30:21,096
If you look at the moving


1100
00:30:21,096 --> 00:30:23,056
objects, there aren't as


1101
00:30:23,056 --> 00:30:23,546
buttery smooth as they were


1102
00:30:23,546 --> 00:30:24,016
before.


1103
00:30:24,336 --> 00:30:25,086
If you look at the moving


1104
00:30:25,086 --> 00:30:26,626
platforms or the moving rocks,


1105
00:30:27,166 --> 00:30:28,146
they aren't as smooth as they


1106
00:30:28,146 --> 00:30:28,636
were before.


1107
00:30:29,206 --> 00:30:32,316
What can we do to fix this?


1108
00:30:33,606 --> 00:30:34,876
We went ahead and we modified


1109
00:30:34,876 --> 00:30:36,076
the app to listen for changes in


1110
00:30:36,076 --> 00:30:36,706
thermal state.


1111
00:30:37,826 --> 00:30:38,696
Whenever the thermal state


1112
00:30:38,696 --> 00:30:40,236
changes, the app is going to


1113
00:30:40,236 --> 00:30:41,876
respond dynamically and reduce


1114
00:30:41,876 --> 00:30:43,106
the features it supports.


1115
00:30:43,566 --> 00:30:45,626
Let's see how that works.


1116
00:30:45,946 --> 00:30:48,156
I have a small debug UI on the


1117
00:30:48,156 --> 00:30:49,656
top that can switch it from


1118
00:30:49,656 --> 00:30:51,256
being static or dynamic, and I'm


1119
00:30:51,256 --> 00:30:52,536
going to switch it to be dynamic


1120
00:30:52,536 --> 00:30:52,756
now.


1121
00:30:59,356 --> 00:31:00,416
If you look at the bottom screen


1122
00:31:00,416 --> 00:31:03,966
now, we're close to 20 FPS


1123
00:31:04,506 --> 00:31:04,636
again.


1124
00:31:04,816 --> 00:31:06,196
The scene looks similar, but we


1125
00:31:06,196 --> 00:31:07,526
got rid of some of the details.


1126
00:31:07,806 --> 00:31:08,936
We got rid of the smoke coming


1127
00:31:08,936 --> 00:31:09,706
out of the lava.


1128
00:31:10,256 --> 00:31:11,486
We reduced the fire particles a


1129
00:31:11,486 --> 00:31:13,906
bit, but you can see, the


1130
00:31:13,906 --> 00:31:15,666
response of the app is still


1131
00:31:15,666 --> 00:31:15,986
great.


1132
00:31:17,216 --> 00:31:18,136
That's what we're looking for.


1133
00:31:18,136 --> 00:31:23,176
Now, let's look at the code


1134
00:31:23,176 --> 00:31:24,646
changes we had to do to make


1135
00:31:24,646 --> 00:31:24,966
this happen.


1136
00:31:31,466 --> 00:31:33,046
When you're at nominal or fair,


1137
00:31:33,046 --> 00:31:34,086
we don't have to do anything.


1138
00:31:34,906 --> 00:31:35,786
You can enable all of the


1139
00:31:35,786 --> 00:31:36,556
features on the app.


1140
00:31:37,096 --> 00:31:37,436
We have HDR.


1141
00:31:37,436 --> 00:31:39,096
We have depth of field.


1142
00:31:39,286 --> 00:31:40,546
We have soft shadows, and we


1143
00:31:40,546 --> 00:31:41,546
also have the post processing


1144
00:31:41,546 --> 00:31:41,976
set to high.


1145
00:31:45,836 --> 00:31:47,936
As soon as you hit serious, we


1146
00:31:47,936 --> 00:31:48,836
start doing something.


1147
00:31:48,836 --> 00:31:51,146
We react by disabling HDR.


1148
00:31:51,936 --> 00:31:53,306
We also turn the shadows from


1149
00:31:53,306 --> 00:31:54,256
soft to blob.


1150
00:31:54,796 --> 00:31:56,156
We also set the post-processing


1151
00:31:56,156 --> 00:31:56,746
to medium.


1152
00:31:57,246 --> 00:32:00,356
When we are at critical, we go


1153
00:32:00,356 --> 00:32:01,026
even further.


1154
00:32:01,026 --> 00:32:02,236
Critical is a very high thermal


1155
00:32:02,236 --> 00:32:03,566
state, and we disable as many


1156
00:32:03,566 --> 00:32:04,426
features as we can.


1157
00:32:04,956 --> 00:32:05,756
We disabled HDR.


1158
00:32:05,846 --> 00:32:06,936
We disabled depth of field.


1159
00:32:06,936 --> 00:32:08,576
We disabled shadows, and we also


1160
00:32:08,576 --> 00:32:09,736
turned on post processing.


1161
00:32:10,946 --> 00:32:13,456
All of this is going to help to


1162
00:32:13,456 --> 00:32:14,876
keep the app responsive at all


1163
00:32:14,876 --> 00:32:15,416
times.


1164
00:32:15,936 --> 00:32:18,946
Now, let's look at some tools


1165
00:32:18,946 --> 00:32:20,466
that we can use for tuning for


1166
00:32:20,466 --> 00:32:21,006
thermals.


1167
00:32:23,876 --> 00:32:25,506
This is an instrument stack


1168
00:32:25,816 --> 00:32:28,196
taken on the same app with and


1169
00:32:28,196 --> 00:32:29,426
without any optimizations.


1170
00:32:29,966 --> 00:32:31,346
Both have been captured with a


1171
00:32:31,346 --> 00:32:32,286
serious thermal condition


1172
00:32:32,286 --> 00:32:32,546
active.


1173
00:32:32,606 --> 00:32:36,176
Let's look at the FPS track.


1174
00:32:36,176 --> 00:32:39,646
This is the time display was


1175
00:32:39,646 --> 00:32:40,596
shown in the same frame.


1176
00:32:41,366 --> 00:32:42,396
Let's decode it a bit.


1177
00:32:42,886 --> 00:32:43,916
When the display is showing one


1178
00:32:43,916 --> 00:32:45,436
frame, the GP is working on


1179
00:32:45,436 --> 00:32:47,136
rendering the next one, and the


1180
00:32:47,136 --> 00:32:48,556
CP is working on creating the


1181
00:32:48,556 --> 00:32:49,786
instructions for the one coming


1182
00:32:49,786 --> 00:32:52,276
even after that.


1183
00:32:52,276 --> 00:32:54,676
What happens is when, and


1184
00:32:55,226 --> 00:32:57,506
without any optimizations what


1185
00:32:57,506 --> 00:32:58,576
happens is that the GP is not


1186
00:32:58,576 --> 00:32:59,796
able to deliver frames in time,


1187
00:33:00,146 --> 00:33:01,226
and the display keeps showing


1188
00:33:01,226 --> 00:33:01,956
the same frame.


1189
00:33:02,816 --> 00:33:03,776
This is what a stutter looks


1190
00:33:03,776 --> 00:33:04,096
like.


1191
00:33:04,236 --> 00:33:05,146
This is when your app is


1192
00:33:05,146 --> 00:33:05,566
lagging.


1193
00:33:05,846 --> 00:33:06,576
If you notice, after the


1194
00:33:06,576 --> 00:33:08,756
optimizations, the frames are


1195
00:33:08,756 --> 00:33:09,926
spaced consistently.


1196
00:33:10,156 --> 00:33:11,516
Apart from using instruments,


1197
00:33:11,986 --> 00:33:13,186
you should also be using the


1198
00:33:13,186 --> 00:33:14,166
Xcode energy gauge.


1199
00:33:14,346 --> 00:33:15,916
You should focus your attention


1200
00:33:15,916 --> 00:33:17,086
to the average energy impact


1201
00:33:17,086 --> 00:33:17,856
your app has.


1202
00:33:18,766 --> 00:33:20,176
The higher the energy impact,


1203
00:33:20,286 --> 00:33:21,806
the higher the battery drain and


1204
00:33:21,806 --> 00:33:22,966
the higher the chances of your


1205
00:33:22,966 --> 00:33:23,866
app causing a rise in the


1206
00:33:23,866 --> 00:33:24,526
thermal state.


1207
00:33:24,966 --> 00:33:26,306
If you look at without


1208
00:33:26,306 --> 00:33:27,456
optimizations, we had a very


1209
00:33:27,456 --> 00:33:31,196
high energy impact, but with the


1210
00:33:31,196 --> 00:33:32,476
optimizations enabled, we were


1211
00:33:32,476 --> 00:33:34,126
able to lower the energy impact.


1212
00:33:34,286 --> 00:33:35,496
What that means is the app is


1213
00:33:35,496 --> 00:33:36,656
not going to contribute to a


1214
00:33:36,656 --> 00:33:38,036
rise in the thermal state when


1215
00:33:38,036 --> 00:33:39,746
the device is running the app.


1216
00:33:42,676 --> 00:33:44,186
Back to Alex and Ilya for a


1217
00:33:44,186 --> 00:33:44,576
recap.


1218
00:33:45,516 --> 00:33:49,500
[ Applause ]


1219
00:33:52,256 --> 00:33:53,566
>> Thank you, Jay.


1220
00:33:56,056 --> 00:33:57,806
If you want to learn more about


1221
00:33:57,806 --> 00:33:59,396
debugging in Xcode as well as


1222
00:33:59,396 --> 00:34:00,896
other things you can do to bring


1223
00:34:00,896 --> 00:34:01,836
real-world scenarios to your


1224
00:34:01,836 --> 00:34:03,266
development process, such as


1225
00:34:03,266 --> 00:34:04,946
environment overrides, please


1226
00:34:04,946 --> 00:34:06,166
take a look at this session from


1227
00:34:06,166 --> 00:34:06,806
earlier this week.


1228
00:34:08,096 --> 00:34:10,656
>> So, we heard about real-world


1229
00:34:10,656 --> 00:34:11,936
conditions that people will be


1230
00:34:11,936 --> 00:34:13,985
using your apps under, like 3G


1231
00:34:13,985 --> 00:34:15,985
networks or elevated temperature


1232
00:34:15,985 --> 00:34:16,485
states.


1233
00:34:16,686 --> 00:34:17,795
And we heard about the


1234
00:34:17,795 --> 00:34:19,275
importance of providing the best


1235
00:34:19,275 --> 00:34:20,966
experience truly possible in


1236
00:34:20,966 --> 00:34:21,666
those states.


1237
00:34:22,686 --> 00:34:24,235
We heard about how a typical


1238
00:34:24,235 --> 00:34:25,815
development and testing workflow


1239
00:34:26,045 --> 00:34:27,775
might natural steer you towards


1240
00:34:27,775 --> 00:34:29,516
clean room in an attempt to


1241
00:34:29,516 --> 00:34:31,516
avoid flaky tests and variance.


1242
00:34:31,686 --> 00:34:33,616
And we heard about the new


1243
00:34:33,616 --> 00:34:35,536
device conditions in Xcode 11,


1244
00:34:35,896 --> 00:34:37,156
which lets to you quickly and


1245
00:34:37,156 --> 00:34:39,346
easily put your test devices in


1246
00:34:39,346 --> 00:34:40,716
adverse network or temperature


1247
00:34:40,716 --> 00:34:41,216
states.


1248
00:34:41,985 --> 00:34:43,396
That means no more waiting an


1249
00:34:43,396 --> 00:34:44,966
hour for devices to actually


1250
00:34:44,966 --> 00:34:46,196
warm up and no more throwing


1251
00:34:46,196 --> 00:34:47,186
away test results.


1252
00:34:47,565 --> 00:34:49,376
This is a great way to ensure


1253
00:34:49,376 --> 00:34:50,516
the code that you're designing


1254
00:34:50,686 --> 00:34:52,266
and all the great performance


1255
00:34:52,326 --> 00:34:53,565
and features that come with it


1256
00:34:53,775 --> 00:34:55,275
translate into progression for


1257
00:34:55,275 --> 00:34:56,996
your users in the real world.


1258
00:34:58,416 --> 00:35:00,666
So, to recap, do use the Test


1259
00:35:00,666 --> 00:35:02,096
Pyramid model for organizing


1260
00:35:02,096 --> 00:35:03,896
your automation test suites and


1261
00:35:03,896 --> 00:35:05,286
be prepared to triage your


1262
00:35:05,286 --> 00:35:06,906
results as you introduce


1263
00:35:06,956 --> 00:35:09,286
real-world conditions to your


1264
00:35:10,256 --> 00:35:10,666
testing.


1265
00:35:11,156 --> 00:35:13,246
Only skip truly unnecessary code


1266
00:35:13,246 --> 00:35:14,216
in your unit testing.


1267
00:35:14,746 --> 00:35:17,336
And there's a call to action


1268
00:35:17,336 --> 00:35:17,576
here.


1269
00:35:18,926 --> 00:35:19,856
Don't forget to take your


1270
00:35:19,856 --> 00:35:20,686
conditioners with you.


1271
00:35:21,316 --> 00:35:22,796
Do activate a device condition,


1272
00:35:22,986 --> 00:35:24,766
see how your app behaves, and


1273
00:35:24,766 --> 00:35:26,196
add test runs to find that


1274
00:35:26,196 --> 00:35:27,576
egregious behavior that you


1275
00:35:27,576 --> 00:35:28,256
might have missed.


1276
00:35:29,416 --> 00:35:31,056
We recommend, again, that you do


1277
00:35:31,056 --> 00:35:32,426
test with at least the 3G


1278
00:35:32,426 --> 00:35:34,066
network type of varying quality,


1279
00:35:34,446 --> 00:35:36,126
see how your app behaves in the


1280
00:35:36,126 --> 00:35:37,406
serious thermal state too.


1281
00:35:38,396 --> 00:35:39,816
We are really excited to see


1282
00:35:39,816 --> 00:35:41,076
what progressions you can make


1283
00:35:41,276 --> 00:35:42,466
with the device conditions we've


1284
00:35:42,466 --> 00:35:43,096
made available.


1285
00:35:43,756 --> 00:35:45,686
And we'd love to hear from you.


1286
00:35:46,126 --> 00:35:47,656
Contact developer support or


1287
00:35:47,656 --> 00:35:49,126
come to the Xcode labs right


1288
00:35:49,126 --> 00:35:49,966
after this session.


1289
00:35:50,356 --> 00:35:52,066
And for more information, see


1290
00:35:52,066 --> 00:35:52,876
our session link.


1291
00:35:53,526 --> 00:35:54,826
Thank you so much and we hope


1292
00:35:54,826 --> 00:35:55,966
you have a great WWDC.


1293
00:35:56,516 --> 00:36:03,500
[ Applause ]

