1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:10,516 --> 00:00:14,946
[ Applause ]


3
00:00:15,446 --> 00:00:16,226
>> Hello and welcome.


4
00:00:16,616 --> 00:00:18,016
I am Stephane, an engineer in


5
00:00:18,016 --> 00:00:19,546
the maps team, and together with


6
00:00:19,596 --> 00:00:21,246
my colleague, Mithilesh, we are


7
00:00:21,246 --> 00:00:22,336
going to talk about adding


8
00:00:22,406 --> 00:00:24,006
indoor maps to your app and


9
00:00:24,006 --> 00:00:24,386
websites.


10
00:00:26,306 --> 00:00:28,116
In iOS 11, we introduced indoor


11
00:00:28,116 --> 00:00:29,626
maps as a part of Apple maps.


12
00:00:30,586 --> 00:00:32,386
We provide beautiful and


13
00:00:32,386 --> 00:00:33,856
detailed floor plans for venues


14
00:00:33,856 --> 00:00:35,186
such as airports and malls.


15
00:00:36,196 --> 00:00:37,786
Indoor maps is a great way for


16
00:00:37,786 --> 00:00:39,826
you to view, search, and find


17
00:00:39,826 --> 00:00:40,836
your way inside of indoor


18
00:00:40,836 --> 00:00:41,286
spaces.


19
00:00:43,026 --> 00:00:45,036
Using the level picker, you can switch


20
00:00:45,036 --> 00:00:46,616
between floors, and each of


21
00:00:46,616 --> 00:00:48,716
these venues have indoor


22
00:00:48,716 --> 00:00:51,166
location similar to GPS or


23
00:00:51,166 --> 00:00:51,516
better.


24
00:00:52,986 --> 00:00:54,366
Today, we will talk about how


25
00:00:54,366 --> 00:00:55,706
you can display indoor maps


26
00:00:55,946 --> 00:00:57,716
inside your own applications


27
00:00:58,136 --> 00:00:59,376
along with indoor positioning.


28
00:01:01,356 --> 00:01:02,836
We'll start by talking about the


29
00:01:02,836 --> 00:01:04,105
Indoor Mapping Data Format.


30
00:01:04,796 --> 00:01:06,646
Then, we'll introduce some of


31
00:01:06,646 --> 00:01:08,276
the tools available to you as a


32
00:01:08,276 --> 00:01:10,046
part of the Indoor Maps Program.


33
00:01:11,036 --> 00:01:12,186
We'll then show you how you can


34
00:01:12,186 --> 00:01:14,266
display indoor maps inside your


35
00:01:14,266 --> 00:01:15,606
iOS and web applications.


36
00:01:16,156 --> 00:01:18,246
Let's get started.


37
00:01:19,146 --> 00:01:21,076
IMDF, which stands for the


38
00:01:21,076 --> 00:01:23,146
Indoor Mapping Data Format, is a


39
00:01:23,146 --> 00:01:24,586
specification for modeling


40
00:01:24,586 --> 00:01:25,176
indoor spaces.


41
00:01:26,246 --> 00:01:27,736
But before going into more


42
00:01:27,736 --> 00:01:28,936
details, let's step back a bit


43
00:01:29,086 --> 00:01:31,026
and take a closer look at what


44
00:01:31,026 --> 00:01:32,456
an indoor map is in general


45
00:01:32,456 --> 00:01:32,796
terms.


46
00:01:33,236 --> 00:01:36,156
An indoor map, like your regular


47
00:01:36,156 --> 00:01:38,166
map, is comprised of many


48
00:01:38,166 --> 00:01:39,946
layers, and each of these layers


49
00:01:40,426 --> 00:01:41,706
may contain several features.


50
00:01:42,646 --> 00:01:43,476
Let's break this map, for


51
00:01:43,476 --> 00:01:43,816
instance.


52
00:01:44,476 --> 00:01:47,636
The base of an indoor map is the


53
00:01:47,636 --> 00:01:48,336
building footprint.


54
00:01:49,016 --> 00:01:51,326
Then we get a level.


55
00:01:51,326 --> 00:01:54,006
On that level, we can find


56
00:01:54,006 --> 00:01:55,526
units, such as rooms and


57
00:01:55,526 --> 00:01:55,936
walkways.


58
00:01:56,526 --> 00:02:00,996
Units have doorways, and we can


59
00:02:00,996 --> 00:02:03,026
also have kiosks that you often


60
00:02:03,086 --> 00:02:03,576
see in malls.


61
00:02:04,216 --> 00:02:06,766
We have labels for rooms and


62
00:02:06,766 --> 00:02:08,496
kiosks, such as the name of a


63
00:02:08,496 --> 00:02:11,726
business occupying a room, and


64
00:02:11,786 --> 00:02:13,106
also icons that mark the


65
00:02:13,106 --> 00:02:14,246
location of amnities of


66
00:02:14,246 --> 00:02:16,136
interest like elevators or


67
00:02:16,166 --> 00:02:16,586
restrooms.


68
00:02:16,736 --> 00:02:21,476
And finally, there is also a


69
00:02:21,476 --> 00:02:23,806
virtual boundary enclosing an area


70
00:02:23,886 --> 00:02:25,096
with multiple units.


71
00:02:26,516 --> 00:02:27,816
Okay, so these are some of the


72
00:02:27,816 --> 00:02:29,146
layers that make an indoor map.


73
00:02:30,316 --> 00:02:32,186
However, in order to be able to


74
00:02:32,486 --> 00:02:35,006
accurately describe-- in order


75
00:02:35,006 --> 00:02:36,446
to be able to create and display


76
00:02:36,446 --> 00:02:38,456
such a map, we need a way to


77
00:02:38,456 --> 00:02:39,626
accurately describe its


78
00:02:39,626 --> 00:02:40,156
contents.


79
00:02:41,126 --> 00:02:42,696
That's where IMDF comes into


80
00:02:42,916 --> 00:02:43,000
play.


81
00:02:44,286 --> 00:02:46,136
IMDF is a specification for


82
00:02:46,136 --> 00:02:47,356
modeling indoor spaces.


83
00:02:48,646 --> 00:02:50,276
It is a 2D GeoJSON based data


84
00:02:50,276 --> 00:02:52,636
format that's not only easy to


85
00:02:52,636 --> 00:02:55,236
create and understand but also


86
00:02:55,236 --> 00:02:57,186
easy for applications to use.


87
00:02:58,136 --> 00:03:00,626
An IMDF archive is a set of JSON


88
00:03:00,626 --> 00:03:00,996
files.


89
00:03:03,236 --> 00:03:05,486
More specifically, it consists


90
00:03:05,486 --> 00:03:07,506
of a manifest JSON file and


91
00:03:07,506 --> 00:03:10,216
several GeoJSON files, each


92
00:03:10,216 --> 00:03:11,416
containing a collection of


93
00:03:11,416 --> 00:03:13,316
features of the given IMDF


94
00:03:13,316 --> 00:03:14,386
feature type.


95
00:03:15,696 --> 00:03:18,016
An IMDF feature is a regular


96
00:03:18,016 --> 00:03:18,826
GeoJSON feature.


97
00:03:19,536 --> 00:03:21,856
It has a type feature, may have


98
00:03:21,856 --> 00:03:23,696
a geometry, and has a set of


99
00:03:23,696 --> 00:03:24,156
properties.


100
00:03:25,566 --> 00:03:27,216
The IMDF specification also


101
00:03:27,216 --> 00:03:28,926
requires an ID to present, which


102
00:03:28,926 --> 00:03:31,466
is a UUID and an additional


103
00:03:31,466 --> 00:03:33,586
field called feature type, which


104
00:03:33,586 --> 00:03:34,996
represents the indoor concept


105
00:03:35,076 --> 00:03:35,556
being modeled.


106
00:03:36,246 --> 00:03:38,486
Let's take a look at some of the


107
00:03:38,486 --> 00:03:40,886
main feature types of IMDF.


108
00:03:43,586 --> 00:03:45,346
Levels model the location and


109
00:03:45,346 --> 00:03:47,716
physical extent of floor areas.


110
00:03:48,866 --> 00:03:50,926
A level has a full name, like


111
00:03:50,926 --> 00:03:53,416
parking level one, a short name


112
00:03:53,886 --> 00:03:56,436
like P1, and a reference to the


113
00:03:56,436 --> 00:03:57,966
building features it belongs to.


114
00:03:59,166 --> 00:04:00,516
It also has an ordinal, which


115
00:04:00,896 --> 00:04:02,996
represents the level's position


116
00:04:02,996 --> 00:04:04,406
within the total range of floors


117
00:04:04,406 --> 00:04:04,966
in a building.


118
00:04:06,446 --> 00:04:08,106
Ground levels have an ordinal


119
00:04:08,106 --> 00:04:10,956
equal to 0, subterranean levels


120
00:04:11,036 --> 00:04:13,236
have negative ordinals, and, of


121
00:04:13,236 --> 00:04:15,046
course, above-ground levels have


122
00:04:15,116 --> 00:04:16,546
positive ordinals.


123
00:04:19,096 --> 00:04:21,185
A level is paved with units.


124
00:04:21,726 --> 00:04:23,006
A unit models the location


125
00:04:23,056 --> 00:04:24,266
and extent of a space, like a


126
00:04:24,266 --> 00:04:26,826
room, a walkway, a stairwell, or


127
00:04:26,826 --> 00:04:27,446
an elevator.


128
00:04:29,366 --> 00:04:31,616
Openings model entrances such as


129
00:04:31,616 --> 00:04:31,826
door.


130
00:04:32,866 --> 00:04:33,956
They may also define interesting


131
00:04:33,956 --> 00:04:35,716
properties like the type of


132
00:04:35,716 --> 00:04:37,576
accessibility or the kind of


133
00:04:37,576 --> 00:04:38,486
access control systems.


134
00:04:39,056 --> 00:04:42,756
Kiosks model pieces of furniture


135
00:04:42,976 --> 00:04:44,876
that may be used to provide


136
00:04:44,916 --> 00:04:46,546
services or distribute products,


137
00:04:47,046 --> 00:04:48,686
like information desks or


138
00:04:48,686 --> 00:04:49,306
vending machines.


139
00:04:49,996 --> 00:04:52,936
We can also add businesses to


140
00:04:52,936 --> 00:04:54,926
our map thanks to the occupant


141
00:04:54,926 --> 00:04:55,376
features.


142
00:04:55,476 --> 00:04:57,676
An occupant provides information


143
00:04:57,676 --> 00:04:59,766
about a business like the name,


144
00:04:59,766 --> 00:05:00,966
the phone number, and opening


145
00:05:00,966 --> 00:05:01,336
hours.


146
00:05:02,306 --> 00:05:04,246
They don't have a geometry, but


147
00:05:04,246 --> 00:05:05,456
we can get their display point


148
00:05:05,866 --> 00:05:09,556
and address through their associated


149
00:05:10,476 --> 00:05:10,616
anchor.


150
00:05:10,856 --> 00:05:12,666
Anchors represent a curated


151
00:05:12,666 --> 00:05:13,996
point used as a peripheral


152
00:05:13,996 --> 00:05:15,496
display location in a unit.


153
00:05:16,556 --> 00:05:17,646
They may also have a reference


154
00:05:17,646 --> 00:05:17,986
to an address.


155
00:05:19,106 --> 00:05:21,466
Anchors play a key role in IMDF


156
00:05:22,106 --> 00:05:23,566
since other features like


157
00:05:23,566 --> 00:05:26,476
occupant, unit, or kiosk may be


158
00:05:26,526 --> 00:05:28,476
linked to addresses through


159
00:05:30,516 --> 00:05:30,626
them.


160
00:05:30,846 --> 00:05:31,866
We may also want to add


161
00:05:31,866 --> 00:05:32,406
amenities.


162
00:05:33,156 --> 00:05:34,396
Amenity features can model


163
00:05:34,486 --> 00:05:36,366
permanent equipment or other


164
00:05:36,366 --> 00:05:38,376
convenience of interest like a


165
00:05:38,376 --> 00:05:40,096
photo booth, and ATM, or an


166
00:05:40,096 --> 00:05:44,216
exhibit in that case.


167
00:05:44,406 --> 00:05:45,976
Section features may be used to


168
00:05:45,976 --> 00:05:47,476
describe the extent of an area


169
00:05:47,476 --> 00:05:49,126
with a particular theme on the


170
00:05:49,126 --> 00:05:50,876
level like a food court in a


171
00:05:50,876 --> 00:05:53,216
mall or a post-security area in an


172
00:05:53,216 --> 00:05:53,546
airport.


173
00:05:54,856 --> 00:05:56,106
Sections do not need to be


174
00:05:56,106 --> 00:05:57,906
materialized by a physical


175
00:05:57,906 --> 00:05:58,316
boundary.


176
00:06:01,276 --> 00:06:02,676
Buildings describe physical


177
00:06:02,676 --> 00:06:03,396
building structures.


178
00:06:04,006 --> 00:06:05,256
They may have a name and also


179
00:06:05,256 --> 00:06:06,006
refer to an address.


180
00:06:06,866 --> 00:06:08,046
However, they don't have a


181
00:06:08,046 --> 00:06:10,146
geometry, but defer job of


182
00:06:10,146 --> 00:06:12,006
describing their extent to


183
00:06:12,006 --> 00:06:13,256
another feature called


184
00:06:13,636 --> 00:06:14,046
footprint.


185
00:06:15,576 --> 00:06:16,576
And there are three types of


186
00:06:16,576 --> 00:06:16,996
footprints.


187
00:06:17,516 --> 00:06:19,926
Aerial footprints capture the


188
00:06:19,926 --> 00:06:21,576
maximum extent of the levels


189
00:06:21,606 --> 00:06:22,296
above ground.


190
00:06:23,366 --> 00:06:24,416
Ground footprints capture the


191
00:06:24,416 --> 00:06:25,616
maximum extent of the ground


192
00:06:25,616 --> 00:06:27,536
levels, and subterranean


193
00:06:27,536 --> 00:06:28,936
footprints capture the maximum


194
00:06:28,996 --> 00:06:31,276
extent of the floors below


195
00:06:31,926 --> 00:06:32,086
ground.


196
00:06:33,466 --> 00:06:33,576
Okay.


197
00:06:33,806 --> 00:06:35,246
So this was just a quick


198
00:06:35,246 --> 00:06:37,146
overview of the main features of


199
00:06:37,146 --> 00:06:37,676
IMDF.


200
00:06:38,586 --> 00:06:40,716
Thanks to IMDF, we can describe


201
00:06:40,716 --> 00:06:42,846
indoor spaces data in a formal


202
00:06:43,056 --> 00:06:44,046
yet flexible way.


203
00:06:45,076 --> 00:06:46,406
But, of course the specification


204
00:06:46,406 --> 00:06:47,226
covers a lot more.


205
00:06:47,846 --> 00:06:48,756
You can check it out at


206
00:06:48,756 --> 00:06:51,846
register.apple.com.


207
00:06:52,286 --> 00:06:54,686
Apple works with many of the top


208
00:06:54,686 --> 00:06:56,386
platforms' providers for


209
00:06:56,386 --> 00:06:57,926
geospatial tooling that support


210
00:06:57,926 --> 00:06:58,546
IMDF.


211
00:06:59,536 --> 00:07:00,886
You can work directly with them


212
00:07:01,256 --> 00:07:03,166
to create an IMDF archive for


213
00:07:03,166 --> 00:07:03,596
your venue.


214
00:07:05,206 --> 00:07:06,986
You can use that archive right


215
00:07:06,986 --> 00:07:08,486
away and display it in your apps


216
00:07:08,486 --> 00:07:10,226
as we will demonstrate later in


217
00:07:10,226 --> 00:07:10,686
this session.


218
00:07:11,266 --> 00:07:14,856
But what if you also want to


219
00:07:14,856 --> 00:07:16,036
enable indoor positioning?


220
00:07:17,076 --> 00:07:17,976
Well, that's where the indoor


221
00:07:17,976 --> 00:07:19,826
maps program comes in.


222
00:07:20,516 --> 00:07:22,766
By participating in the indoor


223
00:07:22,766 --> 00:07:23,976
maps program, you can take


224
00:07:23,976 --> 00:07:25,396
advantage of some of the tools


225
00:07:25,396 --> 00:07:27,616
that Apple provides to visualize


226
00:07:27,696 --> 00:07:28,896
and validate your data.


227
00:07:29,786 --> 00:07:31,496
Even more interesting, you can


228
00:07:31,536 --> 00:07:33,036
add indoor location capability


229
00:07:33,036 --> 00:07:34,856
or the blue dot to your venue.


230
00:07:35,596 --> 00:07:37,176
And optionally, you can also


231
00:07:37,346 --> 00:07:38,906
allow Apple to display your


232
00:07:38,906 --> 00:07:44,186
venue inside of Apple Maps.


233
00:07:44,186 --> 00:07:45,386
You can sign up for the indoor


234
00:07:45,386 --> 00:07:46,206
maps program at


235
00:07:46,296 --> 00:07:48,156
register.Apple.com/indoor.


236
00:07:49,116 --> 00:07:50,196
Signing up is very


237
00:07:50,276 --> 00:07:51,236
straightforward and easy.


238
00:07:51,676 --> 00:07:52,886
You just need to provide some


239
00:07:52,886 --> 00:07:54,326
basic information about yourself


240
00:07:54,326 --> 00:07:56,626
and your organization such as


241
00:07:56,626 --> 00:07:58,246
the name, the location, and


242
00:07:58,246 --> 00:07:58,596
address.


243
00:07:59,176 --> 00:08:02,366
Once Apple has reviewed and


244
00:08:02,366 --> 00:08:03,846
approved your application, you


245
00:08:03,846 --> 00:08:05,486
can start working with your


246
00:08:05,486 --> 00:08:07,296
geospatial tool provider to


247
00:08:07,296 --> 00:08:08,626
create an IMDF archive.


248
00:08:08,626 --> 00:08:11,776
And now that you have it, you


249
00:08:11,776 --> 00:08:13,376
are ready to validate it with


250
00:08:13,376 --> 00:08:14,616
the IMDF Sandbox.


251
00:08:15,276 --> 00:08:19,016
The IMDF Sandbox is a tool that


252
00:08:19,016 --> 00:08:20,516
allows you to visualize and


253
00:08:20,516 --> 00:08:22,076
validate your IMDF data.


254
00:08:22,856 --> 00:08:24,006
Most of the issues it reports


255
00:08:24,106 --> 00:08:25,696
can be addressed right away with


256
00:08:25,696 --> 00:08:26,226
a few clicks.


257
00:08:27,426 --> 00:08:28,836
Some errors might require more


258
00:08:28,836 --> 00:08:30,396
work, and, in that case, you may


259
00:08:30,396 --> 00:08:31,806
want to take your data back to


260
00:08:31,806 --> 00:08:34,916
the mapmaker to fix them.


261
00:08:35,145 --> 00:08:36,836
When the IMDF Sandbox reports no


262
00:08:36,836 --> 00:08:38,916
errors, you may submit your data


263
00:08:39,186 --> 00:08:40,586
for more exhausting validation


264
00:08:40,586 --> 00:08:40,956
tests.


265
00:08:41,895 --> 00:08:43,486
If no issues are detected, you


266
00:08:43,486 --> 00:08:44,476
can proceed to the next step,


267
00:08:44,686 --> 00:08:46,516
which is enabling indoor


268
00:08:46,516 --> 00:08:48,366
positioning for your venue with


269
00:08:48,366 --> 00:08:49,986
the indoor survey app.


270
00:08:51,276 --> 00:08:53,146
The indoor survey app is your


271
00:08:53,146 --> 00:08:54,586
companion to enable indoor


272
00:08:54,586 --> 00:08:55,656
positioning on iOS.


273
00:08:56,976 --> 00:08:58,996
You survey a place by collecting


274
00:08:58,996 --> 00:09:00,596
radiofrequency fingerprints of


275
00:09:00,596 --> 00:09:01,026
your venue.


276
00:09:01,986 --> 00:09:03,346
Surveying relies on the fact


277
00:09:03,806 --> 00:09:05,616
that the radiofrequency patterns


278
00:09:05,666 --> 00:09:07,256
emitted by fixed WiFi access


279
00:09:07,316 --> 00:09:09,066
points inside a building are


280
00:09:09,066 --> 00:09:10,376
unique depending on your


281
00:09:10,376 --> 00:09:10,826
location.


282
00:09:11,436 --> 00:09:14,816
Once surveying is complete, the


283
00:09:14,816 --> 00:09:16,136
survey data is uploaded to Apple


284
00:09:16,136 --> 00:09:17,316
servers and processed.


285
00:09:17,716 --> 00:09:20,066
And, if no issues are detected,


286
00:09:20,736 --> 00:09:21,786
your venue is made live for


287
00:09:21,786 --> 00:09:22,416
indoor location.


288
00:09:23,596 --> 00:09:25,276
You can use a survey app to test


289
00:09:25,276 --> 00:09:27,126
the accuracy of indoor location


290
00:09:27,166 --> 00:09:27,676
afterwards.


291
00:09:29,006 --> 00:09:30,916
Performing a survey is very easy


292
00:09:30,916 --> 00:09:31,526
and intuitive.


293
00:09:32,366 --> 00:09:33,466
We have some guidelines in place


294
00:09:33,466 --> 00:09:34,746
so that you can get the best


295
00:09:34,746 --> 00:09:35,416
results out of it.


296
00:09:37,226 --> 00:09:37,496
Alright.


297
00:09:37,726 --> 00:09:40,146
So, you have created your IMDF


298
00:09:40,146 --> 00:09:42,366
archive and validated it, and


299
00:09:42,366 --> 00:09:43,586
you may also have enabled indoor


300
00:09:43,586 --> 00:09:44,086
positioning.


301
00:09:44,836 --> 00:09:46,126
The next step is to display it


302
00:09:46,586 --> 00:09:47,746
in your app or website.


303
00:09:48,786 --> 00:09:50,056
I'll now hand over to Mithilesh,


304
00:09:50,056 --> 00:09:51,126
who will show you how you can


305
00:09:51,246 --> 00:09:53,286
display an indoor map inside an


306
00:09:53,436 --> 00:09:53,976
iOS application.


307
00:09:54,516 --> 00:09:57,986
[ Applause ]


308
00:09:58,486 --> 00:09:59,126
>> Thank you, Stephane.


309
00:10:01,006 --> 00:10:01,656
Hello everyone.


310
00:10:01,876 --> 00:10:03,476
My name is Mithilesh, and I'm an


311
00:10:03,476 --> 00:10:04,576
engineer on the maps team.


312
00:10:05,486 --> 00:10:06,716
I'm here to show you how you can


313
00:10:06,716 --> 00:10:09,246
use IMDF data to display an


314
00:10:09,246 --> 00:10:10,466
indoor map in your iOS


315
00:10:10,466 --> 00:10:11,086
application.


316
00:10:11,676 --> 00:10:15,266
We'll build a simple app for


317
00:10:15,266 --> 00:10:16,696
visitors of a dinosaur museum.


318
00:10:17,276 --> 00:10:19,286
We call this app Dinoseum.


319
00:10:20,296 --> 00:10:21,666
The app displays a map of a


320
00:10:21,666 --> 00:10:23,136
museum with different exhibits,


321
00:10:23,396 --> 00:10:24,916
restaurants, shops, and more.


322
00:10:26,076 --> 00:10:28,026
The various areas of the museum


323
00:10:28,026 --> 00:10:29,486
are marked with descriptive


324
00:10:29,486 --> 00:10:31,326
labels and icons that the user


325
00:10:31,326 --> 00:10:33,416
can tap to display details.


326
00:10:35,276 --> 00:10:36,716
On the top right corner, we have


327
00:10:36,716 --> 00:10:38,306
a level picker to switch between


328
00:10:38,306 --> 00:10:38,656
levels.


329
00:10:39,356 --> 00:10:42,176
The app also takes advantage of


330
00:10:42,176 --> 00:10:43,796
indoor positioning to display


331
00:10:43,796 --> 00:10:45,476
the user's location inside the


332
00:10:45,476 --> 00:10:45,896
museum.


333
00:10:47,066 --> 00:10:48,546
So, what does it take to build


334
00:10:48,546 --> 00:10:49,996
this app?


335
00:10:50,296 --> 00:10:52,056
Displaying a basic indoor map


336
00:10:52,126 --> 00:10:53,316
can be done in three steps.


337
00:10:55,026 --> 00:10:57,096
In step one, we'll add the IMDF


338
00:10:57,126 --> 00:10:59,466
files to our project and create


339
00:10:59,466 --> 00:11:01,306
model classes for each of the


340
00:11:02,056 --> 00:11:03,096
feature types.


341
00:11:03,276 --> 00:11:05,186
In step two, we will decode the


342
00:11:05,186 --> 00:11:07,416
IMDF files and create instances


343
00:11:07,416 --> 00:11:08,496
of these model classes.


344
00:11:09,436 --> 00:11:10,846
We will then relate them to


345
00:11:10,846 --> 00:11:12,056
create a graph of feature


346
00:11:12,056 --> 00:11:12,536
objects.


347
00:11:13,986 --> 00:11:15,446
Venue consists of buildings.


348
00:11:15,726 --> 00:11:17,246
Buildings have footprint and


349
00:11:17,246 --> 00:11:17,606
levels.


350
00:11:17,866 --> 00:11:19,636
Levels have units and openings


351
00:11:20,086 --> 00:11:20,606
and so on.


352
00:11:21,256 --> 00:11:24,426
In the third step, we will


353
00:11:24,426 --> 00:11:26,546
retrieve the geometry from the


354
00:11:26,546 --> 00:11:28,276
decoded feature objects and


355
00:11:28,276 --> 00:11:30,416
render them to create an indoor


356
00:11:30,416 --> 00:11:30,636
map.


357
00:11:32,456 --> 00:11:33,556
Now, let's take a quick look at


358
00:11:33,556 --> 00:11:34,506
some of the code that we'll


359
00:11:34,506 --> 00:11:34,686
write.


360
00:11:36,116 --> 00:11:38,106
For step one, we'll create an


361
00:11:38,106 --> 00:11:39,646
abstract class called feature.


362
00:11:41,306 --> 00:11:43,246
Every IMDF feature must have a


363
00:11:43,246 --> 00:11:44,276
unique identifier.


364
00:11:44,936 --> 00:11:47,656
It must also have a set of


365
00:11:47,746 --> 00:11:50,246
properties that describe the


366
00:11:50,856 --> 00:11:51,006
feature.


367
00:11:51,186 --> 00:11:53,806
And it may have geometry, which


368
00:11:53,806 --> 00:11:55,606
is an array of MKShape objects.


369
00:11:57,166 --> 00:11:58,536
Using this as the base class,


370
00:11:58,716 --> 00:11:59,586
we'll write concrete


371
00:11:59,586 --> 00:12:01,036
implementations of feature class


372
00:12:01,236 --> 00:12:02,126
such as Unit.


373
00:12:04,436 --> 00:12:06,516
For decoding an IMDF file, which


374
00:12:06,516 --> 00:12:08,886
is also a GeoJSON file, we'll


375
00:12:08,886 --> 00:12:11,056
use the new MKGeoJSONDecoder


376
00:12:11,466 --> 00:12:13,346
and call decode on the data.


377
00:12:14,666 --> 00:12:15,786
We'll look into the details of


378
00:12:15,786 --> 00:12:19,736
decoding in a short while.


379
00:12:19,966 --> 00:12:22,116
During step three, we will use


380
00:12:22,116 --> 00:12:24,036
addOverlays and addAnnotations


381
00:12:24,036 --> 00:12:26,666
APIs of the MapKit framework to


382
00:12:27,276 --> 00:12:29,276
draw polygons, lines, and point


383
00:12:29,276 --> 00:12:31,836
geometry on the map.


384
00:12:31,836 --> 00:12:33,036
And for every overlay that is


385
00:12:33,036 --> 00:12:34,726
added to the map, we get a


386
00:12:34,726 --> 00:12:36,466
callback to MKMapViewDelegate


387
00:12:36,466 --> 00:12:38,946
method mapView render for


388
00:12:38,946 --> 00:12:39,586
overlay.


389
00:12:40,956 --> 00:12:42,766
And for every annotation, we get


390
00:12:42,766 --> 00:12:44,666
a callback to mapView view for


391
00:12:44,666 --> 00:12:45,256
annotation.


392
00:12:46,026 --> 00:12:47,486
In these delegate methods, we'll


393
00:12:47,536 --> 00:12:48,916
have the opportunity to


394
00:12:48,916 --> 00:12:50,226
customize the appearance of the


395
00:12:50,226 --> 00:12:51,296
indoor map elements.


396
00:12:51,586 --> 00:12:55,146
And with that, let's start


397
00:12:55,146 --> 00:12:56,306
building our dinosaur museum


398
00:12:56,306 --> 00:12:56,486
app.


399
00:13:10,436 --> 00:13:12,056
We'll start with a very basic


400
00:13:12,056 --> 00:13:12,276
app.


401
00:13:13,036 --> 00:13:14,276
This is a single view


402
00:13:14,276 --> 00:13:17,056
application based on MKMapView.


403
00:13:19,096 --> 00:13:20,366
The first thing I want to do is


404
00:13:20,366 --> 00:13:22,026
to make sure I have added my


405
00:13:22,216 --> 00:13:23,746
IMDF files to the project.


406
00:13:24,236 --> 00:13:28,186
And here they are.


407
00:13:28,846 --> 00:13:30,256
In your application, you could


408
00:13:30,256 --> 00:13:31,606
choose to either bundle these


409
00:13:31,686 --> 00:13:33,206
files with your app or download


410
00:13:33,206 --> 00:13:34,076
them from your servers.


411
00:13:36,186 --> 00:13:37,226
Let's take a look at one of


412
00:13:37,226 --> 00:13:37,706
these files.


413
00:13:39,226 --> 00:13:40,786
This is for the Unit feature


414
00:13:40,786 --> 00:13:41,046
type.


415
00:13:41,876 --> 00:13:43,846
Our goal is to decode and render


416
00:13:43,846 --> 00:13:48,036
the contents of this file.


417
00:13:49,426 --> 00:13:50,836
I'll now write the abstract


418
00:13:50,866 --> 00:13:51,906
class called Feature.


419
00:13:55,636 --> 00:13:57,266
This has the three properties we


420
00:13:57,266 --> 00:13:57,886
saw earlier.


421
00:13:58,366 --> 00:14:00,486
Identifier, properties, and


422
00:14:00,486 --> 00:14:00,996
geometry.


423
00:14:01,596 --> 00:14:03,546
Our class is missing an


424
00:14:03,546 --> 00:14:06,000
initializer, so let's add one.


425
00:14:10,046 --> 00:14:11,096
Initialization is


426
00:14:11,096 --> 00:14:12,766
straightforward with the


427
00:14:12,766 --> 00:14:14,066
exception of properties.


428
00:14:15,046 --> 00:14:17,066
MKGeoJSON feature exposes


429
00:14:17,256 --> 00:14:20,136
property as opaque data, and we


430
00:14:20,136 --> 00:14:21,786
must decode it before we can use


431
00:14:21,836 --> 00:14:22,006
this.


432
00:14:23,856 --> 00:14:25,976
We use the JSON decoder class to


433
00:14:25,976 --> 00:14:28,196
decode our data and convert it


434
00:14:28,196 --> 00:14:29,196
into adjacent object.


435
00:14:29,846 --> 00:14:33,526
And now, I can write concrete


436
00:14:33,526 --> 00:14:34,726
implementations of Feature


437
00:14:34,726 --> 00:14:35,016
class.


438
00:14:35,736 --> 00:14:37,396
We'll do that for the unit type.


439
00:14:41,316 --> 00:14:43,166
Let's set the base class to be


440
00:14:43,496 --> 00:14:43,796
Feature.


441
00:14:47,276 --> 00:14:49,046
To describe the unit feature


442
00:14:49,046 --> 00:14:50,776
type, we need to define some


443
00:14:50,866 --> 00:14:51,316
properties.


444
00:14:55,126 --> 00:14:57,426
It consists of category, which


445
00:14:57,426 --> 00:14:58,846
is used to differentiate between


446
00:14:58,846 --> 00:15:01,856
different kinds of unit and


447
00:15:01,996 --> 00:15:03,086
level ID, which is the


448
00:15:03,086 --> 00:15:04,776
identifier of the level this


449
00:15:04,776 --> 00:15:08,436
unit belongs to.


450
00:15:08,686 --> 00:15:10,226
Units have occupants and


451
00:15:10,226 --> 00:15:10,926
amenities.


452
00:15:11,216 --> 00:15:16,596
So let's add them here.


453
00:15:16,596 --> 00:15:17,866
And that's all we needed to do


454
00:15:17,866 --> 00:15:20,146
for the unit feature class.


455
00:15:20,616 --> 00:15:22,116
Similar to unit, we can create


456
00:15:22,116 --> 00:15:24,906
model classes for venue and


457
00:15:24,906 --> 00:15:26,266
level and all the other feature


458
00:15:26,266 --> 00:15:27,546
types that we wish to decode.


459
00:15:28,706 --> 00:15:30,546
I've already implemented them


460
00:15:30,546 --> 00:15:32,206
and added them to the project.


461
00:15:32,856 --> 00:15:34,896
You can check them out by


462
00:15:35,146 --> 00:15:36,426
downloading the sample code


463
00:15:36,426 --> 00:15:40,216
provided for this session.


464
00:15:40,766 --> 00:15:42,296
Okay, now we can move onto step


465
00:15:42,476 --> 00:15:44,766
two, which is to decode the IMDF


466
00:15:44,766 --> 00:15:45,116
data.


467
00:15:45,706 --> 00:15:48,626
We'll do that in a class called


468
00:15:49,766 --> 00:15:50,736
IMDFDecoder.


469
00:15:51,406 --> 00:15:55,316
Let's add a property of type


470
00:15:55,316 --> 00:15:57,246
MKGeoJSONDecoder.


471
00:15:58,336 --> 00:15:59,706
This is the new class available


472
00:15:59,706 --> 00:16:01,746
in the MapKit framework that you


473
00:16:01,746 --> 00:16:03,996
can use to decode any GeoJSON


474
00:16:04,626 --> 00:16:04,756
data.


475
00:16:07,756 --> 00:16:09,556
I'll now write a method called


476
00:16:09,656 --> 00:16:11,486
decodeFeatures that decodes a


477
00:16:11,546 --> 00:16:12,696
single IMDF file.


478
00:16:13,276 --> 00:16:17,236
In this method, we first read


479
00:16:17,236 --> 00:16:18,896
the contents of the IMDF file


480
00:16:18,896 --> 00:16:21,276
from disk and by using the


481
00:16:21,276 --> 00:16:23,456
instance of MKGeoJSONDecoder,


482
00:16:24,106 --> 00:16:27,556
we all the code on the data.


483
00:16:27,756 --> 00:16:29,826
We get back an array of


484
00:16:29,826 --> 00:16:32,746
MKGeoJSONFeature objects, which


485
00:16:32,746 --> 00:16:34,436
we can use to initialize our


486
00:16:34,436 --> 00:16:40,036
model classes.


487
00:16:40,036 --> 00:16:41,206
I'll now write a method called


488
00:16:41,206 --> 00:16:43,106
decode that decodes an IMDF


489
00:16:43,136 --> 00:16:45,626
archive or a collection of IMDF


490
00:16:45,656 --> 00:16:45,946
files.


491
00:16:51,236 --> 00:16:52,906
Let's create the instances of


492
00:16:52,906 --> 00:16:54,346
the feature objects that we wish


493
00:16:54,376 --> 00:16:56,026
to decode such as venues and


494
00:16:56,026 --> 00:16:57,886
levels and units, and we use the


495
00:16:57,886 --> 00:17:00,316
decodeFeatures method I wrote


496
00:17:00,316 --> 00:17:02,596
earlier in passing in the type


497
00:17:02,776 --> 00:17:04,726
of feature I wish to decode.


498
00:17:06,876 --> 00:17:08,685
To make it easier to render the


499
00:17:08,685 --> 00:17:11,955
correct subset of features, we


500
00:17:11,955 --> 00:17:13,215
need to create associations


501
00:17:13,215 --> 00:17:14,455
between these feature objects.


502
00:17:15,705 --> 00:17:18,086
For example, venue contains


503
00:17:18,086 --> 00:17:18,465
levels.


504
00:17:19,276 --> 00:17:20,266
So let's relate them.


505
00:17:20,836 --> 00:17:24,146
We do that after grouping the


506
00:17:24,146 --> 00:17:25,435
levels by the ordinal.


507
00:17:29,176 --> 00:17:31,246
Levels contain units and


508
00:17:31,246 --> 00:17:32,546
openings, so let's make that


509
00:17:32,546 --> 00:17:33,346
association.


510
00:17:38,776 --> 00:17:41,146
Both units and openings have a


511
00:17:41,196 --> 00:17:43,146
property called levelID.


512
00:17:44,136 --> 00:17:46,206
We group the units and levels by


513
00:17:46,206 --> 00:17:48,556
the levelID, and then iterate


514
00:17:48,556 --> 00:17:49,896
through all the levels of this


515
00:17:49,896 --> 00:17:52,806
venue and find the units that


516
00:17:52,806 --> 00:17:54,976
are contained in this level and


517
00:17:54,976 --> 00:17:55,466
relate them.


518
00:17:55,586 --> 00:17:59,246
And the same thing for the


519
00:17:59,796 --> 00:18:00,000
openings.


520
00:18:03,906 --> 00:18:06,236
Units contain amenities and


521
00:18:06,236 --> 00:18:07,806
occupants, so let's create that


522
00:18:07,806 --> 00:18:08,616
association.


523
00:18:13,876 --> 00:18:15,276
We iterate through all the


524
00:18:15,276 --> 00:18:18,076
amenities, find the unit it


525
00:18:18,076 --> 00:18:19,616
belongs to, and make the


526
00:18:19,616 --> 00:18:20,406
association.


527
00:18:21,746 --> 00:18:23,166
In just the same way, we can


528
00:18:23,166 --> 00:18:24,596
relate occupants to units as


529
00:18:24,596 --> 00:18:24,776
well.


530
00:18:28,696 --> 00:18:31,006
But there's one exception for


531
00:18:31,006 --> 00:18:31,546
occupants.


532
00:18:32,366 --> 00:18:33,936
Remember that we use occupants


533
00:18:33,936 --> 00:18:35,386
to display a business' name on


534
00:18:35,386 --> 00:18:37,786
the map, but they do not have


535
00:18:37,786 --> 00:18:38,786
geometry of their own.


536
00:18:39,406 --> 00:18:41,986
Instead, they rely on the anchor


537
00:18:41,986 --> 00:18:44,306
object to get the display


538
00:18:44,416 --> 00:18:45,000
point.


539
00:18:47,896 --> 00:18:48,206
Okay.


540
00:18:48,206 --> 00:18:50,016
So, now we have a decode method


541
00:18:51,076 --> 00:18:53,276
that decodes and IMDF archive


542
00:18:53,396 --> 00:18:56,176
and gives us a fully decoded and


543
00:18:56,176 --> 00:18:58,306
configured venue object with


544
00:18:58,416 --> 00:18:59,876
references to all the feature


545
00:18:59,876 --> 00:19:01,246
types that we wish to render.


546
00:19:02,426 --> 00:19:03,626
So now we can move onto step


547
00:19:03,716 --> 00:19:05,626
three, which is to render the


548
00:19:05,626 --> 00:19:09,196
IMDF data on a map.


549
00:19:09,566 --> 00:19:11,356
We'll do that in our main view


550
00:19:11,356 --> 00:19:12,946
controller class called


551
00:19:12,946 --> 00:19:13,876
IndoorMapViewController.


552
00:19:18,136 --> 00:19:19,886
Let's call the decode method


553
00:19:20,176 --> 00:19:22,426
that we defined in step two, and


554
00:19:24,476 --> 00:19:27,606
we get back a venue object, and


555
00:19:27,606 --> 00:19:29,626
now we can add features on the


556
00:19:29,626 --> 00:19:31,996
map as overlays and annotations.


557
00:19:33,466 --> 00:19:35,386
And to do that, I'll write a


558
00:19:35,386 --> 00:19:37,956
method called showFeaturesForOrdinal


559
00:19:38,026 --> 00:19:42,626
where ordinal is an


560
00:19:42,626 --> 00:19:44,706
integer representing the level's


561
00:19:44,706 --> 00:19:46,336
position within total range of


562
00:19:46,396 --> 00:19:47,396
floors in the building.


563
00:19:47,946 --> 00:19:52,776
In this method, we first remove


564
00:19:52,776 --> 00:19:54,606
all the overlays and annotations


565
00:19:54,686 --> 00:19:56,286
that belong to a previous level


566
00:19:56,876 --> 00:19:59,686
and then aggregate the subset of


567
00:19:59,726 --> 00:20:01,216
features that we want to display


568
00:20:01,266 --> 00:20:03,986
for the current level and


569
00:20:03,986 --> 00:20:05,576
retrieve the geometry from those


570
00:20:05,576 --> 00:20:08,736
feature objects and add them to


571
00:20:08,736 --> 00:20:10,386
the map as overlays and


572
00:20:10,386 --> 00:20:11,066
annotations.


573
00:20:11,626 --> 00:20:16,016
Let's call this method from


574
00:20:16,016 --> 00:20:16,083
our viewDidLoad.


575
00:20:22,046 --> 00:20:23,296
We set the initial level to be


576
00:20:23,296 --> 00:20:24,686
the one with ordinal one.


577
00:20:25,316 --> 00:20:30,086
We've already implemented the


578
00:20:30,086 --> 00:20:31,276
MKMapViewDelegate method,


579
00:20:31,766 --> 00:20:33,796
mapView, render for overlay,


580
00:20:34,426 --> 00:20:36,466
where we create instances of


581
00:20:36,466 --> 00:20:39,586
MKOverlayRenderer for every


582
00:20:39,586 --> 00:20:41,966
GeoJSON geometry type including


583
00:20:41,966 --> 00:20:43,816
the new MKMultipolygonRenderer


584
00:20:43,896 --> 00:20:46,436
and the new MKMultipolylineRenderer


585
00:20:46,436 --> 00:20:48,596
for much more efficient


586
00:20:48,596 --> 00:20:51,096
rendering of polygons and lines.


587
00:20:51,696 --> 00:20:56,796
Let's run this app and see if we


588
00:20:56,796 --> 00:20:58,486
have an indoor map.


589
00:21:00,826 --> 00:21:00,976
Okay.


590
00:21:01,166 --> 00:21:04,816
We have a very basic map of a


591
00:21:04,816 --> 00:21:05,346
museum.


592
00:21:06,766 --> 00:21:11,176
Let me zoom in a bit.


593
00:21:11,386 --> 00:21:15,036
In this map, the units are shown


594
00:21:15,036 --> 00:21:15,746
as polygons.


595
00:21:17,326 --> 00:21:19,636
Amenities such as this restroom


596
00:21:19,996 --> 00:21:21,746
is displayed as an annotation,


597
00:21:22,076 --> 00:21:25,596
and occupants such as our


598
00:21:25,596 --> 00:21:27,506
Jurassic Table Restaurant is


599
00:21:27,506 --> 00:21:29,346
also displayed as an annotation.


600
00:21:29,946 --> 00:21:33,386
Our museum is a multilevel


601
00:21:33,386 --> 00:21:34,936
building, so it needs a level


602
00:21:34,936 --> 00:21:35,236
picker.


603
00:21:36,396 --> 00:21:40,476
Let's add one.


604
00:21:40,656 --> 00:21:41,716
I've already added a level


605
00:21:41,716 --> 00:21:42,866
picker to the story board.


606
00:21:43,596 --> 00:21:45,266
It's a UIStackView based


607
00:21:45,326 --> 00:21:45,896
level picker.


608
00:21:46,626 --> 00:21:47,516
I'll make it visible.


609
00:21:47,966 --> 00:21:52,426
And to receive the level picker


610
00:21:52,426 --> 00:21:54,846
related update messages, we have


611
00:21:54,846 --> 00:21:56,316
implemented a level picker


612
00:21:56,316 --> 00:21:58,356
delegate, which has a method


613
00:21:58,356 --> 00:21:59,606
called selected level did


614
00:21:59,646 --> 00:21:59,986
change.


615
00:22:00,666 --> 00:22:02,206
This method is called every time


616
00:22:02,206 --> 00:22:04,006
the user taps to make a


617
00:22:04,006 --> 00:22:05,346
selection in the level picker.


618
00:22:06,846 --> 00:22:08,926
Let's handle the level change


619
00:22:08,926 --> 00:22:10,000
event here.


620
00:22:16,056 --> 00:22:17,886
When the level changes, we use


621
00:22:18,026 --> 00:22:20,496
showFeaturesForOrdinal to


622
00:22:20,496 --> 00:22:22,966
update the map with features for


623
00:22:22,966 --> 00:22:24,166
the selected level.


624
00:22:24,686 --> 00:22:28,276
Let's run and make sure we have


625
00:22:28,276 --> 00:22:34,446
a level picker.


626
00:22:34,636 --> 00:22:35,086
Okay.


627
00:22:35,386 --> 00:22:38,166
I can now tap the items in the


628
00:22:38,166 --> 00:22:40,956
level picker and see every


629
00:22:41,016 --> 00:22:46,566
single level of this museum.


630
00:22:48,516 --> 00:22:52,546
[ Applause ]


631
00:22:53,046 --> 00:22:54,436
Let's pause for a moment here


632
00:22:55,166 --> 00:23:00,056
and recap what we have done.


633
00:23:02,266 --> 00:23:04,966
First, we created model classes


634
00:23:05,016 --> 00:23:06,546
for all the IMDF feature types.


635
00:23:08,076 --> 00:23:09,996
Then we decoded the IMDF data


636
00:23:09,996 --> 00:23:13,026
using MKGeoJSONDecoder and


637
00:23:13,026 --> 00:23:14,836
created association between the


638
00:23:14,886 --> 00:23:15,476
feature types.


639
00:23:15,706 --> 00:23:19,886
And finally, we rendered IMDF


640
00:23:19,886 --> 00:23:22,396
data on a map view using


641
00:23:22,396 --> 00:23:24,326
addOverlays and addAnnotation APIs


642
00:23:24,326 --> 00:23:25,526
of the MapKit framework.


643
00:23:26,856 --> 00:23:28,046
You might have already noticed


644
00:23:28,046 --> 00:23:29,596
that our current map lacks any


645
00:23:29,596 --> 00:23:31,446
styling, and the annotations


646
00:23:31,506 --> 00:23:32,596
don't look very interesting.


647
00:23:33,226 --> 00:23:36,206
You can significantly improve


648
00:23:36,206 --> 00:23:37,776
the indoor map experience and


649
00:23:37,776 --> 00:23:38,966
functionality with two


650
00:23:38,966 --> 00:23:39,676
additional steps.


651
00:23:40,296 --> 00:23:44,006
First, by applying style to your


652
00:23:44,006 --> 00:23:44,876
indoor map elements.


653
00:23:46,036 --> 00:23:48,246
Styling your map is critical to


654
00:23:48,246 --> 00:23:49,896
how it is perceived and used.


655
00:23:51,226 --> 00:23:53,476
Use distinct colors and icons


656
00:23:53,546 --> 00:23:55,076
that match your app's team or


657
00:23:55,076 --> 00:23:56,186
your company's brand.


658
00:23:56,806 --> 00:23:59,796
And in the final step, we can


659
00:23:59,796 --> 00:24:02,826
make your app more useful by


660
00:24:02,826 --> 00:24:03,976
showing the user's current


661
00:24:03,976 --> 00:24:04,426
location.


662
00:24:05,896 --> 00:24:06,886
Remember that you can take


663
00:24:06,886 --> 00:24:08,466
advantage of accurate indoor


664
00:24:08,466 --> 00:24:11,276
location on iOS by participating


665
00:24:11,276 --> 00:24:13,076
in the indoor maps program and


666
00:24:13,116 --> 00:24:14,826
having your venue surveyed using


667
00:24:14,826 --> 00:24:16,106
the Indoor Survey app.


668
00:24:17,156 --> 00:24:18,826
Luckily, we had a team survey


669
00:24:18,826 --> 00:24:20,636
our dinosaur museum, so we can


670
00:24:20,636 --> 00:24:22,206
go ahead and add location or the


671
00:24:22,206 --> 00:24:23,206
blue dot to the map.


672
00:24:23,726 --> 00:24:26,726
Let's take a look at some of the


673
00:24:26,726 --> 00:24:27,956
code that we'll write to help


674
00:24:27,956 --> 00:24:28,566
with styling.


675
00:24:29,136 --> 00:24:32,436
We'll define a protocol called


676
00:24:32,436 --> 00:24:35,796
StylableFeature, which has a


677
00:24:35,966 --> 00:24:37,296
property and two methods.


678
00:24:38,506 --> 00:24:40,336
Every stylable feature must have


679
00:24:40,336 --> 00:24:40,896
geometry.


680
00:24:41,426 --> 00:24:45,146
And to apply styles to overlays,


681
00:24:45,276 --> 00:24:46,596
we will implement the configure


682
00:24:46,596 --> 00:24:47,936
overlay renderer method.


683
00:24:49,506 --> 00:24:51,006
Similarly, to apply styles to


684
00:24:51,006 --> 00:24:52,856
the annotations, we'll implement


685
00:24:52,896 --> 00:24:54,206
the configure annotation view


686
00:24:54,206 --> 00:24:54,646
method.


687
00:24:55,196 --> 00:24:57,576
I'll switch to Xcode and show


688
00:24:57,576 --> 00:24:59,000
you how this can be done.


689
00:25:07,316 --> 00:25:09,376
To apply the styles, we'll take


690
00:25:09,376 --> 00:25:11,196
advantage of the asset catalogue


691
00:25:11,806 --> 00:25:14,776
where I have added colors very


692
00:25:14,846 --> 00:25:17,466
specific to the indoor map we


693
00:25:17,466 --> 00:25:18,256
are using here.


694
00:25:18,916 --> 00:25:22,766
So, to apply these colors, I'll


695
00:25:22,766 --> 00:25:24,856
go to a file called Styles.swift


696
00:25:26,016 --> 00:25:27,486
where I have defined the


697
00:25:27,486 --> 00:25:28,646
StylableFeature protocol.


698
00:25:30,206 --> 00:25:32,296
Now, let's say we want to apply


699
00:25:32,296 --> 00:25:33,726
some styling to the amenity


700
00:25:33,726 --> 00:25:34,136
features.


701
00:25:35,616 --> 00:25:38,086
We can do that by extending the


702
00:25:38,086 --> 00:25:40,826
Amenity class to adopt the


703
00:25:40,826 --> 00:25:42,066
StylableFeature protocol.


704
00:25:42,146 --> 00:25:45,846
And because amenities have point


705
00:25:45,846 --> 00:25:47,926
geometry, we will implement the


706
00:25:47,966 --> 00:25:49,246
configure annotation view


707
00:25:49,246 --> 00:25:50,996
method, where we set the


708
00:25:51,046 --> 00:25:52,466
annotation view's background


709
00:25:52,516 --> 00:25:54,176
color to a default fill color


710
00:25:54,176 --> 00:25:55,296
from the asset catalogue.


711
00:25:56,546 --> 00:25:58,016
We also take this opportunity to


712
00:25:58,106 --> 00:25:59,606
set the display priority of the


713
00:25:59,606 --> 00:26:01,636
annotation to a default low.


714
00:26:02,216 --> 00:26:05,216
In a similar way, we can extend


715
00:26:05,216 --> 00:26:06,926
the unit class to adopt the


716
00:26:06,926 --> 00:26:08,256
StylableFeature protocol to


717
00:26:08,256 --> 00:26:09,296
apply styling to units.


718
00:26:10,746 --> 00:26:12,426
But for units, we want to apply


719
00:26:12,426 --> 00:26:14,976
unique colors for every category


720
00:26:14,976 --> 00:26:15,466
of units.


721
00:26:16,546 --> 00:26:18,346
So, to do that, I will define


722
00:26:18,346 --> 00:26:19,876
and enumeration type called


723
00:26:20,396 --> 00:26:24,296
StylableCategory, and the


724
00:26:24,296 --> 00:26:26,306
values in this are the category


725
00:26:26,306 --> 00:26:27,506
names that we wish to style.


726
00:26:27,906 --> 00:26:32,246
And because units have polygon


727
00:26:32,246 --> 00:26:34,496
geometry, we will implement the


728
00:26:34,526 --> 00:26:36,016
configure overlay renderer


729
00:26:36,016 --> 00:26:36,436
method.


730
00:26:36,996 --> 00:26:41,916
And in this method, we handle


731
00:26:41,916 --> 00:26:44,026
the different values of the unit


732
00:26:44,086 --> 00:26:45,796
category and apply different


733
00:26:45,896 --> 00:26:50,666
fill colors to each one of them.


734
00:26:50,886 --> 00:26:53,206
I'll now switch to the main view


735
00:26:53,206 --> 00:26:55,736
controller class, and in my


736
00:26:55,736 --> 00:26:57,326
mapView renderer for overlay


737
00:26:57,326 --> 00:27:00,216
method, instead of using the


738
00:27:00,376 --> 00:27:02,876
same stroke and fill color for


739
00:27:02,916 --> 00:27:05,316
every polygon, we will now call


740
00:27:05,706 --> 00:27:07,516
configure overlay renderer


741
00:27:07,516 --> 00:27:10,776
method to apply feature-specific


742
00:27:10,916 --> 00:27:11,346
styling.


743
00:27:11,936 --> 00:27:16,266
In a similar way, for


744
00:27:16,266 --> 00:27:18,456
annotations, I will call


745
00:27:18,986 --> 00:27:23,336
configure annotation view and


746
00:27:23,696 --> 00:27:25,746
apply feature-specific styles to


747
00:27:25,746 --> 00:27:26,306
annotations.


748
00:27:26,956 --> 00:27:31,156
We want to render occupants as a


749
00:27:31,216 --> 00:27:33,876
simple dot and a label and the


750
00:27:33,876 --> 00:27:35,936
amenities with just gray dots.


751
00:27:36,756 --> 00:27:38,776
To do that, I have implemented


752
00:27:39,186 --> 00:27:40,736
custom annotation views and


753
00:27:40,736 --> 00:27:42,036
included them in the project.


754
00:27:43,166 --> 00:27:45,376
Here, we're calling the


755
00:27:45,376 --> 00:27:48,336
configure annotation view and


756
00:27:48,416 --> 00:27:50,386
set the feature-specific style


757
00:27:50,496 --> 00:27:51,516
to that annotation view.


758
00:27:52,106 --> 00:27:55,296
So, let's run this app and see


759
00:27:55,296 --> 00:27:56,556
if our map looks any different.


760
00:27:57,156 --> 00:27:57,256
Okay.


761
00:28:00,876 --> 00:28:03,566
This definitely looks better


762
00:28:03,566 --> 00:28:05,076
than what we had before.


763
00:28:06,246 --> 00:28:08,516
Now, we can see the different


764
00:28:08,516 --> 00:28:11,846
units in different colors, and


765
00:28:11,846 --> 00:28:13,636
the gray dots are our amenity


766
00:28:14,206 --> 00:28:14,516
points.


767
00:28:15,426 --> 00:28:17,246
And the occupants such as the


768
00:28:17,246 --> 00:28:18,566
Jurassic Table Restaurant is


769
00:28:18,566 --> 00:28:20,336
displayed with a dot and a


770
00:28:20,336 --> 00:28:20,676
label.


771
00:28:21,256 --> 00:28:23,626
But something is not right here.


772
00:28:24,226 --> 00:28:27,696
This area on the map, I believe,


773
00:28:27,916 --> 00:28:30,056
is a unit of category walkway,


774
00:28:30,146 --> 00:28:32,466
and its color is not so


775
00:28:32,466 --> 00:28:34,176
different from the other units


776
00:28:34,176 --> 00:28:34,596
around it.


777
00:28:35,686 --> 00:28:37,406
Let's see if we can fix that.


778
00:28:41,676 --> 00:28:44,296
To do that, I'll go to the


779
00:28:44,296 --> 00:28:46,616
Style.swift file and here let's


780
00:28:46,616 --> 00:28:50,566
add a value of type, for the


781
00:28:50,566 --> 00:28:51,466
walkway category.


782
00:28:52,446 --> 00:28:53,996
And we must handle this in a


783
00:28:54,026 --> 00:28:55,366
configure overlay renderer


784
00:28:56,176 --> 00:28:56,326
method.


785
00:28:58,576 --> 00:29:01,326
Where we are setting the color,


786
00:29:01,326 --> 00:29:03,016
the fill color of the walkway to


787
00:29:03,276 --> 00:29:04,596
a color called walkway fill,


788
00:29:05,156 --> 00:29:07,556
which should be there in our


789
00:29:07,556 --> 00:29:08,296
asset catalogue.


790
00:29:09,006 --> 00:29:09,546
Let's make sure.


791
00:29:10,366 --> 00:29:10,656
Okay.


792
00:29:10,656 --> 00:29:12,466
We have a white color set for


793
00:29:12,936 --> 00:29:13,286
that.


794
00:29:14,096 --> 00:29:15,986
I'll run the app and see if we


795
00:29:16,106 --> 00:29:20,096
have fixed that problem.


796
00:29:20,206 --> 00:29:20,486
Okay.


797
00:29:20,486 --> 00:29:20,836
Cool.


798
00:29:21,546 --> 00:29:22,656
This definitely looks better.


799
00:29:23,376 --> 00:29:25,386
Simply by applying a distinct


800
00:29:25,386 --> 00:29:27,416
color to the walkways, the


801
00:29:27,416 --> 00:29:29,416
appearance of our map has improved


802
00:29:29,416 --> 00:29:30,186
significantly.


803
00:29:30,806 --> 00:29:35,216
Let's make one more enhancement


804
00:29:35,216 --> 00:29:35,446
here.


805
00:29:36,686 --> 00:29:39,316
The gray dots for the amenities


806
00:29:39,316 --> 00:29:41,436
are good, but I think icons are


807
00:29:41,436 --> 00:29:41,716
better.


808
00:29:43,026 --> 00:29:44,346
And what's better than icons?


809
00:29:44,596 --> 00:29:45,456
Dinosaur icons.


810
00:29:45,926 --> 00:29:47,706
So, let's use them.


811
00:29:49,196 --> 00:29:51,596
Our designer has given us some


812
00:29:51,596 --> 00:29:52,846
icons that we have included in


813
00:29:52,846 --> 00:29:53,336
our project.


814
00:29:54,336 --> 00:29:58,276
Let's add these to the map.


815
00:29:58,276 --> 00:30:00,136
I'll go to my Styles.swift file,


816
00:30:01,206 --> 00:30:03,796
and the dots we saw were for


817
00:30:03,856 --> 00:30:05,576
amenities, so let's make a small


818
00:30:05,576 --> 00:30:05,906
change here.


819
00:30:13,136 --> 00:30:15,486
For convenience, we have set the


820
00:30:15,486 --> 00:30:17,186
icon's name to be the same as


821
00:30:17,186 --> 00:30:20,176
the name of the category for the


822
00:30:20,176 --> 00:30:20,876
amenity.


823
00:30:22,186 --> 00:30:23,276
So we look at the asset


824
00:30:23,276 --> 00:30:25,266
catalogue for that particular


825
00:30:25,266 --> 00:30:25,666
name.


826
00:30:26,096 --> 00:30:28,556
If we find an icon, we set it to


827
00:30:28,556 --> 00:30:29,926
the annotation view's image


828
00:30:30,006 --> 00:30:33,256
property, but if we don't, then


829
00:30:33,256 --> 00:30:34,476
we continue displaying the gray


830
00:30:34,476 --> 00:30:34,706
dots.


831
00:30:35,426 --> 00:30:38,826
Let's run the app and see.


832
00:30:41,376 --> 00:30:42,036
Cool.


833
00:30:42,536 --> 00:30:43,326
Now we have some


834
00:30:43,326 --> 00:30:44,976
beautiful-looking icons on the


835
00:30:44,976 --> 00:30:46,996
map, and we can clearly see


836
00:30:46,996 --> 00:30:48,326
where the restrooms are and the


837
00:30:48,326 --> 00:30:50,846
escalator and the elevator and


838
00:30:50,846 --> 00:30:53,576
more importantly the exhibit


839
00:30:53,676 --> 00:30:55,656
called T-Rex.


840
00:30:58,516 --> 00:31:03,206
[ Applause ]


841
00:31:03,706 --> 00:31:04,436
One last thing.


842
00:31:05,266 --> 00:31:06,826
We know that we have indoor


843
00:31:06,826 --> 00:31:08,296
location available at this


844
00:31:08,396 --> 00:31:08,906
museum.


845
00:31:09,606 --> 00:31:10,956
So let's take advantage of that.


846
00:31:11,556 --> 00:31:15,936
Let's add the user's location to


847
00:31:15,936 --> 00:31:16,246
the map.


848
00:31:17,456 --> 00:31:18,866
To do so, I'll go to the map


849
00:31:18,926 --> 00:31:21,936
view and enable the user


850
00:31:21,936 --> 00:31:22,826
location from here.


851
00:31:23,436 --> 00:31:28,306
In my view controller, first


852
00:31:29,276 --> 00:31:32,276
I'll add a property of type


853
00:31:32,276 --> 00:31:36,596
CLLocationManager and then use


854
00:31:36,596 --> 00:31:39,946
this property to request the


855
00:31:40,076 --> 00:31:41,606
user's permission to use


856
00:31:41,736 --> 00:31:43,656
location services while the app


857
00:31:43,656 --> 00:31:44,506
is in the foreground.


858
00:31:45,046 --> 00:31:48,596
And every time we get a location


859
00:31:48,596 --> 00:31:50,636
update, we get a callback to


860
00:31:50,636 --> 00:31:54,176
MKMapViewDelegate method, mapView


861
00:31:54,176 --> 00:31:56,866
did update user location.


862
00:31:57,506 --> 00:32:00,356
So let's handle the location


863
00:32:00,356 --> 00:32:00,676
updates.


864
00:32:01,296 --> 00:32:04,716
First, we check to see if the


865
00:32:04,716 --> 00:32:06,216
user is inside the venue.


866
00:32:07,096 --> 00:32:08,576
If the user is inside, there's


867
00:32:08,576 --> 00:32:09,656
no need to update the map.


868
00:32:11,006 --> 00:32:12,646
If the user is outside, there's


869
00:32:12,646 --> 00:32:14,446
no need to update the map, but


870
00:32:14,446 --> 00:32:16,586
if the user is inside, then we


871
00:32:16,586 --> 00:32:18,816
use the CLLocation property on


872
00:32:18,956 --> 00:32:20,756
MKUserLocation to get the


873
00:32:20,756 --> 00:32:21,856
user's coordinates.


874
00:32:22,586 --> 00:32:26,156
CLLocation not only provides


875
00:32:26,226 --> 00:32:27,856
the user's longitude and


876
00:32:27,856 --> 00:32:29,826
latitude but also the floor


877
00:32:29,826 --> 00:32:31,936
information if your venue has


878
00:32:31,936 --> 00:32:33,886
been surveyed and the user is


879
00:32:33,886 --> 00:32:35,616
inside that location.


880
00:32:36,186 --> 00:32:39,556
So, we'll use the floor


881
00:32:39,556 --> 00:32:41,976
information from the CLLocation


882
00:32:41,976 --> 00:32:44,446
object and update our map using


883
00:32:44,446 --> 00:32:46,366
the showFeaturesForOrdinal to


884
00:32:46,926 --> 00:32:48,656
display the user's location.


885
00:32:49,606 --> 00:32:50,976
Let's run the app one more time.


886
00:32:58,936 --> 00:33:03,016
I'll hit allow, and here we have


887
00:33:03,016 --> 00:33:03,976
the user's indoor location.


888
00:33:04,516 --> 00:33:08,276
[ Applause ]


889
00:33:08,776 --> 00:33:10,316
I must mention that if the user


890
00:33:10,316 --> 00:33:11,856
were to switch between levels,


891
00:33:11,946 --> 00:33:14,216
the map will update the user's


892
00:33:14,326 --> 00:33:15,026
current level.


893
00:33:15,746 --> 00:33:17,356
And that's all I have for you in


894
00:33:17,356 --> 00:33:17,816
this demo.


895
00:33:18,016 --> 00:33:19,046
I'll now hand over to Stephane,


896
00:33:19,046 --> 00:33:22,196
who will show you how to display


897
00:33:22,396 --> 00:33:23,836
and indoor map in a web app.


898
00:33:24,516 --> 00:33:29,500
[ Applause ]


899
00:33:37,276 --> 00:33:37,516
>> All right.


900
00:33:37,846 --> 00:33:39,796
With MapKit JS we can achieve


901
00:33:39,926 --> 00:33:42,066
similar indoor maps look and


902
00:33:42,066 --> 00:33:43,606
feel on the web.


903
00:33:44,666 --> 00:33:46,626
I will demonstrate how to render


904
00:33:46,666 --> 00:33:49,136
our map with MapKit JS and bring


905
00:33:49,136 --> 00:33:50,816
the same indoor maps experience


906
00:33:51,126 --> 00:33:52,496
to all major browser


907
00:33:52,496 --> 00:33:53,206
implementations.


908
00:33:53,856 --> 00:33:56,396
The key MapKit JS method that we


909
00:33:56,396 --> 00:33:58,366
will use for this demo is import


910
00:33:58,366 --> 00:33:58,846
GeoJSON.


911
00:33:59,666 --> 00:34:00,866
ImportGeoJSON takes two


912
00:34:00,866 --> 00:34:01,446
parameters.


913
00:34:01,696 --> 00:34:03,336
The first one is the GeoJSON


914
00:34:03,336 --> 00:34:04,826
feature to convert and the


915
00:34:04,826 --> 00:34:07,226
second one is GeoJSON delegate


916
00:34:07,226 --> 00:34:08,835
object that allows us to


917
00:34:08,835 --> 00:34:11,525
customize how items are created.


918
00:34:12,525 --> 00:34:14,216
In this basic example, we have


919
00:34:14,436 --> 00:34:15,065
two delegates.


920
00:34:15,966 --> 00:34:17,735
GeoJSONDidError that allows us


921
00:34:17,735 --> 00:34:20,025
to react on errors and GeoJSON


922
00:34:20,025 --> 00:34:21,926
did complete that gives us an


923
00:34:21,926 --> 00:34:23,186
array of the items that were


924
00:34:23,186 --> 00:34:23,755
just created.


925
00:34:28,356 --> 00:34:30,065
Then we show these items by


926
00:34:30,065 --> 00:34:32,056
giving them to the showItems


927
00:34:32,056 --> 00:34:32,335
method.


928
00:34:33,176 --> 00:34:34,666
We can also use addItems;


929
00:34:34,896 --> 00:34:36,216
the difference being that add


930
00:34:36,216 --> 00:34:38,196
items does not center the map on


931
00:34:38,196 --> 00:34:38,936
the added elements.


932
00:34:41,656 --> 00:34:43,386
In order to style the overlays,


933
00:34:43,606 --> 00:34:45,626
like polygons and lines, we can


934
00:34:45,626 --> 00:34:46,815
use styleForOverlay.


935
00:34:47,696 --> 00:34:49,235
It takes a newly created overlay


936
00:34:49,235 --> 00:34:51,226
as a parameter and expects a


937
00:34:51,226 --> 00:34:53,056
style object to be returned.


938
00:34:54,005 --> 00:34:55,585
We can, of course, craft a brand


939
00:34:55,585 --> 00:34:57,296
new one, but we can also use the


940
00:34:57,296 --> 00:34:59,066
default one that is associated


941
00:34:59,066 --> 00:35:00,936
with the overlay through the


942
00:35:00,936 --> 00:35:04,086
style property and customize it.


943
00:35:06,596 --> 00:35:08,796
We can also customize how points


944
00:35:08,796 --> 00:35:10,846
are rendered with item for


945
00:35:10,846 --> 00:35:11,076
point.


946
00:35:11,896 --> 00:35:13,066
ItemForPoint takes a


947
00:35:13,066 --> 00:35:14,436
coordinate of the point feature


948
00:35:14,526 --> 00:35:16,906
as a parameter and should return


949
00:35:17,026 --> 00:35:18,196
an item.


950
00:35:18,916 --> 00:35:20,926
Here, we return a marker


951
00:35:20,926 --> 00:35:21,386
annotation.


952
00:35:22,446 --> 00:35:23,996
We can, of course, set options


953
00:35:24,086 --> 00:35:25,576
like the title and the color.


954
00:35:26,136 --> 00:35:28,546
We can also set the display


955
00:35:28,546 --> 00:35:29,016
priority.


956
00:35:29,766 --> 00:35:31,416
When the zoom level is too low


957
00:35:31,416 --> 00:35:32,636
and that many annotations are


958
00:35:32,636 --> 00:35:33,826
present on the map, they may


959
00:35:33,826 --> 00:35:34,146
collide.


960
00:35:35,006 --> 00:35:37,106
There are multiple strategies to


961
00:35:37,106 --> 00:35:39,336
deal with this issue like


962
00:35:39,336 --> 00:35:40,716
annotation clustering or


963
00:35:40,716 --> 00:35:41,496
display priorities.


964
00:35:42,566 --> 00:35:43,776
MapView JS may use display


965
00:35:43,776 --> 00:35:46,276
priorities to decide what


966
00:35:46,476 --> 00:35:48,226
annotations it should hide


967
00:35:48,226 --> 00:35:49,000
first.


968
00:35:50,676 --> 00:35:52,386
With importGeoJSON we had


969
00:35:52,386 --> 00:35:54,496
everything that needed to create


970
00:35:54,846 --> 00:35:55,776
our dinosaur map.


971
00:35:56,176 --> 00:35:56,816
So let's get started.


972
00:36:14,426 --> 00:36:15,486
Alright. So we start off our


973
00:36:15,486 --> 00:36:16,996
project with a simple mapView.


974
00:36:17,606 --> 00:36:19,636
I'm running an HTTP server that


975
00:36:19,636 --> 00:36:20,306
serves our web


976
00:36:20,306 --> 00:36:22,216
assets and is responsible for


977
00:36:22,216 --> 00:36:23,586
generating the MapKit JS


978
00:36:23,736 --> 00:36:24,626
authorization token.


979
00:36:25,886 --> 00:36:27,786
To draw the dinosaur map on the


980
00:36:27,786 --> 00:36:29,526
browser, we need to load the


981
00:36:29,526 --> 00:36:31,476
IMDF files and create MapKit


982
00:36:31,476 --> 00:36:32,626
items for each feature they


983
00:36:32,626 --> 00:36:33,016
contain.


984
00:36:33,846 --> 00:36:35,136
That sounds like a difficult


985
00:36:35,316 --> 00:36:37,166
task, but it's really not thanks


986
00:36:37,166 --> 00:36:38,216
to the importGeoJSON method


987
00:36:38,216 --> 00:36:40,396
that we just saw and the fact


988
00:36:40,396 --> 00:36:42,226
that IMDF uses GeoJSON.


989
00:36:42,816 --> 00:36:45,376
In the iOS demo, you saw


990
00:36:45,376 --> 00:36:47,496
that we created a graph of


991
00:36:47,496 --> 00:36:48,056
features.


992
00:36:48,726 --> 00:36:49,846
In this demo, we will take a


993
00:36:49,846 --> 00:36:51,106
slightly different approach by


994
00:36:51,516 --> 00:36:53,626
filtering the features on


995
00:36:53,746 --> 00:36:54,236
demand.


996
00:36:55,256 --> 00:36:56,936
We will create a class called


997
00:36:56,936 --> 00:36:58,946
IMDF archive that will provide


998
00:36:58,946 --> 00:37:00,566
the essential methods to load,


999
00:37:00,996 --> 00:37:02,486
organize, and filter the


1000
00:37:02,486 --> 00:37:02,926
features.


1001
00:37:11,066 --> 00:37:12,726
The static load method downloads


1002
00:37:12,726 --> 00:37:13,826
all the files that we need from


1003
00:37:13,826 --> 00:37:16,106
the server, then aggregates the


1004
00:37:16,106 --> 00:37:17,676
features into an array and


1005
00:37:17,676 --> 00:37:18,846
passes that array to the


1006
00:37:18,846 --> 00:37:20,436
constructor, and then we create


1007
00:37:20,436 --> 00:37:23,176
two objects, featureById and


1008
00:37:23,256 --> 00:37:23,956
featuresByType.


1009
00:37:24,076 --> 00:37:25,456
They will help us afterwards.


1010
00:37:27,076 --> 00:37:30,076
Now we can call this method to


1011
00:37:30,076 --> 00:37:33,126
load our features, and we can


1012
00:37:33,126 --> 00:37:35,186
use import GeoJSON to create


1013
00:37:35,186 --> 00:37:36,746
MapKit items for each of


1014
00:37:39,556 --> 00:37:39,666
them.


1015
00:37:39,886 --> 00:37:40,166
Okay.


1016
00:37:40,756 --> 00:37:43,466
And now what we have to do is to


1017
00:37:43,776 --> 00:37:46,206
call showItems with these newly


1018
00:37:46,206 --> 00:37:47,096
created map items.


1019
00:37:47,376 --> 00:37:47,886
So let's do that.


1020
00:37:56,186 --> 00:37:56,296
Okay.


1021
00:37:56,556 --> 00:37:58,306
Let's try.


1022
00:37:59,036 --> 00:37:59,136
Okay.


1023
00:38:02,436 --> 00:38:05,706
There is a lot of geometries


1024
00:38:05,706 --> 00:38:07,166
showing up on our map, and


1025
00:38:07,166 --> 00:38:08,996
that's expected because we asked


1026
00:38:09,056 --> 00:38:10,296
MapKit JS to render all the


1027
00:38:10,296 --> 00:38:11,166
features in our venue.


1028
00:38:12,056 --> 00:38:13,386
What we need to do is to retain


1029
00:38:13,386 --> 00:38:14,426
only the feature types that we


1030
00:38:14,426 --> 00:38:16,706
want and to filter them by


1031
00:38:16,706 --> 00:38:17,216
level.


1032
00:38:18,026 --> 00:38:19,346
So let's implement a few methods


1033
00:38:19,346 --> 00:38:21,256
in our IMDFArchive class


1034
00:38:21,896 --> 00:38:23,766
that returns only the features


1035
00:38:23,796 --> 00:38:25,156
of a certain type on a given


1036
00:38:25,156 --> 00:38:25,496
ordinal.


1037
00:38:26,536 --> 00:38:27,666
We'll start with levels.


1038
00:38:33,426 --> 00:38:33,536
Okay.


1039
00:38:33,766 --> 00:38:35,416
So we retain only the levels


1040
00:38:35,416 --> 00:38:37,236
that have the right ordinal, and


1041
00:38:37,236 --> 00:38:38,516
similarly we can do the same


1042
00:38:38,516 --> 00:38:38,976
thing for units.


1043
00:38:46,046 --> 00:38:46,146
Okay.


1044
00:38:46,146 --> 00:38:46,946
Same thing with the level ID.


1045
00:38:48,346 --> 00:38:49,436
And we can do also the same


1046
00:38:49,436 --> 00:38:50,766
thing for amenities in units,


1047
00:38:51,456 --> 00:38:54,786
openings on level, and amenities


1048
00:38:55,176 --> 00:38:55,936
and anchors on level.


1049
00:39:04,076 --> 00:39:05,116
Let's pause for a moment here.


1050
00:39:05,696 --> 00:39:07,356
The fact that IMDF files are


1051
00:39:07,546 --> 00:39:08,696
plain old GeoJSON makes


1052
00:39:08,696 --> 00:39:09,646
our job so easy.


1053
00:39:10,586 --> 00:39:11,936
There is not complicated parsing


1054
00:39:11,936 --> 00:39:12,776
or decoding logic.


1055
00:39:13,566 --> 00:39:14,436
We only have to know what


1056
00:39:14,436 --> 00:39:16,056
properties we expect depending


1057
00:39:16,056 --> 00:39:16,726
on the feature type.


1058
00:39:18,146 --> 00:39:19,706
Okay, so now let's rewrite our


1059
00:39:19,706 --> 00:39:20,406
rendering logic.


1060
00:39:22,056 --> 00:39:25,266
We will create a function called


1061
00:39:25,266 --> 00:39:26,496
createItemsForOrdinal that


1062
00:39:26,546 --> 00:39:28,156
will create the items for a


1063
00:39:28,156 --> 00:39:28,726
given ordinal.


1064
00:39:30,206 --> 00:39:31,266
Now, what we need to do is to


1065
00:39:31,266 --> 00:39:32,906
get the features for that


1066
00:39:32,906 --> 00:39:33,206
ordinal.


1067
00:39:33,206 --> 00:39:34,426
So let's start with levels,


1068
00:39:35,066 --> 00:39:38,826
okay, and for each of these


1069
00:39:38,826 --> 00:39:40,226
levels, we will get all the


1070
00:39:40,906 --> 00:39:44,496
units and similarly amenities


1071
00:39:44,496 --> 00:39:44,976
and openings.


1072
00:39:49,146 --> 00:39:49,256
Okay.


1073
00:39:49,476 --> 00:39:50,886
So that's all the features that


1074
00:39:50,956 --> 00:39:53,446
we are interested into right


1075
00:39:57,256 --> 00:39:57,336
now.


1076
00:39:57,636 --> 00:39:57,946
Okay.


1077
00:39:58,846 --> 00:40:00,286
And now what we need to do is to


1078
00:40:00,286 --> 00:40:00,736
show them.


1079
00:40:01,286 --> 00:40:02,816
So, we call create items for


1080
00:40:02,816 --> 00:40:05,386
ordinal with an ordinal, let's


1081
00:40:05,386 --> 00:40:06,846
say ordinal 1, which would be


1082
00:40:06,896 --> 00:40:08,886
second floor and add them to the


1083
00:40:08,886 --> 00:40:08,976
map.


1084
00:40:14,496 --> 00:40:14,746
Alright.


1085
00:40:15,836 --> 00:40:20,076
Let's write that.


1086
00:40:20,226 --> 00:40:20,476
Okay.


1087
00:40:20,476 --> 00:40:22,116
So, that's a lot better.


1088
00:40:22,116 --> 00:40:23,786
Now we have a clean view over


1089
00:40:23,786 --> 00:40:25,006
the structure of the second


1090
00:40:25,006 --> 00:40:25,216
floor.


1091
00:40:26,176 --> 00:40:27,586
Now, let's add a level picker.


1092
00:40:28,486 --> 00:40:29,916
I already implemented a simple


1093
00:40:29,916 --> 00:40:32,166
level picker that is just a basic


1094
00:40:32,166 --> 00:40:32,646
HTML list.


1095
00:40:32,736 --> 00:40:34,146
That's what I did with level


1096
00:40:34,146 --> 00:40:35,036
names of our venue.


1097
00:40:35,986 --> 00:40:36,896
You can check out the


1098
00:40:36,896 --> 00:40:38,236
implementation details in the


1099
00:40:38,236 --> 00:40:39,116
sample code that's linked to


1100
00:40:39,116 --> 00:40:39,576
this session.


1101
00:40:40,906 --> 00:40:42,516
The level picker will use our


1102
00:40:42,896 --> 00:40:43,866
createItemsForOrdinal


1103
00:40:44,046 --> 00:40:46,206
function to create items if


1104
00:40:46,726 --> 00:40:46,886
needed.


1105
00:40:47,636 --> 00:40:49,126
I already imported the script, so


1106
00:40:49,126 --> 00:40:50,116
the only thing that I need to do


1107
00:40:50,116 --> 00:40:55,966
here is to instantiate it and


1108
00:40:56,206 --> 00:40:57,756
select the ordinal 1, so that


1109
00:40:57,756 --> 00:40:59,336
the second floor shows up when


1110
00:40:59,336 --> 00:41:00,056
the page is loaded.


1111
00:41:00,666 --> 00:41:04,026
Let's try again.


1112
00:41:05,586 --> 00:41:05,816
Okay.


1113
00:41:05,966 --> 00:41:08,226
So, now I can switch between


1114
00:41:08,226 --> 00:41:08,586
floors.


1115
00:41:09,156 --> 00:41:12,636
Okay, so now what we need to do


1116
00:41:12,636 --> 00:41:13,826
is to add some styling.


1117
00:41:14,826 --> 00:41:15,776
All units look the same,


1118
00:41:16,096 --> 00:41:18,006
and we cannot even distinguish


1119
00:41:18,006 --> 00:41:19,236
the opening LineStrings from the


1120
00:41:19,236 --> 00:41:20,416
rest of the geometries, which


1121
00:41:20,416 --> 00:41:21,486
gives us the false impression


1122
00:41:21,486 --> 00:41:23,506
that all the units don't have


1123
00:41:23,506 --> 00:41:23,896
any doors.


1124
00:41:24,276 --> 00:41:25,056
That's a bit confusing.


1125
00:41:26,006 --> 00:41:27,216
We can customize the style of


1126
00:41:27,216 --> 00:41:28,286
polygons and lines by


1127
00:41:28,286 --> 00:41:29,266
implementing the style for


1128
00:41:29,266 --> 00:41:32,266
overlay function in the GeoJSON


1129
00:41:32,266 --> 00:41:33,146
delegate object.


1130
00:41:33,906 --> 00:41:36,456
So, let's start by drawing our


1131
00:41:36,456 --> 00:41:36,976
openings in white.


1132
00:41:43,166 --> 00:41:43,276
Okay.


1133
00:41:43,516 --> 00:41:45,356
So that's really simple.


1134
00:41:45,356 --> 00:41:47,056
We just select the opening


1135
00:41:47,056 --> 00:41:49,006
features and we set the stroke


1136
00:41:49,006 --> 00:41:49,556
color to white.


1137
00:41:51,786 --> 00:41:54,436
And as we did in the iOS app,


1138
00:41:54,436 --> 00:41:57,126
let's set a fill color to units


1139
00:41:57,236 --> 00:41:58,356
depending on their category.


1140
00:41:59,166 --> 00:42:00,776
In order to do that, let's


1141
00:42:00,776 --> 00:42:01,856
create an object called unit


1142
00:42:01,856 --> 00:42:01,976
style.


1143
00:42:09,506 --> 00:42:09,866
Okay.


1144
00:42:09,976 --> 00:42:11,786
So that object will contain the


1145
00:42:11,786 --> 00:42:13,886
styling properties for each unit


1146
00:42:13,886 --> 00:42:15,386
category that we want to show.


1147
00:42:16,566 --> 00:42:18,916
But we also need a default one


1148
00:42:18,916 --> 00:42:21,696
if we don't have a style for


1149
00:42:21,696 --> 00:42:23,106
some categories, so let's do


1150
00:42:23,806 --> 00:42:27,466
that first.


1151
00:42:27,646 --> 00:42:29,356
Okay, and now we can set the


1152
00:42:29,356 --> 00:42:30,966
styles for the unit categories


1153
00:42:30,966 --> 00:42:32,000
that we care about.


1154
00:42:35,876 --> 00:42:36,096
Okay.


1155
00:42:37,236 --> 00:42:38,796
So, now we can go ahead and use


1156
00:42:38,796 --> 00:42:41,946
that object to apply a style to


1157
00:42:41,946 --> 00:42:42,926
unit overlays.


1158
00:42:43,556 --> 00:42:43,656
Okay.


1159
00:42:52,876 --> 00:42:56,996
So what we do here is to get the


1160
00:42:56,996 --> 00:42:58,686
proper unit style with the


1161
00:42:58,686 --> 00:43:01,556
category and set fillOpacity,


1162
00:43:01,666 --> 00:43:03,056
strokeColor, and fillColor to


1163
00:43:03,056 --> 00:43:05,556
the style values or setting the


1164
00:43:05,556 --> 00:43:06,576
default if there isn't.


1165
00:43:08,546 --> 00:43:09,686
That's actually a good example


1166
00:43:09,686 --> 00:43:11,516
of how easy it can be to render


1167
00:43:11,516 --> 00:43:12,186
IMDF maps.


1168
00:43:13,336 --> 00:43:14,426
Most of the styling can be done


1169
00:43:14,546 --> 00:43:16,216
by using a combination of the


1170
00:43:16,216 --> 00:43:17,386
feature type and the category.


1171
00:43:17,866 --> 00:43:19,596
Of course, we can also rely on


1172
00:43:19,646 --> 00:43:21,296
all other properties as well.


1173
00:43:22,566 --> 00:43:22,836
Okay.


1174
00:43:22,836 --> 00:43:23,816
So, let's see the changes.


1175
00:43:24,476 --> 00:43:24,576
Okay.


1176
00:43:27,976 --> 00:43:29,526
That's a lot better.


1177
00:43:29,876 --> 00:43:31,206
Now we can see where the


1178
00:43:31,206 --> 00:43:33,756
walkways are and what units our


1179
00:43:33,756 --> 00:43:36,636
visitors can access to.


1180
00:43:36,886 --> 00:43:38,896
Now, you may also have noticed


1181
00:43:39,706 --> 00:43:41,446
all these red pins on the map.


1182
00:43:42,216 --> 00:43:43,256
They are amenities.


1183
00:43:43,886 --> 00:43:45,416
Remember, amenities have point


1184
00:43:45,416 --> 00:43:47,886
geometries, and importGeoJSON


1185
00:43:47,886 --> 00:43:50,416
renders point geometries with


1186
00:43:50,416 --> 00:43:51,656
marker annotations by default.


1187
00:43:53,526 --> 00:43:55,106
So, what we would really like to


1188
00:43:55,106 --> 00:43:56,596
have here is using the same


1189
00:43:56,596 --> 00:43:58,316
icons as we did in the iOS app.


1190
00:43:58,766 --> 00:44:01,356
For that, we will use MapKit JS


1191
00:44:01,356 --> 00:44:02,336
ImageAnnotations.


1192
00:44:03,576 --> 00:44:04,496
As we saw earlier, we can


1193
00:44:04,496 --> 00:44:05,946
replace the default behavior of


1194
00:44:05,946 --> 00:44:07,536
importGeoJSON by providing our


1195
00:44:07,536 --> 00:44:10,236
own implementation of item for


1196
00:44:10,236 --> 00:44:10,496
point.


1197
00:44:11,176 --> 00:44:11,686
So let's do that.


1198
00:44:21,046 --> 00:44:21,196
Okay.


1199
00:44:21,796 --> 00:44:23,406
So what we do here is inserting


1200
00:44:23,406 --> 00:44:25,116
a name from the properties or


1201
00:44:25,116 --> 00:44:26,216
fall back to the category if


1202
00:44:26,216 --> 00:44:28,656
there isn't and use that name as


1203
00:44:28,656 --> 00:44:30,756
a title of our annotation.


1204
00:44:32,296 --> 00:44:33,586
When the annotation is clicked,


1205
00:44:34,036 --> 00:44:35,196
the title will appear in the


1206
00:44:35,196 --> 00:44:35,516
callout.


1207
00:44:36,466 --> 00:44:38,236
We also set a relatively low


1208
00:44:38,236 --> 00:44:40,706
priority to all amenities so


1209
00:44:40,706 --> 00:44:42,686
that we can set a higher one to


1210
00:44:42,686 --> 00:44:43,876
the more important amenities,


1211
00:44:44,296 --> 00:44:45,166
which are exhibits.


1212
00:44:45,346 --> 00:44:47,116
We'll do that in a short while.


1213
00:44:49,296 --> 00:44:51,366
And finally, if there is, if we


1214
00:44:51,366 --> 00:44:55,946
have a URL for our icon, we


1215
00:44:55,946 --> 00:44:57,146
create an image annotation.


1216
00:44:57,266 --> 00:44:59,546
But if there isn't, we create a


1217
00:44:59,616 --> 00:45:00,976
dot annotation.


1218
00:45:02,086 --> 00:45:03,596
I already implemented a simple


1219
00:45:03,596 --> 00:45:04,726
dot annotation in a separate


1220
00:45:04,726 --> 00:45:06,076
file, and I already imported it.


1221
00:45:06,866 --> 00:45:08,416
So, we can use it here.


1222
00:45:09,696 --> 00:45:12,316
Okay, so what we have to do here


1223
00:45:12,626 --> 00:45:14,706
is to provide the right URL for


1224
00:45:14,706 --> 00:45:16,576
the icons depending on the


1225
00:45:16,576 --> 00:45:17,026
category.


1226
00:45:17,856 --> 00:45:21,766
So, let's create an object for


1227
00:45:21,766 --> 00:45:23,906
that called iconUrls.


1228
00:45:24,616 --> 00:45:24,716
Okay.


1229
00:45:27,156 --> 00:45:28,566
So that's pretty


1230
00:45:28,636 --> 00:45:29,196
straightforward.


1231
00:45:30,306 --> 00:45:31,876
And now we can use that object


1232
00:45:32,686 --> 00:45:41,196
to get the URL for our icon.


1233
00:45:42,956 --> 00:45:45,356
Okay. You may also have noticed


1234
00:45:45,456 --> 00:45:48,406
that some of the entries here


1235
00:45:49,206 --> 00:45:50,006
are really specific.


1236
00:45:50,006 --> 00:45:52,416
They are not amenity categories.


1237
00:45:52,656 --> 00:45:54,706
They are icons for our T-rex,


1238
00:45:54,846 --> 00:45:56,036
sauropod, and bone hall


1239
00:45:56,036 --> 00:45:56,456
exhibits.


1240
00:45:57,946 --> 00:46:00,546
So, we need to handle them a bit


1241
00:46:00,546 --> 00:46:00,976
differently.


1242
00:46:07,616 --> 00:46:09,446
So what we do here is test the


1243
00:46:09,446 --> 00:46:11,216
name, and if this is the right


1244
00:46:11,216 --> 00:46:13,386
name, we set the right icon.


1245
00:46:13,596 --> 00:46:14,786
Of course, we can also use the


1246
00:46:14,786 --> 00:46:16,006
feature ID if we want here.


1247
00:46:17,486 --> 00:46:20,016
We also set a higher priority


1248
00:46:20,016 --> 00:46:22,256
for all exhibits, and the


1249
00:46:22,256 --> 00:46:24,276
highest of all for the T-rex


1250
00:46:24,276 --> 00:46:24,586
exhibit.


1251
00:46:24,706 --> 00:46:28,526
And last but not least, we also


1252
00:46:28,526 --> 00:46:30,586
append the matching unicode


1253
00:46:30,586 --> 00:46:33,996
character to the name of the


1254
00:46:33,996 --> 00:46:34,646
exhibits.


1255
00:46:34,786 --> 00:46:35,706
And yes, you heard that right,


1256
00:46:36,246 --> 00:46:37,136
there is actually a unicode


1257
00:46:37,136 --> 00:46:39,446
character for dinosaurs and


1258
00:46:39,446 --> 00:46:39,876
T-rexes.


1259
00:46:41,186 --> 00:46:41,406
Okay.


1260
00:46:41,406 --> 00:46:47,066
So let's reload and see how it


1261
00:46:47,066 --> 00:46:47,946
renders on a map.


1262
00:46:49,476 --> 00:46:51,066
Okay, so now that's a map that's


1263
00:46:51,136 --> 00:46:51,976
worthy of Dinoseum!


1264
00:46:52,516 --> 00:46:55,866
[ Applause ]


1265
00:46:56,366 --> 00:46:59,366
And look, between, if I zoom out


1266
00:47:00,046 --> 00:47:03,216
very, very, very, very far, here


1267
00:47:03,216 --> 00:47:04,716
is our last annotation standing,


1268
00:47:04,716 --> 00:47:06,546
the dinosaur exhibit.


1269
00:47:07,656 --> 00:47:07,906
Alright.


1270
00:47:08,156 --> 00:47:10,606
So, of course what we can also


1271
00:47:11,186 --> 00:47:12,526
do is to restrict the capacity


1272
00:47:12,526 --> 00:47:14,956
of the users to zoom out too


1273
00:47:14,956 --> 00:47:15,216
far.


1274
00:47:15,846 --> 00:47:19,266
We can do that with a new


1275
00:47:19,556 --> 00:47:25,206
setting from MapKit JS, which


1276
00:47:25,206 --> 00:47:26,216
is cameraZoomRange.


1277
00:47:27,046 --> 00:47:27,236
Okay.


1278
00:47:27,356 --> 00:47:30,166
So let's try that again and see


1279
00:47:30,456 --> 00:47:32,386
if we can zoom out now.


1280
00:47:32,696 --> 00:47:35,016
No, we can't.


1281
00:47:35,106 --> 00:47:36,016
That's great.


1282
00:47:36,286 --> 00:47:36,516
Okay.


1283
00:47:41,696 --> 00:47:43,786
So the last feature type that we


1284
00:47:43,786 --> 00:47:45,156
want to handle here is


1285
00:47:45,196 --> 00:47:45,676
occupants.


1286
00:47:46,466 --> 00:47:48,396
Remember, it's a bit more


1287
00:47:48,396 --> 00:47:49,336
challenging though because


1288
00:47:49,956 --> 00:47:51,556
occupants do not have a display


1289
00:47:51,556 --> 00:47:51,806
point.


1290
00:47:52,596 --> 00:47:54,376
But they are linked to anchors,


1291
00:47:54,616 --> 00:47:55,956
and anchors have display points.


1292
00:47:55,986 --> 00:47:57,336
So we can use the associated


1293
00:47:57,336 --> 00:48:00,006
anchor to get the coordinate to


1294
00:48:00,006 --> 00:48:01,606
place our MapKit annotation


1295
00:48:01,606 --> 00:48:01,956
on the map.


1296
00:48:03,456 --> 00:48:05,666
So, let's implement a method in


1297
00:48:05,666 --> 00:48:07,376
our ImdfArchive class that


1298
00:48:07,906 --> 00:48:09,766
gathers all occupants on a


1299
00:48:09,766 --> 00:48:12,356
certain ordinal along with their


1300
00:48:12,356 --> 00:48:12,746
anchors.


1301
00:48:19,156 --> 00:48:19,476
Okay.


1302
00:48:19,566 --> 00:48:21,516
So that method returns an array


1303
00:48:21,516 --> 00:48:22,586
of objects containing the


1304
00:48:22,586 --> 00:48:24,236
occupant and its associated


1305
00:48:24,236 --> 00:48:24,556
anchor.


1306
00:48:24,926 --> 00:48:28,556
So, now let's use it to render


1307
00:48:29,086 --> 00:48:30,456
the occupants.


1308
00:48:34,556 --> 00:48:37,506
As you can see here, it's fairly


1309
00:48:37,556 --> 00:48:38,606
similar to what we did for


1310
00:48:38,606 --> 00:48:40,826
amenities with one exception.


1311
00:48:41,576 --> 00:48:43,426
We don't provide the occupant by


1312
00:48:43,426 --> 00:48:44,816
itself to the importGeoJSON


1313
00:48:44,816 --> 00:48:47,646
method, but anchor because


1314
00:48:47,646 --> 00:48:49,216
anchor has the geometry.


1315
00:48:50,016 --> 00:48:51,796
We use the occupant name to set


1316
00:48:51,796 --> 00:48:53,096
the title of the annotation.


1317
00:48:53,476 --> 00:48:57,696
And I also set a specific class


1318
00:48:57,806 --> 00:48:59,806
based on the category, so


1319
00:48:59,806 --> 00:49:01,066
category-annotation,


1320
00:49:01,136 --> 00:49:03,266
so that I can give a specific


1321
00:49:03,266 --> 00:49:04,916
style to some categories of


1322
00:49:04,916 --> 00:49:05,376
occupants.


1323
00:49:06,876 --> 00:49:08,646
I already provided a style in


1324
00:49:08,736 --> 00:49:10,796
our CSS file.


1325
00:49:11,366 --> 00:49:11,476
Okay.


1326
00:49:11,706 --> 00:49:17,906
So let's reload one last time.


1327
00:49:18,126 --> 00:49:18,376
Okay.


1328
00:49:18,876 --> 00:49:19,956
Now we can see the Jurassic


1329
00:49:19,956 --> 00:49:21,206
Table, which is our famous


1330
00:49:21,206 --> 00:49:21,976
in-house restaurant.


1331
00:49:22,516 --> 00:49:26,986
[ Applause ]


1332
00:49:27,486 --> 00:49:30,756
Okay, let's recap what we did.


1333
00:49:31,556 --> 00:49:33,586
First, we downloaded the GeoJSON


1334
00:49:33,586 --> 00:49:35,196
files from the server, extracted


1335
00:49:35,196 --> 00:49:36,636
the features from them and


1336
00:49:36,676 --> 00:49:38,316
organized them by type.


1337
00:49:39,316 --> 00:49:40,386
Then, we implemented a few


1338
00:49:40,386 --> 00:49:42,256
methods to get features of a


1339
00:49:42,256 --> 00:49:44,276
certain type on a given ordinal.


1340
00:49:45,026 --> 00:49:47,546
Then, we added a level picker so


1341
00:49:47,546 --> 00:49:49,726
that our users are able to


1342
00:49:49,726 --> 00:49:50,926
choose what level they want to


1343
00:49:50,926 --> 00:49:51,146
see.


1344
00:49:52,456 --> 00:49:53,856
And we provided a custom style


1345
00:49:54,286 --> 00:49:55,696
to units and openings.


1346
00:49:57,946 --> 00:49:59,426
And finally, we created icons


1347
00:49:59,426 --> 00:50:01,206
and custom annotations instead of


1348
00:50:01,206 --> 00:50:02,886
these default marker annotations


1349
00:50:03,156 --> 00:50:04,846
for amenities and occupants.


1350
00:50:05,446 --> 00:50:08,336
With MapKit JS we were able to


1351
00:50:08,336 --> 00:50:10,316
build a map that shares the same


1352
00:50:10,316 --> 00:50:11,626
look and feel as its iOS


1353
00:50:11,696 --> 00:50:12,116
counterpart.


1354
00:50:12,816 --> 00:50:14,266
Now we have a beautiful map that


1355
00:50:14,266 --> 00:50:16,006
we can embed in the Dinoseum


1356
00:50:16,006 --> 00:50:17,776
website and provide the same


1357
00:50:17,776 --> 00:50:19,506
user experience on all the major


1358
00:50:19,506 --> 00:50:20,476
browser implementations.


1359
00:50:21,286 --> 00:50:23,396
And on that note, I will hand


1360
00:50:23,396 --> 00:50:24,736
over to Mithilesh to conclude.


1361
00:50:26,516 --> 00:50:31,756
[ Applause ]


1362
00:50:32,256 --> 00:50:32,736
>> Hello again.


1363
00:50:34,966 --> 00:50:36,416
I hope you like what you saw


1364
00:50:36,416 --> 00:50:36,686
today.


1365
00:50:37,886 --> 00:50:39,166
Before we end this session, I'd


1366
00:50:39,166 --> 00:50:40,166
like to go through some of the


1367
00:50:40,166 --> 00:50:41,616
best practices that apply to


1368
00:50:41,616 --> 00:50:42,196
indoor maps.


1369
00:50:44,356 --> 00:50:45,396
Let's talk about styling.


1370
00:50:46,756 --> 00:50:47,906
You should design an indoor map


1371
00:50:47,986 --> 00:50:49,106
that feels like a natural


1372
00:50:49,106 --> 00:50:50,256
extension of your app.


1373
00:50:51,106 --> 00:50:53,196
Use colors and icons that match


1374
00:50:53,306 --> 00:50:54,776
your app's theme or your


1375
00:50:54,776 --> 00:50:55,896
company's brand.


1376
00:50:57,176 --> 00:50:58,296
Don't try to replicate the


1377
00:50:58,296 --> 00:50:59,686
appearance of Apple Maps or


1378
00:50:59,686 --> 00:51:00,566
another application.


1379
00:51:01,046 --> 00:51:02,826
Instead, make sure the overlays,


1380
00:51:02,866 --> 00:51:05,126
icons, and labels match the


1381
00:51:05,126 --> 00:51:06,216
visual style of your app.


1382
00:51:09,296 --> 00:51:10,506
Select distinct styles to


1383
00:51:10,506 --> 00:51:11,896
differentiate the features of


1384
00:51:11,896 --> 00:51:12,146
your map.


1385
00:51:13,516 --> 00:51:14,696
Using specific color for


1386
00:51:14,696 --> 00:51:16,496
categories such as elevator area


1387
00:51:17,186 --> 00:51:18,736
makes it easy for people to spot


1388
00:51:18,736 --> 00:51:19,486
them at a glance.


1389
00:51:22,366 --> 00:51:24,216
Use easily recognizable icons.


1390
00:51:25,376 --> 00:51:27,246
Icons should not only be visually


1391
00:51:27,316 --> 00:51:29,116
appealing but should also be


1392
00:51:29,116 --> 00:51:31,156
effective in communicating their


1393
00:51:31,156 --> 00:51:31,306
purpose.


1394
00:51:34,196 --> 00:51:36,256
You should adjust the map detail


1395
00:51:36,376 --> 00:51:37,506
based on zoom level.


1396
00:51:38,326 --> 00:51:39,776
Too much detail can cause the


1397
00:51:39,776 --> 00:51:41,056
map to appear cluttered.


1398
00:51:42,026 --> 00:51:43,856
Show large areas like rooms and


1399
00:51:43,856 --> 00:51:45,166
buildings at all zoom levels,


1400
00:51:45,516 --> 00:51:47,516
then progressively add more


1401
00:51:47,516 --> 00:51:49,056
detail features and labels as


1402
00:51:49,086 --> 00:51:50,006
the map is zoomed in.


1403
00:51:53,026 --> 00:51:54,346
You should include surrounding


1404
00:51:54,346 --> 00:51:55,786
areas to provide context.


1405
00:51:56,696 --> 00:51:58,176
Adjacent streets, playgrounds,


1406
00:51:58,266 --> 00:51:59,786
and other locations can help


1407
00:51:59,836 --> 00:52:02,296
people orient when they use your


1408
00:52:02,296 --> 00:52:02,496
map.


1409
00:52:04,396 --> 00:52:05,486
And finally and very


1410
00:52:05,486 --> 00:52:08,106
importantly, enable indoor user


1411
00:52:08,106 --> 00:52:10,406
location on iOS to enhance the


1412
00:52:10,406 --> 00:52:13,086
indoor map experience when your


1413
00:52:13,086 --> 00:52:14,276
users visit the venue.


1414
00:52:15,886 --> 00:52:17,146
For more information, you may


1415
00:52:17,146 --> 00:52:18,596
check out the related sessions,


1416
00:52:18,756 --> 00:52:20,596
What's New in MapKit and MapKit


1417
00:52:21,186 --> 00:52:23,806
JS and Introducing the Apple


1418
00:52:23,806 --> 00:52:24,566
Maps Program.


1419
00:52:25,346 --> 00:52:26,446
If you have any comments or


1420
00:52:26,446 --> 00:52:28,416
questions, visit us at the lab


1421
00:52:28,416 --> 00:52:29,486
right after this session.


1422
00:52:30,176 --> 00:52:31,556
Thank you very much for coming


1423
00:52:31,556 --> 00:52:33,156
out today, and I hope you have


1424
00:52:33,156 --> 00:52:33,966
had a great conference.


1425
00:52:34,516 --> 00:52:39,500
[ Applause ]

