1
00:00:09,516 --> 00:00:15,556
[ Applause ]


2
00:00:16,056 --> 00:00:16,596
>> Hi everyone.


3
00:00:16,976 --> 00:00:17,966
My name is Neil Desai [assumed


4
00:00:17,966 --> 00:00:18,896
spelling] and I'm a watchOS


5
00:00:18,896 --> 00:00:20,466
frameworks engineer and I am


6
00:00:20,466 --> 00:00:21,756
really excited to talk to you


7
00:00:21,756 --> 00:00:23,226
all about how to create some


8
00:00:23,226 --> 00:00:26,336
great independent watch apps.


9
00:00:26,576 --> 00:00:28,386
We're increasingly seeing people


10
00:00:28,386 --> 00:00:30,166
enjoy being able to go out with


11
00:00:30,166 --> 00:00:31,546
just their Apple Watch.


12
00:00:31,936 --> 00:00:33,276
Users love the quick


13
00:00:33,276 --> 00:00:34,766
interactions and the freedom


14
00:00:34,766 --> 00:00:35,876
Apple Watch gives them.


15
00:00:36,806 --> 00:00:38,226
Whether it's going out with just


16
00:00:38,226 --> 00:00:39,746
their watch while working out,


17
00:00:40,316 --> 00:00:42,166
running an errand, or quickly


18
00:00:42,166 --> 00:00:46,126
answering a call, Apple Watch


19
00:00:46,126 --> 00:00:47,936
helps keep you connected to the


20
00:00:47,936 --> 00:00:50,296
people, information, and apps


21
00:00:50,296 --> 00:00:51,986
you care about most.


22
00:00:52,656 --> 00:00:54,516
And in these moments where the


23
00:00:54,516 --> 00:00:56,376
user is enjoying the freedom of


24
00:00:56,376 --> 00:00:58,906
Apple Watch, users think of


25
00:00:58,906 --> 00:01:00,346
their iPhone as optional.


26
00:01:02,336 --> 00:01:04,385
And we want our watch apps to


27
00:01:04,385 --> 00:01:06,876
match our user's expectations of


28
00:01:06,876 --> 00:01:07,616
Apple Watch.


29
00:01:07,946 --> 00:01:09,796
And to do so we're introducing a


30
00:01:09,796 --> 00:01:12,726
new concept, a concept we call


31
00:01:12,876 --> 00:01:14,236
independent watch apps.


32
00:01:15,046 --> 00:01:17,236
So now your iPhone app can be an


33
00:01:17,306 --> 00:01:18,516
optional experience.


34
00:01:20,326 --> 00:01:22,246
And a lot of apps already are


35
00:01:22,246 --> 00:01:23,496
independent to some degree.


36
00:01:23,806 --> 00:01:25,726
Outcast is a great example of a


37
00:01:25,726 --> 00:01:27,626
podcast app where I can control


38
00:01:27,626 --> 00:01:29,716
the entire experience directly


39
00:01:29,716 --> 00:01:30,446
from my wrist.


40
00:01:31,576 --> 00:01:33,056
And CARROT Weather is another


41
00:01:33,056 --> 00:01:34,766
great example of an app that I


42
00:01:34,766 --> 00:01:36,416
always check the weather on and


43
00:01:36,416 --> 00:01:38,086
I only do it on my Apple Watch.


44
00:01:39,096 --> 00:01:40,826
And whenever I'm traveling


45
00:01:40,826 --> 00:01:43,266
abroad I always use Elk for


46
00:01:43,266 --> 00:01:44,376
currency conversions.


47
00:01:45,056 --> 00:01:46,956
However, these apps all have an


48
00:01:47,066 --> 00:01:48,126
iPhone app.


49
00:01:48,646 --> 00:01:50,676
And now we're saying that the


50
00:01:50,676 --> 00:01:52,106
iPhone app is optional.


51
00:01:52,666 --> 00:01:55,266
And for the first time, you can


52
00:01:55,266 --> 00:01:57,266
ship a watch only app without


53
00:01:57,266 --> 00:01:58,976
having to ship an iOS app at


54
00:01:58,976 --> 00:01:59,476
all.


55
00:02:00,246 --> 00:02:00,866
[applause] Thank you.


56
00:02:01,516 --> 00:02:04,846
[ Applause ]


57
00:02:05,346 --> 00:02:07,536
And to help your apps become


58
00:02:07,536 --> 00:02:09,566
independent we're introducing a


59
00:02:09,566 --> 00:02:11,036
bunch of new features this year


60
00:02:11,036 --> 00:02:13,186
for watch apps, like being able


61
00:02:13,186 --> 00:02:14,826
to send push notifications


62
00:02:14,826 --> 00:02:16,746
directly to the device, and


63
00:02:16,746 --> 00:02:18,586
helping to make sign on even


64
00:02:18,586 --> 00:02:20,196
easier and a whole bunch of


65
00:02:20,196 --> 00:02:20,936
other features.


66
00:02:21,656 --> 00:02:23,406
But first I want to talk about


67
00:02:23,406 --> 00:02:24,646
how we actually install these


68
00:02:24,646 --> 00:02:25,456
applications.


69
00:02:27,516 --> 00:02:29,106
Now up through the Watch iOS 5,


70
00:02:29,166 --> 00:02:30,716
the Watch App has been embedded


71
00:02:30,716 --> 00:02:32,246
within the iOS app and we


72
00:02:32,246 --> 00:02:33,766
download both of them to the


73
00:02:33,766 --> 00:02:36,406
iPhone, and then the iPhone


74
00:02:36,406 --> 00:02:38,076
handles the task of installing


75
00:02:38,076 --> 00:02:39,946
the Watch App from iPhone to


76
00:02:39,946 --> 00:02:40,806
Apple Watch.


77
00:02:43,236 --> 00:02:44,866
And we're just going to


78
00:02:44,866 --> 00:02:47,126
completely change this in iOS 13


79
00:02:47,126 --> 00:02:48,226
and watchOS 6.


80
00:02:48,536 --> 00:02:50,826
So now the App Store server is


81
00:02:50,826 --> 00:02:52,366
going to install whatever it


82
00:02:52,366 --> 00:02:54,246
needs to install wherever it


83
00:02:54,246 --> 00:02:55,676
needs to install it.


84
00:02:55,676 --> 00:02:57,266
And it's going to apply to all


85
00:02:57,266 --> 00:02:58,966
applications in the store today.


86
00:03:01,616 --> 00:03:04,726
And so this means that the iOS


87
00:03:04,726 --> 00:03:06,506
app no longer includes that


88
00:03:06,506 --> 00:03:08,646
Watch App and some of you may be


89
00:03:08,646 --> 00:03:10,146
happy to hear this, the Watch


90
00:03:10,146 --> 00:03:11,596
App is no longer going to count


91
00:03:11,726 --> 00:03:13,456
against your iOS app cellular


92
00:03:13,456 --> 00:03:14,196
download limit.


93
00:03:15,486 --> 00:03:16,936
And-- [applause] Thank you.


94
00:03:17,516 --> 00:03:19,806
[ Applause ]


95
00:03:20,306 --> 00:03:22,476
And we're able to do this by


96
00:03:22,476 --> 00:03:24,616
bitcode recompiling all the apps


97
00:03:24,616 --> 00:03:26,366
on our App Store servers and


98
00:03:26,366 --> 00:03:28,836
separating out the iOS app from


99
00:03:28,836 --> 00:03:29,576
the Watch App.


100
00:03:30,646 --> 00:03:32,186
And this means that each device


101
00:03:32,186 --> 00:03:33,606
is going to download its own


102
00:03:33,606 --> 00:03:33,836
app.


103
00:03:34,126 --> 00:03:35,646
So the iPhone gets an iPhone


104
00:03:35,646 --> 00:03:35,936
app.


105
00:03:36,076 --> 00:03:38,166
The watch gets a Watch App.


106
00:03:40,196 --> 00:03:41,756
And because of this, because


107
00:03:41,756 --> 00:03:43,476
we're able to install directly


108
00:03:43,476 --> 00:03:44,946
to the device, we're now


109
00:03:44,946 --> 00:03:46,496
enabling asset and variant


110
00:03:46,496 --> 00:03:47,756
thinning for watch apps for the


111
00:03:47,756 --> 00:03:48,296
first time.


112
00:03:49,156 --> 00:03:51,196
So if your user has a Series 4


113
00:03:51,196 --> 00:03:54,016
device, and, then we can install


114
00:03:54,016 --> 00:03:55,556
the appropriate variant and


115
00:03:55,556 --> 00:03:57,416
architecture size specific to


116
00:03:57,416 --> 00:03:59,266
that device and not any other.


117
00:03:59,696 --> 00:04:01,616
And we can apply that same logic


118
00:04:01,886 --> 00:04:02,716
to assets.


119
00:04:02,976 --> 00:04:04,266
So if you've configured your


120
00:04:04,266 --> 00:04:07,186
asset catalog to have a


121
00:04:07,236 --> 00:04:09,946
particular asset to a particular


122
00:04:09,946 --> 00:04:11,886
device, then we can install just


123
00:04:11,886 --> 00:04:13,466
that asset to that device.


124
00:04:15,006 --> 00:04:16,906
And really this is just a fancy


125
00:04:16,906 --> 00:04:18,676
way of saying downloads are much


126
00:04:18,676 --> 00:04:20,296
smaller and Watch App binary


127
00:04:20,296 --> 00:04:21,356
sizes are much smaller.


128
00:04:21,356 --> 00:04:23,386
And if you're using Swift,


129
00:04:23,506 --> 00:04:24,996
because of Swift 5 and ABI


130
00:04:25,116 --> 00:04:27,366
stability, now the Swift dylibs


131
00:04:27,446 --> 00:04:28,916
aren't included within your app


132
00:04:28,916 --> 00:04:30,536
at all and so the downloads are


133
00:04:30,536 --> 00:04:32,096
going to be even more smaller.


134
00:04:33,476 --> 00:04:35,256
And so that's how we install our


135
00:04:35,256 --> 00:04:36,016
applications.


136
00:04:36,266 --> 00:04:37,466
And let's talk about how our


137
00:04:37,466 --> 00:04:40,206
users are going to get them.


138
00:04:40,426 --> 00:04:41,536
So your apps are still


139
00:04:41,536 --> 00:04:43,026
discoverable in the iOS App


140
00:04:43,026 --> 00:04:45,806
Store, but now new in watchOS 6


141
00:04:46,156 --> 00:04:47,736
we're introducing the App Store


142
00:04:47,736 --> 00:04:48,836
for Apple Watch.


143
00:04:50,186 --> 00:04:52,146
And it is a fully featured App


144
00:04:52,146 --> 00:04:54,516
Store complete with feature


145
00:04:54,516 --> 00:04:56,716
sections, full product detail


146
00:04:56,716 --> 00:04:59,186
pages, search, editorial.


147
00:04:59,486 --> 00:05:01,186
And I got to say, you can even


148
00:05:01,186 --> 00:05:02,626
purchase an app from your wrist


149
00:05:02,706 --> 00:05:04,616
and when it happens it is so


150
00:05:04,616 --> 00:05:05,126
cool.


151
00:05:05,186 --> 00:05:06,666
I seriously love it.


152
00:05:07,136 --> 00:05:09,026
And, so now let's talk about the


153
00:05:09,026 --> 00:05:10,496
different types of apps and how


154
00:05:10,496 --> 00:05:12,036
they function with this, in this


155
00:05:12,036 --> 00:05:13,556
new Watch App Store.


156
00:05:15,936 --> 00:05:18,046
So all the apps that exist in


157
00:05:18,046 --> 00:05:19,926
the store today are what we call


158
00:05:19,926 --> 00:05:22,116
dependent apps because the Watch


159
00:05:22,116 --> 00:05:23,946
App is considered dependent on


160
00:05:23,996 --> 00:05:25,396
the iPhone app by the system.


161
00:05:27,536 --> 00:05:29,406
And so if I get one of these


162
00:05:29,406 --> 00:05:30,646
dependent apps from the Watch


163
00:05:30,646 --> 00:05:32,956
App Store on my watch, then the


164
00:05:32,956 --> 00:05:35,086
system will kick off a download


165
00:05:35,086 --> 00:05:36,576
of the iPhone app to iPhone.


166
00:05:37,426 --> 00:05:39,636
And until that happens that the


167
00:05:39,636 --> 00:05:40,986
iPhone app is installed, the


168
00:05:40,986 --> 00:05:42,586
watchOS app launch is going to


169
00:05:42,586 --> 00:05:44,216
be blocked because the system


170
00:05:44,216 --> 00:05:46,296
considers that Watch App to be


171
00:05:46,296 --> 00:05:48,226
dependent on the iPhone app.


172
00:05:49,976 --> 00:05:51,816
And now unlike dependent apps,


173
00:05:52,096 --> 00:05:53,456
independent apps are where the


174
00:05:53,456 --> 00:05:55,776
Watch App can fly solo which


175
00:05:55,776 --> 00:05:57,676
means the phone app doesn't need


176
00:05:57,676 --> 00:05:59,206
to be installed to launch the


177
00:05:59,206 --> 00:06:00,406
Watch App.


178
00:06:02,116 --> 00:06:03,806
So that means the Watch App is


179
00:06:03,906 --> 00:06:05,366
installed independently.


180
00:06:05,686 --> 00:06:07,396
And if your user has both an


181
00:06:07,476 --> 00:06:09,286
iPhone and Watch App installed


182
00:06:09,286 --> 00:06:11,636
at the same time, now your user


183
00:06:11,636 --> 00:06:12,786
can actually uninstall the


184
00:06:12,786 --> 00:06:14,456
iPhone app and the Watch App


185
00:06:14,456 --> 00:06:15,056
will remain.


186
00:06:18,336 --> 00:06:19,556
And for those of you that are a


187
00:06:19,556 --> 00:06:21,376
little nervous about, and your


188
00:06:21,376 --> 00:06:22,386
brain's already thinking how


189
00:06:22,386 --> 00:06:23,756
does this affect my app that


190
00:06:23,756 --> 00:06:25,116
exists in the store, you'll be


191
00:06:25,116 --> 00:06:26,786
happy to hear that independent


192
00:06:26,786 --> 00:06:28,916
watchOS apps with an iOS app are


193
00:06:28,916 --> 00:06:30,576
completely backwards compatible


194
00:06:30,776 --> 00:06:32,766
with older OS's.


195
00:06:32,766 --> 00:06:34,176
And those new watch only


196
00:06:34,176 --> 00:06:34,836
applications-- [applause] Thank


197
00:06:34,836 --> 00:06:34,903
you.


198
00:06:35,516 --> 00:06:37,586
[ Applause ]


199
00:06:38,086 --> 00:06:38,526
Thank you.


200
00:06:38,636 --> 00:06:39,676
Those new watch only


201
00:06:39,676 --> 00:06:41,426
applications are supported on


202
00:06:41,426 --> 00:06:42,636
watchOS 6 or later.


203
00:06:45,326 --> 00:06:46,836
And if you need to distribute


204
00:06:46,836 --> 00:06:48,166
your app within an enterprise


205
00:06:48,166 --> 00:06:49,686
for instance, you'll be happy to


206
00:06:49,686 --> 00:06:51,566
hear we have full Xcode support


207
00:06:51,856 --> 00:06:53,346
to also create those different


208
00:06:53,346 --> 00:06:54,636
variants we were talking about


209
00:06:54,836 --> 00:06:56,646
to split out your iPhone and


210
00:06:56,646 --> 00:06:57,156
Watch App.


211
00:06:58,146 --> 00:06:59,256
And new when you go through the


212
00:06:59,256 --> 00:07:01,406
flow with Xcode, in the manifest


213
00:07:01,406 --> 00:07:02,846
plist that gets generated,


214
00:07:03,046 --> 00:07:04,296
there's a new platform


215
00:07:04,296 --> 00:07:06,186
identifier key that's added to


216
00:07:06,186 --> 00:07:08,226
tell the system what to install


217
00:07:08,226 --> 00:07:11,346
and where to install it.


218
00:07:11,626 --> 00:07:13,036
So now that we know the


219
00:07:13,036 --> 00:07:14,706
importance of independent Watch


220
00:07:14,706 --> 00:07:17,226
App, let's talk about how to


221
00:07:17,226 --> 00:07:18,386
make your watch apps


222
00:07:18,386 --> 00:07:19,016
independent.


223
00:07:19,436 --> 00:07:23,936
And so let's, by doing so let's


224
00:07:24,176 --> 00:07:25,516
jump into Xcode and now I'm


225
00:07:25,516 --> 00:07:26,956
going to show you how easy it is


226
00:07:27,086 --> 00:07:28,276
to take your existing app and


227
00:07:28,396 --> 00:07:28,976
make it independent.


228
00:07:37,096 --> 00:07:39,576
Cool. So here we are in Xcode


229
00:07:39,576 --> 00:07:41,156
and I have a great Watch App


230
00:07:41,156 --> 00:07:42,526
here that's currently a


231
00:07:42,526 --> 00:07:42,986
dependent app.


232
00:07:43,676 --> 00:07:45,356
And this is-- I've already done


233
00:07:45,356 --> 00:07:46,826
all the work to make this app


234
00:07:46,826 --> 00:07:48,476
independent, and because it's a


235
00:07:48,476 --> 00:07:50,116
great flashcard app that exists


236
00:07:50,116 --> 00:07:50,716
on Watch.


237
00:07:53,056 --> 00:07:54,306
So we can build and run this


238
00:07:54,306 --> 00:07:56,126
application and see that the


239
00:07:56,126 --> 00:07:57,346
phone simulator and the watch


240
00:07:57,346 --> 00:07:59,036
simulator are exactly like we


241
00:07:59,306 --> 00:08:01,126
expect in our normal debugging


242
00:08:01,126 --> 00:08:01,626
flow.


243
00:08:04,756 --> 00:08:07,086
And so now the Watch App gets


244
00:08:07,086 --> 00:08:08,556
launched and I can immediately


245
00:08:08,556 --> 00:08:09,726
start a debugging session.


246
00:08:10,146 --> 00:08:11,626
But now let's tell the system to


247
00:08:11,626 --> 00:08:12,776
make this app independent.


248
00:08:13,226 --> 00:08:15,376
So let's stop that debug session


249
00:08:17,276 --> 00:08:20,306
and now in the target editor for


250
00:08:20,306 --> 00:08:22,486
our WatchKit extension I see


251
00:08:22,486 --> 00:08:23,676
under deployment target there's


252
00:08:23,676 --> 00:08:25,446
a new checkbox called supports


253
00:08:25,446 --> 00:08:27,136
running without iOS app


254
00:08:27,136 --> 00:08:27,776
installation.


255
00:08:27,776 --> 00:08:29,776
So I'm going to check that off,


256
00:08:29,826 --> 00:08:31,246
and then I'm just going to build


257
00:08:31,246 --> 00:08:31,646
and run.


258
00:08:31,646 --> 00:08:33,426
And by doing so, by checking off


259
00:08:33,426 --> 00:08:35,106
that box, I now told the system


260
00:08:35,346 --> 00:08:36,096
it's independent.


261
00:08:36,316 --> 00:08:38,046
And I was kind of fast so let me


262
00:08:38,446 --> 00:08:40,145
actually show you one cool


263
00:08:40,145 --> 00:08:40,506
thing.


264
00:08:41,086 --> 00:08:43,655
So let's actually close out the


265
00:08:43,655 --> 00:08:45,686
iPhone simulator because this


266
00:08:45,686 --> 00:08:46,576
app's independent.


267
00:08:46,576 --> 00:08:47,996
Why do we need that iPhone SIM


268
00:08:47,996 --> 00:08:48,406
anymore?


269
00:08:49,056 --> 00:08:50,116
Let's just build and run once


270
00:08:50,116 --> 00:08:52,226
more and now I build and run


271
00:08:52,226 --> 00:08:54,346
only to the watch simulator and


272
00:08:54,346 --> 00:08:55,966
it provides a much faster


273
00:08:55,966 --> 00:08:56,976
debugging experience.


274
00:08:57,516 --> 00:09:00,556
[ Applause ]


275
00:09:01,056 --> 00:09:04,146
Cool. Great.


276
00:09:04,146 --> 00:09:05,926
So now let's start and build a


277
00:09:05,926 --> 00:09:07,376
watch only application for the


278
00:09:07,376 --> 00:09:07,866
first time.


279
00:09:08,916 --> 00:09:09,706
So I'm going to close out of


280
00:09:09,706 --> 00:09:11,946
this project, and to create a


281
00:09:11,946 --> 00:09:13,236
new application I'm just going


282
00:09:13,236 --> 00:09:15,686
to go to file, new project, and


283
00:09:17,916 --> 00:09:19,966
then under watchOS I see there's


284
00:09:19,966 --> 00:09:21,046
a Watch App and then there's


285
00:09:21,046 --> 00:09:22,906
also an iOS app with a Watch


286
00:09:22,906 --> 00:09:23,166
App.


287
00:09:23,166 --> 00:09:24,286
And I of course only want to


288
00:09:24,286 --> 00:09:25,326
build a watch only app right


289
00:09:25,326 --> 00:09:25,546
now.


290
00:09:26,716 --> 00:09:27,966
So let's select that.


291
00:09:33,776 --> 00:09:34,326
Great.


292
00:09:35,076 --> 00:09:36,206
And then of course let's use


293
00:09:36,206 --> 00:09:36,676
SwiftUI.


294
00:09:37,606 --> 00:09:38,356
It's pretty cool.


295
00:09:38,486 --> 00:09:39,496
I hear a lot of good things.


296
00:09:40,836 --> 00:09:41,706
[laughter] And then let's also


297
00:09:41,706 --> 00:09:42,706
include a complication.


298
00:09:42,706 --> 00:09:44,256
And then let's save that off to


299
00:09:44,256 --> 00:09:44,976
my desktop.


300
00:09:50,876 --> 00:09:52,816
Perfect. Let's just [inaudible]


301
00:09:52,816 --> 00:09:53,856
and now let's just build and


302
00:09:53,856 --> 00:09:54,226
run.


303
00:09:54,936 --> 00:09:56,756
And again, just like the


304
00:09:56,756 --> 00:09:57,946
independent app we were just


305
00:09:57,946 --> 00:09:59,786
talking about, we don't need the


306
00:09:59,786 --> 00:10:00,936
iPhone simulator, we're just


307
00:10:00,966 --> 00:10:02,316
building and running a simple


308
00:10:02,316 --> 00:10:04,136
watch only application directly


309
00:10:04,136 --> 00:10:05,136
to the watch simulator.


310
00:10:06,466 --> 00:10:06,756
Great.


311
00:10:13,156 --> 00:10:18,816
[Applause] Thank you.


312
00:10:19,256 --> 00:10:20,536
So we were able to talk about


313
00:10:20,536 --> 00:10:22,686
how to migrate your existing app


314
00:10:22,686 --> 00:10:24,976
and make it an independent watch


315
00:10:24,976 --> 00:10:25,166
app.


316
00:10:25,326 --> 00:10:27,226
We were also able to build a


317
00:10:27,226 --> 00:10:29,076
watch only application and we


318
00:10:29,076 --> 00:10:30,456
talked about how the simulator


319
00:10:30,456 --> 00:10:32,086
experience is much improved.


320
00:10:32,766 --> 00:10:34,076
And along the same vein as that


321
00:10:34,076 --> 00:10:35,726
simulator experience, let's talk


322
00:10:35,726 --> 00:10:36,516
about debugging.


323
00:10:37,406 --> 00:10:39,726
So debugging on watchOS 6 is--


324
00:10:40,036 --> 00:10:41,886
for simulator is up to 10 times


325
00:10:41,886 --> 00:10:42,586
faster now.


326
00:10:43,296 --> 00:10:45,926
[applause] Thank you.


327
00:10:46,666 --> 00:10:48,046
And device debugging is up to


328
00:10:48,046 --> 00:10:49,576
twice as fast and we've done a


329
00:10:49,576 --> 00:10:50,866
lot of work this year to make


330
00:10:50,866 --> 00:10:52,326
sure it's more reliable than


331
00:10:52,326 --> 00:10:53,186
ever before.


332
00:10:53,696 --> 00:10:56,526
And the debugging experience is


333
00:10:56,526 --> 00:10:58,666
proxied through iPhone but I


334
00:10:58,666 --> 00:11:00,036
wanted to call out one little


335
00:11:00,036 --> 00:11:00,526
pro tip.


336
00:11:01,056 --> 00:11:02,616
So if your devices are on Wifi--


337
00:11:02,616 --> 00:11:04,556
your phone and watch-- then a


338
00:11:04,556 --> 00:11:06,136
faster route will be chosen by


339
00:11:06,136 --> 00:11:07,706
the system and you'll see a much


340
00:11:07,706 --> 00:11:09,046
faster debugging experience.


341
00:11:10,546 --> 00:11:11,876
So let's dive into the different


342
00:11:11,956 --> 00:11:14,766
aspects now of how to make an


343
00:11:14,766 --> 00:11:15,526
app independent.


344
00:11:16,056 --> 00:11:18,876
So to do so we're going to talk


345
00:11:18,876 --> 00:11:20,256
about three major things.


346
00:11:20,256 --> 00:11:21,746
We're going to talk about how do


347
00:11:21,746 --> 00:11:23,536
we get our user data, via


348
00:11:23,536 --> 00:11:25,286
authentication or any private


349
00:11:25,286 --> 00:11:27,306
user data, directly from our


350
00:11:27,306 --> 00:11:27,686
user.


351
00:11:29,056 --> 00:11:29,966
We're going to talk about how to


352
00:11:29,966 --> 00:11:31,666
push information to the device.


353
00:11:32,376 --> 00:11:33,536
And lastly, we're going to talk


354
00:11:33,536 --> 00:11:35,246
about dealing with connectivity


355
00:11:35,246 --> 00:11:36,206
and gathering our own


356
00:11:36,206 --> 00:11:37,126
application data.


357
00:11:38,426 --> 00:11:39,686
So let's first talk about


358
00:11:39,686 --> 00:11:40,436
authentication.


359
00:11:44,216 --> 00:11:45,926
So the primary way to deal with


360
00:11:45,926 --> 00:11:47,786
authentication is via sign in


361
00:11:47,786 --> 00:11:48,486
and sign up.


362
00:11:48,886 --> 00:11:50,876
And now on watchOS 6 you can


363
00:11:50,876 --> 00:11:52,696
build sign up auth directly on


364
00:11:52,696 --> 00:11:53,266
the watch.


365
00:11:54,386 --> 00:11:55,976
And you can support terms and


366
00:11:55,976 --> 00:11:58,286
conditions using the WK alert


367
00:11:58,286 --> 00:11:58,886
action API.


368
00:12:00,476 --> 00:12:02,446
And new on watchOS 6 as well as


369
00:12:02,446 --> 00:12:03,696
all of our other Apple


370
00:12:03,696 --> 00:12:05,856
platforms, will now support Sign


371
00:12:05,856 --> 00:12:06,616
in With Apple.


372
00:12:07,146 --> 00:12:09,556
And we're going to talk a little


373
00:12:09,556 --> 00:12:11,036
bit about how you can build your


374
00:12:11,036 --> 00:12:13,946
own custom password based sign


375
00:12:13,946 --> 00:12:14,146
in.


376
00:12:15,376 --> 00:12:16,486
So let's first talk about Sign


377
00:12:16,486 --> 00:12:18,756
in With Apple.


378
00:12:18,986 --> 00:12:20,546
Sign in With Apple is a simple,


379
00:12:20,546 --> 00:12:22,506
secure, and private way to get


380
00:12:22,506 --> 00:12:24,056
authentication from your user.


381
00:12:25,266 --> 00:12:26,416
And your user doesn't have to


382
00:12:26,416 --> 00:12:27,516
fill out any forms.


383
00:12:27,826 --> 00:12:29,006
There's no new password they


384
00:12:29,006 --> 00:12:30,086
have to think of.


385
00:12:30,366 --> 00:12:32,966
And they can just simply select


386
00:12:32,966 --> 00:12:34,876
an email address and it just


387
00:12:34,876 --> 00:12:36,736
continues signing in.


388
00:12:39,236 --> 00:12:41,896
And each account has two factor


389
00:12:41,896 --> 00:12:44,166
auth built in and there's no


390
00:12:44,166 --> 00:12:45,836
email verification that a user


391
00:12:45,836 --> 00:12:46,596
has to do.


392
00:12:47,956 --> 00:12:49,436
And we support sign in across


393
00:12:49,436 --> 00:12:50,306
all devices.


394
00:12:50,306 --> 00:12:52,756
And there's also a JavaScript


395
00:12:52,756 --> 00:12:54,456
SDK for any other type of


396
00:12:54,456 --> 00:12:54,826
device.


397
00:12:57,376 --> 00:12:59,266
So to use Sign in With Apple,


398
00:12:59,416 --> 00:13:00,256
make sure and use the


399
00:13:00,256 --> 00:13:01,456
authentication services


400
00:13:01,456 --> 00:13:03,046
framework which is now available


401
00:13:03,046 --> 00:13:03,866
on watchOS.


402
00:13:06,076 --> 00:13:07,476
And if you have any specific UI


403
00:13:07,476 --> 00:13:09,386
you want to build, you can now


404
00:13:09,386 --> 00:13:11,126
use an authorization Apple ID


405
00:13:11,126 --> 00:13:12,686
button and embed that within


406
00:13:12,686 --> 00:13:13,616
your application.


407
00:13:14,046 --> 00:13:15,506
And then once the user actually


408
00:13:15,626 --> 00:13:17,286
taps on that button you'll


409
00:13:17,286 --> 00:13:19,036
receive your ID action and then


410
00:13:19,036 --> 00:13:20,566
you can use the authentication


411
00:13:20,566 --> 00:13:22,466
services framework to display


412
00:13:22,466 --> 00:13:23,586
the appropriate system UI.


413
00:13:24,336 --> 00:13:26,766
And there's a lot of great talks


414
00:13:26,766 --> 00:13:27,216
this week.


415
00:13:27,216 --> 00:13:28,336
If you want to know some more


416
00:13:28,336 --> 00:13:29,756
about Sign in With Apple, I


417
00:13:29,756 --> 00:13:32,596
highly recommend them.


418
00:13:32,816 --> 00:13:34,296
Great. And to enable Sign in


419
00:13:34,296 --> 00:13:36,346
With Apple in your Xcode project


420
00:13:36,536 --> 00:13:38,486
on your WatchKit extension, just


421
00:13:38,486 --> 00:13:40,296
add a new capability and enable


422
00:13:40,296 --> 00:13:41,216
your Sign in With Apple


423
00:13:41,216 --> 00:13:41,776
entitlement.


424
00:13:42,556 --> 00:13:43,646
And that's how to easily get


425
00:13:43,646 --> 00:13:44,136
started.


426
00:13:46,876 --> 00:13:48,346
And now you may have your own


427
00:13:48,346 --> 00:13:49,786
custom password based sign in


428
00:13:49,786 --> 00:13:51,746
and we're introducing a text


429
00:13:51,746 --> 00:13:53,386
field new to watchOS this year.


430
00:13:54,676 --> 00:13:56,456
And so you can embed this text


431
00:13:56,456 --> 00:13:58,246
field from within SwiftUI or


432
00:13:58,636 --> 00:13:59,426
WatchKit.


433
00:14:01,576 --> 00:14:03,106
And so you can build a UI such


434
00:14:03,106 --> 00:14:04,826
as this where we're just asking


435
00:14:04,826 --> 00:14:06,026
our user, hey we just need a


436
00:14:06,026 --> 00:14:07,686
username and password and we're


437
00:14:07,686 --> 00:14:09,486
using the placeholder text to


438
00:14:09,486 --> 00:14:10,796
instruct our user what to


439
00:14:10,796 --> 00:14:11,956
particularly input.


440
00:14:12,476 --> 00:14:15,456
And if you set the appropriate


441
00:14:15,456 --> 00:14:16,936
text content type for that


442
00:14:16,936 --> 00:14:18,576
particular text field, then the


443
00:14:18,576 --> 00:14:20,266
system text input controller


444
00:14:20,266 --> 00:14:21,756
that gets brought up will change


445
00:14:21,756 --> 00:14:23,656
itself for the appropriate text


446
00:14:23,656 --> 00:14:23,896
type.


447
00:14:26,996 --> 00:14:28,966
And so for this flow, say the


448
00:14:28,966 --> 00:14:31,616
user taps on username and then


449
00:14:31,616 --> 00:14:33,266
the system text input controller


450
00:14:33,446 --> 00:14:34,456
gets brought up.


451
00:14:34,816 --> 00:14:37,336
The user can then elect to enter


452
00:14:37,336 --> 00:14:39,506
text via dictation or scribble,


453
00:14:39,786 --> 00:14:41,426
and there's now a new option


454
00:14:41,646 --> 00:14:43,136
called continuity keyboard.


455
00:14:43,476 --> 00:14:46,456
So if a user taps on this, then


456
00:14:46,456 --> 00:14:48,036
the Apple Watch will say, hey


457
00:14:48,036 --> 00:14:49,466
finish entering some text on


458
00:14:49,466 --> 00:14:51,506
your iOS or iPad OS device and


459
00:14:51,806 --> 00:14:53,496
you can see they'll receive a


460
00:14:53,496 --> 00:14:55,896
notification on your iPhone or


461
00:14:55,896 --> 00:14:57,536
iPad if they have the same


462
00:14:57,536 --> 00:14:58,936
iCloud account logged into it.


463
00:14:58,936 --> 00:15:01,856
And if you've ever used tvOS


464
00:15:01,856 --> 00:15:03,416
with text fields, this flow will


465
00:15:03,416 --> 00:15:04,356
look very familiar.


466
00:15:04,876 --> 00:15:07,766
And once the user taps on it,


467
00:15:07,766 --> 00:15:09,426
they can easily enter in text


468
00:15:09,836 --> 00:15:11,176
into their iOS keyboard.


469
00:15:12,166 --> 00:15:14,026
And again, the text content type


470
00:15:14,026 --> 00:15:15,766
like we talked about earlier is


471
00:15:15,766 --> 00:15:17,316
going to inform the auto fill


472
00:15:17,316 --> 00:15:18,256
suggestions here.


473
00:15:18,256 --> 00:15:20,846
And then the user can elect to


474
00:15:21,286 --> 00:15:22,806
select an auto fill suggestion


475
00:15:22,806 --> 00:15:24,076
from either their iCloud


476
00:15:24,076 --> 00:15:26,186
keychain or the user's preferred


477
00:15:26,186 --> 00:15:27,086
password manager.


478
00:15:30,556 --> 00:15:32,976
And now to get your-- you want


479
00:15:33,086 --> 00:15:34,026
to make sure to get your


480
00:15:34,026 --> 00:15:35,506
password auto fill suggestions


481
00:15:35,666 --> 00:15:36,946
elevated by the system.


482
00:15:37,446 --> 00:15:39,166
And so to do that, make sure to


483
00:15:39,166 --> 00:15:40,696
set the correct text content


484
00:15:40,696 --> 00:15:43,506
type and add associated domains


485
00:15:43,816 --> 00:15:45,146
to your WatchKit extension.


486
00:15:45,856 --> 00:15:47,366
Now associated domains are a


487
00:15:47,366 --> 00:15:49,556
great way to tie your app and


488
00:15:49,556 --> 00:15:51,816
website together and in this way


489
00:15:51,966 --> 00:15:53,846
it lets the system know that hey


490
00:15:53,846 --> 00:15:55,826
the credential that might exist


491
00:15:55,826 --> 00:15:58,036
in the user's iCloud keychain


492
00:15:58,276 --> 00:15:59,826
can get elevated and displayed


493
00:15:59,826 --> 00:16:01,366
at the top of the iOS keyboard.


494
00:16:04,216 --> 00:16:06,036
And once the user selects on an


495
00:16:06,036 --> 00:16:08,296
auto fill suggestion, then the


496
00:16:08,296 --> 00:16:10,036
system will make its best effort


497
00:16:10,036 --> 00:16:11,866
to auto fill both the username


498
00:16:11,866 --> 00:16:13,186
and password at the same time.


499
00:16:13,736 --> 00:16:16,596
And for password based sign in,


500
00:16:16,596 --> 00:16:18,156
sometimes you may need to


501
00:16:18,156 --> 00:16:19,586
support one time codes.


502
00:16:20,136 --> 00:16:21,326
And so if you set the correct


503
00:16:21,326 --> 00:16:23,866
text content type, then a


504
00:16:23,866 --> 00:16:25,916
one-time code can get auto


505
00:16:25,916 --> 00:16:28,056
filled if you sent it via maybe


506
00:16:28,056 --> 00:16:29,566
an iMessage or a text message,


507
00:16:29,956 --> 00:16:31,156
and then the system text input


508
00:16:31,156 --> 00:16:32,676
controller will show that auto


509
00:16:32,676 --> 00:16:33,436
fill suggestion.


510
00:16:33,436 --> 00:16:35,226
The user can easily select it


511
00:16:35,516 --> 00:16:37,096
and then go about and continue


512
00:16:37,096 --> 00:16:37,936
with authentication.


513
00:16:38,516 --> 00:16:44,546
[ Applause ]


514
00:16:45,046 --> 00:16:46,006
So again, [inaudible] text


515
00:16:46,006 --> 00:16:47,836
field, you can use that from


516
00:16:47,836 --> 00:16:50,606
within SwiftUI or WatchKit.


517
00:16:51,036 --> 00:16:52,056
Make sure to set up your


518
00:16:52,056 --> 00:16:54,206
associated domains to elevate


519
00:16:54,206 --> 00:16:55,296
the appropriate auto fill


520
00:16:55,296 --> 00:16:57,926
suggestion and test out your


521
00:16:57,926 --> 00:16:59,496
flows with continuity keyboard


522
00:16:59,836 --> 00:17:01,446
and build one time code support


523
00:17:01,446 --> 00:17:03,566
if you need it.


524
00:17:03,826 --> 00:17:06,006
Now, another type of user


525
00:17:06,006 --> 00:17:07,856
information we sometimes need is


526
00:17:07,945 --> 00:17:10,366
private user information and we


527
00:17:10,366 --> 00:17:12,136
want to ask our users for that


528
00:17:12,136 --> 00:17:13,526
information via the different


529
00:17:13,526 --> 00:17:14,496
frameworks available.


530
00:17:15,685 --> 00:17:17,396
Now on watchOS, we've already


531
00:17:17,396 --> 00:17:19,566
supported giving access for


532
00:17:19,566 --> 00:17:21,546
calendar, contacts, motion, and


533
00:17:21,786 --> 00:17:23,376
even other types such as


534
00:17:23,376 --> 00:17:25,036
location directly on Apple


535
00:17:25,036 --> 00:17:25,546
Watch.


536
00:17:25,955 --> 00:17:28,666
And now with watchOS 6, we now


537
00:17:28,666 --> 00:17:29,846
support giving health


538
00:17:29,846 --> 00:17:31,786
authorization directly on Apple


539
00:17:31,786 --> 00:17:32,266
Watch.


540
00:17:32,316 --> 00:17:37,136
[applause] Thank you.


541
00:17:37,136 --> 00:17:38,966
So the user can elect to give


542
00:17:38,966 --> 00:17:40,476
access to all of the data


543
00:17:40,476 --> 00:17:42,296
requested or even just


544
00:17:42,296 --> 00:17:43,306
particular types.


545
00:17:46,716 --> 00:17:48,066
So that's how we deal with


546
00:17:48,066 --> 00:17:49,516
getting user data in an


547
00:17:49,516 --> 00:17:50,596
independent app world.


548
00:17:51,136 --> 00:17:52,816
Let's now talk about how to push


549
00:17:52,816 --> 00:17:54,086
information to a device.


550
00:17:54,786 --> 00:17:56,786
And of course the best way to


551
00:17:56,786 --> 00:17:58,326
push information to a device is


552
00:17:59,046 --> 00:18:00,356
via push notifications.


553
00:18:00,916 --> 00:18:03,336
And now with watchOS 6 the watch


554
00:18:03,336 --> 00:18:04,906
has become a standalone push


555
00:18:04,906 --> 00:18:06,926
target for the first time.


556
00:18:07,516 --> 00:18:10,246
[applause]


557
00:18:10,746 --> 00:18:13,196
And so this means you can send


558
00:18:13,196 --> 00:18:15,136
user visible notifications and


559
00:18:15,136 --> 00:18:16,336
background notifications


560
00:18:16,626 --> 00:18:18,216
directly to Apple Watch.


561
00:18:18,806 --> 00:18:20,026
And this is based around the


562
00:18:20,026 --> 00:18:21,996
user notifications framework and


563
00:18:21,996 --> 00:18:23,336
we're using the exact same


564
00:18:23,336 --> 00:18:25,186
infrastructure as all other


565
00:18:25,186 --> 00:18:25,926
Apple devices.


566
00:18:27,576 --> 00:18:29,796
So from an overview perspective,


567
00:18:30,576 --> 00:18:32,256
your server will send an APNS


568
00:18:32,256 --> 00:18:33,706
request header and payload


569
00:18:34,136 --> 00:18:36,566
directly to APNS and APNS is our


570
00:18:36,566 --> 00:18:38,246
Apple Push Notification Service.


571
00:18:38,366 --> 00:18:40,086
And then APNS is going to send


572
00:18:40,176 --> 00:18:41,506
that payload down to the


573
00:18:41,506 --> 00:18:42,506
appropriate device.


574
00:18:43,516 --> 00:18:45,226
On watchOS, the payloads are the


575
00:18:45,226 --> 00:18:47,296
same as on all other platforms


576
00:18:47,296 --> 00:18:47,636
we have.


577
00:18:47,636 --> 00:18:50,276
And on the APNS request header,


578
00:18:50,276 --> 00:18:53,576
there's one new key and that new


579
00:18:53,576 --> 00:18:55,586
key is an APNS push type.


580
00:18:55,586 --> 00:18:59,316
And this is supported on all of


581
00:18:59,316 --> 00:19:01,166
our Apple platforms and on all


582
00:19:02,176 --> 00:19:02,286
OS's.


583
00:19:02,816 --> 00:19:04,746
And so you can set that key to


584
00:19:04,746 --> 00:19:07,366
be either alert or background.


585
00:19:07,366 --> 00:19:08,676
And the way I like to think


586
00:19:08,676 --> 00:19:10,556
about this is if the user's ever


587
00:19:10,556 --> 00:19:12,026
going to see a notification,


588
00:19:12,106 --> 00:19:13,316
they're going to get alerted to


589
00:19:13,316 --> 00:19:15,076
something, then set alert in the


590
00:19:15,076 --> 00:19:15,556
push type.


591
00:19:15,686 --> 00:19:17,176
And if you need to send a


592
00:19:17,176 --> 00:19:18,846
background notification to just


593
00:19:18,846 --> 00:19:19,816
wake up your app in the


594
00:19:19,816 --> 00:19:21,776
background on the user's device


595
00:19:22,106 --> 00:19:23,466
whenever there's new content


596
00:19:23,466 --> 00:19:24,736
available, you can use the


597
00:19:24,736 --> 00:19:26,306
background push type.


598
00:19:28,656 --> 00:19:30,496
And so for registration and


599
00:19:30,496 --> 00:19:33,136
delivery for-- for registration


600
00:19:33,136 --> 00:19:34,296
we're going to get our tokens


601
00:19:34,296 --> 00:19:35,006
for WatchKit.


602
00:19:35,846 --> 00:19:37,436
And then just like forwarded


603
00:19:37,436 --> 00:19:39,286
notifications in past releases,


604
00:19:39,526 --> 00:19:41,036
your alert notifications will


605
00:19:41,036 --> 00:19:42,456
get delivered to your watch apps


606
00:19:42,456 --> 00:19:43,936
in the same manner as before


607
00:19:44,186 --> 00:19:45,936
using user notifications in


608
00:19:45,936 --> 00:19:47,056
conjunction with WatchKit.


609
00:19:47,056 --> 00:19:48,926
And your background


610
00:19:48,926 --> 00:19:50,086
notifications will now get


611
00:19:50,086 --> 00:19:51,796
delivered on your WK extension


612
00:19:51,796 --> 00:19:52,246
delegate.


613
00:19:52,246 --> 00:19:54,976
And if you encrypt any of your


614
00:19:54,976 --> 00:19:56,436
payloads, we now have full


615
00:19:56,436 --> 00:19:58,056
notification service extension


616
00:19:58,056 --> 00:19:59,976
support on watchOS as well.


617
00:20:00,836 --> 00:20:02,356
And so you can just decrypt that


618
00:20:02,356 --> 00:20:03,626
payload directly on the device,


619
00:20:03,796 --> 00:20:05,396
and then show it to your user.


620
00:20:07,416 --> 00:20:09,046
And in your Xcode project, to


621
00:20:09,046 --> 00:20:11,186
enable push notifications in the


622
00:20:11,186 --> 00:20:12,746
target editor, if you select


623
00:20:12,746 --> 00:20:14,456
your WatchKit extension you can


624
00:20:14,456 --> 00:20:16,036
then just add a new capability


625
00:20:16,476 --> 00:20:17,846
and enable the push


626
00:20:17,846 --> 00:20:19,166
notifications entitlement.


627
00:20:20,426 --> 00:20:21,466
And if you want to support


628
00:20:21,466 --> 00:20:23,176
background notifications, you


629
00:20:23,176 --> 00:20:25,576
can enable background modes and


630
00:20:25,576 --> 00:20:27,336
then just enable the remote


631
00:20:27,336 --> 00:20:28,716
notification checkbox.


632
00:20:29,586 --> 00:20:31,816
So let's dive into some code


633
00:20:33,286 --> 00:20:33,456
now.


634
00:20:33,616 --> 00:20:35,366
So here we are in our extension


635
00:20:35,366 --> 00:20:37,026
delegate and the application did


636
00:20:37,026 --> 00:20:37,756
finish launching.


637
00:20:38,066 --> 00:20:39,266
And the first thing we want to


638
00:20:39,266 --> 00:20:40,576
do when we register for


639
00:20:40,576 --> 00:20:42,766
notifications is first ask our


640
00:20:42,766 --> 00:20:43,876
user if that's okay.


641
00:20:43,956 --> 00:20:45,116
So we're going to request


642
00:20:45,116 --> 00:20:46,856
authorization on our UN user


643
00:20:46,856 --> 00:20:47,826
notification center.


644
00:20:47,826 --> 00:20:50,336
And if the user elects to grant


645
00:20:50,336 --> 00:20:52,676
us access, then we can just call


646
00:20:52,676 --> 00:20:53,546
register for remote


647
00:20:53,546 --> 00:20:55,666
notifications on our WK shared


648
00:20:55,666 --> 00:20:56,196
extension.


649
00:20:56,616 --> 00:21:00,116
And after using so, if we


650
00:21:00,116 --> 00:21:01,586
implement our did register for


651
00:21:01,586 --> 00:21:04,696
remote notifications call, then


652
00:21:04,696 --> 00:21:06,376
we can get our device token and


653
00:21:06,376 --> 00:21:08,336
forward that notification over


654
00:21:08,336 --> 00:21:10,146
to our notification provider for


655
00:21:10,146 --> 00:21:11,366
our own server.


656
00:21:11,466 --> 00:21:13,826
And of course we want to make


657
00:21:13,826 --> 00:21:15,166
sure an implement did fail to


658
00:21:15,166 --> 00:21:16,996
register to remote notifications


659
00:21:17,166 --> 00:21:18,356
just in case something failed.


660
00:21:21,956 --> 00:21:23,176
And then for background


661
00:21:23,176 --> 00:21:24,766
notifications, those will get


662
00:21:24,766 --> 00:21:26,546
delivered on did receive remote


663
00:21:26,546 --> 00:21:28,146
notification with a fetch


664
00:21:28,146 --> 00:21:29,156
completion handler and a


665
00:21:29,156 --> 00:21:30,276
background fetch result.


666
00:21:30,716 --> 00:21:32,326
So once you receive this you can


667
00:21:32,326 --> 00:21:33,296
handle your background


668
00:21:33,296 --> 00:21:35,226
notification and then just call


669
00:21:35,226 --> 00:21:36,506
the completion handler with


670
00:21:36,506 --> 00:21:37,656
whatever the appropriate


671
00:21:37,656 --> 00:21:42,556
background fetch result is.


672
00:21:42,766 --> 00:21:44,636
So again, that APNS push type,


673
00:21:44,636 --> 00:21:46,666
that new key on the APNS request


674
00:21:46,666 --> 00:21:48,946
header, is required when sending


675
00:21:48,946 --> 00:21:50,296
pushes to watchOS.


676
00:21:50,546 --> 00:21:51,826
And it's supported on all


677
00:21:51,826 --> 00:21:52,416
platforms.


678
00:21:52,726 --> 00:21:54,086
So really if you're sending any


679
00:21:54,086 --> 00:21:55,576
notifications to any Apple


680
00:21:55,576 --> 00:21:57,636
devices, just make sure to add


681
00:21:57,636 --> 00:21:58,436
the APNS push type.


682
00:22:00,336 --> 00:22:02,866
And your APNS topic key on your


683
00:22:02,866 --> 00:22:04,566
APNS request header is going to


684
00:22:04,566 --> 00:22:06,176
be your WatchKit apps bundle


685
00:22:06,176 --> 00:22:08,136
identifier not your WatchKit


686
00:22:08,136 --> 00:22:08,776
extension.


687
00:22:08,776 --> 00:22:09,916
I just want to quickly mention


688
00:22:10,296 --> 00:22:10,706
that.


689
00:22:11,376 --> 00:22:13,686
And if you have multiple apps


690
00:22:13,686 --> 00:22:15,016
like an iPhone app and a Watch


691
00:22:15,016 --> 00:22:16,746
App, you want to send your


692
00:22:16,746 --> 00:22:18,556
notifications to both devices


693
00:22:18,556 --> 00:22:19,596
simultaneously.


694
00:22:19,646 --> 00:22:22,686
And when you do so, the system


695
00:22:22,686 --> 00:22:24,436
will appropriately de-duplicate


696
00:22:24,436 --> 00:22:25,816
the notifications when they're


697
00:22:25,816 --> 00:22:26,976
sent simultaneously.


698
00:22:29,536 --> 00:22:31,116
And another great way to push


699
00:22:31,116 --> 00:22:32,426
information to a device is via


700
00:22:32,426 --> 00:22:33,946
complication pushes.


701
00:22:35,036 --> 00:22:36,776
So complication pushes are a


702
00:22:36,776 --> 00:22:39,236
great way to update your app if


703
00:22:39,236 --> 00:22:41,706
your complication is enabled on


704
00:22:41,706 --> 00:22:42,746
the active watch face.


705
00:22:45,096 --> 00:22:47,076
And this is done via PushKit


706
00:22:47,076 --> 00:22:47,966
which has now been made


707
00:22:47,966 --> 00:22:49,236
available on watchOS.


708
00:22:49,806 --> 00:22:51,476
And you can use PushKit for both


709
00:22:51,476 --> 00:22:53,026
your registration and delivery.


710
00:22:54,316 --> 00:22:55,656
So if you're using the old


711
00:22:55,656 --> 00:22:57,116
complication push mechanism


712
00:22:57,286 --> 00:22:59,036
that's based on iOS, we


713
00:22:59,036 --> 00:23:00,376
recommend you just send your


714
00:23:00,376 --> 00:23:02,326
complication pushes directly to


715
00:23:02,326 --> 00:23:05,096
the watch now.


716
00:23:05,096 --> 00:23:08,266
So in code, we can just register


717
00:23:08,266 --> 00:23:09,886
for complication pushes by


718
00:23:09,886 --> 00:23:11,756
setting up our PK push registry,


719
00:23:12,116 --> 00:23:14,616
set up our delegate, and then


720
00:23:14,616 --> 00:23:18,896
specify some desired push types.


721
00:23:19,176 --> 00:23:20,936
And then once we do so we're


722
00:23:20,936 --> 00:23:22,036
going to get our device token


723
00:23:22,036 --> 00:23:24,026
and we just forward that off to


724
00:23:24,026 --> 00:23:26,366
our server and handle any


725
00:23:26,366 --> 00:23:27,866
invalidations that might occur.


726
00:23:29,526 --> 00:23:30,966
And then when we actually send a


727
00:23:30,966 --> 00:23:33,596
push and deliver one, then we


728
00:23:33,596 --> 00:23:35,306
just implement the appropriate


729
00:23:35,306 --> 00:23:37,236
PushKit method and just handle


730
00:23:37,236 --> 00:23:38,786
receiving that complication push


731
00:23:39,076 --> 00:23:41,056
and then reload our complication


732
00:23:41,056 --> 00:23:41,526
timeline.


733
00:23:44,146 --> 00:23:44,736
So great.


734
00:23:45,266 --> 00:23:46,746
That's how we push information


735
00:23:46,746 --> 00:23:47,356
to a device.


736
00:23:48,306 --> 00:23:49,646
Now let's talk about how to


737
00:23:49,646 --> 00:23:52,126
gather application data and deal


738
00:23:52,126 --> 00:23:52,876
with connectivity.


739
00:23:54,876 --> 00:23:56,446
So in general in terms of


740
00:23:56,446 --> 00:23:58,786
networking, we want to use


741
00:23:58,786 --> 00:24:00,106
URLSession which has been


742
00:24:00,106 --> 00:24:01,616
available for quite some time on


743
00:24:01,616 --> 00:24:02,326
watchOS.


744
00:24:02,986 --> 00:24:06,226
And for those that use CloudKit,


745
00:24:06,356 --> 00:24:07,766
we can also use CloudKit to


746
00:24:07,766 --> 00:24:09,216
gather application data.


747
00:24:11,336 --> 00:24:13,236
So if you're using watch


748
00:24:13,236 --> 00:24:14,766
connectivity and depending on


749
00:24:14,766 --> 00:24:16,186
your iPhone app for any


750
00:24:16,186 --> 00:24:17,746
particular data, you're going to


751
00:24:17,746 --> 00:24:19,356
want to migrate all of your


752
00:24:19,706 --> 00:24:21,626
watch connectivity usage over to


753
00:24:21,716 --> 00:24:22,766
NSURLSession.


754
00:24:22,946 --> 00:24:26,536
And again, the watch, a lot of


755
00:24:26,536 --> 00:24:28,256
times users will only use their


756
00:24:28,256 --> 00:24:29,766
Watch App for a couple seconds


757
00:24:29,766 --> 00:24:30,946
and then immediately put their


758
00:24:30,946 --> 00:24:33,176
wrist down, so make sure to use


759
00:24:33,176 --> 00:24:34,866
background sessions to ensure


760
00:24:34,866 --> 00:24:36,676
that your URLSessions will


761
00:24:36,676 --> 00:24:38,506
appropriately complete.


762
00:24:40,416 --> 00:24:42,486
And so watch connectivity is


763
00:24:42,486 --> 00:24:44,976
still available and you can


764
00:24:44,976 --> 00:24:46,596
still use for any companion


765
00:24:46,596 --> 00:24:48,256
app's specific interactions.


766
00:24:48,256 --> 00:24:50,476
But really only use it if you


767
00:24:50,476 --> 00:24:51,356
really need to.


768
00:24:51,706 --> 00:24:54,736
And there's a Boolean property


769
00:24:54,736 --> 00:24:56,296
is companion app installed to


770
00:24:56,296 --> 00:24:57,986
let you know whether or not the


771
00:24:57,986 --> 00:25:02,506
iPhone app is there.


772
00:25:02,506 --> 00:25:05,066
So in CloudKit, if you're


773
00:25:05,066 --> 00:25:06,696
already using it you'll be happy


774
00:25:06,696 --> 00:25:08,376
to hear we have full CK


775
00:25:08,376 --> 00:25:10,336
subscription support now on


776
00:25:10,336 --> 00:25:13,356
watchOS and, which goes hand in


777
00:25:13,356 --> 00:25:14,746
hand with supporting CloudKit


778
00:25:14,746 --> 00:25:15,636
notifications.


779
00:25:15,896 --> 00:25:16,916
So if you don't want to manage


780
00:25:16,916 --> 00:25:18,886
your own server or notification


781
00:25:18,886 --> 00:25:20,446
provider, you can just use


782
00:25:20,446 --> 00:25:22,346
CloudKit to send notifications.


783
00:25:22,716 --> 00:25:24,636
And there's a great talk


784
00:25:24,636 --> 00:25:26,106
available online if you want to


785
00:25:26,106 --> 00:25:27,556
check out some more information


786
00:25:27,816 --> 00:25:29,226
about CloudKit and its best


787
00:25:29,226 --> 00:25:29,806
practices.


788
00:25:31,076 --> 00:25:33,056
And so for CK subscriptions,


789
00:25:33,936 --> 00:25:35,576
they're a great way to subscribe


790
00:25:35,576 --> 00:25:37,146
to database changes that are


791
00:25:37,146 --> 00:25:38,976
occurring on any other devices.


792
00:25:39,446 --> 00:25:41,716
And then you'll get a background


793
00:25:41,746 --> 00:25:43,396
push notification that'll tell


794
00:25:43,396 --> 00:25:44,476
you when to update your


795
00:25:44,476 --> 00:25:46,166
application and then you can


796
00:25:46,166 --> 00:25:47,946
retrieve only what has changed


797
00:25:48,146 --> 00:25:49,686
between your app and your


798
00:25:49,686 --> 00:25:50,646
CloudKit container.


799
00:25:52,556 --> 00:25:54,696
And from a high level look at


800
00:25:54,696 --> 00:25:57,026
it, say your user is using an


801
00:25:57,216 --> 00:25:58,396
iPhone app and they made a


802
00:25:58,396 --> 00:25:59,336
database change.


803
00:25:59,716 --> 00:26:01,426
That database change will get


804
00:26:01,426 --> 00:26:03,706
sent to the CloudKit and then


805
00:26:03,706 --> 00:26:05,136
CloudKit's going to realize, oh


806
00:26:05,136 --> 00:26:07,556
hey, there's a subscription, and


807
00:26:07,556 --> 00:26:09,106
then CloudKit will then tell


808
00:26:09,106 --> 00:26:11,436
APNS to send a background


809
00:26:11,436 --> 00:26:13,306
notification down to any other


810
00:26:13,306 --> 00:26:15,096
device that has a subscription,


811
00:26:15,436 --> 00:26:18,466
in this case, our Watch App.


812
00:26:19,356 --> 00:26:21,236
And then if the Watch App, if


813
00:26:21,236 --> 00:26:23,126
the user makes a change with the


814
00:26:23,126 --> 00:26:24,506
Watch App, then the cycle will


815
00:26:24,506 --> 00:26:25,506
just repeat itself.


816
00:26:26,246 --> 00:26:29,486
And how we send notifications is


817
00:26:29,486 --> 00:26:31,286
governed by the exact same rules


818
00:26:31,476 --> 00:26:33,096
as on all of our other devices.


819
00:26:33,786 --> 00:26:36,286
To set up your CloudKit


820
00:26:36,286 --> 00:26:37,706
subscriptions, you can set up


821
00:26:37,706 --> 00:26:39,616
your notification info and then


822
00:26:39,616 --> 00:26:41,066
make sure and set your should


823
00:26:41,066 --> 00:26:42,866
send content available to be


824
00:26:42,866 --> 00:26:43,316
true.


825
00:26:43,956 --> 00:26:45,286
And then CloudKit's going to


826
00:26:45,286 --> 00:26:47,286
deliver your push on that same


827
00:26:47,286 --> 00:26:48,306
delegate callback we were


828
00:26:48,306 --> 00:26:49,806
talking about earlier, your did


829
00:26:49,806 --> 00:26:51,256
receive remote notification.


830
00:26:51,496 --> 00:26:52,796
So then you can just handle that


831
00:26:52,796 --> 00:26:54,156
and retrieve only what has


832
00:26:54,156 --> 00:26:56,386
changed between your app and the


833
00:26:56,386 --> 00:26:57,286
CloudKit container.


834
00:26:59,816 --> 00:27:01,526
So great. Those are the three


835
00:27:01,526 --> 00:27:03,646
major ways we think about how to


836
00:27:03,646 --> 00:27:05,336
make watch apps independent.


837
00:27:05,536 --> 00:27:08,076
How do we get user data and then


838
00:27:08,226 --> 00:27:10,266
also how do we push information


839
00:27:10,546 --> 00:27:11,616
down to the device?


840
00:27:11,616 --> 00:27:13,536
And lastly, how do we actually


841
00:27:13,536 --> 00:27:14,656
deal with getting our own


842
00:27:14,656 --> 00:27:19,376
application data?


843
00:27:19,556 --> 00:27:22,026
So users love the freedom and


844
00:27:22,026 --> 00:27:23,236
independence that Apple Watch


845
00:27:23,236 --> 00:27:25,086
gives them and now there are a


846
00:27:25,086 --> 00:27:27,106
bunch of system and developer


847
00:27:27,106 --> 00:27:28,906
capabilities at your disposal.


848
00:27:29,306 --> 00:27:30,886
So make sure to make your watch


849
00:27:30,886 --> 00:27:32,456
apps independent because,


850
00:27:32,996 --> 00:27:34,606
honestly, customers probably


851
00:27:34,606 --> 00:27:35,876
already expect their watch apps


852
00:27:36,196 --> 00:27:38,756
to be independent, and now more


853
00:27:38,756 --> 00:27:39,336
than ever.


854
00:27:39,856 --> 00:27:42,046
So there's some great


855
00:27:42,046 --> 00:27:43,986
information available online


856
00:27:44,386 --> 00:27:46,516
with some sessions and labs.


857
00:27:46,956 --> 00:27:48,456
And thank you all everyone for


858
00:27:48,456 --> 00:27:49,636
coming and I hope you all have a


859
00:27:49,636 --> 00:27:51,636
great WWDC.


860
00:27:51,636 --> 00:27:51,916
Thank you.


861
00:27:52,516 --> 00:27:59,500
[ Applause ]

