1
00:00:01,516 --> 00:00:04,500
[ Music ]


2
00:00:12,516 --> 00:00:15,186
[ Applause ]


3
00:00:15,686 --> 00:00:15,906
>> Thank you.


4
00:00:16,516 --> 00:00:19,716
[ Applause ]


5
00:00:20,216 --> 00:00:21,496
Welcome, great to see you all


6
00:00:21,496 --> 00:00:22,176
here.


7
00:00:22,746 --> 00:00:24,726
My name is Ali Ozer, I along


8
00:00:24,726 --> 00:00:26,076
with my colleagues, Jake and


9
00:00:26,076 --> 00:00:27,336
Jason will be giving you an


10
00:00:27,336 --> 00:00:29,046
overview of iPad apps for Mac


11
00:00:29,136 --> 00:00:29,356
today.


12
00:00:30,736 --> 00:00:32,086
We have two talks for you.


13
00:00:32,086 --> 00:00:33,466
In this first talk, we will


14
00:00:33,466 --> 00:00:35,206
cover the basics, what this


15
00:00:35,206 --> 00:00:36,786
technology is, how to get


16
00:00:36,826 --> 00:00:38,766
started, some things you get for


17
00:00:38,766 --> 00:00:40,846
free, and also some significant


18
00:00:40,846 --> 00:00:42,426
API differences you should be


19
00:00:42,426 --> 00:00:43,196
aware of.


20
00:00:43,536 --> 00:00:45,186
In our second talk, taking iPad


21
00:00:45,246 --> 00:00:48,046
apps for Mac to the next level,


22
00:00:48,046 --> 00:00:49,776
which is later this week, we'll


23
00:00:49,776 --> 00:00:51,656
cover advance topics such as


24
00:00:51,656 --> 00:00:53,256
making your app a better Mac app


25
00:00:53,256 --> 00:00:55,206
and also considerations for


26
00:00:55,206 --> 00:00:56,586
distributing your app.


27
00:00:57,936 --> 00:00:59,336
So, what is iPad apps for Mac


28
00:00:59,546 --> 00:01:00,026
all about?


29
00:01:00,656 --> 00:01:02,216
Well, it's a technology that


30
00:01:02,216 --> 00:01:04,876
enables you to rebuild and run


31
00:01:04,876 --> 00:01:06,726
iPad apps natively on the Mac.


32
00:01:07,726 --> 00:01:09,506
Let me expand on this.


33
00:01:10,316 --> 00:01:12,426
The Mac is a robust platform for


34
00:01:12,426 --> 00:01:13,836
development that enables all


35
00:01:13,836 --> 00:01:14,636
kinds of apps.


36
00:01:15,046 --> 00:01:17,236
We have powerful desktop apps,


37
00:01:17,236 --> 00:01:18,866
web-based experiences, and also


38
00:01:18,866 --> 00:01:20,056
graphic intensive games.


39
00:01:20,516 --> 00:01:22,886
And these experiences, all have


40
00:01:22,886 --> 00:01:24,006
dedicated frameworks that


41
00:01:24,046 --> 00:01:24,586
support them.


42
00:01:24,586 --> 00:01:26,296
But we've been missing one thing


43
00:01:26,896 --> 00:01:29,116
and that's UIKit, the technology


44
00:01:29,116 --> 00:01:31,356
used by iOS apps today.


45
00:01:31,786 --> 00:01:34,616
With the UIKit as a native peer


46
00:01:34,616 --> 00:01:36,346
to these other frameworks on the


47
00:01:36,346 --> 00:01:38,476
Mac, you're enabling you to


48
00:01:38,476 --> 00:01:40,356
bring your iPad apps to the Mac


49
00:01:40,356 --> 00:01:42,146
as first-class experiences.


50
00:01:43,046 --> 00:01:45,236
Let's talk about how we're doing


51
00:01:46,716 --> 00:01:46,826
this.


52
00:01:47,046 --> 00:01:49,856
We have a rich technology stack


53
00:01:50,196 --> 00:01:51,846
that's shared between iOS and


54
00:01:51,846 --> 00:01:53,776
macOS, and we leverage that as


55
00:01:53,776 --> 00:01:54,586
much as possible.


56
00:01:56,076 --> 00:01:57,576
We also bring in iOS frameworks


57
00:01:57,606 --> 00:01:58,816
that don't exist on the Mac and


58
00:01:59,256 --> 00:02:01,386
integrate them to work well on


59
00:02:01,386 --> 00:02:02,496
the Mac with the Mac


60
00:02:02,496 --> 00:02:03,846
infrastructure and with the Mac


61
00:02:03,976 --> 00:02:05,246
UI design guidelines.


62
00:02:05,886 --> 00:02:07,786
And last but not least, we make


63
00:02:07,786 --> 00:02:09,485
it easy for you to get started.


64
00:02:09,485 --> 00:02:11,716
I'll talk about the first two


65
00:02:11,716 --> 00:02:13,166
then Jake will come on stage to


66
00:02:13,166 --> 00:02:14,526
demo and discuss the third one.


67
00:02:15,256 --> 00:02:18,446
OK. So, let me show you what I


68
00:02:18,446 --> 00:02:19,716
mean by technology stack.


69
00:02:20,216 --> 00:02:21,476
Here is the technology stack for


70
00:02:21,476 --> 00:02:23,066
the Mac, we have macOS apps,


71
00:02:23,486 --> 00:02:24,986
these are built upon frameworks,


72
00:02:24,986 --> 00:02:26,636
UI frameworks and also lower


73
00:02:26,636 --> 00:02:28,016
level frameworks as you can see


74
00:02:28,016 --> 00:02:28,216
here.


75
00:02:28,696 --> 00:02:29,546
Now, these are just some


76
00:02:29,546 --> 00:02:30,636
representative frameworks.


77
00:02:30,636 --> 00:02:31,726
We, of course, have hundreds of


78
00:02:31,726 --> 00:02:33,076
frameworks in that stack.


79
00:02:33,646 --> 00:02:34,846
In addition to frameworks, we


80
00:02:34,846 --> 00:02:36,186
also have databases.


81
00:02:36,366 --> 00:02:37,826
These are things like the user's


82
00:02:37,826 --> 00:02:39,216
photos database, context,


83
00:02:39,466 --> 00:02:40,636
preferences, and so on.


84
00:02:41,226 --> 00:02:42,556
And now, we have services, this


85
00:02:42,556 --> 00:02:43,386
includes things like the


86
00:02:43,386 --> 00:02:45,106
Clipboard service for a copy


87
00:02:45,106 --> 00:02:46,946
paste and file coordination.


88
00:02:47,406 --> 00:02:48,586
And then we have the granddaddy


89
00:02:48,656 --> 00:02:50,006
service of them all, the Kernel,


90
00:02:50,006 --> 00:02:51,376
which is our Darwin Kernel.


91
00:02:52,216 --> 00:02:54,046
Now, the iOS stack looks very


92
00:02:54,146 --> 00:02:54,566
similar.


93
00:02:54,906 --> 00:02:56,826
On iOS we have iOS apps and then


94
00:02:56,826 --> 00:02:58,316
there is the stack of frameworks


95
00:02:58,316 --> 00:02:59,686
and databases and services


96
00:02:59,686 --> 00:03:00,156
underneath.


97
00:03:00,646 --> 00:03:01,736
There are some differences as


98
00:03:01,736 --> 00:03:02,816
you can see here and I'll talk


99
00:03:02,816 --> 00:03:06,076
about this in a minute.


100
00:03:06,236 --> 00:03:08,336
Now, many of you aren't aware


101
00:03:08,336 --> 00:03:09,996
that we have been able to run


102
00:03:10,076 --> 00:03:12,086
iOS apps on the Mac for a while


103
00:03:12,086 --> 00:03:13,706
now in the Simulator.


104
00:03:14,686 --> 00:03:16,166
The Simulator has a distinct


105
00:03:16,166 --> 00:03:18,586
copy of the stack running in an


106
00:03:18,586 --> 00:03:19,496
environment of its own.


107
00:03:19,616 --> 00:03:21,036
So, it got its own copy of


108
00:03:21,106 --> 00:03:22,426
frameworks, databases, and


109
00:03:22,426 --> 00:03:22,926
services.


110
00:03:23,956 --> 00:03:25,316
The main goal of the Simulator


111
00:03:25,316 --> 00:03:26,826
is to replicate the iOS


112
00:03:26,826 --> 00:03:28,716
environment so that you can


113
00:03:28,716 --> 00:03:30,526
debug and test your iOS apps as


114
00:03:30,636 --> 00:03:32,086
if they are running on iOS.


115
00:03:32,676 --> 00:03:34,116
The Simulator does an amazing


116
00:03:34,116 --> 00:03:34,736
job of this.


117
00:03:35,576 --> 00:03:37,716
However, integrating well with


118
00:03:37,756 --> 00:03:39,866
the Mac user experience is not a


119
00:03:39,866 --> 00:03:41,096
goal of the Simulator.


120
00:03:41,496 --> 00:03:42,616
And neither is running in an


121
00:03:42,616 --> 00:03:43,926
optimal fashion for the end


122
00:03:43,926 --> 00:03:44,256
user.


123
00:03:44,906 --> 00:03:47,836
So, as a way to bring iOS apps


124
00:03:48,126 --> 00:03:50,396
to the Mac natively, we augment


125
00:03:50,396 --> 00:03:52,096
it, the frameworks, on the Mac


126
00:03:52,576 --> 00:03:54,416
to support the needs of both


127
00:03:54,506 --> 00:03:57,396
AppKit apps and UIKit apps.


128
00:03:57,936 --> 00:03:59,526
We combine and unify the


129
00:03:59,526 --> 00:04:01,016
functionality of lower level


130
00:04:01,016 --> 00:04:03,126
frameworks that exist on both.


131
00:04:03,336 --> 00:04:04,716
Framework such as CoreGraphics,


132
00:04:04,846 --> 00:04:07,466
Foundation, libSystem, to create


133
00:04:07,466 --> 00:04:08,826
single copy that can serve both


134
00:04:08,826 --> 00:04:08,976
stacks.


135
00:04:11,746 --> 00:04:13,116
Now, notice in this picture how


136
00:04:13,166 --> 00:04:14,956
UIKit and AppKit in the


137
00:04:14,956 --> 00:04:16,146
frameworks that depend on them


138
00:04:16,516 --> 00:04:17,486
do not get unified.


139
00:04:17,926 --> 00:04:18,916
Now I'll talk about that in a


140
00:04:18,916 --> 00:04:19,096
bit.


141
00:04:20,136 --> 00:04:21,766
Also note ARKit to the side


142
00:04:21,815 --> 00:04:22,376
there.


143
00:04:22,376 --> 00:04:23,506
Since there is no augmented


144
00:04:23,506 --> 00:04:24,666
reality functionality on the


145
00:04:24,666 --> 00:04:26,206
Mac, we did not bring that


146
00:04:26,206 --> 00:04:26,866
framework over.


147
00:04:26,866 --> 00:04:28,206
So, there it goes.


148
00:04:28,506 --> 00:04:30,116
Now, don't get us wrong, we love


149
00:04:30,116 --> 00:04:32,626
ARKit, just not on the Mac yet.


150
00:04:33,186 --> 00:04:34,856
And, finally, UserNotifications


151
00:04:34,856 --> 00:04:36,096
is in the middle there.


152
00:04:36,156 --> 00:04:37,396
That is an example of a


153
00:04:37,396 --> 00:04:38,716
framework that we not only


154
00:04:38,716 --> 00:04:40,586
brought to the Mac, but we also


155
00:04:40,586 --> 00:04:42,206
made public API on the Mac.


156
00:04:42,346 --> 00:04:44,686
And we did that last year during


157
00:04:44,686 --> 00:04:45,806
the initial bring up of this


158
00:04:45,856 --> 00:04:47,436
technology and we did it on


159
00:04:47,436 --> 00:04:48,656
plain sight as well.


160
00:04:49,296 --> 00:04:50,716
And we also unified services and


161
00:04:50,716 --> 00:04:52,676
databases, so that a single copy


162
00:04:52,676 --> 00:04:54,246
of Photos and Contacts and


163
00:04:54,246 --> 00:04:55,776
Preferences serves both AppKit


164
00:04:55,776 --> 00:04:57,036
apps and UIKit apps.


165
00:04:57,316 --> 00:04:58,456
And same with Services, there's


166
00:04:58,456 --> 00:05:00,116
only a single Copy Paste service


167
00:05:00,116 --> 00:05:01,406
single file coordination, and so


168
00:05:01,406 --> 00:05:01,566
on.


169
00:05:02,416 --> 00:05:03,826
So this is how the environment


170
00:05:03,866 --> 00:05:06,166
for iPad apps for Mac looks.


171
00:05:06,566 --> 00:05:07,656
It's very much like the


172
00:05:07,656 --> 00:05:08,956
environment that AppKit apps


173
00:05:08,956 --> 00:05:11,236
enjoy and running with native


174
00:05:11,396 --> 00:05:12,716
performance characteristics.


175
00:05:14,196 --> 00:05:15,726
Now, before I let go, let me


176
00:05:15,726 --> 00:05:16,626
talk a bit about those


177
00:05:16,626 --> 00:05:18,096
frameworks about AppKit and


178
00:05:18,206 --> 00:05:18,636
UIKit.


179
00:05:19,846 --> 00:05:21,336
Of course, it's not just WebKit


180
00:05:21,336 --> 00:05:21,846
and SceneKit.


181
00:05:21,846 --> 00:05:22,886
There are many other frameworks


182
00:05:22,886 --> 00:05:23,216
up there.


183
00:05:23,686 --> 00:05:24,896
And I'm showing you two copies


184
00:05:24,896 --> 00:05:25,256
of these.


185
00:05:25,786 --> 00:05:26,906
And that's indeed the case.


186
00:05:27,576 --> 00:05:29,256
Since AppKit and UIKit are not


187
00:05:29,256 --> 00:05:30,396
unified, the frameworks that


188
00:05:30,426 --> 00:05:32,106
depend on them also remain


189
00:05:32,176 --> 00:05:33,476
separate even if they are


190
00:05:33,536 --> 00:05:35,086
literally called the same thing,


191
00:05:35,086 --> 00:05:36,516
like two WebKits, two SceneKits,


192
00:05:36,516 --> 00:05:36,976
and so on.


193
00:05:36,976 --> 00:05:38,436
And there are number of reasons


194
00:05:38,436 --> 00:05:38,846
for this.


195
00:05:39,926 --> 00:05:41,736
The main one is that classes


196
00:05:41,786 --> 00:05:43,376
such as NSView and UIView are


197
00:05:43,946 --> 00:05:45,646
distinct and have their own


198
00:05:45,646 --> 00:05:46,676
behaviors and support


199
00:05:46,676 --> 00:05:47,356
infrastructure.


200
00:05:47,676 --> 00:05:48,416
So, we have distinct


201
00:05:48,416 --> 00:05:50,466
declarations and implementations


202
00:05:50,466 --> 00:05:52,266
of classes that in turn build


203
00:05:52,266 --> 00:05:52,716
upon them.


204
00:05:53,286 --> 00:05:54,596
So, here is declaration of


205
00:05:54,596 --> 00:05:57,546
MKMapView for instance for -- in


206
00:05:57,546 --> 00:05:58,986
the case of AppKit and the case


207
00:05:58,986 --> 00:05:59,546
of UIKit.


208
00:05:59,546 --> 00:06:00,886
And as you can see these are


209
00:06:00,886 --> 00:06:02,076
effectively incompatible


210
00:06:02,076 --> 00:06:02,716
definitions.


211
00:06:03,976 --> 00:06:06,236
So, we really do have two copies


212
00:06:06,646 --> 00:06:08,036
of these frameworks in the


213
00:06:08,106 --> 00:06:10,076
system and also in the developer


214
00:06:10,356 --> 00:06:10,566
SDK.


215
00:06:11,126 --> 00:06:12,056
However, it's not something you


216
00:06:12,056 --> 00:06:12,816
need to worry about.


217
00:06:13,266 --> 00:06:14,866
The Static Linker and the


218
00:06:14,866 --> 00:06:16,326
Dynamic Loader do the right


219
00:06:16,326 --> 00:06:18,216
thing when it comes to finding


220
00:06:18,216 --> 00:06:19,406
the right copy of these


221
00:06:19,406 --> 00:06:19,976
frameworks.


222
00:06:20,616 --> 00:06:21,686
Either at built time during


223
00:06:21,686 --> 00:06:23,466
linking or at run time when


224
00:06:23,466 --> 00:06:23,746
loading.


225
00:06:25,716 --> 00:06:27,366
So, let me shift gears now and


226
00:06:27,406 --> 00:06:28,916
talk about why we're doing this.


227
00:06:29,046 --> 00:06:31,446
Why are we bringing UIKit to the


228
00:06:31,996 --> 00:06:32,096
Mac?


229
00:06:32,326 --> 00:06:33,456
Well, I mean this is part of the


230
00:06:33,456 --> 00:06:34,626
reason, you know, just showing


231
00:06:34,626 --> 00:06:36,066
you of just few of the hundreds


232
00:06:36,066 --> 00:06:37,776
of thousands of iPad apps out


233
00:06:37,846 --> 00:06:39,076
there that you've created.


234
00:06:39,656 --> 00:06:40,786
And we think many of them would


235
00:06:40,816 --> 00:06:41,826
be great on Mac.


236
00:06:42,916 --> 00:06:43,976
And there are also millions of


237
00:06:43,976 --> 00:06:45,816
Mac users out there and many of


238
00:06:45,816 --> 00:06:46,806
them would look great with your


239
00:06:46,806 --> 00:06:47,236
apps.


240
00:06:47,716 --> 00:06:48,996
So this technology provides them


241
00:06:48,996 --> 00:06:50,416
with access to these apps and


242
00:06:50,416 --> 00:06:51,596
creates new opportunities for


243
00:06:51,596 --> 00:06:52,156
you.


244
00:06:52,156 --> 00:06:55,596
Or you may be wondering whether


245
00:06:55,596 --> 00:06:57,576
this technology is appropriate


246
00:06:57,636 --> 00:06:58,576
for your application.


247
00:06:58,896 --> 00:07:00,416
And that's an excellent


248
00:07:00,416 --> 00:07:00,786
question.


249
00:07:03,016 --> 00:07:04,906
So, let's say you have an iPad


250
00:07:04,906 --> 00:07:06,526
app and you don't have Mac app


251
00:07:06,526 --> 00:07:07,586
and you want to bring the


252
00:07:07,586 --> 00:07:09,226
functionality of your app to the


253
00:07:09,226 --> 00:07:09,356
Mac.


254
00:07:10,166 --> 00:07:11,426
Well, that's a very good case,


255
00:07:11,426 --> 00:07:12,636
very good time to consider this


256
00:07:12,636 --> 00:07:13,246
technology.


257
00:07:13,676 --> 00:07:15,386
One case of this is, you may


258
00:07:15,436 --> 00:07:17,596
have an iPad app, but maybe on


259
00:07:17,596 --> 00:07:18,896
the desktop the experience is a


260
00:07:18,896 --> 00:07:19,466
web page.


261
00:07:20,506 --> 00:07:21,616
Now, web interfaces can be


262
00:07:21,616 --> 00:07:22,996
pretty great, but they're not


263
00:07:22,996 --> 00:07:24,396
native, you know, native apps


264
00:07:24,486 --> 00:07:26,286
have menu bars, command keys,


265
00:07:26,286 --> 00:07:27,756
access to hardware features,


266
00:07:27,756 --> 00:07:29,836
robust local storage, so much


267
00:07:29,836 --> 00:07:31,056
more complete experience.


268
00:07:31,536 --> 00:07:33,506
In another case, is you may have


269
00:07:33,506 --> 00:07:35,816
an older Mac app, but maybe your


270
00:07:35,816 --> 00:07:37,096
iPad app has features you have


271
00:07:37,096 --> 00:07:38,786
since added and it's come


272
00:07:38,826 --> 00:07:40,886
further, the two have fallen out


273
00:07:40,886 --> 00:07:41,316
of sync.


274
00:07:41,636 --> 00:07:43,236
So, this may be a way to freshen


275
00:07:43,236 --> 00:07:45,126
your Mac app.


276
00:07:45,256 --> 00:07:47,586
One other case is maybe


277
00:07:47,586 --> 00:07:49,896
replacing a Mac app that's using


278
00:07:49,896 --> 00:07:52,036
a non-native, non-optimal third


279
00:07:52,036 --> 00:07:53,136
party porting framework.


280
00:07:53,596 --> 00:07:55,556
If your iPad app is native, this


281
00:07:55,556 --> 00:07:56,906
could be a good way to modernize


282
00:07:57,026 --> 00:08:00,266
your Mac app.


283
00:08:00,536 --> 00:08:01,296
But, however, there is one


284
00:08:01,296 --> 00:08:02,606
important thing to keep in mind.


285
00:08:03,806 --> 00:08:04,936
If you already have an AppKit


286
00:08:04,936 --> 00:08:07,236
app on your Mac -- on the Mac


287
00:08:07,296 --> 00:08:08,906
that is well-maintained and up


288
00:08:08,906 --> 00:08:10,446
to date with your iOS version,


289
00:08:11,056 --> 00:08:11,976
there is no need to consider


290
00:08:11,976 --> 00:08:13,436
this technology, really, you can


291
00:08:13,436 --> 00:08:14,586
continue using AppKit.


292
00:08:15,256 --> 00:08:16,436
AppKit is a first-class


293
00:08:16,436 --> 00:08:17,506
framework that provides a


294
00:08:17,506 --> 00:08:18,596
complete set of APIs for


295
00:08:18,726 --> 00:08:19,596
developing Mac apps.


296
00:08:20,336 --> 00:08:21,906
In fact, it provides access to a


297
00:08:21,906 --> 00:08:23,996
more complete API set than this


298
00:08:23,996 --> 00:08:27,206
technology provides on the Mac.


299
00:08:28,126 --> 00:08:29,186
Now along those lines, there's


300
00:08:29,186 --> 00:08:30,386
also some apps that are just not


301
00:08:30,506 --> 00:08:31,836
candidates for this technology.


302
00:08:32,856 --> 00:08:34,446
One example is iPhone apps.


303
00:08:34,446 --> 00:08:35,905
iPhone apps are optimized for


304
00:08:35,905 --> 00:08:37,126
the smaller screen, so they're


305
00:08:37,126 --> 00:08:38,655
trying to take advantage of that


306
00:08:38,655 --> 00:08:39,296
small screen.


307
00:08:39,326 --> 00:08:40,696
We really want you to have an


308
00:08:40,696 --> 00:08:42,936
iPad app that's taking advantage


309
00:08:42,936 --> 00:08:44,256
of larger screen sizes before


310
00:08:44,256 --> 00:08:45,126
bringing it to the Mac.


311
00:08:46,686 --> 00:08:48,266
Another case is apps that are


312
00:08:48,306 --> 00:08:49,716
built around mobile features.


313
00:08:50,656 --> 00:08:52,256
Earlier I showed you ARKit is


314
00:08:52,296 --> 00:08:53,116
not being available.


315
00:08:53,646 --> 00:08:55,306
If your app is based on ARKit,


316
00:08:55,306 --> 00:08:56,716
it's not going to run very well


317
00:08:56,716 --> 00:08:57,226
on the Mac.


318
00:08:58,006 --> 00:08:59,486
But if the augmented reality


319
00:08:59,486 --> 00:09:01,926
functionality is not crucial, it


320
00:09:01,926 --> 00:09:03,096
may still make sense to bring


321
00:09:03,096 --> 00:09:04,926
the app over and conditionally


322
00:09:04,926 --> 00:09:07,246
remove that functionality on the


323
00:09:08,276 --> 00:09:08,396
Mac.


324
00:09:08,586 --> 00:09:10,086
So, at this stage, before


325
00:09:10,086 --> 00:09:11,806
inviting Jake on stage for his


326
00:09:11,806 --> 00:09:13,276
demo, let me mention the


327
00:09:13,276 --> 00:09:14,446
high-level goals that help us


328
00:09:14,556 --> 00:09:15,536
design and deliver this


329
00:09:15,626 --> 00:09:16,166
technology.


330
00:09:16,166 --> 00:09:19,786
We want this to be easy to get


331
00:09:19,786 --> 00:09:20,156
started.


332
00:09:21,076 --> 00:09:22,646
We have a check box for that,


333
00:09:22,646 --> 00:09:23,826
you saw it yesterday and you'll


334
00:09:23,826 --> 00:09:26,316
also see in a minute.


335
00:09:26,316 --> 00:09:28,796
And we want you to be able to


336
00:09:28,796 --> 00:09:30,436
work with a single source base.


337
00:09:30,946 --> 00:09:32,366
A single source base enables you


338
00:09:32,366 --> 00:09:33,696
to develop without forking your


339
00:09:33,696 --> 00:09:35,766
code and enables carrying both


340
00:09:35,766 --> 00:09:37,266
the iPad and Mac versions of


341
00:09:37,266 --> 00:09:39,156
your app forward simultaneously.


342
00:09:39,926 --> 00:09:41,636
I want you to think of your apps


343
00:09:41,636 --> 00:09:43,146
as iPad apps on the inside.


344
00:09:43,896 --> 00:09:45,126
That's the way you've been


345
00:09:45,126 --> 00:09:47,176
developing them as iOS SDK and


346
00:09:47,176 --> 00:09:48,426
we want you to think -- continue


347
00:09:48,426 --> 00:09:50,016
thinking in terms of the iOS SDK


348
00:09:50,016 --> 00:09:50,866
and concepts.


349
00:09:51,786 --> 00:09:53,426
And finally, we want the app to


350
00:09:53,426 --> 00:09:55,046
come across as a Mac app on the


351
00:09:55,046 --> 00:09:55,556
outside.


352
00:09:55,906 --> 00:09:57,406
So, to the user, it is a


353
00:09:57,406 --> 00:09:59,276
first-class Mac experience.


354
00:09:59,836 --> 00:10:02,506
OK. So with this, let me invite


355
00:10:02,506 --> 00:10:03,986
Jake on stage to show you how


356
00:10:03,986 --> 00:10:04,566
you get started.


357
00:10:05,516 --> 00:10:10,276
[ Applause ]


358
00:10:10,776 --> 00:10:11,856
>> Good afternoon, everyone.


359
00:10:12,536 --> 00:10:13,766
So, now that you've learned a


360
00:10:13,766 --> 00:10:15,646
bit about iPad apps for Mac, I'm


361
00:10:15,646 --> 00:10:16,586
going to show you how you can


362
00:10:16,586 --> 00:10:18,086
bring your apps to the Mac using


363
00:10:18,126 --> 00:10:18,596
Xcode.


364
00:10:19,266 --> 00:10:20,586
Traditionally, you'd have to


365
00:10:20,586 --> 00:10:21,896
learn a completely different UI


366
00:10:21,896 --> 00:10:23,076
framework and write a whole new


367
00:10:23,076 --> 00:10:23,996
app from scratch.


368
00:10:24,446 --> 00:10:25,946
But with Xcode 11, we're making


369
00:10:25,946 --> 00:10:27,416
it possible for you to reuse


370
00:10:27,416 --> 00:10:29,196
your existing project and source


371
00:10:29,196 --> 00:10:29,436
code.


372
00:10:29,946 --> 00:10:30,736
Let's go give it a try.


373
00:10:41,976 --> 00:10:44,056
So, here I've got a small recipe


374
00:10:44,056 --> 00:10:45,456
management iPad app that I've


375
00:10:45,456 --> 00:10:46,226
prepared earlier.


376
00:10:46,536 --> 00:10:48,116
And to get started, we're going


377
00:10:48,116 --> 00:10:50,386
to open our project in Xcode and


378
00:10:52,736 --> 00:10:54,916
we're going to check the Mac


379
00:10:55,706 --> 00:10:57,496
check box under Deployment Info.


380
00:10:58,516 --> 00:10:59,846
Now, note that this will only be


381
00:10:59,846 --> 00:11:01,206
available if your app supports


382
00:11:01,206 --> 00:11:01,546
iPad.


383
00:11:02,686 --> 00:11:03,886
So, I'm going to go ahead and


384
00:11:03,886 --> 00:11:06,676
click this check box and we're


385
00:11:06,676 --> 00:11:07,716
going to see a sheet pop up


386
00:11:07,716 --> 00:11:08,936
which will explain that Xcode is


387
00:11:08,936 --> 00:11:10,096
going to make some changes to


388
00:11:10,096 --> 00:11:10,796
your project.


389
00:11:11,206 --> 00:11:12,326
So, I'm going to go ahead and


390
00:11:12,326 --> 00:11:12,956
click Enable.


391
00:11:12,956 --> 00:11:16,436
Now, let's take a look at what


392
00:11:16,436 --> 00:11:17,286
that did.


393
00:11:17,666 --> 00:11:18,976
So, one of the first things


394
00:11:18,976 --> 00:11:20,486
you'll notice is that there is a


395
00:11:20,486 --> 00:11:22,596
new My Mac run destination in


396
00:11:22,596 --> 00:11:23,376
the Scheme Selector.


397
00:11:23,896 --> 00:11:25,656
This allows you to build, debug,


398
00:11:25,706 --> 00:11:30,066
and test your app for the Mac.


399
00:11:30,286 --> 00:11:31,676
You'll also see that there's a


400
00:11:31,676 --> 00:11:33,336
new label below the Bundle


401
00:11:33,336 --> 00:11:34,236
Identifier field.


402
00:11:34,726 --> 00:11:36,986
All iPad apps and app extensions


403
00:11:37,036 --> 00:11:38,226
brought to the Mac using this


404
00:11:38,226 --> 00:11:39,836
technology will automatically


405
00:11:39,836 --> 00:11:41,256
get a new bundle identifier by


406
00:11:41,256 --> 00:11:42,806
default which uses a special


407
00:11:42,806 --> 00:11:43,266
prefix.


408
00:11:43,996 --> 00:11:46,336
If you have any hard-coded


409
00:11:46,336 --> 00:11:47,706
references to your app or its


410
00:11:47,706 --> 00:11:49,026
app extensions bundle IDs, you


411
00:11:49,456 --> 00:11:50,896
may need to make some co-changes


412
00:11:50,896 --> 00:11:51,986
to take that into account.


413
00:11:52,666 --> 00:11:53,966
And you can learn more about


414
00:11:53,996 --> 00:11:55,656
this and how it affects signing,


415
00:11:55,656 --> 00:11:57,476
provisioning and distribution in


416
00:11:57,476 --> 00:11:59,416
our next talk, Taking iPad Apps


417
00:11:59,416 --> 00:12:00,646
for Mac to the Next Level.


418
00:12:01,616 --> 00:12:02,906
Next, let's talk about


419
00:12:02,966 --> 00:12:03,736
capabilities.


420
00:12:04,666 --> 00:12:06,786
On iOS, apps need to specify


421
00:12:06,846 --> 00:12:08,276
usage description strings in


422
00:12:08,276 --> 00:12:10,226
their Info.plist, in order to


423
00:12:10,226 --> 00:12:11,656
gain access to certain protected


424
00:12:11,656 --> 00:12:13,366
system resources like the camera


425
00:12:13,516 --> 00:12:15,016
or the user's location.


426
00:12:15,626 --> 00:12:17,386
Xcode will use this information


427
00:12:17,596 --> 00:12:19,076
to automatically add equivalent


428
00:12:19,076 --> 00:12:20,676
entitlements to your Mac app, so


429
00:12:20,676 --> 00:12:22,036
that you get the same behavior


430
00:12:22,036 --> 00:12:23,116
as you had on iOS.


431
00:12:24,376 --> 00:12:27,546
For example, iOS apps get the


432
00:12:27,546 --> 00:12:29,236
ability to make outgoing network


433
00:12:29,236 --> 00:12:30,826
connections by default, whereas


434
00:12:30,826 --> 00:12:32,386
Mac apps need entitlement.


435
00:12:33,026 --> 00:12:34,306
If we go to the Signing and


436
00:12:34,306 --> 00:12:36,386
Capabilities Editor, we can see


437
00:12:36,386 --> 00:12:37,976
that Xcode has automatically


438
00:12:37,976 --> 00:12:39,266
added the network client


439
00:12:39,266 --> 00:12:40,916
entitlement as well as a couple


440
00:12:40,916 --> 00:12:42,366
of others based on the Usage


441
00:12:42,366 --> 00:12:43,856
Description strings in our apps


442
00:12:43,856 --> 00:12:44,766
Info.plist.


443
00:12:48,296 --> 00:12:50,206
Next up are frameworks and app


444
00:12:50,206 --> 00:12:50,796
extensions.


445
00:12:51,706 --> 00:12:53,016
While the majority of the iOS


446
00:12:53,016 --> 00:12:54,486
frameworks are also supported on


447
00:12:54,486 --> 00:12:55,796
macOS, there are still


448
00:12:55,796 --> 00:12:57,126
differences between the two


449
00:12:57,246 --> 00:12:57,476
SDKs.


450
00:12:57,476 --> 00:13:00,146
I'm going to focus primarily on


451
00:13:00,146 --> 00:13:01,746
the Xcode project configuration


452
00:13:02,046 --> 00:13:03,386
and later Jason will tell you


453
00:13:03,386 --> 00:13:05,016
more about the API differences.


454
00:13:06,486 --> 00:13:07,776
Now, when Xcode updates your


455
00:13:07,776 --> 00:13:09,876
project it automatically


456
00:13:09,876 --> 00:13:11,716
excludes any unavailable content


457
00:13:11,716 --> 00:13:12,516
from your Mac build.


458
00:13:12,716 --> 00:13:14,276
This includes unavailable system


459
00:13:14,276 --> 00:13:16,146
SDK frameworks, unavailable app


460
00:13:16,146 --> 00:13:18,036
extension types, and Apple Watch


461
00:13:18,036 --> 00:13:18,496
content.


462
00:13:19,806 --> 00:13:21,246
If we go back to the general tab


463
00:13:22,836 --> 00:13:24,126
you can see in the frameworks


464
00:13:24,126 --> 00:13:25,386
libraries and embedded content


465
00:13:25,386 --> 00:13:27,886
section that Xcode has already


466
00:13:27,886 --> 00:13:28,846
done this for some of our


467
00:13:28,846 --> 00:13:29,626
dependencies.


468
00:13:30,086 --> 00:13:32,156
Both ARKit and our Watch app are


469
00:13:32,156 --> 00:13:33,976
marked as building for iOS only.


470
00:13:34,566 --> 00:13:39,056
So, let's go ahead and try to


471
00:13:39,156 --> 00:13:42,856
build this out for the Mac now.


472
00:13:43,606 --> 00:13:44,796
So, let's see if we've got an


473
00:13:44,846 --> 00:13:45,216
error.


474
00:13:46,006 --> 00:13:48,066
And this error says that one of


475
00:13:48,066 --> 00:13:50,826
our dependent frameworks is not


476
00:13:50,826 --> 00:13:52,096
compatible because it was built


477
00:13:52,096 --> 00:13:53,196
for iOS Simulator.


478
00:13:54,406 --> 00:13:56,096
You may be wondering, both iOS


479
00:13:56,096 --> 00:13:58,016
Simulator and macOS frameworks


480
00:13:58,016 --> 00:13:59,086
are built for x86.


481
00:13:59,576 --> 00:14:01,256
So, can you reuse them in your


482
00:14:01,256 --> 00:14:02,096
iPad apps for Mac?


483
00:14:02,856 --> 00:14:04,316
Well, the answer is no.


484
00:14:05,496 --> 00:14:06,896
For any pre-compiled binary


485
00:14:06,896 --> 00:14:08,036
libraries that you may have,


486
00:14:08,506 --> 00:14:09,416
you'll need to reach out to your


487
00:14:09,416 --> 00:14:10,576
vendor to provide a version


488
00:14:10,576 --> 00:14:12,126
specifically compiled for the


489
00:14:12,126 --> 00:14:13,816
iPad apps for Mac environment.


490
00:14:14,676 --> 00:14:15,986
Frameworks built from source as


491
00:14:15,986 --> 00:14:16,996
part of your project on the


492
00:14:16,996 --> 00:14:18,446
other hand are automatically


493
00:14:18,446 --> 00:14:19,856
configured to build for Mac by


494
00:14:19,856 --> 00:14:20,226
default.


495
00:14:24,396 --> 00:14:26,086
You may want to consider using


496
00:14:26,086 --> 00:14:27,536
the platform drop-down if you're


497
00:14:27,536 --> 00:14:28,826
in the frameworks libraries and


498
00:14:28,826 --> 00:14:30,556
embedded content section, to


499
00:14:30,866 --> 00:14:32,556
exclude incompatible libraries


500
00:14:32,556 --> 00:14:34,266
from your Mac build until you're


501
00:14:34,266 --> 00:14:35,486
able to obtain a compatible


502
00:14:35,486 --> 00:14:37,356
version or if the functionality


503
00:14:37,356 --> 00:14:39,026
that it provides isn't suitable


504
00:14:39,026 --> 00:14:39,726
for your Mac app.


505
00:14:40,646 --> 00:14:42,036
However, if you rely on that


506
00:14:42,036 --> 00:14:42,876
framework for critical


507
00:14:42,876 --> 00:14:44,596
functionality, it may be best to


508
00:14:44,596 --> 00:14:46,176
wait for updated libraries from


509
00:14:46,176 --> 00:14:48,856
your vendors before reporting to


510
00:14:50,856 --> 00:14:50,966
Mac.


511
00:14:51,126 --> 00:14:52,986
Now, in this case, I happen to


512
00:14:52,986 --> 00:14:54,586
have an updated copy of this


513
00:14:54,586 --> 00:14:55,486
library available.


514
00:14:55,936 --> 00:14:56,986
So, I'm going to go ahead and


515
00:14:56,986 --> 00:14:58,166
add this to the project.


516
00:14:59,606 --> 00:15:00,976
So, first I'll delete the


517
00:15:00,976 --> 00:15:01,886
existing framework.


518
00:15:02,536 --> 00:15:05,046
And, now, we'll go ahead and


519
00:15:05,046 --> 00:15:06,066
drag the new one in.


520
00:15:06,706 --> 00:15:10,266
Now, the first thing you may


521
00:15:10,266 --> 00:15:11,766
notice is that this isn't a


522
00:15:11,766 --> 00:15:12,716
regular framework.


523
00:15:14,186 --> 00:15:15,956
This updated library has been


524
00:15:15,956 --> 00:15:17,476
delivered as an XC framework,


525
00:15:17,836 --> 00:15:19,286
which is a new feature in Xcode


526
00:15:19,286 --> 00:15:20,576
11 that allows library


527
00:15:20,576 --> 00:15:22,126
developers to package a library


528
00:15:22,126 --> 00:15:23,926
from multiple platforms into a


529
00:15:23,926 --> 00:15:25,406
single distributable bundle that


530
00:15:25,406 --> 00:15:26,526
you can use in your Xcode


531
00:15:26,556 --> 00:15:27,166
projects.


532
00:15:28,286 --> 00:15:29,826
XC frameworks are not required


533
00:15:29,826 --> 00:15:30,566
when bringing your app to the


534
00:15:30,566 --> 00:15:32,276
Mac, but then they got much more


535
00:15:32,276 --> 00:15:33,956
convenient to manage your


536
00:15:33,956 --> 00:15:35,356
dependencies across multiple


537
00:15:35,356 --> 00:15:36,066
platforms.


538
00:15:37,356 --> 00:15:38,436
You can learn more about them in


539
00:15:38,436 --> 00:15:39,806
binary frameworks in Swift.


540
00:15:40,346 --> 00:15:42,086
And note that they do work for


541
00:15:42,086 --> 00:15:42,976
Objective-C as well.


542
00:15:46,956 --> 00:15:48,656
Next, one of the most important


543
00:15:48,656 --> 00:15:49,786
aspects of bringing your app to


544
00:15:49,786 --> 00:15:51,356
the Mac is, of course, your


545
00:15:51,356 --> 00:15:51,716
code.


546
00:15:52,666 --> 00:15:54,066
Now, I previously showed you how


547
00:15:54,066 --> 00:15:55,676
Xcode will automatically exclude


548
00:15:55,676 --> 00:15:57,096
some unavailable frameworks from


549
00:15:57,096 --> 00:15:57,536
your build.


550
00:15:58,216 --> 00:15:59,136
But you may still need to make


551
00:15:59,136 --> 00:16:00,476
adjustments to your source code


552
00:16:00,716 --> 00:16:01,866
in order to compile out any


553
00:16:01,896 --> 00:16:03,636
references to API as provided by


554
00:16:03,636 --> 00:16:05,326
those frameworks which may be


555
00:16:05,326 --> 00:16:06,866
unavailable due to differences


556
00:16:06,866 --> 00:16:08,536
in hardware or differences in


557
00:16:08,536 --> 00:16:09,556
user experience.


558
00:16:10,096 --> 00:16:13,016
You can conditionally compile


559
00:16:13,016 --> 00:16:14,296
your code using the target


560
00:16:14,296 --> 00:16:15,606
environment platform condition


561
00:16:15,606 --> 00:16:18,216
in Swift or the target OS macros


562
00:16:18,306 --> 00:16:19,206
in Objective-C.


563
00:16:19,676 --> 00:16:22,096
So, let's take a look at that


564
00:16:22,096 --> 00:16:22,286
now.


565
00:16:22,286 --> 00:16:23,666
I'm going to go ahead and try to


566
00:16:23,666 --> 00:16:24,356
build again.


567
00:16:24,866 --> 00:16:29,556
And we can see that ARKit is not


568
00:16:29,556 --> 00:16:30,006
available.


569
00:16:31,296 --> 00:16:34,336
Great. So, I was hoping to add a


570
00:16:34,336 --> 00:16:36,746
way to preview my recipes in


571
00:16:36,746 --> 00:16:37,636
augmented reality.


572
00:16:38,336 --> 00:16:39,976
But we can probably get away


573
00:16:39,976 --> 00:16:41,846
without that, the food is best


574
00:16:41,846 --> 00:16:43,076
experienced in a different kind


575
00:16:43,076 --> 00:16:44,546
of AR, actual reality.


576
00:16:44,696 --> 00:16:46,146
So, let's just go ahead and


577
00:16:46,236 --> 00:16:46,896
comment that out.


578
00:16:48,246 --> 00:16:49,776
So, I've got some sample code


579
00:16:49,776 --> 00:16:50,946
here I can use to do that.


580
00:16:50,946 --> 00:16:54,076
I'm going to go ahead and #ifdef


581
00:16:54,076 --> 00:16:54,956
out ARKit.


582
00:16:54,956 --> 00:16:58,846
And I'm going to #ifdef out the


583
00:16:58,846 --> 00:17:00,396
corresponding API as well.


584
00:17:00,396 --> 00:17:04,205
OK. Let's try to build it one


585
00:17:04,205 --> 00:17:05,576
more time.


586
00:17:06,915 --> 00:17:07,726
Another error.


587
00:17:08,106 --> 00:17:13,496
OK. So, this time this looks


588
00:17:13,496 --> 00:17:15,346
like the StoreKit framework is


589
00:17:15,346 --> 00:17:16,056
available in the Mac.


590
00:17:16,736 --> 00:17:18,986
But the specific API that we're


591
00:17:18,986 --> 00:17:20,185
trying to use here is not.


592
00:17:21,056 --> 00:17:22,376
Now, I'm not sure what my apps


593
00:17:22,376 --> 00:17:23,576
marketing team is trying to do


594
00:17:23,576 --> 00:17:25,945
here, but probably not too


595
00:17:25,945 --> 00:17:26,296
important.


596
00:17:26,296 --> 00:17:27,836
I'm just going to #if this out


597
00:17:28,496 --> 00:17:28,936
as well.


598
00:17:29,856 --> 00:17:33,816
OK. And we can leave it to do


599
00:17:33,816 --> 00:17:37,956
for them, TODO: Something else?


600
00:17:39,216 --> 00:17:41,396
OK. Great.


601
00:17:42,326 --> 00:17:44,296
So, at this point, I could run


602
00:17:44,296 --> 00:17:44,646
the app.


603
00:17:45,436 --> 00:17:47,096
But before I do so, let's


604
00:17:47,096 --> 00:17:48,866
consider one key refinement that


605
00:17:48,866 --> 00:17:49,876
we can make to our Mac app.


606
00:17:50,806 --> 00:17:53,536
By default, UIKit apps will use


607
00:17:53,686 --> 00:17:55,896
the icon from your iPad app, the


608
00:17:55,896 --> 00:17:58,486
same rounded rec design, as you


609
00:17:58,486 --> 00:18:00,096
can see here, this nice little


610
00:18:00,096 --> 00:18:00,706
cookie.


611
00:18:01,446 --> 00:18:03,566
But Mac apps traditionally have


612
00:18:03,566 --> 00:18:05,276
beautiful detailed rich icons,


613
00:18:05,276 --> 00:18:07,166
which can be up to 512 points in


614
00:18:07,166 --> 00:18:08,676
size and make use of


615
00:18:08,676 --> 00:18:09,946
transparency for even more


616
00:18:09,946 --> 00:18:11,176
design and flexibility.


617
00:18:12,316 --> 00:18:13,396
Customizing your app with a


618
00:18:13,396 --> 00:18:14,806
great Mac icon really helps it


619
00:18:14,806 --> 00:18:16,426
to standout and you can learn


620
00:18:16,426 --> 00:18:17,876
more about how to design a great


621
00:18:17,876 --> 00:18:20,466
one in the section, What's New


622
00:18:20,466 --> 00:18:22,896
in iOS and macOS Design.


623
00:18:23,616 --> 00:18:25,886
So, to add a Mac specific icon


624
00:18:26,306 --> 00:18:27,966
we're going to want to navigate


625
00:18:28,016 --> 00:18:30,156
to the Asset Catalog Editor in


626
00:18:30,206 --> 00:18:32,786
Xcode, so select my Asset


627
00:18:32,846 --> 00:18:35,426
Catalog here and I'm going to


628
00:18:35,426 --> 00:18:37,036
select the App Icon Resource.


629
00:18:37,706 --> 00:18:41,126
And I'm going to the Inspector


630
00:18:41,526 --> 00:18:44,146
and I'm going to check the Mac


631
00:18:44,226 --> 00:18:45,486
check box to reveal the new


632
00:18:45,486 --> 00:18:46,056
slots.


633
00:18:46,606 --> 00:18:48,666
And from here, you just need to


634
00:18:48,666 --> 00:18:49,946
drag in your new icons.


635
00:18:49,996 --> 00:18:51,636
So, I'm going to go ahead and


636
00:18:51,636 --> 00:18:52,766
use an icon set that I've


637
00:18:52,766 --> 00:18:53,676
prepared earlier.


638
00:18:55,216 --> 00:18:57,226
I'm going to go ahead and drag


639
00:18:58,376 --> 00:18:58,916
that in.


640
00:18:59,566 --> 00:19:03,786
Oops. There we go.


641
00:19:04,046 --> 00:19:05,676
OK. You can see we got this


642
00:19:05,706 --> 00:19:06,746
great cookie icon.


643
00:19:08,526 --> 00:19:10,626
So, let's go ahead and give this


644
00:19:10,626 --> 00:19:11,226
one more try.


645
00:19:11,226 --> 00:19:12,556
I'm going to go ahead and build


646
00:19:12,556 --> 00:19:12,926
again.


647
00:19:13,826 --> 00:19:15,056
And this may take a moment


648
00:19:15,056 --> 00:19:16,106
because we've switch from


649
00:19:16,106 --> 00:19:17,666
building for iOS to building for


650
00:19:17,666 --> 00:19:18,056
the Mac.


651
00:19:18,056 --> 00:19:19,116
It's going to need to rebuild


652
00:19:19,116 --> 00:19:21,186
all of our source code and our


653
00:19:21,186 --> 00:19:21,936
resources.


654
00:19:22,036 --> 00:19:25,346
I'll give that a moment to come


655
00:19:25,346 --> 00:19:25,486
up.


656
00:19:27,006 --> 00:19:28,786
And we have successfully built


657
00:19:28,826 --> 00:19:30,286
and run for the Mac.


658
00:19:30,286 --> 00:19:32,346
And you can see we've got -- oh,


659
00:19:32,346 --> 00:19:32,876
thank you.


660
00:19:33,516 --> 00:19:36,896
[ Applause ]


661
00:19:37,396 --> 00:19:38,256
And you can see we've got a


662
00:19:38,256 --> 00:19:40,496
title bar, we've got window stop


663
00:19:40,496 --> 00:19:43,156
lights, we've got a menu,


664
00:19:44,036 --> 00:19:46,446
resizable window, and of course


665
00:19:46,446 --> 00:19:48,656
our beautiful Mac cookie icon,


666
00:19:49,846 --> 00:19:51,386
just like you'd expect.


667
00:19:52,276 --> 00:19:53,746
And once you're finished


668
00:19:53,746 --> 00:19:55,966
bringing your app to the Mac you


669
00:19:55,966 --> 00:19:57,656
can click the product archive


670
00:19:57,656 --> 00:19:59,586
Menu item in Xcode to create an


671
00:19:59,586 --> 00:20:00,976
archive and open the organizer.


672
00:20:01,726 --> 00:20:02,756
And from there, you can


673
00:20:02,756 --> 00:20:04,286
distribute to the Mac App Store


674
00:20:04,446 --> 00:20:05,936
or do so independently using


675
00:20:05,936 --> 00:20:07,326
developer ID.


676
00:20:08,696 --> 00:20:11,396
So, that's how Xcode 11 helps


677
00:20:11,396 --> 00:20:12,646
you bring your iPad apps to the


678
00:20:12,646 --> 00:20:12,806
Mac.


679
00:20:14,446 --> 00:20:15,836
And now, I'd like to invite Ali


680
00:20:15,836 --> 00:20:17,166
back to the stage who's going to


681
00:20:17,166 --> 00:20:18,366
tell you more about the user


682
00:20:18,366 --> 00:20:19,736
experience improvements that you


683
00:20:19,736 --> 00:20:20,246
get for free.


684
00:20:21,516 --> 00:20:25,476
[ Applause ]


685
00:20:25,976 --> 00:20:26,926
>> OK. So, now, I want to talk


686
00:20:26,976 --> 00:20:28,516
to you about things you get for


687
00:20:28,516 --> 00:20:30,246
free and I'm not going to talk


688
00:20:30,246 --> 00:20:31,796
to you about the lunch you got


689
00:20:31,796 --> 00:20:32,606
out on the concourse.


690
00:20:33,116 --> 00:20:35,176
But what you get in your UIKit


691
00:20:35,246 --> 00:20:36,256
for Mac app.


692
00:20:36,256 --> 00:20:37,586
So there are ton of -- frankly


693
00:20:37,586 --> 00:20:38,446
there are tons of things you get


694
00:20:38,496 --> 00:20:38,976
for free.


695
00:20:39,276 --> 00:20:40,576
Large sections of that whole


696
00:20:40,576 --> 00:20:41,766
stack of frameworks, and


697
00:20:41,766 --> 00:20:43,166
database, and services I showed


698
00:20:43,166 --> 00:20:45,016
you earlier works in your Mac


699
00:20:45,176 --> 00:20:46,146
app automatically.


700
00:20:46,576 --> 00:20:47,516
But here, I want to highlight


701
00:20:47,586 --> 00:20:49,006
some things that are not just


702
00:20:49,146 --> 00:20:51,306
free but also automatically


703
00:20:51,306 --> 00:20:53,406
mapped over to Mac paradigms and


704
00:20:53,406 --> 00:20:54,586
Mac way of doing things.


705
00:20:55,126 --> 00:20:56,156
So, let's first take a look at


706
00:20:56,156 --> 00:20:57,906
that tasty recipe app that Jake


707
00:20:57,906 --> 00:20:58,326
used.


708
00:20:59,126 --> 00:21:00,666
So, as you saw on the demo, you


709
00:21:00,666 --> 00:21:01,916
got the default menu bar.


710
00:21:02,256 --> 00:21:03,656
The app gets a pretty functional


711
00:21:03,656 --> 00:21:05,066
default menu bar that has a lot


712
00:21:05,066 --> 00:21:06,706
of menu items that Mac users


713
00:21:06,706 --> 00:21:07,046
expect.


714
00:21:09,456 --> 00:21:10,656
Next to get window management.


715
00:21:10,656 --> 00:21:11,836
This includes things like window


716
00:21:11,836 --> 00:21:13,856
resizing, full screen, split


717
00:21:13,906 --> 00:21:15,046
view, also what we


718
00:21:15,046 --> 00:21:16,266
affectionately call the window


719
00:21:16,266 --> 00:21:16,796
stoplight.


720
00:21:16,876 --> 00:21:17,986
So there's three buttons in the


721
00:21:17,986 --> 00:21:18,536
title bar.


722
00:21:19,246 --> 00:21:20,546
And one more thing to point out,


723
00:21:21,976 --> 00:21:23,276
if you happen to have your iPad


724
00:21:23,276 --> 00:21:25,056
nearby, you have the ability to


725
00:21:25,056 --> 00:21:26,876
display your iPad app for a Mac


726
00:21:26,876 --> 00:21:28,336
window on your iPad.


727
00:21:29,516 --> 00:21:33,136
[ Applause ]


728
00:21:33,636 --> 00:21:35,306
Dark mode works automatically.


729
00:21:36,476 --> 00:21:37,796
If you go further and adapt any


730
00:21:37,796 --> 00:21:39,466
of the new APIs to make your app


731
00:21:39,466 --> 00:21:40,826
a better iOS dark mode app,


732
00:21:40,906 --> 00:21:42,106
those will also carry over


733
00:21:42,106 --> 00:21:42,746
automatically.


734
00:21:43,666 --> 00:21:45,316
Scrollbars and scrolling also


735
00:21:45,316 --> 00:21:46,626
works as expected on the Mac,


736
00:21:47,146 --> 00:21:48,636
mapping to overlay scrollbar


737
00:21:48,636 --> 00:21:49,336
functionality.


738
00:21:50,646 --> 00:21:51,746
Scrolling also works when the


739
00:21:51,746 --> 00:21:53,116
window is inactive which, of


740
00:21:53,116 --> 00:21:54,326
course is something that users


741
00:21:54,326 --> 00:21:56,286
expect on the Mac with gesture


742
00:21:56,286 --> 00:21:56,776
scrolling.


743
00:21:57,816 --> 00:21:59,646
If the user has scrollbars


744
00:21:59,646 --> 00:22:01,226
always showing, that will also


745
00:22:01,226 --> 00:22:03,446
work automatically in your


746
00:22:03,446 --> 00:22:04,036
application.


747
00:22:05,296 --> 00:22:06,946
Now let me talk about settings.


748
00:22:07,346 --> 00:22:08,546
Our recipe app does not have any


749
00:22:08,626 --> 00:22:10,486
settings, so I'll show you the


750
00:22:10,486 --> 00:22:11,836
voice memos app.


751
00:22:12,956 --> 00:22:14,706
On iOS, apps specify setting


752
00:22:14,776 --> 00:22:16,736
bundles and these controls --


753
00:22:16,736 --> 00:22:18,206
these settings controls appear


754
00:22:18,206 --> 00:22:19,286
in the iOS settings app.


755
00:22:19,766 --> 00:22:20,486
For instance, here are the


756
00:22:20,576 --> 00:22:22,186
settings for voice memos, in the


757
00:22:22,236 --> 00:22:22,826
settings apps.


758
00:22:23,116 --> 00:22:24,416
Now, on the Mac, the design


759
00:22:24,416 --> 00:22:25,646
guideline is to access app


760
00:22:25,886 --> 00:22:27,956
preferences through a menu item


761
00:22:28,056 --> 00:22:29,156
in the app like this.


762
00:22:29,666 --> 00:22:30,876
So, when we see that your app


763
00:22:30,966 --> 00:22:32,676
has settings, we give you this


764
00:22:32,736 --> 00:22:34,566
menu item and automatically map


765
00:22:34,676 --> 00:22:36,406
the settings to a Mac prefpane


766
00:22:36,806 --> 00:22:39,046
within the app like so, and you


767
00:22:39,046 --> 00:22:40,376
can see them side by side.


768
00:22:40,416 --> 00:22:41,236
So, this is automatic.


769
00:22:42,516 --> 00:22:46,916
[ Applause ]


770
00:22:47,416 --> 00:22:49,346
Your application gets basic


771
00:22:49,346 --> 00:22:50,816
support for touch bar, the


772
00:22:50,816 --> 00:22:52,206
system touch bar that all apps


773
00:22:52,266 --> 00:22:52,696
get.


774
00:22:52,956 --> 00:22:54,476
But in addition, if you're using


775
00:22:54,476 --> 00:22:55,386
API such as


776
00:22:55,386 --> 00:22:57,256
AVPlayerViewController or


777
00:22:57,256 --> 00:22:59,346
UITextView, they will also


778
00:22:59,346 --> 00:23:00,706
automatically provide access to


779
00:23:00,706 --> 00:23:02,366
the media in the text touch bars


780
00:23:02,436 --> 00:23:03,626
in your app, like the ones you


781
00:23:03,626 --> 00:23:04,046
see here.


782
00:23:06,526 --> 00:23:07,576
Another key element that's


783
00:23:07,576 --> 00:23:08,756
automatically mapped is the


784
00:23:08,756 --> 00:23:09,906
Document Picker.


785
00:23:09,906 --> 00:23:10,326
Here is how


786
00:23:10,326 --> 00:23:12,096
UIDocumentPickerViewController


787
00:23:12,096 --> 00:23:14,626
comes across as NSOpenPanel as


788
00:23:14,626 --> 00:23:17,936
the user would expect.


789
00:23:18,126 --> 00:23:19,676
Custom views that you've created


790
00:23:19,886 --> 00:23:22,096
come across as is, as intended.


791
00:23:22,546 --> 00:23:23,856
Here in the voice memos app, the


792
00:23:23,856 --> 00:23:25,146
custom waveform view looks


793
00:23:25,146 --> 00:23:27,226
exactly the same across both


794
00:23:27,226 --> 00:23:27,786
platforms.


795
00:23:28,126 --> 00:23:32,036
Now, let me talk about another


796
00:23:32,036 --> 00:23:33,296
set of things that come across


797
00:23:33,556 --> 00:23:34,536
pretty much as is.


798
00:23:35,316 --> 00:23:37,216
Let's look at a form sheet in


799
00:23:37,216 --> 00:23:37,806
News.


800
00:23:38,186 --> 00:23:40,196
Here's News on the iPad and


801
00:23:40,196 --> 00:23:41,916
here's the form sheet for


802
00:23:42,356 --> 00:23:43,416
managing notifications.


803
00:23:44,666 --> 00:23:46,916
And here's News on the Mac with


804
00:23:46,916 --> 00:23:48,316
the same form sheet displayed.


805
00:23:48,986 --> 00:23:50,146
You can see that that form sheet


806
00:23:50,146 --> 00:23:52,276
comes across as is along with


807
00:23:52,276 --> 00:23:53,946
the UI switches in the content.


808
00:23:54,506 --> 00:23:56,276
Let me show you side by side.


809
00:23:56,886 --> 00:23:58,296
So, here, you're seeing one of


810
00:23:58,296 --> 00:24:00,066
my main goals and that's to


811
00:24:00,066 --> 00:24:01,776
provide a high degree of source


812
00:24:01,776 --> 00:24:04,896
compatibility for your apps


813
00:24:04,896 --> 00:24:05,506
where possible.


814
00:24:05,986 --> 00:24:07,606
Trying to give apps full AppKit


815
00:24:07,646 --> 00:24:09,246
controls and metrics with


816
00:24:09,246 --> 00:24:10,406
represent too much of a


817
00:24:10,406 --> 00:24:10,916
disruption.


818
00:24:11,526 --> 00:24:13,586
So, individually, UIKit controls


819
00:24:13,586 --> 00:24:15,006
and layouts based on them come


820
00:24:15,006 --> 00:24:17,146
across as is providing maximal


821
00:24:17,146 --> 00:24:19,196
compatibility for your app.


822
00:24:20,996 --> 00:24:22,596
Now along the same lines, text


823
00:24:22,596 --> 00:24:22,986
sizes.


824
00:24:23,846 --> 00:24:25,576
On iOS, the base line font size


825
00:24:25,576 --> 00:24:28,286
for controls is 17 points while


826
00:24:28,496 --> 00:24:30,526
on the Mac, it's 13 points.


827
00:24:30,526 --> 00:24:33,116
And as you can see, not the same


828
00:24:33,116 --> 00:24:34,606
size when displayed next to each


829
00:24:34,606 --> 00:24:36,456
other, so two reasons for this


830
00:24:36,676 --> 00:24:38,226
discrepancy is the higher


831
00:24:38,226 --> 00:24:39,726
relative display density of iOS


832
00:24:39,786 --> 00:24:41,176
devices and the need to


833
00:24:41,176 --> 00:24:42,136
accommodate touches.


834
00:24:42,996 --> 00:24:44,656
So, to provide interaction


835
00:24:44,746 --> 00:24:45,666
consistent with Mac


836
00:24:45,666 --> 00:24:47,656
applications, we scale content


837
00:24:47,656 --> 00:24:49,836
areas down to 77%.


838
00:24:51,176 --> 00:24:52,276
So, everything in the window is


839
00:24:52,356 --> 00:24:53,826
scaled uniformly and you don't


840
00:24:53,826 --> 00:24:55,716
have to redesign any of your


841
00:24:55,716 --> 00:24:56,816
windows for the Mac.


842
00:24:58,016 --> 00:24:59,126
We have a Font Management and


843
00:24:59,166 --> 00:25:00,656
Text Scaling talk later in the


844
00:25:00,656 --> 00:25:02,256
week which will cover this and


845
00:25:02,256 --> 00:25:03,696
some related topics in more


846
00:25:03,696 --> 00:25:03,956
depth.


847
00:25:06,936 --> 00:25:07,926
Now, let me talk about a few


848
00:25:07,926 --> 00:25:09,186
more things quickly that you get


849
00:25:09,236 --> 00:25:10,276
for free.


850
00:25:10,466 --> 00:25:11,846
If you implement copy and paste,


851
00:25:12,106 --> 00:25:14,186
drag and drop, printing or take


852
00:25:14,686 --> 00:25:16,326
advantage of the new multiple


853
00:25:16,326 --> 00:25:18,846
window, multitasking APIs in iOS


854
00:25:18,906 --> 00:25:20,496
13, these will carry over to the


855
00:25:20,496 --> 00:25:22,176
Mac free and automatically.


856
00:25:23,446 --> 00:25:24,736
On the Mac, the lifecycle of


857
00:25:24,736 --> 00:25:25,856
your app adjusts to the Mac


858
00:25:25,936 --> 00:25:27,506
paradigms and any call backs you


859
00:25:27,506 --> 00:25:28,806
implement for managing a


860
00:25:28,806 --> 00:25:30,566
lifecycle will also carry over


861
00:25:30,566 --> 00:25:31,596
and work automatically on the


862
00:25:31,596 --> 00:25:31,756
Mac.


863
00:25:32,296 --> 00:25:33,486
You will hear more about this in


864
00:25:33,486 --> 00:25:35,826
our Taking iPad Apps for Mac to


865
00:25:35,826 --> 00:25:36,726
the Next Level talk.


866
00:25:37,736 --> 00:25:38,826
Beyond these things you get for


867
00:25:38,826 --> 00:25:39,876
free, there are things you can


868
00:25:39,876 --> 00:25:41,206
do to make your app a better Mac


869
00:25:41,206 --> 00:25:43,336
app and here are some of these.


870
00:25:43,756 --> 00:25:44,896
Jake already covered the Mac


871
00:25:45,056 --> 00:25:45,616
icon.


872
00:25:46,236 --> 00:25:47,616
The rest we'll be covering in


873
00:25:47,616 --> 00:25:49,046
our advanced session later in


874
00:25:49,046 --> 00:25:50,676
the week and also in the iOS and


875
00:25:50,676 --> 00:25:52,406
macOS design session later this


876
00:25:52,406 --> 00:25:52,896
afternoon.


877
00:25:54,476 --> 00:25:55,786
OK, so thank you.


878
00:25:55,786 --> 00:25:56,716
At this point, I'd like to


879
00:25:56,716 --> 00:25:57,826
invite Jason on stage.


880
00:25:58,516 --> 00:26:03,386
[ Applause ]


881
00:26:03,886 --> 00:26:04,976
>> All right, thanks Ali.


882
00:26:08,616 --> 00:26:09,516
Good afternoon.


883
00:26:09,516 --> 00:26:11,376
So, I'd like to dive into some


884
00:26:11,376 --> 00:26:12,696
of the API differences that


885
00:26:12,696 --> 00:26:13,606
you're likely to encounter when


886
00:26:13,606 --> 00:26:14,706
you bring your iPad app to the


887
00:26:14,706 --> 00:26:15,006
Mac.


888
00:26:15,516 --> 00:26:17,626
And there are three categories


889
00:26:17,626 --> 00:26:18,666
of API differences I want to


890
00:26:18,666 --> 00:26:19,136
talk about.


891
00:26:19,136 --> 00:26:21,596
Those APIs that have identical


892
00:26:21,596 --> 00:26:23,006
behavior and the good news is


893
00:26:23,006 --> 00:26:24,536
the majority of the APIs worked


894
00:26:24,596 --> 00:26:25,386
as expected.


895
00:26:25,926 --> 00:26:28,226
Those APIs that are mapped to


896
00:26:28,226 --> 00:26:29,066
macOS functionally--


897
00:26:29,246 --> 00:26:30,576
functionality automatically.


898
00:26:31,156 --> 00:26:33,176
And these utilize the iOS APIs


899
00:26:33,176 --> 00:26:34,626
but they result in macOS


900
00:26:34,626 --> 00:26:35,416
behavior.


901
00:26:36,426 --> 00:26:38,036
And then, finally, APIs that are


902
00:26:38,036 --> 00:26:39,396
unavailable for various reasons


903
00:26:39,396 --> 00:26:40,556
which we'll get into.


904
00:26:40,826 --> 00:26:41,476
Now, we're not going to cover


905
00:26:41,476 --> 00:26:42,616
anything in the first section


906
00:26:43,396 --> 00:26:44,776
and Ali covered many of the


907
00:26:44,776 --> 00:26:46,016
items in the second section.


908
00:26:46,616 --> 00:26:47,896
But there's one additional area


909
00:26:47,896 --> 00:26:50,036
that I like to talk about before


910
00:26:50,036 --> 00:26:51,306
we jump into the third section


911
00:26:52,306 --> 00:26:53,386
and that is mouse and touch


912
00:26:53,386 --> 00:26:53,956
events.


913
00:26:55,156 --> 00:26:56,676
So, iOS is built around a


914
00:26:56,676 --> 00:26:58,716
direct, multi-touch interaction


915
00:26:58,716 --> 00:26:59,006
model.


916
00:26:59,626 --> 00:27:01,156
And macOS is built around an


917
00:27:01,186 --> 00:27:02,916
indirect cursor-based


918
00:27:02,916 --> 00:27:03,716
interaction model.


919
00:27:03,716 --> 00:27:05,366
And there are significant


920
00:27:05,366 --> 00:27:06,996
challenges when trying to bring


921
00:27:06,996 --> 00:27:08,936
a multi-touch application to the


922
00:27:08,936 --> 00:27:10,216
Mac and make it feel at home,


923
00:27:10,836 --> 00:27:12,006
though we do try to map


924
00:27:12,486 --> 00:27:14,156
automatically as much behavior


925
00:27:14,156 --> 00:27:15,216
as we possibly can.


926
00:27:16,716 --> 00:27:18,366
We introduced a new UI Hover


927
00:27:18,366 --> 00:27:20,226
Gesture Recognizer to let you


928
00:27:20,226 --> 00:27:21,286
know when the mouse cursor is


929
00:27:21,326 --> 00:27:22,596
position over your views.


930
00:27:23,166 --> 00:27:27,106
And left mouse button drags are


931
00:27:27,106 --> 00:27:29,136
mapped to a single synthesized


932
00:27:29,186 --> 00:27:30,716
touch sequence that is


933
00:27:30,716 --> 00:27:32,536
automatically recognized by tap,


934
00:27:33,166 --> 00:27:34,496
psn and long-press gesture


935
00:27:34,496 --> 00:27:35,806
recognizers that are set to


936
00:27:35,806 --> 00:27:36,946
recognize a single touch.


937
00:27:42,776 --> 00:27:45,146
Standard system gestures are


938
00:27:45,146 --> 00:27:46,466
recognized at the hardware or


939
00:27:46,466 --> 00:27:47,556
driver-level on the Mac, and


940
00:27:48,086 --> 00:27:49,636
they post high level gesture


941
00:27:49,636 --> 00:27:50,736
events to the system.


942
00:27:51,866 --> 00:27:52,986
When the UIKit application


943
00:27:52,986 --> 00:27:54,346
receives a high-level pinch


944
00:27:54,346 --> 00:27:56,976
rotate gesture, we synthesize a


945
00:27:56,976 --> 00:27:58,866
pair of touches and deliver them


946
00:27:58,866 --> 00:27:59,716
to the view that's under the


947
00:27:59,716 --> 00:28:01,436
cursor and this will


948
00:28:01,436 --> 00:28:03,276
automatically trigger any pinch


949
00:28:03,576 --> 00:28:05,356
or rotation gesture recognizers


950
00:28:05,356 --> 00:28:05,976
in your application.


951
00:28:08,856 --> 00:28:09,846
If the user performs the


952
00:28:09,846 --> 00:28:11,726
standard system scroll gesture,


953
00:28:12,176 --> 00:28:13,496
in this case we don't synthesize


954
00:28:13,496 --> 00:28:15,386
any touches but UIKit will


955
00:28:15,386 --> 00:28:17,256
automatically scroll in the UI


956
00:28:17,256 --> 00:28:19,246
Scroll Views that are under the


957
00:28:20,976 --> 00:28:21,116
cursor.


958
00:28:21,286 --> 00:28:22,506
Now, one thing we can't map


959
00:28:22,506 --> 00:28:23,926
automatically is custom


960
00:28:23,926 --> 00:28:24,906
multi-touch behavior.


961
00:28:25,446 --> 00:28:26,536
Whether you're dealing with the


962
00:28:26,536 --> 00:28:27,826
UI touches directly or you've


963
00:28:27,896 --> 00:28:29,046
written a custom gesture


964
00:28:29,046 --> 00:28:30,916
recognizer, there's simply no


965
00:28:30,916 --> 00:28:33,116
automatic way to map from all of


966
00:28:33,116 --> 00:28:34,566
the various input devices on the


967
00:28:34,566 --> 00:28:36,886
Mac to your custom gestures.


968
00:28:37,696 --> 00:28:38,866
If you rely on this in your


969
00:28:38,866 --> 00:28:39,846
application, you'll need to


970
00:28:39,846 --> 00:28:41,616
provide an alternate way for the


971
00:28:41,616 --> 00:28:42,856
user to accomplish the same


972
00:28:42,856 --> 00:28:43,636
thing when you bring your


973
00:28:43,636 --> 00:28:44,466
application to the Mac.


974
00:28:46,736 --> 00:28:47,766
So, let's move on to that third


975
00:28:47,766 --> 00:28:49,386
category of API differences and


976
00:28:49,386 --> 00:28:50,406
that's APIs that are


977
00:28:50,406 --> 00:28:51,006
unavailable.


978
00:28:51,896 --> 00:28:53,016
This fall into four general


979
00:28:53,096 --> 00:28:55,126
groups, frameworks that are


980
00:28:55,126 --> 00:28:57,406
deprecated, frameworks that are


981
00:28:57,406 --> 00:28:59,156
unavailable because they're tied


982
00:28:59,436 --> 00:29:01,316
to functionality in iOS that


983
00:29:01,316 --> 00:29:02,996
doesn't exist in macOS,


984
00:29:04,536 --> 00:29:05,436
frameworks that are tied to


985
00:29:05,436 --> 00:29:07,236
specific hardware functionality


986
00:29:07,236 --> 00:29:09,256
or sensors that don't exist on


987
00:29:09,256 --> 00:29:09,626
the Mac.


988
00:29:10,666 --> 00:29:11,586
And, finally, there are number


989
00:29:11,586 --> 00:29:12,276
of frameworks that have


990
00:29:12,346 --> 00:29:14,276
different behaviors or APIs that


991
00:29:14,786 --> 00:29:16,196
are unavailable on macOS for


992
00:29:16,196 --> 00:29:17,046
various reasons.


993
00:29:17,746 --> 00:29:18,846
These would be annotated to make


994
00:29:18,846 --> 00:29:19,816
this clear and to generate an


995
00:29:19,816 --> 00:29:20,656
error in Xcode.


996
00:29:21,206 --> 00:29:22,006
So, let's delve into this a


997
00:29:22,006 --> 00:29:22,636
little bit deeper.


998
00:29:24,956 --> 00:29:26,606
Deprecated frameworks are often


999
00:29:26,606 --> 00:29:28,386
available for quite some time


1000
00:29:28,736 --> 00:29:29,926
after they've been deprecated.


1001
00:29:30,896 --> 00:29:32,946
However, this is a new platform


1002
00:29:32,946 --> 00:29:34,046
for your iPad apps.


1003
00:29:34,436 --> 00:29:35,576
And so, you shouldn't assume


1004
00:29:35,576 --> 00:29:36,766
that any of the deprecated


1005
00:29:36,766 --> 00:29:38,376
frameworks will be available to


1006
00:29:38,436 --> 00:29:38,706
you.


1007
00:29:39,936 --> 00:29:41,656
Now is a great time to migrate


1008
00:29:41,656 --> 00:29:42,966
off these deprecated frameworks


1009
00:29:42,966 --> 00:29:44,026
and on to the replacement.


1010
00:29:44,786 --> 00:29:45,916
This will not only allow you to


1011
00:29:45,916 --> 00:29:47,116
bring your iPad application to


1012
00:29:47,116 --> 00:29:48,536
the Mac, but your iPad app will


1013
00:29:48,536 --> 00:29:49,286
benefit as well.


1014
00:29:50,956 --> 00:29:52,326
There are also several


1015
00:29:52,326 --> 00:29:53,526
frameworks that are tied to


1016
00:29:53,526 --> 00:29:55,316
functionality in iOS that does


1017
00:29:55,316 --> 00:29:56,446
currently exist on the Mac.


1018
00:29:57,836 --> 00:29:58,826
The ClassKit framework is


1019
00:29:58,826 --> 00:29:59,696
designed to allow your


1020
00:29:59,696 --> 00:30:00,686
application to work with the


1021
00:30:00,686 --> 00:30:01,516
Schoolwork app.


1022
00:30:02,046 --> 00:30:02,956
But this application doesn't


1023
00:30:02,956 --> 00:30:04,046
exist on the Mac, so it wouldn't


1024
00:30:04,046 --> 00:30:04,746
make sense.


1025
00:30:05,376 --> 00:30:07,586
And HealthKit and HomeKit are


1026
00:30:07,586 --> 00:30:08,646
not available at this point


1027
00:30:08,646 --> 00:30:09,886
since not all of the underlying


1028
00:30:09,886 --> 00:30:10,986
functionality is present.


1029
00:30:12,436 --> 00:30:13,836
There are several frameworks


1030
00:30:13,836 --> 00:30:14,806
that are tied to specific


1031
00:30:14,926 --> 00:30:16,966
sensors on iOS devices for


1032
00:30:16,966 --> 00:30:17,896
functionality that can only


1033
00:30:17,896 --> 00:30:18,486
exist there.


1034
00:30:19,226 --> 00:30:20,266
This will not be available on


1035
00:30:20,266 --> 00:30:20,616
the Mac.


1036
00:30:20,616 --> 00:30:21,746
So, if your application uses


1037
00:30:21,746 --> 00:30:22,536
this, you'll need to


1038
00:30:22,536 --> 00:30:23,966
conditionalize their use before


1039
00:30:23,966 --> 00:30:24,726
you can bring it over.


1040
00:30:26,906 --> 00:30:28,066
Now, some of the frameworks that


1041
00:30:28,066 --> 00:30:29,966
are tied to specific hardware on


1042
00:30:29,966 --> 00:30:31,506
iOS devices do make sense on the


1043
00:30:31,506 --> 00:30:31,826
Mac.


1044
00:30:32,756 --> 00:30:33,706
But the availability and


1045
00:30:33,706 --> 00:30:36,436
functionality of these APIs will


1046
00:30:36,436 --> 00:30:37,966
be somewhat limited because Macs


1047
00:30:38,016 --> 00:30:39,146
often don't have comparable


1048
00:30:39,146 --> 00:30:39,806
sensors.


1049
00:30:41,756 --> 00:30:42,866
In some cases, it's true on


1050
00:30:42,866 --> 00:30:44,396
non-cellular iPads as well.


1051
00:30:44,396 --> 00:30:45,926
So, your app may already be


1052
00:30:45,926 --> 00:30:46,786
doing the right thing.


1053
00:30:47,736 --> 00:30:48,876
To give you a sense of the kind


1054
00:30:48,876 --> 00:30:50,246
of differences you can expect.


1055
00:30:50,996 --> 00:30:52,966
Core Location works but Macs


1056
00:30:52,966 --> 00:30:54,256
don't have GPS chips.


1057
00:30:54,636 --> 00:30:55,626
And so, you should expect them


1058
00:30:55,626 --> 00:30:57,036
to be less sensitive to changes


1059
00:30:57,036 --> 00:30:58,156
in location when they're moved.


1060
00:30:59,556 --> 00:31:01,626
And if you use Core Motion to


1061
00:31:01,626 --> 00:31:03,706
control game play in your app,


1062
00:31:04,426 --> 00:31:05,456
you should be aware that the Mac


1063
00:31:05,456 --> 00:31:06,396
doesn't have the sensors


1064
00:31:06,396 --> 00:31:08,096
necessarily to do this nor it


1065
00:31:08,096 --> 00:31:09,056
would be a very good user


1066
00:31:09,056 --> 00:31:09,756
experience.


1067
00:31:09,946 --> 00:31:10,856
And so, you should add an


1068
00:31:10,856 --> 00:31:12,356
alternate mechanism to control


1069
00:31:12,486 --> 00:31:14,266
your game on the Mac.


1070
00:31:15,356 --> 00:31:17,576
There are several media related


1071
00:31:17,576 --> 00:31:18,726
frameworks that have differences


1072
00:31:18,726 --> 00:31:19,626
you should be aware of.


1073
00:31:20,786 --> 00:31:22,206
The Media Player framework gives


1074
00:31:22,206 --> 00:31:23,236
you basically the same


1075
00:31:23,236 --> 00:31:24,696
functionality it does on the Mac


1076
00:31:25,266 --> 00:31:26,816
with access to the Now Playing


1077
00:31:26,816 --> 00:31:28,446
Info Center and Remote Command


1078
00:31:28,446 --> 00:31:28,796
Center.


1079
00:31:29,546 --> 00:31:30,936
But there's no library access or


1080
00:31:30,936 --> 00:31:31,776
playback support.


1081
00:31:32,896 --> 00:31:34,166
And if you were using the


1082
00:31:34,166 --> 00:31:35,576
AVFoundation framework to


1083
00:31:35,576 --> 00:31:38,266
capture still images or video on


1084
00:31:38,266 --> 00:31:40,106
iOS devices, you can use the


1085
00:31:40,106 --> 00:31:42,216
UIImagePickerController in UIKit


1086
00:31:42,256 --> 00:31:43,176
to capture them from the


1087
00:31:43,176 --> 00:31:44,806
built-in front-facing Mac


1088
00:31:44,806 --> 00:31:44,976
camera.


1089
00:31:47,856 --> 00:31:48,896
A number of other frameworks


1090
00:31:48,896 --> 00:31:49,936
have differences as well and I


1091
00:31:49,936 --> 00:31:51,126
want to draw your attention to a


1092
00:31:51,166 --> 00:31:51,876
couple of them.


1093
00:31:53,076 --> 00:31:54,706
So, Metal is largely the same


1094
00:31:54,706 --> 00:31:56,876
across all of our platforms, so


1095
00:31:56,876 --> 00:31:58,566
most of you will find that your


1096
00:31:58,566 --> 00:32:00,896
iPad Metal apps work without


1097
00:32:00,896 --> 00:32:02,146
change when you bring them to


1098
00:32:02,146 --> 00:32:02,476
the Mac.


1099
00:32:03,416 --> 00:32:05,086
For those of you that are using


1100
00:32:05,086 --> 00:32:06,256
some of the more advanced


1101
00:32:06,256 --> 00:32:08,386
features in our latest GPUs such


1102
00:32:08,386 --> 00:32:09,796
as Memoryless Textures.


1103
00:32:11,296 --> 00:32:12,396
We've introduced a new GPU


1104
00:32:12,476 --> 00:32:14,436
family API that will help you to


1105
00:32:14,436 --> 00:32:16,066
conditionalize your code to run


1106
00:32:16,066 --> 00:32:17,916
across a range of GPU families.


1107
00:32:18,786 --> 00:32:20,886
And in UIKit, UIWebView will not


1108
00:32:20,886 --> 00:32:21,736
be present on the Mac.


1109
00:32:22,216 --> 00:32:23,146
And so, if you have it already,


1110
00:32:23,146 --> 00:32:24,726
now is a great time to migrate


1111
00:32:24,946 --> 00:32:25,746
to WKWebView.


1112
00:32:26,486 --> 00:32:29,556
So, as you've seen there's a


1113
00:32:29,556 --> 00:32:30,736
number of differences in our API


1114
00:32:30,736 --> 00:32:32,066
and we don't have time to cover


1115
00:32:32,066 --> 00:32:32,656
all of them.


1116
00:32:33,416 --> 00:32:34,286
So, I want to take a moment to


1117
00:32:34,286 --> 00:32:35,226
talk about how you could


1118
00:32:35,226 --> 00:32:36,526
determine for yourselves what


1119
00:32:36,526 --> 00:32:38,766
API is and is not available to


1120
00:32:38,766 --> 00:32:39,696
you when you bring your iPad


1121
00:32:39,696 --> 00:32:40,266
apps to the Mac.


1122
00:32:42,326 --> 00:32:44,356
So, iPad apps for the Mac are


1123
00:32:44,356 --> 00:32:46,156
built against the macOS SDK.


1124
00:32:47,266 --> 00:32:48,656
And so, for frameworks that are


1125
00:32:48,656 --> 00:32:50,626
unavailable, they simply are


1126
00:32:50,626 --> 00:32:52,346
just not present in the SDK.


1127
00:32:52,346 --> 00:32:54,116
And for frameworks that have


1128
00:32:54,116 --> 00:32:55,626
differences between iOS and


1129
00:32:55,626 --> 00:32:58,326
macOS, we annotate methods as


1130
00:32:58,326 --> 00:32:59,656
appropriate to make that clear.


1131
00:33:01,126 --> 00:33:03,116
We annotate our APIs with


1132
00:33:03,116 --> 00:33:04,926
@available in Swift and API


1133
00:33:04,926 --> 00:33:06,386
available in Objective-C.


1134
00:33:07,236 --> 00:33:09,196
And for iOS applications, we're


1135
00:33:09,196 --> 00:33:10,316
obviously only concerned with


1136
00:33:10,316 --> 00:33:10,756
this part.


1137
00:33:10,756 --> 00:33:13,786
And the good news is that


1138
00:33:13,786 --> 00:33:15,046
availability for iOS


1139
00:33:15,096 --> 00:33:16,466
automatically implies


1140
00:33:16,466 --> 00:33:17,916
availability for iPad apps for


1141
00:33:17,916 --> 00:33:18,146
Mac.


1142
00:33:19,256 --> 00:33:20,146
As I've mentioned earlier, the


1143
00:33:20,146 --> 00:33:21,496
vast majority of APIs are


1144
00:33:21,496 --> 00:33:22,696
available, so this is typically


1145
00:33:22,696 --> 00:33:24,296
what you'll see when you look


1146
00:33:24,346 --> 00:33:25,356
through the APIs.


1147
00:33:27,046 --> 00:33:28,036
When there are differences in


1148
00:33:28,036 --> 00:33:29,206
availability, you'll see that


1149
00:33:29,206 --> 00:33:30,546
clearly annotated as well.


1150
00:33:31,286 --> 00:33:32,386
Here's an example of an API that


1151
00:33:32,386 --> 00:33:34,146
only exist for iPad apps on the


1152
00:33:34,146 --> 00:33:34,416
Mac.


1153
00:33:35,246 --> 00:33:36,396
Now, API such as this, are


1154
00:33:36,396 --> 00:33:37,286
fairly rare.


1155
00:33:38,246 --> 00:33:39,466
Most of the API differences


1156
00:33:39,466 --> 00:33:40,836
you'll find for iPad apps for


1157
00:33:40,836 --> 00:33:43,106
Mac are for differences where


1158
00:33:43,106 --> 00:33:45,366
the API is available on iOS but


1159
00:33:45,366 --> 00:33:46,126
not for the Mac.


1160
00:33:46,946 --> 00:33:48,226
In the most cases, you'll see


1161
00:33:48,226 --> 00:33:49,516
the API clearly annotated as


1162
00:33:49,516 --> 00:33:51,586
unavailable for UIKitForMac.


1163
00:33:54,856 --> 00:33:57,026
Ideally, most of your code will


1164
00:33:57,026 --> 00:33:58,426
be identical when you bring it


1165
00:33:58,426 --> 00:33:58,826
to the Mac.


1166
00:33:59,316 --> 00:34:00,446
However, if you have code that


1167
00:34:00,446 --> 00:34:01,536
shouldn't be included on the


1168
00:34:01,536 --> 00:34:02,686
Mac, you can use the


1169
00:34:02,686 --> 00:34:04,306
targetEnvironment conditional to


1170
00:34:04,306 --> 00:34:04,986
exclude it.


1171
00:34:06,616 --> 00:34:08,085
And if using Objective-C, you


1172
00:34:08,085 --> 00:34:09,366
can use the Target OS


1173
00:34:09,456 --> 00:34:10,916
UIKitForMac, target conditional


1174
00:34:10,916 --> 00:34:11,795
to do the same thing.


1175
00:34:13,176 --> 00:34:14,005
Of course, you can use this


1176
00:34:14,005 --> 00:34:15,295
target conditional to include


1177
00:34:15,295 --> 00:34:18,176
code which only relevant to Mac.


1178
00:34:20,396 --> 00:34:21,936
Data protection is an iOS


1179
00:34:21,936 --> 00:34:23,545
feature that you use to secure


1180
00:34:23,545 --> 00:34:24,946
your app's files and prevent


1181
00:34:25,016 --> 00:34:26,396
unauthorized access to them.


1182
00:34:27,356 --> 00:34:28,156
You can read and write your


1183
00:34:28,156 --> 00:34:29,585
files normally, but the system


1184
00:34:29,585 --> 00:34:31,176
encrypts and decrypts them


1185
00:34:31,176 --> 00:34:31,826
automatically.


1186
00:34:33,315 --> 00:34:34,916
This is access by specifying one


1187
00:34:34,916 --> 00:34:36,116
of the following four writing


1188
00:34:36,116 --> 00:34:37,356
options when writing files to


1189
00:34:37,356 --> 00:34:38,045
the file system.


1190
00:34:38,626 --> 00:34:42,216
On macOS, these data protection


1191
00:34:42,286 --> 00:34:43,606
APIs are not currently


1192
00:34:43,606 --> 00:34:44,106
functional.


1193
00:34:44,976 --> 00:34:46,505
If you try to use them like in


1194
00:34:46,505 --> 00:34:48,735
this example, the code will


1195
00:34:48,735 --> 00:34:51,286
compile and execute but the data


1196
00:34:51,286 --> 00:34:52,815
is not being stored securely on


1197
00:34:52,815 --> 00:34:53,525
the file system.


1198
00:34:54,565 --> 00:34:55,966
If you need to store data


1199
00:34:55,966 --> 00:34:57,626
securely, there are several


1200
00:34:57,626 --> 00:34:58,746
options available to you.


1201
00:34:59,656 --> 00:35:00,966
Passwords and related data can


1202
00:35:00,966 --> 00:35:02,186
be stored in the Keychain and


1203
00:35:02,906 --> 00:35:04,626
FileVault will encrypt all of


1204
00:35:04,626 --> 00:35:05,456
the files on the disk


1205
00:35:05,506 --> 00:35:07,956
transparently, but if that's not


1206
00:35:07,956 --> 00:35:09,216
sufficient for your needs.


1207
00:35:09,216 --> 00:35:11,176
You can use the new AES.GCM


1208
00:35:11,176 --> 00:35:14,716
encryption API in CryptoKit to


1209
00:35:14,716 --> 00:35:15,806
encrypt your content before


1210
00:35:15,806 --> 00:35:16,646
writing it to disk.


1211
00:35:17,526 --> 00:35:18,716
As you can see in the short code


1212
00:35:18,716 --> 00:35:20,436
sample, this API makes it very


1213
00:35:20,436 --> 00:35:21,596
straightforward to encrypt your


1214
00:35:21,596 --> 00:35:21,906
data.


1215
00:35:22,846 --> 00:35:23,776
You then just need to store the


1216
00:35:23,776 --> 00:35:25,296
data on the disk and write the


1217
00:35:25,296 --> 00:35:26,796
key to the Keychain and you


1218
00:35:26,796 --> 00:35:28,036
refer to the documentation for


1219
00:35:28,036 --> 00:35:29,856
all the details on how to store


1220
00:35:29,896 --> 00:35:33,616
and later decrypt the data.


1221
00:35:34,936 --> 00:35:35,766
Another difference I want to


1222
00:35:35,766 --> 00:35:37,216
talk about is your application's


1223
00:35:37,276 --> 00:35:37,936
Bundle Format.


1224
00:35:39,136 --> 00:35:41,946
Application bundles on iOS are


1225
00:35:41,946 --> 00:35:43,326
considered flat bundles.


1226
00:35:44,116 --> 00:35:45,276
When Xcode builds your


1227
00:35:45,276 --> 00:35:46,776
application for iPad for the


1228
00:35:46,776 --> 00:35:49,476
Mac, it will build a macOS style


1229
00:35:49,516 --> 00:35:50,906
bundle that is deeper than the


1230
00:35:50,906 --> 00:35:52,226
flat bundle format that you used


1231
00:35:52,226 --> 00:35:52,956
on iOS.


1232
00:35:53,556 --> 00:35:55,746
If you're using the NSBundle


1233
00:35:55,746 --> 00:35:57,356
APIs to find resources in your


1234
00:35:57,356 --> 00:35:59,336
application, then all of this


1235
00:35:59,336 --> 00:36:00,596
will be transparent to you.


1236
00:36:01,326 --> 00:36:02,786
However, if you've hard-coded


1237
00:36:02,786 --> 00:36:04,236
paths relative your app bundle,


1238
00:36:04,716 --> 00:36:06,066
you'll need to modify that code


1239
00:36:06,066 --> 00:36:07,536
to deal with the macOS bundle


1240
00:36:07,586 --> 00:36:07,956
format.


1241
00:36:12,036 --> 00:36:13,476
iOS supports a wide variety of


1242
00:36:13,476 --> 00:36:15,296
extensions but not all of them


1243
00:36:15,296 --> 00:36:16,876
will be available when you work


1244
00:36:17,086 --> 00:36:18,796
-- will work when you bring your


1245
00:36:18,796 --> 00:36:19,666
iPad app to the Mac.


1246
00:36:20,586 --> 00:36:21,796
So, here are set of extensions


1247
00:36:21,796 --> 00:36:23,286
which are supported but you may


1248
00:36:23,286 --> 00:36:24,856
find some API differences.


1249
00:36:25,946 --> 00:36:26,806
These extensions will


1250
00:36:26,806 --> 00:36:28,156
automatically work with both


1251
00:36:28,266 --> 00:36:30,766
AppKit and UIKit Macs -- apps on


1252
00:36:30,766 --> 00:36:31,086
the Mac.


1253
00:36:31,626 --> 00:36:32,716
So, for example, a Share


1254
00:36:32,716 --> 00:36:34,196
Extension in your application


1255
00:36:34,836 --> 00:36:35,926
will appear in the Share menu


1256
00:36:36,056 --> 00:36:37,096
right alongside the Share


1257
00:36:37,096 --> 00:36:38,226
Extension in an AppKit


1258
00:36:38,226 --> 00:36:38,786
application.


1259
00:36:39,416 --> 00:36:42,786
There are also a number of ACPI


1260
00:36:42,786 --> 00:36:43,996
extension -- or sorry, number of


1261
00:36:43,996 --> 00:36:45,506
extensions that do not currently


1262
00:36:45,506 --> 00:36:46,716
work on macOS.


1263
00:36:47,526 --> 00:36:49,126
Many of this, do not make sense


1264
00:36:49,126 --> 00:36:50,456
on macOS today like Sticker


1265
00:36:50,456 --> 00:36:52,516
Packs, Custom Keyboards or


1266
00:36:52,516 --> 00:36:54,356
iMessage extensions because the


1267
00:36:54,356 --> 00:36:55,406
corresponding functionality


1268
00:36:55,406 --> 00:36:57,706
doesn't exist on macOS and in


1269
00:36:57,706 --> 00:36:58,876
some cases such as the File


1270
00:36:58,876 --> 00:37:00,266
Provider, you should switch to


1271
00:37:00,266 --> 00:37:01,726
the macOS File Provider


1272
00:37:02,056 --> 00:37:03,016
extension directly.


1273
00:37:04,926 --> 00:37:05,946
So, we've seen a number of API


1274
00:37:05,946 --> 00:37:06,896
differences that will impact


1275
00:37:06,896 --> 00:37:07,856
your iPad apps for Mac.


1276
00:37:08,286 --> 00:37:09,286
Let's take a look at the demo of


1277
00:37:09,286 --> 00:37:10,256
how you can start to deal with


1278
00:37:10,256 --> 00:37:11,056
some of these differences in


1279
00:37:11,056 --> 00:37:11,836
your application.


1280
00:37:26,696 --> 00:37:29,146
So, our recipe application has


1281
00:37:29,376 --> 00:37:31,306
the ability to mark a recipe as


1282
00:37:31,306 --> 00:37:33,516
a favorite and you can see one


1283
00:37:33,516 --> 00:37:34,326
of the recipes already has a


1284
00:37:34,326 --> 00:37:35,436
heart next to it, to show the


1285
00:37:35,436 --> 00:37:35,926
state.


1286
00:37:36,446 --> 00:37:38,326
Now the app has a custom


1287
00:37:38,326 --> 00:37:39,616
multi-touch gesture that will


1288
00:37:39,616 --> 00:37:40,756
toggle the favorite state.


1289
00:37:41,366 --> 00:37:43,116
But as we discussed that won't


1290
00:37:43,116 --> 00:37:43,696
work on the Mac.


1291
00:37:44,166 --> 00:37:45,566
So, let's add a custom menu item


1292
00:37:45,566 --> 00:37:46,466
to do that instead.


1293
00:37:55,626 --> 00:37:56,656
So, first thing we need to do is


1294
00:37:56,726 --> 00:37:59,146
disable our Custom Gesture


1295
00:37:59,146 --> 00:37:59,736
Recognizer.


1296
00:38:01,156 --> 00:38:01,986
We'll do that by wrapping it


1297
00:38:01,986 --> 00:38:03,026
with the target conditional that


1298
00:38:03,026 --> 00:38:04,096
we talked about before.


1299
00:38:06,106 --> 00:38:07,186
Oops, that.


1300
00:38:09,016 --> 00:38:10,296
Hang on one second.


1301
00:38:19,426 --> 00:38:22,706
OK. And then, the next thing we


1302
00:38:22,706 --> 00:38:27,346
need to do is take the method


1303
00:38:27,346 --> 00:38:28,426
that that Gesture Recognizer


1304
00:38:28,426 --> 00:38:29,106
calls which is


1305
00:38:29,106 --> 00:38:30,016
toggleSelectedRecipe


1306
00:38:30,066 --> 00:38:32,216
FavoriteState and mark it with


1307
00:38:32,216 --> 00:38:33,656
the IBAction annotation.


1308
00:38:34,016 --> 00:38:36,696
This is so IB -- or the IB can


1309
00:38:36,696 --> 00:38:37,406
see this.


1310
00:38:37,436 --> 00:38:39,626
And then, finally, we need to


1311
00:38:40,186 --> 00:38:41,776
add a Menu Validation method,


1312
00:38:41,776 --> 00:38:43,456
and this will toggle the menu


1313
00:38:43,456 --> 00:38:45,146
item between remove favorite and


1314
00:38:45,146 --> 00:38:47,106
make favorite based on whether


1315
00:38:47,106 --> 00:38:48,266
the currently selective recipe


1316
00:38:48,266 --> 00:38:48,786
is favorite.


1317
00:38:49,446 --> 00:38:52,646
Now, we just need to add our


1318
00:38:52,646 --> 00:38:53,416
custom menu.


1319
00:38:54,166 --> 00:38:59,006
So, we'll go to the Storyboard


1320
00:38:59,006 --> 00:39:00,056
Editor and we'll drag out the


1321
00:39:00,056 --> 00:39:00,636
main menu.


1322
00:39:06,256 --> 00:39:08,906
Oops, sorry, I dragged the wrong


1323
00:39:08,906 --> 00:39:09,176
thing.


1324
00:39:09,726 --> 00:39:11,616
Main menu.


1325
00:39:13,006 --> 00:39:14,636
We want to add a new menu item


1326
00:39:14,636 --> 00:39:16,136
to the file menu.


1327
00:39:16,996 --> 00:39:18,216
So, I'll add an inline menu


1328
00:39:18,216 --> 00:39:18,696
section.


1329
00:39:19,916 --> 00:39:21,076
We only need one of these items


1330
00:39:21,076 --> 00:39:21,256
here.


1331
00:39:21,256 --> 00:39:22,376
So, we'll delete the other one.


1332
00:39:23,466 --> 00:39:24,556
We'll change this to Make


1333
00:39:24,556 --> 00:39:25,036
Favorite.


1334
00:39:27,096 --> 00:39:28,336
We'll give this a command key


1335
00:39:28,336 --> 00:39:28,716
equivalent.


1336
00:39:35,096 --> 00:39:36,486
And then all we need to do is


1337
00:39:36,486 --> 00:39:37,536
wire that up to the first


1338
00:39:37,536 --> 00:39:38,116
responder.


1339
00:39:39,826 --> 00:39:41,036
And have it send that same


1340
00:39:41,036 --> 00:39:41,846
method that our Gesture


1341
00:39:41,846 --> 00:39:42,666
Recognizer would send.


1342
00:39:43,386 --> 00:39:44,926
So, now, let's build and run our


1343
00:39:44,926 --> 00:39:45,486
application.


1344
00:39:55,186 --> 00:39:56,936
I think that was in the wrong


1345
00:39:56,936 --> 00:39:57,186
place.


1346
00:40:07,986 --> 00:40:08,726
So, now, you see we have a new


1347
00:40:08,726 --> 00:40:10,036
menu item called Make Favorite


1348
00:40:10,036 --> 00:40:11,566
and when I click that we see the


1349
00:40:11,566 --> 00:40:13,876
Favorite icon and of course


1350
00:40:13,876 --> 00:40:15,166
remove -- the changes removed


1351
00:40:15,166 --> 00:40:16,356
Favorite Network as well and


1352
00:40:16,356 --> 00:40:17,596
we'll just test our menu short


1353
00:40:17,686 --> 00:40:18,996
-- clicking shortcut and of


1354
00:40:18,996 --> 00:40:19,826
course that works as well.


1355
00:40:20,516 --> 00:40:27,500
[ Applause ]


1356
00:40:32,056 --> 00:40:33,186
So, you've just seen how easy it


1357
00:40:33,186 --> 00:40:34,686
is to bring your iPad apps to


1358
00:40:34,686 --> 00:40:35,116
the Mac.


1359
00:40:35,306 --> 00:40:36,106
So, if your app's a good


1360
00:40:36,106 --> 00:40:37,756
candidate, then check the box


1361
00:40:37,756 --> 00:40:38,716
and get your app building and


1362
00:40:38,716 --> 00:40:39,326
running on the Mac.


1363
00:40:39,756 --> 00:40:41,716
As always consult the docs and


1364
00:40:41,716 --> 00:40:42,596
release notes for the latest


1365
00:40:42,596 --> 00:40:44,216
information and we'll be in the


1366
00:40:44,216 --> 00:40:45,646
labs right after this session to


1367
00:40:45,646 --> 00:40:47,396
help you out and please join us


1368
00:40:47,396 --> 00:40:48,696
on Thursday afternoon at Taking


1369
00:40:48,696 --> 00:40:50,326
iPad Apps for Mac to the next


1370
00:40:50,326 --> 00:40:50,656
level.


1371
00:40:51,286 --> 00:40:52,456
We we'll cover how you can make


1372
00:40:52,456 --> 00:40:54,196
your app feel even more at home


1373
00:40:54,196 --> 00:40:55,766
on the Mac by incorporating


1374
00:40:55,766 --> 00:40:57,136
platforms specific features.


1375
00:40:58,026 --> 00:40:58,846
Please check out the, What's New


1376
00:40:58,846 --> 00:41:00,376
in iOS and macOS Design session


1377
00:41:00,376 --> 00:41:02,036
later today where we'll discuss


1378
00:41:02,076 --> 00:41:03,366
design considerations when


1379
00:41:03,366 --> 00:41:04,366
bringing your iPad app to the


1380
00:41:04,366 --> 00:41:06,326
Mac, and finally, the Font


1381
00:41:06,326 --> 00:41:07,746
Management and Text Scaling


1382
00:41:07,746 --> 00:41:08,806
session on Thursday morning.


1383
00:41:08,976 --> 00:41:10,196
We'll go into detail about how


1384
00:41:10,196 --> 00:41:11,756
new fonts are handled or how


1385
00:41:11,756 --> 00:41:13,086
fonts are handled in iPad apps


1386
00:41:13,086 --> 00:41:13,406
for Mac.


1387
00:41:13,846 --> 00:41:14,796
Thanks. Enjoy the rest of the


1388
00:41:14,796 --> 00:41:14,906
show.


1389
00:41:15,516 --> 00:41:19,500
[ Applause ]

