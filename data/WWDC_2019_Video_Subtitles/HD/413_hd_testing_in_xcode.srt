1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:09,516 --> 00:00:13,656
[ Applause ]


3
00:00:14,156 --> 00:00:15,606
>> Good morning, and welcome to


4
00:00:15,606 --> 00:00:16,676
Testing in Xcode.


5
00:00:16,676 --> 00:00:18,836
My name is Ana Calinov and I'll


6
00:00:18,836 --> 00:00:20,106
be presenting along with my


7
00:00:20,106 --> 00:00:21,786
colleagues, Stuart Montgomery


8
00:00:21,856 --> 00:00:22,686
and Ethan Vaughan.


9
00:00:24,016 --> 00:00:25,786
In today's session, we'll start


10
00:00:25,786 --> 00:00:27,196
with an introduction to testing


11
00:00:27,286 --> 00:00:28,426
in XCode with XCTest.


12
00:00:29,386 --> 00:00:31,116
Then, Stuart will tell you about


13
00:00:31,146 --> 00:00:32,286
the test plans feature.


14
00:00:32,956 --> 00:00:34,556
Finally, Ethan will show you


15
00:00:34,556 --> 00:00:36,856
applications of XCTest with


16
00:00:36,856 --> 00:00:38,066
continuous integration.


17
00:00:39,436 --> 00:00:42,546
Let's get started with XCTest.


18
00:00:42,626 --> 00:00:45,436
XCTest is the automation testing


19
00:00:45,436 --> 00:00:47,626
framework provided in Xcode with


20
00:00:47,686 --> 00:00:49,576
built-in support to help you set


21
00:00:50,026 --> 00:00:52,506
up and execute your tests.


22
00:00:52,506 --> 00:00:54,126
Testing is an important step of


23
00:00:54,126 --> 00:00:56,056
developing any project which can


24
00:00:56,056 --> 00:00:57,746
help you find bugs in your


25
00:00:57,746 --> 00:00:58,386
source code.


26
00:00:59,306 --> 00:01:00,986
You can also use test to codify


27
00:01:00,986 --> 00:01:03,566
requirements, meaning you make


28
00:01:03,566 --> 00:01:05,436
test for expected behaviors for


29
00:01:05,436 --> 00:01:07,376
your app, and further work by


30
00:01:07,376 --> 00:01:09,126
you and your team can be


31
00:01:09,126 --> 00:01:10,206
qualified against these


32
00:01:10,206 --> 00:01:10,976
expectations.


33
00:01:10,976 --> 00:01:13,496
We're going to start with a


34
00:01:13,496 --> 00:01:14,816
summary of how you should


35
00:01:14,816 --> 00:01:16,216
consider planning out the


36
00:01:16,216 --> 00:01:17,716
automation test suite of any


37
00:01:17,716 --> 00:01:18,216
project.


38
00:01:19,116 --> 00:01:20,776
The pyramid model approach to


39
00:01:20,776 --> 00:01:22,786
testing helps to strike a


40
00:01:22,786 --> 00:01:24,256
balance between thoroughness,


41
00:01:24,726 --> 00:01:26,736
quality and execution speed.


42
00:01:28,146 --> 00:01:29,766
Unit tests are the foundation of


43
00:01:29,766 --> 00:01:30,206
our pyramid.


44
00:01:30,206 --> 00:01:33,246
Unit tests help verify a single


45
00:01:33,246 --> 00:01:34,766
piece of code, generally a


46
00:01:34,766 --> 00:01:35,326
function.


47
00:01:36,426 --> 00:01:37,866
This is done by inputting


48
00:01:37,866 --> 00:01:39,916
variables to the function and


49
00:01:39,916 --> 00:01:40,946
checking that they return the


50
00:01:40,946 --> 00:01:42,026
expected output.


51
00:01:43,006 --> 00:01:45,546
Unit tests are short, simple,


52
00:01:45,846 --> 00:01:46,966
and run very quickly.


53
00:01:47,916 --> 00:01:49,336
This is the foundation of all of


54
00:01:49,336 --> 00:01:50,886
our testing so you want to write


55
00:01:50,916 --> 00:01:52,546
many unit tests to cover all


56
00:01:52,546 --> 00:01:53,246
your functions.


57
00:01:53,646 --> 00:01:56,346
Next, we have integration tests.


58
00:01:57,446 --> 00:01:58,876
Integration tests are used to


59
00:01:58,876 --> 00:02:00,666
validate a larger section of


60
00:02:00,666 --> 00:02:01,096
your code.


61
00:02:02,056 --> 00:02:03,326
These tests should target


62
00:02:03,426 --> 00:02:05,516
discrete subsystems or clusters


63
00:02:05,516 --> 00:02:07,656
of classes to make sure that


64
00:02:07,656 --> 00:02:09,045
different components behave


65
00:02:09,045 --> 00:02:11,686
correctly together.


66
00:02:11,816 --> 00:02:13,416
Integration tests sit on top of


67
00:02:13,416 --> 00:02:14,956
unit tests, because you want to


68
00:02:14,956 --> 00:02:16,306
make sure that the individual


69
00:02:16,356 --> 00:02:17,856
functions behave correctly


70
00:02:17,986 --> 00:02:19,606
before testing this larger piece


71
00:02:19,606 --> 00:02:20,156
of your code.


72
00:02:21,176 --> 00:02:22,716
You generally also won't need as


73
00:02:22,716 --> 00:02:24,486
many integration tests as unit


74
00:02:24,486 --> 00:02:24,616
test.


75
00:02:25,536 --> 00:02:26,826
They may take slightly longer to


76
00:02:26,826 --> 00:02:28,546
run but they do test more of


77
00:02:28,546 --> 00:02:30,906
your app at once.


78
00:02:31,066 --> 00:02:33,446
Lastly, user interface or UI


79
00:02:33,446 --> 00:02:36,086
tests observe the user-phasing


80
00:02:36,086 --> 00:02:37,066
behavior of your app.


81
00:02:38,106 --> 00:02:39,426
This makes sure that your app


82
00:02:39,596 --> 00:02:41,226
truly does what you expect it


83
00:02:41,286 --> 00:02:41,516
to.


84
00:02:42,536 --> 00:02:44,696
UI tests take the longest to run


85
00:02:45,006 --> 00:02:45,686
but they're vital to


86
00:02:45,686 --> 00:02:47,126
demonstrating that everything


87
00:02:47,126 --> 00:02:48,026
behaves correctly.


88
00:02:49,476 --> 00:02:51,156
UI tests also require more


89
00:02:51,156 --> 00:02:52,726
maintenance because your app's


90
00:02:52,726 --> 00:02:54,596
UI may change more frequently.


91
00:02:55,556 --> 00:02:56,746
The full pyramid of tests can


92
00:02:57,136 --> 00:02:58,726
therefore help you balance


93
00:02:58,776 --> 00:02:59,986
between these three different


94
00:02:59,986 --> 00:03:02,046
test types and ensures your test


95
00:03:02,046 --> 00:03:03,486
suite gives you the coverage


96
00:03:03,556 --> 00:03:04,106
that you need.


97
00:03:05,646 --> 00:03:06,966
So we just went over how to


98
00:03:06,966 --> 00:03:08,876
balance your test suite, so now


99
00:03:08,876 --> 00:03:09,986
let's switch to the tools


100
00:03:09,986 --> 00:03:11,976
provided by XCTest to help you


101
00:03:11,976 --> 00:03:12,676
implement it.


102
00:03:13,126 --> 00:03:18,366
Unit tests in XCTest are all of


103
00:03:18,366 --> 00:03:19,796
your tests targeting your source


104
00:03:19,796 --> 00:03:20,146
code.


105
00:03:20,936 --> 00:03:22,456
This includes both your standard


106
00:03:22,456 --> 00:03:24,066
unit test and also your


107
00:03:24,066 --> 00:03:25,506
integration tests.


108
00:03:26,476 --> 00:03:28,676
UI tests execute on top of your


109
00:03:28,766 --> 00:03:31,016
app's UI to provide end-to-end


110
00:03:31,016 --> 00:03:32,616
qualification of your app.


111
00:03:33,586 --> 00:03:35,466
UI tests are also black box test


112
00:03:35,926 --> 00:03:37,446
because they won't rely on any


113
00:03:37,446 --> 00:03:38,966
knowledge of the functions or


114
00:03:39,046 --> 00:03:40,566
classes actually supporting your


115
00:03:40,566 --> 00:03:40,633
app.


116
00:03:41,926 --> 00:03:44,486
UI tests will be able to make


117
00:03:44,486 --> 00:03:45,726
sure that everything behaves


118
00:03:45,846 --> 00:03:47,176
correctly at the very end.


119
00:03:48,636 --> 00:03:50,876
Lastly, performance tests run


120
00:03:50,876 --> 00:03:52,726
multiple times over a given test


121
00:03:53,486 --> 00:03:55,066
to look at the average timing,


122
00:03:55,316 --> 00:03:57,336
memory usage or other metric


123
00:03:57,446 --> 00:03:59,086
given to it to make sure you


124
00:03:59,086 --> 00:04:00,516
don't introduce regressions in


125
00:04:00,516 --> 00:04:01,236
these areas.


126
00:04:02,066 --> 00:04:04,196
Today, we'll be focusing on unit


127
00:04:04,276 --> 00:04:04,866
and UI tests.


128
00:04:06,436 --> 00:04:07,846
The easiest way to get started


129
00:04:07,846 --> 00:04:09,126
with testing in your Xcode


130
00:04:09,176 --> 00:04:11,336
project is to choose to include


131
00:04:11,566 --> 00:04:13,776
both unit and UI tests when


132
00:04:13,776 --> 00:04:14,846
starting a new project.


133
00:04:15,396 --> 00:04:18,255
In our brand new project, you


134
00:04:18,255 --> 00:04:19,956
can see the unit tests targeting


135
00:04:19,956 --> 00:04:22,286
class and the UI tests targeting


136
00:04:22,286 --> 00:04:24,726
class automatically created and


137
00:04:24,726 --> 00:04:25,816
displayed in your project


138
00:04:25,816 --> 00:04:26,236
navigator.


139
00:04:26,236 --> 00:04:29,386
You are also provided with the


140
00:04:29,386 --> 00:04:31,406
template to start writing each


141
00:04:31,406 --> 00:04:32,586
of these test classes and the


142
00:04:32,716 --> 00:04:34,216
test cases within them.


143
00:04:35,676 --> 00:04:37,186
Now let's take a closer look at


144
00:04:37,186 --> 00:04:39,246
a test class that uses XCTest.


145
00:04:40,586 --> 00:04:42,276
The class imports the XCTest


146
00:04:42,276 --> 00:04:43,906
framework along with the target


147
00:04:43,936 --> 00:04:44,626
to be tested.


148
00:04:45,836 --> 00:04:47,826
The class itself is a subclass


149
00:04:47,826 --> 00:04:50,026
of XCTest case which allows its


150
00:04:50,026 --> 00:04:52,306
methods to be used by Xcode to


151
00:04:52,306 --> 00:04:53,606
execute tests.


152
00:04:54,466 --> 00:04:55,946
Each method we want to use as a


153
00:04:55,946 --> 00:04:57,866
test case must start with the


154
00:04:57,866 --> 00:04:59,776
word test and then hopefully be


155
00:04:59,776 --> 00:05:01,316
named something that indicates


156
00:05:01,316 --> 00:05:02,656
what it will do.


157
00:05:03,516 --> 00:05:05,386
You'll also see a test diamond


158
00:05:05,446 --> 00:05:06,736
appear to the left of the test


159
00:05:07,416 --> 00:05:09,316
to show that Xcode can execute


160
00:05:10,586 --> 00:05:10,866
it.


161
00:05:11,136 --> 00:05:13,306
Inside of the test, assertion


162
00:05:13,306 --> 00:05:15,146
APIs are used to evaluate and


163
00:05:15,146 --> 00:05:16,326
validate your source code.


164
00:05:17,106 --> 00:05:19,516
In this case, XCTAssertEqual


165
00:05:19,516 --> 00:05:20,706
will compare the first two


166
00:05:20,706 --> 00:05:22,476
values given to it and make sure


167
00:05:22,476 --> 00:05:23,176
that they're equal.


168
00:05:23,876 --> 00:05:25,756
If they differ, the test will


169
00:05:25,756 --> 00:05:26,516
fail instead.


170
00:05:27,916 --> 00:05:30,576
Now, once we run this test, we


171
00:05:30,576 --> 00:05:32,256
hope that it passes and the test


172
00:05:32,346 --> 00:05:33,606
diamond turns green with the


173
00:05:33,606 --> 00:05:34,516
checkmark inside.


174
00:05:35,566 --> 00:05:36,686
We know this isn't always the


175
00:05:36,686 --> 00:05:37,306
case though.


176
00:05:38,216 --> 00:05:39,866
If the test fails, the test


177
00:05:39,866 --> 00:05:41,566
diamond turns red with an x and


178
00:05:42,046 --> 00:05:43,106
the relevant line will


179
00:05:43,166 --> 00:05:43,566
highlight.


180
00:05:44,686 --> 00:05:46,416
We also get an error message


181
00:05:46,416 --> 00:05:47,546
that shows what went wrong in


182
00:05:47,546 --> 00:05:47,766
the test.


183
00:05:49,156 --> 00:05:50,526
The string we pass to


184
00:05:50,526 --> 00:05:52,826
XCTAssertEqual also shows up now


185
00:05:53,156 --> 00:05:54,586
to give us more information to


186
00:05:54,586 --> 00:05:55,416
debug the issue.


187
00:05:55,416 --> 00:05:58,556
In this case, we may have an off


188
00:05:58,596 --> 00:06:00,386
by one error in our source code


189
00:06:00,756 --> 00:06:02,496
or you may have initialized to


190
00:06:02,496 --> 00:06:03,606
an unexpected value.


191
00:06:04,446 --> 00:06:05,586
We can go back to the source


192
00:06:05,636 --> 00:06:07,976
code, fix this issue, and run


193
00:06:07,976 --> 00:06:12,526
our test again until it passes.


194
00:06:12,666 --> 00:06:14,226
Each test class template will


195
00:06:14,226 --> 00:06:16,316
also include a setUp and a


196
00:06:16,316 --> 00:06:16,826
tearDown method.


197
00:06:17,646 --> 00:06:19,236
These blocks serve as a way for


198
00:06:19,236 --> 00:06:20,966
you to do any work you need to


199
00:06:21,056 --> 00:06:22,886
around your test in order to


200
00:06:22,946 --> 00:06:24,226
keep your tests specific to


201
00:06:24,226 --> 00:06:24,846
their purpose.


202
00:06:25,386 --> 00:06:28,096
SetUp is called before each of


203
00:06:28,096 --> 00:06:29,486
your test cases executes.


204
00:06:30,256 --> 00:06:32,156
In UI test, this helps ensure


205
00:06:32,156 --> 00:06:33,566
that your app is launched before


206
00:06:33,566 --> 00:06:34,756
you try interacting with it.


207
00:06:36,056 --> 00:06:37,646
XCTest then runs your test


208
00:06:37,646 --> 00:06:39,596
method and afterwards tearDown


209
00:06:39,776 --> 00:06:42,146
can be used to clean up any


210
00:06:42,296 --> 00:06:43,606
changes you've made to the data


211
00:06:44,106 --> 00:06:46,396
or the global state of your app,


212
00:06:46,396 --> 00:06:47,536
to make sure your test leaves


213
00:06:47,536 --> 00:06:48,996
nothing behind that could impact


214
00:06:49,056 --> 00:06:49,806
subsequent tests.


215
00:06:51,356 --> 00:06:53,586
Now, let's go into a demo to see


216
00:06:53,586 --> 00:06:55,236
how to write unit and UI tests


217
00:06:55,566 --> 00:06:56,646
for your app.


218
00:06:57,516 --> 00:07:02,926
[ Applause ]


219
00:07:03,426 --> 00:07:04,606
So, we've been working on a


220
00:07:04,606 --> 00:07:05,416
travel app.


221
00:07:05,946 --> 00:07:06,726
This shows different


222
00:07:06,726 --> 00:07:08,096
destinations around the world


223
00:07:08,096 --> 00:07:09,096
and can help you plan a


224
00:07:09,096 --> 00:07:09,766
vacation.


225
00:07:10,746 --> 00:07:12,376
I'd like to add a new feature to


226
00:07:12,376 --> 00:07:14,356
my app that shows how far away


227
00:07:14,476 --> 00:07:16,056
each of these destinations is


228
00:07:16,146 --> 00:07:17,666
from our current location in San


229
00:07:17,666 --> 00:07:18,076
Jose.


230
00:07:19,306 --> 00:07:21,016
For this, I've written a new


231
00:07:21,016 --> 00:07:22,896
class called DistanceCalculator.


232
00:07:23,886 --> 00:07:25,606
This class defines a city struct


233
00:07:26,106 --> 00:07:27,666
that contains a string with the


234
00:07:27,666 --> 00:07:29,826
name of the city and a tuple for


235
00:07:29,826 --> 00:07:30,436
its coordinates.


236
00:07:31,176 --> 00:07:33,586
I currently have my list of


237
00:07:33,636 --> 00:07:35,236
cities stored in a dictionary.


238
00:07:35,496 --> 00:07:36,756
I'm planning on moving these two


239
00:07:36,756 --> 00:07:37,766
database later though.


240
00:07:39,146 --> 00:07:40,656
I have a function called city


241
00:07:40,916 --> 00:07:42,226
that will return an optional


242
00:07:42,226 --> 00:07:44,566
city struct type to be able to


243
00:07:44,566 --> 00:07:46,246
search my dictionary for the


244
00:07:46,246 --> 00:07:46,636
cities.


245
00:07:47,156 --> 00:07:49,326
The main function I'm planning


246
00:07:49,326 --> 00:07:50,976
on using from this class is


247
00:07:51,026 --> 00:07:51,976
distanceInMiles.


248
00:07:52,926 --> 00:07:54,596
This takes in two strings with


249
00:07:54,686 --> 00:07:56,156
city names and returns the


250
00:07:56,156 --> 00:07:57,596
distance between them as a


251
00:07:57,596 --> 00:07:57,976
double.


252
00:07:58,846 --> 00:08:00,326
If either of the cities can't be


253
00:08:00,326 --> 00:08:02,006
found in our dictionary, an


254
00:08:02,056 --> 00:08:04,046
error will be thrown instead.


255
00:08:05,196 --> 00:08:06,986
Lastly, I have another helper


256
00:08:06,986 --> 00:08:08,096
function also called


257
00:08:08,096 --> 00:08:08,986
distanceInMiles.


258
00:08:09,756 --> 00:08:10,896
This one takes in our city


259
00:08:10,896 --> 00:08:12,356
struct and returns the distance


260
00:08:12,356 --> 00:08:12,996
between them.


261
00:08:13,846 --> 00:08:15,206
This function uses the core


262
00:08:15,206 --> 00:08:17,286
location framework so that it


263
00:08:17,286 --> 00:08:18,606
does the heavy lifting for me.


264
00:08:19,956 --> 00:08:21,386
Now, to start writing unit test


265
00:08:21,386 --> 00:08:23,546
for this class, I've created a


266
00:08:23,546 --> 00:08:24,816
new test class called


267
00:08:24,876 --> 00:08:26,356
DistanceCalculatorTests.


268
00:08:27,566 --> 00:08:29,286
As I start writing tests, I want


269
00:08:29,286 --> 00:08:30,506
to see my source code so I'm


270
00:08:30,596 --> 00:08:32,416
going to open another editor


271
00:08:32,416 --> 00:08:34,556
below, and then navigate to my


272
00:08:34,686 --> 00:08:36,706
DistanceCalculator class.


273
00:08:39,296 --> 00:08:40,936
The first test that I want to


274
00:08:40,936 --> 00:08:42,265
write is testing my city


275
00:08:42,265 --> 00:08:42,796
function.


276
00:08:43,346 --> 00:08:45,526
So I'm going to start writing a


277
00:08:45,526 --> 00:08:48,016
unit test and I can call it


278
00:08:48,156 --> 00:08:49,526
testCoordinatesOfSeattle.


279
00:08:50,366 --> 00:08:51,456
For each of my unit test


280
00:08:51,586 --> 00:08:53,196
classes, I'm going to choose a


281
00:08:53,196 --> 00:08:55,386
specific test case to make sure


282
00:08:55,386 --> 00:08:56,246
that my function works.


283
00:08:57,276 --> 00:08:58,956
In this case, I'm going to input


284
00:08:59,026 --> 00:09:01,126
Seattle to my city function and


285
00:09:01,126 --> 00:09:02,106
make sure that its correct


286
00:09:02,106 --> 00:09:03,166
coordinates are returned.


287
00:09:04,356 --> 00:09:05,856
The first thing I'll do is to


288
00:09:05,856 --> 00:09:08,416
find calculator by initializing


289
00:09:08,566 --> 00:09:09,596
my DistanceCalculator.


290
00:09:09,596 --> 00:09:13,276
Now, I can start writing and


291
00:09:14,166 --> 00:09:15,666
make a call to my function.


292
00:09:16,606 --> 00:09:18,476
But one thing to remember is


293
00:09:18,476 --> 00:09:20,816
that city returns an optional


294
00:09:20,816 --> 00:09:21,436
city struct.


295
00:09:22,286 --> 00:09:23,536
So I want to make sure that the


296
00:09:23,536 --> 00:09:25,696
value I get is not nil.


297
00:09:26,606 --> 00:09:28,696
To do this, I can use this API


298
00:09:29,486 --> 00:09:31,976
and try using XCTUnwrap to make


299
00:09:31,976 --> 00:09:34,256
sure that the value is valid.


300
00:09:38,816 --> 00:09:40,836
Then I can call calculator for


301
00:09:40,836 --> 00:09:41,346
Seattle.


302
00:09:42,626 --> 00:09:43,826
Now, I'll get an error message


303
00:09:43,866 --> 00:09:45,576
that appears, because it looks


304
00:09:45,576 --> 00:09:46,626
like there's an error that could


305
00:09:46,626 --> 00:09:48,516
be thrown that is not being


306
00:09:48,516 --> 00:09:48,886
handled.


307
00:09:50,006 --> 00:09:52,066
If city returns a nil value,


308
00:09:52,606 --> 00:09:54,016
then I have to make sure that my


309
00:09:54,116 --> 00:09:55,776
test case also throws to


310
00:09:55,776 --> 00:09:58,006
properly show the issue.


311
00:10:00,086 --> 00:10:02,616
Now, I have my city variable for


312
00:10:02,616 --> 00:10:05,096
the value return for Seattle and


313
00:10:05,096 --> 00:10:07,276
I can use my assertion APIs to


314
00:10:07,276 --> 00:10:08,956
make sure that both the latitude


315
00:10:08,956 --> 00:10:11,566
and the longitude are right.


316
00:10:12,576 --> 00:10:13,876
Now, I'll run my test by


317
00:10:13,876 --> 00:10:15,846
clicking on the test diamond.


318
00:10:17,036 --> 00:10:19,076
This will launch the app, run


319
00:10:19,076 --> 00:10:20,726
the test, and tell us what


320
00:10:20,726 --> 00:10:21,216
happened.


321
00:10:21,776 --> 00:10:23,986
It looks like our test


322
00:10:23,986 --> 00:10:24,566
succeeded.


323
00:10:24,986 --> 00:10:25,416
It's great.


324
00:10:25,416 --> 00:10:29,186
I can write another test now for


325
00:10:29,186 --> 00:10:30,846
my class and I'm going to focus


326
00:10:30,846 --> 00:10:32,966
on my distanceInMiles class.


327
00:10:34,936 --> 00:10:36,216
My function is going to be


328
00:10:36,256 --> 00:10:38,376
called testSanFranciscoToNewYork


329
00:10:38,696 --> 00:10:40,256
to specifically look at what my


330
00:10:40,256 --> 00:10:41,656
functional return for the


331
00:10:41,656 --> 00:10:42,266
assistance.


332
00:10:43,456 --> 00:10:44,556
Now the first thing I'm going to


333
00:10:44,556 --> 00:10:46,106
have to do here is to find


334
00:10:46,106 --> 00:10:47,406
another calculator by


335
00:10:47,406 --> 00:10:49,046
initializing DistanceCalculator.


336
00:10:49,936 --> 00:10:50,966
But at this point, my code is


337
00:10:50,966 --> 00:10:52,386
getting repetitive because I


338
00:10:52,476 --> 00:10:53,926
have to do this at the beginning


339
00:10:53,926 --> 00:10:55,326
of each of my test cases.


340
00:10:56,366 --> 00:10:58,426
So instead, I'm going to declare


341
00:10:58,426 --> 00:11:01,076
a class variable called


342
00:11:01,076 --> 00:11:03,226
calculator and make use of my


343
00:11:03,226 --> 00:11:05,296
setUp function to initialize it


344
00:11:05,366 --> 00:11:07,000
before each test begins.


345
00:11:12,906 --> 00:11:19,126
Now I can start writing my test.


346
00:11:19,226 --> 00:11:21,146
I'll define distance in miles by


347
00:11:21,146 --> 00:11:22,476
trying to call distanceInMiles


348
00:11:22,786 --> 00:11:24,316
from my function from San


349
00:11:24,316 --> 00:11:25,326
Francisco to New York.


350
00:11:25,326 --> 00:11:28,056
And then I'll use my assertion


351
00:11:28,056 --> 00:11:29,676
APIs to make sure that the


352
00:11:29,676 --> 00:11:30,526
distance is correct.


353
00:11:31,296 --> 00:11:33,706
I'll run my test from the test


354
00:11:33,886 --> 00:11:34,336
diamond.


355
00:11:34,886 --> 00:11:38,816
And it looks like this test


356
00:11:38,816 --> 00:11:39,676
failed instead.


357
00:11:39,876 --> 00:11:42,716
I can look at the error message


358
00:11:43,236 --> 00:11:44,986
at the failure message in my


359
00:11:44,986 --> 00:11:45,866
issue navigator.


360
00:11:46,366 --> 00:11:51,396
This time our test runs and we


361
00:11:51,396 --> 00:11:52,806
get an error message with an


362
00:11:52,886 --> 00:11:53,886
actual test failure.


363
00:11:55,046 --> 00:11:57,296
It looks like the value that


364
00:11:57,296 --> 00:11:58,936
we're expecting and comparing to


365
00:11:58,936 --> 00:12:00,376
has a lot more precision than


366
00:12:00,376 --> 00:12:02,176
the one we're actually looking


367
00:12:02,176 --> 00:12:02,436
for.


368
00:12:03,016 --> 00:12:05,946
In this case, I don't care about


369
00:12:05,946 --> 00:12:07,736
all this precision because I


370
00:12:07,736 --> 00:12:09,116
only want to show my user a


371
00:12:09,116 --> 00:12:10,776
whole number of miles between


372
00:12:10,776 --> 00:12:11,326
these cities.


373
00:12:12,296 --> 00:12:14,116
So, I can add an accuracy


374
00:12:14,116 --> 00:12:18,546
argument instead of equal to


375
00:12:18,546 --> 00:12:18,926
one.


376
00:12:19,746 --> 00:12:21,816
This will allow XCTAssertEqual


377
00:12:21,856 --> 00:12:23,846
to have a leniency and allow the


378
00:12:23,846 --> 00:12:25,456
numbers to defer by one and


379
00:12:25,456 --> 00:12:26,216
still pass the test.


380
00:12:27,596 --> 00:12:29,536
I'll write my test again to make


381
00:12:29,726 --> 00:12:32,656
sure it passes.


382
00:12:32,806 --> 00:12:32,956
Great.


383
00:12:33,516 --> 00:12:38,466
[ Applause ]


384
00:12:38,966 --> 00:12:40,606
Now I've written two tests so


385
00:12:40,606 --> 00:12:42,596
far for my unit test class, but


386
00:12:42,596 --> 00:12:44,526
both of these tests take valid


387
00:12:44,526 --> 00:12:46,656
inputs to the functions and


388
00:12:46,656 --> 00:12:47,876
check that a valid input is


389
00:12:47,876 --> 00:12:48,516
returned.


390
00:12:49,046 --> 00:12:50,106
But there are some other test


391
00:12:50,106 --> 00:12:51,406
cases I want to check for my


392
00:12:51,406 --> 00:12:51,976
function.


393
00:12:52,596 --> 00:12:54,056
I want to make sure that errors


394
00:12:54,056 --> 00:12:55,846
are also handled correctly in my


395
00:12:55,846 --> 00:12:56,596
class.


396
00:12:57,576 --> 00:12:58,916
So, the next function I'm going


397
00:12:58,916 --> 00:13:00,176
to write is going to be a


398
00:13:00,176 --> 00:13:01,176
negative test case.


399
00:13:01,946 --> 00:13:03,866
I don't expect Cupertino to be


400
00:13:03,866 --> 00:13:05,466
my database of cities because


401
00:13:05,466 --> 00:13:06,906
I'm only considering large


402
00:13:06,906 --> 00:13:09,206
cities, and Cupertino won't be


403
00:13:09,206 --> 00:13:11,436
one of them.


404
00:13:12,666 --> 00:13:14,796
So, when I call Cupertino, I'll


405
00:13:14,796 --> 00:13:16,856
expect an error to be thrown to


406
00:13:16,856 --> 00:13:18,416
say that the city is unknown in


407
00:13:18,416 --> 00:13:19,036
our database.


408
00:13:19,686 --> 00:13:24,966
I can use XCTAssertThrowsError


409
00:13:24,966 --> 00:13:27,056
to do this.


410
00:13:27,226 --> 00:13:29,066
I can then use a closure to look


411
00:13:29,066 --> 00:13:30,376
at the exact errors that were


412
00:13:30,436 --> 00:13:32,836
thrown and compare them with


413
00:13:32,836 --> 00:13:34,816
XCTAssertEqual to make sure


414
00:13:34,816 --> 00:13:35,336
they're correct.


415
00:13:36,596 --> 00:13:38,116
Now, I've written three tests


416
00:13:38,116 --> 00:13:39,996
and I want to run all of them at


417
00:13:39,996 --> 00:13:41,246
once to make sure that


418
00:13:41,356 --> 00:13:42,366
everything is working right.


419
00:13:43,256 --> 00:13:44,206
So I can go to the test


420
00:13:44,296 --> 00:13:46,646
navigator and this will show me


421
00:13:46,896 --> 00:13:48,906
row by row, all of the different


422
00:13:48,906 --> 00:13:50,996
test targets, test classes, and


423
00:13:50,996 --> 00:13:52,756
test cases in my project.


424
00:13:53,696 --> 00:13:55,396
I can select at each level to


425
00:13:55,456 --> 00:13:57,176
run all of the tests below it.


426
00:13:58,066 --> 00:13:59,726
So, if click the play button


427
00:13:59,846 --> 00:14:01,606
next to DistanceCalculatorTest,


428
00:14:01,806 --> 00:14:03,176
it will run all three of these


429
00:14:03,176 --> 00:14:03,326
tests.


430
00:14:04,516 --> 00:14:06,856
My Apple launch runs them and


431
00:14:06,856 --> 00:14:08,456
all the green checkmarks means


432
00:14:08,456 --> 00:14:09,886
they all passed.


433
00:14:10,576 --> 00:14:12,906
I can also command and click on


434
00:14:12,906 --> 00:14:15,696
different rows in order to


435
00:14:15,696 --> 00:14:17,436
select different values to run


436
00:14:18,026 --> 00:14:19,466
or different test categories to


437
00:14:19,466 --> 00:14:21,896
run if I don't want to run all


438
00:14:21,896 --> 00:14:22,576
of them at once.


439
00:14:23,506 --> 00:14:24,806
By context clicking, I can


440
00:14:24,806 --> 00:14:27,316
choose to run them.


441
00:14:27,516 --> 00:14:29,436
If I do choose a subset to run


442
00:14:29,436 --> 00:14:31,126
and then want to rerun the same


443
00:14:31,126 --> 00:14:32,616
subset later after I fix some


444
00:14:32,616 --> 00:14:34,466
issues, I can also go to the


445
00:14:34,466 --> 00:14:36,626
Product menu, click on Perform


446
00:14:36,726 --> 00:14:38,706
Action and choose to rerun just


447
00:14:38,706 --> 00:14:40,076
the last test that was run.


448
00:14:41,096 --> 00:14:42,996
Now that I've written some unit


449
00:14:42,996 --> 00:14:44,686
tests for my class, I want to


450
00:14:44,686 --> 00:14:45,686
implement it in the UI.


451
00:14:46,766 --> 00:14:48,026
I'll do so by showing a


452
00:14:48,026 --> 00:14:51,326
distanceText and running my


453
00:14:52,336 --> 00:14:52,476
class.


454
00:14:52,656 --> 00:14:54,466
Now, under the city name, we


455
00:14:54,466 --> 00:14:55,756
have a distance that shows how


456
00:14:55,756 --> 00:14:57,346
far away these cities are from


457
00:14:57,346 --> 00:14:58,326
our current location.


458
00:14:58,926 --> 00:15:04,056
So, I've created a new UITest


459
00:15:04,096 --> 00:15:05,826
class called DiscoverUITest.


460
00:15:07,176 --> 00:15:09,116
Our UITest class has set up


461
00:15:09,216 --> 00:15:10,606
populated with two things.


462
00:15:11,386 --> 00:15:13,016
Continue after failure is set to


463
00:15:13,016 --> 00:15:13,426
false.


464
00:15:13,976 --> 00:15:16,006
Once we failed a UI test, it


465
00:15:16,006 --> 00:15:17,366
usually means we've gone into a


466
00:15:17,366 --> 00:15:19,126
UI state that's unexpected.


467
00:15:19,756 --> 00:15:21,346
Chances are we won't be able to


468
00:15:21,346 --> 00:15:23,186
interact with anything further


469
00:15:23,346 --> 00:15:24,206
because we don't know what's


470
00:15:24,206 --> 00:15:25,246
actually on the screen.


471
00:15:25,796 --> 00:15:27,956
We also want to make sure that


472
00:15:27,956 --> 00:15:29,476
our app is launched before we


473
00:15:29,476 --> 00:15:30,506
try interacting with it.


474
00:15:31,036 --> 00:15:33,336
We can start writing our UI


475
00:15:33,336 --> 00:15:35,156
tests just as we were writing


476
00:15:35,156 --> 00:15:35,726
our unit test.


477
00:15:35,726 --> 00:15:37,706
I'm going to write


478
00:15:37,846 --> 00:15:40,046
testMilesToParis and the goal


479
00:15:40,046 --> 00:15:42,596
will be to open the app, swipe


480
00:15:42,596 --> 00:15:45,876
to the Paris icon and then make


481
00:15:45,876 --> 00:15:47,256
sure that the distance shown is


482
00:15:48,266 --> 00:15:48,426
correct.


483
00:15:50,096 --> 00:15:52,026
The first thing I'm going to do


484
00:15:52,246 --> 00:15:53,496
is actually make sure that we're


485
00:15:53,496 --> 00:15:54,876
on the discover tab when our


486
00:15:54,876 --> 00:15:55,186
test starts.


487
00:15:55,246 --> 00:15:58,366
I can write UI test by looking


488
00:15:58,366 --> 00:16:00,366
for elements in the app's UI and


489
00:16:00,366 --> 00:16:01,196
interacting with them.


490
00:16:01,196 --> 00:16:03,616
In this case I'm going to look


491
00:16:03,616 --> 00:16:05,496
for a tab bar button called


492
00:16:05,616 --> 00:16:06,086
Discover.


493
00:16:06,086 --> 00:16:09,146
And then I'm going to tap on it


494
00:16:09,536 --> 00:16:10,536
to make sure we're on the right


495
00:16:10,576 --> 00:16:10,846
tab.


496
00:16:11,976 --> 00:16:14,636
After every UI action we do, we


497
00:16:14,636 --> 00:16:16,406
want to verify that the correct


498
00:16:16,536 --> 00:16:17,786
screen is now displayed.


499
00:16:18,406 --> 00:16:20,496
So I'm going to then make sure


500
00:16:20,496 --> 00:16:22,186
that San Francisco is visible on


501
00:16:22,186 --> 00:16:24,906
the screen to make sure we're in


502
00:16:25,016 --> 00:16:28,546
the expected state.


503
00:16:28,746 --> 00:16:30,676
I'll use an XCTAssert statement


504
00:16:30,776 --> 00:16:32,646
to make sure that San Francisco,


505
00:16:32,646 --> 00:16:34,656
a static text isHittable.


506
00:16:35,326 --> 00:16:37,016
IsHittable will ensure both that


507
00:16:37,016 --> 00:16:38,986
the element exists and that is


508
00:16:38,986 --> 00:16:40,946
on the screen so we can interact


509
00:16:41,426 --> 00:16:42,546
with it.


510
00:16:42,816 --> 00:16:44,526
Now, the next thing I want to do


511
00:16:44,526 --> 00:16:46,296
is swipe left on this image to


512
00:16:46,296 --> 00:16:47,716
get to the Paris location.


513
00:16:48,266 --> 00:16:50,996
But I'm actually not sure how to


514
00:16:50,996 --> 00:16:52,646
interact with this image because


515
00:16:52,646 --> 00:16:54,036
they may have a custom label


516
00:16:54,266 --> 00:16:55,656
that I'm not sure how to define.


517
00:16:56,386 --> 00:16:57,996
So I can use the debugger to get


518
00:16:57,996 --> 00:16:59,636
more information about my app's


519
00:16:59,826 --> 00:16:59,966
UI.


520
00:16:59,966 --> 00:17:02,656
I'm going to set a breakpoint on


521
00:17:02,656 --> 00:17:04,776
line 26 and then run my test


522
00:17:05,016 --> 00:17:05,955
from the test diamond.


523
00:17:06,496 --> 00:17:09,266
The Apple launch click on


524
00:17:09,266 --> 00:17:10,836
Discover, make sure San


525
00:17:10,836 --> 00:17:12,546
Francisco is visible and then


526
00:17:12,546 --> 00:17:13,556
pause in the debugger.


527
00:17:18,556 --> 00:17:20,336
From the debugger, we can get


528
00:17:20,336 --> 00:17:21,736
more information about the app.


529
00:17:22,826 --> 00:17:24,675
We can print out the exact view


530
00:17:24,675 --> 00:17:27,766
hierarchy by using po app to get


531
00:17:27,766 --> 00:17:28,636
this information.


532
00:17:29,176 --> 00:17:32,716
Here we have a list of all of


533
00:17:32,716 --> 00:17:34,936
the UI elements in our app.


534
00:17:34,986 --> 00:17:36,266
This is a little overwhelming


535
00:17:36,266 --> 00:17:37,836
though so I'm going to further


536
00:17:37,836 --> 00:17:40,106
specify that I want to print out


537
00:17:40,576 --> 00:17:42,046
all of the images in my app


538
00:17:42,046 --> 00:17:42,456
only.


539
00:17:43,016 --> 00:17:43,146
Great.


540
00:17:43,936 --> 00:17:45,876
Now we have a list of all of


541
00:17:45,876 --> 00:17:47,656
these images and it looks like


542
00:17:47,656 --> 00:17:49,126
San Francisco is the one I want.


543
00:17:50,126 --> 00:17:51,706
So I'm going to copy the string


544
00:17:52,136 --> 00:17:54,246
and I'll close the debugger and


545
00:17:57,356 --> 00:18:01,176
then define my sfImage to be an


546
00:18:01,176 --> 00:18:02,996
image with this identifier.


547
00:18:02,996 --> 00:18:09,886
Now, I can simply call on this


548
00:18:09,886 --> 00:18:11,206
query to swipe left.


549
00:18:12,456 --> 00:18:13,926
Once I've done this, I want to


550
00:18:13,926 --> 00:18:15,766
confirm that Paris is actually


551
00:18:15,766 --> 00:18:17,466
visible on the screen so that no


552
00:18:17,466 --> 00:18:18,836
changes in the UI would


553
00:18:18,996 --> 00:18:20,566
interrupt this test.


554
00:18:23,096 --> 00:18:25,536
So I can use XCTAssert to make


555
00:18:25,536 --> 00:18:26,766
sure that Paris is hittable.


556
00:18:27,936 --> 00:18:30,016
Lastly, I want to make sure that


557
00:18:30,016 --> 00:18:31,036
this correct distance is


558
00:18:31,076 --> 00:18:31,616
displayed.


559
00:18:31,996 --> 00:18:33,846
So I'll use one more XCTAssert


560
00:18:33,846 --> 00:18:37,596
statement to make sure that 5586


561
00:18:37,596 --> 00:18:39,386
miles, a static text, is


562
00:18:39,386 --> 00:18:39,826
visible.


563
00:18:40,896 --> 00:18:43,086
Now we can run our test from the


564
00:18:43,086 --> 00:18:46,456
test diamond and we'll see the


565
00:18:46,456 --> 00:18:48,326
app launch and execute through


566
00:18:48,326 --> 00:18:52,126
each of these steps, once I


567
00:18:52,126 --> 00:18:52,926
remove my breakpoint.


568
00:18:58,816 --> 00:19:00,206
So we'll see that the app


569
00:19:00,206 --> 00:19:02,066
launches, we press Discover,


570
00:19:02,266 --> 00:19:04,266
check for the text, swipe left


571
00:19:04,796 --> 00:19:06,076
and then make sure that all of


572
00:19:06,076 --> 00:19:06,806
our correct strings are


573
00:19:06,806 --> 00:19:07,286
displayed.


574
00:19:08,516 --> 00:19:13,426
[ Applause ]


575
00:19:13,926 --> 00:19:15,176
One more thing to consider with


576
00:19:15,176 --> 00:19:16,586
this test is that we're looking


577
00:19:16,586 --> 00:19:18,436
for a static text, which says


578
00:19:18,436 --> 00:19:21,346
exactly 5586 miles.


579
00:19:22,086 --> 00:19:23,366
You may want to make sure that


580
00:19:23,366 --> 00:19:24,876
you're mocking your location or


581
00:19:24,876 --> 00:19:26,116
simulating that you're in


582
00:19:26,116 --> 00:19:28,506
exactly in San Jose whenever you


583
00:19:28,506 --> 00:19:30,606
run this test because otherwise


584
00:19:30,606 --> 00:19:32,026
the distance will vary based on


585
00:19:32,026 --> 00:19:33,156
your actual location.


586
00:19:34,176 --> 00:19:35,506
And now let's go back to the


587
00:19:35,506 --> 00:19:36,726
slide to talk about test


588
00:19:36,726 --> 00:19:38,306
organization in your project.


589
00:19:48,246 --> 00:19:50,206
So when starting to write your


590
00:19:50,206 --> 00:19:52,186
test class, you'll start out


591
00:19:52,186 --> 00:19:53,526
with two test targets,


592
00:19:53,976 --> 00:19:55,476
generally, one for unit tests


593
00:19:55,786 --> 00:19:56,736
and one for UI tests.


594
00:19:58,016 --> 00:20:00,116
Unit test and UI test must be


595
00:20:00,116 --> 00:20:01,956
separated by type because of the


596
00:20:01,956 --> 00:20:03,666
differences in how they execute


597
00:20:03,786 --> 00:20:04,216
on your app.


598
00:20:05,396 --> 00:20:06,846
Each of these test classes--


599
00:20:07,276 --> 00:20:09,016
test targets will contain your


600
00:20:09,016 --> 00:20:09,936
test classes.


601
00:20:11,076 --> 00:20:12,456
Your test targets can have as


602
00:20:12,456 --> 00:20:14,346
many test classes as necessary


603
00:20:14,346 --> 00:20:14,986
to test your app.


604
00:20:16,696 --> 00:20:19,036
Your test classes then contain


605
00:20:19,036 --> 00:20:20,306
each of your test cases.


606
00:20:21,206 --> 00:20:23,476
Together, your unit test target


607
00:20:23,566 --> 00:20:25,216
and UI test target can fully


608
00:20:25,216 --> 00:20:25,816
test your app.


609
00:20:27,006 --> 00:20:28,316
But there are some cases where


610
00:20:28,316 --> 00:20:29,836
you may need more test targets.


611
00:20:30,686 --> 00:20:31,866
As your project becomes more


612
00:20:31,866 --> 00:20:34,366
complicated you may want a new--


613
00:20:34,516 --> 00:20:35,666
to create a new framework.


614
00:20:36,406 --> 00:20:37,616
This framework should have its


615
00:20:37,616 --> 00:20:39,556
own unit test target to contain


616
00:20:39,556 --> 00:20:39,856
its test.


617
00:20:41,286 --> 00:20:43,226
Additionally, Swift packages


618
00:20:43,256 --> 00:20:44,816
that you create and write tests


619
00:20:44,816 --> 00:20:47,086
for in Xcode already define test


620
00:20:47,126 --> 00:20:47,526
targets.


621
00:20:48,386 --> 00:20:50,096
These test targets behave the


622
00:20:50,096 --> 00:20:52,536
same way in Xcode as any other


623
00:20:52,706 --> 00:20:54,206
unit test target.


624
00:20:55,056 --> 00:20:57,006
Finally, once you have a full


625
00:20:57,006 --> 00:20:58,746
test rewritten for each of your


626
00:20:58,746 --> 00:21:00,996
test targets you may wonder how


627
00:21:00,996 --> 00:21:02,896
well your test actually cover


628
00:21:02,896 --> 00:21:03,966
all of your source code.


629
00:21:04,776 --> 00:21:06,266
For this you can use Code


630
00:21:06,266 --> 00:21:06,816
Coverage.


631
00:21:07,636 --> 00:21:09,246
Code Coverage is a feature in


632
00:21:09,476 --> 00:21:11,556
Xcode in XCTest that will


633
00:21:11,556 --> 00:21:13,566
measure and visualize the number


634
00:21:13,566 --> 00:21:15,216
of times each line of your


635
00:21:15,216 --> 00:21:17,396
source code was executed during


636
00:21:17,396 --> 00:21:18,116
your test run.


637
00:21:19,596 --> 00:21:21,476
After enabling the feature and


638
00:21:21,476 --> 00:21:23,386
running your test, you can go to


639
00:21:23,386 --> 00:21:25,436
the report navigator and select


640
00:21:25,436 --> 00:21:27,116
the coverage data for your test


641
00:21:27,866 --> 00:21:27,976
run.


642
00:21:29,136 --> 00:21:31,636
There, you'll see a list of each


643
00:21:31,636 --> 00:21:33,476
of your test targets and classes


644
00:21:33,806 --> 00:21:35,456
along with the percentage that


645
00:21:35,456 --> 00:21:37,306
shows how much of your source


646
00:21:37,366 --> 00:21:38,976
code in that section was


647
00:21:39,286 --> 00:21:40,506
actually executed.


648
00:21:41,376 --> 00:21:42,946
You can select each test class


649
00:21:43,116 --> 00:21:44,566
to switch directly to the file.


650
00:21:45,846 --> 00:21:47,346
When showing coverage data in a


651
00:21:47,346 --> 00:21:49,316
source file, the source editor


652
00:21:49,316 --> 00:21:51,416
gutter on the right will show a


653
00:21:51,416 --> 00:21:53,626
number indicating how many times


654
00:21:53,796 --> 00:21:55,636
that line was executed when you


655
00:21:55,636 --> 00:21:56,116
ran your tests.


656
00:21:57,336 --> 00:21:58,696
You can also hover over the


657
00:21:58,696 --> 00:22:00,346
numbers to see information


658
00:22:00,346 --> 00:22:01,706
directly in your source editor.


659
00:22:03,176 --> 00:22:04,706
Lines that were executed will


660
00:22:04,706 --> 00:22:05,356
turn green.


661
00:22:06,286 --> 00:22:07,436
Sections that were not hit


662
00:22:07,436 --> 00:22:09,026
during your test will highlight


663
00:22:09,026 --> 00:22:09,326
red.


664
00:22:10,356 --> 00:22:11,756
You can also see complex


665
00:22:11,756 --> 00:22:13,856
information showing individual


666
00:22:13,856 --> 00:22:16,296
code paths that were not hit


667
00:22:16,296 --> 00:22:17,796
during your test, such as


668
00:22:17,796 --> 00:22:18,976
conditionals that were never


669
00:22:18,976 --> 00:22:19,616
selected.


670
00:22:20,466 --> 00:22:22,406
The code coverage tool overall


671
00:22:22,406 --> 00:22:24,146
gives you more information about


672
00:22:24,146 --> 00:22:25,746
your test and can help you


673
00:22:25,746 --> 00:22:27,696
identify areas you may want to


674
00:22:27,696 --> 00:22:30,356
write more tests for.


675
00:22:30,576 --> 00:22:31,646
When committing new work to


676
00:22:31,696 --> 00:22:33,936
repository including your test


677
00:22:34,336 --> 00:22:36,286
along with your code ensures


678
00:22:36,286 --> 00:22:37,586
that everything is quality


679
00:22:37,586 --> 00:22:39,456
controlled and checking your


680
00:22:39,456 --> 00:22:41,446
code coverage ensures that you


681
00:22:41,446 --> 00:22:42,526
don't miss anything.


682
00:22:43,696 --> 00:22:44,676
If you feel like your tests


683
00:22:44,946 --> 00:22:46,486
don't fully cover your changes,


684
00:22:46,816 --> 00:22:48,706
it may be a good time to go back


685
00:22:48,706 --> 00:22:50,366
and write more tests.


686
00:22:51,016 --> 00:22:52,846
You'll get the most value out of


687
00:22:52,846 --> 00:22:54,136
your tests by writing them


688
00:22:54,136 --> 00:22:54,526
early.


689
00:22:55,296 --> 00:22:57,106
By having a test suite that goes


690
00:22:57,106 --> 00:22:59,016
along with your source code, you


691
00:22:59,016 --> 00:23:00,276
can ensure that each new


692
00:23:00,306 --> 00:23:02,296
function you write is reliable


693
00:23:02,446 --> 00:23:03,836
and behaves as expected.


694
00:23:04,696 --> 00:23:06,496
And remember, testing is an


695
00:23:06,496 --> 00:23:08,656
ongoing process and vital to the


696
00:23:08,656 --> 00:23:10,466
health of your app.


697
00:23:10,466 --> 00:23:12,246
Now, I'd like to invite Stuart


698
00:23:12,246 --> 00:23:13,956
to the stage to tell you more


699
00:23:14,006 --> 00:23:15,376
about how you can get the most


700
00:23:15,376 --> 00:23:16,976
out of your tests in Xcode.


701
00:23:17,516 --> 00:23:25,656
[ Applause ]


702
00:23:26,156 --> 00:23:27,056
>> Thanks, Ana.


703
00:23:27,586 --> 00:23:28,846
So now that you've learned the


704
00:23:28,846 --> 00:23:31,056
basics of testing in Xcode, I'd


705
00:23:31,056 --> 00:23:32,436
like to talk about a new feature


706
00:23:32,436 --> 00:23:34,366
in Xcode 11 called Test Plans,


707
00:23:34,576 --> 00:23:36,196
which helps you get the most out


708
00:23:36,196 --> 00:23:38,596
of your tests.


709
00:23:38,776 --> 00:23:39,816
So whether you're just getting


710
00:23:39,816 --> 00:23:41,926
started with writing test or if


711
00:23:41,926 --> 00:23:43,356
your project already has a large


712
00:23:43,356 --> 00:23:45,366
and robust test suite, there's


713
00:23:45,366 --> 00:23:46,526
one piece of advice we'd like to


714
00:23:46,526 --> 00:23:47,786
share to help you get the most


715
00:23:47,786 --> 00:23:48,516
out of your tests.


716
00:23:49,326 --> 00:23:50,456
We actually recommend that you


717
00:23:50,456 --> 00:23:51,856
run them more than once in


718
00:23:51,856 --> 00:23:52,546
different ways.


719
00:23:53,756 --> 00:23:54,896
Now even if you don't modify


720
00:23:54,896 --> 00:23:56,486
your tests at all, if you


721
00:23:56,486 --> 00:23:58,266
leverage more of Xcode's build


722
00:23:58,266 --> 00:23:59,816
in testing options and its


723
00:23:59,816 --> 00:24:01,566
advance capabilities, you can


724
00:24:01,566 --> 00:24:02,976
get a lot more out of your tests


725
00:24:03,056 --> 00:24:04,186
and catch more bugs.


726
00:24:05,036 --> 00:24:06,116
Let's walk through an example to


727
00:24:06,116 --> 00:24:07,406
explain this.


728
00:24:07,996 --> 00:24:09,716
So, imagine that the app we've


729
00:24:09,716 --> 00:24:11,576
been working on is localized


730
00:24:11,576 --> 00:24:12,436
into several different


731
00:24:12,436 --> 00:24:12,996
languages.


732
00:24:13,896 --> 00:24:15,096
And now that we've learned how,


733
00:24:15,486 --> 00:24:16,786
we've written several UI tests


734
00:24:16,786 --> 00:24:17,616
for our app as well.


735
00:24:18,946 --> 00:24:21,156
Now, once we've done this, our


736
00:24:21,156 --> 00:24:22,746
test will most likely succeed


737
00:24:22,886 --> 00:24:23,706
when we run them in our


738
00:24:23,706 --> 00:24:25,326
development language, which in


739
00:24:25,326 --> 00:24:26,266
this case is English.


740
00:24:27,666 --> 00:24:29,166
But imagine that one day we


741
00:24:29,166 --> 00:24:30,906
discover a bug that only


742
00:24:30,906 --> 00:24:32,536
reproduces in certain languages


743
00:24:33,096 --> 00:24:34,516
where a localization string is


744
00:24:34,516 --> 00:24:35,656
missing for that language.


745
00:24:36,386 --> 00:24:37,706
It's using a placeholder string


746
00:24:37,706 --> 00:24:39,226
instead which breaks the UI


747
00:24:39,226 --> 00:24:39,586
layout.


748
00:24:40,856 --> 00:24:42,016
Now, once we're aware of this


749
00:24:42,076 --> 00:24:43,896
bug, we can adjust Xcode


750
00:24:43,896 --> 00:24:46,196
settings to manually run our UI


751
00:24:46,196 --> 00:24:47,336
tests in that language.


752
00:24:47,766 --> 00:24:49,576
And if we do that we might see a


753
00:24:49,576 --> 00:24:50,476
UI test failure.


754
00:24:51,336 --> 00:24:52,806
Of course if we don't, that's a


755
00:24:52,806 --> 00:24:54,476
great opportunity to write a new


756
00:24:54,476 --> 00:24:56,246
test that reproduces the issue


757
00:24:56,526 --> 00:24:58,156
and fails until we fix the bug.


758
00:24:59,526 --> 00:25:01,026
But once we fix that issue and


759
00:25:01,026 --> 00:25:02,096
we have a test covering it,


760
00:25:02,556 --> 00:25:04,066
ideally we should always run our


761
00:25:04,066 --> 00:25:05,896
tests in this language in


762
00:25:05,896 --> 00:25:06,906
addition to our development


763
00:25:06,906 --> 00:25:08,296
language to make sure it doesn't


764
00:25:08,296 --> 00:25:08,786
break again.


765
00:25:09,406 --> 00:25:12,946
So that's just one example but


766
00:25:12,946 --> 00:25:14,306
there are other cases too of


767
00:25:14,566 --> 00:25:16,246
bugs that might only be caught


768
00:25:16,446 --> 00:25:17,746
if you run your tests more than


769
00:25:17,746 --> 00:25:19,286
once in a different way each


770
00:25:19,286 --> 00:25:19,496
time.


771
00:25:20,776 --> 00:25:22,366
For example, you might choose to


772
00:25:22,366 --> 00:25:23,426
run your test in both


773
00:25:23,506 --> 00:25:25,536
alphabetical and random order


774
00:25:25,976 --> 00:25:27,006
since running your tests in a


775
00:25:27,006 --> 00:25:28,286
randomized order is really


776
00:25:28,286 --> 00:25:29,546
helpful for finding hidden


777
00:25:29,546 --> 00:25:30,776
dependencies between your test


778
00:25:30,776 --> 00:25:31,206
methods.


779
00:25:32,586 --> 00:25:33,656
Or you might want to run your


780
00:25:33,656 --> 00:25:34,806
tests using more than one


781
00:25:34,806 --> 00:25:37,616
sanitizer, such as both address


782
00:25:37,616 --> 00:25:39,166
sanitizer and thread sanitizer.


783
00:25:40,056 --> 00:25:40,936
And I'll explain a little bit


784
00:25:40,936 --> 00:25:41,806
more about what these are later


785
00:25:41,806 --> 00:25:42,786
on if you're not familiar.


786
00:25:43,906 --> 00:25:45,936
Or you could even vary arbitrary


787
00:25:45,936 --> 00:25:47,516
command line arguments or


788
00:25:47,516 --> 00:25:48,766
environment variables each time


789
00:25:48,766 --> 00:25:49,276
you test.


790
00:25:49,926 --> 00:25:51,086
And this can be helpful if the


791
00:25:51,086 --> 00:25:52,616
code that you're testing needs


792
00:25:52,646 --> 00:25:54,796
to modify or fake certain things


793
00:25:54,796 --> 00:25:55,956
when you're testing such as


794
00:25:56,266 --> 00:25:57,686
using a testing version of your


795
00:25:57,686 --> 00:25:59,606
web server or maybe mock data


796
00:26:00,346 --> 00:26:00,466
sets.


797
00:26:01,756 --> 00:26:03,636
Xcode allows you to configure


798
00:26:03,636 --> 00:26:05,176
various options about how your


799
00:26:05,176 --> 00:26:06,526
app is run using the scheme


800
00:26:06,526 --> 00:26:07,146
editor today.


801
00:26:08,256 --> 00:26:09,406
You can visit the Arguments,


802
00:26:09,526 --> 00:26:11,936
Options or Diagnostics tabs to


803
00:26:11,936 --> 00:26:13,556
control various things about how


804
00:26:13,556 --> 00:26:14,396
your app is launched.


805
00:26:15,686 --> 00:26:17,026
But this only allows you to run


806
00:26:17,026 --> 00:26:18,816
your app interactively a single


807
00:26:18,816 --> 00:26:20,206
time using whichever settings


808
00:26:20,206 --> 00:26:20,516
you pick.


809
00:26:21,256 --> 00:26:23,036
What we really like and what


810
00:26:23,036 --> 00:26:24,316
we've been talking about is the


811
00:26:24,316 --> 00:26:25,696
ability to run our tests


812
00:26:25,696 --> 00:26:26,596
multiple times.


813
00:26:27,246 --> 00:26:28,696
And for that, we're introducing


814
00:26:28,696 --> 00:26:30,766
a new feature in Xcode 11 called


815
00:26:31,816 --> 00:26:32,736
test plans.


816
00:26:32,866 --> 00:26:34,906
So test plans allows running


817
00:26:34,906 --> 00:26:36,546
your test more than once with


818
00:26:36,546 --> 00:26:37,166
different settings.


819
00:26:38,496 --> 00:26:39,826
Using a test plan, you can


820
00:26:39,826 --> 00:26:41,426
define all your testing variance


821
00:26:41,476 --> 00:26:42,336
in one place.


822
00:26:42,976 --> 00:26:43,946
And then, you can share that


823
00:26:43,946 --> 00:26:45,166
between multiple schemes.


824
00:26:46,266 --> 00:26:47,416
Now, if you've previously


825
00:26:47,416 --> 00:26:49,336
duplicated your schemes just so


826
00:26:49,336 --> 00:26:50,536
that you can run your test more


827
00:26:50,536 --> 00:26:52,316
than once, you might be able to


828
00:26:52,316 --> 00:26:54,456
undo that and consolidate your


829
00:26:54,456 --> 00:26:56,036
schemes back down to just one


830
00:26:56,116 --> 00:26:58,266
using a test plan.


831
00:26:58,476 --> 00:26:59,836
So test plans is supported in


832
00:26:59,836 --> 00:27:01,676
Xcode as well as in xcodebuild


833
00:27:01,876 --> 00:27:02,916
for use on continuous


834
00:27:02,916 --> 00:27:04,946
integration servers and in Xcode


835
00:27:04,946 --> 00:27:05,386
Server.


836
00:27:06,286 --> 00:27:07,846
And it's really easy to adopt in


837
00:27:07,846 --> 00:27:08,716
existing projects.


838
00:27:09,856 --> 00:27:11,016
So rather than keep talking


839
00:27:11,016 --> 00:27:12,126
about it, I'd like to go back to


840
00:27:12,126 --> 00:27:13,336
my demo project and show you how


841
00:27:13,336 --> 00:27:13,706
it works.


842
00:27:14,516 --> 00:27:19,500
[ Applause ]


843
00:27:26,756 --> 00:27:28,076
All right.


844
00:27:29,076 --> 00:27:30,236
So back in the project that I've


845
00:27:30,236 --> 00:27:31,856
been working on, I'll get


846
00:27:31,856 --> 00:27:33,016
started showing your test plans


847
00:27:33,076 --> 00:27:34,546
by clicking on the New Test Plan


848
00:27:34,546 --> 00:27:35,666
File in my project.


849
00:27:36,576 --> 00:27:37,726
So here, I can see all the


850
00:27:37,726 --> 00:27:39,166
details about my test plan.


851
00:27:40,256 --> 00:27:42,066
I can see all of the tests


852
00:27:42,426 --> 00:27:44,076
organized first by test target


853
00:27:44,946 --> 00:27:47,286
then by test class and then by


854
00:27:47,326 --> 00:27:48,576
all of the test method inside of


855
00:27:48,576 --> 00:27:49,126
each class.


856
00:27:50,396 --> 00:27:51,946
Now, using this view, I can see


857
00:27:51,946 --> 00:27:52,786
a few different things.


858
00:27:52,786 --> 00:27:54,546
I can see the full list of all


859
00:27:54,546 --> 00:27:56,796
of my tests, of course, or if I


860
00:27:56,796 --> 00:27:58,166
want to find a specific test, I


861
00:27:58,166 --> 00:27:59,456
can use it-- the filter field to


862
00:27:59,456 --> 00:27:59,976
search for it.


863
00:28:01,106 --> 00:28:02,706
Or if I ever need to temporarily


864
00:28:02,706 --> 00:28:04,286
disable a test for any reason;


865
00:28:04,716 --> 00:28:05,916
for instance, if this one is not


866
00:28:05,916 --> 00:28:07,046
working at the moment, I can


867
00:28:07,046 --> 00:28:08,516
just uncheck it in enabled


868
00:28:08,516 --> 00:28:08,896
column.


869
00:28:09,516 --> 00:28:11,866
I can also modify settings


870
00:28:11,866 --> 00:28:14,146
related to test targets by


871
00:28:14,146 --> 00:28:15,226
clicking on the options button


872
00:28:15,226 --> 00:28:15,586
on the right.


873
00:28:17,156 --> 00:28:18,546
And in this case, I happen to


874
00:28:18,546 --> 00:28:20,336
know that this test target is my


875
00:28:20,336 --> 00:28:21,776
UI test target and it would


876
00:28:21,776 --> 00:28:23,126
really benefit from running all


877
00:28:23,126 --> 00:28:24,516
of its test in parallel on


878
00:28:24,516 --> 00:28:26,406
multiple clone simulators so


879
00:28:26,406 --> 00:28:27,736
that they'll run a lot faster.


880
00:28:28,116 --> 00:28:29,396
So I'll do that by enabling that


881
00:28:29,716 --> 00:28:29,996
here.


882
00:28:29,996 --> 00:28:32,606
So next, I'll go to the


883
00:28:32,606 --> 00:28:34,236
Configurations tab of my test


884
00:28:34,236 --> 00:28:34,456
plan.


885
00:28:35,276 --> 00:28:36,586
And this is where I can control


886
00:28:36,816 --> 00:28:38,066
how my tests will run and how


887
00:28:38,066 --> 00:28:39,086
many times that they'll run.


888
00:28:40,216 --> 00:28:41,656
On the left, we have a list of


889
00:28:41,656 --> 00:28:42,376
what are called test


890
00:28:42,376 --> 00:28:43,136
configurations.


891
00:28:43,816 --> 00:28:45,076
And we also have an item at the


892
00:28:45,076 --> 00:28:46,736
top called Shared Settings.


893
00:28:47,236 --> 00:28:48,806
And the Shared Settings is where


894
00:28:48,806 --> 00:28:50,706
I can control options for-- that


895
00:28:50,706 --> 00:28:52,246
are common to all the times in


896
00:28:52,246 --> 00:28:53,006
my test run.


897
00:28:54,196 --> 00:28:56,466
And if we look at what all I can


898
00:28:56,466 --> 00:28:57,766
control in a test plan, there's


899
00:28:57,766 --> 00:28:58,816
a lot of things I can set.


900
00:28:59,936 --> 00:29:01,466
I can modify different arguments


901
00:29:01,466 --> 00:29:03,016
for how my tester should be


902
00:29:03,016 --> 00:29:03,396
launched.


903
00:29:03,446 --> 00:29:05,626
I can modify settings about


904
00:29:05,626 --> 00:29:09,556
localization or alter how long


905
00:29:09,556 --> 00:29:11,046
my UI testing screenshots are


906
00:29:11,046 --> 00:29:11,536
preserved.


907
00:29:12,676 --> 00:29:14,366
I can modify the test execution


908
00:29:14,366 --> 00:29:16,956
order, enable code coverage or


909
00:29:16,956 --> 00:29:18,376
enable things like run time


910
00:29:18,376 --> 00:29:19,566
sanitizers or memory


911
00:29:19,566 --> 00:29:20,346
diagnostics.


912
00:29:20,906 --> 00:29:23,416
Now, you may notice that some of


913
00:29:23,416 --> 00:29:25,256
the items here are in bold text


914
00:29:25,796 --> 00:29:26,686
such as the Environment


915
00:29:26,686 --> 00:29:27,396
Variables row.


916
00:29:28,256 --> 00:29:29,446
That signifies that I've given


917
00:29:29,446 --> 00:29:30,186
it a custom value.


918
00:29:30,186 --> 00:29:32,016
And here, I've given it a custom


919
00:29:32,016 --> 00:29:33,216
environment variable to run my


920
00:29:33,216 --> 00:29:33,666
test with.


921
00:29:34,996 --> 00:29:36,666
I've also customized my tests to


922
00:29:36,666 --> 00:29:37,966
always run them in a random


923
00:29:37,966 --> 00:29:40,076
order instead of alphabetical.


924
00:29:40,646 --> 00:29:43,336
So what I really like to do in


925
00:29:43,336 --> 00:29:45,456
this test plan is to modify it


926
00:29:45,626 --> 00:29:47,896
to run similar to the example I


927
00:29:47,896 --> 00:29:49,596
gave earlier so that it will run


928
00:29:49,596 --> 00:29:50,726
two times using different


929
00:29:50,726 --> 00:29:51,286
languages.


930
00:29:52,396 --> 00:29:53,966
I'll do that by adding a second


931
00:29:53,966 --> 00:29:54,626
configuration.


932
00:29:55,406 --> 00:29:56,396
And because I'm going run it in


933
00:29:56,396 --> 00:29:57,286
a different language, I'll give


934
00:29:57,286 --> 00:29:58,766
it a custom name of the language


935
00:29:58,766 --> 00:30:00,376
I'll use which is German.


936
00:30:01,106 --> 00:30:02,476
And while I'm here, I'll


937
00:30:02,476 --> 00:30:04,076
customize the name of the first


938
00:30:04,076 --> 00:30:05,876
configuration to US English.


939
00:30:05,876 --> 00:30:08,776
Now, in the US English


940
00:30:08,906 --> 00:30:10,506
configuration, I'm actually


941
00:30:10,506 --> 00:30:11,656
going to leave it as is with all


942
00:30:11,656 --> 00:30:13,506
of its default values plus the


943
00:30:13,506 --> 00:30:14,316
shared settings.


944
00:30:15,276 --> 00:30:16,976
But in the German configuration,


945
00:30:16,976 --> 00:30:18,476
I will customize the language


946
00:30:19,336 --> 00:30:20,766
and the region.


947
00:30:21,396 --> 00:30:25,066
And I want to point out that


948
00:30:25,106 --> 00:30:26,756
since I'm editing the-- a


949
00:30:26,756 --> 00:30:29,306
configuration right now, in the


950
00:30:29,436 --> 00:30:31,446
pop-up menu, I see an extra item


951
00:30:31,446 --> 00:30:33,326
at the top labeled Plan Default


952
00:30:33,326 --> 00:30:33,696
Value.


953
00:30:33,696 --> 00:30:35,656
And this item represents the


954
00:30:35,836 --> 00:30:37,856
value that it would be inherited


955
00:30:37,906 --> 00:30:39,036
from the shared settings level


956
00:30:39,036 --> 00:30:39,566
of the plan.


957
00:30:40,126 --> 00:30:41,466
So if I ever want to revert this


958
00:30:41,566 --> 00:30:42,986
customization and go back to the


959
00:30:43,036 --> 00:30:44,896
inherited value, I can just


960
00:30:45,326 --> 00:30:46,976
select this.


961
00:30:47,196 --> 00:30:47,716
All right.


962
00:30:47,716 --> 00:30:48,836
So, now I've configured my test


963
00:30:48,836 --> 00:30:49,566
plan how I want it.


964
00:30:50,256 --> 00:30:51,486
Next, I like to show you a few


965
00:30:51,486 --> 00:30:52,726
ways that you can use test plans


966
00:30:52,756 --> 00:30:55,736
throughout the rest of Xcode.


967
00:30:55,926 --> 00:30:57,596
I'll go to an event-- a unit


968
00:30:57,596 --> 00:30:59,166
test file I've been working on


969
00:30:59,166 --> 00:31:01,166
called EventTests, which tests


970
00:31:01,216 --> 00:31:02,476
the event struct in my app.


971
00:31:03,616 --> 00:31:04,726
And it's just got a couple of


972
00:31:04,726 --> 00:31:06,006
small unit test about the


973
00:31:06,006 --> 00:31:06,396
struct.


974
00:31:07,596 --> 00:31:09,956
And if I click on any of the


975
00:31:09,956 --> 00:31:12,376
test diamonds in this test file,


976
00:31:13,036 --> 00:31:14,296
because I've configured my test


977
00:31:14,296 --> 00:31:15,886
plan with two configurations, it


978
00:31:16,326 --> 00:31:18,296
will run my tests two times


979
00:31:18,296 --> 00:31:18,616
total.


980
00:31:19,516 --> 00:31:21,796
And that's great for situations


981
00:31:21,796 --> 00:31:22,956
when I want to run all of my


982
00:31:22,956 --> 00:31:24,526
tests especially on my


983
00:31:24,526 --> 00:31:25,786
continuous integration server.


984
00:31:26,516 --> 00:31:28,376
But as I'm developing my test, I


985
00:31:28,376 --> 00:31:30,046
may not run-- run them all those


986
00:31:30,046 --> 00:31:30,516
times.


987
00:31:31,196 --> 00:31:32,816
So I can choose to just run a


988
00:31:32,816 --> 00:31:34,936
single configuration by option


989
00:31:34,936 --> 00:31:36,616
clicking on the test diamond and


990
00:31:36,616 --> 00:31:38,586
here I see a menu with just so I


991
00:31:38,586 --> 00:31:39,806
could select one configuration.


992
00:31:41,666 --> 00:31:42,846
I can-- Yeah, thank you


993
00:31:43,346 --> 00:31:45,666
[applause].


994
00:31:46,166 --> 00:31:48,286
I can also do this in the test


995
00:31:48,286 --> 00:31:48,786
navigator.


996
00:31:49,386 --> 00:31:51,346
If I control click on any test


997
00:31:51,346 --> 00:31:52,656
in the test navigator, I see a


998
00:31:52,656 --> 00:31:54,946
similar menu allowing me to run


999
00:31:55,026 --> 00:31:56,536
either all the configurations or


1000
00:31:56,536 --> 00:31:56,886
just one.


1001
00:31:57,506 --> 00:32:00,146
And while I'm here, I also want


1002
00:32:00,146 --> 00:32:01,136
to mention that the test


1003
00:32:01,136 --> 00:32:03,336
navigator now shows the-- which


1004
00:32:03,406 --> 00:32:05,536
test plan is actually active at


1005
00:32:05,536 --> 00:32:05,936
the moment.


1006
00:32:06,516 --> 00:32:08,356
I only have one test plan in my


1007
00:32:08,356 --> 00:32:10,176
scheme but there can be multiple


1008
00:32:10,446 --> 00:32:11,186
and we'll talk about the


1009
00:32:11,186 --> 00:32:12,266
benefits of doing that a little


1010
00:32:12,266 --> 00:32:12,786
bit later on.


1011
00:32:12,976 --> 00:32:13,506
All right.


1012
00:32:14,536 --> 00:32:16,636
So now, I like to just run my


1013
00:32:16,706 --> 00:32:18,036
unit tests in all of the


1014
00:32:18,036 --> 00:32:18,756
configurations.


1015
00:32:20,166 --> 00:32:21,776
And now, we'll see Xcode quickly


1016
00:32:21,916 --> 00:32:24,186
build my entire project and then


1017
00:32:24,186 --> 00:32:26,206
run my test two times in the


1018
00:32:26,206 --> 00:32:26,726
simulator.


1019
00:32:27,506 --> 00:32:28,326
And it's already done.


1020
00:32:29,366 --> 00:32:30,406
So there, it looks like there


1021
00:32:30,406 --> 00:32:31,836
was at least one issue though.


1022
00:32:32,226 --> 00:32:33,516
So let's go see the details


1023
00:32:33,516 --> 00:32:34,066
about that.


1024
00:32:35,346 --> 00:32:36,336
I'll see those details by


1025
00:32:36,336 --> 00:32:37,746
clicking on the report navigator


1026
00:32:38,466 --> 00:32:39,806
and going to the most recent


1027
00:32:39,806 --> 00:32:40,526
test action.


1028
00:32:41,806 --> 00:32:44,776
So here, we can see that most of


1029
00:32:44,776 --> 00:32:45,726
my tests succeeded.


1030
00:32:46,136 --> 00:32:47,276
So they get the green check mark


1031
00:32:48,696 --> 00:32:51,006
and one of the tests had an


1032
00:32:51,006 --> 00:32:52,006
issue of some kind, so it has a


1033
00:32:52,006 --> 00:32:53,596
red icon with a dash through it.


1034
00:32:53,596 --> 00:32:55,916
And the test report is really


1035
00:32:55,916 --> 00:32:57,156
good at showing me all of the


1036
00:32:57,156 --> 00:32:58,406
details about everything that


1037
00:32:58,406 --> 00:32:59,996
happened in my testing session.


1038
00:32:59,996 --> 00:33:01,836
And if I expand this, I can


1039
00:33:01,836 --> 00:33:03,776
see-- it looks like this test


1040
00:33:03,776 --> 00:33:05,336
method succeeded in one


1041
00:33:05,336 --> 00:33:06,826
configuration and failed in


1042
00:33:06,826 --> 00:33:07,116
another.


1043
00:33:08,346 --> 00:33:09,626
And if I open it further, I can


1044
00:33:09,626 --> 00:33:10,876
see exactly the issue.


1045
00:33:11,596 --> 00:33:12,706
It looks like this test method


1046
00:33:13,166 --> 00:33:14,806
received English text but it was


1047
00:33:14,806 --> 00:33:15,996
expecting German text.


1048
00:33:16,746 --> 00:33:18,506
So that looks like a real issue


1049
00:33:18,506 --> 00:33:19,386
that I'll need to go back to


1050
00:33:19,386 --> 00:33:20,796
my-- either my app code or my


1051
00:33:20,796 --> 00:33:22,486
test and adjust and I'll do that


1052
00:33:22,486 --> 00:33:22,866
later on.


1053
00:33:23,906 --> 00:33:25,176
But before I wrap up, I want to


1054
00:33:25,176 --> 00:33:26,296
show you a few other


1055
00:33:26,296 --> 00:33:28,026
enhancements to the test report


1056
00:33:28,026 --> 00:33:28,226
here.


1057
00:33:29,046 --> 00:33:30,556
If I want to only see test


1058
00:33:30,556 --> 00:33:32,356
methods like this one which had


1059
00:33:32,356 --> 00:33:34,436
a mixed status between the two


1060
00:33:34,436 --> 00:33:36,346
configurations, I can do that


1061
00:33:36,346 --> 00:33:37,526
easily by just clicking on the


1062
00:33:37,526 --> 00:33:40,506
Mixed button in the scope bar.


1063
00:33:40,716 --> 00:33:42,806
Or if I only want to see the


1064
00:33:42,806 --> 00:33:44,086
results from a certain


1065
00:33:44,086 --> 00:33:45,856
configuration, I can just click


1066
00:33:46,076 --> 00:33:47,286
on the test configurations


1067
00:33:47,316 --> 00:33:48,986
popover and select one of the


1068
00:33:48,986 --> 00:33:49,796
configurations.


1069
00:33:53,536 --> 00:33:54,146
All right.


1070
00:33:54,246 --> 00:33:55,426
So that's a quick tour of test


1071
00:33:55,426 --> 00:33:56,206
plans in Xcode.


1072
00:33:56,436 --> 00:33:57,376
And now, let me just go back to


1073
00:33:57,376 --> 00:33:57,746
slides.


1074
00:33:59,516 --> 00:34:04,500
[ Applause ]


1075
00:34:06,876 --> 00:34:08,676
So, now that you've seen test


1076
00:34:08,676 --> 00:34:09,966
plans in action, I'd like to


1077
00:34:09,966 --> 00:34:11,226
mention a few details about how


1078
00:34:11,226 --> 00:34:11,646
it works.


1079
00:34:12,876 --> 00:34:14,976
A test plan file is really just


1080
00:34:14,976 --> 00:34:17,426
a JSON file with a .xctestplan


1081
00:34:17,496 --> 00:34:18,166
file extension.


1082
00:34:18,775 --> 00:34:20,446
And it contains all of your


1083
00:34:20,446 --> 00:34:22,735
tests to run as well as all of


1084
00:34:22,735 --> 00:34:24,416
the test configurations which


1085
00:34:24,416 --> 00:34:25,696
describe how your test will run.


1086
00:34:26,326 --> 00:34:28,315
Now, a test plan file is


1087
00:34:28,315 --> 00:34:29,666
included in your regular project


1088
00:34:29,666 --> 00:34:31,196
structure and it can be


1089
00:34:31,196 --> 00:34:32,436
referenced by one or more


1090
00:34:32,436 --> 00:34:33,016
schemes.


1091
00:34:33,565 --> 00:34:38,315
Now, a test configuration


1092
00:34:38,315 --> 00:34:40,266
meanwhile describes a single run


1093
00:34:40,436 --> 00:34:42,016
of your entire plan's test.


1094
00:34:42,766 --> 00:34:44,356
Now, each test configuration has


1095
00:34:44,356 --> 00:34:46,826
a customizable unique name and


1096
00:34:46,826 --> 00:34:48,235
it's a really good idea to give


1097
00:34:48,235 --> 00:34:49,466
each test configuration a


1098
00:34:49,466 --> 00:34:50,815
meaningful name for your project


1099
00:34:51,315 --> 00:34:52,286
since we'll see that name in


1100
00:34:52,286 --> 00:34:53,646
places like the test diamond


1101
00:34:53,646 --> 00:34:55,936
popover menu and the test report


1102
00:34:55,936 --> 00:34:56,436
like we saw.


1103
00:34:56,585 --> 00:34:59,516
Now, each test configuration


1104
00:34:59,516 --> 00:35:01,126
includes all of the options for


1105
00:35:01,126 --> 00:35:02,716
how to build and run your test.


1106
00:35:03,586 --> 00:35:05,316
And they can inherit any common


1107
00:35:05,316 --> 00:35:06,896
options from the shared settings


1108
00:35:06,896 --> 00:35:07,586
level of the plan.


1109
00:35:08,506 --> 00:35:09,836
So if you have any settings that


1110
00:35:09,836 --> 00:35:11,226
are the same each time you run


1111
00:35:11,226 --> 00:35:12,736
your tests, you can just define


1112
00:35:12,736 --> 00:35:13,886
them in one place and not need


1113
00:35:13,886 --> 00:35:14,656
to repeat yourself.


1114
00:35:15,206 --> 00:35:18,676
So if you're curious, here is


1115
00:35:18,676 --> 00:35:20,306
the full list of all the options


1116
00:35:20,306 --> 00:35:21,556
that you can set on each test


1117
00:35:21,556 --> 00:35:22,266
configuration.


1118
00:35:23,386 --> 00:35:24,746
And all this can be found in the


1119
00:35:24,746 --> 00:35:25,546
test plan editors


1120
00:35:25,546 --> 00:35:27,846
configuration's tab that I


1121
00:35:29,256 --> 00:35:29,376
showed.


1122
00:35:29,596 --> 00:35:31,106
So you might be wondering, how


1123
00:35:31,106 --> 00:35:32,386
can I begin using test plans.


1124
00:35:32,876 --> 00:35:34,886
If you have an existing project,


1125
00:35:35,036 --> 00:35:36,026
you'll first need to convert


1126
00:35:36,026 --> 00:35:38,176
it-- your scheme to use test


1127
00:35:38,176 --> 00:35:38,576
plans.


1128
00:35:39,566 --> 00:35:41,116
To do that, first, edit the


1129
00:35:41,116 --> 00:35:44,556
scheme then go to the schemes


1130
00:35:44,666 --> 00:35:45,456
test action.


1131
00:35:45,986 --> 00:35:48,056
And there, you'll see a button


1132
00:35:48,056 --> 00:35:49,626
labeled convert to use test


1133
00:35:49,626 --> 00:35:50,006
plans.


1134
00:35:51,446 --> 00:35:52,336
Clicking on this button will


1135
00:35:52,336 --> 00:35:53,876
show a sheet offering the


1136
00:35:53,876 --> 00:35:55,066
different ways that you can


1137
00:35:55,066 --> 00:35:55,876
convert the scheme.


1138
00:35:56,406 --> 00:35:58,646
Well, the first option is to


1139
00:35:58,646 --> 00:35:59,906
create a brand new test plan


1140
00:35:59,956 --> 00:36:01,886
file from the scheme's existing


1141
00:36:01,886 --> 00:36:02,366
settings.


1142
00:36:03,026 --> 00:36:04,676
If this is the first or the only


1143
00:36:04,676 --> 00:36:05,326
scheme that you're going to


1144
00:36:05,326 --> 00:36:06,556
convert, this is probably the


1145
00:36:06,556 --> 00:36:07,926
choice you want.


1146
00:36:08,696 --> 00:36:10,206
But another option is to choose


1147
00:36:10,206 --> 00:36:11,426
an existing test plan in a


1148
00:36:11,426 --> 00:36:11,826
project.


1149
00:36:12,916 --> 00:36:14,246
And if you choose this, it will


1150
00:36:14,246 --> 00:36:15,546
show a sheet allowing you to


1151
00:36:15,546 --> 00:36:16,836
pick an existing test plan in


1152
00:36:16,836 --> 00:36:17,496
the work space.


1153
00:36:18,546 --> 00:36:20,946
And this is a good option if the


1154
00:36:20,946 --> 00:36:22,876
scheme you're converting-- if


1155
00:36:22,876 --> 00:36:23,826
you've already converted one


1156
00:36:23,826 --> 00:36:25,286
scheme to use test plans and you


1157
00:36:25,286 --> 00:36:26,896
want a different scheme to share


1158
00:36:26,896 --> 00:36:27,596
that same plan.


1159
00:36:28,476 --> 00:36:29,596
And you can also use this if


1160
00:36:29,596 --> 00:36:30,886
you've created a test plan file


1161
00:36:30,886 --> 00:36:31,496
from scratch.


1162
00:36:32,056 --> 00:36:32,156
OK.


1163
00:36:33,856 --> 00:36:35,946
So now that we've covered what a


1164
00:36:35,946 --> 00:36:37,786
test plan is and you've seen how


1165
00:36:37,786 --> 00:36:39,416
to begin using one, I'd like to


1166
00:36:39,416 --> 00:36:40,946
offer a few potential ways that


1167
00:36:40,946 --> 00:36:42,326
you could use test plans in your


1168
00:36:42,326 --> 00:36:42,796
own project.


1169
00:36:43,366 --> 00:36:46,166
So here is one basic example of


1170
00:36:46,166 --> 00:36:46,896
a test plan that you could


1171
00:36:46,896 --> 00:36:47,256
create.


1172
00:36:48,626 --> 00:36:50,066
Each of the red boxes represents


1173
00:36:50,066 --> 00:36:51,606
one configuration in the plan.


1174
00:36:52,466 --> 00:36:53,416
And the first one has the


1175
00:36:53,416 --> 00:36:55,136
address sanitizer enabled and


1176
00:36:55,136 --> 00:36:56,306
the other has thread sanitizer.


1177
00:36:56,306 --> 00:36:58,346
Now, if you're not familiar with


1178
00:36:58,346 --> 00:37:00,266
these, sanitizers are tools


1179
00:37:00,266 --> 00:37:02,406
built into Xcode that instrument


1180
00:37:02,406 --> 00:37:03,916
your code and help identify bugs


1181
00:37:03,916 --> 00:37:04,746
that can be really hard


1182
00:37:04,746 --> 00:37:05,686
reproduce manually.


1183
00:37:06,776 --> 00:37:08,496
And some sanitizers like these


1184
00:37:08,496 --> 00:37:09,876
two can all be combined with


1185
00:37:09,876 --> 00:37:10,246
each other.


1186
00:37:10,896 --> 00:37:12,886
But if you construct a test plan


1187
00:37:12,886 --> 00:37:14,286
this way, you could still run


1188
00:37:14,286 --> 00:37:15,586
your test using both of them and


1189
00:37:15,586 --> 00:37:16,716
get all of their benefits.


1190
00:37:17,286 --> 00:37:20,636
Now, to get even more value out


1191
00:37:20,636 --> 00:37:22,176
of this test plan, if your


1192
00:37:22,176 --> 00:37:23,476
project includes C or


1193
00:37:23,476 --> 00:37:25,586
Objective-C code, you can expand


1194
00:37:25,586 --> 00:37:26,656
the plan by enabling the


1195
00:37:26,656 --> 00:37:28,236
undefined behavior sanitizer in


1196
00:37:28,236 --> 00:37:30,266
each of the configurations as


1197
00:37:30,896 --> 00:37:31,016
well.


1198
00:37:31,216 --> 00:37:32,296
So you might look at this and


1199
00:37:32,296 --> 00:37:33,206
notice that the undefined


1200
00:37:33,206 --> 00:37:35,136
behavior sanitizer is set in two


1201
00:37:35,136 --> 00:37:35,746
places.


1202
00:37:35,986 --> 00:37:37,206
It's repeated in each of the


1203
00:37:37,206 --> 00:37:38,126
configurations.


1204
00:37:38,546 --> 00:37:41,166
This would be a great setting to


1205
00:37:41,166 --> 00:37:42,626
move up to the shared settings


1206
00:37:42,626 --> 00:37:43,856
level of the plan instead.


1207
00:37:44,886 --> 00:37:45,746
And then, it will be


1208
00:37:45,746 --> 00:37:47,646
automatically inherited by every


1209
00:37:47,646 --> 00:37:50,356
configuration in the plan.


1210
00:37:50,506 --> 00:37:51,686
Now, one thing to be aware of is


1211
00:37:51,686 --> 00:37:52,796
that if you configure a test


1212
00:37:52,796 --> 00:37:54,436
plan like this with mutually


1213
00:37:54,436 --> 00:37:56,936
incompatible sanitizers is that


1214
00:37:56,936 --> 00:37:58,686
if you run both configurations


1215
00:37:58,686 --> 00:38:00,526
in the plan, Xcode will need to


1216
00:38:00,526 --> 00:38:02,146
build your project twice, once


1217
00:38:02,146 --> 00:38:03,366
for each set of sanitizers.


1218
00:38:04,656 --> 00:38:06,016
This is ideal for continuous


1219
00:38:06,016 --> 00:38:07,926
integration environments where


1220
00:38:08,036 --> 00:38:09,186
you don't mind your test taking


1221
00:38:09,186 --> 00:38:10,346
a little bit longer to build


1222
00:38:10,626 --> 00:38:11,816
since they're performing more


1223
00:38:11,926 --> 00:38:12,606
thorough testing.


1224
00:38:13,306 --> 00:38:16,896
But test plan isn't just about


1225
00:38:16,896 --> 00:38:18,176
picking different sanitizers.


1226
00:38:18,876 --> 00:38:20,076
As I showed in my demo earlier,


1227
00:38:20,306 --> 00:38:21,656
you can also configure a plan


1228
00:38:21,656 --> 00:38:23,126
with configurations representing


1229
00:38:23,126 --> 00:38:24,696
different languages or locales.


1230
00:38:25,706 --> 00:38:27,136
For example, I've picked the US,


1231
00:38:27,516 --> 00:38:29,116
South Korea, and Italy here and


1232
00:38:29,656 --> 00:38:30,926
there is no limit on the number


1233
00:38:30,926 --> 00:38:32,086
of configurations you can have.


1234
00:38:32,206 --> 00:38:35,106
Now, if you configure a plan


1235
00:38:35,106 --> 00:38:36,736
like this, you could use it to


1236
00:38:36,736 --> 00:38:37,876
run your UI tests.


1237
00:38:38,276 --> 00:38:39,526
And then, you could collect the


1238
00:38:39,526 --> 00:38:41,286
screenshots from those tests by


1239
00:38:41,286 --> 00:38:42,736
enabling the new localization


1240
00:38:42,736 --> 00:38:44,186
screenshots feature in Shared


1241
00:38:44,216 --> 00:38:44,646
Settings.


1242
00:38:45,956 --> 00:38:47,336
Localization screenshots is a


1243
00:38:47,336 --> 00:38:49,176
new feature in Xcode 11, which


1244
00:38:49,176 --> 00:38:50,786
will cause your UI tests to


1245
00:38:50,786 --> 00:38:51,776
preserve all of their


1246
00:38:51,776 --> 00:38:53,776
screenshots even for test that


1247
00:38:53,776 --> 00:38:54,196
succeed.


1248
00:38:54,946 --> 00:38:56,446
And it will gather data about


1249
00:38:56,446 --> 00:38:57,486
the localized string that your


1250
00:38:57,486 --> 00:38:57,966
app uses.


1251
00:38:59,486 --> 00:39:00,546
So this allows you to reference


1252
00:39:00,546 --> 00:39:02,176
the screenshot for context when


1253
00:39:02,176 --> 00:39:04,316
you're localizing your app or if


1254
00:39:04,316 --> 00:39:05,066
you've already finished


1255
00:39:05,066 --> 00:39:06,436
localizing, you could use the


1256
00:39:06,436 --> 00:39:07,536
screenshots in your app store


1257
00:39:07,536 --> 00:39:08,546
listings around the world.


1258
00:39:10,516 --> 00:39:14,976
[ Applause ]


1259
00:39:15,476 --> 00:39:16,626
Now for more information about


1260
00:39:16,626 --> 00:39:17,866
this and other localization


1261
00:39:17,866 --> 00:39:19,426
enhancements this year, check


1262
00:39:19,426 --> 00:39:21,156
out our the great-- Creating


1263
00:39:21,156 --> 00:39:22,766
Great Localized Experiences


1264
00:39:22,766 --> 00:39:24,296
session on the WWDC website.


1265
00:39:24,866 --> 00:39:27,716
Now, finally, I'd like to


1266
00:39:27,716 --> 00:39:28,966
emphasize that you can mix and


1267
00:39:28,966 --> 00:39:30,176
match these settings in a test


1268
00:39:30,176 --> 00:39:31,556
plan however it makes sense for


1269
00:39:31,556 --> 00:39:32,366
your project.


1270
00:39:33,406 --> 00:39:34,876
For example, you could construct


1271
00:39:34,876 --> 00:39:36,466
a test plan like this one with


1272
00:39:36,566 --> 00:39:37,596
three very different


1273
00:39:37,596 --> 00:39:38,446
configurations.


1274
00:39:39,796 --> 00:39:41,306
The first one focuses on memory


1275
00:39:41,306 --> 00:39:42,866
safety, and so it has the


1276
00:39:42,866 --> 00:39:44,776
Address Sanitizer and the Zombie


1277
00:39:44,776 --> 00:39:45,896
Objects memory setting.


1278
00:39:46,556 --> 00:39:48,926
The second one is all about


1279
00:39:48,926 --> 00:39:50,726
concurrency and it's got the


1280
00:39:50,816 --> 00:39:52,776
Thread Sanitizer, the Undefined


1281
00:39:52,776 --> 00:39:55,006
Behavior Sanitizer, and it runs


1282
00:39:55,006 --> 00:39:56,276
tests in a random order each


1283
00:39:56,276 --> 00:39:56,506
time.


1284
00:39:57,166 --> 00:39:59,616
Then the last configuration is


1285
00:39:59,616 --> 00:40:00,776
set up to collect extra


1286
00:40:00,776 --> 00:40:02,346
diagnostics while running test.


1287
00:40:03,136 --> 00:40:04,246
And it does this by setting a


1288
00:40:04,246 --> 00:40:06,056
custom environment variable that


1289
00:40:06,126 --> 00:40:07,446
the code being tested knows


1290
00:40:07,446 --> 00:40:08,956
about in order to trigger more


1291
00:40:08,956 --> 00:40:09,616
log collection.


1292
00:40:10,556 --> 00:40:12,326
And it also enables the option


1293
00:40:12,326 --> 00:40:13,786
to keep all custom file


1294
00:40:13,786 --> 00:40:15,366
attachments even for tests that


1295
00:40:15,366 --> 00:40:15,796
succeed.


1296
00:40:16,366 --> 00:40:18,646
So this is a fairly complex


1297
00:40:18,646 --> 00:40:20,406
example but hopefully it shows


1298
00:40:20,406 --> 00:40:21,716
the power and the flexibility of


1299
00:40:21,716 --> 00:40:23,056
a test plan to run your tests


1300
00:40:23,056 --> 00:40:24,486
however you would like.


1301
00:40:26,176 --> 00:40:27,826
So that's test plans, a new


1302
00:40:27,826 --> 00:40:29,966
feature in Xcode 11 to get more


1303
00:40:29,966 --> 00:40:31,696
value out of your tests by


1304
00:40:31,696 --> 00:40:32,876
running them multiple times in


1305
00:40:32,876 --> 00:40:33,506
different ways.


1306
00:40:34,446 --> 00:40:35,656
Now, I'll hand it over to Ethan


1307
00:40:35,826 --> 00:40:37,086
to share some ways you can use


1308
00:40:37,086 --> 00:40:37,826
Xcode for continuous


1309
00:40:37,826 --> 00:40:38,346
integration.


1310
00:40:39,516 --> 00:40:45,456
[ Applause ]


1311
00:40:45,956 --> 00:40:46,706
>> Thanks, Stuart.


1312
00:40:47,106 --> 00:40:48,626
To leverage the full power of


1313
00:40:48,626 --> 00:40:50,346
test plans, you likely want to


1314
00:40:50,346 --> 00:40:51,696
run your tests under many


1315
00:40:51,696 --> 00:40:52,906
different configurations.


1316
00:40:53,456 --> 00:40:55,166
A great place to do this is in


1317
00:40:55,166 --> 00:40:56,736
continuous integration which


1318
00:40:56,766 --> 00:40:58,066
automates the process of


1319
00:40:58,126 --> 00:41:00,106
building and running your tests.


1320
00:41:00,236 --> 00:41:01,806
While at your desk, you focus on


1321
00:41:01,806 --> 00:41:03,116
getting individual tests to


1322
00:41:03,116 --> 00:41:05,226
pass, continuous integration


1323
00:41:05,226 --> 00:41:06,926
runs all of your tests across


1324
00:41:06,926 --> 00:41:08,576
all of your devices giving you


1325
00:41:08,576 --> 00:41:09,556
maximum coverage.


1326
00:41:10,636 --> 00:41:11,586
When it comes to continuous


1327
00:41:11,586 --> 00:41:13,166
integration with Xcode, there


1328
00:41:13,166 --> 00:41:14,686
are two primary solutions to


1329
00:41:14,686 --> 00:41:15,206
choose from.


1330
00:41:15,896 --> 00:41:17,886
The first is Xcode Server which


1331
00:41:17,886 --> 00:41:19,486
is built directly into Xcode.


1332
00:41:20,296 --> 00:41:21,556
With Xcode Server, you can


1333
00:41:21,586 --> 00:41:23,396
easily set a box to build and


1334
00:41:23,396 --> 00:41:24,656
test your app with minimal


1335
00:41:24,656 --> 00:41:25,516
configuration.


1336
00:41:26,326 --> 00:41:28,176
The second option is to build


1337
00:41:28,176 --> 00:41:29,736
your own continuous integration


1338
00:41:29,736 --> 00:41:30,066
setup.


1339
00:41:30,936 --> 00:41:32,576
While more advanced, this option


1340
00:41:32,606 --> 00:41:34,236
is ideal if you have custom


1341
00:41:34,236 --> 00:41:35,656
requirements or need to


1342
00:41:35,656 --> 00:41:36,736
integrate with existing


1343
00:41:36,736 --> 00:41:37,466
infrastructure.


1344
00:41:38,246 --> 00:41:39,876
If you do require a custom


1345
00:41:39,876 --> 00:41:41,036
setup, you're in luck.


1346
00:41:41,826 --> 00:41:43,416
Xcode comes with powerful tools


1347
00:41:43,416 --> 00:41:44,696
that you can use to build your


1348
00:41:44,696 --> 00:41:45,546
own automation.


1349
00:41:46,156 --> 00:41:48,966
In this section of the talk,


1350
00:41:49,186 --> 00:41:50,566
we're going to focus on option


1351
00:41:50,566 --> 00:41:52,056
two and learn how to build a


1352
00:41:52,056 --> 00:41:53,586
completely custom continuous


1353
00:41:53,586 --> 00:41:54,636
integration pipeline.


1354
00:41:55,166 --> 00:41:57,326
End to end, our pipeline will be


1355
00:41:57,326 --> 00:41:59,516
composed of four steps involving


1356
00:41:59,516 --> 00:42:00,996
the use of different tools at


1357
00:42:00,996 --> 00:42:01,456
each step.


1358
00:42:02,826 --> 00:42:05,056
In step number one, we'll build


1359
00:42:05,056 --> 00:42:06,916
our tests on a dedicated builder


1360
00:42:06,916 --> 00:42:07,376
machine.


1361
00:42:07,976 --> 00:42:11,046
In step two, we'll take the


1362
00:42:11,046 --> 00:42:12,586
tests that were built and


1363
00:42:12,586 --> 00:42:13,956
execute them on a suite of


1364
00:42:13,956 --> 00:42:14,506
devices.


1365
00:42:15,536 --> 00:42:16,966
These devices will be connected


1366
00:42:16,966 --> 00:42:18,306
to a second machine that we've


1367
00:42:18,306 --> 00:42:21,526
set aside for running the tests.


1368
00:42:21,676 --> 00:42:23,246
The first two tests will produce


1369
00:42:23,246 --> 00:42:24,996
a set of build and test results.


1370
00:42:25,886 --> 00:42:27,206
These results will serve as the


1371
00:42:27,206 --> 00:42:30,016
source of data for our next two


1372
00:42:31,216 --> 00:42:31,376
steps.


1373
00:42:31,546 --> 00:42:33,156
In step three, we'll mind the


1374
00:42:33,156 --> 00:42:34,326
build and test results for


1375
00:42:34,326 --> 00:42:36,336
failures in order to populate


1376
00:42:36,336 --> 00:42:37,576
our favorite issue tracker.


1377
00:42:39,486 --> 00:42:41,736
And finally in step four, we'll


1378
00:42:41,736 --> 00:42:42,886
track our code coverage over


1379
00:42:42,886 --> 00:42:44,586
time to get a sense of how we're


1380
00:42:44,586 --> 00:42:46,176
doing in terms of our overall


1381
00:42:47,536 --> 00:42:49,436
test coverage.


1382
00:42:50,066 --> 00:42:51,496
Let's start with the first two


1383
00:42:51,496 --> 00:42:53,136
steps-- building and running our


1384
00:42:54,226 --> 00:42:54,386
tests.


1385
00:42:54,996 --> 00:42:56,866
For these tasks, we'll be using


1386
00:42:56,866 --> 00:42:57,616
xcodebuild.


1387
00:42:58,286 --> 00:42:59,746
Xcodebuild is the command line


1388
00:42:59,746 --> 00:43:01,386
interface to Xcode that will


1389
00:43:01,386 --> 00:43:02,946
power the core of a workflow.


1390
00:43:03,776 --> 00:43:05,566
Behind xcodebuild, sits the


1391
00:43:05,566 --> 00:43:07,886
xcodebuild system and the XCTest


1392
00:43:08,026 --> 00:43:09,646
testing harness.


1393
00:43:10,236 --> 00:43:12,386
With xcodebuild, there are two


1394
00:43:12,386 --> 00:43:13,436
ways to run tests.


1395
00:43:14,276 --> 00:43:15,946
The first is to build and test


1396
00:43:15,946 --> 00:43:17,106
in the same invocation.


1397
00:43:18,086 --> 00:43:19,476
For this, you use the test


1398
00:43:19,476 --> 00:43:21,146
action, passing in the name of


1399
00:43:21,146 --> 00:43:22,336
the project and scheme you want


1400
00:43:22,336 --> 00:43:23,936
to test, as well as the


1401
00:43:23,936 --> 00:43:25,786
destination on which tests


1402
00:43:26,536 --> 00:43:27,876
should be run.


1403
00:43:28,526 --> 00:43:30,076
The second is to build and then


1404
00:43:30,836 --> 00:43:30,956
test.


1405
00:43:31,076 --> 00:43:32,196
This puts up the actions of


1406
00:43:32,196 --> 00:43:33,696
building and testing into two


1407
00:43:33,696 --> 00:43:34,936
separate invocations of


1408
00:43:34,936 --> 00:43:35,606
xcodebuild.


1409
00:43:36,626 --> 00:43:38,096
One of the primary use cases of


1410
00:43:38,096 --> 00:43:39,886
this functionality is to have


1411
00:43:39,926 --> 00:43:41,096
one machine dedicated to


1412
00:43:41,096 --> 00:43:42,846
building and another dedicated


1413
00:43:42,846 --> 00:43:44,376
to running tests, which is the


1414
00:43:44,376 --> 00:43:45,476
workflow that we're trying to


1415
00:43:45,476 --> 00:43:45,796
achieve.


1416
00:43:47,056 --> 00:43:48,616
To accomplish this, you first


1417
00:43:48,616 --> 00:43:49,846
invoke the build for testing


1418
00:43:49,846 --> 00:43:51,526
action passing in the same


1419
00:43:51,526 --> 00:43:52,766
parameters as before.


1420
00:43:53,886 --> 00:43:55,376
This will produce both the build


1421
00:43:55,376 --> 00:43:56,806
products that are necessary for


1422
00:43:56,806 --> 00:43:59,066
testing, as well as an xctestrun


1423
00:43:59,066 --> 00:43:59,496
file.


1424
00:44:00,446 --> 00:44:02,476
The xctestrun file is a manifest


1425
00:44:02,636 --> 00:44:03,586
that describes the build


1426
00:44:03,586 --> 00:44:05,046
products and instructs


1427
00:44:05,046 --> 00:44:07,586
xcodebuild what to do at test


1428
00:44:08,276 --> 00:44:08,456
time.


1429
00:44:09,226 --> 00:44:10,796
Next, invoke the test without


1430
00:44:10,796 --> 00:44:12,936
building action, passing in the


1431
00:44:12,936 --> 00:44:14,366
xctestrun file that was produced


1432
00:44:14,366 --> 00:44:14,806
earlier.


1433
00:44:16,116 --> 00:44:17,106
This will cause your test to


1434
00:44:17,106 --> 00:44:18,106
actually execute.


1435
00:44:18,616 --> 00:44:21,966
It's actually possible to craft


1436
00:44:21,966 --> 00:44:24,326
your own xctestrun files giving


1437
00:44:24,326 --> 00:44:25,516
you more control over what


1438
00:44:25,516 --> 00:44:26,746
happens during test without


1439
00:44:26,746 --> 00:44:27,236
building.


1440
00:44:28,156 --> 00:44:29,376
If you like to learn more about


1441
00:44:29,376 --> 00:44:31,066
the format of these files, check


1442
00:44:31,066 --> 00:44:32,046
out the man page.


1443
00:44:32,996 --> 00:44:34,476
Also, note that the format can


1444
00:44:34,476 --> 00:44:36,056
change between Xcode releases.


1445
00:44:36,816 --> 00:44:38,476
In general, use the same version


1446
00:44:38,476 --> 00:44:40,216
of Xcode, both for building and


1447
00:44:40,216 --> 00:44:43,596
running your tests.


1448
00:44:43,746 --> 00:44:44,926
Speaking of running tests,


1449
00:44:45,306 --> 00:44:47,186
xcodebuild supports testing on


1450
00:44:47,186 --> 00:44:48,966
multiple devices or simulators


1451
00:44:48,966 --> 00:44:49,756
at the same time.


1452
00:44:50,826 --> 00:44:52,216
This can give you maximum


1453
00:44:52,216 --> 00:44:53,756
coverage across a variety of


1454
00:44:53,756 --> 00:44:55,116
device types and sizes.


1455
00:44:56,046 --> 00:44:57,446
And this is especially useful


1456
00:44:57,446 --> 00:44:59,496
for UI tests since your app's UI


1457
00:44:59,496 --> 00:45:01,286
likely varies according to size


1458
00:45:01,326 --> 00:45:01,606
class.


1459
00:45:03,206 --> 00:45:04,196
If you'd like to learn more


1460
00:45:04,196 --> 00:45:05,806
about xcodebuild support for


1461
00:45:05,806 --> 00:45:07,826
multiple destinations, check out


1462
00:45:07,826 --> 00:45:08,836
the What's New in Testing


1463
00:45:08,836 --> 00:45:12,626
session from 2018.


1464
00:45:13,196 --> 00:45:14,666
So far we've covered the basics


1465
00:45:14,666 --> 00:45:16,176
of xcodebuild, how to build and


1466
00:45:16,176 --> 00:45:16,986
run our tests.


1467
00:45:17,406 --> 00:45:18,476
Now I'd like to talk about a


1468
00:45:18,476 --> 00:45:19,976
couple options that are specific


1469
00:45:20,006 --> 00:45:20,816
to test plans.


1470
00:45:22,016 --> 00:45:23,316
If you have a scheme with


1471
00:45:23,316 --> 00:45:24,966
multiple test plans, you can


1472
00:45:24,966 --> 00:45:26,716
list them all using the show


1473
00:45:26,716 --> 00:45:27,746
test plans option.


1474
00:45:28,306 --> 00:45:30,726
Having a scheme with multiple


1475
00:45:30,726 --> 00:45:32,246
test plans opens up some


1476
00:45:32,246 --> 00:45:33,206
compelling workflows.


1477
00:45:33,766 --> 00:45:34,906
For example, you could have a


1478
00:45:34,906 --> 00:45:36,146
long running test plan


1479
00:45:36,246 --> 00:45:37,386
containing your full suite of


1480
00:45:37,386 --> 00:45:39,346
tests, and a short running test


1481
00:45:39,346 --> 00:45:40,756
plan with a handful of smoke


1482
00:45:40,796 --> 00:45:41,076
tests.


1483
00:45:42,286 --> 00:45:43,206
If you do decide to have


1484
00:45:43,206 --> 00:45:45,006
multiple, one of those test


1485
00:45:45,006 --> 00:45:46,476
plans is considered the default


1486
00:45:46,876 --> 00:45:48,076
which you can configure in the


1487
00:45:48,076 --> 00:45:49,256
test action of the scheme


1488
00:45:49,256 --> 00:45:49,686
editor.


1489
00:45:50,286 --> 00:45:52,066
The default plan is the one that


1490
00:45:52,066 --> 00:45:53,476
xcodebuild will run unless you


1491
00:45:53,476 --> 00:45:56,736
tell it otherwise.


1492
00:45:56,886 --> 00:45:58,616
To overwrite the default test


1493
00:45:58,616 --> 00:46:00,656
plan, use the test plan option


1494
00:46:01,156 --> 00:46:02,246
passing in the name of the


1495
00:46:02,296 --> 00:46:04,596
particular plan that you want to


1496
00:46:06,176 --> 00:46:06,516
run.


1497
00:46:07,296 --> 00:46:08,146
Armed with all that we've


1498
00:46:08,146 --> 00:46:10,006
learned about xcodebuild, we can


1499
00:46:10,006 --> 00:46:10,876
start to fill in some of the


1500
00:46:10,876 --> 00:46:11,986
gaps in our pipeline.


1501
00:46:13,446 --> 00:46:14,436
Starting with the builder


1502
00:46:14,436 --> 00:46:16,556
machine, we'll use xcodebuild


1503
00:46:16,556 --> 00:46:18,236
build-for-testing to produce the


1504
00:46:18,236 --> 00:46:19,816
build products and xctestrun


1505
00:46:19,816 --> 00:46:21,226
file that we need.


1506
00:46:21,796 --> 00:46:23,256
This will get passed to the


1507
00:46:23,256 --> 00:46:25,056
runner machine, which invokes


1508
00:46:25,096 --> 00:46:26,926
xcodebuild test-without-building


1509
00:46:27,196 --> 00:46:28,776
to execute the test on our suite


1510
00:46:28,776 --> 00:46:29,396
of devices.


1511
00:46:30,096 --> 00:46:33,546
The product of these two steps


1512
00:46:33,666 --> 00:46:34,846
is the build and test results,


1513
00:46:35,456 --> 00:46:36,396
which brings me to the next


1514
00:46:36,396 --> 00:46:37,386
thing I'd like to talk about,


1515
00:46:38,376 --> 00:46:40,036
and that is result bundles.


1516
00:46:40,716 --> 00:46:41,976
We have some really exciting


1517
00:46:41,976 --> 00:46:42,916
stuff to share with you about


1518
00:46:42,916 --> 00:46:45,556
result bundles this year.


1519
00:46:45,676 --> 00:46:47,796
First off, what is a result


1520
00:46:47,796 --> 00:46:48,136
bundle?


1521
00:46:48,816 --> 00:46:50,276
A result bundle is a file


1522
00:46:50,276 --> 00:46:52,116
produced by Xcode containing


1523
00:46:52,116 --> 00:46:53,646
structured data describing the


1524
00:46:53,646 --> 00:46:54,846
outcome of building and running


1525
00:46:54,846 --> 00:46:55,306
your tests.


1526
00:46:56,616 --> 00:46:58,216
It contains assets such as the


1527
00:46:58,216 --> 00:46:59,836
build log, revealing which


1528
00:46:59,836 --> 00:47:01,116
targets and source files were


1529
00:47:01,116 --> 00:47:01,686
compiled.


1530
00:47:03,136 --> 00:47:04,596
The test report showing you


1531
00:47:04,596 --> 00:47:06,016
which test passed and failed.


1532
00:47:06,656 --> 00:47:08,866
The code coverage report


1533
00:47:09,076 --> 00:47:10,596
reviewing which code was covered


1534
00:47:10,596 --> 00:47:13,956
by the test ran, and any test


1535
00:47:13,956 --> 00:47:15,556
attachments that were created by


1536
00:47:15,556 --> 00:47:17,316
the tests using XC test


1537
00:47:17,316 --> 00:47:18,476
attachment APIs.


1538
00:47:19,146 --> 00:47:22,286
So how do you produce a result


1539
00:47:22,286 --> 00:47:22,676
bundle?


1540
00:47:23,326 --> 00:47:24,826
Just pass the result bundle path


1541
00:47:24,826 --> 00:47:26,176
option to xcodebuild.


1542
00:47:26,706 --> 00:47:30,196
Now that we know how to produce


1543
00:47:30,196 --> 00:47:31,856
a result bundle, we can fill in


1544
00:47:31,856 --> 00:47:32,986
another missing piece in our


1545
00:47:32,986 --> 00:47:33,466
story.


1546
00:47:34,316 --> 00:47:35,946
We'll add the result bundle path


1547
00:47:35,946 --> 00:47:37,256
option to our Xcode build


1548
00:47:37,256 --> 00:47:39,216
invocation to start producing


1549
00:47:39,216 --> 00:47:40,436
those build and test results.


1550
00:47:40,496 --> 00:47:44,486
Now, result bundles have been


1551
00:47:44,486 --> 00:47:46,366
around for a while but in Xcode


1552
00:47:46,366 --> 00:47:48,066
11 we completely redesigned the


1553
00:47:48,066 --> 00:47:49,566
underlying file format, which


1554
00:47:49,566 --> 00:47:50,646
has come with several benefits.


1555
00:47:52,096 --> 00:47:53,976
First, the new format is highly


1556
00:47:53,976 --> 00:47:55,436
optimized to be efficient on


1557
00:47:55,436 --> 00:47:55,786
disc.


1558
00:47:56,576 --> 00:47:57,816
In our own testing, we found


1559
00:47:57,816 --> 00:47:59,226
result bundles to be four times


1560
00:47:59,226 --> 00:48:00,756
smaller on average compared to


1561
00:48:00,756 --> 00:48:01,496
the previous format.


1562
00:48:02,646 --> 00:48:03,826
This is especially useful in


1563
00:48:03,826 --> 00:48:05,496
continuous integration where


1564
00:48:05,496 --> 00:48:06,836
result bundles can be generated


1565
00:48:06,836 --> 00:48:10,166
and stored at a very high rate.


1566
00:48:10,356 --> 00:48:11,876
Second, it's now possible to


1567
00:48:11,876 --> 00:48:13,406
open result bundles directly in


1568
00:48:13,516 --> 00:48:15,496
Xcode allowing you to easily dig


1569
00:48:15,496 --> 00:48:16,416
into the results of an


1570
00:48:16,416 --> 00:48:16,986
integration.


1571
00:48:17,566 --> 00:48:20,596
And third, for the first time we


1572
00:48:20,596 --> 00:48:21,476
are providing a way to


1573
00:48:21,536 --> 00:48:22,836
programmatically access the


1574
00:48:22,836 --> 00:48:24,046
contents of the result bundle


1575
00:48:24,406 --> 00:48:25,506
which we will be leveraging in


1576
00:48:25,506 --> 00:48:26,926
our own continuous integration


1577
00:48:27,586 --> 00:48:27,746
setup.


1578
00:48:29,476 --> 00:48:30,856
To open a result bundle in


1579
00:48:30,956 --> 00:48:32,616
Xcode, simply double click the


1580
00:48:32,616 --> 00:48:34,506
file to view its contents using


1581
00:48:34,506 --> 00:48:35,396
the UI that you're already


1582
00:48:35,446 --> 00:48:35,936
familiar with.


1583
00:48:36,976 --> 00:48:38,596
See failing and passing test in


1584
00:48:38,596 --> 00:48:40,206
the test report, dig into the


1585
00:48:40,206 --> 00:48:41,656
build failures in the build log,


1586
00:48:42,116 --> 00:48:43,066
and see how you're doing on


1587
00:48:43,066 --> 00:48:44,576
coverage in the code coverage


1588
00:48:44,976 --> 00:48:45,166
report.


1589
00:48:46,516 --> 00:48:50,966
[ Applause ]


1590
00:48:51,466 --> 00:48:51,846
Thank you.


1591
00:48:52,506 --> 00:48:54,096
To access the result bundle's


1592
00:48:54,096 --> 00:48:55,716
contents programmatically, you


1593
00:48:55,716 --> 00:48:57,076
can use a new command line tool


1594
00:48:57,076 --> 00:48:59,066
in Xcode 11 called xcresulttool.


1595
00:49:00,666 --> 00:49:02,336
Xcresulttool gives you complete


1596
00:49:02,336 --> 00:49:03,756
access to the structure data


1597
00:49:03,756 --> 00:49:04,986
contained in the result bundle.


1598
00:49:06,236 --> 00:49:08,186
It emits this data as JSON and


1599
00:49:08,186 --> 00:49:09,416
the format of the JSON is


1600
00:49:09,456 --> 00:49:10,576
publicly documented and


1601
00:49:10,576 --> 00:49:11,036
versioned.


1602
00:49:11,626 --> 00:49:14,886
We'll be leveraging xcresulttool


1603
00:49:14,886 --> 00:49:16,466
in our next step, which is to


1604
00:49:16,466 --> 00:49:18,046
populate our issue tracker with


1605
00:49:18,046 --> 00:49:19,406
any failures that occur during


1606
00:49:19,406 --> 00:49:20,246
building or testing.


1607
00:49:20,906 --> 00:49:24,226
To extract build failures,


1608
00:49:24,666 --> 00:49:26,386
invoke xcresulttool using the


1609
00:49:26,386 --> 00:49:28,336
get command passing in the path


1610
00:49:28,416 --> 00:49:29,226
of the ResultBundle.


1611
00:49:30,696 --> 00:49:32,276
In the JSON output that follows,


1612
00:49:32,976 --> 00:49:34,396
you can find build failures


1613
00:49:34,566 --> 00:49:35,966
nested in one of the objects.


1614
00:49:37,226 --> 00:49:38,736
Each build failure includes both


1615
00:49:38,776 --> 00:49:40,556
the failure message as well as


1616
00:49:40,556 --> 00:49:41,826
the source file and line number


1617
00:49:41,826 --> 00:49:44,936
that failed to build.


1618
00:49:45,116 --> 00:49:46,666
Test failures are also nested


1619
00:49:46,666 --> 00:49:48,556
inside of the JSON with the name


1620
00:49:48,556 --> 00:49:50,196
of the test that failed, as well


1621
00:49:50,196 --> 00:49:51,296
as the assertion message.


1622
00:49:51,806 --> 00:49:55,766
Don't worry if you didn't follow


1623
00:49:55,866 --> 00:49:56,876
those steps 100%.


1624
00:49:57,246 --> 00:49:58,756
Like I mentioned previously, a


1625
00:49:58,756 --> 00:50:00,486
big benefit of xcresulttool is


1626
00:50:00,486 --> 00:50:02,046
that the JSON it produces is


1627
00:50:02,046 --> 00:50:03,976
publicly documented.


1628
00:50:04,046 --> 00:50:05,426
In fact, the tool itself can


1629
00:50:05,426 --> 00:50:07,146
describe the schema of the JSON


1630
00:50:07,426 --> 00:50:08,626
using the format description


1631
00:50:08,626 --> 00:50:09,046
command.


1632
00:50:10,216 --> 00:50:11,446
The schema lists all of the


1633
00:50:11,446 --> 00:50:12,786
possible types of objects that


1634
00:50:12,786 --> 00:50:14,106
can be present in the output.


1635
00:50:14,506 --> 00:50:15,866
So I encourage you to refer to


1636
00:50:15,866 --> 00:50:16,756
it as you write your own


1637
00:50:16,756 --> 00:50:18,296
automation on top of the tool.


1638
00:50:18,836 --> 00:50:22,146
Last but not least, check out


1639
00:50:22,146 --> 00:50:23,606
the tool's man page for more


1640
00:50:23,606 --> 00:50:24,166
information.


1641
00:50:24,726 --> 00:50:27,886
With our newfound knowledge of


1642
00:50:27,886 --> 00:50:29,356
xcresulttool, we can now throw


1643
00:50:29,356 --> 00:50:30,376
in step number three.


1644
00:50:31,116 --> 00:50:32,836
We'll use xcresulttool get to


1645
00:50:32,836 --> 00:50:34,416
extract those build and test


1646
00:50:34,416 --> 00:50:35,646
failures from the result bundle


1647
00:50:35,866 --> 00:50:36,656
and put them in our issue


1648
00:50:36,656 --> 00:50:37,056
tracker.


1649
00:50:37,606 --> 00:50:40,906
We've come a long way at this


1650
00:50:40,906 --> 00:50:42,506
point but we have one last step


1651
00:50:42,556 --> 00:50:43,286
to accomplish.


1652
00:50:43,886 --> 00:50:44,796
We want to track our code


1653
00:50:44,796 --> 00:50:46,306
coverage over time to know if it


1654
00:50:46,306 --> 00:50:47,086
ever decreases.


1655
00:50:47,786 --> 00:50:50,066
For this, we can use another


1656
00:50:50,066 --> 00:50:51,776
command line tool called xccov.


1657
00:50:52,866 --> 00:50:54,426
Xccov provides programmatic


1658
00:50:54,426 --> 00:50:55,526
access to the code coverage


1659
00:50:55,526 --> 00:50:57,056
report either as human readable


1660
00:50:57,056 --> 00:50:58,066
text or JSON.


1661
00:50:59,336 --> 00:51:00,346
To view the coverage report


1662
00:51:00,346 --> 00:51:01,976
using xccov, invoke the view


1663
00:51:01,976 --> 00:51:03,596
command passing it the result


1664
00:51:03,596 --> 00:51:03,966
bundle.


1665
00:51:04,556 --> 00:51:06,956
In the output that follows, you


1666
00:51:06,956 --> 00:51:08,546
can see the line coverage for


1667
00:51:08,546 --> 00:51:11,306
every target, source file, and


1668
00:51:11,356 --> 00:51:13,746
function or method in your


1669
00:51:14,956 --> 00:51:15,176
project.


1670
00:51:15,266 --> 00:51:16,956
Now, simply viewing the coverage


1671
00:51:16,956 --> 00:51:18,316
report may not be exactly what


1672
00:51:18,386 --> 00:51:18,806
you want.


1673
00:51:19,566 --> 00:51:20,826
If instead you want to compare


1674
00:51:20,826 --> 00:51:22,866
two reports to see if coverage


1675
00:51:22,866 --> 00:51:24,656
has gotten better or worse, you


1676
00:51:24,656 --> 00:51:25,896
can use the diff command.


1677
00:51:26,866 --> 00:51:28,216
Pass the paths to two result


1678
00:51:28,216 --> 00:51:29,716
bundles of the tool which will


1679
00:51:29,716 --> 00:51:30,946
produce output similar to this.


1680
00:51:32,476 --> 00:51:33,866
In this example, we can see that


1681
00:51:33,866 --> 00:51:34,726
the code coverage for


1682
00:51:34,726 --> 00:51:36,686
AppDelegate file increased by


1683
00:51:36,756 --> 00:51:39,106
50% between the two result


1684
00:51:41,696 --> 00:51:42,096
bundles.


1685
00:51:42,566 --> 00:51:44,426
Like xcresulttool, xccov also


1686
00:51:44,426 --> 00:51:46,126
has a man page, so check that


1687
00:51:46,126 --> 00:51:46,936
out for more info.


1688
00:51:47,506 --> 00:51:51,006
And with that we can finally


1689
00:51:51,066 --> 00:51:51,946
fill in our last step.


1690
00:51:52,746 --> 00:51:54,706
We'll use xccov to extract code


1691
00:51:54,706 --> 00:51:56,206
coverage from the bundle to


1692
00:51:56,206 --> 00:51:59,696
track our progress over time.


1693
00:52:00,846 --> 00:52:01,286
Awesome.


1694
00:52:01,286 --> 00:52:02,526
Our continuous integration


1695
00:52:02,526 --> 00:52:03,576
workflow is complete.


1696
00:52:04,086 --> 00:52:05,606
Using xcodebuild to build and


1697
00:52:05,606 --> 00:52:07,826
run our tests, xcresulttool to


1698
00:52:07,826 --> 00:52:08,766
extract, build, and test


1699
00:52:08,766 --> 00:52:10,916
failures, and xccov to view code


1700
00:52:10,916 --> 00:52:12,416
coverage, we built a fully


1701
00:52:12,416 --> 00:52:14,086
functional end-to-end pipeline


1702
00:52:14,086 --> 00:52:15,196
that automates the testing of


1703
00:52:15,196 --> 00:52:16,766
our app.


1704
00:52:16,766 --> 00:52:17,896
Hopefully this gives you a sense


1705
00:52:17,896 --> 00:52:19,016
of just how much power and


1706
00:52:19,046 --> 00:52:20,736
flexibility is available to you


1707
00:52:20,916 --> 00:52:21,956
using the tools that come with


1708
00:52:22,126 --> 00:52:22,406
Xcode.


1709
00:52:23,256 --> 00:52:24,546
We've only covered one possible


1710
00:52:24,546 --> 00:52:26,296
workflow but with these building


1711
00:52:26,296 --> 00:52:28,276
blocks the sky is really the


1712
00:52:29,236 --> 00:52:29,436
limit.


1713
00:52:30,066 --> 00:52:31,286
We've covered a lot of content


1714
00:52:31,286 --> 00:52:32,456
in our talk today so let's


1715
00:52:32,516 --> 00:52:33,586
briefly recap what we've


1716
00:52:33,586 --> 00:52:33,916
learned.


1717
00:52:35,056 --> 00:52:36,866
We started off today's talk with


1718
00:52:36,866 --> 00:52:38,076
an introduction to testing in


1719
00:52:38,266 --> 00:52:38,586
Xcode.


1720
00:52:39,396 --> 00:52:40,666
We learned how to write unit and


1721
00:52:40,666 --> 00:52:42,796
UI test using XCTest and how to


1722
00:52:42,796 --> 00:52:43,726
run them to catch bugs.


1723
00:52:45,416 --> 00:52:46,666
Next, we learned about Test


1724
00:52:46,736 --> 00:52:48,476
Plans, a new feature allowing us


1725
00:52:48,516 --> 00:52:50,416
to better organize our tests, as


1726
00:52:50,416 --> 00:52:51,786
well as run them multiple times


1727
00:52:51,786 --> 00:52:53,126
under different configurations.


1728
00:52:54,596 --> 00:52:55,706
And finally, we learned about


1729
00:52:55,706 --> 00:52:56,896
the tools that we can use to


1730
00:52:56,896 --> 00:52:58,316
build a custom continuous


1731
00:52:58,316 --> 00:52:59,326
integration pipeline.


1732
00:52:59,936 --> 00:53:02,226
If you'd like to learn more,


1733
00:53:02,226 --> 00:53:03,796
grab a copy of these slides from


1734
00:53:03,796 --> 00:53:05,836
developer.apple.com and be sure


1735
00:53:05,836 --> 00:53:06,886
to check out the release notes


1736
00:53:06,886 --> 00:53:07,766
for Xcode 11.


1737
00:53:08,966 --> 00:53:10,156
Finally, if you're interested in


1738
00:53:10,156 --> 00:53:12,196
hearing about new APIs in XCTest


1739
00:53:12,196 --> 00:53:13,406
for measuring the performance of


1740
00:53:13,406 --> 00:53:14,646
your code, check out the


1741
00:53:14,646 --> 00:53:15,786
Improving Battery Life and


1742
00:53:15,786 --> 00:53:16,946
Performance session later today.


1743
00:53:18,086 --> 00:53:19,226
Come see us in the labs and have


1744
00:53:19,226 --> 00:53:19,976
a great WWDC.


1745
00:53:20,516 --> 00:53:26,500
[ Applause ]

