1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:10,516 --> 00:00:12,546
[ Applause ]


3
00:00:13,046 --> 00:00:15,746
>> Hello. Welcome to Network


4
00:00:15,746 --> 00:00:17,436
Extensions for Modern macOS.


5
00:00:18,346 --> 00:00:19,366
My name is Jamie Wood.


6
00:00:19,586 --> 00:00:21,426
I'm a Software Engineer working


7
00:00:21,426 --> 00:00:22,626
on Internet Technologies at


8
00:00:22,626 --> 00:00:22,996
Apple.


9
00:00:23,796 --> 00:00:25,126
And I am thrilled to be here


10
00:00:25,126 --> 00:00:26,706
today to tell you about a bunch


11
00:00:26,706 --> 00:00:28,866
of great new powerful APIs that


12
00:00:29,316 --> 00:00:31,076
we've added in macOS Catalina


13
00:00:31,226 --> 00:00:33,606
that allow you to create apps


14
00:00:33,636 --> 00:00:35,916
that extend and customize the


15
00:00:35,916 --> 00:00:37,636
networking capabilities of macOS


16
00:00:38,146 --> 00:00:39,456
without the use of Network


17
00:00:39,486 --> 00:00:40,456
Kernel Extensions.


18
00:00:41,906 --> 00:00:44,376
To start off, I want to say


19
00:00:44,376 --> 00:00:45,896
thank you for your feedback.


20
00:00:46,766 --> 00:00:48,226
Over the past few years here at


21
00:00:48,226 --> 00:00:51,216
WWDC we've asked you to file


22
00:00:51,216 --> 00:00:53,196
bugs and give us feedback about


23
00:00:53,196 --> 00:00:54,856
how you're making use of Network


24
00:00:54,936 --> 00:00:57,016
Kernel Extensions in your apps


25
00:00:57,066 --> 00:00:57,676
today.


26
00:00:58,526 --> 00:01:00,166
We got a lot of great feedback.


27
00:01:00,966 --> 00:01:02,406
We've taken your feedback, and


28
00:01:02,406 --> 00:01:04,226
we came up with a set of


29
00:01:04,436 --> 00:01:08,196
categories of apps where on a


30
00:01:08,196 --> 00:01:10,306
macOS Mojavi and earlier you


31
00:01:10,306 --> 00:01:11,496
really need to use Network


32
00:01:11,496 --> 00:01:13,316
Kernel Extensions to fully


33
00:01:13,316 --> 00:01:14,566
implement apps in these


34
00:01:14,566 --> 00:01:15,196
categories.


35
00:01:16,606 --> 00:01:19,146
So today I want to take you on a


36
00:01:19,146 --> 00:01:20,726
journey for each one of these


37
00:01:20,726 --> 00:01:22,676
app categories and talk about


38
00:01:22,856 --> 00:01:24,246
all the great new APIs we've


39
00:01:24,246 --> 00:01:26,196
added in macOS Catalina that


40
00:01:26,616 --> 00:01:28,276
allow you to create apps in


41
00:01:28,276 --> 00:01:30,356
these categories without using


42
00:01:30,356 --> 00:01:31,736
Network Kernel Extensions.


43
00:01:32,636 --> 00:01:33,746
So let's go ahead and get


44
00:01:33,746 --> 00:01:34,106
started.


45
00:01:35,536 --> 00:01:36,586
First, I want to talk about


46
00:01:36,806 --> 00:01:38,866
Content Filter Apps.


47
00:01:39,286 --> 00:01:40,866
One example of a Content Filter


48
00:01:40,866 --> 00:01:43,336
App is a Personal Firewall App.


49
00:01:43,866 --> 00:01:45,216
These are apps that examine the


50
00:01:45,216 --> 00:01:46,946
network traffic as it's flowing


51
00:01:47,136 --> 00:01:49,456
through the system and block


52
00:01:49,586 --> 00:01:50,596
traffic that's deemed to be


53
00:01:50,596 --> 00:01:51,786
malicious in some way.


54
00:01:53,006 --> 00:01:54,336
Another example of a Content


55
00:01:54,336 --> 00:01:56,526
Filter App is a Parental


56
00:01:56,526 --> 00:01:58,476
Controls App.


57
00:01:58,896 --> 00:02:02,276
This is an app that focuses on


58
00:02:02,276 --> 00:02:04,026
web-browsing activity and blocks


59
00:02:04,026 --> 00:02:05,646
access to websites that are


60
00:02:05,646 --> 00:02:06,746
deemed inappropriate for


61
00:02:06,746 --> 00:02:07,146
children.


62
00:02:08,395 --> 00:02:11,386
Another example of a Content


63
00:02:11,386 --> 00:02:13,596
Filter App is an app that


64
00:02:13,596 --> 00:02:14,866
doesn't actively block any


65
00:02:14,866 --> 00:02:17,106
network traffic but instead just


66
00:02:17,106 --> 00:02:18,526
keeps a record of network


67
00:02:18,526 --> 00:02:21,436
activity on the Mac so that that


68
00:02:21,436 --> 00:02:23,536
log of no activity can be


69
00:02:23,536 --> 00:02:26,436
analyzed later, for example, to


70
00:02:26,476 --> 00:02:27,766
determine when some sensitive


71
00:02:27,766 --> 00:02:28,706
data was transmitted.


72
00:02:30,066 --> 00:02:32,026
So before I talk about the APIs


73
00:02:32,026 --> 00:02:33,896
we've added that allow you to


74
00:02:33,896 --> 00:02:35,216
create Content Filter Apps, I


75
00:02:35,536 --> 00:02:37,776
want to talk about some


76
00:02:37,776 --> 00:02:39,356
particular runtime requirements


77
00:02:39,606 --> 00:02:41,756
that Content Filter Apps have.


78
00:02:42,576 --> 00:02:43,636
So the code in your Content


79
00:02:43,636 --> 00:02:45,346
Filter App that is actually


80
00:02:45,346 --> 00:02:47,426
filtering network traffic has


81
00:02:47,426 --> 00:02:48,736
some specific runtime


82
00:02:48,736 --> 00:02:49,456
requirements.


83
00:02:50,486 --> 00:02:51,836
Your code needs to be running


84
00:02:51,836 --> 00:02:53,666
all the time, and it needs to be


85
00:02:53,666 --> 00:02:54,616
running even when there's no


86
00:02:54,616 --> 00:02:56,506
user logged into the system.


87
00:02:57,556 --> 00:02:59,306
For example, in your Parental


88
00:02:59,306 --> 00:03:01,576
Controls App, you app needs to


89
00:03:01,576 --> 00:03:03,106
be doing its job of blocking


90
00:03:03,106 --> 00:03:05,506
access to inappropriate websites


91
00:03:06,056 --> 00:03:07,476
even when your app isn't


92
00:03:07,476 --> 00:03:08,136
actually running.


93
00:03:09,276 --> 00:03:12,106
In your Personal Firewall App,


94
00:03:12,106 --> 00:03:13,316
your app needs to be doing its


95
00:03:13,316 --> 00:03:15,886
job of protecting the Mac from


96
00:03:15,886 --> 00:03:18,016
incoming attacks coming in over


97
00:03:18,016 --> 00:03:19,826
the network even if there's no


98
00:03:19,826 --> 00:03:21,096
user logged into the system.


99
00:03:22,546 --> 00:03:23,956
Now, when you've implemented


100
00:03:24,166 --> 00:03:26,876
your content filter code inside


101
00:03:26,876 --> 00:03:28,836
of a Kernel Extension, these


102
00:03:28,836 --> 00:03:29,796
runtime requirements are


103
00:03:29,796 --> 00:03:31,116
obviously met because your code


104
00:03:31,116 --> 00:03:32,086
is running in the Kernel.


105
00:03:32,576 --> 00:03:34,816
So it's running all the time and


106
00:03:34,816 --> 00:03:35,726
it's running even when there's


107
00:03:35,726 --> 00:03:37,096
no user logged into the system.


108
00:03:37,666 --> 00:03:41,346
So to satisfy these runtime


109
00:03:41,346 --> 00:03:42,896
requirements in user space,


110
00:03:42,896 --> 00:03:43,836
we've introduced a new


111
00:03:43,836 --> 00:03:46,216
technology in macOS Catalina


112
00:03:46,356 --> 00:03:47,726
called System Extensions.


113
00:03:49,596 --> 00:03:51,326
Now you're probably familiar


114
00:03:51,326 --> 00:03:52,486
with app extensions.


115
00:03:53,146 --> 00:03:54,776
These are bundles of executable


116
00:03:54,776 --> 00:03:57,346
code that you can use on macOS


117
00:03:57,446 --> 00:03:59,646
to extend and customize various


118
00:03:59,646 --> 00:04:01,396
aspects of the macOS user


119
00:04:01,396 --> 00:04:02,096
experience.


120
00:04:03,446 --> 00:04:05,186
So system extensions share a lot


121
00:04:05,186 --> 00:04:06,196
of similarities with app


122
00:04:06,196 --> 00:04:06,856
extensions.


123
00:04:07,686 --> 00:04:09,396
Like app extensions, system


124
00:04:09,396 --> 00:04:10,976
extensions are packaged inside


125
00:04:10,976 --> 00:04:13,066
of your app and they're


126
00:04:13,066 --> 00:04:14,446
completely managed by the


127
00:04:14,446 --> 00:04:15,256
operating system.


128
00:04:16,086 --> 00:04:17,435
So this is great because it


129
00:04:17,435 --> 00:04:18,926
means you don't need to write


130
00:04:18,926 --> 00:04:20,766
any customer installer package


131
00:04:20,766 --> 00:04:22,316
to place your system extensions


132
00:04:22,316 --> 00:04:25,066
somewhere in a file system, and


133
00:04:25,066 --> 00:04:25,696
you don't need to write an


134
00:04:25,696 --> 00:04:27,036
uninstaller to remove your


135
00:04:27,036 --> 00:04:29,056
system extension when the user


136
00:04:29,056 --> 00:04:31,326
uninstalls your app.


137
00:04:31,516 --> 00:04:32,686
Also you don't need to worry


138
00:04:32,686 --> 00:04:34,966
about starting and stopping your


139
00:04:34,966 --> 00:04:35,946
system extension.


140
00:04:36,676 --> 00:04:38,346
The operating system will run


141
00:04:38,536 --> 00:04:43,006
your system extension as needed.


142
00:04:43,676 --> 00:04:45,316
Another similarity with app


143
00:04:45,316 --> 00:04:46,806
extensions and system extensions


144
00:04:46,806 --> 00:04:48,836
is that system extensions are


145
00:04:48,836 --> 00:04:50,866
very easy to develop and debug.


146
00:04:51,186 --> 00:04:52,626
You can use all the regular


147
00:04:52,626 --> 00:04:54,406
tools you use to develop any


148
00:04:54,406 --> 00:04:56,816
regular app -- Xcode, LLDB,


149
00:04:56,816 --> 00:04:57,976
Instruments.


150
00:05:02,046 --> 00:05:03,426
This is in contrast to Kernel


151
00:05:03,426 --> 00:05:05,086
Extensions which are notoriously


152
00:05:05,086 --> 00:05:07,596
difficult to develop and debug.


153
00:05:08,496 --> 00:05:10,136
You frequently have to reboot as


154
00:05:10,136 --> 00:05:11,606
you're developing your


155
00:05:11,606 --> 00:05:12,426
extension.


156
00:05:12,896 --> 00:05:14,416
And to debug a Kernel Extension


157
00:05:14,416 --> 00:05:15,426
you have to have two separate


158
00:05:15,426 --> 00:05:17,686
machines and if you do manage to


159
00:05:17,686 --> 00:05:18,646
connect these two machines


160
00:05:18,646 --> 00:05:20,726
together and drop into the


161
00:05:20,726 --> 00:05:21,806
debugger in your Kernel


162
00:05:21,806 --> 00:05:23,926
Extension Code, single-stepping


163
00:05:23,926 --> 00:05:25,436
through your source code is a


164
00:05:25,436 --> 00:05:27,346
very dicey proposition and -- if


165
00:05:27,346 --> 00:05:27,956
it works at all.


166
00:05:28,506 --> 00:05:32,526
Unlike app extensions, system


167
00:05:32,526 --> 00:05:34,106
extensions run independently of


168
00:05:34,106 --> 00:05:36,116
any user logged into the system.


169
00:05:36,896 --> 00:05:38,346
So systems extensions are really


170
00:05:38,346 --> 00:05:39,876
an ideal place for you to be


171
00:05:39,876 --> 00:05:41,596
running your network processing


172
00:05:41,596 --> 00:05:42,756
code like your content filter


173
00:05:43,606 --> 00:05:43,706
code.


174
00:05:46,156 --> 00:05:47,896
For information and details


175
00:05:47,896 --> 00:05:49,736
about system extensions and for


176
00:05:49,736 --> 00:05:51,756
some other use cases of system


177
00:05:51,756 --> 00:05:52,856
extensions, please see the


178
00:05:52,856 --> 00:05:53,896
session that happened earlier


179
00:05:53,896 --> 00:05:56,056
this week, System Extensions and


180
00:05:56,056 --> 00:05:57,286
Driver Kit.


181
00:05:59,536 --> 00:06:00,196
All right.


182
00:06:00,196 --> 00:06:03,286
So you use system extensions to


183
00:06:03,826 --> 00:06:05,436
implement several different apps


184
00:06:05,516 --> 00:06:07,066
in these categories that I've


185
00:06:07,066 --> 00:06:08,596
listed here -- Content Filter


186
00:06:08,596 --> 00:06:10,306
Apps, Transparent Proxy Apps,


187
00:06:10,726 --> 00:06:13,976
DNS Proxy Apps and VPN Apps.


188
00:06:14,076 --> 00:06:16,016
Now I want to dive into the APIs


189
00:06:16,016 --> 00:06:17,446
we've added that allow you to


190
00:06:17,646 --> 00:06:18,926
implement Content Filter Apps.


191
00:06:25,046 --> 00:06:27,026
So the Content Filter APIs are


192
00:06:27,026 --> 00:06:28,056
in the Network Extension


193
00:06:28,116 --> 00:06:32,406
Framework and these APIs were


194
00:06:32,406 --> 00:06:34,876
first introduced back in iOS 9.


195
00:06:35,816 --> 00:06:37,226
And so what we've done in macOS


196
00:06:37,226 --> 00:06:38,896
Catalina is brought these APIs


197
00:06:38,896 --> 00:06:40,166
over and made them available on


198
00:06:40,166 --> 00:06:41,896
the Mac and added a bunch of


199
00:06:41,896 --> 00:06:43,186
great new enhancements that make


200
00:06:43,186 --> 00:06:44,766
these APIs even better.


201
00:06:44,836 --> 00:06:47,966
So let's take a look at the


202
00:06:47,966 --> 00:06:49,416
Content Filter APIs and how you


203
00:06:49,416 --> 00:06:51,046
use them in your app.


204
00:06:51,636 --> 00:06:54,656
So in your main UI App, you use


205
00:06:54,716 --> 00:06:56,936
NEFilterManager to create a


206
00:06:56,936 --> 00:06:58,426
content filter configuration.


207
00:06:59,426 --> 00:07:00,746
The content filter configuration


208
00:07:00,746 --> 00:07:02,056
registers your content filter


209
00:07:02,056 --> 00:07:03,456
with the system so the system


210
00:07:03,456 --> 00:07:05,186
knows how to run your filter.


211
00:07:05,816 --> 00:07:09,066
You also create a system


212
00:07:09,066 --> 00:07:09,616
extension.


213
00:07:09,616 --> 00:07:10,666
This is where your code that


214
00:07:10,666 --> 00:07:12,096
actually filters network content


215
00:07:12,166 --> 00:07:12,646
will run.


216
00:07:14,176 --> 00:07:15,806
The Content Filter APIs allow


217
00:07:15,806 --> 00:07:18,336
you to filter network content at


218
00:07:18,386 --> 00:07:19,346
two different layers.


219
00:07:20,126 --> 00:07:21,316
You can filter content at the


220
00:07:21,316 --> 00:07:23,426
flow layer or at the packet


221
00:07:23,426 --> 00:07:23,656
layer.


222
00:07:25,036 --> 00:07:27,576
For flow layer filtering, you


223
00:07:27,576 --> 00:07:30,386
create a subclass of any data


224
00:07:30,386 --> 00:07:31,256
filter provider.


225
00:07:32,776 --> 00:07:35,116
Once your content filter


226
00:07:35,116 --> 00:07:36,916
configuration is registered with


227
00:07:36,916 --> 00:07:38,396
the system, and your filter's up


228
00:07:38,396 --> 00:07:41,736
and running, the system, as new


229
00:07:41,736 --> 00:07:44,606
connections, as new TCP and UDP


230
00:07:44,656 --> 00:07:46,156
flows of network data are


231
00:07:46,156 --> 00:07:48,916
created on the system, those


232
00:07:48,916 --> 00:07:50,636
flows get passed to your --


233
00:07:50,636 --> 00:07:52,536
NEFilterDataProvider subclass


234
00:07:53,206 --> 00:07:54,626
represented as individual


235
00:07:54,706 --> 00:07:56,326
NEFilterFlowObjects.


236
00:07:56,896 --> 00:08:00,046
It's then the responsibility of


237
00:08:00,046 --> 00:08:03,476
your subclass to make a allow or


238
00:08:03,476 --> 00:08:04,766
drop decision about each


239
00:08:04,766 --> 00:08:06,406
individual flow.


240
00:08:07,696 --> 00:08:09,006
You can make this decision about


241
00:08:09,006 --> 00:08:10,836
each flow at any point in the


242
00:08:10,836 --> 00:08:11,996
lifetime of the flow.


243
00:08:11,996 --> 00:08:13,276
You can make it right up front


244
00:08:13,386 --> 00:08:15,396
when the flow is first opened or


245
00:08:15,396 --> 00:08:17,016
you can wait after you've seen


246
00:08:17,196 --> 00:08:17,966
some amount of the flow's data.


247
00:08:22,076 --> 00:08:23,606
I want to note here that the


248
00:08:23,606 --> 00:08:25,796
NEFilterDataProvider class gives


249
00:08:25,796 --> 00:08:27,506
you read-only access to flows.


250
00:08:29,246 --> 00:08:31,076
You can't modify any aspect of a


251
00:08:31,076 --> 00:08:32,145
flow, including any of the


252
00:08:32,145 --> 00:08:32,736
flow's data.


253
00:08:34,676 --> 00:08:36,666
By default, the system will pass


254
00:08:36,666 --> 00:08:38,905
every single flow of TCP and UDP


255
00:08:38,905 --> 00:08:40,796
data to your


256
00:08:40,796 --> 00:08:42,456
NEFilterDataProvider subclass.


257
00:08:42,996 --> 00:08:44,826
If this isn't exactly what you


258
00:08:44,826 --> 00:08:46,426
want -- for example, if you're


259
00:08:46,426 --> 00:08:47,906
writing a Parental Controls App,


260
00:08:48,546 --> 00:08:49,926
so you're only interested in Web


261
00:08:49,926 --> 00:08:51,896
traffic, you use NEFilter


262
00:08:51,896 --> 00:08:54,066
settings to create a set of


263
00:08:54,066 --> 00:08:56,326
rules that inform the system


264
00:08:56,326 --> 00:08:57,606
about the flows that you want to


265
00:08:57,606 --> 00:08:58,906
see in your filter.


266
00:08:59,606 --> 00:09:04,406
So that's how flow level


267
00:09:04,406 --> 00:09:05,286
filtering works.


268
00:09:07,066 --> 00:09:09,436
If you want to filter traffic at


269
00:09:09,436 --> 00:09:12,216
the packet layer, you create a


270
00:09:12,216 --> 00:09:12,846
subclass of


271
00:09:12,916 --> 00:09:15,426
NEFilterPacketProvider in your


272
00:09:15,426 --> 00:09:18,936
system extension and as network


273
00:09:18,936 --> 00:09:19,906
packets are flowing through the


274
00:09:19,906 --> 00:09:23,026
system, the system will pass


275
00:09:23,326 --> 00:09:24,686
those packets to your


276
00:09:24,686 --> 00:09:27,316
FilterPacketProvider subclass as


277
00:09:27,316 --> 00:09:29,546
individual packet objects, and


278
00:09:30,176 --> 00:09:33,026
you make a Allow or Drop


279
00:09:33,026 --> 00:09:34,376
decision about each individual


280
00:09:35,796 --> 00:09:35,966
packet.


281
00:09:36,496 --> 00:09:37,476
Okay. So there's a brief


282
00:09:37,476 --> 00:09:39,376
overview of the Content Filter


283
00:09:39,486 --> 00:09:41,786
APIs and how you use them in


284
00:09:41,786 --> 00:09:43,726
your app.


285
00:09:43,986 --> 00:09:45,596
Next I want to give you a brief


286
00:09:45,596 --> 00:09:47,086
demonstration of an app that


287
00:09:47,086 --> 00:09:49,606
uses the system extensions and


288
00:09:49,606 --> 00:09:52,016
content filter APIs to implement


289
00:09:52,016 --> 00:09:52,976
a firewall.


290
00:10:00,116 --> 00:10:01,196
So the functionality of my app


291
00:10:01,196 --> 00:10:02,136
is very simple.


292
00:10:03,026 --> 00:10:05,876
I'm going to prompt the user to


293
00:10:05,876 --> 00:10:09,696
allow or deny incoming TCP


294
00:10:09,696 --> 00:10:11,736
connections on Port 8888.


295
00:10:12,616 --> 00:10:14,346
So let me go ahead and run the


296
00:10:14,346 --> 00:10:15,866
app and show you how it works.


297
00:10:16,506 --> 00:10:19,086
So the app's called Simple


298
00:10:19,086 --> 00:10:19,856
Firewall.


299
00:10:19,926 --> 00:10:21,126
Go ahead and run the app.


300
00:10:22,496 --> 00:10:25,496
And you can see my UI indicator


301
00:10:25,496 --> 00:10:25,686
here.


302
00:10:25,686 --> 00:10:27,066
The red dot is showing that my


303
00:10:27,066 --> 00:10:28,496
content filter is not currently


304
00:10:28,496 --> 00:10:28,806
running.


305
00:10:29,056 --> 00:10:29,746
So I'm going to go ahead and


306
00:10:29,746 --> 00:10:31,000
click start.


307
00:10:32,926 --> 00:10:34,656
Alright. So I get this dialog


308
00:10:34,656 --> 00:10:36,366
from the system indicating that


309
00:10:36,626 --> 00:10:37,816
my system extension has been


310
00:10:37,816 --> 00:10:38,576
blocked from running.


311
00:10:39,536 --> 00:10:41,276
Now system extensions are very


312
00:10:41,276 --> 00:10:41,776
powerful.


313
00:10:41,996 --> 00:10:44,306
They give you the ability to do


314
00:10:44,306 --> 00:10:45,996
lots of things on the system


315
00:10:46,256 --> 00:10:48,166
including looking at network


316
00:10:48,166 --> 00:10:49,006
traffic that's flowing through


317
00:10:49,006 --> 00:10:49,576
the system.


318
00:10:49,996 --> 00:10:52,676
So we want to make sure that we


319
00:10:52,676 --> 00:10:54,516
get the user's permission before


320
00:10:54,516 --> 00:10:55,876
allowing system extensions to


321
00:10:55,876 --> 00:10:56,086
run.


322
00:10:56,086 --> 00:10:58,036
So I'm going to go ahead and


323
00:10:58,036 --> 00:10:59,426
open Security Preferences.


324
00:11:00,866 --> 00:11:01,676
This will take me to the


325
00:11:01,676 --> 00:11:03,596
Security and Privacy Preferences


326
00:11:03,596 --> 00:11:03,946
pane.


327
00:11:04,796 --> 00:11:05,956
I'll provide my admin


328
00:11:05,956 --> 00:11:08,476
credentials and go ahead and


329
00:11:08,476 --> 00:11:10,206
click allow to allow my system


330
00:11:10,206 --> 00:11:11,846
extension to run.


331
00:11:13,916 --> 00:11:15,346
The network extension framework


332
00:11:15,346 --> 00:11:17,266
also prompts the user to confirm


333
00:11:17,266 --> 00:11:18,086
that they want to allow the


334
00:11:18,086 --> 00:11:20,026
system extension to filter


335
00:11:20,026 --> 00:11:21,386
network traffic on the Mac.


336
00:11:21,386 --> 00:11:23,426
So go ahead and click allow.


337
00:11:23,426 --> 00:11:24,976
All right.


338
00:11:24,976 --> 00:11:26,726
So, now back in simple firewall


339
00:11:26,726 --> 00:11:29,236
we can see that my content


340
00:11:29,236 --> 00:11:30,656
filter is now running.


341
00:11:31,166 --> 00:11:32,856
So let's go ahead and connect to


342
00:11:32,856 --> 00:11:36,466
Port 8888 here on my local Mac


343
00:11:36,626 --> 00:11:37,436
and see what happens.


344
00:11:38,066 --> 00:11:39,496
So I'm running a webserver on


345
00:11:39,496 --> 00:11:40,586
Port 8888.


346
00:11:41,356 --> 00:11:43,956
So I'm going to go ahead bring


347
00:11:43,956 --> 00:11:44,606
up Safari.


348
00:11:44,606 --> 00:11:46,896
And I have it bookmarked to my


349
00:11:46,896 --> 00:11:47,646
local webserver.


350
00:11:47,646 --> 00:11:48,646
So I'll click on that.


351
00:11:48,646 --> 00:11:50,956
So the webpage starts to load,


352
00:11:50,956 --> 00:11:52,636
but you can see it pauses here.


353
00:11:53,146 --> 00:11:54,886
And sure enough, over in the


354
00:11:54,886 --> 00:11:57,136
simple firewall app I have this


355
00:11:57,136 --> 00:11:58,576
dialog inform me that a new


356
00:11:58,576 --> 00:12:00,306
connection has been created on


357
00:12:00,306 --> 00:12:02,826
Port 8888 asking me if I want to


358
00:12:02,826 --> 00:12:03,766
allow or deny.


359
00:12:04,706 --> 00:12:06,056
So I'll click allow, and the


360
00:12:06,056 --> 00:12:06,976
webpage loads.


361
00:12:09,506 --> 00:12:10,036
So, cool.


362
00:12:10,246 --> 00:12:11,106
My app is working.


363
00:12:12,606 --> 00:12:13,666
Now let's go ahead and take a


364
00:12:13,666 --> 00:12:14,856
look at some of the code in


365
00:12:14,856 --> 00:12:16,466
simple firewall to see how it


366
00:12:16,466 --> 00:12:17,696
makes use of the system


367
00:12:17,696 --> 00:12:20,316
extensions and content filter


368
00:12:20,536 --> 00:12:20,976
APIs.


369
00:12:22,306 --> 00:12:24,236
So over here you can see my


370
00:12:24,236 --> 00:12:24,696
project.


371
00:12:24,696 --> 00:12:26,036
I have two different targets.


372
00:12:26,516 --> 00:12:28,696
I have the SimpleFirewall Target


373
00:12:28,696 --> 00:12:29,916
which is my main UI App.


374
00:12:31,076 --> 00:12:31,986
And I have the


375
00:12:31,986 --> 00:12:33,766
SimpleFirewallExtension Target


376
00:12:34,386 --> 00:12:35,976
which is my System Extension.


377
00:12:40,256 --> 00:12:41,386
Let's start off my looking at


378
00:12:41,386 --> 00:12:44,506
some of the code in the app.


379
00:12:44,706 --> 00:12:46,176
We'll take a look at the


380
00:12:46,176 --> 00:12:48,006
implementation of my main View


381
00:12:48,006 --> 00:12:48,856
Controller Class.


382
00:12:49,986 --> 00:12:51,326
And I want to start by looking


383
00:12:51,326 --> 00:12:53,896
at the startFilter function.


384
00:12:54,936 --> 00:12:56,906
So this is the function that was


385
00:12:56,906 --> 00:12:57,766
called when I clicked on the


386
00:12:57,766 --> 00:12:59,156
start button in the


387
00:12:59,156 --> 00:13:00,136
SimpleFirewall UI.


388
00:13:00,136 --> 00:13:02,816
I start off by getting the


389
00:13:02,816 --> 00:13:04,356
bundle identifier of my system


390
00:13:04,356 --> 00:13:07,256
extension and using that to


391
00:13:07,256 --> 00:13:09,206
create a system extension


392
00:13:09,206 --> 00:13:10,416
activationRequest.


393
00:13:10,986 --> 00:13:16,226
I set the view controller object


394
00:13:16,226 --> 00:13:16,946
as the delegate of the


395
00:13:16,946 --> 00:13:18,316
activationRequest so that it


396
00:13:18,316 --> 00:13:19,596
will be notified when the


397
00:13:19,596 --> 00:13:20,716
Request is complete.


398
00:13:21,276 --> 00:13:25,816
Once the activationRequest is


399
00:13:25,816 --> 00:13:28,336
created, I submit it to the


400
00:13:28,336 --> 00:13:29,816
OSSystemExtensionManager.


401
00:13:30,736 --> 00:13:31,906
This kicks off the process of


402
00:13:31,906 --> 00:13:33,446
activating the system extension


403
00:13:33,746 --> 00:13:35,316
including prompting the user to


404
00:13:35,566 --> 00:13:37,616
allow the SystemExtension to run


405
00:13:38,016 --> 00:13:38,676
if necessary.


406
00:13:40,636 --> 00:13:41,136
Okay.


407
00:13:41,136 --> 00:13:43,706
So once the user has allowed the


408
00:13:43,706 --> 00:13:47,116
SystemExtension to run, my view


409
00:13:47,116 --> 00:13:48,736
controller's request did finish


410
00:13:48,736 --> 00:13:50,546
with result function gets


411
00:13:50,546 --> 00:13:51,156
called.


412
00:13:52,196 --> 00:13:53,846
I make sure that the activation


413
00:13:53,846 --> 00:13:56,926
request was completed and I go


414
00:13:56,926 --> 00:13:59,226
ahead and create my content


415
00:13:59,226 --> 00:14:00,386
filter configuration.


416
00:14:01,026 --> 00:14:03,826
So here's where I'm using


417
00:14:03,826 --> 00:14:06,016
AnyFilterManager to create my


418
00:14:06,016 --> 00:14:07,066
filter configuration and


419
00:14:07,066 --> 00:14:08,176
register it with the system.


420
00:14:08,826 --> 00:14:11,986
So here you can see I'm setting


421
00:14:11,986 --> 00:14:14,246
up some details about my -- on


422
00:14:14,246 --> 00:14:15,096
my configuration.


423
00:14:16,526 --> 00:14:20,036
I specify True for filter


424
00:14:20,036 --> 00:14:20,666
sockets.


425
00:14:21,016 --> 00:14:22,256
This indicates that I'm going to


426
00:14:22,256 --> 00:14:24,116
be filtering network traffic at


427
00:14:24,116 --> 00:14:25,046
the flow layer.


428
00:14:26,436 --> 00:14:28,226
I set filter packets to False to


429
00:14:28,226 --> 00:14:29,296
indicate that I'm not going to


430
00:14:29,296 --> 00:14:31,266
be filtering network traffic at


431
00:14:31,266 --> 00:14:31,896
the packet layer.


432
00:14:32,516 --> 00:14:36,556
I go ahead and Enable my Content


433
00:14:36,556 --> 00:14:38,586
Filter Configuration and then


434
00:14:38,586 --> 00:14:40,116
register the Configuration with


435
00:14:40,116 --> 00:14:41,686
the system by calling Save to


436
00:14:41,686 --> 00:14:42,406
Preferences.


437
00:14:44,106 --> 00:14:46,476
So since my Content Filter


438
00:14:46,476 --> 00:14:48,736
Configuration is enabled, this


439
00:14:48,736 --> 00:14:50,336
will cause the system to start


440
00:14:50,686 --> 00:14:53,386
the SystemExtension and start my


441
00:14:53,386 --> 00:14:54,106
Content Filter.


442
00:14:54,806 --> 00:14:56,526
So let's go ahead and take a


443
00:14:56,526 --> 00:14:59,646
look at the implementation of my


444
00:14:59,646 --> 00:15:01,356
NEFilterDataProvider subclass


445
00:15:01,936 --> 00:15:03,986
running inside of the system


446
00:15:03,986 --> 00:15:04,446
extension.


447
00:15:05,106 --> 00:15:08,456
So here's by subclass.


448
00:15:08,456 --> 00:15:09,786
It's called FilterDataProvider.


449
00:15:10,046 --> 00:15:11,076
And I've overridden three


450
00:15:11,076 --> 00:15:13,926
different methods in this class


451
00:15:15,256 --> 00:15:17,366
-- StartFilter, StopFilter, and


452
00:15:17,646 --> 00:15:18,676
HandleNewFlow.


453
00:15:20,066 --> 00:15:21,326
So, first, let's take a look at


454
00:15:21,326 --> 00:15:21,976
StartFilter.


455
00:15:22,556 --> 00:15:25,006
This is the function that is


456
00:15:25,006 --> 00:15:26,966
called when the system starts my


457
00:15:27,316 --> 00:15:27,986
content filter.


458
00:15:28,646 --> 00:15:32,016
Now, by default, the system is


459
00:15:32,016 --> 00:15:34,326
going to pass every single TCP


460
00:15:34,326 --> 00:15:36,656
and UDP flow to my content


461
00:15:36,656 --> 00:15:37,096
filter.


462
00:15:37,096 --> 00:15:38,116
And this isn't really what I


463
00:15:38,116 --> 00:15:38,916
want to do here.


464
00:15:39,216 --> 00:15:41,426
I'm only interested in inbound


465
00:15:41,516 --> 00:15:43,136
TCP connections connecting to


466
00:15:43,136 --> 00:15:46,986
Port 8888 on my Mac.


467
00:15:47,306 --> 00:15:48,536
So I'm going to create an


468
00:15:48,536 --> 00:15:50,946
NEFilterSettingsObject to inform


469
00:15:50,946 --> 00:15:52,516
the system about what traffic I


470
00:15:52,516 --> 00:15:55,146
want to see.


471
00:15:56,196 --> 00:15:59,456
Now I don't care where the TCP


472
00:15:59,456 --> 00:16:02,186
connections are coming from, and


473
00:16:02,186 --> 00:16:04,166
I also don't care what address


474
00:16:04,876 --> 00:16:05,946
the TCP connections are


475
00:16:05,946 --> 00:16:07,906
connecting to on my Mac.


476
00:16:08,836 --> 00:16:10,226
So I'm going to create two


477
00:16:10,226 --> 00:16:13,986
NEFilter Rules, one with the


478
00:16:13,986 --> 00:16:16,266
wildcard IPV4 address and


479
00:16:16,736 --> 00:16:18,496
another with the wildcard IPV6


480
00:16:18,566 --> 00:16:19,000
address.


481
00:16:21,976 --> 00:16:23,106
For each Filter Rule that I


482
00:16:23,106 --> 00:16:25,116
create, I create an


483
00:16:25,116 --> 00:16:27,156
NENetworkRuleObject that


484
00:16:27,156 --> 00:16:28,636
specifies the characteristics of


485
00:16:28,636 --> 00:16:30,106
the flows that I want to see,


486
00:16:30,106 --> 00:16:31,506
that I want the Filter Rule to


487
00:16:31,506 --> 00:16:32,000
match.


488
00:16:34,966 --> 00:16:36,566
So for remote network and remote


489
00:16:36,566 --> 00:16:38,106
prefix, I'm passing nil and


490
00:16:38,106 --> 00:16:38,566
zero.


491
00:16:39,516 --> 00:16:41,376
So this means that my filter


492
00:16:41,376 --> 00:16:42,936
rule is going to match traffic


493
00:16:43,066 --> 00:16:44,476
coming from anywhere.


494
00:16:44,476 --> 00:16:45,726
I don't care where it's coming


495
00:16:45,726 --> 00:16:46,086
from.


496
00:16:47,166 --> 00:16:49,456
For a local network, I pass in a


497
00:16:49,456 --> 00:16:51,476
NWHostEndPoint that I've created


498
00:16:51,666 --> 00:16:54,246
using the wildcard address and a


499
00:16:54,246 --> 00:16:56,046
local port of 8888.


500
00:16:56,676 --> 00:16:56,776
Okay.


501
00:16:58,436 --> 00:17:00,556
So this means that my filter


502
00:17:00,556 --> 00:17:03,506
rule's going to match flows that


503
00:17:03,506 --> 00:17:04,675
are coming in and connecting to


504
00:17:04,675 --> 00:17:09,286
Port 8888 on any address.


505
00:17:09,976 --> 00:17:12,935
I specify a protocol of TCP and


506
00:17:12,935 --> 00:17:14,076
a direction of Inbound.


507
00:17:15,516 --> 00:17:16,646
I go ahead and create the


508
00:17:16,646 --> 00:17:18,675
NEFilterRuleObject, passing in


509
00:17:18,675 --> 00:17:20,836
the NENetworkRule, and an action


510
00:17:20,836 --> 00:17:21,536
of filter data.


511
00:17:23,016 --> 00:17:26,096
So when a new flow of network


512
00:17:26,096 --> 00:17:27,806
data that matches my


513
00:17:27,886 --> 00:17:31,526
NENetworkRule is created on the


514
00:17:31,526 --> 00:17:34,526
system, the system will pass


515
00:17:34,566 --> 00:17:36,736
that flow to my content filter


516
00:17:37,666 --> 00:17:39,006
per the filter data action.


517
00:17:39,736 --> 00:17:40,796
All right.


518
00:17:42,096 --> 00:17:43,736
So once I've created these


519
00:17:43,736 --> 00:17:45,386
NEFilterRules, I go ahead and


520
00:17:45,386 --> 00:17:46,526
create my


521
00:17:46,526 --> 00:17:49,136
NEFilterSettingsObject, passing


522
00:17:49,136 --> 00:17:51,516
in the rules and specifying a


523
00:17:51,516 --> 00:17:52,766
default action of Allow.


524
00:17:53,216 --> 00:17:55,106
So what this means is if a new


525
00:17:55,106 --> 00:17:56,486
flow is created on the system,


526
00:17:56,486 --> 00:17:57,736
and it doesn't match any of my


527
00:17:57,736 --> 00:17:59,676
filter rules, I want the system


528
00:17:59,676 --> 00:18:01,236
to just allow that flow.


529
00:18:01,716 --> 00:18:02,856
Don't pass it to my content


530
00:18:02,856 --> 00:18:03,106
filter.


531
00:18:04,296 --> 00:18:06,656
I go ahead and call Apply to


532
00:18:06,656 --> 00:18:07,966
apply my filter settings to the


533
00:18:07,966 --> 00:18:10,086
system and then, when that's


534
00:18:10,086 --> 00:18:11,676
complete, I call the


535
00:18:11,676 --> 00:18:13,306
StartFilterCompletionHandler to


536
00:18:13,306 --> 00:18:14,536
indicate to the system that my


537
00:18:14,536 --> 00:18:16,396
filter is now up and running and


538
00:18:16,396 --> 00:18:17,656
is ready to start handling


539
00:18:18,086 --> 00:18:18,936
network flows.


540
00:18:19,566 --> 00:18:22,506
Now let's look at the


541
00:18:22,506 --> 00:18:24,366
HandleNewFlow function.


542
00:18:24,366 --> 00:18:25,766
So this is the function that's


543
00:18:25,766 --> 00:18:27,496
called when a new flow is


544
00:18:27,496 --> 00:18:29,476
created that matches my filter


545
00:18:29,476 --> 00:18:29,926
rules.


546
00:18:31,976 --> 00:18:34,486
The function takes a parameter,


547
00:18:34,486 --> 00:18:35,936
the NEFilterFlowObject that


548
00:18:35,936 --> 00:18:38,186
represents the flow, and it


549
00:18:38,186 --> 00:18:40,256
returns a new flow verdict to


550
00:18:40,256 --> 00:18:41,406
indicate to the system what to


551
00:18:41,406 --> 00:18:42,386
do with the flow.


552
00:18:43,776 --> 00:18:45,246
So what I'm doing here is


553
00:18:45,246 --> 00:18:47,356
packaging up some details about


554
00:18:47,356 --> 00:18:50,156
the flow in a dictionary, and


555
00:18:50,186 --> 00:18:52,006
sending that dictionary off to


556
00:18:52,386 --> 00:18:55,136
my UI app to prompt the user to


557
00:18:55,136 --> 00:18:56,836
allow or deny the flow.


558
00:18:57,346 --> 00:19:01,616
Now, getting the user's decision


559
00:19:01,616 --> 00:19:03,086
is obviously a very asynchronous


560
00:19:03,116 --> 00:19:03,686
process.


561
00:19:04,066 --> 00:19:05,236
So while I'm waiting for them to


562
00:19:05,236 --> 00:19:06,466
make a decision and go ahead and


563
00:19:06,466 --> 00:19:08,456
return a verdict of Pause to the


564
00:19:08,456 --> 00:19:08,936
system.


565
00:19:08,936 --> 00:19:11,356
So this tells the OS, just hang


566
00:19:11,356 --> 00:19:12,076
onto this flow.


567
00:19:12,076 --> 00:19:13,216
Don't do anything further with


568
00:19:13,216 --> 00:19:14,676
it until I resume the flow.


569
00:19:16,756 --> 00:19:17,626
Once the user makes their


570
00:19:17,626 --> 00:19:19,786
decision, I create a new flow


571
00:19:19,786 --> 00:19:21,686
verdict of either Allow or Drop,


572
00:19:22,006 --> 00:19:23,196
depending upon what the user's


573
00:19:23,196 --> 00:19:25,186
decision was, and then I call


574
00:19:25,186 --> 00:19:28,226
Resume Flow with the new


575
00:19:29,346 --> 00:19:29,746
verdict.


576
00:19:30,056 --> 00:19:32,316
Alright. So that was an example


577
00:19:32,566 --> 00:19:35,096
of an app that uses the System


578
00:19:35,096 --> 00:19:37,416
Extensions and Content Filter


579
00:19:37,456 --> 00:19:40,546
APIs to implement a simple


580
00:19:40,546 --> 00:19:40,926
firewall.


581
00:19:46,066 --> 00:19:47,246
Next I want to talk about


582
00:19:47,246 --> 00:19:49,856
Transparent Proxy Apps.


583
00:19:50,186 --> 00:19:51,946
So one example of a Transparent


584
00:19:51,946 --> 00:19:54,886
Proxy App is a cloud security


585
00:19:54,886 --> 00:19:55,096
app.


586
00:19:55,576 --> 00:19:56,816
These are apps that divert


587
00:19:56,816 --> 00:19:58,346
traffic destined for specific


588
00:19:58,346 --> 00:20:00,866
websites to a cloud service.


589
00:20:01,416 --> 00:20:02,856
And that cloud service applies


590
00:20:02,856 --> 00:20:04,406
some additional security checks


591
00:20:04,406 --> 00:20:05,596
to the traffic such as


592
00:20:05,956 --> 00:20:07,596
additional user authentication


593
00:20:07,596 --> 00:20:08,586
or authorization.


594
00:20:10,326 --> 00:20:12,496
Another example of a Transparent


595
00:20:12,496 --> 00:20:15,056
Proxy App is an app that applies


596
00:20:15,096 --> 00:20:16,376
some special transformation to


597
00:20:16,376 --> 00:20:18,436
traffic such as applying an


598
00:20:18,756 --> 00:20:20,366
encryption algorithm to network


599
00:20:20,366 --> 00:20:23,986
traffic or caching resources


600
00:20:23,986 --> 00:20:25,376
downloaded over the Web in some


601
00:20:25,376 --> 00:20:26,026
special way.


602
00:20:27,236 --> 00:20:29,246
Transparent Proxy Apps can also


603
00:20:29,246 --> 00:20:31,466
multiplex multiple flows of


604
00:20:31,466 --> 00:20:32,716
network traffic over a single


605
00:20:32,716 --> 00:20:33,306
connection.


606
00:20:34,476 --> 00:20:37,106
Or they can use some custom


607
00:20:37,156 --> 00:20:38,746
special protocol that reduces


608
00:20:38,746 --> 00:20:39,646
network latency.


609
00:20:40,166 --> 00:20:41,096
There are a lot of really


610
00:20:41,096 --> 00:20:42,366
interesting use cases for


611
00:20:42,366 --> 00:20:43,686
Transparent Proxy Apps.


612
00:20:44,156 --> 00:20:45,276
So I'm really excited to tell


613
00:20:45,276 --> 00:20:47,376
you that in macOS Catalina we've


614
00:20:47,376 --> 00:20:49,006
introduced some new APIs in the


615
00:20:49,006 --> 00:20:50,386
network extension framework that


616
00:20:50,806 --> 00:20:52,666
allow you to create Transparent


617
00:20:52,666 --> 00:20:55,246
Proxy Apps without using Kernel


618
00:20:55,246 --> 00:20:55,926
Extensions.


619
00:20:57,996 --> 00:20:58,886
So let's go ahead and take a


620
00:20:58,886 --> 00:20:59,986
look at these APIs.


621
00:21:00,296 --> 00:21:01,706
They're in the NetworkExtension


622
00:21:01,706 --> 00:21:02,246
Framework.


623
00:21:02,786 --> 00:21:03,946
Let's see how you use them in


624
00:21:03,946 --> 00:21:04,386
your app.


625
00:21:09,046 --> 00:21:11,916
So in your main UI App, you use


626
00:21:11,916 --> 00:21:14,376
any Transparent Proxy Manager to


627
00:21:14,376 --> 00:21:15,576
create Transparent Proxy


628
00:21:15,576 --> 00:21:17,716
configurations and register your


629
00:21:17,716 --> 00:21:19,216
Transparent Proxy with the


630
00:21:19,216 --> 00:21:19,856
system.


631
00:21:19,856 --> 00:21:21,516
So your system knows how to run


632
00:21:21,976 --> 00:21:25,396
your Transparent Proxy.


633
00:21:25,956 --> 00:21:27,126
You also create a system


634
00:21:27,126 --> 00:21:27,686
extension.


635
00:21:27,686 --> 00:21:28,936
This is where your proxy will


636
00:21:28,936 --> 00:21:29,226
run.


637
00:21:30,896 --> 00:21:33,796
So these APIs allow you to proxy


638
00:21:33,886 --> 00:21:35,516
flows of network data at the


639
00:21:35,516 --> 00:21:36,186
flow layer.


640
00:21:37,456 --> 00:21:38,786
To do this, you create a


641
00:21:38,786 --> 00:21:41,826
subclass of NEAppProxyProvider.


642
00:21:42,306 --> 00:21:44,236
Now, unlike content filter, by


643
00:21:44,236 --> 00:21:45,786
default the system does not


644
00:21:45,786 --> 00:21:48,216
divert any flows to your proxy.


645
00:21:49,036 --> 00:21:51,246
So you must create a set of


646
00:21:51,356 --> 00:21:54,126
NENetworkRules that specify what


647
00:21:54,196 --> 00:21:56,986
flows you want to proxy.


648
00:21:58,036 --> 00:21:59,536
So once your Transparent Proxy


649
00:21:59,536 --> 00:22:00,996
is up and running and you've


650
00:22:01,216 --> 00:22:03,416
installed your NENetworkRules,


651
00:22:03,416 --> 00:22:10,246
as new TCP and UDP flows are


652
00:22:10,246 --> 00:22:11,826
opened that match your rules,


653
00:22:12,226 --> 00:22:14,276
those flows are diverted to your


654
00:22:14,316 --> 00:22:15,886
NEAppProxyProvider subclass.


655
00:22:16,386 --> 00:22:18,256
From there, it's up to you to


656
00:22:18,256 --> 00:22:19,786
completely handle each


657
00:22:19,786 --> 00:22:21,326
individual flow.


658
00:22:22,346 --> 00:22:24,866
You can multiplex the flow over


659
00:22:24,866 --> 00:22:26,296
another connection, apply your


660
00:22:26,296 --> 00:22:28,156
special transformation, whatever


661
00:22:28,156 --> 00:22:28,896
you need to do.


662
00:22:28,896 --> 00:22:31,826
It's completely up to you.


663
00:22:31,826 --> 00:22:33,806
So there's a brief overview of


664
00:22:33,806 --> 00:22:35,046
how to use these Transparent


665
00:22:35,046 --> 00:22:37,846
Proxy APIs in your app.


666
00:22:41,096 --> 00:22:43,176
Next, let's take a look at DNS


667
00:22:43,176 --> 00:22:43,996
Proxy Apps.


668
00:22:45,036 --> 00:22:46,656
Now the DNS protocol is a great


669
00:22:46,656 --> 00:22:48,066
protocol, very powerful and


670
00:22:48,066 --> 00:22:48,646
useful.


671
00:22:49,186 --> 00:22:50,586
But it's not very secure.


672
00:22:51,746 --> 00:22:55,556
So it's pretty easy to spoof DNS


673
00:22:55,556 --> 00:22:57,996
responses and cause browsers to


674
00:22:57,996 --> 00:23:01,486
go to malicious websites or to


675
00:23:01,486 --> 00:23:03,506
spy on somebody's Internet


676
00:23:03,506 --> 00:23:04,826
browsing activity simply by


677
00:23:04,826 --> 00:23:06,446
looking at the DNS queries that


678
00:23:06,446 --> 00:23:07,016
they're sending.


679
00:23:07,666 --> 00:23:09,756
So to address these


680
00:23:09,756 --> 00:23:12,896
deficiencies, DNS Proxies apply


681
00:23:12,896 --> 00:23:14,626
additional security to the DNS


682
00:23:14,736 --> 00:23:15,486
Protocol.


683
00:23:16,836 --> 00:23:20,396
For example, the app may apply


684
00:23:20,396 --> 00:23:22,166
some encryption to DNS traffic


685
00:23:22,426 --> 00:23:24,406
or a proxy DNS traffic over some


686
00:23:24,406 --> 00:23:25,476
sort of secure channel.


687
00:23:27,006 --> 00:23:28,306
So I'm pleased to tell you that


688
00:23:28,306 --> 00:23:29,736
in macOS Catalina we've


689
00:23:29,736 --> 00:23:31,536
introduced some great new APIs


690
00:23:31,536 --> 00:23:34,176
that allow you to implement DNS


691
00:23:34,266 --> 00:23:36,596
Proxy Apps without using Network


692
00:23:36,596 --> 00:23:37,556
Kernel Extensions.


693
00:23:42,326 --> 00:23:44,266
So these APIs are in the


694
00:23:44,266 --> 00:23:45,476
NetworkExtension Framework.


695
00:23:46,076 --> 00:23:47,666
They were actually introduced in


696
00:23:47,796 --> 00:23:50,916
iOS 11, so in macOS Catalina we


697
00:23:50,916 --> 00:23:52,006
brought them over and made them


698
00:23:52,006 --> 00:23:53,046
available on the Mac.


699
00:23:53,906 --> 00:23:55,276
Let's take a look at these APIs


700
00:23:55,276 --> 00:23:57,226
and how they work in your app.


701
00:23:57,976 --> 00:23:59,036
So in your main new IA app,


702
00:23:59,266 --> 00:24:01,546
you'll use NEDNSProxyManager to


703
00:24:01,546 --> 00:24:02,716
create your DNS Proxy


704
00:24:02,716 --> 00:24:04,856
configuration, register your


705
00:24:04,856 --> 00:24:07,046
configuration with the system so


706
00:24:07,046 --> 00:24:08,426
the system knows how to run your


707
00:24:09,486 --> 00:24:11,756
DNS Proxy.


708
00:24:11,806 --> 00:24:13,356
You create a System Extension.


709
00:24:13,496 --> 00:24:14,846
This is where your DNS Proxy


710
00:24:15,226 --> 00:24:15,736
will run.


711
00:24:16,936 --> 00:24:19,206
And you implement your proxy as


712
00:24:19,206 --> 00:24:20,776
a subclass of the


713
00:24:20,776 --> 00:24:23,456
NEDNSProxyProvider Class.


714
00:24:24,616 --> 00:24:26,246
So once your DNS Proxy


715
00:24:26,246 --> 00:24:27,626
configuration is registered with


716
00:24:27,626 --> 00:24:28,946
the system, your system


717
00:24:28,946 --> 00:24:31,506
extension is running, the system


718
00:24:31,506 --> 00:24:33,386
will start diverting all DNS


719
00:24:33,386 --> 00:24:35,296
queries to your


720
00:24:35,296 --> 00:24:37,136
NEDNSProxyProvider Subclass.


721
00:24:37,646 --> 00:24:40,376
From there it's totally up to


722
00:24:40,376 --> 00:24:42,166
you to completely handle each


723
00:24:42,166 --> 00:24:42,996
DNS query.


724
00:24:43,376 --> 00:24:44,816
You can encrypt it.


725
00:24:44,816 --> 00:24:46,096
You can send it over some sort


726
00:24:46,096 --> 00:24:47,106
of secure channel.


727
00:24:47,436 --> 00:24:51,126
It's totally up to you.


728
00:24:51,126 --> 00:24:53,206
Alright. So that's an overview


729
00:24:53,206 --> 00:24:55,296
of the DNX Proxy APIs.


730
00:24:55,856 --> 00:24:57,486
Next I'm going to talk about VPN


731
00:24:57,486 --> 00:24:57,866
Apps.


732
00:24:58,776 --> 00:25:01,856
So the classic use case for VPN


733
00:25:01,856 --> 00:25:04,936
Apps is to allow companies to


734
00:25:04,936 --> 00:25:06,906
provide their employees with


735
00:25:06,906 --> 00:25:10,146
secure remote access to their


736
00:25:10,146 --> 00:25:11,286
internal corporate network.


737
00:25:12,856 --> 00:25:14,386
Another use case that has grown


738
00:25:14,386 --> 00:25:16,096
in popularity a lot in recent


739
00:25:16,096 --> 00:25:18,436
years are personal VPN Apps.


740
00:25:19,316 --> 00:25:20,806
So these are apps that are used


741
00:25:20,806 --> 00:25:22,886
to securely and anonymously


742
00:25:23,086 --> 00:25:23,906
browse the Internet.


743
00:25:24,586 --> 00:25:29,096
So we actually introduced VPN


744
00:25:29,096 --> 00:25:31,636
APIs on macOS back in macOS


745
00:25:31,636 --> 00:25:33,046
10.10.


746
00:25:33,626 --> 00:25:35,326
So in this release we've


747
00:25:35,326 --> 00:25:37,036
enhanced those APIs to make them


748
00:25:37,126 --> 00:25:37,666
even better.


749
00:25:37,666 --> 00:25:39,836
Let's take a look at the VPN


750
00:25:39,836 --> 00:25:41,966
APIs and how you use them in


751
00:25:41,966 --> 00:25:43,026
your app.


752
00:25:44,836 --> 00:25:47,006
So in your main UI app, you use


753
00:25:47,886 --> 00:25:51,196
NETunnelProviderManager to


754
00:25:51,196 --> 00:25:53,696
create VPN configurations and


755
00:25:53,696 --> 00:25:55,836
register your VPN client with


756
00:25:56,616 --> 00:25:57,916
the system.


757
00:25:57,956 --> 00:25:59,016
You also create a System


758
00:25:59,016 --> 00:26:00,176
Extension, which is where your


759
00:26:00,176 --> 00:26:02,096
VPN client code will run.


760
00:26:02,826 --> 00:26:07,646
You implement your VPN client as


761
00:26:07,646 --> 00:26:08,816
a subclass of the


762
00:26:08,816 --> 00:26:10,766
NEPacketTunnelProvider class.


763
00:26:12,076 --> 00:26:13,626
The system creates a utun


764
00:26:13,626 --> 00:26:16,136
interface corresponding to your


765
00:26:16,176 --> 00:26:17,746
NEPacketTunnelProvider.


766
00:26:18,766 --> 00:26:20,986
Your NEPacketTunnelProvider is


767
00:26:20,986 --> 00:26:22,596
responsible for telling the


768
00:26:22,596 --> 00:26:25,936
system about which networks you


769
00:26:25,936 --> 00:26:27,616
want to be routed through your


770
00:26:27,916 --> 00:26:28,000
VPN.


771
00:26:30,526 --> 00:26:32,176
So once you've specified your


772
00:26:32,176 --> 00:26:33,776
routing rules for your VPN and


773
00:26:33,776 --> 00:26:34,556
those are installed in the


774
00:26:34,556 --> 00:26:37,066
system, as IP packets get routed


775
00:26:37,206 --> 00:26:39,556
to your utun interface per those


776
00:26:39,556 --> 00:26:42,046
routes, those packets get


777
00:26:42,046 --> 00:26:43,216
diverted to your


778
00:26:43,256 --> 00:26:45,906
NEPacketTunnelProvider where you


779
00:26:45,906 --> 00:26:49,526
can send those packets through


780
00:26:49,526 --> 00:26:50,986
your tunnel connection using


781
00:26:50,986 --> 00:26:53,846
your custom tunneling protocol.


782
00:26:54,306 --> 00:26:54,416
Okay.


783
00:26:55,196 --> 00:26:56,966
So there's a brief overview of


784
00:26:56,966 --> 00:26:58,686
how the VPN APIs work.


785
00:26:59,436 --> 00:27:00,406
Next I want to talk about a


786
00:27:00,406 --> 00:27:01,596
couple of enhancements we've


787
00:27:01,596 --> 00:27:03,316
made to the VPN APIs.


788
00:27:04,446 --> 00:27:05,126
So the first is


789
00:27:05,126 --> 00:27:06,406
IncludeAllNetworks.


790
00:27:06,496 --> 00:27:08,326
This is a new flag you can set


791
00:27:08,326 --> 00:27:09,846
on your VPN configuration.


792
00:27:10,236 --> 00:27:12,176
This is particularly useful in


793
00:27:12,206 --> 00:27:12,806
personal VPN apps.


794
00:27:12,806 --> 00:27:15,386
In these apps, it's really


795
00:27:15,386 --> 00:27:17,856
important that no traffic leak


796
00:27:17,856 --> 00:27:19,816
outside of the VPN tunnel.


797
00:27:19,816 --> 00:27:21,386
You want all your traffic to be


798
00:27:21,386 --> 00:27:22,346
going through the VPN


799
00:27:22,346 --> 00:27:23,926
[applause].


800
00:27:23,926 --> 00:27:24,136
Yes.


801
00:27:26,876 --> 00:27:29,256
So by enabling


802
00:27:29,256 --> 00:27:30,416
IncludeAllNetworks on your


803
00:27:30,416 --> 00:27:31,926
configuration, you cause this to


804
00:27:31,926 --> 00:27:32,256
happen.


805
00:27:32,256 --> 00:27:33,736
The system will route all


806
00:27:33,736 --> 00:27:36,586
traffic through the VPN and if


807
00:27:36,586 --> 00:27:38,356
the VPN is not available


808
00:27:38,356 --> 00:27:39,716
temporarily for some reason --


809
00:27:40,156 --> 00:27:42,526
for example, if the Mac is


810
00:27:42,686 --> 00:27:44,086
switching between the WiFi


811
00:27:44,086 --> 00:27:46,396
networks it's connected to or if


812
00:27:46,396 --> 00:27:48,076
your VPN is just down for --


813
00:27:48,076 --> 00:27:49,526
temporarily for whatever reason,


814
00:27:50,706 --> 00:27:52,766
in those scenarios, traffic will


815
00:27:52,766 --> 00:27:54,546
actually be dropped instead of


816
00:27:54,546 --> 00:27:58,066
being routed outside of the VPN.


817
00:27:58,616 --> 00:27:59,606
Now, if you've enabled


818
00:27:59,606 --> 00:28:01,456
IncludeAllNetworks, but you


819
00:28:01,796 --> 00:28:03,666
still want to allow access to


820
00:28:03,666 --> 00:28:05,386
local network resources such as


821
00:28:05,386 --> 00:28:07,796
printers, you can enable


822
00:28:07,796 --> 00:28:10,486
ExcludeLocalNetworks to allow


823
00:28:10,486 --> 00:28:11,696
that access to still happen.


824
00:28:12,316 --> 00:28:12,416
Okay.


825
00:28:14,516 --> 00:28:16,756
So we've also made some


826
00:28:16,756 --> 00:28:18,566
enhancements to Per-App VPN.


827
00:28:19,706 --> 00:28:21,556
We've added three new lists of


828
00:28:21,556 --> 00:28:23,226
domains that you can use to


829
00:28:23,226 --> 00:28:26,946
route traffic to your Per-App


830
00:28:27,746 --> 00:28:27,866
VPN.


831
00:28:28,096 --> 00:28:31,246
So the way these work is, for


832
00:28:31,246 --> 00:28:33,576
each one of these lists, if the


833
00:28:33,576 --> 00:28:36,676
corresponding app creates a


834
00:28:36,676 --> 00:28:39,946
connection to a host and that


835
00:28:39,946 --> 00:28:42,146
host domain matches one of the


836
00:28:42,146 --> 00:28:44,746
domains in the list, that


837
00:28:44,746 --> 00:28:45,786
connection's traffic will be


838
00:28:45,786 --> 00:28:47,866
routed through the Per-App VPN.


839
00:28:48,796 --> 00:28:49,826
Let's look at an example.


840
00:28:49,946 --> 00:28:51,236
So, if you were using the Mail


841
00:28:51,406 --> 00:28:52,606
App, and you have the Mail App


842
00:28:52,606 --> 00:28:54,906
set up with two accounts -- you


843
00:28:54,906 --> 00:28:56,796
have your personal e-mail


844
00:28:56,796 --> 00:28:58,526
account and you have your


845
00:28:58,526 --> 00:29:00,486
corporate e-mail account.


846
00:29:01,116 --> 00:29:04,216
By specifying the domain of the


847
00:29:04,216 --> 00:29:06,736
corporate e-mail server in the


848
00:29:06,736 --> 00:29:12,296
mail domain's array, when Mail


849
00:29:12,296 --> 00:29:13,926
opens up a new connection to


850
00:29:13,926 --> 00:29:15,726
your corporate e-mail server,


851
00:29:15,886 --> 00:29:17,016
that connection will be routed


852
00:29:17,016 --> 00:29:20,116
through the Per-App VPN, while


853
00:29:20,116 --> 00:29:21,756
connections to your personal


854
00:29:21,756 --> 00:29:24,346
e-mail server will not be routed


855
00:29:24,346 --> 00:29:26,000
through the Per-App VPN.


856
00:29:28,326 --> 00:29:29,556
So the CalendarDomains and


857
00:29:29,556 --> 00:29:32,506
ContactsDomains lists behave the


858
00:29:32,506 --> 00:29:34,546
same way except for the Calendar


859
00:29:34,546 --> 00:29:36,146
App and the Contacts App.


860
00:29:36,756 --> 00:29:36,856
Okay.


861
00:29:39,016 --> 00:29:41,696
So that was a brief overview of


862
00:29:41,696 --> 00:29:43,666
the VPN APIs that are available


863
00:29:43,666 --> 00:29:45,236
on macOS, and some enhancements


864
00:29:45,236 --> 00:29:46,676
we've made that allow you to


865
00:29:46,676 --> 00:29:49,816
create VPN Apps without the use


866
00:29:49,816 --> 00:29:51,076
of Network Kernel Extensions.


867
00:29:51,076 --> 00:29:55,106
Next, I want to talk about


868
00:29:55,106 --> 00:29:56,126
Virtual Machine Apps.


869
00:29:56,286 --> 00:29:57,946
So these are apps that create


870
00:29:57,946 --> 00:29:59,746
and manage virtual machines.


871
00:30:00,416 --> 00:30:02,706
And, honestly, a virtual machine


872
00:30:02,706 --> 00:30:04,086
probably is not very useful if


873
00:30:04,086 --> 00:30:05,586
it can't connect to the network.


874
00:30:07,076 --> 00:30:08,846
So on macOS we have the


875
00:30:08,846 --> 00:30:10,476
vmnet.framework that allows you


876
00:30:10,476 --> 00:30:11,976
to do just that, connect virtual


877
00:30:11,976 --> 00:30:13,576
machines to the network.


878
00:30:14,566 --> 00:30:15,956
The vmnet.framework was


879
00:30:15,956 --> 00:30:17,826
introduced on macOS back in


880
00:30:17,826 --> 00:30:19,126
macOS 10.10.


881
00:30:19,626 --> 00:30:21,326
But we made a lot of


882
00:30:21,326 --> 00:30:22,716
enhancements in this release to


883
00:30:22,716 --> 00:30:24,766
give you more ways to connect


884
00:30:24,766 --> 00:30:26,026
virtual machines to the network.


885
00:30:26,616 --> 00:30:28,656
The way the framework works is


886
00:30:28,656 --> 00:30:30,166
it gives you several different


887
00:30:30,166 --> 00:30:31,646
modes of connecting virtual


888
00:30:31,646 --> 00:30:32,636
machines to the network.


889
00:30:33,706 --> 00:30:35,346
We've made some enhancements to


890
00:30:35,516 --> 00:30:36,246
Shared Mode.


891
00:30:36,666 --> 00:30:38,516
You can now use IPv6 in Shared


892
00:30:38,516 --> 00:30:38,786
Mode.


893
00:30:39,536 --> 00:30:41,296
You can specify the range of IPs


894
00:30:41,296 --> 00:30:42,546
you want to assign to your


895
00:30:42,546 --> 00:30:43,426
virtual machines.


896
00:30:44,016 --> 00:30:45,366
And you can set up Port


897
00:30:45,366 --> 00:30:46,896
Forwarding Rules between your


898
00:30:46,896 --> 00:30:48,426
virtual machines and the


899
00:30:49,016 --> 00:30:49,206
network.


900
00:30:50,096 --> 00:30:51,686
We've also added a brand new


901
00:30:51,686 --> 00:30:52,936
mode called Bridged Mode.


902
00:30:53,396 --> 00:30:54,416
In this mode your virtual


903
00:30:54,416 --> 00:30:55,756
machines show up on the local


904
00:30:55,756 --> 00:30:57,016
network as if they were


905
00:30:57,016 --> 00:30:58,076
physically connected to the


906
00:30:58,076 --> 00:30:58,776
local network.


907
00:30:59,396 --> 00:30:59,496
Okay.


908
00:31:00,616 --> 00:31:04,586
So that's a brief overview of


909
00:31:04,706 --> 00:31:06,396
the Virtual Machine APIs you can


910
00:31:06,396 --> 00:31:07,916
use to connect virtual machines


911
00:31:07,916 --> 00:31:08,506
to the network.


912
00:31:11,406 --> 00:31:12,626
Next, I want to briefly talk


913
00:31:12,626 --> 00:31:15,286
about apps that use custom


914
00:31:15,286 --> 00:31:16,896
low-layer protocols.


915
00:31:18,066 --> 00:31:20,316
So one example of such an app is


916
00:31:20,316 --> 00:31:21,596
an app that needs to communicate


917
00:31:21,986 --> 00:31:24,106
with a piece of hardware such as


918
00:31:24,106 --> 00:31:27,286
a camera or an audio device, and


919
00:31:28,096 --> 00:31:31,316
that device only understands


920
00:31:31,366 --> 00:31:33,516
some low-layer protocol like a


921
00:31:33,516 --> 00:31:35,086
custom link-layer protocol or a


922
00:31:35,086 --> 00:31:36,416
custom IP protocol.


923
00:31:37,696 --> 00:31:39,746
Another example of an app that


924
00:31:39,746 --> 00:31:42,106
uses a custom IP protocol, for


925
00:31:42,106 --> 00:31:44,166
example, is an app that needs to


926
00:31:44,166 --> 00:31:45,666
communicate with other machines


927
00:31:45,986 --> 00:31:48,016
on a local network using some


928
00:31:48,366 --> 00:31:49,966
highly-optimized protocol.


929
00:31:52,996 --> 00:31:55,466
So I'm pleased to announce that


930
00:31:55,876 --> 00:31:57,116
in macOS Catalina we've


931
00:31:57,116 --> 00:31:58,616
introduced some new APIs that


932
00:31:58,616 --> 00:32:00,496
allow you to communicate over


933
00:32:00,496 --> 00:32:02,206
the network using custom


934
00:32:02,206 --> 00:32:03,806
low-layer protocols without the


935
00:32:03,806 --> 00:32:05,796
use of a Kernel Extension.


936
00:32:07,756 --> 00:32:10,496
First, let's look at the API for


937
00:32:10,496 --> 00:32:11,866
Custom IP Protocols.


938
00:32:12,516 --> 00:32:15,826
This is a new API in a Network


939
00:32:15,826 --> 00:32:16,286
Framework.


940
00:32:17,836 --> 00:32:20,316
The way this works is in your


941
00:32:20,316 --> 00:32:23,316
app you create a new kind of


942
00:32:23,376 --> 00:32:26,046
NWParameters object specifying


943
00:32:26,046 --> 00:32:28,176
the identifier number for your


944
00:32:28,176 --> 00:32:29,466
custom IP protocol.


945
00:32:30,146 --> 00:32:31,736
You then use that NWParameters


946
00:32:31,736 --> 00:32:33,016
object to create an


947
00:32:33,016 --> 00:32:33,986
NWConnection.


948
00:32:34,836 --> 00:32:35,896
And you then use that


949
00:32:35,896 --> 00:32:38,836
NWConnection just as you would a


950
00:32:38,836 --> 00:32:41,286
TCP or UDP NWConnection to


951
00:32:41,286 --> 00:32:42,426
communicate over the network


952
00:32:42,426 --> 00:32:44,536
using your Custom IP Protocol.


953
00:32:46,486 --> 00:32:47,986
For a lot more details about


954
00:32:47,986 --> 00:32:49,716
NWConnection, please see last


955
00:32:49,716 --> 00:32:50,816
year's talk, "Introducing


956
00:32:50,816 --> 00:32:51,696
Network Framework."


957
00:32:52,356 --> 00:32:56,226
Now let's look at a brief code


958
00:32:56,226 --> 00:32:58,626
sample showing how to use this


959
00:32:58,626 --> 00:33:00,066
Custom IP Protocol API.


960
00:33:01,626 --> 00:33:02,866
So, first what I'm doing here is


961
00:33:02,866 --> 00:33:05,206
creating an NWParameters object


962
00:33:05,206 --> 00:33:08,416
using this new constructor that


963
00:33:08,486 --> 00:33:10,306
takes in the identifier number


964
00:33:10,816 --> 00:33:12,186
for a Custom IP Protocol.


965
00:33:12,186 --> 00:33:14,796
Now, it's important to note here


966
00:33:14,796 --> 00:33:16,306
that you must pass the


967
00:33:16,306 --> 00:33:17,646
identifier number for a Custom


968
00:33:17,646 --> 00:33:18,376
Protocol here.


969
00:33:18,376 --> 00:33:20,296
You can't pass the number of a


970
00:33:20,296 --> 00:33:21,746
protocol that the system is


971
00:33:21,746 --> 00:33:24,166
already handling such as TCP,


972
00:33:24,166 --> 00:33:25,926
UDP, or ICMP.


973
00:33:30,066 --> 00:33:32,146
Next, I create the destination


974
00:33:32,146 --> 00:33:33,196
that I want to communicate with


975
00:33:34,356 --> 00:33:36,036
and I create the NWConnection,


976
00:33:36,036 --> 00:33:37,676
passing in the destination and


977
00:33:38,066 --> 00:33:38,886
my parameters.


978
00:33:40,836 --> 00:33:42,776
So, from there I use the


979
00:33:42,776 --> 00:33:44,446
connection just as I would any


980
00:33:44,446 --> 00:33:46,846
other NWConnection, start the


981
00:33:46,846 --> 00:33:47,886
connection, and I can start


982
00:33:47,886 --> 00:33:50,676
sending/receiving packets using


983
00:33:50,676 --> 00:33:51,966
my Custom IP Protocol.


984
00:33:56,076 --> 00:33:57,896
Next, let's look at the Custom


985
00:33:57,896 --> 00:33:59,556
Link Layer Protocol APIs.


986
00:34:00,316 --> 00:34:01,336
These have also been added to


987
00:34:01,336 --> 00:34:02,136
Network Framework.


988
00:34:03,896 --> 00:34:05,506
The way this works is in your


989
00:34:05,506 --> 00:34:08,176
app you create a


990
00:34:08,176 --> 00:34:10,235
NWEthernetChannelObject


991
00:34:10,916 --> 00:34:13,396
specifying the -- your custom


992
00:34:13,396 --> 00:34:14,295
ether type that you're going to


993
00:34:14,295 --> 00:34:14,926
be using.


994
00:34:15,906 --> 00:34:17,416
You then use your Channel Object


995
00:34:17,505 --> 00:34:19,016
to communicate over an Ethernet


996
00:34:19,016 --> 00:34:20,706
Interface using your custom


997
00:34:20,706 --> 00:34:21,906
ether type.


998
00:34:22,755 --> 00:34:24,206
Let's look at some code to see


999
00:34:24,206 --> 00:34:24,906
how this works.


1000
00:34:25,525 --> 00:34:29,045
So first I get a reference to


1001
00:34:29,216 --> 00:34:30,786
the current wired Ethernet


1002
00:34:30,786 --> 00:34:31,396
Interface.


1003
00:34:32,576 --> 00:34:33,985
Then I create my


1004
00:34:33,985 --> 00:34:36,036
NWEthernetChannel object passing


1005
00:34:36,036 --> 00:34:38,516
in the Interface and my custom


1006
00:34:38,516 --> 00:34:38,946
etherType.


1007
00:34:40,386 --> 00:34:41,636
Now, just like with the custom


1008
00:34:41,636 --> 00:34:45,146
IP Protocol API, you must pass a


1009
00:34:45,146 --> 00:34:46,436
custom etherType here.


1010
00:34:46,886 --> 00:34:48,406
You can't pass an etherType that


1011
00:34:48,406 --> 00:34:49,585
the system is already handling


1012
00:34:49,585 --> 00:34:51,416
such as IP or IPV6.


1013
00:34:54,376 --> 00:34:56,926
After creating the channel, I


1014
00:34:56,926 --> 00:34:59,676
set some callback blocks on the


1015
00:34:59,676 --> 00:35:00,046
channel.


1016
00:35:00,506 --> 00:35:03,136
The stateUpdateHandler block


1017
00:35:04,026 --> 00:35:06,926
gets called as the state of the


1018
00:35:06,926 --> 00:35:07,796
channel changes.


1019
00:35:08,476 --> 00:35:09,726
When the channel becomes ready,


1020
00:35:10,066 --> 00:35:11,556
I can go ahead and start sending


1021
00:35:11,556 --> 00:35:13,286
and receiving packets that use


1022
00:35:13,286 --> 00:35:14,926
my custom etherType.


1023
00:35:15,836 --> 00:35:17,346
The receiveHandler block gets


1024
00:35:17,346 --> 00:35:19,166
called when a new packet that


1025
00:35:19,166 --> 00:35:21,136
uses my custom etherType is


1026
00:35:21,136 --> 00:35:22,106
received from the network.


1027
00:35:23,596 --> 00:35:25,376
So after my channel is all set


1028
00:35:25,376 --> 00:35:27,636
up, I go ahead and start it so I


1029
00:35:27,636 --> 00:35:29,676
can start communicating using my


1030
00:35:29,676 --> 00:35:30,716
custom etherType.


1031
00:35:31,316 --> 00:35:31,446
Great.


1032
00:35:34,816 --> 00:35:37,266
So that was a brief overview of


1033
00:35:37,266 --> 00:35:38,396
the new APIs we've added that


1034
00:35:38,396 --> 00:35:40,286
allow you to communicate over


1035
00:35:40,286 --> 00:35:41,456
the network using custom


1036
00:35:41,456 --> 00:35:43,346
low-layer protocols without the


1037
00:35:43,346 --> 00:35:44,716
use of a Kernel Extension.


1038
00:35:46,686 --> 00:35:47,076
Alright.


1039
00:35:47,076 --> 00:35:48,346
So we've covered a lot of ground


1040
00:35:48,346 --> 00:35:49,746
here today, a lot of great new


1041
00:35:49,746 --> 00:35:52,276
APIs that we've added in macOS


1042
00:35:52,276 --> 00:35:54,086
Catalina that allow you to


1043
00:35:54,146 --> 00:35:55,436
create apps in all these


1044
00:35:55,436 --> 00:35:58,416
categories without the use of


1045
00:35:58,416 --> 00:35:59,666
Network Kernel Extensions.


1046
00:36:01,166 --> 00:36:02,246
So now I want to talk briefly


1047
00:36:02,246 --> 00:36:03,826
about the future of Network


1048
00:36:03,826 --> 00:36:04,826
Kernel Extensions.


1049
00:36:06,336 --> 00:36:07,696
So Network Kernel Extensions


1050
00:36:07,966 --> 00:36:09,796
have several problems.


1051
00:36:11,066 --> 00:36:13,196
First, they're hard to develop,


1052
00:36:13,566 --> 00:36:16,936
so I mentioned before if you're


1053
00:36:16,936 --> 00:36:18,206
testing out new functionality,


1054
00:36:18,206 --> 00:36:19,276
you probably have to reboot a


1055
00:36:19,276 --> 00:36:19,936
lot.


1056
00:36:19,936 --> 00:36:22,196
And also, in the case of Network


1057
00:36:22,196 --> 00:36:24,196
Kernel Extensions you frequently


1058
00:36:24,196 --> 00:36:25,326
have to work with some very


1059
00:36:25,326 --> 00:36:27,286
low-level concepts like doing


1060
00:36:27,286 --> 00:36:29,626
manual M-Buff Chain Manipulation


1061
00:36:30,196 --> 00:36:31,256
which is very tricky code.


1062
00:36:31,256 --> 00:36:32,776
It's very easy to get it wrong.


1063
00:36:34,606 --> 00:36:37,446
Also Kernel Extensions are hard


1064
00:36:37,446 --> 00:36:37,916
to debug.


1065
00:36:37,916 --> 00:36:39,026
You have to have two separate


1066
00:36:39,026 --> 00:36:41,246
machines and, as I mentioned


1067
00:36:41,246 --> 00:36:42,906
before, single stepping through


1068
00:36:42,906 --> 00:36:44,966
your code can be very tricky if


1069
00:36:44,966 --> 00:36:47,346
it works at all.


1070
00:36:48,186 --> 00:36:51,466
Also Kernel Extensions can -- a


1071
00:36:51,466 --> 00:36:52,876
stability problem in a Kernel


1072
00:36:52,876 --> 00:36:53,886
Extension can be really


1073
00:36:53,886 --> 00:36:55,246
catastrophic for the system.


1074
00:36:56,066 --> 00:36:57,466
So if your Kernel Extension


1075
00:36:57,466 --> 00:36:59,516
crashes, it just doesn't bring


1076
00:36:59,516 --> 00:37:00,196
down your app.


1077
00:37:00,756 --> 00:37:02,886
The entire system reboots, which


1078
00:37:02,886 --> 00:37:04,186
is extremely disruptive to the


1079
00:37:04,186 --> 00:37:06,316
user and can lead to serious


1080
00:37:06,316 --> 00:37:06,976
data loss.


1081
00:37:07,516 --> 00:37:11,016
So because of all these problems


1082
00:37:11,216 --> 00:37:13,396
with Kernel Extensions and


1083
00:37:13,396 --> 00:37:14,476
because we've reached this major


1084
00:37:14,476 --> 00:37:16,226
milestone on macOS where now we


1085
00:37:16,226 --> 00:37:19,836
have all these APIs that you can


1086
00:37:19,836 --> 00:37:22,006
use to create apps without the


1087
00:37:22,006 --> 00:37:23,126
use of Network Kernel


1088
00:37:23,126 --> 00:37:25,946
Extensions; in macOS Catalina,


1089
00:37:25,946 --> 00:37:27,436
we are officially deprecating


1090
00:37:27,836 --> 00:37:29,236
Network Kernel Extensions.


1091
00:37:31,276 --> 00:37:33,796
Now, your existing Network


1092
00:37:33,796 --> 00:37:35,326
Kernel Extensions should


1093
00:37:35,326 --> 00:37:37,636
continue to work just fine in


1094
00:37:37,636 --> 00:37:38,556
macOS Catalina.


1095
00:37:39,556 --> 00:37:41,416
However, we strongly urge you to


1096
00:37:41,416 --> 00:37:43,326
please check out all these great


1097
00:37:43,326 --> 00:37:46,106
new APIs that we've added and


1098
00:37:46,106 --> 00:37:47,786
start adopting them in your


1099
00:37:47,786 --> 00:37:49,826
apps, replacing your use of


1100
00:37:49,826 --> 00:37:51,176
Network Kernel Extensions.


1101
00:37:51,796 --> 00:37:53,346
It's important that you do this


1102
00:37:53,346 --> 00:37:55,356
as soon as you can because


1103
00:37:56,016 --> 00:37:58,236
before too much longer, we will


1104
00:37:58,236 --> 00:38:00,036
remove support for Network


1105
00:38:00,036 --> 00:38:01,596
Kernel Extensions entirely for


1106
00:38:01,596 --> 00:38:01,976
macOS.


1107
00:38:07,046 --> 00:38:07,176
Okay.


1108
00:38:07,346 --> 00:38:10,196
So today we talked about a bunch


1109
00:38:10,196 --> 00:38:13,006
of great new powerful APIs that


1110
00:38:13,006 --> 00:38:15,156
we have added in macOS Catalina


1111
00:38:15,436 --> 00:38:17,146
that allow you to create adapts


1112
00:38:17,636 --> 00:38:19,136
that filter network content,


1113
00:38:19,706 --> 00:38:22,026
proxy network content, tunnel


1114
00:38:22,026 --> 00:38:24,226
network content, connect virtual


1115
00:38:24,226 --> 00:38:26,596
machines to networks, and


1116
00:38:26,596 --> 00:38:27,736
communicate over the network


1117
00:38:27,736 --> 00:38:29,256
using custom low-layer


1118
00:38:29,256 --> 00:38:31,386
protocols, all without the use


1119
00:38:31,496 --> 00:38:33,026
of Network Kernel Extensions.


1120
00:38:34,656 --> 00:38:37,806
This is great news because we


1121
00:38:37,806 --> 00:38:39,506
strongly urge you to please


1122
00:38:39,506 --> 00:38:41,726
adopt these new APIs in your


1123
00:38:41,726 --> 00:38:43,646
Apps because Network Kernel


1124
00:38:43,646 --> 00:38:45,306
Extensions are now deprecated


1125
00:38:45,946 --> 00:38:47,006
and support for them will be


1126
00:38:47,006 --> 00:38:49,006
removed in a future release.


1127
00:38:51,096 --> 00:38:53,056
For more information, please


1128
00:38:53,386 --> 00:38:55,056
check out the webpage for this


1129
00:38:55,056 --> 00:38:55,526
session.


1130
00:38:55,526 --> 00:38:56,776
There you can find a link to the


1131
00:38:56,776 --> 00:38:58,786
sample simple tunnel code that I


1132
00:38:58,786 --> 00:39:00,416
demoed here today.


1133
00:39:00,976 --> 00:39:03,056
We also have a Networking Lab


1134
00:39:03,056 --> 00:39:04,026
that's actually going on right


1135
00:39:04,026 --> 00:39:04,386
now.


1136
00:39:04,916 --> 00:39:06,616
And so we'd love to see you


1137
00:39:06,616 --> 00:39:08,296
there to answer any questions


1138
00:39:08,296 --> 00:39:08,816
you may have.


1139
00:39:09,136 --> 00:39:10,296
Thank you so much for coming.


1140
00:39:10,296 --> 00:39:10,976
Enjoy the rest of your day.


1141
00:39:11,516 --> 00:39:18,840
[ Applause ]

