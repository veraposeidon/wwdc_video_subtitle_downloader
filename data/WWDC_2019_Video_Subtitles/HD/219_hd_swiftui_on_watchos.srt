1
00:00:09,516 --> 00:00:11,546
[ Applause ]


2
00:00:12,046 --> 00:00:14,776
>> Hello. Welcome.


3
00:00:15,796 --> 00:00:17,126
My name is Matthew Koonce


4
00:00:17,336 --> 00:00:18,206
and I'm an engineer


5
00:00:18,346 --> 00:00:19,676
on the watchOS Frameworks Team.


6
00:00:20,686 --> 00:00:22,396
I'm thrilled to be here today


7
00:00:22,696 --> 00:00:23,916
alongside my friend and


8
00:00:23,916 --> 00:00:25,536
colleague, Josh Weinberg, to


9
00:00:26,006 --> 00:00:27,216
talk about how we can use


10
00:00:27,246 --> 00:00:29,156
SwiftUI to build some really


11
00:00:29,156 --> 00:00:30,916
amazing experiences that happen


12
00:00:31,276 --> 00:00:32,665
right on your wrist.


13
00:00:33,936 --> 00:00:36,246
Since our humble beginnings in


14
00:00:36,246 --> 00:00:38,806
watchOS 1, the Apple Watch has


15
00:00:38,806 --> 00:00:41,046
evolved significantly, and


16
00:00:41,046 --> 00:00:42,776
watchOS has evolved right along


17
00:00:42,776 --> 00:00:43,726
with it.


18
00:00:44,296 --> 00:00:45,686
Over the years, we've been


19
00:00:45,686 --> 00:00:47,236
adding some really great APIs


20
00:00:47,236 --> 00:00:48,846
and features that have enabled


21
00:00:48,846 --> 00:00:50,616
all of you to build some really


22
00:00:50,616 --> 00:00:51,746
awesome experiences.


23
00:00:52,286 --> 00:00:55,046
But that is just the beginning,


24
00:00:56,206 --> 00:00:58,496
because with watchOS 6, we've


25
00:00:58,496 --> 00:00:59,766
brought the platform to a whole


26
00:00:59,766 --> 00:01:00,436
new level.


27
00:01:01,686 --> 00:01:03,636
With independent apps, we've


28
00:01:03,636 --> 00:01:06,156
decoupled the iOS and watch OS


29
00:01:06,156 --> 00:01:06,866
experiences.


30
00:01:08,056 --> 00:01:09,816
And for the first time, your


31
00:01:09,816 --> 00:01:11,096
apps can be downloaded right on


32
00:01:11,096 --> 00:01:12,736
Apple Watch with the new app


33
00:01:12,736 --> 00:01:13,046
store.


34
00:01:14,606 --> 00:01:15,736
We've also added support for


35
00:01:15,736 --> 00:01:17,126
some new APIs like streaming


36
00:01:17,126 --> 00:01:19,376
audio and extended runtime


37
00:01:19,376 --> 00:01:19,976
sessions.


38
00:01:20,526 --> 00:01:23,636
But we've also brought something


39
00:01:23,856 --> 00:01:26,346
super awesome, and that is the


40
00:01:26,536 --> 00:01:28,236
full power of SwiftUI to


41
00:01:28,236 --> 00:01:29,566
watchOS.


42
00:01:30,516 --> 00:01:35,186
[ Applause ]


43
00:01:35,686 --> 00:01:37,116
With SwiftUI's powerful


44
00:01:37,116 --> 00:01:39,256
declarative syntax and its


45
00:01:39,256 --> 00:01:40,866
integration right into Xcode's


46
00:01:40,866 --> 00:01:43,276
canvas, it's never been easier


47
00:01:43,276 --> 00:01:44,636
to express the views that you


48
00:01:44,636 --> 00:01:45,136
want to build.


49
00:01:46,266 --> 00:01:48,776
And on watchOS, it means that we


50
00:01:48,776 --> 00:01:50,076
have a whole new UI framework.


51
00:01:51,056 --> 00:01:52,916
And with it comes some really


52
00:01:52,916 --> 00:01:55,166
awesome features, APIs, and just


53
00:01:55,506 --> 00:01:56,926
a whole new world of


54
00:01:56,926 --> 00:01:58,706
possibilities for things that


55
00:01:58,706 --> 00:02:01,086
you can build.


56
00:02:01,266 --> 00:02:04,856
For example, with Lists, we


57
00:02:04,856 --> 00:02:06,366
finally brought support for


58
00:02:06,486 --> 00:02:08,626
swipe to delete and drag to


59
00:02:08,626 --> 00:02:08,996
reorder.


60
00:02:10,286 --> 00:02:11,856
And with SwiftUI's powerful


61
00:02:11,856 --> 00:02:13,566
animations, you can create


62
00:02:13,566 --> 00:02:14,696
completely complex,


63
00:02:14,776 --> 00:02:16,116
interruptible, and custom


64
00:02:16,116 --> 00:02:17,886
animations happening right on


65
00:02:18,616 --> 00:02:20,136
the watch.


66
00:02:20,346 --> 00:02:22,546
Now, SwiftUI is fully integrated


67
00:02:22,546 --> 00:02:24,736
with WatchKit, which means that


68
00:02:24,796 --> 00:02:27,286
you can have SwiftUI views that


69
00:02:27,286 --> 00:02:28,746
live right alongside your


70
00:02:28,746 --> 00:02:30,326
existing WatchKit interface


71
00:02:30,326 --> 00:02:31,056
controllers.


72
00:02:32,236 --> 00:02:34,246
And we have enough support for


73
00:02:34,246 --> 00:02:35,816
embedding some WatchKit provided


74
00:02:35,816 --> 00:02:37,356
interface objects directly


75
00:02:37,356 --> 00:02:38,706
within your SwiftUI view


76
00:02:38,706 --> 00:02:40,136
hierarchies, like the brand-new


77
00:02:40,306 --> 00:02:41,946
sign-in with Apple button.


78
00:02:43,896 --> 00:02:45,666
In fact, SwiftUI has really


79
00:02:45,666 --> 00:02:47,386
robust support for integrating


80
00:02:47,386 --> 00:02:48,576
with all of our existing UI


81
00:02:48,576 --> 00:02:49,276
frameworks.


82
00:02:49,826 --> 00:02:51,266
And we have a whole talk


83
00:02:51,266 --> 00:02:52,556
dedicated to the topic that I


84
00:02:52,556 --> 00:02:53,706
highly recommend that you check


85
00:02:53,706 --> 00:02:53,926
out.


86
00:02:55,826 --> 00:02:58,326
All right, so SwiftUI is fully


87
00:02:58,326 --> 00:02:59,496
immersed in the watchOS


88
00:02:59,496 --> 00:03:02,156
experience, which means that you


89
00:03:02,156 --> 00:03:04,266
can use all those great APIs you


90
00:03:04,266 --> 00:03:06,496
have with watchOS 6 and all


91
00:03:06,496 --> 00:03:07,286
those awesome things we've been


92
00:03:07,286 --> 00:03:08,306
adding over the years.


93
00:03:09,046 --> 00:03:09,966
Whether you're using a streaming


94
00:03:09,966 --> 00:03:11,636
audio app, you're using our new


95
00:03:11,636 --> 00:03:13,546
extended runtime features, or


96
00:03:13,546 --> 00:03:14,486
you're creating something


97
00:03:14,486 --> 00:03:18,946
completely new for the platform.


98
00:03:18,946 --> 00:03:20,906
For the first time, we have a UI


99
00:03:20,906 --> 00:03:23,606
framework that works on all of


100
00:03:23,606 --> 00:03:24,346
our devices.


101
00:03:25,376 --> 00:03:26,406
Whether you're developing for


102
00:03:26,406 --> 00:03:28,946
the 38 mm Apple Watch or


103
00:03:28,946 --> 00:03:30,996
creating something for a 65 inch


104
00:03:31,046 --> 00:03:32,666
television, all of it can be


105
00:03:32,666 --> 00:03:33,686
done with SwiftUI.


106
00:03:34,306 --> 00:03:36,576
But the Apple Watch is a unique


107
00:03:36,576 --> 00:03:38,756
device and it has its own


108
00:03:38,756 --> 00:03:40,026
considerations when building an


109
00:03:40,026 --> 00:03:40,586
application.


110
00:03:43,076 --> 00:03:45,366
Creating for Apple Watch is more


111
00:03:45,366 --> 00:03:46,216
than just creating a


112
00:03:46,216 --> 00:03:47,726
miniaturized version of your iOS


113
00:03:47,726 --> 00:03:50,166
app, it's about distilling down


114
00:03:50,166 --> 00:03:51,816
what makes your experience


115
00:03:51,866 --> 00:03:52,166
great.


116
00:03:52,306 --> 00:03:54,956
An Apple Watch is a highly


117
00:03:54,956 --> 00:03:56,606
personal device and provides


118
00:03:56,906 --> 00:03:58,416
easy access to vital


119
00:03:58,416 --> 00:03:58,916
information.


120
00:03:59,546 --> 00:04:02,706
So while your iOS app may be


121
00:04:02,706 --> 00:04:03,826
used for a couple of minutes


122
00:04:03,826 --> 00:04:04,646
while you're waiting in line at


123
00:04:04,646 --> 00:04:06,666
the grocery store, on Apple


124
00:04:06,666 --> 00:04:07,836
Watch, the interactions are


125
00:04:07,836 --> 00:04:09,036
typically a bit shorter.


126
00:04:10,236 --> 00:04:11,136
People see information at a


127
00:04:11,136 --> 00:04:13,516
glance and respond with just a


128
00:04:13,516 --> 00:04:14,816
few taps.


129
00:04:15,436 --> 00:04:18,255
All right, so creating for Apple


130
00:04:18,255 --> 00:04:21,416
Watch may start in your


131
00:04:21,416 --> 00:04:23,616
application, but it's about


132
00:04:23,616 --> 00:04:25,686
building an experience that


133
00:04:25,746 --> 00:04:27,066
spans all these different touch


134
00:04:27,116 --> 00:04:28,396
points we offer throughout the


135
00:04:28,396 --> 00:04:28,846
system.


136
00:04:30,206 --> 00:04:31,006
Whether you're creating a


137
00:04:31,006 --> 00:04:34,206
dynamic notification, using Siri


138
00:04:34,206 --> 00:04:36,506
relevant actions to show timely


139
00:04:36,506 --> 00:04:37,776
information right on the watch


140
00:04:37,776 --> 00:04:40,176
face, or using complications.


141
00:04:41,006 --> 00:04:44,056
So that experience is really


142
00:04:44,056 --> 00:04:46,026
important to Apple Watch and


143
00:04:46,116 --> 00:04:47,586
defining that experience is even


144
00:04:47,586 --> 00:04:48,226
more important.


145
00:04:48,716 --> 00:04:50,426
That experience should be a


146
00:04:50,426 --> 00:04:51,346
couple of different things.


147
00:04:51,676 --> 00:04:53,776
And it should be contextual and


148
00:04:53,776 --> 00:04:54,196
timely.


149
00:04:55,246 --> 00:04:56,496
Showing the right information to


150
00:04:56,496 --> 00:04:58,496
your users at the right time.


151
00:04:59,056 --> 00:05:02,106
It should be highly legible,


152
00:05:03,196 --> 00:05:05,076
showcasing beautiful design


153
00:05:05,836 --> 00:05:06,886
right on the watch screen.


154
00:05:07,446 --> 00:05:10,426
And it should prioritize quick


155
00:05:10,426 --> 00:05:12,766
interactions, getting things


156
00:05:12,766 --> 00:05:16,666
done with just a few taps.


157
00:05:16,826 --> 00:05:19,956
Which brings us right back to


158
00:05:20,556 --> 00:05:21,656
SwiftUI, because SwiftUI, you


159
00:05:21,656 --> 00:05:22,876
can finally build those


160
00:05:22,876 --> 00:05:24,066
experiences that you've always


161
00:05:24,066 --> 00:05:25,496
wanted to build for Apple Watch.


162
00:05:26,106 --> 00:05:29,036
So today we'll take a look at a


163
00:05:29,036 --> 00:05:30,236
couple of different ways we can


164
00:05:30,236 --> 00:05:31,866
use SwiftUI on watchOS.


165
00:05:33,166 --> 00:05:35,436
First, we'll see how we can use


166
00:05:35,536 --> 00:05:37,586
SwiftUI in an application, build


167
00:05:38,466 --> 00:05:40,606
an engaging and highly


168
00:05:40,606 --> 00:05:43,006
interactive notification, and


169
00:05:43,876 --> 00:05:45,676
harness the power of the digital


170
00:05:45,676 --> 00:05:47,566
crown to create tactile


171
00:05:47,566 --> 00:05:48,216
experience.


172
00:05:49,656 --> 00:05:50,876
So let's get started by looking


173
00:05:50,876 --> 00:05:51,666
at an app.


174
00:05:52,386 --> 00:05:53,446
And let's look at an app that


175
00:05:53,446 --> 00:05:55,106
Josh and I have been working on.


176
00:06:02,246 --> 00:06:02,696
All right.


177
00:06:02,696 --> 00:06:04,176
So here I am in Xcode and the


178
00:06:04,176 --> 00:06:05,446
app Josh and I have been working


179
00:06:05,446 --> 00:06:06,736
on is called Pop Quiz.


180
00:06:07,686 --> 00:06:09,516
It's a flashcard app that lets


181
00:06:09,516 --> 00:06:10,576
me take my studies with me


182
00:06:10,576 --> 00:06:10,946
anywhere.


183
00:06:11,516 --> 00:06:13,926
And what I have open right now


184
00:06:13,926 --> 00:06:15,296
is my interface controller.


185
00:06:16,406 --> 00:06:17,956
If you've used WatchKit before,


186
00:06:18,316 --> 00:06:19,526
interface controller will feel


187
00:06:19,526 --> 00:06:20,206
familiar.


188
00:06:20,536 --> 00:06:22,076
And this is an interface


189
00:06:22,076 --> 00:06:23,316
controller, but it's a bit


190
00:06:23,356 --> 00:06:23,706
different.


191
00:06:25,046 --> 00:06:27,726
First, this interface controller


192
00:06:27,726 --> 00:06:29,826
is subclassing WK hosting


193
00:06:29,826 --> 00:06:31,896
controller, which is a type of


194
00:06:31,896 --> 00:06:32,866
interface controller that is


195
00:06:32,866 --> 00:06:34,176
provided by SwiftUI.


196
00:06:34,176 --> 00:06:38,246
Now, because this is a type of


197
00:06:38,246 --> 00:06:40,576
interface controller, I can use


198
00:06:40,576 --> 00:06:41,976
this interface controller


199
00:06:42,746 --> 00:06:43,796
wherever I'm using other


200
00:06:43,796 --> 00:06:44,806
interface controllers.


201
00:06:46,056 --> 00:06:48,066
For example, this one is set up


202
00:06:48,066 --> 00:06:49,786
in my storyboard to be the


203
00:06:49,786 --> 00:06:51,266
initial interface controller for


204
00:06:51,266 --> 00:06:53,296
this app, making this interface


205
00:06:53,296 --> 00:06:54,606
controller the entry point for


206
00:06:54,606 --> 00:06:55,306
my application.


207
00:06:56,806 --> 00:06:58,306
But, for example, if I wanted to


208
00:06:58,306 --> 00:07:00,926
use a paging interface, in my


209
00:07:00,926 --> 00:07:02,646
storyboard I can set up my


210
00:07:02,646 --> 00:07:04,336
interface controller here to be


211
00:07:04,406 --> 00:07:06,116
paged among side other WK


212
00:07:06,116 --> 00:07:07,596
interface controllers.


213
00:07:08,086 --> 00:07:08,786
Which gives it a nice


214
00:07:08,786 --> 00:07:10,286
interoperability between


215
00:07:10,286 --> 00:07:11,936
WatchKit and SwiftUI.


216
00:07:12,716 --> 00:07:15,266
I can also push to this


217
00:07:15,266 --> 00:07:16,636
interface controller using the


218
00:07:16,716 --> 00:07:17,966
same WatchKit interface


219
00:07:17,966 --> 00:07:19,456
controller push APIs.


220
00:07:20,306 --> 00:07:22,796
Or I can use SwiftUI's


221
00:07:22,796 --> 00:07:25,586
navigation button and give a


222
00:07:25,586 --> 00:07:27,516
destination of an interface


223
00:07:27,516 --> 00:07:29,826
controller name and push to


224
00:07:29,866 --> 00:07:31,706
WatchKit from SwiftUI.


225
00:07:32,276 --> 00:07:35,666
Okay. So let's go back to this


226
00:07:35,726 --> 00:07:35,886
code.


227
00:07:37,106 --> 00:07:38,196
So one other thing you might


228
00:07:38,196 --> 00:07:39,166
notice here that's a bit


229
00:07:39,166 --> 00:07:40,736
different from using WatchKit is


230
00:07:41,446 --> 00:07:42,766
that there's no IB outlets.


231
00:07:44,196 --> 00:07:45,606
That's because with WB hosting


232
00:07:45,606 --> 00:07:46,896
controller and SwiftUI, our


233
00:07:47,666 --> 00:07:49,456
entire applications interface


234
00:07:49,456 --> 00:07:51,616
controller's views are defined


235
00:07:51,896 --> 00:07:52,546
with SwiftUI.


236
00:07:53,496 --> 00:07:55,126
That's so awesome.


237
00:07:56,216 --> 00:07:57,786
So something else that's new


238
00:07:57,786 --> 00:07:59,816
here is this use of the body


239
00:07:59,816 --> 00:08:00,346
property.


240
00:08:00,346 --> 00:08:01,766
And this is a type of property


241
00:08:01,766 --> 00:08:03,786
that's provided by WK hosting


242
00:08:03,786 --> 00:08:04,246
controller.


243
00:08:04,696 --> 00:08:07,156
And we override it here.


244
00:08:07,386 --> 00:08:09,026
This body property lets us


245
00:08:09,316 --> 00:08:11,046
specify which SwiftUI view we


246
00:08:11,046 --> 00:08:12,746
want associated to our interface


247
00:08:12,746 --> 00:08:13,226
controller.


248
00:08:13,736 --> 00:08:15,636
And in this case, it's our topic


249
00:08:15,636 --> 00:08:17,736
list, which is just a list of


250
00:08:17,736 --> 00:08:19,206
topics I have of different


251
00:08:19,206 --> 00:08:19,796
flashcards.


252
00:08:20,266 --> 00:08:21,316
And you can see a preview of it


253
00:08:21,316 --> 00:08:23,326
over here on the right side.


254
00:08:24,116 --> 00:08:24,756
All right.


255
00:08:24,756 --> 00:08:26,036
So let's go dive in to our topic


256
00:08:26,036 --> 00:08:26,346
list.


257
00:08:26,926 --> 00:08:31,626
So as the name implies, our


258
00:08:31,626 --> 00:08:33,275
topic list is a list.


259
00:08:33,326 --> 00:08:36,275
And this list says, for each


260
00:08:36,416 --> 00:08:37,976
model -- sorry, for each topic


261
00:08:37,976 --> 00:08:39,885
in my model, I'm creating a


262
00:08:39,885 --> 00:08:41,586
navigation button that's going


263
00:08:41,586 --> 00:08:43,035
to go to another SwiftUI view,


264
00:08:43,306 --> 00:08:44,736
in this case, the flashcard


265
00:08:44,736 --> 00:08:45,086
list.


266
00:08:46,436 --> 00:08:48,046
And it creates a topic cell.


267
00:08:49,176 --> 00:08:50,636
And I'm using this list row


268
00:08:50,776 --> 00:08:53,076
platter color modifier, which is


269
00:08:53,076 --> 00:08:54,316
what's putting that color on


270
00:08:54,316 --> 00:08:55,116
each of these cells.


271
00:08:55,856 --> 00:08:58,096
If I go down here to my topic


272
00:08:58,096 --> 00:08:59,836
cell, you can see that's pretty


273
00:08:59,836 --> 00:09:00,406
simple right now.


274
00:09:01,006 --> 00:09:03,926
Right now it's just using my


275
00:09:03,926 --> 00:09:06,516
topics title and it's being


276
00:09:06,516 --> 00:09:08,146
modified to use the System


277
00:09:08,146 --> 00:09:09,666
Rounded font, which looks


278
00:09:09,666 --> 00:09:10,836
gorgeous on Apple Watch.


279
00:09:11,456 --> 00:09:14,206
Okay. One other thing to note


280
00:09:14,206 --> 00:09:16,296
here at the top is this use of


281
00:09:16,296 --> 00:09:17,596
app object binding.


282
00:09:18,646 --> 00:09:19,966
App object binding is how I'm


283
00:09:19,966 --> 00:09:21,986
letting SwiftUI know that this


284
00:09:21,986 --> 00:09:23,866
model is the source of truth for


285
00:09:23,866 --> 00:09:27,396
this view and that my view


286
00:09:27,396 --> 00:09:29,066
should be updated whenever this


287
00:09:29,066 --> 00:09:29,956
model changes.


288
00:09:30,546 --> 00:09:33,096
Now, understanding how data


289
00:09:33,096 --> 00:09:34,616
flows through SwiftUI is a


290
00:09:34,616 --> 00:09:36,046
fundamentally important topic,


291
00:09:36,046 --> 00:09:37,806
and we have a whole talk


292
00:09:37,806 --> 00:09:39,656
dedicated to it called Data Flow


293
00:09:39,656 --> 00:09:40,636
in SwiftUI, and I highly


294
00:09:40,636 --> 00:09:41,496
recommend that you check that


295
00:09:41,496 --> 00:09:41,656
out.


296
00:09:42,676 --> 00:09:44,416
For now, what we need to know is


297
00:09:44,416 --> 00:09:45,586
that this is how I'm keeping my


298
00:09:45,586 --> 00:09:47,126
model and my list in sync.


299
00:09:47,186 --> 00:09:49,866
So let's go ahead and make this


300
00:09:49,866 --> 00:09:51,636
preview live by pressing the


301
00:09:51,636 --> 00:09:54,136
play button here.


302
00:09:54,256 --> 00:09:55,816
The application comes alive and


303
00:09:55,816 --> 00:09:57,576
I can scroll it right within


304
00:09:57,576 --> 00:09:57,916
Xcode.


305
00:09:59,036 --> 00:10:00,696
And you can see, by default, we


306
00:10:00,696 --> 00:10:01,746
have a pretty well-behaving


307
00:10:01,746 --> 00:10:02,346
application.


308
00:10:03,296 --> 00:10:05,106
Just by using list, we're doing


309
00:10:05,106 --> 00:10:06,146
some really cool things under


310
00:10:06,146 --> 00:10:07,056
the hood, like giving this


311
00:10:07,056 --> 00:10:09,486
really nice animation here as


312
00:10:09,486 --> 00:10:11,406
the list scrolls, we collapse


313
00:10:11,436 --> 00:10:12,386
the cells and it feels like your


314
00:10:12,386 --> 00:10:13,696
content is just flowing right


315
00:10:13,696 --> 00:10:14,986
off your wrist.


316
00:10:16,656 --> 00:10:17,486
All right.


317
00:10:17,746 --> 00:10:18,866
So there's been a couple things


318
00:10:18,866 --> 00:10:19,906
I've been meaning to do to this


319
00:10:19,906 --> 00:10:21,446
list, let's go ahead and do


320
00:10:21,446 --> 00:10:21,776
those now.


321
00:10:23,256 --> 00:10:25,676
First is I have -- I want to add


322
00:10:25,676 --> 00:10:27,656
a label to each of my -- in my


323
00:10:27,656 --> 00:10:30,166
topic cell here that just shows


324
00:10:30,166 --> 00:10:31,726
the count of cards I have for


325
00:10:31,756 --> 00:10:32,876
each of my topics.


326
00:10:33,876 --> 00:10:35,126
Just so I can see at a glance


327
00:10:35,126 --> 00:10:36,166
like how many morphemes do I


328
00:10:36,166 --> 00:10:36,676
need to study.


329
00:10:37,226 --> 00:10:39,226
Let's go ahead and just do that


330
00:10:39,226 --> 00:10:39,426
now.


331
00:10:39,426 --> 00:10:41,146
And to do that I need a VStack.


332
00:10:42,136 --> 00:10:43,326
Well, the editor in Xcode makes


333
00:10:43,326 --> 00:10:44,536
that super easy to do.


334
00:10:45,996 --> 00:10:47,066
I can just command click on my


335
00:10:47,066 --> 00:10:48,836
text here and bring up the quick


336
00:10:48,836 --> 00:10:49,476
action menu.


337
00:10:50,876 --> 00:10:52,756
And I can select the embed in


338
00:10:52,756 --> 00:10:53,426
VStack option.


339
00:10:54,056 --> 00:10:56,746
The code is inserted.


340
00:10:57,666 --> 00:11:00,026
And now below this text, I can


341
00:11:00,026 --> 00:11:02,236
add the count of cards I have.


342
00:11:03,076 --> 00:11:03,836
And you can see the preview


343
00:11:03,836 --> 00:11:04,536
updates right away.


344
00:11:05,716 --> 00:11:07,486
Now, you can see that VStack


345
00:11:07,486 --> 00:11:09,156
aligns center by default.


346
00:11:09,386 --> 00:11:11,456
And in this case, I want a


347
00:11:11,456 --> 00:11:12,266
leaning alignment.


348
00:11:13,466 --> 00:11:15,546
Again we can do that with the


349
00:11:16,116 --> 00:11:16,596
editor.


350
00:11:16,596 --> 00:11:18,766
If I select this VStack, command


351
00:11:18,766 --> 00:11:20,086
click on it, and select the


352
00:11:20,136 --> 00:11:22,466
inspector, I get this window


353
00:11:22,466 --> 00:11:23,516
that shows me different kinds of


354
00:11:23,516 --> 00:11:25,486
modifiers I can apply to this


355
00:11:25,486 --> 00:11:25,756
VStack.


356
00:11:26,816 --> 00:11:28,146
And in this case I want to use


357
00:11:28,296 --> 00:11:29,516
the leading alignment option.


358
00:11:30,096 --> 00:11:31,996
You can see the preview updates


359
00:11:31,996 --> 00:11:33,006
again right away.


360
00:11:33,006 --> 00:11:35,046
It's just super fast.


361
00:11:35,936 --> 00:11:37,306
Now, we're using the leading


362
00:11:37,306 --> 00:11:38,176
alignments and trailing


363
00:11:38,176 --> 00:11:40,206
alignments in SwiftUI, because


364
00:11:40,206 --> 00:11:41,936
by default we support right to


365
00:11:41,936 --> 00:11:42,586
left languages.


366
00:11:43,686 --> 00:11:44,946
If I have a localizable strings


367
00:11:44,946 --> 00:11:46,276
file on my project that has


368
00:11:46,276 --> 00:11:48,696
Arabic or Hebrew, by default,


369
00:11:48,696 --> 00:11:50,106
this entire app's user interface


370
00:11:50,296 --> 00:11:52,596
will flip and will support right


371
00:11:52,596 --> 00:11:54,466
to left languages by default.


372
00:11:55,656 --> 00:11:56,186
All right.


373
00:11:56,256 --> 00:11:57,516
So there is actually something


374
00:11:57,516 --> 00:11:58,686
else I want to add here, which


375
00:11:58,686 --> 00:11:59,726
is like a symbol I have


376
00:11:59,726 --> 00:12:00,936
associated to each of these


377
00:12:00,936 --> 00:12:01,596
topics.


378
00:12:01,996 --> 00:12:03,496
And I want that to appear on the


379
00:12:03,496 --> 00:12:05,016
leading side of both of my


380
00:12:05,016 --> 00:12:05,606
texts.


381
00:12:06,136 --> 00:12:08,176
And I can do that with an


382
00:12:08,176 --> 00:12:08,506
HStack.


383
00:12:10,096 --> 00:12:11,776
So, again, let's use the editor


384
00:12:11,776 --> 00:12:13,146
here, command click on this


385
00:12:13,146 --> 00:12:15,426
VStack, and select the embed in


386
00:12:15,426 --> 00:12:16,136
HStack option.


387
00:12:16,706 --> 00:12:19,036
And then I can insert my symbol,


388
00:12:20,086 --> 00:12:21,016
which is just an emoji.


389
00:12:22,286 --> 00:12:23,976
Now, that's a bit small, I'd


390
00:12:23,976 --> 00:12:26,306
actually like that a bit bigger.


391
00:12:26,306 --> 00:12:27,706
So, again, I can return to our


392
00:12:27,706 --> 00:12:30,006
now familiar inspector, command


393
00:12:30,006 --> 00:12:31,826
click on this text, bring up the


394
00:12:31,826 --> 00:12:32,476
inspector.


395
00:12:33,196 --> 00:12:34,556
And you can see I now have


396
00:12:34,556 --> 00:12:35,846
different contextual options.


397
00:12:37,046 --> 00:12:38,666
And I can select here on my font


398
00:12:39,616 --> 00:12:40,256
a title font.


399
00:12:40,696 --> 00:12:42,536
And these inspectors make it so


400
00:12:42,536 --> 00:12:44,436
easy to learn and like how to


401
00:12:44,436 --> 00:12:45,896
add and modify this code,


402
00:12:45,896 --> 00:12:47,886
because it's adding real code


403
00:12:47,886 --> 00:12:49,006
into my code base.


404
00:12:49,006 --> 00:12:51,026
It's not changing a POS file on


405
00:12:51,026 --> 00:12:52,276
my storyboard, it's actually


406
00:12:52,356 --> 00:12:53,636
teaching me how to write good


407
00:12:53,636 --> 00:12:54,346
SwiftUI code.


408
00:12:54,346 --> 00:12:55,026
All right.


409
00:12:56,436 --> 00:12:59,146
So with just a few lines of


410
00:12:59,146 --> 00:13:00,356
SwiftUI code, we've built out


411
00:13:00,356 --> 00:13:01,206
this cell a bit more.


412
00:13:01,206 --> 00:13:02,686
And, again, this entire time


413
00:13:02,686 --> 00:13:04,746
it's been running live right in


414
00:13:04,746 --> 00:13:05,076
Xcode.


415
00:13:05,146 --> 00:13:07,306
I have a need to build and run


416
00:13:07,306 --> 00:13:07,686
this app.


417
00:13:09,186 --> 00:13:10,476
This kind of iteration is just


418
00:13:10,476 --> 00:13:12,006
so powerful on Apple Watch.


419
00:13:12,996 --> 00:13:14,576
We can finally get this really


420
00:13:14,576 --> 00:13:16,716
quick design flow going and I


421
00:13:16,716 --> 00:13:17,956
don't need to like do a


422
00:13:17,956 --> 00:13:19,236
round-trip to the device.


423
00:13:19,796 --> 00:13:23,166
Okay. So there's something else


424
00:13:23,306 --> 00:13:25,706
in SwiftUI that's brand-new with


425
00:13:25,706 --> 00:13:28,046
it and is unique to Apple Watch,


426
00:13:29,266 --> 00:13:30,906
and that's an entirely new way,


427
00:13:31,416 --> 00:13:32,946
new style of scrolling.


428
00:13:34,246 --> 00:13:35,956
So to do that, let's first add a


429
00:13:35,956 --> 00:13:37,166
bit of height to each of these


430
00:13:37,166 --> 00:13:37,546
cells.


431
00:13:37,596 --> 00:13:40,786
I'll go back to the inspector


432
00:13:40,786 --> 00:13:44,756
here and go to my height, and


433
00:13:45,416 --> 00:13:46,586
out of height, elect 100.


434
00:13:47,096 --> 00:13:49,196
The preview updates.


435
00:13:50,056 --> 00:13:51,256
And now I can go to my list.


436
00:13:52,076 --> 00:13:53,386
And this new style of scrolling


437
00:13:53,386 --> 00:13:55,136
is called the Carousel style.


438
00:13:56,166 --> 00:13:57,606
With just one line of SwiftUI


439
00:13:57,706 --> 00:13:58,926
code, we've completely


440
00:13:58,926 --> 00:14:00,436
transformed the way that this


441
00:14:00,476 --> 00:14:01,306
list scrolls.


442
00:14:02,556 --> 00:14:03,596
If I go ahead and scroll it down


443
00:14:03,596 --> 00:14:05,576
in the preview, you can see that


444
00:14:05,576 --> 00:14:07,296
each of these cards now centers


445
00:14:07,466 --> 00:14:08,076
right in the middle of the


446
00:14:08,076 --> 00:14:08,516
screen.


447
00:14:09,766 --> 00:14:10,856
This gives our users a nice


448
00:14:10,906 --> 00:14:11,826
sense of place.


449
00:14:11,886 --> 00:14:12,726
As they're scrolling this


450
00:14:12,726 --> 00:14:14,526
content, it let's you bring


451
00:14:14,656 --> 00:14:16,176
focus onto each of the elements


452
00:14:16,176 --> 00:14:16,676
in the list.


453
00:14:17,786 --> 00:14:19,706
Now, I decided to use this type


454
00:14:19,766 --> 00:14:21,306
of scrolling for Pop Quiz


455
00:14:21,306 --> 00:14:22,496
because we only have a handful


456
00:14:22,496 --> 00:14:23,626
of elements in this list.


457
00:14:23,886 --> 00:14:25,866
And I can make each of them big


458
00:14:25,866 --> 00:14:26,786
by using a frame.


459
00:14:26,786 --> 00:14:28,986
And this is where the Carousel


460
00:14:28,986 --> 00:14:30,156
style really shines.


461
00:14:31,446 --> 00:14:32,806
The Carousel list style is also


462
00:14:32,806 --> 00:14:33,746
a great option if you have


463
00:14:33,806 --> 00:14:35,726
interactive elements within each


464
00:14:35,726 --> 00:14:37,406
of your cells, because it gives


465
00:14:37,406 --> 00:14:39,396
that nice bit of focus and lets


466
00:14:39,396 --> 00:14:40,806
our users have nice big tap


467
00:14:41,626 --> 00:14:41,856
targets.


468
00:14:43,466 --> 00:14:47,796
Okay. So there's also two new


469
00:14:47,796 --> 00:14:48,966
types of interactions we've


470
00:14:48,966 --> 00:14:50,586
added with List, both of which


471
00:14:50,676 --> 00:14:52,686
are brand-new on Apple Watch.


472
00:14:53,616 --> 00:14:55,466
The first is the ability to drag


473
00:14:55,466 --> 00:14:56,046
to reorder.


474
00:14:57,276 --> 00:14:58,216
Now, we've made this really


475
00:14:58,216 --> 00:14:59,786
simple with just one modifier.


476
00:15:01,296 --> 00:15:03,886
You can add on move and pass on


477
00:15:03,886 --> 00:15:05,766
move closure that tells it how


478
00:15:05,766 --> 00:15:07,726
to update your data store.


479
00:15:07,776 --> 00:15:09,846
In this case, just moving from


480
00:15:09,846 --> 00:15:13,376
one element to the next.


481
00:15:13,376 --> 00:15:16,126
And I can add a delete, a swipe


482
00:15:16,126 --> 00:15:16,516
to delete.


483
00:15:17,526 --> 00:15:18,726
What used to be a bunch of


484
00:15:18,766 --> 00:15:20,096
delegate methods and setting up


485
00:15:20,096 --> 00:15:22,306
swipe actions is just one line


486
00:15:22,306 --> 00:15:23,076
of SwiftUI code.


487
00:15:23,136 --> 00:15:26,866
So now I can scroll this list,


488
00:15:26,866 --> 00:15:29,816
we have this really beautiful


489
00:15:29,816 --> 00:15:32,256
animation, these really nice


490
00:15:32,256 --> 00:15:33,796
built out cells, all this code


491
00:15:33,796 --> 00:15:35,866
is right here, right next to my


492
00:15:35,866 --> 00:15:36,256
preview.


493
00:15:36,796 --> 00:15:38,116
And I find a cell I want to


494
00:15:38,116 --> 00:15:39,826
delete, I can just swipe it


495
00:15:39,826 --> 00:15:41,466
right in the preview and delete


496
00:15:41,466 --> 00:15:41,556
it.


497
00:15:41,646 --> 00:15:43,796
It's just so cool and so


498
00:15:43,796 --> 00:15:44,306
powerful.


499
00:15:46,516 --> 00:15:53,546
[ Applause ]


500
00:15:54,046 --> 00:15:54,656
All right.


501
00:15:55,146 --> 00:15:56,376
So that was how we could use


502
00:15:56,426 --> 00:15:59,466
SwiftUI in our topic list and to


503
00:15:59,466 --> 00:16:00,486
build out these really great


504
00:16:00,486 --> 00:16:01,926
interactions that were just not


505
00:16:01,926 --> 00:16:03,436
possible before on Apple Watch.


506
00:16:05,016 --> 00:16:06,536
But that's just the start of


507
00:16:06,536 --> 00:16:08,586
what's possible on SwiftUI and


508
00:16:08,586 --> 00:16:09,226
Apple Watch.


509
00:16:10,776 --> 00:16:12,286
To see how to take your


510
00:16:12,286 --> 00:16:14,326
experiences to the next level, I


511
00:16:14,446 --> 00:16:15,406
would like to invite Josh


512
00:16:15,446 --> 00:16:16,366
Weinberg to the stage.


513
00:16:17,516 --> 00:16:23,196
[ Applause ]


514
00:16:23,696 --> 00:16:24,266
>> Thanks, Matthew.


515
00:16:25,546 --> 00:16:28,476
So Matthew talked a lot about


516
00:16:28,476 --> 00:16:29,586
how we can use the power of


517
00:16:29,586 --> 00:16:31,416
SwiftUI to create amazing


518
00:16:31,416 --> 00:16:33,836
interactions just for Apple


519
00:16:33,836 --> 00:16:34,166
Watch.


520
00:16:34,826 --> 00:16:37,266
But, as we said, the experience


521
00:16:37,266 --> 00:16:38,866
on Apple Watch is about much


522
00:16:38,866 --> 00:16:42,176
more than just the application.


523
00:16:43,646 --> 00:16:45,436
To build an experience on Apple


524
00:16:45,436 --> 00:16:47,406
Watch, first I want to dive into


525
00:16:47,486 --> 00:16:49,016
interactive notifications.


526
00:16:49,886 --> 00:16:51,486
Now, interactive notifications


527
00:16:51,486 --> 00:16:53,396
on Apple Watch are the primary


528
00:16:53,396 --> 00:16:55,076
way which you have to provide


529
00:16:55,216 --> 00:16:56,226
timely and contextual


530
00:16:56,226 --> 00:16:58,156
information to your users.


531
00:16:59,536 --> 00:17:01,456
On Apple Watch, notifications


532
00:17:01,456 --> 00:17:02,486
are made up of two primary


533
00:17:02,546 --> 00:17:03,046
parts.


534
00:17:03,586 --> 00:17:05,476
The first is the short look.


535
00:17:06,306 --> 00:17:07,606
Now, a short look appears


536
00:17:07,606 --> 00:17:08,996
immediately upon registries and


537
00:17:08,996 --> 00:17:10,296
will provide information


538
00:17:10,296 --> 00:17:11,826
directly from the notification


539
00:17:11,826 --> 00:17:12,266
payload.


540
00:17:13,046 --> 00:17:14,185
This also includes your


541
00:17:14,185 --> 00:17:15,705
application icon automatically.


542
00:17:16,896 --> 00:17:18,465
After looking at the short look


543
00:17:18,465 --> 00:17:20,036
for a period of time, it will


544
00:17:20,036 --> 00:17:21,766
transition automatically into


545
00:17:21,766 --> 00:17:22,386
the long look.


546
00:17:22,455 --> 00:17:25,006
The long look is a scrolling


547
00:17:25,006 --> 00:17:26,316
interface which allows you to


548
00:17:26,316 --> 00:17:28,916
specify both a custom body as


549
00:17:28,916 --> 00:17:30,026
well as these notification


550
00:17:30,026 --> 00:17:31,246
actions below.


551
00:17:32,146 --> 00:17:33,546
Here you're seeing a beautiful


552
00:17:33,546 --> 00:17:35,026
implementation from Yelp where


553
00:17:35,026 --> 00:17:36,136
they've created a complete


554
00:17:36,136 --> 00:17:37,436
reservation confirmation


555
00:17:37,436 --> 00:17:39,236
experience completely within


556
00:17:39,236 --> 00:17:39,986
their notification.


557
00:17:41,366 --> 00:17:43,116
To see how we can extend Pop


558
00:17:43,116 --> 00:17:45,026
Quiz to really live up to its


559
00:17:45,026 --> 00:17:47,326
name, let's add a notification


560
00:17:47,326 --> 00:17:48,726
which will place a flashcard


561
00:17:48,726 --> 00:17:51,066
right into the body to make sure


562
00:17:51,066 --> 00:17:54,976
I'm keeping up on my studies.


563
00:17:55,206 --> 00:17:58,386
So where I want to start is in


564
00:17:58,386 --> 00:17:59,756
the notification controller.


565
00:18:00,506 --> 00:18:02,296
The notification controller was


566
00:18:02,326 --> 00:18:04,376
provided by the template when we


567
00:18:04,376 --> 00:18:06,076
created this project by just


568
00:18:06,076 --> 00:18:07,576
selecting the include


569
00:18:07,576 --> 00:18:08,876
notification checkbox.


570
00:18:10,146 --> 00:18:11,896
Very much like the interface


571
00:18:11,896 --> 00:18:13,476
controller, this is new, it's


572
00:18:14,266 --> 00:18:16,876
part of SwiftUI, but it comes


573
00:18:16,876 --> 00:18:19,486
from the WK user interface


574
00:18:19,486 --> 00:18:20,436
controller underneath.


575
00:18:21,306 --> 00:18:23,006
So this new user notification


576
00:18:23,006 --> 00:18:24,696
hosting controller provides the


577
00:18:24,696 --> 00:18:25,956
entry point for interactive


578
00:18:25,956 --> 00:18:27,276
notification and allows us to


579
00:18:27,276 --> 00:18:28,836
provide SwiftUI content.


580
00:18:29,146 --> 00:18:31,396
If you've used these before,


581
00:18:31,446 --> 00:18:33,016
it'll be very familiar and you


582
00:18:33,016 --> 00:18:34,696
have the same did receive method


583
00:18:34,776 --> 00:18:35,356
coming from the user


584
00:18:35,356 --> 00:18:36,446
notification framework.


585
00:18:37,186 --> 00:18:39,206
The did receive method allows us


586
00:18:39,206 --> 00:18:41,286
to extract information from the


587
00:18:41,286 --> 00:18:43,926
notification, store it within


588
00:18:43,926 --> 00:18:45,786
our interface controller, and


589
00:18:45,786 --> 00:18:47,296
also provide those notification


590
00:18:47,296 --> 00:18:48,996
actions that appear below the


591
00:18:48,996 --> 00:18:49,986
notifications' body.


592
00:18:50,726 --> 00:18:52,706
And then much like the interface


593
00:18:52,706 --> 00:18:54,096
controller, we have the same


594
00:18:54,096 --> 00:18:54,926
body property.


595
00:18:55,766 --> 00:18:57,156
The one difference here is,


596
00:18:57,156 --> 00:18:58,576
after did receive is called,


597
00:18:59,176 --> 00:19:00,886
we'll automatically invalidate


598
00:19:00,936 --> 00:19:02,596
and reevaluate your body


599
00:19:02,596 --> 00:19:03,556
property so that your


600
00:19:03,556 --> 00:19:04,886
notifications' view is


601
00:19:04,886 --> 00:19:06,346
completely up-to-date.


602
00:19:07,236 --> 00:19:08,656
To see what this notification


603
00:19:08,656 --> 00:19:10,006
looks like, let's jump in to the


604
00:19:10,006 --> 00:19:10,946
notifications' view.


605
00:19:12,146 --> 00:19:14,586
Now, here we'll have a preview


606
00:19:14,586 --> 00:19:15,426
of what this notification


607
00:19:15,426 --> 00:19:17,266
appears, but it's not really


608
00:19:17,266 --> 00:19:18,296
super useful if I'm trying to


609
00:19:18,296 --> 00:19:18,696
study.


610
00:19:18,696 --> 00:19:20,726
Here at the bottom we can see a


611
00:19:20,726 --> 00:19:22,206
flashcard view which is showing


612
00:19:22,206 --> 00:19:23,976
you both the question and the


613
00:19:23,976 --> 00:19:24,366
answer.


614
00:19:25,596 --> 00:19:27,026
To build this out and make it


615
00:19:27,026 --> 00:19:28,686
feel a little better, I want go


616
00:19:28,686 --> 00:19:30,186
and pin this preview, using the


617
00:19:30,236 --> 00:19:31,456
pin button in the bottom left of


618
00:19:31,456 --> 00:19:34,026
the canvas, and then go look at


619
00:19:34,026 --> 00:19:34,806
the flashcard view.


620
00:19:35,716 --> 00:19:37,176
And so now we can see I'm


621
00:19:37,266 --> 00:19:39,016
building my flashcard as well as


622
00:19:39,016 --> 00:19:40,106
seeing what it will look like in


623
00:19:40,106 --> 00:19:42,886
context when I'm all done.


624
00:19:43,096 --> 00:19:44,626
So I've already created some


625
00:19:44,626 --> 00:19:46,116
views which I can place into my


626
00:19:46,186 --> 00:19:47,626
flashcard to make this look a


627
00:19:47,626 --> 00:19:48,196
lot better.


628
00:19:49,066 --> 00:19:50,226
So the first thing I want to do


629
00:19:50,226 --> 00:19:52,016
is replace both of these texts


630
00:19:52,436 --> 00:19:53,906
by wrapping them within this


631
00:19:53,906 --> 00:19:54,306
side.


632
00:19:55,056 --> 00:19:57,356
Now, a flashcard has two sides.


633
00:19:57,506 --> 00:19:58,616
So let's wrap this in both


634
00:19:58,616 --> 00:19:59,196
sides.


635
00:19:59,196 --> 00:20:00,836
And we've gotten this really


636
00:20:00,836 --> 00:20:02,586
nice chrome around my flashcard


637
00:20:02,586 --> 00:20:03,896
and all the default styling that


638
00:20:03,896 --> 00:20:05,406
I'd want for any content which I


639
00:20:05,406 --> 00:20:06,836
put inside of them.


640
00:20:07,346 --> 00:20:09,436
But I can still see both sides


641
00:20:09,436 --> 00:20:10,936
at once, and I'm really trying


642
00:20:10,936 --> 00:20:11,826
to get better at studying.


643
00:20:12,756 --> 00:20:14,756
So I want to replace this VStack


644
00:20:14,756 --> 00:20:16,046
with a custom container which


645
00:20:16,046 --> 00:20:17,726
I've written, which I call Flip


646
00:20:17,726 --> 00:20:18,026
View.


647
00:20:18,976 --> 00:20:21,056
Now, the Flip View provides all


648
00:20:21,056 --> 00:20:22,686
of the transformations as well


649
00:20:22,686 --> 00:20:23,816
as the interactivity, which


650
00:20:23,816 --> 00:20:24,666
we're going to look at in a


651
00:20:24,666 --> 00:20:25,126
second.


652
00:20:25,646 --> 00:20:27,326
And all of the source code for


653
00:20:27,326 --> 00:20:28,756
this will be available after the


654
00:20:28,756 --> 00:20:29,876
conference, a sample code.


655
00:20:31,066 --> 00:20:33,036
So to see what the notification


656
00:20:33,036 --> 00:20:34,976
looks like in practice, we can


657
00:20:34,976 --> 00:20:36,316
build and run using the


658
00:20:36,316 --> 00:20:38,036
notification scheme which was


659
00:20:38,036 --> 00:20:39,856
included as part of the Xcode


660
00:20:39,856 --> 00:20:40,296
project.


661
00:20:40,456 --> 00:20:42,256
And we'll see that the short


662
00:20:42,256 --> 00:20:43,116
look appears.


663
00:20:43,296 --> 00:20:44,626
We transition directly into the


664
00:20:44,626 --> 00:20:47,156
long look, which looks exactly


665
00:20:47,156 --> 00:20:48,356
like our preview like we'd want.


666
00:20:48,616 --> 00:20:49,516
We get these notification


667
00:20:49,516 --> 00:20:50,466
actions below.


668
00:20:50,746 --> 00:20:51,776
And as promised, the


669
00:20:51,776 --> 00:20:53,026
notification is fully


670
00:20:53,026 --> 00:20:53,526
interactive.


671
00:20:53,666 --> 00:20:54,976
I can tap the flashcard to flip


672
00:20:54,976 --> 00:20:57,086
it over or even drag to interact


673
00:20:57,316 --> 00:20:58,506
directly within the notification


674
00:20:58,506 --> 00:20:58,816
body.


675
00:21:00,361 --> 00:21:02,361
[ Applause ]


676
00:21:02,706 --> 00:21:04,456
Now, that was really easy


677
00:21:04,456 --> 00:21:06,256
question, and I definitely got


678
00:21:06,256 --> 00:21:10,506
that one right.


679
00:21:10,506 --> 00:21:12,926
So we've seen with taking


680
00:21:12,926 --> 00:21:14,666
advantage of the same technology


681
00:21:14,906 --> 00:21:15,916
that we've used to build the


682
00:21:15,916 --> 00:21:18,046
application, we can create rich


683
00:21:18,046 --> 00:21:19,496
and interactive experiences


684
00:21:19,496 --> 00:21:20,446
within the notification.


685
00:21:21,976 --> 00:21:23,956
Finally, there's one more piece


686
00:21:23,956 --> 00:21:24,996
of the Apple Watch which I'd


687
00:21:24,996 --> 00:21:26,646
like to talk about, which is the


688
00:21:26,646 --> 00:21:27,416
digital crown.


689
00:21:28,436 --> 00:21:29,736
Now, you've already been able to


690
00:21:29,736 --> 00:21:30,926
take advantage of the digital


691
00:21:30,926 --> 00:21:32,286
crown within your WatchKit


692
00:21:32,286 --> 00:21:33,726
applications using the


693
00:21:33,726 --> 00:21:35,496
WKCrownSequencer API.


694
00:21:36,866 --> 00:21:39,346
This API allowed you to do some


695
00:21:39,346 --> 00:21:40,876
very limited things with the


696
00:21:40,876 --> 00:21:43,666
crown, digital crown, but we


697
00:21:43,666 --> 00:21:45,026
want to be able -- we want you


698
00:21:45,026 --> 00:21:46,526
to be able to create interfaces


699
00:21:46,526 --> 00:21:47,496
much more like the ones which we


700
00:21:47,496 --> 00:21:48,986
create in our own applications.


701
00:21:49,496 --> 00:21:52,906
With Apple Watch Series 4, we


702
00:21:52,906 --> 00:21:54,686
introduced a brand-new haptic


703
00:21:54,716 --> 00:21:55,166
crown.


704
00:21:55,796 --> 00:21:57,536
The haptic crown, digital crown,


705
00:21:57,616 --> 00:21:59,846
provides feedback as content


706
00:21:59,846 --> 00:22:00,806
scrolls on the screen.


707
00:22:01,506 --> 00:22:02,726
This provides some really nice


708
00:22:02,726 --> 00:22:04,066
resistance and weight to each


709
00:22:04,066 --> 00:22:05,906
element, allowing the content to


710
00:22:05,906 --> 00:22:07,086
feel more connected to the


711
00:22:07,086 --> 00:22:08,456
digital crown than it ever had


712
00:22:08,486 --> 00:22:08,886
before.


713
00:22:10,386 --> 00:22:11,586
We've already taken advantage of


714
00:22:11,586 --> 00:22:13,216
this all across our own


715
00:22:13,306 --> 00:22:14,586
applications.


716
00:22:14,656 --> 00:22:16,596
For example, in workout, where


717
00:22:16,596 --> 00:22:18,016
we have this beautiful list


718
00:22:18,016 --> 00:22:19,266
where the elements have a lot of


719
00:22:19,266 --> 00:22:20,206
weight to them as they scroll


720
00:22:20,206 --> 00:22:20,536
by.


721
00:22:21,306 --> 00:22:22,686
Or when you're creating a custom


722
00:22:22,686 --> 00:22:24,116
timer and you have these pickers


723
00:22:24,116 --> 00:22:25,176
where as you fly through, it


724
00:22:25,176 --> 00:22:26,286
provides haptic feedback.


725
00:22:27,426 --> 00:22:29,166
In SwiftUI, we've provided


726
00:22:29,166 --> 00:22:30,656
system components that give you


727
00:22:30,656 --> 00:22:32,446
this all out-of-the-box.


728
00:22:32,576 --> 00:22:34,926
For example, list, picker, and


729
00:22:34,926 --> 00:22:36,256
scroll view will do all of this


730
00:22:36,256 --> 00:22:36,586
for you.


731
00:22:37,986 --> 00:22:39,096
But if you're going to build


732
00:22:39,096 --> 00:22:40,386
something a little more custom,


733
00:22:41,296 --> 00:22:42,926
we have some new modifiers as


734
00:22:42,926 --> 00:22:44,446
part of SwiftUI that allow you


735
00:22:44,446 --> 00:22:45,636
to realize these visions.


736
00:22:46,846 --> 00:22:48,146
The first kind custom interface


737
00:22:48,146 --> 00:22:49,476
I want to talk about is what we


738
00:22:49,476 --> 00:22:51,156
call a free scrolling interface.


739
00:22:51,896 --> 00:22:53,256
In a free scrolling interface,


740
00:22:53,726 --> 00:22:55,096
you don't really have concrete


741
00:22:55,136 --> 00:22:57,506
stops between your content, and


742
00:22:57,506 --> 00:22:58,786
instead you want to be able to


743
00:22:58,786 --> 00:23:00,536
stop anywhere along the sequence


744
00:23:00,536 --> 00:23:01,526
which the digital crown is


745
00:23:01,526 --> 00:23:01,876
moving.


746
00:23:03,336 --> 00:23:04,616
To implement something like


747
00:23:04,616 --> 00:23:06,276
this, you use the new Digital


748
00:23:06,276 --> 00:23:07,866
Crown Rotation Modifier,


749
00:23:08,136 --> 00:23:09,266
provided by SwiftUI.


750
00:23:10,036 --> 00:23:11,466
In its really simple form here,


751
00:23:11,666 --> 00:23:13,516
it only takes three parameters.


752
00:23:14,266 --> 00:23:15,226
The first one we need to worry


753
00:23:15,226 --> 00:23:16,676
about is the binding.


754
00:23:17,726 --> 00:23:19,426
Now, like any other SwiftUI


755
00:23:19,426 --> 00:23:20,876
component which takes a binding,


756
00:23:20,926 --> 00:23:22,296
this provides the source of


757
00:23:22,346 --> 00:23:24,756
truth for how this modifier


758
00:23:24,756 --> 00:23:25,796
interacts with the system.


759
00:23:26,276 --> 00:23:27,986
In the case of a free scrolling


760
00:23:27,986 --> 00:23:30,486
list, we might want to bind to


761
00:23:30,486 --> 00:23:31,766
the offset of the view which


762
00:23:31,816 --> 00:23:32,266
we're moving.


763
00:23:33,466 --> 00:23:34,786
We also need to tell the digital


764
00:23:34,786 --> 00:23:37,206
crown where we're going from and


765
00:23:37,206 --> 00:23:38,286
where we're going through.


766
00:23:38,856 --> 00:23:40,136
These define the limits of the


767
00:23:40,136 --> 00:23:41,586
sequence over which the digital


768
00:23:41,586 --> 00:23:42,446
crown will move.


769
00:23:44,176 --> 00:23:45,206
To see what this looks like in


770
00:23:45,206 --> 00:23:47,356
action, we can see that now as


771
00:23:47,356 --> 00:23:48,406
we move the digital crown


772
00:23:48,436 --> 00:23:50,356
represented by the red dot,


773
00:23:50,786 --> 00:23:52,666
we'll provide linear feedback as


774
00:23:52,666 --> 00:23:54,746
well as some nice haptic


775
00:23:54,746 --> 00:23:56,046
feedback in a rubber banding


776
00:23:56,046 --> 00:23:57,946
behavior at either limit of the


777
00:23:57,946 --> 00:23:59,716
digital crown's sequence.


778
00:24:00,146 --> 00:24:02,876
Next, if you wanted to build


779
00:24:02,876 --> 00:24:04,416
something a little more custom


780
00:24:04,456 --> 00:24:05,526
-- for example, like this


781
00:24:05,596 --> 00:24:06,986
picker, which we've provided as


782
00:24:07,026 --> 00:24:08,596
part of -- which is included in


783
00:24:08,596 --> 00:24:09,956
the new calculator application.


784
00:24:10,706 --> 00:24:11,986
We're here, we're no longer


785
00:24:11,986 --> 00:24:13,046
scrolling content.


786
00:24:13,046 --> 00:24:14,676
Instead we're picking between


787
00:24:14,676 --> 00:24:16,146
discrete elements and using the


788
00:24:16,146 --> 00:24:17,456
digital crown to move from one


789
00:24:17,456 --> 00:24:18,106
to the next.


790
00:24:18,586 --> 00:24:20,986
We can use the exact same


791
00:24:20,986 --> 00:24:22,746
Digital Crown Rotation Modifier


792
00:24:22,746 --> 00:24:24,246
with many of the same


793
00:24:24,246 --> 00:24:25,006
parameters.


794
00:24:25,756 --> 00:24:28,956
Now, these parameters -- instead


795
00:24:28,956 --> 00:24:31,356
of going over scrollable lists,


796
00:24:31,356 --> 00:24:32,206
we're selecting between the


797
00:24:32,206 --> 00:24:33,936
number of people and going from


798
00:24:33,936 --> 00:24:34,916
1 through 15 of them.


799
00:24:35,536 --> 00:24:37,466
Now, the new parameter here is


800
00:24:37,466 --> 00:24:38,456
the by parameter.


801
00:24:38,696 --> 00:24:40,536
And by allows us to specify the


802
00:24:40,536 --> 00:24:43,226
stride along which the sequence,


803
00:24:43,336 --> 00:24:44,436
the digital crown sequence, will


804
00:24:44,436 --> 00:24:45,896
provide that haptic feedback and


805
00:24:45,896 --> 00:24:47,156
settling behavior for you.


806
00:24:47,736 --> 00:24:50,046
To see what this looks like, we


807
00:24:50,046 --> 00:24:51,196
can see now that the digital


808
00:24:51,196 --> 00:24:52,546
crown will provide haptic


809
00:24:52,546 --> 00:24:53,696
feedback as we go from one


810
00:24:53,696 --> 00:24:55,936
element to the next, and it's


811
00:24:55,936 --> 00:24:56,526
just that easy.


812
00:24:57,096 --> 00:25:00,026
And finally, if you wanted to do


813
00:25:00,026 --> 00:25:01,386
something even more custom --


814
00:25:01,386 --> 00:25:03,236
for example, the interface that


815
00:25:03,236 --> 00:25:04,126
we've had in alarms.


816
00:25:04,776 --> 00:25:06,286
Where here the digital crown is


817
00:25:06,286 --> 00:25:08,426
controlling a view which is


818
00:25:08,426 --> 00:25:09,576
moving around a circle.


819
00:25:09,676 --> 00:25:11,366
It's no longer limited at either


820
00:25:11,366 --> 00:25:12,176
end of its sequence.


821
00:25:13,346 --> 00:25:14,416
Here, we come back to the


822
00:25:14,416 --> 00:25:15,996
familiar Digital Crown Rotation


823
00:25:15,996 --> 00:25:16,686
Modifier.


824
00:25:17,186 --> 00:25:18,936
This modifier takes all of the


825
00:25:18,936 --> 00:25:19,856
same parameters which we've


826
00:25:19,856 --> 00:25:21,866
already been talking about, as


827
00:25:21,866 --> 00:25:23,316
well as I want to introduce two


828
00:25:23,316 --> 00:25:23,906
new ones.


829
00:25:24,566 --> 00:25:25,996
First is sensitivity.


830
00:25:26,936 --> 00:25:28,816
Sensitivity allows us to specify


831
00:25:28,816 --> 00:25:30,486
how much rotation we need to


832
00:25:30,486 --> 00:25:31,916
apply to the digital crown to


833
00:25:31,916 --> 00:25:33,226
move from one element to the


834
00:25:33,226 --> 00:25:33,696
next.


835
00:25:34,446 --> 00:25:35,696
And finally, we have the


836
00:25:35,696 --> 00:25:36,736
continuous parameter.


837
00:25:37,276 --> 00:25:38,946
This parameter allows us to


838
00:25:38,946 --> 00:25:40,626
specify that we no longer want


839
00:25:40,626 --> 00:25:42,186
the digital crown to stop at


840
00:25:42,186 --> 00:25:43,456
either limit of its sequence.


841
00:25:43,996 --> 00:25:47,166
In action, we can see now we


842
00:25:47,166 --> 00:25:48,226
have this really nice


843
00:25:48,226 --> 00:25:49,876
interaction where we can go all


844
00:25:49,876 --> 00:25:51,666
the way back around and continue


845
00:25:51,666 --> 00:25:53,066
moving the digital crown in one


846
00:25:53,066 --> 00:25:53,596
direction.


847
00:25:54,176 --> 00:25:55,456
There's no more limits to the


848
00:25:55,456 --> 00:25:55,976
sequence.


849
00:25:57,916 --> 00:26:00,406
Finally, to let the digital


850
00:26:00,406 --> 00:26:02,616
crown get its input, we need to


851
00:26:02,616 --> 00:26:04,046
tell the system how to get it


852
00:26:04,106 --> 00:26:04,266
there.


853
00:26:04,916 --> 00:26:06,146
To do that, we introduce the


854
00:26:06,146 --> 00:26:07,296
focusable modifier.


855
00:26:07,296 --> 00:26:09,896
Now, focusable will feel very


856
00:26:09,896 --> 00:26:11,436
familiar to you if you've used


857
00:26:11,436 --> 00:26:12,496
other UI frameworks which we


858
00:26:12,496 --> 00:26:12,966
provide.


859
00:26:13,456 --> 00:26:15,046
This is a lot like the UI Focus


860
00:26:15,046 --> 00:26:17,326
Engine in UIKit or First


861
00:26:17,326 --> 00:26:18,486
Responder, which I'm sure


862
00:26:18,486 --> 00:26:19,576
everyone here has used before.


863
00:26:20,896 --> 00:26:22,256
And by just adding this


864
00:26:22,256 --> 00:26:24,436
focusable modifier, we can now


865
00:26:24,436 --> 00:26:25,846
use the digital crown to update


866
00:26:25,846 --> 00:26:27,536
the people picker, tap over to


867
00:26:27,536 --> 00:26:28,766
tip, and continue using the


868
00:26:28,766 --> 00:26:30,446
crown to update the now focused


869
00:26:30,446 --> 00:26:30,676
view.


870
00:26:32,996 --> 00:26:34,576
To learn a lot more about how


871
00:26:34,576 --> 00:26:36,196
focusable works, please go check


872
00:26:36,196 --> 00:26:37,876
out the SwiftUI in All Devices


873
00:26:38,506 --> 00:26:38,606
talk.


874
00:26:40,056 --> 00:26:41,616
To see how we can take advantage


875
00:26:41,616 --> 00:26:43,376
of this and to build some really


876
00:26:43,376 --> 00:26:45,086
awesome interactions in Pop


877
00:26:45,086 --> 00:26:50,996
Quiz, let's go back to demo.


878
00:26:51,146 --> 00:26:53,146
So Matthew had already shown the


879
00:26:53,246 --> 00:26:56,206
really nice card list at the


880
00:26:56,206 --> 00:26:57,766
entry point of the application


881
00:26:57,816 --> 00:26:59,186
-- or the topic list at the


882
00:26:59,186 --> 00:27:00,086
entry to the application.


883
00:27:01,346 --> 00:27:03,406
But I want to build out a really


884
00:27:03,406 --> 00:27:04,626
cool card list.


885
00:27:04,726 --> 00:27:06,896
Now, we already have a nice list


886
00:27:06,896 --> 00:27:07,836
here where we're seeing these


887
00:27:07,836 --> 00:27:10,276
flashcards in a scrollable view,


888
00:27:10,336 --> 00:27:11,346
which we can still see in the


889
00:27:11,346 --> 00:27:11,746
preview.


890
00:27:12,296 --> 00:27:13,816
But wouldn't it be nice if we


891
00:27:13,816 --> 00:27:16,396
had a really cool, custom


892
00:27:16,396 --> 00:27:18,116
interaction driven completely by


893
00:27:18,116 --> 00:27:18,826
the digital crown?


894
00:27:19,446 --> 00:27:22,246
To do that, what I first want to


895
00:27:22,246 --> 00:27:23,926
do is replace the scroll view


896
00:27:24,186 --> 00:27:24,906
with a ZStack.


897
00:27:25,836 --> 00:27:27,696
Now, we'll see that flashcards


898
00:27:27,696 --> 00:27:29,486
are no longer stacked vertically


899
00:27:29,486 --> 00:27:30,816
but instead stacked one on top


900
00:27:30,816 --> 00:27:31,316
of each other.


901
00:27:31,716 --> 00:27:32,946
But I promise you that every one


902
00:27:32,946 --> 00:27:33,896
of them are still there.


903
00:27:34,366 --> 00:27:36,786
Next, because we're going to be


904
00:27:36,786 --> 00:27:38,296
building something using the


905
00:27:38,296 --> 00:27:40,076
digital crown, we need to supply


906
00:27:40,526 --> 00:27:42,826
the focusable modifier as well


907
00:27:42,826 --> 00:27:44,576
as the Digital Crown Rotation


908
00:27:44,576 --> 00:27:45,216
Modifier.


909
00:27:46,436 --> 00:27:47,646
Now, there's a lot of parameters


910
00:27:47,646 --> 00:27:48,986
here, but these are the exact


911
00:27:48,986 --> 00:27:49,926
same parameters which we've


912
00:27:49,926 --> 00:27:51,006
already just talked about.


913
00:27:51,006 --> 00:27:52,286
So let's go through them one by


914
00:27:52,286 --> 00:27:52,616
one.


915
00:27:53,256 --> 00:27:54,436
First we're going to need to


916
00:27:54,436 --> 00:27:56,096
supply a binding, or the source


917
00:27:56,096 --> 00:27:58,066
of truth where the digital crown


918
00:27:58,066 --> 00:27:59,436
will be updating its value.


919
00:28:00,486 --> 00:28:01,816
To do that, we need to provide


920
00:28:01,816 --> 00:28:02,396
some state.


921
00:28:03,406 --> 00:28:04,606
Here, I want to provide the


922
00:28:04,606 --> 00:28:06,036
current index into which this


923
00:28:06,036 --> 00:28:07,196
custom interaction will be


924
00:28:07,196 --> 00:28:09,406
moving between.


925
00:28:09,526 --> 00:28:12,626
Next we supply that binding to


926
00:28:12,626 --> 00:28:14,486
that state back into the digital


927
00:28:14,486 --> 00:28:15,306
crown rotation.


928
00:28:15,736 --> 00:28:17,266
Here, I want to use an animated


929
00:28:17,266 --> 00:28:19,056
version of that binding, so as


930
00:28:19,056 --> 00:28:20,816
the digital crown updates, it


931
00:28:20,816 --> 00:28:22,456
refreshes this view in an


932
00:28:22,456 --> 00:28:23,366
animated fashion.


933
00:28:24,816 --> 00:28:26,876
Next we need to specify how far


934
00:28:26,876 --> 00:28:28,936
we're going from as well as


935
00:28:28,936 --> 00:28:29,996
where we're going through in the


936
00:28:29,996 --> 00:28:30,726
sequence.


937
00:28:31,096 --> 00:28:32,256
Here, we're going to the second


938
00:28:32,256 --> 00:28:33,476
to the last card in the sequence


939
00:28:33,476 --> 00:28:34,566
to achieve the effect which


940
00:28:34,616 --> 00:28:35,196
we're going for.


941
00:28:36,616 --> 00:28:38,906
Next we need to specify the by


942
00:28:38,906 --> 00:28:40,326
value, which is the stride


943
00:28:40,376 --> 00:28:43,026
between each of these cards, as


944
00:28:43,026 --> 00:28:44,496
well as the sensitivity.


945
00:28:44,696 --> 00:28:46,216
Which here, I want to specify a


946
00:28:46,216 --> 00:28:47,726
low sensitivity so that each


947
00:28:47,726 --> 00:28:49,516
card gets a lot of weight to it


948
00:28:49,516 --> 00:28:50,526
and I can make sure I'm looking


949
00:28:50,526 --> 00:28:51,596
at the card which I want to look


950
00:28:51,596 --> 00:28:51,776
at.


951
00:28:51,776 --> 00:28:55,276
And then finally, to actually


952
00:28:55,326 --> 00:28:56,946
get the nice effect we want to


953
00:28:56,946 --> 00:28:58,766
look at, I've already written


954
00:28:58,766 --> 00:29:00,646
this Card Transform Modifier.


955
00:29:00,716 --> 00:29:01,876
Now, this is a custom view


956
00:29:01,876 --> 00:29:03,386
modifier which I've already


957
00:29:03,386 --> 00:29:06,386
written, which will provide all


958
00:29:06,386 --> 00:29:09,096
of the 3-D effects and allow the


959
00:29:09,096 --> 00:29:10,956
card to update with the current


960
00:29:10,956 --> 00:29:11,496
index.


961
00:29:12,126 --> 00:29:13,366
And we're passing in the current


962
00:29:13,366 --> 00:29:14,966
index into this modifier so that


963
00:29:14,966 --> 00:29:16,366
it's updated every time this


964
00:29:16,366 --> 00:29:17,536
view is re-rendered.


965
00:29:18,036 --> 00:29:19,756
And that's it.


966
00:29:21,116 --> 00:29:23,046
Now we can go build and run this


967
00:29:23,046 --> 00:29:23,716
application.


968
00:29:24,256 --> 00:29:26,746
And as it comes up in the


969
00:29:26,746 --> 00:29:28,076
simulator, we'll see the same


970
00:29:28,076 --> 00:29:29,176
view which Matthew had already


971
00:29:29,176 --> 00:29:30,036
showed us at the beginning.


972
00:29:31,376 --> 00:29:32,516
We can go through this list,


973
00:29:32,516 --> 00:29:34,736
select what we want to see, and


974
00:29:34,736 --> 00:29:35,906
see that now we have this nice


975
00:29:35,906 --> 00:29:37,626
interface which we can scroll


976
00:29:37,626 --> 00:29:39,116
through using the digital crown.


977
00:29:40,216 --> 00:29:41,986
And that's it.


978
00:29:42,796 --> 00:29:43,806
And if anyone does know the


979
00:29:43,806 --> 00:29:44,946
answer to this question, please


980
00:29:44,946 --> 00:29:46,116
let me know, I'm really looking


981
00:29:46,116 --> 00:29:46,766
to get the answer.


982
00:29:48,516 --> 00:29:54,546
[ Applause ]


983
00:29:55,046 --> 00:29:55,866
So that was awesome.


984
00:29:56,486 --> 00:29:58,436
We've seen how we can build some


985
00:29:58,436 --> 00:30:00,446
really great experiences using


986
00:30:00,446 --> 00:30:02,636
SwiftUI and to take advantage of


987
00:30:02,816 --> 00:30:04,036
everything that the Apple Watch


988
00:30:04,036 --> 00:30:05,446
has to offer to get us there.


989
00:30:06,536 --> 00:30:07,866
But there's more to it than


990
00:30:07,866 --> 00:30:08,186
that.


991
00:30:08,396 --> 00:30:11,186
Now we have the same UI


992
00:30:11,186 --> 00:30:12,386
framework across all of our


993
00:30:12,386 --> 00:30:13,136
platforms.


994
00:30:13,536 --> 00:30:14,976
You can take the same concept


995
00:30:14,976 --> 00:30:16,156
you've learned building your


996
00:30:16,236 --> 00:30:18,456
awesome iPhone application and


997
00:30:18,456 --> 00:30:20,266
apply them directly to building


998
00:30:20,266 --> 00:30:22,116
experiences on Apple Watch.


999
00:30:23,116 --> 00:30:24,596
We really can't wait to see what


1000
00:30:24,596 --> 00:30:25,786
you build now that you can make


1001
00:30:25,786 --> 00:30:26,946
the interfaces you've always


1002
00:30:26,946 --> 00:30:28,366
wanted to make on Apple Watch.


1003
00:30:29,546 --> 00:30:31,326
There's a ton of great sessions


1004
00:30:31,446 --> 00:30:32,896
to talk about SwiftUI at the


1005
00:30:32,896 --> 00:30:33,726
conference this year.


1006
00:30:34,126 --> 00:30:35,086
And to learn more about how to


1007
00:30:35,086 --> 00:30:36,566
make those 3-D animations,


1008
00:30:36,566 --> 00:30:37,676
definitely go check out the


1009
00:30:37,676 --> 00:30:38,726
Building Custom Views with


1010
00:30:38,726 --> 00:30:39,516
SwiftUI talk.


1011
00:30:40,136 --> 00:30:41,176
Enjoy the conference.


1012
00:30:41,356 --> 00:30:41,696
Thank you.


1013
00:30:42,516 --> 00:30:45,500
[ Applause ]

