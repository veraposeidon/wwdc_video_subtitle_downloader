1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:09,516 --> 00:00:13,766
[ Applause ]


3
00:00:14,266 --> 00:00:16,026
>> Good morning, and welcome to


4
00:00:16,026 --> 00:00:16,726
Getting Started with


5
00:00:16,726 --> 00:00:17,326
Instruments.


6
00:00:17,936 --> 00:00:19,356
My name is Tibet Rooney-Rabdau


7
00:00:19,356 --> 00:00:20,296
and with me today are my


8
00:00:20,436 --> 00:00:21,116
teammates, Ben Mitchell and


9
00:00:21,116 --> 00:00:21,976
Anand Subramanian.


10
00:00:25,926 --> 00:00:27,376
When I think about delivering a


11
00:00:27,376 --> 00:00:29,266
great user experience, I


12
00:00:29,266 --> 00:00:30,316
immediately think about


13
00:00:30,316 --> 00:00:30,966
performance.


14
00:00:32,106 --> 00:00:33,786
Responsiveness builds trust


15
00:00:34,436 --> 00:00:37,466
between the user and your app.


16
00:00:37,656 --> 00:00:39,056
No matter how much I love the UI


17
00:00:39,056 --> 00:00:40,616
of an app, when I encounter a


18
00:00:40,616 --> 00:00:43,126
spinning gear, or a poor battery


19
00:00:43,126 --> 00:00:45,476
life, my overall experience with


20
00:00:45,476 --> 00:00:46,616
the app is diminished.


21
00:00:47,526 --> 00:00:49,156
It is important to remember


22
00:00:49,156 --> 00:00:50,566
these areas when trying to


23
00:00:50,566 --> 00:00:52,166
create a great user experience


24
00:00:52,166 --> 00:00:54,206
in your app.


25
00:00:54,206 --> 00:00:55,256
In today's session, we will


26
00:00:55,256 --> 00:00:56,886
share with you our favorite tool


27
00:00:56,886 --> 00:00:58,016
to measure performance -


28
00:00:58,746 --> 00:00:59,366
Instruments.


29
00:00:59,996 --> 00:01:01,956
This is a great session for


30
00:01:01,956 --> 00:01:03,226
those who are new to Instruments


31
00:01:03,226 --> 00:01:04,096
and are looking to better


32
00:01:04,096 --> 00:01:05,406
integrate Instruments into their


33
00:01:05,446 --> 00:01:06,456
engineering workflow.


34
00:01:07,786 --> 00:01:08,916
It is important to measure


35
00:01:08,916 --> 00:01:10,836
performance early and often,


36
00:01:11,046 --> 00:01:12,226
because regressions can be


37
00:01:12,226 --> 00:01:13,166
introduced anywhere in the


38
00:01:13,166 --> 00:01:14,486
development cycle and can have a


39
00:01:14,486 --> 00:01:17,036
compounded effect.


40
00:01:17,036 --> 00:01:18,046
In fact, I like to think of


41
00:01:18,046 --> 00:01:19,616
Xcoded Instruments as best


42
00:01:19,616 --> 00:01:21,396
friends, so I keep instruments


43
00:01:21,396 --> 00:01:23,386
in the dock beside Xcode as a


44
00:01:23,386 --> 00:01:25,076
reminder to proof that early and


45
00:01:25,076 --> 00:01:26,666
often throughout the engineering


46
00:01:27,576 --> 00:01:27,786
process.


47
00:01:28,516 --> 00:01:30,336
Today we'll start out with an


48
00:01:30,336 --> 00:01:32,216
orientation of Instruments, its


49
00:01:32,216 --> 00:01:33,946
features, and a tour of its user


50
00:01:33,946 --> 00:01:34,366
interface.


51
00:01:35,286 --> 00:01:36,176
Then we'll show you how to


52
00:01:36,176 --> 00:01:37,816
profile your app to measure the


53
00:01:37,816 --> 00:01:39,016
time taken by various


54
00:01:39,016 --> 00:01:39,836
operations.


55
00:01:40,546 --> 00:01:41,786
We'll figure out what kind of


56
00:01:41,786 --> 00:01:43,586
work and how much work your app


57
00:01:43,586 --> 00:01:45,586
is doing by using a tool called


58
00:01:45,586 --> 00:01:46,506
Time Profiler.


59
00:01:46,506 --> 00:01:49,126
In the last section, we'll talk


60
00:01:49,126 --> 00:01:50,576
about adding Signposts to your


61
00:01:50,576 --> 00:01:52,546
application to gain insight into


62
00:01:52,546 --> 00:01:53,486
your app's behavior.


63
00:01:54,136 --> 00:01:55,556
Let's get started with a


64
00:01:55,556 --> 00:01:57,146
walkthrough of Instruments.


65
00:01:57,686 --> 00:02:00,596
Instruments is a powerful


66
00:02:00,596 --> 00:02:02,336
performance analysis and testing


67
00:02:02,336 --> 00:02:04,026
tool that's part of Xcode


68
00:02:04,026 --> 00:02:04,596
toolset.


69
00:02:05,306 --> 00:02:06,616
Instruments can help you profile


70
00:02:06,616 --> 00:02:08,166
your apps on all platforms -


71
00:02:08,566 --> 00:02:10,866
iOS, macOS, watchOS, tvOS - in


72
00:02:11,516 --> 00:02:13,326
order to better understand and


73
00:02:13,326 --> 00:02:14,586
optimize their behavior and


74
00:02:14,586 --> 00:02:15,006
performance.


75
00:02:16,156 --> 00:02:17,356
You can use Instruments during


76
00:02:17,356 --> 00:02:18,806
development, testing, and


77
00:02:18,806 --> 00:02:19,216
debugging.


78
00:02:19,966 --> 00:02:21,176
Also, I have good news.


79
00:02:21,646 --> 00:02:23,366
If you have Xcode already, you


80
00:02:23,416 --> 00:02:24,816
already have Instruments.


81
00:02:25,426 --> 00:02:27,296
From Xcode's product menu,


82
00:02:27,296 --> 00:02:28,096
choose Profile.


83
00:02:28,096 --> 00:02:30,406
Although Instruments is embedded


84
00:02:30,436 --> 00:02:32,306
within and is often used with


85
00:02:32,546 --> 00:02:33,856
Xcode, Instruments is a separate


86
00:02:34,046 --> 00:02:34,756
app which may be used


87
00:02:34,756 --> 00:02:35,956
independently as needed.


88
00:02:36,496 --> 00:02:37,716
You are free to choose how you


89
00:02:37,776 --> 00:02:39,096
start your performance analysis


90
00:02:40,236 --> 00:02:40,586
quest.


91
00:02:40,896 --> 00:02:43,196
Now, I'll start using the word


92
00:02:43,376 --> 00:02:44,646
Instruments in two different


93
00:02:44,646 --> 00:02:45,026
ways.


94
00:02:45,886 --> 00:02:46,906
We've already talked about the


95
00:02:46,936 --> 00:02:48,226
Instruments app.


96
00:02:48,226 --> 00:02:49,706
Why is it named that?


97
00:02:49,986 --> 00:02:51,576
Because it provides tools called


98
00:02:51,576 --> 00:02:52,856
Instruments that are used to


99
00:02:52,856 --> 00:02:54,016
profile errors in your


100
00:02:54,016 --> 00:02:54,726
application.


101
00:02:55,546 --> 00:02:56,826
In areas where it might be hard


102
00:02:56,826 --> 00:02:58,046
to understand what I'm referring


103
00:02:58,046 --> 00:02:59,516
to, I'll refer to the


104
00:02:59,516 --> 00:03:01,156
application as the Instruments


105
00:03:01,496 --> 00:03:01,563
app.


106
00:03:02,486 --> 00:03:03,846
An Instrument collects time


107
00:03:03,846 --> 00:03:05,356
series trace data from


108
00:03:05,356 --> 00:03:06,656
infrastructure that is inserted


109
00:03:06,656 --> 00:03:08,686
into important parts of apps,


110
00:03:08,686 --> 00:03:10,206
processes, and the operating


111
00:03:10,206 --> 00:03:10,596
system.


112
00:03:11,466 --> 00:03:12,766
We sometimes refer to the data


113
00:03:12,766 --> 00:03:14,166
an Instrument collects as a


114
00:03:14,166 --> 00:03:14,606
treat.


115
00:03:15,766 --> 00:03:16,936
Here we have a couple of my


116
00:03:17,006 --> 00:03:17,836
favorite Instruments.


117
00:03:18,436 --> 00:03:19,746
The Time Profiler Instrument on


118
00:03:19,746 --> 00:03:21,506
the left uses infrastructure


119
00:03:21,506 --> 00:03:23,156
provided by the operating system


120
00:03:23,156 --> 00:03:24,656
to collect call stacks of


121
00:03:24,656 --> 00:03:25,826
relevant threads at a fixed


122
00:03:25,936 --> 00:03:26,406
interval.


123
00:03:27,276 --> 00:03:28,186
The Points of Interest


124
00:03:28,186 --> 00:03:29,656
instrument on the right collects


125
00:03:29,686 --> 00:03:30,886
data from important areas of


126
00:03:30,886 --> 00:03:32,406
your app that you can highlight


127
00:03:32,766 --> 00:03:34,866
using various APIs such as


128
00:03:34,866 --> 00:03:37,056
Signpost API.


129
00:03:37,376 --> 00:03:38,986
When you first open Instruments,


130
00:03:38,986 --> 00:03:40,196
you're presented with a list of


131
00:03:40,196 --> 00:03:41,896
templates similar to the


132
00:03:41,896 --> 00:03:43,726
templates in a pages or numbers


133
00:03:43,726 --> 00:03:44,246
document.


134
00:03:44,646 --> 00:03:46,086
A template provides a


135
00:03:46,156 --> 00:03:47,526
preconfigured collection of


136
00:03:47,526 --> 00:03:49,186
Instruments to help you answer a


137
00:03:49,186 --> 00:03:51,536
performance question, similar to


138
00:03:51,536 --> 00:03:52,826
how the page's birthday card


139
00:03:52,826 --> 00:03:54,166
template provides a document


140
00:03:54,166 --> 00:03:55,156
structure to help you create a


141
00:03:55,156 --> 00:03:55,786
birthday card.


142
00:03:56,106 --> 00:03:57,846
There are too many templates to


143
00:03:57,846 --> 00:03:59,336
cover in this short session, so


144
00:03:59,336 --> 00:04:00,446
we will focus on the Time


145
00:04:00,446 --> 00:04:01,986
Profiler template which contains


146
00:04:01,986 --> 00:04:03,066
the two Instruments I just


147
00:04:03,066 --> 00:04:04,666
mentioned - Time Profiler and


148
00:04:04,666 --> 00:04:05,996
Points of Interest, as well as


149
00:04:05,996 --> 00:04:06,216
others.


150
00:04:07,296 --> 00:04:08,546
These Instruments are great


151
00:04:08,546 --> 00:04:09,466
tools for understanding


152
00:04:09,466 --> 00:04:11,626
responsiveness and your app's


153
00:04:11,626 --> 00:04:12,476
utilization.


154
00:04:12,476 --> 00:04:15,106
When you first open the Time


155
00:04:15,106 --> 00:04:16,586
Profiler template, you're


156
00:04:16,586 --> 00:04:17,916
presented with this blank


157
00:04:17,916 --> 00:04:19,586
document ready for Profiling.


158
00:04:19,646 --> 00:04:22,136
So, the top right, you can add


159
00:04:22,136 --> 00:04:23,336
additional Instruments to this


160
00:04:23,336 --> 00:04:24,846
document by clicking the Add


161
00:04:25,016 --> 00:04:26,106
Instruments button.


162
00:04:27,186 --> 00:04:28,286
Then, the Instrument's app shows


163
00:04:28,286 --> 00:04:29,236
the Instrument's library


164
00:04:29,236 --> 00:04:30,446
palette, which contains a


165
00:04:30,446 --> 00:04:31,826
complete list of available


166
00:04:31,826 --> 00:04:32,436
Instruments.


167
00:04:33,706 --> 00:04:35,216
From here, you can find new


168
00:04:35,216 --> 00:04:36,506
Instruments and drag them into


169
00:04:36,506 --> 00:04:37,706
the document to gather more


170
00:04:37,706 --> 00:04:37,976
data.


171
00:04:39,356 --> 00:04:40,916
So, the top left, we have the


172
00:04:40,916 --> 00:04:42,036
Profiling Controls.


173
00:04:42,496 --> 00:04:43,816
This allows you to record,


174
00:04:43,816 --> 00:04:45,746
pause, and stop data collection.


175
00:04:46,516 --> 00:04:48,006
Beside the Profiling Controls is


176
00:04:48,006 --> 00:04:48,746
the Target Area.


177
00:04:49,416 --> 00:04:50,506
The Target Device List on the


178
00:04:50,506 --> 00:04:52,166
left allows you to select the


179
00:04:52,166 --> 00:04:53,196
device on which you wish to


180
00:04:53,196 --> 00:04:53,716
profile.


181
00:04:54,446 --> 00:04:56,216
This is similar to the Xcode


182
00:04:56,216 --> 00:04:57,426
Target Area where you choose the


183
00:04:57,426 --> 00:04:59,326
device and the process to


184
00:04:59,326 --> 00:05:00,226
Profile on the device.


185
00:05:01,316 --> 00:05:02,666
Typically you will choose your


186
00:05:02,666 --> 00:05:04,046
app's process as your Target


187
00:05:04,046 --> 00:05:05,846
Process, but for instance, if


188
00:05:05,846 --> 00:05:06,836
you're Profiling a shared


189
00:05:06,836 --> 00:05:08,236
extension, you would choose your


190
00:05:08,236 --> 00:05:09,846
extension Process, which will be


191
00:05:09,846 --> 00:05:12,146
separate from your app.


192
00:05:12,406 --> 00:05:13,786
When I start recording in the


193
00:05:13,786 --> 00:05:15,306
Time Profiler template, the


194
00:05:15,306 --> 00:05:16,226
document will start being


195
00:05:16,226 --> 00:05:18,326
populated with trace data.


196
00:05:18,326 --> 00:05:20,036
As an aside, recording with


197
00:05:20,036 --> 00:05:21,136
Instruments uses System


198
00:05:21,136 --> 00:05:22,926
Resources, just like your app


199
00:05:22,926 --> 00:05:23,086
does.


200
00:05:23,826 --> 00:05:25,386
To minimize its impact on your


201
00:05:25,696 --> 00:05:26,956
app, Instruments also offers a


202
00:05:26,956 --> 00:05:28,346
feature called Last Few Seconds


203
00:05:28,406 --> 00:05:30,286
Mode, sometimes called Windowed


204
00:05:30,286 --> 00:05:30,586
Mode.


205
00:05:31,836 --> 00:05:33,436
Windowed Mode keeps Instruments


206
00:05:33,436 --> 00:05:34,886
from analyzing or displaying


207
00:05:34,886 --> 00:05:36,566
results until recording ends and


208
00:05:36,916 --> 00:05:38,326
ignores events prior to the last


209
00:05:38,366 --> 00:05:39,466
few seconds of recording.


210
00:05:40,256 --> 00:05:41,176
This is helpful when you just


211
00:05:41,176 --> 00:05:42,416
want to start recording and


212
00:05:42,466 --> 00:05:43,376
select stop when you see a


213
00:05:43,376 --> 00:05:43,966
problem.


214
00:05:44,676 --> 00:05:45,956
Some templates use this mode by


215
00:05:45,956 --> 00:05:47,286
default because they gather a


216
00:05:47,286 --> 00:05:49,296
lot of data over a short period


217
00:05:49,296 --> 00:05:49,866
of time.


218
00:05:51,426 --> 00:05:52,406
Now that I've just finished


219
00:05:52,406 --> 00:05:53,576
recording in the Time Profiler


220
00:05:53,676 --> 00:05:55,336
template, a lot of trace data


221
00:05:55,336 --> 00:05:56,686
has been populated into various


222
00:05:56,686 --> 00:05:57,416
parts of this window.


223
00:05:58,096 --> 00:05:59,656
This may look like a lot, so


224
00:05:59,656 --> 00:06:00,736
let's go on a side quest to


225
00:06:00,736 --> 00:06:01,866
learn what each part does.


226
00:06:03,226 --> 00:06:04,786
The top portion of the window


227
00:06:04,786 --> 00:06:06,266
contains the Track Viewer.


228
00:06:06,836 --> 00:06:08,516
A Track shows time series trace


229
00:06:08,516 --> 00:06:10,166
data corresponding to one source


230
00:06:10,166 --> 00:06:12,266
of events, such as the process,


231
00:06:12,266 --> 00:06:13,496
thread, or CPU core.


232
00:06:14,126 --> 00:06:15,696
A single Instrument may


233
00:06:15,696 --> 00:06:16,716
contribute trace data to


234
00:06:16,816 --> 00:06:17,896
multiple Tracks.


235
00:06:18,396 --> 00:06:20,246
In this example, three Tracks


236
00:06:20,246 --> 00:06:20,806
are visible.


237
00:06:21,476 --> 00:06:22,846
The top Track is a summary of


238
00:06:22,846 --> 00:06:23,846
our application's CPU


239
00:06:23,846 --> 00:06:25,916
utilization provided by the Time


240
00:06:25,916 --> 00:06:26,796
Profiler Instrument.


241
00:06:27,626 --> 00:06:29,166
The next Track shows data


242
00:06:29,166 --> 00:06:30,376
collected from the Points of


243
00:06:30,456 --> 00:06:31,996
Interest Instrument, which Anand


244
00:06:31,996 --> 00:06:32,956
will show you later.


245
00:06:33,266 --> 00:06:34,406
Additional Tracks follow


246
00:06:34,406 --> 00:06:35,726
breaking things down in finer


247
00:06:35,726 --> 00:06:36,006
detail.


248
00:06:36,726 --> 00:06:39,236
A given Instrument's trace may


249
00:06:39,236 --> 00:06:40,466
have dozens of Tracks.


250
00:06:41,326 --> 00:06:42,876
You can use the Track Filter to


251
00:06:42,876 --> 00:06:44,296
just show the Instruments or


252
00:06:44,296 --> 00:06:46,236
break it up by thread, or by CPU


253
00:06:46,286 --> 00:06:46,576
core.


254
00:06:47,356 --> 00:06:48,636
You can also get more specific


255
00:06:48,636 --> 00:06:51,646
and search for Tracks by name.


256
00:06:51,646 --> 00:06:52,886
Lower down in the window, the


257
00:06:52,886 --> 00:06:54,186
detail view allows you to


258
00:06:54,286 --> 00:06:55,736
explore the trace data for the


259
00:06:55,736 --> 00:06:56,376
selected Track.


260
00:06:56,896 --> 00:06:58,546
In this example, with the Time


261
00:06:58,546 --> 00:07:00,436
Profiler Track selected, we can


262
00:07:00,436 --> 00:07:01,826
explore the functions called on


263
00:07:01,826 --> 00:07:02,986
each thread during the trace.


264
00:07:03,726 --> 00:07:06,026
To the right side of the Detail


265
00:07:06,026 --> 00:07:07,526
View, you'll find the Extended


266
00:07:07,526 --> 00:07:08,456
Detail View within the


267
00:07:08,456 --> 00:07:09,016
Inspector.


268
00:07:09,836 --> 00:07:11,506
This is a view that may provide


269
00:07:11,506 --> 00:07:12,586
richer information from the


270
00:07:12,586 --> 00:07:14,186
Instruments in use, depending on


271
00:07:14,186 --> 00:07:15,716
current context and selection.


272
00:07:16,416 --> 00:07:17,886
In this example, because I'm


273
00:07:17,886 --> 00:07:19,386
using Time Profiler, I have a


274
00:07:19,386 --> 00:07:20,496
summary showing the heaviest


275
00:07:20,496 --> 00:07:22,266
call stack.


276
00:07:22,746 --> 00:07:24,046
Another way to see what is


277
00:07:24,046 --> 00:07:25,806
happening at a moment in time is


278
00:07:25,806 --> 00:07:26,886
through the Inspection Head.


279
00:07:27,686 --> 00:07:28,586
The Inspection Head is a


280
00:07:28,586 --> 00:07:30,416
selector which can be placed at


281
00:07:30,556 --> 00:07:32,616
a specific time in the trace in


282
00:07:32,616 --> 00:07:33,646
order to select all traced


283
00:07:33,646 --> 00:07:35,466
events or intervals occurring at


284
00:07:35,466 --> 00:07:36,916
that time.


285
00:07:37,256 --> 00:07:38,486
Additional details about the


286
00:07:38,486 --> 00:07:39,846
selected events are displayed in


287
00:07:39,846 --> 00:07:40,686
Hovering Labels.


288
00:07:41,116 --> 00:07:42,976
The Detail and Extended Detail


289
00:07:42,976 --> 00:07:44,856
views are updated to focus on


290
00:07:44,856 --> 00:07:46,156
information about the selected


291
00:07:46,156 --> 00:07:47,406
events where applicable.


292
00:07:48,566 --> 00:07:49,976
We've finished our side quest


293
00:07:49,976 --> 00:07:51,296
and now better understand the


294
00:07:51,296 --> 00:07:53,286
Instruments' User Interface.


295
00:07:53,336 --> 00:07:54,866
Everything shown in the window


296
00:07:55,116 --> 00:07:56,566
is part of a trace document.


297
00:07:57,286 --> 00:07:59,046
The trace document contains any


298
00:07:59,046 --> 00:08:00,196
Instruments configured for


299
00:08:00,196 --> 00:08:01,786
Profiling along with collected


300
00:08:01,786 --> 00:08:03,696
data and views you're using to


301
00:08:03,696 --> 00:08:04,656
analyze the results.


302
00:08:05,616 --> 00:08:07,746
The Instruments app can save and


303
00:08:07,746 --> 00:08:08,976
reopen these trace documents,


304
00:08:09,226 --> 00:08:10,536
allowing you to explore old


305
00:08:10,536 --> 00:08:12,216
results or share them with a


306
00:08:12,216 --> 00:08:13,446
teammate for investigation.


307
00:08:13,446 --> 00:08:15,926
With that, I would like to


308
00:08:15,926 --> 00:08:16,896
welcome my teammate, Ben


309
00:08:16,896 --> 00:08:18,056
Mitchell, to the stage, so he


310
00:08:18,056 --> 00:08:19,096
can show some of these things in


311
00:08:19,096 --> 00:08:19,616
action.


312
00:08:19,966 --> 00:08:20,506
Thank you!


313
00:08:21,516 --> 00:08:25,416
[ Applause ]


314
00:08:25,916 --> 00:08:26,446
>> Thanks, Tibet.


315
00:08:26,946 --> 00:08:27,536
Hello, World.


316
00:08:27,536 --> 00:08:29,036
My name is Ben Mitchell and as


317
00:08:29,036 --> 00:08:29,926
Tibet mentioned, I'm going to


318
00:08:29,926 --> 00:08:31,006
show you how to Profile your


319
00:08:31,006 --> 00:08:32,405
application using Instruments.


320
00:08:33,015 --> 00:08:33,686
Let's get started.


321
00:08:37,275 --> 00:08:38,506
For those of you who saw some


322
00:08:38,506 --> 00:08:39,666
sessions at last year's


323
00:08:39,666 --> 00:08:42,176
conference, WWDC2018, you might


324
00:08:42,176 --> 00:08:43,496
recognize the Solar System app.


325
00:08:44,145 --> 00:08:45,286
We shipped it about a year ago,


326
00:08:45,286 --> 00:08:46,036
and we've gotten some good


327
00:08:46,036 --> 00:08:47,096
feedback from our customers.


328
00:08:47,636 --> 00:08:49,356
But, also some less-than-awesome


329
00:08:49,356 --> 00:08:50,676
feedback; in particular, in


330
00:08:50,676 --> 00:08:51,606
areas of performance.


331
00:08:51,916 --> 00:08:53,676
Our customers have reported some


332
00:08:53,676 --> 00:08:54,716
responsiveness issues,


333
00:08:55,436 --> 00:08:57,086
particularly on older devices.


334
00:08:57,406 --> 00:08:59,036
I was able to reproduce one of


335
00:08:59,036 --> 00:09:00,376
these before the session and I'd


336
00:09:00,376 --> 00:09:01,606
like to demo it to you know with


337
00:09:01,606 --> 00:09:02,716
Instruments attached so we can


338
00:09:02,756 --> 00:09:03,466
see if we can fix it.


339
00:09:04,096 --> 00:09:04,846
Let's dive right in.


340
00:09:06,266 --> 00:09:07,166
With the application already


341
00:09:07,166 --> 00:09:08,126
running, I'll just open


342
00:09:08,126 --> 00:09:08,676
Instruments.


343
00:09:10,616 --> 00:09:11,756
The Instruments Template


344
00:09:11,756 --> 00:09:13,056
Selector already has Time


345
00:09:13,056 --> 00:09:14,606
Profiler chosen, because I've


346
00:09:14,606 --> 00:09:15,406
used it previously.


347
00:09:15,776 --> 00:09:17,006
Time Profiler is a great tool


348
00:09:17,076 --> 00:09:18,336
for looking at issues that occur


349
00:09:18,336 --> 00:09:19,666
over a particular window of


350
00:09:20,026 --> 00:09:20,166
time.


351
00:09:20,596 --> 00:09:22,476
I'll select Time Profiler and


352
00:09:22,476 --> 00:09:23,916
using the Choose button, will


353
00:09:23,916 --> 00:09:24,876
open a new trace document.


354
00:09:25,406 --> 00:09:27,366
Because I didn't launch this


355
00:09:27,366 --> 00:09:28,326
from Xcode, the first thing I


356
00:09:28,326 --> 00:09:29,466
need to do is select which


357
00:09:29,506 --> 00:09:30,826
process I'm going to trace.


358
00:09:31,656 --> 00:09:32,906
Using the target selection area,


359
00:09:33,436 --> 00:09:36,046
I'll click All Processes and


360
00:09:36,046 --> 00:09:37,146
select the Solar System Mac


361
00:09:37,146 --> 00:09:38,046
application that's already


362
00:09:38,046 --> 00:09:38,286
running.


363
00:09:39,076 --> 00:09:40,466
To the right, you can see a


364
00:09:40,466 --> 00:09:40,796
number.


365
00:09:40,796 --> 00:09:42,136
That's the process identifier


366
00:09:42,136 --> 00:09:43,656
and it appears in Activity


367
00:09:43,656 --> 00:09:44,006
Monitoring.


368
00:09:44,176 --> 00:09:47,426
We've selected the application,


369
00:09:47,426 --> 00:09:49,356
and now we'll click Record in


370
00:09:49,356 --> 00:09:50,246
the top left of the window.


371
00:09:52,336 --> 00:09:52,726
There we go.


372
00:09:52,726 --> 00:09:53,586
Instruments is recording.


373
00:09:54,606 --> 00:09:55,646
I'll switch over to the app.


374
00:09:56,796 --> 00:09:58,566
The Solar System app supports a


375
00:09:58,566 --> 00:10:00,266
number of gestures on the Track


376
00:10:00,266 --> 00:10:00,516
Pad.


377
00:10:00,606 --> 00:10:01,986
It supports clicks and drags,


378
00:10:02,346 --> 00:10:04,076
but also pans, pinch to zoom,


379
00:10:04,146 --> 00:10:04,676
and so on.


380
00:10:04,676 --> 00:10:06,696
And our customers have reported


381
00:10:06,696 --> 00:10:07,406
that when they're performing


382
00:10:07,406 --> 00:10:09,156
these operations and they press


383
00:10:09,156 --> 00:10:11,086
command + R to reload data, the


384
00:10:11,286 --> 00:10:12,666
user interface freezes and the


385
00:10:12,666 --> 00:10:13,946
dreaded Spinning Wait Cursor


386
00:10:13,946 --> 00:10:14,436
appears.


387
00:10:15,036 --> 00:10:15,936
You may know it by some other


388
00:10:15,936 --> 00:10:16,316
names.


389
00:10:16,646 --> 00:10:17,616
That's not awesome.


390
00:10:18,126 --> 00:10:20,576
We were able to reproduce it, so


391
00:10:20,576 --> 00:10:21,666
let's switch back to Instruments


392
00:10:21,726 --> 00:10:22,566
and see what we can find.


393
00:10:23,416 --> 00:10:24,686
I'll quit the application and


394
00:10:24,686 --> 00:10:26,026
Instruments automatically stops


395
00:10:26,026 --> 00:10:26,426
recording.


396
00:10:26,656 --> 00:10:29,666
So, we can see the populated


397
00:10:29,666 --> 00:10:30,416
trace data here.


398
00:10:30,416 --> 00:10:31,576
And the first thing I'm going to


399
00:10:31,576 --> 00:10:33,046
do is make it a little larger so


400
00:10:33,046 --> 00:10:33,946
we can see it in more detail.


401
00:10:35,236 --> 00:10:36,296
With the mouse cursor over the


402
00:10:36,296 --> 00:10:37,816
track area, a pinch to zoom


403
00:10:37,816 --> 00:10:39,736
gesture makes it larger and


404
00:10:39,736 --> 00:10:40,926
allows us to see things closer.


405
00:10:42,376 --> 00:10:43,786
On the left-hand side in the


406
00:10:43,786 --> 00:10:45,386
track area, we can see several


407
00:10:45,386 --> 00:10:47,106
instruments have provided tracks


408
00:10:47,106 --> 00:10:47,546
for us.


409
00:10:47,956 --> 00:10:49,046
Time Profiler is showing us a


410
00:10:49,046 --> 00:10:50,626
summary of the CPU utilization.


411
00:10:50,986 --> 00:10:51,716
The Points of Interest


412
00:10:51,716 --> 00:10:53,076
Instrument is currently empty.


413
00:10:53,246 --> 00:10:54,256
Anand will show you that later.


414
00:10:54,366 --> 00:10:55,566
And there are a number of


415
00:10:55,566 --> 00:10:56,796
others, including thermal state,


416
00:10:56,796 --> 00:10:58,436
and then breakdowns further on


417
00:10:58,436 --> 00:10:59,066
down the scroll view.


418
00:11:00,426 --> 00:11:01,986
If we move our mouse cursor over


419
00:11:01,986 --> 00:11:04,146
the CPU Usage summary track, we


420
00:11:04,146 --> 00:11:05,566
can see a hovering label that


421
00:11:05,566 --> 00:11:06,806
shows what the utilization level


422
00:11:06,806 --> 00:11:07,126
is.


423
00:11:08,196 --> 00:11:09,716
And when I hit this large area


424
00:11:09,746 --> 00:11:11,836
here, the utilization is above


425
00:11:11,836 --> 00:11:12,526
100%.


426
00:11:13,206 --> 00:11:13,956
So, this appears to be


427
00:11:13,956 --> 00:11:15,956
suspicious and I suspect this is


428
00:11:15,956 --> 00:11:17,016
around the time of that reload


429
00:11:17,016 --> 00:11:17,516
operation.


430
00:11:18,076 --> 00:11:19,946
I'd like to compare this to some


431
00:11:19,946 --> 00:11:20,806
of the other tracks.


432
00:11:21,026 --> 00:11:21,976
So, we're going to use a feature


433
00:11:21,976 --> 00:11:22,786
called Track Pinning.


434
00:11:23,336 --> 00:11:25,956
In the left-hand side of the


435
00:11:25,956 --> 00:11:27,436
window, when I move my mouse


436
00:11:27,436 --> 00:11:29,516
over one of the track entries, a


437
00:11:29,516 --> 00:11:30,666
plus button appears.


438
00:11:31,956 --> 00:11:34,586
Clicking it, pins that track to


439
00:11:34,586 --> 00:11:35,866
the bottom of the track area.


440
00:11:36,646 --> 00:11:37,956
And now we can scroll through


441
00:11:37,956 --> 00:11:39,536
the other tracks and see the one


442
00:11:39,536 --> 00:11:40,696
that was of interest side by


443
00:11:40,696 --> 00:11:41,016
side.


444
00:11:41,496 --> 00:11:42,846
You can pin multiple tracks.


445
00:11:44,246 --> 00:11:45,706
As we scroll down, we can see


446
00:11:45,706 --> 00:11:46,956
things broken out by each CPU


447
00:11:46,956 --> 00:11:47,746
core on the system.


448
00:11:48,236 --> 00:11:50,716
And now we have a track entry


449
00:11:51,046 --> 00:11:52,566
for the process itself, Solar


450
00:11:52,566 --> 00:11:54,006
System Mac.


451
00:11:54,006 --> 00:11:55,236
In addition to a CPU usage


452
00:11:55,236 --> 00:11:56,576
summary, this also shows us app


453
00:11:56,576 --> 00:11:57,486
lifecycle events.


454
00:11:57,816 --> 00:11:58,616
We can see here where the


455
00:11:58,616 --> 00:11:59,486
application came into the


456
00:11:59,486 --> 00:12:00,766
foreground when I clicked it on


457
00:12:00,766 --> 00:12:01,646
the dock.


458
00:12:02,516 --> 00:12:04,266
There's also a suspicious red


459
00:12:04,266 --> 00:12:06,076
area over here during the CPU


460
00:12:06,076 --> 00:12:06,926
usage spike.


461
00:12:07,836 --> 00:12:09,026
Moving the mouse over it, I can


462
00:12:09,026 --> 00:12:10,416
see that the label is spinning.


463
00:12:11,756 --> 00:12:12,876
Spinning is how Instruments


464
00:12:12,876 --> 00:12:14,506
refers to your main thread being


465
00:12:14,506 --> 00:12:14,946
blocked.


466
00:12:15,246 --> 00:12:16,266
And on the Mac, that's what


467
00:12:16,266 --> 00:12:17,406
causes the Spinning Wait Cursor.


468
00:12:17,726 --> 00:12:19,496
The main thread has just a few


469
00:12:19,496 --> 00:12:20,626
very specific uses.


470
00:12:20,886 --> 00:12:21,806
It should be used for handling


471
00:12:21,806 --> 00:12:23,576
user input or for updating the


472
00:12:23,576 --> 00:12:24,316
user interface.


473
00:12:24,766 --> 00:12:25,736
Clearly, something else is going


474
00:12:25,736 --> 00:12:25,946
on here.


475
00:12:29,186 --> 00:12:30,626
I'd like to look at the main


476
00:12:30,626 --> 00:12:30,896
thread.


477
00:12:32,286 --> 00:12:33,806
So, I will expand the Solar


478
00:12:33,806 --> 00:12:35,026
System Mac process.


479
00:12:35,866 --> 00:12:37,036
And now there are a number of


480
00:12:37,036 --> 00:12:38,846
other tracks corresponding to


481
00:12:38,846 --> 00:12:40,346
each thread in the application.


482
00:12:40,816 --> 00:12:42,776
Scrolling all the way down,


483
00:12:43,406 --> 00:12:44,196
here's the main thread.


484
00:12:44,196 --> 00:12:46,456
And the main thread is showing a


485
00:12:46,456 --> 00:12:46,856
spike.


486
00:12:47,466 --> 00:12:49,576
So, this looks like the event


487
00:12:49,576 --> 00:12:51,746
that I want to take a look at.


488
00:12:51,746 --> 00:12:52,886
The next feature of Instruments


489
00:12:52,886 --> 00:12:54,296
that we're going to use allows


490
00:12:54,296 --> 00:12:56,166
us to filter events by clicking


491
00:12:56,166 --> 00:12:57,616
and dragging in the track area.


492
00:12:58,726 --> 00:12:59,576
Now, the Detail view at the


493
00:12:59,576 --> 00:13:00,826
bottom is only showing events


494
00:13:00,866 --> 00:13:01,796
from the selected window of


495
00:13:01,796 --> 00:13:02,016
time.


496
00:13:02,896 --> 00:13:03,936
Let's look in the Detail view


497
00:13:04,066 --> 00:13:05,286
and learn more.


498
00:13:05,856 --> 00:13:08,566
The Detail view shows us a call


499
00:13:08,566 --> 00:13:09,186
graph.


500
00:13:09,186 --> 00:13:10,266
These are all the functions that


501
00:13:10,266 --> 00:13:11,926
were invoked during the time of


502
00:13:11,926 --> 00:13:12,476
our profile.


503
00:13:12,636 --> 00:13:13,586
Or, in this case, during the


504
00:13:13,586 --> 00:13:14,806
time we have selected in the


505
00:13:14,806 --> 00:13:15,106
filter.


506
00:13:15,796 --> 00:13:17,766
It's important to understand


507
00:13:17,766 --> 00:13:18,316
what this is doing.


508
00:13:18,316 --> 00:13:21,326
We're not actually tracking


509
00:13:21,326 --> 00:13:22,776
every function entry and exit.


510
00:13:23,366 --> 00:13:24,946
Instead, Time Profiler takes a


511
00:13:24,946 --> 00:13:26,526
snapshot many times per second


512
00:13:26,706 --> 00:13:28,336
and notes all of the functions


513
00:13:28,336 --> 00:13:29,156
that are running in your


514
00:13:29,156 --> 00:13:29,726
process.


515
00:13:30,886 --> 00:13:32,536
So, on the left-hand side, we


516
00:13:32,536 --> 00:13:33,216
have a wait column.


517
00:13:34,476 --> 00:13:36,716
Solar System Mac appears 100% of


518
00:13:36,716 --> 00:13:37,126
the time.


519
00:13:37,406 --> 00:13:38,726
This means that in every sample,


520
00:13:38,726 --> 00:13:40,016
Solar System Mac was present.


521
00:13:40,356 --> 00:13:41,276
That's good, because that's the


522
00:13:41,276 --> 00:13:41,966
application that we're


523
00:13:41,966 --> 00:13:42,406
profiling.


524
00:13:43,266 --> 00:13:44,336
As we move on down, the main


525
00:13:44,336 --> 00:13:47,006
thread is present in 96.7% and


526
00:13:47,006 --> 00:13:47,376
so on.


527
00:13:47,826 --> 00:13:49,126
And we can begin disclosing


528
00:13:49,126 --> 00:13:50,476
these threads to the deeper end


529
00:13:50,476 --> 00:13:51,176
of the functions that were


530
00:13:51,176 --> 00:13:51,436
called.


531
00:13:52,376 --> 00:13:53,356
But there are a lot of them here


532
00:13:53,596 --> 00:13:54,966
and I'd have to click a number


533
00:13:54,966 --> 00:13:55,816
of times to find something


534
00:13:55,816 --> 00:13:56,186
interesting.


535
00:13:56,726 --> 00:13:58,006
So, Instruments provides another


536
00:13:58,006 --> 00:13:58,736
useful trick.


537
00:13:58,736 --> 00:14:00,606
If you hold down the Option key


538
00:14:00,846 --> 00:14:01,646
and click the Disclosure


539
00:14:01,646 --> 00:14:03,096
Triangle, Instruments


540
00:14:03,096 --> 00:14:04,696
automatically expands the track


541
00:14:04,696 --> 00:14:06,166
list until there is a control


542
00:14:06,236 --> 00:14:07,966
flow branch, which might be an


543
00:14:07,966 --> 00:14:08,506
interesting event.


544
00:14:08,506 --> 00:14:10,956
As you can see, there's a lot


545
00:14:10,956 --> 00:14:12,696
here, and it can be hard to dig


546
00:14:12,696 --> 00:14:14,056
in and find exactly what your


547
00:14:14,056 --> 00:14:14,706
problem is.


548
00:14:15,016 --> 00:14:16,866
So, Instruments also provides


549
00:14:17,216 --> 00:14:18,676
the heaviest stack trace in the


550
00:14:18,676 --> 00:14:20,036
Extended Detail View for Time


551
00:14:20,036 --> 00:14:20,466
Profiler.


552
00:14:21,746 --> 00:14:23,266
The heaviest stack trace is the


553
00:14:23,676 --> 00:14:24,496
set of functions that were


554
00:14:24,496 --> 00:14:26,276
called most often during the


555
00:14:26,446 --> 00:14:26,836
Profile.


556
00:14:27,706 --> 00:14:28,756
So, up at the top, we can see


557
00:14:28,756 --> 00:14:30,396
Solar System Mac appears, and


558
00:14:30,396 --> 00:14:31,536
some of these frames are


559
00:14:31,536 --> 00:14:32,506
highlighted in white.


560
00:14:33,466 --> 00:14:34,426
These are the frames that are


561
00:14:34,476 --> 00:14:35,606
from your own process.


562
00:14:37,636 --> 00:14:38,616
Frames that come from System


563
00:14:38,616 --> 00:14:40,086
Frameworks or Libraries are


564
00:14:40,086 --> 00:14:40,656
shown in grey.


565
00:14:41,686 --> 00:14:43,186
So, the main thread executes the


566
00:14:43,186 --> 00:14:44,506
main function, and then there's


567
00:14:44,506 --> 00:14:45,816
a block of System Framework


568
00:14:45,816 --> 00:14:46,706
provided functions.


569
00:14:47,276 --> 00:14:50,356
It's only further down that we


570
00:14:50,356 --> 00:14:52,166
find another area of highlighted


571
00:14:52,166 --> 00:14:52,636
functions.


572
00:14:53,656 --> 00:14:54,856
The first one here is labeled as


573
00:14:54,856 --> 00:14:55,416
a thunk.


574
00:14:56,526 --> 00:14:57,206
What is a thunk?


575
00:14:58,136 --> 00:14:59,256
This is a piece of helper code


576
00:14:59,256 --> 00:15:00,396
generated by the compiler.


577
00:15:00,706 --> 00:15:01,876
It doesn't correspond directly


578
00:15:01,876 --> 00:15:02,726
to any source code in your


579
00:15:02,726 --> 00:15:03,206
application.


580
00:15:03,656 --> 00:15:05,266
So in this case we'll ignore the


581
00:15:05,266 --> 00:15:05,536
thunk.


582
00:15:06,036 --> 00:15:07,666
What we want to focus in on is


583
00:15:07,666 --> 00:15:09,466
this one, the first closure in a


584
00:15:09,466 --> 00:15:10,526
method in the network request


585
00:15:10,526 --> 00:15:10,906
scheduler.


586
00:15:12,346 --> 00:15:13,996
If I click on this line, it is


587
00:15:13,996 --> 00:15:15,046
selected in the Detail view.


588
00:15:15,966 --> 00:15:17,576
Double clicking it displays the


589
00:15:17,576 --> 00:15:18,486
source code right in line.


590
00:15:19,836 --> 00:15:20,586
So, I can see that we have a


591
00:15:20,586 --> 00:15:21,826
method called Schedule Parsing


592
00:15:21,826 --> 00:15:22,226
Task.


593
00:15:22,766 --> 00:15:24,056
And it's doing some work on the


594
00:15:24,056 --> 00:15:26,506
main dispatch queue including


595
00:15:26,506 --> 00:15:27,976
doing some data parsing, and


596
00:15:27,976 --> 00:15:29,506
that seems problematic.


597
00:15:29,506 --> 00:15:30,576
As mentioned earlier, the main


598
00:15:30,576 --> 00:15:31,516
thread should really only be


599
00:15:31,516 --> 00:15:33,126
used for user input and for user


600
00:15:33,126 --> 00:15:33,936
interface updates.


601
00:15:34,366 --> 00:15:35,476
So, I'd like to fix this.


602
00:15:36,006 --> 00:15:37,586
In the top right of the detail


603
00:15:37,586 --> 00:15:39,136
view, there's an Open File in


604
00:15:39,136 --> 00:15:39,636
Xcode button.


605
00:15:40,286 --> 00:15:40,926
I'll click it now.


606
00:15:45,576 --> 00:15:47,096
And Xcode has come to the front.


607
00:15:48,126 --> 00:15:49,976
So, I want to move this on to


608
00:15:49,976 --> 00:15:51,226
its own dispatch queue so that


609
00:15:51,226 --> 00:15:52,026
it's not blocking the main


610
00:15:52,026 --> 00:15:52,276
thread.


611
00:15:53,276 --> 00:15:54,056
The first thing we'll do is


612
00:15:54,056 --> 00:15:55,026
we'll create this dispatch


613
00:15:55,056 --> 00:15:55,226
queue.


614
00:15:55,766 --> 00:15:58,406
We'll call it Parsing Queue.


615
00:15:58,616 --> 00:16:00,766
Now, let's move the work onto


616
00:16:00,766 --> 00:16:02,696
Parsing Queue by using an


617
00:16:02,696 --> 00:16:04,106
asynchronous closure.


618
00:16:05,226 --> 00:16:06,186
We'll just move this work item


619
00:16:06,186 --> 00:16:06,646
up there.


620
00:16:07,486 --> 00:16:08,536
And we still want to notify the


621
00:16:08,536 --> 00:16:10,046
user interface that parsing


622
00:16:10,046 --> 00:16:11,406
completed after that is done.


623
00:16:11,886 --> 00:16:13,256
So, we'll take this call onto


624
00:16:13,256 --> 00:16:15,376
the dispatch main queue after


625
00:16:16,186 --> 00:16:16,286
that.


626
00:16:16,836 --> 00:16:18,486
We'll save, and now we're ready


627
00:16:18,486 --> 00:16:19,526
to try to reproduce our bug


628
00:16:19,526 --> 00:16:19,766
again.


629
00:16:20,606 --> 00:16:22,256
This time, I'll use the Product


630
00:16:22,256 --> 00:16:23,706
Menu and select Profile, as


631
00:16:23,706 --> 00:16:24,576
Tibet showed you earlier.


632
00:16:25,136 --> 00:16:28,726
Xcode builds the application and


633
00:16:28,726 --> 00:16:29,776
brings Instruments to the front.


634
00:16:30,706 --> 00:16:31,466
The Template Chooser has


635
00:16:31,466 --> 00:16:33,036
appeared again because this time


636
00:16:33,066 --> 00:16:34,196
we're not testing a downloaded


637
00:16:34,196 --> 00:16:35,636
copy of this application - we're


638
00:16:35,636 --> 00:16:36,796
testing the one that Xcode has


639
00:16:36,846 --> 00:16:38,226
put in its Drive Data directory.


640
00:16:39,526 --> 00:16:41,176
Time Profiler is selected and


641
00:16:41,326 --> 00:16:42,076
we'll click Choose.


642
00:16:42,586 --> 00:16:45,956
This time, we don't need to


643
00:16:45,956 --> 00:16:47,536
select a target because Xcode


644
00:16:47,536 --> 00:16:48,696
has already informed Instruments


645
00:16:48,696 --> 00:16:49,696
of the application we want to


646
00:16:49,696 --> 00:16:50,116
test.


647
00:16:51,306 --> 00:16:52,976
And furthermore, clicking Record


648
00:16:52,976 --> 00:16:54,856
at the top left launches it for


649
00:16:55,816 --> 00:16:58,756
us automatically.


650
00:16:58,786 --> 00:17:00,426
Switching to the app, let's try


651
00:17:00,426 --> 00:17:02,266
the problematic series of user


652
00:17:02,266 --> 00:17:02,856
inputs again.


653
00:17:03,716 --> 00:17:05,476
A bunch of clicking and dragging


654
00:17:05,616 --> 00:17:07,036
and command + R.


655
00:17:07,386 --> 00:17:09,776
And we can see no more Spinning


656
00:17:09,776 --> 00:17:10,226
Wait Cursor.


657
00:17:10,945 --> 00:17:12,016
Let's do that one more time just


658
00:17:12,016 --> 00:17:12,366
to be sure.


659
00:17:13,356 --> 00:17:15,425
Click, drag, command + R.


660
00:17:16,106 --> 00:17:17,996
No Spinning Wait Cursor.


661
00:17:18,476 --> 00:17:19,486
So, we've addressed our


662
00:17:19,486 --> 00:17:20,266
responsiveness issue.


663
00:17:21,205 --> 00:17:23,986
I'll stop recording and we'll


664
00:17:23,986 --> 00:17:25,126
pinch to zoom again to expand


665
00:17:25,126 --> 00:17:25,626
the track view.


666
00:17:26,376 --> 00:17:27,746
I want to make sure that this


667
00:17:27,786 --> 00:17:28,766
work has been moved off of the


668
00:17:28,766 --> 00:17:30,456
main thread, so I'm going to use


669
00:17:30,456 --> 00:17:32,646
the track filter area, top left.


670
00:17:33,306 --> 00:17:35,186
And we'll search for the main


671
00:17:35,186 --> 00:17:35,436
thread.


672
00:17:36,956 --> 00:17:37,896
The only track that appears is


673
00:17:37,896 --> 00:17:39,346
the Solar System Mac's track


674
00:17:39,346 --> 00:17:39,706
entry.


675
00:17:39,706 --> 00:17:41,516
And when I expand it, I can see


676
00:17:41,516 --> 00:17:42,366
the main thread is visible.


677
00:17:43,836 --> 00:17:45,716
Over here, where we have a spike


678
00:17:45,716 --> 00:17:47,486
of CPU usage, the main thread is


679
00:17:47,486 --> 00:17:48,826
doing relatively little work,


680
00:17:49,316 --> 00:17:51,466
and the second time period is


681
00:17:51,466 --> 00:17:51,966
showing the same.


682
00:17:52,806 --> 00:17:54,076
So, it appears we have addressed


683
00:17:54,076 --> 00:17:55,206
the responsiveness issue and


684
00:17:55,206 --> 00:17:56,236
moved this work off of the main


685
00:17:56,236 --> 00:17:56,496
thread.


686
00:17:57,516 --> 00:18:02,026
[ Applause ]


687
00:18:02,526 --> 00:18:03,406
I'd like to discuss a few


688
00:18:03,406 --> 00:18:04,956
Profiling tips.


689
00:18:05,616 --> 00:18:07,086
First off, Time Profiler is a


690
00:18:07,086 --> 00:18:08,376
great tool for understanding how


691
00:18:08,376 --> 00:18:09,406
your app is spending time.


692
00:18:10,456 --> 00:18:11,846
This may be a responsiveness


693
00:18:11,846 --> 00:18:12,866
issue, like Spinning Wait


694
00:18:12,866 --> 00:18:13,216
Cursor.


695
00:18:13,486 --> 00:18:14,566
This could also be when your


696
00:18:14,566 --> 00:18:15,756
application launches, you want


697
00:18:15,806 --> 00:18:16,836
to speed up its launch so that


698
00:18:16,836 --> 00:18:17,826
it displays to your users


699
00:18:17,826 --> 00:18:18,156
quickly.


700
00:18:18,756 --> 00:18:19,786
Use Time Profiler for these


701
00:18:19,786 --> 00:18:20,266
cases.


702
00:18:22,296 --> 00:18:23,386
Next, if you have a


703
00:18:23,386 --> 00:18:24,536
responsiveness issue, check the


704
00:18:24,536 --> 00:18:25,086
main thread.


705
00:18:25,646 --> 00:18:26,636
It should really only be used


706
00:18:26,636 --> 00:18:27,936
for updating user interface or


707
00:18:27,936 --> 00:18:29,366
for handling user input events,


708
00:18:29,616 --> 00:18:31,656
like a mouse click on the Mac or


709
00:18:31,656 --> 00:18:32,996
a touch on an iOS device.


710
00:18:34,516 --> 00:18:35,846
Third, something I didn't


711
00:18:35,846 --> 00:18:36,566
discuss before.


712
00:18:37,286 --> 00:18:38,516
You should Profile in Release


713
00:18:38,516 --> 00:18:38,766
Mode.


714
00:18:39,676 --> 00:18:40,846
The Compiler supports a number


715
00:18:40,846 --> 00:18:42,156
of different optimization levels


716
00:18:42,286 --> 00:18:43,116
and when you're doing the


717
00:18:43,116 --> 00:18:45,436
Build-Run cycle in Xcode, we use


718
00:18:45,436 --> 00:18:46,766
a low-level of optimization to


719
00:18:46,766 --> 00:18:47,866
allow that to occur quickly.


720
00:18:48,446 --> 00:18:49,666
But this isn't the optimization


721
00:18:49,666 --> 00:18:50,686
level that's used when you ship


722
00:18:50,686 --> 00:18:52,526
code to your customers using the


723
00:18:52,526 --> 00:18:54,006
App Store or Xcode's Archive


724
00:18:54,056 --> 00:18:54,316
feature.


725
00:18:54,766 --> 00:18:57,736
If you're using Xcode's default


726
00:18:57,736 --> 00:18:59,756
configuration, the Profile


727
00:18:59,756 --> 00:19:01,046
action in your scheme is set to


728
00:19:01,046 --> 00:19:02,646
use Release configuration.


729
00:19:03,286 --> 00:19:04,316
However, if you're using custom


730
00:19:04,316 --> 00:19:05,936
Compiler flags, be sure that the


731
00:19:05,936 --> 00:19:07,476
app you profile is using your


732
00:19:07,476 --> 00:19:08,916
Release set of Compiler flags.


733
00:19:10,596 --> 00:19:12,116
Finally, it's important to


734
00:19:12,116 --> 00:19:13,426
Profile with difficult workloads


735
00:19:13,426 --> 00:19:14,416
or on older devices.


736
00:19:14,876 --> 00:19:16,236
In this case, we had a bug that


737
00:19:16,236 --> 00:19:18,566
we didn't see at our desk, but


738
00:19:18,566 --> 00:19:19,766
customers in the field who had


739
00:19:19,766 --> 00:19:20,526
devices with different


740
00:19:20,526 --> 00:19:21,736
performance characteristics did


741
00:19:21,736 --> 00:19:22,226
encounter it.


742
00:19:22,866 --> 00:19:24,216
So, if you have access to those


743
00:19:24,216 --> 00:19:26,026
devices, be sure to test on


744
00:19:27,036 --> 00:19:27,226
them.


745
00:19:27,916 --> 00:19:29,696
As Tibet mentioned earlier,


746
00:19:29,816 --> 00:19:30,776
Instruments supports all


747
00:19:30,776 --> 00:19:31,456
platforms.


748
00:19:31,776 --> 00:19:33,396
We demoed this on the Mac, but


749
00:19:33,396 --> 00:19:35,496
it works equally well on iOS,


750
00:19:35,626 --> 00:19:37,016
watchOS and tvOS.


751
00:19:37,766 --> 00:19:39,496
It also supports the Simulator.


752
00:19:39,686 --> 00:19:41,116
But there's an important caveat


753
00:19:41,116 --> 00:19:41,766
to understand with the


754
00:19:41,766 --> 00:19:42,256
Simulator.


755
00:19:43,266 --> 00:19:45,596
It's running on your Mac.


756
00:19:45,596 --> 00:19:46,786
That means that it has your


757
00:19:46,786 --> 00:19:47,906
Mac's resource contention.


758
00:19:48,856 --> 00:19:50,346
It has your Mac's CPU and memory


759
00:19:50,346 --> 00:19:51,636
performance characteristics.


760
00:19:51,926 --> 00:19:53,536
It has your Mac's file system


761
00:19:53,536 --> 00:19:54,876
behavior and disc behavior.


762
00:19:55,216 --> 00:19:56,776
And it has your Mac's thermal


763
00:19:57,046 --> 00:19:58,186
limitations, which are


764
00:19:58,186 --> 00:19:59,326
significantly different than


765
00:19:59,326 --> 00:20:00,536
that of a smaller embedded


766
00:20:00,536 --> 00:20:00,996
device.


767
00:20:01,956 --> 00:20:03,066
Instruments in this case is


768
00:20:03,066 --> 00:20:04,276
great for looking at trends.


769
00:20:04,366 --> 00:20:05,656
Did something get faster or did


770
00:20:05,656 --> 00:20:06,256
it get slower?


771
00:20:06,876 --> 00:20:08,306
But it's not going to give you


772
00:20:08,306 --> 00:20:10,106
second-by-second accurate


773
00:20:10,106 --> 00:20:10,996
simulation of how the


774
00:20:10,996 --> 00:20:11,836
application would run.


775
00:20:12,366 --> 00:20:13,626
Be sure to test on real hardware


776
00:20:13,626 --> 00:20:14,376
before shipping to your


777
00:20:14,376 --> 00:20:15,406
customers.


778
00:20:16,516 --> 00:20:17,866
So, we took care of a


779
00:20:17,866 --> 00:20:19,396
responsiveness issue, but that's


780
00:20:19,396 --> 00:20:20,206
not the whole story.


781
00:20:20,526 --> 00:20:21,646
We still have a large spike of


782
00:20:21,686 --> 00:20:23,346
CPU usage and it seems like we


783
00:20:23,346 --> 00:20:24,326
should be able to reduce that.


784
00:20:25,536 --> 00:20:27,186
CPU usage can drain the battery.


785
00:20:27,526 --> 00:20:29,106
It can increase the temperature


786
00:20:29,106 --> 00:20:30,766
of a device or on many Macs


787
00:20:30,766 --> 00:20:31,786
it'll spin up fans and annoy


788
00:20:31,786 --> 00:20:32,406
your users.


789
00:20:33,206 --> 00:20:34,856
So, now I'd like to introduce


790
00:20:34,956 --> 00:20:36,836
Anand to use the Signpost


791
00:20:36,836 --> 00:20:38,206
feature to help dig into the


792
00:20:38,206 --> 00:20:39,136
work that our application is


793
00:20:39,136 --> 00:20:39,326
doing.


794
00:20:41,516 --> 00:20:44,376
[ Applause ]


795
00:20:44,876 --> 00:20:45,376
>> Thank you, Ben.


796
00:20:46,446 --> 00:20:47,186
Good morning, everyone.


797
00:20:48,236 --> 00:20:49,786
I'd like to show you how to use


798
00:20:49,786 --> 00:20:52,496
Signpost in your code today to


799
00:20:52,496 --> 00:20:53,786
augment the Instruments' traces


800
00:20:53,786 --> 00:20:55,706
you collect from it and get a


801
00:20:55,816 --> 00:20:57,176
finer understanding of how your


802
00:20:57,176 --> 00:20:58,626
code uses system resources.


803
00:21:01,016 --> 00:21:03,206
So, let's begin understanding


804
00:21:03,206 --> 00:21:05,776
Signposts by contrasting with


805
00:21:05,806 --> 00:21:07,026
what we've been doing so far


806
00:21:07,026 --> 00:21:07,916
with Time Profiler.


807
00:21:08,836 --> 00:21:10,176
Time Profiler builds a


808
00:21:10,506 --> 00:21:12,686
statistical profile of your code


809
00:21:12,686 --> 00:21:15,396
and it does so by observing all


810
00:21:15,396 --> 00:21:16,786
the threads in your application


811
00:21:16,786 --> 00:21:18,756
at a fixed interval and building


812
00:21:18,756 --> 00:21:19,986
the correlation between call


813
00:21:19,986 --> 00:21:21,526
stacks and time.


814
00:21:22,336 --> 00:21:23,796
But a correlation is no


815
00:21:23,796 --> 00:21:25,636
substitute for aa precise


816
00:21:25,746 --> 00:21:26,876
measurement which can tell you


817
00:21:26,986 --> 00:21:28,436
how or why your code is


818
00:21:28,436 --> 00:21:28,946
executing.


819
00:21:30,116 --> 00:21:31,326
There may be a block of code


820
00:21:31,636 --> 00:21:33,086
that executes in several short


821
00:21:33,146 --> 00:21:33,746
bursts.


822
00:21:34,456 --> 00:21:37,066
Or, it might execute in a few


823
00:21:37,066 --> 00:21:37,916
longer stretches.


824
00:21:38,736 --> 00:21:39,986
There could be a function which


825
00:21:39,986 --> 00:21:41,636
when called on certain arguments


826
00:21:42,056 --> 00:21:43,696
can keep the CPU continuously


827
00:21:43,696 --> 00:21:44,096
busy.


828
00:21:45,136 --> 00:21:46,386
In order to distinguish these


829
00:21:46,386 --> 00:21:48,326
kinds of execution patterns, you


830
00:21:48,326 --> 00:21:50,686
need to log precise measurements


831
00:21:50,896 --> 00:21:52,836
from your code and that begs the


832
00:21:52,836 --> 00:21:53,316
question.


833
00:21:53,856 --> 00:21:55,276
What is the best way to log


834
00:21:55,276 --> 00:21:56,466
performance measurements from


835
00:21:56,466 --> 00:21:57,156
your operations?


836
00:21:58,236 --> 00:21:59,946
I'm pleased to tell you that you


837
00:21:59,946 --> 00:22:00,906
don't have to worry about


838
00:22:00,906 --> 00:22:02,496
printing from your code and


839
00:22:02,496 --> 00:22:03,456
teaching Instruments how to read


840
00:22:03,456 --> 00:22:04,506
your print statements.


841
00:22:05,096 --> 00:22:06,736
Just use Signposts.


842
00:22:08,236 --> 00:22:10,036
Signposts have numerous features


843
00:22:10,036 --> 00:22:11,666
that make them ideal for this


844
00:22:11,666 --> 00:22:12,166
use case.


845
00:22:12,646 --> 00:22:16,076
It is purpose built for logging


846
00:22:16,076 --> 00:22:17,346
structured performance data.


847
00:22:17,766 --> 00:22:19,286
So, it is simpler and more


848
00:22:19,286 --> 00:22:20,656
efficient for this purpose than


849
00:22:20,656 --> 00:22:21,136
even printing.


850
00:22:21,716 --> 00:22:24,946
It has built-in support for


851
00:22:24,946 --> 00:22:25,706
measuring time.


852
00:22:26,036 --> 00:22:26,966
So, you don't have to worry


853
00:22:26,966 --> 00:22:28,516
about what clock source you're


854
00:22:28,516 --> 00:22:30,016
reading from or what time base


855
00:22:30,016 --> 00:22:30,596
you're measuring in.


856
00:22:31,546 --> 00:22:33,666
My favorite part is that


857
00:22:33,776 --> 00:22:35,416
Instruments already knows how to


858
00:22:35,416 --> 00:22:36,656
trace Signposts.


859
00:22:37,056 --> 00:22:38,186
In fact, let me give you a sneak


860
00:22:38,186 --> 00:22:39,706
preview of an Instruments trace


861
00:22:39,706 --> 00:22:41,666
that I collected after adding a


862
00:22:41,666 --> 00:22:44,756
Signpost interval to my code.


863
00:22:44,946 --> 00:22:46,236
Highlighted is the points of


864
00:22:46,236 --> 00:22:47,836
interest track which shows a


865
00:22:47,836 --> 00:22:49,516
region of interest that


866
00:22:49,516 --> 00:22:52,076
corresponds to a Signpost


867
00:22:52,076 --> 00:22:52,986
interval that I added to my


868
00:22:52,986 --> 00:22:53,226
code.


869
00:22:54,226 --> 00:22:55,736
So, let me take you to a demo


870
00:22:55,736 --> 00:22:57,996
now where I'll resume Ben's


871
00:22:57,996 --> 00:22:59,196
investigation of the Solar


872
00:22:59,196 --> 00:23:03,686
System application.


873
00:23:04,056 --> 00:23:06,996
So, we have the last Instruments


874
00:23:06,996 --> 00:23:11,036
trace we were looking at, and we


875
00:23:14,176 --> 00:23:16,056
see the familiar region of high


876
00:23:16,056 --> 00:23:17,086
CPU utilization.


877
00:23:17,656 --> 00:23:20,536
And we'd like to find out why


878
00:23:20,596 --> 00:23:22,566
we're using so much CPU time and


879
00:23:22,566 --> 00:23:23,976
we'd like to add some Signposts


880
00:23:24,056 --> 00:23:25,386
to the code that is using most


881
00:23:25,386 --> 00:23:26,066
of the CPU time.


882
00:23:26,856 --> 00:23:28,066
Let me take a look at the heavy


883
00:23:28,066 --> 00:23:28,726
stack trace.


884
00:23:32,576 --> 00:23:34,676
Last time, Ben started looking


885
00:23:34,676 --> 00:23:36,676
from the top of this heavy stack


886
00:23:36,676 --> 00:23:39,746
so that we could find out how


887
00:23:39,746 --> 00:23:41,436
the code began executing on the


888
00:23:41,436 --> 00:23:41,896
main thread.


889
00:23:42,826 --> 00:23:44,276
But this time, I'd like to start


890
00:23:44,276 --> 00:23:45,716
looking from the Leaf Level


891
00:23:45,716 --> 00:23:48,536
functions to get an idea of what


892
00:23:48,536 --> 00:23:51,046
are the most expensive or


893
00:23:51,046 --> 00:23:52,856
commonly called functions in


894
00:23:52,856 --> 00:23:53,416
this workload.


895
00:23:54,366 --> 00:23:55,366
There's something called Setup


896
00:23:55,366 --> 00:23:56,686
Scene over here which appears to


897
00:23:56,686 --> 00:23:58,416
be manipulating lots of arrays


898
00:23:58,736 --> 00:23:59,736
as a part of this reload


899
00:23:59,736 --> 00:24:00,236
operation.


900
00:24:00,566 --> 00:24:02,636
And I'd like to find out how


901
00:24:02,636 --> 00:24:04,916
much time precisely it is


902
00:24:04,916 --> 00:24:05,246
taking.


903
00:24:05,926 --> 00:24:09,196
So, let's go to Xcode and take a


904
00:24:09,196 --> 00:24:11,906
look at this code.


905
00:24:12,086 --> 00:24:13,306
Here's the Setup Scene function,


906
00:24:13,956 --> 00:24:15,466
and you can see some vestiges of


907
00:24:15,466 --> 00:24:17,326
my previous attempts to log some


908
00:24:17,326 --> 00:24:18,306
performance measurements from


909
00:24:18,306 --> 00:24:18,456
here.


910
00:24:18,786 --> 00:24:19,806
There's a print statement


911
00:24:20,056 --> 00:24:21,606
emitting the mock absolute time


912
00:24:21,606 --> 00:24:22,376
right at the beginning of the


913
00:24:22,416 --> 00:24:22,816
function.


914
00:24:23,376 --> 00:24:24,806
And if we scroll all the way to


915
00:24:24,806 --> 00:24:25,796
the bottom of the function,


916
00:24:26,546 --> 00:24:28,086
there is another Print Statement


917
00:24:28,086 --> 00:24:29,776
showing the mock absolute time


918
00:24:29,956 --> 00:24:30,836
of when I ended this.


919
00:24:31,526 --> 00:24:32,726
But as I previously mentioned,


920
00:24:33,416 --> 00:24:35,366
Instruments doesn't know how to


921
00:24:35,366 --> 00:24:36,156
read Print Statements.


922
00:24:36,346 --> 00:24:40,136
So, we first need to create a


923
00:24:40,136 --> 00:24:41,226
log handle that lets us


924
00:24:41,226 --> 00:24:42,386
communicate what Instruments.


925
00:24:43,106 --> 00:24:45,046
Let's do that.


926
00:24:46,316 --> 00:24:48,026
I created this log handle with a


927
00:24:48,026 --> 00:24:49,326
category called Points of


928
00:24:49,326 --> 00:24:49,726
Interest.


929
00:24:50,186 --> 00:24:51,826
That corresponds to the name of


930
00:24:51,826 --> 00:24:53,076
the Points of Interest


931
00:24:53,076 --> 00:24:53,546
Instrument.


932
00:24:55,166 --> 00:24:58,306
We'll replace our first Print


933
00:24:58,306 --> 00:25:00,046
Statement with a call to an OS


934
00:25:00,046 --> 00:25:03,106
Signpost API that begins an


935
00:25:03,106 --> 00:25:03,536
interval.


936
00:25:04,556 --> 00:25:05,616
Now, every time you begin an


937
00:25:05,616 --> 00:25:06,976
interval you should also end


938
00:25:07,086 --> 00:25:07,686
that interval.


939
00:25:08,876 --> 00:25:10,196
Instead of scrolling all the way


940
00:25:10,196 --> 00:25:11,706
to the bottom of the function,


941
00:25:11,986 --> 00:25:13,376
I'm going to take advantage of


942
00:25:13,486 --> 00:25:15,806
Swift Defer Blocks to end the


943
00:25:15,806 --> 00:25:16,166
interval.


944
00:25:16,756 --> 00:25:17,876
The contents of the Defer Block


945
00:25:17,876 --> 00:25:19,786
will be executed at the end of


946
00:25:19,846 --> 00:25:23,026
the current scope.


947
00:25:23,226 --> 00:25:24,716
Let's build our application with


948
00:25:24,716 --> 00:25:26,196
these changes and Profiler in


949
00:25:26,196 --> 00:25:27,606
Instruments using the Profile


950
00:25:27,606 --> 00:25:28,466
action in the menu.


951
00:25:33,056 --> 00:25:34,666
Let's select the Time Profiler


952
00:25:34,666 --> 00:25:37,736
template once again and the


953
00:25:37,896 --> 00:25:39,096
target selection area has


954
00:25:39,096 --> 00:25:40,726
already been populated by Xcode


955
00:25:40,726 --> 00:25:41,486
with a currently built


956
00:25:41,486 --> 00:25:42,626
conversion of the Solar System


957
00:25:42,626 --> 00:25:42,826
app.


958
00:25:43,106 --> 00:25:43,966
Let's start recording.


959
00:25:48,856 --> 00:25:51,256
I'll interact with the app and


960
00:25:51,476 --> 00:25:52,716
perform the troublesome sequence


961
00:25:52,716 --> 00:25:54,236
of operations again, reload


962
00:25:54,236 --> 00:25:54,826
operation.


963
00:25:57,766 --> 00:25:59,646
And we've got some data.


964
00:25:59,686 --> 00:26:00,746
So, I'll stop the recording.


965
00:26:01,266 --> 00:26:04,676
Let's pinch to zoom into the


966
00:26:04,676 --> 00:26:06,856
region of high CPU utilization.


967
00:26:10,186 --> 00:26:11,756
Below the Time Profiler frack,


968
00:26:12,136 --> 00:26:13,656
the Points of Interest track now


969
00:26:13,956 --> 00:26:16,156
has been populated with the


970
00:26:16,156 --> 00:26:17,546
regions of interest that we


971
00:26:17,546 --> 00:26:18,346
added in our code.


972
00:26:18,856 --> 00:26:20,096
There's a row called Setup Scene


973
00:26:20,096 --> 00:26:21,836
corresponding to the name of our


974
00:26:21,836 --> 00:26:23,596
Signpost interval, and there are


975
00:26:23,596 --> 00:26:25,976
several adjacent regions of


976
00:26:25,976 --> 00:26:28,286
interest recorded in the track.


977
00:26:29,486 --> 00:26:30,896
I wasn't expecting many; I was


978
00:26:30,896 --> 00:26:32,016
only expecting a few.


979
00:26:32,886 --> 00:26:34,926
I could mouse over each of these


980
00:26:34,926 --> 00:26:36,556
and count the number of regions


981
00:26:36,556 --> 00:26:37,086
of interest.


982
00:26:37,456 --> 00:26:38,686
Or, I could take advantage of


983
00:26:38,686 --> 00:26:39,486
the detail view.


984
00:26:40,876 --> 00:26:41,966
So, let me click and drag to


985
00:26:41,966 --> 00:26:43,836
select this particular region


986
00:26:44,656 --> 00:26:45,906
and then click in the Points of


987
00:26:45,906 --> 00:26:47,766
Interest track to repopulate the


988
00:26:47,766 --> 00:26:50,646
Detail view with a summary of


989
00:26:50,646 --> 00:26:54,186
the Points of Interest track.


990
00:26:54,376 --> 00:26:55,966
Taking a closer look, I see that


991
00:26:55,966 --> 00:26:57,406
Setup Scene has occurred a total


992
00:26:57,406 --> 00:26:59,596
of eight times in this region,


993
00:27:00,156 --> 00:27:02,276
and it's averaging about 200


994
00:27:02,276 --> 00:27:04,846
milliseconds for each time it


995
00:27:05,476 --> 00:27:05,606
occurs.


996
00:27:05,806 --> 00:27:07,186
There are more Detail views


997
00:27:07,186 --> 00:27:07,726
available.


998
00:27:08,006 --> 00:27:09,956
Let's click on the Jump Bar and


999
00:27:09,956 --> 00:27:12,226
select a list of the regions of


1000
00:27:12,226 --> 00:27:13,946
interest to see a full-time


1001
00:27:13,946 --> 00:27:15,706
series list of every region of


1002
00:27:15,706 --> 00:27:16,946
interest that was recorded in


1003
00:27:16,946 --> 00:27:17,466
this trace.


1004
00:27:18,016 --> 00:27:21,446
The duration column shows the


1005
00:27:21,446 --> 00:27:24,216
duration of each of these and I


1006
00:27:24,216 --> 00:27:27,776
can see that all of these


1007
00:27:27,776 --> 00:27:28,986
intervals are taking a very


1008
00:27:28,986 --> 00:27:30,626
similar amount of time to


1009
00:27:30,626 --> 00:27:34,086
complete, about 210 to 220


1010
00:27:34,086 --> 00:27:34,756
milliseconds.


1011
00:27:35,576 --> 00:27:37,046
So that's a real headscratcher.


1012
00:27:37,196 --> 00:27:39,306
Why are we doing a similar


1013
00:27:39,306 --> 00:27:41,086
amount of work over and over


1014
00:27:43,216 --> 00:27:43,336
again?


1015
00:27:43,526 --> 00:27:45,306
Let's look at the caller of


1016
00:27:45,306 --> 00:27:46,596
Setup Scene to find out if it's


1017
00:27:46,596 --> 00:27:47,796
being called redundantly for


1018
00:27:47,796 --> 00:27:48,296
some reason.


1019
00:27:48,436 --> 00:27:50,726
And the best way to do that is


1020
00:27:50,726 --> 00:27:51,926
to look at the call graph


1021
00:27:51,926 --> 00:27:53,216
information recorded by Time


1022
00:27:53,216 --> 00:27:53,716
Profiler.


1023
00:27:54,266 --> 00:27:57,216
Let's take advantage of the


1024
00:27:57,216 --> 00:27:58,386
heavy stack view again at the


1025
00:27:58,386 --> 00:27:59,476
bottom right-hand corner of the


1026
00:27:59,476 --> 00:28:01,446
window, and this time I'll look


1027
00:28:01,446 --> 00:28:03,156
at the caller of Setup Scene, a


1028
00:28:03,156 --> 00:28:04,476
function called Prepare Scene.


1029
00:28:05,486 --> 00:28:06,766
We can double click it to bring


1030
00:28:06,766 --> 00:28:07,536
up the sources.


1031
00:28:08,946 --> 00:28:10,946
And it appears that Prepare


1032
00:28:10,946 --> 00:28:12,776
Scene called Setup Scene only


1033
00:28:12,776 --> 00:28:13,276
once.


1034
00:28:13,476 --> 00:28:15,116
So, this isn't the root cause of


1035
00:28:15,116 --> 00:28:15,786
our repetition.


1036
00:28:16,626 --> 00:28:17,996
To bring back the entire call


1037
00:28:17,996 --> 00:28:20,746
graph, I'll click on Root in the


1038
00:28:20,746 --> 00:28:21,676
Jump part and take us to the


1039
00:28:21,676 --> 00:28:22,956
root of the call graph.


1040
00:28:24,326 --> 00:28:27,576
Let's go further up on our quest


1041
00:28:27,576 --> 00:28:28,506
in the heavy stack.


1042
00:28:29,096 --> 00:28:34,086
I'll select the next caller and


1043
00:28:34,266 --> 00:28:35,766
here we see a four loop, which


1044
00:28:35,766 --> 00:28:37,136
is very plausible cause of the


1045
00:28:37,136 --> 00:28:38,336
repetition that we're seeing.


1046
00:28:39,176 --> 00:28:40,296
Let me bring up this code in


1047
00:28:40,326 --> 00:28:42,606
Xcode so that we can take a


1048
00:28:42,606 --> 00:28:43,176
closer look.


1049
00:28:43,526 --> 00:28:46,426
And I'll use the Jump to File in


1050
00:28:46,426 --> 00:28:47,006
Xcode button.


1051
00:28:51,716 --> 00:28:54,596
Xcode comes up with the four


1052
00:28:54,596 --> 00:28:55,366
loop displayed.


1053
00:28:56,486 --> 00:28:57,526
I remember this function.


1054
00:28:58,116 --> 00:28:59,306
The purpose of update with


1055
00:28:59,366 --> 00:29:01,946
planets is to receive the data


1056
00:29:01,986 --> 00:29:03,166
sent to us by the server, the


1057
00:29:03,166 --> 00:29:04,516
part of the Reload operation.


1058
00:29:05,156 --> 00:29:07,516
And then for each planet for


1059
00:29:07,516 --> 00:29:09,466
which we have new data, update


1060
00:29:09,466 --> 00:29:10,726
the internal model in the


1061
00:29:10,726 --> 00:29:12,246
application of each of the


1062
00:29:12,246 --> 00:29:13,556
planets wherever an update is


1063
00:29:13,556 --> 00:29:14,026
required.


1064
00:29:15,486 --> 00:29:17,816
However, we can receive a blob


1065
00:29:17,816 --> 00:29:19,246
of data containing updated


1066
00:29:19,246 --> 00:29:20,526
information for multiple


1067
00:29:20,526 --> 00:29:22,596
planets, and we appear to be


1068
00:29:22,596 --> 00:29:24,266
calling Prepare Scene and


1069
00:29:24,266 --> 00:29:26,156
redrawing the entire view for


1070
00:29:26,156 --> 00:29:27,596
every single planet that we need


1071
00:29:27,596 --> 00:29:28,726
to update.


1072
00:29:30,256 --> 00:29:32,586
The trace shows us that the cost


1073
00:29:32,776 --> 00:29:35,316
of redrawing the scene vastly


1074
00:29:35,316 --> 00:29:39,326
dwarfs the cost of just updating


1075
00:29:39,326 --> 00:29:40,196
our internal model of the


1076
00:29:40,196 --> 00:29:40,576
planet.


1077
00:29:40,986 --> 00:29:42,606
So, the right thing to do here


1078
00:29:42,866 --> 00:29:44,316
would be to batch up all of our


1079
00:29:44,316 --> 00:29:46,806
updates to our internal model


1080
00:29:47,136 --> 00:29:49,016
and just redraw the scene once


1081
00:29:49,206 --> 00:29:50,456
after we've made all of our


1082
00:29:50,456 --> 00:29:50,846
updates.


1083
00:29:51,976 --> 00:29:53,266
This may seem like a very simple


1084
00:29:53,266 --> 00:29:56,076
fix but in our experience, we've


1085
00:29:56,076 --> 00:29:57,616
seen that numerous performance


1086
00:29:57,616 --> 00:29:59,166
issues of this type can creep


1087
00:29:59,376 --> 00:30:01,166
into our code as we add new


1088
00:30:01,166 --> 00:30:03,146
features or fix unrelated bugs.


1089
00:30:03,606 --> 00:30:05,536
And a great way to prevent such


1090
00:30:05,536 --> 00:30:07,016
bugs from getting out to our


1091
00:30:07,016 --> 00:30:09,156
customers is to write tests that


1092
00:30:09,156 --> 00:30:10,186
routinely exercise their


1093
00:30:10,186 --> 00:30:10,856
functionality.


1094
00:30:11,846 --> 00:30:12,836
To save us some time, I've


1095
00:30:12,836 --> 00:30:15,406
already written an XC test which


1096
00:30:15,406 --> 00:30:16,586
exercises the Reload


1097
00:30:16,586 --> 00:30:17,206
functionality.


1098
00:30:18,666 --> 00:30:19,926
If we click on this button to


1099
00:30:19,926 --> 00:30:21,386
the left of the test, normally


1100
00:30:21,386 --> 00:30:23,296
it would just run the test.


1101
00:30:23,416 --> 00:30:24,886
But I will secondary click to


1102
00:30:24,886 --> 00:30:26,526
reveal the Profile action.


1103
00:30:27,266 --> 00:30:29,106
This instructs Xcode to build


1104
00:30:29,106 --> 00:30:30,756
and launch the test under


1105
00:30:30,756 --> 00:30:31,326
Instruments.


1106
00:30:36,256 --> 00:30:37,746
Let's select the Time Profiler


1107
00:30:37,746 --> 00:30:39,936
template and start recording a


1108
00:30:39,936 --> 00:30:40,456
trace.


1109
00:30:41,016 --> 00:30:45,706
In this test, I've placed the


1110
00:30:45,706 --> 00:30:48,006
Reload operation inside a call


1111
00:30:48,006 --> 00:30:48,946
to the Measure API.


1112
00:30:49,706 --> 00:30:51,566
The Measure API runs the


1113
00:30:51,566 --> 00:30:53,586
workload several times in order


1114
00:30:53,586 --> 00:30:54,786
to collect several repeated


1115
00:30:54,786 --> 00:30:55,376
measurements.


1116
00:30:56,186 --> 00:30:57,356
That can be really helpful for


1117
00:30:57,356 --> 00:30:58,866
you to learn whether your


1118
00:30:58,866 --> 00:31:00,296
measurements are repeatable and


1119
00:31:00,296 --> 00:31:01,546
consistent, or whether there's a


1120
00:31:01,546 --> 00:31:02,996
lot of run-to-run variation.


1121
00:31:04,466 --> 00:31:05,496
It looks like all the


1122
00:31:05,496 --> 00:31:07,166
repetitions have ended, so I can


1123
00:31:07,166 --> 00:31:08,396
stop this trace.


1124
00:31:08,936 --> 00:31:11,926
I'll pinch to zoom into the


1125
00:31:11,926 --> 00:31:12,936
contents of the points of


1126
00:31:12,936 --> 00:31:13,616
interest track.


1127
00:31:14,256 --> 00:31:16,836
And we can see there's an extra


1128
00:31:16,836 --> 00:31:17,446
row here.


1129
00:31:21,046 --> 00:31:21,976
At the very bottom is a Setup


1130
00:31:21,976 --> 00:31:22,826
Scene interval which I


1131
00:31:22,826 --> 00:31:24,056
previously added to our code.


1132
00:31:24,106 --> 00:31:27,386
And above it is another point of


1133
00:31:27,386 --> 00:31:28,516
interest that is now being


1134
00:31:28,516 --> 00:31:29,756
contributed to by the Measure


1135
00:31:29,756 --> 00:31:30,056
API.


1136
00:31:30,676 --> 00:31:32,976
That tells us the interval


1137
00:31:32,976 --> 00:31:34,526
corresponding to each iteration


1138
00:31:34,906 --> 00:31:36,106
that it ran your workload.


1139
00:31:38,146 --> 00:31:39,246
Scrolling over this and just


1140
00:31:39,246 --> 00:31:41,606
eyeballing it, I feel like the


1141
00:31:41,606 --> 00:31:42,976
workload is behaving pretty


1142
00:31:42,976 --> 00:31:44,226
consistently from run to run.


1143
00:31:44,626 --> 00:31:45,806
So, I'd just like to find out


1144
00:31:45,806 --> 00:31:46,816
what is happening within a


1145
00:31:46,816 --> 00:31:49,136
single iteration of the test.


1146
00:31:50,146 --> 00:31:51,186
Instead of clicking and


1147
00:31:51,186 --> 00:31:52,616
dragging, there is a nice


1148
00:31:52,616 --> 00:31:53,746
shortcut for you to select


1149
00:31:53,746 --> 00:31:55,606
exactly the region corresponding


1150
00:31:55,606 --> 00:31:57,986
to one event or interval in a


1151
00:31:57,986 --> 00:31:58,246
track.


1152
00:31:58,716 --> 00:31:59,546
I'll triple click.


1153
00:32:00,106 --> 00:32:02,456
This populates the Detail view


1154
00:32:02,456 --> 00:32:03,846
with information specific to


1155
00:32:03,846 --> 00:32:04,396
that selection.


1156
00:32:06,156 --> 00:32:09,336
And taking a closer look, there


1157
00:32:09,936 --> 00:32:11,756
appears to be only one call to


1158
00:32:11,756 --> 00:32:13,566
Setup Scene right now.


1159
00:32:13,566 --> 00:32:14,256
Let that sink in.


1160
00:32:14,726 --> 00:32:16,206
We used the information that we


1161
00:32:16,206 --> 00:32:19,276
gained from Signposts to reduce


1162
00:32:19,276 --> 00:32:20,316
the amount of CPU time we were


1163
00:32:20,316 --> 00:32:21,876
using by an order of magnitude.


1164
00:32:23,516 --> 00:32:27,500
[ Applause ]


1165
00:32:31,796 --> 00:32:32,926
So, let's review some of the


1166
00:32:32,926 --> 00:32:34,176
concepts we just encountered.


1167
00:32:34,766 --> 00:32:38,496
A statistical profile such as


1168
00:32:38,496 --> 00:32:40,266
that collected by Time Profiler


1169
00:32:40,266 --> 00:32:41,556
can be really useful to show


1170
00:32:41,556 --> 00:32:43,336
what code is most commonly


1171
00:32:43,336 --> 00:32:43,936
executed.


1172
00:32:44,496 --> 00:32:46,286
But that is not a substitute for


1173
00:32:46,286 --> 00:32:48,756
a measurement such as that which


1174
00:32:48,756 --> 00:32:49,726
can be recorded using the


1175
00:32:49,726 --> 00:32:51,746
Signpost APIs that can show you


1176
00:32:51,746 --> 00:32:53,186
how and why your code is


1177
00:32:53,186 --> 00:32:53,756
executed.


1178
00:32:54,946 --> 00:32:56,546
We've also seen how it can be


1179
00:32:56,546 --> 00:32:59,456
really useful to run tests to


1180
00:32:59,456 --> 00:33:00,906
reliably and repeatedly


1181
00:33:00,906 --> 00:33:03,156
reproduce our workloads and


1182
00:33:03,446 --> 00:33:04,646
profile them early and often in


1183
00:33:04,646 --> 00:33:05,456
our development cycle.


1184
00:33:07,256 --> 00:33:09,076
Today, we've largely


1185
00:33:09,076 --> 00:33:10,656
investigated the kinds of


1186
00:33:10,656 --> 00:33:12,036
performance issues that arise


1187
00:33:12,036 --> 00:33:13,706
from high or inappropriately


1188
00:33:13,706 --> 00:33:15,276
placed CPU utilization.


1189
00:33:16,016 --> 00:33:17,506
But Instruments has numerous


1190
00:33:17,506 --> 00:33:19,276
templates which can help answer


1191
00:33:19,276 --> 00:33:20,516
performance questions about


1192
00:33:20,516 --> 00:33:21,446
other kinds of resource


1193
00:33:21,446 --> 00:33:22,016
utilization.


1194
00:33:22,746 --> 00:33:24,466
We've got a template for file


1195
00:33:24,496 --> 00:33:25,456
and disc usage.


1196
00:33:26,286 --> 00:33:27,836
We've got another template for


1197
00:33:27,836 --> 00:33:29,106
network utilization.


1198
00:33:29,306 --> 00:33:30,336
And there's another template


1199
00:33:30,826 --> 00:33:32,036
that'll help you understand the


1200
00:33:32,036 --> 00:33:33,006
interaction between your


1201
00:33:33,006 --> 00:33:34,506
application and the operating


1202
00:33:34,506 --> 00:33:35,956
system or other processes


1203
00:33:36,276 --> 00:33:37,136
running on the OS.


1204
00:33:37,796 --> 00:33:38,876
But that's not all.


1205
00:33:39,806 --> 00:33:40,776
Instruments has some really


1206
00:33:40,776 --> 00:33:42,726
advanced features such as Custom


1207
00:33:42,726 --> 00:33:43,176
Instruments.


1208
00:33:43,426 --> 00:33:45,076
If you're a framework author,


1209
00:33:45,076 --> 00:33:46,386
for instance, and would like


1210
00:33:46,956 --> 00:33:49,006
your clients of your APIs to be


1211
00:33:49,006 --> 00:33:50,116
able to answer performance


1212
00:33:50,116 --> 00:33:51,126
questions about how they're


1213
00:33:51,126 --> 00:33:53,946
using your framework, then you


1214
00:33:53,946 --> 00:33:56,236
can provide them with a Custom


1215
00:33:56,236 --> 00:33:57,176
Instruments package.


1216
00:33:57,716 --> 00:34:00,566
You could also create Custom


1217
00:34:00,606 --> 00:34:02,226
Instruments templates, which


1218
00:34:02,226 --> 00:34:03,806
assemble together a different


1219
00:34:03,806 --> 00:34:06,396
collection of the Instruments in


1220
00:34:06,396 --> 00:34:08,436
the Instruments app to help


1221
00:34:08,436 --> 00:34:09,996
answer a particular performance


1222
00:34:09,996 --> 00:34:10,326
question.


1223
00:34:12,456 --> 00:34:13,966
Coming out of this presentation,


1224
00:34:14,326 --> 00:34:15,556
I'd really love for you all to


1225
00:34:15,556 --> 00:34:17,676
start Profiling your code early


1226
00:34:17,676 --> 00:34:18,856
and often in your development


1227
00:34:18,856 --> 00:34:19,176
cycle.


1228
00:34:19,716 --> 00:34:21,466
And please try to out


1229
00:34:21,466 --> 00:34:22,476
Instruments 11 today.


1230
00:34:22,835 --> 00:34:24,235
It's packed with some great new


1231
00:34:24,235 --> 00:34:26,496
features such as Track Pinning


1232
00:34:26,775 --> 00:34:28,255
and Hierarchical Views which I


1233
00:34:28,255 --> 00:34:29,525
think will make it really fun to


1234
00:34:29,525 --> 00:34:29,835
use.


1235
00:34:30,416 --> 00:34:33,306
We've got comprehensive


1236
00:34:33,306 --> 00:34:34,516
documentation of the advanced


1237
00:34:34,516 --> 00:34:36,025
features and certain events


1238
00:34:36,025 --> 00:34:38,116
workflows of Instruments in our


1239
00:34:38,116 --> 00:34:39,706
session notes, and there's some


1240
00:34:39,706 --> 00:34:40,835
great talks from the previous


1241
00:34:40,835 --> 00:34:41,496
year's conference.


1242
00:34:42,056 --> 00:34:42,735
Thank you very much.


1243
00:34:43,516 --> 00:34:49,505
[ Applause ]

