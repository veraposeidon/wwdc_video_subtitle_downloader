1
00:00:01,176 --> 00:00:05,500
[ Music ]


2
00:00:11,516 --> 00:00:16,546
[ Applause ]


3
00:00:17,046 --> 00:00:18,406
>> Hello, everybody.


4
00:00:18,876 --> 00:00:20,906
My name is Gokul and together


5
00:00:20,906 --> 00:00:22,846
with my colleagues Dima and


6
00:00:22,846 --> 00:00:24,916
Jonathan, we are really excited


7
00:00:24,916 --> 00:00:26,616
to tell you all about Sign In


8
00:00:26,806 --> 00:00:27,216
with Apple.


9
00:00:27,616 --> 00:00:30,196
I will start with an overview of


10
00:00:30,196 --> 00:00:31,416
the key features of Sign In with


11
00:00:31,416 --> 00:00:33,486
Apple, then Dima will talk


12
00:00:33,486 --> 00:00:34,966
through how you can integrate


13
00:00:34,966 --> 00:00:36,696
this into your native app.


14
00:00:37,276 --> 00:00:39,166
Jonathan will demo that live


15
00:00:39,476 --> 00:00:39,916
here.


16
00:00:40,436 --> 00:00:41,976
And finally, we'll discuss


17
00:00:42,076 --> 00:00:44,756
cross-platform and close out


18
00:00:44,756 --> 00:00:45,966
with some best practices.


19
00:00:49,516 --> 00:00:53,236
Sign In with Apple is fast, easy


20
00:00:53,236 --> 00:00:55,536
account setup and sign in for


21
00:00:55,536 --> 00:00:56,366
your application.


22
00:00:57,136 --> 00:01:01,206
It is secure and it's private,


23
00:01:01,986 --> 00:01:04,806
both for your users and for your


24
00:01:04,806 --> 00:01:05,316
privacy.


25
00:01:05,956 --> 00:01:07,526
It's not Apple's business to


26
00:01:07,526 --> 00:01:10,056
know how you engage with your


27
00:01:10,056 --> 00:01:11,326
users in your app.


28
00:01:12,046 --> 00:01:13,386
So you can implement Sign In


29
00:01:13,386 --> 00:01:15,576
with Apple with confidence that


30
00:01:15,576 --> 00:01:17,976
Apple simply won't track any of


31
00:01:18,506 --> 00:01:18,606
that.


32
00:01:19,156 --> 00:01:21,576
Let's take a quick look at the


33
00:01:21,576 --> 00:01:23,876
experience when your user taps


34
00:01:24,436 --> 00:01:25,096
on that button.


35
00:01:26,386 --> 00:01:28,456
They see a sheet pre-filled with


36
00:01:28,456 --> 00:01:30,226
information that you request,


37
00:01:30,796 --> 00:01:33,656
like name and email.


38
00:01:34,826 --> 00:01:36,656
The user can make a choice on


39
00:01:36,656 --> 00:01:38,206
which email they want to share.


40
00:01:39,516 --> 00:01:45,556
They tap Continue and that's it.


41
00:01:45,846 --> 00:01:47,776
They are signed into your


42
00:01:47,776 --> 00:01:48,456
application.


43
00:01:48,456 --> 00:01:52,746
Your app gets a unique, stable


44
00:01:54,156 --> 00:01:58,296
ID, a name and a verified email


45
00:01:58,296 --> 00:02:00,716
address that you can reach for


46
00:02:00,716 --> 00:02:01,116
the user.


47
00:02:01,986 --> 00:02:04,326
And best of all, this is a


48
00:02:04,326 --> 00:02:07,276
secure two-factor authenticated


49
00:02:07,276 --> 00:02:09,116
account for the user in your


50
00:02:09,216 --> 00:02:09,806
app.


51
00:02:09,806 --> 00:02:10,485
It's that easy.


52
00:02:17,046 --> 00:02:18,946
And even better, this all works


53
00:02:19,076 --> 00:02:21,326
seamlessly across all of the


54
00:02:21,326 --> 00:02:22,286
user's devices.


55
00:02:23,956 --> 00:02:26,266
On a new device, a simple tap


56
00:02:26,806 --> 00:02:28,456
gets them going with the same


57
00:02:28,456 --> 00:02:30,456
account as before in your app


58
00:02:30,936 --> 00:02:33,186
and ready to fully engage again.


59
00:02:33,576 --> 00:02:34,966
Very fast, very easy.


60
00:02:37,046 --> 00:02:38,466
So Sign In with Apple provides


61
00:02:38,616 --> 00:02:40,546
really streamlined account setup


62
00:02:40,546 --> 00:02:42,796
experience for your app.


63
00:02:42,896 --> 00:02:44,196
Notice there are no cumbersome


64
00:02:44,256 --> 00:02:45,456
forms to fill out.


65
00:02:45,456 --> 00:02:46,306
Just a simple tap.


66
00:02:47,486 --> 00:02:50,716
Users downloaded your app from


67
00:02:50,716 --> 00:02:52,706
the Store using their Apple ID


68
00:02:52,706 --> 00:02:53,526
already.


69
00:02:54,086 --> 00:02:55,406
And Sign In with Apple helps


70
00:02:55,446 --> 00:02:57,856
them engage fully with just a


71
00:02:57,856 --> 00:02:59,726
tap in your app.


72
00:03:01,396 --> 00:03:03,636
You also get a verified email


73
00:03:03,636 --> 00:03:05,456
address that you can use to


74
00:03:05,456 --> 00:03:06,586
communicate with the user.


75
00:03:07,616 --> 00:03:09,316
Now this is the email address


76
00:03:10,146 --> 00:03:12,356
that Apple uses for its


77
00:03:12,356 --> 00:03:13,066
communication.


78
00:03:13,996 --> 00:03:15,266
So no need to do these


79
00:03:15,266 --> 00:03:16,666
cumbersome round trips of


80
00:03:16,666 --> 00:03:19,176
sending email and having users


81
00:03:19,246 --> 00:03:20,036
click on links.


82
00:03:20,726 --> 00:03:22,916
Apple has already done that work


83
00:03:22,916 --> 00:03:23,266
for you.


84
00:03:24,546 --> 00:03:26,686
Sign In with Apple provides you


85
00:03:26,686 --> 00:03:28,896
instantly with an email that


86
00:03:28,896 --> 00:03:29,676
just works.


87
00:03:30,066 --> 00:03:31,346
No additional verification


88
00:03:31,346 --> 00:03:31,876
required.


89
00:03:34,236 --> 00:03:35,966
Now some users may feel less


90
00:03:35,966 --> 00:03:37,666
comfortable sharing their real


91
00:03:37,666 --> 00:03:38,406
email address.


92
00:03:39,316 --> 00:03:40,466
And you may end up with some


93
00:03:40,506 --> 00:03:42,146
fake emails that don't work.


94
00:03:43,006 --> 00:03:44,526
And Sign In with Apple helps you


95
00:03:44,526 --> 00:03:45,016
with that.


96
00:03:46,016 --> 00:03:48,436
Hide My Email option enables


97
00:03:48,486 --> 00:03:50,896
these users to share a hidden


98
00:03:50,896 --> 00:03:53,716
email address that routes to


99
00:03:53,716 --> 00:03:55,596
their verified email inbox.


100
00:03:56,586 --> 00:03:58,986
This is great.


101
00:03:59,166 --> 00:04:00,976
Now this is enabled through


102
00:04:00,976 --> 00:04:03,596
Apple's Private Email Relay


103
00:04:03,596 --> 00:04:06,026
system that forwards the email


104
00:04:06,746 --> 00:04:08,566
to the verified email for the


105
00:04:08,566 --> 00:04:11,386
user and it can handle replies


106
00:04:11,386 --> 00:04:11,586
too.


107
00:04:11,836 --> 00:04:12,866
So it works both ways.


108
00:04:13,596 --> 00:04:16,375
And you can use this for any


109
00:04:16,375 --> 00:04:18,016
kind of business communication


110
00:04:18,065 --> 00:04:19,856
for your app.


111
00:04:19,856 --> 00:04:21,846
Apple does not retain any


112
00:04:21,846 --> 00:04:23,796
messages once they're delivered


113
00:04:24,196 --> 00:04:25,206
to the user's inbox.


114
00:04:26,156 --> 00:04:28,936
In summary, a verified email


115
00:04:29,666 --> 00:04:31,966
that works available instantly


116
00:04:32,326 --> 00:04:32,976
to your app.


117
00:04:37,266 --> 00:04:39,836
With Sign In with Apple there


118
00:04:39,836 --> 00:04:42,156
are no new passwords to remember


119
00:04:42,546 --> 00:04:42,976
or forget.


120
00:04:45,046 --> 00:04:46,396
So it's already more secure.


121
00:04:47,456 --> 00:04:50,866
Even better, every account that


122
00:04:50,866 --> 00:04:52,966
your app receives is two-factor


123
00:04:52,966 --> 00:04:54,266
authentication protected.


124
00:04:55,186 --> 00:04:56,866
This is just the best account


125
00:04:56,896 --> 00:04:57,716
for your app.


126
00:04:58,016 --> 00:05:00,346
No password, two-factor


127
00:05:00,346 --> 00:05:02,746
authentication, no cost to you


128
00:05:03,146 --> 00:05:04,776
and no added friction to the


129
00:05:04,776 --> 00:05:05,236
user.


130
00:05:05,786 --> 00:05:08,206
Great built-in security with


131
00:05:08,206 --> 00:05:09,686
Sign In with Apple.


132
00:05:12,046 --> 00:05:13,536
Now combatting account fraud in


133
00:05:13,626 --> 00:05:15,196
your systems is a difficult


134
00:05:15,196 --> 00:05:17,426
problem, and Apple is in a


135
00:05:17,426 --> 00:05:20,746
unique position to help.


136
00:05:20,906 --> 00:05:22,976
Sign In with Apple includes a


137
00:05:22,976 --> 00:05:25,946
new privacy-friendly way for you


138
00:05:25,946 --> 00:05:28,386
to gain confidence that the user


139
00:05:28,386 --> 00:05:30,426
on your app is indeed real.


140
00:05:31,736 --> 00:05:33,776
It combines sophisticated


141
00:05:33,776 --> 00:05:35,656
on-device intelligence with


142
00:05:36,316 --> 00:05:38,816
account information, and


143
00:05:38,876 --> 00:05:40,616
abstracts that into a single


144
00:05:40,616 --> 00:05:43,196
bit: real user or unknown.


145
00:05:43,976 --> 00:05:46,526
Real users, give them the red


146
00:05:46,526 --> 00:05:47,886
carpet treatment in your app


147
00:05:48,126 --> 00:05:48,616
they deserve.


148
00:05:49,946 --> 00:05:51,316
This is a high confidence


149
00:05:51,426 --> 00:05:51,906
indicator.


150
00:05:52,496 --> 00:05:55,846
If you receive unknown, it could


151
00:05:55,846 --> 00:05:58,306
be a user, it could be a bot.


152
00:05:59,116 --> 00:06:01,216
Treat this user like you would


153
00:06:01,216 --> 00:06:02,786
treat any other new account in


154
00:06:02,786 --> 00:06:04,576
your system where you don't have


155
00:06:04,866 --> 00:06:05,986
enough information to make a


156
00:06:05,986 --> 00:06:06,366
decision.


157
00:06:07,246 --> 00:06:09,226
So this is the real user


158
00:06:09,226 --> 00:06:11,406
indicator helping you fight


159
00:06:11,566 --> 00:06:12,846
account fraud.


160
00:06:15,246 --> 00:06:18,976
Finally, Sign In with Apple is


161
00:06:18,976 --> 00:06:19,836
cross-platform.


162
00:06:20,726 --> 00:06:23,546
The API is available on all


163
00:06:23,546 --> 00:06:26,366
Apple platforms: iOS, MacOS,


164
00:06:26,516 --> 00:06:27,636
WatchOS, tvOS.


165
00:06:29,306 --> 00:06:30,876
The sign-in experience is


166
00:06:30,876 --> 00:06:32,536
tailored on each platform for


167
00:06:32,536 --> 00:06:33,336
ease of use.


168
00:06:34,406 --> 00:06:36,966
The JavaScript API enables you


169
00:06:36,966 --> 00:06:38,616
to use Sign In with Apple on the


170
00:06:38,616 --> 00:06:40,726
web as well as other platforms


171
00:06:40,756 --> 00:06:42,526
like Windows or Android.


172
00:06:43,356 --> 00:06:44,316
We'll talk about this in more


173
00:06:44,316 --> 00:06:44,976
detail later.


174
00:06:45,516 --> 00:06:51,686
[ Applause ]


175
00:06:52,186 --> 00:06:53,386
Streamlined account setup,


176
00:06:53,956 --> 00:06:56,536
verified email address, built-in


177
00:06:56,536 --> 00:06:58,996
security, anti-fraud and


178
00:06:58,996 --> 00:06:59,906
cross-platform.


179
00:07:00,366 --> 00:07:02,256
That's a very quick summary of


180
00:07:02,256 --> 00:07:04,166
the key features of Sign In with


181
00:07:04,166 --> 00:07:04,516
Apple.


182
00:07:04,876 --> 00:07:06,696
Next, Dima's going to join me


183
00:07:06,696 --> 00:07:08,336
onstage to talk through how you


184
00:07:08,336 --> 00:07:09,976
can integrate this into your


185
00:07:09,976 --> 00:07:10,716
native app.


186
00:07:10,996 --> 00:07:11,216
Dima?


187
00:07:12,516 --> 00:07:14,546
[ Applause ]


188
00:07:15,046 --> 00:07:15,526
>> Thanks, Gokul.


189
00:07:16,416 --> 00:07:17,026
Hi, folks.


190
00:07:17,826 --> 00:07:19,146
So you've seen this great


191
00:07:19,636 --> 00:07:19,976
feature.


192
00:07:20,606 --> 00:07:21,536
What does it actually take to


193
00:07:21,536 --> 00:07:22,656
integrate into your app?


194
00:07:26,046 --> 00:07:28,006
There are four key things that


195
00:07:28,006 --> 00:07:29,056
your app needs to do to hit the


196
00:07:29,056 --> 00:07:29,616
ground running.


197
00:07:30,276 --> 00:07:31,856
First, Auto Sign In with


198
00:07:31,856 --> 00:07:32,816
Apple-branded button.


199
00:07:34,046 --> 00:07:35,846
Then configure and perform an


200
00:07:35,846 --> 00:07:36,896
authorization request.


201
00:07:38,136 --> 00:07:40,156
After the user sees the Sign In


202
00:07:40,156 --> 00:07:41,496
with Apple UI and after a quick


203
00:07:41,836 --> 00:07:43,446
FaceID check, the results of the


204
00:07:43,446 --> 00:07:44,556
authorization will be returned


205
00:07:44,556 --> 00:07:46,596
back to your app.


206
00:07:47,036 --> 00:07:48,816
At this point you need to verify


207
00:07:48,816 --> 00:07:50,036
the results with the Apple ID


208
00:07:50,036 --> 00:07:51,606
servers and create an account in


209
00:07:51,606 --> 00:07:51,976
your system.


210
00:07:54,506 --> 00:07:55,966
Last but not least, the


211
00:07:55,966 --> 00:07:57,546
credential state may change


212
00:07:57,546 --> 00:07:58,956
after it is returned to your app


213
00:07:58,956 --> 00:08:00,116
and your application needs to


214
00:08:00,116 --> 00:08:01,646
handle those state changes


215
00:08:01,646 --> 00:08:02,056
gracefully.


216
00:08:06,136 --> 00:08:08,176
First, let's look into the Sign


217
00:08:08,176 --> 00:08:10,236
In with Apple button.


218
00:08:10,266 --> 00:08:12,416
With only a couple lines of


219
00:08:12,416 --> 00:08:13,656
code, you can add an


220
00:08:13,656 --> 00:08:14,816
AuthorizationAppleIDButton to


221
00:08:14,816 --> 00:08:15,886
your app.


222
00:08:17,096 --> 00:08:20,766
Once you initialize it, add an


223
00:08:20,766 --> 00:08:21,116
action.


224
00:08:22,396 --> 00:08:24,876
And that's all you need to do.


225
00:08:25,136 --> 00:08:26,856
The button supports several


226
00:08:26,856 --> 00:08:28,026
different customizations to fit


227
00:08:28,026 --> 00:08:28,786
your app's design.


228
00:08:29,696 --> 00:08:30,946
Different visual styles and


229
00:08:30,946 --> 00:08:32,256
different labels are available.


230
00:08:32,946 --> 00:08:35,966
Apps that currently use valid


231
00:08:35,966 --> 00:08:37,216
APIs will find this very


232
00:08:37,216 --> 00:08:37,616
familiar.


233
00:08:43,356 --> 00:08:45,566
Next, once the user performs the


234
00:08:45,566 --> 00:08:48,026
action, you need to configure a


235
00:08:48,026 --> 00:08:49,386
request and perform


236
00:08:49,386 --> 00:08:49,926
authorization.


237
00:08:52,496 --> 00:08:55,196
Here's how you do it.


238
00:08:55,196 --> 00:08:56,936
With only one line of code, you


239
00:08:56,936 --> 00:08:58,196
initialize an Apple ID


240
00:08:58,196 --> 00:08:59,066
Authorization request.


241
00:09:00,426 --> 00:09:01,806
This is all your app needs to


242
00:09:01,806 --> 00:09:02,766
create an account in your


243
00:09:02,766 --> 00:09:03,186
system.


244
00:09:05,116 --> 00:09:06,776
Optionally, if your app requires


245
00:09:06,776 --> 00:09:07,586
this for the best user


246
00:09:07,586 --> 00:09:08,976
experience, you can set


247
00:09:08,976 --> 00:09:10,426
requestedScopes for full name


248
00:09:10,426 --> 00:09:10,886
and email.


249
00:09:12,376 --> 00:09:13,556
You should only request this


250
00:09:13,556 --> 00:09:14,746
information if it's truly


251
00:09:14,746 --> 00:09:16,496
required for your app and err on


252
00:09:16,496 --> 00:09:17,536
the side of minimum amount of


253
00:09:17,536 --> 00:09:18,076
information.


254
00:09:19,786 --> 00:09:21,006
Once the request is configured,


255
00:09:22,146 --> 00:09:22,646
initialize


256
00:09:22,646 --> 00:09:26,556
AuthorizationController, set the


257
00:09:26,556 --> 00:09:28,576
delegates to get the results


258
00:09:28,576 --> 00:09:30,416
back into your app.


259
00:09:30,416 --> 00:09:32,706
And last but not least, perform


260
00:09:32,706 --> 00:09:33,146
the request.


261
00:09:34,176 --> 00:09:35,366
Once you perform the request,


262
00:09:35,656 --> 00:09:36,666
this will initiate an


263
00:09:36,666 --> 00:09:37,986
authorization UI to be presented


264
00:09:37,986 --> 00:09:38,456
to the user.


265
00:09:39,156 --> 00:09:40,436
After a quick FaceID check, an


266
00:09:41,066 --> 00:09:42,306
authorization result will be


267
00:09:42,306 --> 00:09:43,146
returned to your app.


268
00:09:43,776 --> 00:09:44,736
Let's talk about handling these


269
00:09:44,736 --> 00:09:44,976
results.


270
00:09:48,046 --> 00:09:48,386
Through an


271
00:09:48,386 --> 00:09:49,446
AuthorizationController


272
00:09:49,446 --> 00:09:50,656
didCompleteWithAuthorization


273
00:09:50,656 --> 00:09:52,036
method, you will get an


274
00:09:52,036 --> 00:09:52,996
authorization object.


275
00:09:53,716 --> 00:09:54,846
This object has a credential


276
00:09:54,846 --> 00:09:56,306
property of type


277
00:09:56,306 --> 00:09:57,426
AppleIDCredential.


278
00:09:57,926 --> 00:09:58,826
You should check that this is


279
00:09:58,826 --> 00:09:59,916
actually an AppleIDCredential


280
00:09:59,916 --> 00:10:00,806
before processing that.


281
00:10:01,856 --> 00:10:02,936
This object has all the


282
00:10:02,936 --> 00:10:04,156
information that is required to


283
00:10:04,156 --> 00:10:05,076
create an account in your


284
00:10:05,076 --> 00:10:05,466
system.


285
00:10:06,056 --> 00:10:09,036
If the user cancels the request


286
00:10:09,036 --> 00:10:10,556
or any other error occurs, we


287
00:10:10,786 --> 00:10:12,486
will let your app know through


288
00:10:12,486 --> 00:10:13,306
the didCompleteWithError


289
00:10:13,306 --> 00:10:13,756
callback.


290
00:10:15,106 --> 00:10:16,296
Both of these delegate callbacks


291
00:10:16,296 --> 00:10:17,676
are guaranteed to be made on


292
00:10:17,676 --> 00:10:18,756
your app's main queue.


293
00:10:21,626 --> 00:10:22,806
So let's dive deeper into the


294
00:10:22,806 --> 00:10:24,926
results that we will give to


295
00:10:24,926 --> 00:10:25,966
your app.


296
00:10:29,276 --> 00:10:30,796
First, the user identifier.


297
00:10:30,796 --> 00:10:32,916
This is a unique, stable,


298
00:10:32,916 --> 00:10:34,476
team-scoped user identifier.


299
00:10:35,396 --> 00:10:37,186
This is great.


300
00:10:37,756 --> 00:10:38,676
You can use it to retrieve


301
00:10:38,676 --> 00:10:39,946
information from your user


302
00:10:39,946 --> 00:10:41,086
systems across different


303
00:10:41,086 --> 00:10:43,366
platforms, different systems,


304
00:10:43,676 --> 00:10:44,746
the web, Android.


305
00:10:45,316 --> 00:10:46,956
It remains stable across all of


306
00:10:46,956 --> 00:10:47,046
them.


307
00:10:47,046 --> 00:10:48,506
And it is associated with your


308
00:10:48,506 --> 00:10:49,266
developer team.


309
00:10:50,486 --> 00:10:51,596
This is the key to your user.


310
00:10:52,586 --> 00:10:53,856
Next, we will return


311
00:10:53,906 --> 00:10:55,826
verification data, an identity


312
00:10:55,826 --> 00:10:57,476
token and authorization code.


313
00:10:57,916 --> 00:10:59,156
A short-lived token that you can


314
00:10:59,156 --> 00:11:01,046
use with Apple ID servers to


315
00:11:01,046 --> 00:11:02,156
exchange for a refresh token.


316
00:11:03,056 --> 00:11:04,226
If you integrate with existing


317
00:11:04,226 --> 00:11:05,906
auth systems, adapting Sign In


318
00:11:05,906 --> 00:11:07,226
with Apple will be very


319
00:11:07,286 --> 00:11:07,726
familiar.


320
00:11:10,146 --> 00:11:11,856
Optionally, we will return


321
00:11:11,986 --> 00:11:13,056
account information if you


322
00:11:13,056 --> 00:11:15,456
requested it, a name and a


323
00:11:15,456 --> 00:11:16,256
verified email.


324
00:11:16,876 --> 00:11:18,176
And since the email is verified


325
00:11:18,176 --> 00:11:19,496
by Apple, your apps no longer


326
00:11:19,496 --> 00:11:20,546
need to perform any sort of


327
00:11:20,546 --> 00:11:22,376
verification after we have shown


328
00:11:22,376 --> 00:11:22,936
it to you.


329
00:11:25,046 --> 00:11:26,486
Lastly, a real user indicator,


330
00:11:27,766 --> 00:11:28,786
as was mentioned earlier.


331
00:11:28,786 --> 00:11:30,706
Use this to streamline your


332
00:11:30,706 --> 00:11:31,596
sign-in experience.


333
00:11:35,046 --> 00:11:36,166
So now you've created an account


334
00:11:36,336 --> 00:11:36,936
in your system.


335
00:11:37,616 --> 00:11:39,386
As the user uses Apple devices


336
00:11:39,386 --> 00:11:41,006
in your app, the credential


337
00:11:41,006 --> 00:11:42,136
state may change.


338
00:11:43,006 --> 00:11:43,896
And you need to handle those


339
00:11:43,896 --> 00:11:44,696
scenarios gracefully.


340
00:11:47,026 --> 00:11:48,566
The user may stop using Apple ID


341
00:11:48,566 --> 00:11:49,066
with an app.


342
00:11:49,716 --> 00:11:51,126
They may sign out of the device.


343
00:11:51,996 --> 00:11:54,236
Events like this should be


344
00:11:54,236 --> 00:11:54,996
handled gracefully.


345
00:11:54,996 --> 00:11:56,666
To allow this, authentication


346
00:11:56,666 --> 00:11:57,926
services framework exposes a


347
00:11:58,016 --> 00:12:00,596
fast API to allow you to query


348
00:12:00,596 --> 00:12:00,976
this state.


349
00:12:03,616 --> 00:12:05,046
Using the user identifier that


350
00:12:05,046 --> 00:12:06,246
was previously returned through


351
00:12:06,246 --> 00:12:08,916
an Apple ID Credential, you can


352
00:12:08,916 --> 00:12:10,796
check GetCredentialState call to


353
00:12:11,286 --> 00:12:12,366
get the state of the current


354
00:12:12,366 --> 00:12:13,056
Apple ID Credential.


355
00:12:13,856 --> 00:12:15,126
It's a very fast API call.


356
00:12:15,666 --> 00:12:17,246
It can return three things.


357
00:12:18,126 --> 00:12:19,116
We may tell you the user is


358
00:12:19,116 --> 00:12:20,326
authorized, and you should let


359
00:12:20,326 --> 00:12:21,656
them continue using your app.


360
00:12:23,216 --> 00:12:24,546
The credential may be revoked.


361
00:12:24,546 --> 00:12:28,096
You should sign the user out of


362
00:12:28,096 --> 00:12:29,836
your app on this device and


363
00:12:29,836 --> 00:12:31,836
optionally guide them to sign


364
00:12:31,836 --> 00:12:33,926
back in again.


365
00:12:34,106 --> 00:12:35,996
NotFound means that the user has


366
00:12:35,996 --> 00:12:37,006
not previously established the


367
00:12:37,006 --> 00:12:38,406
relationship through Sign In


368
00:12:38,406 --> 00:12:38,806
with Apple.


369
00:12:40,376 --> 00:12:41,616
This API is very fast.


370
00:12:42,026 --> 00:12:43,256
You should call it on your app's


371
00:12:43,256 --> 00:12:44,716
launch to make sure that you


372
00:12:44,716 --> 00:12:45,846
provide a tailored experience


373
00:12:45,846 --> 00:12:46,816
for each of these states.


374
00:12:49,126 --> 00:12:50,576
Additionally, we expose a


375
00:12:50,576 --> 00:12:51,386
notification through


376
00:12:51,386 --> 00:12:53,116
NotificationCenter to let you


377
00:12:53,116 --> 00:12:54,596
know when this credential state


378
00:12:54,726 --> 00:12:55,566
changed to revoked.


379
00:12:56,256 --> 00:12:57,826
Sign the user out on this device


380
00:12:58,326 --> 00:12:59,746
and optionally guide them to


381
00:12:59,746 --> 00:13:00,566
sign back in again.


382
00:13:03,046 --> 00:13:04,236
Now the user has established the


383
00:13:04,236 --> 00:13:05,266
relationship with your app,


384
00:13:05,406 --> 00:13:06,096
they're using the app, they


385
00:13:06,096 --> 00:13:06,836
create an account.


386
00:13:07,146 --> 00:13:08,396
Inevitably they'll get another


387
00:13:08,396 --> 00:13:09,856
device and they'll want to use


388
00:13:09,856 --> 00:13:10,496
your app again.


389
00:13:11,266 --> 00:13:12,546
Let's talk about that and how


390
00:13:12,546 --> 00:13:13,566
Sign In with Apple helps you


391
00:13:13,566 --> 00:13:13,766
there.


392
00:13:14,776 --> 00:13:15,796
When a user comes back to your


393
00:13:15,796 --> 00:13:18,616
app on a new device, they will


394
00:13:18,616 --> 00:13:19,686
get a one tap sign in


395
00:13:19,686 --> 00:13:20,296
experience.


396
00:13:21,556 --> 00:13:22,736
After a quick FaceID check,


397
00:13:23,046 --> 00:13:25,046
they're back into your app.


398
00:13:28,136 --> 00:13:29,856
In addition to that, we know you


399
00:13:29,856 --> 00:13:30,876
have existing accounts in your


400
00:13:30,876 --> 00:13:31,446
systems.


401
00:13:32,216 --> 00:13:33,866
So now we support iCloud


402
00:13:33,866 --> 00:13:35,256
Keychain passwords through the


403
00:13:35,256 --> 00:13:36,096
same API.


404
00:13:36,586 --> 00:13:37,236
You should request


405
00:13:37,236 --> 00:13:38,376
authentication with both Apple


406
00:13:38,376 --> 00:13:39,776
ID and iCloud Keychain requests.


407
00:13:40,516 --> 00:13:41,476
The user will be offered to


408
00:13:41,476 --> 00:13:42,796
continue using their existing


409
00:13:42,796 --> 00:13:44,426
credential, whichever they have.


410
00:13:45,306 --> 00:13:46,676
And if an error is returned,


411
00:13:47,116 --> 00:13:48,466
show your regular sign-in flows.


412
00:13:49,256 --> 00:13:50,966
For best user experience, your


413
00:13:51,266 --> 00:13:52,426
app should call into this


414
00:13:52,426 --> 00:13:54,686
startup function if it does not


415
00:13:54,686 --> 00:13:55,936
have an existing local account.


416
00:13:57,186 --> 00:13:58,286
So let's look at how easy it is


417
00:13:58,286 --> 00:13:58,976
to implement this.


418
00:14:03,046 --> 00:14:05,136
First, initialize a request


419
00:14:05,136 --> 00:14:07,816
array with an Apple ID


420
00:14:08,116 --> 00:14:10,476
authorization request and an


421
00:14:10,476 --> 00:14:11,626
Apple ID password request.


422
00:14:13,046 --> 00:14:13,396
That's it.


423
00:14:13,596 --> 00:14:14,686
It's that simple.


424
00:14:15,436 --> 00:14:17,826
Pass the request array and


425
00:14:17,826 --> 00:14:18,976
perform the request.


426
00:14:22,276 --> 00:14:23,516
If an existing Sign In with


427
00:14:23,516 --> 00:14:25,036
Apple connection exists, an


428
00:14:25,036 --> 00:14:26,216
AppleIDCredential will be


429
00:14:26,216 --> 00:14:27,726
returned to your app.


430
00:14:29,666 --> 00:14:31,606
If the user has a stored iCloud


431
00:14:31,606 --> 00:14:33,346
Keychain password, that


432
00:14:33,346 --> 00:14:34,526
credential will be returned to


433
00:14:34,526 --> 00:14:35,426
your app.


434
00:14:35,646 --> 00:14:36,646
You should use the credential


435
00:14:36,646 --> 00:14:38,126
that you get from this API to


436
00:14:38,126 --> 00:14:38,936
sign the user in.


437
00:14:39,516 --> 00:14:41,696
If the user has no existing


438
00:14:41,696 --> 00:14:43,526
credentials, the API will return


439
00:14:43,526 --> 00:14:44,666
an error immediately and you


440
00:14:44,666 --> 00:14:46,006
should show your standard login


441
00:14:46,006 --> 00:14:46,326
flows.


442
00:14:47,876 --> 00:14:49,316
By performing these requests on


443
00:14:49,316 --> 00:14:51,766
startup, you will prevent


444
00:14:51,766 --> 00:14:53,006
account duplication within your


445
00:14:53,006 --> 00:14:55,436
systems and streamline the user


446
00:14:55,436 --> 00:14:56,676
experience of getting back into


447
00:14:56,676 --> 00:14:57,816
your app and start to use it.


448
00:15:00,276 --> 00:15:01,706
Now I'd like to call Jonathan


449
00:15:01,706 --> 00:15:03,396
onstage to demo how easy it is


450
00:15:03,396 --> 00:15:04,596
to build this.


451
00:15:05,516 --> 00:15:08,646
[ Applause ]


452
00:15:09,146 --> 00:15:09,646
>> Thanks, Dima.


453
00:15:09,646 --> 00:15:10,766
Good morning, everyone.


454
00:15:11,856 --> 00:15:13,116
Sign In with Apple simplifies


455
00:15:13,116 --> 00:15:14,636
how users create an account or


456
00:15:14,636 --> 00:15:15,866
sign into an app while


457
00:15:15,866 --> 00:15:17,026
maintaining strong account


458
00:15:17,026 --> 00:15:17,486
security.


459
00:15:18,226 --> 00:15:19,696
Password autofill and automatic


460
00:15:19,696 --> 00:15:21,126
strong passwords enables you to


461
00:15:21,126 --> 00:15:22,126
do some of this already.


462
00:15:22,936 --> 00:15:24,416
Sign In with Apple improves upon


463
00:15:24,416 --> 00:15:25,656
them further and you can


464
00:15:25,656 --> 00:15:27,066
integrate with password autofill


465
00:15:27,066 --> 00:15:29,046
passwords using the same native


466
00:15:29,046 --> 00:15:30,596
API as Sign In with Apple.


467
00:15:30,596 --> 00:15:32,616
I'm going to take you through


468
00:15:32,676 --> 00:15:34,556
three topics to get your users


469
00:15:34,556 --> 00:15:36,416
signed into your app using their


470
00:15:36,416 --> 00:15:36,996
Apple ID.


471
00:15:38,196 --> 00:15:39,606
First, I'll add the Sign In with


472
00:15:39,606 --> 00:15:41,146
Apple button to a login form.


473
00:15:41,906 --> 00:15:43,146
Then I'm going to show you how


474
00:15:43,146 --> 00:15:44,576
to implement the Quick Sign In


475
00:15:44,576 --> 00:15:46,826
flow which allows users to sign


476
00:15:46,826 --> 00:15:49,366
into existing credentials using


477
00:15:49,366 --> 00:15:49,876
just one tap.


478
00:15:50,696 --> 00:15:52,306
Last, I'll show you how to check


479
00:15:52,346 --> 00:15:54,296
the credential status of a user


480
00:15:54,326 --> 00:15:56,446
identifier after app launch to


481
00:15:56,446 --> 00:15:57,836
ensure your users are properly


482
00:15:57,836 --> 00:15:58,936
signed in.


483
00:16:00,536 --> 00:16:02,916
To show you all this, I have a


484
00:16:02,916 --> 00:16:03,336
test app.


485
00:16:03,476 --> 00:16:04,106
It's called Juice.


486
00:16:05,376 --> 00:16:06,746
Here you can see a typical login


487
00:16:06,746 --> 00:16:07,876
form with the email and


488
00:16:07,876 --> 00:16:08,286
password.


489
00:16:09,566 --> 00:16:10,246
We're going to add another


490
00:16:10,246 --> 00:16:11,886
option below it, Sign In with


491
00:16:11,886 --> 00:16:12,136
Apple.


492
00:16:13,666 --> 00:16:14,366
So let's get going.


493
00:16:15,146 --> 00:16:16,496
We have one prerequisite to


494
00:16:16,496 --> 00:16:17,836
fulfill in our project settings


495
00:16:18,076 --> 00:16:19,236
and that's to add the Sign In


496
00:16:19,236 --> 00:16:20,306
with Apple capability.


497
00:16:23,376 --> 00:16:24,976
So in your project settings,


498
00:16:25,096 --> 00:16:25,796
you'll want to select your


499
00:16:25,796 --> 00:16:27,876
application and go to the Sign


500
00:16:27,876 --> 00:16:29,176
In and Capabilities section.


501
00:16:29,966 --> 00:16:31,336
I've already added the Sign In


502
00:16:31,336 --> 00:16:32,686
with Apple capability here.


503
00:16:32,686 --> 00:16:35,786
To add it in your app, go ahead


504
00:16:35,786 --> 00:16:36,916
and click on the Capability


505
00:16:36,916 --> 00:16:38,246
button and then search for Sign


506
00:16:38,246 --> 00:16:38,776
In with Apple.


507
00:16:41,046 --> 00:16:42,446
When you do this, Xcode is going


508
00:16:42,446 --> 00:16:43,766
to add the appropriate entry


509
00:16:43,766 --> 00:16:44,866
into your app's entitlement


510
00:16:44,866 --> 00:16:45,176
file.


511
00:16:46,306 --> 00:16:47,576
This will then check that you've


512
00:16:47,576 --> 00:16:49,006
added the Sign In with Apple


513
00:16:49,006 --> 00:16:51,096
capability to your Apple ID in


514
00:16:51,096 --> 00:16:51,906
the Developer Portal.


515
00:16:55,066 --> 00:16:56,296
If you haven't done so already,


516
00:16:56,446 --> 00:16:57,836
you'll want to go ahead and sign


517
00:16:57,836 --> 00:16:59,336
into the Developer Portal and


518
00:16:59,336 --> 00:17:00,336
make sure that you've added this


519
00:17:00,336 --> 00:17:00,906
capability.


520
00:17:06,346 --> 00:17:07,536
So while here, I'd like to


521
00:17:07,536 --> 00:17:09,175
highlight the Associated Domains


522
00:17:09,215 --> 00:17:10,626
Capability seen over here.


523
00:17:11,955 --> 00:17:13,396
This will make sure that you get


524
00:17:13,435 --> 00:17:15,576
passwords back in your


525
00:17:15,576 --> 00:17:17,215
credential and presented to the


526
00:17:17,215 --> 00:17:18,596
user when you make an


527
00:17:18,596 --> 00:17:20,476
ASAuthorizationPassword request.


528
00:17:21,016 --> 00:17:22,086
I'll show you how to add one of


529
00:17:22,086 --> 00:17:23,076
those requests later in the


530
00:17:23,076 --> 00:17:23,366
demo.


531
00:17:24,726 --> 00:17:25,836
If you want your password


532
00:17:25,836 --> 00:17:27,695
request to provide exactly the


533
00:17:27,695 --> 00:17:29,406
right credentials, refer to the


534
00:17:29,406 --> 00:17:32,176
2017 session Password Autofill


535
00:17:32,176 --> 00:17:34,306
for Apps, as well as Thursday's


536
00:17:34,306 --> 00:17:35,766
session What's New in


537
00:17:35,766 --> 00:17:36,506
Authentication.


538
00:17:37,656 --> 00:17:38,646
So I'm going to head back to


539
00:17:38,646 --> 00:17:40,556
Xcode and we're going to take a


540
00:17:40,556 --> 00:17:41,926
look at the Juice app.


541
00:17:45,046 --> 00:17:45,976
As you can see, this is just a


542
00:17:45,976 --> 00:17:48,106
simple demo app to highlight


543
00:17:48,106 --> 00:17:49,246
some of the key features of this


544
00:17:49,246 --> 00:17:49,556
API.


545
00:17:50,996 --> 00:17:52,816
Below this or label I have a


546
00:17:52,816 --> 00:17:55,176
Stack View that is called Login


547
00:17:55,176 --> 00:17:56,076
Provider Stack View.


548
00:17:57,106 --> 00:17:58,256
This is where we're going to add


549
00:17:58,256 --> 00:17:59,926
the Sign In with Apple button.


550
00:18:02,516 --> 00:18:03,836
Adding the Sign In with Apple


551
00:18:03,836 --> 00:18:05,226
button will be accomplished in


552
00:18:05,226 --> 00:18:06,046
three steps.


553
00:18:06,686 --> 00:18:08,356
First, I'll add the Sign In with


554
00:18:08,356 --> 00:18:09,606
Apple button to our Provider


555
00:18:09,606 --> 00:18:10,086
Stack View.


556
00:18:10,836 --> 00:18:12,236
Then I'm going to define a


557
00:18:12,236 --> 00:18:13,456
function that will create and


558
00:18:13,456 --> 00:18:15,126
perform the request when the


559
00:18:15,126 --> 00:18:15,776
button is tapped.


560
00:18:15,776 --> 00:18:18,146
And then last, we'll adopt the


561
00:18:18,146 --> 00:18:19,626
necessary authentication


562
00:18:19,626 --> 00:18:21,026
services protocols which will


563
00:18:21,026 --> 00:18:22,166
provide us with results.


564
00:18:23,336 --> 00:18:25,216
So let's get started by adding


565
00:18:25,216 --> 00:18:26,456
the Sign In with Apple button to


566
00:18:26,456 --> 00:18:28,376
our UI and to do that let's take


567
00:18:28,376 --> 00:18:28,726
a look at the


568
00:18:28,726 --> 00:18:30,216
LoginViewController Swift file.


569
00:18:36,046 --> 00:18:37,336
So we'll be working with the


570
00:18:37,336 --> 00:18:38,886
AuthenticationServices module,


571
00:18:38,886 --> 00:18:40,076
so we'll go ahead and import


572
00:18:40,076 --> 00:18:41,116
that here.


573
00:18:54,076 --> 00:18:56,406
So here I've defined a function


574
00:18:56,656 --> 00:18:58,296
called setupProviderLoginView,


575
00:18:58,956 --> 00:19:00,406
and it's initializing the


576
00:19:00,406 --> 00:19:02,616
ASAuthorizationAppleIDButton.


577
00:19:03,236 --> 00:19:04,126
It's then adding the


578
00:19:04,126 --> 00:19:05,606
handleAuthorizationAppleID


579
00:19:05,606 --> 00:19:07,336
ButtonPress function that I've


580
00:19:07,336 --> 00:19:08,856
stubbed out over here as its


581
00:19:08,856 --> 00:19:09,276
action.


582
00:19:10,026 --> 00:19:12,146
And then I add the button to the


583
00:19:12,146 --> 00:19:14,056
loginProviderStackView which


584
00:19:14,056 --> 00:19:16,496
will then show it in our UI.


585
00:19:16,496 --> 00:19:18,666
Just above, I'm overriding the


586
00:19:18,666 --> 00:19:20,166
viewDidLoad function so that


587
00:19:20,166 --> 00:19:21,966
this way we'll go ahead and call


588
00:19:21,966 --> 00:19:23,536
setupProviderLoginView and that


589
00:19:23,536 --> 00:19:24,036
will get added.


590
00:19:24,616 --> 00:19:25,786
So I'll go ahead and run the


591
00:19:26,616 --> 00:19:26,686
app.


592
00:19:35,136 --> 00:19:36,566
And great, the button is now


593
00:19:36,566 --> 00:19:37,276
visible in our UI.


594
00:19:37,276 --> 00:19:39,246
But it's not really doing


595
00:19:39,246 --> 00:19:41,246
anything, so let's jump to step


596
00:19:41,246 --> 00:19:42,886
two which is define the action


597
00:19:42,886 --> 00:19:43,426
for our button.


598
00:19:54,066 --> 00:19:55,026
All right, let's talk about what


599
00:19:55,026 --> 00:19:57,646
this function is doing.


600
00:19:57,866 --> 00:19:59,606
So what we're doing is we're


601
00:19:59,606 --> 00:20:00,796
initializing an


602
00:20:00,796 --> 00:20:02,496
ASAuthorizationAppleID request


603
00:20:03,166 --> 00:20:05,606
using the AppleIDProvider and


604
00:20:05,606 --> 00:20:07,266
then we're setting its


605
00:20:07,266 --> 00:20:10,236
requestedScopes property to an


606
00:20:10,236 --> 00:20:11,666
array that contains the full


607
00:20:11,666 --> 00:20:13,826
name and email scope.


608
00:20:19,046 --> 00:20:19,846
This part is critical.


609
00:20:20,316 --> 00:20:21,636
The user will be asked to share


610
00:20:21,636 --> 00:20:23,286
information depending on what


611
00:20:23,286 --> 00:20:24,106
scopes you set here.


612
00:20:24,356 --> 00:20:26,456
The information is then returned


613
00:20:26,456 --> 00:20:27,816
to your Apple ID Credential --


614
00:20:27,816 --> 00:20:30,316
in your Apple ID Credential.


615
00:20:30,876 --> 00:20:32,446
You should only request what you


616
00:20:32,526 --> 00:20:33,366
actually need.


617
00:20:34,296 --> 00:20:35,466
So let's go back to our button's


618
00:20:35,466 --> 00:20:35,766
action.


619
00:20:39,046 --> 00:20:40,336
So we initialize a controller


620
00:20:41,856 --> 00:20:43,636
using the request that I've


621
00:20:43,636 --> 00:20:45,306
inserted into an array, and then


622
00:20:45,306 --> 00:20:46,426
we set the delegate and


623
00:20:46,426 --> 00:20:48,006
presentationContextProvider to


624
00:20:48,006 --> 00:20:48,296
self.


625
00:20:49,006 --> 00:20:50,446
We then call performRequest.


626
00:20:57,066 --> 00:20:57,916
So now that we've defined the


627
00:20:57,916 --> 00:20:59,016
action, let's go ahead and run


628
00:20:59,016 --> 00:20:59,326
the app.


629
00:21:03,126 --> 00:21:04,056
Tap the Sign In with Apple


630
00:21:04,056 --> 00:21:04,356
button.


631
00:21:07,256 --> 00:21:08,616
And as you can see, the UI is


632
00:21:08,616 --> 00:21:10,216
asking for the requested scopes


633
00:21:10,576 --> 00:21:12,366
which we set in our request.


634
00:21:15,316 --> 00:21:17,156
I'm going to cancel for now.


635
00:21:20,046 --> 00:21:21,096
So remember this delegate in the


636
00:21:21,096 --> 00:21:22,626
presentationContextProvider?


637
00:21:23,966 --> 00:21:25,156
We're going to have to formally


638
00:21:25,156 --> 00:21:26,666
adopt the authenticationServices


639
00:21:26,666 --> 00:21:28,276
protocol that's required for


640
00:21:29,006 --> 00:21:29,126
this.


641
00:21:29,696 --> 00:21:31,276
I stubbed it out below.


642
00:21:34,236 --> 00:21:35,936
So the ASAuthorizationController


643
00:21:35,936 --> 00:21:38,126
delegate has two functions: one


644
00:21:38,126 --> 00:21:40,076
that returns an authorization


645
00:21:40,156 --> 00:21:41,596
and one that returns an error.


646
00:21:45,056 --> 00:21:47,976
Let's go ahead and we'll define


647
00:21:51,026 --> 00:21:52,416
AuthorizationController


648
00:21:52,416 --> 00:21:53,716
didCompleteWithAuthorization.


649
00:21:54,446 --> 00:21:57,086
So what we're doing here is


650
00:21:57,086 --> 00:21:58,326
we're checking the authorization


651
00:21:58,326 --> 00:21:58,986
that comes back.


652
00:21:59,456 --> 00:22:00,966
We'll check the credential of


653
00:22:00,966 --> 00:22:01,666
the authorization.


654
00:22:01,666 --> 00:22:03,586
And then in the case in which


655
00:22:03,586 --> 00:22:06,096
it's an appleIdCredential, we're


656
00:22:06,096 --> 00:22:07,536
going to set a constant user


657
00:22:07,536 --> 00:22:09,876
identifier to the user property


658
00:22:09,876 --> 00:22:10,526
of the credential.


659
00:22:11,676 --> 00:22:13,726
For demo purposes, we then save


660
00:22:14,306 --> 00:22:15,696
the user identifier in the


661
00:22:15,696 --> 00:22:17,156
keychain so we can use it later.


662
00:22:17,816 --> 00:22:19,496
I'll also have the


663
00:22:19,496 --> 00:22:22,436
ResultViewController that will


664
00:22:22,556 --> 00:22:23,646
go ahead and take care of some


665
00:22:23,646 --> 00:22:25,036
of the boilerplate of handling


666
00:22:25,036 --> 00:22:26,706
some of the properties of the


667
00:22:26,706 --> 00:22:27,646
appleIdCredential.


668
00:22:35,046 --> 00:22:38,176
So just below this, just below


669
00:22:38,176 --> 00:22:39,926
what we've defined, we have the


670
00:22:39,926 --> 00:22:41,426
didCompleteWithError function


671
00:22:41,536 --> 00:22:43,546
and this will get called in the


672
00:22:43,546 --> 00:22:45,286
case in which the flow doesn't


673
00:22:45,286 --> 00:22:46,696
complete or there is no


674
00:22:46,696 --> 00:22:47,156
credentials.


675
00:22:50,326 --> 00:22:51,576
Lastly, we have one more


676
00:22:51,576 --> 00:22:52,476
protocol and it's


677
00:22:52,786 --> 00:22:54,436
ASAuthorizationController


678
00:22:54,476 --> 00:22:56,226
PresentationContextProviding.


679
00:22:57,286 --> 00:22:58,326
This defines a function


680
00:22:58,556 --> 00:22:59,636
presentationAnchor for


681
00:22:59,636 --> 00:23:00,136
controller.


682
00:23:00,956 --> 00:23:03,096
And what this requires us to do


683
00:23:03,096 --> 00:23:04,646
is return the window in which


684
00:23:04,686 --> 00:23:05,726
we'd like Authentication


685
00:23:05,726 --> 00:23:08,246
Services to display the UI.


686
00:23:09,096 --> 00:23:10,976
So let's run the app.


687
00:23:17,046 --> 00:23:21,856
Tap the button and share email.


688
00:23:26,256 --> 00:23:27,506
And authenticate with just one


689
00:23:27,506 --> 00:23:27,806
tap.


690
00:23:32,046 --> 00:23:33,176
So the service in here seems to


691
00:23:33,176 --> 00:23:34,406
be giving me a bit of a problem,


692
00:23:34,406 --> 00:23:35,686
but I've got a backup video that


693
00:23:35,686 --> 00:23:36,956
will show you what is supposed


694
00:23:36,956 --> 00:23:37,326
to happen.


695
00:23:45,046 --> 00:23:45,616
So here we are.


696
00:23:46,686 --> 00:23:50,006
We are sharing the email and


697
00:23:50,006 --> 00:23:52,136
then the ResultViewController


698
00:23:52,136 --> 00:23:53,706
will then display the results


699
00:23:54,426 --> 00:23:55,116
right there.


700
00:23:55,286 --> 00:23:56,546
And as you can see, we have a


701
00:23:56,546 --> 00:23:58,466
user identifier, the full name


702
00:23:58,466 --> 00:23:59,436
and email address.


703
00:24:02,516 --> 00:24:08,976
[ Applause ]


704
00:24:09,476 --> 00:24:11,576
Okay, well, actually it looks


705
00:24:11,576 --> 00:24:11,976
like this has worked.


706
00:24:19,046 --> 00:24:19,976
Okay, there we go.


707
00:24:20,516 --> 00:24:27,686
[ Applause ]


708
00:24:28,186 --> 00:24:29,806
All right, so let's get back on


709
00:24:29,806 --> 00:24:30,186
topic.


710
00:24:30,676 --> 00:24:32,606
So to recap, we've added a Sign


711
00:24:32,606 --> 00:24:33,766
In with Apple button to our UI,


712
00:24:34,306 --> 00:24:36,266
we defined the button's action


713
00:24:36,606 --> 00:24:38,516
and the required functions of


714
00:24:38,516 --> 00:24:39,716
the authentication services


715
00:24:39,716 --> 00:24:41,576
protocol that return results and


716
00:24:41,576 --> 00:24:43,256
specify where UI should be


717
00:24:43,256 --> 00:24:43,546
shown.


718
00:24:46,046 --> 00:24:46,926
So now that we've covered


719
00:24:46,926 --> 00:24:48,706
account creation with the Sign


720
00:24:48,706 --> 00:24:50,246
In with Apple button, let's work


721
00:24:50,246 --> 00:24:51,436
on getting our users signed in


722
00:24:51,466 --> 00:24:51,976
quickly.


723
00:24:52,496 --> 00:24:54,306
To do this, we'll define a


724
00:24:54,306 --> 00:24:55,766
function that will display UI to


725
00:24:55,816 --> 00:24:57,566
our users in a case in which


726
00:24:57,566 --> 00:24:58,476
they have an existing


727
00:24:58,476 --> 00:24:58,866
credential.


728
00:24:59,766 --> 00:25:01,716
So this can be either an AppleID


729
00:25:01,986 --> 00:25:03,456
or an iCloud Keychain password


730
00:25:03,786 --> 00:25:05,356
using the app's authorized


731
00:25:05,356 --> 00:25:05,776
domains.


732
00:25:14,406 --> 00:25:16,296
So here I'm defining the


733
00:25:16,366 --> 00:25:18,086
performExistingAccountSetup


734
00:25:18,086 --> 00:25:19,766
Flows function.


735
00:25:19,766 --> 00:25:22,136
So here we have an array that


736
00:25:22,136 --> 00:25:23,806
contains both an Apple ID


737
00:25:23,806 --> 00:25:25,916
request and a password request


738
00:25:26,056 --> 00:25:27,876
using the respective providers.


739
00:25:28,416 --> 00:25:30,746
We then initialize an


740
00:25:30,746 --> 00:25:32,776
authorization controller using


741
00:25:32,776 --> 00:25:34,676
those requests, set the delegate


742
00:25:34,846 --> 00:25:35,086
and the


743
00:25:35,086 --> 00:25:37,406
presentationContextProvider like


744
00:25:37,406 --> 00:25:38,776
we did before, and then call


745
00:25:38,776 --> 00:25:39,576
performRequest.


746
00:25:40,696 --> 00:25:42,096
So we've added one more type of


747
00:25:42,096 --> 00:25:43,556
credential request to our


748
00:25:43,556 --> 00:25:44,796
controller and that is the


749
00:25:44,846 --> 00:25:45,686
password request.


750
00:25:46,596 --> 00:25:48,096
We will want to handle this type


751
00:25:48,096 --> 00:25:49,786
of result in our delegate, so


752
00:25:49,786 --> 00:25:50,846
let's go ahead and do that now.


753
00:26:01,296 --> 00:26:02,966
So we're setting a case for the


754
00:26:02,966 --> 00:26:04,256
ASPasswordCredential.


755
00:26:04,886 --> 00:26:07,326
So in this case, the


756
00:26:07,326 --> 00:26:10,196
ASPasswordCredential has a user


757
00:26:10,196 --> 00:26:11,386
and a password property.


758
00:26:12,216 --> 00:26:13,166
In this case, when it gets


759
00:26:13,166 --> 00:26:14,576
returned to you, you'll want to


760
00:26:14,576 --> 00:26:15,636
go ahead and authenticate


761
00:26:15,636 --> 00:26:16,906
against your servers and you


762
00:26:16,906 --> 00:26:17,976
don't even need to show any UI


763
00:26:17,976 --> 00:26:19,076
to your users.


764
00:26:19,626 --> 00:26:22,116
So there's one last step and


765
00:26:22,116 --> 00:26:23,446
that's to actually call the


766
00:26:23,446 --> 00:26:24,976
performExistingAccountSetup


767
00:26:24,976 --> 00:26:25,676
Flows function.


768
00:26:28,216 --> 00:26:29,126
I'm going to head back up to the


769
00:26:29,126 --> 00:26:29,466
class.


770
00:26:33,326 --> 00:26:34,436
I'm going to override


771
00:26:34,506 --> 00:26:35,736
viewDidAppear to call


772
00:26:35,736 --> 00:26:37,296
performExistingAccountSetup


773
00:26:37,836 --> 00:26:37,976
Flows.


774
00:26:44,216 --> 00:26:45,746
Let's run the app.


775
00:26:55,116 --> 00:26:56,916
And as you can see, the user is


776
00:26:56,916 --> 00:26:58,336
presented with existing


777
00:26:58,336 --> 00:27:00,396
credentials when we show the


778
00:27:00,396 --> 00:27:01,686
loginViewController.


779
00:27:02,896 --> 00:27:04,096
That's our QuickSigninFlow.


780
00:27:04,946 --> 00:27:06,346
So we've just implemented the


781
00:27:06,346 --> 00:27:08,186
QuickSigninFlow, so let's move


782
00:27:08,186 --> 00:27:09,626
on to our last topic which is


783
00:27:09,686 --> 00:27:10,816
checking the credential status


784
00:27:10,816 --> 00:27:12,486
of an AppleID user identifier.


785
00:27:16,046 --> 00:27:17,116
Earlier in this demo we saved


786
00:27:17,116 --> 00:27:18,176
the user identifier to the


787
00:27:18,176 --> 00:27:19,506
keychain during account


788
00:27:19,506 --> 00:27:19,976
creation.


789
00:27:20,806 --> 00:27:22,666
Using this identifier, we can


790
00:27:22,666 --> 00:27:23,956
check the state of the sign in


791
00:27:24,236 --> 00:27:25,386
to ensure that our user is


792
00:27:25,386 --> 00:27:26,396
properly authenticated.


793
00:27:26,876 --> 00:27:27,806
We'll do this in our


794
00:27:27,806 --> 00:27:28,396
AppDelegate.


795
00:27:28,936 --> 00:27:30,576
And I head over to the


796
00:27:30,576 --> 00:27:31,386
AppDelegate file.


797
00:27:35,186 --> 00:27:36,946
And I'm going to remove this.


798
00:27:47,136 --> 00:27:49,066
So first we're checking to see


799
00:27:49,066 --> 00:27:50,636
if the keychain has the user


800
00:27:50,636 --> 00:27:51,886
identifier in it.


801
00:27:52,116 --> 00:27:53,106
If it does, we're going to


802
00:27:53,106 --> 00:27:53,946
initialize


803
00:27:53,946 --> 00:27:55,916
ASAuthorizationAppleIDProvider,


804
00:27:55,966 --> 00:27:57,056
and then using the


805
00:27:57,056 --> 00:27:58,916
AppleIDProvider we'll call


806
00:27:58,916 --> 00:28:00,366
credentials a state passing the


807
00:28:00,366 --> 00:28:01,246
user identifier.


808
00:28:04,046 --> 00:28:05,406
So we're going to get three


809
00:28:05,406 --> 00:28:06,186
different -- we have three


810
00:28:06,186 --> 00:28:07,206
different types of cases.


811
00:28:07,806 --> 00:28:09,976
One is authorized and in this


812
00:28:09,976 --> 00:28:11,476
case you can just assume that


813
00:28:11,596 --> 00:28:12,756
the user is properly


814
00:28:12,756 --> 00:28:15,216
authenticated and you can


815
00:28:15,216 --> 00:28:16,406
continue your normal app


816
00:28:16,406 --> 00:28:17,106
operations.


817
00:28:17,986 --> 00:28:18,786
In the case in which it's


818
00:28:18,786 --> 00:28:20,286
revoked, you want to call your


819
00:28:20,286 --> 00:28:22,716
existing sign out logic and then


820
00:28:22,716 --> 00:28:24,306
you can fall through to notFound


821
00:28:24,336 --> 00:28:25,736
case which is to show the


822
00:28:25,736 --> 00:28:26,796
LoginViewController.


823
00:28:26,886 --> 00:28:29,446
So I'm going to go ahead and run


824
00:28:29,446 --> 00:28:29,716
the app.


825
00:28:43,076 --> 00:28:44,336
And as you can see, the user


826
00:28:44,336 --> 00:28:45,606
identifier is presented in the


827
00:28:45,606 --> 00:28:47,906
ResultViewController because in


828
00:28:47,906 --> 00:28:49,516
this case the user is already


829
00:28:49,516 --> 00:28:50,056
authorized.


830
00:28:50,556 --> 00:28:51,866
The ResultViewController is the


831
00:28:51,866 --> 00:28:53,886
initial view controller in the


832
00:28:53,886 --> 00:28:54,386
storyboard.


833
00:28:54,656 --> 00:28:55,976
So that's it.


834
00:28:58,046 --> 00:28:58,846
Pretty easy, right?


835
00:28:59,516 --> 00:29:03,796
[ Applause ]


836
00:29:04,296 --> 00:29:05,276
So I've just shown you how to


837
00:29:05,276 --> 00:29:06,466
add the Sign In with Apple


838
00:29:06,466 --> 00:29:08,146
button to your login form, how


839
00:29:08,146 --> 00:29:09,576
to implement a QuickSigninFlow


840
00:29:09,806 --> 00:29:10,896
to get users signed in with an


841
00:29:10,896 --> 00:29:12,626
existing credential, and then


842
00:29:12,946 --> 00:29:13,986
how to check the credential


843
00:29:13,986 --> 00:29:16,246
status using the user identifier


844
00:29:16,416 --> 00:29:17,456
to make sure users are


845
00:29:17,506 --> 00:29:18,786
authenticated with your app.


846
00:29:19,126 --> 00:29:20,316
With that, I'll hand it back


847
00:29:20,316 --> 00:29:21,506
over to Gokul who'll cover


848
00:29:21,506 --> 00:29:22,696
multiplatform topics.


849
00:29:22,946 --> 00:29:23,536
Gokul?


850
00:29:24,516 --> 00:29:29,666
[ Applause ]


851
00:29:30,166 --> 00:29:31,356
>> Thank you, Jonathan.


852
00:29:31,356 --> 00:29:33,006
We just saw Jonathan start with


853
00:29:33,006 --> 00:29:36,576
a test app, add a button, handle


854
00:29:36,576 --> 00:29:38,046
requests and responses and


855
00:29:38,106 --> 00:29:39,276
finally handle existing


856
00:29:39,276 --> 00:29:40,036
accounts.


857
00:29:40,716 --> 00:29:43,216
All easy to implement and a


858
00:29:43,276 --> 00:29:44,986
great experience for users.


859
00:29:45,146 --> 00:29:46,346
So that was a very quick demo.


860
00:29:47,296 --> 00:29:48,796
Let's talk about cross-platform.


861
00:29:49,386 --> 00:29:51,466
Cross-platform's important and


862
00:29:51,606 --> 00:29:54,606
it's enabled through a simple


863
00:29:54,726 --> 00:29:56,386
JavaScript library.


864
00:29:57,236 --> 00:29:59,216
Using this library, you can


865
00:29:59,216 --> 00:30:01,046
enable your users to sign in


866
00:30:01,446 --> 00:30:03,656
with Apple on any platform like


867
00:30:03,826 --> 00:30:05,256
Windows or Android.


868
00:30:05,846 --> 00:30:07,776
And clicking the familiar Sign


869
00:30:07,776 --> 00:30:10,036
In with Apple button will


870
00:30:10,036 --> 00:30:12,686
redirect to Apple where your


871
00:30:12,686 --> 00:30:15,576
user can enter the Apple ID and


872
00:30:15,576 --> 00:30:16,066
sign in.


873
00:30:17,036 --> 00:30:19,086
Once they sign in, it redirects


874
00:30:19,086 --> 00:30:19,436
back.


875
00:30:21,366 --> 00:30:23,206
Both the calls and information


876
00:30:23,206 --> 00:30:25,006
you receive back are very


877
00:30:25,006 --> 00:30:26,166
similar to the native API.


878
00:30:26,946 --> 00:30:29,426
You get the ID, the token or


879
00:30:29,426 --> 00:30:30,816
even the name or email if you


880
00:30:30,816 --> 00:30:31,236
request it.


881
00:30:32,356 --> 00:30:33,746
And once you get back the ID and


882
00:30:33,746 --> 00:30:36,526
the token, you can convert this


883
00:30:36,926 --> 00:30:41,086
to an app session in your app.


884
00:30:42,036 --> 00:30:45,236
Best of all, support for this is


885
00:30:45,236 --> 00:30:47,326
built right into Safari.


886
00:30:48,876 --> 00:30:51,736
So when your user clicks that


887
00:30:51,736 --> 00:30:54,966
button, Safari will bring up a


888
00:30:54,966 --> 00:30:56,866
native Apple Pay-like sheet.


889
00:30:57,716 --> 00:31:00,606
Your user can simply TouchID and


890
00:31:00,606 --> 00:31:02,306
they're instantly signed in and


891
00:31:02,306 --> 00:31:04,466
using your website super-fast,


892
00:31:04,466 --> 00:31:06,116
and what a great experience.


893
00:31:06,536 --> 00:31:08,066
So it's built right into Safari.


894
00:31:09,976 --> 00:31:11,366
Integrating with a JavaScript


895
00:31:11,596 --> 00:31:13,976
library is just four easy steps.


896
00:31:17,056 --> 00:31:19,186
You start with including the


897
00:31:19,186 --> 00:31:21,916
JavaScript library in your HTML


898
00:31:21,966 --> 00:31:22,476
as shown.


899
00:31:24,256 --> 00:31:26,146
A simple div renders the button.


900
00:31:27,076 --> 00:31:28,506
You can style it with many


901
00:31:28,506 --> 00:31:30,556
parameters to customize the fit


902
00:31:30,556 --> 00:31:32,446
to your site.


903
00:31:33,176 --> 00:31:34,946
Configure it with parameters


904
00:31:35,096 --> 00:31:36,526
like whether you want name,


905
00:31:36,526 --> 00:31:39,946
email and your redirect URI.


906
00:31:42,046 --> 00:31:43,546
And finally, when the user


907
00:31:43,546 --> 00:31:45,516
completes sign in, the results


908
00:31:45,626 --> 00:31:47,896
are posted back to your redirect


909
00:31:47,896 --> 00:31:50,346
URI with form-encoded values.


910
00:31:51,346 --> 00:31:53,556
You validate the token, the auth


911
00:31:53,556 --> 00:31:55,396
code and convert it to an


912
00:31:55,396 --> 00:31:56,376
application session.


913
00:31:56,746 --> 00:31:58,806
And you decide how long you want


914
00:31:58,806 --> 00:31:59,466
the session to live.


915
00:31:59,556 --> 00:32:02,826
So that's a very quick look at


916
00:32:02,826 --> 00:32:04,706
cross-platform support with


917
00:32:04,706 --> 00:32:05,946
JavaScript library.


918
00:32:08,046 --> 00:32:09,346
Finally, let's just go through


919
00:32:09,346 --> 00:32:11,346
some best practices to observe


920
00:32:11,816 --> 00:32:13,506
when integrating with Sign In


921
00:32:13,506 --> 00:32:13,926
with Apple.


922
00:32:16,146 --> 00:32:17,676
Here are some general guidelines


923
00:32:17,676 --> 00:32:18,296
to follow.


924
00:32:18,986 --> 00:32:20,166
As stated in the App Store


925
00:32:20,166 --> 00:32:22,286
guidelines, unless your app


926
00:32:22,286 --> 00:32:23,796
requires significant


927
00:32:23,866 --> 00:32:25,846
account-based features, let


928
00:32:25,846 --> 00:32:27,596
people use it without a login.


929
00:32:28,076 --> 00:32:30,186
For example, you can guide the


930
00:32:30,186 --> 00:32:32,326
user to sign in with Apple after


931
00:32:32,326 --> 00:32:33,916
they've made a purchase so you


932
00:32:34,336 --> 00:32:36,396
can tie their purchase to an


933
00:32:36,396 --> 00:32:38,606
account that they can easily get


934
00:32:39,126 --> 00:32:40,536
back to later.


935
00:32:40,536 --> 00:32:41,866
If you just need a unique


936
00:32:41,866 --> 00:32:43,746
identifier to identify the user,


937
00:32:44,316 --> 00:32:45,716
don't collect name or email.


938
00:32:46,756 --> 00:32:47,476
You don't need it.


939
00:32:48,356 --> 00:32:49,606
And if you do collect email


940
00:32:50,816 --> 00:32:52,366
through Sign In with Apple, make


941
00:32:52,366 --> 00:32:54,326
sure that you respect the user's


942
00:32:54,326 --> 00:32:54,916
choice.


943
00:32:57,156 --> 00:32:58,166
And here are some additional


944
00:32:58,166 --> 00:32:59,836
best practices to keep in mind


945
00:32:59,956 --> 00:33:01,366
when integrating with the API.


946
00:33:02,646 --> 00:33:04,606
When your app first starts up,


947
00:33:05,096 --> 00:33:07,026
use the API to check for


948
00:33:07,026 --> 00:33:08,146
existing accounts.


949
00:33:08,806 --> 00:33:10,826
This allows the user to quickly


950
00:33:10,826 --> 00:33:11,926
get going with an account they


951
00:33:11,926 --> 00:33:13,776
already have with your app,


952
00:33:14,306 --> 00:33:15,706
whether it's iCloud Keychain


953
00:33:16,196 --> 00:33:18,106
password or an existing Apple


954
00:33:18,106 --> 00:33:18,456
account.


955
00:33:19,086 --> 00:33:20,406
And you don't have any duplicate


956
00:33:20,406 --> 00:33:21,376
accounts in your app.


957
00:33:22,866 --> 00:33:24,896
Plan to provide the best


958
00:33:24,926 --> 00:33:27,966
experience for users that return


959
00:33:28,186 --> 00:33:29,196
real user indicator.


960
00:33:29,406 --> 00:33:32,096
If it returns unknown, treat


961
00:33:32,096 --> 00:33:33,446
them like you would any new


962
00:33:33,446 --> 00:33:34,376
account in your system.


963
00:33:34,966 --> 00:33:38,476
Use the Button API to draw the


964
00:33:38,476 --> 00:33:38,746
button.


965
00:33:40,376 --> 00:33:41,586
And when you draw the button


966
00:33:41,696 --> 00:33:43,866
with the API, wire it to the


967
00:33:43,896 --> 00:33:46,026
Apple ID Provider in your code.


968
00:33:47,466 --> 00:33:51,156
And finally, once users use Sign


969
00:33:51,156 --> 00:33:52,916
In with Apple, they will expect


970
00:33:52,916 --> 00:33:55,516
to see it on all platforms that


971
00:33:55,516 --> 00:33:56,186
your app is on.


972
00:33:56,576 --> 00:33:58,206
So implement it across all of


973
00:33:58,206 --> 00:33:58,916
your platforms.


974
00:34:00,166 --> 00:34:02,486
So that's a quick look at best


975
00:34:02,486 --> 00:34:03,226
practices.


976
00:34:03,496 --> 00:34:05,586
In summary, Sign In with Apple


977
00:34:05,806 --> 00:34:07,906
is fast, easy account setup and


978
00:34:07,906 --> 00:34:09,896
sign in for your app.


979
00:34:10,286 --> 00:34:12,356
Streamlined, one-tap account


980
00:34:12,356 --> 00:34:14,516
setup with no cumbersome forms.


981
00:34:15,126 --> 00:34:16,735
Verified email address that


982
00:34:16,735 --> 00:34:18,255
instantly works and you can use


983
00:34:18,255 --> 00:34:19,505
for any communication.


984
00:34:20,606 --> 00:34:22,556
Built-in security with no new


985
00:34:22,556 --> 00:34:24,235
passwords and two-factor


986
00:34:24,235 --> 00:34:25,536
authentication for every


987
00:34:25,536 --> 00:34:25,886
account.


988
00:34:26,886 --> 00:34:28,536
Real user indicator to help you


989
00:34:28,536 --> 00:34:29,666
combat account fraud.


990
00:34:29,666 --> 00:34:32,525
And cross-platform support so


991
00:34:32,525 --> 00:34:34,646
your users can benefit from Sign


992
00:34:34,646 --> 00:34:36,606
In with Apple on every platform


993
00:34:36,656 --> 00:34:37,646
that your app is on.


994
00:34:39,036 --> 00:34:41,466
Please join us at our lab at


995
00:34:41,466 --> 00:34:43,085
10:00 where we're happy to


996
00:34:43,085 --> 00:34:44,106
answer any questions you may


997
00:34:44,106 --> 00:34:44,386
have.


998
00:34:45,065 --> 00:34:46,156
There's more in the


999
00:34:46,156 --> 00:34:47,126
authentication services


1000
00:34:47,126 --> 00:34:49,136
framework to help you help your


1001
00:34:49,136 --> 00:34:51,136
users with signing in and


1002
00:34:51,136 --> 00:34:52,286
dealing with their passwords.


1003
00:34:52,766 --> 00:34:53,775
See the What's New in


1004
00:34:53,775 --> 00:34:55,315
Authentication session tomorrow


1005
00:34:55,616 --> 00:34:56,196
to learn more.


1006
00:34:56,815 --> 00:34:58,416
And Sign In with Apple works


1007
00:34:58,536 --> 00:35:00,096
great with independent Watch


1008
00:35:00,096 --> 00:35:00,406
apps.


1009
00:35:00,776 --> 00:35:02,166
Please tune in to Independent


1010
00:35:02,166 --> 00:35:04,646
Watch Apps on the WWDC app to


1011
00:35:04,646 --> 00:35:05,096
learn more.


1012
00:35:06,406 --> 00:35:06,966
That's all.


1013
00:35:07,066 --> 00:35:07,926
Thank you for joining us.


1014
00:35:07,926 --> 00:35:09,196
Have a wonderful conference.


1015
00:35:09,526 --> 00:35:09,866
Thank you.


1016
00:35:10,016 --> 00:35:12,000
[ Applause ]

