1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:10,426 --> 00:00:12,426
[Applause]


3
00:00:12,836 --> 00:00:13,626
>> Hello, everyone.


4
00:00:13,626 --> 00:00:15,306
My name's Tina.


5
00:00:16,276 --> 00:00:17,456
I'm an engineer on the


6
00:00:17,456 --> 00:00:18,386
Foundation team.


7
00:00:18,616 --> 00:00:20,196
I'm going over the highlights of


8
00:00:20,196 --> 00:00:21,756
the new APIs we added to


9
00:00:21,756 --> 00:00:22,486
Foundation.


10
00:00:22,796 --> 00:00:24,176
Now, let's get started with the


11
00:00:24,176 --> 00:00:25,126
API highlights.


12
00:00:25,846 --> 00:00:27,386
These are a variety of things


13
00:00:27,386 --> 00:00:28,796
we're going to talk about today.


14
00:00:31,356 --> 00:00:32,956
Let's get started with Ordered


15
00:00:32,956 --> 00:00:33,856
Collection Diffing.


16
00:00:34,506 --> 00:00:36,346
It's an API that allows you to


17
00:00:36,346 --> 00:00:38,896
compute and code and apply the


18
00:00:38,896 --> 00:00:40,666
diff between collections.


19
00:00:41,646 --> 00:00:43,326
To illustrate this, I'm going to


20
00:00:43,326 --> 00:00:44,236
tell a story.


21
00:00:44,916 --> 00:00:46,886
There is a bear string that


22
00:00:46,886 --> 00:00:48,446
really wants to become a bird.


23
00:00:49,156 --> 00:00:52,166
Let's figure out how to do this.


24
00:00:52,376 --> 00:00:54,356
We notice that the bear has an E


25
00:00:54,356 --> 00:00:56,186
and A that the bird doesn't


26
00:00:56,186 --> 00:00:56,466
have.


27
00:00:57,556 --> 00:00:59,876
And it also needs an I and a D


28
00:00:59,876 --> 00:01:00,536
from the bird.


29
00:01:01,966 --> 00:01:04,016
So let's go ahead and remove the


30
00:01:04,016 --> 00:01:07,016
E and A and insert an I in the


31
00:01:07,016 --> 00:01:09,306
middle and a D in the end.


32
00:01:10,766 --> 00:01:12,666
So that took two removals and


33
00:01:12,666 --> 00:01:15,036
two insertions to transform a


34
00:01:15,216 --> 00:01:16,226
bear to the bird.


35
00:01:18,556 --> 00:01:20,386
You can do this very easily with


36
00:01:20,436 --> 00:01:22,796
Ordered Collection Diffing API.


37
00:01:24,116 --> 00:01:26,346
The diff here is a collection


38
00:01:26,346 --> 00:01:27,066
difference type.


39
00:01:27,866 --> 00:01:29,626
It's a collection of insertions


40
00:01:29,626 --> 00:01:31,826
and removals that describe the


41
00:01:31,826 --> 00:01:34,006
element that is inserted or


42
00:01:34,006 --> 00:01:36,346
removed and the offset of the


43
00:01:36,346 --> 00:01:37,766
element in the collection.


44
00:01:38,726 --> 00:01:40,636
Here it contains two insertions


45
00:01:40,636 --> 00:01:44,876
and two removals as we just saw.


46
00:01:45,106 --> 00:01:46,456
We can apply the diff on the


47
00:01:46,456 --> 00:01:48,546
bear to get a new bird string.


48
00:01:49,486 --> 00:01:51,376
This is a very powerful API and


49
00:01:51,646 --> 00:01:53,926
not only works with strings, but


50
00:01:53,926 --> 00:01:55,076
any collection types.


51
00:01:55,256 --> 00:01:56,536
That was Ordered Collection


52
00:01:56,536 --> 00:01:56,946
Diffing.


53
00:01:57,446 --> 00:01:58,986
Now, let's talk about data and


54
00:01:58,986 --> 00:01:59,816
contiguity.


55
00:02:01,156 --> 00:02:02,306
Your app may be building


56
00:02:02,306 --> 00:02:04,386
pictures or other types of files


57
00:02:04,416 --> 00:02:05,096
from the disk.


58
00:02:05,886 --> 00:02:07,966
Usually, these forms of data can


59
00:02:07,966 --> 00:02:10,295
easily be represented by a


60
00:02:10,295 --> 00:02:12,326
contiguous area in memory.


61
00:02:13,676 --> 00:02:15,986
On the other hand, your app may


62
00:02:15,986 --> 00:02:17,556
be downloading data from the


63
00:02:17,556 --> 00:02:19,796
internet using dispatch data or


64
00:02:19,796 --> 00:02:21,426
URL session, for example.


65
00:02:22,316 --> 00:02:24,286
This produces bytes that arrive


66
00:02:24,316 --> 00:02:26,026
in multiple chunks in different


67
00:02:26,026 --> 00:02:27,836
time, and occupy these


68
00:02:27,836 --> 00:02:29,766
contiguous areas in memory.


69
00:02:31,896 --> 00:02:34,666
Prior to Swift 5, struct Data


70
00:02:34,666 --> 00:02:36,726
represented both contiguous and


71
00:02:36,726 --> 00:02:37,996
discontiguous regions.


72
00:02:38,806 --> 00:02:40,776
This unified interface was very


73
00:02:40,776 --> 00:02:43,516
simple to use, but it also meant


74
00:02:43,516 --> 00:02:44,986
that to provide whole buffer


75
00:02:44,986 --> 00:02:46,656
access to the underlying raw


76
00:02:46,656 --> 00:02:48,846
bytes, we needed to copy the


77
00:02:48,846 --> 00:02:52,956
regions into a contiguous area.


78
00:02:53,116 --> 00:02:54,616
This meant that the performance


79
00:02:54,706 --> 00:02:56,496
may sometimes be unpredictable.


80
00:02:57,276 --> 00:02:58,776
In fact, we have look at


81
00:02:58,966 --> 00:03:02,206
real-world usage of data, and


82
00:03:02,206 --> 00:03:04,226
every discontiguous data gets


83
00:03:04,226 --> 00:03:04,666
flattened [assumed spelling]


84
00:03:04,776 --> 00:03:06,476
sometime during its lifecycle.


85
00:03:08,716 --> 00:03:11,816
So from Swift 5 and onwards, we


86
00:03:11,816 --> 00:03:14,056
promise that struct Data is a


87
00:03:14,056 --> 00:03:15,326
contiguous buffer type.


88
00:03:16,256 --> 00:03:17,886
And to present this promise in


89
00:03:17,886 --> 00:03:20,086
syntax, we introduce the


90
00:03:20,086 --> 00:03:21,746
ContiguousBytes protocol.


91
00:03:23,176 --> 00:03:25,026
Conforming to this protocol in


92
00:03:25,026 --> 00:03:26,606
the case that the type offers


93
00:03:26,666 --> 00:03:28,566
direct access to the underlying


94
00:03:28,566 --> 00:03:30,476
raw bytes in a contiguous


95
00:03:30,476 --> 00:03:30,936
manner.


96
00:03:31,546 --> 00:03:33,256
So you don't need to worry about


97
00:03:33,256 --> 00:03:34,646
accidentally flattening your


98
00:03:34,646 --> 00:03:35,546
data anymore.


99
00:03:36,166 --> 00:03:39,036
Now, how are we going to work


100
00:03:39,036 --> 00:03:40,616
with other buffer types that


101
00:03:40,616 --> 00:03:42,736
don't promise contiguity?


102
00:03:44,426 --> 00:03:46,536
We introduce two new protocols


103
00:03:46,756 --> 00:03:48,236
by taking struct Data's


104
00:03:48,236 --> 00:03:50,726
interface that's independent to


105
00:03:50,726 --> 00:03:53,146
contiguity and generalize it


106
00:03:53,146 --> 00:03:55,656
across various buffer types, and


107
00:03:55,656 --> 00:03:57,806
we arrive at DataProtocol.


108
00:03:58,686 --> 00:04:00,246
That is a collection of bytes


109
00:04:00,916 --> 00:04:03,676
and MutableDataProtocol to offer


110
00:04:03,676 --> 00:04:04,976
additional mutability


111
00:04:04,976 --> 00:04:05,766
guarantees.


112
00:04:08,556 --> 00:04:10,076
Buffer types offered by


113
00:04:10,076 --> 00:04:12,116
Foundation the Swift Standard


114
00:04:12,116 --> 00:04:13,786
Library and the dispatch


115
00:04:13,826 --> 00:04:15,926
framework have adopted these


116
00:04:15,926 --> 00:04:16,536
protocols.


117
00:04:17,505 --> 00:04:18,625
You probably have worked with


118
00:04:18,625 --> 00:04:20,305
some of the types, including


119
00:04:20,416 --> 00:04:23,156
Data, array of UInt8 and


120
00:04:23,156 --> 00:04:24,056
DispatchData.


121
00:04:25,466 --> 00:04:26,986
We encourage you to adopt them


122
00:04:26,986 --> 00:04:29,226
on your types or methods too as


123
00:04:29,226 --> 00:04:30,466
a generic constraint.


124
00:04:33,676 --> 00:04:34,876
Now, let's talk about


125
00:04:34,876 --> 00:04:35,516
compression.


126
00:04:36,716 --> 00:04:38,306
Oftentimes, you want to make


127
00:04:38,306 --> 00:04:40,216
your data as small as possible.


128
00:04:41,026 --> 00:04:41,796
It could be that your


129
00:04:41,796 --> 00:04:43,096
application is running on


130
00:04:43,096 --> 00:04:45,406
devices with limited disk space


131
00:04:46,026 --> 00:04:47,226
or you need to transmit


132
00:04:47,226 --> 00:04:48,846
resources from or to the


133
00:04:48,846 --> 00:04:49,436
internet.


134
00:04:51,316 --> 00:04:52,906
This is a very common task.


135
00:04:53,456 --> 00:04:55,126
So we added the compression API


136
00:04:55,126 --> 00:04:56,456
to data in Swift.


137
00:04:57,096 --> 00:04:58,776
It is now as simple.


138
00:04:59,576 --> 00:04:59,936
Thank you.


139
00:05:00,516 --> 00:05:02,676
[ Applause ]


140
00:05:03,176 --> 00:05:04,856
It's as simple as this one line


141
00:05:05,066 --> 00:05:06,046
of code.


142
00:05:07,216 --> 00:05:09,196
The API also supports four


143
00:05:09,196 --> 00:05:11,936
compression algorithms to offer


144
00:05:11,936 --> 00:05:13,816
you different balances between


145
00:05:13,816 --> 00:05:16,116
speed, memory and compression


146
00:05:16,116 --> 00:05:16,676
ratio.


147
00:05:17,476 --> 00:05:19,296
I believe you can find one that


148
00:05:19,356 --> 00:05:20,486
best suits your needs.


149
00:05:23,036 --> 00:05:24,806
Now, let's move on to units.


150
00:05:25,756 --> 00:05:27,856
Foundation already supports 21


151
00:05:27,856 --> 00:05:29,496
classes to represent common


152
00:05:29,496 --> 00:05:31,746
physical units such as length,


153
00:05:32,086 --> 00:05:33,726
speed and duration.


154
00:05:35,106 --> 00:05:36,756
We extended the unit duration


155
00:05:36,756 --> 00:05:39,116
class with subsecond precision


156
00:05:39,116 --> 00:05:41,316
units up until picoseconds.


157
00:05:41,926 --> 00:05:43,626
That is a trillionth of a


158
00:05:43,686 --> 00:05:44,136
second.


159
00:05:45,446 --> 00:05:47,426
The unit frequency class uses


160
00:05:47,426 --> 00:05:49,506
hertz as a base unit currently,


161
00:05:50,086 --> 00:05:51,516
and this year it gained


162
00:05:51,626 --> 00:05:52,656
framesPerSecond.


163
00:05:53,686 --> 00:05:55,316
It's functionally equivalent to


164
00:05:55,386 --> 00:05:57,686
hertz but its cemented meaning


165
00:05:57,686 --> 00:05:59,346
makes it ideal to represent


166
00:05:59,416 --> 00:06:02,046
on-device FPS measurement.


167
00:06:04,076 --> 00:06:06,326
The UnitInformationStorage class


168
00:06:06,326 --> 00:06:06,666
is new.


169
00:06:06,666 --> 00:06:09,496
It can be used to represent the


170
00:06:09,496 --> 00:06:11,466
amount of digital information.


171
00:06:12,616 --> 00:06:14,876
The basic units are bits, bytes


172
00:06:15,096 --> 00:06:15,666
and nibbles.


173
00:06:16,526 --> 00:06:19,006
And the commonly used SI prefix


174
00:06:19,176 --> 00:06:21,596
and base-2 prefix units from


175
00:06:21,596 --> 00:06:24,716
kilo and kibi up until yotta and


176
00:06:24,716 --> 00:06:26,276
yobi are also supported.


177
00:06:27,746 --> 00:06:29,056
You can use it along with


178
00:06:29,706 --> 00:06:31,626
MeasurementFormatter to format,


179
00:06:31,886 --> 00:06:34,496
say, data size, or you can use


180
00:06:34,496 --> 00:06:36,416
it with ByteCountFormatter if


181
00:06:36,416 --> 00:06:37,986
you want more exact control.


182
00:06:38,526 --> 00:06:41,746
And we have more formatters for


183
00:06:41,746 --> 00:06:42,076
you.


184
00:06:42,626 --> 00:06:44,686
You probably have seen strings


185
00:06:44,686 --> 00:06:46,256
like these somewhere every day.


186
00:06:47,066 --> 00:06:48,706
Like, the status of a message


187
00:06:48,706 --> 00:06:51,456
you sent is read 1 hour ago, or


188
00:06:51,456 --> 00:06:53,936
there is a payment due tomorrow.


189
00:06:54,516 --> 00:06:56,836
That is a date or time displayed


190
00:06:56,836 --> 00:06:58,216
as a relative point to the


191
00:06:58,216 --> 00:06:58,706
present.


192
00:07:00,016 --> 00:07:02,516
It's not very trivial to make it


193
00:07:02,516 --> 00:07:05,356
correct for all locales, so we


194
00:07:05,426 --> 00:07:05,796
added the


195
00:07:05,796 --> 00:07:07,576
RelativeDateTimeFormatter to


196
00:07:07,576 --> 00:07:08,306
help you with this.


197
00:07:09,516 --> 00:07:14,196
[ Cheering ]


198
00:07:14,696 --> 00:07:14,916
Thank you.


199
00:07:15,826 --> 00:07:17,396
And just like other formatters,


200
00:07:17,726 --> 00:07:19,426
the return string is locale


201
00:07:19,496 --> 00:07:21,336
friendly, and there are multiple


202
00:07:21,336 --> 00:07:22,616
styles you can use.


203
00:07:24,576 --> 00:07:26,186
Another thing you probably want


204
00:07:26,186 --> 00:07:29,216
to format is a list, and we also


205
00:07:29,376 --> 00:07:31,026
added ListFormatter to make this


206
00:07:31,026 --> 00:07:32,366
super easy for you [laughs].


207
00:07:33,516 --> 00:07:36,896
[ Applause ]


208
00:07:37,396 --> 00:07:39,396
It formats a list into a string


209
00:07:39,426 --> 00:07:41,326
that uses the correct separator


210
00:07:41,326 --> 00:07:42,846
and conjunctions for all


211
00:07:42,846 --> 00:07:43,286
locales.


212
00:07:44,816 --> 00:07:46,256
Here is another example.


213
00:07:46,936 --> 00:07:48,066
Say there is an event that's


214
00:07:48,106 --> 00:07:49,216
going to occur at three


215
00:07:49,666 --> 00:07:50,956
different dates.


216
00:07:51,636 --> 00:07:53,286
So you probably want to show a


217
00:07:53,286 --> 00:07:56,336
string like the top or the one


218
00:07:56,336 --> 00:07:57,976
on the bottom that you spell out


219
00:07:57,976 --> 00:07:59,616
the name of the month on your


220
00:07:59,616 --> 00:08:01,086
Event page.


221
00:08:02,286 --> 00:08:03,576
And, of course, you want to


222
00:08:03,576 --> 00:08:05,136
display those using the correct


223
00:08:05,136 --> 00:08:06,876
format and localized name for


224
00:08:06,876 --> 00:08:07,836
different locales.


225
00:08:08,676 --> 00:08:10,436
This is important, because, for


226
00:08:10,436 --> 00:08:13,206
example, in Europe, they usually


227
00:08:13,206 --> 00:08:14,766
counting before month in


228
00:08:14,766 --> 00:08:15,246
writing.


229
00:08:16,656 --> 00:08:18,496
You can also do this very easily


230
00:08:18,496 --> 00:08:19,586
with ListFormatter.


231
00:08:21,776 --> 00:08:23,956
It comes with a property called


232
00:08:23,956 --> 00:08:26,286
itemFormatter whose role is to


233
00:08:26,286 --> 00:08:28,036
format each item in a list.


234
00:08:28,916 --> 00:08:30,776
In this case, we want to format


235
00:08:30,776 --> 00:08:33,395
a list of dates, and we know


236
00:08:33,395 --> 00:08:35,025
that Foundation supports date


237
00:08:35,025 --> 00:08:36,905
formatting using DateFormatter.


238
00:08:37,756 --> 00:08:39,626
So let's use it as our date


239
00:08:39,626 --> 00:08:40,566
itemFormatter.


240
00:08:41,946 --> 00:08:43,216
And this is all we need.


241
00:08:43,836 --> 00:08:44,356
We're all set.


242
00:08:45,826 --> 00:08:47,086
This gives your localized


243
00:08:47,086 --> 00:08:49,106
strings as the examples on the


244
00:08:49,106 --> 00:08:49,636
bottom.


245
00:08:52,836 --> 00:08:54,636
You can easily change the date


246
00:08:54,636 --> 00:08:56,446
style by setting the property on


247
00:08:56,446 --> 00:08:57,206
DateFormatter.


248
00:08:58,226 --> 00:08:59,776
ListFormatter works with all


249
00:08:59,776 --> 00:09:01,676
formatters, so please take


250
00:09:01,676 --> 00:09:04,226
advantage of it and make string


251
00:09:04,226 --> 00:09:05,866
localized greatly in your


252
00:09:05,866 --> 00:09:06,756
application.


253
00:09:09,836 --> 00:09:11,446
So that was Formatter.


254
00:09:12,186 --> 00:09:13,666
Now let's move on to Operation


255
00:09:13,666 --> 00:09:14,056
Queue.


256
00:09:15,456 --> 00:09:17,376
Imagine in your app there are a


257
00:09:17,376 --> 00:09:18,836
bunch of background tasks


258
00:09:18,836 --> 00:09:19,986
running concurrently.


259
00:09:20,536 --> 00:09:23,806
At this moment, the user wants


260
00:09:23,806 --> 00:09:25,136
to save the state of this


261
00:09:25,136 --> 00:09:27,416
running app, so how would you do


262
00:09:27,416 --> 00:09:27,856
this?


263
00:09:28,956 --> 00:09:30,466
Well, you want to make sure all


264
00:09:30,466 --> 00:09:32,066
the running tasks are finished


265
00:09:32,176 --> 00:09:33,356
before you can save.


266
00:09:34,346 --> 00:09:36,346
So it might be tempting to do


267
00:09:36,346 --> 00:09:37,926
something like this.


268
00:09:39,156 --> 00:09:41,166
That is you check the number of


269
00:09:41,166 --> 00:09:42,746
running operations in the


270
00:09:42,746 --> 00:09:45,056
concurrent queue, and if there


271
00:09:45,056 --> 00:09:46,956
isn't any, it must mean that


272
00:09:46,956 --> 00:09:48,406
everything we scheduled must


273
00:09:48,406 --> 00:09:49,016
have finished.


274
00:09:49,616 --> 00:09:51,086
So we're ready to save, right?


275
00:09:52,256 --> 00:09:53,786
Nope, this is wrong.


276
00:09:54,176 --> 00:09:55,976
Please don't do this.


277
00:09:58,226 --> 00:09:59,976
It's possible that some other


278
00:09:59,976 --> 00:10:01,746
tasks are being scheduled at the


279
00:10:01,746 --> 00:10:03,376
same time in all their threads,


280
00:10:03,936 --> 00:10:05,606
like right after the check


281
00:10:05,606 --> 00:10:07,506
passes and before the save


282
00:10:07,506 --> 00:10:08,096
happens.


283
00:10:08,726 --> 00:10:11,726
What you actually want here is a


284
00:10:11,726 --> 00:10:13,516
barrier to guard the safe


285
00:10:13,516 --> 00:10:15,726
operation and to make sure that


286
00:10:15,726 --> 00:10:18,196
no other tasks can run while the


287
00:10:18,196 --> 00:10:19,376
app is being saved.


288
00:10:20,606 --> 00:10:23,936
Something like this.


289
00:10:24,156 --> 00:10:26,006
So we're very excited to let you


290
00:10:26,006 --> 00:10:27,656
know that Operation Queue now


291
00:10:27,656 --> 00:10:28,716
supports barrier.


292
00:10:29,566 --> 00:10:31,026
You should add the BarrierBlock


293
00:10:31,466 --> 00:10:33,096
and put your saving operation


294
00:10:33,096 --> 00:10:34,216
inside the barrier.


295
00:10:35,086 --> 00:10:36,726
This guarantees that the save


296
00:10:36,726 --> 00:10:38,846
operation is the only task


297
00:10:38,976 --> 00:10:40,306
running at that particular


298
00:10:40,306 --> 00:10:42,846
period of time, and it only


299
00:10:42,846 --> 00:10:44,566
executes when everything


300
00:10:44,566 --> 00:10:46,086
previously scheduled is finished


301
00:10:46,756 --> 00:10:48,866
and that no other new jobs will


302
00:10:48,866 --> 00:10:51,406
run before it's finished.


303
00:10:52,516 --> 00:10:57,496
[ Applause ]


304
00:10:57,996 --> 00:10:59,346
Another update we have for


305
00:10:59,346 --> 00:11:00,776
Operation Queue is progress


306
00:11:00,776 --> 00:11:01,416
reporting.


307
00:11:02,366 --> 00:11:03,816
Sometimes you may want to track


308
00:11:03,866 --> 00:11:05,356
the overall progress of your


309
00:11:05,356 --> 00:11:07,336
concurrent jobs and maybe


310
00:11:07,336 --> 00:11:09,436
display a progress bar in your


311
00:11:09,866 --> 00:11:09,956
UI.


312
00:11:10,356 --> 00:11:12,186
You can now do this by setting


313
00:11:12,186 --> 00:11:14,176
the totalUnitCount on the


314
00:11:14,176 --> 00:11:15,986
progress property of the


315
00:11:15,986 --> 00:11:16,986
Operation Queue.


316
00:11:18,376 --> 00:11:20,166
Each operation you added to the


317
00:11:20,166 --> 00:11:22,126
Operation Queue counterbuilds


318
00:11:22,126 --> 00:11:23,036
[assumed spelling] one unit of


319
00:11:23,036 --> 00:11:24,706
completion to the overall


320
00:11:24,706 --> 00:11:26,566
progress once operation is


321
00:11:26,596 --> 00:11:26,976
finished.


322
00:11:32,626 --> 00:11:34,036
Next up. Filesystem.


323
00:11:35,116 --> 00:11:37,546
iOS now supports USB and SMB


324
00:11:37,546 --> 00:11:39,386
volumes, which is a network


325
00:11:39,386 --> 00:11:40,196
filesystem.


326
00:11:41,126 --> 00:11:42,426
This means that you should be


327
00:11:42,426 --> 00:11:44,086
prepared to handle files that


328
00:11:44,086 --> 00:11:45,866
may exist on other volumes.


329
00:11:46,956 --> 00:11:48,016
So make sure you use


330
00:11:48,106 --> 00:11:48,956
FileManager's


331
00:11:48,956 --> 00:11:51,306
itemReplacementDirectory when


332
00:11:51,306 --> 00:11:53,016
choosing locations to write new


333
00:11:53,016 --> 00:11:55,166
file contents to when doing an


334
00:11:55,166 --> 00:11:57,916
Atomic Safe-Save operation.


335
00:11:59,336 --> 00:12:01,766
Next, be prepared that volumes


336
00:12:01,766 --> 00:12:03,786
may disappear completely if the


337
00:12:03,786 --> 00:12:06,306
user pulls out the USB drive or


338
00:12:06,306 --> 00:12:08,186
you lose network connectivity to


339
00:12:08,186 --> 00:12:09,306
an SMB server.


340
00:12:10,626 --> 00:12:11,946
So if you choose the memory


341
00:12:11,946 --> 00:12:13,536
mapped files when reading data


342
00:12:13,536 --> 00:12:15,946
objects, make sure you use


343
00:12:16,316 --> 00:12:18,136
mappedIfSafe as your reading


344
00:12:18,136 --> 00:12:18,666
option.


345
00:12:19,696 --> 00:12:21,306
This will allow the system to


346
00:12:21,306 --> 00:12:23,446
map the file into virtual memory


347
00:12:23,446 --> 00:12:26,286
but only if the file is located


348
00:12:26,396 --> 00:12:28,016
on nonremovable volumes.


349
00:12:28,806 --> 00:12:31,176
Accessing files from USB or SMB


350
00:12:31,176 --> 00:12:33,206
drive may be tangibly slower


351
00:12:33,206 --> 00:12:34,746
than when you access files on


352
00:12:34,746 --> 00:12:35,636
the internal drive.


353
00:12:36,886 --> 00:12:38,016
So if you're not doing this


354
00:12:38,016 --> 00:12:40,116
already, please defer file


355
00:12:40,116 --> 00:12:42,296
system access to non-main thread


356
00:12:42,696 --> 00:12:44,366
to make sure your app remains


357
00:12:44,366 --> 00:12:45,016
responsive.


358
00:12:45,596 --> 00:12:48,426
You may need to test file system


359
00:12:48,426 --> 00:12:50,136
capabilities before you use


360
00:12:50,136 --> 00:12:50,446
them.


361
00:12:51,376 --> 00:12:53,976
For instance, the APFS features


362
00:12:53,976 --> 00:12:55,536
that you're familiar with like


363
00:12:55,606 --> 00:12:58,536
cloning may not be available


364
00:12:58,536 --> 00:13:00,486
when you access external volumes


365
00:13:00,586 --> 00:13:02,386
via USB or SMB.


366
00:13:03,786 --> 00:13:05,006
You can test for these


367
00:13:05,146 --> 00:13:06,986
capabilities in events with


368
00:13:07,036 --> 00:13:10,156
various URL resource keys, or


369
00:13:10,156 --> 00:13:11,846
you can make sure you're


370
00:13:11,846 --> 00:13:13,976
prepared to handle and receive


371
00:13:13,976 --> 00:13:14,436
errors.


372
00:13:15,706 --> 00:13:17,286
You can find more information


373
00:13:17,286 --> 00:13:19,756
about this in the What's New in


374
00:13:19,756 --> 00:13:21,816
File Management and QuickLook


375
00:13:22,426 --> 00:13:22,526
talk.


376
00:13:25,676 --> 00:13:27,016
Next up. Swift update.


377
00:13:28,716 --> 00:13:30,806
Some Swift APIs were designed


378
00:13:30,806 --> 00:13:32,676
originally with Objective-C in


379
00:13:32,676 --> 00:13:35,936
mind, and we continued to


380
00:13:35,936 --> 00:13:37,536
improve them over the years.


381
00:13:38,456 --> 00:13:39,546
First is scanner.


382
00:13:40,146 --> 00:13:43,536
This is the API in Swift 4.


383
00:13:44,466 --> 00:13:47,716
It used to use NSString and


384
00:13:47,716 --> 00:13:49,266
return objects by reference.


385
00:13:51,266 --> 00:13:54,596
In Swift 5.1, we simplify this


386
00:13:54,596 --> 00:13:56,336
interface to this one line of


387
00:13:56,466 --> 00:13:56,716
code.


388
00:13:58,636 --> 00:14:01,466
What's more, the new API uses


389
00:14:01,616 --> 00:14:04,436
the string type of Swift so that


390
00:14:04,516 --> 00:14:06,086
strings are collections of


391
00:14:06,176 --> 00:14:08,396
graphing instead of code points.


392
00:14:09,356 --> 00:14:11,126
This means that you can now work


393
00:14:11,126 --> 00:14:12,906
on complex sequences with the


394
00:14:12,906 --> 00:14:15,556
new scanner API perfectly, such


395
00:14:15,556 --> 00:14:16,426
as emojis.


396
00:14:19,656 --> 00:14:21,116
Another improvement is


397
00:14:21,116 --> 00:14:21,916
FileHandle.


398
00:14:22,996 --> 00:14:24,756
It used to throw exceptions when


399
00:14:24,756 --> 00:14:27,176
errors occur on the underlying


400
00:14:27,216 --> 00:14:28,136
file descriptor.


401
00:14:29,256 --> 00:14:30,736
This year, we introduced


402
00:14:30,736 --> 00:14:33,526
error-based API, so you can now


403
00:14:33,526 --> 00:14:35,626
handle the error right away at


404
00:14:35,626 --> 00:14:36,256
call sites.


405
00:14:36,256 --> 00:14:39,466
The API for writing data now


406
00:14:39,536 --> 00:14:41,526
also works with data protocol.


407
00:14:42,306 --> 00:14:44,116
It's also optimized to work with


408
00:14:44,256 --> 00:14:46,206
noncontiguous data.


409
00:14:48,476 --> 00:14:49,946
So these were the highlights of


410
00:14:49,946 --> 00:14:50,646
the new APIs.


411
00:14:51,706 --> 00:14:53,306
We encourage you to grab the new


412
00:14:53,306 --> 00:14:55,296
Xcode and try these exciting


413
00:14:55,336 --> 00:14:56,026
features out.


414
00:14:57,266 --> 00:14:58,916
When writing new methods to work


415
00:14:58,916 --> 00:15:01,486
with binary data, consider


416
00:15:01,486 --> 00:15:03,016
making them bound on the data


417
00:15:03,016 --> 00:15:04,886
protocol type instead of


418
00:15:04,886 --> 00:15:06,776
requiring particular collection,


419
00:15:07,236 --> 00:15:09,096
like array of UInt8.


420
00:15:10,466 --> 00:15:12,386
If you're displaying dates or


421
00:15:12,386 --> 00:15:15,146
lists in your UI with strings,


422
00:15:16,506 --> 00:15:19,586
use RelativeDateTimeFormatter or


423
00:15:19,586 --> 00:15:21,526
a ListFormatter to makes sure


424
00:15:21,526 --> 00:15:23,356
the string work in every locale.


425
00:15:23,956 --> 00:15:26,956
We urge you to use Operation


426
00:15:26,956 --> 00:15:29,316
Queue's barrier to avoid race


427
00:15:29,316 --> 00:15:30,056
condition.


428
00:15:31,106 --> 00:15:32,666
And if you're using some sort of


429
00:15:32,776 --> 00:15:34,436
progress-reporting mechanism,


430
00:15:35,146 --> 00:15:36,896
switch to use the one provided


431
00:15:36,896 --> 00:15:37,996
by Operation Queue.


432
00:15:38,776 --> 00:15:39,506
Thank you.


433
00:15:40,516 --> 00:15:45,500
[ Applause ]

