1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:10,516 --> 00:00:15,556
[ Applause ]


3
00:00:16,056 --> 00:00:16,476
>> Good morning.


4
00:00:16,936 --> 00:00:18,146
My name is Julio Gonzalez.


5
00:00:18,436 --> 00:00:19,766
I manage the Type Engineering


6
00:00:19,826 --> 00:00:21,206
Team and it's great to be here


7
00:00:21,206 --> 00:00:22,606
with you today to share with you


8
00:00:22,886 --> 00:00:24,326
all the new advances that we


9
00:00:24,326 --> 00:00:26,896
have for text and fonts in iOS.


10
00:00:28,346 --> 00:00:30,326
We have a full agenda today.


11
00:00:31,136 --> 00:00:33,166
I'll start by showing you some


12
00:00:33,166 --> 00:00:34,736
access to some new system fonts


13
00:00:34,906 --> 00:00:36,456
for your apps.


14
00:00:37,216 --> 00:00:39,126
I will then continue by showing


15
00:00:39,126 --> 00:00:40,956
you what it takes to build an


16
00:00:40,956 --> 00:00:42,346
app that can make fonts


17
00:00:42,346 --> 00:00:44,316
available systemwide as well as


18
00:00:44,356 --> 00:00:46,266
how to make an app access those


19
00:00:46,266 --> 00:00:47,136
very same fonts.


20
00:00:48,466 --> 00:00:49,696
Then, we'll talk about some new


21
00:00:49,696 --> 00:00:51,316
mechanisms that we have for apps


22
00:00:51,396 --> 00:00:52,146
to select fonts.


23
00:00:53,336 --> 00:00:55,176
And we'll end up by talking


24
00:00:55,176 --> 00:00:56,576
about some text scaling


25
00:00:56,576 --> 00:00:58,936
considerations that you may have


26
00:00:59,076 --> 00:01:00,696
as you bring your iPad apps to


27
00:01:00,696 --> 00:01:01,026
the Mac.


28
00:01:02,326 --> 00:01:03,306
Let's get started.


29
00:01:04,146 --> 00:01:05,816
We'll be making available three


30
00:01:05,816 --> 00:01:07,676
new system fonts in all the new


31
00:01:07,676 --> 00:01:08,116
releases.


32
00:01:09,166 --> 00:01:10,786
The first one is a rounded


33
00:01:10,786 --> 00:01:12,616
system font which you can see


34
00:01:12,616 --> 00:01:14,886
here being used by the schedule


35
00:01:14,886 --> 00:01:16,296
label at the very top of the


36
00:01:16,296 --> 00:01:17,086
Reminders app.


37
00:01:18,276 --> 00:01:20,296
There is also a serif system


38
00:01:20,296 --> 00:01:21,466
font that we're making available


39
00:01:22,026 --> 00:01:23,666
which you see here being used in


40
00:01:23,666 --> 00:01:25,766
multiple places in the Books


41
00:01:25,766 --> 00:01:26,386
application.


42
00:01:27,336 --> 00:01:29,216
Finally, we're making available


43
00:01:29,306 --> 00:01:31,036
the monospaced system font which


44
00:01:31,036 --> 00:01:32,966
you may have seen before used in


45
00:01:32,966 --> 00:01:33,686
Swift Playgrounds.


46
00:01:34,556 --> 00:01:36,176
I encourage you to consult the


47
00:01:36,176 --> 00:01:38,176
Human Interface Guidelines to


48
00:01:38,176 --> 00:01:39,786
see what are the best uses of


49
00:01:39,786 --> 00:01:41,386
these system fonts in your


50
00:01:41,386 --> 00:01:42,336
application UIs.


51
00:01:43,876 --> 00:01:45,376
You can get access to the system


52
00:01:45,376 --> 00:01:47,436
fonts by new APIs in


53
00:01:47,436 --> 00:01:48,506
UIFontDescriptor.


54
00:01:49,386 --> 00:01:50,576
We've defined four new


55
00:01:50,576 --> 00:01:51,076
constants.


56
00:01:51,796 --> 00:01:53,536
The first one, the default is


57
00:01:53,596 --> 00:01:55,086
the standard system sans serif


58
00:01:55,086 --> 00:01:57,346
system font that you've all used


59
00:01:57,346 --> 00:01:58,046
throughout the years.


60
00:01:58,476 --> 00:01:59,596
And then, we've defined a


61
00:01:59,646 --> 00:02:01,246
constant for each of the new


62
00:02:01,466 --> 00:02:02,676
system fonts that we're making


63
00:02:02,676 --> 00:02:03,056
available.


64
00:02:04,226 --> 00:02:05,646
You can use these constants with


65
00:02:05,646 --> 00:02:07,146
a new method called withDesign


66
00:02:07,546 --> 00:02:09,816
whose purpose is to transform a


67
00:02:09,816 --> 00:02:11,616
font descriptor from one design


68
00:02:11,656 --> 00:02:12,086
to another.


69
00:02:12,726 --> 00:02:14,416
It's fairly simple to use.


70
00:02:14,736 --> 00:02:15,386
You start with a font


71
00:02:15,386 --> 00:02:15,906
descriptor.


72
00:02:15,906 --> 00:02:16,976
In this case, we're getting a


73
00:02:17,036 --> 00:02:19,556
font descriptor from a bold


74
00:02:19,556 --> 00:02:20,566
system font that we've


75
00:02:20,566 --> 00:02:21,496
instantiated.


76
00:02:22,166 --> 00:02:24,046
And then, what we want to do is


77
00:02:24,046 --> 00:02:25,796
actually obtain a rounded system


78
00:02:25,796 --> 00:02:26,046
font.


79
00:02:26,286 --> 00:02:28,826
So, we make the withDesign call


80
00:02:29,086 --> 00:02:30,706
with the rounded constant.


81
00:02:31,136 --> 00:02:32,796
And if that's successful, we're


82
00:02:32,796 --> 00:02:34,476
able to instantiate our rounded


83
00:02:34,556 --> 00:02:35,386
bold system font.


84
00:02:35,946 --> 00:02:37,946
Notice we instantiated the


85
00:02:38,006 --> 00:02:39,876
system font using a high-level


86
00:02:39,876 --> 00:02:40,046
API.


87
00:02:40,366 --> 00:02:41,716
We did not instantiate the


88
00:02:41,756 --> 00:02:43,526
system font by using its name


89
00:02:44,166 --> 00:02:45,246
which leads me to the next


90
00:02:45,296 --> 00:02:45,646
topic.


91
00:02:46,886 --> 00:02:48,636
We've noticed that many apps


92
00:02:49,286 --> 00:02:51,406
still today instantiate system


93
00:02:51,406 --> 00:02:52,206
fonts by name.


94
00:02:52,946 --> 00:02:53,816
This is something that in the


95
00:02:53,816 --> 00:02:55,526
past we've strongly discouraged


96
00:02:55,526 --> 00:02:56,356
apps to do.


97
00:02:56,906 --> 00:02:58,526
So, it's starting with the new


98
00:02:58,526 --> 00:03:00,506
releases, any such font


99
00:03:00,506 --> 00:03:01,876
instantiation will fail.


100
00:03:02,306 --> 00:03:03,886
You need to use one of the


101
00:03:03,886 --> 00:03:06,206
high-level system calls to


102
00:03:06,396 --> 00:03:07,756
instantiate such fonts.


103
00:03:08,436 --> 00:03:09,106
You know that you're


104
00:03:09,106 --> 00:03:10,576
instantiating a system font by


105
00:03:10,576 --> 00:03:13,336
name because if you look at the


106
00:03:13,336 --> 00:03:14,726
name that you're passing with if


107
00:03:14,726 --> 00:03:16,166
it starts with a dot, you're


108
00:03:16,166 --> 00:03:19,716
using a, an Apple private name.


109
00:03:20,526 --> 00:03:21,876
Now, there are many good reasons


110
00:03:21,876 --> 00:03:23,206
to instantiate fonts by name.


111
00:03:23,826 --> 00:03:25,206
That's how you get access to


112
00:03:25,326 --> 00:03:26,826
custom system fonts in your apps


113
00:03:27,316 --> 00:03:29,226
as well as if you are parsing a


114
00:03:29,226 --> 00:03:30,366
document, that's how you would


115
00:03:30,986 --> 00:03:32,036
instantiate a font that the


116
00:03:32,036 --> 00:03:32,706
document needs.


117
00:03:33,496 --> 00:03:34,916
Now, we've also noticed that


118
00:03:34,916 --> 00:03:37,496
many apps are not handling


119
00:03:37,546 --> 00:03:39,266
properly font instantiation by


120
00:03:39,266 --> 00:03:39,536
name.


121
00:03:40,916 --> 00:03:41,946
Sometimes, they crash.


122
00:03:41,946 --> 00:03:43,226
And the reason is, is because


123
00:03:43,226 --> 00:03:44,856
they don't actually look at the


124
00:03:44,856 --> 00:03:46,896
return of the instantiation.


125
00:03:46,896 --> 00:03:47,986
They assume that it's always


126
00:03:47,986 --> 00:03:48,596
going to succeed.


127
00:03:49,406 --> 00:03:51,496
As we change fonts in the OS for


128
00:03:51,496 --> 00:03:53,526
some of our fonts, or we remove


129
00:03:53,586 --> 00:03:55,456
fonts from the OS, those, those


130
00:03:55,456 --> 00:03:56,646
fonts are no longer present.


131
00:03:56,706 --> 00:03:58,256
So, your apps cannot assume that


132
00:03:58,256 --> 00:04:00,626
a font that isn't in one version


133
00:04:00,626 --> 00:04:01,886
of the OS will be in another.


134
00:04:02,426 --> 00:04:03,956
You need to pay attention to the


135
00:04:03,956 --> 00:04:05,816
result of the instantiation and


136
00:04:05,816 --> 00:04:07,206
take appropriate action in the


137
00:04:07,206 --> 00:04:08,706
app and substitute that with


138
00:04:08,706 --> 00:04:10,026
another font if necessary.


139
00:04:10,626 --> 00:04:13,616
With that, I'd like to switch


140
00:04:13,616 --> 00:04:15,346
subjects to something that I as


141
00:04:15,346 --> 00:04:16,896
a user and as a developer of


142
00:04:16,896 --> 00:04:17,906
fonts have been waiting for a


143
00:04:17,906 --> 00:04:18,516
long time.


144
00:04:18,875 --> 00:04:20,926
And that is the ability for apps


145
00:04:20,995 --> 00:04:22,246
to be able to install fonts


146
00:04:22,246 --> 00:04:24,866
systemwide in the OS.


147
00:04:25,156 --> 00:04:26,976
So, we call these apps Font


148
00:04:26,976 --> 00:04:27,736
Provider Apps.


149
00:04:28,256 --> 00:04:30,406
And basically, they are apps


150
00:04:30,406 --> 00:04:31,576
that you submit to the Store


151
00:04:31,876 --> 00:04:33,166
which can make fonts available


152
00:04:33,166 --> 00:04:34,466
systemwide in the OS.


153
00:04:35,036 --> 00:04:36,276
Along with those apps, we've


154
00:04:36,386 --> 00:04:39,146
created a very simple UI setting


155
00:04:39,846 --> 00:04:41,196
in which users can browse the


156
00:04:41,256 --> 00:04:43,456
fonts that applications have


157
00:04:43,456 --> 00:04:44,826
installed as well as remove


158
00:04:44,866 --> 00:04:46,006
fonts that they no longer want


159
00:04:46,006 --> 00:04:46,446
to use.


160
00:04:47,686 --> 00:04:48,856
To create one of these apps,


161
00:04:48,886 --> 00:04:50,556
there are two things that the


162
00:04:50,556 --> 00:04:51,286
app needs to do.


163
00:04:51,486 --> 00:04:52,426
First, it must obtain


164
00:04:52,426 --> 00:04:53,046
entitlement.


165
00:04:53,766 --> 00:04:55,656
And second, as the app gets


166
00:04:55,656 --> 00:04:57,386
submitted to the store, it needs


167
00:04:57,386 --> 00:04:58,956
to be submitted with all the


168
00:04:58,956 --> 00:05:00,356
fonts that the app can make


169
00:05:00,356 --> 00:05:01,436
available to the OS.


170
00:05:02,176 --> 00:05:02,946
This is important.


171
00:05:02,946 --> 00:05:05,006
The fonts need to be part of


172
00:05:05,006 --> 00:05:06,386
your bundle, or they could be


173
00:05:06,526 --> 00:05:07,946
part of an asset catalog.


174
00:05:08,686 --> 00:05:10,706
The key thing is that the OS


175
00:05:10,776 --> 00:05:12,356
will not let a font provider


176
00:05:12,356 --> 00:05:15,156
application install any


177
00:05:15,156 --> 00:05:15,966
arbitrary fonts.


178
00:05:16,616 --> 00:05:18,486
As you submit your fonts to the


179
00:05:18,486 --> 00:05:20,386
store for validation, it'll run


180
00:05:20,386 --> 00:05:21,676
through a similar validation


181
00:05:21,676 --> 00:05:23,606
that like what we do in, in


182
00:05:23,796 --> 00:05:24,656
macOS in Font Book.


183
00:05:25,096 --> 00:05:26,276
One of the things we do is we


184
00:05:26,276 --> 00:05:28,346
check for the type of the format


185
00:05:28,346 --> 00:05:29,466
of the, of the font.


186
00:05:30,116 --> 00:05:31,296
We support all the modern


187
00:05:31,296 --> 00:05:34,476
formats; ttf, otf, ttc, and all


188
00:05:34,476 --> 00:05:35,486
of its modern variants.


189
00:05:35,876 --> 00:05:38,026
What we do not support are old


190
00:05:38,026 --> 00:05:39,426
font formats such as suitcase


191
00:05:39,426 --> 00:05:41,336
fonts or postscript fonts.


192
00:05:42,676 --> 00:05:44,166
To obtain the entitlement is


193
00:05:44,356 --> 00:05:45,106
fairly easy.


194
00:05:45,376 --> 00:05:46,666
In Xcode, now there's a new


195
00:05:46,666 --> 00:05:47,906
capability called Fonts.


196
00:05:48,616 --> 00:05:49,556
Once you select it, you're


197
00:05:49,556 --> 00:05:51,766
presented with two options.


198
00:05:52,106 --> 00:05:54,466
The first option is to install


199
00:05:54,586 --> 00:05:55,046
fonts.


200
00:05:55,546 --> 00:05:56,756
And that gives the app the


201
00:05:56,756 --> 00:05:59,326
ability to make fonts available


202
00:05:59,326 --> 00:06:00,046
systemwide.


203
00:06:00,796 --> 00:06:03,126
The second option is to use


204
00:06:03,126 --> 00:06:03,866
installed fonts.


205
00:06:04,336 --> 00:06:05,946
And why do we need this option?


206
00:06:06,396 --> 00:06:08,986
Well, by default, apps do not


207
00:06:08,986 --> 00:06:11,066
get access to user installed


208
00:06:11,066 --> 00:06:11,476
fonts.


209
00:06:11,996 --> 00:06:13,496
The app needs to opt in by


210
00:06:13,496 --> 00:06:15,916
selecting this capability to be


211
00:06:15,916 --> 00:06:18,556
able to see those fonts.


212
00:06:18,986 --> 00:06:22,336
Now, clients of or users of


213
00:06:22,336 --> 00:06:23,516
these applications will have


214
00:06:23,516 --> 00:06:24,556
some expectations.


215
00:06:24,826 --> 00:06:27,096
The first one will be that the


216
00:06:27,206 --> 00:06:28,656
app should provide a meaningful


217
00:06:28,656 --> 00:06:30,386
UI where users can browse fonts,


218
00:06:31,036 --> 00:06:32,536
install, and remove fonts.


219
00:06:32,876 --> 00:06:34,106
That's necessary because, in


220
00:06:34,216 --> 00:06:35,786
iOS, we do not have an


221
00:06:35,786 --> 00:06:37,116
application that can install


222
00:06:37,186 --> 00:06:38,966
fonts in the OS like we have in


223
00:06:39,076 --> 00:06:39,346
macOS.


224
00:06:41,056 --> 00:06:42,646
Also, the application should


225
00:06:42,646 --> 00:06:44,246
respond to system font change


226
00:06:44,246 --> 00:06:45,116
notifications.


227
00:06:45,616 --> 00:06:47,006
And the reason it needs to do so


228
00:06:47,006 --> 00:06:48,886
is because the user is able to


229
00:06:48,886 --> 00:06:50,366
remove fonts in the settings app


230
00:06:50,756 --> 00:06:52,446
and the app should notice when


231
00:06:52,446 --> 00:06:54,076
that happens and update its UI.


232
00:06:55,026 --> 00:06:56,336
And finally, if you're a font


233
00:06:56,336 --> 00:06:57,756
provider application that plans


234
00:06:57,796 --> 00:06:59,546
to make a large set of fonts


235
00:06:59,546 --> 00:07:01,306
available to the, to the user, a


236
00:07:01,416 --> 00:07:02,496
large library of fonts.


237
00:07:03,186 --> 00:07:04,586
We highly recommend that you use


238
00:07:04,666 --> 00:07:06,436
On-Demand resources and package


239
00:07:06,436 --> 00:07:07,926
your fonts in an asset catalog.


240
00:07:08,716 --> 00:07:10,486
That's a far more effective way


241
00:07:10,486 --> 00:07:11,986
to deliver fonts that your users


242
00:07:11,986 --> 00:07:13,776
need because the users will only


243
00:07:13,776 --> 00:07:14,916
download the fonts that they


244
00:07:14,996 --> 00:07:15,956
actually are going to use.


245
00:07:16,236 --> 00:07:17,826
Instead of downloading a huge


246
00:07:17,876 --> 00:07:19,296
font library that may be sitting


247
00:07:19,556 --> 00:07:21,126
where they only use a handful of


248
00:07:21,126 --> 00:07:21,396
fonts.


249
00:07:22,706 --> 00:07:24,756
So, let me walk over to the demo


250
00:07:24,756 --> 00:07:26,696
machine and show you how this


251
00:07:26,696 --> 00:07:27,556
feature works.


252
00:07:28,976 --> 00:07:30,746
So, let's assume that the user


253
00:07:30,746 --> 00:07:32,406
has downloaded from the store an


254
00:07:32,406 --> 00:07:34,566
application that browses


255
00:07:34,906 --> 00:07:35,456
documents.


256
00:07:36,016 --> 00:07:37,696
And this is one such app.


257
00:07:37,836 --> 00:07:39,266
I call it the Font Consumer app.


258
00:07:40,126 --> 00:07:41,676
And here on the left, it has a


259
00:07:41,676 --> 00:07:42,916
set of documents that I can


260
00:07:42,916 --> 00:07:43,366
display.


261
00:07:43,776 --> 00:07:45,146
On the right, it just shows the


262
00:07:45,146 --> 00:07:46,256
contents of the document.


263
00:07:46,906 --> 00:07:48,016
Let's go ahead and reload this


264
00:07:48,016 --> 00:07:48,486
document.


265
00:07:48,976 --> 00:07:50,216
Notice the sheet comes up.


266
00:07:50,436 --> 00:07:51,846
This sheet is not put up by the


267
00:07:51,846 --> 00:07:52,016
app.


268
00:07:52,446 --> 00:07:53,686
It is put up by the OS.


269
00:07:54,486 --> 00:07:56,426
And it does so because it


270
00:07:56,426 --> 00:07:58,056
noticed that this app is trying


271
00:07:58,056 --> 00:08:01,106
to access three fonts that have


272
00:08:01,106 --> 00:08:02,466
not been made available to this


273
00:08:02,466 --> 00:08:03,176
application.


274
00:08:03,666 --> 00:08:06,316
So, this application is just


275
00:08:06,756 --> 00:08:08,336
substituting the fonts and


276
00:08:08,396 --> 00:08:09,496
showing the contents of this


277
00:08:09,496 --> 00:08:10,556
document in Helvetica.


278
00:08:11,376 --> 00:08:12,926
So, what's left for the user to


279
00:08:12,926 --> 00:08:15,206
do but to go ahead and try to


280
00:08:15,586 --> 00:08:17,606
get an app that can make those


281
00:08:17,606 --> 00:08:19,016
fonts available to the OS?


282
00:08:19,596 --> 00:08:20,656
So, let's assume that they've


283
00:08:20,656 --> 00:08:21,946
gone to the store and downloaded


284
00:08:21,946 --> 00:08:23,026
such an app.


285
00:08:23,026 --> 00:08:24,486
I call it the Font Provider App.


286
00:08:24,746 --> 00:08:26,006
On the left, it has a set of


287
00:08:26,056 --> 00:08:27,336
fonts that I can make available.


288
00:08:27,416 --> 00:08:28,666
On the right, it shows just a


289
00:08:28,706 --> 00:08:30,336
simple preview of the fonts.


290
00:08:30,696 --> 00:08:32,025
Let's go ahead and register all


291
00:08:32,025 --> 00:08:32,346
the fonts.


292
00:08:32,846 --> 00:08:34,186
Notice again, this sheet comes


293
00:08:34,186 --> 00:08:34,616
up.


294
00:08:34,895 --> 00:08:36,155
This is not put up by the app.


295
00:08:36,275 --> 00:08:37,376
It is put up by the OS.


296
00:08:37,456 --> 00:08:39,956
And this is necessary because we


297
00:08:39,956 --> 00:08:42,096
do not allow in the OS apps to


298
00:08:42,096 --> 00:08:44,035
install fonts silently on the


299
00:08:44,035 --> 00:08:44,816
user's behalf.


300
00:08:45,116 --> 00:08:47,226
The user must provide consent.


301
00:08:47,226 --> 00:08:48,756
And this is what this dialog


302
00:08:48,756 --> 00:08:49,026
does.


303
00:08:49,516 --> 00:08:50,636
So, let's go ahead and provide


304
00:08:50,636 --> 00:08:51,176
the consent.


305
00:08:52,736 --> 00:08:54,726
Notice the UI, the all the font


306
00:08:54,726 --> 00:08:56,416
names went from red to black.


307
00:08:56,616 --> 00:08:57,976
It's a simple way for the app


308
00:08:57,976 --> 00:08:59,036
indicate that the fonts are


309
00:08:59,036 --> 00:08:59,666
registered.


310
00:09:00,016 --> 00:09:01,036
Let's make sure that they are


311
00:09:01,036 --> 00:09:01,556
registered.


312
00:09:01,976 --> 00:09:03,456
I can now go to the Settings app


313
00:09:04,066 --> 00:09:06,506
and in General, Fonts.


314
00:09:06,656 --> 00:09:07,626
It's a new setting here.


315
00:09:08,346 --> 00:09:09,466
You have a list of fonts that


316
00:09:09,466 --> 00:09:10,936
all font provider apps have made


317
00:09:10,936 --> 00:09:11,366
available.


318
00:09:12,176 --> 00:09:13,316
So, we see the fonts that the


319
00:09:13,366 --> 00:09:14,286
Font Provider app made


320
00:09:14,286 --> 00:09:14,716
available.


321
00:09:14,916 --> 00:09:16,016
I can go browse one of the


322
00:09:16,016 --> 00:09:16,296
fonts.


323
00:09:16,746 --> 00:09:17,826
Century Schoolbook.


324
00:09:18,396 --> 00:09:19,846
And you can see here different


325
00:09:19,846 --> 00:09:20,866
previews of the fonts.


326
00:09:21,586 --> 00:09:23,166
I will just at this stage, just


327
00:09:23,826 --> 00:09:25,096
attempt to remove this font.


328
00:09:26,436 --> 00:09:27,516
I'll go ahead and do so.


329
00:09:28,026 --> 00:09:29,266
Century Schoolbook will be


330
00:09:29,266 --> 00:09:29,806
removed.


331
00:09:30,076 --> 00:09:31,866
Now, it's no longer in the list.


332
00:09:31,966 --> 00:09:34,096
Now, the expectation is that my


333
00:09:34,096 --> 00:09:36,146
app should have noticed that the


334
00:09:36,146 --> 00:09:37,056
font was removed.


335
00:09:37,686 --> 00:09:39,556
And indeed, it now shows in red


336
00:09:39,626 --> 00:09:40,596
because it listened to font


337
00:09:40,596 --> 00:09:41,816
change notifications and it


338
00:09:41,816 --> 00:09:42,556
updated the UI.


339
00:09:42,556 --> 00:09:44,746
Let's go ahead and reregister


340
00:09:45,096 --> 00:09:47,426
all the fonts.


341
00:09:47,586 --> 00:09:49,386
I'll go walk back to my Font


342
00:09:49,386 --> 00:09:52,316
Consumer app and what I see now


343
00:09:52,316 --> 00:09:53,476
is that the document no longer


344
00:09:53,476 --> 00:09:54,456
displays with Helvetica.


345
00:09:54,866 --> 00:09:56,256
It actually listened to font


346
00:09:56,256 --> 00:09:57,646
change notifications that well


347
00:09:58,046 --> 00:09:59,586
and took notice that all the


348
00:09:59,586 --> 00:10:00,666
fonts have now been made


349
00:10:00,666 --> 00:10:00,966
available.


350
00:10:01,186 --> 00:10:03,616
If I look at other documents, I


351
00:10:03,616 --> 00:10:04,846
see that they're not using


352
00:10:04,846 --> 00:10:05,346
Helvetica.


353
00:10:05,516 --> 00:10:06,766
They're using different fonts


354
00:10:06,826 --> 00:10:08,936
that the Font Provider app made


355
00:10:08,936 --> 00:10:09,376
available.


356
00:10:10,526 --> 00:10:13,036
So, now let me show you in code


357
00:10:13,516 --> 00:10:14,826
what it takes to build one of


358
00:10:14,826 --> 00:10:15,486
these apps.


359
00:10:16,806 --> 00:10:19,786
So, in CoreText, in particular


360
00:10:19,786 --> 00:10:21,696
in CTFontManager.h, we've


361
00:10:21,696 --> 00:10:23,486
introduced a brand-new set of


362
00:10:23,836 --> 00:10:23,956
APIs.


363
00:10:24,116 --> 00:10:25,296
And all these APIs are


364
00:10:25,296 --> 00:10:26,986
documented in that header file.


365
00:10:27,636 --> 00:10:29,016
There are three new ways to


366
00:10:29,016 --> 00:10:29,766
register fonts.


367
00:10:30,406 --> 00:10:32,986
One of them is by using the


368
00:10:32,986 --> 00:10:34,366
FontURLs that point to font


369
00:10:34,406 --> 00:10:34,736
files.


370
00:10:35,596 --> 00:10:36,856
The other one is you can


371
00:10:36,856 --> 00:10:38,026
register fonts by using


372
00:10:38,076 --> 00:10:38,966
FontDescriptors.


373
00:10:39,586 --> 00:10:40,986
And the final one is you can


374
00:10:40,986 --> 00:10:43,136
register fonts that are present


375
00:10:43,216 --> 00:10:44,386
in asset catalogs.


376
00:10:44,386 --> 00:10:45,346
And this is the way that you


377
00:10:45,346 --> 00:10:46,736
would use if you have a large


378
00:10:47,186 --> 00:10:48,066
library of fonts.


379
00:10:48,516 --> 00:10:49,336
You would create an asset


380
00:10:49,386 --> 00:10:50,606
catalog and you would use


381
00:10:50,606 --> 00:10:52,096
On-Demand resources to deliver


382
00:10:52,096 --> 00:10:52,936
those to your user.


383
00:10:53,516 --> 00:10:55,026
Please, note that this last API


384
00:10:55,206 --> 00:10:57,056
is not available in the seed


385
00:10:57,056 --> 00:10:58,506
that you have but it will be


386
00:10:58,506 --> 00:11:00,246
available in the next upcoming


387
00:11:00,816 --> 00:11:00,906
seed.


388
00:11:02,516 --> 00:11:04,606
There is also a new API, too,


389
00:11:04,856 --> 00:11:06,286
that Font Provider applications


390
00:11:06,326 --> 00:11:08,266
can use to get access to the


391
00:11:08,266 --> 00:11:09,116
registered fonts.


392
00:11:09,806 --> 00:11:12,446
And finally, an API that any


393
00:11:12,446 --> 00:11:14,056
application can use to see what


394
00:11:14,136 --> 00:11:15,426
fonts have been installed by the


395
00:11:15,426 --> 00:11:15,826
user.


396
00:11:16,286 --> 00:11:18,126
You gain access to this API by


397
00:11:18,126 --> 00:11:20,046
selecting that entitlement of


398
00:11:20,046 --> 00:11:21,276
use fonts that I showed you


399
00:11:21,276 --> 00:11:21,686
earlier.


400
00:11:22,686 --> 00:11:24,906
So, let's look at how these APIs


401
00:11:24,906 --> 00:11:26,436
are used in the two demo apps.


402
00:11:26,506 --> 00:11:27,346
Let's start with the Font


403
00:11:27,346 --> 00:11:27,916
Provider app.


404
00:11:28,086 --> 00:11:29,446
It's a very simple app that has


405
00:11:29,446 --> 00:11:30,356
about 20 fonts.


406
00:11:31,086 --> 00:11:33,146
And you basically register fonts


407
00:11:33,176 --> 00:11:33,766
by family.


408
00:11:33,876 --> 00:11:35,306
So, what we do is we gather all


409
00:11:35,306 --> 00:11:36,836
the font files and the URLs that


410
00:11:36,916 --> 00:11:37,466
points to them.


411
00:11:38,196 --> 00:11:40,376
And once we have them, we call


412
00:11:40,376 --> 00:11:42,746
our registration API and then,


413
00:11:42,746 --> 00:11:44,496
we update our UI as necessary.


414
00:11:45,256 --> 00:11:46,276
Let's start by looking at the


415
00:11:46,336 --> 00:11:47,496
code that updates the UI.


416
00:11:49,056 --> 00:11:50,476
You notice that both the Font


417
00:11:50,476 --> 00:11:51,586
Consumer app and the Font


418
00:11:51,586 --> 00:11:53,506
Provider app leverage font


419
00:11:53,506 --> 00:11:54,816
notifications to update the UI.


420
00:11:54,816 --> 00:11:56,676
We use the same technique when


421
00:11:56,676 --> 00:11:58,186
we register fonts in this demo.


422
00:11:58,916 --> 00:12:00,476
And to listen to one of these


423
00:12:00,506 --> 00:12:02,046
notifications is fairly simple.


424
00:12:03,396 --> 00:12:05,436
We tell the notification service


425
00:12:05,716 --> 00:12:08,206
center to observe KCTFontManager


426
00:12:08,596 --> 00:12:10,496
registration, that's a handful.


427
00:12:10,706 --> 00:12:11,606
RegisterFontsChanged


428
00:12:11,606 --> 00:12:12,436
Notification.


429
00:12:13,716 --> 00:12:16,126
And once we get one of these


430
00:12:16,186 --> 00:12:18,196
notifications, simply in our


431
00:12:18,196 --> 00:12:20,406
selector what we do is we update


432
00:12:20,406 --> 00:12:21,246
the registered fonts.


433
00:12:21,306 --> 00:12:22,286
And I'll show you the code for


434
00:12:22,286 --> 00:12:23,086
that in a second.


435
00:12:23,476 --> 00:12:25,546
And then, we update our UI which


436
00:12:25,546 --> 00:12:26,696
you saw in the Font Provider


437
00:12:26,696 --> 00:12:26,906
app.


438
00:12:27,336 --> 00:12:28,966
Basically, for font families


439
00:12:28,966 --> 00:12:30,496
that are registered, it shows


440
00:12:30,496 --> 00:12:31,606
the names in black and


441
00:12:31,606 --> 00:12:32,696
unregistered in red.


442
00:12:34,076 --> 00:12:37,386
To register the fonts, we gather


443
00:12:37,386 --> 00:12:39,346
the font files that represent


444
00:12:39,346 --> 00:12:40,436
the families that we want to


445
00:12:40,436 --> 00:12:42,336
register, and we call our new


446
00:12:42,336 --> 00:12:44,326
API CTFontManagerRegister


447
00:12:44,326 --> 00:12:45,076
FontURLs.


448
00:12:45,606 --> 00:12:47,176
We pass the list of font URLs


449
00:12:47,656 --> 00:12:48,946
along with a scope, a


450
00:12:48,946 --> 00:12:50,336
registration scope called


451
00:12:50,336 --> 00:12:50,926
persistent.


452
00:12:50,926 --> 00:12:53,136
This is new to iOS 13 which


453
00:12:53,136 --> 00:12:54,536
indicates make the fonts


454
00:12:54,536 --> 00:12:55,586
available systemwide.


455
00:12:56,126 --> 00:12:58,226
And also, a Boolean flag, in


456
00:12:58,226 --> 00:12:59,956
this case, enabled, that we want


457
00:12:59,956 --> 00:13:01,146
to make all those fonts visible


458
00:13:01,146 --> 00:13:02,586
to the OS.


459
00:13:02,896 --> 00:13:04,936
The API takes a closure.


460
00:13:05,336 --> 00:13:06,196
And the reason it needs a


461
00:13:06,246 --> 00:13:07,716
closure is because it is an


462
00:13:07,716 --> 00:13:08,676
asynchronous API.


463
00:13:09,326 --> 00:13:10,596
As you're registering fonts,


464
00:13:11,256 --> 00:13:12,706
your closure will get called,


465
00:13:13,156 --> 00:13:15,596
maybe multiple times as errors


466
00:13:15,596 --> 00:13:17,296
are getting discovered would be


467
00:13:17,296 --> 00:13:17,946
one example.


468
00:13:18,496 --> 00:13:19,656
When the whole operation is


469
00:13:19,716 --> 00:13:21,706
done, the done parameter in the


470
00:13:21,706 --> 00:13:22,916
closure is set to true.


471
00:13:23,926 --> 00:13:25,326
For this demo, the only thing I


472
00:13:25,326 --> 00:13:26,876
do on the closure is I just look


473
00:13:26,876 --> 00:13:27,386
for errors.


474
00:13:27,466 --> 00:13:28,576
And I just logged into this.


475
00:13:28,786 --> 00:13:29,786
I don't update my UI.


476
00:13:29,786 --> 00:13:32,696
What I update, I use, I rely on


477
00:13:32,696 --> 00:13:34,376
the notification mechanism to


478
00:13:34,376 --> 00:13:35,226
update my UI.


479
00:13:35,806 --> 00:13:37,436
And once I receive that


480
00:13:37,436 --> 00:13:39,016
notification, this is the method


481
00:13:39,016 --> 00:13:39,696
that gets called.


482
00:13:39,696 --> 00:13:41,576
And simply, I call the new API


483
00:13:42,216 --> 00:13:43,776
CTFontManagerCopyRegister


484
00:13:43,836 --> 00:13:45,716
FontDescriptors to know what


485
00:13:45,766 --> 00:13:46,916
fonts have been made available


486
00:13:46,916 --> 00:13:47,596
by my app.


487
00:13:48,186 --> 00:13:49,686
Once I have that, it's very


488
00:13:49,686 --> 00:13:50,056
simple.


489
00:13:50,056 --> 00:13:51,356
I just log my list of font


490
00:13:51,356 --> 00:13:53,306
descriptors, update my model


491
00:13:53,306 --> 00:13:55,016
inside for the families, and


492
00:13:55,016 --> 00:13:56,296
update my UI from there on.


493
00:13:57,126 --> 00:13:59,366
The font consuming app, it's,


494
00:13:59,836 --> 00:14:01,486
it's a very simple app that just


495
00:14:01,546 --> 00:14:02,446
parses documents.


496
00:14:03,716 --> 00:14:05,276
And the key to this type of apps


497
00:14:05,316 --> 00:14:08,026
that parse documents is to as


498
00:14:08,096 --> 00:14:09,496
the whole document is getting


499
00:14:09,496 --> 00:14:11,096
parsed, you figure out what


500
00:14:11,166 --> 00:14:12,796
fonts can be instantiated and


501
00:14:12,796 --> 00:14:14,166
you keep a list, a running list


502
00:14:14,166 --> 00:14:16,366
of fonts that are essentially


503
00:14:16,366 --> 00:14:16,726
missing.


504
00:14:17,696 --> 00:14:18,806
Now, fonts may be missing


505
00:14:18,806 --> 00:14:20,256
because the user never installed


506
00:14:20,256 --> 00:14:22,826
the fonts, or the fonts have not


507
00:14:22,876 --> 00:14:24,106
yet been made available to the


508
00:14:24,106 --> 00:14:24,616
process.


509
00:14:25,086 --> 00:14:26,696
You actually need to make use of


510
00:14:26,696 --> 00:14:28,306
the new API to request those


511
00:14:28,306 --> 00:14:29,146
fonts from the OS.


512
00:14:30,026 --> 00:14:31,386
Once you have them, you go ahead


513
00:14:31,386 --> 00:14:32,936
and update UI or update the


514
00:14:32,936 --> 00:14:33,406
document.


515
00:14:33,916 --> 00:14:36,136
So, for the app to parse a


516
00:14:36,136 --> 00:14:37,726
document, this is a very simple


517
00:14:37,756 --> 00:14:39,126
rich text format document


518
00:14:39,126 --> 00:14:40,146
expressed as JSON.


519
00:14:41,136 --> 00:14:42,826
And what it does, it just walks


520
00:14:42,826 --> 00:14:44,536
every run, tries to instantiate


521
00:14:44,536 --> 00:14:44,966
a font.


522
00:14:44,966 --> 00:14:46,776
If it can't, it replaces with


523
00:14:46,776 --> 00:14:47,256
Helvetica.


524
00:14:48,376 --> 00:14:50,386
But as it replaces it, it keeps


525
00:14:50,386 --> 00:14:51,776
a running tab of all the font


526
00:14:51,776 --> 00:14:52,616
names that it couldn't


527
00:14:52,616 --> 00:14:53,316
instantiate.


528
00:14:54,316 --> 00:14:55,886
With that in hand, now I can


529
00:14:55,956 --> 00:14:57,806
build a list or an array of font


530
00:14:57,806 --> 00:14:59,256
descriptors that use those names


531
00:14:59,906 --> 00:15:01,156
and pass that array to


532
00:15:01,256 --> 00:15:03,036
CTFontManagerRequestFont.


533
00:15:03,036 --> 00:15:05,366
And what this new API will do is


534
00:15:05,366 --> 00:15:07,256
it will notice or see if any


535
00:15:07,316 --> 00:15:08,516
fonts have been installed by the


536
00:15:08,516 --> 00:15:10,646
user using Font Provider apps.


537
00:15:10,846 --> 00:15:12,616
And if so, it makes it available


538
00:15:12,616 --> 00:15:14,656
for instantiation on the app.


539
00:15:15,386 --> 00:15:16,676
If any fonts have not been made


540
00:15:16,676 --> 00:15:18,216
available, then those fonts are


541
00:15:18,216 --> 00:15:19,986
displayed using the missing font


542
00:15:19,986 --> 00:15:20,886
dialog that you saw.


543
00:15:22,036 --> 00:15:23,736
The API takes a closure.


544
00:15:24,096 --> 00:15:25,846
And for this app, we simply for


545
00:15:25,846 --> 00:15:27,856
the visible document we just


546
00:15:27,856 --> 00:15:29,466
update all the missing fonts


547
00:15:29,766 --> 00:15:31,446
with whatever fonts have become


548
00:15:31,446 --> 00:15:31,846
available.


549
00:15:32,536 --> 00:15:33,516
So, as you see, it's very


550
00:15:33,606 --> 00:15:34,876
straightforward for an app to


551
00:15:34,876 --> 00:15:36,746
make use of fonts that other


552
00:15:36,746 --> 00:15:37,916
apps make available.


553
00:15:38,566 --> 00:15:41,566
Now, I'd like to share with you


554
00:15:41,566 --> 00:15:42,946
some considerations for font


555
00:15:42,946 --> 00:15:44,256
provider apps that are


556
00:15:44,256 --> 00:15:44,616
important.


557
00:15:45,956 --> 00:15:48,006
First, a font provider app


558
00:15:48,726 --> 00:15:50,756
cannot operate on fonts that


559
00:15:50,756 --> 00:15:51,766
don't belong to it.


560
00:15:52,126 --> 00:15:54,006
For example, it cannot try to


561
00:15:54,006 --> 00:15:55,656
unregister a font that another


562
00:15:55,736 --> 00:15:57,236
font provider app has


563
00:15:57,286 --> 00:15:57,796
registered.


564
00:15:58,476 --> 00:16:00,546
Similarly, a font provider app


565
00:16:00,706 --> 00:16:02,896
cannot override a font that


566
00:16:02,896 --> 00:16:04,376
another font provider app has


567
00:16:04,376 --> 00:16:06,176
made available or is installed


568
00:16:06,176 --> 00:16:06,866
with the system.


569
00:16:08,226 --> 00:16:09,826
There's a limit by the OS on how


570
00:16:09,826 --> 00:16:11,206
many fonts can be registered.


571
00:16:11,826 --> 00:16:13,236
There is not like a hard number


572
00:16:13,306 --> 00:16:13,706
for it.


573
00:16:14,056 --> 00:16:15,866
It's basically, it depends on


574
00:16:15,866 --> 00:16:17,056
the type of fonts that have been


575
00:16:17,056 --> 00:16:18,366
installed by the different font


576
00:16:18,366 --> 00:16:18,806
providers.


577
00:16:19,426 --> 00:16:21,326
Each font, it can consume


578
00:16:21,476 --> 00:16:22,816
different amount of resources.


579
00:16:23,376 --> 00:16:27,026
Fonts installed this way do not


580
00:16:27,026 --> 00:16:28,616
participate in font fallback.


581
00:16:29,616 --> 00:16:31,736
Basically, what it means is that


582
00:16:31,936 --> 00:16:33,906
if the system determines that


583
00:16:33,906 --> 00:16:35,606
your font is the only way that


584
00:16:36,316 --> 00:16:38,166
it's possible to display a given


585
00:16:38,166 --> 00:16:39,806
font, it won't be automatically


586
00:16:39,896 --> 00:16:41,606
substituted to be used.


587
00:16:42,236 --> 00:16:44,366
In essence, the only way to use


588
00:16:44,366 --> 00:16:47,086
these fonts is if the font is


589
00:16:47,146 --> 00:16:47,956
referenced by name.


590
00:16:49,146 --> 00:16:52,386
Finally, font provider apps own


591
00:16:52,386 --> 00:16:53,576
the fonts that they install.


592
00:16:54,636 --> 00:16:55,736
What that means is that if the


593
00:16:55,736 --> 00:16:57,966
user deletes an app that has


594
00:16:57,966 --> 00:17:00,156
fonts installed, those fonts are


595
00:17:00,156 --> 00:17:00,856
also removed.


596
00:17:01,336 --> 00:17:02,676
Now, the system does warn the


597
00:17:02,676 --> 00:17:04,146
user, indicates that it's trying


598
00:17:04,195 --> 00:17:05,586
to delete an app that has fonts


599
00:17:05,586 --> 00:17:05,965
installed.


600
00:17:05,965 --> 00:17:07,746
And the user has the opportunity


601
00:17:07,856 --> 00:17:08,306
to back out.


602
00:17:08,965 --> 00:17:10,695
This concludes my section of the


603
00:17:10,746 --> 00:17:11,016
talk.


604
00:17:11,425 --> 00:17:12,986
But before I go, I just want to


605
00:17:12,986 --> 00:17:14,336
share with you how excited we


606
00:17:14,336 --> 00:17:15,776
all are about this feature.


607
00:17:16,445 --> 00:17:18,116
Having the ability to install a


608
00:17:18,116 --> 00:17:20,116
variety of fonts in the OS that


609
00:17:20,116 --> 00:17:21,715
all apps can use at one point in


610
00:17:21,715 --> 00:17:24,106
time, it's essential for great


611
00:17:24,185 --> 00:17:25,126
content creation.


612
00:17:25,205 --> 00:17:26,836
And having this feature in place


613
00:17:27,266 --> 00:17:29,116
will allow us to unlock that


614
00:17:29,116 --> 00:17:30,226
power in the platform,


615
00:17:30,226 --> 00:17:31,636
especially in the iPad platform.


616
00:17:32,486 --> 00:17:33,666
With that, I'd like to invite to


617
00:17:33,706 --> 00:17:36,376
the stage Eric Dudiak, who will


618
00:17:36,376 --> 00:17:37,596
be talking to you about some new


619
00:17:37,596 --> 00:17:39,756
techniques for selecting fonts


620
00:17:39,756 --> 00:17:40,216
in the OS.


621
00:17:41,516 --> 00:17:46,416
[ Applause ]


622
00:17:46,916 --> 00:17:48,256
>> Hi. Thank you, Julio.


623
00:17:48,966 --> 00:17:50,616
So, I'm Eric Dudiak, an engineer


624
00:17:50,616 --> 00:17:51,616
on the UIKit Team.


625
00:17:52,676 --> 00:17:53,756
We've just seen how you can


626
00:17:53,806 --> 00:17:55,346
provide and install custom


627
00:17:55,346 --> 00:17:55,846
fonts.


628
00:17:56,346 --> 00:17:57,366
But your application may also


629
00:17:57,366 --> 00:17:58,606
want to consume those fonts.


630
00:17:59,116 --> 00:18:00,596
So, let's take a look at how you


631
00:18:00,596 --> 00:18:02,816
allow users to select and use


632
00:18:02,816 --> 00:18:03,766
the custom fonts that they've


633
00:18:03,796 --> 00:18:04,356
installed.


634
00:18:04,996 --> 00:18:07,756
The first thing an application


635
00:18:07,976 --> 00:18:10,016
might do is try to enumerate all


636
00:18:10,016 --> 00:18:10,916
the fonts available on the


637
00:18:10,916 --> 00:18:12,516
system and simply present that


638
00:18:12,516 --> 00:18:13,086
to the user.


639
00:18:13,646 --> 00:18:15,216
Then, allowing them to pick from


640
00:18:15,216 --> 00:18:15,866
one of those fonts.


641
00:18:16,946 --> 00:18:18,016
However, enumerating all the


642
00:18:18,016 --> 00:18:19,626
fonts on the system will only


643
00:18:19,676 --> 00:18:21,186
provide the list of built-in


644
00:18:21,216 --> 00:18:21,556
fonts.


645
00:18:21,636 --> 00:18:22,786
It will not show any of the


646
00:18:22,786 --> 00:18:23,826
custom fonts.


647
00:18:24,816 --> 00:18:25,956
And this is not allowed out of a


648
00:18:25,956 --> 00:18:27,426
concern for privacy.


649
00:18:29,436 --> 00:18:30,966
So, instead, when your


650
00:18:30,966 --> 00:18:32,476
application wants to allow the


651
00:18:32,476 --> 00:18:34,356
user to select one of their


652
00:18:34,356 --> 00:18:36,436
installed fonts, we've provided


653
00:18:36,436 --> 00:18:38,266
a new View Controller in UIKit.


654
00:18:38,366 --> 00:18:38,906
And that is


655
00:18:39,176 --> 00:18:41,106
UIFontPickerViewController.


656
00:18:41,446 --> 00:18:44,136
Now, it can be presented


657
00:18:44,136 --> 00:18:45,586
modally, and it'll default to


658
00:18:45,586 --> 00:18:46,996
that new sheet presentation that


659
00:18:46,996 --> 00:18:48,636
you've seen in iOS 13.


660
00:18:49,676 --> 00:18:51,546
Alternatively, if you, say a


661
00:18:51,546 --> 00:18:53,566
productivity app with an


662
00:18:53,736 --> 00:18:55,526
inspector, you might want to


663
00:18:55,526 --> 00:18:56,596
embed it in the sidebar.


664
00:18:56,716 --> 00:18:58,056
And that is also supported by


665
00:18:58,056 --> 00:18:58,616
the Font Picker.


666
00:19:02,156 --> 00:19:03,436
So, let's take a look at


667
00:19:03,436 --> 00:19:04,886
UIFontPickerViewController.


668
00:19:05,876 --> 00:19:07,286
So, for security purposes, it


669
00:19:07,286 --> 00:19:09,016
runs entirely out of process


670
00:19:09,106 --> 00:19:09,976
from your application.


671
00:19:11,726 --> 00:19:13,176
And by default, it will also


672
00:19:13,176 --> 00:19:14,946
only show the built-in fonts.


673
00:19:15,486 --> 00:19:16,136
You'll need to use an


674
00:19:16,136 --> 00:19:17,626
entitlement to see those


675
00:19:18,096 --> 00:19:19,856
user-installed fonts.


676
00:19:20,446 --> 00:19:23,506
After a user selects a font in


677
00:19:23,506 --> 00:19:25,216
the Font Picker, that font will


678
00:19:25,216 --> 00:19:26,586
be available to the presenting


679
00:19:26,586 --> 00:19:28,346
application through the normal


680
00:19:28,466 --> 00:19:31,786
font APIs, however, only after


681
00:19:31,786 --> 00:19:33,446
the user selected it and only


682
00:19:33,446 --> 00:19:34,966
the font that the user selected.


683
00:19:38,276 --> 00:19:39,636
So, to facilitate all the


684
00:19:39,636 --> 00:19:40,596
different kinds of apps out


685
00:19:40,626 --> 00:19:41,916
there, there are some great


686
00:19:41,916 --> 00:19:43,346
customization options on


687
00:19:43,346 --> 00:19:44,946
UIFontPickerViewController.


688
00:19:45,566 --> 00:19:49,836
For example, an application


689
00:19:49,956 --> 00:19:51,206
might want to show specific


690
00:19:51,266 --> 00:19:51,776
faces.


691
00:19:52,016 --> 00:19:53,866
Now, by default, the Font Picker


692
00:19:53,866 --> 00:19:55,496
will only show families of


693
00:19:55,546 --> 00:19:55,826
fonts.


694
00:19:56,336 --> 00:19:57,686
This is similar to applications


695
00:19:57,686 --> 00:19:59,166
like Mail and is familiar to


696
00:19:59,166 --> 00:19:59,876
many users.


697
00:20:00,446 --> 00:20:01,226
However, if you have an


698
00:20:01,226 --> 00:20:02,526
application where it makes sense


699
00:20:02,576 --> 00:20:04,516
to show additional weights of


700
00:20:04,626 --> 00:20:05,746
the different fonts, such as


701
00:20:05,796 --> 00:20:07,846
semi-bold or medium, you can


702
00:20:07,846 --> 00:20:09,016
optionally enable that in the


703
00:20:09,016 --> 00:20:10,406
configuration of the Font


704
00:20:10,406 --> 00:20:10,676
Picker.


705
00:20:11,776 --> 00:20:12,866
Additionally, your application


706
00:20:12,866 --> 00:20:14,356
gets to choose whether it gets


707
00:20:14,356 --> 00:20:15,716
the WYSIWYG presentation seen


708
00:20:15,716 --> 00:20:17,666
here or a more default


709
00:20:17,666 --> 00:20:19,296
presentation of every font


710
00:20:19,296 --> 00:20:21,926
displayed in the system font.


711
00:20:23,366 --> 00:20:24,896
Now, your application may also


712
00:20:24,896 --> 00:20:26,676
want to filter down the list of


713
00:20:26,676 --> 00:20:28,366
fonts available to the user.


714
00:20:29,026 --> 00:20:29,996
And you have two different ways


715
00:20:29,996 --> 00:20:30,526
to do this.


716
00:20:31,726 --> 00:20:33,406
First, you can filter by trait.


717
00:20:34,556 --> 00:20:36,476
So, if your application shows


718
00:20:36,476 --> 00:20:37,926
source code, for example, you


719
00:20:37,926 --> 00:20:40,226
may only want to see or may only


720
00:20:40,226 --> 00:20:41,876
want to show monospaced fonts to


721
00:20:41,876 --> 00:20:43,046
the user, since that's going to


722
00:20:43,046 --> 00:20:44,806
be a more natural experience for


723
00:20:44,806 --> 00:20:45,566
seeing source code.


724
00:20:46,006 --> 00:20:47,276
And here, we see filtering by


725
00:20:47,276 --> 00:20:49,196
trait to just monospaced.


726
00:20:51,936 --> 00:20:53,626
Additionally, your application


727
00:20:53,626 --> 00:20:55,446
may need the font to support a


728
00:20:55,446 --> 00:20:56,976
certain language in order to


729
00:20:56,976 --> 00:20:59,126
make sense in the context it's


730
00:20:59,126 --> 00:20:59,776
being used.


731
00:21:00,226 --> 00:21:01,226
And for that, we provide a


732
00:21:01,336 --> 00:21:03,046
Filter Predicate API that lets


733
00:21:03,046 --> 00:21:04,046
you filter down to a single


734
00:21:04,046 --> 00:21:05,826
language or combination of


735
00:21:05,826 --> 00:21:07,436
languages that the font needs to


736
00:21:07,436 --> 00:21:09,056
support in order to be


737
00:21:09,056 --> 00:21:09,626
presented.


738
00:21:10,486 --> 00:21:11,506
And in this case, we see the


739
00:21:11,506 --> 00:21:12,926
Font Picker configured to show


740
00:21:12,926 --> 00:21:14,946
only fonts that support Chinese.


741
00:21:19,126 --> 00:21:20,946
Now, the Font Picker also exists


742
00:21:21,236 --> 00:21:24,126
on macOS for UIKit apps.


743
00:21:25,476 --> 00:21:27,546
If you just present the Font


744
00:21:27,546 --> 00:21:28,976
Picker, instead of that modal


745
00:21:28,976 --> 00:21:30,096
sheet presentation that we saw


746
00:21:30,096 --> 00:21:31,456
earlier, you'll see something


747
00:21:31,456 --> 00:21:32,136
like this.


748
00:21:32,526 --> 00:21:34,306
A more traditional Mac menu.


749
00:21:34,306 --> 00:21:37,296
In order to control the


750
00:21:37,366 --> 00:21:38,656
presentation of where this menu


751
00:21:38,656 --> 00:21:40,046
shows up in your applications


752
00:21:40,046 --> 00:21:41,356
since it should show up over the


753
00:21:41,356 --> 00:21:42,876
button the user just clicked,


754
00:21:43,466 --> 00:21:43,806
use the


755
00:21:43,876 --> 00:21:46,436
UIPopoverPresentationController


756
00:21:46,436 --> 00:21:48,286
off the new controller to select


757
00:21:48,336 --> 00:21:49,396
which view is presenting it.


758
00:21:51,346 --> 00:21:52,646
Beyond that, the semantics of


759
00:21:52,646 --> 00:21:54,206
using the menu are fundamentally


760
00:21:54,336 --> 00:21:56,736
similar to the View Controller.


761
00:21:58,936 --> 00:22:00,636
Clicking away from the menu, for


762
00:22:00,636 --> 00:22:01,736
example, is the same as


763
00:22:01,766 --> 00:22:02,956
dismissing the View Controller.


764
00:22:03,436 --> 00:22:04,806
And when the user does select a


765
00:22:04,806 --> 00:22:06,686
font in the menu, it'll


766
00:22:06,686 --> 00:22:08,226
automatically send the Delegate


767
00:22:08,226 --> 00:22:09,636
APIs just as the View Controller


768
00:22:09,636 --> 00:22:11,536
normally would and will then


769
00:22:11,536 --> 00:22:12,226
close the menu.


770
00:22:12,856 --> 00:22:15,726
This is simply a way to provide


771
00:22:15,726 --> 00:22:17,286
a much more traditional


772
00:22:17,286 --> 00:22:19,096
experience on macOS around font


773
00:22:19,096 --> 00:22:20,616
picking so that your app feels


774
00:22:20,876 --> 00:22:22,226
like what a user expects on a


775
00:22:22,226 --> 00:22:25,966
normal Mac app.


776
00:22:26,246 --> 00:22:28,186
Of course, macOS has additional


777
00:22:28,256 --> 00:22:29,386
font picking options.


778
00:22:30,416 --> 00:22:31,806
And this is in the form of the


779
00:22:31,806 --> 00:22:33,666
macOS Font Panel.


780
00:22:34,946 --> 00:22:36,786
This is supported in UIKit apps


781
00:22:36,786 --> 00:22:37,876
when running on macOS.


782
00:22:38,396 --> 00:22:40,006
It's even part of the default


783
00:22:40,006 --> 00:22:41,246
menu bar options.


784
00:22:41,596 --> 00:22:42,886
So, a user can turn it on and


785
00:22:42,886 --> 00:22:44,776
off at any time and select


786
00:22:45,146 --> 00:22:46,986
different font settings anytime


787
00:22:46,986 --> 00:22:47,936
your application is running.


788
00:22:51,596 --> 00:22:52,436
Now, you can also


789
00:22:52,496 --> 00:22:54,386
programmatically control the


790
00:22:54,386 --> 00:22:55,856
presentation of the Font Panel.


791
00:22:56,426 --> 00:22:57,756
And you can access that through


792
00:22:57,916 --> 00:22:59,806
UITextFormattingCoordinator.


793
00:23:00,336 --> 00:23:01,256
From there, you can see if the


794
00:23:01,256 --> 00:23:03,196
panel is currently displayed as


795
00:23:03,196 --> 00:23:04,506
well as manually toggle its


796
00:23:04,546 --> 00:23:08,666
presentation on and off.


797
00:23:08,946 --> 00:23:10,416
So, because of the nonmodal


798
00:23:10,416 --> 00:23:11,766
nature of the Font Panel,


799
00:23:12,606 --> 00:23:14,436
there's a few considerations for


800
00:23:14,436 --> 00:23:15,776
your application when it's


801
00:23:15,876 --> 00:23:16,986
running on macOS.


802
00:23:17,926 --> 00:23:18,976
Changes that come in from the


803
00:23:18,976 --> 00:23:20,996
Font Panel will go through the


804
00:23:20,996 --> 00:23:21,966
responder chain.


805
00:23:23,026 --> 00:23:24,346
When using standard UIKit


806
00:23:24,346 --> 00:23:25,826
controls, this is handled for


807
00:23:25,826 --> 00:23:28,006
you automatically through the


808
00:23:28,006 --> 00:23:30,526
UITextFormattingCoordinator.


809
00:23:31,196 --> 00:23:32,296
In fact, the shared


810
00:23:32,296 --> 00:23:34,266
UITextFormattingCoordinator can


811
00:23:34,266 --> 00:23:36,346
even be used as a delegate for


812
00:23:36,346 --> 00:23:37,876
the Font Picker we saw earlier


813
00:23:37,876 --> 00:23:39,776
so you can also route those


814
00:23:40,056 --> 00:23:41,926
changes through your responder


815
00:23:41,926 --> 00:23:42,176
chain.


816
00:23:43,776 --> 00:23:45,066
However, if you have custom UI


817
00:23:45,066 --> 00:23:46,666
responders in your application,


818
00:23:47,516 --> 00:23:48,496
you may need to adopt some of


819
00:23:48,496 --> 00:23:49,066
the new


820
00:23:49,126 --> 00:23:51,326
UIResponderStandardEditActions


821
00:23:51,406 --> 00:23:53,156
protocol methods in order to be


822
00:23:53,156 --> 00:23:55,506
notified when changes are made


823
00:23:55,506 --> 00:23:56,556
through the Font Panel.


824
00:23:58,046 --> 00:23:59,406
This will allow your custom


825
00:23:59,406 --> 00:24:00,446
responders to update their


826
00:24:00,446 --> 00:24:01,836
displays accordingly.


827
00:24:04,636 --> 00:24:06,186
Now, let's take a quick look at


828
00:24:06,186 --> 00:24:07,736
a demo of how this all works.


829
00:24:14,606 --> 00:24:16,076
Great. So, here's our Font


830
00:24:16,076 --> 00:24:17,086
Consuming application.


831
00:24:17,576 --> 00:24:18,486
And here we see it's already


832
00:24:18,486 --> 00:24:19,726
using custom fonts.


833
00:24:19,726 --> 00:24:21,166
But one of the great features of


834
00:24:21,166 --> 00:24:22,636
this application is that it also


835
00:24:22,636 --> 00:24:24,666
lets the user select the font


836
00:24:24,666 --> 00:24:26,136
that they want to see rather


837
00:24:26,136 --> 00:24:27,486
than just showing the font.


838
00:24:27,876 --> 00:24:28,776
We can change the font for the


839
00:24:28,776 --> 00:24:29,596
document at any time.


840
00:24:30,196 --> 00:24:31,496
And I can do that simply by just


841
00:24:31,546 --> 00:24:32,976
pushing this say Change Title


842
00:24:33,026 --> 00:24:33,306
button.


843
00:24:34,426 --> 00:24:36,296
And when I do, we see that I get


844
00:24:36,296 --> 00:24:38,156
the Font Picker.


845
00:24:39,316 --> 00:24:40,946
I get the list of recently used


846
00:24:40,946 --> 00:24:41,846
fonts that I've used.


847
00:24:41,966 --> 00:24:43,476
I can also search it and scrub


848
00:24:43,476 --> 00:24:44,496
through it to find exactly the


849
00:24:44,496 --> 00:24:45,946
font that I want.


850
00:24:46,876 --> 00:24:48,216
Now, we've also gone ahead and


851
00:24:48,216 --> 00:24:50,516
customized it to show additional


852
00:24:50,986 --> 00:24:51,476
faces.


853
00:24:51,916 --> 00:24:53,066
So, I can see any number of


854
00:24:53,096 --> 00:24:55,356
faces on a given font and scrub


855
00:24:55,356 --> 00:24:57,306
through it and find exactly the


856
00:24:57,376 --> 00:24:58,126
font that I want.


857
00:24:59,406 --> 00:25:00,046
Let's see.


858
00:25:00,676 --> 00:25:01,576
Let's use Papyrus.


859
00:25:02,676 --> 00:25:04,286
Great. So, I can change the


860
00:25:04,286 --> 00:25:05,666
title just like that.


861
00:25:06,446 --> 00:25:07,886
And you can do that in any


862
00:25:07,886 --> 00:25:08,486
application.


863
00:25:08,486 --> 00:25:09,636
Provides a great standard


864
00:25:09,636 --> 00:25:11,346
control that users will get


865
00:25:11,346 --> 00:25:12,436
accustomed to on iOS.


866
00:25:12,996 --> 00:25:15,956
Of course, of course, since this


867
00:25:15,956 --> 00:25:17,436
is an iPad app, we can also


868
00:25:17,586 --> 00:25:18,576
build it for macOS.


869
00:25:19,796 --> 00:25:20,516
And here, we see that.


870
00:25:20,646 --> 00:25:22,206
This is the same app that I was


871
00:25:22,246 --> 00:25:23,946
just showing you a second ago on


872
00:25:24,166 --> 00:25:26,886
iPadOS, now running on macOS.


873
00:25:28,276 --> 00:25:29,356
Now, since we didn't do much to


874
00:25:29,356 --> 00:25:30,846
customize how we present that


875
00:25:31,256 --> 00:25:33,916
Font Picker off the title menu.


876
00:25:34,276 --> 00:25:35,926
If I go ahead and just push the


877
00:25:35,926 --> 00:25:37,396
exact same button without


878
00:25:37,396 --> 00:25:39,286
changing any of my code in my


879
00:25:39,286 --> 00:25:41,456
app, we see that instead of a


880
00:25:41,556 --> 00:25:43,666
Font Picker ViewController that


881
00:25:43,666 --> 00:25:44,906
I saw when I was running on


882
00:25:44,906 --> 00:25:46,716
iPadOS, I get a menu.


883
00:25:47,906 --> 00:25:48,856
And in that menu, I still get


884
00:25:48,856 --> 00:25:50,046
many of the same functionalities


885
00:25:50,046 --> 00:25:52,016
that I got in the Font Picker


886
00:25:52,176 --> 00:25:53,026
running on iPadOS.


887
00:25:53,026 --> 00:25:54,316
I still see Recents at the top.


888
00:25:54,756 --> 00:25:55,676
And I can still select


889
00:25:55,676 --> 00:25:56,636
individual faces.


890
00:25:57,196 --> 00:25:58,246
I'm also still getting that


891
00:25:58,246 --> 00:25:59,866
WYSIWYG presentation so I get a


892
00:25:59,866 --> 00:26:01,076
good idea of exactly what the


893
00:26:01,076 --> 00:26:02,746
font that I pick will look like.


894
00:26:03,596 --> 00:26:04,506
In this case, I'll just go ahead


895
00:26:04,506 --> 00:26:05,976
and select Comic Sans.


896
00:26:06,296 --> 00:26:09,816
Now, we've done some additional


897
00:26:09,816 --> 00:26:11,456
customization in our app for


898
00:26:11,456 --> 00:26:12,576
when it's running on macOS.


899
00:26:13,056 --> 00:26:14,286
Since we have that Font Panel


900
00:26:14,286 --> 00:26:16,056
available to us, we've gone


901
00:26:16,056 --> 00:26:18,326
ahead and updated our body here


902
00:26:18,746 --> 00:26:20,396
to go ahead and respond to any


903
00:26:20,396 --> 00:26:21,506
changes coming in from the Font


904
00:26:21,506 --> 00:26:21,726
Panel.


905
00:26:22,876 --> 00:26:24,096
And since we've done that, we've


906
00:26:24,096 --> 00:26:25,456
also made it so that the Change


907
00:26:25,516 --> 00:26:27,596
Body button rather than showing


908
00:26:27,596 --> 00:26:28,956
the Font Picker, when it's


909
00:26:28,956 --> 00:26:29,976
running on macOS, we actually


910
00:26:29,976 --> 00:26:30,956
show the Font Panel.


911
00:26:32,566 --> 00:26:33,616
This lets us do some additional


912
00:26:33,616 --> 00:26:34,386
customization.


913
00:26:35,296 --> 00:26:36,966
So, I can change the font just


914
00:26:36,966 --> 00:26:38,196
like I could in the Font Picker.


915
00:26:39,056 --> 00:26:40,176
But on macOS, I can also make


916
00:26:40,176 --> 00:26:41,366
some additional formatting


917
00:26:41,366 --> 00:26:42,106
changes in here.


918
00:26:42,696 --> 00:26:44,286
Can change, say, the text size


919
00:26:44,596 --> 00:26:46,156
or even the text color.


920
00:26:46,736 --> 00:26:50,576
And this provides a very rich


921
00:26:50,576 --> 00:26:52,186
experience on macOS that users


922
00:26:52,186 --> 00:26:53,676
are accustomed to from Mac apps


923
00:26:53,716 --> 00:26:54,406
over the years.


924
00:26:54,986 --> 00:26:56,946
So, that's great.


925
00:26:56,946 --> 00:26:58,026
That's our sample app.


926
00:26:58,146 --> 00:26:59,336
Let's take a look at how we did


927
00:26:59,336 --> 00:27:00,626
that in our code.


928
00:27:06,486 --> 00:27:07,406
So, first, let's take a look at


929
00:27:07,406 --> 00:27:08,696
how we created the Font Picker.


930
00:27:08,696 --> 00:27:10,616
And the very first step of that


931
00:27:10,886 --> 00:27:12,496
is creating a configuration for


932
00:27:13,096 --> 00:27:13,176
it.


933
00:27:13,396 --> 00:27:14,566
In this case, we initialize the


934
00:27:14,566 --> 00:27:16,646
configuration object and tell it


935
00:27:16,646 --> 00:27:17,856
that we want to include faces


936
00:27:17,856 --> 00:27:19,306
when we're showing the Font


937
00:27:19,306 --> 00:27:19,576
Picker.


938
00:27:21,516 --> 00:27:23,346
With our configuration set up,


939
00:27:23,556 --> 00:27:24,846
we can now create the Font


940
00:27:24,846 --> 00:27:25,926
Picker passing in that


941
00:27:25,926 --> 00:27:26,546
configuration.


942
00:27:27,486 --> 00:27:28,646
The configuration will determine


943
00:27:28,806 --> 00:27:30,686
how the Font Picker behaves over


944
00:27:30,826 --> 00:27:32,206
its entire lifecycle.


945
00:27:33,626 --> 00:27:34,926
We also set ourselves up as the


946
00:27:34,926 --> 00:27:36,426
delegate to the Font Picker so


947
00:27:36,646 --> 00:27:37,856
that we get all the callbacks


948
00:27:37,856 --> 00:27:40,836
when the user selects a font.


949
00:27:41,026 --> 00:27:42,486
And finally, we just go ahead


950
00:27:42,486 --> 00:27:43,786
and present the Font Picker like


951
00:27:43,786 --> 00:27:44,656
we would any other View


952
00:27:44,656 --> 00:27:45,076
Controller.


953
00:27:45,076 --> 00:27:50,496
Now, in the delegate callbacks,


954
00:27:50,906 --> 00:27:53,576
we see that we can get the font


955
00:27:53,576 --> 00:27:55,606
that the user selected directly


956
00:27:55,606 --> 00:27:56,386
off the Font Picker.


957
00:27:57,256 --> 00:27:58,046
Here, we see the delegate


958
00:27:58,046 --> 00:27:59,246
callback for when the user does


959
00:27:59,246 --> 00:27:59,916
select a font.


960
00:28:00,716 --> 00:28:02,146
And in this case, we're taking


961
00:28:02,146 --> 00:28:03,416
the font off the Font Picker


962
00:28:03,526 --> 00:28:05,346
that is the one selected and


963
00:28:05,346 --> 00:28:06,306
sending it to an attributed


964
00:28:06,536 --> 00:28:07,936
string in our application.


965
00:28:08,566 --> 00:28:11,136
Of course, if the user cancels


966
00:28:11,136 --> 00:28:12,386
selecting a font, we're also


967
00:28:12,386 --> 00:28:13,796
notified of that so we can make


968
00:28:13,866 --> 00:28:14,836
any appropriate changes


969
00:28:14,876 --> 00:28:16,626
necessary for the cancelation.


970
00:28:17,246 --> 00:28:20,686
Now, finally, let's look at our


971
00:28:20,746 --> 00:28:21,846
custom responder code.


972
00:28:21,936 --> 00:28:23,156
So, this is how we handled the


973
00:28:23,156 --> 00:28:24,526
Font Panel when running on


974
00:28:24,526 --> 00:28:25,006
macOS.


975
00:28:25,756 --> 00:28:26,986
In this case, it's a single


976
00:28:26,986 --> 00:28:29,036
method that we implemented that


977
00:28:29,036 --> 00:28:30,276
lets us know when the user made


978
00:28:30,276 --> 00:28:33,266
changes to the attributes that


979
00:28:33,266 --> 00:28:33,856
we should be using.


980
00:28:34,826 --> 00:28:35,706
And rather than just getting the


981
00:28:35,706 --> 00:28:36,896
set of attributes that they


982
00:28:36,896 --> 00:28:38,106
changed, we actually get this


983
00:28:38,106 --> 00:28:40,466
convenient closure that takes in


984
00:28:40,466 --> 00:28:41,196
the set of attributes we


985
00:28:41,196 --> 00:28:42,026
currently have.


986
00:28:42,486 --> 00:28:43,906
And passes out the set of


987
00:28:43,906 --> 00:28:45,266
attributes as they should be


988
00:28:45,266 --> 00:28:46,386
after the user change was


989
00:28:46,386 --> 00:28:46,806
applied.


990
00:28:47,636 --> 00:28:48,856
Now, the reason for this is that


991
00:28:48,996 --> 00:28:50,396
current attributes may stay the


992
00:28:50,456 --> 00:28:52,506
same or may change based on what


993
00:28:52,506 --> 00:28:53,346
the user changed.


994
00:28:53,926 --> 00:28:55,326
So, for example, if underlining


995
00:28:55,326 --> 00:28:57,466
is currently in effect, the user


996
00:28:57,466 --> 00:28:59,346
changing the foreground color of


997
00:28:59,346 --> 00:29:01,076
the text shouldn't change that


998
00:29:01,076 --> 00:29:01,576
underlining.


999
00:29:02,286 --> 00:29:03,526
And in this case, the


1000
00:29:03,526 --> 00:29:05,686
conversionHandler will take care


1001
00:29:05,686 --> 00:29:07,186
of that for us.


1002
00:29:10,176 --> 00:29:12,116
So, let's just do a quick recap


1003
00:29:12,116 --> 00:29:12,876
of font selection.


1004
00:29:13,946 --> 00:29:15,066
Instead of enumerating through


1005
00:29:15,066 --> 00:29:16,336
all the fonts on the system,


1006
00:29:17,216 --> 00:29:19,476
when wanting to show user fonts


1007
00:29:19,756 --> 00:29:21,416
there's a new View Controller,


1008
00:29:21,696 --> 00:29:23,276
UIFontPickerViewController on


1009
00:29:23,386 --> 00:29:26,186
iOS, iPadOS, and even macOS.


1010
00:29:27,366 --> 00:29:28,426
Additionally, when running your


1011
00:29:28,426 --> 00:29:30,566
UIKit app on macOS, the Font


1012
00:29:30,716 --> 00:29:31,546
Panel is available.


1013
00:29:32,296 --> 00:29:33,226
This has a few additional


1014
00:29:33,226 --> 00:29:35,356
considerations as custom


1015
00:29:35,356 --> 00:29:36,766
responders may need to handle


1016
00:29:36,766 --> 00:29:37,896
attribute changes that can


1017
00:29:37,896 --> 00:29:39,366
happen anytime your application


1018
00:29:39,366 --> 00:29:39,746
is running.


1019
00:29:41,346 --> 00:29:42,726
Standard text views will handle


1020
00:29:42,726 --> 00:29:43,466
this automatically.


1021
00:29:43,466 --> 00:29:47,246
Now, I'd like to invite Donna up


1022
00:29:47,766 --> 00:29:49,366
to talk some about text scaling


1023
00:29:49,366 --> 00:29:50,786
across Apple's platforms.


1024
00:29:52,516 --> 00:29:55,466
[ Applause ]


1025
00:29:55,966 --> 00:29:57,566
>> Thank you, Eric.


1026
00:29:59,916 --> 00:30:01,356
So, text scaling is a new


1027
00:30:01,356 --> 00:30:02,646
concept that we're introducing


1028
00:30:02,876 --> 00:30:04,976
in iOS 13 and macOS Catalina.


1029
00:30:05,666 --> 00:30:07,006
And today, we're going to cover


1030
00:30:07,006 --> 00:30:08,396
how to use this new concept to


1031
00:30:08,396 --> 00:30:09,936
make sure that the text sizes in


1032
00:30:09,936 --> 00:30:11,226
your app look consistent


1033
00:30:11,226 --> 00:30:11,816
everywhere.


1034
00:30:12,426 --> 00:30:14,976
So, now as iOS developers,


1035
00:30:15,276 --> 00:30:16,336
you're probably familiar with


1036
00:30:16,336 --> 00:30:17,456
the Human Interface Guidelines.


1037
00:30:18,506 --> 00:30:19,416
And this table from the


1038
00:30:19,416 --> 00:30:21,226
guidelines shows the font sizes


1039
00:30:21,226 --> 00:30:22,466
for the default dynamic


1040
00:30:22,466 --> 00:30:22,836
typesetting.


1041
00:30:23,946 --> 00:30:25,386
Now, most text in UIKit apps


1042
00:30:25,386 --> 00:30:27,096
uses the Body Text Style which


1043
00:30:27,096 --> 00:30:27,846
is 17 points.


1044
00:30:27,846 --> 00:30:30,776
And here's what that looks like


1045
00:30:30,776 --> 00:30:31,366
on an iPad.


1046
00:30:31,766 --> 00:30:32,416
It's pretty easy to read.


1047
00:30:32,416 --> 00:30:36,656
Right. You look at that same


1048
00:30:36,656 --> 00:30:39,106
17-point text on a Mac, it looks


1049
00:30:39,176 --> 00:30:40,046
a little bit different.


1050
00:30:40,046 --> 00:30:42,846
And when you put the two


1051
00:30:42,876 --> 00:30:44,396
side-by-side, you can see that


1052
00:30:44,396 --> 00:30:46,466
by comparison, the 17-point text


1053
00:30:46,466 --> 00:30:48,286
on the Mac looks a bit big.


1054
00:30:48,286 --> 00:30:52,176
And that's because on the Mac


1055
00:30:52,816 --> 00:30:53,906
we're more accustomed to a


1056
00:30:53,906 --> 00:30:55,596
smaller default font size closer


1057
00:30:55,596 --> 00:30:59,316
to 13 points, as shown here.


1058
00:30:59,316 --> 00:31:00,506
But again, if we take that same


1059
00:31:00,506 --> 00:31:02,386
13-point text and we look at it


1060
00:31:02,386 --> 00:31:06,066
on an iPad, it looks very small


1061
00:31:06,066 --> 00:31:07,046
and it's difficult to read.


1062
00:31:07,906 --> 00:31:09,316
Now, this inconsistency has


1063
00:31:09,316 --> 00:31:10,546
existed for a long time.


1064
00:31:10,726 --> 00:31:13,076
And we chose 17 points as the


1065
00:31:13,076 --> 00:31:14,856
base size for our visual type


1066
00:31:14,926 --> 00:31:17,116
scaling in iOS to make text easy


1067
00:31:17,116 --> 00:31:18,916
to read and easy to interact


1068
00:31:18,916 --> 00:31:19,726
with on touchscreens.


1069
00:31:20,426 --> 00:31:22,896
But as we move forward, the


1070
00:31:22,896 --> 00:31:24,256
cross-platform user experience


1071
00:31:24,256 --> 00:31:25,396
is only going to become more


1072
00:31:25,396 --> 00:31:25,766
important.


1073
00:31:25,766 --> 00:31:27,726
Now, that you can bring your


1074
00:31:27,976 --> 00:31:29,656
iPad apps to the Mac, users will


1075
00:31:29,656 --> 00:31:30,796
notice this difference in text


1076
00:31:30,796 --> 00:31:32,206
size when running your iPad app


1077
00:31:32,206 --> 00:31:33,646
on the Mac alongside an AppKit


1078
00:31:33,646 --> 00:31:34,066
app.


1079
00:31:34,326 --> 00:31:35,486
When copying and pasting text


1080
00:31:35,656 --> 00:31:37,286
between apps and when viewing


1081
00:31:37,286 --> 00:31:38,426
documents side-by-side.


1082
00:31:38,476 --> 00:31:41,746
And so, how do we make the text


1083
00:31:41,906 --> 00:31:43,836
size look consistent everywhere?


1084
00:31:44,546 --> 00:31:45,906
Ideally, if we're looking at the


1085
00:31:45,906 --> 00:31:47,666
same text in the same font and


1086
00:31:47,706 --> 00:31:49,166
size, we would want it to look


1087
00:31:49,206 --> 00:31:50,726
something like this where the


1088
00:31:50,726 --> 00:31:51,996
visual scaling fits each


1089
00:31:52,096 --> 00:31:52,566
platform.


1090
00:31:53,086 --> 00:31:53,966
And there are really two


1091
00:31:53,966 --> 00:31:55,116
different visual scalings here.


1092
00:31:55,656 --> 00:31:57,786
There's the scaling that's used


1093
00:31:57,786 --> 00:32:00,036
on iOS and iPadOS where 17


1094
00:32:00,036 --> 00:32:01,206
points is the default size.


1095
00:32:01,206 --> 00:32:02,616
And we will call this the iOS


1096
00:32:02,616 --> 00:32:03,596
text scaling.


1097
00:32:03,596 --> 00:32:06,606
And then, there's the scaling


1098
00:32:06,606 --> 00:32:07,906
used on macOS and other


1099
00:32:07,906 --> 00:32:09,216
non-Apple platforms where the


1100
00:32:09,216 --> 00:32:10,956
default size is closer to 13


1101
00:32:10,956 --> 00:32:11,216
points.


1102
00:32:11,216 --> 00:32:12,816
And we'll call this the standard


1103
00:32:12,816 --> 00:32:13,336
text scaling.


1104
00:32:13,396 --> 00:32:16,756
And we want you as developers to


1105
00:32:16,756 --> 00:32:18,116
be aware of these two different


1106
00:32:18,116 --> 00:32:19,876
text scalings and to use the


1107
00:32:19,946 --> 00:32:21,186
standard text scaling in


1108
00:32:21,246 --> 00:32:22,656
situations where it will improve


1109
00:32:22,936 --> 00:32:24,026
the cross-platform user


1110
00:32:24,026 --> 00:32:24,516
experience.


1111
00:32:25,276 --> 00:32:26,326
So, now let's take a look at


1112
00:32:26,326 --> 00:32:27,276
some of these situations.


1113
00:32:29,196 --> 00:32:30,726
First up, is iPad apps on the


1114
00:32:30,726 --> 00:32:30,836
Mac.


1115
00:32:31,346 --> 00:32:34,956
And since UITextViews are the


1116
00:32:34,956 --> 00:32:36,716
control of choice for displaying


1117
00:32:36,716 --> 00:32:38,296
large amounts of text, this is


1118
00:32:38,296 --> 00:32:39,136
where you're most likely to


1119
00:32:39,136 --> 00:32:39,906
notice the difference.


1120
00:32:39,906 --> 00:32:41,836
And we wanted to give you an


1121
00:32:41,836 --> 00:32:45,086
easy way to address this.


1122
00:32:45,446 --> 00:32:47,166
So, in iOS 13, we've added a new


1123
00:32:47,166 --> 00:32:48,386
property to UITextView.


1124
00:32:48,776 --> 00:32:49,196
It's called


1125
00:32:49,406 --> 00:32:50,636
usesStandardTextScaling.


1126
00:32:50,636 --> 00:32:53,026
And when you turn this on, UIKit


1127
00:32:53,026 --> 00:32:54,526
will automatically adjust the


1128
00:32:54,526 --> 00:32:56,036
rendering of the text inside the


1129
00:32:56,036 --> 00:32:57,366
Text View to match the standard


1130
00:32:57,366 --> 00:32:57,786
text scaling.


1131
00:32:57,786 --> 00:33:00,826
So, we go back to our text here.


1132
00:33:00,826 --> 00:33:02,506
We can see that the scaling is


1133
00:33:02,506 --> 00:33:03,466
looking a little bit off, right.


1134
00:33:03,466 --> 00:33:05,156
Well, let's check out what


1135
00:33:05,156 --> 00:33:06,016
happens when we turn on


1136
00:33:06,186 --> 00:33:07,326
usesStandardTextScaling.


1137
00:33:07,936 --> 00:33:11,456
Ah, that's much better.


1138
00:33:13,066 --> 00:33:14,456
Using this new property is a


1139
00:33:14,556 --> 00:33:16,076
really great way to ensure that


1140
00:33:16,076 --> 00:33:17,586
your text displays in the


1141
00:33:17,586 --> 00:33:18,466
standard text scaling.


1142
00:33:19,106 --> 00:33:21,206
But do take note,


1143
00:33:21,896 --> 00:33:23,216
usesStandardTextScaling is


1144
00:33:23,256 --> 00:33:24,236
turned off by default.


1145
00:33:24,236 --> 00:33:25,926
And that's because code that


1146
00:33:25,926 --> 00:33:27,576
uses custom transforms on Text


1147
00:33:27,576 --> 00:33:28,926
Views might have unexpected


1148
00:33:28,926 --> 00:33:30,036
results when combined with this


1149
00:33:30,096 --> 00:33:30,446
property.


1150
00:33:31,316 --> 00:33:32,226
And so, if you want to use the


1151
00:33:32,276 --> 00:33:33,466
standard text scaling, make sure


1152
00:33:33,466 --> 00:33:34,736
you enable this for each of your


1153
00:33:34,736 --> 00:33:35,236
Text Views.


1154
00:33:37,446 --> 00:33:38,766
Next, let's talk about text


1155
00:33:38,766 --> 00:33:39,776
scaling with copy and paste.


1156
00:33:40,886 --> 00:33:42,276
Now, since iOS uses a unique


1157
00:33:42,316 --> 00:33:43,796
text scaling, you might notice


1158
00:33:44,046 --> 00:33:45,256
this visual size difference when


1159
00:33:45,256 --> 00:33:46,856
copying and pasting text between


1160
00:33:46,856 --> 00:33:48,156
UIKit and AppKit apps.


1161
00:33:48,156 --> 00:33:49,486
And if you've ever used the


1162
00:33:49,486 --> 00:33:50,716
Universal Clipboard, you might


1163
00:33:50,716 --> 00:33:51,716
actually have already noticed


1164
00:33:51,716 --> 00:33:51,816
this.


1165
00:33:51,816 --> 00:33:54,746
Well, the good news is now you


1166
00:33:54,746 --> 00:33:55,646
actually don't have to do


1167
00:33:55,646 --> 00:33:57,336
anything to get this.


1168
00:33:57,336 --> 00:33:58,696
Starting in the latest OS, you


1169
00:33:58,696 --> 00:34:00,406
get visually consistent copy and


1170
00:34:00,406 --> 00:34:01,226
paste for free.


1171
00:34:01,226 --> 00:34:03,566
And let's take a look at how


1172
00:34:03,566 --> 00:34:03,956
that works.


1173
00:34:03,956 --> 00:34:05,756
So, I got my two platforms here.


1174
00:34:05,756 --> 00:34:08,056
iOS on the left and macOS on the


1175
00:34:08,056 --> 00:34:08,275
right.


1176
00:34:08,275 --> 00:34:11,366
And on each of these platforms,


1177
00:34:11,726 --> 00:34:13,346
Copy and Paste moves text


1178
00:34:13,346 --> 00:34:14,726
between two different layers of


1179
00:34:14,775 --> 00:34:15,116
the system.


1180
00:34:15,735 --> 00:34:17,136
The runtime layer depicted by


1181
00:34:17,136 --> 00:34:18,726
our little runner here, and the


1182
00:34:18,726 --> 00:34:20,286
persistence layer represented by


1183
00:34:20,286 --> 00:34:20,606
these discs.


1184
00:34:20,606 --> 00:34:24,186
Now, text in the Text View


1185
00:34:24,396 --> 00:34:25,956
exists in the runtime layer as


1186
00:34:25,956 --> 00:34:26,775
an attributed string.


1187
00:34:26,775 --> 00:34:29,255
And when you copy that text, it


1188
00:34:29,255 --> 00:34:30,466
moves if from the Text View in


1189
00:34:30,466 --> 00:34:31,266
the runtime layer to the


1190
00:34:31,266 --> 00:34:32,936
PasteBoard in the persistence


1191
00:34:32,936 --> 00:34:33,166
layer.


1192
00:34:33,166 --> 00:34:35,116
And it's serialized to rich text


1193
00:34:35,116 --> 00:34:36,056
format or RTF for storage on the


1194
00:34:36,136 --> 00:34:36,896
PasteBoard.


1195
00:34:39,576 --> 00:34:41,226
Now, on the latest OS, we've


1196
00:34:41,226 --> 00:34:42,315
added a new behavior for


1197
00:34:42,315 --> 00:34:43,516
attributed string APIs that


1198
00:34:43,686 --> 00:34:44,356
write RTF.


1199
00:34:44,985 --> 00:34:46,716
So, now when you create your RTF


1200
00:34:46,716 --> 00:34:48,406
from an attributed string it'll


1201
00:34:48,406 --> 00:34:49,966
add metadata that indicates


1202
00:34:49,966 --> 00:34:51,286
which text scaling it's using.


1203
00:34:51,926 --> 00:34:54,976
So, now when text is copied on


1204
00:34:55,196 --> 00:34:56,606
iOS it will be automatically


1205
00:34:56,606 --> 00:34:58,066
tagged with that metadata this


1206
00:34:58,066 --> 00:35:00,966
says it's using, the iOS text


1207
00:35:03,216 --> 00:35:03,446
scaling.


1208
00:35:03,556 --> 00:35:04,556
Now, we've also added new


1209
00:35:04,556 --> 00:35:06,196
behavior for the RTF reading


1210
00:35:06,196 --> 00:35:07,616
APIs on attributed string.


1211
00:35:07,616 --> 00:35:09,686
And so, when you're creating an


1212
00:35:09,686 --> 00:35:10,766
attributed string from RTF, the


1213
00:35:11,366 --> 00:35:12,556
system will look for that text


1214
00:35:12,556 --> 00:35:13,936
scaling metadata and it'll


1215
00:35:13,936 --> 00:35:15,736
adjust the font sizes for you if


1216
00:35:15,736 --> 00:35:16,036
it's needed.


1217
00:35:16,036 --> 00:35:19,426
Going back to our original text,


1218
00:35:19,636 --> 00:35:20,746
we have that text that we copied


1219
00:35:20,746 --> 00:35:21,136
on iOS.


1220
00:35:21,216 --> 00:35:22,636
And when we paste it on the Mac


1221
00:35:23,286 --> 00:35:24,186
the system will see that


1222
00:35:24,186 --> 00:35:25,286
metadata that says it's using


1223
00:35:25,286 --> 00:35:26,706
the iOS text scaling.


1224
00:35:27,346 --> 00:35:28,816
And then, the font point sizes


1225
00:35:28,816 --> 00:35:29,586
will be adjusted in the


1226
00:35:29,586 --> 00:35:31,116
attributes string so that when


1227
00:35:31,116 --> 00:35:32,376
the text is displayed on the


1228
00:35:32,376 --> 00:35:34,086
Mac, it looks visually similar


1229
00:35:34,086 --> 00:35:35,486
in size to that original text in


1230
00:35:35,546 --> 00:35:35,636
iOS.


1231
00:35:38,206 --> 00:35:40,456
And the end result is a lot like


1232
00:35:40,456 --> 00:35:41,416
this example from earlier.


1233
00:35:41,416 --> 00:35:43,526
But the font sizes will be


1234
00:35:43,526 --> 00:35:43,876
different.


1235
00:35:44,996 --> 00:35:46,356
The original text we copied here


1236
00:35:46,496 --> 00:35:48,196
on iOS is using a size of 17


1237
00:35:48,196 --> 00:35:48,476
points.


1238
00:35:48,656 --> 00:35:51,326
And the pasted text on the Mac


1239
00:35:51,576 --> 00:35:52,926
is using a size of 13 points.


1240
00:35:53,616 --> 00:35:56,516
Now, having different font sizes


1241
00:35:56,566 --> 00:35:57,896
between these two platforms is


1242
00:35:57,896 --> 00:35:59,556
okay for copy and paste because


1243
00:35:59,556 --> 00:36:00,816
that font size information is


1244
00:36:00,816 --> 00:36:01,166
transient.


1245
00:36:01,686 --> 00:36:03,066
It exists only in the runtime


1246
00:36:03,066 --> 00:36:03,256
layer.


1247
00:36:04,246 --> 00:36:05,596
But RTF is also a document


1248
00:36:05,596 --> 00:36:07,056
format and this isn't a great


1249
00:36:07,056 --> 00:36:08,316
solution for the persistence in


1250
00:36:08,316 --> 00:36:08,976
the storage layer.


1251
00:36:08,976 --> 00:36:11,746
And that leads to our final


1252
00:36:11,786 --> 00:36:13,366
situation, working with text


1253
00:36:13,366 --> 00:36:14,306
scaling for document


1254
00:36:14,306 --> 00:36:14,846
interchange.


1255
00:36:15,006 --> 00:36:17,666
And we need to weigh special


1256
00:36:17,666 --> 00:36:18,986
considerations here to balance


1257
00:36:19,366 --> 00:36:20,666
the desire for cross-platform


1258
00:36:20,666 --> 00:36:23,276
visual consistency with the need


1259
00:36:23,276 --> 00:36:24,646
for integrity in the document


1260
00:36:24,646 --> 00:36:24,846
model.


1261
00:36:25,146 --> 00:36:28,546
And so, to have the text look


1262
00:36:28,546 --> 00:36:30,036
the same across platforms and


1263
00:36:30,036 --> 00:36:31,426
also keep the same font sizes in


1264
00:36:31,426 --> 00:36:32,796
the document, what we really


1265
00:36:32,796 --> 00:36:34,666
need is the ability to use one


1266
00:36:34,666 --> 00:36:35,706
text scaling for viewing the


1267
00:36:35,706 --> 00:36:37,706
document and a different scaling


1268
00:36:37,706 --> 00:36:38,176
for saving it.


1269
00:36:38,176 --> 00:36:41,216
And there's two different ways


1270
00:36:41,276 --> 00:36:42,126
that we can approach this.


1271
00:36:42,666 --> 00:36:44,046
We can change the document model


1272
00:36:44,046 --> 00:36:45,266
and use different font sizes for


1273
00:36:45,266 --> 00:36:46,276
viewing versus saving.


1274
00:36:47,056 --> 00:36:48,696
Or we can change the document


1275
00:36:48,696 --> 00:36:50,136
view by changing the rendering


1276
00:36:50,196 --> 00:36:51,936
scale and keep the font size the


1277
00:36:51,996 --> 00:36:52,716
same when saving.


1278
00:36:53,476 --> 00:36:55,816
We've actually implemented both


1279
00:36:55,816 --> 00:36:56,876
of these approaches for RTF


1280
00:36:57,636 --> 00:36:58,866
since this is a common format


1281
00:36:58,866 --> 00:37:00,226
that we use internally.


1282
00:37:00,226 --> 00:37:02,286
And I'd like to share with you


1283
00:37:02,286 --> 00:37:03,606
the fundamental techniques that


1284
00:37:03,606 --> 00:37:04,996
we use to do this so that you


1285
00:37:04,996 --> 00:37:06,206
can apply some of our techniques


1286
00:37:06,526 --> 00:37:07,546
to build support for text


1287
00:37:07,546 --> 00:37:09,096
scaling into your own workflows


1288
00:37:09,096 --> 00:37:10,836
and document formats.


1289
00:37:11,836 --> 00:37:13,416
So, the first thing we did was


1290
00:37:13,416 --> 00:37:15,256
we extended our format to tag


1291
00:37:15,256 --> 00:37:16,526
documents with that text scaling


1292
00:37:16,526 --> 00:37:17,396
metadata.


1293
00:37:17,716 --> 00:37:18,996
Document parsers and viewers


1294
00:37:18,996 --> 00:37:20,386
will need this information to


1295
00:37:20,386 --> 00:37:21,886
understand which text scaling


1296
00:37:21,886 --> 00:37:22,736
the document is using.


1297
00:37:23,256 --> 00:37:26,306
Since preexisting documents are


1298
00:37:26,306 --> 00:37:27,566
not going to have this metadata,


1299
00:37:27,566 --> 00:37:28,816
we also needed to migrate them


1300
00:37:28,816 --> 00:37:29,686
to use the new format.


1301
00:37:29,686 --> 00:37:31,946
And for RTF, this happens


1302
00:37:31,996 --> 00:37:33,556
automatically once the documents


1303
00:37:33,556 --> 00:37:35,586
are saved with the latest OS.


1304
00:37:37,186 --> 00:37:38,866
Now, we also needed to make sure


1305
00:37:38,866 --> 00:37:42,496
that our documents have the


1306
00:37:42,496 --> 00:37:49,436
correct text scaling associated


1307
00:37:49,436 --> 00:37:50,446
with them.


1308
00:37:51,186 --> 00:37:56,126
And this is especially important


1309
00:37:56,576 --> 00:37:59,036
for that initial migration.


1310
00:37:59,246 --> 00:38:01,846
So, we're introducing a new


1311
00:38:02,096 --> 00:38:04,946
attributed string API to help


1312
00:38:04,946 --> 00:38:08,046
out with that in the form of new


1313
00:38:08,116 --> 00:38:09,446
document attributes.


1314
00:38:12,066 --> 00:38:12,746
Now, you can use the text


1315
00:38:12,746 --> 00:38:13,916
scaling document attribute to


1316
00:38:13,916 --> 00:38:15,116
set the metadata in the document


1317
00:38:15,116 --> 00:38:16,506
on Save using attributed string


1318
00:38:16,506 --> 00:38:17,946
writing APIs like data from


1319
00:38:17,976 --> 00:38:18,096
range.


1320
00:38:18,126 --> 00:38:18,846
If you need to, you can also


1321
00:38:18,876 --> 00:38:19,596
convert the document to a


1322
00:38:19,626 --> 00:38:20,496
particular text scaling when you


1323
00:38:20,526 --> 00:38:20,706
save it.


1324
00:38:20,736 --> 00:38:21,516
And you do this by specifying


1325
00:38:21,546 --> 00:38:22,206
both of the new document


1326
00:38:22,236 --> 00:38:22,506
attributes.


1327
00:38:22,536 --> 00:38:23,136
Now, for the model-based


1328
00:38:23,166 --> 00:38:23,826
approach, we needed a way to


1329
00:38:23,856 --> 00:38:24,756
control conversions between text


1330
00:38:24,786 --> 00:38:25,656
scalings when opening documents.


1331
00:38:25,686 --> 00:38:26,466
And we've introduced even more


1332
00:38:26,496 --> 00:38:27,336
attributed string API for that


1333
00:38:27,366 --> 00:38:27,516
purpose.


1334
00:38:27,546 --> 00:38:28,326
New reading options for target


1335
00:38:28,356 --> 00:38:28,986
and source text scaling.


1336
00:38:29,016 --> 00:38:29,856
And you can control which text


1337
00:38:29,886 --> 00:38:30,516
scaling will be used by


1338
00:38:30,546 --> 00:38:31,326
specifying these reading options


1339
00:38:31,356 --> 00:38:32,136
when creating your attributed


1340
00:38:32,166 --> 00:38:32,976
string from an RTF document.


1341
00:38:35,276 --> 00:38:36,856
And finally, for the view-based


1342
00:38:36,856 --> 00:38:38,336
approach, we recommend using the


1343
00:38:38,336 --> 00:38:39,356
standard text scaling.


1344
00:38:40,266 --> 00:38:41,816
Now, for RTF documents, you do


1345
00:38:41,816 --> 00:38:43,046
this by combining the new API.


1346
00:38:43,676 --> 00:38:44,846
You first set the target text


1347
00:38:44,846 --> 00:38:46,296
scaling to standard when you're


1348
00:38:46,296 --> 00:38:47,436
reading your RTF into an


1349
00:38:47,486 --> 00:38:48,346
attributed string.


1350
00:38:48,346 --> 00:38:50,586
And then, you set


1351
00:38:50,586 --> 00:38:52,446
usesStandardTextScaling on your


1352
00:38:52,446 --> 00:38:53,826
Text View that will display the


1353
00:38:53,826 --> 00:38:54,846
document.


1354
00:38:56,116 --> 00:38:57,016
Ooh, okay.


1355
00:38:57,876 --> 00:38:58,786
We covered a lot of ground


1356
00:38:58,786 --> 00:38:59,026
today.


1357
00:38:59,026 --> 00:39:00,946
Now, as a reminder, here's what


1358
00:39:00,946 --> 00:39:01,256
you've learned.


1359
00:39:01,256 --> 00:39:03,386
IOS apps can now make fonts


1360
00:39:03,386 --> 00:39:04,356
available systemwide.


1361
00:39:05,176 --> 00:39:06,826
Use name instantiation only for


1362
00:39:06,826 --> 00:39:07,646
non-system fonts.


1363
00:39:08,306 --> 00:39:09,706
And remember, the name


1364
00:39:09,706 --> 00:39:11,236
instantiation is not guaranteed.


1365
00:39:12,266 --> 00:39:13,516
Use On-Demand resources to


1366
00:39:13,516 --> 00:39:14,546
deliver fonts to the OS.


1367
00:39:14,546 --> 00:39:16,106
And use standard text scaling


1368
00:39:16,106 --> 00:39:17,676
for the best cross-platform user


1369
00:39:17,676 --> 00:39:18,056
experience.


1370
00:39:18,056 --> 00:39:20,946
Come visit us at the Text and


1371
00:39:20,946 --> 00:39:22,376
Fonts Lab in a couple hours to


1372
00:39:22,376 --> 00:39:23,446
learn more about all the topics


1373
00:39:23,446 --> 00:39:24,396
that we've covered here today.


1374
00:39:24,396 --> 00:39:26,006
And you can also come talk to us


1375
00:39:26,006 --> 00:39:27,336
at the Labs for iPad apps and


1376
00:39:27,446 --> 00:39:28,526
Mac to learn more about text


1377
00:39:28,646 --> 00:39:28,966
scaling.


1378
00:39:30,526 --> 00:39:31,776
We're really excited to see what


1379
00:39:31,776 --> 00:39:32,686
you'll create with these new


1380
00:39:32,686 --> 00:39:33,296
capabilities.


1381
00:39:33,296 --> 00:39:34,496
Thank you and enjoy the rest of


1382
00:39:34,496 --> 00:39:34,896
the conference.


1383
00:39:35,516 --> 00:39:39,500
[ Applause ]

