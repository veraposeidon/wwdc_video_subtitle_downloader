1
00:00:00,506 --> 00:00:05,500
[Music]


2
00:00:08,416 --> 00:00:11,566
>> [Applause] All right, thank


3
00:00:11,566 --> 00:00:11,946
you.


4
00:00:12,606 --> 00:00:14,906
Welcome. It's so great to see


5
00:00:14,906 --> 00:00:15,976
you all here and it's great to


6
00:00:15,976 --> 00:00:17,806
see so many people excited about


7
00:00:17,806 --> 00:00:18,176
SwiftUI.


8
00:00:18,176 --> 00:00:20,296
My name is Jeff Nadeau.


9
00:00:20,546 --> 00:00:22,256
I work on macOS frameworks and


10
00:00:22,256 --> 00:00:23,276
I'll be joined in a little bit


11
00:00:23,276 --> 00:00:24,986
by my colleagues Ada Turner and


12
00:00:24,986 --> 00:00:25,676
Meghna Sapre [phonetic].


13
00:00:27,026 --> 00:00:27,776
Now we hope you've had the


14
00:00:27,776 --> 00:00:28,996
chance to learn about SwiftUI


15
00:00:29,056 --> 00:00:30,446
all throughout the week but if


16
00:00:30,446 --> 00:00:32,066
you need a summary, here it is.


17
00:00:32,625 --> 00:00:34,196
SwiftUI is the shortest path to


18
00:00:34,196 --> 00:00:35,626
building great apps on every


19
00:00:35,626 --> 00:00:36,206
device.


20
00:00:36,766 --> 00:00:38,976
And what we're here to focus on


21
00:00:38,976 --> 00:00:40,856
today is the 'every' in every


22
00:00:40,856 --> 00:00:41,546
device.


23
00:00:42,936 --> 00:00:43,986
Now when we think about building


24
00:00:43,986 --> 00:00:45,036
applications for all of our


25
00:00:45,036 --> 00:00:46,236
Apple devices, these are the


26
00:00:46,236 --> 00:00:47,196
technologies that we think


27
00:00:47,196 --> 00:00:47,526
about.


28
00:00:48,026 --> 00:00:49,056
We use AppKit on the Mac.


29
00:00:49,756 --> 00:00:51,636
UIKit on iPhone and iPad,


30
00:00:52,046 --> 00:00:54,236
TVUIKit which is built on UIKit


31
00:00:54,286 --> 00:00:55,866
for Apple TV, and then on the


32
00:00:55,866 --> 00:00:57,096
watch we use WatchKit.


33
00:00:58,396 --> 00:00:59,506
These UI frameworks were


34
00:00:59,506 --> 00:01:00,806
designed around the strengths


35
00:01:00,806 --> 00:01:01,886
and capabilities of the


36
00:01:01,886 --> 00:01:02,986
respective devices.


37
00:01:03,386 --> 00:01:04,586
And so naturally there are some


38
00:01:04,586 --> 00:01:05,556
differences between them.


39
00:01:06,196 --> 00:01:07,366
And historically we haven't been


40
00:01:07,366 --> 00:01:08,606
able to take code written for


41
00:01:08,606 --> 00:01:10,316
one and move it over to another


42
00:01:10,316 --> 00:01:11,806
device without modification.


43
00:01:12,466 --> 00:01:14,876
But for the first time ever,


44
00:01:14,876 --> 00:01:16,496
we're introducing a UI framework


45
00:01:16,496 --> 00:01:17,936
that you can use on any of these


46
00:01:17,936 --> 00:01:18,536
devices.


47
00:01:19,216 --> 00:01:20,616
That's unprecedented and it's a


48
00:01:20,726 --> 00:01:22,206
big opportunity for you as app


49
00:01:22,236 --> 00:01:22,936
developers.


50
00:01:24,016 --> 00:01:25,246
But these devices are so


51
00:01:25,246 --> 00:01:26,326
different so how is it that


52
00:01:26,326 --> 00:01:27,606
we've built one UI framework


53
00:01:27,606 --> 00:01:29,026
that works on all of them?


54
00:01:30,026 --> 00:01:31,636
Well, SwiftUI was built from the


55
00:01:31,636 --> 00:01:33,216
ground up to accommodate many


56
00:01:33,216 --> 00:01:34,496
different UI paradigms.


57
00:01:34,916 --> 00:01:35,886
So whether you're using a


58
00:01:35,886 --> 00:01:37,726
keyboard and mouse, or a multi


59
00:01:37,726 --> 00:01:39,296
touch display, or the Siri


60
00:01:39,296 --> 00:01:40,776
remote, or even the digital


61
00:01:40,776 --> 00:01:42,326
crown on your Apple Watch, or


62
00:01:42,326 --> 00:01:43,606
assistive technologies like


63
00:01:43,606 --> 00:01:45,176
voiceover and switch control,


64
00:01:45,616 --> 00:01:46,646
SwiftUI was designed to


65
00:01:46,646 --> 00:01:47,946
accommodate all of these.


66
00:01:49,126 --> 00:01:50,726
And it has great support for our


67
00:01:50,726 --> 00:01:51,996
platform design conventions out


68
00:01:51,996 --> 00:01:52,696
of the box.


69
00:01:53,276 --> 00:01:54,536
We've brought together experts


70
00:01:54,536 --> 00:01:56,426
from every platform to make sure


71
00:01:57,016 --> 00:01:59,706
that when you use an element in


72
00:01:59,706 --> 00:02:01,766
SwiftUI on a given device that


73
00:02:01,766 --> 00:02:03,396
it looks and feels right at


74
00:02:03,396 --> 00:02:03,706
home.


75
00:02:04,646 --> 00:02:06,086
The result is a system where


76
00:02:06,086 --> 00:02:07,506
your knowledge is transferrable


77
00:02:07,506 --> 00:02:08,526
across devices.


78
00:02:09,246 --> 00:02:10,436
Everything fits together in the


79
00:02:10,436 --> 00:02:10,996
same way.


80
00:02:11,556 --> 00:02:12,516
So even when you're working


81
00:02:12,576 --> 00:02:14,036
with-- you're building support


82
00:02:14,036 --> 00:02:15,116
for some specific piece of


83
00:02:15,116 --> 00:02:16,356
hardware, say the Touch Bar on a


84
00:02:16,356 --> 00:02:18,026
MacBook Pro or the digital crown


85
00:02:18,026 --> 00:02:19,966
on an Apple Watch, or the Siri


86
00:02:19,966 --> 00:02:21,786
remote, the tools for doing this


87
00:02:21,816 --> 00:02:23,206
have a kind of consistency and


88
00:02:23,206 --> 00:02:24,756
familiarity that makes them


89
00:02:24,756 --> 00:02:25,786
really easy to pick up.


90
00:02:27,156 --> 00:02:28,626
Now, on top of just general


91
00:02:28,626 --> 00:02:31,456
design philosophy we also have a


92
00:02:31,456 --> 00:02:32,936
number of elements that are in


93
00:02:32,936 --> 00:02:34,736
common across-- SwiftUI across


94
00:02:34,736 --> 00:02:35,426
all devices.


95
00:02:35,776 --> 00:02:38,016
So for example, every platform


96
00:02:38,016 --> 00:02:39,316
has the idea of a toggle


97
00:02:39,316 --> 00:02:39,806
control.


98
00:02:40,356 --> 00:02:42,466
You've got some kind of piece of


99
00:02:42,466 --> 00:02:43,526
Boolean state that you want to


100
00:02:43,526 --> 00:02:46,356
be able to toggle and you have a


101
00:02:46,356 --> 00:02:47,436
label describing what you're


102
00:02:47,436 --> 00:02:47,906
toggling.


103
00:02:49,236 --> 00:02:50,926
And so even though our


104
00:02:51,416 --> 00:02:52,996
expression of this control could


105
00:02:52,996 --> 00:02:53,996
be very different on each


106
00:02:53,996 --> 00:02:55,566
device-- it might be a switch or


107
00:02:55,566 --> 00:02:57,146
a check box or a toggle button--


108
00:02:57,546 --> 00:02:59,426
we can offer a single API that


109
00:02:59,426 --> 00:03:00,986
describes this on any device.


110
00:03:03,396 --> 00:03:05,676
SwiftUI also has a common layout


111
00:03:05,766 --> 00:03:06,186
system.


112
00:03:06,806 --> 00:03:08,146
So when you're using a stack or


113
00:03:08,146 --> 00:03:10,066
a spacer or a padding, these


114
00:03:10,066 --> 00:03:11,346
tools work the same on every


115
00:03:11,346 --> 00:03:11,846
device.


116
00:03:11,936 --> 00:03:13,196
And what that means is that once


117
00:03:13,196 --> 00:03:14,276
you've learned to lay out an


118
00:03:14,276 --> 00:03:15,596
application on one device,


119
00:03:15,926 --> 00:03:16,796
you've learned how to lay out an


120
00:03:16,796 --> 00:03:21,336
application on any.


121
00:03:21,446 --> 00:03:22,666
We also have some more advanced


122
00:03:22,666 --> 00:03:23,836
controls like picker for


123
00:03:23,836 --> 00:03:24,306
example.


124
00:03:24,686 --> 00:03:26,246
Picker picks one element from a


125
00:03:26,246 --> 00:03:28,946
list of many and this control


126
00:03:28,946 --> 00:03:30,316
expresses itself in a variety of


127
00:03:30,316 --> 00:03:30,556
ways.


128
00:03:30,556 --> 00:03:32,416
So on MacOS it might be a pop-up


129
00:03:32,416 --> 00:03:32,746
button.


130
00:03:33,076 --> 00:03:34,856
On iOS or WatchOS it might be


131
00:03:34,856 --> 00:03:35,896
this wheel style picker.


132
00:03:37,096 --> 00:03:38,786
And given how different they


133
00:03:38,786 --> 00:03:40,016
are, you might not use them


134
00:03:40,016 --> 00:03:41,426
completely interchangeably from


135
00:03:41,426 --> 00:03:42,386
device to device.


136
00:03:42,946 --> 00:03:43,656
But the one thing that's


137
00:03:43,746 --> 00:03:45,366
constant is the relationship to


138
00:03:45,366 --> 00:03:45,846
your data.


139
00:03:47,046 --> 00:03:48,086
When you've adapted your model


140
00:03:48,086 --> 00:03:48,986
to work with one of these


141
00:03:48,986 --> 00:03:50,626
controls, you can easily


142
00:03:50,626 --> 00:03:52,296
transplant that from device to


143
00:03:52,296 --> 00:03:52,936
device.


144
00:03:53,876 --> 00:03:54,946
Now we don't have time to go


145
00:03:54,946 --> 00:03:56,006
over all of the different


146
00:03:56,006 --> 00:03:57,906
elements available in SwiftUI so


147
00:03:57,906 --> 00:03:58,946
you should check out the SwiftUI


148
00:03:58,946 --> 00:04:00,026
essentials talk for more


149
00:04:00,026 --> 00:04:01,826
information about that.


150
00:04:02,396 --> 00:04:04,696
Now, does that mean that I can


151
00:04:04,696 --> 00:04:06,446
really use SwiftUI to design a


152
00:04:06,446 --> 00:04:07,806
single app that's going to work


153
00:04:07,806 --> 00:04:09,526
great across all these devices?


154
00:04:10,756 --> 00:04:12,186
Is it going to let me write code


155
00:04:12,186 --> 00:04:14,076
to adapt seamlessly from a 4k


156
00:04:14,076 --> 00:04:15,936
television all the way down to a


157
00:04:15,936 --> 00:04:17,656
44 millimeter watch face?


158
00:04:19,796 --> 00:04:21,156
Well of course not.


159
00:04:23,286 --> 00:04:25,436
You know, there's no such thing


160
00:04:25,436 --> 00:04:27,926
as a one size fits all app.


161
00:04:28,156 --> 00:04:30,386
If we decided to just stick to


162
00:04:30,386 --> 00:04:31,696
the common denominator between


163
00:04:31,696 --> 00:04:33,456
all these devices, we'd be


164
00:04:33,456 --> 00:04:34,686
missing out on the things that


165
00:04:34,686 --> 00:04:35,946
make each device great.


166
00:04:35,946 --> 00:04:38,566
And there's no magic abstraction


167
00:04:38,566 --> 00:04:39,536
that can do that for you.


168
00:04:39,986 --> 00:04:41,116
You have to decide what the


169
00:04:41,116 --> 00:04:43,086
right design is for your app on


170
00:04:43,136 --> 00:04:43,926
each device.


171
00:04:45,266 --> 00:04:46,676
Now what SwiftUI can help you


172
00:04:46,676 --> 00:04:48,576
with is you can share your skill


173
00:04:48,576 --> 00:04:50,036
set and toolset that you've


174
00:04:50,036 --> 00:04:51,656
learned building from one device


175
00:04:51,996 --> 00:04:53,056
across many others.


176
00:04:54,466 --> 00:04:55,966
And there are definitely going


177
00:04:55,966 --> 00:04:57,106
to be opportunities to share


178
00:04:57,106 --> 00:04:59,056
code along the way, just where


179
00:04:59,056 --> 00:04:59,876
it makes sense.


180
00:05:00,436 --> 00:05:02,386
And so we think it's kind of


181
00:05:02,386 --> 00:05:03,276
important to think about this


182
00:05:03,306 --> 00:05:05,036
less as write once and run


183
00:05:05,036 --> 00:05:07,746
anywhere and more like learn


184
00:05:07,746 --> 00:05:09,286
once and apply anywhere.


185
00:05:09,896 --> 00:05:12,516
Now to put these principles into


186
00:05:12,516 --> 00:05:14,406
practice, we need to build an


187
00:05:14,406 --> 00:05:14,546
app.


188
00:05:16,016 --> 00:05:18,146
But really it's more like we've


189
00:05:18,176 --> 00:05:20,096
built four apps, one for each of


190
00:05:20,096 --> 00:05:21,266
our platforms.


191
00:05:22,736 --> 00:05:23,966
And the app that we've built is


192
00:05:23,966 --> 00:05:24,876
called Landmarks.


193
00:05:25,806 --> 00:05:27,006
The purpose of Landmarks is to


194
00:05:27,006 --> 00:05:28,066
research and visit landmarks


195
00:05:28,066 --> 00:05:28,776
throughout the country.


196
00:05:29,516 --> 00:05:31,656
We definitely want to look at


197
00:05:31,656 --> 00:05:32,626
photos and get visitor


198
00:05:32,626 --> 00:05:34,026
information about these places.


199
00:05:34,146 --> 00:05:36,936
I think it would be great to get


200
00:05:36,936 --> 00:05:38,716
maps and directions to a


201
00:05:38,716 --> 00:05:39,406
destination.


202
00:05:40,846 --> 00:05:41,786
And if we're planning a trip,


203
00:05:41,876 --> 00:05:43,066
marking favorites is a great


204
00:05:43,066 --> 00:05:43,346
idea.


205
00:05:43,346 --> 00:05:45,776
And when we think about bringing


206
00:05:45,776 --> 00:05:47,436
this app to all of our devices,


207
00:05:47,676 --> 00:05:49,336
we can tell ourselves a story


208
00:05:49,396 --> 00:05:50,576
about how we think the app


209
00:05:50,706 --> 00:05:52,536
belongs and fits on each one.


210
00:05:53,936 --> 00:05:57,266
So for example, on AppleTV it's


211
00:05:57,266 --> 00:05:58,766
a natural place to couch surf


212
00:05:58,766 --> 00:05:59,616
for places to go.


213
00:06:00,296 --> 00:06:02,296
And because it's a big screen


214
00:06:02,296 --> 00:06:03,276
experience, that might be


215
00:06:03,276 --> 00:06:04,126
something that you do with


216
00:06:04,126 --> 00:06:05,686
family or friends or roommates.


217
00:06:06,326 --> 00:06:08,846
And we definitely want to mark


218
00:06:08,846 --> 00:06:10,246
favorites to research later.


219
00:06:10,866 --> 00:06:13,476
And the Mac would be a great


220
00:06:13,476 --> 00:06:14,876
place to do that research.


221
00:06:15,456 --> 00:06:17,886
It's a good place to compare and


222
00:06:17,886 --> 00:06:20,356
contrast info, maybe have some


223
00:06:20,356 --> 00:06:21,526
more advanced sorting and


224
00:06:21,526 --> 00:06:24,416
filtering controls, and really


225
00:06:24,416 --> 00:06:28,216
read up on all the details.


226
00:06:28,216 --> 00:06:30,146
On iPhone, we obviously want


227
00:06:30,146 --> 00:06:31,196
quick information about each


228
00:06:31,196 --> 00:06:33,276
landmark but since it's so


229
00:06:33,276 --> 00:06:34,426
common to navigate with our


230
00:06:34,426 --> 00:06:36,026
phones, we should also be able


231
00:06:36,026 --> 00:06:37,096
to get driving directions as


232
00:06:37,096 --> 00:06:37,316
well.


233
00:06:38,986 --> 00:06:40,336
And iPhone of course is also a


234
00:06:40,336 --> 00:06:41,636
phone so if we need to place a


235
00:06:41,636 --> 00:06:43,136
phone call to call ahead, it's a


236
00:06:43,136 --> 00:06:45,896
natural place to do it.


237
00:06:46,736 --> 00:06:48,546
Finally on Apple Watch, that's


238
00:06:48,546 --> 00:06:49,746
where we want to get at-a-glance


239
00:06:49,746 --> 00:06:51,226
info about what's most important


240
00:06:51,226 --> 00:06:51,706
to us.


241
00:06:52,226 --> 00:06:55,056
And it's the perfect platform to


242
00:06:55,056 --> 00:06:56,736
receive important notifications


243
00:06:56,736 --> 00:06:57,846
when anything changes.


244
00:06:58,356 --> 00:07:02,046
Now the cool thing is that the


245
00:07:02,046 --> 00:07:03,356
iOS version of this application


246
00:07:03,356 --> 00:07:04,576
is already available to you


247
00:07:04,576 --> 00:07:05,116
today.


248
00:07:06,186 --> 00:07:07,536
It's part of a new documentation


249
00:07:07,536 --> 00:07:09,286
series to teach you how to view


250
00:07:09,286 --> 00:07:09,746
SwiftUI.


251
00:07:10,886 --> 00:07:11,816
You start from the very


252
00:07:11,816 --> 00:07:13,156
beginning and you can build this


253
00:07:13,156 --> 00:07:16,816
application up step by step.


254
00:07:17,046 --> 00:07:17,906
It's already available for


255
00:07:17,906 --> 00:07:19,686
download today and it's a great


256
00:07:19,686 --> 00:07:21,366
way to learn how to build an iOS


257
00:07:21,366 --> 00:07:21,506
app.


258
00:07:21,506 --> 00:07:23,586
And so as a result, we're going


259
00:07:23,586 --> 00:07:25,066
to be focusing more today on


260
00:07:25,066 --> 00:07:26,926
bringing this application to


261
00:07:26,926 --> 00:07:28,856
AppleTV, Mac, and Apple Watch.


262
00:07:29,416 --> 00:07:31,496
And to start us off on that


263
00:07:31,496 --> 00:07:32,476
journey, I'd like to hand it


264
00:07:32,476 --> 00:07:33,886
over to my colleague Ada Turner


265
00:07:33,936 --> 00:07:35,456
to talk to us about SwiftUI on


266
00:07:35,456 --> 00:07:35,936
AppleTV.


267
00:07:36,516 --> 00:07:43,086
[ Applause ]


268
00:07:43,586 --> 00:07:44,186
>> Thanks Jeff.


269
00:07:45,136 --> 00:07:48,036
Hi. My name is Ada Turner and


270
00:07:48,036 --> 00:07:49,736
I'm really excited to talk to


271
00:07:49,736 --> 00:07:51,986
you today about SwiftUI for


272
00:07:51,986 --> 00:07:52,826
AppleTV.


273
00:07:54,356 --> 00:07:57,096
Designing apps for the TV means


274
00:07:57,096 --> 00:07:58,546
designing for the biggest,


275
00:07:58,546 --> 00:08:00,896
boldest screen in the entire


276
00:08:00,896 --> 00:08:02,726
home and that comes with some


277
00:08:02,726 --> 00:08:04,576
challenges and considerations


278
00:08:04,626 --> 00:08:05,906
unique to AppleTV.


279
00:08:06,526 --> 00:08:09,006
Luckily, SwiftUI allows you to


280
00:08:09,006 --> 00:08:11,036
create great experiences that


281
00:08:11,036 --> 00:08:12,466
are optimized for the living


282
00:08:12,466 --> 00:08:14,486
room using the same skill set


283
00:08:14,486 --> 00:08:16,156
and toolset that you've learned


284
00:08:16,286 --> 00:08:17,386
when developing for Apple's


285
00:08:17,386 --> 00:08:18,216
other devices.


286
00:08:19,696 --> 00:08:22,416
Today I'd like to focus on three


287
00:08:22,576 --> 00:08:24,366
key points for designing great


288
00:08:24,366 --> 00:08:26,116
experience on the biggest,


289
00:08:26,196 --> 00:08:27,236
boldest screen.


290
00:08:28,266 --> 00:08:30,656
TVOS is a 10 foot experience,


291
00:08:31,046 --> 00:08:32,275
not a mobile experience.


292
00:08:33,176 --> 00:08:34,736
People interact with your apps


293
00:08:34,976 --> 00:08:36,816
using the Siri remote not a


294
00:08:36,816 --> 00:08:38,296
touch screen or a mouse and


295
00:08:38,296 --> 00:08:38,826
keyboard.


296
00:08:39,486 --> 00:08:41,506
And it is especially important


297
00:08:41,506 --> 00:08:43,176
for TVOS apps to have


298
00:08:43,346 --> 00:08:45,336
streamlined navigation so people


299
00:08:45,336 --> 00:08:46,856
can jump right into your app's


300
00:08:46,856 --> 00:08:47,386
content.


301
00:08:48,636 --> 00:08:51,076
Now, what is a 10 foot


302
00:08:51,076 --> 00:08:51,806
experience?


303
00:08:53,106 --> 00:08:55,986
It's this, not this.


304
00:08:57,546 --> 00:08:59,796
Your apps should emphasize rich


305
00:08:59,866 --> 00:09:02,036
and immersive experiences like


306
00:09:02,036 --> 00:09:04,246
beautiful imagery or video as


307
00:09:04,286 --> 00:09:06,116
opposed to accomplishing tasks


308
00:09:06,586 --> 00:09:08,216
like taking notes or getting


309
00:09:08,216 --> 00:09:08,986
directions.


310
00:09:10,396 --> 00:09:12,576
When sharing SwiftUI code with


311
00:09:12,576 --> 00:09:14,266
your AppleTV app from other


312
00:09:14,266 --> 00:09:16,766
devices, carefully consider


313
00:09:16,766 --> 00:09:18,476
which experiences make the most


314
00:09:18,546 --> 00:09:20,746
sense when displayed on a large


315
00:09:20,746 --> 00:09:23,316
screen viewed from across the


316
00:09:23,316 --> 00:09:26,686
room with longer periods of use


317
00:09:27,506 --> 00:09:29,166
and potentially more than one


318
00:09:29,166 --> 00:09:31,946
viewer at a time.


319
00:09:32,156 --> 00:09:33,606
Let's take a look at which


320
00:09:33,606 --> 00:09:35,096
features we decided to support


321
00:09:35,096 --> 00:09:37,296
on Landmarks for TV and which


322
00:09:37,296 --> 00:09:38,716
ones we left on the cutting room


323
00:09:38,716 --> 00:09:39,136
floor.


324
00:09:40,596 --> 00:09:42,586
The easiest choice to make was


325
00:09:42,586 --> 00:09:43,586
to include the gorgeous


326
00:09:43,666 --> 00:09:45,026
photographs of the landmarks


327
00:09:45,396 --> 00:09:46,716
which will look great on the big


328
00:09:46,766 --> 00:09:47,226
screen.


329
00:09:48,566 --> 00:09:49,936
Gathering in the living room to


330
00:09:49,936 --> 00:09:51,596
pick out favorites together is


331
00:09:51,596 --> 00:09:52,856
one of the key features of our


332
00:09:52,856 --> 00:09:54,746
TVOS app so we can't forget


333
00:09:54,746 --> 00:09:54,946
that.


334
00:09:56,626 --> 00:09:58,486
And we'll also include basic


335
00:09:58,486 --> 00:10:00,246
tourism information such as


336
00:10:00,246 --> 00:10:02,576
hours of information and cost so


337
00:10:02,576 --> 00:10:04,146
that people can make informed


338
00:10:04,146 --> 00:10:05,466
decisions about where they want


339
00:10:05,466 --> 00:10:06,706
to visit as they browse.


340
00:10:08,386 --> 00:10:10,406
Now, although our data supports


341
00:10:10,446 --> 00:10:12,646
it, we decided that we're not


342
00:10:12,646 --> 00:10:14,426
going to include lengthy details


343
00:10:14,426 --> 00:10:15,676
about the history of each


344
00:10:15,676 --> 00:10:17,876
landmark as content like that


345
00:10:17,876 --> 00:10:19,516
really isn't appropriate on the


346
00:10:19,516 --> 00:10:20,056
TV.


347
00:10:21,116 --> 00:10:22,896
We also decided not to include


348
00:10:22,896 --> 00:10:24,606
advanced sorting and filtering


349
00:10:24,846 --> 00:10:26,246
as features like that make a lot


350
00:10:26,246 --> 00:10:28,346
more sense on the Mac or iPad.


351
00:10:29,296 --> 00:10:31,646
And finally, although our data


352
00:10:31,646 --> 00:10:32,656
includes geographical


353
00:10:32,656 --> 00:10:34,826
coordinates, we decided not to


354
00:10:34,826 --> 00:10:35,876
implement geofenced


355
00:10:35,876 --> 00:10:38,156
notifications as traveling with


356
00:10:38,156 --> 00:10:40,056
an actively running TVOS app is


357
00:10:40,056 --> 00:10:41,636
a very rare use case.


358
00:10:42,236 --> 00:10:44,236
[Laughter]


359
00:10:44,456 --> 00:10:47,666
Next, let's talk about focus.


360
00:10:48,276 --> 00:10:50,656
People interact with TVOS apps


361
00:10:50,656 --> 00:10:52,586
using the Siri remote which is


362
00:10:52,716 --> 00:10:54,326
optimized for effortlessly


363
00:10:54,326 --> 00:10:55,576
swiping through your app's


364
00:10:55,576 --> 00:10:56,086
interface.


365
00:10:56,786 --> 00:10:59,206
It is critical that your entire


366
00:10:59,206 --> 00:11:01,396
apps interface be intuitively


367
00:11:01,396 --> 00:11:03,026
navigable using focus.


368
00:11:03,916 --> 00:11:06,216
Luckily, many of SwiftUI's


369
00:11:06,286 --> 00:11:08,356
standard interface elements such


370
00:11:08,356 --> 00:11:11,086
as lists, buttons, text fields,


371
00:11:11,206 --> 00:11:13,666
and toggles, all work seamlessly


372
00:11:13,666 --> 00:11:15,986
on TVOS, adopting different


373
00:11:15,986 --> 00:11:18,016
appearances and behaviors that


374
00:11:18,016 --> 00:11:20,356
look great on the big screen and


375
00:11:20,466 --> 00:11:21,966
interact using focus.


376
00:11:23,456 --> 00:11:25,076
If you implement your own custom


377
00:11:25,076 --> 00:11:27,376
controls, SwiftUI provides a


378
00:11:27,516 --> 00:11:29,476
focusable view modifier that


379
00:11:29,476 --> 00:11:31,366
allows you to control whether or


380
00:11:31,366 --> 00:11:33,026
not your view can become focused


381
00:11:33,406 --> 00:11:35,976
and execute a block of code when


382
00:11:35,976 --> 00:11:37,566
your view gains or loses focus.


383
00:11:38,416 --> 00:11:40,246
You can also use the on play


384
00:11:40,246 --> 00:11:42,676
pause command and on exit


385
00:11:42,676 --> 00:11:44,406
command view modifiers to


386
00:11:44,406 --> 00:11:46,146
respond to people pressing the


387
00:11:46,146 --> 00:11:48,316
play pause and menu buttons on


388
00:11:48,316 --> 00:11:49,876
the Siri remote when your view


389
00:11:49,876 --> 00:11:50,586
is focused.


390
00:11:52,716 --> 00:11:53,586
Thank you.


391
00:11:54,176 --> 00:11:57,836
[ Applause ]


392
00:11:58,336 --> 00:12:00,366
Finally, let's dive into some


393
00:12:00,366 --> 00:12:02,476
best navigation practices on


394
00:12:02,546 --> 00:12:03,146
TVOS.


395
00:12:05,046 --> 00:12:06,466
Long, vertically scrolling


396
00:12:06,466 --> 00:12:08,556
tables of content with deeply


397
00:12:08,556 --> 00:12:10,756
nested levels of navigation work


398
00:12:10,756 --> 00:12:13,486
great on the Mac or iPhone, but


399
00:12:14,096 --> 00:12:16,146
on TVOS people want an


400
00:12:16,316 --> 00:12:18,036
effortless browsing experience


401
00:12:18,036 --> 00:12:19,596
that emphasizes content.


402
00:12:20,586 --> 00:12:22,686
Using SwiftUI's easily


403
00:12:22,686 --> 00:12:25,096
composable stack views, list


404
00:12:25,096 --> 00:12:27,416
views, and scroll views, we can


405
00:12:27,416 --> 00:12:29,426
create an interface like this on


406
00:12:29,426 --> 00:12:31,836
Landmarks for a TV with vertical


407
00:12:31,836 --> 00:12:33,676
stacks of horizontally scrolling


408
00:12:33,676 --> 00:12:35,396
shelves that really take


409
00:12:35,396 --> 00:12:36,856
advantage of the widescreen


410
00:12:36,856 --> 00:12:39,626
display on the TV and allow


411
00:12:39,626 --> 00:12:40,826
people to browse between


412
00:12:40,826 --> 00:12:42,596
different categories without


413
00:12:42,596 --> 00:12:43,866
having to navigate between


414
00:12:43,866 --> 00:12:44,646
different pages.


415
00:12:46,166 --> 00:12:48,316
First, let's take a look at how


416
00:12:48,316 --> 00:12:49,776
we might structure the top level


417
00:12:49,776 --> 00:12:52,486
navigation of a SwiftUI app for


418
00:12:52,486 --> 00:12:53,226
AppleTV.


419
00:12:54,386 --> 00:12:56,626
Tab view is the primary means of


420
00:12:56,626 --> 00:12:58,856
navigation for many TVOS apps.


421
00:12:59,616 --> 00:13:01,076
It allows you to break your


422
00:13:01,076 --> 00:13:02,996
app's content up into distinct


423
00:13:02,996 --> 00:13:04,386
categories that are easy to


424
00:13:04,466 --> 00:13:06,786
switch between and provides a


425
00:13:06,786 --> 00:13:08,796
persistent indicator at the top


426
00:13:08,796 --> 00:13:10,396
of each view that lets people


427
00:13:10,396 --> 00:13:11,616
know where they are in your app.


428
00:13:13,286 --> 00:13:15,396
Navigation view allows you to


429
00:13:15,396 --> 00:13:17,556
nest pages of content and


430
00:13:17,556 --> 00:13:19,236
optionally display a navigation


431
00:13:19,236 --> 00:13:21,206
bar with a title or buttons.


432
00:13:22,756 --> 00:13:24,656
I'd like to make a quick note on


433
00:13:24,656 --> 00:13:26,226
structuring your app's top level


434
00:13:26,226 --> 00:13:29,056
navigation on TVOS versus iOS.


435
00:13:30,516 --> 00:13:33,166
On iOS if you use a tabbed view,


436
00:13:33,166 --> 00:13:34,836
it will typically be the top


437
00:13:34,836 --> 00:13:37,586
level view of your app and each


438
00:13:37,586 --> 00:13:39,656
of its child views may be a


439
00:13:39,656 --> 00:13:41,946
navigation view with your app's


440
00:13:41,946 --> 00:13:43,876
content as the navigation view's


441
00:13:43,876 --> 00:13:44,506
root view.


442
00:13:45,176 --> 00:13:47,016
With this structure, when people


443
00:13:47,016 --> 00:13:48,726
navigate deeper into your app's


444
00:13:48,726 --> 00:13:50,796
content, the tab bar will remain


445
00:13:50,796 --> 00:13:52,576
visible allowing people to


446
00:13:52,576 --> 00:13:55,886
easily switch tabs at any time.


447
00:13:56,076 --> 00:13:58,316
Here on photos the tab bar


448
00:13:58,316 --> 00:14:00,276
remains visible on the bottom of


449
00:14:00,276 --> 00:14:02,846
the screen after navigating to


450
00:14:02,846 --> 00:14:06,416
the details page so that people


451
00:14:06,416 --> 00:14:08,686
can easily switch tabs without


452
00:14:08,686 --> 00:14:10,116
having to navigate backwards.


453
00:14:12,516 --> 00:14:17,506
However, on TVOS if you use a


454
00:14:17,506 --> 00:14:19,996
tab view you will actually want


455
00:14:19,996 --> 00:14:21,996
to make the navigation view the


456
00:14:21,996 --> 00:14:24,146
top level view of your app and


457
00:14:24,256 --> 00:14:26,046
set its root view to the tab


458
00:14:26,106 --> 00:14:28,496
view with your app's content as


459
00:14:28,536 --> 00:14:30,186
the direct children of the tab


460
00:14:30,186 --> 00:14:30,456
view.


461
00:14:31,166 --> 00:14:32,776
With this structure, when people


462
00:14:32,776 --> 00:14:34,206
navigate deeper into your app's


463
00:14:34,206 --> 00:14:36,306
content, the top bar will


464
00:14:36,306 --> 00:14:38,156
disappear and we want this


465
00:14:38,196 --> 00:14:40,436
behavior because TVOS is all


466
00:14:40,436 --> 00:14:42,216
about full screen experiences


467
00:14:42,436 --> 00:14:43,706
that emphasize your app's


468
00:14:43,706 --> 00:14:44,246
content.


469
00:14:46,356 --> 00:14:49,246
Here on photos for TV the tab


470
00:14:49,246 --> 00:14:50,826
bar disappears when we navigate


471
00:14:50,826 --> 00:14:52,286
deeper into the album's details


472
00:14:52,286 --> 00:14:54,366
so that people can focus on the


473
00:14:54,366 --> 00:14:58,556
contents of the album.


474
00:14:58,766 --> 00:15:00,776
SwiftUI views are highly


475
00:15:00,776 --> 00:15:03,586
composable so it's super easy to


476
00:15:03,586 --> 00:15:05,256
rearrange your app's navigation


477
00:15:05,256 --> 00:15:06,626
structure for TVOS.


478
00:15:07,626 --> 00:15:10,196
The nested relationships between


479
00:15:10,196 --> 00:15:13,526
the tab view, navigation views,


480
00:15:14,996 --> 00:15:17,046
and content views, are all


481
00:15:17,046 --> 00:15:18,836
visually indicated by the


482
00:15:18,836 --> 00:15:22,686
inherent structure of your code.


483
00:15:22,906 --> 00:15:24,706
Now, let's put some of these


484
00:15:24,706 --> 00:15:26,616
principles into practice and


485
00:15:26,666 --> 00:15:28,816
tune up landmarks for TV.


486
00:15:29,916 --> 00:15:31,626
First we will no longer be


487
00:15:31,626 --> 00:15:33,246
needing this navigation bar


488
00:15:33,246 --> 00:15:33,866
button title.


489
00:15:40,536 --> 00:15:43,036
Next we'll get rid of this


490
00:15:43,036 --> 00:15:45,566
navigation button and data


491
00:15:45,566 --> 00:15:46,126
header label.


492
00:15:48,506 --> 00:15:49,826
Let's see how this looks.


493
00:16:05,196 --> 00:16:06,086
This is definitely an


494
00:16:06,086 --> 00:16:07,766
improvement but we've got a ways


495
00:16:07,816 --> 00:16:08,176
to go.


496
00:16:09,056 --> 00:16:11,016
This long, vertically scrolling


497
00:16:11,016 --> 00:16:13,366
list doesn't quite feel right on


498
00:16:13,416 --> 00:16:16,806
TVOS so let's use a scroll view


499
00:16:16,806 --> 00:16:18,796
with a nested HStack instead of


500
00:16:18,796 --> 00:16:18,976
a list.


501
00:16:30,726 --> 00:16:32,796
And let's display all of the


502
00:16:32,796 --> 00:16:34,326
landmarks within a category


503
00:16:35,106 --> 00:16:36,036
inside of a row.


504
00:16:39,876 --> 00:16:41,606
Let's take a closer look at the


505
00:16:42,196 --> 00:16:42,266
row.


506
00:16:43,816 --> 00:16:45,946
It's very similar to category


507
00:16:45,946 --> 00:16:48,016
landmarks with the addition of a


508
00:16:48,016 --> 00:16:50,886
VStack containing a header label


509
00:16:51,286 --> 00:16:53,486
and an HStack wrapping the four


510
00:16:53,486 --> 00:16:54,506
each landmarks.


511
00:16:55,656 --> 00:16:57,996
One thing to note here is that


512
00:16:57,996 --> 00:16:59,466
instead of a plain text view,


513
00:16:59,946 --> 00:17:01,686
I'm using a custom view called


514
00:17:01,686 --> 00:17:03,976
landmark card as the label for


515
00:17:03,976 --> 00:17:05,906
the navigation button and I'm


516
00:17:05,906 --> 00:17:07,675
sharing this view directly with


517
00:17:07,675 --> 00:17:08,496
the iOS app.


518
00:17:09,526 --> 00:17:10,406
Let's give this a run.


519
00:17:22,086 --> 00:17:23,415
This is starting to feel a lot


520
00:17:23,415 --> 00:17:23,856
better.


521
00:17:24,386 --> 00:17:25,996
By changing only a few lines of


522
00:17:25,996 --> 00:17:29,096
code, I now have a nice, big


523
00:17:29,096 --> 00:17:31,636
inviting buttons with images and


524
00:17:31,636 --> 00:17:33,006
a vertically scrolling list that


525
00:17:33,006 --> 00:17:34,236
really takes advantage of the


526
00:17:34,236 --> 00:17:34,936
wide screen.


527
00:17:36,276 --> 00:17:37,706
One thing I'd like to point out


528
00:17:37,736 --> 00:17:39,226
here is that while we're still


529
00:17:39,226 --> 00:17:41,326
using the exact same navigation


530
00:17:41,326 --> 00:17:43,286
button view in landmarks row,


531
00:17:43,676 --> 00:17:45,196
its appearance has changed.


532
00:17:45,716 --> 00:17:47,286
The chevron on the right hand


533
00:17:47,326 --> 00:17:49,016
side of the view is gone and the


534
00:17:49,016 --> 00:17:50,306
background is different.


535
00:17:50,956 --> 00:17:52,446
This is because navigation


536
00:17:52,446 --> 00:17:54,246
button is no longer being


537
00:17:54,246 --> 00:17:55,936
displayed in the list view and


538
00:17:55,936 --> 00:17:57,676
has automatically adapted its


539
00:17:57,676 --> 00:17:58,156
appearance.


540
00:17:59,446 --> 00:18:01,066
Now, while the horizontally


541
00:18:01,066 --> 00:18:02,826
scrolling content looks great on


542
00:18:02,826 --> 00:18:04,626
the big screen, it might be a


543
00:18:04,626 --> 00:18:05,986
little too horizontal.


544
00:18:06,566 --> 00:18:07,786
Let's vertically stack the


545
00:18:07,786 --> 00:18:09,786
categories by changing the main


546
00:18:09,786 --> 00:18:10,746
view's HStack to a VStack.


547
00:18:19,126 --> 00:18:21,186
And adding a nested scroll view


548
00:18:21,306 --> 00:18:22,926
around the row's HStack.


549
00:18:31,506 --> 00:18:31,946
Let's give this a run.


550
00:18:40,676 --> 00:18:42,286
Ah, this is feeling really,


551
00:18:42,286 --> 00:18:42,906
really great.


552
00:18:43,536 --> 00:18:45,106
It's super easy to browse


553
00:18:45,106 --> 00:18:47,346
between different categories and


554
00:18:47,636 --> 00:18:49,266
browse the landmarks within each


555
00:18:49,266 --> 00:18:49,876
category.


556
00:18:51,376 --> 00:18:52,806
Finally, let's take a look at


557
00:18:52,806 --> 00:18:54,526
the details page.


558
00:18:55,316 --> 00:18:57,706
Well, this beautiful edge to


559
00:18:57,706 --> 00:18:59,176
edge photograph of the landmark


560
00:18:59,176 --> 00:19:00,896
would be looking pretty nice if


561
00:19:00,896 --> 00:19:02,286
it wasn't obscured by all of


562
00:19:02,286 --> 00:19:03,396
this high density text.


563
00:19:04,296 --> 00:19:05,716
Let's see what we can do to make


564
00:19:05,716 --> 00:19:07,036
improvements for AppleTV.


565
00:19:07,036 --> 00:19:09,856
So let's take a look at the


566
00:19:09,856 --> 00:19:10,836
details view.


567
00:19:12,116 --> 00:19:13,216
It's a pretty simple view.


568
00:19:13,826 --> 00:19:15,556
We have a background displaying


569
00:19:15,556 --> 00:19:17,456
a photo of the landmark, a


570
00:19:17,456 --> 00:19:19,376
favorites button, and some


571
00:19:19,376 --> 00:19:20,226
historic details.


572
00:19:21,446 --> 00:19:22,986
Let's try displaying tourism


573
00:19:22,986 --> 00:19:23,476
details.


574
00:19:24,426 --> 00:19:25,386
Try one last time.


575
00:19:33,526 --> 00:19:34,946
Ah, that's looking so much


576
00:19:34,946 --> 00:19:35,306
better.


577
00:19:35,826 --> 00:19:37,596
Only the most relevant details


578
00:19:37,596 --> 00:19:39,536
are being displayed with nice


579
00:19:39,536 --> 00:19:41,006
large fonts that are easy to


580
00:19:41,006 --> 00:19:42,366
read from across the room.


581
00:19:43,416 --> 00:19:44,996
We can mark a few landmarks as


582
00:19:45,056 --> 00:19:46,786
favorited for when we do more


583
00:19:46,786 --> 00:19:48,996
detailed research on landmarks


584
00:19:48,996 --> 00:19:49,626
for MacOS.


585
00:19:52,516 --> 00:19:53,716
Now, back to you Jeff.


586
00:19:54,516 --> 00:19:56,726
[Applause]


587
00:19:57,226 --> 00:19:57,636
>> Thanks Ada.


588
00:19:58,836 --> 00:20:00,496
I love that Ada was able to take


589
00:20:01,066 --> 00:20:02,476
a pretty standard list-based UI


590
00:20:02,476 --> 00:20:04,776
and really make it feel at home


591
00:20:04,776 --> 00:20:06,956
on AppleTV just by rearranging a


592
00:20:06,956 --> 00:20:07,596
couple of pieces that she


593
00:20:07,596 --> 00:20:07,956
already had.


594
00:20:08,046 --> 00:20:10,106
I think that really shows how


595
00:20:10,106 --> 00:20:11,416
powerful this framework is.


596
00:20:12,466 --> 00:20:13,586
So now let's turn our attention


597
00:20:13,586 --> 00:20:14,556
to MacOS.


598
00:20:15,586 --> 00:20:17,296
Now there's a lot that goes into


599
00:20:17,296 --> 00:20:18,576
making a great Mac app and I


600
00:20:18,576 --> 00:20:19,806
could probably fill the whole


601
00:20:19,806 --> 00:20:21,746
hour if we had it, but I'm going


602
00:20:21,746 --> 00:20:23,386
to focus on a few key points


603
00:20:23,416 --> 00:20:24,836
that SwiftUI can really help you


604
00:20:24,836 --> 00:20:27,166
with-- high information density,


605
00:20:27,596 --> 00:20:28,816
multi windowing support,


606
00:20:29,286 --> 00:20:31,256
keyboard shortcuts, and support


607
00:20:31,256 --> 00:20:32,526
for the MacBook Pro Touch Bar.


608
00:20:33,086 --> 00:20:35,496
Let's start with high


609
00:20:35,586 --> 00:20:36,536
information density.


610
00:20:39,286 --> 00:20:40,236
We generally have a lot of


611
00:20:40,236 --> 00:20:41,496
screen real estate to work with


612
00:20:41,496 --> 00:20:43,396
on the Mac and so we can use


613
00:20:43,396 --> 00:20:44,756
that to provide more information


614
00:20:44,756 --> 00:20:45,516
at a glance.


615
00:20:46,126 --> 00:20:47,296
That can make it easier to make


616
00:20:47,296 --> 00:20:48,916
more, to make better decisions


617
00:20:48,916 --> 00:20:50,446
and make comparisons if you have


618
00:20:50,446 --> 00:20:52,146
all that information all in one


619
00:20:52,146 --> 00:20:52,706
place.


620
00:20:54,376 --> 00:20:55,976
And because we have a precision


621
00:20:55,976 --> 00:20:57,826
pointing device on the Mac, we


622
00:20:57,826 --> 00:20:59,016
can tolerate smaller click


623
00:20:59,046 --> 00:21:00,766
targets and denser controls.


624
00:21:01,116 --> 00:21:02,366
Now that doesn't mean that your


625
00:21:02,366 --> 00:21:03,726
app should look like an airplane


626
00:21:03,726 --> 00:21:05,116
cockpit, but it does mean that


627
00:21:05,116 --> 00:21:05,846
you can provide more


628
00:21:05,846 --> 00:21:07,416
functionality in one place and


629
00:21:07,416 --> 00:21:09,496
leave more room for your


630
00:21:10,696 --> 00:21:10,976
content.


631
00:21:11,106 --> 00:21:13,456
And the Mac is a great place to


632
00:21:13,456 --> 00:21:15,186
read lots of text content if you


633
00:21:15,186 --> 00:21:16,176
have text content.


634
00:21:17,296 --> 00:21:19,696
So app sessions are often longer


635
00:21:19,696 --> 00:21:21,076
on the Mac and you're usually


636
00:21:21,076 --> 00:21:22,406
using it seated so it's very


637
00:21:22,406 --> 00:21:23,356
comfortable to just scroll


638
00:21:23,356 --> 00:21:27,086
through some text and read it.


639
00:21:27,336 --> 00:21:29,196
Now SwiftUI automatically


640
00:21:29,196 --> 00:21:31,036
adjusts the spacing and paddings


641
00:21:31,036 --> 00:21:32,406
between elements to be


642
00:21:32,406 --> 00:21:34,966
appropriate for the Mac.


643
00:21:35,106 --> 00:21:37,526
And you can use the control size


644
00:21:37,526 --> 00:21:39,446
modifier to access the small and


645
00:21:39,446 --> 00:21:40,926
mini sized controls that we have


646
00:21:40,926 --> 00:21:42,586
available on the MacOS system.


647
00:21:43,006 --> 00:21:44,196
And that might be great if you


648
00:21:44,196 --> 00:21:46,026
want to make an entire inspector


649
00:21:46,366 --> 00:21:47,506
use small controls.


650
00:21:50,686 --> 00:21:51,666
Next multi windowing.


651
00:21:52,646 --> 00:21:53,666
You know multiple windows have


652
00:21:53,666 --> 00:21:55,196
been just a staple of the MacUI


653
00:21:55,196 --> 00:21:57,896
for decades, and people love


654
00:21:57,896 --> 00:21:58,836
using multiple windows.


655
00:21:59,156 --> 00:22:00,366
They love using multiple windows


656
00:22:00,406 --> 00:22:01,716
to compare content across


657
00:22:01,716 --> 00:22:03,406
windows side by side.


658
00:22:04,176 --> 00:22:06,826
It's often nice to pull a single


659
00:22:06,826 --> 00:22:08,406
item out into its own window so


660
00:22:08,406 --> 00:22:09,866
you can focus on it in detail.


661
00:22:10,576 --> 00:22:13,396
And many people love organizing


662
00:22:13,396 --> 00:22:14,626
their windows spatially across


663
00:22:14,656 --> 00:22:16,316
their desktop and spaces.


664
00:22:16,566 --> 00:22:17,836
And these are all capabilities


665
00:22:17,836 --> 00:22:19,246
that you unlock if you support


666
00:22:19,246 --> 00:22:19,946
multi windowing.


667
00:22:20,586 --> 00:22:22,026
And SwiftUI makes this super


668
00:22:22,026 --> 00:22:22,406
easy.


669
00:22:22,456 --> 00:22:24,236
I'll show you an example of that


670
00:22:24,236 --> 00:22:27,736
in a little bit.


671
00:22:27,956 --> 00:22:29,396
Next, keyboard shortcuts.


672
00:22:30,596 --> 00:22:31,746
Keyboard shortcuts are an


673
00:22:31,746 --> 00:22:33,146
essential part of a MacUI.


674
00:22:33,806 --> 00:22:35,546
Mac users and especially power


675
00:22:35,546 --> 00:22:37,406
users love using keyboard


676
00:22:37,406 --> 00:22:38,706
shortcuts to access common


677
00:22:38,706 --> 00:22:40,526
actions and just fly through


678
00:22:40,526 --> 00:22:41,606
your app's navigation.


679
00:22:42,826 --> 00:22:43,756
And supporting keyboard


680
00:22:43,756 --> 00:22:45,356
shortcuts in SwiftUI is really


681
00:22:45,356 --> 00:22:46,366
easy and I'm going to show you


682
00:22:46,426 --> 00:22:47,926
an example.


683
00:22:47,996 --> 00:22:49,156
So let's say we have a tab view.


684
00:22:49,646 --> 00:22:50,756
We've got three tabs for


685
00:22:50,756 --> 00:22:53,186
explore, hikes, and tours, and


686
00:22:53,186 --> 00:22:54,846
what we want to do is bind each


687
00:22:54,846 --> 00:22:56,286
of these tabs to command one,


688
00:22:56,286 --> 00:22:57,776
two, and three, so that we can


689
00:22:57,776 --> 00:22:58,766
switch between them really


690
00:22:58,766 --> 00:22:59,186
quickly.


691
00:23:00,236 --> 00:23:01,406
Now when we want to set up a


692
00:23:01,406 --> 00:23:02,516
keyboard shortcut on the Mac,


693
00:23:02,836 --> 00:23:04,156
the first place that we go is


694
00:23:04,156 --> 00:23:05,496
actually the Mac menu bar.


695
00:23:06,346 --> 00:23:07,316
We like to put keyboard


696
00:23:07,316 --> 00:23:08,796
shortcuts into the Mac menu bar


697
00:23:09,186 --> 00:23:10,116
because it makes them more


698
00:23:10,116 --> 00:23:12,066
discoverable and it ensures that


699
00:23:12,066 --> 00:23:13,656
whatever actions we're hooking


700
00:23:13,656 --> 00:23:15,846
up here are also accessible if


701
00:23:15,846 --> 00:23:17,256
you're using just a mouse.


702
00:23:17,976 --> 00:23:19,776
Now you could do this in code.


703
00:23:19,856 --> 00:23:21,276
I've gone ahead and set it up in


704
00:23:21,276 --> 00:23:22,076
my storyboard.


705
00:23:23,056 --> 00:23:24,606
And then what I've done is


706
00:23:24,606 --> 00:23:26,126
defined some commands for each


707
00:23:26,126 --> 00:23:27,436
of these keyboard shortcuts.


708
00:23:27,686 --> 00:23:31,226
A command is just a name for a


709
00:23:31,226 --> 00:23:33,346
command that can be sent through


710
00:23:33,346 --> 00:23:35,426
the SwiftUI hierarchy and we can


711
00:23:35,426 --> 00:23:37,186
use them to wrap the selectors


712
00:23:37,316 --> 00:23:38,446
sent by each of these menu


713
00:23:38,446 --> 00:23:38,956
items.


714
00:23:42,246 --> 00:23:44,146
Putting it all together, all we


715
00:23:44,146 --> 00:23:45,776
have to do is use the on command


716
00:23:45,776 --> 00:23:47,456
modifier attached to the view


717
00:23:47,456 --> 00:23:48,306
that we want to recognize


718
00:23:48,306 --> 00:23:48,876
commands on.


719
00:23:49,306 --> 00:23:51,576
In this case we pass in the


720
00:23:51,576 --> 00:23:52,726
command that we just defined a


721
00:23:52,726 --> 00:23:54,366
moment ago, as what was a block


722
00:23:54,366 --> 00:23:55,816
of code to run when the command


723
00:23:55,816 --> 00:23:56,376
occurs.


724
00:23:57,746 --> 00:23:58,966
Here we're just setting the


725
00:23:58,966 --> 00:24:00,426
selected tab variable that our


726
00:24:00,426 --> 00:24:01,906
tab view is already bound to.


727
00:24:02,486 --> 00:24:03,386
So when we use one of these


728
00:24:03,416 --> 00:24:04,766
commands, the selected tab


729
00:24:04,766 --> 00:24:06,486
variable updates, the tab view


730
00:24:06,536 --> 00:24:08,286
notices and updates itself as


731
00:24:08,286 --> 00:24:08,576
well.


732
00:24:12,256 --> 00:24:14,026
If you want to know more about


733
00:24:14,206 --> 00:24:15,486
recognizing keyboard shortcuts


734
00:24:15,486 --> 00:24:16,506
and other system level


735
00:24:16,506 --> 00:24:17,796
integrations like this you


736
00:24:17,796 --> 00:24:18,776
should check out the integrating


737
00:24:18,776 --> 00:24:20,186
SwiftUI talk from this year.


738
00:24:22,396 --> 00:24:23,966
Finally, the Touch Bar.


739
00:24:25,286 --> 00:24:26,396
The Touch Bar is another great


740
00:24:26,396 --> 00:24:28,176
way to accelerate common actions


741
00:24:28,176 --> 00:24:28,716
on your Mac.


742
00:24:29,606 --> 00:24:30,636
It brings the most common and


743
00:24:30,636 --> 00:24:32,756
contextual actions right at your


744
00:24:32,756 --> 00:24:33,516
fingertips.


745
00:24:34,066 --> 00:24:36,146
And supporting the Touch Bar in


746
00:24:36,146 --> 00:24:37,816
SwiftUI is easier than ever.


747
00:24:39,246 --> 00:24:40,106
I'll show you an example.


748
00:24:40,866 --> 00:24:42,226
We define a Touch Bar in code


749
00:24:42,356 --> 00:24:43,596
and then just like we're


750
00:24:43,596 --> 00:24:46,336
populating a list or a stack, we


751
00:24:46,336 --> 00:24:47,416
just put the elements that we


752
00:24:47,416 --> 00:24:48,656
want in the Touch Bar one by


753
00:24:48,656 --> 00:24:48,966
one.


754
00:24:50,596 --> 00:24:52,396
And when we want to attach this


755
00:24:52,396 --> 00:24:54,246
to a view, we'll just use the


756
00:24:54,246 --> 00:24:57,116
dot Touch Bar modifier, passing


757
00:24:57,116 --> 00:24:58,156
in the Touch Bar that we're just


758
00:24:58,156 --> 00:24:58,586
defined.


759
00:24:58,586 --> 00:25:00,246
And it's that easy.


760
00:25:01,056 --> 00:25:01,966
Whenever this view is the


761
00:25:01,966 --> 00:25:03,546
focused view or the nearest


762
00:25:03,546 --> 00:25:04,936
ancestor of the focused view,


763
00:25:05,056 --> 00:25:06,206
these controls will appear in


764
00:25:06,206 --> 00:25:07,736
the Touch Bar hardware.


765
00:25:10,366 --> 00:25:11,686
Now let's go back to our demo so


766
00:25:11,686 --> 00:25:12,676
we can put some of these into


767
00:25:12,676 --> 00:25:13,896
practice for Landmarks for


768
00:25:13,896 --> 00:25:14,596
MacOS.


769
00:25:18,906 --> 00:25:20,216
Okay here we are in Xcode.


770
00:25:21,606 --> 00:25:22,416
Let's just build and run


771
00:25:22,416 --> 00:25:23,866
Landmarks for MacOS so we can


772
00:25:23,866 --> 00:25:24,816
see where we're starting.


773
00:25:27,636 --> 00:25:30,456
Okay, we have a fairly standard


774
00:25:30,456 --> 00:25:32,306
master detail view here where


775
00:25:32,376 --> 00:25:33,766
we've got a list of landmarks on


776
00:25:33,766 --> 00:25:35,326
the left and the details on the


777
00:25:35,326 --> 00:25:35,596
right.


778
00:25:37,276 --> 00:25:38,496
We've also added some filtering


779
00:25:38,496 --> 00:25:39,936
controls so that we can go


780
00:25:40,066 --> 00:25:42,036
filter down by category or we


781
00:25:42,036 --> 00:25:43,086
can choose to see only our


782
00:25:43,086 --> 00:25:43,706
favorites.


783
00:25:44,306 --> 00:25:47,086
Now the really neat thing is


784
00:25:47,086 --> 00:25:48,506
that this list I've got here on


785
00:25:48,506 --> 00:25:50,016
the left side is actually


786
00:25:50,016 --> 00:25:50,886
something that I shared


787
00:25:50,886 --> 00:25:52,366
completely with iOS.


788
00:25:52,896 --> 00:25:53,606
And that was great.


789
00:25:53,606 --> 00:25:54,716
It gave me a really big head


790
00:25:54,716 --> 00:25:55,936
start to making this app.


791
00:25:56,506 --> 00:25:57,616
And I didn't have to do any


792
00:25:57,616 --> 00:25:58,266
adaptation.


793
00:25:58,266 --> 00:25:59,286
I didn't have to adapt it to a


794
00:25:59,286 --> 00:26:00,486
new data source or delegate


795
00:26:00,486 --> 00:26:02,006
protocol or anything like that.


796
00:26:02,436 --> 00:26:03,476
I just got it for free.


797
00:26:04,966 --> 00:26:06,596
But I do think that this list


798
00:26:06,676 --> 00:26:07,916
could look better on the Mac.


799
00:26:08,536 --> 00:26:09,976
I wish I could see more elements


800
00:26:09,976 --> 00:26:11,626
in my scroll view at once and


801
00:26:11,626 --> 00:26:13,066
I'd love to have more details in


802
00:26:13,066 --> 00:26:13,516
each row.


803
00:26:16,286 --> 00:26:17,436
Let's start by taking a look at


804
00:26:17,436 --> 00:26:18,296
how this is defined.


805
00:26:18,956 --> 00:26:22,096
In our landmark list we've gone


806
00:26:22,096 --> 00:26:23,496
ahead and actually defined a Mac


807
00:26:23,596 --> 00:26:25,346
landmark list that wraps this


808
00:26:25,346 --> 00:26:26,856
landmark list which is a common


809
00:26:26,856 --> 00:26:27,736
element that I discussed


810
00:26:27,736 --> 00:26:28,166
earlier.


811
00:26:29,486 --> 00:26:30,496
Structuring our project like


812
00:26:30,536 --> 00:26:32,436
this is really handy because it


813
00:26:32,436 --> 00:26:33,806
means that I can still mostly


814
00:26:33,806 --> 00:26:35,106
share the implementation of this


815
00:26:35,106 --> 00:26:36,706
list but it gives me a place to


816
00:26:36,706 --> 00:26:37,726
put my Mac specific


817
00:26:37,726 --> 00:26:38,576
customizations.


818
00:26:39,126 --> 00:26:41,426
Let's follow this to look at how


819
00:26:41,426 --> 00:26:42,116
this is defined.


820
00:26:42,716 --> 00:26:45,146
We have some filter criteria


821
00:26:45,146 --> 00:26:46,136
that just describes the


822
00:26:46,136 --> 00:26:47,286
configuration of our filter


823
00:26:47,286 --> 00:26:48,186
controls that we looked at


824
00:26:48,186 --> 00:26:48,576
earlier.


825
00:26:49,186 --> 00:26:50,016
We have a binding to the


826
00:26:50,016 --> 00:26:51,486
selected landmarks the list-- so


827
00:26:51,486 --> 00:26:52,796
that the list can show and


828
00:26:52,796 --> 00:26:53,366
modify it.


829
00:26:54,176 --> 00:26:55,376
And we have some user data so


830
00:26:55,406 --> 00:26:56,686
that we know what landmarks are


831
00:26:56,686 --> 00:26:57,196
favorited.


832
00:26:58,346 --> 00:26:59,816
And the list is pretty simple.


833
00:26:59,816 --> 00:27:00,836
You've probably seen this a


834
00:27:00,836 --> 00:27:01,716
number of times already.


835
00:27:01,806 --> 00:27:03,966
We have a list we use for each


836
00:27:03,966 --> 00:27:05,106
to iterate over all of our


837
00:27:05,106 --> 00:27:06,006
landmarks to display.


838
00:27:06,006 --> 00:27:07,926
And then we create a landmark


839
00:27:07,926 --> 00:27:08,676
row for each one.


840
00:27:09,286 --> 00:27:12,156
And this is a hard-coded type


841
00:27:12,156 --> 00:27:12,526
here.


842
00:27:12,526 --> 00:27:13,716
It's just, this is the type of


843
00:27:13,716 --> 00:27:14,676
row that we're using right now.


844
00:27:15,636 --> 00:27:16,876
Now we could start doing


845
00:27:16,876 --> 00:27:18,776
something like poundif [assumed


846
00:27:18,836 --> 00:27:20,626
spelling] to exchange what


847
00:27:20,806 --> 00:27:21,816
landmark where we're using on


848
00:27:21,816 --> 00:27:23,396
each OS but I really don't want


849
00:27:23,396 --> 00:27:24,256
to do this as a hack.


850
00:27:24,426 --> 00:27:25,866
I want to build a tool that I


851
00:27:25,866 --> 00:27:26,666
can reuse.


852
00:27:27,466 --> 00:27:28,526
And so let me show you how I'm


853
00:27:28,526 --> 00:27:28,976
going to do that.


854
00:27:34,476 --> 00:27:39,586
So I'm going to redefine this


855
00:27:43,356 --> 00:27:45,376
list to be generic over the type


856
00:27:45,376 --> 00:27:46,356
of landmark row that we're going


857
00:27:46,356 --> 00:27:46,826
to use.


858
00:27:47,436 --> 00:27:51,726
And then I'm going to add a


859
00:27:51,726 --> 00:27:58,036
property which is a closure from


860
00:27:58,036 --> 00:28:00,306
the landmark to the row type


861
00:28:00,306 --> 00:28:01,326
that we've just defined as a


862
00:28:01,326 --> 00:28:02,666
generic type.


863
00:28:04,086 --> 00:28:06,066
And then instead of using a


864
00:28:06,236 --> 00:28:07,846
hard-coded type here I'm going


865
00:28:07,846 --> 00:28:11,546
to delegate the creation of the


866
00:28:11,596 --> 00:28:13,536
row to my block.


867
00:28:14,326 --> 00:28:17,856
Now, to adapt that in my Mac


868
00:28:17,856 --> 00:28:21,106
landmark list, all I have to do


869
00:28:21,106 --> 00:28:23,776
is update my type definition


870
00:28:23,776 --> 00:28:27,096
here, add the closure that I


871
00:28:27,096 --> 00:28:27,926
just described, the row


872
00:28:27,926 --> 00:28:34,756
provider, and return a row type.


873
00:28:34,946 --> 00:28:36,756
Luckily like any good TV demo I


874
00:28:36,756 --> 00:28:38,206
had one baking in the oven all


875
00:28:38,206 --> 00:28:39,656
along so we'll just use that


876
00:28:40,876 --> 00:28:41,016
one.


877
00:28:44,056 --> 00:28:45,586
Let's take a look at how that


878
00:28:45,586 --> 00:28:46,816
looks now.


879
00:28:49,486 --> 00:28:50,486
Now this is a lot better.


880
00:28:51,206 --> 00:28:52,246
My rows are a little bit more


881
00:28:52,246 --> 00:28:52,766
compact.


882
00:28:53,196 --> 00:28:54,546
I've added some more details to


883
00:28:54,546 --> 00:28:56,186
each one and I can even see at a


884
00:28:56,186 --> 00:28:57,536
glance which ones are favorited,


885
00:28:58,606 --> 00:28:59,516
and that's really nice.


886
00:29:00,086 --> 00:29:01,566
And the great thing here is that


887
00:29:01,566 --> 00:29:02,956
my list implementation is still


888
00:29:02,956 --> 00:29:03,986
completely shared.


889
00:29:04,506 --> 00:29:06,436
So if I still had-- if I had


890
00:29:06,436 --> 00:29:08,236
like really advanced filtering,


891
00:29:08,236 --> 00:29:10,096
sorting, or grouping logic, or


892
00:29:10,096 --> 00:29:11,846
if it was especially fancy,


893
00:29:11,846 --> 00:29:12,706
let's say I had some


894
00:29:12,706 --> 00:29:14,036
asynchronous work that was going


895
00:29:14,036 --> 00:29:15,026
to a database or to the


896
00:29:15,026 --> 00:29:16,826
internet, you know personally I


897
00:29:16,826 --> 00:29:17,896
only want to write that code


898
00:29:17,946 --> 00:29:18,456
once.


899
00:29:18,706 --> 00:29:20,466
And now we can and we don't have


900
00:29:20,496 --> 00:29:22,186
to compromise on our design to


901
00:29:22,186 --> 00:29:22,926
do it.


902
00:29:23,936 --> 00:29:25,676
The next thing that I'd love to


903
00:29:25,676 --> 00:29:27,096
be able to do is to double click


904
00:29:27,096 --> 00:29:28,416
one of these rows to pop it out


905
00:29:28,416 --> 00:29:29,396
into its own window.


906
00:29:29,396 --> 00:29:31,546
And that's also really easy.


907
00:29:31,546 --> 00:29:32,316
I'm going to show you how.


908
00:29:32,996 --> 00:29:34,376
The first thing that we need to


909
00:29:34,376 --> 00:29:37,106
do is create a window and on the


910
00:29:37,106 --> 00:29:38,736
Mac, even when we're defining


911
00:29:38,736 --> 00:29:40,646
our views with SwiftUI, we use


912
00:29:40,646 --> 00:29:42,196
AppKit to define our windows.


913
00:29:45,336 --> 00:29:46,326
Now I could do this in my


914
00:29:46,326 --> 00:29:48,436
storyboard but the code is


915
00:29:48,436 --> 00:29:49,406
really short so I'm just going


916
00:29:49,406 --> 00:29:50,036
to show it to you.


917
00:29:50,896 --> 00:29:52,736
We have a window controller and


918
00:29:53,526 --> 00:29:54,886
then I've defined a convenience


919
00:29:54,886 --> 00:29:56,456
initializer that takes a SwiftUI


920
00:29:56,456 --> 00:29:58,576
view, puts it into a hosting


921
00:29:58,576 --> 00:30:00,456
controller, and then creates a


922
00:30:00,456 --> 00:30:01,716
window around that hosting


923
00:30:01,716 --> 00:30:01,976
controller.


924
00:30:03,286 --> 00:30:04,746
I've also written a little bit


925
00:30:04,746 --> 00:30:06,426
of convenience code here that


926
00:30:06,426 --> 00:30:07,756
just keeps track of which


927
00:30:07,756 --> 00:30:09,316
windows exist per landmark


928
00:30:09,316 --> 00:30:10,876
already so that if I double


929
00:30:10,876 --> 00:30:12,156
click on a row that already has


930
00:30:12,156 --> 00:30:13,456
a window, it'll bring the


931
00:30:13,456 --> 00:30:15,376
existing window front instead of


932
00:30:15,456 --> 00:30:16,766
creating a new one every time.


933
00:30:20,146 --> 00:30:21,486
Let's go back to our list and


934
00:30:21,486 --> 00:30:22,336
add this integration.


935
00:30:23,546 --> 00:30:30,486
So, detail-- let's add a quick


936
00:30:32,006 --> 00:30:32,936
convenience method--


937
00:30:38,596 --> 00:30:42,066
shared-- to show a window for a


938
00:30:42,066 --> 00:30:42,686
given landmark.


939
00:30:43,946 --> 00:30:45,506
And then to attach it to my row,


940
00:30:45,586 --> 00:30:48,496
I can just add a tap action with


941
00:30:48,496 --> 00:30:49,916
a count of two because I only


942
00:30:49,916 --> 00:30:50,816
want it to recognize double


943
00:30:50,816 --> 00:30:54,956
clicks, and then in this tap


944
00:30:54,956 --> 00:30:55,886
action I'll call my show detail


945
00:30:55,886 --> 00:30:56,946
for landmark method.


946
00:31:06,796 --> 00:31:08,546
Now, when I double click on my


947
00:31:08,546 --> 00:31:11,606
rows, I can pull them out into


948
00:31:11,606 --> 00:31:13,006
their own windows and I can put


949
00:31:13,006 --> 00:31:14,006
them side by side, arrange them


950
00:31:14,006 --> 00:31:14,696
however I'd like.


951
00:31:15,236 --> 00:31:16,246
And because these are still


952
00:31:16,246 --> 00:31:18,046
AppKit windows I can use all of


953
00:31:18,046 --> 00:31:19,026
the great windowing features


954
00:31:19,026 --> 00:31:19,736
that are built in.


955
00:31:19,796 --> 00:31:21,446
So if I like tabs I can merge


956
00:31:21,446 --> 00:31:22,556
them into tabs and it's just


957
00:31:22,556 --> 00:31:22,976
like that.


958
00:31:22,976 --> 00:31:24,166
I get that completely for free


959
00:31:24,166 --> 00:31:24,976
which is really great.


960
00:31:25,516 --> 00:31:30,886
[ Applause ]


961
00:31:31,386 --> 00:31:32,566
And with that, I think that the


962
00:31:32,566 --> 00:31:33,446
Mac version of this app is


963
00:31:33,446 --> 00:31:34,666
starting to look pretty good so


964
00:31:34,666 --> 00:31:36,096
I'm going to go ahead and go


965
00:31:36,096 --> 00:31:37,106
back to our slides.


966
00:31:37,106 --> 00:31:40,546
So now that we've seen SwiftUI


967
00:31:40,546 --> 00:31:43,616
on AppleTV and Mac, it's time to


968
00:31:43,616 --> 00:31:44,576
turn our attention to Apple


969
00:31:44,576 --> 00:31:44,986
Watch.


970
00:31:45,486 --> 00:31:46,736
You know SwiftUI is the first


971
00:31:46,736 --> 00:31:47,926
truly native framework for


972
00:31:47,926 --> 00:31:49,236
building apps on Apple Watch and


973
00:31:49,236 --> 00:31:50,346
I think it's going to really


974
00:31:50,516 --> 00:31:52,046
broaden our horizons for what's


975
00:31:52,046 --> 00:31:52,616
possible.


976
00:31:52,976 --> 00:31:53,966
And to walk us through some of


977
00:31:53,966 --> 00:31:55,776
those possibilities, I'd like to


978
00:31:55,776 --> 00:31:56,786
hand it over to my colleague


979
00:31:56,816 --> 00:31:57,176
Meghna.


980
00:31:58,516 --> 00:32:00,556
[ Applause ]


981
00:32:01,056 --> 00:32:01,506
>> Thank you.


982
00:32:02,516 --> 00:32:06,276
[Applause]


983
00:32:06,776 --> 00:32:07,616
Thanks Jeff.


984
00:32:08,346 --> 00:32:10,686
With SwiftUI and all the amazing


985
00:32:10,686 --> 00:32:12,686
things you've learned so far you


986
00:32:12,686 --> 00:32:14,186
are bound to be on track to


987
00:32:14,186 --> 00:32:15,646
build an app that provides an


988
00:32:15,716 --> 00:32:17,436
awesome experience on all


989
00:32:17,436 --> 00:32:18,346
devices.


990
00:32:18,946 --> 00:32:21,396
Hi, I'm Meghna and now I'm going


991
00:32:21,396 --> 00:32:22,776
to talk to you about bringing


992
00:32:22,776 --> 00:32:24,226
this great experience to your


993
00:32:24,226 --> 00:32:25,786
Apple Watch App.


994
00:32:26,996 --> 00:32:28,826
While your experience may be


995
00:32:28,876 --> 00:32:30,476
rooted in your application,


996
00:32:30,846 --> 00:32:32,846
building for WatchOS means so


997
00:32:32,846 --> 00:32:33,436
much more.


998
00:32:34,656 --> 00:32:37,446
Complications, Siri shortcuts,


999
00:32:37,666 --> 00:32:40,166
and notifications all contribute


1000
00:32:40,166 --> 00:32:41,486
to showing the most timely


1001
00:32:41,486 --> 00:32:43,516
information right on your Apple


1002
00:32:43,516 --> 00:32:44,166
Watch face.


1003
00:32:45,226 --> 00:32:47,226
Apple Watch is all about showing


1004
00:32:47,226 --> 00:32:48,496
the right information at the


1005
00:32:48,496 --> 00:32:49,106
right time.


1006
00:32:50,206 --> 00:32:51,736
For the purposes of this talk,


1007
00:32:52,026 --> 00:32:53,796
I'm going to focus on the app


1008
00:32:53,796 --> 00:32:54,856
and notifications.


1009
00:32:55,526 --> 00:32:58,086
We'll start with talking about


1010
00:32:58,086 --> 00:32:59,576
how SwiftUI allows you to


1011
00:32:59,576 --> 00:33:01,706
display elements and lay out


1012
00:33:01,706 --> 00:33:03,746
your Apps UI like never before.


1013
00:33:05,126 --> 00:33:06,036
But first things first.


1014
00:33:06,036 --> 00:33:08,936
A good rule while building an


1015
00:33:08,936 --> 00:33:11,256
Apple Watch experience is to aim


1016
00:33:11,256 --> 00:33:13,046
for the primary information or


1017
00:33:13,046 --> 00:33:14,976
the most critical action to be


1018
00:33:14,976 --> 00:33:16,596
available within two or three


1019
00:33:16,596 --> 00:33:16,776
taps.


1020
00:33:18,106 --> 00:33:19,726
While designing this experience,


1021
00:33:19,996 --> 00:33:22,036
the aim isn't to shrink down


1022
00:33:22,036 --> 00:33:23,906
your iPhone app but to bring the


1023
00:33:23,906 --> 00:33:26,216
most timely and relevant actions


1024
00:33:26,216 --> 00:33:27,856
to the context of your wrist.


1025
00:33:28,466 --> 00:33:31,176
With that, let's dive into some


1026
00:33:31,236 --> 00:33:33,166
SwiftUI simple concepts.


1027
00:33:34,006 --> 00:33:35,426
If you have content that exceeds


1028
00:33:35,426 --> 00:33:37,386
the bounds of a full screen, you


1029
00:33:37,386 --> 00:33:39,266
can wrap it in a SwiftUI scroll


1030
00:33:39,266 --> 00:33:39,766
view.


1031
00:33:41,056 --> 00:33:43,166
SwiftUI also gives you this


1032
00:33:43,246 --> 00:33:45,236
great new digital crown rotation


1033
00:33:45,236 --> 00:33:47,596
API which lets you completely


1034
00:33:47,596 --> 00:33:49,396
control rotation and haptics.


1035
00:33:49,956 --> 00:33:52,546
This API also opens the door to


1036
00:33:52,666 --> 00:33:54,946
using the digital crown in all


1037
00:33:54,946 --> 00:33:56,676
new ways to modify interface


1038
00:33:56,676 --> 00:33:57,356
elements.


1039
00:33:57,666 --> 00:33:59,136
This is something that was never


1040
00:33:59,136 --> 00:34:02,196
possible before.


1041
00:34:02,346 --> 00:34:04,016
You're also probably familiar


1042
00:34:04,016 --> 00:34:05,596
with groups in WatchKit.


1043
00:34:06,296 --> 00:34:08,666
SwiftUI now gives you much more


1044
00:34:08,666 --> 00:34:10,176
powerful ways to organize your


1045
00:34:10,176 --> 00:34:12,216
content with horizontal and


1046
00:34:12,216 --> 00:34:13,186
vertical stacks.


1047
00:34:14,596 --> 00:34:16,666
Tabulating information has never


1048
00:34:16,666 --> 00:34:18,866
been easier than with lists and


1049
00:34:18,866 --> 00:34:19,976
with list sections.


1050
00:34:22,275 --> 00:34:24,886
Lastly, identifying what your


1051
00:34:24,886 --> 00:34:26,485
users care about the most on


1052
00:34:26,485 --> 00:34:28,716
your Apple Watch App will help


1053
00:34:28,716 --> 00:34:30,186
you decide what kind of data to


1054
00:34:30,186 --> 00:34:30,666
surface.


1055
00:34:31,295 --> 00:34:32,476
With the views and controls


1056
00:34:32,476 --> 00:34:34,596
provided by SwiftUI, you can


1057
00:34:34,596 --> 00:34:35,985
easily build an interface that


1058
00:34:35,985 --> 00:34:37,266
conveys the most crucial


1059
00:34:37,266 --> 00:34:39,045
information first.


1060
00:34:39,815 --> 00:34:42,326
Notifications are a great way to


1061
00:34:42,326 --> 00:34:44,866
give timely updates, however,


1062
00:34:45,295 --> 00:34:47,366
too much information or content


1063
00:34:47,366 --> 00:34:48,616
that isn't useful may lead


1064
00:34:48,646 --> 00:34:50,476
people to turn them off for your


1065
00:34:50,476 --> 00:34:50,706
app.


1066
00:34:52,335 --> 00:34:54,496
SwiftUI gives you the ability to


1067
00:34:54,576 --> 00:34:56,466
easily provide intuitive and


1068
00:34:56,466 --> 00:34:58,526
beneficial controls so people


1069
00:34:58,526 --> 00:35:00,336
can respond from within your app


1070
00:35:00,746 --> 00:35:02,136
and not have to dismiss the


1071
00:35:02,136 --> 00:35:03,026
notification.


1072
00:35:03,996 --> 00:35:05,376
Making your notifications


1073
00:35:05,376 --> 00:35:07,666
actionable as possible, you can


1074
00:35:07,666 --> 00:35:09,846
allow people to quickly respond.


1075
00:35:12,316 --> 00:35:14,346
When you send your notification


1076
00:35:14,406 --> 00:35:16,236
can be just as important as what


1077
00:35:16,236 --> 00:35:17,056
you send in it.


1078
00:35:17,796 --> 00:35:19,376
Try to use what you know about


1079
00:35:19,376 --> 00:35:21,576
how someone uses your app and


1080
00:35:21,576 --> 00:35:22,956
with that information you can


1081
00:35:23,056 --> 00:35:24,836
send the most timely information


1082
00:35:24,836 --> 00:35:27,136
at the most appropriate time.


1083
00:35:28,436 --> 00:35:30,386
With these powerful new SwiftUI


1084
00:35:30,386 --> 00:35:31,986
concepts and a better


1085
00:35:31,986 --> 00:35:33,466
understanding of what makes a


1086
00:35:33,466 --> 00:35:34,786
great Apple Watch experience,


1087
00:35:35,286 --> 00:35:36,166
let's take a look at the


1088
00:35:36,166 --> 00:35:37,736
landmarks app where we put some


1089
00:35:37,736 --> 00:35:39,016
of these concepts to use.


1090
00:35:39,086 --> 00:35:42,436
Using the app you've built with


1091
00:35:42,436 --> 00:35:44,566
SwiftUI for all the other


1092
00:35:44,566 --> 00:35:46,256
devices you're going to have a


1093
00:35:46,256 --> 00:35:47,476
functional Apple Watch App.


1094
00:35:48,046 --> 00:35:50,126
However, it may not be the best


1095
00:35:50,126 --> 00:35:51,206
Apple Watch experience.


1096
00:35:51,586 --> 00:35:53,376
I'm going to show you how, with


1097
00:35:53,376 --> 00:35:55,986
a few tweaks and updates, you're


1098
00:35:55,986 --> 00:35:57,146
going to be able to bring this


1099
00:35:57,146 --> 00:35:58,316
app more in line with the


1100
00:35:58,316 --> 00:36:00,006
context of the wrist.


1101
00:36:02,036 --> 00:36:03,436
Well the first thing you see


1102
00:36:03,436 --> 00:36:04,996
here is that we've built a


1103
00:36:05,226 --> 00:36:06,396
landmarks list.


1104
00:36:07,076 --> 00:36:08,596
For the watch landmarks, we've


1105
00:36:08,596 --> 00:36:10,056
gone ahead and customized the


1106
00:36:10,056 --> 00:36:11,106
details cell.


1107
00:36:11,696 --> 00:36:14,716
We've included an image for some


1108
00:36:14,716 --> 00:36:15,376
context.


1109
00:36:15,996 --> 00:36:17,426
We've included some tool details


1110
00:36:17,666 --> 00:36:19,156
and we've also added some


1111
00:36:19,156 --> 00:36:20,316
contact capabilities.


1112
00:36:21,266 --> 00:36:22,446
Now some of these things like


1113
00:36:22,446 --> 00:36:24,106
the contact capabilities don't


1114
00:36:24,106 --> 00:36:26,296
add too much value to say, an


1115
00:36:26,296 --> 00:36:28,696
AppleTV app but they work great


1116
00:36:28,696 --> 00:36:30,566
inside an Apple Watch App.


1117
00:36:32,416 --> 00:36:34,466
But that was still way too much


1118
00:36:34,466 --> 00:36:36,496
content to scroll so what we


1119
00:36:36,496 --> 00:36:38,166
decided to do is to narrow it


1120
00:36:38,206 --> 00:36:39,586
down to just our favorites.


1121
00:36:40,476 --> 00:36:42,326
To do that we created a simple


1122
00:36:42,376 --> 00:36:43,156
Swift filter.


1123
00:36:44,666 --> 00:36:46,026
Since we've narrowed this data


1124
00:36:46,026 --> 00:36:48,226
down, we also wanted users to


1125
00:36:48,226 --> 00:36:49,776
have an option to see all the


1126
00:36:49,776 --> 00:36:51,046
landmarks if they chose to.


1127
00:36:52,046 --> 00:36:53,686
That was possible with adding


1128
00:36:53,686 --> 00:36:54,296
this button.


1129
00:36:55,146 --> 00:36:56,616
This button simply toggles the


1130
00:36:56,616 --> 00:36:58,226
state between showing all and


1131
00:36:58,226 --> 00:37:00,046
showing favorites based on the


1132
00:37:00,046 --> 00:37:01,026
view that you're in.


1133
00:37:02,026 --> 00:37:03,716
SwiftUI gives you this unique


1134
00:37:03,716 --> 00:37:05,486
ability to pick the pieces that


1135
00:37:05,486 --> 00:37:07,226
interest you for your app and


1136
00:37:07,226 --> 00:37:09,146
compose the views that work best


1137
00:37:09,336 --> 00:37:10,326
for your interface.


1138
00:37:12,976 --> 00:37:15,306
We wanted to be able to focus on


1139
00:37:15,306 --> 00:37:17,306
each cell more when we scroll.


1140
00:37:18,176 --> 00:37:20,136
With SwiftUI we were able to do


1141
00:37:20,136 --> 00:37:21,736
that with the carousel list


1142
00:37:21,736 --> 00:37:22,186
style.


1143
00:37:23,236 --> 00:37:24,926
This list style is great when


1144
00:37:24,926 --> 00:37:26,716
you have a fewer number of cells


1145
00:37:27,206 --> 00:37:28,516
or when you have cells with


1146
00:37:28,546 --> 00:37:29,766
interactive controls.


1147
00:37:30,556 --> 00:37:33,266
Here our cell has buttons for


1148
00:37:33,266 --> 00:37:35,426
contacting, for making a phone


1149
00:37:35,426 --> 00:37:37,756
call, for adding or removing the


1150
00:37:37,756 --> 00:37:39,556
landmark from favorites, and


1151
00:37:39,556 --> 00:37:41,016
having some navigation


1152
00:37:41,086 --> 00:37:41,826
capabilities.


1153
00:37:44,436 --> 00:37:46,526
Lastly, notifications.


1154
00:37:47,256 --> 00:37:49,256
For the landmarks app we wanted


1155
00:37:49,256 --> 00:37:50,626
to notify you when a new tour


1156
00:37:50,626 --> 00:37:51,326
has been added.


1157
00:37:51,946 --> 00:37:53,556
We wanted to add some images so


1158
00:37:53,556 --> 00:37:55,286
you can decide if you're


1159
00:37:55,286 --> 00:37:56,516
interested in this tour.


1160
00:37:56,996 --> 00:37:58,646
And also give you the ability to


1161
00:37:58,886 --> 00:38:00,026
book it from within the


1162
00:38:00,026 --> 00:38:00,916
notification.


1163
00:38:02,146 --> 00:38:04,336
Using the power of Swift, you


1164
00:38:04,336 --> 00:38:06,086
not only have the textual


1165
00:38:06,086 --> 00:38:08,286
information but you also have


1166
00:38:08,286 --> 00:38:09,876
this gorgeous, rich animation


1167
00:38:09,876 --> 00:38:11,206
moving the images.


1168
00:38:12,286 --> 00:38:13,606
Instead of just talking to you


1169
00:38:13,606 --> 00:38:14,896
about it I'm going to show you


1170
00:38:14,896 --> 00:38:16,196
how we built this.


1171
00:38:24,336 --> 00:38:25,796
So what you see here is that


1172
00:38:25,796 --> 00:38:28,946
I've created a structure for a


1173
00:38:28,946 --> 00:38:30,316
new tour notification.


1174
00:38:31,066 --> 00:38:32,706
Now I've already gone ahead and


1175
00:38:32,706 --> 00:38:34,526
hooked this notification up to


1176
00:38:34,526 --> 00:38:36,726
my notification controller which


1177
00:38:36,726 --> 00:38:38,996
means that whatever is in this


1178
00:38:38,996 --> 00:38:40,876
body is what you see inside the


1179
00:38:40,876 --> 00:38:42,526
notification after I run this


1180
00:38:42,526 --> 00:38:42,936
scheme.


1181
00:38:44,336 --> 00:38:45,426
This struct [phonetic] takes in


1182
00:38:45,426 --> 00:38:48,066
a landmark as a parameter which


1183
00:38:48,066 --> 00:38:49,256
is what the notification will


1184
00:38:49,256 --> 00:38:52,186
ideally pass to it.


1185
00:38:52,466 --> 00:38:56,266
Now let's go ahead and add some


1186
00:38:56,266 --> 00:38:56,716
text.


1187
00:39:08,426 --> 00:39:10,836
Okay so what we've done here is


1188
00:39:10,836 --> 00:39:13,416
that we've created a stack that


1189
00:39:13,416 --> 00:39:14,396
includes some textual


1190
00:39:14,396 --> 00:39:15,106
information.


1191
00:39:15,316 --> 00:39:17,166
The only reason I have a stack


1192
00:39:17,166 --> 00:39:18,496
here is because I'm going to add


1193
00:39:18,586 --> 00:39:20,926
some more data inside this.


1194
00:39:29,276 --> 00:39:31,156
In here we have decided a struct


1195
00:39:31,196 --> 00:39:33,206
called slideshow which takes in


1196
00:39:33,206 --> 00:39:34,436
an array of strings.


1197
00:39:35,156 --> 00:39:37,626
These strings are image names.


1198
00:39:40,036 --> 00:39:41,696
We have a variable which is


1199
00:39:41,696 --> 00:39:43,036
called the current index which


1200
00:39:43,036 --> 00:39:44,696
is essentially just to track


1201
00:39:45,046 --> 00:39:46,446
which image you're on at this


1202
00:39:46,546 --> 00:39:46,926
point.


1203
00:39:48,956 --> 00:39:50,696
Tour image is a custom


1204
00:39:50,816 --> 00:39:52,046
struct that I've created


1205
00:39:52,176 --> 00:39:53,026
which is a view.


1206
00:39:53,596 --> 00:39:55,826
It takes in an image name that


1207
00:39:55,826 --> 00:39:57,226
aligns the image correctly


1208
00:39:57,226 --> 00:39:58,276
inside my app.


1209
00:39:59,656 --> 00:40:01,376
Let's see how this looks in the


1210
00:40:01,526 --> 00:40:02,946
previews so far.


1211
00:40:17,456 --> 00:40:19,386
Now, the next thing I want to be


1212
00:40:19,386 --> 00:40:24,076
able to add here is an ID for an


1213
00:40:24,076 --> 00:40:24,646
image.


1214
00:40:25,206 --> 00:40:27,406
That way when we animate this we


1215
00:40:27,406 --> 00:40:29,476
will have a proper track of what


1216
00:40:29,476 --> 00:40:30,956
view needs to be inserted and


1217
00:40:30,956 --> 00:40:31,976
what view needs to be removed.


1218
00:40:39,046 --> 00:40:40,686
At this point it looks like--


1219
00:40:40,686 --> 00:40:41,836
okay we have our text here,


1220
00:40:41,836 --> 00:40:43,456
great-- at this point it looks


1221
00:40:43,486 --> 00:40:44,876
like we can go ahead and add


1222
00:40:44,876 --> 00:40:46,956
this slideshow struct inside our


1223
00:40:46,956 --> 00:40:48,186
notifications body.


1224
00:40:50,896 --> 00:40:52,646
All right so once this updates


1225
00:40:52,646 --> 00:40:53,796
we should be able to see this


1226
00:40:54,006 --> 00:40:54,666
view here.


1227
00:40:54,716 --> 00:40:55,906
This looks great.


1228
00:40:56,896 --> 00:40:58,256
Now like we talked about here,


1229
00:40:58,256 --> 00:40:59,376
we should be able to support


1230
00:40:59,376 --> 00:41:01,066
multiple images inside this


1231
00:41:01,066 --> 00:41:01,456
struct.


1232
00:41:01,976 --> 00:41:03,296
For that, we would need to


1233
00:41:03,296 --> 00:41:05,366
calculate the next index.


1234
00:41:06,716 --> 00:41:10,646
Let's go ahead and do that.


1235
00:41:10,846 --> 00:41:12,086
Now in here I'm simply


1236
00:41:12,086 --> 00:41:14,606
calculating the next index and


1237
00:41:14,606 --> 00:41:16,236
I'm updating the current index.


1238
00:41:17,666 --> 00:41:19,886
What I also want to do is


1239
00:41:19,886 --> 00:41:22,846
animate this change.


1240
00:41:23,046 --> 00:41:24,966
With a simple animation, every


1241
00:41:24,966 --> 00:41:27,476
time my current index is updated


1242
00:41:27,476 --> 00:41:29,146
it will have some fluid string


1243
00:41:29,146 --> 00:41:30,516
animation which looks pretty


1244
00:41:30,516 --> 00:41:30,826
good.


1245
00:41:33,856 --> 00:41:36,366
Now, we've created this but we


1246
00:41:36,366 --> 00:41:37,946
haven't actually hooked it up to


1247
00:41:37,946 --> 00:41:38,546
anything.


1248
00:41:39,046 --> 00:41:42,856
Inside our ZStack ideally what


1249
00:41:42,856 --> 00:41:44,156
we'd want is that after a


1250
00:41:44,156 --> 00:41:46,246
particular interval in time we'd


1251
00:41:46,246 --> 00:41:47,686
want the image to change and


1252
00:41:47,686 --> 00:41:52,116
move on to the next image.


1253
00:41:52,456 --> 00:41:55,386
So I created an extension on a


1254
00:41:55,386 --> 00:41:56,996
view which has a view modifier.


1255
00:41:58,306 --> 00:41:59,956
Show next image is a simple view


1256
00:41:59,956 --> 00:42:01,936
extension which essentially


1257
00:42:02,436 --> 00:42:04,426
invokes a timer that after every


1258
00:42:04,426 --> 00:42:06,716
two seconds switches on to the


1259
00:42:06,716 --> 00:42:07,926
next image index.


1260
00:42:10,816 --> 00:42:12,616
Now the last thing I want to add


1261
00:42:12,616 --> 00:42:14,566
here is this gorgeous slide


1262
00:42:14,566 --> 00:42:17,836
transition we saw, which is this


1263
00:42:18,586 --> 00:42:22,496
easy command right here.


1264
00:42:22,706 --> 00:42:24,976
Okay, let's see how this looks.


1265
00:42:42,716 --> 00:42:44,636
Okay so we have these images


1266
00:42:44,826 --> 00:42:45,706
scrolling through.


1267
00:42:46,206 --> 00:42:47,906
We have some actions that we had


1268
00:42:47,956 --> 00:42:49,186
hooked up to the notification


1269
00:42:49,186 --> 00:42:50,106
controller before.


1270
00:42:51,536 --> 00:42:52,366
As you can see-- [applause]


1271
00:42:53,066 --> 00:42:53,876
thank you.


1272
00:42:54,516 --> 00:42:57,576
[ Applause ]


1273
00:42:58,076 --> 00:43:00,086
Like you see, with very few


1274
00:43:00,086 --> 00:43:02,006
changes we were able to create


1275
00:43:02,006 --> 00:43:04,046
this gorgeous, rich notification


1276
00:43:04,406 --> 00:43:06,616
which in WatchOS was never a


1277
00:43:06,616 --> 00:43:07,706
possibility before.


1278
00:43:08,486 --> 00:43:09,946
With that, let's go back to


1279
00:43:09,946 --> 00:43:10,096
Jeff.


1280
00:43:11,516 --> 00:43:15,886
[ Applause ]


1281
00:43:16,386 --> 00:43:17,926
>> All right, thank you Meghna.


1282
00:43:18,696 --> 00:43:19,966
I think it's so cool to see


1283
00:43:19,966 --> 00:43:21,116
something so rich and


1284
00:43:21,116 --> 00:43:22,596
interactive appearing just in


1285
00:43:22,596 --> 00:43:24,026
the context of a notification.


1286
00:43:24,506 --> 00:43:25,626
I think SwiftUI is going to


1287
00:43:25,626 --> 00:43:26,966
really broaden the horizons for


1288
00:43:26,966 --> 00:43:28,596
what's possible on WatchOS.


1289
00:43:29,186 --> 00:43:31,746
Now this has been just a


1290
00:43:31,746 --> 00:43:33,696
whirlwind tour so let's kind of


1291
00:43:34,506 --> 00:43:37,036
revisit and sum up what we've


1292
00:43:37,036 --> 00:43:37,586
learned today.


1293
00:43:38,956 --> 00:43:40,296
The first thing is that when


1294
00:43:40,296 --> 00:43:41,516
we're thinking about bringing an


1295
00:43:41,516 --> 00:43:43,396
application to a given device,


1296
00:43:43,876 --> 00:43:45,646
take a design first approach.


1297
00:43:46,216 --> 00:43:47,416
This isn't about saying that


1298
00:43:47,416 --> 00:43:48,556
I've got this code and I'm going


1299
00:43:48,556 --> 00:43:49,816
to try and get it working over


1300
00:43:49,816 --> 00:43:50,136
here.


1301
00:43:50,726 --> 00:43:51,906
It's thinking about what's the


1302
00:43:51,906 --> 00:43:53,666
right expression for my app on


1303
00:43:53,666 --> 00:43:55,006
this device and working


1304
00:43:55,006 --> 00:43:58,976
backwards from there.


1305
00:43:59,246 --> 00:44:00,476
But, you can share some code


1306
00:44:00,476 --> 00:44:01,146
sometimes.


1307
00:44:01,646 --> 00:44:03,626
For example, we didn't really


1308
00:44:03,626 --> 00:44:05,096
call it out but every demo that


1309
00:44:05,096 --> 00:44:06,776
you saw today is effortlessly


1310
00:44:06,776 --> 00:44:07,816
sharing the model code.


1311
00:44:07,996 --> 00:44:09,156
The model code has been compiled


1312
00:44:09,156 --> 00:44:10,766
into each target identically.


1313
00:44:12,256 --> 00:44:15,006
And you can share view code, you


1314
00:44:15,006 --> 00:44:16,246
just have to use good judgment


1315
00:44:16,246 --> 00:44:17,106
about when you do it.


1316
00:44:17,566 --> 00:44:19,046
And SwiftUI can help you along


1317
00:44:19,046 --> 00:44:21,146
the way by making it really easy


1318
00:44:21,306 --> 00:44:23,396
to re-factor out small, reusable


1319
00:44:23,396 --> 00:44:25,236
components that make more sense


1320
00:44:25,236 --> 00:44:26,876
to reuse across devices.


1321
00:44:29,146 --> 00:44:31,526
And finally, we're not here to


1322
00:44:31,526 --> 00:44:32,926
write once and run anywhere.


1323
00:44:33,406 --> 00:44:34,716
The real power is in your


1324
00:44:34,716 --> 00:44:35,386
knowledge.


1325
00:44:35,806 --> 00:44:37,346
When you learn once, you can


1326
00:44:37,346 --> 00:44:39,366
apply that to any device and I


1327
00:44:39,366 --> 00:44:40,736
think that's really powerful.


1328
00:44:43,286 --> 00:44:44,566
As always, this talk lives


1329
00:44:44,566 --> 00:44:44,956
online.


1330
00:44:44,956 --> 00:44:45,896
There you can see the video


1331
00:44:45,896 --> 00:44:47,286
replay and get associated


1332
00:44:47,286 --> 00:44:49,266
resources and I want to thank


1333
00:44:49,266 --> 00:44:49,776
you for your time.


1334
00:44:49,776 --> 00:44:50,916
We cannot wait to see what you


1335
00:44:50,916 --> 00:44:51,636
build with SwiftUI.


1336
00:44:52,516 --> 00:45:04,320
[ Applause ]

