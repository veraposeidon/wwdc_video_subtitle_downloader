1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:09,516 --> 00:00:15,546
[ Applause ]


3
00:00:16,046 --> 00:00:16,816
>> Thank you for joining the


4
00:00:16,816 --> 00:00:17,246
session.


5
00:00:17,326 --> 00:00:18,356
My name is Duy Phan.


6
00:00:18,526 --> 00:00:19,916
I'm here with Yilok and Meghna


7
00:00:20,306 --> 00:00:21,326
to talk to you about what's new


8
00:00:21,326 --> 00:00:21,936
in Core Bluetooth.


9
00:00:22,496 --> 00:00:24,946
I'll start with an introduction.


10
00:00:25,466 --> 00:00:28,136
Then LE 2 Mbps and advertising


11
00:00:28,136 --> 00:00:28,696
extension.


12
00:00:29,256 --> 00:00:30,586
Then provide an overview for


13
00:00:30,586 --> 00:00:32,136
Core Bluetooth for BR/EDR


14
00:00:32,136 --> 00:00:32,716
devices.


15
00:00:32,946 --> 00:00:33,806
Then Core Bluetooth for


16
00:00:33,806 --> 00:00:35,686
dual-mode, user privacy,


17
00:00:35,786 --> 00:00:37,316
developer tools, then wrap up


18
00:00:37,316 --> 00:00:38,396
with a summary.


19
00:00:38,966 --> 00:00:41,116
Let's start with the


20
00:00:41,116 --> 00:00:41,806
introduction.


21
00:00:42,366 --> 00:00:44,866
For those in the audience that's


22
00:00:44,866 --> 00:00:46,726
new to Core Bluetooth, the Core


23
00:00:46,726 --> 00:00:48,316
Bluetooth framework is our


24
00:00:48,316 --> 00:00:49,856
abstraction of the Bluetooth low


25
00:00:49,856 --> 00:00:51,576
energy specification and


26
00:00:51,576 --> 00:00:52,006
hardware.


27
00:00:52,536 --> 00:00:54,116
We provide our developers an


28
00:00:54,116 --> 00:00:57,196
easy and robust way to develop


29
00:00:57,196 --> 00:00:58,746
applications that can interact


30
00:00:58,746 --> 00:01:00,966
with Bluetooth low energy


31
00:01:00,966 --> 00:01:02,396
devices, and since the


32
00:01:02,396 --> 00:01:04,056
introduction of the framework,


33
00:01:04,516 --> 00:01:05,966
we've seen an amazing number of


34
00:01:05,966 --> 00:01:07,306
accessories and applications.


35
00:01:08,586 --> 00:01:09,736
We've seen everything from


36
00:01:09,736 --> 00:01:12,046
health and fitness devices to


37
00:01:12,096 --> 00:01:14,016
indoor locationing and item


38
00:01:14,016 --> 00:01:17,776
finding to creative tools, toys


39
00:01:17,776 --> 00:01:20,366
and accessories for kids, things


40
00:01:20,366 --> 00:01:22,526
for the home, appliances, and


41
00:01:22,526 --> 00:01:23,956
even everyday items like


42
00:01:24,226 --> 00:01:25,146
Bluetooth controlled water


43
00:01:25,146 --> 00:01:25,926
bottles and mugs.


44
00:01:26,406 --> 00:01:27,806
Our developers' creativity and


45
00:01:27,806 --> 00:01:29,396
hard work have really made the


46
00:01:29,396 --> 00:01:30,246
Bluetooth low everything


47
00:01:30,246 --> 00:01:32,466
ecosystem a very vibrant and


48
00:01:32,466 --> 00:01:34,056
innovative space, thank you.


49
00:01:35,516 --> 00:01:38,926
[ Applause ]


50
00:01:39,426 --> 00:01:40,656
But there's more.


51
00:01:41,996 --> 00:01:43,796
There exists an entire class of


52
00:01:43,796 --> 00:01:45,536
Bluetooth devices that are also


53
00:01:45,536 --> 00:01:47,166
thriving and growing, but we


54
00:01:47,166 --> 00:01:48,636
often don't talk about them here


55
00:01:48,706 --> 00:01:49,876
because they don't support the


56
00:01:49,876 --> 00:01:50,876
Core Bluetooth framework.


57
00:01:51,576 --> 00:01:53,076
These are Bluetooth BR/EDR


58
00:01:53,076 --> 00:01:55,706
devices, and they include


59
00:01:56,046 --> 00:01:57,316
accessories like your favorite


60
00:01:57,316 --> 00:01:59,326
audio streaming devices, in-car


61
00:01:59,326 --> 00:02:00,386
entertainment systems with


62
00:02:00,386 --> 00:02:03,326
hands-free calling and various


63
00:02:03,326 --> 00:02:04,436
accessories like mouse and


64
00:02:04,436 --> 00:02:05,406
keyboards and game pads.


65
00:02:06,176 --> 00:02:07,766
What's been missing is a way for


66
00:02:07,766 --> 00:02:09,376
our Core Bluetooth developers to


67
00:02:09,376 --> 00:02:11,236
develop applications that can


68
00:02:11,236 --> 00:02:14,266
interact with these devices.


69
00:02:14,356 --> 00:02:15,486
Until now.


70
00:02:16,046 --> 00:02:17,306
This year we are adding Core


71
00:02:17,306 --> 00:02:18,596
Bluetooth support for BR/EDR


72
00:02:18,596 --> 00:02:18,976
devices.


73
00:02:19,366 --> 00:02:21,366
[ Applause ]


74
00:02:21,716 --> 00:02:21,976
Thank you.


75
00:02:22,491 --> 00:02:24,491
[ Applause ]


76
00:02:24,966 --> 00:02:26,676
This means that Core Bluetooth


77
00:02:26,676 --> 00:02:29,186
can now reach out and interact


78
00:02:29,186 --> 00:02:30,186
with all of your favorite


79
00:02:30,296 --> 00:02:32,026
Bluetooth devices regardless of


80
00:02:32,026 --> 00:02:32,876
what transport they run.


81
00:02:33,786 --> 00:02:35,196
In addition, we added various


82
00:02:35,196 --> 00:02:37,006
dual-mode features, so the two


83
00:02:37,006 --> 00:02:38,456
transport works even better when


84
00:02:38,456 --> 00:02:38,966
they're together.


85
00:02:39,326 --> 00:02:42,526
We hope that our developers will


86
00:02:42,526 --> 00:02:43,626
take advantage of these


87
00:02:43,626 --> 00:02:45,526
features, and we look forward to


88
00:02:45,526 --> 00:02:46,316
seeing all of the new


89
00:02:46,676 --> 00:02:48,026
accessories and applications you


90
00:02:48,026 --> 00:02:48,296
build.


91
00:02:48,946 --> 00:02:52,366
So, this year we really have


92
00:02:52,466 --> 00:02:53,726
three major driving themes.


93
00:02:54,516 --> 00:02:56,286
The first is, as always, to


94
00:02:56,286 --> 00:02:58,596
improve our core technology but


95
00:02:58,596 --> 00:03:00,436
also to protect our user privacy


96
00:03:01,476 --> 00:03:03,056
and enable our developers with


97
00:03:03,056 --> 00:03:03,736
better tools.


98
00:03:05,086 --> 00:03:07,216
Let's get started with


99
00:03:07,366 --> 00:03:08,176
improvements to our core


100
00:03:08,176 --> 00:03:11,426
technology and LE 2 megabits.


101
00:03:12,236 --> 00:03:16,366
LE 2 Mbps is a new feature in


102
00:03:16,366 --> 00:03:17,336
Bluetooth 5.0.


103
00:03:18,516 --> 00:03:20,576
The physical layer rate or radio


104
00:03:20,576 --> 00:03:22,646
rate can increase now from 1 to


105
00:03:22,646 --> 00:03:24,126
2 Mbps between compatible


106
00:03:24,126 --> 00:03:24,596
devices.


107
00:03:26,286 --> 00:03:27,956
This means that with the same


108
00:03:27,956 --> 00:03:29,186
amount of airtime, Core


109
00:03:29,186 --> 00:03:30,626
Bluetooth can now transmit twice


110
00:03:30,666 --> 00:03:31,936
the number of bits, so your


111
00:03:31,936 --> 00:03:33,036
connections are not only faster,


112
00:03:33,036 --> 00:03:33,666
they're also more power


113
00:03:33,666 --> 00:03:33,936
efficient.


114
00:03:37,016 --> 00:03:39,336
This is better yet transparent


115
00:03:39,336 --> 00:03:40,086
to the application.


116
00:03:40,436 --> 00:03:41,636
We will handle all of the link


117
00:03:41,636 --> 00:03:43,136
layer negotiations for you based


118
00:03:43,136 --> 00:03:44,846
on the platform you're on.


119
00:03:45,456 --> 00:03:46,546
But remember, if you're


120
00:03:46,546 --> 00:03:48,056
developing an accessory, your


121
00:03:48,056 --> 00:03:50,446
accessory must also support LE 2


122
00:03:50,546 --> 00:03:51,646
Mbps for this to work.


123
00:03:52,796 --> 00:03:54,596
This is available now starting


124
00:03:54,596 --> 00:03:56,706
with iPhone 8, 8 Plus, iPhone X,


125
00:03:57,046 --> 00:03:59,606
Apple TV 4K, and the Apple Watch


126
00:03:59,606 --> 00:04:00,146
Series 4.


127
00:04:00,626 --> 00:04:04,446
And here I have an illustration


128
00:04:04,526 --> 00:04:07,546
of Bluetooth 1 Mbps in various


129
00:04:07,546 --> 00:04:07,816
modes.


130
00:04:08,506 --> 00:04:13,006
And I've added LE 2 Mbps to show


131
00:04:13,006 --> 00:04:15,436
the [applause], thank you, to


132
00:04:15,956 --> 00:04:17,466
show the leap forward in


133
00:04:17,466 --> 00:04:17,935
performance.


134
00:04:23,356 --> 00:04:24,466
Also new for this year we've


135
00:04:24,466 --> 00:04:25,886
added advertising extension.


136
00:04:27,676 --> 00:04:29,596
Advertising extension is a


137
00:04:29,596 --> 00:04:30,916
Bluetooth 5.0 feature.


138
00:04:32,096 --> 00:04:33,536
It essentially improves upon


139
00:04:33,536 --> 00:04:35,816
three main points for


140
00:04:35,816 --> 00:04:36,466
advertising.


141
00:04:36,626 --> 00:04:37,806
The first is it eases the


142
00:04:37,806 --> 00:04:39,296
congestion on the three


143
00:04:39,506 --> 00:04:41,366
advertising channel by sending a


144
00:04:41,366 --> 00:04:43,046
smaller payload on the


145
00:04:43,046 --> 00:04:45,566
advertising channel, then


146
00:04:45,566 --> 00:04:46,976
jumping to the more spacious


147
00:04:46,976 --> 00:04:48,526
data channel to transmit a much


148
00:04:48,526 --> 00:04:49,316
larger payload.


149
00:04:49,946 --> 00:04:53,666
Up now from 31 to 255 bytes, and


150
00:04:53,666 --> 00:04:55,076
the transmission rate itself can


151
00:04:55,076 --> 00:04:57,506
now be in LE 2 Mbps.


152
00:04:59,536 --> 00:05:01,056
Core Bluetooth will support


153
00:05:01,056 --> 00:05:02,076
extended scan this year.


154
00:05:03,726 --> 00:05:05,006
This means that we can scan now


155
00:05:05,006 --> 00:05:06,466
for the extended advertisements


156
00:05:06,466 --> 00:05:09,396
that I've just mentioned, but we


157
00:05:09,606 --> 00:05:12,126
will only scan for our extended


158
00:05:12,126 --> 00:05:13,006
advertisements that are


159
00:05:13,006 --> 00:05:14,946
transmitted in LE 2 Mbps.


160
00:05:15,596 --> 00:05:16,836
So, if you're developing an


161
00:05:16,836 --> 00:05:18,356
accessory, your accessory must


162
00:05:18,356 --> 00:05:19,636
also support extended


163
00:05:19,636 --> 00:05:21,776
advertisement with LE 2 Mbps.


164
00:05:24,116 --> 00:05:26,206
We now support extended


165
00:05:26,206 --> 00:05:28,436
advertisement payloads up to 124


166
00:05:29,326 --> 00:05:29,456
bytes.


167
00:05:30,296 --> 00:05:32,516
This is four times the amount of


168
00:05:32,516 --> 00:05:33,856
advertisement data that an


169
00:05:33,856 --> 00:05:37,746
accessory can send us today.


170
00:05:37,946 --> 00:05:38,966
This is again transparent to


171
00:05:38,966 --> 00:05:39,606
your application.


172
00:05:40,206 --> 00:05:41,516
You can use the same scan API,


173
00:05:41,776 --> 00:05:42,576
scan filters.


174
00:05:43,326 --> 00:05:45,276
We would scan for both legacy


175
00:05:45,276 --> 00:05:46,386
and extended advertisements.


176
00:05:46,956 --> 00:05:50,096
There's a new API for you to


177
00:05:50,096 --> 00:05:51,876
programmatically query for


178
00:05:51,876 --> 00:05:54,386
platform support, and this is


179
00:05:54,386 --> 00:05:57,026
now supported on iPhone XS and


180
00:05:57,426 --> 00:06:00,526
the new iPad Pro.


181
00:06:01,056 --> 00:06:02,676
Also new for this year we're


182
00:06:02,676 --> 00:06:03,746
going to support extended


183
00:06:03,746 --> 00:06:04,266
connections.


184
00:06:05,946 --> 00:06:07,026
This means that we can make


185
00:06:07,026 --> 00:06:08,306
connections to connectable,


186
00:06:08,306 --> 00:06:08,976
extended advertisements.


187
00:06:11,996 --> 00:06:13,536
Extended connections improve


188
00:06:13,536 --> 00:06:14,716
upon the existing connection


189
00:06:14,716 --> 00:06:16,286
exchange protocol, and I'll


190
00:06:16,286 --> 00:06:16,896
explain how.


191
00:06:17,636 --> 00:06:20,266
Today with Legacy Connections,


192
00:06:20,796 --> 00:06:22,276
the advertiser would advertise a


193
00:06:22,276 --> 00:06:23,386
connectable advertisement.


194
00:06:24,796 --> 00:06:26,036
The scanner would send a


195
00:06:26,036 --> 00:06:27,096
connection identification if it


196
00:06:27,096 --> 00:06:29,256
wants to connect.


197
00:06:29,366 --> 00:06:30,246
There's no ACK for this.


198
00:06:32,116 --> 00:06:33,446
The scanner assumes that the


199
00:06:33,446 --> 00:06:34,806
connection indication reaches


200
00:06:34,806 --> 00:06:35,536
the advertiser.


201
00:06:36,266 --> 00:06:37,266
It then wakes up the host


202
00:06:37,266 --> 00:06:38,586
processor to tell it there's a


203
00:06:38,586 --> 00:06:39,196
new connection.


204
00:06:39,766 --> 00:06:42,956
But the connection indication


205
00:06:42,956 --> 00:06:43,986
may actually not reach the


206
00:06:43,986 --> 00:06:45,836
advertiser because the RF


207
00:06:45,836 --> 00:06:47,256
characteristic of the scanner


208
00:06:47,256 --> 00:06:49,036
and advertiser can differ, and


209
00:06:49,036 --> 00:06:51,486
the RF environment is very


210
00:06:52,176 --> 00:06:52,526
dynamic.


211
00:06:52,746 --> 00:06:54,316
So, because of this, throughout


212
00:06:54,316 --> 00:06:57,026
your day, your whole processor


213
00:06:57,026 --> 00:06:59,566
can be unnecessarily woken up,


214
00:07:00,136 --> 00:07:02,366
training your phone's battery


215
00:07:02,366 --> 00:07:04,426
more while you're using, your


216
00:07:04,496 --> 00:07:06,066
user is using your application


217
00:07:06,066 --> 00:07:06,716
or accessory.


218
00:07:07,586 --> 00:07:09,296
But extended connections improve


219
00:07:10,036 --> 00:07:11,006
upon this.


220
00:07:11,206 --> 00:07:13,376
With extended connections, the


221
00:07:13,376 --> 00:07:15,306
advertiser would advertise a


222
00:07:15,306 --> 00:07:16,256
connectable extended


223
00:07:16,256 --> 00:07:16,986
advertisement.


224
00:07:17,536 --> 00:07:19,466
The scanner would send a


225
00:07:19,466 --> 00:07:20,296
connection request.


226
00:07:21,646 --> 00:07:23,056
The advertiser would send an


227
00:07:23,056 --> 00:07:24,446
explicit connection response,


228
00:07:25,026 --> 00:07:26,106
and only when the scanner


229
00:07:26,106 --> 00:07:27,256
receives this connection


230
00:07:27,256 --> 00:07:30,076
response it will wake the host


231
00:07:30,076 --> 00:07:31,406
processor to tell it there's the


232
00:07:31,406 --> 00:07:32,006
new connection.


233
00:07:32,576 --> 00:07:35,056
In addition, your connection can


234
00:07:35,056 --> 00:07:36,476
also start in LE 2 Mbps,


235
00:07:37,106 --> 00:07:38,356
skipping some of the link layer


236
00:07:38,356 --> 00:07:38,996
negotiation.


237
00:07:39,586 --> 00:07:43,506
And because of this, extended


238
00:07:43,506 --> 00:07:45,126
Connection is more robust and


239
00:07:45,126 --> 00:07:45,716
power efficient.


240
00:07:46,416 --> 00:07:48,666
It is again transparent to your


241
00:07:48,666 --> 00:07:49,826
application if you can call the


242
00:07:49,826 --> 00:07:50,596
same connect API.


243
00:07:50,706 --> 00:07:52,676
It will connect to both Legacy


244
00:07:52,676 --> 00:07:54,626
and Extended Advertisements.


245
00:07:55,246 --> 00:07:58,446
But remember if you're


246
00:07:58,446 --> 00:07:59,706
developing an accessory, your


247
00:07:59,706 --> 00:08:00,946
accessory must also support


248
00:08:01,426 --> 00:08:02,286
connectable extended


249
00:08:02,286 --> 00:08:02,996
advertisements.


250
00:08:03,496 --> 00:08:06,916
There's a new API for you to


251
00:08:06,916 --> 00:08:09,226
programmatically query for


252
00:08:09,226 --> 00:08:10,136
platform support.


253
00:08:10,676 --> 00:08:12,026
This is also available now with


254
00:08:12,106 --> 00:08:16,096
iPhone XS and the new iPad Pro.


255
00:08:16,526 --> 00:08:17,856
I'd like to now hand it off to


256
00:08:17,886 --> 00:08:18,966
Yilok to talk about Core


257
00:08:18,966 --> 00:08:20,456
Bluetooth support for BR/EDR.


258
00:08:21,206 --> 00:08:21,436
Thank you.


259
00:08:22,176 --> 00:08:24,500
[ Applause ]


260
00:08:27,616 --> 00:08:28,336
>> Thanks, Duy.


261
00:08:28,886 --> 00:08:29,786
Hi everyone.


262
00:08:29,786 --> 00:08:31,036
I'm Yilok, and I'm here to


263
00:08:31,036 --> 00:08:32,246
introduce you to you the new


264
00:08:32,246 --> 00:08:33,176
things we've added to Core


265
00:08:33,176 --> 00:08:35,316
Bluetooth for BR/EDR devices.


266
00:08:36,126 --> 00:08:37,696
When we first introduced Core


267
00:08:37,696 --> 00:08:39,785
Bluetooth back in 2012, we


268
00:08:39,785 --> 00:08:41,306
wanted to create an abstraction


269
00:08:41,306 --> 00:08:42,525
layer for you to use what's


270
00:08:42,525 --> 00:08:43,686
called GATT.


271
00:08:43,976 --> 00:08:45,546
Now GATT is a Bluetooth SIG


272
00:08:45,546 --> 00:08:47,306
protocol that is


273
00:08:47,306 --> 00:08:49,436
hierarchy-based, and it consists


274
00:08:49,436 --> 00:08:50,856
if services and characteristics,


275
00:08:51,176 --> 00:08:52,836
and it makes it very easy to


276
00:08:52,836 --> 00:08:54,576
read, write, and be notified of


277
00:08:54,576 --> 00:08:55,326
changes on these


278
00:08:55,326 --> 00:08:56,096
characteristics.


279
00:08:56,876 --> 00:08:57,946
You've shown us that it's


280
00:08:58,066 --> 00:08:59,616
exceptionally easy to make great


281
00:08:59,616 --> 00:09:00,766
products such as heart rate


282
00:09:00,766 --> 00:09:03,946
monitors, toys, and a bunch of


283
00:09:03,946 --> 00:09:05,246
accessories in the world.


284
00:09:05,706 --> 00:09:07,016
And it's been wonderful seeing


285
00:09:07,016 --> 00:09:08,516
what you've been able to do with


286
00:09:08,516 --> 00:09:09,516
the Core Bluetooth apps that you


287
00:09:09,516 --> 00:09:11,076
build to interface with these


288
00:09:11,216 --> 00:09:11,916
accessories.


289
00:09:12,816 --> 00:09:14,126
Now, this year, as Duy has


290
00:09:14,126 --> 00:09:15,936
mentioned, we're adding support


291
00:09:16,266 --> 00:09:18,496
for Core Bluetooth over BR/EDR


292
00:09:18,496 --> 00:09:20,346
devices or classic devices.


293
00:09:21,236 --> 00:09:22,586
Now these devices range from


294
00:09:22,586 --> 00:09:24,386
things such as car head units,


295
00:09:24,906 --> 00:09:27,056
speakers, and headphones.


296
00:09:27,916 --> 00:09:29,486
So, how do we do this?


297
00:09:30,356 --> 00:09:32,626
Well, our stack from last year


298
00:09:32,876 --> 00:09:35,876
consisted of two different


299
00:09:35,876 --> 00:09:36,506
transports.


300
00:09:36,676 --> 00:09:37,976
Essentially, we were running the


301
00:09:37,976 --> 00:09:39,806
system profiles or things such


302
00:09:39,806 --> 00:09:43,046
as audio, A2DP, HFP, and


303
00:09:43,206 --> 00:09:46,326
remote-control profiles in the


304
00:09:46,326 --> 00:09:46,696
system.


305
00:09:47,516 --> 00:09:48,446
On the other side, for low


306
00:09:48,446 --> 00:09:50,056
energy, we were running Core


307
00:09:50,056 --> 00:09:51,736
Bluetooth over GATT, and that


308
00:09:51,736 --> 00:09:52,596
was the framework that you were


309
00:09:52,596 --> 00:09:53,876
using to interface with your


310
00:09:53,876 --> 00:09:54,516
accessories.


311
00:09:55,396 --> 00:09:56,946
This year, we've merged the two


312
00:09:56,946 --> 00:09:59,006
layers together, and now, you


313
00:09:59,006 --> 00:10:00,746
have transparent access to both


314
00:10:01,146 --> 00:10:04,406
BR/EDR and low energy without


315
00:10:04,406 --> 00:10:04,916
doing anything.


316
00:10:05,296 --> 00:10:09,536
Now, what this means for you is


317
00:10:10,426 --> 00:10:12,106
without much changes in the API,


318
00:10:12,106 --> 00:10:15,446
you can now work with both the


319
00:10:15,446 --> 00:10:16,726
classic devices and the low


320
00:10:16,726 --> 00:10:17,566
energy devices.


321
00:10:18,906 --> 00:10:19,926
So let's go and look into the


322
00:10:19,926 --> 00:10:21,516
details of Core Bluetooth for


323
00:10:21,516 --> 00:10:22,156
BR/EDR.


324
00:10:22,726 --> 00:10:26,236
This now will allow transparent


325
00:10:26,236 --> 00:10:27,686
use of GATT with the BR/EDR


326
00:10:27,686 --> 00:10:28,176
devices.


327
00:10:29,266 --> 00:10:30,326
It's still running the exact


328
00:10:30,326 --> 00:10:31,716
same Bluetooth SIG protocol.


329
00:10:32,116 --> 00:10:33,546
There's no changes to that, and


330
00:10:33,546 --> 00:10:34,526
so you can look at this


331
00:10:34,866 --> 00:10:36,836
specification online on the


332
00:10:36,836 --> 00:10:38,306
Bluetooth SIG website.


333
00:10:39,276 --> 00:10:41,016
To your application and to the


334
00:10:41,016 --> 00:10:42,986
developer, the CBPeripheral APIs


335
00:10:42,986 --> 00:10:43,866
are exactly the same.


336
00:10:44,196 --> 00:10:45,236
You can still do the same


337
00:10:45,236 --> 00:10:47,016
service discovery and be


338
00:10:47,016 --> 00:10:48,086
notified of changes to


339
00:10:48,086 --> 00:10:48,906
characteristics.


340
00:10:49,396 --> 00:10:52,176
There is a new change in the


341
00:10:52,246 --> 00:10:53,126
CBCentralManager.


342
00:10:53,756 --> 00:10:55,006
We've added a way for you to be


343
00:10:55,006 --> 00:10:56,796
notified when a device is


344
00:10:56,796 --> 00:10:59,676
connected with a service IUD or


345
00:10:59,676 --> 00:11:00,656
a known peripheral UID.


346
00:11:00,656 --> 00:11:01,946
And I'll go more into detail


347
00:11:01,946 --> 00:11:04,476
about that later.


348
00:11:04,706 --> 00:11:06,466
Core Bluetooth for BR/EDR is


349
00:11:06,466 --> 00:11:08,796
available with iOS 13, the


350
00:11:08,796 --> 00:11:10,216
watchOS, and tvOS that we


351
00:11:10,216 --> 00:11:10,896
released this week.


352
00:11:11,346 --> 00:11:14,856
And finally, because GATT is a


353
00:11:14,856 --> 00:11:16,986
software layer protocol, you can


354
00:11:16,986 --> 00:11:18,126
add support to your accessory


355
00:11:18,126 --> 00:11:19,526
without the need for new


356
00:11:19,526 --> 00:11:19,876
hardware.


357
00:11:20,096 --> 00:11:21,666
This means only a software or


358
00:11:21,666 --> 00:11:22,986
firmware update.


359
00:11:23,936 --> 00:11:27,866
Now let's look at the new API.


360
00:11:27,956 --> 00:11:29,516
To register for connection events,


361
00:11:29,896 --> 00:11:31,516
you'll register by either a


362
00:11:31,516 --> 00:11:33,066
known service or a known


363
00:11:33,066 --> 00:11:33,936
peripheral UID.


364
00:11:34,646 --> 00:11:35,756
This would be akin to something


365
00:11:35,756 --> 00:11:39,146
like the heart rate service.


366
00:11:39,306 --> 00:11:39,796
You'll call


367
00:11:39,796 --> 00:11:41,556
registerForConnectionEvents, and


368
00:11:41,556 --> 00:11:42,346
you'll pass to the


369
00:11:42,346 --> 00:11:44,706
CBCentralManager a type for


370
00:11:44,706 --> 00:11:46,406
either a service UID or a


371
00:11:46,406 --> 00:11:46,976
peripheral UID.


372
00:11:49,636 --> 00:11:51,656
When we find a matching option,


373
00:11:52,546 --> 00:11:53,306
we'll send you a delegate


374
00:11:53,306 --> 00:11:56,006
callback, and this delegate


375
00:11:56,006 --> 00:11:57,626
callback will include the CB


376
00:11:57,626 --> 00:11:58,976
peripheral and the type of


377
00:11:58,976 --> 00:11:59,606
connection event.


378
00:12:00,116 --> 00:12:02,056
It's pretty simple.


379
00:12:03,136 --> 00:12:04,216
So, what does the incoming


380
00:12:04,216 --> 00:12:05,616
connection look like from your


381
00:12:05,616 --> 00:12:09,146
app's point of view?


382
00:12:09,296 --> 00:12:11,106
Your app will have instantiated


383
00:12:11,106 --> 00:12:14,426
a CBCentralManager, passed us a


384
00:12:14,596 --> 00:12:18,066
known service UID, and in the


385
00:12:18,306 --> 00:12:20,566
case of a BR/EDR or classic


386
00:12:20,566 --> 00:12:22,586
device, your user will go to the


387
00:12:22,586 --> 00:12:23,776
Bluetooth settings and search


388
00:12:23,776 --> 00:12:25,506
for the device, in this case


389
00:12:25,506 --> 00:12:26,596
let's say it's a headset running


390
00:12:26,596 --> 00:12:27,626
heart rate.


391
00:12:28,176 --> 00:12:29,516
They'll discover the device,


392
00:12:29,766 --> 00:12:33,426
find it, and attempt to connect.


393
00:12:33,546 --> 00:12:35,266
Pairing will be triggered, and


394
00:12:35,616 --> 00:12:36,436
then afterwards when we're


395
00:12:36,436 --> 00:12:37,606
connected, we'll run a service


396
00:12:37,606 --> 00:12:39,306
discovery of the GATT services.


397
00:12:39,696 --> 00:12:40,926
If we find a service that you


398
00:12:40,926 --> 00:12:42,026
want, then you'll get the


399
00:12:42,026 --> 00:12:42,716
delegate callback.


400
00:12:43,906 --> 00:12:45,176
And this will now look extremely


401
00:12:45,176 --> 00:12:46,646
similar to those who have


402
00:12:46,646 --> 00:12:47,556
already used Core Bluetooth.


403
00:12:48,406 --> 00:12:49,716
With your delegate callback,


404
00:12:49,886 --> 00:12:50,786
you'll then handle the


405
00:12:50,786 --> 00:12:52,216
connection event, and so you


406
00:12:52,216 --> 00:12:53,556
might call connect on that given


407
00:12:53,556 --> 00:12:53,976
peripheral.


408
00:12:53,976 --> 00:12:57,936
So, all this code looks like so.


409
00:12:58,296 --> 00:12:59,936
You'll do initialization first,


410
00:13:00,276 --> 00:13:02,726
register for your connection


411
00:13:02,726 --> 00:13:04,636
event with the CBCentralManager,


412
00:13:05,186 --> 00:13:08,206
and finally handle the delegate


413
00:13:08,206 --> 00:13:08,626
callback.


414
00:13:09,396 --> 00:13:10,096
If you're interested in the


415
00:13:10,096 --> 00:13:12,106
device, call connect, and then


416
00:13:12,106 --> 00:13:13,306
you can clear the registration


417
00:13:13,466 --> 00:13:14,046
for filters.


418
00:13:14,586 --> 00:13:17,116
Now, what about outgoing


419
00:13:17,116 --> 00:13:17,686
connections.


420
00:13:17,876 --> 00:13:18,896
Let's say you have a known


421
00:13:18,896 --> 00:13:20,176
peripheral already and you're


422
00:13:20,176 --> 00:13:21,286
paired to it and you want to


423
00:13:21,286 --> 00:13:21,606
connect.


424
00:13:22,676 --> 00:13:24,506
You can now connect out to a


425
00:13:24,506 --> 00:13:25,456
BR/EDR device.


426
00:13:26,506 --> 00:13:27,896
To do so, you'll do the same


427
00:13:27,896 --> 00:13:29,036
thing, instantiate your


428
00:13:29,156 --> 00:13:32,576
CBCentralManager and call


429
00:13:32,576 --> 00:13:32,796
connect.


430
00:13:33,866 --> 00:13:34,826
This is not a new API.


431
00:13:34,886 --> 00:13:35,926
This has existed in


432
00:13:36,176 --> 00:13:39,746
CBCentralManager for a while


433
00:13:39,746 --> 00:13:39,813
now.


434
00:13:39,946 --> 00:13:42,176
And so if you're calling connect


435
00:13:42,176 --> 00:13:45,456
on a BR/EDR device, if your app


436
00:13:45,456 --> 00:13:47,406
is in foreground, then we'll try


437
00:13:47,406 --> 00:13:48,626
to make a connection out to that


438
00:13:48,626 --> 00:13:49,216
device for you.


439
00:13:50,086 --> 00:13:51,806
We'll page the device, and if


440
00:13:51,806 --> 00:13:53,086
it's connected, then you'll get


441
00:13:53,656 --> 00:13:54,956
a delegate callback.


442
00:13:56,096 --> 00:13:56,686
It's that simple.


443
00:13:57,236 --> 00:14:00,546
So, now that we've gone through


444
00:14:00,546 --> 00:14:02,506
the new APIs for BR/EDR devices,


445
00:14:03,636 --> 00:14:04,996
let's continue on to the other


446
00:14:04,996 --> 00:14:06,826
improvements we've made for Core


447
00:14:06,826 --> 00:14:07,796
Bluetooth dual-mode.


448
00:14:08,076 --> 00:14:09,316
This means when you're using low


449
00:14:09,316 --> 00:14:11,646
energy and BR/EDR together.


450
00:14:12,256 --> 00:14:16,826
One common thing we've seen with


451
00:14:17,856 --> 00:14:19,786
dual-mode devices, as you've


452
00:14:19,786 --> 00:14:20,436
developed more and more


453
00:14:20,436 --> 00:14:21,766
accessories and apps on top of


454
00:14:21,766 --> 00:14:24,356
it, is that generally when users


455
00:14:24,356 --> 00:14:26,296
use your device, they see two


456
00:14:26,296 --> 00:14:27,256
entries in the Bluetooth


457
00:14:27,256 --> 00:14:27,696
settings.


458
00:14:28,146 --> 00:14:29,676
There's a low energy one, and


459
00:14:29,676 --> 00:14:31,316
there's a BR/EDR or classic one.


460
00:14:31,416 --> 00:14:32,476
And it's sometimes confusing to


461
00:14:32,476 --> 00:14:32,976
users.


462
00:14:33,546 --> 00:14:35,946
So, we worked really hard this


463
00:14:35,946 --> 00:14:37,436
year to alleviate this


464
00:14:37,436 --> 00:14:37,856
confusion.


465
00:14:38,426 --> 00:14:40,966
So, this year we're introducing


466
00:14:41,666 --> 00:14:43,196
adoption of what's called Cross


467
00:14:43,196 --> 00:14:44,466
Transport Key Derivation.


468
00:14:45,476 --> 00:14:47,586
This is a Bluetooth 4.2 SIG


469
00:14:47,586 --> 00:14:49,836
specification, and basically


470
00:14:49,836 --> 00:14:51,496
what this means is through a


471
00:14:51,556 --> 00:14:53,396
single pairing we will derive


472
00:14:53,456 --> 00:14:54,706
link keys for the other


473
00:14:54,706 --> 00:14:55,176
transport.


474
00:14:56,836 --> 00:14:59,016
To you, it means that the device


475
00:14:59,016 --> 00:15:00,236
will now have a single


476
00:15:00,236 --> 00:15:01,946
CBPeripheral identifier, so you


477
00:15:01,946 --> 00:15:02,806
don't need to care about the


478
00:15:02,806 --> 00:15:03,776
transport of the device.


479
00:15:04,936 --> 00:15:06,176
This is completely transparent


480
00:15:06,176 --> 00:15:09,096
to your application, and now


481
00:15:09,326 --> 00:15:11,656
that we have the single pairing


482
00:15:11,656 --> 00:15:13,156
for two devices, it means your


483
00:15:13,156 --> 00:15:14,786
app can seamlessly use both low


484
00:15:14,786 --> 00:15:19,066
energy and BR/EDR together.


485
00:15:19,186 --> 00:15:20,926
So before when users of your


486
00:15:20,926 --> 00:15:23,316
device or application, if they


487
00:15:23,316 --> 00:15:25,786
were seeing two devices, now


488
00:15:26,546 --> 00:15:27,846
they'll just see one, which is


489
00:15:27,846 --> 00:15:27,976
merged.


490
00:15:28,516 --> 00:15:33,006
[ Applause ]


491
00:15:33,506 --> 00:15:33,756
Thank you.


492
00:15:34,336 --> 00:15:37,156
And we can further take


493
00:15:37,156 --> 00:15:38,816
advantage of Cross Transport Key


494
00:15:38,816 --> 00:15:41,556
Derivation, or CTKD, to improve


495
00:15:41,556 --> 00:15:42,246
the pairing process.


496
00:15:42,716 --> 00:15:43,936
So let's say you want to control


497
00:15:43,936 --> 00:15:45,756
the entire discovery and pairing


498
00:15:46,126 --> 00:15:47,226
experience for your user.


499
00:15:47,926 --> 00:15:48,956
Instead of having the user go


500
00:15:48,956 --> 00:15:50,146
into Bluetooth settings and do


501
00:15:50,146 --> 00:15:51,856
an inquiry scan, which leaves


502
00:15:51,856 --> 00:15:53,916
your app experience, you can now


503
00:15:53,916 --> 00:15:54,906
look for low energy


504
00:15:54,906 --> 00:15:56,596
advertisements from your


505
00:15:57,076 --> 00:15:57,696
accessory.


506
00:15:59,056 --> 00:16:01,506
If you find the device, you can


507
00:16:01,506 --> 00:16:03,626
then Call Connect and connect


508
00:16:03,626 --> 00:16:05,216
over LE and access the


509
00:16:05,216 --> 00:16:06,126
protective characteristic.


510
00:16:07,256 --> 00:16:09,696
Once you're paired, because of


511
00:16:09,826 --> 00:16:13,036
CTKD, we'll take the LE key, and


512
00:16:13,036 --> 00:16:15,036
we'll also derive the BR/EDR


513
00:16:15,036 --> 00:16:15,306
key.


514
00:16:15,806 --> 00:16:19,656
And this means you can now make


515
00:16:19,656 --> 00:16:21,456
a BR/EDR connection without


516
00:16:21,456 --> 00:16:22,946
having to trigger more pairing


517
00:16:23,186 --> 00:16:24,676
to confuse the user, and it


518
00:16:24,816 --> 00:16:26,336
stays in the app for the entire


519
00:16:26,336 --> 00:16:26,936
experience.


520
00:16:30,756 --> 00:16:32,616
Great. Now that we've talked


521
00:16:32,616 --> 00:16:34,066
about improving pairing, let's


522
00:16:34,066 --> 00:16:34,926
talk about how we improve


523
00:16:34,926 --> 00:16:35,806
dual-mode connections.


524
00:16:36,606 --> 00:16:38,086
Let's consider a new product


525
00:16:38,086 --> 00:16:40,056
that you want to plan, and it's


526
00:16:40,056 --> 00:16:41,246
a home audio device.


527
00:16:41,866 --> 00:16:42,946
And it would be great if your


528
00:16:42,946 --> 00:16:44,966
user could be using your app and


529
00:16:44,966 --> 00:16:46,236
have it trigger some sort of


530
00:16:46,576 --> 00:16:48,106
connection to use media, such as


531
00:16:48,106 --> 00:16:49,906
music or podcast when the user


532
00:16:50,476 --> 00:16:51,716
becomes in proximity of the


533
00:16:51,716 --> 00:16:51,976
device.


534
00:16:55,786 --> 00:16:57,086
So, you'd want the user to bring


535
00:16:57,086 --> 00:16:58,546
up something like music or


536
00:16:59,446 --> 00:17:01,276
podcasts, which this would mean


537
00:17:01,276 --> 00:17:02,786
that iOS would have to bring up


538
00:17:02,856 --> 00:17:04,746
what's called a BR/EDR channels


539
00:17:04,746 --> 00:17:04,996
for you.


540
00:17:05,786 --> 00:17:07,036
We've done so this year by


541
00:17:07,036 --> 00:17:08,496
introducing a new concept called


542
00:17:08,496 --> 00:17:08,896
bridging.


543
00:17:11,455 --> 00:17:13,346
Bridging works by taking


544
00:17:13,346 --> 00:17:14,626
advantage of low energy


545
00:17:14,626 --> 00:17:16,836
proximity to bring up BR/EDR


546
00:17:16,836 --> 00:17:18,836
profiles such as A2DP, HFP,


547
00:17:18,836 --> 00:17:19,266
AVRCP.


548
00:17:19,486 --> 00:17:22,736
This will work on all devices


549
00:17:22,736 --> 00:17:25,516
that support CTKD and to take


550
00:17:25,516 --> 00:17:26,316
advantage of it in your


551
00:17:26,316 --> 00:17:27,826
application, it's extremely


552
00:17:27,826 --> 00:17:28,066
easy.


553
00:17:29,316 --> 00:17:32,236
You'll use a new key in the


554
00:17:32,786 --> 00:17:33,996
CBManagerConnect, and it's


555
00:17:33,996 --> 00:17:36,396
called the TransportBridgingKey.


556
00:17:37,816 --> 00:17:38,626
You add it in the option


557
00:17:38,626 --> 00:17:39,156
dictionary.


558
00:17:39,706 --> 00:17:42,506
And so when you pass that to us,


559
00:17:43,066 --> 00:17:44,246
we'll try to connect over low


560
00:17:44,246 --> 00:17:45,326
energy to your device.


561
00:17:45,636 --> 00:17:47,586
If we find it, then we'll


562
00:17:47,586 --> 00:17:49,936
immediately page out over BR/EDR


563
00:17:49,936 --> 00:17:51,686
and connect as many profiles as


564
00:17:51,686 --> 00:17:52,616
we can.


565
00:17:53,576 --> 00:17:55,756
The result is that your user can


566
00:17:55,756 --> 00:17:57,406
now seamlessly use all the


567
00:17:57,406 --> 00:17:59,016
multimedia profiles without


568
00:17:59,016 --> 00:17:59,776
having to do anything.


569
00:18:01,516 --> 00:18:06,846
[ Applause ]


570
00:18:07,346 --> 00:18:09,116
Great. So, now we've covered all


571
00:18:09,116 --> 00:18:10,276
the core technology improvements


572
00:18:10,276 --> 00:18:10,906
we've made this year.


573
00:18:11,216 --> 00:18:12,316
I'd like to now hand it over to


574
00:18:12,316 --> 00:18:13,956
Meghna to talk at Core Bluetooth


575
00:18:14,016 --> 00:18:14,366
privacy.


576
00:18:15,066 --> 00:18:15,656
>> Thank you, Yilok.


577
00:18:16,486 --> 00:18:18,036
In the last year alone, there


578
00:18:18,036 --> 00:18:19,666
have been an increasing number


579
00:18:19,666 --> 00:18:21,756
of instances where applications


580
00:18:21,756 --> 00:18:24,386
made the news or we're pulled


581
00:18:24,386 --> 00:18:25,246
from the App Store for not


582
00:18:25,246 --> 00:18:26,826
respecting user privacy.


583
00:18:27,606 --> 00:18:29,626
I'm here today to help you avoid


584
00:18:29,626 --> 00:18:31,276
that situation for your Core


585
00:18:31,276 --> 00:18:32,326
Bluetooth applications.


586
00:18:34,216 --> 00:18:34,886
Hello everyone.


587
00:18:35,096 --> 00:18:37,096
My name is Meghna Lav, and over


588
00:18:37,096 --> 00:18:38,406
the next few minutes, I'd like


589
00:18:38,406 --> 00:18:40,026
to talk you through the privacy


590
00:18:40,026 --> 00:18:41,856
update for Core Bluetooth APIs.


591
00:18:47,046 --> 00:18:49,526
Privacy matters, and it is more


592
00:18:49,526 --> 00:18:51,286
important today than ever


593
00:18:51,286 --> 00:18:51,686
before.


594
00:18:52,266 --> 00:18:54,396
Our users are more aware of it


595
00:18:54,396 --> 00:18:56,176
today than ever before.


596
00:18:57,306 --> 00:18:59,056
At Apple, we believe that


597
00:18:59,056 --> 00:19:01,006
privacy is a fundamental human


598
00:19:01,006 --> 00:19:02,906
right, and as Tim Cook has


599
00:19:02,906 --> 00:19:04,806
mentioned, it is our collective


600
00:19:04,806 --> 00:19:07,316
responsibility to safeguard and


601
00:19:07,316 --> 00:19:09,036
protect the fundamental human


602
00:19:09,036 --> 00:19:10,196
right to privacy.


603
00:19:10,676 --> 00:19:13,746
As developers in the Apple


604
00:19:13,746 --> 00:19:15,616
ecosystem, you all have a


605
00:19:15,736 --> 00:19:17,886
profound impact on user's lives


606
00:19:17,886 --> 00:19:18,506
every day.


607
00:19:19,386 --> 00:19:21,436
As such, users trust you with


608
00:19:21,436 --> 00:19:23,296
their data, and together with


609
00:19:23,296 --> 00:19:24,586
us, you shoulder the


610
00:19:24,586 --> 00:19:26,806
responsibility to uphold that


611
00:19:26,806 --> 00:19:26,976
trust.


612
00:19:30,076 --> 00:19:31,526
This year, we've made


613
00:19:31,526 --> 00:19:33,596
enhancements to two major areas


614
00:19:33,596 --> 00:19:36,556
for Core Bluetooth privacy, user


615
00:19:36,556 --> 00:19:38,726
authorization, and accessory


616
00:19:38,726 --> 00:19:39,556
notifications.


617
00:19:40,156 --> 00:19:42,406
Let's start by talking about


618
00:19:42,636 --> 00:19:44,616
user authorization and how it


619
00:19:44,616 --> 00:19:45,376
currently works.


620
00:19:46,676 --> 00:19:49,336
In iOS 12, if your application


621
00:19:49,336 --> 00:19:50,256
instantiated a


622
00:19:50,256 --> 00:19:52,766
CBPeripheralManager and wanted


623
00:19:52,766 --> 00:19:54,086
to advertise when in the


624
00:19:54,086 --> 00:19:56,256
background, we required that you


625
00:19:56,256 --> 00:19:57,686
obtain user authorization.


626
00:19:58,236 --> 00:20:01,936
New for this year, if your


627
00:20:01,936 --> 00:20:03,666
application uses any Core


628
00:20:03,666 --> 00:20:05,966
Bluetooth APIs, we'll require


629
00:20:05,966 --> 00:20:06,906
you to obtain user


630
00:20:06,906 --> 00:20:07,726
authorization.


631
00:20:08,266 --> 00:20:11,036
It is important to note that


632
00:20:11,036 --> 00:20:12,676
this applies to applications


633
00:20:13,056 --> 00:20:15,056
that are built on older SDKs as


634
00:20:15,056 --> 00:20:15,366
well.


635
00:20:15,366 --> 00:20:17,536
And when a user makes this


636
00:20:17,536 --> 00:20:19,466
decision, they can modify it in


637
00:20:19,466 --> 00:20:21,376
the settings app either in the


638
00:20:21,376 --> 00:20:23,276
Bluetooth privacy pane or even


639
00:20:23,276 --> 00:20:24,696
in your application specific


640
00:20:24,696 --> 00:20:25,136
settings.


641
00:20:25,796 --> 00:20:29,536
And this is required on iOS,


642
00:20:29,756 --> 00:20:32,026
watchOS, and tvOS.


643
00:20:32,716 --> 00:20:34,616
So what does user authorization


644
00:20:34,616 --> 00:20:35,826
mean on watchOS.


645
00:20:36,746 --> 00:20:38,446
If your application runs as an


646
00:20:38,446 --> 00:20:40,946
extension on watchOS, then the


647
00:20:40,946 --> 00:20:43,036
permission is shared between iOS


648
00:20:43,036 --> 00:20:45,476
and watchOS, and the user only


649
00:20:45,476 --> 00:20:46,726
has to grant this permission


650
00:20:46,726 --> 00:20:46,996
once.


651
00:20:48,356 --> 00:20:49,856
This of course is not true for


652
00:20:49,856 --> 00:20:50,776
stand-alone watchOS


653
00:20:50,776 --> 00:20:51,386
applications.


654
00:20:52,106 --> 00:20:55,156
So, how would you adopt user


655
00:20:55,156 --> 00:20:56,456
authorizations in your


656
00:20:56,456 --> 00:20:57,166
application?


657
00:20:58,476 --> 00:21:00,706
The first thing to do is to open


658
00:21:00,706 --> 00:21:03,226
the info.plist of your app and


659
00:21:03,226 --> 00:21:04,736
add this new usage description


660
00:21:04,736 --> 00:21:05,086
string.


661
00:21:06,256 --> 00:21:07,496
There are three reasons why you


662
00:21:07,496 --> 00:21:08,576
should add this usage


663
00:21:08,576 --> 00:21:09,396
description string.


664
00:21:10,376 --> 00:21:12,066
First, you can use this to


665
00:21:12,066 --> 00:21:14,086
convey to users why your


666
00:21:14,086 --> 00:21:15,696
application requires access to


667
00:21:15,696 --> 00:21:16,136
Bluetooth.


668
00:21:17,436 --> 00:21:19,586
Second it is a mandatory string


669
00:21:19,586 --> 00:21:21,436
and failure to adopt it would


670
00:21:21,436 --> 00:21:22,956
lead to a crash upon launch for


671
00:21:22,956 --> 00:21:23,736
your application.


672
00:21:24,446 --> 00:21:25,666
And you see an error like this


673
00:21:25,666 --> 00:21:26,296
in console.


674
00:21:26,706 --> 00:21:29,456
And thirdly, the app review


675
00:21:29,456 --> 00:21:31,626
process reviews all usage


676
00:21:31,626 --> 00:21:33,526
description strings to ensure


677
00:21:33,636 --> 00:21:35,396
that they are nonempty and


678
00:21:35,476 --> 00:21:36,006
meaningful.


679
00:21:36,006 --> 00:21:40,446
So let's take a look at some


680
00:21:40,446 --> 00:21:40,896
code now.


681
00:21:41,666 --> 00:21:42,916
We've created a new property


682
00:21:42,916 --> 00:21:43,876
this year that is the


683
00:21:43,876 --> 00:21:46,276
authorization property, and this


684
00:21:46,276 --> 00:21:48,526
will tell you whether a user has


685
00:21:48,526 --> 00:21:50,526
allowed or denied access to your


686
00:21:50,526 --> 00:21:52,786
application and whether you


687
00:21:52,786 --> 00:21:54,046
check for this authorization


688
00:21:54,046 --> 00:21:54,806
property.


689
00:21:55,316 --> 00:21:57,326
In order to under that, let's


690
00:21:57,326 --> 00:21:58,996
take a look the flow of a Core


691
00:21:58,996 --> 00:21:59,966
Bluetooth application.


692
00:22:00,406 --> 00:22:02,446
In your Core Bluetooth


693
00:22:02,446 --> 00:22:04,336
application, the first thing you


694
00:22:04,336 --> 00:22:06,586
probably do is instantiate a


695
00:22:06,586 --> 00:22:08,506
CBCentralManager or a


696
00:22:08,506 --> 00:22:09,516
CBPeripheralManager.


697
00:22:10,116 --> 00:22:11,336
And so the first delegate


698
00:22:11,336 --> 00:22:12,716
callbacks that you will receive


699
00:22:12,926 --> 00:22:14,316
from Bluetooth will be the


700
00:22:14,316 --> 00:22:15,916
ManagerDidUpdateState callback.


701
00:22:16,816 --> 00:22:18,536
In this, you can look at the


702
00:22:18,536 --> 00:22:20,786
value of state to see if the


703
00:22:20,786 --> 00:22:22,026
manager is ready to be used.


704
00:22:23,316 --> 00:22:24,636
Now if the value of state is


705
00:22:24,636 --> 00:22:26,446
CBManagerstate.unauthorized,


706
00:22:26,976 --> 00:22:28,106
then you can look at a new


707
00:22:28,106 --> 00:22:30,236
authorization property to see if


708
00:22:30,236 --> 00:22:31,726
the user has denied access to


709
00:22:31,726 --> 00:22:32,616
your application.


710
00:22:35,876 --> 00:22:37,606
So if your code looks like this


711
00:22:37,646 --> 00:22:39,886
today, where you only look at


712
00:22:39,886 --> 00:22:41,606
one or two values of manager


713
00:22:41,606 --> 00:22:44,216
state, I urge you to please take


714
00:22:44,216 --> 00:22:45,896
ten minutes aside today and


715
00:22:45,896 --> 00:22:47,546
update your code so it looks a


716
00:22:47,546 --> 00:22:49,516
little more like this where you


717
00:22:49,516 --> 00:22:51,146
look at all the possible values


718
00:22:51,196 --> 00:22:53,306
of manager state, and this also


719
00:22:53,306 --> 00:22:55,146
give you a really smooth path to


720
00:22:55,146 --> 00:22:56,266
start adopting user


721
00:22:56,266 --> 00:22:57,426
authorization in your


722
00:22:57,426 --> 00:22:58,036
application.


723
00:22:58,036 --> 00:23:00,706
All of this code will be


724
00:23:00,706 --> 00:23:02,336
available in the sample project,


725
00:23:02,476 --> 00:23:03,456
details of which will be


726
00:23:03,456 --> 00:23:04,516
provided in the more info


727
00:23:04,516 --> 00:23:06,786
session, section, sorry.


728
00:23:09,146 --> 00:23:11,006
Let's now move onto accessory


729
00:23:11,006 --> 00:23:11,696
notifications.


730
00:23:15,236 --> 00:23:18,406
Apple implements ANCS, or Apple


731
00:23:18,406 --> 00:23:19,886
Notification Center Service,


732
00:23:20,496 --> 00:23:21,976
which is a GATT server service


733
00:23:22,446 --> 00:23:24,466
that allows your accessories to


734
00:23:24,466 --> 00:23:27,126
get system and app notifications


735
00:23:27,496 --> 00:23:29,086
from the iOS Notification


736
00:23:29,086 --> 00:23:29,546
Center.


737
00:23:30,876 --> 00:23:32,286
If you want to learn more about


738
00:23:32,286 --> 00:23:34,086
ANCS, then the detailed


739
00:23:34,086 --> 00:23:35,826
documentation is available on


740
00:23:35,826 --> 00:23:39,546
developer.apple.com.


741
00:23:39,746 --> 00:23:41,676
The privacy update for ANCS is


742
00:23:41,726 --> 00:23:44,176
that user authorization will now


743
00:23:44,176 --> 00:23:45,926
be required in order to share


744
00:23:45,926 --> 00:23:47,856
notifications with accessories.


745
00:23:48,806 --> 00:23:50,806
And so if a user updates to iOS


746
00:23:50,866 --> 00:23:53,466
13, when your accessory connects


747
00:23:53,466 --> 00:23:54,416
in and registers for


748
00:23:54,416 --> 00:23:56,116
notifications, we'll show this


749
00:23:56,116 --> 00:23:57,656
permission prompt to users.


750
00:23:58,826 --> 00:24:00,616
Once users make this decision,


751
00:24:00,796 --> 00:24:02,106
they can modify it under the


752
00:24:02,106 --> 00:24:04,106
device-specific settings in


753
00:24:04,106 --> 00:24:04,786
Bluetooth settings.


754
00:24:04,846 --> 00:24:07,926
Now, we know that this flow


755
00:24:07,926 --> 00:24:09,636
could be a lot better for users


756
00:24:10,096 --> 00:24:11,556
if the permission prompt was


757
00:24:11,556 --> 00:24:12,976
shown at a time when it was more


758
00:24:12,976 --> 00:24:15,956
contextually relevant and in


759
00:24:15,956 --> 00:24:16,806
your application.


760
00:24:17,496 --> 00:24:19,396
And so we've created new ANCS


761
00:24:19,396 --> 00:24:21,716
privacy APIs to help you enable


762
00:24:21,716 --> 00:24:22,866
this experience.


763
00:24:24,496 --> 00:24:27,336
From your CBCentralManager, if


764
00:24:27,336 --> 00:24:28,636
you know that the peripheral


765
00:24:28,636 --> 00:24:29,806
that you are connecting to


766
00:24:29,926 --> 00:24:32,086
supports ANCS, you can use this


767
00:24:32,086 --> 00:24:33,436
new CBConnect option.


768
00:24:34,796 --> 00:24:36,656
If you do this, then upon


769
00:24:36,656 --> 00:24:38,166
successful connection and


770
00:24:38,236 --> 00:24:39,746
pairing, we'll show the


771
00:24:39,746 --> 00:24:41,126
permission alert to the user


772
00:24:41,466 --> 00:24:42,706
while the user is in your


773
00:24:42,706 --> 00:24:44,986
application, and when they


774
00:24:44,986 --> 00:24:46,136
respond to this permission


775
00:24:46,136 --> 00:24:47,936
alert, your application will


776
00:24:47,936 --> 00:24:49,916
receive a delegate callback that


777
00:24:49,916 --> 00:24:51,586
tells you that ANCS


778
00:24:51,586 --> 00:24:53,046
authorization has changed.


779
00:24:54,146 --> 00:24:55,356
And you can fetch the value of


780
00:24:55,426 --> 00:24:56,556
that using the getter


781
00:24:56,556 --> 00:24:57,666
ancsAuthorized.


782
00:25:00,616 --> 00:25:02,596
So, we spoke about user


783
00:25:02,596 --> 00:25:04,556
authorization and accessory


784
00:25:04,556 --> 00:25:05,336
notifications.


785
00:25:06,106 --> 00:25:07,586
But apart from this, there's a


786
00:25:07,586 --> 00:25:09,046
lot more that your application


787
00:25:09,046 --> 00:25:11,256
can do to be a good custodian of


788
00:25:11,286 --> 00:25:12,116
user privacy.


789
00:25:13,106 --> 00:25:14,136
So let's take a look at some


790
00:25:14,136 --> 00:25:16,026
best practices for your Core


791
00:25:16,026 --> 00:25:16,936
Bluetooth applications.


792
00:25:20,996 --> 00:25:23,316
First and foremost, invoke Core


793
00:25:23,316 --> 00:25:25,106
Bluetooth APIs only when


794
00:25:25,106 --> 00:25:26,936
required and at a time that it


795
00:25:26,936 --> 00:25:28,356
is contextually relevant to


796
00:25:28,356 --> 00:25:28,796
users.


797
00:25:30,736 --> 00:25:33,366
Next, scan and advertise for a


798
00:25:33,366 --> 00:25:34,936
limited duration only.


799
00:25:35,276 --> 00:25:36,356
When your application is


800
00:25:36,356 --> 00:25:38,426
advertising, it is essentially


801
00:25:38,426 --> 00:25:39,766
sharing information from the


802
00:25:39,766 --> 00:25:41,646
user's phone and limiting the


803
00:25:41,646 --> 00:25:43,346
duration for which you do this


804
00:25:43,416 --> 00:25:44,736
helps foster user trust.


805
00:25:47,616 --> 00:25:48,716
Keep your scan filters as


806
00:25:48,716 --> 00:25:51,656
specific as possible and look


807
00:25:51,656 --> 00:25:53,596
only for the UUIDs that your


808
00:25:53,596 --> 00:25:55,836
application is invested in.


809
00:25:57,256 --> 00:25:59,846
And lastly, be transparent with


810
00:25:59,846 --> 00:26:01,676
users about why your application


811
00:26:01,676 --> 00:26:02,986
requires access to Core


812
00:26:02,986 --> 00:26:03,376
Bluetooth.


813
00:26:03,476 --> 00:26:05,746
If you do this, then users are


814
00:26:05,746 --> 00:26:06,896
more likely to make the right


815
00:26:06,896 --> 00:26:07,386
decision.


816
00:26:08,876 --> 00:26:10,486
If you want to learn more about


817
00:26:10,806 --> 00:26:12,256
designing your applications for


818
00:26:12,256 --> 00:26:14,066
privacy, I invite you all to


819
00:26:14,066 --> 00:26:15,416
look at the recorded sessions


820
00:26:15,496 --> 00:26:17,266
for the privacy talks from this


821
00:26:17,266 --> 00:26:19,056
year's and previous years' WWDC


822
00:26:19,146 --> 00:26:19,546
sessions.


823
00:26:20,236 --> 00:26:24,436
So let's all be proactive in


824
00:26:24,436 --> 00:26:26,116
thinking about and safeguarding


825
00:26:26,116 --> 00:26:28,626
user privacy as we design and


826
00:26:28,626 --> 00:26:30,036
implement our Core Bluetooth


827
00:26:30,036 --> 00:26:30,676
applications.


828
00:26:32,066 --> 00:26:33,296
I'd now like to hand it over to


829
00:26:33,296 --> 00:26:34,476
Duy to walk you through


830
00:26:34,476 --> 00:26:35,216
developer tools.


831
00:26:35,686 --> 00:26:35,976
Thank you.


832
00:26:36,516 --> 00:26:39,616
[ Applause ]


833
00:26:40,116 --> 00:26:40,346
>> Thanks.


834
00:26:40,836 --> 00:26:42,436
I'd like to talk to you a little


835
00:26:42,436 --> 00:26:44,476
bit about a new feature we've


836
00:26:44,476 --> 00:26:45,546
added to the Core Bluetooth


837
00:26:45,616 --> 00:26:46,166
PacketLogger.


838
00:26:47,186 --> 00:26:48,886
For those that's not familiar


839
00:26:48,886 --> 00:26:49,676
with the Core Bluetooth


840
00:26:49,676 --> 00:26:50,996
PacketLogger, this is our


841
00:26:50,996 --> 00:26:52,326
Bluetooth packet analysis


842
00:26:52,326 --> 00:26:53,936
application built for Apple


843
00:26:53,936 --> 00:26:54,586
developers.


844
00:26:56,016 --> 00:26:57,346
Today, when you install a login


845
00:26:57,346 --> 00:26:59,346
profile on your iOS device and


846
00:26:59,346 --> 00:27:00,596
trigger sys diagnose, this is


847
00:27:00,636 --> 00:27:02,446
the application that can open up


848
00:27:02,446 --> 00:27:04,216
the small PacketLogger file


849
00:27:04,286 --> 00:27:05,346
that's inside.


850
00:27:05,996 --> 00:27:08,256
The application can decode all


851
00:27:08,256 --> 00:27:09,396
protocols defined by the


852
00:27:09,446 --> 00:27:10,586
Bluetooth SIG and by Apple.


853
00:27:10,586 --> 00:27:12,796
And because it can understand


854
00:27:12,796 --> 00:27:13,986
all of these protocols, it will


855
00:27:13,986 --> 00:27:15,366
also highlight errors to warn


856
00:27:15,366 --> 00:27:16,466
you of potential problems.


857
00:27:17,536 --> 00:27:19,276
It has rich filtering options.


858
00:27:19,736 --> 00:27:21,036
You can filter by trust


859
00:27:21,036 --> 00:27:22,356
connections or protocol.


860
00:27:23,836 --> 00:27:25,246
You can search by text or regex,


861
00:27:26,526 --> 00:27:27,836
comment and flag individual


862
00:27:27,836 --> 00:27:30,696
packets, and even export raw


863
00:27:30,696 --> 00:27:31,916
data for later analysis.


864
00:27:34,056 --> 00:27:36,566
This is what the top level looks


865
00:27:37,116 --> 00:27:42,786
like in dark mode, and in this


866
00:27:42,786 --> 00:27:44,456
example, I have filtered only


867
00:27:44,456 --> 00:27:46,426
for the ACI and ATT protocols.


868
00:27:47,656 --> 00:27:49,696
But you can also click down,


869
00:27:50,016 --> 00:27:52,246
click on each of the packets and


870
00:27:52,246 --> 00:27:54,426
drill down to view the full


871
00:27:54,456 --> 00:27:58,566
protocol hierarchy and examine


872
00:27:58,616 --> 00:27:59,676
each of the protocols


873
00:27:59,826 --> 00:28:03,126
individually down to the lowest


874
00:28:03,126 --> 00:28:03,936
layer in raw bytes.


875
00:28:07,996 --> 00:28:09,256
And new for this year, we've


876
00:28:09,256 --> 00:28:10,666
added a feature which we think


877
00:28:10,736 --> 00:28:11,606
you're really going to like.


878
00:28:11,916 --> 00:28:12,876
It's called Live Capture.


879
00:28:13,516 --> 00:28:17,326
[ Applause ]


880
00:28:17,826 --> 00:28:19,476
This means that you can now


881
00:28:19,746 --> 00:28:21,426
install a login profile on your


882
00:28:21,426 --> 00:28:23,326
iOS device, connect it to your


883
00:28:23,326 --> 00:28:26,286
Mac, launch PacketLogger, and


884
00:28:26,286 --> 00:28:27,856
capture live Bluetooth traffic


885
00:28:28,216 --> 00:28:29,976
from your iOS device to an


886
00:28:29,976 --> 00:28:30,476
accessory.


887
00:28:30,866 --> 00:28:33,696
[applause] Thank you.


888
00:28:34,508 --> 00:28:36,508
[ Applause ]


889
00:28:38,616 --> 00:28:40,436
You can also connect multiple


890
00:28:40,436 --> 00:28:42,176
iOS devices and capture live


891
00:28:42,176 --> 00:28:42,526
traffic.


892
00:28:43,406 --> 00:28:44,496
We hope that this will give you


893
00:28:44,496 --> 00:28:46,036
more context when you debug.


894
00:28:46,036 --> 00:28:47,246
It will make your debug more


895
00:28:47,246 --> 00:28:49,336
interactive and hopefully help


896
00:28:49,336 --> 00:28:50,676
you resolve your problems more


897
00:28:50,676 --> 00:28:50,976
quickly.


898
00:28:53,416 --> 00:28:55,076
And now that you're excited, how


899
00:28:55,076 --> 00:28:57,216
do you set up Live Capture?


900
00:28:57,646 --> 00:28:59,196
You can install the iOS 13


901
00:28:59,196 --> 00:29:00,526
developer beta on your iOS


902
00:29:00,526 --> 00:29:03,506
device, install the developer


903
00:29:03,506 --> 00:29:05,966
logging profile, launch


904
00:29:05,966 --> 00:29:08,926
PacketLogger, connect your iOS


905
00:29:08,956 --> 00:29:12,186
device to your Mac, select file


906
00:29:12,186 --> 00:29:13,426
New iOS Trace on your


907
00:29:13,426 --> 00:29:14,926
PacketLogger application, and


908
00:29:14,926 --> 00:29:15,236
that's it.


909
00:29:15,616 --> 00:29:16,346
You're live capturing.


910
00:29:18,096 --> 00:29:19,496
Thank you.


911
00:29:21,666 --> 00:29:22,836
There's also an indicator in


912
00:29:22,836 --> 00:29:24,836
your iOS device to tell that


913
00:29:24,836 --> 00:29:26,086
Live Capture is in progress.


914
00:29:26,616 --> 00:29:29,666
And how do you get PacketLogger?


915
00:29:30,546 --> 00:29:31,876
You can download PacketLogger


916
00:29:31,876 --> 00:29:33,406
inside the additional tools for


917
00:29:33,406 --> 00:29:34,246
Xcode package.


918
00:29:34,246 --> 00:29:36,376
The link will be provided in the


919
00:29:36,376 --> 00:29:37,366
more information page.


920
00:29:38,306 --> 00:29:39,656
PacketLogger is inside the


921
00:29:39,656 --> 00:29:41,106
hardware folder of this package.


922
00:29:41,626 --> 00:29:44,066
For best performance, run with


923
00:29:44,066 --> 00:29:44,976
MacOS Catalina.


924
00:29:48,676 --> 00:29:50,146
Let's wrap up now with a


925
00:29:50,146 --> 00:29:50,556
summary.


926
00:29:56,036 --> 00:29:57,586
When developing your accessory


927
00:29:57,586 --> 00:29:59,076
use the chipset with the latest


928
00:29:59,076 --> 00:30:00,396
Bluetooth stand to take


929
00:30:00,396 --> 00:30:01,896
advantage of all of the new


930
00:30:02,286 --> 00:30:03,906
performance and power


931
00:30:03,906 --> 00:30:05,906
optimizations like LE 2 Mbps and


932
00:30:05,906 --> 00:30:06,916
Advertising Extension.


933
00:30:07,476 --> 00:30:10,156
You can now build Core Bluetooth


934
00:30:10,156 --> 00:30:11,866
apps for Bluetooth BR/EDR


935
00:30:11,866 --> 00:30:12,366
devices.


936
00:30:12,516 --> 00:30:13,696
We look forward to seeing all of


937
00:30:13,696 --> 00:30:14,826
the new applications and


938
00:30:14,826 --> 00:30:15,746
accessories you build.


939
00:30:17,896 --> 00:30:19,166
And always protect your user


940
00:30:19,166 --> 00:30:20,806
privacy and protect their trust


941
00:30:20,806 --> 00:30:21,766
in your brand and product.


942
00:30:22,436 --> 00:30:25,116
And take advantage of the


943
00:30:25,116 --> 00:30:25,976
developer beta.


944
00:30:26,576 --> 00:30:27,586
Download the beta and test


945
00:30:27,586 --> 00:30:27,906
today.


946
00:30:28,506 --> 00:30:29,946
IOS has very good adoption


947
00:30:29,946 --> 00:30:30,196
rates.


948
00:30:30,626 --> 00:30:32,146
You don't want your users to run


949
00:30:32,146 --> 00:30:33,516
into problems when they upgrade.


950
00:30:34,176 --> 00:30:35,746
We usually have a small window


951
00:30:35,746 --> 00:30:36,086
to help.


952
00:30:36,086 --> 00:30:37,816
So if you discover a problem


953
00:30:37,816 --> 00:30:39,006
early enough, you can work with


954
00:30:39,006 --> 00:30:40,206
us to resolve the issues.


955
00:30:40,746 --> 00:30:43,266
And refer to the accessory


956
00:30:43,366 --> 00:30:44,866
design guidelines for Apple


957
00:30:44,866 --> 00:30:45,406
devices.


958
00:30:45,936 --> 00:30:46,806
We have a great set of


959
00:30:46,806 --> 00:30:48,196
guidelines there to tell you how


960
00:30:48,196 --> 00:30:49,596
to develop the best accessory.


961
00:30:50,146 --> 00:30:52,996
And finally, Apple is here to


962
00:30:52,996 --> 00:30:53,226
help.


963
00:30:53,956 --> 00:30:55,346
Use the feedback app, reach out


964
00:30:55,346 --> 00:30:56,686
to us so we can work together in


965
00:30:56,686 --> 00:30:57,526
your accessories and


966
00:30:57,526 --> 00:30:58,126
applications.


967
00:30:58,776 --> 00:31:01,046
And if you have more questions,


968
00:31:01,046 --> 00:31:02,286
come to the Core Bluetooth lab


969
00:31:02,286 --> 00:31:02,746
at 4.


970
00:31:02,746 --> 00:31:03,826
Thank you.


971
00:31:04,516 --> 00:31:08,500
[ Applause ]

