1
00:00:01,516 --> 00:00:04,500
[ Music ]


2
00:00:09,516 --> 00:00:12,026
[ Applause ]


3
00:00:12,526 --> 00:00:13,886
>> Good afternoon, everyone, and


4
00:00:14,056 --> 00:00:15,106
thanks for joining us today.


5
00:00:16,065 --> 00:00:17,416
I'm Garrett, and I work on the


6
00:00:17,416 --> 00:00:18,656
Trust and Execution Team here at


7
00:00:18,656 --> 00:00:20,236
Apple and today we're here to


8
00:00:20,236 --> 00:00:21,756
talk All About Notarization.


9
00:00:22,276 --> 00:00:25,066
Here's a quick agenda for the


10
00:00:25,066 --> 00:00:25,346
talk.


11
00:00:25,346 --> 00:00:26,516
We're going to start with a


12
00:00:26,516 --> 00:00:27,656
brief overview of what


13
00:00:27,656 --> 00:00:29,046
notarization is and some of the


14
00:00:29,046 --> 00:00:30,006
benefits that it provides.


15
00:00:30,986 --> 00:00:31,776
Then we're going to talk about


16
00:00:31,776 --> 00:00:33,076
the application requirements to


17
00:00:33,076 --> 00:00:34,466
get your software notarized.


18
00:00:35,336 --> 00:00:36,256
And then finally we'll run


19
00:00:36,256 --> 00:00:38,156
through the workflows and tools


20
00:00:38,226 --> 00:00:40,086
you'll need to use to notarize


21
00:00:40,086 --> 00:00:40,656
your software.


22
00:00:40,656 --> 00:00:44,666
So let's get started.


23
00:00:45,196 --> 00:00:46,746
What exactly is notarization?


24
00:00:47,666 --> 00:00:50,136
Well, it's a process that we


25
00:00:50,136 --> 00:00:52,356
introduced last year at WWDC to


26
00:00:52,746 --> 00:00:54,106
help identify and block


27
00:00:54,366 --> 00:00:56,086
malicious software prior to


28
00:00:56,086 --> 00:00:56,666
distribution.


29
00:00:57,326 --> 00:00:59,346
Now it's an extension of the


30
00:00:59,346 --> 00:01:00,906
Developer ID Program, which


31
00:01:00,906 --> 00:01:01,676
means that you don't need to


32
00:01:01,676 --> 00:01:02,936
register for anything different


33
00:01:03,586 --> 00:01:04,796
or use different certificates


34
00:01:05,786 --> 00:01:07,236
which also means that you stay


35
00:01:07,236 --> 00:01:08,986
in control of signing and


36
00:01:08,986 --> 00:01:10,366
distribution of your software


37
00:01:10,696 --> 00:01:11,736
just like you did before


38
00:01:11,736 --> 00:01:12,886
notarization was introduced.


39
00:01:15,606 --> 00:01:17,396
The key to this is the Notary


40
00:01:17,396 --> 00:01:19,826
Service which performs automated


41
00:01:19,826 --> 00:01:22,136
security checks on Developer ID


42
00:01:22,136 --> 00:01:22,966
signed content.


43
00:01:23,546 --> 00:01:25,816
So let's run through a little


44
00:01:25,816 --> 00:01:26,926
bit about what the workflow


45
00:01:26,926 --> 00:01:28,426
looks like when you need to


46
00:01:28,426 --> 00:01:29,646
start notarizing your software


47
00:01:29,646 --> 00:01:30,306
for the first time.


48
00:01:32,216 --> 00:01:33,816
Here's a diagram that talks a


49
00:01:33,816 --> 00:01:34,706
little bit about what the


50
00:01:34,706 --> 00:01:35,696
development workflow can look


51
00:01:35,696 --> 00:01:37,636
like and local development


52
00:01:37,866 --> 00:01:39,266
remains completely unchanged.


53
00:01:39,966 --> 00:01:41,366
You build and sign at your desk


54
00:01:41,576 --> 00:01:42,656
using your Apple Developer


55
00:01:42,656 --> 00:01:44,526
Certificates until you have a


56
00:01:44,526 --> 00:01:45,236
release candidate.


57
00:01:45,776 --> 00:01:48,816
At that point you sign the


58
00:01:48,816 --> 00:01:50,196
software with your Developer ID


59
00:01:50,196 --> 00:01:52,166
Certificate, and you can send a


60
00:01:52,166 --> 00:01:53,486
copy of it to the Apple Notary


61
00:01:53,486 --> 00:01:55,536
Service for notarization.


62
00:01:56,726 --> 00:01:58,376
When notarization is complete


63
00:01:58,506 --> 00:02:00,346
and successful, the Notary


64
00:02:00,346 --> 00:02:02,076
Service can send back a ticket


65
00:02:02,846 --> 00:02:03,726
which you staple to your


66
00:02:03,726 --> 00:02:05,696
software prior to distribution


67
00:02:06,266 --> 00:02:09,045
and once it's stapled, the


68
00:02:09,045 --> 00:02:09,806
software is ready for


69
00:02:09,806 --> 00:02:11,396
distribution just like you did


70
00:02:11,396 --> 00:02:11,746
before.


71
00:02:14,066 --> 00:02:15,746
Now it's worth calling out that


72
00:02:16,046 --> 00:02:17,256
this workflow didn't change at


73
00:02:17,256 --> 00:02:18,326
all from last year, so this is


74
00:02:18,326 --> 00:02:19,296
just a bit of a refresher.


75
00:02:19,946 --> 00:02:22,816
Now what we didn't talk about


76
00:02:22,816 --> 00:02:24,446
last year was what happens when


77
00:02:24,446 --> 00:02:25,776
someone downloads your software


78
00:02:25,776 --> 00:02:26,996
and uses it for the first time.


79
00:02:28,426 --> 00:02:29,406
So when a user downloads your


80
00:02:29,406 --> 00:02:30,426
stapled software and


81
00:02:31,006 --> 00:02:32,096
double-click it to launch it,


82
00:02:32,556 --> 00:02:33,986
the gatekeeper will perform a


83
00:02:33,986 --> 00:02:34,716
verification.


84
00:02:35,966 --> 00:02:37,616
It'll check the local ticket and


85
00:02:37,616 --> 00:02:38,706
it will also reach out to the


86
00:02:38,706 --> 00:02:41,066
Notary Service via CloudKit to


87
00:02:41,066 --> 00:02:42,006
check for a ticket also.


88
00:02:42,886 --> 00:02:44,246
As long as the ticket checks out


89
00:02:44,246 --> 00:02:45,456
and the ticket matches the


90
00:02:45,456 --> 00:02:47,586
content of your app, gatekeeper


91
00:02:47,586 --> 00:02:48,696
will allow the application and


92
00:02:49,096 --> 00:02:50,076
the user will see the normal


93
00:02:50,076 --> 00:02:50,876
first launch prompt.


94
00:02:52,096 --> 00:02:53,746
Now I want to remind everyone


95
00:02:54,296 --> 00:02:56,466
that notarization is not an app


96
00:02:56,466 --> 00:02:56,746
review.


97
00:02:57,706 --> 00:02:59,186
The Notary Service performs a


98
00:02:59,186 --> 00:03:00,386
set of automated security


99
00:03:01,246 --> 00:03:01,366
checks.


100
00:03:03,016 --> 00:03:05,866
Now last year we made a goal to


101
00:03:05,866 --> 00:03:07,276
get most responses back from the


102
00:03:07,276 --> 00:03:08,586
Notary Service within an hour


103
00:03:10,026 --> 00:03:11,026
and it actually turns out that


104
00:03:11,026 --> 00:03:13,616
over the last year 99% of


105
00:03:13,616 --> 00:03:15,306
submissions have had an answer


106
00:03:15,306 --> 00:03:17,376
back within 15 minutes.


107
00:03:18,636 --> 00:03:20,486
Also, the status of the Notary


108
00:03:20,486 --> 00:03:22,046
Service is now on Apple's public


109
00:03:22,046 --> 00:03:22,816
status page.


110
00:03:23,326 --> 00:03:24,626
So you can easily check to see


111
00:03:24,626 --> 00:03:25,936
if there any service problems


112
00:03:26,246 --> 00:03:27,686
that would cause problems.


113
00:03:28,246 --> 00:03:31,456
Now what are the benefits to


114
00:03:31,456 --> 00:03:32,066
notarization?


115
00:03:32,866 --> 00:03:34,566
Well, there are many of them.


116
00:03:34,666 --> 00:03:35,786
So I'm just going to highlight a


117
00:03:35,786 --> 00:03:37,476
few of them today.


118
00:03:37,586 --> 00:03:39,236
First the Notary Service can


119
00:03:39,236 --> 00:03:40,636
help prevent you from


120
00:03:40,636 --> 00:03:41,566
inadvertently shipping a


121
00:03:41,566 --> 00:03:42,566
malicious dependency.


122
00:03:44,476 --> 00:03:47,366
Second, apps with a hardened


123
00:03:47,496 --> 00:03:49,476
runtime are more secure by


124
00:03:49,476 --> 00:03:50,986
default, and we'll talk a little


125
00:03:50,986 --> 00:03:51,726
more about that later.


126
00:03:52,256 --> 00:03:53,636
That can help prevent your app


127
00:03:53,636 --> 00:03:55,166
from being abused by attackers.


128
00:03:59,106 --> 00:04:00,906
Third, users are more likely to


129
00:04:00,906 --> 00:04:02,456
download and try new software


130
00:04:02,786 --> 00:04:04,066
knowing that Apple has scanned


131
00:04:04,066 --> 00:04:05,526
it for known security issues.


132
00:04:06,076 --> 00:04:10,666
And finally, notarization also


133
00:04:10,666 --> 00:04:11,806
provides an audit trail of


134
00:04:11,806 --> 00:04:13,096
software notarized by your


135
00:04:13,096 --> 00:04:14,706
developer ID account that you


136
00:04:14,706 --> 00:04:15,896
can use to check the submission


137
00:04:15,896 --> 00:04:17,245
history and ensure that software


138
00:04:17,245 --> 00:04:18,026
hasn't been released that you


139
00:04:18,026 --> 00:04:20,315
didn't intend to release from


140
00:04:20,315 --> 00:04:20,886
your account.


141
00:04:21,625 --> 00:04:23,386
So that's a little bit of an


142
00:04:23,386 --> 00:04:24,556
overview of notarization.


143
00:04:24,926 --> 00:04:26,096
Now let's bring up Robert to


144
00:04:26,096 --> 00:04:27,116
talk about the application


145
00:04:27,116 --> 00:04:28,456
requirements to notarize your


146
00:04:28,456 --> 00:04:28,936
software.


147
00:04:29,966 --> 00:04:30,976
Robert.


148
00:04:32,516 --> 00:04:36,500
[ Applause ]


149
00:04:38,326 --> 00:04:40,016
>> So to start I want to say


150
00:04:40,016 --> 00:04:41,846
that for any of the software


151
00:04:41,846 --> 00:04:43,536
that you previously distributed


152
00:04:43,666 --> 00:04:44,716
it doesn't have to meet any new


153
00:04:44,716 --> 00:04:45,246
requirements.


154
00:04:45,246 --> 00:04:47,876
You can submit your existing


155
00:04:47,926 --> 00:04:48,896
distributed software for


156
00:04:48,896 --> 00:04:50,766
notarization as is without


157
00:04:50,766 --> 00:04:53,256
change, but for new software you


158
00:04:53,256 --> 00:04:54,646
need to make sure that it meets


159
00:04:54,646 --> 00:04:56,186
a few security requirements.


160
00:04:56,246 --> 00:04:57,736
In particular, it has to be


161
00:04:57,736 --> 00:04:59,286
completely and correctly signed


162
00:04:59,696 --> 00:05:00,616
and it needs to adopt the


163
00:05:00,616 --> 00:05:02,486
hardened runtime.


164
00:05:02,486 --> 00:05:03,686
And by new software I mean


165
00:05:03,686 --> 00:05:05,816
software signed on or after June


166
00:05:05,856 --> 00:05:07,696
1st of 2019.


167
00:05:08,806 --> 00:05:10,436
So we're going to go into detail


168
00:05:10,436 --> 00:05:11,916
on what we mean by both of those


169
00:05:11,916 --> 00:05:13,336
things, but the correct signing


170
00:05:13,336 --> 00:05:15,276
and the hardened runtime.


171
00:05:15,606 --> 00:05:19,716
So first when you, to completely


172
00:05:19,716 --> 00:05:20,836
sign everything you need to sign


173
00:05:20,836 --> 00:05:21,236
everything.


174
00:05:21,236 --> 00:05:22,556
That means bundles, Macho-Os,


175
00:05:22,586 --> 00:05:24,496
installer packages wherever they


176
00:05:24,496 --> 00:05:26,546
are or whether you have Mach-Os


177
00:05:26,546 --> 00:05:28,086
in your installer packages,


178
00:05:28,086 --> 00:05:29,576
installer packages in your


179
00:05:30,036 --> 00:05:31,456
bundles, anywhere that they're


180
00:05:31,456 --> 00:05:33,306
found in any place within your


181
00:05:33,306 --> 00:05:34,876
product they need to be signed,


182
00:05:34,906 --> 00:05:36,516
they need to be signed


183
00:05:36,516 --> 00:05:36,856
correctly.


184
00:05:38,166 --> 00:05:39,936
So to sign correctly that means


185
00:05:40,026 --> 00:05:42,756
you have to sign bundles,


186
00:05:42,756 --> 00:05:45,346
Macho-Os and code, and I'll talk


187
00:05:45,346 --> 00:05:46,456
more about code in a second,


188
00:05:46,456 --> 00:05:49,646
with your developer ID


189
00:05:49,646 --> 00:05:51,206
application certificate and be


190
00:05:51,206 --> 00:05:52,286
sure to include a secure


191
00:05:52,286 --> 00:05:52,876
timestamp.


192
00:05:54,176 --> 00:05:56,056
For executables they need to opt


193
00:05:56,056 --> 00:05:57,526
into the hardened runtime.


194
00:05:57,526 --> 00:05:58,836
You don't need to opt into the


195
00:05:58,836 --> 00:06:00,196
hardened runtime for dylibs or


196
00:06:00,196 --> 00:06:01,556
frameworks or bundles just for


197
00:06:01,556 --> 00:06:02,196
executables.


198
00:06:03,546 --> 00:06:05,386
For installer packages you need


199
00:06:05,386 --> 00:06:07,516
to sign them with your Developer


200
00:06:07,516 --> 00:06:09,316
ID Installer Certificate and


201
00:06:09,316 --> 00:06:10,726
this is different from your


202
00:06:10,726 --> 00:06:11,856
Developer ID Application


203
00:06:11,856 --> 00:06:12,906
Certificate so be careful.


204
00:06:14,236 --> 00:06:16,036
Also, if you choose to sign your


205
00:06:16,036 --> 00:06:17,926
disk images to avoid gatekeeper


206
00:06:17,926 --> 00:06:20,306
path randomization, those must


207
00:06:20,306 --> 00:06:21,686
be signed with your Developer ID


208
00:06:21,686 --> 00:06:23,086
Application Certificate and


209
00:06:23,086 --> 00:06:24,346
include a secure timestamp.


210
00:06:24,886 --> 00:06:27,926
So if you're using Xcode for


211
00:06:27,926 --> 00:06:29,266
building your package, your


212
00:06:29,266 --> 00:06:29,986
software, this is easy.


213
00:06:29,986 --> 00:06:32,796
If you turn on automatic code


214
00:06:32,796 --> 00:06:34,396
signing, Xcode does all of this


215
00:06:34,396 --> 00:06:36,436
for you, but you have to be


216
00:06:36,436 --> 00:06:37,016
careful.


217
00:06:37,016 --> 00:06:39,586
If you use script build phases


218
00:06:39,586 --> 00:06:41,666
or copy build phases, those


219
00:06:41,776 --> 00:06:43,486
might be introducing new code


220
00:06:43,486 --> 00:06:46,656
into your software that Xcode


221
00:06:46,656 --> 00:06:48,026
doesn't know about and then you


222
00:06:48,026 --> 00:06:49,206
have to make sure that those get


223
00:06:49,496 --> 00:06:50,596
correctly signed.


224
00:06:51,206 --> 00:06:55,176
So I mentioned code files.


225
00:06:55,576 --> 00:06:57,936
So when we introduced code


226
00:06:57,936 --> 00:06:59,856
signing a number of years ago,


227
00:06:59,856 --> 00:07:01,476
we documented in the technote


228
00:07:01,476 --> 00:07:02,946
that these things called code


229
00:07:02,946 --> 00:07:03,396
places.


230
00:07:03,706 --> 00:07:05,336
So any files found in any of


231
00:07:05,336 --> 00:07:06,706
these places within their bundle


232
00:07:06,706 --> 00:07:08,126
are considered code by the code


233
00:07:08,126 --> 00:07:09,576
signing infrastructure and that


234
00:07:09,576 --> 00:07:10,646
means they need to have an


235
00:07:10,646 --> 00:07:11,726
attached signature.


236
00:07:12,246 --> 00:07:15,726
Mach-Os are the best for this.


237
00:07:15,726 --> 00:07:16,966
You can embed the signature


238
00:07:16,966 --> 00:07:18,726
inside of any Mach-Os that you


239
00:07:18,726 --> 00:07:19,906
put in these places as well as


240
00:07:19,906 --> 00:07:21,536
for bundles, but if you put


241
00:07:21,536 --> 00:07:23,416
other types of files such as


242
00:07:23,666 --> 00:07:27,536
JPEGs or raw binary files, those


243
00:07:27,536 --> 00:07:30,116
have to be signed as well, but


244
00:07:30,116 --> 00:07:31,486
they don't get attached


245
00:07:31,486 --> 00:07:32,826
signature instead the signature


246
00:07:32,826 --> 00:07:34,806
ends up as an extended


247
00:07:34,806 --> 00:07:35,386
attribute.


248
00:07:35,826 --> 00:07:36,706
And that means that you have to


249
00:07:36,706 --> 00:07:37,886
be careful when you're packaging


250
00:07:37,886 --> 00:07:39,056
up your code to make sure that


251
00:07:39,056 --> 00:07:40,756
that extended attribute stays


252
00:07:40,756 --> 00:07:41,326
within those.


253
00:07:41,786 --> 00:07:43,316
To avoid having to be too


254
00:07:43,316 --> 00:07:44,686
careful with that we recommend


255
00:07:44,686 --> 00:07:46,236
that you put anything that isn't


256
00:07:46,236 --> 00:07:47,786
a Macho-O or a bundle containing


257
00:07:47,786 --> 00:07:49,406
a Macho-O in a place other than


258
00:07:49,406 --> 00:07:50,986
any of these places when you're


259
00:07:50,986 --> 00:07:51,946
structuring your app.


260
00:07:52,646 --> 00:07:55,676
So to get singing right when


261
00:07:55,676 --> 00:07:56,976
you're doing it outside of


262
00:07:56,976 --> 00:07:58,976
Xcode, we recommend what we call


263
00:07:58,976 --> 00:08:00,206
inside-out code signing.


264
00:08:00,486 --> 00:08:02,016
That means you sign the most


265
00:08:02,016 --> 00:08:05,096
deeply nested bundle or piece of


266
00:08:05,096 --> 00:08:07,826
code within your app first.


267
00:08:08,366 --> 00:08:10,216
In this case, it would be the


268
00:08:10,216 --> 00:08:11,876
updater.app inside of the


269
00:08:11,876 --> 00:08:13,596
Sparkle framework inside of the


270
00:08:13,596 --> 00:08:17,116
Watching Grass Grow app and then


271
00:08:17,116 --> 00:08:18,656
you move up a level and sign


272
00:08:18,656 --> 00:08:20,686
each of the things individually.


273
00:08:20,926 --> 00:08:21,966
Note that when you sign the


274
00:08:21,966 --> 00:08:24,046
Sparkle framework by itself or


275
00:08:24,046 --> 00:08:25,456
the Sparkle framework that grabs


276
00:08:25,456 --> 00:08:27,356
the Sparkle main executable as


277
00:08:27,356 --> 00:08:28,696
well as signing the updater.app


278
00:08:28,696 --> 00:08:29,086
together.


279
00:08:29,086 --> 00:08:31,696
And note you need to go


280
00:08:31,856 --> 00:08:32,966
individually to watch Grass


281
00:08:32,966 --> 00:08:35,846
Grow, savergrowgrass.dylib and


282
00:08:35,846 --> 00:08:36,976
Watching Grass Grow Helper.


283
00:08:38,015 --> 00:08:39,515
And finally, after you've signed


284
00:08:39,515 --> 00:08:40,756
all of those you sign everything


285
00:08:40,756 --> 00:08:42,446
together at the top bundle and


286
00:08:42,446 --> 00:08:44,285
again this will sign the main


287
00:08:44,285 --> 00:08:45,846
executable your bundle as


288
00:08:45,846 --> 00:08:47,786
indicated by your Info.plist.


289
00:08:48,996 --> 00:08:51,326
Some of you use the -- Deep Flag


290
00:08:51,326 --> 00:08:52,626
in your custom workflows, but


291
00:08:52,626 --> 00:08:54,406
you need to be careful.


292
00:08:54,586 --> 00:08:56,626
The -- Deep Flag only looks for


293
00:08:56,626 --> 00:08:58,716
code in code places and in this


294
00:08:58,716 --> 00:09:02,226
case the Grow Grass dylib the


295
00:09:02,226 --> 00:09:04,076
Watching Grass Grow Saver and


296
00:09:04,076 --> 00:09:06,356
the updater.app wouldn't be


297
00:09:06,356 --> 00:09:07,326
found as code.


298
00:09:07,326 --> 00:09:08,176
They would be signed in as


299
00:09:08,176 --> 00:09:09,876
resources, but they wouldn't be


300
00:09:09,876 --> 00:09:10,986
signed as code and, therefore,


301
00:09:10,986 --> 00:09:12,566
they would be rejected by the


302
00:09:12,566 --> 00:09:13,846
notarization unless you took the


303
00:09:13,846 --> 00:09:15,266
extra steps to do the inside out


304
00:09:15,266 --> 00:09:15,576
signing.


305
00:09:16,756 --> 00:09:19,856
And see Technote 2206 for more


306
00:09:19,856 --> 00:09:20,976
information on inside out


307
00:09:20,976 --> 00:09:24,036
signing and code places after


308
00:09:24,186 --> 00:09:24,686
the talk.


309
00:09:26,226 --> 00:09:27,796
So once you've completely and


310
00:09:27,796 --> 00:09:29,296
correctly signed your bundle,


311
00:09:29,296 --> 00:09:30,996
your software, you have to make


312
00:09:30,996 --> 00:09:32,046
sure that you don't invalidate


313
00:09:32,046 --> 00:09:32,676
your signature.


314
00:09:32,886 --> 00:09:33,786
That means you should never be


315
00:09:33,786 --> 00:09:35,396
changing files in your bundle


316
00:09:35,396 --> 00:09:36,856
except during installation or


317
00:09:36,856 --> 00:09:38,856
update and when you update make


318
00:09:38,856 --> 00:09:40,586
sure what is the result of that


319
00:09:40,586 --> 00:09:42,526
update is correctly signed and


320
00:09:42,606 --> 00:09:44,556
notarized on your customer


321
00:09:44,556 --> 00:09:44,916
system.


322
00:09:44,916 --> 00:09:48,356
So now we're going to dig deeper


323
00:09:48,356 --> 00:09:49,306
into the hardened runtime.


324
00:09:49,306 --> 00:09:50,476
We introduced the hardened


325
00:09:50,476 --> 00:09:53,696
runtime last year at WWDC and


326
00:09:53,696 --> 00:09:55,166
now we're going to give a bit


327
00:09:55,166 --> 00:09:57,076
more detail to discuss its


328
00:09:57,126 --> 00:09:59,316
benefits and configuration.


329
00:09:59,776 --> 00:10:03,346
So the hardened runtime extends


330
00:10:03,346 --> 00:10:04,676
many of the system integrity


331
00:10:04,676 --> 00:10:06,526
protections that we have on


332
00:10:06,526 --> 00:10:08,286
macOS to your app.


333
00:10:08,696 --> 00:10:10,376
This means Runtime Code Signing


334
00:10:10,376 --> 00:10:12,296
Enforcement, library validation,


335
00:10:12,646 --> 00:10:13,906
DYLD environment variable


336
00:10:13,906 --> 00:10:15,226
protection and debugging


337
00:10:15,226 --> 00:10:15,716
protection.


338
00:10:16,146 --> 00:10:17,126
Note that all of these


339
00:10:17,206 --> 00:10:19,056
protections are owned by default


340
00:10:19,056 --> 00:10:21,266
and not configurable on iOS but


341
00:10:21,266 --> 00:10:22,896
on a macOS that are configurable


342
00:10:22,896 --> 00:10:24,216
via entitlements that any


343
00:10:24,216 --> 00:10:25,656
developer can set.


344
00:10:26,106 --> 00:10:29,306
So if you're using Xcode,


345
00:10:29,306 --> 00:10:30,896
adopting the hardened runtime is


346
00:10:30,926 --> 00:10:31,276
easy.


347
00:10:31,466 --> 00:10:32,376
Just go to the signing and


348
00:10:32,376 --> 00:10:34,096
capabilities tab and make sure


349
00:10:34,096 --> 00:10:36,356
that the runtime capability is


350
00:10:36,386 --> 00:10:38,026
present on your target.


351
00:10:40,226 --> 00:10:41,886
Then you can select which


352
00:10:41,886 --> 00:10:42,866
entitlements you need to


353
00:10:42,866 --> 00:10:44,566
configure the hardened runtime


354
00:10:44,566 --> 00:10:46,226
on your project using the


355
00:10:46,226 --> 00:10:47,146
checkboxes provided.


356
00:10:47,856 --> 00:10:51,166
If you're using a custom


357
00:10:51,166 --> 00:10:52,836
workflow outside Xcode, you can


358
00:10:52,836 --> 00:10:54,126
use the codesign command to


359
00:10:54,126 --> 00:10:55,576
adopt the hardened runtime and


360
00:10:55,576 --> 00:10:57,426
to do that use the option


361
00:10:57,426 --> 00:11:00,416
runtime command to codesign and


362
00:11:00,416 --> 00:11:02,176
make sure you use the timestamp


363
00:11:02,176 --> 00:11:03,906
option as well to ensure that


364
00:11:03,906 --> 00:11:06,126
there is a secure timestamp on


365
00:11:06,126 --> 00:11:06,876
your application.


366
00:11:07,466 --> 00:11:11,076
To verify that you have adopted


367
00:11:11,076 --> 00:11:12,316
the hardened runtime correctly


368
00:11:12,616 --> 00:11:14,136
use the display option to


369
00:11:14,136 --> 00:11:15,526
codesign with the verbosity


370
00:11:15,526 --> 00:11:17,636
level of 2 and look for the


371
00:11:17,636 --> 00:11:19,366
runtime word in the flag


372
00:11:19,366 --> 00:11:19,836
section.


373
00:11:20,466 --> 00:11:21,566
Also note that the hardened


374
00:11:21,596 --> 00:11:22,346
runtime is versioned.


375
00:11:22,796 --> 00:11:24,076
When you sign with the hardened


376
00:11:24,076 --> 00:11:26,046
runtime, we record what version


377
00:11:26,136 --> 00:11:27,706
you were signing with so that


378
00:11:27,706 --> 00:11:29,496
when, if we were to add


379
00:11:29,496 --> 00:11:30,476
additional protections to


380
00:11:30,476 --> 00:11:31,656
hardened runtime in the future,


381
00:11:31,866 --> 00:11:33,366
we'll ensure that only the ones


382
00:11:33,366 --> 00:11:34,456
that your app has been tested


383
00:11:34,456 --> 00:11:35,636
with get applied on future


384
00:11:35,636 --> 00:11:35,976
systems.


385
00:11:39,386 --> 00:11:41,036
So what is Runtime Code Signing


386
00:11:41,036 --> 00:11:41,556
Enforcement?


387
00:11:42,186 --> 00:11:43,546
It prevents creation of


388
00:11:43,546 --> 00:11:44,906
executable memory without an


389
00:11:44,906 --> 00:11:47,056
associated code signature within


390
00:11:47,056 --> 00:11:51,016
your process and it does this by


391
00:11:51,016 --> 00:11:52,556
ensuring first that all bytes


392
00:11:52,556 --> 00:11:54,196
mapped into your process match


393
00:11:54,196 --> 00:11:55,666
their associated code signature


394
00:11:55,666 --> 00:11:57,146
when they're read from disk and


395
00:11:57,146 --> 00:11:58,266
this includes not just


396
00:11:58,266 --> 00:11:59,256
executable regions of your


397
00:11:59,256 --> 00:12:00,976
Mach-O but also the


398
00:12:00,976 --> 00:12:02,436
non-executable mappings like


399
00:12:02,436 --> 00:12:03,476
your read-only sections.


400
00:12:05,476 --> 00:12:07,316
And we prevent execution for


401
00:12:07,316 --> 00:12:08,866
modified memory that doesn't


402
00:12:08,866 --> 00:12:09,786
match its signature.


403
00:12:10,456 --> 00:12:12,886
So by verifying that the memory


404
00:12:12,976 --> 00:12:14,496
is, the memory that we're


405
00:12:14,496 --> 00:12:15,866
reading from disk is correct as


406
00:12:15,866 --> 00:12:17,176
it's coming in and making sure


407
00:12:17,176 --> 00:12:18,186
that we can't change it we


408
00:12:18,186 --> 00:12:19,436
ensure the integrity of your


409
00:12:19,436 --> 00:12:20,386
process as it's running.


410
00:12:22,546 --> 00:12:24,116
Now one of the challenges that


411
00:12:24,116 --> 00:12:25,336
can come up with working with


412
00:12:25,336 --> 00:12:26,546
the Runtime Code Signing


413
00:12:26,546 --> 00:12:28,446
Enforcement is if your code uses


414
00:12:28,446 --> 00:12:31,066
JIT to make non-native code run


415
00:12:31,066 --> 00:12:31,896
fast within your app.


416
00:12:32,526 --> 00:12:33,986
To do this we recommend that you


417
00:12:33,986 --> 00:12:35,486
use the allow JIT entitlement


418
00:12:35,886 --> 00:12:37,946
and then use the MAP-JIT flat


419
00:12:37,946 --> 00:12:39,306
when allocating your


420
00:12:39,306 --> 00:12:40,926
Read/Write/Execute memory that


421
00:12:40,926 --> 00:12:42,976
you're compiling the code into.


422
00:12:43,276 --> 00:12:45,096
This allows us to keep the rest


423
00:12:45,096 --> 00:12:46,266
of the protections on all of


424
00:12:46,266 --> 00:12:47,586
your other memory within the


425
00:12:47,586 --> 00:12:49,486
system while giving you this


426
00:12:49,486 --> 00:12:51,506
scratch space memory to do what


427
00:12:51,506 --> 00:12:52,996
you need with respect to JIT.


428
00:12:54,026 --> 00:12:57,586
If you can't adopt the MAP-JIT


429
00:12:57,586 --> 00:12:58,686
flag because you don't have


430
00:12:58,776 --> 00:13:01,036
source code access to your JIT


431
00:13:01,036 --> 00:13:01,506
engine.


432
00:13:01,756 --> 00:13:02,256
You can use the


433
00:13:02,256 --> 00:13:03,836
allow-unsigned-executive-memory


434
00:13:03,836 --> 00:13:04,466
entitlement.


435
00:13:04,936 --> 00:13:06,906
This will lower the security


436
00:13:06,906 --> 00:13:09,126
predictions provided by Runtime


437
00:13:09,126 --> 00:13:11,796
Code Signing Enforcement to just


438
00:13:11,796 --> 00:13:13,396
verifying that for every piece


439
00:13:13,396 --> 00:13:14,556
of memory that does have a code


440
00:13:14,556 --> 00:13:16,686
signature associated all of the


441
00:13:16,686 --> 00:13:17,976
bytes that you read from disk


442
00:13:18,216 --> 00:13:20,586
are, in fact, match that, but it


443
00:13:20,586 --> 00:13:23,366
allows modification to any of


444
00:13:23,366 --> 00:13:25,256
your memory inside your process


445
00:13:25,426 --> 00:13:27,976
and allows the creation of


446
00:13:28,476 --> 00:13:29,886
unsigned executable regions.


447
00:13:32,606 --> 00:13:33,446
Another thing that we've seen


448
00:13:33,446 --> 00:13:34,636
some developers having


449
00:13:34,636 --> 00:13:36,746
challenges with is if they


450
00:13:36,746 --> 00:13:39,086
attempt to patch some system


451
00:13:39,086 --> 00:13:40,066
frameworks that they've loaded


452
00:13:40,066 --> 00:13:42,366
in after they have adopted the


453
00:13:42,366 --> 00:13:43,106
hardened runtime.


454
00:13:43,866 --> 00:13:45,656
We don't recommend that you do


455
00:13:45,656 --> 00:13:46,776
this and you should see whether


456
00:13:46,776 --> 00:13:47,666
any of the hardened runtime


457
00:13:47,736 --> 00:13:49,396
features actually make the,


458
00:13:49,686 --> 00:13:50,856
solve the reasons why you're


459
00:13:50,856 --> 00:13:51,846
doing this.


460
00:13:51,966 --> 00:13:53,336
But if you need to the


461
00:13:53,336 --> 00:13:54,916
allow-unsigned-executable-memory


462
00:13:54,916 --> 00:13:56,676
entitlement will do what you


463
00:13:56,676 --> 00:13:58,166
need to allow you to modify


464
00:13:58,166 --> 00:13:59,646
those memory pages that you've


465
00:13:59,646 --> 00:14:00,636
mapped in.


466
00:14:01,606 --> 00:14:04,046
So another thing that we've seen


467
00:14:04,046 --> 00:14:05,616
come up with respect to Runtime


468
00:14:05,616 --> 00:14:07,986
Code Signing Enforcement is some


469
00:14:07,986 --> 00:14:09,796
people have seen crashes while


470
00:14:09,796 --> 00:14:11,486
they're updating their app.


471
00:14:11,916 --> 00:14:13,806
This is because code signatures


472
00:14:13,806 --> 00:14:16,066
are latched to files on first


473
00:14:16,066 --> 00:14:17,966
use in the kernel and that means


474
00:14:17,966 --> 00:14:20,206
if you modify a file that has


475
00:14:20,206 --> 00:14:23,006
been run and was signed, then it


476
00:14:23,006 --> 00:14:23,986
will no longer match the


477
00:14:23,986 --> 00:14:25,076
signature that's sitting in the


478
00:14:25,076 --> 00:14:26,506
kernel and you'll see a code


479
00:14:26,506 --> 00:14:27,816
signature violation.


480
00:14:28,626 --> 00:14:30,216
What we recommend instead is


481
00:14:30,216 --> 00:14:31,916
that instead of modifying


482
00:14:31,916 --> 00:14:33,146
existing files on disk you


483
00:14:33,146 --> 00:14:35,626
always create a new file with


484
00:14:35,656 --> 00:14:37,306
the updated changes and move the


485
00:14:37,306 --> 00:14:38,376
old file out of the way.


486
00:14:38,696 --> 00:14:40,326
This will ensure that the new


487
00:14:40,326 --> 00:14:42,056
file on its first use gets its


488
00:14:42,056 --> 00:14:44,366
code signature without causing


489
00:14:44,366 --> 00:14:45,476
the code signature violations


490
00:14:45,476 --> 00:14:45,976
that you're seeing.


491
00:14:48,746 --> 00:14:49,796
So next we'll talk about library


492
00:14:49,796 --> 00:14:50,226
validation.


493
00:14:52,746 --> 00:14:54,156
So library validation protects


494
00:14:54,156 --> 00:14:55,586
your app from code injection and


495
00:14:55,586 --> 00:14:57,746
dylib hijacking by making sure


496
00:14:57,746 --> 00:14:59,376
that your app only loads


497
00:14:59,376 --> 00:15:01,146
codesigned by your team or


498
00:15:01,146 --> 00:15:01,806
signed by Apple.


499
00:15:01,806 --> 00:15:03,626
And some of you might ask, why


500
00:15:03,626 --> 00:15:05,436
does it need to load codesigned


501
00:15:05,436 --> 00:15:05,896
by Apple?


502
00:15:06,036 --> 00:15:07,326
Well, remember that all the


503
00:15:07,326 --> 00:15:08,906
frameworks and libraries that


504
00:15:08,906 --> 00:15:09,676
you're loading from the


505
00:15:09,676 --> 00:15:10,806
operating system are Apple


506
00:15:10,806 --> 00:15:11,156
signed.


507
00:15:11,156 --> 00:15:12,486
So you have to be able to call


508
00:15:12,486 --> 00:15:14,616
those and load them into your


509
00:15:14,616 --> 00:15:15,076
process.


510
00:15:16,166 --> 00:15:17,956
Note that library validation


511
00:15:18,056 --> 00:15:19,746
prevents the loading of unsigned


512
00:15:19,746 --> 00:15:21,106
and adhoc signed code.


513
00:15:21,706 --> 00:15:23,086
So be careful during your


514
00:15:23,086 --> 00:15:23,946
development process.


515
00:15:23,946 --> 00:15:25,396
Make sure that you use Apple


516
00:15:25,396 --> 00:15:26,716
development certificates rather


517
00:15:26,716 --> 00:15:28,416
than turning off code signing or


518
00:15:28,646 --> 00:15:30,416
just using adhoc signing.


519
00:15:33,946 --> 00:15:35,926
So library validation can cause


520
00:15:35,926 --> 00:15:38,806
challenges for apps that have an


521
00:15:39,066 --> 00:15:40,256
in process plug-in or an


522
00:15:40,256 --> 00:15:40,856
ecosystem.


523
00:15:41,536 --> 00:15:42,606
We recommend that you consider


524
00:15:42,606 --> 00:15:44,546
moving to an out of process


525
00:15:44,546 --> 00:15:46,056
plug-in model so that you don't


526
00:15:46,306 --> 00:15:48,036
have to load unknown third-party


527
00:15:48,036 --> 00:15:50,746
code into your app but if you


528
00:15:50,746 --> 00:15:52,266
can't, you can use the


529
00:15:52,266 --> 00:15:53,466
disable-library-validation


530
00:15:53,466 --> 00:15:55,206
entitlement and this will allow


531
00:15:55,206 --> 00:15:56,896
loading of unsigned and adhoc


532
00:15:56,896 --> 00:15:57,746
sign plug-ins.


533
00:15:57,926 --> 00:15:59,336
And note you can take this by


534
00:15:59,336 --> 00:16:01,756
itself without taking any of the


535
00:16:01,996 --> 00:16:02,986
runtime code and sort


536
00:16:02,986 --> 00:16:04,796
enforcement related entitlements


537
00:16:05,036 --> 00:16:05,486
by having


538
00:16:05,486 --> 00:16:06,936
disable-library-validation on


539
00:16:07,176 --> 00:16:08,606
when the system sees that you're


540
00:16:08,606 --> 00:16:10,906
loading a adhoc signed or an


541
00:16:10,906 --> 00:16:12,446
unsigned plug-in, it will lower


542
00:16:12,446 --> 00:16:14,726
the security of your process to


543
00:16:14,726 --> 00:16:15,966
allow that because you've said


544
00:16:15,966 --> 00:16:17,686
you want to load unsigned


545
00:16:17,686 --> 00:16:18,666
plug-ins.


546
00:16:20,096 --> 00:16:22,536
So next is DYLD environment


547
00:16:22,536 --> 00:16:23,306
variable protection.


548
00:16:23,816 --> 00:16:26,256
DYLD environment variables can


549
00:16:26,256 --> 00:16:27,826
be very useful during your


550
00:16:27,826 --> 00:16:29,976
development process to load


551
00:16:29,976 --> 00:16:31,716
debug libraries into your app


552
00:16:31,806 --> 00:16:34,756
while you're testing or to use


553
00:16:34,756 --> 00:16:35,746
libraries that are, or


554
00:16:35,816 --> 00:16:36,856
frameworks that you're building


555
00:16:36,856 --> 00:16:38,176
that are in development but


556
00:16:38,176 --> 00:16:39,386
aren't quite ready to be built


557
00:16:39,386 --> 00:16:40,536
into your app just to test them,


558
00:16:40,956 --> 00:16:42,626
but they can be dangerous


559
00:16:42,676 --> 00:16:43,766
because everything that you can


560
00:16:43,766 --> 00:16:44,626
do during your building and


561
00:16:44,626 --> 00:16:46,316
testing process an attacker can


562
00:16:46,316 --> 00:16:48,996
do on a customer system to take


563
00:16:48,996 --> 00:16:51,176
advantage of privileges or data


564
00:16:51,176 --> 00:16:52,256
that's available to your app.


565
00:16:53,466 --> 00:16:54,656
So because of this the hardened


566
00:16:54,656 --> 00:16:56,276
runtime blocks these variables


567
00:16:56,276 --> 00:16:57,736
by default when you ship with


568
00:16:57,736 --> 00:16:57,826
it.


569
00:16:58,656 --> 00:17:00,026
If you need to use DYLD


570
00:17:00,026 --> 00:17:01,916
environment variables during


571
00:17:01,916 --> 00:17:03,806
your debugging process, you can


572
00:17:03,806 --> 00:17:04,776
use the get-task-allow


573
00:17:04,776 --> 00:17:06,256
entitlement on your debug build


574
00:17:06,586 --> 00:17:07,866
and note that Xcode


575
00:17:07,866 --> 00:17:09,236
automatically puts this on for


576
00:17:09,236 --> 00:17:10,906
you when you build for debug and


577
00:17:10,906 --> 00:17:11,796
takes it off for you


578
00:17:11,796 --> 00:17:14,236
automatically when you build for


579
00:17:14,236 --> 00:17:14,656
release.


580
00:17:15,296 --> 00:17:16,945
Note though that if you're using


581
00:17:16,945 --> 00:17:18,906
a custom workflow, the notary


582
00:17:18,945 --> 00:17:20,336
service in most cases doesn't


583
00:17:20,425 --> 00:17:21,596
accept binaries with the


584
00:17:21,596 --> 00:17:22,776
get-task-allow entitlement.


585
00:17:22,776 --> 00:17:23,705
So make sure you take this


586
00:17:23,705 --> 00:17:25,806
entitlement off before you ship


587
00:17:25,965 --> 00:17:27,876
your release build to the Notary


588
00:17:27,876 --> 00:17:28,266
Service.


589
00:17:30,246 --> 00:17:33,626
So in a few cases, we have seen


590
00:17:33,626 --> 00:17:37,066
developers needed to use the


591
00:17:37,066 --> 00:17:39,326
DYLD environment variables when


592
00:17:39,326 --> 00:17:40,696
they ship their app to customers


593
00:17:41,406 --> 00:17:42,886
and, again, we don't recommend


594
00:17:42,886 --> 00:17:43,376
you do this.


595
00:17:43,376 --> 00:17:45,936
This can be very dangerous for


596
00:17:45,936 --> 00:17:47,136
taking advantage of your app on


597
00:17:47,136 --> 00:17:48,716
customer systems, but if you


598
00:17:48,716 --> 00:17:50,256
need to there is an entitlement


599
00:17:50,306 --> 00:17:50,556
to


600
00:17:50,556 --> 00:17:52,926
allow-DYLD-environment-variables


601
00:17:52,926 --> 00:17:54,076
which will allow these to be


602
00:17:54,076 --> 00:17:55,276
used and is accepted by the


603
00:17:55,276 --> 00:17:55,926
Notary Service.


604
00:17:56,386 --> 00:17:59,506
Next is debugging protection.


605
00:18:00,036 --> 00:18:03,916
So we all know that debuggers


606
00:18:03,916 --> 00:18:05,956
allow developers to inspect the


607
00:18:05,956 --> 00:18:07,596
state of registers and memory


608
00:18:07,916 --> 00:18:09,466
and modify process memory.


609
00:18:09,906 --> 00:18:11,606
That means they allow hackers to


610
00:18:12,476 --> 00:18:14,266
steal sensitive user data and


611
00:18:14,266 --> 00:18:15,306
inject malicious code.


612
00:18:16,006 --> 00:18:17,146
So by default the hardened


613
00:18:17,196 --> 00:18:19,096
runtime doesn't allow debugging


614
00:18:19,096 --> 00:18:21,746
of hardened processes, but if


615
00:18:21,746 --> 00:18:24,186
you need to use the debugger


616
00:18:24,186 --> 00:18:25,666
during your development flow,


617
00:18:25,666 --> 00:18:26,986
again, the get-task-allow


618
00:18:26,986 --> 00:18:28,646
entitlement is what you need.


619
00:18:28,646 --> 00:18:30,216
Along with DYLD environment


620
00:18:30,216 --> 00:18:31,376
variables the get-task-allow


621
00:18:31,376 --> 00:18:33,496
entitlements allows your app to


622
00:18:33,496 --> 00:18:34,036
be debugged.


623
00:18:35,226 --> 00:18:37,456
But be careful if you do all of


624
00:18:37,456 --> 00:18:38,856
your testing with the debugger


625
00:18:38,856 --> 00:18:39,426
attached.


626
00:18:39,426 --> 00:18:40,996
This will mask some of the other


627
00:18:41,086 --> 00:18:42,536
hardened runtime related issues


628
00:18:42,536 --> 00:18:43,556
that you could run into


629
00:18:43,556 --> 00:18:45,126
especially around Runtime Code


630
00:18:45,126 --> 00:18:45,866
Signing Enforcement.


631
00:18:46,066 --> 00:18:47,426
Basically, once the debugger


632
00:18:47,426 --> 00:18:49,936
attaches, we can't force code


633
00:18:49,936 --> 00:18:51,036
signing enforcement anymore


634
00:18:51,656 --> 00:18:53,266
because debuggers like setting a


635
00:18:53,266 --> 00:18:54,886
breakpoint automatically change


636
00:18:54,886 --> 00:18:57,086
your data within your process


637
00:18:57,086 --> 00:18:58,256
and they would just crash


638
00:18:58,256 --> 00:18:59,616
immediately if we continue to


639
00:18:59,616 --> 00:19:00,146
enforce that.


640
00:19:00,606 --> 00:19:01,956
So make sure you test a release


641
00:19:01,956 --> 00:19:03,376
build to see what other effects


642
00:19:03,666 --> 00:19:04,626
the Runtime Code Signing


643
00:19:04,626 --> 00:19:07,216
Enforcement might have and then


644
00:19:07,216 --> 00:19:08,806
if you need to make a debug


645
00:19:08,806 --> 00:19:10,676
build without get-test-allow


646
00:19:10,676 --> 00:19:12,176
through Xcode, you can use the


647
00:19:12,176 --> 00:19:13,716
CODE-SIGN-IN-INJECT-BASE-


648
00:19:13,716 --> 00:19:15,476
ENTITLEMENTS=NO option in your


649
00:19:15,476 --> 00:19:17,186
Xcode project to get all of your


650
00:19:17,186 --> 00:19:18,336
debug settings except


651
00:19:18,336 --> 00:19:18,856
get-task-allow.


652
00:19:21,216 --> 00:19:23,526
So this can be a challenge also


653
00:19:23,526 --> 00:19:26,006
in the plug-in ecosystem because


654
00:19:26,456 --> 00:19:27,926
plug-in developers need to debug


655
00:19:27,926 --> 00:19:29,696
their plug-ins within the app


656
00:19:29,806 --> 00:19:30,716
that they're going to load.


657
00:19:31,436 --> 00:19:32,426
So, again, we recommend


658
00:19:32,586 --> 00:19:34,046
considering out of process


659
00:19:34,046 --> 00:19:36,576
plug-in model or consider


660
00:19:36,576 --> 00:19:38,656
shipping a debug version to,


661
00:19:39,186 --> 00:19:40,486
yeah, debug version of your app


662
00:19:40,486 --> 00:19:41,886
to register plug-in developers


663
00:19:42,096 --> 00:19:44,126
so that they have the power to


664
00:19:44,126 --> 00:19:45,416
debug, but you don't ship that


665
00:19:45,416 --> 00:19:48,166
to all of your customers, but if


666
00:19:48,166 --> 00:19:50,776
absolutely necessary, the Notary


667
00:19:50,776 --> 00:19:51,826
Service will accept the


668
00:19:51,826 --> 00:19:53,446
combination of get-task-allow


669
00:19:53,446 --> 00:19:54,626
entitlement and the


670
00:19:54,626 --> 00:19:55,976
disable-library-validation


671
00:19:55,976 --> 00:19:57,186
entitlement to allow this


672
00:19:57,186 --> 00:19:57,616
workflow.


673
00:20:00,816 --> 00:20:02,396
So we'll talk briefly about


674
00:20:02,396 --> 00:20:03,706
protected resource access.


675
00:20:05,036 --> 00:20:07,286
So we all know that your


676
00:20:07,286 --> 00:20:08,406
customers use their Macs to


677
00:20:08,406 --> 00:20:10,946
store tons of information about


678
00:20:10,946 --> 00:20:13,526
their lives and the Macs have


679
00:20:13,526 --> 00:20:15,526
access to sensors that are


680
00:20:15,526 --> 00:20:16,846
security sensitive.


681
00:20:17,746 --> 00:20:19,136
In order to or once you've


682
00:20:19,166 --> 00:20:20,376
adopted the hardened runtime,


683
00:20:20,696 --> 00:20:21,936
your app needs to declare its


684
00:20:21,936 --> 00:20:23,626
intent to access any of these


685
00:20:23,626 --> 00:20:24,626
protected resources.


686
00:20:25,696 --> 00:20:27,696
So we mentioned all of last


687
00:20:27,696 --> 00:20:30,516
year, but if you need to access


688
00:20:30,516 --> 00:20:32,616
any of these resources you need


689
00:20:32,616 --> 00:20:34,416
to take the entitlement on your


690
00:20:34,416 --> 00:20:37,716
main bundle and then declare the


691
00:20:37,716 --> 00:20:39,786
usage string that is associated


692
00:20:39,786 --> 00:20:41,016
with the entitlement so that


693
00:20:41,016 --> 00:20:43,016
when your app attempts to access


694
00:20:43,016 --> 00:20:44,786
one of these resources, the


695
00:20:44,786 --> 00:20:46,086
system can provide a dialogue


696
00:20:46,086 --> 00:20:47,586
saying, oh, this is why I need


697
00:20:47,636 --> 00:20:49,396
to have access to this resource


698
00:20:49,396 --> 00:20:50,586
so that you can collect the


699
00:20:50,586 --> 00:20:51,396
user's consent.


700
00:20:52,656 --> 00:20:54,826
So some recommendations a


701
00:20:54,826 --> 00:20:55,836
summary of this section.


702
00:20:55,956 --> 00:20:57,566
Take only the entitlements you


703
00:20:57,566 --> 00:20:57,856
need.


704
00:20:57,986 --> 00:20:59,786
The entitlements turn off


705
00:20:59,786 --> 00:21:00,996
security provided by the


706
00:21:00,996 --> 00:21:02,566
hardened runtime and they can be


707
00:21:02,566 --> 00:21:04,176
inspected by anyone looking at


708
00:21:04,176 --> 00:21:05,936
your app to try to see what


709
00:21:06,256 --> 00:21:07,476
kinds of things they can do with


710
00:21:07,476 --> 00:21:09,006
it once it's shipped to


711
00:21:09,006 --> 00:21:09,526
customers.


712
00:21:09,746 --> 00:21:11,106
So be careful, take only what


713
00:21:11,106 --> 00:21:12,596
you need, put the entitlements


714
00:21:12,596 --> 00:21:14,186
only on the processes that need


715
00:21:14,186 --> 00:21:14,416
them.


716
00:21:14,416 --> 00:21:17,066
If you have multiple processes,


717
00:21:17,066 --> 00:21:18,526
multiple executables within your


718
00:21:18,526 --> 00:21:20,276
app, it's unlikely that all of


719
00:21:20,276 --> 00:21:21,536
them need the same protections.


720
00:21:21,536 --> 00:21:22,656
You probably aren't doing JIT in


721
00:21:22,656 --> 00:21:23,446
every process.


722
00:21:23,446 --> 00:21:24,276
You probably aren't loading


723
00:21:24,276 --> 00:21:25,536
plug-ins into every process.


724
00:21:25,806 --> 00:21:27,306
So take only the ones you need


725
00:21:27,306 --> 00:21:28,806
in the processes that need them


726
00:21:29,726 --> 00:21:31,306
and when you're declaring


727
00:21:31,306 --> 00:21:32,866
resource access make sure that


728
00:21:32,866 --> 00:21:34,266
those entitlements are only on


729
00:21:34,266 --> 00:21:35,696
the main bundle of your app.


730
00:21:36,046 --> 00:21:38,686
Those getting inherited by any


731
00:21:38,686 --> 00:21:41,206
other executables within your


732
00:21:41,206 --> 00:21:42,516
bundles, they don't need to be


733
00:21:42,596 --> 00:21:43,346
all around.


734
00:21:43,416 --> 00:21:44,276
Just on the main bundle.


735
00:21:44,716 --> 00:21:46,496
Now I'm going to hand it back to


736
00:21:46,496 --> 00:21:48,686
Garrett to go over what you need


737
00:21:48,686 --> 00:21:50,426
to do to actually submit for


738
00:21:50,426 --> 00:21:50,976
notarization.


739
00:21:51,516 --> 00:21:57,206
[ Applause ]


740
00:21:57,706 --> 00:21:58,196
>> Thanks, Robert.


741
00:21:59,036 --> 00:22:00,066
So now you know everything to


742
00:22:00,066 --> 00:22:00,886
think about while you're


743
00:22:00,886 --> 00:22:02,046
building and designing your


744
00:22:02,046 --> 00:22:03,486
application to get it ready to


745
00:22:03,486 --> 00:22:05,516
be notarized, but how do you


746
00:22:05,516 --> 00:22:06,856
actually submit it to the Notary


747
00:22:06,856 --> 00:22:07,376
Service?


748
00:22:08,356 --> 00:22:11,276
Well, let's talk a little about


749
00:22:11,276 --> 00:22:12,846
the notarization workflow and


750
00:22:12,846 --> 00:22:13,926
regardless of whether you're


751
00:22:13,926 --> 00:22:15,166
using Xcode or have a


752
00:22:15,166 --> 00:22:17,276
custom-built workflow, the rough


753
00:22:17,406 --> 00:22:18,786
workflow is about the same.


754
00:22:19,866 --> 00:22:20,776
You submit the app for


755
00:22:20,776 --> 00:22:22,886
notarization, you check the


756
00:22:23,116 --> 00:22:25,036
status of the Notary Service.


757
00:22:25,336 --> 00:22:26,836
Once notarization is complete,


758
00:22:27,256 --> 00:22:28,936
you can staple a ticket and then


759
00:22:28,936 --> 00:22:29,846
when you're done you might want


760
00:22:29,846 --> 00:22:31,276
to verify that the stapling and


761
00:22:31,276 --> 00:22:32,606
notarization were successful.


762
00:22:32,606 --> 00:22:35,516
Before we talk a little bit more


763
00:22:35,516 --> 00:22:36,946
about this we should talk about


764
00:22:37,176 --> 00:22:39,636
what and when to submit and at a


765
00:22:39,636 --> 00:22:40,926
minimum you should be submitting


766
00:22:40,926 --> 00:22:41,776
all the software that you


767
00:22:41,776 --> 00:22:45,286
distribute, but really it's okay


768
00:22:45,286 --> 00:22:46,616
to upload more regularly so


769
00:22:46,616 --> 00:22:47,806
anything that runs outside of a


770
00:22:47,806 --> 00:22:49,586
developer's machine feel free to


771
00:22:49,586 --> 00:22:50,676
upload as a Notary Service.


772
00:22:51,076 --> 00:22:52,056
You probably don't need to


773
00:22:52,056 --> 00:22:54,126
upload every CI build though and


774
00:22:56,456 --> 00:22:58,266
anyone on the team can submit


775
00:22:58,266 --> 00:22:59,766
process submit software for


776
00:22:59,766 --> 00:23:00,386
notarization.


777
00:23:00,926 --> 00:23:02,546
This has changed from last year


778
00:23:02,876 --> 00:23:03,966
when it used to be restricted to


779
00:23:03,966 --> 00:23:04,706
certain roles.


780
00:23:07,076 --> 00:23:08,606
So now you're ready to submit to


781
00:23:08,606 --> 00:23:09,366
the Notary Service.


782
00:23:09,646 --> 00:23:11,596
Well, if you use Xcode, it's


783
00:23:11,596 --> 00:23:12,896
quite easy and it's built into


784
00:23:12,896 --> 00:23:13,966
the archive and distribution


785
00:23:13,966 --> 00:23:14,356
workflow.


786
00:23:14,946 --> 00:23:16,136
So once you build an archive,


787
00:23:16,176 --> 00:23:17,306
you can open up the Xcode


788
00:23:17,306 --> 00:23:18,486
organizer like you see here and


789
00:23:19,306 --> 00:23:20,506
you can select distribute app


790
00:23:20,566 --> 00:23:21,536
just like you did before with


791
00:23:21,536 --> 00:23:22,236
Developer ID.


792
00:23:23,566 --> 00:23:27,246
Select Developer ID and then use


793
00:23:27,246 --> 00:23:28,536
the upload option to submit a


794
00:23:28,536 --> 00:23:29,836
copy to the Notary Service.


795
00:23:30,346 --> 00:23:33,306
You'll see a progress bar during


796
00:23:33,306 --> 00:23:35,626
the upload and after everything


797
00:23:35,626 --> 00:23:37,126
is complete, you'll get dropped


798
00:23:37,126 --> 00:23:38,586
back into the organizer and


799
00:23:38,586 --> 00:23:39,956
you'll notice that the status


800
00:23:40,086 --> 00:23:41,566
has changed to processing.


801
00:23:42,186 --> 00:23:46,216
Once the Notary Service is


802
00:23:46,216 --> 00:23:48,386
complete, you're going to push


803
00:23:48,386 --> 00:23:51,056
notification to Xcode and when


804
00:23:51,056 --> 00:23:52,306
you come back to the organizer,


805
00:23:52,656 --> 00:23:53,706
you'll note that the status is


806
00:23:53,706 --> 00:23:55,856
changed to ready distribute and


807
00:23:55,856 --> 00:23:57,446
in the lower right corner, the


808
00:23:57,446 --> 00:23:59,426
export notarized app is now


809
00:23:59,426 --> 00:23:59,826
available.


810
00:24:01,276 --> 00:24:02,586
When you click export notarized


811
00:24:02,586 --> 00:24:04,216
app, Xcode will take care of


812
00:24:04,216 --> 00:24:06,496
stapling the app for you and


813
00:24:06,496 --> 00:24:07,796
what you get is completely ready


814
00:24:07,796 --> 00:24:08,496
for distribution.


815
00:24:09,926 --> 00:24:10,766
Now we'll talk a little more


816
00:24:10,766 --> 00:24:12,026
about how you can verify that


817
00:24:12,026 --> 00:24:13,696
yourself later because that's a


818
00:24:13,696 --> 00:24:15,086
shared workflow between custom


819
00:24:15,086 --> 00:24:16,476
workflows and Xcode.


820
00:24:17,766 --> 00:24:20,636
Now, if you don't use Xcode,


821
00:24:21,266 --> 00:24:23,496
submitting with custom workflows


822
00:24:23,556 --> 00:24:24,316
is equally easy.


823
00:24:24,956 --> 00:24:25,586
The first thing you need to


824
00:24:25,586 --> 00:24:27,176
think about is what you want to


825
00:24:27,176 --> 00:24:28,296
submit to the Notary Service.


826
00:24:29,266 --> 00:24:31,146
Now the Notary Service accepts 3


827
00:24:31,146 --> 00:24:33,466
main formats; disk images,


828
00:24:33,726 --> 00:24:35,656
installer packages and zip


829
00:24:35,656 --> 00:24:36,266
archives.


830
00:24:36,946 --> 00:24:38,466
So if your build output is


831
00:24:38,466 --> 00:24:39,996
anything but one of these 3,


832
00:24:40,526 --> 00:24:41,706
you'll need to convert it to one


833
00:24:41,706 --> 00:24:42,956
of these 3 formats before you


834
00:24:42,956 --> 00:24:44,136
send it to the Notary Service.


835
00:24:44,666 --> 00:24:47,676
And remember that when you're


836
00:24:47,676 --> 00:24:49,196
creating a zip archive it's


837
00:24:49,196 --> 00:24:51,026
important to include macOS


838
00:24:51,026 --> 00:24:52,896
specific metadata like extended


839
00:24:52,896 --> 00:24:53,536
attributes.


840
00:24:54,126 --> 00:24:55,136
If you don't know what tools to


841
00:24:55,136 --> 00:24:56,456
use, there is support in ditto


842
00:24:56,456 --> 00:24:57,636
and Archive Utility built into


843
00:24:57,636 --> 00:24:58,476
the operating system.


844
00:25:01,776 --> 00:25:03,726
Now one other thing to think


845
00:25:03,726 --> 00:25:05,496
about is if you actually have a


846
00:25:05,496 --> 00:25:07,266
custom installer and custom


847
00:25:07,266 --> 00:25:08,356
installers can be a little bit


848
00:25:08,356 --> 00:25:10,116
trickier if they pull down


849
00:25:10,116 --> 00:25:11,386
content from the Internet as


850
00:25:11,386 --> 00:25:13,556
part of their installation or if


851
00:25:13,556 --> 00:25:14,806
you use custom packaging


852
00:25:14,856 --> 00:25:15,436
formats.


853
00:25:16,366 --> 00:25:17,366
And if you have a custom


854
00:25:17,366 --> 00:25:18,956
installer that does one of these


855
00:25:18,956 --> 00:25:20,716
things, you may need to perform


856
00:25:20,806 --> 00:25:23,436
2-step notarization where you


857
00:25:23,436 --> 00:25:24,916
actually take all the content as


858
00:25:24,916 --> 00:25:26,376
it's going to arrive on disk,


859
00:25:26,716 --> 00:25:28,136
submit that for notarization


860
00:25:28,136 --> 00:25:29,286
using one of the 3 supported


861
00:25:29,286 --> 00:25:31,836
formats, staple it up and then


862
00:25:31,836 --> 00:25:33,166
you submit your custom installer


863
00:25:33,166 --> 00:25:33,736
app separately.


864
00:25:34,346 --> 00:25:37,206
So now that you know what you


865
00:25:37,206 --> 00:25:38,066
want to submit to the Notary


866
00:25:38,066 --> 00:25:40,026
Service, how do you actually do


867
00:25:40,386 --> 00:25:40,453
it?


868
00:25:40,516 --> 00:25:42,606
Well, Xcode 10 and newer


869
00:25:43,106 --> 00:25:44,336
contains a command line tool


870
00:25:44,336 --> 00:25:45,646
called altool that's generally


871
00:25:45,646 --> 00:25:46,566
used for interacting with the


872
00:25:46,566 --> 00:25:47,336
Notary Service.


873
00:25:47,906 --> 00:25:49,066
If you do have multiple versions


874
00:25:49,066 --> 00:25:50,026
of Xcode, you'll want to use


875
00:25:50,026 --> 00:25:51,186
Xcode select to make sure that


876
00:25:51,186 --> 00:25:52,506
you've selected Xcode 10 or


877
00:25:52,506 --> 00:25:54,546
later and then you can use


878
00:25:54,726 --> 00:25:56,666
altool with the notarize-app


879
00:25:57,106 --> 00:25:57,506
command.


880
00:25:58,496 --> 00:25:59,806
With that you'll need to pass in


881
00:25:59,806 --> 00:26:02,146
the primary bundle ID along with


882
00:26:02,496 --> 00:26:03,656
the file that you want upload.


883
00:26:04,726 --> 00:26:05,916
You will need to authenticate


884
00:26:05,916 --> 00:26:08,056
with your Apple ID, but if you


885
00:26:08,056 --> 00:26:09,096
look at the main page you'll see


886
00:26:09,096 --> 00:26:10,046
the options for using the


887
00:26:10,046 --> 00:26:11,256
keychain or environment


888
00:26:11,256 --> 00:26:12,476
variables so you don't need to


889
00:26:12,476 --> 00:26:13,446
always type in your password.


890
00:26:14,006 --> 00:26:16,736
When notarization upload is


891
00:26:16,736 --> 00:26:18,236
complete, you'll get a


892
00:26:18,236 --> 00:26:19,186
RequestUUID.


893
00:26:20,066 --> 00:26:21,906
This is a UUID that represents


894
00:26:22,096 --> 00:26:24,206
your submission, which you can


895
00:26:24,206 --> 00:26:26,526
turn around and use with the


896
00:26:26,526 --> 00:26:28,636
notarization-info command also


897
00:26:28,636 --> 00:26:30,576
as part of altool to check on


898
00:26:30,576 --> 00:26:32,886
the status of processing and


899
00:26:32,886 --> 00:26:34,006
this is how you can find out


900
00:26:34,286 --> 00:26:35,686
when your notarization is


901
00:26:35,686 --> 00:26:38,346
complete and what the status


902
00:26:38,346 --> 00:26:38,646
was.


903
00:26:39,766 --> 00:26:40,656
Here's an example of a


904
00:26:40,656 --> 00:26:43,566
successful notarization and one


905
00:26:43,566 --> 00:26:44,916
important thing in here is the


906
00:26:44,916 --> 00:26:46,026
log file URL.


907
00:26:46,676 --> 00:26:47,446
Regardless of whether


908
00:26:47,446 --> 00:26:49,166
notarization was successful or


909
00:26:49,166 --> 00:26:51,116
had issues you can take a look


910
00:26:51,116 --> 00:26:52,556
inside of the log file URL to


911
00:26:52,556 --> 00:26:53,416
learn a little bit more.


912
00:26:53,416 --> 00:26:56,676
Now the log file URLs are not


913
00:26:56,676 --> 00:26:57,376
long-lived.


914
00:26:58,286 --> 00:26:59,656
They only work for about a day.


915
00:27:00,266 --> 00:27:01,446
So really you probably want to


916
00:27:01,446 --> 00:27:02,636
pass around a new UID and


917
00:27:03,076 --> 00:27:04,456
whatever you call notarization


918
00:27:04,456 --> 00:27:06,286
info you'll get a new log file


919
00:27:06,286 --> 00:27:06,526
URL.


920
00:27:09,786 --> 00:27:11,646
Here's an example JSON log from


921
00:27:11,646 --> 00:27:12,806
a successful processing.


922
00:27:13,726 --> 00:27:15,386
Notice that the status was


923
00:27:15,386 --> 00:27:15,896
accepted.


924
00:27:16,906 --> 00:27:18,906
Now if this had failed, the


925
00:27:18,906 --> 00:27:19,796
thing that you really want to


926
00:27:19,796 --> 00:27:21,596
look at here is the issues


927
00:27:21,656 --> 00:27:21,856
array.


928
00:27:22,786 --> 00:27:23,686
And in a successful


929
00:27:23,686 --> 00:27:24,486
notarization, this will


930
00:27:24,486 --> 00:27:25,286
generally be empty.


931
00:27:26,186 --> 00:27:27,906
But if something failed, there


932
00:27:27,906 --> 00:27:29,566
will be object in here and each


933
00:27:29,566 --> 00:27:31,116
one represents some failure


934
00:27:31,316 --> 00:27:32,166
during notarization.


935
00:27:32,166 --> 00:27:33,976
It will indicate things like


936
00:27:34,176 --> 00:27:35,236
which binary may not have


937
00:27:35,236 --> 00:27:37,586
adopted the hardened runtime or


938
00:27:37,886 --> 00:27:38,916
if something wasn't signed


939
00:27:38,916 --> 00:27:39,396
properly.


940
00:27:40,356 --> 00:27:41,696
So this will be the key if


941
00:27:41,696 --> 00:27:42,576
anything was rejected.


942
00:27:43,086 --> 00:27:45,866
If it was successful, you'll


943
00:27:45,866 --> 00:27:47,166
probably want to look in the


944
00:27:47,166 --> 00:27:49,176
ticket contents especially if


945
00:27:49,176 --> 00:27:50,166
you do anything interesting


946
00:27:50,166 --> 00:27:51,316
around how you package your


947
00:27:51,316 --> 00:27:51,806
software.


948
00:27:52,656 --> 00:27:54,136
The ticket content should list


949
00:27:54,136 --> 00:27:55,936
every binary that was discovered


950
00:27:55,936 --> 00:27:57,816
by the Notary Service and,


951
00:27:57,816 --> 00:27:59,116
therefore, every binary whose


952
00:27:59,116 --> 00:28:00,816
information is included in the


953
00:28:00,816 --> 00:28:01,826
ticket that you'll staple.


954
00:28:02,826 --> 00:28:03,906
So if you notice that anything


955
00:28:03,906 --> 00:28:04,836
is missing in the ticket


956
00:28:04,836 --> 00:28:07,386
contents, you may need to try to


957
00:28:07,576 --> 00:28:08,896
figure out what went wrong and


958
00:28:08,896 --> 00:28:09,436
try it again.


959
00:28:10,476 --> 00:28:12,896
Now regardless of whether you


960
00:28:12,896 --> 00:28:14,966
use Xcode or altool when the


961
00:28:14,966 --> 00:28:16,006
Notary Service is done


962
00:28:16,006 --> 00:28:18,166
processing a submission, you'll


963
00:28:18,166 --> 00:28:18,716
get an email.


964
00:28:19,536 --> 00:28:20,746
Here's an example of a success


965
00:28:20,746 --> 00:28:22,646
email indicating that this


966
00:28:22,646 --> 00:28:24,286
software is ready for stapling.


967
00:28:24,876 --> 00:28:27,586
Which brings us to the next


968
00:28:28,336 --> 00:28:28,466
step.


969
00:28:30,046 --> 00:28:32,106
Stapling uses a tool also built


970
00:28:32,106 --> 00:28:33,946
into Xcode 10 and newer called


971
00:28:34,176 --> 00:28:34,606
Stapler.


972
00:28:35,416 --> 00:28:36,506
Here you can see an example


973
00:28:36,506 --> 00:28:38,116
invocation of stapler with a


974
00:28:38,116 --> 00:28:40,536
staple command that can be used


975
00:28:40,536 --> 00:28:42,626
to staple directly to a package


976
00:28:42,896 --> 00:28:43,726
or a disk image.


977
00:28:44,206 --> 00:28:46,496
Now note that you can't staple


978
00:28:46,496 --> 00:28:48,156
directly to zip files so you'll


979
00:28:48,156 --> 00:28:49,636
need to unpack the zip file,


980
00:28:50,026 --> 00:28:51,376
staple the contents of the zip


981
00:28:51,376 --> 00:28:53,126
file and then you can package it


982
00:28:53,126 --> 00:28:54,156
back up for distribution.


983
00:28:54,756 --> 00:28:59,226
And note that stapling of


984
00:28:59,356 --> 00:29:01,856
command line tools and libraries


985
00:29:01,916 --> 00:29:03,966
is not supported right now even


986
00:29:03,966 --> 00:29:05,386
though these items still can and


987
00:29:05,386 --> 00:29:06,336
should be notarized.


988
00:29:10,336 --> 00:29:12,326
Now, after you staple the next


989
00:29:12,326 --> 00:29:13,326
step is to verify that


990
00:29:13,326 --> 00:29:14,226
everything was successfully


991
00:29:14,226 --> 00:29:16,586
notarized and this step varies a


992
00:29:16,586 --> 00:29:17,756
little bit based on what you


993
00:29:17,756 --> 00:29:19,546
want to verify, but the first


994
00:29:19,546 --> 00:29:20,086
thing is simple.


995
00:29:20,086 --> 00:29:21,226
If you really just want to check


996
00:29:21,226 --> 00:29:22,506
that something has been stapled,


997
00:29:23,136 --> 00:29:24,176
you can use the Stapler tool


998
00:29:24,176 --> 00:29:24,496
again.


999
00:29:25,106 --> 00:29:26,706
Here you can see the stapler


1000
00:29:26,706 --> 00:29:28,546
tool with the validate command


1001
00:29:29,046 --> 00:29:30,096
to check that an item has been


1002
00:29:30,286 --> 00:29:33,566
properly stapled, but what about


1003
00:29:33,566 --> 00:29:34,326
if you want to verify


1004
00:29:34,326 --> 00:29:36,146
notarization on something that


1005
00:29:36,596 --> 00:29:38,636
you didn't put up for stapling


1006
00:29:38,816 --> 00:29:39,736
or that you didn't staple


1007
00:29:39,736 --> 00:29:40,146
yourself?


1008
00:29:40,706 --> 00:29:41,376
Well, then you will want to


1009
00:29:41,376 --> 00:29:43,586
generally use the SPCTL command,


1010
00:29:44,026 --> 00:29:45,716
which is a tool built into macOS


1011
00:29:46,616 --> 00:29:47,766
that runs gatekeeper


1012
00:29:47,766 --> 00:29:48,396
assessments.


1013
00:29:48,936 --> 00:29:51,696
And this does vary slightly


1014
00:29:51,696 --> 00:29:53,246
based on what you want to check


1015
00:29:53,246 --> 00:29:55,006
for notarization, but if you


1016
00:29:55,006 --> 00:29:56,416
want to check an application


1017
00:29:56,416 --> 00:29:58,856
bundle, you can use the SPCTL


1018
00:29:58,856 --> 00:30:01,466
command with the assess option


1019
00:30:02,316 --> 00:30:04,666
and the verbose output and path


1020
00:30:04,826 --> 00:30:06,026
to the app to the application.


1021
00:30:07,296 --> 00:30:08,786
The source will tell you whether


1022
00:30:08,786 --> 00:30:09,756
or not it was notarized.


1023
00:30:10,656 --> 00:30:11,956
Notarized Developer ID means


1024
00:30:11,956 --> 00:30:12,786
that it was successfully


1025
00:30:12,786 --> 00:30:13,986
notarized and if it shows


1026
00:30:13,986 --> 00:30:15,706
anything else, that mean that it


1027
00:30:15,706 --> 00:30:16,566
wasn't notarized.


1028
00:30:17,036 --> 00:30:20,086
If instead you want to check an


1029
00:30:20,086 --> 00:30:21,046
installer package for


1030
00:30:21,046 --> 00:30:24,616
notarization, you can use the


1031
00:30:24,616 --> 00:30:26,446
SPCTL command just like before


1032
00:30:26,446 --> 00:30:27,806
but with the additional type


1033
00:30:27,866 --> 00:30:29,666
option and passing that it's an


1034
00:30:29,666 --> 00:30:30,176
install.


1035
00:30:31,446 --> 00:30:32,436
Again, this will show you the


1036
00:30:32,436 --> 00:30:33,976
source and if it was


1037
00:30:33,976 --> 00:30:35,066
successfully notarized, you'll


1038
00:30:35,066 --> 00:30:37,186
see notarized developer ID.


1039
00:30:39,856 --> 00:30:42,586
Next what if you want to check


1040
00:30:42,586 --> 00:30:44,766
notarization on a signed disk


1041
00:30:44,766 --> 00:30:45,186
image?


1042
00:30:46,796 --> 00:30:48,206
Well, you can use a fairly


1043
00:30:48,206 --> 00:30:49,766
similar command except now you


1044
00:30:49,766 --> 00:30:52,186
want to use the type open and


1045
00:30:52,186 --> 00:30:53,846
you need to pass in the context


1046
00:30:54,346 --> 00:30:55,596
that's listed here on the slide.


1047
00:30:56,726 --> 00:30:57,866
That will show you the same


1048
00:30:57,866 --> 00:31:00,366
output as before and if it says


1049
00:31:00,366 --> 00:31:01,586
notarized Developer ID,


1050
00:31:01,946 --> 00:31:03,146
notarization was successful for


1051
00:31:03,146 --> 00:31:03,966
that signed disk image.


1052
00:31:05,546 --> 00:31:06,246
If you want to check


1053
00:31:06,246 --> 00:31:08,006
notarization status of anything


1054
00:31:08,006 --> 00:31:09,736
else, you'll need to fall back


1055
00:31:09,736 --> 00:31:11,766
to using the codesign command.


1056
00:31:13,456 --> 00:31:14,726
Here's an example of using the


1057
00:31:14,726 --> 00:31:17,126
codesign command with the verify


1058
00:31:17,126 --> 00:31:21,316
function verbose output testing


1059
00:31:21,316 --> 00:31:22,706
a very specific requirement


1060
00:31:23,226 --> 00:31:25,306
notarized and then a path to the


1061
00:31:25,306 --> 00:31:26,376
binary or the thing that you're


1062
00:31:26,376 --> 00:31:29,086
trying to check and the third


1063
00:31:29,086 --> 00:31:30,126
line of the output will say


1064
00:31:30,126 --> 00:31:31,896
explicit requirements satisfied


1065
00:31:32,276 --> 00:31:33,206
indicating that the test


1066
00:31:33,206 --> 00:31:34,506
requirement you passed in on the


1067
00:31:34,506 --> 00:31:35,976
command line was successfully


1068
00:31:35,976 --> 00:31:37,586
satisfied, which in this case


1069
00:31:37,586 --> 00:31:39,406
means the binary was notarized.


1070
00:31:40,536 --> 00:31:42,366
If it says that the explicit


1071
00:31:42,366 --> 00:31:44,126
requirement failed, that means


1072
00:31:44,126 --> 00:31:45,386
the binary wasn't successfully


1073
00:31:45,386 --> 00:31:45,936
notarized.


1074
00:31:49,136 --> 00:31:50,056
So that's everything about


1075
00:31:50,266 --> 00:31:51,366
verifying notarization.


1076
00:31:51,816 --> 00:31:53,176
I want to jump back and hit on


1077
00:31:53,176 --> 00:31:55,586
one other usage of altool that I


1078
00:31:55,586 --> 00:31:56,636
mentioned very early in the


1079
00:31:56,636 --> 00:31:57,226
presentation.


1080
00:31:58,636 --> 00:32:00,386
Altool is also able to give you


1081
00:32:00,386 --> 00:32:02,506
a notarization history using the


1082
00:32:02,506 --> 00:32:04,646
notarization history command of


1083
00:32:04,646 --> 00:32:06,006
all of the software that's been


1084
00:32:06,006 --> 00:32:07,706
submitted for notarization on


1085
00:32:07,706 --> 00:32:08,226
your account.


1086
00:32:09,406 --> 00:32:10,446
Here you can see an example of


1087
00:32:10,446 --> 00:32:12,146
the command and an example of


1088
00:32:12,146 --> 00:32:12,576
the output.


1089
00:32:13,156 --> 00:32:14,546
It also accepts pagination so


1090
00:32:14,546 --> 00:32:15,776
that you can paginate through


1091
00:32:15,776 --> 00:32:16,716
all of the submissions that have


1092
00:32:16,716 --> 00:32:16,976
been made.


1093
00:32:20,046 --> 00:32:21,056
I know that that was a lot of


1094
00:32:21,056 --> 00:32:22,386
information to digest in one


1095
00:32:22,806 --> 00:32:26,316
short talk, but there's a few


1096
00:32:26,316 --> 00:32:27,346
important things that I really


1097
00:32:27,346 --> 00:32:28,356
want you to take away from this


1098
00:32:28,356 --> 00:32:28,856
conversation.


1099
00:32:29,776 --> 00:32:31,916
First, it's really important to


1100
00:32:31,916 --> 00:32:33,896
sign your software properly


1101
00:32:34,286 --> 00:32:35,786
using inside-out code signing.


1102
00:32:36,576 --> 00:32:37,846
This is important not just so


1103
00:32:37,846 --> 00:32:39,286
that gatekeeper can verify your


1104
00:32:39,286 --> 00:32:40,326
software hasn't been tempered


1105
00:32:40,326 --> 00:32:42,746
with but also for notarization.


1106
00:32:45,816 --> 00:32:48,036
Second, don't take hardened


1107
00:32:48,036 --> 00:32:49,576
runtime entitlements that you


1108
00:32:49,576 --> 00:32:50,126
don't need.


1109
00:32:50,866 --> 00:32:52,266
Think about the benefit that the


1110
00:32:52,266 --> 00:32:53,336
hardened runtime provides to


1111
00:32:53,336 --> 00:32:55,206
your app and your users and


1112
00:32:55,206 --> 00:32:56,546
remember that every entitlement


1113
00:32:56,546 --> 00:32:58,476
you take reduces the security of


1114
00:32:58,476 --> 00:32:59,246
your application.


1115
00:32:59,746 --> 00:33:01,216
So only take those that you


1116
00:33:01,766 --> 00:33:01,866
need.


1117
00:33:03,646 --> 00:33:05,996
Finally notarize and staple all


1118
00:33:05,996 --> 00:33:07,166
the software that you distribute


1119
00:33:07,566 --> 00:33:09,386
so that it passes gatekeeper in


1120
00:33:09,386 --> 00:33:10,146
macOS Catalina.


1121
00:33:13,516 --> 00:33:15,296
Thanks for attending, and if


1122
00:33:15,296 --> 00:33:16,086
you're interested in talking


1123
00:33:16,086 --> 00:33:17,536
more about notarization, please


1124
00:33:17,536 --> 00:33:18,796
come to the notarization lab


1125
00:33:18,796 --> 00:33:19,596
that's going to be following


1126
00:33:19,596 --> 00:33:20,736
this session immediately at 4


1127
00:33:20,736 --> 00:33:21,096
o'clock.


1128
00:33:21,586 --> 00:33:23,076
Also, there are a couple of


1129
00:33:23,076 --> 00:33:24,666
other labs running throughout


1130
00:33:24,666 --> 00:33:25,856
the week where we can talk more


1131
00:33:25,856 --> 00:33:27,496
about security, notarization and


1132
00:33:27,496 --> 00:33:27,726
signing.


1133
00:33:28,516 --> 00:33:28,976
So thank you.


1134
00:33:29,516 --> 00:33:36,500
[ Applause ]

