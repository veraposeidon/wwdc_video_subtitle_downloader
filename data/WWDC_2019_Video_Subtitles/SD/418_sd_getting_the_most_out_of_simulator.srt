1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:08,516 --> 00:00:12,226
[ Applause ]


3
00:00:12,726 --> 00:00:13,826
>> Good morning, everyone.


4
00:00:14,816 --> 00:00:16,296
Welcome to Getting the Most out


5
00:00:16,296 --> 00:00:17,026
of Simulator.


6
00:00:17,146 --> 00:00:18,376
My name is Russ Bishop.


7
00:00:18,566 --> 00:00:20,466
I'm an engineer on the Simulator


8
00:00:20,466 --> 00:00:21,066
and Devices team.


9
00:00:21,066 --> 00:00:22,366
And let's go ahead and get


10
00:00:22,366 --> 00:00:23,000
started.


11
00:00:25,026 --> 00:00:26,336
Today we're going to tell you a


12
00:00:26,336 --> 00:00:27,156
little bit about what the


13
00:00:27,156 --> 00:00:28,056
Simulator is.


14
00:00:28,646 --> 00:00:30,926
Then Tracy is going to come out


15
00:00:30,926 --> 00:00:33,156
and tell you about some burning


16
00:00:33,156 --> 00:00:34,436
questions and answers and


17
00:00:34,436 --> 00:00:35,126
getting the most out of the


18
00:00:35,126 --> 00:00:36,296
Simulator application.


19
00:00:36,906 --> 00:00:38,906
I'm going to come back and tell


20
00:00:38,906 --> 00:00:40,126
you about using Simulator from


21
00:00:40,126 --> 00:00:41,756
the command line, and then


22
00:00:41,756 --> 00:00:42,876
finally Katelyn's going to come


23
00:00:42,876 --> 00:00:44,266
and tell you all about Metal in


24
00:00:44,266 --> 00:00:44,786
the Simulator.


25
00:00:46,096 --> 00:00:49,396
So what is Simulator?


26
00:00:49,536 --> 00:00:53,036
Well, it is the best way to


27
00:00:53,036 --> 00:00:55,476
simulate iOS, tvOS and watchOS


28
00:00:55,506 --> 00:00:57,566
devices on your Mac.


29
00:00:57,906 --> 00:01:00,016
It can be an amazing tool for


30
00:01:00,016 --> 00:01:00,526
development.


31
00:01:00,986 --> 00:01:02,966
Your Mac has more cores, more


32
00:01:02,966 --> 00:01:03,406
memory.


33
00:01:03,716 --> 00:01:05,306
You can run multiple devices in


34
00:01:05,306 --> 00:01:05,806
parallel.


35
00:01:06,466 --> 00:01:08,886
So it is a great tool, but as an


36
00:01:08,886 --> 00:01:11,456
engineer, that explanation might


37
00:01:11,456 --> 00:01:12,786
be a little bit unsatisfying.


38
00:01:13,556 --> 00:01:16,046
So to talk really about what the


39
00:01:16,046 --> 00:01:17,686
Simulator is at a technical


40
00:01:17,686 --> 00:01:18,876
level, we need to talk a little


41
00:01:18,876 --> 00:01:20,116
bit about what an operating


42
00:01:20,116 --> 00:01:20,686
system is.


43
00:01:20,686 --> 00:01:24,736
We have a kernel, manages


44
00:01:24,736 --> 00:01:26,296
hardware resources, allocates


45
00:01:26,296 --> 00:01:27,646
memory, arbitrates between


46
00:01:27,646 --> 00:01:28,196
processes.


47
00:01:28,286 --> 00:01:29,346
That's pretty straightforward.


48
00:01:29,986 --> 00:01:32,456
macOS then on top of that has a


49
00:01:32,456 --> 00:01:33,256
userspace.


50
00:01:33,816 --> 00:01:36,326
We have PID 1, launchd.


51
00:01:36,666 --> 00:01:38,526
We might have some daemons


52
00:01:38,526 --> 00:01:39,416
running on top of that, some


53
00:01:39,416 --> 00:01:39,796
services.


54
00:01:39,796 --> 00:01:42,076
We have some frameworks, and


55
00:01:42,076 --> 00:01:43,826
then we run our applications.


56
00:01:44,686 --> 00:01:48,196
Simulator is essentially a


57
00:01:48,196 --> 00:01:49,226
separate userspace.


58
00:01:49,936 --> 00:01:52,326
It has its own launchd, its own


59
00:01:52,326 --> 00:01:54,236
daemons, its own frameworks and


60
00:01:54,476 --> 00:01:55,826
runs its own applications.


61
00:01:56,346 --> 00:01:57,466
These things are all completely


62
00:01:57,466 --> 00:01:59,826
separate and isolated from your


63
00:01:59,826 --> 00:02:00,966
Mac's userspace.


64
00:02:01,166 --> 00:02:02,416
And if I start another


65
00:02:02,416 --> 00:02:04,226
Simulator, that essentially


66
00:02:04,226 --> 00:02:06,286
brings up another isolated


67
00:02:06,286 --> 00:02:06,806
userspace.


68
00:02:06,806 --> 00:02:08,416
It's isolated not only from the


69
00:02:08,416 --> 00:02:10,126
macOS userspace but also from


70
00:02:10,126 --> 00:02:11,586
any other running Simulators.


71
00:02:12,506 --> 00:02:14,296
So at a technical level, what a


72
00:02:14,356 --> 00:02:17,666
Simulator is is the iOS, watchOS


73
00:02:17,666 --> 00:02:21,166
or tvOS userspace but running on


74
00:02:21,166 --> 00:02:21,906
the Mac kernel.


75
00:02:22,466 --> 00:02:25,636
Has a separate launchd, separate


76
00:02:25,636 --> 00:02:27,426
daemons and services, separate


77
00:02:27,426 --> 00:02:29,446
notifications domains, separate


78
00:02:29,446 --> 00:02:31,546
URL sessions, separate mach


79
00:02:31,546 --> 00:02:32,666
bootstrap.


80
00:02:33,236 --> 00:02:34,736
It does share the same


81
00:02:34,736 --> 00:02:36,146
filesystem but has a separate


82
00:02:36,146 --> 00:02:36,826
Home directory.


83
00:02:38,336 --> 00:02:41,716
From libSystem up, everything is


84
00:02:41,716 --> 00:02:43,036
built for the platform that


85
00:02:43,036 --> 00:02:44,776
we're simulating, so that


86
00:02:44,776 --> 00:02:46,416
includes, at the lowest layers,


87
00:02:46,416 --> 00:02:47,916
you know, libSystem, all the


88
00:02:47,916 --> 00:02:48,826
Syslibs all the way up to


89
00:02:49,006 --> 00:02:51,096
UIKit and other frameworks.


90
00:02:52,236 --> 00:02:54,336
It uses the ABI for that


91
00:02:54,336 --> 00:02:56,286
platform, and it's built


92
00:02:56,466 --> 00:02:58,136
natively for your Mac's


93
00:02:58,166 --> 00:02:58,766
processor.


94
00:02:59,356 --> 00:03:00,566
It's not an emulator.


95
00:03:01,146 --> 00:03:03,606
A couple of more details to


96
00:03:03,606 --> 00:03:04,000
cover.


97
00:03:06,116 --> 00:03:07,946
The memory and CPU limits of


98
00:03:07,986 --> 00:03:10,526
Simulator are -- or rather, the


99
00:03:10,526 --> 00:03:11,666
memory and CPU limits of the


100
00:03:11,666 --> 00:03:14,526
devices are not simulated, so if


101
00:03:14,526 --> 00:03:16,766
your Mac has -- you have one of


102
00:03:16,766 --> 00:03:18,156
the new Mac Pros and you have a


103
00:03:18,296 --> 00:03:20,006
terabyte of memory, your


104
00:03:20,006 --> 00:03:20,916
simulator can allocate a


105
00:03:20,916 --> 00:03:21,626
terabyte of memory.


106
00:03:22,346 --> 00:03:24,666
If you try that on an iPhone X,


107
00:03:25,216 --> 00:03:26,476
that probably isn't going to


108
00:03:26,866 --> 00:03:27,000
work.


109
00:03:28,956 --> 00:03:30,596
Mac also has different number of


110
00:03:30,596 --> 00:03:31,686
cores, different threading


111
00:03:31,686 --> 00:03:32,196
behavior.


112
00:03:32,536 --> 00:03:33,496
That can be a boon.


113
00:03:33,496 --> 00:03:35,626
It can help expose data races or


114
00:03:35,626 --> 00:03:37,426
other threading conditions, but


115
00:03:37,426 --> 00:03:39,186
it is something to be aware of.


116
00:03:39,896 --> 00:03:41,756
The application sandbox is not


117
00:03:41,756 --> 00:03:44,326
enforced, so a process in the


118
00:03:44,326 --> 00:03:45,676
Simulator can write outside of


119
00:03:45,676 --> 00:03:46,926
its sandbox, but, again, if you


120
00:03:46,926 --> 00:03:48,716
try that on the device, it's not


121
00:03:48,716 --> 00:03:50,716
going to work.


122
00:03:50,906 --> 00:03:52,896
However, most people's Macs are


123
00:03:52,896 --> 00:03:54,736
setup with a case-insensitive


124
00:03:54,736 --> 00:03:56,116
file system, but the Simulator


125
00:03:56,836 --> 00:03:58,076
goes ahead and runs in a mode


126
00:03:58,076 --> 00:04:00,176
where all processes are using a


127
00:04:00,176 --> 00:04:01,666
case-sensitive file system


128
00:04:01,666 --> 00:04:02,226
accesses.


129
00:04:03,296 --> 00:04:05,516
And then the, last but not


130
00:04:05,516 --> 00:04:07,326
least, the Thread Sanitizer is


131
00:04:07,406 --> 00:04:08,376
supported in the Simulator,


132
00:04:08,376 --> 00:04:09,626
whereas it's not supported on


133
00:04:09,626 --> 00:04:10,106
devices.


134
00:04:10,106 --> 00:04:11,976
So that can be a useful tool.


135
00:04:11,976 --> 00:04:14,186
So now, I'm going to hand this


136
00:04:14,186 --> 00:04:15,956
over to Tracy who's going to


137
00:04:16,076 --> 00:04:16,836
talk about some burning


138
00:04:16,836 --> 00:04:17,796
questions and answers.


139
00:04:18,636 --> 00:04:19,116
Tracy?


140
00:04:20,516 --> 00:04:24,546
[ Applause ]


141
00:04:25,046 --> 00:04:25,536
>> Good morning.


142
00:04:26,426 --> 00:04:27,656
My name is Tracy, and I work for


143
00:04:27,656 --> 00:04:28,826
the Development Technologies


144
00:04:28,826 --> 00:04:29,096
group.


145
00:04:29,406 --> 00:04:30,946
So, you know, we often get


146
00:04:30,946 --> 00:04:33,876
questions in our session and in


147
00:04:33,876 --> 00:04:35,996
labs and through our user forums


148
00:04:35,996 --> 00:04:36,896
and via feedback.


149
00:04:37,396 --> 00:04:38,806
So we thought it might be useful


150
00:04:38,806 --> 00:04:40,176
to go over the answers to some


151
00:04:40,176 --> 00:04:41,226
of those questions.


152
00:04:41,486 --> 00:04:43,366
So my goal is that you'll walk


153
00:04:43,366 --> 00:04:44,936
away knowing at least one thing


154
00:04:44,936 --> 00:04:46,176
you didn't know before about the


155
00:04:46,176 --> 00:04:46,806
Simulator.


156
00:04:47,536 --> 00:04:48,916
But to start off, I'd like to


157
00:04:48,916 --> 00:04:50,466
talk for a bit about why the


158
00:04:50,466 --> 00:04:51,816
Simulator should be important to


159
00:04:51,816 --> 00:04:52,806
your workflow.


160
00:04:53,506 --> 00:04:54,596
Well, if we take into


161
00:04:54,596 --> 00:04:57,436
consideration all of the devices


162
00:04:57,436 --> 00:04:59,526
that are compatible with iOS 13,


163
00:05:00,086 --> 00:05:01,616
and then we add on all of the


164
00:05:01,616 --> 00:05:02,826
other operating systems and


165
00:05:02,826 --> 00:05:04,586
devices, you're looking at


166
00:05:04,586 --> 00:05:06,446
literally hundreds of devices


167
00:05:06,446 --> 00:05:07,826
and operating systems available


168
00:05:07,826 --> 00:05:08,736
to your customers.


169
00:05:08,916 --> 00:05:10,726
And that's just the iPhones and


170
00:05:10,726 --> 00:05:12,346
the iPads, not even including


171
00:05:12,436 --> 00:05:13,776
the Watches and the TVs.


172
00:05:14,586 --> 00:05:16,016
Well, that's a lot of stuff to


173
00:05:16,016 --> 00:05:16,706
be carrying around in your


174
00:05:16,706 --> 00:05:16,996
backpack.


175
00:05:16,996 --> 00:05:19,466
And we thought about, "Well,


176
00:05:19,466 --> 00:05:20,466
what about testing with these


177
00:05:20,466 --> 00:05:21,756
older operating systems?"


178
00:05:22,206 --> 00:05:24,426
So I'm sure you have customers


179
00:05:24,426 --> 00:05:26,156
that are using older devices and


180
00:05:26,156 --> 00:05:27,086
operating systems.


181
00:05:27,886 --> 00:05:28,576
So you might be thinking,


182
00:05:28,576 --> 00:05:30,166
"Tracy, there's no way that I


183
00:05:30,166 --> 00:05:31,216
could test all these


184
00:05:31,216 --> 00:05:32,266
configurations."


185
00:05:32,706 --> 00:05:33,806
Well, that might be true.


186
00:05:34,316 --> 00:05:35,566
And although you may not have


187
00:05:35,566 --> 00:05:37,076
all these physical devices,


188
00:05:37,736 --> 00:05:38,956
through the Simulator, you will


189
00:05:38,956 --> 00:05:40,746
have access to every operating


190
00:05:40,746 --> 00:05:42,336
system and device available.


191
00:05:43,076 --> 00:05:44,686
That makes the Simulator a very


192
00:05:44,686 --> 00:05:45,956
important tool to your everyday


193
00:05:45,956 --> 00:05:46,456
workflow.


194
00:05:47,176 --> 00:05:48,306
All right, let's get on to those


195
00:05:48,306 --> 00:05:49,236
burning questions.


196
00:05:49,926 --> 00:05:52,046
Number one, can I zoom in on the


197
00:05:52,046 --> 00:05:52,586
Simulator?


198
00:05:53,466 --> 00:05:54,146
Yes, you can.


199
00:05:54,486 --> 00:05:55,726
You can simulate the pinch


200
00:05:55,726 --> 00:05:57,346
gesture by click and dragging


201
00:05:57,346 --> 00:05:58,776
while holding down the Option


202
00:06:01,616 --> 00:06:01,876
key.


203
00:06:02,426 --> 00:06:04,096
Another gesture you can simulate


204
00:06:04,096 --> 00:06:05,446
is drag and drop.


205
00:06:06,246 --> 00:06:07,336
First, you grab the app.


206
00:06:08,556 --> 00:06:09,776
Then you want to click down the


207
00:06:09,776 --> 00:06:12,036
Control key to simulate a hold,


208
00:06:12,726 --> 00:06:14,866
drag to where you want to go and


209
00:06:14,866 --> 00:06:16,726
then just let go of the Hold


210
00:06:16,946 --> 00:06:17,000
key.


211
00:06:19,306 --> 00:06:20,106
Oh, that's a good one [laughs].


212
00:06:22,496 --> 00:06:23,256
Next question.


213
00:06:23,686 --> 00:06:25,506
Can I change which audio device


214
00:06:25,506 --> 00:06:27,246
the Simulator uses for input and


215
00:06:27,246 --> 00:06:27,716
output?


216
00:06:28,366 --> 00:06:29,046
Yes, you can.


217
00:06:29,646 --> 00:06:30,796
So that's done through the


218
00:06:30,796 --> 00:06:31,716
hardware menu.


219
00:06:32,096 --> 00:06:34,326
You can select which audio


220
00:06:34,326 --> 00:06:37,186
device you want to route to.


221
00:06:37,426 --> 00:06:38,596
That way you can listen to your


222
00:06:38,596 --> 00:06:39,846
Apple music without


223
00:06:39,846 --> 00:06:40,476
interruption.


224
00:06:40,976 --> 00:06:43,116
Next question.


225
00:06:43,656 --> 00:06:44,706
Does iCloud work in the


226
00:06:44,706 --> 00:06:45,256
Simulator?


227
00:06:45,866 --> 00:06:46,546
Yes, it does.


228
00:06:47,066 --> 00:06:48,496
You can log into iCloud through


229
00:06:48,496 --> 00:06:49,826
the Settings app, and then


230
00:06:49,826 --> 00:06:51,136
you'll have access to all your


231
00:06:51,136 --> 00:06:52,826
Calendars, Contacts and every


232
00:06:52,826 --> 00:06:53,966
other app that's available


233
00:06:54,206 --> 00:06:55,196
through iCloud and in the


234
00:06:55,196 --> 00:06:55,756
Simulator.


235
00:06:57,136 --> 00:06:58,916
You can also trigger an iCloud


236
00:06:58,956 --> 00:07:00,936
sync by using the Debug menu,


237
00:07:01,246 --> 00:07:02,926
Trigger iCloud Sync.


238
00:07:06,536 --> 00:07:07,956
Oh, look. I have a vacation


239
00:07:07,956 --> 00:07:08,726
coming up next week.


240
00:07:08,776 --> 00:07:08,986
Good.


241
00:07:10,006 --> 00:07:11,536
Next question.


242
00:07:12,116 --> 00:07:13,566
Can I use a Shake Gesture?


243
00:07:14,546 --> 00:07:15,146
Yes, you can.


244
00:07:15,146 --> 00:07:17,296
In this example, a colleague


245
00:07:17,296 --> 00:07:19,216
created an app that will


246
00:07:19,296 --> 00:07:20,716
indicate when a shake is


247
00:07:20,716 --> 00:07:21,226
received.


248
00:07:21,816 --> 00:07:23,206
So you go to the Hardware menu,


249
00:07:23,486 --> 00:07:25,256
and you select Shake Gesture.


250
00:07:25,836 --> 00:07:30,356
You can also simulate a memory


251
00:07:30,356 --> 00:07:32,166
warning by going to the Debug


252
00:07:32,166 --> 00:07:32,516
menu.


253
00:07:39,066 --> 00:07:40,106
Next question.


254
00:07:40,816 --> 00:07:42,806
How do I get older simulators to


255
00:07:42,806 --> 00:07:44,696
show up as deployment targets?


256
00:07:45,576 --> 00:07:46,916
So this is all done through the


257
00:07:46,916 --> 00:07:48,456
Devices and Simulator pane.


258
00:07:49,066 --> 00:07:50,156
It's found under the Windows


259
00:07:50,156 --> 00:07:51,126
menu, or you can use the


260
00:07:51,126 --> 00:07:52,156
keyboard shortcut.


261
00:07:53,436 --> 00:07:55,656
Xcode 11 now ships with a


262
00:07:55,656 --> 00:07:56,996
default list of simulators,


263
00:07:57,036 --> 00:07:57,956
which you may have noticed have


264
00:07:57,956 --> 00:07:59,166
been pared down quite a bit.


265
00:07:59,706 --> 00:08:01,006
But you can always install


266
00:08:01,006 --> 00:08:02,986
additional simulators as needed.


267
00:08:03,886 --> 00:08:04,846
How are we going to do that is


268
00:08:04,846 --> 00:08:05,626
we're going to go to the


269
00:08:05,626 --> 00:08:06,606
Simulators tab.


270
00:08:07,896 --> 00:08:08,886
Next thing we're going to do is


271
00:08:08,926 --> 00:08:10,216
click on the Plus button at the


272
00:08:10,216 --> 00:08:10,846
bottom left.


273
00:08:12,476 --> 00:08:14,426
Then you will select your device


274
00:08:14,486 --> 00:08:17,336
type and what operating system


275
00:08:17,336 --> 00:08:18,156
you want to use.


276
00:08:19,356 --> 00:08:20,586
In this case, for the device


277
00:08:20,656 --> 00:08:22,496
type, let's select the iPad mini


278
00:08:22,496 --> 00:08:23,076
simulator.


279
00:08:23,836 --> 00:08:26,366
Xcode 11 now ships with support


280
00:08:26,366 --> 00:08:28,016
for iPad minis going back to


281
00:08:28,016 --> 00:08:28,806
iPad mini 2.


282
00:08:28,806 --> 00:08:31,826
So you're going to give this sim


283
00:08:31,826 --> 00:08:33,775
a name, and then you click


284
00:08:33,775 --> 00:08:34,246
Create.


285
00:08:35,025 --> 00:08:36,306
And now your newly created


286
00:08:36,306 --> 00:08:38,385
simulator target will show up.


287
00:08:38,976 --> 00:08:40,696
And you can run your app to the


288
00:08:40,696 --> 00:08:42,116
new iPad mini simulator.


289
00:08:42,686 --> 00:08:45,936
Let's talk for a minute about


290
00:08:45,936 --> 00:08:47,106
Watch sims.


291
00:08:47,616 --> 00:08:49,346
So preset Watch pairs are


292
00:08:49,346 --> 00:08:50,676
automatically added to the


293
00:08:50,676 --> 00:08:53,246
iPhone X and the Xs Max, but you


294
00:08:53,246 --> 00:08:54,786
can add a new pair by clicking


295
00:08:54,786 --> 00:08:58,296
on the Plus button.


296
00:08:58,446 --> 00:08:59,686
Again, you'll select your


297
00:08:59,686 --> 00:09:01,026
operating system and device


298
00:09:01,026 --> 00:09:04,066
type, and then you click Pair.


299
00:09:04,726 --> 00:09:09,346
So to change the act of pairs,


300
00:09:09,346 --> 00:09:10,816
all we do is click on the Radio


301
00:09:10,816 --> 00:09:10,976
button.


302
00:09:15,636 --> 00:09:17,526
You can also download older


303
00:09:17,526 --> 00:09:19,826
simulator runtimes by going to


304
00:09:19,826 --> 00:09:21,176
the Xcode Preferences and


305
00:09:21,176 --> 00:09:22,436
selecting Components.


306
00:09:22,846 --> 00:09:23,996
You can choose what you need and


307
00:09:23,996 --> 00:09:24,966
then click Install.


308
00:09:25,276 --> 00:09:26,906
Older simulators will install,


309
00:09:27,056 --> 00:09:27,946
and then you will be able to


310
00:09:27,946 --> 00:09:29,166
select them based on the


311
00:09:29,166 --> 00:09:30,566
deployment target settings in


312
00:09:30,566 --> 00:09:31,286
your project.


313
00:09:31,876 --> 00:09:34,246
You can also get older


314
00:09:34,246 --> 00:09:35,456
simulators by using the


315
00:09:35,456 --> 00:09:37,186
Hardware-Device menu, and they


316
00:09:37,186 --> 00:09:37,976
will just launch.


317
00:09:40,176 --> 00:09:42,186
This will allow you to show


318
00:09:42,626 --> 00:09:43,956
newer operating systems and


319
00:09:43,956 --> 00:09:45,456
older operating systems side by


320
00:09:45,916 --> 00:09:46,000
side.


321
00:09:49,376 --> 00:09:50,986
You can hide simulator targets


322
00:09:51,036 --> 00:09:52,796
by deselecting the Show as run


323
00:09:52,796 --> 00:09:53,596
destination.


324
00:09:54,566 --> 00:09:56,106
You can also delete simulator


325
00:09:56,106 --> 00:09:57,336
targets if you don't want them


326
00:09:57,336 --> 00:09:59,146
around anymore, and you can use


327
00:09:59,146 --> 00:09:59,796
the Delete button on your


328
00:09:59,796 --> 00:09:59,976
keyboard.


329
00:10:00,496 --> 00:10:02,376
Or you can use the Contextual


330
00:10:02,376 --> 00:10:03,936
menu, holding down the Control


331
00:10:03,936 --> 00:10:04,186
key.


332
00:10:04,186 --> 00:10:05,886
You can also select these other


333
00:10:05,886 --> 00:10:06,846
items that are shown.


334
00:10:07,336 --> 00:10:08,426
Remember, if you change your


335
00:10:08,426 --> 00:10:09,506
mind, you can always add a


336
00:10:09,506 --> 00:10:11,216
simulator target back again by


337
00:10:11,216 --> 00:10:11,886
creating them.


338
00:10:12,466 --> 00:10:13,596
All right, let's go on to the


339
00:10:13,596 --> 00:10:14,326
next question.


340
00:10:14,926 --> 00:10:16,306
The simulators are overtaking my


341
00:10:16,306 --> 00:10:16,856
screen.


342
00:10:16,856 --> 00:10:17,896
Can I make them smaller?


343
00:10:19,366 --> 00:10:20,096
Yes, you can.


344
00:10:20,096 --> 00:10:21,796
So there are three presets that


345
00:10:21,796 --> 00:10:22,976
are available on the Simulator:


346
00:10:23,866 --> 00:10:25,946
Physical Size, Point Accurate


347
00:10:25,946 --> 00:10:28,036
and Pixel Accurate.


348
00:10:28,396 --> 00:10:29,456
So what do these all mean?


349
00:10:29,866 --> 00:10:31,336
Well, Physical Size is actually


350
00:10:31,336 --> 00:10:32,726
the physical size of the device.


351
00:10:33,176 --> 00:10:34,346
You can hold up your device to


352
00:10:34,346 --> 00:10:35,316
the screen, and it will be the


353
00:10:35,316 --> 00:10:36,206
physical size.


354
00:10:36,696 --> 00:10:38,046
Point Accurate is going to be


355
00:10:38,046 --> 00:10:39,926
one UIKit point will equal one


356
00:10:39,926 --> 00:10:40,826
AppKit point.


357
00:10:41,466 --> 00:10:43,176
And then Pixel Accurate is the


358
00:10:43,176 --> 00:10:44,826
pixel-by-pixel representation


359
00:10:44,826 --> 00:10:45,816
based on your monitor


360
00:10:45,816 --> 00:10:46,416
resolution.


361
00:10:47,446 --> 00:10:48,826
Or as some of you might know,


362
00:10:48,826 --> 00:10:50,916
you can always drag, open the


363
00:10:50,916 --> 00:10:53,406
Simulator and size it however


364
00:10:53,406 --> 00:10:53,856
you want.


365
00:10:53,856 --> 00:10:55,626
So you can size it as large as


366
00:10:55,626 --> 00:10:56,176
your display.


367
00:10:56,716 --> 00:10:59,666
Next question.


368
00:10:59,826 --> 00:11:02,206
Can the Simulator help me debug


369
00:11:02,206 --> 00:11:03,356
UI animations?


370
00:11:03,946 --> 00:11:04,726
Yes, it can.


371
00:11:04,906 --> 00:11:06,826
So that's done through the Slow


372
00:11:06,826 --> 00:11:08,466
Animations under the Debug menu.


373
00:11:08,916 --> 00:11:10,656
Once this is toggled and you


374
00:11:10,656 --> 00:11:14,056
select any app, it will go very


375
00:11:14,056 --> 00:11:18,446
slowly, slowing down the UI


376
00:11:18,446 --> 00:11:19,156
animations.


377
00:11:19,616 --> 00:11:22,666
Next question.


378
00:11:23,556 --> 00:11:24,826
Is Siri available in the


379
00:11:24,826 --> 00:11:25,276
Simulator?


380
00:11:26,756 --> 00:11:27,496
Yes, it is.


381
00:11:27,496 --> 00:11:28,656
As long as you give the


382
00:11:28,656 --> 00:11:29,826
Simulator access to your


383
00:11:29,826 --> 00:11:31,976
microphone, you can invoke Siri


384
00:11:32,026 --> 00:11:33,986
on all Simulator platforms.


385
00:11:34,636 --> 00:11:36,206
Additionally, you can find Siri


386
00:11:36,206 --> 00:11:37,746
in the hardware menu, or you can


387
00:11:37,746 --> 00:11:39,386
use the keyboard shortcuts.


388
00:11:39,826 --> 00:11:42,896
Next question.


389
00:11:43,196 --> 00:11:44,826
How do I control my tvOS


390
00:11:44,826 --> 00:11:45,966
Simulator?


391
00:11:46,596 --> 00:11:47,566
Well, there's a few different


392
00:11:47,566 --> 00:11:48,706
ways you can do this.


393
00:11:49,006 --> 00:11:51,416
One is you can use the Apple TV


394
00:11:51,416 --> 00:11:52,366
software Remote.


395
00:11:52,916 --> 00:11:53,906
So that's located under the


396
00:11:53,906 --> 00:11:54,636
Hardware menu.


397
00:11:54,786 --> 00:11:55,336
Click on it.


398
00:11:55,816 --> 00:11:57,546
And to activate the area, you


399
00:11:57,546 --> 00:11:59,006
just hold down the Option key


400
00:11:59,346 --> 00:12:00,446
while you move the cursor


401
00:12:00,446 --> 00:12:01,000
around.


402
00:12:03,076 --> 00:12:04,266
Another way is you can actually


403
00:12:04,266 --> 00:12:06,276
use the hardware Apple TV


404
00:12:06,276 --> 00:12:06,686
Remote.


405
00:12:06,936 --> 00:12:09,126
You pair it holding down the


406
00:12:09,186 --> 00:12:10,686
Plus and the Menu button on your


407
00:12:10,686 --> 00:12:12,126
remote, and then once it's


408
00:12:12,126 --> 00:12:13,756
paired, you'll be able to use


409
00:12:13,976 --> 00:12:16,226
the hardware Apple TV Remote on


410
00:12:16,226 --> 00:12:17,756
your tvOS Simulator.


411
00:12:20,426 --> 00:12:22,386
You can also use game


412
00:12:22,386 --> 00:12:24,036
controllers, and for simple


413
00:12:24,036 --> 00:12:25,046
navigation, just use the


414
00:12:25,046 --> 00:12:25,536
keyboard.


415
00:12:25,986 --> 00:12:28,676
Next question.


416
00:12:29,376 --> 00:12:32,406
Can I use Xcode 10 with iOS 13


417
00:12:32,406 --> 00:12:33,186
Simulators?


418
00:12:34,246 --> 00:12:34,856
Yes, you can.


419
00:12:35,196 --> 00:12:37,816
So as long as you have Xcode 10


420
00:12:37,816 --> 00:12:40,406
running on the same system as


421
00:12:40,406 --> 00:12:42,446
Xcode 11-Beta, first thing you


422
00:12:42,446 --> 00:12:43,886
want to do is launch Xcode 11


423
00:12:43,886 --> 00:12:45,216
and then also launch a


424
00:12:45,216 --> 00:12:45,736
Simulator.


425
00:12:46,406 --> 00:12:48,726
So that'll give you an iOS 13


426
00:12:48,726 --> 00:12:49,006
runtime.


427
00:12:49,846 --> 00:12:51,436
Then you close down Xcode, but


428
00:12:51,436 --> 00:12:52,736
you leave the Simulator.app


429
00:12:52,846 --> 00:12:53,336
open.


430
00:12:54,486 --> 00:12:55,886
Then you'll go into the older


431
00:12:56,006 --> 00:12:59,626
Xcode 10, bring it up, and then


432
00:12:59,626 --> 00:13:00,836
you can build and run to the


433
00:13:00,836 --> 00:13:01,276
Simulator.


434
00:13:02,206 --> 00:13:03,146
Let me show you how that's done.


435
00:13:03,376 --> 00:13:05,106
So this is we're running Xcode


436
00:13:05,106 --> 00:13:05,456
10.


437
00:13:06,906 --> 00:13:07,956
So what we're going to do is


438
00:13:07,956 --> 00:13:09,696
we're going to select the iOS


439
00:13:09,936 --> 00:13:13,816
12.2 Sim, run our app to that.


440
00:13:13,816 --> 00:13:15,756
And then we're going to change


441
00:13:15,756 --> 00:13:18,006
over to the iOS 13 Sim, and


442
00:13:18,586 --> 00:13:19,706
we're going to run our app to


443
00:13:19,706 --> 00:13:20,000
that.


444
00:13:21,996 --> 00:13:23,176
Now you can look at the older


445
00:13:23,176 --> 00:13:24,466
and the newer side by side.


446
00:13:29,466 --> 00:13:32,656
Oh, yay. That got a clap


447
00:13:32,656 --> 00:13:33,346
[laughs].


448
00:13:33,346 --> 00:13:34,146
Next question.


449
00:13:34,146 --> 00:13:35,706
Can I copy content into my


450
00:13:35,706 --> 00:13:36,276
Simulator?


451
00:13:37,106 --> 00:13:38,566
There's a couple different ways


452
00:13:38,566 --> 00:13:39,326
to copy content.


453
00:13:39,326 --> 00:13:40,306
One of the ways is through drag


454
00:13:40,306 --> 00:13:40,746
and drop.


455
00:13:40,746 --> 00:13:42,166
So through drag and drop, you


456
00:13:42,166 --> 00:13:44,576
can copy app bundles, locations,


457
00:13:44,846 --> 00:13:47,646
photos and videos and URLs.


458
00:13:49,416 --> 00:13:51,526
So in this example, I can take


459
00:13:51,746 --> 00:13:54,576
my project, grab my app bundle,


460
00:13:54,726 --> 00:13:56,156
just drag and drop it onto the


461
00:13:56,156 --> 00:13:56,766
Simulator.


462
00:13:57,566 --> 00:13:59,316
It will install, and I can run


463
00:13:59,876 --> 00:13:59,946
it.


464
00:14:03,256 --> 00:14:04,776
In this example, we're going to


465
00:14:04,856 --> 00:14:06,556
take some photos and videos.


466
00:14:07,676 --> 00:14:09,266
So I grab them all, and I can


467
00:14:09,266 --> 00:14:10,546
just drag and drop them right


468
00:14:10,546 --> 00:14:12,036
into the Simulator, and they


469
00:14:12,036 --> 00:14:13,336
will automatically go into the


470
00:14:13,336 --> 00:14:13,956
Photos app.


471
00:14:15,176 --> 00:14:16,486
Oh, wait. I drug in four, and I


472
00:14:16,486 --> 00:14:17,306
only got three.


473
00:14:17,836 --> 00:14:18,366
Oh.


474
00:14:18,856 --> 00:14:20,436
That's because the photo and


475
00:14:20,436 --> 00:14:22,316
video file are recombined to


476
00:14:22,316 --> 00:14:23,366
give you a live photo.


477
00:14:23,946 --> 00:14:28,446
Drag and dropping URLs is


478
00:14:28,446 --> 00:14:28,816
simple.


479
00:14:28,816 --> 00:14:30,646
Just open up Safari, grab the


480
00:14:30,646 --> 00:14:31,906
URL, drag and drop it.


481
00:14:36,636 --> 00:14:38,476
And from within Safari, you can


482
00:14:38,476 --> 00:14:40,556
also use a Safari Share Sheet.


483
00:14:40,836 --> 00:14:42,436
The Simulator is a target under


484
00:14:42,436 --> 00:14:43,416
the Safari Share Sheet.


485
00:14:43,496 --> 00:14:44,216
Just select it.


486
00:14:44,746 --> 00:14:45,946
It'll bring up a dialog.


487
00:14:45,946 --> 00:14:47,576
You can select one simulator, or


488
00:14:47,576 --> 00:14:48,896
you can go to all simulators at


489
00:14:48,896 --> 00:14:50,276
the same time.


490
00:14:56,576 --> 00:14:59,526
Also, you can share location via


491
00:14:59,526 --> 00:15:00,226
the Share Sheet.


492
00:15:00,456 --> 00:15:02,156
At the Maps app, you got a


493
00:15:02,156 --> 00:15:02,896
location.


494
00:15:02,896 --> 00:15:04,616
Just click the Simulator, select


495
00:15:04,616 --> 00:15:06,296
your target, and then it will


496
00:15:06,296 --> 00:15:07,496
share that location with the


497
00:15:07,496 --> 00:15:08,000
Sim.


498
00:15:11,586 --> 00:15:13,016
OK, let's go over some other


499
00:15:13,016 --> 00:15:14,396
helpful hints that you might not


500
00:15:14,396 --> 00:15:14,846
have known.


501
00:15:16,616 --> 00:15:18,286
Under the Hardware menu, there


502
00:15:18,286 --> 00:15:19,516
is the Rotate Device


503
00:15:19,516 --> 00:15:20,246
Automatically.


504
00:15:20,396 --> 00:15:21,986
So if you toggle this setting,


505
00:15:21,986 --> 00:15:23,496
it will honor the settings in


506
00:15:23,496 --> 00:15:24,916
your project, and it will rotate


507
00:15:24,916 --> 00:15:26,376
the Sim automatically.


508
00:15:27,016 --> 00:15:30,716
We have a few presets for


509
00:15:30,906 --> 00:15:32,816
simulator locations in the Sim.


510
00:15:33,176 --> 00:15:34,896
One is like a freeway drive, so


511
00:15:34,896 --> 00:15:36,016
you can simulate a freeway


512
00:15:36,016 --> 00:15:36,426
drive.


513
00:15:37,096 --> 00:15:40,316
You can also input your own


514
00:15:40,316 --> 00:15:42,436
custom location by putting in


515
00:15:42,646 --> 00:15:43,976
the longitude and the latitude.


516
00:15:52,596 --> 00:15:53,706
If you want to see what your app


517
00:15:53,706 --> 00:15:54,876
will look like when a call is


518
00:15:54,876 --> 00:15:56,746
received, you can use the Toggle


519
00:15:56,746 --> 00:15:59,766
In-Call Status, or you can use


520
00:15:59,766 --> 00:16:01,656
the keyboard shortcut Command-Y.


521
00:16:06,076 --> 00:16:07,986
External displays can be used


522
00:16:07,986 --> 00:16:09,406
for a variety of content.


523
00:16:09,526 --> 00:16:11,056
In this example, what we're


524
00:16:11,056 --> 00:16:12,816
doing is we're playing some


525
00:16:12,816 --> 00:16:14,856
video out of Safari, and we're


526
00:16:14,856 --> 00:16:16,146
selecting a couple of different


527
00:16:16,146 --> 00:16:17,366
display resolutions.


528
00:16:24,056 --> 00:16:25,526
Dark mode is also available on


529
00:16:25,526 --> 00:16:26,146
the Simulator.


530
00:16:26,516 --> 00:16:27,566
You'll find that under the


531
00:16:27,566 --> 00:16:28,456
Developer menu.


532
00:16:28,606 --> 00:16:30,206
Just go under Settings, toggle


533
00:16:30,206 --> 00:16:31,696
down to Developer, and you can


534
00:16:31,696 --> 00:16:33,456
click on Dark Appearance.


535
00:16:40,536 --> 00:16:41,386
You can also change the


536
00:16:41,386 --> 00:16:43,006
wallpaper in your Sim if you


537
00:16:43,316 --> 00:16:43,836
want to.


538
00:16:43,836 --> 00:16:45,316
You can just drag a photo into


539
00:16:45,316 --> 00:16:46,416
your Photos app.


540
00:16:46,416 --> 00:16:47,306
Then click on the photo.


541
00:16:47,306 --> 00:16:49,206
Use the Share Sheet, and that'll


542
00:16:49,206 --> 00:16:50,336
bring it up just like it does on


543
00:16:50,336 --> 00:16:51,226
the iOS device.


544
00:16:51,226 --> 00:16:53,186
Select it as the wallpaper, and


545
00:16:53,186 --> 00:16:55,586
the Simulator will also use this


546
00:16:55,586 --> 00:16:56,816
as a wallpaper for your


547
00:16:56,816 --> 00:16:58,216
background, for the lock screen,


548
00:16:59,166 --> 00:17:00,446
and now you have a new


549
00:17:00,446 --> 00:17:01,000
background.


550
00:17:03,866 --> 00:17:05,526
Dictation also works in the Sim.


551
00:17:05,945 --> 00:17:06,746
So that's found under the


552
00:17:06,746 --> 00:17:07,425
Settings app.


553
00:17:08,396 --> 00:17:09,685
You'll go under the keyboard,


554
00:17:10,165 --> 00:17:11,826
and there is an Enable


555
00:17:11,826 --> 00:17:12,486
Dictation.


556
00:17:13,726 --> 00:17:14,996
So once you have that toggled


557
00:17:14,996 --> 00:17:17,486
on, you just bring up an app


558
00:17:17,486 --> 00:17:19,036
that accepts keyboard input.


559
00:17:19,915 --> 00:17:21,246
Use Command-K to bring up the


560
00:17:21,286 --> 00:17:22,906
software keyboard, and then


561
00:17:22,906 --> 00:17:24,156
you'll see the microphone down


562
00:17:24,156 --> 00:17:25,086
there, and you just start


563
00:17:25,086 --> 00:17:25,596
dictating.


564
00:17:31,456 --> 00:17:33,036
Input language can also be


565
00:17:33,036 --> 00:17:34,336
changed if you didn't know that.


566
00:17:34,556 --> 00:17:36,506
So you can go into the keyboard,


567
00:17:36,676 --> 00:17:38,586
select what input language you


568
00:17:38,586 --> 00:17:38,956
would like.


569
00:17:39,936 --> 00:17:41,196
There's a variety of languages


570
00:17:41,196 --> 00:17:42,206
in there available.


571
00:17:42,776 --> 00:17:44,856
And then again, you're just


572
00:17:44,856 --> 00:17:45,966
going to bring up the software


573
00:17:45,966 --> 00:17:46,526
keyboard.


574
00:17:46,526 --> 00:17:48,406
And you're going to click on the


575
00:17:48,406 --> 00:17:49,816
globe just like you do on your


576
00:17:49,816 --> 00:17:51,000
iOS device.


577
00:17:53,616 --> 00:17:56,056
And speaking of keyboards, the


578
00:17:56,056 --> 00:17:57,856
new QuickPath is also supported


579
00:17:57,856 --> 00:17:58,526
in the Simulator.


580
00:17:58,716 --> 00:18:00,846
Just open up the keyboard, start


581
00:18:01,756 --> 00:18:02,976
your path, and there you go.


582
00:18:09,586 --> 00:18:11,006
You can find more information


583
00:18:11,006 --> 00:18:12,916
also by using the Simulator Help


584
00:18:12,916 --> 00:18:13,316
menu.


585
00:18:14,756 --> 00:18:16,676
Type in what you need, and also


586
00:18:16,676 --> 00:18:18,216
the Search feature will just


587
00:18:18,246 --> 00:18:19,376
point you right where you need


588
00:18:20,136 --> 00:18:20,816
to go.


589
00:18:20,996 --> 00:18:22,216
Well, my time is just about up,


590
00:18:22,216 --> 00:18:23,796
so I hope you learned at least


591
00:18:23,796 --> 00:18:24,916
one thing you didn't know before


592
00:18:24,916 --> 00:18:25,796
about the Simulator.


593
00:18:26,496 --> 00:18:27,526
Now I'm going to turn it over to


594
00:18:27,526 --> 00:18:28,536
Russ who's going to go over


595
00:18:28,536 --> 00:18:29,686
running the Simulator through


596
00:18:29,686 --> 00:18:30,366
the command line.


597
00:18:30,566 --> 00:18:30,866
Thank you.


598
00:18:31,516 --> 00:18:34,746
[ Applause ]


599
00:18:35,246 --> 00:18:35,956
>> Thank you, Tracy.


600
00:18:37,236 --> 00:18:39,836
So let's talk a little bit about


601
00:18:39,836 --> 00:18:42,736
Simulator from the command line.


602
00:18:43,966 --> 00:18:46,026
If I can leave you with one


603
00:18:46,026 --> 00:18:49,246
thing today, it'd be xcrun sim


604
00:18:49,246 --> 00:18:51,186
control or simctl.


605
00:18:52,206 --> 00:18:54,116
But if I could leave you with


606
00:18:54,116 --> 00:18:55,946
two things today, it would be


607
00:18:55,946 --> 00:18:58,236
xcrun simctl help.


608
00:18:59,726 --> 00:19:01,956
Sim control has extensive help.


609
00:19:02,556 --> 00:19:04,206
If you run it without a command,


610
00:19:04,416 --> 00:19:05,436
it will tell you all of the


611
00:19:05,436 --> 00:19:06,526
commands that are available.


612
00:19:07,036 --> 00:19:08,596
If you run help and then the


613
00:19:08,596 --> 00:19:10,476
command name, it will give you a


614
00:19:10,476 --> 00:19:11,806
lot more detail about that


615
00:19:11,806 --> 00:19:12,696
specific command.


616
00:19:14,326 --> 00:19:16,366
So I'm going to cover a few


617
00:19:16,366 --> 00:19:17,706
commands that may be useful to


618
00:19:17,706 --> 00:19:20,126
you and then talk briefly about


619
00:19:20,126 --> 00:19:21,526
a few others, and then we'll do


620
00:19:21,526 --> 00:19:22,146
a little demo.


621
00:19:22,706 --> 00:19:25,546
So the first command, the most


622
00:19:25,816 --> 00:19:27,446
basic command, is the list


623
00:19:28,196 --> 00:19:28,496
command.


624
00:19:28,686 --> 00:19:30,636
This will show you the device


625
00:19:30,706 --> 00:19:32,096
types, runtimes, devices that


626
00:19:32,096 --> 00:19:32,556
you have.


627
00:19:32,946 --> 00:19:34,156
I've shortened this list to fit


628
00:19:34,156 --> 00:19:34,706
on a slide.


629
00:19:34,706 --> 00:19:35,976
You'll probably see quite a few


630
00:19:35,976 --> 00:19:37,006
more on your own machine.


631
00:19:37,706 --> 00:19:40,486
We can see here that we have the


632
00:19:40,486 --> 00:19:42,716
device types, both their short


633
00:19:42,716 --> 00:19:44,826
names and their identifiers, the


634
00:19:44,826 --> 00:19:46,616
runtimes, short names and


635
00:19:46,616 --> 00:19:48,816
identifiers, my device, its


636
00:19:49,606 --> 00:19:51,036
identifier and then the current


637
00:19:51,076 --> 00:19:52,406
state, which is Shutdown.


638
00:19:53,096 --> 00:19:55,696
Most of the commands that


639
00:19:55,696 --> 00:19:57,506
accept, for example, a device


640
00:19:57,576 --> 00:19:58,906
type or a runtime will accept


641
00:19:58,906 --> 00:19:59,916
the name, the short name.


642
00:20:00,266 --> 00:20:02,256
It's totally fine to use that


643
00:20:02,256 --> 00:20:02,856
when you're typing at the


644
00:20:02,856 --> 00:20:04,306
terminal, save you a few


645
00:20:04,306 --> 00:20:04,906
keystrokes.


646
00:20:05,386 --> 00:20:06,696
But I do recommend for


647
00:20:06,696 --> 00:20:08,446
automation and scripting that


648
00:20:08,446 --> 00:20:10,156
you go with the full identifier


649
00:20:10,536 --> 00:20:12,026
just to be specific.


650
00:20:13,386 --> 00:20:15,466
The list command accepts a


651
00:20:15,466 --> 00:20:16,636
couple of different categories,


652
00:20:17,216 --> 00:20:18,656
one of which is devices.


653
00:20:19,056 --> 00:20:21,166
So in this case, I'm not looking


654
00:20:21,166 --> 00:20:23,966
for the runtimes or the devices


655
00:20:23,966 --> 00:20:24,286
types.


656
00:20:24,286 --> 00:20:25,216
I just want the devices.


657
00:20:25,646 --> 00:20:27,936
I can specify that, and I can


658
00:20:27,936 --> 00:20:29,586
give a search string as well.


659
00:20:30,616 --> 00:20:31,906
So in this case, I'm just


660
00:20:32,216 --> 00:20:35,286
looking at my iPhone X devices.


661
00:20:35,636 --> 00:20:37,756
So list command also has a json


662
00:20:37,756 --> 00:20:38,176
flag.


663
00:20:38,446 --> 00:20:39,456
This will output a


664
00:20:39,456 --> 00:20:41,136
machine-readable json file that


665
00:20:41,136 --> 00:20:42,576
you can use for automation


666
00:20:42,576 --> 00:20:43,000
purposes.


667
00:20:47,236 --> 00:20:48,946
The next command I want to talk


668
00:20:48,946 --> 00:20:50,226
about is create command.


669
00:20:50,496 --> 00:20:52,936
Some of you may have heard we


670
00:20:52,936 --> 00:20:53,996
have standalone Watch app


671
00:20:53,996 --> 00:20:54,766
support this year.


672
00:20:54,766 --> 00:20:56,446
So I think I would like a


673
00:20:56,446 --> 00:20:57,926
standalone Watch simulator that


674
00:20:57,986 --> 00:20:59,136
I can deploy to.


675
00:20:59,566 --> 00:21:01,176
So I'm going to call this Test


676
00:21:01,246 --> 00:21:04,436
Watch, and I'm going to specify


677
00:21:04,766 --> 00:21:05,906
the device that I would like, a


678
00:21:05,906 --> 00:21:07,556
Series 4 - 44mm.


679
00:21:08,306 --> 00:21:10,096
And I would like that to be


680
00:21:10,096 --> 00:21:11,386
running watchOS 6.0.


681
00:21:12,576 --> 00:21:14,866
The output will be the


682
00:21:14,866 --> 00:21:17,776
identifier of the device.


683
00:21:17,776 --> 00:21:19,476
This is so I can capture that in


684
00:21:19,476 --> 00:21:20,746
an environment variable or use


685
00:21:20,746 --> 00:21:21,646
it for scripting purposes.


686
00:21:21,646 --> 00:21:24,926
In this little example, I set


687
00:21:24,926 --> 00:21:26,736
NEW DEVICE to that value, and


688
00:21:26,736 --> 00:21:28,656
then, look the bot echoed the


689
00:21:29,166 --> 00:21:30,836
identifier, the device that was


690
00:21:30,876 --> 00:21:31,276
created.


691
00:21:32,056 --> 00:21:35,546
Most Sim control commands follow


692
00:21:35,546 --> 00:21:36,516
the UNIX convention.


693
00:21:36,926 --> 00:21:39,446
On success, they exit with zero.


694
00:21:39,446 --> 00:21:40,766
On a failure, they exit with a


695
00:21:40,766 --> 00:21:41,696
non-zero code.


696
00:21:42,176 --> 00:21:44,366
Errors are printed to standard


697
00:21:44,366 --> 00:21:46,376
error, and then actual output


698
00:21:46,376 --> 00:21:48,196
such as a device identifier or


699
00:21:48,196 --> 00:21:50,256
the json is output to standard


700
00:21:51,076 --> 00:21:51,146
out.


701
00:21:53,096 --> 00:21:55,006
The next command I want to talk


702
00:21:55,006 --> 00:21:56,916
about is the spawn command.


703
00:21:57,466 --> 00:21:59,966
The spawn command will pause


704
00:21:59,966 --> 00:22:02,786
xspawn a process inside the


705
00:22:02,786 --> 00:22:03,816
simulated environment.


706
00:22:04,596 --> 00:22:06,556
And you might think, "What use


707
00:22:06,556 --> 00:22:07,246
is that?"


708
00:22:07,636 --> 00:22:08,706
Well, we ship a couple of


709
00:22:08,706 --> 00:22:10,606
utilities in the Simulator that


710
00:22:10,606 --> 00:22:12,000
might be useful to you.


711
00:22:13,296 --> 00:22:15,066
In this case, the default


712
00:22:15,066 --> 00:22:15,476
utility.


713
00:22:15,476 --> 00:22:16,896
So I'm going to specify the


714
00:22:16,896 --> 00:22:18,926
device that I want to target.


715
00:22:18,926 --> 00:22:19,726
In this case, I'm going to use


716
00:22:19,726 --> 00:22:21,726
the alias booted, because I have


717
00:22:21,726 --> 00:22:23,376
one booted simulator, so I don't


718
00:22:23,376 --> 00:22:24,336
need to actually specify which


719
00:22:24,336 --> 00:22:25,726
one it is.


720
00:22:25,726 --> 00:22:27,116
And I'm going to say defaults


721
00:22:27,116 --> 00:22:29,086
write, the bundle ID of my


722
00:22:29,086 --> 00:22:29,806
application.


723
00:22:30,286 --> 00:22:31,906
I want to set the ResetDatabase


724
00:22:31,946 --> 00:22:33,226
key to YES.


725
00:22:34,146 --> 00:22:35,796
So this can be a handy way to


726
00:22:35,796 --> 00:22:36,966
change the user defaults for


727
00:22:36,966 --> 00:22:38,696
your application before it's


728
00:22:38,696 --> 00:22:39,026
running.


729
00:22:39,586 --> 00:22:42,476
I can also run the log stream


730
00:22:42,476 --> 00:22:42,986
utility.


731
00:22:42,986 --> 00:22:44,696
If you haven't seen this before


732
00:22:44,696 --> 00:22:46,706
or haven't run this on your Mac,


733
00:22:46,706 --> 00:22:48,076
you can pass a predicate, and


734
00:22:48,076 --> 00:22:49,266
you can stream the log output.


735
00:22:49,836 --> 00:22:50,816
Well, you can do the same thing


736
00:22:50,816 --> 00:22:51,416
with the Simulator.


737
00:22:51,416 --> 00:22:54,106
In this case, I'm going to say


738
00:22:54,106 --> 00:22:55,036
that the predicate is


739
00:22:55,256 --> 00:22:57,326
senderImagePath CONTAINS


740
00:22:57,436 --> 00:22:59,716
nsurlsessiond, because I want to


741
00:22:59,716 --> 00:23:01,016
debug something that's going


742
00:23:01,016 --> 00:23:02,276
wrong with my URL sessions.


743
00:23:02,836 --> 00:23:06,516
And then I can see the log


744
00:23:06,516 --> 00:23:07,236
stream output.


745
00:23:07,806 --> 00:23:09,816
You may notice sim control has


746
00:23:09,816 --> 00:23:10,986
detected that I'm using an


747
00:23:10,986 --> 00:23:12,266
interactive terminal that


748
00:23:12,266 --> 00:23:12,996
supports color.


749
00:23:13,426 --> 00:23:14,466
It's passed that information


750
00:23:14,466 --> 00:23:15,866
through, so log stream is giving


751
00:23:15,866 --> 00:23:18,076
me some nice pretty colorized


752
00:23:18,076 --> 00:23:18,626
output.


753
00:23:19,066 --> 00:23:20,136
And here I can see my


754
00:23:20,136 --> 00:23:21,276
dataTaskWithRequest


755
00:23:21,496 --> 00:23:23,196
allowsCellularAccess is set to


756
00:23:23,196 --> 00:23:23,636
1.


757
00:23:23,636 --> 00:23:25,096
That's what I expected, so I'm


758
00:23:25,766 --> 00:23:25,896
happy.


759
00:23:27,976 --> 00:23:30,596
Speaking of logs, the next


760
00:23:30,596 --> 00:23:32,256
command I want to talk to you


761
00:23:32,256 --> 00:23:34,426
about is diagnose.


762
00:23:34,976 --> 00:23:37,226
This is an incredibly useful


763
00:23:37,226 --> 00:23:37,786
command.


764
00:23:38,546 --> 00:23:39,836
The diagnose command will go


765
00:23:39,836 --> 00:23:41,616
through and collect not just


766
00:23:41,616 --> 00:23:43,196
logs on disk, but ephemeral


767
00:23:43,196 --> 00:23:45,366
logging and dump system state


768
00:23:45,716 --> 00:23:46,806
that can be useful in tracking


769
00:23:46,806 --> 00:23:47,586
down a problem.


770
00:23:48,886 --> 00:23:50,576
This a great thing to run in


771
00:23:50,576 --> 00:23:52,256
automated systems if you have a


772
00:23:52,256 --> 00:23:54,286
test failure or some kind of


773
00:23:54,286 --> 00:23:56,246
issue immediately capture


774
00:23:56,246 --> 00:23:58,506
diagnose, control diagnose.


775
00:23:59,196 --> 00:24:00,856
This is also great if you're


776
00:24:00,856 --> 00:24:01,686
filing bugs.


777
00:24:02,616 --> 00:24:05,226
So in an automated scenario, I'm


778
00:24:05,226 --> 00:24:07,216
going to pass the -l flag to


779
00:24:07,216 --> 00:24:08,566
skip the privacy warning.


780
00:24:08,566 --> 00:24:09,796
But I do recommend that you read


781
00:24:09,796 --> 00:24:11,906
that before you use this command


782
00:24:12,316 --> 00:24:13,376
and also check out Apple's


783
00:24:13,376 --> 00:24:14,136
privacy policy.


784
00:24:14,136 --> 00:24:15,226
This will tell you the types of


785
00:24:15,226 --> 00:24:16,226
information that this will


786
00:24:16,226 --> 00:24:17,606
collect, could include account


787
00:24:17,606 --> 00:24:19,246
names and things like that.


788
00:24:20,136 --> 00:24:21,966
The diagnose can run.


789
00:24:21,966 --> 00:24:23,136
It'll tell me where it wrote the


790
00:24:23,136 --> 00:24:23,786
file to.


791
00:24:23,866 --> 00:24:26,146
If I'm using this at my desk, I


792
00:24:26,146 --> 00:24:27,236
would also get a Finder window


793
00:24:27,236 --> 00:24:29,176
that pops up, that shows me the


794
00:24:29,176 --> 00:24:29,916
file it produced.


795
00:24:31,046 --> 00:24:32,566
So, please, if you're going to


796
00:24:32,566 --> 00:24:33,666
send in feedback through the new


797
00:24:33,666 --> 00:24:35,846
Feedback Assistant with issues


798
00:24:35,846 --> 00:24:37,596
occurring the Simulator, attach


799
00:24:37,596 --> 00:24:38,916
a sim control diagnose.


800
00:24:39,416 --> 00:24:41,956
That makes it much easier to


801
00:24:41,956 --> 00:24:42,976
figure out what went wrong.


802
00:24:43,236 --> 00:24:44,816
And I do recommend you use it in


803
00:24:44,816 --> 00:24:46,136
your own workflows if you're


804
00:24:46,136 --> 00:24:47,946
going to send a bug to-- For


805
00:24:47,946 --> 00:24:48,606
example, if you're working in


806
00:24:48,606 --> 00:24:49,576
QA, you're going to send a bug


807
00:24:49,576 --> 00:24:50,156
to the engineer.


808
00:24:50,156 --> 00:24:51,296
Hey, the app-- something went


809
00:24:51,296 --> 00:24:51,686
wrong.


810
00:24:52,426 --> 00:24:53,426
Attach a diagnose.


811
00:24:53,756 --> 00:24:55,006
That'll include all the log


812
00:24:55,006 --> 00:24:56,196
output from your application.


813
00:24:56,936 --> 00:24:59,166
The next command that I want to


814
00:24:59,166 --> 00:25:00,166
tell you about is launch


815
00:25:00,206 --> 00:25:00,686
command.


816
00:25:01,976 --> 00:25:03,336
Launch command launches an


817
00:25:03,336 --> 00:25:04,076
application.


818
00:25:05,256 --> 00:25:07,476
You might ask, "Well, what is


819
00:25:07,476 --> 00:25:08,516
difference between that and


820
00:25:08,516 --> 00:25:09,066
spawn?"


821
00:25:09,506 --> 00:25:11,686
Well, launch politely asks the


822
00:25:11,686 --> 00:25:13,266
system, "Would you please start


823
00:25:13,266 --> 00:25:14,666
the application with this bundle


824
00:25:14,666 --> 00:25:14,756
ID?"


825
00:25:15,526 --> 00:25:16,936
This is equivalent to tapping on


826
00:25:16,936 --> 00:25:18,666
the icon on the Home screen.


827
00:25:19,506 --> 00:25:20,656
And in fact, this is the only


828
00:25:20,656 --> 00:25:22,206
way a process can display


829
00:25:22,206 --> 00:25:24,116
information on the screen on


830
00:25:24,286 --> 00:25:27,076
iOS, watchOS or tvOS.


831
00:25:27,076 --> 00:25:28,096
So it's incredibly important.


832
00:25:28,096 --> 00:25:29,086
So if you actually want to


833
00:25:29,086 --> 00:25:30,646
launch an installed application,


834
00:25:31,026 --> 00:25:32,186
you'd need to use the launch


835
00:25:32,186 --> 00:25:32,636
command.


836
00:25:33,796 --> 00:25:36,076
So I'm going to specify again


837
00:25:36,076 --> 00:25:37,736
the booted alias, because I only


838
00:25:37,736 --> 00:25:38,636
have one simulator that's


839
00:25:38,676 --> 00:25:39,026
booted.


840
00:25:39,576 --> 00:25:41,556
I'm going to launch my


841
00:25:41,556 --> 00:25:43,426
com.apple.example application,


842
00:25:44,146 --> 00:25:45,086
and I'm going to pass some


843
00:25:45,086 --> 00:25:45,716
arguments.


844
00:25:46,166 --> 00:25:47,886
If you haven't seen this before,


845
00:25:48,126 --> 00:25:49,326
user defaults allows you to


846
00:25:49,326 --> 00:25:50,716
override defaults that you've


847
00:25:50,716 --> 00:25:52,386
set as arguments from the


848
00:25:52,386 --> 00:25:52,976
command line.


849
00:25:53,856 --> 00:25:55,326
Prefix the key with a single


850
00:25:55,326 --> 00:25:57,626
dash, the key name and then


851
00:25:57,626 --> 00:25:58,586
specify the value.


852
00:25:59,016 --> 00:26:00,486
And for that specific launch of


853
00:26:00,486 --> 00:26:01,966
my application, the


854
00:26:01,966 --> 00:26:03,986
-MyDefaultKey will be set to YES


855
00:26:04,106 --> 00:26:05,536
regardless of what's stored on


856
00:26:05,536 --> 00:26:05,836
disk.


857
00:26:06,706 --> 00:26:07,936
The launch can do something else


858
00:26:07,936 --> 00:26:08,986
very interesting for me.


859
00:26:09,726 --> 00:26:12,206
If I pass the -- console-pty


860
00:26:12,286 --> 00:26:15,896
flag, launch will connect my


861
00:26:15,896 --> 00:26:17,356
application's standard input,


862
00:26:17,356 --> 00:26:19,896
output and standard error to the


863
00:26:19,896 --> 00:26:21,136
terminal I'm working with right


864
00:26:21,136 --> 00:26:21,436
now.


865
00:26:22,566 --> 00:26:23,396
So when I launch this


866
00:26:23,396 --> 00:26:25,776
application, I see its standard


867
00:26:25,776 --> 00:26:27,226
output right there in my


868
00:26:27,226 --> 00:26:27,626
terminal.


869
00:26:28,386 --> 00:26:30,306
And more than that, I can hook


870
00:26:30,306 --> 00:26:31,706
up debugging facilities.


871
00:26:32,216 --> 00:26:34,406
In this example, I press Enter,


872
00:26:34,846 --> 00:26:35,766
and it's going to dump some


873
00:26:35,766 --> 00:26:36,566
debugging state.


874
00:26:36,956 --> 00:26:39,216
So in Terminal, I can press


875
00:26:39,216 --> 00:26:41,246
Enter, and I get that debugging


876
00:26:41,246 --> 00:26:42,046
state printed from the


877
00:26:42,046 --> 00:26:42,726
application.


878
00:26:43,346 --> 00:26:44,726
This can be a real useful tool


879
00:26:44,726 --> 00:26:46,106
when you're debugging.


880
00:26:47,136 --> 00:26:48,316
The other thing you might notice


881
00:26:48,316 --> 00:26:50,076
is I press Control-C, which


882
00:26:50,076 --> 00:26:51,626
sends an interrupt signal.


883
00:26:52,426 --> 00:26:54,846
Sim control detects that, grabs


884
00:26:54,846 --> 00:26:56,126
the signal and passes it through


885
00:26:56,126 --> 00:26:57,006
to the application.


886
00:26:57,616 --> 00:27:00,216
That applies not just to signals


887
00:27:00,216 --> 00:27:01,786
like interrupt, but user


888
00:27:01,786 --> 00:27:04,026
signals: user1, user2.


889
00:27:04,026 --> 00:27:05,556
Those are other ways you can set


890
00:27:05,556 --> 00:27:07,096
up your application to include


891
00:27:07,526 --> 00:27:08,756
debugging information.


892
00:27:09,296 --> 00:27:12,326
So there's a couple more


893
00:27:12,326 --> 00:27:15,536
commands that I don't have time


894
00:27:15,536 --> 00:27:16,546
to go into, but I'm just going


895
00:27:16,546 --> 00:27:18,556
to briefly give you an overview.


896
00:27:19,496 --> 00:27:21,946
Boot as you might expect boots a


897
00:27:21,946 --> 00:27:22,456
device.


898
00:27:23,536 --> 00:27:26,396
Shutdown also pretty obvious; it


899
00:27:26,396 --> 00:27:27,316
shuts down the device.


900
00:27:27,916 --> 00:27:29,426
But shutdown accepts a special


901
00:27:29,426 --> 00:27:29,956
alias.


902
00:27:30,526 --> 00:27:32,126
The all alias-- That will just


903
00:27:32,126 --> 00:27:33,036
shut down all running


904
00:27:33,036 --> 00:27:33,586
simulators.


905
00:27:34,936 --> 00:27:36,366
Delete, again-- as you might


906
00:27:36,366 --> 00:27:37,926
expect-- it deletes a device.


907
00:27:38,626 --> 00:27:40,496
But there's another convenient


908
00:27:40,496 --> 00:27:41,536
alias that it accepts--


909
00:27:42,286 --> 00:27:43,096
unavailable.


910
00:27:43,846 --> 00:27:45,116
That will go through and find


911
00:27:45,116 --> 00:27:47,176
all of the simulators that use a


912
00:27:47,176 --> 00:27:49,006
runtime that's not available to


913
00:27:49,006 --> 00:27:49,676
you anymore.


914
00:27:50,066 --> 00:27:51,136
Maybe it's an older version of


915
00:27:51,136 --> 00:27:52,856
Xcode that you've upgraded or


916
00:27:52,856 --> 00:27:53,926
it's a downloaded Simulator


917
00:27:53,926 --> 00:27:55,106
runtime-- like Tracy showed


918
00:27:55,106 --> 00:27:56,156
you-- that you've deleted.


919
00:27:56,606 --> 00:27:57,646
That will go through and clean


920
00:27:57,646 --> 00:27:58,936
all these up and recover that


921
00:27:58,936 --> 00:28:00,386
disk space.


922
00:28:01,896 --> 00:28:03,456
The next one, pair.


923
00:28:03,966 --> 00:28:05,636
There's pair and also an


924
00:28:05,636 --> 00:28:07,126
associated unpair and pair


925
00:28:07,126 --> 00:28:07,576
activate.


926
00:28:07,636 --> 00:28:08,856
You can set up watch phone


927
00:28:08,856 --> 00:28:11,466
pairings from the command line.


928
00:28:11,466 --> 00:28:12,666
Addmedia-- that's similar to


929
00:28:12,666 --> 00:28:14,606
what Tracy showed you earlier


930
00:28:14,956 --> 00:28:16,516
dragging, dropping photo and


931
00:28:16,516 --> 00:28:17,656
media into the Simulator.


932
00:28:17,766 --> 00:28:19,046
You can script that as well.


933
00:28:19,546 --> 00:28:22,006
Get app container is an


934
00:28:22,006 --> 00:28:22,856
interesting one.


935
00:28:22,996 --> 00:28:24,776
If something's going wrong with


936
00:28:24,776 --> 00:28:25,126
your app.


937
00:28:25,176 --> 00:28:27,016
Perhaps it's writing a corrupted


938
00:28:27,066 --> 00:28:28,976
file or it's attempting to load


939
00:28:28,976 --> 00:28:29,746
something, and you know it


940
00:28:29,746 --> 00:28:30,696
should be there, but it's not


941
00:28:30,696 --> 00:28:32,586
there, get app container can


942
00:28:32,586 --> 00:28:34,466
give you the path on disk to


943
00:28:34,466 --> 00:28:35,346
your application's data


944
00:28:35,346 --> 00:28:37,616
container or even to a shared


945
00:28:37,616 --> 00:28:39,226
container that perhaps your app


946
00:28:39,226 --> 00:28:40,396
and your app's extension are


947
00:28:40,396 --> 00:28:40,776
using.


948
00:28:41,196 --> 00:28:43,056
And you can go then examine the


949
00:28:43,056 --> 00:28:44,326
actual content, the filesystem


950
00:28:44,326 --> 00:28:46,286
from Finder or from Terminal and


951
00:28:46,286 --> 00:28:47,126
see what's going wrong.


952
00:28:48,186 --> 00:28:49,886
Install. Again, that's very


953
00:28:49,886 --> 00:28:50,996
similar to what Tracy showed you


954
00:28:50,996 --> 00:28:52,026
with dragging dropping app


955
00:28:52,026 --> 00:28:52,306
bundle.


956
00:28:52,306 --> 00:28:53,536
You can install an application


957
00:28:53,536 --> 00:28:54,256
from the command line.


958
00:28:54,796 --> 00:28:57,296
And then the last one I want to


959
00:28:57,296 --> 00:28:58,676
mention is the io command.


960
00:28:59,086 --> 00:29:00,366
Io itself has several


961
00:29:00,366 --> 00:29:02,486
subcommands, probably the most


962
00:29:02,486 --> 00:29:03,746
important of which is


963
00:29:03,746 --> 00:29:04,336
screenshot.


964
00:29:04,336 --> 00:29:06,026
So that allows you to automate


965
00:29:06,026 --> 00:29:07,566
taking of screenshots in


966
00:29:07,566 --> 00:29:08,046
Simulator.


967
00:29:08,586 --> 00:29:11,196
And then the last command I want


968
00:29:11,196 --> 00:29:12,516
to talk about is the clone


969
00:29:12,516 --> 00:29:13,000
command.


970
00:29:15,186 --> 00:29:18,256
Clone is a very powerful command


971
00:29:18,396 --> 00:29:20,426
that can be used for automation,


972
00:29:20,426 --> 00:29:21,446
for testing, for making


973
00:29:21,446 --> 00:29:22,216
experiments.


974
00:29:23,196 --> 00:29:24,426
Clone allows you to set up a


975
00:29:24,426 --> 00:29:25,806
single simulator exactly how you


976
00:29:25,806 --> 00:29:27,566
want, install your app, set user


977
00:29:27,566 --> 00:29:28,496
defaults, load data.


978
00:29:28,496 --> 00:29:30,546
Then you can shut that simulator


979
00:29:30,546 --> 00:29:32,066
down and then make as many


980
00:29:32,066 --> 00:29:33,136
copies of it as you want.


981
00:29:34,036 --> 00:29:35,486
Then you can run those copies,


982
00:29:36,286 --> 00:29:37,606
perform your experiments and


983
00:29:37,606 --> 00:29:38,596
then throw them away when you're


984
00:29:38,596 --> 00:29:38,896
done.


985
00:29:38,896 --> 00:29:41,466
This can be a great timesaver


986
00:29:41,886 --> 00:29:43,616
and saves a lot of disk space


987
00:29:43,666 --> 00:29:45,666
because clone takes advantage of


988
00:29:45,666 --> 00:29:47,246
APSF file cloning under the


989
00:29:47,976 --> 00:29:48,686
covers.


990
00:29:48,686 --> 00:29:49,536
If your game has a


991
00:29:49,536 --> 00:29:51,216
gigabyte worth of assets and you


992
00:29:51,216 --> 00:29:52,866
want to run multiple tests in


993
00:29:52,866 --> 00:29:54,206
parallel, you can go ahead and


994
00:29:54,206 --> 00:29:55,316
do that without taking up a


995
00:29:55,316 --> 00:29:56,256
bunch of disk space.


996
00:29:56,966 --> 00:29:58,226
So rather than talk more about


997
00:29:58,226 --> 00:30:00,516
that, I'm going to show you with


998
00:30:00,516 --> 00:30:01,306
a demo.


999
00:30:02,796 --> 00:30:03,186
OK.


1000
00:30:03,766 --> 00:30:06,746
So the first thing that I'm


1001
00:30:06,746 --> 00:30:07,956
going to do is I'm going to go


1002
00:30:07,956 --> 00:30:10,236
ahead and start the simulator


1003
00:30:10,236 --> 00:30:12,166
that I'm going to use as my sort


1004
00:30:12,166 --> 00:30:14,506
of baseline for comparison.


1005
00:30:14,976 --> 00:30:16,986
So I'm going to start that


1006
00:30:16,986 --> 00:30:17,466
simulator.


1007
00:30:17,466 --> 00:30:19,636
You can see I have the Simulator


1008
00:30:19,636 --> 00:30:21,266
app open, so it automatically


1009
00:30:21,266 --> 00:30:22,606
attaches to it.


1010
00:30:24,376 --> 00:30:26,516
The next thing I'm going to do


1011
00:30:26,516 --> 00:30:28,466
is install my application.


1012
00:30:28,786 --> 00:30:29,986
I have my application bundle


1013
00:30:29,986 --> 00:30:31,166
here and ready to go.


1014
00:30:31,356 --> 00:30:32,716
So like I showed you earlier,


1015
00:30:32,806 --> 00:30:34,516
I'm going to run install, booted


1016
00:30:35,106 --> 00:30:37,500
in that application.


1017
00:30:38,156 --> 00:30:39,306
Well, see, it appeared on the


1018
00:30:39,306 --> 00:30:40,936
Home screen, and it's now


1019
00:30:40,936 --> 00:30:41,476
installed.


1020
00:30:42,056 --> 00:30:44,486
So the next thing I'm going to


1021
00:30:44,486 --> 00:30:45,406
go ahead and do is shut this


1022
00:30:45,406 --> 00:30:46,266
simulator down.


1023
00:30:46,366 --> 00:30:47,276
We do need to shut it down


1024
00:30:47,276 --> 00:30:48,000
before we can clone it.


1025
00:30:54,166 --> 00:30:56,476
And then once I've shut it down,


1026
00:30:56,826 --> 00:30:59,006
I'm going to go ahead and create


1027
00:30:59,006 --> 00:31:00,296
a clone called clone-1.


1028
00:31:04,406 --> 00:31:06,206
And now I'm going to run this


1029
00:31:06,206 --> 00:31:06,736
command again.


1030
00:31:06,736 --> 00:31:07,426
I'm going to create another


1031
00:31:07,426 --> 00:31:08,586
clone, clone-2.


1032
00:31:13,476 --> 00:31:15,336
Now that I have these two clone


1033
00:31:15,336 --> 00:31:16,496
simulators, I'm going to go


1034
00:31:16,496 --> 00:31:17,526
ahead and ask them to boot.


1035
00:31:22,076 --> 00:31:23,516
And here we can see that both of


1036
00:31:23,516 --> 00:31:25,386
them are starting up.


1037
00:31:25,386 --> 00:31:26,246
They started up much more


1038
00:31:26,246 --> 00:31:27,896
quickly, because I don't have to


1039
00:31:27,896 --> 00:31:30,116
pay the first boot cost.


1040
00:31:30,116 --> 00:31:32,156
I already paid that cost with


1041
00:31:32,156 --> 00:31:33,356
the base simulator when I set it


1042
00:31:33,356 --> 00:31:33,866
up.


1043
00:31:33,866 --> 00:31:34,876
So that can be a great


1044
00:31:34,916 --> 00:31:35,416
timesaver.


1045
00:31:36,876 --> 00:31:39,956
And then here's what I could set


1046
00:31:40,406 --> 00:31:42,966
up things in place for my demos


1047
00:31:42,966 --> 00:31:44,376
or my experiments that I want to


1048
00:31:44,756 --> 00:31:46,636
run, and then I would launch the


1049
00:31:46,636 --> 00:31:47,856
application on both of these


1050
00:31:47,856 --> 00:31:48,496
simulators.


1051
00:31:48,996 --> 00:31:52,226
Now, some of you may actually


1052
00:31:52,226 --> 00:31:53,076
recognize this code.


1053
00:31:53,076 --> 00:31:53,636
This is the Metal


1054
00:31:53,636 --> 00:31:54,706
DeferredLighting demo.


1055
00:31:55,266 --> 00:31:56,086
This is something that we


1056
00:31:56,086 --> 00:31:57,756
weren't able to run in previous


1057
00:31:57,756 --> 00:31:57,966
years.


1058
00:31:57,966 --> 00:31:59,836
This is new to Xcode 11 when


1059
00:32:00,176 --> 00:32:02,166
running on macOS Catalina.


1060
00:32:02,616 --> 00:32:04,936
And to tell you all about Metal


1061
00:32:04,936 --> 00:32:07,306
in the Simulator, I'm going to


1062
00:32:07,306 --> 00:32:08,086
invite Katelyn out.


1063
00:32:08,656 --> 00:32:08,976
Katelyn?


1064
00:32:09,516 --> 00:32:14,966
[ Applause ]


1065
00:32:15,466 --> 00:32:15,946
>> Thank you.


1066
00:32:16,606 --> 00:32:17,836
Thank you, Russ.


1067
00:32:18,156 --> 00:32:18,686
Good morning.


1068
00:32:18,786 --> 00:32:20,376
I'm Katelyn Hicks, and I'm an


1069
00:32:20,376 --> 00:32:21,906
engineer on the GPU Software


1070
00:32:21,906 --> 00:32:22,196
team.


1071
00:32:22,746 --> 00:32:24,156
And today, I'm excited to tell


1072
00:32:24,156 --> 00:32:25,836
you about the new Metal support


1073
00:32:25,836 --> 00:32:26,546
in Simulator.


1074
00:32:27,216 --> 00:32:28,806
So let's dive in to see how to


1075
00:32:28,806 --> 00:32:30,556
get the most out of Metal in


1076
00:32:30,596 --> 00:32:31,066
Simulator.


1077
00:32:32,696 --> 00:32:35,216
While running on macOS Catalina


1078
00:32:35,546 --> 00:32:37,776
and Xcode 11, Simulator now


1079
00:32:37,776 --> 00:32:38,606
supports Metal.


1080
00:32:38,986 --> 00:32:40,546
But what does that mean for your


1081
00:32:40,546 --> 00:32:41,326
application?


1082
00:32:42,016 --> 00:32:43,596
Well, two things.


1083
00:32:44,456 --> 00:32:46,446
Simulator is fully GPU


1084
00:32:46,446 --> 00:32:48,676
accelerated for all


1085
00:32:48,676 --> 00:32:49,326
applications.


1086
00:32:50,026 --> 00:32:52,476
And second, the Metal API is now


1087
00:32:52,476 --> 00:32:54,136
available to use in Simulator.


1088
00:32:54,136 --> 00:32:58,016
So let's take a look at how fast


1089
00:32:58,176 --> 00:32:59,866
Simulator is while running on


1090
00:32:59,866 --> 00:33:02,166
macOS Catalina and Xcode 11.


1091
00:33:02,846 --> 00:33:04,206
We'll quickly go through a few


1092
00:33:04,206 --> 00:33:06,846
applications to see that, across


1093
00:33:06,846 --> 00:33:08,716
the system, animations are much


1094
00:33:08,716 --> 00:33:11,476
smoother, and user experience is


1095
00:33:11,476 --> 00:33:12,386
more responsive.


1096
00:33:12,976 --> 00:33:16,686
This is due to the fact that


1097
00:33:16,686 --> 00:33:18,276
Apple frameworks have migrated


1098
00:33:18,336 --> 00:33:20,146
to Metal renderers and are now


1099
00:33:20,146 --> 00:33:21,836
taking advantage of the GPU.


1100
00:33:22,446 --> 00:33:26,516
So if your application is not


1101
00:33:26,556 --> 00:33:28,426
using Metal, but instead you're


1102
00:33:28,426 --> 00:33:31,126
using an Apple framework for UI


1103
00:33:31,396 --> 00:33:34,036
2D or 3D graphics, you will


1104
00:33:34,036 --> 00:33:35,326
still get the performance


1105
00:33:35,326 --> 00:33:36,866
improvements of GPU


1106
00:33:36,866 --> 00:33:37,666
acceleration.


1107
00:33:38,926 --> 00:33:40,926
There are no changes necessary


1108
00:33:41,016 --> 00:33:42,936
for your application to achieve


1109
00:33:42,936 --> 00:33:45,206
GPU acceleration through Metal.


1110
00:33:45,576 --> 00:33:46,816
This speedup is free.


1111
00:33:47,516 --> 00:33:48,536
Now, I'd like to show you a few


1112
00:33:48,536 --> 00:33:49,116
examples.


1113
00:33:49,116 --> 00:33:53,016
So on the left, we have a device


1114
00:33:53,326 --> 00:33:54,686
that is running on the software


1115
00:33:54,686 --> 00:33:55,136
renderer.


1116
00:33:56,076 --> 00:33:57,276
And on the right, we have the


1117
00:33:57,276 --> 00:33:59,436
newly GPU accelerated simulator.


1118
00:34:00,436 --> 00:34:01,616
In this simple graphics


1119
00:34:01,616 --> 00:34:03,196
workload, we can see the


1120
00:34:03,196 --> 00:34:04,846
improved performance through


1121
00:34:04,846 --> 00:34:06,306
scrolling through this Table


1122
00:34:06,306 --> 00:34:08,096
View that uses UIKit.


1123
00:34:08,556 --> 00:34:13,616
Since the original Simulator, an


1124
00:34:13,786 --> 00:34:15,956
iOS device's resolution has


1125
00:34:15,956 --> 00:34:18,376
increased 17 times, which has


1126
00:34:18,376 --> 00:34:19,786
put extra pressure on the


1127
00:34:19,786 --> 00:34:21,446
underlying software renderer.


1128
00:34:22,446 --> 00:34:23,755
In this SpriteKit Xcode


1129
00:34:23,755 --> 00:34:25,556
template, we see the performance


1130
00:34:25,556 --> 00:34:28,136
dipped down to 15 frames per


1131
00:34:28,136 --> 00:34:29,886
second in the software renderer,


1132
00:34:30,696 --> 00:34:32,856
whereas we're rendering the same


1133
00:34:33,216 --> 00:34:35,696
application in Xcode 11 and


1134
00:34:35,755 --> 00:34:37,156
macOS Catalina, and we see a


1135
00:34:37,156 --> 00:34:39,696
steady 60 frames per second with


1136
00:34:39,735 --> 00:34:41,406
more SpriteKit nodes rendering


1137
00:34:41,505 --> 00:34:44,616
in the scene.


1138
00:34:44,835 --> 00:34:47,306
For more complex 3D scenes like


1139
00:34:47,335 --> 00:34:48,826
this Fox demo that uses


1140
00:34:48,826 --> 00:34:50,876
SceneKit, we see a dramatic


1141
00:34:50,876 --> 00:34:52,646
performance improvement without


1142
00:34:52,646 --> 00:34:54,116
any changes to the Fox


1143
00:34:54,116 --> 00:34:55,275
application source.


1144
00:34:55,815 --> 00:34:58,616
And now it is possible to run


1145
00:34:58,616 --> 00:35:01,116
multiple simulator devices in


1146
00:35:01,326 --> 00:35:02,996
parallel with real-time


1147
00:35:02,996 --> 00:35:03,616
performance.


1148
00:35:04,456 --> 00:35:06,146
In this Badger demo, which also


1149
00:35:06,146 --> 00:35:08,296
uses SceneKit, the geometry and


1150
00:35:08,296 --> 00:35:10,026
animation was previously too


1151
00:35:10,026 --> 00:35:12,366
strenuous for a single software


1152
00:35:12,366 --> 00:35:14,346
rendered GL simulator device,


1153
00:35:14,906 --> 00:35:16,096
let alone two running in


1154
00:35:16,096 --> 00:35:16,566
parallel.


1155
00:35:17,106 --> 00:35:21,426
For those of you that use Metal


1156
00:35:21,426 --> 00:35:23,486
directly, Metal development is


1157
00:35:23,486 --> 00:35:25,166
now possible, and the workload


1158
00:35:25,166 --> 00:35:26,446
is fully accelerated.


1159
00:35:26,856 --> 00:35:28,036
Let's see how your experience


1160
00:35:28,036 --> 00:35:29,696
has changed while running your


1161
00:35:29,696 --> 00:35:31,206
application in Simulator.


1162
00:35:31,826 --> 00:35:33,476
So previously, you may have seen


1163
00:35:33,476 --> 00:35:34,296
a black screen.


1164
00:35:34,756 --> 00:35:36,096
But now when you run your


1165
00:35:36,156 --> 00:35:38,006
application in Simulator, you'll


1166
00:35:38,276 --> 00:35:39,746
be able to run your application


1167
00:35:39,746 --> 00:35:41,456
across all simulated devices.


1168
00:35:42,076 --> 00:35:46,266
Now that you've seen it in


1169
00:35:46,266 --> 00:35:48,056
action, let's dive into more


1170
00:35:48,056 --> 00:35:48,556
details.


1171
00:35:50,136 --> 00:35:51,696
If you've seen our other Metal


1172
00:35:51,696 --> 00:35:53,466
session, you know that this year


1173
00:35:53,466 --> 00:35:54,926
we have revamped our feature


1174
00:35:54,926 --> 00:35:56,986
query API and have introduced


1175
00:35:56,986 --> 00:35:58,536
the Metal GPU Family API.


1176
00:35:59,616 --> 00:36:01,876
The Metal GPU Family API makes


1177
00:36:01,876 --> 00:36:03,566
writing cross platform code


1178
00:36:03,566 --> 00:36:05,676
simpler by abstracting GPU


1179
00:36:05,676 --> 00:36:07,966
capabilities into a few distinct


1180
00:36:07,966 --> 00:36:10,506
tiers, and the three families


1181
00:36:10,546 --> 00:36:12,396
that are relevant to Simulator


1182
00:36:12,606 --> 00:36:15,086
are first common, which includes


1183
00:36:15,136 --> 00:36:16,896
all GPU features that are


1184
00:36:16,896 --> 00:36:18,486
available cross platform.


1185
00:36:19,516 --> 00:36:21,606
And second, macOS, which in


1186
00:36:21,606 --> 00:36:22,676
includes the features that are


1187
00:36:22,676 --> 00:36:25,056
specific to macOS GPU hardware.


1188
00:36:26,356 --> 00:36:28,356
And third, Apple, which includes


1189
00:36:28,356 --> 00:36:30,066
the features that are specific


1190
00:36:30,436 --> 00:36:32,996
to iOS and tvOS GPU hardware.


1191
00:36:33,316 --> 00:36:34,206
So while running your


1192
00:36:34,206 --> 00:36:35,756
application in Simulator, your


1193
00:36:35,756 --> 00:36:37,186
application can use features


1194
00:36:37,186 --> 00:36:39,826
from MTLGPUFamilyApple2, which


1195
00:36:39,826 --> 00:36:40,826
includes features that are


1196
00:36:40,826 --> 00:36:43,206
included in MTLGPUFamilyCommon1


1197
00:36:43,206 --> 00:36:43,656
as well.


1198
00:36:44,966 --> 00:36:46,676
This support is common for all


1199
00:36:46,676 --> 00:36:47,816
Simulator devices.


1200
00:36:49,396 --> 00:36:50,656
So let's take a look how it is


1201
00:36:50,656 --> 00:36:52,106
possible to run your iOS


1202
00:36:52,106 --> 00:36:53,476
application in Simulator.


1203
00:36:54,306 --> 00:36:56,636
Previously, your application


1204
00:36:56,636 --> 00:36:58,256
rendered on an OpenGL ES


1205
00:36:58,346 --> 00:36:59,856
software renderer for all


1206
00:36:59,856 --> 00:37:02,556
applications, and it had no GPU


1207
00:37:02,556 --> 00:37:03,666
hardware acceleration.


1208
00:37:04,176 --> 00:37:06,366
But now in Xcode 11 and macOS


1209
00:37:06,366 --> 00:37:08,516
Catalina, the great news is the


1210
00:37:08,516 --> 00:37:11,006
Metal API is available to use in


1211
00:37:11,056 --> 00:37:11,616
Simulator.


1212
00:37:12,346 --> 00:37:14,466
And all of the Apple frameworks


1213
00:37:14,566 --> 00:37:15,976
are now using Metal as well.


1214
00:37:17,186 --> 00:37:18,676
But not only it is available,


1215
00:37:19,496 --> 00:37:20,706
it's GPU-accelerated.


1216
00:37:21,576 --> 00:37:23,096
So this means that all commands


1217
00:37:23,096 --> 00:37:24,506
that are created by your iOS


1218
00:37:24,506 --> 00:37:27,346
application for UI 2D or 3D


1219
00:37:27,346 --> 00:37:29,306
graphics are all being


1220
00:37:29,306 --> 00:37:31,486
translated from iOS Metal to


1221
00:37:31,486 --> 00:37:32,356
macOS Metal.


1222
00:37:32,636 --> 00:37:34,456
And this translation allows you


1223
00:37:34,456 --> 00:37:35,896
to take advantage of the


1224
00:37:35,896 --> 00:37:37,796
underlying Mac GPU on your


1225
00:37:37,796 --> 00:37:38,196
system.


1226
00:37:39,326 --> 00:37:40,586
But this does come with a few


1227
00:37:40,586 --> 00:37:42,986
caveats and one of them being


1228
00:37:43,226 --> 00:37:44,686
the performance you see may be


1229
00:37:44,686 --> 00:37:45,596
different from the actual


1230
00:37:45,596 --> 00:37:45,966
device.


1231
00:37:47,286 --> 00:37:48,826
So the graphics you see will be


1232
00:37:48,826 --> 00:37:50,296
the performance of your


1233
00:37:50,296 --> 00:37:51,616
underlying Mac GPU.


1234
00:37:52,056 --> 00:37:54,446
And the Simulator device is not


1235
00:37:54,446 --> 00:37:56,336
a true iOS GPU emulator.


1236
00:37:57,356 --> 00:37:59,626
So if you run an iPhone 6s


1237
00:37:59,676 --> 00:38:01,446
simulator on your incredibly


1238
00:38:01,446 --> 00:38:03,586
fast Mac Pro, the performance


1239
00:38:03,586 --> 00:38:05,246
you see will be different from


1240
00:38:05,246 --> 00:38:07,156
running your application on an


1241
00:38:07,156 --> 00:38:08,756
actual success device.


1242
00:38:09,566 --> 00:38:11,636
So as always, make sure to


1243
00:38:11,636 --> 00:38:13,066
profile and optimize your


1244
00:38:13,066 --> 00:38:15,406
application directly on devices


1245
00:38:15,486 --> 00:38:16,236
before shipping your


1246
00:38:16,236 --> 00:38:16,946
application.


1247
00:38:17,476 --> 00:38:19,516
One other thing you need to take


1248
00:38:19,516 --> 00:38:20,896
into mind is the fact that there


1249
00:38:20,896 --> 00:38:22,136
are different storage modes


1250
00:38:22,456 --> 00:38:23,686
across macOS and iOS.


1251
00:38:23,916 --> 00:38:26,716
iOS has support for private,


1252
00:38:27,246 --> 00:38:29,446
shared and memoryless textures,


1253
00:38:30,096 --> 00:38:31,286
whereas Mac has support for


1254
00:38:31,286 --> 00:38:33,016
private and managed textures.


1255
00:38:34,036 --> 00:38:35,916
And while the native macOS


1256
00:38:35,916 --> 00:38:37,766
device does not support shared


1257
00:38:37,766 --> 00:38:39,606
and memoryless textures, they


1258
00:38:39,606 --> 00:38:41,146
are supported in Simulator.


1259
00:38:42,256 --> 00:38:43,636
There are a few other special


1260
00:38:43,636 --> 00:38:45,876
cases with shared storage, but


1261
00:38:45,876 --> 00:38:47,966
first let's revisit how shared


1262
00:38:47,966 --> 00:38:48,766
storage works.


1263
00:38:50,226 --> 00:38:52,456
So when you create an iOS


1264
00:38:52,456 --> 00:38:54,606
texture with Shared Storage


1265
00:38:54,646 --> 00:38:56,446
mode, this means that your


1266
00:38:56,446 --> 00:38:58,276
texture can be modified both on


1267
00:38:58,276 --> 00:39:00,126
the CPU and on the GPU.


1268
00:39:00,736 --> 00:39:02,536
And so if your application


1269
00:39:02,536 --> 00:39:03,766
wanted to initialize this


1270
00:39:03,816 --> 00:39:06,306
texture on the CPU, then bind


1271
00:39:06,306 --> 00:39:08,106
your texture to a render or


1272
00:39:08,146 --> 00:39:09,806
compute encoder to be read on


1273
00:39:09,806 --> 00:39:10,386
the GPU.


1274
00:39:11,106 --> 00:39:12,516
You could directly modify this


1275
00:39:12,516 --> 00:39:15,116
same texture on the GPU and then


1276
00:39:15,116 --> 00:39:16,966
read back those modifications on


1277
00:39:16,966 --> 00:39:19,436
the CPU after the command buffer


1278
00:39:19,436 --> 00:39:19,956
completes.


1279
00:39:20,336 --> 00:39:21,236
And your app does not have to


1280
00:39:21,236 --> 00:39:22,376
worry about any memory


1281
00:39:22,376 --> 00:39:25,276
synchronization as on iOS it's a


1282
00:39:25,426 --> 00:39:26,786
unified memory model.


1283
00:39:29,006 --> 00:39:31,136
And so in Simulator, for


1284
00:39:31,136 --> 00:39:33,756
multisampled, depth stencil and


1285
00:39:33,756 --> 00:39:36,066
linear textures, these texture


1286
00:39:36,066 --> 00:39:38,606
types must be created in private


1287
00:39:38,906 --> 00:39:41,236
storage, whereas on an actual


1288
00:39:41,346 --> 00:39:43,316
iOS device, these types may be


1289
00:39:43,316 --> 00:39:44,226
in shared storage.


1290
00:39:45,226 --> 00:39:46,316
And so your app may need a


1291
00:39:46,316 --> 00:39:48,936
simulator-only path if you need


1292
00:39:49,056 --> 00:39:50,716
CPU access to these textures.


1293
00:39:51,526 --> 00:39:53,616
For most of you, you will


1294
00:39:53,616 --> 00:39:55,226
initialize these texture types


1295
00:39:55,226 --> 00:39:57,056
and use them directly in your


1296
00:39:57,056 --> 00:39:59,016
GPU commands, and so this won't


1297
00:39:59,086 --> 00:39:59,956
affect your application.


1298
00:40:00,086 --> 00:40:02,406
They should already be private


1299
00:40:02,406 --> 00:40:02,976
textures.


1300
00:40:03,686 --> 00:40:05,816
But if you do need CPU access


1301
00:40:06,286 --> 00:40:07,996
for one of these textures, let's


1302
00:40:07,996 --> 00:40:09,286
go through what changes may be


1303
00:40:09,286 --> 00:40:09,836
required.


1304
00:40:10,836 --> 00:40:12,216
So as a reminder, if you create


1305
00:40:12,216 --> 00:40:14,536
a texture in private memory, the


1306
00:40:14,536 --> 00:40:16,506
texture does not have CPU


1307
00:40:16,506 --> 00:40:16,916
access.


1308
00:40:17,806 --> 00:40:19,286
It only can be modified by the


1309
00:40:19,286 --> 00:40:20,926
GPU and read by the GPU.


1310
00:40:21,846 --> 00:40:23,516
So if your app reads or writes


1311
00:40:23,516 --> 00:40:24,896
to the texture on the CPU, you


1312
00:40:25,196 --> 00:40:26,946
need an intermediate shared


1313
00:40:26,946 --> 00:40:28,136
resource to do so.


1314
00:40:29,256 --> 00:40:30,786
So first we can either create a


1315
00:40:30,786 --> 00:40:32,416
shared buffer or a shared


1316
00:40:32,416 --> 00:40:32,896
texture.


1317
00:40:33,856 --> 00:40:35,766
Then in order to copy this


1318
00:40:35,896 --> 00:40:36,916
texture, you create a


1319
00:40:36,916 --> 00:40:38,816
BlitCommandEncoder, and you can


1320
00:40:38,816 --> 00:40:40,736
copy from the shared buffer in


1321
00:40:40,736 --> 00:40:42,266
this case to the private


1322
00:40:42,266 --> 00:40:42,796
texture.


1323
00:40:43,246 --> 00:40:44,576
Or you can copy from the private


1324
00:40:44,576 --> 00:40:46,786
texture to the shared buffer.


1325
00:40:47,726 --> 00:40:48,976
So let's take a look at what


1326
00:40:49,026 --> 00:40:50,306
this looks like in source code.


1327
00:40:51,656 --> 00:40:53,556
So in this code example, we see


1328
00:40:53,856 --> 00:40:55,776
that a depth stencil texture is


1329
00:40:55,776 --> 00:40:56,996
created, and we want to


1330
00:40:56,996 --> 00:40:58,386
initialize it on the CPU.


1331
00:40:58,986 --> 00:41:02,456
So first, we set the storage


1332
00:41:02,516 --> 00:41:04,166
mode to private only in


1333
00:41:04,196 --> 00:41:04,696
Simulator.


1334
00:41:05,406 --> 00:41:06,696
While we're not in a simulated


1335
00:41:06,696 --> 00:41:08,516
environment, we want to still


1336
00:41:08,516 --> 00:41:10,686
use a shared storage mode.


1337
00:41:11,616 --> 00:41:13,346
Then we create the texture with


1338
00:41:13,346 --> 00:41:14,706
the modified textureDescriptor.


1339
00:41:15,236 --> 00:41:18,926
And then while in the simulated


1340
00:41:18,926 --> 00:41:20,446
environment, in order to


1341
00:41:20,446 --> 00:41:22,396
initialize this private texture,


1342
00:41:22,696 --> 00:41:23,896
we will first create a shared


1343
00:41:24,856 --> 00:41:25,366
buffer.


1344
00:41:25,496 --> 00:41:26,986
For this shared buffer, we will


1345
00:41:26,986 --> 00:41:28,686
initialize it on the CPU with


1346
00:41:28,686 --> 00:41:29,836
the data that you'd like to see


1347
00:41:29,836 --> 00:41:30,696
in your private texture.


1348
00:41:31,286 --> 00:41:33,276
And finally, we blit from that


1349
00:41:33,276 --> 00:41:35,196
shared resource to the private


1350
00:41:35,246 --> 00:41:35,646
texture.


1351
00:41:36,746 --> 00:41:38,346
And then in the case that you're


1352
00:41:38,346 --> 00:41:40,506
still running on an actual iOS


1353
00:41:40,546 --> 00:41:42,386
device, we want to do the exact


1354
00:41:42,386 --> 00:41:43,506
same thing you did before and


1355
00:41:43,736 --> 00:41:45,156
initialize that texture on the


1356
00:41:45,156 --> 00:41:47,196
CPU and avoid this unnecessary


1357
00:41:47,196 --> 00:41:47,466
blit.


1358
00:41:49,066 --> 00:41:50,586
From this point forward, the use


1359
00:41:50,586 --> 00:41:52,226
of this texture is the exact


1360
00:41:52,276 --> 00:41:53,746
same, whether you're running on


1361
00:41:53,746 --> 00:41:56,006
an actual iOS device or in the


1362
00:41:56,006 --> 00:41:56,596
Simulator.


1363
00:41:56,906 --> 00:41:58,646
All of your GPU commands can be


1364
00:41:58,646 --> 00:41:59,366
the exact same.


1365
00:42:00,726 --> 00:42:02,406
And so there are a few other


1366
00:42:02,406 --> 00:42:04,376
changes that may be needed for


1367
00:42:04,376 --> 00:42:05,806
your application in Simulator,


1368
00:42:05,806 --> 00:42:06,936
and for that we have full


1369
00:42:06,936 --> 00:42:08,666
documentation for those small


1370
00:42:08,666 --> 00:42:09,116
changes.


1371
00:42:09,386 --> 00:42:11,126
And we also have a sample code


1372
00:42:11,126 --> 00:42:12,566
available for you to download


1373
00:42:12,886 --> 00:42:15,276
and to see example of porting an


1374
00:42:15,276 --> 00:42:16,696
application to Simulator.


1375
00:42:17,296 --> 00:42:19,796
I hope you learned something new


1376
00:42:19,796 --> 00:42:20,916
about Simulator today.


1377
00:42:21,566 --> 00:42:23,046
We first went over that the iOS,


1378
00:42:23,436 --> 00:42:26,146
watchOS and tvOS userspace is


1379
00:42:26,146 --> 00:42:27,876
running on the macOS kernel and


1380
00:42:28,236 --> 00:42:29,886
that the Simulator is pivotal to


1381
00:42:29,886 --> 00:42:31,816
testing your application across


1382
00:42:31,816 --> 00:42:33,306
all devices and runtimes.


1383
00:42:34,356 --> 00:42:36,546
We saw the power of xcrun simctl


1384
00:42:36,946 --> 00:42:38,456
and how you can script all of


1385
00:42:38,456 --> 00:42:40,326
your testing through Simulator.


1386
00:42:41,156 --> 00:42:42,996
And lastly, we saw that the GPU


1387
00:42:42,996 --> 00:42:44,936
acceleration through Metal in


1388
00:42:44,936 --> 00:42:46,426
Simulator is for everyone, and


1389
00:42:46,686 --> 00:42:48,076
it also enables Metal


1390
00:42:48,076 --> 00:42:49,406
development in the Simulator.


1391
00:42:49,406 --> 00:42:51,716
And if you have any other


1392
00:42:51,716 --> 00:42:53,416
questions, please visit the


1393
00:42:53,506 --> 00:42:54,336
session website.


1394
00:42:54,336 --> 00:42:55,856
Thank you, and I hope a great


1395
00:42:55,856 --> 00:42:56,536
rest of your week.


1396
00:42:57,508 --> 00:42:59,508
[ Applause ]

