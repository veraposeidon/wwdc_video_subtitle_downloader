1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:06,016 --> 00:00:07,216
[ Applause ]


3
00:00:07,216 --> 00:00:08,376
>> I am Michael Diu from the


4
00:00:08,376 --> 00:00:09,636
Interactive Haptics Team.


5
00:00:10,096 --> 00:00:11,526
And I am forward to sharing the


6
00:00:11,526 --> 00:00:13,616
many advances in haptics in iOS 13


7
00:00:13,696 --> 00:00:14,836
with you.


8
00:00:15,646 --> 00:00:16,726
Let's take a look at our agenda.


9
00:00:18,756 --> 00:00:20,776
First, we'll find out where we


10
00:00:20,776 --> 00:00:21,976
can use Core Haptics.


11
00:00:22,476 --> 00:00:24,416
How it fits in with other audio


12
00:00:24,466 --> 00:00:25,456
and haptic APIs.


13
00:00:28,056 --> 00:00:29,506
And we'll talk about the two


14
00:00:29,506 --> 00:00:31,336
groups of classes in the API.


15
00:00:31,986 --> 00:00:34,026
And the basic dimensions and


16
00:00:34,026 --> 00:00:36,026
descriptors that we will use to


17
00:00:36,026 --> 00:00:38,236
describe our haptics and audio


18
00:00:38,366 --> 00:00:38,856
content.


19
00:00:40,336 --> 00:00:41,646
We're going to walk through the


20
00:00:41,646 --> 00:00:43,446
basic recipe to start playing


21
00:00:43,446 --> 00:00:43,946
out that content.


22
00:00:46,066 --> 00:00:47,686
And then we're going to move on


23
00:00:47,686 --> 00:00:49,316
to introducing dynamic


24
00:00:49,396 --> 00:00:50,076
parameters.


25
00:00:50,266 --> 00:00:52,466
And dynamic parameters are a way


26
00:00:52,466 --> 00:00:54,146
that you can customize your


27
00:00:54,146 --> 00:00:56,176
haptic patterns at playback time


28
00:00:56,516 --> 00:00:59,336
in response to your user or your


29
00:00:59,336 --> 00:00:59,976
apps behavior.


30
00:01:02,046 --> 00:01:03,966
And we're going to explore a new


31
00:01:03,966 --> 00:01:07,256
way to express, store, and share


32
00:01:07,486 --> 00:01:08,866
your audio haptics content.


33
00:01:09,106 --> 00:01:10,896
A new file format we're calling


34
00:01:10,896 --> 00:01:12,816
the Apple Haptic Audio Pattern,


35
00:01:13,226 --> 00:01:13,676
or AHAP.


36
00:01:15,156 --> 00:01:15,976
So let's get to it.


37
00:01:22,066 --> 00:01:23,686
First, what is Core Haptics?


38
00:01:25,056 --> 00:01:26,286
We can think of it as an


39
00:01:26,286 --> 00:01:28,796
event-based audio and haptic


40
00:01:28,986 --> 00:01:29,736
rendering API.


41
00:01:30,156 --> 00:01:32,796
Or synthesizer for iPhone.


42
00:01:34,516 --> 00:01:36,486
We can continue to use our other


43
00:01:36,486 --> 00:01:38,456
audio and haptics and feedback


44
00:01:38,456 --> 00:01:41,406
API's like AVAudioPlayer and


45
00:01:41,406 --> 00:01:43,526
UIKit's UIFeedbackGenerator in


46
00:01:43,526 --> 00:01:44,976
parallel with Core Haptics.


47
00:01:47,206 --> 00:01:49,776
You might be wondering, "Which


48
00:01:49,776 --> 00:01:52,566
iPhones can I use this on?"


49
00:01:52,566 --> 00:01:54,956
With one, just one API and one


50
00:01:54,956 --> 00:01:56,816
file format, we will be able to


51
00:01:56,956 --> 00:01:59,686
access hundreds of millions of


52
00:01:59,866 --> 00:02:01,436
haptic engine-equipped iPhones


53
00:02:01,746 --> 00:02:03,686
starting from iPhone 8 onward.


54
00:02:04,326 --> 00:02:07,076
And we've taken care that your


55
00:02:07,146 --> 00:02:08,205
haptic patterns will have the


56
00:02:08,286 --> 00:02:10,326
same feel across all of these


57
00:02:10,326 --> 00:02:10,836
products.


58
00:02:11,236 --> 00:02:12,616
So much so that you're going to


59
00:02:12,616 --> 00:02:15,246
be able to prototype and release


60
00:02:15,486 --> 00:02:16,936
just using one product.


61
00:02:19,476 --> 00:02:22,556
And these iPhones aren't


62
00:02:22,556 --> 00:02:24,586
equipped with just any old


63
00:02:24,676 --> 00:02:25,876
commodity actuator.


64
00:02:26,196 --> 00:02:27,846
They all have the Apple-designed


65
00:02:28,026 --> 00:02:28,716
taptic engine.


66
00:02:28,926 --> 00:02:30,566
Which offers you that unique


67
00:02:30,636 --> 00:02:33,996
combination of power, a wide,


68
00:02:33,996 --> 00:02:35,596
expressive range, and an


69
00:02:35,766 --> 00:02:38,296
unmatched precision and control


70
00:02:38,846 --> 00:02:39,496
and subtlety.


71
00:02:41,476 --> 00:02:43,106
Next, I'd like to talk about


72
00:02:43,106 --> 00:02:44,476
those of you who have already


73
00:02:44,476 --> 00:02:46,536
started adopting haptics on


74
00:02:46,616 --> 00:02:48,356
iPhone with UIKit's


75
00:02:48,436 --> 00:02:49,776
feedback-generated API's.


76
00:02:50,716 --> 00:02:55,046
Now Core Haptics is not a


77
00:02:55,046 --> 00:02:56,346
replacement for this API.


78
00:02:58,436 --> 00:03:00,176
In most cases, you want to keep


79
00:03:00,176 --> 00:03:02,026
on using FeedbackGenerator,


80
00:03:02,026 --> 00:03:04,946
especially for UIKit controls


81
00:03:05,216 --> 00:03:06,356
and adding haptics to that.


82
00:03:07,206 --> 00:03:10,116
With that API, you indicate the


83
00:03:10,116 --> 00:03:11,636
design intent for your event.


84
00:03:11,636 --> 00:03:13,606
Whether that's a selection, an


85
00:03:13,606 --> 00:03:15,276
impact, or a notification.


86
00:03:15,626 --> 00:03:17,706
And you let someone else, Apple,


87
00:03:18,056 --> 00:03:19,466
worry about developing a


88
00:03:19,466 --> 00:03:21,606
vocabulary to express that and


89
00:03:21,726 --> 00:03:24,116
mixing the right modalities like


90
00:03:24,116 --> 00:03:26,096
audio haptics animation to


91
00:03:26,096 --> 00:03:27,366
communicate that message.


92
00:03:28,646 --> 00:03:30,096
Now, this API is also being


93
00:03:30,096 --> 00:03:31,526
improved in iOS 13.


94
00:03:31,696 --> 00:03:32,636
So please check out its


95
00:03:32,636 --> 00:03:33,976
documentation for more details.


96
00:03:36,276 --> 00:03:39,506
In contrast, Core Haptics is


97
00:03:39,506 --> 00:03:41,246
good when you want to be your


98
00:03:41,246 --> 00:03:43,476
own sound and haptic designer.


99
00:03:44,366 --> 00:03:46,026
With it, you develop your own


100
00:03:46,026 --> 00:03:46,466
patterns.


101
00:03:47,036 --> 00:03:48,296
And you can have a lot more


102
00:03:48,296 --> 00:03:50,846
control over exactly what time


103
00:03:50,846 --> 00:03:51,556
it gets played.


104
00:03:51,556 --> 00:03:53,076
So you can synchronize with


105
00:03:53,306 --> 00:03:55,716
other API's like an animation


106
00:03:55,716 --> 00:03:56,756
from Core Animation.


107
00:03:57,016 --> 00:03:58,576
Or a sound event from


108
00:03:58,696 --> 00:03:59,636
AVAudioEngine.


109
00:04:00,776 --> 00:04:02,266
You have a much richer set of


110
00:04:02,376 --> 00:04:03,456
playback and modulation


111
00:04:03,456 --> 00:04:03,926
controls.


112
00:04:05,136 --> 00:04:07,506
Now, UIKit is built on top of


113
00:04:07,506 --> 00:04:08,376
Core Haptics.


114
00:04:08,736 --> 00:04:11,616
So both API's share the same


115
00:04:11,616 --> 00:04:12,936
low-latency performance


116
00:04:12,936 --> 00:04:13,756
characteristics.


117
00:04:14,656 --> 00:04:14,956
Now


118
00:04:17,055 --> 00:04:18,106
designing your own haptic


119
00:04:18,136 --> 00:04:20,326
patterns is going to take more


120
00:04:20,326 --> 00:04:20,685
time.


121
00:04:21,016 --> 00:04:22,856
But when it allows you to do


122
00:04:22,856 --> 00:04:23,706
something that you couldn't


123
00:04:23,706 --> 00:04:26,326
otherwise do and when it allows


124
00:04:26,326 --> 00:04:28,646
you to differentiate your app,


125
00:04:29,306 --> 00:04:30,376
then it's worth thinking about.


126
00:04:31,166 --> 00:04:32,806
Now next, I'd like to talk a bit


127
00:04:32,806 --> 00:04:33,886
more about those audio


128
00:04:33,886 --> 00:04:34,596
capabilities.


129
00:04:36,826 --> 00:04:39,366
So Core Haptics is also an Audio


130
00:04:39,366 --> 00:04:39,716
API.


131
00:04:40,246 --> 00:04:42,496
And so that allows you to play


132
00:04:42,736 --> 00:04:45,336
short, synthesized or custom


133
00:04:45,936 --> 00:04:47,666
waveform audio in


134
00:04:47,666 --> 00:04:49,456
synchronization, tight sync with


135
00:04:49,456 --> 00:04:49,936
your haptics.


136
00:04:51,686 --> 00:04:53,256
This type of audio haptic


137
00:04:53,286 --> 00:04:54,996
duality has been crucial to many


138
00:04:54,996 --> 00:04:56,226
of Apple's own haptics


139
00:04:56,226 --> 00:04:56,866
experiences.


140
00:04:57,216 --> 00:04:58,866
Like the haptic home button in


141
00:04:58,936 --> 00:05:02,106
iPhone 7, the haptic crown in


142
00:05:02,186 --> 00:05:04,526
Series 4 Watch, and the


143
00:05:04,526 --> 00:05:06,216
UIDatePicker, those scrolling


144
00:05:06,216 --> 00:05:08,256
wheels that you use to select


145
00:05:08,356 --> 00:05:09,996
dates and times and alarms and


146
00:05:09,996 --> 00:05:10,436
calendars.


147
00:05:11,436 --> 00:05:12,976
And you may not have realized


148
00:05:13,516 --> 00:05:13,656
that.


149
00:05:13,836 --> 00:05:15,086
You may not even have noticed


150
00:05:15,086 --> 00:05:16,076
that there was audio in these


151
00:05:16,076 --> 00:05:16,776
experiences.


152
00:05:17,096 --> 00:05:18,466
But if you were to cover up that


153
00:05:18,706 --> 00:05:20,336
audio once you take it away,


154
00:05:20,596 --> 00:05:21,796
you'll realize that it's an


155
00:05:21,796 --> 00:05:23,776
inseparable an integral part of


156
00:05:23,776 --> 00:05:24,556
that experience.


157
00:05:24,836 --> 00:05:27,626
So now, you can do the same with


158
00:05:27,626 --> 00:05:28,936
Core Haptics in your own apps.


159
00:05:29,296 --> 00:05:30,896
And I want to talk about some


160
00:05:30,896 --> 00:05:32,596
categories of apps, one app -- a


161
00:05:32,826 --> 00:05:34,246
huge category in particular


162
00:05:34,516 --> 00:05:35,326
where you might want to think


163
00:05:35,326 --> 00:05:37,206
about Core Haptics, and that's


164
00:05:37,206 --> 00:05:37,546
games.


165
00:05:39,556 --> 00:05:41,606
So imagine we are at the race


166
00:05:41,606 --> 00:05:41,866
track.


167
00:05:42,136 --> 00:05:43,396
We want to go into turbo mode.


168
00:05:43,836 --> 00:05:44,466
Let's imagine.


169
00:05:45,016 --> 00:05:47,000
[ Engine Sounds ]


170
00:05:49,416 --> 00:05:51,096
When you've got that brute force


171
00:05:51,096 --> 00:05:52,856
message to deliver, think about


172
00:05:52,856 --> 00:05:54,716
using synchronized haptics and


173
00:05:54,716 --> 00:05:56,676
audio in your app to generate


174
00:05:56,676 --> 00:05:58,506
those visceral explosions and


175
00:05:58,506 --> 00:05:58,876
rumbles.


176
00:06:00,576 --> 00:06:02,766
Now another very nice


177
00:06:02,766 --> 00:06:05,336
application is for to simulate


178
00:06:05,336 --> 00:06:07,216
physical contact to make your


179
00:06:07,216 --> 00:06:08,706
applications feel more


180
00:06:08,706 --> 00:06:09,326
realistic.


181
00:06:10,156 --> 00:06:11,186
Think about a tennis game.


182
00:06:12,146 --> 00:06:13,796
You could have audio and haptic


183
00:06:13,796 --> 00:06:16,546
components where the pitch of


184
00:06:16,546 --> 00:06:17,916
your audio, the intensity of


185
00:06:17,916 --> 00:06:19,556
your haptics are proportional to


186
00:06:19,556 --> 00:06:21,466
how fast your swing is or how


187
00:06:21,466 --> 00:06:22,936
centered the ball lands in the


188
00:06:22,936 --> 00:06:23,706
middle of the racket.


189
00:06:24,146 --> 00:06:25,666
And you can even control how


190
00:06:25,666 --> 00:06:27,536
long the strings your racket


191
00:06:27,676 --> 00:06:29,186
will resonate for after the


192
00:06:29,186 --> 00:06:29,546
impact.


193
00:06:31,536 --> 00:06:33,066
So another great area to think


194
00:06:33,066 --> 00:06:35,036
about using Core Haptics is in


195
00:06:35,066 --> 00:06:37,176
augmented reality apps.


196
00:06:38,436 --> 00:06:40,036
And there, if you're working in


197
00:06:40,036 --> 00:06:41,766
this space, you're already


198
00:06:41,766 --> 00:06:43,376
familiar with the benefits of


199
00:06:43,376 --> 00:06:44,886
having high visual fidelity


200
00:06:45,276 --> 00:06:49,006
paired with 3D audio working in


201
00:06:49,006 --> 00:06:49,416
concert.


202
00:06:49,746 --> 00:06:51,766
Now we can reach for that next


203
00:06:51,766 --> 00:06:53,886
level of immersion by


204
00:06:53,886 --> 00:06:55,706
considering how custom haptic


205
00:06:55,706 --> 00:06:58,856
feedback can ground our user


206
00:06:58,856 --> 00:06:59,456
gestures,


207
00:07:01,696 --> 00:07:05,216
or respond to app, device, and


208
00:07:05,216 --> 00:07:06,506
AR object events.


209
00:07:06,816 --> 00:07:08,556
For example, moving your device


210
00:07:08,556 --> 00:07:12,346
around or moving your entire


211
00:07:12,346 --> 00:07:13,096
users around.


212
00:07:16,046 --> 00:07:17,436
As an inspiration this year,


213
00:07:17,436 --> 00:07:19,346
we've enhanced the Swift Shot


214
00:07:19,346 --> 00:07:22,356
sample code by using haptics


215
00:07:22,406 --> 00:07:25,166
that are modulated based on how


216
00:07:25,166 --> 00:07:27,476
fast you pull back the sling.


217
00:07:28,246 --> 00:07:29,676
How fast you pull back your


218
00:07:29,676 --> 00:07:29,766
phone.


219
00:07:29,766 --> 00:07:32,286
You're going to feel the tension


220
00:07:32,416 --> 00:07:34,146
building up as you stretch it


221
00:07:34,176 --> 00:07:34,386
back.


222
00:07:34,616 --> 00:07:36,116
And then a very satisfying thunk


223
00:07:36,506 --> 00:07:37,146
as you release.


224
00:07:38,826 --> 00:07:39,956
I'd like to show you a video of


225
00:07:39,956 --> 00:07:42,346
this and I'm going to use audio


226
00:07:42,346 --> 00:07:44,216
to represent just the haptics


227
00:07:44,256 --> 00:07:45,016
that you're going to feel.


228
00:07:45,606 --> 00:07:46,746
They're going to sound like


229
00:07:46,746 --> 00:07:46,916
this.


230
00:07:47,516 --> 00:07:50,616
[ Low-Pitched Noise ]


231
00:07:51,116 --> 00:07:52,566
Now, we're going to see the


232
00:07:52,566 --> 00:07:53,336
whole thing together.


233
00:07:53,936 --> 00:07:57,156
Visuals and haptics, no regular


234
00:07:57,156 --> 00:07:57,466
audio.


235
00:07:58,516 --> 00:08:02,196
[ Low-Pitched Noise ]


236
00:08:02,696 --> 00:08:04,526
So that was an example of how we


237
00:08:04,526 --> 00:08:08,226
can use haptics, sound, and


238
00:08:08,226 --> 00:08:09,986
visuals all synchronized


239
00:08:09,986 --> 00:08:11,566
together to enhance our AR


240
00:08:11,566 --> 00:08:12,566
experience.


241
00:08:12,866 --> 00:08:13,766
Now these are just a few


242
00:08:13,766 --> 00:08:16,036
categories of apps, games, and


243
00:08:16,036 --> 00:08:17,706
AR that are ripe for creative


244
00:08:17,706 --> 00:08:19,836
explorations, with haptics and


245
00:08:19,836 --> 00:08:20,856
the corresponding sounds.


246
00:08:21,606 --> 00:08:22,636
I'm sure you're going to think


247
00:08:22,636 --> 00:08:23,886
of many, many more.


248
00:08:27,606 --> 00:08:30,186
So now let's get into how we can


249
00:08:30,186 --> 00:08:31,996
start expressing our content


250
00:08:32,476 --> 00:08:32,976
with Core Haptics.


251
00:08:36,416 --> 00:08:37,466
There are just two groups of


252
00:08:37,466 --> 00:08:38,996
classes in Core Haptics.


253
00:08:39,066 --> 00:08:40,866
There's those to represent your


254
00:08:40,866 --> 00:08:41,326
content.


255
00:08:41,796 --> 00:08:43,436
And those to playback that


256
00:08:43,436 --> 00:08:43,816
content.


257
00:08:44,516 --> 00:08:47,496
Let's take a closer look at the


258
00:08:47,496 --> 00:08:49,166
content side first.


259
00:08:49,896 --> 00:08:53,356
The basic indivisible content


260
00:08:53,356 --> 00:08:55,496
elements is in Core Haptics is


261
00:08:55,496 --> 00:08:56,856
called a CHHapticEvent.


262
00:08:57,766 --> 00:09:01,156
Now, each event has a type and a


263
00:09:01,156 --> 00:09:01,576
time.


264
00:09:01,866 --> 00:09:03,866
And optionally, parameters that


265
00:09:03,866 --> 00:09:05,586
will customize its feel.


266
00:09:07,316 --> 00:09:09,386
These events can overlap each


267
00:09:09,386 --> 00:09:10,656
other and when they do, they


268
00:09:10,656 --> 00:09:10,986
mix.


269
00:09:12,496 --> 00:09:15,006
And all events are grouped into


270
00:09:15,436 --> 00:09:15,886
a pattern.


271
00:09:17,216 --> 00:09:18,616
Next, I'd like to talk about


272
00:09:18,916 --> 00:09:20,436
those types of events that we


273
00:09:20,436 --> 00:09:20,846
can have.


274
00:09:22,816 --> 00:09:24,876
Our first type is called the


275
00:09:24,876 --> 00:09:25,766
HapticTransient.


276
00:09:26,516 --> 00:09:28,386
The HapticTransient, I think of


277
00:09:28,386 --> 00:09:29,946
it as a gavel.


278
00:09:29,946 --> 00:09:31,206
It's a striking motion.


279
00:09:31,376 --> 00:09:32,526
It's momentary and


280
00:09:32,526 --> 00:09:33,226
instantaneous.


281
00:09:34,046 --> 00:09:36,096
And then we have two continuous


282
00:09:36,096 --> 00:09:36,416
types.


283
00:09:37,746 --> 00:09:39,556
We have HapticContinuous and


284
00:09:39,556 --> 00:09:40,616
AudioContinuous.


285
00:09:41,016 --> 00:09:42,346
And there I think of, for


286
00:09:42,346 --> 00:09:44,276
example, bowing a stringed


287
00:09:44,276 --> 00:09:44,806
instrument.


288
00:09:45,356 --> 00:09:48,116
It is longer than a transient.


289
00:09:48,396 --> 00:09:49,766
It can be, for example, used as


290
00:09:49,766 --> 00:09:50,866
a background texture.


291
00:09:51,086 --> 00:09:52,576
And you have a much richer set


292
00:09:52,576 --> 00:09:53,876
of knobs that you can use.


293
00:09:53,876 --> 00:09:55,276
For example, to modulate the


294
00:09:55,276 --> 00:09:57,166
resonance of it.


295
00:09:57,466 --> 00:10:00,266
Lastly, we have the AudioCustom


296
00:10:00,266 --> 00:10:00,476
type.


297
00:10:00,886 --> 00:10:02,806
And the AudioCustom, as we -- as


298
00:10:02,806 --> 00:10:03,676
I mentioned earlier.


299
00:10:03,966 --> 00:10:05,806
Is where you can provide your


300
00:10:05,806 --> 00:10:08,666
own audio to be played back in


301
00:10:08,746 --> 00:10:10,996
sync with the haptics.


302
00:10:12,596 --> 00:10:14,236
Next, let's talk about some of


303
00:10:14,236 --> 00:10:15,976
those optional parameters.


304
00:10:20,056 --> 00:10:21,646
Our first event parameter is


305
00:10:21,646 --> 00:10:23,396
called HapticIntesnity.


306
00:10:23,986 --> 00:10:26,336
And it has an audio analog,


307
00:10:26,736 --> 00:10:27,846
audio volume, which you're


308
00:10:27,846 --> 00:10:29,076
probably already familiar with.


309
00:10:30,426 --> 00:10:32,736
Now, with this parameter, you go


310
00:10:32,736 --> 00:10:34,946
from no output as you turn, and


311
00:10:34,946 --> 00:10:36,736
as you turn the knob from zero


312
00:10:36,736 --> 00:10:38,256
all the way up to one, you go to


313
00:10:38,256 --> 00:10:39,436
the maximum output of the


314
00:10:39,436 --> 00:10:39,856
system.


315
00:10:41,456 --> 00:10:43,016
Our next parameter is called


316
00:10:43,206 --> 00:10:44,306
HapticSharpness.


317
00:10:44,846 --> 00:10:47,056
Now HapticSharpness is a new


318
00:10:47,056 --> 00:10:47,566
concept.


319
00:10:47,926 --> 00:10:49,836
There's no physical analog to


320
00:10:49,836 --> 00:10:51,506
this and there's also no audio


321
00:10:51,506 --> 00:10:51,976
analog.


322
00:10:54,176 --> 00:10:57,146
In this world, I want you to


323
00:10:57,146 --> 00:10:59,186
instead think of moving along in


324
00:10:59,186 --> 00:11:02,606
a perceptual space from a very


325
00:11:02,606 --> 00:11:05,506
round and organic feel at zero,


326
00:11:06,796 --> 00:11:08,306
all the way to a more crisp and


327
00:11:08,306 --> 00:11:09,856
precise feel at one.


328
00:11:10,646 --> 00:11:12,596
And to help ground that a bit


329
00:11:12,596 --> 00:11:14,546
further, I'm going to use some


330
00:11:14,546 --> 00:11:16,986
examples from iOS 12.


331
00:11:17,876 --> 00:11:19,856
The flashlight button on your


332
00:11:19,856 --> 00:11:21,396
lock screen is an example of a


333
00:11:21,396 --> 00:11:24,126
very high sharpness haptic.


334
00:11:24,606 --> 00:11:29,316
And the App Switcher, that swipe


335
00:11:29,316 --> 00:11:32,216
up, that's an example of a more


336
00:11:32,216 --> 00:11:33,936
round, a lower sharpness haptic.


337
00:11:34,316 --> 00:11:37,436
As for the why.


338
00:11:37,536 --> 00:11:39,946
Why were those two types of


339
00:11:40,056 --> 00:11:42,166
experiences, you know, sharp and


340
00:11:42,166 --> 00:11:42,656
not sharp?


341
00:11:42,936 --> 00:11:44,326
I'm going to refer you to our


342
00:11:44,386 --> 00:11:47,186
talk on Audio Haptic Design.


343
00:11:47,706 --> 00:11:50,566
Now, we have several more types


344
00:11:50,566 --> 00:11:52,466
of event parameters, for


345
00:11:52,466 --> 00:11:54,816
example, that apply to audio,


346
00:11:54,816 --> 00:11:56,286
like pitch and pan.


347
00:11:56,606 --> 00:11:58,456
And for haptics, we have things


348
00:11:58,456 --> 00:11:59,636
that let you change those


349
00:11:59,636 --> 00:12:00,746
resonance and so forth.


350
00:12:01,066 --> 00:12:03,776
But these two, intensity and


351
00:12:03,776 --> 00:12:05,636
sharpness, will be enough to get


352
00:12:05,636 --> 00:12:05,976
us going.


353
00:12:08,396 --> 00:12:10,506
Now, to develop a feel for that


354
00:12:10,616 --> 00:12:13,356
dynamic range and precision of


355
00:12:13,696 --> 00:12:14,796
intensity and sharpness.


356
00:12:15,856 --> 00:12:18,246
We've got a sample code, the


357
00:12:18,276 --> 00:12:20,186
palette, which allows you to try


358
00:12:20,186 --> 00:12:22,886
out these experiences for


359
00:12:22,886 --> 00:12:23,316
yourself.


360
00:12:23,636 --> 00:12:25,626
As you move, as you tap, or you


361
00:12:25,626 --> 00:12:28,166
drag your finger around, you'll


362
00:12:28,386 --> 00:12:30,206
be accessing the sharpness axis,


363
00:12:30,856 --> 00:12:32,506
as well as the intensity axis.


364
00:12:32,506 --> 00:12:33,516
And it's going to play out the


365
00:12:33,516 --> 00:12:35,596
corresponding continuous or


366
00:12:35,596 --> 00:12:37,606
transient haptic as you do that.


367
00:12:38,656 --> 00:12:40,696
This will help you get that


368
00:12:40,696 --> 00:12:41,576
intuition.


369
00:12:46,046 --> 00:12:47,876
So that was an introduction


370
00:12:48,506 --> 00:12:50,436
about where we can use Core


371
00:12:50,436 --> 00:12:52,956
Haptics and also how to specify


372
00:12:52,956 --> 00:12:53,566
our content.


373
00:12:54,066 --> 00:12:55,956
Now, let's invite Doug Scott,


374
00:12:55,956 --> 00:12:57,886
our Core Haptics architect, to


375
00:12:57,886 --> 00:13:00,606
get us started with playing back


376
00:13:00,766 --> 00:13:02,966
Core Haptics, playing back those


377
00:13:02,966 --> 00:13:04,916
patterns, and integrating Core


378
00:13:04,916 --> 00:13:06,076
Haptics into our apps.


379
00:13:06,526 --> 00:13:07,286
Please welcome Doug.


380
00:13:08,516 --> 00:13:10,556
[ Applause ]


381
00:13:11,056 --> 00:13:11,546
>> Thank you, Michael.


382
00:13:12,596 --> 00:13:13,606
Good evening, everyone.


383
00:13:13,756 --> 00:13:16,006
I am thrilled to be here to talk


384
00:13:16,006 --> 00:13:17,176
to you about integrating the


385
00:13:17,176 --> 00:13:19,186
Core Haptics API into your


386
00:13:19,186 --> 00:13:19,926
applications.


387
00:13:21,456 --> 00:13:24,136
Before I show a demo and dive


388
00:13:24,136 --> 00:13:25,536
into the code, let's walk


389
00:13:25,536 --> 00:13:26,766
through the basic steps that


390
00:13:26,766 --> 00:13:28,036
your application will follow


391
00:13:28,036 --> 00:13:28,826
when you want to play a haptic


392
00:13:28,826 --> 00:13:28,976
pattern.


393
00:13:33,046 --> 00:13:34,536
Creating your content is the


394
00:13:34,536 --> 00:13:36,476
first good step because this can


395
00:13:36,476 --> 00:13:38,286
be done at any point prior to


396
00:13:38,286 --> 00:13:39,566
the point where you need to use


397
00:13:39,566 --> 00:13:39,726
it.


398
00:13:40,376 --> 00:13:43,126
In this example, we load an


399
00:13:43,126 --> 00:13:44,566
NSDictionary into a haptic


400
00:13:44,566 --> 00:13:44,966
pattern.


401
00:13:45,076 --> 00:13:46,076
The dictionary might have been


402
00:13:46,076 --> 00:13:47,276
something that we stored in our


403
00:13:47,276 --> 00:13:48,486
application as part of our


404
00:13:48,486 --> 00:13:49,166
resources.


405
00:13:50,226 --> 00:13:52,256
As we will see later, patterns


406
00:13:52,256 --> 00:13:54,166
can also be created right before


407
00:13:54,166 --> 00:13:55,566
they are to be played if they


408
00:13:55,566 --> 00:13:57,496
need to very interactively in


409
00:13:57,496 --> 00:13:58,816
response to changes in your


410
00:13:58,816 --> 00:13:59,446
application.


411
00:14:02,046 --> 00:14:03,576
The next step is to create an


412
00:14:03,576 --> 00:14:04,926
instance of the haptic engine.


413
00:14:05,846 --> 00:14:07,116
This should be done as soon as


414
00:14:07,116 --> 00:14:08,666
your application knows that it


415
00:14:08,666 --> 00:14:09,976
will be making use of haptics.


416
00:14:12,596 --> 00:14:14,456
Next, you create a haptic player


417
00:14:14,456 --> 00:14:15,426
for your haptic pattern.


418
00:14:15,996 --> 00:14:17,846
Each player is associated with a


419
00:14:17,846 --> 00:14:19,856
single pattern and a particular


420
00:14:19,856 --> 00:14:20,616
haptic engine.


421
00:14:23,356 --> 00:14:25,196
Starting the haptic engine tells


422
00:14:25,196 --> 00:14:26,736
the system to initialize the


423
00:14:26,736 --> 00:14:28,466
audio and haptic hardware in


424
00:14:28,466 --> 00:14:30,716
preparation for request to play


425
00:14:30,716 --> 00:14:30,966
the pattern.


426
00:14:33,156 --> 00:14:34,536
At the moment that your


427
00:14:34,536 --> 00:14:35,926
application wants the pattern to


428
00:14:36,016 --> 00:14:36,366
play.


429
00:14:36,616 --> 00:14:37,656
You start the player.


430
00:14:38,306 --> 00:14:40,056
This can be done in two modes.


431
00:14:40,346 --> 00:14:42,396
The first is called -- which we


432
00:14:42,396 --> 00:14:44,176
call immediate mode tells the


433
00:14:44,176 --> 00:14:45,436
system that you wish this


434
00:14:46,106 --> 00:14:47,716
pattern to play at the soonest


435
00:14:47,716 --> 00:14:49,006
possible moment with the minimal


436
00:14:49,006 --> 00:14:49,536
latency.


437
00:14:50,476 --> 00:14:52,276
The second, in scheduled mode,


438
00:14:52,346 --> 00:14:54,296
you hand it an absolute


439
00:14:54,296 --> 00:14:56,016
timestamp which tells the system


440
00:14:56,016 --> 00:14:57,116
that you want to synchronize


441
00:14:57,116 --> 00:14:58,426
this event with some other


442
00:14:58,426 --> 00:15:00,006
systems such as another audio


443
00:15:00,046 --> 00:15:03,456
player or a game event or a


444
00:15:03,456 --> 00:15:03,976
graphics event.


445
00:15:08,266 --> 00:15:09,196
If you want to know when your


446
00:15:09,196 --> 00:15:11,106
pattern is finished playing, you


447
00:15:11,106 --> 00:15:12,296
can have the haptic engine


448
00:15:12,296 --> 00:15:14,136
notify you via callback when


449
00:15:14,136 --> 00:15:15,816
your player or players are done.


450
00:15:17,556 --> 00:15:19,516
Here, the engine calls back to


451
00:15:19,516 --> 00:15:20,306
the application.


452
00:15:21,326 --> 00:15:22,706
And the application can now


453
00:15:22,736 --> 00:15:24,376
choose to stop the haptic engine


454
00:15:24,526 --> 00:15:26,366
or continue on with the next


455
00:15:26,366 --> 00:15:26,976
haptic pattern.


456
00:15:29,046 --> 00:15:30,216
Those are the basic steps.


457
00:15:30,466 --> 00:15:32,276
Now let's see an example of an


458
00:15:32,276 --> 00:15:33,586
application which uses this


459
00:15:33,626 --> 00:15:33,976
system.


460
00:15:36,386 --> 00:15:38,566
But before we do, we need to let


461
00:15:38,566 --> 00:15:41,046
you in on a secret demonstrating


462
00:15:41,046 --> 00:15:42,666
the use of an API which


463
00:15:42,666 --> 00:15:44,136
generates tactile feedback


464
00:15:44,546 --> 00:15:46,116
prevents -- presents a unique


465
00:15:46,206 --> 00:15:46,736
problem.


466
00:15:47,386 --> 00:15:48,596
You in the audience can't feel


467
00:15:48,596 --> 00:15:48,686
it.


468
00:15:49,366 --> 00:15:51,006
The way we handle this was by


469
00:15:51,006 --> 00:15:52,786
adding an audio equivalent for


470
00:15:52,786 --> 00:15:53,876
each haptic event into the


471
00:15:53,876 --> 00:15:55,786
output which will let you hear


472
00:15:55,786 --> 00:15:56,976
the effect of the haptics.


473
00:16:00,806 --> 00:16:02,826
This application uses a simple


474
00:16:02,826 --> 00:16:04,506
physics engine to move the ball


475
00:16:04,506 --> 00:16:05,976
around the screen in response to


476
00:16:05,976 --> 00:16:06,856
the accelerometer.


477
00:16:07,031 --> 00:16:09,031
[ Knocking Sounds ]


478
00:16:09,046 --> 00:16:10,936
It generates haptic and audio


479
00:16:10,936 --> 00:16:12,296
feedback when the ball impacts


480
00:16:12,296 --> 00:16:13,636
the edges of the screen.


481
00:16:14,106 --> 00:16:15,446
The user has the sense they are


482
00:16:15,446 --> 00:16:16,726
feeling the impacts through the


483
00:16:16,726 --> 00:16:18,186
edges of the game wall as well


484
00:16:18,186 --> 00:16:18,726
as hearing them.


485
00:16:19,056 --> 00:16:20,386
The harder the ball hits the


486
00:16:20,386 --> 00:16:21,796
edge, the more intense the


487
00:16:21,796 --> 00:16:23,706
haptic and the louder the audio.


488
00:16:26,136 --> 00:16:28,356
Okay, let's look at the code for


489
00:16:28,356 --> 00:16:29,846
this example to see how to


490
00:16:29,846 --> 00:16:31,186
integrate the Core Haptics API


491
00:16:31,186 --> 00:16:32,416
into your application.


492
00:16:32,796 --> 00:16:34,706
We'll see how event parameters


493
00:16:34,756 --> 00:16:36,816
are used to produce changes in


494
00:16:36,816 --> 00:16:37,896
the haptics and audio.


495
00:16:38,916 --> 00:16:40,706
The example here, all this code,


496
00:16:40,706 --> 00:16:42,106
is taken from the sample code on


497
00:16:42,106 --> 00:16:42,726
the website.


498
00:16:43,026 --> 00:16:44,306
But it's been edited down to


499
00:16:44,306 --> 00:16:45,906
show the important points.


500
00:16:48,226 --> 00:16:50,046
First, we import the Core


501
00:16:50,046 --> 00:16:50,946
Haptics module.


502
00:16:50,946 --> 00:16:52,386
Along with the other modules we


503
00:16:52,386 --> 00:16:53,546
need for the application.


504
00:16:57,046 --> 00:16:59,006
The CHHapticEngine is declared


505
00:16:59,006 --> 00:17:00,156
as a member variable of our


506
00:17:00,156 --> 00:17:01,776
ViewController because we want


507
00:17:01,776 --> 00:17:02,726
to be able to control its


508
00:17:02,726 --> 00:17:04,236
lifetime and have it exist for


509
00:17:04,236 --> 00:17:05,656
the lifetime of the application.


510
00:17:08,106 --> 00:17:09,566
As discussed in our flow chart


511
00:17:09,566 --> 00:17:11,306
earlier, we set up the haptic


512
00:17:11,306 --> 00:17:12,776
engine in advance of when we


513
00:17:12,776 --> 00:17:13,546
want to use it.


514
00:17:13,836 --> 00:17:15,806
Here, we call a helper method at


515
00:17:15,806 --> 00:17:17,036
the point that the view has


516
00:17:17,036 --> 00:17:17,445
loaded.


517
00:17:20,195 --> 00:17:21,675
In the helper method, we began


518
00:17:21,986 --> 00:17:23,685
by creating the instance of the


519
00:17:23,685 --> 00:17:25,246
haptic engine and check for


520
00:17:25,246 --> 00:17:26,126
possible errors.


521
00:17:26,896 --> 00:17:28,116
The engine is assigned to our


522
00:17:28,116 --> 00:17:29,666
member variable so we can keep


523
00:17:29,666 --> 00:17:29,976
it around.


524
00:17:32,066 --> 00:17:34,456
It is optional, but extremely


525
00:17:34,456 --> 00:17:36,676
useful to assign a closure to


526
00:17:36,676 --> 00:17:38,346
the engine's stoppedHandler


527
00:17:38,396 --> 00:17:38,886
property.


528
00:17:39,376 --> 00:17:40,406
This will be called if the


529
00:17:40,406 --> 00:17:42,196
engine is stopped by some action


530
00:17:42,256 --> 00:17:44,026
other than the application


531
00:17:44,026 --> 00:17:45,296
itself asking it to.


532
00:17:45,766 --> 00:17:47,046
Some possible reasons that this


533
00:17:47,046 --> 00:17:48,396
might happen are an audio


534
00:17:48,396 --> 00:17:50,016
session interruption or the


535
00:17:50,016 --> 00:17:51,576
application being suspended.


536
00:17:54,066 --> 00:17:55,496
We finish this method by


537
00:17:55,496 --> 00:17:57,006
starting the haptic engine and


538
00:17:57,006 --> 00:17:58,416
checking for possible errors.


539
00:17:59,286 --> 00:18:00,836
The engine will continue to run


540
00:18:00,906 --> 00:18:02,296
until the application, or a


541
00:18:02,296 --> 00:18:04,416
possible outside action stops


542
00:18:04,416 --> 00:18:04,486
it.


543
00:18:05,806 --> 00:18:07,676
Note that the application tracks


544
00:18:07,766 --> 00:18:09,106
whether or not the engine needs


545
00:18:09,106 --> 00:18:10,106
to be restarted.


546
00:18:11,206 --> 00:18:12,856
Typically, you might leave the


547
00:18:12,856 --> 00:18:14,226
engine running for the entire


548
00:18:14,226 --> 00:18:16,036
time that you have any view


549
00:18:16,326 --> 00:18:18,176
visible on the screen which has


550
00:18:18,176 --> 00:18:18,976
haptic interaction.


551
00:18:24,396 --> 00:18:25,396
Here's the location in the


552
00:18:25,396 --> 00:18:26,736
application where the simple


553
00:18:26,736 --> 00:18:28,506
physics engine lets us know that


554
00:18:28,506 --> 00:18:29,816
the ball has collided with the


555
00:18:29,816 --> 00:18:30,246
wall.


556
00:18:30,826 --> 00:18:32,026
In this example, we want to


557
00:18:32,026 --> 00:18:33,526
generate our haptic and audio


558
00:18:33,526 --> 00:18:35,776
pattern to interactively track


559
00:18:35,886 --> 00:18:37,166
the velocity of the ball.


560
00:18:37,336 --> 00:18:38,696
So the pattern player and its


561
00:18:38,696 --> 00:18:40,056
pattern are created at the


562
00:18:40,056 --> 00:18:40,976
moment they are needed.


563
00:18:44,046 --> 00:18:45,316
This method is responsible for


564
00:18:45,316 --> 00:18:46,726
creating the pattern to be


565
00:18:46,726 --> 00:18:48,176
played in response to the ball


566
00:18:48,176 --> 00:18:48,636
collision.


567
00:18:49,506 --> 00:18:50,786
In here, we will create a


568
00:18:50,786 --> 00:18:52,286
pattern with two events.


569
00:18:52,416 --> 00:18:53,976
One haptic and one audio.


570
00:18:56,186 --> 00:18:58,126
We create a haptic event of type


571
00:18:58,236 --> 00:19:00,406
hapticTransient to produce that


572
00:19:00,406 --> 00:19:01,546
impactful feel.


573
00:19:04,366 --> 00:19:05,396
And we give it two event


574
00:19:05,396 --> 00:19:06,676
parameters which configure the


575
00:19:06,676 --> 00:19:08,306
event's sharpness and intensity,


576
00:19:08,546 --> 00:19:09,566
which you've heard about


577
00:19:09,566 --> 00:19:11,866
already, based upon the velocity


578
00:19:11,866 --> 00:19:12,456
of the ball.


579
00:19:15,206 --> 00:19:16,936
Then, we create the audio event


580
00:19:17,036 --> 00:19:20,306
with type audioContinuous with a


581
00:19:20,546 --> 00:19:22,386
set of event parameters for


582
00:19:22,386 --> 00:19:24,836
volume and envelope decay also


583
00:19:24,836 --> 00:19:26,076
calculated from the ball's


584
00:19:26,076 --> 00:19:26,706
velocity.


585
00:19:27,366 --> 00:19:28,956
The sustained parameter here


586
00:19:29,086 --> 00:19:31,356
assures us that the intensity of


587
00:19:31,406 --> 00:19:33,586
this event will die off to zero


588
00:19:33,996 --> 00:19:36,076
instead of continuing on for the


589
00:19:36,076 --> 00:19:36,886
length of the event.


590
00:19:39,356 --> 00:19:41,166
We create a pattern containing


591
00:19:41,166 --> 00:19:43,206
these two events synchronized in


592
00:19:43,206 --> 00:19:43,576
time.


593
00:19:46,046 --> 00:19:47,496
Finally, we create the pattern


594
00:19:47,496 --> 00:19:49,036
player from this pattern and


595
00:19:49,036 --> 00:19:52,416
return it to this layer, back in


596
00:19:52,416 --> 00:19:53,716
the method that responds to the


597
00:19:53,716 --> 00:19:54,206
collision.


598
00:19:55,346 --> 00:19:57,336
The final step is to start the


599
00:19:57,336 --> 00:19:58,996
pattern player at time


600
00:19:58,996 --> 00:20:01,546
CHHapticTimeImmediate, which


601
00:20:01,546 --> 00:20:03,176
indicates to play it back as


602
00:20:03,176 --> 00:20:04,606
soon as possible with minimal


603
00:20:04,606 --> 00:20:04,976
latency.


604
00:20:07,046 --> 00:20:08,096
Notice that the app does not


605
00:20:08,096 --> 00:20:09,636
hold on to the instance of this


606
00:20:09,666 --> 00:20:10,206
player.


607
00:20:11,226 --> 00:20:12,726
Its pattern is guaranteed to


608
00:20:12,726 --> 00:20:14,466
continue playing until it is


609
00:20:14,466 --> 00:20:14,976
finished.


610
00:20:15,306 --> 00:20:16,886
So the application can simply


611
00:20:16,886 --> 00:20:17,966
fire and forget it.


612
00:20:20,046 --> 00:20:22,346
And that's the basic recipe for


613
00:20:22,346 --> 00:20:23,536
playing your content using a


614
00:20:23,536 --> 00:20:24,826
pattern that is created


615
00:20:24,826 --> 00:20:25,916
programmatically within your


616
00:20:25,916 --> 00:20:26,566
app's code.


617
00:20:27,736 --> 00:20:28,996
Again, because this app is


618
00:20:28,996 --> 00:20:30,866
continuously interactive we


619
00:20:30,866 --> 00:20:32,376
don't stop the haptic engine


620
00:20:32,556 --> 00:20:34,066
until the game screen is no


621
00:20:34,066 --> 00:20:34,856
longer visible.


622
00:20:38,096 --> 00:20:39,706
Now let's take a moment to talk


623
00:20:39,706 --> 00:20:40,886
about one of the most powerful


624
00:20:40,886 --> 00:20:42,546
capabilities of Core Haptics,


625
00:20:42,946 --> 00:20:43,976
dynamic parameters.


626
00:20:46,156 --> 00:20:48,206
Dynamic parameters let you


627
00:20:48,206 --> 00:20:50,046
increase and decrease the value


628
00:20:50,116 --> 00:20:51,886
of the existing event parameters


629
00:20:52,146 --> 00:20:54,316
for all active and upcoming


630
00:20:54,316 --> 00:20:55,976
events in a pattern as it plays.


631
00:20:58,196 --> 00:21:00,286
Dynamic parameters take effect


632
00:21:00,286 --> 00:21:01,796
at the timestamp you provide.


633
00:21:02,656 --> 00:21:03,986
You can adjust multiple


634
00:21:03,986 --> 00:21:05,636
different parameters at the same


635
00:21:05,636 --> 00:21:08,136
time or with any arbitrary time


636
00:21:08,256 --> 00:21:08,946
relationship.


637
00:21:11,176 --> 00:21:12,246
You can include dynamic


638
00:21:12,246 --> 00:21:13,566
parameters when you create your


639
00:21:13,566 --> 00:21:14,036
pattern.


640
00:21:14,466 --> 00:21:16,576
or send them to your player in


641
00:21:16,576 --> 00:21:17,976
real time during playback.


642
00:21:20,076 --> 00:21:21,896
This allows you to use a single


643
00:21:21,896 --> 00:21:23,896
pattern to generate an infinite


644
00:21:23,896 --> 00:21:26,326
number of haptic and audio


645
00:21:26,326 --> 00:21:28,186
variations by adjusting the


646
00:21:28,186 --> 00:21:29,436
pattern dynamically.


647
00:21:32,046 --> 00:21:33,396
Let's take a look at an example.


648
00:21:34,076 --> 00:21:35,536
In this diagram, on the bottom,


649
00:21:35,536 --> 00:21:36,866
we have a haptic pattern that


650
00:21:36,866 --> 00:21:39,326
was designed with all haptic


651
00:21:39,326 --> 00:21:40,866
event intensities set to their


652
00:21:40,866 --> 00:21:41,886
maximum value.


653
00:21:42,156 --> 00:21:43,636
The first half are


654
00:21:43,636 --> 00:21:44,686
HapticTransients.


655
00:21:44,686 --> 00:21:45,596
The second half is the


656
00:21:45,596 --> 00:21:46,636
HapticContinuous.


657
00:21:47,936 --> 00:21:48,836
We'd like to reduce the


658
00:21:48,836 --> 00:21:50,316
intensity of all the games


659
00:21:50,316 --> 00:21:51,606
haptics temporarily.


660
00:21:51,836 --> 00:21:53,566
For example, if a game -- if a


661
00:21:53,566 --> 00:21:54,786
character was speaking in the


662
00:21:54,786 --> 00:21:54,976
game.


663
00:21:58,186 --> 00:21:59,706
I send a dynamic parameter for


664
00:21:59,706 --> 00:22:02,426
intensity with a value of 0.3


665
00:22:02,596 --> 00:22:04,546
that takes effect at time .5


666
00:22:04,546 --> 00:22:04,986
seconds.


667
00:22:05,776 --> 00:22:07,316
You can see that it reduced the


668
00:22:07,316 --> 00:22:08,816
intensity of the event at that


669
00:22:08,816 --> 00:22:10,286
time significantly to about a


670
00:22:10,286 --> 00:22:11,976
third of what it was unmodified.


671
00:22:16,406 --> 00:22:18,306
Finally, let's look at another


672
00:22:18,306 --> 00:22:19,916
way to create patterns.


673
00:22:22,496 --> 00:22:25,826
So what exactly is AHAP?


674
00:22:27,476 --> 00:22:30,476
The Apple Haptic Audio Pattern


675
00:22:30,596 --> 00:22:31,936
is a specification for


676
00:22:31,936 --> 00:22:33,306
describing a Core Haptics


677
00:22:33,306 --> 00:22:35,696
pattern in a text-based format.


678
00:22:36,316 --> 00:22:37,996
It is built from nested key


679
00:22:37,996 --> 00:22:40,426
value pairs which become quite


680
00:22:40,426 --> 00:22:42,656
familiar for you, to you once


681
00:22:42,656 --> 00:22:43,646
you start working with the


682
00:22:43,646 --> 00:22:45,076
classes which make up the Core


683
00:22:45,076 --> 00:22:45,886
Haptics API.


684
00:22:48,416 --> 00:22:49,986
It is a schema for the widely


685
00:22:49,986 --> 00:22:52,066
established JSON file format.


686
00:22:52,486 --> 00:22:55,046
Which means you have already


687
00:22:55,046 --> 00:22:56,096
quite a number of different


688
00:22:56,096 --> 00:22:57,336
frameworks which can read,


689
00:22:57,336 --> 00:22:59,236
write, and edit these, including


690
00:22:59,376 --> 00:23:01,116
such things as the Swift Codable


691
00:23:01,116 --> 00:23:01,536
framework.


692
00:23:04,036 --> 00:23:06,526
AHAP makes it easy to share and


693
00:23:06,526 --> 00:23:08,366
edit haptic patterns because it


694
00:23:08,366 --> 00:23:10,146
is a format that all developers


695
00:23:10,266 --> 00:23:10,956
can agree on.


696
00:23:14,046 --> 00:23:15,096
Loading your haptic patterns


697
00:23:15,096 --> 00:23:17,136
from external AHAP files allows


698
00:23:17,136 --> 00:23:18,706
you to separate your content


699
00:23:18,996 --> 00:23:20,576
from your application code.


700
00:23:24,046 --> 00:23:25,516
Using the magic of a slide deck,


701
00:23:26,006 --> 00:23:27,146
we're going to create a simple


702
00:23:27,146 --> 00:23:28,476
AHAP file here.


703
00:23:30,496 --> 00:23:32,616
We start with a version string.


704
00:23:33,066 --> 00:23:34,916
Which indicates which version of


705
00:23:34,916 --> 00:23:36,116
the system this pattern was


706
00:23:36,116 --> 00:23:36,836
designed for.


707
00:23:39,206 --> 00:23:40,826
Next, we add the key for our


708
00:23:40,826 --> 00:23:41,246
pattern.


709
00:23:41,616 --> 00:23:42,646
Which will be an array of


710
00:23:42,646 --> 00:23:42,976
dictionaries.


711
00:23:46,176 --> 00:23:47,496
We add our first event


712
00:23:47,496 --> 00:23:49,036
dictionary to our pattern array.


713
00:23:49,616 --> 00:23:51,976
This event has two required key


714
00:23:51,976 --> 00:23:52,916
value pairs.


715
00:23:53,146 --> 00:23:54,586
A time in seconds at which the


716
00:23:54,586 --> 00:23:57,246
event should happen relative to


717
00:23:57,246 --> 00:23:58,636
the start of the pattern and the


718
00:23:58,636 --> 00:23:59,526
type of event.


719
00:24:00,336 --> 00:24:01,886
This is a haptic transient event


720
00:24:01,886 --> 00:24:03,306
starting as soon as the pattern


721
00:24:03,306 --> 00:24:03,836
starts.


722
00:24:06,096 --> 00:24:08,076
To this event, we add event


723
00:24:08,076 --> 00:24:09,516
parameters which will affect


724
00:24:09,516 --> 00:24:10,436
only this event.


725
00:24:11,126 --> 00:24:12,496
These are stored in their own


726
00:24:12,496 --> 00:24:13,756
array of dictionaries.


727
00:24:15,106 --> 00:24:16,586
We add an event parameter to


728
00:24:16,586 --> 00:24:18,396
control the intensity of the


729
00:24:18,396 --> 00:24:19,746
event and another to control its


730
00:24:19,746 --> 00:24:19,966
sharpness.


731
00:24:24,096 --> 00:24:25,466
We can add a second event in the


732
00:24:25,466 --> 00:24:26,196
same fashion.


733
00:24:26,906 --> 00:24:28,396
This one starts at an offset of


734
00:24:28,506 --> 00:24:30,306
.5 seconds from the first and is


735
00:24:30,306 --> 00:24:31,906
of type HapticContinuous.


736
00:24:32,776 --> 00:24:34,366
For the event parameters, we use


737
00:24:34,366 --> 00:24:36,236
the same as we had for the first


738
00:24:36,236 --> 00:24:36,536
event.


739
00:24:38,336 --> 00:24:41,206
Events type HapticContinuous and


740
00:24:41,296 --> 00:24:43,506
AudioContinuous require an event


741
00:24:43,556 --> 00:24:45,806
duration in addition to the time


742
00:24:45,886 --> 00:24:46,566
and event type.


743
00:24:46,916 --> 00:24:48,396
This duration value is always


744
00:24:48,396 --> 00:24:49,566
specified in seconds.


745
00:24:52,096 --> 00:24:54,376
Here is a visual representation


746
00:24:54,376 --> 00:24:56,046
of the pattern we just created.


747
00:24:56,456 --> 00:24:57,596
You can see the two types of


748
00:24:57,596 --> 00:25:00,716
events; the HapticTransient at


749
00:25:00,716 --> 00:25:02,036
the very beginning, the


750
00:25:02,036 --> 00:25:04,116
Continuous later with a relative


751
00:25:04,116 --> 00:25:05,706
timing and duration and their


752
00:25:05,706 --> 00:25:07,016
intensity and sharpness


753
00:25:07,146 --> 00:25:07,976
parameter values.


754
00:25:10,376 --> 00:25:13,026
That was a quick tour of AHAP.


755
00:25:13,406 --> 00:25:15,326
This diagram shows a summary of


756
00:25:15,326 --> 00:25:16,706
the AHAP file structure.


757
00:25:17,126 --> 00:25:18,996
A single pattern consisting of


758
00:25:18,996 --> 00:25:20,446
an array of event dictionaries,


759
00:25:21,816 --> 00:25:24,506
optional dynamic parameters, and


760
00:25:24,506 --> 00:25:26,716
optional use of parameter curves


761
00:25:26,716 --> 00:25:28,346
which are an extension of


762
00:25:28,466 --> 00:25:29,416
dynamic parameters.


763
00:25:29,686 --> 00:25:31,086
Which you can read about more


764
00:25:31,086 --> 00:25:32,756
on, within the information that


765
00:25:32,756 --> 00:25:33,896
we have on the website.


766
00:25:35,176 --> 00:25:36,896
You can find a full link to the


767
00:25:36,896 --> 00:25:38,536
AHAP specification on our


768
00:25:38,536 --> 00:25:39,516
sessions page.


769
00:25:42,856 --> 00:25:44,136
Also on our sessions page,


770
00:25:44,136 --> 00:25:45,776
you'll find a code example that


771
00:25:45,776 --> 00:25:47,536
shows how to create, load, and


772
00:25:47,536 --> 00:25:49,086
play the patterns described by


773
00:25:49,086 --> 00:25:49,796
AHAP files.


774
00:25:50,236 --> 00:25:52,316
This haptic sampler app includes


775
00:25:52,316 --> 00:25:53,726
a range of patterns that


776
00:25:53,726 --> 00:25:55,776
highlight the subtlety, dynamic


777
00:25:55,776 --> 00:25:57,536
range, and audio haptic sync.


778
00:25:57,816 --> 00:25:59,066
That's possible with the Core


779
00:25:59,066 --> 00:25:59,776
Haptics API.


780
00:26:01,316 --> 00:26:02,266
Thank you very much.


781
00:26:02,266 --> 00:26:03,376
And now, I'd like to return the


782
00:26:03,376 --> 00:26:05,016
stage to my colleague, Michael.


783
00:26:06,516 --> 00:26:12,436
[ Applause ]


784
00:26:12,936 --> 00:26:13,416
>> Thanks, Doug.


785
00:26:14,306 --> 00:26:16,126
So although we covered a lot of


786
00:26:16,126 --> 00:26:18,866
ground today there is still much


787
00:26:18,866 --> 00:26:20,196
more to discover with Core


788
00:26:20,196 --> 00:26:20,646
Haptics.


789
00:26:22,016 --> 00:26:23,366
Check out the online doc


790
00:26:23,366 --> 00:26:26,116
reference for details.


791
00:26:26,236 --> 00:26:27,476
Once you're up and running with


792
00:26:27,476 --> 00:26:28,866
the basics of specifying


793
00:26:28,866 --> 00:26:30,516
contents and playing that


794
00:26:30,516 --> 00:26:31,826
content you'll probably be


795
00:26:31,826 --> 00:26:33,626
wondering about the design


796
00:26:33,626 --> 00:26:35,006
principles for these joints


797
00:26:35,006 --> 00:26:35,926
haptic audio patterns.


798
00:26:38,116 --> 00:26:39,596
You'll be wondering do the


799
00:26:39,596 --> 00:26:41,726
rules, the guidelines for sound


800
00:26:41,726 --> 00:26:43,356
design carry over to haptic


801
00:26:43,356 --> 00:26:43,806
design?


802
00:26:44,096 --> 00:26:45,606
What are some common pitfalls I


803
00:26:45,606 --> 00:26:46,296
should be aware of?


804
00:26:47,276 --> 00:26:50,256
The good news is that our Audio


805
00:26:50,586 --> 00:26:52,006
and Haptic Design teams have


806
00:26:52,006 --> 00:26:53,786
been doing this for years and


807
00:26:53,786 --> 00:26:55,166
they've helped put together some


808
00:26:55,236 --> 00:26:56,786
advice and guidance in an


809
00:26:56,786 --> 00:26:58,326
updated human interface


810
00:26:58,326 --> 00:26:59,976
guidelines or HIG for haptics.


811
00:27:00,296 --> 00:27:01,846
As well as in the accompanying


812
00:27:02,506 --> 00:27:04,896
talk in WWDC this year.


813
00:27:05,666 --> 00:27:05,976
Check it out.


814
00:27:08,236 --> 00:27:09,756
So let's recap.


815
00:27:10,046 --> 00:27:11,696
Today, we talked about where


816
00:27:11,696 --> 00:27:13,076
haptics can help you reach for


817
00:27:13,076 --> 00:27:15,456
that next level of immersion and


818
00:27:15,456 --> 00:27:17,356
make your app interactions more


819
00:27:17,356 --> 00:27:17,806
effortless.


820
00:27:19,156 --> 00:27:20,606
Having synchronized and


821
00:27:20,606 --> 00:27:23,356
complimentary audio and haptics


822
00:27:23,386 --> 00:27:25,636
together is a particularly


823
00:27:25,636 --> 00:27:26,836
effective combination.


824
00:27:27,686 --> 00:27:29,046
But there haven't been API's


825
00:27:29,046 --> 00:27:30,966
that allowed you to actually do


826
00:27:30,966 --> 00:27:31,166
this.


827
00:27:32,026 --> 00:27:34,496
With iOS 13, we now have the


828
00:27:34,496 --> 00:27:36,666
necessary ingredients to create


829
00:27:36,666 --> 00:27:38,216
these rich multimodal


830
00:27:38,216 --> 00:27:38,946
experiences.


831
00:27:39,796 --> 00:27:41,856
We have the vocabulary to


832
00:27:41,856 --> 00:27:43,406
describe haptics and audio


833
00:27:43,406 --> 00:27:46,726
events and a file format, AHAP.


834
00:27:47,936 --> 00:27:50,056
We've got a new performant API


835
00:27:50,516 --> 00:27:52,506
Core Haptics which is designed


836
00:27:52,556 --> 00:27:54,386
for low latency and real-time


837
00:27:54,386 --> 00:27:55,016
modulation.


838
00:27:55,536 --> 00:27:58,986
We've put together sample code,


839
00:27:59,406 --> 00:28:01,756
sample patterns, design


840
00:28:01,756 --> 00:28:03,206
guidelines, and support from


841
00:28:04,336 --> 00:28:04,496
Apple.


842
00:28:04,586 --> 00:28:06,236
And lastly, you've got an


843
00:28:06,236 --> 00:28:08,356
incredible audience, incredible


844
00:28:08,356 --> 00:28:10,256
hardware where you can feel your


845
00:28:10,256 --> 00:28:11,476
haptics as you intended.


846
00:28:11,976 --> 00:28:14,766
A huge installed base of taptic


847
00:28:14,766 --> 00:28:16,486
engines that give you the most


848
00:28:16,596 --> 00:28:19,036
powerful, expressive, and


849
00:28:19,036 --> 00:28:20,496
precise haptics hardware


850
00:28:20,496 --> 00:28:21,016
available.


851
00:28:21,606 --> 00:28:24,856
So please come on down to the


852
00:28:24,856 --> 00:28:26,316
labs on Thursday and Friday


853
00:28:26,406 --> 00:28:28,076
where you can check out some of


854
00:28:28,076 --> 00:28:30,366
these haptics samples that we


855
00:28:30,366 --> 00:28:32,856
showed today and discuss your


856
00:28:32,856 --> 00:28:34,196
own ideas for your apps.


857
00:28:34,876 --> 00:28:36,466
You'll also find all of these


858
00:28:37,606 --> 00:28:39,406
guidelines and references online


859
00:28:39,456 --> 00:28:40,466
at our sessions page.


860
00:28:42,476 --> 00:28:43,376
I know you're going to have a


861
00:28:43,376 --> 00:28:46,206
lot of fun creating and using


862
00:28:46,206 --> 00:28:47,366
these haptic patterns in your


863
00:28:47,366 --> 00:28:47,606
apps.


864
00:28:48,156 --> 00:28:49,746
We can't wait to hear and feel


865
00:28:49,856 --> 00:28:50,526
what you come up with.


866
00:28:51,176 --> 00:28:51,976
Thank you, and good night.


867
00:28:52,516 --> 00:29:00,500
[ Applause ]

