1
00:00:00,506 --> 00:00:06,076
[ Music ]


2
00:00:06,576 --> 00:00:08,306
>> Hello, my name is James


3
00:00:08,306 --> 00:00:09,656
Kelly, and I'm a Software


4
00:00:09,656 --> 00:00:10,746
Engineer on the Game


5
00:00:10,746 --> 00:00:12,146
Technologies Team at Apple.


6
00:00:12,936 --> 00:00:14,506
In this video, we'll be talking


7
00:00:14,506 --> 00:00:15,866
about the new features and


8
00:00:15,866 --> 00:00:17,136
changes coming to the Game


9
00:00:17,136 --> 00:00:18,576
Controller framework this year


10
00:00:19,006 --> 00:00:20,366
to help you adopt newly


11
00:00:20,366 --> 00:00:21,706
supported game controllers.


12
00:00:24,066 --> 00:00:25,126
The Game Controller framework


13
00:00:25,126 --> 00:00:26,506
has been making it easy to add


14
00:00:26,506 --> 00:00:28,356
support for MFi Game Controllers


15
00:00:28,616 --> 00:00:31,126
to your games on iOS, tvOS, and


16
00:00:31,126 --> 00:00:31,726
macOS.


17
00:00:32,786 --> 00:00:33,856
By abstracting controller


18
00:00:33,856 --> 00:00:35,166
hardware through a common API,


19
00:00:35,916 --> 00:00:37,026
the Game Controller framework


20
00:00:37,376 --> 00:00:38,676
lets you write your code once


21
00:00:39,206 --> 00:00:40,166
without you having to worry


22
00:00:40,166 --> 00:00:41,606
about how controller data is


23
00:00:41,606 --> 00:00:41,966
mapped.


24
00:00:43,986 --> 00:00:45,806
And this year, we're excited to


25
00:00:45,806 --> 00:00:47,456
announce new support for some


26
00:00:47,456 --> 00:00:48,746
fantastic controllers.


27
00:00:49,416 --> 00:00:51,096
First is the Bluetooth-enabled


28
00:00:51,096 --> 00:00:52,916
Xbox Wireless controller from


29
00:00:52,916 --> 00:00:53,536
Microsoft.


30
00:00:54,066 --> 00:00:55,236
This will now seamlessly


31
00:00:55,236 --> 00:00:56,526
integrate into any Game


32
00:00:56,526 --> 00:00:57,726
Controller framework-enabled


33
00:00:57,726 --> 00:00:58,036
game.


34
00:00:58,436 --> 00:01:00,156
And that's not all.


35
00:01:00,996 --> 00:01:02,606
The DualShock 4 Controller from


36
00:01:02,606 --> 00:01:04,416
Sony is now supported by the


37
00:01:04,416 --> 00:01:05,436
Game Controller framework.


38
00:01:05,826 --> 00:01:07,856
It will just work with any games


39
00:01:07,896 --> 00:01:08,906
that already have controller


40
00:01:08,906 --> 00:01:09,936
support through the Game


41
00:01:09,936 --> 00:01:10,716
Controller framework.


42
00:01:13,406 --> 00:01:14,766
Many developers have already


43
00:01:14,766 --> 00:01:16,136
been creating some great games


44
00:01:16,136 --> 00:01:17,026
with controller support.


45
00:01:18,076 --> 00:01:20,446
Rayman Adventures, Transistor,


46
00:01:21,146 --> 00:01:23,276
Sky Force Reloaded, and Alto's


47
00:01:23,276 --> 00:01:24,426
Adventure are some great


48
00:01:24,426 --> 00:01:26,276
examples, and just a few of the


49
00:01:26,276 --> 00:01:27,546
games on the App Store that


50
00:01:27,546 --> 00:01:28,396
support controllers.


51
00:01:29,316 --> 00:01:30,286
By using the Game Controller


52
00:01:30,286 --> 00:01:31,476
framework, games will


53
00:01:31,476 --> 00:01:32,966
automatically support the Xbox


54
00:01:32,966 --> 00:01:34,126
Wireless and DualShock 4


55
00:01:34,126 --> 00:01:37,486
Controllers in iOS 13, tvOS 13,


56
00:01:37,796 --> 00:01:39,056
and macOS Catalina.


57
00:01:40,826 --> 00:01:42,276
In this video, we'll talk about


58
00:01:42,276 --> 00:01:43,526
how to grab a reference to these


59
00:01:43,526 --> 00:01:44,876
new controllers through the Game


60
00:01:44,876 --> 00:01:46,096
Controller framework, how to


61
00:01:46,096 --> 00:01:48,166
access their inputs, some UI


62
00:01:48,166 --> 00:01:49,406
best practices for probably


63
00:01:49,406 --> 00:01:51,746
supporting MFi, Xbox Wireless,


64
00:01:51,746 --> 00:01:53,716
and DualShock 4 Controllers, and


65
00:01:53,716 --> 00:01:55,236
our recommendations for how to


66
00:01:55,236 --> 00:01:57,156
update your games on macOS, if


67
00:01:57,156 --> 00:01:58,626
they previously supported Game


68
00:01:58,626 --> 00:01:59,836
Controllers through lower level


69
00:01:59,836 --> 00:02:01,606
frameworks such as IOKit.


70
00:02:02,716 --> 00:02:04,546
First, let's talk about changes


71
00:02:04,546 --> 00:02:05,556
coming to the Game Controller


72
00:02:05,556 --> 00:02:06,886
framework in support of these


73
00:02:06,886 --> 00:02:07,616
new controllers.


74
00:02:08,086 --> 00:02:11,706
As a quick reminder, games that


75
00:02:11,706 --> 00:02:12,776
already use the Game Controller


76
00:02:12,776 --> 00:02:13,996
framework will gain support for


77
00:02:13,996 --> 00:02:15,936
free, meaning if your game


78
00:02:15,936 --> 00:02:17,536
supports MFi controllers, it


79
00:02:17,536 --> 00:02:19,106
will also automatically support


80
00:02:19,166 --> 00:02:20,746
the Xbox Wireless controller and


81
00:02:20,746 --> 00:02:21,486
the DualShock 4.


82
00:02:22,016 --> 00:02:24,576
The controller's inputs can be


83
00:02:24,576 --> 00:02:26,586
accessed via a GCController's


84
00:02:26,736 --> 00:02:28,716
GCExtendedGamepad profile.


85
00:02:31,146 --> 00:02:32,366
For those of you who are new to


86
00:02:32,366 --> 00:02:33,446
the Game Controller framework,


87
00:02:33,606 --> 00:02:34,856
let's talk briefly about how to


88
00:02:34,856 --> 00:02:35,866
detect a controller.


89
00:02:36,846 --> 00:02:38,356
Each controller is represented


90
00:02:38,356 --> 00:02:40,566
by a class named GCController.


91
00:02:41,206 --> 00:02:42,426
It's the same class for all


92
00:02:42,426 --> 00:02:45,246
controllers, MFi, Xbox Wireless,


93
00:02:45,486 --> 00:02:47,166
and DualShock 4 controllers, as


94
00:02:47,166 --> 00:02:48,506
well as the serial remote, are


95
00:02:48,506 --> 00:02:50,316
all instances of GCController.


96
00:02:52,366 --> 00:02:53,456
The first thing you want to do


97
00:02:53,456 --> 00:02:54,566
is get a list of currently


98
00:02:54,566 --> 00:02:55,586
connected controllers.


99
00:02:56,326 --> 00:02:58,516
To do this, use GCController's


100
00:02:58,636 --> 00:03:00,036
controllers class method.


101
00:03:01,006 --> 00:03:02,376
It returns an array of


102
00:03:02,376 --> 00:03:03,766
GCController instances


103
00:03:04,146 --> 00:03:05,326
representing all connected


104
00:03:05,326 --> 00:03:05,936
controllers.


105
00:03:06,476 --> 00:03:08,226
The array will be empty if no


106
00:03:08,226 --> 00:03:09,216
controllers are connected.


107
00:03:10,216 --> 00:03:11,656
You should check this array when


108
00:03:11,656 --> 00:03:12,996
your app launches and set up the


109
00:03:12,996 --> 00:03:14,106
controllers as appropriate.


110
00:03:17,576 --> 00:03:18,836
Now it's common for controllers


111
00:03:18,836 --> 00:03:20,376
to connect and disconnect while


112
00:03:20,376 --> 00:03:21,056
your app is running.


113
00:03:21,596 --> 00:03:23,386
For example, the player may turn


114
00:03:23,386 --> 00:03:24,326
on their controller after


115
00:03:24,326 --> 00:03:25,856
launching your game, their


116
00:03:25,856 --> 00:03:26,716
controller may run out of


117
00:03:26,716 --> 00:03:28,546
batteries, or they may just take


118
00:03:28,546 --> 00:03:29,776
the controller out of range.


119
00:03:31,226 --> 00:03:32,596
To be notified of these events,


120
00:03:32,946 --> 00:03:34,996
add observers for GCController


121
00:03:34,996 --> 00:03:37,146
did connect notification and


122
00:03:37,146 --> 00:03:38,886
GCController did disconnect


123
00:03:38,886 --> 00:03:39,636
notification.


124
00:03:40,406 --> 00:03:41,856
Your application did finish


125
00:03:41,856 --> 00:03:43,626
launching with options method is


126
00:03:43,626 --> 00:03:44,736
a great place to do this.


127
00:03:46,606 --> 00:03:48,306
So, now that you've grabbed onto


128
00:03:48,306 --> 00:03:49,406
an instance of a connected


129
00:03:49,406 --> 00:03:50,886
controller, let's talk about the


130
00:03:50,886 --> 00:03:52,316
buttons and other inputs it may


131
00:03:52,316 --> 00:03:53,916
have and how to access them.


132
00:03:56,076 --> 00:03:57,856
First, let's recap what inputs


133
00:03:57,856 --> 00:03:59,176
are available on a controller.


134
00:04:00,186 --> 00:04:02,356
There are two triggers, a


135
00:04:02,356 --> 00:04:04,556
directional pad, two


136
00:04:04,556 --> 00:04:08,896
thumbsticks, a menu button, four


137
00:04:08,896 --> 00:04:11,746
face buttons, a programmable


138
00:04:11,746 --> 00:04:14,226
4-LED strip, and two shoulder


139
00:04:14,226 --> 00:04:14,746
buttons.


140
00:04:18,336 --> 00:04:19,776
Let's take a closer look at how


141
00:04:19,776 --> 00:04:21,565
physical buttons map to the API


142
00:04:22,276 --> 00:04:23,906
using the four face buttons as


143
00:04:23,906 --> 00:04:24,426
an example.


144
00:04:25,586 --> 00:04:27,156
Here we can see a table listing


145
00:04:27,156 --> 00:04:28,436
the four face button properties


146
00:04:28,786 --> 00:04:30,556
found on a controller's extended


147
00:04:30,556 --> 00:04:31,526
gamepad profile.


148
00:04:32,456 --> 00:04:33,956
The face buttons of MFi


149
00:04:33,956 --> 00:04:35,436
controllers map directly to this


150
00:04:35,436 --> 00:04:38,306
API as do the face buttons of an


151
00:04:38,306 --> 00:04:39,596
Xbox Wireless controller.


152
00:04:42,196 --> 00:04:43,706
Note that there is some subtlety


153
00:04:43,706 --> 00:04:45,246
to consider with DualShock 4


154
00:04:45,246 --> 00:04:47,226
controllers as they use symbols


155
00:04:47,276 --> 00:04:48,826
instead of letters to represent


156
00:04:48,826 --> 00:04:49,666
their face buttons.


157
00:04:50,656 --> 00:04:51,766
In cases where there may be


158
00:04:51,766 --> 00:04:53,476
ambiguity when mapping an input


159
00:04:53,476 --> 00:04:55,786
to API, we use the notion of


160
00:04:55,786 --> 00:04:57,146
positional equivalents to


161
00:04:57,146 --> 00:04:58,206
resolve these mappings.


162
00:04:59,716 --> 00:05:01,546
For example, if we consider the


163
00:05:01,546 --> 00:05:03,266
face buttons to be four buttons


164
00:05:03,266 --> 00:05:04,576
arranged in a diamond on the


165
00:05:04,576 --> 00:05:06,726
right side of a controller, then


166
00:05:06,726 --> 00:05:08,246
the bottom cross button is


167
00:05:08,246 --> 00:05:09,736
positionally equivalent to the


168
00:05:09,736 --> 00:05:11,566
bottom A button of an MFi


169
00:05:11,566 --> 00:05:12,056
controller.


170
00:05:12,476 --> 00:05:14,036
So, it maps to the button A


171
00:05:14,036 --> 00:05:14,556
property.


172
00:05:15,076 --> 00:05:18,286
The right face button with a


173
00:05:18,286 --> 00:05:20,186
circle button maps to the button


174
00:05:20,186 --> 00:05:21,636
B property and so on.


175
00:05:24,286 --> 00:05:26,066
Next, let's talk about clickable


176
00:05:26,066 --> 00:05:27,976
thumbsticks or L3 and R3.


177
00:05:30,906 --> 00:05:31,846
We added support for these


178
00:05:31,846 --> 00:05:33,146
inputs to the Game Controller


179
00:05:33,146 --> 00:05:35,936
framework in iOS 12.1, tvOS


180
00:05:35,936 --> 00:05:39,596
12.1, and macOS Mojave 10.14.1.


181
00:05:40,496 --> 00:05:41,926
While the Xbox Wireless and


182
00:05:41,926 --> 00:05:43,676
DualShock 4 controllers all have


183
00:05:43,676 --> 00:05:44,636
clickable thumbsticks,


184
00:05:45,046 --> 00:05:46,656
thumbsticks on some models of


185
00:05:46,656 --> 00:05:48,086
MFi controllers may not be


186
00:05:48,086 --> 00:05:48,516
clickable.


187
00:05:49,186 --> 00:05:50,466
Let's dive into a code example


188
00:05:50,466 --> 00:05:51,676
to see how we can handle this.


189
00:05:53,346 --> 00:05:54,236
Let's say we want to make the


190
00:05:54,236 --> 00:05:55,926
player character crouch when the


191
00:05:55,926 --> 00:05:57,296
player clicks L3.


192
00:05:57,296 --> 00:05:59,786
If we're supporting older


193
00:05:59,786 --> 00:06:02,606
versions of iOS, tvOS, or macOS,


194
00:06:03,086 --> 00:06:04,446
we should first check to see if


195
00:06:04,446 --> 00:06:05,396
we have the clickable


196
00:06:05,396 --> 00:06:07,376
thumbsticks API available to us.


197
00:06:09,926 --> 00:06:11,436
Even if we do though, the


198
00:06:11,436 --> 00:06:12,346
specific controller we're


199
00:06:12,346 --> 00:06:14,216
mapping may not physically have


200
00:06:14,216 --> 00:06:15,306
clickable thumbsticks.


201
00:06:16,176 --> 00:06:17,856
So, we check to see if the left


202
00:06:17,856 --> 00:06:19,086
thumbstick button is new.


203
00:06:19,636 --> 00:06:21,406
And if it is, we should ensure


204
00:06:21,406 --> 00:06:22,616
that the user interaction we


205
00:06:22,616 --> 00:06:24,566
were intending to map to L3, in


206
00:06:24,566 --> 00:06:25,856
this case, crouching the player,


207
00:06:26,386 --> 00:06:27,676
is available through some other


208
00:06:27,676 --> 00:06:28,056
means.


209
00:06:31,486 --> 00:06:32,506
Once we are working with a


210
00:06:32,506 --> 00:06:33,866
controller that we know has


211
00:06:33,866 --> 00:06:35,256
clickable thumbsticks, we can


212
00:06:35,256 --> 00:06:36,856
just assign our behavior to the


213
00:06:36,856 --> 00:06:38,626
press handler of L3.


214
00:06:38,946 --> 00:06:40,136
Now, when a player clicks the


215
00:06:40,136 --> 00:06:41,936
left thumbstick button, the game


216
00:06:41,936 --> 00:06:42,716
will toggle the player


217
00:06:42,716 --> 00:06:43,576
character's crouch.


218
00:06:46,476 --> 00:06:47,706
If our game is running on


219
00:06:47,706 --> 00:06:50,226
versions of iOS, tvOS, or macOS


220
00:06:50,226 --> 00:06:52,176
that don't have this API, we


221
00:06:52,176 --> 00:06:52,956
still need to code an


222
00:06:52,956 --> 00:06:54,416
alternative path to the player


223
00:06:54,416 --> 00:06:54,906
crouch.


224
00:06:57,856 --> 00:06:59,336
Next, let's talk about some new


225
00:06:59,336 --> 00:07:00,846
buttons that have been added to


226
00:07:00,846 --> 00:07:02,516
the API in support of the Xbox


227
00:07:02,516 --> 00:07:03,786
wireless and DualShock 4


228
00:07:03,786 --> 00:07:05,466
Controllers, what we're calling


229
00:07:05,646 --> 00:07:06,806
the auxiliary buttons.


230
00:07:07,546 --> 00:07:08,636
These buttons are typically


231
00:07:08,636 --> 00:07:09,656
found in the middle of


232
00:07:09,656 --> 00:07:10,306
controllers.


233
00:07:12,526 --> 00:07:13,966
First, we have the menu button.


234
00:07:14,546 --> 00:07:15,606
It should be used to pause


235
00:07:15,606 --> 00:07:16,766
gameplay and bring up the


236
00:07:16,766 --> 00:07:17,806
in-game pause menu.


237
00:07:18,476 --> 00:07:19,986
All supported controllers have


238
00:07:19,986 --> 00:07:20,516
this button.


239
00:07:22,186 --> 00:07:23,306
Now let's look at the options


240
00:07:23,306 --> 00:07:23,646
button.


241
00:07:24,336 --> 00:07:25,646
It's a general purpose button,


242
00:07:25,896 --> 00:07:26,956
but you should avoid using it


243
00:07:26,956 --> 00:07:28,546
for time critical actions, as


244
00:07:28,546 --> 00:07:29,966
it's generally positioned out of


245
00:07:29,966 --> 00:07:30,286
the way.


246
00:07:31,296 --> 00:07:32,386
Note that not all controllers


247
00:07:32,386 --> 00:07:33,116
have this button.


248
00:07:36,316 --> 00:07:37,596
Let's take a look at how these


249
00:07:37,596 --> 00:07:39,566
new APIs map to existing MFi


250
00:07:39,566 --> 00:07:40,216
controllers.


251
00:07:41,596 --> 00:07:43,086
The center menu button maps


252
00:07:43,086 --> 00:07:44,266
directly to the button menu


253
00:07:44,266 --> 00:07:46,506
property of GCExtendedGamepad.


254
00:07:48,236 --> 00:07:49,876
Note that in this example, this


255
00:07:49,906 --> 00:07:51,346
MFi controller doesn't have an


256
00:07:51,346 --> 00:07:52,056
options button.


257
00:07:52,396 --> 00:07:53,966
So, the button options property


258
00:07:54,056 --> 00:07:55,836
of GCExtendedGamepad is new.


259
00:07:57,496 --> 00:07:59,276
Next up is the Xbox Wireless


260
00:07:59,276 --> 00:07:59,786
controller.


261
00:07:59,856 --> 00:08:02,606
When a controller has multiple


262
00:08:02,646 --> 00:08:04,506
auxiliary buttons, we determine


263
00:08:04,506 --> 00:08:05,796
its button mapping using


264
00:08:05,796 --> 00:08:06,856
positional equivalents.


265
00:08:08,426 --> 00:08:10,176
The right auxiliary button, in


266
00:08:10,176 --> 00:08:11,756
this case, the Xbox Wireless


267
00:08:11,756 --> 00:08:13,606
controller's menu button maps


268
00:08:13,606 --> 00:08:14,956
directly to the button menu


269
00:08:14,956 --> 00:08:18,326
property, whereas the left


270
00:08:18,326 --> 00:08:20,276
Auxiliary button or the Xbox


271
00:08:20,276 --> 00:08:21,276
Wireless controller's view


272
00:08:21,276 --> 00:08:22,886
button maps to the button


273
00:08:22,886 --> 00:08:23,796
options property.


274
00:08:25,786 --> 00:08:27,626
The Xbox button in the center of


275
00:08:27,626 --> 00:08:29,046
the controller has been reserved


276
00:08:29,046 --> 00:08:29,896
for system use.


277
00:08:32,395 --> 00:08:33,856
The same approach can be applied


278
00:08:33,966 --> 00:08:35,006
for the DualShock 4.


279
00:08:36,486 --> 00:08:38,096
Again, we can use positional


280
00:08:38,096 --> 00:08:39,336
equivalents to determine the


281
00:08:39,336 --> 00:08:40,155
button mappings.


282
00:08:41,905 --> 00:08:43,366
The right auxiliary button or


283
00:08:43,366 --> 00:08:45,046
the DualShock 4's options button


284
00:08:45,396 --> 00:08:46,526
maps to the button menu


285
00:08:46,526 --> 00:08:49,376
property, whereas the left


286
00:08:49,376 --> 00:08:51,276
auxiliary button, the DualShock


287
00:08:51,276 --> 00:08:53,276
4's share button maps to the


288
00:08:53,276 --> 00:08:54,486
button options property.


289
00:08:54,986 --> 00:08:57,566
The PS button in the center of


290
00:08:57,566 --> 00:08:58,846
the controller has also been


291
00:08:58,846 --> 00:08:59,286
reserved.


292
00:09:03,276 --> 00:09:04,676
Note that we've deprecated the


293
00:09:04,676 --> 00:09:05,876
controller paused handler.


294
00:09:06,716 --> 00:09:07,976
You should now use the new


295
00:09:07,976 --> 00:09:09,576
button menu API instead.


296
00:09:10,346 --> 00:09:11,696
Let's dive into a code example


297
00:09:11,696 --> 00:09:12,986
to see how we can handle this.


298
00:09:17,036 --> 00:09:18,256
Let's say we want to pause or


299
00:09:18,256 --> 00:09:19,686
unpause the game whenever the


300
00:09:19,686 --> 00:09:21,156
player presses the menu button.


301
00:09:21,766 --> 00:09:23,426
If we're supporting older


302
00:09:23,426 --> 00:09:26,136
versions of iOS, tvOS or macOS,


303
00:09:26,426 --> 00:09:27,576
we should first check to see if


304
00:09:27,576 --> 00:09:29,536
we have the new menu button API.


305
00:09:31,226 --> 00:09:33,076
If we do, we simply register a


306
00:09:33,076 --> 00:09:35,056
pressed changed handler on the


307
00:09:35,056 --> 00:09:36,816
extended gamepad's button menu


308
00:09:36,816 --> 00:09:37,306
property.


309
00:09:39,566 --> 00:09:41,046
Within the handler, we toggle


310
00:09:41,046 --> 00:09:41,816
the pause menu.


311
00:09:42,386 --> 00:09:43,746
Typically, when players want to


312
00:09:43,746 --> 00:09:45,316
pause the game, they want to do


313
00:09:45,316 --> 00:09:47,066
it as fast as possible, so we


314
00:09:47,066 --> 00:09:47,886
make sure to trigger this


315
00:09:47,886 --> 00:09:49,946
behavior on button press rather


316
00:09:49,946 --> 00:09:50,906
than button release.


317
00:09:53,686 --> 00:09:55,426
If the new API isn't available,


318
00:09:55,826 --> 00:09:56,736
we should still register our


319
00:09:56,736 --> 00:09:58,046
functionality with the old


320
00:09:58,046 --> 00:09:59,226
controller PausedHandler.


321
00:09:59,546 --> 00:10:01,026
This will trigger whenever the


322
00:10:01,026 --> 00:10:02,196
menu button is pressed.


323
00:10:02,196 --> 00:10:06,076
So that was the menu button.


324
00:10:07,496 --> 00:10:08,736
Now let's look at the options


325
00:10:08,736 --> 00:10:09,076
button.


326
00:10:09,816 --> 00:10:11,456
Again, remember that not all


327
00:10:11,456 --> 00:10:12,526
controllers may have this


328
00:10:12,526 --> 00:10:12,926
button.


329
00:10:13,756 --> 00:10:14,816
Let's dive into another code


330
00:10:14,816 --> 00:10:16,036
example to see how we should


331
00:10:16,036 --> 00:10:16,626
handle this.


332
00:10:18,656 --> 00:10:20,076
Here, we want to bring up an


333
00:10:20,076 --> 00:10:21,726
in-game settings menu whenever


334
00:10:21,726 --> 00:10:23,106
the player presses the options


335
00:10:23,106 --> 00:10:23,556
button.


336
00:10:24,016 --> 00:10:26,026
If we're supporting older


337
00:10:26,026 --> 00:10:28,476
versions of iOS, tvOS, or macOS,


338
00:10:28,906 --> 00:10:30,186
we should first check to see if


339
00:10:30,186 --> 00:10:31,616
we have the new options button.


340
00:10:33,496 --> 00:10:34,926
But even if we do, the


341
00:10:34,926 --> 00:10:36,176
controller we're mapping may not


342
00:10:36,176 --> 00:10:37,576
physically have an options


343
00:10:37,576 --> 00:10:37,986
button.


344
00:10:39,026 --> 00:10:40,056
So we check to see if the


345
00:10:40,056 --> 00:10:41,076
options button is new.


346
00:10:41,546 --> 00:10:43,386
And if it is, we need to ensure


347
00:10:43,386 --> 00:10:44,506
that the settings menu is


348
00:10:44,506 --> 00:10:46,256
accessible via some other means.


349
00:10:46,496 --> 00:10:48,616
For example, we can list it as


350
00:10:48,616 --> 00:10:49,906
an item in the pause menu.


351
00:10:51,736 --> 00:10:53,196
If the controller has an options


352
00:10:53,196 --> 00:10:54,616
button, we can just assign our


353
00:10:54,616 --> 00:10:56,256
behavior to the button options


354
00:10:56,396 --> 00:10:57,146
pressed handler.


355
00:10:57,936 --> 00:10:59,056
Now, when a player clicks the


356
00:10:59,056 --> 00:11:00,446
options button, the game will


357
00:11:00,446 --> 00:11:01,656
toggle the settings menu.


358
00:11:04,236 --> 00:11:06,076
If the new API isn't available,


359
00:11:06,406 --> 00:11:07,436
we still need to make sure


360
00:11:07,576 --> 00:11:08,916
there's an alternative path to


361
00:11:08,916 --> 00:11:09,946
reach the settings menu.


362
00:11:10,436 --> 00:11:12,326
So that was a quick look at the


363
00:11:12,326 --> 00:11:13,676
new API coming to the Game


364
00:11:13,676 --> 00:11:14,826
Controller framework this year


365
00:11:15,036 --> 00:11:16,106
in support of the newly added


366
00:11:16,106 --> 00:11:17,876
Xbox Wireless and DualShock 4


367
00:11:17,876 --> 00:11:18,486
controllers.


368
00:11:20,666 --> 00:11:22,276
Now, let's talk about some UI


369
00:11:22,276 --> 00:11:23,876
best practices for handling


370
00:11:23,876 --> 00:11:25,086
different controllers so that


371
00:11:25,086 --> 00:11:26,426
your users can experience your


372
00:11:26,426 --> 00:11:27,896
game in the best possible way.


373
00:11:30,496 --> 00:11:31,166
With the Game Controller


374
00:11:31,166 --> 00:11:32,416
framework being expanded to


375
00:11:32,416 --> 00:11:33,866
support more than just MFi


376
00:11:33,866 --> 00:11:35,606
controllers, a new consideration


377
00:11:35,606 --> 00:11:36,176
arises.


378
00:11:36,776 --> 00:11:38,616
Buttons and other inputs may no


379
00:11:38,616 --> 00:11:40,066
longer be visually consistent


380
00:11:40,116 --> 00:11:40,996
between controllers.


381
00:11:41,736 --> 00:11:43,426
In this example, the B button in


382
00:11:43,426 --> 00:11:45,346
the prompt only matches the MFi


383
00:11:45,346 --> 00:11:47,346
controller while the Xbox


384
00:11:47,346 --> 00:11:48,806
Wireless controller's B button


385
00:11:48,976 --> 00:11:51,476
is red and the DualShock 4 has a


386
00:11:51,476 --> 00:11:52,616
circle button instead.


387
00:11:54,306 --> 00:11:55,346
Let's dive deeper into this


388
00:11:55,346 --> 00:11:56,536
example to see how we could


389
00:11:56,536 --> 00:11:57,086
handle this.


390
00:11:57,836 --> 00:11:58,816
Let's say you're introducing


391
00:11:58,816 --> 00:11:59,776
your player to the base


392
00:11:59,776 --> 00:12:01,356
mechanics of your game and you


393
00:12:01,356 --> 00:12:02,486
want to display an in-game


394
00:12:02,486 --> 00:12:03,676
prompt that tells them how to


395
00:12:03,676 --> 00:12:04,006
block.


396
00:12:04,006 --> 00:12:05,876
In this case, your block


397
00:12:05,876 --> 00:12:07,336
function is mapped to the button


398
00:12:07,336 --> 00:12:09,926
B property of GCExtendedGamepad.


399
00:12:11,406 --> 00:12:13,026
For an MFi controller, we


400
00:12:13,026 --> 00:12:14,976
display our MFi B button asset


401
00:12:15,076 --> 00:12:15,906
as we did before.


402
00:12:16,216 --> 00:12:18,876
For the Xbox Wireless


403
00:12:18,876 --> 00:12:20,356
controller, however, we need to


404
00:12:20,356 --> 00:12:22,066
slightly tweak the asset, in


405
00:12:22,066 --> 00:12:23,196
this case, by making the B


406
00:12:23,196 --> 00:12:23,766
button red.


407
00:12:25,256 --> 00:12:26,736
Finally, we display a circle


408
00:12:26,736 --> 00:12:28,396
button when the DualShock 4 is


409
00:12:28,396 --> 00:12:29,336
the active controller.


410
00:12:30,036 --> 00:12:31,126
Now, regardless of what


411
00:12:31,126 --> 00:12:32,466
controller the player is using,


412
00:12:32,656 --> 00:12:34,136
they can easily understand your


413
00:12:34,136 --> 00:12:34,926
in-game prompts.


414
00:12:35,676 --> 00:12:36,616
Let's take a look at a code


415
00:12:36,616 --> 00:12:37,746
example to see how we can


416
00:12:37,746 --> 00:12:38,376
achieve this.


417
00:12:41,346 --> 00:12:42,736
Here, we have a simple function


418
00:12:42,736 --> 00:12:45,576
called getBlockButtonAsset that


419
00:12:45,576 --> 00:12:46,566
returns the appropriate art


420
00:12:46,566 --> 00:12:47,846
asset for the block button.


421
00:12:49,216 --> 00:12:50,806
First, we switch over the


422
00:12:50,806 --> 00:12:53,026
controller's product category, a


423
00:12:53,026 --> 00:12:54,676
new property added this year to


424
00:12:54,676 --> 00:12:56,406
GCController to determine what


425
00:12:56,406 --> 00:12:57,456
kind of controller it is.


426
00:12:57,536 --> 00:12:59,936
If it's an Xbox Wireless


427
00:12:59,936 --> 00:13:01,766
controller, we will return the


428
00:13:01,766 --> 00:13:03,156
red B button asset.


429
00:13:03,616 --> 00:13:05,666
If it's a DualShock 4


430
00:13:05,666 --> 00:13:07,456
controller, we'll return the red


431
00:13:07,596 --> 00:13:08,566
circle button asset.


432
00:13:09,696 --> 00:13:11,106
And finally, by default,


433
00:13:11,556 --> 00:13:13,636
overturn the MFi green B button


434
00:13:13,636 --> 00:13:14,026
asset.


435
00:13:14,886 --> 00:13:16,346
This way, your game will support


436
00:13:16,346 --> 00:13:17,566
the diverse range of MFi


437
00:13:17,566 --> 00:13:18,896
controllers currently available


438
00:13:19,146 --> 00:13:20,446
and gracefully fall back to a


439
00:13:20,446 --> 00:13:21,816
sensible asset should new


440
00:13:21,816 --> 00:13:22,966
controller support be added in


441
00:13:22,966 --> 00:13:23,416
the future.


442
00:13:24,356 --> 00:13:25,516
Let's return to our previous


443
00:13:25,516 --> 00:13:26,286
block example.


444
00:13:27,176 --> 00:13:28,496
Instead of creating unique art


445
00:13:28,496 --> 00:13:29,516
assets for each type of


446
00:13:29,516 --> 00:13:31,556
controller, another option is to


447
00:13:31,556 --> 00:13:32,826
use generic symbols in your


448
00:13:32,826 --> 00:13:34,246
in-game tutorials and prompts.


449
00:13:36,226 --> 00:13:37,706
By providing a generic prompt


450
00:13:37,916 --> 00:13:39,126
that doesn't rely on anything


451
00:13:39,126 --> 00:13:39,926
other than positional


452
00:13:39,926 --> 00:13:41,446
equivalents, you can rest


453
00:13:41,446 --> 00:13:42,336
assured knowing that your


454
00:13:42,336 --> 00:13:43,966
players will be able to easily


455
00:13:43,966 --> 00:13:45,576
understand your in-game guidance


456
00:13:45,966 --> 00:13:46,926
regardless of what type of


457
00:13:46,926 --> 00:13:48,046
controller is connected.


458
00:13:48,786 --> 00:13:50,726
In this example, it's clear that


459
00:13:50,726 --> 00:13:51,746
the players should press the


460
00:13:51,746 --> 00:13:52,696
right face button.


461
00:13:54,966 --> 00:13:57,246
One last note, players may have


462
00:13:57,246 --> 00:13:58,506
multiple controllers connected


463
00:13:58,506 --> 00:14:00,016
to their device at the same time


464
00:14:00,406 --> 00:14:01,446
even if they're playing alone.


465
00:14:02,316 --> 00:14:03,566
You should gracefully support


466
00:14:03,666 --> 00:14:04,726
all connected controllers in


467
00:14:04,726 --> 00:14:06,216
this case, as a player may


468
00:14:06,216 --> 00:14:07,476
switch between them at any


469
00:14:07,476 --> 00:14:07,886
moment.


470
00:14:08,816 --> 00:14:09,656
This means that you'll need to


471
00:14:09,656 --> 00:14:10,936
recognize input from all


472
00:14:10,936 --> 00:14:12,746
connected controllers either by


473
00:14:12,746 --> 00:14:14,186
pulling them each frame or


474
00:14:14,186 --> 00:14:15,606
registering input handlers with


475
00:14:15,606 --> 00:14:16,146
each of them.


476
00:14:17,226 --> 00:14:18,396
You should also update your


477
00:14:18,396 --> 00:14:20,216
in-game guidance and visuals to


478
00:14:20,216 --> 00:14:21,356
match the most recently used


479
00:14:21,356 --> 00:14:21,966
controllers.


480
00:14:22,326 --> 00:14:25,426
For example, if a player is


481
00:14:25,426 --> 00:14:26,656
using their MFi controller,


482
00:14:26,926 --> 00:14:28,876
display the appropriate MFi art


483
00:14:28,876 --> 00:14:29,406
assets.


484
00:14:30,856 --> 00:14:32,356
But if the player pressed an


485
00:14:32,356 --> 00:14:33,526
input on their connected


486
00:14:33,526 --> 00:14:35,926
DualShock 4, all in-game visuals


487
00:14:35,926 --> 00:14:37,356
should automatically adjust to


488
00:14:37,356 --> 00:14:39,176
use the DualShock 4 art assets.


489
00:14:40,246 --> 00:14:41,396
By dynamically adapting your


490
00:14:41,396 --> 00:14:42,586
visuals to the most recently


491
00:14:42,586 --> 00:14:43,966
used controller, you will


492
00:14:43,966 --> 00:14:45,036
provide your players an


493
00:14:45,036 --> 00:14:46,176
intuitive and polished


494
00:14:46,176 --> 00:14:47,426
controller-driven experience.


495
00:14:49,566 --> 00:14:50,786
Now, for those of you who have


496
00:14:50,786 --> 00:14:52,086
previously implemented the game


497
00:14:52,086 --> 00:14:53,536
controller support outside of


498
00:14:53,536 --> 00:14:54,526
the Game Controller framework on


499
00:14:54,526 --> 00:14:56,386
macOS, we have some new guidance


500
00:14:56,386 --> 00:14:57,096
for your games.


501
00:14:58,976 --> 00:14:59,866
When you adopt the Game


502
00:14:59,866 --> 00:15:01,026
Controller framework, game


503
00:15:01,026 --> 00:15:02,896
controllers will just work, so


504
00:15:02,896 --> 00:15:05,036
you should use it for MFi, Xbox


505
00:15:05,036 --> 00:15:06,326
Wireless, and DualShock 4


506
00:15:06,326 --> 00:15:07,886
controller support on macOS.


507
00:15:08,476 --> 00:15:10,716
As we abstract away any hardware


508
00:15:10,716 --> 00:15:11,906
intricacies that may differ


509
00:15:11,906 --> 00:15:13,936
between controllers, we provide


510
00:15:13,936 --> 00:15:15,196
you consistency in your app


511
00:15:15,246 --> 00:15:17,886
across iOS, tvOS, and macOS.


512
00:15:18,946 --> 00:15:20,256
This will also help to ensure


513
00:15:20,256 --> 00:15:21,806
that your apps remain compatible


514
00:15:21,806 --> 00:15:23,226
with current and future OS


515
00:15:23,226 --> 00:15:23,766
updates.


516
00:15:24,196 --> 00:15:26,886
For those of you who have


517
00:15:26,886 --> 00:15:28,286
previously hardcoded support for


518
00:15:28,286 --> 00:15:29,576
these controllers through lower


519
00:15:29,576 --> 00:15:31,896
level APIs such as IOKit, we


520
00:15:31,896 --> 00:15:33,306
highly recommend that you move


521
00:15:33,306 --> 00:15:34,686
your implementation over to the


522
00:15:34,686 --> 00:15:35,666
Game Controller framework.


523
00:15:36,786 --> 00:15:38,086
As new controllers will appear


524
00:15:38,086 --> 00:15:39,426
in both IOKit and the Game


525
00:15:39,426 --> 00:15:41,156
Controller framework, you should


526
00:15:41,156 --> 00:15:42,756
drop your IOKit implementation


527
00:15:42,806 --> 00:15:43,556
to ensure there are no


528
00:15:43,556 --> 00:15:44,226
conflicts.


529
00:15:45,496 --> 00:15:46,856
This will allow you to code to a


530
00:15:46,856 --> 00:15:48,496
single interface and receive new


531
00:15:48,496 --> 00:15:49,716
game controller support for


532
00:15:49,716 --> 00:15:50,036
free.


533
00:15:53,746 --> 00:15:55,016
So let's summarize what we've


534
00:15:55,016 --> 00:15:56,046
discussed in this video.


535
00:15:57,776 --> 00:15:59,006
The Game Controller framework


536
00:15:59,006 --> 00:16:00,196
abstracts hardware through a


537
00:16:00,196 --> 00:16:01,586
common API, letting you write


538
00:16:01,586 --> 00:16:03,356
your code once without having to


539
00:16:03,356 --> 00:16:04,336
worry about the low-level


540
00:16:04,336 --> 00:16:05,786
differences between controller


541
00:16:05,786 --> 00:16:06,286
models.


542
00:16:07,256 --> 00:16:08,466
This has the great benefit of


543
00:16:08,466 --> 00:16:09,446
allowing your game to


544
00:16:09,446 --> 00:16:10,726
automatically support newly


545
00:16:10,726 --> 00:16:12,096
added controllers such as the


546
00:16:12,096 --> 00:16:13,776
Xbox Wireless and the DualShock


547
00:16:13,776 --> 00:16:14,506
4 controllers.


548
00:16:15,816 --> 00:16:17,706
However, in order to provide the


549
00:16:17,706 --> 00:16:18,926
best user experience for your


550
00:16:18,926 --> 00:16:20,716
players, you should take care to


551
00:16:20,716 --> 00:16:22,216
adapt your game's UI and


552
00:16:22,216 --> 00:16:23,536
on-screen indicators to the


553
00:16:23,536 --> 00:16:24,316
active controller.


554
00:16:25,576 --> 00:16:27,396
And finally, ensure your macOS


555
00:16:27,396 --> 00:16:29,096
apps stay compatible with future


556
00:16:29,096 --> 00:16:31,066
OS updates by migrating existing


557
00:16:31,066 --> 00:16:32,436
controller support from lower


558
00:16:32,436 --> 00:16:33,746
level APIs to the Game


559
00:16:33,746 --> 00:16:34,546
Controller framework.


560
00:16:35,966 --> 00:16:37,136
More information about this


561
00:16:37,136 --> 00:16:38,616
year's game controller update


562
00:16:38,616 --> 00:16:39,616
can be found on the Apple


563
00:16:39,616 --> 00:16:40,296
developer site.


564
00:16:43,106 --> 00:16:44,236
That's it for this year's game


565
00:16:44,236 --> 00:16:44,946
controller's update.


566
00:16:45,296 --> 00:16:46,346
Thank you for watching.


567
00:16:46,886 --> 00:16:47,626
We hope you found this


568
00:16:47,626 --> 00:16:49,386
information helpful and you can


569
00:16:49,386 --> 00:16:50,486
use it to create some awesome


570
00:16:50,486 --> 00:16:51,546
games with game controller


571
00:16:51,546 --> 00:16:51,936
support.

