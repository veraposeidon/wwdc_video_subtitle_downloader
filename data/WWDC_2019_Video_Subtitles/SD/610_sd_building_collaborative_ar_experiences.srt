1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:11,516 --> 00:00:16,500
[ Applause ]


3
00:00:20,726 --> 00:00:21,896
>> Good afternoon, everyone.


4
00:00:22,516 --> 00:00:23,706
Welcome to the session.


5
00:00:24,886 --> 00:00:26,446
Today, I would like to talk


6
00:00:26,446 --> 00:00:28,966
about multiuser AR in ARKit 3.


7
00:00:30,056 --> 00:00:31,086
My name is Kuen-han.


8
00:00:31,506 --> 00:00:32,566
I'm a ARKit engineer.


9
00:00:33,166 --> 00:00:35,056
I would like to show you all the


10
00:00:35,056 --> 00:00:36,926
enhancement we made in ARKit 3,


11
00:00:37,326 --> 00:00:39,406
so building a multiuser AR app


12
00:00:39,406 --> 00:00:41,276
becomes easy and intuitive.


13
00:00:42,726 --> 00:00:43,736
So, you can focus on all the


14
00:00:43,736 --> 00:00:45,126
amazing content within your app.


15
00:00:46,386 --> 00:00:47,676
Are you interested in bringing


16
00:00:47,676 --> 00:00:49,096
more people to the AR world?


17
00:00:49,746 --> 00:00:51,176
Then, this talk is for you.


18
00:00:52,246 --> 00:00:52,766
Let's begin.


19
00:00:57,116 --> 00:00:59,286
Building a shared AR experience


20
00:00:59,526 --> 00:01:00,706
is about synchronization.


21
00:01:01,546 --> 00:01:03,056
Like the SwiftStrike video you


22
00:01:03,056 --> 00:01:05,236
are seeing here, not only we


23
00:01:05,236 --> 00:01:06,386
need to keep tracking the


24
00:01:06,386 --> 00:01:08,436
location of the bowling pin but,


25
00:01:08,436 --> 00:01:09,686
also, we need to track the


26
00:01:09,686 --> 00:01:11,006
location of the user and their


27
00:01:11,006 --> 00:01:12,116
interaction with the ball.


28
00:01:13,016 --> 00:01:14,856
But sometimes, track that


29
00:01:14,856 --> 00:01:16,986
information can be tricky and


30
00:01:16,986 --> 00:01:18,386
complicated to make it right.


31
00:01:19,146 --> 00:01:21,686
And that is what ARKit 3 want to


32
00:01:21,686 --> 00:01:22,286
solve for you.


33
00:01:23,386 --> 00:01:25,156
In ARKit 3, we introduce


34
00:01:25,236 --> 00:01:26,706
collaborative session, which


35
00:01:26,706 --> 00:01:28,466
makes sharing 3D content


36
00:01:28,466 --> 00:01:29,336
location easy.


37
00:01:29,856 --> 00:01:32,566
And with RealityKit, all the


38
00:01:32,716 --> 00:01:33,966
game setups and physics


39
00:01:33,966 --> 00:01:35,596
simulation can be synchronized


40
00:01:35,596 --> 00:01:36,766
automatically under hood.


41
00:01:37,176 --> 00:01:38,396
So, you can focus on your


42
00:01:38,396 --> 00:01:38,856
content.


43
00:01:39,816 --> 00:01:41,076
Let's look at today's agenda.


44
00:01:43,616 --> 00:01:45,726
First, we're going to introduce


45
00:01:45,896 --> 00:01:47,816
the collaborative session, a new


46
00:01:47,816 --> 00:01:50,156
way to build multiuser app in


47
00:01:50,156 --> 00:01:50,606
ARKit 3.


48
00:01:51,586 --> 00:01:53,436
Next, we're going to dive into


49
00:01:53,506 --> 00:01:55,216
some best practices for using


50
00:01:55,216 --> 00:01:57,436
ARAnchors, especially in the


51
00:01:57,436 --> 00:01:59,236
context of multiuser AR.


52
00:02:00,176 --> 00:02:01,886
Last, David is going to


53
00:02:01,886 --> 00:02:03,376
introduce you the SwiftStrike.


54
00:02:04,246 --> 00:02:06,896
By utilizing ARKit 3 and


55
00:02:07,076 --> 00:02:09,526
RealityKit, SwiftStrike provide


56
00:02:09,526 --> 00:02:11,536
a new level of multiuser AR game


57
00:02:11,536 --> 00:02:12,106
experience.


58
00:02:12,726 --> 00:02:14,436
Let's start from collaborative


59
00:02:14,506 --> 00:02:14,876
session.


60
00:02:17,116 --> 00:02:19,446
To begin with, let's recap last


61
00:02:19,476 --> 00:02:21,216
year's multiuser AR feature we


62
00:02:21,216 --> 00:02:23,946
delivered in ARKit 2, Map Save


63
00:02:24,566 --> 00:02:25,456
and Load.


64
00:02:25,656 --> 00:02:27,256
In ARKit 2, we delivered Map


65
00:02:27,296 --> 00:02:28,926
Save and Load which is designed


66
00:02:29,006 --> 00:02:30,946
for persistent AR experience.


67
00:02:31,376 --> 00:02:33,316
The user can record their


68
00:02:33,316 --> 00:02:34,866
current AR experience and


69
00:02:34,866 --> 00:02:36,516
recontinue after loading the


70
00:02:37,086 --> 00:02:37,246
map.


71
00:02:37,556 --> 00:02:39,126
The same feature can also be


72
00:02:39,126 --> 00:02:40,866
used for multiuser AR.


73
00:02:41,896 --> 00:02:42,796
Within this feature, we


74
00:02:42,796 --> 00:02:43,936
introduced a data structure


75
00:02:43,936 --> 00:02:45,826
called the ARWorldMap which


76
00:02:45,826 --> 00:02:47,796
contains map of 3D landmarks


77
00:02:48,146 --> 00:02:49,566
that are used for camera


78
00:02:49,626 --> 00:02:50,476
position tracking.


79
00:02:50,986 --> 00:02:53,226
And also, a list of ARAnchors


80
00:02:53,506 --> 00:02:55,516
which represents the 3D corners


81
00:02:55,796 --> 00:02:56,886
of your virtual content.


82
00:02:57,706 --> 00:02:59,266
Within this example, we have a


83
00:02:59,356 --> 00:03:01,266
tabletop scene and we load the


84
00:03:01,266 --> 00:03:02,576
ARWorldMap on top of it.


85
00:03:02,906 --> 00:03:04,406
So, we have several three


86
00:03:04,406 --> 00:03:05,756
landmarks on the table and two


87
00:03:05,756 --> 00:03:06,476
ARAnchors.


88
00:03:08,196 --> 00:03:10,586
When you use this feature for


89
00:03:10,586 --> 00:03:13,496
multiuser AR, each user loaded


90
00:03:13,616 --> 00:03:15,046
from the same ARWorldMap.


91
00:03:15,796 --> 00:03:17,776
Then, ARKit will use the three


92
00:03:17,776 --> 00:03:19,576
landmarks within the ARWorldMap,


93
00:03:19,806 --> 00:03:21,276
try to localize the device


94
00:03:21,276 --> 00:03:22,856
itself against to the map.


95
00:03:24,006 --> 00:03:25,786
Once ARKit managed to do that,


96
00:03:26,276 --> 00:03:27,986
the user can start to see the


97
00:03:27,986 --> 00:03:29,236
same virtual content at the


98
00:03:29,236 --> 00:03:30,336
right physical location.


99
00:03:31,796 --> 00:03:33,586
This feature provides a good


100
00:03:33,586 --> 00:03:35,076
multiuser AR experience.


101
00:03:35,426 --> 00:03:36,786
If you already pre-map the


102
00:03:36,786 --> 00:03:38,546
environment and also have all


103
00:03:38,546 --> 00:03:40,136
the anchors you need saved in


104
00:03:40,136 --> 00:03:40,916
the ARWorldMap.


105
00:03:41,926 --> 00:03:44,226
However, any new information


106
00:03:44,226 --> 00:03:45,886
that ARKit gathered afterwards


107
00:03:45,966 --> 00:03:47,406
won't be shared.


108
00:03:48,116 --> 00:03:50,106
For instance, one of the user


109
00:03:50,106 --> 00:03:51,896
may keep exploring the table on


110
00:03:51,896 --> 00:03:54,666
one side and putting one extra


111
00:03:54,666 --> 00:03:56,636
anchor while the other user


112
00:03:56,636 --> 00:03:57,256
doing the same.


113
00:03:58,316 --> 00:03:59,956
Those newly learned map


114
00:03:59,956 --> 00:04:01,786
information and ARAnchors won't


115
00:04:01,786 --> 00:04:03,306
be visible to all the users.


116
00:04:03,956 --> 00:04:05,836
So, that makes this feature as a


117
00:04:05,836 --> 00:04:07,756
one-time sharing AR experience


118
00:04:08,176 --> 00:04:09,936
and is not optimized for unseen


119
00:04:09,936 --> 00:04:11,686
environment beyond the pre-map


120
00:04:11,686 --> 00:04:12,056
area.


121
00:04:12,146 --> 00:04:15,076
And that is what collaborative


122
00:04:15,076 --> 00:04:16,446
session want to solve for you.


123
00:04:19,516 --> 00:04:21,435
Collaborative session is mainly


124
00:04:21,435 --> 00:04:23,386
designed for the live multiuser


125
00:04:23,386 --> 00:04:24,086
AR experience.


126
00:04:24,776 --> 00:04:26,446
All the learned map information


127
00:04:26,446 --> 00:04:27,746
and anchors are shared


128
00:04:27,746 --> 00:04:29,076
continuously throughout the full


129
00:04:29,076 --> 00:04:29,446
session.


130
00:04:30,086 --> 00:04:32,076
That means any user can add


131
00:04:32,076 --> 00:04:33,876
anchor at any point of time and


132
00:04:33,876 --> 00:04:35,046
that will reflect on all the


133
00:04:35,046 --> 00:04:35,686
users' screen.


134
00:04:35,956 --> 00:04:38,666
And also, every user exploring


135
00:04:38,666 --> 00:04:40,396
the map together, that means


136
00:04:40,496 --> 00:04:42,056
they are benefit each other to


137
00:04:42,056 --> 00:04:44,446
have the best tracking and also


138
00:04:44,446 --> 00:04:45,656
most consistent tracking


139
00:04:45,656 --> 00:04:46,196
experience.


140
00:04:46,686 --> 00:04:48,846
That means this feature is


141
00:04:48,936 --> 00:04:50,656
friendly for unseen environment.


142
00:04:51,026 --> 00:04:52,356
You can also use this feature


143
00:04:52,356 --> 00:04:55,106
with or without the map.


144
00:04:55,106 --> 00:04:57,356
In addition, this feature use a


145
00:04:57,356 --> 00:04:58,896
decentralized design with


146
00:04:58,896 --> 00:05:00,266
peer-to-peer communication


147
00:05:00,266 --> 00:05:01,566
pattern, similar to


148
00:05:01,566 --> 00:05:02,946
MultipeerConnectivity.


149
00:05:03,416 --> 00:05:05,276
Therefore, there is not host


150
00:05:05,496 --> 00:05:06,876
user within the session.


151
00:05:07,796 --> 00:05:09,436
Any user can come join the


152
00:05:09,496 --> 00:05:11,426
session or leave the session at


153
00:05:11,426 --> 00:05:13,126
any point of time without


154
00:05:13,206 --> 00:05:15,316
interrupting others' user AR


155
00:05:15,316 --> 00:05:16,126
experiences.


156
00:05:17,186 --> 00:05:18,336
Let's see one example.


157
00:05:20,376 --> 00:05:23,426
Here, we have two users running


158
00:05:23,426 --> 00:05:24,916
in collaborative sessions.


159
00:05:25,926 --> 00:05:27,456
They both start their own AR


160
00:05:27,456 --> 00:05:28,126
experiences.


161
00:05:28,226 --> 00:05:30,716
At the beginning, they both do a


162
00:05:30,776 --> 00:05:32,516
small world exploration and put


163
00:05:32,516 --> 00:05:33,646
in one ARAnchor.


164
00:05:33,646 --> 00:05:36,696
As the user keeps exploring the


165
00:05:36,696 --> 00:05:38,456
environment, once they start


166
00:05:38,546 --> 00:05:40,136
seeing the area other use have


167
00:05:40,136 --> 00:05:42,376
explored before, the user can


168
00:05:42,376 --> 00:05:44,216
start seeing the ARAnchors added


169
00:05:44,266 --> 00:05:44,766
by others.


170
00:05:45,236 --> 00:05:46,566
In this case, the first user


171
00:05:46,566 --> 00:05:47,996
starts seeing the yellow cube,


172
00:05:48,166 --> 00:05:49,366
while the second user starts


173
00:05:49,366 --> 00:05:50,386
seeing the purple cube.


174
00:05:50,386 --> 00:05:53,276
Afterwards, any anchors that


175
00:05:53,276 --> 00:05:54,746
added by the users will


176
00:05:54,746 --> 00:05:56,176
immediately shows up on the


177
00:05:56,176 --> 00:05:56,836
other's screen.


178
00:05:58,016 --> 00:06:00,126
Because the sharing happens live


179
00:06:00,126 --> 00:06:02,006
continuously, so there is no


180
00:06:02,006 --> 00:06:03,736
interruption for the users' AR


181
00:06:03,736 --> 00:06:04,226
experience.


182
00:06:04,346 --> 00:06:06,766
And also, even most of the


183
00:06:06,766 --> 00:06:08,616
existing multiuser AR app


184
00:06:08,616 --> 00:06:10,096
requires a host user within the


185
00:06:10,136 --> 00:06:10,446
session.


186
00:06:11,196 --> 00:06:13,216
With collaborative session, now


187
00:06:13,216 --> 00:06:14,946
it enables the new possibility


188
00:06:14,946 --> 00:06:16,336
to build a decentralized


189
00:06:16,336 --> 00:06:18,336
multiuser AR app.


190
00:06:18,766 --> 00:06:20,626
Next, I'm going to dive into


191
00:06:20,626 --> 00:06:22,116
more about this decentralized


192
00:06:22,116 --> 00:06:23,776
design and how does it affect


193
00:06:24,016 --> 00:06:25,586
the current systems within


194
00:06:25,586 --> 00:06:26,406
collaborative session.


195
00:06:30,236 --> 00:06:31,646
In this decentralized design,


196
00:06:32,206 --> 00:06:34,136
there is no host user within the


197
00:06:34,136 --> 00:06:34,516
session.


198
00:06:34,846 --> 00:06:36,926
That means each user can start


199
00:06:36,966 --> 00:06:38,976
their own AR experiences before


200
00:06:39,306 --> 00:06:41,016
they start to receiving each


201
00:06:41,016 --> 00:06:41,346
other.


202
00:06:41,836 --> 00:06:43,176
So, that means each user can


203
00:06:43,176 --> 00:06:44,026
have their own AR world


204
00:06:44,026 --> 00:06:44,826
coordinates.


205
00:06:45,386 --> 00:06:46,736
In this example, we have two


206
00:06:46,736 --> 00:06:48,256
user running collaborative


207
00:06:48,256 --> 00:06:48,676
session.


208
00:06:49,136 --> 00:06:51,436
Each user start doing the small


209
00:06:51,436 --> 00:06:52,536
world exploration and putting


210
00:06:52,536 --> 00:06:53,976
one Anchor on each side of the


211
00:06:53,976 --> 00:06:54,306
table.


212
00:06:55,516 --> 00:06:58,166
Then, within the collaborative


213
00:06:58,166 --> 00:07:00,726
session the ARKit will transmit


214
00:07:00,726 --> 00:07:02,156
the so-called the collaboration


215
00:07:02,156 --> 00:07:03,996
data pushes a piece of your


216
00:07:03,996 --> 00:07:05,506
ARWorldMap information to all


217
00:07:05,506 --> 00:07:07,366
the other users and save it as


218
00:07:07,366 --> 00:07:09,526
external maps.


219
00:07:09,526 --> 00:07:11,816
Then, as the user keep exploring


220
00:07:11,816 --> 00:07:13,806
the environment, once they start


221
00:07:13,806 --> 00:07:15,586
to see the same area others have


222
00:07:15,586 --> 00:07:18,366
seen before, ARKit will utilize


223
00:07:18,946 --> 00:07:21,066
those 3D landmarks in the common


224
00:07:21,066 --> 00:07:23,336
area and try to localize itself


225
00:07:23,336 --> 00:07:24,676
against the external map.


226
00:07:25,306 --> 00:07:26,856
When they succeed, those


227
00:07:26,856 --> 00:07:29,196
external maps will merge locally


228
00:07:29,236 --> 00:07:30,726
into each user's local


229
00:07:30,726 --> 00:07:31,086
coordinate.


230
00:07:32,056 --> 00:07:34,306
Note that at this point, user


231
00:07:34,306 --> 00:07:36,106
still have different world


232
00:07:36,106 --> 00:07:36,496
coordinate.


233
00:07:36,846 --> 00:07:39,286
But because ARAnchors is


234
00:07:39,376 --> 00:07:41,316
attached to the map so the user


235
00:07:41,316 --> 00:07:43,596
can still see the virtual object


236
00:07:43,596 --> 00:07:44,956
at the right physical location.


237
00:07:45,256 --> 00:07:47,926
And that is why it is important


238
00:07:48,096 --> 00:07:50,336
to use ARAnchor in collaborative


239
00:07:50,336 --> 00:07:50,716
session.


240
00:07:52,086 --> 00:07:53,976
So, let's take a look how to use


241
00:07:53,976 --> 00:07:55,996
collaborative session in ARKit


242
00:07:58,116 --> 00:07:58,226
3.


243
00:07:58,436 --> 00:07:59,826
In order to use collaborative


244
00:07:59,826 --> 00:08:01,666
session, first you need to make


245
00:08:01,666 --> 00:08:03,176
sure all the users are in the


246
00:08:03,256 --> 00:08:04,366
same networking layer.


247
00:08:05,016 --> 00:08:06,526
This networking layer can be


248
00:08:06,606 --> 00:08:08,866
either MultipeerConnectivity or


249
00:08:08,866 --> 00:08:10,476
any other alternative solution


250
00:08:10,696 --> 00:08:12,186
that provides reliable


251
00:08:12,186 --> 00:08:12,766
communication.


252
00:08:13,916 --> 00:08:15,456
Once they are in the same


253
00:08:15,456 --> 00:08:17,076
networking layer, they can


254
00:08:17,076 --> 00:08:18,346
transmit information to each


255
00:08:18,346 --> 00:08:18,676
other.


256
00:08:19,176 --> 00:08:21,156
Then, you simply need to enable


257
00:08:21,226 --> 00:08:23,006
collaboration in your own AR


258
00:08:23,006 --> 00:08:23,446
session.


259
00:08:24,146 --> 00:08:26,146
Once that is enabled, your AR


260
00:08:26,196 --> 00:08:28,126
session will periodically


261
00:08:28,126 --> 00:08:29,436
generate the collaboration data


262
00:08:29,436 --> 00:08:30,376
as I mentioned before.


263
00:08:30,706 --> 00:08:31,816
Then, it is the app's


264
00:08:31,876 --> 00:08:33,796
responsibility to transmit this


265
00:08:33,796 --> 00:08:35,306
data to all the other users.


266
00:08:35,366 --> 00:08:39,135
That is the only new code you


267
00:08:39,135 --> 00:08:41,366
need to add in ARKit 3 in order


268
00:08:41,366 --> 00:08:42,655
to use collaborative session.


269
00:08:43,126 --> 00:08:44,346
Let's take a look.


270
00:08:46,116 --> 00:08:47,906
To begin with, you need to


271
00:08:47,906 --> 00:08:49,076
create a AR world tracking


272
00:08:49,076 --> 00:08:49,706
configuration.


273
00:08:50,176 --> 00:08:51,806
Then, you simply set the


274
00:08:51,806 --> 00:08:53,936
isCollaborationEnabled to true.


275
00:08:54,636 --> 00:08:57,286
Then, you just run a session.run


276
00:08:57,376 --> 00:08:58,866
to run your AR session.


277
00:08:59,356 --> 00:09:02,006
If you are using RealityKit,


278
00:09:02,126 --> 00:09:03,446
this is the only new code you


279
00:09:03,446 --> 00:09:04,766
need to add to use collaborative


280
00:09:04,766 --> 00:09:05,116
session.


281
00:09:05,606 --> 00:09:07,256
If you are not using RealityKit,


282
00:09:07,546 --> 00:09:08,866
then you need to implement


283
00:09:09,386 --> 00:09:10,726
additional two delegate


284
00:09:10,726 --> 00:09:11,926
functions to transmit the


285
00:09:11,926 --> 00:09:12,676
collaboration data.


286
00:09:13,406 --> 00:09:15,396
The first delegate function is


287
00:09:15,396 --> 00:09:15,906
ARSession


288
00:09:15,906 --> 00:09:18,356
didOutputcollaborationData.


289
00:09:18,356 --> 00:09:19,736
When your own AR session create


290
00:09:19,736 --> 00:09:20,696
this collaboration data, you


291
00:09:20,696 --> 00:09:21,856
need to transmit to all the


292
00:09:21,856 --> 00:09:22,526
other users.


293
00:09:22,986 --> 00:09:25,186
Here, we have one example using


294
00:09:25,186 --> 00:09:26,286
MultipeerConnectivity.


295
00:09:27,216 --> 00:09:28,756
If your networking solution


296
00:09:28,936 --> 00:09:30,666
replies a failure to transmit


297
00:09:30,666 --> 00:09:33,026
this data, then it is your app's


298
00:09:33,076 --> 00:09:34,556
responsibility to transmit this


299
00:09:34,556 --> 00:09:36,546
data again to make sure the data


300
00:09:36,546 --> 00:09:37,116
is delivered.


301
00:09:38,316 --> 00:09:40,756
Then, once you receive this


302
00:09:40,756 --> 00:09:43,036
data, you simply need to call


303
00:09:43,096 --> 00:09:44,936
arSession.update delegate


304
00:09:44,936 --> 00:09:47,036
function to pass this received


305
00:09:47,036 --> 00:09:48,896
data to your underlying AR


306
00:09:48,896 --> 00:09:49,256
session.


307
00:09:50,266 --> 00:09:51,536
By implementing these two


308
00:09:51,536 --> 00:09:53,146
delegate functions, you complete


309
00:09:53,146 --> 00:09:54,436
the flow to transmit


310
00:09:54,716 --> 00:09:55,576
collaboration data.


311
00:09:58,316 --> 00:09:59,886
Once the collaboration data


312
00:09:59,886 --> 00:10:01,436
transmission is running in the


313
00:10:01,436 --> 00:10:03,076
background, the transmission


314
00:10:03,076 --> 00:10:04,526
will happens throughout the


315
00:10:04,526 --> 00:10:04,926
whole session.


316
00:10:05,896 --> 00:10:07,706
Then, for each user, they just


317
00:10:07,706 --> 00:10:09,196
start their own AR experience,


318
00:10:09,196 --> 00:10:09,766
as before.


319
00:10:09,816 --> 00:10:12,696
As I mentioned earlier, the


320
00:10:12,696 --> 00:10:15,046
shared AR experience will begin


321
00:10:15,046 --> 00:10:16,626
after the user can localize


322
00:10:16,686 --> 00:10:18,426
itself against the other user's


323
00:10:18,426 --> 00:10:18,686
map.


324
00:10:19,546 --> 00:10:21,606
When that happen, your own AR


325
00:10:21,606 --> 00:10:23,066
session will start to receive


326
00:10:23,126 --> 00:10:25,086
the first ARAnchors added by


327
00:10:25,086 --> 00:10:27,226
others which can be served as


328
00:10:27,226 --> 00:10:28,896
indication of the beginning of


329
00:10:28,896 --> 00:10:30,376
your shared AR experiences.


330
00:10:31,496 --> 00:10:32,806
Let's look at some new


331
00:10:32,806 --> 00:10:34,686
properties for ARAnchors in


332
00:10:34,686 --> 00:10:35,506
collaborative session.


333
00:10:35,966 --> 00:10:40,336
Within collaborative session,


334
00:10:40,986 --> 00:10:42,936
all the user created ARAnchors


335
00:10:43,086 --> 00:10:44,656
are lifetime are synchronized.


336
00:10:45,196 --> 00:10:46,736
That means the user can add or


337
00:10:46,736 --> 00:10:48,416
remove the anchors at any point


338
00:10:48,416 --> 00:10:50,076
of time and that will reflect to


339
00:10:50,076 --> 00:10:50,966
all the other users.


340
00:10:50,966 --> 00:10:53,486
And also, we add a session


341
00:10:53,486 --> 00:10:55,686
identifier to each ARAnchor


342
00:10:55,986 --> 00:10:57,976
which can be used as a indicator


343
00:10:57,976 --> 00:11:00,386
who is the original creator of


344
00:11:00,426 --> 00:11:02,486
this ARAnchor, so your app can


345
00:11:02,486 --> 00:11:03,426
react accordingly.


346
00:11:03,426 --> 00:11:06,986
Last, only the user created


347
00:11:06,986 --> 00:11:08,106
ARAnchors are shared.


348
00:11:08,166 --> 00:11:10,256
That excludes all the subclass


349
00:11:10,256 --> 00:11:11,706
ARAnchors, including


350
00:11:11,956 --> 00:11:14,166
ARImageAnchor, ARPlaneAnchor,


351
00:11:14,286 --> 00:11:15,346
and ARObjectAnchor.


352
00:11:15,346 --> 00:11:17,746
That also excludes the user


353
00:11:17,746 --> 00:11:19,486
subclass ARAnchor which were


354
00:11:19,486 --> 00:11:21,886
used to attach user data within


355
00:11:21,886 --> 00:11:22,626
Map Save and Load.


356
00:11:22,756 --> 00:11:25,316
At the beginning, you may think


357
00:11:25,436 --> 00:11:27,176
this is the drawback of this, of


358
00:11:27,226 --> 00:11:28,906
this collaborative session


359
00:11:28,906 --> 00:11:29,316
design.


360
00:11:29,586 --> 00:11:30,216
But don't worry.


361
00:11:30,936 --> 00:11:31,996
This is where collaborative


362
00:11:31,996 --> 00:11:33,976
session and RealityKit plays


363
00:11:34,016 --> 00:11:36,346
well hand-in-hand.


364
00:11:36,346 --> 00:11:38,666
By using RealityKit, you can


365
00:11:38,666 --> 00:11:40,446
attach your user data to


366
00:11:40,446 --> 00:11:41,976
corresponding entity component.


367
00:11:42,546 --> 00:11:44,176
Once you attach your user entity


368
00:11:44,216 --> 00:11:45,576
to the corresponding ARAnchor,


369
00:11:45,916 --> 00:11:47,046
all those information will be


370
00:11:47,046 --> 00:11:48,106
synchronized under hood,


371
00:11:48,256 --> 00:11:49,626
including all the physical


372
00:11:50,136 --> 00:11:51,636
simulation, scene change, and


373
00:11:51,636 --> 00:11:52,166
sound effects.


374
00:11:53,156 --> 00:11:54,246
For more information, you may


375
00:11:54,246 --> 00:11:55,826
want to check Introducing


376
00:11:55,826 --> 00:11:57,666
RealityKit and Reality Composer


377
00:11:57,906 --> 00:11:59,356
that we present in Tuesday.


378
00:11:59,836 --> 00:12:03,266
So, let's take a look about the


379
00:12:03,266 --> 00:12:05,836
code, how to use ARAnchor in


380
00:12:05,836 --> 00:12:09,446
collaborative session.


381
00:12:09,476 --> 00:12:10,706
Now, within collaborative


382
00:12:10,706 --> 00:12:12,116
session, when you receive


383
00:12:12,326 --> 00:12:14,586
ARSession didAddAnchors


384
00:12:14,586 --> 00:12:16,526
delegate function, you may want to check


385
00:12:16,746 --> 00:12:18,326
the session identifier to see


386
00:12:18,326 --> 00:12:20,056
whether this anchor is added by


387
00:12:20,056 --> 00:12:21,636
yourself or added by others.


388
00:12:22,526 --> 00:12:24,476
Same thing when you receive the


389
00:12:24,476 --> 00:12:26,366
ARSession didRemove anchor.


390
00:12:26,676 --> 00:12:27,866
You may also want to check


391
00:12:27,866 --> 00:12:29,176
whether it's removed by yourself


392
00:12:29,176 --> 00:12:31,606
or by others, so your app can


393
00:12:31,606 --> 00:12:32,536
react accordingly.


394
00:12:32,536 --> 00:12:35,716
So, that summarize the ARAnchor


395
00:12:36,146 --> 00:12:37,386
which represents the 3D


396
00:12:37,386 --> 00:12:38,406
[inaudible] existence of your


397
00:12:38,406 --> 00:12:39,056
virtual object.


398
00:12:40,006 --> 00:12:41,516
Further, in collaborative


399
00:12:41,516 --> 00:12:43,646
session it's also important to


400
00:12:43,646 --> 00:12:45,556
know other users' position.


401
00:12:46,126 --> 00:12:47,776
For that, we introduce a new


402
00:12:47,776 --> 00:12:48,676
anchor called


403
00:12:49,216 --> 00:12:50,786
ARParticipantAnchor.


404
00:12:52,136 --> 00:12:54,576
ARParticipantAnchor represents


405
00:12:54,576 --> 00:12:56,486
other users' location within


406
00:12:56,486 --> 00:12:57,696
your own world coordinates.


407
00:12:58,606 --> 00:13:00,566
It has a high frame rate update


408
00:13:00,566 --> 00:13:02,366
rate, same as other users' AR


409
00:13:02,366 --> 00:13:02,776
frame rate.


410
00:13:04,046 --> 00:13:05,936
This ARParticipantAnchor is


411
00:13:05,936 --> 00:13:08,056
ultimately created by your own


412
00:13:08,056 --> 00:13:09,866
AR session when it managed to


413
00:13:09,866 --> 00:13:11,296
localize itself against the


414
00:13:11,296 --> 00:13:13,516
other user's map which means you


415
00:13:13,516 --> 00:13:14,836
can also use this


416
00:13:14,836 --> 00:13:16,266
ARParticipantAnchor as


417
00:13:16,266 --> 00:13:18,406
indication of the beginning of


418
00:13:18,436 --> 00:13:19,886
your shared AR experience.


419
00:13:21,356 --> 00:13:23,196
By using ARAnchor and


420
00:13:23,196 --> 00:13:25,106
ARParticipantAnchor, you can


421
00:13:25,106 --> 00:13:26,846
correctly visualize other users'


422
00:13:26,926 --> 00:13:28,786
3D content in your own world


423
00:13:28,786 --> 00:13:29,176
coordinate.


424
00:13:29,746 --> 00:13:32,826
So, that is how you would use


425
00:13:32,876 --> 00:13:34,246
collaborative session in ARKit


426
00:13:34,246 --> 00:13:34,516
3.


427
00:13:35,186 --> 00:13:36,646
Let's look at some practical


428
00:13:36,646 --> 00:13:38,916
advice how to start a shared AR


429
00:13:38,916 --> 00:13:40,106
experience using collaborative


430
00:13:40,106 --> 00:13:40,466
session.


431
00:13:43,046 --> 00:13:45,456
As I mentioned before, a shared


432
00:13:45,456 --> 00:13:47,376
AR experience will begin after


433
00:13:47,376 --> 00:13:49,236
each users localize their self


434
00:13:49,236 --> 00:13:50,246
in other users' map.


435
00:13:50,466 --> 00:13:52,026
That means they have to see the


436
00:13:52,026 --> 00:13:53,416
area other user have seen


437
00:13:53,416 --> 00:13:53,776
before.


438
00:13:54,366 --> 00:13:56,146
But sometimes, depends on users'


439
00:13:56,196 --> 00:13:57,806
motion, this could take time.


440
00:13:58,586 --> 00:13:59,826
If you want the user to have


441
00:14:00,146 --> 00:14:01,716
shared experience faster, we


442
00:14:01,716 --> 00:14:02,576
have two advice.


443
00:14:03,766 --> 00:14:05,956
First, it is recommended to have


444
00:14:05,956 --> 00:14:07,626
one of the user approach to the


445
00:14:07,626 --> 00:14:09,076
other user to have the same


446
00:14:09,076 --> 00:14:09,936
camera perspective.


447
00:14:10,616 --> 00:14:12,096
For instance, in this example,


448
00:14:12,336 --> 00:14:13,536
we have two users seeing the


449
00:14:13,596 --> 00:14:15,126
table but they are seeing in


450
00:14:15,126 --> 00:14:15,876
cross direction.


451
00:14:16,336 --> 00:14:19,026
Then, it's not likely for ARKit


452
00:14:19,026 --> 00:14:20,806
to localize them self to begin


453
00:14:20,806 --> 00:14:21,886
the shared AR experience.


454
00:14:22,526 --> 00:14:24,476
However, if you have two users


455
00:14:24,476 --> 00:14:25,766
stand side-by-side and looking


456
00:14:25,766 --> 00:14:27,596
at the same direction, then it


457
00:14:27,596 --> 00:14:29,256
is more likely for ARKit to


458
00:14:29,256 --> 00:14:31,406
localize and also to start a


459
00:14:31,406 --> 00:14:32,866
shared AR experience.


460
00:14:34,016 --> 00:14:36,026
Second, while you are doing


461
00:14:36,026 --> 00:14:38,396
this, it is the best to have one


462
00:14:38,396 --> 00:14:40,316
your user stay in map-tracking


463
00:14:40,376 --> 00:14:40,766
status.


464
00:14:41,136 --> 00:14:42,266
That is, ARFrame


465
00:14:42,266 --> 00:14:43,426
WorldMappingStatus mapped.


466
00:14:44,396 --> 00:14:46,546
By doing this, you make sure one


467
00:14:46,546 --> 00:14:48,206
of the user is actually seeing


468
00:14:48,206 --> 00:14:49,956
the 3D landmarks that are stored


469
00:14:49,956 --> 00:14:51,256
inside the ARWorldMap,


470
00:14:51,636 --> 00:14:53,006
therefore, when the other user


471
00:14:53,006 --> 00:14:55,056
approach it is more likely they


472
00:14:55,056 --> 00:14:56,936
can use those three landmarks to


473
00:14:56,936 --> 00:14:58,376
localize them self and start a


474
00:14:58,376 --> 00:14:59,596
shared AR experience.


475
00:15:00,916 --> 00:15:02,726
Let's see one example.


476
00:15:04,156 --> 00:15:06,526
Here, we have two users running


477
00:15:06,526 --> 00:15:07,556
in collaborative session.


478
00:15:08,036 --> 00:15:10,236
The first user simply do a small


479
00:15:10,236 --> 00:15:12,006
world exploration and adding one


480
00:15:12,006 --> 00:15:13,296
ARAnchor and stay in


481
00:15:13,566 --> 00:15:15,056
map-tracking status.


482
00:15:15,746 --> 00:15:17,516
While the other user simply


483
00:15:17,516 --> 00:15:19,116
approach the first user and see


484
00:15:19,116 --> 00:15:20,636
the same view, then they will


485
00:15:20,636 --> 00:15:22,236
start seeing the same anchors


486
00:15:22,566 --> 00:15:24,696
which is used to also indicate


487
00:15:24,886 --> 00:15:26,506
the beginning of your shared AR


488
00:15:26,506 --> 00:15:27,056
experience.


489
00:15:28,256 --> 00:15:30,546
This device is also applicable


490
00:15:30,546 --> 00:15:32,296
for last year Map Save and Load.


491
00:15:32,616 --> 00:15:34,006
So, you may want to put this


492
00:15:34,006 --> 00:15:35,656
advice in your app to recommend


493
00:15:36,246 --> 00:15:38,106
the motion of two user so user


494
00:15:38,106 --> 00:15:39,656
can start their shared AR


495
00:15:39,656 --> 00:15:41,176
experience faster.


496
00:15:42,096 --> 00:15:43,956
So, that summarize our


497
00:15:43,956 --> 00:15:45,736
introduction and suggestion for


498
00:15:45,736 --> 00:15:47,246
using collaborative session.


499
00:15:47,746 --> 00:15:50,616
Our API is simple and intuitive.


500
00:15:51,376 --> 00:15:53,036
With RealityKit, you only need


501
00:15:53,036 --> 00:15:54,556
to add a few lines to enable the


502
00:15:54,556 --> 00:15:55,116
experience.


503
00:15:55,596 --> 00:15:57,266
I encourage you to give it a try


504
00:15:57,326 --> 00:15:59,606
and see the new multiuser AR


505
00:15:59,606 --> 00:16:00,856
experience in ARKit 3.


506
00:16:02,186 --> 00:16:05,216
Next, I would like to talk about


507
00:16:05,276 --> 00:16:07,236
the best practices for using


508
00:16:07,266 --> 00:16:07,956
ARAnchors.


509
00:16:07,956 --> 00:16:12,686
As I mentioned before, ARAnchors


510
00:16:12,836 --> 00:16:14,356
are the main way to share


511
00:16:14,356 --> 00:16:15,816
virtual content within


512
00:16:15,816 --> 00:16:16,646
collaborative session.


513
00:16:17,656 --> 00:16:19,916
Here, we have three simple but


514
00:16:19,916 --> 00:16:22,346
effective suggestions for using


515
00:16:22,346 --> 00:16:22,906
ARAnchor.


516
00:16:23,686 --> 00:16:25,836
To begin with, let's look back


517
00:16:25,836 --> 00:16:27,306
the ARWorldMap.


518
00:16:28,856 --> 00:16:31,116
As I mentioned before, each


519
00:16:31,176 --> 00:16:33,556
ARWorldMap consists collection


520
00:16:33,556 --> 00:16:36,276
with 3D map landmarks and, also,


521
00:16:36,276 --> 00:16:37,546
list of ARAnchors.


522
00:16:38,276 --> 00:16:39,696
In addition, we also save


523
00:16:39,696 --> 00:16:41,536
collection of camera poses.


524
00:16:42,126 --> 00:16:43,806
Those camera poses represent the


525
00:16:43,806 --> 00:16:45,646
camera view when three landmarks


526
00:16:45,706 --> 00:16:46,506
are first observed.


527
00:16:47,116 --> 00:16:48,606
For instance, in this example,


528
00:16:48,606 --> 00:16:50,816
we have five camera poses where


529
00:16:51,016 --> 00:16:52,286
they are created when the three


530
00:16:52,286 --> 00:16:53,966
landmarks are first created.


531
00:16:55,116 --> 00:16:57,676
So, with this camera view we can


532
00:16:57,736 --> 00:16:59,516
segment the three landmarks into


533
00:16:59,516 --> 00:17:00,966
different groups to present


534
00:17:00,966 --> 00:17:03,046
different parts of the map.


535
00:17:03,916 --> 00:17:06,126
Once you have those views, when


536
00:17:06,126 --> 00:17:09,886
the user added one ARAnchor, the


537
00:17:09,886 --> 00:17:11,326
user will provide a global


538
00:17:11,326 --> 00:17:12,816
position of this ARAnchor


539
00:17:13,026 --> 00:17:14,175
respect to the world coordinate.


540
00:17:14,886 --> 00:17:16,856
However, what is actually save


541
00:17:17,036 --> 00:17:19,046
within our ARWorldMap is the


542
00:17:19,046 --> 00:17:20,546
relative position of this


543
00:17:20,546 --> 00:17:22,256
ARAnchor to the one of the


544
00:17:22,256 --> 00:17:22,935
nearest view.


545
00:17:23,596 --> 00:17:26,536
It is this relative positions


546
00:17:26,606 --> 00:17:27,986
we're keeping inside the


547
00:17:27,986 --> 00:17:30,346
ARWorldMap and also transmit in


548
00:17:30,346 --> 00:17:31,446
the collaborative session.


549
00:17:31,726 --> 00:17:33,756
To make sure, even if issues are


550
00:17:33,756 --> 00:17:34,996
have different world coordinate,


551
00:17:35,296 --> 00:17:36,896
they still can see the ARAnchor


552
00:17:37,006 --> 00:17:38,306
at the right physical location.


553
00:17:39,196 --> 00:17:40,666
So, once again, that is why it


554
00:17:40,666 --> 00:17:43,016
is important to use ARAnchors in


555
00:17:43,016 --> 00:17:43,786
collaborative session.


556
00:17:45,286 --> 00:17:46,776
With this knowledge in mind,


557
00:17:47,046 --> 00:17:48,666
let's look at our best practices


558
00:17:48,666 --> 00:17:50,296
for using ARAnchor.


559
00:17:52,476 --> 00:17:55,586
First, always respond to the


560
00:17:55,586 --> 00:17:56,656
ARAnchor update.


561
00:17:56,706 --> 00:17:59,546
As AR [inaudible] exploring the


562
00:17:59,546 --> 00:18:01,246
map more and more, it will


563
00:18:01,356 --> 00:18:02,686
optimize the 3D landmarks


564
00:18:02,766 --> 00:18:04,546
position by fine-tune the camera


565
00:18:04,546 --> 00:18:05,346
pose location.


566
00:18:05,896 --> 00:18:08,036
When that happen, your ARAnchor


567
00:18:08,036 --> 00:18:09,426
position will change as well


568
00:18:09,856 --> 00:18:11,116
because it is attached to the


569
00:18:11,116 --> 00:18:11,376
view.


570
00:18:12,216 --> 00:18:14,346
So, you need to react to those


571
00:18:14,346 --> 00:18:15,926
anchor update function so you


572
00:18:15,926 --> 00:18:18,076
can change your virtual object


573
00:18:18,456 --> 00:18:19,426
position accordingly.


574
00:18:20,406 --> 00:18:22,616
Second, when you place your


575
00:18:22,616 --> 00:18:24,116
virtual object, it is the best


576
00:18:24,226 --> 00:18:25,886
to place virtual object near to


577
00:18:25,886 --> 00:18:27,766
the ARAnchor but not far away


578
00:18:27,766 --> 00:18:29,576
from the ARAnchor.


579
00:18:29,576 --> 00:18:30,846
The reasoning is the same as


580
00:18:30,926 --> 00:18:31,366
before.


581
00:18:31,736 --> 00:18:33,146
When the anchor update happens,


582
00:18:33,346 --> 00:18:34,716
if you have virtual object far


583
00:18:34,716 --> 00:18:36,296
away from the ARAnchor, then you


584
00:18:36,296 --> 00:18:37,516
could experience a large and


585
00:18:37,516 --> 00:18:38,866
spatial update to your virtual


586
00:18:38,866 --> 00:18:40,576
object which is not desirable.


587
00:18:41,006 --> 00:18:42,676
So, it is the best to place your


588
00:18:42,676 --> 00:18:44,326
virtual object near to the


589
00:18:44,326 --> 00:18:46,176
ARAnchor, so you can represent


590
00:18:46,176 --> 00:18:47,726
the tracking quality correctly.


591
00:18:47,726 --> 00:18:52,016
Last, if you have multiple


592
00:18:52,016 --> 00:18:53,446
independent virtual objects,


593
00:18:53,906 --> 00:18:55,816
then it is recommended to use


594
00:18:55,816 --> 00:18:57,906
multiple ARAnchors so they will


595
00:18:57,906 --> 00:18:59,326
attach to different parts of the


596
00:18:59,326 --> 00:18:59,676
maps.


597
00:19:00,026 --> 00:19:01,716
Therefore, make sure virtual


598
00:19:01,716 --> 00:19:03,446
object to corresponding ARAnchor


599
00:19:03,446 --> 00:19:04,456
distance is small.


600
00:19:05,576 --> 00:19:07,586
However, if you have a scenario


601
00:19:07,616 --> 00:19:09,306
where you have multiple virtual


602
00:19:09,306 --> 00:19:10,486
objects that you want to


603
00:19:10,486 --> 00:19:12,366
maintain their relative


604
00:19:12,396 --> 00:19:12,836
distance.


605
00:19:13,276 --> 00:19:15,386
Then, it is legitimate to use


606
00:19:15,456 --> 00:19:17,666
one single ARAnchor to represent


607
00:19:17,666 --> 00:19:19,616
them all as long as they are not


608
00:19:19,616 --> 00:19:20,916
far away from the anchors.


609
00:19:21,466 --> 00:19:25,176
So, that summarize our best


610
00:19:25,246 --> 00:19:26,946
practices for using ARAnchors.


611
00:19:27,996 --> 00:19:29,016
By following those best


612
00:19:29,096 --> 00:19:30,956
practices, you can utilize the


613
00:19:30,956 --> 00:19:32,956
best tracking quality that ARKit


614
00:19:32,956 --> 00:19:34,386
provides to your app.


615
00:19:36,496 --> 00:19:38,026
Next, we're going to move to


616
00:19:38,026 --> 00:19:39,486
David to talk about SwiftStrike.


617
00:19:40,411 --> 00:19:42,411
[ Applause ]


618
00:19:42,806 --> 00:19:43,026
>> Thanks.


619
00:19:43,226 --> 00:19:43,456
Well done.


620
00:19:45,136 --> 00:19:45,796
Hi, everyone.


621
00:19:45,876 --> 00:19:47,396
I'm David and I'm here to talk


622
00:19:47,396 --> 00:19:48,926
to you about SwiftStrike which


623
00:19:48,926 --> 00:19:50,426
is the new multiplayer AR


624
00:19:50,426 --> 00:19:52,176
experience that we developed for


625
00:19:52,176 --> 00:19:54,276
the show here at WWDC 2019.


626
00:19:55,136 --> 00:19:56,306
We were inspired by the work we


627
00:19:56,306 --> 00:19:58,196
did last year with SwiftShot and


628
00:19:58,196 --> 00:19:59,666
we wanted to build something new


629
00:19:59,786 --> 00:20:01,446
that leveraged RealityKit and


630
00:20:01,446 --> 00:20:02,676
ARKit 3 to deliver an all-new


631
00:20:02,676 --> 00:20:02,976
experience.


632
00:20:03,246 --> 00:20:05,676
We have a Tabletop version


633
00:20:05,676 --> 00:20:06,826
that's available as sample code


634
00:20:06,826 --> 00:20:07,076
now.


635
00:20:07,476 --> 00:20:08,586
And we're working on releasing


636
00:20:08,586 --> 00:20:09,846
the full version as sample code


637
00:20:09,846 --> 00:20:10,296
in the future.


638
00:20:11,206 --> 00:20:13,656
If you want to, you can also go


639
00:20:13,776 --> 00:20:15,006
look at last year's session


640
00:20:15,006 --> 00:20:15,846
about SwiftShot.


641
00:20:15,846 --> 00:20:16,906
I'm going to talk a little bit


642
00:20:16,906 --> 00:20:18,086
about a couple of things we did


643
00:20:18,086 --> 00:20:20,156
in SwiftShot and compare and


644
00:20:20,156 --> 00:20:21,236
contrast what we're doing this


645
00:20:21,236 --> 00:20:21,396
year.


646
00:20:21,396 --> 00:20:22,226
So, you may want to take a look


647
00:20:22,326 --> 00:20:24,296
at that.


648
00:20:24,296 --> 00:20:25,356
Now, there's a lot that goes


649
00:20:25,356 --> 00:20:26,336
into building a game like


650
00:20:26,336 --> 00:20:26,956
SwiftStrike.


651
00:20:26,986 --> 00:20:28,316
There's sound design, asset


652
00:20:28,316 --> 00:20:30,716
design, animations, all kinds of


653
00:20:30,716 --> 00:20:31,006
things.


654
00:20:31,506 --> 00:20:32,536
I'm really going to focus on


655
00:20:32,536 --> 00:20:33,466
three areas here.


656
00:20:34,266 --> 00:20:35,996
How we use RealityKit networking


657
00:20:36,146 --> 00:20:37,466
to get the shared experience up


658
00:20:37,466 --> 00:20:37,916
and running.


659
00:20:38,406 --> 00:20:40,286
The physics simulation to make


660
00:20:40,286 --> 00:20:41,346
sure that the game played and


661
00:20:41,346 --> 00:20:41,796
was fun.


662
00:20:42,266 --> 00:20:45,206
And also, a little bit about how


663
00:20:45,206 --> 00:20:46,626
we designed the game around the


664
00:20:46,626 --> 00:20:49,216
new capabilities of RealityKit


665
00:20:49,216 --> 00:20:51,376
and ARKit 3.


666
00:20:51,586 --> 00:20:52,666
So, first, RealityKit


667
00:20:52,666 --> 00:20:53,086
networking.


668
00:20:53,756 --> 00:20:55,186
RealityKit networking is based


669
00:20:55,186 --> 00:20:56,176
on the entity-component


670
00:20:56,176 --> 00:20:57,496
architecture that's built into


671
00:20:57,496 --> 00:20:58,126
RealityKit.


672
00:20:58,726 --> 00:20:59,776
As you write and change


673
00:20:59,776 --> 00:21:00,636
components, they're


674
00:21:00,636 --> 00:21:01,836
automatically synchronized


675
00:21:01,936 --> 00:21:03,026
across the network for you


676
00:21:03,406 --> 00:21:04,666
including all the physics state.


677
00:21:04,986 --> 00:21:06,126
You don't have to do any of that


678
00:21:06,126 --> 00:21:06,736
code yourself.


679
00:21:07,956 --> 00:21:09,136
You can also define custom


680
00:21:09,136 --> 00:21:12,146
components for your own apps,


681
00:21:12,146 --> 00:21:13,746
application, or game, game


682
00:21:13,746 --> 00:21:14,036
logic.


683
00:21:14,036 --> 00:21:14,926
And it will take care of the


684
00:21:14,926 --> 00:21:15,916
synchronization for you, as


685
00:21:15,916 --> 00:21:16,076
well.


686
00:21:17,146 --> 00:21:18,956
It used MultipeerConnectivity as


687
00:21:18,956 --> 00:21:19,746
the network layer.


688
00:21:19,746 --> 00:21:21,176
This is built into all iOS and


689
00:21:21,176 --> 00:21:22,136
macOS devices.


690
00:21:22,136 --> 00:21:23,606
It's easy to set up and get


691
00:21:23,606 --> 00:21:23,816
going.


692
00:21:25,046 --> 00:21:26,646
And it, all you have to do is


693
00:21:26,646 --> 00:21:27,806
create that network session,


694
00:21:28,106 --> 00:21:29,676
hand it to the ARView object,


695
00:21:29,676 --> 00:21:31,286
and it takes care of the rest.


696
00:21:31,666 --> 00:21:33,076
That includes moving the


697
00:21:33,076 --> 00:21:34,566
collaborative mapping data that


698
00:21:34,566 --> 00:21:35,966
Kuen-han talked about with the


699
00:21:35,966 --> 00:21:37,506
new ARKit 3 collaborative


700
00:21:37,506 --> 00:21:37,766
mapping.


701
00:21:37,946 --> 00:21:42,016
And so, in SwiftStrike, we


702
00:21:42,016 --> 00:21:43,276
discovered that the best way to


703
00:21:43,276 --> 00:21:45,186
get things working you know,


704
00:21:45,586 --> 00:21:46,636
MultipeerConnectivity,


705
00:21:46,636 --> 00:21:49,226
RealityKit are all hostless,


706
00:21:49,426 --> 00:21:51,336
true peer-to-peer systems.


707
00:21:51,706 --> 00:21:52,876
We discovered that for our game


708
00:21:52,876 --> 00:21:53,976
to really get things working we


709
00:21:53,976 --> 00:21:55,436
needed to define one device as


710
00:21:55,466 --> 00:21:55,906
the host.


711
00:21:56,466 --> 00:21:58,216
It's the one that keeps track of


712
00:21:58,216 --> 00:21:59,526
what the state of the game is


713
00:21:59,956 --> 00:22:01,256
and how the physics is working.


714
00:22:01,856 --> 00:22:03,346
The other devices participate


715
00:22:03,346 --> 00:22:05,266
and provide input and also


716
00:22:05,266 --> 00:22:06,576
receive the information from the


717
00:22:06,576 --> 00:22:07,846
host about where the game is


718
00:22:08,486 --> 00:22:08,676
running.


719
00:22:09,996 --> 00:22:11,256
So, again, about custom


720
00:22:11,256 --> 00:22:12,456
components in RealityKit.


721
00:22:12,776 --> 00:22:13,886
They're really easy to set up.


722
00:22:14,436 --> 00:22:17,186
You define a struct.


723
00:22:17,496 --> 00:22:18,476
You register the components


724
00:22:18,476 --> 00:22:19,806
before you instantiate the


725
00:22:19,806 --> 00:22:20,216
ARView.


726
00:22:20,716 --> 00:22:22,096
And you comply with the Swift


727
00:22:22,146 --> 00:22:22,986
Codable protocol.


728
00:22:23,366 --> 00:22:24,226
That provides all the


729
00:22:24,226 --> 00:22:26,146
information RealityKit needs to


730
00:22:26,146 --> 00:22:27,596
serialize your structure and


731
00:22:27,596 --> 00:22:28,506
send it across the network.


732
00:22:29,066 --> 00:22:32,246
So, here's one way we use that


733
00:22:32,246 --> 00:22:34,106
in the game.


734
00:22:34,946 --> 00:22:35,756
We've discovered through


735
00:22:35,756 --> 00:22:37,256
playtesting in SwiftStrike, it


736
00:22:37,256 --> 00:22:38,236
was really important to make


737
00:22:38,236 --> 00:22:39,906
sure that both players were


738
00:22:39,906 --> 00:22:40,916
positioned in their starting


739
00:22:40,916 --> 00:22:42,416
spot when the game starts.


740
00:22:42,786 --> 00:22:43,906
Otherwise, it was possible for


741
00:22:43,906 --> 00:22:44,996
one player to get an advantage,


742
00:22:44,996 --> 00:22:46,566
be closer to the ball, and kind


743
00:22:46,566 --> 00:22:47,936
of get around the other user.


744
00:22:48,926 --> 00:22:50,296
So, we have an object we call


745
00:22:50,296 --> 00:22:50,986
the Match object.


746
00:22:50,986 --> 00:22:52,676
It keeps track of whether or not


747
00:22:52,676 --> 00:22:54,016
each player is in the starting


748
00:22:54,016 --> 00:22:56,096
space or not and then, decides


749
00:22:56,096 --> 00:22:56,866
when to launch the ball.


750
00:22:56,866 --> 00:22:59,316
That state is also synchronized


751
00:22:59,316 --> 00:23:01,026
over the clients so that we can


752
00:23:01,026 --> 00:23:02,546
present instructions to them


753
00:23:02,546 --> 00:23:04,386
using UIKit as to where they


754
00:23:04,386 --> 00:23:04,866
need to stand.


755
00:23:06,056 --> 00:23:07,776
The component also maintains a


756
00:23:07,776 --> 00:23:08,966
log of all those states.


757
00:23:09,356 --> 00:23:10,436
There's not many that it goes


758
00:23:10,436 --> 00:23:11,566
through, and it helps ensure


759
00:23:11,566 --> 00:23:13,236
that every client will see every


760
00:23:13,236 --> 00:23:14,276
state as it occurs.


761
00:23:14,826 --> 00:23:18,126
So, here's an example of that in


762
00:23:18,126 --> 00:23:18,296
work.


763
00:23:19,676 --> 00:23:21,196
We wait until both players have


764
00:23:21,196 --> 00:23:22,656
gotten into position before we


765
00:23:22,656 --> 00:23:23,196
launch the ball.


766
00:23:23,926 --> 00:23:25,786
Once they have, the ball


767
00:23:25,786 --> 00:23:27,896
launches and the game begins.


768
00:23:28,496 --> 00:23:32,256
Here's the code that we used to


769
00:23:32,256 --> 00:23:32,566
do that.


770
00:23:33,256 --> 00:23:34,446
First, is the component we


771
00:23:34,446 --> 00:23:34,766
define.


772
00:23:34,906 --> 00:23:35,856
The MatchStateComponent.


773
00:23:36,416 --> 00:23:38,636
It conforms to both the


774
00:23:38,636 --> 00:23:40,486
RealityKit component protocol


775
00:23:41,296 --> 00:23:42,956
and the Swift Codable protocol.


776
00:23:43,556 --> 00:23:47,126
We define a transition within


777
00:23:47,126 --> 00:23:47,276
it.


778
00:23:47,276 --> 00:23:48,006
And there's an array of


779
00:23:48,006 --> 00:23:48,636
transitions.


780
00:23:48,916 --> 00:23:50,686
So, each device gets a full log


781
00:23:50,776 --> 00:23:52,396
of all the Match states as they


782
00:23:52,396 --> 00:23:52,916
go forward.


783
00:23:53,256 --> 00:23:54,436
You can respond appropriately.


784
00:23:56,396 --> 00:23:58,176
Before we get started, we


785
00:23:58,176 --> 00:24:00,026
register our component with AR,


786
00:24:00,106 --> 00:24:01,906
with RealityKit so that it is


787
00:24:01,906 --> 00:24:03,196
ready to start synchronizing it.


788
00:24:03,906 --> 00:24:04,926
That's all we need to do.


789
00:24:05,176 --> 00:24:06,986
Now, changes to the component on


790
00:24:06,986 --> 00:24:08,706
the host are automatically


791
00:24:08,776 --> 00:24:09,816
synchronized over to the


792
00:24:09,816 --> 00:24:10,176
clients.


793
00:24:10,636 --> 00:24:13,936
On the client, we, we then use


794
00:24:13,936 --> 00:24:14,596
that.


795
00:24:14,596 --> 00:24:16,366
We create a, a MatchObserver


796
00:24:16,366 --> 00:24:18,046
object that watches that


797
00:24:18,046 --> 00:24:19,736
component for changes and then,


798
00:24:19,736 --> 00:24:20,876
broadcasts them out to all


799
00:24:20,876 --> 00:24:21,736
interested parties.


800
00:24:22,556 --> 00:24:23,466
We're using the combined


801
00:24:23,506 --> 00:24:24,256
framework for this.


802
00:24:24,336 --> 00:24:25,406
It's a great alternative to


803
00:24:25,406 --> 00:24:27,526
using delegation and really


804
00:24:27,526 --> 00:24:28,826
gives you a lot of flexibility.


805
00:24:29,106 --> 00:24:30,446
I'd recommend looking in on some


806
00:24:30,446 --> 00:24:31,966
of the combined sessions from


807
00:24:31,966 --> 00:24:32,236
this year.


808
00:24:36,046 --> 00:24:37,076
So, when we were doing


809
00:24:37,076 --> 00:24:38,596
SwiftStrike, we kind of started


810
00:24:38,596 --> 00:24:39,636
by bringing over a lot of the


811
00:24:39,636 --> 00:24:40,576
code from SwiftShot.


812
00:24:40,576 --> 00:24:42,646
And if you watched the session


813
00:24:42,646 --> 00:24:43,786
from last year, we spent a lot


814
00:24:43,786 --> 00:24:45,496
of time talking about how we


815
00:24:45,496 --> 00:24:46,746
synchronized the physics data,


816
00:24:46,746 --> 00:24:48,586
how we encoded it, how we really


817
00:24:48,586 --> 00:24:50,016
compressed it and made it tight


818
00:24:50,086 --> 00:24:51,196
to limit our network usage.


819
00:24:51,946 --> 00:24:54,036
So, here's a list of most of the


820
00:24:54,036 --> 00:24:56,176
classes or types that we had to


821
00:24:56,176 --> 00:24:57,766
implement that.


822
00:24:57,766 --> 00:24:59,516
Well, RealityKit does the


823
00:24:59,516 --> 00:25:01,406
Physics, PhysicsSync for us.


824
00:25:01,406 --> 00:25:04,216
And using custom components, it


825
00:25:04,216 --> 00:25:05,596
can also synchronize game state


826
00:25:05,596 --> 00:25:05,976
for us.


827
00:25:07,176 --> 00:25:09,946
So, we deleted all of that.


828
00:25:09,946 --> 00:25:11,266
Didn't need it, anymore.


829
00:25:11,356 --> 00:25:13,306
And then, we took a look at the


830
00:25:13,306 --> 00:25:15,156
messages that were left, which


831
00:25:15,156 --> 00:25:16,536
were really only about deciding


832
00:25:16,536 --> 00:25:17,536
whether to use collaborative


833
00:25:17,536 --> 00:25:18,736
mapping or world map sharing to


834
00:25:18,736 --> 00:25:19,826
get the game started.


835
00:25:19,826 --> 00:25:21,216
It only gets set once.


836
00:25:21,926 --> 00:25:22,676
So, they don't need to be


837
00:25:22,676 --> 00:25:23,646
tightly encoded.


838
00:25:24,396 --> 00:25:27,286
So, sad to say, I deleted the


839
00:25:27,286 --> 00:25:29,366
BitStream code.


840
00:25:29,826 --> 00:25:32,856
That's about 1500 lines of code


841
00:25:33,316 --> 00:25:34,496
that we were able to get rid of


842
00:25:34,496 --> 00:25:36,036
and that's lines of code that


843
00:25:36,036 --> 00:25:36,986
you won't have to write,


844
00:25:36,986 --> 00:25:38,836
anymore, thanks to RealityKit


845
00:25:38,836 --> 00:25:40,336
networking, to get your shared


846
00:25:40,336 --> 00:25:41,846
AR experience up and running.


847
00:25:42,516 --> 00:25:46,500
[ Applause ]


848
00:25:48,046 --> 00:25:49,206
Next, let's talk about the


849
00:25:49,206 --> 00:25:51,756
physics simulation itself.


850
00:25:51,856 --> 00:25:53,376
That synchronization, as I said,


851
00:25:53,376 --> 00:25:55,346
is handled by RealityKit using


852
00:25:55,346 --> 00:25:56,466
its built-in physics engine.


853
00:25:57,436 --> 00:25:58,496
On any of these, you can


854
00:25:58,496 --> 00:26:00,096
configure the physics properties


855
00:26:00,146 --> 00:26:02,216
by setting up components.


856
00:26:02,686 --> 00:26:03,836
We set up the rigid body.


857
00:26:03,956 --> 00:26:05,136
That defines the shape of the


858
00:26:05,136 --> 00:26:06,116
object in the scene.


859
00:26:06,606 --> 00:26:08,546
You define collision masks that


860
00:26:08,696 --> 00:26:10,276
configure which device, which


861
00:26:10,276 --> 00:26:11,306
objects in your scene can


862
00:26:11,306 --> 00:26:12,456
collide with which other


863
00:26:12,456 --> 00:26:12,996
objects.


864
00:26:12,996 --> 00:26:15,006
And then, also, the additional


865
00:26:15,006 --> 00:26:16,156
physical properties of the


866
00:26:16,156 --> 00:26:16,526
object.


867
00:26:16,936 --> 00:26:18,376
The mass, the friction, the


868
00:26:18,376 --> 00:26:19,196
restitution.


869
00:26:19,466 --> 00:26:21,726
All of those play into getting


870
00:26:21,726 --> 00:26:22,656
that right to get a great


871
00:26:22,656 --> 00:26:23,366
experience.


872
00:26:23,876 --> 00:26:27,236
In SwiftStrike, the host device


873
00:26:27,266 --> 00:26:28,346
owns the simulation.


874
00:26:28,786 --> 00:26:30,556
But the client devices provide


875
00:26:30,556 --> 00:26:31,866
information about where each


876
00:26:31,866 --> 00:26:33,586
individual player is to make the


877
00:26:33,586 --> 00:26:34,166
game happen.


878
00:26:34,166 --> 00:26:35,086
And I'll talk about how that


879
00:26:35,086 --> 00:26:35,646
works, later on.


880
00:26:35,746 --> 00:26:38,736
Now, in SwiftStrike, most of the


881
00:26:38,736 --> 00:26:39,846
objects are pretty simple.


882
00:26:39,996 --> 00:26:42,206
The ball is the sphere, the, the


883
00:26:42,346 --> 00:26:44,306
you know, the play surface is a


884
00:26:44,356 --> 00:26:44,796
plane.


885
00:26:45,106 --> 00:26:46,516
We put walls on the sides to


886
00:26:46,516 --> 00:26:47,556
make sure the ball doesn't fly


887
00:26:47,556 --> 00:26:47,826
out.


888
00:26:48,766 --> 00:26:50,706
But there's one object that we


889
00:26:50,706 --> 00:26:51,816
really needed to get right,


890
00:26:51,816 --> 00:26:52,566
that's a little bit more


891
00:26:52,566 --> 00:26:53,416
complicated than that.


892
00:26:53,416 --> 00:26:54,756
And that's the bowling pin.


893
00:26:56,276 --> 00:26:57,346
You know, really needed this to


894
00:26:57,346 --> 00:26:58,826
bounce true and sound right for


895
00:26:58,826 --> 00:27:00,296
the game to be compelling.


896
00:27:01,366 --> 00:27:04,216
This is the just the wire frame


897
00:27:04,216 --> 00:27:05,916
of the 3D model our technical


898
00:27:05,916 --> 00:27:07,066
art has provided for us.


899
00:27:07,926 --> 00:27:09,066
And this is then updated to make


900
00:27:09,066 --> 00:27:10,116
it really look great when it


901
00:27:10,116 --> 00:27:10,696
renders.


902
00:27:11,336 --> 00:27:12,686
But really, it's far too much


903
00:27:12,686 --> 00:27:14,166
data for the physics simulation.


904
00:27:14,896 --> 00:27:16,486
We wanted to take this and make


905
00:27:16,486 --> 00:27:18,316
it a lot simpler while still


906
00:27:18,316 --> 00:27:19,946
maintaining a great bowling pin


907
00:27:19,946 --> 00:27:20,446
kind of feel.


908
00:27:21,046 --> 00:27:23,696
So, here's kind of what we did


909
00:27:23,696 --> 00:27:24,666
with that.


910
00:27:24,666 --> 00:27:26,236
We used a combination of the


911
00:27:26,236 --> 00:27:28,006
primitive shapes as that's part


912
00:27:28,006 --> 00:27:28,876
of RealityKit because it's


913
00:27:28,876 --> 00:27:30,326
networking the spheres at the


914
00:27:30,366 --> 00:27:31,156
top and in the middle.


915
00:27:31,656 --> 00:27:33,916
And then, we also built convex


916
00:27:33,916 --> 00:27:36,936
hulls around the pin to give it


917
00:27:37,106 --> 00:27:39,326
a base to stand on and, and the


918
00:27:39,326 --> 00:27:40,506
neck to bounce of off other


919
00:27:40,506 --> 00:27:40,766
things.


920
00:27:41,346 --> 00:27:42,356
You know, when you're doing a


921
00:27:42,356 --> 00:27:43,986
physics simulation, you want to


922
00:27:43,986 --> 00:27:45,256
be careful to use primitives


923
00:27:45,256 --> 00:27:46,136
whenever you can.


924
00:27:46,566 --> 00:27:47,676
If you can't, make sure that


925
00:27:47,676 --> 00:27:49,086
your convex hulls are relatively


926
00:27:49,136 --> 00:27:49,406
simple.


927
00:27:49,636 --> 00:27:50,616
This will give you the best


928
00:27:50,616 --> 00:27:51,246
performance.


929
00:27:52,156 --> 00:27:53,746
So, we spent a lot of time


930
00:27:53,746 --> 00:27:54,616
tuning this to get the right


931
00:27:54,616 --> 00:27:55,176
combination.


932
00:27:55,806 --> 00:27:58,286
So here's what that looked like


933
00:27:58,286 --> 00:27:59,356
all together in the data.


934
00:28:00,326 --> 00:28:02,136
But of course, on the court, you


935
00:28:02,136 --> 00:28:04,306
just see the great looking pin


936
00:28:04,416 --> 00:28:04,846
itself.


937
00:28:05,536 --> 00:28:07,796
RealityKit's physically based


938
00:28:07,796 --> 00:28:09,256
rendering really gives a good


939
00:28:09,256 --> 00:28:11,446
shine on it and makes it looks


940
00:28:11,446 --> 00:28:11,636
great.


941
00:28:12,176 --> 00:28:12,716
Thank you.


942
00:28:13,516 --> 00:28:16,796
[ Applause ]


943
00:28:17,296 --> 00:28:18,496
So, last thing, let's talk a


944
00:28:18,496 --> 00:28:20,206
little bit about the game


945
00:28:20,206 --> 00:28:20,576
design.


946
00:28:20,836 --> 00:28:22,366
And that has three areas.


947
00:28:22,526 --> 00:28:23,736
You know, designing for People


948
00:28:23,736 --> 00:28:26,216
Occlusion, building an on-site


949
00:28:26,216 --> 00:28:28,046
experience, and defining a


950
00:28:28,046 --> 00:28:29,666
control mechanism for the game


951
00:28:29,666 --> 00:28:30,006
itself.


952
00:28:31,536 --> 00:28:33,436
When we learned about ARKit 3's


953
00:28:33,436 --> 00:28:35,026
Person Occlusion, we knew right


954
00:28:35,026 --> 00:28:36,586
away that we wanted this year's


955
00:28:36,586 --> 00:28:38,046
game to be a full-size


956
00:28:38,046 --> 00:28:38,746
experience.


957
00:28:39,106 --> 00:28:40,796
And we designed it so that you


958
00:28:40,896 --> 00:28:42,426
see Person Occlusion happening


959
00:28:42,656 --> 00:28:43,506
right from the start.


960
00:28:44,156 --> 00:28:45,526
When you're in starting position


961
00:28:45,716 --> 00:28:46,836
you see the ball in front of


962
00:28:46,836 --> 00:28:48,556
you, you see the other player,


963
00:28:48,556 --> 00:28:50,196
and you see the pins behind the


964
00:28:50,196 --> 00:28:50,696
other player.


965
00:28:51,136 --> 00:28:52,686
Right away, Person Occlusion is


966
00:28:52,686 --> 00:28:53,516
a big part of the game.


967
00:28:54,556 --> 00:28:56,586
Previously, building an AR


968
00:28:56,586 --> 00:28:58,246
experience, you had to kind of


969
00:28:58,246 --> 00:28:59,476
make sure that you didn't get a


970
00:28:59,476 --> 00:29:01,436
person between the camera and


971
00:29:01,436 --> 00:29:01,926
the content.


972
00:29:02,236 --> 00:29:03,546
And then, so SwiftShot pretty


973
00:29:03,546 --> 00:29:04,976
much had to be a Tabletop game


974
00:29:04,976 --> 00:29:05,426
last year.


975
00:29:06,836 --> 00:29:08,296
With SwiftStrike and Person


976
00:29:08,296 --> 00:29:10,246
Occlusion, now you've got a lot


977
00:29:10,246 --> 00:29:11,866
more possibilities as to how you


978
00:29:11,866 --> 00:29:12,886
want to include the virtual


979
00:29:12,926 --> 00:29:15,006
content in your, in your game.


980
00:29:15,586 --> 00:29:20,116
Now, a full-size game requires a


981
00:29:20,116 --> 00:29:21,656
full-size space to play it in.


982
00:29:22,266 --> 00:29:22,946
So, we worked with the


983
00:29:22,946 --> 00:29:25,436
facilities team and had a custom


984
00:29:25,436 --> 00:29:26,556
floor installed here at the


985
00:29:26,556 --> 00:29:28,226
Convention Center for people to


986
00:29:28,226 --> 00:29:28,646
play on.


987
00:29:29,386 --> 00:29:31,156
The wood flooring not only


988
00:29:31,156 --> 00:29:33,346
evokes a bowling alley but also


989
00:29:33,346 --> 00:29:34,776
provides lots of great feature


990
00:29:34,776 --> 00:29:36,286
points for the ARKit tracking.


991
00:29:36,876 --> 00:29:38,366
So, you get a nice stable


992
00:29:38,616 --> 00:29:39,066
display.


993
00:29:40,656 --> 00:29:42,536
We also used the image on the


994
00:29:42,536 --> 00:29:43,986
logo in the center of the court


995
00:29:44,346 --> 00:29:45,466
to position the gameboard


996
00:29:45,466 --> 00:29:46,566
property properly.


997
00:29:47,166 --> 00:29:49,856
ARKit image anchors are used to


998
00:29:49,856 --> 00:29:51,326
find that location, put the


999
00:29:51,326 --> 00:29:51,886
board there.


1000
00:29:52,016 --> 00:29:53,436
So, every time it starts the


1001
00:29:53,436 --> 00:29:55,156
game is correctly positioned and


1002
00:29:55,156 --> 00:29:55,976
people are ready to go.


1003
00:29:57,376 --> 00:30:00,386
Now, for the AR localization,


1004
00:30:00,656 --> 00:30:02,276
we're using a combination of


1005
00:30:02,276 --> 00:30:04,066
ARKit world maps and


1006
00:30:04,106 --> 00:30:04,906
collaborative data.


1007
00:30:05,716 --> 00:30:06,976
The players start with a world


1008
00:30:06,976 --> 00:30:08,446
map on their device that they


1009
00:30:08,446 --> 00:30:09,906
load and get localized very


1010
00:30:09,906 --> 00:30:10,316
quickly.


1011
00:30:10,636 --> 00:30:12,466
And then, they start sharing


1012
00:30:12,466 --> 00:30:14,956
collaborative data after that.


1013
00:30:14,956 --> 00:30:17,256
So, they get up fast with the


1014
00:30:17,256 --> 00:30:18,836
Quick Start and then, maintain


1015
00:30:18,836 --> 00:30:20,586
that over time as the devices


1016
00:30:20,586 --> 00:30:22,136
share the data about the world


1017
00:30:22,676 --> 00:30:25,376
around them.


1018
00:30:25,556 --> 00:30:26,716
Finally, let's talk about the


1019
00:30:26,716 --> 00:30:27,496
control mechanism.


1020
00:30:28,216 --> 00:30:29,516
With SwiftShot last year, we


1021
00:30:29,516 --> 00:30:30,566
thought we had a pretty simple


1022
00:30:30,566 --> 00:30:31,366
control mechanism.


1023
00:30:31,526 --> 00:30:34,666
Right. Just tap to grab, pull to


1024
00:30:34,666 --> 00:30:34,976
release.


1025
00:30:36,226 --> 00:30:37,536
We made it even simpler this


1026
00:30:37,536 --> 00:30:37,726
year.


1027
00:30:37,876 --> 00:30:38,716
You don't have to touch the


1028
00:30:38,716 --> 00:30:40,456
screen; you just move it to push


1029
00:30:40,506 --> 00:30:40,806
the ball.


1030
00:30:41,916 --> 00:30:42,756
We discovered through game


1031
00:30:42,756 --> 00:30:44,396
playtesting that it was great if


1032
00:30:44,396 --> 00:30:47,126
the faster push, faster movement


1033
00:30:47,436 --> 00:30:48,556
would mean a bigger push on the


1034
00:30:48,556 --> 00:30:48,866
ball.


1035
00:30:48,866 --> 00:30:50,356
Give it a kick and make it


1036
00:30:50,356 --> 00:30:51,426
really bounce past the other


1037
00:30:51,426 --> 00:30:51,626
player.


1038
00:30:52,236 --> 00:30:54,886
The other thing we discovered


1039
00:30:54,886 --> 00:30:56,106
though in our playtesting was


1040
00:30:56,106 --> 00:30:57,546
every once in a while, the ball


1041
00:30:57,546 --> 00:30:58,426
would roll right through you.


1042
00:30:58,826 --> 00:30:59,696
And that wasn't great.


1043
00:31:00,636 --> 00:31:01,586
So, instead, we added an


1044
00:31:01,586 --> 00:31:03,576
invisible physics body located


1045
00:31:03,576 --> 00:31:04,386
where the player is.


1046
00:31:04,386 --> 00:31:06,916
And then, we discovered that we


1047
00:31:06,916 --> 00:31:07,966
could just win the game by


1048
00:31:07,966 --> 00:31:09,186
running around and knocking over


1049
00:31:09,186 --> 00:31:10,376
all the, all the other players'


1050
00:31:10,376 --> 00:31:10,646
pins.


1051
00:31:11,836 --> 00:31:13,156
So, instead, we're using


1052
00:31:13,156 --> 00:31:14,996
collision masks to filter that


1053
00:31:14,996 --> 00:31:15,186
out.


1054
00:31:16,076 --> 00:31:17,536
The ball will collide with the


1055
00:31:17,576 --> 00:31:19,596
pins and with a person, but the


1056
00:31:19,596 --> 00:31:20,976
pins and the person won't


1057
00:31:20,976 --> 00:31:21,846
collide with each other.


1058
00:31:21,846 --> 00:31:24,386
That was some of the ways that


1059
00:31:24,386 --> 00:31:25,946
we used the networking system


1060
00:31:25,946 --> 00:31:27,676
and the physics to really get,


1061
00:31:27,676 --> 00:31:30,166
get a great, great experience.


1062
00:31:31,576 --> 00:31:32,876
Now, one of the things that we


1063
00:31:32,876 --> 00:31:34,396
needed to solve then, is how do


1064
00:31:34,396 --> 00:31:36,016
we get the input from this


1065
00:31:36,016 --> 00:31:38,216
device moving around onto the


1066
00:31:38,216 --> 00:31:40,406
device while maintaining control


1067
00:31:40,406 --> 00:31:42,086
over when the paddle is active


1068
00:31:42,296 --> 00:31:43,986
and how much force it's applying


1069
00:31:44,296 --> 00:31:45,076
on the host.


1070
00:31:45,296 --> 00:31:47,436
And so, we solved this using the


1071
00:31:47,436 --> 00:31:49,136
ownership support within


1072
00:31:49,136 --> 00:31:49,806
RealityKit.


1073
00:31:50,386 --> 00:31:53,556
When the host starts the AR


1074
00:31:53,556 --> 00:31:55,906
session, it creates a


1075
00:31:56,106 --> 00:31:58,386
AnchorEntity as all content


1076
00:31:58,516 --> 00:32:00,546
within RealityKit is all


1077
00:32:00,546 --> 00:32:02,426
parented to an AnchorEntity that


1078
00:32:02,426 --> 00:32:03,616
the host maintains ownership


1079
00:32:03,616 --> 00:32:03,906
over.


1080
00:32:04,956 --> 00:32:07,306
When the Client joins, it adds


1081
00:32:07,306 --> 00:32:09,896
another entity to the scene that


1082
00:32:09,896 --> 00:32:10,286
we call the


1083
00:32:10,286 --> 00:32:12,436
PlayerLocationEntity, using the


1084
00:32:12,436 --> 00:32:14,806
subclassing support with


1085
00:32:14,806 --> 00:32:15,416
RealityKit.


1086
00:32:16,866 --> 00:32:18,436
This maintains ownership by the


1087
00:32:18,546 --> 00:32:20,596
Client, so the Client can update


1088
00:32:20,596 --> 00:32:22,106
its location with every frame.


1089
00:32:22,546 --> 00:32:24,176
And that's parented to the


1090
00:32:24,176 --> 00:32:25,616
AnchorEntity so it appears in


1091
00:32:25,616 --> 00:32:26,236
all the devices.


1092
00:32:26,486 --> 00:32:29,336
As a child of that, we add the


1093
00:32:29,396 --> 00:32:30,146
PaddleEntity.


1094
00:32:30,246 --> 00:32:33,156
And it's parented to the


1095
00:32:33,156 --> 00:32:34,266
PlayerLocationEntity.


1096
00:32:34,496 --> 00:32:36,476
So, as the player moves around,


1097
00:32:36,896 --> 00:32:38,306
the PlayerLocationEntity


1098
00:32:38,306 --> 00:32:39,456
location gets updated.


1099
00:32:39,736 --> 00:32:41,366
And that moves the PaddleEntity


1100
00:32:41,366 --> 00:32:43,336
that the host maintains control


1101
00:32:43,336 --> 00:32:45,296
over what, what actions the


1102
00:32:45,296 --> 00:32:46,466
PaddleEntity takes.


1103
00:32:46,806 --> 00:32:48,456
It can turn it on and off and


1104
00:32:48,456 --> 00:32:49,576
make sure that the gameplay


1105
00:32:50,086 --> 00:32:51,256
remains fun for everybody.


1106
00:32:52,736 --> 00:32:56,256
So, let's look at that, that,


1107
00:32:56,256 --> 00:32:58,556
how all that came together with


1108
00:32:58,606 --> 00:33:00,286
ARKit 3 and RealityKit to make a


1109
00:33:00,286 --> 00:33:01,916
great gameplay experience.


1110
00:33:07,176 --> 00:33:08,606
Here again, is part of the video


1111
00:33:09,056 --> 00:33:12,216
from the State of the Union on


1112
00:33:14,476 --> 00:33:15,556
Monday showing everyone playing


1113
00:33:15,556 --> 00:33:15,856
the game.


1114
00:33:16,146 --> 00:33:18,006
And Adam is, once again, the


1115
00:33:19,056 --> 00:33:19,206
winner.


1116
00:33:19,376 --> 00:33:22,546
Now, when we, we're building


1117
00:33:22,546 --> 00:33:25,096
this, we started to learn about


1118
00:33:25,096 --> 00:33:25,876
the other things that were


1119
00:33:25,876 --> 00:33:26,776
coming out this year.


1120
00:33:27,086 --> 00:33:28,326
And one of those was Dark Mode


1121
00:33:28,326 --> 00:33:28,776
in iOS.


1122
00:33:28,866 --> 00:33:31,216
And we decided we needed to take


1123
00:33:31,216 --> 00:33:32,026
that a step further.


1124
00:33:32,396 --> 00:33:34,736
And so, we implemented Cosmic


1125
00:33:34,776 --> 00:33:35,916
Mode in SwiftStrike.


1126
00:33:36,596 --> 00:33:37,826
We swapped out the assets,


1127
00:33:38,096 --> 00:33:40,136
darkened the video feed, and


1128
00:33:40,136 --> 00:33:42,226
used some cards with


1129
00:33:42,226 --> 00:33:43,666
billboarding effect to really


1130
00:33:43,666 --> 00:33:44,476
give a glow effect.


1131
00:33:44,916 --> 00:33:45,976
Let's take a look at that.


1132
00:33:50,216 --> 00:33:51,006
Here we go.


1133
00:33:51,646 --> 00:33:54,826
Took me a few tries to get the


1134
00:33:54,826 --> 00:33:55,596
winner on the first try.


1135
00:33:57,516 --> 00:34:02,500
[ Applause ]


1136
00:34:04,056 --> 00:34:05,036
So, that's SwiftStrike.


1137
00:34:06,026 --> 00:34:07,326
So, in summary of what we talked


1138
00:34:07,326 --> 00:34:09,255
about today, Kuen-han covered


1139
00:34:09,346 --> 00:34:10,735
the new collaborative session


1140
00:34:10,735 --> 00:34:13,946
sharing feature in ARKit 3 and


1141
00:34:13,946 --> 00:34:15,646
how that enables much easier


1142
00:34:15,646 --> 00:34:17,386
localization and new shared


1143
00:34:17,386 --> 00:34:18,096
experiences.


1144
00:34:18,556 --> 00:34:19,755
We talked about the best ways to


1145
00:34:19,755 --> 00:34:21,585
use ARAnchors to position


1146
00:34:21,585 --> 00:34:22,896
content within your AR


1147
00:34:22,896 --> 00:34:23,436
experience.


1148
00:34:23,815 --> 00:34:25,016
And then, we talked about


1149
00:34:25,016 --> 00:34:26,656
SwiftStrike, our new game for,


1150
00:34:26,726 --> 00:34:27,585
for 2019.


1151
00:34:28,966 --> 00:34:30,396
We've done a Tabletop version


1152
00:34:30,396 --> 00:34:32,076
using Reality Composer and the


1153
00:34:32,076 --> 00:34:33,235
source for that is available


1154
00:34:33,235 --> 00:34:33,436
now.


1155
00:34:33,436 --> 00:34:35,795
You can get more information


1156
00:34:35,795 --> 00:34:37,136
about that by looking at the


1157
00:34:37,136 --> 00:34:38,766
''Building AR Experiences with


1158
00:34:38,766 --> 00:34:39,926
Reality Composer'' session.


1159
00:34:39,926 --> 00:34:41,636
And we're planning to release


1160
00:34:41,706 --> 00:34:43,005
the codes, the source for the


1161
00:34:43,005 --> 00:34:45,045
full version of SwiftStrike with


1162
00:34:45,045 --> 00:34:46,346
the features seen.


1163
00:34:47,206 --> 00:34:48,616
For more information, you can


1164
00:34:48,616 --> 00:34:49,696
look at our URL for this


1165
00:34:49,696 --> 00:34:50,065
session.


1166
00:34:50,716 --> 00:34:52,806
Kuen-han and I will both be at


1167
00:34:52,806 --> 00:34:54,676
the ARKit and RealityKit labs,


1168
00:34:54,676 --> 00:34:55,946
immediately after the session at


1169
00:34:55,946 --> 00:34:56,446
3:00.


1170
00:34:56,446 --> 00:34:58,316
And also, for those of you who


1171
00:34:58,316 --> 00:34:59,376
have gotten really good as


1172
00:34:59,376 --> 00:35:00,786
SwiftStrike, we're having a


1173
00:35:00,786 --> 00:35:02,936
tournament on Friday at 12:30.


1174
00:35:03,536 --> 00:35:05,076
So, we hope you all come and


1175
00:35:05,146 --> 00:35:06,966
participate and see that.


1176
00:35:06,966 --> 00:35:07,386
Thank you.


1177
00:35:08,516 --> 00:35:11,506
[ Applause ]

