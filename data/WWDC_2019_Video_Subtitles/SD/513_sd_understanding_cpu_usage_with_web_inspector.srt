1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:07,296 --> 00:00:08,966
>> Hello, I'm Jonathan Davis,


3
00:00:08,966 --> 00:00:10,626
Web Technologies Evangelist for


4
00:00:10,626 --> 00:00:12,196
the Safari and WebKit Teams.


5
00:00:12,686 --> 00:00:14,376
Welcome to "Understanding CPU


6
00:00:14,376 --> 00:00:15,976
Usage with Web Inspector."


7
00:00:17,666 --> 00:00:19,176
We all know that battery life is


8
00:00:19,176 --> 00:00:20,676
important to users, and you


9
00:00:20,676 --> 00:00:22,516
probably instinctively know the


10
00:00:22,516 --> 00:00:23,646
web browser is one of the


11
00:00:23,646 --> 00:00:25,726
most-used apps on our devices.


12
00:00:26,236 --> 00:00:28,686
But beyond that, web content is


13
00:00:28,686 --> 00:00:30,366
also incorporated into many


14
00:00:30,366 --> 00:00:32,616
popular iOS and macOS apps.


15
00:00:33,226 --> 00:00:34,626
That means web content


16
00:00:34,626 --> 00:00:36,276
significantly affects battery


17
00:00:36,276 --> 00:00:38,376
life for users, so making it


18
00:00:38,376 --> 00:00:39,736
power-efficient has a big


19
00:00:39,736 --> 00:00:40,246
impact.


20
00:00:41,346 --> 00:00:42,736
Safari and WebKit already


21
00:00:42,736 --> 00:00:43,706
provide features to


22
00:00:43,706 --> 00:00:45,226
automatically save power for


23
00:00:45,226 --> 00:00:47,096
users when possible, such as


24
00:00:47,096 --> 00:00:48,746
throttling timers when a webpage


25
00:00:48,746 --> 00:00:49,556
is in the background.


26
00:00:50,456 --> 00:00:51,896
And with support for content


27
00:00:51,896 --> 00:00:53,716
blocker extensions, users can


28
00:00:53,716 --> 00:00:55,156
automatically block loading


29
00:00:55,156 --> 00:00:56,646
unwanted content that's often


30
00:00:56,646 --> 00:00:58,006
just junk slowing down their


31
00:00:58,006 --> 00:00:59,886
browser, or worse, tracking


32
00:00:59,886 --> 00:00:59,976
them.


33
00:01:01,896 --> 00:01:03,316
But even with the built-in


34
00:01:03,316 --> 00:01:05,025
power-saving features in Safari,


35
00:01:05,275 --> 00:01:06,766
there's a lot left in the hands


36
00:01:06,766 --> 00:01:08,616
of web developers, so it's an


37
00:01:08,616 --> 00:01:10,126
opportunity for all of us to


38
00:01:10,126 --> 00:01:11,646
improve performance and build a


39
00:01:11,646 --> 00:01:13,566
power-efficient web for users.


40
00:01:14,786 --> 00:01:16,746
The good news is that everything


41
00:01:16,746 --> 00:01:18,376
you know about good performance


42
00:01:18,376 --> 00:01:20,796
practices on the web also apply


43
00:01:20,796 --> 00:01:22,466
as best practices for saving


44
00:01:22,466 --> 00:01:22,896
power.


45
00:01:23,486 --> 00:01:24,946
So all of the things we've heard


46
00:01:24,946 --> 00:01:26,716
about improving page load time,


47
00:01:27,166 --> 00:01:29,346
optimizing JavaScript, and using


48
00:01:29,346 --> 00:01:31,476
CSS animations and transitions


49
00:01:31,886 --> 00:01:33,496
really help with battery life.


50
00:01:34,606 --> 00:01:35,756
Whether you're experienced with


51
00:01:35,756 --> 00:01:36,976
all of the best practices for


52
00:01:36,976 --> 00:01:38,606
performance on the web, or just


53
00:01:38,606 --> 00:01:40,306
starting out, I'm going to show


54
00:01:40,306 --> 00:01:42,056
you a powerful new tool in Web


55
00:01:42,056 --> 00:01:43,546
Inspector that's going to give


56
00:01:43,546 --> 00:01:45,006
you super powers for finding


57
00:01:45,006 --> 00:01:45,996
where performance can be


58
00:01:45,996 --> 00:01:47,586
improved to save battery life.


59
00:01:48,426 --> 00:01:50,406
It's called the CPU Usage


60
00:01:50,406 --> 00:01:52,676
Timeline, and it's new in Web


61
00:01:52,676 --> 00:01:54,656
Inspector in Safari 13 for


62
00:01:54,656 --> 00:01:55,316
macOS.


63
00:01:55,826 --> 00:01:57,336
It provides a window into power


64
00:01:57,336 --> 00:01:58,906
use that makes it easy to see


65
00:01:58,906 --> 00:02:00,036
the impact of behaviors that


66
00:02:00,036 --> 00:02:01,926
contribute to high CPU usage.


67
00:02:03,996 --> 00:02:05,556
Today, I'm going to show you how


68
00:02:05,556 --> 00:02:07,206
to work with the new CPU Usage


69
00:02:07,206 --> 00:02:09,526
Timeline, discover power issues


70
00:02:09,526 --> 00:02:11,846
through CPU Usage, and then I'll


71
00:02:11,846 --> 00:02:13,386
briefly go over some strategies


72
00:02:13,386 --> 00:02:14,906
for improving power savings in


73
00:02:14,906 --> 00:02:16,276
your web-based projects.


74
00:02:17,276 --> 00:02:18,536
Now, before you can use the new


75
00:02:18,536 --> 00:02:20,066
timeline, you'll need to enable


76
00:02:20,066 --> 00:02:21,616
the Develop menu to access Web


77
00:02:21,616 --> 00:02:22,156
Inspector.


78
00:02:23,946 --> 00:02:25,616
Just load up Safari Preferences,


79
00:02:25,936 --> 00:02:28,496
and click on Advanced, and click


80
00:02:28,496 --> 00:02:30,316
to enable to Show Develop menu


81
00:02:30,316 --> 00:02:31,506
in menu bar option.


82
00:02:33,256 --> 00:02:35,356
Now, just load up a webpage, and


83
00:02:35,356 --> 00:02:36,546
open Web Inspector from the


84
00:02:36,546 --> 00:02:39,136
Develop menu, or use the


85
00:02:39,136 --> 00:02:40,116
keyboard shortcut


86
00:02:40,116 --> 00:02:41,016
Command-Option-I.


87
00:02:41,256 --> 00:02:44,056
I'm going to use the new CPU


88
00:02:44,056 --> 00:02:45,936
Usage Timeline to look for where


89
00:02:45,936 --> 00:02:47,386
we can improve power on


90
00:02:47,386 --> 00:02:48,196
webkit.org.


91
00:02:48,326 --> 00:02:50,356
The homepage is pretty simple,


92
00:02:50,676 --> 00:02:51,826
but it should be interesting,


93
00:02:51,906 --> 00:02:52,806
because it still has some


94
00:02:52,806 --> 00:02:54,186
dynamic things happening, like


95
00:02:54,186 --> 00:02:55,676
this subtle logo animation in


96
00:02:55,676 --> 00:02:56,256
the background.


97
00:02:58,776 --> 00:03:00,646
With Web Inspector open, click


98
00:03:00,646 --> 00:03:02,036
over to the Timelines tab.


99
00:03:05,206 --> 00:03:06,676
In the upper left is a list of


100
00:03:06,676 --> 00:03:07,716
different timelines.


101
00:03:08,056 --> 00:03:08,786
There's a bunch of other


102
00:03:08,786 --> 00:03:10,246
timelines you can use, but the


103
00:03:10,246 --> 00:03:11,886
defaults will work great to look


104
00:03:11,886 --> 00:03:13,826
for ways to improve CPU usage.


105
00:03:16,236 --> 00:03:17,656
To start a recording, you can


106
00:03:17,656 --> 00:03:19,276
click the red Record button, or


107
00:03:19,276 --> 00:03:20,606
press the Space bar, but I'm


108
00:03:20,606 --> 00:03:21,876
going to click the Reload


109
00:03:21,876 --> 00:03:23,336
button, which will automatically


110
00:03:23,336 --> 00:03:25,106
start a recording and capture


111
00:03:25,106 --> 00:03:25,986
page load, too.


112
00:03:27,536 --> 00:03:29,736
When looking at CPU usage, it's


113
00:03:29,736 --> 00:03:31,076
important to remember you'll


114
00:03:31,076 --> 00:03:32,766
want to record at least 15


115
00:03:32,766 --> 00:03:34,546
seconds in order to get useful


116
00:03:34,546 --> 00:03:35,186
measurements.


117
00:03:36,116 --> 00:03:37,616
So I'll let this recording go a


118
00:03:37,616 --> 00:03:38,886
bit beyond that to capture


119
00:03:38,886 --> 00:03:39,396
enough data.


120
00:03:41,326 --> 00:03:42,306
Now I'll scroll over the


121
00:03:42,306 --> 00:03:43,796
timeline to zoom out a bit so I


122
00:03:43,796 --> 00:03:44,536
can see everything.


123
00:03:47,106 --> 00:03:48,786
Clicking on the CPU timeline,


124
00:03:48,786 --> 00:03:50,356
you can see details about CPU


125
00:03:50,356 --> 00:03:51,466
usage of the page.


126
00:03:52,416 --> 00:03:54,136
At a glance, I can tell the page


127
00:03:54,136 --> 00:03:55,176
does a pretty good job of


128
00:03:55,176 --> 00:03:56,576
keeping energy use low.


129
00:03:57,326 --> 00:03:58,896
The quick load time helps a lot,


130
00:03:59,256 --> 00:04:01,346
and when the page becomes idle,


131
00:04:01,676 --> 00:04:03,096
the timeline shows the page is


132
00:04:03,096 --> 00:04:04,386
basically doing nothing.


133
00:04:05,016 --> 00:04:06,236
This is great, because it means


134
00:04:06,236 --> 00:04:07,976
users can stay on the page all


135
00:04:07,976 --> 00:04:10,006
day, and the CPU drops to a very


136
00:04:10,006 --> 00:04:11,856
low power state, with negligible


137
00:04:11,856 --> 00:04:13,416
battery drain caused by the web


138
00:04:13,416 --> 00:04:14,086
content.


139
00:04:16,416 --> 00:04:17,875
The main thread is where a lot


140
00:04:17,875 --> 00:04:19,196
of interesting work happens for


141
00:04:19,196 --> 00:04:20,005
web content.


142
00:04:20,596 --> 00:04:22,055
The main thread chart shows


143
00:04:22,055 --> 00:04:23,336
different categories of work


144
00:04:23,496 --> 00:04:24,486
done on the main thread,


145
00:04:24,486 --> 00:04:26,056
including JavaScript processing,


146
00:04:26,466 --> 00:04:28,796
painting, layout, and things in


147
00:04:28,796 --> 00:04:30,076
service of layout, like style


148
00:04:30,076 --> 00:04:30,846
recalculation.


149
00:04:31,806 --> 00:04:32,896
Based on this, we can see that


150
00:04:32,896 --> 00:04:34,336
most of the time working was


151
00:04:34,336 --> 00:04:35,286
spent on painting.


152
00:04:35,756 --> 00:04:37,556
In the middle of the indicator


153
00:04:37,556 --> 00:04:38,826
is the time it took for the main


154
00:04:38,826 --> 00:04:40,046
thread to complete its work.


155
00:04:40,326 --> 00:04:42,286
The entire recording was about


156
00:04:42,286 --> 00:04:43,696
20 seconds, but the main thread


157
00:04:43,696 --> 00:04:45,456
only took about 100 milliseconds


158
00:04:45,456 --> 00:04:46,306
to complete its work.


159
00:04:48,586 --> 00:04:50,146
Below the main thread chart is a


160
00:04:50,146 --> 00:04:51,906
detailed breakdown of the CPU


161
00:04:51,906 --> 00:04:53,596
usage across all of the threads


162
00:04:53,596 --> 00:04:54,886
involved in doing work for the


163
00:04:54,886 --> 00:04:55,616
web content.


164
00:04:55,816 --> 00:04:58,036
I can take a closer look at this


165
00:04:58,036 --> 00:04:59,516
by clicking and dragging in the


166
00:04:59,516 --> 00:05:01,556
timeline to select just the time


167
00:05:01,556 --> 00:05:02,686
range where the work is being


168
00:05:02,686 --> 00:05:02,986
done.


169
00:05:04,396 --> 00:05:06,306
And just under the CPU usage


170
00:05:06,306 --> 00:05:09,176
graph, in this strip is the main


171
00:05:09,176 --> 00:05:10,616
thread indicator, which shows


172
00:05:10,616 --> 00:05:11,826
categories of work that were


173
00:05:11,826 --> 00:05:13,106
happening on the main thread at


174
00:05:13,106 --> 00:05:14,166
different points in time.


175
00:05:14,636 --> 00:05:16,866
In this area of growing


176
00:05:16,866 --> 00:05:18,406
activity, there were some layout


177
00:05:18,406 --> 00:05:19,716
events in red, followed by


178
00:05:19,716 --> 00:05:21,446
significant painting work, just


179
00:05:21,446 --> 00:05:22,636
like in the chart above, but


180
00:05:22,636 --> 00:05:23,706
showing when it happened.


181
00:05:26,216 --> 00:05:28,306
The energy impact gauge really


182
00:05:28,306 --> 00:05:29,446
brings it all together, though.


183
00:05:29,736 --> 00:05:31,386
It provides a score based on the


184
00:05:31,386 --> 00:05:33,426
total average usage across all


185
00:05:33,426 --> 00:05:35,366
CPU cores for the selected time


186
00:05:35,366 --> 00:05:35,806
range.


187
00:05:38,016 --> 00:05:39,536
The energy impact gauge is


188
00:05:39,536 --> 00:05:41,256
interactive, and as a total


189
00:05:41,256 --> 00:05:42,786
average, will change depending


190
00:05:42,786 --> 00:05:44,086
on the time range selected.


191
00:05:44,446 --> 00:05:46,366
For the page load period, the


192
00:05:46,366 --> 00:05:47,886
gauge shows medium energy


193
00:05:47,886 --> 00:05:49,866
impact, but loading is expensive


194
00:05:49,866 --> 00:05:51,076
in terms of power, so that's


195
00:05:51,076 --> 00:05:51,706
expected.


196
00:05:52,156 --> 00:05:53,606
At least this stayed out of the


197
00:05:53,606 --> 00:05:54,236
high range.


198
00:05:54,236 --> 00:05:55,176
That would've indicated a


199
00:05:55,176 --> 00:05:57,086
problem but double-clicking the


200
00:05:57,086 --> 00:05:58,666
timeline area to select the


201
00:05:58,666 --> 00:06:00,396
entire recording shows the


202
00:06:00,396 --> 00:06:02,276
overall average CPU is low.


203
00:06:02,906 --> 00:06:04,536
I can click and drag the


204
00:06:04,536 --> 00:06:06,386
timeline to select a slice of


205
00:06:06,386 --> 00:06:08,126
time out of the recording and


206
00:06:08,126 --> 00:06:09,566
watch the average change.


207
00:06:11,286 --> 00:06:13,416
Now, when I click to grab the


208
00:06:13,416 --> 00:06:14,876
selection, and slide it to a


209
00:06:14,876 --> 00:06:16,246
period where the page goes idle,


210
00:06:16,666 --> 00:06:18,166
the energy impact drops to low.


211
00:06:18,816 --> 00:06:19,836
That's really great.


212
00:06:20,316 --> 00:06:21,856
When the page is idle, we don't


213
00:06:21,856 --> 00:06:23,316
want to be costing the user lots


214
00:06:23,316 --> 00:06:24,676
of power for content they're not


215
00:06:24,676 --> 00:06:25,496
actively using.


216
00:06:27,266 --> 00:06:29,116
The CPU use was in the low range


217
00:06:29,116 --> 00:06:30,456
while idle, even with the


218
00:06:30,456 --> 00:06:31,866
rotating logo animation


219
00:06:31,866 --> 00:06:32,966
happening in the background.


220
00:06:33,316 --> 00:06:34,376
That's because it's using a


221
00:06:34,376 --> 00:06:36,556
simple CSS animation that makes


222
00:06:36,556 --> 00:06:38,396
it really cheap to animate, but


223
00:06:38,396 --> 00:06:40,036
it still gives the page a nice


224
00:06:40,036 --> 00:06:40,976
visual impact.


225
00:06:42,156 --> 00:06:43,606
Webkit.org is doing great so


226
00:06:43,606 --> 00:06:45,056
far, but when you're looking for


227
00:06:45,056 --> 00:06:47,076
power issues, looking at loading


228
00:06:47,076 --> 00:06:48,406
and idle are good starts.


229
00:06:49,016 --> 00:06:50,926
To cover all of the bases, we


230
00:06:50,926 --> 00:06:51,716
need to capture some


231
00:06:51,716 --> 00:06:52,726
interactivity, too.


232
00:06:54,406 --> 00:06:56,396
The WebKit Feature Status page


233
00:06:56,396 --> 00:06:57,756
is a great way to stay up to


234
00:06:57,756 --> 00:06:59,256
date on WebKit support for your


235
00:06:59,256 --> 00:07:00,506
favorite web features.


236
00:07:00,926 --> 00:07:02,266
It allows you to filter and


237
00:07:02,266 --> 00:07:03,676
search, and that's perfect for


238
00:07:03,676 --> 00:07:04,646
capturing interaction.


239
00:07:04,936 --> 00:07:07,296
I'm going to record a timeline


240
00:07:07,296 --> 00:07:08,476
and interact with the page in


241
00:07:08,476 --> 00:07:09,036
some ways.


242
00:07:09,036 --> 00:07:10,456
I'll just scroll down to the


243
00:07:10,456 --> 00:07:11,636
bottom, and then all the way


244
00:07:11,636 --> 00:07:15,766
back up to the top, and then


245
00:07:15,766 --> 00:07:17,976
I'll do a quick search, and


246
00:07:17,976 --> 00:07:19,086
click on some things here and


247
00:07:19,086 --> 00:07:19,346
there.


248
00:07:19,986 --> 00:07:22,796
And again, we should at least


249
00:07:22,796 --> 00:07:24,236
capture 15 seconds.


250
00:07:24,736 --> 00:07:26,256
Since we're on a new page, we


251
00:07:26,256 --> 00:07:27,436
should capture some period of


252
00:07:27,436 --> 00:07:28,086
idle, too.


253
00:07:29,066 --> 00:07:30,466
I'm going to let this continue


254
00:07:30,466 --> 00:07:32,186
recording to get enough idle


255
00:07:32,186 --> 00:07:32,976
time captured.


256
00:07:37,346 --> 00:07:38,556
Okay, that looks pretty good.


257
00:07:39,436 --> 00:07:40,476
Now I'm going to select the


258
00:07:40,476 --> 00:07:42,636
entire recording and scroll to


259
00:07:42,636 --> 00:07:43,966
zoom out of the timeline a bit


260
00:07:43,966 --> 00:07:45,676
so we can see everything and


261
00:07:46,556 --> 00:07:48,576
click to look at the CPU usage


262
00:07:48,576 --> 00:07:49,186
details.


263
00:07:53,756 --> 00:07:55,186
Let's start digging into these


264
00:07:55,186 --> 00:07:56,956
areas, starting with loading.


265
00:07:58,836 --> 00:08:00,526
The page managed to stay out of


266
00:08:00,526 --> 00:08:01,876
the high range during the quick


267
00:08:01,876 --> 00:08:03,596
load time, so we're okay there.


268
00:08:05,206 --> 00:08:06,526
Now let's look at this range of


269
00:08:06,526 --> 00:08:07,326
interactivity.


270
00:08:08,236 --> 00:08:09,796
The energy impact stays in the


271
00:08:09,796 --> 00:08:11,406
medium range, even with all of


272
00:08:11,406 --> 00:08:12,976
these things happening, but you


273
00:08:12,976 --> 00:08:14,346
can tell from the JavaScript in


274
00:08:14,346 --> 00:08:15,986
events timeline there's a lot of


275
00:08:15,986 --> 00:08:17,446
script firing while scrolling


276
00:08:17,446 --> 00:08:18,186
and interacting.


277
00:08:18,866 --> 00:08:19,976
We definitely want to avoid


278
00:08:19,976 --> 00:08:21,646
doing any extra CPU work while


279
00:08:21,646 --> 00:08:22,996
scrolling, since it's very


280
00:08:22,996 --> 00:08:23,996
expensive to scroll.


281
00:08:24,956 --> 00:08:26,076
Let's see if we need to be doing


282
00:08:26,076 --> 00:08:27,366
that work or not.


283
00:08:28,156 --> 00:08:29,796
The Statistics and Sources


284
00:08:29,796 --> 00:08:31,086
sections tell the story.


285
00:08:31,936 --> 00:08:33,376
There were over 1200 entries


286
00:08:33,376 --> 00:08:34,895
into JavaScript for the selected


287
00:08:34,895 --> 00:08:37,405
time in the recording, 596


288
00:08:37,405 --> 00:08:38,916
request animation frame timers


289
00:08:38,916 --> 00:08:41,456
fired, and there are 647 scroll


290
00:08:41,456 --> 00:08:41,836
events.


291
00:08:42,716 --> 00:08:44,226
Now, I know that reducing timers


292
00:08:44,226 --> 00:08:45,516
and staying off of scrolling is


293
00:08:45,516 --> 00:08:46,786
better for performance, but we


294
00:08:46,786 --> 00:08:47,946
need to look at the code to know


295
00:08:47,946 --> 00:08:49,486
if it's necessary or can be


296
00:08:49,486 --> 00:08:49,946
improved.


297
00:08:50,876 --> 00:08:52,666
In the Statistics area, you can


298
00:08:52,666 --> 00:08:54,236
click on the timers or events to


299
00:08:54,236 --> 00:08:55,616
filter the sources on the right


300
00:08:55,666 --> 00:08:57,556
to the code that triggered it,


301
00:08:57,556 --> 00:08:59,106
and clicking the source takes


302
00:08:59,106 --> 00:09:00,276
you right to the code in the


303
00:09:00,276 --> 00:09:01,286
JavaScript Debugger.


304
00:09:04,316 --> 00:09:06,236
Ah, OK, it looks like the


305
00:09:06,236 --> 00:09:07,936
request animation frame timer is


306
00:09:07,936 --> 00:09:09,776
calling updateImages, which


307
00:09:09,806 --> 00:09:11,406
iterates over all of the images,


308
00:09:11,466 --> 00:09:12,706
and checks if they are in view,


309
00:09:12,806 --> 00:09:14,076
and if so, it loads them.


310
00:09:14,676 --> 00:09:16,286
It's a pretty basic, lazy-loaded


311
00:09:16,286 --> 00:09:18,426
images pattern, but this


312
00:09:18,426 --> 00:09:19,916
dimmed-out code in the debugger


313
00:09:20,256 --> 00:09:22,076
tells us inView and loadImage


314
00:09:22,076 --> 00:09:22,966
are never called.


315
00:09:24,506 --> 00:09:25,496
Even though we scrolled the


316
00:09:25,496 --> 00:09:27,616
entire page to the bottom, and


317
00:09:27,616 --> 00:09:29,446
back up to the top, it makes


318
00:09:29,446 --> 00:09:30,666
sense, though, because there's


319
00:09:30,666 --> 00:09:32,236
basically no images on the page.


320
00:09:32,736 --> 00:09:34,386
So the lazy-loading image code


321
00:09:34,386 --> 00:09:35,636
shouldn't be firing at all on


322
00:09:35,636 --> 00:09:36,186
this page.


323
00:09:36,996 --> 00:09:38,446
Let's switch back to the code.


324
00:09:38,656 --> 00:09:40,816
The images and the event


325
00:09:40,816 --> 00:09:42,046
handlers are set up here.


326
00:09:43,346 --> 00:09:44,996
So looking at the code, it's


327
00:09:44,996 --> 00:09:46,306
just always setting up the event


328
00:09:46,306 --> 00:09:47,916
handlers for scroll and resize


329
00:09:47,916 --> 00:09:48,586
all of the time.


330
00:09:49,246 --> 00:09:50,746
To keep that from happening, we


331
00:09:50,746 --> 00:09:51,986
just need to add a conditional


332
00:09:51,986 --> 00:09:52,366
guard.


333
00:09:53,666 --> 00:09:55,206
There, let's try that.


334
00:09:58,656 --> 00:10:00,406
OK, so let's capture a timeline


335
00:10:00,406 --> 00:10:01,526
with the fix in place.


336
00:10:02,236 --> 00:10:03,586
I'll click back over to the


337
00:10:03,586 --> 00:10:06,246
Timelines tab, start a new


338
00:10:06,246 --> 00:10:10,336
recording, and I'll do some


339
00:10:10,336 --> 00:10:11,086
quick scrolling.


340
00:10:13,996 --> 00:10:15,216
You can already see there are no


341
00:10:15,216 --> 00:10:16,636
JavaScript entries showing up in


342
00:10:16,636 --> 00:10:17,306
the timeline.


343
00:10:17,496 --> 00:10:19,296
It's all just paint, so our


344
00:10:19,296 --> 00:10:20,566
guard is working to prevent


345
00:10:20,566 --> 00:10:21,986
extra JavaScript work while


346
00:10:21,986 --> 00:10:23,676
scrolling on a page without any


347
00:10:23,676 --> 00:10:24,726
lazy-loaded images.


348
00:10:26,316 --> 00:10:27,866
The energy impact has been


349
00:10:27,866 --> 00:10:29,356
reduced, and all of the main


350
00:10:29,356 --> 00:10:30,566
thread work is paints for


351
00:10:30,566 --> 00:10:32,276
scrolling, but we need to make


352
00:10:32,276 --> 00:10:33,586
sure that the pages that should


353
00:10:33,586 --> 00:10:35,256
be using lazy-loaded images are


354
00:10:35,256 --> 00:10:35,846
still working.


355
00:10:37,636 --> 00:10:39,036
Again, with the fix in place,


356
00:10:39,306 --> 00:10:41,156
I'll record a new timeline on a


357
00:10:41,156 --> 00:10:42,756
page with a MotionMark logo


358
00:10:42,756 --> 00:10:44,176
image at the bottom that should


359
00:10:44,176 --> 00:10:45,236
use the lazy loader.


360
00:10:47,016 --> 00:10:48,856
Perfect. The MotionMark image


361
00:10:48,856 --> 00:10:49,446
loaded in.


362
00:10:49,736 --> 00:10:51,126
I'm going to scroll to get some


363
00:10:51,126 --> 00:10:52,416
CPU measurements of the new


364
00:10:52,416 --> 00:10:54,076
behavior and click the CPU


365
00:10:54,076 --> 00:10:57,866
Timelines to see where we're at.


366
00:10:58,136 --> 00:11:00,936
So we've reduced the timer and


367
00:11:00,936 --> 00:11:02,406
events to just the pages where


368
00:11:02,406 --> 00:11:03,146
it's necessary.


369
00:11:03,476 --> 00:11:06,466
That's great, but there's still


370
00:11:06,466 --> 00:11:07,916
a lot of entries into Script


371
00:11:07,916 --> 00:11:09,276
when scrolling on pages with a


372
00:11:09,276 --> 00:11:10,436
lazy-loaded image.


373
00:11:11,286 --> 00:11:12,756
There's an API available in


374
00:11:12,756 --> 00:11:14,276
Safari that we can use to take


375
00:11:14,276 --> 00:11:15,636
this solution a step further.


376
00:11:16,176 --> 00:11:17,406
We can replace the request


377
00:11:17,406 --> 00:11:18,956
animation frame implementation


378
00:11:19,076 --> 00:11:20,486
to use Intersection Observer


379
00:11:20,486 --> 00:11:21,126
instead.


380
00:11:22,526 --> 00:11:24,016
Intersection Observer can tell


381
00:11:24,016 --> 00:11:25,446
when an element comes into view,


382
00:11:25,686 --> 00:11:27,046
so you can limit your work to


383
00:11:27,046 --> 00:11:28,196
just when it's visible.


384
00:11:28,436 --> 00:11:29,766
And as soon as it goes out of


385
00:11:29,766 --> 00:11:31,466
view, you can stop the work to


386
00:11:31,466 --> 00:11:33,026
get back to a low CPU power


387
00:11:33,026 --> 00:11:34,306
state and save power.


388
00:11:36,256 --> 00:11:37,176
So with the Intersection


389
00:11:37,176 --> 00:11:38,816
Observer implementation, let's


390
00:11:38,816 --> 00:11:40,536
record another timeline, and do


391
00:11:40,536 --> 00:11:41,776
some scrolling to see how this


392
00:11:41,776 --> 00:11:42,856
solution performs.


393
00:11:44,016 --> 00:11:45,196
And as I begin scrolling,


394
00:11:45,456 --> 00:11:46,736
there's just a single entry into


395
00:11:46,736 --> 00:11:48,526
JavaScript, and for the rest of


396
00:11:48,526 --> 00:11:49,856
the time, it's just painting


397
00:11:49,856 --> 00:11:50,516
while I scroll.


398
00:11:57,516 --> 00:11:58,686
So in the end, we went from


399
00:11:58,686 --> 00:12:02,666
16.3% down to 9-1/2% average CPU


400
00:12:02,666 --> 00:12:03,956
usage with the Intersection


401
00:12:03,956 --> 00:12:04,796
Observer solution.


402
00:12:05,276 --> 00:12:06,596
Every little bit helps, and


403
00:12:06,596 --> 00:12:07,526
that's a really nice


404
00:12:07,526 --> 00:12:08,086
improvement.


405
00:12:08,516 --> 00:12:10,816
So there are lots of ways to


406
00:12:10,816 --> 00:12:12,246
save power in web content.


407
00:12:13,586 --> 00:12:15,436
Use the CPU usage timeline to


408
00:12:15,436 --> 00:12:17,076
investigate web content for ways


409
00:12:17,076 --> 00:12:18,676
to improve during interactivity


410
00:12:18,676 --> 00:12:19,966
and when the page is idle.


411
00:12:21,096 --> 00:12:23,176
Remember that reducing CPU usage


412
00:12:23,176 --> 00:12:24,906
saves energy and reduces battery


413
00:12:24,906 --> 00:12:25,906
drain for users.


414
00:12:27,586 --> 00:12:29,586
CSS animations and transitions


415
00:12:29,586 --> 00:12:31,146
can provide dynamic visuals


416
00:12:31,146 --> 00:12:34,176
without the power cost and try


417
00:12:34,176 --> 00:12:35,496
to avoid doing work while


418
00:12:35,496 --> 00:12:36,026
scrolling.


419
00:12:36,196 --> 00:12:37,546
Using the Intersection Observer


420
00:12:37,546 --> 00:12:38,426
API instead.


421
00:12:39,506 --> 00:12:41,306
Users want an engaging, dynamic


422
00:12:41,306 --> 00:12:43,056
experience with web content, but


423
00:12:43,056 --> 00:12:44,086
the best version of those


424
00:12:44,086 --> 00:12:45,916
experiences use the least amount


425
00:12:45,916 --> 00:12:47,086
of CPU possible.


426
00:12:48,386 --> 00:12:49,106
There are a lot more


427
00:12:49,106 --> 00:12:50,476
power-saving tips for web


428
00:12:50,476 --> 00:12:52,006
development on the WebKit Blog.


429
00:12:52,516 --> 00:12:53,416
Check out the links in the


430
00:12:53,416 --> 00:12:55,316
resources section associated


431
00:12:55,316 --> 00:12:56,016
with this video.


432
00:12:57,866 --> 00:12:59,196
We hope you'll try using these


433
00:12:59,196 --> 00:13:00,776
tools on your web content, and


434
00:13:00,776 --> 00:13:02,476
use the advice in this video as


435
00:13:02,476 --> 00:13:03,816
some starting places for your


436
00:13:03,816 --> 00:13:05,526
investigations on how to make


437
00:13:05,526 --> 00:13:06,646
your web content power


438
00:13:06,646 --> 00:13:08,496
efficient, and join us in


439
00:13:08,496 --> 00:13:10,016
helping the web become more


440
00:13:10,016 --> 00:13:11,976
powerful by using less power.

