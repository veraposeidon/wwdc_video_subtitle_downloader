1
00:00:00,506 --> 00:00:05,500
[ Music ]


2
00:00:10,516 --> 00:00:16,566
[ Cheering and Applause ]


3
00:00:17,066 --> 00:00:19,106
>> Hello, everyone, and welcome


4
00:00:19,276 --> 00:00:21,476
to the session ResearchKit and


5
00:00:21,476 --> 00:00:22,986
CareKit reimagined.


6
00:00:23,686 --> 00:00:24,576
My name is Srinath.


7
00:00:24,866 --> 00:00:26,386
And I'm an engineer on the Help


8
00:00:26,466 --> 00:00:26,806
Team.


9
00:00:27,406 --> 00:00:28,776
Now, we have a lot of topics


10
00:00:28,906 --> 00:00:29,916
that we want to cover today.


11
00:00:30,396 --> 00:00:32,496
So let's jump right into it by


12
00:00:32,555 --> 00:00:34,456
looking at the overall flow for


13
00:00:34,456 --> 00:00:35,266
today's session.


14
00:00:36,436 --> 00:00:37,966
As always, we'll get started


15
00:00:38,186 --> 00:00:39,296
with community updates.


16
00:00:39,896 --> 00:00:41,746
We'll then talk about updates we


17
00:00:41,746 --> 00:00:42,846
have made to the ResearchKit


18
00:00:42,846 --> 00:00:43,376
framework.


19
00:00:44,016 --> 00:00:45,446
And then we have some really


20
00:00:45,446 --> 00:00:47,076
exciting news that we want to


21
00:00:47,076 --> 00:00:47,736
share about the CareKit


22
00:00:47,736 --> 00:00:47,976
framework.


23
00:00:51,096 --> 00:00:53,026
Jumping into community updates,


24
00:00:53,276 --> 00:00:55,256
we wanted to highlight some apps


25
00:00:55,596 --> 00:00:56,846
that have been released or


26
00:00:56,876 --> 00:00:59,026
updated in the past year that


27
00:00:59,156 --> 00:01:00,616
leverage the ResearchKit and


28
00:01:00,616 --> 00:01:01,466
CareKit frameworks.


29
00:01:02,276 --> 00:01:04,046
One such example is the


30
00:01:04,046 --> 00:01:05,536
FocalView app, which was


31
00:01:05,536 --> 00:01:06,916
released by Novartis.


32
00:01:07,136 --> 00:01:08,826
And it focuses on running


33
00:01:08,856 --> 00:01:11,036
ophthalmic clinical trials on a


34
00:01:11,036 --> 00:01:12,076
digital platform.


35
00:01:13,226 --> 00:01:15,276
The other notable example is the


36
00:01:15,276 --> 00:01:16,956
FDA MyStudies app.


37
00:01:18,026 --> 00:01:19,396
Now, this app is the


38
00:01:19,396 --> 00:01:21,116
patient-facing part of a


39
00:01:21,116 --> 00:01:23,206
compliant platform that can be


40
00:01:23,206 --> 00:01:25,806
used for clinical trials or


41
00:01:25,806 --> 00:01:27,386
real-world evidence studies.


42
00:01:28,086 --> 00:01:30,476
The FDA went on to Open Source


43
00:01:30,646 --> 00:01:32,216
the MyStudies app for other


44
00:01:32,216 --> 00:01:34,236
organizations to rebrand,


45
00:01:34,436 --> 00:01:35,606
publish, and use.


46
00:01:37,006 --> 00:01:38,486
Now this year, apart from


47
00:01:38,486 --> 00:01:40,676
talking about apps, we also


48
00:01:40,676 --> 00:01:41,706
wanted to talk about


49
00:01:42,316 --> 00:01:43,096
publications.


50
00:01:43,806 --> 00:01:45,746
Now for context, the ResearchKit


51
00:01:45,746 --> 00:01:47,236
and CareKit frameworks were


52
00:01:47,236 --> 00:01:48,576
announced roughly three to four


53
00:01:48,576 --> 00:01:48,976
years back.


54
00:01:49,516 --> 00:01:50,736
And we have reached a point


55
00:01:50,836 --> 00:01:52,446
where we are starting to see an


56
00:01:52,516 --> 00:01:54,736
influx of publications coming


57
00:01:54,736 --> 00:01:56,266
from studies that have been


58
00:01:56,266 --> 00:01:57,596
running for the past few years.


59
00:01:58,946 --> 00:02:00,536
Most of these publications talk


60
00:02:00,536 --> 00:02:02,416
about how successful a


61
00:02:02,416 --> 00:02:04,496
mobile-based study design has


62
00:02:04,496 --> 00:02:05,786
been towards things like


63
00:02:06,026 --> 00:02:08,056
participant enrollment, the


64
00:02:08,056 --> 00:02:09,856
ability to recruit diverse


65
00:02:09,856 --> 00:02:11,276
participants from both a


66
00:02:11,276 --> 00:02:12,846
geographic and demographic


67
00:02:12,846 --> 00:02:15,036
standpoint, as well as the


68
00:02:15,126 --> 00:02:17,106
overall reduction in


69
00:02:17,166 --> 00:02:19,216
per-participant cost as more


70
00:02:19,216 --> 00:02:20,866
participants continue to enroll.


71
00:02:21,916 --> 00:02:23,436
Now let's take a look at a few


72
00:02:23,436 --> 00:02:24,496
of these publications.


73
00:02:25,176 --> 00:02:28,816
The Pride Study talks about how


74
00:02:28,816 --> 00:02:30,366
successful they were in


75
00:02:30,366 --> 00:02:32,826
recruiting and engaging with a


76
00:02:32,826 --> 00:02:35,406
large number of underrepresented


77
00:02:35,786 --> 00:02:37,536
participants for clinical


78
00:02:37,536 --> 00:02:37,976
research.


79
00:02:43,076 --> 00:02:44,356
The Healthy Pregnancy study


80
00:02:44,696 --> 00:02:46,736
talks about low attrition rates


81
00:02:47,136 --> 00:02:49,026
and how they were able to get


82
00:02:49,026 --> 00:02:50,536
their participants to fill out


83
00:02:50,796 --> 00:02:52,226
mobile-based surveys and


84
00:02:52,226 --> 00:02:53,776
questionnaires at a regular


85
00:02:53,776 --> 00:02:53,956
cadence.


86
00:02:59,116 --> 00:03:00,456
The Personal Touch publication


87
00:03:00,616 --> 00:03:02,226
is interesting, because this


88
00:03:02,256 --> 00:03:04,276
publication went out in May


89
00:03:04,276 --> 00:03:05,216
2019.


90
00:03:05,576 --> 00:03:06,826
And we got to know about it


91
00:03:06,826 --> 00:03:08,966
roughly a week back when one of


92
00:03:08,966 --> 00:03:10,456
the authors submitted a poll


93
00:03:10,456 --> 00:03:12,656
request on GitHub to contribute


94
00:03:12,686 --> 00:03:14,096
some of the active tasks that


95
00:03:14,096 --> 00:03:15,736
they had built to support this


96
00:03:15,736 --> 00:03:17,516
publication back into the


97
00:03:17,516 --> 00:03:18,816
framework so that the rest of


98
00:03:18,816 --> 00:03:19,816
the community can leverage that


99
00:03:19,816 --> 00:03:19,976
as well.


100
00:03:23,046 --> 00:03:24,926
And on that note, all of our


101
00:03:24,926 --> 00:03:25,656
health frameworks --


102
00:03:26,046 --> 00:03:27,826
ResearchKit, CareKit, and


103
00:03:27,826 --> 00:03:29,796
HealthKit -- were introduced to


104
00:03:29,796 --> 00:03:31,956
empower the developers to create


105
00:03:31,956 --> 00:03:33,786
some amazing research and care


106
00:03:33,786 --> 00:03:34,186
apps.


107
00:03:35,146 --> 00:03:36,566
On top of that, we also have


108
00:03:36,566 --> 00:03:38,046
some really powerful devices


109
00:03:38,286 --> 00:03:40,326
that have sensors, starting with


110
00:03:40,326 --> 00:03:42,386
accelerometer and gyroscope, all


111
00:03:42,386 --> 00:03:43,726
the way to electrodes that


112
00:03:43,726 --> 00:03:45,766
allows your users to take an EKG


113
00:03:45,766 --> 00:03:45,946
reading.


114
00:03:50,046 --> 00:03:51,936
And be continued to be amazed by


115
00:03:51,936 --> 00:03:53,666
the work that our community of


116
00:03:53,756 --> 00:03:55,826
developers, researchers, and


117
00:03:55,826 --> 00:03:57,736
health professionals are able to


118
00:03:57,736 --> 00:03:59,546
accomplish by leveraging our


119
00:03:59,606 --> 00:04:00,916
products and platforms.


120
00:04:02,506 --> 00:04:04,726
But every year, we still receive


121
00:04:04,826 --> 00:04:07,306
a lot of emails asking about a


122
00:04:07,306 --> 00:04:08,556
variety of questions, like,


123
00:04:08,786 --> 00:04:10,046
"What is ResearchKit and


124
00:04:10,046 --> 00:04:10,486
CareKit?


125
00:04:10,746 --> 00:04:12,746
Or how do I create a research or


126
00:04:12,746 --> 00:04:13,276
a care app?"


127
00:04:13,276 --> 00:04:15,606
And we also received proposals


128
00:04:15,876 --> 00:04:18,386
from research institutions for


129
00:04:18,505 --> 00:04:21,016
device grant requests, which is


130
00:04:21,016 --> 00:04:22,816
why this year, we are currently


131
00:04:22,816 --> 00:04:23,726
working on a couple of


132
00:04:23,726 --> 00:04:24,396
initiatives.


133
00:04:24,806 --> 00:04:26,216
And right now, I just want to


134
00:04:26,216 --> 00:04:28,296
give a brief preview about these


135
00:04:28,296 --> 00:04:28,926
initiatives.


136
00:04:29,556 --> 00:04:32,056
The first one is an


137
00:04:32,116 --> 00:04:33,986
investigator's support program


138
00:04:34,126 --> 00:04:35,086
that we are piloting.


139
00:04:35,646 --> 00:04:37,126
We are currently developing this


140
00:04:37,196 --> 00:04:37,656
program.


141
00:04:37,956 --> 00:04:39,766
And this will be live later this


142
00:04:39,766 --> 00:04:40,086
year.


143
00:04:40,626 --> 00:04:42,266
Now, this will be a Limited


144
00:04:42,266 --> 00:04:44,276
Apple Watch Grant Program that


145
00:04:44,276 --> 00:04:46,536
will have a very simple and easy


146
00:04:46,536 --> 00:04:48,236
proposal submission process.


147
00:04:49,216 --> 00:04:51,976
We will prioritize studies that


148
00:04:51,976 --> 00:04:54,496
advance science and help people


149
00:04:54,686 --> 00:04:57,226
to lead healthier lives by


150
00:04:57,316 --> 00:04:59,076
uniquely leveraging our


151
00:04:59,076 --> 00:04:59,876
ecosystem.


152
00:05:00,416 --> 00:05:03,346
The second initiative that we


153
00:05:03,346 --> 00:05:05,836
want to preview right now is a


154
00:05:05,836 --> 00:05:07,176
redesigned website.


155
00:05:07,986 --> 00:05:09,676
Now, this website will contain


156
00:05:09,676 --> 00:05:11,696
clear information for everyone


157
00:05:11,696 --> 00:05:13,386
who wants to learn more about


158
00:05:13,386 --> 00:05:14,616
the ResearchKit and CareKit


159
00:05:14,616 --> 00:05:15,196
frameworks.


160
00:05:15,856 --> 00:05:17,736
You will also be able to gather


161
00:05:17,736 --> 00:05:19,596
insights from other researchers


162
00:05:19,596 --> 00:05:21,026
and developers who are


163
00:05:21,066 --> 00:05:22,646
leveraging these frameworks to


164
00:05:22,646 --> 00:05:24,696
build some amazing research and


165
00:05:24,696 --> 00:05:25,266
care apps.


166
00:05:25,776 --> 00:05:27,316
This website will also have a


167
00:05:27,316 --> 00:05:29,226
lot more information about the


168
00:05:29,226 --> 00:05:30,836
investigator support program.


169
00:05:31,506 --> 00:05:33,396
And both the website and the


170
00:05:33,396 --> 00:05:34,776
investigator support program


171
00:05:34,776 --> 00:05:37,066
itself will be live in Fall of


172
00:05:37,066 --> 00:05:38,106
2019.


173
00:05:38,306 --> 00:05:39,886
And we are really excited about


174
00:05:39,886 --> 00:05:40,166
this.


175
00:05:41,106 --> 00:05:43,706
And now, let's switch gears and


176
00:05:43,706 --> 00:05:45,126
talk about updates that we have


177
00:05:45,126 --> 00:05:46,236
made to the ResearchKit


178
00:05:46,306 --> 00:05:46,736
framework.


179
00:05:46,736 --> 00:05:48,576
We want to cover two main


180
00:05:48,576 --> 00:05:51,566
topics, UI updates, and active


181
00:05:51,606 --> 00:05:52,186
tasks.


182
00:05:53,436 --> 00:05:54,736
Let's get started with UI


183
00:05:54,736 --> 00:05:55,176
updates.


184
00:05:56,066 --> 00:05:58,536
This year, our main focus has


185
00:05:58,536 --> 00:06:00,406
been around refining the user


186
00:06:00,406 --> 00:06:02,886
experience, around answering


187
00:06:02,886 --> 00:06:03,896
survey questionnaires.


188
00:06:04,286 --> 00:06:05,706
Because we realized that some of


189
00:06:05,746 --> 00:06:07,006
the validated medical


190
00:06:07,036 --> 00:06:08,756
questionnaires and onboarding


191
00:06:08,806 --> 00:06:09,976
flows can be extremely long.


192
00:06:13,046 --> 00:06:14,236
So you can see here that we have


193
00:06:14,396 --> 00:06:16,586
updated the card styling for you


194
00:06:16,586 --> 00:06:18,496
to provide more contextual


195
00:06:18,496 --> 00:06:19,796
information to your users.


196
00:06:20,686 --> 00:06:22,726
This includes an intra step


197
00:06:22,996 --> 00:06:25,846
progress indicator, as well as a


198
00:06:25,846 --> 00:06:26,656
Learn More button.


199
00:06:27,296 --> 00:06:29,156
Now this button can be used for


200
00:06:29,156 --> 00:06:31,306
situations where your questions


201
00:06:31,306 --> 00:06:33,066
or answer choices contain


202
00:06:33,266 --> 00:06:35,056
terminologies but just not quite


203
00:06:35,056 --> 00:06:36,086
self-explanatory.


204
00:06:36,606 --> 00:06:38,196
So in this example, if your


205
00:06:38,196 --> 00:06:40,146
users are unaware of what


206
00:06:40,146 --> 00:06:42,326
narcolepsy actually means, they


207
00:06:42,326 --> 00:06:43,776
can simply tap on the Learn More


208
00:06:43,776 --> 00:06:45,866
button to pull up a sheet that


209
00:06:45,866 --> 00:06:47,786
gives them a lot of information


210
00:06:47,856 --> 00:06:49,176
about the question and the


211
00:06:49,176 --> 00:06:50,356
answer choices themselves.


212
00:06:51,066 --> 00:06:53,936
Now you'll notice that we have


213
00:06:53,936 --> 00:06:55,636
added a Top Content Image view.


214
00:06:56,136 --> 00:06:57,696
And this styling will now be


215
00:06:57,736 --> 00:06:58,986
consistent throughout


216
00:06:58,986 --> 00:07:01,316
ResearchKit, so all of our steps


217
00:07:01,556 --> 00:07:03,536
now have the ability to display


218
00:07:03,586 --> 00:07:05,536
rich media content via the Top


219
00:07:05,536 --> 00:07:06,556
Content image view.


220
00:07:07,096 --> 00:07:09,506
And if you scroll further down,


221
00:07:09,506 --> 00:07:11,176
we have added a new object of


222
00:07:11,246 --> 00:07:12,926
type body items, which can be


223
00:07:12,926 --> 00:07:15,446
used to compose lists that will


224
00:07:15,446 --> 00:07:17,216
be automatically formatted for


225
00:07:17,216 --> 00:07:17,506
you.


226
00:07:17,506 --> 00:07:20,566
And now let's take a look at how


227
00:07:20,566 --> 00:07:21,926
you can incorporate these


228
00:07:21,926 --> 00:07:22,966
changes into your existing apps.


229
00:07:26,276 --> 00:07:27,396
So the first thing that you want


230
00:07:27,396 --> 00:07:28,946
to do is create an instance of


231
00:07:29,036 --> 00:07:31,036
ORK learnMoreStep with a unique


232
00:07:31,036 --> 00:07:31,766
identifier.


233
00:07:32,336 --> 00:07:35,316
All of our steps now have this


234
00:07:35,316 --> 00:07:36,376
image property, which will


235
00:07:36,376 --> 00:07:38,426
display as the top content image


236
00:07:38,426 --> 00:07:38,656
view.


237
00:07:39,276 --> 00:07:40,686
You can also customize other


238
00:07:40,686 --> 00:07:43,406
properties, like title and text.


239
00:07:44,696 --> 00:07:46,106
The other thing that you need to


240
00:07:46,106 --> 00:07:48,096
do is create an instance of


241
00:07:48,206 --> 00:07:49,416
ORKBodyItem.


242
00:07:49,816 --> 00:07:50,946
And it accepts the following


243
00:07:50,946 --> 00:07:52,566
parameters, like text, detailed


244
00:07:52,566 --> 00:07:53,546
text, and a style.


245
00:07:53,976 --> 00:07:55,216
You can choose between bullet


246
00:07:55,256 --> 00:07:57,016
point images and just plain


247
00:07:57,796 --> 00:07:58,246
text.


248
00:07:58,246 --> 00:08:00,626
Now all of our steps accept an


249
00:08:00,686 --> 00:08:01,966
array of body items.


250
00:08:02,376 --> 00:08:04,126
So let's assign this body item


251
00:08:04,126 --> 00:08:05,506
to the learnMoreStep.


252
00:08:06,536 --> 00:08:07,436
The next thing that you would


253
00:08:07,436 --> 00:08:09,426
want to do is create an instance


254
00:08:09,706 --> 00:08:12,396
of learnMoreItem and bypassing


255
00:08:12,396 --> 00:08:12,856
in the step.


256
00:08:13,546 --> 00:08:15,436
So this is the object that


257
00:08:15,436 --> 00:08:16,896
essentially creates the Detail


258
00:08:16,896 --> 00:08:18,746
Disclosure button on the screen.


259
00:08:19,466 --> 00:08:21,096
We also have another initializer


260
00:08:21,096 --> 00:08:21,906
which accepts text.


261
00:08:22,386 --> 00:08:23,926
So that one will be displayed as


262
00:08:23,926 --> 00:08:24,936
a hyperlink in your step.


263
00:08:27,156 --> 00:08:28,906
We have also added another


264
00:08:28,906 --> 00:08:31,886
initializer to ORK form items in


265
00:08:31,886 --> 00:08:33,546
order to help you customize the


266
00:08:33,606 --> 00:08:35,436
section headers, which allows


267
00:08:35,486 --> 00:08:37,466
you to group multiple form items


268
00:08:37,525 --> 00:08:38,736
under the same section.


269
00:08:39,285 --> 00:08:41,086
Now this accepts properties like


270
00:08:41,086 --> 00:08:43,366
sectionTitle, detailText, the


271
00:08:43,366 --> 00:08:45,066
learnMoreItem, and the toggle to


272
00:08:45,066 --> 00:08:47,006
indicate whether or not you want


273
00:08:47,006 --> 00:08:48,256
to display the intra step


274
00:08:48,306 --> 00:08:49,276
progress indicator.


275
00:08:50,636 --> 00:08:51,426
And now that you have


276
00:08:51,426 --> 00:08:52,836
incorporated these changes into


277
00:08:52,836 --> 00:08:55,586
your apps, your users can make


278
00:08:55,676 --> 00:08:57,416
an informed decision before


279
00:08:57,416 --> 00:08:58,976
answering any of your questions.


280
00:09:02,326 --> 00:09:04,136
Now let's move on to active


281
00:09:04,136 --> 00:09:04,306
tasks.


282
00:09:05,176 --> 00:09:06,946
Now similar to last year, this


283
00:09:06,946 --> 00:09:08,946
year, we will be focusing on our


284
00:09:08,946 --> 00:09:10,626
three main areas of health --


285
00:09:11,126 --> 00:09:14,626
vision, hearing, and speech.


286
00:09:15,956 --> 00:09:17,156
Now when it comes to measuring


287
00:09:17,156 --> 00:09:19,386
visual health, there are two key


288
00:09:19,386 --> 00:09:21,046
metrics that are considered as


289
00:09:21,086 --> 00:09:23,906
the gold standard, visual acuity


290
00:09:24,436 --> 00:09:25,796
and contrast sensitivity.


291
00:09:27,096 --> 00:09:28,996
Visual acuity is essentially


292
00:09:28,996 --> 00:09:31,796
your ability to distinguish and


293
00:09:31,796 --> 00:09:33,366
identify an object along with


294
00:09:33,366 --> 00:09:33,976
its features.


295
00:09:37,266 --> 00:09:39,456
It comes in two stimulis.


296
00:09:39,696 --> 00:09:41,636
One is the Landolt C, and the


297
00:09:41,636 --> 00:09:43,606
other one is a Snellen or


298
00:09:43,606 --> 00:09:44,196
Tumbling E.


299
00:09:44,716 --> 00:09:46,806
Now our first active task in the


300
00:09:46,806 --> 00:09:48,706
visual acuity space is a


301
00:09:48,706 --> 00:09:50,726
contribution by Novartis from


302
00:09:50,726 --> 00:09:51,566
their FocalView app.


303
00:09:52,506 --> 00:09:54,596
Now, this app essentially


304
00:09:54,596 --> 00:09:56,636
requests the user to align the


305
00:09:56,636 --> 00:09:58,326
outer dial with the opening in


306
00:09:58,326 --> 00:09:59,026
the letter C.


307
00:10:00,536 --> 00:10:01,976
Now the Landolt C stimuli


308
00:10:02,366 --> 00:10:04,276
remains in fixed contrast but


309
00:10:04,276 --> 00:10:06,216
keeps decreasing in size and


310
00:10:06,216 --> 00:10:08,186
pops up in random orientations.


311
00:10:09,026 --> 00:10:10,936
Once a user completes this task,


312
00:10:10,936 --> 00:10:12,846
the developer will receive a


313
00:10:12,846 --> 00:10:14,606
visual acuity rating score for


314
00:10:14,606 --> 00:10:14,976
that user.


315
00:10:18,046 --> 00:10:19,596
To incorporate this in your app,


316
00:10:19,596 --> 00:10:21,026
you create an instance of


317
00:10:21,136 --> 00:10:23,466
ORKLandoltCStep with a unique


318
00:10:23,466 --> 00:10:24,186
identifier.


319
00:10:24,986 --> 00:10:26,876
You then set the testType to be


320
00:10:26,876 --> 00:10:27,466
acuity.


321
00:10:28,306 --> 00:10:29,986
And then as always, you can


322
00:10:29,986 --> 00:10:31,516
create an ordered task by


323
00:10:31,516 --> 00:10:32,926
passing in an array of steps,


324
00:10:33,516 --> 00:10:35,096
then pass the task to create a


325
00:10:35,096 --> 00:10:36,256
TaskViewController, which you


326
00:10:36,256 --> 00:10:36,976
can present within your app.


327
00:10:42,106 --> 00:10:43,946
Our second active task in the


328
00:10:43,946 --> 00:10:46,576
visual acuity space leverages


329
00:10:46,776 --> 00:10:49,386
Tumbling E as the stimuli.


330
00:10:50,276 --> 00:10:51,676
Now as part of this task, the


331
00:10:51,676 --> 00:10:53,296
user will be expected to swipe


332
00:10:53,456 --> 00:10:55,276
into the direction of the arms


333
00:10:55,336 --> 00:10:56,246
of the letter E.


334
00:10:57,196 --> 00:10:58,566
Now similar to Landolt C, the


335
00:10:58,566 --> 00:11:00,966
Tumbling E will remain fixed in


336
00:11:00,966 --> 00:11:03,196
contrast, will decrease in size,


337
00:11:03,256 --> 00:11:04,206
and pop up in random


338
00:11:04,206 --> 00:11:04,926
orientation.


339
00:11:05,546 --> 00:11:06,946
But the interesting piece here


340
00:11:07,296 --> 00:11:08,856
is that the testing distance,


341
00:11:09,056 --> 00:11:10,226
along with the size of the


342
00:11:10,226 --> 00:11:12,016
stimuli, is controlled by the


343
00:11:12,066 --> 00:11:12,956
TrueDepth camera.


344
00:11:13,506 --> 00:11:16,086
And once the user completes this


345
00:11:16,086 --> 00:11:18,006
task, you will receive a lot


346
00:11:18,006 --> 00:11:20,306
more value, where MAR stands for


347
00:11:20,306 --> 00:11:22,326
Minimum Angle of Resolution.


348
00:11:24,216 --> 00:11:25,536
To incorporate this in your app,


349
00:11:25,856 --> 00:11:27,236
you create an instance of


350
00:11:27,236 --> 00:11:29,986
ORKTumblingEStep with a unique


351
00:11:29,986 --> 00:11:30,676
identifier.


352
00:11:31,246 --> 00:11:33,146
You can also specify the minimum


353
00:11:33,146 --> 00:11:34,716
and maximum viewing distance


354
00:11:35,036 --> 00:11:36,746
that is specific to your trial.


355
00:11:37,286 --> 00:11:40,086
And same as always, you create


356
00:11:40,086 --> 00:11:41,906
an OrderedTask, pass that to the


357
00:11:41,906 --> 00:11:44,046
ViewController, and present it.


358
00:11:45,396 --> 00:11:47,916
Now let's move on to our next


359
00:11:47,916 --> 00:11:49,846
big category ambition, contrast


360
00:11:49,846 --> 00:11:50,506
sensitivity.


361
00:11:51,046 --> 00:11:52,756
This essentially refers to your


362
00:11:52,756 --> 00:11:54,666
ability to distinguish an object


363
00:11:54,666 --> 00:11:55,726
from its background.


364
00:11:56,466 --> 00:11:58,586
And it comes in -- so two


365
00:11:58,586 --> 00:12:00,986
stimuli is most commonly used to


366
00:12:01,016 --> 00:12:02,446
test for this particular


367
00:12:02,696 --> 00:12:04,116
contrast sensitivity feature.


368
00:12:04,746 --> 00:12:06,906
One is Landolt C, and the other


369
00:12:06,906 --> 00:12:07,926
one is a Gabor Patch.


370
00:12:11,136 --> 00:12:12,206
The first active task in


371
00:12:12,206 --> 00:12:13,826
contrast sensitivity is once


372
00:12:13,826 --> 00:12:15,506
again a contribution by Novartis


373
00:12:15,506 --> 00:12:17,386
from their FocalView app.


374
00:12:17,596 --> 00:12:19,226
Now, this is very much in line


375
00:12:19,226 --> 00:12:20,496
with the visual acuity task.


376
00:12:20,826 --> 00:12:22,446
But the key difference here is


377
00:12:22,446 --> 00:12:24,816
that the Landolt C remains fixed


378
00:12:24,816 --> 00:12:27,286
in size but keeps decreasing in


379
00:12:27,286 --> 00:12:28,756
contrast as it is being


380
00:12:28,756 --> 00:12:29,846
presented in random


381
00:12:29,846 --> 00:12:30,616
orientations.


382
00:12:31,606 --> 00:12:32,986
And once the user completes this


383
00:12:33,036 --> 00:12:34,646
task, you will receive the


384
00:12:34,646 --> 00:12:35,776
visual acuity rating score for


385
00:12:35,776 --> 00:12:35,976
the user.


386
00:12:39,136 --> 00:12:40,806
Adding this to your app is


387
00:12:40,876 --> 00:12:42,596
exactly the same as the visual


388
00:12:42,706 --> 00:12:43,266
acuity task.


389
00:12:43,616 --> 00:12:45,136
The only key difference is that


390
00:12:45,136 --> 00:12:46,116
you're going to toggle the test


391
00:12:46,116 --> 00:12:46,976
type to be contrast sensitivity.


392
00:12:51,066 --> 00:12:52,706
As part of our next task, we


393
00:12:52,706 --> 00:12:54,616
will try to generate the


394
00:12:54,646 --> 00:12:56,496
contrast sensitivity function


395
00:12:56,496 --> 00:12:58,186
for a user by presenting them


396
00:12:58,186 --> 00:12:59,686
with the stimuli known as the


397
00:12:59,686 --> 00:13:00,436
Gabor Patch.


398
00:13:00,966 --> 00:13:02,206
And this is what it looks like.


399
00:13:03,026 --> 00:13:04,136
So you'll notice that there are


400
00:13:04,186 --> 00:13:06,356
certain lines on the stimuli


401
00:13:06,356 --> 00:13:08,796
that is leaning to the right,


402
00:13:09,406 --> 00:13:10,746
especially the top tilt.


403
00:13:11,606 --> 00:13:12,976
And in the other stimuli, you


404
00:13:12,976 --> 00:13:14,576
will notice that the top tilt,


405
00:13:14,786 --> 00:13:16,696
or the upward tilt, is leaning


406
00:13:16,696 --> 00:13:17,216
to the left.


407
00:13:17,756 --> 00:13:19,726
Now, your users will be expected


408
00:13:19,726 --> 00:13:22,036
to recognize that leaning of the


409
00:13:22,036 --> 00:13:23,906
tilt and select the appropriate


410
00:13:23,906 --> 00:13:24,976
direction as part of the task.


411
00:13:29,046 --> 00:13:31,416
Now, the Gabor Patch stimuli is


412
00:13:31,416 --> 00:13:33,646
generated programmatically using


413
00:13:33,646 --> 00:13:35,626
an adaptive algorithm that


414
00:13:35,626 --> 00:13:37,326
varies the spatial frequency.


415
00:13:38,796 --> 00:13:40,166
Now the Gabor Patch will be


416
00:13:40,166 --> 00:13:41,396
displayed with random


417
00:13:41,396 --> 00:13:43,106
orientations and different


418
00:13:43,106 --> 00:13:44,966
positions within the screen.


419
00:13:45,976 --> 00:13:47,716
And once again, the testing


420
00:13:47,716 --> 00:13:49,096
distance and the size of the


421
00:13:49,096 --> 00:13:51,166
stimuli itself is controlled


422
00:13:51,246 --> 00:13:52,996
real time by the TrueDepth


423
00:13:52,996 --> 00:13:53,416
camera.


424
00:13:54,886 --> 00:13:56,176
Once the user completes this


425
00:13:56,216 --> 00:13:58,436
task, the developer will be able


426
00:13:58,436 --> 00:14:00,606
to use the results to generate a


427
00:14:00,696 --> 00:14:02,236
sensitivity vs spatial


428
00:14:02,236 --> 00:14:03,976
frequency curve for the user.


429
00:14:07,056 --> 00:14:08,476
To incorporate this in your app,


430
00:14:08,476 --> 00:14:09,926
you create an instance of


431
00:14:09,996 --> 00:14:12,306
ORKCSFStep with a unique


432
00:14:12,306 --> 00:14:13,176
identifier.


433
00:14:13,996 --> 00:14:15,236
Once again, you can set the


434
00:14:15,236 --> 00:14:16,676
minimum and maximum viewing


435
00:14:16,676 --> 00:14:18,156
distance that is specific to


436
00:14:18,156 --> 00:14:18,816
your trial.


437
00:14:20,146 --> 00:14:21,956
You create an OrderedTask, pass


438
00:14:22,026 --> 00:14:23,546
that to the TaskViewController,


439
00:14:23,546 --> 00:14:24,776
and simply present it within


440
00:14:24,776 --> 00:14:24,976
your app.


441
00:14:29,046 --> 00:14:30,466
Now the contrast sensitivity


442
00:14:30,556 --> 00:14:32,126
function and the Tumbling E


443
00:14:32,126 --> 00:14:34,056
active task that leverage the


444
00:14:34,096 --> 00:14:35,286
TrueDepth camera will be


445
00:14:35,286 --> 00:14:37,626
available soon via an Apple


446
00:14:37,626 --> 00:14:38,936
sample code license on


447
00:14:38,936 --> 00:14:40,446
developer.apple.com.


448
00:14:41,566 --> 00:14:43,066
Now let's move on to our next


449
00:14:43,066 --> 00:14:44,506
category, hearing.


450
00:14:45,306 --> 00:14:47,516
So last year, we announced three


451
00:14:47,516 --> 00:14:49,726
new active tasks that focus on


452
00:14:49,726 --> 00:14:50,306
hearing health.


453
00:14:50,306 --> 00:14:51,966
We had to tone audiometry,


454
00:14:52,086 --> 00:14:53,986
speech and noise, and SPL meter.


455
00:14:54,926 --> 00:14:56,116
This year, we are making


456
00:14:56,116 --> 00:14:58,096
across-the-board enhancements to


457
00:14:58,096 --> 00:14:58,866
the algorithms.


458
00:14:59,366 --> 00:15:01,066
And what's even better is that


459
00:15:01,066 --> 00:15:02,786
you can now write the results of


460
00:15:02,786 --> 00:15:04,996
these active tasks directly into


461
00:15:04,996 --> 00:15:05,456
HealthKit.


462
00:15:06,426 --> 00:15:07,796
To learn more about these new


463
00:15:07,796 --> 00:15:09,636
data types, I would recommend


464
00:15:09,636 --> 00:15:10,816
you to check out the HealthKit


465
00:15:10,816 --> 00:15:12,296
session that's happening today


466
00:15:12,296 --> 00:15:12,976
at 2:00 p.m.


467
00:15:16,356 --> 00:15:17,916
Now let's move on to speech.


468
00:15:18,486 --> 00:15:19,986
Last year, we introduced a


469
00:15:19,986 --> 00:15:21,546
speech recognition active task.


470
00:15:21,996 --> 00:15:23,926
When a user completes this task,


471
00:15:24,306 --> 00:15:25,756
you will receive a bunch of


472
00:15:26,006 --> 00:15:27,926
information, including the raw


473
00:15:27,926 --> 00:15:29,876
audio file, the transcript, as


474
00:15:29,876 --> 00:15:31,456
well as an SFTranscription


475
00:15:31,456 --> 00:15:33,146
object rendered by the speech


476
00:15:33,146 --> 00:15:34,126
recognition framework.


477
00:15:34,646 --> 00:15:35,606
Well, this year, the Speech


478
00:15:35,606 --> 00:15:37,766
Recognition team has added more


479
00:15:37,766 --> 00:15:38,856
capabilities to the SF


480
00:15:38,856 --> 00:15:39,916
transcription object.


481
00:15:39,916 --> 00:15:41,576
So you will be able to extract


482
00:15:41,576 --> 00:15:43,046
information like speaking rate


483
00:15:43,046 --> 00:15:44,416
and average pause duration.


484
00:15:44,676 --> 00:15:46,276
And on top of that, there's also


485
00:15:46,276 --> 00:15:47,796
a new object called


486
00:15:47,796 --> 00:15:49,146
SFVoiceAnalytics.


487
00:15:49,376 --> 00:15:50,846
And to learn more about these,


488
00:15:51,206 --> 00:15:52,376
please check out the session


489
00:15:52,376 --> 00:15:54,366
titled "Advances in Speech


490
00:15:54,366 --> 00:15:54,996
Recognition."


491
00:15:55,536 --> 00:15:58,806
And those were our overall


492
00:15:58,806 --> 00:16:00,386
updates and additions to our


493
00:16:00,476 --> 00:16:02,976
expanding library of active


494
00:16:03,016 --> 00:16:03,396
tasks.


495
00:16:04,666 --> 00:16:05,926
Now, you might have noticed that


496
00:16:05,926 --> 00:16:07,706
some of these tasks leverage


497
00:16:08,026 --> 00:16:09,746
some system frameworks under the


498
00:16:09,746 --> 00:16:10,076
hood.


499
00:16:11,246 --> 00:16:12,996
And we want to remind you that


500
00:16:12,996 --> 00:16:14,356
there are a lot of other


501
00:16:14,476 --> 00:16:16,426
powerful iOS system frameworks


502
00:16:16,496 --> 00:16:17,726
as part of our SDK.


503
00:16:18,506 --> 00:16:19,846
And we would highly encourage


504
00:16:19,846 --> 00:16:21,866
developers to leverage the true


505
00:16:21,866 --> 00:16:23,976
potential of these frameworks as


506
00:16:23,976 --> 00:16:25,576
you're thinking about adding new


507
00:16:25,576 --> 00:16:27,886
active tasks into ResearchKit or


508
00:16:27,926 --> 00:16:29,126
even if you are considering


509
00:16:29,156 --> 00:16:31,116
adding novel experiences that


510
00:16:31,186 --> 00:16:31,926
focus on health.


511
00:16:34,516 --> 00:16:36,896
And with that, let's move on to


512
00:16:36,896 --> 00:16:38,066
updates for CareKit.


513
00:16:39,306 --> 00:16:40,746
Now, the CareKit framework was


514
00:16:40,746 --> 00:16:43,946
introduced back in 2016 as an


515
00:16:44,006 --> 00:16:45,256
Open Source framework.


516
00:16:45,826 --> 00:16:47,616
And we wanted to enable the


517
00:16:47,616 --> 00:16:49,826
developers to perform three main


518
00:16:49,826 --> 00:16:52,076
things -- the ability to be able


519
00:16:52,076 --> 00:16:53,636
to easily digitize a


520
00:16:53,636 --> 00:16:56,046
prescription, the ability to


521
00:16:56,046 --> 00:16:57,556
provide meaningful data and


522
00:16:57,556 --> 00:16:59,316
trends to the user, and to allow


523
00:16:59,316 --> 00:17:00,986
your users to easily connect


524
00:17:01,246 --> 00:17:02,276
with their care providers.


525
00:17:03,556 --> 00:17:05,016
And over the past few years,


526
00:17:05,016 --> 00:17:06,826
we've been making incremental


527
00:17:06,826 --> 00:17:07,976
updates to the framework.


528
00:17:08,675 --> 00:17:11,465
And this year, I'm really


529
00:17:11,465 --> 00:17:14,296
excited to announce CareKit 2.0.


530
00:17:15,146 --> 00:17:16,925
And this is what it looks like.


531
00:17:17,786 --> 00:17:19,086
Now you'll see that we have


532
00:17:19,086 --> 00:17:21,766
completely revamped the UI for


533
00:17:21,766 --> 00:17:22,336
the framework.


534
00:17:23,646 --> 00:17:26,226
But what's even better is that


535
00:17:26,226 --> 00:17:27,465
we have fundamentally


536
00:17:27,536 --> 00:17:29,336
rearchitected and rewritten the


537
00:17:29,366 --> 00:17:31,646
framework purely using Swift.


538
00:17:32,616 --> 00:17:34,196
Now, that means that CareKit,


539
00:17:34,316 --> 00:17:35,856
under the hood, can leverage


540
00:17:35,856 --> 00:17:37,346
some of the most powerful Swift


541
00:17:37,346 --> 00:17:39,316
language features, including the


542
00:17:39,316 --> 00:17:40,886
newly announced combined


543
00:17:40,886 --> 00:17:41,396
framework.


544
00:17:42,886 --> 00:17:44,016
Now let's dive into some


545
00:17:44,016 --> 00:17:44,526
details.


546
00:17:45,376 --> 00:17:47,036
The CareKit framework now


547
00:17:47,036 --> 00:17:48,506
comprises of two other


548
00:17:48,506 --> 00:17:49,736
frameworks under the hood --


549
00:17:50,636 --> 00:17:52,966
CareKit UI and CareKit Store.


550
00:17:54,296 --> 00:17:56,986
CareKit UI is a separate project


551
00:17:57,126 --> 00:17:58,586
inside the CareKit repository


552
00:17:58,906 --> 00:18:00,316
that you can independently


553
00:18:00,316 --> 00:18:02,896
compile and expose as a separate


554
00:18:02,976 --> 00:18:03,446
framework.


555
00:18:04,756 --> 00:18:06,966
CareKit UI is all about


556
00:18:07,136 --> 00:18:09,796
pre-packaged sub classes of UI


557
00:18:09,796 --> 00:18:10,166
views.


558
00:18:10,696 --> 00:18:12,446
So what that essentially means


559
00:18:12,506 --> 00:18:14,606
is that every single view that


560
00:18:14,606 --> 00:18:16,096
you see on the screen is


561
00:18:16,096 --> 00:18:18,056
available for you to leverage in


562
00:18:18,056 --> 00:18:20,066
your app using CareKit UI.


563
00:18:20,946 --> 00:18:22,346
And we have categorized them


564
00:18:22,606 --> 00:18:24,506
into three categories or


565
00:18:24,506 --> 00:18:25,196
components.


566
00:18:25,646 --> 00:18:27,876
We call them tasks, charts, and


567
00:18:27,876 --> 00:18:28,396
contacts.


568
00:18:29,076 --> 00:18:30,606
And these are used to reflect


569
00:18:31,026 --> 00:18:33,006
the functionality that each view


570
00:18:33,006 --> 00:18:35,966
is supposed to serve.


571
00:18:36,186 --> 00:18:37,726
Now, as I mentioned, all of the


572
00:18:37,726 --> 00:18:40,216
views in CareKit UI are just


573
00:18:40,516 --> 00:18:41,896
naive UI views and are


574
00:18:41,896 --> 00:18:43,426
essentially sub classes of UI


575
00:18:43,426 --> 00:18:43,706
views.


576
00:18:44,706 --> 00:18:45,966
So I want to start off by


577
00:18:45,966 --> 00:18:47,466
talking about all the views that


578
00:18:47,466 --> 00:18:48,726
are available in tasks.


579
00:18:48,936 --> 00:18:50,116
And there are five of them that


580
00:18:50,116 --> 00:18:50,976
we want to highlight today.


581
00:18:53,436 --> 00:18:55,076
Now here, you can see that we


582
00:18:55,076 --> 00:18:55,876
have a view.


583
00:18:56,036 --> 00:18:57,836
And since it is just a subclass


584
00:18:57,836 --> 00:18:59,356
of a UI view, you can constrain


585
00:18:59,356 --> 00:19:01,166
it anywhere within your app by


586
00:19:01,166 --> 00:19:02,256
adding it as a sub view.


587
00:19:03,226 --> 00:19:05,276
Now to create this view, all you


588
00:19:05,276 --> 00:19:07,176
have to do is import CareKit UI,


589
00:19:07,826 --> 00:19:09,046
create an instance of


590
00:19:09,136 --> 00:19:12,196
OCKSimpleTaskView, and set some


591
00:19:12,196 --> 00:19:13,276
of the parameters that are


592
00:19:13,276 --> 00:19:14,596
available on this object.


593
00:19:15,686 --> 00:19:16,586
It's that easy.


594
00:19:17,166 --> 00:19:19,316
And now let's take a look at the


595
00:19:19,316 --> 00:19:21,386
remaining four UIs that we said


596
00:19:21,386 --> 00:19:22,496
are available inside the task's


597
00:19:22,496 --> 00:19:22,796
component.


598
00:19:26,206 --> 00:19:27,526
The next one that we want to


599
00:19:27,526 --> 00:19:29,946
cover is the


600
00:19:29,946 --> 00:19:31,926
OCKInstructionsTaskView.


601
00:19:32,406 --> 00:19:33,766
So when you create an object of


602
00:19:33,806 --> 00:19:35,456
this type, you will get a view


603
00:19:35,456 --> 00:19:36,716
that looks somewhat like this.


604
00:19:37,026 --> 00:19:38,896
And all you have to do is add


605
00:19:38,896 --> 00:19:41,036
one additional parameter to set


606
00:19:41,136 --> 00:19:42,006
the right values.


607
00:19:43,436 --> 00:19:45,826
Along those same lines, the next


608
00:19:45,826 --> 00:19:47,026
view that we want to talk about


609
00:19:47,646 --> 00:19:51,086
is the OCKGridTaskView, which


610
00:19:51,086 --> 00:19:52,326
looks somewhat like this.


611
00:19:52,946 --> 00:19:54,376
Now this view is interesting


612
00:19:54,376 --> 00:19:55,976
because all the check marks and


613
00:19:55,976 --> 00:19:57,016
the buttons that you're seeing


614
00:19:57,016 --> 00:19:58,566
here, this is standard for a


615
00:19:58,566 --> 00:19:59,406
medication view.


616
00:19:59,706 --> 00:20:01,096
And as part of this view, we are


617
00:20:01,096 --> 00:20:02,826
essentially exposing the


618
00:20:02,826 --> 00:20:04,376
collectionView to you directly.


619
00:20:04,736 --> 00:20:05,836
So you could choose to set


620
00:20:05,836 --> 00:20:07,766
yourself up as the delegate and


621
00:20:07,976 --> 00:20:10,136
pass in whatever view you want


622
00:20:10,136 --> 00:20:11,256
into the collectionView.


623
00:20:11,446 --> 00:20:13,416
So you can choose to use an OCK


624
00:20:13,416 --> 00:20:13,886
button.


625
00:20:13,986 --> 00:20:15,326
Or you can even provide any


626
00:20:15,326 --> 00:20:16,006
custom UI.


627
00:20:16,006 --> 00:20:17,886
It is extremely customizable as


628
00:20:17,886 --> 00:20:17,976
well.


629
00:20:20,526 --> 00:20:23,666
Our next view type is an


630
00:20:23,716 --> 00:20:26,186
OCKChecklistTaskView, which


631
00:20:26,186 --> 00:20:27,306
looks somewhat like this.


632
00:20:28,326 --> 00:20:30,036
And all the buttons that you see


633
00:20:30,036 --> 00:20:31,766
on screen are now composed


634
00:20:31,806 --> 00:20:32,886
inside a Stack View.


635
00:20:33,326 --> 00:20:34,626
So by simply calling an


636
00:20:34,626 --> 00:20:36,126
appendItem method, you'll be


637
00:20:36,126 --> 00:20:38,056
able to add a new role into your


638
00:20:38,096 --> 00:20:39,476
checklist as a new item.


639
00:20:40,016 --> 00:20:43,076
Our final view type under the


640
00:20:43,076 --> 00:20:45,186
tasks component is an


641
00:20:45,186 --> 00:20:46,956
OCKSimpleLogTaskView.


642
00:20:47,626 --> 00:20:48,776
It looks somewhat like this.


643
00:20:48,776 --> 00:20:50,676
And it can be used for logging


644
00:20:50,876 --> 00:20:52,676
random events like a headache or


645
00:20:52,676 --> 00:20:53,206
nausea.


646
00:20:53,446 --> 00:20:55,396
And every time the user taps on


647
00:20:55,396 --> 00:20:56,836
the log button, we will show


648
00:20:56,836 --> 00:20:58,246
them a timestamp of when they


649
00:20:58,306 --> 00:20:59,436
logged their last event.


650
00:21:00,106 --> 00:21:01,476
And the timestamps are once


651
00:21:01,476 --> 00:21:02,826
again composed inside the stack


652
00:21:02,896 --> 00:21:03,126
view.


653
00:21:03,416 --> 00:21:04,566
So by simply calling the


654
00:21:04,566 --> 00:21:05,836
appendItem method, you'll be


655
00:21:05,836 --> 00:21:07,946
able to append more logs based


656
00:21:07,946 --> 00:21:10,366
on the action that is generated


657
00:21:10,366 --> 00:21:12,796
by the button.


658
00:21:12,876 --> 00:21:14,316
Now, let's move on to our next


659
00:21:14,316 --> 00:21:15,836
component, charts.


660
00:21:16,646 --> 00:21:19,366
So to create a chart in CareKit


661
00:21:19,366 --> 00:21:21,466
UI, you simply import CareKit


662
00:21:21,466 --> 00:21:21,876
UI.


663
00:21:22,096 --> 00:21:23,666
You create an instance of


664
00:21:23,666 --> 00:21:26,556
OCKCartesianChartCardView and


665
00:21:26,556 --> 00:21:27,396
specify a type.


666
00:21:27,926 --> 00:21:29,146
You can then go on to set the


667
00:21:29,146 --> 00:21:30,766
title, the text, and even the


668
00:21:30,766 --> 00:21:31,956
values as part of the data


669
00:21:31,956 --> 00:21:32,376
series.


670
00:21:32,946 --> 00:21:34,766
And by simply toggling the type,


671
00:21:35,836 --> 00:21:37,526
you'll be able to easily switch


672
00:21:37,526 --> 00:21:38,566
between the different chart


673
00:21:38,596 --> 00:21:40,476
types for that exact same set of


674
00:21:40,506 --> 00:21:40,976
data points.


675
00:21:43,176 --> 00:21:44,936
And our final component which we


676
00:21:44,936 --> 00:21:47,796
want to cover today is contacts.


677
00:21:48,476 --> 00:21:50,286
So you can create an instance of


678
00:21:50,286 --> 00:21:52,006
OCKContactCardView and just


679
00:21:52,006 --> 00:21:53,516
populate it with content.


680
00:21:53,826 --> 00:21:55,176
And we will ensure that all the


681
00:21:55,176 --> 00:21:56,486
constraints are applied in the


682
00:21:56,586 --> 00:21:56,956
right way.


683
00:22:00,286 --> 00:22:01,766
So those were our overall


684
00:22:01,766 --> 00:22:02,846
updates for CareKit UI.


685
00:22:02,846 --> 00:22:05,646
Our real intention here is to


686
00:22:05,646 --> 00:22:07,456
continue to add more views to


687
00:22:07,456 --> 00:22:09,126
each of these components and


688
00:22:09,126 --> 00:22:10,736
also expand the library of


689
00:22:10,736 --> 00:22:11,856
components that we have.


690
00:22:12,876 --> 00:22:14,136
We think that this can be an


691
00:22:14,136 --> 00:22:15,646
extremely powerful tool for


692
00:22:15,646 --> 00:22:18,186
users and makes the CareKit 2.0


693
00:22:18,186 --> 00:22:20,176
framework highly customizable,


694
00:22:20,416 --> 00:22:22,126
because we just give you all the


695
00:22:22,126 --> 00:22:24,066
new sorts of views with all the


696
00:22:24,066 --> 00:22:24,976
constraints taken care of.


697
00:22:28,086 --> 00:22:29,486
Now let's talk about CareKit


698
00:22:29,486 --> 00:22:29,906
Store.


699
00:22:30,686 --> 00:22:31,886
CareKit Store, similar to


700
00:22:31,886 --> 00:22:34,376
CareKit UI, is its own project


701
00:22:34,466 --> 00:22:35,656
inside the CareKit framework.


702
00:22:36,916 --> 00:22:38,796
So you can compile it and export


703
00:22:38,796 --> 00:22:40,546
it as a standalone framework


704
00:22:40,546 --> 00:22:41,766
into your app and use it in a


705
00:22:41,766 --> 00:22:43,196
completely unrelated manner.


706
00:22:43,866 --> 00:22:45,576
CareKit Store is essentially a


707
00:22:45,576 --> 00:22:47,306
wrapper on top of Core Data that


708
00:22:47,366 --> 00:22:49,826
allows you to persist Care Plans


709
00:22:49,946 --> 00:22:52,736
and react to them locally on


710
00:22:52,736 --> 00:22:53,736
device within your app


711
00:22:53,796 --> 00:22:54,366
containers.


712
00:22:55,256 --> 00:22:56,456
And since it's a database


713
00:22:56,456 --> 00:22:58,916
essentially, we have given you a


714
00:22:58,966 --> 00:23:00,046
cookie cutter scheme.


715
00:23:00,226 --> 00:23:01,716
And let's take a look at what


716
00:23:01,716 --> 00:23:02,316
that looks like.


717
00:23:02,866 --> 00:23:05,786
So the most fundamental entity


718
00:23:05,786 --> 00:23:08,866
for any Care app is the patient.


719
00:23:09,746 --> 00:23:11,806
Now let's take a look at how you


720
00:23:11,806 --> 00:23:13,386
initialize a CareKit Store,


721
00:23:14,646 --> 00:23:16,306
create a patient object, and


722
00:23:16,306 --> 00:23:17,726
ingest that into the CareKit


723
00:23:17,726 --> 00:23:18,026
Store.


724
00:23:19,656 --> 00:23:21,626
So you start off by importing


725
00:23:21,756 --> 00:23:23,376
CareKitStore as a standalone


726
00:23:23,416 --> 00:23:23,886
framework.


727
00:23:24,646 --> 00:23:26,086
You then create an instance of


728
00:23:26,086 --> 00:23:27,646
OCKStore with a unique


729
00:23:27,646 --> 00:23:29,606
identifier to create the Core


730
00:23:29,606 --> 00:23:32,206
Data database within your app


731
00:23:32,796 --> 00:23:33,000
container.


732
00:23:33,616 --> 00:23:34,816
You then go on to create a


733
00:23:34,816 --> 00:23:36,756
patient object by using one of


734
00:23:36,756 --> 00:23:37,946
our convenience initializers


735
00:23:37,946 --> 00:23:39,016
that accepts some basic


736
00:23:39,066 --> 00:23:39,676
parameters.


737
00:23:41,066 --> 00:23:42,286
You can then call the


738
00:23:42,326 --> 00:23:44,076
addPatientMethod on the Store,


739
00:23:44,376 --> 00:23:46,816
which asynchronously accepts the


740
00:23:46,816 --> 00:23:48,836
object and ingests it into the


741
00:23:48,836 --> 00:23:49,386
database.


742
00:23:50,306 --> 00:23:52,056
And once that is complete, you


743
00:23:52,056 --> 00:23:53,716
will get a completion callback.


744
00:23:54,316 --> 00:23:55,966
And this will return a Swift


745
00:23:55,966 --> 00:23:56,866
result type that you can switch


746
00:23:56,866 --> 00:23:56,976
on.


747
00:24:00,346 --> 00:24:02,506
Now our second key entity in our


748
00:24:02,506 --> 00:24:04,826
Care Plan is the Care Plan


749
00:24:04,826 --> 00:24:05,336
itself.


750
00:24:05,846 --> 00:24:07,426
And every patient can have


751
00:24:07,426 --> 00:24:09,306
multiple Care Plans associated


752
00:24:09,406 --> 00:24:09,896
with them.


753
00:24:10,756 --> 00:24:12,496
So now let's take a look at how


754
00:24:12,496 --> 00:24:14,596
you can create a new Care Plan


755
00:24:14,936 --> 00:24:16,046
and associate it with a


756
00:24:16,046 --> 00:24:16,976
particular patient.


757
00:24:20,186 --> 00:24:21,686
So as always, you create a


758
00:24:21,686 --> 00:24:22,706
reference to the store.


759
00:24:22,706 --> 00:24:24,386
Now one thing to note here is


760
00:24:24,386 --> 00:24:25,416
that if you provide an


761
00:24:25,456 --> 00:24:26,726
identifier that is already


762
00:24:26,726 --> 00:24:28,776
available, we will just take an


763
00:24:28,776 --> 00:24:30,096
existing store with that


764
00:24:30,096 --> 00:24:30,916
identifier and return that to


765
00:24:30,916 --> 00:24:30,983
you.


766
00:24:34,046 --> 00:24:35,986
So then, if you don't have a


767
00:24:35,986 --> 00:24:37,316
reference to the patient object,


768
00:24:37,316 --> 00:24:38,446
the first thing that you need to


769
00:24:38,446 --> 00:24:40,656
do is query the patient object


770
00:24:40,656 --> 00:24:41,216
from the Store.


771
00:24:42,226 --> 00:24:43,786
And once that query completes


772
00:24:43,826 --> 00:24:45,386
asynchronously, you get a


773
00:24:45,386 --> 00:24:45,946
callback.


774
00:24:45,946 --> 00:24:47,416
And inside the callback, you can


775
00:24:47,416 --> 00:24:49,356
go on to create a Care Plan by


776
00:24:49,356 --> 00:24:50,636
providing it parameters like


777
00:24:50,636 --> 00:24:52,466
identifier, the name for the


778
00:24:52,466 --> 00:24:54,306
Care Plan, and most importantly,


779
00:24:54,306 --> 00:24:55,076
the patient ID.


780
00:24:55,606 --> 00:24:57,086
Doing this will essentially help


781
00:24:57,156 --> 00:24:59,156
create the association between


782
00:24:59,156 --> 00:25:00,656
the patient -- the Care Plan and


783
00:25:00,656 --> 00:25:01,446
the patient itself.


784
00:25:01,946 --> 00:25:03,116
And then you can call the


785
00:25:03,116 --> 00:25:05,136
addCarePlan method to ingest


786
00:25:05,176 --> 00:25:06,426
this new Care Plan into your


787
00:25:06,426 --> 00:25:06,886
database.


788
00:25:07,316 --> 00:25:11,246
Now every Care Plan can have an


789
00:25:11,386 --> 00:25:13,136
array of contacts associated


790
00:25:13,136 --> 00:25:13,516
with them.


791
00:25:13,886 --> 00:25:15,736
Now, these could be contacts for


792
00:25:15,736 --> 00:25:17,466
the primary care providers who


793
00:25:17,466 --> 00:25:18,636
are associated with this


794
00:25:18,636 --> 00:25:20,226
particular Care Plan.


795
00:25:21,076 --> 00:25:22,966
Now, the other thing that's


796
00:25:23,356 --> 00:25:25,196
interesting here is the notion


797
00:25:25,196 --> 00:25:25,526
of tasks.


798
00:25:26,376 --> 00:25:27,866
Now task entities are


799
00:25:27,866 --> 00:25:29,976
essentially action items that


800
00:25:29,976 --> 00:25:32,566
your users are requested to


801
00:25:32,566 --> 00:25:34,756
perform on a daily basis as part


802
00:25:34,756 --> 00:25:35,716
of their Care Plan.


803
00:25:36,266 --> 00:25:38,526
And every task has an associated


804
00:25:38,526 --> 00:25:40,006
schedule object with it.


805
00:25:40,416 --> 00:25:42,336
Now the schedule dictates when


806
00:25:42,336 --> 00:25:44,136
the user is expected to perform


807
00:25:44,136 --> 00:25:45,956
a particular task.


808
00:25:46,386 --> 00:25:48,536
So now let's take a look at how


809
00:25:48,536 --> 00:25:50,596
you can prescribe a particular


810
00:25:50,596 --> 00:25:52,566
medication to your user and


811
00:25:52,566 --> 00:25:53,806
ingest that into your Care


812
00:25:53,806 --> 00:25:53,926
Store.


813
00:25:58,046 --> 00:25:59,596
So here, we are creating a


814
00:25:59,596 --> 00:26:01,076
schedule where you need to take


815
00:26:01,076 --> 00:26:02,866
your medication every day at


816
00:26:02,916 --> 00:26:05,116
7:00 a.m. We are creating


817
00:26:05,116 --> 00:26:06,806
another schedule element that


818
00:26:06,806 --> 00:26:08,176
expects you to take the same


819
00:26:08,176 --> 00:26:10,326
medication every other day at


820
00:26:10,386 --> 00:26:12,126
12:00 p.m. So we are calling the


821
00:26:12,176 --> 00:26:14,296
former one as breakfast dose and


822
00:26:14,296 --> 00:26:16,036
the latter one as the lunch


823
00:26:16,036 --> 00:26:16,306
dose.


824
00:26:17,156 --> 00:26:18,506
And you can simply compose


825
00:26:18,506 --> 00:26:20,116
multiple schedules together to


826
00:26:20,116 --> 00:26:21,586
create one unified schedule


827
00:26:22,056 --> 00:26:24,066
which you can then pass on to


828
00:26:24,066 --> 00:26:24,316
the task.


829
00:26:25,876 --> 00:26:28,386
So the OCKTaskObject accepts


830
00:26:28,386 --> 00:26:30,026
parameters like identifier.


831
00:26:30,246 --> 00:26:31,896
The title here is a Doxylamine


832
00:26:31,896 --> 00:26:33,886
medication, and you can give it


833
00:26:33,886 --> 00:26:34,806
the schedule object.


834
00:26:34,886 --> 00:26:38,056
And you can directly add this


835
00:26:38,086 --> 00:26:41,826
task into your CareKit Store.


836
00:26:42,036 --> 00:26:43,546
Now, every time your user


837
00:26:43,546 --> 00:26:45,966
completes a particular task, we


838
00:26:45,966 --> 00:26:47,716
generate an outcome.


839
00:26:48,336 --> 00:26:49,826
And every outcome has an


840
00:26:49,866 --> 00:26:51,766
associated value with it.


841
00:26:52,776 --> 00:26:54,476
Now let's take a look at how you


842
00:26:54,476 --> 00:26:56,746
can query all the outcomes in


843
00:26:56,746 --> 00:26:58,266
your database to create


844
00:26:58,266 --> 00:27:00,516
meaningful data and trends that


845
00:27:00,516 --> 00:27:01,976
you can surface to your users.


846
00:27:06,316 --> 00:27:07,606
So here we are creating a


847
00:27:07,606 --> 00:27:09,366
blanket query that will query


848
00:27:09,366 --> 00:27:10,886
all elements in your database


849
00:27:10,946 --> 00:27:12,046
for the past seven days.


850
00:27:13,116 --> 00:27:14,646
We are then calling the


851
00:27:14,646 --> 00:27:16,626
fetchInsights method on the


852
00:27:16,626 --> 00:27:17,046
task.


853
00:27:17,376 --> 00:27:18,806
And we are passing it the


854
00:27:18,806 --> 00:27:20,746
identifier for the particular


855
00:27:20,796 --> 00:27:22,686
tasks whose event you are


856
00:27:22,686 --> 00:27:23,346
interested in.


857
00:27:23,686 --> 00:27:24,826
So in this case, I'm only


858
00:27:24,826 --> 00:27:26,426
interested in events generated


859
00:27:26,426 --> 00:27:27,926
for the doxylamine medication


860
00:27:27,926 --> 00:27:28,256
task.


861
00:27:29,196 --> 00:27:32,136
Now, this API has two blocks


862
00:27:32,206 --> 00:27:33,196
that are very interesting.


863
00:27:33,736 --> 00:27:35,146
The first one is the daily


864
00:27:35,146 --> 00:27:36,706
aggregator block which can be


865
00:27:36,706 --> 00:27:38,256
called multiple times.


866
00:27:38,606 --> 00:27:40,546
And every time, you get an array


867
00:27:40,546 --> 00:27:42,416
of events for that particular


868
00:27:42,416 --> 00:27:42,766
day.


869
00:27:42,946 --> 00:27:44,456
And you can use this to compute


870
00:27:44,456 --> 00:27:45,476
higher-order metrics.


871
00:27:47,006 --> 00:27:49,336
And then you get the completion


872
00:27:49,336 --> 00:27:50,566
block, which is called only


873
00:27:50,566 --> 00:27:50,916
once.


874
00:27:51,146 --> 00:27:52,886
And it gives you an array of


875
00:27:52,886 --> 00:27:54,946
computed values that you can use


876
00:27:54,946 --> 00:27:56,096
for further analysis or simply


877
00:27:56,156 --> 00:27:56,976
for charting.


878
00:28:00,416 --> 00:28:02,286
Now, every single entity in the


879
00:28:02,286 --> 00:28:03,866
CareKit Store can have an


880
00:28:03,866 --> 00:28:06,236
associated note object with it.


881
00:28:06,756 --> 00:28:08,376
Now note objects are essentially


882
00:28:08,376 --> 00:28:09,126
metadata.


883
00:28:09,456 --> 00:28:11,256
So for example, if the care


884
00:28:11,256 --> 00:28:13,346
provider decided to update the


885
00:28:13,346 --> 00:28:14,796
Care Plan for some reason, and


886
00:28:14,796 --> 00:28:16,226
they wanted to provide you with


887
00:28:16,356 --> 00:28:18,116
free form text, you will be able


888
00:28:18,116 --> 00:28:19,726
to add that to the note object.


889
00:28:21,076 --> 00:28:22,446
And the other interesting thing


890
00:28:22,786 --> 00:28:25,296
is that some of our key entities


891
00:28:25,526 --> 00:28:26,656
are now versionable.


892
00:28:27,576 --> 00:28:30,156
So when you update a medication


893
00:28:30,156 --> 00:28:31,556
task, or when you update a


894
00:28:31,556 --> 00:28:33,056
schedule, we will persist that


895
00:28:33,206 --> 00:28:34,736
in the CareKit Store and you can


896
00:28:34,736 --> 00:28:36,306
go back and forth between them.


897
00:28:36,886 --> 00:28:40,706
So those were our quick updates


898
00:28:40,736 --> 00:28:41,586
for the CareKit Store.


899
00:28:41,836 --> 00:28:43,016
There are a lot more powerful


900
00:28:43,016 --> 00:28:44,616
API's that are available in the


901
00:28:44,616 --> 00:28:45,736
CareKit Store framework.


902
00:28:45,886 --> 00:28:47,016
And we would recommend you to


903
00:28:47,016 --> 00:28:47,626
check them out.


904
00:28:48,646 --> 00:28:50,316
So now let's turn our focus to


905
00:28:50,626 --> 00:28:52,086
the CareKit framework itself.


906
00:28:52,806 --> 00:28:54,886
CareKit is all about bringing


907
00:28:55,006 --> 00:28:57,196
synchronization all the way from


908
00:28:57,196 --> 00:28:58,856
the UI level to the underlying


909
00:28:58,856 --> 00:28:59,356
database.


910
00:29:00,126 --> 00:29:01,686
And the way we accomplish this


911
00:29:02,036 --> 00:29:03,966
is by using a synchronizer


912
00:29:03,966 --> 00:29:04,446
object.


913
00:29:05,046 --> 00:29:07,786
Now this object makes heavy use


914
00:29:07,836 --> 00:29:09,516
of the combined framework under


915
00:29:09,516 --> 00:29:11,716
the hood to propagate events


916
00:29:11,716 --> 00:29:13,636
between the UI layer and the


917
00:29:13,636 --> 00:29:14,546
data store layer.


918
00:29:15,926 --> 00:29:17,536
Now, another key functionality


919
00:29:17,536 --> 00:29:20,056
of CareKit is its modularity and


920
00:29:20,056 --> 00:29:21,016
customizability.


921
00:29:21,656 --> 00:29:23,276
So what I mean by that is that


922
00:29:23,516 --> 00:29:25,606
the database here can either be


923
00:29:25,606 --> 00:29:27,526
a CareKit Store, or it can be


924
00:29:27,726 --> 00:29:29,646
any database of your preference,


925
00:29:29,986 --> 00:29:31,796
as long as it conforms to our


926
00:29:31,826 --> 00:29:33,846
OCKStore protocol, which will


927
00:29:33,846 --> 00:29:35,186
enable the synchronizer to


928
00:29:35,226 --> 00:29:36,656
interact with it seamlessly.


929
00:29:37,606 --> 00:29:39,566
And the UI elements that you see


930
00:29:39,566 --> 00:29:41,086
here can either come from


931
00:29:41,086 --> 00:29:41,576
CareKit UI.


932
00:29:41,576 --> 00:29:43,506
Or they could be even your


933
00:29:43,506 --> 00:29:45,716
custom UI views, as long as you


934
00:29:45,746 --> 00:29:47,896
tell us how to bind the views to


935
00:29:47,896 --> 00:29:48,876
a particular object.


936
00:29:50,166 --> 00:29:52,316
So now let's take a look at what


937
00:29:52,316 --> 00:29:54,426
happens when a user interacts


938
00:29:54,456 --> 00:29:55,596
with the UI element on the


939
00:29:55,596 --> 00:29:56,026
screen.


940
00:29:56,456 --> 00:29:58,186
So for this example, let's focus


941
00:29:58,186 --> 00:29:59,796
on the doxylamine medication on


942
00:29:59,796 --> 00:30:00,696
the top-left corner.


943
00:30:01,726 --> 00:30:03,186
When the user taps on this


944
00:30:03,226 --> 00:30:05,356
button, an event is propagated


945
00:30:05,446 --> 00:30:06,286
to the synchronizer.


946
00:30:07,396 --> 00:30:09,016
The synchronizer then forwards


947
00:30:09,016 --> 00:30:10,106
the information to the


948
00:30:10,106 --> 00:30:11,206
underlying data store.


949
00:30:11,936 --> 00:30:13,526
And once the database


950
00:30:13,706 --> 00:30:15,916
acknowledges successful receipt


951
00:30:16,746 --> 00:30:19,716
of this object, the synchronizer


952
00:30:20,036 --> 00:30:21,146
takes up the role of a


953
00:30:21,146 --> 00:30:21,566
publisher.


954
00:30:22,296 --> 00:30:24,196
And it propagates the stream to


955
00:30:24,196 --> 00:30:25,776
all the UI elements that are


956
00:30:25,776 --> 00:30:27,886
subscribed to that particular


957
00:30:27,996 --> 00:30:28,516
stream.


958
00:30:28,976 --> 00:30:30,606
And in this example, there are


959
00:30:30,606 --> 00:30:31,976
only three cards that are


960
00:30:32,056 --> 00:30:34,126
subscribed to updates from the


961
00:30:34,126 --> 00:30:35,066
medication task.


962
00:30:36,026 --> 00:30:37,276
And once the stream reaches


963
00:30:37,326 --> 00:30:38,576
them, they will be able to


964
00:30:38,616 --> 00:30:39,976
independently update themselves.


965
00:30:41,796 --> 00:30:44,576
This is really exciting because


966
00:30:44,576 --> 00:30:46,516
the UI views are acting


967
00:30:46,556 --> 00:30:48,116
independently of each other.


968
00:30:48,336 --> 00:30:50,136
And they're also updating in an


969
00:30:50,176 --> 00:30:51,996
asynchronous manner, which can


970
00:30:51,996 --> 00:30:53,236
lead to some really powerful


971
00:30:53,236 --> 00:30:54,976
experiences in your care app.


972
00:30:58,256 --> 00:30:59,916
Now, let's take a look at how


973
00:30:59,916 --> 00:31:01,976
you can incorporate CareKit in


974
00:31:01,976 --> 00:31:04,086
your app end-to-end in code.


975
00:31:04,866 --> 00:31:06,336
So the first thing you do is you


976
00:31:06,336 --> 00:31:07,246
import CareKit.


977
00:31:07,246 --> 00:31:09,366
And doing so will automatically


978
00:31:09,366 --> 00:31:11,166
import the CareKit UI and


979
00:31:11,166 --> 00:31:12,306
CareKit Store frameworks.


980
00:31:13,486 --> 00:31:15,106
Next, as always, you create an


981
00:31:15,106 --> 00:31:16,636
instance of OKCStore.


982
00:31:17,096 --> 00:31:19,906
And then you go on to create an


983
00:31:19,906 --> 00:31:20,576
instance of


984
00:31:20,576 --> 00:31:23,106
OCKSynchronizedStoreManager and


985
00:31:23,166 --> 00:31:24,056
pass it the store.


986
00:31:24,546 --> 00:31:26,026
This will allow the synchronizer


987
00:31:26,056 --> 00:31:27,526
to wrap itself around the


988
00:31:27,526 --> 00:31:28,146
database.


989
00:31:29,586 --> 00:31:31,596
And finally, you can choose to


990
00:31:31,596 --> 00:31:33,556
use one of our prepackaged


991
00:31:33,826 --> 00:31:35,176
standalone view controllers.


992
00:31:35,786 --> 00:31:36,986
In this example, we are


993
00:31:37,176 --> 00:31:39,496
showcasing the OCKTaskListView


994
00:31:39,496 --> 00:31:41,296
controller and it accepts the


995
00:31:41,296 --> 00:31:43,026
storeManager assets parameter.


996
00:31:44,316 --> 00:31:46,146
Doing this will essentially


997
00:31:46,396 --> 00:31:48,146
establish pipelines all the way


998
00:31:48,146 --> 00:31:49,156
from the UI layer to the


999
00:31:49,156 --> 00:31:50,916
underlying database, and all you


1000
00:31:50,916 --> 00:31:52,366
have to do after that is present


1001
00:31:52,366 --> 00:31:53,706
the view controller, and


1002
00:31:53,706 --> 00:31:55,006
depending on what data you


1003
00:31:55,006 --> 00:31:56,456
provide to the store, you'll be


1004
00:31:56,456 --> 00:31:57,776
able to see a UI that looks


1005
00:31:57,776 --> 00:31:58,546
somewhat like this.


1006
00:32:00,006 --> 00:32:01,796
And similarly, you can also


1007
00:32:01,796 --> 00:32:03,226
leverage some of our other


1008
00:32:03,306 --> 00:32:05,166
prepackaged view controllers to


1009
00:32:05,166 --> 00:32:07,756
build out views for trends and


1010
00:32:07,756 --> 00:32:08,316
contacts.


1011
00:32:09,366 --> 00:32:11,056
So as you can see here, CareKit


1012
00:32:11,746 --> 00:32:14,586
2.0 makes it really easy to use


1013
00:32:14,866 --> 00:32:15,536
the framework.


1014
00:32:16,616 --> 00:32:19,306
But that's not all it's all


1015
00:32:19,306 --> 00:32:19,656
about.


1016
00:32:20,216 --> 00:32:22,406
So, right now, I want to call


1017
00:32:22,406 --> 00:32:24,536
Erik onstage for a demo where we


1018
00:32:24,536 --> 00:32:26,246
will showcase how you can build


1019
00:32:26,526 --> 00:32:28,846
a custom care app using CareKit


1020
00:32:28,846 --> 00:32:29,316
2.0.


1021
00:32:30,516 --> 00:32:32,786
[ Cheering and Applause ]


1022
00:32:33,286 --> 00:32:33,976
>> All right.


1023
00:32:34,016 --> 00:32:35,436
[ Cheering and Applause ]


1024
00:32:35,436 --> 00:32:37,436
Great. Thank you, Srinath.


1025
00:32:38,586 --> 00:32:39,526
Good afternoon, everybody.


1026
00:32:39,526 --> 00:32:40,256
My name is Erik.


1027
00:32:40,726 --> 00:32:41,986
I'm an engineer on the CareKit


1028
00:32:42,036 --> 00:32:42,276
team.


1029
00:32:42,816 --> 00:32:44,006
And today I have the privilege


1030
00:32:44,006 --> 00:32:45,026
of walking y'all through a


1031
00:32:45,026 --> 00:32:46,606
sample app that's going to


1032
00:32:46,606 --> 00:32:47,606
demonstrate some of the amazing


1033
00:32:47,606 --> 00:32:49,436
new features and capabilities of


1034
00:32:49,436 --> 00:32:51,296
CareKit 2.0.


1035
00:32:51,296 --> 00:32:52,006
The app that we're going to


1036
00:32:52,006 --> 00:32:53,926
build to that -- together today


1037
00:32:53,926 --> 00:32:55,496
is going to be built completely


1038
00:32:55,526 --> 00:32:56,186
from scratch.


1039
00:32:56,516 --> 00:32:57,406
And it's going to be for an


1040
00:32:57,406 --> 00:33:00,356
imaginary patient, an expecting


1041
00:33:00,356 --> 00:33:01,746
mother who is experiencing


1042
00:33:01,886 --> 00:33:03,656
severe symptoms of morning


1043
00:33:03,656 --> 00:33:05,126
sickness, namely nausea.


1044
00:33:05,646 --> 00:33:06,426
So the app that we're going to


1045
00:33:06,426 --> 00:33:07,776
make for her is going to allow


1046
00:33:07,776 --> 00:33:08,956
her to track her medications.


1047
00:33:08,956 --> 00:33:11,316
It's going to allow her to leave


1048
00:33:11,316 --> 00:33:13,136
a log when she feels nauseous.


1049
00:33:13,956 --> 00:33:14,756
And we're going to display


1050
00:33:14,756 --> 00:33:16,346
charts to her that allow her to


1051
00:33:16,346 --> 00:33:18,006
understand the correlation


1052
00:33:18,416 --> 00:33:19,736
between her adherence and her


1053
00:33:19,736 --> 00:33:20,256
symptoms.


1054
00:33:20,976 --> 00:33:22,166
Finally, we're going to give her


1055
00:33:22,546 --> 00:33:24,806
quick access to her contacts so


1056
00:33:24,806 --> 00:33:26,076
that she can get directions to


1057
00:33:26,076 --> 00:33:27,576
the office or make a call to her


1058
00:33:27,576 --> 00:33:28,916
doctor if she has an emergency.


1059
00:33:29,506 --> 00:33:31,726
Now, when we make a CareKit app,


1060
00:33:32,216 --> 00:33:33,946
there's two major steps that we


1061
00:33:33,946 --> 00:33:34,636
have to walk through.


1062
00:33:35,146 --> 00:33:36,306
The first is that we need to


1063
00:33:36,306 --> 00:33:37,116
create the Store.


1064
00:33:37,206 --> 00:33:38,466
And we need to populate it with


1065
00:33:38,466 --> 00:33:38,636
data.


1066
00:33:38,636 --> 00:33:39,706
So that's going to be the first


1067
00:33:39,706 --> 00:33:40,276
thing we tackle.


1068
00:33:40,276 --> 00:33:42,176
And then after that, we need to


1069
00:33:42,266 --> 00:33:44,226
create the UI and tell CareKit


1070
00:33:44,366 --> 00:33:45,426
how we want the data to be


1071
00:33:45,426 --> 00:33:45,836
displayed.


1072
00:33:46,146 --> 00:33:47,056
So we're going to hit that in


1073
00:33:47,056 --> 00:33:47,716
the second half.


1074
00:33:48,766 --> 00:33:49,386
Let's jump in.


1075
00:33:51,466 --> 00:33:51,646
Whoops.


1076
00:33:57,476 --> 00:33:58,686
All right.


1077
00:33:59,396 --> 00:34:00,656
So you can see here, we've got


1078
00:34:00,656 --> 00:34:01,216
an empty app.


1079
00:34:01,216 --> 00:34:02,206
This is going to be our starting


1080
00:34:02,206 --> 00:34:02,476
point.


1081
00:34:03,256 --> 00:34:04,376
Now when you're using CareKit,


1082
00:34:04,816 --> 00:34:05,846
the first thing you need to do


1083
00:34:05,846 --> 00:34:06,436
is import it.


1084
00:34:06,546 --> 00:34:08,275
If you don't do this, you're not


1085
00:34:08,275 --> 00:34:10,076
going to get far.


1086
00:34:10,076 --> 00:34:10,315
[Chuckles]


1087
00:34:10,315 --> 00:34:11,656
Once it's imported, the next


1088
00:34:11,656 --> 00:34:12,746
thing we need to do is create


1089
00:34:12,746 --> 00:34:13,206
the Store.


1090
00:34:13,346 --> 00:34:14,606
More precisely, the


1091
00:34:14,606 --> 00:34:16,275
SynchronizedStoreManager that's


1092
00:34:16,275 --> 00:34:17,585
going to perform synchronization


1093
00:34:17,636 --> 00:34:17,916
for us.


1094
00:34:18,726 --> 00:34:20,505
Now when we do this, we're going


1095
00:34:20,505 --> 00:34:22,016
to start off by creating the


1096
00:34:22,056 --> 00:34:22,335
OCKStore.


1097
00:34:23,016 --> 00:34:23,866
And then we're going to pass


1098
00:34:23,916 --> 00:34:24,926
that into the


1099
00:34:24,926 --> 00:34:26,106
SynchronizedStoreManager.


1100
00:34:27,065 --> 00:34:27,896
I want to pause here for a


1101
00:34:27,896 --> 00:34:28,946
second and highlight something


1102
00:34:28,946 --> 00:34:30,146
really important about CareKit


1103
00:34:30,206 --> 00:34:30,676
2.0.


1104
00:34:32,036 --> 00:34:33,446
Here, we're using the OCKStore,


1105
00:34:33,446 --> 00:34:34,476
which is our wrapper on top of


1106
00:34:34,516 --> 00:34:34,966
Core Data.


1107
00:34:35,366 --> 00:34:36,966
But the


1108
00:34:36,966 --> 00:34:38,676
OCKSynchronizedStoreManager can


1109
00:34:38,676 --> 00:34:40,886
interface with any object that


1110
00:34:40,886 --> 00:34:42,286
implements our OCKStore


1111
00:34:42,286 --> 00:34:42,795
protocol.


1112
00:34:43,525 --> 00:34:44,766
That means it would be possible


1113
00:34:44,766 --> 00:34:47,386
for you to wrap a web server, a


1114
00:34:47,386 --> 00:34:49,456
third-party database, or even a


1115
00:34:49,505 --> 00:34:51,406
simple JSON file, and use that


1116
00:34:51,406 --> 00:34:52,126
as your database.


1117
00:34:52,126 --> 00:34:55,016
For our purposes today, we're


1118
00:34:55,016 --> 00:34:56,255
going to stick with Core Data.


1119
00:34:57,666 --> 00:34:58,856
The next thing we need to do is


1120
00:34:58,896 --> 00:35:00,136
populate some data in the Store.


1121
00:35:00,136 --> 00:35:00,956
So we're just going to write a


1122
00:35:00,956 --> 00:35:02,256
handy extension to take care of


1123
00:35:02,256 --> 00:35:02,726
that for us.


1124
00:35:03,586 --> 00:35:04,716
In a real situation, you may


1125
00:35:04,716 --> 00:35:05,986
pull it down from a web server


1126
00:35:05,986 --> 00:35:06,876
or load it in from your app


1127
00:35:06,936 --> 00:35:07,246
bundle.


1128
00:35:07,786 --> 00:35:08,676
But today, we're just going to


1129
00:35:08,676 --> 00:35:09,446
code it up right in here.


1130
00:35:09,446 --> 00:35:12,266
Now we're going to create two


1131
00:35:12,266 --> 00:35:13,886
tasks, one to take a medication


1132
00:35:14,156 --> 00:35:15,936
and one to check -- or one to


1133
00:35:15,936 --> 00:35:16,656
log when you're feeling


1134
00:35:16,656 --> 00:35:16,986
nauseous.


1135
00:35:17,816 --> 00:35:18,766
So to do that, we're going to


1136
00:35:18,766 --> 00:35:19,596
need to create a schedule.


1137
00:35:23,086 --> 00:35:23,916
We're creating a couple of


1138
00:35:23,916 --> 00:35:24,036
dates.


1139
00:35:24,036 --> 00:35:24,586
Don't worry too much about


1140
00:35:24,586 --> 00:35:24,786
these.


1141
00:35:24,786 --> 00:35:26,166
The important part is down here


1142
00:35:26,166 --> 00:35:26,776
where we're creating the


1143
00:35:26,776 --> 00:35:27,176
schedule.


1144
00:35:27,246 --> 00:35:28,706
And we create that schedule by


1145
00:35:28,706 --> 00:35:29,656
composing elements.


1146
00:35:30,416 --> 00:35:31,556
We've got a breakfast element


1147
00:35:31,616 --> 00:35:32,716
that repeats every day.


1148
00:35:32,896 --> 00:35:33,686
So every day, we're going to


1149
00:35:33,686 --> 00:35:35,096
take our medication at


1150
00:35:35,096 --> 00:35:35,476
breakfast.


1151
00:35:35,876 --> 00:35:37,296
Another one every day at lunch.


1152
00:35:37,696 --> 00:35:39,176
And a third one every other day


1153
00:35:39,176 --> 00:35:39,446
at dinner.


1154
00:35:40,006 --> 00:35:41,136
You probably wouldn't actually


1155
00:35:41,136 --> 00:35:42,516
schedule medication like this.


1156
00:35:42,956 --> 00:35:44,336
But CareKit lets us make some


1157
00:35:44,336 --> 00:35:45,556
really flexible scheduling.


1158
00:35:45,556 --> 00:35:46,456
And we just wanted to show that


1159
00:35:46,456 --> 00:35:47,686
off a little bit.


1160
00:35:48,416 --> 00:35:50,356
With the schedule in hand, we


1161
00:35:50,356 --> 00:35:51,466
can now create our task.


1162
00:35:52,916 --> 00:35:55,056
To do that, we need to specify a


1163
00:35:55,056 --> 00:35:56,046
unique identifier.


1164
00:35:56,046 --> 00:35:57,246
We're going to use doxylamine.


1165
00:35:57,356 --> 00:35:58,556
This is a common medication


1166
00:35:58,556 --> 00:36:00,086
prescribed for nausea.


1167
00:36:01,506 --> 00:36:02,846
And we'll tack on the schedule,


1168
00:36:02,846 --> 00:36:03,376
of course.


1169
00:36:03,776 --> 00:36:04,546
And we'll provide some


1170
00:36:04,546 --> 00:36:05,486
instruction so that our


1171
00:36:05,486 --> 00:36:07,126
imaginary patient knows exactly


1172
00:36:07,126 --> 00:36:07,576
what to do.


1173
00:36:10,066 --> 00:36:11,326
Let's create one more task, this


1174
00:36:11,326 --> 00:36:11,986
one for nausea.


1175
00:36:12,576 --> 00:36:13,816
So in this case, we're going to


1176
00:36:13,816 --> 00:36:15,236
create a more simple schedule.


1177
00:36:15,646 --> 00:36:17,116
This schedule is going to run


1178
00:36:17,116 --> 00:36:19,106
every day, all day.


1179
00:36:19,106 --> 00:36:20,146
Because there is not any


1180
00:36:20,206 --> 00:36:21,636
particular time that you might


1181
00:36:21,696 --> 00:36:22,686
feel nauseous, we want you to be


1182
00:36:22,686 --> 00:36:25,406
able to log any time.


1183
00:36:25,566 --> 00:36:26,706
Finally, we'll create the task


1184
00:36:26,746 --> 00:36:28,036
for it very much the same way as


1185
00:36:28,036 --> 00:36:28,636
we did before.


1186
00:36:29,206 --> 00:36:30,456
The key difference here is that


1187
00:36:30,456 --> 00:36:32,466
we're saying that this task's


1188
00:36:32,586 --> 00:36:34,046
impact adherence property is


1189
00:36:34,116 --> 00:36:34,486
false.


1190
00:36:35,406 --> 00:36:36,606
You'll note at the top of most


1191
00:36:36,606 --> 00:36:38,866
CareKit apps, you'll see a bunch


1192
00:36:38,866 --> 00:36:40,126
of -- like a weekly calendar


1193
00:36:40,176 --> 00:36:41,256
with some completion rings in


1194
00:36:41,256 --> 00:36:41,346
it.


1195
00:36:42,416 --> 00:36:43,846
By setting this flag false,


1196
00:36:43,926 --> 00:36:46,296
we'll exclude this nausea task


1197
00:36:46,686 --> 00:36:49,026
from impacting those completion


1198
00:36:49,616 --> 00:36:49,766
rings.


1199
00:36:52,276 --> 00:36:53,366
Now that we have our two task


1200
00:36:53,366 --> 00:36:54,436
objects, we need to add them


1201
00:36:54,436 --> 00:36:55,046
into the Store.


1202
00:36:55,946 --> 00:36:56,706
Pretty straightforward.


1203
00:36:57,436 --> 00:36:58,626
And we've made it this far.


1204
00:36:58,626 --> 00:37:00,456
So we've got our medication


1205
00:37:00,456 --> 00:37:01,436
task, and we've got our nausea


1206
00:37:01,436 --> 00:37:01,786
task.


1207
00:37:02,286 --> 00:37:03,466
We also want to add in a couple


1208
00:37:03,496 --> 00:37:05,056
of contacts so that our patient


1209
00:37:05,056 --> 00:37:05,996
has somebody that they can


1210
00:37:05,996 --> 00:37:09,606
contact if they need help.


1211
00:37:09,796 --> 00:37:11,146
Contacts are created very much


1212
00:37:11,146 --> 00:37:12,256
the same way as other CareKit


1213
00:37:12,256 --> 00:37:12,516
entities.


1214
00:37:12,516 --> 00:37:14,066
You have to give them a unique


1215
00:37:14,066 --> 00:37:14,596
identifier.


1216
00:37:14,956 --> 00:37:16,066
And you can set a number of


1217
00:37:16,066 --> 00:37:16,746
properties on them.


1218
00:37:16,866 --> 00:37:18,326
In this case, we'll set an


1219
00:37:18,326 --> 00:37:20,446
image, a title, and a role.


1220
00:37:20,446 --> 00:37:23,036
And then we can also provide


1221
00:37:24,436 --> 00:37:26,046
contact information for them.


1222
00:37:26,946 --> 00:37:27,906
Here, we'll give them an email


1223
00:37:27,906 --> 00:37:30,546
address, a phone number, and a


1224
00:37:32,076 --> 00:37:32,236
message.


1225
00:37:32,376 --> 00:37:33,486
Finally, we're going to tack on


1226
00:37:33,486 --> 00:37:33,956
an address.


1227
00:37:34,096 --> 00:37:35,536
And this address will allow our


1228
00:37:35,586 --> 00:37:37,566
patient to get directions from


1229
00:37:37,566 --> 00:37:38,626
Maps if they need to get into


1230
00:37:38,626 --> 00:37:39,016
the office.


1231
00:37:40,066 --> 00:37:43,296
We'll add one more contact, very


1232
00:37:43,296 --> 00:37:44,586
much the same way as the first.


1233
00:37:45,726 --> 00:37:47,416
Finally, we're going to add both


1234
00:37:47,476 --> 00:37:50,596
contacts into the Store.


1235
00:37:51,526 --> 00:37:53,266
All right, so we've got our two


1236
00:37:53,266 --> 00:37:54,056
tasks in the Store.


1237
00:37:54,056 --> 00:37:55,216
We've got our two contacts in


1238
00:37:55,216 --> 00:37:55,596
the Store.


1239
00:37:56,346 --> 00:37:57,836
That brings us to the end of the


1240
00:37:57,836 --> 00:37:58,496
first step.


1241
00:37:58,726 --> 00:37:59,696
We've made it through creating a


1242
00:37:59,696 --> 00:37:59,976
Store.


1243
00:37:59,976 --> 00:38:01,066
And we've made it through adding


1244
00:38:01,326 --> 00:38:02,296
our data into the Store.


1245
00:38:02,896 --> 00:38:04,996
That means the second step is to


1246
00:38:04,996 --> 00:38:05,886
generate the UI.


1247
00:38:05,886 --> 00:38:07,796
We have to write the code to


1248
00:38:07,796 --> 00:38:09,126
tell CareKit how we would like


1249
00:38:09,166 --> 00:38:09,786
this displayed.


1250
00:38:10,326 --> 00:38:12,116
And the way that we're going to


1251
00:38:12,116 --> 00:38:13,926
do that is to write a


1252
00:38:13,926 --> 00:38:14,546
ViewController.


1253
00:38:15,146 --> 00:38:17,816
So here, we're creating our


1254
00:38:17,916 --> 00:38:18,776
careViewController.


1255
00:38:18,846 --> 00:38:19,676
We're going to go into this in


1256
00:38:19,676 --> 00:38:20,286
just a second.


1257
00:38:20,706 --> 00:38:21,746
But you'll note that I'm passing


1258
00:38:21,746 --> 00:38:22,596
in the storeManager.


1259
00:38:22,596 --> 00:38:24,106
This is going to be used for


1260
00:38:24,106 --> 00:38:24,916
synchronization.


1261
00:38:26,456 --> 00:38:27,806
Finally, we'll set this


1262
00:38:28,166 --> 00:38:29,516
ViewController as our root view,


1263
00:38:29,516 --> 00:38:30,526
so that when we run the app,


1264
00:38:31,326 --> 00:38:31,996
this is where we're going to


1265
00:38:31,996 --> 00:38:32,216
start.


1266
00:38:32,966 --> 00:38:34,606
Let's jump in here and see what


1267
00:38:34,606 --> 00:38:35,606
we have.


1268
00:38:36,476 --> 00:38:37,916
This is presently an empty


1269
00:38:37,916 --> 00:38:38,226
class.


1270
00:38:38,676 --> 00:38:40,836
You can see that inherits from


1271
00:38:40,836 --> 00:38:42,516
OCKDailyPageViewController.


1272
00:38:43,106 --> 00:38:44,106
If you're creating a CareKit


1273
00:38:44,106 --> 00:38:45,726
app, and you want some serious


1274
00:38:45,786 --> 00:38:46,866
customization power,


1275
00:38:47,496 --> 00:38:49,536
OCKDailyPageViewController is a


1276
00:38:49,656 --> 00:38:51,066
really good starting point.


1277
00:38:52,026 --> 00:38:52,896
When you inherit from this


1278
00:38:52,946 --> 00:38:53,976
class, what you're going to get


1279
00:38:55,336 --> 00:38:56,916
is a viewController that has the


1280
00:38:56,916 --> 00:38:58,386
calendar up at the top with the


1281
00:38:58,386 --> 00:38:59,216
completion rings in it.


1282
00:38:59,216 --> 00:39:00,946
And the user will be able to


1283
00:39:00,946 --> 00:39:02,396
page through that and select the


1284
00:39:02,396 --> 00:39:03,056
date that they like.


1285
00:39:03,456 --> 00:39:04,916
And down below that, you'll have


1286
00:39:04,916 --> 00:39:06,306
a second pageViewController.


1287
00:39:06,896 --> 00:39:09,096
And each time, the user changes


1288
00:39:09,136 --> 00:39:10,676
the date either by swiping or


1289
00:39:10,676 --> 00:39:12,076
tapping, you're going to get a


1290
00:39:12,076 --> 00:39:12,330
callback.


1291
00:39:14,216 --> 00:39:15,846
This callback, as a matter of


1292
00:39:16,526 --> 00:39:16,736
fact.


1293
00:39:16,736 --> 00:39:18,286
And inside of this function,


1294
00:39:18,956 --> 00:39:20,286
you're going to receive these


1295
00:39:20,346 --> 00:39:21,126
two parameters, a


1296
00:39:21,126 --> 00:39:22,906
listViewController and the date.


1297
00:39:23,746 --> 00:39:24,906
The date is the date that the


1298
00:39:24,906 --> 00:39:26,086
user has just selected.


1299
00:39:26,426 --> 00:39:28,776
And the listViewController is an


1300
00:39:28,856 --> 00:39:29,936
empty page of content.


1301
00:39:29,936 --> 00:39:32,076
And as the developer, your job


1302
00:39:32,076 --> 00:39:33,766
is to fill in the content that


1303
00:39:33,766 --> 00:39:34,986
you'd like the user to see for


1304
00:39:34,986 --> 00:39:35,816
the date they selected.


1305
00:39:35,816 --> 00:39:37,566
And doing that is very


1306
00:39:37,566 --> 00:39:37,966
straightforward.


1307
00:39:41,056 --> 00:39:42,776
Here, we're creating an


1308
00:39:43,106 --> 00:39:44,766
OCKChecklistTaskViewController.


1309
00:39:45,366 --> 00:39:47,436
And we can append that onto the


1310
00:39:47,436 --> 00:39:48,176
listViewController.


1311
00:39:48,176 --> 00:39:49,126
That will add it into the


1312
00:39:49,126 --> 00:39:50,366
content for the selected day.


1313
00:39:51,596 --> 00:39:52,856
So let's take a quick look at


1314
00:39:52,856 --> 00:39:54,356
this class, the


1315
00:39:54,406 --> 00:39:56,136
OCKChecklistTaskViewController.


1316
00:39:56,656 --> 00:39:57,756
Now you'll note from Srinath's


1317
00:39:57,796 --> 00:39:59,406
just -- talk just a moment ago


1318
00:39:59,406 --> 00:40:01,616
that there's CareKit UI and


1319
00:40:01,616 --> 00:40:02,106
CareKit.


1320
00:40:02,486 --> 00:40:03,856
And in CareKit UI, we had the


1321
00:40:03,896 --> 00:40:05,396
tasks views.


1322
00:40:05,986 --> 00:40:07,026
And there were four or five of


1323
00:40:07,026 --> 00:40:07,116
them.


1324
00:40:07,526 --> 00:40:09,476
Well, in CareKit, there's


1325
00:40:09,536 --> 00:40:09,966
parity.


1326
00:40:10,396 --> 00:40:11,316
And there's a matching view


1327
00:40:11,316 --> 00:40:12,446
controller for each of those.


1328
00:40:13,426 --> 00:40:15,246
The key difference is that the


1329
00:40:15,246 --> 00:40:17,626
views in CareKit UI are naive


1330
00:40:18,056 --> 00:40:19,616
and not synchronized, whereas


1331
00:40:19,616 --> 00:40:21,256
the view controllers in CareKit


1332
00:40:21,706 --> 00:40:23,046
will update automatically.


1333
00:40:24,186 --> 00:40:25,296
When we instantiate this, we


1334
00:40:25,296 --> 00:40:26,326
need to pass it the Store.


1335
00:40:26,636 --> 00:40:27,506
And we need to tell it which


1336
00:40:27,506 --> 00:40:28,746
task we'd like it to display the


1337
00:40:28,746 --> 00:40:28,976
data for.


1338
00:40:30,116 --> 00:40:31,076
Finally, we give it an event


1339
00:40:31,126 --> 00:40:32,396
query that specifies that it


1340
00:40:32,396 --> 00:40:33,486
should only show the events for


1341
00:40:33,486 --> 00:40:33,776
today.


1342
00:40:35,296 --> 00:40:36,516
So this is our medication card.


1343
00:40:36,516 --> 00:40:38,996
It's going to ask the patient to


1344
00:40:38,996 --> 00:40:40,236
take their doxylamine.


1345
00:40:41,016 --> 00:40:41,866
We'll add one more.


1346
00:40:43,146 --> 00:40:44,706
SimpleLogTaskViewController


1347
00:40:44,736 --> 00:40:46,036
takes the exact same arguments.


1348
00:40:46,146 --> 00:40:47,356
And this one is going to ask the


1349
00:40:47,356 --> 00:40:48,626
user to log when they're feeling


1350
00:40:48,626 --> 00:40:48,986
nauseous.


1351
00:40:50,356 --> 00:40:51,256
We've written a lot of code.


1352
00:40:51,256 --> 00:40:53,316
But we're finally ready to run


1353
00:40:53,316 --> 00:40:54,216
the app and see what it looks


1354
00:40:54,216 --> 00:40:54,306
like.


1355
00:41:00,206 --> 00:41:00,986
All right, so we're up and


1356
00:41:00,986 --> 00:41:01,276
running.


1357
00:41:01,666 --> 00:41:03,186
This is what we have so far.


1358
00:41:03,516 --> 00:41:04,666
You can see we've got both of


1359
00:41:04,666 --> 00:41:05,976
the tasks that we've added.


1360
00:41:06,876 --> 00:41:08,206
The user can swipe through the


1361
00:41:08,206 --> 00:41:09,176
dates on the calendar.


1362
00:41:10,736 --> 00:41:11,896
They can get back to today like


1363
00:41:11,896 --> 00:41:12,076
this.


1364
00:41:13,116 --> 00:41:15,326
You'll also note that on some


1365
00:41:15,326 --> 00:41:16,316
days, we have two events.


1366
00:41:16,456 --> 00:41:17,526
On other days, we have three


1367
00:41:17,526 --> 00:41:17,786
events.


1368
00:41:17,956 --> 00:41:18,846
That's due to the way that we


1369
00:41:18,846 --> 00:41:19,736
scheduled our task.


1370
00:41:20,936 --> 00:41:22,226
And when the user checks off a


1371
00:41:22,226 --> 00:41:24,476
task, the completion rings fill


1372
00:41:24,476 --> 00:41:25,206
up automatically.


1373
00:41:26,166 --> 00:41:28,616
This synchronization between the


1374
00:41:28,616 --> 00:41:30,666
tasks, the TaskViewController,


1375
00:41:30,916 --> 00:41:32,146
and the CalendarViewController


1376
00:41:32,146 --> 00:41:33,996
up at the top happens


1377
00:41:33,996 --> 00:41:35,236
automatically through the Store


1378
00:41:35,236 --> 00:41:35,796
synchronizer.


1379
00:41:36,986 --> 00:41:38,106
You'll also note that when we


1380
00:41:38,106 --> 00:41:40,326
log nausea events, they don't


1381
00:41:40,326 --> 00:41:41,626
show up in the completion ring


1382
00:41:41,906 --> 00:41:43,176
because we explicitly marked


1383
00:41:43,226 --> 00:41:45,226
those impacts adherence equals


1384
00:41:45,266 --> 00:41:47,266
false when we created our task.


1385
00:41:48,496 --> 00:41:50,126
Now before we move on, I want to


1386
00:41:50,126 --> 00:41:52,096
hit on two places where we can


1387
00:41:52,096 --> 00:41:53,476
really easily customize our


1388
00:41:53,476 --> 00:41:54,006
CareKit app.


1389
00:41:54,246 --> 00:41:55,236
And I think you guys will really


1390
00:41:55,236 --> 00:41:55,636
like these.


1391
00:41:56,926 --> 00:41:59,446
The first one, if we have --


1392
00:41:59,626 --> 00:42:01,846
hope back to our app delegate is


1393
00:42:03,396 --> 00:42:05,156
that we can set a tint color on


1394
00:42:05,156 --> 00:42:05,556
the window.


1395
00:42:06,196 --> 00:42:07,166
And this tint color will


1396
00:42:07,166 --> 00:42:08,316
propagate down through our


1397
00:42:08,316 --> 00:42:08,976
entire app.


1398
00:42:09,326 --> 00:42:10,546
And it's a really easy way to


1399
00:42:10,546 --> 00:42:11,966
apply styling or to brand your


1400
00:42:12,686 --> 00:42:12,766
app.


1401
00:42:16,056 --> 00:42:17,626
The second one is to switch out


1402
00:42:17,666 --> 00:42:19,456
the kind of task view that we're


1403
00:42:19,456 --> 00:42:19,826
using.


1404
00:42:20,596 --> 00:42:21,446
So you remember that there were


1405
00:42:21,446 --> 00:42:22,516
a number of different views for


1406
00:42:22,516 --> 00:42:23,686
tasks in CareKit UI.


1407
00:42:24,846 --> 00:42:26,446
And we can switch to a different


1408
00:42:26,926 --> 00:42:29,536
one simply by switching the


1409
00:42:29,536 --> 00:42:30,476
ViewController we're using.


1410
00:42:30,596 --> 00:42:31,356
They all have the same


1411
00:42:31,356 --> 00:42:32,026
initializers.


1412
00:42:33,876 --> 00:42:35,556
We'll rerun our app and take a


1413
00:42:35,556 --> 00:42:36,546
look at how this changes it.


1414
00:42:37,576 --> 00:42:37,956
Awesome.


1415
00:42:38,276 --> 00:42:39,316
So you can see the color is


1416
00:42:39,316 --> 00:42:39,846
different now.


1417
00:42:40,196 --> 00:42:42,196
And we also have an entirely


1418
00:42:43,216 --> 00:42:45,526
different task card to look at.


1419
00:42:46,066 --> 00:42:46,886
Now, what's really interesting


1420
00:42:46,886 --> 00:42:49,106
about this card is that it shows


1421
00:42:49,106 --> 00:42:49,996
the time that the user is


1422
00:42:49,996 --> 00:42:50,766
supposed to take their


1423
00:42:50,766 --> 00:42:51,346
medication.


1424
00:42:51,876 --> 00:42:53,086
But when we check one of these


1425
00:42:53,086 --> 00:42:55,306
off, the time that it displays


1426
00:42:56,226 --> 00:42:58,366
changes to the moment that the


1427
00:42:58,366 --> 00:42:59,316
user tapped the button.


1428
00:42:59,546 --> 00:43:00,806
This is really useful because it


1429
00:43:00,806 --> 00:43:02,026
allows our patient to see the


1430
00:43:02,026 --> 00:43:03,366
last time that she's taken her


1431
00:43:03,366 --> 00:43:03,966
medication.


1432
00:43:08,096 --> 00:43:08,316
All right.


1433
00:43:08,316 --> 00:43:09,486
I think we're ready to move on


1434
00:43:09,486 --> 00:43:10,636
to creating some charts now.


1435
00:43:11,066 --> 00:43:12,676
I think what we'll do is try to


1436
00:43:12,676 --> 00:43:13,796
put a chart right in between the


1437
00:43:13,836 --> 00:43:14,696
two cards that we have.


1438
00:43:14,766 --> 00:43:15,876
Maybe we'll make it a bar chart.


1439
00:43:15,876 --> 00:43:17,526
And we'll say that it will show


1440
00:43:18,206 --> 00:43:19,866
the number of times our patient


1441
00:43:19,866 --> 00:43:20,796
is taking their medication


1442
00:43:20,796 --> 00:43:21,496
versus the number of times that


1443
00:43:21,496 --> 00:43:21,976
she's felt nauseous.


1444
00:43:25,716 --> 00:43:27,286
So we'll drop down right here


1445
00:43:27,286 --> 00:43:28,276
between the two cards that we've


1446
00:43:28,336 --> 00:43:28,906
created already.


1447
00:43:29,436 --> 00:43:30,096
And we're going to need to


1448
00:43:30,096 --> 00:43:33,026
create two data series, one for


1449
00:43:33,026 --> 00:43:34,386
the medication, and one for the


1450
00:43:34,386 --> 00:43:34,646
nausea.


1451
00:43:34,646 --> 00:43:35,346
So we're going to start with the


1452
00:43:35,346 --> 00:43:35,806
nausea one.


1453
00:43:36,456 --> 00:43:37,656
When we create this data series,


1454
00:43:38,326 --> 00:43:38,936
we have to give it the


1455
00:43:38,936 --> 00:43:39,586
identifier.


1456
00:43:39,586 --> 00:43:40,876
This is a task whose data we'd


1457
00:43:40,876 --> 00:43:41,536
like to display.


1458
00:43:41,746 --> 00:43:43,066
We can give it a legend title, a


1459
00:43:43,066 --> 00:43:44,786
pair of colors to plot in, and a


1460
00:43:44,786 --> 00:43:46,206
marker size, which in this case


1461
00:43:46,206 --> 00:43:47,216
will dictate the width of the


1462
00:43:47,216 --> 00:43:47,736
bar chart.


1463
00:43:48,506 --> 00:43:49,616
And an event aggregator.


1464
00:43:49,916 --> 00:43:51,716
The event aggregator determines


1465
00:43:51,876 --> 00:43:53,066
the y-axis value.


1466
00:43:53,266 --> 00:43:54,446
And in this case, we're simply


1467
00:43:54,446 --> 00:43:55,826
going to count the number of


1468
00:43:55,826 --> 00:43:57,136
times that our patient has felt


1469
00:43:57,136 --> 00:43:57,536
nauseous.


1470
00:43:58,546 --> 00:43:59,856
We'll do this once more, this


1471
00:43:59,856 --> 00:44:01,236
time for our medication.


1472
00:44:02,146 --> 00:44:03,086
And it's going to be very much


1473
00:44:03,086 --> 00:44:03,466
the same.


1474
00:44:04,776 --> 00:44:06,536
With both of these in hand, we


1475
00:44:06,536 --> 00:44:07,246
can create an


1476
00:44:07,276 --> 00:44:09,666
OCKCartesianChartViewController.


1477
00:44:10,236 --> 00:44:12,356
The initializer takes the


1478
00:44:12,356 --> 00:44:13,006
storeManager.


1479
00:44:13,006 --> 00:44:14,136
Again, this is to provide that


1480
00:44:14,186 --> 00:44:15,296
synchronization that makes


1481
00:44:15,346 --> 00:44:16,246
CareKit so great.


1482
00:44:16,846 --> 00:44:18,186
And we also pass in a data


1483
00:44:18,186 --> 00:44:20,586
series, one for each series that


1484
00:44:20,586 --> 00:44:21,406
we'd like displayed on the


1485
00:44:21,436 --> 00:44:21,666
chart.


1486
00:44:22,626 --> 00:44:23,896
We also pass in the date that


1487
00:44:23,896 --> 00:44:25,236
we'd like the data displayed for


1488
00:44:25,966 --> 00:44:26,786
and the plot type.


1489
00:44:27,066 --> 00:44:27,946
Here, we're going to use the bar


1490
00:44:27,946 --> 00:44:28,186
chart.


1491
00:44:28,186 --> 00:44:29,726
But you could just as easily use


1492
00:44:29,726 --> 00:44:31,146
the scatter plot or the line


1493
00:44:31,146 --> 00:44:31,436
plot.


1494
00:44:32,656 --> 00:44:33,966
Finally, before we run our app


1495
00:44:33,966 --> 00:44:35,546
again, we're going to set a


1496
00:44:35,546 --> 00:44:38,146
couple of labels so that our


1497
00:44:38,146 --> 00:44:39,946
patient can understand the data


1498
00:44:39,946 --> 00:44:40,846
that we're displaying to her.


1499
00:44:41,236 --> 00:44:43,246
Let's run it one more time and


1500
00:44:43,246 --> 00:44:43,976
take a look at our chart.


1501
00:44:47,376 --> 00:44:47,666
Awesome.


1502
00:44:47,666 --> 00:44:48,806
So you can see down here we've


1503
00:44:48,806 --> 00:44:49,386
got our chart.


1504
00:44:49,576 --> 00:44:50,686
It's got data shown on it.


1505
00:44:51,076 --> 00:44:52,166
But what's really fantastic


1506
00:44:52,166 --> 00:44:53,486
about this chart is that it


1507
00:44:53,556 --> 00:44:55,526
updates in real time with


1508
00:44:55,596 --> 00:44:57,786
beautiful animations as we check


1509
00:44:57,786 --> 00:44:58,236
off data.


1510
00:44:59,806 --> 00:45:01,486
Perhaps on the first day, our


1511
00:45:01,486 --> 00:45:03,046
user didn't take her medication.


1512
00:45:04,276 --> 00:45:05,376
And she felt really sick.


1513
00:45:06,456 --> 00:45:08,796
On the second day, she started


1514
00:45:08,796 --> 00:45:09,246
to take it.


1515
00:45:09,886 --> 00:45:12,986
So she felt a little bit better.


1516
00:45:13,186 --> 00:45:15,556
And on the third day, she took


1517
00:45:15,556 --> 00:45:16,496
all of her medication.


1518
00:45:16,496 --> 00:45:18,226
And today, she also took all of


1519
00:45:18,226 --> 00:45:19,276
it and doesn't feel sick at all.


1520
00:45:20,216 --> 00:45:21,146
So you can see we're already


1521
00:45:21,146 --> 00:45:22,196
getting a pretty good patient


1522
00:45:22,196 --> 00:45:22,736
experience.


1523
00:45:22,786 --> 00:45:24,256
But there's another feature that


1524
00:45:24,256 --> 00:45:25,686
we can take advantage of that I


1525
00:45:25,686 --> 00:45:26,726
think you guys will really like.


1526
00:45:27,736 --> 00:45:29,176
CareKit now has the ability to


1527
00:45:29,176 --> 00:45:31,906
add arbitrary content anywhere


1528
00:45:31,906 --> 00:45:33,036
in this listViewController.


1529
00:45:33,036 --> 00:45:33,846
Let me show you how we can do


1530
00:45:33,846 --> 00:45:33,976
that.


1531
00:45:37,046 --> 00:45:38,316
So up at the very top, I think


1532
00:45:38,316 --> 00:45:39,316
we'd like to add a banner.


1533
00:45:40,746 --> 00:45:41,636
And we're going to do that by


1534
00:45:41,636 --> 00:45:42,646
creating this tipView.


1535
00:45:42,646 --> 00:45:45,556
We'll set some text on the


1536
00:45:45,556 --> 00:45:46,056
tipView.


1537
00:45:46,056 --> 00:45:47,256
And we'll also attach an image


1538
00:45:47,256 --> 00:45:47,566
to it.


1539
00:45:48,246 --> 00:45:49,546
But what's really important here


1540
00:45:50,116 --> 00:45:52,336
is that we simply append it as a


1541
00:45:52,336 --> 00:45:52,606
view.


1542
00:45:53,756 --> 00:45:55,386
Now what I want you to note is


1543
00:45:55,386 --> 00:45:57,236
that this tipView is not part of


1544
00:45:57,286 --> 00:45:57,716
CareKit.


1545
00:45:58,276 --> 00:46:01,416
We created it just for this


1546
00:46:01,416 --> 00:46:01,706
demo.


1547
00:46:02,026 --> 00:46:03,676
And it could just as easily be a


1548
00:46:03,676 --> 00:46:04,836
view that came from your


1549
00:46:04,836 --> 00:46:05,736
application or a third-party


1550
00:46:05,736 --> 00:46:05,976
library.


1551
00:46:11,046 --> 00:46:12,466
When we run our app now, you'll


1552
00:46:12,466 --> 00:46:13,546
see that we get this beautiful


1553
00:46:13,546 --> 00:46:14,676
banner up at the top that


1554
00:46:14,676 --> 00:46:16,156
encourages our patient to learn


1555
00:46:16,156 --> 00:46:17,236
more about the relationship


1556
00:46:17,276 --> 00:46:18,676
between exercise and healthy


1557
00:46:18,676 --> 00:46:19,206
pregnancy.


1558
00:46:19,206 --> 00:46:21,016
[Chuckles]


1559
00:46:21,516 --> 00:46:25,576
[ Cheering and Applause ]


1560
00:46:26,076 --> 00:46:27,286
You can imagine that there is a


1561
00:46:27,366 --> 00:46:29,276
plethora of ways that this could


1562
00:46:29,276 --> 00:46:29,696
be used.


1563
00:46:30,086 --> 00:46:31,296
You could populate this data


1564
00:46:31,676 --> 00:46:33,476
based on what's already in your


1565
00:46:33,476 --> 00:46:34,846
patient's Care Plan Store.


1566
00:46:35,156 --> 00:46:36,216
You could pull it down from a


1567
00:46:36,216 --> 00:46:36,606
server.


1568
00:46:37,016 --> 00:46:38,296
Or you could set it based on the


1569
00:46:38,296 --> 00:46:38,606
date.


1570
00:46:39,066 --> 00:46:40,176
The possibilities are really


1571
00:46:40,176 --> 00:46:40,696
endless here.


1572
00:46:41,766 --> 00:46:42,726
Now the last thing that I want


1573
00:46:42,726 --> 00:46:44,076
to do before we wrap up our demo


1574
00:46:44,526 --> 00:46:46,426
is give our user quick access to


1575
00:46:46,506 --> 00:46:47,246
her contacts.


1576
00:46:47,606 --> 00:46:48,596
And I think what we'll do is


1577
00:46:48,596 --> 00:46:50,096
just add a Care Team button up


1578
00:46:50,096 --> 00:46:52,456
here that shows a modal


1579
00:46:52,496 --> 00:46:53,656
presentation with all her


1580
00:46:53,656 --> 00:46:54,646
contacts in it.


1581
00:46:54,646 --> 00:46:56,186
And CareKit makes that really


1582
00:46:56,186 --> 00:46:56,376
easy.


1583
00:46:57,036 --> 00:46:59,576
Up at the top, we're going to


1584
00:46:59,576 --> 00:47:02,366
create our UI Bar Button item.


1585
00:47:02,606 --> 00:47:03,926
And we're going to set it to


1586
00:47:03,926 --> 00:47:06,276
call this function here, in


1587
00:47:06,276 --> 00:47:08,116
which we're going to create an


1588
00:47:08,226 --> 00:47:09,286
instance of the


1589
00:47:09,286 --> 00:47:10,746
OCKContactsListViewController.


1590
00:47:11,286 --> 00:47:12,386
This is a really handy class


1591
00:47:12,386 --> 00:47:13,276
that we provide for you.


1592
00:47:13,696 --> 00:47:14,866
All you need to do is pass it a


1593
00:47:14,866 --> 00:47:15,816
Store manager.


1594
00:47:15,816 --> 00:47:17,666
And it will automatically query


1595
00:47:17,666 --> 00:47:18,996
all the contacts in your Store


1596
00:47:19,096 --> 00:47:19,976
and display them for you.


1597
00:47:24,426 --> 00:47:26,386
Run our app one last time to see


1598
00:47:26,386 --> 00:47:27,066
what it looks like.


1599
00:47:28,296 --> 00:47:28,716
There we go.


1600
00:47:28,876 --> 00:47:30,896
So we'll tap on this and out


1601
00:47:30,926 --> 00:47:31,726
come our contacts.


1602
00:47:32,386 --> 00:47:33,296
Now, if our patient needs


1603
00:47:33,346 --> 00:47:34,526
directions into the office,


1604
00:47:35,026 --> 00:47:37,416
she's just a tap away from Maps.


1605
00:47:38,246 --> 00:47:40,286
It looks like it's about 4.9


1606
00:47:40,286 --> 00:47:40,636
miles.


1607
00:47:41,916 --> 00:47:42,706
That's not too shabby.


1608
00:47:43,196 --> 00:47:43,586
All right.


1609
00:47:44,196 --> 00:47:45,516
So we've got our contacts in


1610
00:47:45,516 --> 00:47:45,616
there.


1611
00:47:45,616 --> 00:47:47,256
And our app is looking pretty


1612
00:47:47,256 --> 00:47:47,526
good.


1613
00:47:48,256 --> 00:47:49,686
I think I'd like to wind down


1614
00:47:49,686 --> 00:47:50,436
the demo right here.


1615
00:47:50,436 --> 00:47:51,586
Let's call this complete.


1616
00:47:52,366 --> 00:47:53,346
But before we go back to


1617
00:47:53,396 --> 00:47:54,576
Srinath, I want to just reflect


1618
00:47:54,576 --> 00:47:55,846
for a moment on what we've done.


1619
00:47:57,186 --> 00:47:59,046
In what accounts for about 15


1620
00:47:59,046 --> 00:48:00,416
minutes and more or less 200


1621
00:48:00,416 --> 00:48:01,806
lines of code, we've been able


1622
00:48:01,806 --> 00:48:03,906
to complete a beautiful patient


1623
00:48:03,906 --> 00:48:05,616
care application with gorgeous


1624
00:48:05,616 --> 00:48:06,256
animations.


1625
00:48:07,366 --> 00:48:08,956
But what's most important about


1626
00:48:08,956 --> 00:48:10,576
this application is that it's


1627
00:48:10,576 --> 00:48:11,836
extremely modular.


1628
00:48:12,466 --> 00:48:13,616
None of the views know about


1629
00:48:13,616 --> 00:48:14,016
each other.


1630
00:48:15,026 --> 00:48:16,156
All of the viewControllers are


1631
00:48:16,156 --> 00:48:17,186
completely decoupled.


1632
00:48:17,926 --> 00:48:19,296
No delegates are set that tie


1633
00:48:19,336 --> 00:48:19,966
things together.


1634
00:48:20,626 --> 00:48:22,606
This app can be very easily


1635
00:48:22,696 --> 00:48:25,206
updated and changed as the needs


1636
00:48:25,206 --> 00:48:26,546
of our users evolve.


1637
00:48:27,196 --> 00:48:30,836
We think the possibility for


1638
00:48:30,836 --> 00:48:32,386
CareKit 2.0 is boundless.


1639
00:48:32,716 --> 00:48:34,676
And we are really excited to see


1640
00:48:34,676 --> 00:48:36,236
all the amazing things that our


1641
00:48:36,236 --> 00:48:37,336
developers are going to do with


1642
00:48:37,336 --> 00:48:37,416
it.


1643
00:48:38,816 --> 00:48:39,016
All right.


1644
00:48:39,016 --> 00:48:39,756
Back to you, Srinath.


1645
00:48:41,516 --> 00:48:46,546
[ Cheering and Applause ]


1646
00:48:47,046 --> 00:48:47,856
>> Wow, thank you, Erik, for


1647
00:48:47,856 --> 00:48:48,856
that great demo.


1648
00:48:48,856 --> 00:48:49,306
[Chuckles]


1649
00:48:49,306 --> 00:48:52,836
So now to just summarize the


1650
00:48:52,836 --> 00:48:56,426
whole session, CareKit is just a


1651
00:48:56,426 --> 00:48:58,006
fundamental rewrite and


1652
00:48:58,006 --> 00:48:59,596
rearchitecture of the framework.


1653
00:48:59,896 --> 00:49:01,226
It still holds on to its core


1654
00:49:01,226 --> 00:49:01,646
values.


1655
00:49:01,686 --> 00:49:03,686
But now it makes it extremely


1656
00:49:03,686 --> 00:49:06,046
powerful to use, to build like


1657
00:49:06,196 --> 00:49:07,456
really amazing Care app


1658
00:49:07,456 --> 00:49:09,136
experiences for your user.


1659
00:49:09,136 --> 00:49:12,526
So we spoke about ResearchKit,


1660
00:49:12,586 --> 00:49:14,386
where we talked about UI updates


1661
00:49:14,386 --> 00:49:15,426
that we've made throughout the


1662
00:49:15,426 --> 00:49:17,376
framework, as well as new


1663
00:49:17,376 --> 00:49:19,366
additions to our existing


1664
00:49:19,366 --> 00:49:21,016
library of active tasks.


1665
00:49:21,826 --> 00:49:23,696
And finally, we also touched


1666
00:49:23,696 --> 00:49:25,286
upon all the updates from our


1667
00:49:25,286 --> 00:49:27,796
community, including our two key


1668
00:49:27,796 --> 00:49:29,546
initiatives -- the investigator


1669
00:49:29,546 --> 00:49:30,596
support program, and our


1670
00:49:30,636 --> 00:49:31,766
redesigned website that's coming


1671
00:49:31,766 --> 00:49:31,976
this fall.


1672
00:49:35,266 --> 00:49:37,056
And as always, ResearchKit and


1673
00:49:37,056 --> 00:49:38,706
CareKit are Open Source


1674
00:49:38,706 --> 00:49:39,206
frameworks.


1675
00:49:39,246 --> 00:49:40,666
That's available right now on


1676
00:49:40,666 --> 00:49:40,976
GitHub.


1677
00:49:44,336 --> 00:49:45,716
Now over the next few months,


1678
00:49:45,856 --> 00:49:47,106
we're going to be working really


1679
00:49:47,106 --> 00:49:48,806
hard to add a lot more


1680
00:49:48,806 --> 00:49:49,746
capabilities to these


1681
00:49:49,786 --> 00:49:50,286
frameworks.


1682
00:49:50,746 --> 00:49:52,126
We'll be adding support for Dark


1683
00:49:52,126 --> 00:49:52,436
Mode.


1684
00:49:52,576 --> 00:49:54,006
We'll be adding accessibility,


1685
00:49:54,006 --> 00:49:55,556
localization, as well as more


1686
00:49:55,556 --> 00:49:57,106
documentation support as well.


1687
00:49:57,766 --> 00:49:59,606
And we would highly encourage


1688
00:49:59,656 --> 00:50:00,676
all the developers in our


1689
00:50:00,676 --> 00:50:02,626
community to provide us with


1690
00:50:02,726 --> 00:50:05,036
feedback as well as contribute


1691
00:50:05,246 --> 00:50:07,166
as we continue to evolve and


1692
00:50:07,166 --> 00:50:08,906
expand our amazing frameworks.


1693
00:50:10,696 --> 00:50:12,206
For more information about the


1694
00:50:12,206 --> 00:50:13,976
session, please visit this link.


1695
00:50:14,576 --> 00:50:15,926
We are also holding a


1696
00:50:15,926 --> 00:50:17,316
ResearchKit and CareKit lab


1697
00:50:17,366 --> 00:50:19,126
tomorrow at noon where all of us


1698
00:50:19,126 --> 00:50:20,886
will be there to answer any


1699
00:50:20,886 --> 00:50:21,846
questions that you have.


1700
00:50:22,446 --> 00:50:25,616
And with that, thank you all for


1701
00:50:25,616 --> 00:50:26,016
coming.


1702
00:50:26,236 --> 00:50:28,746
And have a great WWDC.


1703
00:50:29,508 --> 00:50:31,508
[ Cheering and Applause ]

