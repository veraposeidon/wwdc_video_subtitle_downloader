1
00:00:01,176 --> 00:00:04,500
[ Music ]


2
00:00:07,516 --> 00:00:13,686
[ Applause ]


3
00:00:14,186 --> 00:00:14,836
>> Good afternoon.


4
00:00:15,616 --> 00:00:16,926
My name is Anders, and I work on


5
00:00:16,996 --> 00:00:17,356
Xcode.


6
00:00:18,376 --> 00:00:19,696
In this session, I and my


7
00:00:19,696 --> 00:00:20,806
colleague, Balraj, will be


8
00:00:20,806 --> 00:00:22,246
talking about how to use Swift


9
00:00:22,316 --> 00:00:23,946
Packages from Xcode Projects.


10
00:00:26,106 --> 00:00:27,526
The Swift Package Manager is


11
00:00:27,576 --> 00:00:28,866
part of the Open Source Swift


12
00:00:28,866 --> 00:00:29,396
tool chain.


13
00:00:29,656 --> 00:00:31,536
It was introduced in Swift 3.


14
00:00:32,296 --> 00:00:34,286
And since then, a lot of Swift


15
00:00:34,336 --> 00:00:35,486
Packages have been created.


16
00:00:36,686 --> 00:00:38,506
Also, a lot of Open Source


17
00:00:38,506 --> 00:00:40,216
libraries that were written for


18
00:00:40,216 --> 00:00:41,736
other package managers have been


19
00:00:41,736 --> 00:00:42,986
adapted to be compatible with


20
00:00:42,986 --> 00:00:43,956
the Swift Package Manager.


21
00:00:44,426 --> 00:00:48,126
Swift Packages let you manage


22
00:00:48,126 --> 00:00:49,546
your versions of your


23
00:00:49,546 --> 00:00:51,496
dependencies, making sure that


24
00:00:51,496 --> 00:00:53,176
you get bug fixes without


25
00:00:53,176 --> 00:00:54,596
subjecting your code to


26
00:00:54,596 --> 00:00:56,116
source-breaking changes as the


27
00:00:56,116 --> 00:00:57,706
packages you depend on update.


28
00:00:59,066 --> 00:01:00,466
Swift Packages are also a great


29
00:01:00,466 --> 00:01:02,516
way for your own -- to share


30
00:01:02,516 --> 00:01:03,736
code among your own apps,


31
00:01:04,105 --> 00:01:05,146
whether that's within a small


32
00:01:05,146 --> 00:01:07,556
team, a large organization, or


33
00:01:07,556 --> 00:01:08,996
maybe just among apps that


34
00:01:08,996 --> 00:01:10,486
you're working on by yourself.


35
00:01:12,966 --> 00:01:15,736
And now in Xcode 11, you can


36
00:01:15,736 --> 00:01:17,356
access Swift Packages directly


37
00:01:17,356 --> 00:01:18,456
from Xcode projects.


38
00:01:20,516 --> 00:01:22,666
[ Applause ]


39
00:01:23,166 --> 00:01:23,826
We're excited too.


40
00:01:26,096 --> 00:01:27,336
So in this session, we're going


41
00:01:27,336 --> 00:01:28,816
to start by talking about how to


42
00:01:28,816 --> 00:01:30,336
use a package, how to extend the


43
00:01:30,336 --> 00:01:31,846
functionality of an app by using


44
00:01:31,846 --> 00:01:32,376
a package.


45
00:01:32,806 --> 00:01:34,066
We're then going to talk a bit


46
00:01:34,066 --> 00:01:35,486
about what exactly is in a


47
00:01:35,486 --> 00:01:37,016
package, how they construct it,


48
00:01:37,016 --> 00:01:38,636
what's in the data store -- in


49
00:01:38,636 --> 00:01:39,756
the file format of a package.


50
00:01:40,846 --> 00:01:41,856
When we talk about package


51
00:01:41,856 --> 00:01:43,846
resolution, how Xcode fetches


52
00:01:43,846 --> 00:01:45,296
the right versions of packages


53
00:01:45,296 --> 00:01:46,416
and incorporates them into your


54
00:01:46,416 --> 00:01:46,626
app.


55
00:01:46,666 --> 00:01:48,396
We're going to talk then a


56
00:01:48,396 --> 00:01:49,586
little bit about updating


57
00:01:49,586 --> 00:01:50,806
packages, what happens when a


58
00:01:50,806 --> 00:01:52,146
new version of a package's


59
00:01:52,146 --> 00:01:53,656
update is published, and how you


60
00:01:53,656 --> 00:01:55,706
can take advantage of that.


61
00:01:55,706 --> 00:01:57,176
And we're going to talk about


62
00:01:57,176 --> 00:01:59,376
resolving any version conflicts


63
00:01:59,376 --> 00:02:01,446
that might happen as you update


64
00:02:01,446 --> 00:02:02,036
the packages.


65
00:02:03,396 --> 00:02:04,796
So let's get started by


66
00:02:04,796 --> 00:02:06,786
extending NAP functionality to


67
00:02:06,786 --> 00:02:07,976
take advantage of packages.


68
00:02:18,126 --> 00:02:19,226
Here, we have a little iPhone


69
00:02:19,226 --> 00:02:22,486
app that simply shows the, some


70
00:02:22,486 --> 00:02:24,146
of the lunch menu offerings of


71
00:02:24,146 --> 00:02:26,956
some of the cafes around where I


72
00:02:26,956 --> 00:02:27,046
work.


73
00:02:27,046 --> 00:02:28,386
We see that there are two here,


74
00:02:28,386 --> 00:02:29,346
entries.


75
00:02:29,346 --> 00:02:30,906
It's a SwiftUI app.


76
00:02:30,906 --> 00:02:32,196
So I can see the preview and


77
00:02:32,196 --> 00:02:33,586
Xcode without having to run my


78
00:02:33,586 --> 00:02:33,826
app.


79
00:02:35,676 --> 00:02:37,196
So we see that the lunch menu


80
00:02:37,256 --> 00:02:38,686
from two different places are


81
00:02:38,686 --> 00:02:39,856
showing up.


82
00:02:39,966 --> 00:02:41,576
In the real version of this app,


83
00:02:41,686 --> 00:02:42,806
we would fetch this data over


84
00:02:42,806 --> 00:02:43,256
the network.


85
00:02:44,056 --> 00:02:45,616
But in this demo app here, I


86
00:02:45,616 --> 00:02:47,076
just have them as local files


87
00:02:47,076 --> 00:02:48,136
among my source.


88
00:02:48,176 --> 00:02:49,606
So you could say that this menu


89
00:02:49,606 --> 00:02:50,456
is locally sourced.


90
00:02:51,286 --> 00:02:53,286
[ Laughter ]


91
00:02:53,556 --> 00:02:55,996
So these two JSON files are


92
00:02:55,996 --> 00:02:57,226
showing up just fine.


93
00:02:57,326 --> 00:02:59,596
But this cafe here is a bit more


94
00:02:59,596 --> 00:03:00,856
modern and upscale.


95
00:03:00,856 --> 00:03:02,046
And so they have a YAML menu,


96
00:03:02,176 --> 00:03:02,376
right?


97
00:03:02,376 --> 00:03:04,346
So we're not able to parse that.


98
00:03:04,346 --> 00:03:05,246
And we're not seeing that.


99
00:03:05,756 --> 00:03:06,516
So let's take a look at the


100
00:03:06,516 --> 00:03:07,906
source code that loads this


101
00:03:08,066 --> 00:03:08,616
data.


102
00:03:09,246 --> 00:03:10,636
We see here that we handle JSON,


103
00:03:10,636 --> 00:03:11,926
but we don't handle YAML.


104
00:03:12,146 --> 00:03:14,126
So now fortunately, I know of a


105
00:03:14,126 --> 00:03:15,826
library that can parse YAML


106
00:03:15,996 --> 00:03:16,326
great.


107
00:03:16,506 --> 00:03:17,576
And it has a nice Swift


108
00:03:17,576 --> 00:03:18,066
interface.


109
00:03:18,316 --> 00:03:20,126
So it's called Yams.


110
00:03:20,126 --> 00:03:21,176
And I'm going to go and use


111
00:03:21,176 --> 00:03:21,456
that.


112
00:03:22,666 --> 00:03:24,006
And to do that I bring down to


113
00:03:24,006 --> 00:03:24,786
file menu.


114
00:03:25,056 --> 00:03:27,286
I go to this new Swift Packages


115
00:03:27,286 --> 00:03:29,746
submenu, and Add Package


116
00:03:29,746 --> 00:03:30,366
Dependency.


117
00:03:30,366 --> 00:03:31,606
Now this submenu has a couple of


118
00:03:31,606 --> 00:03:33,226
other menu commands to deal with


119
00:03:33,226 --> 00:03:34,656
packages once they're in your


120
00:03:34,656 --> 00:03:34,836
app.


121
00:03:35,736 --> 00:03:37,696
But you said Package Dependency.


122
00:03:38,246 --> 00:03:40,226
And here, I see, because I added


123
00:03:40,276 --> 00:03:42,006
my GitHub accounts to Swift --


124
00:03:42,006 --> 00:03:44,136
to Xcode's preferences, I see


125
00:03:44,136 --> 00:03:45,406
here all of the package


126
00:03:45,406 --> 00:03:47,146
repositories in that account.


127
00:03:47,546 --> 00:03:48,676
And I also see any other


128
00:03:48,676 --> 00:03:50,006
repositories that I've starred.


129
00:03:51,086 --> 00:03:52,326
In this case, I've starred Yams


130
00:03:52,326 --> 00:03:52,566
here.


131
00:03:53,246 --> 00:03:55,376
But I could also, if I had a URL


132
00:03:55,376 --> 00:03:57,066
for a package, I could enter it


133
00:03:57,066 --> 00:03:57,286
here.


134
00:03:58,506 --> 00:04:00,146
In this case, I'm going to click


135
00:04:00,146 --> 00:04:01,696
on the readme link here and go


136
00:04:01,736 --> 00:04:03,506
to the homepage for the Yams


137
00:04:03,546 --> 00:04:04,056
projects.


138
00:04:04,056 --> 00:04:04,716
That that looks good.


139
00:04:05,836 --> 00:04:07,486
I'm going to go take a look here


140
00:04:07,486 --> 00:04:07,826
at the API.


141
00:04:07,826 --> 00:04:10,606
That looks like what I need.


142
00:04:11,126 --> 00:04:11,956
Now, of course, when you're


143
00:04:11,956 --> 00:04:13,626
using an Open Source library,


144
00:04:13,626 --> 00:04:14,716
you're bringing somebody else's


145
00:04:14,716 --> 00:04:15,656
code into your app.


146
00:04:15,736 --> 00:04:16,745
So there are a lot of things you


147
00:04:16,745 --> 00:04:17,586
want to be careful with.


148
00:04:17,586 --> 00:04:18,636
You want to make sure you trust


149
00:04:18,676 --> 00:04:19,815
the source of that package.


150
00:04:20,546 --> 00:04:21,536
You want to make sure that you


151
00:04:21,536 --> 00:04:22,686
know exactly what this library


152
00:04:22,686 --> 00:04:23,766
is doing, so you don't have any


153
00:04:23,766 --> 00:04:24,526
surprises.


154
00:04:24,966 --> 00:04:26,206
And you want to make sure that


155
00:04:26,206 --> 00:04:27,966
the license for this Open Source


156
00:04:27,966 --> 00:04:29,396
library is compatible with your


157
00:04:29,396 --> 00:04:30,126
app's license.


158
00:04:31,226 --> 00:04:32,516
So I've done all that.


159
00:04:32,566 --> 00:04:33,526
And so I'm going to go back to


160
00:04:33,526 --> 00:04:34,086
Xcode.


161
00:04:34,086 --> 00:04:35,696
And I'm going to just click Next


162
00:04:35,696 --> 00:04:36,016
here.


163
00:04:36,016 --> 00:04:37,126
And we're going to add a


164
00:04:37,126 --> 00:04:38,956
reference, a dependency on yams.


165
00:04:40,396 --> 00:04:41,976
Now Xcode shows me the versions


166
00:04:41,976 --> 00:04:42,796
that are available.


167
00:04:42,926 --> 00:04:44,486
And it automatically sets me up


168
00:04:44,556 --> 00:04:46,556
to use the latest version of the


169
00:04:46,556 --> 00:04:46,966
package.


170
00:04:46,966 --> 00:04:47,826
We're going to talk a little bit


171
00:04:47,856 --> 00:04:49,206
more about the details of these


172
00:04:49,206 --> 00:04:50,766
options later on in the talk.


173
00:04:51,566 --> 00:04:52,856
But most often, the default


174
00:04:52,856 --> 00:04:54,246
option here is the one you want.


175
00:04:54,246 --> 00:04:57,486
It's using version 2.0 anyway,


176
00:04:57,486 --> 00:04:59,636
up to, but not including, the


177
00:04:59,636 --> 00:05:00,586
next major version.


178
00:05:00,746 --> 00:05:02,746
I'm going to click Next.


179
00:05:04,136 --> 00:05:05,156
Now Xcode is fetching the


180
00:05:05,156 --> 00:05:06,956
contents of the Yams package.


181
00:05:07,476 --> 00:05:10,516
And it preselects for me the


182
00:05:10,516 --> 00:05:11,466
single product here.


183
00:05:11,466 --> 00:05:12,556
Some packages can have more than


184
00:05:12,556 --> 00:05:13,116
one product.


185
00:05:13,116 --> 00:05:14,226
In this case, there's one.


186
00:05:14,226 --> 00:05:14,896
It's a library.


187
00:05:15,356 --> 00:05:16,556
Same name as the package.


188
00:05:17,136 --> 00:05:18,106
And if you have more than one


189
00:05:18,106 --> 00:05:19,366
app in your project, you can


190
00:05:19,366 --> 00:05:20,336
choose where you want to link


191
00:05:20,336 --> 00:05:20,476
it.


192
00:05:20,476 --> 00:05:21,666
And in this case, it's just the


193
00:05:21,666 --> 00:05:22,706
one, so I'm going to link it to


194
00:05:22,706 --> 00:05:23,186
the Lunch app.


195
00:05:23,766 --> 00:05:25,566
And I hit finish.


196
00:05:27,026 --> 00:05:27,956
Now we see a couple of things


197
00:05:27,956 --> 00:05:28,176
here.


198
00:05:28,296 --> 00:05:30,126
For one, Xcode has added a


199
00:05:30,126 --> 00:05:32,526
reference to the Yams Package


200
00:05:32,656 --> 00:05:34,546
Dependency to the new Swift


201
00:05:34,546 --> 00:05:35,876
Packages tab in my Project


202
00:05:35,876 --> 00:05:36,206
Editor.


203
00:05:37,706 --> 00:05:38,926
We also see that the Yams


204
00:05:38,926 --> 00:05:40,546
Package has shown up down here


205
00:05:41,126 --> 00:05:43,126
in Swift Package Dependency


206
00:05:43,126 --> 00:05:43,576
section.


207
00:05:45,356 --> 00:05:46,386
We're not going to look in that


208
00:05:46,386 --> 00:05:47,916
package right -- just now.


209
00:05:47,916 --> 00:05:48,606
We're going to take a look in a


210
00:05:48,606 --> 00:05:48,986
moment.


211
00:05:48,986 --> 00:05:50,086
What we're going to do now,


212
00:05:50,086 --> 00:05:51,556
though, is to go into the food


213
00:05:51,556 --> 00:05:52,246
menu again.


214
00:05:52,346 --> 00:05:53,286
And now, we're going to make use


215
00:05:53,286 --> 00:05:54,496
of this from within our code.


216
00:05:54,496 --> 00:05:56,866
So I'm going to type import Yams


217
00:05:56,866 --> 00:05:57,056
here.


218
00:05:57,186 --> 00:05:58,306
And we see we have code


219
00:05:58,306 --> 00:05:59,736
completion against the import


220
00:05:59,736 --> 00:06:00,046
name.


221
00:06:00,316 --> 00:06:02,356
And I can also Command-Click on


222
00:06:02,356 --> 00:06:04,316
this import statement here.


223
00:06:04,316 --> 00:06:05,886
I can jump to the definition.


224
00:06:05,886 --> 00:06:07,046
And here I see the rendered


225
00:06:07,046 --> 00:06:09,766
version of the documentation for


226
00:06:09,766 --> 00:06:10,896
the interface for the Yams


227
00:06:11,166 --> 00:06:11,496
Project.


228
00:06:12,706 --> 00:06:13,736
And all of this comes from the


229
00:06:13,736 --> 00:06:14,936
documentation comments in the


230
00:06:14,936 --> 00:06:16,246
source that was included in the


231
00:06:16,246 --> 00:06:16,686
package.


232
00:06:16,686 --> 00:06:19,306
So I go back to my code.


233
00:06:19,306 --> 00:06:21,766
I'm going to add another case


234
00:06:22,336 --> 00:06:22,436
here.


235
00:06:22,646 --> 00:06:25,226
Case, YAML.


236
00:06:26,516 --> 00:06:29,806
I'm going to type -- just type


237
00:06:30,146 --> 00:06:30,956
YAML decoder.


238
00:06:30,956 --> 00:06:33,246
I have code completion for all


239
00:06:33,246 --> 00:06:34,356
of the library methods.


240
00:06:34,356 --> 00:06:35,696
And I have Quick Help, because


241
00:06:35,746 --> 00:06:36,716
the package includes that.


242
00:06:36,716 --> 00:06:38,656
So this looks and feels just


243
00:06:38,656 --> 00:06:40,516
like the built-in APIs in terms


244
00:06:40,516 --> 00:06:42,196
of the quality of the support


245
00:06:42,196 --> 00:06:42,466
you get.


246
00:06:42,946 --> 00:06:44,856
I'm going to use this method.


247
00:06:45,236 --> 00:06:46,836
I'm going to be using the same


248
00:06:47,266 --> 00:06:48,666
first parameters for the JSON


249
00:06:48,666 --> 00:06:49,036
case.


250
00:06:49,766 --> 00:06:51,126
Now this API happens to take a


251
00:06:51,126 --> 00:06:52,256
string instead of data.


252
00:06:52,406 --> 00:06:53,486
So I'm going to be using that.


253
00:06:53,836 --> 00:06:54,786
And I don't need the third


254
00:06:54,786 --> 00:06:56,326
parameter here, because I'll


255
00:06:56,326 --> 00:06:57,476
just use the default value.


256
00:06:58,426 --> 00:07:00,356
So now, we can go back again to


257
00:07:00,356 --> 00:07:01,236
the list view.


258
00:07:01,866 --> 00:07:02,936
And because this is a pretty big


259
00:07:02,936 --> 00:07:04,406
change, importing a new module,


260
00:07:04,406 --> 00:07:05,846
I'm going to hit resume.


261
00:07:05,846 --> 00:07:07,216
Xcode is going to rebuild the


262
00:07:07,216 --> 00:07:08,306
application in the background.


263
00:07:08,306 --> 00:07:09,816
And I'm going to see the preview


264
00:07:09,816 --> 00:07:10,006
here.


265
00:07:10,616 --> 00:07:11,866
And now we see that I see the


266
00:07:11,866 --> 00:07:13,716
contents from the YAML data file


267
00:07:13,716 --> 00:07:13,976
as well.


268
00:07:14,516 --> 00:07:20,056
[ Applause ]


269
00:07:20,556 --> 00:07:21,666
All right, so now I can commit


270
00:07:21,696 --> 00:07:22,886
this to my repository.


271
00:07:24,356 --> 00:07:26,786
And we see here what we expect.


272
00:07:26,786 --> 00:07:28,406
We see the source changes.


273
00:07:28,406 --> 00:07:29,346
Let me make that a bit bigger.


274
00:07:30,186 --> 00:07:31,356
We see the source changes that I


275
00:07:31,356 --> 00:07:32,736
made, of course and it's part of


276
00:07:32,736 --> 00:07:33,416
the commit sheets.


277
00:07:33,786 --> 00:07:34,906
We also see that the project


278
00:07:34,906 --> 00:07:35,826
file has changed, because I've


279
00:07:35,826 --> 00:07:37,466
added the reference to the Yams


280
00:07:37,466 --> 00:07:37,896
Package.


281
00:07:38,286 --> 00:07:39,756
And we see one more thing here,


282
00:07:39,756 --> 00:07:42,236
which is Xcode has created a


283
00:07:42,236 --> 00:07:44,146
directory called SwiftPM, that's


284
00:07:44,146 --> 00:07:45,376
for the Swift Package Manager,


285
00:07:45,806 --> 00:07:46,926
underneath the shared data,


286
00:07:46,926 --> 00:07:48,146
underneath the workspace.


287
00:07:48,146 --> 00:07:49,266
And you want to check that in,


288
00:07:49,266 --> 00:07:50,786
because we'll talk about what


289
00:07:50,786 --> 00:07:52,316
exactly is in there later on in


290
00:07:52,316 --> 00:07:52,736
the talk.


291
00:07:52,866 --> 00:07:54,756
But Xcode stores information


292
00:07:54,756 --> 00:07:56,056
about the package versions that


293
00:07:56,056 --> 00:07:56,536
resolved.


294
00:07:56,536 --> 00:07:58,156
And you want to check that in so


295
00:07:58,156 --> 00:07:59,646
that everybody on your team gets


296
00:07:59,676 --> 00:08:00,466
the same versions.


297
00:08:00,996 --> 00:08:05,456
All right, so now I can check


298
00:08:05,456 --> 00:08:09,126
this in and say useYAML.


299
00:08:10,506 --> 00:08:14,596
And use. All right, go back to


300
00:08:14,596 --> 00:08:14,976
slides.


301
00:08:18,686 --> 00:08:20,096
All right, so we saw quickly how


302
00:08:20,096 --> 00:08:21,536
to use an Open Source Package


303
00:08:21,536 --> 00:08:22,416
from within a project.


304
00:08:22,466 --> 00:08:23,386
Let's take a closer look at


305
00:08:23,386 --> 00:08:24,986
what's in the YAML Package.


306
00:08:26,206 --> 00:08:30,006
The Package is a directory that


307
00:08:30,006 --> 00:08:32,226
contains a Swift Package


308
00:08:32,476 --> 00:08:33,076
manifest.


309
00:08:33,515 --> 00:08:35,436
The manifest is a file called


310
00:08:35,436 --> 00:08:37,436
Package.swift, and it identifies


311
00:08:37,436 --> 00:08:38,856
that directory as a Swift


312
00:08:38,916 --> 00:08:39,366
Package.


313
00:08:39,706 --> 00:08:42,556
It also contains sources and of


314
00:08:42,556 --> 00:08:43,856
course, it contains unit tests


315
00:08:43,856 --> 00:08:44,896
to make sure that those sources


316
00:08:44,896 --> 00:08:45,896
continue functioning well.


317
00:08:47,366 --> 00:08:48,666
Underneath the sources is a


318
00:08:48,666 --> 00:08:49,946
subdirectory for each of the


319
00:08:49,946 --> 00:08:51,396
separate targets in the package.


320
00:08:51,396 --> 00:08:52,406
These are the separately


321
00:08:52,406 --> 00:08:53,436
buildable components of the


322
00:08:53,436 --> 00:08:53,896
package.


323
00:08:55,176 --> 00:08:56,396
And similarly, under the test


324
00:08:56,396 --> 00:08:57,936
directory, there's a separate


325
00:08:57,936 --> 00:08:59,336
subdirectory for every test


326
00:08:59,336 --> 00:08:59,586
suite.


327
00:09:01,496 --> 00:09:02,916
So let's take a closer look at


328
00:09:03,036 --> 00:09:04,266
what's in one of the target


329
00:09:04,266 --> 00:09:04,836
directories.


330
00:09:05,486 --> 00:09:07,296
Each of the targets can have


331
00:09:07,406 --> 00:09:09,126
implementation that's either one


332
00:09:09,126 --> 00:09:11,266
of the C-based languages or


333
00:09:11,336 --> 00:09:11,776
Swift.


334
00:09:11,776 --> 00:09:13,636
So in the case of YAML, there's


335
00:09:13,636 --> 00:09:15,976
a core CYAML parser that's


336
00:09:15,976 --> 00:09:16,916
written in C.


337
00:09:17,716 --> 00:09:18,756
It could also contain


338
00:09:18,956 --> 00:09:20,316
Objective-C++ files.


339
00:09:21,036 --> 00:09:22,256
And then there's a Swift


340
00:09:22,256 --> 00:09:24,516
interface in a separate target


341
00:09:24,516 --> 00:09:25,986
on -- in addition to that, that


342
00:09:25,986 --> 00:09:27,556
calls down into the CYAML code.


343
00:09:28,416 --> 00:09:30,476
And then the unit tests here are


344
00:09:30,476 --> 00:09:30,976
written in Swift.


345
00:09:34,306 --> 00:09:35,636
So if we look at the contents of


346
00:09:35,636 --> 00:09:38,516
the Swift Package Manifests, the


347
00:09:38,516 --> 00:09:40,796
first line here is a declaration


348
00:09:40,796 --> 00:09:42,596
of what the tool version the


349
00:09:42,596 --> 00:09:43,756
package needs.


350
00:09:43,756 --> 00:09:45,456
So this says the minimum version


351
00:09:45,456 --> 00:09:46,726
that can parse this package


352
00:09:46,726 --> 00:09:47,766
manifest at all.


353
00:09:48,966 --> 00:09:52,596
The package description API is a


354
00:09:52,596 --> 00:09:54,346
declarative API that is provided


355
00:09:54,346 --> 00:09:55,946
by the Package Manager's package


356
00:09:55,946 --> 00:09:56,946
description library.


357
00:09:57,366 --> 00:09:59,296
And by importing that, then the


358
00:09:59,296 --> 00:10:00,746
rest of the contents of this


359
00:10:00,806 --> 00:10:02,446
file can declare the


360
00:10:02,446 --> 00:10:04,436
characteristics of the package.


361
00:10:05,806 --> 00:10:07,426
That includes the name of the


362
00:10:07,426 --> 00:10:07,986
package.


363
00:10:09,426 --> 00:10:10,816
It also includes a section that


364
00:10:10,816 --> 00:10:12,076
lists the products that the


365
00:10:12,076 --> 00:10:13,616
package vends to the clients.


366
00:10:14,316 --> 00:10:15,936
So the Package can control which


367
00:10:15,986 --> 00:10:17,606
parts of its code can be


368
00:10:17,606 --> 00:10:18,936
directly imported by the client.


369
00:10:18,936 --> 00:10:20,096
And in this case, there is one


370
00:10:20,096 --> 00:10:22,516
library with the same name as


371
00:10:22,516 --> 00:10:24,456
the package, so called Yams.


372
00:10:25,166 --> 00:10:26,616
We'll talk in a moment about the


373
00:10:26,616 --> 00:10:27,716
targets part there.


374
00:10:27,996 --> 00:10:30,016
It basically says that this


375
00:10:30,016 --> 00:10:32,356
library publishes the Yams


376
00:10:32,356 --> 00:10:34,956
target to clients as a library.


377
00:10:36,976 --> 00:10:38,736
The target section lists the


378
00:10:38,736 --> 00:10:40,156
individually buildable parts of


379
00:10:40,156 --> 00:10:40,856
the package.


380
00:10:41,106 --> 00:10:42,566
And as we see here, there is a


381
00:10:42,566 --> 00:10:43,726
one-to-one correspondence


382
00:10:43,726 --> 00:10:46,646
between the source folders and


383
00:10:46,876 --> 00:10:47,486
the targets.


384
00:10:48,096 --> 00:10:49,396
Each of those source folders can


385
00:10:49,396 --> 00:10:50,676
have other subfolders for


386
00:10:50,676 --> 00:10:51,916
organizational purposes, but the


387
00:10:51,916 --> 00:10:54,316
top level under sources is one


388
00:10:54,596 --> 00:10:55,936
folder per packet, per target.


389
00:10:58,146 --> 00:10:59,866
In this case, we see the CYAML


390
00:10:59,866 --> 00:11:01,126
target listed without any


391
00:11:01,126 --> 00:11:01,786
dependencies.


392
00:11:02,226 --> 00:11:04,706
And the Yams target is listed as


393
00:11:04,706 --> 00:11:06,626
depending on the CYAML target.


394
00:11:06,886 --> 00:11:08,606
This means that when the product


395
00:11:08,866 --> 00:11:10,466
refers to Yams, that will, in


396
00:11:10,466 --> 00:11:12,236
turn, indirectly bring in CYAML


397
00:11:12,236 --> 00:11:12,516
as well.


398
00:11:13,306 --> 00:11:15,076
And then there's one test target


399
00:11:15,076 --> 00:11:17,146
here for the unit tests.


400
00:11:17,496 --> 00:11:18,616
This code won't actually be


401
00:11:18,616 --> 00:11:19,636
linked into the client.


402
00:11:20,036 --> 00:11:21,766
But it's necessary to make sure


403
00:11:21,766 --> 00:11:23,206
your library keeps running


404
00:11:23,206 --> 00:11:23,596
properly.


405
00:11:24,316 --> 00:11:26,506
And in this case, the Yams


406
00:11:26,876 --> 00:11:28,726
Package Manifest also lists some


407
00:11:28,796 --> 00:11:30,106
older Swift versions that the


408
00:11:30,106 --> 00:11:31,226
code is compatible with.


409
00:11:31,766 --> 00:11:33,716
There are also other


410
00:11:33,716 --> 00:11:34,756
characteristics that you can


411
00:11:34,756 --> 00:11:36,476
specify and in this declarative


412
00:11:36,476 --> 00:11:38,856
language, and we'll get to some


413
00:11:38,856 --> 00:11:39,326
of those later.


414
00:11:39,926 --> 00:11:42,526
So how is this then linked into


415
00:11:42,526 --> 00:11:44,416
your app when you actually build


416
00:11:44,416 --> 00:11:45,286
and run your app?


417
00:11:45,316 --> 00:11:46,656
So your project consists of


418
00:11:46,656 --> 00:11:47,456
source files.


419
00:11:47,786 --> 00:11:48,786
So it could be Swift.


420
00:11:48,786 --> 00:11:49,896
It could be other languages.


421
00:11:50,836 --> 00:11:52,156
And the packages you depend on,


422
00:11:52,156 --> 00:11:53,436
they're also source files.


423
00:11:54,116 --> 00:11:55,776
And so what Xcode does is it


424
00:11:55,776 --> 00:11:56,966
takes all of these source files,


425
00:11:56,966 --> 00:11:59,276
and it compiles them and


426
00:11:59,456 --> 00:12:00,846
particularly compiles the


427
00:12:00,846 --> 00:12:02,286
package code in a way that is


428
00:12:02,286 --> 00:12:04,586
compatible with the app code in


429
00:12:04,586 --> 00:12:05,126
your project.


430
00:12:05,746 --> 00:12:07,056
So this includes architectures,


431
00:12:07,096 --> 00:12:08,176
platforms, those things.


432
00:12:08,906 --> 00:12:09,936
It will recompile it multiple


433
00:12:09,936 --> 00:12:12,246
times, if needed, depending on


434
00:12:12,306 --> 00:12:13,306
what your apps need.


435
00:12:13,996 --> 00:12:16,356
Then it links it in and combines


436
00:12:16,356 --> 00:12:17,976
all of that into the


437
00:12:17,976 --> 00:12:18,596
application.


438
00:12:19,716 --> 00:12:21,166
Package libraries are static by


439
00:12:21,166 --> 00:12:21,606
default.


440
00:12:22,036 --> 00:12:23,146
And so all the code is linked


441
00:12:23,146 --> 00:12:23,526
together.


442
00:12:24,836 --> 00:12:26,696
And this is repeated for the


443
00:12:26,696 --> 00:12:28,756
various apps in your project


444
00:12:28,756 --> 00:12:30,256
that use the same package.


445
00:12:30,256 --> 00:12:32,086
So if you have an iOS app and


446
00:12:32,086 --> 00:12:33,586
WatchOS app, they use the same


447
00:12:33,586 --> 00:12:34,076
package.


448
00:12:34,316 --> 00:12:35,436
Xcode might build the code


449
00:12:35,436 --> 00:12:37,326
multiple times as needed for


450
00:12:37,326 --> 00:12:37,976
each of those apps.


451
00:12:41,526 --> 00:12:43,076
Now, we saw a case where a


452
00:12:43,076 --> 00:12:44,766
project can depend on a package.


453
00:12:45,306 --> 00:12:47,376
And we saw that is shown in the


454
00:12:47,506 --> 00:12:50,326
Package Dependencies part of the


455
00:12:50,326 --> 00:12:51,016
target editor.


456
00:12:51,556 --> 00:12:53,396
But a package can also depend on


457
00:12:53,396 --> 00:12:54,246
other packages.


458
00:12:54,456 --> 00:12:55,616
And this is done through the


459
00:12:55,616 --> 00:12:56,556
package manifest.


460
00:12:57,596 --> 00:12:58,926
So one of the sections of the


461
00:12:58,926 --> 00:13:00,506
package manifest the Yams didn't


462
00:13:00,506 --> 00:13:02,466
have was a Dependencies section.


463
00:13:02,466 --> 00:13:03,516
It didn't have that because it


464
00:13:03,516 --> 00:13:04,576
doesn't actually depend on other


465
00:13:04,576 --> 00:13:05,176
packages.


466
00:13:05,696 --> 00:13:06,906
But some Packages that you have


467
00:13:06,986 --> 00:13:07,296
might.


468
00:13:07,416 --> 00:13:08,606
And so the Package Dependency


469
00:13:08,606 --> 00:13:10,286
graph can include both direct


470
00:13:10,286 --> 00:13:10,966
and indirect dependencies.


471
00:13:14,846 --> 00:13:16,356
Now, I mentioned before that you


472
00:13:16,356 --> 00:13:18,096
can manage your versions with


473
00:13:18,246 --> 00:13:19,886
pack -- the Package Manager.


474
00:13:20,296 --> 00:13:21,346
And this uses something called


475
00:13:21,346 --> 00:13:22,136
semantic versioning.


476
00:13:22,136 --> 00:13:23,896
And that's a fairly widely used


477
00:13:23,896 --> 00:13:25,576
strategy that assigns semantic


478
00:13:25,626 --> 00:13:26,596
meaning to each of the


479
00:13:26,596 --> 00:13:27,776
components of a three-part


480
00:13:27,776 --> 00:13:27,976
version.


481
00:13:31,076 --> 00:13:32,426
So in this case, for example,


482
00:13:32,486 --> 00:13:35,816
the major version is incremented


483
00:13:35,816 --> 00:13:36,776
whenever there are breaking


484
00:13:36,776 --> 00:13:37,796
changes to the API.


485
00:13:38,476 --> 00:13:39,686
So this is anything that would


486
00:13:39,686 --> 00:13:41,326
cause the clients to have to be


487
00:13:41,326 --> 00:13:41,936
modified.


488
00:13:41,936 --> 00:13:43,466
For example, if you rename a


489
00:13:43,466 --> 00:13:45,806
method or remove a method or if


490
00:13:45,806 --> 00:13:47,046
a package makes a met -- a


491
00:13:47,046 --> 00:13:49,006
semantically meaningful change


492
00:13:49,006 --> 00:13:51,206
that will cause existing clients


493
00:13:51,206 --> 00:13:52,016
to have to adapt.


494
00:13:53,046 --> 00:13:54,456
This is the reason why the


495
00:13:54,456 --> 00:13:56,076
initial version of restriction


496
00:13:56,076 --> 00:13:57,406
goes up to, but not including,


497
00:13:57,406 --> 00:13:58,846
the next major version number.


498
00:14:01,346 --> 00:14:02,636
The minor version number of a


499
00:14:02,636 --> 00:14:04,566
package is incremented when


500
00:14:04,616 --> 00:14:06,146
functionality is added in a way


501
00:14:06,146 --> 00:14:07,296
that doesn't break existing


502
00:14:07,296 --> 00:14:07,886
clients.


503
00:14:08,146 --> 00:14:09,056
So this could be adding a


504
00:14:09,056 --> 00:14:09,916
method, for example.


505
00:14:12,046 --> 00:14:14,056
And finally, the patch version


506
00:14:14,056 --> 00:14:15,786
here is when there are bug fixes


507
00:14:15,786 --> 00:14:17,026
that don't have any semantic


508
00:14:17,116 --> 00:14:18,576
changes, semantic meaning


509
00:14:18,576 --> 00:14:18,996
changes.


510
00:14:19,506 --> 00:14:22,236
And packages can be safely


511
00:14:22,236 --> 00:14:25,856
updated to bug fixes, to


512
00:14:25,856 --> 00:14:27,586
incorporate bug fixes without


513
00:14:27,586 --> 00:14:28,676
changing the semantics of the


514
00:14:28,676 --> 00:14:28,836
app.


515
00:14:31,446 --> 00:14:32,586
Okay, so we've seen how to use


516
00:14:32,586 --> 00:14:33,246
the package.


517
00:14:33,296 --> 00:14:34,716
And we've taken a closer look at


518
00:14:34,716 --> 00:14:35,476
that package.


519
00:14:35,476 --> 00:14:36,766
And now I'd like to invite my


520
00:14:36,766 --> 00:14:38,096
colleague, Balraj, on the stage


521
00:14:38,096 --> 00:14:39,496
to talk about Package Resolution


522
00:14:39,496 --> 00:14:39,976
in more detail.


523
00:14:40,516 --> 00:14:45,846
[ Applause ]


524
00:14:46,346 --> 00:14:47,096
>> Thank you, Anders.


525
00:14:47,996 --> 00:14:49,116
Package resolution is the


526
00:14:49,116 --> 00:14:51,116
process Xcode goes through when


527
00:14:51,116 --> 00:14:52,126
selecting the versions of


528
00:14:52,126 --> 00:14:54,146
Packages to use inside of your


529
00:14:54,146 --> 00:14:54,766
workspace.


530
00:14:55,226 --> 00:14:56,486
Let's go into a little bit more


531
00:14:56,486 --> 00:14:58,116
detail in how that was working


532
00:14:58,116 --> 00:14:59,696
with -- and how that was working


533
00:14:59,976 --> 00:15:01,846
in the Lunch project Anders was


534
00:15:01,846 --> 00:15:02,616
demoing earlier.


535
00:15:05,336 --> 00:15:07,286
So here in the Project Editor in


536
00:15:07,286 --> 00:15:09,126
the Swift Packages tab, we can


537
00:15:09,126 --> 00:15:10,966
see our dependency on -- our


538
00:15:11,006 --> 00:15:12,516
Lunch's dependency on Yams.


539
00:15:12,816 --> 00:15:14,686
Using the Version Rule 2 to up


540
00:15:14,686 --> 00:15:15,776
to the next major version,


541
00:15:16,306 --> 00:15:18,366
meaning any version of Yams from


542
00:15:18,366 --> 00:15:21,366
2 up to, but not including 3.


543
00:15:21,706 --> 00:15:24,436
Then, in the Swift Package


544
00:15:24,436 --> 00:15:25,516
Dependencies section of the


545
00:15:25,516 --> 00:15:27,306
Project Navigator, we can see


546
00:15:27,306 --> 00:15:29,156
Yams at version 2.0.


547
00:15:30,446 --> 00:15:31,656
Let's look a little deeper into


548
00:15:31,656 --> 00:15:31,866
this.


549
00:15:34,086 --> 00:15:35,886
Lunch is selecting Yams at


550
00:15:35,886 --> 00:15:37,506
Version 2, because of its


551
00:15:37,506 --> 00:15:38,886
version requirement, 2 up to the


552
00:15:38,886 --> 00:15:39,856
next major version.


553
00:15:40,886 --> 00:15:43,266
If a version 2.1 existed, Xcode


554
00:15:43,266 --> 00:15:44,206
would have selected that


555
00:15:44,206 --> 00:15:46,676
instead, as 2.1 is the latest


556
00:15:46,676 --> 00:15:48,276
version matching our version


557
00:15:48,276 --> 00:15:48,876
requirement.


558
00:15:49,886 --> 00:15:52,316
However, if a version 3 existed,


559
00:15:52,316 --> 00:15:53,696
Xcode would not have selected


560
00:15:53,696 --> 00:15:55,596
it, as it doesn't fit into the


561
00:15:55,596 --> 00:15:57,396
constraints that we specified.


562
00:15:58,746 --> 00:16:00,686
In this case 2.1 and 3 are


563
00:16:00,686 --> 00:16:01,876
hypothetical examples.


564
00:16:02,066 --> 00:16:03,986
And you'll see Yams continue to


565
00:16:03,986 --> 00:16:05,706
resolve at Version 2 throughout


566
00:16:05,706 --> 00:16:06,976
the rest of this presentation.


567
00:16:08,416 --> 00:16:10,226
In this example, there's one


568
00:16:10,226 --> 00:16:11,516
package with one version to


569
00:16:11,566 --> 00:16:12,086
choose from.


570
00:16:12,686 --> 00:16:14,136
So let's go into a few more


571
00:16:14,136 --> 00:16:15,936
interesting cases, where package


572
00:16:15,936 --> 00:16:17,206
resolution can get a little bit


573
00:16:17,206 --> 00:16:17,976
more complicated.


574
00:16:20,396 --> 00:16:22,096
So here is the Lunch app that we


575
00:16:22,096 --> 00:16:22,746
have today.


576
00:16:23,596 --> 00:16:25,316
It has a very basic UI and is


577
00:16:25,316 --> 00:16:27,026
only using one package, as we


578
00:16:27,026 --> 00:16:28,146
just said.


579
00:16:29,596 --> 00:16:31,736
My team, over time, adds more


580
00:16:31,736 --> 00:16:33,496
packages to our application and


581
00:16:33,496 --> 00:16:35,216
they use these packages to show


582
00:16:35,216 --> 00:16:37,036
common design themes across all


583
00:16:37,036 --> 00:16:38,636
the applications that my team


584
00:16:38,636 --> 00:16:38,966
owns.


585
00:16:39,046 --> 00:16:41,386
So when we go back to the Lunch


586
00:16:41,386 --> 00:16:43,116
application, after a few weeks,


587
00:16:43,386 --> 00:16:46,616
we can see that the UI has been


588
00:16:46,616 --> 00:16:47,976
updated, and there are three


589
00:16:47,976 --> 00:16:49,886
additional packages inside of


590
00:16:49,886 --> 00:16:50,676
our workspace.


591
00:16:51,806 --> 00:16:53,436
These three packages are


592
00:16:53,436 --> 00:16:55,626
DesignFont, DesignTheme, and


593
00:16:55,626 --> 00:16:56,326
DesignColor.


594
00:16:57,316 --> 00:16:58,746
All resolving at their own


595
00:16:58,746 --> 00:17:00,006
respective versions.


596
00:17:00,586 --> 00:17:03,696
So Xcode did a lot of the work


597
00:17:03,696 --> 00:17:05,376
for us in terms of selecting the


598
00:17:05,376 --> 00:17:06,465
versions of these packages.


599
00:17:06,776 --> 00:17:08,626
But I want to understand why


600
00:17:08,685 --> 00:17:10,256
these packages are resolving at


601
00:17:10,256 --> 00:17:10,935
these versions.


602
00:17:11,336 --> 00:17:14,336
So in order to do so, I go back


603
00:17:14,376 --> 00:17:14,976
to the Project Editor.


604
00:17:18,656 --> 00:17:19,915
Here in the Swift Package


605
00:17:19,915 --> 00:17:21,685
Dependency section, we can see


606
00:17:21,826 --> 00:17:23,185
our new dependency on


607
00:17:23,185 --> 00:17:24,925
DesignTheme, with a Version Rule


608
00:17:24,925 --> 00:17:26,096
1 one up to the next major


609
00:17:26,096 --> 00:17:26,476
version.


610
00:17:28,415 --> 00:17:31,316
Xcode, in this case, selects


611
00:17:31,316 --> 00:17:32,866
DesignTheme at Version 1,


612
00:17:33,086 --> 00:17:35,116
because it's resolving from 1 to


613
00:17:35,116 --> 00:17:35,976
the next major version.


614
00:17:39,216 --> 00:17:40,386
And so we also see our


615
00:17:40,386 --> 00:17:42,016
dependency on Yams is still the


616
00:17:42,016 --> 00:17:42,316
same.


617
00:17:43,056 --> 00:17:44,456
And you might be wondering.


618
00:17:44,976 --> 00:17:46,536
Where are DesignFont and


619
00:17:46,536 --> 00:17:47,976
DesignColor in this case?


620
00:17:48,206 --> 00:17:49,126
We're looking in the Project


621
00:17:49,126 --> 00:17:50,816
Editor, but we don't see them


622
00:17:50,856 --> 00:17:51,516
inside of there.


623
00:17:51,986 --> 00:17:53,586
Well, the reason for this is the


624
00:17:53,586 --> 00:17:55,746
Project Editor shows us all of


625
00:17:55,746 --> 00:17:57,256
the direct dependencies between


626
00:17:57,256 --> 00:17:59,406
the Lunch application and its


627
00:17:59,406 --> 00:18:00,386
direct packages.


628
00:18:02,016 --> 00:18:04,556
So in order to look at our


629
00:18:04,556 --> 00:18:06,426
package's dependencies, we want


630
00:18:06,426 --> 00:18:07,706
to go and look at the


631
00:18:07,706 --> 00:18:08,686
DesignTheme package.


632
00:18:09,066 --> 00:18:10,456
This is because it's the newest


633
00:18:10,456 --> 00:18:11,436
package that was added to our


634
00:18:11,436 --> 00:18:11,986
workspace.


635
00:18:12,296 --> 00:18:13,466
And it's safe to assume that


636
00:18:13,466 --> 00:18:14,626
they're not coming from Yams.


637
00:18:15,296 --> 00:18:16,956
So in order to do so, we go back


638
00:18:16,956 --> 00:18:18,356
to the high-level view of Xcode,


639
00:18:18,696 --> 00:18:20,476
and look under the Swift Package


640
00:18:20,476 --> 00:18:21,376
Dependencies section.


641
00:18:21,676 --> 00:18:23,256
Here we see our package


642
00:18:23,256 --> 00:18:23,856
DesignTheme.


643
00:18:24,396 --> 00:18:26,806
We disclose the package and see


644
00:18:26,846 --> 00:18:28,496
all the content available inside


645
00:18:28,496 --> 00:18:28,826
of there.


646
00:18:28,826 --> 00:18:30,476
And in this case, we want to


647
00:18:30,476 --> 00:18:31,706
look at the Package.swift


648
00:18:31,706 --> 00:18:32,506
manifest file.


649
00:18:33,246 --> 00:18:36,366
This is because it is where we


650
00:18:36,366 --> 00:18:37,696
will find all of our dependency


651
00:18:37,696 --> 00:18:39,326
information for this package.


652
00:18:40,446 --> 00:18:41,426
So we go to this file.


653
00:18:41,426 --> 00:18:43,086
And in the dependencies array,


654
00:18:43,336 --> 00:18:44,896
we see DesignFont and


655
00:18:44,896 --> 00:18:46,396
DesignColor, and their version


656
00:18:46,396 --> 00:18:47,086
requirements.


657
00:18:50,036 --> 00:18:52,076
DesignFont is being resolved how


658
00:18:52,076 --> 00:18:54,006
we've seen before, 1 up to the


659
00:18:54,006 --> 00:18:54,916
next major version.


660
00:18:55,446 --> 00:18:56,846
And so Xcode will select version


661
00:18:56,846 --> 00:18:59,166
1.2 as it's the latest version


662
00:18:59,356 --> 00:18:59,976
of the package.


663
00:19:03,176 --> 00:19:05,226
DesignColor is resolved a little


664
00:19:05,226 --> 00:19:05,806
bit differently.


665
00:19:06,136 --> 00:19:08,166
This is using 1 up to the next


666
00:19:08,246 --> 00:19:10,536
minor version, meaning any


667
00:19:10,536 --> 00:19:13,316
version of designs color from 1,


668
00:19:13,876 --> 00:19:15,286
and up to, but not including,


669
00:19:15,286 --> 00:19:15,946
1.1.


670
00:19:16,556 --> 00:19:18,416
This is typically used when


671
00:19:18,486 --> 00:19:19,746
packages want to be a little bit


672
00:19:19,746 --> 00:19:21,106
more conservative with the new


673
00:19:21,106 --> 00:19:22,356
versions that they take during


674
00:19:22,356 --> 00:19:22,746
updates.


675
00:19:23,256 --> 00:19:25,776
And so Xcode selects Version


676
00:19:25,776 --> 00:19:28,176
1.0.1 of the DesignColor


677
00:19:28,176 --> 00:19:28,716
package.


678
00:19:29,646 --> 00:19:31,036
So now this is the full view of


679
00:19:31,036 --> 00:19:32,136
the new packages that have been


680
00:19:32,176 --> 00:19:33,206
added and why they're being


681
00:19:33,206 --> 00:19:34,856
resolved at the versions they


682
00:19:37,436 --> 00:19:37,516
are.


683
00:19:37,786 --> 00:19:39,296
You'll remember the last step


684
00:19:39,296 --> 00:19:40,766
Anders did in the previous demo


685
00:19:40,956 --> 00:19:42,546
was importing Yams and then


686
00:19:42,546 --> 00:19:43,506
using its APIs.


687
00:19:43,906 --> 00:19:45,306
Let's talk about how this works


688
00:19:45,426 --> 00:19:46,666
and how it relates to package


689
00:19:46,666 --> 00:19:46,976
resolution.


690
00:19:50,046 --> 00:19:50,936
All of our packages are


691
00:19:50,936 --> 00:19:52,716
producing libraries of the same


692
00:19:52,716 --> 00:19:52,976
name.


693
00:19:55,046 --> 00:19:56,686
And we can see that Lunch is


694
00:19:56,686 --> 00:19:57,626
importing content from


695
00:19:57,626 --> 00:19:59,156
DesignTheme and it's also


696
00:19:59,156 --> 00:20:00,376
importing content from Yams.


697
00:20:00,976 --> 00:20:03,176
And then the DesignTheme library


698
00:20:03,176 --> 00:20:04,656
is also importing content from


699
00:20:04,656 --> 00:20:05,966
DesignFont and DesignColor.


700
00:20:08,116 --> 00:20:09,426
When we look at the full graph


701
00:20:09,426 --> 00:20:11,316
here, we can see this is very


702
00:20:11,316 --> 00:20:12,356
similar to how package


703
00:20:12,356 --> 00:20:13,336
resolution is working.


704
00:20:13,686 --> 00:20:15,076
And that is intentional.


705
00:20:15,556 --> 00:20:16,786
When we added our direct


706
00:20:16,786 --> 00:20:19,726
dependencies on our packages, we


707
00:20:19,726 --> 00:20:21,226
also ended up importing their


708
00:20:21,226 --> 00:20:22,786
content and actually using the


709
00:20:22,786 --> 00:20:24,106
APIs in our application.


710
00:20:24,446 --> 00:20:27,026
But what happens when I want to


711
00:20:27,026 --> 00:20:28,536
import content from a sub


712
00:20:28,536 --> 00:20:30,576
dependency into our project?


713
00:20:31,766 --> 00:20:33,086
So let's talk about how we would


714
00:20:33,086 --> 00:20:33,616
do this.


715
00:20:36,046 --> 00:20:37,416
We have our Lunch project, which


716
00:20:37,416 --> 00:20:38,606
is depending on DesignTheme.


717
00:20:39,376 --> 00:20:40,776
And DesignTheme is depending on


718
00:20:40,776 --> 00:20:42,096
the DesignFont package.


719
00:20:42,886 --> 00:20:44,496
The DesignFont package is


720
00:20:44,496 --> 00:20:45,906
producing a library of the same


721
00:20:45,906 --> 00:20:46,186
name.


722
00:20:46,976 --> 00:20:48,686
In this context, we don't want


723
00:20:48,686 --> 00:20:50,226
to immediately import content


724
00:20:50,406 --> 00:20:52,186
from DesignFont into Lunch,


725
00:20:52,516 --> 00:20:56,126
because if DesignTheme loses its


726
00:20:56,126 --> 00:20:57,526
dependency on DesignFont and


727
00:20:57,526 --> 00:20:59,336
Update, Xcode will lose its


728
00:20:59,336 --> 00:21:00,446
reference to DesignFont.


729
00:21:00,446 --> 00:21:02,986
And now, we won't be able to use


730
00:21:02,986 --> 00:21:04,106
the DesignFont library.


731
00:21:05,136 --> 00:21:07,036
So a better approach of doing


732
00:21:07,036 --> 00:21:08,216
this, and we'll go back to the


733
00:21:08,216 --> 00:21:10,126
beginning of our example, is to


734
00:21:10,126 --> 00:21:11,696
create a direct depend -- direct


735
00:21:11,696 --> 00:21:13,246
package dependency between the


736
00:21:13,246 --> 00:21:15,216
Lunch project and the DesignFont


737
00:21:15,216 --> 00:21:15,666
package.


738
00:21:16,106 --> 00:21:18,276
And then we can import content


739
00:21:18,276 --> 00:21:19,696
from DesignFont into Lunch,


740
00:21:20,086 --> 00:21:21,776
because if DesignTheme loses its


741
00:21:21,776 --> 00:21:24,006
dependency on DesignFont in an


742
00:21:24,006 --> 00:21:26,276
update, we still retain the


743
00:21:26,276 --> 00:21:28,586
reference to that library inside


744
00:21:28,586 --> 00:21:28,976
of Xcode.


745
00:21:32,176 --> 00:21:33,916
So that is how Xcode selects


746
00:21:33,916 --> 00:21:35,026
different versions of your


747
00:21:35,026 --> 00:21:35,556
packages.


748
00:21:36,286 --> 00:21:39,536
Let's go into an -- into how you


749
00:21:39,536 --> 00:21:40,456
can go about getting new


750
00:21:40,456 --> 00:21:41,656
versions of those packages,


751
00:21:41,916 --> 00:21:43,446
which provide API improvements


752
00:21:43,446 --> 00:21:43,976
and bug fixes.


753
00:21:46,106 --> 00:21:47,946
So one day, I'm at team with --


754
00:21:48,246 --> 00:21:49,756
I'm at lunch with the team


755
00:21:49,756 --> 00:21:51,036
maintaining DesignFont.


756
00:21:51,336 --> 00:21:52,936
And they tell me about a new


757
00:21:52,936 --> 00:21:54,216
version of the DesignFont


758
00:21:54,216 --> 00:21:55,556
package, which has a few small


759
00:21:55,556 --> 00:21:58,206
bug fixes, Version 1.2.1.


760
00:21:58,206 --> 00:22:01,276
When I get back to my desk, I


761
00:22:01,276 --> 00:22:03,276
see DesignFont is using version


762
00:22:03,276 --> 00:22:03,966
1.2.


763
00:22:04,086 --> 00:22:06,066
The Lunch project is using


764
00:22:06,066 --> 00:22:07,716
DesignFont at Version 1.2.


765
00:22:09,216 --> 00:22:10,536
And so I want to update this


766
00:22:10,536 --> 00:22:11,016
package.


767
00:22:11,446 --> 00:22:14,186
In order to do so, I click File,


768
00:22:14,936 --> 00:22:15,806
Swift Packages.


769
00:22:16,066 --> 00:22:17,066
And here, I'm brought with


770
00:22:17,066 --> 00:22:18,636
multiple options regarding Swift


771
00:22:18,636 --> 00:22:19,146
Packages.


772
00:22:19,786 --> 00:22:21,966
In this case, I want to update


773
00:22:21,966 --> 00:22:23,336
to the latest package versions.


774
00:22:24,836 --> 00:22:26,706
So go ahead and click that, and


775
00:22:26,706 --> 00:22:27,986
the update operation occurs.


776
00:22:29,176 --> 00:22:30,856
We're now using DesignFont


777
00:22:30,856 --> 00:22:32,296
Version 1.2.1.


778
00:22:32,886 --> 00:22:35,876
So what exactly does updating


779
00:22:35,876 --> 00:22:36,776
package version do?


780
00:22:37,016 --> 00:22:38,506
What happened during that update


781
00:22:38,506 --> 00:22:38,936
operation?


782
00:22:42,086 --> 00:22:43,686
So there exists a file called


783
00:22:43,686 --> 00:22:44,956
Package.resolved, which is


784
00:22:44,956 --> 00:22:45,596
central to this.


785
00:22:46,876 --> 00:22:48,906
Package.resolved records version


786
00:22:48,906 --> 00:22:50,006
information about all the


787
00:22:50,006 --> 00:22:51,176
packages inside of your


788
00:22:51,176 --> 00:22:51,676
workspace.


789
00:22:52,176 --> 00:22:53,296
And when you go through the


790
00:22:53,296 --> 00:22:55,446
update operation, this file gets


791
00:22:55,496 --> 00:22:56,976
updated, and then Xcode will


792
00:22:56,976 --> 00:22:58,176
select -- pull down the new


793
00:22:58,176 --> 00:22:58,976
versions for you.


794
00:23:03,046 --> 00:23:04,536
This file exists inside of


795
00:23:04,536 --> 00:23:06,426
xcsharedata, which is typically


796
00:23:06,426 --> 00:23:08,126
shared with your team and source


797
00:23:08,126 --> 00:23:08,526
control.


798
00:23:08,956 --> 00:23:10,156
So an important thing to note


799
00:23:10,156 --> 00:23:11,286
here is that that update


800
00:23:11,286 --> 00:23:13,466
operation we just did is a local


801
00:23:13,466 --> 00:23:14,116
operation.


802
00:23:14,576 --> 00:23:15,876
In order to share this update


803
00:23:15,876 --> 00:23:18,576
across my team, I have to commit


804
00:23:18,576 --> 00:23:20,106
and push my changes to the


805
00:23:20,106 --> 00:23:20,906
Package.resolved file.


806
00:23:23,066 --> 00:23:24,366
And then if you want to look for


807
00:23:24,366 --> 00:23:25,586
all of this yourself, it's


808
00:23:25,586 --> 00:23:27,006
inside of the Xcode Project


809
00:23:27,006 --> 00:23:27,346
file.


810
00:23:27,846 --> 00:23:29,296
But please note that you don't


811
00:23:29,296 --> 00:23:30,376
actually have to edit the


812
00:23:30,376 --> 00:23:32,026
Package.resolved file yourself.


813
00:23:32,456 --> 00:23:33,746
Xcode should be doing all of the


814
00:23:33,746 --> 00:23:34,596
work for you.


815
00:23:38,066 --> 00:23:40,156
So as I said before, we actually


816
00:23:40,156 --> 00:23:41,516
haven't shared this update with


817
00:23:41,516 --> 00:23:41,996
our team.


818
00:23:42,216 --> 00:23:43,236
So let's do that.


819
00:23:43,656 --> 00:23:45,176
We can do all of this within


820
00:23:45,296 --> 00:23:46,576
Xcode by going to the Source


821
00:23:46,576 --> 00:23:47,586
Control Menu and clicking


822
00:23:47,586 --> 00:23:47,936
Commit.


823
00:23:51,226 --> 00:23:52,906
Inside of here, we'll see all


824
00:23:52,906 --> 00:23:53,946
the changes that were made to


825
00:23:53,946 --> 00:23:55,636
the Package.resolved file and


826
00:23:55,636 --> 00:23:57,606
how it updated from Version 1.2,


827
00:23:58,096 --> 00:23:59,396
what we were previously using,


828
00:24:00,036 --> 00:24:02,146
to 1.2.1, the new version.


829
00:24:02,876 --> 00:24:04,386
Because I want to push, I go


830
00:24:04,386 --> 00:24:05,536
ahead and click the lower-left


831
00:24:05,856 --> 00:24:07,146
checkbox, push to remote.


832
00:24:07,576 --> 00:24:09,136
And then I can commit and push


833
00:24:09,136 --> 00:24:09,696
my changes.


834
00:24:10,276 --> 00:24:11,926
We've now successfully shared


835
00:24:11,926 --> 00:24:13,756
this update across our team.


836
00:24:14,956 --> 00:24:16,136
So all of this begs the


837
00:24:16,136 --> 00:24:17,646
question, why do we need a


838
00:24:17,646 --> 00:24:19,376
Package.resolved file?


839
00:24:20,396 --> 00:24:22,476
This file exists to make sure


840
00:24:22,476 --> 00:24:23,676
that when people are using --


841
00:24:23,876 --> 00:24:25,316
people across my team are using


842
00:24:25,536 --> 00:24:27,186
the Lunch project at the same


843
00:24:27,186 --> 00:24:28,636
commit, that they're all getting


844
00:24:28,636 --> 00:24:30,276
the same version of DesignFont.


845
00:24:30,976 --> 00:24:31,856
If this file -- if the


846
00:24:31,856 --> 00:24:33,476
Package.resolved file didn't


847
00:24:33,476 --> 00:24:35,996
exist, you might end up in a


848
00:24:35,996 --> 00:24:37,516
situation where multiple people


849
00:24:37,516 --> 00:24:39,966
on your team are using the same


850
00:24:39,966 --> 00:24:41,746
version of your project, but


851
00:24:41,746 --> 00:24:44,456
without consistency across the


852
00:24:44,456 --> 00:24:45,646
versions of packages that you're


853
00:24:45,646 --> 00:24:45,956
using.


854
00:24:48,326 --> 00:24:49,476
So an incredibly important thing


855
00:24:49,476 --> 00:24:50,906
to note is to check in your


856
00:24:50,906 --> 00:24:52,166
Package.resolved file.


857
00:24:52,606 --> 00:24:54,146
Otherwise, you might end up


858
00:24:54,196 --> 00:24:55,796
using inconsistent versions of


859
00:24:55,796 --> 00:24:57,326
packages across your team.


860
00:24:57,606 --> 00:24:58,666
So it's incredibly important


861
00:24:58,666 --> 00:24:59,776
that this file is checked in.


862
00:25:02,046 --> 00:25:03,756
And then be sure to look out for


863
00:25:03,756 --> 00:25:05,136
new versions of your packages.


864
00:25:05,996 --> 00:25:08,716
And then, update with intent.


865
00:25:09,016 --> 00:25:10,676
Otherwise, you might miss out on


866
00:25:10,676 --> 00:25:12,526
a few key bug fixes and API


867
00:25:12,526 --> 00:25:14,036
improvements that your packages


868
00:25:14,036 --> 00:25:14,806
are providing for you.


869
00:25:16,276 --> 00:25:17,626
So that's how you update


870
00:25:17,626 --> 00:25:18,106
packages.


871
00:25:18,806 --> 00:25:20,166
Let's go into a little bit more


872
00:25:20,166 --> 00:25:21,706
of an advanced example on how to


873
00:25:21,706 --> 00:25:22,856
resolve package conflict, which


874
00:25:23,086 --> 00:25:24,376
will bring together a lot of the


875
00:25:24,376 --> 00:25:25,496
different topics we've talked


876
00:25:25,496 --> 00:25:25,976
about today.


877
00:25:29,046 --> 00:25:31,296
So I launch a project to change


878
00:25:31,296 --> 00:25:33,496
the font that we're using for


879
00:25:33,496 --> 00:25:35,186
our price inside of the Lunch


880
00:25:35,186 --> 00:25:35,826
application.


881
00:25:37,236 --> 00:25:39,096
The system font that I want to


882
00:25:39,096 --> 00:25:41,206
use is available in DesignFont


883
00:25:41,206 --> 00:25:42,656
at Version 2, and this helps


884
00:25:42,656 --> 00:25:43,836
keep a consistent version of the


885
00:25:43,836 --> 00:25:46,226
fonts we're using consistent


886
00:25:46,356 --> 00:25:48,766
across the applications our team


887
00:25:48,766 --> 00:25:49,066
owns.


888
00:25:49,686 --> 00:25:50,686
So let's do this.


889
00:25:51,456 --> 00:25:52,926
In order to use the DesignFont


890
00:25:53,346 --> 00:25:55,326
package, we need to create a


891
00:25:55,326 --> 00:25:56,836
direct dependency between Lunch


892
00:25:57,086 --> 00:25:57,846
and DesignFont.


893
00:25:58,646 --> 00:26:00,356
And then, because DesignFont at


894
00:26:00,356 --> 00:26:02,006
Version 2 is what released this


895
00:26:02,006 --> 00:26:04,356
new font, we want to use that


896
00:26:04,356 --> 00:26:04,976
version specifically.


897
00:26:07,076 --> 00:26:08,576
So we go to Xcode, and we go


898
00:26:08,576 --> 00:26:09,316
through the Add Package


899
00:26:09,316 --> 00:26:09,776
workflow.


900
00:26:10,436 --> 00:26:11,686
We click DesignFont as it's in


901
00:26:11,686 --> 00:26:13,696
our favorite accounts.


902
00:26:13,996 --> 00:26:14,756
And we say Next.


903
00:26:15,156 --> 00:26:16,456
We choose to up to the next


904
00:26:16,456 --> 00:26:17,936
major version, because we want


905
00:26:17,936 --> 00:26:20,016
to be open to any updates or new


906
00:26:20,016 --> 00:26:21,206
versions that DesignFont


907
00:26:21,206 --> 00:26:21,686
releases.


908
00:26:21,686 --> 00:26:23,776
And then we click Next.


909
00:26:24,606 --> 00:26:26,036
Here, we run into a package


910
00:26:26,036 --> 00:26:28,186
resolution error, because of our


911
00:26:28,186 --> 00:26:29,726
new dependency requirement on


912
00:26:29,726 --> 00:26:31,516
DesignFont from 2 to the next


913
00:26:31,516 --> 00:26:31,976
major version.


914
00:26:35,826 --> 00:26:37,266
So let's look into what's


915
00:26:37,266 --> 00:26:39,116
happening here and debug what's


916
00:26:39,116 --> 00:26:39,626
going on.


917
00:26:40,856 --> 00:26:41,906
One thing that's really


918
00:26:41,906 --> 00:26:43,206
important to remember when


919
00:26:43,206 --> 00:26:45,046
debugging package resolution is


920
00:26:45,046 --> 00:26:46,256
to look at the full picture.


921
00:26:47,486 --> 00:26:49,716
We want to think of every


922
00:26:49,716 --> 00:26:51,096
requirement that is that is


923
00:26:51,096 --> 00:26:52,856
affecting our packages and not


924
00:26:52,856 --> 00:26:53,656
just narrow in on what we've


925
00:26:53,656 --> 00:26:53,976
just added.


926
00:26:56,046 --> 00:26:57,546
So we take a step back to how


927
00:26:57,546 --> 00:26:58,656
this was working before.


928
00:26:59,226 --> 00:27:00,756
Lunch had a great dependency on


929
00:27:00,756 --> 00:27:02,466
DesignTheme at Version 1.


930
00:27:02,946 --> 00:27:04,316
And DesignTheme had a direct


931
00:27:04,316 --> 00:27:06,056
dependency on DesignFont at


932
00:27:06,056 --> 00:27:08,616
Version 1.2.1, using the version


933
00:27:08,616 --> 00:27:10,686
requirement 1 to the next major


934
00:27:10,686 --> 00:27:10,976
version.


935
00:27:14,286 --> 00:27:16,276
And then when we added our


936
00:27:16,276 --> 00:27:17,656
direct dependency between Lunch


937
00:27:17,706 --> 00:27:19,486
and DesignFont from 2 up to the


938
00:27:19,486 --> 00:27:21,306
next major version, we ran into


939
00:27:21,306 --> 00:27:22,746
the package resolution conflict.


940
00:27:24,336 --> 00:27:26,726
You'll notice that DesignTheme's


941
00:27:26,726 --> 00:27:29,016
requirement on DesignFont 1, up


942
00:27:29,016 --> 00:27:30,316
to, but not including, 2.


943
00:27:30,596 --> 00:27:31,956
And Lunch's requirement on


944
00:27:31,956 --> 00:27:34,086
DesignFont 2, but not in -- up


945
00:27:34,086 --> 00:27:36,026
to, but not including 3, can't


946
00:27:36,026 --> 00:27:37,706
select one version that matches


947
00:27:37,786 --> 00:27:38,916
both of those requirements.


948
00:27:39,996 --> 00:27:42,546
And so in SwiftPMs integration


949
00:27:42,546 --> 00:27:44,286
into Xcode, you can only have


950
00:27:44,416 --> 00:27:46,066
one version of a package in a


951
00:27:46,066 --> 00:27:46,626
workspace.


952
00:27:47,646 --> 00:27:48,926
And this is explaining why we're


953
00:27:48,926 --> 00:27:50,366
seeing the package resolution


954
00:27:50,366 --> 00:27:51,126
error here.


955
00:27:51,716 --> 00:27:54,016
Xcode can't possibly pick one


956
00:27:54,016 --> 00:27:55,566
version that satisfies both


957
00:27:55,566 --> 00:27:56,776
version requirements.


958
00:27:58,026 --> 00:27:59,526
Going about fixing this is


959
00:27:59,566 --> 00:28:00,786
really situation specific.


960
00:28:01,326 --> 00:28:02,626
But typically, when I run into


961
00:28:02,626 --> 00:28:03,926
package resolution errors like


962
00:28:03,966 --> 00:28:05,466
this, I want to look at the


963
00:28:05,466 --> 00:28:06,936
newer versions of packages that


964
00:28:06,936 --> 00:28:07,716
are available to me.


965
00:28:08,196 --> 00:28:09,476
And then I can see if those


966
00:28:09,476 --> 00:28:11,776
newer versions have provided any


967
00:28:11,776 --> 00:28:12,536
updates to their sub


968
00:28:12,536 --> 00:28:12,976
dependencies.


969
00:28:15,046 --> 00:28:16,026
In this case, I noticed that


970
00:28:16,026 --> 00:28:17,066
there's a Version 2 of


971
00:28:17,066 --> 00:28:19,206
DesignTheme that we haven't


972
00:28:19,206 --> 00:28:19,966
really looked at yet.


973
00:28:20,596 --> 00:28:23,006
So let's go to GitHub and look


974
00:28:23,006 --> 00:28:25,016
at our DesignTheme's version


975
00:28:25,016 --> 00:28:25,726
requirements.


976
00:28:27,356 --> 00:28:29,106
When we go to GitHub, we can


977
00:28:29,106 --> 00:28:30,386
look in the dependencies array


978
00:28:30,386 --> 00:28:31,636
of the Swift Package Manifest.


979
00:28:32,036 --> 00:28:32,936
And here, we see that


980
00:28:32,936 --> 00:28:34,916
DesignFont's version requirement


981
00:28:35,076 --> 00:28:37,336
has updated from 2 -- from 1 to


982
00:28:37,336 --> 00:28:39,036
the next major version to be 2


983
00:28:39,036 --> 00:28:40,116
to the next major version.


984
00:28:41,066 --> 00:28:42,266
This matches with the version


985
00:28:42,266 --> 00:28:43,696
requirement that we were trying


986
00:28:43,696 --> 00:28:44,806
to add between Lunch and


987
00:28:44,806 --> 00:28:45,506
DesignFont.


988
00:28:45,976 --> 00:28:47,966
So if we can update


989
00:28:48,526 --> 00:28:49,446
DesignTheme's version


990
00:28:49,446 --> 00:28:51,166
requirement to be resolving at


991
00:28:51,166 --> 00:28:53,116
Version 2, we can now


992
00:28:53,116 --> 00:28:55,036
satisfiably add a direct


993
00:28:55,036 --> 00:28:56,706
dependency between Lunch and


994
00:28:56,706 --> 00:28:57,336
DesignFont.


995
00:28:58,746 --> 00:29:00,366
So let's go about doing that and


996
00:29:00,366 --> 00:29:01,876
update the major version of


997
00:29:01,876 --> 00:29:02,426
DesignTheme.


998
00:29:03,206 --> 00:29:04,736
Previously, Lunch was using


999
00:29:05,026 --> 00:29:06,786
DesignTheme up from 1 to the


1000
00:29:06,786 --> 00:29:07,676
next major version.


1001
00:29:07,916 --> 00:29:09,136
We want to change that so that


1002
00:29:09,136 --> 00:29:11,126
it's now using 2 up to the next


1003
00:29:11,126 --> 00:29:11,766
major version.


1004
00:29:14,286 --> 00:29:15,376
So we go back to Xcode.


1005
00:29:15,466 --> 00:29:17,346
And now, we just click on the


1006
00:29:17,346 --> 00:29:20,036
DesignTheme package inside of


1007
00:29:20,236 --> 00:29:21,046
the Project Editor.


1008
00:29:21,046 --> 00:29:23,296
And then we're back to an edit


1009
00:29:23,296 --> 00:29:24,076
version rule sheet.


1010
00:29:24,536 --> 00:29:25,596
Here, we were previously


1011
00:29:25,596 --> 00:29:27,166
specifying 1 up to the next


1012
00:29:27,166 --> 00:29:27,936
major version.


1013
00:29:28,586 --> 00:29:30,126
But now we want to change that


1014
00:29:30,276 --> 00:29:31,806
to be 2 to the next major


1015
00:29:31,806 --> 00:29:32,266
version.


1016
00:29:33,346 --> 00:29:35,986
So we simply change our 1 to a 2


1017
00:29:36,236 --> 00:29:36,956
and then click Done.


1018
00:29:37,996 --> 00:29:40,036
And now, the update operation


1019
00:29:40,036 --> 00:29:40,476
occurs.


1020
00:29:40,746 --> 00:29:43,266
And we can see that DesignTheme


1021
00:29:43,266 --> 00:29:45,086
is at Version 2, and DesignFont


1022
00:29:45,086 --> 00:29:45,856
is at Version 2.


1023
00:29:49,056 --> 00:29:50,456
But one important thing happens


1024
00:29:50,456 --> 00:29:50,626
here.


1025
00:29:50,926 --> 00:29:52,246
When we update from one major


1026
00:29:52,246 --> 00:29:55,036
version to another, we run into


1027
00:29:55,036 --> 00:29:55,806
a build failure.


1028
00:29:56,146 --> 00:29:57,746
And this is because when going


1029
00:29:57,746 --> 00:29:59,006
from one major version of a


1030
00:29:59,006 --> 00:30:01,016
package to another, there can be


1031
00:30:01,016 --> 00:30:01,916
API changes.


1032
00:30:02,156 --> 00:30:03,696
And this can potentially cause


1033
00:30:03,696 --> 00:30:05,016
breaking changes inside of your


1034
00:30:05,016 --> 00:30:05,496
project.


1035
00:30:07,316 --> 00:30:09,076
This means that when you update


1036
00:30:09,076 --> 00:30:10,036
from one major version to


1037
00:30:10,036 --> 00:30:11,566
another, you should be prepared


1038
00:30:11,686 --> 00:30:14,086
to change some APIs, or change


1039
00:30:14,086 --> 00:30:15,606
however the APIs are working


1040
00:30:15,606 --> 00:30:16,806
inside of the new version of the


1041
00:30:16,806 --> 00:30:16,956
package.


1042
00:30:19,326 --> 00:30:21,306
This can be very small changes,


1043
00:30:21,306 --> 00:30:22,346
or it can be a little bit more


1044
00:30:22,346 --> 00:30:22,716
involved.


1045
00:30:23,336 --> 00:30:24,776
In this case, we've done all the


1046
00:30:24,776 --> 00:30:26,146
work for you to spend more time


1047
00:30:26,146 --> 00:30:26,756
on packages.


1048
00:30:27,006 --> 00:30:28,466
So when we go back to the Lunch


1049
00:30:28,466 --> 00:30:30,106
application, our build errors


1050
00:30:30,106 --> 00:30:30,696
are resolved.


1051
00:30:30,696 --> 00:30:32,206
And we're using the DesignTheme


1052
00:30:32,206 --> 00:30:33,906
at Version 2 successfully.


1053
00:30:36,046 --> 00:30:37,316
So our build is now succeeding.


1054
00:30:37,666 --> 00:30:38,886
And we want to add a direct


1055
00:30:38,886 --> 00:30:40,536
dependency between Lunch and


1056
00:30:40,536 --> 00:30:41,396
DesignFont.


1057
00:30:41,986 --> 00:30:43,286
Because now that we're at


1058
00:30:43,546 --> 00:30:45,766
Version 2 of DesignTheme, we can


1059
00:30:45,766 --> 00:30:47,086
add the version requirement we


1060
00:30:47,086 --> 00:30:47,596
wanted to.


1061
00:30:50,056 --> 00:30:51,456
So we go back to Xcode, and we


1062
00:30:51,456 --> 00:30:53,036
go through Add Package workflow.


1063
00:30:53,476 --> 00:30:54,966
We pick DesignFont.


1064
00:30:55,266 --> 00:30:56,576
We select 2 to the next major


1065
00:30:56,576 --> 00:30:57,116
version.


1066
00:30:58,026 --> 00:30:59,216
And now, we can link the


1067
00:30:59,216 --> 00:31:00,516
DesignFont library with our


1068
00:31:00,516 --> 00:31:01,096
application.


1069
00:31:01,606 --> 00:31:02,856
And now inside of the Project


1070
00:31:02,856 --> 00:31:04,416
Editor, we can see that we're


1071
00:31:04,416 --> 00:31:05,936
successfully using DesignFont


1072
00:31:05,936 --> 00:31:06,616
from 2 to the next major


1073
00:31:06,616 --> 00:31:06,926
version.


1074
00:31:10,176 --> 00:31:11,576
Now that we've done this, we can


1075
00:31:11,576 --> 00:31:13,146
now import the content inside of


1076
00:31:13,146 --> 00:31:17,146
DesignFont, successfully use its


1077
00:31:17,146 --> 00:31:19,096
library, and then with a few


1078
00:31:19,096 --> 00:31:20,816
small code changes, to update


1079
00:31:20,816 --> 00:31:21,976
the font of the price.


1080
00:31:25,046 --> 00:31:26,116
So we've now successfully done


1081
00:31:26,116 --> 00:31:27,416
that and resolved our package


1082
00:31:27,416 --> 00:31:27,896
conflict.


1083
00:31:28,506 --> 00:31:29,486
We've updated our package


1084
00:31:29,486 --> 00:31:31,236
versions, and we've successfully


1085
00:31:31,236 --> 00:31:32,756
went over how to debug package


1086
00:31:32,756 --> 00:31:33,956
resolution inside of Xcode.


1087
00:31:37,146 --> 00:31:38,716
So we went over a lot of things


1088
00:31:38,756 --> 00:31:39,016
today.


1089
00:31:40,086 --> 00:31:41,116
We talked about how you can


1090
00:31:41,116 --> 00:31:42,826
start using Open Source packages


1091
00:31:42,826 --> 00:31:44,356
inside of your projects and


1092
00:31:44,386 --> 00:31:45,986
quickly start using its APIs.


1093
00:31:47,496 --> 00:31:48,856
We took a closer look at what a


1094
00:31:48,856 --> 00:31:51,436
package is, what -- and how the


1095
00:31:51,436 --> 00:31:53,226
Package.swift manifest brings it


1096
00:31:53,226 --> 00:31:53,726
all together.


1097
00:31:55,146 --> 00:31:56,966
We went over how Xcode selects


1098
00:31:56,966 --> 00:31:58,766
the versions of packages to use


1099
00:31:58,796 --> 00:32:00,066
inside of your project.


1100
00:32:01,636 --> 00:32:02,756
And then we went over how you


1101
00:32:02,756 --> 00:32:03,776
can keep those versions


1102
00:32:03,776 --> 00:32:05,596
up-to-date and keep getting new


1103
00:32:05,596 --> 00:32:06,736
updates for your packages.


1104
00:32:08,256 --> 00:32:09,386
We then took a look at a more


1105
00:32:09,386 --> 00:32:11,226
advanced example of how to


1106
00:32:11,226 --> 00:32:12,916
resolve package conflicts, which


1107
00:32:12,916 --> 00:32:14,326
taught us how to debug packages,


1108
00:32:14,556 --> 00:32:15,706
and how to update package


1109
00:32:15,746 --> 00:32:15,976
versions.


1110
00:32:18,136 --> 00:32:19,916
There are a ton of packages


1111
00:32:20,046 --> 00:32:21,686
already available on GitHub


1112
00:32:21,756 --> 00:32:22,086
today.


1113
00:32:22,996 --> 00:32:24,366
And we recommend that you will


1114
00:32:24,366 --> 00:32:25,736
look through these packages and


1115
00:32:25,736 --> 00:32:27,076
see where you can incorporate


1116
00:32:27,076 --> 00:32:28,366
them in your existing


1117
00:32:28,366 --> 00:32:28,976
applications.


1118
00:32:31,096 --> 00:32:31,876
But we're not done there.


1119
00:32:32,196 --> 00:32:33,376
There's a session tomorrow that


1120
00:32:33,376 --> 00:32:34,706
my colleagues, Ankit and Boris,


1121
00:32:35,106 --> 00:32:36,276
are presenting on, on how to


1122
00:32:36,276 --> 00:32:37,446
create Swift Packages.


1123
00:32:37,996 --> 00:32:39,466
This session will go into even


1124
00:32:39,466 --> 00:32:41,966
more detail about what a package


1125
00:32:42,016 --> 00:32:45,206
is, how to edit packages, the


1126
00:32:45,206 --> 00:32:47,246
SwiftPM Open Source tool, and


1127
00:32:47,876 --> 00:32:48,666
much, much more.


1128
00:32:49,606 --> 00:32:50,746
This session will help you


1129
00:32:50,746 --> 00:32:52,316
become even more of an expert on


1130
00:32:52,446 --> 00:32:53,786
how packages work inside of


1131
00:32:53,786 --> 00:32:55,826
Xcode, and you won't want to


1132
00:32:55,826 --> 00:32:56,156
miss it.


1133
00:32:56,336 --> 00:32:58,216
And then if you have any more


1134
00:32:58,216 --> 00:33:00,506
questions for the SwiftPM team,


1135
00:33:00,716 --> 00:33:01,956
we'll be at the Swift Open Hours


1136
00:33:01,956 --> 00:33:03,646
Lab right after this session.


1137
00:33:04,186 --> 00:33:05,276
And then also, there are two


1138
00:33:05,276 --> 00:33:06,296
more sessions throughout the


1139
00:33:06,296 --> 00:33:08,316
week, one on Thursday at 12:00


1140
00:33:08,316 --> 00:33:09,716
in the Swift Packages Lab, and


1141
00:33:09,716 --> 00:33:11,096
another of the same name at


1142
00:33:11,096 --> 00:33:11,976
Friday at 12:00.


1143
00:33:12,976 --> 00:33:13,816
Thank you so much for coming


1144
00:33:13,816 --> 00:33:14,596
today, and we hope you have a


1145
00:33:14,596 --> 00:33:15,406
great rest of your week.


1146
00:33:15,556 --> 00:33:15,896
Thank you.


1147
00:33:16,516 --> 00:33:20,500
[ Applause ]

