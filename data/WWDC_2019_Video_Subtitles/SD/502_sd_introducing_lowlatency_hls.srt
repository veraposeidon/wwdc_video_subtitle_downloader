1
00:00:00,506 --> 00:00:04,500
[ Music ]


2
00:00:12,666 --> 00:00:13,676
>> Hey [applause].


3
00:00:14,926 --> 00:00:16,065
Good afternoon.


4
00:00:16,946 --> 00:00:18,136
Good afternoon, everyone.


5
00:00:19,396 --> 00:00:21,976
My name is Roger Pantos and our


6
00:00:22,206 --> 00:00:24,566
HLS session this year is all


7
00:00:24,566 --> 00:00:26,816
focused on Low-Latency.


8
00:00:27,546 --> 00:00:32,006
So, first of all, what is this


9
00:00:32,006 --> 00:00:33,416
latency thing we're talking


10
00:00:33,416 --> 00:00:35,026
about when we say low-latency?


11
00:00:36,606 --> 00:00:39,796
Well, in this context, it refers


12
00:00:39,796 --> 00:00:41,786
to the amount of time from when


13
00:00:41,906 --> 00:00:43,256
a camera records a frame of


14
00:00:43,256 --> 00:00:44,856
video or hits your production


15
00:00:44,856 --> 00:00:45,546
backend.


16
00:00:46,036 --> 00:00:48,296
And when your user, sees that


17
00:00:48,296 --> 00:00:50,926
frame at home watching on their


18
00:00:50,926 --> 00:00:52,426
iPad or Apple TV.


19
00:00:53,386 --> 00:00:56,476
And shortening that duration,


20
00:00:56,476 --> 00:00:59,856
keeping that small is crucial to


21
00:00:59,856 --> 00:01:01,196
certain types of content.


22
00:01:02,646 --> 00:01:04,666
Now, the one we're probably most


23
00:01:04,666 --> 00:01:07,146
familiar with are live sports.


24
00:01:07,946 --> 00:01:09,796
But it's also important for


25
00:01:09,796 --> 00:01:12,116
late-breaking news, for things


26
00:01:12,116 --> 00:01:15,466
like live streaming of games,


27
00:01:16,066 --> 00:01:17,936
and even for things like the


28
00:01:17,936 --> 00:01:18,736
Oscars.


29
00:01:19,106 --> 00:01:21,366
Really anything where there's a


30
00:01:21,366 --> 00:01:23,456
lot of people watching the same


31
00:01:23,456 --> 00:01:25,296
video at the same time.


32
00:01:25,706 --> 00:01:27,166
And usually, there's a social


33
00:01:27,166 --> 00:01:28,076
component to it.


34
00:01:28,816 --> 00:01:31,926
So, how low does that latency


35
00:01:31,926 --> 00:01:33,886
have to be to provide a good


36
00:01:33,886 --> 00:01:35,036
user experience?


37
00:01:36,556 --> 00:01:39,606
Well, the gold standard today is


38
00:01:39,966 --> 00:01:42,956
around two to eight seconds.


39
00:01:43,436 --> 00:01:45,156
And that's what's provided by


40
00:01:45,516 --> 00:01:47,556
the current suite of television


41
00:01:47,556 --> 00:01:49,186
broadcasters, cable satellite


42
00:01:49,186 --> 00:01:49,736
television.


43
00:01:50,646 --> 00:01:51,956
And so, when we design


44
00:01:51,956 --> 00:01:54,186
Low-Latency HLS, we set


45
00:01:54,186 --> 00:01:57,406
ourselves a target of one to two


46
00:01:57,406 --> 00:02:00,366
seconds delay from live at scale


47
00:02:00,366 --> 00:02:01,776
over the public internet with


48
00:02:01,776 --> 00:02:03,016
any kind of reasonable round


49
00:02:03,016 --> 00:02:03,496
trip time.


50
00:02:04,766 --> 00:02:06,676
Now, we did that without


51
00:02:06,676 --> 00:02:09,786
sacrificing anything, any of the


52
00:02:09,786 --> 00:02:12,386
features that make HLS so


53
00:02:12,386 --> 00:02:12,906
compelling.


54
00:02:13,556 --> 00:02:16,366
So we still adapt the quality to


55
00:02:16,366 --> 00:02:18,216
match the user's network speed.


56
00:02:18,696 --> 00:02:20,106
We still allow you to protect


57
00:02:20,106 --> 00:02:20,786
your content.


58
00:02:21,036 --> 00:02:23,176
We still allow you to insert ads


59
00:02:23,476 --> 00:02:25,876
and provide program boundary and


60
00:02:25,876 --> 00:02:28,386
other metadata.


61
00:02:28,386 --> 00:02:31,246
We still enable you to scale


62
00:02:31,566 --> 00:02:33,606
your broadcasts to hundreds of


63
00:02:33,606 --> 00:02:36,106
thousands of users using


64
00:02:36,106 --> 00:02:39,546
commodity CDNs cost effectively.


65
00:02:39,546 --> 00:02:43,726
And we're making sure that these


66
00:02:43,726 --> 00:02:45,076
streams are backward compatible.


67
00:02:45,766 --> 00:02:47,866
So you can still see them at


68
00:02:47,866 --> 00:02:49,656
regular latency on older


69
00:02:49,656 --> 00:02:50,306
clients.


70
00:02:51,526 --> 00:02:54,436
So, how do we do all that?


71
00:02:54,946 --> 00:02:58,586
Well, to understand that, first,


72
00:02:58,586 --> 00:03:01,876
we have to go back to regular


73
00:03:01,876 --> 00:03:03,436
HLS and see where we're starting


74
00:03:03,436 --> 00:03:03,766
from.


75
00:03:05,906 --> 00:03:09,336
So, first of all, from its


76
00:03:09,336 --> 00:03:11,836
inception, HLS was designed to


77
00:03:11,836 --> 00:03:14,076
be a simple and robust protocol.


78
00:03:14,496 --> 00:03:15,686
And that has been great.


79
00:03:16,466 --> 00:03:19,246
And in fact, if your content


80
00:03:19,246 --> 00:03:21,706
doesn't fall within the bounds


81
00:03:21,706 --> 00:03:23,476
of those, you know, types of


82
00:03:23,476 --> 00:03:24,636
content we talked about earlier,


83
00:03:24,856 --> 00:03:26,496
you should keep using regular


84
00:03:26,496 --> 00:03:27,466
HLS and it's going to work great


85
00:03:27,466 --> 00:03:27,876
for you.


86
00:03:28,856 --> 00:03:31,436
But that simplicity comes at a


87
00:03:31,436 --> 00:03:32,006
cost.


88
00:03:32,256 --> 00:03:33,676
When you're watching sports, for


89
00:03:33,676 --> 00:03:35,806
instance, the manifestation of


90
00:03:35,806 --> 00:03:37,826
that cost is often that you hear


91
00:03:37,826 --> 00:03:39,196
about the goal through your


92
00:03:39,196 --> 00:03:41,296
apartment wall before you see it


93
00:03:41,296 --> 00:03:42,306
on your Apple TV.


94
00:03:43,956 --> 00:03:45,016
So why is that?


95
00:03:45,886 --> 00:03:47,946
Well, to understand that, let's


96
00:03:47,946 --> 00:03:49,176
take a look at what has to


97
00:03:49,176 --> 00:03:52,686
happen with regular HLS in order


98
00:03:52,686 --> 00:03:55,406
to get a particular frame from


99
00:03:55,406 --> 00:03:57,626
your production backend to user


100
00:03:57,626 --> 00:03:57,996
at home.


101
00:03:58,896 --> 00:04:00,056
We start with the frame.


102
00:04:00,336 --> 00:04:01,356
And the first thing we need to


103
00:04:01,356 --> 00:04:03,716
do is encode it and put it into


104
00:04:03,716 --> 00:04:04,306
a segment.


105
00:04:04,756 --> 00:04:06,176
Now, we recommend 6-second


106
00:04:06,176 --> 00:04:06,776
segments.


107
00:04:07,176 --> 00:04:09,226
But that does mean that because


108
00:04:09,226 --> 00:04:11,246
we're encoding in real time, its


109
00:04:11,246 --> 00:04:12,816
six seconds before you even have


110
00:04:12,816 --> 00:04:14,016
anything that you can put on


111
00:04:14,106 --> 00:04:14,586
your CDN.


112
00:04:15,806 --> 00:04:17,196
After we've got that segment,


113
00:04:17,196 --> 00:04:18,866
the client has to discover that


114
00:04:18,995 --> 00:04:21,286
it exists.


115
00:04:21,286 --> 00:04:23,546
HLS today uses the polling


116
00:04:23,546 --> 00:04:24,816
mechanism, which means that


117
00:04:24,816 --> 00:04:26,116
every now and then the client


118
00:04:26,406 --> 00:04:27,616
checks in with the server for


119
00:04:27,616 --> 00:04:29,016
latest copy of the playlist to


120
00:04:29,016 --> 00:04:29,976
see if there's anything new.


121
00:04:31,106 --> 00:04:33,166
Now in the best case, the client


122
00:04:33,166 --> 00:04:36,016
might say, check in right after


123
00:04:36,016 --> 00:04:37,946
the server has put the latest


124
00:04:37,946 --> 00:04:39,216
segment into the playlist.


125
00:04:39,406 --> 00:04:41,316
That's great, but often we don't


126
00:04:41,316 --> 00:04:42,576
fall into that best case.


127
00:04:42,576 --> 00:04:44,676
And in fact, in some cases, it


128
00:04:44,676 --> 00:04:45,886
can be almost another six


129
00:04:45,886 --> 00:04:47,806
seconds before the client even


130
00:04:47,806 --> 00:04:49,316
finds out that there's a new


131
00:04:49,316 --> 00:04:50,026
segment there.


132
00:04:51,576 --> 00:04:54,206
After it does, and gets the new


133
00:04:54,206 --> 00:04:55,986
playlist back, it then has to


134
00:04:55,986 --> 00:04:57,026
turn around and make another


135
00:04:57,026 --> 00:04:58,616
request to actually get the


136
00:04:58,616 --> 00:04:59,536
segment itself.


137
00:04:59,536 --> 00:05:01,806
And remember that each of these


138
00:05:01,806 --> 00:05:03,716
requests takes a round trip time


139
00:05:03,716 --> 00:05:04,316
on the network.


140
00:05:04,996 --> 00:05:06,066
And on some networks,


141
00:05:06,066 --> 00:05:07,996
particularly cellular, this can


142
00:05:07,996 --> 00:05:08,656
be in the hundreds of


143
00:05:08,656 --> 00:05:09,286
milliseconds.


144
00:05:09,326 --> 00:05:11,496
It's not insignificant.


145
00:05:12,366 --> 00:05:14,046
So anyway, after it does all


146
00:05:14,046 --> 00:05:15,946
that, then the segment can start


147
00:05:15,946 --> 00:05:17,006
flowing to the client.


148
00:05:17,816 --> 00:05:19,646
Then once it gets enough, it can


149
00:05:19,646 --> 00:05:20,846
present that frame of video.


150
00:05:21,406 --> 00:05:22,626
Now, in this example, we're


151
00:05:22,626 --> 00:05:24,496
already up in the 12-second


152
00:05:24,496 --> 00:05:24,956
region.


153
00:05:25,496 --> 00:05:27,176
But if you're delivering your


154
00:05:27,176 --> 00:05:30,116
content over a CDN, and almost


155
00:05:30,116 --> 00:05:32,946
all of us do, then it can get


156
00:05:32,946 --> 00:05:34,586
even further away from live.


157
00:05:35,736 --> 00:05:37,536
And the reason for that is


158
00:05:37,536 --> 00:05:40,986
because of the way that regular


159
00:05:41,076 --> 00:05:42,516
HLS interacts with CDNs.


160
00:05:42,516 --> 00:05:44,096
And let's take a look at that.


161
00:05:45,346 --> 00:05:48,176
So imagine that you've got your


162
00:05:48,776 --> 00:05:49,366
HLS Stream.


163
00:05:49,366 --> 00:05:50,246
You're authoring it to your


164
00:05:50,246 --> 00:05:51,606
origin on the right.


165
00:05:51,836 --> 00:05:53,746
In a particular time, it's


166
00:05:53,746 --> 00:05:54,926
placed a playlist up there.


167
00:05:54,926 --> 00:05:56,566
It has three segments in it.


168
00:05:56,916 --> 00:05:58,006
Now, the first client that


169
00:05:58,006 --> 00:05:59,476
checks in wants to find the


170
00:05:59,476 --> 00:06:00,676
latest greatest media.


171
00:06:01,546 --> 00:06:03,696
If the CDN edge server that it's


172
00:06:03,696 --> 00:06:06,186
talking to hasn't cached any of


173
00:06:06,186 --> 00:06:07,876
that stuff yet, he's actually in


174
00:06:07,876 --> 00:06:09,156
good shape because he's going to


175
00:06:09,216 --> 00:06:10,336
ask for a playlist.


176
00:06:10,716 --> 00:06:11,856
The CDN is going to get it from


177
00:06:11,856 --> 00:06:13,296
the origin, get the latest


178
00:06:13,296 --> 00:06:14,316
versions, sent it right to the


179
00:06:14,316 --> 00:06:14,626
client.


180
00:06:14,666 --> 00:06:15,796
Client 1 is in good shape.


181
00:06:16,456 --> 00:06:18,886
The problem comes about a second


182
00:06:18,886 --> 00:06:21,356
or two later when on the origin,


183
00:06:21,916 --> 00:06:23,926
we get a new segment in town and


184
00:06:23,926 --> 00:06:26,226
the playlist is updated with now


185
00:06:26,226 --> 00:06:28,356
containing segments 1 through 4.


186
00:06:29,356 --> 00:06:31,096
What happens after that?


187
00:06:31,096 --> 00:06:32,766
When client 2 comes in and wants


188
00:06:32,766 --> 00:06:34,216
to find out again, "OK, what's


189
00:06:34,216 --> 00:06:35,236
the latest content?"


190
00:06:36,016 --> 00:06:37,496
Well, the playlist he's going to


191
00:06:37,496 --> 00:06:39,176
get back from that edge is the


192
00:06:39,176 --> 00:06:41,786
cached playlist that has only


193
00:06:41,786 --> 00:06:42,776
segments 1 through 3.


194
00:06:42,776 --> 00:06:45,756
He can't even discover segment 4


195
00:06:46,036 --> 00:06:48,596
because the CDN has served him a


196
00:06:48,596 --> 00:06:50,226
cached version of that playlist.


197
00:06:51,576 --> 00:06:54,246
Now, why does the CDN do that?


198
00:06:54,246 --> 00:06:57,066
Why it can just serve at the


199
00:06:57,066 --> 00:06:58,206
most recent version?


200
00:06:58,946 --> 00:07:00,906
Well, the problem is that the


201
00:07:01,036 --> 00:07:03,606
CDN has no way of learning that


202
00:07:03,606 --> 00:07:04,946
that playlist has been updated


203
00:07:04,946 --> 00:07:05,646
on the origin.


204
00:07:06,506 --> 00:07:08,306
And if it were to go in and


205
00:07:08,306 --> 00:07:10,046
check with the origin, every


206
00:07:10,046 --> 00:07:12,276
time, some random client came in


207
00:07:12,276 --> 00:07:13,086
and said, "Hey, what's the


208
00:07:13,086 --> 00:07:13,906
latest playlist?"


209
00:07:14,156 --> 00:07:15,686
It would melt down the origin.


210
00:07:16,576 --> 00:07:18,956
So CDNs have to cache for a


211
00:07:18,956 --> 00:07:19,686
period of time.


212
00:07:19,686 --> 00:07:20,776
It's called the time to live.


213
00:07:21,946 --> 00:07:24,396
And the longer that time to live


214
00:07:24,396 --> 00:07:26,916
is, the longer client is


215
00:07:26,916 --> 00:07:27,476
checking in.


216
00:07:27,476 --> 00:07:28,866
We'll see that outdated version


217
00:07:28,866 --> 00:07:30,176
of the playlist and that


218
00:07:30,216 --> 00:07:32,336
stretches our delay from live by


219
00:07:32,336 --> 00:07:33,096
that much more.


220
00:07:34,806 --> 00:07:38,836
So, all these problems can be


221
00:07:38,836 --> 00:07:39,386
fixed.


222
00:07:40,766 --> 00:07:43,256
But in deciding how we want to


223
00:07:43,256 --> 00:07:45,926
approach that fix, there are a


224
00:07:45,986 --> 00:07:47,976
few more factors that we need to


225
00:07:47,976 --> 00:07:48,486
consider.


226
00:07:49,766 --> 00:07:53,336
The first is that HTTP is still


227
00:07:53,596 --> 00:07:55,986
the best way to deliver the same


228
00:07:55,986 --> 00:07:58,826
media to hundreds of thousands


229
00:07:58,826 --> 00:08:01,256
people over the internet at the


230
00:08:01,256 --> 00:08:02,006
same time.


231
00:08:02,476 --> 00:08:04,156
So we should stick with HTTP.


232
00:08:04,786 --> 00:08:08,256
But doing that means that we are


233
00:08:08,256 --> 00:08:10,566
stuck with the HTTP delivery


234
00:08:10,566 --> 00:08:10,926
model.


235
00:08:11,266 --> 00:08:14,086
And that is of distributing


236
00:08:14,086 --> 00:08:15,796
discrete segments, discrete


237
00:08:16,096 --> 00:08:18,746
chunks of resources to clients.


238
00:08:19,236 --> 00:08:21,596
And if it's going to take us six


239
00:08:21,596 --> 00:08:23,206
seconds to produce that chunk,


240
00:08:23,846 --> 00:08:25,016
then we've already missed our


241
00:08:25,016 --> 00:08:25,686
deadlines.


242
00:08:26,306 --> 00:08:27,276
If we're going to hit that


243
00:08:27,276 --> 00:08:29,356
deadline of only a second away


244
00:08:29,356 --> 00:08:32,155
from live, then the things we're


245
00:08:32,155 --> 00:08:33,816
distributing over HTTP have to


246
00:08:33,816 --> 00:08:36,336
shrink to become in some cases


247
00:08:36,566 --> 00:08:37,216
much shorter.


248
00:08:38,176 --> 00:08:40,046
The next thing we have to sort


249
00:08:40,046 --> 00:08:42,446
of grapple with is that now and


250
00:08:42,446 --> 00:08:44,996
for the foreseeable future CDNs


251
00:08:45,146 --> 00:08:47,156
are essential to helping us


252
00:08:47,156 --> 00:08:49,716
scale to global sized audiences.


253
00:08:50,706 --> 00:08:53,526
But CDNs, at the end of the day,


254
00:08:53,886 --> 00:08:55,786
are essentially HTTP proxy


255
00:08:55,786 --> 00:08:57,316
caches and they're going to do


256
00:08:57,316 --> 00:08:58,156
what caches do.


257
00:08:58,786 --> 00:09:00,256
And we have to work with that


258
00:09:00,796 --> 00:09:02,426
not against it.


259
00:09:02,916 --> 00:09:06,046
The final thing is that when


260
00:09:06,346 --> 00:09:07,806
we're playing so close to the


261
00:09:07,806 --> 00:09:09,656
live edge, we can only buffer a


262
00:09:09,656 --> 00:09:10,906
tiny little amount ahead because


263
00:09:10,906 --> 00:09:11,776
that's all we've got.


264
00:09:12,766 --> 00:09:14,776
And so, if we have to do


265
00:09:14,776 --> 00:09:16,706
something like switch to a


266
00:09:16,706 --> 00:09:18,606
different bit rate, then we've


267
00:09:18,606 --> 00:09:20,556
only got like we don't have 10


268
00:09:20,556 --> 00:09:21,896
seconds to do that before we


269
00:09:21,896 --> 00:09:22,396
stall.


270
00:09:22,766 --> 00:09:24,806
We might only have less than a


271
00:09:24,806 --> 00:09:25,296
second.


272
00:09:25,706 --> 00:09:27,086
And so, we have to make sure


273
00:09:27,376 --> 00:09:29,356
that the mechanics of switching


274
00:09:29,356 --> 00:09:30,916
are as efficient as they can be


275
00:09:31,206 --> 00:09:32,306
because we have this very short


276
00:09:32,306 --> 00:09:32,576
runway.


277
00:09:33,866 --> 00:09:39,256
So, we looked at the entire HLS


278
00:09:39,696 --> 00:09:42,466
delivery model, soup to nuts.


279
00:09:43,056 --> 00:09:46,236
And we identified five big


280
00:09:46,546 --> 00:09:49,086
changes that we needed to make


281
00:09:49,406 --> 00:09:52,206
to hit this target of one to two


282
00:09:52,206 --> 00:09:54,006
seconds of delay from live.


283
00:09:55,086 --> 00:09:56,206
The first thing we're going to


284
00:09:56,206 --> 00:09:59,436
talk about is that we need a way


285
00:09:59,686 --> 00:10:02,596
to get that media on to the


286
00:10:02,596 --> 00:10:05,936
server shorter than that six


287
00:10:06,456 --> 00:10:08,456
seconds.


288
00:10:10,076 --> 00:10:11,016
And we call that reducing


289
00:10:11,016 --> 00:10:11,536
publishing latency.


290
00:10:11,536 --> 00:10:12,946
So the way we're going to do it,


291
00:10:12,946 --> 00:10:13,826
is we're going to allow the


292
00:10:13,826 --> 00:10:15,366
server to publish small parts of


293
00:10:15,366 --> 00:10:17,236
the main segment before the main


294
00:10:17,236 --> 00:10:18,356
segment itself is ready.


295
00:10:18,956 --> 00:10:20,426
So we can deliver those smaller


296
00:10:20,426 --> 00:10:21,206
parts early.


297
00:10:22,136 --> 00:10:24,266
The second thing we're doing is


298
00:10:24,326 --> 00:10:26,876
we're optimizing how clients


299
00:10:26,906 --> 00:10:28,856
discover segments, so that they


300
00:10:28,856 --> 00:10:29,876
can do it more quickly.


301
00:10:30,056 --> 00:10:32,096
And the way we're doing that is


302
00:10:32,096 --> 00:10:35,006
we're changing how the client


303
00:10:35,136 --> 00:10:36,386
updates its playlist.


304
00:10:37,236 --> 00:10:38,876
We're allowing it to ask for a


305
00:10:38,876 --> 00:10:40,896
particular playlist update in


306
00:10:40,896 --> 00:10:42,516
advance before it's actually


307
00:10:42,516 --> 00:10:43,336
ready on the server.


308
00:10:43,996 --> 00:10:45,896
The server will then hold on to


309
00:10:45,896 --> 00:10:47,376
that request keeping an eye on


310
00:10:47,376 --> 00:10:49,466
the playlist until it updates


311
00:10:49,706 --> 00:10:50,686
with that next segment.


312
00:10:50,906 --> 00:10:52,536
At that point, you will


313
00:10:52,536 --> 00:10:53,906
immediately send the playlist


314
00:10:54,326 --> 00:10:55,756
back to the client.


315
00:10:57,066 --> 00:10:58,376
The client will find out about


316
00:10:58,376 --> 00:11:01,016
it in less than round trip time.


317
00:11:01,756 --> 00:11:04,086
And in this model, each


318
00:11:04,086 --> 00:11:05,696
individual playlist update


319
00:11:05,936 --> 00:11:07,466
actually has a different URL.


320
00:11:08,376 --> 00:11:09,966
And this provides a second


321
00:11:09,966 --> 00:11:13,536
advantage, which is that it


322
00:11:13,536 --> 00:11:15,456
makes caching of these playlist


323
00:11:15,456 --> 00:11:16,856
updates much more efficient


324
00:11:17,576 --> 00:11:19,476
because with a different URL for


325
00:11:19,476 --> 00:11:21,556
every update, every update looks


326
00:11:21,556 --> 00:11:23,586
like a separate cache entity.


327
00:11:24,426 --> 00:11:26,756
So what happens now is when


328
00:11:26,756 --> 00:11:28,386
client 1 wants a particular


329
00:11:28,386 --> 00:11:28,796
update.


330
00:11:29,146 --> 00:11:30,436
It'll ask for it.


331
00:11:30,476 --> 00:11:31,626
The CDN says, "I've never heard


332
00:11:31,626 --> 00:11:31,936
of that."


333
00:11:31,936 --> 00:11:32,926
I'm going to go right over the


334
00:11:32,926 --> 00:11:34,456
origin, the origin is going to


335
00:11:34,456 --> 00:11:35,096
say, "Well, that's because I


336
00:11:35,096 --> 00:11:35,826
haven't built it yet."


337
00:11:36,136 --> 00:11:37,246
So now, it chugs away.


338
00:11:37,576 --> 00:11:39,476
Once it has it update, it hands


339
00:11:39,476 --> 00:11:40,526
it to the CDN which hands it


340
00:11:40,526 --> 00:11:41,336
right to the client.


341
00:11:42,306 --> 00:11:44,116
Next client comes in, he says,


342
00:11:44,116 --> 00:11:45,096
"I want the same update."


343
00:11:45,706 --> 00:11:47,096
The CDN identifies that


344
00:11:47,166 --> 00:11:49,076
positively using the URL and


345
00:11:49,076 --> 00:11:49,736
says, "Here you go."


346
00:11:49,916 --> 00:11:51,656
Every subsequent client who


347
00:11:51,656 --> 00:11:53,876
asked for that update will get


348
00:11:53,876 --> 00:11:55,356
it served immediately out of the


349
00:11:55,356 --> 00:11:56,266
CDN cache.


350
00:11:56,946 --> 00:11:59,976
But the next time, the first


351
00:11:59,976 --> 00:12:01,576
client or any other client wants


352
00:12:01,576 --> 00:12:04,596
the update after that, the URL


353
00:12:04,596 --> 00:12:06,306
that sends the CDN is a


354
00:12:06,306 --> 00:12:07,106
different one.


355
00:12:07,586 --> 00:12:09,326
And so, this the CDN immediately


356
00:12:09,326 --> 00:12:10,846
knows he doesn't have it cache.


357
00:12:10,846 --> 00:12:11,906
He doesn't hand out something


358
00:12:11,906 --> 00:12:12,396
stale.


359
00:12:12,726 --> 00:12:14,016
Instead, he goes right back to


360
00:12:14,016 --> 00:12:14,416
the origin.


361
00:12:14,416 --> 00:12:15,086
The origin says, "Well, I


362
00:12:15,086 --> 00:12:16,376
haven't built that yet."


363
00:12:16,376 --> 00:12:19,106
And then, once it is built, it


364
00:12:19,106 --> 00:12:21,036
hands it back to the CDN and is


365
00:12:21,036 --> 00:12:23,666
sent over to client.


366
00:12:25,376 --> 00:12:29,876
So, these new playlist update


367
00:12:29,876 --> 00:12:32,686
requests are inherently cache


368
00:12:32,756 --> 00:12:33,276
busting.


369
00:12:33,746 --> 00:12:35,156
And that makes caching work


370
00:12:35,206 --> 00:12:37,416
better overall on the CDN.


371
00:12:38,896 --> 00:12:40,936
Now, the third thing we're doing


372
00:12:41,696 --> 00:12:44,656
is we're eliminating that extra


373
00:12:44,656 --> 00:12:45,246
round trip.


374
00:12:45,566 --> 00:12:46,976
After you discover a segment to


375
00:12:46,976 --> 00:12:47,926
go off and actually get the


376
00:12:47,926 --> 00:12:48,776
segment itself.


377
00:12:49,486 --> 00:12:50,816
And the way we're doing that is


378
00:12:50,816 --> 00:12:51,576
to use Push.


379
00:12:52,446 --> 00:12:54,416
So, when the client asks for the


380
00:12:54,416 --> 00:12:56,786
next playlist update, it's going


381
00:12:56,786 --> 00:12:57,656
to tell the server.


382
00:12:57,886 --> 00:13:00,296
And by the way, when you get


383
00:13:00,296 --> 00:13:01,566
that playlist update that has


384
00:13:01,566 --> 00:13:02,536
the next segment that I don't


385
00:13:02,536 --> 00:13:05,106
know about then I want you to--


386
00:13:05,346 --> 00:13:06,406
when you return me that


387
00:13:06,466 --> 00:13:07,896
playlist, I want you to Push


388
00:13:07,896 --> 00:13:09,056
that segment to me right away.


389
00:13:09,056 --> 00:13:11,056
And that way, I don't have to


390
00:13:11,296 --> 00:13:12,466
turn around and make a second


391
00:13:12,466 --> 00:13:13,506
round trip.


392
00:13:14,956 --> 00:13:17,566
The fourth thing we're doing is


393
00:13:17,566 --> 00:13:20,016
we are addressing the cost of


394
00:13:20,016 --> 00:13:21,986
transferring playlists, over and


395
00:13:21,986 --> 00:13:22,576
over again.


396
00:13:23,026 --> 00:13:24,196
And the basic approach we're


397
00:13:24,196 --> 00:13:26,366
taking is using Delta updates.


398
00:13:26,986 --> 00:13:29,106
So the way that works is the


399
00:13:29,106 --> 00:13:30,876
first time a client asks for a


400
00:13:30,876 --> 00:13:32,596
particular media playlist, it


401
00:13:32,596 --> 00:13:33,586
gets the whole thing back.


402
00:13:34,296 --> 00:13:36,706
After that though, it has the


403
00:13:36,706 --> 00:13:38,076
vast majority of the playlist.


404
00:13:38,306 --> 00:13:40,256
It's only really interested in


405
00:13:40,256 --> 00:13:42,006
knowing about the part of the


406
00:13:42,006 --> 00:13:43,356
end that's changed.


407
00:13:43,806 --> 00:13:47,266
And so, after that, the next


408
00:13:47,266 --> 00:13:48,416
time and it asked one it says,


409
00:13:48,736 --> 00:13:49,976
"I want a playlist update that's


410
00:13:49,976 --> 00:13:50,796
a Delta update."


411
00:13:51,246 --> 00:13:53,356
And the thing that comes back is


412
00:13:53,356 --> 00:13:54,856
a much smaller chunk of data


413
00:13:55,226 --> 00:13:56,986
that only contains the stuff


414
00:13:57,266 --> 00:13:58,516
that has changed most recently


415
00:13:58,516 --> 00:13:59,776
at the live digital playlist.


416
00:13:59,776 --> 00:14:01,576
And these updates will often fit


417
00:14:01,626 --> 00:14:03,506
into a single packet, a single


418
00:14:03,506 --> 00:14:04,316
empty unit of data.


419
00:14:04,586 --> 00:14:05,866
So they're much, much more


420
00:14:05,866 --> 00:14:07,496
efficient for every subsequent


421
00:14:07,496 --> 00:14:07,806
update.


422
00:14:08,366 --> 00:14:12,336
Now, the fifth change is that


423
00:14:12,576 --> 00:14:13,916
since we now know that these


424
00:14:13,916 --> 00:14:15,556
playlist updates are pretty up


425
00:14:15,556 --> 00:14:17,486
to date, we can have them carry


426
00:14:17,486 --> 00:14:19,736
some information with them that


427
00:14:19,736 --> 00:14:21,366
helps us switch to other bit


428
00:14:21,366 --> 00:14:22,456
rate tiers faster.


429
00:14:23,746 --> 00:14:25,096
So in other words, imagine we


430
00:14:25,096 --> 00:14:26,506
have to bit rates on our CDN


431
00:14:26,506 --> 00:14:28,406
here, and the clients playing


432
00:14:28,406 --> 00:14:29,036
the first one.


433
00:14:30,266 --> 00:14:32,676
When it asks for an update and


434
00:14:32,676 --> 00:14:34,546
it receives that most recent


435
00:14:34,546 --> 00:14:36,426
version of the one megabit


436
00:14:36,426 --> 00:14:38,296
playlist, it can carry other


437
00:14:38,296 --> 00:14:40,556
information such that if it


438
00:14:40,556 --> 00:14:41,966
decides it needs to switch the


439
00:14:41,966 --> 00:14:43,716
two megabit one, it can go


440
00:14:43,716 --> 00:14:45,226
directly to the most recent


441
00:14:45,226 --> 00:14:46,736
version of the two megabit


442
00:14:46,736 --> 00:14:47,206
playlist.


443
00:14:47,466 --> 00:14:49,056
And this may make switching bit


444
00:14:49,056 --> 00:14:50,376
rates more efficient.


445
00:14:51,556 --> 00:14:56,196
So five changes, we're reducing


446
00:14:56,196 --> 00:14:57,446
the publishing latency, putting


447
00:14:57,446 --> 00:14:59,686
our media on the CDN, optimizing


448
00:14:59,686 --> 00:15:01,456
segment discovery, we're


449
00:15:01,456 --> 00:15:03,516
eliminating round trips, we're


450
00:15:03,516 --> 00:15:04,746
reducing the overhead of


451
00:15:04,746 --> 00:15:07,066
transferring playlist, and we're


452
00:15:07,066 --> 00:15:08,246
making it possible switch to


453
00:15:08,246 --> 00:15:08,886
yours quickly.


454
00:15:09,646 --> 00:15:10,816
Now, let's take a look into the


455
00:15:10,816 --> 00:15:14,166
details of all of those.


456
00:15:14,796 --> 00:15:16,936
So, to make all of the stuff


457
00:15:16,936 --> 00:15:21,106
work, the client needs a way to


458
00:15:21,106 --> 00:15:23,836
tell the server that it wants to


459
00:15:23,836 --> 00:15:25,296
make use of these new features


460
00:15:25,296 --> 00:15:27,186
like playlists Delta updates or


461
00:15:27,186 --> 00:15:28,316
blocking playlist reload.


462
00:15:28,896 --> 00:15:32,666
And the way it does that is


463
00:15:32,666 --> 00:15:34,986
using something we call the HLS


464
00:15:35,046 --> 00:15:36,816
Origin API.


465
00:15:37,756 --> 00:15:39,356
The way that works is that the


466
00:15:39,356 --> 00:15:40,556
services themselves are


467
00:15:40,556 --> 00:15:42,596
advertised by the server using a


468
00:15:42,596 --> 00:15:44,386
new tag, the server control tag.


469
00:15:45,346 --> 00:15:46,876
When the client discovers that


470
00:15:46,876 --> 00:15:48,616
they're available, it makes use


471
00:15:48,616 --> 00:15:50,566
of them by sending the server a


472
00:15:50,566 --> 00:15:52,566
small number of directives that


473
00:15:52,566 --> 00:15:55,036
are carried as query parameters


474
00:15:55,226 --> 00:15:56,576
in the get request for the


475
00:15:56,576 --> 00:15:57,296
playlist.


476
00:15:58,266 --> 00:15:59,636
So it looks something like this.


477
00:16:00,886 --> 00:16:05,246
Now, this is the first time that


478
00:16:05,246 --> 00:16:06,836
we've specified query parameters


479
00:16:06,836 --> 00:16:08,236
as part of the HLS.


480
00:16:08,996 --> 00:16:11,786
And so, we are going forward


481
00:16:11,786 --> 00:16:14,076
reserving all query parameters


482
00:16:14,076 --> 00:16:15,916
that start with underscore HLS


483
00:16:16,206 --> 00:16:18,666
on playlist URLs for the use of


484
00:16:18,666 --> 00:16:19,246
the protocol.


485
00:16:20,256 --> 00:16:21,996
Another thing we're doing is


486
00:16:21,996 --> 00:16:23,726
we're making sure that for all


487
00:16:23,726 --> 00:16:26,196
the clients that those query


488
00:16:26,196 --> 00:16:27,266
parameters appear in a


489
00:16:27,266 --> 00:16:29,306
deterministic order in the URL


490
00:16:29,766 --> 00:16:31,766
so that the CDNs don't end up


491
00:16:31,806 --> 00:16:33,836
caching multiple copies of what


492
00:16:33,836 --> 00:16:35,366
are effectively the same


493
00:16:35,366 --> 00:16:35,936
request.


494
00:16:36,856 --> 00:16:39,686
So, now let's go through each of


495
00:16:39,686 --> 00:16:41,676
those five changes a little bit


496
00:16:41,676 --> 00:16:42,566
more detail.


497
00:16:44,116 --> 00:16:46,396
The first is to address this


498
00:16:46,396 --> 00:16:47,896
notion-- is to address the


499
00:16:47,896 --> 00:16:49,426
reduction of publishing latency.


500
00:16:49,426 --> 00:16:50,816
And so, we're introducing a


501
00:16:50,816 --> 00:16:53,786
notion of a partial segment to


502
00:16:53,836 --> 00:16:54,366
HLS.


503
00:16:54,666 --> 00:16:56,216
And we call these things Parts


504
00:16:56,216 --> 00:16:56,636
for short.


505
00:16:57,916 --> 00:16:59,816
So, a partial segment is


506
00:16:59,816 --> 00:17:01,346
essentially just a subset of the


507
00:17:01,346 --> 00:17:03,456
regular segment containing a


508
00:17:03,456 --> 00:17:05,616
subset of the media within that


509
00:17:05,886 --> 00:17:06,675
parent segment.


510
00:17:07,866 --> 00:17:11,486
And CMAF already has a name for


511
00:17:11,486 --> 00:17:12,736
this kind of thing.


512
00:17:12,736 --> 00:17:14,516
They call them a CMAF chunk for


513
00:17:14,665 --> 00:17:15,675
FMP4 content.


514
00:17:16,086 --> 00:17:18,445
And so, you can use CMAF chunks


515
00:17:18,445 --> 00:17:20,396
as your partial segments in HLS.


516
00:17:20,796 --> 00:17:22,715
You can also use little bits of


517
00:17:22,715 --> 00:17:24,826
transport stream or any other of


518
00:17:24,876 --> 00:17:27,066
the defined HLS segment formats


519
00:17:27,286 --> 00:17:28,486
for your partial segments.


520
00:17:30,276 --> 00:17:31,786
The main thing about them is


521
00:17:31,786 --> 00:17:32,526
that they're short.


522
00:17:33,106 --> 00:17:34,596
They can be less than a full GOP


523
00:17:34,596 --> 00:17:35,116
for instance.


524
00:17:35,116 --> 00:17:36,856
So that means you can have half


525
00:17:36,856 --> 00:17:38,536
second partial segments and


526
00:17:38,536 --> 00:17:40,306
still keep your two-second GOPs.


527
00:17:42,816 --> 00:17:44,266
Every time you create a new


528
00:17:44,266 --> 00:17:46,176
partial segment, it is added to


529
00:17:46,176 --> 00:17:46,786
the playlist.


530
00:17:47,286 --> 00:17:48,926
And that means that if you've


531
00:17:48,926 --> 00:17:50,586
got half second partial segments


532
00:17:50,586 --> 00:17:52,976
for example, then you can


533
00:17:52,976 --> 00:17:55,586
publish content to your CDN


534
00:17:56,186 --> 00:17:57,796
about half a second after it


535
00:17:57,796 --> 00:17:59,036
hits your production backend.


536
00:17:59,276 --> 00:18:00,716
That's how far it reduces your


537
00:18:00,716 --> 00:18:01,676
publishing latency.


538
00:18:03,796 --> 00:18:05,306
Partial segments are added to


539
00:18:05,306 --> 00:18:07,586
the playlist in parallel to the


540
00:18:07,586 --> 00:18:10,696
regular segments stream but they


541
00:18:10,696 --> 00:18:12,016
don't stay there for very long.


542
00:18:12,636 --> 00:18:15,616
And that's because partial


543
00:18:15,616 --> 00:18:18,576
segments are primarily useful


544
00:18:19,006 --> 00:18:20,266
when you're playing at the live


545
00:18:20,266 --> 00:18:20,666
edge.


546
00:18:20,726 --> 00:18:22,496
They allow clients to discover


547
00:18:22,496 --> 00:18:23,986
media just as soon as it


548
00:18:23,986 --> 00:18:24,836
arrives.


549
00:18:25,416 --> 00:18:27,526
And they fine-grained


550
00:18:27,526 --> 00:18:29,756
addressability of those partial


551
00:18:29,756 --> 00:18:31,736
segments allows clients who are


552
00:18:31,736 --> 00:18:33,616
joining those streams to join


553
00:18:33,616 --> 00:18:35,346
them closer to live and perhaps


554
00:18:35,396 --> 00:18:36,976
the largest segment boundary.


555
00:18:37,856 --> 00:18:41,076
But after the partial segments


556
00:18:41,076 --> 00:18:42,556
drift further away from the live


557
00:18:42,556 --> 00:18:44,036
edge and their parent segments


558
00:18:44,036 --> 00:18:44,916
are well established in the


559
00:18:44,916 --> 00:18:46,426
playlist, the clients are


560
00:18:46,426 --> 00:18:48,366
actually better off loading the


561
00:18:48,366 --> 00:18:49,656
parent segments than the partial


562
00:18:49,656 --> 00:18:50,126
segments.


563
00:18:50,126 --> 00:18:51,856
And so the partial segments are


564
00:18:51,856 --> 00:18:53,036
removed from the playlist.


565
00:18:53,406 --> 00:18:55,176
And this helps keep our playlist


566
00:18:55,456 --> 00:18:55,936
compact.


567
00:18:57,026 --> 00:18:59,846
So, the way it works is, as you


568
00:18:59,846 --> 00:19:01,166
produce your segment, you're


569
00:19:01,166 --> 00:19:02,456
producing partial segments in


570
00:19:02,456 --> 00:19:02,976
parallel.


571
00:19:03,576 --> 00:19:05,176
After a while, as those partial


572
00:19:05,176 --> 00:19:07,126
segments become further or far


573
00:19:07,126 --> 00:19:08,346
enough away from the live edge,


574
00:19:08,636 --> 00:19:10,046
they are removed and they're


575
00:19:10,046 --> 00:19:11,726
replaced by new partial segments


576
00:19:12,016 --> 00:19:12,886
at the live edge.


577
00:19:13,526 --> 00:19:14,516
Let's take a look at how that


578
00:19:14,516 --> 00:19:16,246
looks in an actual HLS playlist.


579
00:19:16,246 --> 00:19:19,636
So, I got a couple things up


580
00:19:19,636 --> 00:19:20,076
here.


581
00:19:20,436 --> 00:19:22,306
The first thing I want you to


582
00:19:22,306 --> 00:19:24,606
notice is that just like regular


583
00:19:24,606 --> 00:19:26,036
playlists have a target duration


584
00:19:26,036 --> 00:19:27,766
which says this is how long our


585
00:19:27,766 --> 00:19:28,656
segment can be.


586
00:19:29,556 --> 00:19:30,696
Parts have the same kind of


587
00:19:30,696 --> 00:19:31,996
thing it's called a part target


588
00:19:31,996 --> 00:19:32,526
duration.


589
00:19:32,786 --> 00:19:34,146
And so this is saying to you


590
00:19:34,146 --> 00:19:35,586
that the Parts in this playlist,


591
00:19:35,586 --> 00:19:36,646
the partial segments have a


592
00:19:36,646 --> 00:19:38,486
maximum duration of five, of


593
00:19:38,586 --> 00:19:39,316
half second.


594
00:19:39,446 --> 00:19:40,836
The next thing though is we have


595
00:19:40,836 --> 00:19:41,786
a regular segment here.


596
00:19:41,786 --> 00:19:43,496
It's a 6-second segment43.


597
00:19:44,796 --> 00:19:46,646
Half a second after we put


598
00:19:46,646 --> 00:19:48,776
segment43 into the playlist, we


599
00:19:48,776 --> 00:19:50,506
can put-- we can add the first


600
00:19:50,506 --> 00:19:52,916
part of segment44.


601
00:19:53,226 --> 00:19:55,376
And we do this using a new tag


602
00:19:55,376 --> 00:19:56,416
called the part tag.


603
00:19:57,096 --> 00:19:59,026
And so, what you can see is that


604
00:19:59,236 --> 00:20:00,936
each part tag has URI.


605
00:20:01,506 --> 00:20:02,856
So the segment get-- the Partial


606
00:20:02,856 --> 00:20:04,136
Segment has its own URI


607
00:20:04,646 --> 00:20:07,776
segment44.1 is half a second


608
00:20:07,776 --> 00:20:08,166
long.


609
00:20:08,556 --> 00:20:09,966
And it's independent, which


610
00:20:09,966 --> 00:20:11,096
means it has own URI.


611
00:20:12,296 --> 00:20:14,376
Half a second after that, we can


612
00:20:14,376 --> 00:20:16,176
add the next partial segment of


613
00:20:16,176 --> 00:20:18,386
segment44 to the playlist and so


614
00:20:18,386 --> 00:20:19,136
on and so forth.


615
00:20:19,136 --> 00:20:20,436
This is a 6-second playlist.


616
00:20:20,436 --> 00:20:21,776
So there's going to be 12 parts.


617
00:20:22,456 --> 00:20:25,086
Once we get to the final part of


618
00:20:25,086 --> 00:20:27,576
segment44, we actually have the


619
00:20:27,576 --> 00:20:29,686
entire parents segment as well.


620
00:20:30,006 --> 00:20:32,116
And so, we can publish the final


621
00:20:32,116 --> 00:20:34,276
part of segment44 and the


622
00:20:34,276 --> 00:20:35,596
parents segment at the same


623
00:20:35,596 --> 00:20:35,986
time.


624
00:20:36,296 --> 00:20:37,506
And so, then half a second after


625
00:20:37,506 --> 00:20:39,046
that sort of the cycle repeats


626
00:20:39,306 --> 00:20:41,106
and we get segment45.


627
00:20:41,806 --> 00:20:44,886
And then, after a while, those


628
00:20:44,946 --> 00:20:46,396
partial segments in the middle


629
00:20:46,586 --> 00:20:47,856
are far enough away from the


630
00:20:47,856 --> 00:20:49,086
leading edge of the playlist


631
00:20:49,476 --> 00:20:50,706
that they can be removed.


632
00:20:51,036 --> 00:20:53,596
And now, we just have segment43,


633
00:20:53,596 --> 00:20:55,646
segment44 and then the parts of


634
00:20:55,646 --> 00:20:57,696
segment45 and beyond.


635
00:20:58,846 --> 00:21:00,086
So that's how we use partial


636
00:21:00,086 --> 00:21:01,226
segments to lower your


637
00:21:01,226 --> 00:21:02,186
publishing latency.


638
00:21:02,936 --> 00:21:05,126
Now, let's look at optimizing


639
00:21:05,126 --> 00:21:06,416
how we discover segments.


640
00:21:06,956 --> 00:21:10,466
And we do that using what we


641
00:21:10,466 --> 00:21:11,956
call blocking playlist reload.


642
00:21:12,396 --> 00:21:14,496
The way this works is the server


643
00:21:14,496 --> 00:21:16,436
advertises it has the ability to


644
00:21:16,436 --> 00:21:18,416
handle blocking playlist reload


645
00:21:18,806 --> 00:21:21,026
by putting a can block reload


646
00:21:21,026 --> 00:21:22,506
attribute into the server


647
00:21:22,506 --> 00:21:23,266
control tag.


648
00:21:24,306 --> 00:21:26,016
When the client sees this, it


649
00:21:26,016 --> 00:21:27,326
knows that it can ask for its


650
00:21:27,326 --> 00:21:29,516
next playlist update in advance


651
00:21:29,516 --> 00:21:30,626
of when it's actually ready.


652
00:21:30,666 --> 00:21:32,486
So we advertise the request cost


653
00:21:32,486 --> 00:21:32,826
that way.


654
00:21:33,426 --> 00:21:35,906
At that point, the server


655
00:21:35,906 --> 00:21:37,656
receives a request, realizes


656
00:21:37,656 --> 00:21:38,786
that it doesn't have a playlist


657
00:21:38,786 --> 00:21:40,516
update that's been requested yet


658
00:21:40,766 --> 00:21:42,246
and so it holds on to it until


659
00:21:43,176 --> 00:21:44,216
it does.


660
00:21:44,436 --> 00:21:47,016
So, how does the client specify


661
00:21:47,016 --> 00:21:49,566
to the server which updated


662
00:21:49,566 --> 00:21:51,736
wants, that it wants a


663
00:21:51,736 --> 00:21:53,116
particular playlist update with


664
00:21:53,116 --> 00:21:54,096
a particular segment in it.


665
00:21:54,896 --> 00:21:56,846
Well, it uses a feature of HLS


666
00:21:57,096 --> 00:21:58,086
called the media sequence


667
00:21:58,086 --> 00:21:58,366
number.


668
00:21:58,956 --> 00:22:02,056
Now, every segment in an HLS


669
00:22:02,146 --> 00:22:04,086
playlist has a unique sequence


670
00:22:04,086 --> 00:22:04,396
number.


671
00:22:05,186 --> 00:22:06,586
The sequence number of the first


672
00:22:06,586 --> 00:22:08,336
segment of the playlist is the


673
00:22:08,336 --> 00:22:09,946
value of that media sequence


674
00:22:09,946 --> 00:22:10,226
tag.


675
00:22:10,226 --> 00:22:11,246
You see at the top there.


676
00:22:11,816 --> 00:22:13,426
So it's 1800 in this case.


677
00:22:14,426 --> 00:22:15,766
The media sequence number of the


678
00:22:15,766 --> 00:22:17,676
next segment is just that plus


679
00:22:17,676 --> 00:22:18,036
one.


680
00:22:18,786 --> 00:22:20,826
And that's true even if the next


681
00:22:20,826 --> 00:22:22,456
segment is separated from the


682
00:22:22,456 --> 00:22:24,716
others by a discontinuity tag or


683
00:22:24,716 --> 00:22:26,366
a key rotation or anything else.


684
00:22:26,676 --> 00:22:27,826
Sequence numbers just keep


685
00:22:27,826 --> 00:22:28,636
counting forward.


686
00:22:29,856 --> 00:22:32,316
And that means that if we have


687
00:22:32,316 --> 00:22:33,386
this playlist.


688
00:22:33,846 --> 00:22:37,386
Then, we know the next time it's


689
00:22:37,386 --> 00:22:39,336
updated, what the sequence


690
00:22:39,336 --> 00:22:40,986
number of that next segments


691
00:22:40,986 --> 00:22:41,666
going to be.


692
00:22:42,826 --> 00:22:44,796
So, to get the next update that


693
00:22:44,796 --> 00:22:47,856
contains the segment, you know,


694
00:22:47,856 --> 00:22:49,766
the next segment of interest, we


695
00:22:49,766 --> 00:22:51,016
can tell the server, "Hey,


696
00:22:51,506 --> 00:22:53,316
please, go get me a playlist


697
00:22:53,316 --> 00:22:54,676
update and I want the one that


698
00:22:54,676 --> 00:22:56,736
contains media sequence number


699
00:22:56,976 --> 00:22:58,006
1803."


700
00:22:58,776 --> 00:23:00,536
So this is how that looks.


701
00:23:00,836 --> 00:23:03,746
So we've got a get request here


702
00:23:03,746 --> 00:23:04,606
for a playlist.


703
00:23:04,606 --> 00:23:05,946
You can see it's requesting live


704
00:23:05,946 --> 00:23:06,576
on m3U8.


705
00:23:06,576 --> 00:23:08,796
And we have a query parameter


706
00:23:09,176 --> 00:23:11,006
underscore HLS underscore


707
00:23:11,086 --> 00:23:12,956
msn=1803.


708
00:23:12,956 --> 00:23:14,106
That's how the client tells the


709
00:23:14,106 --> 00:23:16,156
server, I want this particular


710
00:23:16,156 --> 00:23:17,346
playlist update, the one that


711
00:23:17,346 --> 00:23:18,656
contains this media sequence


712
00:23:18,656 --> 00:23:18,906
number.


713
00:23:19,296 --> 00:23:21,436
After it receives it, as soon as


714
00:23:21,436 --> 00:23:22,626
it receives it, it'll


715
00:23:22,626 --> 00:23:24,186
immediately send the next update


716
00:23:24,186 --> 00:23:25,606
request for 1804.


717
00:23:26,426 --> 00:23:28,536
And those to a CDN look like


718
00:23:28,536 --> 00:23:30,206
completely different URLs even


719
00:23:30,206 --> 00:23:31,636
though only one query parameter


720
00:23:31,636 --> 00:23:33,516
is different by one value to a


721
00:23:33,516 --> 00:23:35,586
CDN, it's a completely different


722
00:23:35,586 --> 00:23:36,456
cache entity.


723
00:23:36,886 --> 00:23:39,186
And so, that gives us our cache


724
00:23:39,716 --> 00:23:39,936
busting.


725
00:23:40,036 --> 00:23:41,906
Now, this works with partial


726
00:23:41,906 --> 00:23:42,766
segments as well.


727
00:23:43,276 --> 00:23:44,906
And this is how it looks in this


728
00:23:44,906 --> 00:23:45,376
case.


729
00:23:45,726 --> 00:23:47,876
So we have a second example and


730
00:23:47,876 --> 00:23:50,266
the second example says that, "I


731
00:23:50,266 --> 00:23:52,036
want the playlist update that


732
00:23:52,036 --> 00:23:55,046
contains the first part of the


733
00:23:55,046 --> 00:23:57,476
media sequence number 1803.


734
00:23:58,106 --> 00:24:00,486
Now, there's one more thing


735
00:24:00,486 --> 00:24:02,466
going on here and that's this


736
00:24:02,676 --> 00:24:03,916
Push query parameter.


737
00:24:04,086 --> 00:24:05,506
What's that about?


738
00:24:05,896 --> 00:24:08,556
Well, remember that another


739
00:24:08,556 --> 00:24:12,006
thing we want to do is eliminate


740
00:24:12,036 --> 00:24:13,736
these extra round trip times for


741
00:24:13,736 --> 00:24:14,336
segments.


742
00:24:14,816 --> 00:24:16,756
And so to do that, we're making


743
00:24:16,756 --> 00:24:17,546
use of Push.


744
00:24:18,336 --> 00:24:20,366
And to do that, we're using


745
00:24:20,366 --> 00:24:20,926
HTTP/2.


746
00:24:22,786 --> 00:24:24,736
Now, some of you may not be


747
00:24:25,036 --> 00:24:26,986
intimately familiar with HTTP/2.


748
00:24:26,986 --> 00:24:28,056
So let me give you a quick


749
00:24:28,056 --> 00:24:28,576
refresher.


750
00:24:30,006 --> 00:24:32,446
HTTP/2 is a successor to our old


751
00:24:32,446 --> 00:24:33,556
buddy HTTP/1.


752
00:24:33,646 --> 00:24:35,936
And it was standardized by the


753
00:24:35,936 --> 00:24:37,686
IATF about four years ago.


754
00:24:38,396 --> 00:24:40,296
Since then, it has been widely


755
00:24:40,296 --> 00:24:42,326
adopted by web servers, clients


756
00:24:42,326 --> 00:24:43,236
and CDNs.


757
00:24:43,776 --> 00:24:47,316
It is required for Low-Latency


758
00:24:47,316 --> 00:24:49,576
HLS because it gives us several


759
00:24:49,576 --> 00:24:51,746
features that allow us to crank


760
00:24:51,966 --> 00:24:53,626
up the efficiency of the


761
00:24:53,626 --> 00:24:54,786
protocol exchange.


762
00:24:55,286 --> 00:24:57,236
The most notable is Push.


763
00:24:57,936 --> 00:24:58,936
So how does Push work?


764
00:25:00,026 --> 00:25:03,706
Well, HTTP/2 works the same way


765
00:25:03,706 --> 00:25:05,606
as HTTP/1 in the sense that the


766
00:25:05,606 --> 00:25:07,066
client when it wants a resource


767
00:25:07,066 --> 00:25:08,286
will send a get request to the


768
00:25:08,286 --> 00:25:08,726
server.


769
00:25:09,266 --> 00:25:12,156
What's new with HTTP/2 is that


770
00:25:12,156 --> 00:25:13,216
when the server sees that


771
00:25:13,216 --> 00:25:14,606
request, it can say to itself,


772
00:25:15,016 --> 00:25:16,276
"Oh, I see you want this


773
00:25:16,276 --> 00:25:16,686
resource.


774
00:25:16,716 --> 00:25:17,616
I bet you want this other


775
00:25:17,616 --> 00:25:18,516
resource as well."


776
00:25:19,076 --> 00:25:20,736
And so, when it sends you the


777
00:25:20,736 --> 00:25:22,566
resource you've asked for, at


778
00:25:22,566 --> 00:25:23,686
the same time it can


779
00:25:23,686 --> 00:25:26,046
unilaterally start sending you


780
00:25:26,236 --> 00:25:27,776
that secondary resource that you


781
00:25:27,776 --> 00:25:28,766
don't know you want yet.


782
00:25:29,436 --> 00:25:31,366
In that way, if it guesses right


783
00:25:31,796 --> 00:25:32,986
then you don't have to turn


784
00:25:32,986 --> 00:25:34,186
around and make a second request


785
00:25:34,186 --> 00:25:35,296
for it because it's already on


786
00:25:35,296 --> 00:25:35,956
its way to you.


787
00:25:37,216 --> 00:25:39,866
So, we're making use of this in


788
00:25:39,936 --> 00:25:41,716
the latency HLS with Segment


789
00:25:41,716 --> 00:25:42,066
Push.


790
00:25:43,276 --> 00:25:46,426
So when a client asks for a


791
00:25:46,426 --> 00:25:48,336
particular playlist update, the


792
00:25:48,336 --> 00:25:49,586
one that contains the next


793
00:25:49,586 --> 00:25:51,526
segment x, it can tell the


794
00:25:51,526 --> 00:25:53,506
server, "Oh, and by the way,


795
00:25:53,766 --> 00:25:54,926
when you give me that playlist


796
00:25:54,926 --> 00:25:56,466
update, start pushing me segment


797
00:25:56,466 --> 00:25:57,056
x as well."


798
00:25:57,996 --> 00:26:00,216
And so that allows us to


799
00:26:00,386 --> 00:26:02,536
eliminate that extra round trip


800
00:26:02,936 --> 00:26:06,196
of asking for the segment.


801
00:26:06,356 --> 00:26:09,766
So let's take a look at all


802
00:26:09,766 --> 00:26:10,916
three of these first


803
00:26:10,916 --> 00:26:14,426
optimizations and see how they


804
00:26:14,426 --> 00:26:16,536
influence the flow in comparison


805
00:26:16,536 --> 00:26:17,186
to regular HLS.


806
00:26:17,186 --> 00:26:18,976
So, let's put that over there.


807
00:26:19,306 --> 00:26:21,366
And let's take a look at what


808
00:26:21,366 --> 00:26:22,546
the new flow looks like with a


809
00:26:22,546 --> 00:26:24,036
low-latency client talking to a


810
00:26:24,036 --> 00:26:25,136
low-latency server.


811
00:26:25,796 --> 00:26:27,426
First of all, the client will


812
00:26:27,426 --> 00:26:29,036
make a playlist request in


813
00:26:29,036 --> 00:26:29,556
advance.


814
00:26:29,556 --> 00:26:30,756
So we'll have it lined up there.


815
00:26:31,116 --> 00:26:32,156
Server holds on to it.


816
00:26:32,516 --> 00:26:34,866
The server in the meantime is


817
00:26:34,866 --> 00:26:36,286
producing that first partial


818
00:26:36,286 --> 00:26:36,706
segment.


819
00:26:37,606 --> 00:26:39,216
And let's say in this example


820
00:26:39,216 --> 00:26:40,696
that the partial segment is one


821
00:26:40,696 --> 00:26:41,336
second long.


822
00:26:41,336 --> 00:26:42,626
So after a second of doing its


823
00:26:42,626 --> 00:26:44,646
encoding thing, at that point,


824
00:26:44,646 --> 00:26:46,046
it can add that partial segment


825
00:26:46,046 --> 00:26:48,316
to the playlist and unblock that


826
00:26:48,316 --> 00:26:50,596
playlist request, at the same


827
00:26:50,596 --> 00:26:53,096
time, pushing that first partial


828
00:26:53,096 --> 00:26:53,976
second to the client.


829
00:26:54,766 --> 00:26:56,866
The client can then display that


830
00:26:56,866 --> 00:26:58,766
as soon as it gets enough of it.


831
00:26:58,766 --> 00:27:00,886
And at the same time, line up


832
00:27:00,886 --> 00:27:02,136
the next playlist request on the


833
00:27:02,136 --> 00:27:03,756
server so it can find out about


834
00:27:03,756 --> 00:27:06,206
the next segment that appears as


835
00:27:06,206 --> 00:27:06,966
quickly as possible.


836
00:27:08,026 --> 00:27:10,546
Even with partial segments as


837
00:27:10,546 --> 00:27:12,546
long as the second, you can see


838
00:27:12,746 --> 00:27:15,436
how this dramatically reduces


839
00:27:15,436 --> 00:27:18,006
the amount of time it takes for


840
00:27:18,006 --> 00:27:20,306
a given frame of media to travel


841
00:27:20,626 --> 00:27:23,556
from the server all the way to


842
00:27:24,216 --> 00:27:24,526
the client.


843
00:27:24,836 --> 00:27:26,456
Now, the last couple of changes


844
00:27:26,456 --> 00:27:29,066
are essentially optimizations to


845
00:27:29,066 --> 00:27:30,056
this basic flow.


846
00:27:30,776 --> 00:27:33,576
The first one is about reducing


847
00:27:33,576 --> 00:27:35,506
this overhead of transferring


848
00:27:35,506 --> 00:27:36,876
the playlist over and over


849
00:27:36,876 --> 00:27:37,206
again.


850
00:27:37,656 --> 00:27:39,196
Now, why is that important?


851
00:27:40,166 --> 00:27:42,286
Well, if this playlist you're


852
00:27:42,566 --> 00:27:44,346
transferring has like three


853
00:27:44,346 --> 00:27:46,216
hours or even five hours of


854
00:27:46,216 --> 00:27:47,886
worth of segments in it and


855
00:27:47,886 --> 00:27:49,726
you're transferring it like


856
00:27:49,916 --> 00:27:51,626
three to four times a second


857
00:27:52,216 --> 00:27:53,796
that can become significant,


858
00:27:53,796 --> 00:27:54,566
even with gzip.


859
00:27:56,006 --> 00:27:58,836
And so instead, we're adding


860
00:27:58,836 --> 00:28:00,276
Delta playlist updates.


861
00:28:01,596 --> 00:28:04,076
And so, the way that works is


862
00:28:04,076 --> 00:28:05,596
that, again, the server


863
00:28:05,596 --> 00:28:07,186
announces the client that it can


864
00:28:07,186 --> 00:28:08,876
has the ability to provide Delta


865
00:28:08,876 --> 00:28:09,396
updates.


866
00:28:09,606 --> 00:28:10,806
And it does that with a


867
00:28:10,806 --> 00:28:12,936
CAN-SKIP-UNTIL attribute that


868
00:28:12,936 --> 00:28:15,046
tells the client if you ask for


869
00:28:15,046 --> 00:28:16,296
a Delta update, it's going to


870
00:28:16,296 --> 00:28:17,596
skip all the segments until a


871
00:28:17,596 --> 00:28:18,956
certain number of seconds away


872
00:28:18,956 --> 00:28:19,896
from the live edge.


873
00:28:20,636 --> 00:28:22,536
If the client sees that and it


874
00:28:22,536 --> 00:28:24,176
knows the last time it updated


875
00:28:24,176 --> 00:28:25,626
the playlist and so it figures,


876
00:28:25,846 --> 00:28:27,136
it can make do with a Delta


877
00:28:27,136 --> 00:28:28,366
update and not miss any


878
00:28:28,366 --> 00:28:29,116
information.


879
00:28:29,646 --> 00:28:31,066
Then it can make an explicit


880
00:28:31,066 --> 00:28:32,896
request the next time it updates


881
00:28:32,896 --> 00:28:34,346
a playlist for a Delta update.


882
00:28:35,486 --> 00:28:39,036
And that update carries just the


883
00:28:39,366 --> 00:28:42,906
last few segments in the


884
00:28:42,906 --> 00:28:43,896
playlist, the ones that are


885
00:28:43,896 --> 00:28:45,236
closest to the live edge.


886
00:28:46,106 --> 00:28:47,746
And it skips the earlier part of


887
00:28:47,746 --> 00:28:48,606
the playlist that the client


888
00:28:48,606 --> 00:28:50,006
already has.


889
00:28:52,736 --> 00:28:54,096
So here's an example.


890
00:28:55,106 --> 00:28:57,326
In this case, you can see that


891
00:28:57,606 --> 00:28:59,906
the client is asking for a Delta


892
00:28:59,906 --> 00:29:01,766
update by specifying the


893
00:29:01,766 --> 00:29:02,726
underscore HLS underscore


894
00:29:02,726 --> 00:29:05,966
skip=YES query parameter, when


895
00:29:05,966 --> 00:29:07,916
it makes its play playlist get


896
00:29:07,916 --> 00:29:08,486
request.


897
00:29:08,936 --> 00:29:11,526
In the playlist that comes back,


898
00:29:12,456 --> 00:29:13,176
you'll see that there's a


899
00:29:13,176 --> 00:29:15,716
CAN-SKIP-UNTIL, which tells the


900
00:29:15,716 --> 00:29:17,166
client that when it asks for a


901
00:29:17,166 --> 00:29:19,066
Delta update that the Delta


902
00:29:19,066 --> 00:29:20,126
update will skip everything


903
00:29:20,126 --> 00:29:22,016
until the last 36 seconds before


904
00:29:22,016 --> 00:29:22,866
the live edge.


905
00:29:24,006 --> 00:29:26,006
And then the last new tag here


906
00:29:26,306 --> 00:29:27,396
is this skip tag.


907
00:29:28,006 --> 00:29:29,156
And the way you can think of the


908
00:29:29,156 --> 00:29:32,786
skip tag is it is a stand in for


909
00:29:32,996 --> 00:29:36,596
1700 xm segment, xm segment tags


910
00:29:36,856 --> 00:29:37,796
that would have been there in a


911
00:29:37,796 --> 00:29:39,466
full playlist update.


912
00:29:40,476 --> 00:29:42,546
So that's Delta updates and


913
00:29:42,546 --> 00:29:45,066
allows us to really minimize the


914
00:29:45,066 --> 00:29:47,036
number or the amount of network


915
00:29:47,036 --> 00:29:48,356
traffic it takes to constantly


916
00:29:48,356 --> 00:29:49,756
refresh the playlist without


917
00:29:49,756 --> 00:29:51,226
losing any of the generality and


918
00:29:51,226 --> 00:29:53,116
power that HLS Playlist give


919
00:29:53,116 --> 00:29:53,316
you.


920
00:29:53,966 --> 00:29:55,776
So now, let's look at the last


921
00:29:55,776 --> 00:29:57,396
change and this is the one that


922
00:29:57,696 --> 00:30:00,166
helps us switch bit rate tiers


923
00:30:00,376 --> 00:30:01,156
more rapidly.


924
00:30:02,046 --> 00:30:02,866
They're called Rendition


925
00:30:02,866 --> 00:30:03,576
Reports.


926
00:30:04,086 --> 00:30:06,816
And the idea is that, when your


927
00:30:06,816 --> 00:30:08,866
client loads the most up to date


928
00:30:08,996 --> 00:30:10,906
version of a particular playlist


929
00:30:11,006 --> 00:30:12,986
for a particular bit rate that


930
00:30:13,046 --> 00:30:15,256
update can carry an up to date


931
00:30:15,256 --> 00:30:17,456
kind of a peek into other


932
00:30:17,456 --> 00:30:19,366
renditions that the client might


933
00:30:19,366 --> 00:30:20,646
decide or interesting to switch


934
00:30:20,646 --> 00:30:23,416
to in the next second or two.


935
00:30:23,656 --> 00:30:25,806
Specifically, the Rendition


936
00:30:25,806 --> 00:30:27,186
Reports carry the last media


937
00:30:27,186 --> 00:30:29,056
sequence number in that pure


938
00:30:29,056 --> 00:30:30,956
playlist in its last partial


939
00:30:30,956 --> 00:30:31,616
segment number.


940
00:30:31,896 --> 00:30:33,016
And that gives the client what


941
00:30:33,016 --> 00:30:34,956
it needs to compose the URL to


942
00:30:34,956 --> 00:30:36,216
get that latest playlist.


943
00:30:36,626 --> 00:30:38,776
So it looks like this.


944
00:30:39,776 --> 00:30:41,746
In this example, we have the


945
00:30:41,826 --> 00:30:44,436
client asking for an update of


946
00:30:44,436 --> 00:30:45,766
the one-megabit playlist.


947
00:30:46,366 --> 00:30:47,686
And when it's doing that, it's


948
00:30:47,686 --> 00:30:49,626
using the HLS report query


949
00:30:49,626 --> 00:30:52,106
parameter to ask for a peek into


950
00:30:52,106 --> 00:30:53,416
the two-megabit playlist that's


951
00:30:53,416 --> 00:30:54,346
on the same server.


952
00:30:54,916 --> 00:30:57,496
When it gets its playlist back,


953
00:30:57,916 --> 00:30:59,126
the playlist will contain a


954
00:30:59,126 --> 00:31:00,466
rendition report tag.


955
00:31:00,946 --> 00:31:02,846
And that has a variety of


956
00:31:02,846 --> 00:31:04,526
information about that other


957
00:31:04,526 --> 00:31:05,086
rendition.


958
00:31:05,646 --> 00:31:10,006
So, if we put all these changes


959
00:31:10,006 --> 00:31:13,666
together, the question is, how


960
00:31:13,666 --> 00:31:14,486
well do they work.


961
00:31:14,996 --> 00:31:17,006
Do you guys want to see a demo?


962
00:31:18,046 --> 00:31:18,126
>> Yeah.


963
00:31:18,326 --> 00:31:22,796
>> Let's do it.


964
00:31:22,796 --> 00:31:24,636
You know, when we were putting


965
00:31:24,636 --> 00:31:27,056
the session together, we were


966
00:31:27,056 --> 00:31:29,086
like, "Yeah, we could do a live


967
00:31:29,086 --> 00:31:30,336
demo or we could do a Live


968
00:31:30,336 --> 00:31:31,526
Stream from Cupertino."


969
00:31:32,086 --> 00:31:34,306
But wouldn't it be more


970
00:31:34,396 --> 00:31:36,356
demonstrative to do a live demo


971
00:31:36,356 --> 00:31:37,396
from somewhere a little bit


972
00:31:37,436 --> 00:31:38,236
further away?


973
00:31:38,956 --> 00:31:42,356
Maybe somewhere 7,000 miles


974
00:31:42,356 --> 00:31:44,776
away, 12,000 kilometers


975
00:31:44,776 --> 00:31:46,216
somewhere like Sydney,


976
00:31:46,216 --> 00:31:46,976
Australia?


977
00:31:47,516 --> 00:31:50,056
[ Applause and Cheering ]


978
00:31:50,556 --> 00:31:53,596
But wait, do we know anyone in


979
00:31:53,596 --> 00:31:54,036
Sydney?


980
00:31:55,466 --> 00:31:56,596
Matt. We know Matt.


981
00:31:57,436 --> 00:32:01,416
Let's call Matt.


982
00:32:02,156 --> 00:32:03,246
OK. Let's see.


983
00:32:03,686 --> 00:32:04,836
Geez, I hope Matt is awake.


984
00:32:13,046 --> 00:32:14,586
>> Good day, Roger.


985
00:32:15,356 --> 00:32:16,076
>> Hey, Matt.


986
00:32:16,076 --> 00:32:16,496
How are you?


987
00:32:17,456 --> 00:32:18,506
>> I'm well, thank you.


988
00:32:18,746 --> 00:32:21,636
>> Great. Hey, say, I am here at


989
00:32:21,636 --> 00:32:24,156
WWDC and I want to show these


990
00:32:24,156 --> 00:32:26,046
folks Low-Latency HLS.


991
00:32:26,596 --> 00:32:27,736
Do you still have that Stream


992
00:32:27,736 --> 00:32:28,076
running?


993
00:32:28,966 --> 00:32:29,816
>> I sure do.


994
00:32:29,866 --> 00:32:31,076
>> Oh, fantastic.


995
00:32:31,846 --> 00:32:35,056
OK. Let's tune in.


996
00:32:35,056 --> 00:32:36,026
See what we got here.


997
00:32:36,496 --> 00:32:38,356
I'm got my Apple TV.


998
00:32:38,526 --> 00:32:39,626
OK. There we go.


999
00:32:40,356 --> 00:32:42,106
OK. Hey, fantastic I'm at Apple


1000
00:32:42,106 --> 00:32:42,776
TV.


1001
00:32:43,556 --> 00:32:43,946
All right.


1002
00:32:44,116 --> 00:32:45,176
So let's bring up our app.


1003
00:32:45,296 --> 00:32:47,076
We got our Sydney Stream here.


1004
00:32:47,076 --> 00:32:48,166
And let's tune in and see what


1005
00:32:48,166 --> 00:32:49,246
we got.


1006
00:32:54,046 --> 00:32:55,636
Sydney is not happening.


1007
00:32:56,566 --> 00:32:57,976
Let's see if we try that again.


1008
00:33:04,476 --> 00:33:06,946
OK. Let me try the Cupertino


1009
00:33:06,946 --> 00:33:08,356
Stream just to see if there's


1010
00:33:08,356 --> 00:33:09,866
someone-- oh, there's Simon.


1011
00:33:09,866 --> 00:33:10,916
Simon is in Cupertino.


1012
00:33:11,456 --> 00:33:14,586
So that's-- [laughter] we got


1013
00:33:14,586 --> 00:33:15,486
Simon going.


1014
00:33:16,876 --> 00:33:18,026
All right.


1015
00:33:18,186 --> 00:33:20,466
Let's try this one more time.


1016
00:33:20,466 --> 00:33:25,836
Are we-- Oops, come on, how do I


1017
00:33:25,966 --> 00:33:27,076
manage this thing?


1018
00:33:28,796 --> 00:33:29,876
Matt, you're still there right--


1019
00:33:29,876 --> 00:33:30,676
Whoa, there you are.


1020
00:33:30,776 --> 00:33:31,596
>> Yeah. I'm still here.


1021
00:33:31,596 --> 00:33:31,866
Hello.


1022
00:33:31,866 --> 00:33:32,916
>> OK, great.


1023
00:33:35,336 --> 00:33:36,646
But, hey, you know, what is that


1024
00:33:36,646 --> 00:33:37,986
the Sydney GPO behind you?


1025
00:33:39,006 --> 00:33:40,256
>> It sure is.


1026
00:33:40,696 --> 00:33:41,586
>> Oh man, come on.


1027
00:33:42,376 --> 00:33:44,016
We're not sorry-- I got to try


1028
00:33:44,016 --> 00:33:44,456
this again.


1029
00:33:52,556 --> 00:33:54,786
My Stream is not behaving the


1030
00:33:54,786 --> 00:33:57,166
way I want my Stream to be


1031
00:33:58,036 --> 00:33:58,186
today.


1032
00:33:58,356 --> 00:33:59,676
Yeah. Simon is still there.


1033
00:34:00,636 --> 00:34:05,576
Oh man. And there's-- OK,


1034
00:34:05,576 --> 00:34:06,816
there's-- Yeah, there is Matt.


1035
00:34:07,406 --> 00:34:10,045
And am I hitting play, pause?


1036
00:34:10,556 --> 00:34:14,246
Well, you know what, maybe we're


1037
00:34:14,246 --> 00:34:16,946
going to have to end up calling


1038
00:34:17,146 --> 00:34:19,246
Simon instead, which is kind of


1039
00:34:19,246 --> 00:34:20,696
a bummer because I really wanted


1040
00:34:20,696 --> 00:34:23,976
to show you guys the Stream.


1041
00:34:24,045 --> 00:34:24,516
Let's see.


1042
00:34:25,255 --> 00:34:25,966
Hold our breath.


1043
00:34:25,966 --> 00:34:26,525
Are we good?


1044
00:34:27,416 --> 00:34:28,386
Did you guys have to restart


1045
00:34:28,386 --> 00:34:28,766
Stream?


1046
00:34:29,815 --> 00:34:30,795
>> The network went away for a


1047
00:34:30,835 --> 00:34:31,025
bit.


1048
00:34:31,216 --> 00:34:32,176
>> The network went away.


1049
00:34:33,076 --> 00:34:33,536
That's great.


1050
00:34:40,366 --> 00:34:40,766
All right.


1051
00:34:40,976 --> 00:34:42,806
We're having-- Let me just see


1052
00:34:42,896 --> 00:34:45,156
if maybe we're not plugged in


1053
00:34:45,156 --> 00:34:45,426
right.


1054
00:34:48,196 --> 00:34:49,565
These live demos just killing


1055
00:34:49,565 --> 00:34:49,656
me.


1056
00:35:01,256 --> 00:35:02,936
Double tap this and this is


1057
00:35:04,156 --> 00:35:06,616
going to try to get rid of this


1058
00:35:06,616 --> 00:35:06,906
guy.


1059
00:35:07,306 --> 00:35:08,266
Yeah, I don't know if this going


1060
00:35:08,266 --> 00:35:08,886
to help me but let's give a


1061
00:35:08,886 --> 00:35:08,976
shot.


1062
00:35:16,206 --> 00:35:18,606
Oh, man. All right.


1063
00:35:18,686 --> 00:35:20,026
I think we're going to try this


1064
00:35:20,026 --> 00:35:22,846
one more time and then we are


1065
00:35:23,566 --> 00:35:24,226
going to back up.


1066
00:35:24,226 --> 00:35:25,496
All right.


1067
00:35:26,356 --> 00:35:27,056
Sorry, Matt.


1068
00:35:27,056 --> 00:35:28,326
We're having trouble with the


1069
00:35:28,326 --> 00:35:29,146
Stream over here.


1070
00:35:29,146 --> 00:35:33,396
So let me-- Thanks for showing


1071
00:35:33,396 --> 00:35:34,676
up and we're able to see you for


1072
00:35:34,676 --> 00:35:36,166
a little bit but I'm going to


1073
00:35:36,166 --> 00:35:37,856
have to go to Cupertino.


1074
00:35:37,856 --> 00:35:38,086
>> All right.


1075
00:35:38,086 --> 00:35:38,796
No problem.


1076
00:35:38,796 --> 00:35:39,176
>> All right.


1077
00:35:39,756 --> 00:35:41,006
Well, that's really a bummer but


1078
00:35:41,006 --> 00:35:42,696
let's call Simon anyway.


1079
00:35:42,916 --> 00:35:43,796
This is why you have backups, I


1080
00:35:43,796 --> 00:35:43,956
guess.


1081
00:35:49,926 --> 00:35:50,886
Hey, Simon, are you there?


1082
00:35:51,576 --> 00:35:52,726
>> Yeah, I'm here Roger.


1083
00:35:52,726 --> 00:35:53,656
How are you?


1084
00:35:53,656 --> 00:35:54,936
>> Good. Simon is also


1085
00:35:54,936 --> 00:35:55,506
Australian.


1086
00:35:55,506 --> 00:35:56,666
I realized that's not-- that's


1087
00:35:56,666 --> 00:35:57,926
kind of cool comfort but there


1088
00:35:57,926 --> 00:35:58,066
he is.


1089
00:35:58,066 --> 00:35:58,776
>> You got Australians


1090
00:35:58,776 --> 00:35:59,286
everywhere.


1091
00:36:00,776 --> 00:36:04,026
>> So Simon, I wanted to show


1092
00:36:04,026 --> 00:36:05,686
the folks here a Low-Latency HLS


1093
00:36:05,686 --> 00:36:06,166
Stream.


1094
00:36:06,586 --> 00:36:07,916
>> Oh you bet.


1095
00:36:08,116 --> 00:36:09,316
>> So why don't we do this.


1096
00:36:09,316 --> 00:36:11,186
I'll have you raise your hand


1097
00:36:11,506 --> 00:36:13,356
and people hear you said-- if


1098
00:36:13,356 --> 00:36:14,776
you said when you do it, they'll


1099
00:36:14,776 --> 00:36:16,126
hear you over the audio.


1100
00:36:16,126 --> 00:36:17,066
And then they'll see you on the


1101
00:36:17,066 --> 00:36:17,346
Stream.


1102
00:36:17,346 --> 00:36:17,846
Now, they'll give you-- a give


1103
00:36:17,906 --> 00:36:19,486
them a sense of what the video


1104
00:36:19,486 --> 00:36:20,186
latency is.


1105
00:36:20,186 --> 00:36:21,036
So, I want you to raise your


1106
00:36:21,036 --> 00:36:21,546
hand.


1107
00:36:21,546 --> 00:36:23,636
>> OK. You bet.


1108
00:36:23,836 --> 00:36:24,786
>> OK. Raise your hand.


1109
00:36:24,836 --> 00:36:27,026
>> Hey, everybody.


1110
00:36:27,806 --> 00:36:28,796
I'm raising my hand.


1111
00:36:28,866 --> 00:36:30,216
>> OK. Good.


1112
00:36:30,216 --> 00:36:31,376
Keep that hand up.


1113
00:36:31,746 --> 00:36:34,246
And-- oh you put it down.


1114
00:36:34,566 --> 00:36:37,326
OK. Now, give me three fingers.


1115
00:36:38,276 --> 00:36:39,366
>> Three fingers.


1116
00:36:40,156 --> 00:36:41,626
>> There we are.


1117
00:36:41,626 --> 00:36:44,136
So that's a-- they are about,


1118
00:36:44,966 --> 00:36:45,936
you know, [applause] HLS Stream


1119
00:36:45,936 --> 00:36:47,406
less than two seconds latency.


1120
00:36:47,476 --> 00:36:49,386
Thank you very much for helping


1121
00:36:49,386 --> 00:36:50,236
us out today, Simon.


1122
00:36:50,836 --> 00:36:51,316
>> You bet.


1123
00:36:51,316 --> 00:36:52,856
I hope you all enjoy the rest of


1124
00:36:52,856 --> 00:36:53,646
WWDC.


1125
00:36:54,156 --> 00:36:55,776
>> Thank you.


1126
00:36:56,126 --> 00:37:00,116
Alright. So that is Low-Latency


1127
00:37:00,116 --> 00:37:00,616
HLS.


1128
00:37:01,086 --> 00:37:02,286
So at this point, some of you


1129
00:37:02,286 --> 00:37:04,226
are probably wondering, how can


1130
00:37:04,226 --> 00:37:05,356
I give me some of that HLS


1131
00:37:05,356 --> 00:37:06,606
Low-Latency stuff?


1132
00:37:07,736 --> 00:37:10,266
And so, first of all, a lot of


1133
00:37:10,266 --> 00:37:12,246
your application developers and


1134
00:37:12,246 --> 00:37:13,686
so let's talk about that first.


1135
00:37:14,696 --> 00:37:17,376
The good news is by default, you


1136
00:37:17,376 --> 00:37:18,606
don't have to do anything if


1137
00:37:18,606 --> 00:37:19,726
you're using an AV Player to


1138
00:37:19,806 --> 00:37:21,106
play your Streams and you stand


1139
00:37:21,106 --> 00:37:22,176
up Low-Latency Stream, you'll


1140
00:37:22,176 --> 00:37:22,886
get it by default.


1141
00:37:24,366 --> 00:37:25,756
We do have a couple of new API's


1142
00:37:25,936 --> 00:37:26,506
however.


1143
00:37:26,886 --> 00:37:29,026
One that tells you how far


1144
00:37:29,026 --> 00:37:30,196
you're currently set from the


1145
00:37:30,196 --> 00:37:32,096
live edge and the other which is


1146
00:37:32,096 --> 00:37:34,186
a recommendation based on things


1147
00:37:34,186 --> 00:37:35,556
like round trip time we're


1148
00:37:35,556 --> 00:37:36,026
observing.


1149
00:37:36,316 --> 00:37:37,356
And so, you can use those


1150
00:37:37,356 --> 00:37:38,516
together to configure.


1151
00:37:38,786 --> 00:37:39,736
For instance, you see here a


1152
00:37:39,736 --> 00:37:41,026
little bit too close in your


1153
00:37:41,026 --> 00:37:42,246
risk of stalling, you can back


1154
00:37:42,246 --> 00:37:42,906
it off a little bit.


1155
00:37:42,906 --> 00:37:45,046
Maybe we should have done that


1156
00:37:45,046 --> 00:37:45,296
here.


1157
00:37:45,296 --> 00:37:47,296
The second is a way to allow you


1158
00:37:47,296 --> 00:37:48,516
to maintain the play head


1159
00:37:48,516 --> 00:37:50,166
position relative to the live


1160
00:37:50,166 --> 00:37:50,496
edge.


1161
00:37:50,496 --> 00:37:51,316
And the reason this is


1162
00:37:51,316 --> 00:37:53,206
interesting is because that


1163
00:37:53,316 --> 00:37:54,686
today if you're playing the Live


1164
00:37:54,686 --> 00:37:55,446
Stream and you go through a


1165
00:37:55,446 --> 00:37:56,306
tunnel or whatever and you


1166
00:37:56,306 --> 00:37:57,796
buffer for 10 seconds, when you


1167
00:37:57,796 --> 00:37:59,506
resume, you resume at the point


1168
00:37:59,506 --> 00:38:00,866
you stopped, which means you


1169
00:38:00,866 --> 00:38:01,826
don't miss anything.


1170
00:38:01,826 --> 00:38:03,006
But every time you're buffering


1171
00:38:03,006 --> 00:38:05,136
a little bit further behind, and


1172
00:38:05,136 --> 00:38:06,656
so if you set automatically


1173
00:38:06,656 --> 00:38:08,326
preserves time offset from live


1174
00:38:08,326 --> 00:38:10,366
to yes, then every time after we


1175
00:38:10,366 --> 00:38:11,606
will buffer we will not


1176
00:38:11,606 --> 00:38:13,526
automatically jump ahead to that


1177
00:38:13,526 --> 00:38:14,616
same place from live.


1178
00:38:14,616 --> 00:38:15,966
And so, that keeps you at live.


1179
00:38:16,376 --> 00:38:17,926
The next thing to think about is


1180
00:38:17,926 --> 00:38:20,796
configuring your CDN.


1181
00:38:21,026 --> 00:38:22,796
We really wanted to avoid


1182
00:38:24,266 --> 00:38:26,756
placing exotic video specific


1183
00:38:26,756 --> 00:38:28,206
requirements on our CDNs because


1184
00:38:28,206 --> 00:38:29,546
we want them to be able to focus


1185
00:38:29,546 --> 00:38:31,076
on being great CDNs.


1186
00:38:31,596 --> 00:38:32,476
And so we kept things


1187
00:38:32,476 --> 00:38:33,176
straightforward.


1188
00:38:33,996 --> 00:38:35,286
You need to use industry


1189
00:38:35,286 --> 00:38:37,436
standard HTTP/2 to deliver your


1190
00:38:37,436 --> 00:38:38,646
HLS segments and playlists.


1191
00:38:38,646 --> 00:38:40,006
That includes supporting Push


1192
00:38:40,096 --> 00:38:41,156
and the standard priority


1193
00:38:41,156 --> 00:38:41,786
controls.


1194
00:38:43,006 --> 00:38:44,516
You should be putting a complete


1195
00:38:44,516 --> 00:38:46,236
ladder of tiers on each server.


1196
00:38:46,346 --> 00:38:47,536
You can still have multiple


1197
00:38:47,536 --> 00:38:48,836
redundant servers, but each one


1198
00:38:48,836 --> 00:38:50,326
should have a complete ladder so


1199
00:38:50,326 --> 00:38:51,826
we can minimize connection setup


1200
00:38:51,866 --> 00:38:52,226
time.


1201
00:38:53,226 --> 00:38:55,356
And you have to set up your CDN


1202
00:38:55,356 --> 00:38:56,546
so the aggregates duplicate


1203
00:38:56,546 --> 00:38:57,246
requests.


1204
00:38:57,246 --> 00:38:58,616
If Fred asked for a particular


1205
00:38:58,616 --> 00:39:00,416
playlist and it goes off to the


1206
00:39:00,416 --> 00:39:01,876
origin to get it, and then Bob


1207
00:39:01,876 --> 00:39:03,466
asks for the same thing, rather


1208
00:39:03,466 --> 00:39:04,656
than sending the same request


1209
00:39:04,656 --> 00:39:06,026
through the CDN, you should park


1210
00:39:06,026 --> 00:39:07,706
it next to Fred's and wait for


1211
00:39:07,706 --> 00:39:09,106
that first response to come back


1212
00:39:09,376 --> 00:39:10,496
and then deliver them together.


1213
00:39:11,096 --> 00:39:12,266
Different CDNs call that


1214
00:39:12,266 --> 00:39:13,796
different things, Apache Traffic


1215
00:39:13,796 --> 00:39:14,816
Server calls it Reader while


1216
00:39:14,816 --> 00:39:15,296
writer.


1217
00:39:15,626 --> 00:39:18,076
Others might call it early


1218
00:39:18,076 --> 00:39:19,066
published or something like


1219
00:39:19,066 --> 00:39:19,316
that.


1220
00:39:19,366 --> 00:39:20,616
The main thing is to find that


1221
00:39:20,616 --> 00:39:23,146
and set it up.


1222
00:39:23,266 --> 00:39:25,006
Now, the main work here is


1223
00:39:25,006 --> 00:39:26,026
implementing your origin,


1224
00:39:26,026 --> 00:39:27,186
changing your packagers who


1225
00:39:27,186 --> 00:39:28,816
admit partial segments and


1226
00:39:28,816 --> 00:39:30,116
implementing the origin API.


1227
00:39:30,336 --> 00:39:32,226
To help you with that, we've


1228
00:39:32,226 --> 00:39:34,146
published a spec for Low-Latency


1229
00:39:34,146 --> 00:39:34,396
HLS.


1230
00:39:34,396 --> 00:39:35,976
It's available on the website.


1231
00:39:35,976 --> 00:39:38,746
There's a link to it through the


1232
00:39:38,746 --> 00:39:39,896
session page on the app.


1233
00:39:40,606 --> 00:39:41,936
It's currently structured as the


1234
00:39:41,936 --> 00:39:42,786
separate draft.


1235
00:39:42,786 --> 00:39:44,176
We plan to roll the rules into


1236
00:39:44,176 --> 00:39:45,766
the course back later this year.


1237
00:39:46,466 --> 00:39:47,676
It includes something new, which


1238
00:39:47,676 --> 00:39:49,026
is a Server Configuration


1239
00:39:49,026 --> 00:39:49,576
Profile.


1240
00:39:49,856 --> 00:39:51,796
And that has a set of attributes


1241
00:39:51,796 --> 00:39:53,076
of the server delivery chain


1242
00:39:53,076 --> 00:39:54,396
that required to engage


1243
00:39:54,426 --> 00:39:55,776
Low-Latency mode in the client.


1244
00:39:56,076 --> 00:39:57,476
The client will check these if


1245
00:39:57,476 --> 00:39:58,836
it doesn't see all the met,


1246
00:39:59,136 --> 00:40:00,236
it'll fall back to regular


1247
00:40:00,236 --> 00:40:00,766
latency.


1248
00:40:02,136 --> 00:40:04,576
Also, we're giving you a


1249
00:40:04,576 --> 00:40:06,376
reference implementation for


1250
00:40:06,606 --> 00:40:08,446
producing and Streaming


1251
00:40:08,616 --> 00:40:10,186
Low-Latency HLS Streams.


1252
00:40:10,986 --> 00:40:12,566
It's called a Low-Latency HLS


1253
00:40:12,616 --> 00:40:13,856
Beta Tools package.


1254
00:40:14,636 --> 00:40:16,226
And it has tools that will


1255
00:40:16,226 --> 00:40:17,756
generate a playlist either a


1256
00:40:17,866 --> 00:40:19,696
programmatic bit bop or from the


1257
00:40:19,696 --> 00:40:21,546
camera and package it into a


1258
00:40:21,546 --> 00:40:22,736
Low-Latency Stream.


1259
00:40:23,456 --> 00:40:25,066
It includes a front end to


1260
00:40:25,066 --> 00:40:26,896
Apache that implements the


1261
00:40:26,896 --> 00:40:28,876
origin API, including Blocking


1262
00:40:28,876 --> 00:40:30,536
Playlist Reload, Delta Updates,


1263
00:40:30,536 --> 00:40:31,566
Rendition Reports.


1264
00:40:31,976 --> 00:40:33,406
And you can use that either to


1265
00:40:33,406 --> 00:40:34,796
experiment with Low-Latency with


1266
00:40:34,796 --> 00:40:36,366
your app and also to compare it


1267
00:40:36,666 --> 00:40:37,676
against your backend


1268
00:40:37,676 --> 00:40:38,826
implementation when you build


1269
00:40:38,826 --> 00:40:39,076
that.


1270
00:40:40,316 --> 00:40:42,146
So that's what you need as


1271
00:40:42,146 --> 00:40:43,936
developers to get up and running


1272
00:40:43,936 --> 00:40:44,566
on this thing.


1273
00:40:44,566 --> 00:40:45,776
Let's talk about the roadmap to


1274
00:40:45,776 --> 00:40:46,296
users.


1275
00:40:46,946 --> 00:40:48,926
We recognize that Low-Latency


1276
00:40:48,926 --> 00:40:50,556
HLS is a major change.


1277
00:40:51,186 --> 00:40:54,606
And so, we are allowing you to


1278
00:40:54,606 --> 00:40:55,956
spend a bit of time getting to


1279
00:40:55,956 --> 00:40:58,456
know it and to we-- and to stand


1280
00:40:58,456 --> 00:41:00,216
up your implementations against


1281
00:41:00,216 --> 00:41:01,246
our clients at scale.


1282
00:41:02,026 --> 00:41:03,606
So the short answer for what


1283
00:41:03,606 --> 00:41:04,996
that means is you need an app


1284
00:41:04,996 --> 00:41:06,286
entitlement for Low-Latency


1285
00:41:06,286 --> 00:41:06,576
mode.


1286
00:41:06,876 --> 00:41:08,026
This allows you to build your


1287
00:41:08,026 --> 00:41:09,756
app, test your Streams and even


1288
00:41:09,756 --> 00:41:11,206
deploy them and up to 10,000


1289
00:41:11,206 --> 00:41:12,646
beta users via TestFlight.


1290
00:41:13,056 --> 00:41:14,546
And then once you're confident


1291
00:41:14,806 --> 00:41:15,846
that things are working and the


1292
00:41:15,846 --> 00:41:17,596
beta period ends, you'll be able


1293
00:41:17,596 --> 00:41:18,696
to submit your apps to the


1294
00:41:18,696 --> 00:41:19,046
store.


1295
00:41:19,586 --> 00:41:22,026
So, in summary, go take a look


1296
00:41:22,026 --> 00:41:23,936
at the spec. Try it out in the


1297
00:41:23,936 --> 00:41:26,316
beta and start building your


1298
00:41:26,316 --> 00:41:27,856
back ends to support Low-Latency


1299
00:41:27,856 --> 00:41:28,596
Live Streams.


1300
00:41:29,146 --> 00:41:31,256
To help you with that, today or


1301
00:41:31,256 --> 00:41:32,616
this week rather, we have a


1302
00:41:32,616 --> 00:41:34,186
couple of HLS labs.


1303
00:41:34,646 --> 00:41:35,806
I'll be there along with a


1304
00:41:35,806 --> 00:41:37,616
number of other folks on my team


1305
00:41:37,616 --> 00:41:38,736
and we're happy to answer all


1306
00:41:38,736 --> 00:41:40,206
your questions about Low-Latency


1307
00:41:40,206 --> 00:41:42,356
HLS and any other HLS questions.


1308
00:41:42,646 --> 00:41:43,926
The first one is on Thursday


1309
00:41:43,926 --> 00:41:44,916
from 4 to 6.


1310
00:41:45,156 --> 00:41:47,056
The second is on Friday from 11


1311
00:41:47,376 --> 00:41:48,596
to 1, I think.


1312
00:41:49,166 --> 00:41:51,136
And so with that, thank you very


1313
00:41:51,136 --> 00:41:52,086
much for attending.


1314
00:41:52,086 --> 00:41:53,396
And I hope everyone has a great


1315
00:41:53,396 --> 00:41:53,676
show.


1316
00:41:54,516 --> 00:41:58,500
[ Applause ]

