1
00:00:01,516 --> 00:00:04,500
[ Music ]


2
00:00:11,776 --> 00:00:13,036
>> Welcome to Delivering


3
00:00:13,036 --> 00:00:14,566
Intuitive Media Playback with


4
00:00:14,566 --> 00:00:14,916
AVKit.


5
00:00:15,516 --> 00:00:17,756
[ Applause ]


6
00:00:18,256 --> 00:00:19,626
My name is Jed Lewison, and I'll


7
00:00:19,626 --> 00:00:21,316
be joined a little bit later by


8
00:00:21,316 --> 00:00:22,416
my colleague Dan Wright.


9
00:00:22,916 --> 00:00:24,206
And we're going to talk with you


10
00:00:24,206 --> 00:00:26,686
about media playback with AVKit.


11
00:00:27,146 --> 00:00:29,756
And what's new in best practices


12
00:00:30,036 --> 00:00:31,786
with AVPlayerViewController on


13
00:00:31,976 --> 00:00:33,706
iOS and tvOS.


14
00:00:35,256 --> 00:00:37,326
AVKit is a cross platform media


15
00:00:37,326 --> 00:00:39,026
playback UI framework built on


16
00:00:39,026 --> 00:00:40,676
top of AVFoundation in


17
00:00:40,676 --> 00:00:41,356
CoreMedia.


18
00:00:41,656 --> 00:00:43,176
And our mission is to make it


19
00:00:43,176 --> 00:00:45,746
easy for you to show and play


20
00:00:45,746 --> 00:00:47,266
AVPlayer-based media content


21
00:00:47,646 --> 00:00:49,876
using the same user interface


22
00:00:50,436 --> 00:00:51,976
used by Apple's own apps.


23
00:00:53,326 --> 00:00:55,506
For UIKit apps, we provide


24
00:00:55,666 --> 00:00:56,966
AVPlayerViewController.


25
00:00:58,246 --> 00:01:00,236
For APKit apps, we provide


26
00:01:00,236 --> 00:01:00,876
AVPlayerView.


27
00:01:01,316 --> 00:01:03,316
And for both UIKit and APKit


28
00:01:03,316 --> 00:01:04,406
apps, we provide


29
00:01:04,406 --> 00:01:05,906
AVRoutePickerView, which lets


30
00:01:05,906 --> 00:01:07,546
you add a wireless route picker


31
00:01:07,806 --> 00:01:09,706
to your custom playback UI's.


32
00:01:11,166 --> 00:01:11,976
So let's take a look at some


33
00:01:11,976 --> 00:01:12,266
code.


34
00:01:12,736 --> 00:01:14,086
Getting started with


35
00:01:14,086 --> 00:01:16,586
AVPlayerViewController on iOS is


36
00:01:16,586 --> 00:01:18,546
incredibly easy, and tvOS.


37
00:01:19,226 --> 00:01:20,286
The first thing you do is you


38
00:01:20,286 --> 00:01:21,236
create an AVPlayer.


39
00:01:22,396 --> 00:01:23,846
Then, you create and


40
00:01:23,846 --> 00:01:25,356
AVPlayerViewController and


41
00:01:25,356 --> 00:01:26,566
assign to it the player that you


42
00:01:26,566 --> 00:01:27,346
just created.


43
00:01:28,096 --> 00:01:29,976
And finally, you present it.


44
00:01:29,976 --> 00:01:31,786
And that's all there is to it.


45
00:01:32,516 --> 00:01:33,556
That's all it takes to get a


46
00:01:33,556 --> 00:01:35,176
rich and fully functional media


47
00:01:35,236 --> 00:01:37,026
playback UI that will be


48
00:01:37,076 --> 00:01:39,216
familiar to your users because


49
00:01:39,216 --> 00:01:41,136
it's the same UI used by Apple


50
00:01:41,406 --> 00:01:42,676
in its own apps.


51
00:01:43,356 --> 00:01:45,176
But there's a lot of power below


52
00:01:45,176 --> 00:01:45,906
the surface.


53
00:01:46,016 --> 00:01:48,066
And that's because when you use


54
00:01:48,066 --> 00:01:50,726
AVKit, you own the media


55
00:01:50,776 --> 00:01:51,926
playback objects.


56
00:01:52,366 --> 00:01:54,496
You are in control of creating


57
00:01:54,556 --> 00:01:55,576
and managing them.


58
00:01:55,906 --> 00:01:57,906
And video rendering is built on


59
00:01:57,906 --> 00:02:00,546
top of the same core technology


60
00:02:00,766 --> 00:02:02,286
that powers AVPlayerLayer.


61
00:02:03,066 --> 00:02:03,946
That means you get the full


62
00:02:03,946 --> 00:02:05,586
power of AVFoundation in


63
00:02:05,586 --> 00:02:06,996
CoreMedia playback UI's,


64
00:02:07,576 --> 00:02:09,045
including all the power


65
00:02:09,045 --> 00:02:10,186
delivered by AVPlayer,


66
00:02:10,186 --> 00:02:12,746
AVPlayerItem, and AVAsset.


67
00:02:12,926 --> 00:02:15,516
But because AVKit also sit on


68
00:02:15,516 --> 00:02:18,276
top of UIKit and AppKit, you get


69
00:02:18,276 --> 00:02:20,236
a user experience tailored to


70
00:02:20,236 --> 00:02:21,606
each of Apple's unique


71
00:02:21,836 --> 00:02:22,586
platforms.


72
00:02:22,816 --> 00:02:24,746
So AVKit gives you the best of


73
00:02:24,746 --> 00:02:25,456
both worlds.


74
00:02:27,156 --> 00:02:28,936
You get full control over your


75
00:02:28,936 --> 00:02:30,276
media playback objects.


76
00:02:30,686 --> 00:02:33,746
And a familiar API for showing


77
00:02:33,746 --> 00:02:35,746
and displaying them using UIKit


78
00:02:35,746 --> 00:02:37,246
and APKit-based APIs.


79
00:02:38,576 --> 00:02:40,666
So, that's a high-level look at


80
00:02:40,666 --> 00:02:41,296
AVKIt.


81
00:02:41,296 --> 00:02:43,476
Let's dive right into what's new


82
00:02:43,836 --> 00:02:45,296
in AVPlayerViewController and


83
00:02:45,406 --> 00:02:47,046
iOS for iOS 13.


84
00:02:47,436 --> 00:02:49,936
I'm going to start talking about


85
00:02:50,086 --> 00:02:51,936
new full screen callbacks that


86
00:02:51,936 --> 00:02:53,296
we added that inform you about


87
00:02:53,296 --> 00:02:55,676
transitions from embedded inline


88
00:02:55,676 --> 00:02:58,096
presentations to full screen and


89
00:02:58,096 --> 00:02:59,366
entering full screen and exiting


90
00:02:59,366 --> 00:02:59,936
full screens.


91
00:02:59,936 --> 00:03:02,746
So, to motivate this, in this


92
00:03:02,746 --> 00:03:05,096
video, what we'll see is the


93
00:03:05,256 --> 00:03:06,416
user's going to enter full


94
00:03:06,416 --> 00:03:08,156
screen here and then start an


95
00:03:08,156 --> 00:03:09,626
interactive dismissal.


96
00:03:10,206 --> 00:03:12,016
But, they'll cancel that


97
00:03:12,016 --> 00:03:12,636
dismissal.


98
00:03:12,836 --> 00:03:13,866
So now we're back to full


99
00:03:13,866 --> 00:03:14,366
screen.


100
00:03:14,686 --> 00:03:17,576
And now the user has dismissed,


101
00:03:17,686 --> 00:03:19,246
and we're back to where we


102
00:03:19,246 --> 00:03:20,056
started with an


103
00:03:20,056 --> 00:03:21,936
AVPlayerViewController embedded


104
00:03:21,936 --> 00:03:22,386
inline.


105
00:03:23,336 --> 00:03:25,316
So, the new API we're delivering


106
00:03:25,316 --> 00:03:27,456
in iOS 13 informs you about all


107
00:03:27,456 --> 00:03:29,136
of these states by extending


108
00:03:29,136 --> 00:03:30,656
AVPlayerViewController Delegate.


109
00:03:32,056 --> 00:03:33,516
You get notifications when a


110
00:03:33,606 --> 00:03:35,636
full screen presentation begins


111
00:03:35,836 --> 00:03:36,456
or ends.


112
00:03:36,606 --> 00:03:37,766
And it looks like this.


113
00:03:38,966 --> 00:03:40,246
Two new delegate methods.


114
00:03:41,076 --> 00:03:42,646
If you link against the iOS 13


115
00:03:42,786 --> 00:03:44,366
SDK, they will be available


116
00:03:44,366 --> 00:03:48,096
starting with iOS 12, one for


117
00:03:48,096 --> 00:03:49,136
beginning a full screen


118
00:03:49,136 --> 00:03:51,686
presentation, and one that is


119
00:03:51,686 --> 00:03:52,516
called when a full screen


120
00:03:52,516 --> 00:03:53,656
presentation ends.


121
00:03:54,386 --> 00:03:55,386
So, let's take a look at an


122
00:03:55,386 --> 00:03:56,426
implementation here.


123
00:03:56,916 --> 00:03:58,356
And the key object is the


124
00:03:58,356 --> 00:03:59,716
UIViewControllerTransition


125
00:03:59,746 --> 00:04:00,316
Coordinator.


126
00:04:00,316 --> 00:04:01,896
At that works exactly the same


127
00:04:02,186 --> 00:04:03,886
as it does with any other view


128
00:04:03,886 --> 00:04:05,376
controller transition in UIKit.


129
00:04:05,376 --> 00:04:06,486
And you can learn about all


130
00:04:06,486 --> 00:04:07,446
those details and the power


131
00:04:07,446 --> 00:04:10,106
there from UIKit documentation.


132
00:04:10,106 --> 00:04:10,946
But the key thing I want to


133
00:04:10,946 --> 00:04:13,996
focus on here is the completion


134
00:04:13,996 --> 00:04:15,116
handler for the animate


135
00:04:15,116 --> 00:04:17,206
alongsideTransition callback.


136
00:04:17,206 --> 00:04:18,666
And this is where you find out


137
00:04:18,666 --> 00:04:21,356
whether a transition succeeded


138
00:04:21,596 --> 00:04:23,046
or whether the user cancelled


139
00:04:23,046 --> 00:04:23,216
it.


140
00:04:23,216 --> 00:04:24,706
And this is the source of truth


141
00:04:24,766 --> 00:04:26,396
for learning about entering full


142
00:04:26,396 --> 00:04:27,396
screen from an inline


143
00:04:27,576 --> 00:04:28,256
presentation.


144
00:04:29,306 --> 00:04:31,636
And obviously it's interesting


145
00:04:31,636 --> 00:04:33,266
to know whether the player view


146
00:04:33,266 --> 00:04:35,366
controller is full screen or


147
00:04:35,476 --> 00:04:37,706
whether it is embedded inline.


148
00:04:37,706 --> 00:04:39,486
But why is it crucial?


149
00:04:40,066 --> 00:04:41,906
It's important because, let's


150
00:04:41,906 --> 00:04:43,646
take the case of where your


151
00:04:43,646 --> 00:04:45,166
player view controller may have


152
00:04:45,166 --> 00:04:46,116
been in a scroll view.


153
00:04:46,336 --> 00:04:47,896
And the user has entered full


154
00:04:47,896 --> 00:04:48,376
screen.


155
00:04:48,606 --> 00:04:50,056
When the device rotates, as you


156
00:04:50,056 --> 00:04:51,606
know, sometimes your scroll


157
00:04:51,606 --> 00:04:52,866
view's offset might change.


158
00:04:52,866 --> 00:04:53,846
And it's possible that the


159
00:04:53,846 --> 00:04:55,356
player view controller will


160
00:04:55,356 --> 00:04:56,216
scroll offscreen.


161
00:04:56,996 --> 00:04:59,696
And that's okay for it to scroll


162
00:04:59,696 --> 00:05:00,756
offscreen during the full screen


163
00:05:00,756 --> 00:05:01,966
presentation because the user


164
00:05:01,966 --> 00:05:02,776
can't see it.


165
00:05:03,266 --> 00:05:04,796
But you need to make sure that


166
00:05:04,846 --> 00:05:06,186
the player view controller does


167
00:05:06,186 --> 00:05:07,056
stay alive.


168
00:05:07,206 --> 00:05:08,806
If it is deallocated, the full


169
00:05:08,806 --> 00:05:11,046
screen presentation will end.


170
00:05:11,736 --> 00:05:14,066
So you can use the new API to


171
00:05:14,566 --> 00:05:16,366
know when to take a strong


172
00:05:16,366 --> 00:05:17,436
reference to the player view


173
00:05:17,436 --> 00:05:20,096
controller if your table view


174
00:05:20,096 --> 00:05:21,666
controller or collection view


175
00:05:21,996 --> 00:05:24,296
happens to remove the player


176
00:05:24,296 --> 00:05:26,306
view controller if it's scrolled


177
00:05:26,306 --> 00:05:26,896
offscreen.


178
00:05:27,396 --> 00:05:28,356
But you're still left with the


179
00:05:28,356 --> 00:05:29,766
question of how do you get it


180
00:05:29,766 --> 00:05:31,866
back in place when the user


181
00:05:31,866 --> 00:05:32,746
exits full screen.


182
00:05:32,746 --> 00:05:35,036
And for that, you use the


183
00:05:35,036 --> 00:05:36,766
willEnd variant of the new API.


184
00:05:36,766 --> 00:05:38,646
And this is called the before


185
00:05:38,646 --> 00:05:39,966
the animation begins.


186
00:05:40,226 --> 00:05:42,756
So you can reset the location of


187
00:05:42,756 --> 00:05:44,486
the player view controller in


188
00:05:44,486 --> 00:05:45,596
your UI.


189
00:05:45,596 --> 00:05:46,696
And the user will be none the


190
00:05:46,696 --> 00:05:47,066
wiser.


191
00:05:47,066 --> 00:05:48,466
Everything will be back the way


192
00:05:48,776 --> 00:05:49,346
they expect.


193
00:05:50,116 --> 00:05:51,126
So those are full screen


194
00:05:51,126 --> 00:05:51,756
callbacks.


195
00:05:53,536 --> 00:05:54,756
Now let's take a look at


196
00:05:54,756 --> 00:05:56,106
AVPlayerViewController in iPad


197
00:05:56,106 --> 00:05:56,856
apps on the Mac.


198
00:05:56,856 --> 00:05:58,886
And as you know, iPad apps can


199
00:05:58,886 --> 00:06:00,146
now be built on the Mac.


200
00:06:00,596 --> 00:06:02,426
And AVPlayerViewController is a


201
00:06:02,426 --> 00:06:03,676
full participant in that.


202
00:06:04,716 --> 00:06:05,686
And here's what it looks like.


203
00:06:05,866 --> 00:06:07,516
You get the same user interface


204
00:06:07,746 --> 00:06:09,916
that you expect from Apple's


205
00:06:09,916 --> 00:06:11,266
playback UIs with all the


206
00:06:11,266 --> 00:06:12,606
functionality that


207
00:06:12,606 --> 00:06:15,036
AVPlayerViewController delivers


208
00:06:15,166 --> 00:06:15,916
for iPad apps.


209
00:06:15,966 --> 00:06:17,766
But you also get some platform


210
00:06:17,926 --> 00:06:19,386
specific features for Mac.


211
00:06:19,746 --> 00:06:22,176
Things like touch bar support,


212
00:06:22,176 --> 00:06:23,066
which you get for free.


213
00:06:24,146 --> 00:06:25,296
And keyboard support.


214
00:06:27,246 --> 00:06:28,756
And we've also added


215
00:06:29,086 --> 00:06:31,326
picture-in-picture support to


216
00:06:32,496 --> 00:06:34,206
iPad apps on the Mac.


217
00:06:34,666 --> 00:06:35,926
In fact, we've extended


218
00:06:35,926 --> 00:06:37,296
picture-in-picture support to


219
00:06:37,576 --> 00:06:40,256
all UIKit and APPKit-based apps


220
00:06:40,256 --> 00:06:41,396
on the Mac for this release.


221
00:06:42,696 --> 00:06:44,176
And how many new lines of code


222
00:06:44,176 --> 00:06:45,266
to you need to use


223
00:06:45,266 --> 00:06:47,266
AVPlayerViewController in an


224
00:06:47,266 --> 00:06:48,986
iPad app on the Mac?


225
00:06:49,956 --> 00:06:50,416
You guessed it.


226
00:06:51,006 --> 00:06:51,206
None.


227
00:06:52,516 --> 00:06:55,776
[ Applause ]


228
00:06:56,276 --> 00:06:58,436
So that's AVPlayerViewController


229
00:06:58,436 --> 00:06:59,576
and iPad apps on the Mac.


230
00:07:00,506 --> 00:07:01,646
Now let's talk about external


231
00:07:01,646 --> 00:07:02,186
metadata.


232
00:07:02,556 --> 00:07:05,056
And to motivate this, imagine


233
00:07:05,056 --> 00:07:06,906
that your AirPlaying content.


234
00:07:07,306 --> 00:07:09,446
And imagine when you did that,


235
00:07:09,706 --> 00:07:11,576
your locked screen looked like


236
00:07:11,576 --> 00:07:15,306
this, instead of like this.


237
00:07:15,856 --> 00:07:17,986
And there's two things that make


238
00:07:18,116 --> 00:07:20,076
it possible to show this UI.


239
00:07:20,076 --> 00:07:20,966
The first thing is you need to


240
00:07:20,966 --> 00:07:22,816
handle remote control commands.


241
00:07:23,216 --> 00:07:24,846
And AVKit handles that for you


242
00:07:24,846 --> 00:07:26,096
automatically for free.


243
00:07:26,096 --> 00:07:27,336
You don't have to do anything.


244
00:07:28,186 --> 00:07:29,616
But you also sometimes have


245
00:07:29,616 --> 00:07:31,166
media that doesn't have all the


246
00:07:31,166 --> 00:07:32,816
metadata that you would want to


247
00:07:32,816 --> 00:07:34,076
publish baked in.


248
00:07:34,496 --> 00:07:37,186
And for that, we're adding this


249
00:07:37,186 --> 00:07:38,296
new API to iOS.


250
00:07:38,296 --> 00:07:41,946
It's actually existed on tvOS.


251
00:07:42,226 --> 00:07:44,776
And you take your AVPlayerItem.


252
00:07:44,856 --> 00:07:47,136
And you can supplement metadata


253
00:07:47,136 --> 00:07:48,636
with things like title,


254
00:07:48,796 --> 00:07:51,236
metadata, or artwork metadata.


255
00:07:51,486 --> 00:07:52,406
It's super easy.


256
00:07:52,406 --> 00:07:54,286
And when you do that, we'll take


257
00:07:54,286 --> 00:07:57,966
care of the rest.


258
00:07:58,236 --> 00:08:02,006
We've also, in iOS 13, improved


259
00:08:02,006 --> 00:08:04,446
support for interactive -- for


260
00:08:04,616 --> 00:08:06,236
custom controls from


261
00:08:06,236 --> 00:08:07,416
AVPlayerViewController.


262
00:08:07,596 --> 00:08:08,776
That's always been possible to


263
00:08:08,776 --> 00:08:10,746
do, use custom controls with


264
00:08:10,746 --> 00:08:13,146
AVPlayerViewController on iOS.


265
00:08:13,676 --> 00:08:15,456
But when you did that, you lost


266
00:08:15,456 --> 00:08:16,726
all the other things that


267
00:08:16,726 --> 00:08:18,136
weren't onscreen.


268
00:08:18,656 --> 00:08:20,246
Things like interactive


269
00:08:20,246 --> 00:08:21,096
dismissals.


270
00:08:21,416 --> 00:08:23,706
Or landscape support.


271
00:08:24,626 --> 00:08:25,996
Things like keyboard.


272
00:08:26,356 --> 00:08:27,296
And now in


273
00:08:27,366 --> 00:08:30,066
AVPlayerViewController on iPad


274
00:08:30,066 --> 00:08:31,306
apps for the Mac, touch bar


275
00:08:31,306 --> 00:08:31,696
support.


276
00:08:31,696 --> 00:08:35,265
So, what you can do now in iOS


277
00:08:35,265 --> 00:08:37,256
13 is if you set


278
00:08:37,256 --> 00:08:38,706
showsPlaybackControls to False.


279
00:08:39,686 --> 00:08:41,426
And then you present


280
00:08:41,426 --> 00:08:43,096
AVPlayerViewController modally.


281
00:08:44,176 --> 00:08:45,856
And finally use the


282
00:08:45,856 --> 00:08:47,616
contentOverlayView as a place


283
00:08:47,616 --> 00:08:48,736
where you place your custom


284
00:08:48,736 --> 00:08:49,266
controls.


285
00:08:50,026 --> 00:08:51,276
You can have a completely custom


286
00:08:51,276 --> 00:08:53,406
playback UI but still take


287
00:08:53,406 --> 00:08:55,416
advantage of things like


288
00:08:55,506 --> 00:08:58,166
nowPlayingInfo support


289
00:08:58,166 --> 00:08:59,776
and interactive dismissals.


290
00:08:59,816 --> 00:09:01,426
But there's some things, if you


291
00:09:01,426 --> 00:09:02,706
do this, some things you should


292
00:09:02,706 --> 00:09:04,486
keep in mind.


293
00:09:04,486 --> 00:09:05,486
You still are going to need to


294
00:09:05,486 --> 00:09:08,046
take care of status bar and home


295
00:09:08,046 --> 00:09:09,686
indicator appearance.


296
00:09:09,916 --> 00:09:11,136
And you should always pass


297
00:09:11,136 --> 00:09:13,786
unhandled touches through your


298
00:09:13,786 --> 00:09:15,546
view hierarchy so that AVKit can


299
00:09:15,546 --> 00:09:17,006
handle things like interactive


300
00:09:17,006 --> 00:09:19,396
dismissals or double-tap for


301
00:09:19,396 --> 00:09:20,876
zoom, which we'll talk about in


302
00:09:20,876 --> 00:09:21,376
a little bit.


303
00:09:22,846 --> 00:09:24,846
So, that's a look at what's new


304
00:09:25,136 --> 00:09:27,246
in AVPlayerViewController on


305
00:09:27,356 --> 00:09:27,816
iOS.


306
00:09:28,246 --> 00:09:29,956
There's a bunch more things that


307
00:09:29,956 --> 00:09:30,526
we've added.


308
00:09:31,406 --> 00:09:35,246
And one of them is we've made


309
00:09:35,246 --> 00:09:36,476
great strides in improving


310
00:09:36,476 --> 00:09:38,076
performance in iOS 12.


311
00:09:38,466 --> 00:09:40,886
And it's even better on iOS 13.


312
00:09:40,886 --> 00:09:43,276
So if you're interested in using


313
00:09:43,276 --> 00:09:44,486
AVPlayerViewController in scroll


314
00:09:44,486 --> 00:09:46,466
view, it should be buttery


315
00:09:46,466 --> 00:09:47,076
smooth now.


316
00:09:48,496 --> 00:09:49,976
So, let's talk about some best


317
00:09:50,026 --> 00:09:51,056
practices with


318
00:09:51,056 --> 00:09:52,146
AVPlayerViewController.


319
00:09:54,416 --> 00:09:56,056
I want to talk about three


320
00:09:56,056 --> 00:09:57,416
different ways that we show


321
00:09:57,696 --> 00:09:59,486
video on our devices.


322
00:09:59,956 --> 00:10:01,436
And of course, there's a fourth


323
00:10:01,436 --> 00:10:03,196
way that we show video from an


324
00:10:03,196 --> 00:10:04,376
iOS device AirPlay.


325
00:10:04,376 --> 00:10:06,226
And there was a terrific talk on


326
00:10:06,226 --> 00:10:08,046
Tuesday morning at 9:00 a.m. If


327
00:10:08,046 --> 00:10:09,136
you haven't seen it, I would


328
00:10:09,136 --> 00:10:12,376
strongly recommend watching that


329
00:10:12,376 --> 00:10:12,476
talk.


330
00:10:12,476 --> 00:10:13,806
But I'm going to focus on


331
00:10:13,866 --> 00:10:15,096
on-device playback today.


332
00:10:16,146 --> 00:10:18,056
And let's start with full screen


333
00:10:18,056 --> 00:10:18,866
video playback.


334
00:10:18,866 --> 00:10:21,056
And of course, what I mean by


335
00:10:21,056 --> 00:10:22,856
that is full screen in the UIKit


336
00:10:22,856 --> 00:10:23,656
sense of the word.


337
00:10:23,946 --> 00:10:25,356
So, we're talking about covering


338
00:10:25,356 --> 00:10:27,076
your UIWindowScene coordinate


339
00:10:27,076 --> 00:10:27,576
space.


340
00:10:27,726 --> 00:10:29,296
And if we think about it,


341
00:10:29,296 --> 00:10:31,456
there's two different reasons


342
00:10:31,456 --> 00:10:32,616
why we might play a video full


343
00:10:32,616 --> 00:10:33,086
screen.


344
00:10:33,676 --> 00:10:35,046
It could be for sort of a


345
00:10:35,046 --> 00:10:36,376
background video in a splash


346
00:10:36,376 --> 00:10:37,186
screen scenario.


347
00:10:37,536 --> 00:10:39,146
Or because the video is the star


348
00:10:39,146 --> 00:10:39,686
of the show.


349
00:10:39,686 --> 00:10:41,056
And we want full playback


350
00:10:41,056 --> 00:10:41,556
controls.


351
00:10:41,556 --> 00:10:43,306
And let's take a quick look at


352
00:10:43,306 --> 00:10:44,976
the splash screen scenario.


353
00:10:45,426 --> 00:10:47,866
And you're going to have set of


354
00:10:47,866 --> 00:10:49,766
these things that you're going


355
00:10:49,806 --> 00:10:52,606
to want to implement in your


356
00:10:52,606 --> 00:10:53,406
application.


357
00:10:54,136 --> 00:10:56,286
And to do that, you're going to


358
00:10:56,626 --> 00:10:58,056
take the playerViewController.


359
00:10:58,426 --> 00:10:59,476
You're going to embed it as a


360
00:10:59,476 --> 00:10:59,936
child.


361
00:10:59,936 --> 00:11:01,006
So it can be at the bottom of


362
00:11:01,006 --> 00:11:02,126
your view hierarchy.


363
00:11:02,526 --> 00:11:03,356
You're going to do things like


364
00:11:03,446 --> 00:11:05,466
disabling playback controls and


365
00:11:05,646 --> 00:11:07,116
setting the video gravity so


366
00:11:07,116 --> 00:11:08,526
that the video scales to fill


367
00:11:08,526 --> 00:11:09,446
the full screen.


368
00:11:10,296 --> 00:11:11,226
If you're using the new video


369
00:11:11,226 --> 00:11:12,876
with alpha APIs that are new in


370
00:11:12,876 --> 00:11:13,956
this release, you're going to


371
00:11:13,956 --> 00:11:15,246
want to set your view's


372
00:11:15,246 --> 00:11:17,296
background color to clear or


373
00:11:17,296 --> 00:11:19,146
some other color to leverage


374
00:11:19,146 --> 00:11:19,396
that.


375
00:11:21,016 --> 00:11:22,226
And there's some things to take


376
00:11:22,226 --> 00:11:23,956
into account with AVFoundation.


377
00:11:24,456 --> 00:11:25,356
You always want to make sure to


378
00:11:25,356 --> 00:11:27,436
prevent external playback with


379
00:11:27,436 --> 00:11:28,566
something that is playing as a


380
00:11:28,566 --> 00:11:29,396
splash screen.


381
00:11:29,716 --> 00:11:30,276
Because you don't want to


382
00:11:30,276 --> 00:11:32,026
interrupt, say, music playing on


383
00:11:32,026 --> 00:11:33,086
someone's Apple TV.


384
00:11:33,306 --> 00:11:35,316
And you want to configure the


385
00:11:35,316 --> 00:11:36,136
audio session.


386
00:11:36,136 --> 00:11:37,876
And especially this last


387
00:11:37,986 --> 00:11:41,836
property on AVAudioSession, that


388
00:11:42,066 --> 00:11:43,746
this secondary audio should be


389
00:11:43,746 --> 00:11:44,216
silenced.


390
00:11:44,216 --> 00:11:45,966
It lets you know if the user is


391
00:11:46,026 --> 00:11:47,776
playing audio from some other


392
00:11:47,776 --> 00:11:48,566
application.


393
00:11:48,846 --> 00:11:50,206
And they want that application


394
00:11:50,206 --> 00:11:51,476
to be -- that audio to be


395
00:11:51,476 --> 00:11:52,026
primary.


396
00:11:52,656 --> 00:11:53,946
In that case, if you have audio


397
00:11:53,946 --> 00:11:55,056
in your splash screen video,


398
00:11:55,216 --> 00:11:57,236
make sure to mute it.


399
00:11:58,056 --> 00:11:59,546
But then, let's look at full


400
00:11:59,546 --> 00:12:01,036
screen playback where the video


401
00:12:01,036 --> 00:12:01,986
is the star of the show.


402
00:12:01,986 --> 00:12:03,046
And when we do this, of course


403
00:12:03,046 --> 00:12:06,456
we want playback UI that adapts


404
00:12:06,886 --> 00:12:08,446
beautifully whether it's a


405
00:12:08,446 --> 00:12:10,506
portrait presentation like this


406
00:12:10,506 --> 00:12:12,696
where we have a stacked playback


407
00:12:12,816 --> 00:12:14,326
transport controls.


408
00:12:14,726 --> 00:12:16,696
Or we're in landscape and we


409
00:12:16,696 --> 00:12:18,596
need a slightly different layout


410
00:12:18,596 --> 00:12:20,086
but the same -- but we need to


411
00:12:20,196 --> 00:12:21,716
deliver the same functionality.


412
00:12:22,406 --> 00:12:23,806
So AVPlayerViewController


413
00:12:24,396 --> 00:12:26,446
delivers this to you for free.


414
00:12:26,916 --> 00:12:28,646
And it also does things like,


415
00:12:28,646 --> 00:12:31,266
you'll notice in those two


416
00:12:31,336 --> 00:12:34,256
screen shots the video was


417
00:12:34,806 --> 00:12:36,066
unzoomed in portrait.


418
00:12:36,066 --> 00:12:37,976
And now it's zoomed in


419
00:12:38,206 --> 00:12:38,836
landscape.


420
00:12:39,566 --> 00:12:40,546
And it's zoomed to fill the


421
00:12:40,546 --> 00:12:42,096
entire screen because the user


422
00:12:42,096 --> 00:12:43,946
has generally, in this case, has


423
00:12:44,006 --> 00:12:46,766
played video that is of similar


424
00:12:46,766 --> 00:12:48,186
aspect ratio to the device


425
00:12:48,186 --> 00:12:50,976
aspect ratio in a zoomed format.


426
00:12:51,286 --> 00:12:53,446
But some users prefer to have


427
00:12:53,826 --> 00:12:56,856
video unzoomed, like here.


428
00:12:57,136 --> 00:12:58,406
And when that happens we want to


429
00:12:58,406 --> 00:13:00,836
make sure that the video isn't


430
00:13:00,836 --> 00:13:02,856
occluded by any physical


431
00:13:02,856 --> 00:13:04,116
characteristic of the device.


432
00:13:04,706 --> 00:13:07,036
AVKit is aware of all these


433
00:13:07,036 --> 00:13:08,186
things and takes care of that


434
00:13:08,186 --> 00:13:09,276
for you when you're using


435
00:13:09,746 --> 00:13:10,756
PlayerViewController.


436
00:13:10,816 --> 00:13:12,086
But rather than running through


437
00:13:12,496 --> 00:13:14,306
every feature that we provide, I


438
00:13:14,306 --> 00:13:15,966
just want to zoom in on two very


439
00:13:15,966 --> 00:13:17,816
small things that we added in


440
00:13:17,896 --> 00:13:18,856
iOS 13.


441
00:13:19,416 --> 00:13:22,876
The first -- in this video,


442
00:13:23,096 --> 00:13:24,516
you're going to hear audio


443
00:13:24,556 --> 00:13:24,956
playing.


444
00:13:24,956 --> 00:13:26,186
And the user's going to tap the


445
00:13:26,186 --> 00:13:26,766
Mute button.


446
00:13:26,996 --> 00:13:30,276
Notice when it mutes, there's a


447
00:13:30,366 --> 00:13:32,166
subtle ramp to the audio.


448
00:13:32,826 --> 00:13:35,206
And there's an animation in the


449
00:13:35,616 --> 00:13:36,256
volume slider.


450
00:13:37,516 --> 00:13:40,546
[ Music ]


451
00:13:41,046 --> 00:13:43,456
And then in this example,


452
00:13:43,456 --> 00:13:44,286
there's an interactive


453
00:13:44,286 --> 00:13:44,886
dismissal.


454
00:13:44,886 --> 00:13:45,966
And notice that the audio


455
00:13:45,966 --> 00:13:48,366
gracefully fades with the user's


456
00:13:48,656 --> 00:13:49,146
dismissal.


457
00:13:49,146 --> 00:13:50,226
And then when the user cancels


458
00:13:50,226 --> 00:13:51,526
the dismissal, the audio comes


459
00:13:51,526 --> 00:13:52,686
back up.


460
00:13:53,516 --> 00:14:04,296
[ Music ]


461
00:14:04,796 --> 00:14:06,726
So those are two small things,


462
00:14:06,726 --> 00:14:08,466
but they illustrate the level of


463
00:14:08,466 --> 00:14:09,706
attention to detail that we're


464
00:14:09,706 --> 00:14:10,746
able to give to


465
00:14:10,746 --> 00:14:11,916
AVPlayerViewController and that


466
00:14:11,916 --> 00:14:14,036
your users will get for free if


467
00:14:14,036 --> 00:14:15,796
you're able to adopt it in your


468
00:14:15,796 --> 00:14:16,126
app.


469
00:14:17,816 --> 00:14:20,216
You get a whole bunch of other


470
00:14:20,216 --> 00:14:20,356
things.


471
00:14:20,356 --> 00:14:22,586
And the question that you might


472
00:14:22,586 --> 00:14:23,986
ask is how do you get all of


473
00:14:23,986 --> 00:14:24,466
this?


474
00:14:24,786 --> 00:14:26,416
And let's take another look at


475
00:14:26,416 --> 00:14:26,736
code.


476
00:14:28,566 --> 00:14:30,446
So, this is basically the same


477
00:14:30,446 --> 00:14:31,716
thing that I showed earlier in


478
00:14:31,776 --> 00:14:32,506
the talk.


479
00:14:33,126 --> 00:14:34,136
The only addition is this


480
00:14:34,136 --> 00:14:35,216
external metadata.


481
00:14:35,396 --> 00:14:36,336
This line allows you to


482
00:14:36,496 --> 00:14:38,916
supplement your metadata.


483
00:14:39,486 --> 00:14:41,366
And it really is that easy to


484
00:14:41,366 --> 00:14:42,006
get started.


485
00:14:43,486 --> 00:14:45,056
But it's worth talking about why


486
00:14:45,056 --> 00:14:47,206
it's possible for you to do so


487
00:14:47,206 --> 00:14:50,416
little on the UI side and to get


488
00:14:50,416 --> 00:14:51,506
such a good experience.


489
00:14:51,846 --> 00:14:53,416
And so, for that I want to talk


490
00:14:53,416 --> 00:14:55,746
about a couple of best practices


491
00:14:55,746 --> 00:14:55,906
here.


492
00:14:56,446 --> 00:14:57,696
So, when you use


493
00:14:57,696 --> 00:14:59,246
AVPlayerViewController for a


494
00:14:59,246 --> 00:15:00,276
full screen presentation you


495
00:15:00,276 --> 00:15:01,396
should always present it


496
00:15:01,396 --> 00:15:03,506
modally, not as a child view


497
00:15:03,506 --> 00:15:05,026
controller of some other view


498
00:15:05,026 --> 00:15:05,566
controller.


499
00:15:06,076 --> 00:15:07,226
And sometimes you may have done


500
00:15:07,226 --> 00:15:08,376
that because you wanted to learn


501
00:15:08,376 --> 00:15:10,666
about presentation state, which


502
00:15:10,666 --> 00:15:11,466
you can now do with the


503
00:15:11,466 --> 00:15:13,546
callbacks that I discussed


504
00:15:13,546 --> 00:15:14,016
earlier.


505
00:15:14,866 --> 00:15:16,276
Presenting modally lets us


506
00:15:16,386 --> 00:15:17,816
handle things like status bar


507
00:15:17,816 --> 00:15:18,656
visibility.


508
00:15:18,656 --> 00:15:20,436
Let's us optimize the screen's


509
00:15:20,716 --> 00:15:21,816
display mode.


510
00:15:22,066 --> 00:15:25,156
It lets us handle video gravity,


511
00:15:25,156 --> 00:15:27,806
video zoom mode, interactive


512
00:15:27,806 --> 00:15:28,496
dismissals.


513
00:15:29,166 --> 00:15:30,776
And when you are presenting


514
00:15:31,036 --> 00:15:33,166
modally full screen, you should


515
00:15:33,166 --> 00:15:35,246
use the default modal


516
00:15:35,246 --> 00:15:36,086
presentation style.


517
00:15:36,086 --> 00:15:38,676
As you may know, in iOS 13, the


518
00:15:38,676 --> 00:15:40,906
new default modal presentation


519
00:15:40,906 --> 00:15:42,486
style is automatic.


520
00:15:43,076 --> 00:15:44,746
And what that resolves to for


521
00:15:44,746 --> 00:15:46,836
AVPlayerViewController is a full


522
00:15:46,836 --> 00:15:47,826
screen presentation.


523
00:15:48,856 --> 00:15:50,106
And there's two types of full


524
00:15:50,106 --> 00:15:51,456
screen presentations: Full


525
00:15:51,456 --> 00:15:53,386
screen and over full screen.


526
00:15:53,966 --> 00:15:55,336
The reason why you want to use


527
00:15:55,486 --> 00:15:58,036
the default is because when your


528
00:15:58,036 --> 00:15:59,836
view controller is presented,


529
00:15:59,836 --> 00:16:01,966
the presenting view can be


530
00:16:01,966 --> 00:16:03,506
removed by UIKit.


531
00:16:04,026 --> 00:16:06,706
This allows, because your view


532
00:16:06,706 --> 00:16:09,676
is covering the newly presented


533
00:16:10,006 --> 00:16:12,206
view hierarchy, removing the


534
00:16:12,206 --> 00:16:13,026
presenting view is an


535
00:16:13,026 --> 00:16:14,606
optimization during rotation.


536
00:16:14,606 --> 00:16:16,386
You don't want to do layout when


537
00:16:16,386 --> 00:16:17,486
your view's not even visible.


538
00:16:17,866 --> 00:16:19,526
But it also allows things like


539
00:16:19,526 --> 00:16:21,306
landscape playback if your app


540
00:16:21,306 --> 00:16:22,906
is otherwise portrait only or


541
00:16:22,906 --> 00:16:24,476
this view controller hierarchy


542
00:16:24,476 --> 00:16:26,046
is otherwise portrait only.


543
00:16:27,746 --> 00:16:29,326
It's also best just to leave the


544
00:16:29,326 --> 00:16:30,866
video gravity property alone for


545
00:16:30,896 --> 00:16:31,886
full screen playback.


546
00:16:32,206 --> 00:16:34,146
That allows us to do automatic


547
00:16:34,146 --> 00:16:35,606
behaviors like I was


548
00:16:35,606 --> 00:16:36,766
illustrating before.


549
00:16:37,196 --> 00:16:39,326
If you set the video gravity,


550
00:16:39,326 --> 00:16:40,506
we'll give you exactly what you


551
00:16:40,506 --> 00:16:40,886
want.


552
00:16:40,886 --> 00:16:42,376
We'll zoom the video or unzoom


553
00:16:42,376 --> 00:16:42,766
the video.


554
00:16:42,766 --> 00:16:43,726
But once you do that, the


555
00:16:43,726 --> 00:16:45,046
automatic behavior, we can't do


556
00:16:45,046 --> 00:16:46,416
the automatic behavior anymore.


557
00:16:46,736 --> 00:16:48,236
So your users generally would


558
00:16:48,236 --> 00:16:49,466
prefer to have the automatic


559
00:16:49,906 --> 00:16:50,656
behavior.


560
00:16:51,096 --> 00:16:52,496
And of course, use the new


561
00:16:52,576 --> 00:16:53,736
delegate methods to track the


562
00:16:53,736 --> 00:16:55,076
full screen presentation state.


563
00:16:56,176 --> 00:16:59,506
A couple of tips related to


564
00:16:59,506 --> 00:17:01,376
AVFoundation best practices


565
00:17:01,376 --> 00:17:01,616
here.


566
00:17:02,206 --> 00:17:04,796
What this one is about, the way


567
00:17:04,796 --> 00:17:06,546
I think about it, is if you're


568
00:17:06,546 --> 00:17:08,356
starting a video, say halfway


569
00:17:08,356 --> 00:17:11,476
into the video, seek the player


570
00:17:11,476 --> 00:17:14,046
item to the resume time before


571
00:17:14,316 --> 00:17:15,425
setting it on the player.


572
00:17:15,425 --> 00:17:16,606
And make sure you're going to


573
00:17:16,606 --> 00:17:17,705
have a playing player that it's


574
00:17:17,705 --> 00:17:18,455
already playing.


575
00:17:18,455 --> 00:17:20,215
And then provide that to


576
00:17:20,215 --> 00:17:21,316
AVPlayerViewController.


577
00:17:21,316 --> 00:17:22,776
And this allows the UI to look


578
00:17:23,126 --> 00:17:23,406
correct.


579
00:17:23,406 --> 00:17:24,465
And more importantly, it avoids


580
00:17:24,465 --> 00:17:27,636
loading content that isn't going


581
00:17:27,636 --> 00:17:28,676
to end up being played.


582
00:17:30,006 --> 00:17:32,426
You should also always observe


583
00:17:32,426 --> 00:17:35,126
AVPlayer's and AVPlayerItem


584
00:17:35,126 --> 00:17:36,106
status property.


585
00:17:36,906 --> 00:17:39,356
Though you can use KVO to


586
00:17:39,356 --> 00:17:39,876
observe them.


587
00:17:39,876 --> 00:17:41,766
When they fail, when the


588
00:17:41,766 --> 00:17:43,156
property status becomes failed,


589
00:17:43,646 --> 00:17:45,286
there's an easy path to recovery


590
00:17:45,286 --> 00:17:46,126
in many cases.


591
00:17:46,386 --> 00:17:47,566
Check the error property.


592
00:17:47,916 --> 00:17:49,416
See if media services were


593
00:17:49,416 --> 00:17:49,806
reset.


594
00:17:49,806 --> 00:17:51,986
And if so, just rebuild your


595
00:17:51,986 --> 00:17:52,996
player, player item, your


596
00:17:52,996 --> 00:17:55,036
AVFoundation object ref and set


597
00:17:55,036 --> 00:17:55,446
it back on the


598
00:17:55,446 --> 00:17:56,616
PlayerViewController and


599
00:17:56,896 --> 00:17:59,976
everything should be fine.


600
00:18:00,046 --> 00:18:02,576
And this property gives you an


601
00:18:02,576 --> 00:18:04,356
optimized video rendering when


602
00:18:04,706 --> 00:18:05,576
you're mirroring.


603
00:18:06,116 --> 00:18:10,716
And of course, always configure


604
00:18:10,716 --> 00:18:12,026
your audio session for playback.


605
00:18:12,776 --> 00:18:18,056
So, when we talk about embedding


606
00:18:18,256 --> 00:18:19,726
AVPlayerViewController inline,


607
00:18:19,886 --> 00:18:20,956
there's a little bit more to


608
00:18:20,956 --> 00:18:21,446
consider.


609
00:18:22,266 --> 00:18:25,356
And we've already talked about


610
00:18:25,356 --> 00:18:28,466
the full screen, new full screen


611
00:18:28,466 --> 00:18:30,626
presentation state callbacks in


612
00:18:30,626 --> 00:18:31,516
iOS 13.


613
00:18:32,376 --> 00:18:34,236
So I won't go over those again.


614
00:18:34,236 --> 00:18:35,976
But, one thing I want to touch


615
00:18:35,976 --> 00:18:37,156
on is if you've used


616
00:18:37,156 --> 00:18:38,326
AVPlayerViewController in the


617
00:18:38,326 --> 00:18:41,566
past, when we enter full screen


618
00:18:41,896 --> 00:18:42,926
from an embedded inline


619
00:18:42,926 --> 00:18:44,246
presentation, the modal


620
00:18:44,246 --> 00:18:46,296
transition style has been in


621
00:18:46,296 --> 00:18:47,796
over full screen style, which


622
00:18:47,796 --> 00:18:49,056
means that your view, your


623
00:18:49,296 --> 00:18:50,746
presenting view, isn't removed.


624
00:18:50,986 --> 00:18:53,326
If your app links against iOS


625
00:18:53,326 --> 00:18:55,206
13, the default presentation


626
00:18:55,206 --> 00:18:57,316
style now will be full screen.


627
00:18:57,316 --> 00:18:58,426
Which means that the presenting


628
00:18:58,426 --> 00:18:59,416
view might be removed.


629
00:18:59,416 --> 00:19:00,606
And that has all the benefits


630
00:19:00,646 --> 00:19:01,876
that I talked about earlier.


631
00:19:02,866 --> 00:19:04,566
So, ideally you'll be able to


632
00:19:04,566 --> 00:19:07,216
leave this modal presentation


633
00:19:07,216 --> 00:19:08,946
style as full screen.


634
00:19:09,086 --> 00:19:10,446
But if you don't, it's okay.


635
00:19:10,446 --> 00:19:12,126
You can still set it to over


636
00:19:12,126 --> 00:19:12,696
full screen.


637
00:19:12,976 --> 00:19:14,106
But the recommendation is to


638
00:19:14,106 --> 00:19:15,096
just stick with the default.


639
00:19:17,746 --> 00:19:19,036
Another thing to consider is


640
00:19:19,496 --> 00:19:20,696
when you have an embedded


641
00:19:20,826 --> 00:19:23,596
presentation, your video, you


642
00:19:23,596 --> 00:19:25,506
may want to zoom the video so


643
00:19:25,506 --> 00:19:26,946
that you don't have black bars


644
00:19:26,946 --> 00:19:28,286
on top or on bottom.


645
00:19:28,976 --> 00:19:30,216
You also might want to have


646
00:19:30,216 --> 00:19:32,926
things like a corner curve to


647
00:19:32,926 --> 00:19:35,776
the video's view port.


648
00:19:36,486 --> 00:19:38,736
And also, you may want to set


649
00:19:38,736 --> 00:19:40,316
the background color of the


650
00:19:40,316 --> 00:19:40,656
view.


651
00:19:41,006 --> 00:19:42,656
You can do all that to


652
00:19:42,656 --> 00:19:44,106
AVPlayerViewController's view or


653
00:19:44,106 --> 00:19:45,736
to the video gravity when it's


654
00:19:45,776 --> 00:19:46,806
embedded inline.


655
00:19:47,106 --> 00:19:48,446
And we'll use that for the


656
00:19:48,706 --> 00:19:50,326
inline part of the presentation.


657
00:19:51,026 --> 00:19:52,486
If the user decides to go full


658
00:19:52,486 --> 00:19:53,916
screen, then we'll do the right


659
00:19:53,916 --> 00:19:54,306
thing there.


660
00:19:54,306 --> 00:19:56,496
So, in contrast to, if you're


661
00:19:56,496 --> 00:19:57,426
just presenting


662
00:19:57,426 --> 00:19:58,576
AVPlayerViewController full


663
00:19:58,576 --> 00:20:01,006
screen, it's okay to -- you can


664
00:20:01,006 --> 00:20:02,066
change these properties for the


665
00:20:02,126 --> 00:20:02,996
inline portion of the


666
00:20:02,996 --> 00:20:03,676
presentation.


667
00:20:03,886 --> 00:20:06,496
No problem at all.


668
00:20:08,166 --> 00:20:09,616
We also have a couple of


669
00:20:10,006 --> 00:20:11,966
properties that provide


670
00:20:11,966 --> 00:20:14,336
automatic behavior when you have


671
00:20:14,336 --> 00:20:15,636
an inline presentation.


672
00:20:15,906 --> 00:20:18,266
And these allow you to do things


673
00:20:18,266 --> 00:20:20,006
like, if the user taps a big


674
00:20:20,006 --> 00:20:21,316
play button, the


675
00:20:21,316 --> 00:20:23,166
PlayerViewController will -- the


676
00:20:23,166 --> 00:20:23,706
content of the


677
00:20:23,706 --> 00:20:24,576
PlayerViewController will


678
00:20:24,576 --> 00:20:26,076
automatically enter full screen.


679
00:20:26,806 --> 00:20:29,156
And similarly, at the end of the


680
00:20:29,156 --> 00:20:31,616
video, will exit full screen.


681
00:20:32,026 --> 00:20:34,696
And it's really best for us to


682
00:20:34,906 --> 00:20:36,066
handle those things on your


683
00:20:36,066 --> 00:20:36,386
behalf.


684
00:20:36,486 --> 00:20:37,886
Because for example, let's say


685
00:20:37,886 --> 00:20:40,626
that a user is scrubbing to the


686
00:20:40,626 --> 00:20:41,476
end of a video.


687
00:20:42,316 --> 00:20:43,176
Well, the time's going to be the


688
00:20:43,176 --> 00:20:44,776
end of the video, but you don't


689
00:20:44,776 --> 00:20:46,616
want to dismiss the video at


690
00:20:46,616 --> 00:20:47,106
that point.


691
00:20:47,106 --> 00:20:48,306
Because they're probably just


692
00:20:48,306 --> 00:20:49,006
seeking around.


693
00:20:49,276 --> 00:20:50,586
We keep track of what the user


694
00:20:50,586 --> 00:20:51,056
is doing.


695
00:20:51,056 --> 00:20:52,946
And we'll only exit if it's


696
00:20:53,106 --> 00:20:53,726
appropriate.


697
00:20:57,046 --> 00:20:57,866
Of course, you're always going


698
00:20:57,866 --> 00:20:58,566
to want to adopt


699
00:20:58,756 --> 00:21:00,646
UIViewController containment


700
00:21:00,646 --> 00:21:01,286
API.


701
00:21:01,806 --> 00:21:04,726
And it looks like this.


702
00:21:09,566 --> 00:21:10,786
One other thing to keep in mind


703
00:21:10,786 --> 00:21:12,406
is if you have a lot of videos


704
00:21:12,406 --> 00:21:13,516
that you're scrolling through,


705
00:21:14,056 --> 00:21:15,946
you may find that having a


706
00:21:15,946 --> 00:21:19,196
poster image is a good idea as a


707
00:21:19,196 --> 00:21:21,246
way to show a frame of the video


708
00:21:21,486 --> 00:21:23,986
without having to have the video


709
00:21:23,986 --> 00:21:24,716
fully loaded.


710
00:21:24,716 --> 00:21:25,986
And that can take a little bit


711
00:21:25,986 --> 00:21:26,556
of time.


712
00:21:27,236 --> 00:21:28,246
And so you use


713
00:21:28,246 --> 00:21:29,066
AVPlayerViewController's


714
00:21:29,066 --> 00:21:30,656
contentOverlayView for this.


715
00:21:31,086 --> 00:21:33,126
But then you want to know when


716
00:21:33,236 --> 00:21:35,886
is the video -- when is the


717
00:21:35,886 --> 00:21:37,106
first frame of video ready so


718
00:21:37,106 --> 00:21:39,706
that you can remove the content


719
00:21:39,706 --> 00:21:41,426
that you just put in the overlay


720
00:21:41,426 --> 00:21:41,696
view.


721
00:21:42,966 --> 00:21:43,926
You do that by observing


722
00:21:43,926 --> 00:21:45,836
isReadyForDisplay on


723
00:21:45,836 --> 00:21:46,816
AVPlayerViewController.


724
00:21:46,816 --> 00:21:48,136
It's a property that you can


725
00:21:48,136 --> 00:21:49,656
observe using KVO.


726
00:21:49,656 --> 00:21:51,106
And this is what it looks like


727
00:21:51,136 --> 00:21:51,836
to observe it.


728
00:21:52,086 --> 00:21:52,766
You always want to take the


729
00:21:52,766 --> 00:21:53,916
initial value because it could


730
00:21:53,916 --> 00:21:55,686
be the video frame is already


731
00:21:55,866 --> 00:21:56,276
rendered.


732
00:22:00,506 --> 00:22:01,636
I want to finish by talking a


733
00:22:01,636 --> 00:22:02,166
little bit about


734
00:22:02,166 --> 00:22:03,026
picture-in-picture, which is


735
00:22:03,026 --> 00:22:04,836
super easy to add to your app.


736
00:22:04,836 --> 00:22:06,236
AVPlayerViewController takes


737
00:22:06,266 --> 00:22:08,326
care of most things for you.


738
00:22:08,326 --> 00:22:09,916
You do have to configure your


739
00:22:09,916 --> 00:22:10,876
application to support


740
00:22:10,876 --> 00:22:11,526
picture-in-picture.


741
00:22:11,526 --> 00:22:12,266
And it looks like this.


742
00:22:12,266 --> 00:22:14,566
Just click a check box in XCode.


743
00:22:16,666 --> 00:22:19,476
One thing, this applies whether


744
00:22:19,476 --> 00:22:20,066
you're using


745
00:22:20,066 --> 00:22:22,186
AVPictureInPictureController or


746
00:22:22,186 --> 00:22:23,206
AVPlayerViewController.


747
00:22:23,556 --> 00:22:26,206
When a user swipes up to go home


748
00:22:26,456 --> 00:22:29,566
in iPad, picture-in-picture may


749
00:22:29,566 --> 00:22:30,636
automatically start.


750
00:22:30,636 --> 00:22:33,116
And that means when your app is


751
00:22:33,116 --> 00:22:34,876
entering background, you should


752
00:22:34,876 --> 00:22:37,106
not pause any playing video.


753
00:22:37,646 --> 00:22:38,606
Because picture-in-picture may


754
00:22:38,606 --> 00:22:39,066
be starting.


755
00:22:39,066 --> 00:22:40,276
You don't want to pause the very


756
00:22:40,276 --> 00:22:42,396
video that your user is trying


757
00:22:42,396 --> 00:22:43,326
to keep on watching.


758
00:22:43,686 --> 00:22:45,606
So, don't pause.


759
00:22:45,976 --> 00:22:48,006
And AVFoundation will take care


760
00:22:48,006 --> 00:22:48,746
of this for you.


761
00:22:49,066 --> 00:22:50,286
But if you absolutely must


762
00:22:50,316 --> 00:22:51,806
pause, you should wait for the


763
00:22:52,176 --> 00:22:53,686
application's background state,


764
00:22:54,046 --> 00:22:56,266
application state, or the window


765
00:22:56,306 --> 00:22:57,526
scene state to reach background.


766
00:22:57,526 --> 00:22:58,856
And this is how you do that.


767
00:23:01,556 --> 00:23:02,736
You can track state about


768
00:23:02,736 --> 00:23:04,946
whether you're in


769
00:23:04,946 --> 00:23:06,036
picture-picture or leaving


770
00:23:06,036 --> 00:23:08,456
picture-picture using the


771
00:23:08,456 --> 00:23:09,746
AVPlayerViewControllerDelegate.


772
00:23:11,136 --> 00:23:12,106
And always toggle


773
00:23:12,316 --> 00:23:13,486
PictureInPicture Playback.


774
00:23:15,666 --> 00:23:16,966
Be prepared for your view


775
00:23:16,966 --> 00:23:18,576
controller to dismiss when


776
00:23:18,576 --> 00:23:20,526
picture-in-picture is starting.


777
00:23:21,056 --> 00:23:22,466
And unlike in the full screen


778
00:23:22,466 --> 00:23:23,576
case, we will prevent


779
00:23:23,616 --> 00:23:24,466
deallocation of


780
00:23:24,466 --> 00:23:26,876
AVPlayerViewController while


781
00:23:27,946 --> 00:23:30,266
picture-in-picture is active.


782
00:23:30,826 --> 00:23:32,506
But if the view controller's


783
00:23:32,506 --> 00:23:33,656
been dismissed, you're going to


784
00:23:33,656 --> 00:23:35,446
want to restore the UI when the


785
00:23:35,446 --> 00:23:37,956
user wants to go back to your


786
00:23:37,956 --> 00:23:38,356
app.


787
00:23:38,356 --> 00:23:39,906
And so, it's really easy to do


788
00:23:39,906 --> 00:23:40,166
that.


789
00:23:40,636 --> 00:23:41,736
This is the callback you're


790
00:23:41,736 --> 00:23:42,516
going to get


791
00:23:42,516 --> 00:23:43,786
AVPlayerViewControllerDelegate.


792
00:23:44,086 --> 00:23:45,396
And all you have to do here is


793
00:23:45,686 --> 00:23:47,526
get your UI back into a state


794
00:23:47,526 --> 00:23:49,206
that works, that is what you


795
00:23:49,206 --> 00:23:49,506
want.


796
00:23:49,696 --> 00:23:50,486
In this case we're just


797
00:23:50,566 --> 00:23:51,686
presenting the view controller


798
00:23:51,686 --> 00:23:51,846
again.


799
00:23:51,846 --> 00:23:53,606
And then when you're ready, call


800
00:23:53,606 --> 00:23:54,886
the completion handler that is


801
00:23:54,886 --> 00:23:56,226
passed into the callback.


802
00:23:56,726 --> 00:23:58,096
Let us know that you're ready to


803
00:23:58,096 --> 00:23:58,376
go.


804
00:23:58,376 --> 00:23:59,846
And we will animate back in


805
00:23:59,846 --> 00:24:00,116
place.


806
00:24:00,116 --> 00:24:01,316
You need to do it fairly


807
00:24:01,316 --> 00:24:02,736
quickly, otherwise the


808
00:24:02,736 --> 00:24:03,846
picture-in-picture window might


809
00:24:03,846 --> 00:24:05,266
just go oop!


810
00:24:05,506 --> 00:24:07,576
And no more picture-in-picture


811
00:24:07,576 --> 00:24:08,126
for your user.


812
00:24:08,126 --> 00:24:09,096
And they're not able to get back


813
00:24:09,096 --> 00:24:11,866
to your app.


814
00:24:13,456 --> 00:24:15,716
So, that's a look at what's new


815
00:24:15,876 --> 00:24:17,126
in best practices for


816
00:24:17,126 --> 00:24:18,656
AVPlayerViewController in iOS.


817
00:24:18,706 --> 00:24:20,096
There's sample code illustrating


818
00:24:20,096 --> 00:24:21,936
all these concepts at our


819
00:24:21,936 --> 00:24:23,116
session website.


820
00:24:23,506 --> 00:24:24,756
And now, I'd like to hand things


821
00:24:24,756 --> 00:24:26,496
over to my colleague, Dan


822
00:24:26,496 --> 00:24:26,786
Wright.


823
00:24:28,516 --> 00:24:31,656
[ Applause ]


824
00:24:32,156 --> 00:24:33,266
>> All right.


825
00:24:33,806 --> 00:24:35,786
Let's talk about video playback


826
00:24:35,786 --> 00:24:36,476
on TV.


827
00:24:40,956 --> 00:24:44,086
On tvOS AVPlayerViewController


828
00:24:44,086 --> 00:24:45,796
supports full screen interactive


829
00:24:45,796 --> 00:24:48,106
playback with standard controls


830
00:24:48,106 --> 00:24:50,436
for navigation, information, and


831
00:24:50,436 --> 00:24:51,106
settings.


832
00:24:52,166 --> 00:24:53,376
Built in support for advanced


833
00:24:53,376 --> 00:24:54,796
Siri features such as "what did


834
00:24:54,796 --> 00:24:55,386
she say?"


835
00:24:56,116 --> 00:24:57,856
Publication of Now Playing info.


836
00:24:58,456 --> 00:25:00,386
Interstitials such as for ads.


837
00:25:00,846 --> 00:25:02,526
Content proposals, and more.


838
00:25:04,946 --> 00:25:06,796
So, what's new for tvOS 13?


839
00:25:08,436 --> 00:25:10,806
Since last year we've updated


840
00:25:10,806 --> 00:25:12,266
the appearance of the controls.


841
00:25:12,836 --> 00:25:14,896
And starting with tvOS 12.3,


842
00:25:14,896 --> 00:25:16,096
introduced fine precision


843
00:25:16,096 --> 00:25:16,506
scrubbing.


844
00:25:17,756 --> 00:25:19,406
Today, we're introducing custom


845
00:25:19,406 --> 00:25:21,496
interactive overlays, channel


846
00:25:21,496 --> 00:25:24,286
flipping for live streams, and


847
00:25:24,286 --> 00:25:25,536
automatic enforcement of


848
00:25:25,536 --> 00:25:26,976
parental content restrictions.


849
00:25:30,066 --> 00:25:31,586
Fine precision scrubbing makes


850
00:25:31,586 --> 00:25:32,786
it easier to use your Siri


851
00:25:32,786 --> 00:25:34,346
remote to find the precise


852
00:25:34,346 --> 00:25:35,706
moment in the video that you're


853
00:25:35,706 --> 00:25:36,356
looking for.


854
00:25:37,966 --> 00:25:39,266
PlayerViewController has always


855
00:25:39,326 --> 00:25:41,546
supported -- the scrubbing in


856
00:25:41,546 --> 00:25:42,616
PlayerViewController has always


857
00:25:42,616 --> 00:25:44,546
made it easy to navigate quickly


858
00:25:44,546 --> 00:25:45,656
across a wide range of your


859
00:25:45,656 --> 00:25:46,166
video.


860
00:25:46,706 --> 00:25:48,766
But now fine scrubbing makes it


861
00:25:48,766 --> 00:25:51,566
easier to find a very precise


862
00:25:51,566 --> 00:25:53,746
moment, like within about a


863
00:25:53,846 --> 00:25:54,936
second, as you're navigating.


864
00:25:56,046 --> 00:25:57,716
And of course, the info views


865
00:25:57,766 --> 00:25:59,336
have a new appearance to match


866
00:25:59,426 --> 00:26:01,966
the TV app.


867
00:26:03,736 --> 00:26:05,266
Custom interactive overlays


868
00:26:05,536 --> 00:26:07,486
support application controls.


869
00:26:08,076 --> 00:26:09,696
A custom overlay is normally


870
00:26:09,696 --> 00:26:10,106
hidden.


871
00:26:11,606 --> 00:26:13,766
A hint onscreen guides the user


872
00:26:13,896 --> 00:26:16,346
to swipe up, which presents your


873
00:26:16,346 --> 00:26:16,726
overlay.


874
00:26:17,336 --> 00:26:19,646
The overlay is fully


875
00:26:19,646 --> 00:26:21,196
interactive, and it can contain


876
00:26:21,196 --> 00:26:23,366
buttons, collections, or any


877
00:26:23,366 --> 00:26:25,296
other interactive elements that


878
00:26:25,296 --> 00:26:26,986
you like as defined by your view


879
00:26:26,986 --> 00:26:27,456
controller.


880
00:26:28,006 --> 00:26:31,516
And then you should, for


881
00:26:31,846 --> 00:26:33,046
persistent non-interactive


882
00:26:33,046 --> 00:26:34,626
elements like a channel logo,


883
00:26:34,626 --> 00:26:35,856
for example, you should continue


884
00:26:35,856 --> 00:26:37,686
to use the contentOverlayView


885
00:26:37,686 --> 00:26:37,753
too.


886
00:26:38,286 --> 00:26:41,776
Let's see what custom overlays


887
00:26:41,776 --> 00:26:42,196
look like.


888
00:26:42,816 --> 00:26:46,536
When the video begins, you have


889
00:26:46,536 --> 00:26:48,016
a hint at the bottom to guide


890
00:26:48,016 --> 00:26:49,096
them to swipe up for more.


891
00:26:49,506 --> 00:26:50,916
And when they swipe up, they get


892
00:26:50,916 --> 00:26:51,376
your overlay.


893
00:26:51,446 --> 00:26:53,036
Just like that.


894
00:26:53,226 --> 00:26:54,936
They can dismiss by swiping down


895
00:26:54,936 --> 00:26:56,336
or by clicking the Menu button.


896
00:27:01,456 --> 00:27:03,006
So, your view controller is


897
00:27:03,006 --> 00:27:03,606
presented.


898
00:27:03,676 --> 00:27:04,596
You get all the usual


899
00:27:04,596 --> 00:27:06,186
UIViewController notifications.


900
00:27:06,466 --> 00:27:08,556
We handle dismissal and


901
00:27:08,756 --> 00:27:09,876
animations.


902
00:27:10,176 --> 00:27:11,606
And your users get a consistent


903
00:27:12,116 --> 00:27:13,926
experience across applications.


904
00:27:14,196 --> 00:27:15,676
So all you need to do to use it


905
00:27:15,896 --> 00:27:17,276
is to define your view


906
00:27:17,276 --> 00:27:18,366
controller with the content that


907
00:27:18,366 --> 00:27:19,116
you want to display.


908
00:27:19,526 --> 00:27:19,946
And set the


909
00:27:19,946 --> 00:27:21,946
customOverlayViewController


910
00:27:21,946 --> 00:27:23,356
property on your player view


911
00:27:23,356 --> 00:27:23,836
controller.


912
00:27:29,326 --> 00:27:30,856
Live broadcast channel flipping.


913
00:27:32,706 --> 00:27:33,936
Channel flipping is for live


914
00:27:33,936 --> 00:27:34,476
streams.


915
00:27:34,476 --> 00:27:36,466
It provides support for flipping


916
00:27:36,466 --> 00:27:38,196
between multiple live streams.


917
00:27:38,196 --> 00:27:39,886
For example, different channels.


918
00:27:40,416 --> 00:27:43,366
The user swipes horizontally to


919
00:27:43,366 --> 00:27:44,746
go to the next or the previous


920
00:27:44,746 --> 00:27:45,336
channels.


921
00:27:46,136 --> 00:27:48,926
And a channel interstitial


922
00:27:48,966 --> 00:27:50,986
screen describes each channel


923
00:27:51,386 --> 00:27:54,406
while it loads.


924
00:27:54,526 --> 00:27:55,986
So let's see what channel


925
00:27:55,986 --> 00:27:56,776
flipping looks like.


926
00:27:57,476 --> 00:28:02,036
As the user swipes between


927
00:28:02,036 --> 00:28:03,436
channels, your channel


928
00:28:03,436 --> 00:28:04,646
interstitial view is shown.


929
00:28:05,456 --> 00:28:06,616
Here it has a simple green


930
00:28:06,616 --> 00:28:08,536
background, some text, and a


931
00:28:08,536 --> 00:28:09,526
loading indicator.


932
00:28:09,916 --> 00:28:11,526
But, that's entirely within your


933
00:28:11,526 --> 00:28:11,956
control.


934
00:28:11,956 --> 00:28:14,706
You can make it look whatever


935
00:28:14,706 --> 00:28:15,836
you like in there, including


936
00:28:15,836 --> 00:28:18,446
pictures, a gradient background,


937
00:28:18,446 --> 00:28:19,596
your custom spinner, whatever


938
00:28:19,596 --> 00:28:20,606
you like.


939
00:28:21,216 --> 00:28:24,506
The main thing is to orient your


940
00:28:24,816 --> 00:28:26,276
user to where they are and where


941
00:28:26,276 --> 00:28:26,676
they're going.


942
00:28:30,046 --> 00:28:31,436
And the one other thing I would


943
00:28:31,436 --> 00:28:32,236
add is that this a


944
00:28:32,236 --> 00:28:33,206
non-interactive screen.


945
00:28:33,206 --> 00:28:34,866
It's meant to guide the user to


946
00:28:34,866 --> 00:28:35,486
the next channel.


947
00:28:35,486 --> 00:28:36,656
So you shouldn't expect to have


948
00:28:36,656 --> 00:28:37,356
controls here.


949
00:28:37,966 --> 00:28:40,366
To support channel flipping,


950
00:28:40,656 --> 00:28:41,596
extend your


951
00:28:41,596 --> 00:28:43,166
AVPlayerViewControllerDelegate


952
00:28:43,746 --> 00:28:44,256
to implement


953
00:28:44,636 --> 00:28:45,506
playerViewController


954
00:28:45,506 --> 00:28:47,136
skipToNextChannel and


955
00:28:47,176 --> 00:28:48,236
skipToPreviousChannel.


956
00:28:49,616 --> 00:28:53,326
All these methods do is replace


957
00:28:53,326 --> 00:28:54,396
the content in your player view


958
00:28:54,396 --> 00:28:55,956
controller with that of the new


959
00:28:55,956 --> 00:28:56,376
channel.


960
00:28:56,936 --> 00:29:01,086
You can wait until the content


961
00:29:01,086 --> 00:29:02,196
is ready to play if you like.


962
00:29:03,306 --> 00:29:04,926
When you're done, call the


963
00:29:04,926 --> 00:29:05,696
completion block.


964
00:29:06,326 --> 00:29:07,786
Pass True if it was successful.


965
00:29:07,786 --> 00:29:08,986
And pass False if something


966
00:29:08,986 --> 00:29:09,396
failed.


967
00:29:10,606 --> 00:29:11,836
But whatever you do, make sure


968
00:29:11,836 --> 00:29:12,926
that you call that completion


969
00:29:12,926 --> 00:29:14,436
block eventually, because that's


970
00:29:14,436 --> 00:29:15,856
what's going to dismiss the


971
00:29:15,856 --> 00:29:16,756
channel interstitial.


972
00:29:19,846 --> 00:29:20,886
Now, there are two additional


973
00:29:20,886 --> 00:29:21,206
methods:


974
00:29:21,206 --> 00:29:22,506
nextChannelInterstitialView


975
00:29:22,506 --> 00:29:23,206
Controller and


976
00:29:23,386 --> 00:29:24,846
previousChannelInterstitialView


977
00:29:24,846 --> 00:29:25,396
Controller.


978
00:29:25,576 --> 00:29:27,926
And these are responsible for


979
00:29:27,926 --> 00:29:30,466
providing that view controller


980
00:29:30,466 --> 00:29:32,266
that displays between channels.


981
00:29:33,476 --> 00:29:36,076
So, you need to instantiate your


982
00:29:36,076 --> 00:29:37,176
view controller, if you have


983
00:29:37,176 --> 00:29:38,056
one, if you need to.


984
00:29:38,506 --> 00:29:40,386
And populate it with information


985
00:29:40,386 --> 00:29:41,196
about the new channel.


986
00:29:42,326 --> 00:29:43,456
And then just return it.


987
00:29:43,896 --> 00:29:45,006
In this example we're


988
00:29:45,006 --> 00:29:46,526
instantiating a new view


989
00:29:46,526 --> 00:29:47,626
controller every time.


990
00:29:47,986 --> 00:29:50,106
But in many cases, you could


991
00:29:50,136 --> 00:29:52,086
probably just instantiate it


992
00:29:52,086 --> 00:29:53,766
once and then reuse it.


993
00:29:58,316 --> 00:30:00,396
tvOS has built in support for


994
00:30:00,396 --> 00:30:02,056
restricting access to content


995
00:30:02,316 --> 00:30:04,646
using a passcode, or with a


996
00:30:04,646 --> 00:30:05,766
device profile.


997
00:30:06,066 --> 00:30:07,406
Device profiles are commonly


998
00:30:07,406 --> 00:30:09,756
used in a classroom setting or


999
00:30:09,756 --> 00:30:11,016
perhaps a business setting.


1000
00:30:12,066 --> 00:30:14,766
In tvOS 13, AVKit provides


1001
00:30:14,766 --> 00:30:16,876
automatic support to help your


1002
00:30:16,876 --> 00:30:18,566
users regain control of


1003
00:30:18,566 --> 00:30:19,896
restricted content.


1004
00:30:20,506 --> 00:30:23,766
So, to test content


1005
00:30:23,766 --> 00:30:25,866
restrictions, go to Settings,


1006
00:30:26,156 --> 00:30:26,976
Restrictions.


1007
00:30:30,076 --> 00:30:30,676
Turn them on.


1008
00:30:31,316 --> 00:30:33,466
Provide and confirm a passcode.


1009
00:30:36,046 --> 00:30:37,346
Then change the allowed content


1010
00:30:37,346 --> 00:30:40,526
rating under Movies, and/or TV


1011
00:30:40,526 --> 00:30:41,166
Shows.


1012
00:30:42,226 --> 00:30:43,406
In this case we'll change it to


1013
00:30:43,406 --> 00:30:43,976
PG-13.


1014
00:30:49,046 --> 00:30:51,436
So, what do you need to do to


1015
00:30:51,436 --> 00:30:53,036
actually support it in your app?


1016
00:30:53,426 --> 00:30:54,616
Well, the most important thing


1017
00:30:54,616 --> 00:30:55,806
is you need to specify the media


1018
00:30:55,806 --> 00:31:00,026
content rating in all of your


1019
00:31:00,026 --> 00:31:00,466
content.


1020
00:31:00,506 --> 00:31:02,006
If your asset does not have this


1021
00:31:02,006 --> 00:31:03,226
information, then you'll need to


1022
00:31:03,226 --> 00:31:05,116
add it using the external


1023
00:31:05,116 --> 00:31:05,996
metadata property of


1024
00:31:05,996 --> 00:31:06,756
AVPlayerItem.


1025
00:31:07,216 --> 00:31:08,676
And you're going to want to use


1026
00:31:08,676 --> 00:31:09,566
the iTunes metadata content


1027
00:31:09,566 --> 00:31:10,646
rating identifier.


1028
00:31:13,536 --> 00:31:14,446
You'll want to provide this


1029
00:31:14,446 --> 00:31:15,956
rating at the start of playback


1030
00:31:15,956 --> 00:31:18,866
so that AVKit can test whether


1031
00:31:18,866 --> 00:31:20,886
this is restricted content


1032
00:31:20,886 --> 00:31:22,956
according to the user settings.


1033
00:31:24,126 --> 00:31:25,716
And present the passcode to


1034
00:31:25,716 --> 00:31:26,626
screen if necessary.


1035
00:31:30,046 --> 00:31:31,016
Now, if the content is


1036
00:31:31,016 --> 00:31:32,486
restricted by passcode, the user


1037
00:31:32,486 --> 00:31:34,446
will be prompted to enter it.


1038
00:31:36,756 --> 00:31:38,386
If it is restricted by a device


1039
00:31:38,386 --> 00:31:39,566
profile, however, it could


1040
00:31:39,566 --> 00:31:40,936
simply fail to play entirely.


1041
00:31:40,936 --> 00:31:42,206
There may be no option for the


1042
00:31:42,206 --> 00:31:43,636
user to override.


1043
00:31:44,766 --> 00:31:46,676
Now, AVPlayerViewController will


1044
00:31:46,676 --> 00:31:48,326
request access automatically to


1045
00:31:48,376 --> 00:31:49,636
your content when playback


1046
00:31:49,636 --> 00:31:50,286
begins.


1047
00:31:50,836 --> 00:31:52,476
But you can request access


1048
00:31:52,476 --> 00:31:55,576
earlier using a new API request


1049
00:31:55,576 --> 00:31:56,906
playback restrictions


1050
00:31:56,906 --> 00:31:57,626
authorization.


1051
00:32:01,736 --> 00:32:03,416
And of course, any kind of


1052
00:32:03,496 --> 00:32:04,636
failure here, if the user


1053
00:32:04,636 --> 00:32:06,346
doesn't know the passcode or


1054
00:32:06,346 --> 00:32:07,176
doesn't want to enter the


1055
00:32:07,176 --> 00:32:08,946
passcode, or if it's a device


1056
00:32:08,996 --> 00:32:11,116
profile that prohibits it, the


1057
00:32:11,366 --> 00:32:12,616
player view controller will be


1058
00:32:12,616 --> 00:32:14,256
automatically dismissed.


1059
00:32:14,736 --> 00:32:17,626
And finally, if you have a


1060
00:32:17,626 --> 00:32:19,266
custom playback user interface,


1061
00:32:19,266 --> 00:32:20,866
you can also request access


1062
00:32:21,146 --> 00:32:23,246
using the aforementioned API to


1063
00:32:23,246 --> 00:32:23,946
restricted content.


1064
00:32:23,946 --> 00:32:27,876
Now let's take a look at what


1065
00:32:27,876 --> 00:32:29,436
the user sees when attempting to


1066
00:32:29,436 --> 00:32:30,776
play restricted content.


1067
00:32:31,386 --> 00:32:35,176
Now, the video's going to load.


1068
00:32:35,176 --> 00:32:36,236
And as soon as it's ready to


1069
00:32:36,296 --> 00:32:37,556
play and the metadata's


1070
00:32:37,556 --> 00:32:38,996
available, the passcode screen


1071
00:32:38,996 --> 00:32:40,596
is going to immediately appear.


1072
00:32:40,736 --> 00:32:41,856
And as soon as the user enters


1073
00:32:41,856 --> 00:32:44,586
the passcode, the passcode


1074
00:32:44,586 --> 00:32:45,766
screen is dismissed and the


1075
00:32:45,766 --> 00:32:46,696
video begins playing.


1076
00:32:46,696 --> 00:32:51,836
So let's take a look at how to


1077
00:32:51,836 --> 00:32:52,866
provide the media content


1078
00:32:52,866 --> 00:32:53,186
rating.


1079
00:32:54,456 --> 00:32:56,106
This metadata is sometimes part


1080
00:32:56,106 --> 00:32:57,086
of your assets.


1081
00:32:57,266 --> 00:32:59,146
But usually it is not.


1082
00:32:59,926 --> 00:33:01,146
So you will need to provide it


1083
00:33:01,146 --> 00:33:02,546
via the external metadata


1084
00:33:02,576 --> 00:33:04,146
property of the AVPlayerItem.


1085
00:33:04,716 --> 00:33:07,766
We've seen this code before in


1086
00:33:07,766 --> 00:33:08,856
previous presentations.


1087
00:33:08,856 --> 00:33:10,086
But we just have a helper


1088
00:33:10,086 --> 00:33:11,496
function here that takes our


1089
00:33:11,496 --> 00:33:13,266
rating in the form of a string


1090
00:33:13,566 --> 00:33:15,206
and returns and AVMetadataItem.


1091
00:33:16,176 --> 00:33:18,236
The value is that string.


1092
00:33:18,236 --> 00:33:19,706
The extended language tag is set


1093
00:33:19,706 --> 00:33:21,796
to und for Undefined because


1094
00:33:22,056 --> 00:33:22,996
it's not any particular


1095
00:33:22,996 --> 00:33:23,586
language.


1096
00:33:24,656 --> 00:33:26,296
Your identifier is the


1097
00:33:26,296 --> 00:33:27,706
iTunesMetadataContent Rating.


1098
00:33:28,796 --> 00:33:30,086
And then finally, once we've


1099
00:33:30,156 --> 00:33:31,576
created it, in this case with a


1100
00:33:31,576 --> 00:33:32,906
rating of PG-13,


1101
00:33:37,336 --> 00:33:40,306
we add it to the external


1102
00:33:40,306 --> 00:33:41,696
metadata property of the player


1103
00:33:43,046 --> 00:33:43,166
item.


1104
00:33:43,246 --> 00:33:45,316
Now, AVPlayerViewController will


1105
00:33:45,316 --> 00:33:46,506
prompt automatically, if


1106
00:33:46,506 --> 00:33:47,176
necessary.


1107
00:33:47,506 --> 00:33:48,826
But let's say you want to prompt


1108
00:33:48,826 --> 00:33:51,366
earlier before you present the


1109
00:33:51,366 --> 00:33:53,056
player view controller, or


1110
00:33:53,056 --> 00:33:54,666
perhaps before earlier content.


1111
00:33:55,316 --> 00:33:57,876
You can do this using the


1112
00:33:57,876 --> 00:33:59,296
requestPlayback Restrictions


1113
00:33:59,296 --> 00:34:00,616
Authorization API on


1114
00:34:00,616 --> 00:34:01,736
AVPlayerItem.


1115
00:34:02,296 --> 00:34:05,176
The closure will be called when


1116
00:34:05,176 --> 00:34:06,976
the request is complete to


1117
00:34:06,976 --> 00:34:08,045
indicate whether there the


1118
00:34:08,045 --> 00:34:10,235
request succeeded or failed.


1119
00:34:11,016 --> 00:34:13,266
And if it fails, the error


1120
00:34:13,266 --> 00:34:15,136
provides information about why


1121
00:34:15,136 --> 00:34:15,646
it failed.


1122
00:34:16,196 --> 00:34:18,176
If it succeeded, you should


1123
00:34:18,176 --> 00:34:20,666
proceed with playback.


1124
00:34:20,775 --> 00:34:22,906
Otherwise, you should cancel,


1125
00:34:23,386 --> 00:34:25,186
dismiss, go back to your menu


1126
00:34:25,186 --> 00:34:25,926
screen or whatever.


1127
00:34:26,306 --> 00:34:27,556
And don't try to play the


1128
00:34:27,556 --> 00:34:28,906
content again unless the use


1129
00:34:28,906 --> 00:34:30,826
explicitly requests it.


1130
00:34:35,166 --> 00:34:35,545
All right.


1131
00:34:35,545 --> 00:34:38,356
Let's do a brief demo and get a


1132
00:34:38,516 --> 00:34:39,446
closer look at some of this.


1133
00:34:45,646 --> 00:34:45,996
All right.


1134
00:34:46,065 --> 00:34:47,116
So we have our little sample


1135
00:34:47,116 --> 00:34:47,306
app.


1136
00:34:49,275 --> 00:34:51,206
These videos may be familiar to


1137
00:34:51,206 --> 00:34:52,025
some of you who have done


1138
00:34:52,025 --> 00:34:52,976
testing with HLS.


1139
00:34:54,926 --> 00:34:55,936
Here's our swipe up.


1140
00:34:55,936 --> 00:34:56,835
Swipe for more hints at the


1141
00:34:56,835 --> 00:34:57,286
bottom.


1142
00:34:57,376 --> 00:35:01,566
And if we swipe up, we get our


1143
00:35:02,136 --> 00:35:03,326
custom overlay.


1144
00:35:03,326 --> 00:35:04,986
And see that it actually works


1145
00:35:04,986 --> 00:35:05,376
and everything.


1146
00:35:05,586 --> 00:35:07,986
And I can just swipe down to get


1147
00:35:07,986 --> 00:35:08,846
rid of it.


1148
00:35:09,376 --> 00:35:10,846
And what else do we have here?


1149
00:35:12,426 --> 00:35:15,156
Well, if I press and keep my


1150
00:35:15,156 --> 00:35:16,586
finger down, we see the Hints on


1151
00:35:16,586 --> 00:35:17,666
the left and the right sides of


1152
00:35:17,666 --> 00:35:18,316
the screens.


1153
00:35:18,316 --> 00:35:19,726
Those are the arrows to guide


1154
00:35:19,726 --> 00:35:21,106
the user to channel flipping.


1155
00:35:21,376 --> 00:35:23,276
And if I just swipe -- see


1156
00:35:23,426 --> 00:35:25,266
what's going on next door.


1157
00:35:26,786 --> 00:35:29,196
>> Using some great design


1158
00:35:29,346 --> 00:35:29,876
patterns, including --


1159
00:35:29,876 --> 00:35:30,796
>> Oh yeah, it's the bottom part


1160
00:35:30,796 --> 00:35:32,586
is using a list to lay out --


1161
00:35:33,056 --> 00:35:34,976
>> In the last month --


1162
00:35:35,476 --> 00:35:36,006
>> Let's see.


1163
00:35:36,006 --> 00:35:37,016
What else do we have?


1164
00:35:37,016 --> 00:35:37,476
Is that it?


1165
00:35:37,476 --> 00:35:39,716
Oh, what's going on over here?


1166
00:35:41,516 --> 00:35:44,706
[ Laughter ]


1167
00:35:45,206 --> 00:35:45,626
All right.


1168
00:35:46,516 --> 00:35:51,786
[ Applause ]


1169
00:35:52,286 --> 00:35:52,616
>> All right.


1170
00:35:52,736 --> 00:35:53,746
So we have our little sample


1171
00:35:53,746 --> 00:35:53,966
app.


1172
00:35:56,366 --> 00:35:57,066
>> I passed me.


1173
00:35:57,066 --> 00:35:58,916
Let's go back to -- let's see --


1174
00:35:58,916 --> 00:36:00,826
back to the --


1175
00:36:01,576 --> 00:36:02,916
>> Here's our Swipe up bar for


1176
00:36:02,916 --> 00:36:03,936
more hints at the bottom.


1177
00:36:05,046 --> 00:36:08,396
And if we swipe up, we get our


1178
00:36:08,886 --> 00:36:10,516
custom overlay and see if it


1179
00:36:10,516 --> 00:36:10,976
actually works --


1180
00:36:11,296 --> 00:36:12,466
>> Let's pause.


1181
00:36:13,508 --> 00:36:15,508
[ Laughter ]


1182
00:36:18,146 --> 00:36:18,556
All right.


1183
00:36:18,556 --> 00:36:20,036
So let's take a moment to talk


1184
00:36:20,036 --> 00:36:21,466
about some best practices on


1185
00:36:21,466 --> 00:36:22,196
tvOS now.


1186
00:36:23,296 --> 00:36:25,116
Some of you already have


1187
00:36:25,116 --> 00:36:27,156
controls in your apps that are


1188
00:36:27,156 --> 00:36:28,276
revealed by swipe up.


1189
00:36:28,276 --> 00:36:30,116
Often, it's Up Next list.


1190
00:36:31,776 --> 00:36:32,946
And typically, you're doing this


1191
00:36:32,946 --> 00:36:34,376
by installing your own custom


1192
00:36:34,376 --> 00:36:36,676
swipe up gesture recognizer on


1193
00:36:36,676 --> 00:36:38,376
the player view or a super view.


1194
00:36:38,716 --> 00:36:39,946
And then presenting your view


1195
00:36:39,946 --> 00:36:40,516
controller.


1196
00:36:41,086 --> 00:36:41,906
Well, if you're doing that, we


1197
00:36:41,906 --> 00:36:44,056
want to encourage you to migrate


1198
00:36:44,056 --> 00:36:45,646
to using a custom overlay


1199
00:36:45,776 --> 00:36:46,346
instead.


1200
00:36:47,366 --> 00:36:49,516
What that gets you is much


1201
00:36:49,516 --> 00:36:50,906
better compatibility in the


1202
00:36:50,906 --> 00:36:52,786
future -- hint.


1203
00:36:53,346 --> 00:36:56,086
And a better and more consistent


1204
00:36:56,086 --> 00:36:57,526
experience for your users across


1205
00:36:57,526 --> 00:36:58,336
applications.


1206
00:36:58,916 --> 00:37:03,566
If you're using a UI tap gesture


1207
00:37:03,566 --> 00:37:05,636
recognizer on the Menu button to


1208
00:37:05,636 --> 00:37:08,326
detect dismissal of your player


1209
00:37:08,326 --> 00:37:11,236
view controller, or in some


1210
00:37:11,276 --> 00:37:14,786
cases to provide the dismissal


1211
00:37:14,786 --> 00:37:18,106
animation, you should use the


1212
00:37:18,106 --> 00:37:19,136
delegate to dismissal


1213
00:37:19,136 --> 00:37:20,476
notifications instead.


1214
00:37:20,786 --> 00:37:22,726
We introduced those in tvOS 11.


1215
00:37:23,036 --> 00:37:23,926
And they should give you all the


1216
00:37:23,926 --> 00:37:24,996
information that you need.


1217
00:37:25,586 --> 00:37:27,196
This is important because it's


1218
00:37:27,196 --> 00:37:28,676
no longer the case that the only


1219
00:37:28,676 --> 00:37:30,426
way that your play view


1220
00:37:30,426 --> 00:37:31,636
controller can be dismissed is


1221
00:37:31,666 --> 00:37:32,836
by the user hitting the Menu


1222
00:37:32,836 --> 00:37:33,176
button.


1223
00:37:33,566 --> 00:37:34,816
It could now be automatically


1224
00:37:34,816 --> 00:37:35,356
dismissed.


1225
00:37:39,456 --> 00:37:40,886
I've said this one before, but


1226
00:37:40,886 --> 00:37:42,446
showsPlaybackControls should not


1227
00:37:42,446 --> 00:37:44,026
be abused to try to force


1228
00:37:44,026 --> 00:37:44,966
immediate change in the


1229
00:37:44,966 --> 00:37:46,386
visibility of the controls.


1230
00:37:46,786 --> 00:37:47,306
The purpose of


1231
00:37:47,306 --> 00:37:48,896
showsPlaybackControls is to


1232
00:37:48,896 --> 00:37:50,936
configure the player view


1233
00:37:50,936 --> 00:37:52,536
controller to indicate whether


1234
00:37:52,536 --> 00:37:54,446
you want the user to have access


1235
00:37:54,446 --> 00:37:56,546
to the playback controls at all.


1236
00:37:59,786 --> 00:38:00,946
Provide media content ratings


1237
00:38:00,946 --> 00:38:01,936
for all of your content.


1238
00:38:02,686 --> 00:38:05,456
And of course, test with


1239
00:38:05,816 --> 00:38:07,086
parental content restrictions


1240
00:38:07,086 --> 00:38:07,516
enabled.


1241
00:38:08,276 --> 00:38:09,566
Most of you will have no issues,


1242
00:38:09,566 --> 00:38:11,216
but you might find that there's


1243
00:38:11,216 --> 00:38:12,296
something that you're doing that


1244
00:38:12,296 --> 00:38:13,456
doesn't work very well when a


1245
00:38:13,456 --> 00:38:14,696
passcode stream comes up.


1246
00:38:14,996 --> 00:38:16,506
For example, if you display a


1247
00:38:16,506 --> 00:38:17,966
hint for a few seconds at the


1248
00:38:17,966 --> 00:38:20,056
start of playback, you would


1249
00:38:20,056 --> 00:38:21,946
want to not do that while the


1250
00:38:21,946 --> 00:38:24,026
passcode is covering it or the


1251
00:38:24,026 --> 00:38:25,406
user won't see it.


1252
00:38:27,316 --> 00:38:29,476
So in summary, adopt


1253
00:38:29,476 --> 00:38:31,506
AVPlayerViewController across


1254
00:38:31,506 --> 00:38:32,126
platform.


1255
00:38:32,126 --> 00:38:34,816
You get great functionality on


1256
00:38:34,966 --> 00:38:37,336
iOS and on tvOS for a very low


1257
00:38:37,336 --> 00:38:37,936
cost.


1258
00:38:38,846 --> 00:38:41,216
And a wide range of


1259
00:38:41,216 --> 00:38:43,066
compatibility for remotes and


1260
00:38:43,066 --> 00:38:43,806
other features.


1261
00:38:45,986 --> 00:38:46,176
Use


1262
00:38:46,176 --> 00:38:47,536
AVPlayerViewControllerDelegate


1263
00:38:47,536 --> 00:38:49,026
notifications to track


1264
00:38:49,026 --> 00:38:50,456
presentation state, as seen


1265
00:38:50,456 --> 00:38:52,556
today on iOS, and to handle


1266
00:38:52,556 --> 00:38:54,256
dismissal, as on tvOS.


1267
00:38:54,676 --> 00:38:57,656
Observe the player item status


1268
00:38:57,656 --> 00:38:58,616
and handle errors.


1269
00:39:00,476 --> 00:39:02,696
Use external metadata, now on


1270
00:39:02,696 --> 00:39:06,626
both iOS and tvOS in addition to


1271
00:39:06,626 --> 00:39:08,206
some of these uses we've seen


1272
00:39:08,206 --> 00:39:09,476
today for parental content


1273
00:39:09,476 --> 00:39:10,606
restrictions and in the info


1274
00:39:10,606 --> 00:39:11,076
panel.


1275
00:39:11,386 --> 00:39:12,806
External metadata is also used


1276
00:39:12,806 --> 00:39:14,106
to publish Now Playing info,


1277
00:39:14,486 --> 00:39:15,656
which means that if you use


1278
00:39:15,656 --> 00:39:16,746
external metadata on both


1279
00:39:16,746 --> 00:39:18,546
platforms, you can now remove


1280
00:39:18,546 --> 00:39:20,126
all of your Now Playing info


1281
00:39:20,386 --> 00:39:20,886
support.


1282
00:39:23,756 --> 00:39:26,426
If you have a custom overlay on


1283
00:39:26,426 --> 00:39:27,966
a swipe up action, migrate it --


1284
00:39:28,136 --> 00:39:29,306
I'm sorry -- if you swipe up


1285
00:39:29,306 --> 00:39:31,056
action presenting an overlay,


1286
00:39:31,056 --> 00:39:32,306
migrate to custom overlays.


1287
00:39:33,106 --> 00:39:34,406
And finally, support parental


1288
00:39:34,406 --> 00:39:35,286
content restrictions.


1289
00:39:37,076 --> 00:39:38,706
So, for more information,


1290
00:39:38,706 --> 00:39:39,926
including sample code for this


1291
00:39:39,926 --> 00:39:41,856
session, visit our session page


1292
00:39:41,856 --> 00:39:43,026
at the URL on the screen.


1293
00:39:43,666 --> 00:39:45,306
And come with your questions and


1294
00:39:45,306 --> 00:39:47,876
your code to the AVKit Lab at


1295
00:39:47,876 --> 00:39:49,576
2:00 p.m. today or to the


1296
00:39:49,576 --> 00:39:51,406
AVFoundation lab at 4:00.


1297
00:39:52,116 --> 00:39:53,486
Thank you, and enjoy the rest of


1298
00:39:53,486 --> 00:39:53,896
conferences.


1299
00:39:54,516 --> 00:39:57,500
[ Applause ]

